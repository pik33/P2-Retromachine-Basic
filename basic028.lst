00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic028.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 27
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 F4 93 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec E0 7D 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 74 7B 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 E8 6B 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 54 6E 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 B8 69 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 B8 D6 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 94 75 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 2C 08 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 DC 2F 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 94 2D 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 6C 3F 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 04 63 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     1B E4 05 F1 | 	add	objptr, ##63003
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     64 E4 85 F1 | 	sub	objptr, ##63076
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     04 CF B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     64 E4 05 F1 | 	add	objptr, ##63076
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     64 E4 85 F1 | 	sub	objptr, ##63076
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     DC CE B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     64 E4 05 F1 | 	add	objptr, ##63076
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     64 E4 85 F1 | 	sub	objptr, ##63076
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     B4 CE B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     64 E4 05 F1 | 	add	objptr, ##63076
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     64 E4 85 F1 | 	sub	objptr, ##63076
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     DC E5 05 F1 | 	add	objptr, ##62940
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     E4 E5 85 F1 | 	sub	objptr, ##62948
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     48 C4 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     98 C4 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     88 C4 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     EC E5 05 F1 | 	add	objptr, ##62956
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7B 00 00 FF 
009ac     08 E4 85 F1 | 	sub	objptr, ##62984
009b0     EC C3 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     EC E5 05 F1 | 	add	objptr, ##62956
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7B 00 00 FF 
00a08     08 E4 85 F1 | 	sub	objptr, ##62984
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     0C E4 05 F1 | 	add	objptr, ##44556
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     57 00 00 FF 
00a3c     0C E4 85 F1 | 	sub	objptr, ##44556
00a40     DC EE B1 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     14 EE B1 FD | 	call	#__system__LTrim_S
00a4c     57 00 00 FF 
00a50     10 E4 05 F1 | 	add	objptr, ##44560
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     24 00 00 FF 
00a68     6C E4 05 F1 | 	add	objptr, ##18540
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     11 00 00 FF 
00a74     14 E4 85 F1 | 	sub	objptr, ##8724
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     6A 00 00 FF 
00a80     6C E4 85 F1 | 	sub	objptr, ##54380
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     54 00 00 FF 
00abc     FC E5 05 F1 | 	add	objptr, ##43516
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     65 01 00 FF 
00ad4     8A 16 06 F6 | 	mov	arg03, ##@LR__4627
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     57 00 00 FF 
00b14     0C E4 85 F1 | 	sub	objptr, ##44556
00b18     04 EE B1 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     3C ED B1 FD | 	call	#__system__LTrim_S
00b24     57 00 00 FF 
00b28     0C E4 05 F1 | 	add	objptr, ##44556
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     65 01 00 FF 
00b34     8B 24 06 F6 | 	mov	local04, ##@LR__4628
00b38     24 00 00 FF 
00b3c     B4 E4 05 F1 | 	add	objptr, ##18612
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     24 00 00 FF 
00b48     B4 E4 85 F1 | 	sub	objptr, ##18612
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     57 00 00 FF 
00b54     0C E4 85 F1 | 	sub	objptr, ##44556
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     7B 00 00 FF 
00b74     C4 E4 05 F1 | 	add	objptr, ##63172
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     7B 00 00 FF 
00b80     C4 E4 85 F1 | 	sub	objptr, ##63172
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     7B 00 00 FF 
00b8c     C8 E4 05 F1 | 	add	objptr, ##63176
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     24 00 00 FF 
00b9c     BC E4 85 F1 | 	sub	objptr, ##18620
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     57 00 00 FF 
00ba8     0C E4 85 F1 | 	sub	objptr, ##44556
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     57 00 00 FF 
00bd8     0C E4 05 F1 | 	add	objptr, ##44556
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     57 00 00 FF 
00be4     0C E4 85 F1 | 	sub	objptr, ##44556
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     B4 E9 B1 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     65 01 00 FF 
00bfc     8C 14 06 F6 | 	mov	arg02, ##@LR__4629
00c00     70 C8 B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     7B 00 00 FF 
00c10     C8 E4 05 F1 | 	add	objptr, ##63176
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     7B 00 00 FF 
00c1c     C8 E4 85 F1 | 	sub	objptr, ##63176
00c20     7B 00 00 AF 
00c24     C8 E4 05 A1 |  if_e	add	objptr, ##63176
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     7B 00 00 AF 
00c30     C8 E4 85 A1 |  if_e	sub	objptr, ##63176
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     57 00 00 FF 
00c3c     0C E4 05 F1 | 	add	objptr, ##44556
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     57 00 00 FF 
00c48     0C E4 85 F1 | 	sub	objptr, ##44556
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     50 E9 B1 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     65 01 00 FF 
00c60     8E 14 06 F6 | 	mov	arg02, ##@LR__4630
00c64     0C C8 B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     7B 00 00 AF 
00c70     C8 E4 05 A1 |  if_e	add	objptr, ##63176
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     7B 00 00 AF 
00c7c     C8 E4 85 A1 |  if_e	sub	objptr, ##63176
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     7B 00 00 AF 
00c88     C8 E4 05 A1 |  if_e	add	objptr, ##63176
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     7B 00 00 AF 
00c94     C8 E4 85 A1 |  if_e	sub	objptr, ##63176
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     54 00 00 FF 
00ca4     FC E5 05 F1 | 	add	objptr, ##43516
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     26 00 00 FF 
00cb4     CC E4 05 F1 | 	add	objptr, ##19660
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     7B 00 00 FF 
00cc0     C8 E4 85 F1 | 	sub	objptr, ##63176
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     57 00 00 FF 
00cdc     0C E4 05 F1 | 	add	objptr, ##44556
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     57 00 00 FF 
00ce8     0C E4 85 F1 | 	sub	objptr, ##44556
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     B0 E8 B1 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     65 01 00 FF 
00d00     90 2E 06 F6 | 	mov	local09, ##@LR__4631
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     68 C7 B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     54 00 00 FF 
00d20     FC E5 05 F1 | 	add	objptr, ##43516
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     54 00 00 FF 
00d40     FC E5 85 F1 | 	sub	objptr, ##43516
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     7B 00 00 FF 
00d4c     C4 E4 05 F1 | 	add	objptr, ##63172
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     7B 00 00 FF 
00d58     C4 E4 85 F1 | 	sub	objptr, ##63172
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     7B 00 00 FF 
00d70     C4 E4 05 F1 | 	add	objptr, ##63172
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     7B 00 00 FF 
00d7c     C4 E4 85 F1 | 	sub	objptr, ##63172
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     57 00 00 FF 
00d8c     0C E4 05 F1 | 	add	objptr, ##44556
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     57 00 00 FF 
00d98     0C E4 85 F1 | 	sub	objptr, ##44556
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     50 E7 B1 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     50 EB B1 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     88 EA B1 FD | 	call	#__system__LTrim_S
00dd8     7B 00 00 FF 
00ddc     CC E4 05 F1 | 	add	objptr, ##63180
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     24 00 00 FF 
00de8     C0 E4 85 F1 | 	sub	objptr, ##18624
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     57 00 00 FF 
00df4     0C E4 85 F1 | 	sub	objptr, ##44556
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     8C E6 B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     14 EB B1 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     4C EA B1 FD | 	call	#__system__LTrim_S
00e14     57 00 00 FF 
00e18     0C E4 05 F1 | 	add	objptr, ##44556
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     57 00 00 FF 
00e24     0C E4 85 F1 | 	sub	objptr, ##44556
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     65 01 00 FF 
00e30     92 24 06 F6 | 	mov	local04, ##@LR__4632
00e34     7B 00 00 FF 
00e38     CC E4 05 F1 | 	add	objptr, ##63180
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     7B 00 00 FF 
00e44     CC E4 85 F1 | 	sub	objptr, ##63180
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     57 00 00 FF 
00e4c     14 E4 05 F1 | 	add	objptr, ##44564
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     57 00 00 FF 
00e58     14 E4 85 F1 | 	sub	objptr, ##44564
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     7B 00 00 FF 
00e6c     CC E4 05 F1 | 	add	objptr, ##63180
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     7B 00 00 FF 
00e78     CC E4 85 F1 | 	sub	objptr, ##63180
00e7c     65 01 00 FF 
00e80     93 14 06 F6 | 	mov	arg02, ##@LR__4633
00e84     EC C5 B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     57 00 00 5F 
00e90     14 E4 05 51 |  if_ne	add	objptr, ##44564
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     57 00 00 5F 
00e9c     14 E4 85 51 |  if_ne	sub	objptr, ##44564
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     57 00 00 FF 
00ea8     14 E4 05 F1 | 	add	objptr, ##44564
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     57 00 00 FF 
00eb4     14 E4 85 F1 | 	sub	objptr, ##44564
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     7B 00 00 FF 
00ec8     CC E4 05 F1 | 	add	objptr, ##63180
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     7B 00 00 FF 
00ed4     CC E4 85 F1 | 	sub	objptr, ##63180
00ed8     65 01 00 FF 
00edc     94 14 06 F6 | 	mov	arg02, ##@LR__4634
00ee0     90 C5 B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     57 00 00 AF 
00eec     14 E4 05 A1 |  if_e	add	objptr, ##44564
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     57 00 00 AF 
00ef8     14 E4 85 A1 |  if_e	sub	objptr, ##44564
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     57 00 00 FF 
00f04     14 E4 05 F1 | 	add	objptr, ##44564
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     57 00 00 FF 
00f10     14 E4 85 F1 | 	sub	objptr, ##44564
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     7B 00 00 FF 
00f20     CC E4 05 F1 | 	add	objptr, ##63180
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     7B 00 00 FF 
00f2c     CC E4 85 F1 | 	sub	objptr, ##63180
00f30     65 01 00 FF 
00f34     95 14 06 F6 | 	mov	arg02, ##@LR__4635
00f38     38 C5 B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     57 00 00 5F 
00f44     14 E4 05 51 |  if_ne	add	objptr, ##44564
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     57 00 00 5F 
00f50     14 E4 85 51 |  if_ne	sub	objptr, ##44564
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     57 00 00 FF 
00f5c     14 E4 05 F1 | 	add	objptr, ##44564
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     57 00 00 FF 
00f68     14 E4 85 F1 | 	sub	objptr, ##44564
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     7B 00 00 FF 
00f78     CC E4 05 F1 | 	add	objptr, ##63180
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     7B 00 00 FF 
00f84     CC E4 85 F1 | 	sub	objptr, ##63180
00f88     65 01 00 FF 
00f8c     96 14 06 F6 | 	mov	arg02, ##@LR__4636
00f90     E0 C4 B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     57 00 00 AF 
00f9c     14 E4 05 A1 |  if_e	add	objptr, ##44564
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     57 00 00 AF 
00fa8     14 E4 85 A1 |  if_e	sub	objptr, ##44564
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     57 00 00 FF 
00fc8     0C E4 05 F1 | 	add	objptr, ##44556
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     57 00 00 FF 
00fd4     0C E4 85 F1 | 	sub	objptr, ##44556
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     C4 E5 B1 FD | 	call	#__system__Mid_S
00fe4     7B 00 00 FF 
00fe8     D0 E4 05 F1 | 	add	objptr, ##63184
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     7B 00 00 FF 
00ff8     D0 E4 85 F1 | 	sub	objptr, ##63184
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     7B 00 00 FF 
01028     C4 E4 05 F1 | 	add	objptr, ##63172
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     7B 00 00 FF 
01034     C4 E4 85 F1 | 	sub	objptr, ##63172
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     7B 00 00 FF 
01084     D8 E4 05 F1 | 	add	objptr, ##63192
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     7B 00 00 FF 
010b8     D8 E4 85 F1 | 	sub	objptr, ##63192
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     57 00 00 FF 
010cc     0C E4 05 F1 | 	add	objptr, ##44556
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     24 00 00 FF 
010d8     CC E4 05 F1 | 	add	objptr, ##18636
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     7B 00 00 FF 
010e4     D8 E4 85 F1 | 	sub	objptr, ##63192
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     B8 E4 B1 FD | 	call	#__system__Mid_S
010f0     7B 00 00 FF 
010f4     E0 E4 05 F1 | 	add	objptr, ##63200
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     7B 00 00 FF 
01100     E0 E4 85 F1 | 	sub	objptr, ##63200
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     65 01 00 FF 
0110c     97 14 06 F6 | 	mov	arg02, ##@LR__4637
01110     60 C3 B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     54 00 00 FF 
01128     FC E5 05 F1 | 	add	objptr, ##43516
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     26 00 00 FF 
01134     E4 E4 05 F1 | 	add	objptr, ##19684
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     7B 00 00 FF 
01140     E0 E4 85 F1 | 	sub	objptr, ##63200
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     57 00 00 FF 
01150     0C E4 05 F1 | 	add	objptr, ##44556
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     24 00 00 FF 
0115c     CC E4 05 F1 | 	add	objptr, ##18636
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     7B 00 00 FF 
0117c     D8 E4 85 F1 | 	sub	objptr, ##63192
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     18 E4 B1 FD | 	call	#__system__Mid_S
01190     7B 00 00 FF 
01194     E0 E4 05 F1 | 	add	objptr, ##63200
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     7B 00 00 FF 
011a0     E0 E4 85 F1 | 	sub	objptr, ##63200
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     65 01 00 FF 
011ac     98 14 06 F6 | 	mov	arg02, ##@LR__4638
011b0     C0 C2 B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     54 00 00 FF 
011c8     FC E5 05 F1 | 	add	objptr, ##43516
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     26 00 00 FF 
011d4     E4 E4 05 F1 | 	add	objptr, ##19684
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     7B 00 00 FF 
011e0     E0 E4 85 F1 | 	sub	objptr, ##63200
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     54 00 00 FF 
01204     FC E5 05 F1 | 	add	objptr, ##43516
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     65 01 00 FF 
01214     99 14 06 F6 | 	mov	arg02, ##@LR__4639
01218     54 00 00 FF 
0121c     FC E5 85 F1 | 	sub	objptr, ##43516
01220     50 C2 B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     54 00 00 FF 
01244     FC E5 05 F1 | 	add	objptr, ##43516
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     26 00 00 FF 
01254     E4 E4 05 F1 | 	add	objptr, ##19684
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     26 00 00 FF 
01268     E4 E4 85 F1 | 	sub	objptr, ##19684
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     54 00 00 FF 
01284     FC E5 85 F1 | 	sub	objptr, ##43516
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     14 C2 B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     54 00 00 FF 
012c4     FC E5 05 F1 | 	add	objptr, ##43516
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     54 00 00 FF 
0131c     FC E5 85 F1 | 	sub	objptr, ##43516
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     7B 00 00 FF 
0132c     E0 E4 05 F1 | 	add	objptr, ##63200
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     7B 00 00 FF 
01338     E0 E4 85 F1 | 	sub	objptr, ##63200
0133c     65 01 00 FF 
01340     9B 14 06 F6 | 	mov	arg02, ##@LR__4640
01344     2C C1 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     7B 00 00 FF 
01358     E0 E4 05 F1 | 	add	objptr, ##63200
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     7B 00 00 FF 
01364     E0 E4 85 F1 | 	sub	objptr, ##63200
01368     65 01 00 FF 
0136c     9D 14 06 F6 | 	mov	arg02, ##@LR__4641
01370     00 C1 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     54 00 00 FF 
01398     FC E5 05 F1 | 	add	objptr, ##43516
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     54 00 00 FF 
013ac     FC E5 85 F1 | 	sub	objptr, ##43516
013b0     64 E1 B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     65 01 00 FF 
013bc     9F 14 06 F6 | 	mov	arg02, ##@LR__4642
013c0     B0 C0 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     54 00 00 FF 
013dc     FC E5 05 F1 | 	add	objptr, ##43516
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     54 00 00 FF 
013f4     FC E5 85 F1 | 	sub	objptr, ##43516
013f8     94 E0 B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     65 01 00 FF 
01404     A1 14 06 F6 | 	mov	arg02, ##@LR__4643
01408     68 C0 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     54 00 00 FF 
01420     FC E5 05 F1 | 	add	objptr, ##43516
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     54 00 00 FF 
0146c     FC E5 85 F1 | 	sub	objptr, ##43516
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     7C E0 B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     FC BF B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     54 00 00 FF 
014dc     FC E5 05 F1 | 	add	objptr, ##43516
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     54 00 00 FF 
01534     FC E5 85 F1 | 	sub	objptr, ##43516
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     54 00 00 FF 
01560     FC E5 05 F1 | 	add	objptr, ##43516
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     26 00 00 FF 
01570     EC E4 05 F1 | 	add	objptr, ##19692
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     26 00 00 FF 
01588     EC E4 85 F1 | 	sub	objptr, ##19692
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     26 00 00 FF 
01598     F0 E4 05 F1 | 	add	objptr, ##19696
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     7B 00 00 FF 
015ac     E8 E4 85 F1 | 	sub	objptr, ##63208
015b0     65 01 00 FF 
015b4     A3 14 06 F6 | 	mov	arg02, ##@LR__4644
015b8     B8 BE B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     7B 00 00 FF 
015c8     E8 E4 05 F1 | 	add	objptr, ##63208
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     7B 00 00 FF 
015d4     E8 E4 85 F1 | 	sub	objptr, ##63208
015d8     65 01 00 FF 
015dc     A5 14 06 F6 | 	mov	arg02, ##@LR__4645
015e0     90 BE B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     7B 00 00 FF 
015f0     E8 E4 05 F1 | 	add	objptr, ##63208
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     7B 00 00 FF 
015fc     E8 E4 85 F1 | 	sub	objptr, ##63208
01600     65 01 00 FF 
01604     A7 14 06 F6 | 	mov	arg02, ##@LR__4646
01608     68 BE B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     7B 00 00 FF 
01618     E8 E4 05 F1 | 	add	objptr, ##63208
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     7B 00 00 FF 
01624     E8 E4 85 F1 | 	sub	objptr, ##63208
01628     65 01 00 FF 
0162c     A9 32 06 F6 | 	mov	local11, ##@LR__4647
01630     19 15 02 F6 | 	mov	arg02, local11
01634     3C BE B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     7B 00 00 FF 
01644     E8 E4 05 F1 | 	add	objptr, ##63208
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     7B 00 00 FF 
01650     E8 E4 85 F1 | 	sub	objptr, ##63208
01654     65 01 00 FF 
01658     AB 30 06 F6 | 	mov	local10, ##@LR__4648
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     0C BE B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     7B 00 00 FF 
01674     E8 E4 05 F1 | 	add	objptr, ##63208
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     7B 00 00 FF 
01680     E8 E4 85 F1 | 	sub	objptr, ##63208
01684     65 01 00 FF 
01688     AD 30 06 F6 | 	mov	local10, ##@LR__4649
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     E0 BD B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     7B 00 00 FF 
016a0     E8 E4 05 F1 | 	add	objptr, ##63208
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     7B 00 00 FF 
016ac     E8 E4 85 F1 | 	sub	objptr, ##63208
016b0     65 01 00 FF 
016b4     AF 36 06 F6 | 	mov	local13, ##@LR__4650
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     B4 BD B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     7B 00 00 FF 
016cc     EC E4 05 F1 | 	add	objptr, ##63212
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     7B 00 00 FF 
016d8     EC E4 85 F1 | 	sub	objptr, ##63212
016dc     65 01 00 FF 
016e0     B1 4A 06 F6 | 	mov	local23, ##@LR__4651
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     84 BD B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     7B 00 00 FF 
016fc     E8 E4 05 F1 | 	add	objptr, ##63208
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     7B 00 00 FF 
01708     E8 E4 85 F1 | 	sub	objptr, ##63208
0170c     65 01 00 FF 
01710     B3 4A 06 F6 | 	mov	local23, ##@LR__4652
01714     25 15 02 F6 | 	mov	arg02, local23
01718     58 BD B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     7B 00 00 FF 
01728     EC E4 05 F1 | 	add	objptr, ##63212
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     7B 00 00 FF 
01734     EC E4 85 F1 | 	sub	objptr, ##63212
01738     65 01 00 FF 
0173c     B5 44 06 F6 | 	mov	local20, ##@LR__4653
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     28 BD B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     7B 00 00 FF 
01758     E8 E4 05 F1 | 	add	objptr, ##63208
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     7B 00 00 FF 
01764     E8 E4 85 F1 | 	sub	objptr, ##63208
01768     65 01 00 FF 
0176c     B7 44 06 F6 | 	mov	local20, ##@LR__4654
01770     22 15 02 F6 | 	mov	arg02, local20
01774     FC BC B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     7B 00 00 FF 
01784     EC E4 05 F1 | 	add	objptr, ##63212
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     7B 00 00 FF 
01790     EC E4 85 F1 | 	sub	objptr, ##63212
01794     65 01 00 FF 
01798     B9 4C 06 F6 | 	mov	local24, ##@LR__4655
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     CC BC B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     7B 00 00 FF 
017b4     E8 E4 05 F1 | 	add	objptr, ##63208
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     7B 00 00 FF 
017c0     E8 E4 85 F1 | 	sub	objptr, ##63208
017c4     65 01 00 FF 
017c8     BB 4E 06 F6 | 	mov	local25, ##@LR__4656
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     9C BC B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     7B 00 00 FF 
017e4     EC E4 05 F1 | 	add	objptr, ##63212
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     7B 00 00 FF 
017f0     EC E4 85 F1 | 	sub	objptr, ##63212
017f4     65 01 00 FF 
017f8     BD 50 06 F6 | 	mov	local26, ##@LR__4657
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     6C BC B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     54 00 00 FF 
0181c     FC E5 05 F1 | 	add	objptr, ##43516
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     26 00 00 FF 
01828     EC E4 05 F1 | 	add	objptr, ##19692
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     7B 00 00 FF 
0183c     EC E4 85 F1 | 	sub	objptr, ##63212
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     5C BC B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     54 00 00 FF 
0187c     FC E5 05 F1 | 	add	objptr, ##43516
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     54 00 00 FF 
018e0     FC E5 85 F1 | 	sub	objptr, ##43516
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     54 00 00 FF 
0191c     FC E5 05 F1 | 	add	objptr, ##43516
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     54 00 00 FF 
01944     FC E5 85 F1 | 	sub	objptr, ##43516
01948     D4 DF B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     0C DF B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     54 00 00 FF 
01978     FC E5 05 F1 | 	add	objptr, ##43516
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     54 00 00 FF 
01988     FC E5 85 F1 | 	sub	objptr, ##43516
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     54 00 00 FF 
019ec     FC E5 05 F1 | 	add	objptr, ##43516
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     54 00 00 FF 
01a54     FC E5 85 F1 | 	sub	objptr, ##43516
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     54 00 00 FF 
01a98     FC E5 05 F1 | 	add	objptr, ##43516
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     54 00 00 FF 
01aac     FC E5 85 F1 | 	sub	objptr, ##43516
01ab0     DC D9 B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     65 01 00 FF 
01abc     BF 14 06 F6 | 	mov	arg02, ##@LR__4658
01ac0     B0 B9 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     54 00 00 FF 
01ad8     FC E5 05 F1 | 	add	objptr, ##43516
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     54 00 00 FF 
01aec     FC E5 85 F1 | 	sub	objptr, ##43516
01af0     24 DA B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     65 01 00 FF 
01afc     C1 14 06 F6 | 	mov	arg02, ##@LR__4659
01b00     70 B9 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     54 00 00 FF 
01b18     FC E5 05 F1 | 	add	objptr, ##43516
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     54 00 00 FF 
01b38     FC E5 85 F1 | 	sub	objptr, ##43516
01b3c     60 DC B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     54 00 00 FF 
01b70     FC E5 05 F1 | 	add	objptr, ##43516
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     54 00 00 FF 
01b8c     FC E5 85 F1 | 	sub	objptr, ##43516
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     54 00 00 FF 
01b98     FC E5 05 F1 | 	add	objptr, ##43516
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     54 00 00 FF 
01ba4     FC E5 85 F1 | 	sub	objptr, ##43516
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     54 00 00 FF 
01bc8     FC E5 05 F1 | 	add	objptr, ##43516
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     54 00 00 FF 
01bd4     FC E5 85 F1 | 	sub	objptr, ##43516
01bd8     00 36 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     7B 00 00 5F 
01be4     F0 E4 05 51 |  if_ne	add	objptr, ##63216
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     7B 00 00 FF 
01bf0     F0 E4 E5 F3 | 	sumnz	objptr, ##63216
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     7B 00 00 AF 
01bfc     F0 E4 85 A1 |  if_e	sub	objptr, ##63216
01c00     7B 00 00 FF 
01c04     F0 E4 05 F1 | 	add	objptr, ##63216
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     26 00 00 FF 
01c14     F4 E4 85 F1 | 	sub	objptr, ##19700
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     26 00 00 FF 
01c24     F8 E4 05 F1 | 	add	objptr, ##19704
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     26 00 00 FF 
01c3c     F4 E4 85 F1 | 	sub	objptr, ##19700
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     65 01 00 FF 
01c50     C3 16 06 F6 | 	mov	arg03, ##@LR__4660
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     54 00 00 FF 
01c5c     FC E5 85 F1 | 	sub	objptr, ##43516
01c60     74 DD B1 FD | 	call	#__system__Instr
01c64     7B 00 00 FF 
01c68     F8 E4 05 F1 | 	add	objptr, ##63224
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     7B 00 00 FF 
01c78     F8 E4 85 F1 | 	sub	objptr, ##63224
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     7B 00 00 FF 
01c88     F0 E4 05 F1 | 	add	objptr, ##63216
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     26 00 00 FF 
01c98     F4 E4 85 F1 | 	sub	objptr, ##19700
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     54 00 00 FF 
01cac     FC E5 85 F1 | 	sub	objptr, ##43516
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     7B 00 00 FF 
01cd0     F8 E4 05 F1 | 	add	objptr, ##63224
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     7B 00 00 FF 
01cdc     F8 E4 85 F1 | 	sub	objptr, ##63224
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     7B 00 00 FF 
01cf4     F0 E4 05 F1 | 	add	objptr, ##63216
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     26 00 00 FF 
01d04     F4 E4 85 F1 | 	sub	objptr, ##19700
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     26 00 00 FF 
01d6c     F4 E4 05 F1 | 	add	objptr, ##19700
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     26 00 00 FF 
01d84     F4 E4 85 F1 | 	sub	objptr, ##19700
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     26 00 00 FF 
01d9c     F4 E4 05 F1 | 	add	objptr, ##19700
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     26 00 00 FF 
01db0     F4 E4 85 F1 | 	sub	objptr, ##19700
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     54 00 00 FF 
01dc4     FC E5 85 F1 | 	sub	objptr, ##43516
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     7B 00 00 FF 
01de8     F8 E4 05 F1 | 	add	objptr, ##63224
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     7B 00 00 FF 
01df4     F8 E4 85 F1 | 	sub	objptr, ##63224
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     14 D7 B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     7B 00 00 FF 
01e0c     F0 E4 05 F1 | 	add	objptr, ##63216
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     26 00 00 FF 
01e20     F4 E4 85 F1 | 	sub	objptr, ##19700
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     26 00 00 FF 
01e40     FC E4 05 F1 | 	add	objptr, ##19708
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     7B 00 00 FF 
01e4c     F8 E4 85 F1 | 	sub	objptr, ##63224
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     34 D6 B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     7B 00 00 FF 
01e64     F0 E4 05 F1 | 	add	objptr, ##63216
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     26 00 00 FF 
01e74     F4 E4 85 F1 | 	sub	objptr, ##19700
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     54 00 00 FF 
01e88     FC E5 85 F1 | 	sub	objptr, ##43516
01e8c     00 D6 B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     65 01 00 FF 
01e98     C5 14 06 F6 | 	mov	arg02, ##@LR__4661
01e9c     D4 B5 B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     7B 00 00 FF 
01eac     F0 E4 05 F1 | 	add	objptr, ##63216
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     26 00 00 FF 
01ebc     F4 E4 85 F1 | 	sub	objptr, ##19700
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     54 00 00 FF 
01ed0     FC E5 85 F1 | 	sub	objptr, ##43516
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     7B 00 00 FF 
01f00     F0 E4 05 F1 | 	add	objptr, ##63216
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     26 00 00 FF 
01f10     F4 E4 85 F1 | 	sub	objptr, ##19700
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     26 00 00 FF 
01f78     F4 E4 05 F1 | 	add	objptr, ##19700
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     26 00 00 FF 
01f90     F4 E4 85 F1 | 	sub	objptr, ##19700
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     26 00 00 FF 
01fa8     F4 E4 05 F1 | 	add	objptr, ##19700
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     26 00 00 FF 
01fc4     F4 E4 85 F1 | 	sub	objptr, ##19700
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     54 00 00 FF 
01fd8     FC E5 85 F1 | 	sub	objptr, ##43516
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     08 D5 B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     7B 00 00 FF 
02018     F0 E4 05 F1 | 	add	objptr, ##63216
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     26 00 00 FF 
02028     F4 E4 85 F1 | 	sub	objptr, ##19700
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     65 01 00 FF 
02034     C7 32 06 F6 | 	mov	local11, ##@LR__4662
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     54 00 00 FF 
02040     FC E5 85 F1 | 	sub	objptr, ##43516
02044                 | LR__0107
02044     7B 00 00 FF 
02048     F0 E4 05 F1 | 	add	objptr, ##63216
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     26 00 00 FF 
02058     F4 E4 85 F1 | 	sub	objptr, ##19700
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     26 00 00 FF 
02068     F8 E4 05 F1 | 	add	objptr, ##19704
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     7B 00 00 FF 
02074     F4 E4 85 F1 | 	sub	objptr, ##63220
02078     65 01 00 FF 
0207c     C9 14 06 F6 | 	mov	arg02, ##@LR__4663
02080     19 13 02 F6 | 	mov	arg01, local11
02084     EC B3 B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     7B 00 00 FF 
02094     F4 E4 05 F1 | 	add	objptr, ##63220
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     7B 00 00 FF 
020a0     F4 E4 85 F1 | 	sub	objptr, ##63220
020a4     65 01 00 FF 
020a8     CF 14 06 F6 | 	mov	arg02, ##@LR__4664
020ac     C4 B3 B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     7B 00 00 FF 
020bc     F4 E4 05 F1 | 	add	objptr, ##63220
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     7B 00 00 FF 
020c8     F4 E4 85 F1 | 	sub	objptr, ##63220
020cc     65 01 00 FF 
020d0     D6 14 06 F6 | 	mov	arg02, ##@LR__4665
020d4     9C B3 B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     7B 00 00 FF 
020e4     F0 E4 05 F1 | 	add	objptr, ##63216
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     26 00 00 FF 
020f8     F4 E4 85 F1 | 	sub	objptr, ##19700
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     65 01 00 FF 
02108     DC 14 06 F6 | 	mov	arg02, ##@LR__4666
0210c     54 00 00 FF 
02110     FC E5 85 F1 | 	sub	objptr, ##43516
02114     5C B3 B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     7B 00 00 FF 
02124     F0 E4 05 F1 | 	add	objptr, ##63216
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     26 00 00 FF 
02138     F4 E4 85 F1 | 	sub	objptr, ##19700
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     65 01 00 FF 
02144     DF 32 06 F6 | 	mov	local11, ##@LR__4667
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     26 00 00 FF 
02150     F4 E4 05 F1 | 	add	objptr, ##19700
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     26 00 00 FF 
02164     F4 E4 85 F1 | 	sub	objptr, ##19700
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     54 00 00 FF 
0217c     FC E5 85 F1 | 	sub	objptr, ##43516
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     7B 00 00 FF 
02184     F0 E4 05 F1 | 	add	objptr, ##63216
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     26 00 00 FF 
02198     F4 E4 85 F1 | 	sub	objptr, ##19700
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     65 01 00 FF 
021ac     E1 14 06 F6 | 	mov	arg02, ##@LR__4668
021b0     54 00 00 FF 
021b4     FC E5 85 F1 | 	sub	objptr, ##43516
021b8     B8 B2 B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     7B 00 00 FF 
021c8     F0 E4 05 F1 | 	add	objptr, ##63216
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     26 00 00 FF 
021dc     F4 E4 85 F1 | 	sub	objptr, ##19700
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     65 01 00 FF 
021e8     E5 32 06 F6 | 	mov	local11, ##@LR__4669
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     26 00 00 FF 
021f4     F4 E4 05 F1 | 	add	objptr, ##19700
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     26 00 00 FF 
02208     F4 E4 85 F1 | 	sub	objptr, ##19700
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     54 00 00 FF 
02224     FC E5 85 F1 | 	sub	objptr, ##43516
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     7B 00 00 FF 
0222c     F4 E4 05 F1 | 	add	objptr, ##63220
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     7B 00 00 FF 
02238     F4 E4 85 F1 | 	sub	objptr, ##63220
0223c     65 01 00 FF 
02240     E7 14 06 F6 | 	mov	arg02, ##@LR__4670
02244     2C B2 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     7B 00 00 FF 
02254     F4 E4 05 F1 | 	add	objptr, ##63220
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     7B 00 00 FF 
02260     F4 E4 85 F1 | 	sub	objptr, ##63220
02264     65 01 00 FF 
02268     EC 14 06 F6 | 	mov	arg02, ##@LR__4671
0226c     04 B2 B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     7B 00 00 FF 
0227c     F0 E4 05 F1 | 	add	objptr, ##63216
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     26 00 00 FF 
02290     F4 E4 85 F1 | 	sub	objptr, ##19700
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     65 01 00 FF 
022a0     EF 14 06 F6 | 	mov	arg02, ##@LR__4672
022a4     54 00 00 FF 
022a8     FC E5 85 F1 | 	sub	objptr, ##43516
022ac     C4 B1 B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     7B 00 00 FF 
022bc     F0 E4 05 F1 | 	add	objptr, ##63216
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     26 00 00 FF 
022d0     F4 E4 85 F1 | 	sub	objptr, ##19700
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     65 01 00 FF 
022dc     F5 32 06 F6 | 	mov	local11, ##@LR__4673
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     54 00 00 FF 
022e8     FC E5 85 F1 | 	sub	objptr, ##43516
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     7B 00 00 FF 
022f0     F0 E4 05 F1 | 	add	objptr, ##63216
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     26 00 00 FF 
02304     F4 E4 85 F1 | 	sub	objptr, ##19700
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     65 01 00 FF 
02314     F7 14 06 F6 | 	mov	arg02, ##@LR__4674
02318     54 00 00 FF 
0231c     FC E5 85 F1 | 	sub	objptr, ##43516
02320     50 B1 B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     7B 00 00 FF 
02330     F0 E4 05 F1 | 	add	objptr, ##63216
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     26 00 00 FF 
02344     F4 E4 85 F1 | 	sub	objptr, ##19700
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     65 01 00 FF 
02350     00 33 06 F6 | 	mov	local11, ##@LR__4675
02354     13 33 62 FC | 	wrlong	local11, local05
02358     54 00 00 FF 
0235c     FC E5 85 F1 | 	sub	objptr, ##43516
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     7B 00 00 FF 
02364     F0 E4 05 F1 | 	add	objptr, ##63216
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     26 00 00 FF 
02378     F4 E4 85 F1 | 	sub	objptr, ##19700
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     65 01 00 FF 
02388     02 15 06 F6 | 	mov	arg02, ##@LR__4676
0238c     54 00 00 FF 
02390     FC E5 85 F1 | 	sub	objptr, ##43516
02394     DC B0 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     7B 00 00 FF 
023a4     F0 E4 05 F1 | 	add	objptr, ##63216
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     26 00 00 FF 
023b8     F4 E4 85 F1 | 	sub	objptr, ##19700
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     65 01 00 FF 
023c4     0B 33 06 F6 | 	mov	local11, ##@LR__4677
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     54 00 00 FF 
023d0     FC E5 85 F1 | 	sub	objptr, ##43516
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     7B 00 00 FF 
023d8     F0 E4 05 F1 | 	add	objptr, ##63216
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     26 00 00 FF 
023ec     F4 E4 85 F1 | 	sub	objptr, ##19700
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     65 01 00 FF 
023fc     0D 15 06 F6 | 	mov	arg02, ##@LR__4678
02400     54 00 00 FF 
02404     FC E5 85 F1 | 	sub	objptr, ##43516
02408     68 B0 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     7B 00 00 FF 
02418     F0 E4 05 F1 | 	add	objptr, ##63216
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     26 00 00 FF 
0242c     F4 E4 85 F1 | 	sub	objptr, ##19700
02430     F2 26 02 F1 | 	add	local05, objptr
02434     65 01 00 FF 
02438     16 33 06 F6 | 	mov	local11, ##@LR__4679
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     54 00 00 FF 
02444     FC E5 85 F1 | 	sub	objptr, ##43516
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     7B 00 00 FF 
0244c     F0 E4 05 F1 | 	add	objptr, ##63216
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     26 00 00 FF 
02460     F4 E4 85 F1 | 	sub	objptr, ##19700
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     65 01 00 FF 
02474     18 15 06 F6 | 	mov	arg02, ##@LR__4680
02478     54 00 00 FF 
0247c     FC E5 85 F1 | 	sub	objptr, ##43516
02480     F0 AF B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     7B 00 00 FF 
02490     F0 E4 05 F1 | 	add	objptr, ##63216
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     26 00 00 FF 
024a4     F4 E4 85 F1 | 	sub	objptr, ##19700
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     65 01 00 FF 
024b0     1B 33 06 F6 | 	mov	local11, ##@LR__4681
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     54 00 00 FF 
024bc     FC E5 85 F1 | 	sub	objptr, ##43516
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     54 00 00 FF 
024dc     FC E5 05 F1 | 	add	objptr, ##43516
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     54 00 00 FF 
02500     FC E5 85 F1 | 	sub	objptr, ##43516
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     54 00 00 FF 
02520     FC E5 05 F1 | 	add	objptr, ##43516
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     54 00 00 FF 
02538     FC E5 85 F1 | 	sub	objptr, ##43516
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     54 00 00 FF 
0254c     FC E5 05 F1 | 	add	objptr, ##43516
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     54 00 00 FF 
02570     FC E5 85 F1 | 	sub	objptr, ##43516
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     54 00 00 FF 
02590     FC E5 05 F1 | 	add	objptr, ##43516
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     54 00 00 FF 
025a8     FC E5 85 F1 | 	sub	objptr, ##43516
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     FC E5 05 F1 | 	add	objptr, ##43516
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     54 00 00 FF 
025e0     FC E5 85 F1 | 	sub	objptr, ##43516
025e4                 | ' 
025e4                 | ' select case s
025e4     65 01 00 FF 
025e8     FC 15 06 F6 | 	mov	arg02, ##@LR__4752
025ec     84 AE B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     54 00 00 FF 
02614     FC E5 05 F1 | 	add	objptr, ##43516
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     54 00 00 FF 
0262c     FC E5 85 F1 | 	sub	objptr, ##43516
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     54 00 00 FF 
02640     FC E5 05 F1 | 	add	objptr, ##43516
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     54 00 00 FF 
02664     FC E5 85 F1 | 	sub	objptr, ##43516
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     54 00 00 FF 
02684     FC E5 05 F1 | 	add	objptr, ##43516
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     54 00 00 FF 
0269c     FC E5 85 F1 | 	sub	objptr, ##43516
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     54 00 00 FF 
026b0     FC E5 05 F1 | 	add	objptr, ##43516
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     54 00 00 FF 
026d4     FC E5 85 F1 | 	sub	objptr, ##43516
026d8     5C 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     54 00 00 FF 
026f4     FC E5 05 F1 | 	add	objptr, ##43516
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     54 00 00 FF 
0270c     FC E5 85 F1 | 	sub	objptr, ##43516
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     54 00 00 FF 
02720     FC E5 05 F1 | 	add	objptr, ##43516
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     54 00 00 FF 
02744     FC E5 85 F1 | 	sub	objptr, ##43516
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     54 00 00 FF 
02760     FC E5 05 F1 | 	add	objptr, ##43516
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     54 00 00 FF 
02778     FC E5 85 F1 | 	sub	objptr, ##43516
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     54 00 00 FF 
0278c     FC E5 05 F1 | 	add	objptr, ##43516
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     54 00 00 FF 
027a4     FC E5 85 F1 | 	sub	objptr, ##43516
027a8     A8 64 B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     54 00 00 FF 
027bc     FC E5 05 F1 | 	add	objptr, ##43516
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     54 00 00 FF 
027cc     FC E5 85 F1 | 	sub	objptr, ##43516
027d0     B4 CE B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     54 00 00 FF 
027e8     FC E5 05 F1 | 	add	objptr, ##43516
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     54 00 00 FF 
02800     FC E5 85 F1 | 	sub	objptr, ##43516
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     54 00 00 FF 
02814     FC E5 05 F1 | 	add	objptr, ##43516
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     54 00 00 FF 
02824     FC E5 85 F1 | 	sub	objptr, ##43516
02828     80 25 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     7B 00 00 FF 
02834     FC E4 05 F1 | 	add	objptr, ##63228
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     26 00 00 FF 
02848     00 E5 85 F1 | 	sub	objptr, ##19712
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     54 00 00 FF 
02858     FC E5 85 F1 | 	sub	objptr, ##43516
0285c     24 28 B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     7B 00 00 FF 
02868     00 E5 05 F1 | 	add	objptr, ##63232
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     26 00 00 FF 
0287c     04 E5 85 F1 | 	sub	objptr, ##19716
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     54 00 00 FF 
02890     FC E5 85 F1 | 	sub	objptr, ##43516
02894     44 29 B0 FD | 	call	#_isdec
02898     7B 00 00 FF 
0289c     04 E5 05 F1 | 	add	objptr, ##63236
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     7B 00 00 FF 
028b0     FC E4 85 F1 | 	sub	objptr, ##63228
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     7B 00 00 FF 
028bc     00 E5 05 F1 | 	add	objptr, ##63232
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     7B 00 00 FF 
028c8     00 E5 85 F1 | 	sub	objptr, ##63232
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     7B 00 00 FF 
028d4     04 E5 05 F1 | 	add	objptr, ##63236
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     7B 00 00 FF 
028e0     04 E5 85 F1 | 	sub	objptr, ##63236
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     54 00 00 FF 
028f8     FC E5 05 F1 | 	add	objptr, ##43516
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     54 00 00 FF 
02910     FC E5 85 F1 | 	sub	objptr, ##43516
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     7B 00 00 FF 
0291c     FC E4 05 F1 | 	add	objptr, ##63228
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     7B 00 00 FF 
02928     FC E4 85 F1 | 	sub	objptr, ##63228
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     7B 00 00 FF 
02934     00 E5 05 F1 | 	add	objptr, ##63232
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     7B 00 00 FF 
02940     00 E5 85 F1 | 	sub	objptr, ##63232
02944     7B 00 00 5F 
02948     04 E5 05 51 |  if_ne	add	objptr, ##63236
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     7B 00 00 5F 
02954     04 E5 85 51 |  if_ne	sub	objptr, ##63236
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     54 00 00 FF 
02974     FC E5 05 F1 | 	add	objptr, ##43516
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     54 00 00 FF 
0298c     FC E5 85 F1 | 	sub	objptr, ##43516
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     7B 00 00 FF 
02998     FC E4 05 F1 | 	add	objptr, ##63228
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     7B 00 00 FF 
029a4     FC E4 85 F1 | 	sub	objptr, ##63228
029a8     7B 00 00 5F 
029ac     00 E5 05 51 |  if_ne	add	objptr, ##63232
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     7B 00 00 5F 
029b8     00 E5 85 51 |  if_ne	sub	objptr, ##63232
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     7B 00 00 5F 
029c8     04 E5 05 51 |  if_ne	add	objptr, ##63236
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     7B 00 00 5F 
029d4     04 E5 85 51 |  if_ne	sub	objptr, ##63236
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     54 00 00 FF 
029f4     FC E5 05 F1 | 	add	objptr, ##43516
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     54 00 00 FF 
02a0c     FC E5 85 F1 | 	sub	objptr, ##43516
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     54 00 00 FF 
02a20     FC E5 05 F1 | 	add	objptr, ##43516
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     54 00 00 FF 
02a30     FC E5 85 F1 | 	sub	objptr, ##43516
02a34     64 28 B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     54 00 00 FF 
02a4c     FC E5 05 F1 | 	add	objptr, ##43516
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     54 00 00 FF 
02aa4     FC E5 85 F1 | 	sub	objptr, ##43516
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     D0 CA B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     54 00 00 FF 
02af0     FC E5 05 F1 | 	add	objptr, ##43516
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     54 00 00 FF 
02b00     FC E5 85 F1 | 	sub	objptr, ##43516
02b04     30 20 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     54 00 00 FF 
02b20     FC E5 05 F1 | 	add	objptr, ##43516
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     54 00 00 FF 
02b38     FC E5 85 F1 | 	sub	objptr, ##43516
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     54 00 00 FF 
02b50     FC E5 05 F1 | 	add	objptr, ##43516
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     65 01 00 FF 
02b74     1D 29 06 F6 | 	mov	local06, ##@LR__4682
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     16 00 00 FF 
02b8c     A4 E4 05 F1 | 	add	objptr, ##11428
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     7B 00 00 FF 
02b98     F4 E4 85 F1 | 	sub	objptr, ##63220
02b9c     65 01 00 FF 
02ba0     1E 2F 06 F6 | 	mov	local09, ##@LR__4683
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     C8 A8 B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     7B 00 00 FF 
02bb8     F4 E4 05 F1 | 	add	objptr, ##63220
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     7B 00 00 FF 
02bc4     F4 E4 85 F1 | 	sub	objptr, ##63220
02bc8     65 01 00 FF 
02bcc     23 27 06 F6 | 	mov	local05, ##@LR__4684
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     98 A8 B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     7B 00 00 FF 
02be8     F4 E4 05 F1 | 	add	objptr, ##63220
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     7B 00 00 FF 
02bf4     F4 E4 85 F1 | 	sub	objptr, ##63220
02bf8     65 01 00 FF 
02bfc     28 29 06 F6 | 	mov	local06, ##@LR__4685
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     68 A8 B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     7B 00 00 FF 
02c18     F4 E4 05 F1 | 	add	objptr, ##63220
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     7B 00 00 FF 
02c24     F4 E4 85 F1 | 	sub	objptr, ##63220
02c28     65 01 00 FF 
02c2c     2D 33 06 F6 | 	mov	local11, ##@LR__4686
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     38 A8 B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     7B 00 00 FF 
02c48     F4 E4 05 F1 | 	add	objptr, ##63220
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     7B 00 00 FF 
02c54     F4 E4 85 F1 | 	sub	objptr, ##63220
02c58     65 01 00 FF 
02c5c     31 31 06 F6 | 	mov	local10, ##@LR__4687
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     08 A8 B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     7B 00 00 FF 
02c78     F4 E4 05 F1 | 	add	objptr, ##63220
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     7B 00 00 FF 
02c84     F4 E4 85 F1 | 	sub	objptr, ##63220
02c88     65 01 00 FF 
02c8c     35 31 06 F6 | 	mov	local10, ##@LR__4688
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     DC A7 B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     7B 00 00 FF 
02ca4     F4 E4 05 F1 | 	add	objptr, ##63220
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     7B 00 00 FF 
02cb0     F4 E4 85 F1 | 	sub	objptr, ##63220
02cb4     65 01 00 FF 
02cb8     38 35 06 F6 | 	mov	local12, ##@LR__4689
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     AC A7 B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     7B 00 00 FF 
02cd4     F0 E4 05 F1 | 	add	objptr, ##63216
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     26 00 00 FF 
02cf4     F4 E4 85 F1 | 	sub	objptr, ##19700
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     54 00 00 FF 
02d1c     FC E5 85 F1 | 	sub	objptr, ##43516
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     7B 00 00 FF 
02d28     F0 E4 05 F1 | 	add	objptr, ##63216
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     26 00 00 FF 
02d40     F4 E4 85 F1 | 	sub	objptr, ##19700
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     54 00 00 FF 
02d68     FC E5 85 F1 | 	sub	objptr, ##43516
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     54 00 00 FF 
02d70     FC E5 05 F1 | 	add	objptr, ##43516
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     54 00 00 FF 
02d7c     FC E5 85 F1 | 	sub	objptr, ##43516
02d80     58 24 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     54 00 00 FF 
02d90     FC E5 05 F1 | 	add	objptr, ##43516
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     54 00 00 FF 
02d9c     FC E5 85 F1 | 	sub	objptr, ##43516
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     98 D8 B1 FD | 	call	#__system____builtin_atoi
02da8     7B 00 00 FF 
02dac     80 E4 05 F1 | 	add	objptr, ##63104
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     7B 00 00 FF 
02db8     80 E4 85 F1 | 	sub	objptr, ##63104
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     7B 00 00 FF 
02dc0     80 E4 05 F1 | 	add	objptr, ##63104
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     7B 00 00 FF 
02dcc     80 E4 85 F1 | 	sub	objptr, ##63104
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     57 00 00 AF 
02de0     14 E4 05 A1 |  if_e	add	objptr, ##44564
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     57 00 00 AF 
02dec     14 E4 85 A1 |  if_e	sub	objptr, ##44564
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     7B 00 00 FF 
02dfc     80 E4 05 F1 | 	add	objptr, ##63104
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     7B 00 00 FF 
02e08     80 E4 85 F1 | 	sub	objptr, ##63104
02e0c     F0 24 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     7B 00 00 FF 
02e18     80 E4 05 F1 | 	add	objptr, ##63104
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     7B 00 00 FF 
02e24     80 E4 85 F1 | 	sub	objptr, ##63104
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     57 00 00 FF 
02e34     14 E4 05 F1 | 	add	objptr, ##44564
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     57 00 00 FF 
02e40     14 E4 85 F1 | 	sub	objptr, ##44564
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     57 00 00 FF 
02e50     14 E4 05 F1 | 	add	objptr, ##44564
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     57 00 00 FF 
02e5c     14 E4 85 F1 | 	sub	objptr, ##44564
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     55 00 00 FF 
02e70     10 E4 05 F1 | 	add	objptr, ##43536
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     55 00 00 FF 
02e7c     10 E4 85 F1 | 	sub	objptr, ##43536
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     7B 00 00 FF 
02e90     80 E4 05 F1 | 	add	objptr, ##63104
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     24 00 00 FF 
02e9c     6C E4 85 F1 | 	sub	objptr, ##18540
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     57 00 00 FF 
02ea8     14 E4 85 F1 | 	sub	objptr, ##44564
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     8C 38 B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     48 61 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     7B 00 00 FF 
02ecc     CC E4 05 F1 | 	add	objptr, ##63180
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     7B 00 00 FF 
02ed8     CC E4 85 F1 | 	sub	objptr, ##63180
02edc     65 01 00 FF 
02ee0     3C 15 06 F6 | 	mov	arg02, ##@LR__4690
02ee4     8C A5 B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     7B 00 00 FF 
02ef4     CC E4 05 F1 | 	add	objptr, ##63180
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     24 00 00 FF 
02f00     C0 E4 85 F1 | 	sub	objptr, ##18624
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     57 00 00 FF 
02f14     14 E4 85 F1 | 	sub	objptr, ##44564
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     7B 00 00 FF 
02f20     80 E4 05 F1 | 	add	objptr, ##63104
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     7B 00 00 FF 
02f2c     80 E4 85 F1 | 	sub	objptr, ##63104
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     57 00 00 FF 
02f3c     14 E4 05 F1 | 	add	objptr, ##44564
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     57 00 00 FF 
02f48     14 E4 85 F1 | 	sub	objptr, ##44564
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     57 00 00 FF 
02f58     14 E4 05 F1 | 	add	objptr, ##44564
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     57 00 00 FF 
02f64     14 E4 85 F1 | 	sub	objptr, ##44564
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     55 00 00 FF 
02f78     08 E4 05 F1 | 	add	objptr, ##43528
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     55 00 00 FF 
02f84     08 E4 85 F1 | 	sub	objptr, ##43528
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     7B 00 00 FF 
02f98     80 E4 05 F1 | 	add	objptr, ##63104
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     24 00 00 FF 
02fa4     6C E4 85 F1 | 	sub	objptr, ##18540
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     57 00 00 FF 
02fb0     14 E4 85 F1 | 	sub	objptr, ##44564
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     84 37 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     40 60 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     7B 00 00 FF 
02fd4     CC E4 05 F1 | 	add	objptr, ##63180
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     7B 00 00 FF 
02fe0     CC E4 85 F1 | 	sub	objptr, ##63180
02fe4     65 01 00 FF 
02fe8     3D 15 06 F6 | 	mov	arg02, ##@LR__4691
02fec     84 A4 B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     7B 00 00 FF 
02ffc     CC E4 05 F1 | 	add	objptr, ##63180
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     24 00 00 FF 
03008     C0 E4 85 F1 | 	sub	objptr, ##18624
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     57 00 00 FF 
0301c     14 E4 85 F1 | 	sub	objptr, ##44564
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     7B 00 00 FF 
03028     80 E4 05 F1 | 	add	objptr, ##63104
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     7B 00 00 FF 
03034     80 E4 85 F1 | 	sub	objptr, ##63104
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     57 00 00 FF 
03044     14 E4 05 F1 | 	add	objptr, ##44564
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     57 00 00 FF 
03050     14 E4 85 F1 | 	sub	objptr, ##44564
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     57 00 00 FF 
0305c     14 E4 05 F1 | 	add	objptr, ##44564
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     57 00 00 FF 
03068     14 E4 85 F1 | 	sub	objptr, ##44564
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     55 00 00 FF 
0307c     10 E4 05 F1 | 	add	objptr, ##43536
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     55 00 00 FF 
03088     10 E4 85 F1 | 	sub	objptr, ##43536
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     7B 00 00 FF 
0309c     80 E4 05 F1 | 	add	objptr, ##63104
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     24 00 00 FF 
030a8     6C E4 85 F1 | 	sub	objptr, ##18540
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     57 00 00 FF 
030b4     14 E4 85 F1 | 	sub	objptr, ##44564
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     50 37 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     7B 00 00 FF 
030c4     CC E4 05 F1 | 	add	objptr, ##63180
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     7B 00 00 FF 
030d0     CC E4 85 F1 | 	sub	objptr, ##63180
030d4     65 01 00 FF 
030d8     3E 15 06 F6 | 	mov	arg02, ##@LR__4692
030dc     94 A3 B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     7B 00 00 FF 
030ec     CC E4 05 F1 | 	add	objptr, ##63180
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     24 00 00 FF 
030f8     C0 E4 85 F1 | 	sub	objptr, ##18624
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     57 00 00 FF 
0310c     14 E4 85 F1 | 	sub	objptr, ##44564
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     7B 00 00 FF 
03118     80 E4 05 F1 | 	add	objptr, ##63104
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     7B 00 00 FF 
03124     80 E4 85 F1 | 	sub	objptr, ##63104
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     57 00 00 FF 
03134     14 E4 05 F1 | 	add	objptr, ##44564
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     57 00 00 FF 
03140     14 E4 85 F1 | 	sub	objptr, ##44564
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     57 00 00 5F 
0314c     14 E4 05 51 |  if_ne	add	objptr, ##44564
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     57 00 00 5F 
03158     14 E4 85 51 |  if_ne	sub	objptr, ##44564
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     55 00 00 AF 
03164     08 E4 05 A1 |  if_e	add	objptr, ##43528
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     55 00 00 AF 
03170     08 E4 85 A1 |  if_e	sub	objptr, ##43528
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     7B 00 00 FF 
03184     80 E4 05 F1 | 	add	objptr, ##63104
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     24 00 00 FF 
03190     6C E4 85 F1 | 	sub	objptr, ##18540
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     57 00 00 FF 
0319c     14 E4 85 F1 | 	sub	objptr, ##44564
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     68 36 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     7B 00 00 FF 
031ac     CC E4 05 F1 | 	add	objptr, ##63180
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     7B 00 00 FF 
031b8     CC E4 85 F1 | 	sub	objptr, ##63180
031bc     65 01 00 FF 
031c0     3F 15 06 F6 | 	mov	arg02, ##@LR__4693
031c4     AC A2 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     7B 00 00 FF 
031d4     CC E4 05 F1 | 	add	objptr, ##63180
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     24 00 00 FF 
031e0     C0 E4 85 F1 | 	sub	objptr, ##18624
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     57 00 00 FF 
031f4     14 E4 85 F1 | 	sub	objptr, ##44564
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     55 00 00 FF 
03200     00 E4 05 F1 | 	add	objptr, ##43520
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     55 00 00 FF 
0320c     00 E4 85 F1 | 	sub	objptr, ##43520
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     55 00 00 AF 
0321c     08 E4 05 A1 |  if_e	add	objptr, ##43528
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     55 00 00 AF 
03228     08 E4 85 A1 |  if_e	sub	objptr, ##43528
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     CC 35 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     55 00 00 FF 
0324c     00 E4 05 F1 | 	add	objptr, ##43520
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     55 00 00 FF 
03258     00 E4 85 F1 | 	sub	objptr, ##43520
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     55 00 00 AF 
03268     08 E4 05 A1 |  if_e	add	objptr, ##43528
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     55 00 00 AF 
03274     08 E4 85 A1 |  if_e	sub	objptr, ##43528
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     54 FB B1 FD | 	call	#__system___getiolock_0473
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     BC A1 B1 FD | 	call	#__system___lockmem
03290     65 01 00 FF 
03294     40 15 06 F6 | 	mov	arg02, ##@LR__4694
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     AC AE B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     44 AE B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     20 FB B1 FD | 	call	#__system___getiolock_0473
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     6C 34 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     C0 6D B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     18 5D B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     7B 00 00 FF 
032f8     CC E4 05 F1 | 	add	objptr, ##63180
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     7B 00 00 FF 
03304     CC E4 85 F1 | 	sub	objptr, ##63180
03308     65 01 00 FF 
0330c     6F 15 06 F6 | 	mov	arg02, ##@LR__4695
03310     60 A1 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     7B 00 00 FF 
03320     CC E4 05 F1 | 	add	objptr, ##63180
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     24 00 00 FF 
0332c     C0 E4 85 F1 | 	sub	objptr, ##18624
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     57 00 00 FF 
03338     0C E4 85 F1 | 	sub	objptr, ##44556
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     65 01 00 FF 
03344     70 13 06 F6 | 	mov	arg01, ##@LR__4696
03348                 | ' 
03348                 | ' write(text)
03348     54 8E B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     1C 91 B1 FD | 	call	#_hg010b_spin2_crlf
03350     65 01 00 FF 
03354     71 13 06 F6 | 	mov	arg01, ##@LR__4697
03358                 | ' 
03358                 | ' write(text)
03358     44 8E B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     0C 91 B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     65 01 00 FF 
0337c     77 15 06 F6 | 	mov	arg02, ##@LR__4698
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     EC A0 B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     65 01 00 FF 
03394     79 15 06 F6 | 	mov	arg02, ##@LR__4699
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     D4 A0 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     65 01 00 FF 
033ac     7B 15 06 F6 | 	mov	arg02, ##@LR__4700
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     BC A0 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     65 01 00 FF 
033c4     7E 15 06 F6 | 	mov	arg02, ##@LR__4701
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     A4 A0 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     65 01 00 FF 
033dc     82 15 06 F6 | 	mov	arg02, ##@LR__4702
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     8C A0 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     65 01 00 FF 
033f4     84 15 06 F6 | 	mov	arg02, ##@LR__4703
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     74 A0 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     65 01 00 FF 
0340c     86 15 06 F6 | 	mov	arg02, ##@LR__4704
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     5C A0 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     65 01 00 FF 
03424     8A 15 06 F6 | 	mov	arg02, ##@LR__4705
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     44 A0 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     65 01 00 FF 
0343c     8E 15 06 F6 | 	mov	arg02, ##@LR__4706
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     2C A0 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     65 01 00 FF 
03454     92 15 06 F6 | 	mov	arg02, ##@LR__4707
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     14 A0 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     65 01 00 FF 
0346c     96 15 06 F6 | 	mov	arg02, ##@LR__4708
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     FC 9F B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     65 01 00 FF 
03484     9A 15 06 F6 | 	mov	arg02, ##@LR__4709
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     E4 9F B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     65 01 00 FF 
0349c     9C 15 06 F6 | 	mov	arg02, ##@LR__4710
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     CC 9F B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     65 01 00 FF 
034b4     A0 15 06 F6 | 	mov	arg02, ##@LR__4711
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     B4 9F B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     65 01 00 FF 
034cc     A2 15 06 F6 | 	mov	arg02, ##@LR__4712
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     9C 9F B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     65 01 00 FF 
034e4     A4 15 06 F6 | 	mov	arg02, ##@LR__4713
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     84 9F B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     65 01 00 FF 
034fc     A7 15 06 F6 | 	mov	arg02, ##@LR__4714
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     6C 9F B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     65 01 00 FF 
03514     AA 15 06 F6 | 	mov	arg02, ##@LR__4715
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     54 9F B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     65 01 00 FF 
0352c     AC 15 06 F6 | 	mov	arg02, ##@LR__4716
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     3C 9F B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     65 01 00 FF 
03544     AE 15 06 F6 | 	mov	arg02, ##@LR__4717
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     24 9F B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     65 01 00 FF 
0355c     B1 15 06 F6 | 	mov	arg02, ##@LR__4718
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     0C 9F B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     65 01 00 FF 
03574     B4 15 06 F6 | 	mov	arg02, ##@LR__4719
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     F4 9E B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     30 BE B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     65 01 00 FF 
03668     B7 15 06 F6 | 	mov	arg02, ##@LR__4720
0366c     04 9E B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     1C BF B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     65 01 00 FF 
03694     B9 15 06 F6 | 	mov	arg02, ##@LR__4721
03698     D8 9D B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     F4 BE B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     DC BE B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     A8 BE B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     65 01 00 FF 
03708     BB 15 06 F6 | 	mov	arg02, ##@LR__4722
0370c     64 9D B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     F4 BD B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     84 D0 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     58 CD B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     CC BD B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     5C D0 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     64 C8 B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     20 CD B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     90 BD B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     65 01 00 FF 
03790     BD 15 06 F6 | 	mov	arg02, ##@LR__4723
03794     DC 9C B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     65 01 00 FF 
037a8     BF 15 06 F6 | 	mov	arg02, ##@LR__4724
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     C0 9C B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     65 01 00 FF 
037c0     C1 15 06 F6 | 	mov	arg02, ##@LR__4725
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     A8 9C B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     65 01 00 FF 
037d8     C4 15 06 F6 | 	mov	arg02, ##@LR__4726
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     90 9C B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     65 01 00 FF 
037f0     C6 15 06 F6 | 	mov	arg02, ##@LR__4727
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     78 9C B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     65 01 00 FF 
03808     C9 15 06 F6 | 	mov	arg02, ##@LR__4728
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     60 9C B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     65 01 00 FF 
03820     CB 15 06 F6 | 	mov	arg02, ##@LR__4729
03824     13 13 02 F6 | 	mov	arg01, local05
03828     48 9C B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     65 01 00 FF 
03838     CD 15 06 F6 | 	mov	arg02, ##@LR__4730
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     30 9C B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     65 01 00 FF 
03850     D0 15 06 F6 | 	mov	arg02, ##@LR__4731
03854     13 13 02 F6 | 	mov	arg01, local05
03858     18 9C B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     65 01 00 FF 
03868     D2 15 06 F6 | 	mov	arg02, ##@LR__4732
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     00 9C B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     65 01 00 FF 
03880     D5 15 06 F6 | 	mov	arg02, ##@LR__4733
03884     13 13 02 F6 | 	mov	arg01, local05
03888     E8 9B B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     65 01 00 FF 
03898     D7 15 06 F6 | 	mov	arg02, ##@LR__4734
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     D0 9B B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     65 01 00 FF 
038b0     DA 15 06 F6 | 	mov	arg02, ##@LR__4735
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     B8 9B B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     65 01 00 FF 
038c8     DC 15 06 F6 | 	mov	arg02, ##@LR__4736
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     A0 9B B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     65 01 00 FF 
039c8     DE 15 06 F6 | 	mov	arg02, ##@LR__4737
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     A0 9A B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     65 01 00 FF 
039e0     E0 15 06 F6 | 	mov	arg02, ##@LR__4738
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     88 9A B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     65 01 00 FF 
039f8     E2 15 06 F6 | 	mov	arg02, ##@LR__4739
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     70 9A B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     65 01 00 FF 
03a10     E4 15 06 F6 | 	mov	arg02, ##@LR__4740
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     58 9A B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     65 01 00 FF 
03a28     E6 15 06 F6 | 	mov	arg02, ##@LR__4741
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     40 9A B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     65 01 00 FF 
03a40     E8 15 06 F6 | 	mov	arg02, ##@LR__4742
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     28 9A B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     65 01 00 FF 
03a58     EA 15 06 F6 | 	mov	arg02, ##@LR__4743
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     10 9A B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     65 01 00 FF 
03a70     EC 15 06 F6 | 	mov	arg02, ##@LR__4744
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     F8 99 B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     65 01 00 FF 
03a88     EE 15 06 F6 | 	mov	arg02, ##@LR__4745
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     E0 99 B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     65 01 00 FF 
03aa0     F0 15 06 F6 | 	mov	arg02, ##@LR__4746
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     C8 99 B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     65 01 00 FF 
03ab8     F2 15 06 F6 | 	mov	arg02, ##@LR__4747
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     B0 99 B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     65 01 00 FF 
03ad0     F4 15 06 F6 | 	mov	arg02, ##@LR__4748
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     98 99 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     65 01 00 FF 
03ae8     F6 15 06 F6 | 	mov	arg02, ##@LR__4749
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     80 99 B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     65 01 00 FF 
03b00     F8 15 06 F6 | 	mov	arg02, ##@LR__4750
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     68 99 B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     65 01 00 FF 
03b18     FA 15 06 F6 | 	mov	arg02, ##@LR__4751
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     50 99 B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     65 01 00 FF 
03bc8     FE 15 06 F6 | 	mov	arg02, ##@LR__4753
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     A0 98 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     74 08 90 AD |  if_e	jmp	#LR__0240
03bdc     66 01 00 FF 
03be0     03 14 06 F6 | 	mov	arg02, ##@LR__4754
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     88 98 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     64 08 90 AD |  if_e	jmp	#LR__0241
03bf4     66 01 00 FF 
03bf8     06 14 06 F6 | 	mov	arg02, ##@LR__4755
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     70 98 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     54 08 90 AD |  if_e	jmp	#LR__0242
03c0c     66 01 00 FF 
03c10     0A 14 06 F6 | 	mov	arg02, ##@LR__4756
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     58 98 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     44 08 90 AD |  if_e	jmp	#LR__0243
03c24     66 01 00 FF 
03c28     0F 14 06 F6 | 	mov	arg02, ##@LR__4757
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     40 98 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     34 08 90 AD |  if_e	jmp	#LR__0244
03c3c     66 01 00 FF 
03c40     13 14 06 F6 | 	mov	arg02, ##@LR__4758
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     28 98 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     24 08 90 AD |  if_e	jmp	#LR__0245
03c54     66 01 00 FF 
03c58     1A 14 06 F6 | 	mov	arg02, ##@LR__4759
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     10 98 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     14 08 90 AD |  if_e	jmp	#LR__0246
03c6c     66 01 00 FF 
03c70     1E 14 06 F6 | 	mov	arg02, ##@LR__4760
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     F8 97 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     04 08 90 AD |  if_e	jmp	#LR__0247
03c84     66 01 00 FF 
03c88     24 14 06 F6 | 	mov	arg02, ##@LR__4761
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     E0 97 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     F4 07 90 AD |  if_e	jmp	#LR__0248
03c9c     66 01 00 FF 
03ca0     28 14 06 F6 | 	mov	arg02, ##@LR__4762
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     C8 97 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     E4 07 90 AD |  if_e	jmp	#LR__0249
03cb4     66 01 00 FF 
03cb8     2E 14 06 F6 | 	mov	arg02, ##@LR__4763
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     B0 97 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     D4 07 90 AD |  if_e	jmp	#LR__0250
03ccc     66 01 00 FF 
03cd0     31 14 06 F6 | 	mov	arg02, ##@LR__4764
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     98 97 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     C4 07 90 AD |  if_e	jmp	#LR__0251
03ce4     66 01 00 FF 
03ce8     37 14 06 F6 | 	mov	arg02, ##@LR__4765
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     80 97 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     B4 07 90 AD |  if_e	jmp	#LR__0252
03cfc     66 01 00 FF 
03d00     3B 14 06 F6 | 	mov	arg02, ##@LR__4766
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     68 97 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     A4 07 90 AD |  if_e	jmp	#LR__0253
03d14     66 01 00 FF 
03d18     42 14 06 F6 | 	mov	arg02, ##@LR__4767
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     50 97 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     94 07 90 AD |  if_e	jmp	#LR__0254
03d2c     66 01 00 FF 
03d30     49 14 06 F6 | 	mov	arg02, ##@LR__4768
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     38 97 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     84 07 90 AD |  if_e	jmp	#LR__0255
03d44     66 01 00 FF 
03d48     50 14 06 F6 | 	mov	arg02, ##@LR__4769
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     20 97 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     74 07 90 AD |  if_e	jmp	#LR__0256
03d5c     66 01 00 FF 
03d60     5A 14 06 F6 | 	mov	arg02, ##@LR__4770
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     08 97 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     64 07 90 AD |  if_e	jmp	#LR__0257
03d74     66 01 00 FF 
03d78     5E 14 06 F6 | 	mov	arg02, ##@LR__4771
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     F0 96 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     54 07 90 AD |  if_e	jmp	#LR__0258
03d8c     66 01 00 FF 
03d90     62 14 06 F6 | 	mov	arg02, ##@LR__4772
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     D8 96 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     44 07 90 AD |  if_e	jmp	#LR__0259
03da4     66 01 00 FF 
03da8     66 14 06 F6 | 	mov	arg02, ##@LR__4773
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     C0 96 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     34 07 90 AD |  if_e	jmp	#LR__0260
03dbc     66 01 00 FF 
03dc0     6A 14 06 F6 | 	mov	arg02, ##@LR__4774
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     A8 96 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     24 07 90 AD |  if_e	jmp	#LR__0261
03dd4     66 01 00 FF 
03dd8     70 14 06 F6 | 	mov	arg02, ##@LR__4775
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     90 96 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     14 07 90 AD |  if_e	jmp	#LR__0262
03dec     66 01 00 FF 
03df0     75 14 06 F6 | 	mov	arg02, ##@LR__4776
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     78 96 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     04 07 90 AD |  if_e	jmp	#LR__0263
03e04     66 01 00 FF 
03e08     79 14 06 F6 | 	mov	arg02, ##@LR__4777
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     60 96 B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     F4 06 90 AD |  if_e	jmp	#LR__0264
03e1c     66 01 00 FF 
03e20     7E 14 06 F6 | 	mov	arg02, ##@LR__4778
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     48 96 B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     E4 06 90 AD |  if_e	jmp	#LR__0265
03e34     66 01 00 FF 
03e38     86 14 06 F6 | 	mov	arg02, ##@LR__4779
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     30 96 B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     D4 06 90 AD |  if_e	jmp	#LR__0266
03e4c     66 01 00 FF 
03e50     8A 14 06 F6 | 	mov	arg02, ##@LR__4780
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     18 96 B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     C4 06 90 AD |  if_e	jmp	#LR__0267
03e64     66 01 00 FF 
03e68     8F 14 06 F6 | 	mov	arg02, ##@LR__4781
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     00 96 B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     B4 06 90 AD |  if_e	jmp	#LR__0268
03e7c     66 01 00 FF 
03e80     93 14 06 F6 | 	mov	arg02, ##@LR__4782
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     E8 95 B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     A4 06 90 AD |  if_e	jmp	#LR__0269
03e94     66 01 00 FF 
03e98     98 14 06 F6 | 	mov	arg02, ##@LR__4783
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     D0 95 B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     94 06 90 AD |  if_e	jmp	#LR__0270
03eac     66 01 00 FF 
03eb0     9C 14 06 F6 | 	mov	arg02, ##@LR__4784
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     B8 95 B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     84 06 90 AD |  if_e	jmp	#LR__0271
03ec4     66 01 00 FF 
03ec8     9F 14 06 F6 | 	mov	arg02, ##@LR__4785
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     A0 95 B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     74 06 90 AD |  if_e	jmp	#LR__0272
03edc     66 01 00 FF 
03ee0     A5 14 06 F6 | 	mov	arg02, ##@LR__4786
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     88 95 B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     64 06 90 AD |  if_e	jmp	#LR__0273
03ef4     66 01 00 FF 
03ef8     A9 14 06 F6 | 	mov	arg02, ##@LR__4787
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     70 95 B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     54 06 90 AD |  if_e	jmp	#LR__0274
03f0c     66 01 00 FF 
03f10     AE 14 06 F6 | 	mov	arg02, ##@LR__4788
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     58 95 B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     44 06 90 AD |  if_e	jmp	#LR__0275
03f24     66 01 00 FF 
03f28     B1 14 06 F6 | 	mov	arg02, ##@LR__4789
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     40 95 B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     34 06 90 AD |  if_e	jmp	#LR__0276
03f3c     66 01 00 FF 
03f40     B4 14 06 F6 | 	mov	arg02, ##@LR__4790
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     28 95 B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     24 06 90 AD |  if_e	jmp	#LR__0277
03f54     66 01 00 FF 
03f58     B8 14 06 F6 | 	mov	arg02, ##@LR__4791
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     10 95 B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     14 06 90 AD |  if_e	jmp	#LR__0278
03f6c     66 01 00 FF 
03f70     BB 14 06 F6 | 	mov	arg02, ##@LR__4792
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     F8 94 B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     04 06 90 AD |  if_e	jmp	#LR__0279
03f84     66 01 00 FF 
03f88     BF 14 06 F6 | 	mov	arg02, ##@LR__4793
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     E0 94 B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     F4 05 90 AD |  if_e	jmp	#LR__0280
03f9c     66 01 00 FF 
03fa0     C4 14 06 F6 | 	mov	arg02, ##@LR__4794
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     C8 94 B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     E4 05 90 AD |  if_e	jmp	#LR__0281
03fb4     66 01 00 FF 
03fb8     C7 14 06 F6 | 	mov	arg02, ##@LR__4795
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     B0 94 B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     D4 05 90 AD |  if_e	jmp	#LR__0282
03fcc     66 01 00 FF 
03fd0     CC 14 06 F6 | 	mov	arg02, ##@LR__4796
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     98 94 B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     C4 05 90 AD |  if_e	jmp	#LR__0283
03fe4     66 01 00 FF 
03fe8     D0 14 06 F6 | 	mov	arg02, ##@LR__4797
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     80 94 B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     B4 05 90 AD |  if_e	jmp	#LR__0284
03ffc     66 01 00 FF 
04000     D6 14 06 F6 | 	mov	arg02, ##@LR__4798
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     68 94 B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     A4 05 90 AD |  if_e	jmp	#LR__0285
04014     66 01 00 FF 
04018     DB 14 06 F6 | 	mov	arg02, ##@LR__4799
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     50 94 B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     94 05 90 AD |  if_e	jmp	#LR__0286
0402c     66 01 00 FF 
04030     DE 14 06 F6 | 	mov	arg02, ##@LR__4800
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     38 94 B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     84 05 90 AD |  if_e	jmp	#LR__0287
04044     66 01 00 FF 
04048     E4 14 06 F6 | 	mov	arg02, ##@LR__4801
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     20 94 B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     74 05 90 AD |  if_e	jmp	#LR__0288
0405c     66 01 00 FF 
04060     E8 14 06 F6 | 	mov	arg02, ##@LR__4802
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     08 94 B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     64 05 90 AD |  if_e	jmp	#LR__0289
04074     66 01 00 FF 
04078     ED 14 06 F6 | 	mov	arg02, ##@LR__4803
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     F0 93 B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     54 05 90 AD |  if_e	jmp	#LR__0290
0408c     66 01 00 FF 
04090     F0 14 06 F6 | 	mov	arg02, ##@LR__4804
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     D8 93 B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     44 05 90 AD |  if_e	jmp	#LR__0291
040a4     66 01 00 FF 
040a8     F6 14 06 F6 | 	mov	arg02, ##@LR__4805
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     C0 93 B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     34 05 90 AD |  if_e	jmp	#LR__0292
040bc     66 01 00 FF 
040c0     F9 14 06 F6 | 	mov	arg02, ##@LR__4806
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     A8 93 B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     24 05 90 AD |  if_e	jmp	#LR__0293
040d4     66 01 00 FF 
040d8     02 15 06 F6 | 	mov	arg02, ##@LR__4807
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     90 93 B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     14 05 90 AD |  if_e	jmp	#LR__0294
040ec     66 01 00 FF 
040f0     08 15 06 F6 | 	mov	arg02, ##@LR__4808
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     78 93 B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     04 05 90 AD |  if_e	jmp	#LR__0295
04104     66 01 00 FF 
04108     0E 15 06 F6 | 	mov	arg02, ##@LR__4809
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     60 93 B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     F4 04 90 AD |  if_e	jmp	#LR__0296
0411c     66 01 00 FF 
04120     17 15 06 F6 | 	mov	arg02, ##@LR__4810
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     48 93 B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     E4 04 90 AD |  if_e	jmp	#LR__0297
04134     66 01 00 FF 
04138     21 15 06 F6 | 	mov	arg02, ##@LR__4811
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     30 93 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     D4 04 90 AD |  if_e	jmp	#LR__0298
0414c     66 01 00 FF 
04150     2A 15 06 F6 | 	mov	arg02, ##@LR__4812
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     18 93 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     C4 04 90 AD |  if_e	jmp	#LR__0299
04164     66 01 00 FF 
04168     2F 15 06 F6 | 	mov	arg02, ##@LR__4813
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     00 93 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     B4 04 90 AD |  if_e	jmp	#LR__0300
0417c     66 01 00 FF 
04180     34 15 06 F6 | 	mov	arg02, ##@LR__4814
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     E8 92 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     A4 04 90 AD |  if_e	jmp	#LR__0301
04194     66 01 00 FF 
04198     38 15 06 F6 | 	mov	arg02, ##@LR__4815
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     D0 92 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     94 04 90 AD |  if_e	jmp	#LR__0302
041ac     66 01 00 FF 
041b0     3D 15 06 F6 | 	mov	arg02, ##@LR__4816
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     B8 92 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     84 04 90 AD |  if_e	jmp	#LR__0303
041c4     66 01 00 FF 
041c8     46 15 06 F6 | 	mov	arg02, ##@LR__4817
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     A0 92 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     74 04 90 AD |  if_e	jmp	#LR__0304
041dc     66 01 00 FF 
041e0     4B 15 06 F6 | 	mov	arg02, ##@LR__4818
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     88 92 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     64 04 90 AD |  if_e	jmp	#LR__0305
041f4     66 01 00 FF 
041f8     51 15 06 F6 | 	mov	arg02, ##@LR__4819
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     70 92 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     54 04 90 AD |  if_e	jmp	#LR__0306
0420c     66 01 00 FF 
04210     53 15 06 F6 | 	mov	arg02, ##@LR__4820
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     58 92 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     44 04 90 AD |  if_e	jmp	#LR__0307
04224     66 01 00 FF 
04228     57 15 06 F6 | 	mov	arg02, ##@LR__4821
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     40 92 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     34 04 90 AD |  if_e	jmp	#LR__0308
0423c     66 01 00 FF 
04240     5F 15 06 F6 | 	mov	arg02, ##@LR__4822
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     28 92 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     24 04 90 AD |  if_e	jmp	#LR__0309
04254     66 01 00 FF 
04258     63 15 06 F6 | 	mov	arg02, ##@LR__4823
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     10 92 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     14 04 90 AD |  if_e	jmp	#LR__0310
0426c     66 01 00 FF 
04270     68 15 06 F6 | 	mov	arg02, ##@LR__4824
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     F8 91 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     04 04 90 AD |  if_e	jmp	#LR__0311
04284     66 01 00 FF 
04288     6B 15 06 F6 | 	mov	arg02, ##@LR__4825
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     E0 91 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     F4 03 90 AD |  if_e	jmp	#LR__0312
0429c     66 01 00 FF 
042a0     74 15 06 F6 | 	mov	arg02, ##@LR__4826
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     C8 91 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     E4 03 90 AD |  if_e	jmp	#LR__0313
042b4     66 01 00 FF 
042b8     7B 15 06 F6 | 	mov	arg02, ##@LR__4827
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     B0 91 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     D4 03 90 AD |  if_e	jmp	#LR__0314
042cc     66 01 00 FF 
042d0     82 15 06 F6 | 	mov	arg02, ##@LR__4828
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     98 91 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     C4 03 90 AD |  if_e	jmp	#LR__0315
042e4     66 01 00 FF 
042e8     89 15 06 F6 | 	mov	arg02, ##@LR__4829
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     80 91 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     B4 03 90 AD |  if_e	jmp	#LR__0316
042fc     66 01 00 FF 
04300     94 15 06 F6 | 	mov	arg02, ##@LR__4830
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     68 91 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     A4 03 90 AD |  if_e	jmp	#LR__0317
04314     66 01 00 FF 
04318     9B 15 06 F6 | 	mov	arg02, ##@LR__4831
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     50 91 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     94 03 90 AD |  if_e	jmp	#LR__0318
0432c     66 01 00 FF 
04330     A3 15 06 F6 | 	mov	arg02, ##@LR__4832
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     38 91 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     84 03 90 AD |  if_e	jmp	#LR__0319
04344     66 01 00 FF 
04348     A9 15 06 F6 | 	mov	arg02, ##@LR__4833
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     20 91 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     74 03 90 AD |  if_e	jmp	#LR__0320
0435c     66 01 00 FF 
04360     AD 15 06 F6 | 	mov	arg02, ##@LR__4834
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     08 91 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     64 03 90 AD |  if_e	jmp	#LR__0321
04374     66 01 00 FF 
04378     B4 15 06 F6 | 	mov	arg02, ##@LR__4835
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     F0 90 B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     54 03 90 AD |  if_e	jmp	#LR__0322
0438c     66 01 00 FF 
04390     B8 15 06 F6 | 	mov	arg02, ##@LR__4836
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     D8 90 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     44 03 90 AD |  if_e	jmp	#LR__0323
043a4     66 01 00 FF 
043a8     BD 15 06 F6 | 	mov	arg02, ##@LR__4837
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     C0 90 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     34 03 90 AD |  if_e	jmp	#LR__0324
043bc     66 01 00 FF 
043c0     C4 15 06 F6 | 	mov	arg02, ##@LR__4838
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     A8 90 B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     24 03 90 AD |  if_e	jmp	#LR__0325
043d4     66 01 00 FF 
043d8     CE 15 06 F6 | 	mov	arg02, ##@LR__4839
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     90 90 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     14 03 90 AD |  if_e	jmp	#LR__0326
043ec     66 01 00 FF 
043f0     D2 15 06 F6 | 	mov	arg02, ##@LR__4840
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     78 90 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     04 03 90 AD |  if_e	jmp	#LR__0327
04404     66 01 00 FF 
04408     DA 15 06 F6 | 	mov	arg02, ##@LR__4841
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     60 90 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     F4 02 90 AD |  if_e	jmp	#LR__0328
0441c     66 01 00 FF 
04420     DE 15 06 F6 | 	mov	arg02, ##@LR__4842
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     48 90 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     E4 02 90 AD |  if_e	jmp	#LR__0329
04434     66 01 00 FF 
04438     E4 15 06 F6 | 	mov	arg02, ##@LR__4843
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     30 90 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     D4 02 90 AD |  if_e	jmp	#LR__0330
0444c     D8 02 90 FD | 	jmp	#LR__0331
04450                 | LR__0240
04450     5C FA 05 F6 | 	mov	result1, #92
04454     D4 02 90 FD | 	jmp	#LR__0332
04458                 | LR__0241
04458     5C FA 05 F6 | 	mov	result1, #92
0445c     CC 02 90 FD | 	jmp	#LR__0332
04460                 | LR__0242
04460     47 FA 05 F6 | 	mov	result1, #71
04464     C4 02 90 FD | 	jmp	#LR__0332
04468                 | LR__0243
04468     59 FA 05 F6 | 	mov	result1, #89
0446c     BC 02 90 FD | 	jmp	#LR__0332
04470                 | LR__0244
04470     59 FA 05 F6 | 	mov	result1, #89
04474     B4 02 90 FD | 	jmp	#LR__0332
04478                 | LR__0245
04478     45 FA 05 F6 | 	mov	result1, #69
0447c     AC 02 90 FD | 	jmp	#LR__0332
04480                 | LR__0246
04480     45 FA 05 F6 | 	mov	result1, #69
04484     A4 02 90 FD | 	jmp	#LR__0332
04488                 | LR__0247
04488     69 FA 05 F6 | 	mov	result1, #105
0448c     9C 02 90 FD | 	jmp	#LR__0332
04490                 | LR__0248
04490     40 FA 05 F6 | 	mov	result1, #64
04494     94 02 90 FD | 	jmp	#LR__0332
04498                 | LR__0249
04498     49 FA 05 F6 | 	mov	result1, #73
0449c     8C 02 90 FD | 	jmp	#LR__0332
044a0                 | LR__0250
044a0     49 FA 05 F6 | 	mov	result1, #73
044a4     84 02 90 FD | 	jmp	#LR__0332
044a8                 | LR__0251
044a8     50 FA 05 F6 | 	mov	result1, #80
044ac     7C 02 90 FD | 	jmp	#LR__0332
044b0                 | LR__0252
044b0     50 FA 05 F6 | 	mov	result1, #80
044b4     74 02 90 FD | 	jmp	#LR__0332
044b8                 | LR__0253
044b8     68 FA 05 F6 | 	mov	result1, #104
044bc     6C 02 90 FD | 	jmp	#LR__0332
044c0                 | LR__0254
044c0     73 FA 05 F6 | 	mov	result1, #115
044c4     64 02 90 FD | 	jmp	#LR__0332
044c8                 | LR__0255
044c8     74 FA 05 F6 | 	mov	result1, #116
044cc     5C 02 90 FD | 	jmp	#LR__0332
044d0                 | LR__0256
044d0     6C FA 05 F6 | 	mov	result1, #108
044d4     54 02 90 FD | 	jmp	#LR__0332
044d8                 | LR__0257
044d8     6C FA 05 F6 | 	mov	result1, #108
044dc     4C 02 90 FD | 	jmp	#LR__0332
044e0                 | LR__0258
044e0     89 FA 05 F6 | 	mov	result1, #137
044e4     44 02 90 FD | 	jmp	#LR__0332
044e8                 | LR__0259
044e8     72 FA 05 F6 | 	mov	result1, #114
044ec     3C 02 90 FD | 	jmp	#LR__0332
044f0                 | LR__0260
044f0     5D FA 05 F6 | 	mov	result1, #93
044f4     34 02 90 FD | 	jmp	#LR__0332
044f8                 | LR__0261
044f8     96 FA 05 F6 | 	mov	result1, #150
044fc     2C 02 90 FD | 	jmp	#LR__0332
04500                 | LR__0262
04500     43 FA 05 F6 | 	mov	result1, #67
04504     24 02 90 FD | 	jmp	#LR__0332
04508                 | LR__0263
04508     43 FA 05 F6 | 	mov	result1, #67
0450c     1C 02 90 FD | 	jmp	#LR__0332
04510                 | LR__0264
04510     5A FA 05 F6 | 	mov	result1, #90
04514     14 02 90 FD | 	jmp	#LR__0332
04518                 | LR__0265
04518     46 FA 05 F6 | 	mov	result1, #70
0451c     0C 02 90 FD | 	jmp	#LR__0332
04520                 | LR__0266
04520     46 FA 05 F6 | 	mov	result1, #70
04524     04 02 90 FD | 	jmp	#LR__0332
04528                 | LR__0267
04528     71 FA 05 F6 | 	mov	result1, #113
0452c     FC 01 90 FD | 	jmp	#LR__0332
04530                 | LR__0268
04530     71 FA 05 F6 | 	mov	result1, #113
04534     F4 01 90 FD | 	jmp	#LR__0332
04538                 | LR__0269
04538     60 FA 05 F6 | 	mov	result1, #96
0453c     EC 01 90 FD | 	jmp	#LR__0332
04540                 | LR__0270
04540     4A FA 05 F6 | 	mov	result1, #74
04544     E4 01 90 FD | 	jmp	#LR__0332
04548                 | LR__0271
04548     4A FA 05 F6 | 	mov	result1, #74
0454c     DC 01 90 FD | 	jmp	#LR__0332
04550                 | LR__0272
04550     48 FA 05 F6 | 	mov	result1, #72
04554     D4 01 90 FD | 	jmp	#LR__0332
04558                 | LR__0273
04558     48 FA 05 F6 | 	mov	result1, #72
0455c     CC 01 90 FD | 	jmp	#LR__0332
04560                 | LR__0274
04560     4E FA 05 F6 | 	mov	result1, #78
04564     C4 01 90 FD | 	jmp	#LR__0332
04568                 | LR__0275
04568     4E FA 05 F6 | 	mov	result1, #78
0456c     BC 01 90 FD | 	jmp	#LR__0332
04570                 | LR__0276
04570     58 FA 05 F6 | 	mov	result1, #88
04574     B4 01 90 FD | 	jmp	#LR__0332
04578                 | LR__0277
04578     5F FA 05 F6 | 	mov	result1, #95
0457c     AC 01 90 FD | 	jmp	#LR__0332
04580                 | LR__0278
04580     5F FA 05 F6 | 	mov	result1, #95
04584     A4 01 90 FD | 	jmp	#LR__0332
04588                 | LR__0279
04588     8A FA 05 F6 | 	mov	result1, #138
0458c     9C 01 90 FD | 	jmp	#LR__0332
04590                 | LR__0280
04590     4C FA 05 F6 | 	mov	result1, #76
04594     94 01 90 FD | 	jmp	#LR__0332
04598                 | LR__0281
04598     4C FA 05 F6 | 	mov	result1, #76
0459c     8C 01 90 FD | 	jmp	#LR__0332
045a0                 | LR__0282
045a0     52 FA 05 F6 | 	mov	result1, #82
045a4     84 01 90 FD | 	jmp	#LR__0332
045a8                 | LR__0283
045a8     52 FA 05 F6 | 	mov	result1, #82
045ac     7C 01 90 FD | 	jmp	#LR__0332
045b0                 | LR__0284
045b0     97 FA 05 F6 | 	mov	result1, #151
045b4     74 01 90 FD | 	jmp	#LR__0332
045b8                 | LR__0285
045b8     61 FA 05 F6 | 	mov	result1, #97
045bc     6C 01 90 FD | 	jmp	#LR__0332
045c0                 | LR__0286
045c0     61 FA 05 F6 | 	mov	result1, #97
045c4     64 01 90 FD | 	jmp	#LR__0332
045c8                 | LR__0287
045c8     63 FA 05 F6 | 	mov	result1, #99
045cc     5C 01 90 FD | 	jmp	#LR__0332
045d0                 | LR__0288
045d0     41 FA 05 F6 | 	mov	result1, #65
045d4     54 01 90 FD | 	jmp	#LR__0332
045d8                 | LR__0289
045d8     4B FA 05 F6 | 	mov	result1, #75
045dc     4C 01 90 FD | 	jmp	#LR__0332
045e0                 | LR__0290
045e0     4B FA 05 F6 | 	mov	result1, #75
045e4     44 01 90 FD | 	jmp	#LR__0332
045e8                 | LR__0291
045e8     5E FA 05 F6 | 	mov	result1, #94
045ec     3C 01 90 FD | 	jmp	#LR__0332
045f0                 | LR__0292
045f0     5E FA 05 F6 | 	mov	result1, #94
045f4     34 01 90 FD | 	jmp	#LR__0332
045f8                 | LR__0293
045f8     7C FA 05 F6 | 	mov	result1, #124
045fc     2C 01 90 FD | 	jmp	#LR__0332
04600                 | LR__0294
04600     7E FA 05 F6 | 	mov	result1, #126
04604     24 01 90 FD | 	jmp	#LR__0332
04608                 | LR__0295
04608     7D FA 05 F6 | 	mov	result1, #125
0460c     1C 01 90 FD | 	jmp	#LR__0332
04610                 | LR__0296
04610     7F FA 05 F6 | 	mov	result1, #127
04614     14 01 90 FD | 	jmp	#LR__0332
04618                 | LR__0297
04618     80 FA 05 F6 | 	mov	result1, #128
0461c     0C 01 90 FD | 	jmp	#LR__0332
04620                 | LR__0298
04620     55 FA 05 F6 | 	mov	result1, #85
04624     04 01 90 FD | 	jmp	#LR__0332
04628                 | LR__0299
04628     75 FA 05 F6 | 	mov	result1, #117
0462c     FC 00 90 FD | 	jmp	#LR__0332
04630                 | LR__0300
04630     42 FA 05 F6 | 	mov	result1, #66
04634     F4 00 90 FD | 	jmp	#LR__0332
04638                 | LR__0301
04638     42 FA 05 F6 | 	mov	result1, #66
0463c     EC 00 90 FD | 	jmp	#LR__0332
04640                 | LR__0302
04640     95 FA 05 F6 | 	mov	result1, #149
04644     E4 00 90 FD | 	jmp	#LR__0332
04648                 | LR__0303
04648     81 FA 05 F6 | 	mov	result1, #129
0464c     DC 00 90 FD | 	jmp	#LR__0332
04650                 | LR__0304
04650     81 FA 05 F6 | 	mov	result1, #129
04654     D4 00 90 FD | 	jmp	#LR__0332
04658                 | LR__0305
04658     44 FA 05 F6 | 	mov	result1, #68
0465c     CC 00 90 FD | 	jmp	#LR__0332
04660                 | LR__0306
04660     44 FA 05 F6 | 	mov	result1, #68
04664     C4 00 90 FD | 	jmp	#LR__0332
04668                 | LR__0307
04668     88 FA 05 F6 | 	mov	result1, #136
0466c     BC 00 90 FD | 	jmp	#LR__0332
04670                 | LR__0308
04670     92 FA 05 F6 | 	mov	result1, #146
04674     B4 00 90 FD | 	jmp	#LR__0332
04678                 | LR__0309
04678     4D FA 05 F6 | 	mov	result1, #77
0467c     AC 00 90 FD | 	jmp	#LR__0332
04680                 | LR__0310
04680     51 FA 05 F6 | 	mov	result1, #81
04684     A4 00 90 FD | 	jmp	#LR__0332
04688                 | LR__0311
04688     51 FA 05 F6 | 	mov	result1, #81
0468c     9C 00 90 FD | 	jmp	#LR__0332
04690                 | LR__0312
04690     8E FA 05 F6 | 	mov	result1, #142
04694     94 00 90 FD | 	jmp	#LR__0332
04698                 | LR__0313
04698     90 FA 05 F6 | 	mov	result1, #144
0469c     8C 00 90 FD | 	jmp	#LR__0332
046a0                 | LR__0314
046a0     8D FA 05 F6 | 	mov	result1, #141
046a4     84 00 90 FD | 	jmp	#LR__0332
046a8                 | LR__0315
046a8     8C FA 05 F6 | 	mov	result1, #140
046ac     7C 00 90 FD | 	jmp	#LR__0332
046b0                 | LR__0316
046b0     91 FA 05 F6 | 	mov	result1, #145
046b4     74 00 90 FD | 	jmp	#LR__0332
046b8                 | LR__0317
046b8     8B FA 05 F6 | 	mov	result1, #139
046bc     6C 00 90 FD | 	jmp	#LR__0332
046c0                 | LR__0318
046c0     8F FA 05 F6 | 	mov	result1, #143
046c4     64 00 90 FD | 	jmp	#LR__0332
046c8                 | LR__0319
046c8     75 FA 05 F6 | 	mov	result1, #117
046cc     5C 00 90 FD | 	jmp	#LR__0332
046d0                 | LR__0320
046d0     75 FA 05 F6 | 	mov	result1, #117
046d4     54 00 90 FD | 	jmp	#LR__0332
046d8                 | LR__0321
046d8     6D FA 05 F6 | 	mov	result1, #109
046dc     4C 00 90 FD | 	jmp	#LR__0332
046e0                 | LR__0322
046e0     6D FA 05 F6 | 	mov	result1, #109
046e4     44 00 90 FD | 	jmp	#LR__0332
046e8                 | LR__0323
046e8     5B FA 05 F6 | 	mov	result1, #91
046ec     3C 00 90 FD | 	jmp	#LR__0332
046f0                 | LR__0324
046f0     56 FA 05 F6 | 	mov	result1, #86
046f4     34 00 90 FD | 	jmp	#LR__0332
046f8                 | LR__0325
046f8     70 FA 05 F6 | 	mov	result1, #112
046fc     2C 00 90 FD | 	jmp	#LR__0332
04700                 | LR__0326
04700     70 FA 05 F6 | 	mov	result1, #112
04704     24 00 90 FD | 	jmp	#LR__0332
04708                 | LR__0327
04708     57 FA 05 F6 | 	mov	result1, #87
0470c     1C 00 90 FD | 	jmp	#LR__0332
04710                 | LR__0328
04710     57 FA 05 F6 | 	mov	result1, #87
04714     14 00 90 FD | 	jmp	#LR__0332
04718                 | LR__0329
04718     77 FA 05 F6 | 	mov	result1, #119
0471c     0C 00 90 FD | 	jmp	#LR__0332
04720                 | LR__0330
04720     78 FA 05 F6 | 	mov	result1, #120
04724     04 00 90 FD | 	jmp	#LR__0332
04728                 | LR__0331
04728     00 FA 05 F6 | 	mov	result1, #0
0472c                 | LR__0332
0472c     A7 F0 03 F6 | 	mov	ptra, fp
04730     B2 00 A0 FD | 	call	#popregs_
04734                 | _iscommand_ret
04734     2D 00 64 FD | 	ret
04738                 | 
04738                 | ' 
04738                 | ' function isfunction(s as string) as ubyte
04738                 | _isfunction
04738     01 4A 05 F6 | 	mov	COUNT_, #1
0473c     A8 00 A0 FD | 	call	#pushregs_
04740                 | ' 
04740                 | ' select case s
04740     09 1F 02 F6 | 	mov	local01, arg01
04744     66 01 00 FF 
04748     EA 15 06 F6 | 	mov	arg02, ##@LR__4844
0474c     0F 13 02 F6 | 	mov	arg01, local01
04750     20 8D B1 FD | 	call	#__system___string_cmp
04754     00 FA 0D F2 | 	cmp	result1, #0 wz
04758     D4 02 90 AD |  if_e	jmp	#LR__0340
0475c     66 01 00 FF 
04760     EE 15 06 F6 | 	mov	arg02, ##@LR__4845
04764     0F 13 02 F6 | 	mov	arg01, local01
04768     08 8D B1 FD | 	call	#__system___string_cmp
0476c     00 FA 0D F2 | 	cmp	result1, #0 wz
04770     C4 02 90 AD |  if_e	jmp	#LR__0341
04774     66 01 00 FF 
04778     F3 15 06 F6 | 	mov	arg02, ##@LR__4846
0477c     0F 13 02 F6 | 	mov	arg01, local01
04780     F0 8C B1 FD | 	call	#__system___string_cmp
04784     00 FA 0D F2 | 	cmp	result1, #0 wz
04788     B4 02 90 AD |  if_e	jmp	#LR__0342
0478c     66 01 00 FF 
04790     F7 15 06 F6 | 	mov	arg02, ##@LR__4847
04794     0F 13 02 F6 | 	mov	arg01, local01
04798     D8 8C B1 FD | 	call	#__system___string_cmp
0479c     00 FA 0D F2 | 	cmp	result1, #0 wz
047a0     A4 02 90 AD |  if_e	jmp	#LR__0343
047a4     66 01 00 FF 
047a8     FC 15 06 F6 | 	mov	arg02, ##@LR__4848
047ac     0F 13 02 F6 | 	mov	arg01, local01
047b0     C0 8C B1 FD | 	call	#__system___string_cmp
047b4     00 FA 0D F2 | 	cmp	result1, #0 wz
047b8     94 02 90 AD |  if_e	jmp	#LR__0344
047bc     67 01 00 FF 
047c0     03 14 06 F6 | 	mov	arg02, ##@LR__4849
047c4     0F 13 02 F6 | 	mov	arg01, local01
047c8     A8 8C B1 FD | 	call	#__system___string_cmp
047cc     00 FA 0D F2 | 	cmp	result1, #0 wz
047d0     84 02 90 AD |  if_e	jmp	#LR__0345
047d4     67 01 00 FF 
047d8     08 14 06 F6 | 	mov	arg02, ##@LR__4850
047dc     0F 13 02 F6 | 	mov	arg01, local01
047e0     90 8C B1 FD | 	call	#__system___string_cmp
047e4     00 FA 0D F2 | 	cmp	result1, #0 wz
047e8     74 02 90 AD |  if_e	jmp	#LR__0346
047ec     67 01 00 FF 
047f0     0C 14 06 F6 | 	mov	arg02, ##@LR__4851
047f4     0F 13 02 F6 | 	mov	arg01, local01
047f8     78 8C B1 FD | 	call	#__system___string_cmp
047fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04800     64 02 90 AD |  if_e	jmp	#LR__0347
04804     67 01 00 FF 
04808     10 14 06 F6 | 	mov	arg02, ##@LR__4852
0480c     0F 13 02 F6 | 	mov	arg01, local01
04810     60 8C B1 FD | 	call	#__system___string_cmp
04814     00 FA 0D F2 | 	cmp	result1, #0 wz
04818     54 02 90 AD |  if_e	jmp	#LR__0348
0481c     67 01 00 FF 
04820     16 14 06 F6 | 	mov	arg02, ##@LR__4853
04824     0F 13 02 F6 | 	mov	arg01, local01
04828     48 8C B1 FD | 	call	#__system___string_cmp
0482c     00 FA 0D F2 | 	cmp	result1, #0 wz
04830     44 02 90 AD |  if_e	jmp	#LR__0349
04834     67 01 00 FF 
04838     1A 14 06 F6 | 	mov	arg02, ##@LR__4854
0483c     0F 13 02 F6 | 	mov	arg01, local01
04840     30 8C B1 FD | 	call	#__system___string_cmp
04844     00 FA 0D F2 | 	cmp	result1, #0 wz
04848     34 02 90 AD |  if_e	jmp	#LR__0350
0484c     67 01 00 FF 
04850     23 14 06 F6 | 	mov	arg02, ##@LR__4855
04854     0F 13 02 F6 | 	mov	arg01, local01
04858     18 8C B1 FD | 	call	#__system___string_cmp
0485c     00 FA 0D F2 | 	cmp	result1, #0 wz
04860     24 02 90 AD |  if_e	jmp	#LR__0351
04864     67 01 00 FF 
04868     27 14 06 F6 | 	mov	arg02, ##@LR__4856
0486c     0F 13 02 F6 | 	mov	arg01, local01
04870     00 8C B1 FD | 	call	#__system___string_cmp
04874     00 FA 0D F2 | 	cmp	result1, #0 wz
04878     14 02 90 AD |  if_e	jmp	#LR__0352
0487c     67 01 00 FF 
04880     35 14 06 F6 | 	mov	arg02, ##@LR__4857
04884     0F 13 02 F6 | 	mov	arg01, local01
04888     E8 8B B1 FD | 	call	#__system___string_cmp
0488c     00 FA 0D F2 | 	cmp	result1, #0 wz
04890     04 02 90 AD |  if_e	jmp	#LR__0353
04894     67 01 00 FF 
04898     42 14 06 F6 | 	mov	arg02, ##@LR__4858
0489c     0F 13 02 F6 | 	mov	arg01, local01
048a0     D0 8B B1 FD | 	call	#__system___string_cmp
048a4     00 FA 0D F2 | 	cmp	result1, #0 wz
048a8     F4 01 90 AD |  if_e	jmp	#LR__0354
048ac     67 01 00 FF 
048b0     4A 14 06 F6 | 	mov	arg02, ##@LR__4859
048b4     0F 13 02 F6 | 	mov	arg01, local01
048b8     B8 8B B1 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     E4 01 90 AD |  if_e	jmp	#LR__0355
048c4     67 01 00 FF 
048c8     51 14 06 F6 | 	mov	arg02, ##@LR__4860
048cc     0F 13 02 F6 | 	mov	arg01, local01
048d0     A0 8B B1 FD | 	call	#__system___string_cmp
048d4     00 FA 0D F2 | 	cmp	result1, #0 wz
048d8     D4 01 90 AD |  if_e	jmp	#LR__0356
048dc     67 01 00 FF 
048e0     57 14 06 F6 | 	mov	arg02, ##@LR__4861
048e4     0F 13 02 F6 | 	mov	arg01, local01
048e8     88 8B B1 FD | 	call	#__system___string_cmp
048ec     00 FA 0D F2 | 	cmp	result1, #0 wz
048f0     C4 01 90 AD |  if_e	jmp	#LR__0357
048f4     67 01 00 FF 
048f8     5E 14 06 F6 | 	mov	arg02, ##@LR__4862
048fc     0F 13 02 F6 | 	mov	arg01, local01
04900     70 8B B1 FD | 	call	#__system___string_cmp
04904     00 FA 0D F2 | 	cmp	result1, #0 wz
04908     B4 01 90 AD |  if_e	jmp	#LR__0358
0490c     67 01 00 FF 
04910     65 14 06 F6 | 	mov	arg02, ##@LR__4863
04914     0F 13 02 F6 | 	mov	arg01, local01
04918     58 8B B1 FD | 	call	#__system___string_cmp
0491c     00 FA 0D F2 | 	cmp	result1, #0 wz
04920     A4 01 90 AD |  if_e	jmp	#LR__0359
04924     67 01 00 FF 
04928     6C 14 06 F6 | 	mov	arg02, ##@LR__4864
0492c     0F 13 02 F6 | 	mov	arg01, local01
04930     40 8B B1 FD | 	call	#__system___string_cmp
04934     00 FA 0D F2 | 	cmp	result1, #0 wz
04938     94 01 90 AD |  if_e	jmp	#LR__0360
0493c     67 01 00 FF 
04940     73 14 06 F6 | 	mov	arg02, ##@LR__4865
04944     0F 13 02 F6 | 	mov	arg01, local01
04948     28 8B B1 FD | 	call	#__system___string_cmp
0494c     00 FA 0D F2 | 	cmp	result1, #0 wz
04950     84 01 90 AD |  if_e	jmp	#LR__0361
04954     67 01 00 FF 
04958     78 14 06 F6 | 	mov	arg02, ##@LR__4866
0495c     0F 13 02 F6 | 	mov	arg01, local01
04960     10 8B B1 FD | 	call	#__system___string_cmp
04964     00 FA 0D F2 | 	cmp	result1, #0 wz
04968     74 01 90 AD |  if_e	jmp	#LR__0362
0496c     67 01 00 FF 
04970     80 14 06 F6 | 	mov	arg02, ##@LR__4867
04974     0F 13 02 F6 | 	mov	arg01, local01
04978     F8 8A B1 FD | 	call	#__system___string_cmp
0497c     00 FA 0D F2 | 	cmp	result1, #0 wz
04980     64 01 90 AD |  if_e	jmp	#LR__0363
04984     67 01 00 FF 
04988     86 14 06 F6 | 	mov	arg02, ##@LR__4868
0498c     0F 13 02 F6 | 	mov	arg01, local01
04990     E0 8A B1 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     54 01 90 AD |  if_e	jmp	#LR__0364
0499c     67 01 00 FF 
049a0     8C 14 06 F6 | 	mov	arg02, ##@LR__4869
049a4     0F 13 02 F6 | 	mov	arg01, local01
049a8     C8 8A B1 FD | 	call	#__system___string_cmp
049ac     00 FA 0D F2 | 	cmp	result1, #0 wz
049b0     44 01 90 AD |  if_e	jmp	#LR__0365
049b4     67 01 00 FF 
049b8     90 14 06 F6 | 	mov	arg02, ##@LR__4870
049bc     0F 13 02 F6 | 	mov	arg01, local01
049c0     B0 8A B1 FD | 	call	#__system___string_cmp
049c4     00 FA 0D F2 | 	cmp	result1, #0 wz
049c8     34 01 90 AD |  if_e	jmp	#LR__0366
049cc     67 01 00 FF 
049d0     94 14 06 F6 | 	mov	arg02, ##@LR__4871
049d4     0F 13 02 F6 | 	mov	arg01, local01
049d8     98 8A B1 FD | 	call	#__system___string_cmp
049dc     00 FA 0D F2 | 	cmp	result1, #0 wz
049e0     24 01 90 AD |  if_e	jmp	#LR__0367
049e4     67 01 00 FF 
049e8     98 14 06 F6 | 	mov	arg02, ##@LR__4872
049ec     0F 13 02 F6 | 	mov	arg01, local01
049f0     80 8A B1 FD | 	call	#__system___string_cmp
049f4     00 FA 0D F2 | 	cmp	result1, #0 wz
049f8     14 01 90 AD |  if_e	jmp	#LR__0368
049fc     67 01 00 FF 
04a00     9E 14 06 F6 | 	mov	arg02, ##@LR__4873
04a04     0F 13 02 F6 | 	mov	arg01, local01
04a08     68 8A B1 FD | 	call	#__system___string_cmp
04a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a10     04 01 90 AD |  if_e	jmp	#LR__0369
04a14     67 01 00 FF 
04a18     A4 14 06 F6 | 	mov	arg02, ##@LR__4874
04a1c     0F 13 02 F6 | 	mov	arg01, local01
04a20     50 8A B1 FD | 	call	#__system___string_cmp
04a24     00 FA 0D F2 | 	cmp	result1, #0 wz
04a28     F4 00 90 AD |  if_e	jmp	#LR__0370
04a2c     F8 00 90 FD | 	jmp	#LR__0371
04a30                 | LR__0340
04a30     9E FA 05 F6 | 	mov	result1, #158
04a34     F4 00 90 FD | 	jmp	#LR__0372
04a38                 | LR__0341
04a38     85 FA 05 F6 | 	mov	result1, #133
04a3c     EC 00 90 FD | 	jmp	#LR__0372
04a40                 | LR__0342
04a40     9B FA 05 F6 | 	mov	result1, #155
04a44     E4 00 90 FD | 	jmp	#LR__0372
04a48                 | LR__0343
04a48     9B FA 05 F6 | 	mov	result1, #155
04a4c     DC 00 90 FD | 	jmp	#LR__0372
04a50                 | LR__0344
04a50     9B FA 05 F6 | 	mov	result1, #155
04a54     D4 00 90 FD | 	jmp	#LR__0372
04a58                 | LR__0345
04a58     84 FA 05 F6 | 	mov	result1, #132
04a5c     CC 00 90 FD | 	jmp	#LR__0372
04a60                 | LR__0346
04a60     86 FA 05 F6 | 	mov	result1, #134
04a64     C4 00 90 FD | 	jmp	#LR__0372
04a68                 | LR__0347
04a68     82 FA 05 F6 | 	mov	result1, #130
04a6c     BC 00 90 FD | 	jmp	#LR__0372
04a70                 | LR__0348
04a70     99 FA 05 F6 | 	mov	result1, #153
04a74     B4 00 90 FD | 	jmp	#LR__0372
04a78                 | LR__0349
04a78     9C FA 05 F6 | 	mov	result1, #156
04a7c     AC 00 90 FD | 	jmp	#LR__0372
04a80                 | LR__0350
04a80     6F FA 05 F6 | 	mov	result1, #111
04a84     A4 00 90 FD | 	jmp	#LR__0372
04a88                 | LR__0351
04a88     6F FA 05 F6 | 	mov	result1, #111
04a8c     9C 00 90 FD | 	jmp	#LR__0372
04a90                 | LR__0352
04a90     93 FA 05 F6 | 	mov	result1, #147
04a94     94 00 90 FD | 	jmp	#LR__0372
04a98                 | LR__0353
04a98     94 FA 05 F6 | 	mov	result1, #148
04a9c     8C 00 90 FD | 	jmp	#LR__0372
04aa0                 | LR__0354
04aa0     62 FA 05 F6 | 	mov	result1, #98
04aa4     84 00 90 FD | 	jmp	#LR__0372
04aa8                 | LR__0355
04aa8     9D FA 05 F6 | 	mov	result1, #157
04aac     7C 00 90 FD | 	jmp	#LR__0372
04ab0                 | LR__0356
04ab0     9A FA 05 F6 | 	mov	result1, #154
04ab4     74 00 90 FD | 	jmp	#LR__0372
04ab8                 | LR__0357
04ab8     66 FA 05 F6 | 	mov	result1, #102
04abc     6C 00 90 FD | 	jmp	#LR__0372
04ac0                 | LR__0358
04ac0     67 FA 05 F6 | 	mov	result1, #103
04ac4     64 00 90 FD | 	jmp	#LR__0372
04ac8                 | LR__0359
04ac8     64 FA 05 F6 | 	mov	result1, #100
04acc     5C 00 90 FD | 	jmp	#LR__0372
04ad0                 | LR__0360
04ad0     65 FA 05 F6 | 	mov	result1, #101
04ad4     54 00 90 FD | 	jmp	#LR__0372
04ad8                 | LR__0361
04ad8     98 FA 05 F6 | 	mov	result1, #152
04adc     4C 00 90 FD | 	jmp	#LR__0372
04ae0                 | LR__0362
04ae0     7B FA 05 F6 | 	mov	result1, #123
04ae4     44 00 90 FD | 	jmp	#LR__0372
04ae8                 | LR__0363
04ae8     76 FA 05 F6 | 	mov	result1, #118
04aec     3C 00 90 FD | 	jmp	#LR__0372
04af0                 | LR__0364
04af0     7A FA 05 F6 | 	mov	result1, #122
04af4     34 00 90 FD | 	jmp	#LR__0372
04af8                 | LR__0365
04af8     54 FA 05 F6 | 	mov	result1, #84
04afc     2C 00 90 FD | 	jmp	#LR__0372
04b00                 | LR__0366
04b00     6B FA 05 F6 | 	mov	result1, #107
04b04     24 00 90 FD | 	jmp	#LR__0372
04b08                 | LR__0367
04b08     87 FA 05 F6 | 	mov	result1, #135
04b0c     1C 00 90 FD | 	jmp	#LR__0372
04b10                 | LR__0368
04b10     6A FA 05 F6 | 	mov	result1, #106
04b14     14 00 90 FD | 	jmp	#LR__0372
04b18                 | LR__0369
04b18     6E FA 05 F6 | 	mov	result1, #110
04b1c     0C 00 90 FD | 	jmp	#LR__0372
04b20                 | LR__0370
04b20     83 FA 05 F6 | 	mov	result1, #131
04b24     04 00 90 FD | 	jmp	#LR__0372
04b28                 | LR__0371
04b28     00 FA 05 F6 | 	mov	result1, #0
04b2c                 | LR__0372
04b2c     A7 F0 03 F6 | 	mov	ptra, fp
04b30     B2 00 A0 FD | 	call	#popregs_
04b34                 | _isfunction_ret
04b34     2D 00 64 FD | 	ret
04b38                 | 
04b38                 | ' 
04b38                 | ' function isname(s as string) as boolean
04b38                 | _isname
04b38     0D 4A 05 F6 | 	mov	COUNT_, #13
04b3c     A8 00 A0 FD | 	call	#pushregs_
04b40     09 1F 02 F6 | 	mov	local01, arg01
04b44     09 21 02 F6 | 	mov	local02, arg01
04b48     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04b4c                 | LR__0380
04b4c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04b50     01 20 06 51 |  if_ne	add	local02, #1
04b54     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04b58                 | LR__0381
04b58     09 21 82 F1 | 	sub	local02, arg01
04b5c     10 FB 01 F6 | 	mov	result1, local02
04b60     FD 22 0A F6 | 	mov	local03, result1 wz
04b64     00 FA 05 A6 |  if_e	mov	result1, #0
04b68     34 02 90 AD |  if_e	jmp	#LR__0393
04b6c     0F 13 02 F6 | 	mov	arg01, local01
04b70     01 14 06 F6 | 	mov	arg02, #1
04b74     01 16 06 F6 | 	mov	arg03, #1
04b78     2C AA B1 FD | 	call	#__system__Mid_S
04b7c     FD 24 02 F6 | 	mov	local04, result1
04b80                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04b80     67 01 00 FF 
04b84     A8 14 06 F6 | 	mov	arg02, ##@LR__4875
04b88     12 13 02 F6 | 	mov	arg01, local04
04b8c     E4 88 B1 FD | 	call	#__system___string_cmp
04b90     00 FA 55 F2 | 	cmps	result1, #0 wc
04b94     18 00 90 CD |  if_b	jmp	#LR__0382
04b98     67 01 00 FF 
04b9c     AA 14 06 F6 | 	mov	arg02, ##@LR__4876
04ba0     12 13 02 F6 | 	mov	arg01, local04
04ba4     CC 88 B1 FD | 	call	#__system___string_cmp
04ba8     01 FA 55 F2 | 	cmps	result1, #1 wc
04bac     1C 00 90 CD |  if_b	jmp	#LR__0383
04bb0                 | LR__0382
04bb0     67 01 00 FF 
04bb4     AC 14 06 F6 | 	mov	arg02, ##@LR__4877
04bb8     12 13 02 F6 | 	mov	arg01, local04
04bbc     B4 88 B1 FD | 	call	#__system___string_cmp
04bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc4     00 FA 05 56 |  if_ne	mov	result1, #0
04bc8     D4 01 90 5D |  if_ne	jmp	#LR__0393
04bcc                 | LR__0383
04bcc                 | ' if l>2 then 
04bcc     03 22 56 F2 | 	cmps	local03, #3 wc
04bd0     C8 01 90 CD |  if_b	jmp	#LR__0392
04bd4                 | '   for i=2 to l
04bd4     02 26 06 F6 | 	mov	local05, #2
04bd8     11 29 02 F6 | 	mov	local06, local03
04bdc     01 28 06 F1 | 	add	local06, #1
04be0                 | LR__0384
04be0     14 27 52 F2 | 	cmps	local05, local06 wc
04be4     B4 01 90 3D |  if_ae	jmp	#LR__0391
04be8     0F 13 02 F6 | 	mov	arg01, local01
04bec     13 15 02 F6 | 	mov	arg02, local05
04bf0     01 16 06 F6 | 	mov	arg03, #1
04bf4     B0 A9 B1 FD | 	call	#__system__Mid_S
04bf8     FD 24 02 F6 | 	mov	local04, result1
04bfc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04bfc     11 27 52 F2 | 	cmps	local05, local03 wc
04c00     9C 00 90 3D |  if_ae	jmp	#LR__0387
04c04     67 01 00 FF 
04c08     AE 14 06 F6 | 	mov	arg02, ##@LR__4878
04c0c     12 13 02 F6 | 	mov	arg01, local04
04c10     60 88 B1 FD | 	call	#__system___string_cmp
04c14     00 FA 55 F2 | 	cmps	result1, #0 wc
04c18     18 00 90 CD |  if_b	jmp	#LR__0385
04c1c     67 01 00 FF 
04c20     B0 14 06 F6 | 	mov	arg02, ##@LR__4879
04c24     12 13 02 F6 | 	mov	arg01, local04
04c28     48 88 B1 FD | 	call	#__system___string_cmp
04c2c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c30     6C 00 90 CD |  if_b	jmp	#LR__0387
04c34                 | LR__0385
04c34     67 01 00 FF 
04c38     B2 14 06 F6 | 	mov	arg02, ##@LR__4880
04c3c     12 13 02 F6 | 	mov	arg01, local04
04c40     30 88 B1 FD | 	call	#__system___string_cmp
04c44     00 FA 55 F2 | 	cmps	result1, #0 wc
04c48     18 00 90 CD |  if_b	jmp	#LR__0386
04c4c     67 01 00 FF 
04c50     B4 14 06 F6 | 	mov	arg02, ##@LR__4881
04c54     12 13 02 F6 | 	mov	arg01, local04
04c58     18 88 B1 FD | 	call	#__system___string_cmp
04c5c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c60     3C 00 90 CD |  if_b	jmp	#LR__0387
04c64                 | LR__0386
04c64     67 01 00 FF 
04c68     B6 2A 06 F6 | 	mov	local07, ##@LR__4882
04c6c     12 13 02 F6 | 	mov	arg01, local04
04c70     15 15 02 F6 | 	mov	arg02, local07
04c74     FC 87 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     20 00 90 AD |  if_e	jmp	#LR__0387
04c80     67 01 00 FF 
04c84     B8 2C 06 F6 | 	mov	local08, ##@LR__4883
04c88     12 13 02 F6 | 	mov	arg01, local04
04c8c     16 15 02 F6 | 	mov	arg02, local08
04c90     E0 87 B1 FD | 	call	#__system___string_cmp
04c94     FD 2E 0A F6 | 	mov	local09, result1 wz
04c98     00 FA 05 56 |  if_ne	mov	result1, #0
04c9c     00 01 90 5D |  if_ne	jmp	#LR__0393
04ca0                 | LR__0387
04ca0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04ca0     11 27 0A F2 | 	cmp	local05, local03 wz
04ca4     EC 00 90 5D |  if_ne	jmp	#LR__0390
04ca8     67 01 00 FF 
04cac     BA 30 06 F6 | 	mov	local10, ##@LR__4884
04cb0     12 13 02 F6 | 	mov	arg01, local04
04cb4     18 15 02 F6 | 	mov	arg02, local10
04cb8     B8 87 B1 FD | 	call	#__system___string_cmp
04cbc     FD 32 02 F6 | 	mov	local11, result1
04cc0     00 32 56 F2 | 	cmps	local11, #0 wc
04cc4     1C 00 90 CD |  if_b	jmp	#LR__0388
04cc8     67 01 00 FF 
04ccc     BC 14 06 F6 | 	mov	arg02, ##@LR__4885
04cd0     12 13 02 F6 | 	mov	arg01, local04
04cd4     9C 87 B1 FD | 	call	#__system___string_cmp
04cd8     FD 30 02 F6 | 	mov	local10, result1
04cdc     01 30 56 F2 | 	cmps	local10, #1 wc
04ce0     B0 00 90 CD |  if_b	jmp	#LR__0390
04ce4                 | LR__0388
04ce4     67 01 00 FF 
04ce8     BE 14 06 F6 | 	mov	arg02, ##@LR__4886
04cec     12 13 02 F6 | 	mov	arg01, local04
04cf0     80 87 B1 FD | 	call	#__system___string_cmp
04cf4     00 FA 55 F2 | 	cmps	result1, #0 wc
04cf8     1C 00 90 CD |  if_b	jmp	#LR__0389
04cfc     67 01 00 FF 
04d00     C0 2E 06 F6 | 	mov	local09, ##@LR__4887
04d04     12 13 02 F6 | 	mov	arg01, local04
04d08     17 15 02 F6 | 	mov	arg02, local09
04d0c     64 87 B1 FD | 	call	#__system___string_cmp
04d10     01 FA 55 F2 | 	cmps	result1, #1 wc
04d14     7C 00 90 CD |  if_b	jmp	#LR__0390
04d18                 | LR__0389
04d18     67 01 00 FF 
04d1c     C2 2E 06 F6 | 	mov	local09, ##@LR__4888
04d20     12 13 02 F6 | 	mov	arg01, local04
04d24     17 15 02 F6 | 	mov	arg02, local09
04d28     48 87 B1 FD | 	call	#__system___string_cmp
04d2c     00 FA 4D F2 | 	cmps	result1, #0 wz
04d30     60 00 90 AD |  if_e	jmp	#LR__0390
04d34     67 01 00 FF 
04d38     C4 2C 06 F6 | 	mov	local08, ##@LR__4889
04d3c     12 13 02 F6 | 	mov	arg01, local04
04d40     16 15 02 F6 | 	mov	arg02, local08
04d44     2C 87 B1 FD | 	call	#__system___string_cmp
04d48     FD 2E 0A F6 | 	mov	local09, result1 wz
04d4c     44 00 90 AD |  if_e	jmp	#LR__0390
04d50     67 01 00 FF 
04d54     C6 34 06 F6 | 	mov	local12, ##@LR__4890
04d58     1A 2D 02 F6 | 	mov	local08, local12
04d5c     12 13 02 F6 | 	mov	arg01, local04
04d60     16 15 02 F6 | 	mov	arg02, local08
04d64     0C 87 B1 FD | 	call	#__system___string_cmp
04d68     FD 2A 0A F6 | 	mov	local07, result1 wz
04d6c     24 00 90 AD |  if_e	jmp	#LR__0390
04d70     67 01 00 FF 
04d74     C8 36 06 F6 | 	mov	local13, ##@LR__4891
04d78     1B 35 02 F6 | 	mov	local12, local13
04d7c     12 13 02 F6 | 	mov	arg01, local04
04d80     1A 15 02 F6 | 	mov	arg02, local12
04d84     EC 86 B1 FD | 	call	#__system___string_cmp
04d88     FD 2C 0A F6 | 	mov	local08, result1 wz
04d8c     00 FA 05 56 |  if_ne	mov	result1, #0
04d90     0C 00 90 5D |  if_ne	jmp	#LR__0393
04d94                 | LR__0390
04d94     01 26 06 F1 | 	add	local05, #1
04d98     44 FE 9F FD | 	jmp	#LR__0384
04d9c                 | LR__0391
04d9c                 | LR__0392
04d9c                 | ' return true
04d9c     01 FA 65 F6 | 	neg	result1, #1
04da0                 | LR__0393
04da0     A7 F0 03 F6 | 	mov	ptra, fp
04da4     B2 00 A0 FD | 	call	#popregs_
04da8                 | _isname_ret
04da8     2D 00 64 FD | 	ret
04dac                 | 
04dac                 | ' 
04dac                 | ' function isnum(s as string) as boolean
04dac                 | _isnum
04dac     0D 4A 05 F6 | 	mov	COUNT_, #13
04db0     A8 00 A0 FD | 	call	#pushregs_
04db4     09 1F 02 F6 | 	mov	local01, arg01
04db8     00 20 06 F6 | 	mov	local02, #0
04dbc     00 22 06 F6 | 	mov	local03, #0
04dc0     0F 13 02 F6 | 	mov	arg01, local01
04dc4     09 25 02 F6 | 	mov	local04, arg01
04dc8     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
04dcc                 | LR__0400
04dcc     12 FB C9 FA | 	rdbyte	result1, local04 wz
04dd0     01 24 06 51 |  if_ne	add	local04, #1
04dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
04dd8                 | LR__0401
04dd8     09 25 82 F1 | 	sub	local04, arg01
04ddc     12 FB 01 F6 | 	mov	result1, local04
04de0     FD 26 0A F6 | 	mov	local05, result1 wz
04de4     00 FA 05 A6 |  if_e	mov	result1, #0
04de8     8C 02 90 AD |  if_e	jmp	#LR__0412
04dec     0F 13 02 F6 | 	mov	arg01, local01
04df0     01 14 06 F6 | 	mov	arg02, #1
04df4     01 16 06 F6 | 	mov	arg03, #1
04df8     AC A7 B1 FD | 	call	#__system__Mid_S
04dfc     FD 28 02 F6 | 	mov	local06, result1
04e00                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04e00     67 01 00 FF 
04e04     CA 14 06 F6 | 	mov	arg02, ##@LR__4892
04e08     14 13 02 F6 | 	mov	arg01, local06
04e0c     64 86 B1 FD | 	call	#__system___string_cmp
04e10     00 FA 55 F2 | 	cmps	result1, #0 wc
04e14     18 00 90 CD |  if_b	jmp	#LR__0402
04e18     67 01 00 FF 
04e1c     CC 14 06 F6 | 	mov	arg02, ##@LR__4893
04e20     14 13 02 F6 | 	mov	arg01, local06
04e24     4C 86 B1 FD | 	call	#__system___string_cmp
04e28     01 FA 55 F2 | 	cmps	result1, #1 wc
04e2c     78 00 90 CD |  if_b	jmp	#LR__0403
04e30                 | LR__0402
04e30     67 01 00 FF 
04e34     CE 14 06 F6 | 	mov	arg02, ##@LR__4894
04e38     14 13 02 F6 | 	mov	arg01, local06
04e3c     34 86 B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     60 00 90 AD |  if_e	jmp	#LR__0403
04e48     67 01 00 FF 
04e4c     D0 2A 06 F6 | 	mov	local07, ##@LR__4895
04e50     14 13 02 F6 | 	mov	arg01, local06
04e54     15 15 02 F6 | 	mov	arg02, local07
04e58     18 86 B1 FD | 	call	#__system___string_cmp
04e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e60     44 00 90 AD |  if_e	jmp	#LR__0403
04e64     67 01 00 FF 
04e68     D2 2C 06 F6 | 	mov	local08, ##@LR__4896
04e6c     16 2B 02 F6 | 	mov	local07, local08
04e70     14 13 02 F6 | 	mov	arg01, local06
04e74     15 15 02 F6 | 	mov	arg02, local07
04e78     F8 85 B1 FD | 	call	#__system___string_cmp
04e7c     00 FA 4D F2 | 	cmps	result1, #0 wz
04e80     24 00 90 AD |  if_e	jmp	#LR__0403
04e84     67 01 00 FF 
04e88     D4 2E 06 F6 | 	mov	local09, ##@LR__4897
04e8c     17 2D 02 F6 | 	mov	local08, local09
04e90     14 13 02 F6 | 	mov	arg01, local06
04e94     16 15 02 F6 | 	mov	arg02, local08
04e98     D8 85 B1 FD | 	call	#__system___string_cmp
04e9c     FD 2A 0A F6 | 	mov	local07, result1 wz
04ea0     00 FA 05 56 |  if_ne	mov	result1, #0
04ea4     D0 01 90 5D |  if_ne	jmp	#LR__0412
04ea8                 | LR__0403
04ea8                 | ' if m$="." then ds=1
04ea8     67 01 00 FF 
04eac     D6 14 06 F6 | 	mov	arg02, ##@LR__4898
04eb0     14 13 02 F6 | 	mov	arg01, local06
04eb4     BC 85 B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     01 20 06 A6 |  if_e	mov	local02, #1
04ec0                 | ' if l>1 then 
04ec0     02 26 56 F2 | 	cmps	local05, #2 wc
04ec4     AC 01 90 CD |  if_b	jmp	#LR__0411
04ec8                 | '   for i=2 to l
04ec8     02 30 06 F6 | 	mov	local10, #2
04ecc     13 33 02 F6 | 	mov	local11, local05
04ed0     01 32 06 F1 | 	add	local11, #1
04ed4                 | LR__0404
04ed4     19 31 52 F2 | 	cmps	local10, local11 wc
04ed8     98 01 90 3D |  if_ae	jmp	#LR__0410
04edc     0F 13 02 F6 | 	mov	arg01, local01
04ee0     18 15 02 F6 | 	mov	arg02, local10
04ee4     01 16 06 F6 | 	mov	arg03, #1
04ee8     BC A6 B1 FD | 	call	#__system__Mid_S
04eec     FD 28 02 F6 | 	mov	local06, result1
04ef0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04ef0     67 01 00 FF 
04ef4     D8 14 06 F6 | 	mov	arg02, ##@LR__4899
04ef8     14 13 02 F6 | 	mov	arg01, local06
04efc     74 85 B1 FD | 	call	#__system___string_cmp
04f00     00 FA 55 F2 | 	cmps	result1, #0 wc
04f04     18 00 90 CD |  if_b	jmp	#LR__0405
04f08     67 01 00 FF 
04f0c     DA 14 06 F6 | 	mov	arg02, ##@LR__4900
04f10     14 13 02 F6 | 	mov	arg01, local06
04f14     5C 85 B1 FD | 	call	#__system___string_cmp
04f18     01 FA 55 F2 | 	cmps	result1, #1 wc
04f1c     98 00 90 CD |  if_b	jmp	#LR__0406
04f20                 | LR__0405
04f20     67 01 00 FF 
04f24     DC 14 06 F6 | 	mov	arg02, ##@LR__4901
04f28     14 13 02 F6 | 	mov	arg01, local06
04f2c     44 85 B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     80 00 90 AD |  if_e	jmp	#LR__0406
04f38     67 01 00 FF 
04f3c     DE 2A 06 F6 | 	mov	local07, ##@LR__4902
04f40     14 13 02 F6 | 	mov	arg01, local06
04f44     15 15 02 F6 | 	mov	arg02, local07
04f48     28 85 B1 FD | 	call	#__system___string_cmp
04f4c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f50     64 00 90 AD |  if_e	jmp	#LR__0406
04f54     67 01 00 FF 
04f58     E0 2C 06 F6 | 	mov	local08, ##@LR__4903
04f5c     16 2B 02 F6 | 	mov	local07, local08
04f60     14 13 02 F6 | 	mov	arg01, local06
04f64     15 15 02 F6 | 	mov	arg02, local07
04f68     08 85 B1 FD | 	call	#__system___string_cmp
04f6c     FD 34 0A F6 | 	mov	local12, result1 wz
04f70     44 00 90 AD |  if_e	jmp	#LR__0406
04f74     67 01 00 FF 
04f78     E2 2E 06 F6 | 	mov	local09, ##@LR__4904
04f7c     17 2D 02 F6 | 	mov	local08, local09
04f80     14 13 02 F6 | 	mov	arg01, local06
04f84     16 15 02 F6 | 	mov	arg02, local08
04f88     E8 84 B1 FD | 	call	#__system___string_cmp
04f8c     FD 2A 0A F6 | 	mov	local07, result1 wz
04f90     24 00 90 AD |  if_e	jmp	#LR__0406
04f94     67 01 00 FF 
04f98     E4 36 06 F6 | 	mov	local13, ##@LR__4905
04f9c     1B 2F 02 F6 | 	mov	local09, local13
04fa0     14 13 02 F6 | 	mov	arg01, local06
04fa4     17 15 02 F6 | 	mov	arg02, local09
04fa8     C8 84 B1 FD | 	call	#__system___string_cmp
04fac     FD 2C 0A F6 | 	mov	local08, result1 wz
04fb0     00 FA 05 56 |  if_ne	mov	result1, #0
04fb4     C0 00 90 5D |  if_ne	jmp	#LR__0412
04fb8                 | LR__0406
04fb8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04fb8     67 01 00 FF 
04fbc     E6 14 06 F6 | 	mov	arg02, ##@LR__4906
04fc0     14 13 02 F6 | 	mov	arg01, local06
04fc4     AC 84 B1 FD | 	call	#__system___string_cmp
04fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fcc     38 00 90 5D |  if_ne	jmp	#LR__0407
04fd0     18 15 02 F6 | 	mov	arg02, local10
04fd4     01 14 86 F1 | 	sub	arg02, #1
04fd8     0F 13 02 F6 | 	mov	arg01, local01
04fdc     01 16 06 F6 | 	mov	arg03, #1
04fe0     C4 A5 B1 FD | 	call	#__system__Mid_S
04fe4     FD 12 02 F6 | 	mov	arg01, result1
04fe8     B4 A7 B1 FD | 	call	#__system__LCase_S
04fec     FD 12 02 F6 | 	mov	arg01, result1
04ff0     67 01 00 FF 
04ff4     E8 14 06 F6 | 	mov	arg02, ##@LR__4907
04ff8     78 84 B1 FD | 	call	#__system___string_cmp
04ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
05000     00 FA 05 56 |  if_ne	mov	result1, #0
05004     70 00 90 5D |  if_ne	jmp	#LR__0412
05008                 | LR__0407
05008                 | '     if m$="." then ds+=1: if ds>1 then return false
05008     67 01 00 FF 
0500c     EA 14 06 F6 | 	mov	arg02, ##@LR__4908
05010     14 13 02 F6 | 	mov	arg01, local06
05014     5C 84 B1 FD | 	call	#__system___string_cmp
05018     00 FA 0D F2 | 	cmp	result1, #0 wz
0501c     01 20 06 A1 |  if_e	add	local02, #1
05020     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05024     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05028     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0412
0502c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0502c     67 01 00 FF 
05030     EC 14 06 F6 | 	mov	arg02, ##@LR__4909
05034     14 13 02 F6 | 	mov	arg01, local06
05038     38 84 B1 FD | 	call	#__system___string_cmp
0503c     00 FA 4D F2 | 	cmps	result1, #0 wz
05040     18 00 90 AD |  if_e	jmp	#LR__0408
05044     67 01 00 FF 
05048     EE 14 06 F6 | 	mov	arg02, ##@LR__4910
0504c     14 13 02 F6 | 	mov	arg01, local06
05050     20 84 B1 FD | 	call	#__system___string_cmp
05054     00 FA 4D F2 | 	cmps	result1, #0 wz
05058     10 00 90 5D |  if_ne	jmp	#LR__0409
0505c                 | LR__0408
0505c     01 22 06 F1 | 	add	local03, #1
05060     02 22 56 F2 | 	cmps	local03, #2 wc
05064     00 FA 05 36 |  if_ae	mov	result1, #0
05068     0C 00 90 3D |  if_ae	jmp	#LR__0412
0506c                 | LR__0409
0506c     01 30 06 F1 | 	add	local10, #1
05070     60 FE 9F FD | 	jmp	#LR__0404
05074                 | LR__0410
05074                 | LR__0411
05074                 | ' return true
05074     01 FA 65 F6 | 	neg	result1, #1
05078                 | LR__0412
05078     A7 F0 03 F6 | 	mov	ptra, fp
0507c     B2 00 A0 FD | 	call	#popregs_
05080                 | _isnum_ret
05080     2D 00 64 FD | 	ret
05084                 | 
05084                 | '   
05084                 | ' function isint(s as string) as boolean
05084                 | _isint
05084     05 4A 05 F6 | 	mov	COUNT_, #5
05088     A8 00 A0 FD | 	call	#pushregs_
0508c     09 1F 02 F6 | 	mov	local01, arg01
05090     09 21 02 F6 | 	mov	local02, arg01
05094     97 06 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
05098                 | LR__0420
05098     10 FB C9 FA | 	rdbyte	result1, local02 wz
0509c     01 20 06 51 |  if_ne	add	local02, #1
050a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0420
050a4                 | LR__0421
050a4     09 21 82 F1 | 	sub	local02, arg01
050a8     10 FB 01 F6 | 	mov	result1, local02
050ac     FD 20 0A F6 | 	mov	local02, result1 wz
050b0     00 FA 05 A6 |  if_e	mov	result1, #0
050b4     18 01 90 AD |  if_e	jmp	#LR__0429
050b8     0F 13 02 F6 | 	mov	arg01, local01
050bc     01 14 06 F6 | 	mov	arg02, #1
050c0     01 16 06 F6 | 	mov	arg03, #1
050c4     E0 A4 B1 FD | 	call	#__system__Mid_S
050c8     FD 22 02 F6 | 	mov	local03, result1
050cc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
050cc     67 01 00 FF 
050d0     F0 14 06 F6 | 	mov	arg02, ##@LR__4911
050d4     11 13 02 F6 | 	mov	arg01, local03
050d8     98 83 B1 FD | 	call	#__system___string_cmp
050dc     00 FA 55 F2 | 	cmps	result1, #0 wc
050e0     18 00 90 CD |  if_b	jmp	#LR__0422
050e4     67 01 00 FF 
050e8     F2 14 06 F6 | 	mov	arg02, ##@LR__4912
050ec     11 13 02 F6 | 	mov	arg01, local03
050f0     80 83 B1 FD | 	call	#__system___string_cmp
050f4     01 FA 55 F2 | 	cmps	result1, #1 wc
050f8     4C 00 90 CD |  if_b	jmp	#LR__0423
050fc                 | LR__0422
050fc     67 01 00 FF 
05100     F4 14 06 F6 | 	mov	arg02, ##@LR__4913
05104     11 13 02 F6 | 	mov	arg01, local03
05108     68 83 B1 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     34 00 90 AD |  if_e	jmp	#LR__0423
05114     67 01 00 FF 
05118     F6 14 06 F6 | 	mov	arg02, ##@LR__4914
0511c     11 13 02 F6 | 	mov	arg01, local03
05120     50 83 B1 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     1C 00 90 AD |  if_e	jmp	#LR__0423
0512c     67 01 00 FF 
05130     F8 14 06 F6 | 	mov	arg02, ##@LR__4915
05134     11 13 02 F6 | 	mov	arg01, local03
05138     38 83 B1 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     00 FA 05 56 |  if_ne	mov	result1, #0
05144     88 00 90 5D |  if_ne	jmp	#LR__0429
05148                 | LR__0423
05148                 | ' 
05148                 | ' if l>1 then 
05148     02 20 56 F2 | 	cmps	local02, #2 wc
0514c     7C 00 90 CD |  if_b	jmp	#LR__0428
05150                 | '   for i=2 to l
05150     02 24 06 F6 | 	mov	local04, #2
05154     10 27 02 F6 | 	mov	local05, local02
05158     01 26 06 F1 | 	add	local05, #1
0515c                 | LR__0424
0515c     13 25 52 F2 | 	cmps	local04, local05 wc
05160     68 00 90 3D |  if_ae	jmp	#LR__0427
05164     0F 13 02 F6 | 	mov	arg01, local01
05168     12 15 02 F6 | 	mov	arg02, local04
0516c     01 16 06 F6 | 	mov	arg03, #1
05170     34 A4 B1 FD | 	call	#__system__Mid_S
05174     FD 22 02 F6 | 	mov	local03, result1
05178                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05178     67 01 00 FF 
0517c     FA 14 06 F6 | 	mov	arg02, ##@LR__4916
05180     11 13 02 F6 | 	mov	arg01, local03
05184     EC 82 B1 FD | 	call	#__system___string_cmp
05188     00 FA 55 F2 | 	cmps	result1, #0 wc
0518c     18 00 90 CD |  if_b	jmp	#LR__0425
05190     67 01 00 FF 
05194     FC 14 06 F6 | 	mov	arg02, ##@LR__4917
05198     11 13 02 F6 | 	mov	arg01, local03
0519c     D4 82 B1 FD | 	call	#__system___string_cmp
051a0     01 FA 55 F2 | 	cmps	result1, #1 wc
051a4     1C 00 90 CD |  if_b	jmp	#LR__0426
051a8                 | LR__0425
051a8     67 01 00 FF 
051ac     FE 14 06 F6 | 	mov	arg02, ##@LR__4918
051b0     11 13 02 F6 | 	mov	arg01, local03
051b4     BC 82 B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     00 FA 05 56 |  if_ne	mov	result1, #0
051c0     0C 00 90 5D |  if_ne	jmp	#LR__0429
051c4                 | LR__0426
051c4     01 24 06 F1 | 	add	local04, #1
051c8     90 FF 9F FD | 	jmp	#LR__0424
051cc                 | LR__0427
051cc                 | LR__0428
051cc                 | ' return true
051cc     01 FA 65 F6 | 	neg	result1, #1
051d0                 | LR__0429
051d0     A7 F0 03 F6 | 	mov	ptra, fp
051d4     B2 00 A0 FD | 	call	#popregs_
051d8                 | _isint_ret
051d8     2D 00 64 FD | 	ret
051dc                 | 
051dc                 | ' 
051dc                 | ' function isdec(s as string) as boolean
051dc                 | _isdec
051dc     05 4A 05 F6 | 	mov	COUNT_, #5
051e0     A8 00 A0 FD | 	call	#pushregs_
051e4     09 1F 02 F6 | 	mov	local01, arg01
051e8     09 21 02 F6 | 	mov	local02, arg01
051ec     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
051f0                 | LR__0430
051f0     10 FB C9 FA | 	rdbyte	result1, local02 wz
051f4     01 20 06 51 |  if_ne	add	local02, #1
051f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
051fc                 | LR__0431
051fc     09 21 82 F1 | 	sub	local02, arg01
05200     10 FB 01 F6 | 	mov	result1, local02
05204     FD 20 0A F6 | 	mov	local02, result1 wz
05208     00 FA 05 A6 |  if_e	mov	result1, #0
0520c     80 00 90 AD |  if_e	jmp	#LR__0436
05210                 | ' for i=1 to l
05210     01 22 06 F6 | 	mov	local03, #1
05214     10 25 02 F6 | 	mov	local04, local02
05218     01 24 06 F1 | 	add	local04, #1
0521c                 | LR__0432
0521c     12 23 52 F2 | 	cmps	local03, local04 wc
05220     68 00 90 3D |  if_ae	jmp	#LR__0435
05224     0F 13 02 F6 | 	mov	arg01, local01
05228     11 15 02 F6 | 	mov	arg02, local03
0522c     01 16 06 F6 | 	mov	arg03, #1
05230     74 A3 B1 FD | 	call	#__system__Mid_S
05234     FD 26 02 F6 | 	mov	local05, result1
05238                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05238     67 01 00 FF 
0523c     00 15 06 F6 | 	mov	arg02, ##@LR__4919
05240     13 13 02 F6 | 	mov	arg01, local05
05244     2C 82 B1 FD | 	call	#__system___string_cmp
05248     00 FA 55 F2 | 	cmps	result1, #0 wc
0524c     18 00 90 CD |  if_b	jmp	#LR__0433
05250     67 01 00 FF 
05254     02 15 06 F6 | 	mov	arg02, ##@LR__4920
05258     13 13 02 F6 | 	mov	arg01, local05
0525c     14 82 B1 FD | 	call	#__system___string_cmp
05260     01 FA 55 F2 | 	cmps	result1, #1 wc
05264     1C 00 90 CD |  if_b	jmp	#LR__0434
05268                 | LR__0433
05268     67 01 00 FF 
0526c     04 15 06 F6 | 	mov	arg02, ##@LR__4921
05270     13 13 02 F6 | 	mov	arg01, local05
05274     FC 81 B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     00 FA 05 56 |  if_ne	mov	result1, #0
05280     0C 00 90 5D |  if_ne	jmp	#LR__0436
05284                 | LR__0434
05284     01 22 06 F1 | 	add	local03, #1
05288     90 FF 9F FD | 	jmp	#LR__0432
0528c                 | LR__0435
0528c                 | ' return true
0528c     01 FA 65 F6 | 	neg	result1, #1
05290                 | LR__0436
05290     A7 F0 03 F6 | 	mov	ptra, fp
05294     B2 00 A0 FD | 	call	#popregs_
05298                 | _isdec_ret
05298     2D 00 64 FD | 	ret
0529c                 | 
0529c                 | ' 
0529c                 | ' function isstring(s as string) as boolean
0529c                 | _isstring
0529c     01 4A 05 F6 | 	mov	COUNT_, #1
052a0     A8 00 A0 FD | 	call	#pushregs_
052a4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
052a4     09 1F 02 F6 | 	mov	local01, arg01
052a8     01 14 06 F6 | 	mov	arg02, #1
052ac     E0 A1 B1 FD | 	call	#__system__Left_S
052b0     FD 12 02 F6 | 	mov	arg01, result1
052b4     67 01 00 FF 
052b8     06 15 06 F6 | 	mov	arg02, ##@LR__4922
052bc     B4 81 B1 FD | 	call	#__system___string_cmp
052c0     00 FA 4D F2 | 	cmps	result1, #0 wz
052c4     28 00 90 5D |  if_ne	jmp	#LR__0440
052c8     0F 13 02 F6 | 	mov	arg01, local01
052cc     01 14 06 F6 | 	mov	arg02, #1
052d0     44 A2 B1 FD | 	call	#__system__Right_S
052d4     FD 12 02 F6 | 	mov	arg01, result1
052d8     67 01 00 FF 
052dc     08 15 06 F6 | 	mov	arg02, ##@LR__4923
052e0     90 81 B1 FD | 	call	#__system___string_cmp
052e4     00 FA 4D F2 | 	cmps	result1, #0 wz
052e8     01 FA 65 A6 |  if_e	neg	result1, #1
052ec     04 00 90 AD |  if_e	jmp	#LR__0441
052f0                 | LR__0440
052f0     00 FA 05 F6 | 	mov	result1, #0
052f4                 | LR__0441
052f4     A7 F0 03 F6 | 	mov	ptra, fp
052f8     B2 00 A0 FD | 	call	#popregs_
052fc                 | _isstring_ret
052fc     2D 00 64 FD | 	ret
05300                 | 
05300                 | ' 
05300                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
05300                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05300                 | ' 
05300                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05300                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
05300                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05300                 | ' 
05300                 | ' '----- delete a line from a program
05300                 | ' 
05300                 | ' function deleteline(aline as ulong) as integer
05300                 | _deleteline
05300     03 4A 05 F6 | 	mov	COUNT_, #3
05304     A8 00 A0 FD | 	call	#pushregs_
05308     2C F0 07 F1 | 	add	ptra, #44
0530c     04 4E 05 F1 | 	add	fp, #4
05310     A7 12 62 FC | 	wrlong	arg01, fp
05314     6A 00 00 FF 
05318     74 E4 05 F1 | 	add	objptr, ##54388
0531c     F2 1E 02 FB | 	rdlong	local01, objptr
05320     0C 4E 05 F1 | 	add	fp, #12
05324     A7 1E 62 FC | 	wrlong	local01, fp
05328     10 4E 85 F1 | 	sub	fp, #16
0532c                 | ' 
0532c                 | ' 
0532c                 | ' searchptr=programstart
0532c                 | ' 
0532c                 | ' do
0532c     5E 00 00 FF 
05330     A8 E5 85 F1 | 	sub	objptr, ##48552
05334                 | LR__0450
05334     14 4E 05 F1 | 	add	fp, #20
05338     A7 12 02 F6 | 	mov	arg01, fp
0533c     04 4E 85 F1 | 	sub	fp, #4
05340     A7 14 02 FB | 	rdlong	arg02, fp
05344     10 4E 85 F1 | 	sub	fp, #16
05348     18 16 06 F6 | 	mov	arg03, #24
0534c     F8 74 B1 FD | 	call	#_psram_spin2_read1
05350     10 4E 05 F1 | 	add	fp, #16
05354     A7 1E 02 FB | 	rdlong	local01, fp
05358     08 4E 85 F1 | 	sub	fp, #8
0535c     A7 1E 62 FC | 	wrlong	local01, fp
05360     20 4E 05 F1 | 	add	fp, #32
05364     A7 1E 02 FB | 	rdlong	local01, fp
05368     18 4E 85 F1 | 	sub	fp, #24
0536c     A7 1E 62 FC | 	wrlong	local01, fp
05370     04 4E 05 F1 | 	add	fp, #4
05374     A7 1E 02 FB | 	rdlong	local01, fp
05378     10 4E 85 F1 | 	sub	fp, #16
0537c     A7 16 02 FB | 	rdlong	arg03, fp
05380     04 4E 85 F1 | 	sub	fp, #4
05384     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05388     28 4E 05 C1 |  if_b	add	fp, #40
0538c     A7 20 02 CB |  if_b	rdlong	local02, fp
05390     28 4E 85 C1 |  if_b	sub	fp, #40
05394     FF FF 3F CF 
05398     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0539c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0450
053a0     0B 00 00 FF 
053a4     CC E4 85 F1 | 	sub	objptr, ##5836
053a8                 | ' 
053a8                 | ' 
053a8                 | ' if header(0)<>aline then return -1
053a8     14 4E 05 F1 | 	add	fp, #20
053ac     A7 1E 02 FB | 	rdlong	local01, fp
053b0     10 4E 85 F1 | 	sub	fp, #16
053b4     A7 22 02 FB | 	rdlong	local03, fp
053b8     04 4E 85 F1 | 	sub	fp, #4
053bc     11 1F 0A F2 | 	cmp	local01, local03 wz
053c0     01 FA 65 56 |  if_ne	neg	result1, #1
053c4     C8 02 90 5D |  if_ne	jmp	#LR__0456
053c8     08 4E 05 F1 | 	add	fp, #8
053cc     A7 12 02 FB | 	rdlong	arg01, fp
053d0     08 4E 85 F1 | 	sub	fp, #8
053d4     01 14 66 F6 | 	neg	arg02, #1
053d8     94 3D B1 FD | 	call	#_pslpoke
053dc                 | ' 
053dc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
053dc                 | ' 
053dc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
053dc     28 4E 05 F1 | 	add	fp, #40
053e0     A7 1E 02 FB | 	rdlong	local01, fp
053e4     28 4E 85 F1 | 	sub	fp, #40
053e8     FF FF 3F FF 
053ec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
053f0     24 4E 05 A1 |  if_e	add	fp, #36
053f4     A7 22 02 AB |  if_e	rdlong	local03, fp
053f8     24 4E 85 A1 |  if_e	sub	fp, #36
053fc     FF FF 7F AF 
05400     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
05404     78 00 90 5D |  if_ne	jmp	#LR__0451
05408     6A 00 00 FF 
0540c     74 E4 05 F1 | 	add	objptr, ##54388
05410     F2 00 68 FC | 	wrlong	#0, objptr
05414     07 00 00 FF 
05418     28 E4 85 F1 | 	sub	objptr, ##3624
0541c     F2 00 68 FC | 	wrlong	#0, objptr
05420     07 00 00 FF 
05424     2C E4 05 F1 | 	add	objptr, ##3628
05428     F2 00 68 FC | 	wrlong	#0, objptr
0542c     04 E4 05 F1 | 	add	objptr, #4
05430     FF FF FF FF 
05434     F2 FE 6B FC | 	wrlong	##-1, objptr
05438     6A 00 00 FF 
0543c     7C E4 85 F1 | 	sub	objptr, ##54396
05440     00 12 06 F6 | 	mov	arg01, #0
05444     01 14 66 F6 | 	neg	arg02, #1
05448     24 3D B1 FD | 	call	#_pslpoke
0544c     10 12 06 F6 | 	mov	arg01, #16
05450     01 14 66 F6 | 	neg	arg02, #1
05454     18 3D B1 FD | 	call	#_pslpoke
05458     14 12 06 F6 | 	mov	arg01, #20
0545c     1E 14 CE F9 | 	bmask	arg02, #30
05460     0C 3D B1 FD | 	call	#_pslpoke
05464     79 00 00 FF 
05468     A0 E5 05 F1 | 	add	objptr, ##62368
0546c     F2 00 68 FC | 	wrlong	#0, objptr
05470     04 E4 05 F1 | 	add	objptr, #4
05474     F2 00 68 FC | 	wrlong	#0, objptr
05478     79 00 00 FF 
0547c     A4 E5 85 F1 | 	sub	objptr, ##62372
05480                 | LR__0451
05480                 | ' 
05480                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05480     28 4E 05 F1 | 	add	fp, #40
05484     A7 1E 02 FB | 	rdlong	local01, fp
05488     28 4E 85 F1 | 	sub	fp, #40
0548c     FF FF 3F FF 
05490     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05494     74 00 90 5D |  if_ne	jmp	#LR__0452
05498     24 4E 05 F1 | 	add	fp, #36
0549c     A7 22 02 FB | 	rdlong	local03, fp
054a0     24 4E 85 F1 | 	sub	fp, #36
054a4     FF FF 7F FF 
054a8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
054ac     5C 00 90 AD |  if_e	jmp	#LR__0452
054b0     24 4E 05 F1 | 	add	fp, #36
054b4     A7 12 02 FB | 	rdlong	arg01, fp
054b8     24 4E 85 F1 | 	sub	fp, #36
054bc     14 12 06 F1 | 	add	arg01, #20
054c0     1E 14 CE F9 | 	bmask	arg02, #30
054c4     A8 3C B1 FD | 	call	#_pslpoke
054c8     24 4E 05 F1 | 	add	fp, #36
054cc     A7 1E 02 FB | 	rdlong	local01, fp
054d0     6A 00 00 FF 
054d4     7C E4 05 F1 | 	add	objptr, ##54396
054d8     F2 1E 62 FC | 	wrlong	local01, objptr
054dc     6A 00 00 FF 
054e0     7C E4 85 F1 | 	sub	objptr, ##54396
054e4     A7 12 02 FB | 	rdlong	arg01, fp
054e8     24 4E 85 F1 | 	sub	fp, #36
054ec     B0 3D B1 FD | 	call	#_pslpeek
054f0     6A 00 00 FF 
054f4     78 E4 05 F1 | 	add	objptr, ##54392
054f8     F2 FA 61 FC | 	wrlong	result1, objptr
054fc     6A 00 00 FF 
05500     78 E4 85 F1 | 	sub	objptr, ##54392
05504                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
05504                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
05504                 | '   lastline=pslpeek(header(4))
05504                 | '   return 0
05504     00 FA 05 F6 | 	mov	result1, #0
05508     84 01 90 FD | 	jmp	#LR__0456
0550c                 | LR__0452
0550c                 | ' 
0550c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
0550c     28 4E 05 F1 | 	add	fp, #40
05510     A7 1E 02 FB | 	rdlong	local01, fp
05514     28 4E 85 F1 | 	sub	fp, #40
05518     FF FF 3F FF 
0551c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05520     58 00 90 AD |  if_e	jmp	#LR__0453
05524     24 4E 05 F1 | 	add	fp, #36
05528     A7 22 02 FB | 	rdlong	local03, fp
0552c     24 4E 85 F1 | 	sub	fp, #36
05530     FF FF 7F FF 
05534     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05538     40 00 90 5D |  if_ne	jmp	#LR__0453
0553c     28 4E 05 F1 | 	add	fp, #40
05540     A7 12 02 FB | 	rdlong	arg01, fp
05544     28 4E 85 F1 | 	sub	fp, #40
05548     10 12 06 F1 | 	add	arg01, #16
0554c     01 14 66 F6 | 	neg	arg02, #1
05550     1C 3C B1 FD | 	call	#_pslpoke
05554     28 4E 05 F1 | 	add	fp, #40
05558     A7 1E 02 FB | 	rdlong	local01, fp
0555c     28 4E 85 F1 | 	sub	fp, #40
05560     6A 00 00 FF 
05564     74 E4 05 F1 | 	add	objptr, ##54388
05568     F2 1E 62 FC | 	wrlong	local01, objptr
0556c     6A 00 00 FF 
05570     74 E4 85 F1 | 	sub	objptr, ##54388
05574                 | ' '   print "deleted first line"
05574                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05574                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05574                 | '   return 0
05574     00 FA 05 F6 | 	mov	result1, #0
05578     14 01 90 FD | 	jmp	#LR__0456
0557c                 | LR__0453
0557c                 | ' 
0557c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0557c     28 4E 05 F1 | 	add	fp, #40
05580     A7 1E 02 FB | 	rdlong	local01, fp
05584     28 4E 85 F1 | 	sub	fp, #40
05588     FF FF 3F FF 
0558c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05590     24 4E 05 51 |  if_ne	add	fp, #36
05594     A7 22 02 5B |  if_ne	rdlong	local03, fp
05598     24 4E 85 51 |  if_ne	sub	fp, #36
0559c     FF FF 7F 5F 
055a0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
055a4     40 00 90 AD |  if_e	jmp	#LR__0454
055a8     28 4E 05 F1 | 	add	fp, #40
055ac     A7 12 02 FB | 	rdlong	arg01, fp
055b0     10 12 06 F1 | 	add	arg01, #16
055b4     04 4E 85 F1 | 	sub	fp, #4
055b8     A7 14 02 FB | 	rdlong	arg02, fp
055bc     24 4E 85 F1 | 	sub	fp, #36
055c0     AC 3B B1 FD | 	call	#_pslpoke
055c4     24 4E 05 F1 | 	add	fp, #36
055c8     A7 12 02 FB | 	rdlong	arg01, fp
055cc     14 12 06 F1 | 	add	arg01, #20
055d0     04 4E 05 F1 | 	add	fp, #4
055d4     A7 14 02 FB | 	rdlong	arg02, fp
055d8     28 4E 85 F1 | 	sub	fp, #40
055dc     90 3B B1 FD | 	call	#_pslpoke
055e0                 | '    pslpoke(header(5)+16,header(4))  
055e0                 | '    pslpoke(header(4)+20, header(5))
055e0                 | '    return 0
055e0     00 FA 05 F6 | 	mov	result1, #0
055e4     A8 00 90 FD | 	jmp	#LR__0456
055e8                 | LR__0454
055e8     10 4E 05 F1 | 	add	fp, #16
055ec     A7 1E 02 FB | 	rdlong	local01, fp
055f0     08 4E 85 F1 | 	sub	fp, #8
055f4     A7 1E 62 FC | 	wrlong	local01, fp
055f8     6A 00 00 FF 
055fc     74 E4 05 F1 | 	add	objptr, ##54388
05600     F2 1E 02 FB | 	rdlong	local01, objptr
05604     08 4E 05 F1 | 	add	fp, #8
05608     A7 1E 62 FC | 	wrlong	local01, fp
0560c     10 4E 85 F1 | 	sub	fp, #16
05610                 | ' 
05610                 | ' 
05610                 | ' 
05610                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05610                 | ' 
05610                 | ' lineptr2=searchptr
05610                 | ' searchptr=programstart
05610                 | ' 
05610                 | ' do
05610     5E 00 00 FF 
05614     A8 E5 85 F1 | 	sub	objptr, ##48552
05618                 | LR__0455
05618     14 4E 05 F1 | 	add	fp, #20
0561c     A7 12 02 F6 | 	mov	arg01, fp
05620     04 4E 85 F1 | 	sub	fp, #4
05624     A7 14 02 FB | 	rdlong	arg02, fp
05628     10 4E 85 F1 | 	sub	fp, #16
0562c     18 16 06 F6 | 	mov	arg03, #24
05630     14 72 B1 FD | 	call	#_psram_spin2_read1
05634     10 4E 05 F1 | 	add	fp, #16
05638     A7 1E 02 FB | 	rdlong	local01, fp
0563c     08 4E 85 F1 | 	sub	fp, #8
05640     A7 1E 62 FC | 	wrlong	local01, fp
05644     20 4E 05 F1 | 	add	fp, #32
05648     A7 1E 02 FB | 	rdlong	local01, fp
0564c     18 4E 85 F1 | 	sub	fp, #24
05650     A7 1E 62 FC | 	wrlong	local01, fp
05654     04 4E 05 F1 | 	add	fp, #4
05658     A7 1E 02 FB | 	rdlong	local01, fp
0565c     10 4E 85 F1 | 	sub	fp, #16
05660     A7 22 02 FB | 	rdlong	local03, fp
05664     04 4E 85 F1 | 	sub	fp, #4
05668     11 1F 12 F2 | 	cmp	local01, local03 wc
0566c     28 4E 05 C1 |  if_b	add	fp, #40
05670     A7 20 02 CB |  if_b	rdlong	local02, fp
05674     28 4E 85 C1 |  if_b	sub	fp, #40
05678     FF FF 3F CF 
0567c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05680     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0455
05684     0B 00 00 FF 
05688     CC E4 85 F1 | 	sub	objptr, ##5836
0568c     00 FA 05 F6 | 	mov	result1, #0
05690                 | LR__0456
05690     A7 F0 03 F6 | 	mov	ptra, fp
05694     B2 00 A0 FD | 	call	#popregs_
05698                 | _deleteline_ret
05698     2D 00 64 FD | 	ret
0569c                 | 
0569c                 | ' 
0569c                 | ' sub save_line
0569c                 | _save_line
0569c     03 4A 05 F6 | 	mov	COUNT_, #3
056a0     A8 00 A0 FD | 	call	#pushregs_
056a4     6A 00 00 FF 
056a8     6C E4 05 F1 | 	add	objptr, ##54380
056ac     F2 16 02 FB | 	rdlong	arg03, objptr
056b0     01 16 06 F1 | 	add	arg03, #1
056b4     05 00 00 FF 
056b8     18 E4 85 F1 | 	sub	objptr, ##2584
056bc     F2 14 02 FB | 	rdlong	arg02, objptr
056c0     0B 15 02 FD | 	qmul	arg02, arg03
056c4     0E 00 00 FF 
056c8     44 E4 85 F1 | 	sub	objptr, ##7236
056cc     F2 12 02 FB | 	rdlong	arg01, objptr
056d0     57 00 00 FF 
056d4     10 E4 85 F1 | 	sub	objptr, ##44560
056d8     09 1F 02 F6 | 	mov	local01, arg01
056dc     18 20 62 FD | 	getqx	local02
056e0     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
056e4                 | LR__0460
056e4     0F FB C9 FA | 	rdbyte	result1, local01 wz
056e8     01 1E 06 51 |  if_ne	add	local01, #1
056ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
056f0                 | LR__0461
056f0     09 1F 82 F1 | 	sub	local01, arg01
056f4     03 1E CE F7 | 	test	local01, #3 wz
056f8     02 1E 46 50 |  if_ne	shr	local01, #2
056fc     01 1E 06 51 |  if_ne	add	local01, #1
05700     02 1E 66 50 |  if_ne	shl	local01, #2
05704     10 23 02 F6 | 	mov	local03, local02
05708     0F 23 02 F1 | 	add	local03, local01
0570c     63 00 00 FF 
05710     4C E4 05 F1 | 	add	objptr, ##50764
05714     F2 16 02 FB | 	rdlong	arg03, objptr
05718     10 17 02 F1 | 	add	arg03, local02
0571c     04 00 00 FF 
05720     28 E4 05 F1 | 	add	objptr, ##2088
05724     F2 16 62 FC | 	wrlong	arg03, objptr
05728     04 E4 05 F1 | 	add	objptr, #4
0572c     F2 1E 62 FC | 	wrlong	local01, objptr
05730     0C E4 85 F1 | 	sub	objptr, #12
05734     F2 12 02 F6 | 	mov	arg01, objptr
05738     04 00 00 FF 
0573c     20 E4 85 F1 | 	sub	objptr, ##2080
05740     F2 14 02 FB | 	rdlong	arg02, objptr
05744     10 17 02 F6 | 	mov	arg03, local02
05748     57 00 00 FF 
0574c     80 E5 85 F1 | 	sub	objptr, ##44928
05750     90 71 B1 FD | 	call	#_psram_spin2_write
05754     4B 00 00 FF 
05758     44 E5 05 F1 | 	add	objptr, ##38724
0575c     F2 12 02 FB | 	rdlong	arg01, objptr
05760     0C 00 00 FF 
05764     3C E4 05 F1 | 	add	objptr, ##6204
05768     F2 14 02 FB | 	rdlong	arg02, objptr
0576c     10 15 02 F1 | 	add	arg02, local02
05770     0F 17 02 F6 | 	mov	arg03, local01
05774     57 00 00 FF 
05778     80 E5 85 F1 | 	sub	objptr, ##44928
0577c     64 71 B1 FD | 	call	#_psram_spin2_write
05780     57 00 00 FF 
05784     80 E5 05 F1 | 	add	objptr, ##44928
05788     F2 1E 02 FB | 	rdlong	local01, objptr
0578c     11 1F 02 F1 | 	add	local01, local03
05790     F2 1E 62 FC | 	wrlong	local01, objptr
05794     63 00 00 FF 
05798     4C E4 85 F1 | 	sub	objptr, ##50764
0579c     A7 F0 03 F6 | 	mov	ptra, fp
057a0     B2 00 A0 FD | 	call	#popregs_
057a4                 | _save_line_ret
057a4     2D 00 64 FD | 	ret
057a8                 | 
057a8                 | ' 
057a8                 | ' 
057a8                 | ' function insertline(aline as ulong) as integer
057a8                 | _insertline
057a8     02 4A 05 F6 | 	mov	COUNT_, #2
057ac     A8 00 A0 FD | 	call	#pushregs_
057b0     28 F0 07 F1 | 	add	ptra, #40
057b4     04 4E 05 F1 | 	add	fp, #4
057b8     A7 12 62 FC | 	wrlong	arg01, fp
057bc     6A 00 00 FF 
057c0     74 E4 05 F1 | 	add	objptr, ##54388
057c4     F2 1E 02 FB | 	rdlong	local01, objptr
057c8     04 4E 05 F1 | 	add	fp, #4
057cc     A7 1E 62 FC | 	wrlong	local01, fp
057d0     08 4E 85 F1 | 	sub	fp, #8
057d4                 | ' 
057d4                 | ' do
057d4     5E 00 00 FF 
057d8     A8 E5 85 F1 | 	sub	objptr, ##48552
057dc                 | LR__0470
057dc     10 4E 05 F1 | 	add	fp, #16
057e0     A7 12 02 F6 | 	mov	arg01, fp
057e4     08 4E 85 F1 | 	sub	fp, #8
057e8     A7 14 02 FB | 	rdlong	arg02, fp
057ec     08 4E 85 F1 | 	sub	fp, #8
057f0     18 16 06 F6 | 	mov	arg03, #24
057f4     50 70 B1 FD | 	call	#_psram_spin2_read1
057f8     08 4E 05 F1 | 	add	fp, #8
057fc     A7 1E 02 FB | 	rdlong	local01, fp
05800     04 4E 05 F1 | 	add	fp, #4
05804     A7 1E 62 FC | 	wrlong	local01, fp
05808     18 4E 05 F1 | 	add	fp, #24
0580c     A7 1E 02 FB | 	rdlong	local01, fp
05810     1C 4E 85 F1 | 	sub	fp, #28
05814     A7 1E 62 FC | 	wrlong	local01, fp
05818     08 4E 05 F1 | 	add	fp, #8
0581c     A7 1E 02 FB | 	rdlong	local01, fp
05820     0C 4E 85 F1 | 	sub	fp, #12
05824     A7 16 02 FB | 	rdlong	arg03, fp
05828     04 4E 85 F1 | 	sub	fp, #4
0582c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05830     24 4E 05 C1 |  if_b	add	fp, #36
05834     A7 20 02 CB |  if_b	rdlong	local02, fp
05838     24 4E 85 C1 |  if_b	sub	fp, #36
0583c     FF FF 3F CF 
05840     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05844     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0470
05848     0B 00 00 FF 
0584c     CC E4 85 F1 | 	sub	objptr, ##5836
05850                 | ' 
05850                 | ' if header(0)=aline then return -1 ' delete it first
05850     10 4E 05 F1 | 	add	fp, #16
05854     A7 1E 02 FB | 	rdlong	local01, fp
05858     0C 4E 85 F1 | 	sub	fp, #12
0585c     A7 20 02 FB | 	rdlong	local02, fp
05860     04 4E 85 F1 | 	sub	fp, #4
05864     10 1F 0A F2 | 	cmp	local01, local02 wz
05868     01 FA 65 A6 |  if_e	neg	result1, #1
0586c     48 01 90 AD |  if_e	jmp	#LR__0473
05870                 | ' if header(0)<aline then return -2 ' end of program reached
05870     10 4E 05 F1 | 	add	fp, #16
05874     A7 1E 02 FB | 	rdlong	local01, fp
05878     0C 4E 85 F1 | 	sub	fp, #12
0587c     A7 16 02 FB | 	rdlong	arg03, fp
05880     04 4E 85 F1 | 	sub	fp, #4
05884     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05888     02 FA 65 C6 |  if_b	neg	result1, #2
0588c     28 01 90 CD |  if_b	jmp	#LR__0473
05890                 | ' 
05890                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05890     20 4E 05 F1 | 	add	fp, #32
05894     A7 1E 02 FB | 	rdlong	local01, fp
05898     20 4E 85 F1 | 	sub	fp, #32
0589c     FF FF 7F FF 
058a0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
058a4     78 00 90 5D |  if_ne	jmp	#LR__0471
058a8     63 00 00 FF 
058ac     4C E4 05 F1 | 	add	objptr, ##50764
058b0     F2 1E 02 FB | 	rdlong	local01, objptr
058b4     07 00 00 FF 
058b8     28 E4 05 F1 | 	add	objptr, ##3624
058bc     F2 1E 62 FC | 	wrlong	local01, objptr
058c0     0C 4E 05 F1 | 	add	fp, #12
058c4     A7 12 02 FB | 	rdlong	arg01, fp
058c8     0C 4E 85 F1 | 	sub	fp, #12
058cc     10 12 06 F1 | 	add	arg01, #16
058d0     07 00 00 FF 
058d4     28 E4 85 F1 | 	sub	objptr, ##3624
058d8     F2 14 02 FB | 	rdlong	arg02, objptr
058dc     63 00 00 FF 
058e0     4C E4 85 F1 | 	sub	objptr, ##50764
058e4     88 38 B1 FD | 	call	#_pslpoke
058e8     67 00 00 FF 
058ec     7C E4 05 F1 | 	add	objptr, ##52860
058f0     FF FF FF FF 
058f4     F2 FE 6B FC | 	wrlong	##-1, objptr
058f8     0C 4E 05 F1 | 	add	fp, #12
058fc     A7 1E 02 FB | 	rdlong	local01, fp
05900     0C 4E 85 F1 | 	sub	fp, #12
05904     04 E4 05 F1 | 	add	objptr, #4
05908     F2 1E 62 FC | 	wrlong	local01, objptr
0590c     67 00 00 FF 
05910     80 E4 85 F1 | 	sub	objptr, ##52864
05914     84 FD BF FD | 	call	#_save_line
05918                 | '   programstart=programptr
05918                 | '   pslpoke(lineptr2+16,programptr)
05918                 | '   ucompiledline(4)=$FFFF_FFFF
05918                 | '   ucompiledline(5)=lineptr2
05918                 | '   save_line
05918                 | '   return 0
05918     00 FA 05 F6 | 	mov	result1, #0
0591c     98 00 90 FD | 	jmp	#LR__0473
05920                 | LR__0471
05920                 | ' 
05920                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05920     20 4E 05 F1 | 	add	fp, #32
05924     A7 1E 02 FB | 	rdlong	local01, fp
05928     20 4E 85 F1 | 	sub	fp, #32
0592c     FF FF 7F FF 
05930     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05934     7C 00 90 AD |  if_e	jmp	#LR__0472
05938     20 4E 05 F1 | 	add	fp, #32
0593c     A7 1E 02 FB | 	rdlong	local01, fp
05940     67 00 00 FF 
05944     7C E4 05 F1 | 	add	objptr, ##52860
05948     F2 1E 62 FC | 	wrlong	local01, objptr
0594c     14 4E 85 F1 | 	sub	fp, #20
05950     A7 1E 02 FB | 	rdlong	local01, fp
05954     04 E4 05 F1 | 	add	objptr, #4
05958     F2 1E 62 FC | 	wrlong	local01, objptr
0595c     A7 12 02 FB | 	rdlong	arg01, fp
05960     0C 4E 85 F1 | 	sub	fp, #12
05964     10 12 06 F1 | 	add	arg01, #16
05968     04 00 00 FF 
0596c     34 E4 85 F1 | 	sub	objptr, ##2100
05970     F2 14 02 FB | 	rdlong	arg02, objptr
05974     63 00 00 FF 
05978     4C E4 85 F1 | 	sub	objptr, ##50764
0597c     F0 37 B1 FD | 	call	#_pslpoke
05980     20 4E 05 F1 | 	add	fp, #32
05984     A7 12 02 FB | 	rdlong	arg01, fp
05988     20 4E 85 F1 | 	sub	fp, #32
0598c     14 12 06 F1 | 	add	arg01, #20
05990     63 00 00 FF 
05994     4C E4 05 F1 | 	add	objptr, ##50764
05998     F2 14 02 FB | 	rdlong	arg02, objptr
0599c     63 00 00 FF 
059a0     4C E4 85 F1 | 	sub	objptr, ##50764
059a4     C8 37 B1 FD | 	call	#_pslpoke
059a8     F0 FC BF FD | 	call	#_save_line
059ac                 | '   ucompiledline(4)=header(4)
059ac                 | '   ucompiledline(5)=lineptr2
059ac                 | '   pslpoke(lineptr2+16,programptr)
059ac                 | '   pslpoke(header(4)+20,programptr)
059ac                 | '   save_line
059ac                 | '   return 0
059ac     00 FA 05 F6 | 	mov	result1, #0
059b0     04 00 90 FD | 	jmp	#LR__0473
059b4                 | LR__0472
059b4     00 FA 05 F6 | 	mov	result1, #0
059b8                 | LR__0473
059b8     A7 F0 03 F6 | 	mov	ptra, fp
059bc     B2 00 A0 FD | 	call	#popregs_
059c0                 | _insertline_ret
059c0     2D 00 64 FD | 	ret
059c4                 | 
059c4                 | ' 
059c4                 | ' sub add_line_at_end(aline) 
059c4                 | _add_line_at_end
059c4     6A 00 00 FF 
059c8     78 E4 05 F1 | 	add	objptr, ##54392
059cc     F2 12 62 FC | 	wrlong	arg01, objptr
059d0     04 E4 05 F1 | 	add	objptr, #4
059d4     F2 14 02 FB | 	rdlong	arg02, objptr
059d8     03 00 00 FF 
059dc     00 E4 85 F1 | 	sub	objptr, ##1536
059e0     F2 14 62 FC | 	wrlong	arg02, objptr
059e4     03 00 00 FF 
059e8     00 E4 05 F1 | 	add	objptr, ##1536
059ec     F2 12 02 FB | 	rdlong	arg01, objptr
059f0     14 12 06 F1 | 	add	arg01, #20
059f4     07 00 00 FF 
059f8     30 E4 85 F1 | 	sub	objptr, ##3632
059fc     F2 14 02 FB | 	rdlong	arg02, objptr
05a00     63 00 00 FF 
05a04     4C E4 85 F1 | 	sub	objptr, ##50764
05a08     64 37 B1 FD | 	call	#_pslpoke
05a0c     63 00 00 FF 
05a10     4C E4 05 F1 | 	add	objptr, ##50764
05a14     F2 14 02 FB | 	rdlong	arg02, objptr
05a18     07 00 00 FF 
05a1c     30 E4 05 F1 | 	add	objptr, ##3632
05a20     F2 14 62 FC | 	wrlong	arg02, objptr
05a24     02 00 00 FF 
05a28     FC E5 85 F1 | 	sub	objptr, ##1532
05a2c     FF FF BF FF 
05a30     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05a34                 | ' 
05a34                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05a34                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05a34     04 00 00 FF 
05a38     34 E4 85 F1 | 	sub	objptr, ##2100
05a3c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05a40     63 00 00 FF 
05a44     4C E4 85 F1 | 	sub	objptr, ##50764
05a48     67 00 00 AF 
05a4c     7C E4 05 A1 |  if_e	add	objptr, ##52860
05a50     FF FF FF AF 
05a54     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05a58     67 00 00 AF 
05a5c     7C E4 85 A1 |  if_e	sub	objptr, ##52860
05a60     38 FC BF FD | 	call	#_save_line
05a64     63 00 00 FF 
05a68     4C E4 05 F1 | 	add	objptr, ##50764
05a6c     F2 12 02 FB | 	rdlong	arg01, objptr
05a70     63 00 00 FF 
05a74     4C E4 85 F1 | 	sub	objptr, ##50764
05a78     01 14 66 F6 | 	neg	arg02, #1
05a7c     F0 36 B1 FD | 	call	#_pslpoke
05a80                 | _add_line_at_end_ret
05a80     2D 00 64 FD | 	ret
05a84                 | 
05a84                 | ' 
05a84                 | ' function compile_immediate(linetype as ulong) as integer
05a84                 | _compile_immediate
05a84     09 4A 05 F6 | 	mov	COUNT_, #9
05a88     A8 00 A0 FD | 	call	#pushregs_
05a8c                 | _compile_immediate_enter
05a8c     09 25 0A F6 | 	mov	local04, arg01 wz
05a90     00 26 06 F6 | 	mov	local05, #0
05a94     00 28 06 F6 | 	mov	local06, #0
05a98                 | ' 
05a98                 | ' ' linetype=cont+1, linetype=0 immediate
05a98                 | ' '  : 1: this is the first part of the line that will continue
05a98                 | ' ' 2 - this is the continuation of the line
05a98                 | ' ' 3 - this is the last continued line
05a98                 | ' ' 4 - this is the one and only part
05a98                 | ' 
05a98                 | ' err=0
05a98                 | ' cmd=0
05a98                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05a98     30 00 90 5D |  if_ne	jmp	#LR__0480
05a9c     55 00 00 FF 
05aa0     00 E4 05 F1 | 	add	objptr, ##43520
05aa4     F2 28 02 FB | 	rdlong	local06, objptr
05aa8     02 00 00 FF 
05aac     34 E4 05 F1 | 	add	objptr, ##1076
05ab0     F2 02 68 FC | 	wrlong	#1, objptr
05ab4     00 2A 06 F6 | 	mov	local07, #0
05ab8     13 00 00 FF 
05abc     38 E4 05 F1 | 	add	objptr, ##9784
05ac0     F2 00 68 FC | 	wrlong	#0, objptr
05ac4     6A 00 00 FF 
05ac8     6C E4 85 F1 | 	sub	objptr, ##54380
05acc                 | LR__0480
05acc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05acc     02 24 0E F2 | 	cmp	local04, #2 wz
05ad0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ad4     24 00 90 5D |  if_ne	jmp	#LR__0481
05ad8     55 00 00 FF 
05adc     00 E4 05 F1 | 	add	objptr, ##43520
05ae0     F2 28 02 FB | 	rdlong	local06, objptr
05ae4     01 2A 06 F6 | 	mov	local07, #1
05ae8     02 00 00 FF 
05aec     34 E4 05 F1 | 	add	objptr, ##1076
05af0     F2 02 68 FC | 	wrlong	#1, objptr
05af4     57 00 00 FF 
05af8     34 E4 85 F1 | 	sub	objptr, ##44596
05afc                 | LR__0481
05afc                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05afc     04 24 0E F2 | 	cmp	local04, #4 wz
05b00     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05b04     30 00 90 5D |  if_ne	jmp	#LR__0482
05b08     55 00 00 FF 
05b0c     08 E4 05 F1 | 	add	objptr, ##43528
05b10     F2 28 02 FB | 	rdlong	local06, objptr
05b14     02 2A 06 F6 | 	mov	local07, #2
05b18     02 00 00 FF 
05b1c     2C E4 05 F1 | 	add	objptr, ##1068
05b20     F2 04 68 FC | 	wrlong	#2, objptr
05b24     13 00 00 FF 
05b28     38 E4 05 F1 | 	add	objptr, ##9784
05b2c     F2 04 68 FC | 	wrlong	#2, objptr
05b30     6A 00 00 FF 
05b34     6C E4 85 F1 | 	sub	objptr, ##54380
05b38                 | LR__0482
05b38                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05b38     05 24 0E F2 | 	cmp	local04, #5 wz
05b3c     44 00 90 5D |  if_ne	jmp	#LR__0483
05b40     57 00 00 FF 
05b44     34 E4 05 F1 | 	add	objptr, ##44596
05b48     F2 FA 01 FB | 	rdlong	result1, objptr
05b4c     FD 2A 02 F6 | 	mov	local07, result1
05b50     03 2A 66 F0 | 	shl	local07, #3
05b54     02 00 00 FF 
05b58     38 E4 85 F1 | 	sub	objptr, ##1080
05b5c     F2 2A 02 F1 | 	add	local07, objptr
05b60     04 2A 06 F1 | 	add	local07, #4
05b64     15 29 02 FB | 	rdlong	local06, local07
05b68     FD 2A 02 F6 | 	mov	local07, result1
05b6c     01 2A 06 F1 | 	add	local07, #1
05b70     02 00 00 FF 
05b74     38 E4 05 F1 | 	add	objptr, ##1080
05b78     F2 2A 62 FC | 	wrlong	local07, objptr
05b7c     57 00 00 FF 
05b80     34 E4 85 F1 | 	sub	objptr, ##44596
05b84                 | LR__0483
05b84     00 2C 06 F6 | 	mov	local08, #0
05b88                 | ' vars=0
05b88                 | ' 'print  "In compile_immediate cmd=:", cmd
05b88                 | ' 451 select case cmd
05b88     5C 28 0E F2 | 	cmp	local06, #92 wz
05b8c     08 02 90 AD |  if_e	jmp	#LR__0484
05b90     47 28 0E F2 | 	cmp	local06, #71 wz
05b94     0C 02 90 AD |  if_e	jmp	#LR__0485
05b98     59 28 0E F2 | 	cmp	local06, #89 wz
05b9c     10 02 90 AD |  if_e	jmp	#LR__0486
05ba0     45 28 0E F2 | 	cmp	local06, #69 wz
05ba4     14 02 90 AD |  if_e	jmp	#LR__0487
05ba8     69 28 0E F2 | 	cmp	local06, #105 wz
05bac     18 02 90 AD |  if_e	jmp	#LR__0488
05bb0     40 28 0E F2 | 	cmp	local06, #64 wz
05bb4     90 04 90 AD |  if_e	jmp	#LR__0544
05bb8     49 28 0E F2 | 	cmp	local06, #73 wz
05bbc     14 02 90 AD |  if_e	jmp	#LR__0489
05bc0     50 28 0E F2 | 	cmp	local06, #80 wz
05bc4     18 02 90 AD |  if_e	jmp	#LR__0490
05bc8     68 28 0E F2 | 	cmp	local06, #104 wz
05bcc     1C 02 90 AD |  if_e	jmp	#LR__0491
05bd0     74 28 0E F2 | 	cmp	local06, #116 wz
05bd4     20 02 90 AD |  if_e	jmp	#LR__0492
05bd8     73 28 0E F2 | 	cmp	local06, #115 wz
05bdc     24 02 90 AD |  if_e	jmp	#LR__0493
05be0     6C 28 0E F2 | 	cmp	local06, #108 wz
05be4     28 02 90 AD |  if_e	jmp	#LR__0494
05be8     89 28 0E F2 | 	cmp	local06, #137 wz
05bec     58 04 90 AD |  if_e	jmp	#LR__0544
05bf0     72 28 0E F2 | 	cmp	local06, #114 wz
05bf4     24 02 90 AD |  if_e	jmp	#LR__0495
05bf8     5D 28 0E F2 | 	cmp	local06, #93 wz
05bfc     48 04 90 AD |  if_e	jmp	#LR__0544
05c00     96 28 0E F2 | 	cmp	local06, #150 wz
05c04     1C 02 90 AD |  if_e	jmp	#LR__0496
05c08     43 28 0E F2 | 	cmp	local06, #67 wz
05c0c     1C 02 90 AD |  if_e	jmp	#LR__0497
05c10     5A 28 0E F2 | 	cmp	local06, #90 wz
05c14     20 02 90 AD |  if_e	jmp	#LR__0498
05c18     4E 28 0E F2 | 	cmp	local06, #78 wz
05c1c     20 02 90 AD |  if_e	jmp	#LR__0499
05c20     46 28 0E F2 | 	cmp	local06, #70 wz
05c24     34 02 90 AD |  if_e	jmp	#LR__0501
05c28     71 28 0E F2 | 	cmp	local06, #113 wz
05c2c     38 02 90 AD |  if_e	jmp	#LR__0502
05c30     60 28 0E F2 | 	cmp	local06, #96 wz
05c34     3C 02 90 AD |  if_e	jmp	#LR__0503
05c38     4A 28 0E F2 | 	cmp	local06, #74 wz
05c3c     40 02 90 AD |  if_e	jmp	#LR__0504
05c40     48 28 0E F2 | 	cmp	local06, #72 wz
05c44     40 02 90 AD |  if_e	jmp	#LR__0505
05c48     58 28 0E F2 | 	cmp	local06, #88 wz
05c4c     44 02 90 AD |  if_e	jmp	#LR__0506
05c50     5F 28 0E F2 | 	cmp	local06, #95 wz
05c54     44 02 90 AD |  if_e	jmp	#LR__0507
05c58     8A 28 0E F2 | 	cmp	local06, #138 wz
05c5c     48 02 90 AD |  if_e	jmp	#LR__0508
05c60     4C 28 0E F2 | 	cmp	local06, #76 wz
05c64     4C 02 90 AD |  if_e	jmp	#LR__0509
05c68     52 28 0E F2 | 	cmp	local06, #82 wz
05c6c     50 02 90 AD |  if_e	jmp	#LR__0510
05c70     97 28 0E F2 | 	cmp	local06, #151 wz
05c74     54 02 90 AD |  if_e	jmp	#LR__0511
05c78     61 28 0E F2 | 	cmp	local06, #97 wz
05c7c     58 02 90 AD |  if_e	jmp	#LR__0512
05c80     63 28 0E F2 | 	cmp	local06, #99 wz
05c84     5C 02 90 AD |  if_e	jmp	#LR__0513
05c88     41 28 0E F2 | 	cmp	local06, #65 wz
05c8c     B8 03 90 AD |  if_e	jmp	#LR__0544
05c90     4B 28 0E F2 | 	cmp	local06, #75 wz
05c94     58 02 90 AD |  if_e	jmp	#LR__0514
05c98     5E 28 0E F2 | 	cmp	local06, #94 wz
05c9c     58 02 90 AD |  if_e	jmp	#LR__0515
05ca0     7C 28 0E F2 | 	cmp	local06, #124 wz
05ca4     5C 02 90 AD |  if_e	jmp	#LR__0516
05ca8     7D 28 0E F2 | 	cmp	local06, #125 wz
05cac     60 02 90 AD |  if_e	jmp	#LR__0517
05cb0     7E 28 0E F2 | 	cmp	local06, #126 wz
05cb4     64 02 90 AD |  if_e	jmp	#LR__0518
05cb8     7F 28 0E F2 | 	cmp	local06, #127 wz
05cbc     68 02 90 AD |  if_e	jmp	#LR__0519
05cc0     80 28 0E F2 | 	cmp	local06, #128 wz
05cc4     6C 02 90 AD |  if_e	jmp	#LR__0520
05cc8     55 28 0E F2 | 	cmp	local06, #85 wz
05ccc     70 02 90 AD |  if_e	jmp	#LR__0521
05cd0     75 28 0E F2 | 	cmp	local06, #117 wz
05cd4     74 02 90 AD |  if_e	jmp	#LR__0522
05cd8     42 28 0E F2 | 	cmp	local06, #66 wz
05cdc     78 02 90 AD |  if_e	jmp	#LR__0523
05ce0     95 28 0E F2 | 	cmp	local06, #149 wz
05ce4     7C 02 90 AD |  if_e	jmp	#LR__0524
05ce8     81 28 0E F2 | 	cmp	local06, #129 wz
05cec     80 02 90 AD |  if_e	jmp	#LR__0525
05cf0     44 28 0E F2 | 	cmp	local06, #68 wz
05cf4     84 02 90 AD |  if_e	jmp	#LR__0526
05cf8     88 28 0E F2 | 	cmp	local06, #136 wz
05cfc     48 03 90 AD |  if_e	jmp	#LR__0544
05d00     92 28 0E F2 | 	cmp	local06, #146 wz
05d04     80 02 90 AD |  if_e	jmp	#LR__0527
05d08     4D 28 0E F2 | 	cmp	local06, #77 wz
05d0c     80 02 90 AD |  if_e	jmp	#LR__0528
05d10     51 28 0E F2 | 	cmp	local06, #81 wz
05d14     84 02 90 AD |  if_e	jmp	#LR__0529
05d18     8E 28 0E F2 | 	cmp	local06, #142 wz
05d1c     88 02 90 AD |  if_e	jmp	#LR__0530
05d20     90 28 0E F2 | 	cmp	local06, #144 wz
05d24     8C 02 90 AD |  if_e	jmp	#LR__0531
05d28     8D 28 0E F2 | 	cmp	local06, #141 wz
05d2c     90 02 90 AD |  if_e	jmp	#LR__0532
05d30     8C 28 0E F2 | 	cmp	local06, #140 wz
05d34     94 02 90 AD |  if_e	jmp	#LR__0533
05d38     91 28 0E F2 | 	cmp	local06, #145 wz
05d3c     98 02 90 AD |  if_e	jmp	#LR__0534
05d40     8B 28 0E F2 | 	cmp	local06, #139 wz
05d44     9C 02 90 AD |  if_e	jmp	#LR__0535
05d48     8F 28 0E F2 | 	cmp	local06, #143 wz
05d4c     A0 02 90 AD |  if_e	jmp	#LR__0536
05d50     6D 28 0E F2 | 	cmp	local06, #109 wz
05d54     A4 02 90 AD |  if_e	jmp	#LR__0537
05d58     70 28 0E F2 | 	cmp	local06, #112 wz
05d5c     E8 02 90 AD |  if_e	jmp	#LR__0544
05d60     56 28 0E F2 | 	cmp	local06, #86 wz
05d64     A0 02 90 AD |  if_e	jmp	#LR__0538
05d68     57 28 0E F2 | 	cmp	local06, #87 wz
05d6c     D8 02 90 AD |  if_e	jmp	#LR__0544
05d70     79 28 0E F2 | 	cmp	local06, #121 wz
05d74     9C 02 90 AD |  if_e	jmp	#LR__0539
05d78     77 28 0E F2 | 	cmp	local06, #119 wz
05d7c     A0 02 90 AD |  if_e	jmp	#LR__0540
05d80     78 28 0E F2 | 	cmp	local06, #120 wz
05d84     A4 02 90 AD |  if_e	jmp	#LR__0541
05d88     01 00 00 FF 
05d8c     04 28 0E F2 | 	cmp	local06, ##516 wz
05d90     A4 02 90 AD |  if_e	jmp	#LR__0542
05d94     A8 02 90 FD | 	jmp	#LR__0543
05d98                 | LR__0484
05d98     AC 0C B0 FD | 	call	#_compile_fun_2p
05d9c     FD 26 02 F6 | 	mov	local05, result1
05da0     A4 02 90 FD | 	jmp	#LR__0544
05da4                 | LR__0485
05da4     E0 0D B0 FD | 	call	#_compile_fun_4p
05da8     FD 26 02 F6 | 	mov	local05, result1
05dac     98 02 90 FD | 	jmp	#LR__0544
05db0                 | LR__0486
05db0     70 2F B0 FD | 	call	#_expr
05db4                 | ' expr()
05db4                 | ' return 0
05db4     00 26 06 F6 | 	mov	local05, #0
05db8     8C 02 90 FD | 	jmp	#LR__0544
05dbc                 | LR__0487
05dbc     FC 0C B0 FD | 	call	#_compile_fun_3p
05dc0     FD 26 02 F6 | 	mov	local05, result1
05dc4     80 02 90 FD | 	jmp	#LR__0544
05dc8                 | LR__0488
05dc8     58 2F B0 FD | 	call	#_expr
05dcc                 | ' expr()
05dcc                 | ' return 0
05dcc     00 26 06 F6 | 	mov	local05, #0
05dd0     74 02 90 FD | 	jmp	#LR__0544
05dd4                 | LR__0489
05dd4     4C 2F B0 FD | 	call	#_expr
05dd8                 | ' expr()
05dd8                 | ' return 0
05dd8     00 26 06 F6 | 	mov	local05, #0
05ddc     68 02 90 FD | 	jmp	#LR__0544
05de0                 | LR__0490
05de0     44 10 B0 FD | 	call	#_compile_fun_varp
05de4     FD 2C 02 F6 | 	mov	local08, result1
05de8     5C 02 90 FD | 	jmp	#LR__0544
05dec                 | LR__0491
05dec     34 2F B0 FD | 	call	#_expr
05df0                 | ' expr()
05df0                 | ' return 0
05df0     00 26 06 F6 | 	mov	local05, #0
05df4     50 02 90 FD | 	jmp	#LR__0544
05df8                 | LR__0492
05df8     2C 10 B0 FD | 	call	#_compile_fun_varp
05dfc     FD 2C 02 F6 | 	mov	local08, result1
05e00     44 02 90 FD | 	jmp	#LR__0544
05e04                 | LR__0493
05e04     20 10 B0 FD | 	call	#_compile_fun_varp
05e08     FD 2C 02 F6 | 	mov	local08, result1
05e0c     38 02 90 FD | 	jmp	#LR__0544
05e10                 | LR__0494
05e10     98 0E B0 FD | 	call	#_compile_fun_5p
05e14     FD 26 02 F6 | 	mov	local05, result1
05e18     2C 02 90 FD | 	jmp	#LR__0544
05e1c                 | LR__0495
05e1c     F4 19 B0 FD | 	call	#_compile_dim
05e20     E0 02 90 FD | 	jmp	#LR__0545
05e24                 | LR__0496
05e24     20 0C B0 FD | 	call	#_compile_fun_2p
05e28     1C 02 90 FD | 	jmp	#LR__0544
05e2c                 | LR__0497
05e2c     18 0C B0 FD | 	call	#_compile_fun_2p
05e30     FD 26 02 F6 | 	mov	local05, result1
05e34     10 02 90 FD | 	jmp	#LR__0544
05e38                 | LR__0498
05e38     B0 18 B0 FD | 	call	#_compile_else
05e3c     C4 02 90 FD | 	jmp	#LR__0545
05e40                 | LR__0499
05e40     01 24 16 F2 | 	cmp	local04, #1 wc
05e44     08 00 90 CD |  if_b	jmp	#LR__0500
05e48     78 2B B0 FD | 	call	#_compile_goto
05e4c     B4 02 90 FD | 	jmp	#LR__0545
05e50                 | LR__0500
05e50     19 12 06 F6 | 	mov	arg01, #25
05e54     B4 31 B1 FD | 	call	#_printerror
05e58     A8 02 90 FD | 	jmp	#LR__0545
05e5c                 | LR__0501
05e5c     5C 0C B0 FD | 	call	#_compile_fun_3p
05e60     FD 26 02 F6 | 	mov	local05, result1
05e64     E0 01 90 FD | 	jmp	#LR__0544
05e68                 | LR__0502
05e68     1C 0D B0 FD | 	call	#_compile_fun_4p
05e6c     FD 26 02 F6 | 	mov	local05, result1
05e70     D4 01 90 FD | 	jmp	#LR__0544
05e74                 | LR__0503
05e74     AC 2E B0 FD | 	call	#_expr
05e78                 | ' expr()
05e78                 | ' return 0
05e78     00 26 06 F6 | 	mov	local05, #0
05e7c     C8 01 90 FD | 	jmp	#LR__0544
05e80                 | LR__0504
05e80     A0 20 B0 FD | 	call	#_compile_for
05e84     7C 02 90 FD | 	jmp	#LR__0545
05e88                 | LR__0505
05e88     FC 0C B0 FD | 	call	#_compile_fun_4p
05e8c     FD 26 02 F6 | 	mov	local05, result1
05e90     B4 01 90 FD | 	jmp	#LR__0544
05e94                 | LR__0506
05e94     14 17 B0 FD | 	call	#_compile_if
05e98     68 02 90 FD | 	jmp	#LR__0545
05e9c                 | LR__0507
05e9c     84 2E B0 FD | 	call	#_expr
05ea0                 | ' expr()
05ea0                 | ' return 0
05ea0     00 26 06 F6 | 	mov	local05, #0
05ea4     A0 01 90 FD | 	jmp	#LR__0544
05ea8                 | LR__0508
05ea8     78 2E B0 FD | 	call	#_expr
05eac                 | ' expr()
05eac                 | ' return 0
05eac     00 26 06 F6 | 	mov	local05, #0
05eb0     94 01 90 FD | 	jmp	#LR__0544
05eb4                 | LR__0509
05eb4     70 0F B0 FD | 	call	#_compile_fun_varp
05eb8     FD 2C 02 F6 | 	mov	local08, result1
05ebc     88 01 90 FD | 	jmp	#LR__0544
05ec0                 | LR__0510
05ec0     64 0F B0 FD | 	call	#_compile_fun_varp
05ec4     FD 2C 02 F6 | 	mov	local08, result1
05ec8     7C 01 90 FD | 	jmp	#LR__0544
05ecc                 | LR__0511
05ecc     78 0B B0 FD | 	call	#_compile_fun_2p
05ed0     FD 26 02 F6 | 	mov	local05, result1
05ed4     70 01 90 FD | 	jmp	#LR__0544
05ed8                 | LR__0512
05ed8     48 2E B0 FD | 	call	#_expr
05edc                 | ' expr()
05edc                 | ' return 0
05edc     00 26 06 F6 | 	mov	local05, #0
05ee0     64 01 90 FD | 	jmp	#LR__0544
05ee4                 | LR__0513
05ee4     3C 2E B0 FD | 	call	#_expr
05ee8                 | ' expr()
05ee8                 | ' return 0
05ee8     00 26 06 F6 | 	mov	local05, #0
05eec     58 01 90 FD | 	jmp	#LR__0544
05ef0                 | LR__0514
05ef0     20 29 B0 FD | 	call	#_compile_next
05ef4     0C 02 90 FD | 	jmp	#LR__0545
05ef8                 | LR__0515
05ef8     28 2E B0 FD | 	call	#_expr
05efc                 | ' expr()
05efc                 | ' return 0
05efc     00 26 06 F6 | 	mov	local05, #0
05f00     44 01 90 FD | 	jmp	#LR__0544
05f04                 | LR__0516
05f04     1C 2E B0 FD | 	call	#_expr
05f08                 | ' expr()
05f08                 | ' return 0
05f08     00 26 06 F6 | 	mov	local05, #0
05f0c     38 01 90 FD | 	jmp	#LR__0544
05f10                 | LR__0517
05f10     10 2E B0 FD | 	call	#_expr
05f14                 | ' expr()
05f14                 | ' return 0
05f14     00 26 06 F6 | 	mov	local05, #0
05f18     2C 01 90 FD | 	jmp	#LR__0544
05f1c                 | LR__0518
05f1c     04 2E B0 FD | 	call	#_expr
05f20                 | ' expr()
05f20                 | ' return 0
05f20     00 26 06 F6 | 	mov	local05, #0
05f24     20 01 90 FD | 	jmp	#LR__0544
05f28                 | LR__0519
05f28     5C 0C B0 FD | 	call	#_compile_fun_4p
05f2c     FD 26 02 F6 | 	mov	local05, result1
05f30     14 01 90 FD | 	jmp	#LR__0544
05f34                 | LR__0520
05f34     EC 2D B0 FD | 	call	#_expr
05f38                 | ' expr()
05f38                 | ' return 0
05f38     00 26 06 F6 | 	mov	local05, #0
05f3c     08 01 90 FD | 	jmp	#LR__0544
05f40                 | LR__0521
05f40     04 0B B0 FD | 	call	#_compile_fun_2p
05f44     FD 26 02 F6 | 	mov	local05, result1
05f48     FC 00 90 FD | 	jmp	#LR__0544
05f4c                 | LR__0522
05f4c     D8 0E B0 FD | 	call	#_compile_fun_varp
05f50     FD 2C 02 F6 | 	mov	local08, result1
05f54     F0 00 90 FD | 	jmp	#LR__0544
05f58                 | LR__0523
05f58     EC 0A B0 FD | 	call	#_compile_fun_2p
05f5c     FD 26 02 F6 | 	mov	local05, result1
05f60     E4 00 90 FD | 	jmp	#LR__0544
05f64                 | LR__0524
05f64     E0 0A B0 FD | 	call	#_compile_fun_2p
05f68     FD 26 02 F6 | 	mov	local05, result1
05f6c     D8 00 90 FD | 	jmp	#LR__0544
05f70                 | LR__0525
05f70     D4 0A B0 FD | 	call	#_compile_fun_2p
05f74     FD 26 02 F6 | 	mov	local05, result1
05f78     CC 00 90 FD | 	jmp	#LR__0544
05f7c                 | LR__0526
05f7c     54 0F B0 FD | 	call	#_compile_print
05f80     FD 26 02 F6 | 	mov	local05, result1
05f84     7C 01 90 FD | 	jmp	#LR__0545
05f88                 | LR__0527
05f88     98 2D B0 FD | 	call	#_expr
05f8c                 | ' expr()
05f8c                 | ' return 0
05f8c     B8 00 90 FD | 	jmp	#LR__0544
05f90                 | LR__0528
05f90     94 0E B0 FD | 	call	#_compile_fun_varp
05f94     FD 2C 02 F6 | 	mov	local08, result1
05f98     AC 00 90 FD | 	jmp	#LR__0544
05f9c                 | LR__0529
05f9c     88 0E B0 FD | 	call	#_compile_fun_varp
05fa0     FD 2C 02 F6 | 	mov	local08, result1
05fa4     A0 00 90 FD | 	jmp	#LR__0544
05fa8                 | LR__0530
05fa8     9C 0A B0 FD | 	call	#_compile_fun_2p
05fac     FD 26 02 F6 | 	mov	local05, result1
05fb0     94 00 90 FD | 	jmp	#LR__0544
05fb4                 | LR__0531
05fb4     90 0A B0 FD | 	call	#_compile_fun_2p
05fb8     FD 26 02 F6 | 	mov	local05, result1
05fbc     88 00 90 FD | 	jmp	#LR__0544
05fc0                 | LR__0532
05fc0     84 0A B0 FD | 	call	#_compile_fun_2p
05fc4     FD 26 02 F6 | 	mov	local05, result1
05fc8     7C 00 90 FD | 	jmp	#LR__0544
05fcc                 | LR__0533
05fcc     78 0A B0 FD | 	call	#_compile_fun_2p
05fd0     FD 26 02 F6 | 	mov	local05, result1
05fd4     70 00 90 FD | 	jmp	#LR__0544
05fd8                 | LR__0534
05fd8     6C 0A B0 FD | 	call	#_compile_fun_2p
05fdc     FD 26 02 F6 | 	mov	local05, result1
05fe0     64 00 90 FD | 	jmp	#LR__0544
05fe4                 | LR__0535
05fe4     60 0A B0 FD | 	call	#_compile_fun_2p
05fe8     FD 26 02 F6 | 	mov	local05, result1
05fec     58 00 90 FD | 	jmp	#LR__0544
05ff0                 | LR__0536
05ff0     54 0A B0 FD | 	call	#_compile_fun_2p
05ff4     FD 26 02 F6 | 	mov	local05, result1
05ff8     4C 00 90 FD | 	jmp	#LR__0544
05ffc                 | LR__0537
05ffc     BC 0A B0 FD | 	call	#_compile_fun_3p
06000     FD 26 02 F6 | 	mov	local05, result1
06004     40 00 90 FD | 	jmp	#LR__0544
06008                 | LR__0538
06008     18 2D B0 FD | 	call	#_expr
0600c                 | ' expr()
0600c                 | ' return 0
0600c     00 26 06 F6 | 	mov	local05, #0
06010     34 00 90 FD | 	jmp	#LR__0544
06014                 | LR__0539
06014     30 0A B0 FD | 	call	#_compile_fun_2p
06018     FD 26 02 F6 | 	mov	local05, result1
0601c     28 00 90 FD | 	jmp	#LR__0544
06020                 | LR__0540
06020     24 0A B0 FD | 	call	#_compile_fun_2p
06024     FD 26 02 F6 | 	mov	local05, result1
06028     1C 00 90 FD | 	jmp	#LR__0544
0602c                 | LR__0541
0602c     18 0A B0 FD | 	call	#_compile_fun_2p
06030     FD 26 02 F6 | 	mov	local05, result1
06034     10 00 90 FD | 	jmp	#LR__0544
06038                 | LR__0542
06038     E8 01 B0 FD | 	call	#_compile_array_assign
0603c     C4 00 90 FD | 	jmp	#LR__0545
06040                 | LR__0543
06040     48 09 B0 FD | 	call	#_compile_unknown
06044     BC 00 90 FD | 	jmp	#LR__0545
06048                 | LR__0544
06048     14 23 02 F6 | 	mov	local03, local06
0604c     16 1F 02 F6 | 	mov	local01, local08
06050     0F 2B 02 F6 | 	mov	local07, local01
06054     10 2F 02 F6 | 	mov	local09, local02
06058     11 29 02 F6 | 	mov	local06, local03
0605c     6A 00 00 FF 
06060     6C E4 05 F1 | 	add	objptr, ##54380
06064     F2 1E 02 FB | 	rdlong	local01, objptr
06068     0F 2D 02 F6 | 	mov	local08, local01
0606c     01 2C 66 F0 | 	shl	local08, #1
06070     0F 2D 02 F1 | 	add	local08, local01
06074     02 2C 66 F0 | 	shl	local08, #2
06078     03 00 00 FF 
0607c     00 E4 85 F1 | 	sub	objptr, ##1536
06080     F2 2C 02 F1 | 	add	local08, objptr
06084     16 2B 62 FC | 	wrlong	local07, local08
06088     03 00 00 FF 
0608c     00 E4 05 F1 | 	add	objptr, ##1536
06090     F2 1E 02 FB | 	rdlong	local01, objptr
06094     0F 2D 02 F6 | 	mov	local08, local01
06098     01 2C 66 F0 | 	shl	local08, #1
0609c     0F 2D 02 F1 | 	add	local08, local01
060a0     02 2C 66 F0 | 	shl	local08, #2
060a4     03 00 00 FF 
060a8     00 E4 85 F1 | 	sub	objptr, ##1536
060ac     F2 2C 02 F1 | 	add	local08, objptr
060b0     04 2C 06 F1 | 	add	local08, #4
060b4     16 2F 62 FC | 	wrlong	local09, local08
060b8     03 00 00 FF 
060bc     00 E4 05 F1 | 	add	objptr, ##1536
060c0     F2 1E 02 FB | 	rdlong	local01, objptr
060c4     0F 2D 02 F6 | 	mov	local08, local01
060c8     01 2C 66 F0 | 	shl	local08, #1
060cc     0F 2D 02 F1 | 	add	local08, local01
060d0     02 2C 66 F0 | 	shl	local08, #2
060d4     03 00 00 FF 
060d8     00 E4 85 F1 | 	sub	objptr, ##1536
060dc     F2 2C 02 F1 | 	add	local08, objptr
060e0     08 2C 06 F1 | 	add	local08, #8
060e4     16 29 62 FC | 	wrlong	local06, local08
060e8     03 00 00 FF 
060ec     00 E4 05 F1 | 	add	objptr, ##1536
060f0     F2 2A 02 FB | 	rdlong	local07, objptr
060f4     01 2A 06 F1 | 	add	local07, #1
060f8     F2 2A 62 FC | 	wrlong	local07, objptr
060fc     6A 00 00 FF 
06100     6C E4 85 F1 | 	sub	objptr, ##54380
06104                 | LR__0545
06104                 | ' 
06104                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
06104                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
06104     00 24 0E F2 | 	cmp	local04, #0 wz
06108     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0610c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06110     38 00 90 5D |  if_ne	jmp	#LR__0546
06114     6A 00 00 FF 
06118     6C E4 05 F1 | 	add	objptr, ##54380
0611c     F2 2C 02 FB | 	rdlong	local08, objptr
06120     16 1F 02 F6 | 	mov	local01, local08
06124     01 1E 66 F0 | 	shl	local01, #1
06128     16 1F 02 F1 | 	add	local01, local08
0612c     02 1E 66 F0 | 	shl	local01, #2
06130     03 00 00 FF 
06134     00 E4 85 F1 | 	sub	objptr, ##1536
06138     F2 1E 02 F1 | 	add	local01, objptr
0613c     08 1E 06 F1 | 	add	local01, #8
06140     0F FD 6B FC | 	wrlong	#510, local01
06144     67 00 00 FF 
06148     6C E4 85 F1 | 	sub	objptr, ##52844
0614c                 | LR__0546
0614c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0614c     6A 00 00 FF 
06150     6C E4 05 F1 | 	add	objptr, ##54380
06154     F2 1E 02 FB | 	rdlong	local01, objptr
06158     6A 00 00 FF 
0615c     6C E4 85 F1 | 	sub	objptr, ##54380
06160     97 58 48 FB | 	callpa	#(@LR__0549-@LR__0547)>>2,fcache_load_ptr_
06164                 | LR__0547
06164     0F 2D 02 F6 | 	mov	local08, local01
06168     01 2C 66 F0 | 	shl	local08, #1
0616c     0F 2D 02 F1 | 	add	local08, local01
06170     02 2C 66 F0 | 	shl	local08, #2
06174     67 00 00 FF 
06178     6C E4 05 F1 | 	add	objptr, ##52844
0617c     F2 2C 02 F1 | 	add	local08, objptr
06180     08 2C 06 F1 | 	add	local08, #8
06184     16 2D 02 FB | 	rdlong	local08, local08
06188     9B 2C 0E F2 | 	cmp	local08, #155 wz
0618c     67 00 00 FF 
06190     6C E4 85 F1 | 	sub	objptr, ##52844
06194     70 00 90 5D |  if_ne	jmp	#LR__0548
06198     0F 2D 02 F6 | 	mov	local08, local01
0619c     01 2C 86 F1 | 	sub	local08, #1
061a0     16 2F 02 F6 | 	mov	local09, local08
061a4     01 2E 66 F0 | 	shl	local09, #1
061a8     16 2F 02 F1 | 	add	local09, local08
061ac     02 2E 66 F0 | 	shl	local09, #2
061b0     67 00 00 FF 
061b4     6C E4 05 F1 | 	add	objptr, ##52844
061b8     F2 2E 02 F1 | 	add	local09, objptr
061bc     08 2E 06 F1 | 	add	local09, #8
061c0     17 2D 02 FB | 	rdlong	local08, local09
061c4     11 2C 0E F2 | 	cmp	local08, #17 wz
061c8     67 00 00 FF 
061cc     6C E4 85 F1 | 	sub	objptr, ##52844
061d0     34 00 90 5D |  if_ne	jmp	#LR__0548
061d4     0F 2F 02 F6 | 	mov	local09, local01
061d8     01 2E 86 F1 | 	sub	local09, #1
061dc     17 2D 02 F6 | 	mov	local08, local09
061e0     01 2C 66 F0 | 	shl	local08, #1
061e4     17 2D 02 F1 | 	add	local08, local09
061e8     02 2C 66 F0 | 	shl	local08, #2
061ec     67 00 00 FF 
061f0     6C E4 05 F1 | 	add	objptr, ##52844
061f4     F2 2C 02 F1 | 	add	local08, objptr
061f8     08 2C 06 F1 | 	add	local08, #8
061fc     16 25 68 FC | 	wrlong	#18, local08
06200     67 00 00 FF 
06204     6C E4 85 F1 | 	sub	objptr, ##52844
06208                 | LR__0548
06208     01 1E 86 F1 | 	sub	local01, #1
0620c     01 1E 56 F2 | 	cmps	local01, #1 wc
06210     50 FF 9F 3D |  if_ae	jmp	#LR__0547
06214                 | LR__0549
06214                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
06214                 | ' return err
06214     13 FB 01 F6 | 	mov	result1, local05
06218     A7 F0 03 F6 | 	mov	ptra, fp
0621c     B2 00 A0 FD | 	call	#popregs_
06220                 | _compile_immediate_ret
06220     2D 00 64 FD | 	ret
06224                 | 
06224                 | ' 
06224                 | ' sub compile_array_assign
06224                 | _compile_array_assign
06224     0A 4A 05 F6 | 	mov	COUNT_, #10
06228     A8 00 A0 FD | 	call	#pushregs_
0622c     00 24 06 F6 | 	mov	local04, #0
06230     57 00 00 FF 
06234     34 E4 05 F1 | 	add	objptr, ##44596
06238     F2 26 02 FB | 	rdlong	local05, objptr
0623c     13 FB 01 F6 | 	mov	result1, local05
06240     01 FA 85 F1 | 	sub	result1, #1
06244     03 FA 65 F0 | 	shl	result1, #3
06248     02 00 00 FF 
0624c     38 E4 85 F1 | 	sub	objptr, ##1080
06250     F2 FA 01 F1 | 	add	result1, objptr
06254     FD 28 02 FB | 	rdlong	local06, result1
06258                 | ' numpar=0
06258                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06258                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06258                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06258                 | ' if lparts(ct).token=token_lpar then
06258     03 26 66 F0 | 	shl	local05, #3
0625c     F2 26 02 F1 | 	add	local05, objptr
06260     04 26 06 F1 | 	add	local05, #4
06264     13 27 02 FB | 	rdlong	local05, local05
06268     15 26 0E F2 | 	cmp	local05, #21 wz
0626c     54 00 00 FF 
06270     FC E5 85 F1 | 	sub	objptr, ##43516
06274     D4 01 90 5D |  if_ne	jmp	#LR__0554
06278     57 00 00 FF 
0627c     34 E4 05 F1 | 	add	objptr, ##44596
06280     F2 2A 02 FB | 	rdlong	local07, objptr
06284     01 2A 06 F1 | 	add	local07, #1
06288     F2 2A 62 FC | 	wrlong	local07, objptr
0628c     57 00 00 FF 
06290     34 E4 85 F1 | 	sub	objptr, ##44596
06294                 | '   ct+=1 											' omit this lpar, this is for expr list
06294                 | '   do
06294                 | LR__0550
06294     8C 2A B0 FD | 	call	#_expr
06298     57 00 00 FF 
0629c     34 E4 05 F1 | 	add	objptr, ##44596
062a0     F2 26 02 FB | 	rdlong	local05, objptr
062a4     01 26 06 F1 | 	add	local05, #1
062a8     F2 26 62 FC | 	wrlong	local05, objptr
062ac     01 24 06 F1 | 	add	local04, #1
062b0     01 26 86 F1 | 	sub	local05, #1
062b4     03 26 66 F0 | 	shl	local05, #3
062b8     02 00 00 FF 
062bc     38 E4 85 F1 | 	sub	objptr, ##1080
062c0     F2 26 02 F1 | 	add	local05, objptr
062c4     04 26 06 F1 | 	add	local05, #4
062c8     13 2B 02 FB | 	rdlong	local07, local05
062cc     14 2A 0E F2 | 	cmp	local07, #20 wz
062d0     54 00 00 FF 
062d4     FC E5 85 F1 | 	sub	objptr, ##43516
062d8     34 00 90 AD |  if_e	jmp	#LR__0551
062dc     57 00 00 FF 
062e0     34 E4 05 F1 | 	add	objptr, ##44596
062e4     F2 2A 02 FB | 	rdlong	local07, objptr
062e8     03 2A 66 F0 | 	shl	local07, #3
062ec     02 00 00 FF 
062f0     38 E4 85 F1 | 	sub	objptr, ##1080
062f4     F2 2A 02 F1 | 	add	local07, objptr
062f8     04 2A 06 F1 | 	add	local07, #4
062fc     15 2B 02 FB | 	rdlong	local07, local07
06300     FE 2B 0E F2 | 	cmp	local07, #510 wz
06304     54 00 00 FF 
06308     FC E5 85 F1 | 	sub	objptr, ##43516
0630c     84 FF 9F 5D |  if_ne	jmp	#LR__0550
06310                 | LR__0551
06310     57 00 00 FF 
06314     34 E4 05 F1 | 	add	objptr, ##44596
06318     F2 2A 02 FB | 	rdlong	local07, objptr
0631c     01 2A 06 F1 | 	add	local07, #1
06320     F2 2A 62 FC | 	wrlong	local07, objptr
06324     57 00 00 FF 
06328     34 E4 85 F1 | 	sub	objptr, ##44596
0632c     F4 29 B0 FD | 	call	#_expr
06330     01 2C 66 F6 | 	neg	local08, #1
06334     00 2E 06 F6 | 	mov	local09, #0
06338                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06338                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06338                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06338                 | ' ct+=1 : expr()
06338                 | ' ' now find the vae
06338                 | ' 
06338                 | ' j=-1 : i=0 : do : 
06338                 | LR__0552
06338                 | '   if variables(i).name=varname$ then j=i: exit loop
06338     17 27 02 F6 | 	mov	local05, local09
0633c     04 26 66 F0 | 	shl	local05, #4
06340     34 00 00 FF 
06344     F8 E5 05 F1 | 	add	objptr, ##27128
06348     F2 26 02 F1 | 	add	local05, objptr
0634c     13 13 02 FB | 	rdlong	arg01, local05
06350     14 15 02 F6 | 	mov	arg02, local06
06354     34 00 00 FF 
06358     F8 E5 85 F1 | 	sub	objptr, ##27128
0635c     14 71 B1 FD | 	call	#__system___string_cmp
06360     00 FA 0D F2 | 	cmp	result1, #0 wz
06364     17 2D 02 A6 |  if_e	mov	local08, local09
06368     20 00 90 AD |  if_e	jmp	#LR__0553
0636c     01 2E 06 F1 | 	add	local09, #1
06370     54 00 00 FF 
06374     F8 E5 05 F1 | 	add	objptr, ##43512
06378     F2 2A 02 FB | 	rdlong	local07, objptr
0637c     54 00 00 FF 
06380     F8 E5 85 F1 | 	sub	objptr, ##43512
06384     15 2F 5A F2 | 	cmps	local09, local07 wcz
06388     AC FF 9F ED |  if_be	jmp	#LR__0552
0638c                 | LR__0553
0638c     16 1F 02 F6 | 	mov	local01, local08
06390     12 21 02 F6 | 	mov	local02, local04
06394     17 22 06 F6 | 	mov	local03, #23
06398     0F 2B 02 F6 | 	mov	local07, local01
0639c     10 31 02 F6 | 	mov	local10, local02
063a0     11 2D 02 F6 | 	mov	local08, local03
063a4     6A 00 00 FF 
063a8     6C E4 05 F1 | 	add	objptr, ##54380
063ac     F2 1E 02 FB | 	rdlong	local01, objptr
063b0     0F 2F 02 F6 | 	mov	local09, local01
063b4     01 2E 66 F0 | 	shl	local09, #1
063b8     0F 2F 02 F1 | 	add	local09, local01
063bc     02 2E 66 F0 | 	shl	local09, #2
063c0     03 00 00 FF 
063c4     00 E4 85 F1 | 	sub	objptr, ##1536
063c8     F2 2E 02 F1 | 	add	local09, objptr
063cc     17 2B 62 FC | 	wrlong	local07, local09
063d0     03 00 00 FF 
063d4     00 E4 05 F1 | 	add	objptr, ##1536
063d8     F2 1E 02 FB | 	rdlong	local01, objptr
063dc     0F 2F 02 F6 | 	mov	local09, local01
063e0     01 2E 66 F0 | 	shl	local09, #1
063e4     0F 2F 02 F1 | 	add	local09, local01
063e8     02 2E 66 F0 | 	shl	local09, #2
063ec     03 00 00 FF 
063f0     00 E4 85 F1 | 	sub	objptr, ##1536
063f4     F2 2E 02 F1 | 	add	local09, objptr
063f8     04 2E 06 F1 | 	add	local09, #4
063fc     17 31 62 FC | 	wrlong	local10, local09
06400     03 00 00 FF 
06404     00 E4 05 F1 | 	add	objptr, ##1536
06408     F2 30 02 FB | 	rdlong	local10, objptr
0640c     18 1F 02 F6 | 	mov	local01, local10
06410     01 1E 66 F0 | 	shl	local01, #1
06414     18 1F 02 F1 | 	add	local01, local10
06418     02 1E 66 F0 | 	shl	local01, #2
0641c     03 00 00 FF 
06420     00 E4 85 F1 | 	sub	objptr, ##1536
06424     F2 1E 02 F1 | 	add	local01, objptr
06428     08 1E 06 F1 | 	add	local01, #8
0642c     0F 2D 62 FC | 	wrlong	local08, local01
06430     03 00 00 FF 
06434     00 E4 05 F1 | 	add	objptr, ##1536
06438     F2 2A 02 FB | 	rdlong	local07, objptr
0643c     01 2A 06 F1 | 	add	local07, #1
06440     F2 2A 62 FC | 	wrlong	local07, objptr
06444     6A 00 00 FF 
06448     6C E4 85 F1 | 	sub	objptr, ##54380
0644c                 | LR__0554
0644c     A7 F0 03 F6 | 	mov	ptra, fp
06450     B2 00 A0 FD | 	call	#popregs_
06454                 | _compile_array_assign_ret
06454     2D 00 64 FD | 	ret
06458                 | 
06458                 | ' 
06458                 | ' 
06458                 | ' sub compile_immediate_assign(linetype as ulong)
06458                 | _compile_immediate_assign
06458     09 4A 05 F6 | 	mov	COUNT_, #9
0645c     A8 00 A0 FD | 	call	#pushregs_
06460     09 25 0A F6 | 	mov	local04, arg01 wz
06464     FF 22 06 F6 | 	mov	local03, #255
06468     01 26 66 F6 | 	neg	local05, #1
0646c                 | ' 
0646c                 | ' t1.result_type=result_error : t1.result.uresult=0
0646c                 | ' i=-1: j=-1
0646c                 | ' 
0646c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
0646c     2C 00 90 5D |  if_ne	jmp	#LR__0560
06470     54 00 00 FF 
06474     FC E5 05 F1 | 	add	objptr, ##43516
06478     F2 28 02 FB | 	rdlong	local06, objptr
0647c     02 00 00 FF 
06480     38 E4 05 F1 | 	add	objptr, ##1080
06484     F2 04 68 FC | 	wrlong	#2, objptr
06488     13 00 00 FF 
0648c     38 E4 05 F1 | 	add	objptr, ##9784
06490     F2 00 68 FC | 	wrlong	#0, objptr
06494     6A 00 00 FF 
06498     6C E4 85 F1 | 	sub	objptr, ##54380
0649c                 | LR__0560
0649c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0649c     02 24 0E F2 | 	cmp	local04, #2 wz
064a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
064a4     54 00 00 AF 
064a8     FC E5 05 A1 |  if_e	add	objptr, ##43516
064ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
064b0     02 00 00 AF 
064b4     38 E4 05 A1 |  if_e	add	objptr, ##1080
064b8     F2 04 68 AC |  if_e	wrlong	#2, objptr
064bc     57 00 00 AF 
064c0     34 E4 85 A1 |  if_e	sub	objptr, ##44596
064c4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
064c4     04 24 0E F2 | 	cmp	local04, #4 wz
064c8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
064cc     2C 00 90 5D |  if_ne	jmp	#LR__0561
064d0     55 00 00 FF 
064d4     04 E4 05 F1 | 	add	objptr, ##43524
064d8     F2 28 02 FB | 	rdlong	local06, objptr
064dc     02 00 00 FF 
064e0     30 E4 05 F1 | 	add	objptr, ##1072
064e4     F2 06 68 FC | 	wrlong	#3, objptr
064e8     13 00 00 FF 
064ec     38 E4 05 F1 | 	add	objptr, ##9784
064f0     F2 04 68 FC | 	wrlong	#2, objptr
064f4     6A 00 00 FF 
064f8     6C E4 85 F1 | 	sub	objptr, ##54380
064fc                 | LR__0561
064fc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
064fc     05 24 0E F2 | 	cmp	local04, #5 wz
06500     3C 00 90 5D |  if_ne	jmp	#LR__0562
06504     57 00 00 FF 
06508     34 E4 05 F1 | 	add	objptr, ##44596
0650c     F2 FA 01 FB | 	rdlong	result1, objptr
06510     FD 28 02 F6 | 	mov	local06, result1
06514     03 28 66 F0 | 	shl	local06, #3
06518     02 00 00 FF 
0651c     38 E4 85 F1 | 	sub	objptr, ##1080
06520     F2 28 02 F1 | 	add	local06, objptr
06524     14 29 02 FB | 	rdlong	local06, local06
06528     02 FA 05 F1 | 	add	result1, #2
0652c     02 00 00 FF 
06530     38 E4 05 F1 | 	add	objptr, ##1080
06534     F2 FA 61 FC | 	wrlong	result1, objptr
06538     57 00 00 FF 
0653c     34 E4 85 F1 | 	sub	objptr, ##44596
06540                 | LR__0562
06540     14 13 02 F6 | 	mov	arg01, local06
06544     01 14 06 F6 | 	mov	arg02, #1
06548     CC 8F B1 FD | 	call	#__system__Right_S
0654c     D4 27 B0 FD | 	call	#_expr
06550                 | '  
06550                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06550                 | ' 
06550                 | ' suffix2$=right$(varname2$,1)
06550                 | ' expr()
06550                 | ' 
06550                 | ' 
06550                 | ' if varnum>0 then
06550     54 00 00 FF 
06554     F8 E5 05 F1 | 	add	objptr, ##43512
06558     F2 2A 02 FB | 	rdlong	local07, objptr
0655c     54 00 00 FF 
06560     F8 E5 85 F1 | 	sub	objptr, ##43512
06564     01 2A 56 F2 | 	cmps	local07, #1 wc
06568     58 00 90 CD |  if_b	jmp	#LR__0565
0656c                 | '   for i=0 to varnum-1
0656c     00 2C 06 F6 | 	mov	local08, #0
06570     54 00 00 FF 
06574     F8 E5 05 F1 | 	add	objptr, ##43512
06578     F2 2E 02 FB | 	rdlong	local09, objptr
0657c     54 00 00 FF 
06580     F8 E5 85 F1 | 	sub	objptr, ##43512
06584                 | LR__0563
06584     17 2D 52 F2 | 	cmps	local08, local09 wc
06588     38 00 90 3D |  if_ae	jmp	#LR__0564
0658c                 | '     if variables(i).name=varname2$ then j=i : exit
0658c     16 2B 02 F6 | 	mov	local07, local08
06590     04 2A 66 F0 | 	shl	local07, #4
06594     34 00 00 FF 
06598     F8 E5 05 F1 | 	add	objptr, ##27128
0659c     F2 2A 02 F1 | 	add	local07, objptr
065a0     15 13 02 FB | 	rdlong	arg01, local07
065a4     14 15 02 F6 | 	mov	arg02, local06
065a8     34 00 00 FF 
065ac     F8 E5 85 F1 | 	sub	objptr, ##27128
065b0     C0 6E B1 FD | 	call	#__system___string_cmp
065b4     00 FA 0D F2 | 	cmp	result1, #0 wz
065b8     16 27 02 A6 |  if_e	mov	local05, local08
065bc     01 2C 06 51 |  if_ne	add	local08, #1
065c0     C0 FF 9F 5D |  if_ne	jmp	#LR__0563
065c4                 | LR__0564
065c4                 | LR__0565
065c4                 | ' if  j=-1 andalso varnum<maxvars then   
065c4     FF FF 7F FF 
065c8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
065cc     60 00 90 5D |  if_ne	jmp	#LR__0566
065d0     54 00 00 FF 
065d4     F8 E5 05 F1 | 	add	objptr, ##43512
065d8     F2 2A 02 FB | 	rdlong	local07, objptr
065dc     54 00 00 FF 
065e0     F8 E5 85 F1 | 	sub	objptr, ##43512
065e4     01 00 00 FF 
065e8     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
065ec     40 00 90 3D |  if_ae	jmp	#LR__0566
065f0     54 00 00 FF 
065f4     F8 E5 05 F1 | 	add	objptr, ##43512
065f8     F2 2E 02 FB | 	rdlong	local09, objptr
065fc     04 2E 66 F0 | 	shl	local09, #4
06600     20 00 00 FF 
06604     00 E4 85 F1 | 	sub	objptr, ##16384
06608     F2 2E 02 F1 | 	add	local09, objptr
0660c     17 29 62 FC | 	wrlong	local06, local09
06610     20 00 00 FF 
06614     00 E4 05 F1 | 	add	objptr, ##16384
06618     F2 2A 02 FB | 	rdlong	local07, objptr
0661c     15 27 02 F6 | 	mov	local05, local07
06620     01 2A 06 F1 | 	add	local07, #1
06624     F2 2A 62 FC | 	wrlong	local07, objptr
06628     54 00 00 FF 
0662c     F8 E5 85 F1 | 	sub	objptr, ##43512
06630                 | LR__0566
06630     13 1F 02 F6 | 	mov	local01, local05
06634     17 22 06 F6 | 	mov	local03, #23
06638     0F 2B 02 F6 | 	mov	local07, local01
0663c     10 2F 02 F6 | 	mov	local09, local02
06640     11 1F 02 F6 | 	mov	local01, local03
06644     6A 00 00 FF 
06648     6C E4 05 F1 | 	add	objptr, ##54380
0664c     F2 2C 02 FB | 	rdlong	local08, objptr
06650     16 29 02 F6 | 	mov	local06, local08
06654     01 28 66 F0 | 	shl	local06, #1
06658     16 29 02 F1 | 	add	local06, local08
0665c     02 28 66 F0 | 	shl	local06, #2
06660     03 00 00 FF 
06664     00 E4 85 F1 | 	sub	objptr, ##1536
06668     F2 28 02 F1 | 	add	local06, objptr
0666c     14 2B 62 FC | 	wrlong	local07, local06
06670     03 00 00 FF 
06674     00 E4 05 F1 | 	add	objptr, ##1536
06678     F2 2C 02 FB | 	rdlong	local08, objptr
0667c     16 2B 02 F6 | 	mov	local07, local08
06680     01 2A 66 F0 | 	shl	local07, #1
06684     16 2B 02 F1 | 	add	local07, local08
06688     02 2A 66 F0 | 	shl	local07, #2
0668c     03 00 00 FF 
06690     00 E4 85 F1 | 	sub	objptr, ##1536
06694     F2 2A 02 F1 | 	add	local07, objptr
06698     04 2A 06 F1 | 	add	local07, #4
0669c     15 2F 62 FC | 	wrlong	local09, local07
066a0     03 00 00 FF 
066a4     00 E4 05 F1 | 	add	objptr, ##1536
066a8     F2 2E 02 FB | 	rdlong	local09, objptr
066ac     17 2D 02 F6 | 	mov	local08, local09
066b0     01 2C 66 F0 | 	shl	local08, #1
066b4     17 2D 02 F1 | 	add	local08, local09
066b8     02 2C 66 F0 | 	shl	local08, #2
066bc     03 00 00 FF 
066c0     00 E4 85 F1 | 	sub	objptr, ##1536
066c4     F2 2C 02 F1 | 	add	local08, objptr
066c8     08 2C 06 F1 | 	add	local08, #8
066cc     16 1F 62 FC | 	wrlong	local01, local08
066d0     03 00 00 FF 
066d4     00 E4 05 F1 | 	add	objptr, ##1536
066d8     F2 2A 02 FB | 	rdlong	local07, objptr
066dc     01 2A 06 F1 | 	add	local07, #1
066e0     F2 2A 62 FC | 	wrlong	local07, objptr
066e4     6A 00 00 FF 
066e8     6C E4 85 F1 | 	sub	objptr, ##54380
066ec                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' compiledline(lineptr)=t1:  lineptr+=1 
066ec                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
066ec     00 24 0E F2 | 	cmp	local04, #0 wz
066f0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066f4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
066f8     38 00 90 5D |  if_ne	jmp	#LR__0567
066fc     6A 00 00 FF 
06700     6C E4 05 F1 | 	add	objptr, ##54380
06704     F2 1E 02 FB | 	rdlong	local01, objptr
06708     0F 2F 02 F6 | 	mov	local09, local01
0670c     01 2E 66 F0 | 	shl	local09, #1
06710     0F 2F 02 F1 | 	add	local09, local01
06714     02 2E 66 F0 | 	shl	local09, #2
06718     03 00 00 FF 
0671c     00 E4 85 F1 | 	sub	objptr, ##1536
06720     F2 2E 02 F1 | 	add	local09, objptr
06724     08 2E 06 F1 | 	add	local09, #8
06728     17 FD 6B FC | 	wrlong	#510, local09
0672c     67 00 00 FF 
06730     6C E4 85 F1 | 	sub	objptr, ##52844
06734                 | LR__0567
06734     A7 F0 03 F6 | 	mov	ptra, fp
06738     B2 00 A0 FD | 	call	#popregs_
0673c                 | _compile_immediate_assign_ret
0673c     2D 00 64 FD | 	ret
06740                 | 
06740                 | ' 
06740                 | ' ' ------------------ compile the line that is calling a command 
06740                 | ' 
06740                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06740                 | _compile
06740     04 4A 05 F6 | 	mov	COUNT_, #4
06744     A8 00 A0 FD | 	call	#pushregs_
06748     09 1F 0A F6 | 	mov	local01, arg01 wz
0674c     0A 21 02 F6 | 	mov	local02, arg02
06750     0B 23 02 F6 | 	mov	local03, arg03
06754                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06754                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06754                 | '  
06754                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06754                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06754     0C 00 90 5D |  if_ne	jmp	#LR__0570
06758     00 12 06 F6 | 	mov	arg01, #0
0675c     24 F3 BF FD | 	call	#_compile_immediate
06760     A0 00 90 FD | 	jmp	#LR__0577
06764                 | LR__0570
06764     67 00 00 FF 
06768     6C E4 05 F1 | 	add	objptr, ##52844
0676c     F2 1E 62 FC | 	wrlong	local01, objptr
06770     04 E4 05 F1 | 	add	objptr, #4
06774     F2 20 62 FC | 	wrlong	local02, objptr
06778     67 00 00 FF 
0677c     70 E4 85 F1 | 	sub	objptr, ##52848
06780     11 13 02 F6 | 	mov	arg01, local03
06784     01 12 06 F1 | 	add	arg01, #1
06788     F8 F2 BF FD | 	call	#_compile_immediate
0678c     FD 24 0A F6 | 	mov	local04, result1 wz
06790                 | ' 
06790                 | ' ucompiledline(0)=alinemajor
06790                 | ' ucompiledline(1)=alineminor
06790                 | ' 
06790                 | ' 
06790                 | ' ' cont: 0: this is the first part of the line that will continue
06790                 | ' ' 1 - this is the continuation of the line
06790                 | ' ' 2 - this is the last continued line
06790                 | ' ' 3 - this is the ome and only part
06790                 | ' 
06790                 | ' err=compile_immediate(cont+1) 
06790                 | ' if err=0 then
06790     6C 00 90 5D |  if_ne	jmp	#LR__0576
06794                 | '   if cont=3 orelse cont=2 then 
06794     03 22 0E F2 | 	cmp	local03, #3 wz
06798     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
0679c     60 00 90 5D |  if_ne	jmp	#LR__0575
067a0                 | '     if alinemajor >lastline then 
067a0     6A 00 00 FF 
067a4     78 E4 05 F1 | 	add	objptr, ##54392
067a8     F2 16 02 FB | 	rdlong	arg03, objptr
067ac     6A 00 00 FF 
067b0     78 E4 85 F1 | 	sub	objptr, ##54392
067b4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067b8     0C 00 90 ED |  if_be	jmp	#LR__0571
067bc     0F 13 02 F6 | 	mov	arg01, local01
067c0     00 F2 BF FD | 	call	#_add_line_at_end
067c4     38 00 90 FD | 	jmp	#LR__0574
067c8                 | LR__0571
067c8     0F 13 02 F6 | 	mov	arg01, local01
067cc     30 EB BF FD | 	call	#_deleteline
067d0                 | '       deleteline(alinemajor)  
067d0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
067d0     6A 00 00 FF 
067d4     78 E4 05 F1 | 	add	objptr, ##54392
067d8     F2 16 02 FB | 	rdlong	arg03, objptr
067dc     6A 00 00 FF 
067e0     78 E4 85 F1 | 	sub	objptr, ##54392
067e4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067e8     0C 00 90 ED |  if_be	jmp	#LR__0572
067ec     0F 13 02 F6 | 	mov	arg01, local01
067f0     D0 F1 BF FD | 	call	#_add_line_at_end
067f4     08 00 90 FD | 	jmp	#LR__0573
067f8                 | LR__0572
067f8     0F 13 02 F6 | 	mov	arg01, local01
067fc     A8 EF BF FD | 	call	#_insertline
06800                 | LR__0573
06800                 | LR__0574
06800                 | LR__0575
06800                 | LR__0576
06800                 | ' return err
06800     12 FB 01 F6 | 	mov	result1, local04
06804                 | LR__0577
06804     A7 F0 03 F6 | 	mov	ptra, fp
06808     B2 00 A0 FD | 	call	#popregs_
0680c                 | _compile_ret
0680c     2D 00 64 FD | 	ret
06810                 | 
06810                 | ' 
06810                 | ' ' ------------------ compile the line that is assigning to a variable
06810                 | ' 
06810                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06810                 | _compile_assign
06810     03 4A 05 F6 | 	mov	COUNT_, #3
06814     A8 00 A0 FD | 	call	#pushregs_
06818     09 1F 0A F6 | 	mov	local01, arg01 wz
0681c     0A 21 02 F6 | 	mov	local02, arg02
06820     0B 23 02 F6 | 	mov	local03, arg03
06824                 | ' 
06824                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06824                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06824     0C 00 90 5D |  if_ne	jmp	#LR__0580
06828     00 12 06 F6 | 	mov	arg01, #0
0682c     28 FC BF FD | 	call	#_compile_immediate_assign
06830     94 00 90 FD | 	jmp	#LR__0586
06834                 | LR__0580
06834     67 00 00 FF 
06838     6C E4 05 F1 | 	add	objptr, ##52844
0683c     F2 1E 62 FC | 	wrlong	local01, objptr
06840     04 E4 05 F1 | 	add	objptr, #4
06844     F2 20 62 FC | 	wrlong	local02, objptr
06848     67 00 00 FF 
0684c     70 E4 85 F1 | 	sub	objptr, ##52848
06850     11 13 02 F6 | 	mov	arg01, local03
06854     01 12 06 F1 | 	add	arg01, #1
06858     FC FB BF FD | 	call	#_compile_immediate_assign
0685c                 | ' 
0685c                 | ' ucompiledline(0)=alinemajor
0685c                 | ' ucompiledline(1)=alineminor
0685c                 | ' 
0685c                 | ' compile_immediate_assign(cont+1) 
0685c                 | ' 
0685c                 | ' if cont=3 orelse cont=2 then 
0685c     03 22 0E F2 | 	cmp	local03, #3 wz
06860     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06864     60 00 90 5D |  if_ne	jmp	#LR__0585
06868                 | '   if alinemajor >lastline then 
06868     6A 00 00 FF 
0686c     78 E4 05 F1 | 	add	objptr, ##54392
06870     F2 16 02 FB | 	rdlong	arg03, objptr
06874     6A 00 00 FF 
06878     78 E4 85 F1 | 	sub	objptr, ##54392
0687c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06880     0C 00 90 ED |  if_be	jmp	#LR__0581
06884     0F 13 02 F6 | 	mov	arg01, local01
06888     38 F1 BF FD | 	call	#_add_line_at_end
0688c     38 00 90 FD | 	jmp	#LR__0584
06890                 | LR__0581
06890     0F 13 02 F6 | 	mov	arg01, local01
06894     68 EA BF FD | 	call	#_deleteline
06898                 | '     deleteline(alinemajor)  
06898                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06898     6A 00 00 FF 
0689c     78 E4 05 F1 | 	add	objptr, ##54392
068a0     F2 16 02 FB | 	rdlong	arg03, objptr
068a4     6A 00 00 FF 
068a8     78 E4 85 F1 | 	sub	objptr, ##54392
068ac     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
068b0     0C 00 90 ED |  if_be	jmp	#LR__0582
068b4     0F 13 02 F6 | 	mov	arg01, local01
068b8     08 F1 BF FD | 	call	#_add_line_at_end
068bc     08 00 90 FD | 	jmp	#LR__0583
068c0                 | LR__0582
068c0     0F 13 02 F6 | 	mov	arg01, local01
068c4     E0 EE BF FD | 	call	#_insertline
068c8                 | LR__0583
068c8                 | LR__0584
068c8                 | LR__0585
068c8                 | LR__0586
068c8     A7 F0 03 F6 | 	mov	ptra, fp
068cc     B2 00 A0 FD | 	call	#popregs_
068d0                 | _compile_assign_ret
068d0     2D 00 64 FD | 	ret
068d4                 | 
068d4                 | ' 
068d4                 | ' sub compile_error(errno)
068d4                 | _compile_error
068d4     FF 04 06 F6 | 	mov	_var03, #255
068d8     01 07 02 F6 | 	mov	_var04, _var02
068dc     02 09 02 F6 | 	mov	_var05, _var03
068e0     6A 00 00 FF 
068e4     6C E4 05 F1 | 	add	objptr, ##54380
068e8     F2 0A 02 FB | 	rdlong	_var06, objptr
068ec     05 0D 02 F6 | 	mov	_var07, _var06
068f0     01 0C 66 F0 | 	shl	_var07, #1
068f4     05 0D 02 F1 | 	add	_var07, _var06
068f8     02 0C 66 F0 | 	shl	_var07, #2
068fc     03 00 00 FF 
06900     00 E4 85 F1 | 	sub	objptr, ##1536
06904     F2 0C 02 F1 | 	add	_var07, objptr
06908     06 13 62 FC | 	wrlong	arg01, _var07
0690c     03 00 00 FF 
06910     00 E4 05 F1 | 	add	objptr, ##1536
06914     F2 0C 02 FB | 	rdlong	_var07, objptr
06918     06 0B 02 F6 | 	mov	_var06, _var07
0691c     01 0A 66 F0 | 	shl	_var06, #1
06920     06 0B 02 F1 | 	add	_var06, _var07
06924     02 0A 66 F0 | 	shl	_var06, #2
06928     03 00 00 FF 
0692c     00 E4 85 F1 | 	sub	objptr, ##1536
06930     F2 0A 02 F1 | 	add	_var06, objptr
06934     04 0A 06 F1 | 	add	_var06, #4
06938     05 07 62 FC | 	wrlong	_var04, _var06
0693c     03 00 00 FF 
06940     00 E4 05 F1 | 	add	objptr, ##1536
06944     F2 0C 02 FB | 	rdlong	_var07, objptr
06948     06 0B 02 F6 | 	mov	_var06, _var07
0694c     01 0A 66 F0 | 	shl	_var06, #1
06950     06 0B 02 F1 | 	add	_var06, _var07
06954     02 0A 66 F0 | 	shl	_var06, #2
06958     03 00 00 FF 
0695c     00 E4 85 F1 | 	sub	objptr, ##1536
06960     F2 0A 02 F1 | 	add	_var06, objptr
06964     08 0A 06 F1 | 	add	_var06, #8
06968     05 09 62 FC | 	wrlong	_var05, _var06
0696c     03 00 00 FF 
06970     00 E4 05 F1 | 	add	objptr, ##1536
06974     F2 12 02 FB | 	rdlong	arg01, objptr
06978     01 12 06 F1 | 	add	arg01, #1
0697c     F2 12 62 FC | 	wrlong	arg01, objptr
06980     6A 00 00 FF 
06984     6C E4 85 F1 | 	sub	objptr, ##54380
06988                 | _compile_error_ret
06988     2D 00 64 FD | 	ret
0698c                 | 
0698c                 | ' 
0698c                 | ' sub compile_unknown() 
0698c                 | _compile_unknown
0698c     FF 04 06 F6 | 	mov	_var03, #255
06990     17 00 06 F6 | 	mov	_var01, #23
06994     01 07 02 F6 | 	mov	_var04, _var02
06998     02 01 02 F6 | 	mov	_var01, _var03
0699c     6A 00 00 FF 
069a0     6C E4 05 F1 | 	add	objptr, ##54380
069a4     F2 08 02 FB | 	rdlong	_var05, objptr
069a8     04 0B 02 F6 | 	mov	_var06, _var05
069ac     01 0A 66 F0 | 	shl	_var06, #1
069b0     04 0B 02 F1 | 	add	_var06, _var05
069b4     02 0A 66 F0 | 	shl	_var06, #2
069b8     03 00 00 FF 
069bc     00 E4 85 F1 | 	sub	objptr, ##1536
069c0     F2 0A 02 F1 | 	add	_var06, objptr
069c4     05 2F 68 FC | 	wrlong	#23, _var06
069c8     03 00 00 FF 
069cc     00 E4 05 F1 | 	add	objptr, ##1536
069d0     F2 0A 02 FB | 	rdlong	_var06, objptr
069d4     05 09 02 F6 | 	mov	_var05, _var06
069d8     01 08 66 F0 | 	shl	_var05, #1
069dc     05 09 02 F1 | 	add	_var05, _var06
069e0     02 08 66 F0 | 	shl	_var05, #2
069e4     03 00 00 FF 
069e8     00 E4 85 F1 | 	sub	objptr, ##1536
069ec     F2 08 02 F1 | 	add	_var05, objptr
069f0     04 08 06 F1 | 	add	_var05, #4
069f4     04 07 62 FC | 	wrlong	_var04, _var05
069f8     03 00 00 FF 
069fc     00 E4 05 F1 | 	add	objptr, ##1536
06a00     F2 0A 02 FB | 	rdlong	_var06, objptr
06a04     05 09 02 F6 | 	mov	_var05, _var06
06a08     01 08 66 F0 | 	shl	_var05, #1
06a0c     05 09 02 F1 | 	add	_var05, _var06
06a10     02 08 66 F0 | 	shl	_var05, #2
06a14     03 00 00 FF 
06a18     00 E4 85 F1 | 	sub	objptr, ##1536
06a1c     F2 08 02 F1 | 	add	_var05, objptr
06a20     08 08 06 F1 | 	add	_var05, #8
06a24     04 01 62 FC | 	wrlong	_var01, _var05
06a28     03 00 00 FF 
06a2c     00 E4 05 F1 | 	add	objptr, ##1536
06a30     F2 0A 02 FB | 	rdlong	_var06, objptr
06a34     01 0A 06 F1 | 	add	_var06, #1
06a38     F2 0A 62 FC | 	wrlong	_var06, objptr
06a3c     6A 00 00 FF 
06a40     6C E4 85 F1 | 	sub	objptr, ##54380
06a44                 | _compile_unknown_ret
06a44     2D 00 64 FD | 	ret
06a48                 | 
06a48                 | ' 
06a48                 | ' function compile_fun_2p() as ulong
06a48                 | _compile_fun_2p
06a48     01 4A 05 F6 | 	mov	COUNT_, #1
06a4c     A8 00 A0 FD | 	call	#pushregs_
06a50     D0 22 B0 FD | 	call	#_expr
06a54                 | ' 
06a54                 | ' expr()
06a54                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06a54     57 00 00 FF 
06a58     34 E4 05 F1 | 	add	objptr, ##44596
06a5c     F2 1E 02 FB | 	rdlong	local01, objptr
06a60     03 1E 66 F0 | 	shl	local01, #3
06a64     02 00 00 FF 
06a68     38 E4 85 F1 | 	sub	objptr, ##1080
06a6c     F2 1E 02 F1 | 	add	local01, objptr
06a70     04 1E 06 F1 | 	add	local01, #4
06a74     0F 1F 02 FB | 	rdlong	local01, local01
06a78     11 1E 0E F2 | 	cmp	local01, #17 wz
06a7c     54 00 00 FF 
06a80     FC E5 85 F1 | 	sub	objptr, ##43516
06a84     15 FA 05 56 |  if_ne	mov	result1, #21
06a88     24 00 90 5D |  if_ne	jmp	#LR__0590
06a8c     57 00 00 FF 
06a90     34 E4 05 F1 | 	add	objptr, ##44596
06a94     F2 1E 02 FB | 	rdlong	local01, objptr
06a98     01 1E 06 F1 | 	add	local01, #1
06a9c     F2 1E 62 FC | 	wrlong	local01, objptr
06aa0     57 00 00 FF 
06aa4     34 E4 85 F1 | 	sub	objptr, ##44596
06aa8     78 22 B0 FD | 	call	#_expr
06aac     00 FA 05 F6 | 	mov	result1, #0
06ab0                 | LR__0590
06ab0     A7 F0 03 F6 | 	mov	ptra, fp
06ab4     B2 00 A0 FD | 	call	#popregs_
06ab8                 | _compile_fun_2p_ret
06ab8     2D 00 64 FD | 	ret
06abc                 | 
06abc                 | ' 
06abc                 | ' function compile_fun_3p() as ulong
06abc                 | _compile_fun_3p
06abc     01 4A 05 F6 | 	mov	COUNT_, #1
06ac0     A8 00 A0 FD | 	call	#pushregs_
06ac4     5C 22 B0 FD | 	call	#_expr
06ac8                 | ' 
06ac8                 | ' expr()
06ac8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ac8     57 00 00 FF 
06acc     34 E4 05 F1 | 	add	objptr, ##44596
06ad0     F2 1E 02 FB | 	rdlong	local01, objptr
06ad4     03 1E 66 F0 | 	shl	local01, #3
06ad8     02 00 00 FF 
06adc     38 E4 85 F1 | 	sub	objptr, ##1080
06ae0     F2 1E 02 F1 | 	add	local01, objptr
06ae4     04 1E 06 F1 | 	add	local01, #4
06ae8     0F 1F 02 FB | 	rdlong	local01, local01
06aec     11 1E 0E F2 | 	cmp	local01, #17 wz
06af0     54 00 00 FF 
06af4     FC E5 85 F1 | 	sub	objptr, ##43516
06af8     15 FA 05 56 |  if_ne	mov	result1, #21
06afc     7C 00 90 5D |  if_ne	jmp	#LR__0600
06b00     57 00 00 FF 
06b04     34 E4 05 F1 | 	add	objptr, ##44596
06b08     F2 1E 02 FB | 	rdlong	local01, objptr
06b0c     01 1E 06 F1 | 	add	local01, #1
06b10     F2 1E 62 FC | 	wrlong	local01, objptr
06b14     57 00 00 FF 
06b18     34 E4 85 F1 | 	sub	objptr, ##44596
06b1c     04 22 B0 FD | 	call	#_expr
06b20                 | ' expr()
06b20                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b20     57 00 00 FF 
06b24     34 E4 05 F1 | 	add	objptr, ##44596
06b28     F2 1E 02 FB | 	rdlong	local01, objptr
06b2c     03 1E 66 F0 | 	shl	local01, #3
06b30     02 00 00 FF 
06b34     38 E4 85 F1 | 	sub	objptr, ##1080
06b38     F2 1E 02 F1 | 	add	local01, objptr
06b3c     04 1E 06 F1 | 	add	local01, #4
06b40     0F 1F 02 FB | 	rdlong	local01, local01
06b44     11 1E 0E F2 | 	cmp	local01, #17 wz
06b48     54 00 00 FF 
06b4c     FC E5 85 F1 | 	sub	objptr, ##43516
06b50     15 FA 05 56 |  if_ne	mov	result1, #21
06b54     24 00 90 5D |  if_ne	jmp	#LR__0600
06b58     57 00 00 FF 
06b5c     34 E4 05 F1 | 	add	objptr, ##44596
06b60     F2 1E 02 FB | 	rdlong	local01, objptr
06b64     01 1E 06 F1 | 	add	local01, #1
06b68     F2 1E 62 FC | 	wrlong	local01, objptr
06b6c     57 00 00 FF 
06b70     34 E4 85 F1 | 	sub	objptr, ##44596
06b74     AC 21 B0 FD | 	call	#_expr
06b78     00 FA 05 F6 | 	mov	result1, #0
06b7c                 | LR__0600
06b7c     A7 F0 03 F6 | 	mov	ptra, fp
06b80     B2 00 A0 FD | 	call	#popregs_
06b84                 | _compile_fun_3p_ret
06b84     2D 00 64 FD | 	ret
06b88                 | 
06b88                 | ' 
06b88                 | ' function compile_fun_4p() as ulong
06b88                 | _compile_fun_4p
06b88     01 4A 05 F6 | 	mov	COUNT_, #1
06b8c     A8 00 A0 FD | 	call	#pushregs_
06b90     90 21 B0 FD | 	call	#_expr
06b94                 | ' 
06b94                 | ' expr()
06b94                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b94     57 00 00 FF 
06b98     34 E4 05 F1 | 	add	objptr, ##44596
06b9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ba0     03 1E 66 F0 | 	shl	local01, #3
06ba4     02 00 00 FF 
06ba8     38 E4 85 F1 | 	sub	objptr, ##1080
06bac     F2 1E 02 F1 | 	add	local01, objptr
06bb0     04 1E 06 F1 | 	add	local01, #4
06bb4     0F 1F 02 FB | 	rdlong	local01, local01
06bb8     11 1E 0E F2 | 	cmp	local01, #17 wz
06bbc     54 00 00 FF 
06bc0     FC E5 85 F1 | 	sub	objptr, ##43516
06bc4     15 FA 05 56 |  if_ne	mov	result1, #21
06bc8     D4 00 90 5D |  if_ne	jmp	#LR__0610
06bcc     57 00 00 FF 
06bd0     34 E4 05 F1 | 	add	objptr, ##44596
06bd4     F2 1E 02 FB | 	rdlong	local01, objptr
06bd8     01 1E 06 F1 | 	add	local01, #1
06bdc     F2 1E 62 FC | 	wrlong	local01, objptr
06be0     57 00 00 FF 
06be4     34 E4 85 F1 | 	sub	objptr, ##44596
06be8     38 21 B0 FD | 	call	#_expr
06bec                 | ' expr()
06bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06bec     57 00 00 FF 
06bf0     34 E4 05 F1 | 	add	objptr, ##44596
06bf4     F2 1E 02 FB | 	rdlong	local01, objptr
06bf8     03 1E 66 F0 | 	shl	local01, #3
06bfc     02 00 00 FF 
06c00     38 E4 85 F1 | 	sub	objptr, ##1080
06c04     F2 1E 02 F1 | 	add	local01, objptr
06c08     04 1E 06 F1 | 	add	local01, #4
06c0c     0F 1F 02 FB | 	rdlong	local01, local01
06c10     11 1E 0E F2 | 	cmp	local01, #17 wz
06c14     54 00 00 FF 
06c18     FC E5 85 F1 | 	sub	objptr, ##43516
06c1c     15 FA 05 56 |  if_ne	mov	result1, #21
06c20     7C 00 90 5D |  if_ne	jmp	#LR__0610
06c24     57 00 00 FF 
06c28     34 E4 05 F1 | 	add	objptr, ##44596
06c2c     F2 1E 02 FB | 	rdlong	local01, objptr
06c30     01 1E 06 F1 | 	add	local01, #1
06c34     F2 1E 62 FC | 	wrlong	local01, objptr
06c38     57 00 00 FF 
06c3c     34 E4 85 F1 | 	sub	objptr, ##44596
06c40     E0 20 B0 FD | 	call	#_expr
06c44                 | ' expr()
06c44                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c44     57 00 00 FF 
06c48     34 E4 05 F1 | 	add	objptr, ##44596
06c4c     F2 1E 02 FB | 	rdlong	local01, objptr
06c50     03 1E 66 F0 | 	shl	local01, #3
06c54     02 00 00 FF 
06c58     38 E4 85 F1 | 	sub	objptr, ##1080
06c5c     F2 1E 02 F1 | 	add	local01, objptr
06c60     04 1E 06 F1 | 	add	local01, #4
06c64     0F 1F 02 FB | 	rdlong	local01, local01
06c68     11 1E 0E F2 | 	cmp	local01, #17 wz
06c6c     54 00 00 FF 
06c70     FC E5 85 F1 | 	sub	objptr, ##43516
06c74     15 FA 05 56 |  if_ne	mov	result1, #21
06c78     24 00 90 5D |  if_ne	jmp	#LR__0610
06c7c     57 00 00 FF 
06c80     34 E4 05 F1 | 	add	objptr, ##44596
06c84     F2 1E 02 FB | 	rdlong	local01, objptr
06c88     01 1E 06 F1 | 	add	local01, #1
06c8c     F2 1E 62 FC | 	wrlong	local01, objptr
06c90     57 00 00 FF 
06c94     34 E4 85 F1 | 	sub	objptr, ##44596
06c98     88 20 B0 FD | 	call	#_expr
06c9c     00 FA 05 F6 | 	mov	result1, #0
06ca0                 | LR__0610
06ca0     A7 F0 03 F6 | 	mov	ptra, fp
06ca4     B2 00 A0 FD | 	call	#popregs_
06ca8                 | _compile_fun_4p_ret
06ca8     2D 00 64 FD | 	ret
06cac                 | 
06cac                 | ' 
06cac                 | ' 
06cac                 | ' function compile_fun_5p() as ulong
06cac                 | _compile_fun_5p
06cac     01 4A 05 F6 | 	mov	COUNT_, #1
06cb0     A8 00 A0 FD | 	call	#pushregs_
06cb4     6C 20 B0 FD | 	call	#_expr
06cb8                 | ' 
06cb8                 | ' expr()
06cb8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cb8     57 00 00 FF 
06cbc     34 E4 05 F1 | 	add	objptr, ##44596
06cc0     F2 1E 02 FB | 	rdlong	local01, objptr
06cc4     03 1E 66 F0 | 	shl	local01, #3
06cc8     02 00 00 FF 
06ccc     38 E4 85 F1 | 	sub	objptr, ##1080
06cd0     F2 1E 02 F1 | 	add	local01, objptr
06cd4     04 1E 06 F1 | 	add	local01, #4
06cd8     0F 1F 02 FB | 	rdlong	local01, local01
06cdc     11 1E 0E F2 | 	cmp	local01, #17 wz
06ce0     54 00 00 FF 
06ce4     FC E5 85 F1 | 	sub	objptr, ##43516
06ce8     15 FA 05 56 |  if_ne	mov	result1, #21
06cec     2C 01 90 5D |  if_ne	jmp	#LR__0620
06cf0     57 00 00 FF 
06cf4     34 E4 05 F1 | 	add	objptr, ##44596
06cf8     F2 1E 02 FB | 	rdlong	local01, objptr
06cfc     01 1E 06 F1 | 	add	local01, #1
06d00     F2 1E 62 FC | 	wrlong	local01, objptr
06d04     57 00 00 FF 
06d08     34 E4 85 F1 | 	sub	objptr, ##44596
06d0c     14 20 B0 FD | 	call	#_expr
06d10                 | ' expr()
06d10                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d10     57 00 00 FF 
06d14     34 E4 05 F1 | 	add	objptr, ##44596
06d18     F2 1E 02 FB | 	rdlong	local01, objptr
06d1c     03 1E 66 F0 | 	shl	local01, #3
06d20     02 00 00 FF 
06d24     38 E4 85 F1 | 	sub	objptr, ##1080
06d28     F2 1E 02 F1 | 	add	local01, objptr
06d2c     04 1E 06 F1 | 	add	local01, #4
06d30     0F 1F 02 FB | 	rdlong	local01, local01
06d34     11 1E 0E F2 | 	cmp	local01, #17 wz
06d38     54 00 00 FF 
06d3c     FC E5 85 F1 | 	sub	objptr, ##43516
06d40     15 FA 05 56 |  if_ne	mov	result1, #21
06d44     D4 00 90 5D |  if_ne	jmp	#LR__0620
06d48     57 00 00 FF 
06d4c     34 E4 05 F1 | 	add	objptr, ##44596
06d50     F2 1E 02 FB | 	rdlong	local01, objptr
06d54     01 1E 06 F1 | 	add	local01, #1
06d58     F2 1E 62 FC | 	wrlong	local01, objptr
06d5c     57 00 00 FF 
06d60     34 E4 85 F1 | 	sub	objptr, ##44596
06d64     BC 1F B0 FD | 	call	#_expr
06d68                 | ' expr()
06d68                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d68     57 00 00 FF 
06d6c     34 E4 05 F1 | 	add	objptr, ##44596
06d70     F2 1E 02 FB | 	rdlong	local01, objptr
06d74     03 1E 66 F0 | 	shl	local01, #3
06d78     02 00 00 FF 
06d7c     38 E4 85 F1 | 	sub	objptr, ##1080
06d80     F2 1E 02 F1 | 	add	local01, objptr
06d84     04 1E 06 F1 | 	add	local01, #4
06d88     0F 1F 02 FB | 	rdlong	local01, local01
06d8c     11 1E 0E F2 | 	cmp	local01, #17 wz
06d90     54 00 00 FF 
06d94     FC E5 85 F1 | 	sub	objptr, ##43516
06d98     15 FA 05 56 |  if_ne	mov	result1, #21
06d9c     7C 00 90 5D |  if_ne	jmp	#LR__0620
06da0     57 00 00 FF 
06da4     34 E4 05 F1 | 	add	objptr, ##44596
06da8     F2 1E 02 FB | 	rdlong	local01, objptr
06dac     01 1E 06 F1 | 	add	local01, #1
06db0     F2 1E 62 FC | 	wrlong	local01, objptr
06db4     57 00 00 FF 
06db8     34 E4 85 F1 | 	sub	objptr, ##44596
06dbc     64 1F B0 FD | 	call	#_expr
06dc0                 | ' expr()
06dc0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06dc0     57 00 00 FF 
06dc4     34 E4 05 F1 | 	add	objptr, ##44596
06dc8     F2 1E 02 FB | 	rdlong	local01, objptr
06dcc     03 1E 66 F0 | 	shl	local01, #3
06dd0     02 00 00 FF 
06dd4     38 E4 85 F1 | 	sub	objptr, ##1080
06dd8     F2 1E 02 F1 | 	add	local01, objptr
06ddc     04 1E 06 F1 | 	add	local01, #4
06de0     0F 1F 02 FB | 	rdlong	local01, local01
06de4     11 1E 0E F2 | 	cmp	local01, #17 wz
06de8     54 00 00 FF 
06dec     FC E5 85 F1 | 	sub	objptr, ##43516
06df0     15 FA 05 56 |  if_ne	mov	result1, #21
06df4     24 00 90 5D |  if_ne	jmp	#LR__0620
06df8     57 00 00 FF 
06dfc     34 E4 05 F1 | 	add	objptr, ##44596
06e00     F2 1E 02 FB | 	rdlong	local01, objptr
06e04     01 1E 06 F1 | 	add	local01, #1
06e08     F2 1E 62 FC | 	wrlong	local01, objptr
06e0c     57 00 00 FF 
06e10     34 E4 85 F1 | 	sub	objptr, ##44596
06e14     0C 1F B0 FD | 	call	#_expr
06e18     00 FA 05 F6 | 	mov	result1, #0
06e1c                 | LR__0620
06e1c     A7 F0 03 F6 | 	mov	ptra, fp
06e20     B2 00 A0 FD | 	call	#popregs_
06e24                 | _compile_fun_5p_ret
06e24     2D 00 64 FD | 	ret
06e28                 | 
06e28                 | ' 
06e28                 | ' function compile_fun_varp() as ulong 
06e28                 | _compile_fun_varp
06e28     02 4A 05 F6 | 	mov	COUNT_, #2
06e2c     A8 00 A0 FD | 	call	#pushregs_
06e30     00 1E 06 F6 | 	mov	local01, #0
06e34                 | ' i=0
06e34                 | ' if lparts(ct).token<>token_end then
06e34     57 00 00 FF 
06e38     34 E4 05 F1 | 	add	objptr, ##44596
06e3c     F2 20 02 FB | 	rdlong	local02, objptr
06e40     03 20 66 F0 | 	shl	local02, #3
06e44     02 00 00 FF 
06e48     38 E4 85 F1 | 	sub	objptr, ##1080
06e4c     F2 20 02 F1 | 	add	local02, objptr
06e50     04 20 06 F1 | 	add	local02, #4
06e54     10 21 02 FB | 	rdlong	local02, local02
06e58     FE 21 0E F2 | 	cmp	local02, #510 wz
06e5c     54 00 00 FF 
06e60     FC E5 85 F1 | 	sub	objptr, ##43516
06e64     5C 00 90 AD |  if_e	jmp	#LR__0632
06e68                 | '   do
06e68                 | LR__0630
06e68     B8 1E B0 FD | 	call	#_expr
06e6c     01 1E 06 F1 | 	add	local01, #1
06e70                 | '   expr()
06e70                 | '    i+=1
06e70                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06e70     57 00 00 FF 
06e74     34 E4 05 F1 | 	add	objptr, ##44596
06e78     F2 20 02 FB | 	rdlong	local02, objptr
06e7c     03 20 66 F0 | 	shl	local02, #3
06e80     02 00 00 FF 
06e84     38 E4 85 F1 | 	sub	objptr, ##1080
06e88     F2 20 02 F1 | 	add	local02, objptr
06e8c     04 20 06 F1 | 	add	local02, #4
06e90     10 21 02 FB | 	rdlong	local02, local02
06e94     11 20 0E F2 | 	cmp	local02, #17 wz
06e98     54 00 00 FF 
06e9c     FC E5 85 F1 | 	sub	objptr, ##43516
06ea0     20 00 90 5D |  if_ne	jmp	#LR__0631
06ea4     57 00 00 FF 
06ea8     34 E4 05 F1 | 	add	objptr, ##44596
06eac     F2 20 02 FB | 	rdlong	local02, objptr
06eb0     01 20 06 F1 | 	add	local02, #1
06eb4     F2 20 62 FC | 	wrlong	local02, objptr
06eb8     57 00 00 FF 
06ebc     34 E4 85 F1 | 	sub	objptr, ##44596
06ec0     A4 FF 9F FD | 	jmp	#LR__0630
06ec4                 | LR__0631
06ec4                 | LR__0632
06ec4                 | ' return i
06ec4     0F FB 01 F6 | 	mov	result1, local01
06ec8     A7 F0 03 F6 | 	mov	ptra, fp
06ecc     B2 00 A0 FD | 	call	#popregs_
06ed0                 | _compile_fun_varp_ret
06ed0     2D 00 64 FD | 	ret
06ed4                 | 
06ed4                 | ' 
06ed4                 | ' 
06ed4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06ed4                 | _compile_print
06ed4     0B 4A 05 F6 | 	mov	COUNT_, #11
06ed8     A8 00 A0 FD | 	call	#pushregs_
06edc     00 1E 06 F6 | 	mov	local01, #0
06ee0     1D 22 06 F6 | 	mov	local03, #29
06ee4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06ee4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06ee4     57 00 00 FF 
06ee8     34 E4 05 F1 | 	add	objptr, ##44596
06eec     F2 24 02 FB | 	rdlong	local04, objptr
06ef0     03 24 66 F0 | 	shl	local04, #3
06ef4     02 00 00 FF 
06ef8     38 E4 85 F1 | 	sub	objptr, ##1080
06efc     F2 24 02 F1 | 	add	local04, objptr
06f00     04 24 06 F1 | 	add	local04, #4
06f04     12 25 02 FB | 	rdlong	local04, local04
06f08     FE 25 0E F2 | 	cmp	local04, #510 wz
06f0c     54 00 00 FF 
06f10     FC E5 85 F1 | 	sub	objptr, ##43516
06f14     68 01 90 5D |  if_ne	jmp	#LR__0640
06f18     20 22 06 F6 | 	mov	local03, #32
06f1c     0F 27 02 F6 | 	mov	local05, local01
06f20     10 29 02 F6 | 	mov	local06, local02
06f24     11 2B 02 F6 | 	mov	local07, local03
06f28     6A 00 00 FF 
06f2c     6C E4 05 F1 | 	add	objptr, ##54380
06f30     F2 2C 02 FB | 	rdlong	local08, objptr
06f34     16 2F 02 F6 | 	mov	local09, local08
06f38     01 2E 66 F0 | 	shl	local09, #1
06f3c     16 2F 02 F1 | 	add	local09, local08
06f40     02 2E 66 F0 | 	shl	local09, #2
06f44     03 00 00 FF 
06f48     00 E4 85 F1 | 	sub	objptr, ##1536
06f4c     F2 2E 02 F1 | 	add	local09, objptr
06f50     17 27 62 FC | 	wrlong	local05, local09
06f54     03 00 00 FF 
06f58     00 E4 05 F1 | 	add	objptr, ##1536
06f5c     F2 26 02 FB | 	rdlong	local05, objptr
06f60     13 31 02 F6 | 	mov	local10, local05
06f64     01 30 66 F0 | 	shl	local10, #1
06f68     13 31 02 F1 | 	add	local10, local05
06f6c     02 30 66 F0 | 	shl	local10, #2
06f70     03 00 00 FF 
06f74     00 E4 85 F1 | 	sub	objptr, ##1536
06f78     F2 30 02 F1 | 	add	local10, objptr
06f7c     04 30 06 F1 | 	add	local10, #4
06f80     18 29 62 FC | 	wrlong	local06, local10
06f84     03 00 00 FF 
06f88     00 E4 05 F1 | 	add	objptr, ##1536
06f8c     F2 26 02 FB | 	rdlong	local05, objptr
06f90     13 33 02 F6 | 	mov	local11, local05
06f94     01 32 66 F0 | 	shl	local11, #1
06f98     13 33 02 F1 | 	add	local11, local05
06f9c     02 32 66 F0 | 	shl	local11, #2
06fa0     03 00 00 FF 
06fa4     00 E4 85 F1 | 	sub	objptr, ##1536
06fa8     F2 32 02 F1 | 	add	local11, objptr
06fac     08 32 06 F1 | 	add	local11, #8
06fb0     19 2B 62 FC | 	wrlong	local07, local11
06fb4     03 00 00 FF 
06fb8     00 E4 05 F1 | 	add	objptr, ##1536
06fbc     F2 26 02 FB | 	rdlong	local05, objptr
06fc0     01 26 06 F1 | 	add	local05, #1
06fc4     F2 26 62 FC | 	wrlong	local05, objptr
06fc8     44 22 06 F6 | 	mov	local03, #68
06fcc     0F 27 02 F6 | 	mov	local05, local01
06fd0     10 29 02 F6 | 	mov	local06, local02
06fd4     11 2B 02 F6 | 	mov	local07, local03
06fd8     F2 2C 02 FB | 	rdlong	local08, objptr
06fdc     16 2F 02 F6 | 	mov	local09, local08
06fe0     01 2E 66 F0 | 	shl	local09, #1
06fe4     16 2F 02 F1 | 	add	local09, local08
06fe8     02 2E 66 F0 | 	shl	local09, #2
06fec     03 00 00 FF 
06ff0     00 E4 85 F1 | 	sub	objptr, ##1536
06ff4     F2 2E 02 F1 | 	add	local09, objptr
06ff8     17 27 62 FC | 	wrlong	local05, local09
06ffc     03 00 00 FF 
07000     00 E4 05 F1 | 	add	objptr, ##1536
07004     F2 32 02 FB | 	rdlong	local11, objptr
07008     19 31 02 F6 | 	mov	local10, local11
0700c     01 30 66 F0 | 	shl	local10, #1
07010     19 31 02 F1 | 	add	local10, local11
07014     02 30 66 F0 | 	shl	local10, #2
07018     03 00 00 FF 
0701c     00 E4 85 F1 | 	sub	objptr, ##1536
07020     F2 30 02 F1 | 	add	local10, objptr
07024     04 30 06 F1 | 	add	local10, #4
07028     18 29 62 FC | 	wrlong	local06, local10
0702c     03 00 00 FF 
07030     00 E4 05 F1 | 	add	objptr, ##1536
07034     F2 30 02 FB | 	rdlong	local10, objptr
07038     18 33 02 F6 | 	mov	local11, local10
0703c     01 32 66 F0 | 	shl	local11, #1
07040     18 33 02 F1 | 	add	local11, local10
07044     02 32 66 F0 | 	shl	local11, #2
07048     03 00 00 FF 
0704c     00 E4 85 F1 | 	sub	objptr, ##1536
07050     F2 32 02 F1 | 	add	local11, objptr
07054     08 32 06 F1 | 	add	local11, #8
07058     19 2B 62 FC | 	wrlong	local07, local11
0705c     03 00 00 FF 
07060     00 E4 05 F1 | 	add	objptr, ##1536
07064     F2 26 02 FB | 	rdlong	local05, objptr
07068     01 26 06 F1 | 	add	local05, #1
0706c     F2 26 62 FC | 	wrlong	local05, objptr
07070     6A 00 00 FF 
07074     6C E4 85 F1 | 	sub	objptr, ##54380
07078     00 FA 05 F6 | 	mov	result1, #0
0707c     20 05 90 FD | 	jmp	#LR__0647
07080                 | LR__0640
07080                 | ' do
07080                 | LR__0641
07080     A0 1C B0 FD | 	call	#_expr
07084                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
07084                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07084     57 00 00 FF 
07088     34 E4 05 F1 | 	add	objptr, ##44596
0708c     F2 24 02 FB | 	rdlong	local04, objptr
07090     03 24 66 F0 | 	shl	local04, #3
07094     02 00 00 FF 
07098     38 E4 85 F1 | 	sub	objptr, ##1080
0709c     F2 24 02 F1 | 	add	local04, objptr
070a0     04 24 06 F1 | 	add	local04, #4
070a4     12 2D 02 FB | 	rdlong	local08, local04
070a8     11 2C 0E F2 | 	cmp	local08, #17 wz
070ac     54 00 00 FF 
070b0     FC E5 85 F1 | 	sub	objptr, ##43516
070b4     60 01 90 5D |  if_ne	jmp	#LR__0642
070b8     21 22 06 F6 | 	mov	local03, #33
070bc     0F 27 02 F6 | 	mov	local05, local01
070c0     10 29 02 F6 | 	mov	local06, local02
070c4     11 2B 02 F6 | 	mov	local07, local03
070c8     6A 00 00 FF 
070cc     6C E4 05 F1 | 	add	objptr, ##54380
070d0     F2 2C 02 FB | 	rdlong	local08, objptr
070d4     16 2F 02 F6 | 	mov	local09, local08
070d8     01 2E 66 F0 | 	shl	local09, #1
070dc     16 2F 02 F1 | 	add	local09, local08
070e0     02 2E 66 F0 | 	shl	local09, #2
070e4     03 00 00 FF 
070e8     00 E4 85 F1 | 	sub	objptr, ##1536
070ec     F2 2E 02 F1 | 	add	local09, objptr
070f0     17 27 62 FC | 	wrlong	local05, local09
070f4     03 00 00 FF 
070f8     00 E4 05 F1 | 	add	objptr, ##1536
070fc     F2 32 02 FB | 	rdlong	local11, objptr
07100     19 31 02 F6 | 	mov	local10, local11
07104     01 30 66 F0 | 	shl	local10, #1
07108     19 31 02 F1 | 	add	local10, local11
0710c     02 30 66 F0 | 	shl	local10, #2
07110     03 00 00 FF 
07114     00 E4 85 F1 | 	sub	objptr, ##1536
07118     F2 30 02 F1 | 	add	local10, objptr
0711c     04 30 06 F1 | 	add	local10, #4
07120     18 29 62 FC | 	wrlong	local06, local10
07124     03 00 00 FF 
07128     00 E4 05 F1 | 	add	objptr, ##1536
0712c     F2 26 02 FB | 	rdlong	local05, objptr
07130     13 33 02 F6 | 	mov	local11, local05
07134     01 32 66 F0 | 	shl	local11, #1
07138     13 33 02 F1 | 	add	local11, local05
0713c     02 32 66 F0 | 	shl	local11, #2
07140     03 00 00 FF 
07144     00 E4 85 F1 | 	sub	objptr, ##1536
07148     F2 32 02 F1 | 	add	local11, objptr
0714c     08 32 06 F1 | 	add	local11, #8
07150     19 2B 62 FC | 	wrlong	local07, local11
07154     03 00 00 FF 
07158     00 E4 05 F1 | 	add	objptr, ##1536
0715c     F2 26 02 FB | 	rdlong	local05, objptr
07160     01 26 06 F1 | 	add	local05, #1
07164     F2 26 62 FC | 	wrlong	local05, objptr
07168     44 22 06 F6 | 	mov	local03, #68
0716c     0F 27 02 F6 | 	mov	local05, local01
07170     10 29 02 F6 | 	mov	local06, local02
07174     11 2B 02 F6 | 	mov	local07, local03
07178     F2 2C 02 FB | 	rdlong	local08, objptr
0717c     16 2F 02 F6 | 	mov	local09, local08
07180     01 2E 66 F0 | 	shl	local09, #1
07184     16 2F 02 F1 | 	add	local09, local08
07188     02 2E 66 F0 | 	shl	local09, #2
0718c     03 00 00 FF 
07190     00 E4 85 F1 | 	sub	objptr, ##1536
07194     F2 2E 02 F1 | 	add	local09, objptr
07198     17 27 62 FC | 	wrlong	local05, local09
0719c     03 00 00 FF 
071a0     00 E4 05 F1 | 	add	objptr, ##1536
071a4     F2 32 02 FB | 	rdlong	local11, objptr
071a8     19 31 02 F6 | 	mov	local10, local11
071ac     01 30 66 F0 | 	shl	local10, #1
071b0     19 31 02 F1 | 	add	local10, local11
071b4     02 30 66 F0 | 	shl	local10, #2
071b8     03 00 00 FF 
071bc     00 E4 85 F1 | 	sub	objptr, ##1536
071c0     F2 30 02 F1 | 	add	local10, objptr
071c4     04 30 06 F1 | 	add	local10, #4
071c8     18 29 62 FC | 	wrlong	local06, local10
071cc     03 00 00 FF 
071d0     00 E4 05 F1 | 	add	objptr, ##1536
071d4     F2 30 02 FB | 	rdlong	local10, objptr
071d8     18 33 02 F6 | 	mov	local11, local10
071dc     01 32 66 F0 | 	shl	local11, #1
071e0     18 33 02 F1 | 	add	local11, local10
071e4     02 32 66 F0 | 	shl	local11, #2
071e8     03 00 00 FF 
071ec     00 E4 85 F1 | 	sub	objptr, ##1536
071f0     F2 32 02 F1 | 	add	local11, objptr
071f4     08 32 06 F1 | 	add	local11, #8
071f8     19 2B 62 FC | 	wrlong	local07, local11
071fc     03 00 00 FF 
07200     00 E4 05 F1 | 	add	objptr, ##1536
07204     F2 26 02 FB | 	rdlong	local05, objptr
07208     01 26 06 F1 | 	add	local05, #1
0720c     F2 26 62 FC | 	wrlong	local05, objptr
07210     6A 00 00 FF 
07214     6C E4 85 F1 | 	sub	objptr, ##54380
07218                 | LR__0642
07218                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07218     57 00 00 FF 
0721c     34 E4 05 F1 | 	add	objptr, ##44596
07220     F2 24 02 FB | 	rdlong	local04, objptr
07224     03 24 66 F0 | 	shl	local04, #3
07228     02 00 00 FF 
0722c     38 E4 85 F1 | 	sub	objptr, ##1080
07230     F2 24 02 F1 | 	add	local04, objptr
07234     04 24 06 F1 | 	add	local04, #4
07238     12 2D 02 FB | 	rdlong	local08, local04
0723c     12 2C 0E F2 | 	cmp	local08, #18 wz
07240     54 00 00 FF 
07244     FC E5 85 F1 | 	sub	objptr, ##43516
07248     60 01 90 5D |  if_ne	jmp	#LR__0643
0724c     22 22 06 F6 | 	mov	local03, #34
07250     0F 27 02 F6 | 	mov	local05, local01
07254     10 29 02 F6 | 	mov	local06, local02
07258     11 2B 02 F6 | 	mov	local07, local03
0725c     6A 00 00 FF 
07260     6C E4 05 F1 | 	add	objptr, ##54380
07264     F2 2C 02 FB | 	rdlong	local08, objptr
07268     16 2F 02 F6 | 	mov	local09, local08
0726c     01 2E 66 F0 | 	shl	local09, #1
07270     16 2F 02 F1 | 	add	local09, local08
07274     02 2E 66 F0 | 	shl	local09, #2
07278     03 00 00 FF 
0727c     00 E4 85 F1 | 	sub	objptr, ##1536
07280     F2 2E 02 F1 | 	add	local09, objptr
07284     17 27 62 FC | 	wrlong	local05, local09
07288     03 00 00 FF 
0728c     00 E4 05 F1 | 	add	objptr, ##1536
07290     F2 32 02 FB | 	rdlong	local11, objptr
07294     19 31 02 F6 | 	mov	local10, local11
07298     01 30 66 F0 | 	shl	local10, #1
0729c     19 31 02 F1 | 	add	local10, local11
072a0     02 30 66 F0 | 	shl	local10, #2
072a4     03 00 00 FF 
072a8     00 E4 85 F1 | 	sub	objptr, ##1536
072ac     F2 30 02 F1 | 	add	local10, objptr
072b0     04 30 06 F1 | 	add	local10, #4
072b4     18 29 62 FC | 	wrlong	local06, local10
072b8     03 00 00 FF 
072bc     00 E4 05 F1 | 	add	objptr, ##1536
072c0     F2 26 02 FB | 	rdlong	local05, objptr
072c4     13 33 02 F6 | 	mov	local11, local05
072c8     01 32 66 F0 | 	shl	local11, #1
072cc     13 33 02 F1 | 	add	local11, local05
072d0     02 32 66 F0 | 	shl	local11, #2
072d4     03 00 00 FF 
072d8     00 E4 85 F1 | 	sub	objptr, ##1536
072dc     F2 32 02 F1 | 	add	local11, objptr
072e0     08 32 06 F1 | 	add	local11, #8
072e4     19 2B 62 FC | 	wrlong	local07, local11
072e8     03 00 00 FF 
072ec     00 E4 05 F1 | 	add	objptr, ##1536
072f0     F2 26 02 FB | 	rdlong	local05, objptr
072f4     01 26 06 F1 | 	add	local05, #1
072f8     F2 26 62 FC | 	wrlong	local05, objptr
072fc     44 22 06 F6 | 	mov	local03, #68
07300     0F 27 02 F6 | 	mov	local05, local01
07304     10 29 02 F6 | 	mov	local06, local02
07308     11 2B 02 F6 | 	mov	local07, local03
0730c     F2 2C 02 FB | 	rdlong	local08, objptr
07310     16 2F 02 F6 | 	mov	local09, local08
07314     01 2E 66 F0 | 	shl	local09, #1
07318     16 2F 02 F1 | 	add	local09, local08
0731c     02 2E 66 F0 | 	shl	local09, #2
07320     03 00 00 FF 
07324     00 E4 85 F1 | 	sub	objptr, ##1536
07328     F2 2E 02 F1 | 	add	local09, objptr
0732c     17 27 62 FC | 	wrlong	local05, local09
07330     03 00 00 FF 
07334     00 E4 05 F1 | 	add	objptr, ##1536
07338     F2 32 02 FB | 	rdlong	local11, objptr
0733c     19 31 02 F6 | 	mov	local10, local11
07340     01 30 66 F0 | 	shl	local10, #1
07344     19 31 02 F1 | 	add	local10, local11
07348     02 30 66 F0 | 	shl	local10, #2
0734c     03 00 00 FF 
07350     00 E4 85 F1 | 	sub	objptr, ##1536
07354     F2 30 02 F1 | 	add	local10, objptr
07358     04 30 06 F1 | 	add	local10, #4
0735c     18 29 62 FC | 	wrlong	local06, local10
07360     03 00 00 FF 
07364     00 E4 05 F1 | 	add	objptr, ##1536
07368     F2 30 02 FB | 	rdlong	local10, objptr
0736c     18 33 02 F6 | 	mov	local11, local10
07370     01 32 66 F0 | 	shl	local11, #1
07374     18 33 02 F1 | 	add	local11, local10
07378     02 32 66 F0 | 	shl	local11, #2
0737c     03 00 00 FF 
07380     00 E4 85 F1 | 	sub	objptr, ##1536
07384     F2 32 02 F1 | 	add	local11, objptr
07388     08 32 06 F1 | 	add	local11, #8
0738c     19 2B 62 FC | 	wrlong	local07, local11
07390     03 00 00 FF 
07394     00 E4 05 F1 | 	add	objptr, ##1536
07398     F2 26 02 FB | 	rdlong	local05, objptr
0739c     01 26 06 F1 | 	add	local05, #1
073a0     F2 26 62 FC | 	wrlong	local05, objptr
073a4     6A 00 00 FF 
073a8     6C E4 85 F1 | 	sub	objptr, ##54380
073ac                 | LR__0643
073ac                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
073ac     57 00 00 FF 
073b0     34 E4 05 F1 | 	add	objptr, ##44596
073b4     F2 24 02 FB | 	rdlong	local04, objptr
073b8     03 24 66 F0 | 	shl	local04, #3
073bc     02 00 00 FF 
073c0     38 E4 85 F1 | 	sub	objptr, ##1080
073c4     F2 24 02 F1 | 	add	local04, objptr
073c8     04 24 06 F1 | 	add	local04, #4
073cc     12 2D 02 FB | 	rdlong	local08, local04
073d0     FE 2D 0E F2 | 	cmp	local08, #510 wz
073d4     54 00 00 FF 
073d8     FC E5 85 F1 | 	sub	objptr, ##43516
073dc     B8 00 90 5D |  if_ne	jmp	#LR__0644
073e0     44 22 06 F6 | 	mov	local03, #68
073e4     0F 27 02 F6 | 	mov	local05, local01
073e8     10 29 02 F6 | 	mov	local06, local02
073ec     11 2B 02 F6 | 	mov	local07, local03
073f0     6A 00 00 FF 
073f4     6C E4 05 F1 | 	add	objptr, ##54380
073f8     F2 2C 02 FB | 	rdlong	local08, objptr
073fc     16 2F 02 F6 | 	mov	local09, local08
07400     01 2E 66 F0 | 	shl	local09, #1
07404     16 2F 02 F1 | 	add	local09, local08
07408     02 2E 66 F0 | 	shl	local09, #2
0740c     03 00 00 FF 
07410     00 E4 85 F1 | 	sub	objptr, ##1536
07414     F2 2E 02 F1 | 	add	local09, objptr
07418     17 27 62 FC | 	wrlong	local05, local09
0741c     03 00 00 FF 
07420     00 E4 05 F1 | 	add	objptr, ##1536
07424     F2 32 02 FB | 	rdlong	local11, objptr
07428     19 31 02 F6 | 	mov	local10, local11
0742c     01 30 66 F0 | 	shl	local10, #1
07430     19 31 02 F1 | 	add	local10, local11
07434     02 30 66 F0 | 	shl	local10, #2
07438     03 00 00 FF 
0743c     00 E4 85 F1 | 	sub	objptr, ##1536
07440     F2 30 02 F1 | 	add	local10, objptr
07444     04 30 06 F1 | 	add	local10, #4
07448     18 29 62 FC | 	wrlong	local06, local10
0744c     03 00 00 FF 
07450     00 E4 05 F1 | 	add	objptr, ##1536
07454     F2 30 02 FB | 	rdlong	local10, objptr
07458     18 33 02 F6 | 	mov	local11, local10
0745c     01 32 66 F0 | 	shl	local11, #1
07460     18 33 02 F1 | 	add	local11, local10
07464     02 32 66 F0 | 	shl	local11, #2
07468     03 00 00 FF 
0746c     00 E4 85 F1 | 	sub	objptr, ##1536
07470     F2 32 02 F1 | 	add	local11, objptr
07474     08 32 06 F1 | 	add	local11, #8
07478     19 2B 62 FC | 	wrlong	local07, local11
0747c     03 00 00 FF 
07480     00 E4 05 F1 | 	add	objptr, ##1536
07484     F2 26 02 FB | 	rdlong	local05, objptr
07488     01 26 06 F1 | 	add	local05, #1
0748c     F2 26 62 FC | 	wrlong	local05, objptr
07490     6A 00 00 FF 
07494     6C E4 85 F1 | 	sub	objptr, ##54380
07498                 | LR__0644
07498                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
07498     57 00 00 FF 
0749c     34 E4 05 F1 | 	add	objptr, ##44596
074a0     F2 24 02 FB | 	rdlong	local04, objptr
074a4     03 24 66 F0 | 	shl	local04, #3
074a8     02 00 00 FF 
074ac     38 E4 85 F1 | 	sub	objptr, ##1080
074b0     F2 24 02 F1 | 	add	local04, objptr
074b4     04 24 06 F1 | 	add	local04, #4
074b8     12 2D 02 FB | 	rdlong	local08, local04
074bc     11 2C 0E F2 | 	cmp	local08, #17 wz
074c0     54 00 00 FF 
074c4     FC E5 85 F1 | 	sub	objptr, ##43516
074c8     6C 00 90 AD |  if_e	jmp	#LR__0645
074cc     57 00 00 FF 
074d0     34 E4 05 F1 | 	add	objptr, ##44596
074d4     F2 2C 02 FB | 	rdlong	local08, objptr
074d8     03 2C 66 F0 | 	shl	local08, #3
074dc     02 00 00 FF 
074e0     38 E4 85 F1 | 	sub	objptr, ##1080
074e4     F2 2C 02 F1 | 	add	local08, objptr
074e8     04 2C 06 F1 | 	add	local08, #4
074ec     16 2D 02 FB | 	rdlong	local08, local08
074f0     12 2C 0E F2 | 	cmp	local08, #18 wz
074f4     54 00 00 FF 
074f8     FC E5 85 F1 | 	sub	objptr, ##43516
074fc     38 00 90 AD |  if_e	jmp	#LR__0645
07500     57 00 00 FF 
07504     34 E4 05 F1 | 	add	objptr, ##44596
07508     F2 32 02 FB | 	rdlong	local11, objptr
0750c     03 32 66 F0 | 	shl	local11, #3
07510     02 00 00 FF 
07514     38 E4 85 F1 | 	sub	objptr, ##1080
07518     F2 32 02 F1 | 	add	local11, objptr
0751c     04 32 06 F1 | 	add	local11, #4
07520     19 33 02 FB | 	rdlong	local11, local11
07524     FE 33 0E F2 | 	cmp	local11, #510 wz
07528     54 00 00 FF 
0752c     FC E5 85 F1 | 	sub	objptr, ##43516
07530     16 FA 05 56 |  if_ne	mov	result1, #22
07534     68 00 90 5D |  if_ne	jmp	#LR__0647
07538                 | LR__0645
07538     57 00 00 FF 
0753c     34 E4 05 F1 | 	add	objptr, ##44596
07540     F2 24 02 FB | 	rdlong	local04, objptr
07544     01 24 06 F1 | 	add	local04, #1
07548     F2 24 62 FC | 	wrlong	local04, objptr
0754c     03 24 66 F0 | 	shl	local04, #3
07550     02 00 00 FF 
07554     38 E4 85 F1 | 	sub	objptr, ##1080
07558     F2 24 02 F1 | 	add	local04, objptr
0755c     04 24 06 F1 | 	add	local04, #4
07560     12 2D 02 FB | 	rdlong	local08, local04
07564     FE 2D 0E F2 | 	cmp	local08, #510 wz
07568     54 00 00 FF 
0756c     FC E5 85 F1 | 	sub	objptr, ##43516
07570     28 00 90 AD |  if_e	jmp	#LR__0646
07574     57 00 00 FF 
07578     34 E4 05 F1 | 	add	objptr, ##44596
0757c     F2 32 02 FB | 	rdlong	local11, objptr
07580     0E 00 00 FF 
07584     1C E4 05 F1 | 	add	objptr, ##7196
07588     F2 30 02 FB | 	rdlong	local10, objptr
0758c     65 00 00 FF 
07590     50 E4 85 F1 | 	sub	objptr, ##51792
07594     18 33 52 F2 | 	cmps	local11, local10 wc
07598     E4 FA 9F CD |  if_b	jmp	#LR__0641
0759c                 | LR__0646
0759c                 | ' return 0
0759c     00 FA 05 F6 | 	mov	result1, #0
075a0                 | LR__0647
075a0     A7 F0 03 F6 | 	mov	ptra, fp
075a4     B2 00 A0 FD | 	call	#popregs_
075a8                 | _compile_print_ret
075a8     2D 00 64 FD | 	ret
075ac                 | 
075ac                 | ' 
075ac                 | ' function compile_if() as ulong  
075ac                 | _compile_if
075ac     05 4A 05 F6 | 	mov	COUNT_, #5
075b0     A8 00 A0 FD | 	call	#pushregs_
075b4                 | _compile_if_enter
075b4     6C 17 B0 FD | 	call	#_expr
075b8                 | ' expr()
075b8                 | ' return 0
075b8     57 00 00 FF 
075bc     34 E4 05 F1 | 	add	objptr, ##44596
075c0     F2 FA 01 FB | 	rdlong	result1, objptr
075c4     01 FA 05 F1 | 	add	result1, #1
075c8     F2 FA 61 FC | 	wrlong	result1, objptr
075cc     58 22 06 F6 | 	mov	local03, #88
075d0     0F 25 02 F6 | 	mov	local04, local01
075d4     10 27 02 F6 | 	mov	local05, local02
075d8     11 1F 02 F6 | 	mov	local01, local03
075dc     13 00 00 FF 
075e0     38 E4 05 F1 | 	add	objptr, ##9784
075e4     F2 12 02 FB | 	rdlong	arg01, objptr
075e8     09 FB 01 F6 | 	mov	result1, arg01
075ec     01 FA 65 F0 | 	shl	result1, #1
075f0     09 FB 01 F1 | 	add	result1, arg01
075f4     02 FA 65 F0 | 	shl	result1, #2
075f8     03 00 00 FF 
075fc     00 E4 85 F1 | 	sub	objptr, ##1536
07600     F2 FA 01 F1 | 	add	result1, objptr
07604     FD 24 62 FC | 	wrlong	local04, result1
07608     03 00 00 FF 
0760c     00 E4 05 F1 | 	add	objptr, ##1536
07610     F2 12 02 FB | 	rdlong	arg01, objptr
07614     09 25 02 F6 | 	mov	local04, arg01
07618     01 24 66 F0 | 	shl	local04, #1
0761c     09 25 02 F1 | 	add	local04, arg01
07620     02 24 66 F0 | 	shl	local04, #2
07624     03 00 00 FF 
07628     00 E4 85 F1 | 	sub	objptr, ##1536
0762c     F2 24 02 F1 | 	add	local04, objptr
07630     04 24 06 F1 | 	add	local04, #4
07634     12 27 62 FC | 	wrlong	local05, local04
07638     03 00 00 FF 
0763c     00 E4 05 F1 | 	add	objptr, ##1536
07640     F2 24 02 FB | 	rdlong	local04, objptr
07644     12 27 02 F6 | 	mov	local05, local04
07648     01 26 66 F0 | 	shl	local05, #1
0764c     12 27 02 F1 | 	add	local05, local04
07650     02 26 66 F0 | 	shl	local05, #2
07654     03 00 00 FF 
07658     00 E4 85 F1 | 	sub	objptr, ##1536
0765c     F2 26 02 F1 | 	add	local05, objptr
07660     08 26 06 F1 | 	add	local05, #8
07664     13 1F 62 FC | 	wrlong	local01, local05
07668     03 00 00 FF 
0766c     00 E4 05 F1 | 	add	objptr, ##1536
07670     F2 24 02 FB | 	rdlong	local04, objptr
07674     01 24 06 F1 | 	add	local04, #1
07678     F2 24 62 FC | 	wrlong	local04, objptr
0767c                 | ' 
0767c                 | ' 'print "In compile_if"
0767c                 | ' compile_fun_1p()
0767c                 | ' cmd=lparts(ct).token : ct+=1
0767c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
0767c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
0767c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
0767c     13 00 00 FF 
07680     38 E4 85 F1 | 	sub	objptr, ##9784
07684     F2 26 02 FB | 	rdlong	local05, objptr
07688     01 26 06 F1 | 	add	local05, #1
0768c     03 26 66 F0 | 	shl	local05, #3
07690     02 00 00 FF 
07694     38 E4 85 F1 | 	sub	objptr, ##1080
07698     F2 26 02 F1 | 	add	local05, objptr
0769c     13 13 02 FB | 	rdlong	arg01, local05
076a0     54 00 00 FF 
076a4     FC E5 85 F1 | 	sub	objptr, ##43516
076a8                 | ' 
076a8                 | ' select case s
076a8     65 01 00 FF 
076ac     FC 15 06 F6 | 	mov	arg02, ##@LR__4752
076b0     C0 5D B1 FD | 	call	#__system___string_cmp
076b4     00 FA 0D F2 | 	cmp	result1, #0 wz
076b8     1B FA 05 A6 |  if_e	mov	result1, #27
076bc     00 FA 05 56 |  if_ne	mov	result1, #0
076c0     00 FA 0D F2 | 	cmp	result1, #0 wz
076c4     0C 00 90 AD |  if_e	jmp	#LR__0650
076c8     05 12 06 F6 | 	mov	arg01, #5
076cc     88 ED BF FD | 	call	#_compile_immediate_assign
076d0     08 00 90 FD | 	jmp	#LR__0651
076d4                 | LR__0650
076d4     05 12 06 F6 | 	mov	arg01, #5
076d8     A8 E3 BF FD | 	call	#_compile_immediate
076dc                 | LR__0651
076dc                 | ' 
076dc                 | ' 
076dc                 | ' return 0
076dc     00 FA 05 F6 | 	mov	result1, #0
076e0     A7 F0 03 F6 | 	mov	ptra, fp
076e4     B2 00 A0 FD | 	call	#popregs_
076e8                 | _compile_if_ret
076e8     2D 00 64 FD | 	ret
076ec                 | 
076ec                 | ' 
076ec                 | ' function compile_else() as ulong  
076ec                 | _compile_else
076ec     05 4A 05 F6 | 	mov	COUNT_, #5
076f0     A8 00 A0 FD | 	call	#pushregs_
076f4                 | _compile_else_enter
076f4     5A 22 06 F6 | 	mov	local03, #90
076f8     0F 25 02 F6 | 	mov	local04, local01
076fc     10 27 02 F6 | 	mov	local05, local02
07700     11 1F 02 F6 | 	mov	local01, local03
07704     6A 00 00 FF 
07708     6C E4 05 F1 | 	add	objptr, ##54380
0770c     F2 12 02 FB | 	rdlong	arg01, objptr
07710     09 FB 01 F6 | 	mov	result1, arg01
07714     01 FA 65 F0 | 	shl	result1, #1
07718     09 FB 01 F1 | 	add	result1, arg01
0771c     02 FA 65 F0 | 	shl	result1, #2
07720     03 00 00 FF 
07724     00 E4 85 F1 | 	sub	objptr, ##1536
07728     F2 FA 01 F1 | 	add	result1, objptr
0772c     FD 24 62 FC | 	wrlong	local04, result1
07730     03 00 00 FF 
07734     00 E4 05 F1 | 	add	objptr, ##1536
07738     F2 FA 01 FB | 	rdlong	result1, objptr
0773c     FD 24 02 F6 | 	mov	local04, result1
07740     01 24 66 F0 | 	shl	local04, #1
07744     FD 24 02 F1 | 	add	local04, result1
07748     02 24 66 F0 | 	shl	local04, #2
0774c     03 00 00 FF 
07750     00 E4 85 F1 | 	sub	objptr, ##1536
07754     F2 24 02 F1 | 	add	local04, objptr
07758     04 24 06 F1 | 	add	local04, #4
0775c     12 27 62 FC | 	wrlong	local05, local04
07760     03 00 00 FF 
07764     00 E4 05 F1 | 	add	objptr, ##1536
07768     F2 24 02 FB | 	rdlong	local04, objptr
0776c     12 27 02 F6 | 	mov	local05, local04
07770     01 26 66 F0 | 	shl	local05, #1
07774     12 27 02 F1 | 	add	local05, local04
07778     02 26 66 F0 | 	shl	local05, #2
0777c     03 00 00 FF 
07780     00 E4 85 F1 | 	sub	objptr, ##1536
07784     F2 26 02 F1 | 	add	local05, objptr
07788     08 26 06 F1 | 	add	local05, #8
0778c     13 1F 62 FC | 	wrlong	local01, local05
07790     03 00 00 FF 
07794     00 E4 05 F1 | 	add	objptr, ##1536
07798     F2 24 02 FB | 	rdlong	local04, objptr
0779c     01 24 06 F1 | 	add	local04, #1
077a0     F2 24 62 FC | 	wrlong	local04, objptr
077a4                 | ' 
077a4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
077a4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
077a4     13 00 00 FF 
077a8     38 E4 85 F1 | 	sub	objptr, ##9784
077ac     F2 26 02 FB | 	rdlong	local05, objptr
077b0     01 26 06 F1 | 	add	local05, #1
077b4     03 26 66 F0 | 	shl	local05, #3
077b8     02 00 00 FF 
077bc     38 E4 85 F1 | 	sub	objptr, ##1080
077c0     F2 26 02 F1 | 	add	local05, objptr
077c4     13 13 02 FB | 	rdlong	arg01, local05
077c8     54 00 00 FF 
077cc     FC E5 85 F1 | 	sub	objptr, ##43516
077d0                 | ' 
077d0                 | ' select case s
077d0     65 01 00 FF 
077d4     FC 15 06 F6 | 	mov	arg02, ##@LR__4752
077d8     98 5C B1 FD | 	call	#__system___string_cmp
077dc     00 FA 0D F2 | 	cmp	result1, #0 wz
077e0     1B FA 05 A6 |  if_e	mov	result1, #27
077e4     00 FA 05 56 |  if_ne	mov	result1, #0
077e8     00 FA 0D F2 | 	cmp	result1, #0 wz
077ec     0C 00 90 AD |  if_e	jmp	#LR__0660
077f0     05 12 06 F6 | 	mov	arg01, #5
077f4     60 EC BF FD | 	call	#_compile_immediate_assign
077f8     08 00 90 FD | 	jmp	#LR__0661
077fc                 | LR__0660
077fc     05 12 06 F6 | 	mov	arg01, #5
07800     80 E2 BF FD | 	call	#_compile_immediate
07804                 | LR__0661
07804                 | ' 
07804                 | ' 
07804                 | ' return 0
07804     00 FA 05 F6 | 	mov	result1, #0
07808     A7 F0 03 F6 | 	mov	ptra, fp
0780c     B2 00 A0 FD | 	call	#popregs_
07810                 | _compile_else_ret
07810     2D 00 64 FD | 	ret
07814                 | 
07814                 | ' 
07814                 | ' 
07814                 | ' function compile_dim() as ulong  
07814                 | _compile_dim
07814     11 4A 05 F6 | 	mov	COUNT_, #17
07818     A8 00 A0 FD | 	call	#pushregs_
0781c     01 1E 06 F6 | 	mov	local01, #1
07820     01 20 06 F6 | 	mov	local02, #1
07824     01 22 06 F6 | 	mov	local03, #1
07828                 | ' 
07828                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07828                 | ' 
07828                 | ' if isname(lparts(ct).part$) then 
07828     57 00 00 FF 
0782c     34 E4 05 F1 | 	add	objptr, ##44596
07830     F2 18 02 FB | 	rdlong	arg04, objptr
07834     03 18 66 F0 | 	shl	arg04, #3
07838     02 00 00 FF 
0783c     38 E4 85 F1 | 	sub	objptr, ##1080
07840     F2 18 02 F1 | 	add	arg04, objptr
07844     0C 13 02 FB | 	rdlong	arg01, arg04
07848     54 00 00 FF 
0784c     FC E5 85 F1 | 	sub	objptr, ##43516
07850     E4 D2 BF FD | 	call	#_isname
07854     00 FA 0D F2 | 	cmp	result1, #0 wz
07858     AC 05 90 AD |  if_e	jmp	#LR__0694
0785c     57 00 00 FF 
07860     34 E4 05 F1 | 	add	objptr, ##44596
07864     F2 24 02 FB | 	rdlong	local04, objptr
07868     03 24 66 F0 | 	shl	local04, #3
0786c     02 00 00 FF 
07870     38 E4 85 F1 | 	sub	objptr, ##1080
07874     F2 24 02 F1 | 	add	local04, objptr
07878     12 27 02 FB | 	rdlong	local05, local04
0787c     01 28 66 F6 | 	neg	local06, #1
07880                 | '   varname2$=lparts(ct).part$ 
07880                 | '   j=-1
07880                 | '   if varnum>0 then
07880     04 E4 85 F1 | 	sub	objptr, #4
07884     F2 2A 02 FB | 	rdlong	local07, objptr
07888     54 00 00 FF 
0788c     F8 E5 85 F1 | 	sub	objptr, ##43512
07890     01 2A 56 F2 | 	cmps	local07, #1 wc
07894     58 00 90 CD |  if_b	jmp	#LR__0672
07898                 | '  '   print "in dim, varnum=";varnum
07898                 | '     for i=0 to varnum-1
07898     00 2C 06 F6 | 	mov	local08, #0
0789c     54 00 00 FF 
078a0     F8 E5 05 F1 | 	add	objptr, ##43512
078a4     F2 2E 02 FB | 	rdlong	local09, objptr
078a8     54 00 00 FF 
078ac     F8 E5 85 F1 | 	sub	objptr, ##43512
078b0                 | LR__0670
078b0     17 2D 52 F2 | 	cmps	local08, local09 wc
078b4     38 00 90 3D |  if_ae	jmp	#LR__0671
078b8                 | '       if variables(i).name=varname2$ then j=i : exit
078b8     16 25 02 F6 | 	mov	local04, local08
078bc     04 24 66 F0 | 	shl	local04, #4
078c0     34 00 00 FF 
078c4     F8 E5 05 F1 | 	add	objptr, ##27128
078c8     F2 24 02 F1 | 	add	local04, objptr
078cc     12 13 02 FB | 	rdlong	arg01, local04
078d0     13 15 02 F6 | 	mov	arg02, local05
078d4     34 00 00 FF 
078d8     F8 E5 85 F1 | 	sub	objptr, ##27128
078dc     94 5B B1 FD | 	call	#__system___string_cmp
078e0     00 FA 0D F2 | 	cmp	result1, #0 wz
078e4     16 29 02 A6 |  if_e	mov	local06, local08
078e8     01 2C 06 51 |  if_ne	add	local08, #1
078ec     C0 FF 9F 5D |  if_ne	jmp	#LR__0670
078f0                 | LR__0671
078f0                 | LR__0672
078f0                 | ' '  if j<>-1 then printerror (42) : return 42
078f0                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
078f0     FF FF 7F FF 
078f4     FF 29 0E F2 | 	cmp	local06, ##-1 wz
078f8     54 00 00 AF 
078fc     F8 E5 05 A1 |  if_e	add	objptr, ##43512
07900     F2 28 02 AB |  if_e	rdlong	local06, objptr
07904     54 00 00 AF 
07908     F8 E5 85 A1 |  if_e	sub	objptr, ##43512
0790c     78 00 90 AD |  if_e	jmp	#LR__0673
07910     00 12 06 F6 | 	mov	arg01, #0
07914     C4 B4 B1 FD | 	call	#__system___getiolock_0473
07918     FD 12 02 F6 | 	mov	arg01, result1
0791c     2C 5B B1 FD | 	call	#__system___lockmem
07920     67 01 00 FF 
07924     0A 15 06 F6 | 	mov	arg02, ##@LR__4924
07928     00 12 06 F6 | 	mov	arg01, #0
0792c     00 16 06 F6 | 	mov	arg03, #0
07930     1C 68 B1 FD | 	call	#__system___basic_print_string
07934     7B 00 00 FF 
07938     80 E4 05 F1 | 	add	objptr, ##63104
0793c     F2 14 02 FB | 	rdlong	arg02, objptr
07940     7B 00 00 FF 
07944     80 E4 85 F1 | 	sub	objptr, ##63104
07948     00 12 06 F6 | 	mov	arg01, #0
0794c     00 16 06 F6 | 	mov	arg03, #0
07950     0A 18 06 F6 | 	mov	arg04, #10
07954     7C 68 B1 FD | 	call	#__system___basic_print_unsigned
07958     67 01 00 FF 
0795c     18 15 06 F6 | 	mov	arg02, ##@LR__4925
07960     00 12 06 F6 | 	mov	arg01, #0
07964     00 16 06 F6 | 	mov	arg03, #0
07968     E4 67 B1 FD | 	call	#__system___basic_print_string
0796c     00 12 06 F6 | 	mov	arg01, #0
07970     0A 14 06 F6 | 	mov	arg02, #10
07974     00 16 06 F6 | 	mov	arg03, #0
07978     7C 67 B1 FD | 	call	#__system___basic_print_char
0797c     00 12 06 F6 | 	mov	arg01, #0
07980     58 B4 B1 FD | 	call	#__system___getiolock_0473
07984     FD 00 68 FC | 	wrlong	#0, result1
07988                 | LR__0673
07988                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07988     57 00 00 FF 
0798c     34 E4 05 F1 | 	add	objptr, ##44596
07990     F2 18 02 FB | 	rdlong	arg04, objptr
07994     01 18 06 F1 | 	add	arg04, #1
07998     03 18 66 F0 | 	shl	arg04, #3
0799c     02 00 00 FF 
079a0     38 E4 85 F1 | 	sub	objptr, ##1080
079a4     F2 18 02 F1 | 	add	arg04, objptr
079a8     0C 13 02 FB | 	rdlong	arg01, arg04
079ac     67 01 00 FF 
079b0     39 15 06 F6 | 	mov	arg02, ##@LR__4926
079b4     54 00 00 FF 
079b8     FC E5 85 F1 | 	sub	objptr, ##43516
079bc     B4 5A B1 FD | 	call	#__system___string_cmp
079c0     00 FA 0D F2 | 	cmp	result1, #0 wz
079c4     50 00 90 AD |  if_e	jmp	#LR__0674
079c8     57 00 00 FF 
079cc     34 E4 05 F1 | 	add	objptr, ##44596
079d0     F2 2E 02 FB | 	rdlong	local09, objptr
079d4     01 2E 06 F1 | 	add	local09, #1
079d8     03 2E 66 F0 | 	shl	local09, #3
079dc     02 00 00 FF 
079e0     38 E4 85 F1 | 	sub	objptr, ##1080
079e4     F2 2E 02 F1 | 	add	local09, objptr
079e8     17 13 02 FB | 	rdlong	arg01, local09
079ec     67 01 00 FF 
079f0     3B 15 06 F6 | 	mov	arg02, ##@LR__4927
079f4     54 00 00 FF 
079f8     FC E5 85 F1 | 	sub	objptr, ##43516
079fc     74 5A B1 FD | 	call	#__system___string_cmp
07a00     00 FA 0D F2 | 	cmp	result1, #0 wz
07a04     10 00 90 AD |  if_e	jmp	#LR__0674
07a08     2B 12 06 F6 | 	mov	arg01, #43
07a0c     FC 15 B1 FD | 	call	#_printerror
07a10     2B FA 05 F6 | 	mov	result1, #43
07a14     00 05 90 FD | 	jmp	#LR__0696
07a18                 | LR__0674
07a18                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07a18     57 00 00 FF 
07a1c     34 E4 05 F1 | 	add	objptr, ##44596
07a20     F2 14 02 FB | 	rdlong	arg02, objptr
07a24     01 14 06 F1 | 	add	arg02, #1
07a28     03 14 66 F0 | 	shl	arg02, #3
07a2c     02 00 00 FF 
07a30     38 E4 85 F1 | 	sub	objptr, ##1080
07a34     F2 14 02 F1 | 	add	arg02, objptr
07a38     0A 13 02 FB | 	rdlong	arg01, arg02
07a3c     67 01 00 FF 
07a40     3E 15 06 F6 | 	mov	arg02, ##@LR__4928
07a44     54 00 00 FF 
07a48     FC E5 85 F1 | 	sub	objptr, ##43516
07a4c     24 5A B1 FD | 	call	#__system___string_cmp
07a50     00 FA 0D F2 | 	cmp	result1, #0 wz
07a54     57 00 00 AF 
07a58     34 E4 05 A1 |  if_e	add	objptr, ##44596
07a5c     F2 30 02 AB |  if_e	rdlong	local10, objptr
07a60     57 00 00 AF 
07a64     34 E4 85 A1 |  if_e	sub	objptr, ##44596
07a68     01 30 06 A1 |  if_e	add	local10, #1
07a6c     7C 01 90 AD |  if_e	jmp	#LR__0680
07a70     57 00 00 FF 
07a74     34 E4 05 F1 | 	add	objptr, ##44596
07a78     F2 30 02 FB | 	rdlong	local10, objptr
07a7c     57 00 00 FF 
07a80     34 E4 85 F1 | 	sub	objptr, ##44596
07a84     02 30 06 F1 | 	add	local10, #2
07a88     00 32 06 F6 | 	mov	local11, #0
07a8c                 | '   l=ct+2 : m=0 : do
07a8c                 | LR__0675
07a8c                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07a8c                 | '     if isdec(lparts(l).part$) then 
07a8c     18 25 02 F6 | 	mov	local04, local10
07a90     03 24 66 F0 | 	shl	local04, #3
07a94     54 00 00 FF 
07a98     FC E5 05 F1 | 	add	objptr, ##43516
07a9c     F2 24 02 F1 | 	add	local04, objptr
07aa0     12 13 02 FB | 	rdlong	arg01, local04
07aa4     54 00 00 FF 
07aa8     FC E5 85 F1 | 	sub	objptr, ##43516
07aac     2C D7 BF FD | 	call	#_isdec
07ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ab4     44 00 90 AD |  if_e	jmp	#LR__0676
07ab8     19 35 02 F6 | 	mov	local12, local11
07abc     0F 35 06 F1 | 	add	local12, #local01
07ac0     18 2F 02 F6 | 	mov	local09, local10
07ac4     03 2E 66 F0 | 	shl	local09, #3
07ac8     54 00 00 FF 
07acc     FC E5 05 F1 | 	add	objptr, ##43516
07ad0     F2 2E 02 F1 | 	add	local09, objptr
07ad4     17 13 02 FB | 	rdlong	arg01, local09
07ad8     00 14 06 F6 | 	mov	arg02, #0
07adc     54 00 00 FF 
07ae0     FC E5 85 F1 | 	sub	objptr, ##43516
07ae4     58 8B B1 FD | 	call	#__system____builtin_atoi
07ae8     FD 36 02 F6 | 	mov	local13, result1
07aec                 | 	'.live	local13
07aec                 | 	'.live	local12
07aec     00 34 8E F9 | 	altd	local12, #0
07af0     1B 35 02 F6 | 	mov	local12, local13
07af4     01 32 06 F1 | 	add	local11, #1
07af8     10 00 90 FD | 	jmp	#LR__0677
07afc                 | LR__0676
07afc     11 12 06 F6 | 	mov	arg01, #17
07b00     08 15 B1 FD | 	call	#_printerror
07b04                 | '       printerror (17)  : return(17)
07b04     11 FA 05 F6 | 	mov	result1, #17
07b08     0C 04 90 FD | 	jmp	#LR__0696
07b0c                 | LR__0677
07b0c                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07b0c     18 25 02 F6 | 	mov	local04, local10
07b10     01 24 06 F1 | 	add	local04, #1
07b14     03 24 66 F0 | 	shl	local04, #3
07b18     54 00 00 FF 
07b1c     FC E5 05 F1 | 	add	objptr, ##43516
07b20     F2 24 02 F1 | 	add	local04, objptr
07b24     12 13 02 FB | 	rdlong	arg01, local04
07b28     67 01 00 FF 
07b2c     41 15 06 F6 | 	mov	arg02, ##@LR__4929
07b30     54 00 00 FF 
07b34     FC E5 85 F1 | 	sub	objptr, ##43516
07b38     38 59 B1 FD | 	call	#__system___string_cmp
07b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
07b40     48 00 90 AD |  if_e	jmp	#LR__0678
07b44     18 37 02 F6 | 	mov	local13, local10
07b48     01 36 06 F1 | 	add	local13, #1
07b4c     03 36 66 F0 | 	shl	local13, #3
07b50     54 00 00 FF 
07b54     FC E5 05 F1 | 	add	objptr, ##43516
07b58     F2 36 02 F1 | 	add	local13, objptr
07b5c     1B 13 02 FB | 	rdlong	arg01, local13
07b60     67 01 00 FF 
07b64     43 15 06 F6 | 	mov	arg02, ##@LR__4930
07b68     54 00 00 FF 
07b6c     FC E5 85 F1 | 	sub	objptr, ##43516
07b70     00 59 B1 FD | 	call	#__system___string_cmp
07b74     00 FA 0D F2 | 	cmp	result1, #0 wz
07b78     10 00 90 AD |  if_e	jmp	#LR__0678
07b7c     2C 12 06 F6 | 	mov	arg01, #44
07b80     88 14 B1 FD | 	call	#_printerror
07b84     2C FA 05 F6 | 	mov	result1, #44
07b88     8C 03 90 FD | 	jmp	#LR__0696
07b8c                 | LR__0678
07b8c     02 30 06 F1 | 	add	local10, #2
07b90     18 25 02 F6 | 	mov	local04, local10
07b94     01 24 86 F1 | 	sub	local04, #1
07b98     03 24 66 F0 | 	shl	local04, #3
07b9c     54 00 00 FF 
07ba0     FC E5 05 F1 | 	add	objptr, ##43516
07ba4     F2 24 02 F1 | 	add	local04, objptr
07ba8     12 13 02 FB | 	rdlong	arg01, local04
07bac     67 01 00 FF 
07bb0     45 15 06 F6 | 	mov	arg02, ##@LR__4931
07bb4     54 00 00 FF 
07bb8     FC E5 85 F1 | 	sub	objptr, ##43516
07bbc     B4 58 B1 FD | 	call	#__system___string_cmp
07bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
07bc4     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07bc8     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0675
07bcc                 | '   if m>3 then printerror(45): return(45)
07bcc     04 32 56 F2 | 	cmps	local11, #4 wc
07bd0     10 00 90 CD |  if_b	jmp	#LR__0679
07bd4     2D 12 06 F6 | 	mov	arg01, #45
07bd8     30 14 B1 FD | 	call	#_printerror
07bdc     2D FA 05 F6 | 	mov	result1, #45
07be0     34 03 90 FD | 	jmp	#LR__0696
07be4                 | LR__0679
07be4     00 39 06 F6 | 	mov	local14, #256
07be8     0C 3A 06 F6 | 	mov	local15, #12
07bec                 | LR__0680
07bec                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07bec                 | '   arraytype=array_no_type : esize=12
07bec                 | ' 1350 
07bec                 | '   if lparts(l).part$="as" then
07bec     18 25 02 F6 | 	mov	local04, local10
07bf0     03 24 66 F0 | 	shl	local04, #3
07bf4     54 00 00 FF 
07bf8     FC E5 05 F1 | 	add	objptr, ##43516
07bfc     F2 24 02 F1 | 	add	local04, objptr
07c00     12 13 02 FB | 	rdlong	arg01, local04
07c04     67 01 00 FF 
07c08     47 15 06 F6 | 	mov	arg02, ##@LR__4932
07c0c     54 00 00 FF 
07c10     FC E5 85 F1 | 	sub	objptr, ##43516
07c14     5C 58 B1 FD | 	call	#__system___string_cmp
07c18     00 FA 0D F2 | 	cmp	result1, #0 wz
07c1c     F8 01 90 5D |  if_ne	jmp	#LR__0695
07c20                 | '     select case lparts(l+1).part$
07c20     18 35 02 F6 | 	mov	local12, local10
07c24     01 34 06 F1 | 	add	local12, #1
07c28     03 34 66 F0 | 	shl	local12, #3
07c2c     54 00 00 FF 
07c30     FC E5 05 F1 | 	add	objptr, ##43516
07c34     F2 34 02 F1 | 	add	local12, objptr
07c38     1A 3D 02 FB | 	rdlong	local16, local12
07c3c     67 01 00 FF 
07c40     4A 15 06 F6 | 	mov	arg02, ##@LR__4933
07c44     1E 13 02 F6 | 	mov	arg01, local16
07c48     54 00 00 FF 
07c4c     FC E5 85 F1 | 	sub	objptr, ##43516
07c50     20 58 B1 FD | 	call	#__system___string_cmp
07c54     00 FA 0D F2 | 	cmp	result1, #0 wz
07c58     0C 01 90 AD |  if_e	jmp	#LR__0681
07c5c     67 01 00 FF 
07c60     4F 15 06 F6 | 	mov	arg02, ##@LR__4934
07c64     1E 13 02 F6 | 	mov	arg01, local16
07c68     08 58 B1 FD | 	call	#__system___string_cmp
07c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
07c70     00 01 90 AD |  if_e	jmp	#LR__0682
07c74     67 01 00 FF 
07c78     55 15 06 F6 | 	mov	arg02, ##@LR__4935
07c7c     1E 13 02 F6 | 	mov	arg01, local16
07c80     F0 57 B1 FD | 	call	#__system___string_cmp
07c84     00 FA 0D F2 | 	cmp	result1, #0 wz
07c88     F4 00 90 AD |  if_e	jmp	#LR__0683
07c8c     67 01 00 FF 
07c90     5B 15 06 F6 | 	mov	arg02, ##@LR__4936
07c94     1E 13 02 F6 | 	mov	arg01, local16
07c98     D8 57 B1 FD | 	call	#__system___string_cmp
07c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
07ca0     E8 00 90 AD |  if_e	jmp	#LR__0684
07ca4     67 01 00 FF 
07ca8     62 15 06 F6 | 	mov	arg02, ##@LR__4937
07cac     1E 13 02 F6 | 	mov	arg01, local16
07cb0     C0 57 B1 FD | 	call	#__system___string_cmp
07cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
07cb8     DC 00 90 AD |  if_e	jmp	#LR__0685
07cbc     67 01 00 FF 
07cc0     67 15 06 F6 | 	mov	arg02, ##@LR__4938
07cc4     1E 13 02 F6 | 	mov	arg01, local16
07cc8     A8 57 B1 FD | 	call	#__system___string_cmp
07ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd0     D0 00 90 AD |  if_e	jmp	#LR__0686
07cd4     67 01 00 FF 
07cd8     6F 15 06 F6 | 	mov	arg02, ##@LR__4939
07cdc     1E 13 02 F6 | 	mov	arg01, local16
07ce0     90 57 B1 FD | 	call	#__system___string_cmp
07ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ce8     C4 00 90 AD |  if_e	jmp	#LR__0687
07cec     67 01 00 FF 
07cf0     75 15 06 F6 | 	mov	arg02, ##@LR__4940
07cf4     1E 13 02 F6 | 	mov	arg01, local16
07cf8     78 57 B1 FD | 	call	#__system___string_cmp
07cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
07d00     B8 00 90 AD |  if_e	jmp	#LR__0688
07d04     67 01 00 FF 
07d08     7B 15 06 F6 | 	mov	arg02, ##@LR__4941
07d0c     1E 13 02 F6 | 	mov	arg01, local16
07d10     60 57 B1 FD | 	call	#__system___string_cmp
07d14     00 FA 0D F2 | 	cmp	result1, #0 wz
07d18     AC 00 90 AD |  if_e	jmp	#LR__0689
07d1c     67 01 00 FF 
07d20     82 15 06 F6 | 	mov	arg02, ##@LR__4942
07d24     1E 13 02 F6 | 	mov	arg01, local16
07d28     48 57 B1 FD | 	call	#__system___string_cmp
07d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d30     A0 00 90 AD |  if_e	jmp	#LR__0690
07d34     67 01 00 FF 
07d38     89 15 06 F6 | 	mov	arg02, ##@LR__4943
07d3c     1E 13 02 F6 | 	mov	arg01, local16
07d40     30 57 B1 FD | 	call	#__system___string_cmp
07d44     00 FA 0D F2 | 	cmp	result1, #0 wz
07d48     94 00 90 AD |  if_e	jmp	#LR__0691
07d4c     67 01 00 FF 
07d50     90 15 06 F6 | 	mov	arg02, ##@LR__4944
07d54     1E 13 02 F6 | 	mov	arg01, local16
07d58     18 57 B1 FD | 	call	#__system___string_cmp
07d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d60     88 00 90 AD |  if_e	jmp	#LR__0692
07d64     90 00 90 FD | 	jmp	#LR__0693
07d68                 | LR__0681
07d68     01 39 06 F6 | 	mov	local14, #257
07d6c     01 3A 06 F6 | 	mov	local15, #1
07d70     A4 00 90 FD | 	jmp	#LR__0695
07d74                 | LR__0682
07d74     02 39 06 F6 | 	mov	local14, #258
07d78     01 3A 06 F6 | 	mov	local15, #1
07d7c     98 00 90 FD | 	jmp	#LR__0695
07d80                 | LR__0683
07d80     03 39 06 F6 | 	mov	local14, #259
07d84     02 3A 06 F6 | 	mov	local15, #2
07d88     8C 00 90 FD | 	jmp	#LR__0695
07d8c                 | LR__0684
07d8c     04 39 06 F6 | 	mov	local14, #260
07d90     02 3A 06 F6 | 	mov	local15, #2
07d94     80 00 90 FD | 	jmp	#LR__0695
07d98                 | LR__0685
07d98     05 39 06 F6 | 	mov	local14, #261
07d9c     04 3A 06 F6 | 	mov	local15, #4
07da0     74 00 90 FD | 	jmp	#LR__0695
07da4                 | LR__0686
07da4     05 39 06 F6 | 	mov	local14, #261
07da8     04 3A 06 F6 | 	mov	local15, #4
07dac     68 00 90 FD | 	jmp	#LR__0695
07db0                 | LR__0687
07db0     06 39 06 F6 | 	mov	local14, #262
07db4     04 3A 06 F6 | 	mov	local15, #4
07db8     5C 00 90 FD | 	jmp	#LR__0695
07dbc                 | LR__0688
07dbc     07 39 06 F6 | 	mov	local14, #263
07dc0     08 3A 06 F6 | 	mov	local15, #8
07dc4     50 00 90 FD | 	jmp	#LR__0695
07dc8                 | LR__0689
07dc8     08 39 06 F6 | 	mov	local14, #264
07dcc     08 3A 06 F6 | 	mov	local15, #8
07dd0     44 00 90 FD | 	jmp	#LR__0695
07dd4                 | LR__0690
07dd4     09 39 06 F6 | 	mov	local14, #265
07dd8     04 3A 06 F6 | 	mov	local15, #4
07ddc     38 00 90 FD | 	jmp	#LR__0695
07de0                 | LR__0691
07de0     0A 39 06 F6 | 	mov	local14, #266
07de4     08 3A 06 F6 | 	mov	local15, #8
07de8     2C 00 90 FD | 	jmp	#LR__0695
07dec                 | LR__0692
07dec     0B 39 06 F6 | 	mov	local14, #267
07df0     04 3A 06 F6 | 	mov	local15, #4
07df4     20 00 90 FD | 	jmp	#LR__0695
07df8                 | LR__0693
07df8     2F 12 06 F6 | 	mov	arg01, #47
07dfc     0C 12 B1 FD | 	call	#_printerror
07e00     2F FA 05 F6 | 	mov	result1, #47
07e04     10 01 90 FD | 	jmp	#LR__0696
07e08                 | LR__0694
07e08     2E 12 06 F6 | 	mov	arg01, #46
07e0c     FC 11 B1 FD | 	call	#_printerror
07e10                 | '   printerror(46): return 46
07e10     2E FA 05 F6 | 	mov	result1, #46
07e14     00 01 90 FD | 	jmp	#LR__0696
07e18                 | LR__0695
07e18     0F 3B 02 FD | 	qmul	local15, local01
07e1c     18 2A 62 FD | 	getqx	local07
07e20     10 2B 02 FD | 	qmul	local07, local02
07e24     18 3C 62 FD | 	getqx	local16
07e28     11 3D 02 FD | 	qmul	local16, local03
07e2c     7B 00 00 FF 
07e30     68 E4 05 F1 | 	add	objptr, ##63080
07e34     F2 3E 02 FB | 	rdlong	local17, objptr
07e38     1C 15 02 F6 | 	mov	arg02, local14
07e3c     18 3C 62 FD | 	getqx	local16
07e40     1E 3F 82 F1 | 	sub	local17, local16
07e44     10 3E 86 F1 | 	sub	local17, #16
07e48     0F 3E 26 F5 | 	andn	local17, #15
07e4c     F2 3E 62 FC | 	wrlong	local17, objptr
07e50     7B 00 00 FF 
07e54     68 E4 85 F1 | 	sub	objptr, ##63080
07e58     1F 13 02 F6 | 	mov	arg01, local17
07e5c     58 13 B1 FD | 	call	#_psdpoke
07e60     1F 13 02 F6 | 	mov	arg01, local17
07e64     02 12 06 F1 | 	add	arg01, #2
07e68     1D 15 02 F6 | 	mov	arg02, local15
07e6c     48 13 B1 FD | 	call	#_psdpoke
07e70     1F 13 02 F6 | 	mov	arg01, local17
07e74     04 12 06 F1 | 	add	arg01, #4
07e78     0F 15 02 F6 | 	mov	arg02, local01
07e7c     F0 12 B1 FD | 	call	#_pslpoke
07e80     1F 13 02 F6 | 	mov	arg01, local17
07e84     08 12 06 F1 | 	add	arg01, #8
07e88     10 15 02 F6 | 	mov	arg02, local02
07e8c     E0 12 B1 FD | 	call	#_pslpoke
07e90     1F 13 02 F6 | 	mov	arg01, local17
07e94     0C 12 06 F1 | 	add	arg01, #12
07e98     11 15 02 F6 | 	mov	arg02, local03
07e9c     D0 12 B1 FD | 	call	#_pslpoke
07ea0     14 35 02 F6 | 	mov	local12, local06
07ea4     04 34 66 F0 | 	shl	local12, #4
07ea8     34 00 00 FF 
07eac     F8 E5 05 F1 | 	add	objptr, ##27128
07eb0     F2 34 02 F1 | 	add	local12, objptr
07eb4     1A 27 62 FC | 	wrlong	local05, local12
07eb8     14 35 02 F6 | 	mov	local12, local06
07ebc     04 34 66 F0 | 	shl	local12, #4
07ec0     F2 34 02 F1 | 	add	local12, objptr
07ec4     04 34 06 F1 | 	add	local12, #4
07ec8     1A 3F 62 FC | 	wrlong	local17, local12
07ecc     14 35 02 F6 | 	mov	local12, local06
07ed0     04 34 66 F0 | 	shl	local12, #4
07ed4     F2 34 02 F1 | 	add	local12, objptr
07ed8     0C 34 06 F1 | 	add	local12, #12
07edc     1A 39 62 FC | 	wrlong	local14, local12
07ee0                 | ' memtop=arrayptr
07ee0                 | ' 
07ee0                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
07ee0                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
07ee0                 | ' pslpoke arrayptr+4,dims(0)
07ee0                 | ' pslpoke arrayptr+8,dims(1)
07ee0                 | ' pslpoke arrayptr+12,dims(2)
07ee0                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
07ee0                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
07ee0                 | ' 
07ee0                 | ' 
07ee0                 | ' variables(j).name=varname2$
07ee0                 | ' variables(j).value.uresult=arrayptr
07ee0                 | ' variables(j).vartype=arraytype
07ee0                 | ' if j=varnum then varnum+=1
07ee0     20 00 00 FF 
07ee4     00 E4 05 F1 | 	add	objptr, ##16384
07ee8     F2 2A 02 FB | 	rdlong	local07, objptr
07eec     54 00 00 FF 
07ef0     F8 E5 85 F1 | 	sub	objptr, ##43512
07ef4     15 29 0A F2 | 	cmp	local06, local07 wz
07ef8     54 00 00 AF 
07efc     F8 E5 05 A1 |  if_e	add	objptr, ##43512
07f00     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07f04     01 2A 06 A1 |  if_e	add	local07, #1
07f08     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07f0c     54 00 00 AF 
07f10     F8 E5 85 A1 |  if_e	sub	objptr, ##43512
07f14                 | ' 
07f14                 | ' return 0
07f14     00 FA 05 F6 | 	mov	result1, #0
07f18                 | LR__0696
07f18     A7 F0 03 F6 | 	mov	ptra, fp
07f1c     B2 00 A0 FD | 	call	#popregs_
07f20                 | _compile_dim_ret
07f20     2D 00 64 FD | 	ret
07f24                 | 
07f24                 | ' 
07f24                 | ' 
07f24                 | ' function compile_for() as ulong  
07f24                 | _compile_for
07f24     07 4A 05 F6 | 	mov	COUNT_, #7
07f28     A8 00 A0 FD | 	call	#pushregs_
07f2c                 | ' 
07f2c                 | ' 
07f2c                 | ' 
07f2c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07f2c     57 00 00 FF 
07f30     34 E4 05 F1 | 	add	objptr, ##44596
07f34     F2 14 02 FB | 	rdlong	arg02, objptr
07f38     01 14 06 F1 | 	add	arg02, #1
07f3c     03 14 66 F0 | 	shl	arg02, #3
07f40     02 00 00 FF 
07f44     38 E4 85 F1 | 	sub	objptr, ##1080
07f48     F2 14 02 F1 | 	add	arg02, objptr
07f4c     0A 13 02 FB | 	rdlong	arg01, arg02
07f50     54 00 00 FF 
07f54     FC E5 85 F1 | 	sub	objptr, ##43516
07f58                 | ' 
07f58                 | ' select case s
07f58     65 01 00 FF 
07f5c     FC 15 06 F6 | 	mov	arg02, ##@LR__4752
07f60     10 55 B1 FD | 	call	#__system___string_cmp
07f64     00 FA 0D F2 | 	cmp	result1, #0 wz
07f68     1B FA 05 A6 |  if_e	mov	result1, #27
07f6c     00 FA 05 56 |  if_ne	mov	result1, #0
07f70     00 FA 0D F2 | 	cmp	result1, #0 wz
07f74     0C 00 90 AD |  if_e	jmp	#LR__0700
07f78     05 12 06 F6 | 	mov	arg01, #5
07f7c     D8 E4 BF FD | 	call	#_compile_immediate_assign
07f80     10 00 90 FD | 	jmp	#LR__0701
07f84                 | LR__0700
07f84     20 12 06 F6 | 	mov	arg01, #32
07f88     48 E9 BF FD | 	call	#_compile_error
07f8c     20 FA 05 F6 | 	mov	result1, #32
07f90     E8 02 90 FD | 	jmp	#LR__0707
07f94                 | LR__0701
07f94     6A 00 00 FF 
07f98     6C E4 05 F1 | 	add	objptr, ##54380
07f9c     F2 12 02 FB | 	rdlong	arg01, objptr
07fa0     09 25 02 F6 | 	mov	local04, arg01
07fa4     01 24 86 F1 | 	sub	local04, #1
07fa8     12 15 02 F6 | 	mov	arg02, local04
07fac     01 14 66 F0 | 	shl	arg02, #1
07fb0     12 15 02 F1 | 	add	arg02, local04
07fb4     02 14 66 F0 | 	shl	arg02, #2
07fb8     03 00 00 FF 
07fbc     00 E4 85 F1 | 	sub	objptr, ##1536
07fc0     F2 14 02 F1 | 	add	arg02, objptr
07fc4     0A 1F 02 FB | 	rdlong	local01, arg02
07fc8     04 14 06 F1 | 	add	arg02, #4
07fcc     0A 27 02 FB | 	rdlong	local05, arg02
07fd0     01 12 86 F1 | 	sub	arg01, #1
07fd4     09 29 02 F6 | 	mov	local06, arg01
07fd8     01 28 66 F0 | 	shl	local06, #1
07fdc     09 29 02 F1 | 	add	local06, arg01
07fe0     02 28 66 F0 | 	shl	local06, #2
07fe4     F2 28 02 F1 | 	add	local06, objptr
07fe8     08 28 06 F1 | 	add	local06, #8
07fec     14 13 02 FB | 	rdlong	arg01, local06
07ff0     13 21 02 F6 | 	mov	local02, local05
07ff4     09 23 02 F6 | 	mov	local03, arg01
07ff8                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07ff8                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07ff8     17 22 0E F2 | 	cmp	local03, #23 wz
07ffc     67 00 00 FF 
08000     6C E4 85 F1 | 	sub	objptr, ##52844
08004     10 00 90 AD |  if_e	jmp	#LR__0702
08008     22 12 06 F6 | 	mov	arg01, #34
0800c     C4 E8 BF FD | 	call	#_compile_error
08010     22 FA 05 F6 | 	mov	result1, #34
08014     64 02 90 FD | 	jmp	#LR__0707
08018                 | LR__0702
08018     0F 2B 02 F6 | 	mov	local07, local01
0801c                 | ' varnum=t1.result.uresult
0801c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
0801c     57 00 00 FF 
08020     34 E4 05 F1 | 	add	objptr, ##44596
08024     F2 24 02 FB | 	rdlong	local04, objptr
08028     03 24 66 F0 | 	shl	local04, #3
0802c     02 00 00 FF 
08030     38 E4 85 F1 | 	sub	objptr, ##1080
08034     F2 24 02 F1 | 	add	local04, objptr
08038     12 13 02 FB | 	rdlong	arg01, local04
0803c     67 01 00 FF 
08040     97 15 06 F6 | 	mov	arg02, ##@LR__4945
08044     54 00 00 FF 
08048     FC E5 85 F1 | 	sub	objptr, ##43516
0804c     24 54 B1 FD | 	call	#__system___string_cmp
08050     00 FA 0D F2 | 	cmp	result1, #0 wz
08054     10 00 90 AD |  if_e	jmp	#LR__0703
08058     21 12 06 F6 | 	mov	arg01, #33
0805c     74 E8 BF FD | 	call	#_compile_error
08060     21 FA 05 F6 | 	mov	result1, #33
08064     14 02 90 FD | 	jmp	#LR__0707
08068                 | LR__0703
08068     57 00 00 FF 
0806c     34 E4 05 F1 | 	add	objptr, ##44596
08070     F2 24 02 FB | 	rdlong	local04, objptr
08074     01 24 06 F1 | 	add	local04, #1
08078     F2 24 62 FC | 	wrlong	local04, objptr
0807c     57 00 00 FF 
08080     34 E4 85 F1 | 	sub	objptr, ##44596
08084     9C 0C B0 FD | 	call	#_expr
08088                 | ' ct+=1
08088                 | ' expr()  ' there is "to" value pushed on the stack
08088                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
08088     57 00 00 FF 
0808c     34 E4 05 F1 | 	add	objptr, ##44596
08090     F2 24 02 FB | 	rdlong	local04, objptr
08094     03 24 66 F0 | 	shl	local04, #3
08098     02 00 00 FF 
0809c     38 E4 85 F1 | 	sub	objptr, ##1080
080a0     F2 24 02 F1 | 	add	local04, objptr
080a4     12 13 02 FB | 	rdlong	arg01, local04
080a8     67 01 00 FF 
080ac     9A 15 06 F6 | 	mov	arg02, ##@LR__4946
080b0     54 00 00 FF 
080b4     FC E5 85 F1 | 	sub	objptr, ##43516
080b8     B8 53 B1 FD | 	call	#__system___string_cmp
080bc     00 FA 0D F2 | 	cmp	result1, #0 wz
080c0     3C 00 90 AD |  if_e	jmp	#LR__0704
080c4     57 00 00 FF 
080c8     34 E4 05 F1 | 	add	objptr, ##44596
080cc     F2 28 02 FB | 	rdlong	local06, objptr
080d0     03 28 66 F0 | 	shl	local06, #3
080d4     02 00 00 FF 
080d8     38 E4 85 F1 | 	sub	objptr, ##1080
080dc     F2 28 02 F1 | 	add	local06, objptr
080e0     14 13 02 FB | 	rdlong	arg01, local06
080e4     67 01 00 FF 
080e8     9F 15 06 F6 | 	mov	arg02, ##@LR__4947
080ec     54 00 00 FF 
080f0     FC E5 85 F1 | 	sub	objptr, ##43516
080f4     7C 53 B1 FD | 	call	#__system___string_cmp
080f8     00 FA 0D F2 | 	cmp	result1, #0 wz
080fc     24 00 90 5D |  if_ne	jmp	#LR__0705
08100                 | LR__0704
08100     57 00 00 FF 
08104     34 E4 05 F1 | 	add	objptr, ##44596
08108     F2 28 02 FB | 	rdlong	local06, objptr
0810c     01 28 06 F1 | 	add	local06, #1
08110     F2 28 62 FC | 	wrlong	local06, objptr
08114     57 00 00 FF 
08118     34 E4 85 F1 | 	sub	objptr, ##44596
0811c     04 0C B0 FD | 	call	#_expr
08120     78 00 90 FD | 	jmp	#LR__0706
08124                 | LR__0705
08124     6A 00 00 FF 
08128     6C E4 05 F1 | 	add	objptr, ##54380
0812c     F2 28 02 FB | 	rdlong	local06, objptr
08130     14 27 02 F6 | 	mov	local05, local06
08134     01 26 66 F0 | 	shl	local05, #1
08138     14 27 02 F1 | 	add	local05, local06
0813c     02 26 66 F0 | 	shl	local05, #2
08140     03 00 00 FF 
08144     00 E4 85 F1 | 	sub	objptr, ##1536
08148     F2 26 02 F1 | 	add	local05, objptr
0814c     08 26 06 F1 | 	add	local05, #8
08150     13 39 68 FC | 	wrlong	#28, local05
08154     03 00 00 FF 
08158     00 E4 05 F1 | 	add	objptr, ##1536
0815c     F2 28 02 FB | 	rdlong	local06, objptr
08160     14 27 02 F6 | 	mov	local05, local06
08164     01 26 66 F0 | 	shl	local05, #1
08168     14 27 02 F1 | 	add	local05, local06
0816c     02 26 66 F0 | 	shl	local05, #2
08170     03 00 00 FF 
08174     00 E4 85 F1 | 	sub	objptr, ##1536
08178     F2 26 02 F1 | 	add	local05, objptr
0817c     13 03 68 FC | 	wrlong	#1, local05
08180     03 00 00 FF 
08184     00 E4 05 F1 | 	add	objptr, ##1536
08188     F2 28 02 FB | 	rdlong	local06, objptr
0818c     01 28 06 F1 | 	add	local06, #1
08190     F2 28 62 FC | 	wrlong	local06, objptr
08194     6A 00 00 FF 
08198     6C E4 85 F1 | 	sub	objptr, ##54380
0819c                 | LR__0706
0819c     6A 00 00 FF 
081a0     6C E4 05 F1 | 	add	objptr, ##54380
081a4     F2 28 02 FB | 	rdlong	local06, objptr
081a8     14 27 02 F6 | 	mov	local05, local06
081ac     01 26 66 F0 | 	shl	local05, #1
081b0     14 27 02 F1 | 	add	local05, local06
081b4     02 26 66 F0 | 	shl	local05, #2
081b8     03 00 00 FF 
081bc     00 E4 85 F1 | 	sub	objptr, ##1536
081c0     F2 26 02 F1 | 	add	local05, objptr
081c4     08 26 06 F1 | 	add	local05, #8
081c8     13 39 68 FC | 	wrlong	#28, local05
081cc     03 00 00 FF 
081d0     00 E4 05 F1 | 	add	objptr, ##1536
081d4     F2 28 02 FB | 	rdlong	local06, objptr
081d8     14 27 02 F6 | 	mov	local05, local06
081dc     01 26 66 F0 | 	shl	local05, #1
081e0     14 27 02 F1 | 	add	local05, local06
081e4     02 26 66 F0 | 	shl	local05, #2
081e8     03 00 00 FF 
081ec     00 E4 85 F1 | 	sub	objptr, ##1536
081f0     F2 26 02 F1 | 	add	local05, objptr
081f4     13 2B 62 FC | 	wrlong	local07, local05
081f8     03 00 00 FF 
081fc     00 E4 05 F1 | 	add	objptr, ##1536
08200     F2 2A 02 FB | 	rdlong	local07, objptr
08204     01 2A 06 F1 | 	add	local07, #1
08208     F2 2A 62 FC | 	wrlong	local07, objptr
0820c     15 29 02 F6 | 	mov	local06, local07
08210     01 28 66 F0 | 	shl	local06, #1
08214     15 29 02 F1 | 	add	local06, local07
08218     02 28 66 F0 | 	shl	local06, #2
0821c     03 00 00 FF 
08220     00 E4 85 F1 | 	sub	objptr, ##1536
08224     F2 28 02 F1 | 	add	local06, objptr
08228     08 28 06 F1 | 	add	local06, #8
0822c     14 95 68 FC | 	wrlong	#74, local06
08230     03 00 00 FF 
08234     00 E4 05 F1 | 	add	objptr, ##1536
08238     F2 2A 02 FB | 	rdlong	local07, objptr
0823c     15 29 02 F6 | 	mov	local06, local07
08240     01 28 66 F0 | 	shl	local06, #1
08244     15 29 02 F1 | 	add	local06, local07
08248     02 28 66 F0 | 	shl	local06, #2
0824c     03 00 00 FF 
08250     00 E4 85 F1 | 	sub	objptr, ##1536
08254     F2 28 02 F1 | 	add	local06, objptr
08258     14 01 68 FC | 	wrlong	#0, local06
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 2A 02 FB | 	rdlong	local07, objptr
08268     01 2A 06 F1 | 	add	local07, #1
0826c     F2 2A 62 FC | 	wrlong	local07, objptr
08270     6A 00 00 FF 
08274     6C E4 85 F1 | 	sub	objptr, ##54380
08278                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
08278                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
08278                 | ' 
08278                 | ' 
08278                 | ' return 0
08278     00 FA 05 F6 | 	mov	result1, #0
0827c                 | LR__0707
0827c     A7 F0 03 F6 | 	mov	ptra, fp
08280     B2 00 A0 FD | 	call	#popregs_
08284                 | _compile_for_ret
08284     2D 00 64 FD | 	ret
08288                 | 
08288                 | ' 
08288                 | ' 
08288                 | ' sub do_for()
08288                 | _do_for
08288     01 4A 05 F6 | 	mov	COUNT_, #1
0828c     A8 00 A0 FD | 	call	#pushregs_
08290     10 F0 07 F1 | 	add	ptra, #16
08294     79 00 00 FF 
08298     C8 E5 05 F1 | 	add	objptr, ##62408
0829c     F2 12 02 FB | 	rdlong	arg01, objptr
082a0     01 12 06 F1 | 	add	arg01, #1
082a4     F2 12 62 FC | 	wrlong	arg01, objptr
082a8     79 00 00 FF 
082ac     C8 E5 85 F1 | 	sub	objptr, ##62408
082b0     F8 1E B0 FD | 	call	#_pop
082b4     A7 FA 61 FC | 	wrlong	result1, fp
082b8     04 4E 05 F1 | 	add	fp, #4
082bc     A7 FC 61 FC | 	wrlong	result2, fp
082c0     04 4E 05 F1 | 	add	fp, #4
082c4     A7 FE 61 FC | 	wrlong	result3, fp
082c8     08 4E 85 F1 | 	sub	fp, #8
082cc     79 00 00 FF 
082d0     C8 E5 05 F1 | 	add	objptr, ##62408
082d4     F2 12 02 FB | 	rdlong	arg01, objptr
082d8     09 1F 02 F6 | 	mov	local01, arg01
082dc     02 1E 66 F0 | 	shl	local01, #2
082e0     09 1F 02 F1 | 	add	local01, arg01
082e4     02 1E 66 F0 | 	shl	local01, #2
082e8     07 00 00 FF 
082ec     40 E5 85 F1 | 	sub	objptr, ##3904
082f0     F2 1E 02 F1 | 	add	local01, objptr
082f4     A7 12 02 FB | 	rdlong	arg01, fp
082f8     08 1E 06 F1 | 	add	local01, #8
082fc     0F 13 62 FC | 	wrlong	arg01, local01
08300     72 00 00 FF 
08304     88 E4 85 F1 | 	sub	objptr, ##58504
08308     A0 1E B0 FD | 	call	#_pop
0830c     A7 FA 61 FC | 	wrlong	result1, fp
08310     04 4E 05 F1 | 	add	fp, #4
08314     A7 FC 61 FC | 	wrlong	result2, fp
08318     04 4E 05 F1 | 	add	fp, #4
0831c     A7 FE 61 FC | 	wrlong	result3, fp
08320     08 4E 85 F1 | 	sub	fp, #8
08324     79 00 00 FF 
08328     C8 E5 05 F1 | 	add	objptr, ##62408
0832c     F2 12 02 FB | 	rdlong	arg01, objptr
08330     09 1F 02 F6 | 	mov	local01, arg01
08334     02 1E 66 F0 | 	shl	local01, #2
08338     09 1F 02 F1 | 	add	local01, arg01
0833c     02 1E 66 F0 | 	shl	local01, #2
08340     07 00 00 FF 
08344     40 E5 85 F1 | 	sub	objptr, ##3904
08348     F2 1E 02 F1 | 	add	local01, objptr
0834c     A7 12 02 F6 | 	mov	arg01, fp
08350     72 00 00 FF 
08354     88 E4 85 F1 | 	sub	objptr, ##58504
08358     A8 AA B0 FD | 	call	#_converttoint
0835c     FD 12 02 F6 | 	mov	arg01, result1
08360     0C 1E 06 F1 | 	add	local01, #12
08364     0F 13 62 FC | 	wrlong	arg01, local01
08368     40 1E B0 FD | 	call	#_pop
0836c     A7 FA 61 FC | 	wrlong	result1, fp
08370     04 4E 05 F1 | 	add	fp, #4
08374     A7 FC 61 FC | 	wrlong	result2, fp
08378     04 4E 05 F1 | 	add	fp, #4
0837c     A7 FE 61 FC | 	wrlong	result3, fp
08380     08 4E 85 F1 | 	sub	fp, #8
08384     79 00 00 FF 
08388     C8 E5 05 F1 | 	add	objptr, ##62408
0838c     F2 12 02 FB | 	rdlong	arg01, objptr
08390     09 1F 02 F6 | 	mov	local01, arg01
08394     02 1E 66 F0 | 	shl	local01, #2
08398     09 1F 02 F1 | 	add	local01, arg01
0839c     02 1E 66 F0 | 	shl	local01, #2
083a0     07 00 00 FF 
083a4     40 E5 85 F1 | 	sub	objptr, ##3904
083a8     F2 1E 02 F1 | 	add	local01, objptr
083ac     A7 12 02 F6 | 	mov	arg01, fp
083b0     72 00 00 FF 
083b4     88 E4 85 F1 | 	sub	objptr, ##58504
083b8     48 AA B0 FD | 	call	#_converttoint
083bc     10 1E 06 F1 | 	add	local01, #16
083c0     0F FB 61 FC | 	wrlong	result1, local01
083c4                 | ' fortop+=1
083c4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
083c4                 | ' 'if i> maxfor then printerror(36) : return
083c4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
083c4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
083c4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
083c4                 | ' if compiledline(lineptr_e).result_type=token_end then
083c4     6A 00 00 FF 
083c8     70 E4 05 F1 | 	add	objptr, ##54384
083cc     F2 12 02 FB | 	rdlong	arg01, objptr
083d0     09 1F 02 F6 | 	mov	local01, arg01
083d4     01 1E 66 F0 | 	shl	local01, #1
083d8     09 1F 02 F1 | 	add	local01, arg01
083dc     02 1E 66 F0 | 	shl	local01, #2
083e0     03 00 00 FF 
083e4     04 E4 85 F1 | 	sub	objptr, ##1540
083e8     F2 1E 02 F1 | 	add	local01, objptr
083ec     08 1E 06 F1 | 	add	local01, #8
083f0     0F 1F 02 FB | 	rdlong	local01, local01
083f4     FE 1F 0E F2 | 	cmp	local01, #510 wz
083f8     67 00 00 FF 
083fc     6C E4 85 F1 | 	sub	objptr, ##52844
08400     70 00 90 5D |  if_ne	jmp	#LR__0710
08404     79 00 00 FF 
08408     C8 E5 05 F1 | 	add	objptr, ##62408
0840c     F2 12 02 FB | 	rdlong	arg01, objptr
08410     09 1F 02 F6 | 	mov	local01, arg01
08414     02 1E 66 F0 | 	shl	local01, #2
08418     09 1F 02 F1 | 	add	local01, arg01
0841c     02 1E 66 F0 | 	shl	local01, #2
08420     07 00 00 FF 
08424     40 E5 85 F1 | 	sub	objptr, ##3904
08428     F2 1E 02 F1 | 	add	local01, objptr
0842c     07 00 00 FF 
08430     18 E5 05 F1 | 	add	objptr, ##3864
08434     F2 12 02 FB | 	rdlong	arg01, objptr
08438     0F 13 62 FC | 	wrlong	arg01, local01
0843c     28 E4 05 F1 | 	add	objptr, #40
08440     F2 12 02 FB | 	rdlong	arg01, objptr
08444     09 1F 02 F6 | 	mov	local01, arg01
08448     02 1E 66 F0 | 	shl	local01, #2
0844c     09 1F 02 F1 | 	add	local01, arg01
08450     02 1E 66 F0 | 	shl	local01, #2
08454     07 00 00 FF 
08458     40 E5 85 F1 | 	sub	objptr, ##3904
0845c     F2 1E 02 F1 | 	add	local01, objptr
08460     04 1E 06 F1 | 	add	local01, #4
08464     0F 01 68 FC | 	wrlong	#0, local01
08468     72 00 00 FF 
0846c     88 E4 85 F1 | 	sub	objptr, ##58504
08470     7C 00 90 FD | 	jmp	#LR__0711
08474                 | LR__0710
08474     79 00 00 FF 
08478     C8 E5 05 F1 | 	add	objptr, ##62408
0847c     F2 12 02 FB | 	rdlong	arg01, objptr
08480     09 1F 02 F6 | 	mov	local01, arg01
08484     02 1E 66 F0 | 	shl	local01, #2
08488     09 1F 02 F1 | 	add	local01, arg01
0848c     02 1E 66 F0 | 	shl	local01, #2
08490     07 00 00 FF 
08494     40 E5 85 F1 | 	sub	objptr, ##3904
08498     F2 1E 02 F1 | 	add	local01, objptr
0849c     07 00 00 FF 
084a0     20 E5 05 F1 | 	add	objptr, ##3872
084a4     F2 12 02 FB | 	rdlong	arg01, objptr
084a8     0F 13 62 FC | 	wrlong	arg01, local01
084ac     20 E4 05 F1 | 	add	objptr, #32
084b0     F2 12 02 FB | 	rdlong	arg01, objptr
084b4     09 1F 02 F6 | 	mov	local01, arg01
084b8     02 1E 66 F0 | 	shl	local01, #2
084bc     09 1F 02 F1 | 	add	local01, arg01
084c0     02 1E 66 F0 | 	shl	local01, #2
084c4     07 00 00 FF 
084c8     40 E5 85 F1 | 	sub	objptr, ##3904
084cc     F2 1E 02 F1 | 	add	local01, objptr
084d0     08 00 00 FF 
084d4     18 E4 85 F1 | 	sub	objptr, ##4120
084d8     F2 12 02 FB | 	rdlong	arg01, objptr
084dc     6A 00 00 FF 
084e0     70 E4 85 F1 | 	sub	objptr, ##54384
084e4     01 12 06 F1 | 	add	arg01, #1
084e8     04 1E 06 F1 | 	add	local01, #4
084ec     0F 13 62 FC | 	wrlong	arg01, local01
084f0                 | LR__0711
084f0     A7 F0 03 F6 | 	mov	ptra, fp
084f4     B2 00 A0 FD | 	call	#popregs_
084f8                 | _do_for_ret
084f8     2D 00 64 FD | 	ret
084fc                 | 
084fc                 | ' 
084fc                 | ' ' now do_next todo
084fc                 | ' 
084fc                 | ' sub do_next()
084fc                 | _do_next
084fc     04 4A 05 F6 | 	mov	COUNT_, #4
08500     A8 00 A0 FD | 	call	#pushregs_
08504     A4 1C B0 FD | 	call	#_pop
08508     FD 1E 02 F6 | 	mov	local01, result1
0850c     FE 20 02 F6 | 	mov	local02, result2
08510     FF 22 02 F6 | 	mov	local03, result3
08514                 | ' 
08514                 | ' t1=pop() :varnum=t1.result.uresult
08514                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08514     79 00 00 FF 
08518     C8 E5 05 F1 | 	add	objptr, ##62408
0851c     F2 12 02 FB | 	rdlong	arg01, objptr
08520     09 15 02 F6 | 	mov	arg02, arg01
08524     02 14 66 F0 | 	shl	arg02, #2
08528     09 15 02 F1 | 	add	arg02, arg01
0852c     02 14 66 F0 | 	shl	arg02, #2
08530     07 00 00 FF 
08534     40 E5 85 F1 | 	sub	objptr, ##3904
08538     F2 14 02 F1 | 	add	arg02, objptr
0853c     08 14 06 F1 | 	add	arg02, #8
08540     0A 15 02 FB | 	rdlong	arg02, arg02
08544     0F 15 0A F2 | 	cmp	arg02, local01 wz
08548     72 00 00 FF 
0854c     88 E4 85 F1 | 	sub	objptr, ##58504
08550     0C 00 90 AD |  if_e	jmp	#LR__0720
08554     25 12 06 F6 | 	mov	arg01, #37
08558     B0 0A B1 FD | 	call	#_printerror
0855c     A8 02 90 FD | 	jmp	#LR__0725
08560                 | LR__0720
08560                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08560     0F 15 02 F6 | 	mov	arg02, local01
08564     04 14 66 F0 | 	shl	arg02, #4
08568     34 00 00 FF 
0856c     F8 E5 05 F1 | 	add	objptr, ##27128
08570     F2 14 02 F1 | 	add	arg02, objptr
08574     0C 14 06 F1 | 	add	arg02, #12
08578     0A 15 02 FB | 	rdlong	arg02, arg02
0857c     1E 14 0E F2 | 	cmp	arg02, #30 wz
08580     34 00 00 FF 
08584     F8 E5 85 F1 | 	sub	objptr, ##27128
08588     54 00 90 5D |  if_ne	jmp	#LR__0721
0858c     0F 15 02 F6 | 	mov	arg02, local01
08590     04 14 66 F0 | 	shl	arg02, #4
08594     34 00 00 FF 
08598     F8 E5 05 F1 | 	add	objptr, ##27128
0859c     F2 14 02 F1 | 	add	arg02, objptr
085a0     0C 14 06 F1 | 	add	arg02, #12
085a4     0A 39 68 FC | 	wrlong	#28, arg02
085a8     0F 25 02 F6 | 	mov	local04, local01
085ac     04 24 66 F0 | 	shl	local04, #4
085b0     F2 24 02 F1 | 	add	local04, objptr
085b4     0F 13 02 F6 | 	mov	arg01, local01
085b8     04 12 66 F0 | 	shl	arg01, #4
085bc     F2 12 02 F1 | 	add	arg01, objptr
085c0     04 12 06 F1 | 	add	arg01, #4
085c4     09 13 02 FB | 	rdlong	arg01, arg01
085c8     34 00 00 FF 
085cc     F8 E5 85 F1 | 	sub	objptr, ##27128
085d0     01 14 06 F6 | 	mov	arg02, #1
085d4     B8 7E B1 FD | 	call	#__system___float_tointeger
085d8     04 24 06 F1 | 	add	local04, #4
085dc     12 FB 61 FC | 	wrlong	result1, local04
085e0                 | LR__0721
085e0     79 00 00 FF 
085e4     C8 E5 05 F1 | 	add	objptr, ##62408
085e8     F2 12 02 FB | 	rdlong	arg01, objptr
085ec     09 25 02 F6 | 	mov	local04, arg01
085f0     02 24 66 F0 | 	shl	local04, #2
085f4     09 25 02 F1 | 	add	local04, arg01
085f8     02 24 66 F0 | 	shl	local04, #2
085fc     07 00 00 FF 
08600     40 E5 85 F1 | 	sub	objptr, ##3904
08604     F2 24 02 F1 | 	add	local04, objptr
08608     0C 24 06 F1 | 	add	local04, #12
0860c     12 25 02 FB | 	rdlong	local04, local04
08610     0F 13 02 F6 | 	mov	arg01, local01
08614     04 12 66 F0 | 	shl	arg01, #4
08618     3D 00 00 FF 
0861c     90 E4 85 F1 | 	sub	objptr, ##31376
08620     F2 12 02 F1 | 	add	arg01, objptr
08624     0F FF 01 F6 | 	mov	result3, local01
08628     04 FE 65 F0 | 	shl	result3, #4
0862c     F2 FE 01 F1 | 	add	result3, objptr
08630     04 FE 05 F1 | 	add	result3, #4
08634     FF FE 01 FB | 	rdlong	result3, result3
08638     12 FF 01 F1 | 	add	result3, local04
0863c     04 12 06 F1 | 	add	arg01, #4
08640     09 FF 61 FC | 	wrlong	result3, arg01
08644                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08644                 | ' if fortable(fortop).stepval>=0 then
08644     44 00 00 FF 
08648     D0 E5 05 F1 | 	add	objptr, ##35280
0864c     F2 12 02 FB | 	rdlong	arg01, objptr
08650     09 25 02 F6 | 	mov	local04, arg01
08654     02 24 66 F0 | 	shl	local04, #2
08658     09 25 02 F1 | 	add	local04, arg01
0865c     02 24 66 F0 | 	shl	local04, #2
08660     07 00 00 FF 
08664     40 E5 85 F1 | 	sub	objptr, ##3904
08668     F2 24 02 F1 | 	add	local04, objptr
0866c     0C 24 06 F1 | 	add	local04, #12
08670     12 25 02 FB | 	rdlong	local04, local04
08674     00 24 56 F2 | 	cmps	local04, #0 wc
08678     72 00 00 FF 
0867c     88 E4 85 F1 | 	sub	objptr, ##58504
08680     78 00 90 CD |  if_b	jmp	#LR__0722
08684                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08684     04 1E 66 F0 | 	shl	local01, #4
08688     34 00 00 FF 
0868c     F8 E5 05 F1 | 	add	objptr, ##27128
08690     F2 1E 02 F1 | 	add	local01, objptr
08694     44 00 00 FF 
08698     D0 E5 05 F1 | 	add	objptr, ##35280
0869c     F2 24 02 FB | 	rdlong	local04, objptr
086a0     12 13 02 F6 | 	mov	arg01, local04
086a4     02 12 66 F0 | 	shl	arg01, #2
086a8     12 13 02 F1 | 	add	arg01, local04
086ac     02 12 66 F0 | 	shl	arg01, #2
086b0     07 00 00 FF 
086b4     40 E5 85 F1 | 	sub	objptr, ##3904
086b8     F2 12 02 F1 | 	add	arg01, objptr
086bc     04 1E 06 F1 | 	add	local01, #4
086c0     0F 25 02 FB | 	rdlong	local04, local01
086c4     10 12 06 F1 | 	add	arg01, #16
086c8     09 13 02 FB | 	rdlong	arg01, arg01
086cc     09 25 5A F2 | 	cmps	local04, arg01 wcz
086d0     72 00 00 FF 
086d4     88 E4 85 F1 | 	sub	objptr, ##58504
086d8     9C 00 90 ED |  if_be	jmp	#LR__0724
086dc     79 00 00 FF 
086e0     C8 E5 05 F1 | 	add	objptr, ##62408
086e4     F2 24 02 FB | 	rdlong	local04, objptr
086e8     01 24 86 F1 | 	sub	local04, #1
086ec     F2 24 62 FC | 	wrlong	local04, objptr
086f0     79 00 00 FF 
086f4     C8 E5 85 F1 | 	sub	objptr, ##62408
086f8     0C 01 90 FD | 	jmp	#LR__0725
086fc                 | LR__0722
086fc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
086fc     0F 13 02 F6 | 	mov	arg01, local01
08700     04 12 66 F0 | 	shl	arg01, #4
08704     34 00 00 FF 
08708     F8 E5 05 F1 | 	add	objptr, ##27128
0870c     F2 12 02 F1 | 	add	arg01, objptr
08710     44 00 00 FF 
08714     D0 E5 05 F1 | 	add	objptr, ##35280
08718     F2 24 02 FB | 	rdlong	local04, objptr
0871c     12 1F 02 F6 | 	mov	local01, local04
08720     02 1E 66 F0 | 	shl	local01, #2
08724     12 1F 02 F1 | 	add	local01, local04
08728     02 1E 66 F0 | 	shl	local01, #2
0872c     07 00 00 FF 
08730     40 E5 85 F1 | 	sub	objptr, ##3904
08734     F2 1E 02 F1 | 	add	local01, objptr
08738     04 12 06 F1 | 	add	arg01, #4
0873c     09 13 02 FB | 	rdlong	arg01, arg01
08740     10 1E 06 F1 | 	add	local01, #16
08744     0F 1F 02 FB | 	rdlong	local01, local01
08748     0F 13 52 F2 | 	cmps	arg01, local01 wc
0874c     72 00 00 FF 
08750     88 E4 85 F1 | 	sub	objptr, ##58504
08754     20 00 90 3D |  if_ae	jmp	#LR__0723
08758     79 00 00 FF 
0875c     C8 E5 05 F1 | 	add	objptr, ##62408
08760     F2 24 02 FB | 	rdlong	local04, objptr
08764     01 24 86 F1 | 	sub	local04, #1
08768     F2 24 62 FC | 	wrlong	local04, objptr
0876c     79 00 00 FF 
08770     C8 E5 85 F1 | 	sub	objptr, ##62408
08774     90 00 90 FD | 	jmp	#LR__0725
08778                 | LR__0723
08778                 | LR__0724
08778     79 00 00 FF 
0877c     C8 E5 05 F1 | 	add	objptr, ##62408
08780     F2 1E 02 FB | 	rdlong	local01, objptr
08784     0F 25 02 F6 | 	mov	local04, local01
08788     02 24 66 F0 | 	shl	local04, #2
0878c     0F 25 02 F1 | 	add	local04, local01
08790     02 24 66 F0 | 	shl	local04, #2
08794     07 00 00 FF 
08798     40 E5 85 F1 | 	sub	objptr, ##3904
0879c     F2 24 02 F1 | 	add	local04, objptr
087a0     12 25 02 FB | 	rdlong	local04, local04
087a4     07 00 00 FF 
087a8     18 E5 05 F1 | 	add	objptr, ##3864
087ac     F2 24 62 FC | 	wrlong	local04, objptr
087b0     28 E4 05 F1 | 	add	objptr, #40
087b4     F2 1E 02 FB | 	rdlong	local01, objptr
087b8     0F 25 02 F6 | 	mov	local04, local01
087bc     02 24 66 F0 | 	shl	local04, #2
087c0     0F 25 02 F1 | 	add	local04, local01
087c4     02 24 66 F0 | 	shl	local04, #2
087c8     07 00 00 FF 
087cc     40 E5 85 F1 | 	sub	objptr, ##3904
087d0     F2 24 02 F1 | 	add	local04, objptr
087d4     04 24 06 F1 | 	add	local04, #4
087d8     12 25 02 FB | 	rdlong	local04, local04
087dc     07 00 00 FF 
087e0     1C E5 05 F1 | 	add	objptr, ##3868
087e4     F2 24 62 FC | 	wrlong	local04, objptr
087e8     0F 00 00 FF 
087ec     38 E5 85 F1 | 	sub	objptr, ##7992
087f0     F2 24 02 FB | 	rdlong	local04, objptr
087f4     01 24 86 F1 | 	sub	local04, #1
087f8     04 E4 05 F1 | 	add	objptr, #4
087fc     F2 24 62 FC | 	wrlong	local04, objptr
08800     6A 00 00 FF 
08804     70 E4 85 F1 | 	sub	objptr, ##54384
08808                 | LR__0725
08808     A7 F0 03 F6 | 	mov	ptra, fp
0880c     B2 00 A0 FD | 	call	#popregs_
08810                 | _do_next_ret
08810     2D 00 64 FD | 	ret
08814                 | 
08814                 | ' 
08814                 | ' 
08814                 | ' function compile_next() as ulong
08814                 | _compile_next
08814     04 4A 05 F6 | 	mov	COUNT_, #4
08818     A8 00 A0 FD | 	call	#pushregs_
0881c     57 00 00 FF 
08820     34 E4 05 F1 | 	add	objptr, ##44596
08824     F2 12 02 FB | 	rdlong	arg01, objptr
08828     03 12 66 F0 | 	shl	arg01, #3
0882c     02 00 00 FF 
08830     38 E4 85 F1 | 	sub	objptr, ##1080
08834     F2 12 02 F1 | 	add	arg01, objptr
08838     09 1F 02 FB | 	rdlong	local01, arg01
0883c                 | ' 
0883c                 | ' varname$=lparts(ct).part$ 
0883c                 | ' 'suffix$=right$(varname$,1)
0883c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
0883c                 | ' if varnum=0 then compile_error(35)  : return 35
0883c     04 E4 85 F1 | 	sub	objptr, #4
08840     F2 14 0A FB | 	rdlong	arg02, objptr wz
08844     54 00 00 FF 
08848     F8 E5 85 F1 | 	sub	objptr, ##43512
0884c     10 00 90 5D |  if_ne	jmp	#LR__0730
08850     23 12 06 F6 | 	mov	arg01, #35
08854     7C E0 BF FD | 	call	#_compile_error
08858     23 FA 05 F6 | 	mov	result1, #35
0885c     58 01 90 FD | 	jmp	#LR__0734
08860                 | LR__0730
08860     01 20 66 F6 | 	neg	local02, #1
08864                 | ' j=-1
08864                 | ' for i=0 to varnum-1
08864     00 22 06 F6 | 	mov	local03, #0
08868     54 00 00 FF 
0886c     F8 E5 05 F1 | 	add	objptr, ##43512
08870     F2 24 02 FB | 	rdlong	local04, objptr
08874     54 00 00 FF 
08878     F8 E5 85 F1 | 	sub	objptr, ##43512
0887c                 | LR__0731
0887c     12 23 12 F2 | 	cmp	local03, local04 wc
08880     38 00 90 3D |  if_ae	jmp	#LR__0732
08884                 | '   if variables(i).name=varname$ then j=i : exit
08884     11 15 02 F6 | 	mov	arg02, local03
08888     04 14 66 F0 | 	shl	arg02, #4
0888c     34 00 00 FF 
08890     F8 E5 05 F1 | 	add	objptr, ##27128
08894     F2 14 02 F1 | 	add	arg02, objptr
08898     0A 13 02 FB | 	rdlong	arg01, arg02
0889c     0F 15 02 F6 | 	mov	arg02, local01
088a0     34 00 00 FF 
088a4     F8 E5 85 F1 | 	sub	objptr, ##27128
088a8     C8 4B B1 FD | 	call	#__system___string_cmp
088ac     00 FA 0D F2 | 	cmp	result1, #0 wz
088b0     11 21 02 A6 |  if_e	mov	local02, local03
088b4     01 22 06 51 |  if_ne	add	local03, #1
088b8     C0 FF 9F 5D |  if_ne	jmp	#LR__0731
088bc                 | LR__0732
088bc                 | ' if j=-1 then compile_error(35) : return 35
088bc     FF FF 7F FF 
088c0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
088c4     10 00 90 5D |  if_ne	jmp	#LR__0733
088c8     23 12 06 F6 | 	mov	arg01, #35
088cc     04 E0 BF FD | 	call	#_compile_error
088d0     23 FA 05 F6 | 	mov	result1, #35
088d4     E0 00 90 FD | 	jmp	#LR__0734
088d8                 | LR__0733
088d8     6A 00 00 FF 
088dc     6C E4 05 F1 | 	add	objptr, ##54380
088e0     F2 24 02 FB | 	rdlong	local04, objptr
088e4     12 23 02 F6 | 	mov	local03, local04
088e8     01 22 66 F0 | 	shl	local03, #1
088ec     12 23 02 F1 | 	add	local03, local04
088f0     02 22 66 F0 | 	shl	local03, #2
088f4     03 00 00 FF 
088f8     00 E4 85 F1 | 	sub	objptr, ##1536
088fc     F2 22 02 F1 | 	add	local03, objptr
08900     08 22 06 F1 | 	add	local03, #8
08904     11 39 68 FC | 	wrlong	#28, local03
08908     03 00 00 FF 
0890c     00 E4 05 F1 | 	add	objptr, ##1536
08910     F2 24 02 FB | 	rdlong	local04, objptr
08914     12 23 02 F6 | 	mov	local03, local04
08918     01 22 66 F0 | 	shl	local03, #1
0891c     12 23 02 F1 | 	add	local03, local04
08920     02 22 66 F0 | 	shl	local03, #2
08924     03 00 00 FF 
08928     00 E4 85 F1 | 	sub	objptr, ##1536
0892c     F2 22 02 F1 | 	add	local03, objptr
08930     11 21 62 FC | 	wrlong	local02, local03
08934     03 00 00 FF 
08938     00 E4 05 F1 | 	add	objptr, ##1536
0893c     F2 24 02 FB | 	rdlong	local04, objptr
08940     01 24 06 F1 | 	add	local04, #1
08944     F2 24 62 FC | 	wrlong	local04, objptr
08948     12 23 02 F6 | 	mov	local03, local04
0894c     01 22 66 F0 | 	shl	local03, #1
08950     12 23 02 F1 | 	add	local03, local04
08954     02 22 66 F0 | 	shl	local03, #2
08958     03 00 00 FF 
0895c     00 E4 85 F1 | 	sub	objptr, ##1536
08960     F2 22 02 F1 | 	add	local03, objptr
08964     08 22 06 F1 | 	add	local03, #8
08968     11 97 68 FC | 	wrlong	#75, local03
0896c     03 00 00 FF 
08970     00 E4 05 F1 | 	add	objptr, ##1536
08974     F2 24 02 FB | 	rdlong	local04, objptr
08978     12 23 02 F6 | 	mov	local03, local04
0897c     01 22 66 F0 | 	shl	local03, #1
08980     12 23 02 F1 | 	add	local03, local04
08984     02 22 66 F0 | 	shl	local03, #2
08988     03 00 00 FF 
0898c     00 E4 85 F1 | 	sub	objptr, ##1536
08990     F2 22 02 F1 | 	add	local03, objptr
08994     11 01 68 FC | 	wrlong	#0, local03
08998     03 00 00 FF 
0899c     00 E4 05 F1 | 	add	objptr, ##1536
089a0     F2 24 02 FB | 	rdlong	local04, objptr
089a4     01 24 06 F1 | 	add	local04, #1
089a8     F2 24 62 FC | 	wrlong	local04, objptr
089ac     6A 00 00 FF 
089b0     6C E4 85 F1 | 	sub	objptr, ##54380
089b4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
089b4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
089b4                 | ' return 0
089b4     00 FA 05 F6 | 	mov	result1, #0
089b8                 | LR__0734
089b8     A7 F0 03 F6 | 	mov	ptra, fp
089bc     B2 00 A0 FD | 	call	#popregs_
089c0                 | _compile_next_ret
089c0     2D 00 64 FD | 	ret
089c4                 | 
089c4                 | ' 
089c4                 | ' 
089c4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
089c4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
089c4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
089c4                 | ' 
089c4                 | ' 
089c4                 | ' function compile_goto( ) as ulong
089c4                 | _compile_goto
089c4     03 4A 05 F6 | 	mov	COUNT_, #3
089c8     A8 00 A0 FD | 	call	#pushregs_
089cc     28 F0 07 F1 | 	add	ptra, #40
089d0                 | ' 
089d0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
089d0     57 00 00 FF 
089d4     34 E4 05 F1 | 	add	objptr, ##44596
089d8     F2 16 02 FB | 	rdlong	arg03, objptr
089dc     03 16 66 F0 | 	shl	arg03, #3
089e0     02 00 00 FF 
089e4     38 E4 85 F1 | 	sub	objptr, ##1080
089e8     F2 16 02 F1 | 	add	arg03, objptr
089ec     04 16 06 F1 | 	add	arg03, #4
089f0     0B 17 02 FB | 	rdlong	arg03, arg03
089f4     01 00 00 FF 
089f8     00 16 0E F2 | 	cmp	arg03, ##512 wz
089fc     54 00 00 FF 
08a00     FC E5 85 F1 | 	sub	objptr, ##43516
08a04     CC 02 90 5D |  if_ne	jmp	#LR__0745
08a08     57 00 00 FF 
08a0c     34 E4 05 F1 | 	add	objptr, ##44596
08a10     F2 16 02 FB | 	rdlong	arg03, objptr
08a14     01 16 06 F1 | 	add	arg03, #1
08a18     03 16 66 F0 | 	shl	arg03, #3
08a1c     02 00 00 FF 
08a20     38 E4 85 F1 | 	sub	objptr, ##1080
08a24     F2 16 02 F1 | 	add	arg03, objptr
08a28     04 16 06 F1 | 	add	arg03, #4
08a2c     0B 17 02 FB | 	rdlong	arg03, arg03
08a30     FE 17 0E F2 | 	cmp	arg03, #510 wz
08a34     54 00 00 FF 
08a38     FC E5 85 F1 | 	sub	objptr, ##43516
08a3c     94 02 90 5D |  if_ne	jmp	#LR__0745
08a40     57 00 00 FF 
08a44     34 E4 05 F1 | 	add	objptr, ##44596
08a48     F2 16 02 FB | 	rdlong	arg03, objptr
08a4c     03 16 66 F0 | 	shl	arg03, #3
08a50     02 00 00 FF 
08a54     38 E4 85 F1 | 	sub	objptr, ##1080
08a58     F2 16 02 F1 | 	add	arg03, objptr
08a5c     0B 13 02 FB | 	rdlong	arg01, arg03
08a60     00 14 06 F6 | 	mov	arg02, #0
08a64     54 00 00 FF 
08a68     FC E5 85 F1 | 	sub	objptr, ##43516
08a6c     D0 7B B1 FD | 	call	#__system____builtin_atoi
08a70     04 4E 05 F1 | 	add	fp, #4
08a74     A7 FA 61 FC | 	wrlong	result1, fp
08a78     6A 00 00 FF 
08a7c     6C E4 05 F1 | 	add	objptr, ##54380
08a80     F2 1E 02 FB | 	rdlong	local01, objptr
08a84     0F 21 02 F6 | 	mov	local02, local01
08a88     01 20 66 F0 | 	shl	local02, #1
08a8c     0F 21 02 F1 | 	add	local02, local01
08a90     02 20 66 F0 | 	shl	local02, #2
08a94     03 00 00 FF 
08a98     00 E4 85 F1 | 	sub	objptr, ##1536
08a9c     F2 20 02 F1 | 	add	local02, objptr
08aa0     08 20 06 F1 | 	add	local02, #8
08aa4     10 9D 68 FC | 	wrlong	#78, local02
08aa8     03 00 00 FF 
08aac     08 E4 05 F1 | 	add	objptr, ##1544
08ab0     F2 22 02 FB | 	rdlong	local03, objptr
08ab4     6A 00 00 FF 
08ab8     74 E4 85 F1 | 	sub	objptr, ##54388
08abc     04 4E 05 F1 | 	add	fp, #4
08ac0     A7 22 62 FC | 	wrlong	local03, fp
08ac4     08 4E 85 F1 | 	sub	fp, #8
08ac8                 | ' 
08ac8                 | '   gotoline=val%(lparts(ct).part$) 
08ac8                 | '   compiledline(lineptr).result_type=token_fast_goto
08ac8                 | ' ' now find a pointer to goto
08ac8                 | '   gotoptr=programstart
08ac8                 | '   do
08ac8                 | LR__0740
08ac8     10 4E 05 F1 | 	add	fp, #16
08acc     A7 12 02 F6 | 	mov	arg01, fp
08ad0     08 4E 85 F1 | 	sub	fp, #8
08ad4     A7 14 02 FB | 	rdlong	arg02, fp
08ad8     08 4E 85 F1 | 	sub	fp, #8
08adc     18 16 06 F6 | 	mov	arg03, #24
08ae0     0B 00 00 FF 
08ae4     CC E4 05 F1 | 	add	objptr, ##5836
08ae8     5C 3D B1 FD | 	call	#_psram_spin2_read1
08aec     0B 00 00 FF 
08af0     CC E4 85 F1 | 	sub	objptr, ##5836
08af4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08af4                 | '     if gotoheader(0)<>$FFFFFFFF then
08af4     10 4E 05 F1 | 	add	fp, #16
08af8     A7 22 02 FB | 	rdlong	local03, fp
08afc     10 4E 85 F1 | 	sub	fp, #16
08b00     FF FF 7F FF 
08b04     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08b08     24 00 90 AD |  if_e	jmp	#LR__0741
08b0c     08 4E 05 F1 | 	add	fp, #8
08b10     A7 22 02 FB | 	rdlong	local03, fp
08b14     04 4E 05 F1 | 	add	fp, #4
08b18     A7 22 62 FC | 	wrlong	local03, fp
08b1c     18 4E 05 F1 | 	add	fp, #24
08b20     A7 22 02 FB | 	rdlong	local03, fp
08b24     1C 4E 85 F1 | 	sub	fp, #28
08b28     A7 22 62 FC | 	wrlong	local03, fp
08b2c     08 4E 85 F1 | 	sub	fp, #8
08b30                 | LR__0741
08b30     24 4E 05 F1 | 	add	fp, #36
08b34     A7 22 02 FB | 	rdlong	local03, fp
08b38     24 4E 85 F1 | 	sub	fp, #36
08b3c     FF FF 3F FF 
08b40     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08b44     10 4E 05 51 |  if_ne	add	fp, #16
08b48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08b4c     10 4E 85 51 |  if_ne	sub	fp, #16
08b50     FF FF 7F 5F 
08b54     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08b58     1C 00 90 AD |  if_e	jmp	#LR__0742
08b5c     10 4E 05 F1 | 	add	fp, #16
08b60     A7 22 02 FB | 	rdlong	local03, fp
08b64     0C 4E 85 F1 | 	sub	fp, #12
08b68     A7 20 02 FB | 	rdlong	local02, fp
08b6c     04 4E 85 F1 | 	sub	fp, #4
08b70     10 23 0A F2 | 	cmp	local03, local02 wz
08b74     50 FF 9F 5D |  if_ne	jmp	#LR__0740
08b78                 | LR__0742
08b78                 | '   if gotoheader(0)=gotoline then
08b78     10 4E 05 F1 | 	add	fp, #16
08b7c     A7 22 02 FB | 	rdlong	local03, fp
08b80     0C 4E 85 F1 | 	sub	fp, #12
08b84     A7 1E 02 FB | 	rdlong	local01, fp
08b88     04 4E 85 F1 | 	sub	fp, #4
08b8c     0F 23 0A F2 | 	cmp	local03, local01 wz
08b90     7C 00 90 5D |  if_ne	jmp	#LR__0743
08b94     6A 00 00 FF 
08b98     6C E4 05 F1 | 	add	objptr, ##54380
08b9c     F2 1E 02 FB | 	rdlong	local01, objptr
08ba0     0F 21 02 F6 | 	mov	local02, local01
08ba4     01 20 66 F0 | 	shl	local02, #1
08ba8     0F 21 02 F1 | 	add	local02, local01
08bac     02 20 66 F0 | 	shl	local02, #2
08bb0     03 00 00 FF 
08bb4     00 E4 85 F1 | 	sub	objptr, ##1536
08bb8     F2 20 02 F1 | 	add	local02, objptr
08bbc     0C 4E 05 F1 | 	add	fp, #12
08bc0     A7 22 02 FB | 	rdlong	local03, fp
08bc4     10 23 62 FC | 	wrlong	local03, local02
08bc8     03 00 00 FF 
08bcc     00 E4 05 F1 | 	add	objptr, ##1536
08bd0     F2 1E 02 FB | 	rdlong	local01, objptr
08bd4     0F 21 02 F6 | 	mov	local02, local01
08bd8     01 20 66 F0 | 	shl	local02, #1
08bdc     0F 21 02 F1 | 	add	local02, local01
08be0     02 20 66 F0 | 	shl	local02, #2
08be4     03 00 00 FF 
08be8     00 E4 85 F1 | 	sub	objptr, ##1536
08bec     F2 20 02 F1 | 	add	local02, objptr
08bf0     08 4E 85 F1 | 	sub	fp, #8
08bf4     A7 22 02 FB | 	rdlong	local03, fp
08bf8     04 4E 85 F1 | 	sub	fp, #4
08bfc     04 20 06 F1 | 	add	local02, #4
08c00     10 23 62 FC | 	wrlong	local03, local02
08c04     67 00 00 FF 
08c08     6C E4 85 F1 | 	sub	objptr, ##52844
08c0c     A4 00 90 FD | 	jmp	#LR__0744
08c10                 | LR__0743
08c10     6A 00 00 FF 
08c14     6C E4 05 F1 | 	add	objptr, ##54380
08c18     F2 1E 02 FB | 	rdlong	local01, objptr
08c1c     0F 21 02 F6 | 	mov	local02, local01
08c20     01 20 66 F0 | 	shl	local02, #1
08c24     0F 21 02 F1 | 	add	local02, local01
08c28     02 20 66 F0 | 	shl	local02, #2
08c2c     03 00 00 FF 
08c30     00 E4 85 F1 | 	sub	objptr, ##1536
08c34     F2 20 02 F1 | 	add	local02, objptr
08c38     00 00 C0 FF 
08c3c     10 01 68 FC | 	wrlong	##-2147483648, local02
08c40     03 00 00 FF 
08c44     00 E4 05 F1 | 	add	objptr, ##1536
08c48     F2 1E 02 FB | 	rdlong	local01, objptr
08c4c     0F 21 02 F6 | 	mov	local02, local01
08c50     01 20 66 F0 | 	shl	local02, #1
08c54     0F 21 02 F1 | 	add	local02, local01
08c58     02 20 66 F0 | 	shl	local02, #2
08c5c     03 00 00 FF 
08c60     00 E4 85 F1 | 	sub	objptr, ##1536
08c64     F2 20 02 F1 | 	add	local02, objptr
08c68     04 4E 05 F1 | 	add	fp, #4
08c6c     A7 22 02 FB | 	rdlong	local03, fp
08c70     04 4E 85 F1 | 	sub	fp, #4
08c74     04 20 06 F1 | 	add	local02, #4
08c78     10 23 62 FC | 	wrlong	local03, local02
08c7c     03 00 00 FF 
08c80     00 E4 05 F1 | 	add	objptr, ##1536
08c84     F2 1E 02 FB | 	rdlong	local01, objptr
08c88     0F 21 02 F6 | 	mov	local02, local01
08c8c     01 20 66 F0 | 	shl	local02, #1
08c90     0F 21 02 F1 | 	add	local02, local01
08c94     02 20 66 F0 | 	shl	local02, #2
08c98     03 00 00 FF 
08c9c     00 E4 85 F1 | 	sub	objptr, ##1536
08ca0     F2 20 02 F1 | 	add	local02, objptr
08ca4     08 20 06 F1 | 	add	local02, #8
08ca8     10 A7 68 FC | 	wrlong	#83, local02
08cac     67 00 00 FF 
08cb0     6C E4 85 F1 | 	sub	objptr, ##52844
08cb4                 | LR__0744
08cb4     6A 00 00 FF 
08cb8     6C E4 05 F1 | 	add	objptr, ##54380
08cbc     F2 22 02 FB | 	rdlong	local03, objptr
08cc0     01 22 06 F1 | 	add	local03, #1
08cc4     F2 22 62 FC | 	wrlong	local03, objptr
08cc8     6A 00 00 FF 
08ccc     6C E4 85 F1 | 	sub	objptr, ##54380
08cd0     40 00 90 FD | 	jmp	#LR__0746
08cd4                 | LR__0745
08cd4                 | '    print "We have a slow goto, todo  "
08cd4     00 12 06 F6 | 	mov	arg01, #0
08cd8     00 A1 B1 FD | 	call	#__system___getiolock_0473
08cdc     FD 12 02 F6 | 	mov	arg01, result1
08ce0     68 47 B1 FD | 	call	#__system___lockmem
08ce4     67 01 00 FF 
08ce8     A2 15 06 F6 | 	mov	arg02, ##@LR__4948
08cec     00 12 06 F6 | 	mov	arg01, #0
08cf0     00 16 06 F6 | 	mov	arg03, #0
08cf4     58 54 B1 FD | 	call	#__system___basic_print_string
08cf8     00 12 06 F6 | 	mov	arg01, #0
08cfc     0A 14 06 F6 | 	mov	arg02, #10
08d00     00 16 06 F6 | 	mov	arg03, #0
08d04     F0 53 B1 FD | 	call	#__system___basic_print_char
08d08     00 12 06 F6 | 	mov	arg01, #0
08d0c     CC A0 B1 FD | 	call	#__system___getiolock_0473
08d10     FD 00 68 FC | 	wrlong	#0, result1
08d14                 | LR__0746
08d14                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08d14                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08d14                 | ' return 0
08d14     00 FA 05 F6 | 	mov	result1, #0
08d18     A7 F0 03 F6 | 	mov	ptra, fp
08d1c     B2 00 A0 FD | 	call	#popregs_
08d20                 | _compile_goto_ret
08d20     2D 00 64 FD | 	ret
08d24                 | 
08d24                 | ' 
08d24                 | ' 
08d24                 | ' 
08d24                 | ' 
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' 
08d24                 | ' 
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' 
08d24                 | ' 
08d24                 | ' function expr() as integer 
08d24                 | _expr
08d24     07 4A 05 F6 | 	mov	COUNT_, #7
08d28     A8 00 A0 FD | 	call	#pushregs_
08d2c                 | _expr_enter
08d2c     57 00 00 FF 
08d30     34 E4 05 F1 | 	add	objptr, ##44596
08d34     F2 24 02 FB | 	rdlong	local04, objptr
08d38     03 24 66 F0 | 	shl	local04, #3
08d3c     02 00 00 FF 
08d40     38 E4 85 F1 | 	sub	objptr, ##1080
08d44     F2 24 02 F1 | 	add	local04, objptr
08d48     04 24 06 F1 | 	add	local04, #4
08d4c     12 27 02 FB | 	rdlong	local05, local04
08d50                 | ' 
08d50                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08d50     FE 27 0E F2 | 	cmp	local05, #510 wz
08d54     54 00 00 FF 
08d58     FC E5 85 F1 | 	sub	objptr, ##43516
08d5c     C4 00 90 5D |  if_ne	jmp	#LR__0750
08d60     1D 1E 06 F6 | 	mov	local01, #29
08d64     FF 22 06 F6 | 	mov	local03, #255
08d68     0F 29 02 F6 | 	mov	local06, local01
08d6c     10 2B 02 F6 | 	mov	local07, local02
08d70     11 1F 02 F6 | 	mov	local01, local03
08d74     6A 00 00 FF 
08d78     6C E4 05 F1 | 	add	objptr, ##54380
08d7c     F2 26 02 FB | 	rdlong	local05, objptr
08d80     13 25 02 F6 | 	mov	local04, local05
08d84     01 24 66 F0 | 	shl	local04, #1
08d88     13 25 02 F1 | 	add	local04, local05
08d8c     02 24 66 F0 | 	shl	local04, #2
08d90     03 00 00 FF 
08d94     00 E4 85 F1 | 	sub	objptr, ##1536
08d98     F2 24 02 F1 | 	add	local04, objptr
08d9c     12 29 62 FC | 	wrlong	local06, local04
08da0     03 00 00 FF 
08da4     00 E4 05 F1 | 	add	objptr, ##1536
08da8     F2 28 02 FB | 	rdlong	local06, objptr
08dac     14 27 02 F6 | 	mov	local05, local06
08db0     01 26 66 F0 | 	shl	local05, #1
08db4     14 27 02 F1 | 	add	local05, local06
08db8     02 26 66 F0 | 	shl	local05, #2
08dbc     03 00 00 FF 
08dc0     00 E4 85 F1 | 	sub	objptr, ##1536
08dc4     F2 26 02 F1 | 	add	local05, objptr
08dc8     04 26 06 F1 | 	add	local05, #4
08dcc     13 2B 62 FC | 	wrlong	local07, local05
08dd0     03 00 00 FF 
08dd4     00 E4 05 F1 | 	add	objptr, ##1536
08dd8     F2 2A 02 FB | 	rdlong	local07, objptr
08ddc     15 29 02 F6 | 	mov	local06, local07
08de0     01 28 66 F0 | 	shl	local06, #1
08de4     15 29 02 F1 | 	add	local06, local07
08de8     02 28 66 F0 | 	shl	local06, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 28 02 F1 | 	add	local06, objptr
08df8     08 28 06 F1 | 	add	local06, #8
08dfc     14 1F 62 FC | 	wrlong	local01, local06
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 28 02 FB | 	rdlong	local06, objptr
08e0c     01 28 06 F1 | 	add	local06, #1
08e10     F2 28 62 FC | 	wrlong	local06, objptr
08e14     6A 00 00 FF 
08e18     6C E4 85 F1 | 	sub	objptr, ##54380
08e1c     1D FA 05 F6 | 	mov	result1, #29
08e20     54 01 90 FD | 	jmp	#LR__0753
08e24                 | LR__0750
08e24     00 1E 06 F6 | 	mov	local01, #0
08e28     58 01 B0 FD | 	call	#_addsub
08e2c     57 00 00 FF 
08e30     34 E4 05 F1 | 	add	objptr, ##44596
08e34     F2 24 02 FB | 	rdlong	local04, objptr
08e38     03 24 66 F0 | 	shl	local04, #3
08e3c     02 00 00 FF 
08e40     38 E4 85 F1 | 	sub	objptr, ##1080
08e44     F2 24 02 F1 | 	add	local04, objptr
08e48     04 24 06 F1 | 	add	local04, #4
08e4c     12 27 02 FB | 	rdlong	local05, local04
08e50                 | ' t3.result.uresult=0
08e50                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08e50                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08e50                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08e50     54 00 00 FF 
08e54     FC E5 85 F1 | 	sub	objptr, ##43516
08e58                 | LR__0751
08e58     1B 26 0E F2 | 	cmp	local05, #27 wz
08e5c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08e60     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08e64     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08e68     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08e6c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08e70     00 01 90 5D |  if_ne	jmp	#LR__0752
08e74     57 00 00 FF 
08e78     34 E4 05 F1 | 	add	objptr, ##44596
08e7c     F2 28 02 FB | 	rdlong	local06, objptr
08e80     01 28 06 F1 | 	add	local06, #1
08e84     F2 28 62 FC | 	wrlong	local06, objptr
08e88     57 00 00 FF 
08e8c     34 E4 85 F1 | 	sub	objptr, ##44596
08e90     F0 00 B0 FD | 	call	#_addsub
08e94     13 23 02 F6 | 	mov	local03, local05
08e98     0F 29 02 F6 | 	mov	local06, local01
08e9c     10 2B 02 F6 | 	mov	local07, local02
08ea0     11 27 02 F6 | 	mov	local05, local03
08ea4     6A 00 00 FF 
08ea8     6C E4 05 F1 | 	add	objptr, ##54380
08eac     F2 24 02 FB | 	rdlong	local04, objptr
08eb0     12 FB 01 F6 | 	mov	result1, local04
08eb4     01 FA 65 F0 | 	shl	result1, #1
08eb8     12 FB 01 F1 | 	add	result1, local04
08ebc     02 FA 65 F0 | 	shl	result1, #2
08ec0     03 00 00 FF 
08ec4     00 E4 85 F1 | 	sub	objptr, ##1536
08ec8     F2 FA 01 F1 | 	add	result1, objptr
08ecc     FD 28 62 FC | 	wrlong	local06, result1
08ed0     03 00 00 FF 
08ed4     00 E4 05 F1 | 	add	objptr, ##1536
08ed8     F2 28 02 FB | 	rdlong	local06, objptr
08edc     14 25 02 F6 | 	mov	local04, local06
08ee0     01 24 66 F0 | 	shl	local04, #1
08ee4     14 25 02 F1 | 	add	local04, local06
08ee8     02 24 66 F0 | 	shl	local04, #2
08eec     03 00 00 FF 
08ef0     00 E4 85 F1 | 	sub	objptr, ##1536
08ef4     F2 24 02 F1 | 	add	local04, objptr
08ef8     04 24 06 F1 | 	add	local04, #4
08efc     12 2B 62 FC | 	wrlong	local07, local04
08f00     03 00 00 FF 
08f04     00 E4 05 F1 | 	add	objptr, ##1536
08f08     F2 2A 02 FB | 	rdlong	local07, objptr
08f0c     15 29 02 F6 | 	mov	local06, local07
08f10     01 28 66 F0 | 	shl	local06, #1
08f14     15 29 02 F1 | 	add	local06, local07
08f18     02 28 66 F0 | 	shl	local06, #2
08f1c     03 00 00 FF 
08f20     00 E4 85 F1 | 	sub	objptr, ##1536
08f24     F2 28 02 F1 | 	add	local06, objptr
08f28     08 28 06 F1 | 	add	local06, #8
08f2c     14 27 62 FC | 	wrlong	local05, local06
08f30     03 00 00 FF 
08f34     00 E4 05 F1 | 	add	objptr, ##1536
08f38     F2 28 02 FB | 	rdlong	local06, objptr
08f3c     01 28 06 F1 | 	add	local06, #1
08f40     F2 28 62 FC | 	wrlong	local06, objptr
08f44     13 00 00 FF 
08f48     38 E4 85 F1 | 	sub	objptr, ##9784
08f4c     F2 24 02 FB | 	rdlong	local04, objptr
08f50     03 24 66 F0 | 	shl	local04, #3
08f54     02 00 00 FF 
08f58     38 E4 85 F1 | 	sub	objptr, ##1080
08f5c     F2 24 02 F1 | 	add	local04, objptr
08f60     04 24 06 F1 | 	add	local04, #4
08f64     12 27 02 FB | 	rdlong	local05, local04
08f68     54 00 00 FF 
08f6c     FC E5 85 F1 | 	sub	objptr, ##43516
08f70     E4 FE 9F FD | 	jmp	#LR__0751
08f74                 | LR__0752
08f74                 | ' return 0  
08f74     00 FA 05 F6 | 	mov	result1, #0
08f78                 | LR__0753
08f78     A7 F0 03 F6 | 	mov	ptra, fp
08f7c     B2 00 A0 FD | 	call	#popregs_
08f80                 | _expr_ret
08f80     2D 00 64 FD | 	ret
08f84                 | 
08f84                 | ' 
08f84                 | ' 
08f84                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08f84                 | ' 
08f84                 | ' function addsub() as integer 
08f84                 | _addsub
08f84     07 4A 05 F6 | 	mov	COUNT_, #7
08f88     A8 00 A0 FD | 	call	#pushregs_
08f8c                 | _addsub_enter
08f8c     00 1E 06 F6 | 	mov	local01, #0
08f90     50 01 B0 FD | 	call	#_muldiv
08f94     57 00 00 FF 
08f98     34 E4 05 F1 | 	add	objptr, ##44596
08f9c     F2 24 02 FB | 	rdlong	local04, objptr
08fa0     03 24 66 F0 | 	shl	local04, #3
08fa4     02 00 00 FF 
08fa8     38 E4 85 F1 | 	sub	objptr, ##1080
08fac     F2 24 02 F1 | 	add	local04, objptr
08fb0     04 24 06 F1 | 	add	local04, #4
08fb4     12 27 02 FB | 	rdlong	local05, local04
08fb8                 | ' t3.result.uresult=0
08fb8                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08fb8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08fb8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08fb8     54 00 00 FF 
08fbc     FC E5 85 F1 | 	sub	objptr, ##43516
08fc0                 | LR__0760
08fc0     01 26 0E F2 | 	cmp	local05, #1 wz
08fc4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08fc8     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08fcc     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08fd0     00 01 90 5D |  if_ne	jmp	#LR__0761
08fd4     57 00 00 FF 
08fd8     34 E4 05 F1 | 	add	objptr, ##44596
08fdc     F2 24 02 FB | 	rdlong	local04, objptr
08fe0     01 24 06 F1 | 	add	local04, #1
08fe4     F2 24 62 FC | 	wrlong	local04, objptr
08fe8     57 00 00 FF 
08fec     34 E4 85 F1 | 	sub	objptr, ##44596
08ff0     F0 00 B0 FD | 	call	#_muldiv
08ff4     13 23 02 F6 | 	mov	local03, local05
08ff8     0F 29 02 F6 | 	mov	local06, local01
08ffc     10 2B 02 F6 | 	mov	local07, local02
09000     11 27 02 F6 | 	mov	local05, local03
09004     6A 00 00 FF 
09008     6C E4 05 F1 | 	add	objptr, ##54380
0900c     F2 24 02 FB | 	rdlong	local04, objptr
09010     12 FB 01 F6 | 	mov	result1, local04
09014     01 FA 65 F0 | 	shl	result1, #1
09018     12 FB 01 F1 | 	add	result1, local04
0901c     02 FA 65 F0 | 	shl	result1, #2
09020     03 00 00 FF 
09024     00 E4 85 F1 | 	sub	objptr, ##1536
09028     F2 FA 01 F1 | 	add	result1, objptr
0902c     FD 28 62 FC | 	wrlong	local06, result1
09030     03 00 00 FF 
09034     00 E4 05 F1 | 	add	objptr, ##1536
09038     F2 28 02 FB | 	rdlong	local06, objptr
0903c     14 25 02 F6 | 	mov	local04, local06
09040     01 24 66 F0 | 	shl	local04, #1
09044     14 25 02 F1 | 	add	local04, local06
09048     02 24 66 F0 | 	shl	local04, #2
0904c     03 00 00 FF 
09050     00 E4 85 F1 | 	sub	objptr, ##1536
09054     F2 24 02 F1 | 	add	local04, objptr
09058     04 24 06 F1 | 	add	local04, #4
0905c     12 2B 62 FC | 	wrlong	local07, local04
09060     03 00 00 FF 
09064     00 E4 05 F1 | 	add	objptr, ##1536
09068     F2 2A 02 FB | 	rdlong	local07, objptr
0906c     15 29 02 F6 | 	mov	local06, local07
09070     01 28 66 F0 | 	shl	local06, #1
09074     15 29 02 F1 | 	add	local06, local07
09078     02 28 66 F0 | 	shl	local06, #2
0907c     03 00 00 FF 
09080     00 E4 85 F1 | 	sub	objptr, ##1536
09084     F2 28 02 F1 | 	add	local06, objptr
09088     08 28 06 F1 | 	add	local06, #8
0908c     14 27 62 FC | 	wrlong	local05, local06
09090     03 00 00 FF 
09094     00 E4 05 F1 | 	add	objptr, ##1536
09098     F2 28 02 FB | 	rdlong	local06, objptr
0909c     01 28 06 F1 | 	add	local06, #1
090a0     F2 28 62 FC | 	wrlong	local06, objptr
090a4     13 00 00 FF 
090a8     38 E4 85 F1 | 	sub	objptr, ##9784
090ac     F2 24 02 FB | 	rdlong	local04, objptr
090b0     03 24 66 F0 | 	shl	local04, #3
090b4     02 00 00 FF 
090b8     38 E4 85 F1 | 	sub	objptr, ##1080
090bc     F2 24 02 F1 | 	add	local04, objptr
090c0     04 24 06 F1 | 	add	local04, #4
090c4     12 27 02 FB | 	rdlong	local05, local04
090c8     54 00 00 FF 
090cc     FC E5 85 F1 | 	sub	objptr, ##43516
090d0     EC FE 9F FD | 	jmp	#LR__0760
090d4                 | LR__0761
090d4                 | '   return 0
090d4     00 FA 05 F6 | 	mov	result1, #0
090d8     A7 F0 03 F6 | 	mov	ptra, fp
090dc     B2 00 A0 FD | 	call	#popregs_
090e0                 | _addsub_ret
090e0     2D 00 64 FD | 	ret
090e4                 | 
090e4                 | ' 
090e4                 | ' sub muldiv()
090e4                 | _muldiv
090e4     08 4A 05 F6 | 	mov	COUNT_, #8
090e8     A8 00 A0 FD | 	call	#pushregs_
090ec                 | _muldiv_enter
090ec     00 1E 06 F6 | 	mov	local01, #0
090f0     58 01 B0 FD | 	call	#_getvalue
090f4     57 00 00 FF 
090f8     34 E4 05 F1 | 	add	objptr, ##44596
090fc     F2 24 02 FB | 	rdlong	local04, objptr
09100     03 24 66 F0 | 	shl	local04, #3
09104     02 00 00 FF 
09108     38 E4 85 F1 | 	sub	objptr, ##1080
0910c     F2 24 02 F1 | 	add	local04, objptr
09110     04 24 06 F1 | 	add	local04, #4
09114     12 27 02 FB | 	rdlong	local05, local04
09118                 | ' t3.result.uresult=0
09118                 | ' getvalue()    
09118                 | ' op = lparts(ct).token
09118                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09118     54 00 00 FF 
0911c     FC E5 85 F1 | 	sub	objptr, ##43516
09120                 | LR__0770
09120     05 26 0E F2 | 	cmp	local05, #5 wz
09124     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09128     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0912c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09130     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09134     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09138     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0913c     00 01 90 5D |  if_ne	jmp	#LR__0771
09140     57 00 00 FF 
09144     34 E4 05 F1 | 	add	objptr, ##44596
09148     F2 24 02 FB | 	rdlong	local04, objptr
0914c     01 24 06 F1 | 	add	local04, #1
09150     F2 24 62 FC | 	wrlong	local04, objptr
09154     57 00 00 FF 
09158     34 E4 85 F1 | 	sub	objptr, ##44596
0915c     EC 00 B0 FD | 	call	#_getvalue
09160     13 23 02 F6 | 	mov	local03, local05
09164     0F 29 02 F6 | 	mov	local06, local01
09168     10 2B 02 F6 | 	mov	local07, local02
0916c     11 27 02 F6 | 	mov	local05, local03
09170     6A 00 00 FF 
09174     6C E4 05 F1 | 	add	objptr, ##54380
09178     F2 24 02 FB | 	rdlong	local04, objptr
0917c     12 2D 02 F6 | 	mov	local08, local04
09180     01 2C 66 F0 | 	shl	local08, #1
09184     12 2D 02 F1 | 	add	local08, local04
09188     02 2C 66 F0 | 	shl	local08, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 2C 02 F1 | 	add	local08, objptr
09198     16 29 62 FC | 	wrlong	local06, local08
0919c     03 00 00 FF 
091a0     00 E4 05 F1 | 	add	objptr, ##1536
091a4     F2 2C 02 FB | 	rdlong	local08, objptr
091a8     16 29 02 F6 | 	mov	local06, local08
091ac     01 28 66 F0 | 	shl	local06, #1
091b0     16 29 02 F1 | 	add	local06, local08
091b4     02 28 66 F0 | 	shl	local06, #2
091b8     03 00 00 FF 
091bc     00 E4 85 F1 | 	sub	objptr, ##1536
091c0     F2 28 02 F1 | 	add	local06, objptr
091c4     04 28 06 F1 | 	add	local06, #4
091c8     14 2B 62 FC | 	wrlong	local07, local06
091cc     03 00 00 FF 
091d0     00 E4 05 F1 | 	add	objptr, ##1536
091d4     F2 2C 02 FB | 	rdlong	local08, objptr
091d8     16 2B 02 F6 | 	mov	local07, local08
091dc     01 2A 66 F0 | 	shl	local07, #1
091e0     16 2B 02 F1 | 	add	local07, local08
091e4     02 2A 66 F0 | 	shl	local07, #2
091e8     03 00 00 FF 
091ec     00 E4 85 F1 | 	sub	objptr, ##1536
091f0     F2 2A 02 F1 | 	add	local07, objptr
091f4     08 2A 06 F1 | 	add	local07, #8
091f8     15 27 62 FC | 	wrlong	local05, local07
091fc     03 00 00 FF 
09200     00 E4 05 F1 | 	add	objptr, ##1536
09204     F2 28 02 FB | 	rdlong	local06, objptr
09208     01 28 06 F1 | 	add	local06, #1
0920c     F2 28 62 FC | 	wrlong	local06, objptr
09210     13 00 00 FF 
09214     38 E4 85 F1 | 	sub	objptr, ##9784
09218     F2 24 02 FB | 	rdlong	local04, objptr
0921c     03 24 66 F0 | 	shl	local04, #3
09220     02 00 00 FF 
09224     38 E4 85 F1 | 	sub	objptr, ##1080
09228     F2 24 02 F1 | 	add	local04, objptr
0922c     04 24 06 F1 | 	add	local04, #4
09230     12 27 02 FB | 	rdlong	local05, local04
09234     54 00 00 FF 
09238     FC E5 85 F1 | 	sub	objptr, ##43516
0923c     E0 FE 9F FD | 	jmp	#LR__0770
09240                 | LR__0771
09240     A7 F0 03 F6 | 	mov	ptra, fp
09244     B2 00 A0 FD | 	call	#popregs_
09248                 | _muldiv_ret
09248     2D 00 64 FD | 	ret
0924c                 | 
0924c                 | ' 
0924c                 | ' sub getvalue() 
0924c                 | _getvalue
0924c     0B 4A 05 F6 | 	mov	COUNT_, #11
09250     A8 00 A0 FD | 	call	#pushregs_
09254                 | _getvalue_enter
09254     01 24 06 F6 | 	mov	local04, #1
09258     00 1E 06 F6 | 	mov	local01, #0
0925c     1D 22 06 F6 | 	mov	local03, #29
09260     57 00 00 FF 
09264     34 E4 05 F1 | 	add	objptr, ##44596
09268     F2 16 02 FB | 	rdlong	arg03, objptr
0926c     03 16 66 F0 | 	shl	arg03, #3
09270     02 00 00 FF 
09274     38 E4 85 F1 | 	sub	objptr, ##1080
09278     F2 16 02 F1 | 	add	arg03, objptr
0927c     04 16 06 F1 | 	add	arg03, #4
09280     0B 27 02 FB | 	rdlong	local05, arg03
09284                 | ' m=1
09284                 | ' t1.result.uresult=0: t1.result_type=result_uint
09284                 | ' op=lparts(ct).token
09284                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09284     02 26 0E F2 | 	cmp	local05, #2 wz
09288     54 00 00 FF 
0928c     FC E5 85 F1 | 	sub	objptr, ##43516
09290     38 00 90 5D |  if_ne	jmp	#LR__0780
09294     01 24 66 F6 | 	neg	local04, #1
09298     57 00 00 FF 
0929c     34 E4 05 F1 | 	add	objptr, ##44596
092a0     F2 26 02 FB | 	rdlong	local05, objptr
092a4     01 26 06 F1 | 	add	local05, #1
092a8     F2 26 62 FC | 	wrlong	local05, objptr
092ac     03 26 66 F0 | 	shl	local05, #3
092b0     02 00 00 FF 
092b4     38 E4 85 F1 | 	sub	objptr, ##1080
092b8     F2 26 02 F1 | 	add	local05, objptr
092bc     04 26 06 F1 | 	add	local05, #4
092c0     13 27 02 FB | 	rdlong	local05, local05
092c4     54 00 00 FF 
092c8     FC E5 85 F1 | 	sub	objptr, ##43516
092cc                 | LR__0780
092cc                 | ' select case op
092cc     01 00 00 FF 
092d0     00 26 0E F2 | 	cmp	local05, ##512 wz
092d4     3C 00 90 AD |  if_e	jmp	#LR__0781
092d8     01 00 00 FF 
092dc     01 26 0E F2 | 	cmp	local05, ##513 wz
092e0     88 01 90 AD |  if_e	jmp	#LR__0784
092e4     01 00 00 FF 
092e8     02 26 0E F2 | 	cmp	local05, ##514 wz
092ec     84 02 90 AD |  if_e	jmp	#LR__0785
092f0     01 00 00 FF 
092f4     03 26 0E F2 | 	cmp	local05, ##515 wz
092f8     E8 03 90 AD |  if_e	jmp	#LR__0788
092fc     01 00 00 FF 
09300     04 26 0E F2 | 	cmp	local05, ##516 wz
09304     B8 05 90 AD |  if_e	jmp	#LR__0793
09308     15 26 0E F2 | 	cmp	local05, #21 wz
0930c     D8 05 90 AD |  if_e	jmp	#LR__0794
09310     48 06 90 FD | 	jmp	#LR__0795
09314                 | LR__0781
09314                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09314     01 24 0E F2 | 	cmp	local04, #1 wz
09318     3C 00 90 5D |  if_ne	jmp	#LR__0782
0931c     57 00 00 FF 
09320     34 E4 05 F1 | 	add	objptr, ##44596
09324     F2 26 02 FB | 	rdlong	local05, objptr
09328     03 26 66 F0 | 	shl	local05, #3
0932c     02 00 00 FF 
09330     38 E4 85 F1 | 	sub	objptr, ##1080
09334     F2 26 02 F1 | 	add	local05, objptr
09338     13 13 02 FB | 	rdlong	arg01, local05
0933c     00 14 06 F6 | 	mov	arg02, #0
09340     54 00 00 FF 
09344     FC E5 85 F1 | 	sub	objptr, ##43516
09348     F4 72 B1 FD | 	call	#__system____builtin_atoi
0934c     FD 24 02 FD | 	qmul	local04, result1
09350     18 1E 62 FD | 	getqx	local01
09354     1C 22 06 F6 | 	mov	local03, #28
09358                 | LR__0782
09358                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09358     FF FF 7F FF 
0935c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09360     3C 00 90 5D |  if_ne	jmp	#LR__0783
09364     57 00 00 FF 
09368     34 E4 05 F1 | 	add	objptr, ##44596
0936c     F2 26 02 FB | 	rdlong	local05, objptr
09370     03 26 66 F0 | 	shl	local05, #3
09374     02 00 00 FF 
09378     38 E4 85 F1 | 	sub	objptr, ##1080
0937c     F2 26 02 F1 | 	add	local05, objptr
09380     13 13 02 FB | 	rdlong	arg01, local05
09384     00 14 06 F6 | 	mov	arg02, #0
09388     54 00 00 FF 
0938c     FC E5 85 F1 | 	sub	objptr, ##43516
09390     AC 72 B1 FD | 	call	#__system____builtin_atoi
09394     FD 24 02 FD | 	qmul	local04, result1
09398     18 1E 62 FD | 	getqx	local01
0939c     1C 22 06 F6 | 	mov	local03, #28
093a0                 | LR__0783
093a0     0F 29 02 F6 | 	mov	local06, local01
093a4     10 2B 02 F6 | 	mov	local07, local02
093a8     11 27 02 F6 | 	mov	local05, local03
093ac     6A 00 00 FF 
093b0     6C E4 05 F1 | 	add	objptr, ##54380
093b4     F2 1E 02 FB | 	rdlong	local01, objptr
093b8     0F 25 02 F6 | 	mov	local04, local01
093bc     01 24 66 F0 | 	shl	local04, #1
093c0     0F 25 02 F1 | 	add	local04, local01
093c4     02 24 66 F0 | 	shl	local04, #2
093c8     03 00 00 FF 
093cc     00 E4 85 F1 | 	sub	objptr, ##1536
093d0     F2 24 02 F1 | 	add	local04, objptr
093d4     12 29 62 FC | 	wrlong	local06, local04
093d8     03 00 00 FF 
093dc     00 E4 05 F1 | 	add	objptr, ##1536
093e0     F2 28 02 FB | 	rdlong	local06, objptr
093e4     14 1F 02 F6 | 	mov	local01, local06
093e8     01 1E 66 F0 | 	shl	local01, #1
093ec     14 1F 02 F1 | 	add	local01, local06
093f0     02 1E 66 F0 | 	shl	local01, #2
093f4     03 00 00 FF 
093f8     00 E4 85 F1 | 	sub	objptr, ##1536
093fc     F2 1E 02 F1 | 	add	local01, objptr
09400     04 1E 06 F1 | 	add	local01, #4
09404     0F 2B 62 FC | 	wrlong	local07, local01
09408     03 00 00 FF 
0940c     00 E4 05 F1 | 	add	objptr, ##1536
09410     F2 2A 02 FB | 	rdlong	local07, objptr
09414     15 29 02 F6 | 	mov	local06, local07
09418     01 28 66 F0 | 	shl	local06, #1
0941c     15 29 02 F1 | 	add	local06, local07
09420     02 28 66 F0 | 	shl	local06, #2
09424     03 00 00 FF 
09428     00 E4 85 F1 | 	sub	objptr, ##1536
0942c     F2 28 02 F1 | 	add	local06, objptr
09430     08 28 06 F1 | 	add	local06, #8
09434     14 27 62 FC | 	wrlong	local05, local06
09438     03 00 00 FF 
0943c     00 E4 05 F1 | 	add	objptr, ##1536
09440     F2 28 02 FB | 	rdlong	local06, objptr
09444     01 28 06 F1 | 	add	local06, #1
09448     F2 28 62 FC | 	wrlong	local06, objptr
0944c     13 00 00 FF 
09450     38 E4 85 F1 | 	sub	objptr, ##9784
09454     F2 28 02 FB | 	rdlong	local06, objptr
09458     01 28 06 F1 | 	add	local06, #1
0945c     F2 28 62 FC | 	wrlong	local06, objptr
09460     57 00 00 FF 
09464     34 E4 85 F1 | 	sub	objptr, ##44596
09468     14 05 90 FD | 	jmp	#LR__0796
0946c                 | LR__0784
0946c     57 00 00 FF 
09470     34 E4 05 F1 | 	add	objptr, ##44596
09474     F2 28 02 FB | 	rdlong	local06, objptr
09478     03 28 66 F0 | 	shl	local06, #3
0947c     02 00 00 FF 
09480     38 E4 85 F1 | 	sub	objptr, ##1080
09484     F2 28 02 F1 | 	add	local06, objptr
09488     14 13 02 FB | 	rdlong	arg01, local06
0948c     00 14 06 F6 | 	mov	arg02, #0
09490     54 00 00 FF 
09494     FC E5 85 F1 | 	sub	objptr, ##43516
09498     A4 71 B1 FD | 	call	#__system____builtin_atoi
0949c     FD 24 02 FD | 	qmul	local04, result1
094a0     6A 00 00 FF 
094a4     6C E4 05 F1 | 	add	objptr, ##54380
094a8     F2 28 02 FB | 	rdlong	local06, objptr
094ac     14 2D 02 F6 | 	mov	local08, local06
094b0     01 2C 66 F0 | 	shl	local08, #1
094b4     14 2D 02 F1 | 	add	local08, local06
094b8     02 2C 66 F0 | 	shl	local08, #2
094bc     03 00 00 FF 
094c0     00 E4 85 F1 | 	sub	objptr, ##1536
094c4     F2 2C 02 F1 | 	add	local08, objptr
094c8     03 00 00 FF 
094cc     00 E4 05 F1 | 	add	objptr, ##1536
094d0     18 1E 62 FD | 	getqx	local01
094d4     1C 22 06 F6 | 	mov	local03, #28
094d8     0F 29 02 F6 | 	mov	local06, local01
094dc     10 2B 02 F6 | 	mov	local07, local02
094e0     16 29 62 FC | 	wrlong	local06, local08
094e4     11 2D 02 F6 | 	mov	local08, local03
094e8     F2 28 02 FB | 	rdlong	local06, objptr
094ec     14 27 02 F6 | 	mov	local05, local06
094f0     01 26 66 F0 | 	shl	local05, #1
094f4     14 27 02 F1 | 	add	local05, local06
094f8     02 26 66 F0 | 	shl	local05, #2
094fc     03 00 00 FF 
09500     00 E4 85 F1 | 	sub	objptr, ##1536
09504     F2 26 02 F1 | 	add	local05, objptr
09508     04 26 06 F1 | 	add	local05, #4
0950c     13 2B 62 FC | 	wrlong	local07, local05
09510     03 00 00 FF 
09514     00 E4 05 F1 | 	add	objptr, ##1536
09518     F2 2A 02 FB | 	rdlong	local07, objptr
0951c     15 29 02 F6 | 	mov	local06, local07
09520     01 28 66 F0 | 	shl	local06, #1
09524     15 29 02 F1 | 	add	local06, local07
09528     02 28 66 F0 | 	shl	local06, #2
0952c     03 00 00 FF 
09530     00 E4 85 F1 | 	sub	objptr, ##1536
09534     F2 28 02 F1 | 	add	local06, objptr
09538     08 28 06 F1 | 	add	local06, #8
0953c     14 2D 62 FC | 	wrlong	local08, local06
09540     03 00 00 FF 
09544     00 E4 05 F1 | 	add	objptr, ##1536
09548     F2 28 02 FB | 	rdlong	local06, objptr
0954c     01 28 06 F1 | 	add	local06, #1
09550     F2 28 62 FC | 	wrlong	local06, objptr
09554     13 00 00 FF 
09558     38 E4 85 F1 | 	sub	objptr, ##9784
0955c     F2 28 02 FB | 	rdlong	local06, objptr
09560     01 28 06 F1 | 	add	local06, #1
09564     F2 28 62 FC | 	wrlong	local06, objptr
09568     57 00 00 FF 
0956c     34 E4 85 F1 | 	sub	objptr, ##44596
09570     0C 04 90 FD | 	jmp	#LR__0796
09574                 | LR__0785
09574                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09574     01 24 0E F2 | 	cmp	local04, #1 wz
09578     48 00 90 5D |  if_ne	jmp	#LR__0786
0957c     00 C0 1F FF 
09580     00 28 06 F6 | 	mov	local06, ##1065353216
09584     57 00 00 FF 
09588     34 E4 05 F1 | 	add	objptr, ##44596
0958c     F2 2C 02 FB | 	rdlong	local08, objptr
09590     03 2C 66 F0 | 	shl	local08, #3
09594     02 00 00 FF 
09598     38 E4 85 F1 | 	sub	objptr, ##1080
0959c     F2 2C 02 F1 | 	add	local08, objptr
095a0     16 13 02 FB | 	rdlong	arg01, local08
095a4     54 00 00 FF 
095a8     FC E5 85 F1 | 	sub	objptr, ##43516
095ac     00 72 B1 FD | 	call	#__system____builtin_atof
095b0     FD 14 02 F6 | 	mov	arg02, result1
095b4     14 13 02 F6 | 	mov	arg01, local06
095b8     0C 6A B1 FD | 	call	#__system___float_mul
095bc     FD 1E 02 F6 | 	mov	local01, result1
095c0     1E 22 06 F6 | 	mov	local03, #30
095c4                 | LR__0786
095c4                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
095c4     FF FF 7F FF 
095c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
095cc     48 00 90 5D |  if_ne	jmp	#LR__0787
095d0     00 C0 5F FF 
095d4     00 28 06 F6 | 	mov	local06, ##-1082130432
095d8     57 00 00 FF 
095dc     34 E4 05 F1 | 	add	objptr, ##44596
095e0     F2 2C 02 FB | 	rdlong	local08, objptr
095e4     03 2C 66 F0 | 	shl	local08, #3
095e8     02 00 00 FF 
095ec     38 E4 85 F1 | 	sub	objptr, ##1080
095f0     F2 2C 02 F1 | 	add	local08, objptr
095f4     16 13 02 FB | 	rdlong	arg01, local08
095f8     54 00 00 FF 
095fc     FC E5 85 F1 | 	sub	objptr, ##43516
09600     AC 71 B1 FD | 	call	#__system____builtin_atof
09604     FD 14 02 F6 | 	mov	arg02, result1
09608     14 13 02 F6 | 	mov	arg01, local06
0960c     B8 69 B1 FD | 	call	#__system___float_mul
09610     FD 1E 02 F6 | 	mov	local01, result1
09614     1E 22 06 F6 | 	mov	local03, #30
09618                 | LR__0787
09618     0F 29 02 F6 | 	mov	local06, local01
0961c     10 2B 02 F6 | 	mov	local07, local02
09620     11 27 02 F6 | 	mov	local05, local03
09624     6A 00 00 FF 
09628     6C E4 05 F1 | 	add	objptr, ##54380
0962c     F2 1E 02 FB | 	rdlong	local01, objptr
09630     0F 2D 02 F6 | 	mov	local08, local01
09634     01 2C 66 F0 | 	shl	local08, #1
09638     0F 2D 02 F1 | 	add	local08, local01
0963c     02 2C 66 F0 | 	shl	local08, #2
09640     03 00 00 FF 
09644     00 E4 85 F1 | 	sub	objptr, ##1536
09648     F2 2C 02 F1 | 	add	local08, objptr
0964c     16 29 62 FC | 	wrlong	local06, local08
09650     03 00 00 FF 
09654     00 E4 05 F1 | 	add	objptr, ##1536
09658     F2 2C 02 FB | 	rdlong	local08, objptr
0965c     16 29 02 F6 | 	mov	local06, local08
09660     01 28 66 F0 | 	shl	local06, #1
09664     16 29 02 F1 | 	add	local06, local08
09668     02 28 66 F0 | 	shl	local06, #2
0966c     03 00 00 FF 
09670     00 E4 85 F1 | 	sub	objptr, ##1536
09674     F2 28 02 F1 | 	add	local06, objptr
09678     04 28 06 F1 | 	add	local06, #4
0967c     14 2B 62 FC | 	wrlong	local07, local06
09680     03 00 00 FF 
09684     00 E4 05 F1 | 	add	objptr, ##1536
09688     F2 2C 02 FB | 	rdlong	local08, objptr
0968c     16 2B 02 F6 | 	mov	local07, local08
09690     01 2A 66 F0 | 	shl	local07, #1
09694     16 2B 02 F1 | 	add	local07, local08
09698     02 2A 66 F0 | 	shl	local07, #2
0969c     03 00 00 FF 
096a0     00 E4 85 F1 | 	sub	objptr, ##1536
096a4     F2 2A 02 F1 | 	add	local07, objptr
096a8     08 2A 06 F1 | 	add	local07, #8
096ac     15 27 62 FC | 	wrlong	local05, local07
096b0     03 00 00 FF 
096b4     00 E4 05 F1 | 	add	objptr, ##1536
096b8     F2 28 02 FB | 	rdlong	local06, objptr
096bc     01 28 06 F1 | 	add	local06, #1
096c0     F2 28 62 FC | 	wrlong	local06, objptr
096c4     13 00 00 FF 
096c8     38 E4 85 F1 | 	sub	objptr, ##9784
096cc     F2 28 02 FB | 	rdlong	local06, objptr
096d0     01 28 06 F1 | 	add	local06, #1
096d4     F2 28 62 FC | 	wrlong	local06, objptr
096d8     57 00 00 FF 
096dc     34 E4 85 F1 | 	sub	objptr, ##44596
096e0     9C 02 90 FD | 	jmp	#LR__0796
096e4                 | LR__0788
096e4     1F 22 06 F6 | 	mov	local03, #31
096e8     57 00 00 FF 
096ec     34 E4 05 F1 | 	add	objptr, ##44596
096f0     F2 16 02 FB | 	rdlong	arg03, objptr
096f4     03 16 66 F0 | 	shl	arg03, #3
096f8     02 00 00 FF 
096fc     38 E4 85 F1 | 	sub	objptr, ##1080
09700     F2 16 02 F1 | 	add	arg03, objptr
09704     0B 13 02 FB | 	rdlong	arg01, arg03
09708     54 00 00 FF 
0970c     FC E5 85 F1 | 	sub	objptr, ##43516
09710     09 2F 02 F6 | 	mov	local09, arg01
09714     97 06 48 FB | 	callpa	#(@LR__0790-@LR__0789)>>2,fcache_load_ptr_
09718                 | LR__0789
09718     17 FB C9 FA | 	rdbyte	result1, local09 wz
0971c     01 2E 06 51 |  if_ne	add	local09, #1
09720     F4 FF 9F 5D |  if_ne	jmp	#LR__0789
09724                 | LR__0790
09724     09 2F 82 F1 | 	sub	local09, arg01
09728     17 FB 01 F6 | 	mov	result1, local09
0972c     7B 00 00 FF 
09730     C4 E4 05 F1 | 	add	objptr, ##63172
09734     F2 FA 61 FC | 	wrlong	result1, objptr
09738     5C E4 85 F1 | 	sub	objptr, #92
0973c     F2 12 02 FB | 	rdlong	arg01, objptr
09740     FD 12 82 F1 | 	sub	arg01, result1
09744     04 12 86 F1 | 	sub	arg01, #4
09748     03 12 26 F5 | 	andn	arg01, #3
0974c     F2 12 62 FC | 	wrlong	arg01, objptr
09750     5C E4 05 F1 | 	add	objptr, #92
09754     F2 14 02 FB | 	rdlong	arg02, objptr
09758     7B 00 00 FF 
0975c     C4 E4 85 F1 | 	sub	objptr, ##63172
09760     0C FA B0 FD | 	call	#_pslpoke
09764                 | '     pslpoke memtop,l
09764                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09764     01 30 06 F6 | 	mov	local10, #1
09768     7B 00 00 FF 
0976c     C4 E4 05 F1 | 	add	objptr, ##63172
09770     F2 32 02 FB | 	rdlong	local11, objptr
09774     7B 00 00 FF 
09778     C4 E4 85 F1 | 	sub	objptr, ##63172
0977c     01 32 06 F1 | 	add	local11, #1
09780                 | LR__0791
09780     19 31 52 F2 | 	cmps	local10, local11 wc
09784     5C 00 90 3D |  if_ae	jmp	#LR__0792
09788     7B 00 00 FF 
0978c     68 E4 05 F1 | 	add	objptr, ##63080
09790     F2 2A 02 FB | 	rdlong	local07, objptr
09794     03 2A 06 F1 | 	add	local07, #3
09798     18 2B 02 F1 | 	add	local07, local10
0979c     24 00 00 FF 
097a0     34 E4 85 F1 | 	sub	objptr, ##18484
097a4     F2 2C 02 FB | 	rdlong	local08, objptr
097a8     03 2C 66 F0 | 	shl	local08, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 2C 02 F1 | 	add	local08, objptr
097b8     16 13 02 FB | 	rdlong	arg01, local08
097bc     18 15 02 F6 | 	mov	arg02, local10
097c0     01 16 06 F6 | 	mov	arg03, #1
097c4     54 00 00 FF 
097c8     FC E5 85 F1 | 	sub	objptr, ##43516
097cc     D8 5D B1 FD | 	call	#__system__Mid_S
097d0     FD 14 C2 FA | 	rdbyte	arg02, result1
097d4     15 13 02 F6 | 	mov	arg01, local07
097d8     24 FA B0 FD | 	call	#_pspoke
097dc     01 30 06 F1 | 	add	local10, #1
097e0     9C FF 9F FD | 	jmp	#LR__0791
097e4                 | LR__0792
097e4     7B 00 00 FF 
097e8     68 E4 05 F1 | 	add	objptr, ##63080
097ec     F2 1E 02 FB | 	rdlong	local01, objptr
097f0     2B 22 06 F6 | 	mov	local03, #43
097f4     0F 29 02 F6 | 	mov	local06, local01
097f8     10 2B 02 F6 | 	mov	local07, local02
097fc     11 33 02 F6 | 	mov	local11, local03
09800     10 00 00 FF 
09804     FC E5 85 F1 | 	sub	objptr, ##8700
09808     F2 30 02 FB | 	rdlong	local10, objptr
0980c     18 2D 02 F6 | 	mov	local08, local10
09810     01 2C 66 F0 | 	shl	local08, #1
09814     18 2D 02 F1 | 	add	local08, local10
09818     02 2C 66 F0 | 	shl	local08, #2
0981c     03 00 00 FF 
09820     00 E4 85 F1 | 	sub	objptr, ##1536
09824     F2 2C 02 F1 | 	add	local08, objptr
09828     16 29 62 FC | 	wrlong	local06, local08
0982c     03 00 00 FF 
09830     00 E4 05 F1 | 	add	objptr, ##1536
09834     F2 30 02 FB | 	rdlong	local10, objptr
09838     18 2D 02 F6 | 	mov	local08, local10
0983c     01 2C 66 F0 | 	shl	local08, #1
09840     18 2D 02 F1 | 	add	local08, local10
09844     02 2C 66 F0 | 	shl	local08, #2
09848     03 00 00 FF 
0984c     00 E4 85 F1 | 	sub	objptr, ##1536
09850     F2 2C 02 F1 | 	add	local08, objptr
09854     04 2C 06 F1 | 	add	local08, #4
09858     16 2B 62 FC | 	wrlong	local07, local08
0985c     03 00 00 FF 
09860     00 E4 05 F1 | 	add	objptr, ##1536
09864     F2 30 02 FB | 	rdlong	local10, objptr
09868     18 2D 02 F6 | 	mov	local08, local10
0986c     01 2C 66 F0 | 	shl	local08, #1
09870     18 2D 02 F1 | 	add	local08, local10
09874     02 2C 66 F0 | 	shl	local08, #2
09878     03 00 00 FF 
0987c     00 E4 85 F1 | 	sub	objptr, ##1536
09880     F2 2C 02 F1 | 	add	local08, objptr
09884     08 2C 06 F1 | 	add	local08, #8
09888     16 33 62 FC | 	wrlong	local11, local08
0988c     03 00 00 FF 
09890     00 E4 05 F1 | 	add	objptr, ##1536
09894     F2 28 02 FB | 	rdlong	local06, objptr
09898     01 28 06 F1 | 	add	local06, #1
0989c     F2 28 62 FC | 	wrlong	local06, objptr
098a0     13 00 00 FF 
098a4     38 E4 85 F1 | 	sub	objptr, ##9784
098a8     F2 28 02 FB | 	rdlong	local06, objptr
098ac     01 28 06 F1 | 	add	local06, #1
098b0     F2 28 62 FC | 	wrlong	local06, objptr
098b4     57 00 00 FF 
098b8     34 E4 85 F1 | 	sub	objptr, ##44596
098bc     C0 00 90 FD | 	jmp	#LR__0796
098c0                 | LR__0793
098c0     12 13 02 F6 | 	mov	arg01, local04
098c4     B8 03 B0 FD | 	call	#_getvar
098c8     57 00 00 FF 
098cc     34 E4 05 F1 | 	add	objptr, ##44596
098d0     F2 28 02 FB | 	rdlong	local06, objptr
098d4     01 28 06 F1 | 	add	local06, #1
098d8     F2 28 62 FC | 	wrlong	local06, objptr
098dc     57 00 00 FF 
098e0     34 E4 85 F1 | 	sub	objptr, ##44596
098e4     98 00 90 FD | 	jmp	#LR__0796
098e8                 | LR__0794
098e8     57 00 00 FF 
098ec     34 E4 05 F1 | 	add	objptr, ##44596
098f0     F2 28 02 FB | 	rdlong	local06, objptr
098f4     01 28 06 F1 | 	add	local06, #1
098f8     F2 28 62 FC | 	wrlong	local06, objptr
098fc     57 00 00 FF 
09900     34 E4 85 F1 | 	sub	objptr, ##44596
09904     1C F4 BF FD | 	call	#_expr
09908                 | '     ct+=1
09908                 | '     expr() 
09908                 | '     if lparts(ct).token=token_rpar then ct+=1
09908     57 00 00 FF 
0990c     34 E4 05 F1 | 	add	objptr, ##44596
09910     F2 32 02 FB | 	rdlong	local11, objptr
09914     03 32 66 F0 | 	shl	local11, #3
09918     02 00 00 FF 
0991c     38 E4 85 F1 | 	sub	objptr, ##1080
09920     F2 32 02 F1 | 	add	local11, objptr
09924     04 32 06 F1 | 	add	local11, #4
09928     19 33 02 FB | 	rdlong	local11, local11
0992c     14 32 0E F2 | 	cmp	local11, #20 wz
09930     54 00 00 FF 
09934     FC E5 85 F1 | 	sub	objptr, ##43516
09938     44 00 90 5D |  if_ne	jmp	#LR__0796
0993c     57 00 00 FF 
09940     34 E4 05 F1 | 	add	objptr, ##44596
09944     F2 28 02 FB | 	rdlong	local06, objptr
09948     01 28 06 F1 | 	add	local06, #1
0994c     F2 28 62 FC | 	wrlong	local06, objptr
09950     57 00 00 FF 
09954     34 E4 85 F1 | 	sub	objptr, ##44596
09958     24 00 90 FD | 	jmp	#LR__0796
0995c                 | LR__0795
0995c     12 13 02 F6 | 	mov	arg01, local04
09960     28 00 B0 FD | 	call	#_getfun
09964     57 00 00 FF 
09968     34 E4 05 F1 | 	add	objptr, ##44596
0996c     F2 28 02 FB | 	rdlong	local06, objptr
09970     01 28 06 F1 | 	add	local06, #1
09974     F2 28 62 FC | 	wrlong	local06, objptr
09978     57 00 00 FF 
0997c     34 E4 85 F1 | 	sub	objptr, ##44596
09980                 | LR__0796
09980     A7 F0 03 F6 | 	mov	ptra, fp
09984     B2 00 A0 FD | 	call	#popregs_
09988                 | _getvalue_ret
09988     2D 00 64 FD | 	ret
0998c                 | 
0998c                 | ' 
0998c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0998c                 | _getfun
0998c     0A 4A 05 F6 | 	mov	COUNT_, #10
09990     A8 00 A0 FD | 	call	#pushregs_
09994                 | _getfun_enter
09994     09 25 02 F6 | 	mov	local04, arg01
09998     57 00 00 FF 
0999c     34 E4 05 F1 | 	add	objptr, ##44596
099a0     F2 26 02 FB | 	rdlong	local05, objptr
099a4     13 29 02 F6 | 	mov	local06, local05
099a8     00 2A 06 F6 | 	mov	local07, #0
099ac                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
099ac                 | ' oldct=ct
099ac                 | ' numpar=0
099ac                 | '   
099ac                 | ' if lparts(ct+1).token=token_lpar then
099ac     01 26 06 F1 | 	add	local05, #1
099b0     03 26 66 F0 | 	shl	local05, #3
099b4     02 00 00 FF 
099b8     38 E4 85 F1 | 	sub	objptr, ##1080
099bc     F2 26 02 F1 | 	add	local05, objptr
099c0     04 26 06 F1 | 	add	local05, #4
099c4     13 27 02 FB | 	rdlong	local05, local05
099c8     15 26 0E F2 | 	cmp	local05, #21 wz
099cc     54 00 00 FF 
099d0     FC E5 85 F1 | 	sub	objptr, ##43516
099d4     08 01 90 5D |  if_ne	jmp	#LR__0804
099d8     57 00 00 FF 
099dc     34 E4 05 F1 | 	add	objptr, ##44596
099e0     F2 2C 02 FB | 	rdlong	local08, objptr
099e4     01 2C 06 F1 | 	add	local08, #1
099e8     F2 2C 62 FC | 	wrlong	local08, objptr
099ec     57 00 00 FF 
099f0     34 E4 85 F1 | 	sub	objptr, ##44596
099f4                 | '   ct+=1 											' omit this lpar, this is for expr list
099f4                 | '   do
099f4                 | LR__0800
099f4     57 00 00 FF 
099f8     34 E4 05 F1 | 	add	objptr, ##44596
099fc     F2 26 02 FB | 	rdlong	local05, objptr
09a00     01 26 06 F1 | 	add	local05, #1
09a04     F2 26 62 FC | 	wrlong	local05, objptr
09a08                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09a08                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09a08     03 26 66 F0 | 	shl	local05, #3
09a0c     02 00 00 FF 
09a10     38 E4 85 F1 | 	sub	objptr, ##1080
09a14     F2 26 02 F1 | 	add	local05, objptr
09a18     04 26 06 F1 | 	add	local05, #4
09a1c     13 2D 02 FB | 	rdlong	local08, local05
09a20     15 2C 0E F2 | 	cmp	local08, #21 wz
09a24     54 00 00 FF 
09a28     FC E5 85 F1 | 	sub	objptr, ##43516
09a2c     40 00 90 5D |  if_ne	jmp	#LR__0801
09a30     57 00 00 FF 
09a34     34 E4 05 F1 | 	add	objptr, ##44596
09a38     F2 2C 02 FB | 	rdlong	local08, objptr
09a3c     01 2C 06 F1 | 	add	local08, #1
09a40     F2 2C 62 FC | 	wrlong	local08, objptr
09a44     57 00 00 FF 
09a48     34 E4 85 F1 | 	sub	objptr, ##44596
09a4c     D4 F2 BF FD | 	call	#_expr
09a50     57 00 00 FF 
09a54     34 E4 05 F1 | 	add	objptr, ##44596
09a58     F2 2C 02 FB | 	rdlong	local08, objptr
09a5c     01 2C 06 F1 | 	add	local08, #1
09a60     F2 2C 62 FC | 	wrlong	local08, objptr
09a64     57 00 00 FF 
09a68     34 E4 85 F1 | 	sub	objptr, ##44596
09a6c     04 00 90 FD | 	jmp	#LR__0802
09a70                 | LR__0801
09a70     B0 F2 BF FD | 	call	#_expr
09a74                 | LR__0802
09a74     01 2A 06 F1 | 	add	local07, #1
09a78     57 00 00 FF 
09a7c     34 E4 05 F1 | 	add	objptr, ##44596
09a80     F2 26 02 FB | 	rdlong	local05, objptr
09a84     03 26 66 F0 | 	shl	local05, #3
09a88     02 00 00 FF 
09a8c     38 E4 85 F1 | 	sub	objptr, ##1080
09a90     F2 26 02 F1 | 	add	local05, objptr
09a94     04 26 06 F1 | 	add	local05, #4
09a98     13 2D 02 FB | 	rdlong	local08, local05
09a9c     14 2C 0E F2 | 	cmp	local08, #20 wz
09aa0     54 00 00 FF 
09aa4     FC E5 85 F1 | 	sub	objptr, ##43516
09aa8     34 00 90 AD |  if_e	jmp	#LR__0803
09aac     57 00 00 FF 
09ab0     34 E4 05 F1 | 	add	objptr, ##44596
09ab4     F2 2C 02 FB | 	rdlong	local08, objptr
09ab8     03 2C 66 F0 | 	shl	local08, #3
09abc     02 00 00 FF 
09ac0     38 E4 85 F1 | 	sub	objptr, ##1080
09ac4     F2 2C 02 F1 | 	add	local08, objptr
09ac8     04 2C 06 F1 | 	add	local08, #4
09acc     16 2D 02 FB | 	rdlong	local08, local08
09ad0     FE 2D 0E F2 | 	cmp	local08, #510 wz
09ad4     54 00 00 FF 
09ad8     FC E5 85 F1 | 	sub	objptr, ##43516
09adc     14 FF 9F 5D |  if_ne	jmp	#LR__0800
09ae0                 | LR__0803
09ae0                 | LR__0804
09ae0     15 1F 02 F6 | 	mov	local01, local07
09ae4     03 28 66 F0 | 	shl	local06, #3
09ae8     54 00 00 FF 
09aec     FC E5 05 F1 | 	add	objptr, ##43516
09af0     F2 28 02 F1 | 	add	local06, objptr
09af4     04 28 06 F1 | 	add	local06, #4
09af8     14 23 02 FB | 	rdlong	local03, local06
09afc     0F 2D 02 F6 | 	mov	local08, local01
09b00     10 2B 02 F6 | 	mov	local07, local02
09b04     11 29 02 F6 | 	mov	local06, local03
09b08     15 00 00 FF 
09b0c     70 E4 05 F1 | 	add	objptr, ##10864
09b10     F2 26 02 FB | 	rdlong	local05, objptr
09b14     13 13 02 F6 | 	mov	arg01, local05
09b18     01 12 66 F0 | 	shl	arg01, #1
09b1c     13 13 02 F1 | 	add	arg01, local05
09b20     02 12 66 F0 | 	shl	arg01, #2
09b24     03 00 00 FF 
09b28     00 E4 85 F1 | 	sub	objptr, ##1536
09b2c     F2 12 02 F1 | 	add	arg01, objptr
09b30     09 2D 62 FC | 	wrlong	local08, arg01
09b34     03 00 00 FF 
09b38     00 E4 05 F1 | 	add	objptr, ##1536
09b3c     F2 2C 02 FB | 	rdlong	local08, objptr
09b40     16 2F 02 F6 | 	mov	local09, local08
09b44     01 2E 66 F0 | 	shl	local09, #1
09b48     16 2F 02 F1 | 	add	local09, local08
09b4c     02 2E 66 F0 | 	shl	local09, #2
09b50     03 00 00 FF 
09b54     00 E4 85 F1 | 	sub	objptr, ##1536
09b58     F2 2E 02 F1 | 	add	local09, objptr
09b5c     04 2E 06 F1 | 	add	local09, #4
09b60     17 2B 62 FC | 	wrlong	local07, local09
09b64     03 00 00 FF 
09b68     00 E4 05 F1 | 	add	objptr, ##1536
09b6c     F2 2C 02 FB | 	rdlong	local08, objptr
09b70     16 31 02 F6 | 	mov	local10, local08
09b74     01 30 66 F0 | 	shl	local10, #1
09b78     16 31 02 F1 | 	add	local10, local08
09b7c     02 30 66 F0 | 	shl	local10, #2
09b80     03 00 00 FF 
09b84     00 E4 85 F1 | 	sub	objptr, ##1536
09b88     F2 30 02 F1 | 	add	local10, objptr
09b8c     08 30 06 F1 | 	add	local10, #8
09b90     18 29 62 FC | 	wrlong	local06, local10
09b94     03 00 00 FF 
09b98     00 E4 05 F1 | 	add	objptr, ##1536
09b9c     F2 2C 02 FB | 	rdlong	local08, objptr
09ba0     01 2C 06 F1 | 	add	local08, #1
09ba4     F2 2C 62 FC | 	wrlong	local08, objptr
09ba8     6A 00 00 FF 
09bac     6C E4 85 F1 | 	sub	objptr, ##54380
09bb0                 | ' 
09bb0                 | ' t2.result.uresult=numpar
09bb0                 | ' 
09bb0                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09bb0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09bb0                 | ' 
09bb0                 | '   
09bb0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09bb0     FF FF 7F FF 
09bb4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09bb8     B8 00 90 5D |  if_ne	jmp	#LR__0805
09bbc     15 22 06 F6 | 	mov	local03, #21
09bc0     0F 2D 02 F6 | 	mov	local08, local01
09bc4     10 2B 02 F6 | 	mov	local07, local02
09bc8     11 29 02 F6 | 	mov	local06, local03
09bcc     6A 00 00 FF 
09bd0     6C E4 05 F1 | 	add	objptr, ##54380
09bd4     F2 26 02 FB | 	rdlong	local05, objptr
09bd8     13 13 02 F6 | 	mov	arg01, local05
09bdc     01 12 66 F0 | 	shl	arg01, #1
09be0     13 13 02 F1 | 	add	arg01, local05
09be4     02 12 66 F0 | 	shl	arg01, #2
09be8     03 00 00 FF 
09bec     00 E4 85 F1 | 	sub	objptr, ##1536
09bf0     F2 12 02 F1 | 	add	arg01, objptr
09bf4     09 2D 62 FC | 	wrlong	local08, arg01
09bf8     03 00 00 FF 
09bfc     00 E4 05 F1 | 	add	objptr, ##1536
09c00     F2 30 02 FB | 	rdlong	local10, objptr
09c04     18 2F 02 F6 | 	mov	local09, local10
09c08     01 2E 66 F0 | 	shl	local09, #1
09c0c     18 2F 02 F1 | 	add	local09, local10
09c10     02 2E 66 F0 | 	shl	local09, #2
09c14     03 00 00 FF 
09c18     00 E4 85 F1 | 	sub	objptr, ##1536
09c1c     F2 2E 02 F1 | 	add	local09, objptr
09c20     04 2E 06 F1 | 	add	local09, #4
09c24     17 2B 62 FC | 	wrlong	local07, local09
09c28     03 00 00 FF 
09c2c     00 E4 05 F1 | 	add	objptr, ##1536
09c30     F2 2E 02 FB | 	rdlong	local09, objptr
09c34     17 31 02 F6 | 	mov	local10, local09
09c38     01 30 66 F0 | 	shl	local10, #1
09c3c     17 31 02 F1 | 	add	local10, local09
09c40     02 30 66 F0 | 	shl	local10, #2
09c44     03 00 00 FF 
09c48     00 E4 85 F1 | 	sub	objptr, ##1536
09c4c     F2 30 02 F1 | 	add	local10, objptr
09c50     08 30 06 F1 | 	add	local10, #8
09c54     18 29 62 FC | 	wrlong	local06, local10
09c58     03 00 00 FF 
09c5c     00 E4 05 F1 | 	add	objptr, ##1536
09c60     F2 2C 02 FB | 	rdlong	local08, objptr
09c64     01 2C 06 F1 | 	add	local08, #1
09c68     F2 2C 62 FC | 	wrlong	local08, objptr
09c6c     6A 00 00 FF 
09c70     6C E4 85 F1 | 	sub	objptr, ##54380
09c74                 | LR__0805
09c74     A7 F0 03 F6 | 	mov	ptra, fp
09c78     B2 00 A0 FD | 	call	#popregs_
09c7c                 | _getfun_ret
09c7c     2D 00 64 FD | 	ret
09c80                 | 
09c80                 | '   
09c80                 | '   
09c80                 | ' sub getvar(m as integer) 
09c80                 | _getvar
09c80     0A 4A 05 F6 | 	mov	COUNT_, #10
09c84     A8 00 A0 FD | 	call	#pushregs_
09c88                 | _getvar_enter
09c88     09 25 02 F6 | 	mov	local04, arg01
09c8c     57 00 00 FF 
09c90     34 E4 05 F1 | 	add	objptr, ##44596
09c94     F2 14 02 FB | 	rdlong	arg02, objptr
09c98     03 14 66 F0 | 	shl	arg02, #3
09c9c     02 00 00 FF 
09ca0     38 E4 85 F1 | 	sub	objptr, ##1080
09ca4     F2 14 02 F1 | 	add	arg02, objptr
09ca8     0A 27 02 FB | 	rdlong	local05, arg02
09cac     13 13 02 F6 | 	mov	arg01, local05
09cb0     01 14 06 F6 | 	mov	arg02, #1
09cb4     54 00 00 FF 
09cb8     FC E5 85 F1 | 	sub	objptr, ##43516
09cbc     58 58 B1 FD | 	call	#__system__Right_S
09cc0     FD 28 02 F6 | 	mov	local06, result1
09cc4     01 2A 66 F6 | 	neg	local07, #1
09cc8                 | ' 
09cc8                 | ' varname$=lparts(ct).part$
09cc8                 | ' suffix$=right$(varname$,1)
09cc8                 | ' j=-1
09cc8                 | ' 
09cc8                 | ' for i=0 to varnum-1
09cc8     00 2C 06 F6 | 	mov	local08, #0
09ccc     54 00 00 FF 
09cd0     F8 E5 05 F1 | 	add	objptr, ##43512
09cd4     F2 2E 02 FB | 	rdlong	local09, objptr
09cd8     54 00 00 FF 
09cdc     F8 E5 85 F1 | 	sub	objptr, ##43512
09ce0                 | LR__0810
09ce0     17 2D 52 F2 | 	cmps	local08, local09 wc
09ce4     38 00 90 3D |  if_ae	jmp	#LR__0811
09ce8                 | '   if variables(i).name=varname$ then j=i : exit
09ce8     16 15 02 F6 | 	mov	arg02, local08
09cec     04 14 66 F0 | 	shl	arg02, #4
09cf0     34 00 00 FF 
09cf4     F8 E5 05 F1 | 	add	objptr, ##27128
09cf8     F2 14 02 F1 | 	add	arg02, objptr
09cfc     0A 13 02 FB | 	rdlong	arg01, arg02
09d00     13 15 02 F6 | 	mov	arg02, local05
09d04     34 00 00 FF 
09d08     F8 E5 85 F1 | 	sub	objptr, ##27128
09d0c     64 37 B1 FD | 	call	#__system___string_cmp
09d10     00 FA 0D F2 | 	cmp	result1, #0 wz
09d14     16 2B 02 A6 |  if_e	mov	local07, local08
09d18     01 2C 06 51 |  if_ne	add	local08, #1
09d1c     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09d20                 | LR__0811
09d20                 | ' if  j=-1 andalso varnum<maxvars then   
09d20     FF FF 7F FF 
09d24     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09d28     A8 00 90 5D |  if_ne	jmp	#LR__0812
09d2c     54 00 00 FF 
09d30     F8 E5 05 F1 | 	add	objptr, ##43512
09d34     F2 2E 02 FB | 	rdlong	local09, objptr
09d38     54 00 00 FF 
09d3c     F8 E5 85 F1 | 	sub	objptr, ##43512
09d40     01 00 00 FF 
09d44     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09d48     88 00 90 3D |  if_ae	jmp	#LR__0812
09d4c     54 00 00 FF 
09d50     F8 E5 05 F1 | 	add	objptr, ##43512
09d54     F2 2E 02 FB | 	rdlong	local09, objptr
09d58     04 2E 66 F0 | 	shl	local09, #4
09d5c     20 00 00 FF 
09d60     00 E4 85 F1 | 	sub	objptr, ##16384
09d64     F2 2E 02 F1 | 	add	local09, objptr
09d68     17 27 62 FC | 	wrlong	local05, local09
09d6c     20 00 00 FF 
09d70     00 E4 05 F1 | 	add	objptr, ##16384
09d74     F2 2E 02 FB | 	rdlong	local09, objptr
09d78     04 2E 66 F0 | 	shl	local09, #4
09d7c     20 00 00 FF 
09d80     00 E4 85 F1 | 	sub	objptr, ##16384
09d84     F2 2E 02 F1 | 	add	local09, objptr
09d88     04 2E 06 F1 | 	add	local09, #4
09d8c     17 01 68 FC | 	wrlong	#0, local09
09d90     20 00 00 FF 
09d94     00 E4 05 F1 | 	add	objptr, ##16384
09d98     F2 2E 02 FB | 	rdlong	local09, objptr
09d9c     04 2E 66 F0 | 	shl	local09, #4
09da0     20 00 00 FF 
09da4     00 E4 85 F1 | 	sub	objptr, ##16384
09da8     F2 2E 02 F1 | 	add	local09, objptr
09dac     0C 2E 06 F1 | 	add	local09, #12
09db0     17 39 68 FC | 	wrlong	#28, local09
09db4     20 00 00 FF 
09db8     00 E4 05 F1 | 	add	objptr, ##16384
09dbc     F2 2E 02 FB | 	rdlong	local09, objptr
09dc0     17 2B 02 F6 | 	mov	local07, local09
09dc4     01 2E 06 F1 | 	add	local09, #1
09dc8     F2 2E 62 FC | 	wrlong	local09, objptr
09dcc     54 00 00 FF 
09dd0     F8 E5 85 F1 | 	sub	objptr, ##43512
09dd4                 | LR__0812
09dd4     00 2E 06 F6 | 	mov	local09, #0
09dd8                 | ' numpar=0
09dd8                 | ' ' check if it is an array
09dd8                 | ' 
09dd8                 | ' if lparts(ct+1).token=token_lpar then
09dd8     57 00 00 FF 
09ddc     34 E4 05 F1 | 	add	objptr, ##44596
09de0     F2 2C 02 FB | 	rdlong	local08, objptr
09de4     01 2C 06 F1 | 	add	local08, #1
09de8     03 2C 66 F0 | 	shl	local08, #3
09dec     02 00 00 FF 
09df0     38 E4 85 F1 | 	sub	objptr, ##1080
09df4     F2 2C 02 F1 | 	add	local08, objptr
09df8     04 2C 06 F1 | 	add	local08, #4
09dfc     16 2D 02 FB | 	rdlong	local08, local08
09e00     15 2C 0E F2 | 	cmp	local08, #21 wz
09e04     54 00 00 FF 
09e08     FC E5 85 F1 | 	sub	objptr, ##43516
09e0c     08 01 90 5D |  if_ne	jmp	#LR__0817
09e10     57 00 00 FF 
09e14     34 E4 05 F1 | 	add	objptr, ##44596
09e18     F2 30 02 FB | 	rdlong	local10, objptr
09e1c     01 30 06 F1 | 	add	local10, #1
09e20     F2 30 62 FC | 	wrlong	local10, objptr
09e24     57 00 00 FF 
09e28     34 E4 85 F1 | 	sub	objptr, ##44596
09e2c                 | '   ct+=1 											' omit this lpar, this is for expr list
09e2c                 | '   do
09e2c                 | LR__0813
09e2c     57 00 00 FF 
09e30     34 E4 05 F1 | 	add	objptr, ##44596
09e34     F2 2C 02 FB | 	rdlong	local08, objptr
09e38     01 2C 06 F1 | 	add	local08, #1
09e3c     F2 2C 62 FC | 	wrlong	local08, objptr
09e40                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09e40                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09e40     03 2C 66 F0 | 	shl	local08, #3
09e44     02 00 00 FF 
09e48     38 E4 85 F1 | 	sub	objptr, ##1080
09e4c     F2 2C 02 F1 | 	add	local08, objptr
09e50     04 2C 06 F1 | 	add	local08, #4
09e54     16 31 02 FB | 	rdlong	local10, local08
09e58     15 30 0E F2 | 	cmp	local10, #21 wz
09e5c     54 00 00 FF 
09e60     FC E5 85 F1 | 	sub	objptr, ##43516
09e64     40 00 90 5D |  if_ne	jmp	#LR__0814
09e68     57 00 00 FF 
09e6c     34 E4 05 F1 | 	add	objptr, ##44596
09e70     F2 30 02 FB | 	rdlong	local10, objptr
09e74     01 30 06 F1 | 	add	local10, #1
09e78     F2 30 62 FC | 	wrlong	local10, objptr
09e7c     57 00 00 FF 
09e80     34 E4 85 F1 | 	sub	objptr, ##44596
09e84     9C EE BF FD | 	call	#_expr
09e88     57 00 00 FF 
09e8c     34 E4 05 F1 | 	add	objptr, ##44596
09e90     F2 30 02 FB | 	rdlong	local10, objptr
09e94     01 30 06 F1 | 	add	local10, #1
09e98     F2 30 62 FC | 	wrlong	local10, objptr
09e9c     57 00 00 FF 
09ea0     34 E4 85 F1 | 	sub	objptr, ##44596
09ea4     04 00 90 FD | 	jmp	#LR__0815
09ea8                 | LR__0814
09ea8     78 EE BF FD | 	call	#_expr
09eac                 | LR__0815
09eac     01 2E 06 F1 | 	add	local09, #1
09eb0     57 00 00 FF 
09eb4     34 E4 05 F1 | 	add	objptr, ##44596
09eb8     F2 2C 02 FB | 	rdlong	local08, objptr
09ebc     03 2C 66 F0 | 	shl	local08, #3
09ec0     02 00 00 FF 
09ec4     38 E4 85 F1 | 	sub	objptr, ##1080
09ec8     F2 2C 02 F1 | 	add	local08, objptr
09ecc     04 2C 06 F1 | 	add	local08, #4
09ed0     16 31 02 FB | 	rdlong	local10, local08
09ed4     14 30 0E F2 | 	cmp	local10, #20 wz
09ed8     54 00 00 FF 
09edc     FC E5 85 F1 | 	sub	objptr, ##43516
09ee0     34 00 90 AD |  if_e	jmp	#LR__0816
09ee4     57 00 00 FF 
09ee8     34 E4 05 F1 | 	add	objptr, ##44596
09eec     F2 30 02 FB | 	rdlong	local10, objptr
09ef0     03 30 66 F0 | 	shl	local10, #3
09ef4     02 00 00 FF 
09ef8     38 E4 85 F1 | 	sub	objptr, ##1080
09efc     F2 30 02 F1 | 	add	local10, objptr
09f00     04 30 06 F1 | 	add	local10, #4
09f04     18 31 02 FB | 	rdlong	local10, local10
09f08     FE 31 0E F2 | 	cmp	local10, #510 wz
09f0c     54 00 00 FF 
09f10     FC E5 85 F1 | 	sub	objptr, ##43516
09f14     14 FF 9F 5D |  if_ne	jmp	#LR__0813
09f18                 | LR__0816
09f18                 | LR__0817
09f18     17 21 02 F6 | 	mov	local02, local09
09f1c     11 22 06 F6 | 	mov	local03, #17
09f20     15 1F 02 F6 | 	mov	local01, local07
09f24     0F 31 02 F6 | 	mov	local10, local01
09f28     10 2F 02 F6 | 	mov	local09, local02
09f2c     11 2D 02 F6 | 	mov	local08, local03
09f30     6A 00 00 FF 
09f34     6C E4 05 F1 | 	add	objptr, ##54380
09f38     F2 2A 02 FB | 	rdlong	local07, objptr
09f3c     15 29 02 F6 | 	mov	local06, local07
09f40     01 28 66 F0 | 	shl	local06, #1
09f44     15 29 02 F1 | 	add	local06, local07
09f48     02 28 66 F0 | 	shl	local06, #2
09f4c     03 00 00 FF 
09f50     00 E4 85 F1 | 	sub	objptr, ##1536
09f54     F2 28 02 F1 | 	add	local06, objptr
09f58     14 31 62 FC | 	wrlong	local10, local06
09f5c     03 00 00 FF 
09f60     00 E4 05 F1 | 	add	objptr, ##1536
09f64     F2 30 02 FB | 	rdlong	local10, objptr
09f68     18 27 02 F6 | 	mov	local05, local10
09f6c     01 26 66 F0 | 	shl	local05, #1
09f70     18 27 02 F1 | 	add	local05, local10
09f74     02 26 66 F0 | 	shl	local05, #2
09f78     03 00 00 FF 
09f7c     00 E4 85 F1 | 	sub	objptr, ##1536
09f80     F2 26 02 F1 | 	add	local05, objptr
09f84     04 26 06 F1 | 	add	local05, #4
09f88     13 2F 62 FC | 	wrlong	local09, local05
09f8c     03 00 00 FF 
09f90     00 E4 05 F1 | 	add	objptr, ##1536
09f94     F2 30 02 FB | 	rdlong	local10, objptr
09f98     18 FB 01 F6 | 	mov	result1, local10
09f9c     01 FA 65 F0 | 	shl	result1, #1
09fa0     18 FB 01 F1 | 	add	result1, local10
09fa4     02 FA 65 F0 | 	shl	result1, #2
09fa8     03 00 00 FF 
09fac     00 E4 85 F1 | 	sub	objptr, ##1536
09fb0     F2 FA 01 F1 | 	add	result1, objptr
09fb4     08 FA 05 F1 | 	add	result1, #8
09fb8     FD 2C 62 FC | 	wrlong	local08, result1
09fbc     03 00 00 FF 
09fc0     00 E4 05 F1 | 	add	objptr, ##1536
09fc4     F2 30 02 FB | 	rdlong	local10, objptr
09fc8     01 30 06 F1 | 	add	local10, #1
09fcc     F2 30 62 FC | 	wrlong	local10, objptr
09fd0     6A 00 00 FF 
09fd4     6C E4 85 F1 | 	sub	objptr, ##54380
09fd8                 | ' 
09fd8                 | ' t2.result.twowords(1)=numpar
09fd8                 | ' 
09fd8                 | ' 
09fd8                 | ' 
09fd8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09fd8                 | ' 
09fd8                 | ' 
09fd8                 | '  
09fd8                 | ' 
09fd8                 | ' 701 
09fd8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09fd8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09fd8     FF FF 7F FF 
09fdc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09fe0     B8 00 90 5D |  if_ne	jmp	#LR__0818
09fe4     15 22 06 F6 | 	mov	local03, #21
09fe8     0F 31 02 F6 | 	mov	local10, local01
09fec     10 2F 02 F6 | 	mov	local09, local02
09ff0     11 2D 02 F6 | 	mov	local08, local03
09ff4     6A 00 00 FF 
09ff8     6C E4 05 F1 | 	add	objptr, ##54380
09ffc     F2 2A 02 FB | 	rdlong	local07, objptr
0a000     15 29 02 F6 | 	mov	local06, local07
0a004     01 28 66 F0 | 	shl	local06, #1
0a008     15 29 02 F1 | 	add	local06, local07
0a00c     02 28 66 F0 | 	shl	local06, #2
0a010     03 00 00 FF 
0a014     00 E4 85 F1 | 	sub	objptr, ##1536
0a018     F2 28 02 F1 | 	add	local06, objptr
0a01c     14 31 62 FC | 	wrlong	local10, local06
0a020     03 00 00 FF 
0a024     00 E4 05 F1 | 	add	objptr, ##1536
0a028     F2 1E 02 FB | 	rdlong	local01, objptr
0a02c     0F 27 02 F6 | 	mov	local05, local01
0a030     01 26 66 F0 | 	shl	local05, #1
0a034     0F 27 02 F1 | 	add	local05, local01
0a038     02 26 66 F0 | 	shl	local05, #2
0a03c     03 00 00 FF 
0a040     00 E4 85 F1 | 	sub	objptr, ##1536
0a044     F2 26 02 F1 | 	add	local05, objptr
0a048     04 26 06 F1 | 	add	local05, #4
0a04c     13 2F 62 FC | 	wrlong	local09, local05
0a050     03 00 00 FF 
0a054     00 E4 05 F1 | 	add	objptr, ##1536
0a058     F2 1E 02 FB | 	rdlong	local01, objptr
0a05c     0F FB 01 F6 | 	mov	result1, local01
0a060     01 FA 65 F0 | 	shl	result1, #1
0a064     0F FB 01 F1 | 	add	result1, local01
0a068     02 FA 65 F0 | 	shl	result1, #2
0a06c     03 00 00 FF 
0a070     00 E4 85 F1 | 	sub	objptr, ##1536
0a074     F2 FA 01 F1 | 	add	result1, objptr
0a078     08 FA 05 F1 | 	add	result1, #8
0a07c     FD 2C 62 FC | 	wrlong	local08, result1
0a080     03 00 00 FF 
0a084     00 E4 05 F1 | 	add	objptr, ##1536
0a088     F2 30 02 FB | 	rdlong	local10, objptr
0a08c     01 30 06 F1 | 	add	local10, #1
0a090     F2 30 62 FC | 	wrlong	local10, objptr
0a094     6A 00 00 FF 
0a098     6C E4 85 F1 | 	sub	objptr, ##54380
0a09c                 | LR__0818
0a09c     A7 F0 03 F6 | 	mov	ptra, fp
0a0a0     B2 00 A0 FD | 	call	#popregs_
0a0a4                 | _getvar_ret
0a0a4     2D 00 64 FD | 	ret
0a0a8                 | 
0a0a8                 | ' 
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' 
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' 
0a0a8                 | ' function execute_line (astart=0 as integer) as integer
0a0a8                 | _execute_line
0a0a8     04 4A 05 F6 | 	mov	COUNT_, #4
0a0ac     A8 00 A0 FD | 	call	#pushregs_
0a0b0     79 00 00 FF 
0a0b4     A4 E5 05 F1 | 	add	objptr, ##62372
0a0b8     F2 00 68 FC | 	wrlong	#0, objptr
0a0bc                 | ' runptr2=0
0a0bc                 | ' for lineptr_e=astart to lineptr-1
0a0bc     0F 00 00 FF 
0a0c0     34 E5 85 F1 | 	sub	objptr, ##7988
0a0c4     F2 12 62 FC | 	wrlong	arg01, objptr
0a0c8     04 E4 85 F1 | 	sub	objptr, #4
0a0cc     F2 1E 02 FB | 	rdlong	local01, objptr
0a0d0     6A 00 00 FF 
0a0d4     6C E4 85 F1 | 	sub	objptr, ##54380
0a0d8                 | LR__0820
0a0d8     6A 00 00 FF 
0a0dc     70 E4 05 F1 | 	add	objptr, ##54384
0a0e0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0e4     6A 00 00 FF 
0a0e8     70 E4 85 F1 | 	sub	objptr, ##54384
0a0ec     0F FB 51 F2 | 	cmps	result1, local01 wc
0a0f0     98 00 90 3D |  if_ae	jmp	#LR__0821
0a0f4     6A 00 00 FF 
0a0f8     70 E4 05 F1 | 	add	objptr, ##54384
0a0fc     F2 FA 01 FB | 	rdlong	result1, objptr
0a100     FD 20 02 F6 | 	mov	local02, result1
0a104     01 20 66 F0 | 	shl	local02, #1
0a108     FD 20 02 F1 | 	add	local02, result1
0a10c     02 20 66 F0 | 	shl	local02, #2
0a110     03 00 00 FF 
0a114     04 E4 85 F1 | 	sub	objptr, ##1540
0a118     F2 20 02 F1 | 	add	local02, objptr
0a11c     08 20 06 F1 | 	add	local02, #8
0a120     10 21 02 FB | 	rdlong	local02, local02
0a124     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a128     02 20 66 F0 | 	shl	local02, #2
0a12c     04 00 00 FF 
0a130     1C E4 85 F1 | 	sub	objptr, ##2076
0a134     F2 20 02 F1 | 	add	local02, objptr
0a138     10 21 02 FB | 	rdlong	local02, local02
0a13c     10 23 02 F6 | 	mov	local03, local02
0a140     13 20 46 F7 | 	zerox	local02, #19
0a144     14 22 46 F0 | 	shr	local03, #20
0a148     02 22 66 F0 | 	shl	local03, #2
0a14c     ED 22 02 F1 | 	add	local03, __methods__
0a150     11 23 02 FB | 	rdlong	local03, local03
0a154     63 00 00 FF 
0a158     50 E4 85 F1 | 	sub	objptr, ##50768
0a15c     F2 24 02 F6 | 	mov	local04, objptr
0a160     10 E5 01 F6 | 	mov	objptr, local02
0a164     2D 22 62 FD | 	call	local03
0a168     12 E5 01 F6 | 	mov	objptr, local04
0a16c     6A 00 00 FF 
0a170     70 E4 05 F1 | 	add	objptr, ##54384
0a174     F2 24 02 FB | 	rdlong	local04, objptr
0a178     01 24 06 F1 | 	add	local04, #1
0a17c     F2 24 62 FC | 	wrlong	local04, objptr
0a180     6A 00 00 FF 
0a184     70 E4 85 F1 | 	sub	objptr, ##54384
0a188     4C FF 9F FD | 	jmp	#LR__0820
0a18c                 | LR__0821
0a18c                 | ' return runptr2
0a18c     79 00 00 FF 
0a190     A4 E5 05 F1 | 	add	objptr, ##62372
0a194     F2 FA 01 FB | 	rdlong	result1, objptr
0a198     79 00 00 FF 
0a19c     A4 E5 85 F1 | 	sub	objptr, ##62372
0a1a0     A7 F0 03 F6 | 	mov	ptra, fp
0a1a4     B2 00 A0 FD | 	call	#popregs_
0a1a8                 | _execute_line_ret
0a1a8     2D 00 64 FD | 	ret
0a1ac                 | 
0a1ac                 | ' 
0a1ac                 | ' 
0a1ac                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a1ac                 | ' 
0a1ac                 | ' function pop() as expr_result
0a1ac                 | _pop
0a1ac                 | ' 
0a1ac                 | ' if stackpointer=0 then
0a1ac     63 00 00 FF 
0a1b0     48 E4 05 F1 | 	add	objptr, ##50760
0a1b4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a1b8     63 00 00 FF 
0a1bc     48 E4 85 F1 | 	sub	objptr, ##50760
0a1c0     FF 04 06 A6 |  if_e	mov	_var03, #255
0a1c4     18 00 06 A6 |  if_e	mov	_var01, #24
0a1c8     68 00 90 AD |  if_e	jmp	#LR__0830
0a1cc     63 00 00 FF 
0a1d0     48 E4 05 F1 | 	add	objptr, ##50760
0a1d4     F2 FA 01 FB | 	rdlong	result1, objptr
0a1d8     01 FA 85 F1 | 	sub	result1, #1
0a1dc     F2 FA 61 FC | 	wrlong	result1, objptr
0a1e0     FD FE 01 F6 | 	mov	result3, result1
0a1e4     01 FE 65 F0 | 	shl	result3, #1
0a1e8     FD FE 01 F1 | 	add	result3, result1
0a1ec     02 FE 65 F0 | 	shl	result3, #2
0a1f0     0C 00 00 FF 
0a1f4     0C E4 85 F1 | 	sub	objptr, ##6156
0a1f8     F2 FE 01 F1 | 	add	result3, objptr
0a1fc     FF 00 02 FB | 	rdlong	_var01, result3
0a200     04 FE 05 F1 | 	add	result3, #4
0a204     FF FE 01 FB | 	rdlong	result3, result3
0a208     FD FC 01 F6 | 	mov	result2, result1
0a20c     01 FC 65 F0 | 	shl	result2, #1
0a210     FD FC 01 F1 | 	add	result2, result1
0a214     02 FC 65 F0 | 	shl	result2, #2
0a218     F2 FC 01 F1 | 	add	result2, objptr
0a21c     08 FC 05 F1 | 	add	result2, #8
0a220     FE FA 01 FB | 	rdlong	result1, result2
0a224     FF 02 02 F6 | 	mov	_var02, result3
0a228     FD 04 02 F6 | 	mov	_var03, result1
0a22c     57 00 00 FF 
0a230     3C E4 85 F1 | 	sub	objptr, ##44604
0a234                 | LR__0830
0a234                 | ' return t1
0a234     01 FD 01 F6 | 	mov	result2, _var02
0a238     02 FF 01 F6 | 	mov	result3, _var03
0a23c     00 FB 01 F6 | 	mov	result1, _var01
0a240                 | _pop_ret
0a240     2D 00 64 FD | 	ret
0a244                 | 
0a244                 | ' 
0a244                 | ' sub push(t1 as expr_result )
0a244                 | _push
0a244                 | ' 
0a244                 | ' 'print "In push: "; t1.result_type
0a244                 | ' 'print "In push: "; t1.result.uresult
0a244                 | ' 
0a244                 | ' if stackpointer<maxstack then 
0a244     63 00 00 FF 
0a248     48 E4 05 F1 | 	add	objptr, ##50760
0a24c     F2 00 02 FB | 	rdlong	_var01, objptr
0a250     63 00 00 FF 
0a254     48 E4 85 F1 | 	sub	objptr, ##50760
0a258     01 00 00 FF 
0a25c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a260     BC 00 90 3D |  if_ae	jmp	#LR__0840
0a264     09 01 02 FB | 	rdlong	_var01, arg01
0a268     04 12 06 F1 | 	add	arg01, #4
0a26c     09 03 02 FB | 	rdlong	_var02, arg01
0a270     04 12 06 F1 | 	add	arg01, #4
0a274     09 13 02 FB | 	rdlong	arg01, arg01
0a278     63 00 00 FF 
0a27c     48 E4 05 F1 | 	add	objptr, ##50760
0a280     F2 04 02 FB | 	rdlong	_var03, objptr
0a284     02 07 02 F6 | 	mov	_var04, _var03
0a288     01 06 66 F0 | 	shl	_var04, #1
0a28c     02 07 02 F1 | 	add	_var04, _var03
0a290     02 06 66 F0 | 	shl	_var04, #2
0a294     0C 00 00 FF 
0a298     0C E4 85 F1 | 	sub	objptr, ##6156
0a29c     F2 06 02 F1 | 	add	_var04, objptr
0a2a0     03 01 62 FC | 	wrlong	_var01, _var04
0a2a4     0C 00 00 FF 
0a2a8     0C E4 05 F1 | 	add	objptr, ##6156
0a2ac     F2 06 02 FB | 	rdlong	_var04, objptr
0a2b0     03 05 02 F6 | 	mov	_var03, _var04
0a2b4     01 04 66 F0 | 	shl	_var03, #1
0a2b8     03 05 02 F1 | 	add	_var03, _var04
0a2bc     02 04 66 F0 | 	shl	_var03, #2
0a2c0     0C 00 00 FF 
0a2c4     0C E4 85 F1 | 	sub	objptr, ##6156
0a2c8     F2 04 02 F1 | 	add	_var03, objptr
0a2cc     04 04 06 F1 | 	add	_var03, #4
0a2d0     02 03 62 FC | 	wrlong	_var02, _var03
0a2d4     0C 00 00 FF 
0a2d8     0C E4 05 F1 | 	add	objptr, ##6156
0a2dc     F2 06 02 FB | 	rdlong	_var04, objptr
0a2e0     03 05 02 F6 | 	mov	_var03, _var04
0a2e4     01 04 66 F0 | 	shl	_var03, #1
0a2e8     03 05 02 F1 | 	add	_var03, _var04
0a2ec     02 04 66 F0 | 	shl	_var03, #2
0a2f0     0C 00 00 FF 
0a2f4     0C E4 85 F1 | 	sub	objptr, ##6156
0a2f8     F2 04 02 F1 | 	add	_var03, objptr
0a2fc     08 04 06 F1 | 	add	_var03, #8
0a300     02 13 62 FC | 	wrlong	arg01, _var03
0a304     0C 00 00 FF 
0a308     0C E4 05 F1 | 	add	objptr, ##6156
0a30c     F2 00 02 FB | 	rdlong	_var01, objptr
0a310     01 00 06 F1 | 	add	_var01, #1
0a314     F2 00 62 FC | 	wrlong	_var01, objptr
0a318     63 00 00 FF 
0a31c     48 E4 85 F1 | 	sub	objptr, ##50760
0a320                 | LR__0840
0a320                 | _push_ret
0a320     2D 00 64 FD | 	ret
0a324                 | 
0a324                 | ' 
0a324                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a324                 | ' 
0a324                 | ' sub do_push
0a324                 | _do_push
0a324                 | ' if stackpointer<maxstack then 
0a324     63 00 00 FF 
0a328     48 E4 05 F1 | 	add	objptr, ##50760
0a32c     F2 00 02 FB | 	rdlong	_var01, objptr
0a330     63 00 00 FF 
0a334     48 E4 85 F1 | 	sub	objptr, ##50760
0a338     01 00 00 FF 
0a33c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a340     F8 00 90 3D |  if_ae	jmp	#LR__0850
0a344     6A 00 00 FF 
0a348     70 E4 05 F1 | 	add	objptr, ##54384
0a34c     F2 02 02 FB | 	rdlong	_var02, objptr
0a350     01 05 02 F6 | 	mov	_var03, _var02
0a354     01 04 66 F0 | 	shl	_var03, #1
0a358     01 05 02 F1 | 	add	_var03, _var02
0a35c     02 04 66 F0 | 	shl	_var03, #2
0a360     03 00 00 FF 
0a364     04 E4 85 F1 | 	sub	objptr, ##1540
0a368     F2 04 02 F1 | 	add	_var03, objptr
0a36c     02 01 02 FB | 	rdlong	_var01, _var03
0a370     04 04 06 F1 | 	add	_var03, #4
0a374     02 07 02 FB | 	rdlong	_var04, _var03
0a378     01 05 02 F6 | 	mov	_var03, _var02
0a37c     01 04 66 F0 | 	shl	_var03, #1
0a380     01 05 02 F1 | 	add	_var03, _var02
0a384     02 04 66 F0 | 	shl	_var03, #2
0a388     F2 04 02 F1 | 	add	_var03, objptr
0a38c     08 04 06 F1 | 	add	_var03, #8
0a390     02 03 02 FB | 	rdlong	_var02, _var03
0a394     04 00 00 FF 
0a398     24 E4 85 F1 | 	sub	objptr, ##2084
0a39c     F2 04 02 FB | 	rdlong	_var03, objptr
0a3a0     02 09 02 F6 | 	mov	_var05, _var03
0a3a4     01 08 66 F0 | 	shl	_var05, #1
0a3a8     02 09 02 F1 | 	add	_var05, _var03
0a3ac     02 08 66 F0 | 	shl	_var05, #2
0a3b0     0C 00 00 FF 
0a3b4     0C E4 85 F1 | 	sub	objptr, ##6156
0a3b8     F2 08 02 F1 | 	add	_var05, objptr
0a3bc     04 01 62 FC | 	wrlong	_var01, _var05
0a3c0     0C 00 00 FF 
0a3c4     0C E4 05 F1 | 	add	objptr, ##6156
0a3c8     F2 08 02 FB | 	rdlong	_var05, objptr
0a3cc     04 05 02 F6 | 	mov	_var03, _var05
0a3d0     01 04 66 F0 | 	shl	_var03, #1
0a3d4     04 05 02 F1 | 	add	_var03, _var05
0a3d8     02 04 66 F0 | 	shl	_var03, #2
0a3dc     0C 00 00 FF 
0a3e0     0C E4 85 F1 | 	sub	objptr, ##6156
0a3e4     F2 04 02 F1 | 	add	_var03, objptr
0a3e8     04 04 06 F1 | 	add	_var03, #4
0a3ec     02 07 62 FC | 	wrlong	_var04, _var03
0a3f0     0C 00 00 FF 
0a3f4     0C E4 05 F1 | 	add	objptr, ##6156
0a3f8     F2 08 02 FB | 	rdlong	_var05, objptr
0a3fc     04 07 02 F6 | 	mov	_var04, _var05
0a400     01 06 66 F0 | 	shl	_var04, #1
0a404     04 07 02 F1 | 	add	_var04, _var05
0a408     02 06 66 F0 | 	shl	_var04, #2
0a40c     0C 00 00 FF 
0a410     0C E4 85 F1 | 	sub	objptr, ##6156
0a414     F2 06 02 F1 | 	add	_var04, objptr
0a418     08 06 06 F1 | 	add	_var04, #8
0a41c     03 03 62 FC | 	wrlong	_var02, _var04
0a420     0C 00 00 FF 
0a424     0C E4 05 F1 | 	add	objptr, ##6156
0a428     F2 00 02 FB | 	rdlong	_var01, objptr
0a42c     01 00 06 F1 | 	add	_var01, #1
0a430     F2 00 62 FC | 	wrlong	_var01, objptr
0a434     63 00 00 FF 
0a438     48 E4 85 F1 | 	sub	objptr, ##50760
0a43c                 | LR__0850
0a43c                 | _do_push_ret
0a43c     2D 00 64 FD | 	ret
0a440                 | 
0a440                 | ' 
0a440                 | '   
0a440                 | ' sub csave_block(address as ulong)
0a440                 | _csave_block
0a440     09 01 02 F6 | 	mov	_var01, arg01
0a444                 | ' 
0a444                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a444                 | ' ' we enter it at the state of playing 1 kHz header tone
0a444                 | ' 
0a444                 | ' for i=0 to 63 step 2
0a444     00 02 06 F6 | 	mov	_var02, #0
0a448                 | LR__0860
0a448                 | '   do: loop until lpeek(base+32*7)>32768
0a448     57 00 00 FF 
0a44c     00 E4 05 F1 | 	add	objptr, ##44544
0a450     97 0C 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a454                 | LR__0861
0a454     F2 12 02 FB | 	rdlong	arg01, objptr
0a458     E0 12 06 F1 | 	add	arg01, #224
0a45c     09 FB 01 FB | 	rdlong	result1, arg01
0a460     40 00 00 FF 
0a464     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a468     E8 FF 9F CD |  if_b	jmp	#LR__0861
0a46c                 | LR__0862
0a46c     00 13 02 F6 | 	mov	arg01, _var01
0a470     01 05 02 F6 | 	mov	_var03, _var02
0a474     02 04 66 F0 | 	shl	_var03, #2
0a478     02 13 02 F1 | 	add	arg01, _var03
0a47c     09 07 02 FB | 	rdlong	_var04, arg01
0a480     24 00 00 FF 
0a484     E4 E4 05 F1 | 	add	objptr, ##18660
0a488     F2 06 62 FC | 	wrlong	_var04, objptr
0a48c     7B 00 00 FF 
0a490     E4 E4 85 F1 | 	sub	objptr, ##63204
0a494                 | '   q=lpeek(address+4*i)
0a494                 | '      for bit=0 to 31
0a494     00 08 06 F6 | 	mov	_var05, #0
0a498     97 84 48 FB | 	callpa	#(@LR__0867-@LR__0863)>>2,fcache_load_ptr_
0a49c                 | LR__0863
0a49c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a49c     7B 00 00 FF 
0a4a0     E4 E4 05 F1 | 	add	objptr, ##63204
0a4a4     F2 06 02 FB | 	rdlong	_var04, objptr
0a4a8     7B 00 00 FF 
0a4ac     E4 E4 85 F1 | 	sub	objptr, ##63204
0a4b0     04 05 C2 F9 | 	decod	_var03, _var05
0a4b4     02 07 CA F7 | 	test	_var04, _var03 wz
0a4b8     60 00 90 AD |  if_e	jmp	#LR__0864
0a4bc     04 05 02 F6 | 	mov	_var03, _var05
0a4c0     02 04 66 F0 | 	shl	_var03, #2
0a4c4     77 00 00 FF 
0a4c8     9C E4 05 F1 | 	add	objptr, ##61084
0a4cc     F2 04 02 F1 | 	add	_var03, objptr
0a4d0     02 FF 48 FC | 	wrbyte	#127, _var03
0a4d4     04 05 02 F6 | 	mov	_var03, _var05
0a4d8     02 04 66 F0 | 	shl	_var03, #2
0a4dc     01 04 06 F1 | 	add	_var03, #1
0a4e0     F2 04 02 F1 | 	add	_var03, objptr
0a4e4     02 01 49 FC | 	wrbyte	#128, _var03
0a4e8     04 05 02 F6 | 	mov	_var03, _var05
0a4ec     02 04 66 F0 | 	shl	_var03, #2
0a4f0     02 04 06 F1 | 	add	_var03, #2
0a4f4     F2 04 02 F1 | 	add	_var03, objptr
0a4f8     02 FF 48 FC | 	wrbyte	#127, _var03
0a4fc     04 05 02 F6 | 	mov	_var03, _var05
0a500     02 04 66 F0 | 	shl	_var03, #2
0a504     03 04 06 F1 | 	add	_var03, #3
0a508     F2 04 02 F1 | 	add	_var03, objptr
0a50c     02 01 49 FC | 	wrbyte	#128, _var03
0a510     77 00 00 FF 
0a514     9C E4 85 F1 | 	sub	objptr, ##61084
0a518     5C 00 90 FD | 	jmp	#LR__0865
0a51c                 | LR__0864
0a51c     04 05 02 F6 | 	mov	_var03, _var05
0a520     02 04 66 F0 | 	shl	_var03, #2
0a524     77 00 00 FF 
0a528     9C E4 05 F1 | 	add	objptr, ##61084
0a52c     F2 04 02 F1 | 	add	_var03, objptr
0a530     02 01 49 FC | 	wrbyte	#128, _var03
0a534     04 05 02 F6 | 	mov	_var03, _var05
0a538     02 04 66 F0 | 	shl	_var03, #2
0a53c     01 04 06 F1 | 	add	_var03, #1
0a540     F2 04 02 F1 | 	add	_var03, objptr
0a544     02 01 49 FC | 	wrbyte	#128, _var03
0a548     04 05 02 F6 | 	mov	_var03, _var05
0a54c     02 04 66 F0 | 	shl	_var03, #2
0a550     02 04 06 F1 | 	add	_var03, #2
0a554     F2 04 02 F1 | 	add	_var03, objptr
0a558     02 FF 48 FC | 	wrbyte	#127, _var03
0a55c     04 05 02 F6 | 	mov	_var03, _var05
0a560     02 04 66 F0 | 	shl	_var03, #2
0a564     03 04 06 F1 | 	add	_var03, #3
0a568     F2 04 02 F1 | 	add	_var03, objptr
0a56c     02 FF 48 FC | 	wrbyte	#127, _var03
0a570     77 00 00 FF 
0a574     9C E4 85 F1 | 	sub	objptr, ##61084
0a578                 | LR__0865
0a578     01 08 06 F1 | 	add	_var05, #1
0a57c     20 08 56 F2 | 	cmps	_var05, #32 wc
0a580     18 FF 9F CD |  if_b	jmp	#LR__0863
0a584                 | '   do: loop until lpeek(base+32*7)<32768
0a584     57 00 00 FF 
0a588     00 E4 05 F1 | 	add	objptr, ##44544
0a58c                 | LR__0866
0a58c     F2 12 02 FB | 	rdlong	arg01, objptr
0a590     E0 12 06 F1 | 	add	arg01, #224
0a594     09 FB 01 FB | 	rdlong	result1, arg01
0a598     40 00 00 FF 
0a59c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a5a0     E8 FF 9F 3D |  if_ae	jmp	#LR__0866
0a5a4                 | LR__0867
0a5a4     00 13 02 F6 | 	mov	arg01, _var01
0a5a8     04 12 06 F1 | 	add	arg01, #4
0a5ac     01 05 02 F6 | 	mov	_var03, _var02
0a5b0     02 04 66 F0 | 	shl	_var03, #2
0a5b4     02 13 02 F1 | 	add	arg01, _var03
0a5b8     09 07 02 FB | 	rdlong	_var04, arg01
0a5bc     24 00 00 FF 
0a5c0     E4 E4 05 F1 | 	add	objptr, ##18660
0a5c4     F2 06 62 FC | 	wrlong	_var04, objptr
0a5c8     7B 00 00 FF 
0a5cc     E4 E4 85 F1 | 	sub	objptr, ##63204
0a5d0                 | '   q=lpeek(address+4+4*i)
0a5d0                 | '      for bit=0 to 31
0a5d0     00 08 06 F6 | 	mov	_var05, #0
0a5d4     97 94 48 FB | 	callpa	#(@LR__0871-@LR__0868)>>2,fcache_load_ptr_
0a5d8                 | LR__0868
0a5d8                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a5d8     7B 00 00 FF 
0a5dc     E4 E4 05 F1 | 	add	objptr, ##63204
0a5e0     F2 06 02 FB | 	rdlong	_var04, objptr
0a5e4     7B 00 00 FF 
0a5e8     E4 E4 85 F1 | 	sub	objptr, ##63204
0a5ec     04 05 C2 F9 | 	decod	_var03, _var05
0a5f0     02 07 CA F7 | 	test	_var04, _var03 wz
0a5f4     80 00 90 AD |  if_e	jmp	#LR__0869
0a5f8     04 0B 02 F6 | 	mov	_var06, _var05
0a5fc     02 0A 66 F0 | 	shl	_var06, #2
0a600     80 04 06 F6 | 	mov	_var03, #128
0a604     05 05 02 F1 | 	add	_var03, _var06
0a608     77 00 00 FF 
0a60c     9C E4 05 F1 | 	add	objptr, ##61084
0a610     F2 04 02 F1 | 	add	_var03, objptr
0a614     02 FF 48 FC | 	wrbyte	#127, _var03
0a618     04 0B 02 F6 | 	mov	_var06, _var05
0a61c     02 0A 66 F0 | 	shl	_var06, #2
0a620     80 04 06 F6 | 	mov	_var03, #128
0a624     05 05 02 F1 | 	add	_var03, _var06
0a628     01 04 06 F1 | 	add	_var03, #1
0a62c     F2 04 02 F1 | 	add	_var03, objptr
0a630     02 01 49 FC | 	wrbyte	#128, _var03
0a634     04 0B 02 F6 | 	mov	_var06, _var05
0a638     02 0A 66 F0 | 	shl	_var06, #2
0a63c     80 04 06 F6 | 	mov	_var03, #128
0a640     05 05 02 F1 | 	add	_var03, _var06
0a644     02 04 06 F1 | 	add	_var03, #2
0a648     F2 04 02 F1 | 	add	_var03, objptr
0a64c     02 FF 48 FC | 	wrbyte	#127, _var03
0a650     04 0B 02 F6 | 	mov	_var06, _var05
0a654     02 0A 66 F0 | 	shl	_var06, #2
0a658     80 04 06 F6 | 	mov	_var03, #128
0a65c     05 05 02 F1 | 	add	_var03, _var06
0a660     03 04 06 F1 | 	add	_var03, #3
0a664     F2 04 02 F1 | 	add	_var03, objptr
0a668     02 01 49 FC | 	wrbyte	#128, _var03
0a66c     77 00 00 FF 
0a670     9C E4 85 F1 | 	sub	objptr, ##61084
0a674     7C 00 90 FD | 	jmp	#LR__0870
0a678                 | LR__0869
0a678     04 0B 02 F6 | 	mov	_var06, _var05
0a67c     02 0A 66 F0 | 	shl	_var06, #2
0a680     80 04 06 F6 | 	mov	_var03, #128
0a684     05 05 02 F1 | 	add	_var03, _var06
0a688     77 00 00 FF 
0a68c     9C E4 05 F1 | 	add	objptr, ##61084
0a690     F2 04 02 F1 | 	add	_var03, objptr
0a694     02 01 49 FC | 	wrbyte	#128, _var03
0a698     04 0B 02 F6 | 	mov	_var06, _var05
0a69c     02 0A 66 F0 | 	shl	_var06, #2
0a6a0     80 04 06 F6 | 	mov	_var03, #128
0a6a4     05 05 02 F1 | 	add	_var03, _var06
0a6a8     01 04 06 F1 | 	add	_var03, #1
0a6ac     F2 04 02 F1 | 	add	_var03, objptr
0a6b0     02 01 49 FC | 	wrbyte	#128, _var03
0a6b4     04 0B 02 F6 | 	mov	_var06, _var05
0a6b8     02 0A 66 F0 | 	shl	_var06, #2
0a6bc     80 04 06 F6 | 	mov	_var03, #128
0a6c0     05 05 02 F1 | 	add	_var03, _var06
0a6c4     02 04 06 F1 | 	add	_var03, #2
0a6c8     F2 04 02 F1 | 	add	_var03, objptr
0a6cc     02 FF 48 FC | 	wrbyte	#127, _var03
0a6d0     04 0B 02 F6 | 	mov	_var06, _var05
0a6d4     02 0A 66 F0 | 	shl	_var06, #2
0a6d8     80 04 06 F6 | 	mov	_var03, #128
0a6dc     05 05 02 F1 | 	add	_var03, _var06
0a6e0     03 04 06 F1 | 	add	_var03, #3
0a6e4     F2 04 02 F1 | 	add	_var03, objptr
0a6e8     02 FF 48 FC | 	wrbyte	#127, _var03
0a6ec     77 00 00 FF 
0a6f0     9C E4 85 F1 | 	sub	objptr, ##61084
0a6f4                 | LR__0870
0a6f4     01 08 06 F1 | 	add	_var05, #1
0a6f8     20 08 56 F2 | 	cmps	_var05, #32 wc
0a6fc     D8 FE 9F CD |  if_b	jmp	#LR__0868
0a700                 | LR__0871
0a700     02 02 06 F1 | 	add	_var02, #2
0a704     40 02 56 F2 | 	cmps	_var02, #64 wc
0a708     3C FD 9F CD |  if_b	jmp	#LR__0860
0a70c                 | ' do: loop until lpeek(base+32*7)>32768
0a70c     57 00 00 FF 
0a710     00 E4 05 F1 | 	add	objptr, ##44544
0a714     97 84 48 FB | 	callpa	#(@LR__0880-@LR__0872)>>2,fcache_load_ptr_
0a718                 | LR__0872
0a718     F2 12 02 FB | 	rdlong	arg01, objptr
0a71c     E0 12 06 F1 | 	add	arg01, #224
0a720     09 FB 01 FB | 	rdlong	result1, arg01
0a724     40 00 00 FF 
0a728     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a72c     E8 FF 9F CD |  if_b	jmp	#LR__0872
0a730     57 00 00 FF 
0a734     00 E4 85 F1 | 	sub	objptr, ##44544
0a738                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a738     00 02 06 F6 | 	mov	_var02, #0
0a73c                 | LR__0873
0a73c     01 07 52 F6 | 	abs	_var04, _var02 wc
0a740     07 06 06 F5 | 	and	_var04, #7
0a744     03 07 82 F6 | 	negc	_var04, _var04
0a748     04 06 56 F2 | 	cmps	_var04, #4 wc
0a74c     20 00 90 3D |  if_ae	jmp	#LR__0874
0a750     01 0B 02 F6 | 	mov	_var06, _var02
0a754     77 00 00 FF 
0a758     9C E4 05 F1 | 	add	objptr, ##61084
0a75c     F2 0A 02 F1 | 	add	_var06, objptr
0a760     05 FF 48 FC | 	wrbyte	#127, _var06
0a764     77 00 00 FF 
0a768     9C E4 85 F1 | 	sub	objptr, ##61084
0a76c     1C 00 90 FD | 	jmp	#LR__0875
0a770                 | LR__0874
0a770     01 0B 02 F6 | 	mov	_var06, _var02
0a774     77 00 00 FF 
0a778     9C E4 05 F1 | 	add	objptr, ##61084
0a77c     F2 0A 02 F1 | 	add	_var06, objptr
0a780     05 01 49 FC | 	wrbyte	#128, _var06
0a784     77 00 00 FF 
0a788     9C E4 85 F1 | 	sub	objptr, ##61084
0a78c                 | LR__0875
0a78c     01 02 06 F1 | 	add	_var02, #1
0a790     80 02 56 F2 | 	cmps	_var02, #128 wc
0a794     A4 FF 9F CD |  if_b	jmp	#LR__0873
0a798                 | ' 
0a798                 | ' do: loop until lpeek(base+32*7)<32768
0a798     57 00 00 FF 
0a79c     00 E4 05 F1 | 	add	objptr, ##44544
0a7a0                 | LR__0876
0a7a0     F2 12 02 FB | 	rdlong	arg01, objptr
0a7a4     E0 12 06 F1 | 	add	arg01, #224
0a7a8     09 FB 01 FB | 	rdlong	result1, arg01
0a7ac     40 00 00 FF 
0a7b0     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a7b4     E8 FF 9F 3D |  if_ae	jmp	#LR__0876
0a7b8     57 00 00 FF 
0a7bc     00 E4 85 F1 | 	sub	objptr, ##44544
0a7c0                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a7c0     80 02 06 F6 | 	mov	_var02, #128
0a7c4                 | LR__0877
0a7c4     01 07 52 F6 | 	abs	_var04, _var02 wc
0a7c8     07 06 06 F5 | 	and	_var04, #7
0a7cc     03 07 82 F6 | 	negc	_var04, _var04
0a7d0     04 06 56 F2 | 	cmps	_var04, #4 wc
0a7d4     20 00 90 3D |  if_ae	jmp	#LR__0878
0a7d8     01 0B 02 F6 | 	mov	_var06, _var02
0a7dc     77 00 00 FF 
0a7e0     9C E4 05 F1 | 	add	objptr, ##61084
0a7e4     F2 0A 02 F1 | 	add	_var06, objptr
0a7e8     05 FF 48 FC | 	wrbyte	#127, _var06
0a7ec     77 00 00 FF 
0a7f0     9C E4 85 F1 | 	sub	objptr, ##61084
0a7f4     1C 00 90 FD | 	jmp	#LR__0879
0a7f8                 | LR__0878
0a7f8     01 0B 02 F6 | 	mov	_var06, _var02
0a7fc     77 00 00 FF 
0a800     9C E4 05 F1 | 	add	objptr, ##61084
0a804     F2 0A 02 F1 | 	add	_var06, objptr
0a808     05 01 49 FC | 	wrbyte	#128, _var06
0a80c     77 00 00 FF 
0a810     9C E4 85 F1 | 	sub	objptr, ##61084
0a814                 | LR__0879
0a814     01 02 06 F1 | 	add	_var02, #1
0a818     00 03 16 F2 | 	cmp	_var02, #256 wc
0a81c     A4 FF 9F CD |  if_b	jmp	#LR__0877
0a820                 | LR__0880
0a820                 | _csave_block_ret
0a820     2D 00 64 FD | 	ret
0a824                 | 
0a824                 | ' 
0a824                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a824                 | _csave_addtoblock
0a824     04 4A 05 F6 | 	mov	COUNT_, #4
0a828     A8 00 A0 FD | 	call	#pushregs_
0a82c     09 1F 02 F6 | 	mov	local01, arg01
0a830                 | ' 
0a830                 | ' 
0a830                 | ' if force=0 then
0a830     07 14 4E F7 | 	zerox	arg02, #7 wz
0a834     78 00 90 5D |  if_ne	jmp	#LR__0890
0a838     79 00 00 FF 
0a83c     9C E5 05 F1 | 	add	objptr, ##62364
0a840     F2 14 02 FB | 	rdlong	arg02, objptr
0a844     02 00 00 FF 
0a848     00 E4 85 F1 | 	sub	objptr, ##1024
0a84c     F2 14 02 F1 | 	add	arg02, objptr
0a850     0A 1F 42 FC | 	wrbyte	local01, arg02
0a854     02 00 00 FF 
0a858     00 E4 05 F1 | 	add	objptr, ##1024
0a85c     F2 1E 02 FB | 	rdlong	local01, objptr
0a860     01 1E 06 F1 | 	add	local01, #1
0a864     F2 1E 62 FC | 	wrlong	local01, objptr
0a868                 | '   block(blockptr)=d
0a868                 | '   blockptr+=1
0a868                 | '   if blockptr>=255 then
0a868     79 00 00 FF 
0a86c     9C E5 85 F1 | 	sub	objptr, ##62364
0a870     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a874     E4 00 90 CD |  if_b	jmp	#LR__0894
0a878     77 00 00 FF 
0a87c     9C E5 05 F1 | 	add	objptr, ##61340
0a880     F2 12 02 F6 | 	mov	arg01, objptr
0a884     77 00 00 FF 
0a888     9C E5 85 F1 | 	sub	objptr, ##61340
0a88c     B0 FB BF FD | 	call	#_csave_block
0a890     79 00 00 FF 
0a894     9C E5 05 F1 | 	add	objptr, ##62364
0a898     F2 00 68 FC | 	wrlong	#0, objptr
0a89c     79 00 00 FF 
0a8a0     9C E5 85 F1 | 	sub	objptr, ##62364
0a8a4     2C 13 06 F6 | 	mov	arg01, #300
0a8a8     94 2E B1 FD | 	call	#__system___waitms
0a8ac     AC 00 90 FD | 	jmp	#LR__0894
0a8b0                 | LR__0890
0a8b0     79 00 00 FF 
0a8b4     9C E5 05 F1 | 	add	objptr, ##62364
0a8b8     F2 20 02 FB | 	rdlong	local02, objptr
0a8bc     02 00 00 FF 
0a8c0     00 E4 85 F1 | 	sub	objptr, ##1024
0a8c4     F2 20 02 F1 | 	add	local02, objptr
0a8c8     10 1F 42 FC | 	wrbyte	local01, local02
0a8cc                 | '   block(blockptr)=d
0a8cc                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a8cc     02 00 00 FF 
0a8d0     00 E4 05 F1 | 	add	objptr, ##1024
0a8d4     F2 22 02 FB | 	rdlong	local03, objptr
0a8d8     79 00 00 FF 
0a8dc     9C E5 85 F1 | 	sub	objptr, ##62364
0a8e0     FF 22 16 F2 | 	cmp	local03, #255 wc
0a8e4     40 00 90 3D |  if_ae	jmp	#LR__0893
0a8e8     79 00 00 FF 
0a8ec     9C E5 05 F1 | 	add	objptr, ##62364
0a8f0     F2 24 02 FB | 	rdlong	local04, objptr
0a8f4     79 00 00 FF 
0a8f8     9C E5 85 F1 | 	sub	objptr, ##62364
0a8fc                 | LR__0891
0a8fc     00 25 56 F2 | 	cmps	local04, #256 wc
0a900     24 00 90 3D |  if_ae	jmp	#LR__0892
0a904     12 21 02 F6 | 	mov	local02, local04
0a908     77 00 00 FF 
0a90c     9C E5 05 F1 | 	add	objptr, ##61340
0a910     F2 20 02 F1 | 	add	local02, objptr
0a914     10 01 48 FC | 	wrbyte	#0, local02
0a918     01 24 06 F1 | 	add	local04, #1
0a91c     77 00 00 FF 
0a920     9C E5 85 F1 | 	sub	objptr, ##61340
0a924     D4 FF 9F FD | 	jmp	#LR__0891
0a928                 | LR__0892
0a928                 | LR__0893
0a928     77 00 00 FF 
0a92c     9C E5 05 F1 | 	add	objptr, ##61340
0a930     F2 12 02 F6 | 	mov	arg01, objptr
0a934     77 00 00 FF 
0a938     9C E5 85 F1 | 	sub	objptr, ##61340
0a93c     00 FB BF FD | 	call	#_csave_block
0a940     79 00 00 FF 
0a944     9C E5 05 F1 | 	add	objptr, ##62364
0a948     F2 00 68 FC | 	wrlong	#0, objptr
0a94c     79 00 00 FF 
0a950     9C E5 85 F1 | 	sub	objptr, ##62364
0a954     2C 13 06 F6 | 	mov	arg01, #300
0a958     E4 2D B1 FD | 	call	#__system___waitms
0a95c                 | LR__0894
0a95c     A7 F0 03 F6 | 	mov	ptra, fp
0a960     B2 00 A0 FD | 	call	#popregs_
0a964                 | _csave_addtoblock_ret
0a964     2D 00 64 FD | 	ret
0a968                 | 
0a968                 | ' 
0a968                 | ' sub test_csave
0a968                 | _test_csave
0a968     04 4A 05 F6 | 	mov	COUNT_, #4
0a96c     A8 00 A0 FD | 	call	#pushregs_
0a970     C0 F0 07 F1 | 	add	ptra, #192
0a974                 | ' 'dim fileheader,savestart, saveptr as ulong
0a974                 | ' 
0a974                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a974     6A 00 00 FF 
0a978     74 E4 05 F1 | 	add	objptr, ##54388
0a97c     F2 12 02 FB | 	rdlong	arg01, objptr
0a980     6A 00 00 FF 
0a984     74 E4 85 F1 | 	sub	objptr, ##54388
0a988     14 E9 B0 FD | 	call	#_pslpeek
0a98c     FF FF 7F FF 
0a990     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a994     0C 00 90 5D |  if_ne	jmp	#LR__0900
0a998     1B 12 06 F6 | 	mov	arg01, #27
0a99c     6C E6 B0 FD | 	call	#_printerror
0a9a0     1C 03 90 FD | 	jmp	#LR__0914
0a9a4                 | LR__0900
0a9a4     04 F8 BF FD | 	call	#_pop
0a9a8     90 4E 05 F1 | 	add	fp, #144
0a9ac     A7 FA 61 FC | 	wrlong	result1, fp
0a9b0     04 4E 05 F1 | 	add	fp, #4
0a9b4     A7 FC 61 FC | 	wrlong	result2, fp
0a9b8     04 4E 05 F1 | 	add	fp, #4
0a9bc     A7 FE 61 FC | 	wrlong	result3, fp
0a9c0                 | ' t1=pop()
0a9c0                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0a9c0     98 4E 85 F1 | 	sub	fp, #152
0a9c4     1F FE 0D F2 | 	cmp	result3, #31 wz
0a9c8     24 00 90 AD |  if_e	jmp	#LR__0901
0a9cc     7B 00 00 FF 
0a9d0     94 E4 05 F1 | 	add	objptr, ##63124
0a9d4     F2 1C 02 FB | 	rdlong	arg06, objptr
0a9d8     7B 00 00 FF 
0a9dc     94 E4 85 F1 | 	sub	objptr, ##63124
0a9e0     8C 4E 05 F1 | 	add	fp, #140
0a9e4     A7 1C 62 FC | 	wrlong	arg06, fp
0a9e8     8C 4E 85 F1 | 	sub	fp, #140
0a9ec     14 00 90 FD | 	jmp	#LR__0902
0a9f0                 | LR__0901
0a9f0     90 4E 05 F1 | 	add	fp, #144
0a9f4     A7 1C 02 FB | 	rdlong	arg06, fp
0a9f8     04 4E 85 F1 | 	sub	fp, #4
0a9fc     A7 1C 62 FC | 	wrlong	arg06, fp
0aa00     8C 4E 85 F1 | 	sub	fp, #140
0aa04                 | LR__0902
0aa04                 | ' 
0aa04                 | ' ' prepare 1 kHz header wave
0aa04                 | ' 
0aa04                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0aa04     A7 00 68 FC | 	wrlong	#0, fp
0aa08     97 34 48 FB | 	callpa	#(@LR__0906-@LR__0903)>>2,fcache_load_ptr_
0aa0c                 | LR__0903
0aa0c     A7 1C 02 FB | 	rdlong	arg06, fp
0aa10     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0aa14     07 1A 06 F5 | 	and	arg05, #7
0aa18     0D 1B 82 F6 | 	negc	arg05, arg05
0aa1c     04 1A 56 F2 | 	cmps	arg05, #4 wc
0aa20     20 00 90 3D |  if_ae	jmp	#LR__0904
0aa24     A7 1A 02 FB | 	rdlong	arg05, fp
0aa28     77 00 00 FF 
0aa2c     9C E4 05 F1 | 	add	objptr, ##61084
0aa30     F2 1A 02 F1 | 	add	arg05, objptr
0aa34     0D FF 48 FC | 	wrbyte	#127, arg05
0aa38     77 00 00 FF 
0aa3c     9C E4 85 F1 | 	sub	objptr, ##61084
0aa40     1C 00 90 FD | 	jmp	#LR__0905
0aa44                 | LR__0904
0aa44     A7 1A 02 FB | 	rdlong	arg05, fp
0aa48     77 00 00 FF 
0aa4c     9C E4 05 F1 | 	add	objptr, ##61084
0aa50     F2 1A 02 F1 | 	add	arg05, objptr
0aa54     0D 01 49 FC | 	wrbyte	#128, arg05
0aa58     77 00 00 FF 
0aa5c     9C E4 85 F1 | 	sub	objptr, ##61084
0aa60                 | LR__0905
0aa60     A7 1A 02 FB | 	rdlong	arg05, fp
0aa64     01 1A 06 F1 | 	add	arg05, #1
0aa68     A7 1A 62 FC | 	wrlong	arg05, fp
0aa6c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0aa70     98 FF 9F CD |  if_b	jmp	#LR__0903
0aa74                 | LR__0906
0aa74     77 00 00 FF 
0aa78     9C E4 05 F1 | 	add	objptr, ##61084
0aa7c     F2 14 02 F6 | 	mov	arg02, objptr
0aa80     07 12 06 F6 | 	mov	arg01, #7
0aa84     0F 00 00 FF 
0aa88     40 17 06 F6 | 	mov	arg03, ##8000
0aa8c     0E 18 C6 F9 | 	decod	arg04, #14
0aa90     00 1B 06 F6 | 	mov	arg05, #256
0aa94     00 1C 06 F6 | 	mov	arg06, #0
0aa98     6B 00 00 FF 
0aa9c     D0 E5 85 F1 | 	sub	objptr, ##55248
0aaa0     F4 25 B1 FD | 	call	#_audio096_spin2_play8
0aaa4     0B 00 00 FF 
0aaa8     CC E4 85 F1 | 	sub	objptr, ##5836
0aaac     05 00 00 FF 
0aab0     B8 13 06 F6 | 	mov	arg01, ##3000
0aab4     88 2C B1 FD | 	call	#__system___waitms
0aab8     79 00 00 FF 
0aabc     9C E5 05 F1 | 	add	objptr, ##62364
0aac0     F2 00 68 FC | 	wrlong	#0, objptr
0aac4     79 00 00 FF 
0aac8     9C E5 85 F1 | 	sub	objptr, ##62364
0aacc     72 12 06 F6 | 	mov	arg01, #114
0aad0     00 14 06 F6 | 	mov	arg02, #0
0aad4     4C FD BF FD | 	call	#_csave_addtoblock
0aad8     62 12 06 F6 | 	mov	arg01, #98
0aadc     00 14 06 F6 | 	mov	arg02, #0
0aae0     40 FD BF FD | 	call	#_csave_addtoblock
0aae4     61 12 06 F6 | 	mov	arg01, #97
0aae8     00 14 06 F6 | 	mov	arg02, #0
0aaec     34 FD BF FD | 	call	#_csave_addtoblock
0aaf0     0D 12 06 F6 | 	mov	arg01, #13
0aaf4     00 14 06 F6 | 	mov	arg02, #0
0aaf8     28 FD BF FD | 	call	#_csave_addtoblock
0aafc                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0aafc                 | ' waitms 3000 
0aafc                 | ' 
0aafc                 | ' blockptr=0
0aafc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0aafc                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0aafc     A7 02 68 FC | 	wrlong	#1, fp
0ab00     8C 4E 05 F1 | 	add	fp, #140
0ab04     A7 12 02 FB | 	rdlong	arg01, fp
0ab08     8C 4E 85 F1 | 	sub	fp, #140
0ab0c     09 1F 02 F6 | 	mov	local01, arg01
0ab10     97 06 48 FB | 	callpa	#(@LR__0908-@LR__0907)>>2,fcache_load_ptr_
0ab14                 | LR__0907
0ab14     0F FB C9 FA | 	rdbyte	result1, local01 wz
0ab18     01 1E 06 51 |  if_ne	add	local01, #1
0ab1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0907
0ab20                 | LR__0908
0ab20     09 1F 82 F1 | 	sub	local01, arg01
0ab24     0F 21 02 F6 | 	mov	local02, local01
0ab28     01 20 06 F1 | 	add	local02, #1
0ab2c                 | LR__0909
0ab2c     A7 1A 02 FB | 	rdlong	arg05, fp
0ab30     10 1B 52 F2 | 	cmps	arg05, local02 wc
0ab34     34 00 90 3D |  if_ae	jmp	#LR__0910
0ab38     8C 4E 05 F1 | 	add	fp, #140
0ab3c     A7 12 02 FB | 	rdlong	arg01, fp
0ab40     8C 4E 85 F1 | 	sub	fp, #140
0ab44     A7 14 02 FB | 	rdlong	arg02, fp
0ab48     01 16 06 F6 | 	mov	arg03, #1
0ab4c     58 4A B1 FD | 	call	#__system__Mid_S
0ab50     FD 12 C2 FA | 	rdbyte	arg01, result1
0ab54     00 14 06 F6 | 	mov	arg02, #0
0ab58     C8 FC BF FD | 	call	#_csave_addtoblock
0ab5c     A7 1A 02 FB | 	rdlong	arg05, fp
0ab60     01 1A 06 F1 | 	add	arg05, #1
0ab64     A7 1A 62 FC | 	wrlong	arg05, fp
0ab68     C0 FF 9F FD | 	jmp	#LR__0909
0ab6c                 | LR__0910
0ab6c     00 12 06 F6 | 	mov	arg01, #0
0ab70     00 14 06 F6 | 	mov	arg02, #0
0ab74     AC FC BF FD | 	call	#_csave_addtoblock
0ab78     72 12 06 F6 | 	mov	arg01, #114
0ab7c     00 14 06 F6 | 	mov	arg02, #0
0ab80     A0 FC BF FD | 	call	#_csave_addtoblock
0ab84     62 12 06 F6 | 	mov	arg01, #98
0ab88     00 14 06 F6 | 	mov	arg02, #0
0ab8c     94 FC BF FD | 	call	#_csave_addtoblock
0ab90     73 12 06 F6 | 	mov	arg01, #115
0ab94     00 14 06 F6 | 	mov	arg02, #0
0ab98     88 FC BF FD | 	call	#_csave_addtoblock
0ab9c     0D 12 06 F6 | 	mov	arg01, #13
0aba0     00 14 06 F6 | 	mov	arg02, #0
0aba4     7C FC BF FD | 	call	#_csave_addtoblock
0aba8     6A 00 00 FF 
0abac     74 E4 05 F1 | 	add	objptr, ##54388
0abb0     F2 22 02 FB | 	rdlong	local03, objptr
0abb4     6A 00 00 FF 
0abb8     74 E4 85 F1 | 	sub	objptr, ##54388
0abbc     9C 4E 05 F1 | 	add	fp, #156
0abc0     A7 22 62 FC | 	wrlong	local03, fp
0abc4     9C 4E 85 F1 | 	sub	fp, #156
0abc8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0abc8                 | ' 
0abc8                 | ' saveptr=programstart
0abc8                 | ' do
0abc8                 | LR__0911
0abc8     A0 4E 05 F1 | 	add	fp, #160
0abcc     A7 12 02 F6 | 	mov	arg01, fp
0abd0     04 4E 85 F1 | 	sub	fp, #4
0abd4     A7 14 02 FB | 	rdlong	arg02, fp
0abd8     9C 4E 85 F1 | 	sub	fp, #156
0abdc     18 16 06 F6 | 	mov	arg03, #24
0abe0     0B 00 00 FF 
0abe4     CC E4 05 F1 | 	add	objptr, ##5836
0abe8     5C 1C B1 FD | 	call	#_psram_spin2_read1
0abec     0C 4E 05 F1 | 	add	fp, #12
0abf0     A7 12 02 F6 | 	mov	arg01, fp
0abf4     9C 4E 05 F1 | 	add	fp, #156
0abf8     A7 14 02 FB | 	rdlong	arg02, fp
0abfc     04 4E 05 F1 | 	add	fp, #4
0ac00     A7 16 02 FB | 	rdlong	arg03, fp
0ac04     AC 4E 85 F1 | 	sub	fp, #172
0ac08     3C 1C B1 FD | 	call	#_psram_spin2_read1
0ac0c     0B 00 00 FF 
0ac10     CC E4 85 F1 | 	sub	objptr, ##5836
0ac14     AC 4E 05 F1 | 	add	fp, #172
0ac18     A7 12 02 FB | 	rdlong	arg01, fp
0ac1c     AC 4E 85 F1 | 	sub	fp, #172
0ac20     00 14 06 F6 | 	mov	arg02, #0
0ac24     FC FB BF FD | 	call	#_csave_addtoblock
0ac28                 | '   psram.read1(varptr(header(0)),saveptr,24)
0ac28                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0ac28                 | '   csave_addtoblock(header(3),0) ' that's always <255
0ac28                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0ac28     A7 00 68 FC | 	wrlong	#0, fp
0ac2c     AC 4E 05 F1 | 	add	fp, #172
0ac30     A7 24 02 FB | 	rdlong	local04, fp
0ac34     AC 4E 85 F1 | 	sub	fp, #172
0ac38                 | LR__0912
0ac38     A7 22 02 FB | 	rdlong	local03, fp
0ac3c     12 23 52 F2 | 	cmps	local03, local04 wc
0ac40     2C 00 90 3D |  if_ae	jmp	#LR__0913
0ac44     A7 22 02 FB | 	rdlong	local03, fp
0ac48     0C 4E 05 F1 | 	add	fp, #12
0ac4c     A7 22 02 F1 | 	add	local03, fp
0ac50     11 13 C2 FA | 	rdbyte	arg01, local03
0ac54     00 14 06 F6 | 	mov	arg02, #0
0ac58     0C 4E 85 F1 | 	sub	fp, #12
0ac5c     C4 FB BF FD | 	call	#_csave_addtoblock
0ac60     A7 22 02 FB | 	rdlong	local03, fp
0ac64     01 22 06 F1 | 	add	local03, #1
0ac68     A7 22 62 FC | 	wrlong	local03, fp
0ac6c     C8 FF 9F FD | 	jmp	#LR__0912
0ac70                 | LR__0913
0ac70     B4 4E 05 F1 | 	add	fp, #180
0ac74     A7 22 02 FB | 	rdlong	local03, fp
0ac78     18 4E 85 F1 | 	sub	fp, #24
0ac7c     A7 22 62 FC | 	wrlong	local03, fp
0ac80     18 4E 05 F1 | 	add	fp, #24
0ac84     A7 22 02 FB | 	rdlong	local03, fp
0ac88     B4 4E 85 F1 | 	sub	fp, #180
0ac8c     FF FF 3F FF 
0ac90     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0ac94     30 FF 9F 5D |  if_ne	jmp	#LR__0911
0ac98     00 12 06 F6 | 	mov	arg01, #0
0ac9c     01 14 06 F6 | 	mov	arg02, #1
0aca0     80 FB BF FD | 	call	#_csave_addtoblock
0aca4     57 00 00 FF 
0aca8     00 E4 05 F1 | 	add	objptr, ##44544
0acac     F2 12 02 FB | 	rdlong	arg01, objptr
0acb0     57 00 00 FF 
0acb4     00 E4 85 F1 | 	sub	objptr, ##44544
0acb8     F4 12 06 F1 | 	add	arg01, #244
0acbc     09 01 58 FC | 	wrword	#0, arg01
0acc0                 | LR__0914
0acc0     A7 F0 03 F6 | 	mov	ptra, fp
0acc4     B2 00 A0 FD | 	call	#popregs_
0acc8                 | _test_csave_ret
0acc8     2D 00 64 FD | 	ret
0accc                 | 
0accc                 | ' 
0accc                 | ' ' ----------------- Save the program
0accc                 | ' 
0accc                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0accc                 | _do_save
0accc     04 4A 05 F6 | 	mov	COUNT_, #4
0acd0     A8 00 A0 FD | 	call	#pushregs_
0acd4     01 00 00 FF 
0acd8     C0 F0 07 F1 | 	add	ptra, ##704
0acdc     6A 00 00 FF 
0ace0     70 E4 05 F1 | 	add	objptr, ##54384
0ace4     F2 1E 02 FB | 	rdlong	local01, objptr
0ace8     0F 21 02 F6 | 	mov	local02, local01
0acec     01 20 66 F0 | 	shl	local02, #1
0acf0     0F 21 02 F1 | 	add	local02, local01
0acf4     02 20 66 F0 | 	shl	local02, #2
0acf8     03 00 00 FF 
0acfc     04 E4 85 F1 | 	sub	objptr, ##1540
0ad00     F2 20 02 F1 | 	add	local02, objptr
0ad04     10 23 02 FB | 	rdlong	local03, local02
0ad08     01 00 00 FF 
0ad0c     10 4E 05 F1 | 	add	fp, ##528
0ad10     A7 22 62 FC | 	wrlong	local03, fp
0ad14                 | ' 
0ad14                 | ' numpar=compiledline(lineptr_e).result.uresult
0ad14                 | ' 
0ad14                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0ad14     01 00 00 FF 
0ad18     10 4E 85 F1 | 	sub	fp, ##528
0ad1c     01 22 56 F2 | 	cmps	local03, #1 wc
0ad20     67 00 00 FF 
0ad24     6C E4 85 F1 | 	sub	objptr, ##52844
0ad28     20 00 90 CD |  if_b	jmp	#LR__0920
0ad2c     7C F4 BF FD | 	call	#_pop
0ad30     A7 FA 61 FC | 	wrlong	result1, fp
0ad34     04 4E 05 F1 | 	add	fp, #4
0ad38     A7 FC 61 FC | 	wrlong	result2, fp
0ad3c     04 4E 05 F1 | 	add	fp, #4
0ad40     A7 FE 61 FC | 	wrlong	result3, fp
0ad44     08 4E 85 F1 | 	sub	fp, #8
0ad48     24 00 90 FD | 	jmp	#LR__0921
0ad4c                 | LR__0920
0ad4c     7B 00 00 FF 
0ad50     94 E4 05 F1 | 	add	objptr, ##63124
0ad54     F2 22 02 FB | 	rdlong	local03, objptr
0ad58     7B 00 00 FF 
0ad5c     94 E4 85 F1 | 	sub	objptr, ##63124
0ad60     A7 22 62 FC | 	wrlong	local03, fp
0ad64     08 4E 05 F1 | 	add	fp, #8
0ad68     A7 3E 68 FC | 	wrlong	#31, fp
0ad6c     08 4E 85 F1 | 	sub	fp, #8
0ad70                 | LR__0921
0ad70                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ad70     6A 00 00 FF 
0ad74     74 E4 05 F1 | 	add	objptr, ##54388
0ad78     F2 12 02 FB | 	rdlong	arg01, objptr
0ad7c     6A 00 00 FF 
0ad80     74 E4 85 F1 | 	sub	objptr, ##54388
0ad84     18 E5 B0 FD | 	call	#_pslpeek
0ad88     FF FF 7F FF 
0ad8c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0ad90     0C 00 90 5D |  if_ne	jmp	#LR__0922
0ad94     1B 12 06 F6 | 	mov	arg01, #27
0ad98     70 E2 B0 FD | 	call	#_printerror
0ad9c     1C 03 90 FD | 	jmp	#LR__0928
0ada0                 | LR__0922
0ada0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0ada0     08 4E 05 F1 | 	add	fp, #8
0ada4     A7 22 02 FB | 	rdlong	local03, fp
0ada8     08 4E 85 F1 | 	sub	fp, #8
0adac     2B 22 0E F2 | 	cmp	local03, #43 wz
0adb0     18 00 90 5D |  if_ne	jmp	#LR__0923
0adb4     A7 12 02 FB | 	rdlong	arg01, fp
0adb8     98 36 B0 FD | 	call	#_convertstring
0adbc     A7 FA 61 FC | 	wrlong	result1, fp
0adc0     08 4E 05 F1 | 	add	fp, #8
0adc4     A7 3E 68 FC | 	wrlong	#31, fp
0adc8     08 4E 85 F1 | 	sub	fp, #8
0adcc                 | LR__0923
0adcc                 | ' if t1.result_type=result_string then
0adcc     08 4E 05 F1 | 	add	fp, #8
0add0     A7 22 02 FB | 	rdlong	local03, fp
0add4     08 4E 85 F1 | 	sub	fp, #8
0add8     1F 22 0E F2 | 	cmp	local03, #31 wz
0addc     DC 02 90 5D |  if_ne	jmp	#LR__0927
0ade0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0ade0     A7 12 02 FB | 	rdlong	arg01, fp
0ade4     67 01 00 FF 
0ade8     BE 15 06 F6 | 	mov	arg02, ##@LR__4949
0adec     84 26 B1 FD | 	call	#__system___string_cmp
0adf0     00 FA 0D F2 | 	cmp	result1, #0 wz
0adf4     7B 00 00 AF 
0adf8     94 E4 05 A1 |  if_e	add	objptr, ##63124
0adfc     F2 22 02 AB |  if_e	rdlong	local03, objptr
0ae00     A7 22 62 AC |  if_e	wrlong	local03, fp
0ae04     7B 00 00 AF 
0ae08     94 E4 85 A1 |  if_e	sub	objptr, ##63124
0ae0c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ae10     7B 00 00 5F 
0ae14     94 E4 05 51 |  if_ne	add	objptr, ##63124
0ae18     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0ae1c     7B 00 00 5F 
0ae20     94 E4 85 51 |  if_ne	sub	objptr, ##63124
0ae24                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0ae24     09 12 06 F6 | 	mov	arg01, #9
0ae28     E4 75 B1 FD | 	call	#__system__close
0ae2c     09 22 06 F6 | 	mov	local03, #9
0ae30     72 00 00 FF 
0ae34     84 E4 05 F1 | 	add	objptr, ##58500
0ae38     F2 12 02 FB | 	rdlong	arg01, objptr
0ae3c     72 00 00 FF 
0ae40     84 E4 85 F1 | 	sub	objptr, ##58500
0ae44     67 01 00 FF 
0ae48     BF 15 06 F6 | 	mov	arg02, ##@LR__4950
0ae4c     58 26 B1 FD | 	call	#__system___string_concat
0ae50     FD 12 02 F6 | 	mov	arg01, result1
0ae54     A7 14 02 FB | 	rdlong	arg02, fp
0ae58     4C 26 B1 FD | 	call	#__system___string_concat
0ae5c     FD 14 02 F6 | 	mov	arg02, result1
0ae60     11 13 02 F6 | 	mov	arg01, local03
0ae64     0D 16 06 F6 | 	mov	arg03, #13
0ae68     E0 31 B1 FD | 	call	#__system___basic_open_string
0ae6c     01 00 00 FF 
0ae70     0C 4E 05 F1 | 	add	fp, ##524
0ae74     A7 0A 68 FC | 	wrlong	#5, fp
0ae78     6A 00 00 FF 
0ae7c     74 E4 05 F1 | 	add	objptr, ##54388
0ae80     F2 22 02 FB | 	rdlong	local03, objptr
0ae84     6A 00 00 FF 
0ae88     74 E4 85 F1 | 	sub	objptr, ##54388
0ae8c     10 4E 05 F1 | 	add	fp, #16
0ae90     A7 22 62 FC | 	wrlong	local03, fp
0ae94     01 00 00 FF 
0ae98     1C 4E 85 F1 | 	sub	fp, ##540
0ae9c                 | ' '  put #9,1,fileheader,1
0ae9c                 | '   i=5
0ae9c                 | '   saveptr=programstart
0ae9c                 | '   do
0ae9c                 | LR__0924
0ae9c     01 00 00 FF 
0aea0     20 4E 05 F1 | 	add	fp, ##544
0aea4     A7 12 02 F6 | 	mov	arg01, fp
0aea8     04 4E 85 F1 | 	sub	fp, #4
0aeac     A7 14 02 FB | 	rdlong	arg02, fp
0aeb0     01 00 00 FF 
0aeb4     1C 4E 85 F1 | 	sub	fp, ##540
0aeb8     18 16 06 F6 | 	mov	arg03, #24
0aebc     0B 00 00 FF 
0aec0     CC E4 05 F1 | 	add	objptr, ##5836
0aec4     80 19 B1 FD | 	call	#_psram_spin2_read1
0aec8     01 00 00 FF 
0aecc     38 4E 05 F1 | 	add	fp, ##568
0aed0     A7 12 02 F6 | 	mov	arg01, fp
0aed4     10 4E 85 F1 | 	sub	fp, #16
0aed8     A7 14 02 FB | 	rdlong	arg02, fp
0aedc     04 4E 05 F1 | 	add	fp, #4
0aee0     A7 16 02 FB | 	rdlong	arg03, fp
0aee4     01 00 00 FF 
0aee8     2C 4E 85 F1 | 	sub	fp, ##556
0aeec     58 19 B1 FD | 	call	#_psram_spin2_read1
0aef0     0B 00 00 FF 
0aef4     CC E4 85 F1 | 	sub	objptr, ##5836
0aef8     67 01 00 FF 
0aefc     C1 23 06 F6 | 	mov	local03, ##@LR__4951
0af00     01 00 00 FF 
0af04     B8 4E 05 F1 | 	add	fp, ##696
0af08     A7 22 62 FC | 	wrlong	local03, fp
0af0c                 | '     psram.read1(varptr(header(0)),saveptr,24)
0af0c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0af0c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0af0c     AC 4E 85 F1 | 	sub	fp, #172
0af10     A7 02 68 FC | 	wrlong	#1, fp
0af14     20 4E 05 F1 | 	add	fp, #32
0af18     A7 24 02 FB | 	rdlong	local04, fp
0af1c     01 00 00 FF 
0af20     2C 4E 85 F1 | 	sub	fp, ##556
0af24     01 24 06 F1 | 	add	local04, #1
0af28                 | LR__0925
0af28     01 00 00 FF 
0af2c     0C 4E 05 F1 | 	add	fp, ##524
0af30     A7 22 02 FB | 	rdlong	local03, fp
0af34     01 00 00 FF 
0af38     0C 4E 85 F1 | 	sub	fp, ##524
0af3c     12 23 52 F2 | 	cmps	local03, local04 wc
0af40     64 00 90 3D |  if_ae	jmp	#LR__0926
0af44     01 00 00 FF 
0af48     B8 4E 05 F1 | 	add	fp, ##696
0af4c     A7 1E 02 FB | 	rdlong	local01, fp
0af50     AC 4E 85 F1 | 	sub	fp, #172
0af54     A7 22 02 FB | 	rdlong	local03, fp
0af58     01 22 86 F1 | 	sub	local03, #1
0af5c     2C 4E 05 F1 | 	add	fp, #44
0af60     A7 22 02 F1 | 	add	local03, fp
0af64     11 13 C2 FA | 	rdbyte	arg01, local03
0af68     01 00 00 FF 
0af6c     38 4E 85 F1 | 	sub	fp, ##568
0af70     E0 46 B1 FD | 	call	#__system__Chr_S
0af74     FD 14 02 F6 | 	mov	arg02, result1
0af78     0F 13 02 F6 | 	mov	arg01, local01
0af7c     28 25 B1 FD | 	call	#__system___string_concat
0af80     01 00 00 FF 
0af84     B8 4E 05 F1 | 	add	fp, ##696
0af88     A7 FA 61 FC | 	wrlong	result1, fp
0af8c     AC 4E 85 F1 | 	sub	fp, #172
0af90     A7 22 02 FB | 	rdlong	local03, fp
0af94     01 22 06 F1 | 	add	local03, #1
0af98     A7 22 62 FC | 	wrlong	local03, fp
0af9c     01 00 00 FF 
0afa0     0C 4E 85 F1 | 	sub	fp, ##524
0afa4     80 FF 9F FD | 	jmp	#LR__0925
0afa8                 | LR__0926
0afa8                 | '  '   put #9,i,header(3),1 : i+=4
0afa8                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0afa8                 | '      print #9, saveline$
0afa8     09 12 06 F6 | 	mov	arg01, #9
0afac     2C 7E B1 FD | 	call	#__system___getiolock_0473
0afb0     FD 12 02 F6 | 	mov	arg01, result1
0afb4     94 24 B1 FD | 	call	#__system___lockmem
0afb8     01 00 00 FF 
0afbc     B8 4E 05 F1 | 	add	fp, ##696
0afc0     A7 14 02 FB | 	rdlong	arg02, fp
0afc4     01 00 00 FF 
0afc8     B8 4E 85 F1 | 	sub	fp, ##696
0afcc     09 12 06 F6 | 	mov	arg01, #9
0afd0     00 16 06 F6 | 	mov	arg03, #0
0afd4     78 31 B1 FD | 	call	#__system___basic_print_string
0afd8     09 12 06 F6 | 	mov	arg01, #9
0afdc     0A 14 06 F6 | 	mov	arg02, #10
0afe0     00 16 06 F6 | 	mov	arg03, #0
0afe4     10 31 B1 FD | 	call	#__system___basic_print_char
0afe8     09 12 06 F6 | 	mov	arg01, #9
0afec     EC 7D B1 FD | 	call	#__system___getiolock_0473
0aff0     FD 00 68 FC | 	wrlong	#0, result1
0aff4     01 00 00 FF 
0aff8     34 4E 05 F1 | 	add	fp, ##564
0affc     A7 22 02 FB | 	rdlong	local03, fp
0b000     18 4E 85 F1 | 	sub	fp, #24
0b004     A7 22 62 FC | 	wrlong	local03, fp
0b008     18 4E 05 F1 | 	add	fp, #24
0b00c     A7 22 02 FB | 	rdlong	local03, fp
0b010     01 00 00 FF 
0b014     34 4E 85 F1 | 	sub	fp, ##564
0b018     FF FF 3F FF 
0b01c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b020     78 FE 9F 5D |  if_ne	jmp	#LR__0924
0b024                 | '   close #9  
0b024     09 12 06 F6 | 	mov	arg01, #9
0b028     E4 73 B1 FD | 	call	#__system__close
0b02c                 | '   print "Saved as ";currentdir$+"/"+loadname
0b02c     00 12 06 F6 | 	mov	arg01, #0
0b030     A8 7D B1 FD | 	call	#__system___getiolock_0473
0b034     FD 12 02 F6 | 	mov	arg01, result1
0b038     10 24 B1 FD | 	call	#__system___lockmem
0b03c     67 01 00 FF 
0b040     C2 15 06 F6 | 	mov	arg02, ##@LR__4952
0b044     00 12 06 F6 | 	mov	arg01, #0
0b048     00 16 06 F6 | 	mov	arg03, #0
0b04c     00 31 B1 FD | 	call	#__system___basic_print_string
0b050     00 20 06 F6 | 	mov	local02, #0
0b054     72 00 00 FF 
0b058     84 E4 05 F1 | 	add	objptr, ##58500
0b05c     F2 12 02 FB | 	rdlong	arg01, objptr
0b060     72 00 00 FF 
0b064     84 E4 85 F1 | 	sub	objptr, ##58500
0b068     67 01 00 FF 
0b06c     CC 15 06 F6 | 	mov	arg02, ##@LR__4953
0b070     34 24 B1 FD | 	call	#__system___string_concat
0b074     FD 12 02 F6 | 	mov	arg01, result1
0b078     7B 00 00 FF 
0b07c     94 E4 05 F1 | 	add	objptr, ##63124
0b080     F2 14 02 FB | 	rdlong	arg02, objptr
0b084     7B 00 00 FF 
0b088     94 E4 85 F1 | 	sub	objptr, ##63124
0b08c     18 24 B1 FD | 	call	#__system___string_concat
0b090     FD 14 02 F6 | 	mov	arg02, result1
0b094     10 13 02 F6 | 	mov	arg01, local02
0b098     00 16 06 F6 | 	mov	arg03, #0
0b09c     B0 30 B1 FD | 	call	#__system___basic_print_string
0b0a0     00 12 06 F6 | 	mov	arg01, #0
0b0a4     0A 14 06 F6 | 	mov	arg02, #10
0b0a8     00 16 06 F6 | 	mov	arg03, #0
0b0ac     48 30 B1 FD | 	call	#__system___basic_print_char
0b0b0     00 12 06 F6 | 	mov	arg01, #0
0b0b4     24 7D B1 FD | 	call	#__system___getiolock_0473
0b0b8     FD 00 68 FC | 	wrlong	#0, result1
0b0bc                 | LR__0927
0b0bc                 | LR__0928
0b0bc     A7 F0 03 F6 | 	mov	ptra, fp
0b0c0     B2 00 A0 FD | 	call	#popregs_
0b0c4                 | _do_save_ret
0b0c4     2D 00 64 FD | 	ret
0b0c8                 | 
0b0c8                 | ' 
0b0c8                 | ' '----------------- Load the program
0b0c8                 | ' 'lo todo: errors while loading
0b0c8                 | ' sub do_load
0b0c8                 | _do_load
0b0c8     01 4A 05 F6 | 	mov	COUNT_, #1
0b0cc     A8 00 A0 FD | 	call	#pushregs_
0b0d0     A8 F0 07 F1 | 	add	ptra, #168
0b0d4     6A 00 00 FF 
0b0d8     70 E4 05 F1 | 	add	objptr, ##54384
0b0dc     F2 14 02 FB | 	rdlong	arg02, objptr
0b0e0     0A 13 02 F6 | 	mov	arg01, arg02
0b0e4     01 12 66 F0 | 	shl	arg01, #1
0b0e8     0A 13 02 F1 | 	add	arg01, arg02
0b0ec     02 12 66 F0 | 	shl	arg01, #2
0b0f0     03 00 00 FF 
0b0f4     04 E4 85 F1 | 	sub	objptr, ##1540
0b0f8     F2 12 02 F1 | 	add	arg01, objptr
0b0fc     09 15 02 FB | 	rdlong	arg02, arg01
0b100     18 4E 05 F1 | 	add	fp, #24
0b104     A7 14 62 FC | 	wrlong	arg02, fp
0b108     8C 4E 05 F1 | 	add	fp, #140
0b10c     A7 12 02 F6 | 	mov	arg01, fp
0b110     67 00 00 FF 
0b114     6C E4 85 F1 | 	sub	objptr, ##52844
0b118     80 4E 85 F1 | 	sub	fp, #128
0b11c     09 4F 61 FC | 	wrlong	fp, arg01
0b120                 | ' numpar=compiledline(lineptr_e).result.uresult
0b120                 | ' lpoke varptr(line2$),varptr(line2)
0b120                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b120     0C 4E 85 F1 | 	sub	fp, #12
0b124     A7 1E 02 FB | 	rdlong	local01, fp
0b128     18 4E 85 F1 | 	sub	fp, #24
0b12c     01 1E 56 F2 | 	cmps	local01, #1 wc
0b130     20 00 90 CD |  if_b	jmp	#LR__0930
0b134     74 F0 BF FD | 	call	#_pop
0b138     A7 FA 61 FC | 	wrlong	result1, fp
0b13c     04 4E 05 F1 | 	add	fp, #4
0b140     A7 FC 61 FC | 	wrlong	result2, fp
0b144     04 4E 05 F1 | 	add	fp, #4
0b148     A7 FE 61 FC | 	wrlong	result3, fp
0b14c     08 4E 85 F1 | 	sub	fp, #8
0b150     24 00 90 FD | 	jmp	#LR__0931
0b154                 | LR__0930
0b154     7B 00 00 FF 
0b158     94 E4 05 F1 | 	add	objptr, ##63124
0b15c     F2 1E 02 FB | 	rdlong	local01, objptr
0b160     7B 00 00 FF 
0b164     94 E4 85 F1 | 	sub	objptr, ##63124
0b168     A7 1E 62 FC | 	wrlong	local01, fp
0b16c     08 4E 05 F1 | 	add	fp, #8
0b170     A7 3E 68 FC | 	wrlong	#31, fp
0b174     08 4E 85 F1 | 	sub	fp, #8
0b178                 | LR__0931
0b178                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b178                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b178     08 4E 05 F1 | 	add	fp, #8
0b17c     A7 1E 02 FB | 	rdlong	local01, fp
0b180     08 4E 85 F1 | 	sub	fp, #8
0b184     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b188     18 00 90 5D |  if_ne	jmp	#LR__0932
0b18c     A7 12 02 FB | 	rdlong	arg01, fp
0b190     C0 32 B0 FD | 	call	#_convertstring
0b194     A7 FA 61 FC | 	wrlong	result1, fp
0b198     08 4E 05 F1 | 	add	fp, #8
0b19c     A7 3E 68 FC | 	wrlong	#31, fp
0b1a0     08 4E 85 F1 | 	sub	fp, #8
0b1a4                 | LR__0932
0b1a4                 | ' if t1.result_type=result_string then
0b1a4     08 4E 05 F1 | 	add	fp, #8
0b1a8     A7 1E 02 FB | 	rdlong	local01, fp
0b1ac     08 4E 85 F1 | 	sub	fp, #8
0b1b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b1b4     20 04 90 5D |  if_ne	jmp	#LR__0940
0b1b8     F4 2C B0 FD | 	call	#_do_new
0b1bc                 | '   do_new
0b1bc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b1bc     A7 12 02 FB | 	rdlong	arg01, fp
0b1c0     67 01 00 FF 
0b1c4     CE 15 06 F6 | 	mov	arg02, ##@LR__4954
0b1c8     A8 22 B1 FD | 	call	#__system___string_cmp
0b1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b1d0     7B 00 00 AF 
0b1d4     94 E4 05 A1 |  if_e	add	objptr, ##63124
0b1d8     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b1dc     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b1e0     7B 00 00 AF 
0b1e4     94 E4 85 A1 |  if_e	sub	objptr, ##63124
0b1e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b1ec     7B 00 00 5F 
0b1f0     94 E4 05 51 |  if_ne	add	objptr, ##63124
0b1f4     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b1f8     7B 00 00 5F 
0b1fc     94 E4 85 51 |  if_ne	sub	objptr, ##63124
0b200                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b200     09 12 06 F6 | 	mov	arg01, #9
0b204     08 72 B1 FD | 	call	#__system__close
0b208     09 1E 06 F6 | 	mov	local01, #9
0b20c     72 00 00 FF 
0b210     84 E4 05 F1 | 	add	objptr, ##58500
0b214     F2 12 02 FB | 	rdlong	arg01, objptr
0b218     72 00 00 FF 
0b21c     84 E4 85 F1 | 	sub	objptr, ##58500
0b220     67 01 00 FF 
0b224     CF 15 06 F6 | 	mov	arg02, ##@LR__4955
0b228     7C 22 B1 FD | 	call	#__system___string_concat
0b22c     FD 12 02 F6 | 	mov	arg01, result1
0b230     A7 14 02 FB | 	rdlong	arg02, fp
0b234     70 22 B1 FD | 	call	#__system___string_concat
0b238     FD 14 02 F6 | 	mov	arg02, result1
0b23c     0F 13 02 F6 | 	mov	arg01, local01
0b240     00 16 06 F6 | 	mov	arg03, #0
0b244     04 2E B1 FD | 	call	#__system___basic_open_string
0b248     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b24c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b250     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b254     10 4E 05 F1 | 	add	fp, #16
0b258     A7 FA 61 FC | 	wrlong	result1, fp
0b25c                 | '   r=geterr() 
0b25c                 | '   if r then 
0b25c     10 4E 85 F1 | 	sub	fp, #16
0b260     48 01 90 AD |  if_e	jmp	#LR__0934
0b264                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b264     09 12 06 F6 | 	mov	arg01, #9
0b268     A4 71 B1 FD | 	call	#__system__close
0b26c     09 1E 06 F6 | 	mov	local01, #9
0b270     72 00 00 FF 
0b274     84 E4 05 F1 | 	add	objptr, ##58500
0b278     F2 12 02 FB | 	rdlong	arg01, objptr
0b27c     72 00 00 FF 
0b280     84 E4 85 F1 | 	sub	objptr, ##58500
0b284     67 01 00 FF 
0b288     D1 15 06 F6 | 	mov	arg02, ##@LR__4956
0b28c     18 22 B1 FD | 	call	#__system___string_concat
0b290     FD 12 02 F6 | 	mov	arg01, result1
0b294     A7 14 02 FB | 	rdlong	arg02, fp
0b298     0C 22 B1 FD | 	call	#__system___string_concat
0b29c     FD 12 02 F6 | 	mov	arg01, result1
0b2a0     67 01 00 FF 
0b2a4     D3 15 06 F6 | 	mov	arg02, ##@LR__4957
0b2a8     FC 21 B1 FD | 	call	#__system___string_concat
0b2ac     FD 14 02 F6 | 	mov	arg02, result1
0b2b0     0F 13 02 F6 | 	mov	arg01, local01
0b2b4     00 16 06 F6 | 	mov	arg03, #0
0b2b8     90 2D B1 FD | 	call	#__system___basic_open_string
0b2bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b2c0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b2c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b2c8     10 4E 05 F1 | 	add	fp, #16
0b2cc     A7 FA 61 FC | 	wrlong	result1, fp
0b2d0                 | '     r=geterr() 
0b2d0                 | '     if r then 
0b2d0     10 4E 85 F1 | 	sub	fp, #16
0b2d4     A0 00 90 AD |  if_e	jmp	#LR__0933
0b2d8                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b2d8     00 12 06 F6 | 	mov	arg01, #0
0b2dc     FC 7A B1 FD | 	call	#__system___getiolock_0473
0b2e0     FD 12 02 F6 | 	mov	arg01, result1
0b2e4     64 21 B1 FD | 	call	#__system___lockmem
0b2e8     67 01 00 FF 
0b2ec     D8 15 06 F6 | 	mov	arg02, ##@LR__4958
0b2f0     00 12 06 F6 | 	mov	arg01, #0
0b2f4     00 16 06 F6 | 	mov	arg03, #0
0b2f8     54 2E B1 FD | 	call	#__system___basic_print_string
0b2fc     10 4E 05 F1 | 	add	fp, #16
0b300     A7 14 02 FB | 	rdlong	arg02, fp
0b304     10 4E 85 F1 | 	sub	fp, #16
0b308     00 12 06 F6 | 	mov	arg01, #0
0b30c     00 16 06 F6 | 	mov	arg03, #0
0b310     0A 18 06 F6 | 	mov	arg04, #10
0b314     7C 2E B1 FD | 	call	#__system___basic_print_integer
0b318     67 01 00 FF 
0b31c     E6 15 06 F6 | 	mov	arg02, ##@LR__4959
0b320     00 12 06 F6 | 	mov	arg01, #0
0b324     00 16 06 F6 | 	mov	arg03, #0
0b328     24 2E B1 FD | 	call	#__system___basic_print_string
0b32c     00 1E 06 F6 | 	mov	local01, #0
0b330     10 4E 05 F1 | 	add	fp, #16
0b334     A7 12 02 FB | 	rdlong	arg01, fp
0b338     10 4E 85 F1 | 	sub	fp, #16
0b33c     9C 47 B1 FD | 	call	#__system___strerror
0b340     FD 14 02 F6 | 	mov	arg02, result1
0b344     0F 13 02 F6 | 	mov	arg01, local01
0b348     00 16 06 F6 | 	mov	arg03, #0
0b34c     00 2E B1 FD | 	call	#__system___basic_print_string
0b350     00 12 06 F6 | 	mov	arg01, #0
0b354     0A 14 06 F6 | 	mov	arg02, #10
0b358     00 16 06 F6 | 	mov	arg03, #0
0b35c     98 2D B1 FD | 	call	#__system___basic_print_char
0b360     00 12 06 F6 | 	mov	arg01, #0
0b364     74 7A B1 FD | 	call	#__system___getiolock_0473
0b368     FD 00 68 FC | 	wrlong	#0, result1
0b36c     09 12 06 F6 | 	mov	arg01, #9
0b370     9C 70 B1 FD | 	call	#__system__close
0b374     F8 02 90 FD | 	jmp	#LR__0942
0b378                 | LR__0933
0b378     7B 00 00 FF 
0b37c     94 E4 05 F1 | 	add	objptr, ##63124
0b380     F2 12 02 FB | 	rdlong	arg01, objptr
0b384     7B 00 00 FF 
0b388     94 E4 85 F1 | 	sub	objptr, ##63124
0b38c     67 01 00 FF 
0b390     E9 15 06 F6 | 	mov	arg02, ##@LR__4960
0b394     10 21 B1 FD | 	call	#__system___string_concat
0b398     7B 00 00 FF 
0b39c     94 E4 05 F1 | 	add	objptr, ##63124
0b3a0     F2 FA 61 FC | 	wrlong	result1, objptr
0b3a4     7B 00 00 FF 
0b3a8     94 E4 85 F1 | 	sub	objptr, ##63124
0b3ac                 | LR__0934
0b3ac     0C 4E 05 F1 | 	add	fp, #12
0b3b0     A7 0A 68 FC | 	wrlong	#5, fp
0b3b4                 | '   i=5
0b3b4                 | '   get #9,1,header,1   
0b3b4     10 4E 05 F1 | 	add	fp, #16
0b3b8     A7 16 02 F6 | 	mov	arg03, fp
0b3bc     1C 4E 85 F1 | 	sub	fp, #28
0b3c0     09 12 06 F6 | 	mov	arg01, #9
0b3c4     01 14 06 F6 | 	mov	arg02, #1
0b3c8     01 18 06 F6 | 	mov	arg04, #1
0b3cc     04 1A 06 F6 | 	mov	arg05, #4
0b3d0     8C 2E B1 FD | 	call	#__system___basic_get
0b3d4                 | '   
0b3d4                 | '   if header<>$0D616272 then 
0b3d4     1C 4E 05 F1 | 	add	fp, #28
0b3d8     A7 1E 02 FB | 	rdlong	local01, fp
0b3dc     1C 4E 85 F1 | 	sub	fp, #28
0b3e0     B1 B0 06 FF 
0b3e4     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b3e8     00 01 90 AD |  if_e	jmp	#LR__0937
0b3ec                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0b3ec     09 12 06 F6 | 	mov	arg01, #9
0b3f0     1C 70 B1 FD | 	call	#__system__close
0b3f4     09 1E 06 F6 | 	mov	local01, #9
0b3f8     72 00 00 FF 
0b3fc     84 E4 05 F1 | 	add	objptr, ##58500
0b400     F2 12 02 FB | 	rdlong	arg01, objptr
0b404     72 00 00 FF 
0b408     84 E4 85 F1 | 	sub	objptr, ##58500
0b40c     67 01 00 FF 
0b410     EE 15 06 F6 | 	mov	arg02, ##@LR__4961
0b414     90 20 B1 FD | 	call	#__system___string_concat
0b418     FD 12 02 F6 | 	mov	arg01, result1
0b41c     7B 00 00 FF 
0b420     94 E4 05 F1 | 	add	objptr, ##63124
0b424     F2 14 02 FB | 	rdlong	arg02, objptr
0b428     7B 00 00 FF 
0b42c     94 E4 85 F1 | 	sub	objptr, ##63124
0b430     74 20 B1 FD | 	call	#__system___string_concat
0b434     FD 14 02 F6 | 	mov	arg02, result1
0b438     0F 13 02 F6 | 	mov	arg01, local01
0b43c     00 16 06 F6 | 	mov	arg03, #0
0b440     08 2C B1 FD | 	call	#__system___basic_open_string
0b444                 | '     do
0b444                 | LR__0935
0b444     09 12 06 F6 | 	mov	arg01, #9
0b448     0C 22 B1 FD | 	call	#__system___basic_read_line
0b44c     57 00 00 FF 
0b450     0C E4 05 F1 | 	add	objptr, ##44556
0b454     F2 FA 61 FC | 	wrlong	result1, objptr
0b458                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b458     57 00 00 FF 
0b45c     0C E4 85 F1 | 	sub	objptr, ##44556
0b460     FD 12 02 F6 | 	mov	arg01, result1
0b464     01 14 06 F6 | 	mov	arg02, #1
0b468     24 40 B1 FD | 	call	#__system__Left_S
0b46c     FD 12 02 F6 | 	mov	arg01, result1
0b470     67 01 00 FF 
0b474     F0 15 06 F6 | 	mov	arg02, ##@LR__4962
0b478     F8 1F B1 FD | 	call	#__system___string_cmp
0b47c     00 FA 55 F2 | 	cmps	result1, #0 wc
0b480     34 00 90 CD |  if_b	jmp	#LR__0936
0b484     57 00 00 FF 
0b488     0C E4 05 F1 | 	add	objptr, ##44556
0b48c     F2 12 02 FB | 	rdlong	arg01, objptr
0b490     57 00 00 FF 
0b494     0C E4 85 F1 | 	sub	objptr, ##44556
0b498     01 14 06 F6 | 	mov	arg02, #1
0b49c     F0 3F B1 FD | 	call	#__system__Left_S
0b4a0     FD 12 02 F6 | 	mov	arg01, result1
0b4a4     67 01 00 FF 
0b4a8     F2 15 06 F6 | 	mov	arg02, ##@LR__4963
0b4ac     C4 1F B1 FD | 	call	#__system___string_cmp
0b4b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0b4b4     64 55 BF CD |  if_b	call	#_interpret
0b4b8                 | LR__0936
0b4b8     57 00 00 FF 
0b4bc     0C E4 05 F1 | 	add	objptr, ##44556
0b4c0     F2 12 02 FB | 	rdlong	arg01, objptr
0b4c4     57 00 00 FF 
0b4c8     0C E4 85 F1 | 	sub	objptr, ##44556
0b4cc     67 01 00 FF 
0b4d0     F4 15 06 F6 | 	mov	arg02, ##@LR__4964
0b4d4     9C 1F B1 FD | 	call	#__system___string_cmp
0b4d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4dc     64 FF 9F 5D |  if_ne	jmp	#LR__0935
0b4e0                 | '     close #9
0b4e0     09 12 06 F6 | 	mov	arg01, #9
0b4e4     28 6F B1 FD | 	call	#__system__close
0b4e8     F4 00 90 FD | 	jmp	#LR__0941
0b4ec                 | LR__0937
0b4ec                 | '   'printerror(26) : close #9 : return
0b4ec                 | '     do
0b4ec                 | LR__0938
0b4ec                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b4ec     0C 4E 05 F1 | 	add	fp, #12
0b4f0     A7 14 02 FB | 	rdlong	arg02, fp
0b4f4     14 4E 05 F1 | 	add	fp, #20
0b4f8     A7 16 02 F6 | 	mov	arg03, fp
0b4fc     20 4E 85 F1 | 	sub	fp, #32
0b500     09 12 06 F6 | 	mov	arg01, #9
0b504     01 18 06 F6 | 	mov	arg04, #1
0b508     04 1A 06 F6 | 	mov	arg05, #4
0b50c     50 2D B1 FD | 	call	#__system___basic_get
0b510     14 4E 05 F1 | 	add	fp, #20
0b514     A7 FA 61 FC | 	wrlong	result1, fp
0b518     08 4E 85 F1 | 	sub	fp, #8
0b51c     A7 1E 02 FB | 	rdlong	local01, fp
0b520     04 1E 06 F1 | 	add	local01, #4
0b524     A7 1E 62 FC | 	wrlong	local01, fp
0b528     14 4E 05 F1 | 	add	fp, #20
0b52c     A7 1E 02 FB | 	rdlong	local01, fp
0b530     04 4E 05 F1 | 	add	fp, #4
0b534     A7 1E 02 F1 | 	add	local01, fp
0b538     0F 01 48 FC | 	wrbyte	#0, local01
0b53c                 | '       if amount=1 then  
0b53c     10 4E 85 F1 | 	sub	fp, #16
0b540     A7 1E 02 FB | 	rdlong	local01, fp
0b544     14 4E 85 F1 | 	sub	fp, #20
0b548     01 1E 0E F2 | 	cmp	local01, #1 wz
0b54c     68 00 90 5D |  if_ne	jmp	#LR__0939
0b550                 | '         get #9,i,line2(0),linelength : i+=linelength
0b550     0C 4E 05 F1 | 	add	fp, #12
0b554     A7 14 02 FB | 	rdlong	arg02, fp
0b558     18 4E 05 F1 | 	add	fp, #24
0b55c     A7 16 02 F6 | 	mov	arg03, fp
0b560     04 4E 85 F1 | 	sub	fp, #4
0b564     A7 18 02 FB | 	rdlong	arg04, fp
0b568     20 4E 85 F1 | 	sub	fp, #32
0b56c     09 12 06 F6 | 	mov	arg01, #9
0b570     01 1A 06 F6 | 	mov	arg05, #1
0b574     E8 2C B1 FD | 	call	#__system___basic_get
0b578     0C 4E 05 F1 | 	add	fp, #12
0b57c     A7 1E 02 FB | 	rdlong	local01, fp
0b580     14 4E 05 F1 | 	add	fp, #20
0b584     A7 1A 02 FB | 	rdlong	arg05, fp
0b588     0D 1F 02 F1 | 	add	local01, arg05
0b58c     14 4E 85 F1 | 	sub	fp, #20
0b590     A7 1E 62 FC | 	wrlong	local01, fp
0b594     98 4E 05 F1 | 	add	fp, #152
0b598     A7 1E 02 FB | 	rdlong	local01, fp
0b59c     A4 4E 85 F1 | 	sub	fp, #164
0b5a0     57 00 00 FF 
0b5a4     0C E4 05 F1 | 	add	objptr, ##44556
0b5a8     F2 1E 62 FC | 	wrlong	local01, objptr
0b5ac     57 00 00 FF 
0b5b0     0C E4 85 F1 | 	sub	objptr, ##44556
0b5b4     64 54 BF FD | 	call	#_interpret
0b5b8                 | LR__0939
0b5b8     14 4E 05 F1 | 	add	fp, #20
0b5bc     A7 1E 02 FB | 	rdlong	local01, fp
0b5c0     14 4E 85 F1 | 	sub	fp, #20
0b5c4     01 1E 56 F2 | 	cmps	local01, #1 wc
0b5c8     20 FF 9F 3D |  if_ae	jmp	#LR__0938
0b5cc                 | '     close #9 
0b5cc     09 12 06 F6 | 	mov	arg01, #9
0b5d0     3C 6E B1 FD | 	call	#__system__close
0b5d4     08 00 90 FD | 	jmp	#LR__0941
0b5d8                 | LR__0940
0b5d8     1E 12 06 F6 | 	mov	arg01, #30
0b5dc     2C DA B0 FD | 	call	#_printerror
0b5e0                 | LR__0941
0b5e0                 | '   print "Loaded ";currentdir$+"/"+loadname
0b5e0     00 12 06 F6 | 	mov	arg01, #0
0b5e4     F4 77 B1 FD | 	call	#__system___getiolock_0473
0b5e8     FD 12 02 F6 | 	mov	arg01, result1
0b5ec     5C 1E B1 FD | 	call	#__system___lockmem
0b5f0     67 01 00 FF 
0b5f4     F5 15 06 F6 | 	mov	arg02, ##@LR__4965
0b5f8     00 12 06 F6 | 	mov	arg01, #0
0b5fc     00 16 06 F6 | 	mov	arg03, #0
0b600     4C 2B B1 FD | 	call	#__system___basic_print_string
0b604     00 1E 06 F6 | 	mov	local01, #0
0b608     72 00 00 FF 
0b60c     84 E4 05 F1 | 	add	objptr, ##58500
0b610     F2 12 02 FB | 	rdlong	arg01, objptr
0b614     72 00 00 FF 
0b618     84 E4 85 F1 | 	sub	objptr, ##58500
0b61c     67 01 00 FF 
0b620     FD 15 06 F6 | 	mov	arg02, ##@LR__4966
0b624     80 1E B1 FD | 	call	#__system___string_concat
0b628     FD 12 02 F6 | 	mov	arg01, result1
0b62c     7B 00 00 FF 
0b630     94 E4 05 F1 | 	add	objptr, ##63124
0b634     F2 14 02 FB | 	rdlong	arg02, objptr
0b638     7B 00 00 FF 
0b63c     94 E4 85 F1 | 	sub	objptr, ##63124
0b640     64 1E B1 FD | 	call	#__system___string_concat
0b644     FD 14 02 F6 | 	mov	arg02, result1
0b648     0F 13 02 F6 | 	mov	arg01, local01
0b64c     00 16 06 F6 | 	mov	arg03, #0
0b650     FC 2A B1 FD | 	call	#__system___basic_print_string
0b654     00 12 06 F6 | 	mov	arg01, #0
0b658     0A 14 06 F6 | 	mov	arg02, #10
0b65c     00 16 06 F6 | 	mov	arg03, #0
0b660     94 2A B1 FD | 	call	#__system___basic_print_char
0b664     00 12 06 F6 | 	mov	arg01, #0
0b668     70 77 B1 FD | 	call	#__system___getiolock_0473
0b66c     FD 00 68 FC | 	wrlong	#0, result1
0b670                 | LR__0942
0b670     A7 F0 03 F6 | 	mov	ptra, fp
0b674     B2 00 A0 FD | 	call	#popregs_
0b678                 | _do_load_ret
0b678     2D 00 64 FD | 	ret
0b67c                 | 
0b67c                 | ' 
0b67c                 | ' '----------------- Run the program 
0b67c                 | ' 
0b67c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b67c                 | ' 
0b67c                 | ' sub do_run
0b67c                 | _do_run
0b67c     01 4A 05 F6 | 	mov	COUNT_, #1
0b680     A8 00 A0 FD | 	call	#pushregs_
0b684     6A 00 00 FF 
0b688     70 E4 05 F1 | 	add	objptr, ##54384
0b68c     F2 1C 02 FB | 	rdlong	arg06, objptr
0b690     0E 19 02 F6 | 	mov	arg04, arg06
0b694     01 18 66 F0 | 	shl	arg04, #1
0b698     0E 19 02 F1 | 	add	arg04, arg06
0b69c     02 18 66 F0 | 	shl	arg04, #2
0b6a0     03 00 00 FF 
0b6a4     04 E4 85 F1 | 	sub	objptr, ##1540
0b6a8     F2 18 02 F1 | 	add	arg04, objptr
0b6ac     0C 1B 02 FB | 	rdlong	arg05, arg04
0b6b0                 | ' numpar=compiledline(lineptr_e).result.uresult
0b6b0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0b6b0     01 1A 0E F2 | 	cmp	arg05, #1 wz
0b6b4     67 00 00 FF 
0b6b8     6C E4 85 F1 | 	sub	objptr, ##52844
0b6bc     08 FA BF AD |  if_e	call	#_do_load
0b6c0     6A 00 00 FF 
0b6c4     74 E4 05 F1 | 	add	objptr, ##54388
0b6c8     F2 1C 02 FB | 	rdlong	arg06, objptr
0b6cc     0F 00 00 FF 
0b6d0     2C E5 05 F1 | 	add	objptr, ##7980
0b6d4     F2 1C 62 FC | 	wrlong	arg06, objptr
0b6d8     04 E4 05 F1 | 	add	objptr, #4
0b6dc     F2 00 68 FC | 	wrlong	#0, objptr
0b6e0     04 E4 05 F1 | 	add	objptr, #4
0b6e4     FF FF FF FF 
0b6e8     F2 FE 6B FC | 	wrlong	##-1, objptr
0b6ec                 | ' if inrun>0 then 
0b6ec     04 E4 05 F1 | 	add	objptr, #4
0b6f0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b6f4     79 00 00 FF 
0b6f8     AC E5 85 F1 | 	sub	objptr, ##62380
0b6fc     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b700     30 00 90 CD |  if_b	jmp	#LR__0950
0b704     79 00 00 FF 
0b708     B0 E5 05 F1 | 	add	objptr, ##62384
0b70c     F2 12 02 F6 | 	mov	arg01, objptr
0b710     10 E4 85 F1 | 	sub	objptr, #16
0b714     F2 14 02 FB | 	rdlong	arg02, objptr
0b718     18 16 06 F6 | 	mov	arg03, #24
0b71c     6E 00 00 FF 
0b720     D4 E4 85 F1 | 	sub	objptr, ##56532
0b724     20 11 B1 FD | 	call	#_psram_spin2_read1
0b728     0B 00 00 FF 
0b72c     CC E4 85 F1 | 	sub	objptr, ##5836
0b730                 | '   psram.read1(varptr(runheader),runptr,24)  
0b730                 | '   return
0b730     C4 02 90 FD | 	jmp	#LR__0957
0b734                 | LR__0950
0b734     79 00 00 FF 
0b738     AC E5 05 F1 | 	add	objptr, ##62380
0b73c     F2 02 68 FC | 	wrlong	#1, objptr
0b740     04 E4 05 F1 | 	add	objptr, #4
0b744     F2 12 02 F6 | 	mov	arg01, objptr
0b748     10 E4 85 F1 | 	sub	objptr, #16
0b74c     F2 14 02 FB | 	rdlong	arg02, objptr
0b750     18 16 06 F6 | 	mov	arg03, #24
0b754     6E 00 00 FF 
0b758     D4 E4 85 F1 | 	sub	objptr, ##56532
0b75c     E8 10 B1 FD | 	call	#_psram_spin2_read1
0b760                 | ' inrun=1
0b760                 | ' psram.read1(varptr(runheader),runptr,24) 
0b760                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0b760     6E 00 00 FF 
0b764     E4 E4 05 F1 | 	add	objptr, ##56548
0b768     F2 1E 02 FB | 	rdlong	local01, objptr
0b76c     79 00 00 FF 
0b770     B0 E5 85 F1 | 	sub	objptr, ##62384
0b774     FF FF 7F FF 
0b778     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0b77c     79 00 00 AF 
0b780     AC E5 05 A1 |  if_e	add	objptr, ##62380
0b784     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b788     79 00 00 AF 
0b78c     AC E5 85 A1 |  if_e	sub	objptr, ##62380
0b790     64 02 90 AD |  if_e	jmp	#LR__0957
0b794                 | ' do 
0b794                 | LR__0951
0b794                 | '   if runptr<>oldrunptr then
0b794     79 00 00 FF 
0b798     A0 E5 05 F1 | 	add	objptr, ##62368
0b79c     F2 1E 02 FB | 	rdlong	local01, objptr
0b7a0     08 E4 05 F1 | 	add	objptr, #8
0b7a4     F2 1C 02 FB | 	rdlong	arg06, objptr
0b7a8     79 00 00 FF 
0b7ac     A8 E5 85 F1 | 	sub	objptr, ##62376
0b7b0     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0b7b4     CC 00 90 AD |  if_e	jmp	#LR__0952
0b7b8     79 00 00 FF 
0b7bc     B0 E5 05 F1 | 	add	objptr, ##62384
0b7c0     F2 12 02 F6 | 	mov	arg01, objptr
0b7c4     10 E4 85 F1 | 	sub	objptr, #16
0b7c8     F2 14 02 FB | 	rdlong	arg02, objptr
0b7cc     18 16 06 F6 | 	mov	arg03, #24
0b7d0     6E 00 00 FF 
0b7d4     D4 E4 85 F1 | 	sub	objptr, ##56532
0b7d8     6C 10 B1 FD | 	call	#_psram_spin2_read1
0b7dc     5B 00 00 FF 
0b7e0     A0 E5 05 F1 | 	add	objptr, ##47008
0b7e4     F2 12 02 F6 | 	mov	arg01, objptr
0b7e8     12 00 00 FF 
0b7ec     34 E5 05 F1 | 	add	objptr, ##9524
0b7f0     F2 14 02 FB | 	rdlong	arg02, objptr
0b7f4     14 00 00 FF 
0b7f8     4C E5 85 F1 | 	sub	objptr, ##10572
0b7fc     F2 1E 02 FB | 	rdlong	local01, objptr
0b800     01 1E 66 F0 | 	shl	local01, #1
0b804     0F 15 02 F1 | 	add	arg02, local01
0b808     14 00 00 FF 
0b80c     64 E5 05 F1 | 	add	objptr, ##10596
0b810     F2 16 02 FB | 	rdlong	arg03, objptr
0b814     18 E4 85 F1 | 	sub	objptr, #24
0b818     F2 1E 02 FB | 	rdlong	local01, objptr
0b81c     0F 17 82 F1 | 	sub	arg03, local01
0b820     6E 00 00 FF 
0b824     D4 E4 85 F1 | 	sub	objptr, ##56532
0b828     1C 10 B1 FD | 	call	#_psram_spin2_read1
0b82c     6E 00 00 FF 
0b830     EC E4 05 F1 | 	add	objptr, ##56556
0b834     F2 1E 02 FB | 	rdlong	local01, objptr
0b838     18 E4 85 F1 | 	sub	objptr, #24
0b83c     F2 16 02 FB | 	rdlong	arg03, objptr
0b840     0B 1F 82 F1 | 	sub	local01, arg03
0b844     14 00 00 FF 
0b848     4C E5 85 F1 | 	sub	objptr, ##10572
0b84c     F2 16 02 FB | 	rdlong	arg03, objptr
0b850     0B 1F 12 FD | 	qdiv	local01, arg03
0b854     05 00 00 FF 
0b858     18 E4 05 F1 | 	add	objptr, ##2584
0b85c     18 1E 62 FD | 	getqx	local01
0b860     03 1E 86 F1 | 	sub	local01, #3
0b864     F2 1E 62 FC | 	wrlong	local01, objptr
0b868     0F 00 00 FF 
0b86c     34 E5 05 F1 | 	add	objptr, ##7988
0b870     F2 1E 02 FB | 	rdlong	local01, objptr
0b874     08 E4 05 F1 | 	add	objptr, #8
0b878     F2 1E 62 FC | 	wrlong	local01, objptr
0b87c     79 00 00 FF 
0b880     A8 E5 85 F1 | 	sub	objptr, ##62376
0b884                 | LR__0952
0b884     79 00 00 FF 
0b888     C4 E5 05 F1 | 	add	objptr, ##62404
0b88c     F2 1E 02 FB | 	rdlong	local01, objptr
0b890     24 E4 85 F1 | 	sub	objptr, #36
0b894     F2 1E 62 FC | 	wrlong	local01, objptr
0b898     04 E4 05 F1 | 	add	objptr, #4
0b89c     F2 12 02 FB | 	rdlong	arg01, objptr
0b8a0     79 00 00 FF 
0b8a4     A4 E5 85 F1 | 	sub	objptr, ##62372
0b8a8     FC E7 BF FD | 	call	#_execute_line
0b8ac     79 00 00 FF 
0b8b0     A4 E5 05 F1 | 	add	objptr, ##62372
0b8b4     F2 FA 61 FC | 	wrlong	result1, objptr
0b8b8     04 E4 85 F1 | 	sub	objptr, #4
0b8bc     F2 1E 02 FB | 	rdlong	local01, objptr
0b8c0     79 00 00 FF 
0b8c4     A0 E5 85 F1 | 	sub	objptr, ##62368
0b8c8     FF FF 3F FF 
0b8cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b8d0     30 00 90 AD |  if_e	jmp	#LR__0954
0b8d4     E0 12 06 F6 | 	mov	arg01, #224
0b8d8     FC 12 B1 FD | 	call	#_usbnew_spin2_keystate
0b8dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b8e0     10 00 90 5D |  if_ne	jmp	#LR__0953
0b8e4     E4 12 06 F6 | 	mov	arg01, #228
0b8e8     EC 12 B1 FD | 	call	#_usbnew_spin2_keystate
0b8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0b8f0     A0 FE 9F AD |  if_e	jmp	#LR__0951
0b8f4                 | LR__0953
0b8f4     06 12 06 F6 | 	mov	arg01, #6
0b8f8     DC 12 B1 FD | 	call	#_usbnew_spin2_keystate
0b8fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b900     90 FE 9F AD |  if_e	jmp	#LR__0951
0b904                 | LR__0954
0b904                 | '   ''do whatever kbm.peek_latest_key()=$106 
0b904                 | ' if runheader(5)<>$7FFF_FFFF then 
0b904     79 00 00 FF 
0b908     C4 E5 05 F1 | 	add	objptr, ##62404
0b90c     F2 1E 02 FB | 	rdlong	local01, objptr
0b910     79 00 00 FF 
0b914     C4 E5 85 F1 | 	sub	objptr, ##62404
0b918     FF FF 3F FF 
0b91c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b920     C0 00 90 AD |  if_e	jmp	#LR__0956
0b924                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0b924     79 00 00 FF 
0b928     D0 E5 05 F1 | 	add	objptr, ##62416
0b92c     F2 1E 02 FB | 	rdlong	local01, objptr
0b930     79 00 00 FF 
0b934     D0 E5 85 F1 | 	sub	objptr, ##62416
0b938     01 1E 0E F2 | 	cmp	local01, #1 wz
0b93c     40 00 90 5D |  if_ne	jmp	#LR__0955
0b940     7B 00 00 FF 
0b944     74 E4 05 F1 | 	add	objptr, ##63092
0b948     F2 14 02 FB | 	rdlong	arg02, objptr
0b94c     04 E4 85 F1 | 	sub	objptr, #4
0b950     F2 1A 02 FB | 	rdlong	arg05, objptr
0b954     07 12 06 F6 | 	mov	arg01, #7
0b958     56 00 00 FF 
0b95c     44 16 06 F6 | 	mov	arg03, ##44100
0b960     0C 18 C6 F9 | 	decod	arg04, #12
0b964     01 1C 66 F6 | 	neg	arg06, #1
0b968     6F 00 00 FF 
0b96c     A4 E5 85 F1 | 	sub	objptr, ##57252
0b970     88 16 B1 FD | 	call	#_audio096_spin2_play
0b974     0B 00 00 FF 
0b978     CC E4 85 F1 | 	sub	objptr, ##5836
0b97c     F4 12 B1 FD | 	call	#_usbnew_spin2_get_key
0b980                 | LR__0955
0b980                 | '   print "Stopped at line ";runheader(0)
0b980     00 12 06 F6 | 	mov	arg01, #0
0b984     54 74 B1 FD | 	call	#__system___getiolock_0473
0b988     FD 12 02 F6 | 	mov	arg01, result1
0b98c     BC 1A B1 FD | 	call	#__system___lockmem
0b990     67 01 00 FF 
0b994     FF 15 06 F6 | 	mov	arg02, ##@LR__4967
0b998     00 12 06 F6 | 	mov	arg01, #0
0b99c     00 16 06 F6 | 	mov	arg03, #0
0b9a0     AC 27 B1 FD | 	call	#__system___basic_print_string
0b9a4     79 00 00 FF 
0b9a8     B0 E5 05 F1 | 	add	objptr, ##62384
0b9ac     F2 14 02 FB | 	rdlong	arg02, objptr
0b9b0     79 00 00 FF 
0b9b4     B0 E5 85 F1 | 	sub	objptr, ##62384
0b9b8     00 12 06 F6 | 	mov	arg01, #0
0b9bc     00 16 06 F6 | 	mov	arg03, #0
0b9c0     0A 18 06 F6 | 	mov	arg04, #10
0b9c4     0C 28 B1 FD | 	call	#__system___basic_print_unsigned
0b9c8     00 12 06 F6 | 	mov	arg01, #0
0b9cc     0A 14 06 F6 | 	mov	arg02, #10
0b9d0     00 16 06 F6 | 	mov	arg03, #0
0b9d4     20 27 B1 FD | 	call	#__system___basic_print_char
0b9d8     00 12 06 F6 | 	mov	arg01, #0
0b9dc     FC 73 B1 FD | 	call	#__system___getiolock_0473
0b9e0     FD 00 68 FC | 	wrlong	#0, result1
0b9e4                 | LR__0956
0b9e4     79 00 00 FF 
0b9e8     AC E5 05 F1 | 	add	objptr, ##62380
0b9ec     F2 00 68 FC | 	wrlong	#0, objptr
0b9f0     79 00 00 FF 
0b9f4     AC E5 85 F1 | 	sub	objptr, ##62380
0b9f8                 | LR__0957
0b9f8     A7 F0 03 F6 | 	mov	ptra, fp
0b9fc     B2 00 A0 FD | 	call	#popregs_
0ba00                 | _do_run_ret
0ba00     2D 00 64 FD | 	ret
0ba04                 | 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' sub do_defenv
0ba04                 | _do_defenv
0ba04     09 4A 05 F6 | 	mov	COUNT_, #9
0ba08     A8 00 A0 FD | 	call	#pushregs_
0ba0c     B4 F0 07 F1 | 	add	ptra, #180
0ba10     6A 00 00 FF 
0ba14     70 E4 05 F1 | 	add	objptr, ##54384
0ba18     F2 1E 02 FB | 	rdlong	local01, objptr
0ba1c     0F 1B 02 F6 | 	mov	arg05, local01
0ba20     01 1A 66 F0 | 	shl	arg05, #1
0ba24     0F 1B 02 F1 | 	add	arg05, local01
0ba28     02 1A 66 F0 | 	shl	arg05, #2
0ba2c     03 00 00 FF 
0ba30     04 E4 85 F1 | 	sub	objptr, ##1540
0ba34     F2 20 02 F6 | 	mov	local02, objptr
0ba38     F2 1A 02 F1 | 	add	arg05, objptr
0ba3c     0D 1B 02 FB | 	rdlong	arg05, arg05
0ba40     10 4E 05 F1 | 	add	fp, #16
0ba44     A7 1A 62 FC | 	wrlong	arg05, fp
0ba48                 | ' 
0ba48                 | ' numpar=compiledline(lineptr_e).result.uresult
0ba48                 | ' 
0ba48                 | ' 
0ba48                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ba48                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ba48                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0ba48                 | ' 
0ba48                 | ' 
0ba48                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0ba48     10 4E 85 F1 | 	sub	fp, #16
0ba4c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ba50     67 00 00 FF 
0ba54     6C E4 85 F1 | 	sub	objptr, ##52844
0ba58     10 4E 05 51 |  if_ne	add	fp, #16
0ba5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ba60     10 4E 85 51 |  if_ne	sub	fp, #16
0ba64     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0ba68     10 4E 05 51 |  if_ne	add	fp, #16
0ba6c     0F 21 02 56 |  if_ne	mov	local02, local01
0ba70     10 4E 85 51 |  if_ne	sub	fp, #16
0ba74     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0ba78     24 0C 90 5D |  if_ne	jmp	#LR__0981
0ba7c                 | ' 
0ba7c                 | '  
0ba7c                 | ' if numpar=2 then
0ba7c     10 4E 05 F1 | 	add	fp, #16
0ba80     A7 20 02 FB | 	rdlong	local02, fp
0ba84     10 4E 85 F1 | 	sub	fp, #16
0ba88     02 20 0E F2 | 	cmp	local02, #2 wz
0ba8c     CC 03 90 5D |  if_ne	jmp	#LR__0972
0ba90     18 E7 BF FD | 	call	#_pop
0ba94     FF 1A 02 F6 | 	mov	arg05, result3
0ba98     5C 4E 05 F1 | 	add	fp, #92
0ba9c     A7 FA 61 FC | 	wrlong	result1, fp
0baa0     04 4E 05 F1 | 	add	fp, #4
0baa4     A7 FC 61 FC | 	wrlong	result2, fp
0baa8     04 4E 05 F1 | 	add	fp, #4
0baac     A7 1A 62 FC | 	wrlong	arg05, fp
0bab0                 | '   t1=pop()
0bab0                 | '   if t1.result_type=result_string2 then 
0bab0     64 4E 85 F1 | 	sub	fp, #100
0bab4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0bab8     20 00 90 5D |  if_ne	jmp	#LR__0960
0babc     5C 4E 05 F1 | 	add	fp, #92
0bac0     A7 12 02 FB | 	rdlong	arg01, fp
0bac4     5C 4E 85 F1 | 	sub	fp, #92
0bac8     88 29 B0 FD | 	call	#_convertstring
0bacc     68 4E 05 F1 | 	add	fp, #104
0bad0     A7 FA 61 FC | 	wrlong	result1, fp
0bad4     68 4E 85 F1 | 	sub	fp, #104
0bad8     58 00 90 FD | 	jmp	#LR__0963
0badc                 | LR__0960
0badc     64 4E 05 F1 | 	add	fp, #100
0bae0     A7 20 02 FB | 	rdlong	local02, fp
0bae4     64 4E 85 F1 | 	sub	fp, #100
0bae8     1F 20 0E F2 | 	cmp	local02, #31 wz
0baec     18 00 90 5D |  if_ne	jmp	#LR__0961
0baf0     5C 4E 05 F1 | 	add	fp, #92
0baf4     A7 20 02 FB | 	rdlong	local02, fp
0baf8     0C 4E 05 F1 | 	add	fp, #12
0bafc     A7 20 62 FC | 	wrlong	local02, fp
0bb00     68 4E 85 F1 | 	sub	fp, #104
0bb04     2C 00 90 FD | 	jmp	#LR__0962
0bb08                 | LR__0961
0bb08     68 01 00 FF 
0bb0c     10 20 06 F6 | 	mov	local02, ##@LR__4968
0bb10     68 4E 05 F1 | 	add	fp, #104
0bb14     A7 20 62 FC | 	wrlong	local02, fp
0bb18     0C 4E 85 F1 | 	sub	fp, #12
0bb1c     A7 12 02 F6 | 	mov	arg01, fp
0bb20     5C 4E 85 F1 | 	sub	fp, #92
0bb24     DC 72 B0 FD | 	call	#_converttoint
0bb28     24 4E 05 F1 | 	add	fp, #36
0bb2c     A7 FA 61 FC | 	wrlong	result1, fp
0bb30     24 4E 85 F1 | 	sub	fp, #36
0bb34                 | LR__0962
0bb34                 | LR__0963
0bb34                 | ' 
0bb34                 | '     
0bb34                 | '   if s1<>"" then 
0bb34     68 4E 05 F1 | 	add	fp, #104
0bb38     A7 12 02 FB | 	rdlong	arg01, fp
0bb3c     68 4E 85 F1 | 	sub	fp, #104
0bb40     68 01 00 FF 
0bb44     11 14 06 F6 | 	mov	arg02, ##@LR__4969
0bb48     28 19 B1 FD | 	call	#__system___string_cmp
0bb4c     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb50     F8 01 90 AD |  if_e	jmp	#LR__0967
0bb54     54 E6 BF FD | 	call	#_pop
0bb58     FF 1E 02 F6 | 	mov	local01, result3
0bb5c     5C 4E 05 F1 | 	add	fp, #92
0bb60     A7 FA 61 FC | 	wrlong	result1, fp
0bb64     04 4E 05 F1 | 	add	fp, #4
0bb68     A7 FC 61 FC | 	wrlong	result2, fp
0bb6c     04 4E 05 F1 | 	add	fp, #4
0bb70     A7 1E 62 FC | 	wrlong	local01, fp
0bb74     08 4E 85 F1 | 	sub	fp, #8
0bb78     A7 12 02 F6 | 	mov	arg01, fp
0bb7c     5C 4E 85 F1 | 	sub	fp, #92
0bb80     80 72 B0 FD | 	call	#_converttoint
0bb84     20 4E 05 F1 | 	add	fp, #32
0bb88     A7 FA 61 FC | 	wrlong	result1, fp
0bb8c     20 4E 85 F1 | 	sub	fp, #32
0bb90                 | '     t1=pop()
0bb90                 | '     channel=converttoint(t1) 
0bb90                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0bb90     09 12 06 F6 | 	mov	arg01, #9
0bb94     78 68 B1 FD | 	call	#__system__close
0bb98     09 20 06 F6 | 	mov	local02, #9
0bb9c     68 01 00 FF 
0bba0     12 12 06 F6 | 	mov	arg01, ##@LR__4970
0bba4     68 4E 05 F1 | 	add	fp, #104
0bba8     A7 14 02 FB | 	rdlong	arg02, fp
0bbac     68 4E 85 F1 | 	sub	fp, #104
0bbb0     F4 18 B1 FD | 	call	#__system___string_concat
0bbb4     FD 14 02 F6 | 	mov	arg02, result1
0bbb8     10 13 02 F6 | 	mov	arg01, local02
0bbbc     00 16 06 F6 | 	mov	arg03, #0
0bbc0     88 24 B1 FD | 	call	#__system___basic_open_string
0bbc4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0bbc8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0bbcc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0bbd0     0C 4E 05 F1 | 	add	fp, #12
0bbd4     A7 FA 61 FC | 	wrlong	result1, fp
0bbd8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0bbd8     0C 4E 85 F1 | 	sub	fp, #12
0bbdc     A0 00 90 AD |  if_e	jmp	#LR__0964
0bbe0     00 12 06 F6 | 	mov	arg01, #0
0bbe4     F4 71 B1 FD | 	call	#__system___getiolock_0473
0bbe8     FD 12 02 F6 | 	mov	arg01, result1
0bbec     5C 18 B1 FD | 	call	#__system___lockmem
0bbf0     68 01 00 FF 
0bbf4     1F 14 06 F6 | 	mov	arg02, ##@LR__4971
0bbf8     00 12 06 F6 | 	mov	arg01, #0
0bbfc     00 16 06 F6 | 	mov	arg03, #0
0bc00     4C 25 B1 FD | 	call	#__system___basic_print_string
0bc04     0C 4E 05 F1 | 	add	fp, #12
0bc08     A7 14 02 FB | 	rdlong	arg02, fp
0bc0c     0C 4E 85 F1 | 	sub	fp, #12
0bc10     00 12 06 F6 | 	mov	arg01, #0
0bc14     00 16 06 F6 | 	mov	arg03, #0
0bc18     0A 18 06 F6 | 	mov	arg04, #10
0bc1c     74 25 B1 FD | 	call	#__system___basic_print_integer
0bc20     68 01 00 FF 
0bc24     2D 14 06 F6 | 	mov	arg02, ##@LR__4972
0bc28     00 12 06 F6 | 	mov	arg01, #0
0bc2c     00 16 06 F6 | 	mov	arg03, #0
0bc30     1C 25 B1 FD | 	call	#__system___basic_print_string
0bc34     00 20 06 F6 | 	mov	local02, #0
0bc38     0C 4E 05 F1 | 	add	fp, #12
0bc3c     A7 12 02 FB | 	rdlong	arg01, fp
0bc40     0C 4E 85 F1 | 	sub	fp, #12
0bc44     94 3E B1 FD | 	call	#__system___strerror
0bc48     FD 14 02 F6 | 	mov	arg02, result1
0bc4c     10 13 02 F6 | 	mov	arg01, local02
0bc50     00 16 06 F6 | 	mov	arg03, #0
0bc54     F8 24 B1 FD | 	call	#__system___basic_print_string
0bc58     00 12 06 F6 | 	mov	arg01, #0
0bc5c     0A 14 06 F6 | 	mov	arg02, #10
0bc60     00 16 06 F6 | 	mov	arg03, #0
0bc64     90 24 B1 FD | 	call	#__system___basic_print_char
0bc68     00 12 06 F6 | 	mov	arg01, #0
0bc6c     6C 71 B1 FD | 	call	#__system___getiolock_0473
0bc70     FD 00 68 FC | 	wrlong	#0, result1
0bc74     09 12 06 F6 | 	mov	arg01, #9
0bc78     94 67 B1 FD | 	call	#__system__close
0bc7c     20 0A 90 FD | 	jmp	#LR__0981
0bc80                 | LR__0964
0bc80                 | '     get #9,17,envbuf8(channel,0),256
0bc80     20 4E 05 F1 | 	add	fp, #32
0bc84     A7 1A 02 FB | 	rdlong	arg05, fp
0bc88     20 4E 85 F1 | 	sub	fp, #32
0bc8c     0D 17 02 F6 | 	mov	arg03, arg05
0bc90     09 16 66 F0 | 	shl	arg03, #9
0bc94     0D 17 02 F1 | 	add	arg03, arg05
0bc98     2C 00 00 FF 
0bc9c     D8 E4 05 F1 | 	add	objptr, ##22744
0bca0     F2 16 02 F1 | 	add	arg03, objptr
0bca4     09 12 06 F6 | 	mov	arg01, #9
0bca8     11 14 06 F6 | 	mov	arg02, #17
0bcac     00 19 06 F6 | 	mov	arg04, #256
0bcb0     01 1A 06 F6 | 	mov	arg05, #1
0bcb4     2C 00 00 FF 
0bcb8     D8 E4 85 F1 | 	sub	objptr, ##22744
0bcbc     A0 25 B1 FD | 	call	#__system___basic_get
0bcc0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0bcc0     14 4E 05 F1 | 	add	fp, #20
0bcc4     A7 FE 69 FC | 	wrlong	#255, fp
0bcc8     14 4E 85 F1 | 	sub	fp, #20
0bccc     2C 00 00 FF 
0bcd0     D8 E4 05 F1 | 	add	objptr, ##22744
0bcd4     97 30 48 FB | 	callpa	#(@LR__0966-@LR__0965)>>2,fcache_load_ptr_
0bcd8                 | LR__0965
0bcd8     20 4E 05 F1 | 	add	fp, #32
0bcdc     A7 18 02 FB | 	rdlong	arg04, fp
0bce0     0C 21 02 F6 | 	mov	local02, arg04
0bce4     09 20 66 F0 | 	shl	local02, #9
0bce8     F2 20 02 F1 | 	add	local02, objptr
0bcec     0C 4E 85 F1 | 	sub	fp, #12
0bcf0     A7 1E 02 FB | 	rdlong	local01, fp
0bcf4     0F 1B 02 F6 | 	mov	arg05, local01
0bcf8     01 1A 66 F0 | 	shl	arg05, #1
0bcfc     10 1B 02 F1 | 	add	arg05, local02
0bd00     0C 21 02 F6 | 	mov	local02, arg04
0bd04     09 20 66 F0 | 	shl	local02, #9
0bd08     0C 21 02 F1 | 	add	local02, arg04
0bd0c     F2 20 02 F1 | 	add	local02, objptr
0bd10     10 1F 02 F1 | 	add	local01, local02
0bd14     0F 21 C2 FA | 	rdbyte	local02, local01
0bd18     00 21 06 FA | 	mul	local02, #256
0bd1c     0D 21 52 FC | 	wrword	local02, arg05
0bd20     A7 20 02 FB | 	rdlong	local02, fp
0bd24     01 20 86 F1 | 	sub	local02, #1
0bd28     A7 20 62 FC | 	wrlong	local02, fp
0bd2c     14 4E 85 F1 | 	sub	fp, #20
0bd30     00 20 56 F2 | 	cmps	local02, #0 wc
0bd34     A0 FF 9F 3D |  if_ae	jmp	#LR__0965
0bd38                 | LR__0966
0bd38     2C 00 00 FF 
0bd3c     D8 E4 85 F1 | 	sub	objptr, ##22744
0bd40                 | '     close #9
0bd40     09 12 06 F6 | 	mov	arg01, #9
0bd44     C8 66 B1 FD | 	call	#__system__close
0bd48                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0bd48                 | '     return
0bd48     54 09 90 FD | 	jmp	#LR__0981
0bd4c                 | LR__0967
0bd4c                 | '     if wptr < ($80000 - 2048) then 
0bd4c     24 4E 05 F1 | 	add	fp, #36
0bd50     A7 22 02 FB | 	rdlong	local03, fp
0bd54     24 4E 85 F1 | 	sub	fp, #36
0bd58     FC 03 00 FF 
0bd5c     00 22 56 F2 | 	cmps	local03, ##522240 wc
0bd60     7C 00 90 3D |  if_ae	jmp	#LR__0970
0bd64                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0bd64     14 4E 05 F1 | 	add	fp, #20
0bd68     A7 00 68 FC | 	wrlong	#0, fp
0bd6c     14 4E 85 F1 | 	sub	fp, #20
0bd70     2C 00 00 FF 
0bd74     D8 E4 05 F1 | 	add	objptr, ##22744
0bd78     97 2C 48 FB | 	callpa	#(@LR__0969-@LR__0968)>>2,fcache_load_ptr_
0bd7c                 | LR__0968
0bd7c     20 4E 05 F1 | 	add	fp, #32
0bd80     A7 22 02 FB | 	rdlong	local03, fp
0bd84     09 22 66 F0 | 	shl	local03, #9
0bd88     F2 22 02 F1 | 	add	local03, objptr
0bd8c     0C 4E 85 F1 | 	sub	fp, #12
0bd90     A7 20 02 FB | 	rdlong	local02, fp
0bd94     10 1F 02 F6 | 	mov	local01, local02
0bd98     01 1E 66 F0 | 	shl	local01, #1
0bd9c     11 1F 02 F1 | 	add	local01, local03
0bda0     10 4E 05 F1 | 	add	fp, #16
0bda4     A7 12 02 FB | 	rdlong	arg01, fp
0bda8     01 20 66 F0 | 	shl	local02, #1
0bdac     10 13 02 F1 | 	add	arg01, local02
0bdb0     09 FB E1 FA | 	rdword	result1, arg01
0bdb4     0F FB 51 FC | 	wrword	result1, local01
0bdb8     10 4E 85 F1 | 	sub	fp, #16
0bdbc     A7 22 02 FB | 	rdlong	local03, fp
0bdc0     01 22 06 F1 | 	add	local03, #1
0bdc4     A7 22 62 FC | 	wrlong	local03, fp
0bdc8     14 4E 85 F1 | 	sub	fp, #20
0bdcc     00 23 56 F2 | 	cmps	local03, #256 wc
0bdd0     A8 FF 9F CD |  if_b	jmp	#LR__0968
0bdd4                 | LR__0969
0bdd4     2C 00 00 FF 
0bdd8     D8 E4 85 F1 | 	sub	objptr, ##22744
0bddc     C0 08 90 FD | 	jmp	#LR__0981
0bde0                 | LR__0970
0bde0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0bde0     14 4E 05 F1 | 	add	fp, #20
0bde4     A7 00 68 FC | 	wrlong	#0, fp
0bde8     14 4E 85 F1 | 	sub	fp, #20
0bdec                 | LR__0971
0bdec     20 4E 05 F1 | 	add	fp, #32
0bdf0     A7 22 02 FB | 	rdlong	local03, fp
0bdf4     09 22 66 F0 | 	shl	local03, #9
0bdf8     2C 00 00 FF 
0bdfc     D8 E4 05 F1 | 	add	objptr, ##22744
0be00     F2 22 02 F1 | 	add	local03, objptr
0be04     0C 4E 85 F1 | 	sub	fp, #12
0be08     A7 20 02 FB | 	rdlong	local02, fp
0be0c     10 1F 02 F6 | 	mov	local01, local02
0be10     01 1E 66 F0 | 	shl	local01, #1
0be14     11 1F 02 F1 | 	add	local01, local03
0be18     10 4E 05 F1 | 	add	fp, #16
0be1c     A7 12 02 FB | 	rdlong	arg01, fp
0be20     24 4E 85 F1 | 	sub	fp, #36
0be24     01 20 66 F0 | 	shl	local02, #1
0be28     10 13 02 F1 | 	add	arg01, local02
0be2c     2C 00 00 FF 
0be30     D8 E4 85 F1 | 	sub	objptr, ##22744
0be34     C0 D4 B0 FD | 	call	#_psdpeek
0be38     0F FB 51 FC | 	wrword	result1, local01
0be3c     14 4E 05 F1 | 	add	fp, #20
0be40     A7 24 02 FB | 	rdlong	local04, fp
0be44     01 24 06 F1 | 	add	local04, #1
0be48     A7 24 62 FC | 	wrlong	local04, fp
0be4c     14 4E 85 F1 | 	sub	fp, #20
0be50     00 25 56 F2 | 	cmps	local04, #256 wc
0be54     94 FF 9F CD |  if_b	jmp	#LR__0971
0be58                 | '     return   
0be58     44 08 90 FD | 	jmp	#LR__0981
0be5c                 | LR__0972
0be5c                 | ' 
0be5c                 | ' if numpar=5 then    'simple adsr
0be5c     10 4E 05 F1 | 	add	fp, #16
0be60     A7 22 02 FB | 	rdlong	local03, fp
0be64     10 4E 85 F1 | 	sub	fp, #16
0be68     05 22 0E F2 | 	cmp	local03, #5 wz
0be6c     30 08 90 5D |  if_ne	jmp	#LR__0980
0be70     38 E3 BF FD | 	call	#_pop
0be74     FF 1E 02 F6 | 	mov	local01, result3
0be78     5C 4E 05 F1 | 	add	fp, #92
0be7c     A7 FA 61 FC | 	wrlong	result1, fp
0be80     04 4E 05 F1 | 	add	fp, #4
0be84     A7 FC 61 FC | 	wrlong	result2, fp
0be88     04 4E 05 F1 | 	add	fp, #4
0be8c     A7 1E 62 FC | 	wrlong	local01, fp
0be90     08 4E 85 F1 | 	sub	fp, #8
0be94     A7 12 02 F6 | 	mov	arg01, fp
0be98     5C 4E 85 F1 | 	sub	fp, #92
0be9c     10 70 B0 FD | 	call	#_converttofloat
0bea0     FD 22 02 F6 | 	mov	local03, result1
0bea4     34 4E 05 F1 | 	add	fp, #52
0bea8     A7 22 62 FC | 	wrlong	local03, fp
0beac     34 4E 85 F1 | 	sub	fp, #52
0beb0     F8 E2 BF FD | 	call	#_pop
0beb4     FF 1E 02 F6 | 	mov	local01, result3
0beb8     5C 4E 05 F1 | 	add	fp, #92
0bebc     A7 FA 61 FC | 	wrlong	result1, fp
0bec0     04 4E 05 F1 | 	add	fp, #4
0bec4     A7 FC 61 FC | 	wrlong	result2, fp
0bec8     04 4E 05 F1 | 	add	fp, #4
0becc     A7 1E 62 FC | 	wrlong	local01, fp
0bed0     08 4E 85 F1 | 	sub	fp, #8
0bed4     A7 12 02 F6 | 	mov	arg01, fp
0bed8     5C 4E 85 F1 | 	sub	fp, #92
0bedc     D0 6F B0 FD | 	call	#_converttofloat
0bee0     FD 22 02 F6 | 	mov	local03, result1
0bee4     30 4E 05 F1 | 	add	fp, #48
0bee8     A7 22 62 FC | 	wrlong	local03, fp
0beec     30 4E 85 F1 | 	sub	fp, #48
0bef0     B8 E2 BF FD | 	call	#_pop
0bef4     FF 1E 02 F6 | 	mov	local01, result3
0bef8     5C 4E 05 F1 | 	add	fp, #92
0befc     A7 FA 61 FC | 	wrlong	result1, fp
0bf00     04 4E 05 F1 | 	add	fp, #4
0bf04     A7 FC 61 FC | 	wrlong	result2, fp
0bf08     04 4E 05 F1 | 	add	fp, #4
0bf0c     A7 1E 62 FC | 	wrlong	local01, fp
0bf10     08 4E 85 F1 | 	sub	fp, #8
0bf14     A7 12 02 F6 | 	mov	arg01, fp
0bf18     5C 4E 85 F1 | 	sub	fp, #92
0bf1c     90 6F B0 FD | 	call	#_converttofloat
0bf20     FD 22 02 F6 | 	mov	local03, result1
0bf24     2C 4E 05 F1 | 	add	fp, #44
0bf28     A7 22 62 FC | 	wrlong	local03, fp
0bf2c     2C 4E 85 F1 | 	sub	fp, #44
0bf30     78 E2 BF FD | 	call	#_pop
0bf34     FF 1E 02 F6 | 	mov	local01, result3
0bf38     5C 4E 05 F1 | 	add	fp, #92
0bf3c     A7 FA 61 FC | 	wrlong	result1, fp
0bf40     04 4E 05 F1 | 	add	fp, #4
0bf44     A7 FC 61 FC | 	wrlong	result2, fp
0bf48     04 4E 05 F1 | 	add	fp, #4
0bf4c     A7 1E 62 FC | 	wrlong	local01, fp
0bf50     08 4E 85 F1 | 	sub	fp, #8
0bf54     A7 12 02 F6 | 	mov	arg01, fp
0bf58     5C 4E 85 F1 | 	sub	fp, #92
0bf5c     50 6F B0 FD | 	call	#_converttofloat
0bf60     FD 22 02 F6 | 	mov	local03, result1
0bf64     28 4E 05 F1 | 	add	fp, #40
0bf68     A7 22 62 FC | 	wrlong	local03, fp
0bf6c     28 4E 85 F1 | 	sub	fp, #40
0bf70     38 E2 BF FD | 	call	#_pop
0bf74     FF 1E 02 F6 | 	mov	local01, result3
0bf78     5C 4E 05 F1 | 	add	fp, #92
0bf7c     A7 FA 61 FC | 	wrlong	result1, fp
0bf80     04 4E 05 F1 | 	add	fp, #4
0bf84     A7 FC 61 FC | 	wrlong	result2, fp
0bf88     04 4E 05 F1 | 	add	fp, #4
0bf8c     A7 1E 62 FC | 	wrlong	local01, fp
0bf90     08 4E 85 F1 | 	sub	fp, #8
0bf94     A7 12 02 F6 | 	mov	arg01, fp
0bf98     5C 4E 85 F1 | 	sub	fp, #92
0bf9c     64 6E B0 FD | 	call	#_converttoint
0bfa0     20 4E 05 F1 | 	add	fp, #32
0bfa4     A7 FA 61 FC | 	wrlong	result1, fp
0bfa8                 | ' 
0bfa8                 | '   t1=pop() : rr=converttofloat(t1)
0bfa8                 | '   t1=pop() : ss=converttofloat(t1) 
0bfa8                 | '   t1=pop() : dd=converttofloat(t1)
0bfa8                 | '   t1=pop() : aa=converttofloat(t1)
0bfa8                 | '   t1=pop() : channel=converttoint(t1)
0bfa8                 | '   if ss<0.0 then ss=0.0 
0bfa8     10 4E 05 F1 | 	add	fp, #16
0bfac     A7 12 02 FB | 	rdlong	arg01, fp
0bfb0     30 4E 85 F1 | 	sub	fp, #48
0bfb4     00 14 06 F6 | 	mov	arg02, #0
0bfb8     01 16 06 F6 | 	mov	arg03, #1
0bfbc     3C 44 B1 FD | 	call	#__system___float_cmp
0bfc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0bfc4     30 4E 05 C1 |  if_b	add	fp, #48
0bfc8     A7 00 68 CC |  if_b	wrlong	#0, fp
0bfcc     30 4E 85 C1 |  if_b	sub	fp, #48
0bfd0                 | '   if ss>1.0 then ss=1.0
0bfd0     30 4E 05 F1 | 	add	fp, #48
0bfd4     A7 12 02 FB | 	rdlong	arg01, fp
0bfd8     30 4E 85 F1 | 	sub	fp, #48
0bfdc     00 C0 1F FF 
0bfe0     00 14 06 F6 | 	mov	arg02, ##1065353216
0bfe4     01 16 66 F6 | 	neg	arg03, #1
0bfe8     10 44 B1 FD | 	call	#__system___float_cmp
0bfec     01 FA 55 F2 | 	cmps	result1, #1 wc
0bff0     30 4E 05 31 |  if_ae	add	fp, #48
0bff4     00 C0 9F 3F 
0bff8     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0bffc     30 4E 85 31 |  if_ae	sub	fp, #48
0c000     28 4E 05 F1 | 	add	fp, #40
0c004     A7 12 02 FB | 	rdlong	arg01, fp
0c008     04 4E 05 F1 | 	add	fp, #4
0c00c     A7 14 02 FB | 	rdlong	arg02, fp
0c010     2C 4E 85 F1 | 	sub	fp, #44
0c014     E0 3B B1 FD | 	call	#__system___float_add
0c018     FD 12 02 F6 | 	mov	arg01, result1
0c01c     34 4E 05 F1 | 	add	fp, #52
0c020     A7 14 02 FB | 	rdlong	arg02, fp
0c024     34 4E 85 F1 | 	sub	fp, #52
0c028     CC 3B B1 FD | 	call	#__system___float_add
0c02c     4C 4E 05 F1 | 	add	fp, #76
0c030     A7 FA 61 FC | 	wrlong	result1, fp
0c034     FD 14 02 F6 | 	mov	arg02, result1
0c038     4C 4E 85 F1 | 	sub	fp, #76
0c03c     00 C0 21 FF 
0c040     00 12 06 F6 | 	mov	arg01, ##1132462080
0c044     84 41 B1 FD | 	call	#__system___float_div
0c048     50 4E 05 F1 | 	add	fp, #80
0c04c     A7 FA 61 FC | 	wrlong	result1, fp
0c050     28 4E 85 F1 | 	sub	fp, #40
0c054     A7 12 02 FB | 	rdlong	arg01, fp
0c058     FD 14 02 F6 | 	mov	arg02, result1
0c05c     28 4E 85 F1 | 	sub	fp, #40
0c060     64 3F B1 FD | 	call	#__system___float_mul
0c064     FD 12 02 F6 | 	mov	arg01, result1
0c068     01 14 06 F6 | 	mov	arg02, #1
0c06c     20 44 B1 FD | 	call	#__system___float_tointeger
0c070     A7 FA 61 FC | 	wrlong	result1, fp
0c074     2C 4E 05 F1 | 	add	fp, #44
0c078     A7 12 02 FB | 	rdlong	arg01, fp
0c07c     24 4E 05 F1 | 	add	fp, #36
0c080     A7 14 02 FB | 	rdlong	arg02, fp
0c084     50 4E 85 F1 | 	sub	fp, #80
0c088     3C 3F B1 FD | 	call	#__system___float_mul
0c08c     FD 12 02 F6 | 	mov	arg01, result1
0c090     01 14 06 F6 | 	mov	arg02, #1
0c094     F8 43 B1 FD | 	call	#__system___float_tointeger
0c098     04 4E 05 F1 | 	add	fp, #4
0c09c     A7 FA 61 FC | 	wrlong	result1, fp
0c0a0     30 4E 05 F1 | 	add	fp, #48
0c0a4     A7 12 02 FB | 	rdlong	arg01, fp
0c0a8     1C 4E 05 F1 | 	add	fp, #28
0c0ac     A7 14 02 FB | 	rdlong	arg02, fp
0c0b0     50 4E 85 F1 | 	sub	fp, #80
0c0b4     10 3F B1 FD | 	call	#__system___float_mul
0c0b8     FD 12 02 F6 | 	mov	arg01, result1
0c0bc     01 14 06 F6 | 	mov	arg02, #1
0c0c0     CC 43 B1 FD | 	call	#__system___float_tointeger
0c0c4     FD 22 02 F6 | 	mov	local03, result1
0c0c8     0C 4E 05 F1 | 	add	fp, #12
0c0cc     A7 22 62 FC | 	wrlong	local03, fp
0c0d0     0C 4E 85 F1 | 	sub	fp, #12
0c0d4                 | '   fulltime=aa+dd+rr
0c0d4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c0d4     00 12 06 F6 | 	mov	arg01, #0
0c0d8     00 6D B1 FD | 	call	#__system___getiolock_0473
0c0dc     FD 12 02 F6 | 	mov	arg01, result1
0c0e0     68 13 B1 FD | 	call	#__system___lockmem
0c0e4     A7 14 02 FB | 	rdlong	arg02, fp
0c0e8     00 12 06 F6 | 	mov	arg01, #0
0c0ec     00 16 06 F6 | 	mov	arg03, #0
0c0f0     0A 18 06 F6 | 	mov	arg04, #10
0c0f4     9C 20 B1 FD | 	call	#__system___basic_print_integer
0c0f8     00 12 06 F6 | 	mov	arg01, #0
0c0fc     09 14 06 F6 | 	mov	arg02, #9
0c100     00 16 06 F6 | 	mov	arg03, #0
0c104     F0 1F B1 FD | 	call	#__system___basic_print_char
0c108     04 4E 05 F1 | 	add	fp, #4
0c10c     A7 14 02 FB | 	rdlong	arg02, fp
0c110     04 4E 85 F1 | 	sub	fp, #4
0c114     00 12 06 F6 | 	mov	arg01, #0
0c118     00 16 06 F6 | 	mov	arg03, #0
0c11c     0A 18 06 F6 | 	mov	arg04, #10
0c120     70 20 B1 FD | 	call	#__system___basic_print_integer
0c124     00 12 06 F6 | 	mov	arg01, #0
0c128     09 14 06 F6 | 	mov	arg02, #9
0c12c     00 16 06 F6 | 	mov	arg03, #0
0c130     C4 1F B1 FD | 	call	#__system___basic_print_char
0c134     0C 4E 05 F1 | 	add	fp, #12
0c138     A7 14 02 FB | 	rdlong	arg02, fp
0c13c     0C 4E 85 F1 | 	sub	fp, #12
0c140     00 12 06 F6 | 	mov	arg01, #0
0c144     00 16 06 F6 | 	mov	arg03, #0
0c148     0A 18 06 F6 | 	mov	arg04, #10
0c14c     44 20 B1 FD | 	call	#__system___basic_print_integer
0c150     00 12 06 F6 | 	mov	arg01, #0
0c154     09 14 06 F6 | 	mov	arg02, #9
0c158     00 16 06 F6 | 	mov	arg03, #0
0c15c     98 1F B1 FD | 	call	#__system___basic_print_char
0c160     A7 14 02 FB | 	rdlong	arg02, fp
0c164     04 4E 05 F1 | 	add	fp, #4
0c168     A7 22 02 FB | 	rdlong	local03, fp
0c16c     11 15 02 F1 | 	add	arg02, local03
0c170     08 4E 05 F1 | 	add	fp, #8
0c174     A7 22 02 FB | 	rdlong	local03, fp
0c178     0C 4E 85 F1 | 	sub	fp, #12
0c17c     11 15 02 F1 | 	add	arg02, local03
0c180     00 12 06 F6 | 	mov	arg01, #0
0c184     00 16 06 F6 | 	mov	arg03, #0
0c188     0A 18 06 F6 | 	mov	arg04, #10
0c18c     04 20 B1 FD | 	call	#__system___basic_print_integer
0c190     00 12 06 F6 | 	mov	arg01, #0
0c194     0A 14 06 F6 | 	mov	arg02, #10
0c198     00 16 06 F6 | 	mov	arg03, #0
0c19c     58 1F B1 FD | 	call	#__system___basic_print_char
0c1a0     00 12 06 F6 | 	mov	arg01, #0
0c1a4     34 6C B1 FD | 	call	#__system___getiolock_0473
0c1a8     FD 00 68 FC | 	wrlong	#0, result1
0c1ac     F8 BF 23 FF 
0c1b0     00 22 06 F6 | 	mov	local03, ##1199566848
0c1b4     A7 12 02 FB | 	rdlong	arg01, fp
0c1b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0c1bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0c1c0     00 26 06 36 |  if_ae	mov	local05, #0
0c1c4     FC 39 B1 FD | 	call	#__system___float_fromuns
0c1c8     13 FB 61 F5 | 	xor	result1, local05
0c1cc     FD 14 02 F6 | 	mov	arg02, result1
0c1d0     11 13 02 F6 | 	mov	arg01, local03
0c1d4     F4 3F B1 FD | 	call	#__system___float_div
0c1d8     54 4E 05 F1 | 	add	fp, #84
0c1dc     A7 FA 61 FC | 	wrlong	result1, fp
0c1e0     F8 BF 23 FF 
0c1e4     00 22 06 F6 | 	mov	local03, ##1199566848
0c1e8     24 4E 85 F1 | 	sub	fp, #36
0c1ec     A7 14 02 FB | 	rdlong	arg02, fp
0c1f0     30 4E 85 F1 | 	sub	fp, #48
0c1f4     F8 BF 23 FF 
0c1f8     00 12 06 F6 | 	mov	arg01, ##1199566848
0c1fc     C8 3D B1 FD | 	call	#__system___float_mul
0c200     FD 14 02 F6 | 	mov	arg02, result1
0c204     11 13 02 F6 | 	mov	arg01, local03
0c208     1F 14 E6 F4 | 	bitnot	arg02, #31
0c20c     E8 39 B1 FD | 	call	#__system___float_add
0c210     FD 22 02 F6 | 	mov	local03, result1
0c214     04 4E 05 F1 | 	add	fp, #4
0c218     A7 12 02 FB | 	rdlong	arg01, fp
0c21c     04 4E 85 F1 | 	sub	fp, #4
0c220     09 13 52 F6 | 	abs	arg01, arg01 wc
0c224     1F 26 C6 C9 |  if_b	decod	local05, #31
0c228     00 26 06 36 |  if_ae	mov	local05, #0
0c22c     94 39 B1 FD | 	call	#__system___float_fromuns
0c230     13 FB 61 F5 | 	xor	result1, local05
0c234     FD 14 02 F6 | 	mov	arg02, result1
0c238     11 13 02 F6 | 	mov	arg01, local03
0c23c     8C 3F B1 FD | 	call	#__system___float_div
0c240     2C 4E 05 F1 | 	add	fp, #44
0c244     A7 FA 61 FC | 	wrlong	result1, fp
0c248     04 4E 05 F1 | 	add	fp, #4
0c24c     A7 14 02 FB | 	rdlong	arg02, fp
0c250     30 4E 85 F1 | 	sub	fp, #48
0c254     F8 BF 23 FF 
0c258     00 12 06 F6 | 	mov	arg01, ##1199566848
0c25c     68 3D B1 FD | 	call	#__system___float_mul
0c260     FD 22 02 F6 | 	mov	local03, result1
0c264     0C 4E 05 F1 | 	add	fp, #12
0c268     A7 12 02 FB | 	rdlong	arg01, fp
0c26c     0C 4E 85 F1 | 	sub	fp, #12
0c270     09 13 52 F6 | 	abs	arg01, arg01 wc
0c274     1F 26 C6 C9 |  if_b	decod	local05, #31
0c278     00 26 06 36 |  if_ae	mov	local05, #0
0c27c     44 39 B1 FD | 	call	#__system___float_fromuns
0c280     13 FB 61 F5 | 	xor	result1, local05
0c284     FD 14 02 F6 | 	mov	arg02, result1
0c288     11 13 02 F6 | 	mov	arg01, local03
0c28c     3C 3F B1 FD | 	call	#__system___float_div
0c290     FD 22 02 F6 | 	mov	local03, result1
0c294     58 4E 05 F1 | 	add	fp, #88
0c298     A7 22 62 FC | 	wrlong	local03, fp
0c29c     58 4E 85 F1 | 	sub	fp, #88
0c2a0                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c2a0     00 12 06 F6 | 	mov	arg01, #0
0c2a4     34 6B B1 FD | 	call	#__system___getiolock_0473
0c2a8     FD 12 02 F6 | 	mov	arg01, result1
0c2ac     9C 11 B1 FD | 	call	#__system___lockmem
0c2b0     54 4E 05 F1 | 	add	fp, #84
0c2b4     A7 14 02 FB | 	rdlong	arg02, fp
0c2b8     54 4E 85 F1 | 	sub	fp, #84
0c2bc     00 12 06 F6 | 	mov	arg01, #0
0c2c0     00 16 06 F6 | 	mov	arg03, #0
0c2c4     23 18 06 F6 | 	mov	arg04, #35
0c2c8     14 43 B1 FD | 	call	#__system___basic_print_float
0c2cc     00 12 06 F6 | 	mov	arg01, #0
0c2d0     09 14 06 F6 | 	mov	arg02, #9
0c2d4     00 16 06 F6 | 	mov	arg03, #0
0c2d8     1C 1E B1 FD | 	call	#__system___basic_print_char
0c2dc     2C 4E 05 F1 | 	add	fp, #44
0c2e0     A7 14 02 FB | 	rdlong	arg02, fp
0c2e4     2C 4E 85 F1 | 	sub	fp, #44
0c2e8     00 12 06 F6 | 	mov	arg01, #0
0c2ec     00 16 06 F6 | 	mov	arg03, #0
0c2f0     23 18 06 F6 | 	mov	arg04, #35
0c2f4     E8 42 B1 FD | 	call	#__system___basic_print_float
0c2f8     00 12 06 F6 | 	mov	arg01, #0
0c2fc     09 14 06 F6 | 	mov	arg02, #9
0c300     00 16 06 F6 | 	mov	arg03, #0
0c304     F0 1D B1 FD | 	call	#__system___basic_print_char
0c308     58 4E 05 F1 | 	add	fp, #88
0c30c     A7 14 02 FB | 	rdlong	arg02, fp
0c310     58 4E 85 F1 | 	sub	fp, #88
0c314     00 12 06 F6 | 	mov	arg01, #0
0c318     00 16 06 F6 | 	mov	arg03, #0
0c31c     23 18 06 F6 | 	mov	arg04, #35
0c320     BC 42 B1 FD | 	call	#__system___basic_print_float
0c324     00 12 06 F6 | 	mov	arg01, #0
0c328     0A 14 06 F6 | 	mov	arg02, #10
0c32c     00 16 06 F6 | 	mov	arg03, #0
0c330     C4 1D B1 FD | 	call	#__system___basic_print_char
0c334     00 12 06 F6 | 	mov	arg01, #0
0c338     A0 6A B1 FD | 	call	#__system___getiolock_0473
0c33c     FD 00 68 FC | 	wrlong	#0, result1
0c340     20 4E 05 F1 | 	add	fp, #32
0c344     A7 28 02 FB | 	rdlong	local06, fp
0c348     20 4E 85 F1 | 	sub	fp, #32
0c34c     01 28 66 F0 | 	shl	local06, #1
0c350     7B 00 00 FF 
0c354     84 E4 05 F1 | 	add	objptr, ##63108
0c358     F2 28 02 F1 | 	add	local06, objptr
0c35c     A7 2A 02 FB | 	rdlong	local07, fp
0c360     04 4E 05 F1 | 	add	fp, #4
0c364     A7 22 02 FB | 	rdlong	local03, fp
0c368     11 2B 02 F1 | 	add	local07, local03
0c36c     14 2B 52 FC | 	wrword	local07, local06
0c370     24 4E 05 F1 | 	add	fp, #36
0c374     A7 00 68 FC | 	wrlong	#0, fp
0c378                 | '   suspoints(channel)=a+d
0c378                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0c378     14 4E 85 F1 | 	sub	fp, #20
0c37c     A7 00 68 FC | 	wrlong	#0, fp
0c380     14 4E 85 F1 | 	sub	fp, #20
0c384     A7 2C 02 FB | 	rdlong	local08, fp
0c388     7B 00 00 FF 
0c38c     84 E4 85 F1 | 	sub	objptr, ##63108
0c390                 | LR__0973
0c390     14 4E 05 F1 | 	add	fp, #20
0c394     A7 22 02 FB | 	rdlong	local03, fp
0c398     14 4E 85 F1 | 	sub	fp, #20
0c39c     16 23 52 F2 | 	cmps	local03, local08 wc
0c3a0     80 00 90 3D |  if_ae	jmp	#LR__0974
0c3a4     20 4E 05 F1 | 	add	fp, #32
0c3a8     A7 28 02 FB | 	rdlong	local06, fp
0c3ac     09 28 66 F0 | 	shl	local06, #9
0c3b0     2C 00 00 FF 
0c3b4     D8 E4 05 F1 | 	add	objptr, ##22744
0c3b8     F2 28 02 F1 | 	add	local06, objptr
0c3bc     0C 4E 85 F1 | 	sub	fp, #12
0c3c0     A7 22 02 FB | 	rdlong	local03, fp
0c3c4     01 22 66 F0 | 	shl	local03, #1
0c3c8     14 23 02 F1 | 	add	local03, local06
0c3cc     14 4E 05 F1 | 	add	fp, #20
0c3d0     A7 12 02 FB | 	rdlong	arg01, fp
0c3d4     28 4E 85 F1 | 	sub	fp, #40
0c3d8     2C 00 00 FF 
0c3dc     D8 E4 85 F1 | 	sub	objptr, ##22744
0c3e0     01 14 06 F6 | 	mov	arg02, #1
0c3e4     A8 40 B1 FD | 	call	#__system___float_tointeger
0c3e8     11 FB 51 FC | 	wrword	result1, local03
0c3ec     28 4E 05 F1 | 	add	fp, #40
0c3f0     A7 12 02 FB | 	rdlong	arg01, fp
0c3f4     2C 4E 05 F1 | 	add	fp, #44
0c3f8     A7 14 02 FB | 	rdlong	arg02, fp
0c3fc     54 4E 85 F1 | 	sub	fp, #84
0c400     F4 37 B1 FD | 	call	#__system___float_add
0c404     28 4E 05 F1 | 	add	fp, #40
0c408     A7 FA 61 FC | 	wrlong	result1, fp
0c40c     14 4E 85 F1 | 	sub	fp, #20
0c410     A7 20 02 FB | 	rdlong	local02, fp
0c414     01 20 06 F1 | 	add	local02, #1
0c418     A7 20 62 FC | 	wrlong	local02, fp
0c41c     14 4E 85 F1 | 	sub	fp, #20
0c420     6C FF 9F FD | 	jmp	#LR__0973
0c424                 | LR__0974
0c424                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0c424     A7 22 02 FB | 	rdlong	local03, fp
0c428     14 4E 05 F1 | 	add	fp, #20
0c42c     A7 22 62 FC | 	wrlong	local03, fp
0c430     14 4E 85 F1 | 	sub	fp, #20
0c434     A7 2E 02 FB | 	rdlong	local09, fp
0c438     04 4E 05 F1 | 	add	fp, #4
0c43c     A7 22 02 FB | 	rdlong	local03, fp
0c440     04 4E 85 F1 | 	sub	fp, #4
0c444     11 2F 02 F1 | 	add	local09, local03
0c448                 | LR__0975
0c448     14 4E 05 F1 | 	add	fp, #20
0c44c     A7 22 02 FB | 	rdlong	local03, fp
0c450     14 4E 85 F1 | 	sub	fp, #20
0c454     17 23 52 F2 | 	cmps	local03, local09 wc
0c458     A8 00 90 3D |  if_ae	jmp	#LR__0976
0c45c     20 4E 05 F1 | 	add	fp, #32
0c460     A7 2C 02 FB | 	rdlong	local08, fp
0c464     09 2C 66 F0 | 	shl	local08, #9
0c468     2C 00 00 FF 
0c46c     D8 E4 05 F1 | 	add	objptr, ##22744
0c470     F2 2C 02 F1 | 	add	local08, objptr
0c474     0C 4E 85 F1 | 	sub	fp, #12
0c478     A7 2A 02 FB | 	rdlong	local07, fp
0c47c     01 2A 66 F0 | 	shl	local07, #1
0c480     16 2B 02 F1 | 	add	local07, local08
0c484     14 4E 05 F1 | 	add	fp, #20
0c488     A7 12 02 FB | 	rdlong	arg01, fp
0c48c     28 4E 85 F1 | 	sub	fp, #40
0c490     2C 00 00 FF 
0c494     D8 E4 85 F1 | 	sub	objptr, ##22744
0c498     01 14 06 F6 | 	mov	arg02, #1
0c49c     F0 3F B1 FD | 	call	#__system___float_tointeger
0c4a0     15 FB 51 FC | 	wrword	result1, local07
0c4a4     28 4E 05 F1 | 	add	fp, #40
0c4a8     A7 12 02 FB | 	rdlong	arg01, fp
0c4ac     04 4E 05 F1 | 	add	fp, #4
0c4b0     A7 14 02 FB | 	rdlong	arg02, fp
0c4b4     2C 4E 85 F1 | 	sub	fp, #44
0c4b8     1F 14 E6 F4 | 	bitnot	arg02, #31
0c4bc     38 37 B1 FD | 	call	#__system___float_add
0c4c0     28 4E 05 F1 | 	add	fp, #40
0c4c4     A7 FA 61 FC | 	wrlong	result1, fp
0c4c8     28 4E 85 F1 | 	sub	fp, #40
0c4cc     FD 12 02 F6 | 	mov	arg01, result1
0c4d0     00 14 06 F6 | 	mov	arg02, #0
0c4d4     01 16 06 F6 | 	mov	arg03, #1
0c4d8     20 3F B1 FD | 	call	#__system___float_cmp
0c4dc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c4e0     28 4E 05 C1 |  if_b	add	fp, #40
0c4e4     A7 00 68 CC |  if_b	wrlong	#0, fp
0c4e8     28 4E 85 C1 |  if_b	sub	fp, #40
0c4ec     14 4E 05 F1 | 	add	fp, #20
0c4f0     A7 20 02 FB | 	rdlong	local02, fp
0c4f4     01 20 06 F1 | 	add	local02, #1
0c4f8     A7 20 62 FC | 	wrlong	local02, fp
0c4fc     14 4E 85 F1 | 	sub	fp, #20
0c500     44 FF 9F FD | 	jmp	#LR__0975
0c504                 | LR__0976
0c504                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c504     A7 22 02 FB | 	rdlong	local03, fp
0c508     04 4E 05 F1 | 	add	fp, #4
0c50c     A7 2E 02 FB | 	rdlong	local09, fp
0c510     17 23 02 F1 | 	add	local03, local09
0c514     10 4E 05 F1 | 	add	fp, #16
0c518     A7 22 62 FC | 	wrlong	local03, fp
0c51c     14 4E 85 F1 | 	sub	fp, #20
0c520                 | LR__0977
0c520     14 4E 05 F1 | 	add	fp, #20
0c524     A7 28 02 FB | 	rdlong	local06, fp
0c528     14 4E 85 F1 | 	sub	fp, #20
0c52c     00 29 56 F2 | 	cmps	local06, #256 wc
0c530     A8 00 90 3D |  if_ae	jmp	#LR__0978
0c534     20 4E 05 F1 | 	add	fp, #32
0c538     A7 2E 02 FB | 	rdlong	local09, fp
0c53c     09 2E 66 F0 | 	shl	local09, #9
0c540     2C 00 00 FF 
0c544     D8 E4 05 F1 | 	add	objptr, ##22744
0c548     F2 2E 02 F1 | 	add	local09, objptr
0c54c     0C 4E 85 F1 | 	sub	fp, #12
0c550     A7 2C 02 FB | 	rdlong	local08, fp
0c554     01 2C 66 F0 | 	shl	local08, #1
0c558     17 2D 02 F1 | 	add	local08, local09
0c55c     14 4E 05 F1 | 	add	fp, #20
0c560     A7 12 02 FB | 	rdlong	arg01, fp
0c564     28 4E 85 F1 | 	sub	fp, #40
0c568     2C 00 00 FF 
0c56c     D8 E4 85 F1 | 	sub	objptr, ##22744
0c570     01 14 06 F6 | 	mov	arg02, #1
0c574     18 3F B1 FD | 	call	#__system___float_tointeger
0c578     16 FB 51 FC | 	wrword	result1, local08
0c57c     28 4E 05 F1 | 	add	fp, #40
0c580     A7 12 02 FB | 	rdlong	arg01, fp
0c584     30 4E 05 F1 | 	add	fp, #48
0c588     A7 14 02 FB | 	rdlong	arg02, fp
0c58c     58 4E 85 F1 | 	sub	fp, #88
0c590     1F 14 E6 F4 | 	bitnot	arg02, #31
0c594     60 36 B1 FD | 	call	#__system___float_add
0c598     28 4E 05 F1 | 	add	fp, #40
0c59c     A7 FA 61 FC | 	wrlong	result1, fp
0c5a0     28 4E 85 F1 | 	sub	fp, #40
0c5a4     FD 12 02 F6 | 	mov	arg01, result1
0c5a8     00 14 06 F6 | 	mov	arg02, #0
0c5ac     01 16 06 F6 | 	mov	arg03, #1
0c5b0     48 3E B1 FD | 	call	#__system___float_cmp
0c5b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c5b8     28 4E 05 C1 |  if_b	add	fp, #40
0c5bc     A7 00 68 CC |  if_b	wrlong	#0, fp
0c5c0     28 4E 85 C1 |  if_b	sub	fp, #40
0c5c4     14 4E 05 F1 | 	add	fp, #20
0c5c8     A7 2E 02 FB | 	rdlong	local09, fp
0c5cc     01 2E 06 F1 | 	add	local09, #1
0c5d0     A7 2E 62 FC | 	wrlong	local09, fp
0c5d4     14 4E 85 F1 | 	sub	fp, #20
0c5d8     44 FF 9F FD | 	jmp	#LR__0977
0c5dc                 | LR__0978
0c5dc     20 4E 05 F1 | 	add	fp, #32
0c5e0     A7 28 02 FB | 	rdlong	local06, fp
0c5e4     09 28 66 F0 | 	shl	local06, #9
0c5e8     2C 00 00 FF 
0c5ec     D8 E4 05 F1 | 	add	objptr, ##22744
0c5f0     F2 28 02 F1 | 	add	local06, objptr
0c5f4     FE 29 06 F1 | 	add	local06, #510
0c5f8     14 01 58 FC | 	wrword	#0, local06
0c5fc                 | '   envbuf(channel,255)=0
0c5fc                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c5fc     0C 4E 85 F1 | 	sub	fp, #12
0c600     A7 00 68 FC | 	wrlong	#0, fp
0c604     14 4E 85 F1 | 	sub	fp, #20
0c608     2C 00 00 FF 
0c60c     D8 E4 85 F1 | 	sub	objptr, ##22744
0c610                 | LR__0979
0c610     00 12 06 F6 | 	mov	arg01, #0
0c614     C4 67 B1 FD | 	call	#__system___getiolock_0473
0c618     FD 12 02 F6 | 	mov	arg01, result1
0c61c     2C 0E B1 FD | 	call	#__system___lockmem
0c620     20 4E 05 F1 | 	add	fp, #32
0c624     A7 2E 02 FB | 	rdlong	local09, fp
0c628     09 2E 66 F0 | 	shl	local09, #9
0c62c     2C 00 00 FF 
0c630     D8 E4 05 F1 | 	add	objptr, ##22744
0c634     F2 2E 02 F1 | 	add	local09, objptr
0c638     0C 4E 85 F1 | 	sub	fp, #12
0c63c     A7 2C 02 FB | 	rdlong	local08, fp
0c640     14 4E 85 F1 | 	sub	fp, #20
0c644     01 2C 66 F0 | 	shl	local08, #1
0c648     17 2D 02 F1 | 	add	local08, local09
0c64c     16 15 E2 FA | 	rdword	arg02, local08
0c650     00 12 06 F6 | 	mov	arg01, #0
0c654     00 16 06 F6 | 	mov	arg03, #0
0c658     0A 18 06 F6 | 	mov	arg04, #10
0c65c     2C 00 00 FF 
0c660     D8 E4 85 F1 | 	sub	objptr, ##22744
0c664     6C 1B B1 FD | 	call	#__system___basic_print_unsigned
0c668     00 12 06 F6 | 	mov	arg01, #0
0c66c     09 14 06 F6 | 	mov	arg02, #9
0c670     00 16 06 F6 | 	mov	arg03, #0
0c674     80 1A B1 FD | 	call	#__system___basic_print_char
0c678     00 12 06 F6 | 	mov	arg01, #0
0c67c     5C 67 B1 FD | 	call	#__system___getiolock_0473
0c680     FD 00 68 FC | 	wrlong	#0, result1
0c684     14 4E 05 F1 | 	add	fp, #20
0c688     A7 2E 02 FB | 	rdlong	local09, fp
0c68c     01 2E 06 F1 | 	add	local09, #1
0c690     A7 2E 62 FC | 	wrlong	local09, fp
0c694     14 4E 85 F1 | 	sub	fp, #20
0c698     00 2F 56 F2 | 	cmps	local09, #256 wc
0c69c     70 FF 9F CD |  if_b	jmp	#LR__0979
0c6a0                 | LR__0980
0c6a0                 | LR__0981
0c6a0     A7 F0 03 F6 | 	mov	ptra, fp
0c6a4     B2 00 A0 FD | 	call	#popregs_
0c6a8                 | _do_defenv_ret
0c6a8     2D 00 64 FD | 	ret
0c6ac                 | 
0c6ac                 | ' 
0c6ac                 | ' 
0c6ac                 | ' sub do_play
0c6ac                 | _do_play
0c6ac     05 4A 05 F6 | 	mov	COUNT_, #5
0c6b0     A8 00 A0 FD | 	call	#pushregs_
0c6b4     74 F0 07 F1 | 	add	ptra, #116
0c6b8     60 4E 05 F1 | 	add	fp, #96
0c6bc     F5 25 A2 FF 
0c6c0     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c6c4                 | ' speed_coeff=815.6614449376854599406528189911
0c6c4                 | ' 
0c6c4                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c6c4     5C 4E 85 F1 | 	sub	fp, #92
0c6c8     A7 00 68 FC | 	wrlong	#0, fp
0c6cc     97 18 48 FB | 	callpa	#(@LR__0991-@LR__0990)>>2,fcache_load_ptr_
0c6d0                 | LR__0990
0c6d0     A7 16 02 FB | 	rdlong	arg03, fp
0c6d4     02 16 66 F0 | 	shl	arg03, #2
0c6d8     2C 4E 05 F1 | 	add	fp, #44
0c6dc     A7 16 02 F1 | 	add	arg03, fp
0c6e0     00 00 E0 FF 
0c6e4     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0c6e8     2C 4E 85 F1 | 	sub	fp, #44
0c6ec     A7 1E 02 FB | 	rdlong	local01, fp
0c6f0     01 1E 06 F1 | 	add	local01, #1
0c6f4     A7 1E 62 FC | 	wrlong	local01, fp
0c6f8     09 1E 56 F2 | 	cmps	local01, #9 wc
0c6fc     D0 FF 9F CD |  if_b	jmp	#LR__0990
0c700                 | LR__0991
0c700     04 4E 85 F1 | 	sub	fp, #4
0c704     6A 00 00 FF 
0c708     70 E4 05 F1 | 	add	objptr, ##54384
0c70c     F2 20 02 FB | 	rdlong	local02, objptr
0c710     10 23 02 F6 | 	mov	local03, local02
0c714     01 22 66 F0 | 	shl	local03, #1
0c718     10 23 02 F1 | 	add	local03, local02
0c71c     02 22 66 F0 | 	shl	local03, #2
0c720     03 00 00 FF 
0c724     04 E4 85 F1 | 	sub	objptr, ##1540
0c728     F2 22 02 F1 | 	add	local03, objptr
0c72c     11 25 02 FB | 	rdlong	local04, local03
0c730     A7 24 62 FC | 	wrlong	local04, fp
0c734                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0c734                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0c734                 | ' numpar=compiledline(lineptr_e).result.uresult
0c734                 | ' for i=numpar to 1 step -1 
0c734     04 4E 05 F1 | 	add	fp, #4
0c738     A7 24 62 FC | 	wrlong	local04, fp
0c73c     04 4E 85 F1 | 	sub	fp, #4
0c740     67 00 00 FF 
0c744     6C E4 85 F1 | 	sub	objptr, ##52844
0c748                 | LR__0992
0c748     60 DA BF FD | 	call	#_pop
0c74c     54 4E 05 F1 | 	add	fp, #84
0c750     A7 FA 61 FC | 	wrlong	result1, fp
0c754     04 4E 05 F1 | 	add	fp, #4
0c758     A7 FC 61 FC | 	wrlong	result2, fp
0c75c     04 4E 05 F1 | 	add	fp, #4
0c760     A7 FE 61 FC | 	wrlong	result3, fp
0c764     58 4E 85 F1 | 	sub	fp, #88
0c768     A7 22 02 FB | 	rdlong	local03, fp
0c76c     01 22 86 F1 | 	sub	local03, #1
0c770     02 22 66 F0 | 	shl	local03, #2
0c774     2C 4E 05 F1 | 	add	fp, #44
0c778     A7 22 02 F1 | 	add	local03, fp
0c77c     24 4E 05 F1 | 	add	fp, #36
0c780     A7 26 02 F6 | 	mov	local05, fp
0c784     13 13 02 F6 | 	mov	arg01, local05
0c788     54 4E 85 F1 | 	sub	fp, #84
0c78c     20 67 B0 FD | 	call	#_converttofloat
0c790     11 FB 61 FC | 	wrlong	result1, local03
0c794     04 4E 05 F1 | 	add	fp, #4
0c798     A7 1E 02 FB | 	rdlong	local01, fp
0c79c     01 1E 86 F1 | 	sub	local01, #1
0c7a0     A7 1E 62 FC | 	wrlong	local01, fp
0c7a4     04 4E 85 F1 | 	sub	fp, #4
0c7a8     01 1E 56 F2 | 	cmps	local01, #1 wc
0c7ac     98 FF 9F 3D |  if_ae	jmp	#LR__0992
0c7b0                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0c7b0     30 4E 05 F1 | 	add	fp, #48
0c7b4     A7 12 02 FB | 	rdlong	arg01, fp
0c7b8     30 4E 85 F1 | 	sub	fp, #48
0c7bc     00 14 06 F6 | 	mov	arg02, #0
0c7c0     01 16 06 F6 | 	mov	arg03, #1
0c7c4     34 3C B1 FD | 	call	#__system___float_cmp
0c7c8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c7cc     0C 4E 05 C1 |  if_b	add	fp, #12
0c7d0     A7 00 68 CC |  if_b	wrlong	#0, fp
0c7d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c7d8     20 00 90 CD |  if_b	jmp	#LR__0993
0c7dc     30 4E 05 F1 | 	add	fp, #48
0c7e0     A7 12 02 FB | 	rdlong	arg01, fp
0c7e4     30 4E 85 F1 | 	sub	fp, #48
0c7e8     01 14 06 F6 | 	mov	arg02, #1
0c7ec     A0 3C B1 FD | 	call	#__system___float_tointeger
0c7f0     0C 4E 05 F1 | 	add	fp, #12
0c7f4     A7 FA 61 FC | 	wrlong	result1, fp
0c7f8     0C 4E 85 F1 | 	sub	fp, #12
0c7fc                 | LR__0993
0c7fc                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0c7fc     34 4E 05 F1 | 	add	fp, #52
0c800     A7 12 02 FB | 	rdlong	arg01, fp
0c804     34 4E 85 F1 | 	sub	fp, #52
0c808     00 14 06 F6 | 	mov	arg02, #0
0c80c     01 16 06 F6 | 	mov	arg03, #1
0c810     E8 3B B1 FD | 	call	#__system___float_cmp
0c814     00 FA 55 F2 | 	cmps	result1, #0 wc
0c818     40 00 90 3D |  if_ae	jmp	#LR__0994
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 20 02 FB | 	rdlong	local02, fp
0c824     10 23 02 F6 | 	mov	local03, local02
0c828     01 22 66 F0 | 	shl	local03, #1
0c82c     10 23 02 F1 | 	add	local03, local02
0c830     03 22 66 F0 | 	shl	local03, #3
0c834     34 00 00 FF 
0c838     38 E5 05 F1 | 	add	objptr, ##26936
0c83c     F2 22 02 F1 | 	add	local03, objptr
0c840     11 23 02 FB | 	rdlong	local03, local03
0c844     58 4E 05 F1 | 	add	fp, #88
0c848     A7 22 62 FC | 	wrlong	local03, fp
0c84c     64 4E 85 F1 | 	sub	fp, #100
0c850     34 00 00 FF 
0c854     38 E5 85 F1 | 	sub	objptr, ##26936
0c858     44 00 90 FD | 	jmp	#LR__0995
0c85c                 | LR__0994
0c85c     34 4E 05 F1 | 	add	fp, #52
0c860     A7 24 02 FB | 	rdlong	local04, fp
0c864     30 4E 05 F1 | 	add	fp, #48
0c868     A7 24 62 FC | 	wrlong	local04, fp
0c86c     58 4E 85 F1 | 	sub	fp, #88
0c870     A7 20 02 FB | 	rdlong	local02, fp
0c874     10 23 02 F6 | 	mov	local03, local02
0c878     01 22 66 F0 | 	shl	local03, #1
0c87c     10 23 02 F1 | 	add	local03, local02
0c880     03 22 66 F0 | 	shl	local03, #3
0c884     34 00 00 FF 
0c888     38 E5 05 F1 | 	add	objptr, ##26936
0c88c     F2 22 02 F1 | 	add	local03, objptr
0c890     0C 4E 85 F1 | 	sub	fp, #12
0c894     11 25 62 FC | 	wrlong	local04, local03
0c898     34 00 00 FF 
0c89c     38 E5 85 F1 | 	sub	objptr, ##26936
0c8a0                 | LR__0995
0c8a0                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0c8a0     3C 4E 05 F1 | 	add	fp, #60
0c8a4     A7 12 02 FB | 	rdlong	arg01, fp
0c8a8     3C 4E 85 F1 | 	sub	fp, #60
0c8ac     00 14 06 F6 | 	mov	arg02, #0
0c8b0     01 16 06 F6 | 	mov	arg03, #1
0c8b4     44 3B B1 FD | 	call	#__system___float_cmp
0c8b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c8bc     24 00 90 CD |  if_b	jmp	#LR__0996
0c8c0     3C 4E 05 F1 | 	add	fp, #60
0c8c4     A7 12 02 FB | 	rdlong	arg01, fp
0c8c8     3C 4E 85 F1 | 	sub	fp, #60
0c8cc     89 C1 20 FF 
0c8d0     6F 14 06 F6 | 	mov	arg02, ##1099108975
0c8d4     01 16 66 F6 | 	neg	arg03, #1
0c8d8     20 3B B1 FD | 	call	#__system___float_cmp
0c8dc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c8e0     44 00 90 CD |  if_b	jmp	#LR__0997
0c8e4                 | LR__0996
0c8e4     0C 4E 05 F1 | 	add	fp, #12
0c8e8     A7 20 02 FB | 	rdlong	local02, fp
0c8ec     10 23 02 F6 | 	mov	local03, local02
0c8f0     01 22 66 F0 | 	shl	local03, #1
0c8f4     10 23 02 F1 | 	add	local03, local02
0c8f8     03 22 66 F0 | 	shl	local03, #3
0c8fc     34 00 00 FF 
0c900     38 E5 05 F1 | 	add	objptr, ##26936
0c904     F2 22 02 F1 | 	add	local03, objptr
0c908     0C 22 06 F1 | 	add	local03, #12
0c90c     11 23 02 FB | 	rdlong	local03, local03
0c910     60 4E 05 F1 | 	add	fp, #96
0c914     A7 22 62 FC | 	wrlong	local03, fp
0c918     6C 4E 85 F1 | 	sub	fp, #108
0c91c     34 00 00 FF 
0c920     38 E5 85 F1 | 	sub	objptr, ##26936
0c924     48 00 90 FD | 	jmp	#LR__0998
0c928                 | LR__0997
0c928     3C 4E 05 F1 | 	add	fp, #60
0c92c     A7 24 02 FB | 	rdlong	local04, fp
0c930     30 4E 05 F1 | 	add	fp, #48
0c934     A7 24 62 FC | 	wrlong	local04, fp
0c938     60 4E 85 F1 | 	sub	fp, #96
0c93c     A7 20 02 FB | 	rdlong	local02, fp
0c940     10 23 02 F6 | 	mov	local03, local02
0c944     01 22 66 F0 | 	shl	local03, #1
0c948     10 23 02 F1 | 	add	local03, local02
0c94c     03 22 66 F0 | 	shl	local03, #3
0c950     34 00 00 FF 
0c954     38 E5 05 F1 | 	add	objptr, ##26936
0c958     F2 22 02 F1 | 	add	local03, objptr
0c95c     0C 4E 85 F1 | 	sub	fp, #12
0c960     0C 22 06 F1 | 	add	local03, #12
0c964     11 25 62 FC | 	wrlong	local04, local03
0c968     34 00 00 FF 
0c96c     38 E5 85 F1 | 	sub	objptr, ##26936
0c970                 | LR__0998
0c970                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0c970     40 4E 05 F1 | 	add	fp, #64
0c974     A7 12 02 FB | 	rdlong	arg01, fp
0c978     40 4E 85 F1 | 	sub	fp, #64
0c97c     00 14 06 F6 | 	mov	arg02, #0
0c980     01 16 06 F6 | 	mov	arg03, #1
0c984     74 3A B1 FD | 	call	#__system___float_cmp
0c988     00 FA 55 F2 | 	cmps	result1, #0 wc
0c98c     24 00 90 CD |  if_b	jmp	#LR__0999
0c990     40 4E 05 F1 | 	add	fp, #64
0c994     A7 12 02 FB | 	rdlong	arg01, fp
0c998     40 4E 85 F1 | 	sub	fp, #64
0c99c     00 80 20 FF 
0c9a0     00 14 06 F6 | 	mov	arg02, ##1090519040
0c9a4     01 16 66 F6 | 	neg	arg03, #1
0c9a8     50 3A B1 FD | 	call	#__system___float_cmp
0c9ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9b0     48 00 90 CD |  if_b	jmp	#LR__1000
0c9b4                 | LR__0999
0c9b4     0C 4E 05 F1 | 	add	fp, #12
0c9b8     A7 22 02 FB | 	rdlong	local03, fp
0c9bc     11 27 02 F6 | 	mov	local05, local03
0c9c0     01 26 66 F0 | 	shl	local05, #1
0c9c4     11 27 02 F1 | 	add	local05, local03
0c9c8     03 26 66 F0 | 	shl	local05, #3
0c9cc     34 00 00 FF 
0c9d0     38 E5 05 F1 | 	add	objptr, ##26936
0c9d4     F2 26 02 F1 | 	add	local05, objptr
0c9d8     04 26 06 F1 | 	add	local05, #4
0c9dc     13 27 C2 FA | 	rdbyte	local05, local05
0c9e0     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c9e4     14 4E 05 F1 | 	add	fp, #20
0c9e8     A7 24 62 FC | 	wrlong	local04, fp
0c9ec     20 4E 85 F1 | 	sub	fp, #32
0c9f0     34 00 00 FF 
0c9f4     38 E5 85 F1 | 	sub	objptr, ##26936
0c9f8     54 00 90 FD | 	jmp	#LR__1001
0c9fc                 | LR__1000
0c9fc     40 4E 05 F1 | 	add	fp, #64
0ca00     A7 12 02 FB | 	rdlong	arg01, fp
0ca04     40 4E 85 F1 | 	sub	fp, #64
0ca08     01 14 06 F6 | 	mov	arg02, #1
0ca0c     80 3A B1 FD | 	call	#__system___float_tointeger
0ca10     20 4E 05 F1 | 	add	fp, #32
0ca14     A7 FA 61 FC | 	wrlong	result1, fp
0ca18     14 4E 85 F1 | 	sub	fp, #20
0ca1c     A7 20 02 FB | 	rdlong	local02, fp
0ca20     10 23 02 F6 | 	mov	local03, local02
0ca24     01 22 66 F0 | 	shl	local03, #1
0ca28     10 23 02 F1 | 	add	local03, local02
0ca2c     03 22 66 F0 | 	shl	local03, #3
0ca30     34 00 00 FF 
0ca34     38 E5 05 F1 | 	add	objptr, ##26936
0ca38     F2 22 02 F1 | 	add	local03, objptr
0ca3c     0C 4E 85 F1 | 	sub	fp, #12
0ca40     04 22 06 F1 | 	add	local03, #4
0ca44     11 FB 41 FC | 	wrbyte	result1, local03
0ca48     34 00 00 FF 
0ca4c     38 E5 85 F1 | 	sub	objptr, ##26936
0ca50                 | LR__1001
0ca50                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0ca50     44 4E 05 F1 | 	add	fp, #68
0ca54     A7 12 02 FB | 	rdlong	arg01, fp
0ca58     44 4E 85 F1 | 	sub	fp, #68
0ca5c     00 14 06 F6 | 	mov	arg02, #0
0ca60     01 16 06 F6 | 	mov	arg03, #1
0ca64     94 39 B1 FD | 	call	#__system___float_cmp
0ca68     00 FA 55 F2 | 	cmps	result1, #0 wc
0ca6c     24 00 90 CD |  if_b	jmp	#LR__1002
0ca70     44 4E 05 F1 | 	add	fp, #68
0ca74     A7 12 02 FB | 	rdlong	arg01, fp
0ca78     44 4E 85 F1 | 	sub	fp, #68
0ca7c     00 80 20 FF 
0ca80     00 14 06 F6 | 	mov	arg02, ##1090519040
0ca84     01 16 66 F6 | 	neg	arg03, #1
0ca88     70 39 B1 FD | 	call	#__system___float_cmp
0ca8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca90     48 00 90 CD |  if_b	jmp	#LR__1003
0ca94                 | LR__1002
0ca94     0C 4E 05 F1 | 	add	fp, #12
0ca98     A7 22 02 FB | 	rdlong	local03, fp
0ca9c     11 27 02 F6 | 	mov	local05, local03
0caa0     01 26 66 F0 | 	shl	local05, #1
0caa4     11 27 02 F1 | 	add	local05, local03
0caa8     03 26 66 F0 | 	shl	local05, #3
0caac     34 00 00 FF 
0cab0     38 E5 05 F1 | 	add	objptr, ##26936
0cab4     F2 26 02 F1 | 	add	local05, objptr
0cab8     05 26 06 F1 | 	add	local05, #5
0cabc     13 27 C2 FA | 	rdbyte	local05, local05
0cac0     13 25 E2 F8 | 	getbyte	local04, local05, #0
0cac4     18 4E 05 F1 | 	add	fp, #24
0cac8     A7 24 62 FC | 	wrlong	local04, fp
0cacc     24 4E 85 F1 | 	sub	fp, #36
0cad0     34 00 00 FF 
0cad4     38 E5 85 F1 | 	sub	objptr, ##26936
0cad8     54 00 90 FD | 	jmp	#LR__1004
0cadc                 | LR__1003
0cadc     44 4E 05 F1 | 	add	fp, #68
0cae0     A7 12 02 FB | 	rdlong	arg01, fp
0cae4     44 4E 85 F1 | 	sub	fp, #68
0cae8     01 14 06 F6 | 	mov	arg02, #1
0caec     A0 39 B1 FD | 	call	#__system___float_tointeger
0caf0     24 4E 05 F1 | 	add	fp, #36
0caf4     A7 FA 61 FC | 	wrlong	result1, fp
0caf8     18 4E 85 F1 | 	sub	fp, #24
0cafc     A7 20 02 FB | 	rdlong	local02, fp
0cb00     10 23 02 F6 | 	mov	local03, local02
0cb04     01 22 66 F0 | 	shl	local03, #1
0cb08     10 23 02 F1 | 	add	local03, local02
0cb0c     03 22 66 F0 | 	shl	local03, #3
0cb10     34 00 00 FF 
0cb14     38 E5 05 F1 | 	add	objptr, ##26936
0cb18     F2 22 02 F1 | 	add	local03, objptr
0cb1c     0C 4E 85 F1 | 	sub	fp, #12
0cb20     05 22 06 F1 | 	add	local03, #5
0cb24     11 FB 41 FC | 	wrbyte	result1, local03
0cb28     34 00 00 FF 
0cb2c     38 E5 85 F1 | 	sub	objptr, ##26936
0cb30                 | LR__1004
0cb30                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0cb30     48 4E 05 F1 | 	add	fp, #72
0cb34     A7 12 02 FB | 	rdlong	arg01, fp
0cb38     48 4E 85 F1 | 	sub	fp, #72
0cb3c     00 14 06 F6 | 	mov	arg02, #0
0cb40     01 16 06 F6 | 	mov	arg03, #1
0cb44     B4 38 B1 FD | 	call	#__system___float_cmp
0cb48     00 FA 55 F2 | 	cmps	result1, #0 wc
0cb4c     24 00 90 CD |  if_b	jmp	#LR__1005
0cb50     48 4E 05 F1 | 	add	fp, #72
0cb54     A7 12 02 FB | 	rdlong	arg01, fp
0cb58     48 4E 85 F1 | 	sub	fp, #72
0cb5c     00 3D 22 FF 
0cb60     00 14 06 F6 | 	mov	arg02, ##1148846080
0cb64     01 16 66 F6 | 	neg	arg03, #1
0cb68     90 38 B1 FD | 	call	#__system___float_cmp
0cb6c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cb70     44 00 90 CD |  if_b	jmp	#LR__1006
0cb74                 | LR__1005
0cb74     0C 4E 05 F1 | 	add	fp, #12
0cb78     A7 20 02 FB | 	rdlong	local02, fp
0cb7c     10 23 02 F6 | 	mov	local03, local02
0cb80     01 22 66 F0 | 	shl	local03, #1
0cb84     10 23 02 F1 | 	add	local03, local02
0cb88     03 22 66 F0 | 	shl	local03, #3
0cb8c     34 00 00 FF 
0cb90     38 E5 05 F1 | 	add	objptr, ##26936
0cb94     F2 22 02 F1 | 	add	local03, objptr
0cb98     08 22 06 F1 | 	add	local03, #8
0cb9c     11 25 02 FB | 	rdlong	local04, local03
0cba0     64 4E 05 F1 | 	add	fp, #100
0cba4     A7 24 62 FC | 	wrlong	local04, fp
0cba8     70 4E 85 F1 | 	sub	fp, #112
0cbac     34 00 00 FF 
0cbb0     38 E5 85 F1 | 	sub	objptr, ##26936
0cbb4     48 00 90 FD | 	jmp	#LR__1007
0cbb8                 | LR__1006
0cbb8     48 4E 05 F1 | 	add	fp, #72
0cbbc     A7 24 02 FB | 	rdlong	local04, fp
0cbc0     28 4E 05 F1 | 	add	fp, #40
0cbc4     A7 24 62 FC | 	wrlong	local04, fp
0cbc8     64 4E 85 F1 | 	sub	fp, #100
0cbcc     A7 20 02 FB | 	rdlong	local02, fp
0cbd0     10 23 02 F6 | 	mov	local03, local02
0cbd4     01 22 66 F0 | 	shl	local03, #1
0cbd8     10 23 02 F1 | 	add	local03, local02
0cbdc     03 22 66 F0 | 	shl	local03, #3
0cbe0     34 00 00 FF 
0cbe4     38 E5 05 F1 | 	add	objptr, ##26936
0cbe8     F2 22 02 F1 | 	add	local03, objptr
0cbec     0C 4E 85 F1 | 	sub	fp, #12
0cbf0     08 22 06 F1 | 	add	local03, #8
0cbf4     11 25 62 FC | 	wrlong	local04, local03
0cbf8     34 00 00 FF 
0cbfc     38 E5 85 F1 | 	sub	objptr, ##26936
0cc00                 | LR__1007
0cc00                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0cc00     38 4E 05 F1 | 	add	fp, #56
0cc04     A7 12 02 FB | 	rdlong	arg01, fp
0cc08     38 4E 85 F1 | 	sub	fp, #56
0cc0c     00 14 06 F6 | 	mov	arg02, #0
0cc10     01 16 06 F6 | 	mov	arg03, #1
0cc14     E4 37 B1 FD | 	call	#__system___float_cmp
0cc18     00 FA 55 F2 | 	cmps	result1, #0 wc
0cc1c     24 00 90 CD |  if_b	jmp	#LR__1008
0cc20     38 4E 05 F1 | 	add	fp, #56
0cc24     A7 12 02 FB | 	rdlong	arg01, fp
0cc28     38 4E 85 F1 | 	sub	fp, #56
0cc2c     20 0E 23 FF 
0cc30     00 14 06 F6 | 	mov	arg02, ##1176256512
0cc34     01 16 66 F6 | 	neg	arg03, #1
0cc38     C0 37 B1 FD | 	call	#__system___float_cmp
0cc3c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc40     48 00 90 CD |  if_b	jmp	#LR__1009
0cc44                 | LR__1008
0cc44     0C 4E 05 F1 | 	add	fp, #12
0cc48     A7 22 02 FB | 	rdlong	local03, fp
0cc4c     11 27 02 F6 | 	mov	local05, local03
0cc50     01 26 66 F0 | 	shl	local05, #1
0cc54     11 27 02 F1 | 	add	local05, local03
0cc58     03 26 66 F0 | 	shl	local05, #3
0cc5c     34 00 00 FF 
0cc60     38 E5 05 F1 | 	add	objptr, ##26936
0cc64     F2 26 02 F1 | 	add	local05, objptr
0cc68     06 26 06 F1 | 	add	local05, #6
0cc6c     13 27 E2 FA | 	rdword	local05, local05
0cc70     13 25 32 F9 | 	getword	local04, local05, #0
0cc74     1C 4E 05 F1 | 	add	fp, #28
0cc78     A7 24 62 FC | 	wrlong	local04, fp
0cc7c     28 4E 85 F1 | 	sub	fp, #40
0cc80     34 00 00 FF 
0cc84     38 E5 85 F1 | 	sub	objptr, ##26936
0cc88     54 00 90 FD | 	jmp	#LR__1010
0cc8c                 | LR__1009
0cc8c     38 4E 05 F1 | 	add	fp, #56
0cc90     A7 12 02 FB | 	rdlong	arg01, fp
0cc94     38 4E 85 F1 | 	sub	fp, #56
0cc98     01 14 06 F6 | 	mov	arg02, #1
0cc9c     F0 37 B1 FD | 	call	#__system___float_tointeger
0cca0     28 4E 05 F1 | 	add	fp, #40
0cca4     A7 FA 61 FC | 	wrlong	result1, fp
0cca8     1C 4E 85 F1 | 	sub	fp, #28
0ccac     A7 20 02 FB | 	rdlong	local02, fp
0ccb0     10 23 02 F6 | 	mov	local03, local02
0ccb4     01 22 66 F0 | 	shl	local03, #1
0ccb8     10 23 02 F1 | 	add	local03, local02
0ccbc     03 22 66 F0 | 	shl	local03, #3
0ccc0     34 00 00 FF 
0ccc4     38 E5 05 F1 | 	add	objptr, ##26936
0ccc8     F2 22 02 F1 | 	add	local03, objptr
0cccc     0C 4E 85 F1 | 	sub	fp, #12
0ccd0     06 22 06 F1 | 	add	local03, #6
0ccd4     11 FB 51 FC | 	wrword	result1, local03
0ccd8     34 00 00 FF 
0ccdc     38 E5 85 F1 | 	sub	objptr, ##26936
0cce0                 | LR__1010
0cce0                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0cce0     4C 4E 05 F1 | 	add	fp, #76
0cce4     A7 12 02 FB | 	rdlong	arg01, fp
0cce8     4C 4E 85 F1 | 	sub	fp, #76
0ccec     00 C0 5F FF 
0ccf0     00 14 06 F6 | 	mov	arg02, ##-1082130432
0ccf4     01 16 06 F6 | 	mov	arg03, #1
0ccf8     00 37 B1 FD | 	call	#__system___float_cmp
0ccfc     00 FA 55 F2 | 	cmps	result1, #0 wc
0cd00     24 00 90 CD |  if_b	jmp	#LR__1011
0cd04     4C 4E 05 F1 | 	add	fp, #76
0cd08     A7 12 02 FB | 	rdlong	arg01, fp
0cd0c     4C 4E 85 F1 | 	sub	fp, #76
0cd10     00 C0 1F FF 
0cd14     00 14 06 F6 | 	mov	arg02, ##1065353216
0cd18     01 16 66 F6 | 	neg	arg03, #1
0cd1c     DC 36 B1 FD | 	call	#__system___float_cmp
0cd20     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd24     44 00 90 CD |  if_b	jmp	#LR__1012
0cd28                 | LR__1011
0cd28     0C 4E 05 F1 | 	add	fp, #12
0cd2c     A7 20 02 FB | 	rdlong	local02, fp
0cd30     10 23 02 F6 | 	mov	local03, local02
0cd34     01 22 66 F0 | 	shl	local03, #1
0cd38     10 23 02 F1 | 	add	local03, local02
0cd3c     03 22 66 F0 | 	shl	local03, #3
0cd40     34 00 00 FF 
0cd44     38 E5 05 F1 | 	add	objptr, ##26936
0cd48     F2 22 02 F1 | 	add	local03, objptr
0cd4c     10 22 06 F1 | 	add	local03, #16
0cd50     11 27 02 FB | 	rdlong	local05, local03
0cd54     5C 4E 05 F1 | 	add	fp, #92
0cd58     A7 26 62 FC | 	wrlong	local05, fp
0cd5c     68 4E 85 F1 | 	sub	fp, #104
0cd60     34 00 00 FF 
0cd64     38 E5 85 F1 | 	sub	objptr, ##26936
0cd68     48 00 90 FD | 	jmp	#LR__1013
0cd6c                 | LR__1012
0cd6c     4C 4E 05 F1 | 	add	fp, #76
0cd70     A7 26 02 FB | 	rdlong	local05, fp
0cd74     1C 4E 05 F1 | 	add	fp, #28
0cd78     A7 26 62 FC | 	wrlong	local05, fp
0cd7c     5C 4E 85 F1 | 	sub	fp, #92
0cd80     A7 20 02 FB | 	rdlong	local02, fp
0cd84     10 23 02 F6 | 	mov	local03, local02
0cd88     01 22 66 F0 | 	shl	local03, #1
0cd8c     10 23 02 F1 | 	add	local03, local02
0cd90     03 22 66 F0 | 	shl	local03, #3
0cd94     34 00 00 FF 
0cd98     38 E5 05 F1 | 	add	objptr, ##26936
0cd9c     F2 22 02 F1 | 	add	local03, objptr
0cda0     0C 4E 85 F1 | 	sub	fp, #12
0cda4     10 22 06 F1 | 	add	local03, #16
0cda8     11 27 62 FC | 	wrlong	local05, local03
0cdac     34 00 00 FF 
0cdb0     38 E5 85 F1 | 	sub	objptr, ##26936
0cdb4                 | LR__1013
0cdb4                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0cdb4     50 4E 05 F1 | 	add	fp, #80
0cdb8     A7 12 02 FB | 	rdlong	arg01, fp
0cdbc     50 4E 85 F1 | 	sub	fp, #80
0cdc0     00 14 06 F6 | 	mov	arg02, #0
0cdc4     01 16 06 F6 | 	mov	arg03, #1
0cdc8     30 36 B1 FD | 	call	#__system___float_cmp
0cdcc     00 FA 55 F2 | 	cmps	result1, #0 wc
0cdd0     24 00 90 CD |  if_b	jmp	#LR__1014
0cdd4     50 4E 05 F1 | 	add	fp, #80
0cdd8     A7 12 02 FB | 	rdlong	arg01, fp
0cddc     50 4E 85 F1 | 	sub	fp, #80
0cde0     80 BF 21 FF 
0cde4     00 14 06 F6 | 	mov	arg02, ##1132396544
0cde8     01 16 66 F6 | 	neg	arg03, #1
0cdec     0C 36 B1 FD | 	call	#__system___float_cmp
0cdf0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cdf4     44 00 90 CD |  if_b	jmp	#LR__1015
0cdf8                 | LR__1014
0cdf8     0C 4E 05 F1 | 	add	fp, #12
0cdfc     A7 22 02 FB | 	rdlong	local03, fp
0ce00     11 27 02 F6 | 	mov	local05, local03
0ce04     01 26 66 F0 | 	shl	local05, #1
0ce08     11 27 02 F1 | 	add	local05, local03
0ce0c     03 26 66 F0 | 	shl	local05, #3
0ce10     34 00 00 FF 
0ce14     38 E5 05 F1 | 	add	objptr, ##26936
0ce18     F2 26 02 F1 | 	add	local05, objptr
0ce1c     14 26 06 F1 | 	add	local05, #20
0ce20     13 25 E2 FA | 	rdword	local04, local05
0ce24     20 4E 05 F1 | 	add	fp, #32
0ce28     A7 24 62 FC | 	wrlong	local04, fp
0ce2c     2C 4E 85 F1 | 	sub	fp, #44
0ce30     34 00 00 FF 
0ce34     38 E5 85 F1 | 	sub	objptr, ##26936
0ce38     54 00 90 FD | 	jmp	#LR__1016
0ce3c                 | LR__1015
0ce3c     50 4E 05 F1 | 	add	fp, #80
0ce40     A7 12 02 FB | 	rdlong	arg01, fp
0ce44     50 4E 85 F1 | 	sub	fp, #80
0ce48     01 14 06 F6 | 	mov	arg02, #1
0ce4c     40 36 B1 FD | 	call	#__system___float_tointeger
0ce50     2C 4E 05 F1 | 	add	fp, #44
0ce54     A7 FA 61 FC | 	wrlong	result1, fp
0ce58     20 4E 85 F1 | 	sub	fp, #32
0ce5c     A7 20 02 FB | 	rdlong	local02, fp
0ce60     10 23 02 F6 | 	mov	local03, local02
0ce64     01 22 66 F0 | 	shl	local03, #1
0ce68     10 23 02 F1 | 	add	local03, local02
0ce6c     03 22 66 F0 | 	shl	local03, #3
0ce70     34 00 00 FF 
0ce74     38 E5 05 F1 | 	add	objptr, ##26936
0ce78     F2 22 02 F1 | 	add	local03, objptr
0ce7c     0C 4E 85 F1 | 	sub	fp, #12
0ce80     14 22 06 F1 | 	add	local03, #20
0ce84     11 FB 51 FC | 	wrword	result1, local03
0ce88     34 00 00 FF 
0ce8c     38 E5 85 F1 | 	sub	objptr, ##26936
0ce90                 | LR__1016
0ce90     60 4E 05 F1 | 	add	fp, #96
0ce94     A7 12 02 FB | 	rdlong	arg01, fp
0ce98     10 4E 05 F1 | 	add	fp, #16
0ce9c     A7 14 02 FB | 	rdlong	arg02, fp
0cea0     70 4E 85 F1 | 	sub	fp, #112
0cea4     24 33 B1 FD | 	call	#__system___float_div
0cea8     FD 12 02 F6 | 	mov	arg01, result1
0ceac     01 14 06 F6 | 	mov	arg02, #1
0ceb0     DC 35 B1 FD | 	call	#__system___float_tointeger
0ceb4     FD 24 02 F6 | 	mov	local04, result1
0ceb8     14 4E 05 F1 | 	add	fp, #20
0cebc     A7 24 62 FC | 	wrlong	local04, fp
0cec0     54 4E 05 F1 | 	add	fp, #84
0cec4     A7 14 02 FB | 	rdlong	arg02, fp
0cec8     68 4E 85 F1 | 	sub	fp, #104
0cecc     00 00 23 FF 
0ced0     00 12 06 F6 | 	mov	arg01, ##1174405120
0ced4     F0 30 B1 FD | 	call	#__system___float_mul
0ced8     FD 12 02 F6 | 	mov	arg01, result1
0cedc     01 14 06 F6 | 	mov	arg02, #1
0cee0     AC 35 B1 FD | 	call	#__system___float_tointeger
0cee4     0D 24 C6 F9 | 	decod	local04, #13
0cee8     FD 24 02 F1 | 	add	local04, result1
0ceec     18 4E 05 F1 | 	add	fp, #24
0cef0     A7 24 62 FC | 	wrlong	local04, fp
0cef4     54 4E 05 F1 | 	add	fp, #84
0cef8     A7 14 02 FB | 	rdlong	arg02, fp
0cefc     6C 4E 85 F1 | 	sub	fp, #108
0cf00     00 3D 22 FF 
0cf04     00 12 06 F6 | 	mov	arg01, ##1148846080
0cf08     BC 30 B1 FD | 	call	#__system___float_mul
0cf0c     FD 12 02 F6 | 	mov	arg01, result1
0cf10     01 14 06 F6 | 	mov	arg02, #1
0cf14     78 35 B1 FD | 	call	#__system___float_tointeger
0cf18     1C 4E 05 F1 | 	add	fp, #28
0cf1c     A7 FA 61 FC | 	wrlong	result1, fp
0cf20     57 00 00 FF 
0cf24     00 E4 05 F1 | 	add	objptr, ##44544
0cf28     F2 24 02 FB | 	rdlong	local04, objptr
0cf2c     57 00 00 FF 
0cf30     00 E4 85 F1 | 	sub	objptr, ##44544
0cf34     10 4E 85 F1 | 	sub	fp, #16
0cf38     A7 20 02 FB | 	rdlong	local02, fp
0cf3c     06 20 66 F0 | 	shl	local02, #6
0cf40     10 25 02 F1 | 	add	local04, local02
0cf44     04 4E 85 F1 | 	sub	fp, #4
0cf48     A7 24 62 FC | 	wrlong	local04, fp
0cf4c     5C 4E 05 F1 | 	add	fp, #92
0cf50     A7 12 02 FB | 	rdlong	arg01, fp
0cf54     64 4E 85 F1 | 	sub	fp, #100
0cf58     72 3F 20 FF 
0cf5c     EA 14 06 F6 | 	mov	arg02, ##1082057962
0cf60     64 30 B1 FD | 	call	#__system___float_mul
0cf64     FD 12 02 F6 | 	mov	arg01, result1
0cf68     01 14 06 F6 | 	mov	arg02, #1
0cf6c     20 35 B1 FD | 	call	#__system___float_tointeger
0cf70     10 4E 05 F1 | 	add	fp, #16
0cf74     A7 FA 61 FC | 	wrlong	result1, fp
0cf78                 | ' 
0cf78                 | ' speed=round(speed_coeff/slen)
0cf78                 | ' ipan=8192+round(8192*pan)
0cf78                 | ' ivol=round(1000.0*vol)
0cf78                 | ' base2=base+64*channel
0cf78                 | ' skip=round(freq*3.9827219) 
0cf78                 | ' if wave <8 then 
0cf78     10 4E 05 F1 | 	add	fp, #16
0cf7c     A7 24 02 FB | 	rdlong	local04, fp
0cf80     20 4E 85 F1 | 	sub	fp, #32
0cf84     08 24 56 F2 | 	cmps	local04, #8 wc
0cf88     40 00 90 3D |  if_ae	jmp	#LR__1017
0cf8c     08 4E 05 F1 | 	add	fp, #8
0cf90     A7 12 02 FB | 	rdlong	arg01, fp
0cf94     08 12 06 F1 | 	add	arg01, #8
0cf98     18 4E 05 F1 | 	add	fp, #24
0cf9c     A7 14 02 FB | 	rdlong	arg02, fp
0cfa0     20 4E 85 F1 | 	sub	fp, #32
0cfa4     0B 14 66 F0 | 	shl	arg02, #11
0cfa8     0C 00 00 FF 
0cfac     D8 E4 05 F1 | 	add	objptr, ##6360
0cfb0     F2 14 02 F1 | 	add	arg02, objptr
0cfb4     0C 00 00 FF 
0cfb8     D8 E4 85 F1 | 	sub	objptr, ##6360
0cfbc     00 00 60 FF 
0cfc0     00 14 06 F1 | 	add	arg02, ##-1073741824
0cfc4     09 15 62 FC | 	wrlong	arg02, arg01
0cfc8     18 00 90 FD | 	jmp	#LR__1018
0cfcc                 | LR__1017
0cfcc     08 4E 05 F1 | 	add	fp, #8
0cfd0     A7 12 02 FB | 	rdlong	arg01, fp
0cfd4     08 4E 85 F1 | 	sub	fp, #8
0cfd8     08 12 06 F1 | 	add	arg01, #8
0cfdc     00 00 E4 FF 
0cfe0     09 01 68 FC | 	wrlong	##-939524096, arg01
0cfe4                 | LR__1018
0cfe4     08 4E 05 F1 | 	add	fp, #8
0cfe8     A7 12 02 FB | 	rdlong	arg01, fp
0cfec     10 12 06 F1 | 	add	arg01, #16
0cff0     04 00 80 FF 
0cff4     09 01 68 FC | 	wrlong	##2048, arg01
0cff8     A7 12 02 FB | 	rdlong	arg01, fp
0cffc     0C 12 06 F1 | 	add	arg01, #12
0d000     09 01 68 FC | 	wrlong	#0, arg01
0d004     A7 12 02 FB | 	rdlong	arg01, fp
0d008     14 12 06 F1 | 	add	arg01, #20
0d00c     14 4E 05 F1 | 	add	fp, #20
0d010     A7 14 02 FB | 	rdlong	arg02, fp
0d014     09 15 52 FC | 	wrword	arg02, arg01
0d018     14 4E 85 F1 | 	sub	fp, #20
0d01c     A7 12 02 FB | 	rdlong	arg01, fp
0d020     16 12 06 F1 | 	add	arg01, #22
0d024     10 4E 05 F1 | 	add	fp, #16
0d028     A7 14 02 FB | 	rdlong	arg02, fp
0d02c     09 15 52 FC | 	wrword	arg02, arg01
0d030                 | '   
0d030                 | ' lpoke base2+16,2048
0d030                 | ' lpoke base2+12,0
0d030                 | ' dpoke base2+20,ivol 
0d030                 | ' dpoke base2+22,ipan 
0d030                 | ' if wave<8 then
0d030     08 4E 05 F1 | 	add	fp, #8
0d034     A7 24 02 FB | 	rdlong	local04, fp
0d038     20 4E 85 F1 | 	sub	fp, #32
0d03c     08 24 56 F2 | 	cmps	local04, #8 wc
0d040     2C 00 90 3D |  if_ae	jmp	#LR__1019
0d044     08 4E 05 F1 | 	add	fp, #8
0d048     A7 12 02 FB | 	rdlong	arg01, fp
0d04c     18 12 06 F1 | 	add	arg01, #24
0d050     09 29 58 FC | 	wrword	#20, arg01
0d054     A7 12 02 FB | 	rdlong	arg01, fp
0d058     1A 12 06 F1 | 	add	arg01, #26
0d05c     08 4E 05 F1 | 	add	fp, #8
0d060     A7 14 02 FB | 	rdlong	arg02, fp
0d064     10 4E 85 F1 | 	sub	fp, #16
0d068     09 15 52 FC | 	wrword	arg02, arg01
0d06c     48 00 90 FD | 	jmp	#LR__1020
0d070                 | LR__1019
0d070     08 4E 05 F1 | 	add	fp, #8
0d074     A7 24 02 FB | 	rdlong	local04, fp
0d078     18 24 06 F1 | 	add	local04, #24
0d07c     5C 4E 05 F1 | 	add	fp, #92
0d080     A7 14 02 FB | 	rdlong	arg02, fp
0d084     64 4E 85 F1 | 	sub	fp, #100
0d088     58 D0 24 FF 
0d08c     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d090     38 31 B1 FD | 	call	#__system___float_div
0d094     FD 12 02 F6 | 	mov	arg01, result1
0d098     01 14 06 F6 | 	mov	arg02, #1
0d09c     F0 33 B1 FD | 	call	#__system___float_tointeger
0d0a0     12 FB 51 FC | 	wrword	result1, local04
0d0a4     08 4E 05 F1 | 	add	fp, #8
0d0a8     A7 12 02 FB | 	rdlong	arg01, fp
0d0ac     08 4E 85 F1 | 	sub	fp, #8
0d0b0     1A 12 06 F1 | 	add	arg01, #26
0d0b4     09 01 5A FC | 	wrword	#256, arg01
0d0b8                 | LR__1020
0d0b8     08 4E 05 F1 | 	add	fp, #8
0d0bc     A7 12 02 FB | 	rdlong	arg01, fp
0d0c0     20 12 06 F1 | 	add	arg01, #32
0d0c4     09 01 68 FC | 	wrlong	#0, arg01
0d0c8                 | ' 'dpoke base2+28,$4000_0000
0d0c8                 | ' lpoke base2+32,0 
0d0c8                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d0c8     1C 4E 05 F1 | 	add	fp, #28
0d0cc     A7 24 02 FB | 	rdlong	local04, fp
0d0d0     24 4E 85 F1 | 	sub	fp, #36
0d0d4     08 24 0E F2 | 	cmp	local04, #8 wz
0d0d8     18 00 90 5D |  if_ne	jmp	#LR__1021
0d0dc     08 4E 05 F1 | 	add	fp, #8
0d0e0     A7 12 02 FB | 	rdlong	arg01, fp
0d0e4     08 4E 85 F1 | 	sub	fp, #8
0d0e8     24 12 06 F1 | 	add	arg01, #36
0d0ec     09 01 68 FC | 	wrlong	#0, arg01
0d0f0     34 00 90 FD | 	jmp	#LR__1022
0d0f4                 | LR__1021
0d0f4     08 4E 05 F1 | 	add	fp, #8
0d0f8     A7 12 02 FB | 	rdlong	arg01, fp
0d0fc     24 12 06 F1 | 	add	arg01, #36
0d100     1C 4E 05 F1 | 	add	fp, #28
0d104     A7 14 02 FB | 	rdlong	arg02, fp
0d108     24 4E 85 F1 | 	sub	fp, #36
0d10c     09 14 66 F0 | 	shl	arg02, #9
0d110     2C 00 00 FF 
0d114     D8 E4 05 F1 | 	add	objptr, ##22744
0d118     F2 14 02 F1 | 	add	arg02, objptr
0d11c     2C 00 00 FF 
0d120     D8 E4 85 F1 | 	sub	objptr, ##22744
0d124     09 15 62 FC | 	wrlong	arg02, arg01
0d128                 | LR__1022
0d128     08 4E 05 F1 | 	add	fp, #8
0d12c     A7 12 02 FB | 	rdlong	arg01, fp
0d130     28 12 06 F1 | 	add	arg01, #40
0d134     0C 4E 05 F1 | 	add	fp, #12
0d138     A7 14 02 FB | 	rdlong	arg02, fp
0d13c     09 15 62 FC | 	wrlong	arg02, arg01
0d140     0C 4E 85 F1 | 	sub	fp, #12
0d144     A7 12 02 FB | 	rdlong	arg01, fp
0d148     2C 12 06 F1 | 	add	arg01, #44
0d14c     24 4E 05 F1 | 	add	fp, #36
0d150     A7 14 02 FB | 	rdlong	arg02, fp
0d154     09 15 62 FC | 	wrlong	arg02, arg01
0d158                 | ' lpoke base2+40,speed' speed
0d158                 | ' lpoke base2+44,sus 'len
0d158                 | ' 
0d158                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d158     04 4E 85 F1 | 	sub	fp, #4
0d15c     A7 24 02 FB | 	rdlong	local04, fp
0d160     28 4E 85 F1 | 	sub	fp, #40
0d164     01 24 56 F2 | 	cmps	local04, #1 wc
0d168     28 4E 05 31 |  if_ae	add	fp, #40
0d16c     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d170     28 4E 85 31 |  if_ae	sub	fp, #40
0d174     C8 05 B1 3D |  if_ae	call	#__system___waitms
0d178     A7 F0 03 F6 | 	mov	ptra, fp
0d17c     B2 00 A0 FD | 	call	#popregs_
0d180                 | _do_play_ret
0d180     2D 00 64 FD | 	ret
0d184                 | 
0d184                 | ' 
0d184                 | ' sub do_release
0d184                 | _do_release
0d184     00 4A 05 F6 | 	mov	COUNT_, #0
0d188     A8 00 A0 FD | 	call	#pushregs_
0d18c     10 F0 07 F1 | 	add	ptra, #16
0d190     18 D0 BF FD | 	call	#_pop
0d194     FF 14 02 F6 | 	mov	arg02, result3
0d198     A7 FA 61 FC | 	wrlong	result1, fp
0d19c     04 4E 05 F1 | 	add	fp, #4
0d1a0     A7 FC 61 FC | 	wrlong	result2, fp
0d1a4     04 4E 05 F1 | 	add	fp, #4
0d1a8     A7 14 62 FC | 	wrlong	arg02, fp
0d1ac     08 4E 85 F1 | 	sub	fp, #8
0d1b0     A7 12 02 F6 | 	mov	arg01, fp
0d1b4     4C 5C B0 FD | 	call	#_converttoint
0d1b8     0C 4E 05 F1 | 	add	fp, #12
0d1bc     A7 FA 61 FC | 	wrlong	result1, fp
0d1c0                 | ' t1=pop()
0d1c0                 | ' channel=converttoint(t1)
0d1c0                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d1c0     0C 4E 85 F1 | 	sub	fp, #12
0d1c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d1c8     44 00 90 CD |  if_b	jmp	#LR__1030
0d1cc     0C 4E 05 F1 | 	add	fp, #12
0d1d0     A7 14 02 FB | 	rdlong	arg02, fp
0d1d4     0C 4E 85 F1 | 	sub	fp, #12
0d1d8     08 14 56 F2 | 	cmps	arg02, #8 wc
0d1dc     30 00 90 3D |  if_ae	jmp	#LR__1030
0d1e0     57 00 00 FF 
0d1e4     00 E4 05 F1 | 	add	objptr, ##44544
0d1e8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1ec     57 00 00 FF 
0d1f0     00 E4 85 F1 | 	sub	objptr, ##44544
0d1f4     0C 4E 05 F1 | 	add	fp, #12
0d1f8     A7 14 02 FB | 	rdlong	arg02, fp
0d1fc     0C 4E 85 F1 | 	sub	fp, #12
0d200     06 14 66 F0 | 	shl	arg02, #6
0d204     0A 13 02 F1 | 	add	arg01, arg02
0d208     2C 12 06 F1 | 	add	arg01, #44
0d20c     09 FF 69 FC | 	wrlong	#255, arg01
0d210                 | LR__1030
0d210     A7 F0 03 F6 | 	mov	ptra, fp
0d214     B2 00 A0 FD | 	call	#popregs_
0d218                 | _do_release_ret
0d218     2D 00 64 FD | 	ret
0d21c                 | 
0d21c                 | ' 
0d21c                 | ' 
0d21c                 | ' sub do_defsnd
0d21c                 | _do_defsnd
0d21c     05 4A 05 F6 | 	mov	COUNT_, #5
0d220     A8 00 A0 FD | 	call	#pushregs_
0d224     88 F0 07 F1 | 	add	ptra, #136
0d228     6A 00 00 FF 
0d22c     70 E4 05 F1 | 	add	objptr, ##54384
0d230     F2 1A 02 FB | 	rdlong	arg05, objptr
0d234     0D 19 02 F6 | 	mov	arg04, arg05
0d238     01 18 66 F0 | 	shl	arg04, #1
0d23c     0D 19 02 F1 | 	add	arg04, arg05
0d240     02 18 66 F0 | 	shl	arg04, #2
0d244     03 00 00 FF 
0d248     04 E4 85 F1 | 	sub	objptr, ##1540
0d24c     F2 18 02 F1 | 	add	arg04, objptr
0d250     0C 1B 02 FB | 	rdlong	arg05, arg04
0d254     A7 1A 62 FC | 	wrlong	arg05, fp
0d258                 | ' 
0d258                 | ' numpar=compiledline(lineptr_e).result.uresult
0d258                 | ' 
0d258                 | ' 
0d258                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d258                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d258                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d258                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d258                 | ' 
0d258                 | ' if numpar<2 then return
0d258     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d25c     67 00 00 FF 
0d260     6C E4 85 F1 | 	sub	objptr, ##52844
0d264     A0 09 90 CD |  if_b	jmp	#LR__1068
0d268                 | ' 
0d268                 | '   
0d268                 | ' if numpar=2 then
0d268     A7 1A 02 FB | 	rdlong	arg05, fp
0d26c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d270     0C 04 90 5D |  if_ne	jmp	#LR__1051
0d274     34 CF BF FD | 	call	#_pop
0d278     FF 1A 02 F6 | 	mov	arg05, result3
0d27c     2C 4E 05 F1 | 	add	fp, #44
0d280     A7 FA 61 FC | 	wrlong	result1, fp
0d284     04 4E 05 F1 | 	add	fp, #4
0d288     A7 FC 61 FC | 	wrlong	result2, fp
0d28c     04 4E 05 F1 | 	add	fp, #4
0d290     A7 1A 62 FC | 	wrlong	arg05, fp
0d294                 | '   t1=pop()
0d294                 | '   if t1.result_type=result_string2 then 
0d294     34 4E 85 F1 | 	sub	fp, #52
0d298     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d29c     20 00 90 5D |  if_ne	jmp	#LR__1040
0d2a0     2C 4E 05 F1 | 	add	fp, #44
0d2a4     A7 12 02 FB | 	rdlong	arg01, fp
0d2a8     2C 4E 85 F1 | 	sub	fp, #44
0d2ac     A4 11 B0 FD | 	call	#_convertstring
0d2b0     38 4E 05 F1 | 	add	fp, #56
0d2b4     A7 FA 61 FC | 	wrlong	result1, fp
0d2b8     38 4E 85 F1 | 	sub	fp, #56
0d2bc     58 00 90 FD | 	jmp	#LR__1043
0d2c0                 | LR__1040
0d2c0     34 4E 05 F1 | 	add	fp, #52
0d2c4     A7 1A 02 FB | 	rdlong	arg05, fp
0d2c8     34 4E 85 F1 | 	sub	fp, #52
0d2cc     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d2d0     18 00 90 5D |  if_ne	jmp	#LR__1041
0d2d4     2C 4E 05 F1 | 	add	fp, #44
0d2d8     A7 1A 02 FB | 	rdlong	arg05, fp
0d2dc     0C 4E 05 F1 | 	add	fp, #12
0d2e0     A7 1A 62 FC | 	wrlong	arg05, fp
0d2e4     38 4E 85 F1 | 	sub	fp, #56
0d2e8     2C 00 90 FD | 	jmp	#LR__1042
0d2ec                 | LR__1041
0d2ec     68 01 00 FF 
0d2f0     30 1A 06 F6 | 	mov	arg05, ##@LR__4973
0d2f4     38 4E 05 F1 | 	add	fp, #56
0d2f8     A7 1A 62 FC | 	wrlong	arg05, fp
0d2fc     0C 4E 85 F1 | 	sub	fp, #12
0d300     A7 12 02 F6 | 	mov	arg01, fp
0d304     2C 4E 85 F1 | 	sub	fp, #44
0d308     F8 5A B0 FD | 	call	#_converttoint
0d30c     14 4E 05 F1 | 	add	fp, #20
0d310     A7 FA 61 FC | 	wrlong	result1, fp
0d314     14 4E 85 F1 | 	sub	fp, #20
0d318                 | LR__1042
0d318                 | LR__1043
0d318                 | ' 
0d318                 | '     
0d318                 | '   if s<>"" then 
0d318     38 4E 05 F1 | 	add	fp, #56
0d31c     A7 12 02 FB | 	rdlong	arg01, fp
0d320     38 4E 85 F1 | 	sub	fp, #56
0d324     68 01 00 FF 
0d328     31 14 06 F6 | 	mov	arg02, ##@LR__4974
0d32c     44 01 B1 FD | 	call	#__system___string_cmp
0d330     00 FA 0D F2 | 	cmp	result1, #0 wz
0d334     88 01 90 AD |  if_e	jmp	#LR__1045
0d338     70 CE BF FD | 	call	#_pop
0d33c     FF 1A 02 F6 | 	mov	arg05, result3
0d340     2C 4E 05 F1 | 	add	fp, #44
0d344     A7 FA 61 FC | 	wrlong	result1, fp
0d348     04 4E 05 F1 | 	add	fp, #4
0d34c     A7 FC 61 FC | 	wrlong	result2, fp
0d350     04 4E 05 F1 | 	add	fp, #4
0d354     A7 1A 62 FC | 	wrlong	arg05, fp
0d358     08 4E 85 F1 | 	sub	fp, #8
0d35c     A7 12 02 F6 | 	mov	arg01, fp
0d360     2C 4E 85 F1 | 	sub	fp, #44
0d364     9C 5A B0 FD | 	call	#_converttoint
0d368     10 4E 05 F1 | 	add	fp, #16
0d36c     A7 FA 61 FC | 	wrlong	result1, fp
0d370     10 4E 85 F1 | 	sub	fp, #16
0d374                 | '     t1=pop()
0d374                 | '     channel=converttoint(t1) 
0d374                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0d374     09 12 06 F6 | 	mov	arg01, #9
0d378     94 50 B1 FD | 	call	#__system__close
0d37c     09 1E 06 F6 | 	mov	local01, #9
0d380     68 01 00 FF 
0d384     32 12 06 F6 | 	mov	arg01, ##@LR__4975
0d388     38 4E 05 F1 | 	add	fp, #56
0d38c     A7 14 02 FB | 	rdlong	arg02, fp
0d390     38 4E 85 F1 | 	sub	fp, #56
0d394     10 01 B1 FD | 	call	#__system___string_concat
0d398     FD 14 02 F6 | 	mov	arg02, result1
0d39c     0F 13 02 F6 | 	mov	arg01, local01
0d3a0     00 16 06 F6 | 	mov	arg03, #0
0d3a4     A4 0C B1 FD | 	call	#__system___basic_open_string
0d3a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d3ac     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d3b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d3b4     7B 00 00 FF 
0d3b8     10 E5 05 F1 | 	add	objptr, ##63248
0d3bc     F2 FA 61 FC | 	wrlong	result1, objptr
0d3c0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d3c0     7B 00 00 FF 
0d3c4     10 E5 85 F1 | 	sub	objptr, ##63248
0d3c8     B0 00 90 AD |  if_e	jmp	#LR__1044
0d3cc     00 12 06 F6 | 	mov	arg01, #0
0d3d0     08 5A B1 FD | 	call	#__system___getiolock_0473
0d3d4     FD 12 02 F6 | 	mov	arg01, result1
0d3d8     70 00 B1 FD | 	call	#__system___lockmem
0d3dc     68 01 00 FF 
0d3e0     3F 14 06 F6 | 	mov	arg02, ##@LR__4976
0d3e4     00 12 06 F6 | 	mov	arg01, #0
0d3e8     00 16 06 F6 | 	mov	arg03, #0
0d3ec     60 0D B1 FD | 	call	#__system___basic_print_string
0d3f0     7B 00 00 FF 
0d3f4     10 E5 05 F1 | 	add	objptr, ##63248
0d3f8     F2 14 02 FB | 	rdlong	arg02, objptr
0d3fc     7B 00 00 FF 
0d400     10 E5 85 F1 | 	sub	objptr, ##63248
0d404     00 12 06 F6 | 	mov	arg01, #0
0d408     00 16 06 F6 | 	mov	arg03, #0
0d40c     0A 18 06 F6 | 	mov	arg04, #10
0d410     80 0D B1 FD | 	call	#__system___basic_print_integer
0d414     68 01 00 FF 
0d418     4D 14 06 F6 | 	mov	arg02, ##@LR__4977
0d41c     00 12 06 F6 | 	mov	arg01, #0
0d420     00 16 06 F6 | 	mov	arg03, #0
0d424     28 0D B1 FD | 	call	#__system___basic_print_string
0d428     00 1E 06 F6 | 	mov	local01, #0
0d42c     7B 00 00 FF 
0d430     10 E5 05 F1 | 	add	objptr, ##63248
0d434     F2 12 02 FB | 	rdlong	arg01, objptr
0d438     7B 00 00 FF 
0d43c     10 E5 85 F1 | 	sub	objptr, ##63248
0d440     98 26 B1 FD | 	call	#__system___strerror
0d444     FD 14 02 F6 | 	mov	arg02, result1
0d448     0F 13 02 F6 | 	mov	arg01, local01
0d44c     00 16 06 F6 | 	mov	arg03, #0
0d450     FC 0C B1 FD | 	call	#__system___basic_print_string
0d454     00 12 06 F6 | 	mov	arg01, #0
0d458     0A 14 06 F6 | 	mov	arg02, #10
0d45c     00 16 06 F6 | 	mov	arg03, #0
0d460     94 0C B1 FD | 	call	#__system___basic_print_char
0d464     00 12 06 F6 | 	mov	arg01, #0
0d468     70 59 B1 FD | 	call	#__system___getiolock_0473
0d46c     FD 00 68 FC | 	wrlong	#0, result1
0d470     09 12 06 F6 | 	mov	arg01, #9
0d474     98 4F B1 FD | 	call	#__system__close
0d478     8C 07 90 FD | 	jmp	#LR__1068
0d47c                 | LR__1044
0d47c                 | '     get #9,17,samplebuf(channel,0),1024
0d47c     10 4E 05 F1 | 	add	fp, #16
0d480     A7 16 02 FB | 	rdlong	arg03, fp
0d484     10 4E 85 F1 | 	sub	fp, #16
0d488     0B 16 66 F0 | 	shl	arg03, #11
0d48c     0C 00 00 FF 
0d490     D8 E4 05 F1 | 	add	objptr, ##6360
0d494     F2 16 02 F1 | 	add	arg03, objptr
0d498     09 12 06 F6 | 	mov	arg01, #9
0d49c     11 14 06 F6 | 	mov	arg02, #17
0d4a0     0A 18 C6 F9 | 	decod	arg04, #10
0d4a4     02 1A 06 F6 | 	mov	arg05, #2
0d4a8     0C 00 00 FF 
0d4ac     D8 E4 85 F1 | 	sub	objptr, ##6360
0d4b0     AC 0D B1 FD | 	call	#__system___basic_get
0d4b4                 | '     close #9
0d4b4     09 12 06 F6 | 	mov	arg01, #9
0d4b8     54 4F B1 FD | 	call	#__system__close
0d4bc                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d4bc                 | '     return
0d4bc     48 07 90 FD | 	jmp	#LR__1068
0d4c0                 | LR__1045
0d4c0                 | '     if wptr < ($80000 - 2048) then 
0d4c0     14 4E 05 F1 | 	add	fp, #20
0d4c4     A7 1E 02 FB | 	rdlong	local01, fp
0d4c8     14 4E 85 F1 | 	sub	fp, #20
0d4cc     FC 03 00 FF 
0d4d0     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d4d4     80 00 90 3D |  if_ae	jmp	#LR__1048
0d4d8                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d4d8     04 4E 05 F1 | 	add	fp, #4
0d4dc     A7 00 68 FC | 	wrlong	#0, fp
0d4e0     04 4E 85 F1 | 	sub	fp, #4
0d4e4     0C 00 00 FF 
0d4e8     D8 E4 05 F1 | 	add	objptr, ##6360
0d4ec     97 2E 48 FB | 	callpa	#(@LR__1047-@LR__1046)>>2,fcache_load_ptr_
0d4f0                 | LR__1046
0d4f0     10 4E 05 F1 | 	add	fp, #16
0d4f4     A7 1E 02 FB | 	rdlong	local01, fp
0d4f8     0B 1E 66 F0 | 	shl	local01, #11
0d4fc     F2 1E 02 F1 | 	add	local01, objptr
0d500     0C 4E 85 F1 | 	sub	fp, #12
0d504     A7 1A 02 FB | 	rdlong	arg05, fp
0d508     0D 19 02 F6 | 	mov	arg04, arg05
0d50c     01 18 66 F0 | 	shl	arg04, #1
0d510     0F 19 02 F1 | 	add	arg04, local01
0d514     10 4E 05 F1 | 	add	fp, #16
0d518     A7 12 02 FB | 	rdlong	arg01, fp
0d51c     01 1A 66 F0 | 	shl	arg05, #1
0d520     0D 13 02 F1 | 	add	arg01, arg05
0d524     09 FB E1 FA | 	rdword	result1, arg01
0d528     0C FB 51 FC | 	wrword	result1, arg04
0d52c     10 4E 85 F1 | 	sub	fp, #16
0d530     A7 1E 02 FB | 	rdlong	local01, fp
0d534     01 1E 06 F1 | 	add	local01, #1
0d538     A7 1E 62 FC | 	wrlong	local01, fp
0d53c     04 4E 85 F1 | 	sub	fp, #4
0d540     02 00 00 FF 
0d544     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d548     A4 FF 9F CD |  if_b	jmp	#LR__1046
0d54c                 | LR__1047
0d54c     0C 00 00 FF 
0d550     D8 E4 85 F1 | 	sub	objptr, ##6360
0d554     B0 06 90 FD | 	jmp	#LR__1068
0d558                 | LR__1048
0d558                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d558     04 4E 05 F1 | 	add	fp, #4
0d55c     A7 00 68 FC | 	wrlong	#0, fp
0d560     04 4E 85 F1 | 	sub	fp, #4
0d564                 | LR__1049
0d564     10 4E 05 F1 | 	add	fp, #16
0d568     A7 1A 02 FB | 	rdlong	arg05, fp
0d56c     0B 1A 66 F0 | 	shl	arg05, #11
0d570     0C 00 00 FF 
0d574     D8 E4 05 F1 | 	add	objptr, ##6360
0d578     F2 1A 02 F1 | 	add	arg05, objptr
0d57c     0C 4E 85 F1 | 	sub	fp, #12
0d580     A7 18 02 FB | 	rdlong	arg04, fp
0d584     0C 21 02 F6 | 	mov	local02, arg04
0d588     01 20 66 F0 | 	shl	local02, #1
0d58c     0D 21 02 F1 | 	add	local02, arg05
0d590     10 4E 05 F1 | 	add	fp, #16
0d594     A7 12 02 FB | 	rdlong	arg01, fp
0d598     14 4E 85 F1 | 	sub	fp, #20
0d59c     01 18 66 F0 | 	shl	arg04, #1
0d5a0     0C 13 02 F1 | 	add	arg01, arg04
0d5a4     0C 00 00 FF 
0d5a8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d5ac     48 BD B0 FD | 	call	#_psdpeek
0d5b0     10 FB 51 FC | 	wrword	result1, local02
0d5b4     04 4E 05 F1 | 	add	fp, #4
0d5b8     A7 22 02 FB | 	rdlong	local03, fp
0d5bc     01 22 06 F1 | 	add	local03, #1
0d5c0     A7 22 62 FC | 	wrlong	local03, fp
0d5c4     04 4E 85 F1 | 	sub	fp, #4
0d5c8     02 00 00 FF 
0d5cc     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d5d0     90 FF 9F CD |  if_b	jmp	#LR__1049
0d5d4                 | '     return 
0d5d4     30 06 90 FD | 	jmp	#LR__1068
0d5d8                 | '   
0d5d8                 | '   par=converttoint(t1)  : print par
0d5d8                 | '   t1=pop()
0d5d8                 | '   channel=converttoint(t1)  
0d5d8                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d5d8                 | LR__1050
0d5d8     10 4E 05 F1 | 	add	fp, #16
0d5dc     A7 22 02 FB | 	rdlong	local03, fp
0d5e0     0B 22 66 F0 | 	shl	local03, #11
0d5e4     0C 00 00 FF 
0d5e8     D8 E4 05 F1 | 	add	objptr, ##6360
0d5ec     F2 22 02 F1 | 	add	local03, objptr
0d5f0     0C 4E 85 F1 | 	sub	fp, #12
0d5f4     A7 12 02 FB | 	rdlong	arg01, fp
0d5f8     09 21 02 F6 | 	mov	local02, arg01
0d5fc     01 20 66 F0 | 	shl	local02, #1
0d600     11 21 02 F1 | 	add	local02, local03
0d604     04 4E 85 F1 | 	sub	fp, #4
0d608     0C 00 00 FF 
0d60c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d610     09 13 52 F6 | 	abs	arg01, arg01 wc
0d614     1F 24 C6 C9 |  if_b	decod	local04, #31
0d618     00 24 06 36 |  if_ae	mov	local04, #0
0d61c     A4 25 B1 FD | 	call	#__system___float_fromuns
0d620     12 FB 61 F5 | 	xor	result1, local04
0d624     FD 14 02 F6 | 	mov	arg02, result1
0d628     87 E4 1D FF 
0d62c     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d630     94 29 B1 FD | 	call	#__system___float_mul
0d634     FD 12 02 F6 | 	mov	arg01, result1
0d638     C8 32 B1 FD | 	call	#__system____builtin_sinf
0d63c     FD 14 02 F6 | 	mov	arg02, result1
0d640     58 7F 23 FF 
0d644     00 12 06 F6 | 	mov	arg01, ##1191096320
0d648     7C 29 B1 FD | 	call	#__system___float_mul
0d64c     FD 12 02 F6 | 	mov	arg01, result1
0d650     01 14 06 F6 | 	mov	arg02, #1
0d654     38 2E B1 FD | 	call	#__system___float_tointeger
0d658     10 FB 51 FC | 	wrword	result1, local02
0d65c     04 4E 05 F1 | 	add	fp, #4
0d660     A7 22 02 FB | 	rdlong	local03, fp
0d664     01 22 06 F1 | 	add	local03, #1
0d668     A7 22 62 FC | 	wrlong	local03, fp
0d66c     04 4E 85 F1 | 	sub	fp, #4
0d670     02 00 00 FF 
0d674     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d678     5C FF 9F CD |  if_b	jmp	#LR__1050
0d67c                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d67c                 | '   return
0d67c     88 05 90 FD | 	jmp	#LR__1068
0d680                 | LR__1051
0d680                 | ' for i=0 to 15 : harm(i)=0: next i  
0d680     04 4E 05 F1 | 	add	fp, #4
0d684     A7 00 68 FC | 	wrlong	#0, fp
0d688     97 16 48 FB | 	callpa	#(@LR__1053-@LR__1052)>>2,fcache_load_ptr_
0d68c                 | LR__1052
0d68c     A7 22 02 FB | 	rdlong	local03, fp
0d690     02 22 66 F0 | 	shl	local03, #2
0d694     38 4E 05 F1 | 	add	fp, #56
0d698     A7 22 02 F1 | 	add	local03, fp
0d69c     11 01 68 FC | 	wrlong	#0, local03
0d6a0     38 4E 85 F1 | 	sub	fp, #56
0d6a4     A7 22 02 FB | 	rdlong	local03, fp
0d6a8     01 22 06 F1 | 	add	local03, #1
0d6ac     A7 22 62 FC | 	wrlong	local03, fp
0d6b0     10 22 56 F2 | 	cmps	local03, #16 wc
0d6b4     D4 FF 9F CD |  if_b	jmp	#LR__1052
0d6b8                 | LR__1053
0d6b8     04 4E 85 F1 | 	sub	fp, #4
0d6bc                 | ' for i=numpar to 2 step -1 
0d6bc     A7 1E 02 FB | 	rdlong	local01, fp
0d6c0     04 4E 05 F1 | 	add	fp, #4
0d6c4     A7 1E 62 FC | 	wrlong	local01, fp
0d6c8     04 4E 85 F1 | 	sub	fp, #4
0d6cc                 | LR__1054
0d6cc     DC CA BF FD | 	call	#_pop
0d6d0     2C 4E 05 F1 | 	add	fp, #44
0d6d4     A7 FA 61 FC | 	wrlong	result1, fp
0d6d8     04 4E 05 F1 | 	add	fp, #4
0d6dc     A7 FC 61 FC | 	wrlong	result2, fp
0d6e0     04 4E 05 F1 | 	add	fp, #4
0d6e4     A7 FE 61 FC | 	wrlong	result3, fp
0d6e8     30 4E 85 F1 | 	sub	fp, #48
0d6ec     A7 22 02 FB | 	rdlong	local03, fp
0d6f0     02 22 86 F1 | 	sub	local03, #2
0d6f4     02 22 66 F0 | 	shl	local03, #2
0d6f8     38 4E 05 F1 | 	add	fp, #56
0d6fc     A7 22 02 F1 | 	add	local03, fp
0d700     10 4E 85 F1 | 	sub	fp, #16
0d704     A7 12 02 F6 | 	mov	arg01, fp
0d708     2C 4E 85 F1 | 	sub	fp, #44
0d70c     A0 57 B0 FD | 	call	#_converttofloat
0d710     11 FB 61 FC | 	wrlong	result1, local03
0d714     04 4E 05 F1 | 	add	fp, #4
0d718     A7 22 02 FB | 	rdlong	local03, fp
0d71c     01 22 86 F1 | 	sub	local03, #1
0d720     A7 22 62 FC | 	wrlong	local03, fp
0d724     04 4E 85 F1 | 	sub	fp, #4
0d728     02 22 56 F2 | 	cmps	local03, #2 wc
0d72c     9C FF 9F 3D |  if_ae	jmp	#LR__1054
0d730     78 CA BF FD | 	call	#_pop
0d734     FF 1E 02 F6 | 	mov	local01, result3
0d738     2C 4E 05 F1 | 	add	fp, #44
0d73c     A7 FA 61 FC | 	wrlong	result1, fp
0d740     04 4E 05 F1 | 	add	fp, #4
0d744     A7 FC 61 FC | 	wrlong	result2, fp
0d748     04 4E 05 F1 | 	add	fp, #4
0d74c     A7 1E 62 FC | 	wrlong	local01, fp
0d750     08 4E 85 F1 | 	sub	fp, #8
0d754     A7 12 02 F6 | 	mov	arg01, fp
0d758     2C 4E 85 F1 | 	sub	fp, #44
0d75c     A4 56 B0 FD | 	call	#_converttoint
0d760     FD 1E 02 F6 | 	mov	local01, result1
0d764     10 4E 05 F1 | 	add	fp, #16
0d768     A7 1E 62 FC | 	wrlong	local01, fp
0d76c     10 4E 85 F1 | 	sub	fp, #16
0d770                 | ' t1=pop()
0d770                 | ' channel=converttoint(t1) : print channel
0d770     00 12 06 F6 | 	mov	arg01, #0
0d774     64 56 B1 FD | 	call	#__system___getiolock_0473
0d778     FD 12 02 F6 | 	mov	arg01, result1
0d77c     CC FC B0 FD | 	call	#__system___lockmem
0d780     10 4E 05 F1 | 	add	fp, #16
0d784     A7 14 02 FB | 	rdlong	arg02, fp
0d788     10 4E 85 F1 | 	sub	fp, #16
0d78c     00 12 06 F6 | 	mov	arg01, #0
0d790     00 16 06 F6 | 	mov	arg03, #0
0d794     0A 18 06 F6 | 	mov	arg04, #10
0d798     F8 09 B1 FD | 	call	#__system___basic_print_integer
0d79c     00 12 06 F6 | 	mov	arg01, #0
0d7a0     0A 14 06 F6 | 	mov	arg02, #10
0d7a4     00 16 06 F6 | 	mov	arg03, #0
0d7a8     4C 09 B1 FD | 	call	#__system___basic_print_char
0d7ac     00 12 06 F6 | 	mov	arg01, #0
0d7b0     28 56 B1 FD | 	call	#__system___getiolock_0473
0d7b4     FD 00 68 FC | 	wrlong	#0, result1
0d7b8                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0d7b8     08 4E 05 F1 | 	add	fp, #8
0d7bc     02 00 80 FF 
0d7c0     A7 00 68 FC | 	wrlong	##1024, fp
0d7c4     08 4E 85 F1 | 	sub	fp, #8
0d7c8     0C 00 00 FF 
0d7cc     D8 E4 05 F1 | 	add	objptr, ##6360
0d7d0     97 18 48 FB | 	callpa	#(@LR__1057-@LR__1055)>>2,fcache_load_ptr_
0d7d4                 | LR__1055
0d7d4     02 00 00 FF 
0d7d8     00 14 DC FC | 	rep	@LR__1058, ##1024
0d7dc                 | LR__1056
0d7dc     10 4E 05 F1 | 	add	fp, #16
0d7e0     A7 20 02 FB | 	rdlong	local02, fp
0d7e4     0B 20 66 F0 | 	shl	local02, #11
0d7e8     F2 20 02 F1 | 	add	local02, objptr
0d7ec     0C 4E 85 F1 | 	sub	fp, #12
0d7f0     A7 22 02 FB | 	rdlong	local03, fp
0d7f4     04 4E 85 F1 | 	sub	fp, #4
0d7f8     01 22 66 F0 | 	shl	local03, #1
0d7fc     10 23 02 F1 | 	add	local03, local02
0d800     11 01 58 FC | 	wrword	#0, local03
0d804                 | LR__1057
0d804                 | LR__1058
0d804     0C 00 00 FF 
0d808     D8 E4 85 F1 | 	sub	objptr, ##6360
0d80c     20 4E 05 F1 | 	add	fp, #32
0d810     A7 00 68 FC | 	wrlong	#0, fp
0d814                 | ' max=0
0d814                 | ' if harm(0)<0 then
0d814     1C 4E 05 F1 | 	add	fp, #28
0d818     A7 12 02 FB | 	rdlong	arg01, fp
0d81c     3C 4E 85 F1 | 	sub	fp, #60
0d820     00 14 06 F6 | 	mov	arg02, #0
0d824     01 16 06 F6 | 	mov	arg03, #1
0d828     D0 2B B1 FD | 	call	#__system___float_cmp
0d82c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d830     04 01 90 3D |  if_ae	jmp	#LR__1061
0d834     3C 4E 05 F1 | 	add	fp, #60
0d838     A7 FA 01 FB | 	rdlong	result1, fp
0d83c     1F FA 05 F4 | 	bitl	result1, #31
0d840     24 4E 85 F1 | 	sub	fp, #36
0d844     A7 FA 61 FC | 	wrlong	result1, fp
0d848     28 4E 05 F1 | 	add	fp, #40
0d84c     A7 FA 01 FB | 	rdlong	result1, fp
0d850     1F FA 05 F4 | 	bitl	result1, #31
0d854     24 4E 85 F1 | 	sub	fp, #36
0d858     A7 FA 61 FC | 	wrlong	result1, fp
0d85c     20 4E 05 F1 | 	add	fp, #32
0d860     00 C0 9F FF 
0d864     A7 00 68 FC | 	wrlong	##1065353216, fp
0d868     24 4E 85 F1 | 	sub	fp, #36
0d86c     A7 1E 02 FB | 	rdlong	local01, fp
0d870     28 4E 05 F1 | 	add	fp, #40
0d874     A7 1E 62 FC | 	wrlong	local01, fp
0d878     24 4E 85 F1 | 	sub	fp, #36
0d87c     A7 1E 02 FB | 	rdlong	local01, fp
0d880     28 4E 05 F1 | 	add	fp, #40
0d884     A7 1E 62 FC | 	wrlong	local01, fp
0d888                 | '   harm(0)=1
0d888                 | '   harm(1)=even
0d888                 | '   harm(2)=odd
0d888                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0d888     40 4E 85 F1 | 	sub	fp, #64
0d88c     A7 06 68 FC | 	wrlong	#3, fp
0d890                 | LR__1059
0d890     A7 22 02 FB | 	rdlong	local03, fp
0d894     11 27 02 F6 | 	mov	local05, local03
0d898     02 26 66 F0 | 	shl	local05, #2
0d89c     38 4E 05 F1 | 	add	fp, #56
0d8a0     A7 26 02 F1 | 	add	local05, fp
0d8a4     02 22 86 F1 | 	sub	local03, #2
0d8a8     02 22 66 F0 | 	shl	local03, #2
0d8ac     A7 22 02 F1 | 	add	local03, fp
0d8b0     11 13 02 FB | 	rdlong	arg01, local03
0d8b4     24 4E 85 F1 | 	sub	fp, #36
0d8b8     A7 14 02 FB | 	rdlong	arg02, fp
0d8bc     18 4E 85 F1 | 	sub	fp, #24
0d8c0     04 27 B1 FD | 	call	#__system___float_mul
0d8c4     13 FB 61 FC | 	wrlong	result1, local05
0d8c8     04 4E 05 F1 | 	add	fp, #4
0d8cc     A7 22 02 FB | 	rdlong	local03, fp
0d8d0     02 22 06 F1 | 	add	local03, #2
0d8d4     A7 22 62 FC | 	wrlong	local03, fp
0d8d8     10 22 56 F2 | 	cmps	local03, #16 wc
0d8dc     B0 FF 9F CD |  if_b	jmp	#LR__1059
0d8e0                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0d8e0     A7 08 68 FC | 	wrlong	#4, fp
0d8e4                 | LR__1060
0d8e4     A7 22 02 FB | 	rdlong	local03, fp
0d8e8     11 27 02 F6 | 	mov	local05, local03
0d8ec     02 26 66 F0 | 	shl	local05, #2
0d8f0     38 4E 05 F1 | 	add	fp, #56
0d8f4     A7 26 02 F1 | 	add	local05, fp
0d8f8     02 22 86 F1 | 	sub	local03, #2
0d8fc     02 22 66 F0 | 	shl	local03, #2
0d900     A7 22 02 F1 | 	add	local03, fp
0d904     11 13 02 FB | 	rdlong	arg01, local03
0d908     20 4E 85 F1 | 	sub	fp, #32
0d90c     A7 14 02 FB | 	rdlong	arg02, fp
0d910     1C 4E 85 F1 | 	sub	fp, #28
0d914     B0 26 B1 FD | 	call	#__system___float_mul
0d918     13 FB 61 FC | 	wrlong	result1, local05
0d91c     04 4E 05 F1 | 	add	fp, #4
0d920     A7 22 02 FB | 	rdlong	local03, fp
0d924     02 22 06 F1 | 	add	local03, #2
0d928     A7 22 62 FC | 	wrlong	local03, fp
0d92c     0F 22 56 F2 | 	cmps	local03, #15 wc
0d930     B0 FF 9F CD |  if_b	jmp	#LR__1060
0d934     04 4E 85 F1 | 	sub	fp, #4
0d938                 | LR__1061
0d938                 | ' if harm(0)>=0 then ' synthesize with harmonics
0d938     3C 4E 05 F1 | 	add	fp, #60
0d93c     A7 12 02 FB | 	rdlong	arg01, fp
0d940     3C 4E 85 F1 | 	sub	fp, #60
0d944     00 14 06 F6 | 	mov	arg02, #0
0d948     01 16 66 F6 | 	neg	arg03, #1
0d94c     AC 2A B1 FD | 	call	#__system___float_cmp
0d950     00 FA 55 F2 | 	cmps	result1, #0 wc
0d954     B0 02 90 CD |  if_b	jmp	#LR__1067
0d958                 | '   for i=0 to 1023
0d958     04 4E 05 F1 | 	add	fp, #4
0d95c     A7 00 68 FC | 	wrlong	#0, fp
0d960     04 4E 85 F1 | 	sub	fp, #4
0d964                 | LR__1062
0d964     24 4E 05 F1 | 	add	fp, #36
0d968     A7 00 68 FC | 	wrlong	#0, fp
0d96c                 | '     spl=0
0d96c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0d96c     1C 4E 85 F1 | 	sub	fp, #28
0d970     A7 00 68 FC | 	wrlong	#0, fp
0d974                 | LR__1063
0d974     A7 26 02 FB | 	rdlong	local05, fp
0d978     02 26 66 F0 | 	shl	local05, #2
0d97c     34 4E 05 F1 | 	add	fp, #52
0d980     A7 26 02 F1 | 	add	local05, fp
0d984     13 23 02 FB | 	rdlong	local03, local05
0d988     87 E4 1D FF 
0d98c     DB 27 06 F6 | 	mov	local05, ##1003032539
0d990     38 4E 85 F1 | 	sub	fp, #56
0d994     A7 12 02 FB | 	rdlong	arg01, fp
0d998     04 4E 85 F1 | 	sub	fp, #4
0d99c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9a0     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9a4     00 24 06 36 |  if_ae	mov	local04, #0
0d9a8     18 22 B1 FD | 	call	#__system___float_fromuns
0d9ac     12 FB 61 F5 | 	xor	result1, local04
0d9b0     FD 14 02 F6 | 	mov	arg02, result1
0d9b4     13 13 02 F6 | 	mov	arg01, local05
0d9b8     0C 26 B1 FD | 	call	#__system___float_mul
0d9bc     FD 26 02 F6 | 	mov	local05, result1
0d9c0     08 4E 05 F1 | 	add	fp, #8
0d9c4     A7 12 02 FB | 	rdlong	arg01, fp
0d9c8     08 4E 85 F1 | 	sub	fp, #8
0d9cc     01 12 06 F1 | 	add	arg01, #1
0d9d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9d8     00 24 06 36 |  if_ae	mov	local04, #0
0d9dc     E4 21 B1 FD | 	call	#__system___float_fromuns
0d9e0     12 FB 61 F5 | 	xor	result1, local04
0d9e4     FD 14 02 F6 | 	mov	arg02, result1
0d9e8     13 13 02 F6 | 	mov	arg01, local05
0d9ec     D8 25 B1 FD | 	call	#__system___float_mul
0d9f0     FD 12 02 F6 | 	mov	arg01, result1
0d9f4     0C 2F B1 FD | 	call	#__system____builtin_sinf
0d9f8     FD 14 02 F6 | 	mov	arg02, result1
0d9fc     11 13 02 F6 | 	mov	arg01, local03
0da00     C4 25 B1 FD | 	call	#__system___float_mul
0da04     FD 14 02 F6 | 	mov	arg02, result1
0da08     24 4E 05 F1 | 	add	fp, #36
0da0c     A7 12 02 FB | 	rdlong	arg01, fp
0da10     24 4E 85 F1 | 	sub	fp, #36
0da14     E0 21 B1 FD | 	call	#__system___float_add
0da18     24 4E 05 F1 | 	add	fp, #36
0da1c     A7 FA 61 FC | 	wrlong	result1, fp
0da20     1C 4E 85 F1 | 	sub	fp, #28
0da24     A7 16 02 FB | 	rdlong	arg03, fp
0da28     01 16 06 F1 | 	add	arg03, #1
0da2c     A7 16 62 FC | 	wrlong	arg03, fp
0da30     10 16 56 F2 | 	cmps	arg03, #16 wc
0da34     3C FF 9F CD |  if_b	jmp	#LR__1063
0da38                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0da38     1C 4E 05 F1 | 	add	fp, #28
0da3c     A7 12 02 FB | 	rdlong	arg01, fp
0da40     1F 12 06 F4 | 	bitl	arg01, #31
0da44     04 4E 85 F1 | 	sub	fp, #4
0da48     A7 14 02 FB | 	rdlong	arg02, fp
0da4c     20 4E 85 F1 | 	sub	fp, #32
0da50     01 16 66 F6 | 	neg	arg03, #1
0da54     A4 29 B1 FD | 	call	#__system___float_cmp
0da58     01 FA 55 F2 | 	cmps	result1, #1 wc
0da5c     18 00 90 CD |  if_b	jmp	#LR__1064
0da60     24 4E 05 F1 | 	add	fp, #36
0da64     A7 FA 01 FB | 	rdlong	result1, fp
0da68     1F FA 05 F4 | 	bitl	result1, #31
0da6c     04 4E 85 F1 | 	sub	fp, #4
0da70     A7 FA 61 FC | 	wrlong	result1, fp
0da74     20 4E 85 F1 | 	sub	fp, #32
0da78                 | LR__1064
0da78     04 4E 05 F1 | 	add	fp, #4
0da7c     A7 22 02 FB | 	rdlong	local03, fp
0da80     01 22 06 F1 | 	add	local03, #1
0da84     A7 22 62 FC | 	wrlong	local03, fp
0da88     04 4E 85 F1 | 	sub	fp, #4
0da8c     02 00 00 FF 
0da90     00 22 56 F2 | 	cmps	local03, ##1024 wc
0da94     CC FE 9F CD |  if_b	jmp	#LR__1062
0da98                 | '   for i=0 to 1023
0da98     04 4E 05 F1 | 	add	fp, #4
0da9c     A7 00 68 FC | 	wrlong	#0, fp
0daa0     04 4E 85 F1 | 	sub	fp, #4
0daa4                 | LR__1065
0daa4     24 4E 05 F1 | 	add	fp, #36
0daa8     A7 00 68 FC | 	wrlong	#0, fp
0daac                 | '     spl=0
0daac                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0daac     1C 4E 85 F1 | 	sub	fp, #28
0dab0     A7 00 68 FC | 	wrlong	#0, fp
0dab4                 | LR__1066
0dab4     A7 26 02 FB | 	rdlong	local05, fp
0dab8     02 26 66 F0 | 	shl	local05, #2
0dabc     34 4E 05 F1 | 	add	fp, #52
0dac0     A7 26 02 F1 | 	add	local05, fp
0dac4     13 27 02 FB | 	rdlong	local05, local05
0dac8     1C 4E 85 F1 | 	sub	fp, #28
0dacc     A7 14 02 FB | 	rdlong	arg02, fp
0dad0     20 4E 85 F1 | 	sub	fp, #32
0dad4     58 7F 23 FF 
0dad8     00 12 06 F6 | 	mov	arg01, ##1191096320
0dadc     EC 26 B1 FD | 	call	#__system___float_div
0dae0     FD 14 02 F6 | 	mov	arg02, result1
0dae4     13 13 02 F6 | 	mov	arg01, local05
0dae8     DC 24 B1 FD | 	call	#__system___float_mul
0daec     FD 22 02 F6 | 	mov	local03, result1
0daf0     87 E4 1D FF 
0daf4     DB 27 06 F6 | 	mov	local05, ##1003032539
0daf8     04 4E 05 F1 | 	add	fp, #4
0dafc     A7 12 02 FB | 	rdlong	arg01, fp
0db00     04 4E 85 F1 | 	sub	fp, #4
0db04     09 13 52 F6 | 	abs	arg01, arg01 wc
0db08     1F 24 C6 C9 |  if_b	decod	local04, #31
0db0c     00 24 06 36 |  if_ae	mov	local04, #0
0db10     B0 20 B1 FD | 	call	#__system___float_fromuns
0db14     12 FB 61 F5 | 	xor	result1, local04
0db18     FD 14 02 F6 | 	mov	arg02, result1
0db1c     13 13 02 F6 | 	mov	arg01, local05
0db20     A4 24 B1 FD | 	call	#__system___float_mul
0db24     FD 26 02 F6 | 	mov	local05, result1
0db28     08 4E 05 F1 | 	add	fp, #8
0db2c     A7 12 02 FB | 	rdlong	arg01, fp
0db30     08 4E 85 F1 | 	sub	fp, #8
0db34     01 12 06 F1 | 	add	arg01, #1
0db38     09 13 52 F6 | 	abs	arg01, arg01 wc
0db3c     1F 24 C6 C9 |  if_b	decod	local04, #31
0db40     00 24 06 36 |  if_ae	mov	local04, #0
0db44     7C 20 B1 FD | 	call	#__system___float_fromuns
0db48     12 FB 61 F5 | 	xor	result1, local04
0db4c     FD 14 02 F6 | 	mov	arg02, result1
0db50     13 13 02 F6 | 	mov	arg01, local05
0db54     70 24 B1 FD | 	call	#__system___float_mul
0db58     FD 12 02 F6 | 	mov	arg01, result1
0db5c     A4 2D B1 FD | 	call	#__system____builtin_sinf
0db60     FD 14 02 F6 | 	mov	arg02, result1
0db64     11 13 02 F6 | 	mov	arg01, local03
0db68     5C 24 B1 FD | 	call	#__system___float_mul
0db6c     FD 14 02 F6 | 	mov	arg02, result1
0db70     24 4E 05 F1 | 	add	fp, #36
0db74     A7 12 02 FB | 	rdlong	arg01, fp
0db78     24 4E 85 F1 | 	sub	fp, #36
0db7c     78 20 B1 FD | 	call	#__system___float_add
0db80     24 4E 05 F1 | 	add	fp, #36
0db84     A7 FA 61 FC | 	wrlong	result1, fp
0db88     1C 4E 85 F1 | 	sub	fp, #28
0db8c     A7 26 02 FB | 	rdlong	local05, fp
0db90     01 26 06 F1 | 	add	local05, #1
0db94     A7 26 62 FC | 	wrlong	local05, fp
0db98     10 26 56 F2 | 	cmps	local05, #16 wc
0db9c     14 FF 9F CD |  if_b	jmp	#LR__1066
0dba0     08 4E 05 F1 | 	add	fp, #8
0dba4     A7 26 02 FB | 	rdlong	local05, fp
0dba8     0B 26 66 F0 | 	shl	local05, #11
0dbac     0C 00 00 FF 
0dbb0     D8 E4 05 F1 | 	add	objptr, ##6360
0dbb4     F2 26 02 F1 | 	add	local05, objptr
0dbb8     0C 4E 85 F1 | 	sub	fp, #12
0dbbc     A7 20 02 FB | 	rdlong	local02, fp
0dbc0     01 20 66 F0 | 	shl	local02, #1
0dbc4     13 21 02 F1 | 	add	local02, local05
0dbc8     20 4E 05 F1 | 	add	fp, #32
0dbcc     A7 12 02 FB | 	rdlong	arg01, fp
0dbd0     24 4E 85 F1 | 	sub	fp, #36
0dbd4     0C 00 00 FF 
0dbd8     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbdc     01 14 06 F6 | 	mov	arg02, #1
0dbe0     AC 28 B1 FD | 	call	#__system___float_tointeger
0dbe4     10 FB 51 FC | 	wrword	result1, local02
0dbe8     04 4E 05 F1 | 	add	fp, #4
0dbec     A7 22 02 FB | 	rdlong	local03, fp
0dbf0     01 22 06 F1 | 	add	local03, #1
0dbf4     A7 22 62 FC | 	wrlong	local03, fp
0dbf8     04 4E 85 F1 | 	sub	fp, #4
0dbfc     02 00 00 FF 
0dc00     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dc04     9C FE 9F CD |  if_b	jmp	#LR__1065
0dc08                 | LR__1067
0dc08                 | LR__1068
0dc08     A7 F0 03 F6 | 	mov	ptra, fp
0dc0c     B2 00 A0 FD | 	call	#popregs_
0dc10                 | _do_defsnd_ret
0dc10     2D 00 64 FD | 	ret
0dc14                 | 
0dc14                 | ' 
0dc14                 | ' ' ---------------  List the program. 
0dc14                 | ' 
0dc14                 | ' sub do_list
0dc14                 | _do_list
0dc14     02 4A 05 F6 | 	mov	COUNT_, #2
0dc18     A8 00 A0 FD | 	call	#pushregs_
0dc1c     B8 F0 07 F1 | 	add	ptra, #184
0dc20     04 4E 05 F1 | 	add	fp, #4
0dc24     A7 00 68 FC | 	wrlong	#0, fp
0dc28     04 4E 05 F1 | 	add	fp, #4
0dc2c     FF FF BF FF 
0dc30     A7 FE 6B FC | 	wrlong	##2147483647, fp
0dc34     08 4E 85 F1 | 	sub	fp, #8
0dc38     6A 00 00 FF 
0dc3c     70 E4 05 F1 | 	add	objptr, ##54384
0dc40     F2 1E 02 FB | 	rdlong	local01, objptr
0dc44     0F 17 02 F6 | 	mov	arg03, local01
0dc48     01 16 66 F0 | 	shl	arg03, #1
0dc4c     0F 17 02 F1 | 	add	arg03, local01
0dc50     02 16 66 F0 | 	shl	arg03, #2
0dc54     03 00 00 FF 
0dc58     04 E4 85 F1 | 	sub	objptr, ##1540
0dc5c     F2 16 02 F1 | 	add	arg03, objptr
0dc60     0B 17 02 FB | 	rdlong	arg03, arg03
0dc64     A7 16 62 FC | 	wrlong	arg03, fp
0dc68                 | ' 
0dc68                 | ' startline=0 : endline=$7FFFFFFF
0dc68                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc68                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0dc68     01 16 0E F2 | 	cmp	arg03, #1 wz
0dc6c     67 00 00 FF 
0dc70     6C E4 85 F1 | 	sub	objptr, ##52844
0dc74     3C 00 90 5D |  if_ne	jmp	#LR__1070
0dc78     30 C5 BF FD | 	call	#_pop
0dc7c     FF 1E 02 F6 | 	mov	local01, result3
0dc80     0C 4E 05 F1 | 	add	fp, #12
0dc84     A7 FA 61 FC | 	wrlong	result1, fp
0dc88     04 4E 05 F1 | 	add	fp, #4
0dc8c     A7 FC 61 FC | 	wrlong	result2, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 1E 62 FC | 	wrlong	local01, fp
0dc98     08 4E 85 F1 | 	sub	fp, #8
0dc9c     A7 12 02 F6 | 	mov	arg01, fp
0dca0     0C 4E 85 F1 | 	sub	fp, #12
0dca4     5C 51 B0 FD | 	call	#_converttoint
0dca8     04 4E 05 F1 | 	add	fp, #4
0dcac     A7 FA 61 FC | 	wrlong	result1, fp
0dcb0     04 4E 85 F1 | 	sub	fp, #4
0dcb4                 | LR__1070
0dcb4                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0dcb4     A7 16 02 FB | 	rdlong	arg03, fp
0dcb8     02 16 0E F2 | 	cmp	arg03, #2 wz
0dcbc     7C 00 90 5D |  if_ne	jmp	#LR__1071
0dcc0     E8 C4 BF FD | 	call	#_pop
0dcc4     FF 1E 02 F6 | 	mov	local01, result3
0dcc8     0C 4E 05 F1 | 	add	fp, #12
0dccc     A7 FA 61 FC | 	wrlong	result1, fp
0dcd0     04 4E 05 F1 | 	add	fp, #4
0dcd4     A7 FC 61 FC | 	wrlong	result2, fp
0dcd8     04 4E 05 F1 | 	add	fp, #4
0dcdc     A7 1E 62 FC | 	wrlong	local01, fp
0dce0     08 4E 85 F1 | 	sub	fp, #8
0dce4     A7 12 02 F6 | 	mov	arg01, fp
0dce8     0C 4E 85 F1 | 	sub	fp, #12
0dcec     14 51 B0 FD | 	call	#_converttoint
0dcf0     FD 1E 02 F6 | 	mov	local01, result1
0dcf4     08 4E 05 F1 | 	add	fp, #8
0dcf8     A7 1E 62 FC | 	wrlong	local01, fp
0dcfc     08 4E 85 F1 | 	sub	fp, #8
0dd00     A8 C4 BF FD | 	call	#_pop
0dd04     FF 1E 02 F6 | 	mov	local01, result3
0dd08     0C 4E 05 F1 | 	add	fp, #12
0dd0c     A7 FA 61 FC | 	wrlong	result1, fp
0dd10     04 4E 05 F1 | 	add	fp, #4
0dd14     A7 FC 61 FC | 	wrlong	result2, fp
0dd18     04 4E 05 F1 | 	add	fp, #4
0dd1c     A7 1E 62 FC | 	wrlong	local01, fp
0dd20     08 4E 85 F1 | 	sub	fp, #8
0dd24     A7 12 02 F6 | 	mov	arg01, fp
0dd28     0C 4E 85 F1 | 	sub	fp, #12
0dd2c     D4 50 B0 FD | 	call	#_converttoint
0dd30     04 4E 05 F1 | 	add	fp, #4
0dd34     A7 FA 61 FC | 	wrlong	result1, fp
0dd38     04 4E 85 F1 | 	sub	fp, #4
0dd3c                 | LR__1071
0dd3c                 | ' 
0dd3c                 | ' 
0dd3c                 | ' print
0dd3c     00 12 06 F6 | 	mov	arg01, #0
0dd40     98 50 B1 FD | 	call	#__system___getiolock_0473
0dd44     FD 12 02 F6 | 	mov	arg01, result1
0dd48     00 F7 B0 FD | 	call	#__system___lockmem
0dd4c     00 12 06 F6 | 	mov	arg01, #0
0dd50     0A 14 06 F6 | 	mov	arg02, #10
0dd54     00 16 06 F6 | 	mov	arg03, #0
0dd58     9C 03 B1 FD | 	call	#__system___basic_print_char
0dd5c     00 12 06 F6 | 	mov	arg01, #0
0dd60     78 50 B1 FD | 	call	#__system___getiolock_0473
0dd64     FD 00 68 FC | 	wrlong	#0, result1
0dd68     6A 00 00 FF 
0dd6c     74 E4 05 F1 | 	add	objptr, ##54388
0dd70     F2 20 02 FB | 	rdlong	local02, objptr
0dd74     11 00 00 FF 
0dd78     94 E4 05 F1 | 	add	objptr, ##8852
0dd7c     F2 20 62 FC | 	wrlong	local02, objptr
0dd80     7B 00 00 FF 
0dd84     08 E5 85 F1 | 	sub	objptr, ##63240
0dd88                 | ' do 
0dd88                 | LR__1072
0dd88     20 4E 05 F1 | 	add	fp, #32
0dd8c     A7 12 02 F6 | 	mov	arg01, fp
0dd90     20 4E 85 F1 | 	sub	fp, #32
0dd94     7B 00 00 FF 
0dd98     08 E5 05 F1 | 	add	objptr, ##63240
0dd9c     F2 14 02 FB | 	rdlong	arg02, objptr
0dda0     18 16 06 F6 | 	mov	arg03, #24
0dda4     70 00 00 FF 
0dda8     3C E4 85 F1 | 	sub	objptr, ##57404
0ddac     98 EA B0 FD | 	call	#_psram_spin2_read1
0ddb0     0B 00 00 FF 
0ddb4     CC E4 85 F1 | 	sub	objptr, ##5836
0ddb8                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0ddb8                 | '   
0ddb8                 | '   if header(0)<> $FFFFFFFF then
0ddb8     20 4E 05 F1 | 	add	fp, #32
0ddbc     A7 20 02 FB | 	rdlong	local02, fp
0ddc0     20 4E 85 F1 | 	sub	fp, #32
0ddc4     FF FF 7F FF 
0ddc8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0ddcc     A8 00 90 AD |  if_e	jmp	#LR__1074
0ddd0     38 4E 05 F1 | 	add	fp, #56
0ddd4     3F 16 06 F6 | 	mov	arg03, #63
0ddd8     28 16 62 FD | 	setq	arg03
0dddc     A7 00 68 FC | 	wrlong	#0, fp
0dde0     A7 12 02 F6 | 	mov	arg01, fp
0dde4     10 4E 85 F1 | 	sub	fp, #16
0dde8     A7 14 02 FB | 	rdlong	arg02, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 16 02 FB | 	rdlong	arg03, fp
0ddf4     2C 4E 85 F1 | 	sub	fp, #44
0ddf8     0B 00 00 FF 
0ddfc     CC E4 05 F1 | 	add	objptr, ##5836
0de00     44 EA B0 FD | 	call	#_psram_spin2_read1
0de04     0B 00 00 FF 
0de08     CC E4 85 F1 | 	sub	objptr, ##5836
0de0c                 | '     longfill(linebuf,0,64)
0de0c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0de0c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0de0c     20 4E 05 F1 | 	add	fp, #32
0de10     A7 20 02 FB | 	rdlong	local02, fp
0de14     1C 4E 85 F1 | 	sub	fp, #28
0de18     A7 1E 02 FB | 	rdlong	local01, fp
0de1c     04 4E 85 F1 | 	sub	fp, #4
0de20     0F 21 52 F2 | 	cmps	local02, local01 wc
0de24     30 00 90 CD |  if_b	jmp	#LR__1073
0de28     20 4E 05 F1 | 	add	fp, #32
0de2c     A7 20 02 FB | 	rdlong	local02, fp
0de30     18 4E 85 F1 | 	sub	fp, #24
0de34     A7 16 02 FB | 	rdlong	arg03, fp
0de38     08 4E 85 F1 | 	sub	fp, #8
0de3c     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0de40     14 00 90 1D |  if_a	jmp	#LR__1073
0de44     38 4E 05 F1 | 	add	fp, #56
0de48     A7 12 02 F6 | 	mov	arg01, fp
0de4c     38 4E 85 F1 | 	sub	fp, #56
0de50                 | ' 
0de50                 | ' write(text)
0de50     4C E3 B0 FD | 	call	#_hg010b_spin2_write
0de54                 | ' crlf
0de54     14 E6 B0 FD | 	call	#_hg010b_spin2_crlf
0de58                 | LR__1073
0de58     34 4E 05 F1 | 	add	fp, #52
0de5c     A7 20 02 FB | 	rdlong	local02, fp
0de60     34 4E 85 F1 | 	sub	fp, #52
0de64     7B 00 00 FF 
0de68     08 E5 05 F1 | 	add	objptr, ##63240
0de6c     F2 20 62 FC | 	wrlong	local02, objptr
0de70     7B 00 00 FF 
0de74     08 E5 85 F1 | 	sub	objptr, ##63240
0de78                 | LR__1074
0de78     34 4E 05 F1 | 	add	fp, #52
0de7c     A7 20 02 FB | 	rdlong	local02, fp
0de80     34 4E 85 F1 | 	sub	fp, #52
0de84     FF FF 3F FF 
0de88     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0de8c     20 4E 05 51 |  if_ne	add	fp, #32
0de90     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0de94     20 4E 85 51 |  if_ne	sub	fp, #32
0de98     FF FF 7F 5F 
0de9c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0dea0     E4 FE 9F 5D |  if_ne	jmp	#LR__1072
0dea4     A7 F0 03 F6 | 	mov	ptra, fp
0dea8     B2 00 A0 FD | 	call	#popregs_
0deac                 | _do_list_ret
0deac     2D 00 64 FD | 	ret
0deb0                 | 
0deb0                 | ' 
0deb0                 | ' '---------------- Clear the program
0deb0                 | ' 
0deb0                 | ' sub do_new
0deb0                 | _do_new
0deb0     03 4A 05 F6 | 	mov	COUNT_, #3
0deb4     A8 00 A0 FD | 	call	#pushregs_
0deb8     00 12 06 F6 | 	mov	arg01, #0
0debc     01 14 66 F6 | 	neg	arg02, #1
0dec0     AC B2 B0 FD | 	call	#_pslpoke
0dec4     54 00 00 FF 
0dec8     F8 E5 05 F1 | 	add	objptr, ##43512
0decc     F2 00 68 FC | 	wrlong	#0, objptr
0ded0     15 00 00 FF 
0ded4     7C E4 05 F1 | 	add	objptr, ##10876
0ded8     F2 00 68 FC | 	wrlong	#0, objptr
0dedc     0F 00 00 FF 
0dee0     2C E5 05 F1 | 	add	objptr, ##7980
0dee4     F2 00 68 FC | 	wrlong	#0, objptr
0dee8     04 E4 05 F1 | 	add	objptr, #4
0deec     F2 00 68 FC | 	wrlong	#0, objptr
0def0     16 00 00 FF 
0def4     5C E5 85 F1 | 	sub	objptr, ##11612
0def8     F2 00 68 FC | 	wrlong	#0, objptr
0defc     07 00 00 FF 
0df00     24 E4 05 F1 | 	add	objptr, ##3620
0df04     F2 00 68 FC | 	wrlong	#0, objptr
0df08     07 00 00 FF 
0df0c     20 E4 85 F1 | 	sub	objptr, ##3616
0df10     F2 00 68 FC | 	wrlong	#0, objptr
0df14     0F 00 00 FF 
0df18     34 E4 05 F1 | 	add	objptr, ##7732
0df1c     F2 00 68 FC | 	wrlong	#0, objptr
0df20     08 00 00 FF 
0df24     08 E4 85 F1 | 	sub	objptr, ##4104
0df28     F2 00 68 FC | 	wrlong	#0, objptr
0df2c     04 E4 05 F1 | 	add	objptr, #4
0df30     FF FF FF FF 
0df34     F2 FE 6B FC | 	wrlong	##-1, objptr
0df38     0F 00 00 FF 
0df3c     4C E5 05 F1 | 	add	objptr, ##8012
0df40     F2 00 68 FC | 	wrlong	#0, objptr
0df44                 | ' 
0df44                 | ' pslpoke(0,$FFFFFFFF)
0df44                 | ' varnum=0
0df44                 | ' programstart=0 :runptr=0 : runptr2=0
0df44                 | ' stackpointer=0
0df44                 | ' lineptr=0 
0df44                 | ' programptr=0 : stringptr=0
0df44                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0df44                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0df44     00 1E 06 F6 | 	mov	local01, #0
0df48     07 00 00 FF 
0df4c     40 E5 85 F1 | 	sub	objptr, ##3904
0df50     97 16 48 FB | 	callpa	#(@LR__1081-@LR__1080)>>2,fcache_load_ptr_
0df54                 | LR__1080
0df54     0F 21 02 F6 | 	mov	local02, local01
0df58     02 20 66 F0 | 	shl	local02, #2
0df5c     0F 21 02 F1 | 	add	local02, local01
0df60     02 20 66 F0 | 	shl	local02, #2
0df64     F2 20 02 F1 | 	add	local02, objptr
0df68     08 20 06 F1 | 	add	local02, #8
0df6c     FF FF FF FF 
0df70     10 FF 6B FC | 	wrlong	##-1, local02
0df74     01 1E 06 F1 | 	add	local01, #1
0df78     81 1E 56 F2 | 	cmps	local01, #129 wc
0df7c     D4 FF 9F CD |  if_b	jmp	#LR__1080
0df80                 | LR__1081
0df80     72 00 00 FF 
0df84     88 E4 85 F1 | 	sub	objptr, ##58504
0df88                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0df88     00 1E 06 F6 | 	mov	local01, #0
0df8c                 | LR__1082
0df8c     0F 21 02 F6 | 	mov	local02, local01
0df90     02 20 66 F0 | 	shl	local02, #2
0df94     7B 00 00 FF 
0df98     24 E4 05 F1 | 	add	objptr, ##63012
0df9c     F2 20 02 F1 | 	add	local02, objptr
0dfa0     10 21 0A FB | 	rdlong	local02, local02 wz
0dfa4     7B 00 00 FF 
0dfa8     24 E4 85 F1 | 	sub	objptr, ##63012
0dfac     34 00 90 AD |  if_e	jmp	#LR__1083
0dfb0     0F 13 02 F6 | 	mov	arg01, local01
0dfb4     00 14 06 F6 | 	mov	arg02, #0
0dfb8     00 16 06 F6 | 	mov	arg03, #0
0dfbc     00 D1 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dfc0     0F 21 02 F6 | 	mov	local02, local01
0dfc4     02 20 66 F0 | 	shl	local02, #2
0dfc8     7B 00 00 FF 
0dfcc     24 E4 05 F1 | 	add	objptr, ##63012
0dfd0     F2 20 02 F1 | 	add	local02, objptr
0dfd4     10 13 02 FB | 	rdlong	arg01, local02
0dfd8     7B 00 00 FF 
0dfdc     24 E4 85 F1 | 	sub	objptr, ##63012
0dfe0     EC 33 B1 FD | 	call	#__system___gc_free
0dfe4                 | LR__1083
0dfe4     01 1E 06 F1 | 	add	local01, #1
0dfe8     10 1E 56 F2 | 	cmps	local01, #16 wc
0dfec     9C FF 9F CD |  if_b	jmp	#LR__1082
0dff0     7B 00 00 FF 
0dff4     78 E4 05 F1 | 	add	objptr, ##63096
0dff8     00 C0 9F FF 
0dffc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e000     04 E4 05 F1 | 	add	objptr, #4
0e004     00 C0 9F FF 
0e008     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e00c     7B 00 00 FF 
0e010     78 E4 85 F1 | 	sub	objptr, ##63096
0e014     F2 22 02 FB | 	rdlong	local03, objptr
0e018     7B 00 00 FF 
0e01c     64 E4 05 F1 | 	add	objptr, ##63076
0e020     F2 22 62 FC | 	wrlong	local03, objptr
0e024     7B 00 00 FF 
0e028     68 E4 85 F1 | 	sub	objptr, ##63080
0e02c     11 12 06 F6 | 	mov	arg01, #17
0e030     08 14 06 F6 | 	mov	arg02, #8
0e034     10 16 06 F6 | 	mov	arg03, #16
0e038     84 D0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e03c     10 12 06 F6 | 	mov	arg01, #16
0e040     20 14 06 F6 | 	mov	arg02, #32
0e044     20 16 06 F6 | 	mov	arg03, #32
0e048     74 D0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e04c     68 01 00 FF 
0e050     50 22 06 F6 | 	mov	local03, ##@LR__4978
0e054     7B 00 00 FF 
0e058     94 E4 05 F1 | 	add	objptr, ##63124
0e05c     F2 22 62 FC | 	wrlong	local03, objptr
0e060     7B 00 00 FF 
0e064     94 E4 85 F1 | 	sub	objptr, ##63124
0e068     10 A4 B0 FD | 	call	#_init_audio
0e06c     A7 F0 03 F6 | 	mov	ptra, fp
0e070     B2 00 A0 FD | 	call	#popregs_
0e074                 | _do_new_ret
0e074     2D 00 64 FD | 	ret
0e078                 | 
0e078                 | ' 
0e078                 | ' '----------------------- goto
0e078                 | ' sub do_fast_goto
0e078                 | _do_fast_goto
0e078     02 4A 05 F6 | 	mov	COUNT_, #2
0e07c     A8 00 A0 FD | 	call	#pushregs_
0e080                 | _do_fast_goto_enter
0e080     6A 00 00 FF 
0e084     70 E4 05 F1 | 	add	objptr, ##54384
0e088     F2 12 02 FB | 	rdlong	arg01, objptr
0e08c     09 1F 02 F6 | 	mov	local01, arg01
0e090     01 1E 66 F0 | 	shl	local01, #1
0e094     09 1F 02 F1 | 	add	local01, arg01
0e098     02 1E 66 F0 | 	shl	local01, #2
0e09c     03 00 00 FF 
0e0a0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0a4     F2 1E 02 F1 | 	add	local01, objptr
0e0a8     0F 21 02 FB | 	rdlong	local02, local01
0e0ac     10 13 02 F6 | 	mov	arg01, local02
0e0b0     67 00 00 FF 
0e0b4     6C E4 85 F1 | 	sub	objptr, ##52844
0e0b8     E4 B1 B0 FD | 	call	#_pslpeek
0e0bc     FD 12 02 F6 | 	mov	arg01, result1
0e0c0                 | ' 
0e0c0                 | ' testptr=compiledline(lineptr_e).result.uresult
0e0c0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e0c0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e0c0     6A 00 00 FF 
0e0c4     70 E4 05 F1 | 	add	objptr, ##54384
0e0c8     F2 FA 01 FB | 	rdlong	result1, objptr
0e0cc     FD 1E 02 F6 | 	mov	local01, result1
0e0d0     01 1E 66 F0 | 	shl	local01, #1
0e0d4     FD 1E 02 F1 | 	add	local01, result1
0e0d8     02 1E 66 F0 | 	shl	local01, #2
0e0dc     03 00 00 FF 
0e0e0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0e4     F2 1E 02 F1 | 	add	local01, objptr
0e0e8     04 1E 06 F1 | 	add	local01, #4
0e0ec     0F 1F 02 FB | 	rdlong	local01, local01
0e0f0     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e0f4     67 00 00 FF 
0e0f8     6C E4 85 F1 | 	sub	objptr, ##52844
0e0fc     58 00 90 5D |  if_ne	jmp	#LR__1090
0e100     79 00 00 FF 
0e104     A0 E5 05 F1 | 	add	objptr, ##62368
0e108     F2 20 62 FC | 	wrlong	local02, objptr
0e10c     0F 00 00 FF 
0e110     34 E5 85 F1 | 	sub	objptr, ##7988
0e114     F2 20 02 FB | 	rdlong	local02, objptr
0e118     01 20 86 F1 | 	sub	local02, #1
0e11c     04 E4 05 F1 | 	add	objptr, #4
0e120     F2 20 62 FC | 	wrlong	local02, objptr
0e124                 | '   runptr=testptr
0e124                 | '   lineptr_e=lineptr-1
0e124                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e124     0F 00 00 FF 
0e128     54 E5 05 F1 | 	add	objptr, ##8020
0e12c     F2 20 02 FB | 	rdlong	local02, objptr
0e130     79 00 00 FF 
0e134     C4 E5 85 F1 | 	sub	objptr, ##62404
0e138     FF FF 3F FF 
0e13c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e140     79 00 00 AF 
0e144     C4 E5 05 A1 |  if_e	add	objptr, ##62404
0e148     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e14c     79 00 00 AF 
0e150     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
0e154     04 00 90 FD | 	jmp	#LR__1091
0e158                 | LR__1090
0e158     0C 00 B0 FD | 	call	#_do_find_goto
0e15c                 | LR__1091
0e15c     A7 F0 03 F6 | 	mov	ptra, fp
0e160     B2 00 A0 FD | 	call	#popregs_
0e164                 | _do_fast_goto_ret
0e164     2D 00 64 FD | 	ret
0e168                 | 
0e168                 | ' 
0e168                 | ' 
0e168                 | ' 
0e168                 | ' 
0e168                 | ' sub do_find_goto
0e168                 | _do_find_goto
0e168     03 4A 05 F6 | 	mov	COUNT_, #3
0e16c     A8 00 A0 FD | 	call	#pushregs_
0e170     24 F0 07 F1 | 	add	ptra, #36
0e174                 | _do_find_goto_enter
0e174     6A 00 00 FF 
0e178     70 E4 05 F1 | 	add	objptr, ##54384
0e17c     F2 1E 02 FB | 	rdlong	local01, objptr
0e180     0F 21 02 F6 | 	mov	local02, local01
0e184     01 20 66 F0 | 	shl	local02, #1
0e188     0F 21 02 F1 | 	add	local02, local01
0e18c     02 20 66 F0 | 	shl	local02, #2
0e190     03 00 00 FF 
0e194     04 E4 85 F1 | 	sub	objptr, ##1540
0e198     F2 20 02 F1 | 	add	local02, objptr
0e19c     04 20 06 F1 | 	add	local02, #4
0e1a0     10 21 02 FB | 	rdlong	local02, local02
0e1a4     A7 20 62 FC | 	wrlong	local02, fp
0e1a8     03 00 00 FF 
0e1ac     08 E4 05 F1 | 	add	objptr, ##1544
0e1b0     F2 22 02 FB | 	rdlong	local03, objptr
0e1b4     6A 00 00 FF 
0e1b8     74 E4 85 F1 | 	sub	objptr, ##54388
0e1bc     04 4E 05 F1 | 	add	fp, #4
0e1c0     A7 22 62 FC | 	wrlong	local03, fp
0e1c4     04 4E 85 F1 | 	sub	fp, #4
0e1c8                 | ' 
0e1c8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e1c8                 | '  ' print "find goto"                                                                     'print gotoline 
0e1c8                 | ' gotoptr=programstart
0e1c8                 | ' do
0e1c8                 | LR__1100
0e1c8     0C 4E 05 F1 | 	add	fp, #12
0e1cc     A7 12 02 F6 | 	mov	arg01, fp
0e1d0     08 4E 85 F1 | 	sub	fp, #8
0e1d4     A7 14 02 FB | 	rdlong	arg02, fp
0e1d8     04 4E 85 F1 | 	sub	fp, #4
0e1dc     18 16 06 F6 | 	mov	arg03, #24
0e1e0     0B 00 00 FF 
0e1e4     CC E4 05 F1 | 	add	objptr, ##5836
0e1e8     5C E6 B0 FD | 	call	#_psram_spin2_read1
0e1ec     0B 00 00 FF 
0e1f0     CC E4 85 F1 | 	sub	objptr, ##5836
0e1f4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e1f4                 | '   if gotoheader(0)<>$FFFFFFFF then
0e1f4     0C 4E 05 F1 | 	add	fp, #12
0e1f8     A7 22 02 FB | 	rdlong	local03, fp
0e1fc     0C 4E 85 F1 | 	sub	fp, #12
0e200     FF FF 7F FF 
0e204     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e208     24 00 90 AD |  if_e	jmp	#LR__1101
0e20c     04 4E 05 F1 | 	add	fp, #4
0e210     A7 22 02 FB | 	rdlong	local03, fp
0e214     04 4E 05 F1 | 	add	fp, #4
0e218     A7 22 62 FC | 	wrlong	local03, fp
0e21c     18 4E 05 F1 | 	add	fp, #24
0e220     A7 22 02 FB | 	rdlong	local03, fp
0e224     1C 4E 85 F1 | 	sub	fp, #28
0e228     A7 22 62 FC | 	wrlong	local03, fp
0e22c     04 4E 85 F1 | 	sub	fp, #4
0e230                 | LR__1101
0e230     20 4E 05 F1 | 	add	fp, #32
0e234     A7 22 02 FB | 	rdlong	local03, fp
0e238     20 4E 85 F1 | 	sub	fp, #32
0e23c     FF FF 3F FF 
0e240     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e244     0C 4E 05 51 |  if_ne	add	fp, #12
0e248     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e24c     0C 4E 85 51 |  if_ne	sub	fp, #12
0e250     FF FF 7F 5F 
0e254     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e258     18 00 90 AD |  if_e	jmp	#LR__1102
0e25c     0C 4E 05 F1 | 	add	fp, #12
0e260     A7 22 02 FB | 	rdlong	local03, fp
0e264     0C 4E 85 F1 | 	sub	fp, #12
0e268     A7 20 02 FB | 	rdlong	local02, fp
0e26c     10 23 0A F2 | 	cmp	local03, local02 wz
0e270     54 FF 9F 5D |  if_ne	jmp	#LR__1100
0e274                 | LR__1102
0e274                 | ' 
0e274                 | ' if gotoheader(0)=gotoline then
0e274     0C 4E 05 F1 | 	add	fp, #12
0e278     A7 22 02 FB | 	rdlong	local03, fp
0e27c     0C 4E 85 F1 | 	sub	fp, #12
0e280     A7 1E 02 FB | 	rdlong	local01, fp
0e284     0F 23 0A F2 | 	cmp	local03, local01 wz
0e288     D8 00 90 5D |  if_ne	jmp	#LR__1103
0e28c     6A 00 00 FF 
0e290     70 E4 05 F1 | 	add	objptr, ##54384
0e294     F2 1E 02 FB | 	rdlong	local01, objptr
0e298     0F 21 02 F6 | 	mov	local02, local01
0e29c     01 20 66 F0 | 	shl	local02, #1
0e2a0     0F 21 02 F1 | 	add	local02, local01
0e2a4     02 20 66 F0 | 	shl	local02, #2
0e2a8     03 00 00 FF 
0e2ac     04 E4 85 F1 | 	sub	objptr, ##1540
0e2b0     F2 20 02 F1 | 	add	local02, objptr
0e2b4     08 4E 05 F1 | 	add	fp, #8
0e2b8     A7 22 02 FB | 	rdlong	local03, fp
0e2bc     10 23 62 FC | 	wrlong	local03, local02
0e2c0     03 00 00 FF 
0e2c4     04 E4 05 F1 | 	add	objptr, ##1540
0e2c8     F2 1E 02 FB | 	rdlong	local01, objptr
0e2cc     0F 21 02 F6 | 	mov	local02, local01
0e2d0     01 20 66 F0 | 	shl	local02, #1
0e2d4     0F 21 02 F1 | 	add	local02, local01
0e2d8     02 20 66 F0 | 	shl	local02, #2
0e2dc     03 00 00 FF 
0e2e0     04 E4 85 F1 | 	sub	objptr, ##1540
0e2e4     F2 20 02 F1 | 	add	local02, objptr
0e2e8     08 20 06 F1 | 	add	local02, #8
0e2ec     10 9D 68 FC | 	wrlong	#78, local02
0e2f0     03 00 00 FF 
0e2f4     04 E4 05 F1 | 	add	objptr, ##1540
0e2f8     F2 20 02 FB | 	rdlong	local02, objptr
0e2fc     10 13 02 F6 | 	mov	arg01, local02
0e300     01 12 66 F0 | 	shl	arg01, #1
0e304     10 13 02 F1 | 	add	arg01, local02
0e308     02 12 66 F0 | 	shl	arg01, #2
0e30c     03 00 00 FF 
0e310     04 E4 85 F1 | 	sub	objptr, ##1540
0e314     F2 12 02 F1 | 	add	arg01, objptr
0e318     12 00 00 FF 
0e31c     3C E5 05 F1 | 	add	objptr, ##9532
0e320     F2 14 02 FB | 	rdlong	arg02, objptr
0e324     02 22 06 F6 | 	mov	local03, #2
0e328     10 23 02 F1 | 	add	local03, local02
0e32c     14 00 00 FF 
0e330     54 E5 85 F1 | 	sub	objptr, ##10580
0e334     F2 16 02 FB | 	rdlong	arg03, objptr
0e338     0B 23 02 FD | 	qmul	local03, arg03
0e33c     08 4E 85 F1 | 	sub	fp, #8
0e340     59 00 00 FF 
0e344     88 E5 85 F1 | 	sub	objptr, ##45960
0e348     18 22 62 FD | 	getqx	local03
0e34c     11 15 02 F1 | 	add	arg02, local03
0e350     90 E5 B0 FD | 	call	#_psram_spin2_write
0e354     0B 00 00 FF 
0e358     CC E4 85 F1 | 	sub	objptr, ##5836
0e35c     18 FD BF FD | 	call	#_do_fast_goto
0e360     08 00 90 FD | 	jmp	#LR__1104
0e364                 | LR__1103
0e364     26 12 06 F6 | 	mov	arg01, #38
0e368     A0 AC B0 FD | 	call	#_printerror
0e36c                 | LR__1104
0e36c     A7 F0 03 F6 | 	mov	ptra, fp
0e370     B2 00 A0 FD | 	call	#popregs_
0e374                 | _do_find_goto_ret
0e374     2D 00 64 FD | 	ret
0e378                 | 
0e378                 | ' 
0e378                 | ' sub do_slow_goto
0e378                 | _do_slow_goto
0e378                 | _do_slow_goto_ret
0e378     2D 00 64 FD | 	ret
0e37c                 | 
0e37c                 | ' 
0e37c                 | ' '----------------------- Error processing
0e37c                 | ' 
0e37c                 | ' sub do_error
0e37c                 | _do_error
0e37c     01 4A 05 F6 | 	mov	COUNT_, #1
0e380     A8 00 A0 FD | 	call	#pushregs_
0e384     6A 00 00 FF 
0e388     70 E4 05 F1 | 	add	objptr, ##54384
0e38c     F2 18 02 FB | 	rdlong	arg04, objptr
0e390     0C 17 02 F6 | 	mov	arg03, arg04
0e394     01 16 66 F0 | 	shl	arg03, #1
0e398     0C 17 02 F1 | 	add	arg03, arg04
0e39c     02 16 66 F0 | 	shl	arg03, #2
0e3a0     03 00 00 FF 
0e3a4     04 E4 85 F1 | 	sub	objptr, ##1540
0e3a8     F2 16 02 F1 | 	add	arg03, objptr
0e3ac     0B 1F 02 FB | 	rdlong	local01, arg03
0e3b0                 | ' r=compiledline(lineptr_e).result.uresult
0e3b0                 | ' print "Error ";r;": ";errors$(r)
0e3b0     00 12 06 F6 | 	mov	arg01, #0
0e3b4     67 00 00 FF 
0e3b8     6C E4 85 F1 | 	sub	objptr, ##52844
0e3bc     1C 4A B1 FD | 	call	#__system___getiolock_0473
0e3c0     FD 12 02 F6 | 	mov	arg01, result1
0e3c4     84 F0 B0 FD | 	call	#__system___lockmem
0e3c8     68 01 00 FF 
0e3cc     5B 14 06 F6 | 	mov	arg02, ##@LR__4979
0e3d0     00 12 06 F6 | 	mov	arg01, #0
0e3d4     00 16 06 F6 | 	mov	arg03, #0
0e3d8     74 FD B0 FD | 	call	#__system___basic_print_string
0e3dc     00 12 06 F6 | 	mov	arg01, #0
0e3e0     0F 15 02 F6 | 	mov	arg02, local01
0e3e4     00 16 06 F6 | 	mov	arg03, #0
0e3e8     0A 18 06 F6 | 	mov	arg04, #10
0e3ec     E4 FD B0 FD | 	call	#__system___basic_print_unsigned
0e3f0     68 01 00 FF 
0e3f4     62 14 06 F6 | 	mov	arg02, ##@LR__4980
0e3f8     00 12 06 F6 | 	mov	arg01, #0
0e3fc     00 16 06 F6 | 	mov	arg03, #0
0e400     4C FD B0 FD | 	call	#__system___basic_print_string
0e404     02 1E 66 F0 | 	shl	local01, #2
0e408     65 00 00 FF 
0e40c     6C E4 05 F1 | 	add	objptr, ##51820
0e410     F2 1E 02 F1 | 	add	local01, objptr
0e414     0F 15 02 FB | 	rdlong	arg02, local01
0e418     00 12 06 F6 | 	mov	arg01, #0
0e41c     00 16 06 F6 | 	mov	arg03, #0
0e420     65 00 00 FF 
0e424     6C E4 85 F1 | 	sub	objptr, ##51820
0e428     24 FD B0 FD | 	call	#__system___basic_print_string
0e42c     00 12 06 F6 | 	mov	arg01, #0
0e430     0A 14 06 F6 | 	mov	arg02, #10
0e434     00 16 06 F6 | 	mov	arg03, #0
0e438     BC FC B0 FD | 	call	#__system___basic_print_char
0e43c     00 12 06 F6 | 	mov	arg01, #0
0e440     98 49 B1 FD | 	call	#__system___getiolock_0473
0e444     FD 00 68 FC | 	wrlong	#0, result1
0e448     A7 F0 03 F6 | 	mov	ptra, fp
0e44c     B2 00 A0 FD | 	call	#popregs_
0e450                 | _do_error_ret
0e450     2D 00 64 FD | 	ret
0e454                 | 
0e454                 | ' 
0e454                 | ' 
0e454                 | ' '------------------ Assigning to a variable  
0e454                 | ' 
0e454                 | ' function  convertstring(psaddr as ulong) as string
0e454                 | _convertstring
0e454     04 4A 05 F6 | 	mov	COUNT_, #4
0e458     A8 00 A0 FD | 	call	#pushregs_
0e45c     09 1F 02 F6 | 	mov	local01, arg01
0e460     3C AE B0 FD | 	call	#_pslpeek
0e464     FD 20 02 F6 | 	mov	local02, result1
0e468     68 01 00 FF 
0e46c     65 22 06 F6 | 	mov	local03, ##@LR__4981
0e470                 | ' 'print "in convertstring: psaddr=";psaddr
0e470                 | ' l=pslpeek(psaddr)
0e470                 | ' 'print "in convertstring: len=";l
0e470                 | ' s="" 
0e470                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e470     01 24 06 F6 | 	mov	local04, #1
0e474     01 20 06 F1 | 	add	local02, #1
0e478                 | LR__1110
0e478     10 25 52 F2 | 	cmps	local04, local02 wc
0e47c     30 00 90 3D |  if_ae	jmp	#LR__1111
0e480     0F 13 02 F6 | 	mov	arg01, local01
0e484     03 12 06 F1 | 	add	arg01, #3
0e488     12 13 02 F1 | 	add	arg01, local04
0e48c     B8 AD B0 FD | 	call	#_pspeek
0e490     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e494     BC 11 B1 FD | 	call	#__system__Chr_S
0e498     FD 14 02 F6 | 	mov	arg02, result1
0e49c     11 13 02 F6 | 	mov	arg01, local03
0e4a0     04 F0 B0 FD | 	call	#__system___string_concat
0e4a4     FD 22 02 F6 | 	mov	local03, result1
0e4a8     01 24 06 F1 | 	add	local04, #1
0e4ac     C8 FF 9F FD | 	jmp	#LR__1110
0e4b0                 | LR__1111
0e4b0                 | ' 'print "in convertstring: str=";s
0e4b0                 | ' return s
0e4b0     11 FB 01 F6 | 	mov	result1, local03
0e4b4     A7 F0 03 F6 | 	mov	ptra, fp
0e4b8     B2 00 A0 FD | 	call	#popregs_
0e4bc                 | _convertstring_ret
0e4bc     2D 00 64 FD | 	ret
0e4c0                 | 
0e4c0                 | ' 
0e4c0                 | ' sub do_assign
0e4c0                 | _do_assign
0e4c0     05 4A 05 F6 | 	mov	COUNT_, #5
0e4c4     A8 00 A0 FD | 	call	#pushregs_
0e4c8     44 F0 07 F1 | 	add	ptra, #68
0e4cc     6A 00 00 FF 
0e4d0     70 E4 05 F1 | 	add	objptr, ##54384
0e4d4     F2 16 02 FB | 	rdlong	arg03, objptr
0e4d8     0B 15 02 F6 | 	mov	arg02, arg03
0e4dc     01 14 66 F0 | 	shl	arg02, #1
0e4e0     0B 15 02 F1 | 	add	arg02, arg03
0e4e4     02 14 66 F0 | 	shl	arg02, #2
0e4e8     03 00 00 FF 
0e4ec     04 E4 85 F1 | 	sub	objptr, ##1540
0e4f0     F2 14 02 F1 | 	add	arg02, objptr
0e4f4     0A 15 02 FB | 	rdlong	arg02, arg02
0e4f8     18 4E 05 F1 | 	add	fp, #24
0e4fc     A7 14 62 FC | 	wrlong	arg02, fp
0e500                 | ' 
0e500                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e500                 | ' 
0e500                 | ' if variables(varnum).vartype<array_no_type then 
0e500     18 4E 85 F1 | 	sub	fp, #24
0e504     04 14 66 F0 | 	shl	arg02, #4
0e508     32 00 00 FF 
0e50c     74 E4 85 F1 | 	sub	objptr, ##25716
0e510     F2 14 02 F1 | 	add	arg02, objptr
0e514     0C 14 06 F1 | 	add	arg02, #12
0e518     0A 17 02 FB | 	rdlong	arg03, arg02
0e51c     00 17 16 F2 | 	cmp	arg03, #256 wc
0e520     34 00 00 FF 
0e524     F8 E5 85 F1 | 	sub	objptr, ##27128
0e528     18 01 90 3D |  if_ae	jmp	#LR__1120
0e52c     7C BC BF FD | 	call	#_pop
0e530     A7 FA 61 FC | 	wrlong	result1, fp
0e534     04 4E 05 F1 | 	add	fp, #4
0e538     A7 FC 61 FC | 	wrlong	result2, fp
0e53c     04 4E 05 F1 | 	add	fp, #4
0e540     A7 FE 61 FC | 	wrlong	result3, fp
0e544     08 4E 85 F1 | 	sub	fp, #8
0e548     A7 16 02 FB | 	rdlong	arg03, fp
0e54c     04 4E 05 F1 | 	add	fp, #4
0e550     A7 14 02 FB | 	rdlong	arg02, fp
0e554     14 4E 05 F1 | 	add	fp, #20
0e558     A7 12 02 FB | 	rdlong	arg01, fp
0e55c     04 12 66 F0 | 	shl	arg01, #4
0e560     34 00 00 FF 
0e564     F8 E5 05 F1 | 	add	objptr, ##27128
0e568     F2 12 02 F1 | 	add	arg01, objptr
0e56c     04 12 06 F1 | 	add	arg01, #4
0e570     09 17 62 FC | 	wrlong	arg03, arg01
0e574     A7 16 02 FB | 	rdlong	arg03, fp
0e578     04 16 66 F0 | 	shl	arg03, #4
0e57c     F2 16 02 F1 | 	add	arg03, objptr
0e580     08 16 06 F1 | 	add	arg03, #8
0e584     0B 15 62 FC | 	wrlong	arg02, arg03
0e588     A7 16 02 FB | 	rdlong	arg03, fp
0e58c     04 16 66 F0 | 	shl	arg03, #4
0e590     F2 16 02 F1 | 	add	arg03, objptr
0e594     10 4E 85 F1 | 	sub	fp, #16
0e598     A7 14 02 FB | 	rdlong	arg02, fp
0e59c     0C 16 06 F1 | 	add	arg03, #12
0e5a0     0B 15 62 FC | 	wrlong	arg02, arg03
0e5a4                 | '   t1=pop() 
0e5a4                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e5a4                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e5a4                 | '   if variables(varnum).vartype<>result_string2 then return
0e5a4     10 4E 05 F1 | 	add	fp, #16
0e5a8     A7 16 02 FB | 	rdlong	arg03, fp
0e5ac     18 4E 85 F1 | 	sub	fp, #24
0e5b0     04 16 66 F0 | 	shl	arg03, #4
0e5b4     F2 16 02 F1 | 	add	arg03, objptr
0e5b8     0C 16 06 F1 | 	add	arg03, #12
0e5bc     0B 17 02 FB | 	rdlong	arg03, arg03
0e5c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e5c4     34 00 00 FF 
0e5c8     F8 E5 85 F1 | 	sub	objptr, ##27128
0e5cc     E4 04 90 5D |  if_ne	jmp	#LR__1143
0e5d0     18 4E 05 F1 | 	add	fp, #24
0e5d4     A7 16 02 FB | 	rdlong	arg03, fp
0e5d8     0B 1F 02 F6 | 	mov	local01, arg03
0e5dc     04 1E 66 F0 | 	shl	local01, #4
0e5e0     34 00 00 FF 
0e5e4     F8 E5 05 F1 | 	add	objptr, ##27128
0e5e8     F2 1E 02 F1 | 	add	local01, objptr
0e5ec     18 4E 85 F1 | 	sub	fp, #24
0e5f0     04 16 66 F0 | 	shl	arg03, #4
0e5f4     F2 16 02 F1 | 	add	arg03, objptr
0e5f8     04 16 06 F1 | 	add	arg03, #4
0e5fc     0B 13 02 FB | 	rdlong	arg01, arg03
0e600     34 00 00 FF 
0e604     F8 E5 85 F1 | 	sub	objptr, ##27128
0e608     48 FE BF FD | 	call	#_convertstring
0e60c     04 1E 06 F1 | 	add	local01, #4
0e610     0F FB 61 FC | 	wrlong	result1, local01
0e614     18 4E 05 F1 | 	add	fp, #24
0e618     A7 1E 02 FB | 	rdlong	local01, fp
0e61c     18 4E 85 F1 | 	sub	fp, #24
0e620     04 1E 66 F0 | 	shl	local01, #4
0e624     34 00 00 FF 
0e628     F8 E5 05 F1 | 	add	objptr, ##27128
0e62c     F2 1E 02 F1 | 	add	local01, objptr
0e630     0C 1E 06 F1 | 	add	local01, #12
0e634     0F 3F 68 FC | 	wrlong	#31, local01
0e638                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e638                 | '   variables(varnum).vartype=result_string
0e638                 | '   return
0e638     34 00 00 FF 
0e63c     F8 E5 85 F1 | 	sub	objptr, ##27128
0e640     70 04 90 FD | 	jmp	#LR__1143
0e644                 | LR__1120
0e644                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e644     1C 4E 05 F1 | 	add	fp, #28
0e648     A7 00 68 FC | 	wrlong	#0, fp
0e64c     97 16 48 FB | 	callpa	#(@LR__1122-@LR__1121)>>2,fcache_load_ptr_
0e650                 | LR__1121
0e650     A7 1E 02 FB | 	rdlong	local01, fp
0e654     02 1E 66 F0 | 	shl	local01, #2
0e658     18 4E 05 F1 | 	add	fp, #24
0e65c     A7 1E 02 F1 | 	add	local01, fp
0e660     0F 01 68 FC | 	wrlong	#0, local01
0e664     18 4E 85 F1 | 	sub	fp, #24
0e668     A7 1E 02 FB | 	rdlong	local01, fp
0e66c     01 1E 06 F1 | 	add	local01, #1
0e670     A7 1E 62 FC | 	wrlong	local01, fp
0e674     03 1E 16 F2 | 	cmp	local01, #3 wc
0e678     D4 FF 9F CD |  if_b	jmp	#LR__1121
0e67c                 | LR__1122
0e67c     6A 00 00 FF 
0e680     70 E4 05 F1 | 	add	objptr, ##54384
0e684     F2 16 02 FB | 	rdlong	arg03, objptr
0e688     0B 1F 02 F6 | 	mov	local01, arg03
0e68c     01 1E 66 F0 | 	shl	local01, #1
0e690     0B 1F 02 F1 | 	add	local01, arg03
0e694     02 1E 66 F0 | 	shl	local01, #2
0e698     03 00 00 FF 
0e69c     04 E4 85 F1 | 	sub	objptr, ##1540
0e6a0     F2 1E 02 F1 | 	add	local01, objptr
0e6a4     04 1E 06 F1 | 	add	local01, #4
0e6a8     0F 21 02 FB | 	rdlong	local02, local01
0e6ac     04 4E 05 F1 | 	add	fp, #4
0e6b0     A7 20 62 FC | 	wrlong	local02, fp
0e6b4     20 4E 85 F1 | 	sub	fp, #32
0e6b8     67 00 00 FF 
0e6bc     6C E4 85 F1 | 	sub	objptr, ##52844
0e6c0     E8 BA BF FD | 	call	#_pop
0e6c4     A7 FA 61 FC | 	wrlong	result1, fp
0e6c8     04 4E 05 F1 | 	add	fp, #4
0e6cc     A7 FC 61 FC | 	wrlong	result2, fp
0e6d0     04 4E 05 F1 | 	add	fp, #4
0e6d4     A7 FE 61 FC | 	wrlong	result3, fp
0e6d8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e6d8                 | ' t1=pop() ' var value
0e6d8                 | ' if numpar>0 then
0e6d8     18 4E 05 F1 | 	add	fp, #24
0e6dc     A7 22 02 FB | 	rdlong	local03, fp
0e6e0     20 4E 85 F1 | 	sub	fp, #32
0e6e4     01 22 16 F2 | 	cmp	local03, #1 wc
0e6e8     78 00 90 CD |  if_b	jmp	#LR__1125
0e6ec                 | '   for i=numpar to 1 step -1
0e6ec     20 4E 05 F1 | 	add	fp, #32
0e6f0     A7 24 0A FB | 	rdlong	local04, fp wz
0e6f4     04 4E 85 F1 | 	sub	fp, #4
0e6f8     A7 24 62 FC | 	wrlong	local04, fp
0e6fc     1C 4E 85 F1 | 	sub	fp, #28
0e700     60 00 90 AD |  if_e	jmp	#LR__1124
0e704                 | LR__1123
0e704     A4 BA BF FD | 	call	#_pop
0e708     0C 4E 05 F1 | 	add	fp, #12
0e70c     A7 FA 61 FC | 	wrlong	result1, fp
0e710     04 4E 05 F1 | 	add	fp, #4
0e714     A7 FC 61 FC | 	wrlong	result2, fp
0e718     04 4E 05 F1 | 	add	fp, #4
0e71c     A7 FE 61 FC | 	wrlong	result3, fp
0e720     08 4E 05 F1 | 	add	fp, #8
0e724     A7 22 02 FB | 	rdlong	local03, fp
0e728     01 22 86 F1 | 	sub	local03, #1
0e72c     02 22 66 F0 | 	shl	local03, #2
0e730     18 4E 05 F1 | 	add	fp, #24
0e734     A7 22 02 F1 | 	add	local03, fp
0e738     28 4E 85 F1 | 	sub	fp, #40
0e73c     A7 12 02 F6 | 	mov	arg01, fp
0e740     0C 4E 85 F1 | 	sub	fp, #12
0e744     BC 46 B0 FD | 	call	#_converttoint
0e748     11 FB 61 FC | 	wrlong	result1, local03
0e74c     1C 4E 05 F1 | 	add	fp, #28
0e750     A7 24 02 FB | 	rdlong	local04, fp
0e754     01 24 8E F1 | 	sub	local04, #1 wz
0e758     A7 24 62 FC | 	wrlong	local04, fp
0e75c     1C 4E 85 F1 | 	sub	fp, #28
0e760     A0 FF 9F 5D |  if_ne	jmp	#LR__1123
0e764                 | LR__1124
0e764                 | LR__1125
0e764     18 4E 05 F1 | 	add	fp, #24
0e768     A7 1E 02 FB | 	rdlong	local01, fp
0e76c     04 1E 66 F0 | 	shl	local01, #4
0e770     34 00 00 FF 
0e774     F8 E5 05 F1 | 	add	objptr, ##27128
0e778     F2 1E 02 F1 | 	add	local01, objptr
0e77c     04 1E 06 F1 | 	add	local01, #4
0e780     0F 13 02 FB | 	rdlong	arg01, local01
0e784     0C 4E 05 F1 | 	add	fp, #12
0e788     A7 12 62 FC | 	wrlong	arg01, fp
0e78c     24 4E 85 F1 | 	sub	fp, #36
0e790     34 00 00 FF 
0e794     F8 E5 85 F1 | 	sub	objptr, ##27128
0e798     04 AB B0 FD | 	call	#_pslpeek
0e79c     FD 24 32 F9 | 	getword	local04, result1, #0
0e7a0     28 4E 05 F1 | 	add	fp, #40
0e7a4     A7 24 62 FC | 	wrlong	local04, fp
0e7a8     04 4E 85 F1 | 	sub	fp, #4
0e7ac     A7 12 02 FB | 	rdlong	arg01, fp
0e7b0     24 4E 85 F1 | 	sub	fp, #36
0e7b4     02 12 06 F1 | 	add	arg01, #2
0e7b8     8C AA B0 FD | 	call	#_pspeek
0e7bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e7c0     2C 4E 05 F1 | 	add	fp, #44
0e7c4     A7 FA 61 FC | 	wrlong	result1, fp
0e7c8                 | ' esize=pspeek(arrptr+2)
0e7c8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0e7c8     08 4E 85 F1 | 	sub	fp, #8
0e7cc     A7 12 02 FB | 	rdlong	arg01, fp
0e7d0     24 4E 85 F1 | 	sub	fp, #36
0e7d4     04 12 06 F1 | 	add	arg01, #4
0e7d8     C4 AA B0 FD | 	call	#_pslpeek
0e7dc     FD 24 02 F6 | 	mov	local04, result1
0e7e0     34 4E 05 F1 | 	add	fp, #52
0e7e4     A7 1E 02 FB | 	rdlong	local01, fp
0e7e8     34 4E 85 F1 | 	sub	fp, #52
0e7ec     12 1F 12 F2 | 	cmp	local01, local04 wc
0e7f0     54 00 90 3D |  if_ae	jmp	#LR__1126
0e7f4     24 4E 05 F1 | 	add	fp, #36
0e7f8     A7 12 02 FB | 	rdlong	arg01, fp
0e7fc     24 4E 85 F1 | 	sub	fp, #36
0e800     08 12 06 F1 | 	add	arg01, #8
0e804     98 AA B0 FD | 	call	#_pslpeek
0e808     FD 1E 02 F6 | 	mov	local01, result1
0e80c     38 4E 05 F1 | 	add	fp, #56
0e810     A7 24 02 FB | 	rdlong	local04, fp
0e814     38 4E 85 F1 | 	sub	fp, #56
0e818     0F 25 12 F2 | 	cmp	local04, local01 wc
0e81c     28 00 90 3D |  if_ae	jmp	#LR__1126
0e820     24 4E 05 F1 | 	add	fp, #36
0e824     A7 12 02 FB | 	rdlong	arg01, fp
0e828     24 4E 85 F1 | 	sub	fp, #36
0e82c     0C 12 06 F1 | 	add	arg01, #12
0e830     6C AA B0 FD | 	call	#_pslpeek
0e834     3C 4E 05 F1 | 	add	fp, #60
0e838     A7 24 02 FB | 	rdlong	local04, fp
0e83c     3C 4E 85 F1 | 	sub	fp, #60
0e840     FD 24 12 F2 | 	cmp	local04, result1 wc
0e844     0C 00 90 CD |  if_b	jmp	#LR__1127
0e848                 | LR__1126
0e848     31 12 06 F6 | 	mov	arg01, #49
0e84c     BC A7 B0 FD | 	call	#_printerror
0e850     60 02 90 FD | 	jmp	#LR__1143
0e854                 | LR__1127
0e854     24 4E 05 F1 | 	add	fp, #36
0e858     A7 12 02 FB | 	rdlong	arg01, fp
0e85c     09 25 02 F6 | 	mov	local04, arg01
0e860     10 24 06 F1 | 	add	local04, #16
0e864     24 4E 85 F1 | 	sub	fp, #36
0e868     04 12 06 F1 | 	add	arg01, #4
0e86c     30 AA B0 FD | 	call	#_pslpeek
0e870     FD 1E 02 F6 | 	mov	local01, result1
0e874     38 4E 05 F1 | 	add	fp, #56
0e878     A7 20 02 FB | 	rdlong	local02, fp
0e87c     10 1F 02 FD | 	qmul	local01, local02
0e880     04 4E 85 F1 | 	sub	fp, #4
0e884     A7 22 02 FB | 	rdlong	local03, fp
0e888     10 4E 85 F1 | 	sub	fp, #16
0e88c     A7 12 02 FB | 	rdlong	arg01, fp
0e890     24 4E 85 F1 | 	sub	fp, #36
0e894     08 12 06 F1 | 	add	arg01, #8
0e898     18 20 62 FD | 	getqx	local02
0e89c     10 23 02 F1 | 	add	local03, local02
0e8a0     FC A9 B0 FD | 	call	#_pslpeek
0e8a4     FD 20 02 F6 | 	mov	local02, result1
0e8a8     24 4E 05 F1 | 	add	fp, #36
0e8ac     A7 12 02 FB | 	rdlong	arg01, fp
0e8b0     24 4E 85 F1 | 	sub	fp, #36
0e8b4     04 12 06 F1 | 	add	arg01, #4
0e8b8     E4 A9 B0 FD | 	call	#_pslpeek
0e8bc     FD 20 02 FD | 	qmul	local02, result1
0e8c0     3C 4E 05 F1 | 	add	fp, #60
0e8c4     A7 20 02 FB | 	rdlong	local02, fp
0e8c8     18 1E 62 FD | 	getqx	local01
0e8cc     10 1F 02 FD | 	qmul	local01, local02
0e8d0     10 4E 85 F1 | 	sub	fp, #16
0e8d4     A7 20 02 FB | 	rdlong	local02, fp
0e8d8     18 1E 62 FD | 	getqx	local01
0e8dc     0F 23 02 F1 | 	add	local03, local01
0e8e0     11 21 02 FD | 	qmul	local02, local03
0e8e4     04 4E 05 F1 | 	add	fp, #4
0e8e8                 | ' 
0e8e8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0e8e8                 | ' select case arrtype
0e8e8     18 22 62 FD | 	getqx	local03
0e8ec     11 25 02 F1 | 	add	local04, local03
0e8f0     A7 24 62 FC | 	wrlong	local04, fp
0e8f4     08 4E 85 F1 | 	sub	fp, #8
0e8f8     A7 26 02 FB | 	rdlong	local05, fp
0e8fc     28 4E 85 F1 | 	sub	fp, #40
0e900     00 27 86 F1 | 	sub	local05, #256
0e904     0C 26 26 F3 | 	fle	local05, #12
0e908     30 26 62 FD | 	jmprel	local05
0e90c                 | LR__1128
0e90c     30 00 90 FD | 	jmp	#LR__1129
0e910     58 00 90 FD | 	jmp	#LR__1130
0e914     6C 00 90 FD | 	jmp	#LR__1131
0e918     80 00 90 FD | 	jmp	#LR__1132
0e91c     B0 00 90 FD | 	jmp	#LR__1133
0e920     E0 00 90 FD | 	jmp	#LR__1134
0e924     F4 00 90 FD | 	jmp	#LR__1135
0e928     08 01 90 FD | 	jmp	#LR__1136
0e92c     1C 01 90 FD | 	jmp	#LR__1137
0e930     30 01 90 FD | 	jmp	#LR__1138
0e934     44 01 90 FD | 	jmp	#LR__1139
0e938     58 01 90 FD | 	jmp	#LR__1140
0e93c     6C 01 90 FD | 	jmp	#LR__1141
0e940                 | LR__1129
0e940     A7 12 02 F6 | 	mov	arg01, fp
0e944     30 4E 05 F1 | 	add	fp, #48
0e948     A7 14 02 FB | 	rdlong	arg02, fp
0e94c     30 4E 85 F1 | 	sub	fp, #48
0e950     0C 16 06 F6 | 	mov	arg03, #12
0e954     0B 00 00 FF 
0e958     CC E4 05 F1 | 	add	objptr, ##5836
0e95c     84 DF B0 FD | 	call	#_psram_spin2_write
0e960     0B 00 00 FF 
0e964     CC E4 85 F1 | 	sub	objptr, ##5836
0e968     48 01 90 FD | 	jmp	#LR__1142
0e96c                 | LR__1130
0e96c     30 4E 05 F1 | 	add	fp, #48
0e970     A7 12 02 FB | 	rdlong	arg01, fp
0e974     30 4E 85 F1 | 	sub	fp, #48
0e978     A7 14 02 FB | 	rdlong	arg02, fp
0e97c     80 A8 B0 FD | 	call	#_pspoke
0e980     30 01 90 FD | 	jmp	#LR__1142
0e984                 | LR__1131
0e984     30 4E 05 F1 | 	add	fp, #48
0e988     A7 12 02 FB | 	rdlong	arg01, fp
0e98c     30 4E 85 F1 | 	sub	fp, #48
0e990     A7 14 02 FB | 	rdlong	arg02, fp
0e994     68 A8 B0 FD | 	call	#_pspoke
0e998     18 01 90 FD | 	jmp	#LR__1142
0e99c                 | LR__1132
0e99c     30 4E 05 F1 | 	add	fp, #48
0e9a0     A7 12 02 FB | 	rdlong	arg01, fp
0e9a4     30 4E 85 F1 | 	sub	fp, #48
0e9a8     A7 14 02 FB | 	rdlong	arg02, fp
0e9ac     50 A8 B0 FD | 	call	#_pspoke
0e9b0     30 4E 05 F1 | 	add	fp, #48
0e9b4     A7 12 02 FB | 	rdlong	arg01, fp
0e9b8     30 4E 85 F1 | 	sub	fp, #48
0e9bc     01 12 06 F1 | 	add	arg01, #1
0e9c0     A7 14 02 FB | 	rdlong	arg02, fp
0e9c4     08 14 46 F0 | 	shr	arg02, #8
0e9c8     34 A8 B0 FD | 	call	#_pspoke
0e9cc     E4 00 90 FD | 	jmp	#LR__1142
0e9d0                 | LR__1133
0e9d0     30 4E 05 F1 | 	add	fp, #48
0e9d4     A7 12 02 FB | 	rdlong	arg01, fp
0e9d8     30 4E 85 F1 | 	sub	fp, #48
0e9dc     A7 14 02 FB | 	rdlong	arg02, fp
0e9e0     1C A8 B0 FD | 	call	#_pspoke
0e9e4     30 4E 05 F1 | 	add	fp, #48
0e9e8     A7 12 02 FB | 	rdlong	arg01, fp
0e9ec     30 4E 85 F1 | 	sub	fp, #48
0e9f0     01 12 06 F1 | 	add	arg01, #1
0e9f4     A7 14 02 FB | 	rdlong	arg02, fp
0e9f8     08 14 46 F0 | 	shr	arg02, #8
0e9fc     00 A8 B0 FD | 	call	#_pspoke
0ea00     B0 00 90 FD | 	jmp	#LR__1142
0ea04                 | LR__1134
0ea04     30 4E 05 F1 | 	add	fp, #48
0ea08     A7 12 02 FB | 	rdlong	arg01, fp
0ea0c     30 4E 85 F1 | 	sub	fp, #48
0ea10     A7 14 02 FB | 	rdlong	arg02, fp
0ea14     58 A7 B0 FD | 	call	#_pslpoke
0ea18     98 00 90 FD | 	jmp	#LR__1142
0ea1c                 | LR__1135
0ea1c     30 4E 05 F1 | 	add	fp, #48
0ea20     A7 12 02 FB | 	rdlong	arg01, fp
0ea24     30 4E 85 F1 | 	sub	fp, #48
0ea28     A7 14 02 FB | 	rdlong	arg02, fp
0ea2c     40 A7 B0 FD | 	call	#_pslpoke
0ea30     80 00 90 FD | 	jmp	#LR__1142
0ea34                 | LR__1136
0ea34     30 4E 05 F1 | 	add	fp, #48
0ea38     A7 12 02 FB | 	rdlong	arg01, fp
0ea3c     30 4E 85 F1 | 	sub	fp, #48
0ea40     A7 14 02 FB | 	rdlong	arg02, fp
0ea44     28 A7 B0 FD | 	call	#_pslpoke
0ea48     68 00 90 FD | 	jmp	#LR__1142
0ea4c                 | LR__1137
0ea4c     30 4E 05 F1 | 	add	fp, #48
0ea50     A7 12 02 FB | 	rdlong	arg01, fp
0ea54     30 4E 85 F1 | 	sub	fp, #48
0ea58     A7 14 02 FB | 	rdlong	arg02, fp
0ea5c     10 A7 B0 FD | 	call	#_pslpoke
0ea60     50 00 90 FD | 	jmp	#LR__1142
0ea64                 | LR__1138
0ea64     30 4E 05 F1 | 	add	fp, #48
0ea68     A7 12 02 FB | 	rdlong	arg01, fp
0ea6c     30 4E 85 F1 | 	sub	fp, #48
0ea70     A7 14 02 FB | 	rdlong	arg02, fp
0ea74     F8 A6 B0 FD | 	call	#_pslpoke
0ea78     38 00 90 FD | 	jmp	#LR__1142
0ea7c                 | LR__1139
0ea7c     30 4E 05 F1 | 	add	fp, #48
0ea80     A7 12 02 FB | 	rdlong	arg01, fp
0ea84     30 4E 85 F1 | 	sub	fp, #48
0ea88     A7 14 02 FB | 	rdlong	arg02, fp
0ea8c     E0 A6 B0 FD | 	call	#_pslpoke
0ea90     20 00 90 FD | 	jmp	#LR__1142
0ea94                 | LR__1140
0ea94     30 4E 05 F1 | 	add	fp, #48
0ea98     A7 12 02 FB | 	rdlong	arg01, fp
0ea9c     30 4E 85 F1 | 	sub	fp, #48
0eaa0     A7 14 02 FB | 	rdlong	arg02, fp
0eaa4     C8 A6 B0 FD | 	call	#_pslpoke
0eaa8     08 00 90 FD | 	jmp	#LR__1142
0eaac                 | LR__1141
0eaac     2F 12 06 F6 | 	mov	arg01, #47
0eab0     58 A5 B0 FD | 	call	#_printerror
0eab4                 | LR__1142
0eab4                 | LR__1143
0eab4     A7 F0 03 F6 | 	mov	ptra, fp
0eab8     B2 00 A0 FD | 	call	#popregs_
0eabc                 | _do_assign_ret
0eabc     2D 00 64 FD | 	ret
0eac0                 | 
0eac0                 | ' 
0eac0                 | ' 
0eac0                 | ' ' --------------------- Read a variable and push to the stack
0eac0                 | ' 
0eac0                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0eac0                 | ' 
0eac0                 | ' sub do_getvar
0eac0                 | _do_getvar
0eac0     04 4A 05 F6 | 	mov	COUNT_, #4
0eac4     A8 00 A0 FD | 	call	#pushregs_
0eac8     3C F0 07 F1 | 	add	ptra, #60
0eacc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0eacc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0eacc     6A 00 00 FF 
0ead0     70 E4 05 F1 | 	add	objptr, ##54384
0ead4     F2 1E 02 FB | 	rdlong	local01, objptr
0ead8     0F 17 02 F6 | 	mov	arg03, local01
0eadc     01 16 66 F0 | 	shl	arg03, #1
0eae0     0F 17 02 F1 | 	add	arg03, local01
0eae4     02 16 66 F0 | 	shl	arg03, #2
0eae8     03 00 00 FF 
0eaec     04 E4 85 F1 | 	sub	objptr, ##1540
0eaf0     F2 16 02 F1 | 	add	arg03, objptr
0eaf4     04 16 06 F1 | 	add	arg03, #4
0eaf8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0eafc     67 00 00 FF 
0eb00     6C E4 85 F1 | 	sub	objptr, ##52844
0eb04     C4 00 90 5D |  if_ne	jmp	#LR__1151
0eb08     6A 00 00 FF 
0eb0c     70 E4 05 F1 | 	add	objptr, ##54384
0eb10     F2 1E 02 FB | 	rdlong	local01, objptr
0eb14     0F 13 02 F6 | 	mov	arg01, local01
0eb18     01 12 66 F0 | 	shl	arg01, #1
0eb1c     0F 13 02 F1 | 	add	arg01, local01
0eb20     02 12 66 F0 | 	shl	arg01, #2
0eb24     03 00 00 FF 
0eb28     04 E4 85 F1 | 	sub	objptr, ##1540
0eb2c     F2 12 02 F1 | 	add	arg01, objptr
0eb30     09 1F 02 FB | 	rdlong	local01, arg01
0eb34     04 1E 66 F0 | 	shl	local01, #4
0eb38     32 00 00 FF 
0eb3c     74 E4 85 F1 | 	sub	objptr, ##25716
0eb40     F2 1E 02 F1 | 	add	local01, objptr
0eb44     04 1E 06 F1 | 	add	local01, #4
0eb48     0F 13 02 FB | 	rdlong	arg01, local01
0eb4c     04 1E 06 F1 | 	add	local01, #4
0eb50     0F 1F 02 FB | 	rdlong	local01, local01
0eb54     A7 12 62 FC | 	wrlong	arg01, fp
0eb58     04 4E 05 F1 | 	add	fp, #4
0eb5c     A7 1E 62 FC | 	wrlong	local01, fp
0eb60     35 00 00 FF 
0eb64     78 E4 05 F1 | 	add	objptr, ##27256
0eb68     F2 1E 02 FB | 	rdlong	local01, objptr
0eb6c     0F 13 02 F6 | 	mov	arg01, local01
0eb70     01 12 66 F0 | 	shl	arg01, #1
0eb74     0F 13 02 F1 | 	add	arg01, local01
0eb78     02 12 66 F0 | 	shl	arg01, #2
0eb7c     03 00 00 FF 
0eb80     04 E4 85 F1 | 	sub	objptr, ##1540
0eb84     F2 12 02 F1 | 	add	arg01, objptr
0eb88     09 1F 02 FB | 	rdlong	local01, arg01
0eb8c     04 1E 66 F0 | 	shl	local01, #4
0eb90     32 00 00 FF 
0eb94     74 E4 85 F1 | 	sub	objptr, ##25716
0eb98     F2 1E 02 F1 | 	add	local01, objptr
0eb9c     0C 1E 06 F1 | 	add	local01, #12
0eba0     0F 1F 02 FB | 	rdlong	local01, local01
0eba4     04 4E 05 F1 | 	add	fp, #4
0eba8     A7 1E 62 FC | 	wrlong	local01, fp
0ebac                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ebac                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ebac                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ebac     08 4E 85 F1 | 	sub	fp, #8
0ebb0     00 1F 16 F2 | 	cmp	local01, #256 wc
0ebb4     34 00 00 FF 
0ebb8     F8 E5 85 F1 | 	sub	objptr, ##27128
0ebbc     0C 00 90 3D |  if_ae	jmp	#LR__1150
0ebc0     A7 12 02 F6 | 	mov	arg01, fp
0ebc4     7C B6 BF FD | 	call	#_push
0ebc8     A0 04 90 FD | 	jmp	#LR__1172
0ebcc                 | LR__1150
0ebcc                 | LR__1151
0ebcc     6A 00 00 FF 
0ebd0     70 E4 05 F1 | 	add	objptr, ##54384
0ebd4     F2 16 02 FB | 	rdlong	arg03, objptr
0ebd8     0B 15 02 F6 | 	mov	arg02, arg03
0ebdc     01 14 66 F0 | 	shl	arg02, #1
0ebe0     0B 15 02 F1 | 	add	arg02, arg03
0ebe4     02 14 66 F0 | 	shl	arg02, #2
0ebe8     03 00 00 FF 
0ebec     04 E4 85 F1 | 	sub	objptr, ##1540
0ebf0     F2 14 02 F1 | 	add	arg02, objptr
0ebf4     0A 17 02 FB | 	rdlong	arg03, arg02
0ebf8     04 16 66 F0 | 	shl	arg03, #4
0ebfc     32 00 00 FF 
0ec00     74 E4 85 F1 | 	sub	objptr, ##25716
0ec04     F2 16 02 F1 | 	add	arg03, objptr
0ec08     04 16 06 F1 | 	add	arg03, #4
0ec0c     0B 13 02 FB | 	rdlong	arg01, arg03
0ec10     0C 4E 05 F1 | 	add	fp, #12
0ec14     A7 12 62 FC | 	wrlong	arg01, fp
0ec18     0C 4E 85 F1 | 	sub	fp, #12
0ec1c     34 00 00 FF 
0ec20     F8 E5 85 F1 | 	sub	objptr, ##27128
0ec24     78 A6 B0 FD | 	call	#_pslpeek
0ec28     FD FA 31 F9 | 	getword	result1, result1, #0
0ec2c     10 4E 05 F1 | 	add	fp, #16
0ec30     A7 FA 61 FC | 	wrlong	result1, fp
0ec34     6A 00 00 FF 
0ec38     70 E4 05 F1 | 	add	objptr, ##54384
0ec3c     F2 16 02 FB | 	rdlong	arg03, objptr
0ec40     0B 15 02 F6 | 	mov	arg02, arg03
0ec44     01 14 66 F0 | 	shl	arg02, #1
0ec48     0B 15 02 F1 | 	add	arg02, arg03
0ec4c     02 14 66 F0 | 	shl	arg02, #2
0ec50     03 00 00 FF 
0ec54     04 E4 85 F1 | 	sub	objptr, ##1540
0ec58     F2 14 02 F1 | 	add	arg02, objptr
0ec5c     04 14 06 F1 | 	add	arg02, #4
0ec60     0A 17 02 FB | 	rdlong	arg03, arg02
0ec64     04 4E 05 F1 | 	add	fp, #4
0ec68     A7 16 62 FC | 	wrlong	arg03, fp
0ec6c     08 4E 85 F1 | 	sub	fp, #8
0ec70     A7 12 02 FB | 	rdlong	arg01, fp
0ec74     0C 4E 85 F1 | 	sub	fp, #12
0ec78     02 12 06 F1 | 	add	arg01, #2
0ec7c     67 00 00 FF 
0ec80     6C E4 85 F1 | 	sub	objptr, ##52844
0ec84     C0 A5 B0 FD | 	call	#_pspeek
0ec88     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ec8c     18 4E 05 F1 | 	add	fp, #24
0ec90     A7 FA 61 FC | 	wrlong	result1, fp
0ec94     0C 4E 85 F1 | 	sub	fp, #12
0ec98     A7 12 02 FB | 	rdlong	arg01, fp
0ec9c     0C 4E 85 F1 | 	sub	fp, #12
0eca0     04 12 06 F1 | 	add	arg01, #4
0eca4     F8 A5 B0 FD | 	call	#_pslpeek
0eca8     1C 4E 05 F1 | 	add	fp, #28
0ecac     A7 FA 61 FC | 	wrlong	result1, fp
0ecb0     10 4E 85 F1 | 	sub	fp, #16
0ecb4     A7 12 02 FB | 	rdlong	arg01, fp
0ecb8     0C 4E 85 F1 | 	sub	fp, #12
0ecbc     08 12 06 F1 | 	add	arg01, #8
0ecc0     DC A5 B0 FD | 	call	#_pslpeek
0ecc4     20 4E 05 F1 | 	add	fp, #32
0ecc8     A7 FA 61 FC | 	wrlong	result1, fp
0eccc     14 4E 85 F1 | 	sub	fp, #20
0ecd0     A7 12 02 FB | 	rdlong	arg01, fp
0ecd4     0C 4E 85 F1 | 	sub	fp, #12
0ecd8     0C 12 06 F1 | 	add	arg01, #12
0ecdc     C0 A5 B0 FD | 	call	#_pslpeek
0ece0     24 4E 05 F1 | 	add	fp, #36
0ece4     A7 FA 61 FC | 	wrlong	result1, fp
0ece8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0ece8                 | ' esize=pspeek(arrptr+2)
0ece8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ece8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ece8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ece8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0ece8     10 4E 85 F1 | 	sub	fp, #16
0ecec     A7 16 02 FB | 	rdlong	arg03, fp
0ecf0     14 4E 85 F1 | 	sub	fp, #20
0ecf4     03 16 16 F2 | 	cmp	arg03, #3 wc
0ecf8     38 00 90 CD |  if_b	jmp	#LR__1152
0ecfc     AC B4 BF FD | 	call	#_pop
0ed00     FF 16 02 F6 | 	mov	arg03, result3
0ed04     A7 FA 61 FC | 	wrlong	result1, fp
0ed08     04 4E 05 F1 | 	add	fp, #4
0ed0c     A7 FC 61 FC | 	wrlong	result2, fp
0ed10     04 4E 05 F1 | 	add	fp, #4
0ed14     A7 16 62 FC | 	wrlong	arg03, fp
0ed18     08 4E 85 F1 | 	sub	fp, #8
0ed1c     A7 12 02 F6 | 	mov	arg01, fp
0ed20     E0 40 B0 FD | 	call	#_converttoint
0ed24     30 4E 05 F1 | 	add	fp, #48
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c     30 4E 85 F1 | 	sub	fp, #48
0ed30     0C 00 90 FD | 	jmp	#LR__1153
0ed34                 | LR__1152
0ed34     30 4E 05 F1 | 	add	fp, #48
0ed38     A7 00 68 FC | 	wrlong	#0, fp
0ed3c     30 4E 85 F1 | 	sub	fp, #48
0ed40                 | LR__1153
0ed40                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0ed40     14 4E 05 F1 | 	add	fp, #20
0ed44     A7 16 02 FB | 	rdlong	arg03, fp
0ed48     14 4E 85 F1 | 	sub	fp, #20
0ed4c     02 16 16 F2 | 	cmp	arg03, #2 wc
0ed50     38 00 90 CD |  if_b	jmp	#LR__1154
0ed54     54 B4 BF FD | 	call	#_pop
0ed58     FF 16 02 F6 | 	mov	arg03, result3
0ed5c     A7 FA 61 FC | 	wrlong	result1, fp
0ed60     04 4E 05 F1 | 	add	fp, #4
0ed64     A7 FC 61 FC | 	wrlong	result2, fp
0ed68     04 4E 05 F1 | 	add	fp, #4
0ed6c     A7 16 62 FC | 	wrlong	arg03, fp
0ed70     08 4E 85 F1 | 	sub	fp, #8
0ed74     A7 12 02 F6 | 	mov	arg01, fp
0ed78     88 40 B0 FD | 	call	#_converttoint
0ed7c     2C 4E 05 F1 | 	add	fp, #44
0ed80     A7 FA 61 FC | 	wrlong	result1, fp
0ed84     2C 4E 85 F1 | 	sub	fp, #44
0ed88     0C 00 90 FD | 	jmp	#LR__1155
0ed8c                 | LR__1154
0ed8c     2C 4E 05 F1 | 	add	fp, #44
0ed90     A7 00 68 FC | 	wrlong	#0, fp
0ed94     2C 4E 85 F1 | 	sub	fp, #44
0ed98                 | LR__1155
0ed98                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0ed98     14 4E 05 F1 | 	add	fp, #20
0ed9c     A7 16 02 FB | 	rdlong	arg03, fp
0eda0     14 4E 85 F1 | 	sub	fp, #20
0eda4     01 16 16 F2 | 	cmp	arg03, #1 wc
0eda8     38 00 90 CD |  if_b	jmp	#LR__1156
0edac     FC B3 BF FD | 	call	#_pop
0edb0     FF 16 02 F6 | 	mov	arg03, result3
0edb4     A7 FA 61 FC | 	wrlong	result1, fp
0edb8     04 4E 05 F1 | 	add	fp, #4
0edbc     A7 FC 61 FC | 	wrlong	result2, fp
0edc0     04 4E 05 F1 | 	add	fp, #4
0edc4     A7 16 62 FC | 	wrlong	arg03, fp
0edc8     08 4E 85 F1 | 	sub	fp, #8
0edcc     A7 12 02 F6 | 	mov	arg01, fp
0edd0     30 40 B0 FD | 	call	#_converttoint
0edd4     28 4E 05 F1 | 	add	fp, #40
0edd8     A7 FA 61 FC | 	wrlong	result1, fp
0eddc     28 4E 85 F1 | 	sub	fp, #40
0ede0     0C 00 90 FD | 	jmp	#LR__1157
0ede4                 | LR__1156
0ede4     28 4E 05 F1 | 	add	fp, #40
0ede8     A7 00 68 FC | 	wrlong	#0, fp
0edec     28 4E 85 F1 | 	sub	fp, #40
0edf0                 | LR__1157
0edf0     0C 4E 05 F1 | 	add	fp, #12
0edf4     A7 20 02 FB | 	rdlong	local02, fp
0edf8     1C 4E 05 F1 | 	add	fp, #28
0edfc     A7 22 02 FB | 	rdlong	local03, fp
0ee00     04 4E 05 F1 | 	add	fp, #4
0ee04     A7 FC 01 FB | 	rdlong	result2, fp
0ee08     10 4E 85 F1 | 	sub	fp, #16
0ee0c     A7 FE 01 FB | 	rdlong	result3, fp
0ee10     FF FC 01 FD | 	qmul	result2, result3
0ee14     10 20 06 F1 | 	add	local02, #16
0ee18     14 4E 05 F1 | 	add	fp, #20
0ee1c     A7 FC 01 FB | 	rdlong	result2, fp
0ee20     18 FA 61 FD | 	getqx	result1
0ee24     FF FC 01 FD | 	qmul	result2, result3
0ee28     FD 22 02 F1 | 	add	local03, result1
0ee2c     10 4E 85 F1 | 	sub	fp, #16
0ee30     A7 FE 01 FB | 	rdlong	result3, fp
0ee34     18 FC 61 FD | 	getqx	result2
0ee38     FF FC 01 FD | 	qmul	result2, result3
0ee3c     08 4E 85 F1 | 	sub	fp, #8
0ee40     A7 FE 01 FB | 	rdlong	result3, fp
0ee44     18 FC 61 FD | 	getqx	result2
0ee48     FE 22 02 F1 | 	add	local03, result2
0ee4c     FF 22 02 FD | 	qmul	local03, result3
0ee50     1C 4E 05 F1 | 	add	fp, #28
0ee54                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ee54                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ee54                 | ' 
0ee54                 | ' select case vartype
0ee54     18 FC 61 FD | 	getqx	result2
0ee58     FE 20 02 F1 | 	add	local02, result2
0ee5c     A7 20 62 FC | 	wrlong	local02, fp
0ee60     24 4E 85 F1 | 	sub	fp, #36
0ee64     A7 24 02 FB | 	rdlong	local04, fp
0ee68     10 4E 85 F1 | 	sub	fp, #16
0ee6c     00 25 86 F1 | 	sub	local04, #256
0ee70     0C 24 26 F3 | 	fle	local04, #12
0ee74     30 24 62 FD | 	jmprel	local04
0ee78                 | LR__1158
0ee78     30 00 90 FD | 	jmp	#LR__1159
0ee7c     58 00 90 FD | 	jmp	#LR__1160
0ee80     8C 00 90 FD | 	jmp	#LR__1161
0ee84     AC 00 90 FD | 	jmp	#LR__1162
0ee88     E8 00 90 FD | 	jmp	#LR__1163
0ee8c     08 01 90 FD | 	jmp	#LR__1164
0ee90     24 01 90 FD | 	jmp	#LR__1165
0ee94     40 01 90 FD | 	jmp	#LR__1166
0ee98     50 01 90 FD | 	jmp	#LR__1167
0ee9c     60 01 90 FD | 	jmp	#LR__1168
0eea0     7C 01 90 FD | 	jmp	#LR__1169
0eea4     8C 01 90 FD | 	jmp	#LR__1170
0eea8     B8 01 90 FD | 	jmp	#LR__1171
0eeac                 | LR__1159
0eeac     A7 12 02 F6 | 	mov	arg01, fp
0eeb0     34 4E 05 F1 | 	add	fp, #52
0eeb4     A7 14 02 FB | 	rdlong	arg02, fp
0eeb8     34 4E 85 F1 | 	sub	fp, #52
0eebc     0C 16 06 F6 | 	mov	arg03, #12
0eec0     0B 00 00 FF 
0eec4     CC E4 05 F1 | 	add	objptr, ##5836
0eec8     7C D9 B0 FD | 	call	#_psram_spin2_read1
0eecc     0B 00 00 FF 
0eed0     CC E4 85 F1 | 	sub	objptr, ##5836
0eed4     8C 01 90 FD | 	jmp	#LR__1171
0eed8                 | LR__1160
0eed8     08 4E 05 F1 | 	add	fp, #8
0eedc     A7 38 68 FC | 	wrlong	#28, fp
0eee0     2C 4E 05 F1 | 	add	fp, #44
0eee4     A7 12 02 FB | 	rdlong	arg01, fp
0eee8     34 4E 85 F1 | 	sub	fp, #52
0eeec     58 A3 B0 FD | 	call	#_pspeek
0eef0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eef4     A7 FA 61 FC | 	wrlong	result1, fp
0eef8     80 FA 15 F2 | 	cmp	result1, #128 wc
0eefc     00 1F 66 36 |  if_ae	neg	local01, #256
0ef00     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ef04     11 1F 42 35 |  if_ae	or	local01, local03
0ef08     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ef0c     54 01 90 FD | 	jmp	#LR__1171
0ef10                 | LR__1161
0ef10     08 4E 05 F1 | 	add	fp, #8
0ef14     A7 3A 68 FC | 	wrlong	#29, fp
0ef18     2C 4E 05 F1 | 	add	fp, #44
0ef1c     A7 12 02 FB | 	rdlong	arg01, fp
0ef20     34 4E 85 F1 | 	sub	fp, #52
0ef24     20 A3 B0 FD | 	call	#_pspeek
0ef28     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ef2c     A7 FA 61 FC | 	wrlong	result1, fp
0ef30     30 01 90 FD | 	jmp	#LR__1171
0ef34                 | LR__1162
0ef34     08 4E 05 F1 | 	add	fp, #8
0ef38     A7 38 68 FC | 	wrlong	#28, fp
0ef3c     2C 4E 05 F1 | 	add	fp, #44
0ef40     A7 12 02 FB | 	rdlong	arg01, fp
0ef44     34 4E 85 F1 | 	sub	fp, #52
0ef48     54 A3 B0 FD | 	call	#_pslpeek
0ef4c     FD FA 31 F9 | 	getword	result1, result1, #0
0ef50     A7 FA 61 FC | 	wrlong	result1, fp
0ef54     40 00 00 FF 
0ef58     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0ef5c     FF 7F 00 3F 
0ef60     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0ef64     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ef68     11 1F 42 35 |  if_ae	or	local01, local03
0ef6c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ef70     F0 00 90 FD | 	jmp	#LR__1171
0ef74                 | LR__1163
0ef74     08 4E 05 F1 | 	add	fp, #8
0ef78     A7 3A 68 FC | 	wrlong	#29, fp
0ef7c     2C 4E 05 F1 | 	add	fp, #44
0ef80     A7 12 02 FB | 	rdlong	arg01, fp
0ef84     34 4E 85 F1 | 	sub	fp, #52
0ef88     14 A3 B0 FD | 	call	#_pslpeek
0ef8c     FD FA 31 F9 | 	getword	result1, result1, #0
0ef90     A7 FA 61 FC | 	wrlong	result1, fp
0ef94     CC 00 90 FD | 	jmp	#LR__1171
0ef98                 | LR__1164
0ef98     08 4E 05 F1 | 	add	fp, #8
0ef9c     A7 38 68 FC | 	wrlong	#28, fp
0efa0     2C 4E 05 F1 | 	add	fp, #44
0efa4     A7 12 02 FB | 	rdlong	arg01, fp
0efa8     34 4E 85 F1 | 	sub	fp, #52
0efac     F0 A2 B0 FD | 	call	#_pslpeek
0efb0     A7 FA 61 FC | 	wrlong	result1, fp
0efb4     AC 00 90 FD | 	jmp	#LR__1171
0efb8                 | LR__1165
0efb8     08 4E 05 F1 | 	add	fp, #8
0efbc     A7 3A 68 FC | 	wrlong	#29, fp
0efc0     2C 4E 05 F1 | 	add	fp, #44
0efc4     A7 12 02 FB | 	rdlong	arg01, fp
0efc8     34 4E 85 F1 | 	sub	fp, #52
0efcc     D0 A2 B0 FD | 	call	#_pslpeek
0efd0     A7 FA 61 FC | 	wrlong	result1, fp
0efd4     8C 00 90 FD | 	jmp	#LR__1171
0efd8                 | LR__1166
0efd8     08 4E 05 F1 | 	add	fp, #8
0efdc     A7 FE 69 FC | 	wrlong	#255, fp
0efe0     08 4E 85 F1 | 	sub	fp, #8
0efe4     A7 60 68 FC | 	wrlong	#48, fp
0efe8     78 00 90 FD | 	jmp	#LR__1171
0efec                 | LR__1167
0efec     08 4E 05 F1 | 	add	fp, #8
0eff0     A7 FE 69 FC | 	wrlong	#255, fp
0eff4     08 4E 85 F1 | 	sub	fp, #8
0eff8     A7 60 68 FC | 	wrlong	#48, fp
0effc     64 00 90 FD | 	jmp	#LR__1171
0f000                 | LR__1168
0f000     08 4E 05 F1 | 	add	fp, #8
0f004     A7 3C 68 FC | 	wrlong	#30, fp
0f008     2C 4E 05 F1 | 	add	fp, #44
0f00c     A7 12 02 FB | 	rdlong	arg01, fp
0f010     34 4E 85 F1 | 	sub	fp, #52
0f014     88 A2 B0 FD | 	call	#_pslpeek
0f018     A7 FA 61 FC | 	wrlong	result1, fp
0f01c     44 00 90 FD | 	jmp	#LR__1171
0f020                 | LR__1169
0f020     08 4E 05 F1 | 	add	fp, #8
0f024     A7 FE 69 FC | 	wrlong	#255, fp
0f028     08 4E 85 F1 | 	sub	fp, #8
0f02c     A7 60 68 FC | 	wrlong	#48, fp
0f030     30 00 90 FD | 	jmp	#LR__1171
0f034                 | LR__1170
0f034     08 4E 05 F1 | 	add	fp, #8
0f038     A7 3E 68 FC | 	wrlong	#31, fp
0f03c     2C 4E 05 F1 | 	add	fp, #44
0f040     A7 12 02 FB | 	rdlong	arg01, fp
0f044     34 4E 85 F1 | 	sub	fp, #52
0f048     54 A2 B0 FD | 	call	#_pslpeek
0f04c     A7 FA 61 FC | 	wrlong	result1, fp
0f050     00 04 00 FF 
0f054     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f058     08 4E 05 31 |  if_ae	add	fp, #8
0f05c     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f060     08 4E 85 31 |  if_ae	sub	fp, #8
0f064                 | LR__1171
0f064     A7 12 02 F6 | 	mov	arg01, fp
0f068     D8 B1 BF FD | 	call	#_push
0f06c                 | LR__1172
0f06c     A7 F0 03 F6 | 	mov	ptra, fp
0f070     B2 00 A0 FD | 	call	#popregs_
0f074                 | _do_getvar_ret
0f074     2D 00 64 FD | 	ret
0f078                 | 
0f078                 | ' 
0f078                 | ' 
0f078                 | ' sub do_getaddr
0f078                 | _do_getaddr
0f078     01 4A 05 F6 | 	mov	COUNT_, #1
0f07c     A8 00 A0 FD | 	call	#pushregs_
0f080     38 F0 07 F1 | 	add	ptra, #56
0f084                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f084                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f084     6A 00 00 FF 
0f088     70 E4 05 F1 | 	add	objptr, ##54384
0f08c     F2 12 02 FB | 	rdlong	arg01, objptr
0f090     09 FD 01 F6 | 	mov	result2, arg01
0f094     01 FC 65 F0 | 	shl	result2, #1
0f098     09 FD 01 F1 | 	add	result2, arg01
0f09c     02 FC 65 F0 | 	shl	result2, #2
0f0a0     03 00 00 FF 
0f0a4     04 E4 85 F1 | 	sub	objptr, ##1540
0f0a8     F2 FC 01 F1 | 	add	result2, objptr
0f0ac     04 FC 05 F1 | 	add	result2, #4
0f0b0     FE FC 09 FB | 	rdlong	result2, result2 wz
0f0b4     67 00 00 FF 
0f0b8     6C E4 85 F1 | 	sub	objptr, ##52844
0f0bc     C4 00 90 5D |  if_ne	jmp	#LR__1180
0f0c0     6A 00 00 FF 
0f0c4     70 E4 05 F1 | 	add	objptr, ##54384
0f0c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0cc     09 FD 01 F6 | 	mov	result2, arg01
0f0d0     01 FC 65 F0 | 	shl	result2, #1
0f0d4     09 FD 01 F1 | 	add	result2, arg01
0f0d8     02 FC 65 F0 | 	shl	result2, #2
0f0dc     03 00 00 FF 
0f0e0     04 E4 85 F1 | 	sub	objptr, ##1540
0f0e4     F2 FC 01 F1 | 	add	result2, objptr
0f0e8     FE 12 02 FB | 	rdlong	arg01, result2
0f0ec     04 12 66 F0 | 	shl	arg01, #4
0f0f0     32 00 00 FF 
0f0f4     74 E4 85 F1 | 	sub	objptr, ##25716
0f0f8     F2 12 02 F1 | 	add	arg01, objptr
0f0fc     0C 12 06 F1 | 	add	arg01, #12
0f100     09 13 02 FB | 	rdlong	arg01, arg01
0f104     08 4E 05 F1 | 	add	fp, #8
0f108     A7 12 62 FC | 	wrlong	arg01, fp
0f10c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f10c                 | '    if t1.result_type>=array_no_type then goto 2200
0f10c     08 4E 85 F1 | 	sub	fp, #8
0f110     00 13 16 F2 | 	cmp	arg01, #256 wc
0f114     34 00 00 FF 
0f118     F8 E5 85 F1 | 	sub	objptr, ##27128
0f11c     64 00 90 3D |  if_ae	jmp	#LR__1181
0f120     6A 00 00 FF 
0f124     70 E4 05 F1 | 	add	objptr, ##54384
0f128     F2 12 02 FB | 	rdlong	arg01, objptr
0f12c     09 FB 01 F6 | 	mov	result1, arg01
0f130     01 FA 65 F0 | 	shl	result1, #1
0f134     09 FB 01 F1 | 	add	result1, arg01
0f138     02 FA 65 F0 | 	shl	result1, #2
0f13c     03 00 00 FF 
0f140     04 E4 85 F1 | 	sub	objptr, ##1540
0f144     F2 FA 01 F1 | 	add	result1, objptr
0f148     FD FA 01 FB | 	rdlong	result1, result1
0f14c     04 FA 65 F0 | 	shl	result1, #4
0f150     32 00 00 FF 
0f154     74 E4 85 F1 | 	sub	objptr, ##25716
0f158     F2 FA 01 F1 | 	add	result1, objptr
0f15c     04 FA 05 F1 | 	add	result1, #4
0f160     34 00 00 FF 
0f164     F8 E5 85 F1 | 	sub	objptr, ##27128
0f168     A7 FA 61 FC | 	wrlong	result1, fp
0f16c     08 4E 05 F1 | 	add	fp, #8
0f170     A7 3A 68 FC | 	wrlong	#29, fp
0f174     08 4E 85 F1 | 	sub	fp, #8
0f178     A7 12 02 F6 | 	mov	arg01, fp
0f17c     C4 B0 BF FD | 	call	#_push
0f180                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0f180                 | '   t1.result_type=result_uint
0f180                 | '   push t1 : return
0f180     D8 02 90 FD | 	jmp	#LR__1190
0f184                 | LR__1180
0f184                 | LR__1181
0f184     6A 00 00 FF 
0f188     70 E4 05 F1 | 	add	objptr, ##54384
0f18c     F2 FE 01 FB | 	rdlong	result3, objptr
0f190     FF 12 02 F6 | 	mov	arg01, result3
0f194     01 12 66 F0 | 	shl	arg01, #1
0f198     FF 12 02 F1 | 	add	arg01, result3
0f19c     02 12 66 F0 | 	shl	arg01, #2
0f1a0     03 00 00 FF 
0f1a4     04 E4 85 F1 | 	sub	objptr, ##1540
0f1a8     F2 12 02 F1 | 	add	arg01, objptr
0f1ac     09 13 02 FB | 	rdlong	arg01, arg01
0f1b0     04 12 66 F0 | 	shl	arg01, #4
0f1b4     32 00 00 FF 
0f1b8     74 E4 85 F1 | 	sub	objptr, ##25716
0f1bc     F2 12 02 F1 | 	add	arg01, objptr
0f1c0     04 12 06 F1 | 	add	arg01, #4
0f1c4     09 13 02 FB | 	rdlong	arg01, arg01
0f1c8     0C 4E 05 F1 | 	add	fp, #12
0f1cc     A7 12 62 FC | 	wrlong	arg01, fp
0f1d0     0C 4E 85 F1 | 	sub	fp, #12
0f1d4     34 00 00 FF 
0f1d8     F8 E5 85 F1 | 	sub	objptr, ##27128
0f1dc     C0 A0 B0 FD | 	call	#_pslpeek
0f1e0     FD FA 31 F9 | 	getword	result1, result1, #0
0f1e4     10 4E 05 F1 | 	add	fp, #16
0f1e8     A7 FA 61 FC | 	wrlong	result1, fp
0f1ec     6A 00 00 FF 
0f1f0     70 E4 05 F1 | 	add	objptr, ##54384
0f1f4     F2 FE 01 FB | 	rdlong	result3, objptr
0f1f8     FF 12 02 F6 | 	mov	arg01, result3
0f1fc     01 12 66 F0 | 	shl	arg01, #1
0f200     FF 12 02 F1 | 	add	arg01, result3
0f204     02 12 66 F0 | 	shl	arg01, #2
0f208     03 00 00 FF 
0f20c     04 E4 85 F1 | 	sub	objptr, ##1540
0f210     F2 12 02 F1 | 	add	arg01, objptr
0f214     04 12 06 F1 | 	add	arg01, #4
0f218     09 13 02 FB | 	rdlong	arg01, arg01
0f21c     04 4E 05 F1 | 	add	fp, #4
0f220     A7 12 62 FC | 	wrlong	arg01, fp
0f224     08 4E 85 F1 | 	sub	fp, #8
0f228     A7 12 02 FB | 	rdlong	arg01, fp
0f22c     0C 4E 85 F1 | 	sub	fp, #12
0f230     02 12 06 F1 | 	add	arg01, #2
0f234     67 00 00 FF 
0f238     6C E4 85 F1 | 	sub	objptr, ##52844
0f23c     08 A0 B0 FD | 	call	#_pspeek
0f240     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f244     18 4E 05 F1 | 	add	fp, #24
0f248     A7 FA 61 FC | 	wrlong	result1, fp
0f24c     0C 4E 85 F1 | 	sub	fp, #12
0f250     A7 12 02 FB | 	rdlong	arg01, fp
0f254     0C 4E 85 F1 | 	sub	fp, #12
0f258     04 12 06 F1 | 	add	arg01, #4
0f25c     40 A0 B0 FD | 	call	#_pslpeek
0f260     1C 4E 05 F1 | 	add	fp, #28
0f264     A7 FA 61 FC | 	wrlong	result1, fp
0f268     10 4E 85 F1 | 	sub	fp, #16
0f26c     A7 12 02 FB | 	rdlong	arg01, fp
0f270     0C 4E 85 F1 | 	sub	fp, #12
0f274     08 12 06 F1 | 	add	arg01, #8
0f278     24 A0 B0 FD | 	call	#_pslpeek
0f27c     20 4E 05 F1 | 	add	fp, #32
0f280     A7 FA 61 FC | 	wrlong	result1, fp
0f284     14 4E 85 F1 | 	sub	fp, #20
0f288     A7 12 02 FB | 	rdlong	arg01, fp
0f28c     0C 4E 85 F1 | 	sub	fp, #12
0f290     0C 12 06 F1 | 	add	arg01, #12
0f294     08 A0 B0 FD | 	call	#_pslpeek
0f298     24 4E 05 F1 | 	add	fp, #36
0f29c     A7 FA 61 FC | 	wrlong	result1, fp
0f2a0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f2a0                 | ' esize=pspeek(arrptr+2)
0f2a0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f2a0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f2a0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f2a0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f2a0     10 4E 85 F1 | 	sub	fp, #16
0f2a4     A7 12 02 FB | 	rdlong	arg01, fp
0f2a8     14 4E 85 F1 | 	sub	fp, #20
0f2ac     03 12 16 F2 | 	cmp	arg01, #3 wc
0f2b0     34 00 90 CD |  if_b	jmp	#LR__1182
0f2b4     F4 AE BF FD | 	call	#_pop
0f2b8     A7 FA 61 FC | 	wrlong	result1, fp
0f2bc     04 4E 05 F1 | 	add	fp, #4
0f2c0     A7 FC 61 FC | 	wrlong	result2, fp
0f2c4     04 4E 05 F1 | 	add	fp, #4
0f2c8     A7 FE 61 FC | 	wrlong	result3, fp
0f2cc     08 4E 85 F1 | 	sub	fp, #8
0f2d0     A7 12 02 F6 | 	mov	arg01, fp
0f2d4     2C 3B B0 FD | 	call	#_converttoint
0f2d8     30 4E 05 F1 | 	add	fp, #48
0f2dc     A7 FA 61 FC | 	wrlong	result1, fp
0f2e0     30 4E 85 F1 | 	sub	fp, #48
0f2e4     0C 00 90 FD | 	jmp	#LR__1183
0f2e8                 | LR__1182
0f2e8     30 4E 05 F1 | 	add	fp, #48
0f2ec     A7 00 68 FC | 	wrlong	#0, fp
0f2f0     30 4E 85 F1 | 	sub	fp, #48
0f2f4                 | LR__1183
0f2f4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f2f4     14 4E 05 F1 | 	add	fp, #20
0f2f8     A7 12 02 FB | 	rdlong	arg01, fp
0f2fc     14 4E 85 F1 | 	sub	fp, #20
0f300     02 12 16 F2 | 	cmp	arg01, #2 wc
0f304     34 00 90 CD |  if_b	jmp	#LR__1184
0f308     A0 AE BF FD | 	call	#_pop
0f30c     A7 FA 61 FC | 	wrlong	result1, fp
0f310     04 4E 05 F1 | 	add	fp, #4
0f314     A7 FC 61 FC | 	wrlong	result2, fp
0f318     04 4E 05 F1 | 	add	fp, #4
0f31c     A7 FE 61 FC | 	wrlong	result3, fp
0f320     08 4E 85 F1 | 	sub	fp, #8
0f324     A7 12 02 F6 | 	mov	arg01, fp
0f328     D8 3A B0 FD | 	call	#_converttoint
0f32c     2C 4E 05 F1 | 	add	fp, #44
0f330     A7 FA 61 FC | 	wrlong	result1, fp
0f334     2C 4E 85 F1 | 	sub	fp, #44
0f338     0C 00 90 FD | 	jmp	#LR__1185
0f33c                 | LR__1184
0f33c     2C 4E 05 F1 | 	add	fp, #44
0f340     A7 00 68 FC | 	wrlong	#0, fp
0f344     2C 4E 85 F1 | 	sub	fp, #44
0f348                 | LR__1185
0f348                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f348     14 4E 05 F1 | 	add	fp, #20
0f34c     A7 12 02 FB | 	rdlong	arg01, fp
0f350     14 4E 85 F1 | 	sub	fp, #20
0f354     01 12 16 F2 | 	cmp	arg01, #1 wc
0f358     34 00 90 CD |  if_b	jmp	#LR__1186
0f35c     4C AE BF FD | 	call	#_pop
0f360     A7 FA 61 FC | 	wrlong	result1, fp
0f364     04 4E 05 F1 | 	add	fp, #4
0f368     A7 FC 61 FC | 	wrlong	result2, fp
0f36c     04 4E 05 F1 | 	add	fp, #4
0f370     A7 FE 61 FC | 	wrlong	result3, fp
0f374     08 4E 85 F1 | 	sub	fp, #8
0f378     A7 12 02 F6 | 	mov	arg01, fp
0f37c     84 3A B0 FD | 	call	#_converttoint
0f380     28 4E 05 F1 | 	add	fp, #40
0f384     A7 FA 61 FC | 	wrlong	result1, fp
0f388     28 4E 85 F1 | 	sub	fp, #40
0f38c     0C 00 90 FD | 	jmp	#LR__1187
0f390                 | LR__1186
0f390     28 4E 05 F1 | 	add	fp, #40
0f394     A7 00 68 FC | 	wrlong	#0, fp
0f398     28 4E 85 F1 | 	sub	fp, #40
0f39c                 | LR__1187
0f39c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f39c                 | ' if numpar>0 then
0f39c     14 4E 05 F1 | 	add	fp, #20
0f3a0     A7 FE 01 FB | 	rdlong	result3, fp
0f3a4     14 4E 85 F1 | 	sub	fp, #20
0f3a8     01 FE 15 F2 | 	cmp	result3, #1 wc
0f3ac     8C 00 90 CD |  if_b	jmp	#LR__1188
0f3b0     0C 4E 05 F1 | 	add	fp, #12
0f3b4     A7 FC 01 FB | 	rdlong	result2, fp
0f3b8     1C 4E 05 F1 | 	add	fp, #28
0f3bc     A7 FE 01 FB | 	rdlong	result3, fp
0f3c0     04 4E 05 F1 | 	add	fp, #4
0f3c4     A7 12 02 FB | 	rdlong	arg01, fp
0f3c8     10 4E 85 F1 | 	sub	fp, #16
0f3cc     A7 FA 01 FB | 	rdlong	result1, fp
0f3d0     FD 12 02 FD | 	qmul	arg01, result1
0f3d4     10 FC 05 F1 | 	add	result2, #16
0f3d8     14 4E 05 F1 | 	add	fp, #20
0f3dc     A7 1E 02 FB | 	rdlong	local01, fp
0f3e0     18 12 62 FD | 	getqx	arg01
0f3e4     FD 1E 02 FD | 	qmul	local01, result1
0f3e8     09 FF 01 F1 | 	add	result3, arg01
0f3ec     10 4E 85 F1 | 	sub	fp, #16
0f3f0     A7 1E 02 FB | 	rdlong	local01, fp
0f3f4     18 FA 61 FD | 	getqx	result1
0f3f8     0F FB 01 FD | 	qmul	result1, local01
0f3fc     08 4E 85 F1 | 	sub	fp, #8
0f400     A7 1E 02 FB | 	rdlong	local01, fp
0f404     18 FA 61 FD | 	getqx	result1
0f408     FD FE 01 F1 | 	add	result3, result1
0f40c     0F FF 01 FD | 	qmul	result3, local01
0f410     1C 4E 05 F1 | 	add	fp, #28
0f414     18 1E 62 FD | 	getqx	local01
0f418     0F FD 01 F1 | 	add	result2, local01
0f41c     A7 FC 61 FC | 	wrlong	result2, fp
0f420     2C 4E 85 F1 | 	sub	fp, #44
0f424     A7 3A 68 FC | 	wrlong	#29, fp
0f428     2C 4E 05 F1 | 	add	fp, #44
0f42c     A7 1E 02 FB | 	rdlong	local01, fp
0f430     34 4E 85 F1 | 	sub	fp, #52
0f434     A7 1E 62 FC | 	wrlong	local01, fp
0f438     18 00 90 FD | 	jmp	#LR__1189
0f43c                 | LR__1188
0f43c     08 4E 05 F1 | 	add	fp, #8
0f440     A7 3A 68 FC | 	wrlong	#29, fp
0f444     04 4E 05 F1 | 	add	fp, #4
0f448     A7 1E 02 FB | 	rdlong	local01, fp
0f44c     0C 4E 85 F1 | 	sub	fp, #12
0f450     A7 1E 62 FC | 	wrlong	local01, fp
0f454                 | LR__1189
0f454     A7 12 02 F6 | 	mov	arg01, fp
0f458     E8 AD BF FD | 	call	#_push
0f45c                 | LR__1190
0f45c     A7 F0 03 F6 | 	mov	ptra, fp
0f460     B2 00 A0 FD | 	call	#popregs_
0f464                 | _do_getaddr_ret
0f464     2D 00 64 FD | 	ret
0f468                 | 
0f468                 | ' 
0f468                 | ' 
0f468                 | ' sub do_inkey
0f468                 | _do_inkey
0f468     02 4A 05 F6 | 	mov	COUNT_, #2
0f46c     A8 00 A0 FD | 	call	#pushregs_
0f470     0C F0 07 F1 | 	add	ptra, #12
0f474     FC D7 B0 FD | 	call	#_usbnew_spin2_get_key
0f478     65 00 00 FF 
0f47c     64 E4 05 F1 | 	add	objptr, ##51812
0f480     F2 FA 61 FC | 	wrlong	result1, objptr
0f484                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0f484     65 00 00 FF 
0f488     64 E4 85 F1 | 	sub	objptr, ##51812
0f48c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f490     94 00 90 AD |  if_e	jmp	#LR__1201
0f494     65 00 00 FF 
0f498     64 E4 05 F1 | 	add	objptr, ##51812
0f49c     F2 1C 02 FB | 	rdlong	arg06, objptr
0f4a0     65 00 00 FF 
0f4a4     64 E4 85 F1 | 	sub	objptr, ##51812
0f4a8     00 00 40 FF 
0f4ac     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f4b0     65 00 00 CF 
0f4b4     64 E4 05 C1 |  if_b	add	objptr, ##51812
0f4b8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f4bc     65 00 00 CF 
0f4c0     64 E4 85 C1 |  if_b	sub	objptr, ##51812
0f4c4     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f4c8     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f4cc     58 00 90 3D |  if_ae	jmp	#LR__1201
0f4d0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0f4d0     79 00 00 FF 
0f4d4     D0 E5 05 F1 | 	add	objptr, ##62416
0f4d8     F2 1C 02 FB | 	rdlong	arg06, objptr
0f4dc     79 00 00 FF 
0f4e0     D0 E5 85 F1 | 	sub	objptr, ##62416
0f4e4     01 1C 0E F2 | 	cmp	arg06, #1 wz
0f4e8     3C 00 90 5D |  if_ne	jmp	#LR__1200
0f4ec     7B 00 00 FF 
0f4f0     74 E4 05 F1 | 	add	objptr, ##63092
0f4f4     F2 14 02 FB | 	rdlong	arg02, objptr
0f4f8     04 E4 85 F1 | 	sub	objptr, #4
0f4fc     F2 1A 02 FB | 	rdlong	arg05, objptr
0f500     07 12 06 F6 | 	mov	arg01, #7
0f504     56 00 00 FF 
0f508     44 16 06 F6 | 	mov	arg03, ##44100
0f50c     0C 18 C6 F9 | 	decod	arg04, #12
0f510     01 1C 66 F6 | 	neg	arg06, #1
0f514     6F 00 00 FF 
0f518     A4 E5 85 F1 | 	sub	objptr, ##57252
0f51c     DC DA B0 FD | 	call	#_audio096_spin2_play
0f520     0B 00 00 FF 
0f524     CC E4 85 F1 | 	sub	objptr, ##5836
0f528                 | LR__1200
0f528                 | LR__1201
0f528                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0f528     65 00 00 FF 
0f52c     64 E4 05 F1 | 	add	objptr, ##51812
0f530     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0f534     65 00 00 FF 
0f538     64 E4 85 F1 | 	sub	objptr, ##51812
0f53c     D4 01 90 AD |  if_e	jmp	#LR__1210
0f540     65 00 00 FF 
0f544     64 E4 05 F1 | 	add	objptr, ##51812
0f548     F2 1C 02 FB | 	rdlong	arg06, objptr
0f54c     65 00 00 FF 
0f550     64 E4 85 F1 | 	sub	objptr, ##51812
0f554     00 00 40 FF 
0f558     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f55c     65 00 00 CF 
0f560     64 E4 05 C1 |  if_b	add	objptr, ##51812
0f564     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f568     65 00 00 CF 
0f56c     64 E4 85 C1 |  if_b	sub	objptr, ##51812
0f570     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f574     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f578     98 01 90 3D |  if_ae	jmp	#LR__1210
0f57c                 | '   if leds and 2 = 2 then 
0f57c     7B 00 00 FF 
0f580     9C E4 05 F1 | 	add	objptr, ##63132
0f584     F2 1E 0A FB | 	rdlong	local01, objptr wz
0f588     7B 00 00 FF 
0f58c     9C E4 85 F1 | 	sub	objptr, ##63132
0f590     58 01 90 AD |  if_e	jmp	#LR__1209
0f594                 | '     if key>96 andalso key<123 then
0f594     65 00 00 FF 
0f598     64 E4 05 F1 | 	add	objptr, ##51812
0f59c     F2 1E 02 FB | 	rdlong	local01, objptr
0f5a0     65 00 00 FF 
0f5a4     64 E4 85 F1 | 	sub	objptr, ##51812
0f5a8     61 1E 16 F2 | 	cmp	local01, #97 wc
0f5ac     3C 00 90 CD |  if_b	jmp	#LR__1202
0f5b0     65 00 00 FF 
0f5b4     64 E4 05 F1 | 	add	objptr, ##51812
0f5b8     F2 1E 02 FB | 	rdlong	local01, objptr
0f5bc     65 00 00 FF 
0f5c0     64 E4 85 F1 | 	sub	objptr, ##51812
0f5c4     7B 1E 16 F2 | 	cmp	local01, #123 wc
0f5c8     20 00 90 3D |  if_ae	jmp	#LR__1202
0f5cc     65 00 00 FF 
0f5d0     64 E4 05 F1 | 	add	objptr, ##51812
0f5d4     F2 1E 02 FB | 	rdlong	local01, objptr
0f5d8     20 1E 86 F1 | 	sub	local01, #32
0f5dc     F2 1E 62 FC | 	wrlong	local01, objptr
0f5e0     65 00 00 FF 
0f5e4     64 E4 85 F1 | 	sub	objptr, ##51812
0f5e8     00 01 90 FD | 	jmp	#LR__1208
0f5ec                 | LR__1202
0f5ec     65 00 00 FF 
0f5f0     64 E4 05 F1 | 	add	objptr, ##51812
0f5f4     F2 1E 02 FB | 	rdlong	local01, objptr
0f5f8     65 00 00 FF 
0f5fc     64 E4 85 F1 | 	sub	objptr, ##51812
0f600     41 1E 16 F2 | 	cmp	local01, #65 wc
0f604     3C 00 90 CD |  if_b	jmp	#LR__1203
0f608     65 00 00 FF 
0f60c     64 E4 05 F1 | 	add	objptr, ##51812
0f610     F2 1E 02 FB | 	rdlong	local01, objptr
0f614     65 00 00 FF 
0f618     64 E4 85 F1 | 	sub	objptr, ##51812
0f61c     5B 1E 16 F2 | 	cmp	local01, #91 wc
0f620     20 00 90 3D |  if_ae	jmp	#LR__1203
0f624     65 00 00 FF 
0f628     64 E4 05 F1 | 	add	objptr, ##51812
0f62c     F2 1E 02 FB | 	rdlong	local01, objptr
0f630     20 1E 06 F1 | 	add	local01, #32
0f634     F2 1E 62 FC | 	wrlong	local01, objptr
0f638     65 00 00 FF 
0f63c     64 E4 85 F1 | 	sub	objptr, ##51812
0f640     A8 00 90 FD | 	jmp	#LR__1207
0f644                 | LR__1203
0f644     65 00 00 FF 
0f648     64 E4 05 F1 | 	add	objptr, ##51812
0f64c     F2 1E 02 FB | 	rdlong	local01, objptr
0f650     65 00 00 FF 
0f654     64 E4 85 F1 | 	sub	objptr, ##51812
0f658     17 1E 16 F2 | 	cmp	local01, #23 wc
0f65c     3C 00 90 CD |  if_b	jmp	#LR__1204
0f660     65 00 00 FF 
0f664     64 E4 05 F1 | 	add	objptr, ##51812
0f668     F2 1E 02 FB | 	rdlong	local01, objptr
0f66c     65 00 00 FF 
0f670     64 E4 85 F1 | 	sub	objptr, ##51812
0f674     20 1E 16 F2 | 	cmp	local01, #32 wc
0f678     20 00 90 3D |  if_ae	jmp	#LR__1204
0f67c     65 00 00 FF 
0f680     64 E4 05 F1 | 	add	objptr, ##51812
0f684     F2 1E 02 FB | 	rdlong	local01, objptr
0f688     09 1E 86 F1 | 	sub	local01, #9
0f68c     F2 1E 62 FC | 	wrlong	local01, objptr
0f690     65 00 00 FF 
0f694     64 E4 85 F1 | 	sub	objptr, ##51812
0f698     50 00 90 FD | 	jmp	#LR__1206
0f69c                 | LR__1204
0f69c     65 00 00 FF 
0f6a0     64 E4 05 F1 | 	add	objptr, ##51812
0f6a4     F2 20 02 FB | 	rdlong	local02, objptr
0f6a8     65 00 00 FF 
0f6ac     64 E4 85 F1 | 	sub	objptr, ##51812
0f6b0     0E 20 16 F2 | 	cmp	local02, #14 wc
0f6b4     34 00 90 CD |  if_b	jmp	#LR__1205
0f6b8     65 00 00 FF 
0f6bc     64 E4 05 F1 | 	add	objptr, ##51812
0f6c0     F2 1E 02 FB | 	rdlong	local01, objptr
0f6c4     65 00 00 FF 
0f6c8     64 E4 85 F1 | 	sub	objptr, ##51812
0f6cc     17 1E 16 F2 | 	cmp	local01, #23 wc
0f6d0     7B 00 00 CF 
0f6d4     AC E4 05 C1 |  if_b	add	objptr, ##63148
0f6d8     F2 20 02 CB |  if_b	rdlong	local02, objptr
0f6dc     27 20 06 C1 |  if_b	add	local02, #39
0f6e0     F2 20 62 CC |  if_b	wrlong	local02, objptr
0f6e4     7B 00 00 CF 
0f6e8     AC E4 85 C1 |  if_b	sub	objptr, ##63148
0f6ec                 | LR__1205
0f6ec                 | LR__1206
0f6ec                 | LR__1207
0f6ec                 | LR__1208
0f6ec                 | LR__1209
0f6ec     65 00 00 FF 
0f6f0     64 E4 05 F1 | 	add	objptr, ##51812
0f6f4     F2 12 02 FB | 	rdlong	arg01, objptr
0f6f8     65 00 00 FF 
0f6fc     64 E4 85 F1 | 	sub	objptr, ##51812
0f700     4C 9C B0 FD | 	call	#_scantochar
0f704     FD 12 02 F6 | 	mov	arg01, result1
0f708     48 FF B0 FD | 	call	#__system__Chr_S
0f70c     A7 FA 61 FC | 	wrlong	result1, fp
0f710     0C 00 90 FD | 	jmp	#LR__1211
0f714                 | LR__1210
0f714     68 01 00 FF 
0f718     66 20 06 F6 | 	mov	local02, ##@LR__4982
0f71c     A7 20 62 FC | 	wrlong	local02, fp
0f720                 | LR__1211
0f720     08 4E 05 F1 | 	add	fp, #8
0f724     A7 3E 68 FC | 	wrlong	#31, fp
0f728     08 4E 85 F1 | 	sub	fp, #8
0f72c     A7 12 02 F6 | 	mov	arg01, fp
0f730     10 AB BF FD | 	call	#_push
0f734     A7 F0 03 F6 | 	mov	ptra, fp
0f738     B2 00 A0 FD | 	call	#popregs_
0f73c                 | _do_inkey_ret
0f73c     2D 00 64 FD | 	ret
0f740                 | 
0f740                 | '  
0f740                 | ' '------------------------ Operators 
0f740                 | ' 
0f740                 | ' sub do_plus 
0f740                 | _do_plus
0f740     05 4A 05 F6 | 	mov	COUNT_, #5
0f744     A8 00 A0 FD | 	call	#pushregs_
0f748     18 F0 07 F1 | 	add	ptra, #24
0f74c     5C AA BF FD | 	call	#_pop
0f750     FD 1E 02 F6 | 	mov	local01, result1
0f754     FE 20 02 F6 | 	mov	local02, result2
0f758     FF 22 02 F6 | 	mov	local03, result3
0f75c     0C 4E 05 F1 | 	add	fp, #12
0f760     A7 1E 62 FC | 	wrlong	local01, fp
0f764     04 4E 05 F1 | 	add	fp, #4
0f768     A7 20 62 FC | 	wrlong	local02, fp
0f76c     04 4E 05 F1 | 	add	fp, #4
0f770     A7 22 62 FC | 	wrlong	local03, fp
0f774     14 4E 85 F1 | 	sub	fp, #20
0f778     30 AA BF FD | 	call	#_pop
0f77c     FF 22 02 F6 | 	mov	local03, result3
0f780     A7 FA 61 FC | 	wrlong	result1, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 FC 61 FC | 	wrlong	result2, fp
0f78c     04 4E 05 F1 | 	add	fp, #4
0f790     A7 22 62 FC | 	wrlong	local03, fp
0f794                 | ' 
0f794                 | ' t2=pop()
0f794                 | ' t1=pop()
0f794                 | ' 
0f794                 | ' 
0f794                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0f794     08 4E 85 F1 | 	sub	fp, #8
0f798     1D 22 0E F2 | 	cmp	local03, #29 wz
0f79c     14 4E 05 A1 |  if_e	add	fp, #20
0f7a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f7a4     14 4E 85 A1 |  if_e	sub	fp, #20
0f7a8     12 23 02 A6 |  if_e	mov	local03, local04
0f7ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f7b0     1C 00 90 5D |  if_ne	jmp	#LR__1220
0f7b4     A7 1E 02 FB | 	rdlong	local01, fp
0f7b8     0C 4E 05 F1 | 	add	fp, #12
0f7bc     A7 20 02 FB | 	rdlong	local02, fp
0f7c0     0C 4E 85 F1 | 	sub	fp, #12
0f7c4     10 1F 02 F1 | 	add	local01, local02
0f7c8     A7 1E 62 FC | 	wrlong	local01, fp
0f7cc     48 04 90 FD | 	jmp	#LR__1235
0f7d0                 | LR__1220
0f7d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0f7d0     08 4E 05 F1 | 	add	fp, #8
0f7d4     A7 1E 02 FB | 	rdlong	local01, fp
0f7d8     08 4E 85 F1 | 	sub	fp, #8
0f7dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7e0     14 4E 05 A1 |  if_e	add	fp, #20
0f7e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f7e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f7ec     12 23 02 A6 |  if_e	mov	local03, local04
0f7f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f7f4     28 00 90 5D |  if_ne	jmp	#LR__1221
0f7f8     A7 1E 02 FB | 	rdlong	local01, fp
0f7fc     0C 4E 05 F1 | 	add	fp, #12
0f800     A7 20 02 FB | 	rdlong	local02, fp
0f804     0C 4E 85 F1 | 	sub	fp, #12
0f808     10 1F 02 F1 | 	add	local01, local02
0f80c     A7 1E 62 FC | 	wrlong	local01, fp
0f810     08 4E 05 F1 | 	add	fp, #8
0f814     A7 38 68 FC | 	wrlong	#28, fp
0f818     08 4E 85 F1 | 	sub	fp, #8
0f81c     F8 03 90 FD | 	jmp	#LR__1235
0f820                 | LR__1221
0f820                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f820     08 4E 05 F1 | 	add	fp, #8
0f824     A7 1E 02 FB | 	rdlong	local01, fp
0f828     08 4E 85 F1 | 	sub	fp, #8
0f82c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f830     14 4E 05 A1 |  if_e	add	fp, #20
0f834     A7 24 02 AB |  if_e	rdlong	local04, fp
0f838     14 4E 85 A1 |  if_e	sub	fp, #20
0f83c     12 23 02 A6 |  if_e	mov	local03, local04
0f840     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f844     30 00 90 5D |  if_ne	jmp	#LR__1222
0f848     A7 12 02 FB | 	rdlong	arg01, fp
0f84c     74 03 B1 FD | 	call	#__system___float_fromuns
0f850     FD 12 02 F6 | 	mov	arg01, result1
0f854     0C 4E 05 F1 | 	add	fp, #12
0f858     A7 14 02 FB | 	rdlong	arg02, fp
0f85c     0C 4E 85 F1 | 	sub	fp, #12
0f860     94 03 B1 FD | 	call	#__system___float_add
0f864     A7 FA 61 FC | 	wrlong	result1, fp
0f868     08 4E 05 F1 | 	add	fp, #8
0f86c     A7 3C 68 FC | 	wrlong	#30, fp
0f870     08 4E 85 F1 | 	sub	fp, #8
0f874     A0 03 90 FD | 	jmp	#LR__1235
0f878                 | LR__1222
0f878                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0f878     08 4E 05 F1 | 	add	fp, #8
0f87c     A7 1E 02 FB | 	rdlong	local01, fp
0f880     08 4E 85 F1 | 	sub	fp, #8
0f884     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f888     14 4E 05 A1 |  if_e	add	fp, #20
0f88c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f890     14 4E 85 A1 |  if_e	sub	fp, #20
0f894     12 23 02 A6 |  if_e	mov	local03, local04
0f898     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f89c     1C 00 90 5D |  if_ne	jmp	#LR__1223
0f8a0     A7 1E 02 FB | 	rdlong	local01, fp
0f8a4     0C 4E 05 F1 | 	add	fp, #12
0f8a8     A7 20 02 FB | 	rdlong	local02, fp
0f8ac     0C 4E 85 F1 | 	sub	fp, #12
0f8b0     10 1F 02 F1 | 	add	local01, local02
0f8b4     A7 1E 62 FC | 	wrlong	local01, fp
0f8b8     5C 03 90 FD | 	jmp	#LR__1235
0f8bc                 | LR__1223
0f8bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0f8bc     08 4E 05 F1 | 	add	fp, #8
0f8c0     A7 1E 02 FB | 	rdlong	local01, fp
0f8c4     08 4E 85 F1 | 	sub	fp, #8
0f8c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8cc     14 4E 05 A1 |  if_e	add	fp, #20
0f8d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f8d8     12 23 02 A6 |  if_e	mov	local03, local04
0f8dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f8e0     1C 00 90 5D |  if_ne	jmp	#LR__1224
0f8e4     A7 1E 02 FB | 	rdlong	local01, fp
0f8e8     0C 4E 05 F1 | 	add	fp, #12
0f8ec     A7 20 02 FB | 	rdlong	local02, fp
0f8f0     0C 4E 85 F1 | 	sub	fp, #12
0f8f4     10 1F 02 F1 | 	add	local01, local02
0f8f8     A7 1E 62 FC | 	wrlong	local01, fp
0f8fc     18 03 90 FD | 	jmp	#LR__1235
0f900                 | LR__1224
0f900                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f900     08 4E 05 F1 | 	add	fp, #8
0f904     A7 1E 02 FB | 	rdlong	local01, fp
0f908     08 4E 85 F1 | 	sub	fp, #8
0f90c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f910     14 4E 05 A1 |  if_e	add	fp, #20
0f914     A7 24 02 AB |  if_e	rdlong	local04, fp
0f918     14 4E 85 A1 |  if_e	sub	fp, #20
0f91c     12 23 02 A6 |  if_e	mov	local03, local04
0f920     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f924     40 00 90 5D |  if_ne	jmp	#LR__1225
0f928     A7 12 02 FB | 	rdlong	arg01, fp
0f92c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f930     1F 26 C6 C9 |  if_b	decod	local05, #31
0f934     00 26 06 36 |  if_ae	mov	local05, #0
0f938     88 02 B1 FD | 	call	#__system___float_fromuns
0f93c     13 FB 61 F5 | 	xor	result1, local05
0f940     FD 12 02 F6 | 	mov	arg01, result1
0f944     0C 4E 05 F1 | 	add	fp, #12
0f948     A7 14 02 FB | 	rdlong	arg02, fp
0f94c     0C 4E 85 F1 | 	sub	fp, #12
0f950     A4 02 B1 FD | 	call	#__system___float_add
0f954     A7 FA 61 FC | 	wrlong	result1, fp
0f958     08 4E 05 F1 | 	add	fp, #8
0f95c     A7 3C 68 FC | 	wrlong	#30, fp
0f960     08 4E 85 F1 | 	sub	fp, #8
0f964     B0 02 90 FD | 	jmp	#LR__1235
0f968                 | LR__1225
0f968                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0f968     08 4E 05 F1 | 	add	fp, #8
0f96c     A7 1E 02 FB | 	rdlong	local01, fp
0f970     08 4E 85 F1 | 	sub	fp, #8
0f974     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f978     14 4E 05 A1 |  if_e	add	fp, #20
0f97c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f980     14 4E 85 A1 |  if_e	sub	fp, #20
0f984     12 23 02 A6 |  if_e	mov	local03, local04
0f988     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f98c     28 00 90 5D |  if_ne	jmp	#LR__1226
0f990     A7 1E 02 FB | 	rdlong	local01, fp
0f994     0C 4E 05 F1 | 	add	fp, #12
0f998     A7 12 02 FB | 	rdlong	arg01, fp
0f99c     0C 4E 85 F1 | 	sub	fp, #12
0f9a0     20 02 B1 FD | 	call	#__system___float_fromuns
0f9a4     FD 14 02 F6 | 	mov	arg02, result1
0f9a8     0F 13 02 F6 | 	mov	arg01, local01
0f9ac     48 02 B1 FD | 	call	#__system___float_add
0f9b0     A7 FA 61 FC | 	wrlong	result1, fp
0f9b4     60 02 90 FD | 	jmp	#LR__1235
0f9b8                 | LR__1226
0f9b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0f9b8     08 4E 05 F1 | 	add	fp, #8
0f9bc     A7 1E 02 FB | 	rdlong	local01, fp
0f9c0     08 4E 85 F1 | 	sub	fp, #8
0f9c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f9c8     14 4E 05 A1 |  if_e	add	fp, #20
0f9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f9d4     12 23 02 A6 |  if_e	mov	local03, local04
0f9d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f9dc     38 00 90 5D |  if_ne	jmp	#LR__1227
0f9e0     A7 1E 02 FB | 	rdlong	local01, fp
0f9e4     0C 4E 05 F1 | 	add	fp, #12
0f9e8     A7 12 02 FB | 	rdlong	arg01, fp
0f9ec     0C 4E 85 F1 | 	sub	fp, #12
0f9f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f9f4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f9f8     00 26 06 36 |  if_ae	mov	local05, #0
0f9fc     C4 01 B1 FD | 	call	#__system___float_fromuns
0fa00     13 FB 61 F5 | 	xor	result1, local05
0fa04     FD 14 02 F6 | 	mov	arg02, result1
0fa08     0F 13 02 F6 | 	mov	arg01, local01
0fa0c     E8 01 B1 FD | 	call	#__system___float_add
0fa10     A7 FA 61 FC | 	wrlong	result1, fp
0fa14     00 02 90 FD | 	jmp	#LR__1235
0fa18                 | LR__1227
0fa18                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0fa18     08 4E 05 F1 | 	add	fp, #8
0fa1c     A7 1E 02 FB | 	rdlong	local01, fp
0fa20     08 4E 85 F1 | 	sub	fp, #8
0fa24     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa28     14 4E 05 A1 |  if_e	add	fp, #20
0fa2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa30     14 4E 85 A1 |  if_e	sub	fp, #20
0fa34     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0fa38     1C 00 90 5D |  if_ne	jmp	#LR__1228
0fa3c     A7 12 02 FB | 	rdlong	arg01, fp
0fa40     0C 4E 05 F1 | 	add	fp, #12
0fa44     A7 14 02 FB | 	rdlong	arg02, fp
0fa48     0C 4E 85 F1 | 	sub	fp, #12
0fa4c     A8 01 B1 FD | 	call	#__system___float_add
0fa50     A7 FA 61 FC | 	wrlong	result1, fp
0fa54     C0 01 90 FD | 	jmp	#LR__1235
0fa58                 | LR__1228
0fa58                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0fa58     08 4E 05 F1 | 	add	fp, #8
0fa5c     A7 1E 02 FB | 	rdlong	local01, fp
0fa60     08 4E 85 F1 | 	sub	fp, #8
0fa64     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fa68     24 00 90 5D |  if_ne	jmp	#LR__1229
0fa6c     14 4E 05 F1 | 	add	fp, #20
0fa70     A7 22 02 FB | 	rdlong	local03, fp
0fa74     14 4E 85 F1 | 	sub	fp, #20
0fa78     1F 22 0E F2 | 	cmp	local03, #31 wz
0fa7c     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fa80     08 4E 05 51 |  if_ne	add	fp, #8
0fa84     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fa88     08 4E 85 51 |  if_ne	sub	fp, #8
0fa8c     88 01 90 5D |  if_ne	jmp	#LR__1235
0fa90                 | LR__1229
0fa90                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0fa90     14 4E 05 F1 | 	add	fp, #20
0fa94     A7 1E 02 FB | 	rdlong	local01, fp
0fa98     14 4E 85 F1 | 	sub	fp, #20
0fa9c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0faa0     24 00 90 5D |  if_ne	jmp	#LR__1230
0faa4     08 4E 05 F1 | 	add	fp, #8
0faa8     A7 22 02 FB | 	rdlong	local03, fp
0faac     08 4E 85 F1 | 	sub	fp, #8
0fab0     1F 22 0E F2 | 	cmp	local03, #31 wz
0fab4     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fab8     08 4E 05 51 |  if_ne	add	fp, #8
0fabc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fac0     08 4E 85 51 |  if_ne	sub	fp, #8
0fac4     50 01 90 5D |  if_ne	jmp	#LR__1235
0fac8                 | LR__1230
0fac8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0fac8     08 4E 05 F1 | 	add	fp, #8
0facc     A7 1E 02 FB | 	rdlong	local01, fp
0fad0     08 4E 85 F1 | 	sub	fp, #8
0fad4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fad8     14 4E 05 A1 |  if_e	add	fp, #20
0fadc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fae0     14 4E 85 A1 |  if_e	sub	fp, #20
0fae4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fae8     1C 00 90 5D |  if_ne	jmp	#LR__1231
0faec     A7 12 02 FB | 	rdlong	arg01, fp
0faf0     0C 4E 05 F1 | 	add	fp, #12
0faf4     A7 14 02 FB | 	rdlong	arg02, fp
0faf8     0C 4E 85 F1 | 	sub	fp, #12
0fafc     A8 D9 B0 FD | 	call	#__system___string_concat
0fb00     A7 FA 61 FC | 	wrlong	result1, fp
0fb04     10 01 90 FD | 	jmp	#LR__1235
0fb08                 | LR__1231
0fb08                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0fb08     08 4E 05 F1 | 	add	fp, #8
0fb0c     A7 1E 02 FB | 	rdlong	local01, fp
0fb10     08 4E 85 F1 | 	sub	fp, #8
0fb14     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fb18     14 4E 05 A1 |  if_e	add	fp, #20
0fb1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb20     14 4E 85 A1 |  if_e	sub	fp, #20
0fb24     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fb28     30 00 90 5D |  if_ne	jmp	#LR__1232
0fb2c     A7 12 02 FB | 	rdlong	arg01, fp
0fb30     20 E9 BF FD | 	call	#_convertstring
0fb34     FD 12 02 F6 | 	mov	arg01, result1
0fb38     0C 4E 05 F1 | 	add	fp, #12
0fb3c     A7 14 02 FB | 	rdlong	arg02, fp
0fb40     0C 4E 85 F1 | 	sub	fp, #12
0fb44     60 D9 B0 FD | 	call	#__system___string_concat
0fb48     A7 FA 61 FC | 	wrlong	result1, fp
0fb4c     08 4E 05 F1 | 	add	fp, #8
0fb50     A7 3E 68 FC | 	wrlong	#31, fp
0fb54     08 4E 85 F1 | 	sub	fp, #8
0fb58     BC 00 90 FD | 	jmp	#LR__1235
0fb5c                 | LR__1232
0fb5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0fb5c     08 4E 05 F1 | 	add	fp, #8
0fb60     A7 1E 02 FB | 	rdlong	local01, fp
0fb64     08 4E 85 F1 | 	sub	fp, #8
0fb68     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fb6c     14 4E 05 A1 |  if_e	add	fp, #20
0fb70     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb74     14 4E 85 A1 |  if_e	sub	fp, #20
0fb78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fb7c     28 00 90 5D |  if_ne	jmp	#LR__1233
0fb80     A7 1E 02 FB | 	rdlong	local01, fp
0fb84     0C 4E 05 F1 | 	add	fp, #12
0fb88     A7 12 02 FB | 	rdlong	arg01, fp
0fb8c     0C 4E 85 F1 | 	sub	fp, #12
0fb90     C0 E8 BF FD | 	call	#_convertstring
0fb94     FD 14 02 F6 | 	mov	arg02, result1
0fb98     0F 13 02 F6 | 	mov	arg01, local01
0fb9c     08 D9 B0 FD | 	call	#__system___string_concat
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     70 00 90 FD | 	jmp	#LR__1235
0fba8                 | LR__1233
0fba8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0fba8     08 4E 05 F1 | 	add	fp, #8
0fbac     A7 1E 02 FB | 	rdlong	local01, fp
0fbb0     08 4E 85 F1 | 	sub	fp, #8
0fbb4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fbb8     14 4E 05 A1 |  if_e	add	fp, #20
0fbbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fbc0     14 4E 85 A1 |  if_e	sub	fp, #20
0fbc4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fbc8     3C 00 90 5D |  if_ne	jmp	#LR__1234
0fbcc     A7 12 02 FB | 	rdlong	arg01, fp
0fbd0     80 E8 BF FD | 	call	#_convertstring
0fbd4     FD 1E 02 F6 | 	mov	local01, result1
0fbd8     0C 4E 05 F1 | 	add	fp, #12
0fbdc     A7 12 02 FB | 	rdlong	arg01, fp
0fbe0     0C 4E 85 F1 | 	sub	fp, #12
0fbe4     6C E8 BF FD | 	call	#_convertstring
0fbe8     FD 14 02 F6 | 	mov	arg02, result1
0fbec     0F 13 02 F6 | 	mov	arg01, local01
0fbf0     B4 D8 B0 FD | 	call	#__system___string_concat
0fbf4     A7 FA 61 FC | 	wrlong	result1, fp
0fbf8     08 4E 05 F1 | 	add	fp, #8
0fbfc     A7 3E 68 FC | 	wrlong	#31, fp
0fc00     08 4E 85 F1 | 	sub	fp, #8
0fc04     10 00 90 FD | 	jmp	#LR__1235
0fc08                 | LR__1234
0fc08     A7 08 68 FC | 	wrlong	#4, fp
0fc0c     08 4E 05 F1 | 	add	fp, #8
0fc10     A7 FE 69 FC | 	wrlong	#255, fp
0fc14     08 4E 85 F1 | 	sub	fp, #8
0fc18                 | LR__1235
0fc18     A7 12 02 F6 | 	mov	arg01, fp
0fc1c     24 A6 BF FD | 	call	#_push
0fc20     A7 F0 03 F6 | 	mov	ptra, fp
0fc24     B2 00 A0 FD | 	call	#popregs_
0fc28                 | _do_plus_ret
0fc28     2D 00 64 FD | 	ret
0fc2c                 | 
0fc2c                 | ' 
0fc2c                 | ' sub do_minus
0fc2c                 | _do_minus
0fc2c     05 4A 05 F6 | 	mov	COUNT_, #5
0fc30     A8 00 A0 FD | 	call	#pushregs_
0fc34     18 F0 07 F1 | 	add	ptra, #24
0fc38     70 A5 BF FD | 	call	#_pop
0fc3c     FD 1E 02 F6 | 	mov	local01, result1
0fc40     FE 20 02 F6 | 	mov	local02, result2
0fc44     FF 22 02 F6 | 	mov	local03, result3
0fc48     0C 4E 05 F1 | 	add	fp, #12
0fc4c     A7 1E 62 FC | 	wrlong	local01, fp
0fc50     04 4E 05 F1 | 	add	fp, #4
0fc54     A7 20 62 FC | 	wrlong	local02, fp
0fc58     04 4E 05 F1 | 	add	fp, #4
0fc5c     A7 22 62 FC | 	wrlong	local03, fp
0fc60     14 4E 85 F1 | 	sub	fp, #20
0fc64     44 A5 BF FD | 	call	#_pop
0fc68     FF 22 02 F6 | 	mov	local03, result3
0fc6c     A7 FA 61 FC | 	wrlong	result1, fp
0fc70     04 4E 05 F1 | 	add	fp, #4
0fc74     A7 FC 61 FC | 	wrlong	result2, fp
0fc78     04 4E 05 F1 | 	add	fp, #4
0fc7c     A7 22 62 FC | 	wrlong	local03, fp
0fc80                 | ' 
0fc80                 | ' t2=pop()
0fc80                 | ' t1=pop()
0fc80                 | ' 
0fc80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0fc80     08 4E 85 F1 | 	sub	fp, #8
0fc84     1D 22 0E F2 | 	cmp	local03, #29 wz
0fc88     14 4E 05 A1 |  if_e	add	fp, #20
0fc8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc90     14 4E 85 A1 |  if_e	sub	fp, #20
0fc94     12 23 02 A6 |  if_e	mov	local03, local04
0fc98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fc9c     5C 00 90 5D |  if_ne	jmp	#LR__1241
0fca0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0fca0     0C 4E 05 F1 | 	add	fp, #12
0fca4     A7 1E 02 FB | 	rdlong	local01, fp
0fca8     0C 4E 85 F1 | 	sub	fp, #12
0fcac     A7 22 02 FB | 	rdlong	local03, fp
0fcb0     11 1F 12 F2 | 	cmp	local01, local03 wc
0fcb4     1C 00 90 3D |  if_ae	jmp	#LR__1240
0fcb8     A7 1E 02 FB | 	rdlong	local01, fp
0fcbc     0C 4E 05 F1 | 	add	fp, #12
0fcc0     A7 20 02 FB | 	rdlong	local02, fp
0fcc4     0C 4E 85 F1 | 	sub	fp, #12
0fcc8     10 1F 82 F1 | 	sub	local01, local02
0fccc     A7 1E 62 FC | 	wrlong	local01, fp
0fcd0     F4 02 90 FD | 	jmp	#LR__1250
0fcd4                 | LR__1240
0fcd4     A7 1E 02 FB | 	rdlong	local01, fp
0fcd8     0C 4E 05 F1 | 	add	fp, #12
0fcdc     A7 20 02 FB | 	rdlong	local02, fp
0fce0     0C 4E 85 F1 | 	sub	fp, #12
0fce4     10 1F 82 F1 | 	sub	local01, local02
0fce8     A7 1E 62 FC | 	wrlong	local01, fp
0fcec     08 4E 05 F1 | 	add	fp, #8
0fcf0     A7 38 68 FC | 	wrlong	#28, fp
0fcf4     08 4E 85 F1 | 	sub	fp, #8
0fcf8     CC 02 90 FD | 	jmp	#LR__1250
0fcfc                 | LR__1241
0fcfc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0fcfc     08 4E 05 F1 | 	add	fp, #8
0fd00     A7 1E 02 FB | 	rdlong	local01, fp
0fd04     08 4E 85 F1 | 	sub	fp, #8
0fd08     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd0c     14 4E 05 A1 |  if_e	add	fp, #20
0fd10     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd14     14 4E 85 A1 |  if_e	sub	fp, #20
0fd18     12 23 02 A6 |  if_e	mov	local03, local04
0fd1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fd20     28 00 90 5D |  if_ne	jmp	#LR__1242
0fd24     A7 1E 02 FB | 	rdlong	local01, fp
0fd28     0C 4E 05 F1 | 	add	fp, #12
0fd2c     A7 20 02 FB | 	rdlong	local02, fp
0fd30     0C 4E 85 F1 | 	sub	fp, #12
0fd34     10 1F 82 F1 | 	sub	local01, local02
0fd38     A7 1E 62 FC | 	wrlong	local01, fp
0fd3c     08 4E 05 F1 | 	add	fp, #8
0fd40     A7 38 68 FC | 	wrlong	#28, fp
0fd44     08 4E 85 F1 | 	sub	fp, #8
0fd48     7C 02 90 FD | 	jmp	#LR__1250
0fd4c                 | LR__1242
0fd4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fd4c     08 4E 05 F1 | 	add	fp, #8
0fd50     A7 1E 02 FB | 	rdlong	local01, fp
0fd54     08 4E 85 F1 | 	sub	fp, #8
0fd58     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd5c     14 4E 05 A1 |  if_e	add	fp, #20
0fd60     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd64     14 4E 85 A1 |  if_e	sub	fp, #20
0fd68     12 23 02 A6 |  if_e	mov	local03, local04
0fd6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fd70     34 00 90 5D |  if_ne	jmp	#LR__1243
0fd74     A7 12 02 FB | 	rdlong	arg01, fp
0fd78     48 FE B0 FD | 	call	#__system___float_fromuns
0fd7c     FD 12 02 F6 | 	mov	arg01, result1
0fd80     0C 4E 05 F1 | 	add	fp, #12
0fd84     A7 14 02 FB | 	rdlong	arg02, fp
0fd88     0C 4E 85 F1 | 	sub	fp, #12
0fd8c     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd90     64 FE B0 FD | 	call	#__system___float_add
0fd94     A7 FA 61 FC | 	wrlong	result1, fp
0fd98     08 4E 05 F1 | 	add	fp, #8
0fd9c     A7 3C 68 FC | 	wrlong	#30, fp
0fda0     08 4E 85 F1 | 	sub	fp, #8
0fda4     20 02 90 FD | 	jmp	#LR__1250
0fda8                 | LR__1243
0fda8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0fda8     08 4E 05 F1 | 	add	fp, #8
0fdac     A7 1E 02 FB | 	rdlong	local01, fp
0fdb0     08 4E 85 F1 | 	sub	fp, #8
0fdb4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fdb8     14 4E 05 A1 |  if_e	add	fp, #20
0fdbc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fdc0     14 4E 85 A1 |  if_e	sub	fp, #20
0fdc4     12 23 02 A6 |  if_e	mov	local03, local04
0fdc8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fdcc     1C 00 90 5D |  if_ne	jmp	#LR__1244
0fdd0     A7 1E 02 FB | 	rdlong	local01, fp
0fdd4     0C 4E 05 F1 | 	add	fp, #12
0fdd8     A7 20 02 FB | 	rdlong	local02, fp
0fddc     0C 4E 85 F1 | 	sub	fp, #12
0fde0     10 1F 82 F1 | 	sub	local01, local02
0fde4     A7 1E 62 FC | 	wrlong	local01, fp
0fde8     DC 01 90 FD | 	jmp	#LR__1250
0fdec                 | LR__1244
0fdec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0fdec     08 4E 05 F1 | 	add	fp, #8
0fdf0     A7 1E 02 FB | 	rdlong	local01, fp
0fdf4     08 4E 85 F1 | 	sub	fp, #8
0fdf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fdfc     14 4E 05 A1 |  if_e	add	fp, #20
0fe00     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe04     14 4E 85 A1 |  if_e	sub	fp, #20
0fe08     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0fe0c     1C 00 90 5D |  if_ne	jmp	#LR__1245
0fe10     A7 1E 02 FB | 	rdlong	local01, fp
0fe14     0C 4E 05 F1 | 	add	fp, #12
0fe18     A7 20 02 FB | 	rdlong	local02, fp
0fe1c     0C 4E 85 F1 | 	sub	fp, #12
0fe20     10 1F 82 F1 | 	sub	local01, local02
0fe24     A7 1E 62 FC | 	wrlong	local01, fp
0fe28     9C 01 90 FD | 	jmp	#LR__1250
0fe2c                 | LR__1245
0fe2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fe2c     08 4E 05 F1 | 	add	fp, #8
0fe30     A7 1E 02 FB | 	rdlong	local01, fp
0fe34     08 4E 85 F1 | 	sub	fp, #8
0fe38     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe3c     14 4E 05 A1 |  if_e	add	fp, #20
0fe40     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe44     14 4E 85 A1 |  if_e	sub	fp, #20
0fe48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fe4c     44 00 90 5D |  if_ne	jmp	#LR__1246
0fe50     A7 12 02 FB | 	rdlong	arg01, fp
0fe54     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe58     1F 26 C6 C9 |  if_b	decod	local05, #31
0fe5c     00 26 06 36 |  if_ae	mov	local05, #0
0fe60     60 FD B0 FD | 	call	#__system___float_fromuns
0fe64     13 FB 61 F5 | 	xor	result1, local05
0fe68     FD 12 02 F6 | 	mov	arg01, result1
0fe6c     0C 4E 05 F1 | 	add	fp, #12
0fe70     A7 14 02 FB | 	rdlong	arg02, fp
0fe74     0C 4E 85 F1 | 	sub	fp, #12
0fe78     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe7c     78 FD B0 FD | 	call	#__system___float_add
0fe80     A7 FA 61 FC | 	wrlong	result1, fp
0fe84     08 4E 05 F1 | 	add	fp, #8
0fe88     A7 3C 68 FC | 	wrlong	#30, fp
0fe8c     08 4E 85 F1 | 	sub	fp, #8
0fe90     34 01 90 FD | 	jmp	#LR__1250
0fe94                 | LR__1246
0fe94                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0fe94     08 4E 05 F1 | 	add	fp, #8
0fe98     A7 1E 02 FB | 	rdlong	local01, fp
0fe9c     08 4E 85 F1 | 	sub	fp, #8
0fea0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fea4     14 4E 05 A1 |  if_e	add	fp, #20
0fea8     A7 22 02 AB |  if_e	rdlong	local03, fp
0feac     14 4E 85 A1 |  if_e	sub	fp, #20
0feb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0feb4     2C 00 90 5D |  if_ne	jmp	#LR__1247
0feb8     A7 1E 02 FB | 	rdlong	local01, fp
0febc     0C 4E 05 F1 | 	add	fp, #12
0fec0     A7 12 02 FB | 	rdlong	arg01, fp
0fec4     0C 4E 85 F1 | 	sub	fp, #12
0fec8     F8 FC B0 FD | 	call	#__system___float_fromuns
0fecc     FD 14 02 F6 | 	mov	arg02, result1
0fed0     0F 13 02 F6 | 	mov	arg01, local01
0fed4     1F 14 E6 F4 | 	bitnot	arg02, #31
0fed8     1C FD B0 FD | 	call	#__system___float_add
0fedc     A7 FA 61 FC | 	wrlong	result1, fp
0fee0     E4 00 90 FD | 	jmp	#LR__1250
0fee4                 | LR__1247
0fee4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0fee4     08 4E 05 F1 | 	add	fp, #8
0fee8     A7 1E 02 FB | 	rdlong	local01, fp
0feec     08 4E 85 F1 | 	sub	fp, #8
0fef0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fef4     14 4E 05 A1 |  if_e	add	fp, #20
0fef8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fefc     14 4E 85 A1 |  if_e	sub	fp, #20
0ff00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff04     3C 00 90 5D |  if_ne	jmp	#LR__1248
0ff08     A7 1E 02 FB | 	rdlong	local01, fp
0ff0c     0C 4E 05 F1 | 	add	fp, #12
0ff10     A7 12 02 FB | 	rdlong	arg01, fp
0ff14     0C 4E 85 F1 | 	sub	fp, #12
0ff18     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff1c     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff20     00 26 06 36 |  if_ae	mov	local05, #0
0ff24     9C FC B0 FD | 	call	#__system___float_fromuns
0ff28     13 FB 61 F5 | 	xor	result1, local05
0ff2c     FD 14 02 F6 | 	mov	arg02, result1
0ff30     0F 13 02 F6 | 	mov	arg01, local01
0ff34     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff38     BC FC B0 FD | 	call	#__system___float_add
0ff3c     A7 FA 61 FC | 	wrlong	result1, fp
0ff40     84 00 90 FD | 	jmp	#LR__1250
0ff44                 | LR__1248
0ff44                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0ff44     08 4E 05 F1 | 	add	fp, #8
0ff48     A7 1E 02 FB | 	rdlong	local01, fp
0ff4c     08 4E 85 F1 | 	sub	fp, #8
0ff50     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff54     14 4E 05 A1 |  if_e	add	fp, #20
0ff58     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff5c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff64     20 00 90 5D |  if_ne	jmp	#LR__1249
0ff68     A7 12 02 FB | 	rdlong	arg01, fp
0ff6c     0C 4E 05 F1 | 	add	fp, #12
0ff70     A7 14 02 FB | 	rdlong	arg02, fp
0ff74     0C 4E 85 F1 | 	sub	fp, #12
0ff78     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff7c     78 FC B0 FD | 	call	#__system___float_add
0ff80     A7 FA 61 FC | 	wrlong	result1, fp
0ff84     40 00 90 FD | 	jmp	#LR__1250
0ff88                 | LR__1249
0ff88                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0ff88     08 4E 05 F1 | 	add	fp, #8
0ff8c     A7 1E 02 FB | 	rdlong	local01, fp
0ff90     08 4E 85 F1 | 	sub	fp, #8
0ff94     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ff98     14 4E 05 51 |  if_ne	add	fp, #20
0ff9c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ffa0     14 4E 85 51 |  if_ne	sub	fp, #20
0ffa4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0ffa8     A7 06 68 AC |  if_e	wrlong	#3, fp
0ffac     08 4E 05 A1 |  if_e	add	fp, #8
0ffb0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ffb4     08 4E 85 A1 |  if_e	sub	fp, #8
0ffb8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0ffbc     08 4E 05 51 |  if_ne	add	fp, #8
0ffc0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ffc4     08 4E 85 51 |  if_ne	sub	fp, #8
0ffc8                 | LR__1250
0ffc8     A7 12 02 F6 | 	mov	arg01, fp
0ffcc     74 A2 BF FD | 	call	#_push
0ffd0     A7 F0 03 F6 | 	mov	ptra, fp
0ffd4     B2 00 A0 FD | 	call	#popregs_
0ffd8                 | _do_minus_ret
0ffd8     2D 00 64 FD | 	ret
0ffdc                 | 
0ffdc                 | ' 
0ffdc                 | ' sub do_and 
0ffdc                 | _do_and
0ffdc     03 4A 05 F6 | 	mov	COUNT_, #3
0ffe0     A8 00 A0 FD | 	call	#pushregs_
0ffe4     18 F0 07 F1 | 	add	ptra, #24
0ffe8     C0 A1 BF FD | 	call	#_pop
0ffec     FD 12 02 F6 | 	mov	arg01, result1
0fff0     FE 1E 02 F6 | 	mov	local01, result2
0fff4     FF 20 02 F6 | 	mov	local02, result3
0fff8     0C 4E 05 F1 | 	add	fp, #12
0fffc     A7 12 62 FC | 	wrlong	arg01, fp
10000     04 4E 05 F1 | 	add	fp, #4
10004     A7 1E 62 FC | 	wrlong	local01, fp
10008     04 4E 05 F1 | 	add	fp, #4
1000c     A7 20 62 FC | 	wrlong	local02, fp
10010     14 4E 85 F1 | 	sub	fp, #20
10014     94 A1 BF FD | 	call	#_pop
10018     FF 22 02 F6 | 	mov	local03, result3
1001c     A7 FA 61 FC | 	wrlong	result1, fp
10020     04 4E 05 F1 | 	add	fp, #4
10024     A7 FC 61 FC | 	wrlong	result2, fp
10028     04 4E 05 F1 | 	add	fp, #4
1002c     A7 22 62 FC | 	wrlong	local03, fp
10030                 | ' 
10030                 | ' t2=pop()
10030                 | ' t1=pop()
10030                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10030     08 4E 85 F1 | 	sub	fp, #8
10034     1C 22 0E F2 | 	cmp	local03, #28 wz
10038     A7 22 02 AB |  if_e	rdlong	local03, fp
1003c     A7 22 62 AC |  if_e	wrlong	local03, fp
10040     08 4E 05 A1 |  if_e	add	fp, #8
10044     A7 3A 68 AC |  if_e	wrlong	#29, fp
10048     08 4E 85 A1 |  if_e	sub	fp, #8
1004c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1004c     14 4E 05 F1 | 	add	fp, #20
10050     A7 22 02 FB | 	rdlong	local03, fp
10054     14 4E 85 F1 | 	sub	fp, #20
10058     1C 22 0E F2 | 	cmp	local03, #28 wz
1005c     18 00 90 5D |  if_ne	jmp	#LR__1260
10060     0C 4E 05 F1 | 	add	fp, #12
10064     A7 22 02 FB | 	rdlong	local03, fp
10068     A7 22 62 FC | 	wrlong	local03, fp
1006c     08 4E 05 F1 | 	add	fp, #8
10070     A7 3A 68 FC | 	wrlong	#29, fp
10074     14 4E 85 F1 | 	sub	fp, #20
10078                 | LR__1260
10078                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
10078     08 4E 05 F1 | 	add	fp, #8
1007c     A7 22 02 FB | 	rdlong	local03, fp
10080     08 4E 85 F1 | 	sub	fp, #8
10084     1F 22 0E F2 | 	cmp	local03, #31 wz
10088     14 4E 05 51 |  if_ne	add	fp, #20
1008c     A7 20 02 5B |  if_ne	rdlong	local02, fp
10090     14 4E 85 51 |  if_ne	sub	fp, #20
10094     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10098     08 4E 05 51 |  if_ne	add	fp, #8
1009c     A7 22 02 5B |  if_ne	rdlong	local03, fp
100a0     08 4E 85 51 |  if_ne	sub	fp, #8
100a4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
100a8     14 4E 05 51 |  if_ne	add	fp, #20
100ac     14 4E 85 51 |  if_ne	sub	fp, #20
100b0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
100b4     A7 0C 68 AC |  if_e	wrlong	#6, fp
100b8     08 4E 05 A1 |  if_e	add	fp, #8
100bc     A7 FE 69 AC |  if_e	wrlong	#255, fp
100c0     08 4E 85 A1 |  if_e	sub	fp, #8
100c4     18 00 90 AD |  if_e	jmp	#LR__1261
100c8     A7 22 02 FB | 	rdlong	local03, fp
100cc     0C 4E 05 F1 | 	add	fp, #12
100d0     A7 1E 02 FB | 	rdlong	local01, fp
100d4     0C 4E 85 F1 | 	sub	fp, #12
100d8     0F 23 02 F5 | 	and	local03, local01
100dc     A7 22 62 FC | 	wrlong	local03, fp
100e0                 | LR__1261
100e0     A7 12 02 F6 | 	mov	arg01, fp
100e4     5C A1 BF FD | 	call	#_push
100e8     A7 F0 03 F6 | 	mov	ptra, fp
100ec     B2 00 A0 FD | 	call	#popregs_
100f0                 | _do_and_ret
100f0     2D 00 64 FD | 	ret
100f4                 | 
100f4                 | ' 
100f4                 | ' sub do_or 
100f4                 | _do_or
100f4     03 4A 05 F6 | 	mov	COUNT_, #3
100f8     A8 00 A0 FD | 	call	#pushregs_
100fc     18 F0 07 F1 | 	add	ptra, #24
10100     A8 A0 BF FD | 	call	#_pop
10104     FD 12 02 F6 | 	mov	arg01, result1
10108     FE 1E 02 F6 | 	mov	local01, result2
1010c     FF 20 02 F6 | 	mov	local02, result3
10110     0C 4E 05 F1 | 	add	fp, #12
10114     A7 12 62 FC | 	wrlong	arg01, fp
10118     04 4E 05 F1 | 	add	fp, #4
1011c     A7 1E 62 FC | 	wrlong	local01, fp
10120     04 4E 05 F1 | 	add	fp, #4
10124     A7 20 62 FC | 	wrlong	local02, fp
10128     14 4E 85 F1 | 	sub	fp, #20
1012c     7C A0 BF FD | 	call	#_pop
10130     FF 22 02 F6 | 	mov	local03, result3
10134     A7 FA 61 FC | 	wrlong	result1, fp
10138     04 4E 05 F1 | 	add	fp, #4
1013c     A7 FC 61 FC | 	wrlong	result2, fp
10140     04 4E 05 F1 | 	add	fp, #4
10144     A7 22 62 FC | 	wrlong	local03, fp
10148                 | ' 
10148                 | ' t2=pop()
10148                 | ' t1=pop()
10148                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10148     08 4E 85 F1 | 	sub	fp, #8
1014c     1C 22 0E F2 | 	cmp	local03, #28 wz
10150     A7 22 02 AB |  if_e	rdlong	local03, fp
10154     A7 22 62 AC |  if_e	wrlong	local03, fp
10158     08 4E 05 A1 |  if_e	add	fp, #8
1015c     A7 3A 68 AC |  if_e	wrlong	#29, fp
10160     08 4E 85 A1 |  if_e	sub	fp, #8
10164                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10164     14 4E 05 F1 | 	add	fp, #20
10168     A7 22 02 FB | 	rdlong	local03, fp
1016c     14 4E 85 F1 | 	sub	fp, #20
10170     1C 22 0E F2 | 	cmp	local03, #28 wz
10174     18 00 90 5D |  if_ne	jmp	#LR__1270
10178     0C 4E 05 F1 | 	add	fp, #12
1017c     A7 22 02 FB | 	rdlong	local03, fp
10180     A7 22 62 FC | 	wrlong	local03, fp
10184     08 4E 05 F1 | 	add	fp, #8
10188     A7 3A 68 FC | 	wrlong	#29, fp
1018c     14 4E 85 F1 | 	sub	fp, #20
10190                 | LR__1270
10190                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
10190     08 4E 05 F1 | 	add	fp, #8
10194     A7 22 02 FB | 	rdlong	local03, fp
10198     08 4E 85 F1 | 	sub	fp, #8
1019c     1F 22 0E F2 | 	cmp	local03, #31 wz
101a0     14 4E 05 51 |  if_ne	add	fp, #20
101a4     A7 20 02 5B |  if_ne	rdlong	local02, fp
101a8     14 4E 85 51 |  if_ne	sub	fp, #20
101ac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
101b0     08 4E 05 51 |  if_ne	add	fp, #8
101b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
101b8     08 4E 85 51 |  if_ne	sub	fp, #8
101bc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
101c0     14 4E 05 51 |  if_ne	add	fp, #20
101c4     14 4E 85 51 |  if_ne	sub	fp, #20
101c8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
101cc     A7 0C 68 AC |  if_e	wrlong	#6, fp
101d0     08 4E 05 A1 |  if_e	add	fp, #8
101d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
101d8     08 4E 85 A1 |  if_e	sub	fp, #8
101dc     18 00 90 AD |  if_e	jmp	#LR__1271
101e0     A7 22 02 FB | 	rdlong	local03, fp
101e4     0C 4E 05 F1 | 	add	fp, #12
101e8     A7 1E 02 FB | 	rdlong	local01, fp
101ec     0C 4E 85 F1 | 	sub	fp, #12
101f0     0F 23 42 F5 | 	or	local03, local01
101f4     A7 22 62 FC | 	wrlong	local03, fp
101f8                 | LR__1271
101f8     A7 12 02 F6 | 	mov	arg01, fp
101fc     44 A0 BF FD | 	call	#_push
10200     A7 F0 03 F6 | 	mov	ptra, fp
10204     B2 00 A0 FD | 	call	#popregs_
10208                 | _do_or_ret
10208     2D 00 64 FD | 	ret
1020c                 | 
1020c                 | ' 
1020c                 | ' sub do_mul
1020c                 | _do_mul
1020c     05 4A 05 F6 | 	mov	COUNT_, #5
10210     A8 00 A0 FD | 	call	#pushregs_
10214     18 F0 07 F1 | 	add	ptra, #24
10218     90 9F BF FD | 	call	#_pop
1021c     FD 1E 02 F6 | 	mov	local01, result1
10220     FE 20 02 F6 | 	mov	local02, result2
10224     FF 22 02 F6 | 	mov	local03, result3
10228     0C 4E 05 F1 | 	add	fp, #12
1022c     A7 1E 62 FC | 	wrlong	local01, fp
10230     04 4E 05 F1 | 	add	fp, #4
10234     A7 20 62 FC | 	wrlong	local02, fp
10238     04 4E 05 F1 | 	add	fp, #4
1023c     A7 22 62 FC | 	wrlong	local03, fp
10240     14 4E 85 F1 | 	sub	fp, #20
10244     64 9F BF FD | 	call	#_pop
10248     FF 22 02 F6 | 	mov	local03, result3
1024c     A7 FA 61 FC | 	wrlong	result1, fp
10250     04 4E 05 F1 | 	add	fp, #4
10254     A7 FC 61 FC | 	wrlong	result2, fp
10258     04 4E 05 F1 | 	add	fp, #4
1025c     A7 22 62 FC | 	wrlong	local03, fp
10260                 | ' 
10260                 | ' t2=pop()
10260                 | ' t1=pop()
10260                 | ' 
10260                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10260     08 4E 85 F1 | 	sub	fp, #8
10264     1D 22 0E F2 | 	cmp	local03, #29 wz
10268     14 4E 05 A1 |  if_e	add	fp, #20
1026c     A7 24 02 AB |  if_e	rdlong	local04, fp
10270     14 4E 85 A1 |  if_e	sub	fp, #20
10274     12 23 02 A6 |  if_e	mov	local03, local04
10278     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1027c     20 00 90 5D |  if_ne	jmp	#LR__1280
10280     A7 20 02 FB | 	rdlong	local02, fp
10284     0C 4E 05 F1 | 	add	fp, #12
10288     A7 22 02 FB | 	rdlong	local03, fp
1028c     11 21 02 FD | 	qmul	local02, local03
10290     0C 4E 85 F1 | 	sub	fp, #12
10294     18 1E 62 FD | 	getqx	local01
10298     A7 1E 62 FC | 	wrlong	local01, fp
1029c     C4 02 90 FD | 	jmp	#LR__1289
102a0                 | LR__1280
102a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
102a0     08 4E 05 F1 | 	add	fp, #8
102a4     A7 1E 02 FB | 	rdlong	local01, fp
102a8     08 4E 85 F1 | 	sub	fp, #8
102ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
102b0     14 4E 05 A1 |  if_e	add	fp, #20
102b4     A7 24 02 AB |  if_e	rdlong	local04, fp
102b8     14 4E 85 A1 |  if_e	sub	fp, #20
102bc     12 23 02 A6 |  if_e	mov	local03, local04
102c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
102c4     2C 00 90 5D |  if_ne	jmp	#LR__1281
102c8     A7 20 02 FB | 	rdlong	local02, fp
102cc     0C 4E 05 F1 | 	add	fp, #12
102d0     A7 22 02 FB | 	rdlong	local03, fp
102d4     11 21 02 FD | 	qmul	local02, local03
102d8     0C 4E 85 F1 | 	sub	fp, #12
102dc     18 1E 62 FD | 	getqx	local01
102e0     A7 1E 62 FC | 	wrlong	local01, fp
102e4     08 4E 05 F1 | 	add	fp, #8
102e8     A7 38 68 FC | 	wrlong	#28, fp
102ec     08 4E 85 F1 | 	sub	fp, #8
102f0     70 02 90 FD | 	jmp	#LR__1289
102f4                 | LR__1281
102f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
102f4     08 4E 05 F1 | 	add	fp, #8
102f8     A7 1E 02 FB | 	rdlong	local01, fp
102fc     08 4E 85 F1 | 	sub	fp, #8
10300     1D 1E 0E F2 | 	cmp	local01, #29 wz
10304     14 4E 05 A1 |  if_e	add	fp, #20
10308     A7 24 02 AB |  if_e	rdlong	local04, fp
1030c     14 4E 85 A1 |  if_e	sub	fp, #20
10310     12 23 02 A6 |  if_e	mov	local03, local04
10314     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10318     30 00 90 5D |  if_ne	jmp	#LR__1282
1031c     A7 12 02 FB | 	rdlong	arg01, fp
10320     A0 F8 B0 FD | 	call	#__system___float_fromuns
10324     FD 12 02 F6 | 	mov	arg01, result1
10328     0C 4E 05 F1 | 	add	fp, #12
1032c     A7 14 02 FB | 	rdlong	arg02, fp
10330     0C 4E 85 F1 | 	sub	fp, #12
10334     90 FC B0 FD | 	call	#__system___float_mul
10338     A7 FA 61 FC | 	wrlong	result1, fp
1033c     08 4E 05 F1 | 	add	fp, #8
10340     A7 3C 68 FC | 	wrlong	#30, fp
10344     08 4E 85 F1 | 	sub	fp, #8
10348     18 02 90 FD | 	jmp	#LR__1289
1034c                 | LR__1282
1034c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1034c     08 4E 05 F1 | 	add	fp, #8
10350     A7 1E 02 FB | 	rdlong	local01, fp
10354     08 4E 85 F1 | 	sub	fp, #8
10358     1C 1E 0E F2 | 	cmp	local01, #28 wz
1035c     14 4E 05 A1 |  if_e	add	fp, #20
10360     A7 24 02 AB |  if_e	rdlong	local04, fp
10364     14 4E 85 A1 |  if_e	sub	fp, #20
10368     12 23 02 A6 |  if_e	mov	local03, local04
1036c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10370     20 00 90 5D |  if_ne	jmp	#LR__1283
10374     A7 20 02 FB | 	rdlong	local02, fp
10378     0C 4E 05 F1 | 	add	fp, #12
1037c     A7 22 02 FB | 	rdlong	local03, fp
10380     11 21 02 FD | 	qmul	local02, local03
10384     0C 4E 85 F1 | 	sub	fp, #12
10388     18 1E 62 FD | 	getqx	local01
1038c     A7 1E 62 FC | 	wrlong	local01, fp
10390     D0 01 90 FD | 	jmp	#LR__1289
10394                 | LR__1283
10394                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10394     08 4E 05 F1 | 	add	fp, #8
10398     A7 1E 02 FB | 	rdlong	local01, fp
1039c     08 4E 85 F1 | 	sub	fp, #8
103a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
103a4     14 4E 05 A1 |  if_e	add	fp, #20
103a8     A7 24 02 AB |  if_e	rdlong	local04, fp
103ac     14 4E 85 A1 |  if_e	sub	fp, #20
103b0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
103b4     20 00 90 5D |  if_ne	jmp	#LR__1284
103b8     A7 20 02 FB | 	rdlong	local02, fp
103bc     0C 4E 05 F1 | 	add	fp, #12
103c0     A7 22 02 FB | 	rdlong	local03, fp
103c4     11 21 02 FD | 	qmul	local02, local03
103c8     0C 4E 85 F1 | 	sub	fp, #12
103cc     18 1E 62 FD | 	getqx	local01
103d0     A7 1E 62 FC | 	wrlong	local01, fp
103d4     8C 01 90 FD | 	jmp	#LR__1289
103d8                 | LR__1284
103d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
103d8     08 4E 05 F1 | 	add	fp, #8
103dc     A7 1E 02 FB | 	rdlong	local01, fp
103e0     08 4E 85 F1 | 	sub	fp, #8
103e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
103e8     14 4E 05 A1 |  if_e	add	fp, #20
103ec     A7 22 02 AB |  if_e	rdlong	local03, fp
103f0     14 4E 85 A1 |  if_e	sub	fp, #20
103f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
103f8     40 00 90 5D |  if_ne	jmp	#LR__1285
103fc     A7 12 02 FB | 	rdlong	arg01, fp
10400     09 13 52 F6 | 	abs	arg01, arg01 wc
10404     1F 26 C6 C9 |  if_b	decod	local05, #31
10408     00 26 06 36 |  if_ae	mov	local05, #0
1040c     B4 F7 B0 FD | 	call	#__system___float_fromuns
10410     13 FB 61 F5 | 	xor	result1, local05
10414     FD 12 02 F6 | 	mov	arg01, result1
10418     0C 4E 05 F1 | 	add	fp, #12
1041c     A7 14 02 FB | 	rdlong	arg02, fp
10420     0C 4E 85 F1 | 	sub	fp, #12
10424     A0 FB B0 FD | 	call	#__system___float_mul
10428     A7 FA 61 FC | 	wrlong	result1, fp
1042c     08 4E 05 F1 | 	add	fp, #8
10430     A7 3C 68 FC | 	wrlong	#30, fp
10434     08 4E 85 F1 | 	sub	fp, #8
10438     28 01 90 FD | 	jmp	#LR__1289
1043c                 | LR__1285
1043c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1043c     08 4E 05 F1 | 	add	fp, #8
10440     A7 1E 02 FB | 	rdlong	local01, fp
10444     08 4E 85 F1 | 	sub	fp, #8
10448     1E 1E 0E F2 | 	cmp	local01, #30 wz
1044c     14 4E 05 A1 |  if_e	add	fp, #20
10450     A7 22 02 AB |  if_e	rdlong	local03, fp
10454     14 4E 85 A1 |  if_e	sub	fp, #20
10458     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1045c     28 00 90 5D |  if_ne	jmp	#LR__1286
10460     A7 1E 02 FB | 	rdlong	local01, fp
10464     0C 4E 05 F1 | 	add	fp, #12
10468     A7 12 02 FB | 	rdlong	arg01, fp
1046c     0C 4E 85 F1 | 	sub	fp, #12
10470     50 F7 B0 FD | 	call	#__system___float_fromuns
10474     FD 14 02 F6 | 	mov	arg02, result1
10478     0F 13 02 F6 | 	mov	arg01, local01
1047c     48 FB B0 FD | 	call	#__system___float_mul
10480     A7 FA 61 FC | 	wrlong	result1, fp
10484     DC 00 90 FD | 	jmp	#LR__1289
10488                 | LR__1286
10488                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10488     08 4E 05 F1 | 	add	fp, #8
1048c     A7 1E 02 FB | 	rdlong	local01, fp
10490     08 4E 85 F1 | 	sub	fp, #8
10494     1E 1E 0E F2 | 	cmp	local01, #30 wz
10498     14 4E 05 A1 |  if_e	add	fp, #20
1049c     A7 22 02 AB |  if_e	rdlong	local03, fp
104a0     14 4E 85 A1 |  if_e	sub	fp, #20
104a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
104a8     38 00 90 5D |  if_ne	jmp	#LR__1287
104ac     A7 1E 02 FB | 	rdlong	local01, fp
104b0     0C 4E 05 F1 | 	add	fp, #12
104b4     A7 12 02 FB | 	rdlong	arg01, fp
104b8     0C 4E 85 F1 | 	sub	fp, #12
104bc     09 13 52 F6 | 	abs	arg01, arg01 wc
104c0     1F 26 C6 C9 |  if_b	decod	local05, #31
104c4     00 26 06 36 |  if_ae	mov	local05, #0
104c8     F8 F6 B0 FD | 	call	#__system___float_fromuns
104cc     13 FB 61 F5 | 	xor	result1, local05
104d0     FD 14 02 F6 | 	mov	arg02, result1
104d4     0F 13 02 F6 | 	mov	arg01, local01
104d8     EC FA B0 FD | 	call	#__system___float_mul
104dc     A7 FA 61 FC | 	wrlong	result1, fp
104e0     80 00 90 FD | 	jmp	#LR__1289
104e4                 | LR__1287
104e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
104e4     08 4E 05 F1 | 	add	fp, #8
104e8     A7 1E 02 FB | 	rdlong	local01, fp
104ec     08 4E 85 F1 | 	sub	fp, #8
104f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
104f4     14 4E 05 A1 |  if_e	add	fp, #20
104f8     A7 22 02 AB |  if_e	rdlong	local03, fp
104fc     14 4E 85 A1 |  if_e	sub	fp, #20
10500     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10504     1C 00 90 5D |  if_ne	jmp	#LR__1288
10508     A7 12 02 FB | 	rdlong	arg01, fp
1050c     0C 4E 05 F1 | 	add	fp, #12
10510     A7 14 02 FB | 	rdlong	arg02, fp
10514     0C 4E 85 F1 | 	sub	fp, #12
10518     AC FA B0 FD | 	call	#__system___float_mul
1051c     A7 FA 61 FC | 	wrlong	result1, fp
10520     40 00 90 FD | 	jmp	#LR__1289
10524                 | LR__1288
10524                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
10524     08 4E 05 F1 | 	add	fp, #8
10528     A7 1E 02 FB | 	rdlong	local01, fp
1052c     08 4E 85 F1 | 	sub	fp, #8
10530     1F 1E 0E F2 | 	cmp	local01, #31 wz
10534     14 4E 05 51 |  if_ne	add	fp, #20
10538     A7 22 02 5B |  if_ne	rdlong	local03, fp
1053c     14 4E 85 51 |  if_ne	sub	fp, #20
10540     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10544     A7 10 68 AC |  if_e	wrlong	#8, fp
10548     08 4E 05 A1 |  if_e	add	fp, #8
1054c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10550     08 4E 85 A1 |  if_e	sub	fp, #8
10554     A7 12 68 5C |  if_ne	wrlong	#9, fp
10558     08 4E 05 51 |  if_ne	add	fp, #8
1055c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10560     08 4E 85 51 |  if_ne	sub	fp, #8
10564                 | LR__1289
10564     A7 12 02 F6 | 	mov	arg01, fp
10568     D8 9C BF FD | 	call	#_push
1056c     A7 F0 03 F6 | 	mov	ptra, fp
10570     B2 00 A0 FD | 	call	#popregs_
10574                 | _do_mul_ret
10574     2D 00 64 FD | 	ret
10578                 | 
10578                 | ' 
10578                 | ' sub do_div 
10578                 | _do_div
10578     01 4A 05 F6 | 	mov	COUNT_, #1
1057c     A8 00 A0 FD | 	call	#pushregs_
10580     18 F0 07 F1 | 	add	ptra, #24
10584     24 9C BF FD | 	call	#_pop
10588     FD 66 02 F6 | 	mov	muldivb_, result1
1058c     FE 64 02 F6 | 	mov	muldiva_, result2
10590     FF 1E 02 F6 | 	mov	local01, result3
10594     0C 4E 05 F1 | 	add	fp, #12
10598     A7 66 62 FC | 	wrlong	muldivb_, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 64 62 FC | 	wrlong	muldiva_, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 1E 62 FC | 	wrlong	local01, fp
105ac     14 4E 85 F1 | 	sub	fp, #20
105b0     F8 9B BF FD | 	call	#_pop
105b4     A7 FA 61 FC | 	wrlong	result1, fp
105b8     04 4E 05 F1 | 	add	fp, #4
105bc     A7 FC 61 FC | 	wrlong	result2, fp
105c0     04 4E 05 F1 | 	add	fp, #4
105c4     A7 FE 61 FC | 	wrlong	result3, fp
105c8                 | ' 
105c8                 | ' t2=pop()
105c8                 | ' t1=pop()
105c8                 | ' 
105c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
105c8     08 4E 85 F1 | 	sub	fp, #8
105cc     1F FE 0D F2 | 	cmp	result3, #31 wz
105d0     14 4E 05 51 |  if_ne	add	fp, #20
105d4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
105d8     14 4E 85 51 |  if_ne	sub	fp, #20
105dc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
105e0     A7 14 68 AC |  if_e	wrlong	#10, fp
105e4     08 4E 05 A1 |  if_e	add	fp, #8
105e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
105ec     08 4E 85 A1 |  if_e	sub	fp, #8
105f0     90 01 90 AD |  if_e	jmp	#LR__1296
105f4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
105f4     08 4E 05 F1 | 	add	fp, #8
105f8     A7 66 02 FB | 	rdlong	muldivb_, fp
105fc     08 4E 85 F1 | 	sub	fp, #8
10600     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10604     1C 00 90 5D |  if_ne	jmp	#LR__1290
10608     08 4E 05 F1 | 	add	fp, #8
1060c     A7 38 68 FC | 	wrlong	#28, fp
10610     08 4E 85 F1 | 	sub	fp, #8
10614     A7 12 02 FB | 	rdlong	arg01, fp
10618     00 14 06 F6 | 	mov	arg02, #0
1061c     70 FE B0 FD | 	call	#__system___float_tointeger
10620     A7 FA 61 FC | 	wrlong	result1, fp
10624                 | LR__1290
10624                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10624     14 4E 05 F1 | 	add	fp, #20
10628     A7 66 02 FB | 	rdlong	muldivb_, fp
1062c     14 4E 85 F1 | 	sub	fp, #20
10630     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10634     28 00 90 5D |  if_ne	jmp	#LR__1291
10638     14 4E 05 F1 | 	add	fp, #20
1063c     A7 38 68 FC | 	wrlong	#28, fp
10640     08 4E 85 F1 | 	sub	fp, #8
10644     A7 12 02 FB | 	rdlong	arg01, fp
10648     0C 4E 85 F1 | 	sub	fp, #12
1064c     00 14 06 F6 | 	mov	arg02, #0
10650     3C FE B0 FD | 	call	#__system___float_tointeger
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 FA 61 FC | 	wrlong	result1, fp
1065c     0C 4E 85 F1 | 	sub	fp, #12
10660                 | LR__1291
10660                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10660     08 4E 05 F1 | 	add	fp, #8
10664     A7 66 02 FB | 	rdlong	muldivb_, fp
10668     08 4E 85 F1 | 	sub	fp, #8
1066c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10670     14 4E 05 A1 |  if_e	add	fp, #20
10674     A7 1E 02 AB |  if_e	rdlong	local01, fp
10678     14 4E 85 A1 |  if_e	sub	fp, #20
1067c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10680     20 00 90 5D |  if_ne	jmp	#LR__1292
10684     0C 4E 05 F1 | 	add	fp, #12
10688     A7 1E 02 FB | 	rdlong	local01, fp
1068c     0C 4E 85 F1 | 	sub	fp, #12
10690     A7 66 02 FB | 	rdlong	muldivb_, fp
10694     0F 67 12 FD | 	qdiv	muldivb_, local01
10698     18 1E 62 FD | 	getqx	local01
1069c     A7 1E 62 FC | 	wrlong	local01, fp
106a0     E0 00 90 FD | 	jmp	#LR__1296
106a4                 | LR__1292
106a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
106a4     08 4E 05 F1 | 	add	fp, #8
106a8     A7 66 02 FB | 	rdlong	muldivb_, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
106b4     14 4E 05 A1 |  if_e	add	fp, #20
106b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
106bc     14 4E 85 A1 |  if_e	sub	fp, #20
106c0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
106c4     2C 00 90 5D |  if_ne	jmp	#LR__1293
106c8     0C 4E 05 F1 | 	add	fp, #12
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     0C 4E 85 F1 | 	sub	fp, #12
106d4     A7 66 02 FB | 	rdlong	muldivb_, fp
106d8     0F 67 12 FD | 	qdiv	muldivb_, local01
106dc     18 1E 62 FD | 	getqx	local01
106e0     A7 1E 62 FC | 	wrlong	local01, fp
106e4     08 4E 05 F1 | 	add	fp, #8
106e8     A7 38 68 FC | 	wrlong	#28, fp
106ec     08 4E 85 F1 | 	sub	fp, #8
106f0     90 00 90 FD | 	jmp	#LR__1296
106f4                 | LR__1293
106f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
106f4     08 4E 05 F1 | 	add	fp, #8
106f8     A7 66 02 FB | 	rdlong	muldivb_, fp
106fc     08 4E 85 F1 | 	sub	fp, #8
10700     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10704     14 4E 05 A1 |  if_e	add	fp, #20
10708     A7 1E 02 AB |  if_e	rdlong	local01, fp
1070c     14 4E 85 A1 |  if_e	sub	fp, #20
10710     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10714     1C 00 90 5D |  if_ne	jmp	#LR__1294
10718     A7 64 02 FB | 	rdlong	muldiva_, fp
1071c     0C 4E 05 F1 | 	add	fp, #12
10720     A7 66 02 FB | 	rdlong	muldivb_, fp
10724     0C 4E 85 F1 | 	sub	fp, #12
10728     BA 00 A0 FD | 	call	#divide_
1072c     A7 66 62 FC | 	wrlong	muldivb_, fp
10730     50 00 90 FD | 	jmp	#LR__1296
10734                 | LR__1294
10734                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10734     08 4E 05 F1 | 	add	fp, #8
10738     A7 66 02 FB | 	rdlong	muldivb_, fp
1073c     08 4E 85 F1 | 	sub	fp, #8
10740     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10744     14 4E 05 A1 |  if_e	add	fp, #20
10748     A7 1E 02 AB |  if_e	rdlong	local01, fp
1074c     14 4E 85 A1 |  if_e	sub	fp, #20
10750     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10754     1C 00 90 5D |  if_ne	jmp	#LR__1295
10758     A7 64 02 FB | 	rdlong	muldiva_, fp
1075c     0C 4E 05 F1 | 	add	fp, #12
10760     A7 66 02 FB | 	rdlong	muldivb_, fp
10764     0C 4E 85 F1 | 	sub	fp, #12
10768     BA 00 A0 FD | 	call	#divide_
1076c     A7 66 62 FC | 	wrlong	muldivb_, fp
10770     10 00 90 FD | 	jmp	#LR__1296
10774                 | LR__1295
10774     A7 16 68 FC | 	wrlong	#11, fp
10778     08 4E 05 F1 | 	add	fp, #8
1077c     A7 FE 69 FC | 	wrlong	#255, fp
10780     08 4E 85 F1 | 	sub	fp, #8
10784                 | LR__1296
10784     A7 12 02 F6 | 	mov	arg01, fp
10788     B8 9A BF FD | 	call	#_push
1078c     A7 F0 03 F6 | 	mov	ptra, fp
10790     B2 00 A0 FD | 	call	#popregs_
10794                 | _do_div_ret
10794     2D 00 64 FD | 	ret
10798                 | 
10798                 | ' 
10798                 | ' sub do_fdiv 
10798                 | _do_fdiv
10798     02 4A 05 F6 | 	mov	COUNT_, #2
1079c     A8 00 A0 FD | 	call	#pushregs_
107a0     18 F0 07 F1 | 	add	ptra, #24
107a4     04 9A BF FD | 	call	#_pop
107a8     FD 14 02 F6 | 	mov	arg02, result1
107ac     FE 12 02 F6 | 	mov	arg01, result2
107b0     FF 1E 02 F6 | 	mov	local01, result3
107b4     0C 4E 05 F1 | 	add	fp, #12
107b8     A7 14 62 FC | 	wrlong	arg02, fp
107bc     04 4E 05 F1 | 	add	fp, #4
107c0     A7 12 62 FC | 	wrlong	arg01, fp
107c4     04 4E 05 F1 | 	add	fp, #4
107c8     A7 1E 62 FC | 	wrlong	local01, fp
107cc     14 4E 85 F1 | 	sub	fp, #20
107d0     D8 99 BF FD | 	call	#_pop
107d4     A7 FA 61 FC | 	wrlong	result1, fp
107d8     04 4E 05 F1 | 	add	fp, #4
107dc     A7 FC 61 FC | 	wrlong	result2, fp
107e0     04 4E 05 F1 | 	add	fp, #4
107e4     A7 FE 61 FC | 	wrlong	result3, fp
107e8                 | ' 
107e8                 | ' t2=pop()
107e8                 | ' t1=pop()
107e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
107e8     08 4E 85 F1 | 	sub	fp, #8
107ec     1F FE 0D F2 | 	cmp	result3, #31 wz
107f0     14 4E 05 51 |  if_ne	add	fp, #20
107f4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
107f8     14 4E 85 51 |  if_ne	sub	fp, #20
107fc     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10800     A7 14 68 AC |  if_e	wrlong	#10, fp
10804     08 4E 05 A1 |  if_e	add	fp, #8
10808     A7 FE 69 AC |  if_e	wrlong	#255, fp
1080c     08 4E 85 A1 |  if_e	sub	fp, #8
10810     38 01 90 AD |  if_e	jmp	#LR__1305
10814                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10814     08 4E 05 F1 | 	add	fp, #8
10818     A7 14 02 FB | 	rdlong	arg02, fp
1081c     08 4E 85 F1 | 	sub	fp, #8
10820     1C 14 0E F2 | 	cmp	arg02, #28 wz
10824     28 00 90 5D |  if_ne	jmp	#LR__1300
10828     08 4E 05 F1 | 	add	fp, #8
1082c     A7 3C 68 FC | 	wrlong	#30, fp
10830     08 4E 85 F1 | 	sub	fp, #8
10834     A7 12 02 FB | 	rdlong	arg01, fp
10838     09 13 52 F6 | 	abs	arg01, arg01 wc
1083c     1F 20 C6 C9 |  if_b	decod	local02, #31
10840     00 20 06 36 |  if_ae	mov	local02, #0
10844     7C F3 B0 FD | 	call	#__system___float_fromuns
10848     10 FB 61 F5 | 	xor	result1, local02
1084c     A7 FA 61 FC | 	wrlong	result1, fp
10850                 | LR__1300
10850                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10850     08 4E 05 F1 | 	add	fp, #8
10854     A7 14 02 FB | 	rdlong	arg02, fp
10858     08 4E 85 F1 | 	sub	fp, #8
1085c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10860     18 00 90 5D |  if_ne	jmp	#LR__1301
10864     08 4E 05 F1 | 	add	fp, #8
10868     A7 3C 68 FC | 	wrlong	#30, fp
1086c     08 4E 85 F1 | 	sub	fp, #8
10870     A7 12 02 FB | 	rdlong	arg01, fp
10874     4C F3 B0 FD | 	call	#__system___float_fromuns
10878     A7 FA 61 FC | 	wrlong	result1, fp
1087c                 | LR__1301
1087c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1087c     14 4E 05 F1 | 	add	fp, #20
10880     A7 14 02 FB | 	rdlong	arg02, fp
10884     14 4E 85 F1 | 	sub	fp, #20
10888     1C 14 0E F2 | 	cmp	arg02, #28 wz
1088c     34 00 90 5D |  if_ne	jmp	#LR__1302
10890     14 4E 05 F1 | 	add	fp, #20
10894     A7 3C 68 FC | 	wrlong	#30, fp
10898     08 4E 85 F1 | 	sub	fp, #8
1089c     A7 12 02 FB | 	rdlong	arg01, fp
108a0     0C 4E 85 F1 | 	sub	fp, #12
108a4     09 13 52 F6 | 	abs	arg01, arg01 wc
108a8     1F 20 C6 C9 |  if_b	decod	local02, #31
108ac     00 20 06 36 |  if_ae	mov	local02, #0
108b0     10 F3 B0 FD | 	call	#__system___float_fromuns
108b4     10 FB 61 F5 | 	xor	result1, local02
108b8     0C 4E 05 F1 | 	add	fp, #12
108bc     A7 FA 61 FC | 	wrlong	result1, fp
108c0     0C 4E 85 F1 | 	sub	fp, #12
108c4                 | LR__1302
108c4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
108c4     14 4E 05 F1 | 	add	fp, #20
108c8     A7 14 02 FB | 	rdlong	arg02, fp
108cc     14 4E 85 F1 | 	sub	fp, #20
108d0     1D 14 0E F2 | 	cmp	arg02, #29 wz
108d4     24 00 90 5D |  if_ne	jmp	#LR__1303
108d8     14 4E 05 F1 | 	add	fp, #20
108dc     A7 3C 68 FC | 	wrlong	#30, fp
108e0     08 4E 85 F1 | 	sub	fp, #8
108e4     A7 12 02 FB | 	rdlong	arg01, fp
108e8     0C 4E 85 F1 | 	sub	fp, #12
108ec     D4 F2 B0 FD | 	call	#__system___float_fromuns
108f0     0C 4E 05 F1 | 	add	fp, #12
108f4     A7 FA 61 FC | 	wrlong	result1, fp
108f8     0C 4E 85 F1 | 	sub	fp, #12
108fc                 | LR__1303
108fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
108fc     08 4E 05 F1 | 	add	fp, #8
10900     A7 14 02 FB | 	rdlong	arg02, fp
10904     08 4E 85 F1 | 	sub	fp, #8
10908     1E 14 0E F2 | 	cmp	arg02, #30 wz
1090c     14 4E 05 A1 |  if_e	add	fp, #20
10910     A7 1E 02 AB |  if_e	rdlong	local01, fp
10914     14 4E 85 A1 |  if_e	sub	fp, #20
10918     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1091c     1C 00 90 5D |  if_ne	jmp	#LR__1304
10920     A7 12 02 FB | 	rdlong	arg01, fp
10924     0C 4E 05 F1 | 	add	fp, #12
10928     A7 14 02 FB | 	rdlong	arg02, fp
1092c     0C 4E 85 F1 | 	sub	fp, #12
10930     98 F8 B0 FD | 	call	#__system___float_div
10934     A7 FA 61 FC | 	wrlong	result1, fp
10938     10 00 90 FD | 	jmp	#LR__1305
1093c                 | LR__1304
1093c     A7 16 68 FC | 	wrlong	#11, fp
10940     08 4E 05 F1 | 	add	fp, #8
10944     A7 FE 69 FC | 	wrlong	#255, fp
10948     08 4E 85 F1 | 	sub	fp, #8
1094c                 | LR__1305
1094c     A7 12 02 F6 | 	mov	arg01, fp
10950     F0 98 BF FD | 	call	#_push
10954     A7 F0 03 F6 | 	mov	ptra, fp
10958     B2 00 A0 FD | 	call	#popregs_
1095c                 | _do_fdiv_ret
1095c     2D 00 64 FD | 	ret
10960                 | 
10960                 | ' 
10960                 | ' 
10960                 | ' sub do_mod 
10960                 | _do_mod
10960     01 4A 05 F6 | 	mov	COUNT_, #1
10964     A8 00 A0 FD | 	call	#pushregs_
10968     18 F0 07 F1 | 	add	ptra, #24
1096c     3C 98 BF FD | 	call	#_pop
10970     FD 66 02 F6 | 	mov	muldivb_, result1
10974     FE 64 02 F6 | 	mov	muldiva_, result2
10978     FF 1E 02 F6 | 	mov	local01, result3
1097c     0C 4E 05 F1 | 	add	fp, #12
10980     A7 66 62 FC | 	wrlong	muldivb_, fp
10984     04 4E 05 F1 | 	add	fp, #4
10988     A7 64 62 FC | 	wrlong	muldiva_, fp
1098c     04 4E 05 F1 | 	add	fp, #4
10990     A7 1E 62 FC | 	wrlong	local01, fp
10994     14 4E 85 F1 | 	sub	fp, #20
10998     10 98 BF FD | 	call	#_pop
1099c     A7 FA 61 FC | 	wrlong	result1, fp
109a0     04 4E 05 F1 | 	add	fp, #4
109a4     A7 FC 61 FC | 	wrlong	result2, fp
109a8     04 4E 05 F1 | 	add	fp, #4
109ac     A7 FE 61 FC | 	wrlong	result3, fp
109b0                 | ' 
109b0                 | ' t2=pop()
109b0                 | ' t1=pop()
109b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
109b0     08 4E 85 F1 | 	sub	fp, #8
109b4     1F FE 0D F2 | 	cmp	result3, #31 wz
109b8     14 4E 05 51 |  if_ne	add	fp, #20
109bc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
109c0     14 4E 85 51 |  if_ne	sub	fp, #20
109c4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
109c8     A7 14 68 AC |  if_e	wrlong	#10, fp
109cc     08 4E 05 A1 |  if_e	add	fp, #8
109d0     A7 FE 69 AC |  if_e	wrlong	#255, fp
109d4     08 4E 85 A1 |  if_e	sub	fp, #8
109d8     90 01 90 AD |  if_e	jmp	#LR__1316
109dc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
109dc     08 4E 05 F1 | 	add	fp, #8
109e0     A7 66 02 FB | 	rdlong	muldivb_, fp
109e4     08 4E 85 F1 | 	sub	fp, #8
109e8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
109ec     1C 00 90 5D |  if_ne	jmp	#LR__1310
109f0     08 4E 05 F1 | 	add	fp, #8
109f4     A7 38 68 FC | 	wrlong	#28, fp
109f8     08 4E 85 F1 | 	sub	fp, #8
109fc     A7 12 02 FB | 	rdlong	arg01, fp
10a00     00 14 06 F6 | 	mov	arg02, #0
10a04     88 FA B0 FD | 	call	#__system___float_tointeger
10a08     A7 FA 61 FC | 	wrlong	result1, fp
10a0c                 | LR__1310
10a0c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10a0c     14 4E 05 F1 | 	add	fp, #20
10a10     A7 66 02 FB | 	rdlong	muldivb_, fp
10a14     14 4E 85 F1 | 	sub	fp, #20
10a18     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10a1c     28 00 90 5D |  if_ne	jmp	#LR__1311
10a20     14 4E 05 F1 | 	add	fp, #20
10a24     A7 38 68 FC | 	wrlong	#28, fp
10a28     08 4E 85 F1 | 	sub	fp, #8
10a2c     A7 12 02 FB | 	rdlong	arg01, fp
10a30     0C 4E 85 F1 | 	sub	fp, #12
10a34     00 14 06 F6 | 	mov	arg02, #0
10a38     54 FA B0 FD | 	call	#__system___float_tointeger
10a3c     0C 4E 05 F1 | 	add	fp, #12
10a40     A7 FA 61 FC | 	wrlong	result1, fp
10a44     0C 4E 85 F1 | 	sub	fp, #12
10a48                 | LR__1311
10a48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
10a48     08 4E 05 F1 | 	add	fp, #8
10a4c     A7 66 02 FB | 	rdlong	muldivb_, fp
10a50     08 4E 85 F1 | 	sub	fp, #8
10a54     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10a58     14 4E 05 A1 |  if_e	add	fp, #20
10a5c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10a60     14 4E 85 A1 |  if_e	sub	fp, #20
10a64     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10a68     20 00 90 5D |  if_ne	jmp	#LR__1312
10a6c     0C 4E 05 F1 | 	add	fp, #12
10a70     A7 1E 02 FB | 	rdlong	local01, fp
10a74     0C 4E 85 F1 | 	sub	fp, #12
10a78     A7 66 02 FB | 	rdlong	muldivb_, fp
10a7c     0F 67 12 FD | 	qdiv	muldivb_, local01
10a80     19 1E 62 FD | 	getqy	local01
10a84     A7 1E 62 FC | 	wrlong	local01, fp
10a88     E0 00 90 FD | 	jmp	#LR__1316
10a8c                 | LR__1312
10a8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
10a8c     08 4E 05 F1 | 	add	fp, #8
10a90     A7 66 02 FB | 	rdlong	muldivb_, fp
10a94     08 4E 85 F1 | 	sub	fp, #8
10a98     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10a9c     14 4E 05 A1 |  if_e	add	fp, #20
10aa0     A7 1E 02 AB |  if_e	rdlong	local01, fp
10aa4     14 4E 85 A1 |  if_e	sub	fp, #20
10aa8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10aac     2C 00 90 5D |  if_ne	jmp	#LR__1313
10ab0     0C 4E 05 F1 | 	add	fp, #12
10ab4     A7 1E 02 FB | 	rdlong	local01, fp
10ab8     0C 4E 85 F1 | 	sub	fp, #12
10abc     A7 66 02 FB | 	rdlong	muldivb_, fp
10ac0     0F 67 12 FD | 	qdiv	muldivb_, local01
10ac4     19 1E 62 FD | 	getqy	local01
10ac8     A7 1E 62 FC | 	wrlong	local01, fp
10acc     08 4E 05 F1 | 	add	fp, #8
10ad0     A7 38 68 FC | 	wrlong	#28, fp
10ad4     08 4E 85 F1 | 	sub	fp, #8
10ad8     90 00 90 FD | 	jmp	#LR__1316
10adc                 | LR__1313
10adc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
10adc     08 4E 05 F1 | 	add	fp, #8
10ae0     A7 66 02 FB | 	rdlong	muldivb_, fp
10ae4     08 4E 85 F1 | 	sub	fp, #8
10ae8     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10aec     14 4E 05 A1 |  if_e	add	fp, #20
10af0     A7 1E 02 AB |  if_e	rdlong	local01, fp
10af4     14 4E 85 A1 |  if_e	sub	fp, #20
10af8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10afc     1C 00 90 5D |  if_ne	jmp	#LR__1314
10b00     A7 64 02 FB | 	rdlong	muldiva_, fp
10b04     0C 4E 05 F1 | 	add	fp, #12
10b08     A7 66 02 FB | 	rdlong	muldivb_, fp
10b0c     0C 4E 85 F1 | 	sub	fp, #12
10b10     BA 00 A0 FD | 	call	#divide_
10b14     A7 64 62 FC | 	wrlong	muldiva_, fp
10b18     50 00 90 FD | 	jmp	#LR__1316
10b1c                 | LR__1314
10b1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
10b1c     08 4E 05 F1 | 	add	fp, #8
10b20     A7 66 02 FB | 	rdlong	muldivb_, fp
10b24     08 4E 85 F1 | 	sub	fp, #8
10b28     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10b2c     14 4E 05 A1 |  if_e	add	fp, #20
10b30     A7 1E 02 AB |  if_e	rdlong	local01, fp
10b34     14 4E 85 A1 |  if_e	sub	fp, #20
10b38     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10b3c     1C 00 90 5D |  if_ne	jmp	#LR__1315
10b40     A7 64 02 FB | 	rdlong	muldiva_, fp
10b44     0C 4E 05 F1 | 	add	fp, #12
10b48     A7 66 02 FB | 	rdlong	muldivb_, fp
10b4c     0C 4E 85 F1 | 	sub	fp, #12
10b50     BA 00 A0 FD | 	call	#divide_
10b54     A7 64 62 FC | 	wrlong	muldiva_, fp
10b58     10 00 90 FD | 	jmp	#LR__1316
10b5c                 | LR__1315
10b5c     A7 16 68 FC | 	wrlong	#11, fp
10b60     08 4E 05 F1 | 	add	fp, #8
10b64     A7 FE 69 FC | 	wrlong	#255, fp
10b68     08 4E 85 F1 | 	sub	fp, #8
10b6c                 | LR__1316
10b6c     A7 12 02 F6 | 	mov	arg01, fp
10b70     D0 96 BF FD | 	call	#_push
10b74     A7 F0 03 F6 | 	mov	ptra, fp
10b78     B2 00 A0 FD | 	call	#popregs_
10b7c                 | _do_mod_ret
10b7c     2D 00 64 FD | 	ret
10b80                 | 
10b80                 | ' 
10b80                 | ' sub do_shl 
10b80                 | _do_shl
10b80     03 4A 05 F6 | 	mov	COUNT_, #3
10b84     A8 00 A0 FD | 	call	#pushregs_
10b88     18 F0 07 F1 | 	add	ptra, #24
10b8c     1C 96 BF FD | 	call	#_pop
10b90     FD 12 02 F6 | 	mov	arg01, result1
10b94     FE 1E 02 F6 | 	mov	local01, result2
10b98     FF 20 02 F6 | 	mov	local02, result3
10b9c     0C 4E 05 F1 | 	add	fp, #12
10ba0     A7 12 62 FC | 	wrlong	arg01, fp
10ba4     04 4E 05 F1 | 	add	fp, #4
10ba8     A7 1E 62 FC | 	wrlong	local01, fp
10bac     04 4E 05 F1 | 	add	fp, #4
10bb0     A7 20 62 FC | 	wrlong	local02, fp
10bb4     14 4E 85 F1 | 	sub	fp, #20
10bb8     F0 95 BF FD | 	call	#_pop
10bbc     FF 22 02 F6 | 	mov	local03, result3
10bc0     A7 FA 61 FC | 	wrlong	result1, fp
10bc4     04 4E 05 F1 | 	add	fp, #4
10bc8     A7 FC 61 FC | 	wrlong	result2, fp
10bcc     04 4E 05 F1 | 	add	fp, #4
10bd0     A7 22 62 FC | 	wrlong	local03, fp
10bd4                 | ' 
10bd4                 | ' t2=pop()
10bd4                 | ' t1=pop()
10bd4                 | ' 
10bd4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10bd4     08 4E 85 F1 | 	sub	fp, #8
10bd8     1C 22 0E F2 | 	cmp	local03, #28 wz
10bdc     A7 22 02 AB |  if_e	rdlong	local03, fp
10be0     A7 22 62 AC |  if_e	wrlong	local03, fp
10be4     08 4E 05 A1 |  if_e	add	fp, #8
10be8     A7 3A 68 AC |  if_e	wrlong	#29, fp
10bec     08 4E 85 A1 |  if_e	sub	fp, #8
10bf0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10bf0     14 4E 05 F1 | 	add	fp, #20
10bf4     A7 22 02 FB | 	rdlong	local03, fp
10bf8     14 4E 85 F1 | 	sub	fp, #20
10bfc     1C 22 0E F2 | 	cmp	local03, #28 wz
10c00     18 00 90 5D |  if_ne	jmp	#LR__1320
10c04     0C 4E 05 F1 | 	add	fp, #12
10c08     A7 22 02 FB | 	rdlong	local03, fp
10c0c     A7 22 62 FC | 	wrlong	local03, fp
10c10     08 4E 05 F1 | 	add	fp, #8
10c14     A7 3A 68 FC | 	wrlong	#29, fp
10c18     14 4E 85 F1 | 	sub	fp, #20
10c1c                 | LR__1320
10c1c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
10c1c     08 4E 05 F1 | 	add	fp, #8
10c20     A7 22 02 FB | 	rdlong	local03, fp
10c24     08 4E 85 F1 | 	sub	fp, #8
10c28     1F 22 0E F2 | 	cmp	local03, #31 wz
10c2c     14 4E 05 51 |  if_ne	add	fp, #20
10c30     A7 20 02 5B |  if_ne	rdlong	local02, fp
10c34     14 4E 85 51 |  if_ne	sub	fp, #20
10c38     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10c3c     08 4E 05 51 |  if_ne	add	fp, #8
10c40     A7 22 02 5B |  if_ne	rdlong	local03, fp
10c44     08 4E 85 51 |  if_ne	sub	fp, #8
10c48     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10c4c     14 4E 05 51 |  if_ne	add	fp, #20
10c50     14 4E 85 51 |  if_ne	sub	fp, #20
10c54     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10c58     A7 0C 68 AC |  if_e	wrlong	#6, fp
10c5c     08 4E 05 A1 |  if_e	add	fp, #8
10c60     A7 FE 69 AC |  if_e	wrlong	#255, fp
10c64     08 4E 85 A1 |  if_e	sub	fp, #8
10c68     18 00 90 AD |  if_e	jmp	#LR__1321
10c6c     A7 22 02 FB | 	rdlong	local03, fp
10c70     0C 4E 05 F1 | 	add	fp, #12
10c74     A7 1E 02 FB | 	rdlong	local01, fp
10c78     0C 4E 85 F1 | 	sub	fp, #12
10c7c     0F 23 62 F0 | 	shl	local03, local01
10c80     A7 22 62 FC | 	wrlong	local03, fp
10c84                 | LR__1321
10c84     A7 12 02 F6 | 	mov	arg01, fp
10c88     B8 95 BF FD | 	call	#_push
10c8c     A7 F0 03 F6 | 	mov	ptra, fp
10c90     B2 00 A0 FD | 	call	#popregs_
10c94                 | _do_shl_ret
10c94     2D 00 64 FD | 	ret
10c98                 | 
10c98                 | ' 
10c98                 | ' sub do_shr 
10c98                 | _do_shr
10c98     03 4A 05 F6 | 	mov	COUNT_, #3
10c9c     A8 00 A0 FD | 	call	#pushregs_
10ca0     18 F0 07 F1 | 	add	ptra, #24
10ca4     04 95 BF FD | 	call	#_pop
10ca8     FD 12 02 F6 | 	mov	arg01, result1
10cac     FE 1E 02 F6 | 	mov	local01, result2
10cb0     FF 20 02 F6 | 	mov	local02, result3
10cb4     0C 4E 05 F1 | 	add	fp, #12
10cb8     A7 12 62 FC | 	wrlong	arg01, fp
10cbc     04 4E 05 F1 | 	add	fp, #4
10cc0     A7 1E 62 FC | 	wrlong	local01, fp
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 20 62 FC | 	wrlong	local02, fp
10ccc     14 4E 85 F1 | 	sub	fp, #20
10cd0     D8 94 BF FD | 	call	#_pop
10cd4     FF 22 02 F6 | 	mov	local03, result3
10cd8     A7 FA 61 FC | 	wrlong	result1, fp
10cdc     04 4E 05 F1 | 	add	fp, #4
10ce0     A7 FC 61 FC | 	wrlong	result2, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 22 62 FC | 	wrlong	local03, fp
10cec                 | ' t2=pop()
10cec                 | ' t1=pop()
10cec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10cec     08 4E 85 F1 | 	sub	fp, #8
10cf0     1C 22 0E F2 | 	cmp	local03, #28 wz
10cf4     A7 22 02 AB |  if_e	rdlong	local03, fp
10cf8     A7 22 62 AC |  if_e	wrlong	local03, fp
10cfc     08 4E 05 A1 |  if_e	add	fp, #8
10d00     A7 3A 68 AC |  if_e	wrlong	#29, fp
10d04     08 4E 85 A1 |  if_e	sub	fp, #8
10d08                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10d08     14 4E 05 F1 | 	add	fp, #20
10d0c     A7 22 02 FB | 	rdlong	local03, fp
10d10     14 4E 85 F1 | 	sub	fp, #20
10d14     1C 22 0E F2 | 	cmp	local03, #28 wz
10d18     18 00 90 5D |  if_ne	jmp	#LR__1330
10d1c     0C 4E 05 F1 | 	add	fp, #12
10d20     A7 22 02 FB | 	rdlong	local03, fp
10d24     A7 22 62 FC | 	wrlong	local03, fp
10d28     08 4E 05 F1 | 	add	fp, #8
10d2c     A7 3A 68 FC | 	wrlong	#29, fp
10d30     14 4E 85 F1 | 	sub	fp, #20
10d34                 | LR__1330
10d34                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
10d34     08 4E 05 F1 | 	add	fp, #8
10d38     A7 22 02 FB | 	rdlong	local03, fp
10d3c     08 4E 85 F1 | 	sub	fp, #8
10d40     1F 22 0E F2 | 	cmp	local03, #31 wz
10d44     14 4E 05 51 |  if_ne	add	fp, #20
10d48     A7 20 02 5B |  if_ne	rdlong	local02, fp
10d4c     14 4E 85 51 |  if_ne	sub	fp, #20
10d50     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10d54     08 4E 05 51 |  if_ne	add	fp, #8
10d58     A7 22 02 5B |  if_ne	rdlong	local03, fp
10d5c     08 4E 85 51 |  if_ne	sub	fp, #8
10d60     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10d64     14 4E 05 51 |  if_ne	add	fp, #20
10d68     14 4E 85 51 |  if_ne	sub	fp, #20
10d6c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10d70     A7 0C 68 AC |  if_e	wrlong	#6, fp
10d74     08 4E 05 A1 |  if_e	add	fp, #8
10d78     A7 FE 69 AC |  if_e	wrlong	#255, fp
10d7c     08 4E 85 A1 |  if_e	sub	fp, #8
10d80     18 00 90 AD |  if_e	jmp	#LR__1331
10d84     A7 22 02 FB | 	rdlong	local03, fp
10d88     0C 4E 05 F1 | 	add	fp, #12
10d8c     A7 1E 02 FB | 	rdlong	local01, fp
10d90     0C 4E 85 F1 | 	sub	fp, #12
10d94     0F 23 42 F0 | 	shr	local03, local01
10d98     A7 22 62 FC | 	wrlong	local03, fp
10d9c                 | LR__1331
10d9c     A7 12 02 F6 | 	mov	arg01, fp
10da0     A0 94 BF FD | 	call	#_push
10da4     A7 F0 03 F6 | 	mov	ptra, fp
10da8     B2 00 A0 FD | 	call	#popregs_
10dac                 | _do_shr_ret
10dac     2D 00 64 FD | 	ret
10db0                 | 
10db0                 | ' 
10db0                 | ' sub do_power 
10db0                 | _do_power
10db0     02 4A 05 F6 | 	mov	COUNT_, #2
10db4     A8 00 A0 FD | 	call	#pushregs_
10db8     18 F0 07 F1 | 	add	ptra, #24
10dbc     EC 93 BF FD | 	call	#_pop
10dc0     FD 14 02 F6 | 	mov	arg02, result1
10dc4     FE 12 02 F6 | 	mov	arg01, result2
10dc8     FF 1E 02 F6 | 	mov	local01, result3
10dcc     0C 4E 05 F1 | 	add	fp, #12
10dd0     A7 14 62 FC | 	wrlong	arg02, fp
10dd4     04 4E 05 F1 | 	add	fp, #4
10dd8     A7 12 62 FC | 	wrlong	arg01, fp
10ddc     04 4E 05 F1 | 	add	fp, #4
10de0     A7 1E 62 FC | 	wrlong	local01, fp
10de4     14 4E 85 F1 | 	sub	fp, #20
10de8     C0 93 BF FD | 	call	#_pop
10dec     A7 FA 61 FC | 	wrlong	result1, fp
10df0     04 4E 05 F1 | 	add	fp, #4
10df4     A7 FC 61 FC | 	wrlong	result2, fp
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 FE 61 FC | 	wrlong	result3, fp
10e00                 | ' t2=pop()
10e00                 | ' t1=pop()
10e00                 | ' 
10e00                 | ' 
10e00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
10e00     08 4E 85 F1 | 	sub	fp, #8
10e04     1F FE 0D F2 | 	cmp	result3, #31 wz
10e08     14 4E 05 51 |  if_ne	add	fp, #20
10e0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10e10     14 4E 85 51 |  if_ne	sub	fp, #20
10e14     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10e18     A7 18 68 AC |  if_e	wrlong	#12, fp
10e1c     08 4E 05 A1 |  if_e	add	fp, #8
10e20     A7 FE 69 AC |  if_e	wrlong	#255, fp
10e24     08 4E 85 A1 |  if_e	sub	fp, #8
10e28     38 01 90 AD |  if_e	jmp	#LR__1345
10e2c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10e2c     08 4E 05 F1 | 	add	fp, #8
10e30     A7 14 02 FB | 	rdlong	arg02, fp
10e34     08 4E 85 F1 | 	sub	fp, #8
10e38     1C 14 0E F2 | 	cmp	arg02, #28 wz
10e3c     28 00 90 5D |  if_ne	jmp	#LR__1340
10e40     08 4E 05 F1 | 	add	fp, #8
10e44     A7 3C 68 FC | 	wrlong	#30, fp
10e48     08 4E 85 F1 | 	sub	fp, #8
10e4c     A7 12 02 FB | 	rdlong	arg01, fp
10e50     09 13 52 F6 | 	abs	arg01, arg01 wc
10e54     1F 20 C6 C9 |  if_b	decod	local02, #31
10e58     00 20 06 36 |  if_ae	mov	local02, #0
10e5c     64 ED B0 FD | 	call	#__system___float_fromuns
10e60     10 FB 61 F5 | 	xor	result1, local02
10e64     A7 FA 61 FC | 	wrlong	result1, fp
10e68                 | LR__1340
10e68                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
10e68     08 4E 05 F1 | 	add	fp, #8
10e6c     A7 14 02 FB | 	rdlong	arg02, fp
10e70     08 4E 85 F1 | 	sub	fp, #8
10e74     1D 14 0E F2 | 	cmp	arg02, #29 wz
10e78     18 00 90 5D |  if_ne	jmp	#LR__1341
10e7c     08 4E 05 F1 | 	add	fp, #8
10e80     A7 3C 68 FC | 	wrlong	#30, fp
10e84     08 4E 85 F1 | 	sub	fp, #8
10e88     A7 12 02 FB | 	rdlong	arg01, fp
10e8c     34 ED B0 FD | 	call	#__system___float_fromuns
10e90     A7 FA 61 FC | 	wrlong	result1, fp
10e94                 | LR__1341
10e94                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10e94     14 4E 05 F1 | 	add	fp, #20
10e98     A7 14 02 FB | 	rdlong	arg02, fp
10e9c     14 4E 85 F1 | 	sub	fp, #20
10ea0     1C 14 0E F2 | 	cmp	arg02, #28 wz
10ea4     34 00 90 5D |  if_ne	jmp	#LR__1342
10ea8     14 4E 05 F1 | 	add	fp, #20
10eac     A7 3C 68 FC | 	wrlong	#30, fp
10eb0     08 4E 85 F1 | 	sub	fp, #8
10eb4     A7 12 02 FB | 	rdlong	arg01, fp
10eb8     0C 4E 85 F1 | 	sub	fp, #12
10ebc     09 13 52 F6 | 	abs	arg01, arg01 wc
10ec0     1F 20 C6 C9 |  if_b	decod	local02, #31
10ec4     00 20 06 36 |  if_ae	mov	local02, #0
10ec8     F8 EC B0 FD | 	call	#__system___float_fromuns
10ecc     10 FB 61 F5 | 	xor	result1, local02
10ed0     0C 4E 05 F1 | 	add	fp, #12
10ed4     A7 FA 61 FC | 	wrlong	result1, fp
10ed8     0C 4E 85 F1 | 	sub	fp, #12
10edc                 | LR__1342
10edc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10edc     14 4E 05 F1 | 	add	fp, #20
10ee0     A7 14 02 FB | 	rdlong	arg02, fp
10ee4     14 4E 85 F1 | 	sub	fp, #20
10ee8     1D 14 0E F2 | 	cmp	arg02, #29 wz
10eec     24 00 90 5D |  if_ne	jmp	#LR__1343
10ef0     14 4E 05 F1 | 	add	fp, #20
10ef4     A7 3C 68 FC | 	wrlong	#30, fp
10ef8     08 4E 85 F1 | 	sub	fp, #8
10efc     A7 12 02 FB | 	rdlong	arg01, fp
10f00     0C 4E 85 F1 | 	sub	fp, #12
10f04     BC EC B0 FD | 	call	#__system___float_fromuns
10f08     0C 4E 05 F1 | 	add	fp, #12
10f0c     A7 FA 61 FC | 	wrlong	result1, fp
10f10     0C 4E 85 F1 | 	sub	fp, #12
10f14                 | LR__1343
10f14                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
10f14     08 4E 05 F1 | 	add	fp, #8
10f18     A7 14 02 FB | 	rdlong	arg02, fp
10f1c     08 4E 85 F1 | 	sub	fp, #8
10f20     1E 14 0E F2 | 	cmp	arg02, #30 wz
10f24     14 4E 05 A1 |  if_e	add	fp, #20
10f28     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f2c     14 4E 85 A1 |  if_e	sub	fp, #20
10f30     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10f34     1C 00 90 5D |  if_ne	jmp	#LR__1344
10f38     A7 12 02 FB | 	rdlong	arg01, fp
10f3c     0C 4E 05 F1 | 	add	fp, #12
10f40     A7 14 02 FB | 	rdlong	arg02, fp
10f44     0C 4E 85 F1 | 	sub	fp, #12
10f48     60 FF B0 FD | 	call	#__system____builtin_powf
10f4c     A7 FA 61 FC | 	wrlong	result1, fp
10f50     10 00 90 FD | 	jmp	#LR__1345
10f54                 | LR__1344
10f54     A7 1A 68 FC | 	wrlong	#13, fp
10f58     08 4E 05 F1 | 	add	fp, #8
10f5c     A7 FE 69 FC | 	wrlong	#255, fp
10f60     08 4E 85 F1 | 	sub	fp, #8
10f64                 | LR__1345
10f64     A7 12 02 F6 | 	mov	arg01, fp
10f68     D8 92 BF FD | 	call	#_push
10f6c     A7 F0 03 F6 | 	mov	ptra, fp
10f70     B2 00 A0 FD | 	call	#popregs_
10f74                 | _do_power_ret
10f74     2D 00 64 FD | 	ret
10f78                 | 
10f78                 | ' 
10f78                 | ' 
10f78                 | ' sub do_eq
10f78                 | _do_eq
10f78     05 4A 05 F6 | 	mov	COUNT_, #5
10f7c     A8 00 A0 FD | 	call	#pushregs_
10f80     18 F0 07 F1 | 	add	ptra, #24
10f84     24 92 BF FD | 	call	#_pop
10f88     FD 1E 02 F6 | 	mov	local01, result1
10f8c     FE 20 02 F6 | 	mov	local02, result2
10f90     FF 22 02 F6 | 	mov	local03, result3
10f94     0C 4E 05 F1 | 	add	fp, #12
10f98     A7 1E 62 FC | 	wrlong	local01, fp
10f9c     04 4E 05 F1 | 	add	fp, #4
10fa0     A7 20 62 FC | 	wrlong	local02, fp
10fa4     04 4E 05 F1 | 	add	fp, #4
10fa8     A7 22 62 FC | 	wrlong	local03, fp
10fac     14 4E 85 F1 | 	sub	fp, #20
10fb0     F8 91 BF FD | 	call	#_pop
10fb4     FF 22 02 F6 | 	mov	local03, result3
10fb8     A7 FA 61 FC | 	wrlong	result1, fp
10fbc     04 4E 05 F1 | 	add	fp, #4
10fc0     A7 FC 61 FC | 	wrlong	result2, fp
10fc4     04 4E 05 F1 | 	add	fp, #4
10fc8     A7 22 62 FC | 	wrlong	local03, fp
10fcc                 | ' t2=pop()
10fcc                 | ' t1=pop()
10fcc                 | ' 
10fcc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10fcc     08 4E 85 F1 | 	sub	fp, #8
10fd0     1F 22 0E F2 | 	cmp	local03, #31 wz
10fd4     14 4E 05 A1 |  if_e	add	fp, #20
10fd8     A7 24 02 AB |  if_e	rdlong	local04, fp
10fdc     14 4E 85 A1 |  if_e	sub	fp, #20
10fe0     12 23 02 A6 |  if_e	mov	local03, local04
10fe4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10fe8     28 00 90 5D |  if_ne	jmp	#LR__1350
10fec     00 1E 06 F6 | 	mov	local01, #0
10ff0     A7 12 02 FB | 	rdlong	arg01, fp
10ff4     0C 4E 05 F1 | 	add	fp, #12
10ff8     A7 14 02 FB | 	rdlong	arg02, fp
10ffc     0C 4E 85 F1 | 	sub	fp, #12
11000     70 C4 B0 FD | 	call	#__system___string_cmp
11004     00 FA 0D F2 | 	cmp	result1, #0 wz
11008     00 1E 26 A6 |  if_e	not	local01, #0
1100c     A7 1E 62 FC | 	wrlong	local01, fp
11010     1C 04 90 FD | 	jmp	#LR__1363
11014                 | LR__1350
11014                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
11014     08 4E 05 F1 | 	add	fp, #8
11018     A7 1E 02 FB | 	rdlong	local01, fp
1101c     08 4E 85 F1 | 	sub	fp, #8
11020     1E 1E 0E F2 | 	cmp	local01, #30 wz
11024     14 4E 05 A1 |  if_e	add	fp, #20
11028     A7 24 02 AB |  if_e	rdlong	local04, fp
1102c     14 4E 85 A1 |  if_e	sub	fp, #20
11030     12 23 02 A6 |  if_e	mov	local03, local04
11034     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11038     2C 00 90 5D |  if_ne	jmp	#LR__1351
1103c     00 1E 06 F6 | 	mov	local01, #0
11040     A7 12 02 FB | 	rdlong	arg01, fp
11044     0C 4E 05 F1 | 	add	fp, #12
11048     A7 14 02 FB | 	rdlong	arg02, fp
1104c     0C 4E 85 F1 | 	sub	fp, #12
11050     01 16 06 F6 | 	mov	arg03, #1
11054     A4 F3 B0 FD | 	call	#__system___float_cmp
11058     00 FA 0D F2 | 	cmp	result1, #0 wz
1105c     00 1E 26 A6 |  if_e	not	local01, #0
11060     A7 1E 62 FC | 	wrlong	local01, fp
11064     C8 03 90 FD | 	jmp	#LR__1363
11068                 | LR__1351
11068                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
11068     08 4E 05 F1 | 	add	fp, #8
1106c     A7 1E 02 FB | 	rdlong	local01, fp
11070     08 4E 85 F1 | 	sub	fp, #8
11074     1E 1E 0E F2 | 	cmp	local01, #30 wz
11078     14 4E 05 A1 |  if_e	add	fp, #20
1107c     A7 24 02 AB |  if_e	rdlong	local04, fp
11080     14 4E 85 A1 |  if_e	sub	fp, #20
11084     12 23 02 A6 |  if_e	mov	local03, local04
11088     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1108c     48 00 90 5D |  if_ne	jmp	#LR__1352
11090     00 1E 06 F6 | 	mov	local01, #0
11094     A7 20 02 FB | 	rdlong	local02, fp
11098     0C 4E 05 F1 | 	add	fp, #12
1109c     A7 12 02 FB | 	rdlong	arg01, fp
110a0     0C 4E 85 F1 | 	sub	fp, #12
110a4     09 13 52 F6 | 	abs	arg01, arg01 wc
110a8     1F 26 C6 C9 |  if_b	decod	local05, #31
110ac     00 26 06 36 |  if_ae	mov	local05, #0
110b0     10 EB B0 FD | 	call	#__system___float_fromuns
110b4     13 FB 61 F5 | 	xor	result1, local05
110b8     FD 14 02 F6 | 	mov	arg02, result1
110bc     10 13 02 F6 | 	mov	arg01, local02
110c0     01 16 06 F6 | 	mov	arg03, #1
110c4     34 F3 B0 FD | 	call	#__system___float_cmp
110c8     00 FA 0D F2 | 	cmp	result1, #0 wz
110cc     00 1E 26 A6 |  if_e	not	local01, #0
110d0     A7 1E 62 FC | 	wrlong	local01, fp
110d4     58 03 90 FD | 	jmp	#LR__1363
110d8                 | LR__1352
110d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
110d8     08 4E 05 F1 | 	add	fp, #8
110dc     A7 1E 02 FB | 	rdlong	local01, fp
110e0     08 4E 85 F1 | 	sub	fp, #8
110e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
110e8     14 4E 05 A1 |  if_e	add	fp, #20
110ec     A7 24 02 AB |  if_e	rdlong	local04, fp
110f0     14 4E 85 A1 |  if_e	sub	fp, #20
110f4     12 23 02 A6 |  if_e	mov	local03, local04
110f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
110fc     38 00 90 5D |  if_ne	jmp	#LR__1353
11100     00 1E 06 F6 | 	mov	local01, #0
11104     A7 20 02 FB | 	rdlong	local02, fp
11108     0C 4E 05 F1 | 	add	fp, #12
1110c     A7 12 02 FB | 	rdlong	arg01, fp
11110     0C 4E 85 F1 | 	sub	fp, #12
11114     AC EA B0 FD | 	call	#__system___float_fromuns
11118     FD 14 02 F6 | 	mov	arg02, result1
1111c     10 13 02 F6 | 	mov	arg01, local02
11120     01 16 06 F6 | 	mov	arg03, #1
11124     D4 F2 B0 FD | 	call	#__system___float_cmp
11128     00 FA 0D F2 | 	cmp	result1, #0 wz
1112c     00 1E 26 A6 |  if_e	not	local01, #0
11130     A7 1E 62 FC | 	wrlong	local01, fp
11134     F8 02 90 FD | 	jmp	#LR__1363
11138                 | LR__1353
11138                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
11138     08 4E 05 F1 | 	add	fp, #8
1113c     A7 1E 02 FB | 	rdlong	local01, fp
11140     08 4E 85 F1 | 	sub	fp, #8
11144     1C 1E 0E F2 | 	cmp	local01, #28 wz
11148     14 4E 05 A1 |  if_e	add	fp, #20
1114c     A7 24 02 AB |  if_e	rdlong	local04, fp
11150     14 4E 85 A1 |  if_e	sub	fp, #20
11154     12 23 02 A6 |  if_e	mov	local03, local04
11158     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1115c     44 00 90 5D |  if_ne	jmp	#LR__1354
11160     00 1E 06 F6 | 	mov	local01, #0
11164     A7 12 02 FB | 	rdlong	arg01, fp
11168     09 13 52 F6 | 	abs	arg01, arg01 wc
1116c     1F 26 C6 C9 |  if_b	decod	local05, #31
11170     00 26 06 36 |  if_ae	mov	local05, #0
11174     4C EA B0 FD | 	call	#__system___float_fromuns
11178     13 FB 61 F5 | 	xor	result1, local05
1117c     FD 12 02 F6 | 	mov	arg01, result1
11180     0C 4E 05 F1 | 	add	fp, #12
11184     A7 14 02 FB | 	rdlong	arg02, fp
11188     0C 4E 85 F1 | 	sub	fp, #12
1118c     01 16 06 F6 | 	mov	arg03, #1
11190     68 F2 B0 FD | 	call	#__system___float_cmp
11194     00 FA 0D F2 | 	cmp	result1, #0 wz
11198     00 1E 26 A6 |  if_e	not	local01, #0
1119c     A7 1E 62 FC | 	wrlong	local01, fp
111a0     8C 02 90 FD | 	jmp	#LR__1363
111a4                 | LR__1354
111a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
111a4     08 4E 05 F1 | 	add	fp, #8
111a8     A7 1E 02 FB | 	rdlong	local01, fp
111ac     08 4E 85 F1 | 	sub	fp, #8
111b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
111b4     14 4E 05 A1 |  if_e	add	fp, #20
111b8     A7 24 02 AB |  if_e	rdlong	local04, fp
111bc     14 4E 85 A1 |  if_e	sub	fp, #20
111c0     12 23 02 A6 |  if_e	mov	local03, local04
111c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
111c8     24 00 90 5D |  if_ne	jmp	#LR__1355
111cc     00 1E 06 F6 | 	mov	local01, #0
111d0     A7 20 02 FB | 	rdlong	local02, fp
111d4     0C 4E 05 F1 | 	add	fp, #12
111d8     A7 22 02 FB | 	rdlong	local03, fp
111dc     0C 4E 85 F1 | 	sub	fp, #12
111e0     11 21 0A F2 | 	cmp	local02, local03 wz
111e4     01 1E 66 A6 |  if_e	neg	local01, #1
111e8     A7 1E 62 FC | 	wrlong	local01, fp
111ec     40 02 90 FD | 	jmp	#LR__1363
111f0                 | LR__1355
111f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
111f0     08 4E 05 F1 | 	add	fp, #8
111f4     A7 1E 02 FB | 	rdlong	local01, fp
111f8     08 4E 85 F1 | 	sub	fp, #8
111fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
11200     14 4E 05 A1 |  if_e	add	fp, #20
11204     A7 24 02 AB |  if_e	rdlong	local04, fp
11208     14 4E 85 A1 |  if_e	sub	fp, #20
1120c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11210     24 00 90 5D |  if_ne	jmp	#LR__1356
11214     00 1E 06 F6 | 	mov	local01, #0
11218     A7 20 02 FB | 	rdlong	local02, fp
1121c     0C 4E 05 F1 | 	add	fp, #12
11220     A7 22 02 FB | 	rdlong	local03, fp
11224     0C 4E 85 F1 | 	sub	fp, #12
11228     11 21 0A F2 | 	cmp	local02, local03 wz
1122c     01 1E 66 A6 |  if_e	neg	local01, #1
11230     A7 1E 62 FC | 	wrlong	local01, fp
11234     F8 01 90 FD | 	jmp	#LR__1363
11238                 | LR__1356
11238                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11238     08 4E 05 F1 | 	add	fp, #8
1123c     A7 1E 02 FB | 	rdlong	local01, fp
11240     08 4E 85 F1 | 	sub	fp, #8
11244     1D 1E 0E F2 | 	cmp	local01, #29 wz
11248     14 4E 05 A1 |  if_e	add	fp, #20
1124c     A7 22 02 AB |  if_e	rdlong	local03, fp
11250     14 4E 85 A1 |  if_e	sub	fp, #20
11254     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11258     34 00 90 5D |  if_ne	jmp	#LR__1357
1125c     00 1E 06 F6 | 	mov	local01, #0
11260     A7 12 02 FB | 	rdlong	arg01, fp
11264     5C E9 B0 FD | 	call	#__system___float_fromuns
11268     FD 12 02 F6 | 	mov	arg01, result1
1126c     0C 4E 05 F1 | 	add	fp, #12
11270     A7 14 02 FB | 	rdlong	arg02, fp
11274     0C 4E 85 F1 | 	sub	fp, #12
11278     01 16 06 F6 | 	mov	arg03, #1
1127c     7C F1 B0 FD | 	call	#__system___float_cmp
11280     00 FA 0D F2 | 	cmp	result1, #0 wz
11284     00 1E 26 A6 |  if_e	not	local01, #0
11288     A7 1E 62 FC | 	wrlong	local01, fp
1128c     A0 01 90 FD | 	jmp	#LR__1363
11290                 | LR__1357
11290                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
11290     08 4E 05 F1 | 	add	fp, #8
11294     A7 1E 02 FB | 	rdlong	local01, fp
11298     08 4E 85 F1 | 	sub	fp, #8
1129c     1D 1E 0E F2 | 	cmp	local01, #29 wz
112a0     14 4E 05 A1 |  if_e	add	fp, #20
112a4     A7 22 02 AB |  if_e	rdlong	local03, fp
112a8     14 4E 85 A1 |  if_e	sub	fp, #20
112ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
112b0     24 00 90 5D |  if_ne	jmp	#LR__1358
112b4     00 1E 06 F6 | 	mov	local01, #0
112b8     A7 20 02 FB | 	rdlong	local02, fp
112bc     0C 4E 05 F1 | 	add	fp, #12
112c0     A7 22 02 FB | 	rdlong	local03, fp
112c4     0C 4E 85 F1 | 	sub	fp, #12
112c8     11 21 0A F2 | 	cmp	local02, local03 wz
112cc     01 1E 66 A6 |  if_e	neg	local01, #1
112d0     A7 1E 62 FC | 	wrlong	local01, fp
112d4     58 01 90 FD | 	jmp	#LR__1363
112d8                 | LR__1358
112d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
112d8     08 4E 05 F1 | 	add	fp, #8
112dc     A7 1E 02 FB | 	rdlong	local01, fp
112e0     08 4E 85 F1 | 	sub	fp, #8
112e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
112e8     14 4E 05 A1 |  if_e	add	fp, #20
112ec     A7 22 02 AB |  if_e	rdlong	local03, fp
112f0     14 4E 85 A1 |  if_e	sub	fp, #20
112f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
112f8     24 00 90 5D |  if_ne	jmp	#LR__1359
112fc     00 1E 06 F6 | 	mov	local01, #0
11300     A7 20 02 FB | 	rdlong	local02, fp
11304     0C 4E 05 F1 | 	add	fp, #12
11308     A7 22 02 FB | 	rdlong	local03, fp
1130c     0C 4E 85 F1 | 	sub	fp, #12
11310     11 21 0A F2 | 	cmp	local02, local03 wz
11314     01 1E 66 A6 |  if_e	neg	local01, #1
11318     A7 1E 62 FC | 	wrlong	local01, fp
1131c     10 01 90 FD | 	jmp	#LR__1363
11320                 | LR__1359
11320                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11320     08 4E 05 F1 | 	add	fp, #8
11324     A7 1E 02 FB | 	rdlong	local01, fp
11328     08 4E 85 F1 | 	sub	fp, #8
1132c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11330     14 4E 05 A1 |  if_e	add	fp, #20
11334     A7 22 02 AB |  if_e	rdlong	local03, fp
11338     14 4E 85 A1 |  if_e	sub	fp, #20
1133c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11340     30 00 90 5D |  if_ne	jmp	#LR__1360
11344     00 1E 06 F6 | 	mov	local01, #0
11348     A7 12 02 FB | 	rdlong	arg01, fp
1134c     04 D1 BF FD | 	call	#_convertstring
11350     FD 12 02 F6 | 	mov	arg01, result1
11354     0C 4E 05 F1 | 	add	fp, #12
11358     A7 14 02 FB | 	rdlong	arg02, fp
1135c     0C 4E 85 F1 | 	sub	fp, #12
11360     10 C1 B0 FD | 	call	#__system___string_cmp
11364     00 FA 0D F2 | 	cmp	result1, #0 wz
11368     00 1E 26 A6 |  if_e	not	local01, #0
1136c     A7 1E 62 FC | 	wrlong	local01, fp
11370     BC 00 90 FD | 	jmp	#LR__1363
11374                 | LR__1360
11374                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
11374     08 4E 05 F1 | 	add	fp, #8
11378     A7 1E 02 FB | 	rdlong	local01, fp
1137c     08 4E 85 F1 | 	sub	fp, #8
11380     1F 1E 0E F2 | 	cmp	local01, #31 wz
11384     14 4E 05 A1 |  if_e	add	fp, #20
11388     A7 22 02 AB |  if_e	rdlong	local03, fp
1138c     14 4E 85 A1 |  if_e	sub	fp, #20
11390     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11394     34 00 90 5D |  if_ne	jmp	#LR__1361
11398     00 1E 06 F6 | 	mov	local01, #0
1139c     A7 20 02 FB | 	rdlong	local02, fp
113a0     0C 4E 05 F1 | 	add	fp, #12
113a4     A7 12 02 FB | 	rdlong	arg01, fp
113a8     0C 4E 85 F1 | 	sub	fp, #12
113ac     A4 D0 BF FD | 	call	#_convertstring
113b0     FD 14 02 F6 | 	mov	arg02, result1
113b4     10 13 02 F6 | 	mov	arg01, local02
113b8     B8 C0 B0 FD | 	call	#__system___string_cmp
113bc     00 FA 0D F2 | 	cmp	result1, #0 wz
113c0     00 1E 26 A6 |  if_e	not	local01, #0
113c4     A7 1E 62 FC | 	wrlong	local01, fp
113c8     64 00 90 FD | 	jmp	#LR__1363
113cc                 | LR__1361
113cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
113cc     08 4E 05 F1 | 	add	fp, #8
113d0     A7 1E 02 FB | 	rdlong	local01, fp
113d4     08 4E 85 F1 | 	sub	fp, #8
113d8     2B 1E 0E F2 | 	cmp	local01, #43 wz
113dc     14 4E 05 A1 |  if_e	add	fp, #20
113e0     A7 22 02 AB |  if_e	rdlong	local03, fp
113e4     14 4E 85 A1 |  if_e	sub	fp, #20
113e8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
113ec     3C 00 90 5D |  if_ne	jmp	#LR__1362
113f0     00 1E 06 F6 | 	mov	local01, #0
113f4     A7 12 02 FB | 	rdlong	arg01, fp
113f8     58 D0 BF FD | 	call	#_convertstring
113fc     FD 20 02 F6 | 	mov	local02, result1
11400     0C 4E 05 F1 | 	add	fp, #12
11404     A7 12 02 FB | 	rdlong	arg01, fp
11408     0C 4E 85 F1 | 	sub	fp, #12
1140c     44 D0 BF FD | 	call	#_convertstring
11410     FD 14 02 F6 | 	mov	arg02, result1
11414     10 13 02 F6 | 	mov	arg01, local02
11418     58 C0 B0 FD | 	call	#__system___string_cmp
1141c     00 FA 0D F2 | 	cmp	result1, #0 wz
11420     00 1E 26 A6 |  if_e	not	local01, #0
11424     A7 1E 62 FC | 	wrlong	local01, fp
11428     04 00 90 FD | 	jmp	#LR__1363
1142c                 | LR__1362
1142c     A7 00 68 FC | 	wrlong	#0, fp
11430                 | LR__1363
11430     08 4E 05 F1 | 	add	fp, #8
11434     A7 38 68 FC | 	wrlong	#28, fp
11438     08 4E 85 F1 | 	sub	fp, #8
1143c     A7 12 02 F6 | 	mov	arg01, fp
11440     00 8E BF FD | 	call	#_push
11444     A7 F0 03 F6 | 	mov	ptra, fp
11448     B2 00 A0 FD | 	call	#popregs_
1144c                 | _do_eq_ret
1144c     2D 00 64 FD | 	ret
11450                 | 
11450                 | ' 
11450                 | ' sub do_gt
11450                 | _do_gt
11450     05 4A 05 F6 | 	mov	COUNT_, #5
11454     A8 00 A0 FD | 	call	#pushregs_
11458     18 F0 07 F1 | 	add	ptra, #24
1145c     4C 8D BF FD | 	call	#_pop
11460     FD 1E 02 F6 | 	mov	local01, result1
11464     FE 20 02 F6 | 	mov	local02, result2
11468     FF 22 02 F6 | 	mov	local03, result3
1146c     0C 4E 05 F1 | 	add	fp, #12
11470     A7 1E 62 FC | 	wrlong	local01, fp
11474     04 4E 05 F1 | 	add	fp, #4
11478     A7 20 62 FC | 	wrlong	local02, fp
1147c     04 4E 05 F1 | 	add	fp, #4
11480     A7 22 62 FC | 	wrlong	local03, fp
11484     14 4E 85 F1 | 	sub	fp, #20
11488     20 8D BF FD | 	call	#_pop
1148c     FF 22 02 F6 | 	mov	local03, result3
11490     A7 FA 61 FC | 	wrlong	result1, fp
11494     04 4E 05 F1 | 	add	fp, #4
11498     A7 FC 61 FC | 	wrlong	result2, fp
1149c     04 4E 05 F1 | 	add	fp, #4
114a0     A7 22 62 FC | 	wrlong	local03, fp
114a4                 | ' t2=pop()
114a4                 | ' t1=pop()
114a4                 | ' 
114a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
114a4     08 4E 85 F1 | 	sub	fp, #8
114a8     1F 22 0E F2 | 	cmp	local03, #31 wz
114ac     14 4E 05 A1 |  if_e	add	fp, #20
114b0     A7 24 02 AB |  if_e	rdlong	local04, fp
114b4     14 4E 85 A1 |  if_e	sub	fp, #20
114b8     12 23 02 A6 |  if_e	mov	local03, local04
114bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
114c0     28 00 90 5D |  if_ne	jmp	#LR__1370
114c4     00 1E 06 F6 | 	mov	local01, #0
114c8     A7 12 02 FB | 	rdlong	arg01, fp
114cc     0C 4E 05 F1 | 	add	fp, #12
114d0     A7 14 02 FB | 	rdlong	arg02, fp
114d4     0C 4E 85 F1 | 	sub	fp, #12
114d8     98 BF B0 FD | 	call	#__system___string_cmp
114dc     01 FA 55 F2 | 	cmps	result1, #1 wc
114e0     00 1E 26 36 |  if_ae	not	local01, #0
114e4     A7 1E 62 FC | 	wrlong	local01, fp
114e8     1C 04 90 FD | 	jmp	#LR__1383
114ec                 | LR__1370
114ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
114ec     08 4E 05 F1 | 	add	fp, #8
114f0     A7 1E 02 FB | 	rdlong	local01, fp
114f4     08 4E 85 F1 | 	sub	fp, #8
114f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
114fc     14 4E 05 A1 |  if_e	add	fp, #20
11500     A7 24 02 AB |  if_e	rdlong	local04, fp
11504     14 4E 85 A1 |  if_e	sub	fp, #20
11508     12 23 02 A6 |  if_e	mov	local03, local04
1150c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11510     2C 00 90 5D |  if_ne	jmp	#LR__1371
11514     00 1E 06 F6 | 	mov	local01, #0
11518     A7 12 02 FB | 	rdlong	arg01, fp
1151c     0C 4E 05 F1 | 	add	fp, #12
11520     A7 14 02 FB | 	rdlong	arg02, fp
11524     0C 4E 85 F1 | 	sub	fp, #12
11528     01 16 66 F6 | 	neg	arg03, #1
1152c     CC EE B0 FD | 	call	#__system___float_cmp
11530     01 FA 55 F2 | 	cmps	result1, #1 wc
11534     00 1E 26 36 |  if_ae	not	local01, #0
11538     A7 1E 62 FC | 	wrlong	local01, fp
1153c     C8 03 90 FD | 	jmp	#LR__1383
11540                 | LR__1371
11540                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11540     08 4E 05 F1 | 	add	fp, #8
11544     A7 1E 02 FB | 	rdlong	local01, fp
11548     08 4E 85 F1 | 	sub	fp, #8
1154c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11550     14 4E 05 A1 |  if_e	add	fp, #20
11554     A7 24 02 AB |  if_e	rdlong	local04, fp
11558     14 4E 85 A1 |  if_e	sub	fp, #20
1155c     12 23 02 A6 |  if_e	mov	local03, local04
11560     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11564     48 00 90 5D |  if_ne	jmp	#LR__1372
11568     00 1E 06 F6 | 	mov	local01, #0
1156c     A7 20 02 FB | 	rdlong	local02, fp
11570     0C 4E 05 F1 | 	add	fp, #12
11574     A7 12 02 FB | 	rdlong	arg01, fp
11578     0C 4E 85 F1 | 	sub	fp, #12
1157c     09 13 52 F6 | 	abs	arg01, arg01 wc
11580     1F 26 C6 C9 |  if_b	decod	local05, #31
11584     00 26 06 36 |  if_ae	mov	local05, #0
11588     38 E6 B0 FD | 	call	#__system___float_fromuns
1158c     13 FB 61 F5 | 	xor	result1, local05
11590     FD 14 02 F6 | 	mov	arg02, result1
11594     10 13 02 F6 | 	mov	arg01, local02
11598     01 16 66 F6 | 	neg	arg03, #1
1159c     5C EE B0 FD | 	call	#__system___float_cmp
115a0     01 FA 55 F2 | 	cmps	result1, #1 wc
115a4     00 1E 26 36 |  if_ae	not	local01, #0
115a8     A7 1E 62 FC | 	wrlong	local01, fp
115ac     58 03 90 FD | 	jmp	#LR__1383
115b0                 | LR__1372
115b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
115b0     08 4E 05 F1 | 	add	fp, #8
115b4     A7 1E 02 FB | 	rdlong	local01, fp
115b8     08 4E 85 F1 | 	sub	fp, #8
115bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
115c0     14 4E 05 A1 |  if_e	add	fp, #20
115c4     A7 24 02 AB |  if_e	rdlong	local04, fp
115c8     14 4E 85 A1 |  if_e	sub	fp, #20
115cc     12 23 02 A6 |  if_e	mov	local03, local04
115d0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
115d4     38 00 90 5D |  if_ne	jmp	#LR__1373
115d8     00 1E 06 F6 | 	mov	local01, #0
115dc     A7 20 02 FB | 	rdlong	local02, fp
115e0     0C 4E 05 F1 | 	add	fp, #12
115e4     A7 12 02 FB | 	rdlong	arg01, fp
115e8     0C 4E 85 F1 | 	sub	fp, #12
115ec     D4 E5 B0 FD | 	call	#__system___float_fromuns
115f0     FD 14 02 F6 | 	mov	arg02, result1
115f4     10 13 02 F6 | 	mov	arg01, local02
115f8     01 16 66 F6 | 	neg	arg03, #1
115fc     FC ED B0 FD | 	call	#__system___float_cmp
11600     01 FA 55 F2 | 	cmps	result1, #1 wc
11604     00 1E 26 36 |  if_ae	not	local01, #0
11608     A7 1E 62 FC | 	wrlong	local01, fp
1160c     F8 02 90 FD | 	jmp	#LR__1383
11610                 | LR__1373
11610                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11610     08 4E 05 F1 | 	add	fp, #8
11614     A7 1E 02 FB | 	rdlong	local01, fp
11618     08 4E 85 F1 | 	sub	fp, #8
1161c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11620     14 4E 05 A1 |  if_e	add	fp, #20
11624     A7 24 02 AB |  if_e	rdlong	local04, fp
11628     14 4E 85 A1 |  if_e	sub	fp, #20
1162c     12 23 02 A6 |  if_e	mov	local03, local04
11630     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11634     44 00 90 5D |  if_ne	jmp	#LR__1374
11638     00 1E 06 F6 | 	mov	local01, #0
1163c     A7 12 02 FB | 	rdlong	arg01, fp
11640     09 13 52 F6 | 	abs	arg01, arg01 wc
11644     1F 26 C6 C9 |  if_b	decod	local05, #31
11648     00 26 06 36 |  if_ae	mov	local05, #0
1164c     74 E5 B0 FD | 	call	#__system___float_fromuns
11650     13 FB 61 F5 | 	xor	result1, local05
11654     FD 12 02 F6 | 	mov	arg01, result1
11658     0C 4E 05 F1 | 	add	fp, #12
1165c     A7 14 02 FB | 	rdlong	arg02, fp
11660     0C 4E 85 F1 | 	sub	fp, #12
11664     01 16 66 F6 | 	neg	arg03, #1
11668     90 ED B0 FD | 	call	#__system___float_cmp
1166c     01 FA 55 F2 | 	cmps	result1, #1 wc
11670     00 1E 26 36 |  if_ae	not	local01, #0
11674     A7 1E 62 FC | 	wrlong	local01, fp
11678     8C 02 90 FD | 	jmp	#LR__1383
1167c                 | LR__1374
1167c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1167c     08 4E 05 F1 | 	add	fp, #8
11680     A7 1E 02 FB | 	rdlong	local01, fp
11684     08 4E 85 F1 | 	sub	fp, #8
11688     1C 1E 0E F2 | 	cmp	local01, #28 wz
1168c     14 4E 05 A1 |  if_e	add	fp, #20
11690     A7 24 02 AB |  if_e	rdlong	local04, fp
11694     14 4E 85 A1 |  if_e	sub	fp, #20
11698     12 23 02 A6 |  if_e	mov	local03, local04
1169c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
116a0     24 00 90 5D |  if_ne	jmp	#LR__1375
116a4     00 1E 06 F6 | 	mov	local01, #0
116a8     A7 20 02 FB | 	rdlong	local02, fp
116ac     0C 4E 05 F1 | 	add	fp, #12
116b0     A7 22 02 FB | 	rdlong	local03, fp
116b4     0C 4E 85 F1 | 	sub	fp, #12
116b8     11 21 5A F2 | 	cmps	local02, local03 wcz
116bc     01 1E 66 16 |  if_a	neg	local01, #1
116c0     A7 1E 62 FC | 	wrlong	local01, fp
116c4     40 02 90 FD | 	jmp	#LR__1383
116c8                 | LR__1375
116c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
116c8     08 4E 05 F1 | 	add	fp, #8
116cc     A7 1E 02 FB | 	rdlong	local01, fp
116d0     08 4E 85 F1 | 	sub	fp, #8
116d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
116d8     14 4E 05 A1 |  if_e	add	fp, #20
116dc     A7 24 02 AB |  if_e	rdlong	local04, fp
116e0     14 4E 85 A1 |  if_e	sub	fp, #20
116e4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
116e8     24 00 90 5D |  if_ne	jmp	#LR__1376
116ec     00 1E 06 F6 | 	mov	local01, #0
116f0     A7 20 02 FB | 	rdlong	local02, fp
116f4     0C 4E 05 F1 | 	add	fp, #12
116f8     A7 22 02 FB | 	rdlong	local03, fp
116fc     0C 4E 85 F1 | 	sub	fp, #12
11700     11 21 5A F2 | 	cmps	local02, local03 wcz
11704     01 1E 66 16 |  if_a	neg	local01, #1
11708     A7 1E 62 FC | 	wrlong	local01, fp
1170c     F8 01 90 FD | 	jmp	#LR__1383
11710                 | LR__1376
11710                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11710     08 4E 05 F1 | 	add	fp, #8
11714     A7 1E 02 FB | 	rdlong	local01, fp
11718     08 4E 85 F1 | 	sub	fp, #8
1171c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11720     14 4E 05 A1 |  if_e	add	fp, #20
11724     A7 22 02 AB |  if_e	rdlong	local03, fp
11728     14 4E 85 A1 |  if_e	sub	fp, #20
1172c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11730     34 00 90 5D |  if_ne	jmp	#LR__1377
11734     00 1E 06 F6 | 	mov	local01, #0
11738     A7 12 02 FB | 	rdlong	arg01, fp
1173c     84 E4 B0 FD | 	call	#__system___float_fromuns
11740     FD 12 02 F6 | 	mov	arg01, result1
11744     0C 4E 05 F1 | 	add	fp, #12
11748     A7 14 02 FB | 	rdlong	arg02, fp
1174c     0C 4E 85 F1 | 	sub	fp, #12
11750     01 16 66 F6 | 	neg	arg03, #1
11754     A4 EC B0 FD | 	call	#__system___float_cmp
11758     01 FA 55 F2 | 	cmps	result1, #1 wc
1175c     00 1E 26 36 |  if_ae	not	local01, #0
11760     A7 1E 62 FC | 	wrlong	local01, fp
11764     A0 01 90 FD | 	jmp	#LR__1383
11768                 | LR__1377
11768                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11768     08 4E 05 F1 | 	add	fp, #8
1176c     A7 1E 02 FB | 	rdlong	local01, fp
11770     08 4E 85 F1 | 	sub	fp, #8
11774     1D 1E 0E F2 | 	cmp	local01, #29 wz
11778     14 4E 05 A1 |  if_e	add	fp, #20
1177c     A7 22 02 AB |  if_e	rdlong	local03, fp
11780     14 4E 85 A1 |  if_e	sub	fp, #20
11784     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11788     24 00 90 5D |  if_ne	jmp	#LR__1378
1178c     00 1E 06 F6 | 	mov	local01, #0
11790     A7 20 02 FB | 	rdlong	local02, fp
11794     0C 4E 05 F1 | 	add	fp, #12
11798     A7 22 02 FB | 	rdlong	local03, fp
1179c     0C 4E 85 F1 | 	sub	fp, #12
117a0     11 21 5A F2 | 	cmps	local02, local03 wcz
117a4     01 1E 66 16 |  if_a	neg	local01, #1
117a8     A7 1E 62 FC | 	wrlong	local01, fp
117ac     58 01 90 FD | 	jmp	#LR__1383
117b0                 | LR__1378
117b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
117b0     08 4E 05 F1 | 	add	fp, #8
117b4     A7 1E 02 FB | 	rdlong	local01, fp
117b8     08 4E 85 F1 | 	sub	fp, #8
117bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
117c0     14 4E 05 A1 |  if_e	add	fp, #20
117c4     A7 22 02 AB |  if_e	rdlong	local03, fp
117c8     14 4E 85 A1 |  if_e	sub	fp, #20
117cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
117d0     24 00 90 5D |  if_ne	jmp	#LR__1379
117d4     00 1E 06 F6 | 	mov	local01, #0
117d8     A7 20 02 FB | 	rdlong	local02, fp
117dc     0C 4E 05 F1 | 	add	fp, #12
117e0     A7 22 02 FB | 	rdlong	local03, fp
117e4     0C 4E 85 F1 | 	sub	fp, #12
117e8     11 21 1A F2 | 	cmp	local02, local03 wcz
117ec     01 1E 66 16 |  if_a	neg	local01, #1
117f0     A7 1E 62 FC | 	wrlong	local01, fp
117f4     10 01 90 FD | 	jmp	#LR__1383
117f8                 | LR__1379
117f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
117f8     08 4E 05 F1 | 	add	fp, #8
117fc     A7 1E 02 FB | 	rdlong	local01, fp
11800     08 4E 85 F1 | 	sub	fp, #8
11804     2B 1E 0E F2 | 	cmp	local01, #43 wz
11808     14 4E 05 A1 |  if_e	add	fp, #20
1180c     A7 22 02 AB |  if_e	rdlong	local03, fp
11810     14 4E 85 A1 |  if_e	sub	fp, #20
11814     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11818     30 00 90 5D |  if_ne	jmp	#LR__1380
1181c     00 1E 06 F6 | 	mov	local01, #0
11820     A7 12 02 FB | 	rdlong	arg01, fp
11824     2C CC BF FD | 	call	#_convertstring
11828     FD 12 02 F6 | 	mov	arg01, result1
1182c     0C 4E 05 F1 | 	add	fp, #12
11830     A7 14 02 FB | 	rdlong	arg02, fp
11834     0C 4E 85 F1 | 	sub	fp, #12
11838     38 BC B0 FD | 	call	#__system___string_cmp
1183c     01 FA 55 F2 | 	cmps	result1, #1 wc
11840     00 1E 26 36 |  if_ae	not	local01, #0
11844     A7 1E 62 FC | 	wrlong	local01, fp
11848     BC 00 90 FD | 	jmp	#LR__1383
1184c                 | LR__1380
1184c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1184c     08 4E 05 F1 | 	add	fp, #8
11850     A7 1E 02 FB | 	rdlong	local01, fp
11854     08 4E 85 F1 | 	sub	fp, #8
11858     1F 1E 0E F2 | 	cmp	local01, #31 wz
1185c     14 4E 05 A1 |  if_e	add	fp, #20
11860     A7 22 02 AB |  if_e	rdlong	local03, fp
11864     14 4E 85 A1 |  if_e	sub	fp, #20
11868     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1186c     34 00 90 5D |  if_ne	jmp	#LR__1381
11870     00 1E 06 F6 | 	mov	local01, #0
11874     A7 20 02 FB | 	rdlong	local02, fp
11878     0C 4E 05 F1 | 	add	fp, #12
1187c     A7 12 02 FB | 	rdlong	arg01, fp
11880     0C 4E 85 F1 | 	sub	fp, #12
11884     CC CB BF FD | 	call	#_convertstring
11888     FD 14 02 F6 | 	mov	arg02, result1
1188c     10 13 02 F6 | 	mov	arg01, local02
11890     E0 BB B0 FD | 	call	#__system___string_cmp
11894     01 FA 55 F2 | 	cmps	result1, #1 wc
11898     00 1E 26 36 |  if_ae	not	local01, #0
1189c     A7 1E 62 FC | 	wrlong	local01, fp
118a0     64 00 90 FD | 	jmp	#LR__1383
118a4                 | LR__1381
118a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
118a4     08 4E 05 F1 | 	add	fp, #8
118a8     A7 1E 02 FB | 	rdlong	local01, fp
118ac     08 4E 85 F1 | 	sub	fp, #8
118b0     2B 1E 0E F2 | 	cmp	local01, #43 wz
118b4     14 4E 05 A1 |  if_e	add	fp, #20
118b8     A7 22 02 AB |  if_e	rdlong	local03, fp
118bc     14 4E 85 A1 |  if_e	sub	fp, #20
118c0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
118c4     3C 00 90 5D |  if_ne	jmp	#LR__1382
118c8     00 1E 06 F6 | 	mov	local01, #0
118cc     A7 12 02 FB | 	rdlong	arg01, fp
118d0     80 CB BF FD | 	call	#_convertstring
118d4     FD 20 02 F6 | 	mov	local02, result1
118d8     0C 4E 05 F1 | 	add	fp, #12
118dc     A7 12 02 FB | 	rdlong	arg01, fp
118e0     0C 4E 85 F1 | 	sub	fp, #12
118e4     6C CB BF FD | 	call	#_convertstring
118e8     FD 14 02 F6 | 	mov	arg02, result1
118ec     10 13 02 F6 | 	mov	arg01, local02
118f0     80 BB B0 FD | 	call	#__system___string_cmp
118f4     01 FA 55 F2 | 	cmps	result1, #1 wc
118f8     00 1E 26 36 |  if_ae	not	local01, #0
118fc     A7 1E 62 FC | 	wrlong	local01, fp
11900     04 00 90 FD | 	jmp	#LR__1383
11904                 | LR__1382
11904     A7 00 68 FC | 	wrlong	#0, fp
11908                 | LR__1383
11908     08 4E 05 F1 | 	add	fp, #8
1190c     A7 38 68 FC | 	wrlong	#28, fp
11910     08 4E 85 F1 | 	sub	fp, #8
11914     A7 12 02 F6 | 	mov	arg01, fp
11918     28 89 BF FD | 	call	#_push
1191c     A7 F0 03 F6 | 	mov	ptra, fp
11920     B2 00 A0 FD | 	call	#popregs_
11924                 | _do_gt_ret
11924     2D 00 64 FD | 	ret
11928                 | 
11928                 | ' 
11928                 | ' sub do_lt
11928                 | _do_lt
11928     05 4A 05 F6 | 	mov	COUNT_, #5
1192c     A8 00 A0 FD | 	call	#pushregs_
11930     18 F0 07 F1 | 	add	ptra, #24
11934     74 88 BF FD | 	call	#_pop
11938     FD 1E 02 F6 | 	mov	local01, result1
1193c     FE 20 02 F6 | 	mov	local02, result2
11940     FF 22 02 F6 | 	mov	local03, result3
11944     0C 4E 05 F1 | 	add	fp, #12
11948     A7 1E 62 FC | 	wrlong	local01, fp
1194c     04 4E 05 F1 | 	add	fp, #4
11950     A7 20 62 FC | 	wrlong	local02, fp
11954     04 4E 05 F1 | 	add	fp, #4
11958     A7 22 62 FC | 	wrlong	local03, fp
1195c     14 4E 85 F1 | 	sub	fp, #20
11960     48 88 BF FD | 	call	#_pop
11964     FF 22 02 F6 | 	mov	local03, result3
11968     A7 FA 61 FC | 	wrlong	result1, fp
1196c     04 4E 05 F1 | 	add	fp, #4
11970     A7 FC 61 FC | 	wrlong	result2, fp
11974     04 4E 05 F1 | 	add	fp, #4
11978     A7 22 62 FC | 	wrlong	local03, fp
1197c                 | ' t2=pop()
1197c                 | ' t1=pop()
1197c                 | ' 
1197c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1197c     08 4E 85 F1 | 	sub	fp, #8
11980     1F 22 0E F2 | 	cmp	local03, #31 wz
11984     14 4E 05 A1 |  if_e	add	fp, #20
11988     A7 24 02 AB |  if_e	rdlong	local04, fp
1198c     14 4E 85 A1 |  if_e	sub	fp, #20
11990     12 23 02 A6 |  if_e	mov	local03, local04
11994     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11998     28 00 90 5D |  if_ne	jmp	#LR__1390
1199c     00 1E 06 F6 | 	mov	local01, #0
119a0     A7 12 02 FB | 	rdlong	arg01, fp
119a4     0C 4E 05 F1 | 	add	fp, #12
119a8     A7 14 02 FB | 	rdlong	arg02, fp
119ac     0C 4E 85 F1 | 	sub	fp, #12
119b0     C0 BA B0 FD | 	call	#__system___string_cmp
119b4     00 FA 55 F2 | 	cmps	result1, #0 wc
119b8     00 1E 26 C6 |  if_b	not	local01, #0
119bc     A7 1E 62 FC | 	wrlong	local01, fp
119c0     0C 04 90 FD | 	jmp	#LR__1403
119c4                 | LR__1390
119c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
119c4     08 4E 05 F1 | 	add	fp, #8
119c8     A7 1E 02 FB | 	rdlong	local01, fp
119cc     08 4E 85 F1 | 	sub	fp, #8
119d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
119d4     14 4E 05 A1 |  if_e	add	fp, #20
119d8     A7 24 02 AB |  if_e	rdlong	local04, fp
119dc     14 4E 85 A1 |  if_e	sub	fp, #20
119e0     12 23 02 A6 |  if_e	mov	local03, local04
119e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
119e8     2C 00 90 5D |  if_ne	jmp	#LR__1391
119ec     00 1E 06 F6 | 	mov	local01, #0
119f0     A7 12 02 FB | 	rdlong	arg01, fp
119f4     0C 4E 05 F1 | 	add	fp, #12
119f8     A7 14 02 FB | 	rdlong	arg02, fp
119fc     0C 4E 85 F1 | 	sub	fp, #12
11a00     01 16 06 F6 | 	mov	arg03, #1
11a04     F4 E9 B0 FD | 	call	#__system___float_cmp
11a08     00 FA 55 F2 | 	cmps	result1, #0 wc
11a0c     00 1E 26 C6 |  if_b	not	local01, #0
11a10     A7 1E 62 FC | 	wrlong	local01, fp
11a14     B8 03 90 FD | 	jmp	#LR__1403
11a18                 | LR__1391
11a18                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
11a18     08 4E 05 F1 | 	add	fp, #8
11a1c     A7 1E 02 FB | 	rdlong	local01, fp
11a20     08 4E 85 F1 | 	sub	fp, #8
11a24     1E 1E 0E F2 | 	cmp	local01, #30 wz
11a28     14 4E 05 A1 |  if_e	add	fp, #20
11a2c     A7 24 02 AB |  if_e	rdlong	local04, fp
11a30     14 4E 85 A1 |  if_e	sub	fp, #20
11a34     12 23 02 A6 |  if_e	mov	local03, local04
11a38     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a3c     48 00 90 5D |  if_ne	jmp	#LR__1392
11a40     00 1E 06 F6 | 	mov	local01, #0
11a44     A7 20 02 FB | 	rdlong	local02, fp
11a48     0C 4E 05 F1 | 	add	fp, #12
11a4c     A7 12 02 FB | 	rdlong	arg01, fp
11a50     0C 4E 85 F1 | 	sub	fp, #12
11a54     09 13 52 F6 | 	abs	arg01, arg01 wc
11a58     1F 26 C6 C9 |  if_b	decod	local05, #31
11a5c     00 26 06 36 |  if_ae	mov	local05, #0
11a60     60 E1 B0 FD | 	call	#__system___float_fromuns
11a64     13 FB 61 F5 | 	xor	result1, local05
11a68     FD 14 02 F6 | 	mov	arg02, result1
11a6c     10 13 02 F6 | 	mov	arg01, local02
11a70     01 16 06 F6 | 	mov	arg03, #1
11a74     84 E9 B0 FD | 	call	#__system___float_cmp
11a78     00 FA 55 F2 | 	cmps	result1, #0 wc
11a7c     00 1E 26 C6 |  if_b	not	local01, #0
11a80     A7 1E 62 FC | 	wrlong	local01, fp
11a84     48 03 90 FD | 	jmp	#LR__1403
11a88                 | LR__1392
11a88                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
11a88     08 4E 05 F1 | 	add	fp, #8
11a8c     A7 1E 02 FB | 	rdlong	local01, fp
11a90     08 4E 85 F1 | 	sub	fp, #8
11a94     1E 1E 0E F2 | 	cmp	local01, #30 wz
11a98     14 4E 05 A1 |  if_e	add	fp, #20
11a9c     A7 24 02 AB |  if_e	rdlong	local04, fp
11aa0     14 4E 85 A1 |  if_e	sub	fp, #20
11aa4     12 23 02 A6 |  if_e	mov	local03, local04
11aa8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11aac     38 00 90 5D |  if_ne	jmp	#LR__1393
11ab0     00 1E 06 F6 | 	mov	local01, #0
11ab4     A7 20 02 FB | 	rdlong	local02, fp
11ab8     0C 4E 05 F1 | 	add	fp, #12
11abc     A7 12 02 FB | 	rdlong	arg01, fp
11ac0     0C 4E 85 F1 | 	sub	fp, #12
11ac4     FC E0 B0 FD | 	call	#__system___float_fromuns
11ac8     FD 14 02 F6 | 	mov	arg02, result1
11acc     10 13 02 F6 | 	mov	arg01, local02
11ad0     01 16 06 F6 | 	mov	arg03, #1
11ad4     24 E9 B0 FD | 	call	#__system___float_cmp
11ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
11adc     00 1E 26 C6 |  if_b	not	local01, #0
11ae0     A7 1E 62 FC | 	wrlong	local01, fp
11ae4     E8 02 90 FD | 	jmp	#LR__1403
11ae8                 | LR__1393
11ae8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
11ae8     08 4E 05 F1 | 	add	fp, #8
11aec     A7 1E 02 FB | 	rdlong	local01, fp
11af0     08 4E 85 F1 | 	sub	fp, #8
11af4     1C 1E 0E F2 | 	cmp	local01, #28 wz
11af8     14 4E 05 A1 |  if_e	add	fp, #20
11afc     A7 24 02 AB |  if_e	rdlong	local04, fp
11b00     14 4E 85 A1 |  if_e	sub	fp, #20
11b04     12 23 02 A6 |  if_e	mov	local03, local04
11b08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11b0c     44 00 90 5D |  if_ne	jmp	#LR__1394
11b10     00 1E 06 F6 | 	mov	local01, #0
11b14     A7 12 02 FB | 	rdlong	arg01, fp
11b18     09 13 52 F6 | 	abs	arg01, arg01 wc
11b1c     1F 26 C6 C9 |  if_b	decod	local05, #31
11b20     00 26 06 36 |  if_ae	mov	local05, #0
11b24     9C E0 B0 FD | 	call	#__system___float_fromuns
11b28     13 FB 61 F5 | 	xor	result1, local05
11b2c     FD 12 02 F6 | 	mov	arg01, result1
11b30     0C 4E 05 F1 | 	add	fp, #12
11b34     A7 14 02 FB | 	rdlong	arg02, fp
11b38     0C 4E 85 F1 | 	sub	fp, #12
11b3c     01 16 06 F6 | 	mov	arg03, #1
11b40     B8 E8 B0 FD | 	call	#__system___float_cmp
11b44     00 FA 55 F2 | 	cmps	result1, #0 wc
11b48     00 1E 26 C6 |  if_b	not	local01, #0
11b4c     A7 1E 62 FC | 	wrlong	local01, fp
11b50     7C 02 90 FD | 	jmp	#LR__1403
11b54                 | LR__1394
11b54                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
11b54     08 4E 05 F1 | 	add	fp, #8
11b58     A7 1E 02 FB | 	rdlong	local01, fp
11b5c     08 4E 85 F1 | 	sub	fp, #8
11b60     1C 1E 0E F2 | 	cmp	local01, #28 wz
11b64     14 4E 05 A1 |  if_e	add	fp, #20
11b68     A7 24 02 AB |  if_e	rdlong	local04, fp
11b6c     14 4E 85 A1 |  if_e	sub	fp, #20
11b70     12 23 02 A6 |  if_e	mov	local03, local04
11b74     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b78     20 00 90 5D |  if_ne	jmp	#LR__1395
11b7c     A7 20 02 FB | 	rdlong	local02, fp
11b80     0C 4E 05 F1 | 	add	fp, #12
11b84     A7 22 02 FB | 	rdlong	local03, fp
11b88     0C 4E 85 F1 | 	sub	fp, #12
11b8c     11 21 52 F2 | 	cmps	local02, local03 wc
11b90     0F 1F A2 F1 | 	subx	local01, local01
11b94     A7 1E 62 FC | 	wrlong	local01, fp
11b98     34 02 90 FD | 	jmp	#LR__1403
11b9c                 | LR__1395
11b9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
11b9c     08 4E 05 F1 | 	add	fp, #8
11ba0     A7 1E 02 FB | 	rdlong	local01, fp
11ba4     08 4E 85 F1 | 	sub	fp, #8
11ba8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11bac     14 4E 05 A1 |  if_e	add	fp, #20
11bb0     A7 24 02 AB |  if_e	rdlong	local04, fp
11bb4     14 4E 85 A1 |  if_e	sub	fp, #20
11bb8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11bbc     20 00 90 5D |  if_ne	jmp	#LR__1396
11bc0     A7 20 02 FB | 	rdlong	local02, fp
11bc4     0C 4E 05 F1 | 	add	fp, #12
11bc8     A7 22 02 FB | 	rdlong	local03, fp
11bcc     0C 4E 85 F1 | 	sub	fp, #12
11bd0     11 21 52 F2 | 	cmps	local02, local03 wc
11bd4     0F 1F A2 F1 | 	subx	local01, local01
11bd8     A7 1E 62 FC | 	wrlong	local01, fp
11bdc     F0 01 90 FD | 	jmp	#LR__1403
11be0                 | LR__1396
11be0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
11be0     08 4E 05 F1 | 	add	fp, #8
11be4     A7 1E 02 FB | 	rdlong	local01, fp
11be8     08 4E 85 F1 | 	sub	fp, #8
11bec     1D 1E 0E F2 | 	cmp	local01, #29 wz
11bf0     14 4E 05 A1 |  if_e	add	fp, #20
11bf4     A7 22 02 AB |  if_e	rdlong	local03, fp
11bf8     14 4E 85 A1 |  if_e	sub	fp, #20
11bfc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11c00     34 00 90 5D |  if_ne	jmp	#LR__1397
11c04     00 1E 06 F6 | 	mov	local01, #0
11c08     A7 12 02 FB | 	rdlong	arg01, fp
11c0c     B4 DF B0 FD | 	call	#__system___float_fromuns
11c10     FD 12 02 F6 | 	mov	arg01, result1
11c14     0C 4E 05 F1 | 	add	fp, #12
11c18     A7 14 02 FB | 	rdlong	arg02, fp
11c1c     0C 4E 85 F1 | 	sub	fp, #12
11c20     01 16 06 F6 | 	mov	arg03, #1
11c24     D4 E7 B0 FD | 	call	#__system___float_cmp
11c28     00 FA 55 F2 | 	cmps	result1, #0 wc
11c2c     00 1E 26 C6 |  if_b	not	local01, #0
11c30     A7 1E 62 FC | 	wrlong	local01, fp
11c34     98 01 90 FD | 	jmp	#LR__1403
11c38                 | LR__1397
11c38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
11c38     08 4E 05 F1 | 	add	fp, #8
11c3c     A7 1E 02 FB | 	rdlong	local01, fp
11c40     08 4E 85 F1 | 	sub	fp, #8
11c44     1D 1E 0E F2 | 	cmp	local01, #29 wz
11c48     14 4E 05 A1 |  if_e	add	fp, #20
11c4c     A7 22 02 AB |  if_e	rdlong	local03, fp
11c50     14 4E 85 A1 |  if_e	sub	fp, #20
11c54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11c58     20 00 90 5D |  if_ne	jmp	#LR__1398
11c5c     A7 20 02 FB | 	rdlong	local02, fp
11c60     0C 4E 05 F1 | 	add	fp, #12
11c64     A7 22 02 FB | 	rdlong	local03, fp
11c68     0C 4E 85 F1 | 	sub	fp, #12
11c6c     11 21 52 F2 | 	cmps	local02, local03 wc
11c70     0F 1F A2 F1 | 	subx	local01, local01
11c74     A7 1E 62 FC | 	wrlong	local01, fp
11c78     54 01 90 FD | 	jmp	#LR__1403
11c7c                 | LR__1398
11c7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11c7c     08 4E 05 F1 | 	add	fp, #8
11c80     A7 1E 02 FB | 	rdlong	local01, fp
11c84     08 4E 85 F1 | 	sub	fp, #8
11c88     1D 1E 0E F2 | 	cmp	local01, #29 wz
11c8c     14 4E 05 A1 |  if_e	add	fp, #20
11c90     A7 22 02 AB |  if_e	rdlong	local03, fp
11c94     14 4E 85 A1 |  if_e	sub	fp, #20
11c98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11c9c     20 00 90 5D |  if_ne	jmp	#LR__1399
11ca0     A7 20 02 FB | 	rdlong	local02, fp
11ca4     0C 4E 05 F1 | 	add	fp, #12
11ca8     A7 22 02 FB | 	rdlong	local03, fp
11cac     0C 4E 85 F1 | 	sub	fp, #12
11cb0     11 21 12 F2 | 	cmp	local02, local03 wc
11cb4     0F 1F A2 F1 | 	subx	local01, local01
11cb8     A7 1E 62 FC | 	wrlong	local01, fp
11cbc     10 01 90 FD | 	jmp	#LR__1403
11cc0                 | LR__1399
11cc0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
11cc0     08 4E 05 F1 | 	add	fp, #8
11cc4     A7 1E 02 FB | 	rdlong	local01, fp
11cc8     08 4E 85 F1 | 	sub	fp, #8
11ccc     2B 1E 0E F2 | 	cmp	local01, #43 wz
11cd0     14 4E 05 A1 |  if_e	add	fp, #20
11cd4     A7 22 02 AB |  if_e	rdlong	local03, fp
11cd8     14 4E 85 A1 |  if_e	sub	fp, #20
11cdc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11ce0     30 00 90 5D |  if_ne	jmp	#LR__1400
11ce4     00 1E 06 F6 | 	mov	local01, #0
11ce8     A7 12 02 FB | 	rdlong	arg01, fp
11cec     64 C7 BF FD | 	call	#_convertstring
11cf0     FD 12 02 F6 | 	mov	arg01, result1
11cf4     0C 4E 05 F1 | 	add	fp, #12
11cf8     A7 14 02 FB | 	rdlong	arg02, fp
11cfc     0C 4E 85 F1 | 	sub	fp, #12
11d00     70 B7 B0 FD | 	call	#__system___string_cmp
11d04     00 FA 55 F2 | 	cmps	result1, #0 wc
11d08     00 1E 26 C6 |  if_b	not	local01, #0
11d0c     A7 1E 62 FC | 	wrlong	local01, fp
11d10     BC 00 90 FD | 	jmp	#LR__1403
11d14                 | LR__1400
11d14                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
11d14     08 4E 05 F1 | 	add	fp, #8
11d18     A7 1E 02 FB | 	rdlong	local01, fp
11d1c     08 4E 85 F1 | 	sub	fp, #8
11d20     1F 1E 0E F2 | 	cmp	local01, #31 wz
11d24     14 4E 05 A1 |  if_e	add	fp, #20
11d28     A7 22 02 AB |  if_e	rdlong	local03, fp
11d2c     14 4E 85 A1 |  if_e	sub	fp, #20
11d30     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11d34     34 00 90 5D |  if_ne	jmp	#LR__1401
11d38     00 1E 06 F6 | 	mov	local01, #0
11d3c     A7 20 02 FB | 	rdlong	local02, fp
11d40     0C 4E 05 F1 | 	add	fp, #12
11d44     A7 12 02 FB | 	rdlong	arg01, fp
11d48     0C 4E 85 F1 | 	sub	fp, #12
11d4c     04 C7 BF FD | 	call	#_convertstring
11d50     FD 14 02 F6 | 	mov	arg02, result1
11d54     10 13 02 F6 | 	mov	arg01, local02
11d58     18 B7 B0 FD | 	call	#__system___string_cmp
11d5c     00 FA 55 F2 | 	cmps	result1, #0 wc
11d60     00 1E 26 C6 |  if_b	not	local01, #0
11d64     A7 1E 62 FC | 	wrlong	local01, fp
11d68     64 00 90 FD | 	jmp	#LR__1403
11d6c                 | LR__1401
11d6c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
11d6c     08 4E 05 F1 | 	add	fp, #8
11d70     A7 1E 02 FB | 	rdlong	local01, fp
11d74     08 4E 85 F1 | 	sub	fp, #8
11d78     2B 1E 0E F2 | 	cmp	local01, #43 wz
11d7c     14 4E 05 A1 |  if_e	add	fp, #20
11d80     A7 22 02 AB |  if_e	rdlong	local03, fp
11d84     14 4E 85 A1 |  if_e	sub	fp, #20
11d88     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11d8c     3C 00 90 5D |  if_ne	jmp	#LR__1402
11d90     00 1E 06 F6 | 	mov	local01, #0
11d94     A7 12 02 FB | 	rdlong	arg01, fp
11d98     B8 C6 BF FD | 	call	#_convertstring
11d9c     FD 20 02 F6 | 	mov	local02, result1
11da0     0C 4E 05 F1 | 	add	fp, #12
11da4     A7 12 02 FB | 	rdlong	arg01, fp
11da8     0C 4E 85 F1 | 	sub	fp, #12
11dac     A4 C6 BF FD | 	call	#_convertstring
11db0     FD 14 02 F6 | 	mov	arg02, result1
11db4     10 13 02 F6 | 	mov	arg01, local02
11db8     B8 B6 B0 FD | 	call	#__system___string_cmp
11dbc     00 FA 55 F2 | 	cmps	result1, #0 wc
11dc0     00 1E 26 C6 |  if_b	not	local01, #0
11dc4     A7 1E 62 FC | 	wrlong	local01, fp
11dc8     04 00 90 FD | 	jmp	#LR__1403
11dcc                 | LR__1402
11dcc     A7 00 68 FC | 	wrlong	#0, fp
11dd0                 | LR__1403
11dd0     08 4E 05 F1 | 	add	fp, #8
11dd4     A7 38 68 FC | 	wrlong	#28, fp
11dd8     08 4E 85 F1 | 	sub	fp, #8
11ddc     A7 12 02 F6 | 	mov	arg01, fp
11de0     60 84 BF FD | 	call	#_push
11de4     A7 F0 03 F6 | 	mov	ptra, fp
11de8     B2 00 A0 FD | 	call	#popregs_
11dec                 | _do_lt_ret
11dec     2D 00 64 FD | 	ret
11df0                 | 
11df0                 | ' 
11df0                 | ' sub do_ge
11df0                 | _do_ge
11df0     05 4A 05 F6 | 	mov	COUNT_, #5
11df4     A8 00 A0 FD | 	call	#pushregs_
11df8     18 F0 07 F1 | 	add	ptra, #24
11dfc     AC 83 BF FD | 	call	#_pop
11e00     FD 1E 02 F6 | 	mov	local01, result1
11e04     FE 20 02 F6 | 	mov	local02, result2
11e08     FF 22 02 F6 | 	mov	local03, result3
11e0c     0C 4E 05 F1 | 	add	fp, #12
11e10     A7 1E 62 FC | 	wrlong	local01, fp
11e14     04 4E 05 F1 | 	add	fp, #4
11e18     A7 20 62 FC | 	wrlong	local02, fp
11e1c     04 4E 05 F1 | 	add	fp, #4
11e20     A7 22 62 FC | 	wrlong	local03, fp
11e24     14 4E 85 F1 | 	sub	fp, #20
11e28     80 83 BF FD | 	call	#_pop
11e2c     FF 22 02 F6 | 	mov	local03, result3
11e30     A7 FA 61 FC | 	wrlong	result1, fp
11e34     04 4E 05 F1 | 	add	fp, #4
11e38     A7 FC 61 FC | 	wrlong	result2, fp
11e3c     04 4E 05 F1 | 	add	fp, #4
11e40     A7 22 62 FC | 	wrlong	local03, fp
11e44                 | ' t2=pop()
11e44                 | ' t1=pop()
11e44                 | ' 
11e44                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
11e44     08 4E 85 F1 | 	sub	fp, #8
11e48     1F 22 0E F2 | 	cmp	local03, #31 wz
11e4c     14 4E 05 A1 |  if_e	add	fp, #20
11e50     A7 24 02 AB |  if_e	rdlong	local04, fp
11e54     14 4E 85 A1 |  if_e	sub	fp, #20
11e58     12 23 02 A6 |  if_e	mov	local03, local04
11e5c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11e60     28 00 90 5D |  if_ne	jmp	#LR__1410
11e64     00 1E 06 F6 | 	mov	local01, #0
11e68     A7 12 02 FB | 	rdlong	arg01, fp
11e6c     0C 4E 05 F1 | 	add	fp, #12
11e70     A7 14 02 FB | 	rdlong	arg02, fp
11e74     0C 4E 85 F1 | 	sub	fp, #12
11e78     F8 B5 B0 FD | 	call	#__system___string_cmp
11e7c     00 FA 55 F2 | 	cmps	result1, #0 wc
11e80     00 1E 26 36 |  if_ae	not	local01, #0
11e84     A7 1E 62 FC | 	wrlong	local01, fp
11e88     1C 04 90 FD | 	jmp	#LR__1423
11e8c                 | LR__1410
11e8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
11e8c     08 4E 05 F1 | 	add	fp, #8
11e90     A7 1E 02 FB | 	rdlong	local01, fp
11e94     08 4E 85 F1 | 	sub	fp, #8
11e98     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e9c     14 4E 05 A1 |  if_e	add	fp, #20
11ea0     A7 24 02 AB |  if_e	rdlong	local04, fp
11ea4     14 4E 85 A1 |  if_e	sub	fp, #20
11ea8     12 23 02 A6 |  if_e	mov	local03, local04
11eac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11eb0     2C 00 90 5D |  if_ne	jmp	#LR__1411
11eb4     00 1E 06 F6 | 	mov	local01, #0
11eb8     A7 12 02 FB | 	rdlong	arg01, fp
11ebc     0C 4E 05 F1 | 	add	fp, #12
11ec0     A7 14 02 FB | 	rdlong	arg02, fp
11ec4     0C 4E 85 F1 | 	sub	fp, #12
11ec8     01 16 66 F6 | 	neg	arg03, #1
11ecc     2C E5 B0 FD | 	call	#__system___float_cmp
11ed0     00 FA 55 F2 | 	cmps	result1, #0 wc
11ed4     00 1E 26 36 |  if_ae	not	local01, #0
11ed8     A7 1E 62 FC | 	wrlong	local01, fp
11edc     C8 03 90 FD | 	jmp	#LR__1423
11ee0                 | LR__1411
11ee0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
11ee0     08 4E 05 F1 | 	add	fp, #8
11ee4     A7 1E 02 FB | 	rdlong	local01, fp
11ee8     08 4E 85 F1 | 	sub	fp, #8
11eec     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ef0     14 4E 05 A1 |  if_e	add	fp, #20
11ef4     A7 24 02 AB |  if_e	rdlong	local04, fp
11ef8     14 4E 85 A1 |  if_e	sub	fp, #20
11efc     12 23 02 A6 |  if_e	mov	local03, local04
11f00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11f04     48 00 90 5D |  if_ne	jmp	#LR__1412
11f08     00 1E 06 F6 | 	mov	local01, #0
11f0c     A7 20 02 FB | 	rdlong	local02, fp
11f10     0C 4E 05 F1 | 	add	fp, #12
11f14     A7 12 02 FB | 	rdlong	arg01, fp
11f18     0C 4E 85 F1 | 	sub	fp, #12
11f1c     09 13 52 F6 | 	abs	arg01, arg01 wc
11f20     1F 26 C6 C9 |  if_b	decod	local05, #31
11f24     00 26 06 36 |  if_ae	mov	local05, #0
11f28     98 DC B0 FD | 	call	#__system___float_fromuns
11f2c     13 FB 61 F5 | 	xor	result1, local05
11f30     FD 14 02 F6 | 	mov	arg02, result1
11f34     10 13 02 F6 | 	mov	arg01, local02
11f38     01 16 66 F6 | 	neg	arg03, #1
11f3c     BC E4 B0 FD | 	call	#__system___float_cmp
11f40     00 FA 55 F2 | 	cmps	result1, #0 wc
11f44     00 1E 26 36 |  if_ae	not	local01, #0
11f48     A7 1E 62 FC | 	wrlong	local01, fp
11f4c     58 03 90 FD | 	jmp	#LR__1423
11f50                 | LR__1412
11f50                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11f50     08 4E 05 F1 | 	add	fp, #8
11f54     A7 1E 02 FB | 	rdlong	local01, fp
11f58     08 4E 85 F1 | 	sub	fp, #8
11f5c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f60     14 4E 05 A1 |  if_e	add	fp, #20
11f64     A7 24 02 AB |  if_e	rdlong	local04, fp
11f68     14 4E 85 A1 |  if_e	sub	fp, #20
11f6c     12 23 02 A6 |  if_e	mov	local03, local04
11f70     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11f74     38 00 90 5D |  if_ne	jmp	#LR__1413
11f78     00 1E 06 F6 | 	mov	local01, #0
11f7c     A7 20 02 FB | 	rdlong	local02, fp
11f80     0C 4E 05 F1 | 	add	fp, #12
11f84     A7 12 02 FB | 	rdlong	arg01, fp
11f88     0C 4E 85 F1 | 	sub	fp, #12
11f8c     34 DC B0 FD | 	call	#__system___float_fromuns
11f90     FD 14 02 F6 | 	mov	arg02, result1
11f94     10 13 02 F6 | 	mov	arg01, local02
11f98     01 16 66 F6 | 	neg	arg03, #1
11f9c     5C E4 B0 FD | 	call	#__system___float_cmp
11fa0     00 FA 55 F2 | 	cmps	result1, #0 wc
11fa4     00 1E 26 36 |  if_ae	not	local01, #0
11fa8     A7 1E 62 FC | 	wrlong	local01, fp
11fac     F8 02 90 FD | 	jmp	#LR__1423
11fb0                 | LR__1413
11fb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11fb0     08 4E 05 F1 | 	add	fp, #8
11fb4     A7 1E 02 FB | 	rdlong	local01, fp
11fb8     08 4E 85 F1 | 	sub	fp, #8
11fbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
11fc0     14 4E 05 A1 |  if_e	add	fp, #20
11fc4     A7 24 02 AB |  if_e	rdlong	local04, fp
11fc8     14 4E 85 A1 |  if_e	sub	fp, #20
11fcc     12 23 02 A6 |  if_e	mov	local03, local04
11fd0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fd4     44 00 90 5D |  if_ne	jmp	#LR__1414
11fd8     00 1E 06 F6 | 	mov	local01, #0
11fdc     A7 12 02 FB | 	rdlong	arg01, fp
11fe0     09 13 52 F6 | 	abs	arg01, arg01 wc
11fe4     1F 26 C6 C9 |  if_b	decod	local05, #31
11fe8     00 26 06 36 |  if_ae	mov	local05, #0
11fec     D4 DB B0 FD | 	call	#__system___float_fromuns
11ff0     13 FB 61 F5 | 	xor	result1, local05
11ff4     FD 12 02 F6 | 	mov	arg01, result1
11ff8     0C 4E 05 F1 | 	add	fp, #12
11ffc     A7 14 02 FB | 	rdlong	arg02, fp
12000     0C 4E 85 F1 | 	sub	fp, #12
12004     01 16 66 F6 | 	neg	arg03, #1
12008     F0 E3 B0 FD | 	call	#__system___float_cmp
1200c     00 FA 55 F2 | 	cmps	result1, #0 wc
12010     00 1E 26 36 |  if_ae	not	local01, #0
12014     A7 1E 62 FC | 	wrlong	local01, fp
12018     8C 02 90 FD | 	jmp	#LR__1423
1201c                 | LR__1414
1201c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 1E 02 FB | 	rdlong	local01, fp
12024     08 4E 85 F1 | 	sub	fp, #8
12028     1C 1E 0E F2 | 	cmp	local01, #28 wz
1202c     14 4E 05 A1 |  if_e	add	fp, #20
12030     A7 24 02 AB |  if_e	rdlong	local04, fp
12034     14 4E 85 A1 |  if_e	sub	fp, #20
12038     12 23 02 A6 |  if_e	mov	local03, local04
1203c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12040     24 00 90 5D |  if_ne	jmp	#LR__1415
12044     00 1E 06 F6 | 	mov	local01, #0
12048     A7 20 02 FB | 	rdlong	local02, fp
1204c     0C 4E 05 F1 | 	add	fp, #12
12050     A7 22 02 FB | 	rdlong	local03, fp
12054     0C 4E 85 F1 | 	sub	fp, #12
12058     11 21 52 F2 | 	cmps	local02, local03 wc
1205c     01 1E 66 36 |  if_ae	neg	local01, #1
12060     A7 1E 62 FC | 	wrlong	local01, fp
12064     40 02 90 FD | 	jmp	#LR__1423
12068                 | LR__1415
12068                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
12068     08 4E 05 F1 | 	add	fp, #8
1206c     A7 1E 02 FB | 	rdlong	local01, fp
12070     08 4E 85 F1 | 	sub	fp, #8
12074     1C 1E 0E F2 | 	cmp	local01, #28 wz
12078     14 4E 05 A1 |  if_e	add	fp, #20
1207c     A7 24 02 AB |  if_e	rdlong	local04, fp
12080     14 4E 85 A1 |  if_e	sub	fp, #20
12084     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12088     24 00 90 5D |  if_ne	jmp	#LR__1416
1208c     00 1E 06 F6 | 	mov	local01, #0
12090     A7 20 02 FB | 	rdlong	local02, fp
12094     0C 4E 05 F1 | 	add	fp, #12
12098     A7 22 02 FB | 	rdlong	local03, fp
1209c     0C 4E 85 F1 | 	sub	fp, #12
120a0     11 21 52 F2 | 	cmps	local02, local03 wc
120a4     01 1E 66 36 |  if_ae	neg	local01, #1
120a8     A7 1E 62 FC | 	wrlong	local01, fp
120ac     F8 01 90 FD | 	jmp	#LR__1423
120b0                 | LR__1416
120b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
120b0     08 4E 05 F1 | 	add	fp, #8
120b4     A7 1E 02 FB | 	rdlong	local01, fp
120b8     08 4E 85 F1 | 	sub	fp, #8
120bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
120c0     14 4E 05 A1 |  if_e	add	fp, #20
120c4     A7 22 02 AB |  if_e	rdlong	local03, fp
120c8     14 4E 85 A1 |  if_e	sub	fp, #20
120cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
120d0     34 00 90 5D |  if_ne	jmp	#LR__1417
120d4     00 1E 06 F6 | 	mov	local01, #0
120d8     A7 12 02 FB | 	rdlong	arg01, fp
120dc     E4 DA B0 FD | 	call	#__system___float_fromuns
120e0     FD 12 02 F6 | 	mov	arg01, result1
120e4     0C 4E 05 F1 | 	add	fp, #12
120e8     A7 14 02 FB | 	rdlong	arg02, fp
120ec     0C 4E 85 F1 | 	sub	fp, #12
120f0     01 16 66 F6 | 	neg	arg03, #1
120f4     04 E3 B0 FD | 	call	#__system___float_cmp
120f8     00 FA 55 F2 | 	cmps	result1, #0 wc
120fc     00 1E 26 36 |  if_ae	not	local01, #0
12100     A7 1E 62 FC | 	wrlong	local01, fp
12104     A0 01 90 FD | 	jmp	#LR__1423
12108                 | LR__1417
12108                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
12108     08 4E 05 F1 | 	add	fp, #8
1210c     A7 1E 02 FB | 	rdlong	local01, fp
12110     08 4E 85 F1 | 	sub	fp, #8
12114     1D 1E 0E F2 | 	cmp	local01, #29 wz
12118     14 4E 05 A1 |  if_e	add	fp, #20
1211c     A7 22 02 AB |  if_e	rdlong	local03, fp
12120     14 4E 85 A1 |  if_e	sub	fp, #20
12124     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12128     24 00 90 5D |  if_ne	jmp	#LR__1418
1212c     00 1E 06 F6 | 	mov	local01, #0
12130     A7 20 02 FB | 	rdlong	local02, fp
12134     0C 4E 05 F1 | 	add	fp, #12
12138     A7 22 02 FB | 	rdlong	local03, fp
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     11 21 52 F2 | 	cmps	local02, local03 wc
12144     01 1E 66 36 |  if_ae	neg	local01, #1
12148     A7 1E 62 FC | 	wrlong	local01, fp
1214c     58 01 90 FD | 	jmp	#LR__1423
12150                 | LR__1418
12150                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
12150     08 4E 05 F1 | 	add	fp, #8
12154     A7 1E 02 FB | 	rdlong	local01, fp
12158     08 4E 85 F1 | 	sub	fp, #8
1215c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12160     14 4E 05 A1 |  if_e	add	fp, #20
12164     A7 22 02 AB |  if_e	rdlong	local03, fp
12168     14 4E 85 A1 |  if_e	sub	fp, #20
1216c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12170     24 00 90 5D |  if_ne	jmp	#LR__1419
12174     00 1E 06 F6 | 	mov	local01, #0
12178     A7 20 02 FB | 	rdlong	local02, fp
1217c     0C 4E 05 F1 | 	add	fp, #12
12180     A7 22 02 FB | 	rdlong	local03, fp
12184     0C 4E 85 F1 | 	sub	fp, #12
12188     11 21 12 F2 | 	cmp	local02, local03 wc
1218c     01 1E 66 36 |  if_ae	neg	local01, #1
12190     A7 1E 62 FC | 	wrlong	local01, fp
12194     10 01 90 FD | 	jmp	#LR__1423
12198                 | LR__1419
12198                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
12198     08 4E 05 F1 | 	add	fp, #8
1219c     A7 1E 02 FB | 	rdlong	local01, fp
121a0     08 4E 85 F1 | 	sub	fp, #8
121a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
121a8     14 4E 05 A1 |  if_e	add	fp, #20
121ac     A7 22 02 AB |  if_e	rdlong	local03, fp
121b0     14 4E 85 A1 |  if_e	sub	fp, #20
121b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
121b8     30 00 90 5D |  if_ne	jmp	#LR__1420
121bc     00 1E 06 F6 | 	mov	local01, #0
121c0     A7 12 02 FB | 	rdlong	arg01, fp
121c4     8C C2 BF FD | 	call	#_convertstring
121c8     FD 12 02 F6 | 	mov	arg01, result1
121cc     0C 4E 05 F1 | 	add	fp, #12
121d0     A7 14 02 FB | 	rdlong	arg02, fp
121d4     0C 4E 85 F1 | 	sub	fp, #12
121d8     98 B2 B0 FD | 	call	#__system___string_cmp
121dc     00 FA 55 F2 | 	cmps	result1, #0 wc
121e0     00 1E 26 36 |  if_ae	not	local01, #0
121e4     A7 1E 62 FC | 	wrlong	local01, fp
121e8     BC 00 90 FD | 	jmp	#LR__1423
121ec                 | LR__1420
121ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
121ec     08 4E 05 F1 | 	add	fp, #8
121f0     A7 1E 02 FB | 	rdlong	local01, fp
121f4     08 4E 85 F1 | 	sub	fp, #8
121f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
121fc     14 4E 05 A1 |  if_e	add	fp, #20
12200     A7 22 02 AB |  if_e	rdlong	local03, fp
12204     14 4E 85 A1 |  if_e	sub	fp, #20
12208     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1220c     34 00 90 5D |  if_ne	jmp	#LR__1421
12210     00 1E 06 F6 | 	mov	local01, #0
12214     A7 20 02 FB | 	rdlong	local02, fp
12218     0C 4E 05 F1 | 	add	fp, #12
1221c     A7 12 02 FB | 	rdlong	arg01, fp
12220     0C 4E 85 F1 | 	sub	fp, #12
12224     2C C2 BF FD | 	call	#_convertstring
12228     FD 14 02 F6 | 	mov	arg02, result1
1222c     10 13 02 F6 | 	mov	arg01, local02
12230     40 B2 B0 FD | 	call	#__system___string_cmp
12234     00 FA 55 F2 | 	cmps	result1, #0 wc
12238     00 1E 26 36 |  if_ae	not	local01, #0
1223c     A7 1E 62 FC | 	wrlong	local01, fp
12240     64 00 90 FD | 	jmp	#LR__1423
12244                 | LR__1421
12244                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
12244     08 4E 05 F1 | 	add	fp, #8
12248     A7 1E 02 FB | 	rdlong	local01, fp
1224c     08 4E 85 F1 | 	sub	fp, #8
12250     2B 1E 0E F2 | 	cmp	local01, #43 wz
12254     14 4E 05 A1 |  if_e	add	fp, #20
12258     A7 22 02 AB |  if_e	rdlong	local03, fp
1225c     14 4E 85 A1 |  if_e	sub	fp, #20
12260     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12264     3C 00 90 5D |  if_ne	jmp	#LR__1422
12268     00 1E 06 F6 | 	mov	local01, #0
1226c     A7 12 02 FB | 	rdlong	arg01, fp
12270     E0 C1 BF FD | 	call	#_convertstring
12274     FD 20 02 F6 | 	mov	local02, result1
12278     0C 4E 05 F1 | 	add	fp, #12
1227c     A7 12 02 FB | 	rdlong	arg01, fp
12280     0C 4E 85 F1 | 	sub	fp, #12
12284     CC C1 BF FD | 	call	#_convertstring
12288     FD 14 02 F6 | 	mov	arg02, result1
1228c     10 13 02 F6 | 	mov	arg01, local02
12290     E0 B1 B0 FD | 	call	#__system___string_cmp
12294     00 FA 55 F2 | 	cmps	result1, #0 wc
12298     00 1E 26 36 |  if_ae	not	local01, #0
1229c     A7 1E 62 FC | 	wrlong	local01, fp
122a0     04 00 90 FD | 	jmp	#LR__1423
122a4                 | LR__1422
122a4     A7 00 68 FC | 	wrlong	#0, fp
122a8                 | LR__1423
122a8     08 4E 05 F1 | 	add	fp, #8
122ac     A7 38 68 FC | 	wrlong	#28, fp
122b0     08 4E 85 F1 | 	sub	fp, #8
122b4     A7 12 02 F6 | 	mov	arg01, fp
122b8     88 7F BF FD | 	call	#_push
122bc     A7 F0 03 F6 | 	mov	ptra, fp
122c0     B2 00 A0 FD | 	call	#popregs_
122c4                 | _do_ge_ret
122c4     2D 00 64 FD | 	ret
122c8                 | 
122c8                 | ' 
122c8                 | ' sub do_le
122c8                 | _do_le
122c8     05 4A 05 F6 | 	mov	COUNT_, #5
122cc     A8 00 A0 FD | 	call	#pushregs_
122d0     18 F0 07 F1 | 	add	ptra, #24
122d4     D4 7E BF FD | 	call	#_pop
122d8     FD 1E 02 F6 | 	mov	local01, result1
122dc     FE 20 02 F6 | 	mov	local02, result2
122e0     FF 22 02 F6 | 	mov	local03, result3
122e4     0C 4E 05 F1 | 	add	fp, #12
122e8     A7 1E 62 FC | 	wrlong	local01, fp
122ec     04 4E 05 F1 | 	add	fp, #4
122f0     A7 20 62 FC | 	wrlong	local02, fp
122f4     04 4E 05 F1 | 	add	fp, #4
122f8     A7 22 62 FC | 	wrlong	local03, fp
122fc     14 4E 85 F1 | 	sub	fp, #20
12300     A8 7E BF FD | 	call	#_pop
12304     FF 22 02 F6 | 	mov	local03, result3
12308     A7 FA 61 FC | 	wrlong	result1, fp
1230c     04 4E 05 F1 | 	add	fp, #4
12310     A7 FC 61 FC | 	wrlong	result2, fp
12314     04 4E 05 F1 | 	add	fp, #4
12318     A7 22 62 FC | 	wrlong	local03, fp
1231c                 | ' t2=pop()
1231c                 | ' t1=pop()
1231c                 | ' 
1231c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1231c     08 4E 85 F1 | 	sub	fp, #8
12320     1F 22 0E F2 | 	cmp	local03, #31 wz
12324     14 4E 05 A1 |  if_e	add	fp, #20
12328     A7 24 02 AB |  if_e	rdlong	local04, fp
1232c     14 4E 85 A1 |  if_e	sub	fp, #20
12330     12 23 02 A6 |  if_e	mov	local03, local04
12334     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12338     28 00 90 5D |  if_ne	jmp	#LR__1430
1233c     00 1E 06 F6 | 	mov	local01, #0
12340     A7 12 02 FB | 	rdlong	arg01, fp
12344     0C 4E 05 F1 | 	add	fp, #12
12348     A7 14 02 FB | 	rdlong	arg02, fp
1234c     0C 4E 85 F1 | 	sub	fp, #12
12350     20 B1 B0 FD | 	call	#__system___string_cmp
12354     01 FA 55 F2 | 	cmps	result1, #1 wc
12358     00 1E 26 C6 |  if_b	not	local01, #0
1235c     A7 1E 62 FC | 	wrlong	local01, fp
12360     1C 04 90 FD | 	jmp	#LR__1443
12364                 | LR__1430
12364                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
12364     08 4E 05 F1 | 	add	fp, #8
12368     A7 1E 02 FB | 	rdlong	local01, fp
1236c     08 4E 85 F1 | 	sub	fp, #8
12370     1E 1E 0E F2 | 	cmp	local01, #30 wz
12374     14 4E 05 A1 |  if_e	add	fp, #20
12378     A7 24 02 AB |  if_e	rdlong	local04, fp
1237c     14 4E 85 A1 |  if_e	sub	fp, #20
12380     12 23 02 A6 |  if_e	mov	local03, local04
12384     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12388     2C 00 90 5D |  if_ne	jmp	#LR__1431
1238c     00 1E 06 F6 | 	mov	local01, #0
12390     A7 12 02 FB | 	rdlong	arg01, fp
12394     0C 4E 05 F1 | 	add	fp, #12
12398     A7 14 02 FB | 	rdlong	arg02, fp
1239c     0C 4E 85 F1 | 	sub	fp, #12
123a0     01 16 06 F6 | 	mov	arg03, #1
123a4     54 E0 B0 FD | 	call	#__system___float_cmp
123a8     01 FA 55 F2 | 	cmps	result1, #1 wc
123ac     00 1E 26 C6 |  if_b	not	local01, #0
123b0     A7 1E 62 FC | 	wrlong	local01, fp
123b4     C8 03 90 FD | 	jmp	#LR__1443
123b8                 | LR__1431
123b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
123b8     08 4E 05 F1 | 	add	fp, #8
123bc     A7 1E 02 FB | 	rdlong	local01, fp
123c0     08 4E 85 F1 | 	sub	fp, #8
123c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
123c8     14 4E 05 A1 |  if_e	add	fp, #20
123cc     A7 24 02 AB |  if_e	rdlong	local04, fp
123d0     14 4E 85 A1 |  if_e	sub	fp, #20
123d4     12 23 02 A6 |  if_e	mov	local03, local04
123d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
123dc     48 00 90 5D |  if_ne	jmp	#LR__1432
123e0     00 1E 06 F6 | 	mov	local01, #0
123e4     A7 20 02 FB | 	rdlong	local02, fp
123e8     0C 4E 05 F1 | 	add	fp, #12
123ec     A7 12 02 FB | 	rdlong	arg01, fp
123f0     0C 4E 85 F1 | 	sub	fp, #12
123f4     09 13 52 F6 | 	abs	arg01, arg01 wc
123f8     1F 26 C6 C9 |  if_b	decod	local05, #31
123fc     00 26 06 36 |  if_ae	mov	local05, #0
12400     C0 D7 B0 FD | 	call	#__system___float_fromuns
12404     13 FB 61 F5 | 	xor	result1, local05
12408     FD 14 02 F6 | 	mov	arg02, result1
1240c     10 13 02 F6 | 	mov	arg01, local02
12410     01 16 06 F6 | 	mov	arg03, #1
12414     E4 DF B0 FD | 	call	#__system___float_cmp
12418     01 FA 55 F2 | 	cmps	result1, #1 wc
1241c     00 1E 26 C6 |  if_b	not	local01, #0
12420     A7 1E 62 FC | 	wrlong	local01, fp
12424     58 03 90 FD | 	jmp	#LR__1443
12428                 | LR__1432
12428                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12428     08 4E 05 F1 | 	add	fp, #8
1242c     A7 1E 02 FB | 	rdlong	local01, fp
12430     08 4E 85 F1 | 	sub	fp, #8
12434     1E 1E 0E F2 | 	cmp	local01, #30 wz
12438     14 4E 05 A1 |  if_e	add	fp, #20
1243c     A7 24 02 AB |  if_e	rdlong	local04, fp
12440     14 4E 85 A1 |  if_e	sub	fp, #20
12444     12 23 02 A6 |  if_e	mov	local03, local04
12448     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1244c     38 00 90 5D |  if_ne	jmp	#LR__1433
12450     00 1E 06 F6 | 	mov	local01, #0
12454     A7 20 02 FB | 	rdlong	local02, fp
12458     0C 4E 05 F1 | 	add	fp, #12
1245c     A7 12 02 FB | 	rdlong	arg01, fp
12460     0C 4E 85 F1 | 	sub	fp, #12
12464     5C D7 B0 FD | 	call	#__system___float_fromuns
12468     FD 14 02 F6 | 	mov	arg02, result1
1246c     10 13 02 F6 | 	mov	arg01, local02
12470     01 16 06 F6 | 	mov	arg03, #1
12474     84 DF B0 FD | 	call	#__system___float_cmp
12478     01 FA 55 F2 | 	cmps	result1, #1 wc
1247c     00 1E 26 C6 |  if_b	not	local01, #0
12480     A7 1E 62 FC | 	wrlong	local01, fp
12484     F8 02 90 FD | 	jmp	#LR__1443
12488                 | LR__1433
12488                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12488     08 4E 05 F1 | 	add	fp, #8
1248c     A7 1E 02 FB | 	rdlong	local01, fp
12490     08 4E 85 F1 | 	sub	fp, #8
12494     1C 1E 0E F2 | 	cmp	local01, #28 wz
12498     14 4E 05 A1 |  if_e	add	fp, #20
1249c     A7 24 02 AB |  if_e	rdlong	local04, fp
124a0     14 4E 85 A1 |  if_e	sub	fp, #20
124a4     12 23 02 A6 |  if_e	mov	local03, local04
124a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
124ac     44 00 90 5D |  if_ne	jmp	#LR__1434
124b0     00 1E 06 F6 | 	mov	local01, #0
124b4     A7 12 02 FB | 	rdlong	arg01, fp
124b8     09 13 52 F6 | 	abs	arg01, arg01 wc
124bc     1F 26 C6 C9 |  if_b	decod	local05, #31
124c0     00 26 06 36 |  if_ae	mov	local05, #0
124c4     FC D6 B0 FD | 	call	#__system___float_fromuns
124c8     13 FB 61 F5 | 	xor	result1, local05
124cc     FD 12 02 F6 | 	mov	arg01, result1
124d0     0C 4E 05 F1 | 	add	fp, #12
124d4     A7 14 02 FB | 	rdlong	arg02, fp
124d8     0C 4E 85 F1 | 	sub	fp, #12
124dc     01 16 06 F6 | 	mov	arg03, #1
124e0     18 DF B0 FD | 	call	#__system___float_cmp
124e4     01 FA 55 F2 | 	cmps	result1, #1 wc
124e8     00 1E 26 C6 |  if_b	not	local01, #0
124ec     A7 1E 62 FC | 	wrlong	local01, fp
124f0     8C 02 90 FD | 	jmp	#LR__1443
124f4                 | LR__1434
124f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
124f4     08 4E 05 F1 | 	add	fp, #8
124f8     A7 1E 02 FB | 	rdlong	local01, fp
124fc     08 4E 85 F1 | 	sub	fp, #8
12500     1C 1E 0E F2 | 	cmp	local01, #28 wz
12504     14 4E 05 A1 |  if_e	add	fp, #20
12508     A7 24 02 AB |  if_e	rdlong	local04, fp
1250c     14 4E 85 A1 |  if_e	sub	fp, #20
12510     12 23 02 A6 |  if_e	mov	local03, local04
12514     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12518     24 00 90 5D |  if_ne	jmp	#LR__1435
1251c     00 1E 06 F6 | 	mov	local01, #0
12520     A7 20 02 FB | 	rdlong	local02, fp
12524     0C 4E 05 F1 | 	add	fp, #12
12528     A7 22 02 FB | 	rdlong	local03, fp
1252c     0C 4E 85 F1 | 	sub	fp, #12
12530     11 21 5A F2 | 	cmps	local02, local03 wcz
12534     01 1E 66 E6 |  if_be	neg	local01, #1
12538     A7 1E 62 FC | 	wrlong	local01, fp
1253c     40 02 90 FD | 	jmp	#LR__1443
12540                 | LR__1435
12540                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12540     08 4E 05 F1 | 	add	fp, #8
12544     A7 1E 02 FB | 	rdlong	local01, fp
12548     08 4E 85 F1 | 	sub	fp, #8
1254c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12550     14 4E 05 A1 |  if_e	add	fp, #20
12554     A7 24 02 AB |  if_e	rdlong	local04, fp
12558     14 4E 85 A1 |  if_e	sub	fp, #20
1255c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12560     24 00 90 5D |  if_ne	jmp	#LR__1436
12564     00 1E 06 F6 | 	mov	local01, #0
12568     A7 20 02 FB | 	rdlong	local02, fp
1256c     0C 4E 05 F1 | 	add	fp, #12
12570     A7 22 02 FB | 	rdlong	local03, fp
12574     0C 4E 85 F1 | 	sub	fp, #12
12578     11 21 5A F2 | 	cmps	local02, local03 wcz
1257c     01 1E 66 E6 |  if_be	neg	local01, #1
12580     A7 1E 62 FC | 	wrlong	local01, fp
12584     F8 01 90 FD | 	jmp	#LR__1443
12588                 | LR__1436
12588                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12588     08 4E 05 F1 | 	add	fp, #8
1258c     A7 1E 02 FB | 	rdlong	local01, fp
12590     08 4E 85 F1 | 	sub	fp, #8
12594     1D 1E 0E F2 | 	cmp	local01, #29 wz
12598     14 4E 05 A1 |  if_e	add	fp, #20
1259c     A7 22 02 AB |  if_e	rdlong	local03, fp
125a0     14 4E 85 A1 |  if_e	sub	fp, #20
125a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
125a8     34 00 90 5D |  if_ne	jmp	#LR__1437
125ac     00 1E 06 F6 | 	mov	local01, #0
125b0     A7 12 02 FB | 	rdlong	arg01, fp
125b4     0C D6 B0 FD | 	call	#__system___float_fromuns
125b8     FD 12 02 F6 | 	mov	arg01, result1
125bc     0C 4E 05 F1 | 	add	fp, #12
125c0     A7 14 02 FB | 	rdlong	arg02, fp
125c4     0C 4E 85 F1 | 	sub	fp, #12
125c8     01 16 06 F6 | 	mov	arg03, #1
125cc     2C DE B0 FD | 	call	#__system___float_cmp
125d0     01 FA 55 F2 | 	cmps	result1, #1 wc
125d4     00 1E 26 C6 |  if_b	not	local01, #0
125d8     A7 1E 62 FC | 	wrlong	local01, fp
125dc     A0 01 90 FD | 	jmp	#LR__1443
125e0                 | LR__1437
125e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
125e0     08 4E 05 F1 | 	add	fp, #8
125e4     A7 1E 02 FB | 	rdlong	local01, fp
125e8     08 4E 85 F1 | 	sub	fp, #8
125ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
125f0     14 4E 05 A1 |  if_e	add	fp, #20
125f4     A7 22 02 AB |  if_e	rdlong	local03, fp
125f8     14 4E 85 A1 |  if_e	sub	fp, #20
125fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12600     24 00 90 5D |  if_ne	jmp	#LR__1438
12604     00 1E 06 F6 | 	mov	local01, #0
12608     A7 20 02 FB | 	rdlong	local02, fp
1260c     0C 4E 05 F1 | 	add	fp, #12
12610     A7 22 02 FB | 	rdlong	local03, fp
12614     0C 4E 85 F1 | 	sub	fp, #12
12618     11 21 5A F2 | 	cmps	local02, local03 wcz
1261c     01 1E 66 E6 |  if_be	neg	local01, #1
12620     A7 1E 62 FC | 	wrlong	local01, fp
12624     58 01 90 FD | 	jmp	#LR__1443
12628                 | LR__1438
12628                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12628     08 4E 05 F1 | 	add	fp, #8
1262c     A7 1E 02 FB | 	rdlong	local01, fp
12630     08 4E 85 F1 | 	sub	fp, #8
12634     1D 1E 0E F2 | 	cmp	local01, #29 wz
12638     14 4E 05 A1 |  if_e	add	fp, #20
1263c     A7 22 02 AB |  if_e	rdlong	local03, fp
12640     14 4E 85 A1 |  if_e	sub	fp, #20
12644     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12648     24 00 90 5D |  if_ne	jmp	#LR__1439
1264c     00 1E 06 F6 | 	mov	local01, #0
12650     A7 20 02 FB | 	rdlong	local02, fp
12654     0C 4E 05 F1 | 	add	fp, #12
12658     A7 22 02 FB | 	rdlong	local03, fp
1265c     0C 4E 85 F1 | 	sub	fp, #12
12660     11 21 1A F2 | 	cmp	local02, local03 wcz
12664     01 1E 66 E6 |  if_be	neg	local01, #1
12668     A7 1E 62 FC | 	wrlong	local01, fp
1266c     10 01 90 FD | 	jmp	#LR__1443
12670                 | LR__1439
12670                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12670     08 4E 05 F1 | 	add	fp, #8
12674     A7 1E 02 FB | 	rdlong	local01, fp
12678     08 4E 85 F1 | 	sub	fp, #8
1267c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12680     14 4E 05 A1 |  if_e	add	fp, #20
12684     A7 22 02 AB |  if_e	rdlong	local03, fp
12688     14 4E 85 A1 |  if_e	sub	fp, #20
1268c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12690     30 00 90 5D |  if_ne	jmp	#LR__1440
12694     00 1E 06 F6 | 	mov	local01, #0
12698     A7 12 02 FB | 	rdlong	arg01, fp
1269c     B4 BD BF FD | 	call	#_convertstring
126a0     FD 12 02 F6 | 	mov	arg01, result1
126a4     0C 4E 05 F1 | 	add	fp, #12
126a8     A7 14 02 FB | 	rdlong	arg02, fp
126ac     0C 4E 85 F1 | 	sub	fp, #12
126b0     C0 AD B0 FD | 	call	#__system___string_cmp
126b4     01 FA 55 F2 | 	cmps	result1, #1 wc
126b8     00 1E 26 C6 |  if_b	not	local01, #0
126bc     A7 1E 62 FC | 	wrlong	local01, fp
126c0     BC 00 90 FD | 	jmp	#LR__1443
126c4                 | LR__1440
126c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
126c4     08 4E 05 F1 | 	add	fp, #8
126c8     A7 1E 02 FB | 	rdlong	local01, fp
126cc     08 4E 85 F1 | 	sub	fp, #8
126d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
126d4     14 4E 05 A1 |  if_e	add	fp, #20
126d8     A7 22 02 AB |  if_e	rdlong	local03, fp
126dc     14 4E 85 A1 |  if_e	sub	fp, #20
126e0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
126e4     34 00 90 5D |  if_ne	jmp	#LR__1441
126e8     00 1E 06 F6 | 	mov	local01, #0
126ec     A7 20 02 FB | 	rdlong	local02, fp
126f0     0C 4E 05 F1 | 	add	fp, #12
126f4     A7 12 02 FB | 	rdlong	arg01, fp
126f8     0C 4E 85 F1 | 	sub	fp, #12
126fc     54 BD BF FD | 	call	#_convertstring
12700     FD 14 02 F6 | 	mov	arg02, result1
12704     10 13 02 F6 | 	mov	arg01, local02
12708     68 AD B0 FD | 	call	#__system___string_cmp
1270c     01 FA 55 F2 | 	cmps	result1, #1 wc
12710     00 1E 26 C6 |  if_b	not	local01, #0
12714     A7 1E 62 FC | 	wrlong	local01, fp
12718     64 00 90 FD | 	jmp	#LR__1443
1271c                 | LR__1441
1271c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1271c     08 4E 05 F1 | 	add	fp, #8
12720     A7 1E 02 FB | 	rdlong	local01, fp
12724     08 4E 85 F1 | 	sub	fp, #8
12728     2B 1E 0E F2 | 	cmp	local01, #43 wz
1272c     14 4E 05 A1 |  if_e	add	fp, #20
12730     A7 22 02 AB |  if_e	rdlong	local03, fp
12734     14 4E 85 A1 |  if_e	sub	fp, #20
12738     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1273c     3C 00 90 5D |  if_ne	jmp	#LR__1442
12740     00 1E 06 F6 | 	mov	local01, #0
12744     A7 12 02 FB | 	rdlong	arg01, fp
12748     08 BD BF FD | 	call	#_convertstring
1274c     FD 20 02 F6 | 	mov	local02, result1
12750     0C 4E 05 F1 | 	add	fp, #12
12754     A7 12 02 FB | 	rdlong	arg01, fp
12758     0C 4E 85 F1 | 	sub	fp, #12
1275c     F4 BC BF FD | 	call	#_convertstring
12760     FD 14 02 F6 | 	mov	arg02, result1
12764     10 13 02 F6 | 	mov	arg01, local02
12768     08 AD B0 FD | 	call	#__system___string_cmp
1276c     01 FA 55 F2 | 	cmps	result1, #1 wc
12770     00 1E 26 C6 |  if_b	not	local01, #0
12774     A7 1E 62 FC | 	wrlong	local01, fp
12778     04 00 90 FD | 	jmp	#LR__1443
1277c                 | LR__1442
1277c     A7 00 68 FC | 	wrlong	#0, fp
12780                 | LR__1443
12780     08 4E 05 F1 | 	add	fp, #8
12784     A7 38 68 FC | 	wrlong	#28, fp
12788     08 4E 85 F1 | 	sub	fp, #8
1278c     A7 12 02 F6 | 	mov	arg01, fp
12790     B0 7A BF FD | 	call	#_push
12794     A7 F0 03 F6 | 	mov	ptra, fp
12798     B2 00 A0 FD | 	call	#popregs_
1279c                 | _do_le_ret
1279c     2D 00 64 FD | 	ret
127a0                 | 
127a0                 | ' 
127a0                 | ' 
127a0                 | ' sub do_ne
127a0                 | _do_ne
127a0     05 4A 05 F6 | 	mov	COUNT_, #5
127a4     A8 00 A0 FD | 	call	#pushregs_
127a8     18 F0 07 F1 | 	add	ptra, #24
127ac     FC 79 BF FD | 	call	#_pop
127b0     FD 1E 02 F6 | 	mov	local01, result1
127b4     FE 20 02 F6 | 	mov	local02, result2
127b8     FF 22 02 F6 | 	mov	local03, result3
127bc     0C 4E 05 F1 | 	add	fp, #12
127c0     A7 1E 62 FC | 	wrlong	local01, fp
127c4     04 4E 05 F1 | 	add	fp, #4
127c8     A7 20 62 FC | 	wrlong	local02, fp
127cc     04 4E 05 F1 | 	add	fp, #4
127d0     A7 22 62 FC | 	wrlong	local03, fp
127d4     14 4E 85 F1 | 	sub	fp, #20
127d8     D0 79 BF FD | 	call	#_pop
127dc     FF 22 02 F6 | 	mov	local03, result3
127e0     A7 FA 61 FC | 	wrlong	result1, fp
127e4     04 4E 05 F1 | 	add	fp, #4
127e8     A7 FC 61 FC | 	wrlong	result2, fp
127ec     04 4E 05 F1 | 	add	fp, #4
127f0     A7 22 62 FC | 	wrlong	local03, fp
127f4                 | ' t2=pop()
127f4                 | ' t1=pop()
127f4                 | ' 
127f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     1F 22 0E F2 | 	cmp	local03, #31 wz
127fc     14 4E 05 A1 |  if_e	add	fp, #20
12800     A7 24 02 AB |  if_e	rdlong	local04, fp
12804     14 4E 85 A1 |  if_e	sub	fp, #20
12808     12 23 02 A6 |  if_e	mov	local03, local04
1280c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12810     28 00 90 5D |  if_ne	jmp	#LR__1450
12814     00 1E 06 F6 | 	mov	local01, #0
12818     A7 12 02 FB | 	rdlong	arg01, fp
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 14 02 FB | 	rdlong	arg02, fp
12824     0C 4E 85 F1 | 	sub	fp, #12
12828     48 AC B0 FD | 	call	#__system___string_cmp
1282c     00 FA 0D F2 | 	cmp	result1, #0 wz
12830     00 1E 26 56 |  if_ne	not	local01, #0
12834     A7 1E 62 FC | 	wrlong	local01, fp
12838     1C 04 90 FD | 	jmp	#LR__1463
1283c                 | LR__1450
1283c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1283c     08 4E 05 F1 | 	add	fp, #8
12840     A7 1E 02 FB | 	rdlong	local01, fp
12844     08 4E 85 F1 | 	sub	fp, #8
12848     1E 1E 0E F2 | 	cmp	local01, #30 wz
1284c     14 4E 05 A1 |  if_e	add	fp, #20
12850     A7 24 02 AB |  if_e	rdlong	local04, fp
12854     14 4E 85 A1 |  if_e	sub	fp, #20
12858     12 23 02 A6 |  if_e	mov	local03, local04
1285c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12860     2C 00 90 5D |  if_ne	jmp	#LR__1451
12864     00 1E 06 F6 | 	mov	local01, #0
12868     A7 12 02 FB | 	rdlong	arg01, fp
1286c     0C 4E 05 F1 | 	add	fp, #12
12870     A7 14 02 FB | 	rdlong	arg02, fp
12874     0C 4E 85 F1 | 	sub	fp, #12
12878     01 16 06 F6 | 	mov	arg03, #1
1287c     7C DB B0 FD | 	call	#__system___float_cmp
12880     00 FA 0D F2 | 	cmp	result1, #0 wz
12884     00 1E 26 56 |  if_ne	not	local01, #0
12888     A7 1E 62 FC | 	wrlong	local01, fp
1288c     C8 03 90 FD | 	jmp	#LR__1463
12890                 | LR__1451
12890                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
12890     08 4E 05 F1 | 	add	fp, #8
12894     A7 1E 02 FB | 	rdlong	local01, fp
12898     08 4E 85 F1 | 	sub	fp, #8
1289c     1E 1E 0E F2 | 	cmp	local01, #30 wz
128a0     14 4E 05 A1 |  if_e	add	fp, #20
128a4     A7 24 02 AB |  if_e	rdlong	local04, fp
128a8     14 4E 85 A1 |  if_e	sub	fp, #20
128ac     12 23 02 A6 |  if_e	mov	local03, local04
128b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128b4     48 00 90 5D |  if_ne	jmp	#LR__1452
128b8     00 1E 06 F6 | 	mov	local01, #0
128bc     A7 20 02 FB | 	rdlong	local02, fp
128c0     0C 4E 05 F1 | 	add	fp, #12
128c4     A7 12 02 FB | 	rdlong	arg01, fp
128c8     0C 4E 85 F1 | 	sub	fp, #12
128cc     09 13 52 F6 | 	abs	arg01, arg01 wc
128d0     1F 26 C6 C9 |  if_b	decod	local05, #31
128d4     00 26 06 36 |  if_ae	mov	local05, #0
128d8     E8 D2 B0 FD | 	call	#__system___float_fromuns
128dc     13 FB 61 F5 | 	xor	result1, local05
128e0     FD 14 02 F6 | 	mov	arg02, result1
128e4     10 13 02 F6 | 	mov	arg01, local02
128e8     01 16 06 F6 | 	mov	arg03, #1
128ec     0C DB B0 FD | 	call	#__system___float_cmp
128f0     00 FA 0D F2 | 	cmp	result1, #0 wz
128f4     00 1E 26 56 |  if_ne	not	local01, #0
128f8     A7 1E 62 FC | 	wrlong	local01, fp
128fc     58 03 90 FD | 	jmp	#LR__1463
12900                 | LR__1452
12900                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
12900     08 4E 05 F1 | 	add	fp, #8
12904     A7 1E 02 FB | 	rdlong	local01, fp
12908     08 4E 85 F1 | 	sub	fp, #8
1290c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12910     14 4E 05 A1 |  if_e	add	fp, #20
12914     A7 24 02 AB |  if_e	rdlong	local04, fp
12918     14 4E 85 A1 |  if_e	sub	fp, #20
1291c     12 23 02 A6 |  if_e	mov	local03, local04
12920     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12924     38 00 90 5D |  if_ne	jmp	#LR__1453
12928     00 1E 06 F6 | 	mov	local01, #0
1292c     A7 20 02 FB | 	rdlong	local02, fp
12930     0C 4E 05 F1 | 	add	fp, #12
12934     A7 12 02 FB | 	rdlong	arg01, fp
12938     0C 4E 85 F1 | 	sub	fp, #12
1293c     84 D2 B0 FD | 	call	#__system___float_fromuns
12940     FD 14 02 F6 | 	mov	arg02, result1
12944     10 13 02 F6 | 	mov	arg01, local02
12948     01 16 06 F6 | 	mov	arg03, #1
1294c     AC DA B0 FD | 	call	#__system___float_cmp
12950     00 FA 0D F2 | 	cmp	result1, #0 wz
12954     00 1E 26 56 |  if_ne	not	local01, #0
12958     A7 1E 62 FC | 	wrlong	local01, fp
1295c     F8 02 90 FD | 	jmp	#LR__1463
12960                 | LR__1453
12960                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
12960     08 4E 05 F1 | 	add	fp, #8
12964     A7 1E 02 FB | 	rdlong	local01, fp
12968     08 4E 85 F1 | 	sub	fp, #8
1296c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12970     14 4E 05 A1 |  if_e	add	fp, #20
12974     A7 24 02 AB |  if_e	rdlong	local04, fp
12978     14 4E 85 A1 |  if_e	sub	fp, #20
1297c     12 23 02 A6 |  if_e	mov	local03, local04
12980     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12984     44 00 90 5D |  if_ne	jmp	#LR__1454
12988     00 1E 06 F6 | 	mov	local01, #0
1298c     A7 12 02 FB | 	rdlong	arg01, fp
12990     09 13 52 F6 | 	abs	arg01, arg01 wc
12994     1F 26 C6 C9 |  if_b	decod	local05, #31
12998     00 26 06 36 |  if_ae	mov	local05, #0
1299c     24 D2 B0 FD | 	call	#__system___float_fromuns
129a0     13 FB 61 F5 | 	xor	result1, local05
129a4     FD 12 02 F6 | 	mov	arg01, result1
129a8     0C 4E 05 F1 | 	add	fp, #12
129ac     A7 14 02 FB | 	rdlong	arg02, fp
129b0     0C 4E 85 F1 | 	sub	fp, #12
129b4     01 16 06 F6 | 	mov	arg03, #1
129b8     40 DA B0 FD | 	call	#__system___float_cmp
129bc     00 FA 0D F2 | 	cmp	result1, #0 wz
129c0     00 1E 26 56 |  if_ne	not	local01, #0
129c4     A7 1E 62 FC | 	wrlong	local01, fp
129c8     8C 02 90 FD | 	jmp	#LR__1463
129cc                 | LR__1454
129cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
129cc     08 4E 05 F1 | 	add	fp, #8
129d0     A7 1E 02 FB | 	rdlong	local01, fp
129d4     08 4E 85 F1 | 	sub	fp, #8
129d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
129dc     14 4E 05 A1 |  if_e	add	fp, #20
129e0     A7 24 02 AB |  if_e	rdlong	local04, fp
129e4     14 4E 85 A1 |  if_e	sub	fp, #20
129e8     12 23 02 A6 |  if_e	mov	local03, local04
129ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129f0     24 00 90 5D |  if_ne	jmp	#LR__1455
129f4     00 1E 06 F6 | 	mov	local01, #0
129f8     A7 20 02 FB | 	rdlong	local02, fp
129fc     0C 4E 05 F1 | 	add	fp, #12
12a00     A7 22 02 FB | 	rdlong	local03, fp
12a04     0C 4E 85 F1 | 	sub	fp, #12
12a08     11 21 0A F2 | 	cmp	local02, local03 wz
12a0c     01 1E 66 56 |  if_ne	neg	local01, #1
12a10     A7 1E 62 FC | 	wrlong	local01, fp
12a14     40 02 90 FD | 	jmp	#LR__1463
12a18                 | LR__1455
12a18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
12a18     08 4E 05 F1 | 	add	fp, #8
12a1c     A7 1E 02 FB | 	rdlong	local01, fp
12a20     08 4E 85 F1 | 	sub	fp, #8
12a24     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a28     14 4E 05 A1 |  if_e	add	fp, #20
12a2c     A7 24 02 AB |  if_e	rdlong	local04, fp
12a30     14 4E 85 A1 |  if_e	sub	fp, #20
12a34     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12a38     24 00 90 5D |  if_ne	jmp	#LR__1456
12a3c     00 1E 06 F6 | 	mov	local01, #0
12a40     A7 20 02 FB | 	rdlong	local02, fp
12a44     0C 4E 05 F1 | 	add	fp, #12
12a48     A7 22 02 FB | 	rdlong	local03, fp
12a4c     0C 4E 85 F1 | 	sub	fp, #12
12a50     11 21 0A F2 | 	cmp	local02, local03 wz
12a54     01 1E 66 56 |  if_ne	neg	local01, #1
12a58     A7 1E 62 FC | 	wrlong	local01, fp
12a5c     F8 01 90 FD | 	jmp	#LR__1463
12a60                 | LR__1456
12a60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
12a60     08 4E 05 F1 | 	add	fp, #8
12a64     A7 1E 02 FB | 	rdlong	local01, fp
12a68     08 4E 85 F1 | 	sub	fp, #8
12a6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12a70     14 4E 05 A1 |  if_e	add	fp, #20
12a74     A7 22 02 AB |  if_e	rdlong	local03, fp
12a78     14 4E 85 A1 |  if_e	sub	fp, #20
12a7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12a80     34 00 90 5D |  if_ne	jmp	#LR__1457
12a84     00 1E 06 F6 | 	mov	local01, #0
12a88     A7 12 02 FB | 	rdlong	arg01, fp
12a8c     34 D1 B0 FD | 	call	#__system___float_fromuns
12a90     FD 12 02 F6 | 	mov	arg01, result1
12a94     0C 4E 05 F1 | 	add	fp, #12
12a98     A7 14 02 FB | 	rdlong	arg02, fp
12a9c     0C 4E 85 F1 | 	sub	fp, #12
12aa0     01 16 06 F6 | 	mov	arg03, #1
12aa4     54 D9 B0 FD | 	call	#__system___float_cmp
12aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
12aac     00 1E 26 56 |  if_ne	not	local01, #0
12ab0     A7 1E 62 FC | 	wrlong	local01, fp
12ab4     A0 01 90 FD | 	jmp	#LR__1463
12ab8                 | LR__1457
12ab8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
12ab8     08 4E 05 F1 | 	add	fp, #8
12abc     A7 1E 02 FB | 	rdlong	local01, fp
12ac0     08 4E 85 F1 | 	sub	fp, #8
12ac4     1D 1E 0E F2 | 	cmp	local01, #29 wz
12ac8     14 4E 05 A1 |  if_e	add	fp, #20
12acc     A7 22 02 AB |  if_e	rdlong	local03, fp
12ad0     14 4E 85 A1 |  if_e	sub	fp, #20
12ad4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12ad8     24 00 90 5D |  if_ne	jmp	#LR__1458
12adc     00 1E 06 F6 | 	mov	local01, #0
12ae0     A7 20 02 FB | 	rdlong	local02, fp
12ae4     0C 4E 05 F1 | 	add	fp, #12
12ae8     A7 22 02 FB | 	rdlong	local03, fp
12aec     0C 4E 85 F1 | 	sub	fp, #12
12af0     11 21 0A F2 | 	cmp	local02, local03 wz
12af4     01 1E 66 56 |  if_ne	neg	local01, #1
12af8     A7 1E 62 FC | 	wrlong	local01, fp
12afc     58 01 90 FD | 	jmp	#LR__1463
12b00                 | LR__1458
12b00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
12b00     08 4E 05 F1 | 	add	fp, #8
12b04     A7 1E 02 FB | 	rdlong	local01, fp
12b08     08 4E 85 F1 | 	sub	fp, #8
12b0c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12b10     14 4E 05 A1 |  if_e	add	fp, #20
12b14     A7 22 02 AB |  if_e	rdlong	local03, fp
12b18     14 4E 85 A1 |  if_e	sub	fp, #20
12b1c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12b20     24 00 90 5D |  if_ne	jmp	#LR__1459
12b24     00 1E 06 F6 | 	mov	local01, #0
12b28     A7 20 02 FB | 	rdlong	local02, fp
12b2c     0C 4E 05 F1 | 	add	fp, #12
12b30     A7 22 02 FB | 	rdlong	local03, fp
12b34     0C 4E 85 F1 | 	sub	fp, #12
12b38     11 21 0A F2 | 	cmp	local02, local03 wz
12b3c     01 1E 66 56 |  if_ne	neg	local01, #1
12b40     A7 1E 62 FC | 	wrlong	local01, fp
12b44     10 01 90 FD | 	jmp	#LR__1463
12b48                 | LR__1459
12b48                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
12b48     08 4E 05 F1 | 	add	fp, #8
12b4c     A7 1E 02 FB | 	rdlong	local01, fp
12b50     08 4E 85 F1 | 	sub	fp, #8
12b54     2B 1E 0E F2 | 	cmp	local01, #43 wz
12b58     14 4E 05 A1 |  if_e	add	fp, #20
12b5c     A7 22 02 AB |  if_e	rdlong	local03, fp
12b60     14 4E 85 A1 |  if_e	sub	fp, #20
12b64     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12b68     30 00 90 5D |  if_ne	jmp	#LR__1460
12b6c     00 1E 06 F6 | 	mov	local01, #0
12b70     A7 12 02 FB | 	rdlong	arg01, fp
12b74     DC B8 BF FD | 	call	#_convertstring
12b78     FD 12 02 F6 | 	mov	arg01, result1
12b7c     0C 4E 05 F1 | 	add	fp, #12
12b80     A7 14 02 FB | 	rdlong	arg02, fp
12b84     0C 4E 85 F1 | 	sub	fp, #12
12b88     E8 A8 B0 FD | 	call	#__system___string_cmp
12b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
12b90     00 1E 26 56 |  if_ne	not	local01, #0
12b94     A7 1E 62 FC | 	wrlong	local01, fp
12b98     BC 00 90 FD | 	jmp	#LR__1463
12b9c                 | LR__1460
12b9c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
12b9c     08 4E 05 F1 | 	add	fp, #8
12ba0     A7 1E 02 FB | 	rdlong	local01, fp
12ba4     08 4E 85 F1 | 	sub	fp, #8
12ba8     1F 1E 0E F2 | 	cmp	local01, #31 wz
12bac     14 4E 05 A1 |  if_e	add	fp, #20
12bb0     A7 22 02 AB |  if_e	rdlong	local03, fp
12bb4     14 4E 85 A1 |  if_e	sub	fp, #20
12bb8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12bbc     34 00 90 5D |  if_ne	jmp	#LR__1461
12bc0     00 1E 06 F6 | 	mov	local01, #0
12bc4     A7 20 02 FB | 	rdlong	local02, fp
12bc8     0C 4E 05 F1 | 	add	fp, #12
12bcc     A7 12 02 FB | 	rdlong	arg01, fp
12bd0     0C 4E 85 F1 | 	sub	fp, #12
12bd4     7C B8 BF FD | 	call	#_convertstring
12bd8     FD 14 02 F6 | 	mov	arg02, result1
12bdc     10 13 02 F6 | 	mov	arg01, local02
12be0     90 A8 B0 FD | 	call	#__system___string_cmp
12be4     00 FA 0D F2 | 	cmp	result1, #0 wz
12be8     00 1E 26 56 |  if_ne	not	local01, #0
12bec     A7 1E 62 FC | 	wrlong	local01, fp
12bf0     64 00 90 FD | 	jmp	#LR__1463
12bf4                 | LR__1461
12bf4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
12bf4     08 4E 05 F1 | 	add	fp, #8
12bf8     A7 1E 02 FB | 	rdlong	local01, fp
12bfc     08 4E 85 F1 | 	sub	fp, #8
12c00     2B 1E 0E F2 | 	cmp	local01, #43 wz
12c04     14 4E 05 A1 |  if_e	add	fp, #20
12c08     A7 22 02 AB |  if_e	rdlong	local03, fp
12c0c     14 4E 85 A1 |  if_e	sub	fp, #20
12c10     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12c14     3C 00 90 5D |  if_ne	jmp	#LR__1462
12c18     00 1E 06 F6 | 	mov	local01, #0
12c1c     A7 12 02 FB | 	rdlong	arg01, fp
12c20     30 B8 BF FD | 	call	#_convertstring
12c24     FD 20 02 F6 | 	mov	local02, result1
12c28     0C 4E 05 F1 | 	add	fp, #12
12c2c     A7 12 02 FB | 	rdlong	arg01, fp
12c30     0C 4E 85 F1 | 	sub	fp, #12
12c34     1C B8 BF FD | 	call	#_convertstring
12c38     FD 14 02 F6 | 	mov	arg02, result1
12c3c     10 13 02 F6 | 	mov	arg01, local02
12c40     30 A8 B0 FD | 	call	#__system___string_cmp
12c44     00 FA 0D F2 | 	cmp	result1, #0 wz
12c48     00 1E 26 56 |  if_ne	not	local01, #0
12c4c     A7 1E 62 FC | 	wrlong	local01, fp
12c50     04 00 90 FD | 	jmp	#LR__1463
12c54                 | LR__1462
12c54     A7 00 68 FC | 	wrlong	#0, fp
12c58                 | LR__1463
12c58     08 4E 05 F1 | 	add	fp, #8
12c5c     A7 38 68 FC | 	wrlong	#28, fp
12c60     08 4E 85 F1 | 	sub	fp, #8
12c64     A7 12 02 F6 | 	mov	arg01, fp
12c68     D8 75 BF FD | 	call	#_push
12c6c     A7 F0 03 F6 | 	mov	ptra, fp
12c70     B2 00 A0 FD | 	call	#popregs_
12c74                 | _do_ne_ret
12c74     2D 00 64 FD | 	ret
12c78                 | 
12c78                 | ' 
12c78                 | ' 
12c78                 | ' 
12c78                 | ' ' -------------------   convert a variable on the top of stack to integer
12c78                 | ' 
12c78                 | ' sub do_converttoint
12c78                 | _do_converttoint
12c78     02 4A 05 F6 | 	mov	COUNT_, #2
12c7c     A8 00 A0 FD | 	call	#pushregs_
12c80     18 F0 07 F1 | 	add	ptra, #24
12c84     24 75 BF FD | 	call	#_pop
12c88     FE 1E 02 F6 | 	mov	local01, result2
12c8c     FF 20 02 F6 | 	mov	local02, result3
12c90     A7 FA 61 FC | 	wrlong	result1, fp
12c94     04 4E 05 F1 | 	add	fp, #4
12c98     A7 1E 62 FC | 	wrlong	local01, fp
12c9c     04 4E 05 F1 | 	add	fp, #4
12ca0     A7 20 62 FC | 	wrlong	local02, fp
12ca4                 | ' t1=pop() 
12ca4                 | ' select case t1.result_type
12ca4     08 4E 85 F1 | 	sub	fp, #8
12ca8     1C 20 0E F2 | 	cmp	local02, #28 wz
12cac     2C 00 90 AD |  if_e	jmp	#LR__1470
12cb0     1D 20 0E F2 | 	cmp	local02, #29 wz
12cb4     40 00 90 AD |  if_e	jmp	#LR__1471
12cb8     1E 20 0E F2 | 	cmp	local02, #30 wz
12cbc     54 00 90 AD |  if_e	jmp	#LR__1472
12cc0     1F 20 0E F2 | 	cmp	local02, #31 wz
12cc4     70 00 90 AD |  if_e	jmp	#LR__1473
12cc8     2B 20 0E F2 | 	cmp	local02, #43 wz
12ccc     94 00 90 AD |  if_e	jmp	#LR__1474
12cd0     FF 20 0E F2 | 	cmp	local02, #255 wz
12cd4     C0 00 90 AD |  if_e	jmp	#LR__1475
12cd8     DC 00 90 FD | 	jmp	#LR__1476
12cdc                 | LR__1470
12cdc     A7 20 02 FB | 	rdlong	local02, fp
12ce0     0C 4E 05 F1 | 	add	fp, #12
12ce4     A7 20 62 FC | 	wrlong	local02, fp
12ce8     04 4E 05 F1 | 	add	fp, #4
12cec     A7 38 68 FC | 	wrlong	#28, fp
12cf0     10 4E 85 F1 | 	sub	fp, #16
12cf4     D4 00 90 FD | 	jmp	#LR__1477
12cf8                 | LR__1471
12cf8     A7 20 02 FB | 	rdlong	local02, fp
12cfc     0C 4E 05 F1 | 	add	fp, #12
12d00     A7 20 62 FC | 	wrlong	local02, fp
12d04     04 4E 05 F1 | 	add	fp, #4
12d08     A7 38 68 FC | 	wrlong	#28, fp
12d0c     10 4E 85 F1 | 	sub	fp, #16
12d10     B8 00 90 FD | 	jmp	#LR__1477
12d14                 | LR__1472
12d14     A7 12 02 FB | 	rdlong	arg01, fp
12d18     01 14 06 F6 | 	mov	arg02, #1
12d1c     70 D7 B0 FD | 	call	#__system___float_tointeger
12d20     0C 4E 05 F1 | 	add	fp, #12
12d24     A7 FA 61 FC | 	wrlong	result1, fp
12d28     04 4E 05 F1 | 	add	fp, #4
12d2c     A7 38 68 FC | 	wrlong	#28, fp
12d30     10 4E 85 F1 | 	sub	fp, #16
12d34     94 00 90 FD | 	jmp	#LR__1477
12d38                 | LR__1473
12d38     A7 12 02 FB | 	rdlong	arg01, fp
12d3c     70 DA B0 FD | 	call	#__system____builtin_atof
12d40     FD 12 02 F6 | 	mov	arg01, result1
12d44     00 14 06 F6 | 	mov	arg02, #0
12d48     44 D7 B0 FD | 	call	#__system___float_tointeger
12d4c     0C 4E 05 F1 | 	add	fp, #12
12d50     A7 FA 61 FC | 	wrlong	result1, fp
12d54     04 4E 05 F1 | 	add	fp, #4
12d58     A7 38 68 FC | 	wrlong	#28, fp
12d5c     10 4E 85 F1 | 	sub	fp, #16
12d60     68 00 90 FD | 	jmp	#LR__1477
12d64                 | LR__1474
12d64     A7 12 02 FB | 	rdlong	arg01, fp
12d68     E8 B6 BF FD | 	call	#_convertstring
12d6c     FD 12 02 F6 | 	mov	arg01, result1
12d70     3C DA B0 FD | 	call	#__system____builtin_atof
12d74     FD 12 02 F6 | 	mov	arg01, result1
12d78     00 14 06 F6 | 	mov	arg02, #0
12d7c     10 D7 B0 FD | 	call	#__system___float_tointeger
12d80     0C 4E 05 F1 | 	add	fp, #12
12d84     A7 FA 61 FC | 	wrlong	result1, fp
12d88     04 4E 05 F1 | 	add	fp, #4
12d8c     A7 38 68 FC | 	wrlong	#28, fp
12d90     10 4E 85 F1 | 	sub	fp, #16
12d94     34 00 90 FD | 	jmp	#LR__1477
12d98                 | LR__1475
12d98     0C 4E 05 F1 | 	add	fp, #12
12d9c     A7 00 68 FC | 	wrlong	#0, fp
12da0     0C 4E 85 F1 | 	sub	fp, #12
12da4     A7 20 02 FB | 	rdlong	local02, fp
12da8     10 4E 05 F1 | 	add	fp, #16
12dac     A7 20 62 FC | 	wrlong	local02, fp
12db0     10 4E 85 F1 | 	sub	fp, #16
12db4     14 00 90 FD | 	jmp	#LR__1477
12db8                 | LR__1476
12db8     0C 4E 05 F1 | 	add	fp, #12
12dbc     A7 00 68 FC | 	wrlong	#0, fp
12dc0     04 4E 05 F1 | 	add	fp, #4
12dc4     A7 02 68 FC | 	wrlong	#1, fp
12dc8     10 4E 85 F1 | 	sub	fp, #16
12dcc                 | LR__1477
12dcc     0C 4E 05 F1 | 	add	fp, #12
12dd0     A7 20 02 FB | 	rdlong	local02, fp
12dd4     0C 4E 85 F1 | 	sub	fp, #12
12dd8     A7 20 62 FC | 	wrlong	local02, fp
12ddc     10 4E 05 F1 | 	add	fp, #16
12de0     A7 20 02 FB | 	rdlong	local02, fp
12de4     08 4E 85 F1 | 	sub	fp, #8
12de8     A7 20 62 FC | 	wrlong	local02, fp
12dec     08 4E 85 F1 | 	sub	fp, #8
12df0     A7 12 02 F6 | 	mov	arg01, fp
12df4     4C 74 BF FD | 	call	#_push
12df8     A7 F0 03 F6 | 	mov	ptra, fp
12dfc     B2 00 A0 FD | 	call	#popregs_
12e00                 | _do_converttoint_ret
12e00     2D 00 64 FD | 	ret
12e04                 | 
12e04                 | ' 
12e04                 | ' function converttoint (t1 as expr_result) as integer
12e04                 | _converttoint
12e04     02 4A 05 F6 | 	mov	COUNT_, #2
12e08     A8 00 A0 FD | 	call	#pushregs_
12e0c     09 1F 02 F6 | 	mov	local01, arg01
12e10                 | ' 
12e10                 | ' select case t1.result_type
12e10     08 1E 06 F1 | 	add	local01, #8
12e14     0F 21 02 FB | 	rdlong	local02, local01
12e18     08 1E 86 F1 | 	sub	local01, #8
12e1c     1C 20 0E F2 | 	cmp	local02, #28 wz
12e20     24 00 90 AD |  if_e	jmp	#LR__1480
12e24     1D 20 0E F2 | 	cmp	local02, #29 wz
12e28     24 00 90 AD |  if_e	jmp	#LR__1481
12e2c     1E 20 0E F2 | 	cmp	local02, #30 wz
12e30     24 00 90 AD |  if_e	jmp	#LR__1482
12e34     1F 20 0E F2 | 	cmp	local02, #31 wz
12e38     2C 00 90 AD |  if_e	jmp	#LR__1483
12e3c     2B 20 0E F2 | 	cmp	local02, #43 wz
12e40     3C 00 90 AD |  if_e	jmp	#LR__1484
12e44     58 00 90 FD | 	jmp	#LR__1485
12e48                 | LR__1480
12e48     0F FB 01 FB | 	rdlong	result1, local01
12e4c     54 00 90 FD | 	jmp	#LR__1486
12e50                 | LR__1481
12e50     0F FB 01 FB | 	rdlong	result1, local01
12e54     4C 00 90 FD | 	jmp	#LR__1486
12e58                 | LR__1482
12e58     0F 13 02 FB | 	rdlong	arg01, local01
12e5c     01 14 06 F6 | 	mov	arg02, #1
12e60     2C D6 B0 FD | 	call	#__system___float_tointeger
12e64     3C 00 90 FD | 	jmp	#LR__1486
12e68                 | LR__1483
12e68     0F 13 02 FB | 	rdlong	arg01, local01
12e6c     40 D9 B0 FD | 	call	#__system____builtin_atof
12e70     FD 12 02 F6 | 	mov	arg01, result1
12e74     00 14 06 F6 | 	mov	arg02, #0
12e78     14 D6 B0 FD | 	call	#__system___float_tointeger
12e7c     24 00 90 FD | 	jmp	#LR__1486
12e80                 | LR__1484
12e80     0F 13 02 FB | 	rdlong	arg01, local01
12e84     CC B5 BF FD | 	call	#_convertstring
12e88     FD 12 02 F6 | 	mov	arg01, result1
12e8c     20 D9 B0 FD | 	call	#__system____builtin_atof
12e90     FD 12 02 F6 | 	mov	arg01, result1
12e94     00 14 06 F6 | 	mov	arg02, #0
12e98     F4 D5 B0 FD | 	call	#__system___float_tointeger
12e9c     04 00 90 FD | 	jmp	#LR__1486
12ea0                 | LR__1485
12ea0     00 FA 05 F6 | 	mov	result1, #0
12ea4                 | LR__1486
12ea4     A7 F0 03 F6 | 	mov	ptra, fp
12ea8     B2 00 A0 FD | 	call	#popregs_
12eac                 | _converttoint_ret
12eac     2D 00 64 FD | 	ret
12eb0                 | 
12eb0                 | ' 
12eb0                 | ' function converttofloat (t1 as expr_result) as single
12eb0                 | _converttofloat
12eb0     03 4A 05 F6 | 	mov	COUNT_, #3
12eb4     A8 00 A0 FD | 	call	#pushregs_
12eb8     09 1F 02 F6 | 	mov	local01, arg01
12ebc                 | ' 
12ebc                 | ' select case t1.result_type
12ebc     08 1E 06 F1 | 	add	local01, #8
12ec0     0F 21 02 FB | 	rdlong	local02, local01
12ec4     08 1E 86 F1 | 	sub	local01, #8
12ec8     1C 20 0E F2 | 	cmp	local02, #28 wz
12ecc     24 00 90 AD |  if_e	jmp	#LR__1490
12ed0     1D 20 0E F2 | 	cmp	local02, #29 wz
12ed4     38 00 90 AD |  if_e	jmp	#LR__1491
12ed8     1E 20 0E F2 | 	cmp	local02, #30 wz
12edc     3C 00 90 AD |  if_e	jmp	#LR__1492
12ee0     1F 20 0E F2 | 	cmp	local02, #31 wz
12ee4     3C 00 90 AD |  if_e	jmp	#LR__1493
12ee8     2B 20 0E F2 | 	cmp	local02, #43 wz
12eec     40 00 90 AD |  if_e	jmp	#LR__1494
12ef0     50 00 90 FD | 	jmp	#LR__1495
12ef4                 | LR__1490
12ef4     0F 13 02 FB | 	rdlong	arg01, local01
12ef8     09 13 52 F6 | 	abs	arg01, arg01 wc
12efc     1F 22 C6 C9 |  if_b	decod	local03, #31
12f00     00 22 06 36 |  if_ae	mov	local03, #0
12f04     BC CC B0 FD | 	call	#__system___float_fromuns
12f08     11 FB 61 F5 | 	xor	result1, local03
12f0c     38 00 90 FD | 	jmp	#LR__1496
12f10                 | LR__1491
12f10     0F 13 02 FB | 	rdlong	arg01, local01
12f14     AC CC B0 FD | 	call	#__system___float_fromuns
12f18     2C 00 90 FD | 	jmp	#LR__1496
12f1c                 | LR__1492
12f1c     0F FB 01 FB | 	rdlong	result1, local01
12f20     24 00 90 FD | 	jmp	#LR__1496
12f24                 | LR__1493
12f24     0F 13 02 FB | 	rdlong	arg01, local01
12f28     84 D8 B0 FD | 	call	#__system____builtin_atof
12f2c     18 00 90 FD | 	jmp	#LR__1496
12f30                 | LR__1494
12f30     0F 13 02 FB | 	rdlong	arg01, local01
12f34     1C B5 BF FD | 	call	#_convertstring
12f38     FD 12 02 F6 | 	mov	arg01, result1
12f3c     70 D8 B0 FD | 	call	#__system____builtin_atof
12f40     04 00 90 FD | 	jmp	#LR__1496
12f44                 | LR__1495
12f44     00 FA 05 F6 | 	mov	result1, #0
12f48                 | LR__1496
12f48     A7 F0 03 F6 | 	mov	ptra, fp
12f4c     B2 00 A0 FD | 	call	#popregs_
12f50                 | _converttofloat_ret
12f50     2D 00 64 FD | 	ret
12f54                 | 
12f54                 | ' 
12f54                 | ' sub do_rnd
12f54                 | _do_rnd
12f54     01 4A 05 F6 | 	mov	COUNT_, #1
12f58     A8 00 A0 FD | 	call	#pushregs_
12f5c     10 F0 07 F1 | 	add	ptra, #16
12f60     6A 00 00 FF 
12f64     70 E4 05 F1 | 	add	objptr, ##54384
12f68     F2 1E 02 FB | 	rdlong	local01, objptr
12f6c     0F 17 02 F6 | 	mov	arg03, local01
12f70     01 16 66 F0 | 	shl	arg03, #1
12f74     0F 17 02 F1 | 	add	arg03, local01
12f78     02 16 66 F0 | 	shl	arg03, #2
12f7c     03 00 00 FF 
12f80     04 E4 85 F1 | 	sub	objptr, ##1540
12f84     F2 16 02 F1 | 	add	arg03, objptr
12f88     0B 17 02 FB | 	rdlong	arg03, arg03
12f8c     0C 4E 05 F1 | 	add	fp, #12
12f90     A7 16 62 FC | 	wrlong	arg03, fp
12f94                 | ' 
12f94                 | ' numpar=compiledline(lineptr_e).result.uresult
12f94                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
12f94     0C 4E 85 F1 | 	sub	fp, #12
12f98     02 16 16 F2 | 	cmp	arg03, #2 wc
12f9c     67 00 00 FF 
12fa0     6C E4 85 F1 | 	sub	objptr, ##52844
12fa4     3C 00 90 CD |  if_b	jmp	#LR__1500
12fa8     00 12 06 F6 | 	mov	arg01, #0
12fac     2C FE B0 FD | 	call	#__system___getiolock_0473
12fb0     FD 12 02 F6 | 	mov	arg01, result1
12fb4     94 A4 B0 FD | 	call	#__system___lockmem
12fb8     68 01 00 FF 
12fbc     67 14 06 F6 | 	mov	arg02, ##@LR__4983
12fc0     00 12 06 F6 | 	mov	arg01, #0
12fc4     00 16 06 F6 | 	mov	arg03, #0
12fc8     84 B1 B0 FD | 	call	#__system___basic_print_string
12fcc     00 12 06 F6 | 	mov	arg01, #0
12fd0     08 FE B0 FD | 	call	#__system___getiolock_0473
12fd4     FD 00 68 FC | 	wrlong	#0, result1
12fd8     27 12 06 F6 | 	mov	arg01, #39
12fdc     2C 60 B0 FD | 	call	#_printerror
12fe0     2C 01 90 FD | 	jmp	#LR__1507
12fe4                 | LR__1500
12fe4                 | ' if numpar=0 then
12fe4     0C 4E 05 F1 | 	add	fp, #12
12fe8     A7 FE 09 FB | 	rdlong	result3, fp wz
12fec     0C 4E 85 F1 | 	sub	fp, #12
12ff0     20 00 90 5D |  if_ne	jmp	#LR__1501
12ff4     08 4E 05 F1 | 	add	fp, #8
12ff8     A7 3A 68 FC | 	wrlong	#29, fp
12ffc     08 4E 85 F1 | 	sub	fp, #8
13000     1B FA 61 FD | 	getrnd	result1
13004     A7 FA 61 FC | 	wrlong	result1, fp
13008     A7 12 02 F6 | 	mov	arg01, fp
1300c     34 72 BF FD | 	call	#_push
13010     FC 00 90 FD | 	jmp	#LR__1506
13014                 | LR__1501
13014     94 71 BF FD | 	call	#_pop
13018     A7 FA 61 FC | 	wrlong	result1, fp
1301c     04 4E 05 F1 | 	add	fp, #4
13020     A7 FC 61 FC | 	wrlong	result2, fp
13024     04 4E 05 F1 | 	add	fp, #4
13028     A7 FE 61 FC | 	wrlong	result3, fp
1302c                 | '   t1=pop()
1302c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1302c     08 4E 85 F1 | 	sub	fp, #8
13030     1C FE 0D F2 | 	cmp	result3, #28 wz
13034     08 4E 05 51 |  if_ne	add	fp, #8
13038     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1303c     08 4E 85 51 |  if_ne	sub	fp, #8
13040     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13044     2C 00 90 5D |  if_ne	jmp	#LR__1502
13048     1B FA 61 FD | 	getrnd	result1
1304c     A7 1E 02 FB | 	rdlong	local01, fp
13050     0F FB 11 FD | 	qdiv	result1, local01
13054     A7 12 02 F6 | 	mov	arg01, fp
13058     19 1E 62 FD | 	getqy	local01
1305c     A7 1E 62 FC | 	wrlong	local01, fp
13060     08 4E 05 F1 | 	add	fp, #8
13064     A7 3A 68 FC | 	wrlong	#29, fp
13068     08 4E 85 F1 | 	sub	fp, #8
1306c     D4 71 BF FD | 	call	#_push
13070     9C 00 90 FD | 	jmp	#LR__1505
13074                 | LR__1502
13074     08 4E 05 F1 | 	add	fp, #8
13078     A7 1E 02 FB | 	rdlong	local01, fp
1307c     08 4E 85 F1 | 	sub	fp, #8
13080     1E 1E 0E F2 | 	cmp	local01, #30 wz
13084     48 00 90 5D |  if_ne	jmp	#LR__1503
13088     A7 12 02 FB | 	rdlong	arg01, fp
1308c     00 C0 24 FF 
13090     00 14 06 F6 | 	mov	arg02, ##1233125376
13094     34 D1 B0 FD | 	call	#__system___float_div
13098     FD 1E 02 F6 | 	mov	local01, result1
1309c     1B 12 62 FD | 	getrnd	arg01
130a0     74 13 06 F4 | 	bitl	arg01, #372
130a4     1C CB B0 FD | 	call	#__system___float_fromuns
130a8     FD 14 02 F6 | 	mov	arg02, result1
130ac     0F 13 02 F6 | 	mov	arg01, local01
130b0     14 CF B0 FD | 	call	#__system___float_mul
130b4     A7 FA 61 FC | 	wrlong	result1, fp
130b8     08 4E 05 F1 | 	add	fp, #8
130bc     A7 3C 68 FC | 	wrlong	#30, fp
130c0     08 4E 85 F1 | 	sub	fp, #8
130c4     A7 12 02 F6 | 	mov	arg01, fp
130c8     78 71 BF FD | 	call	#_push
130cc     40 00 90 FD | 	jmp	#LR__1504
130d0                 | LR__1503
130d0                 | '     print "rnd: "; : printerror(40) 
130d0     00 12 06 F6 | 	mov	arg01, #0
130d4     04 FD B0 FD | 	call	#__system___getiolock_0473
130d8     FD 12 02 F6 | 	mov	arg01, result1
130dc     6C A3 B0 FD | 	call	#__system___lockmem
130e0     68 01 00 FF 
130e4     6D 14 06 F6 | 	mov	arg02, ##@LR__4984
130e8     00 12 06 F6 | 	mov	arg01, #0
130ec     00 16 06 F6 | 	mov	arg03, #0
130f0     5C B0 B0 FD | 	call	#__system___basic_print_string
130f4     00 12 06 F6 | 	mov	arg01, #0
130f8     E0 FC B0 FD | 	call	#__system___getiolock_0473
130fc     FD 00 68 FC | 	wrlong	#0, result1
13100     28 12 06 F6 | 	mov	arg01, #40
13104     04 5F B0 FD | 	call	#_printerror
13108     A7 12 02 F6 | 	mov	arg01, fp
1310c     34 71 BF FD | 	call	#_push
13110                 | LR__1504
13110                 | LR__1505
13110                 | LR__1506
13110                 | LR__1507
13110     A7 F0 03 F6 | 	mov	ptra, fp
13114     B2 00 A0 FD | 	call	#popregs_
13118                 | _do_rnd_ret
13118     2D 00 64 FD | 	ret
1311c                 | 
1311c                 | ' 
1311c                 | ' sub do_getenvsustain
1311c                 | _do_getenvsustain
1311c     01 4A 05 F6 | 	mov	COUNT_, #1
13120     A8 00 A0 FD | 	call	#pushregs_
13124     10 F0 07 F1 | 	add	ptra, #16
13128     6A 00 00 FF 
1312c     70 E4 05 F1 | 	add	objptr, ##54384
13130     F2 1E 02 FB | 	rdlong	local01, objptr
13134     0F 17 02 F6 | 	mov	arg03, local01
13138     01 16 66 F0 | 	shl	arg03, #1
1313c     0F 17 02 F1 | 	add	arg03, local01
13140     02 16 66 F0 | 	shl	arg03, #2
13144     03 00 00 FF 
13148     04 E4 85 F1 | 	sub	objptr, ##1540
1314c     F2 16 02 F1 | 	add	arg03, objptr
13150     0B 17 02 FB | 	rdlong	arg03, arg03
13154     0C 4E 05 F1 | 	add	fp, #12
13158     A7 16 62 FC | 	wrlong	arg03, fp
1315c                 | ' 
1315c                 | ' numpar=compiledline(lineptr_e).result.uresult
1315c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1315c     0C 4E 85 F1 | 	sub	fp, #12
13160     02 16 16 F2 | 	cmp	arg03, #2 wc
13164     67 00 00 FF 
13168     6C E4 85 F1 | 	sub	objptr, ##52844
1316c     0C 4E 05 C1 |  if_b	add	fp, #12
13170     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13174     0C 4E 85 C1 |  if_b	sub	fp, #12
13178     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
1317c     00 12 06 F6 | 	mov	arg01, #0
13180     58 FC B0 FD | 	call	#__system___getiolock_0473
13184     FD 12 02 F6 | 	mov	arg01, result1
13188     C0 A2 B0 FD | 	call	#__system___lockmem
1318c     68 01 00 FF 
13190     73 14 06 F6 | 	mov	arg02, ##@LR__4985
13194     00 12 06 F6 | 	mov	arg01, #0
13198     00 16 06 F6 | 	mov	arg03, #0
1319c     B0 AF B0 FD | 	call	#__system___basic_print_string
131a0     00 12 06 F6 | 	mov	arg01, #0
131a4     34 FC B0 FD | 	call	#__system___getiolock_0473
131a8     FD 00 68 FC | 	wrlong	#0, result1
131ac     27 12 06 F6 | 	mov	arg01, #39
131b0     58 5E B0 FD | 	call	#_printerror
131b4     64 00 90 FD | 	jmp	#LR__1511
131b8                 | LR__1510
131b8     F0 6F BF FD | 	call	#_pop
131bc     FD 1E 02 F6 | 	mov	local01, result1
131c0     FE 16 02 F6 | 	mov	arg03, result2
131c4     A7 1E 62 FC | 	wrlong	local01, fp
131c8     04 4E 05 F1 | 	add	fp, #4
131cc     A7 16 62 FC | 	wrlong	arg03, fp
131d0     04 4E 05 F1 | 	add	fp, #4
131d4     A7 FE 61 FC | 	wrlong	result3, fp
131d8     08 4E 85 F1 | 	sub	fp, #8
131dc     A7 12 02 F6 | 	mov	arg01, fp
131e0     20 FC BF FD | 	call	#_converttoint
131e4     FD 1E 02 F6 | 	mov	local01, result1
131e8     01 1E 66 F0 | 	shl	local01, #1
131ec     7B 00 00 FF 
131f0     84 E4 05 F1 | 	add	objptr, ##63108
131f4     F2 1E 02 F1 | 	add	local01, objptr
131f8     0F 1F E2 FA | 	rdword	local01, local01
131fc     A7 1E 62 FC | 	wrlong	local01, fp
13200     08 4E 05 F1 | 	add	fp, #8
13204     A7 38 68 FC | 	wrlong	#28, fp
13208     08 4E 85 F1 | 	sub	fp, #8
1320c     A7 12 02 F6 | 	mov	arg01, fp
13210     7B 00 00 FF 
13214     84 E4 85 F1 | 	sub	objptr, ##63108
13218     28 70 BF FD | 	call	#_push
1321c                 | LR__1511
1321c     A7 F0 03 F6 | 	mov	ptra, fp
13220     B2 00 A0 FD | 	call	#popregs_
13224                 | _do_getenvsustain_ret
13224     2D 00 64 FD | 	ret
13228                 | 
13228                 | ' 
13228                 | ' sub do_sin
13228                 | _do_sin
13228     01 4A 05 F6 | 	mov	COUNT_, #1
1322c     A8 00 A0 FD | 	call	#pushregs_
13230     10 F0 07 F1 | 	add	ptra, #16
13234     6A 00 00 FF 
13238     70 E4 05 F1 | 	add	objptr, ##54384
1323c     F2 1E 02 FB | 	rdlong	local01, objptr
13240     0F 17 02 F6 | 	mov	arg03, local01
13244     01 16 66 F0 | 	shl	arg03, #1
13248     0F 17 02 F1 | 	add	arg03, local01
1324c     02 16 66 F0 | 	shl	arg03, #2
13250     03 00 00 FF 
13254     04 E4 85 F1 | 	sub	objptr, ##1540
13258     F2 16 02 F1 | 	add	arg03, objptr
1325c     0B 17 02 FB | 	rdlong	arg03, arg03
13260     0C 4E 05 F1 | 	add	fp, #12
13264     A7 16 62 FC | 	wrlong	arg03, fp
13268                 | ' 
13268                 | ' numpar=compiledline(lineptr_e).result.uresult
13268                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
13268     0C 4E 85 F1 | 	sub	fp, #12
1326c     02 16 16 F2 | 	cmp	arg03, #2 wc
13270     67 00 00 FF 
13274     6C E4 85 F1 | 	sub	objptr, ##52844
13278     0C 4E 05 C1 |  if_b	add	fp, #12
1327c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13280     0C 4E 85 C1 |  if_b	sub	fp, #12
13284     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
13288     00 12 06 F6 | 	mov	arg01, #0
1328c     4C FB B0 FD | 	call	#__system___getiolock_0473
13290     FD 12 02 F6 | 	mov	arg01, result1
13294     B4 A1 B0 FD | 	call	#__system___lockmem
13298     68 01 00 FF 
1329c     83 14 06 F6 | 	mov	arg02, ##@LR__4986
132a0     00 12 06 F6 | 	mov	arg01, #0
132a4     00 16 06 F6 | 	mov	arg03, #0
132a8     A4 AE B0 FD | 	call	#__system___basic_print_string
132ac     00 12 06 F6 | 	mov	arg01, #0
132b0     28 FB B0 FD | 	call	#__system___getiolock_0473
132b4     FD 00 68 FC | 	wrlong	#0, result1
132b8     27 12 06 F6 | 	mov	arg01, #39
132bc     4C 5D B0 FD | 	call	#_printerror
132c0     64 00 90 FD | 	jmp	#LR__1521
132c4                 | LR__1520
132c4     E4 6E BF FD | 	call	#_pop
132c8     A7 FA 61 FC | 	wrlong	result1, fp
132cc     04 4E 05 F1 | 	add	fp, #4
132d0     A7 FC 61 FC | 	wrlong	result2, fp
132d4     04 4E 05 F1 | 	add	fp, #4
132d8     A7 FE 61 FC | 	wrlong	result3, fp
132dc     08 4E 85 F1 | 	sub	fp, #8
132e0     7B 00 00 FF 
132e4     78 E4 05 F1 | 	add	objptr, ##63096
132e8     F2 1E 02 FB | 	rdlong	local01, objptr
132ec     7B 00 00 FF 
132f0     78 E4 85 F1 | 	sub	objptr, ##63096
132f4     A7 12 02 F6 | 	mov	arg01, fp
132f8     B4 FB BF FD | 	call	#_converttofloat
132fc     FD 14 02 F6 | 	mov	arg02, result1
13300     0F 13 02 F6 | 	mov	arg01, local01
13304     C0 CC B0 FD | 	call	#__system___float_mul
13308     FD 12 02 F6 | 	mov	arg01, result1
1330c     F4 D5 B0 FD | 	call	#__system____builtin_sinf
13310     A7 FA 61 FC | 	wrlong	result1, fp
13314     08 4E 05 F1 | 	add	fp, #8
13318     A7 3C 68 FC | 	wrlong	#30, fp
1331c     08 4E 85 F1 | 	sub	fp, #8
13320     A7 12 02 F6 | 	mov	arg01, fp
13324     1C 6F BF FD | 	call	#_push
13328                 | LR__1521
13328     A7 F0 03 F6 | 	mov	ptra, fp
1332c     B2 00 A0 FD | 	call	#popregs_
13330                 | _do_sin_ret
13330     2D 00 64 FD | 	ret
13334                 | 
13334                 | ' 
13334                 | ' sub do_cos
13334                 | _do_cos
13334     01 4A 05 F6 | 	mov	COUNT_, #1
13338     A8 00 A0 FD | 	call	#pushregs_
1333c     10 F0 07 F1 | 	add	ptra, #16
13340     6A 00 00 FF 
13344     70 E4 05 F1 | 	add	objptr, ##54384
13348     F2 1E 02 FB | 	rdlong	local01, objptr
1334c     0F 17 02 F6 | 	mov	arg03, local01
13350     01 16 66 F0 | 	shl	arg03, #1
13354     0F 17 02 F1 | 	add	arg03, local01
13358     02 16 66 F0 | 	shl	arg03, #2
1335c     03 00 00 FF 
13360     04 E4 85 F1 | 	sub	objptr, ##1540
13364     F2 16 02 F1 | 	add	arg03, objptr
13368     0B 17 02 FB | 	rdlong	arg03, arg03
1336c     0C 4E 05 F1 | 	add	fp, #12
13370     A7 16 62 FC | 	wrlong	arg03, fp
13374                 | ' 
13374                 | ' numpar=compiledline(lineptr_e).result.uresult
13374                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
13374     0C 4E 85 F1 | 	sub	fp, #12
13378     02 16 16 F2 | 	cmp	arg03, #2 wc
1337c     67 00 00 FF 
13380     6C E4 85 F1 | 	sub	objptr, ##52844
13384     0C 4E 05 C1 |  if_b	add	fp, #12
13388     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1338c     0C 4E 85 C1 |  if_b	sub	fp, #12
13390     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
13394     00 12 06 F6 | 	mov	arg01, #0
13398     40 FA B0 FD | 	call	#__system___getiolock_0473
1339c     FD 12 02 F6 | 	mov	arg01, result1
133a0     A8 A0 B0 FD | 	call	#__system___lockmem
133a4     68 01 00 FF 
133a8     89 14 06 F6 | 	mov	arg02, ##@LR__4987
133ac     00 12 06 F6 | 	mov	arg01, #0
133b0     00 16 06 F6 | 	mov	arg03, #0
133b4     98 AD B0 FD | 	call	#__system___basic_print_string
133b8     00 12 06 F6 | 	mov	arg01, #0
133bc     1C FA B0 FD | 	call	#__system___getiolock_0473
133c0     FD 00 68 FC | 	wrlong	#0, result1
133c4     27 12 06 F6 | 	mov	arg01, #39
133c8     40 5C B0 FD | 	call	#_printerror
133cc     78 00 90 FD | 	jmp	#LR__1531
133d0                 | LR__1530
133d0     D8 6D BF FD | 	call	#_pop
133d4     A7 FA 61 FC | 	wrlong	result1, fp
133d8     04 4E 05 F1 | 	add	fp, #4
133dc     A7 FC 61 FC | 	wrlong	result2, fp
133e0     04 4E 05 F1 | 	add	fp, #4
133e4     A7 FE 61 FC | 	wrlong	result3, fp
133e8     08 4E 85 F1 | 	sub	fp, #8
133ec     7B 00 00 FF 
133f0     78 E4 05 F1 | 	add	objptr, ##63096
133f4     F2 1E 02 FB | 	rdlong	local01, objptr
133f8     7B 00 00 FF 
133fc     78 E4 85 F1 | 	sub	objptr, ##63096
13400     A7 12 02 F6 | 	mov	arg01, fp
13404     A8 FA BF FD | 	call	#_converttofloat
13408     FD 14 02 F6 | 	mov	arg02, result1
1340c     0F 13 02 F6 | 	mov	arg01, local01
13410     B4 CB B0 FD | 	call	#__system___float_mul
13414     FD 14 02 F6 | 	mov	arg02, result1
13418     87 E4 1F FF 
1341c     DB 13 06 F6 | 	mov	arg01, ##1070141403
13420     1F 14 E6 F4 | 	bitnot	arg02, #31
13424     D0 C7 B0 FD | 	call	#__system___float_add
13428     FD 12 02 F6 | 	mov	arg01, result1
1342c     D4 D4 B0 FD | 	call	#__system____builtin_sinf
13430     A7 FA 61 FC | 	wrlong	result1, fp
13434     08 4E 05 F1 | 	add	fp, #8
13438     A7 3C 68 FC | 	wrlong	#30, fp
1343c     08 4E 85 F1 | 	sub	fp, #8
13440     A7 12 02 F6 | 	mov	arg01, fp
13444     FC 6D BF FD | 	call	#_push
13448                 | LR__1531
13448     A7 F0 03 F6 | 	mov	ptra, fp
1344c     B2 00 A0 FD | 	call	#popregs_
13450                 | _do_cos_ret
13450     2D 00 64 FD | 	ret
13454                 | 
13454                 | ' 
13454                 | ' sub do_tan
13454                 | _do_tan
13454     01 4A 05 F6 | 	mov	COUNT_, #1
13458     A8 00 A0 FD | 	call	#pushregs_
1345c     10 F0 07 F1 | 	add	ptra, #16
13460     6A 00 00 FF 
13464     70 E4 05 F1 | 	add	objptr, ##54384
13468     F2 1E 02 FB | 	rdlong	local01, objptr
1346c     0F 17 02 F6 | 	mov	arg03, local01
13470     01 16 66 F0 | 	shl	arg03, #1
13474     0F 17 02 F1 | 	add	arg03, local01
13478     02 16 66 F0 | 	shl	arg03, #2
1347c     03 00 00 FF 
13480     04 E4 85 F1 | 	sub	objptr, ##1540
13484     F2 16 02 F1 | 	add	arg03, objptr
13488     0B 17 02 FB | 	rdlong	arg03, arg03
1348c     0C 4E 05 F1 | 	add	fp, #12
13490     A7 16 62 FC | 	wrlong	arg03, fp
13494                 | ' 
13494                 | ' numpar=compiledline(lineptr_e).result.uresult
13494                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
13494     0C 4E 85 F1 | 	sub	fp, #12
13498     02 16 16 F2 | 	cmp	arg03, #2 wc
1349c     67 00 00 FF 
134a0     6C E4 85 F1 | 	sub	objptr, ##52844
134a4     0C 4E 05 C1 |  if_b	add	fp, #12
134a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
134ac     0C 4E 85 C1 |  if_b	sub	fp, #12
134b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
134b4     00 12 06 F6 | 	mov	arg01, #0
134b8     20 F9 B0 FD | 	call	#__system___getiolock_0473
134bc     FD 12 02 F6 | 	mov	arg01, result1
134c0     88 9F B0 FD | 	call	#__system___lockmem
134c4     68 01 00 FF 
134c8     8F 14 06 F6 | 	mov	arg02, ##@LR__4988
134cc     00 12 06 F6 | 	mov	arg01, #0
134d0     00 16 06 F6 | 	mov	arg03, #0
134d4     78 AC B0 FD | 	call	#__system___basic_print_string
134d8     00 12 06 F6 | 	mov	arg01, #0
134dc     FC F8 B0 FD | 	call	#__system___getiolock_0473
134e0     FD 00 68 FC | 	wrlong	#0, result1
134e4     27 12 06 F6 | 	mov	arg01, #39
134e8     20 5B B0 FD | 	call	#_printerror
134ec     64 00 90 FD | 	jmp	#LR__1541
134f0                 | LR__1540
134f0     B8 6C BF FD | 	call	#_pop
134f4     A7 FA 61 FC | 	wrlong	result1, fp
134f8     04 4E 05 F1 | 	add	fp, #4
134fc     A7 FC 61 FC | 	wrlong	result2, fp
13500     04 4E 05 F1 | 	add	fp, #4
13504     A7 FE 61 FC | 	wrlong	result3, fp
13508     08 4E 85 F1 | 	sub	fp, #8
1350c     7B 00 00 FF 
13510     78 E4 05 F1 | 	add	objptr, ##63096
13514     F2 1E 02 FB | 	rdlong	local01, objptr
13518     7B 00 00 FF 
1351c     78 E4 85 F1 | 	sub	objptr, ##63096
13520     A7 12 02 F6 | 	mov	arg01, fp
13524     88 F9 BF FD | 	call	#_converttofloat
13528     FD 14 02 F6 | 	mov	arg02, result1
1352c     0F 13 02 F6 | 	mov	arg01, local01
13530     94 CA B0 FD | 	call	#__system___float_mul
13534     FD 12 02 F6 | 	mov	arg01, result1
13538     14 D5 B0 FD | 	call	#__system____builtin_tanf
1353c     A7 FA 61 FC | 	wrlong	result1, fp
13540     08 4E 05 F1 | 	add	fp, #8
13544     A7 3C 68 FC | 	wrlong	#30, fp
13548     08 4E 85 F1 | 	sub	fp, #8
1354c     A7 12 02 F6 | 	mov	arg01, fp
13550     F0 6C BF FD | 	call	#_push
13554                 | LR__1541
13554     A7 F0 03 F6 | 	mov	ptra, fp
13558     B2 00 A0 FD | 	call	#popregs_
1355c                 | _do_tan_ret
1355c     2D 00 64 FD | 	ret
13560                 | 
13560                 | ' 
13560                 | ' sub do_asin
13560                 | _do_asin
13560     01 4A 05 F6 | 	mov	COUNT_, #1
13564     A8 00 A0 FD | 	call	#pushregs_
13568     10 F0 07 F1 | 	add	ptra, #16
1356c     6A 00 00 FF 
13570     70 E4 05 F1 | 	add	objptr, ##54384
13574     F2 1E 02 FB | 	rdlong	local01, objptr
13578     0F 17 02 F6 | 	mov	arg03, local01
1357c     01 16 66 F0 | 	shl	arg03, #1
13580     0F 17 02 F1 | 	add	arg03, local01
13584     02 16 66 F0 | 	shl	arg03, #2
13588     03 00 00 FF 
1358c     04 E4 85 F1 | 	sub	objptr, ##1540
13590     F2 16 02 F1 | 	add	arg03, objptr
13594     0B 17 02 FB | 	rdlong	arg03, arg03
13598     0C 4E 05 F1 | 	add	fp, #12
1359c     A7 16 62 FC | 	wrlong	arg03, fp
135a0                 | ' 
135a0                 | ' numpar=compiledline(lineptr_e).result.uresult
135a0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
135a0     0C 4E 85 F1 | 	sub	fp, #12
135a4     02 16 16 F2 | 	cmp	arg03, #2 wc
135a8     67 00 00 FF 
135ac     6C E4 85 F1 | 	sub	objptr, ##52844
135b0     0C 4E 05 C1 |  if_b	add	fp, #12
135b4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
135b8     0C 4E 85 C1 |  if_b	sub	fp, #12
135bc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1550
135c0     00 12 06 F6 | 	mov	arg01, #0
135c4     14 F8 B0 FD | 	call	#__system___getiolock_0473
135c8     FD 12 02 F6 | 	mov	arg01, result1
135cc     7C 9E B0 FD | 	call	#__system___lockmem
135d0     68 01 00 FF 
135d4     95 14 06 F6 | 	mov	arg02, ##@LR__4989
135d8     00 12 06 F6 | 	mov	arg01, #0
135dc     00 16 06 F6 | 	mov	arg03, #0
135e0     6C AB B0 FD | 	call	#__system___basic_print_string
135e4     00 12 06 F6 | 	mov	arg01, #0
135e8     F0 F7 B0 FD | 	call	#__system___getiolock_0473
135ec     FD 00 68 FC | 	wrlong	#0, result1
135f0     27 12 06 F6 | 	mov	arg01, #39
135f4     14 5A B0 FD | 	call	#_printerror
135f8     64 00 90 FD | 	jmp	#LR__1551
135fc                 | LR__1550
135fc     AC 6B BF FD | 	call	#_pop
13600     FF 1E 02 F6 | 	mov	local01, result3
13604     A7 FA 61 FC | 	wrlong	result1, fp
13608     04 4E 05 F1 | 	add	fp, #4
1360c     A7 FC 61 FC | 	wrlong	result2, fp
13610     04 4E 05 F1 | 	add	fp, #4
13614     A7 1E 62 FC | 	wrlong	local01, fp
13618     08 4E 85 F1 | 	sub	fp, #8
1361c     A7 12 02 F6 | 	mov	arg01, fp
13620     8C F8 BF FD | 	call	#_converttofloat
13624     FD 12 02 F6 | 	mov	arg01, result1
13628     6C D4 B0 FD | 	call	#__system____builtin_asinf
1362c     FD 12 02 F6 | 	mov	arg01, result1
13630     7B 00 00 FF 
13634     7C E4 05 F1 | 	add	objptr, ##63100
13638     F2 14 02 FB | 	rdlong	arg02, objptr
1363c     7B 00 00 FF 
13640     7C E4 85 F1 | 	sub	objptr, ##63100
13644     80 C9 B0 FD | 	call	#__system___float_mul
13648     A7 FA 61 FC | 	wrlong	result1, fp
1364c     08 4E 05 F1 | 	add	fp, #8
13650     A7 3C 68 FC | 	wrlong	#30, fp
13654     08 4E 85 F1 | 	sub	fp, #8
13658     A7 12 02 F6 | 	mov	arg01, fp
1365c     E4 6B BF FD | 	call	#_push
13660                 | LR__1551
13660     A7 F0 03 F6 | 	mov	ptra, fp
13664     B2 00 A0 FD | 	call	#popregs_
13668                 | _do_asin_ret
13668     2D 00 64 FD | 	ret
1366c                 | 
1366c                 | ' 
1366c                 | ' sub do_acos
1366c                 | _do_acos
1366c     01 4A 05 F6 | 	mov	COUNT_, #1
13670     A8 00 A0 FD | 	call	#pushregs_
13674     10 F0 07 F1 | 	add	ptra, #16
13678     6A 00 00 FF 
1367c     70 E4 05 F1 | 	add	objptr, ##54384
13680     F2 1E 02 FB | 	rdlong	local01, objptr
13684     0F 17 02 F6 | 	mov	arg03, local01
13688     01 16 66 F0 | 	shl	arg03, #1
1368c     0F 17 02 F1 | 	add	arg03, local01
13690     02 16 66 F0 | 	shl	arg03, #2
13694     03 00 00 FF 
13698     04 E4 85 F1 | 	sub	objptr, ##1540
1369c     F2 16 02 F1 | 	add	arg03, objptr
136a0     0B 17 02 FB | 	rdlong	arg03, arg03
136a4     0C 4E 05 F1 | 	add	fp, #12
136a8     A7 16 62 FC | 	wrlong	arg03, fp
136ac                 | ' 
136ac                 | ' numpar=compiledline(lineptr_e).result.uresult
136ac                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
136ac     0C 4E 85 F1 | 	sub	fp, #12
136b0     02 16 16 F2 | 	cmp	arg03, #2 wc
136b4     67 00 00 FF 
136b8     6C E4 85 F1 | 	sub	objptr, ##52844
136bc     0C 4E 05 C1 |  if_b	add	fp, #12
136c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
136c4     0C 4E 85 C1 |  if_b	sub	fp, #12
136c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
136cc     00 12 06 F6 | 	mov	arg01, #0
136d0     08 F7 B0 FD | 	call	#__system___getiolock_0473
136d4     FD 12 02 F6 | 	mov	arg01, result1
136d8     70 9D B0 FD | 	call	#__system___lockmem
136dc     68 01 00 FF 
136e0     9C 14 06 F6 | 	mov	arg02, ##@LR__4990
136e4     00 12 06 F6 | 	mov	arg01, #0
136e8     00 16 06 F6 | 	mov	arg03, #0
136ec     60 AA B0 FD | 	call	#__system___basic_print_string
136f0     00 12 06 F6 | 	mov	arg01, #0
136f4     E4 F6 B0 FD | 	call	#__system___getiolock_0473
136f8     FD 00 68 FC | 	wrlong	#0, result1
136fc     27 12 06 F6 | 	mov	arg01, #39
13700     08 59 B0 FD | 	call	#_printerror
13704     64 00 90 FD | 	jmp	#LR__1561
13708                 | LR__1560
13708     A0 6A BF FD | 	call	#_pop
1370c     FF 1E 02 F6 | 	mov	local01, result3
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714     04 4E 05 F1 | 	add	fp, #4
13718     A7 FC 61 FC | 	wrlong	result2, fp
1371c     04 4E 05 F1 | 	add	fp, #4
13720     A7 1E 62 FC | 	wrlong	local01, fp
13724     08 4E 85 F1 | 	sub	fp, #8
13728     A7 12 02 F6 | 	mov	arg01, fp
1372c     80 F7 BF FD | 	call	#_converttofloat
13730     FD 12 02 F6 | 	mov	arg01, result1
13734     AC D3 B0 FD | 	call	#__system____builtin_acosf
13738     FD 12 02 F6 | 	mov	arg01, result1
1373c     7B 00 00 FF 
13740     7C E4 05 F1 | 	add	objptr, ##63100
13744     F2 14 02 FB | 	rdlong	arg02, objptr
13748     7B 00 00 FF 
1374c     7C E4 85 F1 | 	sub	objptr, ##63100
13750     74 C8 B0 FD | 	call	#__system___float_mul
13754     A7 FA 61 FC | 	wrlong	result1, fp
13758     08 4E 05 F1 | 	add	fp, #8
1375c     A7 3C 68 FC | 	wrlong	#30, fp
13760     08 4E 85 F1 | 	sub	fp, #8
13764     A7 12 02 F6 | 	mov	arg01, fp
13768     D8 6A BF FD | 	call	#_push
1376c                 | LR__1561
1376c     A7 F0 03 F6 | 	mov	ptra, fp
13770     B2 00 A0 FD | 	call	#popregs_
13774                 | _do_acos_ret
13774     2D 00 64 FD | 	ret
13778                 | 
13778                 | ' 
13778                 | ' sub do_atn
13778                 | _do_atn
13778     01 4A 05 F6 | 	mov	COUNT_, #1
1377c     A8 00 A0 FD | 	call	#pushregs_
13780     10 F0 07 F1 | 	add	ptra, #16
13784     6A 00 00 FF 
13788     70 E4 05 F1 | 	add	objptr, ##54384
1378c     F2 1E 02 FB | 	rdlong	local01, objptr
13790     0F 17 02 F6 | 	mov	arg03, local01
13794     01 16 66 F0 | 	shl	arg03, #1
13798     0F 17 02 F1 | 	add	arg03, local01
1379c     02 16 66 F0 | 	shl	arg03, #2
137a0     03 00 00 FF 
137a4     04 E4 85 F1 | 	sub	objptr, ##1540
137a8     F2 16 02 F1 | 	add	arg03, objptr
137ac     0B 17 02 FB | 	rdlong	arg03, arg03
137b0     0C 4E 05 F1 | 	add	fp, #12
137b4     A7 16 62 FC | 	wrlong	arg03, fp
137b8                 | ' 
137b8                 | ' numpar=compiledline(lineptr_e).result.uresult
137b8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
137b8     0C 4E 85 F1 | 	sub	fp, #12
137bc     02 16 16 F2 | 	cmp	arg03, #2 wc
137c0     67 00 00 FF 
137c4     6C E4 85 F1 | 	sub	objptr, ##52844
137c8     0C 4E 05 C1 |  if_b	add	fp, #12
137cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
137d0     0C 4E 85 C1 |  if_b	sub	fp, #12
137d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     FC F5 B0 FD | 	call	#__system___getiolock_0473
137e0     FD 12 02 F6 | 	mov	arg01, result1
137e4     64 9C B0 FD | 	call	#__system___lockmem
137e8     68 01 00 FF 
137ec     A3 14 06 F6 | 	mov	arg02, ##@LR__4991
137f0     00 12 06 F6 | 	mov	arg01, #0
137f4     00 16 06 F6 | 	mov	arg03, #0
137f8     54 A9 B0 FD | 	call	#__system___basic_print_string
137fc     00 12 06 F6 | 	mov	arg01, #0
13800     D8 F5 B0 FD | 	call	#__system___getiolock_0473
13804     FD 00 68 FC | 	wrlong	#0, result1
13808     27 12 06 F6 | 	mov	arg01, #39
1380c     FC 57 B0 FD | 	call	#_printerror
13810     6C 00 90 FD | 	jmp	#LR__1571
13814                 | LR__1570
13814     94 69 BF FD | 	call	#_pop
13818     FF 1E 02 F6 | 	mov	local01, result3
1381c     A7 FA 61 FC | 	wrlong	result1, fp
13820     04 4E 05 F1 | 	add	fp, #4
13824     A7 FC 61 FC | 	wrlong	result2, fp
13828     04 4E 05 F1 | 	add	fp, #4
1382c     A7 1E 62 FC | 	wrlong	local01, fp
13830     08 4E 85 F1 | 	sub	fp, #8
13834     A7 12 02 F6 | 	mov	arg01, fp
13838     74 F6 BF FD | 	call	#_converttofloat
1383c     FD 12 02 F6 | 	mov	arg01, result1
13840     00 C0 1F FF 
13844     00 14 06 F6 | 	mov	arg02, ##1065353216
13848     E4 D2 B0 FD | 	call	#__system____builtin_atan2f
1384c     FD 12 02 F6 | 	mov	arg01, result1
13850     7B 00 00 FF 
13854     7C E4 05 F1 | 	add	objptr, ##63100
13858     F2 14 02 FB | 	rdlong	arg02, objptr
1385c     7B 00 00 FF 
13860     7C E4 85 F1 | 	sub	objptr, ##63100
13864     60 C7 B0 FD | 	call	#__system___float_mul
13868     A7 FA 61 FC | 	wrlong	result1, fp
1386c     08 4E 05 F1 | 	add	fp, #8
13870     A7 3C 68 FC | 	wrlong	#30, fp
13874     08 4E 85 F1 | 	sub	fp, #8
13878     A7 12 02 F6 | 	mov	arg01, fp
1387c     C4 69 BF FD | 	call	#_push
13880                 | LR__1571
13880     A7 F0 03 F6 | 	mov	ptra, fp
13884     B2 00 A0 FD | 	call	#popregs_
13888                 | _do_atn_ret
13888     2D 00 64 FD | 	ret
1388c                 | 
1388c                 | ' 
1388c                 | ' sub do_sqr
1388c                 | _do_sqr
1388c     01 4A 05 F6 | 	mov	COUNT_, #1
13890     A8 00 A0 FD | 	call	#pushregs_
13894     10 F0 07 F1 | 	add	ptra, #16
13898     6A 00 00 FF 
1389c     70 E4 05 F1 | 	add	objptr, ##54384
138a0     F2 1E 02 FB | 	rdlong	local01, objptr
138a4     0F 17 02 F6 | 	mov	arg03, local01
138a8     01 16 66 F0 | 	shl	arg03, #1
138ac     0F 17 02 F1 | 	add	arg03, local01
138b0     02 16 66 F0 | 	shl	arg03, #2
138b4     03 00 00 FF 
138b8     04 E4 85 F1 | 	sub	objptr, ##1540
138bc     F2 16 02 F1 | 	add	arg03, objptr
138c0     0B 17 02 FB | 	rdlong	arg03, arg03
138c4     0C 4E 05 F1 | 	add	fp, #12
138c8     A7 16 62 FC | 	wrlong	arg03, fp
138cc                 | ' 
138cc                 | ' numpar=compiledline(lineptr_e).result.uresult
138cc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
138cc     0C 4E 85 F1 | 	sub	fp, #12
138d0     02 16 16 F2 | 	cmp	arg03, #2 wc
138d4     67 00 00 FF 
138d8     6C E4 85 F1 | 	sub	objptr, ##52844
138dc     0C 4E 05 C1 |  if_b	add	fp, #12
138e0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
138e4     0C 4E 85 C1 |  if_b	sub	fp, #12
138e8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1580
138ec     00 12 06 F6 | 	mov	arg01, #0
138f0     E8 F4 B0 FD | 	call	#__system___getiolock_0473
138f4     FD 12 02 F6 | 	mov	arg01, result1
138f8     50 9B B0 FD | 	call	#__system___lockmem
138fc     68 01 00 FF 
13900     A9 14 06 F6 | 	mov	arg02, ##@LR__4992
13904     00 12 06 F6 | 	mov	arg01, #0
13908     00 16 06 F6 | 	mov	arg03, #0
1390c     40 A8 B0 FD | 	call	#__system___basic_print_string
13910     00 12 06 F6 | 	mov	arg01, #0
13914     C4 F4 B0 FD | 	call	#__system___getiolock_0473
13918     FD 00 68 FC | 	wrlong	#0, result1
1391c     27 12 06 F6 | 	mov	arg01, #39
13920     E8 56 B0 FD | 	call	#_printerror
13924     48 00 90 FD | 	jmp	#LR__1581
13928                 | LR__1580
13928     80 68 BF FD | 	call	#_pop
1392c     FF 1E 02 F6 | 	mov	local01, result3
13930     A7 FA 61 FC | 	wrlong	result1, fp
13934     04 4E 05 F1 | 	add	fp, #4
13938     A7 FC 61 FC | 	wrlong	result2, fp
1393c     04 4E 05 F1 | 	add	fp, #4
13940     A7 1E 62 FC | 	wrlong	local01, fp
13944     08 4E 85 F1 | 	sub	fp, #8
13948     A7 12 02 F6 | 	mov	arg01, fp
1394c     60 F5 BF FD | 	call	#_converttofloat
13950     FD 12 02 F6 | 	mov	arg01, result1
13954     98 C5 B0 FD | 	call	#__system___float_sqrt
13958     A7 FA 61 FC | 	wrlong	result1, fp
1395c     08 4E 05 F1 | 	add	fp, #8
13960     A7 3C 68 FC | 	wrlong	#30, fp
13964     08 4E 85 F1 | 	sub	fp, #8
13968     A7 12 02 F6 | 	mov	arg01, fp
1396c     D4 68 BF FD | 	call	#_push
13970                 | LR__1581
13970     A7 F0 03 F6 | 	mov	ptra, fp
13974     B2 00 A0 FD | 	call	#popregs_
13978                 | _do_sqr_ret
13978     2D 00 64 FD | 	ret
1397c                 | 
1397c                 | ' 
1397c                 | ' sub do_stick
1397c                 | _do_stick
1397c     01 4A 05 F6 | 	mov	COUNT_, #1
13980     A8 00 A0 FD | 	call	#pushregs_
13984     10 F0 07 F1 | 	add	ptra, #16
13988     6A 00 00 FF 
1398c     70 E4 05 F1 | 	add	objptr, ##54384
13990     F2 1E 02 FB | 	rdlong	local01, objptr
13994     0F 17 02 F6 | 	mov	arg03, local01
13998     01 16 66 F0 | 	shl	arg03, #1
1399c     0F 17 02 F1 | 	add	arg03, local01
139a0     02 16 66 F0 | 	shl	arg03, #2
139a4     03 00 00 FF 
139a8     04 E4 85 F1 | 	sub	objptr, ##1540
139ac     F2 16 02 F1 | 	add	arg03, objptr
139b0     0B 17 02 FB | 	rdlong	arg03, arg03
139b4     0C 4E 05 F1 | 	add	fp, #12
139b8     A7 16 62 FC | 	wrlong	arg03, fp
139bc                 | ' 
139bc                 | ' numpar=compiledline(lineptr_e).result.uresult
139bc                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
139bc     0C 4E 85 F1 | 	sub	fp, #12
139c0     02 16 16 F2 | 	cmp	arg03, #2 wc
139c4     67 00 00 FF 
139c8     6C E4 85 F1 | 	sub	objptr, ##52844
139cc     3C 00 90 CD |  if_b	jmp	#LR__1590
139d0     00 12 06 F6 | 	mov	arg01, #0
139d4     04 F4 B0 FD | 	call	#__system___getiolock_0473
139d8     FD 12 02 F6 | 	mov	arg01, result1
139dc     6C 9A B0 FD | 	call	#__system___lockmem
139e0     68 01 00 FF 
139e4     AF 14 06 F6 | 	mov	arg02, ##@LR__4993
139e8     00 12 06 F6 | 	mov	arg01, #0
139ec     00 16 06 F6 | 	mov	arg03, #0
139f0     5C A7 B0 FD | 	call	#__system___basic_print_string
139f4     00 12 06 F6 | 	mov	arg01, #0
139f8     E0 F3 B0 FD | 	call	#__system___getiolock_0473
139fc     FD 00 68 FC | 	wrlong	#0, result1
13a00     27 12 06 F6 | 	mov	arg01, #39
13a04     04 56 B0 FD | 	call	#_printerror
13a08     E8 00 90 FD | 	jmp	#LR__1594
13a0c                 | LR__1590
13a0c                 | ' 
13a0c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
13a0c     0C 4E 05 F1 | 	add	fp, #12
13a10     A7 FE 09 FB | 	rdlong	result3, fp wz
13a14     0C 4E 85 F1 | 	sub	fp, #12
13a18     30 00 90 5D |  if_ne	jmp	#LR__1591
13a1c     7A 00 00 FF 
13a20     EC E5 05 F1 | 	add	objptr, ##62956
13a24     F2 1E 02 FB | 	rdlong	local01, objptr
13a28     7A 00 00 FF 
13a2c     EC E5 85 F1 | 	sub	objptr, ##62956
13a30     A7 1E 62 FC | 	wrlong	local01, fp
13a34     08 4E 05 F1 | 	add	fp, #8
13a38     A7 3A 68 FC | 	wrlong	#29, fp
13a3c     08 4E 85 F1 | 	sub	fp, #8
13a40     A7 12 02 F6 | 	mov	arg01, fp
13a44     FC 67 BF FD | 	call	#_push
13a48     A8 00 90 FD | 	jmp	#LR__1594
13a4c                 | LR__1591
13a4c     5C 67 BF FD | 	call	#_pop
13a50     A7 FA 61 FC | 	wrlong	result1, fp
13a54     04 4E 05 F1 | 	add	fp, #4
13a58     A7 FC 61 FC | 	wrlong	result2, fp
13a5c     04 4E 05 F1 | 	add	fp, #4
13a60     A7 FE 61 FC | 	wrlong	result3, fp
13a64                 | ' 
13a64                 | ' t1=pop()
13a64                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13a64     08 4E 85 F1 | 	sub	fp, #8
13a68     1C FE 0D F2 | 	cmp	result3, #28 wz
13a6c     08 4E 05 51 |  if_ne	add	fp, #8
13a70     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13a74     08 4E 85 51 |  if_ne	sub	fp, #8
13a78     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13a7c     6C 00 90 5D |  if_ne	jmp	#LR__1593
13a80     A7 1E 02 FB | 	rdlong	local01, fp
13a84     7B 00 00 FF 
13a88     E4 E4 05 F1 | 	add	objptr, ##63204
13a8c     F2 1E 62 FC | 	wrlong	local01, objptr
13a90                 | '   q=t1.result.uresult
13a90                 | '   if q<7 then 
13a90     7B 00 00 FF 
13a94     E4 E4 85 F1 | 	sub	objptr, ##63204
13a98     07 1E 56 F2 | 	cmps	local01, #7 wc
13a9c     40 00 90 3D |  if_ae	jmp	#LR__1592
13aa0     7B 00 00 FF 
13aa4     E4 E4 05 F1 | 	add	objptr, ##63204
13aa8     F2 1E 02 FB | 	rdlong	local01, objptr
13aac     02 1E 66 F0 | 	shl	local01, #2
13ab0     F8 E4 85 F1 | 	sub	objptr, #248
13ab4     F2 1E 02 F1 | 	add	local01, objptr
13ab8     0F 1F 02 FB | 	rdlong	local01, local01
13abc     A7 1E 62 FC | 	wrlong	local01, fp
13ac0     08 4E 05 F1 | 	add	fp, #8
13ac4     A7 3A 68 FC | 	wrlong	#29, fp
13ac8     08 4E 85 F1 | 	sub	fp, #8
13acc     A7 12 02 F6 | 	mov	arg01, fp
13ad0     7A 00 00 FF 
13ad4     EC E5 85 F1 | 	sub	objptr, ##62956
13ad8     68 67 BF FD | 	call	#_push
13adc                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
13adc     14 00 90 FD | 	jmp	#LR__1594
13ae0                 | LR__1592
13ae0     29 12 06 F6 | 	mov	arg01, #41
13ae4     24 55 B0 FD | 	call	#_printerror
13ae8                 | '      printerror(41) : return
13ae8     08 00 90 FD | 	jmp	#LR__1594
13aec                 | LR__1593
13aec     29 12 06 F6 | 	mov	arg01, #41
13af0     18 55 B0 FD | 	call	#_printerror
13af4                 | LR__1594
13af4     A7 F0 03 F6 | 	mov	ptra, fp
13af8     B2 00 A0 FD | 	call	#popregs_
13afc                 | _do_stick_ret
13afc     2D 00 64 FD | 	ret
13b00                 | 
13b00                 | ' 
13b00                 | ' sub do_strig
13b00                 | _do_strig
13b00     01 4A 05 F6 | 	mov	COUNT_, #1
13b04     A8 00 A0 FD | 	call	#pushregs_
13b08     10 F0 07 F1 | 	add	ptra, #16
13b0c     6A 00 00 FF 
13b10     70 E4 05 F1 | 	add	objptr, ##54384
13b14     F2 1E 02 FB | 	rdlong	local01, objptr
13b18     0F 17 02 F6 | 	mov	arg03, local01
13b1c     01 16 66 F0 | 	shl	arg03, #1
13b20     0F 17 02 F1 | 	add	arg03, local01
13b24     02 16 66 F0 | 	shl	arg03, #2
13b28     03 00 00 FF 
13b2c     04 E4 85 F1 | 	sub	objptr, ##1540
13b30     F2 16 02 F1 | 	add	arg03, objptr
13b34     0B 17 02 FB | 	rdlong	arg03, arg03
13b38     0C 4E 05 F1 | 	add	fp, #12
13b3c     A7 16 62 FC | 	wrlong	arg03, fp
13b40                 | ' 
13b40                 | ' numpar=compiledline(lineptr_e).result.uresult
13b40                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
13b40     0C 4E 85 F1 | 	sub	fp, #12
13b44     02 16 16 F2 | 	cmp	arg03, #2 wc
13b48     67 00 00 FF 
13b4c     6C E4 85 F1 | 	sub	objptr, ##52844
13b50     3C 00 90 CD |  if_b	jmp	#LR__1600
13b54     00 12 06 F6 | 	mov	arg01, #0
13b58     80 F2 B0 FD | 	call	#__system___getiolock_0473
13b5c     FD 12 02 F6 | 	mov	arg01, result1
13b60     E8 98 B0 FD | 	call	#__system___lockmem
13b64     68 01 00 FF 
13b68     B7 14 06 F6 | 	mov	arg02, ##@LR__4994
13b6c     00 12 06 F6 | 	mov	arg01, #0
13b70     00 16 06 F6 | 	mov	arg03, #0
13b74     D8 A5 B0 FD | 	call	#__system___basic_print_string
13b78     00 12 06 F6 | 	mov	arg01, #0
13b7c     5C F2 B0 FD | 	call	#__system___getiolock_0473
13b80     FD 00 68 FC | 	wrlong	#0, result1
13b84     27 12 06 F6 | 	mov	arg01, #39
13b88     80 54 B0 FD | 	call	#_printerror
13b8c     E8 00 90 FD | 	jmp	#LR__1604
13b90                 | LR__1600
13b90                 | ' 
13b90                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
13b90     0C 4E 05 F1 | 	add	fp, #12
13b94     A7 FE 09 FB | 	rdlong	result3, fp wz
13b98     0C 4E 85 F1 | 	sub	fp, #12
13b9c     30 00 90 5D |  if_ne	jmp	#LR__1601
13ba0     7B 00 00 FF 
13ba4     08 E4 05 F1 | 	add	objptr, ##62984
13ba8     F2 1E 02 FB | 	rdlong	local01, objptr
13bac     7B 00 00 FF 
13bb0     08 E4 85 F1 | 	sub	objptr, ##62984
13bb4     A7 1E 62 FC | 	wrlong	local01, fp
13bb8     08 4E 05 F1 | 	add	fp, #8
13bbc     A7 3A 68 FC | 	wrlong	#29, fp
13bc0     08 4E 85 F1 | 	sub	fp, #8
13bc4     A7 12 02 F6 | 	mov	arg01, fp
13bc8     78 66 BF FD | 	call	#_push
13bcc     A8 00 90 FD | 	jmp	#LR__1604
13bd0                 | LR__1601
13bd0     D8 65 BF FD | 	call	#_pop
13bd4     A7 FA 61 FC | 	wrlong	result1, fp
13bd8     04 4E 05 F1 | 	add	fp, #4
13bdc     A7 FC 61 FC | 	wrlong	result2, fp
13be0     04 4E 05 F1 | 	add	fp, #4
13be4     A7 FE 61 FC | 	wrlong	result3, fp
13be8                 | ' 
13be8                 | ' t1=pop()
13be8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13be8     08 4E 85 F1 | 	sub	fp, #8
13bec     1C FE 0D F2 | 	cmp	result3, #28 wz
13bf0     08 4E 05 51 |  if_ne	add	fp, #8
13bf4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13bf8     08 4E 85 51 |  if_ne	sub	fp, #8
13bfc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13c00     6C 00 90 5D |  if_ne	jmp	#LR__1603
13c04     A7 1E 02 FB | 	rdlong	local01, fp
13c08     7B 00 00 FF 
13c0c     E4 E4 05 F1 | 	add	objptr, ##63204
13c10     F2 1E 62 FC | 	wrlong	local01, objptr
13c14                 | '   q=t1.result.uresult
13c14                 | '   if q<7 then 
13c14     7B 00 00 FF 
13c18     E4 E4 85 F1 | 	sub	objptr, ##63204
13c1c     07 1E 56 F2 | 	cmps	local01, #7 wc
13c20     40 00 90 3D |  if_ae	jmp	#LR__1602
13c24     7B 00 00 FF 
13c28     E4 E4 05 F1 | 	add	objptr, ##63204
13c2c     F2 1E 02 FB | 	rdlong	local01, objptr
13c30     02 1E 66 F0 | 	shl	local01, #2
13c34     DC E4 85 F1 | 	sub	objptr, #220
13c38     F2 1E 02 F1 | 	add	local01, objptr
13c3c     0F 1F 02 FB | 	rdlong	local01, local01
13c40     A7 1E 62 FC | 	wrlong	local01, fp
13c44     08 4E 05 F1 | 	add	fp, #8
13c48     A7 3A 68 FC | 	wrlong	#29, fp
13c4c     08 4E 85 F1 | 	sub	fp, #8
13c50     A7 12 02 F6 | 	mov	arg01, fp
13c54     7B 00 00 FF 
13c58     08 E4 85 F1 | 	sub	objptr, ##62984
13c5c     E4 65 BF FD | 	call	#_push
13c60                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
13c60     14 00 90 FD | 	jmp	#LR__1604
13c64                 | LR__1602
13c64     29 12 06 F6 | 	mov	arg01, #41
13c68     A0 53 B0 FD | 	call	#_printerror
13c6c                 | '      printerror(41) : return
13c6c     08 00 90 FD | 	jmp	#LR__1604
13c70                 | LR__1603
13c70     29 12 06 F6 | 	mov	arg01, #41
13c74     94 53 B0 FD | 	call	#_printerror
13c78                 | LR__1604
13c78     A7 F0 03 F6 | 	mov	ptra, fp
13c7c     B2 00 A0 FD | 	call	#popregs_
13c80                 | _do_strig_ret
13c80     2D 00 64 FD | 	ret
13c84                 | 
13c84                 | ' 
13c84                 | ' sub do_getpixel
13c84                 | _do_getpixel
13c84     00 4A 05 F6 | 	mov	COUNT_, #0
13c88     A8 00 A0 FD | 	call	#pushregs_
13c8c     24 F0 07 F1 | 	add	ptra, #36
13c90     6A 00 00 FF 
13c94     70 E4 05 F1 | 	add	objptr, ##54384
13c98     F2 16 02 FB | 	rdlong	arg03, objptr
13c9c     0B 15 02 F6 | 	mov	arg02, arg03
13ca0     01 14 66 F0 | 	shl	arg02, #1
13ca4     0B 15 02 F1 | 	add	arg02, arg03
13ca8     02 14 66 F0 | 	shl	arg02, #2
13cac     03 00 00 FF 
13cb0     04 E4 85 F1 | 	sub	objptr, ##1540
13cb4     F2 14 02 F1 | 	add	arg02, objptr
13cb8     0A 17 02 FB | 	rdlong	arg03, arg02
13cbc     18 4E 05 F1 | 	add	fp, #24
13cc0     A7 16 62 FC | 	wrlong	arg03, fp
13cc4                 | ' 
13cc4                 | ' numpar=compiledline(lineptr_e).result.uresult
13cc4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13cc4     18 4E 85 F1 | 	sub	fp, #24
13cc8     02 16 0E F2 | 	cmp	arg03, #2 wz
13ccc     67 00 00 FF 
13cd0     6C E4 85 F1 | 	sub	objptr, ##52844
13cd4     3C 00 90 AD |  if_e	jmp	#LR__1610
13cd8     00 12 06 F6 | 	mov	arg01, #0
13cdc     FC F0 B0 FD | 	call	#__system___getiolock_0473
13ce0     FD 12 02 F6 | 	mov	arg01, result1
13ce4     64 97 B0 FD | 	call	#__system___lockmem
13ce8     68 01 00 FF 
13cec     BF 14 06 F6 | 	mov	arg02, ##@LR__4995
13cf0     00 12 06 F6 | 	mov	arg01, #0
13cf4     00 16 06 F6 | 	mov	arg03, #0
13cf8     54 A4 B0 FD | 	call	#__system___basic_print_string
13cfc     00 12 06 F6 | 	mov	arg01, #0
13d00     D8 F0 B0 FD | 	call	#__system___getiolock_0473
13d04     FD 00 68 FC | 	wrlong	#0, result1
13d08     27 12 06 F6 | 	mov	arg01, #39
13d0c     FC 52 B0 FD | 	call	#_printerror
13d10     B4 00 90 FD | 	jmp	#LR__1611
13d14                 | LR__1610
13d14     94 64 BF FD | 	call	#_pop
13d18     FD 16 02 F6 | 	mov	arg03, result1
13d1c     FE 14 02 F6 | 	mov	arg02, result2
13d20     FF 12 02 F6 | 	mov	arg01, result3
13d24     0C 4E 05 F1 | 	add	fp, #12
13d28     A7 16 62 FC | 	wrlong	arg03, fp
13d2c     04 4E 05 F1 | 	add	fp, #4
13d30     A7 14 62 FC | 	wrlong	arg02, fp
13d34     04 4E 05 F1 | 	add	fp, #4
13d38     A7 12 62 FC | 	wrlong	arg01, fp
13d3c     14 4E 85 F1 | 	sub	fp, #20
13d40     68 64 BF FD | 	call	#_pop
13d44     FF 16 02 F6 | 	mov	arg03, result3
13d48     A7 FA 61 FC | 	wrlong	result1, fp
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 FC 61 FC | 	wrlong	result2, fp
13d54     04 4E 05 F1 | 	add	fp, #4
13d58     A7 16 62 FC | 	wrlong	arg03, fp
13d5c     08 4E 85 F1 | 	sub	fp, #8
13d60     A7 12 02 F6 | 	mov	arg01, fp
13d64     9C F0 BF FD | 	call	#_converttoint
13d68     1C 4E 05 F1 | 	add	fp, #28
13d6c     A7 FA 61 FC | 	wrlong	result1, fp
13d70     10 4E 85 F1 | 	sub	fp, #16
13d74     A7 12 02 F6 | 	mov	arg01, fp
13d78     0C 4E 85 F1 | 	sub	fp, #12
13d7c     84 F0 BF FD | 	call	#_converttoint
13d80     FD 16 02 F6 | 	mov	arg03, result1
13d84     20 4E 05 F1 | 	add	fp, #32
13d88     A7 16 62 FC | 	wrlong	arg03, fp
13d8c     F2 12 02 FB | 	rdlong	arg01, objptr
13d90     04 4E 85 F1 | 	sub	fp, #4
13d94     A7 FE 01 FB | 	rdlong	result3, fp
13d98     FF 12 02 F1 | 	add	arg01, result3
13d9c     1C 4E 85 F1 | 	sub	fp, #28
13da0     0A 16 66 F0 | 	shl	arg03, #10
13da4     0B 13 02 F1 | 	add	arg01, arg03
13da8     9C 54 B0 FD | 	call	#_pspeek
13dac     FD FA E1 F8 | 	getbyte	result1, result1, #0
13db0     A7 FA 61 FC | 	wrlong	result1, fp
13db4     08 4E 05 F1 | 	add	fp, #8
13db8     A7 3A 68 FC | 	wrlong	#29, fp
13dbc     08 4E 85 F1 | 	sub	fp, #8
13dc0     A7 12 02 F6 | 	mov	arg01, fp
13dc4     7C 64 BF FD | 	call	#_push
13dc8                 | LR__1611
13dc8     A7 F0 03 F6 | 	mov	ptra, fp
13dcc     B2 00 A0 FD | 	call	#popregs_
13dd0                 | _do_getpixel_ret
13dd0     2D 00 64 FD | 	ret
13dd4                 | 
13dd4                 | ' 
13dd4                 | ' 
13dd4                 | ' 
13dd4                 | ' sub do_defsprite
13dd4                 | _do_defsprite
13dd4     07 4A 05 F6 | 	mov	COUNT_, #7
13dd8     A8 00 A0 FD | 	call	#pushregs_
13ddc     60 F0 07 F1 | 	add	ptra, #96
13de0     C8 63 BF FD | 	call	#_pop
13de4     FD 16 02 F6 | 	mov	arg03, result1
13de8     FE 14 02 F6 | 	mov	arg02, result2
13dec     FF 12 02 F6 | 	mov	arg01, result3
13df0     30 4E 05 F1 | 	add	fp, #48
13df4     A7 16 62 FC | 	wrlong	arg03, fp
13df8     04 4E 05 F1 | 	add	fp, #4
13dfc     A7 14 62 FC | 	wrlong	arg02, fp
13e00     04 4E 05 F1 | 	add	fp, #4
13e04     A7 12 62 FC | 	wrlong	arg01, fp
13e08     38 4E 85 F1 | 	sub	fp, #56
13e0c     9C 63 BF FD | 	call	#_pop
13e10     FD 16 02 F6 | 	mov	arg03, result1
13e14     FE 14 02 F6 | 	mov	arg02, result2
13e18     FF 12 02 F6 | 	mov	arg01, result3
13e1c     24 4E 05 F1 | 	add	fp, #36
13e20     A7 16 62 FC | 	wrlong	arg03, fp
13e24     04 4E 05 F1 | 	add	fp, #4
13e28     A7 14 62 FC | 	wrlong	arg02, fp
13e2c     04 4E 05 F1 | 	add	fp, #4
13e30     A7 12 62 FC | 	wrlong	arg01, fp
13e34     2C 4E 85 F1 | 	sub	fp, #44
13e38     70 63 BF FD | 	call	#_pop
13e3c     FD 16 02 F6 | 	mov	arg03, result1
13e40     FE 14 02 F6 | 	mov	arg02, result2
13e44     FF 12 02 F6 | 	mov	arg01, result3
13e48     18 4E 05 F1 | 	add	fp, #24
13e4c     A7 16 62 FC | 	wrlong	arg03, fp
13e50     04 4E 05 F1 | 	add	fp, #4
13e54     A7 14 62 FC | 	wrlong	arg02, fp
13e58     04 4E 05 F1 | 	add	fp, #4
13e5c     A7 12 62 FC | 	wrlong	arg01, fp
13e60     20 4E 85 F1 | 	sub	fp, #32
13e64     44 63 BF FD | 	call	#_pop
13e68     FD 16 02 F6 | 	mov	arg03, result1
13e6c     FE 14 02 F6 | 	mov	arg02, result2
13e70     FF 12 02 F6 | 	mov	arg01, result3
13e74     0C 4E 05 F1 | 	add	fp, #12
13e78     A7 16 62 FC | 	wrlong	arg03, fp
13e7c     04 4E 05 F1 | 	add	fp, #4
13e80     A7 14 62 FC | 	wrlong	arg02, fp
13e84     04 4E 05 F1 | 	add	fp, #4
13e88     A7 12 62 FC | 	wrlong	arg01, fp
13e8c     14 4E 85 F1 | 	sub	fp, #20
13e90     18 63 BF FD | 	call	#_pop
13e94     FF 16 02 F6 | 	mov	arg03, result3
13e98     A7 FA 61 FC | 	wrlong	result1, fp
13e9c     04 4E 05 F1 | 	add	fp, #4
13ea0     A7 FC 61 FC | 	wrlong	result2, fp
13ea4     04 4E 05 F1 | 	add	fp, #4
13ea8     A7 16 62 FC | 	wrlong	arg03, fp
13eac     08 4E 85 F1 | 	sub	fp, #8
13eb0     A7 12 02 F6 | 	mov	arg01, fp
13eb4     4C EF BF FD | 	call	#_converttoint
13eb8     3C 4E 05 F1 | 	add	fp, #60
13ebc     A7 FA 61 FC | 	wrlong	result1, fp
13ec0     30 4E 85 F1 | 	sub	fp, #48
13ec4     A7 12 02 F6 | 	mov	arg01, fp
13ec8     0C 4E 85 F1 | 	sub	fp, #12
13ecc     34 EF BF FD | 	call	#_converttoint
13ed0     40 4E 05 F1 | 	add	fp, #64
13ed4     A7 FA 61 FC | 	wrlong	result1, fp
13ed8     28 4E 85 F1 | 	sub	fp, #40
13edc     A7 12 02 F6 | 	mov	arg01, fp
13ee0     18 4E 85 F1 | 	sub	fp, #24
13ee4     1C EF BF FD | 	call	#_converttoint
13ee8     44 4E 05 F1 | 	add	fp, #68
13eec     A7 FA 61 FC | 	wrlong	result1, fp
13ef0     20 4E 85 F1 | 	sub	fp, #32
13ef4     A7 12 02 F6 | 	mov	arg01, fp
13ef8     24 4E 85 F1 | 	sub	fp, #36
13efc     04 EF BF FD | 	call	#_converttoint
13f00     48 4E 05 F1 | 	add	fp, #72
13f04     A7 FA 61 FC | 	wrlong	result1, fp
13f08     18 4E 85 F1 | 	sub	fp, #24
13f0c     A7 12 02 F6 | 	mov	arg01, fp
13f10     30 4E 85 F1 | 	sub	fp, #48
13f14     EC EE BF FD | 	call	#_converttoint
13f18     4C 4E 05 F1 | 	add	fp, #76
13f1c     A7 FA 61 FC | 	wrlong	result1, fp
13f20                 | ' 
13f20                 | ' t5=pop()
13f20                 | ' t4=pop()
13f20                 | ' t3=pop()
13f20                 | ' t2=pop()
13f20                 | ' t1=pop()
13f20                 | ' 
13f20                 | ' ' do convert, defsprite is not a racing command
13f20                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
13f20                 | '  
13f20                 | ' ' todo: check parameters for linits
13f20                 | ' if sprite(a1)<> nil then delete(sprite(a1))
13f20     10 4E 85 F1 | 	sub	fp, #16
13f24     A7 16 02 FB | 	rdlong	arg03, fp
13f28     3C 4E 85 F1 | 	sub	fp, #60
13f2c     02 16 66 F0 | 	shl	arg03, #2
13f30     7B 00 00 FF 
13f34     24 E4 05 F1 | 	add	objptr, ##63012
13f38     F2 16 02 F1 | 	add	arg03, objptr
13f3c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13f40     7B 00 00 FF 
13f44     24 E4 85 F1 | 	sub	objptr, ##63012
13f48     2C 00 90 AD |  if_e	jmp	#LR__1620
13f4c     3C 4E 05 F1 | 	add	fp, #60
13f50     A7 16 02 FB | 	rdlong	arg03, fp
13f54     3C 4E 85 F1 | 	sub	fp, #60
13f58     02 16 66 F0 | 	shl	arg03, #2
13f5c     7B 00 00 FF 
13f60     24 E4 05 F1 | 	add	objptr, ##63012
13f64     F2 16 02 F1 | 	add	arg03, objptr
13f68     0B 13 02 FB | 	rdlong	arg01, arg03
13f6c     7B 00 00 FF 
13f70     24 E4 85 F1 | 	sub	objptr, ##63012
13f74     58 D4 B0 FD | 	call	#__system___gc_free
13f78                 | LR__1620
13f78     3C 4E 05 F1 | 	add	fp, #60
13f7c     A7 1E 02 FB | 	rdlong	local01, fp
13f80     0C 4E 05 F1 | 	add	fp, #12
13f84     A7 16 02 FB | 	rdlong	arg03, fp
13f88     04 4E 05 F1 | 	add	fp, #4
13f8c     A7 14 02 FB | 	rdlong	arg02, fp
13f90     0A 17 02 FD | 	qmul	arg03, arg02
13f94     02 1E 66 F0 | 	shl	local01, #2
13f98     7B 00 00 FF 
13f9c     24 E4 05 F1 | 	add	objptr, ##63012
13fa0     F2 1E 02 F1 | 	add	local01, objptr
13fa4     4C 4E 85 F1 | 	sub	fp, #76
13fa8     7B 00 00 FF 
13fac     24 E4 85 F1 | 	sub	objptr, ##63012
13fb0     18 12 62 FD | 	getqx	arg01
13fb4     DC D2 B0 FD | 	call	#__system___gc_alloc_managed
13fb8     0F FB 61 FC | 	wrlong	result1, local01
13fbc                 | ' for y=a3 to a3+a5-1
13fbc     44 4E 05 F1 | 	add	fp, #68
13fc0     A7 20 02 FB | 	rdlong	local02, fp
13fc4     0C 4E 05 F1 | 	add	fp, #12
13fc8     A7 20 62 FC | 	wrlong	local02, fp
13fcc     0C 4E 85 F1 | 	sub	fp, #12
13fd0     A7 22 02 FB | 	rdlong	local03, fp
13fd4     08 4E 05 F1 | 	add	fp, #8
13fd8     A7 24 02 FB | 	rdlong	local04, fp
13fdc     4C 4E 85 F1 | 	sub	fp, #76
13fe0     12 23 02 F1 | 	add	local03, local04
13fe4                 | LR__1621
13fe4     50 4E 05 F1 | 	add	fp, #80
13fe8     A7 20 02 FB | 	rdlong	local02, fp
13fec     50 4E 85 F1 | 	sub	fp, #80
13ff0     11 21 52 F2 | 	cmps	local02, local03 wc
13ff4     F4 00 90 3D |  if_ae	jmp	#LR__1624
13ff8                 | '   for x=a2 to a4+a2-1
13ff8     40 4E 05 F1 | 	add	fp, #64
13ffc     A7 1E 02 FB | 	rdlong	local01, fp
14000     14 4E 05 F1 | 	add	fp, #20
14004     A7 1E 62 FC | 	wrlong	local01, fp
14008     0C 4E 85 F1 | 	sub	fp, #12
1400c     A7 26 02 FB | 	rdlong	local05, fp
14010     08 4E 85 F1 | 	sub	fp, #8
14014     A7 28 02 FB | 	rdlong	local06, fp
14018     40 4E 85 F1 | 	sub	fp, #64
1401c     14 27 02 F1 | 	add	local05, local06
14020                 | LR__1622
14020     54 4E 05 F1 | 	add	fp, #84
14024     A7 1E 02 FB | 	rdlong	local01, fp
14028     54 4E 85 F1 | 	sub	fp, #84
1402c     13 1F 52 F2 | 	cmps	local01, local05 wc
14030     A0 00 90 3D |  if_ae	jmp	#LR__1623
14034     3C 4E 05 F1 | 	add	fp, #60
14038     A7 28 02 FB | 	rdlong	local06, fp
1403c     18 4E 05 F1 | 	add	fp, #24
14040     A7 24 02 FB | 	rdlong	local04, fp
14044     14 4E 85 F1 | 	sub	fp, #20
14048     A7 20 02 FB | 	rdlong	local02, fp
1404c     10 4E 05 F1 | 	add	fp, #16
14050     A7 1E 02 FB | 	rdlong	local01, fp
14054     0F 17 02 F6 | 	mov	arg03, local01
14058     0C 4E 85 F1 | 	sub	fp, #12
1405c     A7 14 02 FB | 	rdlong	arg02, fp
14060     0A 17 82 F1 | 	sub	arg03, arg02
14064     04 4E 05 F1 | 	add	fp, #4
14068     A7 14 02 FB | 	rdlong	arg02, fp
1406c     0A 17 02 FD | 	qmul	arg03, arg02
14070     02 28 66 F0 | 	shl	local06, #2
14074     7B 00 00 FF 
14078     24 E4 05 F1 | 	add	objptr, ##63012
1407c     F2 28 02 F1 | 	add	local06, objptr
14080     14 29 02 FB | 	rdlong	local06, local06
14084     12 2B 02 F6 | 	mov	local07, local04
14088     10 2B 82 F1 | 	sub	local07, local02
1408c     7B 00 00 FF 
14090     24 E4 85 F1 | 	sub	objptr, ##63012
14094     F2 12 02 FB | 	rdlong	arg01, objptr
14098     12 13 02 F1 | 	add	arg01, local04
1409c     48 4E 85 F1 | 	sub	fp, #72
140a0     0A 1E 66 F0 | 	shl	local01, #10
140a4     0F 13 02 F1 | 	add	arg01, local01
140a8     18 24 62 FD | 	getqx	local04
140ac     12 2B 02 F1 | 	add	local07, local04
140b0     14 2B 02 F1 | 	add	local07, local06
140b4     90 51 B0 FD | 	call	#_pspeek
140b8     15 FB 41 FC | 	wrbyte	result1, local07
140bc     54 4E 05 F1 | 	add	fp, #84
140c0     A7 2A 02 FB | 	rdlong	local07, fp
140c4     01 2A 06 F1 | 	add	local07, #1
140c8     A7 2A 62 FC | 	wrlong	local07, fp
140cc     54 4E 85 F1 | 	sub	fp, #84
140d0     4C FF 9F FD | 	jmp	#LR__1622
140d4                 | LR__1623
140d4     50 4E 05 F1 | 	add	fp, #80
140d8     A7 2A 02 FB | 	rdlong	local07, fp
140dc     01 2A 06 F1 | 	add	local07, #1
140e0     A7 2A 62 FC | 	wrlong	local07, fp
140e4     50 4E 85 F1 | 	sub	fp, #80
140e8     F8 FE 9F FD | 	jmp	#LR__1621
140ec                 | LR__1624
140ec     3C 4E 05 F1 | 	add	fp, #60
140f0     A7 2A 02 FB | 	rdlong	local07, fp
140f4     15 13 02 F6 | 	mov	arg01, local07
140f8     3C 4E 85 F1 | 	sub	fp, #60
140fc     02 2A 66 F0 | 	shl	local07, #2
14100     7B 00 00 FF 
14104     24 E4 05 F1 | 	add	objptr, ##63012
14108     F2 2A 02 F1 | 	add	local07, objptr
1410c     15 15 02 FB | 	rdlong	arg02, local07
14110     7B 00 00 FF 
14114     24 E4 85 F1 | 	sub	objptr, ##63012
14118     14 6F B0 FD | 	call	#_hg010b_spin2_setspriteptr
1411c     3C 4E 05 F1 | 	add	fp, #60
14120     A7 12 02 FB | 	rdlong	arg01, fp
14124     0C 4E 05 F1 | 	add	fp, #12
14128     A7 14 02 FB | 	rdlong	arg02, fp
1412c     04 4E 05 F1 | 	add	fp, #4
14130     A7 16 02 FB | 	rdlong	arg03, fp
14134     4C 4E 85 F1 | 	sub	fp, #76
14138     84 6F B0 FD | 	call	#_hg010b_spin2_setspritesize
1413c     A7 F0 03 F6 | 	mov	ptra, fp
14140     B2 00 A0 FD | 	call	#popregs_
14144                 | _do_defsprite_ret
14144     2D 00 64 FD | 	ret
14148                 | 
14148                 | ' 
14148                 | ' sub do_sprite
14148                 | _do_sprite
14148     00 4A 05 F6 | 	mov	COUNT_, #0
1414c     A8 00 A0 FD | 	call	#pushregs_
14150     30 F0 07 F1 | 	add	ptra, #48
14154     54 60 BF FD | 	call	#_pop
14158     FD 16 02 F6 | 	mov	arg03, result1
1415c     FE 14 02 F6 | 	mov	arg02, result2
14160     FF 12 02 F6 | 	mov	arg01, result3
14164     18 4E 05 F1 | 	add	fp, #24
14168     A7 16 62 FC | 	wrlong	arg03, fp
1416c     04 4E 05 F1 | 	add	fp, #4
14170     A7 14 62 FC | 	wrlong	arg02, fp
14174     04 4E 05 F1 | 	add	fp, #4
14178     A7 12 62 FC | 	wrlong	arg01, fp
1417c     20 4E 85 F1 | 	sub	fp, #32
14180     28 60 BF FD | 	call	#_pop
14184     FD 16 02 F6 | 	mov	arg03, result1
14188     FE 14 02 F6 | 	mov	arg02, result2
1418c     FF 12 02 F6 | 	mov	arg01, result3
14190     0C 4E 05 F1 | 	add	fp, #12
14194     A7 16 62 FC | 	wrlong	arg03, fp
14198     04 4E 05 F1 | 	add	fp, #4
1419c     A7 14 62 FC | 	wrlong	arg02, fp
141a0     04 4E 05 F1 | 	add	fp, #4
141a4     A7 12 62 FC | 	wrlong	arg01, fp
141a8     14 4E 85 F1 | 	sub	fp, #20
141ac     FC 5F BF FD | 	call	#_pop
141b0     FF 16 02 F6 | 	mov	arg03, result3
141b4     A7 FA 61 FC | 	wrlong	result1, fp
141b8     04 4E 05 F1 | 	add	fp, #4
141bc     A7 FC 61 FC | 	wrlong	result2, fp
141c0     04 4E 05 F1 | 	add	fp, #4
141c4     A7 16 62 FC | 	wrlong	arg03, fp
141c8     08 4E 85 F1 | 	sub	fp, #8
141cc     A7 12 02 F6 | 	mov	arg01, fp
141d0     30 EC BF FD | 	call	#_converttoint
141d4     24 4E 05 F1 | 	add	fp, #36
141d8     A7 FA 61 FC | 	wrlong	result1, fp
141dc     18 4E 85 F1 | 	sub	fp, #24
141e0     A7 12 02 F6 | 	mov	arg01, fp
141e4     0C 4E 85 F1 | 	sub	fp, #12
141e8     18 EC BF FD | 	call	#_converttoint
141ec     28 4E 05 F1 | 	add	fp, #40
141f0     A7 FA 61 FC | 	wrlong	result1, fp
141f4     10 4E 85 F1 | 	sub	fp, #16
141f8     A7 12 02 F6 | 	mov	arg01, fp
141fc     18 4E 85 F1 | 	sub	fp, #24
14200     00 EC BF FD | 	call	#_converttoint
14204     2C 4E 05 F1 | 	add	fp, #44
14208     A7 FA 61 FC | 	wrlong	result1, fp
1420c     08 4E 85 F1 | 	sub	fp, #8
14210     A7 12 02 FB | 	rdlong	arg01, fp
14214     04 4E 05 F1 | 	add	fp, #4
14218     A7 14 02 FB | 	rdlong	arg02, fp
1421c     FD 16 02 F6 | 	mov	arg03, result1
14220     28 4E 85 F1 | 	sub	fp, #40
14224     30 6E B0 FD | 	call	#_hg010b_spin2_setspritepos
14228     A7 F0 03 F6 | 	mov	ptra, fp
1422c     B2 00 A0 FD | 	call	#popregs_
14230                 | _do_sprite_ret
14230     2D 00 64 FD | 	ret
14234                 | 
14234                 | ' 
14234                 | ' sub do_mousex
14234                 | _do_mousex
14234     00 4A 05 F6 | 	mov	COUNT_, #0
14238     A8 00 A0 FD | 	call	#pushregs_
1423c     0C F0 07 F1 | 	add	ptra, #12
14240     08 4E 05 F1 | 	add	fp, #8
14244     A7 3A 68 FC | 	wrlong	#29, fp
14248     08 4E 85 F1 | 	sub	fp, #8
1424c     7A 00 00 FF 
14250     DC E5 05 F1 | 	add	objptr, ##62940
14254     F2 12 02 FB | 	rdlong	arg01, objptr
14258     7A 00 00 FF 
1425c     DC E5 85 F1 | 	sub	objptr, ##62940
14260     A7 12 62 FC | 	wrlong	arg01, fp
14264     A7 12 02 F6 | 	mov	arg01, fp
14268     D8 5F BF FD | 	call	#_push
1426c     A7 F0 03 F6 | 	mov	ptra, fp
14270     B2 00 A0 FD | 	call	#popregs_
14274                 | _do_mousex_ret
14274     2D 00 64 FD | 	ret
14278                 | 
14278                 | ' 
14278                 | ' sub do_mousey
14278                 | _do_mousey
14278     00 4A 05 F6 | 	mov	COUNT_, #0
1427c     A8 00 A0 FD | 	call	#pushregs_
14280     0C F0 07 F1 | 	add	ptra, #12
14284     08 4E 05 F1 | 	add	fp, #8
14288     A7 3A 68 FC | 	wrlong	#29, fp
1428c     08 4E 85 F1 | 	sub	fp, #8
14290     7A 00 00 FF 
14294     E0 E5 05 F1 | 	add	objptr, ##62944
14298     F2 12 02 FB | 	rdlong	arg01, objptr
1429c     7A 00 00 FF 
142a0     E0 E5 85 F1 | 	sub	objptr, ##62944
142a4     A7 12 62 FC | 	wrlong	arg01, fp
142a8     A7 12 02 F6 | 	mov	arg01, fp
142ac     94 5F BF FD | 	call	#_push
142b0     A7 F0 03 F6 | 	mov	ptra, fp
142b4     B2 00 A0 FD | 	call	#popregs_
142b8                 | _do_mousey_ret
142b8     2D 00 64 FD | 	ret
142bc                 | 
142bc                 | ' 
142bc                 | ' sub do_mousew
142bc                 | _do_mousew
142bc     00 4A 05 F6 | 	mov	COUNT_, #0
142c0     A8 00 A0 FD | 	call	#pushregs_
142c4     0C F0 07 F1 | 	add	ptra, #12
142c8     08 4E 05 F1 | 	add	fp, #8
142cc     A7 38 68 FC | 	wrlong	#28, fp
142d0     08 4E 85 F1 | 	sub	fp, #8
142d4     7A 00 00 FF 
142d8     E8 E5 05 F1 | 	add	objptr, ##62952
142dc     F2 12 02 FB | 	rdlong	arg01, objptr
142e0     7A 00 00 FF 
142e4     E8 E5 85 F1 | 	sub	objptr, ##62952
142e8     A7 12 62 FC | 	wrlong	arg01, fp
142ec     A7 12 02 F6 | 	mov	arg01, fp
142f0     50 5F BF FD | 	call	#_push
142f4     A7 F0 03 F6 | 	mov	ptra, fp
142f8     B2 00 A0 FD | 	call	#popregs_
142fc                 | _do_mousew_ret
142fc     2D 00 64 FD | 	ret
14300                 | 
14300                 | ' 
14300                 | ' sub do_mousek
14300                 | _do_mousek
14300     00 4A 05 F6 | 	mov	COUNT_, #0
14304     A8 00 A0 FD | 	call	#pushregs_
14308     0C F0 07 F1 | 	add	ptra, #12
1430c     08 4E 05 F1 | 	add	fp, #8
14310     A7 3A 68 FC | 	wrlong	#29, fp
14314     08 4E 85 F1 | 	sub	fp, #8
14318     7A 00 00 FF 
1431c     E4 E5 05 F1 | 	add	objptr, ##62948
14320     F2 12 02 FB | 	rdlong	arg01, objptr
14324     7A 00 00 FF 
14328     E4 E5 85 F1 | 	sub	objptr, ##62948
1432c     A7 12 62 FC | 	wrlong	arg01, fp
14330     A7 12 02 F6 | 	mov	arg01, fp
14334     0C 5F BF FD | 	call	#_push
14338     A7 F0 03 F6 | 	mov	ptra, fp
1433c     B2 00 A0 FD | 	call	#popregs_
14340                 | _do_mousek_ret
14340     2D 00 64 FD | 	ret
14344                 | 
14344                 | ' 
14344                 | ' 
14344                 | ' sub do_rdpin
14344                 | _do_rdpin
14344     00 4A 05 F6 | 	mov	COUNT_, #0
14348     A8 00 A0 FD | 	call	#pushregs_
1434c     0C F0 07 F1 | 	add	ptra, #12
14350     58 5E BF FD | 	call	#_pop
14354     A7 FA 61 FC | 	wrlong	result1, fp
14358     04 4E 05 F1 | 	add	fp, #4
1435c     A7 FC 61 FC | 	wrlong	result2, fp
14360     04 4E 05 F1 | 	add	fp, #4
14364     A7 FE 61 FC | 	wrlong	result3, fp
14368     08 4E 85 F1 | 	sub	fp, #8
1436c     A7 12 02 F6 | 	mov	arg01, fp
14370     90 EA BF FD | 	call	#_converttoint
14374     FD FA 89 FA | 	rdpin	result1, result1
14378     7B 00 00 FF 
1437c     10 E5 05 F1 | 	add	objptr, ##63248
14380     F2 FA 61 FC | 	wrlong	result1, objptr
14384     7B 00 00 FF 
14388     10 E5 85 F1 | 	sub	objptr, ##63248
1438c     08 4E 05 F1 | 	add	fp, #8
14390     A7 3A 68 FC | 	wrlong	#29, fp
14394     08 4E 85 F1 | 	sub	fp, #8
14398     A7 08 68 FC | 	wrlong	#4, fp
1439c     A7 12 02 F6 | 	mov	arg01, fp
143a0     A0 5E BF FD | 	call	#_push
143a4     A7 F0 03 F6 | 	mov	ptra, fp
143a8     B2 00 A0 FD | 	call	#popregs_
143ac                 | _do_rdpin_ret
143ac     2D 00 64 FD | 	ret
143b0                 | 
143b0                 | ' 
143b0                 | ' sub do_rqpin
143b0                 | _do_rqpin
143b0     00 4A 05 F6 | 	mov	COUNT_, #0
143b4     A8 00 A0 FD | 	call	#pushregs_
143b8     0C F0 07 F1 | 	add	ptra, #12
143bc     EC 5D BF FD | 	call	#_pop
143c0     A7 FA 61 FC | 	wrlong	result1, fp
143c4     04 4E 05 F1 | 	add	fp, #4
143c8     A7 FC 61 FC | 	wrlong	result2, fp
143cc     04 4E 05 F1 | 	add	fp, #4
143d0     A7 FE 61 FC | 	wrlong	result3, fp
143d4     08 4E 85 F1 | 	sub	fp, #8
143d8     A7 12 02 F6 | 	mov	arg01, fp
143dc     24 EA BF FD | 	call	#_converttoint
143e0     FD 12 02 F6 | 	mov	arg01, result1
143e4     00 FA 05 F6 | 	mov	result1, #0
143e8     09 FB 81 FA | 	rqpin	result1, arg01
143ec     7B 00 00 FF 
143f0     10 E5 05 F1 | 	add	objptr, ##63248
143f4     F2 FA 61 FC | 	wrlong	result1, objptr
143f8     7B 00 00 FF 
143fc     10 E5 85 F1 | 	sub	objptr, ##63248
14400     08 4E 05 F1 | 	add	fp, #8
14404     A7 3A 68 FC | 	wrlong	#29, fp
14408     08 4E 85 F1 | 	sub	fp, #8
1440c     A7 08 68 FC | 	wrlong	#4, fp
14410     A7 12 02 F6 | 	mov	arg01, fp
14414     2C 5E BF FD | 	call	#_push
14418     A7 F0 03 F6 | 	mov	ptra, fp
1441c     B2 00 A0 FD | 	call	#popregs_
14420                 | _do_rqpin_ret
14420     2D 00 64 FD | 	ret
14424                 | 
14424                 | ' 
14424                 | ' sub do_pinread
14424                 | _do_pinread
14424     00 4A 05 F6 | 	mov	COUNT_, #0
14428     A8 00 A0 FD | 	call	#pushregs_
1442c     0C F0 07 F1 | 	add	ptra, #12
14430     78 5D BF FD | 	call	#_pop
14434     A7 FA 61 FC | 	wrlong	result1, fp
14438     04 4E 05 F1 | 	add	fp, #4
1443c     A7 FC 61 FC | 	wrlong	result2, fp
14440     04 4E 05 F1 | 	add	fp, #4
14444     A7 FE 61 FC | 	wrlong	result3, fp
14448     08 4E 85 F1 | 	sub	fp, #8
1444c     A7 12 02 F6 | 	mov	arg01, fp
14450     B0 E9 BF FD | 	call	#_converttoint
14454     FD 12 02 F6 | 	mov	arg01, result1
14458     20 12 CE F7 | 	test	arg01, #32 wz
1445c     FF FB 01 56 |  if_ne	mov	result1, inb
14460     FE FB 01 A6 |  if_e	mov	result1, ina
14464     09 FB 41 F0 | 	shr	result1, arg01
14468     06 12 46 F0 | 	shr	arg01, #6
1446c     09 FB 41 F7 | 	zerox	result1, arg01
14470     7B 00 00 FF 
14474     10 E5 05 F1 | 	add	objptr, ##63248
14478     F2 FA 61 FC | 	wrlong	result1, objptr
1447c     7B 00 00 FF 
14480     10 E5 85 F1 | 	sub	objptr, ##63248
14484     08 4E 05 F1 | 	add	fp, #8
14488     A7 3A 68 FC | 	wrlong	#29, fp
1448c     08 4E 85 F1 | 	sub	fp, #8
14490     A7 08 68 FC | 	wrlong	#4, fp
14494     A7 12 02 F6 | 	mov	arg01, fp
14498     A8 5D BF FD | 	call	#_push
1449c     A7 F0 03 F6 | 	mov	ptra, fp
144a0     B2 00 A0 FD | 	call	#popregs_
144a4                 | _do_pinread_ret
144a4     2D 00 64 FD | 	ret
144a8                 | 
144a8                 | ' 
144a8                 | ' sub do_gettime
144a8                 | _do_gettime
144a8     02 4A 05 F6 | 	mov	COUNT_, #2
144ac     A8 00 A0 FD | 	call	#pushregs_
144b0     14 F0 07 F1 | 	add	ptra, #20
144b4                 | ' 
144b4                 | ' const asm 
144b4     1A 1E 72 FD | 	getct	local01 wc
144b8     1A 20 62 FD | 	getct	local02
144bc                 | ' 
144bc                 | ' return hi1, lo1
144bc     10 FD 01 F6 | 	mov	result2, local02
144c0     A7 1E 62 FC | 	wrlong	local01, fp
144c4     04 4E 05 F1 | 	add	fp, #4
144c8     A7 FC 61 FC | 	wrlong	result2, fp
144cc     0C 4E 05 F1 | 	add	fp, #12
144d0     A7 3A 68 FC | 	wrlong	#29, fp
144d4     0C 4E 85 F1 | 	sub	fp, #12
144d8     A7 12 02 FB | 	rdlong	arg01, fp
144dc     04 4E 05 F1 | 	add	fp, #4
144e0     A7 12 62 FC | 	wrlong	arg01, fp
144e4     08 4E 85 F1 | 	sub	fp, #8
144e8     A7 12 02 FB | 	rdlong	arg01, fp
144ec     0C 4E 05 F1 | 	add	fp, #12
144f0     A7 12 62 FC | 	wrlong	arg01, fp
144f4     04 4E 85 F1 | 	sub	fp, #4
144f8     A7 12 02 F6 | 	mov	arg01, fp
144fc     08 4E 85 F1 | 	sub	fp, #8
14500     40 5D BF FD | 	call	#_push
14504     A7 F0 03 F6 | 	mov	ptra, fp
14508     B2 00 A0 FD | 	call	#popregs_
1450c                 | _do_gettime_ret
1450c     2D 00 64 FD | 	ret
14510                 | 
14510                 | '    
14510                 | ' 
14510                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
14510                 | ' 
14510                 | ' '' ----------------------------- Clear the screen
14510                 | ' 
14510                 | ' sub do_cls
14510                 | _do_cls
14510     57 00 00 FF 
14514     2C E4 05 F1 | 	add	objptr, ##44588
14518     F2 12 02 FB | 	rdlong	arg01, objptr
1451c     04 E4 85 F1 | 	sub	objptr, #4
14520     F2 14 02 FB | 	rdlong	arg02, objptr
14524     57 00 00 FF 
14528     28 E4 85 F1 | 	sub	objptr, ##44584
1452c     B0 78 B0 FD | 	call	#_hg010b_spin2_cls
14530     57 00 00 FF 
14534     2C E4 05 F1 | 	add	objptr, ##44588
14538     F2 14 02 FB | 	rdlong	arg02, objptr
1453c     14 E4 85 F1 | 	sub	objptr, #20
14540     F2 14 62 FC | 	wrlong	arg02, objptr
14544     57 00 00 FF 
14548     18 E4 85 F1 | 	sub	objptr, ##44568
1454c                 | ' cls(ink,paper): plot_color=ink: print
1454c     00 12 06 F6 | 	mov	arg01, #0
14550     88 E8 B0 FD | 	call	#__system___getiolock_0473
14554     FD 12 02 F6 | 	mov	arg01, result1
14558     F0 8E B0 FD | 	call	#__system___lockmem
1455c     00 12 06 F6 | 	mov	arg01, #0
14560     0A 14 06 F6 | 	mov	arg02, #10
14564     00 16 06 F6 | 	mov	arg03, #0
14568     8C 9B B0 FD | 	call	#__system___basic_print_char
1456c     00 12 06 F6 | 	mov	arg01, #0
14570     68 E8 B0 FD | 	call	#__system___getiolock_0473
14574     FD 00 68 FC | 	wrlong	#0, result1
14578                 | _do_cls_ret
14578     2D 00 64 FD | 	ret
1457c                 | 
1457c                 | ' 
1457c                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
1457c                 | ' 
1457c                 | ' sub do_color
1457c                 | _do_color
1457c     03 4A 05 F6 | 	mov	COUNT_, #3
14580     A8 00 A0 FD | 	call	#pushregs_
14584     24 5C BF FD | 	call	#_pop
14588     FD 1E 02 F6 | 	mov	local01, result1
1458c     FE 20 02 F6 | 	mov	local02, result2
14590     FF 22 02 F6 | 	mov	local03, result3
14594     57 00 00 FF 
14598     18 E4 05 F1 | 	add	objptr, ##44568
1459c     F2 1E 62 FC | 	wrlong	local01, objptr
145a0     57 00 00 FF 
145a4     18 E4 85 F1 | 	sub	objptr, ##44568
145a8     A7 F0 03 F6 | 	mov	ptra, fp
145ac     B2 00 A0 FD | 	call	#popregs_
145b0                 | _do_color_ret
145b0     2D 00 64 FD | 	ret
145b4                 | 
145b4                 | ' 
145b4                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
145b4                 | ' 
145b4                 | ' sub do_plot
145b4                 | _do_plot
145b4     00 4A 05 F6 | 	mov	COUNT_, #0
145b8     A8 00 A0 FD | 	call	#pushregs_
145bc     20 F0 07 F1 | 	add	ptra, #32
145c0     E8 5B BF FD | 	call	#_pop
145c4     FD 16 02 F6 | 	mov	arg03, result1
145c8     FE 14 02 F6 | 	mov	arg02, result2
145cc     FF 12 02 F6 | 	mov	arg01, result3
145d0     0C 4E 05 F1 | 	add	fp, #12
145d4     A7 16 62 FC | 	wrlong	arg03, fp
145d8     04 4E 05 F1 | 	add	fp, #4
145dc     A7 14 62 FC | 	wrlong	arg02, fp
145e0     04 4E 05 F1 | 	add	fp, #4
145e4     A7 12 62 FC | 	wrlong	arg01, fp
145e8     14 4E 85 F1 | 	sub	fp, #20
145ec     BC 5B BF FD | 	call	#_pop
145f0     FF 16 02 F6 | 	mov	arg03, result3
145f4     A7 FA 61 FC | 	wrlong	result1, fp
145f8     04 4E 05 F1 | 	add	fp, #4
145fc     A7 FC 61 FC | 	wrlong	result2, fp
14600     04 4E 05 F1 | 	add	fp, #4
14604     A7 16 62 FC | 	wrlong	arg03, fp
14608     08 4E 85 F1 | 	sub	fp, #8
1460c     A7 12 02 F6 | 	mov	arg01, fp
14610     F0 E7 BF FD | 	call	#_converttoint
14614     18 4E 05 F1 | 	add	fp, #24
14618     A7 FA 61 FC | 	wrlong	result1, fp
1461c     0C 4E 85 F1 | 	sub	fp, #12
14620     A7 12 02 F6 | 	mov	arg01, fp
14624     0C 4E 85 F1 | 	sub	fp, #12
14628     D8 E7 BF FD | 	call	#_converttoint
1462c     1C 4E 05 F1 | 	add	fp, #28
14630     A7 FA 61 FC | 	wrlong	result1, fp
14634     04 4E 85 F1 | 	sub	fp, #4
14638     A7 16 02 FB | 	rdlong	arg03, fp
1463c     57 00 00 FF 
14640     1C E4 05 F1 | 	add	objptr, ##44572
14644     F2 16 62 FC | 	wrlong	arg03, objptr
14648     04 4E 05 F1 | 	add	fp, #4
1464c     A7 14 02 FB | 	rdlong	arg02, fp
14650     1C 4E 85 F1 | 	sub	fp, #28
14654     04 E4 05 F1 | 	add	objptr, #4
14658     F2 14 62 FC | 	wrlong	arg02, objptr
1465c     04 E4 85 F1 | 	sub	objptr, #4
14660     F2 12 02 FB | 	rdlong	arg01, objptr
14664     04 E4 85 F1 | 	sub	objptr, #4
14668     F2 16 02 FB | 	rdlong	arg03, objptr
1466c     57 00 00 FF 
14670     18 E4 85 F1 | 	sub	objptr, ##44568
14674     94 6A B0 FD | 	call	#_hg010b_spin2_putpixel
14678     A7 F0 03 F6 | 	mov	ptra, fp
1467c     B2 00 A0 FD | 	call	#popregs_
14680                 | _do_plot_ret
14680     2D 00 64 FD | 	ret
14684                 | 
14684                 | ' 
14684                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
14684                 | ' 
14684                 | ' sub do_draw
14684                 | _do_draw
14684     00 4A 05 F6 | 	mov	COUNT_, #0
14688     A8 00 A0 FD | 	call	#pushregs_
1468c     20 F0 07 F1 | 	add	ptra, #32
14690     18 5B BF FD | 	call	#_pop
14694     FD 1A 02 F6 | 	mov	arg05, result1
14698     FE 18 02 F6 | 	mov	arg04, result2
1469c     FF 16 02 F6 | 	mov	arg03, result3
146a0     0C 4E 05 F1 | 	add	fp, #12
146a4     A7 1A 62 FC | 	wrlong	arg05, fp
146a8     04 4E 05 F1 | 	add	fp, #4
146ac     A7 18 62 FC | 	wrlong	arg04, fp
146b0     04 4E 05 F1 | 	add	fp, #4
146b4     A7 16 62 FC | 	wrlong	arg03, fp
146b8     14 4E 85 F1 | 	sub	fp, #20
146bc     EC 5A BF FD | 	call	#_pop
146c0     FF 1A 02 F6 | 	mov	arg05, result3
146c4     A7 FA 61 FC | 	wrlong	result1, fp
146c8     04 4E 05 F1 | 	add	fp, #4
146cc     A7 FC 61 FC | 	wrlong	result2, fp
146d0     04 4E 05 F1 | 	add	fp, #4
146d4     A7 1A 62 FC | 	wrlong	arg05, fp
146d8     08 4E 85 F1 | 	sub	fp, #8
146dc     A7 12 02 F6 | 	mov	arg01, fp
146e0     20 E7 BF FD | 	call	#_converttoint
146e4     18 4E 05 F1 | 	add	fp, #24
146e8     A7 FA 61 FC | 	wrlong	result1, fp
146ec     0C 4E 85 F1 | 	sub	fp, #12
146f0     A7 12 02 F6 | 	mov	arg01, fp
146f4     0C 4E 85 F1 | 	sub	fp, #12
146f8     08 E7 BF FD | 	call	#_converttoint
146fc     1C 4E 05 F1 | 	add	fp, #28
14700     A7 FA 61 FC | 	wrlong	result1, fp
14704     57 00 00 FF 
14708     1C E4 05 F1 | 	add	objptr, ##44572
1470c     F2 12 02 FB | 	rdlong	arg01, objptr
14710     04 E4 05 F1 | 	add	objptr, #4
14714     F2 14 02 FB | 	rdlong	arg02, objptr
14718     04 4E 85 F1 | 	sub	fp, #4
1471c     A7 16 02 FB | 	rdlong	arg03, fp
14720     FD 18 02 F6 | 	mov	arg04, result1
14724     18 4E 85 F1 | 	sub	fp, #24
14728     08 E4 85 F1 | 	sub	objptr, #8
1472c     F2 1A 02 FB | 	rdlong	arg05, objptr
14730     57 00 00 FF 
14734     18 E4 85 F1 | 	sub	objptr, ##44568
14738     80 6C B0 FD | 	call	#_hg010b_spin2_draw
1473c     18 4E 05 F1 | 	add	fp, #24
14740     A7 1A 02 FB | 	rdlong	arg05, fp
14744     57 00 00 FF 
14748     1C E4 05 F1 | 	add	objptr, ##44572
1474c     F2 1A 62 FC | 	wrlong	arg05, objptr
14750     04 4E 05 F1 | 	add	fp, #4
14754     A7 1A 02 FB | 	rdlong	arg05, fp
14758     1C 4E 85 F1 | 	sub	fp, #28
1475c     04 E4 05 F1 | 	add	objptr, #4
14760     F2 1A 62 FC | 	wrlong	arg05, objptr
14764     57 00 00 FF 
14768     20 E4 85 F1 | 	sub	objptr, ##44576
1476c     A7 F0 03 F6 | 	mov	ptra, fp
14770     B2 00 A0 FD | 	call	#popregs_
14774                 | _do_draw_ret
14774     2D 00 64 FD | 	ret
14778                 | 
14778                 | ' 
14778                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
14778                 | ' 
14778                 | ' sub do_fcircle
14778                 | _do_fcircle
14778     02 4A 05 F6 | 	mov	COUNT_, #2
1477c     A8 00 A0 FD | 	call	#pushregs_
14780     24 F0 07 F1 | 	add	ptra, #36
14784     24 5A BF FD | 	call	#_pop
14788     FD 18 02 F6 | 	mov	arg04, result1
1478c     FE 16 02 F6 | 	mov	arg03, result2
14790     FF 14 02 F6 | 	mov	arg02, result3
14794     18 4E 05 F1 | 	add	fp, #24
14798     A7 18 62 FC | 	wrlong	arg04, fp
1479c     04 4E 05 F1 | 	add	fp, #4
147a0     A7 16 62 FC | 	wrlong	arg03, fp
147a4     04 4E 05 F1 | 	add	fp, #4
147a8     A7 14 62 FC | 	wrlong	arg02, fp
147ac     20 4E 85 F1 | 	sub	fp, #32
147b0     F8 59 BF FD | 	call	#_pop
147b4     FD 18 02 F6 | 	mov	arg04, result1
147b8     FE 16 02 F6 | 	mov	arg03, result2
147bc     FF 1E 02 F6 | 	mov	local01, result3
147c0     0C 4E 05 F1 | 	add	fp, #12
147c4     A7 18 62 FC | 	wrlong	arg04, fp
147c8     04 4E 05 F1 | 	add	fp, #4
147cc     A7 16 62 FC | 	wrlong	arg03, fp
147d0     04 4E 05 F1 | 	add	fp, #4
147d4     A7 1E 62 FC | 	wrlong	local01, fp
147d8     14 4E 85 F1 | 	sub	fp, #20
147dc     CC 59 BF FD | 	call	#_pop
147e0     A7 FA 61 FC | 	wrlong	result1, fp
147e4     04 4E 05 F1 | 	add	fp, #4
147e8     A7 FC 61 FC | 	wrlong	result2, fp
147ec     04 4E 05 F1 | 	add	fp, #4
147f0     A7 FE 61 FC | 	wrlong	result3, fp
147f4                 | ' 
147f4                 | ' t3=pop()
147f4                 | ' t2=pop()
147f4                 | ' t1=pop()
147f4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
147f4     FF 18 02 F6 | 	mov	arg04, result3
147f8     08 4E 85 F1 | 	sub	fp, #8
147fc     1C 18 0E F2 | 	cmp	arg04, #28 wz
14800     08 4E 05 51 |  if_ne	add	fp, #8
14804     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14808     08 4E 85 51 |  if_ne	sub	fp, #8
1480c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14810     7C 00 90 5D |  if_ne	jmp	#LR__1630
14814     14 4E 05 F1 | 	add	fp, #20
14818     A7 1E 02 FB | 	rdlong	local01, fp
1481c     14 4E 85 F1 | 	sub	fp, #20
14820     1C 1E 0E F2 | 	cmp	local01, #28 wz
14824     14 4E 05 51 |  if_ne	add	fp, #20
14828     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1482c     14 4E 85 51 |  if_ne	sub	fp, #20
14830     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14834     58 00 90 5D |  if_ne	jmp	#LR__1630
14838     20 4E 05 F1 | 	add	fp, #32
1483c     A7 1E 02 FB | 	rdlong	local01, fp
14840     20 4E 85 F1 | 	sub	fp, #32
14844     1C 1E 0E F2 | 	cmp	local01, #28 wz
14848     20 4E 05 51 |  if_ne	add	fp, #32
1484c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14850     20 4E 85 51 |  if_ne	sub	fp, #32
14854     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14858     34 00 90 5D |  if_ne	jmp	#LR__1630
1485c     A7 12 02 FB | 	rdlong	arg01, fp
14860     0C 4E 05 F1 | 	add	fp, #12
14864     A7 14 02 FB | 	rdlong	arg02, fp
14868     0C 4E 05 F1 | 	add	fp, #12
1486c     A7 16 02 FB | 	rdlong	arg03, fp
14870     18 4E 85 F1 | 	sub	fp, #24
14874     57 00 00 FF 
14878     18 E4 05 F1 | 	add	objptr, ##44568
1487c     F2 18 02 FB | 	rdlong	arg04, objptr
14880     57 00 00 FF 
14884     18 E4 85 F1 | 	sub	objptr, ##44568
14888     B4 6F B0 FD | 	call	#_hg010b_spin2_fcircle
1488c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1488c     54 00 90 FD | 	jmp	#LR__1631
14890                 | LR__1630
14890     A7 12 02 F6 | 	mov	arg01, fp
14894     6C E5 BF FD | 	call	#_converttoint
14898     FD 1E 02 F6 | 	mov	local01, result1
1489c     0C 4E 05 F1 | 	add	fp, #12
148a0     A7 12 02 F6 | 	mov	arg01, fp
148a4     0C 4E 85 F1 | 	sub	fp, #12
148a8     58 E5 BF FD | 	call	#_converttoint
148ac     FD 20 02 F6 | 	mov	local02, result1
148b0     18 4E 05 F1 | 	add	fp, #24
148b4     A7 12 02 F6 | 	mov	arg01, fp
148b8     18 4E 85 F1 | 	sub	fp, #24
148bc     44 E5 BF FD | 	call	#_converttoint
148c0     FD 16 02 F6 | 	mov	arg03, result1
148c4     57 00 00 FF 
148c8     18 E4 05 F1 | 	add	objptr, ##44568
148cc     F2 18 02 FB | 	rdlong	arg04, objptr
148d0     57 00 00 FF 
148d4     18 E4 85 F1 | 	sub	objptr, ##44568
148d8     0F 13 02 F6 | 	mov	arg01, local01
148dc     10 15 02 F6 | 	mov	arg02, local02
148e0     5C 6F B0 FD | 	call	#_hg010b_spin2_fcircle
148e4                 | LR__1631
148e4     A7 F0 03 F6 | 	mov	ptra, fp
148e8     B2 00 A0 FD | 	call	#popregs_
148ec                 | _do_fcircle_ret
148ec     2D 00 64 FD | 	ret
148f0                 | 
148f0                 | ' 
148f0                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
148f0                 | ' 
148f0                 | ' sub do_circle
148f0                 | _do_circle
148f0     02 4A 05 F6 | 	mov	COUNT_, #2
148f4     A8 00 A0 FD | 	call	#pushregs_
148f8     24 F0 07 F1 | 	add	ptra, #36
148fc     AC 58 BF FD | 	call	#_pop
14900     FD 18 02 F6 | 	mov	arg04, result1
14904     FE 16 02 F6 | 	mov	arg03, result2
14908     FF 14 02 F6 | 	mov	arg02, result3
1490c     18 4E 05 F1 | 	add	fp, #24
14910     A7 18 62 FC | 	wrlong	arg04, fp
14914     04 4E 05 F1 | 	add	fp, #4
14918     A7 16 62 FC | 	wrlong	arg03, fp
1491c     04 4E 05 F1 | 	add	fp, #4
14920     A7 14 62 FC | 	wrlong	arg02, fp
14924     20 4E 85 F1 | 	sub	fp, #32
14928     80 58 BF FD | 	call	#_pop
1492c     FD 18 02 F6 | 	mov	arg04, result1
14930     FE 16 02 F6 | 	mov	arg03, result2
14934     FF 1E 02 F6 | 	mov	local01, result3
14938     0C 4E 05 F1 | 	add	fp, #12
1493c     A7 18 62 FC | 	wrlong	arg04, fp
14940     04 4E 05 F1 | 	add	fp, #4
14944     A7 16 62 FC | 	wrlong	arg03, fp
14948     04 4E 05 F1 | 	add	fp, #4
1494c     A7 1E 62 FC | 	wrlong	local01, fp
14950     14 4E 85 F1 | 	sub	fp, #20
14954     54 58 BF FD | 	call	#_pop
14958     A7 FA 61 FC | 	wrlong	result1, fp
1495c     04 4E 05 F1 | 	add	fp, #4
14960     A7 FC 61 FC | 	wrlong	result2, fp
14964     04 4E 05 F1 | 	add	fp, #4
14968     A7 FE 61 FC | 	wrlong	result3, fp
1496c                 | ' 
1496c                 | ' t3=pop()
1496c                 | ' t2=pop()
1496c                 | ' t1=pop()
1496c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1496c     FF 18 02 F6 | 	mov	arg04, result3
14970     08 4E 85 F1 | 	sub	fp, #8
14974     1C 18 0E F2 | 	cmp	arg04, #28 wz
14978     08 4E 05 51 |  if_ne	add	fp, #8
1497c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14980     08 4E 85 51 |  if_ne	sub	fp, #8
14984     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14988     7C 00 90 5D |  if_ne	jmp	#LR__1640
1498c     14 4E 05 F1 | 	add	fp, #20
14990     A7 1E 02 FB | 	rdlong	local01, fp
14994     14 4E 85 F1 | 	sub	fp, #20
14998     1C 1E 0E F2 | 	cmp	local01, #28 wz
1499c     14 4E 05 51 |  if_ne	add	fp, #20
149a0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149a4     14 4E 85 51 |  if_ne	sub	fp, #20
149a8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149ac     58 00 90 5D |  if_ne	jmp	#LR__1640
149b0     20 4E 05 F1 | 	add	fp, #32
149b4     A7 1E 02 FB | 	rdlong	local01, fp
149b8     20 4E 85 F1 | 	sub	fp, #32
149bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
149c0     20 4E 05 51 |  if_ne	add	fp, #32
149c4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149c8     20 4E 85 51 |  if_ne	sub	fp, #32
149cc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149d0     34 00 90 5D |  if_ne	jmp	#LR__1640
149d4     A7 12 02 FB | 	rdlong	arg01, fp
149d8     0C 4E 05 F1 | 	add	fp, #12
149dc     A7 14 02 FB | 	rdlong	arg02, fp
149e0     0C 4E 05 F1 | 	add	fp, #12
149e4     A7 16 02 FB | 	rdlong	arg03, fp
149e8     18 4E 85 F1 | 	sub	fp, #24
149ec     57 00 00 FF 
149f0     18 E4 05 F1 | 	add	objptr, ##44568
149f4     F2 18 02 FB | 	rdlong	arg04, objptr
149f8     57 00 00 FF 
149fc     18 E4 85 F1 | 	sub	objptr, ##44568
14a00     48 6F B0 FD | 	call	#_hg010b_spin2_circle
14a04                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
14a04     54 00 90 FD | 	jmp	#LR__1641
14a08                 | LR__1640
14a08     A7 12 02 F6 | 	mov	arg01, fp
14a0c     F4 E3 BF FD | 	call	#_converttoint
14a10     FD 1E 02 F6 | 	mov	local01, result1
14a14     0C 4E 05 F1 | 	add	fp, #12
14a18     A7 12 02 F6 | 	mov	arg01, fp
14a1c     0C 4E 85 F1 | 	sub	fp, #12
14a20     E0 E3 BF FD | 	call	#_converttoint
14a24     FD 20 02 F6 | 	mov	local02, result1
14a28     18 4E 05 F1 | 	add	fp, #24
14a2c     A7 12 02 F6 | 	mov	arg01, fp
14a30     18 4E 85 F1 | 	sub	fp, #24
14a34     CC E3 BF FD | 	call	#_converttoint
14a38     FD 16 02 F6 | 	mov	arg03, result1
14a3c     57 00 00 FF 
14a40     18 E4 05 F1 | 	add	objptr, ##44568
14a44     F2 18 02 FB | 	rdlong	arg04, objptr
14a48     57 00 00 FF 
14a4c     18 E4 85 F1 | 	sub	objptr, ##44568
14a50     0F 13 02 F6 | 	mov	arg01, local01
14a54     10 15 02 F6 | 	mov	arg02, local02
14a58     F0 6E B0 FD | 	call	#_hg010b_spin2_circle
14a5c                 | LR__1641
14a5c     A7 F0 03 F6 | 	mov	ptra, fp
14a60     B2 00 A0 FD | 	call	#popregs_
14a64                 | _do_circle_ret
14a64     2D 00 64 FD | 	ret
14a68                 | 
14a68                 | ' 
14a68                 | ' ' -------------------------- Draw a rectangle
14a68                 | ' 
14a68                 | ' sub do_box
14a68                 | _do_box
14a68     03 4A 05 F6 | 	mov	COUNT_, #3
14a6c     A8 00 A0 FD | 	call	#pushregs_
14a70     30 F0 07 F1 | 	add	ptra, #48
14a74     34 57 BF FD | 	call	#_pop
14a78     FD 1A 02 F6 | 	mov	arg05, result1
14a7c     FE 18 02 F6 | 	mov	arg04, result2
14a80     FF 16 02 F6 | 	mov	arg03, result3
14a84     24 4E 05 F1 | 	add	fp, #36
14a88     A7 1A 62 FC | 	wrlong	arg05, fp
14a8c     04 4E 05 F1 | 	add	fp, #4
14a90     A7 18 62 FC | 	wrlong	arg04, fp
14a94     04 4E 05 F1 | 	add	fp, #4
14a98     A7 16 62 FC | 	wrlong	arg03, fp
14a9c     2C 4E 85 F1 | 	sub	fp, #44
14aa0     08 57 BF FD | 	call	#_pop
14aa4     FD 1A 02 F6 | 	mov	arg05, result1
14aa8     FE 18 02 F6 | 	mov	arg04, result2
14aac     FF 16 02 F6 | 	mov	arg03, result3
14ab0     18 4E 05 F1 | 	add	fp, #24
14ab4     A7 1A 62 FC | 	wrlong	arg05, fp
14ab8     04 4E 05 F1 | 	add	fp, #4
14abc     A7 18 62 FC | 	wrlong	arg04, fp
14ac0     04 4E 05 F1 | 	add	fp, #4
14ac4     A7 16 62 FC | 	wrlong	arg03, fp
14ac8     20 4E 85 F1 | 	sub	fp, #32
14acc     DC 56 BF FD | 	call	#_pop
14ad0     FD 1A 02 F6 | 	mov	arg05, result1
14ad4     FE 18 02 F6 | 	mov	arg04, result2
14ad8     FF 1E 02 F6 | 	mov	local01, result3
14adc     0C 4E 05 F1 | 	add	fp, #12
14ae0     A7 1A 62 FC | 	wrlong	arg05, fp
14ae4     04 4E 05 F1 | 	add	fp, #4
14ae8     A7 18 62 FC | 	wrlong	arg04, fp
14aec     04 4E 05 F1 | 	add	fp, #4
14af0     A7 1E 62 FC | 	wrlong	local01, fp
14af4     14 4E 85 F1 | 	sub	fp, #20
14af8     B0 56 BF FD | 	call	#_pop
14afc     A7 FA 61 FC | 	wrlong	result1, fp
14b00     04 4E 05 F1 | 	add	fp, #4
14b04     A7 FC 61 FC | 	wrlong	result2, fp
14b08     04 4E 05 F1 | 	add	fp, #4
14b0c     A7 FE 61 FC | 	wrlong	result3, fp
14b10                 | ' 
14b10                 | ' t4=pop()
14b10                 | ' t3=pop()
14b10                 | ' t2=pop()
14b10                 | ' t1=pop()
14b10                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14b10     FF 1A 02 F6 | 	mov	arg05, result3
14b14     08 4E 85 F1 | 	sub	fp, #8
14b18     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14b1c     08 4E 05 51 |  if_ne	add	fp, #8
14b20     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14b24     08 4E 85 51 |  if_ne	sub	fp, #8
14b28     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14b2c     A8 00 90 5D |  if_ne	jmp	#LR__1650
14b30     14 4E 05 F1 | 	add	fp, #20
14b34     A7 1E 02 FB | 	rdlong	local01, fp
14b38     14 4E 85 F1 | 	sub	fp, #20
14b3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b40     14 4E 05 51 |  if_ne	add	fp, #20
14b44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b48     14 4E 85 51 |  if_ne	sub	fp, #20
14b4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b50     84 00 90 5D |  if_ne	jmp	#LR__1650
14b54     20 4E 05 F1 | 	add	fp, #32
14b58     A7 1E 02 FB | 	rdlong	local01, fp
14b5c     20 4E 85 F1 | 	sub	fp, #32
14b60     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b64     20 4E 05 51 |  if_ne	add	fp, #32
14b68     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b6c     20 4E 85 51 |  if_ne	sub	fp, #32
14b70     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b74     60 00 90 5D |  if_ne	jmp	#LR__1650
14b78     2C 4E 05 F1 | 	add	fp, #44
14b7c     A7 1E 02 FB | 	rdlong	local01, fp
14b80     2C 4E 85 F1 | 	sub	fp, #44
14b84     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b88     2C 4E 05 51 |  if_ne	add	fp, #44
14b8c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b90     2C 4E 85 51 |  if_ne	sub	fp, #44
14b94     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b98     3C 00 90 5D |  if_ne	jmp	#LR__1650
14b9c     A7 12 02 FB | 	rdlong	arg01, fp
14ba0     0C 4E 05 F1 | 	add	fp, #12
14ba4     A7 14 02 FB | 	rdlong	arg02, fp
14ba8     0C 4E 05 F1 | 	add	fp, #12
14bac     A7 16 02 FB | 	rdlong	arg03, fp
14bb0     0C 4E 05 F1 | 	add	fp, #12
14bb4     A7 18 02 FB | 	rdlong	arg04, fp
14bb8     24 4E 85 F1 | 	sub	fp, #36
14bbc     57 00 00 FF 
14bc0     18 E4 05 F1 | 	add	objptr, ##44568
14bc4     F2 1A 02 FB | 	rdlong	arg05, objptr
14bc8     57 00 00 FF 
14bcc     18 E4 85 F1 | 	sub	objptr, ##44568
14bd0     44 6F B0 FD | 	call	#_hg010b_spin2_box
14bd4                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14bd4     6C 00 90 FD | 	jmp	#LR__1651
14bd8                 | LR__1650
14bd8     A7 12 02 F6 | 	mov	arg01, fp
14bdc     24 E2 BF FD | 	call	#_converttoint
14be0     FD 20 02 F6 | 	mov	local02, result1
14be4     0C 4E 05 F1 | 	add	fp, #12
14be8     A7 12 02 F6 | 	mov	arg01, fp
14bec     0C 4E 85 F1 | 	sub	fp, #12
14bf0     10 E2 BF FD | 	call	#_converttoint
14bf4     FD 22 02 F6 | 	mov	local03, result1
14bf8     18 4E 05 F1 | 	add	fp, #24
14bfc     A7 12 02 F6 | 	mov	arg01, fp
14c00     18 4E 85 F1 | 	sub	fp, #24
14c04     FC E1 BF FD | 	call	#_converttoint
14c08     FD 1E 02 F6 | 	mov	local01, result1
14c0c     24 4E 05 F1 | 	add	fp, #36
14c10     A7 12 02 F6 | 	mov	arg01, fp
14c14     24 4E 85 F1 | 	sub	fp, #36
14c18     E8 E1 BF FD | 	call	#_converttoint
14c1c     FD 18 02 F6 | 	mov	arg04, result1
14c20     57 00 00 FF 
14c24     18 E4 05 F1 | 	add	objptr, ##44568
14c28     F2 1A 02 FB | 	rdlong	arg05, objptr
14c2c     57 00 00 FF 
14c30     18 E4 85 F1 | 	sub	objptr, ##44568
14c34     10 13 02 F6 | 	mov	arg01, local02
14c38     11 15 02 F6 | 	mov	arg02, local03
14c3c     0F 17 02 F6 | 	mov	arg03, local01
14c40     D4 6E B0 FD | 	call	#_hg010b_spin2_box
14c44                 | LR__1651
14c44     A7 F0 03 F6 | 	mov	ptra, fp
14c48     B2 00 A0 FD | 	call	#popregs_
14c4c                 | _do_box_ret
14c4c     2D 00 64 FD | 	ret
14c50                 | 
14c50                 | ' 
14c50                 | ' sub do_fill
14c50                 | _do_fill
14c50     03 4A 05 F6 | 	mov	COUNT_, #3
14c54     A8 00 A0 FD | 	call	#pushregs_
14c58     30 F0 07 F1 | 	add	ptra, #48
14c5c     4C 55 BF FD | 	call	#_pop
14c60     FD 18 02 F6 | 	mov	arg04, result1
14c64     FE 16 02 F6 | 	mov	arg03, result2
14c68     FF 14 02 F6 | 	mov	arg02, result3
14c6c     24 4E 05 F1 | 	add	fp, #36
14c70     A7 18 62 FC | 	wrlong	arg04, fp
14c74     04 4E 05 F1 | 	add	fp, #4
14c78     A7 16 62 FC | 	wrlong	arg03, fp
14c7c     04 4E 05 F1 | 	add	fp, #4
14c80     A7 14 62 FC | 	wrlong	arg02, fp
14c84     2C 4E 85 F1 | 	sub	fp, #44
14c88     20 55 BF FD | 	call	#_pop
14c8c     FD 18 02 F6 | 	mov	arg04, result1
14c90     FE 16 02 F6 | 	mov	arg03, result2
14c94     FF 14 02 F6 | 	mov	arg02, result3
14c98     18 4E 05 F1 | 	add	fp, #24
14c9c     A7 18 62 FC | 	wrlong	arg04, fp
14ca0     04 4E 05 F1 | 	add	fp, #4
14ca4     A7 16 62 FC | 	wrlong	arg03, fp
14ca8     04 4E 05 F1 | 	add	fp, #4
14cac     A7 14 62 FC | 	wrlong	arg02, fp
14cb0     20 4E 85 F1 | 	sub	fp, #32
14cb4     F4 54 BF FD | 	call	#_pop
14cb8     FD 18 02 F6 | 	mov	arg04, result1
14cbc     FE 16 02 F6 | 	mov	arg03, result2
14cc0     FF 1E 02 F6 | 	mov	local01, result3
14cc4     0C 4E 05 F1 | 	add	fp, #12
14cc8     A7 18 62 FC | 	wrlong	arg04, fp
14ccc     04 4E 05 F1 | 	add	fp, #4
14cd0     A7 16 62 FC | 	wrlong	arg03, fp
14cd4     04 4E 05 F1 | 	add	fp, #4
14cd8     A7 1E 62 FC | 	wrlong	local01, fp
14cdc     14 4E 85 F1 | 	sub	fp, #20
14ce0     C8 54 BF FD | 	call	#_pop
14ce4     A7 FA 61 FC | 	wrlong	result1, fp
14ce8     04 4E 05 F1 | 	add	fp, #4
14cec     A7 FC 61 FC | 	wrlong	result2, fp
14cf0     04 4E 05 F1 | 	add	fp, #4
14cf4     A7 FE 61 FC | 	wrlong	result3, fp
14cf8                 | ' 
14cf8                 | ' t4=pop()
14cf8                 | ' t3=pop()
14cf8                 | ' t2=pop()
14cf8                 | ' t1=pop()
14cf8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14cf8     FF 18 02 F6 | 	mov	arg04, result3
14cfc     08 4E 85 F1 | 	sub	fp, #8
14d00     1C 18 0E F2 | 	cmp	arg04, #28 wz
14d04     08 4E 05 51 |  if_ne	add	fp, #8
14d08     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14d0c     08 4E 85 51 |  if_ne	sub	fp, #8
14d10     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14d14     94 00 90 5D |  if_ne	jmp	#LR__1660
14d18     14 4E 05 F1 | 	add	fp, #20
14d1c     A7 1E 02 FB | 	rdlong	local01, fp
14d20     14 4E 85 F1 | 	sub	fp, #20
14d24     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d28     14 4E 05 51 |  if_ne	add	fp, #20
14d2c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d30     14 4E 85 51 |  if_ne	sub	fp, #20
14d34     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d38     70 00 90 5D |  if_ne	jmp	#LR__1660
14d3c     20 4E 05 F1 | 	add	fp, #32
14d40     A7 1E 02 FB | 	rdlong	local01, fp
14d44     20 4E 85 F1 | 	sub	fp, #32
14d48     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d4c     20 4E 05 51 |  if_ne	add	fp, #32
14d50     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d54     20 4E 85 51 |  if_ne	sub	fp, #32
14d58     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d5c     4C 00 90 5D |  if_ne	jmp	#LR__1660
14d60     2C 4E 05 F1 | 	add	fp, #44
14d64     A7 1E 02 FB | 	rdlong	local01, fp
14d68     2C 4E 85 F1 | 	sub	fp, #44
14d6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d70     2C 4E 05 51 |  if_ne	add	fp, #44
14d74     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d78     2C 4E 85 51 |  if_ne	sub	fp, #44
14d7c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d80     28 00 90 5D |  if_ne	jmp	#LR__1660
14d84     A7 12 02 FB | 	rdlong	arg01, fp
14d88     0C 4E 05 F1 | 	add	fp, #12
14d8c     A7 14 02 FB | 	rdlong	arg02, fp
14d90     0C 4E 05 F1 | 	add	fp, #12
14d94     A7 16 02 FB | 	rdlong	arg03, fp
14d98     0C 4E 05 F1 | 	add	fp, #12
14d9c     A7 18 02 FB | 	rdlong	arg04, fp
14da0     24 4E 85 F1 | 	sub	fp, #36
14da4     04 68 B0 FD | 	call	#_hg010b_spin2_fill
14da8                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
14da8     58 00 90 FD | 	jmp	#LR__1661
14dac                 | LR__1660
14dac     A7 12 02 F6 | 	mov	arg01, fp
14db0     50 E0 BF FD | 	call	#_converttoint
14db4     FD 20 02 F6 | 	mov	local02, result1
14db8     0C 4E 05 F1 | 	add	fp, #12
14dbc     A7 12 02 F6 | 	mov	arg01, fp
14dc0     0C 4E 85 F1 | 	sub	fp, #12
14dc4     3C E0 BF FD | 	call	#_converttoint
14dc8     FD 22 02 F6 | 	mov	local03, result1
14dcc     18 4E 05 F1 | 	add	fp, #24
14dd0     A7 12 02 F6 | 	mov	arg01, fp
14dd4     18 4E 85 F1 | 	sub	fp, #24
14dd8     28 E0 BF FD | 	call	#_converttoint
14ddc     FD 1E 02 F6 | 	mov	local01, result1
14de0     24 4E 05 F1 | 	add	fp, #36
14de4     A7 12 02 F6 | 	mov	arg01, fp
14de8     24 4E 85 F1 | 	sub	fp, #36
14dec     14 E0 BF FD | 	call	#_converttoint
14df0     FD 18 02 F6 | 	mov	arg04, result1
14df4     10 13 02 F6 | 	mov	arg01, local02
14df8     11 15 02 F6 | 	mov	arg02, local03
14dfc     0F 17 02 F6 | 	mov	arg03, local01
14e00     A8 67 B0 FD | 	call	#_hg010b_spin2_fill
14e04                 | LR__1661
14e04     A7 F0 03 F6 | 	mov	ptra, fp
14e08     B2 00 A0 FD | 	call	#popregs_
14e0c                 | _do_fill_ret
14e0c     2D 00 64 FD | 	ret
14e10                 | 
14e10                 | ' 
14e10                 | ' ' -------------------------- Draw a frane
14e10                 | ' 
14e10                 | ' sub do_frame
14e10                 | _do_frame
14e10     03 4A 05 F6 | 	mov	COUNT_, #3
14e14     A8 00 A0 FD | 	call	#pushregs_
14e18     30 F0 07 F1 | 	add	ptra, #48
14e1c     8C 53 BF FD | 	call	#_pop
14e20     FD 1A 02 F6 | 	mov	arg05, result1
14e24     FE 18 02 F6 | 	mov	arg04, result2
14e28     FF 16 02 F6 | 	mov	arg03, result3
14e2c     24 4E 05 F1 | 	add	fp, #36
14e30     A7 1A 62 FC | 	wrlong	arg05, fp
14e34     04 4E 05 F1 | 	add	fp, #4
14e38     A7 18 62 FC | 	wrlong	arg04, fp
14e3c     04 4E 05 F1 | 	add	fp, #4
14e40     A7 16 62 FC | 	wrlong	arg03, fp
14e44     2C 4E 85 F1 | 	sub	fp, #44
14e48     60 53 BF FD | 	call	#_pop
14e4c     FD 1A 02 F6 | 	mov	arg05, result1
14e50     FE 18 02 F6 | 	mov	arg04, result2
14e54     FF 16 02 F6 | 	mov	arg03, result3
14e58     18 4E 05 F1 | 	add	fp, #24
14e5c     A7 1A 62 FC | 	wrlong	arg05, fp
14e60     04 4E 05 F1 | 	add	fp, #4
14e64     A7 18 62 FC | 	wrlong	arg04, fp
14e68     04 4E 05 F1 | 	add	fp, #4
14e6c     A7 16 62 FC | 	wrlong	arg03, fp
14e70     20 4E 85 F1 | 	sub	fp, #32
14e74     34 53 BF FD | 	call	#_pop
14e78     FD 1A 02 F6 | 	mov	arg05, result1
14e7c     FE 18 02 F6 | 	mov	arg04, result2
14e80     FF 1E 02 F6 | 	mov	local01, result3
14e84     0C 4E 05 F1 | 	add	fp, #12
14e88     A7 1A 62 FC | 	wrlong	arg05, fp
14e8c     04 4E 05 F1 | 	add	fp, #4
14e90     A7 18 62 FC | 	wrlong	arg04, fp
14e94     04 4E 05 F1 | 	add	fp, #4
14e98     A7 1E 62 FC | 	wrlong	local01, fp
14e9c     14 4E 85 F1 | 	sub	fp, #20
14ea0     08 53 BF FD | 	call	#_pop
14ea4     A7 FA 61 FC | 	wrlong	result1, fp
14ea8     04 4E 05 F1 | 	add	fp, #4
14eac     A7 FC 61 FC | 	wrlong	result2, fp
14eb0     04 4E 05 F1 | 	add	fp, #4
14eb4     A7 FE 61 FC | 	wrlong	result3, fp
14eb8                 | ' 
14eb8                 | ' t4=pop()
14eb8                 | ' t3=pop()
14eb8                 | ' t2=pop()
14eb8                 | ' t1=pop()
14eb8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14eb8     FF 1A 02 F6 | 	mov	arg05, result3
14ebc     08 4E 85 F1 | 	sub	fp, #8
14ec0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14ec4     08 4E 05 51 |  if_ne	add	fp, #8
14ec8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14ecc     08 4E 85 51 |  if_ne	sub	fp, #8
14ed0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14ed4     A8 00 90 5D |  if_ne	jmp	#LR__1670
14ed8     14 4E 05 F1 | 	add	fp, #20
14edc     A7 1E 02 FB | 	rdlong	local01, fp
14ee0     14 4E 85 F1 | 	sub	fp, #20
14ee4     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ee8     14 4E 05 51 |  if_ne	add	fp, #20
14eec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14ef0     14 4E 85 51 |  if_ne	sub	fp, #20
14ef4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14ef8     84 00 90 5D |  if_ne	jmp	#LR__1670
14efc     20 4E 05 F1 | 	add	fp, #32
14f00     A7 1E 02 FB | 	rdlong	local01, fp
14f04     20 4E 85 F1 | 	sub	fp, #32
14f08     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f0c     20 4E 05 51 |  if_ne	add	fp, #32
14f10     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f14     20 4E 85 51 |  if_ne	sub	fp, #32
14f18     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f1c     60 00 90 5D |  if_ne	jmp	#LR__1670
14f20     2C 4E 05 F1 | 	add	fp, #44
14f24     A7 1E 02 FB | 	rdlong	local01, fp
14f28     2C 4E 85 F1 | 	sub	fp, #44
14f2c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f30     2C 4E 05 51 |  if_ne	add	fp, #44
14f34     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f38     2C 4E 85 51 |  if_ne	sub	fp, #44
14f3c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f40     3C 00 90 5D |  if_ne	jmp	#LR__1670
14f44     A7 12 02 FB | 	rdlong	arg01, fp
14f48     0C 4E 05 F1 | 	add	fp, #12
14f4c     A7 14 02 FB | 	rdlong	arg02, fp
14f50     0C 4E 05 F1 | 	add	fp, #12
14f54     A7 16 02 FB | 	rdlong	arg03, fp
14f58     0C 4E 05 F1 | 	add	fp, #12
14f5c     A7 18 02 FB | 	rdlong	arg04, fp
14f60     24 4E 85 F1 | 	sub	fp, #36
14f64     57 00 00 FF 
14f68     18 E4 05 F1 | 	add	objptr, ##44568
14f6c     F2 1A 02 FB | 	rdlong	arg05, objptr
14f70     57 00 00 FF 
14f74     18 E4 85 F1 | 	sub	objptr, ##44568
14f78     1C 6B B0 FD | 	call	#_hg010b_spin2_frame
14f7c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14f7c     6C 00 90 FD | 	jmp	#LR__1671
14f80                 | LR__1670
14f80     A7 12 02 F6 | 	mov	arg01, fp
14f84     7C DE BF FD | 	call	#_converttoint
14f88     FD 20 02 F6 | 	mov	local02, result1
14f8c     0C 4E 05 F1 | 	add	fp, #12
14f90     A7 12 02 F6 | 	mov	arg01, fp
14f94     0C 4E 85 F1 | 	sub	fp, #12
14f98     68 DE BF FD | 	call	#_converttoint
14f9c     FD 22 02 F6 | 	mov	local03, result1
14fa0     18 4E 05 F1 | 	add	fp, #24
14fa4     A7 12 02 F6 | 	mov	arg01, fp
14fa8     18 4E 85 F1 | 	sub	fp, #24
14fac     54 DE BF FD | 	call	#_converttoint
14fb0     FD 1E 02 F6 | 	mov	local01, result1
14fb4     24 4E 05 F1 | 	add	fp, #36
14fb8     A7 12 02 F6 | 	mov	arg01, fp
14fbc     24 4E 85 F1 | 	sub	fp, #36
14fc0     40 DE BF FD | 	call	#_converttoint
14fc4     FD 18 02 F6 | 	mov	arg04, result1
14fc8     57 00 00 FF 
14fcc     18 E4 05 F1 | 	add	objptr, ##44568
14fd0     F2 1A 02 FB | 	rdlong	arg05, objptr
14fd4     57 00 00 FF 
14fd8     18 E4 85 F1 | 	sub	objptr, ##44568
14fdc     10 13 02 F6 | 	mov	arg01, local02
14fe0     11 15 02 F6 | 	mov	arg02, local03
14fe4     0F 17 02 F6 | 	mov	arg03, local01
14fe8     AC 6A B0 FD | 	call	#_hg010b_spin2_frame
14fec                 | LR__1671
14fec     A7 F0 03 F6 | 	mov	ptra, fp
14ff0     B2 00 A0 FD | 	call	#popregs_
14ff4                 | _do_frame_ret
14ff4     2D 00 64 FD | 	ret
14ff8                 | 
14ff8                 | ' 
14ff8                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
14ff8                 | ' 
14ff8                 | ' ' ------------------------- Print to the screem
14ff8                 | ' 
14ff8                 | ' sub do_print  
14ff8                 | _do_print
14ff8     0A 4A 05 F6 | 	mov	COUNT_, #10
14ffc     A8 00 A0 FD | 	call	#pushregs_
15000     00 24 06 F6 | 	mov	local04, #0
15004     A4 51 BF FD | 	call	#_pop
15008     FD 26 02 F6 | 	mov	local05, result1
1500c     FE 28 02 F6 | 	mov	local06, result2
15010     FF 2A 02 F6 | 	mov	local07, result3
15014     13 1F 02 F6 | 	mov	local01, local05
15018     14 21 02 F6 | 	mov	local02, local06
1501c     15 23 02 F6 | 	mov	local03, local07
15020                 | '  
15020                 | ' r=0
15020                 | ' t1=pop() 
15020                 | ' 'print t1.result_type,t1.result.uresult
15020                 | ' 
15020                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
15020     21 22 0E F2 | 	cmp	local03, #33 wz
15024     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
15028     20 00 90 5D |  if_ne	jmp	#LR__1680
1502c     11 25 02 F6 | 	mov	local04, local03
15030     78 51 BF FD | 	call	#_pop
15034     FD 26 02 F6 | 	mov	local05, result1
15038     FE 28 02 F6 | 	mov	local06, result2
1503c     FF 2A 02 F6 | 	mov	local07, result3
15040     13 1F 02 F6 | 	mov	local01, local05
15044     14 21 02 F6 | 	mov	local02, local06
15048     15 23 02 F6 | 	mov	local03, local07
1504c                 | LR__1680
1504c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
1504c     20 22 0E F2 | 	cmp	local03, #32 wz
15050     11 25 02 A6 |  if_e	mov	local04, local03
15054                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
15054     FF 22 0E F2 | 	cmp	local03, #255 wz
15058     0C 00 90 5D |  if_ne	jmp	#LR__1681
1505c     0F 13 02 F6 | 	mov	arg01, local01
15060     A8 3F B0 FD | 	call	#_printerror
15064     4C 04 90 FD | 	jmp	#LR__1699
15068                 | LR__1681
15068                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
15068     2B 22 0E F2 | 	cmp	local03, #43 wz
1506c     14 00 90 5D |  if_ne	jmp	#LR__1682
15070     0F 13 02 F6 | 	mov	arg01, local01
15074     DC 93 BF FD | 	call	#_convertstring
15078     FD 26 02 F6 | 	mov	local05, result1
1507c     13 1F 02 F6 | 	mov	local01, local05
15080     1F 22 06 F6 | 	mov	local03, #31
15084                 | LR__1682
15084                 | ' 
15084                 | ' if r=print_mod_comma  then
15084     21 24 0E F2 | 	cmp	local04, #33 wz
15088     AC 01 90 5D |  if_ne	jmp	#LR__1687
1508c                 | '   if t1.result_type=result_int then print t1.result.iresult,
1508c     1C 22 0E F2 | 	cmp	local03, #28 wz
15090     64 00 90 5D |  if_ne	jmp	#LR__1683
15094     00 12 06 F6 | 	mov	arg01, #0
15098     40 DD B0 FD | 	call	#__system___getiolock_0473
1509c     FD 12 02 F6 | 	mov	arg01, result1
150a0     A8 83 B0 FD | 	call	#__system___lockmem
150a4     00 28 06 F6 | 	mov	local06, #0
150a8     00 12 06 F6 | 	mov	arg01, #0
150ac     0F 15 02 F6 | 	mov	arg02, local01
150b0     00 16 06 F6 | 	mov	arg03, #0
150b4     0A 18 06 F6 | 	mov	arg04, #10
150b8     D8 90 B0 FD | 	call	#__system___basic_print_integer
150bc     FD 2A 02 F6 | 	mov	local07, result1
150c0     14 27 02 F6 | 	mov	local05, local06
150c4     15 27 02 F1 | 	add	local05, local07
150c8     00 2C 06 F6 | 	mov	local08, #0
150cc     00 12 06 F6 | 	mov	arg01, #0
150d0     09 14 06 F6 | 	mov	arg02, #9
150d4     00 16 06 F6 | 	mov	arg03, #0
150d8     1C 90 B0 FD | 	call	#__system___basic_print_char
150dc     FD 2E 02 F6 | 	mov	local09, result1
150e0     FD 26 02 F1 | 	add	local05, result1
150e4     00 12 06 F6 | 	mov	arg01, #0
150e8     F0 DC B0 FD | 	call	#__system___getiolock_0473
150ec     FD 00 68 FC | 	wrlong	#0, result1
150f0     00 FA 05 F6 | 	mov	result1, #0
150f4     00 30 06 F6 | 	mov	local10, #0
150f8                 | LR__1683
150f8                 | '   if t1.result_type=result_uint then print t1.result.uresult,
150f8     1D 22 0E F2 | 	cmp	local03, #29 wz
150fc     64 00 90 5D |  if_ne	jmp	#LR__1684
15100     00 12 06 F6 | 	mov	arg01, #0
15104     D4 DC B0 FD | 	call	#__system___getiolock_0473
15108     FD 12 02 F6 | 	mov	arg01, result1
1510c     3C 83 B0 FD | 	call	#__system___lockmem
15110     00 28 06 F6 | 	mov	local06, #0
15114     00 12 06 F6 | 	mov	arg01, #0
15118     0F 15 02 F6 | 	mov	arg02, local01
1511c     00 16 06 F6 | 	mov	arg03, #0
15120     0A 18 06 F6 | 	mov	arg04, #10
15124     AC 90 B0 FD | 	call	#__system___basic_print_unsigned
15128     FD 2A 02 F6 | 	mov	local07, result1
1512c     14 27 02 F6 | 	mov	local05, local06
15130     15 27 02 F1 | 	add	local05, local07
15134     00 2C 06 F6 | 	mov	local08, #0
15138     00 12 06 F6 | 	mov	arg01, #0
1513c     09 14 06 F6 | 	mov	arg02, #9
15140     00 16 06 F6 | 	mov	arg03, #0
15144     B0 8F B0 FD | 	call	#__system___basic_print_char
15148     FD 2E 02 F6 | 	mov	local09, result1
1514c     FD 26 02 F1 | 	add	local05, result1
15150     00 12 06 F6 | 	mov	arg01, #0
15154     84 DC B0 FD | 	call	#__system___getiolock_0473
15158     FD 00 68 FC | 	wrlong	#0, result1
1515c     00 FA 05 F6 | 	mov	result1, #0
15160     00 30 06 F6 | 	mov	local10, #0
15164                 | LR__1684
15164                 | '   if t1.result_type=result_float then print t1.result.fresult,
15164     1E 22 0E F2 | 	cmp	local03, #30 wz
15168     64 00 90 5D |  if_ne	jmp	#LR__1685
1516c     00 12 06 F6 | 	mov	arg01, #0
15170     68 DC B0 FD | 	call	#__system___getiolock_0473
15174     FD 12 02 F6 | 	mov	arg01, result1
15178     D0 82 B0 FD | 	call	#__system___lockmem
1517c     00 28 06 F6 | 	mov	local06, #0
15180     00 12 06 F6 | 	mov	arg01, #0
15184     0F 15 02 F6 | 	mov	arg02, local01
15188     00 16 06 F6 | 	mov	arg03, #0
1518c     23 18 06 F6 | 	mov	arg04, #35
15190     4C B4 B0 FD | 	call	#__system___basic_print_float
15194     FD 2A 02 F6 | 	mov	local07, result1
15198     14 27 02 F6 | 	mov	local05, local06
1519c     15 27 02 F1 | 	add	local05, local07
151a0     00 2C 06 F6 | 	mov	local08, #0
151a4     00 12 06 F6 | 	mov	arg01, #0
151a8     09 14 06 F6 | 	mov	arg02, #9
151ac     00 16 06 F6 | 	mov	arg03, #0
151b0     44 8F B0 FD | 	call	#__system___basic_print_char
151b4     FD 2E 02 F6 | 	mov	local09, result1
151b8     FD 26 02 F1 | 	add	local05, result1
151bc     00 12 06 F6 | 	mov	arg01, #0
151c0     18 DC B0 FD | 	call	#__system___getiolock_0473
151c4     FD 00 68 FC | 	wrlong	#0, result1
151c8     00 FA 05 F6 | 	mov	result1, #0
151cc     00 30 06 F6 | 	mov	local10, #0
151d0                 | LR__1685
151d0                 | '   if t1.result_type=result_string then print t1.result.sresult,
151d0     1F 22 0E F2 | 	cmp	local03, #31 wz
151d4     60 00 90 5D |  if_ne	jmp	#LR__1686
151d8     00 12 06 F6 | 	mov	arg01, #0
151dc     FC DB B0 FD | 	call	#__system___getiolock_0473
151e0     FD 12 02 F6 | 	mov	arg01, result1
151e4     64 82 B0 FD | 	call	#__system___lockmem
151e8     00 28 06 F6 | 	mov	local06, #0
151ec     00 12 06 F6 | 	mov	arg01, #0
151f0     0F 15 02 F6 | 	mov	arg02, local01
151f4     00 16 06 F6 | 	mov	arg03, #0
151f8     54 8F B0 FD | 	call	#__system___basic_print_string
151fc     FD 2A 02 F6 | 	mov	local07, result1
15200     14 27 02 F6 | 	mov	local05, local06
15204     15 27 02 F1 | 	add	local05, local07
15208     00 2C 06 F6 | 	mov	local08, #0
1520c     00 12 06 F6 | 	mov	arg01, #0
15210     09 14 06 F6 | 	mov	arg02, #9
15214     00 16 06 F6 | 	mov	arg03, #0
15218     DC 8E B0 FD | 	call	#__system___basic_print_char
1521c     FD 2E 02 F6 | 	mov	local09, result1
15220     FD 26 02 F1 | 	add	local05, result1
15224     00 12 06 F6 | 	mov	arg01, #0
15228     B0 DB B0 FD | 	call	#__system___getiolock_0473
1522c     FD 00 68 FC | 	wrlong	#0, result1
15230     00 FA 05 F6 | 	mov	result1, #0
15234     00 30 06 F6 | 	mov	local10, #0
15238                 | LR__1686
15238                 | LR__1687
15238                 | ' if r=print_mod_semicolon then 
15238     22 24 0E F2 | 	cmp	local04, #34 wz
1523c     1C 01 90 5D |  if_ne	jmp	#LR__1692
15240                 | '   if t1.result_type=result_int then print t1.result.iresult;
15240     1C 22 0E F2 | 	cmp	local03, #28 wz
15244     50 00 90 5D |  if_ne	jmp	#LR__1688
15248     00 12 06 F6 | 	mov	arg01, #0
1524c     8C DB B0 FD | 	call	#__system___getiolock_0473
15250     FD 12 02 F6 | 	mov	arg01, result1
15254     F4 81 B0 FD | 	call	#__system___lockmem
15258     00 28 06 F6 | 	mov	local06, #0
1525c     00 30 06 F6 | 	mov	local10, #0
15260     0A 2C 06 F6 | 	mov	local08, #10
15264     00 12 06 F6 | 	mov	arg01, #0
15268     0F 15 02 F6 | 	mov	arg02, local01
1526c     00 16 06 F6 | 	mov	arg03, #0
15270     0A 18 06 F6 | 	mov	arg04, #10
15274     1C 8F B0 FD | 	call	#__system___basic_print_integer
15278     FD 2A 02 F6 | 	mov	local07, result1
1527c     14 27 02 F6 | 	mov	local05, local06
15280     15 27 02 F1 | 	add	local05, local07
15284     00 12 06 F6 | 	mov	arg01, #0
15288     50 DB B0 FD | 	call	#__system___getiolock_0473
1528c     FD 00 68 FC | 	wrlong	#0, result1
15290     00 FA 05 F6 | 	mov	result1, #0
15294     00 2E 06 F6 | 	mov	local09, #0
15298                 | LR__1688
15298                 | '   if t1.result_type=result_uint then print t1.result.uresult;
15298     1D 22 0E F2 | 	cmp	local03, #29 wz
1529c     50 00 90 5D |  if_ne	jmp	#LR__1689
152a0     00 12 06 F6 | 	mov	arg01, #0
152a4     34 DB B0 FD | 	call	#__system___getiolock_0473
152a8     FD 12 02 F6 | 	mov	arg01, result1
152ac     9C 81 B0 FD | 	call	#__system___lockmem
152b0     00 28 06 F6 | 	mov	local06, #0
152b4     00 30 06 F6 | 	mov	local10, #0
152b8     0A 2C 06 F6 | 	mov	local08, #10
152bc     00 12 06 F6 | 	mov	arg01, #0
152c0     0F 15 02 F6 | 	mov	arg02, local01
152c4     00 16 06 F6 | 	mov	arg03, #0
152c8     0A 18 06 F6 | 	mov	arg04, #10
152cc     04 8F B0 FD | 	call	#__system___basic_print_unsigned
152d0     FD 2A 02 F6 | 	mov	local07, result1
152d4     14 27 02 F6 | 	mov	local05, local06
152d8     15 27 02 F1 | 	add	local05, local07
152dc     00 12 06 F6 | 	mov	arg01, #0
152e0     F8 DA B0 FD | 	call	#__system___getiolock_0473
152e4     FD 00 68 FC | 	wrlong	#0, result1
152e8     00 FA 05 F6 | 	mov	result1, #0
152ec     00 2E 06 F6 | 	mov	local09, #0
152f0                 | LR__1689
152f0                 | '   if t1.result_type=result_float then print t1.result.fresult;
152f0     1E 22 0E F2 | 	cmp	local03, #30 wz
152f4     30 00 90 5D |  if_ne	jmp	#LR__1690
152f8     00 12 06 F6 | 	mov	arg01, #0
152fc     DC DA B0 FD | 	call	#__system___getiolock_0473
15300     FD 12 02 F6 | 	mov	arg01, result1
15304     44 81 B0 FD | 	call	#__system___lockmem
15308     00 12 06 F6 | 	mov	arg01, #0
1530c     0F 15 02 F6 | 	mov	arg02, local01
15310     00 16 06 F6 | 	mov	arg03, #0
15314     23 18 06 F6 | 	mov	arg04, #35
15318     C4 B2 B0 FD | 	call	#__system___basic_print_float
1531c     00 12 06 F6 | 	mov	arg01, #0
15320     B8 DA B0 FD | 	call	#__system___getiolock_0473
15324     FD 00 68 FC | 	wrlong	#0, result1
15328                 | LR__1690
15328                 | '   if t1.result_type=result_string then print t1.result.sresult;
15328     1F 22 0E F2 | 	cmp	local03, #31 wz
1532c     2C 00 90 5D |  if_ne	jmp	#LR__1691
15330     00 12 06 F6 | 	mov	arg01, #0
15334     A4 DA B0 FD | 	call	#__system___getiolock_0473
15338     FD 12 02 F6 | 	mov	arg01, result1
1533c     0C 81 B0 FD | 	call	#__system___lockmem
15340     00 12 06 F6 | 	mov	arg01, #0
15344     0F 15 02 F6 | 	mov	arg02, local01
15348     00 16 06 F6 | 	mov	arg03, #0
1534c     00 8E B0 FD | 	call	#__system___basic_print_string
15350     00 12 06 F6 | 	mov	arg01, #0
15354     84 DA B0 FD | 	call	#__system___getiolock_0473
15358     FD 00 68 FC | 	wrlong	#0, result1
1535c                 | LR__1691
1535c                 | LR__1692
1535c                 | ' if r=0 then 
1535c     00 24 0E F2 | 	cmp	local04, #0 wz
15360     1C 01 90 5D |  if_ne	jmp	#LR__1697
15364                 | '   if t1.result_type=result_int then print t1.result.iresult
15364     1C 22 0E F2 | 	cmp	local03, #28 wz
15368     40 00 90 5D |  if_ne	jmp	#LR__1693
1536c     00 12 06 F6 | 	mov	arg01, #0
15370     68 DA B0 FD | 	call	#__system___getiolock_0473
15374     FD 12 02 F6 | 	mov	arg01, result1
15378     D0 80 B0 FD | 	call	#__system___lockmem
1537c     00 12 06 F6 | 	mov	arg01, #0
15380     0F 15 02 F6 | 	mov	arg02, local01
15384     00 16 06 F6 | 	mov	arg03, #0
15388     0A 18 06 F6 | 	mov	arg04, #10
1538c     04 8E B0 FD | 	call	#__system___basic_print_integer
15390     00 12 06 F6 | 	mov	arg01, #0
15394     0A 14 06 F6 | 	mov	arg02, #10
15398     00 16 06 F6 | 	mov	arg03, #0
1539c     58 8D B0 FD | 	call	#__system___basic_print_char
153a0     00 12 06 F6 | 	mov	arg01, #0
153a4     34 DA B0 FD | 	call	#__system___getiolock_0473
153a8     FD 00 68 FC | 	wrlong	#0, result1
153ac                 | LR__1693
153ac                 | '   if t1.result_type=result_uint then print t1.result.uresult
153ac     1D 22 0E F2 | 	cmp	local03, #29 wz
153b0     40 00 90 5D |  if_ne	jmp	#LR__1694
153b4     00 12 06 F6 | 	mov	arg01, #0
153b8     20 DA B0 FD | 	call	#__system___getiolock_0473
153bc     FD 12 02 F6 | 	mov	arg01, result1
153c0     88 80 B0 FD | 	call	#__system___lockmem
153c4     00 12 06 F6 | 	mov	arg01, #0
153c8     0F 15 02 F6 | 	mov	arg02, local01
153cc     00 16 06 F6 | 	mov	arg03, #0
153d0     0A 18 06 F6 | 	mov	arg04, #10
153d4     FC 8D B0 FD | 	call	#__system___basic_print_unsigned
153d8     00 12 06 F6 | 	mov	arg01, #0
153dc     0A 14 06 F6 | 	mov	arg02, #10
153e0     00 16 06 F6 | 	mov	arg03, #0
153e4     10 8D B0 FD | 	call	#__system___basic_print_char
153e8     00 12 06 F6 | 	mov	arg01, #0
153ec     EC D9 B0 FD | 	call	#__system___getiolock_0473
153f0     FD 00 68 FC | 	wrlong	#0, result1
153f4                 | LR__1694
153f4                 | '   if t1.result_type=result_float then print t1.result.fresult
153f4     1E 22 0E F2 | 	cmp	local03, #30 wz
153f8     40 00 90 5D |  if_ne	jmp	#LR__1695
153fc     00 12 06 F6 | 	mov	arg01, #0
15400     D8 D9 B0 FD | 	call	#__system___getiolock_0473
15404     FD 12 02 F6 | 	mov	arg01, result1
15408     40 80 B0 FD | 	call	#__system___lockmem
1540c     00 12 06 F6 | 	mov	arg01, #0
15410     0F 15 02 F6 | 	mov	arg02, local01
15414     00 16 06 F6 | 	mov	arg03, #0
15418     23 18 06 F6 | 	mov	arg04, #35
1541c     C0 B1 B0 FD | 	call	#__system___basic_print_float
15420     00 12 06 F6 | 	mov	arg01, #0
15424     0A 14 06 F6 | 	mov	arg02, #10
15428     00 16 06 F6 | 	mov	arg03, #0
1542c     C8 8C B0 FD | 	call	#__system___basic_print_char
15430     00 12 06 F6 | 	mov	arg01, #0
15434     A4 D9 B0 FD | 	call	#__system___getiolock_0473
15438     FD 00 68 FC | 	wrlong	#0, result1
1543c                 | LR__1695
1543c                 | '   if t1.result_type=result_string then print t1.result.sresult
1543c     1F 22 0E F2 | 	cmp	local03, #31 wz
15440     3C 00 90 5D |  if_ne	jmp	#LR__1696
15444     00 12 06 F6 | 	mov	arg01, #0
15448     90 D9 B0 FD | 	call	#__system___getiolock_0473
1544c     FD 12 02 F6 | 	mov	arg01, result1
15450     F8 7F B0 FD | 	call	#__system___lockmem
15454     00 12 06 F6 | 	mov	arg01, #0
15458     0F 15 02 F6 | 	mov	arg02, local01
1545c     00 16 06 F6 | 	mov	arg03, #0
15460     EC 8C B0 FD | 	call	#__system___basic_print_string
15464     00 12 06 F6 | 	mov	arg01, #0
15468     0A 14 06 F6 | 	mov	arg02, #10
1546c     00 16 06 F6 | 	mov	arg03, #0
15470     84 8C B0 FD | 	call	#__system___basic_print_char
15474     00 12 06 F6 | 	mov	arg01, #0
15478     60 D9 B0 FD | 	call	#__system___getiolock_0473
1547c     FD 00 68 FC | 	wrlong	#0, result1
15480                 | LR__1696
15480                 | LR__1697
15480                 | ' if r=print_mod_empty then print
15480     20 24 0E F2 | 	cmp	local04, #32 wz
15484     2C 00 90 5D |  if_ne	jmp	#LR__1698
15488     00 12 06 F6 | 	mov	arg01, #0
1548c     4C D9 B0 FD | 	call	#__system___getiolock_0473
15490     FD 12 02 F6 | 	mov	arg01, result1
15494     B4 7F B0 FD | 	call	#__system___lockmem
15498     00 12 06 F6 | 	mov	arg01, #0
1549c     0A 14 06 F6 | 	mov	arg02, #10
154a0     00 16 06 F6 | 	mov	arg03, #0
154a4     50 8C B0 FD | 	call	#__system___basic_print_char
154a8     00 12 06 F6 | 	mov	arg01, #0
154ac     2C D9 B0 FD | 	call	#__system___getiolock_0473
154b0     FD 00 68 FC | 	wrlong	#0, result1
154b4                 | LR__1698
154b4                 | LR__1699
154b4     A7 F0 03 F6 | 	mov	ptra, fp
154b8     B2 00 A0 FD | 	call	#popregs_
154bc                 | _do_print_ret
154bc     2D 00 64 FD | 	ret
154c0                 | 
154c0                 | ' 
154c0                 | ' 
154c0                 | ' sub do_paper
154c0                 | _do_paper
154c0     03 4A 05 F6 | 	mov	COUNT_, #3
154c4     A8 00 A0 FD | 	call	#pushregs_
154c8     E0 4C BF FD | 	call	#_pop
154cc     FD 1E 02 F6 | 	mov	local01, result1
154d0     FE 20 02 F6 | 	mov	local02, result2
154d4     FF 22 02 F6 | 	mov	local03, result3
154d8                 | ' t1=pop() 
154d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
154d8     1E 22 0E F2 | 	cmp	local03, #30 wz
154dc     10 00 90 5D |  if_ne	jmp	#LR__1700
154e0     0F 13 02 F6 | 	mov	arg01, local01
154e4     00 14 06 F6 | 	mov	arg02, #0
154e8     A4 AF B0 FD | 	call	#__system___float_tointeger
154ec     FD 1E 02 F6 | 	mov	local01, result1
154f0                 | LR__1700
154f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
154f0     1F 22 0E F2 | 	cmp	local03, #31 wz
154f4     18 00 90 5D |  if_ne	jmp	#LR__1701
154f8     0F 13 02 F6 | 	mov	arg01, local01
154fc     B0 B2 B0 FD | 	call	#__system____builtin_atof
15500     FD 12 02 F6 | 	mov	arg01, result1
15504     00 14 06 F6 | 	mov	arg02, #0
15508     84 AF B0 FD | 	call	#__system___float_tointeger
1550c     FD 1E 02 F6 | 	mov	local01, result1
15510                 | LR__1701
15510     57 00 00 FF 
15514     28 E4 05 F1 | 	add	objptr, ##44584
15518     F2 1E 62 FC | 	wrlong	local01, objptr
1551c     04 E4 05 F1 | 	add	objptr, #4
15520     F2 12 02 FB | 	rdlong	arg01, objptr
15524                 | ' 
15524                 | ' write_color:=ff
15524     56 00 00 FF 
15528     EB E5 85 F1 | 	sub	objptr, ##44523
1552c     F2 12 62 FC | 	wrlong	arg01, objptr
15530                 | ' write_background:=bb
15530     04 E4 05 F1 | 	add	objptr, #4
15534     F2 1E 62 FC | 	wrlong	local01, objptr
15538     45 E4 85 F1 | 	sub	objptr, #69
1553c     A7 F0 03 F6 | 	mov	ptra, fp
15540     B2 00 A0 FD | 	call	#popregs_
15544                 | _do_paper_ret
15544     2D 00 64 FD | 	ret
15548                 | 
15548                 | ' 
15548                 | ' sub do_ink
15548                 | _do_ink
15548     03 4A 05 F6 | 	mov	COUNT_, #3
1554c     A8 00 A0 FD | 	call	#pushregs_
15550     58 4C BF FD | 	call	#_pop
15554     FD 1E 02 F6 | 	mov	local01, result1
15558     FE 20 02 F6 | 	mov	local02, result2
1555c     FF 22 02 F6 | 	mov	local03, result3
15560                 | ' t1=pop() 
15560                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15560     1E 22 0E F2 | 	cmp	local03, #30 wz
15564     10 00 90 5D |  if_ne	jmp	#LR__1710
15568     0F 13 02 F6 | 	mov	arg01, local01
1556c     00 14 06 F6 | 	mov	arg02, #0
15570     1C AF B0 FD | 	call	#__system___float_tointeger
15574     FD 1E 02 F6 | 	mov	local01, result1
15578                 | LR__1710
15578                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15578     1F 22 0E F2 | 	cmp	local03, #31 wz
1557c     18 00 90 5D |  if_ne	jmp	#LR__1711
15580     0F 13 02 F6 | 	mov	arg01, local01
15584     28 B2 B0 FD | 	call	#__system____builtin_atof
15588     FD 12 02 F6 | 	mov	arg01, result1
1558c     00 14 06 F6 | 	mov	arg02, #0
15590     FC AE B0 FD | 	call	#__system___float_tointeger
15594     FD 1E 02 F6 | 	mov	local01, result1
15598                 | LR__1711
15598     57 00 00 FF 
1559c     2C E4 05 F1 | 	add	objptr, ##44588
155a0     F2 1E 62 FC | 	wrlong	local01, objptr
155a4     04 E4 85 F1 | 	sub	objptr, #4
155a8     F2 14 02 FB | 	rdlong	arg02, objptr
155ac                 | ' 
155ac                 | ' write_color:=ff
155ac     56 00 00 FF 
155b0     E7 E5 85 F1 | 	sub	objptr, ##44519
155b4     F2 1E 62 FC | 	wrlong	local01, objptr
155b8                 | ' write_background:=bb
155b8     04 E4 05 F1 | 	add	objptr, #4
155bc     F2 14 62 FC | 	wrlong	arg02, objptr
155c0     56 00 00 FF 
155c4     E7 E5 05 F1 | 	add	objptr, ##44519
155c8     F2 12 02 FB | 	rdlong	arg01, objptr
155cc     57 00 00 FF 
155d0     2C E4 85 F1 | 	sub	objptr, ##44588
155d4     74 56 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
155d8     A7 F0 03 F6 | 	mov	ptra, fp
155dc     B2 00 A0 FD | 	call	#popregs_
155e0                 | _do_ink_ret
155e0     2D 00 64 FD | 	ret
155e4                 | 
155e4                 | ' 
155e4                 | ' 
155e4                 | ' sub do_font
155e4                 | _do_font
155e4     03 4A 05 F6 | 	mov	COUNT_, #3
155e8     A8 00 A0 FD | 	call	#pushregs_
155ec     BC 4B BF FD | 	call	#_pop
155f0     FD 1E 02 F6 | 	mov	local01, result1
155f4     FE 20 02 F6 | 	mov	local02, result2
155f8     FF 22 02 F6 | 	mov	local03, result3
155fc                 | ' t1=pop() 
155fc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
155fc     1E 22 0E F2 | 	cmp	local03, #30 wz
15600     10 00 90 5D |  if_ne	jmp	#LR__1720
15604     0F 13 02 F6 | 	mov	arg01, local01
15608     00 14 06 F6 | 	mov	arg02, #0
1560c     80 AE B0 FD | 	call	#__system___float_tointeger
15610     FD 1E 02 F6 | 	mov	local01, result1
15614                 | LR__1720
15614                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15614     1F 22 0E F2 | 	cmp	local03, #31 wz
15618     18 00 90 5D |  if_ne	jmp	#LR__1721
1561c     0F 13 02 F6 | 	mov	arg01, local01
15620     8C B1 B0 FD | 	call	#__system____builtin_atof
15624     FD 12 02 F6 | 	mov	arg01, result1
15628     00 14 06 F6 | 	mov	arg02, #0
1562c     60 AE B0 FD | 	call	#__system___float_tointeger
15630     FD 1E 02 F6 | 	mov	local01, result1
15634                 | LR__1721
15634     57 00 00 FF 
15638     30 E4 05 F1 | 	add	objptr, ##44592
1563c     F2 1E 62 FC | 	wrlong	local01, objptr
15640     57 00 00 FF 
15644     30 E4 85 F1 | 	sub	objptr, ##44592
15648     02 1E 66 F0 | 	shl	local01, #2
1564c     0F 13 02 F6 | 	mov	arg01, local01
15650     3C 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15654     A7 F0 03 F6 | 	mov	ptra, fp
15658     B2 00 A0 FD | 	call	#popregs_
1565c                 | _do_font_ret
1565c     2D 00 64 FD | 	ret
15660                 | 
15660                 | ' 
15660                 | ' sub do_mode
15660                 | _do_mode
15660     05 4A 05 F6 | 	mov	COUNT_, #5
15664     A8 00 A0 FD | 	call	#pushregs_
15668     40 4B BF FD | 	call	#_pop
1566c     FD 1E 02 F6 | 	mov	local01, result1
15670     FE 20 02 F6 | 	mov	local02, result2
15674     FF 22 02 F6 | 	mov	local03, result3
15678                 | ' t1=pop() 
15678                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15678     1E 22 0E F2 | 	cmp	local03, #30 wz
1567c     10 00 90 5D |  if_ne	jmp	#LR__1730
15680     0F 13 02 F6 | 	mov	arg01, local01
15684     00 14 06 F6 | 	mov	arg02, #0
15688     04 AE B0 FD | 	call	#__system___float_tointeger
1568c     FD 1E 02 F6 | 	mov	local01, result1
15690                 | LR__1730
15690                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15690     1F 22 0E F2 | 	cmp	local03, #31 wz
15694     18 00 90 5D |  if_ne	jmp	#LR__1731
15698     0F 13 02 F6 | 	mov	arg01, local01
1569c     10 B1 B0 FD | 	call	#__system____builtin_atof
156a0     FD 12 02 F6 | 	mov	arg01, result1
156a4     00 14 06 F6 | 	mov	arg02, #0
156a8     E4 AD B0 FD | 	call	#__system___float_tointeger
156ac     FD 1E 02 F6 | 	mov	local01, result1
156b0                 | LR__1731
156b0                 | ' select case t1.result.iresult
156b0     0F 25 02 F6 | 	mov	local04, local01
156b4     05 24 26 F3 | 	fle	local04, #5
156b8     30 24 62 FD | 	jmprel	local04
156bc                 | LR__1732
156bc     14 00 90 FD | 	jmp	#LR__1733
156c0     A8 00 90 FD | 	jmp	#LR__1734
156c4     10 01 90 FD | 	jmp	#LR__1735
156c8     78 01 90 FD | 	jmp	#LR__1736
156cc     E0 01 90 FD | 	jmp	#LR__1737
156d0     70 02 90 FD | 	jmp	#LR__1738
156d4                 | LR__1733
156d4     57 00 00 FF 
156d8     30 E4 05 F1 | 	add	objptr, ##44592
156dc     F2 02 68 FC | 	wrlong	#1, objptr
156e0     04 E4 85 F1 | 	sub	objptr, #4
156e4     F2 34 69 FC | 	wrlong	#154, objptr
156e8     22 00 00 FF 
156ec     A4 E5 05 F1 | 	add	objptr, ##17828
156f0     F2 02 68 FC | 	wrlong	#1, objptr
156f4     22 00 00 FF 
156f8     A8 E5 85 F1 | 	sub	objptr, ##17832
156fc     F2 26 69 FC | 	wrlong	#147, objptr
15700     57 00 00 FF 
15704     28 E4 85 F1 | 	sub	objptr, ##44584
15708     04 12 06 F6 | 	mov	arg01, #4
1570c     80 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15710     57 00 00 FF 
15714     2C E4 05 F1 | 	add	objptr, ##44588
15718     F2 12 02 FB | 	rdlong	arg01, objptr
1571c     04 E4 85 F1 | 	sub	objptr, #4
15720     F2 14 02 FB | 	rdlong	arg02, objptr
15724                 | ' 
15724                 | ' write_color:=ff
15724     56 00 00 FF 
15728     E7 E5 85 F1 | 	sub	objptr, ##44519
1572c     F2 12 62 FC | 	wrlong	arg01, objptr
15730                 | ' write_background:=bb
15730     04 E4 05 F1 | 	add	objptr, #4
15734     F2 14 62 FC | 	wrlong	arg02, objptr
15738     01 00 00 FF 
1573c     00 EA 05 F1 | 	add	ptr__dat__, ##512
15740     7B 00 00 FF 
15744     2F E4 05 F1 | 	add	objptr, ##63023
15748     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1574c     04 E4 85 F1 | 	sub	objptr, #4
15750     03 00 80 FF 
15754     F2 30 69 FC | 	wrlong	##1688, objptr
15758     7B 00 00 FF 
1575c     70 E4 85 F1 | 	sub	objptr, ##63088
15760     01 00 00 FF 
15764     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15768     D8 01 90 FD | 	jmp	#LR__1738
1576c                 | LR__1734
1576c     57 00 00 FF 
15770     30 E4 05 F1 | 	add	objptr, ##44592
15774     F2 00 68 FC | 	wrlong	#0, objptr
15778     04 E4 85 F1 | 	sub	objptr, #4
1577c     F2 2E 68 FC | 	wrlong	#23, objptr
15780     22 00 00 FF 
15784     A4 E5 05 F1 | 	add	objptr, ##17828
15788     F2 00 68 FC | 	wrlong	#0, objptr
1578c     22 00 00 FF 
15790     A8 E5 85 F1 | 	sub	objptr, ##17832
15794     F2 00 68 FC | 	wrlong	#0, objptr
15798     57 00 00 FF 
1579c     28 E4 85 F1 | 	sub	objptr, ##44584
157a0     00 12 06 F6 | 	mov	arg01, #0
157a4     E8 64 B0 FD | 	call	#_hg010b_spin2_setfontfamily
157a8     57 00 00 FF 
157ac     2C E4 05 F1 | 	add	objptr, ##44588
157b0     F2 12 02 FB | 	rdlong	arg01, objptr
157b4     04 E4 85 F1 | 	sub	objptr, #4
157b8     F2 14 02 FB | 	rdlong	arg02, objptr
157bc                 | ' 
157bc                 | ' write_color:=ff
157bc     56 00 00 FF 
157c0     E7 E5 85 F1 | 	sub	objptr, ##44519
157c4     F2 12 62 FC | 	wrlong	arg01, objptr
157c8                 | ' write_background:=bb
157c8     04 E4 05 F1 | 	add	objptr, #4
157cc     F2 14 62 FC | 	wrlong	arg02, objptr
157d0     45 E4 85 F1 | 	sub	objptr, #69
157d4     6C 01 90 FD | 	jmp	#LR__1738
157d8                 | LR__1735
157d8     57 00 00 FF 
157dc     30 E4 05 F1 | 	add	objptr, ##44592
157e0     F2 00 68 FC | 	wrlong	#0, objptr
157e4     04 E4 85 F1 | 	sub	objptr, #4
157e8     F2 6A 69 FC | 	wrlong	#181, objptr
157ec     22 00 00 FF 
157f0     A4 E5 05 F1 | 	add	objptr, ##17828
157f4     F2 00 68 FC | 	wrlong	#0, objptr
157f8     22 00 00 FF 
157fc     A8 E5 85 F1 | 	sub	objptr, ##17832
15800     F2 00 68 FC | 	wrlong	#0, objptr
15804     57 00 00 FF 
15808     28 E4 85 F1 | 	sub	objptr, ##44584
1580c     00 12 06 F6 | 	mov	arg01, #0
15810     7C 64 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15814     57 00 00 FF 
15818     2C E4 05 F1 | 	add	objptr, ##44588
1581c     F2 12 02 FB | 	rdlong	arg01, objptr
15820     04 E4 85 F1 | 	sub	objptr, #4
15824     F2 14 02 FB | 	rdlong	arg02, objptr
15828                 | ' 
15828                 | ' write_color:=ff
15828     56 00 00 FF 
1582c     E7 E5 85 F1 | 	sub	objptr, ##44519
15830     F2 12 62 FC | 	wrlong	arg01, objptr
15834                 | ' write_background:=bb
15834     04 E4 05 F1 | 	add	objptr, #4
15838     F2 14 62 FC | 	wrlong	arg02, objptr
1583c     45 E4 85 F1 | 	sub	objptr, #69
15840     00 01 90 FD | 	jmp	#LR__1738
15844                 | LR__1736
15844     57 00 00 FF 
15848     30 E4 05 F1 | 	add	objptr, ##44592
1584c     F2 00 68 FC | 	wrlong	#0, objptr
15850     04 E4 85 F1 | 	sub	objptr, #4
15854     F2 1E 68 FC | 	wrlong	#15, objptr
15858     22 00 00 FF 
1585c     A4 E5 05 F1 | 	add	objptr, ##17828
15860     F2 00 68 FC | 	wrlong	#0, objptr
15864     22 00 00 FF 
15868     A8 E5 85 F1 | 	sub	objptr, ##17832
1586c     F2 00 68 FC | 	wrlong	#0, objptr
15870     57 00 00 FF 
15874     28 E4 85 F1 | 	sub	objptr, ##44584
15878     00 12 06 F6 | 	mov	arg01, #0
1587c     10 64 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15880     57 00 00 FF 
15884     2C E4 05 F1 | 	add	objptr, ##44588
15888     F2 12 02 FB | 	rdlong	arg01, objptr
1588c     04 E4 85 F1 | 	sub	objptr, #4
15890     F2 14 02 FB | 	rdlong	arg02, objptr
15894                 | ' 
15894                 | ' write_color:=ff
15894     56 00 00 FF 
15898     E7 E5 85 F1 | 	sub	objptr, ##44519
1589c     F2 12 62 FC | 	wrlong	arg01, objptr
158a0                 | ' write_background:=bb
158a0     04 E4 05 F1 | 	add	objptr, #4
158a4     F2 14 62 FC | 	wrlong	arg02, objptr
158a8     45 E4 85 F1 | 	sub	objptr, #69
158ac     94 00 90 FD | 	jmp	#LR__1738
158b0                 | LR__1737
158b0     57 00 00 FF 
158b4     30 E4 05 F1 | 	add	objptr, ##44592
158b8     F2 02 68 FC | 	wrlong	#1, objptr
158bc     04 E4 85 F1 | 	sub	objptr, #4
158c0     F2 02 68 FC | 	wrlong	#1, objptr
158c4     22 00 00 FF 
158c8     A4 E5 05 F1 | 	add	objptr, ##17828
158cc     F2 02 68 FC | 	wrlong	#1, objptr
158d0     22 00 00 FF 
158d4     A8 E5 85 F1 | 	sub	objptr, ##17832
158d8     F2 1C 68 FC | 	wrlong	#14, objptr
158dc     57 00 00 FF 
158e0     28 E4 85 F1 | 	sub	objptr, ##44584
158e4     04 12 06 F6 | 	mov	arg01, #4
158e8     A4 63 B0 FD | 	call	#_hg010b_spin2_setfontfamily
158ec     57 00 00 FF 
158f0     2C E4 05 F1 | 	add	objptr, ##44588
158f4     F2 12 02 FB | 	rdlong	arg01, objptr
158f8     04 E4 85 F1 | 	sub	objptr, #4
158fc     F2 14 02 FB | 	rdlong	arg02, objptr
15900                 | ' 
15900                 | ' write_color:=ff
15900     56 00 00 FF 
15904     E7 E5 85 F1 | 	sub	objptr, ##44519
15908     F2 12 62 FC | 	wrlong	arg01, objptr
1590c                 | ' write_background:=bb
1590c     04 E4 05 F1 | 	add	objptr, #4
15910     F2 14 62 FC | 	wrlong	arg02, objptr
15914     07 00 00 FF 
15918     8A EB 05 F1 | 	add	ptr__dat__, ##3978
1591c     7B 00 00 FF 
15920     2F E4 05 F1 | 	add	objptr, ##63023
15924     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15928     04 E4 85 F1 | 	sub	objptr, #4
1592c     03 00 80 FF 
15930     F2 30 69 FC | 	wrlong	##1688, objptr
15934     7B 00 00 FF 
15938     70 E4 85 F1 | 	sub	objptr, ##63088
1593c     07 00 00 FF 
15940     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
15944                 | LR__1738
15944     7B 00 00 FF 
15948     6C E4 05 F1 | 	add	objptr, ##63084
1594c     F2 1E 62 FC | 	wrlong	local01, objptr
15950     04 E4 85 F1 | 	sub	objptr, #4
15954     F2 12 02 FB | 	rdlong	arg01, objptr
15958     18 00 00 FF 
1595c     1C E4 85 F1 | 	sub	objptr, ##12316
15960     F2 26 02 FB | 	rdlong	local05, objptr
15964     63 00 00 FF 
15968     4C E4 85 F1 | 	sub	objptr, ##50764
1596c     13 13 82 F1 | 	sub	arg01, local05
15970     00 14 06 F6 | 	mov	arg02, #0
15974     0A 16 06 F6 | 	mov	arg03, #10
15978     68 9D B0 FD | 	call	#__system__Number_S
1597c     FD 12 02 F6 | 	mov	arg01, result1
15980     68 01 00 FF 
15984     CA 14 06 F6 | 	mov	arg02, ##@LR__4996
15988     1C 7B B0 FD | 	call	#__system___string_concat
1598c     79 00 00 FF 
15990     CC E5 05 F1 | 	add	objptr, ##62412
15994     F2 FA 61 FC | 	wrlong	result1, objptr
15998     22 00 00 FF 
1599c     A0 E5 85 F1 | 	sub	objptr, ##17824
159a0     F2 12 02 FB | 	rdlong	arg01, objptr
159a4     04 E4 85 F1 | 	sub	objptr, #4
159a8     F2 14 02 FB | 	rdlong	arg02, objptr
159ac     57 00 00 FF 
159b0     28 E4 85 F1 | 	sub	objptr, ##44584
159b4     28 64 B0 FD | 	call	#_hg010b_spin2_cls
159b8     68 01 00 FF 
159bc     DC 12 06 F6 | 	mov	arg01, ##@LR__4997
159c0                 | ' 
159c0                 | ' write(text)
159c0     DC 67 B0 FD | 	call	#_hg010b_spin2_write
159c4                 | ' crlf
159c4     A4 6A B0 FD | 	call	#_hg010b_spin2_crlf
159c8     18 00 00 FF 
159cc     4C EB 05 F1 | 	add	ptr__dat__, ##12620
159d0     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
159d4     18 00 00 FF 
159d8     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
159dc                 | ' 
159dc                 | ' write(text)
159dc     C0 67 B0 FD | 	call	#_hg010b_spin2_write
159e0                 | ' crlf
159e0     88 6A B0 FD | 	call	#_hg010b_spin2_crlf
159e4     79 00 00 FF 
159e8     CC E5 05 F1 | 	add	objptr, ##62412
159ec     F2 12 02 FB | 	rdlong	arg01, objptr
159f0     79 00 00 FF 
159f4     CC E5 85 F1 | 	sub	objptr, ##62412
159f8                 | ' 
159f8                 | ' write(text)
159f8     A4 67 B0 FD | 	call	#_hg010b_spin2_write
159fc                 | ' crlf
159fc     6C 6A B0 FD | 	call	#_hg010b_spin2_crlf
15a00     A7 F0 03 F6 | 	mov	ptra, fp
15a04     B2 00 A0 FD | 	call	#popregs_
15a08                 | _do_mode_ret
15a08     2D 00 64 FD | 	ret
15a0c                 | 
15a0c                 | ' 
15a0c                 | ' sub do_setwave
15a0c                 | _do_setwave
15a0c     02 4A 05 F6 | 	mov	COUNT_, #2
15a10     A8 00 A0 FD | 	call	#pushregs_
15a14     18 F0 07 F1 | 	add	ptra, #24
15a18     90 47 BF FD | 	call	#_pop
15a1c     FD 12 02 F6 | 	mov	arg01, result1
15a20     FE 1E 02 F6 | 	mov	local01, result2
15a24     FF 20 02 F6 | 	mov	local02, result3
15a28     A7 12 62 FC | 	wrlong	arg01, fp
15a2c     04 4E 05 F1 | 	add	fp, #4
15a30     A7 1E 62 FC | 	wrlong	local01, fp
15a34     04 4E 05 F1 | 	add	fp, #4
15a38     A7 20 62 FC | 	wrlong	local02, fp
15a3c     08 4E 85 F1 | 	sub	fp, #8
15a40     68 47 BF FD | 	call	#_pop
15a44     FD 20 02 F6 | 	mov	local02, result1
15a48     0C 4E 05 F1 | 	add	fp, #12
15a4c     A7 20 62 FC | 	wrlong	local02, fp
15a50     04 4E 05 F1 | 	add	fp, #4
15a54     A7 FC 61 FC | 	wrlong	result2, fp
15a58     04 4E 05 F1 | 	add	fp, #4
15a5c     A7 FE 61 FC | 	wrlong	result3, fp
15a60     08 4E 85 F1 | 	sub	fp, #8
15a64     A7 12 02 F6 | 	mov	arg01, fp
15a68     0C 4E 85 F1 | 	sub	fp, #12
15a6c     94 D3 BF FD | 	call	#_converttoint
15a70     FD 20 02 F6 | 	mov	local02, result1
15a74     10 1F 02 F6 | 	mov	local01, local02
15a78     01 1E 66 F0 | 	shl	local01, #1
15a7c     10 1F 02 F1 | 	add	local01, local02
15a80     03 1E 66 F0 | 	shl	local01, #3
15a84     34 00 00 FF 
15a88     38 E5 05 F1 | 	add	objptr, ##26936
15a8c     F2 1E 02 F1 | 	add	local01, objptr
15a90     A7 12 02 F6 | 	mov	arg01, fp
15a94     34 00 00 FF 
15a98     38 E5 85 F1 | 	sub	objptr, ##26936
15a9c     64 D3 BF FD | 	call	#_converttoint
15aa0     04 1E 06 F1 | 	add	local01, #4
15aa4     0F FB 41 FC | 	wrbyte	result1, local01
15aa8     A7 F0 03 F6 | 	mov	ptra, fp
15aac     B2 00 A0 FD | 	call	#popregs_
15ab0                 | _do_setwave_ret
15ab0     2D 00 64 FD | 	ret
15ab4                 | 
15ab4                 | ' 
15ab4                 | ' sub do_setsustain
15ab4                 | _do_setsustain
15ab4     02 4A 05 F6 | 	mov	COUNT_, #2
15ab8     A8 00 A0 FD | 	call	#pushregs_
15abc     18 F0 07 F1 | 	add	ptra, #24
15ac0     E8 46 BF FD | 	call	#_pop
15ac4     FD 12 02 F6 | 	mov	arg01, result1
15ac8     FE 1E 02 F6 | 	mov	local01, result2
15acc     FF 20 02 F6 | 	mov	local02, result3
15ad0     A7 12 62 FC | 	wrlong	arg01, fp
15ad4     04 4E 05 F1 | 	add	fp, #4
15ad8     A7 1E 62 FC | 	wrlong	local01, fp
15adc     04 4E 05 F1 | 	add	fp, #4
15ae0     A7 20 62 FC | 	wrlong	local02, fp
15ae4     08 4E 85 F1 | 	sub	fp, #8
15ae8     C0 46 BF FD | 	call	#_pop
15aec     FD 20 02 F6 | 	mov	local02, result1
15af0     0C 4E 05 F1 | 	add	fp, #12
15af4     A7 20 62 FC | 	wrlong	local02, fp
15af8     04 4E 05 F1 | 	add	fp, #4
15afc     A7 FC 61 FC | 	wrlong	result2, fp
15b00     04 4E 05 F1 | 	add	fp, #4
15b04     A7 FE 61 FC | 	wrlong	result3, fp
15b08     08 4E 85 F1 | 	sub	fp, #8
15b0c     A7 12 02 F6 | 	mov	arg01, fp
15b10     0C 4E 85 F1 | 	sub	fp, #12
15b14     EC D2 BF FD | 	call	#_converttoint
15b18     FD 20 02 F6 | 	mov	local02, result1
15b1c     10 1F 02 F6 | 	mov	local01, local02
15b20     01 1E 66 F0 | 	shl	local01, #1
15b24     10 1F 02 F1 | 	add	local01, local02
15b28     03 1E 66 F0 | 	shl	local01, #3
15b2c     34 00 00 FF 
15b30     38 E5 05 F1 | 	add	objptr, ##26936
15b34     F2 1E 02 F1 | 	add	local01, objptr
15b38     A7 12 02 F6 | 	mov	arg01, fp
15b3c     34 00 00 FF 
15b40     38 E5 85 F1 | 	sub	objptr, ##26936
15b44     BC D2 BF FD | 	call	#_converttoint
15b48     14 1E 06 F1 | 	add	local01, #20
15b4c     0F FB 51 FC | 	wrword	result1, local01
15b50     A7 F0 03 F6 | 	mov	ptra, fp
15b54     B2 00 A0 FD | 	call	#popregs_
15b58                 | _do_setsustain_ret
15b58     2D 00 64 FD | 	ret
15b5c                 | 
15b5c                 | ' 
15b5c                 | ' sub do_setenv
15b5c                 | _do_setenv
15b5c     02 4A 05 F6 | 	mov	COUNT_, #2
15b60     A8 00 A0 FD | 	call	#pushregs_
15b64     18 F0 07 F1 | 	add	ptra, #24
15b68     40 46 BF FD | 	call	#_pop
15b6c     FD 12 02 F6 | 	mov	arg01, result1
15b70     FE 1E 02 F6 | 	mov	local01, result2
15b74     FF 20 02 F6 | 	mov	local02, result3
15b78     A7 12 62 FC | 	wrlong	arg01, fp
15b7c     04 4E 05 F1 | 	add	fp, #4
15b80     A7 1E 62 FC | 	wrlong	local01, fp
15b84     04 4E 05 F1 | 	add	fp, #4
15b88     A7 20 62 FC | 	wrlong	local02, fp
15b8c     08 4E 85 F1 | 	sub	fp, #8
15b90     18 46 BF FD | 	call	#_pop
15b94     FD 20 02 F6 | 	mov	local02, result1
15b98     0C 4E 05 F1 | 	add	fp, #12
15b9c     A7 20 62 FC | 	wrlong	local02, fp
15ba0     04 4E 05 F1 | 	add	fp, #4
15ba4     A7 FC 61 FC | 	wrlong	result2, fp
15ba8     04 4E 05 F1 | 	add	fp, #4
15bac     A7 FE 61 FC | 	wrlong	result3, fp
15bb0     08 4E 85 F1 | 	sub	fp, #8
15bb4     A7 12 02 F6 | 	mov	arg01, fp
15bb8     0C 4E 85 F1 | 	sub	fp, #12
15bbc     44 D2 BF FD | 	call	#_converttoint
15bc0     FD 20 02 F6 | 	mov	local02, result1
15bc4     10 1F 02 F6 | 	mov	local01, local02
15bc8     01 1E 66 F0 | 	shl	local01, #1
15bcc     10 1F 02 F1 | 	add	local01, local02
15bd0     03 1E 66 F0 | 	shl	local01, #3
15bd4     34 00 00 FF 
15bd8     38 E5 05 F1 | 	add	objptr, ##26936
15bdc     F2 1E 02 F1 | 	add	local01, objptr
15be0     A7 12 02 F6 | 	mov	arg01, fp
15be4     34 00 00 FF 
15be8     38 E5 85 F1 | 	sub	objptr, ##26936
15bec     14 D2 BF FD | 	call	#_converttoint
15bf0     05 1E 06 F1 | 	add	local01, #5
15bf4     0F FB 41 FC | 	wrbyte	result1, local01
15bf8     A7 F0 03 F6 | 	mov	ptra, fp
15bfc     B2 00 A0 FD | 	call	#popregs_
15c00                 | _do_setenv_ret
15c00     2D 00 64 FD | 	ret
15c04                 | 
15c04                 | ' 
15c04                 | ' sub do_setdelay
15c04                 | _do_setdelay
15c04     02 4A 05 F6 | 	mov	COUNT_, #2
15c08     A8 00 A0 FD | 	call	#pushregs_
15c0c     18 F0 07 F1 | 	add	ptra, #24
15c10     98 45 BF FD | 	call	#_pop
15c14     FD 12 02 F6 | 	mov	arg01, result1
15c18     FE 1E 02 F6 | 	mov	local01, result2
15c1c     FF 20 02 F6 | 	mov	local02, result3
15c20     A7 12 62 FC | 	wrlong	arg01, fp
15c24     04 4E 05 F1 | 	add	fp, #4
15c28     A7 1E 62 FC | 	wrlong	local01, fp
15c2c     04 4E 05 F1 | 	add	fp, #4
15c30     A7 20 62 FC | 	wrlong	local02, fp
15c34     08 4E 85 F1 | 	sub	fp, #8
15c38     70 45 BF FD | 	call	#_pop
15c3c     FD 20 02 F6 | 	mov	local02, result1
15c40     0C 4E 05 F1 | 	add	fp, #12
15c44     A7 20 62 FC | 	wrlong	local02, fp
15c48     04 4E 05 F1 | 	add	fp, #4
15c4c     A7 FC 61 FC | 	wrlong	result2, fp
15c50     04 4E 05 F1 | 	add	fp, #4
15c54     A7 FE 61 FC | 	wrlong	result3, fp
15c58     08 4E 85 F1 | 	sub	fp, #8
15c5c     A7 12 02 F6 | 	mov	arg01, fp
15c60     0C 4E 85 F1 | 	sub	fp, #12
15c64     9C D1 BF FD | 	call	#_converttoint
15c68     FD 20 02 F6 | 	mov	local02, result1
15c6c     10 1F 02 F6 | 	mov	local01, local02
15c70     01 1E 66 F0 | 	shl	local01, #1
15c74     10 1F 02 F1 | 	add	local01, local02
15c78     03 1E 66 F0 | 	shl	local01, #3
15c7c     34 00 00 FF 
15c80     38 E5 05 F1 | 	add	objptr, ##26936
15c84     F2 1E 02 F1 | 	add	local01, objptr
15c88     A7 12 02 F6 | 	mov	arg01, fp
15c8c     34 00 00 FF 
15c90     38 E5 85 F1 | 	sub	objptr, ##26936
15c94     6C D1 BF FD | 	call	#_converttoint
15c98     06 1E 06 F1 | 	add	local01, #6
15c9c     0F FB 51 FC | 	wrword	result1, local01
15ca0     A7 F0 03 F6 | 	mov	ptra, fp
15ca4     B2 00 A0 FD | 	call	#popregs_
15ca8                 | _do_setdelay_ret
15ca8     2D 00 64 FD | 	ret
15cac                 | 
15cac                 | ' 
15cac                 | ' sub do_setlen
15cac                 | _do_setlen
15cac     02 4A 05 F6 | 	mov	COUNT_, #2
15cb0     A8 00 A0 FD | 	call	#pushregs_
15cb4     18 F0 07 F1 | 	add	ptra, #24
15cb8     F0 44 BF FD | 	call	#_pop
15cbc     FD 12 02 F6 | 	mov	arg01, result1
15cc0     FE 1E 02 F6 | 	mov	local01, result2
15cc4     FF 20 02 F6 | 	mov	local02, result3
15cc8     A7 12 62 FC | 	wrlong	arg01, fp
15ccc     04 4E 05 F1 | 	add	fp, #4
15cd0     A7 1E 62 FC | 	wrlong	local01, fp
15cd4     04 4E 05 F1 | 	add	fp, #4
15cd8     A7 20 62 FC | 	wrlong	local02, fp
15cdc     08 4E 85 F1 | 	sub	fp, #8
15ce0     C8 44 BF FD | 	call	#_pop
15ce4     FD 20 02 F6 | 	mov	local02, result1
15ce8     0C 4E 05 F1 | 	add	fp, #12
15cec     A7 20 62 FC | 	wrlong	local02, fp
15cf0     04 4E 05 F1 | 	add	fp, #4
15cf4     A7 FC 61 FC | 	wrlong	result2, fp
15cf8     04 4E 05 F1 | 	add	fp, #4
15cfc     A7 FE 61 FC | 	wrlong	result3, fp
15d00     08 4E 85 F1 | 	sub	fp, #8
15d04     A7 12 02 F6 | 	mov	arg01, fp
15d08     0C 4E 85 F1 | 	sub	fp, #12
15d0c     F4 D0 BF FD | 	call	#_converttoint
15d10     FD 20 02 F6 | 	mov	local02, result1
15d14     10 1F 02 F6 | 	mov	local01, local02
15d18     01 1E 66 F0 | 	shl	local01, #1
15d1c     10 1F 02 F1 | 	add	local01, local02
15d20     03 1E 66 F0 | 	shl	local01, #3
15d24     34 00 00 FF 
15d28     38 E5 05 F1 | 	add	objptr, ##26936
15d2c     F2 1E 02 F1 | 	add	local01, objptr
15d30     A7 12 02 F6 | 	mov	arg01, fp
15d34     34 00 00 FF 
15d38     38 E5 85 F1 | 	sub	objptr, ##26936
15d3c     70 D1 BF FD | 	call	#_converttofloat
15d40     08 1E 06 F1 | 	add	local01, #8
15d44     0F FB 61 FC | 	wrlong	result1, local01
15d48     A7 F0 03 F6 | 	mov	ptra, fp
15d4c     B2 00 A0 FD | 	call	#popregs_
15d50                 | _do_setlen_ret
15d50     2D 00 64 FD | 	ret
15d54                 | 
15d54                 | ' 
15d54                 | ' sub do_setvol
15d54                 | _do_setvol
15d54     02 4A 05 F6 | 	mov	COUNT_, #2
15d58     A8 00 A0 FD | 	call	#pushregs_
15d5c     18 F0 07 F1 | 	add	ptra, #24
15d60     48 44 BF FD | 	call	#_pop
15d64     FD 12 02 F6 | 	mov	arg01, result1
15d68     FE 1E 02 F6 | 	mov	local01, result2
15d6c     FF 20 02 F6 | 	mov	local02, result3
15d70     A7 12 62 FC | 	wrlong	arg01, fp
15d74     04 4E 05 F1 | 	add	fp, #4
15d78     A7 1E 62 FC | 	wrlong	local01, fp
15d7c     04 4E 05 F1 | 	add	fp, #4
15d80     A7 20 62 FC | 	wrlong	local02, fp
15d84     08 4E 85 F1 | 	sub	fp, #8
15d88     20 44 BF FD | 	call	#_pop
15d8c     FD 20 02 F6 | 	mov	local02, result1
15d90     0C 4E 05 F1 | 	add	fp, #12
15d94     A7 20 62 FC | 	wrlong	local02, fp
15d98     04 4E 05 F1 | 	add	fp, #4
15d9c     A7 FC 61 FC | 	wrlong	result2, fp
15da0     04 4E 05 F1 | 	add	fp, #4
15da4     A7 FE 61 FC | 	wrlong	result3, fp
15da8     08 4E 85 F1 | 	sub	fp, #8
15dac     A7 12 02 F6 | 	mov	arg01, fp
15db0     0C 4E 85 F1 | 	sub	fp, #12
15db4     4C D0 BF FD | 	call	#_converttoint
15db8     FD 20 02 F6 | 	mov	local02, result1
15dbc     10 1F 02 F6 | 	mov	local01, local02
15dc0     01 1E 66 F0 | 	shl	local01, #1
15dc4     10 1F 02 F1 | 	add	local01, local02
15dc8     03 1E 66 F0 | 	shl	local01, #3
15dcc     34 00 00 FF 
15dd0     38 E5 05 F1 | 	add	objptr, ##26936
15dd4     F2 1E 02 F1 | 	add	local01, objptr
15dd8     A7 12 02 F6 | 	mov	arg01, fp
15ddc     34 00 00 FF 
15de0     38 E5 85 F1 | 	sub	objptr, ##26936
15de4     C8 D0 BF FD | 	call	#_converttofloat
15de8     0C 1E 06 F1 | 	add	local01, #12
15dec     0F FB 61 FC | 	wrlong	result1, local01
15df0     A7 F0 03 F6 | 	mov	ptra, fp
15df4     B2 00 A0 FD | 	call	#popregs_
15df8                 | _do_setvol_ret
15df8     2D 00 64 FD | 	ret
15dfc                 | 
15dfc                 | ' 
15dfc                 | ' sub do_setpan
15dfc                 | _do_setpan
15dfc     02 4A 05 F6 | 	mov	COUNT_, #2
15e00     A8 00 A0 FD | 	call	#pushregs_
15e04     18 F0 07 F1 | 	add	ptra, #24
15e08     A0 43 BF FD | 	call	#_pop
15e0c     FD 12 02 F6 | 	mov	arg01, result1
15e10     FE 1E 02 F6 | 	mov	local01, result2
15e14     FF 20 02 F6 | 	mov	local02, result3
15e18     A7 12 62 FC | 	wrlong	arg01, fp
15e1c     04 4E 05 F1 | 	add	fp, #4
15e20     A7 1E 62 FC | 	wrlong	local01, fp
15e24     04 4E 05 F1 | 	add	fp, #4
15e28     A7 20 62 FC | 	wrlong	local02, fp
15e2c     08 4E 85 F1 | 	sub	fp, #8
15e30     78 43 BF FD | 	call	#_pop
15e34     FD 20 02 F6 | 	mov	local02, result1
15e38     0C 4E 05 F1 | 	add	fp, #12
15e3c     A7 20 62 FC | 	wrlong	local02, fp
15e40     04 4E 05 F1 | 	add	fp, #4
15e44     A7 FC 61 FC | 	wrlong	result2, fp
15e48     04 4E 05 F1 | 	add	fp, #4
15e4c     A7 FE 61 FC | 	wrlong	result3, fp
15e50     08 4E 85 F1 | 	sub	fp, #8
15e54     A7 12 02 F6 | 	mov	arg01, fp
15e58     0C 4E 85 F1 | 	sub	fp, #12
15e5c     A4 CF BF FD | 	call	#_converttoint
15e60     FD 20 02 F6 | 	mov	local02, result1
15e64     10 1F 02 F6 | 	mov	local01, local02
15e68     01 1E 66 F0 | 	shl	local01, #1
15e6c     10 1F 02 F1 | 	add	local01, local02
15e70     03 1E 66 F0 | 	shl	local01, #3
15e74     34 00 00 FF 
15e78     38 E5 05 F1 | 	add	objptr, ##26936
15e7c     F2 1E 02 F1 | 	add	local01, objptr
15e80     A7 12 02 F6 | 	mov	arg01, fp
15e84     34 00 00 FF 
15e88     38 E5 85 F1 | 	sub	objptr, ##26936
15e8c     20 D0 BF FD | 	call	#_converttofloat
15e90     10 1E 06 F1 | 	add	local01, #16
15e94     0F FB 61 FC | 	wrlong	result1, local01
15e98     A7 F0 03 F6 | 	mov	ptra, fp
15e9c     B2 00 A0 FD | 	call	#popregs_
15ea0                 | _do_setpan_ret
15ea0     2D 00 64 FD | 	ret
15ea4                 | 
15ea4                 | ' 
15ea4                 | ' 
15ea4                 | ' sub do_pinwrite
15ea4                 | _do_pinwrite
15ea4     01 4A 05 F6 | 	mov	COUNT_, #1
15ea8     A8 00 A0 FD | 	call	#pushregs_
15eac     18 F0 07 F1 | 	add	ptra, #24
15eb0     F8 42 BF FD | 	call	#_pop
15eb4     FD 14 02 F6 | 	mov	arg02, result1
15eb8     FE 12 02 F6 | 	mov	arg01, result2
15ebc     FF 1E 02 F6 | 	mov	local01, result3
15ec0     A7 14 62 FC | 	wrlong	arg02, fp
15ec4     04 4E 05 F1 | 	add	fp, #4
15ec8     A7 12 62 FC | 	wrlong	arg01, fp
15ecc     04 4E 05 F1 | 	add	fp, #4
15ed0     A7 1E 62 FC | 	wrlong	local01, fp
15ed4     08 4E 85 F1 | 	sub	fp, #8
15ed8     D0 42 BF FD | 	call	#_pop
15edc     FF 1E 02 F6 | 	mov	local01, result3
15ee0     0C 4E 05 F1 | 	add	fp, #12
15ee4     A7 FA 61 FC | 	wrlong	result1, fp
15ee8     04 4E 05 F1 | 	add	fp, #4
15eec     A7 FC 61 FC | 	wrlong	result2, fp
15ef0     04 4E 05 F1 | 	add	fp, #4
15ef4     A7 1E 62 FC | 	wrlong	local01, fp
15ef8     08 4E 85 F1 | 	sub	fp, #8
15efc     A7 12 02 F6 | 	mov	arg01, fp
15f00     0C 4E 85 F1 | 	sub	fp, #12
15f04     FC CE BF FD | 	call	#_converttoint
15f08     FD 1E 02 F6 | 	mov	local01, result1
15f0c     A7 12 02 F6 | 	mov	arg01, fp
15f10     F0 CE BF FD | 	call	#_converttoint
15f14     FD 14 02 F6 | 	mov	arg02, result1
15f18     0F 13 02 F6 | 	mov	arg01, local01
15f1c     E0 76 B0 FD | 	call	#__system___pinwrite
15f20     A7 F0 03 F6 | 	mov	ptra, fp
15f24     B2 00 A0 FD | 	call	#popregs_
15f28                 | _do_pinwrite_ret
15f28     2D 00 64 FD | 	ret
15f2c                 | 
15f2c                 | ' 
15f2c                 | ' sub do_pinfloat
15f2c                 | _do_pinfloat
15f2c     00 4A 05 F6 | 	mov	COUNT_, #0
15f30     A8 00 A0 FD | 	call	#pushregs_
15f34     0C F0 07 F1 | 	add	ptra, #12
15f38     70 42 BF FD | 	call	#_pop
15f3c     A7 FA 61 FC | 	wrlong	result1, fp
15f40     04 4E 05 F1 | 	add	fp, #4
15f44     A7 FC 61 FC | 	wrlong	result2, fp
15f48     04 4E 05 F1 | 	add	fp, #4
15f4c     A7 FE 61 FC | 	wrlong	result3, fp
15f50     08 4E 85 F1 | 	sub	fp, #8
15f54     A7 12 02 F6 | 	mov	arg01, fp
15f58     A8 CE BF FD | 	call	#_converttoint
15f5c     50 FA 61 FD | 	fltl	result1
15f60     A7 F0 03 F6 | 	mov	ptra, fp
15f64     B2 00 A0 FD | 	call	#popregs_
15f68                 | _do_pinfloat_ret
15f68     2D 00 64 FD | 	ret
15f6c                 | 
15f6c                 | ' 
15f6c                 | ' sub do_pinlo
15f6c                 | _do_pinlo
15f6c     00 4A 05 F6 | 	mov	COUNT_, #0
15f70     A8 00 A0 FD | 	call	#pushregs_
15f74     0C F0 07 F1 | 	add	ptra, #12
15f78     30 42 BF FD | 	call	#_pop
15f7c     A7 FA 61 FC | 	wrlong	result1, fp
15f80     04 4E 05 F1 | 	add	fp, #4
15f84     A7 FC 61 FC | 	wrlong	result2, fp
15f88     04 4E 05 F1 | 	add	fp, #4
15f8c     A7 FE 61 FC | 	wrlong	result3, fp
15f90     08 4E 85 F1 | 	sub	fp, #8
15f94     A7 12 02 F6 | 	mov	arg01, fp
15f98     68 CE BF FD | 	call	#_converttoint
15f9c     58 FA 61 FD | 	drvl	result1
15fa0     A7 F0 03 F6 | 	mov	ptra, fp
15fa4     B2 00 A0 FD | 	call	#popregs_
15fa8                 | _do_pinlo_ret
15fa8     2D 00 64 FD | 	ret
15fac                 | 
15fac                 | ' 
15fac                 | ' sub do_pinhi
15fac                 | _do_pinhi
15fac     00 4A 05 F6 | 	mov	COUNT_, #0
15fb0     A8 00 A0 FD | 	call	#pushregs_
15fb4     0C F0 07 F1 | 	add	ptra, #12
15fb8     F0 41 BF FD | 	call	#_pop
15fbc     A7 FA 61 FC | 	wrlong	result1, fp
15fc0     04 4E 05 F1 | 	add	fp, #4
15fc4     A7 FC 61 FC | 	wrlong	result2, fp
15fc8     04 4E 05 F1 | 	add	fp, #4
15fcc     A7 FE 61 FC | 	wrlong	result3, fp
15fd0     08 4E 85 F1 | 	sub	fp, #8
15fd4     A7 12 02 F6 | 	mov	arg01, fp
15fd8     28 CE BF FD | 	call	#_converttoint
15fdc     59 FA 61 FD | 	drvh	result1
15fe0     A7 F0 03 F6 | 	mov	ptra, fp
15fe4     B2 00 A0 FD | 	call	#popregs_
15fe8                 | _do_pinhi_ret
15fe8     2D 00 64 FD | 	ret
15fec                 | 
15fec                 | ' 
15fec                 | ' sub do_pintoggle
15fec                 | _do_pintoggle
15fec     00 4A 05 F6 | 	mov	COUNT_, #0
15ff0     A8 00 A0 FD | 	call	#pushregs_
15ff4     0C F0 07 F1 | 	add	ptra, #12
15ff8     B0 41 BF FD | 	call	#_pop
15ffc     A7 FA 61 FC | 	wrlong	result1, fp
16000     04 4E 05 F1 | 	add	fp, #4
16004     A7 FC 61 FC | 	wrlong	result2, fp
16008     04 4E 05 F1 | 	add	fp, #4
1600c     A7 FE 61 FC | 	wrlong	result3, fp
16010     08 4E 85 F1 | 	sub	fp, #8
16014     A7 12 02 F6 | 	mov	arg01, fp
16018     E8 CD BF FD | 	call	#_converttoint
1601c     5F FA 61 FD | 	drvnot	result1
16020     A7 F0 03 F6 | 	mov	ptra, fp
16024     B2 00 A0 FD | 	call	#popregs_
16028                 | _do_pintoggle_ret
16028     2D 00 64 FD | 	ret
1602c                 | 
1602c                 | ' 
1602c                 | ' 
1602c                 | ' sub do_pinstart
1602c                 | _do_pinstart
1602c     03 4A 05 F6 | 	mov	COUNT_, #3
16030     A8 00 A0 FD | 	call	#pushregs_
16034     30 F0 07 F1 | 	add	ptra, #48
16038     70 41 BF FD | 	call	#_pop
1603c     FD 16 02 F6 | 	mov	arg03, result1
16040     FE 14 02 F6 | 	mov	arg02, result2
16044     FF 18 02 F6 | 	mov	arg04, result3
16048     A7 16 62 FC | 	wrlong	arg03, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 14 62 FC | 	wrlong	arg02, fp
16054     04 4E 05 F1 | 	add	fp, #4
16058     A7 18 62 FC | 	wrlong	arg04, fp
1605c     08 4E 85 F1 | 	sub	fp, #8
16060     48 41 BF FD | 	call	#_pop
16064     FD 16 02 F6 | 	mov	arg03, result1
16068     FE 14 02 F6 | 	mov	arg02, result2
1606c     FF 18 02 F6 | 	mov	arg04, result3
16070     0C 4E 05 F1 | 	add	fp, #12
16074     A7 16 62 FC | 	wrlong	arg03, fp
16078     04 4E 05 F1 | 	add	fp, #4
1607c     A7 14 62 FC | 	wrlong	arg02, fp
16080     04 4E 05 F1 | 	add	fp, #4
16084     A7 18 62 FC | 	wrlong	arg04, fp
16088     14 4E 85 F1 | 	sub	fp, #20
1608c     1C 41 BF FD | 	call	#_pop
16090     FD 16 02 F6 | 	mov	arg03, result1
16094     FE 14 02 F6 | 	mov	arg02, result2
16098     FF 18 02 F6 | 	mov	arg04, result3
1609c     18 4E 05 F1 | 	add	fp, #24
160a0     A7 16 62 FC | 	wrlong	arg03, fp
160a4     04 4E 05 F1 | 	add	fp, #4
160a8     A7 14 62 FC | 	wrlong	arg02, fp
160ac     04 4E 05 F1 | 	add	fp, #4
160b0     A7 18 62 FC | 	wrlong	arg04, fp
160b4     20 4E 85 F1 | 	sub	fp, #32
160b8     F0 40 BF FD | 	call	#_pop
160bc     FF 16 02 F6 | 	mov	arg03, result3
160c0     24 4E 05 F1 | 	add	fp, #36
160c4     A7 FA 61 FC | 	wrlong	result1, fp
160c8     04 4E 05 F1 | 	add	fp, #4
160cc     A7 FC 61 FC | 	wrlong	result2, fp
160d0     04 4E 05 F1 | 	add	fp, #4
160d4     A7 16 62 FC | 	wrlong	arg03, fp
160d8     08 4E 85 F1 | 	sub	fp, #8
160dc     A7 12 02 F6 | 	mov	arg01, fp
160e0     24 4E 85 F1 | 	sub	fp, #36
160e4     1C CD BF FD | 	call	#_converttoint
160e8     FD 1E 02 F6 | 	mov	local01, result1
160ec     18 4E 05 F1 | 	add	fp, #24
160f0     A7 12 02 F6 | 	mov	arg01, fp
160f4     18 4E 85 F1 | 	sub	fp, #24
160f8     08 CD BF FD | 	call	#_converttoint
160fc     FD 20 02 F6 | 	mov	local02, result1
16100     0C 4E 05 F1 | 	add	fp, #12
16104     A7 12 02 F6 | 	mov	arg01, fp
16108     0C 4E 85 F1 | 	sub	fp, #12
1610c     F4 CC BF FD | 	call	#_converttoint
16110     FD 22 02 F6 | 	mov	local03, result1
16114     A7 12 02 F6 | 	mov	arg01, fp
16118     E8 CC BF FD | 	call	#_converttoint
1611c     40 1E 62 FD | 	dirl	local01
16120     0F 21 02 FC | 	wrpin	local02, local01
16124     0F 23 12 FC | 	wxpin	local03, local01
16128     0F FB 21 FC | 	wypin	result1, local01
1612c     41 1E 62 FD | 	dirh	local01
16130     A7 F0 03 F6 | 	mov	ptra, fp
16134     B2 00 A0 FD | 	call	#popregs_
16138                 | _do_pinstart_ret
16138     2D 00 64 FD | 	ret
1613c                 | 
1613c                 | ' 
1613c                 | ' 
1613c                 | ' sub do_wrpin
1613c                 | _do_wrpin
1613c     01 4A 05 F6 | 	mov	COUNT_, #1
16140     A8 00 A0 FD | 	call	#pushregs_
16144     18 F0 07 F1 | 	add	ptra, #24
16148     60 40 BF FD | 	call	#_pop
1614c     FD 14 02 F6 | 	mov	arg02, result1
16150     FE 12 02 F6 | 	mov	arg01, result2
16154     FF 1E 02 F6 | 	mov	local01, result3
16158     A7 14 62 FC | 	wrlong	arg02, fp
1615c     04 4E 05 F1 | 	add	fp, #4
16160     A7 12 62 FC | 	wrlong	arg01, fp
16164     04 4E 05 F1 | 	add	fp, #4
16168     A7 1E 62 FC | 	wrlong	local01, fp
1616c     08 4E 85 F1 | 	sub	fp, #8
16170     38 40 BF FD | 	call	#_pop
16174     FF 1E 02 F6 | 	mov	local01, result3
16178     0C 4E 05 F1 | 	add	fp, #12
1617c     A7 FA 61 FC | 	wrlong	result1, fp
16180     04 4E 05 F1 | 	add	fp, #4
16184     A7 FC 61 FC | 	wrlong	result2, fp
16188     04 4E 05 F1 | 	add	fp, #4
1618c     A7 1E 62 FC | 	wrlong	local01, fp
16190     08 4E 85 F1 | 	sub	fp, #8
16194     A7 12 02 F6 | 	mov	arg01, fp
16198     0C 4E 85 F1 | 	sub	fp, #12
1619c     64 CC BF FD | 	call	#_converttoint
161a0     FD 1E 02 F6 | 	mov	local01, result1
161a4     A7 12 02 F6 | 	mov	arg01, fp
161a8     58 CC BF FD | 	call	#_converttoint
161ac     0F FB 01 FC | 	wrpin	result1, local01
161b0     A7 F0 03 F6 | 	mov	ptra, fp
161b4     B2 00 A0 FD | 	call	#popregs_
161b8                 | _do_wrpin_ret
161b8     2D 00 64 FD | 	ret
161bc                 | 
161bc                 | ' 
161bc                 | ' sub do_wxpin
161bc                 | _do_wxpin
161bc     01 4A 05 F6 | 	mov	COUNT_, #1
161c0     A8 00 A0 FD | 	call	#pushregs_
161c4     18 F0 07 F1 | 	add	ptra, #24
161c8     E0 3F BF FD | 	call	#_pop
161cc     FD 14 02 F6 | 	mov	arg02, result1
161d0     FE 12 02 F6 | 	mov	arg01, result2
161d4     FF 1E 02 F6 | 	mov	local01, result3
161d8     A7 14 62 FC | 	wrlong	arg02, fp
161dc     04 4E 05 F1 | 	add	fp, #4
161e0     A7 12 62 FC | 	wrlong	arg01, fp
161e4     04 4E 05 F1 | 	add	fp, #4
161e8     A7 1E 62 FC | 	wrlong	local01, fp
161ec     08 4E 85 F1 | 	sub	fp, #8
161f0     B8 3F BF FD | 	call	#_pop
161f4     FF 1E 02 F6 | 	mov	local01, result3
161f8     0C 4E 05 F1 | 	add	fp, #12
161fc     A7 FA 61 FC | 	wrlong	result1, fp
16200     04 4E 05 F1 | 	add	fp, #4
16204     A7 FC 61 FC | 	wrlong	result2, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 1E 62 FC | 	wrlong	local01, fp
16210     08 4E 85 F1 | 	sub	fp, #8
16214     A7 12 02 F6 | 	mov	arg01, fp
16218     0C 4E 85 F1 | 	sub	fp, #12
1621c     E4 CB BF FD | 	call	#_converttoint
16220     FD 1E 02 F6 | 	mov	local01, result1
16224     A7 12 02 F6 | 	mov	arg01, fp
16228     D8 CB BF FD | 	call	#_converttoint
1622c     0F FB 11 FC | 	wxpin	result1, local01
16230     A7 F0 03 F6 | 	mov	ptra, fp
16234     B2 00 A0 FD | 	call	#popregs_
16238                 | _do_wxpin_ret
16238     2D 00 64 FD | 	ret
1623c                 | 
1623c                 | ' 
1623c                 | ' sub do_wypin
1623c                 | _do_wypin
1623c     01 4A 05 F6 | 	mov	COUNT_, #1
16240     A8 00 A0 FD | 	call	#pushregs_
16244     18 F0 07 F1 | 	add	ptra, #24
16248     60 3F BF FD | 	call	#_pop
1624c     FD 14 02 F6 | 	mov	arg02, result1
16250     FE 12 02 F6 | 	mov	arg01, result2
16254     FF 1E 02 F6 | 	mov	local01, result3
16258     A7 14 62 FC | 	wrlong	arg02, fp
1625c     04 4E 05 F1 | 	add	fp, #4
16260     A7 12 62 FC | 	wrlong	arg01, fp
16264     04 4E 05 F1 | 	add	fp, #4
16268     A7 1E 62 FC | 	wrlong	local01, fp
1626c     08 4E 85 F1 | 	sub	fp, #8
16270     38 3F BF FD | 	call	#_pop
16274     FF 1E 02 F6 | 	mov	local01, result3
16278     0C 4E 05 F1 | 	add	fp, #12
1627c     A7 FA 61 FC | 	wrlong	result1, fp
16280     04 4E 05 F1 | 	add	fp, #4
16284     A7 FC 61 FC | 	wrlong	result2, fp
16288     04 4E 05 F1 | 	add	fp, #4
1628c     A7 1E 62 FC | 	wrlong	local01, fp
16290     08 4E 85 F1 | 	sub	fp, #8
16294     A7 12 02 F6 | 	mov	arg01, fp
16298     0C 4E 85 F1 | 	sub	fp, #12
1629c     64 CB BF FD | 	call	#_converttoint
162a0     FD 1E 02 F6 | 	mov	local01, result1
162a4     A7 12 02 F6 | 	mov	arg01, fp
162a8     58 CB BF FD | 	call	#_converttoint
162ac     0F FB 21 FC | 	wypin	result1, local01
162b0     A7 F0 03 F6 | 	mov	ptra, fp
162b4     B2 00 A0 FD | 	call	#popregs_
162b8                 | _do_wypin_ret
162b8     2D 00 64 FD | 	ret
162bc                 | 
162bc                 | ' 
162bc                 | ' sub do_position
162bc                 | _do_position
162bc     01 4A 05 F6 | 	mov	COUNT_, #1
162c0     A8 00 A0 FD | 	call	#pushregs_
162c4     18 F0 07 F1 | 	add	ptra, #24
162c8     E0 3E BF FD | 	call	#_pop
162cc     FD 14 02 F6 | 	mov	arg02, result1
162d0     FE 12 02 F6 | 	mov	arg01, result2
162d4     FF 1E 02 F6 | 	mov	local01, result3
162d8     A7 14 62 FC | 	wrlong	arg02, fp
162dc     04 4E 05 F1 | 	add	fp, #4
162e0     A7 12 62 FC | 	wrlong	arg01, fp
162e4     04 4E 05 F1 | 	add	fp, #4
162e8     A7 1E 62 FC | 	wrlong	local01, fp
162ec     08 4E 85 F1 | 	sub	fp, #8
162f0     B8 3E BF FD | 	call	#_pop
162f4     FF 1E 02 F6 | 	mov	local01, result3
162f8     0C 4E 05 F1 | 	add	fp, #12
162fc     A7 FA 61 FC | 	wrlong	result1, fp
16300     04 4E 05 F1 | 	add	fp, #4
16304     A7 FC 61 FC | 	wrlong	result2, fp
16308     04 4E 05 F1 | 	add	fp, #4
1630c     A7 1E 62 FC | 	wrlong	local01, fp
16310     08 4E 85 F1 | 	sub	fp, #8
16314     A7 12 02 F6 | 	mov	arg01, fp
16318     0C 4E 85 F1 | 	sub	fp, #12
1631c     E4 CA BF FD | 	call	#_converttoint
16320     FD 1E 02 F6 | 	mov	local01, result1
16324     A7 12 02 F6 | 	mov	arg01, fp
16328     D8 CA BF FD | 	call	#_converttoint
1632c     FD 14 02 F6 | 	mov	arg02, result1
16330     0F 13 02 F6 | 	mov	arg01, local01
16334     98 59 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16338     A7 F0 03 F6 | 	mov	ptra, fp
1633c     B2 00 A0 FD | 	call	#popregs_
16340                 | _do_position_ret
16340     2D 00 64 FD | 	ret
16344                 | 
16344                 | ' 
16344                 | ' sub do_poke
16344                 | _do_poke
16344     01 4A 05 F6 | 	mov	COUNT_, #1
16348     A8 00 A0 FD | 	call	#pushregs_
1634c     20 F0 07 F1 | 	add	ptra, #32
16350     58 3E BF FD | 	call	#_pop
16354     FD 14 02 F6 | 	mov	arg02, result1
16358     FE 12 02 F6 | 	mov	arg01, result2
1635c     FF 1E 02 F6 | 	mov	local01, result3
16360     A7 14 62 FC | 	wrlong	arg02, fp
16364     04 4E 05 F1 | 	add	fp, #4
16368     A7 12 62 FC | 	wrlong	arg01, fp
1636c     04 4E 05 F1 | 	add	fp, #4
16370     A7 1E 62 FC | 	wrlong	local01, fp
16374     08 4E 85 F1 | 	sub	fp, #8
16378     30 3E BF FD | 	call	#_pop
1637c     FF 1E 02 F6 | 	mov	local01, result3
16380     0C 4E 05 F1 | 	add	fp, #12
16384     A7 FA 61 FC | 	wrlong	result1, fp
16388     04 4E 05 F1 | 	add	fp, #4
1638c     A7 FC 61 FC | 	wrlong	result2, fp
16390     04 4E 05 F1 | 	add	fp, #4
16394     A7 1E 62 FC | 	wrlong	local01, fp
16398     08 4E 85 F1 | 	sub	fp, #8
1639c     A7 12 02 F6 | 	mov	arg01, fp
163a0     0C 4E 85 F1 | 	sub	fp, #12
163a4     5C CA BF FD | 	call	#_converttoint
163a8     18 4E 05 F1 | 	add	fp, #24
163ac     A7 FA 61 FC | 	wrlong	result1, fp
163b0     18 4E 85 F1 | 	sub	fp, #24
163b4     A7 12 02 F6 | 	mov	arg01, fp
163b8     48 CA BF FD | 	call	#_converttoint
163bc     1C 4E 05 F1 | 	add	fp, #28
163c0     A7 FA 61 FC | 	wrlong	result1, fp
163c4                 | ' t1=pop() 'value
163c4                 | ' t2=pop() 
163c4                 | ' a=converttoint(t2) : v=converttoint(t1)
163c4                 | ' if a<$80000 then poke a,v else pspoke a,v
163c4     04 4E 85 F1 | 	sub	fp, #4
163c8     A7 1E 02 FB | 	rdlong	local01, fp
163cc     18 4E 85 F1 | 	sub	fp, #24
163d0     00 04 00 FF 
163d4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
163d8     1C 00 90 3D |  if_ae	jmp	#LR__1740
163dc     18 4E 05 F1 | 	add	fp, #24
163e0     A7 12 02 FB | 	rdlong	arg01, fp
163e4     04 4E 05 F1 | 	add	fp, #4
163e8     A7 14 02 FB | 	rdlong	arg02, fp
163ec     1C 4E 85 F1 | 	sub	fp, #28
163f0     09 15 42 FC | 	wrbyte	arg02, arg01
163f4     18 00 90 FD | 	jmp	#LR__1741
163f8                 | LR__1740
163f8     18 4E 05 F1 | 	add	fp, #24
163fc     A7 12 02 FB | 	rdlong	arg01, fp
16400     04 4E 05 F1 | 	add	fp, #4
16404     A7 14 02 FB | 	rdlong	arg02, fp
16408     1C 4E 85 F1 | 	sub	fp, #28
1640c     F0 2D B0 FD | 	call	#_pspoke
16410                 | LR__1741
16410     A7 F0 03 F6 | 	mov	ptra, fp
16414     B2 00 A0 FD | 	call	#popregs_
16418                 | _do_poke_ret
16418     2D 00 64 FD | 	ret
1641c                 | 
1641c                 | ' 
1641c                 | ' sub do_dpoke
1641c                 | _do_dpoke
1641c     01 4A 05 F6 | 	mov	COUNT_, #1
16420     A8 00 A0 FD | 	call	#pushregs_
16424     20 F0 07 F1 | 	add	ptra, #32
16428     80 3D BF FD | 	call	#_pop
1642c     FD 14 02 F6 | 	mov	arg02, result1
16430     FE 12 02 F6 | 	mov	arg01, result2
16434     FF 1E 02 F6 | 	mov	local01, result3
16438     A7 14 62 FC | 	wrlong	arg02, fp
1643c     04 4E 05 F1 | 	add	fp, #4
16440     A7 12 62 FC | 	wrlong	arg01, fp
16444     04 4E 05 F1 | 	add	fp, #4
16448     A7 1E 62 FC | 	wrlong	local01, fp
1644c     08 4E 85 F1 | 	sub	fp, #8
16450     58 3D BF FD | 	call	#_pop
16454     FF 1E 02 F6 | 	mov	local01, result3
16458     0C 4E 05 F1 | 	add	fp, #12
1645c     A7 FA 61 FC | 	wrlong	result1, fp
16460     04 4E 05 F1 | 	add	fp, #4
16464     A7 FC 61 FC | 	wrlong	result2, fp
16468     04 4E 05 F1 | 	add	fp, #4
1646c     A7 1E 62 FC | 	wrlong	local01, fp
16470     08 4E 85 F1 | 	sub	fp, #8
16474     A7 12 02 F6 | 	mov	arg01, fp
16478     0C 4E 85 F1 | 	sub	fp, #12
1647c     84 C9 BF FD | 	call	#_converttoint
16480     18 4E 05 F1 | 	add	fp, #24
16484     A7 FA 61 FC | 	wrlong	result1, fp
16488     18 4E 85 F1 | 	sub	fp, #24
1648c     A7 12 02 F6 | 	mov	arg01, fp
16490     70 C9 BF FD | 	call	#_converttoint
16494     1C 4E 05 F1 | 	add	fp, #28
16498     A7 FA 61 FC | 	wrlong	result1, fp
1649c                 | ' t1=pop() 'value
1649c                 | ' t2=pop() 
1649c                 | ' a=converttoint(t2) : v=converttoint(t1)
1649c                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1649c     04 4E 85 F1 | 	sub	fp, #4
164a0     A7 1E 02 FB | 	rdlong	local01, fp
164a4     18 4E 85 F1 | 	sub	fp, #24
164a8     00 04 00 FF 
164ac     00 1E 16 F2 | 	cmp	local01, ##524288 wc
164b0     1C 00 90 3D |  if_ae	jmp	#LR__1750
164b4     18 4E 05 F1 | 	add	fp, #24
164b8     A7 12 02 FB | 	rdlong	arg01, fp
164bc     04 4E 05 F1 | 	add	fp, #4
164c0     A7 14 02 FB | 	rdlong	arg02, fp
164c4     1C 4E 85 F1 | 	sub	fp, #28
164c8     09 15 52 FC | 	wrword	arg02, arg01
164cc     18 00 90 FD | 	jmp	#LR__1751
164d0                 | LR__1750
164d0     18 4E 05 F1 | 	add	fp, #24
164d4     A7 12 02 FB | 	rdlong	arg01, fp
164d8     04 4E 05 F1 | 	add	fp, #4
164dc     A7 14 02 FB | 	rdlong	arg02, fp
164e0     1C 4E 85 F1 | 	sub	fp, #28
164e4     D0 2C B0 FD | 	call	#_psdpoke
164e8                 | LR__1751
164e8     A7 F0 03 F6 | 	mov	ptra, fp
164ec     B2 00 A0 FD | 	call	#popregs_
164f0                 | _do_dpoke_ret
164f0     2D 00 64 FD | 	ret
164f4                 | 
164f4                 | ' 
164f4                 | ' sub do_lpoke
164f4                 | _do_lpoke
164f4     01 4A 05 F6 | 	mov	COUNT_, #1
164f8     A8 00 A0 FD | 	call	#pushregs_
164fc     20 F0 07 F1 | 	add	ptra, #32
16500     A8 3C BF FD | 	call	#_pop
16504     FD 14 02 F6 | 	mov	arg02, result1
16508     FE 12 02 F6 | 	mov	arg01, result2
1650c     FF 1E 02 F6 | 	mov	local01, result3
16510     A7 14 62 FC | 	wrlong	arg02, fp
16514     04 4E 05 F1 | 	add	fp, #4
16518     A7 12 62 FC | 	wrlong	arg01, fp
1651c     04 4E 05 F1 | 	add	fp, #4
16520     A7 1E 62 FC | 	wrlong	local01, fp
16524     08 4E 85 F1 | 	sub	fp, #8
16528     80 3C BF FD | 	call	#_pop
1652c     FF 1E 02 F6 | 	mov	local01, result3
16530     0C 4E 05 F1 | 	add	fp, #12
16534     A7 FA 61 FC | 	wrlong	result1, fp
16538     04 4E 05 F1 | 	add	fp, #4
1653c     A7 FC 61 FC | 	wrlong	result2, fp
16540     04 4E 05 F1 | 	add	fp, #4
16544     A7 1E 62 FC | 	wrlong	local01, fp
16548     08 4E 85 F1 | 	sub	fp, #8
1654c     A7 12 02 F6 | 	mov	arg01, fp
16550     0C 4E 85 F1 | 	sub	fp, #12
16554     AC C8 BF FD | 	call	#_converttoint
16558     18 4E 05 F1 | 	add	fp, #24
1655c     A7 FA 61 FC | 	wrlong	result1, fp
16560     18 4E 85 F1 | 	sub	fp, #24
16564     A7 12 02 F6 | 	mov	arg01, fp
16568     98 C8 BF FD | 	call	#_converttoint
1656c     1C 4E 05 F1 | 	add	fp, #28
16570     A7 FA 61 FC | 	wrlong	result1, fp
16574                 | ' t1=pop() 'value
16574                 | ' t2=pop() 
16574                 | ' a=converttoint(t2) : v=converttoint(t1)
16574                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16574     04 4E 85 F1 | 	sub	fp, #4
16578     A7 1E 02 FB | 	rdlong	local01, fp
1657c     18 4E 85 F1 | 	sub	fp, #24
16580     00 04 00 FF 
16584     00 1E 16 F2 | 	cmp	local01, ##524288 wc
16588     1C 00 90 3D |  if_ae	jmp	#LR__1760
1658c     18 4E 05 F1 | 	add	fp, #24
16590     A7 12 02 FB | 	rdlong	arg01, fp
16594     04 4E 05 F1 | 	add	fp, #4
16598     A7 14 02 FB | 	rdlong	arg02, fp
1659c     1C 4E 85 F1 | 	sub	fp, #28
165a0     09 15 62 FC | 	wrlong	arg02, arg01
165a4     18 00 90 FD | 	jmp	#LR__1761
165a8                 | LR__1760
165a8     18 4E 05 F1 | 	add	fp, #24
165ac     A7 12 02 FB | 	rdlong	arg01, fp
165b0     04 4E 05 F1 | 	add	fp, #4
165b4     A7 14 02 FB | 	rdlong	arg02, fp
165b8     1C 4E 85 F1 | 	sub	fp, #28
165bc     B0 2B B0 FD | 	call	#_pslpoke
165c0                 | LR__1761
165c0     A7 F0 03 F6 | 	mov	ptra, fp
165c4     B2 00 A0 FD | 	call	#popregs_
165c8                 | _do_lpoke_ret
165c8     2D 00 64 FD | 	ret
165cc                 | 
165cc                 | ' 
165cc                 | ' sub do_peek
165cc                 | _do_peek
165cc     00 4A 05 F6 | 	mov	COUNT_, #0
165d0     A8 00 A0 FD | 	call	#pushregs_
165d4     14 F0 07 F1 | 	add	ptra, #20
165d8     D0 3B BF FD | 	call	#_pop
165dc     A7 FA 61 FC | 	wrlong	result1, fp
165e0     04 4E 05 F1 | 	add	fp, #4
165e4     A7 FC 61 FC | 	wrlong	result2, fp
165e8     04 4E 05 F1 | 	add	fp, #4
165ec     A7 FE 61 FC | 	wrlong	result3, fp
165f0     08 4E 85 F1 | 	sub	fp, #8
165f4     A7 12 02 F6 | 	mov	arg01, fp
165f8     08 C8 BF FD | 	call	#_converttoint
165fc     0C 4E 05 F1 | 	add	fp, #12
16600     A7 FA 61 FC | 	wrlong	result1, fp
16604                 | ' t1=pop()
16604                 | ' a=converttoint(t1)
16604                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16604     0C 4E 85 F1 | 	sub	fp, #12
16608     00 04 00 FF 
1660c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16610     1C 00 90 3D |  if_ae	jmp	#LR__1770
16614     0C 4E 05 F1 | 	add	fp, #12
16618     A7 12 02 FB | 	rdlong	arg01, fp
1661c     09 FB C1 FA | 	rdbyte	result1, arg01
16620     04 4E 05 F1 | 	add	fp, #4
16624     A7 FA 61 FC | 	wrlong	result1, fp
16628     10 4E 85 F1 | 	sub	fp, #16
1662c     20 00 90 FD | 	jmp	#LR__1771
16630                 | LR__1770
16630     0C 4E 05 F1 | 	add	fp, #12
16634     A7 12 02 FB | 	rdlong	arg01, fp
16638     0C 4E 85 F1 | 	sub	fp, #12
1663c     08 2C B0 FD | 	call	#_pspeek
16640     FD FA E1 F8 | 	getbyte	result1, result1, #0
16644     10 4E 05 F1 | 	add	fp, #16
16648     A7 FA 61 FC | 	wrlong	result1, fp
1664c     10 4E 85 F1 | 	sub	fp, #16
16650                 | LR__1771
16650     08 4E 05 F1 | 	add	fp, #8
16654     A7 3A 68 FC | 	wrlong	#29, fp
16658     08 4E 05 F1 | 	add	fp, #8
1665c     A7 12 02 FB | 	rdlong	arg01, fp
16660     10 4E 85 F1 | 	sub	fp, #16
16664     A7 12 62 FC | 	wrlong	arg01, fp
16668     A7 12 02 F6 | 	mov	arg01, fp
1666c     D4 3B BF FD | 	call	#_push
16670     A7 F0 03 F6 | 	mov	ptra, fp
16674     B2 00 A0 FD | 	call	#popregs_
16678                 | _do_peek_ret
16678     2D 00 64 FD | 	ret
1667c                 | 
1667c                 | ' 
1667c                 | ' sub do_dpeek
1667c                 | _do_dpeek
1667c     00 4A 05 F6 | 	mov	COUNT_, #0
16680     A8 00 A0 FD | 	call	#pushregs_
16684     14 F0 07 F1 | 	add	ptra, #20
16688     20 3B BF FD | 	call	#_pop
1668c     A7 FA 61 FC | 	wrlong	result1, fp
16690     04 4E 05 F1 | 	add	fp, #4
16694     A7 FC 61 FC | 	wrlong	result2, fp
16698     04 4E 05 F1 | 	add	fp, #4
1669c     A7 FE 61 FC | 	wrlong	result3, fp
166a0     08 4E 85 F1 | 	sub	fp, #8
166a4     A7 12 02 F6 | 	mov	arg01, fp
166a8     58 C7 BF FD | 	call	#_converttoint
166ac     0C 4E 05 F1 | 	add	fp, #12
166b0     A7 FA 61 FC | 	wrlong	result1, fp
166b4                 | ' t1=pop()
166b4                 | ' a=converttoint(t1)
166b4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
166b4     0C 4E 85 F1 | 	sub	fp, #12
166b8     00 04 00 FF 
166bc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
166c0     1C 00 90 3D |  if_ae	jmp	#LR__1780
166c4     0C 4E 05 F1 | 	add	fp, #12
166c8     A7 12 02 FB | 	rdlong	arg01, fp
166cc     09 FB E1 FA | 	rdword	result1, arg01
166d0     04 4E 05 F1 | 	add	fp, #4
166d4     A7 FA 61 FC | 	wrlong	result1, fp
166d8     10 4E 85 F1 | 	sub	fp, #16
166dc     1C 00 90 FD | 	jmp	#LR__1781
166e0                 | LR__1780
166e0     0C 4E 05 F1 | 	add	fp, #12
166e4     A7 12 02 FB | 	rdlong	arg01, fp
166e8     0C 4E 85 F1 | 	sub	fp, #12
166ec     08 2C B0 FD | 	call	#_psdpeek
166f0     10 4E 05 F1 | 	add	fp, #16
166f4     A7 FA 61 FC | 	wrlong	result1, fp
166f8     10 4E 85 F1 | 	sub	fp, #16
166fc                 | LR__1781
166fc     08 4E 05 F1 | 	add	fp, #8
16700     A7 3A 68 FC | 	wrlong	#29, fp
16704     08 4E 05 F1 | 	add	fp, #8
16708     A7 12 02 FB | 	rdlong	arg01, fp
1670c     10 4E 85 F1 | 	sub	fp, #16
16710     A7 12 62 FC | 	wrlong	arg01, fp
16714     A7 12 02 F6 | 	mov	arg01, fp
16718     28 3B BF FD | 	call	#_push
1671c     A7 F0 03 F6 | 	mov	ptra, fp
16720     B2 00 A0 FD | 	call	#popregs_
16724                 | _do_dpeek_ret
16724     2D 00 64 FD | 	ret
16728                 | 
16728                 | ' 
16728                 | ' 
16728                 | ' sub do_lpeek
16728                 | _do_lpeek
16728     00 4A 05 F6 | 	mov	COUNT_, #0
1672c     A8 00 A0 FD | 	call	#pushregs_
16730     14 F0 07 F1 | 	add	ptra, #20
16734     74 3A BF FD | 	call	#_pop
16738     A7 FA 61 FC | 	wrlong	result1, fp
1673c     04 4E 05 F1 | 	add	fp, #4
16740     A7 FC 61 FC | 	wrlong	result2, fp
16744     04 4E 05 F1 | 	add	fp, #4
16748     A7 FE 61 FC | 	wrlong	result3, fp
1674c     08 4E 85 F1 | 	sub	fp, #8
16750     A7 12 02 F6 | 	mov	arg01, fp
16754     AC C6 BF FD | 	call	#_converttoint
16758     0C 4E 05 F1 | 	add	fp, #12
1675c     A7 FA 61 FC | 	wrlong	result1, fp
16760                 | ' t1=pop()
16760                 | ' a=converttoint(t1)
16760                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
16760     0C 4E 85 F1 | 	sub	fp, #12
16764     00 04 00 FF 
16768     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1676c     1C 00 90 3D |  if_ae	jmp	#LR__1790
16770     0C 4E 05 F1 | 	add	fp, #12
16774     A7 12 02 FB | 	rdlong	arg01, fp
16778     09 FB 01 FB | 	rdlong	result1, arg01
1677c     04 4E 05 F1 | 	add	fp, #4
16780     A7 FA 61 FC | 	wrlong	result1, fp
16784     10 4E 85 F1 | 	sub	fp, #16
16788     1C 00 90 FD | 	jmp	#LR__1791
1678c                 | LR__1790
1678c     0C 4E 05 F1 | 	add	fp, #12
16790     A7 12 02 FB | 	rdlong	arg01, fp
16794     0C 4E 85 F1 | 	sub	fp, #12
16798     04 2B B0 FD | 	call	#_pslpeek
1679c     10 4E 05 F1 | 	add	fp, #16
167a0     A7 FA 61 FC | 	wrlong	result1, fp
167a4     10 4E 85 F1 | 	sub	fp, #16
167a8                 | LR__1791
167a8     08 4E 05 F1 | 	add	fp, #8
167ac     A7 3A 68 FC | 	wrlong	#29, fp
167b0     08 4E 05 F1 | 	add	fp, #8
167b4     A7 12 02 FB | 	rdlong	arg01, fp
167b8     10 4E 85 F1 | 	sub	fp, #16
167bc     A7 12 62 FC | 	wrlong	arg01, fp
167c0     A7 12 02 F6 | 	mov	arg01, fp
167c4     7C 3A BF FD | 	call	#_push
167c8     A7 F0 03 F6 | 	mov	ptra, fp
167cc     B2 00 A0 FD | 	call	#popregs_
167d0                 | _do_lpeek_ret
167d0     2D 00 64 FD | 	ret
167d4                 | 
167d4                 | ' 
167d4                 | ' sub do_fre
167d4                 | _do_fre
167d4     01 4A 05 F6 | 	mov	COUNT_, #1
167d8     A8 00 A0 FD | 	call	#pushregs_
167dc     0C F0 07 F1 | 	add	ptra, #12
167e0     7B 00 00 FF 
167e4     68 E4 05 F1 | 	add	objptr, ##63080
167e8     F2 12 02 FB | 	rdlong	arg01, objptr
167ec     18 00 00 FF 
167f0     1C E4 85 F1 | 	sub	objptr, ##12316
167f4     F2 1E 02 FB | 	rdlong	local01, objptr
167f8     0F 13 82 F1 | 	sub	arg01, local01
167fc     18 00 00 FF 
16800     C4 E4 05 F1 | 	add	objptr, ##12484
16804     F2 12 62 FC | 	wrlong	arg01, objptr
16808     08 4E 05 F1 | 	add	fp, #8
1680c     A7 3A 68 FC | 	wrlong	#29, fp
16810     08 4E 85 F1 | 	sub	fp, #8
16814     F2 1E 02 FB | 	rdlong	local01, objptr
16818     7B 00 00 FF 
1681c     10 E5 85 F1 | 	sub	objptr, ##63248
16820     A7 1E 62 FC | 	wrlong	local01, fp
16824     A7 12 02 F6 | 	mov	arg01, fp
16828     18 3A BF FD | 	call	#_push
1682c     A7 F0 03 F6 | 	mov	ptra, fp
16830     B2 00 A0 FD | 	call	#popregs_
16834                 | _do_fre_ret
16834     2D 00 64 FD | 	ret
16838                 | 
16838                 | ' 
16838                 | ' sub do_adr
16838                 | _do_adr
16838                 | _do_adr_ret
16838     2D 00 64 FD | 	ret
1683c                 | 
1683c                 | ' 
1683c                 | ' sub do_getnotevalue
1683c                 | _do_getnotevalue
1683c     01 4A 05 F6 | 	mov	COUNT_, #1
16840     A8 00 A0 FD | 	call	#pushregs_
16844     1C F0 07 F1 | 	add	ptra, #28
16848     60 39 BF FD | 	call	#_pop
1684c     FF 14 02 F6 | 	mov	arg02, result3
16850     10 4E 05 F1 | 	add	fp, #16
16854     A7 FA 61 FC | 	wrlong	result1, fp
16858     04 4E 05 F1 | 	add	fp, #4
1685c     A7 FC 61 FC | 	wrlong	result2, fp
16860     04 4E 05 F1 | 	add	fp, #4
16864     A7 14 62 FC | 	wrlong	arg02, fp
16868     08 4E 85 F1 | 	sub	fp, #8
1686c     A7 12 02 F6 | 	mov	arg01, fp
16870     10 4E 85 F1 | 	sub	fp, #16
16874     8C C5 BF FD | 	call	#_converttoint
16878     FD 14 52 F6 | 	abs	arg02, result1 wc
1687c     0C 14 16 FD | 	qdiv	arg02, #12
16880     0C 4E 05 F1 | 	add	fp, #12
16884     A7 FA 61 FC | 	wrlong	result1, fp
16888     34 00 00 FF 
1688c     D8 E4 05 F1 | 	add	objptr, ##26840
16890     08 4E 85 F1 | 	sub	fp, #8
16894     19 14 62 FD | 	getqy	arg02
16898     0A 15 82 F6 | 	negc	arg02, arg02
1689c     02 14 66 F0 | 	shl	arg02, #2
168a0     F2 14 02 F1 | 	add	arg02, objptr
168a4     0A 15 02 FB | 	rdlong	arg02, arg02
168a8     A7 14 62 FC | 	wrlong	arg02, fp
168ac     08 4E 05 F1 | 	add	fp, #8
168b0     A7 14 02 FB | 	rdlong	arg02, fp
168b4     0A 15 52 F6 | 	abs	arg02, arg02 wc
168b8     0C 14 16 FD | 	qdiv	arg02, #12
168bc     0C 4E 85 F1 | 	sub	fp, #12
168c0     34 00 00 FF 
168c4     D8 E4 85 F1 | 	sub	objptr, ##26840
168c8     18 14 62 FD | 	getqx	arg02
168cc     0A 13 82 F6 | 	negc	arg01, arg02
168d0     09 13 52 F6 | 	abs	arg01, arg01 wc
168d4     1F 1E C6 C9 |  if_b	decod	local01, #31
168d8     00 1E 06 36 |  if_ae	mov	local01, #0
168dc     E4 92 B0 FD | 	call	#__system___float_fromuns
168e0     0F FB 61 F5 | 	xor	result1, local01
168e4     08 4E 05 F1 | 	add	fp, #8
168e8     A7 FA 61 FC | 	wrlong	result1, fp
168ec     FD 14 02 F6 | 	mov	arg02, result1
168f0     08 4E 85 F1 | 	sub	fp, #8
168f4     1E 12 C6 F9 | 	decod	arg01, #30
168f8     B0 A5 B0 FD | 	call	#__system____builtin_powf
168fc     FD 12 02 F6 | 	mov	arg01, result1
16900     04 4E 05 F1 | 	add	fp, #4
16904     A7 14 02 FB | 	rdlong	arg02, fp
16908     04 4E 85 F1 | 	sub	fp, #4
1690c     B8 96 B0 FD | 	call	#__system___float_mul
16910     A7 FA 61 FC | 	wrlong	result1, fp
16914     10 4E 05 F1 | 	add	fp, #16
16918     A7 FA 61 FC | 	wrlong	result1, fp
1691c     08 4E 05 F1 | 	add	fp, #8
16920     A7 3C 68 FC | 	wrlong	#30, fp
16924     08 4E 85 F1 | 	sub	fp, #8
16928     A7 12 02 F6 | 	mov	arg01, fp
1692c     10 4E 85 F1 | 	sub	fp, #16
16930     10 39 BF FD | 	call	#_push
16934     A7 F0 03 F6 | 	mov	ptra, fp
16938     B2 00 A0 FD | 	call	#popregs_
1693c                 | _do_getnotevalue_ret
1693c     2D 00 64 FD | 	ret
16940                 | 
16940                 | ' 
16940                 | ' 
16940                 | ' sub do_waitms
16940                 | _do_waitms
16940     01 4A 05 F6 | 	mov	COUNT_, #1
16944     A8 00 A0 FD | 	call	#pushregs_
16948     18 F0 07 F1 | 	add	ptra, #24
1694c     5C 38 BF FD | 	call	#_pop
16950     A7 FA 61 FC | 	wrlong	result1, fp
16954     04 4E 05 F1 | 	add	fp, #4
16958     A7 FC 61 FC | 	wrlong	result2, fp
1695c     04 4E 05 F1 | 	add	fp, #4
16960     A7 FE 61 FC | 	wrlong	result3, fp
16964                 | ' 
16964                 | ' t1=pop() 'value
16964                 | ' 
16964                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
16964     08 4E 85 F1 | 	sub	fp, #8
16968     1C FE 0D F2 | 	cmp	result3, #28 wz
1696c     08 4E 05 51 |  if_ne	add	fp, #8
16970     A7 12 02 5B |  if_ne	rdlong	arg01, fp
16974     08 4E 85 51 |  if_ne	sub	fp, #8
16978     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1697c     A7 12 02 AB |  if_e	rdlong	arg01, fp
16980     0C 4E 05 A1 |  if_e	add	fp, #12
16984     A7 12 62 AC |  if_e	wrlong	arg01, fp
16988     0C 4E 85 A1 |  if_e	sub	fp, #12
1698c     14 00 90 AD |  if_e	jmp	#LR__1800
16990     A7 12 02 F6 | 	mov	arg01, fp
16994     6C C4 BF FD | 	call	#_converttoint
16998     0C 4E 05 F1 | 	add	fp, #12
1699c     A7 FA 61 FC | 	wrlong	result1, fp
169a0     0C 4E 85 F1 | 	sub	fp, #12
169a4                 | LR__1800
169a4                 | ' if t<0 then return
169a4     0C 4E 05 F1 | 	add	fp, #12
169a8     A7 12 02 FB | 	rdlong	arg01, fp
169ac     0C 4E 85 F1 | 	sub	fp, #12
169b0     00 12 56 F2 | 	cmps	arg01, #0 wc
169b4     B8 00 90 CD |  if_b	jmp	#LR__1805
169b8                 | ' if t < 5000 then 
169b8     0C 4E 05 F1 | 	add	fp, #12
169bc     A7 12 02 FB | 	rdlong	arg01, fp
169c0     0C 4E 85 F1 | 	sub	fp, #12
169c4     09 00 00 FF 
169c8     88 13 56 F2 | 	cmps	arg01, ##5000 wc
169cc     14 00 90 3D |  if_ae	jmp	#LR__1801
169d0     0C 4E 05 F1 | 	add	fp, #12
169d4     A7 12 02 FB | 	rdlong	arg01, fp
169d8     0C 4E 85 F1 | 	sub	fp, #12
169dc     60 6D B0 FD | 	call	#__system___waitms
169e0     8C 00 90 FD | 	jmp	#LR__1804
169e4                 | LR__1801
169e4     10 4E 05 F1 | 	add	fp, #16
169e8     A7 02 68 FC | 	wrlong	#1, fp
169ec     04 4E 85 F1 | 	sub	fp, #4
169f0     A7 12 02 FB | 	rdlong	arg01, fp
169f4     09 13 52 F6 | 	abs	arg01, arg01 wc
169f8     09 00 00 FF 
169fc     88 13 16 FD | 	qdiv	arg01, ##5000
16a00                 | '   for i=1 to t/5000
16a00     0C 4E 85 F1 | 	sub	fp, #12
16a04     18 1E 62 FD | 	getqx	local01
16a08     0F 1F 82 F6 | 	negc	local01, local01
16a0c     01 1E 06 F1 | 	add	local01, #1
16a10                 | LR__1802
16a10     10 4E 05 F1 | 	add	fp, #16
16a14     A7 12 02 FB | 	rdlong	arg01, fp
16a18     10 4E 85 F1 | 	sub	fp, #16
16a1c     0F 13 52 F2 | 	cmps	arg01, local01 wc
16a20     28 00 90 3D |  if_ae	jmp	#LR__1803
16a24     0C 4E 05 F1 | 	add	fp, #12
16a28     A7 12 02 FB | 	rdlong	arg01, fp
16a2c     0C 4E 85 F1 | 	sub	fp, #12
16a30     0C 6D B0 FD | 	call	#__system___waitms
16a34     10 4E 05 F1 | 	add	fp, #16
16a38     A7 12 02 FB | 	rdlong	arg01, fp
16a3c     01 12 06 F1 | 	add	arg01, #1
16a40     A7 12 62 FC | 	wrlong	arg01, fp
16a44     10 4E 85 F1 | 	sub	fp, #16
16a48     C4 FF 9F FD | 	jmp	#LR__1802
16a4c                 | LR__1803
16a4c     0C 4E 05 F1 | 	add	fp, #12
16a50     A7 1E 02 FB | 	rdlong	local01, fp
16a54     0F 1F 52 F6 | 	abs	local01, local01 wc
16a58     09 00 00 FF 
16a5c     88 1F 16 FD | 	qdiv	local01, ##5000
16a60     0C 4E 85 F1 | 	sub	fp, #12
16a64     19 1E 62 FD | 	getqy	local01
16a68     0F 13 82 F6 | 	negc	arg01, local01
16a6c     D0 6C B0 FD | 	call	#__system___waitms
16a70                 | LR__1804
16a70                 | LR__1805
16a70     A7 F0 03 F6 | 	mov	ptra, fp
16a74     B2 00 A0 FD | 	call	#popregs_
16a78                 | _do_waitms_ret
16a78     2D 00 64 FD | 	ret
16a7c                 | 
16a7c                 | ' 
16a7c                 | ' sub do_waitvbl
16a7c                 | _do_waitvbl
16a7c     01 12 06 F6 | 	mov	arg01, #1
16a80     EC 52 B0 FD | 	call	#_hg010b_spin2_waitvbl
16a84                 | _do_waitvbl_ret
16a84     2D 00 64 FD | 	ret
16a88                 | 
16a88                 | ' 
16a88                 | ' sub do_waitclock
16a88                 | _do_waitclock
16a88     7B 00 00 FF 
16a8c     64 E4 05 F1 | 	add	objptr, ##63076
16a90     F2 00 02 FB | 	rdlong	_var01, objptr
16a94                 | ' c=hkcnt
16a94                 | ' do: loop until hkcnt<>c
16a94                 | LR__1810
16a94     F2 02 02 FB | 	rdlong	_var02, objptr
16a98     00 03 0A F2 | 	cmp	_var02, _var01 wz
16a9c     F4 FF 9F AD |  if_e	jmp	#LR__1810
16aa0     7B 00 00 FF 
16aa4     64 E4 85 F1 | 	sub	objptr, ##63076
16aa8                 | _do_waitclock_ret
16aa8     2D 00 64 FD | 	ret
16aac                 | 
16aac                 | ' 
16aac                 | ' sub do_dir
16aac                 | _do_dir
16aac     05 4A 05 F6 | 	mov	COUNT_, #5
16ab0     A8 00 A0 FD | 	call	#pushregs_
16ab4     68 01 00 FF 
16ab8     DD 12 06 F6 | 	mov	arg01, ##@LR__4998
16abc     18 70 B0 FD | 	call	#__system___chdir
16ac0                 | ' chdir("/sd/bas")       ' set working directory
16ac0                 | ' print "Working directory: "; currentdir$ 
16ac0     00 12 06 F6 | 	mov	arg01, #0
16ac4     14 C3 B0 FD | 	call	#__system___getiolock_0473
16ac8     FD 12 02 F6 | 	mov	arg01, result1
16acc     7C 69 B0 FD | 	call	#__system___lockmem
16ad0     68 01 00 FF 
16ad4     E5 14 06 F6 | 	mov	arg02, ##@LR__4999
16ad8     00 12 06 F6 | 	mov	arg01, #0
16adc     00 16 06 F6 | 	mov	arg03, #0
16ae0     6C 76 B0 FD | 	call	#__system___basic_print_string
16ae4     72 00 00 FF 
16ae8     84 E4 05 F1 | 	add	objptr, ##58500
16aec     F2 14 02 FB | 	rdlong	arg02, objptr
16af0     72 00 00 FF 
16af4     84 E4 85 F1 | 	sub	objptr, ##58500
16af8     00 12 06 F6 | 	mov	arg01, #0
16afc     00 16 06 F6 | 	mov	arg03, #0
16b00     4C 76 B0 FD | 	call	#__system___basic_print_string
16b04     00 12 06 F6 | 	mov	arg01, #0
16b08     0A 14 06 F6 | 	mov	arg02, #10
16b0c     00 16 06 F6 | 	mov	arg03, #0
16b10     E4 75 B0 FD | 	call	#__system___basic_print_char
16b14     00 12 06 F6 | 	mov	arg01, #0
16b18     C0 C2 B0 FD | 	call	#__system___getiolock_0473
16b1c     FD 00 68 FC | 	wrlong	#0, result1
16b20     00 1E 06 F6 | 	mov	local01, #0
16b24     68 01 00 FF 
16b28     F9 12 06 F6 | 	mov	arg01, ##@LR__5000
16b2c     10 14 06 F6 | 	mov	arg02, #16
16b30     E0 C3 B0 FD | 	call	#__system___basic_dir
16b34     FD 20 02 F6 | 	mov	local02, result1
16b38                 | ' px=0:
16b38                 | ' filename=dir$("*", fbDirectory)
16b38                 | ' while filename <> "" and filename <> nil
16b38                 | LR__1820
16b38     00 22 06 F6 | 	mov	local03, #0
16b3c     68 01 00 FF 
16b40     FB 14 06 F6 | 	mov	arg02, ##@LR__5001
16b44     10 13 02 F6 | 	mov	arg01, local02
16b48     28 69 B0 FD | 	call	#__system___string_cmp
16b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
16b50     00 22 26 56 |  if_ne	not	local03, #0
16b54     00 24 06 F6 | 	mov	local04, #0
16b58     10 13 02 F6 | 	mov	arg01, local02
16b5c     00 14 06 F6 | 	mov	arg02, #0
16b60     10 69 B0 FD | 	call	#__system___string_cmp
16b64     00 FA 0D F2 | 	cmp	result1, #0 wz
16b68     00 24 26 56 |  if_ne	not	local04, #0
16b6c     12 23 CA F7 | 	test	local03, local04 wz
16b70     9C 00 90 AD |  if_e	jmp	#LR__1822
16b74                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
16b74     00 12 06 F6 | 	mov	arg01, #0
16b78     60 C2 B0 FD | 	call	#__system___getiolock_0473
16b7c     FD 12 02 F6 | 	mov	arg01, result1
16b80     C8 68 B0 FD | 	call	#__system___lockmem
16b84     68 01 00 FF 
16b88     FC 14 06 F6 | 	mov	arg02, ##@LR__5002
16b8c     00 12 06 F6 | 	mov	arg01, #0
16b90     00 16 06 F6 | 	mov	arg03, #0
16b94     B8 75 B0 FD | 	call	#__system___basic_print_string
16b98     00 26 06 F6 | 	mov	local05, #0
16b9c     00 12 06 F6 | 	mov	arg01, #0
16ba0     10 15 02 F6 | 	mov	arg02, local02
16ba4     00 16 06 F6 | 	mov	arg03, #0
16ba8     A4 75 B0 FD | 	call	#__system___basic_print_string
16bac     00 12 06 F6 | 	mov	arg01, #0
16bb0     28 C2 B0 FD | 	call	#__system___getiolock_0473
16bb4     FD 00 68 FC | 	wrlong	#0, result1
16bb8     40 1E 06 F1 | 	add	local01, #64
16bbc     0F 13 02 F6 | 	mov	arg01, local01
16bc0     48 51 B0 FD | 	call	#_hg010b_spin2_setcursorx
16bc4     00 1F 56 F2 | 	cmps	local01, #256 wc
16bc8     30 00 90 CD |  if_b	jmp	#LR__1821
16bcc     00 1E 06 F6 | 	mov	local01, #0
16bd0     00 12 06 F6 | 	mov	arg01, #0
16bd4     04 C2 B0 FD | 	call	#__system___getiolock_0473
16bd8     FD 12 02 F6 | 	mov	arg01, result1
16bdc     6C 68 B0 FD | 	call	#__system___lockmem
16be0     00 12 06 F6 | 	mov	arg01, #0
16be4     0A 14 06 F6 | 	mov	arg02, #10
16be8     00 16 06 F6 | 	mov	arg03, #0
16bec     08 75 B0 FD | 	call	#__system___basic_print_char
16bf0     00 12 06 F6 | 	mov	arg01, #0
16bf4     E4 C1 B0 FD | 	call	#__system___getiolock_0473
16bf8     FD 00 68 FC | 	wrlong	#0, result1
16bfc                 | LR__1821
16bfc     00 12 06 F6 | 	mov	arg01, #0
16c00     00 14 06 F6 | 	mov	arg02, #0
16c04     0C C3 B0 FD | 	call	#__system___basic_dir
16c08     FD 20 02 F6 | 	mov	local02, result1
16c0c     28 FF 9F FD | 	jmp	#LR__1820
16c10                 | LR__1822
16c10                 | ' print
16c10     00 12 06 F6 | 	mov	arg01, #0
16c14     C4 C1 B0 FD | 	call	#__system___getiolock_0473
16c18     FD 12 02 F6 | 	mov	arg01, result1
16c1c     2C 68 B0 FD | 	call	#__system___lockmem
16c20     00 12 06 F6 | 	mov	arg01, #0
16c24     0A 14 06 F6 | 	mov	arg02, #10
16c28     00 16 06 F6 | 	mov	arg03, #0
16c2c     C8 74 B0 FD | 	call	#__system___basic_print_char
16c30     00 12 06 F6 | 	mov	arg01, #0
16c34     A4 C1 B0 FD | 	call	#__system___getiolock_0473
16c38     FD 00 68 FC | 	wrlong	#0, result1
16c3c     00 1E 06 F6 | 	mov	local01, #0
16c40                 | ' return cursor_y
16c40     68 01 00 FF 
16c44     03 13 06 F6 | 	mov	arg01, ##@LR__5003
16c48     21 14 06 F6 | 	mov	arg02, #33
16c4c     C4 C2 B0 FD | 	call	#__system___basic_dir
16c50     FD 20 02 F6 | 	mov	local02, result1
16c54                 | ' px=0: py=v.getcursory()
16c54                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
16c54                 | ' do while filename <> "" and filename <> nil
16c54                 | LR__1823
16c54     00 22 06 F6 | 	mov	local03, #0
16c58     68 01 00 FF 
16c5c     05 15 06 F6 | 	mov	arg02, ##@LR__5004
16c60     10 13 02 F6 | 	mov	arg01, local02
16c64     0C 68 B0 FD | 	call	#__system___string_cmp
16c68     00 FA 0D F2 | 	cmp	result1, #0 wz
16c6c     00 22 26 56 |  if_ne	not	local03, #0
16c70     00 24 06 F6 | 	mov	local04, #0
16c74     10 13 02 F6 | 	mov	arg01, local02
16c78     00 14 06 F6 | 	mov	arg02, #0
16c7c     F4 67 B0 FD | 	call	#__system___string_cmp
16c80     00 FA 0D F2 | 	cmp	result1, #0 wz
16c84     00 24 26 56 |  if_ne	not	local04, #0
16c88     12 23 CA F7 | 	test	local03, local04 wz
16c8c     80 01 90 AD |  if_e	jmp	#LR__1828
16c90                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
16c90     00 12 06 F6 | 	mov	arg01, #0
16c94     44 C1 B0 FD | 	call	#__system___getiolock_0473
16c98     FD 12 02 F6 | 	mov	arg01, result1
16c9c     AC 67 B0 FD | 	call	#__system___lockmem
16ca0     00 12 06 F6 | 	mov	arg01, #0
16ca4     10 15 02 F6 | 	mov	arg02, local02
16ca8     00 16 06 F6 | 	mov	arg03, #0
16cac     A0 74 B0 FD | 	call	#__system___basic_print_string
16cb0     00 12 06 F6 | 	mov	arg01, #0
16cb4     24 C1 B0 FD | 	call	#__system___getiolock_0473
16cb8     FD 00 68 FC | 	wrlong	#0, result1
16cbc     40 1E 06 F1 | 	add	local01, #64
16cc0     0F 13 02 F6 | 	mov	arg01, local01
16cc4     44 50 B0 FD | 	call	#_hg010b_spin2_setcursorx
16cc8     00 1F 56 F2 | 	cmps	local01, #256 wc
16ccc     30 00 90 CD |  if_b	jmp	#LR__1824
16cd0     00 1E 06 F6 | 	mov	local01, #0
16cd4     00 12 06 F6 | 	mov	arg01, #0
16cd8     00 C1 B0 FD | 	call	#__system___getiolock_0473
16cdc     FD 12 02 F6 | 	mov	arg01, result1
16ce0     68 67 B0 FD | 	call	#__system___lockmem
16ce4     00 12 06 F6 | 	mov	arg01, #0
16ce8     0A 14 06 F6 | 	mov	arg02, #10
16cec     00 16 06 F6 | 	mov	arg03, #0
16cf0     04 74 B0 FD | 	call	#__system___basic_print_char
16cf4     00 12 06 F6 | 	mov	arg01, #0
16cf8     E0 C0 B0 FD | 	call	#__system___getiolock_0473
16cfc     FD 00 68 FC | 	wrlong	#0, result1
16d00                 | LR__1824
16d00     00 12 06 F6 | 	mov	arg01, #0
16d04     00 14 06 F6 | 	mov	arg02, #0
16d08     08 C2 B0 FD | 	call	#__system___basic_dir
16d0c     FD 20 02 F6 | 	mov	local02, result1
16d10                 | '   filename = dir$()      ' continue scan
16d10                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
16d10                 | ' return cursor_y
16d10     3E E4 05 F1 | 	add	objptr, #62
16d14     F2 FA C1 FA | 	rdbyte	result1, objptr
16d18     3E E4 85 F1 | 	sub	objptr, #62
16d1c     22 FA 0D F2 | 	cmp	result1, #34 wz
16d20     30 FF 9F 5D |  if_ne	jmp	#LR__1823
16d24                 | '     print "-----more, press any key";
16d24     00 12 06 F6 | 	mov	arg01, #0
16d28     B0 C0 B0 FD | 	call	#__system___getiolock_0473
16d2c     FD 12 02 F6 | 	mov	arg01, result1
16d30     18 67 B0 FD | 	call	#__system___lockmem
16d34     68 01 00 FF 
16d38     06 15 06 F6 | 	mov	arg02, ##@LR__5005
16d3c     00 12 06 F6 | 	mov	arg01, #0
16d40     00 16 06 F6 | 	mov	arg03, #0
16d44     08 74 B0 FD | 	call	#__system___basic_print_string
16d48     00 12 06 F6 | 	mov	arg01, #0
16d4c     8C C0 B0 FD | 	call	#__system___getiolock_0473
16d50     FD 00 68 FC | 	wrlong	#0, result1
16d54                 | '     do 
16d54                 | LR__1825
16d54     1C 5F B0 FD | 	call	#_usbnew_spin2_get_key
16d58     00 FA 0D F2 | 	cmp	result1, #0 wz
16d5c     F4 FF 9F 5D |  if_ne	jmp	#LR__1825
16d60                 | '     do
16d60                 | LR__1826
16d60     10 5F B0 FD | 	call	#_usbnew_spin2_get_key
16d64     00 FA 0D F2 | 	cmp	result1, #0 wz
16d68     F4 FF 9F AD |  if_e	jmp	#LR__1826
16d6c                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
16d6c     79 00 00 FF 
16d70     D0 E5 05 F1 | 	add	objptr, ##62416
16d74     F2 22 02 FB | 	rdlong	local03, objptr
16d78     79 00 00 FF 
16d7c     D0 E5 85 F1 | 	sub	objptr, ##62416
16d80     01 22 0E F2 | 	cmp	local03, #1 wz
16d84     3C 00 90 5D |  if_ne	jmp	#LR__1827
16d88     7B 00 00 FF 
16d8c     74 E4 05 F1 | 	add	objptr, ##63092
16d90     F2 14 02 FB | 	rdlong	arg02, objptr
16d94     04 E4 85 F1 | 	sub	objptr, #4
16d98     F2 1A 02 FB | 	rdlong	arg05, objptr
16d9c     07 12 06 F6 | 	mov	arg01, #7
16da0     56 00 00 FF 
16da4     44 16 06 F6 | 	mov	arg03, ##44100
16da8     0C 18 C6 F9 | 	decod	arg04, #12
16dac     01 1C 66 F6 | 	neg	arg06, #1
16db0     6F 00 00 FF 
16db4     A4 E5 85 F1 | 	sub	objptr, ##57252
16db8     40 62 B0 FD | 	call	#_audio096_spin2_play
16dbc     0B 00 00 FF 
16dc0     CC E4 85 F1 | 	sub	objptr, ##5836
16dc4                 | LR__1827
16dc4     00 12 06 F6 | 	mov	arg01, #0
16dc8     23 14 06 F6 | 	mov	arg02, #35
16dcc     00 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
16dd0                 | '     position 0,35: print "                             ";: position 4,35  
16dd0     00 12 06 F6 | 	mov	arg01, #0
16dd4     04 C0 B0 FD | 	call	#__system___getiolock_0473
16dd8     FD 12 02 F6 | 	mov	arg01, result1
16ddc     6C 66 B0 FD | 	call	#__system___lockmem
16de0     68 01 00 FF 
16de4     1F 15 06 F6 | 	mov	arg02, ##@LR__5006
16de8     00 12 06 F6 | 	mov	arg01, #0
16dec     00 16 06 F6 | 	mov	arg03, #0
16df0     5C 73 B0 FD | 	call	#__system___basic_print_string
16df4     00 12 06 F6 | 	mov	arg01, #0
16df8     E0 BF B0 FD | 	call	#__system___getiolock_0473
16dfc     FD 00 68 FC | 	wrlong	#0, result1
16e00     04 12 06 F6 | 	mov	arg01, #4
16e04     23 14 06 F6 | 	mov	arg02, #35
16e08     C4 4E B0 FD | 	call	#_hg010b_spin2_setcursorpos
16e0c     44 FE 9F FD | 	jmp	#LR__1823
16e10                 | LR__1828
16e10     A7 F0 03 F6 | 	mov	ptra, fp
16e14     B2 00 A0 FD | 	call	#popregs_
16e18                 | _do_dir_ret
16e18     2D 00 64 FD | 	ret
16e1c                 | 
16e1c                 | ' 
16e1c                 | ' sub do_if
16e1c                 | _do_if
16e1c     05 4A 05 F6 | 	mov	COUNT_, #5
16e20     A8 00 A0 FD | 	call	#pushregs_
16e24     84 33 BF FD | 	call	#_pop
16e28     FD 1E 0A F6 | 	mov	local01, result1 wz
16e2c     FE 20 02 F6 | 	mov	local02, result2
16e30     FF 22 02 F6 | 	mov	local03, result3
16e34                 | ' t1=pop()
16e34                 | ' ' if uresult=0, jump over else
16e34                 | ' if t1.result.uresult = 0 then 
16e34     BC 00 90 5D |  if_ne	jmp	#LR__1832
16e38                 | '   for i=lineptr_e to lineptr-1
16e38     6A 00 00 FF 
16e3c     70 E4 05 F1 | 	add	objptr, ##54384
16e40     F2 24 02 FB | 	rdlong	local04, objptr
16e44     04 E4 85 F1 | 	sub	objptr, #4
16e48     F2 26 02 FB | 	rdlong	local05, objptr
16e4c     6A 00 00 FF 
16e50     6C E4 85 F1 | 	sub	objptr, ##54380
16e54                 | LR__1830
16e54     13 25 52 F2 | 	cmps	local04, local05 wc
16e58     78 00 90 3D |  if_ae	jmp	#LR__1831
16e5c     12 FF 01 F6 | 	mov	result3, local04
16e60     01 FE 65 F0 | 	shl	result3, #1
16e64     12 FF 01 F1 | 	add	result3, local04
16e68     02 FE 65 F0 | 	shl	result3, #2
16e6c     67 00 00 FF 
16e70     6C E4 05 F1 | 	add	objptr, ##52844
16e74     F2 FE 01 F1 | 	add	result3, objptr
16e78     FF 1E 02 FB | 	rdlong	local01, result3
16e7c     04 FE 05 F1 | 	add	result3, #4
16e80     FF FC 01 FB | 	rdlong	result2, result3
16e84     12 FF 01 F6 | 	mov	result3, local04
16e88     01 FE 65 F0 | 	shl	result3, #1
16e8c     12 FF 01 F1 | 	add	result3, local04
16e90     02 FE 65 F0 | 	shl	result3, #2
16e94     F2 FE 01 F1 | 	add	result3, objptr
16e98     08 FE 05 F1 | 	add	result3, #8
16e9c     FF FE 01 FB | 	rdlong	result3, result3
16ea0     FE 20 02 F6 | 	mov	local02, result2
16ea4     FF 22 02 F6 | 	mov	local03, result3
16ea8                 | '     t1=compiledline(i)
16ea8                 | '     if t1.result_type=token_else then lineptr_e=i : return
16ea8     5A 22 0E F2 | 	cmp	local03, #90 wz
16eac     67 00 00 FF 
16eb0     6C E4 85 F1 | 	sub	objptr, ##52844
16eb4     6A 00 00 AF 
16eb8     70 E4 05 A1 |  if_e	add	objptr, ##54384
16ebc     F2 24 62 AC |  if_e	wrlong	local04, objptr
16ec0     6A 00 00 AF 
16ec4     70 E4 85 A1 |  if_e	sub	objptr, ##54384
16ec8     28 00 90 AD |  if_e	jmp	#LR__1833
16ecc     01 24 06 F1 | 	add	local04, #1
16ed0     80 FF 9F FD | 	jmp	#LR__1830
16ed4                 | LR__1831
16ed4     6A 00 00 FF 
16ed8     6C E4 05 F1 | 	add	objptr, ##54380
16edc     F2 26 02 FB | 	rdlong	local05, objptr
16ee0     01 26 86 F1 | 	sub	local05, #1
16ee4     04 E4 05 F1 | 	add	objptr, #4
16ee8     F2 26 62 FC | 	wrlong	local05, objptr
16eec     6A 00 00 FF 
16ef0     70 E4 85 F1 | 	sub	objptr, ##54384
16ef4                 | LR__1832
16ef4                 | LR__1833
16ef4     A7 F0 03 F6 | 	mov	ptra, fp
16ef8     B2 00 A0 FD | 	call	#popregs_
16efc                 | _do_if_ret
16efc     2D 00 64 FD | 	ret
16f00                 | 
16f00                 | ' 
16f00                 | ' sub do_else
16f00                 | _do_else
16f00     6A 00 00 FF 
16f04     6C E4 05 F1 | 	add	objptr, ##54380
16f08     F2 00 02 FB | 	rdlong	_var01, objptr
16f0c     01 00 86 F1 | 	sub	_var01, #1
16f10     04 E4 05 F1 | 	add	objptr, #4
16f14     F2 00 62 FC | 	wrlong	_var01, objptr
16f18     6A 00 00 FF 
16f1c     70 E4 85 F1 | 	sub	objptr, ##54384
16f20                 | _do_else_ret
16f20     2D 00 64 FD | 	ret
16f24                 | 
16f24                 | ' 
16f24                 | ' sub do_rad
16f24                 | _do_rad
16f24     7B 00 00 FF 
16f28     78 E4 05 F1 | 	add	objptr, ##63096
16f2c     00 C0 9F FF 
16f30     F2 00 68 FC | 	wrlong	##1065353216, objptr
16f34     04 E4 05 F1 | 	add	objptr, #4
16f38     00 C0 9F FF 
16f3c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16f40     7B 00 00 FF 
16f44     7C E4 85 F1 | 	sub	objptr, ##63100
16f48                 | _do_rad_ret
16f48     2D 00 64 FD | 	ret
16f4c                 | 
16f4c                 | ' 
16f4c                 | ' sub do_deg
16f4c                 | _do_deg
16f4c     7B 00 00 FF 
16f50     78 E4 05 F1 | 	add	objptr, ##63096
16f54     7D 47 9E FF 
16f58     F2 6A 68 FC | 	wrlong	##1016003125, objptr
16f5c     04 E4 05 F1 | 	add	objptr, #4
16f60     97 32 A1 FF 
16f64     F2 C2 69 FC | 	wrlong	##1113927393, objptr
16f68     7B 00 00 FF 
16f6c     7C E4 85 F1 | 	sub	objptr, ##63100
16f70                 | _do_deg_ret
16f70     2D 00 64 FD | 	ret
16f74                 | 
16f74                 | ' 
16f74                 | ' sub do_int
16f74                 | _do_int
16f74     00 4A 05 F6 | 	mov	COUNT_, #0
16f78     A8 00 A0 FD | 	call	#pushregs_
16f7c     0C F0 07 F1 | 	add	ptra, #12
16f80     28 32 BF FD | 	call	#_pop
16f84     A7 FA 61 FC | 	wrlong	result1, fp
16f88     04 4E 05 F1 | 	add	fp, #4
16f8c     A7 FC 61 FC | 	wrlong	result2, fp
16f90     04 4E 05 F1 | 	add	fp, #4
16f94     A7 FE 61 FC | 	wrlong	result3, fp
16f98     08 4E 85 F1 | 	sub	fp, #8
16f9c     A7 12 02 F6 | 	mov	arg01, fp
16fa0     60 BE BF FD | 	call	#_converttoint
16fa4     A7 FA 61 FC | 	wrlong	result1, fp
16fa8     08 4E 05 F1 | 	add	fp, #8
16fac     A7 38 68 FC | 	wrlong	#28, fp
16fb0     08 4E 85 F1 | 	sub	fp, #8
16fb4     A7 12 02 F6 | 	mov	arg01, fp
16fb8     88 32 BF FD | 	call	#_push
16fbc     A7 F0 03 F6 | 	mov	ptra, fp
16fc0     B2 00 A0 FD | 	call	#popregs_
16fc4                 | _do_int_ret
16fc4     2D 00 64 FD | 	ret
16fc8                 | 
16fc8                 | ' 
16fc8                 | ' sub do_nothing
16fc8                 | _do_nothing
16fc8                 | _do_nothing_ret
16fc8     2D 00 64 FD | 	ret
16fcc                 | 
16fcc                 | ' 
16fcc                 | ' sub do_brun
16fcc                 | _do_brun
16fcc     08 4A 05 F6 | 	mov	COUNT_, #8
16fd0     A8 00 A0 FD | 	call	#pushregs_
16fd4     D4 31 BF FD | 	call	#_pop
16fd8     FE 1A 02 F6 | 	mov	arg05, result2
16fdc     FF 18 02 F6 | 	mov	arg04, result3
16fe0     FD 1E 02 F6 | 	mov	local01, result1
16fe4     0D 21 02 F6 | 	mov	local02, arg05
16fe8     0C 23 02 F6 | 	mov	local03, arg04
16fec                 | ' 
16fec                 | ' t1=pop() 
16fec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
16fec     2B 22 0E F2 | 	cmp	local03, #43 wz
16ff0     10 00 90 5D |  if_ne	jmp	#LR__1840
16ff4     0F 13 02 F6 | 	mov	arg01, local01
16ff8     58 74 BF FD | 	call	#_convertstring
16ffc     FD 1E 02 F6 | 	mov	local01, result1
17000     1F 22 06 F6 | 	mov	local03, #31
17004                 | LR__1840
17004                 | ' if t1.result_type=result_string then
17004     1F 22 0E F2 | 	cmp	local03, #31 wz
17008     EC 01 90 5D |  if_ne	jmp	#LR__1844
1700c     0F 25 02 F6 | 	mov	local04, local01
17010                 | '   filename=t1.result.sresult
17010                 | '   if left$(filename,1)="/" then 
17010     12 13 02 F6 | 	mov	arg01, local04
17014     01 14 06 F6 | 	mov	arg02, #1
17018     74 84 B0 FD | 	call	#__system__Left_S
1701c     FD 12 02 F6 | 	mov	arg01, result1
17020     68 01 00 FF 
17024     3D 15 06 F6 | 	mov	arg02, ##@LR__5007
17028     48 64 B0 FD | 	call	#__system___string_cmp
1702c     00 FA 0D F2 | 	cmp	result1, #0 wz
17030     12 27 02 A6 |  if_e	mov	local05, local04
17034     14 00 90 AD |  if_e	jmp	#LR__1841
17038     68 01 00 FF 
1703c     3F 13 06 F6 | 	mov	arg01, ##@LR__5008
17040     12 15 02 F6 | 	mov	arg02, local04
17044     60 64 B0 FD | 	call	#__system___string_concat
17048     FD 26 02 F6 | 	mov	local05, result1
1704c                 | LR__1841
1704c                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1704c                 | '   open fullfilename for input as #9
1704c     09 12 06 F6 | 	mov	arg01, #9
17050     13 15 02 F6 | 	mov	arg02, local05
17054     00 16 06 F6 | 	mov	arg03, #0
17058     F0 6F B0 FD | 	call	#__system___basic_open_string
1705c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
17060     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
17064     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
17068     FD 28 0A F6 | 	mov	local06, result1 wz
1706c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1706c     8C 00 90 AD |  if_e	jmp	#LR__1842
17070     00 12 06 F6 | 	mov	arg01, #0
17074     64 BD B0 FD | 	call	#__system___getiolock_0473
17078     FD 12 02 F6 | 	mov	arg01, result1
1707c     CC 63 B0 FD | 	call	#__system___lockmem
17080     68 01 00 FF 
17084     48 15 06 F6 | 	mov	arg02, ##@LR__5009
17088     00 12 06 F6 | 	mov	arg01, #0
1708c     00 16 06 F6 | 	mov	arg03, #0
17090     BC 70 B0 FD | 	call	#__system___basic_print_string
17094     00 12 06 F6 | 	mov	arg01, #0
17098     14 15 02 F6 | 	mov	arg02, local06
1709c     00 16 06 F6 | 	mov	arg03, #0
170a0     0A 18 06 F6 | 	mov	arg04, #10
170a4     EC 70 B0 FD | 	call	#__system___basic_print_integer
170a8     68 01 00 FF 
170ac     56 15 06 F6 | 	mov	arg02, ##@LR__5010
170b0     00 12 06 F6 | 	mov	arg01, #0
170b4     00 16 06 F6 | 	mov	arg03, #0
170b8     94 70 B0 FD | 	call	#__system___basic_print_string
170bc     14 13 02 F6 | 	mov	arg01, local06
170c0     18 8A B0 FD | 	call	#__system___strerror
170c4     FD 14 02 F6 | 	mov	arg02, result1
170c8     00 12 06 F6 | 	mov	arg01, #0
170cc     00 16 06 F6 | 	mov	arg03, #0
170d0     7C 70 B0 FD | 	call	#__system___basic_print_string
170d4     00 12 06 F6 | 	mov	arg01, #0
170d8     0A 14 06 F6 | 	mov	arg02, #10
170dc     00 16 06 F6 | 	mov	arg03, #0
170e0     14 70 B0 FD | 	call	#__system___basic_print_char
170e4     00 12 06 F6 | 	mov	arg01, #0
170e8     F0 BC B0 FD | 	call	#__system___getiolock_0473
170ec     FD 00 68 FC | 	wrlong	#0, result1
170f0     09 12 06 F6 | 	mov	arg01, #9
170f4     18 B3 B0 FD | 	call	#__system__close
170f8     FC 00 90 FD | 	jmp	#LR__1845
170fc                 | LR__1842
170fc     01 2A 06 F6 | 	mov	local07, #1
17100     00 2C 06 F6 | 	mov	local08, #0
17104                 | '   do
17104                 | LR__1843
17104                 | '     get #9,pos,block(0),1024,r : pos+=r	
17104     77 00 00 FF 
17108     9C E5 05 F1 | 	add	objptr, ##61340
1710c     F2 16 02 F6 | 	mov	arg03, objptr
17110     77 00 00 FF 
17114     9C E5 85 F1 | 	sub	objptr, ##61340
17118     09 12 06 F6 | 	mov	arg01, #9
1711c     15 15 02 F6 | 	mov	arg02, local07
17120     0A 18 C6 F9 | 	decod	arg04, #10
17124     01 1A 06 F6 | 	mov	arg05, #1
17128     34 71 B0 FD | 	call	#__system___basic_get
1712c     FD 28 02 F6 | 	mov	local06, result1
17130     FD 2A 02 F1 | 	add	local07, result1
17134     77 00 00 FF 
17138     9C E5 05 F1 | 	add	objptr, ##61340
1713c     F2 12 02 F6 | 	mov	arg01, objptr
17140     16 15 02 F6 | 	mov	arg02, local08
17144     0A 16 C6 F9 | 	decod	arg03, #10
17148     6C 00 00 FF 
1714c     D0 E4 85 F1 | 	sub	objptr, ##55504
17150     90 57 B0 FD | 	call	#_psram_spin2_write
17154     0B 00 00 FF 
17158     CC E4 85 F1 | 	sub	objptr, ##5836
1715c     14 2D 02 F1 | 	add	local08, local06
17160     02 00 00 FF 
17164     00 28 0E F2 | 	cmp	local06, ##1024 wz
17168     E0 03 00 AF 
1716c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
17170     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1843
17174     56 00 00 FF 
17178     EC E5 05 F1 | 	add	objptr, ##44524
1717c     F2 12 02 FB | 	rdlong	arg01, objptr
17180     03 12 62 FD | 	cogstop	arg01
17184     04 E4 05 F1 | 	add	objptr, #4
17188     F2 12 02 FB | 	rdlong	arg01, objptr
1718c     03 12 62 FD | 	cogstop	arg01
17190     04 E4 05 F1 | 	add	objptr, #4
17194     F2 12 02 FB | 	rdlong	arg01, objptr
17198     03 12 62 FD | 	cogstop	arg01
1719c     22 00 00 FF 
171a0     E0 E5 05 F1 | 	add	objptr, ##17888
171a4     F2 12 02 FB | 	rdlong	arg01, objptr
171a8     03 12 62 FD | 	cogstop	arg01
171ac     18 00 00 FF 
171b0     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
171b4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
171b8     18 00 00 FF 
171bc     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
171c0     22 00 00 FF 
171c4     D8 E5 85 F1 | 	sub	objptr, ##17880
171c8     1E 2C 06 F6 | 	mov	local08, #30
171cc     28 E4 61 FD | 	setq	objptr
171d0     0A 2D F2 FC | 	coginit	local08, arg02 wc
171d4     01 2C 66 C6 |  if_b	neg	local08, #1
171d8     24 00 00 FF 
171dc     1C E5 05 F1 | 	add	objptr, ##18716
171e0     F2 2C 62 FC | 	wrlong	local08, objptr
171e4     7B 00 00 FF 
171e8     18 E5 85 F1 | 	sub	objptr, ##63256
171ec     00 12 06 F6 | 	mov	arg01, #0
171f0     01 12 62 FD | 	cogid	arg01
171f4     03 12 62 FD | 	cogstop	arg01
171f8                 | LR__1844
171f8                 | LR__1845
171f8     A7 F0 03 F6 | 	mov	ptra, fp
171fc     B2 00 A0 FD | 	call	#popregs_
17200                 | _do_brun_ret
17200     2D 00 64 FD | 	ret
17204                 | 
17204                 | ' 
17204                 | ' 
17204                 | ' sub do_mouse
17204                 | _do_mouse
17204     A4 2F BF FD | 	call	#_pop
17208     00 FA 4D F2 | 	cmps	result1, #0 wz
1720c                 | ' t1=pop()
1720c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1720c     14 00 90 5D |  if_ne	jmp	#LR__1850
17210     10 12 06 F6 | 	mov	arg01, #16
17214     00 14 06 F6 | 	mov	arg02, #0
17218     00 16 06 F6 | 	mov	arg03, #0
1721c     A0 3E B0 FD | 	call	#_hg010b_spin2_setspritesize
17220     10 00 90 FD | 	jmp	#LR__1851
17224                 | LR__1850
17224     10 12 06 F6 | 	mov	arg01, #16
17228     20 14 06 F6 | 	mov	arg02, #32
1722c     20 16 06 F6 | 	mov	arg03, #32
17230     8C 3E B0 FD | 	call	#_hg010b_spin2_setspritesize
17234                 | LR__1851
17234                 | _do_mouse_ret
17234     2D 00 64 FD | 	ret
17238                 | 
17238                 | ' 
17238                 | ' sub do_cursor
17238                 | _do_cursor
17238     70 2F BF FD | 	call	#_pop
1723c     00 FA 4D F2 | 	cmps	result1, #0 wz
17240                 | ' t1=pop()
17240                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
17240     14 00 90 5D |  if_ne	jmp	#LR__1860
17244     11 12 06 F6 | 	mov	arg01, #17
17248     00 14 06 F6 | 	mov	arg02, #0
1724c     00 16 06 F6 | 	mov	arg03, #0
17250     6C 3E B0 FD | 	call	#_hg010b_spin2_setspritesize
17254     10 00 90 FD | 	jmp	#LR__1861
17258                 | LR__1860
17258     11 12 06 F6 | 	mov	arg01, #17
1725c     08 14 06 F6 | 	mov	arg02, #8
17260     10 16 06 F6 | 	mov	arg03, #16
17264     58 3E B0 FD | 	call	#_hg010b_spin2_setspritesize
17268                 | LR__1861
17268                 | _do_cursor_ret
17268     2D 00 64 FD | 	ret
1726c                 | 
1726c                 | ' 
1726c                 | ' 
1726c                 | ' sub do_click
1726c                 | _do_click
1726c     3C 2F BF FD | 	call	#_pop
17270     00 FA 4D F2 | 	cmps	result1, #0 wz
17274                 | ' t1=pop()
17274                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
17274     79 00 00 AF 
17278     D0 E5 05 A1 |  if_e	add	objptr, ##62416
1727c     F2 00 68 AC |  if_e	wrlong	#0, objptr
17280     79 00 00 FF 
17284     D0 E5 C5 F3 | 	sumz	objptr, ##62416
17288     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1728c     79 00 00 5F 
17290     D0 E5 85 51 |  if_ne	sub	objptr, ##62416
17294                 | _do_click_ret
17294     2D 00 64 FD | 	ret
17298                 | 
17298                 | ' 
17298                 | ' 
17298                 | ' sub do_beep
17298                 | _do_beep
17298     02 4A 05 F6 | 	mov	COUNT_, #2
1729c     A8 00 A0 FD | 	call	#pushregs_
172a0     20 F0 07 F1 | 	add	ptra, #32
172a4     04 2F BF FD | 	call	#_pop
172a8     FD 1E 02 F6 | 	mov	local01, result1
172ac     FE 1C 02 F6 | 	mov	arg06, result2
172b0     FF 20 02 F6 | 	mov	local02, result3
172b4     0C 4E 05 F1 | 	add	fp, #12
172b8     A7 1E 62 FC | 	wrlong	local01, fp
172bc     04 4E 05 F1 | 	add	fp, #4
172c0     A7 1C 62 FC | 	wrlong	arg06, fp
172c4     04 4E 05 F1 | 	add	fp, #4
172c8     A7 20 62 FC | 	wrlong	local02, fp
172cc     14 4E 85 F1 | 	sub	fp, #20
172d0     D8 2E BF FD | 	call	#_pop
172d4     A7 FA 61 FC | 	wrlong	result1, fp
172d8     04 4E 05 F1 | 	add	fp, #4
172dc     A7 FC 61 FC | 	wrlong	result2, fp
172e0     04 4E 05 F1 | 	add	fp, #4
172e4     A7 FE 61 FC | 	wrlong	result3, fp
172e8                 | ' 
172e8                 | ' t2=pop()
172e8                 | ' t1=pop()
172e8                 | ' 
172e8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
172e8     08 4E 85 F1 | 	sub	fp, #8
172ec     1C FE 0D F2 | 	cmp	result3, #28 wz
172f0     08 4E 05 51 |  if_ne	add	fp, #8
172f4     A7 20 02 5B |  if_ne	rdlong	local02, fp
172f8     08 4E 85 51 |  if_ne	sub	fp, #8
172fc     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
17300     A7 1E 02 AB |  if_e	rdlong	local01, fp
17304     18 4E 05 A1 |  if_e	add	fp, #24
17308     A7 1E 62 AC |  if_e	wrlong	local01, fp
1730c     18 4E 85 A1 |  if_e	sub	fp, #24
17310     14 00 90 AD |  if_e	jmp	#LR__1870
17314     A7 12 02 F6 | 	mov	arg01, fp
17318     E8 BA BF FD | 	call	#_converttoint
1731c     18 4E 05 F1 | 	add	fp, #24
17320     A7 FA 61 FC | 	wrlong	result1, fp
17324     18 4E 85 F1 | 	sub	fp, #24
17328                 | LR__1870
17328     1C 4E 05 F1 | 	add	fp, #28
1732c     A7 FE 48 FC | 	wrbyte	#127, fp
17330     01 4E 05 F1 | 	add	fp, #1
17334     A7 00 49 FC | 	wrbyte	#128, fp
17338     01 4E 85 F1 | 	sub	fp, #1
1733c     A7 14 02 F6 | 	mov	arg02, fp
17340     04 4E 85 F1 | 	sub	fp, #4
17344     A7 16 02 FB | 	rdlong	arg03, fp
17348     18 4E 85 F1 | 	sub	fp, #24
1734c     01 16 66 F0 | 	shl	arg03, #1
17350     07 12 06 F6 | 	mov	arg01, #7
17354     0E 18 C6 F9 | 	decod	arg04, #14
17358     02 1A 06 F6 | 	mov	arg05, #2
1735c     00 1C 06 F6 | 	mov	arg06, #0
17360     0B 00 00 FF 
17364     CC E4 05 F1 | 	add	objptr, ##5836
17368     2C 5D B0 FD | 	call	#_audio096_spin2_play8
1736c     0B 00 00 FF 
17370     CC E4 85 F1 | 	sub	objptr, ##5836
17374     0C 4E 05 F1 | 	add	fp, #12
17378     A7 12 02 F6 | 	mov	arg01, fp
1737c     0C 4E 85 F1 | 	sub	fp, #12
17380     C0 2E BF FD | 	call	#_push
17384     B8 F5 BF FD | 	call	#_do_waitms
17388     07 12 06 F6 | 	mov	arg01, #7
1738c     0B 00 00 FF 
17390     CC E4 05 F1 | 	add	objptr, ##5836
17394     B4 5D B0 FD | 	call	#_audio096_spin2_stop
17398     0B 00 00 FF 
1739c     CC E4 85 F1 | 	sub	objptr, ##5836
173a0     A7 F0 03 F6 | 	mov	ptra, fp
173a4     B2 00 A0 FD | 	call	#popregs_
173a8                 | _do_beep_ret
173a8     2D 00 64 FD | 	ret
173ac                 | 
173ac                 | ' 
173ac                 | ' sub do_no_command
173ac                 | _do_no_command
173ac     17 12 06 F6 | 	mov	arg01, #23
173b0     58 1C B0 FD | 	call	#_printerror
173b4                 | _do_no_command_ret
173b4     2D 00 64 FD | 	ret
173b8                 | 
173b8                 | ' 
173b8                 | ' sub do_negative
173b8                 | _do_negative
173b8     02 4A 05 F6 | 	mov	COUNT_, #2
173bc     A8 00 A0 FD | 	call	#pushregs_
173c0     0C F0 07 F1 | 	add	ptra, #12
173c4     E4 2D BF FD | 	call	#_pop
173c8     FF 1E 02 F6 | 	mov	local01, result3
173cc     A7 FA 61 FC | 	wrlong	result1, fp
173d0     04 4E 05 F1 | 	add	fp, #4
173d4     A7 FC 61 FC | 	wrlong	result2, fp
173d8     04 4E 05 F1 | 	add	fp, #4
173dc     A7 1E 62 FC | 	wrlong	local01, fp
173e0                 | ' t1=pop()
173e0                 | ' if t1.result_type=result_int then 
173e0     08 4E 85 F1 | 	sub	fp, #8
173e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
173e8     A7 20 02 AB |  if_e	rdlong	local02, fp
173ec     10 1F 62 A6 |  if_e	neg	local01, local02
173f0     A7 1E 62 AC |  if_e	wrlong	local01, fp
173f4     5C 00 90 AD |  if_e	jmp	#LR__1882
173f8     08 4E 05 F1 | 	add	fp, #8
173fc     A7 1E 02 FB | 	rdlong	local01, fp
17400     08 4E 85 F1 | 	sub	fp, #8
17404     1D 1E 0E F2 | 	cmp	local01, #29 wz
17408     1C 00 90 5D |  if_ne	jmp	#LR__1880
1740c     A7 20 02 FB | 	rdlong	local02, fp
17410     10 1F 62 F6 | 	neg	local01, local02
17414     A7 1E 62 FC | 	wrlong	local01, fp
17418     08 4E 05 F1 | 	add	fp, #8
1741c     A7 38 68 FC | 	wrlong	#28, fp
17420     08 4E 85 F1 | 	sub	fp, #8
17424     2C 00 90 FD | 	jmp	#LR__1881
17428                 | LR__1880
17428     08 4E 05 F1 | 	add	fp, #8
1742c     A7 1E 02 FB | 	rdlong	local01, fp
17430     08 4E 85 F1 | 	sub	fp, #8
17434     1E 1E 0E F2 | 	cmp	local01, #30 wz
17438     A7 FA 01 AB |  if_e	rdlong	result1, fp
1743c     1F FA E5 A4 |  if_e	bitnot	result1, #31
17440     A7 FA 61 AC |  if_e	wrlong	result1, fp
17444     08 4E 05 51 |  if_ne	add	fp, #8
17448     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1744c     08 4E 85 51 |  if_ne	sub	fp, #8
17450     A7 50 68 5C |  if_ne	wrlong	#40, fp
17454                 | LR__1881
17454                 | LR__1882
17454     A7 12 02 F6 | 	mov	arg01, fp
17458     E8 2D BF FD | 	call	#_push
1745c     A7 F0 03 F6 | 	mov	ptra, fp
17460     B2 00 A0 FD | 	call	#popregs_
17464                 | _do_negative_ret
17464     2D 00 64 FD | 	ret
17468                 | 
17468                 | ' 
17468                 | ' sub do_abs
17468                 | _do_abs
17468     01 4A 05 F6 | 	mov	COUNT_, #1
1746c     A8 00 A0 FD | 	call	#pushregs_
17470     0C F0 07 F1 | 	add	ptra, #12
17474     34 2D BF FD | 	call	#_pop
17478     FF 1E 02 F6 | 	mov	local01, result3
1747c     A7 FA 61 FC | 	wrlong	result1, fp
17480     04 4E 05 F1 | 	add	fp, #4
17484     A7 FC 61 FC | 	wrlong	result2, fp
17488     04 4E 05 F1 | 	add	fp, #4
1748c     A7 1E 62 FC | 	wrlong	local01, fp
17490                 | ' t1=pop()
17490                 | ' if t1.result_type=result_int then 
17490     08 4E 85 F1 | 	sub	fp, #8
17494     1C 1E 0E F2 | 	cmp	local01, #28 wz
17498     A7 12 02 AB |  if_e	rdlong	arg01, fp
1749c     09 1F 42 A6 |  if_e	abs	local01, arg01
174a0     A7 1E 62 AC |  if_e	wrlong	local01, fp
174a4     2C 00 90 AD |  if_e	jmp	#LR__1890
174a8     08 4E 05 F1 | 	add	fp, #8
174ac     A7 1E 02 FB | 	rdlong	local01, fp
174b0     08 4E 85 F1 | 	sub	fp, #8
174b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
174b8     A7 FA 01 AB |  if_e	rdlong	result1, fp
174bc     1F FA 05 A4 |  if_e	bitl	result1, #31
174c0     A7 FA 61 AC |  if_e	wrlong	result1, fp
174c4     08 4E 05 51 |  if_ne	add	fp, #8
174c8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
174cc     08 4E 85 51 |  if_ne	sub	fp, #8
174d0     A7 50 68 5C |  if_ne	wrlong	#40, fp
174d4                 | LR__1890
174d4     A7 12 02 F6 | 	mov	arg01, fp
174d8     68 2D BF FD | 	call	#_push
174dc     A7 F0 03 F6 | 	mov	ptra, fp
174e0     B2 00 A0 FD | 	call	#popregs_
174e4                 | _do_abs_ret
174e4     2D 00 64 FD | 	ret
174e8                 | 
174e8                 | ' 
174e8                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
174e8                 | ' 
174e8                 | ' ''----------------------------------------------------------------------------------------------------
174e8                 | ' ''------------------ Initialization procedures -------------------------------------------------------
174e8                 | ' ''----------------------------------------------------------------------------------------------------
174e8                 | ' 
174e8                 | ' ''--------------------------- Command function pointers
174e8                 | ' 
174e8                 | ' sub init_commands
174e8                 | _init_commands
174e8                 | ' 
174e8                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
174e8     00 00 06 F6 | 	mov	_var01, #0
174ec     97 16 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
174f0                 | LR__1900
174f0     00 FB 01 F6 | 	mov	result1, _var01
174f4     02 FA 65 F0 | 	shl	result1, #2
174f8     63 00 00 FF 
174fc     50 E4 05 F1 | 	add	objptr, ##50768
17500     F2 FA 01 F1 | 	add	result1, objptr
17504     63 00 00 FF 
17508     50 E4 85 F1 | 	sub	objptr, ##50768
1750c     FD E4 61 FC | 	wrlong	objptr, result1
17510     01 00 06 F1 | 	add	_var01, #1
17514     00 01 56 F2 | 	cmps	_var01, #256 wc
17518     D4 FF 9F CD |  if_b	jmp	#LR__1900
1751c                 | LR__1901
1751c     F2 FA 01 F6 | 	mov	result1, objptr
17520     14 FA 25 F4 | 	bith	result1, #20
17524     63 00 00 FF 
17528     54 E4 05 F1 | 	add	objptr, ##50772
1752c     F2 FA 61 FC | 	wrlong	result1, objptr
17530     63 00 00 FF 
17534     54 E4 85 F1 | 	sub	objptr, ##50772
17538     F2 FA 01 F6 | 	mov	result1, objptr
1753c     15 FA 25 F4 | 	bith	result1, #21
17540     63 00 00 FF 
17544     58 E4 05 F1 | 	add	objptr, ##50776
17548     F2 FA 61 FC | 	wrlong	result1, objptr
1754c     63 00 00 FF 
17550     58 E4 85 F1 | 	sub	objptr, ##50776
17554     F2 FA 01 F6 | 	mov	result1, objptr
17558     34 FA 25 F4 | 	bith	result1, #52
1755c     63 00 00 FF 
17560     5C E4 05 F1 | 	add	objptr, ##50780
17564     F2 FA 61 FC | 	wrlong	result1, objptr
17568     63 00 00 FF 
1756c     5C E4 85 F1 | 	sub	objptr, ##50780
17570     F2 FA 01 F6 | 	mov	result1, objptr
17574     16 FA 25 F4 | 	bith	result1, #22
17578     63 00 00 FF 
1757c     64 E4 05 F1 | 	add	objptr, ##50788
17580     F2 FA 61 FC | 	wrlong	result1, objptr
17584     63 00 00 FF 
17588     64 E4 85 F1 | 	sub	objptr, ##50788
1758c     F2 FA 01 F6 | 	mov	result1, objptr
17590     00 28 00 FF 
17594     00 FA 45 F5 | 	or	result1, ##5242880
17598     63 00 00 FF 
1759c     68 E4 05 F1 | 	add	objptr, ##50792
175a0     F2 FA 61 FC | 	wrlong	result1, objptr
175a4     63 00 00 FF 
175a8     68 E4 85 F1 | 	sub	objptr, ##50792
175ac     F2 FA 01 F6 | 	mov	result1, objptr
175b0     35 FA 25 F4 | 	bith	result1, #53
175b4     63 00 00 FF 
175b8     6C E4 05 F1 | 	add	objptr, ##50796
175bc     F2 FA 61 FC | 	wrlong	result1, objptr
175c0     63 00 00 FF 
175c4     6C E4 85 F1 | 	sub	objptr, ##50796
175c8     F2 FA 01 F6 | 	mov	result1, objptr
175cc     54 FA 25 F4 | 	bith	result1, #84
175d0     63 00 00 FF 
175d4     70 E4 05 F1 | 	add	objptr, ##50800
175d8     F2 FA 61 FC | 	wrlong	result1, objptr
175dc     63 00 00 FF 
175e0     70 E4 85 F1 | 	sub	objptr, ##50800
175e4     F2 FA 01 F6 | 	mov	result1, objptr
175e8     17 FA 25 F4 | 	bith	result1, #23
175ec     63 00 00 FF 
175f0     74 E4 05 F1 | 	add	objptr, ##50804
175f4     F2 FA 61 FC | 	wrlong	result1, objptr
175f8     63 00 00 FF 
175fc     74 E4 85 F1 | 	sub	objptr, ##50804
17600     F2 FA 01 F6 | 	mov	result1, objptr
17604     00 48 00 FF 
17608     00 FA 45 F5 | 	or	result1, ##9437184
1760c     63 00 00 FF 
17610     78 E4 05 F1 | 	add	objptr, ##50808
17614     F2 FA 61 FC | 	wrlong	result1, objptr
17618     63 00 00 FF 
1761c     78 E4 85 F1 | 	sub	objptr, ##50808
17620     F2 FA 01 F6 | 	mov	result1, objptr
17624     00 50 00 FF 
17628     00 FA 45 F5 | 	or	result1, ##10485760
1762c     63 00 00 FF 
17630     7C E4 05 F1 | 	add	objptr, ##50812
17634     F2 FA 61 FC | 	wrlong	result1, objptr
17638     63 00 00 FF 
1763c     7C E4 85 F1 | 	sub	objptr, ##50812
17640     F2 FA 01 F6 | 	mov	result1, objptr
17644     00 58 00 FF 
17648     00 FA 45 F5 | 	or	result1, ##11534336
1764c     63 00 00 FF 
17650     80 E4 05 F1 | 	add	objptr, ##50816
17654     F2 FA 61 FC | 	wrlong	result1, objptr
17658     63 00 00 FF 
1765c     80 E4 85 F1 | 	sub	objptr, ##50816
17660     F2 FA 01 F6 | 	mov	result1, objptr
17664     36 FA 25 F4 | 	bith	result1, #54
17668     63 00 00 FF 
1766c     94 E4 05 F1 | 	add	objptr, ##50836
17670     F2 FA 61 FC | 	wrlong	result1, objptr
17674     63 00 00 FF 
17678     94 E4 85 F1 | 	sub	objptr, ##50836
1767c     F2 FA 01 F6 | 	mov	result1, objptr
17680     00 68 00 FF 
17684     00 FA 45 F5 | 	or	result1, ##13631488
17688     63 00 00 FF 
1768c     C4 E4 05 F1 | 	add	objptr, ##50884
17690     F2 FA 61 FC | 	wrlong	result1, objptr
17694     63 00 00 FF 
17698     C4 E4 85 F1 | 	sub	objptr, ##50884
1769c     F2 FA 01 F6 | 	mov	result1, objptr
176a0     00 68 00 FF 
176a4     00 FA 45 F5 | 	or	result1, ##13631488
176a8     63 00 00 FF 
176ac     C0 E4 05 F1 | 	add	objptr, ##50880
176b0     F2 FA 61 FC | 	wrlong	result1, objptr
176b4     63 00 00 FF 
176b8     C0 E4 85 F1 | 	sub	objptr, ##50880
176bc     F2 FA 01 F6 | 	mov	result1, objptr
176c0     00 68 00 FF 
176c4     00 FA 45 F5 | 	or	result1, ##13631488
176c8     63 00 00 FF 
176cc     C8 E4 05 F1 | 	add	objptr, ##50888
176d0     F2 FA 61 FC | 	wrlong	result1, objptr
176d4     63 00 00 FF 
176d8     C8 E4 85 F1 | 	sub	objptr, ##50888
176dc     F2 FA 01 F6 | 	mov	result1, objptr
176e0     00 68 00 FF 
176e4     00 FA 45 F5 | 	or	result1, ##13631488
176e8     63 00 00 FF 
176ec     CC E4 05 F1 | 	add	objptr, ##50892
176f0     F2 FA 61 FC | 	wrlong	result1, objptr
176f4     63 00 00 FF 
176f8     CC E4 85 F1 | 	sub	objptr, ##50892
176fc     F2 FA 01 F6 | 	mov	result1, objptr
17700     00 68 00 FF 
17704     00 FA 45 F5 | 	or	result1, ##13631488
17708     63 00 00 FF 
1770c     FC E4 05 F1 | 	add	objptr, ##50940
17710     F2 FA 61 FC | 	wrlong	result1, objptr
17714     63 00 00 FF 
17718     FC E4 85 F1 | 	sub	objptr, ##50940
1771c     F2 FA 01 F6 | 	mov	result1, objptr
17720     55 FA 25 F4 | 	bith	result1, #85
17724     63 00 00 FF 
17728     AC E4 05 F1 | 	add	objptr, ##50860
1772c     F2 FA 61 FC | 	wrlong	result1, objptr
17730     63 00 00 FF 
17734     AC E4 85 F1 | 	sub	objptr, ##50860
17738     F2 FA 01 F6 | 	mov	result1, objptr
1773c     00 68 00 FF 
17740     00 FA 45 F5 | 	or	result1, ##13631488
17744     63 00 00 FF 
17748     D0 E4 05 F1 | 	add	objptr, ##50896
1774c     F2 FA 61 FC | 	wrlong	result1, objptr
17750     63 00 00 FF 
17754     D0 E4 85 F1 | 	sub	objptr, ##50896
17758     F2 FA 01 F6 | 	mov	result1, objptr
1775c     00 68 00 FF 
17760     00 FA 45 F5 | 	or	result1, ##13631488
17764     63 00 00 FF 
17768     D4 E4 05 F1 | 	add	objptr, ##50900
1776c     F2 FA 61 FC | 	wrlong	result1, objptr
17770     63 00 00 FF 
17774     D4 E4 85 F1 | 	sub	objptr, ##50900
17778     F2 FA 01 F6 | 	mov	result1, objptr
1777c     00 68 00 FF 
17780     00 FA 45 F5 | 	or	result1, ##13631488
17784     63 00 00 FF 
17788     D8 E4 05 F1 | 	add	objptr, ##50904
1778c     F2 FA 61 FC | 	wrlong	result1, objptr
17790     63 00 00 FF 
17794     D8 E4 85 F1 | 	sub	objptr, ##50904
17798     F2 FA 01 F6 | 	mov	result1, objptr
1779c     74 FA 25 F4 | 	bith	result1, #116
177a0     63 00 00 FF 
177a4     50 E5 05 F1 | 	add	objptr, ##51024
177a8     F2 FA 61 FC | 	wrlong	result1, objptr
177ac     63 00 00 FF 
177b0     50 E5 85 F1 | 	sub	objptr, ##51024
177b4     F2 FA 01 F6 | 	mov	result1, objptr
177b8     18 FA 25 F4 | 	bith	result1, #24
177bc     63 00 00 FF 
177c0     54 E5 05 F1 | 	add	objptr, ##51028
177c4     F2 FA 61 FC | 	wrlong	result1, objptr
177c8     63 00 00 FF 
177cc     54 E5 85 F1 | 	sub	objptr, ##51028
177d0     F2 FA 01 F6 | 	mov	result1, objptr
177d4     00 88 00 FF 
177d8     00 FA 45 F5 | 	or	result1, ##17825792
177dc     63 00 00 FF 
177e0     58 E5 05 F1 | 	add	objptr, ##51032
177e4     F2 FA 61 FC | 	wrlong	result1, objptr
177e8     63 00 00 FF 
177ec     58 E5 85 F1 | 	sub	objptr, ##51032
177f0     F2 FA 01 F6 | 	mov	result1, objptr
177f4     00 90 00 FF 
177f8     00 FA 45 F5 | 	or	result1, ##18874368
177fc     63 00 00 FF 
17800     5C E5 05 F1 | 	add	objptr, ##51036
17804     F2 FA 61 FC | 	wrlong	result1, objptr
17808     63 00 00 FF 
1780c     5C E5 85 F1 | 	sub	objptr, ##51036
17810     F2 FA 01 F6 | 	mov	result1, objptr
17814     00 98 00 FF 
17818     00 FA 45 F5 | 	or	result1, ##19922944
1781c     63 00 00 FF 
17820     60 E5 05 F1 | 	add	objptr, ##51040
17824     F2 FA 61 FC | 	wrlong	result1, objptr
17828     63 00 00 FF 
1782c     60 E5 85 F1 | 	sub	objptr, ##51040
17830     F2 FA 01 F6 | 	mov	result1, objptr
17834     00 A0 00 FF 
17838     00 FA 45 F5 | 	or	result1, ##20971520
1783c     63 00 00 FF 
17840     64 E5 05 F1 | 	add	objptr, ##51044
17844     F2 FA 61 FC | 	wrlong	result1, objptr
17848     63 00 00 FF 
1784c     64 E5 85 F1 | 	sub	objptr, ##51044
17850     F2 FA 01 F6 | 	mov	result1, objptr
17854     00 A8 00 FF 
17858     00 FA 45 F5 | 	or	result1, ##22020096
1785c     63 00 00 FF 
17860     68 E5 05 F1 | 	add	objptr, ##51048
17864     F2 FA 61 FC | 	wrlong	result1, objptr
17868     63 00 00 FF 
1786c     68 E5 85 F1 | 	sub	objptr, ##51048
17870     F2 FA 01 F6 | 	mov	result1, objptr
17874     00 B0 00 FF 
17878     00 FA 45 F5 | 	or	result1, ##23068672
1787c     63 00 00 FF 
17880     6C E5 05 F1 | 	add	objptr, ##51052
17884     F2 FA 61 FC | 	wrlong	result1, objptr
17888     63 00 00 FF 
1788c     6C E5 85 F1 | 	sub	objptr, ##51052
17890     F2 FA 01 F6 | 	mov	result1, objptr
17894     00 B8 00 FF 
17898     00 FA 45 F5 | 	or	result1, ##24117248
1789c     63 00 00 FF 
178a0     70 E5 05 F1 | 	add	objptr, ##51056
178a4     F2 FA 61 FC | 	wrlong	result1, objptr
178a8     63 00 00 FF 
178ac     70 E5 85 F1 | 	sub	objptr, ##51056
178b0     F2 FA 01 F6 | 	mov	result1, objptr
178b4     37 FA 25 F4 | 	bith	result1, #55
178b8     63 00 00 FF 
178bc     74 E5 05 F1 | 	add	objptr, ##51060
178c0     F2 FA 61 FC | 	wrlong	result1, objptr
178c4     63 00 00 FF 
178c8     74 E5 85 F1 | 	sub	objptr, ##51060
178cc     F2 FA 01 F6 | 	mov	result1, objptr
178d0     00 C8 00 FF 
178d4     00 FA 45 F5 | 	or	result1, ##26214400
178d8     63 00 00 FF 
178dc     78 E5 05 F1 | 	add	objptr, ##51064
178e0     F2 FA 61 FC | 	wrlong	result1, objptr
178e4     63 00 00 FF 
178e8     78 E5 85 F1 | 	sub	objptr, ##51064
178ec     F2 FA 01 F6 | 	mov	result1, objptr
178f0     00 D0 00 FF 
178f4     00 FA 45 F5 | 	or	result1, ##27262976
178f8     63 00 00 FF 
178fc     7C E5 05 F1 | 	add	objptr, ##51068
17900     F2 FA 61 FC | 	wrlong	result1, objptr
17904     63 00 00 FF 
17908     7C E5 85 F1 | 	sub	objptr, ##51068
1790c     F2 FA 01 F6 | 	mov	result1, objptr
17910     00 D8 00 FF 
17914     00 FA 45 F5 | 	or	result1, ##28311552
17918     63 00 00 FF 
1791c     80 E5 05 F1 | 	add	objptr, ##51072
17920     F2 FA 61 FC | 	wrlong	result1, objptr
17924     63 00 00 FF 
17928     80 E5 85 F1 | 	sub	objptr, ##51072
1792c     F2 FA 01 F6 | 	mov	result1, objptr
17930     56 FA 25 F4 | 	bith	result1, #86
17934     63 00 00 FF 
17938     84 E5 05 F1 | 	add	objptr, ##51076
1793c     F2 FA 61 FC | 	wrlong	result1, objptr
17940     63 00 00 FF 
17944     84 E5 85 F1 | 	sub	objptr, ##51076
17948     F2 FA 01 F6 | 	mov	result1, objptr
1794c     00 E8 00 FF 
17950     00 FA 45 F5 | 	or	result1, ##30408704
17954     65 00 00 FF 
17958     4C E4 05 F1 | 	add	objptr, ##51788
1795c     F2 FA 61 FC | 	wrlong	result1, objptr
17960     65 00 00 FF 
17964     4C E4 85 F1 | 	sub	objptr, ##51788
17968     F2 FA 01 F6 | 	mov	result1, objptr
1796c     75 FA 25 F4 | 	bith	result1, #117
17970     63 00 00 FF 
17974     88 E5 05 F1 | 	add	objptr, ##51080
17978     F2 FA 61 FC | 	wrlong	result1, objptr
1797c     63 00 00 FF 
17980     88 E5 85 F1 | 	sub	objptr, ##51080
17984     F2 FA 01 F6 | 	mov	result1, objptr
17988     94 FA 25 F4 | 	bith	result1, #148
1798c     63 00 00 FF 
17990     9C E5 05 F1 | 	add	objptr, ##51100
17994     F2 FA 61 FC | 	wrlong	result1, objptr
17998     63 00 00 FF 
1799c     9C E5 85 F1 | 	sub	objptr, ##51100
179a0     F2 FA 01 F6 | 	mov	result1, objptr
179a4     19 FA 25 F4 | 	bith	result1, #25
179a8     63 00 00 FF 
179ac     8C E5 05 F1 | 	add	objptr, ##51084
179b0     F2 FA 61 FC | 	wrlong	result1, objptr
179b4     63 00 00 FF 
179b8     8C E5 85 F1 | 	sub	objptr, ##51084
179bc     F2 FA 01 F6 | 	mov	result1, objptr
179c0     00 08 01 FF 
179c4     00 FA 45 F5 | 	or	result1, ##34603008
179c8     63 00 00 FF 
179cc     A8 E4 05 F1 | 	add	objptr, ##50856
179d0     F2 FA 61 FC | 	wrlong	result1, objptr
179d4     63 00 00 FF 
179d8     A8 E4 85 F1 | 	sub	objptr, ##50856
179dc     F2 FA 01 F6 | 	mov	result1, objptr
179e0     00 10 01 FF 
179e4     00 FA 45 F5 | 	or	result1, ##35651584
179e8     63 00 00 FF 
179ec     90 E5 05 F1 | 	add	objptr, ##51088
179f0     F2 FA 61 FC | 	wrlong	result1, objptr
179f4     63 00 00 FF 
179f8     90 E5 85 F1 | 	sub	objptr, ##51088
179fc     F2 FA 01 F6 | 	mov	result1, objptr
17a00     00 18 01 FF 
17a04     00 FA 45 F5 | 	or	result1, ##36700160
17a08     63 00 00 FF 
17a0c     94 E5 05 F1 | 	add	objptr, ##51092
17a10     F2 FA 61 FC | 	wrlong	result1, objptr
17a14     63 00 00 FF 
17a18     94 E5 85 F1 | 	sub	objptr, ##51092
17a1c     F2 FA 01 F6 | 	mov	result1, objptr
17a20     00 20 01 FF 
17a24     00 FA 45 F5 | 	or	result1, ##37748736
17a28     63 00 00 FF 
17a2c     98 E5 05 F1 | 	add	objptr, ##51096
17a30     F2 FA 61 FC | 	wrlong	result1, objptr
17a34     63 00 00 FF 
17a38     98 E5 85 F1 | 	sub	objptr, ##51096
17a3c     F2 FA 01 F6 | 	mov	result1, objptr
17a40     00 28 01 FF 
17a44     00 FA 45 F5 | 	or	result1, ##38797312
17a48     63 00 00 FF 
17a4c     A4 E5 05 F1 | 	add	objptr, ##51108
17a50     F2 FA 61 FC | 	wrlong	result1, objptr
17a54     63 00 00 FF 
17a58     A4 E5 85 F1 | 	sub	objptr, ##51108
17a5c     F2 FA 01 F6 | 	mov	result1, objptr
17a60     00 30 01 FF 
17a64     00 FA 45 F5 | 	or	result1, ##39845888
17a68     63 00 00 FF 
17a6c     A8 E5 05 F1 | 	add	objptr, ##51112
17a70     F2 FA 61 FC | 	wrlong	result1, objptr
17a74     63 00 00 FF 
17a78     A8 E5 85 F1 | 	sub	objptr, ##51112
17a7c     F2 FA 01 F6 | 	mov	result1, objptr
17a80     00 38 01 FF 
17a84     00 FA 45 F5 | 	or	result1, ##40894464
17a88     63 00 00 FF 
17a8c     AC E5 05 F1 | 	add	objptr, ##51116
17a90     F2 FA 61 FC | 	wrlong	result1, objptr
17a94     63 00 00 FF 
17a98     AC E5 85 F1 | 	sub	objptr, ##51116
17a9c     F2 FA 01 F6 | 	mov	result1, objptr
17aa0     00 40 01 FF 
17aa4     00 FA 45 F5 | 	or	result1, ##41943040
17aa8     63 00 00 FF 
17aac     B0 E5 05 F1 | 	add	objptr, ##51120
17ab0     F2 FA 61 FC | 	wrlong	result1, objptr
17ab4     63 00 00 FF 
17ab8     B0 E5 85 F1 | 	sub	objptr, ##51120
17abc     F2 FA 01 F6 | 	mov	result1, objptr
17ac0     00 48 01 FF 
17ac4     00 FA 45 F5 | 	or	result1, ##42991616
17ac8     63 00 00 FF 
17acc     B8 E5 05 F1 | 	add	objptr, ##51128
17ad0     F2 FA 61 FC | 	wrlong	result1, objptr
17ad4     63 00 00 FF 
17ad8     B8 E5 85 F1 | 	sub	objptr, ##51128
17adc     F2 FA 01 F6 | 	mov	result1, objptr
17ae0     00 50 01 FF 
17ae4     00 FA 45 F5 | 	or	result1, ##44040192
17ae8     63 00 00 FF 
17aec     BC E5 05 F1 | 	add	objptr, ##51132
17af0     F2 FA 61 FC | 	wrlong	result1, objptr
17af4     63 00 00 FF 
17af8     BC E5 85 F1 | 	sub	objptr, ##51132
17afc     F2 FA 01 F6 | 	mov	result1, objptr
17b00     00 58 01 FF 
17b04     00 FA 45 F5 | 	or	result1, ##45088768
17b08     63 00 00 FF 
17b0c     BC E4 05 F1 | 	add	objptr, ##50876
17b10     F2 FA 61 FC | 	wrlong	result1, objptr
17b14     63 00 00 FF 
17b18     BC E4 85 F1 | 	sub	objptr, ##50876
17b1c     F2 FA 01 F6 | 	mov	result1, objptr
17b20     00 60 01 FF 
17b24     00 FA 45 F5 | 	or	result1, ##46137344
17b28     63 00 00 FF 
17b2c     EC E4 05 F1 | 	add	objptr, ##50924
17b30     F2 FA 61 FC | 	wrlong	result1, objptr
17b34     63 00 00 FF 
17b38     EC E4 85 F1 | 	sub	objptr, ##50924
17b3c     F2 FA 01 F6 | 	mov	result1, objptr
17b40     00 68 01 FF 
17b44     00 FA 45 F5 | 	or	result1, ##47185920
17b48     63 00 00 FF 
17b4c     E8 E4 05 F1 | 	add	objptr, ##50920
17b50     F2 FA 61 FC | 	wrlong	result1, objptr
17b54     63 00 00 FF 
17b58     E8 E4 85 F1 | 	sub	objptr, ##50920
17b5c     F2 FA 01 F6 | 	mov	result1, objptr
17b60     00 70 01 FF 
17b64     00 FA 45 F5 | 	or	result1, ##48234496
17b68     63 00 00 FF 
17b6c     8C E4 05 F1 | 	add	objptr, ##50828
17b70     F2 FA 61 FC | 	wrlong	result1, objptr
17b74     63 00 00 FF 
17b78     8C E4 85 F1 | 	sub	objptr, ##50828
17b7c     F2 FA 01 F6 | 	mov	result1, objptr
17b80     00 78 01 FF 
17b84     00 FA 45 F5 | 	or	result1, ##49283072
17b88     63 00 00 FF 
17b8c     90 E4 05 F1 | 	add	objptr, ##50832
17b90     F2 FA 61 FC | 	wrlong	result1, objptr
17b94     63 00 00 FF 
17b98     90 E4 85 F1 | 	sub	objptr, ##50832
17b9c     F2 FA 01 F6 | 	mov	result1, objptr
17ba0     38 FA 25 F4 | 	bith	result1, #56
17ba4     63 00 00 FF 
17ba8     F8 E4 05 F1 | 	add	objptr, ##50936
17bac     F2 FA 61 FC | 	wrlong	result1, objptr
17bb0     63 00 00 FF 
17bb4     F8 E4 85 F1 | 	sub	objptr, ##50936
17bb8     F2 FA 01 F6 | 	mov	result1, objptr
17bbc     00 88 01 FF 
17bc0     00 FA 45 F5 | 	or	result1, ##51380224
17bc4     63 00 00 FF 
17bc8     A0 E5 05 F1 | 	add	objptr, ##51104
17bcc     F2 FA 61 FC | 	wrlong	result1, objptr
17bd0     63 00 00 FF 
17bd4     A0 E5 85 F1 | 	sub	objptr, ##51104
17bd8     F2 FA 01 F6 | 	mov	result1, objptr
17bdc     00 90 01 FF 
17be0     00 FA 45 F5 | 	or	result1, ##52428800
17be4     63 00 00 FF 
17be8     B4 E5 05 F1 | 	add	objptr, ##51124
17bec     F2 FA 61 FC | 	wrlong	result1, objptr
17bf0     63 00 00 FF 
17bf4     B4 E5 85 F1 | 	sub	objptr, ##51124
17bf8     F2 FA 01 F6 | 	mov	result1, objptr
17bfc     00 98 01 FF 
17c00     00 FA 45 F5 | 	or	result1, ##53477376
17c04     63 00 00 FF 
17c08     C0 E5 05 F1 | 	add	objptr, ##51136
17c0c     F2 FA 61 FC | 	wrlong	result1, objptr
17c10     63 00 00 FF 
17c14     C0 E5 85 F1 | 	sub	objptr, ##51136
17c18     F2 FA 01 F6 | 	mov	result1, objptr
17c1c     00 A0 01 FF 
17c20     00 FA 45 F5 | 	or	result1, ##54525952
17c24     63 00 00 FF 
17c28     C4 E5 05 F1 | 	add	objptr, ##51140
17c2c     F2 FA 61 FC | 	wrlong	result1, objptr
17c30     63 00 00 FF 
17c34     C4 E5 85 F1 | 	sub	objptr, ##51140
17c38     F2 FA 01 F6 | 	mov	result1, objptr
17c3c     00 A8 01 FF 
17c40     00 FA 45 F5 | 	or	result1, ##55574528
17c44     63 00 00 FF 
17c48     C8 E5 05 F1 | 	add	objptr, ##51144
17c4c     F2 FA 61 FC | 	wrlong	result1, objptr
17c50     63 00 00 FF 
17c54     C8 E5 85 F1 | 	sub	objptr, ##51144
17c58     F2 FA 01 F6 | 	mov	result1, objptr
17c5c     00 B0 01 FF 
17c60     00 FA 45 F5 | 	or	result1, ##56623104
17c64     63 00 00 FF 
17c68     CC E5 05 F1 | 	add	objptr, ##51148
17c6c     F2 FA 61 FC | 	wrlong	result1, objptr
17c70     63 00 00 FF 
17c74     CC E5 85 F1 | 	sub	objptr, ##51148
17c78     F2 FA 01 F6 | 	mov	result1, objptr
17c7c     00 B8 01 FF 
17c80     00 FA 45 F5 | 	or	result1, ##57671680
17c84     63 00 00 FF 
17c88     D0 E5 05 F1 | 	add	objptr, ##51152
17c8c     F2 FA 61 FC | 	wrlong	result1, objptr
17c90     63 00 00 FF 
17c94     D0 E5 85 F1 | 	sub	objptr, ##51152
17c98     F2 FA 01 F6 | 	mov	result1, objptr
17c9c     57 FA 25 F4 | 	bith	result1, #87
17ca0     63 00 00 FF 
17ca4     D4 E5 05 F1 | 	add	objptr, ##51156
17ca8     F2 FA 61 FC | 	wrlong	result1, objptr
17cac     63 00 00 FF 
17cb0     D4 E5 85 F1 | 	sub	objptr, ##51156
17cb4     F2 FA 01 F6 | 	mov	result1, objptr
17cb8     94 FA 25 F4 | 	bith	result1, #148
17cbc     63 00 00 FF 
17cc0     9C E5 05 F1 | 	add	objptr, ##51100
17cc4     F2 FA 61 FC | 	wrlong	result1, objptr
17cc8     63 00 00 FF 
17ccc     9C E5 85 F1 | 	sub	objptr, ##51100
17cd0     F2 FA 01 F6 | 	mov	result1, objptr
17cd4     00 C8 01 FF 
17cd8     00 FA 45 F5 | 	or	result1, ##59768832
17cdc     63 00 00 FF 
17ce0     DC E5 05 F1 | 	add	objptr, ##51164
17ce4     F2 FA 61 FC | 	wrlong	result1, objptr
17ce8     63 00 00 FF 
17cec     DC E5 85 F1 | 	sub	objptr, ##51164
17cf0     F2 FA 01 F6 | 	mov	result1, objptr
17cf4     00 D0 01 FF 
17cf8     00 FA 45 F5 | 	or	result1, ##60817408
17cfc     63 00 00 FF 
17d00     D8 E5 05 F1 | 	add	objptr, ##51160
17d04     F2 FA 61 FC | 	wrlong	result1, objptr
17d08     63 00 00 FF 
17d0c     D8 E5 85 F1 | 	sub	objptr, ##51160
17d10     F2 FA 01 F6 | 	mov	result1, objptr
17d14     00 D8 01 FF 
17d18     00 FA 45 F5 | 	or	result1, ##61865984
17d1c     63 00 00 FF 
17d20     F0 E5 05 F1 | 	add	objptr, ##51184
17d24     F2 FA 61 FC | 	wrlong	result1, objptr
17d28     63 00 00 FF 
17d2c     F0 E5 85 F1 | 	sub	objptr, ##51184
17d30     F2 FA 01 F6 | 	mov	result1, objptr
17d34     76 FA 25 F4 | 	bith	result1, #118
17d38     63 00 00 FF 
17d3c     F4 E5 05 F1 | 	add	objptr, ##51188
17d40     F2 FA 61 FC | 	wrlong	result1, objptr
17d44     63 00 00 FF 
17d48     F4 E5 85 F1 | 	sub	objptr, ##51188
17d4c     F2 FA 01 F6 | 	mov	result1, objptr
17d50     00 E8 01 FF 
17d54     00 FA 45 F5 | 	or	result1, ##63963136
17d58     63 00 00 FF 
17d5c     E0 E5 05 F1 | 	add	objptr, ##51168
17d60     F2 FA 61 FC | 	wrlong	result1, objptr
17d64     63 00 00 FF 
17d68     E0 E5 85 F1 | 	sub	objptr, ##51168
17d6c     F2 FA 01 F6 | 	mov	result1, objptr
17d70     95 FA 25 F4 | 	bith	result1, #149
17d74     63 00 00 FF 
17d78     E4 E5 05 F1 | 	add	objptr, ##51172
17d7c     F2 FA 61 FC | 	wrlong	result1, objptr
17d80     63 00 00 FF 
17d84     E4 E5 85 F1 | 	sub	objptr, ##51172
17d88     F2 FA 01 F6 | 	mov	result1, objptr
17d8c     B4 FA 25 F4 | 	bith	result1, #180
17d90     63 00 00 FF 
17d94     E8 E5 05 F1 | 	add	objptr, ##51176
17d98     F2 FA 61 FC | 	wrlong	result1, objptr
17d9c     63 00 00 FF 
17da0     E8 E5 85 F1 | 	sub	objptr, ##51176
17da4     F2 FA 01 F6 | 	mov	result1, objptr
17da8     1A FA 25 F4 | 	bith	result1, #26
17dac     63 00 00 FF 
17db0     EC E5 05 F1 | 	add	objptr, ##51180
17db4     F2 FA 61 FC | 	wrlong	result1, objptr
17db8     63 00 00 FF 
17dbc     EC E5 85 F1 | 	sub	objptr, ##51180
17dc0     F2 FA 01 F6 | 	mov	result1, objptr
17dc4     00 08 02 FF 
17dc8     00 FA 45 F5 | 	or	result1, ##68157440
17dcc     63 00 00 FF 
17dd0     FC E5 05 F1 | 	add	objptr, ##51196
17dd4     F2 FA 61 FC | 	wrlong	result1, objptr
17dd8     63 00 00 FF 
17ddc     FC E5 85 F1 | 	sub	objptr, ##51196
17de0     F2 FA 01 F6 | 	mov	result1, objptr
17de4     00 10 02 FF 
17de8     00 FA 45 F5 | 	or	result1, ##69206016
17dec     63 00 00 FF 
17df0     F8 E5 05 F1 | 	add	objptr, ##51192
17df4     F2 FA 61 FC | 	wrlong	result1, objptr
17df8     63 00 00 FF 
17dfc     F8 E5 85 F1 | 	sub	objptr, ##51192
17e00     F2 FA 01 F6 | 	mov	result1, objptr
17e04     00 18 02 FF 
17e08     00 FA 45 F5 | 	or	result1, ##70254592
17e0c     64 00 00 FF 
17e10     08 E4 05 F1 | 	add	objptr, ##51208
17e14     F2 FA 61 FC | 	wrlong	result1, objptr
17e18     64 00 00 FF 
17e1c     08 E4 85 F1 | 	sub	objptr, ##51208
17e20     F2 FA 01 F6 | 	mov	result1, objptr
17e24     00 20 02 FF 
17e28     00 FA 45 F5 | 	or	result1, ##71303168
17e2c     64 00 00 FF 
17e30     04 E4 05 F1 | 	add	objptr, ##51204
17e34     F2 FA 61 FC | 	wrlong	result1, objptr
17e38     64 00 00 FF 
17e3c     04 E4 85 F1 | 	sub	objptr, ##51204
17e40     F2 FA 01 F6 | 	mov	result1, objptr
17e44     00 28 02 FF 
17e48     00 FA 45 F5 | 	or	result1, ##72351744
17e4c     64 00 00 FF 
17e50     00 E4 05 F1 | 	add	objptr, ##51200
17e54     F2 FA 61 FC | 	wrlong	result1, objptr
17e58     64 00 00 FF 
17e5c     00 E4 85 F1 | 	sub	objptr, ##51200
17e60     F2 FA 01 F6 | 	mov	result1, objptr
17e64     00 30 02 FF 
17e68     00 FA 45 F5 | 	or	result1, ##73400320
17e6c     64 00 00 FF 
17e70     0C E4 05 F1 | 	add	objptr, ##51212
17e74     F2 FA 61 FC | 	wrlong	result1, objptr
17e78     64 00 00 FF 
17e7c     0C E4 85 F1 | 	sub	objptr, ##51212
17e80     F2 FA 01 F6 | 	mov	result1, objptr
17e84     00 38 02 FF 
17e88     00 FA 45 F5 | 	or	result1, ##74448896
17e8c     64 00 00 FF 
17e90     10 E4 05 F1 | 	add	objptr, ##51216
17e94     F2 FA 61 FC | 	wrlong	result1, objptr
17e98     64 00 00 FF 
17e9c     10 E4 85 F1 | 	sub	objptr, ##51216
17ea0     F2 FA 01 F6 | 	mov	result1, objptr
17ea4     00 40 02 FF 
17ea8     00 FA 45 F5 | 	or	result1, ##75497472
17eac     63 00 00 FF 
17eb0     A4 E4 05 F1 | 	add	objptr, ##50852
17eb4     F2 FA 61 FC | 	wrlong	result1, objptr
17eb8     63 00 00 FF 
17ebc     A4 E4 85 F1 | 	sub	objptr, ##50852
17ec0     F2 FA 01 F6 | 	mov	result1, objptr
17ec4     00 48 02 FF 
17ec8     00 FA 45 F5 | 	or	result1, ##76546048
17ecc     64 00 00 FF 
17ed0     28 E4 05 F1 | 	add	objptr, ##51240
17ed4     F2 FA 61 FC | 	wrlong	result1, objptr
17ed8     64 00 00 FF 
17edc     28 E4 85 F1 | 	sub	objptr, ##51240
17ee0     F2 FA 01 F6 | 	mov	result1, objptr
17ee4     00 50 02 FF 
17ee8     00 FA 45 F5 | 	or	result1, ##77594624
17eec     64 00 00 FF 
17ef0     38 E4 05 F1 | 	add	objptr, ##51256
17ef4     F2 FA 61 FC | 	wrlong	result1, objptr
17ef8     64 00 00 FF 
17efc     38 E4 85 F1 | 	sub	objptr, ##51256
17f00     F2 FA 01 F6 | 	mov	result1, objptr
17f04     00 58 02 FF 
17f08     00 FA 45 F5 | 	or	result1, ##78643200
17f0c     64 00 00 FF 
17f10     3C E4 05 F1 | 	add	objptr, ##51260
17f14     F2 FA 61 FC | 	wrlong	result1, objptr
17f18     64 00 00 FF 
17f1c     3C E4 85 F1 | 	sub	objptr, ##51260
17f20     F2 FA 01 F6 | 	mov	result1, objptr
17f24     00 60 02 FF 
17f28     00 FA 45 F5 | 	or	result1, ##79691776
17f2c     64 00 00 FF 
17f30     34 E4 05 F1 | 	add	objptr, ##51252
17f34     F2 FA 61 FC | 	wrlong	result1, objptr
17f38     64 00 00 FF 
17f3c     34 E4 85 F1 | 	sub	objptr, ##51252
17f40     F2 FA 01 F6 | 	mov	result1, objptr
17f44     00 68 02 FF 
17f48     00 FA 45 F5 | 	or	result1, ##80740352
17f4c     64 00 00 FF 
17f50     2C E4 05 F1 | 	add	objptr, ##51244
17f54     F2 FA 61 FC | 	wrlong	result1, objptr
17f58     64 00 00 FF 
17f5c     2C E4 85 F1 | 	sub	objptr, ##51244
17f60     F2 FA 01 F6 | 	mov	result1, objptr
17f64     00 70 02 FF 
17f68     00 FA 45 F5 | 	or	result1, ##81788928
17f6c     64 00 00 FF 
17f70     30 E4 05 F1 | 	add	objptr, ##51248
17f74     F2 FA 61 FC | 	wrlong	result1, objptr
17f78     64 00 00 FF 
17f7c     30 E4 85 F1 | 	sub	objptr, ##51248
17f80     F2 FA 01 F6 | 	mov	result1, objptr
17f84     00 78 02 FF 
17f88     00 FA 45 F5 | 	or	result1, ##82837504
17f8c     64 00 00 FF 
17f90     40 E4 05 F1 | 	add	objptr, ##51264
17f94     F2 FA 61 FC | 	wrlong	result1, objptr
17f98     64 00 00 FF 
17f9c     40 E4 85 F1 | 	sub	objptr, ##51264
17fa0     F2 FA 01 F6 | 	mov	result1, objptr
17fa4     00 80 02 FF 
17fa8     00 FA 45 F5 | 	or	result1, ##83886080
17fac     64 00 00 FF 
17fb0     44 E4 05 F1 | 	add	objptr, ##51268
17fb4     F2 FA 61 FC | 	wrlong	result1, objptr
17fb8     64 00 00 FF 
17fbc     44 E4 85 F1 | 	sub	objptr, ##51268
17fc0     F2 FA 01 F6 | 	mov	result1, objptr
17fc4     00 88 02 FF 
17fc8     00 FA 45 F5 | 	or	result1, ##84934656
17fcc     64 00 00 FF 
17fd0     48 E4 05 F1 | 	add	objptr, ##51272
17fd4     F2 FA 61 FC | 	wrlong	result1, objptr
17fd8     64 00 00 FF 
17fdc     48 E4 85 F1 | 	sub	objptr, ##51272
17fe0     F2 FA 01 F6 | 	mov	result1, objptr
17fe4     00 90 02 FF 
17fe8     00 FA 45 F5 | 	or	result1, ##85983232
17fec     64 00 00 FF 
17ff0     4C E4 05 F1 | 	add	objptr, ##51276
17ff4     F2 FA 61 FC | 	wrlong	result1, objptr
17ff8     64 00 00 FF 
17ffc     4C E4 85 F1 | 	sub	objptr, ##51276
18000     F2 FA 01 F6 | 	mov	result1, objptr
18004     00 98 02 FF 
18008     00 FA 45 F5 | 	or	result1, ##87031808
1800c     64 00 00 FF 
18010     50 E4 05 F1 | 	add	objptr, ##51280
18014     F2 FA 61 FC | 	wrlong	result1, objptr
18018     64 00 00 FF 
1801c     50 E4 85 F1 | 	sub	objptr, ##51280
18020     F2 FA 01 F6 | 	mov	result1, objptr
18024     00 A0 02 FF 
18028     00 FA 45 F5 | 	or	result1, ##88080384
1802c     64 00 00 FF 
18030     54 E4 05 F1 | 	add	objptr, ##51284
18034     F2 FA 61 FC | 	wrlong	result1, objptr
18038     64 00 00 FF 
1803c     54 E4 85 F1 | 	sub	objptr, ##51284
18040     F2 FA 01 F6 | 	mov	result1, objptr
18044     00 A8 02 FF 
18048     00 FA 45 F5 | 	or	result1, ##89128960
1804c     64 00 00 FF 
18050     58 E4 05 F1 | 	add	objptr, ##51288
18054     F2 FA 61 FC | 	wrlong	result1, objptr
18058     64 00 00 FF 
1805c     58 E4 85 F1 | 	sub	objptr, ##51288
18060     F2 FA 01 F6 | 	mov	result1, objptr
18064     00 B0 02 FF 
18068     00 FA 45 F5 | 	or	result1, ##90177536
1806c     64 00 00 FF 
18070     5C E4 05 F1 | 	add	objptr, ##51292
18074     F2 FA 61 FC | 	wrlong	result1, objptr
18078     64 00 00 FF 
1807c     5C E4 85 F1 | 	sub	objptr, ##51292
18080     F2 FA 01 F6 | 	mov	result1, objptr
18084     00 B8 02 FF 
18088     00 FA 45 F5 | 	or	result1, ##91226112
1808c     64 00 00 FF 
18090     68 E4 05 F1 | 	add	objptr, ##51304
18094     F2 FA 61 FC | 	wrlong	result1, objptr
18098     64 00 00 FF 
1809c     68 E4 85 F1 | 	sub	objptr, ##51304
180a0     F2 FA 01 F6 | 	mov	result1, objptr
180a4     00 C0 02 FF 
180a8     00 FA 45 F5 | 	or	result1, ##92274688
180ac     64 00 00 FF 
180b0     60 E4 05 F1 | 	add	objptr, ##51296
180b4     F2 FA 61 FC | 	wrlong	result1, objptr
180b8     64 00 00 FF 
180bc     60 E4 85 F1 | 	sub	objptr, ##51296
180c0     F2 FA 01 F6 | 	mov	result1, objptr
180c4     00 C8 02 FF 
180c8     00 FA 45 F5 | 	or	result1, ##93323264
180cc     64 00 00 FF 
180d0     64 E4 05 F1 | 	add	objptr, ##51300
180d4     F2 FA 61 FC | 	wrlong	result1, objptr
180d8     64 00 00 FF 
180dc     64 E4 85 F1 | 	sub	objptr, ##51300
180e0     F2 FA 01 F6 | 	mov	result1, objptr
180e4     00 D0 02 FF 
180e8     00 FA 45 F5 | 	or	result1, ##94371840
180ec     64 00 00 FF 
180f0     6C E4 05 F1 | 	add	objptr, ##51308
180f4     F2 FA 61 FC | 	wrlong	result1, objptr
180f8     64 00 00 FF 
180fc     6C E4 85 F1 | 	sub	objptr, ##51308
18100     F2 FA 01 F6 | 	mov	result1, objptr
18104     00 D8 02 FF 
18108     00 FA 45 F5 | 	or	result1, ##95420416
1810c     64 00 00 FF 
18110     14 E4 05 F1 | 	add	objptr, ##51220
18114     F2 FA 61 FC | 	wrlong	result1, objptr
18118     64 00 00 FF 
1811c     14 E4 85 F1 | 	sub	objptr, ##51220
18120     F2 FA 01 F6 | 	mov	result1, objptr
18124     00 E0 02 FF 
18128     00 FA 45 F5 | 	or	result1, ##96468992
1812c     64 00 00 FF 
18130     1C E4 05 F1 | 	add	objptr, ##51228
18134     F2 FA 61 FC | 	wrlong	result1, objptr
18138     64 00 00 FF 
1813c     1C E4 85 F1 | 	sub	objptr, ##51228
18140     F2 FA 01 F6 | 	mov	result1, objptr
18144     00 E8 02 FF 
18148     00 FA 45 F5 | 	or	result1, ##97517568
1814c     64 00 00 FF 
18150     20 E4 05 F1 | 	add	objptr, ##51232
18154     F2 FA 61 FC | 	wrlong	result1, objptr
18158     64 00 00 FF 
1815c     20 E4 85 F1 | 	sub	objptr, ##51232
18160     F2 FA 01 F6 | 	mov	result1, objptr
18164     00 F0 02 FF 
18168     00 FA 45 F5 | 	or	result1, ##98566144
1816c     64 00 00 FF 
18170     70 E4 05 F1 | 	add	objptr, ##51312
18174     F2 FA 61 FC | 	wrlong	result1, objptr
18178     64 00 00 FF 
1817c     70 E4 85 F1 | 	sub	objptr, ##51312
18180     F2 FA 01 F6 | 	mov	result1, objptr
18184     00 F8 02 FF 
18188     00 FA 45 F5 | 	or	result1, ##99614720
1818c     64 00 00 FF 
18190     74 E4 05 F1 | 	add	objptr, ##51316
18194     F2 FA 61 FC | 	wrlong	result1, objptr
18198     64 00 00 FF 
1819c     74 E4 85 F1 | 	sub	objptr, ##51316
181a0     F2 FA 01 F6 | 	mov	result1, objptr
181a4     39 FA 25 F4 | 	bith	result1, #57
181a8     64 00 00 FF 
181ac     78 E4 05 F1 | 	add	objptr, ##51320
181b0     F2 FA 61 FC | 	wrlong	result1, objptr
181b4     64 00 00 FF 
181b8     78 E4 85 F1 | 	sub	objptr, ##51320
181bc     F2 FA 01 F6 | 	mov	result1, objptr
181c0     00 08 03 FF 
181c4     00 FA 45 F5 | 	or	result1, ##101711872
181c8     64 00 00 FF 
181cc     24 E4 05 F1 | 	add	objptr, ##51236
181d0     F2 FA 61 FC | 	wrlong	result1, objptr
181d4     64 00 00 FF 
181d8     24 E4 85 F1 | 	sub	objptr, ##51236
181dc     F2 FA 01 F6 | 	mov	result1, objptr
181e0     00 10 03 FF 
181e4     00 FA 45 F5 | 	or	result1, ##102760448
181e8     64 00 00 FF 
181ec     88 E4 05 F1 | 	add	objptr, ##51336
181f0     F2 FA 61 FC | 	wrlong	result1, objptr
181f4     64 00 00 FF 
181f8     88 E4 85 F1 | 	sub	objptr, ##51336
181fc     F2 FA 01 F6 | 	mov	result1, objptr
18200     00 18 03 FF 
18204     00 FA 45 F5 | 	or	result1, ##103809024
18208     64 00 00 FF 
1820c     90 E4 05 F1 | 	add	objptr, ##51344
18210     F2 FA 61 FC | 	wrlong	result1, objptr
18214     64 00 00 FF 
18218     90 E4 85 F1 | 	sub	objptr, ##51344
1821c     F2 FA 01 F6 | 	mov	result1, objptr
18220     00 20 03 FF 
18224     00 FA 45 F5 | 	or	result1, ##104857600
18228     64 00 00 FF 
1822c     84 E4 05 F1 | 	add	objptr, ##51332
18230     F2 FA 61 FC | 	wrlong	result1, objptr
18234     64 00 00 FF 
18238     84 E4 85 F1 | 	sub	objptr, ##51332
1823c     F2 FA 01 F6 | 	mov	result1, objptr
18240     00 28 03 FF 
18244     00 FA 45 F5 | 	or	result1, ##105906176
18248     64 00 00 FF 
1824c     80 E4 05 F1 | 	add	objptr, ##51328
18250     F2 FA 61 FC | 	wrlong	result1, objptr
18254     64 00 00 FF 
18258     80 E4 85 F1 | 	sub	objptr, ##51328
1825c     F2 FA 01 F6 | 	mov	result1, objptr
18260     00 30 03 FF 
18264     00 FA 45 F5 | 	or	result1, ##106954752
18268     64 00 00 FF 
1826c     7C E4 05 F1 | 	add	objptr, ##51324
18270     F2 FA 61 FC | 	wrlong	result1, objptr
18274     64 00 00 FF 
18278     7C E4 85 F1 | 	sub	objptr, ##51324
1827c     F2 FA 01 F6 | 	mov	result1, objptr
18280     00 38 03 FF 
18284     00 FA 45 F5 | 	or	result1, ##108003328
18288     64 00 00 FF 
1828c     8C E4 05 F1 | 	add	objptr, ##51340
18290     F2 FA 61 FC | 	wrlong	result1, objptr
18294     64 00 00 FF 
18298     8C E4 85 F1 | 	sub	objptr, ##51340
1829c     F2 FA 01 F6 | 	mov	result1, objptr
182a0     00 40 03 FF 
182a4     00 FA 45 F5 | 	or	result1, ##109051904
182a8     64 00 00 FF 
182ac     94 E4 05 F1 | 	add	objptr, ##51348
182b0     F2 FA 61 FC | 	wrlong	result1, objptr
182b4     64 00 00 FF 
182b8     94 E4 85 F1 | 	sub	objptr, ##51348
182bc     F2 FA 01 F6 | 	mov	result1, objptr
182c0     00 48 03 FF 
182c4     00 FA 45 F5 | 	or	result1, ##110100480
182c8     64 00 00 FF 
182cc     98 E4 05 F1 | 	add	objptr, ##51352
182d0     F2 FA 61 FC | 	wrlong	result1, objptr
182d4     64 00 00 FF 
182d8     98 E4 85 F1 | 	sub	objptr, ##51352
182dc     F2 FA 01 F6 | 	mov	result1, objptr
182e0     00 50 03 FF 
182e4     00 FA 45 F5 | 	or	result1, ##111149056
182e8     64 00 00 FF 
182ec     9C E4 05 F1 | 	add	objptr, ##51356
182f0     F2 FA 61 FC | 	wrlong	result1, objptr
182f4     64 00 00 FF 
182f8     9C E4 85 F1 | 	sub	objptr, ##51356
182fc     F2 FA 01 F6 | 	mov	result1, objptr
18300     00 58 03 FF 
18304     00 FA 45 F5 | 	or	result1, ##112197632
18308     64 00 00 FF 
1830c     A4 E4 05 F1 | 	add	objptr, ##51364
18310     F2 FA 61 FC | 	wrlong	result1, objptr
18314     64 00 00 FF 
18318     A4 E4 85 F1 | 	sub	objptr, ##51364
1831c     F2 FA 01 F6 | 	mov	result1, objptr
18320     00 60 03 FF 
18324     00 FA 45 F5 | 	or	result1, ##113246208
18328     64 00 00 FF 
1832c     A8 E4 05 F1 | 	add	objptr, ##51368
18330     F2 FA 61 FC | 	wrlong	result1, objptr
18334     64 00 00 FF 
18338     A8 E4 85 F1 | 	sub	objptr, ##51368
1833c     F2 FA 01 F6 | 	mov	result1, objptr
18340     00 68 03 FF 
18344     00 FA 45 F5 | 	or	result1, ##114294784
18348     64 00 00 FF 
1834c     AC E4 05 F1 | 	add	objptr, ##51372
18350     F2 FA 61 FC | 	wrlong	result1, objptr
18354     64 00 00 FF 
18358     AC E4 85 F1 | 	sub	objptr, ##51372
1835c     F2 FA 01 F6 | 	mov	result1, objptr
18360     00 70 03 FF 
18364     00 FA 45 F5 | 	or	result1, ##115343360
18368     64 00 00 FF 
1836c     B0 E4 05 F1 | 	add	objptr, ##51376
18370     F2 FA 61 FC | 	wrlong	result1, objptr
18374     64 00 00 FF 
18378     B0 E4 85 F1 | 	sub	objptr, ##51376
1837c     F2 FA 01 F6 | 	mov	result1, objptr
18380     00 78 03 FF 
18384     00 FA 45 F5 | 	or	result1, ##116391936
18388     64 00 00 FF 
1838c     B4 E4 05 F1 | 	add	objptr, ##51380
18390     F2 FA 61 FC | 	wrlong	result1, objptr
18394     64 00 00 FF 
18398     B4 E4 85 F1 | 	sub	objptr, ##51380
1839c     F2 FA 01 F6 | 	mov	result1, objptr
183a0     58 FA 25 F4 | 	bith	result1, #88
183a4     64 00 00 FF 
183a8     B8 E4 05 F1 | 	add	objptr, ##51384
183ac     F2 FA 61 FC | 	wrlong	result1, objptr
183b0     64 00 00 FF 
183b4     B8 E4 85 F1 | 	sub	objptr, ##51384
183b8     F2 FA 01 F6 | 	mov	result1, objptr
183bc     00 88 03 FF 
183c0     00 FA 45 F5 | 	or	result1, ##118489088
183c4     64 00 00 FF 
183c8     BC E4 05 F1 | 	add	objptr, ##51388
183cc     F2 FA 61 FC | 	wrlong	result1, objptr
183d0     64 00 00 FF 
183d4     BC E4 85 F1 | 	sub	objptr, ##51388
183d8     F2 FA 01 F6 | 	mov	result1, objptr
183dc     00 90 03 FF 
183e0     00 FA 45 F5 | 	or	result1, ##119537664
183e4     64 00 00 FF 
183e8     C0 E4 05 F1 | 	add	objptr, ##51392
183ec     F2 FA 61 FC | 	wrlong	result1, objptr
183f0     64 00 00 FF 
183f4     C0 E4 85 F1 | 	sub	objptr, ##51392
183f8     F2 FA 01 F6 | 	mov	result1, objptr
183fc     00 98 03 FF 
18400     00 FA 45 F5 | 	or	result1, ##120586240
18404     64 00 00 FF 
18408     A0 E4 05 F1 | 	add	objptr, ##51360
1840c     F2 FA 61 FC | 	wrlong	result1, objptr
18410     64 00 00 FF 
18414     A0 E4 85 F1 | 	sub	objptr, ##51360
18418     F2 FA 01 F6 | 	mov	result1, objptr
1841c     00 A0 03 FF 
18420     00 FA 45 F5 | 	or	result1, ##121634816
18424     63 00 00 FF 
18428     98 E4 05 F1 | 	add	objptr, ##50840
1842c     F2 FA 61 FC | 	wrlong	result1, objptr
18430     63 00 00 FF 
18434     98 E4 85 F1 | 	sub	objptr, ##50840
18438     F2 FA 01 F6 | 	mov	result1, objptr
1843c     00 A8 03 FF 
18440     00 FA 45 F5 | 	or	result1, ##122683392
18444     64 00 00 FF 
18448     C4 E4 05 F1 | 	add	objptr, ##51396
1844c     F2 FA 61 FC | 	wrlong	result1, objptr
18450     64 00 00 FF 
18454     C4 E4 85 F1 | 	sub	objptr, ##51396
18458     F2 FA 01 F6 | 	mov	result1, objptr
1845c     00 B0 03 FF 
18460     00 FA 45 F5 | 	or	result1, ##123731968
18464     64 00 00 FF 
18468     C8 E4 05 F1 | 	add	objptr, ##51400
1846c     F2 FA 61 FC | 	wrlong	result1, objptr
18470     64 00 00 FF 
18474     C8 E4 85 F1 | 	sub	objptr, ##51400
18478                 | _init_commands_ret
18478     2D 00 64 FD | 	ret
1847c                 | 
1847c                 | ' 
1847c                 | ' ''--------------------------------Error strings -------------------------------------
1847c                 | ' sub init_audio
1847c                 | _init_audio
1847c     05 4A 05 F6 | 	mov	COUNT_, #5
18480     A8 00 A0 FD | 	call	#pushregs_
18484     00 C0 1F FF 
18488     00 1E 06 F6 | 	mov	local01, ##1065353216
1848c                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1848c     00 20 06 F6 | 	mov	local02, #0
18490                 | LR__1910
18490     10 23 02 F6 | 	mov	local03, local02
18494     01 22 66 F0 | 	shl	local03, #1
18498     0C 00 00 FF 
1849c     D8 E4 05 F1 | 	add	objptr, ##6360
184a0     F2 22 02 F1 | 	add	local03, objptr
184a4     58 7F 23 FF 
184a8     00 24 06 F6 | 	mov	local04, ##1191096320
184ac     0C 00 00 FF 
184b0     D8 E4 85 F1 | 	sub	objptr, ##6360
184b4     10 13 52 F6 | 	abs	arg01, local02 wc
184b8     1F 26 C6 C9 |  if_b	decod	local05, #31
184bc     00 26 06 36 |  if_ae	mov	local05, #0
184c0     00 77 B0 FD | 	call	#__system___float_fromuns
184c4     13 FB 61 F5 | 	xor	result1, local05
184c8     FD 12 02 F6 | 	mov	arg01, result1
184cc     87 24 20 FF 
184d0     DB 15 06 F6 | 	mov	arg02, ##1078530011
184d4     F0 7A B0 FD | 	call	#__system___float_mul
184d8     FD 12 02 F6 | 	mov	arg01, result1
184dc     00 00 22 FF 
184e0     00 14 06 F6 | 	mov	arg02, ##1140850688
184e4     E4 7C B0 FD | 	call	#__system___float_div
184e8     FD 12 02 F6 | 	mov	arg01, result1
184ec     14 84 B0 FD | 	call	#__system____builtin_sinf
184f0     FD 14 02 F6 | 	mov	arg02, result1
184f4     12 13 02 F6 | 	mov	arg01, local04
184f8     CC 7A B0 FD | 	call	#__system___float_mul
184fc     FD 12 02 F6 | 	mov	arg01, result1
18500     01 14 06 F6 | 	mov	arg02, #1
18504     88 7F B0 FD | 	call	#__system___float_tointeger
18508     11 FB 51 FC | 	wrword	result1, local03
1850c     01 20 06 F1 | 	add	local02, #1
18510     02 00 00 FF 
18514     00 20 56 F2 | 	cmps	local02, ##1024 wc
18518     74 FF 9F CD |  if_b	jmp	#LR__1910
1851c                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1851c     00 20 06 F6 | 	mov	local02, #0
18520     10 00 00 FF 
18524     D8 E4 05 F1 | 	add	objptr, ##8408
18528     97 6A 48 FB | 	callpa	#(@LR__1914-@LR__1911)>>2,fcache_load_ptr_
1852c                 | LR__1911
1852c     10 23 02 F6 | 	mov	local03, local02
18530     01 22 66 F0 | 	shl	local03, #1
18534     F2 22 02 F1 | 	add	local03, objptr
18538     10 27 02 F6 | 	mov	local05, local02
1853c     07 26 66 F0 | 	shl	local05, #7
18540     10 27 82 F1 | 	sub	local05, local02
18544     C0 FF 7F FF 
18548     00 25 06 F6 | 	mov	local04, ##-32512
1854c     13 25 02 F1 | 	add	local04, local05
18550     11 25 52 FC | 	wrword	local04, local03
18554     09 22 C6 F9 | 	decod	local03, #9
18558     10 23 02 F1 | 	add	local03, local02
1855c     01 22 66 F0 | 	shl	local03, #1
18560     F2 22 02 F1 | 	add	local03, objptr
18564     10 25 02 F6 | 	mov	local04, local02
18568     01 24 66 F0 | 	shl	local04, #1
1856c     F2 24 02 F1 | 	add	local04, objptr
18570     12 25 E2 FA | 	rdword	local04, local04
18574     0F 24 66 F7 | 	signx	local04, #15
18578     12 25 62 F6 | 	neg	local04, local04
1857c     11 25 52 FC | 	wrword	local04, local03
18580     01 20 06 F1 | 	add	local02, #1
18584     01 00 00 FF 
18588     00 20 56 F2 | 	cmps	local02, ##512 wc
1858c     9C FF 9F CD |  if_b	jmp	#LR__1911
18590                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
18590     00 20 06 F6 | 	mov	local02, #0
18594     04 00 00 FF 
18598     00 E4 05 F1 | 	add	objptr, ##2048
1859c                 | LR__1912
1859c     10 23 02 F6 | 	mov	local03, local02
185a0     01 22 66 F0 | 	shl	local03, #1
185a4     F2 22 02 F1 | 	add	local03, objptr
185a8     10 27 02 F6 | 	mov	local05, local02
185ac     06 26 66 F0 | 	shl	local05, #6
185b0     10 27 82 F1 | 	sub	local05, local02
185b4     C1 FF 7F FF 
185b8     00 24 06 F6 | 	mov	local04, ##-32256
185bc     13 25 02 F1 | 	add	local04, local05
185c0     11 25 52 FC | 	wrword	local04, local03
185c4     01 20 06 F1 | 	add	local02, #1
185c8     02 00 00 FF 
185cc     00 20 56 F2 | 	cmps	local02, ##1024 wc
185d0     C8 FF 9F CD |  if_b	jmp	#LR__1912
185d4                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
185d4     00 20 06 F6 | 	mov	local02, #0
185d8     04 00 00 FF 
185dc     00 E4 05 F1 | 	add	objptr, ##2048
185e0                 | LR__1913
185e0     10 23 02 F6 | 	mov	local03, local02
185e4     01 22 66 F0 | 	shl	local03, #1
185e8     F2 22 02 F1 | 	add	local03, objptr
185ec     40 00 80 FF 
185f0     11 51 59 FC | 	wrword	##32936, local03
185f4     01 20 06 F1 | 	add	local02, #1
185f8     80 20 56 F2 | 	cmps	local02, #128 wc
185fc     E0 FF 9F CD |  if_b	jmp	#LR__1913
18600                 | LR__1914
18600     80 20 06 F6 | 	mov	local02, #128
18604     97 68 48 FB | 	callpa	#(@LR__1920-@LR__1915)>>2,fcache_load_ptr_
18608                 | LR__1915
18608     10 23 02 F6 | 	mov	local03, local02
1860c     01 22 66 F0 | 	shl	local03, #1
18610     F2 22 02 F1 | 	add	local03, objptr
18614     3F 00 80 FF 
18618     11 B1 5A FC | 	wrword	##32600, local03
1861c     01 20 06 F1 | 	add	local02, #1
18620     02 00 00 FF 
18624     00 20 16 F2 | 	cmp	local02, ##1024 wc
18628     DC FF 9F CD |  if_b	jmp	#LR__1915
1862c                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1862c     00 20 06 F6 | 	mov	local02, #0
18630     04 00 00 FF 
18634     00 E4 05 F1 | 	add	objptr, ##2048
18638                 | LR__1916
18638     10 23 02 F6 | 	mov	local03, local02
1863c     01 22 66 F0 | 	shl	local03, #1
18640     F2 22 02 F1 | 	add	local03, objptr
18644     40 00 80 FF 
18648     11 51 59 FC | 	wrword	##32936, local03
1864c     01 20 06 F1 | 	add	local02, #1
18650     01 00 00 FF 
18654     00 20 56 F2 | 	cmps	local02, ##512 wc
18658     DC FF 9F CD |  if_b	jmp	#LR__1916
1865c     09 20 C6 F9 | 	decod	local02, #9
18660                 | LR__1917
18660     10 23 02 F6 | 	mov	local03, local02
18664     01 22 66 F0 | 	shl	local03, #1
18668     F2 22 02 F1 | 	add	local03, objptr
1866c     3F 00 80 FF 
18670     11 B1 5A FC | 	wrword	##32600, local03
18674     01 20 06 F1 | 	add	local02, #1
18678     02 00 00 FF 
1867c     00 20 16 F2 | 	cmp	local02, ##1024 wc
18680     DC FF 9F CD |  if_b	jmp	#LR__1917
18684                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
18684     00 20 06 F6 | 	mov	local02, #0
18688     04 00 00 FF 
1868c     00 E4 05 F1 | 	add	objptr, ##2048
18690                 | LR__1918
18690     10 23 02 F6 | 	mov	local03, local02
18694     01 22 66 F0 | 	shl	local03, #1
18698     F2 22 02 F1 | 	add	local03, objptr
1869c     40 00 80 FF 
186a0     11 51 59 FC | 	wrword	##32936, local03
186a4     01 20 06 F1 | 	add	local02, #1
186a8     00 21 56 F2 | 	cmps	local02, #256 wc
186ac     E0 FF 9F CD |  if_b	jmp	#LR__1918
186b0     00 21 06 F6 | 	mov	local02, #256
186b4                 | LR__1919
186b4     10 23 02 F6 | 	mov	local03, local02
186b8     01 22 66 F0 | 	shl	local03, #1
186bc     F2 22 02 F1 | 	add	local03, objptr
186c0     3F 00 80 FF 
186c4     11 B1 5A FC | 	wrword	##32600, local03
186c8     01 20 06 F1 | 	add	local02, #1
186cc     02 00 00 FF 
186d0     00 20 16 F2 | 	cmp	local02, ##1024 wc
186d4     DC FF 9F CD |  if_b	jmp	#LR__1919
186d8                 | LR__1920
186d8                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
186d8     00 20 06 F6 | 	mov	local02, #0
186dc     04 00 00 FF 
186e0     00 E4 05 F1 | 	add	objptr, ##2048
186e4     14 00 00 FF 
186e8     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
186ec     97 1C 48 FB | 	callpa	#(@LR__1922-@LR__1921)>>2,fcache_load_ptr_
186f0                 | LR__1921
186f0     10 23 02 F6 | 	mov	local03, local02
186f4     01 22 66 F0 | 	shl	local03, #1
186f8     F2 22 02 F1 | 	add	local03, objptr
186fc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
18700     10 12 06 F1 | 	add	arg01, #16
18704     10 FB 01 F6 | 	mov	result1, local02
18708     01 FA 65 F0 | 	shl	result1, #1
1870c     FD 12 02 F1 | 	add	arg01, result1
18710     09 FB E1 FA | 	rdword	result1, arg01
18714     11 FB 51 FC | 	wrword	result1, local03
18718     01 20 06 F1 | 	add	local02, #1
1871c     02 00 00 FF 
18720     00 20 56 F2 | 	cmps	local02, ##1024 wc
18724     C8 FF 9F CD |  if_b	jmp	#LR__1921
18728                 | LR__1922
18728                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
18728     00 20 06 F6 | 	mov	local02, #0
1872c     04 00 00 FF 
18730     00 E4 05 F1 | 	add	objptr, ##2048
18734     04 00 00 FF 
18738     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
1873c     97 1C 48 FB | 	callpa	#(@LR__1924-@LR__1923)>>2,fcache_load_ptr_
18740                 | LR__1923
18740     10 23 02 F6 | 	mov	local03, local02
18744     01 22 66 F0 | 	shl	local03, #1
18748     F2 22 02 F1 | 	add	local03, objptr
1874c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
18750     10 12 06 F1 | 	add	arg01, #16
18754     10 FB 01 F6 | 	mov	result1, local02
18758     01 FA 65 F0 | 	shl	result1, #1
1875c     FD 12 02 F1 | 	add	arg01, result1
18760     09 FB E1 FA | 	rdword	result1, arg01
18764     11 FB 51 FC | 	wrword	result1, local03
18768     01 20 06 F1 | 	add	local02, #1
1876c     02 00 00 FF 
18770     00 20 56 F2 | 	cmps	local02, ##1024 wc
18774     C8 FF 9F CD |  if_b	jmp	#LR__1923
18778                 | LR__1924
18778     10 00 00 FF 
1877c     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
18780                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
18780     00 20 06 F6 | 	mov	local02, #0
18784     04 00 00 FF 
18788     00 E4 05 F1 | 	add	objptr, ##2048
1878c     97 18 48 FB | 	callpa	#(@LR__1926-@LR__1925)>>2,fcache_load_ptr_
18790                 | LR__1925
18790     10 23 02 F6 | 	mov	local03, local02
18794     01 22 66 F0 | 	shl	local03, #1
18798     F2 22 02 F1 | 	add	local03, objptr
1879c     10 27 02 F6 | 	mov	local05, local02
187a0     08 26 66 F0 | 	shl	local05, #8
187a4     7F 00 00 FF 
187a8     00 25 06 F6 | 	mov	local04, ##65280
187ac     13 25 82 F1 | 	sub	local04, local05
187b0     11 25 52 FC | 	wrword	local04, local03
187b4     01 20 06 F1 | 	add	local02, #1
187b8     00 21 56 F2 | 	cmps	local02, #256 wc
187bc     D0 FF 9F CD |  if_b	jmp	#LR__1925
187c0                 | LR__1926
187c0     2C 00 00 FF 
187c4     D8 E4 85 F1 | 	sub	objptr, ##22744
187c8                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
187c8     00 20 06 F6 | 	mov	local02, #0
187cc                 | LR__1927
187cc     10 23 02 F6 | 	mov	local03, local02
187d0     01 22 66 F0 | 	shl	local03, #1
187d4     2D 00 00 FF 
187d8     D8 E4 05 F1 | 	add	objptr, ##23256
187dc     F2 22 02 F1 | 	add	local03, objptr
187e0     80 BF 23 FF 
187e4     00 12 06 F6 | 	mov	arg01, ##1199505408
187e8     0F 15 02 F6 | 	mov	arg02, local01
187ec     2D 00 00 FF 
187f0     D8 E4 85 F1 | 	sub	objptr, ##23256
187f4     D0 77 B0 FD | 	call	#__system___float_mul
187f8     FD 12 02 F6 | 	mov	arg01, result1
187fc     01 14 06 F6 | 	mov	arg02, #1
18800     8C 7C B0 FD | 	call	#__system___float_tointeger
18804     11 FB 51 FC | 	wrword	result1, local03
18808     0F 13 02 F6 | 	mov	arg01, local01
1880c     CC BC 1F FF 
18810     9A 15 06 F6 | 	mov	arg02, ##1064933786
18814     B0 77 B0 FD | 	call	#__system___float_mul
18818     FD 1E 02 F6 | 	mov	local01, result1
1881c     01 20 06 F1 | 	add	local02, #1
18820     00 21 56 F2 | 	cmps	local02, #256 wc
18824     A4 FF 9F CD |  if_b	jmp	#LR__1927
18828     2E 00 00 FF 
1882c     D6 E4 05 F1 | 	add	objptr, ##23766
18830     F2 00 58 FC | 	wrword	#0, objptr
18834                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
18834     00 20 06 F6 | 	mov	local02, #0
18838     02 E4 05 F1 | 	add	objptr, #2
1883c     97 10 48 FB | 	callpa	#(@LR__1929-@LR__1928)>>2,fcache_load_ptr_
18840                 | LR__1928
18840     10 23 02 F6 | 	mov	local03, local02
18844     01 22 66 F0 | 	shl	local03, #1
18848     F2 22 02 F1 | 	add	local03, objptr
1884c     7F 00 80 FF 
18850     11 01 5A FC | 	wrword	##65280, local03
18854     01 20 06 F1 | 	add	local02, #1
18858     FF 20 56 F2 | 	cmps	local02, #255 wc
1885c     E0 FF 9F CD |  if_b	jmp	#LR__1928
18860                 | LR__1929
18860     FE E5 05 F1 | 	add	objptr, #510
18864     F2 00 58 FC | 	wrword	#0, objptr
18868                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
18868     00 20 06 F6 | 	mov	local02, #0
1886c     02 E4 05 F1 | 	add	objptr, #2
18870     97 52 48 FB | 	callpa	#(@LR__1934-@LR__1930)>>2,fcache_load_ptr_
18874                 | LR__1930
18874     10 23 02 F6 | 	mov	local03, local02
18878     01 22 66 F0 | 	shl	local03, #1
1887c     F2 22 02 F1 | 	add	local03, objptr
18880     10 25 02 F6 | 	mov	local04, local02
18884     0C 24 66 F0 | 	shl	local04, #12
18888     11 25 52 FC | 	wrword	local04, local03
1888c     01 20 06 F1 | 	add	local02, #1
18890     10 20 56 F2 | 	cmps	local02, #16 wc
18894     DC FF 9F CD |  if_b	jmp	#LR__1930
18898                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
18898     10 20 06 F6 | 	mov	local02, #16
1889c                 | LR__1931
1889c     10 23 02 F6 | 	mov	local03, local02
188a0     01 22 66 F0 | 	shl	local03, #1
188a4     F2 22 02 F1 | 	add	local03, objptr
188a8     7F 00 80 FF 
188ac     11 01 5A FC | 	wrword	##65280, local03
188b0     01 20 06 F1 | 	add	local02, #1
188b4     F0 20 16 F2 | 	cmp	local02, #240 wc
188b8     E0 FF 9F CD |  if_b	jmp	#LR__1931
188bc                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
188bc     F0 20 06 F6 | 	mov	local02, #240
188c0                 | LR__1932
188c0     10 23 02 F6 | 	mov	local03, local02
188c4     01 22 66 F0 | 	shl	local03, #1
188c8     F2 22 02 F1 | 	add	local03, objptr
188cc     FF 26 06 F6 | 	mov	local05, #255
188d0     10 27 82 F1 | 	sub	local05, local02
188d4     0C 26 66 F0 | 	shl	local05, #12
188d8     11 27 52 FC | 	wrword	local05, local03
188dc     01 20 06 F1 | 	add	local02, #1
188e0     00 21 16 F2 | 	cmp	local02, #256 wc
188e4     D8 FF 9F CD |  if_b	jmp	#LR__1932
188e8                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
188e8     00 20 06 F6 | 	mov	local02, #0
188ec     01 00 00 FF 
188f0     00 E4 05 F1 | 	add	objptr, ##512
188f4                 | LR__1933
188f4     10 23 02 F6 | 	mov	local03, local02
188f8     01 22 66 F0 | 	shl	local03, #1
188fc     F2 22 02 F1 | 	add	local03, objptr
18900     10 25 02 F6 | 	mov	local04, local02
18904     08 24 66 F0 | 	shl	local04, #8
18908     11 25 52 FC | 	wrword	local04, local03
1890c     01 20 06 F1 | 	add	local02, #1
18910     00 21 56 F2 | 	cmps	local02, #256 wc
18914     DC FF 9F CD |  if_b	jmp	#LR__1933
18918                 | LR__1934
18918     FE E5 05 F1 | 	add	objptr, #510
1891c     F2 00 58 FC | 	wrword	#0, objptr
18920                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
18920     00 20 06 F6 | 	mov	local02, #0
18924     02 E4 05 F1 | 	add	objptr, #2
18928     97 6A 48 FB | 	callpa	#(@LR__1939-@LR__1935)>>2,fcache_load_ptr_
1892c                 | LR__1935
1892c     10 23 02 F6 | 	mov	local03, local02
18930     01 22 66 F0 | 	shl	local03, #1
18934     F2 22 02 F1 | 	add	local03, objptr
18938     10 25 02 F6 | 	mov	local04, local02
1893c     04 24 66 F0 | 	shl	local04, #4
18940     10 25 02 F1 | 	add	local04, local02
18944     04 24 66 F0 | 	shl	local04, #4
18948     11 25 52 FC | 	wrword	local04, local03
1894c     01 20 06 F1 | 	add	local02, #1
18950     F0 20 56 F2 | 	cmps	local02, #240 wc
18954     D4 FF 9F CD |  if_b	jmp	#LR__1935
18958     F0 20 06 F6 | 	mov	local02, #240
1895c                 | LR__1936
1895c     10 23 02 F6 | 	mov	local03, local02
18960     01 22 66 F0 | 	shl	local03, #1
18964     F2 22 02 F1 | 	add	local03, objptr
18968     FF 26 06 F6 | 	mov	local05, #255
1896c     10 27 82 F1 | 	sub	local05, local02
18970     0C 26 66 F0 | 	shl	local05, #12
18974     11 27 52 FC | 	wrword	local05, local03
18978     01 20 06 F1 | 	add	local02, #1
1897c     00 21 16 F2 | 	cmp	local02, #256 wc
18980     D8 FF 9F CD |  if_b	jmp	#LR__1936
18984                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
18984     00 20 06 F6 | 	mov	local02, #0
18988     01 00 00 FF 
1898c     00 E4 05 F1 | 	add	objptr, ##512
18990                 | LR__1937
18990     10 23 02 F6 | 	mov	local03, local02
18994     01 22 66 F0 | 	shl	local03, #1
18998     F2 22 02 F1 | 	add	local03, objptr
1899c     10 25 02 F6 | 	mov	local04, local02
189a0     09 24 66 F0 | 	shl	local04, #9
189a4     11 25 52 FC | 	wrword	local04, local03
189a8     FF 22 06 F6 | 	mov	local03, #255
189ac     10 23 82 F1 | 	sub	local03, local02
189b0     01 22 66 F0 | 	shl	local03, #1
189b4     F2 22 02 F1 | 	add	local03, objptr
189b8     10 25 02 F6 | 	mov	local04, local02
189bc     09 24 66 F0 | 	shl	local04, #9
189c0     11 25 52 FC | 	wrword	local04, local03
189c4     01 20 06 F1 | 	add	local02, #1
189c8     80 20 56 F2 | 	cmps	local02, #128 wc
189cc     C0 FF 9F CD |  if_b	jmp	#LR__1937
189d0                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
189d0     00 20 06 F6 | 	mov	local02, #0
189d4     01 00 00 FF 
189d8     00 E4 05 F1 | 	add	objptr, ##512
189dc                 | LR__1938
189dc     10 23 02 F6 | 	mov	local03, local02
189e0     01 22 66 F0 | 	shl	local03, #1
189e4     F2 22 02 F1 | 	add	local03, objptr
189e8     10 25 02 F6 | 	mov	local04, local02
189ec     0D 24 66 F0 | 	shl	local04, #13
189f0     11 25 52 FC | 	wrword	local04, local03
189f4     01 20 06 F1 | 	add	local02, #1
189f8     08 20 56 F2 | 	cmps	local02, #8 wc
189fc     DC FF 9F CD |  if_b	jmp	#LR__1938
18a00                 | LR__1939
18a00                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
18a00     08 20 06 F6 | 	mov	local02, #8
18a04     97 42 48 FB | 	callpa	#(@LR__1943-@LR__1940)>>2,fcache_load_ptr_
18a08                 | LR__1940
18a08     10 23 02 F6 | 	mov	local03, local02
18a0c     01 22 66 F0 | 	shl	local03, #1
18a10     F2 22 02 F1 | 	add	local03, objptr
18a14     10 1F 02 F6 | 	mov	local01, local02
18a18     08 1E 86 F1 | 	sub	local01, #8
18a1c     0B 1E 66 F0 | 	shl	local01, #11
18a20     7F 00 00 FF 
18a24     00 25 06 F6 | 	mov	local04, ##65280
18a28     0F 25 82 F1 | 	sub	local04, local01
18a2c     11 25 52 FC | 	wrword	local04, local03
18a30     01 20 06 F1 | 	add	local02, #1
18a34     18 20 16 F2 | 	cmp	local02, #24 wc
18a38     CC FF 9F CD |  if_b	jmp	#LR__1940
18a3c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
18a3c     18 20 06 F6 | 	mov	local02, #24
18a40                 | LR__1941
18a40     10 23 02 F6 | 	mov	local03, local02
18a44     01 22 66 F0 | 	shl	local03, #1
18a48     F2 22 02 F1 | 	add	local03, objptr
18a4c     40 00 80 FF 
18a50     11 01 58 FC | 	wrword	##32768, local03
18a54     01 20 06 F1 | 	add	local02, #1
18a58     81 20 16 F2 | 	cmp	local02, #129 wc
18a5c     E0 FF 9F CD |  if_b	jmp	#LR__1941
18a60                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
18a60     81 20 06 F6 | 	mov	local02, #129
18a64                 | LR__1942
18a64     10 23 02 F6 | 	mov	local03, local02
18a68     01 22 66 F0 | 	shl	local03, #1
18a6c     F2 22 02 F1 | 	add	local03, objptr
18a70     FF 26 06 F6 | 	mov	local05, #255
18a74     10 27 82 F1 | 	sub	local05, local02
18a78     08 26 66 F0 | 	shl	local05, #8
18a7c     11 27 52 FC | 	wrword	local05, local03
18a80     01 20 06 F1 | 	add	local02, #1
18a84     00 21 16 F2 | 	cmp	local02, #256 wc
18a88     D8 FF 9F CD |  if_b	jmp	#LR__1942
18a8c                 | LR__1943
18a8c     47 00 00 FF 
18a90     BA E5 05 F1 | 	add	objptr, ##36794
18a94     F2 00 59 FC | 	wrword	#128, objptr
18a98     7B 00 00 FF 
18a9c     92 E4 85 F1 | 	sub	objptr, ##63122
18aa0                 | ' for i=0 to 7
18aa0     00 20 06 F6 | 	mov	local02, #0
18aa4     97 8E 48 FB | 	callpa	#(@LR__1945-@LR__1944)>>2,fcache_load_ptr_
18aa8                 | LR__1944
18aa8     10 23 02 F6 | 	mov	local03, local02
18aac     01 22 66 F0 | 	shl	local03, #1
18ab0     10 23 02 F1 | 	add	local03, local02
18ab4     03 22 66 F0 | 	shl	local03, #3
18ab8     34 00 00 FF 
18abc     38 E5 05 F1 | 	add	objptr, ##26936
18ac0     F2 22 02 F1 | 	add	local03, objptr
18ac4     00 EE A1 FF 
18ac8     11 01 68 FC | 	wrlong	##1138491392, local03
18acc     10 23 02 F6 | 	mov	local03, local02
18ad0     01 22 66 F0 | 	shl	local03, #1
18ad4     10 23 02 F1 | 	add	local03, local02
18ad8     03 22 66 F0 | 	shl	local03, #3
18adc     F2 22 02 F1 | 	add	local03, objptr
18ae0     04 22 06 F1 | 	add	local03, #4
18ae4     11 21 42 FC | 	wrbyte	local02, local03
18ae8     10 23 02 F6 | 	mov	local03, local02
18aec     01 22 66 F0 | 	shl	local03, #1
18af0     10 23 02 F1 | 	add	local03, local02
18af4     03 22 66 F0 | 	shl	local03, #3
18af8     F2 22 02 F1 | 	add	local03, objptr
18afc     05 22 06 F1 | 	add	local03, #5
18b00     11 21 42 FC | 	wrbyte	local02, local03
18b04     10 23 02 F6 | 	mov	local03, local02
18b08     01 22 66 F0 | 	shl	local03, #1
18b0c     10 23 02 F1 | 	add	local03, local02
18b10     03 22 66 F0 | 	shl	local03, #3
18b14     F2 22 02 F1 | 	add	local03, objptr
18b18     06 22 06 F1 | 	add	local03, #6
18b1c     11 01 58 FC | 	wrword	#0, local03
18b20     10 23 02 F6 | 	mov	local03, local02
18b24     01 22 66 F0 | 	shl	local03, #1
18b28     10 23 02 F1 | 	add	local03, local02
18b2c     03 22 66 F0 | 	shl	local03, #3
18b30     F2 22 02 F1 | 	add	local03, objptr
18b34     08 22 06 F1 | 	add	local03, #8
18b38     00 C0 9F FF 
18b3c     11 01 68 FC | 	wrlong	##1065353216, local03
18b40     10 23 02 F6 | 	mov	local03, local02
18b44     01 22 66 F0 | 	shl	local03, #1
18b48     10 23 02 F1 | 	add	local03, local02
18b4c     03 22 66 F0 | 	shl	local03, #3
18b50     F2 22 02 F1 | 	add	local03, objptr
18b54     0C 22 06 F1 | 	add	local03, #12
18b58     00 40 A0 FF 
18b5c     11 01 68 FC | 	wrlong	##1082130432, local03
18b60     10 23 02 F6 | 	mov	local03, local02
18b64     01 22 66 F0 | 	shl	local03, #1
18b68     10 23 02 F1 | 	add	local03, local02
18b6c     03 22 66 F0 | 	shl	local03, #3
18b70     F2 22 02 F1 | 	add	local03, objptr
18b74     10 22 06 F1 | 	add	local03, #16
18b78     11 01 68 FC | 	wrlong	#0, local03
18b7c     10 23 02 F6 | 	mov	local03, local02
18b80     01 22 66 F0 | 	shl	local03, #1
18b84     10 23 02 F1 | 	add	local03, local02
18b88     03 22 66 F0 | 	shl	local03, #3
18b8c     F2 22 02 F1 | 	add	local03, objptr
18b90     14 22 06 F1 | 	add	local03, #20
18b94     11 FF 59 FC | 	wrword	#255, local03
18b98     10 23 02 F6 | 	mov	local03, local02
18b9c     01 22 66 F0 | 	shl	local03, #1
18ba0     46 00 00 FF 
18ba4     4C E5 05 F1 | 	add	objptr, ##36172
18ba8     F2 22 02 F1 | 	add	local03, objptr
18bac     11 FF 59 FC | 	wrword	#255, local03
18bb0     01 20 06 F1 | 	add	local02, #1
18bb4     08 20 56 F2 | 	cmps	local02, #8 wc
18bb8     7B 00 00 FF 
18bbc     84 E4 85 F1 | 	sub	objptr, ##63108
18bc0     E4 FE 9F CD |  if_b	jmp	#LR__1944
18bc4                 | LR__1945
18bc4     00 6E 20 FF 
18bc8     00 1E 06 F6 | 	mov	local01, ##1088159744
18bcc                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
18bcc     03 26 06 F6 | 	mov	local05, #3
18bd0                 | LR__1946
18bd0     0F 13 02 F6 | 	mov	arg01, local01
18bd4     CE C3 1F FF 
18bd8     7D 14 06 F6 | 	mov	arg02, ##1065852029
18bdc     E8 73 B0 FD | 	call	#__system___float_mul
18be0     FD 1E 02 F6 | 	mov	local01, result1
18be4     FA 27 6E FB | 	djnz	local05, #LR__1946
18be8     00 20 06 F6 | 	mov	local02, #0
18bec                 | LR__1947
18bec     10 27 02 F6 | 	mov	local05, local02
18bf0     02 26 66 F0 | 	shl	local05, #2
18bf4     34 00 00 FF 
18bf8     D8 E4 05 F1 | 	add	objptr, ##26840
18bfc     F2 26 02 F1 | 	add	local05, objptr
18c00     13 1F 62 FC | 	wrlong	local01, local05
18c04     0F 13 02 F6 | 	mov	arg01, local01
18c08     CE C3 1F FF 
18c0c     7D 14 06 F6 | 	mov	arg02, ##1065852029
18c10     34 00 00 FF 
18c14     D8 E4 85 F1 | 	sub	objptr, ##26840
18c18     AC 73 B0 FD | 	call	#__system___float_mul
18c1c     FD 1E 02 F6 | 	mov	local01, result1
18c20     01 20 06 F1 | 	add	local02, #1
18c24     0C 20 56 F2 | 	cmps	local02, #12 wc
18c28     C0 FF 9F CD |  if_b	jmp	#LR__1947
18c2c     7B 00 00 FF 
18c30     92 E4 05 F1 | 	add	objptr, ##63122
18c34     F2 00 59 FC | 	wrword	#128, objptr
18c38     02 E4 85 F1 | 	sub	objptr, #2
18c3c     F2 00 59 FC | 	wrword	#128, objptr
18c40     7B 00 00 FF 
18c44     90 E4 85 F1 | 	sub	objptr, ##63120
18c48     A7 F0 03 F6 | 	mov	ptra, fp
18c4c     B2 00 A0 FD | 	call	#popregs_
18c50                 | _init_audio_ret
18c50     2D 00 64 FD | 	ret
18c54                 | 
18c54                 | ' 
18c54                 | ' 
18c54                 | ' function getnoteval(token) as single
18c54                 | _getnoteval
18c54     02 4A 05 F6 | 	mov	COUNT_, #2
18c58     A8 00 A0 FD | 	call	#pushregs_
18c5c     01 00 00 FF 
18c60     00 13 86 F1 | 	sub	arg01, ##768
18c64     09 15 52 F6 | 	abs	arg02, arg01 wc
18c68     0C 14 16 FD | 	qdiv	arg02, #12
18c6c     34 00 00 FF 
18c70     D8 E4 05 F1 | 	add	objptr, ##26840
18c74     19 14 62 FD | 	getqy	arg02
18c78     0A 15 82 F6 | 	negc	arg02, arg02
18c7c     02 14 66 F0 | 	shl	arg02, #2
18c80     F2 14 02 F1 | 	add	arg02, objptr
18c84     0A 1F 02 FB | 	rdlong	local01, arg02
18c88     09 15 52 F6 | 	abs	arg02, arg01 wc
18c8c     0C 14 16 FD | 	qdiv	arg02, #12
18c90     34 00 00 FF 
18c94     D8 E4 85 F1 | 	sub	objptr, ##26840
18c98     01 12 06 F6 | 	mov	arg01, #1
18c9c                 | ' noteexp=1+(note/12) 
18c9c                 | ' return (2.0^noteexp)*notebase
18c9c     18 14 62 FD | 	getqx	arg02
18ca0     0A 13 82 F3 | 	sumc	arg01, arg02
18ca4     09 13 52 F6 | 	abs	arg01, arg01 wc
18ca8     1F 20 C6 C9 |  if_b	decod	local02, #31
18cac     00 20 06 36 |  if_ae	mov	local02, #0
18cb0     10 6F B0 FD | 	call	#__system___float_fromuns
18cb4     10 FB 61 F5 | 	xor	result1, local02
18cb8     FD 14 02 F6 | 	mov	arg02, result1
18cbc     1E 12 C6 F9 | 	decod	arg01, #30
18cc0     E8 81 B0 FD | 	call	#__system____builtin_powf
18cc4     FD 12 02 F6 | 	mov	arg01, result1
18cc8     0F 15 02 F6 | 	mov	arg02, local01
18ccc     F8 72 B0 FD | 	call	#__system___float_mul
18cd0     A7 F0 03 F6 | 	mov	ptra, fp
18cd4     B2 00 A0 FD | 	call	#popregs_
18cd8                 | _getnoteval_ret
18cd8     2D 00 64 FD | 	ret
18cdc                 | 
18cdc                 | ' 
18cdc                 | ' 
18cdc                 | ' 
18cdc                 | ' sub init_error_strings
18cdc                 | _init_error_strings
18cdc     68 01 00 FF 
18ce0     59 01 06 F6 | 	mov	_var01, ##@LR__5011
18ce4     65 00 00 FF 
18ce8     6C E4 05 F1 | 	add	objptr, ##51820
18cec     F2 00 62 FC | 	wrlong	_var01, objptr
18cf0     68 01 00 FF 
18cf4     5A 01 06 F6 | 	mov	_var01, ##@LR__5012
18cf8     04 E4 05 F1 | 	add	objptr, #4
18cfc     F2 00 62 FC | 	wrlong	_var01, objptr
18d00     68 01 00 FF 
18d04     7F 01 06 F6 | 	mov	_var01, ##@LR__5013
18d08     04 E4 05 F1 | 	add	objptr, #4
18d0c     F2 00 62 FC | 	wrlong	_var01, objptr
18d10     68 01 00 FF 
18d14     A0 01 06 F6 | 	mov	_var01, ##@LR__5014
18d18     04 E4 05 F1 | 	add	objptr, #4
18d1c     F2 00 62 FC | 	wrlong	_var01, objptr
18d20     68 01 00 FF 
18d24     BA 01 06 F6 | 	mov	_var01, ##@LR__5015
18d28     04 E4 05 F1 | 	add	objptr, #4
18d2c     F2 00 62 FC | 	wrlong	_var01, objptr
18d30     68 01 00 FF 
18d34     D6 01 06 F6 | 	mov	_var01, ##@LR__5016
18d38     04 E4 05 F1 | 	add	objptr, #4
18d3c     F2 00 62 FC | 	wrlong	_var01, objptr
18d40     68 01 00 FF 
18d44     F8 01 06 F6 | 	mov	_var01, ##@LR__5017
18d48     04 E4 05 F1 | 	add	objptr, #4
18d4c     F2 00 62 FC | 	wrlong	_var01, objptr
18d50     69 01 00 FF 
18d54     26 00 06 F6 | 	mov	_var01, ##@LR__5018
18d58     04 E4 05 F1 | 	add	objptr, #4
18d5c     F2 00 62 FC | 	wrlong	_var01, objptr
18d60     69 01 00 FF 
18d64     51 00 06 F6 | 	mov	_var01, ##@LR__5019
18d68     04 E4 05 F1 | 	add	objptr, #4
18d6c     F2 00 62 FC | 	wrlong	_var01, objptr
18d70     69 01 00 FF 
18d74     6A 00 06 F6 | 	mov	_var01, ##@LR__5020
18d78     04 E4 05 F1 | 	add	objptr, #4
18d7c     F2 00 62 FC | 	wrlong	_var01, objptr
18d80     69 01 00 FF 
18d84     8B 00 06 F6 | 	mov	_var01, ##@LR__5021
18d88     04 E4 05 F1 | 	add	objptr, #4
18d8c     F2 00 62 FC | 	wrlong	_var01, objptr
18d90     69 01 00 FF 
18d94     A2 00 06 F6 | 	mov	_var01, ##@LR__5022
18d98     04 E4 05 F1 | 	add	objptr, #4
18d9c     F2 00 62 FC | 	wrlong	_var01, objptr
18da0     69 01 00 FF 
18da4     C0 00 06 F6 | 	mov	_var01, ##@LR__5023
18da8     04 E4 05 F1 | 	add	objptr, #4
18dac     F2 00 62 FC | 	wrlong	_var01, objptr
18db0     69 01 00 FF 
18db4     E4 00 06 F6 | 	mov	_var01, ##@LR__5024
18db8     04 E4 05 F1 | 	add	objptr, #4
18dbc     F2 00 62 FC | 	wrlong	_var01, objptr
18dc0     69 01 00 FF 
18dc4     0B 01 06 F6 | 	mov	_var01, ##@LR__5025
18dc8     04 E4 05 F1 | 	add	objptr, #4
18dcc     F2 00 62 FC | 	wrlong	_var01, objptr
18dd0     69 01 00 FF 
18dd4     27 01 06 F6 | 	mov	_var01, ##@LR__5026
18dd8     04 E4 05 F1 | 	add	objptr, #4
18ddc     F2 00 62 FC | 	wrlong	_var01, objptr
18de0     69 01 00 FF 
18de4     38 01 06 F6 | 	mov	_var01, ##@LR__5027
18de8     04 E4 05 F1 | 	add	objptr, #4
18dec     F2 00 62 FC | 	wrlong	_var01, objptr
18df0     69 01 00 FF 
18df4     48 01 06 F6 | 	mov	_var01, ##@LR__5028
18df8     04 E4 05 F1 | 	add	objptr, #4
18dfc     F2 00 62 FC | 	wrlong	_var01, objptr
18e00     69 01 00 FF 
18e04     63 01 06 F6 | 	mov	_var01, ##@LR__5029
18e08     04 E4 05 F1 | 	add	objptr, #4
18e0c     F2 00 62 FC | 	wrlong	_var01, objptr
18e10     69 01 00 FF 
18e14     75 01 06 F6 | 	mov	_var01, ##@LR__5030
18e18     04 E4 05 F1 | 	add	objptr, #4
18e1c     F2 00 62 FC | 	wrlong	_var01, objptr
18e20     69 01 00 FF 
18e24     8D 01 06 F6 | 	mov	_var01, ##@LR__5031
18e28     04 E4 05 F1 | 	add	objptr, #4
18e2c     F2 00 62 FC | 	wrlong	_var01, objptr
18e30     69 01 00 FF 
18e34     A1 01 06 F6 | 	mov	_var01, ##@LR__5032
18e38     04 E4 05 F1 | 	add	objptr, #4
18e3c     F2 00 62 FC | 	wrlong	_var01, objptr
18e40     69 01 00 FF 
18e44     B1 01 06 F6 | 	mov	_var01, ##@LR__5033
18e48     04 E4 05 F1 | 	add	objptr, #4
18e4c     F2 00 62 FC | 	wrlong	_var01, objptr
18e50     69 01 00 FF 
18e54     CE 01 06 F6 | 	mov	_var01, ##@LR__5034
18e58     04 E4 05 F1 | 	add	objptr, #4
18e5c     F2 00 62 FC | 	wrlong	_var01, objptr
18e60     69 01 00 FF 
18e64     DF 01 06 F6 | 	mov	_var01, ##@LR__5035
18e68     04 E4 05 F1 | 	add	objptr, #4
18e6c     F2 00 62 FC | 	wrlong	_var01, objptr
18e70     69 01 00 FF 
18e74     F0 01 06 F6 | 	mov	_var01, ##@LR__5036
18e78     04 E4 05 F1 | 	add	objptr, #4
18e7c     F2 00 62 FC | 	wrlong	_var01, objptr
18e80     6A 01 00 FF 
18e84     1B 00 06 F6 | 	mov	_var01, ##@LR__5037
18e88     04 E4 05 F1 | 	add	objptr, #4
18e8c     F2 00 62 FC | 	wrlong	_var01, objptr
18e90     6A 01 00 FF 
18e94     37 00 06 F6 | 	mov	_var01, ##@LR__5038
18e98     04 E4 05 F1 | 	add	objptr, #4
18e9c     F2 00 62 FC | 	wrlong	_var01, objptr
18ea0     6A 01 00 FF 
18ea4     4D 00 06 F6 | 	mov	_var01, ##@LR__5039
18ea8     04 E4 05 F1 | 	add	objptr, #4
18eac     F2 00 62 FC | 	wrlong	_var01, objptr
18eb0     6A 01 00 FF 
18eb4     5A 00 06 F6 | 	mov	_var01, ##@LR__5040
18eb8     04 E4 05 F1 | 	add	objptr, #4
18ebc     F2 00 62 FC | 	wrlong	_var01, objptr
18ec0     6A 01 00 FF 
18ec4     6C 00 06 F6 | 	mov	_var01, ##@LR__5041
18ec8     04 E4 05 F1 | 	add	objptr, #4
18ecc     F2 00 62 FC | 	wrlong	_var01, objptr
18ed0     6A 01 00 FF 
18ed4     7D 00 06 F6 | 	mov	_var01, ##@LR__5042
18ed8     04 E4 05 F1 | 	add	objptr, #4
18edc     F2 00 62 FC | 	wrlong	_var01, objptr
18ee0     6A 01 00 FF 
18ee4     99 00 06 F6 | 	mov	_var01, ##@LR__5043
18ee8     04 E4 05 F1 | 	add	objptr, #4
18eec     F2 00 62 FC | 	wrlong	_var01, objptr
18ef0     6A 01 00 FF 
18ef4     AA 00 06 F6 | 	mov	_var01, ##@LR__5044
18ef8     04 E4 05 F1 | 	add	objptr, #4
18efc     F2 00 62 FC | 	wrlong	_var01, objptr
18f00     6A 01 00 FF 
18f04     B9 00 06 F6 | 	mov	_var01, ##@LR__5045
18f08     04 E4 05 F1 | 	add	objptr, #4
18f0c     F2 00 62 FC | 	wrlong	_var01, objptr
18f10     6A 01 00 FF 
18f14     D4 00 06 F6 | 	mov	_var01, ##@LR__5046
18f18     04 E4 05 F1 | 	add	objptr, #4
18f1c     F2 00 62 FC | 	wrlong	_var01, objptr
18f20     6A 01 00 FF 
18f24     08 01 06 F6 | 	mov	_var01, ##@LR__5047
18f28     04 E4 05 F1 | 	add	objptr, #4
18f2c     F2 00 62 FC | 	wrlong	_var01, objptr
18f30     6A 01 00 FF 
18f34     21 01 06 F6 | 	mov	_var01, ##@LR__5048
18f38     04 E4 05 F1 | 	add	objptr, #4
18f3c     F2 00 62 FC | 	wrlong	_var01, objptr
18f40     6A 01 00 FF 
18f44     3D 01 06 F6 | 	mov	_var01, ##@LR__5049
18f48     04 E4 05 F1 | 	add	objptr, #4
18f4c     F2 00 62 FC | 	wrlong	_var01, objptr
18f50     6A 01 00 FF 
18f54     5B 01 06 F6 | 	mov	_var01, ##@LR__5050
18f58     04 E4 05 F1 | 	add	objptr, #4
18f5c     F2 00 62 FC | 	wrlong	_var01, objptr
18f60     6A 01 00 FF 
18f64     74 01 06 F6 | 	mov	_var01, ##@LR__5051
18f68     04 E4 05 F1 | 	add	objptr, #4
18f6c     F2 00 62 FC | 	wrlong	_var01, objptr
18f70     6A 01 00 FF 
18f74     93 01 06 F6 | 	mov	_var01, ##@LR__5052
18f78     04 E4 05 F1 | 	add	objptr, #4
18f7c     F2 00 62 FC | 	wrlong	_var01, objptr
18f80     6A 01 00 FF 
18f84     A2 01 06 F6 | 	mov	_var01, ##@LR__5053
18f88     04 E4 05 F1 | 	add	objptr, #4
18f8c     F2 00 62 FC | 	wrlong	_var01, objptr
18f90     6A 01 00 FF 
18f94     D0 01 06 F6 | 	mov	_var01, ##@LR__5054
18f98     04 E4 05 F1 | 	add	objptr, #4
18f9c     F2 00 62 FC | 	wrlong	_var01, objptr
18fa0     6A 01 00 FF 
18fa4     DE 01 06 F6 | 	mov	_var01, ##@LR__5055
18fa8     04 E4 05 F1 | 	add	objptr, #4
18fac     F2 00 62 FC | 	wrlong	_var01, objptr
18fb0     6A 01 00 FF 
18fb4     F3 01 06 F6 | 	mov	_var01, ##@LR__5056
18fb8     04 E4 05 F1 | 	add	objptr, #4
18fbc     F2 00 62 FC | 	wrlong	_var01, objptr
18fc0     6B 01 00 FF 
18fc4     17 00 06 F6 | 	mov	_var01, ##@LR__5057
18fc8     04 E4 05 F1 | 	add	objptr, #4
18fcc     F2 00 62 FC | 	wrlong	_var01, objptr
18fd0     6B 01 00 FF 
18fd4     2E 00 06 F6 | 	mov	_var01, ##@LR__5058
18fd8     04 E4 05 F1 | 	add	objptr, #4
18fdc     F2 00 62 FC | 	wrlong	_var01, objptr
18fe0     6B 01 00 FF 
18fe4     41 00 06 F6 | 	mov	_var01, ##@LR__5059
18fe8     04 E4 05 F1 | 	add	objptr, #4
18fec     F2 00 62 FC | 	wrlong	_var01, objptr
18ff0     6B 01 00 FF 
18ff4     58 00 06 F6 | 	mov	_var01, ##@LR__5060
18ff8     04 E4 05 F1 | 	add	objptr, #4
18ffc     F2 00 62 FC | 	wrlong	_var01, objptr
19000     65 00 00 FF 
19004     30 E5 85 F1 | 	sub	objptr, ##52016
19008                 | _init_error_strings_ret
19008     2D 00 64 FD | 	ret
1900c                 | 
1900c                 | '         
1900c                 | ' sub printerror(err as integer)
1900c                 | _printerror
1900c     01 4A 05 F6 | 	mov	COUNT_, #1
19010     A8 00 A0 FD | 	call	#pushregs_
19014     09 1F 02 F6 | 	mov	local01, arg01
19018     6B 01 00 FF 
1901c     71 12 06 F6 | 	mov	arg01, ##@LR__5061
19020     7C 31 B0 FD | 	call	#_hg010b_spin2_write
19024     0F 13 02 F6 | 	mov	arg01, local01
19028     E4 34 B0 FD | 	call	#_hg010b_spin2_inttostr
1902c     FD 12 02 F6 | 	mov	arg01, result1
19030     6C 31 B0 FD | 	call	#_hg010b_spin2_write
19034     6B 01 00 FF 
19038     78 12 06 F6 | 	mov	arg01, ##@LR__5062
1903c     60 31 B0 FD | 	call	#_hg010b_spin2_write
19040     02 1E 66 F0 | 	shl	local01, #2
19044     65 00 00 FF 
19048     6C E4 05 F1 | 	add	objptr, ##51820
1904c     F2 1E 02 F1 | 	add	local01, objptr
19050     0F 13 02 FB | 	rdlong	arg01, local01
19054     65 00 00 FF 
19058     6C E4 85 F1 | 	sub	objptr, ##51820
1905c                 | ' 
1905c                 | ' write(text)
1905c     40 31 B0 FD | 	call	#_hg010b_spin2_write
19060                 | ' crlf
19060     08 34 B0 FD | 	call	#_hg010b_spin2_crlf
19064     A7 F0 03 F6 | 	mov	ptra, fp
19068     B2 00 A0 FD | 	call	#popregs_
1906c                 | _printerror_ret
1906c     2D 00 64 FD | 	ret
19070                 | 
19070                 | ' 
19070                 | ' '' ------------------------------- Hardware start/stop/initialization 
19070                 | ' 
19070                 | ' sub startpsram
19070                 | _startpsram
19070     00 12 06 F6 | 	mov	arg01, #0
19074     0A 14 C6 F9 | 	decod	arg02, #10
19078     0B 16 06 F6 | 	mov	arg03, #11
1907c     07 18 06 F6 | 	mov	arg04, #7
19080     0B 00 00 FF 
19084     CC E4 05 F1 | 	add	objptr, ##5836
19088     90 35 B0 FD | 	call	#_psram_spin2_startx
1908c     4B 00 00 FF 
19090     2C E5 05 F1 | 	add	objptr, ##38700
19094     F2 FA 61 FC | 	wrlong	result1, objptr
19098                 | '     return $7FF00 + cog*12
19098     0C E4 05 F1 | 	add	objptr, #12
1909c     FF 03 80 FF 
190a0     F2 00 6A FC | 	wrlong	##524032, objptr
190a4     57 00 00 FF 
190a8     04 E4 85 F1 | 	sub	objptr, ##44548
190ac                 | _startpsram_ret
190ac     2D 00 64 FD | 	ret
190b0                 | 
190b0                 | ' 
190b0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
190b0                 | _startvideo
190b0     01 4A 05 F6 | 	mov	COUNT_, #1
190b4     A8 00 A0 FD | 	call	#pushregs_
190b8     57 00 00 FF 
190bc     04 E4 05 F1 | 	add	objptr, ##44548
190c0     F2 18 02 FB | 	rdlong	arg04, objptr
190c4     57 00 00 FF 
190c8     04 E4 85 F1 | 	sub	objptr, ##44548
190cc     0A 13 02 F6 | 	mov	arg01, arg02
190d0     0C 15 02 F6 | 	mov	arg02, arg04
190d4     C0 18 B0 FD | 	call	#_hg010b_spin2_start
190d8     56 00 00 FF 
190dc     F0 E5 05 F1 | 	add	objptr, ##44528
190e0     F2 FA 61 FC | 	wrlong	result1, objptr
190e4                 | ' 
190e4                 | ' videocog=v.start(pin,mbox)
190e4                 | ' 
190e4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
190e4     00 1E 06 F6 | 	mov	local01, #0
190e8     4B 00 00 FF 
190ec     24 E5 85 F1 | 	sub	objptr, ##38692
190f0                 | LR__1950
190f0     0F 13 02 F6 | 	mov	arg01, local01
190f4     00 28 00 FF 
190f8     00 14 06 F6 | 	mov	arg02, ##5242880
190fc     74 39 B0 FD | 	call	#_psram_spin2_setQos
19100     01 1E 06 F1 | 	add	local01, #1
19104     08 1E 56 F2 | 	cmps	local01, #8 wc
19108     E4 FF 9F CD |  if_b	jmp	#LR__1950
1910c     4B 00 00 FF 
19110     24 E5 05 F1 | 	add	objptr, ##38692
19114     F2 12 02 FB | 	rdlong	arg01, objptr
19118     7A 00 02 FF 
1911c     00 14 06 F6 | 	mov	arg02, ##67171328
19120     4B 00 00 FF 
19124     24 E5 85 F1 | 	sub	objptr, ##38692
19128     48 39 B0 FD | 	call	#_psram_spin2_setQos
1912c     0B 00 00 FF 
19130     CC E4 85 F1 | 	sub	objptr, ##5836
19134                 | ' psram.setQoS(videocog, $0400f400) 
19134                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
19134     F2 14 02 F6 | 	mov	arg02, objptr
19138     00 B8 03 FF 
1913c     00 14 46 F5 | 	or	arg02, ##124780544
19140     00 16 06 F6 | 	mov	arg03, #0
19144     00 18 06 F6 | 	mov	arg04, #0
19148     00 12 06 F6 | 	mov	arg01, #0
1914c     A4 4D B0 FD | 	call	#__system___basic_open
19150                 | ' return videocog
19150     56 00 00 FF 
19154     F0 E5 05 F1 | 	add	objptr, ##44528
19158     F2 FA 01 FB | 	rdlong	result1, objptr
1915c     56 00 00 FF 
19160     F0 E5 85 F1 | 	sub	objptr, ##44528
19164     A7 F0 03 F6 | 	mov	ptra, fp
19168     B2 00 A0 FD | 	call	#popregs_
1916c                 | _startvideo_ret
1916c     2D 00 64 FD | 	ret
19170                 | 
19170                 | ' 
19170                 | ' 
19170                 | ' 
19170                 | ' 
19170                 | ' '' ------------------------------- Convenient psram peek/poke
19170                 | ' 
19170                 | ' sub pslpoke(addr as ulong,value as ulong)
19170                 | _pslpoke
19170     00 4A 05 F6 | 	mov	COUNT_, #0
19174     A8 00 A0 FD | 	call	#pushregs_
19178     08 F0 07 F1 | 	add	ptra, #8
1917c     A7 12 62 FC | 	wrlong	arg01, fp
19180     04 4E 05 F1 | 	add	fp, #4
19184     A7 14 62 FC | 	wrlong	arg02, fp
19188     A7 12 02 F6 | 	mov	arg01, fp
1918c     04 4E 85 F1 | 	sub	fp, #4
19190     A7 14 02 FB | 	rdlong	arg02, fp
19194     04 16 06 F6 | 	mov	arg03, #4
19198     0B 00 00 FF 
1919c     CC E4 05 F1 | 	add	objptr, ##5836
191a0     40 37 B0 FD | 	call	#_psram_spin2_write
191a4     0B 00 00 FF 
191a8     CC E4 85 F1 | 	sub	objptr, ##5836
191ac     A7 F0 03 F6 | 	mov	ptra, fp
191b0     B2 00 A0 FD | 	call	#popregs_
191b4                 | _pslpoke_ret
191b4     2D 00 64 FD | 	ret
191b8                 | 
191b8                 | ' 
191b8                 | ' sub psdpoke(addr as ulong,value as ulong)
191b8                 | _psdpoke
191b8     00 4A 05 F6 | 	mov	COUNT_, #0
191bc     A8 00 A0 FD | 	call	#pushregs_
191c0     08 F0 07 F1 | 	add	ptra, #8
191c4     A7 12 62 FC | 	wrlong	arg01, fp
191c8     04 4E 05 F1 | 	add	fp, #4
191cc     A7 14 62 FC | 	wrlong	arg02, fp
191d0     A7 12 02 F6 | 	mov	arg01, fp
191d4     04 4E 85 F1 | 	sub	fp, #4
191d8     A7 14 02 FB | 	rdlong	arg02, fp
191dc     02 16 06 F6 | 	mov	arg03, #2
191e0     0B 00 00 FF 
191e4     CC E4 05 F1 | 	add	objptr, ##5836
191e8     F8 36 B0 FD | 	call	#_psram_spin2_write
191ec     0B 00 00 FF 
191f0     CC E4 85 F1 | 	sub	objptr, ##5836
191f4     A7 F0 03 F6 | 	mov	ptra, fp
191f8     B2 00 A0 FD | 	call	#popregs_
191fc                 | _psdpoke_ret
191fc     2D 00 64 FD | 	ret
19200                 | 
19200                 | ' 
19200                 | ' sub pspoke(addr as ulong,value as ulong)
19200                 | _pspoke
19200     00 4A 05 F6 | 	mov	COUNT_, #0
19204     A8 00 A0 FD | 	call	#pushregs_
19208     08 F0 07 F1 | 	add	ptra, #8
1920c     A7 12 62 FC | 	wrlong	arg01, fp
19210     04 4E 05 F1 | 	add	fp, #4
19214     A7 14 62 FC | 	wrlong	arg02, fp
19218     A7 12 02 F6 | 	mov	arg01, fp
1921c     04 4E 85 F1 | 	sub	fp, #4
19220     A7 14 02 FB | 	rdlong	arg02, fp
19224     01 16 06 F6 | 	mov	arg03, #1
19228     0B 00 00 FF 
1922c     CC E4 05 F1 | 	add	objptr, ##5836
19230     B0 36 B0 FD | 	call	#_psram_spin2_write
19234     0B 00 00 FF 
19238     CC E4 85 F1 | 	sub	objptr, ##5836
1923c     A7 F0 03 F6 | 	mov	ptra, fp
19240     B2 00 A0 FD | 	call	#popregs_
19244                 | _pspoke_ret
19244     2D 00 64 FD | 	ret
19248                 | 
19248                 | ' 
19248                 | ' function pspeek(adr as ulong) as ubyte
19248                 | _pspeek
19248     00 4A 05 F6 | 	mov	COUNT_, #0
1924c     A8 00 A0 FD | 	call	#pushregs_
19250     0C F0 07 F1 | 	add	ptra, #12
19254     04 4E 05 F1 | 	add	fp, #4
19258     A7 12 62 FC | 	wrlong	arg01, fp
1925c     04 4E 05 F1 | 	add	fp, #4
19260     A7 12 02 F6 | 	mov	arg01, fp
19264     04 4E 85 F1 | 	sub	fp, #4
19268     A7 14 02 FB | 	rdlong	arg02, fp
1926c     04 4E 85 F1 | 	sub	fp, #4
19270     01 16 06 F6 | 	mov	arg03, #1
19274     0B 00 00 FF 
19278     CC E4 05 F1 | 	add	objptr, ##5836
1927c     C8 35 B0 FD | 	call	#_psram_spin2_read1
19280     0B 00 00 FF 
19284     CC E4 85 F1 | 	sub	objptr, ##5836
19288                 | ' psram.read1(varptr(res),adr,1)
19288                 | ' return res
19288     08 4E 05 F1 | 	add	fp, #8
1928c     A7 FA C1 FA | 	rdbyte	result1, fp
19290     08 4E 85 F1 | 	sub	fp, #8
19294     A7 F0 03 F6 | 	mov	ptra, fp
19298     B2 00 A0 FD | 	call	#popregs_
1929c                 | _pspeek_ret
1929c     2D 00 64 FD | 	ret
192a0                 | 
192a0                 | ' 
192a0                 | ' function pslpeek(adr as ulong) as ulong
192a0                 | _pslpeek
192a0     00 4A 05 F6 | 	mov	COUNT_, #0
192a4     A8 00 A0 FD | 	call	#pushregs_
192a8     0C F0 07 F1 | 	add	ptra, #12
192ac     04 4E 05 F1 | 	add	fp, #4
192b0     A7 12 62 FC | 	wrlong	arg01, fp
192b4     04 4E 05 F1 | 	add	fp, #4
192b8     A7 12 02 F6 | 	mov	arg01, fp
192bc     04 4E 85 F1 | 	sub	fp, #4
192c0     A7 14 02 FB | 	rdlong	arg02, fp
192c4     04 4E 85 F1 | 	sub	fp, #4
192c8     04 16 06 F6 | 	mov	arg03, #4
192cc     0B 00 00 FF 
192d0     CC E4 05 F1 | 	add	objptr, ##5836
192d4     70 35 B0 FD | 	call	#_psram_spin2_read1
192d8     0B 00 00 FF 
192dc     CC E4 85 F1 | 	sub	objptr, ##5836
192e0                 | ' psram.read1(varptr(res),adr,4)
192e0                 | ' return res
192e0     08 4E 05 F1 | 	add	fp, #8
192e4     A7 FA 01 FB | 	rdlong	result1, fp
192e8     08 4E 85 F1 | 	sub	fp, #8
192ec     A7 F0 03 F6 | 	mov	ptra, fp
192f0     B2 00 A0 FD | 	call	#popregs_
192f4                 | _pslpeek_ret
192f4     2D 00 64 FD | 	ret
192f8                 | 
192f8                 | ' 
192f8                 | ' function psdpeek(adr as ulong) as ulong
192f8                 | _psdpeek
192f8     00 4A 05 F6 | 	mov	COUNT_, #0
192fc     A8 00 A0 FD | 	call	#pushregs_
19300     0C F0 07 F1 | 	add	ptra, #12
19304     04 4E 05 F1 | 	add	fp, #4
19308     A7 12 62 FC | 	wrlong	arg01, fp
1930c     04 4E 05 F1 | 	add	fp, #4
19310     A7 12 02 F6 | 	mov	arg01, fp
19314     04 4E 85 F1 | 	sub	fp, #4
19318     A7 14 02 FB | 	rdlong	arg02, fp
1931c     04 4E 85 F1 | 	sub	fp, #4
19320     02 16 06 F6 | 	mov	arg03, #2
19324     0B 00 00 FF 
19328     CC E4 05 F1 | 	add	objptr, ##5836
1932c     18 35 B0 FD | 	call	#_psram_spin2_read1
19330     0B 00 00 FF 
19334     CC E4 85 F1 | 	sub	objptr, ##5836
19338                 | ' psram.read1(varptr(res),adr,2)
19338                 | ' return res
19338     08 4E 05 F1 | 	add	fp, #8
1933c     A7 FA E1 FA | 	rdword	result1, fp
19340     08 4E 85 F1 | 	sub	fp, #8
19344     A7 F0 03 F6 | 	mov	ptra, fp
19348     B2 00 A0 FD | 	call	#popregs_
1934c                 | _psdpeek_ret
1934c     2D 00 64 FD | 	ret
19350                 | 
19350                 | ' 
19350                 | ' '' ------------------------------- USB keyboard scan to char translator
19350                 | ' 
19350                 | ' function scantochar(key)
19350                 | _scantochar
19350                 | ' 
19350                 | ' select case (key shr 8) and 255
19350     09 01 02 F6 | 	mov	_var01, arg01
19354     08 00 C6 F0 | 	sar	_var01, #8
19358     FF 00 0E F5 | 	and	_var01, #255 wz
1935c     24 00 90 AD |  if_e	jmp	#LR__1960
19360     02 00 0E F2 | 	cmp	_var01, #2 wz
19364     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
19368     30 00 90 AD |  if_e	jmp	#LR__1961
1936c     40 00 0E F2 | 	cmp	_var01, #64 wz
19370     44 00 90 AD |  if_e	jmp	#LR__1962
19374     42 00 0E F2 | 	cmp	_var01, #66 wz
19378     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1937c     70 00 90 5D |  if_ne	jmp	#LR__1964
19380     50 00 90 FD | 	jmp	#LR__1963
19384                 | LR__1960
19384     09 FB 01 F6 | 	mov	result1, arg01
19388     7F FA 05 F5 | 	and	result1, #127
1938c     02 FA 65 F0 | 	shl	result1, #2
19390     F5 FA 01 F1 | 	add	result1, ptr__dat__
19394     FD FA C1 FA | 	rdbyte	result1, result1
19398     54 00 90 FD | 	jmp	#_scantochar_ret
1939c                 | LR__1961
1939c     09 FB 01 F6 | 	mov	result1, arg01
193a0     7F FA 05 F5 | 	and	result1, #127
193a4     02 FA 65 F0 | 	shl	result1, #2
193a8     01 FA 05 F1 | 	add	result1, #1
193ac     F5 FA 01 F1 | 	add	result1, ptr__dat__
193b0     FD FA C1 FA | 	rdbyte	result1, result1
193b4     38 00 90 FD | 	jmp	#_scantochar_ret
193b8                 | LR__1962
193b8     09 FB 01 F6 | 	mov	result1, arg01
193bc     7F FA 05 F5 | 	and	result1, #127
193c0     02 FA 65 F0 | 	shl	result1, #2
193c4     02 FA 05 F1 | 	add	result1, #2
193c8     F5 FA 01 F1 | 	add	result1, ptr__dat__
193cc     FD FA C1 FA | 	rdbyte	result1, result1
193d0     1C 00 90 FD | 	jmp	#_scantochar_ret
193d4                 | LR__1963
193d4     09 FB 01 F6 | 	mov	result1, arg01
193d8     7F FA 05 F5 | 	and	result1, #127
193dc     02 FA 65 F0 | 	shl	result1, #2
193e0     03 FA 05 F1 | 	add	result1, #3
193e4     F5 FA 01 F1 | 	add	result1, ptr__dat__
193e8     FD FA C1 FA | 	rdbyte	result1, result1
193ec     00 00 90 FD | 	jmp	#_scantochar_ret
193f0                 | LR__1964
193f0                 | _scantochar_ret
193f0     2D 00 64 FD | 	ret
193f4                 | 
193f4                 | _program
193f4     13 4A 05 F6 | 	mov	COUNT_, #19
193f8     A8 00 A0 FD | 	call	#pushregs_
193fc     70 FC BF FD | 	call	#_startpsram
19400     40 12 06 F6 | 	mov	arg01, #64
19404     00 14 06 F6 | 	mov	arg02, #0
19408     00 16 06 F6 | 	mov	arg03, #0
1940c     A0 FC BF FD | 	call	#_startvideo
19410     00 12 06 F6 | 	mov	arg01, #0
19414     00 14 06 F6 | 	mov	arg02, #0
19418     00 16 06 F6 | 	mov	arg03, #0
1941c     0B 00 00 FF 
19420     CC E4 05 F1 | 	add	objptr, ##5836
19424     FC 39 B0 FD | 	call	#_audio096_spin2_start
19428     FE 1C 02 F6 | 	mov	arg06, result2
1942c     4B 00 00 FF 
19430     20 E5 05 F1 | 	add	objptr, ##38688
19434     F2 FA 61 FC | 	wrlong	result1, objptr
19438     14 E4 05 F1 | 	add	objptr, #20
1943c     F2 1C 62 FC | 	wrlong	arg06, objptr
19440     57 00 00 FF 
19444     00 E4 85 F1 | 	sub	objptr, ##44544
19448     32 12 06 F6 | 	mov	arg01, #50
1944c     F0 42 B0 FD | 	call	#__system___waitms
19450     57 00 00 FF 
19454     00 E4 05 F1 | 	add	objptr, ##44544
19458     F2 12 02 FB | 	rdlong	arg01, objptr
1945c     57 00 00 FF 
19460     00 E4 85 F1 | 	sub	objptr, ##44544
19464     14 12 06 F1 | 	add	arg01, #20
19468     20 00 80 FF 
1946c     09 01 58 FC | 	wrword	##16384, arg01
19470     08 37 B0 FD | 	call	#_usbnew_spin2_start
19474     56 00 00 FF 
19478     F4 E5 05 F1 | 	add	objptr, ##44532
1947c     F2 FA 61 FC | 	wrlong	result1, objptr
19480                 | '   mouse_limits[0] := xlim
19480     0F 00 00 FF 
19484     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
19488     01 00 80 FF 
1948c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
19490                 | '   mouse_limits[1] := ylim
19490     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
19494     01 00 80 FF 
19498     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1949c     56 00 00 FF 
194a0     E3 E4 85 F1 | 	sub	objptr, ##44259
194a4     F2 12 02 F6 | 	mov	arg01, objptr
194a8     11 E5 85 F1 | 	sub	objptr, #273
194ac     C4 12 06 F1 | 	add	arg01, #196
194b0                 | '   mouse_outptr := ptr
194b0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
194b4     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
194b8     0F 00 00 FF 
194bc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
194c0     0E 00 00 FF 
194c4     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
194c8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
194cc     0E 00 00 FF 
194d0     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
194d4     10 12 06 F6 | 	mov	arg01, #16
194d8     54 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
194dc     10 12 06 F6 | 	mov	arg01, #16
194e0     20 14 06 F6 | 	mov	arg02, #32
194e4     20 16 06 F6 | 	mov	arg03, #32
194e8     D4 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
194ec     09 12 C6 F9 | 	decod	arg01, #9
194f0     2C 15 06 F6 | 	mov	arg02, #300
194f4     DC 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
194f8     F2 1C 02 F6 | 	mov	arg06, objptr
194fc     79 00 00 FF 
19500     D8 E5 05 F1 | 	add	objptr, ##62424
19504     F2 1A 02 F6 | 	mov	arg05, objptr
19508     0D 1D 62 FC | 	wrlong	arg06, arg05
1950c     04 1A 06 F1 | 	add	arg05, #4
19510     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
19514     EF 14 02 F6 | 	mov	arg02, entryptr__
19518     F2 1E 02 F6 | 	mov	local01, objptr
1951c     1E FA 05 F6 | 	mov	result1, #30
19520     28 1E 62 FD | 	setq	local01
19524     0A FB F1 FC | 	coginit	result1, arg02 wc
19528     01 FA 65 C6 |  if_b	neg	result1, #1
1952c     04 E4 85 F1 | 	sub	objptr, #4
19530     F2 FA 61 FC | 	wrlong	result1, objptr
19534     01 00 00 FF 
19538     90 E4 05 F1 | 	add	objptr, ##656
1953c     F2 00 68 FC | 	wrlong	#0, objptr
19540     24 00 00 FF 
19544     40 E4 85 F1 | 	sub	objptr, ##18496
19548     F2 04 68 FC | 	wrlong	#2, objptr
1954c     04 E4 05 F1 | 	add	objptr, #4
19550     F2 26 69 FC | 	wrlong	#147, objptr
19554     04 E4 05 F1 | 	add	objptr, #4
19558     F2 34 69 FC | 	wrlong	#154, objptr
1955c     04 E4 05 F1 | 	add	objptr, #4
19560     F2 08 68 FC | 	wrlong	#4, objptr
19564     04 E4 85 F1 | 	sub	objptr, #4
19568     F2 1C 02 FB | 	rdlong	arg06, objptr
1956c     14 E4 85 F1 | 	sub	objptr, #20
19570     F2 1C 62 FC | 	wrlong	arg06, objptr
19574     04 E4 05 F1 | 	add	objptr, #4
19578     F2 00 68 FC | 	wrlong	#0, objptr
1957c     04 E4 05 F1 | 	add	objptr, #4
19580     F2 00 68 FC | 	wrlong	#0, objptr
19584     22 00 00 FF 
19588     B0 E5 05 F1 | 	add	objptr, ##17840
1958c     F2 02 68 FC | 	wrlong	#1, objptr
19590     01 00 00 FF 
19594     9C E4 05 F1 | 	add	objptr, ##668
19598     F2 00 68 FC | 	wrlong	#0, objptr
1959c     01 00 00 FF 
195a0     00 EA 05 F1 | 	add	ptr__dat__, ##512
195a4     08 E4 05 F1 | 	add	objptr, #8
195a8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
195ac     04 E4 85 F1 | 	sub	objptr, #4
195b0     03 00 80 FF 
195b4     F2 3C 69 FC | 	wrlong	##1694, objptr
195b8     16 00 00 FF 
195bc     1C E4 85 F1 | 	sub	objptr, ##11292
195c0     F2 18 68 FC | 	wrlong	#12, objptr
195c4     65 00 00 FF 
195c8     54 E4 85 F1 | 	sub	objptr, ##51796
195cc     01 00 00 FF 
195d0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
195d4     10 DF BF FD | 	call	#_init_commands
195d8     00 F7 BF FD | 	call	#_init_error_strings
195dc     9C EE BF FD | 	call	#_init_audio
195e0     CC 48 BF FD | 	call	#_do_new
195e4     57 00 00 FF 
195e8     2C E4 05 F1 | 	add	objptr, ##44588
195ec     F2 12 02 FB | 	rdlong	arg01, objptr
195f0     04 E4 85 F1 | 	sub	objptr, #4
195f4     F2 14 02 FB | 	rdlong	arg02, objptr
195f8     57 00 00 FF 
195fc     28 E4 85 F1 | 	sub	objptr, ##44584
19600     DC 27 B0 FD | 	call	#_hg010b_spin2_cls
19604     57 00 00 FF 
19608     30 E4 05 F1 | 	add	objptr, ##44592
1960c     F2 12 02 FB | 	rdlong	arg01, objptr
19610     57 00 00 FF 
19614     30 E4 85 F1 | 	sub	objptr, ##44592
19618     74 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1961c                 | ' 
1961c                 | ' leading_spaces:=amount
1961c     01 00 00 FF 
19620     B6 E4 05 F1 | 	add	objptr, ##694
19624     F2 04 68 FC | 	wrlong	#2, objptr
19628     01 00 00 FF 
1962c     B6 E4 85 F1 | 	sub	objptr, ##694
19630     6B 01 00 FF 
19634     7B 20 06 F6 | 	mov	local02, ##@LR__5063
19638     3D 12 06 F6 | 	mov	arg01, #61
1963c     3C 14 06 F6 | 	mov	arg02, #60
19640     3B 16 06 F6 | 	mov	arg03, #59
19644     3A 18 06 F6 | 	mov	arg04, #58
19648     2C 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1964c     FD 14 02 F6 | 	mov	arg02, result1
19650     10 13 02 F6 | 	mov	arg01, local02
19654     C0 41 B0 FD | 	call	#__system___mount
19658     6B 01 00 FF 
1965c     7F 12 06 F6 | 	mov	arg01, ##@LR__5064
19660     74 44 B0 FD | 	call	#__system___chdir
19664     6B 01 00 FF 
19668     87 20 06 F6 | 	mov	local02, ##@LR__5065
1966c     72 00 00 FF 
19670     84 E4 05 F1 | 	add	objptr, ##58500
19674     F2 20 62 FC | 	wrlong	local02, objptr
19678     1B 00 00 FF 
1967c     60 E4 85 F1 | 	sub	objptr, ##13920
19680     F2 12 02 FB | 	rdlong	arg01, objptr
19684     57 00 00 FF 
19688     24 E4 85 F1 | 	sub	objptr, ##44580
1968c     01 12 66 F0 | 	shl	arg01, #1
19690     01 14 06 F6 | 	mov	arg02, #1
19694     38 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19698                 | ' 
19698                 | ' init_commands
19698                 | ' init_error_strings
19698                 | ' init_audio
19698                 | ' do_new
19698                 | ' 
19698                 | ' 
19698                 | ' cls(ink, paper)
19698                 | ' v.setfontfamily(font) 				' use ST Mono font
19698                 | ' v.setleadingspaces(2)
19698                 | ' mount "/sd", _vfs_open_sdcard()
19698                 | ' chdir "/sd/bas"
19698                 | ' 
19698                 | ' currentdir$="/sd/bas"
19698                 | ' 
19698                 | ' position 2*editor_spaces,1 : print ver$
19698     00 12 06 F6 | 	mov	arg01, #0
1969c     3C 97 B0 FD | 	call	#__system___getiolock_0473
196a0     FD 12 02 F6 | 	mov	arg01, result1
196a4     A4 3D B0 FD | 	call	#__system___lockmem
196a8     18 00 00 FF 
196ac     4C EB 05 F1 | 	add	ptr__dat__, ##12620
196b0     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
196b4     18 00 00 FF 
196b8     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
196bc     00 12 06 F6 | 	mov	arg01, #0
196c0     00 16 06 F6 | 	mov	arg03, #0
196c4     88 4A B0 FD | 	call	#__system___basic_print_string
196c8     00 12 06 F6 | 	mov	arg01, #0
196cc     0A 14 06 F6 | 	mov	arg02, #10
196d0     00 16 06 F6 | 	mov	arg03, #0
196d4     20 4A B0 FD | 	call	#__system___basic_print_char
196d8     00 12 06 F6 | 	mov	arg01, #0
196dc     FC 96 B0 FD | 	call	#__system___getiolock_0473
196e0     FD 00 68 FC | 	wrlong	#0, result1
196e4     7B 00 00 FF 
196e8     68 E4 05 F1 | 	add	objptr, ##63080
196ec     F2 12 02 FB | 	rdlong	arg01, objptr
196f0     18 00 00 FF 
196f4     1C E4 85 F1 | 	sub	objptr, ##12316
196f8     F2 20 02 FB | 	rdlong	local02, objptr
196fc     63 00 00 FF 
19700     4C E4 85 F1 | 	sub	objptr, ##50764
19704     10 13 82 F1 | 	sub	arg01, local02
19708     00 14 06 F6 | 	mov	arg02, #0
1970c     0A 16 06 F6 | 	mov	arg03, #10
19710     D0 5F B0 FD | 	call	#__system__Number_S
19714     FD 12 02 F6 | 	mov	arg01, result1
19718     6B 01 00 FF 
1971c     8F 14 06 F6 | 	mov	arg02, ##@LR__5066
19720     84 3D B0 FD | 	call	#__system___string_concat
19724     FD 20 02 F6 | 	mov	local02, result1
19728     79 00 00 FF 
1972c     CC E5 05 F1 | 	add	objptr, ##62412
19730     F2 20 62 FC | 	wrlong	local02, objptr
19734     79 00 00 FF 
19738     CC E5 85 F1 | 	sub	objptr, ##62412
1973c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1973c     00 12 06 F6 | 	mov	arg01, #0
19740     98 96 B0 FD | 	call	#__system___getiolock_0473
19744     FD 12 02 F6 | 	mov	arg01, result1
19748     00 3D B0 FD | 	call	#__system___lockmem
1974c     79 00 00 FF 
19750     CC E5 05 F1 | 	add	objptr, ##62412
19754     F2 14 02 FB | 	rdlong	arg02, objptr
19758     79 00 00 FF 
1975c     CC E5 85 F1 | 	sub	objptr, ##62412
19760     00 12 06 F6 | 	mov	arg01, #0
19764     00 16 06 F6 | 	mov	arg03, #0
19768     E4 49 B0 FD | 	call	#__system___basic_print_string
1976c     00 12 06 F6 | 	mov	arg01, #0
19770     0A 14 06 F6 | 	mov	arg02, #10
19774     00 16 06 F6 | 	mov	arg03, #0
19778     7C 49 B0 FD | 	call	#__system___basic_print_char
1977c     00 12 06 F6 | 	mov	arg01, #0
19780     58 96 B0 FD | 	call	#__system___getiolock_0473
19784     FD 00 68 FC | 	wrlong	#0, result1
19788     57 00 00 FF 
1978c     24 E4 05 F1 | 	add	objptr, ##44580
19790     F2 12 02 FB | 	rdlong	arg01, objptr
19794     57 00 00 FF 
19798     24 E4 85 F1 | 	sub	objptr, ##44580
1979c     01 12 66 F0 | 	shl	arg01, #1
197a0     04 14 06 F6 | 	mov	arg02, #4
197a4     28 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
197a8                 | ' position 2*editor_spaces,4 : print "Ready"
197a8     00 12 06 F6 | 	mov	arg01, #0
197ac     2C 96 B0 FD | 	call	#__system___getiolock_0473
197b0     FD 12 02 F6 | 	mov	arg01, result1
197b4     94 3C B0 FD | 	call	#__system___lockmem
197b8     6B 01 00 FF 
197bc     A1 14 06 F6 | 	mov	arg02, ##@LR__5067
197c0     00 12 06 F6 | 	mov	arg01, #0
197c4     00 16 06 F6 | 	mov	arg03, #0
197c8     84 49 B0 FD | 	call	#__system___basic_print_string
197cc     FD 22 02 F6 | 	mov	local03, result1
197d0     00 12 06 F6 | 	mov	arg01, #0
197d4     0A 14 06 F6 | 	mov	arg02, #10
197d8     00 16 06 F6 | 	mov	arg03, #0
197dc     18 49 B0 FD | 	call	#__system___basic_print_char
197e0     01 24 06 F6 | 	mov	local04, #1
197e4     00 12 06 F6 | 	mov	arg01, #0
197e8     F0 95 B0 FD | 	call	#__system___getiolock_0473
197ec     FD 00 68 FC | 	wrlong	#0, result1
197f0     00 26 06 F6 | 	mov	local05, #0
197f4     00 14 06 F6 | 	mov	arg02, #0
197f8     01 14 D6 F7 | 	test	arg02, #1 wc
197fc     5A 4C 64 FD | 	drvc	#38
19800     01 14 D6 F7 | 	test	arg02, #1 wc
19804     5A 4E 64 FD | 	drvc	#39
19808     6B 01 00 FF 
1980c     A7 20 06 F6 | 	mov	local02, ##@LR__5068
19810     7B 00 00 FF 
19814     94 E4 05 F1 | 	add	objptr, ##63124
19818     F2 20 62 FC | 	wrlong	local02, objptr
1981c     04 E4 05 F1 | 	add	objptr, #4
19820     FF FF FF FF 
19824     F2 FE 6B FC | 	wrlong	##-1, objptr
19828     7B 00 00 FF 
1982c     98 E4 85 F1 | 	sub	objptr, ##63128
19830                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
19830                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
19830                 | ' 
19830                 | ' loadname="noname.bas"
19830                 | ' do_insert=-1
19830                 | ' 
19830                 | ' 
19830                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
19830                 | ' 
19830                 | ' 'base2:=@channel1[0]+64*channel
19830                 | ' 'long[base2+8]:=sample+$C0000000 
19830                 | ' 'long[base2+12]:= len
19830                 | ' 'if loop >=0 
19830                 | ' '  long[base2+16]:= loop
19830                 | ' 'else
19830                 | ' '  long[base2+16]:= len+2
19830                 | ' 'word[base2+20]:=vol
19830                 | ' 'word[base2+24]:= 3546911/splfreq 
19830                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
19830                 | ' 'long[base2+28]:=$40000000
19830                 | ' 
19830                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
19830                 | ' 'lpoke base+16,2048
19830                 | ' 'lpoke base+12,0
19830                 | ' 'dpoke base+20,16383
19830                 | ' 'dpoke base+22,8192
19830                 | ' 'dpoke base+24,60
19830                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
19830                 | ' 'dpoke base+28,$4000_0000
19830                 | ' 'lpoke base+32,0 
19830                 | ' 'lpoke base+36, 0
19830                 | ' 'lpoke base+40,25600' speed
19830                 | ' 'lpoke base+44,1023 'len
19830                 | ' 
19830                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
19830                 | ' 
19830                 | ' '-------------------------------------------------------------------------------------------------------- 
19830                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
19830                 | ' '--------------------------------------------------------------------------------------------------------
19830                 | ' 
19830                 | ' do
19830                 | LR__1970
19830     01 12 06 F6 | 	mov	arg01, #1
19834     38 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
19838     07 12 06 F6 | 	mov	arg01, #7
1983c     0B 00 00 FF 
19840     CC E4 05 F1 | 	add	objptr, ##5836
19844     04 39 B0 FD | 	call	#_audio096_spin2_stop
19848     0B 00 00 FF 
1984c     CC E4 85 F1 | 	sub	objptr, ##5836
19850     20 34 B0 FD | 	call	#_usbnew_spin2_get_key
19854     65 00 00 FF 
19858     64 E4 05 F1 | 	add	objptr, ##51812
1985c     F2 FA 61 FC | 	wrlong	result1, objptr
19860                 | '   return hkbd_led_rep
19860     13 00 00 FF 
19864     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
19868     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1986c     13 00 00 FF 
19870     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
19874     16 00 00 FF 
19878     38 E4 05 F1 | 	add	objptr, ##11320
1987c     F2 FA 61 FC | 	wrlong	result1, objptr
19880                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
19880     16 00 00 FF 
19884     38 E4 85 F1 | 	sub	objptr, ##11320
19888     F2 20 02 FB | 	rdlong	local02, objptr
1988c     65 00 00 FF 
19890     64 E4 85 F1 | 	sub	objptr, ##51812
19894     01 20 16 F2 | 	cmp	local02, #1 wc
19898     BC 00 90 CD |  if_b	jmp	#LR__1971
1989c     65 00 00 FF 
198a0     64 E4 05 F1 | 	add	objptr, ##51812
198a4     F2 24 02 FB | 	rdlong	local04, objptr
198a8     65 00 00 FF 
198ac     64 E4 85 F1 | 	sub	objptr, ##51812
198b0     12 23 02 F6 | 	mov	local03, local04
198b4     04 22 16 F2 | 	cmp	local03, #4 wc
198b8     9C 00 90 3D |  if_ae	jmp	#LR__1971
198bc     79 00 00 FF 
198c0     D0 E5 05 F1 | 	add	objptr, ##62416
198c4     F2 1E 02 FB | 	rdlong	local01, objptr
198c8     79 00 00 FF 
198cc     D0 E5 85 F1 | 	sub	objptr, ##62416
198d0     0F 27 02 F6 | 	mov	local05, local01
198d4     01 26 0E F2 | 	cmp	local05, #1 wz
198d8     7C 00 90 5D |  if_ne	jmp	#LR__1971
198dc     04 00 00 FF 
198e0     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
198e4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
198e8     04 00 00 FF 
198ec     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
198f0     56 00 00 FF 
198f4     44 22 06 F6 | 	mov	local03, ##44100
198f8     0C 24 C6 F9 | 	decod	local04, #12
198fc     00 26 06 F6 | 	mov	local05, #0
19900     03 00 00 FF 
19904     DE 1E 06 F6 | 	mov	local01, ##1758
19908     07 12 06 F6 | 	mov	arg01, #7
1990c     56 00 00 FF 
19910     44 16 06 F6 | 	mov	arg03, ##44100
19914     0C 18 C6 F9 | 	decod	arg04, #12
19918     00 1A 06 F6 | 	mov	arg05, #0
1991c     03 00 00 FF 
19920     DE 1C 06 F6 | 	mov	arg06, ##1758
19924     0B 00 00 FF 
19928     CC E4 05 F1 | 	add	objptr, ##5836
1992c     CC 36 B0 FD | 	call	#_audio096_spin2_play
19930     0B 00 00 FF 
19934     CC E4 85 F1 | 	sub	objptr, ##5836
19938     0A 12 06 F6 | 	mov	arg01, #10
1993c     00 3E B0 FD | 	call	#__system___waitms
19940     07 12 06 F6 | 	mov	arg01, #7
19944     0B 00 00 FF 
19948     CC E4 05 F1 | 	add	objptr, ##5836
1994c     FC 37 B0 FD | 	call	#_audio096_spin2_stop
19950     0B 00 00 FF 
19954     CC E4 85 F1 | 	sub	objptr, ##5836
19958                 | LR__1971
19958                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
19958     65 00 00 FF 
1995c     64 E4 05 F1 | 	add	objptr, ##51812
19960     F2 20 02 FB | 	rdlong	local02, objptr
19964     65 00 00 FF 
19968     64 E4 85 F1 | 	sub	objptr, ##51812
1996c     04 20 16 F2 | 	cmp	local02, #4 wc
19970     80 00 90 CD |  if_b	jmp	#LR__1972
19974     65 00 00 FF 
19978     64 E4 05 F1 | 	add	objptr, ##51812
1997c     F2 24 02 FB | 	rdlong	local04, objptr
19980     65 00 00 FF 
19984     64 E4 85 F1 | 	sub	objptr, ##51812
19988     12 23 02 F6 | 	mov	local03, local04
1998c     00 00 40 FF 
19990     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
19994     65 00 00 CF 
19998     64 E4 05 C1 |  if_b	add	objptr, ##51812
1999c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
199a0     65 00 00 CF 
199a4     64 E4 85 C1 |  if_b	sub	objptr, ##51812
199a8     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
199ac     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
199b0     40 00 90 3D |  if_ae	jmp	#LR__1972
199b4     65 00 00 FF 
199b8     64 E4 05 F1 | 	add	objptr, ##51812
199bc     F2 20 02 FB | 	rdlong	local02, objptr
199c0     04 E4 05 F1 | 	add	objptr, #4
199c4     F2 20 62 FC | 	wrlong	local02, objptr
199c8     16 00 00 FF 
199cc     38 E4 05 F1 | 	add	objptr, ##11320
199d0     F2 02 68 FC | 	wrlong	#1, objptr
199d4     16 00 00 FF 
199d8     38 E4 85 F1 | 	sub	objptr, ##11320
199dc     F2 20 02 FB | 	rdlong	local02, objptr
199e0     16 00 00 FF 
199e4     3C E4 05 F1 | 	add	objptr, ##11324
199e8     F2 20 62 FC | 	wrlong	local02, objptr
199ec     7B 00 00 FF 
199f0     A4 E4 85 F1 | 	sub	objptr, ##63140
199f4                 | LR__1972
199f4                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
199f4     65 00 00 FF 
199f8     64 E4 05 F1 | 	add	objptr, ##51812
199fc     F2 20 02 FB | 	rdlong	local02, objptr
19a00     65 00 00 FF 
19a04     64 E4 85 F1 | 	sub	objptr, ##51812
19a08     00 00 40 FF 
19a0c     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
19a10     7B 00 00 3F 
19a14     A8 E4 05 31 |  if_ae	add	objptr, ##63144
19a18     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19a1c     08 E4 85 31 |  if_ae	sub	objptr, #8
19a20     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19a24     7B 00 00 3F 
19a28     A0 E4 85 31 |  if_ae	sub	objptr, ##63136
19a2c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
19a2c     65 00 00 FF 
19a30     64 E4 05 F1 | 	add	objptr, ##51812
19a34     F2 20 0A FB | 	rdlong	local02, objptr wz
19a38     65 00 00 FF 
19a3c     64 E4 85 F1 | 	sub	objptr, ##51812
19a40     7B 00 00 AF 
19a44     A0 E4 05 A1 |  if_e	add	objptr, ##63136
19a48     F2 24 02 AB |  if_e	rdlong	local04, objptr
19a4c     7B 00 00 AF 
19a50     A0 E4 85 A1 |  if_e	sub	objptr, ##63136
19a54     12 23 02 A6 |  if_e	mov	local03, local04
19a58     01 22 0E A2 |  if_e	cmp	local03, #1 wz
19a5c     7B 00 00 AF 
19a60     A8 E4 05 A1 |  if_e	add	objptr, ##63144
19a64     F2 20 02 AB |  if_e	rdlong	local02, objptr
19a68     01 20 06 A1 |  if_e	add	local02, #1
19a6c     F2 20 62 AC |  if_e	wrlong	local02, objptr
19a70     7B 00 00 AF 
19a74     A8 E4 85 A1 |  if_e	sub	objptr, ##63144
19a78                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
19a78     65 00 00 FF 
19a7c     64 E4 05 F1 | 	add	objptr, ##51812
19a80     F2 20 02 FB | 	rdlong	local02, objptr
19a84     65 00 00 FF 
19a88     64 E4 85 F1 | 	sub	objptr, ##51812
19a8c     00 00 40 FF 
19a90     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
19a94     44 00 90 3D |  if_ae	jmp	#LR__1974
19a98     7B 00 00 FF 
19a9c     A8 E4 05 F1 | 	add	objptr, ##63144
19aa0     F2 20 02 FB | 	rdlong	local02, objptr
19aa4     7B 00 00 FF 
19aa8     A8 E4 85 F1 | 	sub	objptr, ##63144
19aac     19 20 0E F2 | 	cmp	local02, #25 wz
19ab0     28 00 90 5D |  if_ne	jmp	#LR__1973
19ab4     65 00 00 FF 
19ab8     68 E4 05 F1 | 	add	objptr, ##51816
19abc     F2 20 02 FB | 	rdlong	local02, objptr
19ac0     16 00 00 FF 
19ac4     3C E4 05 F1 | 	add	objptr, ##11324
19ac8     F2 20 62 FC | 	wrlong	local02, objptr
19acc     04 E4 05 F1 | 	add	objptr, #4
19ad0     F2 2A 68 FC | 	wrlong	#21, objptr
19ad4     7B 00 00 FF 
19ad8     A8 E4 85 F1 | 	sub	objptr, ##63144
19adc                 | LR__1973
19adc                 | LR__1974
19adc                 | ' 
19adc                 | ' 
19adc                 | ' if key3<>0 then
19adc     7B 00 00 FF 
19ae0     A4 E4 05 F1 | 	add	objptr, ##63140
19ae4     F2 28 0A FB | 	rdlong	local06, objptr wz
19ae8     7B 00 00 FF 
19aec     A4 E4 85 F1 | 	sub	objptr, ##63140
19af0     3C FD 9F AD |  if_e	jmp	#LR__1970
19af4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
19af4     79 00 00 FF 
19af8     D0 E5 05 F1 | 	add	objptr, ##62416
19afc     F2 20 02 FB | 	rdlong	local02, objptr
19b00     79 00 00 FF 
19b04     D0 E5 85 F1 | 	sub	objptr, ##62416
19b08     01 20 0E F2 | 	cmp	local02, #1 wz
19b0c     50 00 90 5D |  if_ne	jmp	#LR__1975
19b10     7B 00 00 FF 
19b14     74 E4 05 F1 | 	add	objptr, ##63092
19b18     F2 14 02 FB | 	rdlong	arg02, objptr
19b1c     56 00 00 FF 
19b20     44 22 06 F6 | 	mov	local03, ##44100
19b24     0C 24 C6 F9 | 	decod	local04, #12
19b28     04 E4 85 F1 | 	sub	objptr, #4
19b2c     F2 26 02 FB | 	rdlong	local05, objptr
19b30     01 1E 66 F6 | 	neg	local01, #1
19b34     07 12 06 F6 | 	mov	arg01, #7
19b38     56 00 00 FF 
19b3c     44 16 06 F6 | 	mov	arg03, ##44100
19b40     0C 18 C6 F9 | 	decod	arg04, #12
19b44     13 1B 02 F6 | 	mov	arg05, local05
19b48     01 1C 66 F6 | 	neg	arg06, #1
19b4c     6F 00 00 FF 
19b50     A4 E5 85 F1 | 	sub	objptr, ##57252
19b54     A4 34 B0 FD | 	call	#_audio096_spin2_play
19b58     0B 00 00 FF 
19b5c     CC E4 85 F1 | 	sub	objptr, ##5836
19b60                 | LR__1975
19b60     7B 00 00 FF 
19b64     A4 E4 05 F1 | 	add	objptr, ##63140
19b68     F2 12 02 FB | 	rdlong	arg01, objptr
19b6c     7B 00 00 FF 
19b70     A4 E4 85 F1 | 	sub	objptr, ##63140
19b74     D8 F7 BF FD | 	call	#_scantochar
19b78     7B 00 00 FF 
19b7c     AC E4 05 F1 | 	add	objptr, ##63148
19b80     F2 FA 61 FC | 	wrlong	result1, objptr
19b84                 | '   if leds and 2 = 2 then 
19b84     10 E4 85 F1 | 	sub	objptr, #16
19b88     F2 20 0A FB | 	rdlong	local02, objptr wz
19b8c     7B 00 00 FF 
19b90     9C E4 85 F1 | 	sub	objptr, ##63132
19b94     68 01 90 AD |  if_e	jmp	#LR__1983
19b98                 | '     if key4>96 andalso key4<123 then
19b98     7B 00 00 FF 
19b9c     AC E4 05 F1 | 	add	objptr, ##63148
19ba0     F2 20 02 FB | 	rdlong	local02, objptr
19ba4     7B 00 00 FF 
19ba8     AC E4 85 F1 | 	sub	objptr, ##63148
19bac     61 20 56 F2 | 	cmps	local02, #97 wc
19bb0     40 00 90 CD |  if_b	jmp	#LR__1976
19bb4     7B 00 00 FF 
19bb8     AC E4 05 F1 | 	add	objptr, ##63148
19bbc     F2 24 02 FB | 	rdlong	local04, objptr
19bc0     7B 00 00 FF 
19bc4     AC E4 85 F1 | 	sub	objptr, ##63148
19bc8     12 23 02 F6 | 	mov	local03, local04
19bcc     7B 22 56 F2 | 	cmps	local03, #123 wc
19bd0     20 00 90 3D |  if_ae	jmp	#LR__1976
19bd4     7B 00 00 FF 
19bd8     AC E4 05 F1 | 	add	objptr, ##63148
19bdc     F2 20 02 FB | 	rdlong	local02, objptr
19be0     20 20 86 F1 | 	sub	local02, #32
19be4     F2 20 62 FC | 	wrlong	local02, objptr
19be8     7B 00 00 FF 
19bec     AC E4 85 F1 | 	sub	objptr, ##63148
19bf0     0C 01 90 FD | 	jmp	#LR__1982
19bf4                 | LR__1976
19bf4     7B 00 00 FF 
19bf8     AC E4 05 F1 | 	add	objptr, ##63148
19bfc     F2 20 02 FB | 	rdlong	local02, objptr
19c00     7B 00 00 FF 
19c04     AC E4 85 F1 | 	sub	objptr, ##63148
19c08     41 20 56 F2 | 	cmps	local02, #65 wc
19c0c     40 00 90 CD |  if_b	jmp	#LR__1977
19c10     7B 00 00 FF 
19c14     AC E4 05 F1 | 	add	objptr, ##63148
19c18     F2 24 02 FB | 	rdlong	local04, objptr
19c1c     7B 00 00 FF 
19c20     AC E4 85 F1 | 	sub	objptr, ##63148
19c24     12 23 02 F6 | 	mov	local03, local04
19c28     5B 22 56 F2 | 	cmps	local03, #91 wc
19c2c     20 00 90 3D |  if_ae	jmp	#LR__1977
19c30     7B 00 00 FF 
19c34     AC E4 05 F1 | 	add	objptr, ##63148
19c38     F2 20 02 FB | 	rdlong	local02, objptr
19c3c     20 20 06 F1 | 	add	local02, #32
19c40     F2 20 62 FC | 	wrlong	local02, objptr
19c44     7B 00 00 FF 
19c48     AC E4 85 F1 | 	sub	objptr, ##63148
19c4c     B0 00 90 FD | 	jmp	#LR__1981
19c50                 | LR__1977
19c50     7B 00 00 FF 
19c54     AC E4 05 F1 | 	add	objptr, ##63148
19c58     F2 20 02 FB | 	rdlong	local02, objptr
19c5c     7B 00 00 FF 
19c60     AC E4 85 F1 | 	sub	objptr, ##63148
19c64     17 20 56 F2 | 	cmps	local02, #23 wc
19c68     40 00 90 CD |  if_b	jmp	#LR__1978
19c6c     7B 00 00 FF 
19c70     AC E4 05 F1 | 	add	objptr, ##63148
19c74     F2 24 02 FB | 	rdlong	local04, objptr
19c78     7B 00 00 FF 
19c7c     AC E4 85 F1 | 	sub	objptr, ##63148
19c80     12 23 02 F6 | 	mov	local03, local04
19c84     20 22 56 F2 | 	cmps	local03, #32 wc
19c88     20 00 90 3D |  if_ae	jmp	#LR__1978
19c8c     7B 00 00 FF 
19c90     AC E4 05 F1 | 	add	objptr, ##63148
19c94     F2 20 02 FB | 	rdlong	local02, objptr
19c98     09 20 86 F1 | 	sub	local02, #9
19c9c     F2 20 62 FC | 	wrlong	local02, objptr
19ca0     7B 00 00 FF 
19ca4     AC E4 85 F1 | 	sub	objptr, ##63148
19ca8     54 00 90 FD | 	jmp	#LR__1980
19cac                 | LR__1978
19cac     7B 00 00 FF 
19cb0     AC E4 05 F1 | 	add	objptr, ##63148
19cb4     F2 20 02 FB | 	rdlong	local02, objptr
19cb8     7B 00 00 FF 
19cbc     AC E4 85 F1 | 	sub	objptr, ##63148
19cc0     0E 20 56 F2 | 	cmps	local02, #14 wc
19cc4     38 00 90 CD |  if_b	jmp	#LR__1979
19cc8     7B 00 00 FF 
19ccc     AC E4 05 F1 | 	add	objptr, ##63148
19cd0     F2 24 02 FB | 	rdlong	local04, objptr
19cd4     7B 00 00 FF 
19cd8     AC E4 85 F1 | 	sub	objptr, ##63148
19cdc     12 23 02 F6 | 	mov	local03, local04
19ce0     17 22 56 F2 | 	cmps	local03, #23 wc
19ce4     7B 00 00 CF 
19ce8     AC E4 05 C1 |  if_b	add	objptr, ##63148
19cec     F2 20 02 CB |  if_b	rdlong	local02, objptr
19cf0     27 20 06 C1 |  if_b	add	local02, #39
19cf4     F2 20 62 CC |  if_b	wrlong	local02, objptr
19cf8     7B 00 00 CF 
19cfc     AC E4 85 C1 |  if_b	sub	objptr, ##63148
19d00                 | LR__1979
19d00                 | LR__1980
19d00                 | LR__1981
19d00                 | LR__1982
19d00                 | LR__1983
19d00                 | '  
19d00                 | '  
19d00                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
19d00     7B 00 00 FF 
19d04     AC E4 05 F1 | 	add	objptr, ##63148
19d08     F2 20 02 FB | 	rdlong	local02, objptr
19d0c     7B 00 00 FF 
19d10     AC E4 85 F1 | 	sub	objptr, ##63148
19d14     01 20 56 F2 | 	cmps	local02, #1 wc
19d18     E4 01 90 CD |  if_b	jmp	#LR__1988
19d1c     7B 00 00 FF 
19d20     AC E4 05 F1 | 	add	objptr, ##63148
19d24     F2 24 02 FB | 	rdlong	local04, objptr
19d28     7B 00 00 FF 
19d2c     AC E4 85 F1 | 	sub	objptr, ##63148
19d30     12 23 02 F6 | 	mov	local03, local04
19d34     7F 22 56 F2 | 	cmps	local03, #127 wc
19d38     3C E4 05 C1 |  if_b	add	objptr, #60
19d3c     F2 1E E2 CA |  if_b	rdword	local01, objptr
19d40     3C E4 85 C1 |  if_b	sub	objptr, #60
19d44     0F 27 32 C9 |  if_b	getword	local05, local01, #0
19d48     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
19d4c     B0 01 90 3D |  if_ae	jmp	#LR__1988
19d50                 | '     if do_insert then
19d50     7B 00 00 FF 
19d54     98 E4 05 F1 | 	add	objptr, ##63128
19d58     F2 20 0A FB | 	rdlong	local02, objptr wz
19d5c     7B 00 00 FF 
19d60     98 E4 85 F1 | 	sub	objptr, ##63128
19d64     80 01 90 AD |  if_e	jmp	#LR__1987
19d68                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) step -1 : pspoke i,pspeek(i-1) : next i 
19d68     3E E4 05 F1 | 	add	objptr, #62
19d6c     F2 22 C2 FA | 	rdbyte	local03, objptr
19d70     11 25 E2 F8 | 	getbyte	local04, local03, #0
19d74     80 24 06 FA | 	mul	local04, #128
19d78     3A E4 85 F1 | 	sub	objptr, #58
19d7c     F2 2A 02 FB | 	rdlong	local07, objptr
19d80     15 2D 02 F6 | 	mov	local08, local07
19d84     12 2D 02 F1 | 	add	local08, local04
19d88     7F 2C 06 F1 | 	add	local08, #127
19d8c     11 23 E2 F8 | 	getbyte	local03, local03, #0
19d90     80 22 06 FA | 	mul	local03, #128
19d94     11 2B 02 F1 | 	add	local07, local03
19d98     38 E4 05 F1 | 	add	objptr, #56
19d9c     F2 26 E2 FA | 	rdword	local05, objptr
19da0     3C E4 85 F1 | 	sub	objptr, #60
19da4     13 2F 52 F6 | 	abs	local09, local05 wc
19da8     01 2E 46 F0 | 	shr	local09, #1
19dac     17 2B 82 F3 | 	sumc	local07, local09
19db0                 | LR__1984
19db0     16 31 02 F6 | 	mov	local10, local08
19db4     01 30 86 F1 | 	sub	local10, #1
19db8     18 13 02 F6 | 	mov	arg01, local10
19dbc     88 F4 BF FD | 	call	#_pspeek
19dc0     FD 32 02 F6 | 	mov	local11, result1
19dc4     19 35 E2 F8 | 	getbyte	local12, local11, #0
19dc8     1A 37 02 F6 | 	mov	local13, local12
19dcc     16 13 02 F6 | 	mov	arg01, local08
19dd0     1B 15 02 F6 | 	mov	arg02, local13
19dd4     28 F4 BF FD | 	call	#_pspoke
19dd8     01 2C 86 F1 | 	sub	local08, #1
19ddc     15 2D 52 F2 | 	cmps	local08, local07 wc
19de0     CC FF 9F 3D |  if_ae	jmp	#LR__1984
19de4     7B 00 00 FF 
19de8     B0 E4 05 F1 | 	add	objptr, ##63152
19dec     F2 00 68 FC | 	wrlong	#0, objptr
19df0     7B 00 00 FF 
19df4     72 E4 85 F1 | 	sub	objptr, ##63090
19df8     F2 22 C2 FA | 	rdbyte	local03, objptr
19dfc     11 25 E2 F8 | 	getbyte	local04, local03, #0
19e00     80 24 06 FA | 	mul	local04, #128
19e04     3A E4 85 F1 | 	sub	objptr, #58
19e08     F2 26 02 FB | 	rdlong	local05, objptr
19e0c     13 2D 02 F6 | 	mov	local08, local05
19e10     12 2D 02 F1 | 	add	local08, local04
19e14     38 E4 05 F1 | 	add	objptr, #56
19e18     F2 2E E2 FA | 	rdword	local09, objptr
19e1c     17 1F 32 F9 | 	getword	local01, local09, #0
19e20     0F 39 52 F6 | 	abs	local14, local01 wc
19e24     01 38 46 F0 | 	shr	local14, #1
19e28     1C 39 82 F6 | 	negc	local14, local14
19e2c     1C 2D 02 F1 | 	add	local08, local14
19e30     11 23 E2 F8 | 	getbyte	local03, local03, #0
19e34     80 22 06 FA | 	mul	local03, #128
19e38     13 25 02 F6 | 	mov	local04, local05
19e3c     3C E4 85 F1 | 	sub	objptr, #60
19e40     12 3B 02 F6 | 	mov	local15, local04
19e44     11 3B 02 F1 | 	add	local15, local03
19e48     80 3A 06 F1 | 	add	local15, #128
19e4c                 | LR__1985
19e4c     1D 2D 52 F2 | 	cmps	local08, local15 wc
19e50     94 00 90 3D |  if_ae	jmp	#LR__1986
19e54     3C E4 05 F1 | 	add	objptr, #60
19e58     F2 20 E2 FA | 	rdword	local02, objptr
19e5c     7B 00 00 FF 
19e60     74 E4 05 F1 | 	add	objptr, ##63092
19e64     F2 24 02 FB | 	rdlong	local04, objptr
19e68     01 24 66 F0 | 	shl	local04, #1
19e6c     12 21 02 F1 | 	add	local02, local04
19e70     7B 00 00 FF 
19e74     72 E4 85 F1 | 	sub	objptr, ##63090
19e78     F2 28 C2 FA | 	rdbyte	local06, objptr
19e7c     3E E4 85 F1 | 	sub	objptr, #62
19e80     10 28 06 FA | 	mul	local06, #16
19e84     04 28 06 F1 | 	add	local06, #4
19e88     16 13 02 F6 | 	mov	arg01, local08
19e8c     B8 F3 BF FD | 	call	#_pspeek
19e90     FD 22 E2 F8 | 	getbyte	local03, result1, #0
19e94     41 E4 05 F1 | 	add	objptr, #65
19e98     F2 24 02 FB | 	rdlong	local04, objptr
19e9c     04 E4 05 F1 | 	add	objptr, #4
19ea0     F2 1E 02 FB | 	rdlong	local01, objptr
19ea4     45 E4 85 F1 | 	sub	objptr, #69
19ea8     0F 27 02 F6 | 	mov	local05, local01
19eac     10 13 02 F6 | 	mov	arg01, local02
19eb0     14 15 02 F6 | 	mov	arg02, local06
19eb4     11 17 02 F6 | 	mov	arg03, local03
19eb8     12 19 02 F6 | 	mov	arg04, local04
19ebc     13 1B 02 F6 | 	mov	arg05, local05
19ec0     A8 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
19ec4     7B 00 00 FF 
19ec8     B0 E4 05 F1 | 	add	objptr, ##63152
19ecc     F2 20 02 FB | 	rdlong	local02, objptr
19ed0     01 20 06 F1 | 	add	local02, #1
19ed4     F2 20 62 FC | 	wrlong	local02, objptr
19ed8     7B 00 00 FF 
19edc     B0 E4 85 F1 | 	sub	objptr, ##63152
19ee0     01 2C 06 F1 | 	add	local08, #1
19ee4     64 FF 9F FD | 	jmp	#LR__1985
19ee8                 | LR__1986
19ee8                 | LR__1987
19ee8     7B 00 00 FF 
19eec     AC E4 05 F1 | 	add	objptr, ##63148
19ef0     F2 12 02 FB | 	rdlong	arg01, objptr
19ef4     7B 00 00 FF 
19ef8     AC E4 85 F1 | 	sub	objptr, ##63148
19efc     B4 1F B0 FD | 	call	#_hg010b_spin2_putchar
19f00                 | LR__1988
19f00                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
19f00     7B 00 00 FF 
19f04     AC E4 05 F1 | 	add	objptr, ##63148
19f08     F2 20 02 FB | 	rdlong	local02, objptr
19f0c     7B 00 00 FF 
19f10     AC E4 85 F1 | 	sub	objptr, ##63148
19f14     01 20 56 F2 | 	cmps	local02, #1 wc
19f18     D0 00 90 CD |  if_b	jmp	#LR__1989
19f1c     7B 00 00 FF 
19f20     AC E4 05 F1 | 	add	objptr, ##63148
19f24     F2 24 02 FB | 	rdlong	local04, objptr
19f28     7B 00 00 FF 
19f2c     AC E4 85 F1 | 	sub	objptr, ##63148
19f30     12 23 02 F6 | 	mov	local03, local04
19f34     7F 22 56 F2 | 	cmps	local03, #127 wc
19f38     B0 00 90 3D |  if_ae	jmp	#LR__1989
19f3c     3C E4 05 F1 | 	add	objptr, #60
19f40     F2 1E E2 FA | 	rdword	local01, objptr
19f44     3C E4 85 F1 | 	sub	objptr, #60
19f48     0F 27 32 F9 | 	getword	local05, local01, #0
19f4c     FE 26 0E F2 | 	cmp	local05, #254 wz
19f50     79 00 00 AF 
19f54     D0 E5 05 A1 |  if_e	add	objptr, ##62416
19f58     F2 38 02 AB |  if_e	rdlong	local14, objptr
19f5c     79 00 00 AF 
19f60     D0 E5 85 A1 |  if_e	sub	objptr, ##62416
19f64     1C 2F 02 A6 |  if_e	mov	local09, local14
19f68     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
19f6c     7C 00 90 5D |  if_ne	jmp	#LR__1989
19f70     04 00 00 FF 
19f74     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19f78     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19f7c     04 00 00 FF 
19f80     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19f84     56 00 00 FF 
19f88     44 22 06 F6 | 	mov	local03, ##44100
19f8c     0C 24 C6 F9 | 	decod	local04, #12
19f90     00 26 06 F6 | 	mov	local05, #0
19f94     03 00 00 FF 
19f98     DE 1E 06 F6 | 	mov	local01, ##1758
19f9c     07 12 06 F6 | 	mov	arg01, #7
19fa0     56 00 00 FF 
19fa4     44 16 06 F6 | 	mov	arg03, ##44100
19fa8     0C 18 C6 F9 | 	decod	arg04, #12
19fac     00 1A 06 F6 | 	mov	arg05, #0
19fb0     03 00 00 FF 
19fb4     DE 1C 06 F6 | 	mov	arg06, ##1758
19fb8     0B 00 00 FF 
19fbc     CC E4 05 F1 | 	add	objptr, ##5836
19fc0     38 30 B0 FD | 	call	#_audio096_spin2_play
19fc4     0B 00 00 FF 
19fc8     CC E4 85 F1 | 	sub	objptr, ##5836
19fcc     2C 13 06 F6 | 	mov	arg01, #300
19fd0     6C 37 B0 FD | 	call	#__system___waitms
19fd4     07 12 06 F6 | 	mov	arg01, #7
19fd8     0B 00 00 FF 
19fdc     CC E4 05 F1 | 	add	objptr, ##5836
19fe0     68 31 B0 FD | 	call	#_audio096_spin2_stop
19fe4     0B 00 00 FF 
19fe8     CC E4 85 F1 | 	sub	objptr, ##5836
19fec                 | LR__1989
19fec                 | '  
19fec                 | '   if key4=key_enter then 
19fec     7B 00 00 FF 
19ff0     AC E4 05 F1 | 	add	objptr, ##63148
19ff4     F2 20 02 FB | 	rdlong	local02, objptr
19ff8     7B 00 00 FF 
19ffc     AC E4 85 F1 | 	sub	objptr, ##63148
1a000     8D 20 0E F2 | 	cmp	local02, #141 wz
1a004     F0 00 90 5D |  if_ne	jmp	#LR__1992
1a008     6B 01 00 FF 
1a00c     B2 20 06 F6 | 	mov	local02, ##@LR__5069
1a010     57 00 00 FF 
1a014     0C E4 05 F1 | 	add	objptr, ##44556
1a018     F2 20 62 FC | 	wrlong	local02, objptr
1a01c                 | ' 
1a01c                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1a01c                 | '     line$="" : for i=editor_spaces to 127
1a01c     18 E4 05 F1 | 	add	objptr, #24
1a020     F2 2C 02 FB | 	rdlong	local08, objptr
1a024     57 00 00 FF 
1a028     24 E4 85 F1 | 	sub	objptr, ##44580
1a02c                 | LR__1990
1a02c     80 2C 56 F2 | 	cmps	local08, #128 wc
1a030     8C 00 90 3D |  if_ae	jmp	#LR__1991
1a034     3E E4 05 F1 | 	add	objptr, #62
1a038     F2 1E C2 FA | 	rdbyte	local01, objptr
1a03c     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1a040     13 2F 02 F6 | 	mov	local09, local05
1a044     80 2E 06 FA | 	mul	local09, #128
1a048     3A E4 85 F1 | 	sub	objptr, #58
1a04c     F2 38 02 FB | 	rdlong	local14, objptr
1a050     04 E4 85 F1 | 	sub	objptr, #4
1a054     1C 13 02 F6 | 	mov	arg01, local14
1a058     17 13 02 F1 | 	add	arg01, local09
1a05c     16 13 02 F1 | 	add	arg01, local08
1a060     E4 F1 BF FD | 	call	#_pspeek
1a064     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1a068     7B 00 00 FF 
1a06c     B4 E4 05 F1 | 	add	objptr, ##63156
1a070     F2 24 62 FC | 	wrlong	local04, objptr
1a074     24 00 00 FF 
1a078     A8 E4 85 F1 | 	sub	objptr, ##18600
1a07c     F2 28 02 FB | 	rdlong	local06, objptr
1a080     57 00 00 FF 
1a084     0C E4 85 F1 | 	sub	objptr, ##44556
1a088     12 13 02 F6 | 	mov	arg01, local04
1a08c     C4 55 B0 FD | 	call	#__system__Chr_S
1a090     FD 14 02 F6 | 	mov	arg02, result1
1a094     14 13 02 F6 | 	mov	arg01, local06
1a098     0C 34 B0 FD | 	call	#__system___string_concat
1a09c     57 00 00 FF 
1a0a0     0C E4 05 F1 | 	add	objptr, ##44556
1a0a4     F2 FA 61 FC | 	wrlong	result1, objptr
1a0a8     57 00 00 FF 
1a0ac     0C E4 85 F1 | 	sub	objptr, ##44556
1a0b0     16 23 02 F6 | 	mov	local03, local08
1a0b4     01 22 06 F1 | 	add	local03, #1
1a0b8     11 2D 02 F6 | 	mov	local08, local03
1a0bc     6C FF 9F FD | 	jmp	#LR__1990
1a0c0                 | LR__1991
1a0c0     A8 23 B0 FD | 	call	#_hg010b_spin2_crlf
1a0c4     54 69 BE FD | 	call	#_interpret
1a0c8     6B 01 00 FF 
1a0cc     B3 20 06 F6 | 	mov	local02, ##@LR__5070
1a0d0     57 00 00 FF 
1a0d4     0C E4 05 F1 | 	add	objptr, ##44556
1a0d8     F2 20 62 FC | 	wrlong	local02, objptr
1a0dc     24 00 00 FF 
1a0e0     94 E4 05 F1 | 	add	objptr, ##18580
1a0e4     F2 00 68 FC | 	wrlong	#0, objptr
1a0e8     08 E4 05 F1 | 	add	objptr, #8
1a0ec     F2 00 68 FC | 	wrlong	#0, objptr
1a0f0     7B 00 00 FF 
1a0f4     A8 E4 85 F1 | 	sub	objptr, ##63144
1a0f8                 | LR__1992
1a0f8     7B 00 00 FF 
1a0fc     A4 E4 05 F1 | 	add	objptr, ##63140
1a100     F2 20 02 FB | 	rdlong	local02, objptr
1a104     10 21 E2 F8 | 	getbyte	local02, local02, #0
1a108     08 E4 05 F1 | 	add	objptr, #8
1a10c     F2 20 62 FC | 	wrlong	local02, objptr
1a110                 | '   'tab
1a110                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1a110     7B 00 00 FF 
1a114     AC E4 85 F1 | 	sub	objptr, ##63148
1a118     2B 20 0E F2 | 	cmp	local02, #43 wz
1a11c     B4 00 90 5D |  if_ne	jmp	#LR__1993
1a120     3C E4 05 F1 | 	add	objptr, #60
1a124     F2 24 E2 FA | 	rdword	local04, objptr
1a128     3C E4 85 F1 | 	sub	objptr, #60
1a12c     12 23 32 F9 | 	getword	local03, local04, #0
1a130     F0 22 16 F2 | 	cmp	local03, #240 wc
1a134     9C 00 90 CD |  if_b	jmp	#LR__1993
1a138     79 00 00 FF 
1a13c     D0 E5 05 F1 | 	add	objptr, ##62416
1a140     F2 1E 02 FB | 	rdlong	local01, objptr
1a144     79 00 00 FF 
1a148     D0 E5 85 F1 | 	sub	objptr, ##62416
1a14c     0F 27 02 F6 | 	mov	local05, local01
1a150     01 26 0E F2 | 	cmp	local05, #1 wz
1a154     7C 00 90 5D |  if_ne	jmp	#LR__1993
1a158     04 00 00 FF 
1a15c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1a160     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1a164     04 00 00 FF 
1a168     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1a16c     56 00 00 FF 
1a170     44 22 06 F6 | 	mov	local03, ##44100
1a174     0E 24 C6 F9 | 	decod	local04, #14
1a178     00 26 06 F6 | 	mov	local05, #0
1a17c     03 00 00 FF 
1a180     DE 1E 06 F6 | 	mov	local01, ##1758
1a184     00 12 06 F6 | 	mov	arg01, #0
1a188     56 00 00 FF 
1a18c     44 16 06 F6 | 	mov	arg03, ##44100
1a190     0E 18 C6 F9 | 	decod	arg04, #14
1a194     00 1A 06 F6 | 	mov	arg05, #0
1a198     03 00 00 FF 
1a19c     DE 1C 06 F6 | 	mov	arg06, ##1758
1a1a0     0B 00 00 FF 
1a1a4     CC E4 05 F1 | 	add	objptr, ##5836
1a1a8     50 2E B0 FD | 	call	#_audio096_spin2_play
1a1ac     0B 00 00 FF 
1a1b0     CC E4 85 F1 | 	sub	objptr, ##5836
1a1b4     2C 13 06 F6 | 	mov	arg01, #300
1a1b8     84 35 B0 FD | 	call	#__system___waitms
1a1bc     00 12 06 F6 | 	mov	arg01, #0
1a1c0     0B 00 00 FF 
1a1c4     CC E4 05 F1 | 	add	objptr, ##5836
1a1c8     80 2F B0 FD | 	call	#_audio096_spin2_stop
1a1cc     0B 00 00 FF 
1a1d0     CC E4 85 F1 | 	sub	objptr, ##5836
1a1d4                 | LR__1993
1a1d4                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1a1d4     7B 00 00 FF 
1a1d8     AC E4 05 F1 | 	add	objptr, ##63148
1a1dc     F2 20 02 FB | 	rdlong	local02, objptr
1a1e0     7B 00 00 FF 
1a1e4     AC E4 85 F1 | 	sub	objptr, ##63148
1a1e8     2B 20 0E F2 | 	cmp	local02, #43 wz
1a1ec     34 00 90 5D |  if_ne	jmp	#LR__1994
1a1f0     3C E4 05 F1 | 	add	objptr, #60
1a1f4     F2 24 E2 FA | 	rdword	local04, objptr
1a1f8     3C E4 85 F1 | 	sub	objptr, #60
1a1fc     12 23 32 F9 | 	getword	local03, local04, #0
1a200     F0 22 16 F2 | 	cmp	local03, #240 wc
1a204     1C 00 90 3D |  if_ae	jmp	#LR__1994
1a208     3C E4 05 F1 | 	add	objptr, #60
1a20c     F2 22 E2 FA | 	rdword	local03, objptr
1a210     3C E4 85 F1 | 	sub	objptr, #60
1a214     11 13 32 F9 | 	getword	arg01, local03, #0
1a218     08 12 06 F1 | 	add	arg01, #8
1a21c     F8 12 06 F5 | 	and	arg01, #248
1a220     E8 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1a224                 | LR__1994
1a224                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1a224                 | '   if key4=77 then i=127 : do: 
1a224     7B 00 00 FF 
1a228     AC E4 05 F1 | 	add	objptr, ##63148
1a22c     F2 20 02 FB | 	rdlong	local02, objptr
1a230     7B 00 00 FF 
1a234     AC E4 85 F1 | 	sub	objptr, ##63148
1a238     4D 20 0E F2 | 	cmp	local02, #77 wz
1a23c     74 00 90 5D |  if_ne	jmp	#LR__1998
1a240     7F 2C 06 F6 | 	mov	local08, #127
1a244                 | LR__1995
1a244                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then v.setcursorx(2*i) : exit loop 
1a244     3E E4 05 F1 | 	add	objptr, #62
1a248     F2 26 C2 FA | 	rdbyte	local05, objptr
1a24c     13 25 E2 F8 | 	getbyte	local04, local05, #0
1a250     12 1F 02 F6 | 	mov	local01, local04
1a254     80 1E 06 FA | 	mul	local01, #128
1a258     3A E4 85 F1 | 	sub	objptr, #58
1a25c     F2 2E 02 FB | 	rdlong	local09, objptr
1a260     04 E4 85 F1 | 	sub	objptr, #4
1a264     17 23 02 F6 | 	mov	local03, local09
1a268     0F 23 02 F1 | 	add	local03, local01
1a26c     16 23 02 F1 | 	add	local03, local08
1a270     11 13 02 F6 | 	mov	arg01, local03
1a274     D0 EF BF FD | 	call	#_pspeek
1a278     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1a27c     20 20 0E F2 | 	cmp	local02, #32 wz
1a280     10 00 90 AD |  if_e	jmp	#LR__1996
1a284     16 13 02 F6 | 	mov	arg01, local08
1a288     01 12 66 F0 | 	shl	arg01, #1
1a28c     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1a290     20 00 90 FD | 	jmp	#LR__1997
1a294                 | LR__1996
1a294     01 2C 86 F1 | 	sub	local08, #1
1a298     57 00 00 FF 
1a29c     24 E4 05 F1 | 	add	objptr, ##44580
1a2a0     F2 20 02 FB | 	rdlong	local02, objptr
1a2a4     57 00 00 FF 
1a2a8     24 E4 85 F1 | 	sub	objptr, ##44580
1a2ac     10 2D 0A F2 | 	cmp	local08, local02 wz
1a2b0     90 FF 9F 5D |  if_ne	jmp	#LR__1995
1a2b4                 | LR__1997
1a2b4                 | LR__1998
1a2b4                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1a2b4     57 00 00 FF 
1a2b8     24 E4 05 F1 | 	add	objptr, ##44580
1a2bc     F2 20 02 FB | 	rdlong	local02, objptr
1a2c0     57 00 00 FF 
1a2c4     24 E4 85 F1 | 	sub	objptr, ##44580
1a2c8     10 2D 0A F2 | 	cmp	local08, local02 wz
1a2cc     24 00 90 5D |  if_ne	jmp	#LR__1999
1a2d0     57 00 00 FF 
1a2d4     24 E4 05 F1 | 	add	objptr, ##44580
1a2d8     F2 24 02 FB | 	rdlong	local04, objptr
1a2dc     57 00 00 FF 
1a2e0     24 E4 85 F1 | 	sub	objptr, ##44580
1a2e4     12 23 02 F6 | 	mov	local03, local04
1a2e8     11 13 02 F6 | 	mov	arg01, local03
1a2ec     01 12 66 F0 | 	shl	arg01, #1
1a2f0     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1a2f4                 | LR__1999
1a2f4                 | '   
1a2f4                 | '   
1a2f4                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1a2f4     7B 00 00 FF 
1a2f8     AC E4 05 F1 | 	add	objptr, ##63148
1a2fc     F2 20 02 FB | 	rdlong	local02, objptr
1a300     7B 00 00 FF 
1a304     AC E4 85 F1 | 	sub	objptr, ##63148
1a308     4A 20 0E F2 | 	cmp	local02, #74 wz
1a30c     24 00 90 5D |  if_ne	jmp	#LR__2000
1a310     57 00 00 FF 
1a314     24 E4 05 F1 | 	add	objptr, ##44580
1a318     F2 24 02 FB | 	rdlong	local04, objptr
1a31c     57 00 00 FF 
1a320     24 E4 85 F1 | 	sub	objptr, ##44580
1a324     12 23 02 F6 | 	mov	local03, local04
1a328     11 13 02 F6 | 	mov	arg01, local03
1a32c     01 12 66 F0 | 	shl	arg01, #1
1a330     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a334                 | LR__2000
1a334                 | '   if key4=75 then v.setcursory(0)
1a334     7B 00 00 FF 
1a338     AC E4 05 F1 | 	add	objptr, ##63148
1a33c     F2 20 02 FB | 	rdlong	local02, objptr
1a340     7B 00 00 FF 
1a344     AC E4 85 F1 | 	sub	objptr, ##63148
1a348     4B 20 0E F2 | 	cmp	local02, #75 wz
1a34c     00 12 06 A6 |  if_e	mov	arg01, #0
1a350     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1a354                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1a354     7B 00 00 FF 
1a358     AC E4 05 F1 | 	add	objptr, ##63148
1a35c     F2 20 02 FB | 	rdlong	local02, objptr
1a360     7B 00 00 FF 
1a364     AC E4 85 F1 | 	sub	objptr, ##63148
1a368     4E 20 0E F2 | 	cmp	local02, #78 wz
1a36c     24 12 06 A6 |  if_e	mov	arg01, #36
1a370     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1a374                 | '   
1a374                 | '   if key4=76 then 'del
1a374     7B 00 00 FF 
1a378     AC E4 05 F1 | 	add	objptr, ##63148
1a37c     F2 20 02 FB | 	rdlong	local02, objptr
1a380     7B 00 00 FF 
1a384     AC E4 85 F1 | 	sub	objptr, ##63148
1a388     4C 20 0E F2 | 	cmp	local02, #76 wz
1a38c     9C 01 90 5D |  if_ne	jmp	#LR__2005
1a390                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1a390     3E E4 05 F1 | 	add	objptr, #62
1a394     F2 22 C2 FA | 	rdbyte	local03, objptr
1a398     11 25 E2 F8 | 	getbyte	local04, local03, #0
1a39c     80 24 06 FA | 	mul	local04, #128
1a3a0     3A E4 85 F1 | 	sub	objptr, #58
1a3a4     F2 3C 02 FB | 	rdlong	local16, objptr
1a3a8     1E 2D 02 F6 | 	mov	local08, local16
1a3ac     12 2D 02 F1 | 	add	local08, local04
1a3b0     38 E4 05 F1 | 	add	objptr, #56
1a3b4     F2 1E E2 FA | 	rdword	local01, objptr
1a3b8     0F 39 52 F6 | 	abs	local14, local01 wc
1a3bc     01 38 46 F0 | 	shr	local14, #1
1a3c0     1C 2D 82 F3 | 	sumc	local08, local14
1a3c4     11 23 E2 F8 | 	getbyte	local03, local03, #0
1a3c8     80 22 06 FA | 	mul	local03, #128
1a3cc     3C E4 85 F1 | 	sub	objptr, #60
1a3d0     11 3D 02 F1 | 	add	local16, local03
1a3d4     80 3C 06 F1 | 	add	local16, #128
1a3d8                 | LR__2001
1a3d8     1E 2D 52 F2 | 	cmps	local08, local16 wc
1a3dc     20 00 90 3D |  if_ae	jmp	#LR__2002
1a3e0     16 13 02 F6 | 	mov	arg01, local08
1a3e4     01 12 06 F1 | 	add	arg01, #1
1a3e8     5C EE BF FD | 	call	#_pspeek
1a3ec     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1a3f0     16 13 02 F6 | 	mov	arg01, local08
1a3f4     08 EE BF FD | 	call	#_pspoke
1a3f8     01 2C 06 F1 | 	add	local08, #1
1a3fc     D8 FF 9F FD | 	jmp	#LR__2001
1a400                 | LR__2002
1a400     3E E4 05 F1 | 	add	objptr, #62
1a404     F2 26 C2 FA | 	rdbyte	local05, objptr
1a408     80 26 06 FA | 	mul	local05, #128
1a40c     3A E4 85 F1 | 	sub	objptr, #58
1a410     F2 12 02 FB | 	rdlong	arg01, objptr
1a414     04 E4 85 F1 | 	sub	objptr, #4
1a418     13 13 02 F1 | 	add	arg01, local05
1a41c     7F 12 06 F1 | 	add	arg01, #127
1a420     20 14 06 F6 | 	mov	arg02, #32
1a424     D8 ED BF FD | 	call	#_pspoke
1a428     7B 00 00 FF 
1a42c     B0 E4 05 F1 | 	add	objptr, ##63152
1a430     F2 00 68 FC | 	wrlong	#0, objptr
1a434     7B 00 00 FF 
1a438     72 E4 85 F1 | 	sub	objptr, ##63090
1a43c     F2 22 C2 FA | 	rdbyte	local03, objptr
1a440     11 25 E2 F8 | 	getbyte	local04, local03, #0
1a444     80 24 06 FA | 	mul	local04, #128
1a448     3A E4 85 F1 | 	sub	objptr, #58
1a44c     F2 26 02 FB | 	rdlong	local05, objptr
1a450     13 2D 02 F6 | 	mov	local08, local05
1a454     12 2D 02 F1 | 	add	local08, local04
1a458     38 E4 05 F1 | 	add	objptr, #56
1a45c     F2 2E E2 FA | 	rdword	local09, objptr
1a460     17 1F 32 F9 | 	getword	local01, local09, #0
1a464     0F 39 52 F6 | 	abs	local14, local01 wc
1a468     01 38 46 F0 | 	shr	local14, #1
1a46c     1C 39 82 F6 | 	negc	local14, local14
1a470     1C 2D 02 F1 | 	add	local08, local14
1a474     11 23 E2 F8 | 	getbyte	local03, local03, #0
1a478     80 22 06 FA | 	mul	local03, #128
1a47c     13 25 02 F6 | 	mov	local04, local05
1a480     3C E4 85 F1 | 	sub	objptr, #60
1a484     12 3F 02 F6 | 	mov	local17, local04
1a488     11 3F 02 F1 | 	add	local17, local03
1a48c     80 3E 06 F1 | 	add	local17, #128
1a490                 | LR__2003
1a490     1F 2D 52 F2 | 	cmps	local08, local17 wc
1a494     94 00 90 3D |  if_ae	jmp	#LR__2004
1a498     3C E4 05 F1 | 	add	objptr, #60
1a49c     F2 20 E2 FA | 	rdword	local02, objptr
1a4a0     7B 00 00 FF 
1a4a4     74 E4 05 F1 | 	add	objptr, ##63092
1a4a8     F2 24 02 FB | 	rdlong	local04, objptr
1a4ac     01 24 66 F0 | 	shl	local04, #1
1a4b0     12 21 02 F1 | 	add	local02, local04
1a4b4     7B 00 00 FF 
1a4b8     72 E4 85 F1 | 	sub	objptr, ##63090
1a4bc     F2 28 C2 FA | 	rdbyte	local06, objptr
1a4c0     3E E4 85 F1 | 	sub	objptr, #62
1a4c4     10 28 06 FA | 	mul	local06, #16
1a4c8     04 28 06 F1 | 	add	local06, #4
1a4cc     16 13 02 F6 | 	mov	arg01, local08
1a4d0     74 ED BF FD | 	call	#_pspeek
1a4d4     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1a4d8     41 E4 05 F1 | 	add	objptr, #65
1a4dc     F2 24 02 FB | 	rdlong	local04, objptr
1a4e0     04 E4 05 F1 | 	add	objptr, #4
1a4e4     F2 1E 02 FB | 	rdlong	local01, objptr
1a4e8     45 E4 85 F1 | 	sub	objptr, #69
1a4ec     0F 27 02 F6 | 	mov	local05, local01
1a4f0     10 13 02 F6 | 	mov	arg01, local02
1a4f4     14 15 02 F6 | 	mov	arg02, local06
1a4f8     11 17 02 F6 | 	mov	arg03, local03
1a4fc     12 19 02 F6 | 	mov	arg04, local04
1a500     13 1B 02 F6 | 	mov	arg05, local05
1a504     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1a508     7B 00 00 FF 
1a50c     B0 E4 05 F1 | 	add	objptr, ##63152
1a510     F2 20 02 FB | 	rdlong	local02, objptr
1a514     01 20 06 F1 | 	add	local02, #1
1a518     F2 20 62 FC | 	wrlong	local02, objptr
1a51c     7B 00 00 FF 
1a520     B0 E4 85 F1 | 	sub	objptr, ##63152
1a524     01 2C 06 F1 | 	add	local08, #1
1a528     64 FF 9F FD | 	jmp	#LR__2003
1a52c                 | LR__2004
1a52c                 | LR__2005
1a52c                 | '    
1a52c                 | '   'backspace
1a52c                 | '   if key4 = 42 then 
1a52c     7B 00 00 FF 
1a530     AC E4 05 F1 | 	add	objptr, ##63148
1a534     F2 20 02 FB | 	rdlong	local02, objptr
1a538     7B 00 00 FF 
1a53c     AC E4 85 F1 | 	sub	objptr, ##63148
1a540     2A 20 0E F2 | 	cmp	local02, #42 wz
1a544     0C 02 90 5D |  if_ne	jmp	#LR__2011
1a548                 | '       if v.cursor_x>editor_spaces*2 then 
1a548     3C E4 05 F1 | 	add	objptr, #60
1a54c     F2 20 E2 FA | 	rdword	local02, objptr
1a550     56 00 00 FF 
1a554     E8 E5 05 F1 | 	add	objptr, ##44520
1a558     F2 26 02 FB | 	rdlong	local05, objptr
1a55c     57 00 00 FF 
1a560     24 E4 85 F1 | 	sub	objptr, ##44580
1a564     13 25 02 F6 | 	mov	local04, local05
1a568     12 23 02 F6 | 	mov	local03, local04
1a56c     01 22 66 F0 | 	shl	local03, #1
1a570     11 21 5A F2 | 	cmps	local02, local03 wcz
1a574     B8 01 90 ED |  if_be	jmp	#LR__2009
1a578     3C E4 05 F1 | 	add	objptr, #60
1a57c     F2 12 E2 FA | 	rdword	arg01, objptr
1a580     02 12 86 F1 | 	sub	arg01, #2
1a584     02 E4 05 F1 | 	add	objptr, #2
1a588     F2 14 C2 FA | 	rdbyte	arg02, objptr
1a58c     3E E4 85 F1 | 	sub	objptr, #62
1a590     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a594                 | '          position v.cursor_x-2,v.cursor_y
1a594                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1a594     3E E4 05 F1 | 	add	objptr, #62
1a598     F2 22 C2 FA | 	rdbyte	local03, objptr
1a59c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1a5a0     80 24 06 FA | 	mul	local04, #128
1a5a4     3A E4 85 F1 | 	sub	objptr, #58
1a5a8     F2 40 02 FB | 	rdlong	local18, objptr
1a5ac     20 2D 02 F6 | 	mov	local08, local18
1a5b0     12 2D 02 F1 | 	add	local08, local04
1a5b4     38 E4 05 F1 | 	add	objptr, #56
1a5b8     F2 1E E2 FA | 	rdword	local01, objptr
1a5bc     0F 39 52 F6 | 	abs	local14, local01 wc
1a5c0     01 38 46 F0 | 	shr	local14, #1
1a5c4     1C 2D 82 F3 | 	sumc	local08, local14
1a5c8     11 23 E2 F8 | 	getbyte	local03, local03, #0
1a5cc     80 22 06 FA | 	mul	local03, #128
1a5d0     3C E4 85 F1 | 	sub	objptr, #60
1a5d4     11 41 02 F1 | 	add	local18, local03
1a5d8     80 40 06 F1 | 	add	local18, #128
1a5dc                 | LR__2006
1a5dc     20 2D 52 F2 | 	cmps	local08, local18 wc
1a5e0     20 00 90 3D |  if_ae	jmp	#LR__2007
1a5e4     16 13 02 F6 | 	mov	arg01, local08
1a5e8     01 12 06 F1 | 	add	arg01, #1
1a5ec     58 EC BF FD | 	call	#_pspeek
1a5f0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1a5f4     16 13 02 F6 | 	mov	arg01, local08
1a5f8     04 EC BF FD | 	call	#_pspoke
1a5fc     01 2C 06 F1 | 	add	local08, #1
1a600     D8 FF 9F FD | 	jmp	#LR__2006
1a604                 | LR__2007
1a604     3E E4 05 F1 | 	add	objptr, #62
1a608     F2 26 C2 FA | 	rdbyte	local05, objptr
1a60c     80 26 06 FA | 	mul	local05, #128
1a610     3A E4 85 F1 | 	sub	objptr, #58
1a614     F2 12 02 FB | 	rdlong	arg01, objptr
1a618     04 E4 85 F1 | 	sub	objptr, #4
1a61c     13 13 02 F1 | 	add	arg01, local05
1a620     7F 12 06 F1 | 	add	arg01, #127
1a624     20 14 06 F6 | 	mov	arg02, #32
1a628     D4 EB BF FD | 	call	#_pspoke
1a62c     7B 00 00 FF 
1a630     B0 E4 05 F1 | 	add	objptr, ##63152
1a634     F2 00 68 FC | 	wrlong	#0, objptr
1a638     7B 00 00 FF 
1a63c     72 E4 85 F1 | 	sub	objptr, ##63090
1a640     F2 22 C2 FA | 	rdbyte	local03, objptr
1a644     11 25 E2 F8 | 	getbyte	local04, local03, #0
1a648     80 24 06 FA | 	mul	local04, #128
1a64c     3A E4 85 F1 | 	sub	objptr, #58
1a650     F2 26 02 FB | 	rdlong	local05, objptr
1a654     13 2D 02 F6 | 	mov	local08, local05
1a658     12 2D 02 F1 | 	add	local08, local04
1a65c     38 E4 05 F1 | 	add	objptr, #56
1a660     F2 2E E2 FA | 	rdword	local09, objptr
1a664     17 1F 32 F9 | 	getword	local01, local09, #0
1a668     0F 39 52 F6 | 	abs	local14, local01 wc
1a66c     01 38 46 F0 | 	shr	local14, #1
1a670     1C 39 82 F6 | 	negc	local14, local14
1a674     1C 2D 02 F1 | 	add	local08, local14
1a678     11 23 E2 F8 | 	getbyte	local03, local03, #0
1a67c     80 22 06 FA | 	mul	local03, #128
1a680     13 25 02 F6 | 	mov	local04, local05
1a684     3C E4 85 F1 | 	sub	objptr, #60
1a688     12 43 02 F6 | 	mov	local19, local04
1a68c     11 43 02 F1 | 	add	local19, local03
1a690     80 42 06 F1 | 	add	local19, #128
1a694                 | LR__2008
1a694     21 2D 52 F2 | 	cmps	local08, local19 wc
1a698     B8 00 90 3D |  if_ae	jmp	#LR__2010
1a69c     3C E4 05 F1 | 	add	objptr, #60
1a6a0     F2 20 E2 FA | 	rdword	local02, objptr
1a6a4     7B 00 00 FF 
1a6a8     74 E4 05 F1 | 	add	objptr, ##63092
1a6ac     F2 24 02 FB | 	rdlong	local04, objptr
1a6b0     01 24 66 F0 | 	shl	local04, #1
1a6b4     12 21 02 F1 | 	add	local02, local04
1a6b8     7B 00 00 FF 
1a6bc     72 E4 85 F1 | 	sub	objptr, ##63090
1a6c0     F2 28 C2 FA | 	rdbyte	local06, objptr
1a6c4     3E E4 85 F1 | 	sub	objptr, #62
1a6c8     10 28 06 FA | 	mul	local06, #16
1a6cc     04 28 06 F1 | 	add	local06, #4
1a6d0     16 13 02 F6 | 	mov	arg01, local08
1a6d4     70 EB BF FD | 	call	#_pspeek
1a6d8     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1a6dc     41 E4 05 F1 | 	add	objptr, #65
1a6e0     F2 24 02 FB | 	rdlong	local04, objptr
1a6e4     04 E4 05 F1 | 	add	objptr, #4
1a6e8     F2 1E 02 FB | 	rdlong	local01, objptr
1a6ec     45 E4 85 F1 | 	sub	objptr, #69
1a6f0     0F 27 02 F6 | 	mov	local05, local01
1a6f4     10 13 02 F6 | 	mov	arg01, local02
1a6f8     14 15 02 F6 | 	mov	arg02, local06
1a6fc     11 17 02 F6 | 	mov	arg03, local03
1a700     12 19 02 F6 | 	mov	arg04, local04
1a704     13 1B 02 F6 | 	mov	arg05, local05
1a708     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1a70c     7B 00 00 FF 
1a710     B0 E4 05 F1 | 	add	objptr, ##63152
1a714     F2 20 02 FB | 	rdlong	local02, objptr
1a718     01 20 06 F1 | 	add	local02, #1
1a71c     F2 20 62 FC | 	wrlong	local02, objptr
1a720     7B 00 00 FF 
1a724     B0 E4 85 F1 | 	sub	objptr, ##63152
1a728     01 2C 06 F1 | 	add	local08, #1
1a72c     64 FF 9F FD | 	jmp	#LR__2008
1a730                 | LR__2009
1a730     6B 01 00 FF 
1a734     B4 20 06 F6 | 	mov	local02, ##@LR__5071
1a738     57 00 00 FF 
1a73c     0C E4 05 F1 | 	add	objptr, ##44556
1a740     F2 20 62 FC | 	wrlong	local02, objptr
1a744     56 00 00 FF 
1a748     D0 E5 85 F1 | 	sub	objptr, ##44496
1a74c     F2 08 58 FC | 	wrword	#4, objptr
1a750     3C E4 85 F1 | 	sub	objptr, #60
1a754                 | LR__2010
1a754                 | LR__2011
1a754                 | '      if key4= 82 then 
1a754     7B 00 00 FF 
1a758     AC E4 05 F1 | 	add	objptr, ##63148
1a75c     F2 20 02 FB | 	rdlong	local02, objptr
1a760     7B 00 00 FF 
1a764     AC E4 85 F1 | 	sub	objptr, ##63148
1a768     52 20 0E F2 | 	cmp	local02, #82 wz
1a76c     50 00 90 5D |  if_ne	jmp	#LR__2012
1a770                 | ' return cursor_y
1a770     3E E4 05 F1 | 	add	objptr, #62
1a774     F2 20 C2 FA | 	rdbyte	local02, objptr
1a778     01 20 86 F1 | 	sub	local02, #1
1a77c     7B 00 00 FF 
1a780     7A E4 05 F1 | 	add	objptr, ##63098
1a784     F2 20 62 FC | 	wrlong	local02, objptr
1a788     7B 00 00 FF 
1a78c     B8 E4 85 F1 | 	sub	objptr, ##63160
1a790     00 20 56 F2 | 	cmps	local02, #0 wc
1a794     7B 00 00 CF 
1a798     B8 E4 05 C1 |  if_b	add	objptr, ##63160
1a79c     F2 00 68 CC |  if_b	wrlong	#0, objptr
1a7a0     7B 00 00 CF 
1a7a4     B8 E4 85 C1 |  if_b	sub	objptr, ##63160
1a7a8     7B 00 00 FF 
1a7ac     B8 E4 05 F1 | 	add	objptr, ##63160
1a7b0     F2 12 02 FB | 	rdlong	arg01, objptr
1a7b4     7B 00 00 FF 
1a7b8     B8 E4 85 F1 | 	sub	objptr, ##63160
1a7bc     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1a7c0                 | LR__2012
1a7c0                 | '    if key4= 81 then
1a7c0     7B 00 00 FF 
1a7c4     AC E4 05 F1 | 	add	objptr, ##63148
1a7c8     F2 20 02 FB | 	rdlong	local02, objptr
1a7cc     7B 00 00 FF 
1a7d0     AC E4 85 F1 | 	sub	objptr, ##63148
1a7d4     51 20 0E F2 | 	cmp	local02, #81 wz
1a7d8     50 00 90 5D |  if_ne	jmp	#LR__2013
1a7dc                 | ' return cursor_y
1a7dc     3E E4 05 F1 | 	add	objptr, #62
1a7e0     F2 20 C2 FA | 	rdbyte	local02, objptr
1a7e4     01 20 06 F1 | 	add	local02, #1
1a7e8     7B 00 00 FF 
1a7ec     7A E4 05 F1 | 	add	objptr, ##63098
1a7f0     F2 20 62 FC | 	wrlong	local02, objptr
1a7f4     7B 00 00 FF 
1a7f8     B8 E4 85 F1 | 	sub	objptr, ##63160
1a7fc     25 20 56 F2 | 	cmps	local02, #37 wc
1a800     7B 00 00 3F 
1a804     B8 E4 05 31 |  if_ae	add	objptr, ##63160
1a808     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1a80c     7B 00 00 3F 
1a810     B8 E4 85 31 |  if_ae	sub	objptr, ##63160
1a814     7B 00 00 FF 
1a818     B8 E4 05 F1 | 	add	objptr, ##63160
1a81c     F2 12 02 FB | 	rdlong	arg01, objptr
1a820     7B 00 00 FF 
1a824     B8 E4 85 F1 | 	sub	objptr, ##63160
1a828     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1a82c                 | LR__2013
1a82c                 | '    if key4= 80 then
1a82c     7B 00 00 FF 
1a830     AC E4 05 F1 | 	add	objptr, ##63148
1a834     F2 20 02 FB | 	rdlong	local02, objptr
1a838     7B 00 00 FF 
1a83c     AC E4 85 F1 | 	sub	objptr, ##63148
1a840     50 20 0E F2 | 	cmp	local02, #80 wz
1a844     6C 00 90 5D |  if_ne	jmp	#LR__2014
1a848                 | ' return cursor_x
1a848     3C E4 05 F1 | 	add	objptr, #60
1a84c     F2 20 E2 FA | 	rdword	local02, objptr
1a850     02 20 86 F1 | 	sub	local02, #2
1a854     7B 00 00 FF 
1a858     80 E4 05 F1 | 	add	objptr, ##63104
1a85c     F2 20 62 FC | 	wrlong	local02, objptr
1a860                 | '      if cx<editor_spaces then cx=editor_spaces
1a860     24 00 00 FF 
1a864     98 E4 85 F1 | 	sub	objptr, ##18584
1a868     F2 24 02 FB | 	rdlong	local04, objptr
1a86c     57 00 00 FF 
1a870     24 E4 85 F1 | 	sub	objptr, ##44580
1a874     12 23 02 F6 | 	mov	local03, local04
1a878     11 21 52 F2 | 	cmps	local02, local03 wc
1a87c     57 00 00 CF 
1a880     24 E4 05 C1 |  if_b	add	objptr, ##44580
1a884     F2 20 02 CB |  if_b	rdlong	local02, objptr
1a888     24 00 00 CF 
1a88c     98 E4 05 C1 |  if_b	add	objptr, ##18584
1a890     F2 20 62 CC |  if_b	wrlong	local02, objptr
1a894     7B 00 00 CF 
1a898     BC E4 85 C1 |  if_b	sub	objptr, ##63164
1a89c     7B 00 00 FF 
1a8a0     BC E4 05 F1 | 	add	objptr, ##63164
1a8a4     F2 12 02 FB | 	rdlong	arg01, objptr
1a8a8     7B 00 00 FF 
1a8ac     BC E4 85 F1 | 	sub	objptr, ##63164
1a8b0     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a8b4                 | LR__2014
1a8b4                 | '    if key4= 79 then
1a8b4     7B 00 00 FF 
1a8b8     AC E4 05 F1 | 	add	objptr, ##63148
1a8bc     F2 20 02 FB | 	rdlong	local02, objptr
1a8c0     7B 00 00 FF 
1a8c4     AC E4 85 F1 | 	sub	objptr, ##63148
1a8c8     4F 20 0E F2 | 	cmp	local02, #79 wz
1a8cc     50 00 90 5D |  if_ne	jmp	#LR__2015
1a8d0                 | ' return cursor_x
1a8d0     3C E4 05 F1 | 	add	objptr, #60
1a8d4     F2 20 E2 FA | 	rdword	local02, objptr
1a8d8     02 20 06 F1 | 	add	local02, #2
1a8dc     7B 00 00 FF 
1a8e0     80 E4 05 F1 | 	add	objptr, ##63104
1a8e4     F2 20 62 FC | 	wrlong	local02, objptr
1a8e8                 | '      if cx>254  then cx=254 
1a8e8     7B 00 00 FF 
1a8ec     BC E4 85 F1 | 	sub	objptr, ##63164
1a8f0     FF 20 56 F2 | 	cmps	local02, #255 wc
1a8f4     7B 00 00 3F 
1a8f8     BC E4 05 31 |  if_ae	add	objptr, ##63164
1a8fc     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1a900     7B 00 00 3F 
1a904     BC E4 85 31 |  if_ae	sub	objptr, ##63164
1a908     7B 00 00 FF 
1a90c     BC E4 05 F1 | 	add	objptr, ##63164
1a910     F2 12 02 FB | 	rdlong	arg01, objptr
1a914     7B 00 00 FF 
1a918     BC E4 85 F1 | 	sub	objptr, ##63164
1a91c     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a920                 | LR__2015
1a920                 | '   ' print key3 and 255
1a920                 | '    
1a920                 | '    if key4=73 then ' ins
1a920     7B 00 00 FF 
1a924     AC E4 05 F1 | 	add	objptr, ##63148
1a928     F2 28 02 FB | 	rdlong	local06, objptr
1a92c     7B 00 00 FF 
1a930     AC E4 85 F1 | 	sub	objptr, ##63148
1a934     49 28 0E F2 | 	cmp	local06, #73 wz
1a938     38 00 90 5D |  if_ne	jmp	#LR__2018
1a93c     7B 00 00 FF 
1a940     98 E4 05 F1 | 	add	objptr, ##63128
1a944     F2 20 02 FB | 	rdlong	local02, objptr
1a948     10 29 22 F6 | 	not	local06, local02
1a94c     F2 28 62 FC | 	wrlong	local06, objptr
1a950                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1a950     7B 00 00 FF 
1a954     98 E4 85 F1 | 	sub	objptr, ##63128
1a958     00 28 0E F2 | 	cmp	local06, #0 wz
1a95c     0C 00 90 AD |  if_e	jmp	#LR__2016
1a960     0E 12 06 F6 | 	mov	arg01, #14
1a964     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1a968     08 00 90 FD | 	jmp	#LR__2017
1a96c                 | LR__2016
1a96c     00 12 06 F6 | 	mov	arg01, #0
1a970     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1a974                 | LR__2017
1a974                 | LR__2018
1a974     7B 00 00 FF 
1a978     A4 E4 05 F1 | 	add	objptr, ##63140
1a97c     F2 00 68 FC | 	wrlong	#0, objptr
1a980     7B 00 00 FF 
1a984     A4 E4 85 F1 | 	sub	objptr, ##63140
1a988     A4 EE 9F FD | 	jmp	#LR__1970
1a98c     A7 F0 03 F6 | 	mov	ptra, fp
1a990     B2 00 A0 FD | 	call	#popregs_
1a994                 | _program_ret
1a994     2D 00 64 FD | 	ret
1a998                 | 
1a998                 | ' '' this is not a main program.
1a998                 | ' 
1a998                 | ' '****************************************************************************************************************
1a998                 | ' '                                                                                                             	*
1a998                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1a998                 | ' '                                                                                                            	*
1a998                 | ' ' base - HDMI base pin												*
1a998                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1a998                 | ' '														*
1a998                 | ' '														*
1a998                 | ' '****************************************************************************************************************
1a998                 | ' 
1a998                 | ' pub start(base,mb):result |i
1a998                 | _hg010b_spin2_start
1a998                 | ' 
1a998                 | ' '--------------------------- initialize pointers and variables
1a998                 | ' 
1a998                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1a998     34 E4 05 F1 | 	add	objptr, #52
1a99c     F2 FA 01 F6 | 	mov	result1, objptr
1a9a0     28 E4 85 F1 | 	sub	objptr, #40
1a9a4     F2 FA 61 FC | 	wrlong	result1, objptr
1a9a8                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1a9a8                 | ' hdmibase:=base							' HDMI base pin, 8*n
1a9a8     18 E4 05 F1 | 	add	objptr, #24
1a9ac     F2 12 62 FC | 	wrlong	arg01, objptr
1a9b0                 | ' mailbox_ptr:=mb		
1a9b0     04 E4 05 F1 | 	add	objptr, #4
1a9b4     F2 14 62 FC | 	wrlong	arg02, objptr
1a9b8                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1a9b8     C1 E5 05 F1 | 	add	objptr, #449
1a9bc     F2 14 62 FC | 	wrlong	arg02, objptr
1a9c0                 | ' sprite_ptr:=@spr1ptr
1a9c0     D8 E4 85 F1 | 	sub	objptr, #216
1a9c4     F2 FA 01 F6 | 	mov	result1, objptr
1a9c8     E5 E4 85 F1 | 	sub	objptr, #229
1a9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1a9d0                 | ' 
1a9d0                 | ' 		'
1a9d0                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1a9d0     E5 E4 05 F1 | 	add	objptr, #229
1a9d4     F2 FA 01 FB | 	rdlong	result1, objptr
1a9d8     D0 FA 05 F1 | 	add	result1, #208
1a9dc     FD 10 58 FC | 	wrword	#8, result1
1a9e0                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1a9e0     F2 16 02 FB | 	rdlong	arg03, objptr
1a9e4     D2 16 06 F1 | 	add	arg03, #210
1a9e8     0B 21 58 FC | 	wrword	#16, arg03
1a9ec                 | ' leading_spaces:=0				'
1a9ec     A5 E5 05 F1 | 	add	objptr, #421
1a9f0     F2 00 68 FC | 	wrlong	#0, objptr
1a9f4                 | ' 
1a9f4                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1a9f4     99 E4 85 F1 | 	sub	objptr, #153
1a9f8     00 00 A0 FF 
1a9fc     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1aa00                 | ' emptydl[1]:=0
1aa00     04 E4 05 F1 | 	add	objptr, #4
1aa04     F2 00 68 FC | 	wrlong	#0, objptr
1aa08                 | ' 
1aa08                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1aa08                 | ' 
1aa08                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1aa08     28 E5 85 F1 | 	sub	objptr, #296
1aa0c     F2 02 68 FC | 	wrlong	#1, objptr
1aa10                 | ' if s_debug<>0
1aa10                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1aa10     20 00 80 FF 
1aa14     F2 00 68 FC | 	wrlong	##16384, objptr
1aa18     F9 E4 85 F1 | 	sub	objptr, #249
1aa1c                 | ' setmode()							' set the mode, see below
1aa1c     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1aa20                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1aa20     49 E4 05 F1 | 	add	objptr, #73
1aa24     F2 FA 01 F6 | 	mov	result1, objptr
1aa28     35 E4 85 F1 | 	sub	objptr, #53
1aa2c     F2 FA 61 FC | 	wrlong	result1, objptr
1aa30                 | ' cursor_ptr:=@cursor_x						
1aa30     28 E4 05 F1 | 	add	objptr, #40
1aa34     F2 16 02 F6 | 	mov	arg03, objptr
1aa38     2C E4 85 F1 | 	sub	objptr, #44
1aa3c     F2 16 62 FC | 	wrlong	arg03, objptr
1aa40                 | ' fontnum:=0  							' start with a PC type font 
1aa40     55 E4 05 F1 | 	add	objptr, #85
1aa44     F2 00 68 FC | 	wrlong	#0, objptr
1aa48                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1aa48     1C E4 05 F1 | 	add	objptr, #28
1aa4c     F2 12 02 F6 | 	mov	arg01, objptr
1aa50     81 E4 85 F1 | 	sub	objptr, #129
1aa54     10 00 00 FF 
1aa58     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1aa5c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1aa60     10 00 00 FF 
1aa64     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1aa68     10 16 06 F6 | 	mov	arg03, #16
1aa6c     FC 28 B0 FD | 	call	#__system____builtin_memmove
1aa70                 | ' leading_spaces:=0
1aa70     01 00 00 FF 
1aa74     B6 E4 05 F1 | 	add	objptr, ##694
1aa78     F2 00 68 FC | 	wrlong	#0, objptr
1aa7c     01 00 00 FF 
1aa80     B6 E4 85 F1 | 	sub	objptr, ##694
1aa84                 | ' '---------------------------- initialize a cursor (MSDOS type)
1aa84                 | ' 
1aa84                 | ' initcursor(154)
1aa84     9A 12 06 F6 | 	mov	arg01, #154
1aa88     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1aa8c                 | ' 
1aa8c                 | ' '---------------------------- start the cog
1aa8c                 | ' 
1aa8c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1aa8c     10 00 00 FF 
1aa90     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1aa94     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1aa98     10 00 00 FF 
1aa9c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1aaa0     14 E4 05 F1 | 	add	objptr, #20
1aaa4     10 FA 05 F6 | 	mov	result1, #16
1aaa8     28 E4 61 FD | 	setq	objptr
1aaac     0A FB F1 FC | 	coginit	result1, arg02 wc
1aab0     01 FA 65 C6 |  if_b	neg	result1, #1
1aab4     1C E4 05 F1 | 	add	objptr, #28
1aab8     F2 FA 61 FC | 	wrlong	result1, objptr
1aabc     30 E4 85 F1 | 	sub	objptr, #48
1aac0                 | ' waitms(40)							' wait for stabilize
1aac0     28 12 06 F6 | 	mov	arg01, #40
1aac4     78 2C B0 FD | 	call	#__system___waitms
1aac8                 | ' return cog							' return the driver's cog #
1aac8     30 E4 05 F1 | 	add	objptr, #48
1aacc     F2 FA 01 FB | 	rdlong	result1, objptr
1aad0     30 E4 85 F1 | 	sub	objptr, #48
1aad4                 | _hg010b_spin2_start_ret
1aad4     2D 00 64 FD | 	ret
1aad8                 | 
1aad8                 | ' 
1aad8                 | ' 
1aad8                 | ' '**************************************************************************************************************** 
1aad8                 | ' '                                                                                                             	*
1aad8                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1aad8                 | ' '  Mode number - see start() above or bits below								*
1aad8                 | ' '                                                                                                             	*
1aad8                 | ' '****************************************************************************************************************
1aad8                 | ' 
1aad8                 | ' '---------------------------- initialize a cursor (MSDOS type)
1aad8                 | ' pub initcursor(color) |i
1aad8                 | _hg010b_spin2_initcursor
1aad8     03 4A 05 F6 | 	mov	COUNT_, #3
1aadc     A8 00 A0 FD | 	call	#pushregs_
1aae0     09 1F 02 F6 | 	mov	local01, arg01
1aae4                 | ' 
1aae4                 | ' cursor_x:=0							' place the cursor at 0:0
1aae4     3C E4 05 F1 | 	add	objptr, #60
1aae8     F2 00 58 FC | 	wrword	#0, objptr
1aaec                 | ' cursor_y:=0
1aaec     02 E4 05 F1 | 	add	objptr, #2
1aaf0     F2 00 48 FC | 	wrbyte	#0, objptr
1aaf4                 | ' repeat i from 0 to 111
1aaf4     00 20 06 F6 | 	mov	local02, #0
1aaf8     F8 E5 05 F1 | 	add	objptr, #504
1aafc     97 1A 48 FB | 	callpa	#(@LR__2022-@LR__2020)>>2,fcache_load_ptr_
1ab00                 | LR__2020
1ab00                 | '   cursor[i]:=0
1ab00     10 23 02 F6 | 	mov	local03, local02
1ab04     F2 22 02 F1 | 	add	local03, objptr
1ab08     11 01 48 FC | 	wrbyte	#0, local03
1ab0c     01 20 06 F1 | 	add	local02, #1
1ab10     70 20 56 F2 | 	cmps	local02, #112 wc
1ab14     E8 FF 9F CD |  if_b	jmp	#LR__2020
1ab18                 | ' repeat i from 112 to 127
1ab18     70 20 06 F6 | 	mov	local02, #112
1ab1c                 | LR__2021
1ab1c                 | '   cursor[i]:=color  
1ab1c     10 23 02 F6 | 	mov	local03, local02
1ab20     F2 22 02 F1 | 	add	local03, objptr
1ab24     11 1F 42 FC | 	wrbyte	local01, local03
1ab28     01 20 06 F1 | 	add	local02, #1
1ab2c     80 20 16 F2 | 	cmp	local02, #128 wc
1ab30     E8 FF 9F CD |  if_b	jmp	#LR__2021
1ab34                 | LR__2022
1ab34                 | ' 'repeat i from 0 to 127
1ab34                 | ' '  if ((i/8)//2)
1ab34                 | ' '    cursor[i]:=15
1ab34                 | ' '  else
1ab34                 | ' '    cursor[i]:=0
1ab34                 | ' '  if i>=120    
1ab34                 | ' '    cursor[i]:=40
1ab34                 | ' setspriteptr(17,@cursor)
1ab34     F2 14 02 F6 | 	mov	arg02, objptr
1ab38     01 00 00 FF 
1ab3c     36 E4 85 F1 | 	sub	objptr, ##566
1ab40     11 12 06 F6 | 	mov	arg01, #17
1ab44     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ab48                 | ' setspritesize(17,8,16)
1ab48     11 12 06 F6 | 	mov	arg01, #17
1ab4c     08 14 06 F6 | 	mov	arg02, #8
1ab50     10 16 06 F6 | 	mov	arg03, #16
1ab54     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1ab58                 | ' setspritepos(17,0,0)
1ab58     11 12 06 F6 | 	mov	arg01, #17
1ab5c     00 14 06 F6 | 	mov	arg02, #0
1ab60     00 16 06 F6 | 	mov	arg03, #0
1ab64     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ab68                 | ' cursorshape:=14
1ab68     0B 00 00 FF 
1ab6c     C6 E4 05 F1 | 	add	objptr, ##5830
1ab70     F2 1C 68 FC | 	wrlong	#14, objptr
1ab74                 | ' cursorcolor:=color
1ab74     04 E4 85 F1 | 	sub	objptr, #4
1ab78     F2 1E 62 FC | 	wrlong	local01, objptr
1ab7c     0B 00 00 FF 
1ab80     C2 E4 85 F1 | 	sub	objptr, ##5826
1ab84     A7 F0 03 F6 | 	mov	ptra, fp
1ab88     B2 00 A0 FD | 	call	#popregs_
1ab8c                 | _hg010b_spin2_initcursor_ret
1ab8c     2D 00 64 FD | 	ret
1ab90                 | 
1ab90                 | ' 
1ab90                 | ' pub setcursorshape(shape) | i
1ab90                 | _hg010b_spin2_setcursorshape
1ab90                 | ' 
1ab90                 | ' cursorshape:=shape
1ab90     0B 00 00 FF 
1ab94     C6 E4 05 F1 | 	add	objptr, ##5830
1ab98     F2 12 62 FC | 	wrlong	arg01, objptr
1ab9c                 | ' repeat i from 0 to (8*cursorshape)-1
1ab9c     00 00 06 F6 | 	mov	_var01, #0
1aba0     09 03 02 F6 | 	mov	_var02, arg01
1aba4     03 02 66 F0 | 	shl	_var02, #3
1aba8     01 02 86 F1 | 	sub	_var02, #1
1abac     00 02 56 F2 | 	cmps	_var02, #0 wc
1abb0     01 04 86 F6 | 	negc	_var03, #1
1abb4     02 07 02 F6 | 	mov	_var04, _var03
1abb8     02 03 02 F1 | 	add	_var02, _var03
1abbc     0A 00 00 FF 
1abc0     90 E4 85 F1 | 	sub	objptr, ##5264
1abc4     97 0C 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
1abc8                 | LR__2030
1abc8                 | '   cursor[i]:=0
1abc8     00 05 02 F6 | 	mov	_var03, _var01
1abcc     F2 04 02 F1 | 	add	_var03, objptr
1abd0     02 01 48 FC | 	wrbyte	#0, _var03
1abd4     03 01 02 F1 | 	add	_var01, _var04
1abd8     01 01 0A F2 | 	cmp	_var01, _var02 wz
1abdc     E8 FF 9F 5D |  if_ne	jmp	#LR__2030
1abe0                 | LR__2031
1abe0                 | ' repeat i from 8*cursorshape to 127
1abe0     0A 00 00 FF 
1abe4     90 E4 05 F1 | 	add	objptr, ##5264
1abe8     F2 06 02 FB | 	rdlong	_var04, objptr
1abec     03 01 02 F6 | 	mov	_var01, _var04
1abf0     03 00 66 F0 | 	shl	_var01, #3
1abf4     0B 00 00 FF 
1abf8     C6 E4 85 F1 | 	sub	objptr, ##5830
1abfc     03 06 66 F0 | 	shl	_var04, #3
1ac00     80 06 56 F2 | 	cmps	_var04, #128 wc
1ac04     01 04 A6 F6 | 	negnc	_var03, #1
1ac08     7F 02 06 F6 | 	mov	_var02, #127
1ac0c     02 03 02 F1 | 	add	_var02, _var03
1ac10     97 1A 48 FB | 	callpa	#(@LR__2033-@LR__2032)>>2,fcache_load_ptr_
1ac14                 | LR__2032
1ac14                 | '   cursor[i]:=cursorcolor
1ac14     00 07 02 F6 | 	mov	_var04, _var01
1ac18     01 00 00 FF 
1ac1c     36 E4 05 F1 | 	add	objptr, ##566
1ac20     F2 06 02 F1 | 	add	_var04, objptr
1ac24     0A 00 00 FF 
1ac28     8C E4 05 F1 | 	add	objptr, ##5260
1ac2c     F2 12 02 FB | 	rdlong	arg01, objptr
1ac30     0B 00 00 FF 
1ac34     C2 E4 85 F1 | 	sub	objptr, ##5826
1ac38     03 13 42 FC | 	wrbyte	arg01, _var04
1ac3c     02 01 02 F1 | 	add	_var01, _var03
1ac40     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ac44     CC FF 9F 5D |  if_ne	jmp	#LR__2032
1ac48                 | LR__2033
1ac48                 | _hg010b_spin2_setcursorshape_ret
1ac48     2D 00 64 FD | 	ret
1ac4c                 | 
1ac4c                 | ' 
1ac4c                 | ' pub setcursorcolor(color) | i
1ac4c                 | _hg010b_spin2_setcursorcolor
1ac4c                 | ' 
1ac4c                 | ' cursorcolor:=color
1ac4c     0B 00 00 FF 
1ac50     C2 E4 05 F1 | 	add	objptr, ##5826
1ac54     F2 12 62 FC | 	wrlong	arg01, objptr
1ac58                 | ' repeat i from 0 to (8*cursorshape)-1
1ac58     00 12 06 F6 | 	mov	arg01, #0
1ac5c     04 E4 05 F1 | 	add	objptr, #4
1ac60     F2 00 02 FB | 	rdlong	_var01, objptr
1ac64     03 00 66 F0 | 	shl	_var01, #3
1ac68     01 00 86 F1 | 	sub	_var01, #1
1ac6c     00 00 56 F2 | 	cmps	_var01, #0 wc
1ac70     01 02 86 F6 | 	negc	_var02, #1
1ac74     01 05 02 F6 | 	mov	_var03, _var02
1ac78     01 01 02 F1 | 	add	_var01, _var02
1ac7c     0A 00 00 FF 
1ac80     90 E4 85 F1 | 	sub	objptr, ##5264
1ac84     97 0C 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
1ac88                 | LR__2040
1ac88                 | '   cursor[i]:=0
1ac88     09 03 02 F6 | 	mov	_var02, arg01
1ac8c     F2 02 02 F1 | 	add	_var02, objptr
1ac90     01 01 48 FC | 	wrbyte	#0, _var02
1ac94     02 13 02 F1 | 	add	arg01, _var03
1ac98     00 13 0A F2 | 	cmp	arg01, _var01 wz
1ac9c     E8 FF 9F 5D |  if_ne	jmp	#LR__2040
1aca0                 | LR__2041
1aca0                 | ' repeat i from 8*cursorshape to 127
1aca0     0A 00 00 FF 
1aca4     90 E4 05 F1 | 	add	objptr, ##5264
1aca8     F2 04 02 FB | 	rdlong	_var03, objptr
1acac     02 13 02 F6 | 	mov	arg01, _var03
1acb0     03 12 66 F0 | 	shl	arg01, #3
1acb4     0B 00 00 FF 
1acb8     C6 E4 85 F1 | 	sub	objptr, ##5830
1acbc     03 04 66 F0 | 	shl	_var03, #3
1acc0     80 04 56 F2 | 	cmps	_var03, #128 wc
1acc4     01 02 A6 F6 | 	negnc	_var02, #1
1acc8     7F 00 06 F6 | 	mov	_var01, #127
1accc     01 01 02 F1 | 	add	_var01, _var02
1acd0     97 1A 48 FB | 	callpa	#(@LR__2043-@LR__2042)>>2,fcache_load_ptr_
1acd4                 | LR__2042
1acd4                 | '   cursor[i]:=cursorcolor
1acd4     09 05 02 F6 | 	mov	_var03, arg01
1acd8     01 00 00 FF 
1acdc     36 E4 05 F1 | 	add	objptr, ##566
1ace0     F2 04 02 F1 | 	add	_var03, objptr
1ace4     0A 00 00 FF 
1ace8     8C E4 05 F1 | 	add	objptr, ##5260
1acec     F2 06 02 FB | 	rdlong	_var04, objptr
1acf0     0B 00 00 FF 
1acf4     C2 E4 85 F1 | 	sub	objptr, ##5826
1acf8     02 07 42 FC | 	wrbyte	_var04, _var03
1acfc     01 13 02 F1 | 	add	arg01, _var02
1ad00     00 13 0A F2 | 	cmp	arg01, _var01 wz
1ad04     CC FF 9F 5D |  if_ne	jmp	#LR__2042
1ad08                 | LR__2043
1ad08                 | _hg010b_spin2_setcursorcolor_ret
1ad08     2D 00 64 FD | 	ret
1ad0c                 | 
1ad0c                 | '   
1ad0c                 | '   
1ad0c                 | '   
1ad0c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1ad0c                 | _hg010b_spin2_setmode
1ad0c     02 4A 05 F6 | 	mov	COUNT_, #2
1ad10     A8 00 A0 FD | 	call	#pushregs_
1ad14                 | ' 
1ad14                 | ' 
1ad14                 | ' dl_ptr:=@emptydl[0]
1ad14     01 00 00 FF 
1ad18     1D E4 05 F1 | 	add	objptr, ##541
1ad1c     F2 1A 02 F6 | 	mov	arg05, objptr
1ad20     FD E5 85 F1 | 	sub	objptr, #509
1ad24     F2 1A 62 FC | 	wrlong	arg05, objptr
1ad28                 | ' 
1ad28                 | ' if cog>0 
1ad28     10 E4 05 F1 | 	add	objptr, #16
1ad2c     F2 1A 02 FB | 	rdlong	arg05, objptr
1ad30     30 E4 85 F1 | 	sub	objptr, #48
1ad34     01 1A 56 F2 | 	cmps	arg05, #1 wc
1ad38                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1ad38     01 12 06 36 |  if_ae	mov	arg01, #1
1ad3c     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1ad40                 | ' xres:=1024
1ad40     01 00 00 FF 
1ad44     26 E4 05 F1 | 	add	objptr, ##550
1ad48     02 00 80 FF 
1ad4c     F2 00 68 FC | 	wrlong	##1024, objptr
1ad50                 | ' yres:=600
1ad50     04 E4 05 F1 | 	add	objptr, #4
1ad54     01 00 80 FF 
1ad58     F2 B0 68 FC | 	wrlong	##600, objptr
1ad5c                 | ' ppl:=(timings[3])
1ad5c     10 00 00 FF 
1ad60     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1ad64     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ad68     51 E5 85 F1 | 	sub	objptr, #337
1ad6c     F2 1A 62 FC | 	wrlong	arg05, objptr
1ad70                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1ad70     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1ad74     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1ad78     01 1E 66 F0 | 	shl	local01, #1
1ad7c     80 E4 85 F1 | 	sub	objptr, #128
1ad80     F2 1E 62 FC | 	wrlong	local01, objptr
1ad84                 | ' cpl1:=cpl '' todo remove
1ad84     04 E4 05 F1 | 	add	objptr, #4
1ad88     F2 1E 62 FC | 	wrlong	local01, objptr
1ad8c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1ad8c     02 00 00 FF 
1ad90     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1ad94     41 E4 85 F1 | 	sub	objptr, #65
1ad98     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1ad9c                 | ' repeat i from 0 to 3
1ad9c     00 20 06 F6 | 	mov	local02, #0
1ada0     02 00 00 FF 
1ada4     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1ada8     08 E4 05 F1 | 	add	objptr, #8
1adac     97 20 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
1adb0                 | LR__2050
1adb0                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1adb0     10 1F 02 F6 | 	mov	local01, local02
1adb4     02 1E 66 F0 | 	shl	local01, #2
1adb8     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1adbc     F2 1A 02 FB | 	rdlong	arg05, objptr
1adc0     11 1A 66 F0 | 	shl	arg05, #17
1adc4     0F 1F 02 FB | 	rdlong	local01, local01
1adc8     0D 1F 02 F1 | 	add	local01, arg05
1adcc     80 40 38 FF 
1add0     00 1E 06 F1 | 	add	local01, ##1887502336
1add4     10 1B 02 F6 | 	mov	arg05, local02
1add8     02 1A 66 F0 | 	shl	arg05, #2
1addc     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1ade0     0D 1F 62 FC | 	wrlong	local01, arg05
1ade4     01 20 06 F1 | 	add	local02, #1
1ade8     04 20 56 F2 | 	cmps	local02, #4 wc
1adec     C0 FF 9F CD |  if_b	jmp	#LR__2050
1adf0                 | LR__2051
1adf0     24 E4 85 F1 | 	sub	objptr, #36
1adf4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1adf4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1adf8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1adfc     14 1E 66 FC | 	wrlong	local01, #20
1ae00                 | ' hubset(timings[10])
1ae00     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1ae04     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1ae08     10 00 00 FF 
1ae0c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1ae10     00 12 62 FD | 	hubset	arg01
1ae14                 | ' waitms(1)                                                   	' wait for stabilization
1ae14     01 12 06 F6 | 	mov	arg01, #1
1ae18     24 29 B0 FD | 	call	#__system___waitms
1ae1c     10 00 00 FF 
1ae20     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1ae24     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1ae28     61 E4 05 F1 | 	add	objptr, #97
1ae2c     F2 20 62 FC | 	wrlong	local02, objptr
1ae30     10 1F 52 F6 | 	abs	local01, local02 wc
1ae34     04 1E 46 F0 | 	shr	local01, #4
1ae38     0F 1F 82 F6 | 	negc	local01, local01
1ae3c     9C E4 05 F1 | 	add	objptr, #156
1ae40     F2 1E 62 FC | 	wrlong	local01, objptr
1ae44     A4 E4 85 F1 | 	sub	objptr, #164
1ae48     F2 20 02 FB | 	rdlong	local02, objptr
1ae4c     08 E4 05 F1 | 	add	objptr, #8
1ae50     F2 1E 02 FB | 	rdlong	local01, objptr
1ae54     0F 21 02 FD | 	qmul	local02, local01
1ae58                 | ' lines:=timings[11]
1ae58                 | ' t_lines:=lines/16
1ae58                 | ' buflen:=cpl*lines						' framebuffer length in longs
1ae58     29 E4 85 F1 | 	sub	objptr, #41
1ae5c     19 1E C6 F9 | 	decod	local01, #25
1ae60     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1ae64     18 20 62 FD | 	getqx	local02
1ae68     F2 20 62 FC | 	wrlong	local02, objptr
1ae6c     38 E4 85 F1 | 	sub	objptr, #56
1ae70     02 20 66 F0 | 	shl	local02, #2
1ae74     10 1F 82 F1 | 	sub	local01, local02
1ae78     F2 1E 62 FC | 	wrlong	local01, objptr
1ae7c     FD E4 05 F1 | 	add	objptr, #253
1ae80     F2 20 02 FB | 	rdlong	local02, objptr
1ae84     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ae88     0D 21 02 FD | 	qmul	local02, arg05
1ae8c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1ae8c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1ae8c     F9 E4 85 F1 | 	sub	objptr, #249
1ae90                 | ' mode_ptr:=@timings						' set pointers to timings
1ae90     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1ae94                 | ' graphmode:=1024+512+192+48							' det global variable
1ae94                 | ' makedl(graphmode)							' make a DL for the mode
1ae94     03 00 00 FF 
1ae98     F0 12 06 F6 | 	mov	arg01, ##1776
1ae9c     18 20 62 FD | 	getqx	local02
1aea0     10 1F 82 F1 | 	sub	local01, local02
1aea4     F2 1E 62 FC | 	wrlong	local01, objptr
1aea8     14 E4 05 F1 | 	add	objptr, #20
1aeac     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1aeb0     79 E4 05 F1 | 	add	objptr, #121
1aeb4     03 00 80 FF 
1aeb8     F2 E0 69 FC | 	wrlong	##1776, objptr
1aebc     91 E4 85 F1 | 	sub	objptr, #145
1aec0     10 00 00 FF 
1aec4     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1aec8     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1aecc                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1aecc     F2 1E 02 FB | 	rdlong	local01, objptr
1aed0     DD E4 05 F1 | 	add	objptr, #221
1aed4     F2 1E 62 FC | 	wrlong	local01, objptr
1aed8                 | ' s_font_ptr:=font_ptr
1aed8     D5 E4 85 F1 | 	sub	objptr, #213
1aedc     F2 1E 02 FB | 	rdlong	local01, objptr
1aee0     D9 E4 05 F1 | 	add	objptr, #217
1aee4     F2 1E 62 FC | 	wrlong	local01, objptr
1aee8                 | ' s_lines:=lines
1aee8     80 E4 85 F1 | 	sub	objptr, #128
1aeec     F2 1E 02 FB | 	rdlong	local01, objptr
1aef0     84 E4 05 F1 | 	add	objptr, #132
1aef4     F2 1E 62 FC | 	wrlong	local01, objptr
1aef8                 | ' s_buflen:=buflen
1aef8     AD E4 85 F1 | 	sub	objptr, #173
1aefc     F2 1E 02 FB | 	rdlong	local01, objptr
1af00     B5 E4 05 F1 | 	add	objptr, #181
1af04     F2 1E 62 FC | 	wrlong	local01, objptr
1af08                 | ' s_cpl:=cpl
1af08     94 E4 85 F1 | 	sub	objptr, #148
1af0c     F2 1E 02 FB | 	rdlong	local01, objptr
1af10     90 E4 05 F1 | 	add	objptr, #144
1af14     F2 1E 62 FC | 	wrlong	local01, objptr
1af18                 | ' s_cpl1:=cpl
1af18     90 E4 85 F1 | 	sub	objptr, #144
1af1c     F2 1E 02 FB | 	rdlong	local01, objptr
1af20     98 E4 05 F1 | 	add	objptr, #152
1af24     F2 1E 62 FC | 	wrlong	local01, objptr
1af28                 | ' st_lines:=t_lines
1af28     0C E4 05 F1 | 	add	objptr, #12
1af2c     F2 1E 02 FB | 	rdlong	local01, objptr
1af30     04 E4 05 F1 | 	add	objptr, #4
1af34     F2 1E 62 FC | 	wrlong	local01, objptr
1af38                 | ' ppl:=ppl/xzoom  
1af38     28 E4 85 F1 | 	sub	objptr, #40
1af3c     F2 64 02 FB | 	rdlong	muldiva_, objptr
1af40     2C E4 05 F1 | 	add	objptr, #44
1af44     F2 66 02 FB | 	rdlong	muldivb_, objptr
1af48     05 E5 85 F1 | 	sub	objptr, #261
1af4c     BA 00 A0 FD | 	call	#divide_
1af50     D9 E4 05 F1 | 	add	objptr, #217
1af54     F2 66 62 FC | 	wrlong	muldivb_, objptr
1af58                 | ' s_ppl:=ppl
1af58     1C E4 05 F1 | 	add	objptr, #28
1af5c     F2 66 62 FC | 	wrlong	muldivb_, objptr
1af60     F5 E4 85 F1 | 	sub	objptr, #245
1af64                 | ' waitms(20)							' wait 
1af64     14 12 06 F6 | 	mov	arg01, #20
1af68     D4 27 B0 FD | 	call	#__system___waitms
1af6c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1af6c     04 E4 05 F1 | 	add	objptr, #4
1af70     F2 12 02 FB | 	rdlong	arg01, objptr
1af74     04 E4 85 F1 | 	sub	objptr, #4
1af78     F2 16 02 FB | 	rdlong	arg03, objptr
1af7c     09 17 82 F1 | 	sub	arg03, arg01
1af80     20 14 06 F6 | 	mov	arg02, #32
1af84     00 18 06 F6 | 	mov	arg04, #0
1af88     01 1A 06 F6 | 	mov	arg05, #1
1af8c     0B 00 00 FF 
1af90     CC E4 05 F1 | 	add	objptr, ##5836
1af94     E8 19 B0 FD | 	call	#_psram_spin2_fill
1af98     0B 00 00 FF 
1af9c     CC E4 85 F1 | 	sub	objptr, ##5836
1afa0     A7 F0 03 F6 | 	mov	ptra, fp
1afa4     B2 00 A0 FD | 	call	#popregs_
1afa8                 | _hg010b_spin2_setmode_ret
1afa8     2D 00 64 FD | 	ret
1afac                 | 
1afac                 | ' 
1afac                 | ' '****************************************************************************************************************
1afac                 | ' '                                                                                                             	*
1afac                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1afac                 | ' '                                                                                                             	*
1afac                 | ' '****************************************************************************************************************
1afac                 | ' 
1afac                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1afac                 | _hg010b_spin2_makedl
1afac                 | ' 
1afac                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1afac                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1afac                 | ' repeat i from 0 to 11                                                           ' clear DL
1afac     00 00 06 F6 | 	mov	_var01, #0
1afb0     ED E5 05 F1 | 	add	objptr, #493
1afb4     97 0E 48 FB | 	callpa	#(@LR__2061-@LR__2060)>>2,fcache_load_ptr_
1afb8                 | LR__2060
1afb8                 | '   displaylist[i]:=0 
1afb8     00 03 02 F6 | 	mov	_var02, _var01
1afbc     02 02 66 F0 | 	shl	_var02, #2
1afc0     F2 02 02 F1 | 	add	_var02, objptr
1afc4     01 01 68 FC | 	wrlong	#0, _var02
1afc8     01 00 06 F1 | 	add	_var01, #1
1afcc     0C 00 56 F2 | 	cmps	_var01, #12 wc
1afd0     E4 FF 9F CD |  if_b	jmp	#LR__2060
1afd4                 | LR__2061
1afd4                 | '                         ' 
1afd4                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1afd4     8C E5 85 F1 | 	sub	objptr, #396
1afd8     F2 02 02 FB | 	rdlong	_var02, objptr
1afdc     14 02 66 F0 | 	shl	_var02, #20
1afe0     01 02 06 F1 | 	add	_var02, #1
1afe4     04 E4 85 F1 | 	sub	objptr, #4
1afe8     F2 00 02 FB | 	rdlong	_var01, objptr
1afec     02 00 66 F0 | 	shl	_var01, #2
1aff0     04 00 66 F0 | 	shl	_var01, #4
1aff4     00 03 02 F1 | 	add	_var02, _var01
1aff8     90 E5 05 F1 | 	add	objptr, #400
1affc     F2 02 62 FC | 	wrlong	_var02, objptr
1b000     ED E5 85 F1 | 	sub	objptr, #493
1b004                 | ' displaylist[1]:=buf_ptr<<4+%10  
1b004     F2 02 02 FB | 	rdlong	_var02, objptr
1b008     04 02 66 F0 | 	shl	_var02, #4
1b00c     02 02 06 F1 | 	add	_var02, #2
1b010     F1 E5 05 F1 | 	add	objptr, #497
1b014     F2 02 62 FC | 	wrlong	_var02, objptr
1b018                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1b018     04 E4 85 F1 | 	sub	objptr, #4
1b01c     F2 02 02 F6 | 	mov	_var02, objptr
1b020     CD E5 85 F1 | 	sub	objptr, #461
1b024     F2 02 62 FC | 	wrlong	_var02, objptr
1b028     20 E4 85 F1 | 	sub	objptr, #32
1b02c                 | _hg010b_spin2_makedl_ret
1b02c     2D 00 64 FD | 	ret
1b030                 | 
1b030                 | ' 
1b030                 | ' 
1b030                 | ' '****************************************************************************************************************
1b030                 | ' '                                                                        					*
1b030                 | ' '  Graphic primitives                                                    					*
1b030                 | ' '                                                                        					*
1b030                 | ' '****************************************************************************************************************
1b030                 | ' 
1b030                 | ' pub setspriteptr(num,ptr)
1b030                 | _hg010b_spin2_setspriteptr
1b030                 | ' long[@spr1ptr+12*num]:=ptr
1b030     11 E5 05 F1 | 	add	objptr, #273
1b034     F2 00 02 F6 | 	mov	_var01, objptr
1b038     09 03 02 F6 | 	mov	_var02, arg01
1b03c     01 02 66 F0 | 	shl	_var02, #1
1b040     09 03 02 F1 | 	add	_var02, arg01
1b044     02 02 66 F0 | 	shl	_var02, #2
1b048     01 01 02 F1 | 	add	_var01, _var02
1b04c     00 15 62 FC | 	wrlong	arg02, _var01
1b050     11 E5 85 F1 | 	sub	objptr, #273
1b054                 | _hg010b_spin2_setspriteptr_ret
1b054     2D 00 64 FD | 	ret
1b058                 | 
1b058                 | ' 
1b058                 | ' pub setspritepos(num,x,y)
1b058                 | _hg010b_spin2_setspritepos
1b058                 | ' if y>601
1b058     01 00 00 FF 
1b05c     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1b060                 | '   y:=601
1b060     01 00 00 3F 
1b064     59 16 06 36 |  if_ae	mov	arg03, ##601
1b068                 | ' if x>1024
1b068     02 00 00 FF 
1b06c     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1b070                 | '   x:=1024
1b070     0A 14 C6 39 |  if_ae	decod	arg02, #10
1b074                 | ' word[@spr1ptr+12*num+4]:=x
1b074     11 E5 05 F1 | 	add	objptr, #273
1b078     F2 00 02 F6 | 	mov	_var01, objptr
1b07c     09 03 02 F6 | 	mov	_var02, arg01
1b080     01 02 66 F0 | 	shl	_var02, #1
1b084     09 03 02 F1 | 	add	_var02, arg01
1b088     02 02 66 F0 | 	shl	_var02, #2
1b08c     01 01 02 F1 | 	add	_var01, _var02
1b090     04 00 06 F1 | 	add	_var01, #4
1b094     00 15 52 FC | 	wrword	arg02, _var01
1b098                 | ' word[@spr1ptr+12*num+6]:=y
1b098     F2 00 02 F6 | 	mov	_var01, objptr
1b09c     09 03 02 F6 | 	mov	_var02, arg01
1b0a0     01 02 66 F0 | 	shl	_var02, #1
1b0a4     09 03 02 F1 | 	add	_var02, arg01
1b0a8     02 02 66 F0 | 	shl	_var02, #2
1b0ac     01 01 02 F1 | 	add	_var01, _var02
1b0b0     06 00 06 F1 | 	add	_var01, #6
1b0b4     00 17 52 FC | 	wrword	arg03, _var01
1b0b8     11 E5 85 F1 | 	sub	objptr, #273
1b0bc                 | _hg010b_spin2_setspritepos_ret
1b0bc     2D 00 64 FD | 	ret
1b0c0                 | 
1b0c0                 | ' 
1b0c0                 | ' pub setspritesize(num,w,h)
1b0c0                 | _hg010b_spin2_setspritesize
1b0c0                 | ' word[@spr1ptr+12*num+8]:=w
1b0c0     11 E5 05 F1 | 	add	objptr, #273
1b0c4     F2 00 02 F6 | 	mov	_var01, objptr
1b0c8     09 03 02 F6 | 	mov	_var02, arg01
1b0cc     01 02 66 F0 | 	shl	_var02, #1
1b0d0     09 03 02 F1 | 	add	_var02, arg01
1b0d4     02 02 66 F0 | 	shl	_var02, #2
1b0d8     01 01 02 F1 | 	add	_var01, _var02
1b0dc     08 00 06 F1 | 	add	_var01, #8
1b0e0     00 15 52 FC | 	wrword	arg02, _var01
1b0e4                 | ' word[@spr1ptr+12*num+10]:=h
1b0e4     F2 00 02 F6 | 	mov	_var01, objptr
1b0e8     09 03 02 F6 | 	mov	_var02, arg01
1b0ec     01 02 66 F0 | 	shl	_var02, #1
1b0f0     09 03 02 F1 | 	add	_var02, arg01
1b0f4     02 02 66 F0 | 	shl	_var02, #2
1b0f8     01 01 02 F1 | 	add	_var01, _var02
1b0fc     0A 00 06 F1 | 	add	_var01, #10
1b100     00 17 52 FC | 	wrword	arg03, _var01
1b104     11 E5 85 F1 | 	sub	objptr, #273
1b108                 | _hg010b_spin2_setspritesize_ret
1b108     2D 00 64 FD | 	ret
1b10c                 | 
1b10c                 | ' 
1b10c                 | ' 
1b10c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1b10c                 | ' 
1b10c                 | ' 
1b10c                 | ' pub putpixel(x,y,c)
1b10c                 | _hg010b_spin2_putpixel
1b10c     04 4A 05 F6 | 	mov	COUNT_, #4
1b110     A8 00 A0 FD | 	call	#pushregs_
1b114     09 1F 02 F6 | 	mov	local01, arg01
1b118                 | ' 
1b118                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1b118     00 20 06 F6 | 	mov	local02, #0
1b11c     00 1E 56 F2 | 	cmps	local01, #0 wc
1b120     01 20 66 36 |  if_ae	neg	local02, #1
1b124     E9 E4 05 F1 | 	add	objptr, #233
1b128     F2 1A 02 FB | 	rdlong	arg05, objptr
1b12c     02 1A 66 F0 | 	shl	arg05, #2
1b130     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1b134     11 23 A2 F1 | 	subx	local03, local03
1b138     11 21 02 F5 | 	and	local02, local03
1b13c     00 22 06 F6 | 	mov	local03, #0
1b140     00 14 56 F2 | 	cmps	arg02, #0 wc
1b144     01 22 66 36 |  if_ae	neg	local03, #1
1b148     11 21 02 F5 | 	and	local02, local03
1b14c     04 E4 85 F1 | 	sub	objptr, #4
1b150     F2 22 02 FB | 	rdlong	local03, objptr
1b154     E5 E4 85 F1 | 	sub	objptr, #229
1b158     11 15 52 F2 | 	cmps	arg02, local03 wc
1b15c     12 25 A2 F1 | 	subx	local04, local04
1b160     12 21 CA F7 | 	test	local02, local04 wz
1b164     48 00 90 AD |  if_e	jmp	#LR__2070
1b168     DD E4 05 F1 | 	add	objptr, #221
1b16c     F2 12 02 FB | 	rdlong	arg01, objptr
1b170     14 E4 05 F1 | 	add	objptr, #20
1b174     F2 24 02 FB | 	rdlong	local04, objptr
1b178     02 24 66 F0 | 	shl	local04, #2
1b17c     0A 25 02 FD | 	qmul	local04, arg02
1b180                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1b180     0B 15 02 F6 | 	mov	arg02, arg03
1b184     01 16 06 F6 | 	mov	arg03, #1
1b188     00 18 06 F6 | 	mov	arg04, #0
1b18c     01 1A 06 F6 | 	mov	arg05, #1
1b190     0A 00 00 FF 
1b194     DB E5 05 F1 | 	add	objptr, ##5595
1b198     18 24 62 FD | 	getqx	local04
1b19c     0F 25 02 F1 | 	add	local04, local01
1b1a0     12 13 02 F1 | 	add	arg01, local04
1b1a4     D8 17 B0 FD | 	call	#_psram_spin2_fill
1b1a8     0B 00 00 FF 
1b1ac     CC E4 85 F1 | 	sub	objptr, ##5836
1b1b0                 | LR__2070
1b1b0     A7 F0 03 F6 | 	mov	ptra, fp
1b1b4     B2 00 A0 FD | 	call	#popregs_
1b1b8                 | _hg010b_spin2_putpixel_ret
1b1b8     2D 00 64 FD | 	ret
1b1bc                 | 
1b1bc                 | ' 
1b1bc                 | ' pub putpixel2(x,y,c)
1b1bc                 | _hg010b_spin2_putpixel2
1b1bc     02 4A 05 F6 | 	mov	COUNT_, #2
1b1c0     A8 00 A0 FD | 	call	#pushregs_
1b1c4     DD E4 05 F1 | 	add	objptr, #221
1b1c8     F2 1E 02 FB | 	rdlong	local01, objptr
1b1cc     14 E4 05 F1 | 	add	objptr, #20
1b1d0     F2 1A 02 FB | 	rdlong	arg05, objptr
1b1d4     02 1A 66 F0 | 	shl	arg05, #2
1b1d8     0A 1B 02 FD | 	qmul	arg05, arg02
1b1dc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1b1dc     0B 15 02 F6 | 	mov	arg02, arg03
1b1e0     01 16 06 F6 | 	mov	arg03, #1
1b1e4     00 18 06 F6 | 	mov	arg04, #0
1b1e8     01 1A 06 F6 | 	mov	arg05, #1
1b1ec     0A 00 00 FF 
1b1f0     DB E5 05 F1 | 	add	objptr, ##5595
1b1f4     18 20 62 FD | 	getqx	local02
1b1f8     09 21 02 F1 | 	add	local02, arg01
1b1fc     10 1F 02 F1 | 	add	local01, local02
1b200     0F 13 02 F6 | 	mov	arg01, local01
1b204     78 17 B0 FD | 	call	#_psram_spin2_fill
1b208     0B 00 00 FF 
1b20c     CC E4 85 F1 | 	sub	objptr, ##5836
1b210     A7 F0 03 F6 | 	mov	ptra, fp
1b214     B2 00 A0 FD | 	call	#popregs_
1b218                 | _hg010b_spin2_putpixel2_ret
1b218     2D 00 64 FD | 	ret
1b21c                 | 
1b21c                 | ' 
1b21c                 | ' pub getpixel2(x,y): c 
1b21c                 | _hg010b_spin2_getpixel2
1b21c     02 4A 05 F6 | 	mov	COUNT_, #2
1b220     A8 00 A0 FD | 	call	#pushregs_
1b224     0C F0 07 F1 | 	add	ptra, #12
1b228     04 4E 05 F1 | 	add	fp, #4
1b22c     A7 12 62 FC | 	wrlong	arg01, fp
1b230     04 4E 05 F1 | 	add	fp, #4
1b234     A7 14 62 FC | 	wrlong	arg02, fp
1b238     08 4E 85 F1 | 	sub	fp, #8
1b23c     A7 00 68 FC | 	wrlong	#0, fp
1b240     A7 12 02 F6 | 	mov	arg01, fp
1b244     DD E4 05 F1 | 	add	objptr, #221
1b248     F2 14 02 FB | 	rdlong	arg02, objptr
1b24c     14 E4 05 F1 | 	add	objptr, #20
1b250     F2 16 02 FB | 	rdlong	arg03, objptr
1b254     02 16 66 F0 | 	shl	arg03, #2
1b258     08 4E 05 F1 | 	add	fp, #8
1b25c     A7 FA 01 FB | 	rdlong	result1, fp
1b260     FD 16 02 FD | 	qmul	arg03, result1
1b264                 | ' 
1b264                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1b264     04 4E 85 F1 | 	sub	fp, #4
1b268     A7 1E 02 FB | 	rdlong	local01, fp
1b26c     04 4E 85 F1 | 	sub	fp, #4
1b270     01 16 06 F6 | 	mov	arg03, #1
1b274     0A 00 00 FF 
1b278     DB E5 05 F1 | 	add	objptr, ##5595
1b27c     18 20 62 FD | 	getqx	local02
1b280     0F 21 02 F1 | 	add	local02, local01
1b284     10 15 02 F1 | 	add	arg02, local02
1b288     BC 15 B0 FD | 	call	#_psram_spin2_read1
1b28c     0B 00 00 FF 
1b290     CC E4 85 F1 | 	sub	objptr, ##5836
1b294                 | ' return c
1b294     A7 FA 01 FB | 	rdlong	result1, fp
1b298     A7 F0 03 F6 | 	mov	ptra, fp
1b29c     B2 00 A0 FD | 	call	#popregs_
1b2a0                 | _hg010b_spin2_getpixel2_ret
1b2a0     2D 00 64 FD | 	ret
1b2a4                 | 
1b2a4                 | '   
1b2a4                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1b2a4                 | ' 
1b2a4                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1b2a4                 | _hg010b_spin2_fastline
1b2a4     02 4A 05 F6 | 	mov	COUNT_, #2
1b2a8     A8 00 A0 FD | 	call	#pushregs_
1b2ac     09 1F 02 F6 | 	mov	local01, arg01
1b2b0     0A 21 02 F6 | 	mov	local02, arg02
1b2b4                 | ' 
1b2b4                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1b2b4     00 16 56 F2 | 	cmps	arg03, #0 wc
1b2b8     F4 00 90 CD |  if_b	jmp	#LR__2080
1b2bc     01 00 00 FF 
1b2c0     2A E4 05 F1 | 	add	objptr, ##554
1b2c4     F2 1A 02 FB | 	rdlong	arg05, objptr
1b2c8     01 00 00 FF 
1b2cc     2A E4 85 F1 | 	sub	objptr, ##554
1b2d0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1b2d4     D8 00 90 3D |  if_ae	jmp	#LR__2080
1b2d8     00 1E 56 F2 | 	cmps	local01, #0 wc
1b2dc     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1b2e0     CC 00 90 CD |  if_b	jmp	#LR__2080
1b2e4     01 00 00 FF 
1b2e8     26 E4 05 F1 | 	add	objptr, ##550
1b2ec     F2 1A 02 FB | 	rdlong	arg05, objptr
1b2f0     01 00 00 FF 
1b2f4     26 E4 85 F1 | 	sub	objptr, ##550
1b2f8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1b2fc     01 00 00 1F 
1b300     26 E4 05 11 |  if_a	add	objptr, ##550
1b304     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1b308     01 00 00 1F 
1b30c     26 E4 85 11 |  if_a	sub	objptr, ##550
1b310     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1b314                 | '   return
1b314     98 00 90 1D |  if_a	jmp	#LR__2080
1b318     10 1F 5A F2 | 	cmps	local01, local02 wcz
1b31c     0F 1B 02 16 |  if_a	mov	arg05, local01
1b320     10 1F 02 16 |  if_a	mov	local01, local02
1b324     0D 21 02 16 |  if_a	mov	local02, arg05
1b328     00 1E 56 F2 | 	cmps	local01, #0 wc
1b32c     00 1E 06 C6 |  if_b	mov	local01, #0
1b330     01 00 00 FF 
1b334     26 E4 05 F1 | 	add	objptr, ##550
1b338     F2 1A 02 FB | 	rdlong	arg05, objptr
1b33c     01 00 00 FF 
1b340     26 E4 85 F1 | 	sub	objptr, ##550
1b344     0D 21 52 F2 | 	cmps	local02, arg05 wc
1b348     01 00 00 3F 
1b34c     26 E4 05 31 |  if_ae	add	objptr, ##550
1b350     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1b354     01 00 00 3F 
1b358     26 E4 85 31 |  if_ae	sub	objptr, ##550
1b35c     DD E4 05 F1 | 	add	objptr, #221
1b360     F2 12 02 FB | 	rdlong	arg01, objptr
1b364     14 E4 05 F1 | 	add	objptr, #20
1b368     F2 1A 02 FB | 	rdlong	arg05, objptr
1b36c     02 1A 66 F0 | 	shl	arg05, #2
1b370     0B 1B 02 FD | 	qmul	arg05, arg03
1b374                 | ' if x1>x2
1b374                 | '   x1,x2:=x2,x1
1b374                 | ' if x1<0 
1b374                 | '   x1:=0
1b374                 | ' if x2>=xres
1b374                 | '   x2:=xres-1  
1b374     01 20 86 31 |  if_ae	sub	local02, #1
1b378                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1b378     01 16 06 F6 | 	mov	arg03, #1
1b37c     10 17 02 F1 | 	add	arg03, local02
1b380     0F 17 82 F1 | 	sub	arg03, local01
1b384     0C 15 02 F6 | 	mov	arg02, arg04
1b388     00 18 06 F6 | 	mov	arg04, #0
1b38c     01 1A 06 F6 | 	mov	arg05, #1
1b390     0A 00 00 FF 
1b394     DB E5 05 F1 | 	add	objptr, ##5595
1b398     18 20 62 FD | 	getqx	local02
1b39c     0F 21 02 F1 | 	add	local02, local01
1b3a0     10 13 02 F1 | 	add	arg01, local02
1b3a4     D8 15 B0 FD | 	call	#_psram_spin2_fill
1b3a8     0B 00 00 FF 
1b3ac     CC E4 85 F1 | 	sub	objptr, ##5836
1b3b0                 | LR__2080
1b3b0     A7 F0 03 F6 | 	mov	ptra, fp
1b3b4     B2 00 A0 FD | 	call	#popregs_
1b3b8                 | _hg010b_spin2_fastline_ret
1b3b8     2D 00 64 FD | 	ret
1b3bc                 | 
1b3bc                 | ' 
1b3bc                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1b3bc                 | _hg010b_spin2_draw
1b3bc     0E 4A 05 F6 | 	mov	COUNT_, #14
1b3c0     A8 00 A0 FD | 	call	#pushregs_
1b3c4     09 1F 02 F6 | 	mov	local01, arg01
1b3c8     0A 21 02 F6 | 	mov	local02, arg02
1b3cc     0B 23 02 F6 | 	mov	local03, arg03
1b3d0     0C 25 02 F6 | 	mov	local04, arg04
1b3d4     0D 27 02 F6 | 	mov	local05, arg05
1b3d8                 | ' 
1b3d8                 | ' if (y1==y2)
1b3d8     12 21 0A F2 | 	cmp	local02, local04 wz
1b3dc     18 00 90 5D |  if_ne	jmp	#LR__2090
1b3e0                 | '   fastline(x1,x2,y1,c)
1b3e0     0F 13 02 F6 | 	mov	arg01, local01
1b3e4     11 15 02 F6 | 	mov	arg02, local03
1b3e8     10 17 02 F6 | 	mov	arg03, local02
1b3ec     13 19 02 F6 | 	mov	arg04, local05
1b3f0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1b3f4     F8 00 90 FD | 	jmp	#LR__2096
1b3f8                 | LR__2090
1b3f8                 | ' else  
1b3f8                 | '   x:=x1
1b3f8     0F 29 02 F6 | 	mov	local06, local01
1b3fc                 | '   y:=y1
1b3fc     10 2B 02 F6 | 	mov	local07, local02
1b400                 | ' 
1b400                 | '   if (x1<x2) 
1b400     11 1F 52 F2 | 	cmps	local01, local03 wc
1b404                 | '     xi:=1
1b404     01 2C 06 C6 |  if_b	mov	local08, #1
1b408                 | '     dx:=x2-x1
1b408     11 2F 02 C6 |  if_b	mov	local09, local03
1b40c     0F 2F 82 C1 |  if_b	sub	local09, local01
1b410                 | '   else
1b410                 | '     xi:=-1
1b410     01 2C 66 36 |  if_ae	neg	local08, #1
1b414                 | '     dx:=x1-x2
1b414     11 1F 82 31 |  if_ae	sub	local01, local03
1b418     0F 2F 02 36 |  if_ae	mov	local09, local01
1b41c                 | '   
1b41c                 | '   if (y1<y2) 
1b41c     12 21 52 F2 | 	cmps	local02, local04 wc
1b420                 | '     yi:=1
1b420     01 30 06 C6 |  if_b	mov	local10, #1
1b424                 | '     dy:=y2-y1
1b424     12 33 02 C6 |  if_b	mov	local11, local04
1b428     10 33 82 C1 |  if_b	sub	local11, local02
1b42c                 | '   else
1b42c                 | '     yi:=-1
1b42c     01 30 66 36 |  if_ae	neg	local10, #1
1b430                 | '     dy:=y1-y2
1b430     12 21 82 31 |  if_ae	sub	local02, local04
1b434     10 33 02 36 |  if_ae	mov	local11, local02
1b438                 | ' 
1b438                 | '   putpixel(x,y,c)
1b438     13 17 02 F6 | 	mov	arg03, local05
1b43c     14 13 02 F6 | 	mov	arg01, local06
1b440     15 15 02 F6 | 	mov	arg02, local07
1b444     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1b448                 | ' 
1b448                 | '   if (dx>dy)
1b448     19 2F 5A F2 | 	cmps	local09, local11 wcz
1b44c     50 00 90 ED |  if_be	jmp	#LR__2092
1b450                 | '     ai:=(dy-dx)*2
1b450     19 35 02 F6 | 	mov	local12, local11
1b454     17 35 82 F1 | 	sub	local12, local09
1b458     01 34 66 F0 | 	shl	local12, #1
1b45c                 | '     bi:=dy*2
1b45c     01 32 66 F0 | 	shl	local11, #1
1b460     19 37 02 F6 | 	mov	local13, local11
1b464                 | '     d:= bi-dx
1b464     1B 39 02 F6 | 	mov	local14, local13
1b468     17 39 82 F1 | 	sub	local14, local09
1b46c                 | '     repeat while (x<>x2) 
1b46c                 | LR__2091
1b46c     11 29 0A F2 | 	cmp	local06, local03 wz
1b470     7C 00 90 AD |  if_e	jmp	#LR__2095
1b474                 | '       if (d>=0) 
1b474     00 38 56 F2 | 	cmps	local14, #0 wc
1b478                 | '         x+=xi
1b478     16 29 02 31 |  if_ae	add	local06, local08
1b47c                 | '         y+=yi
1b47c     18 2B 02 31 |  if_ae	add	local07, local10
1b480                 | '         d+=ai
1b480     1A 39 02 31 |  if_ae	add	local14, local12
1b484                 | '       else
1b484                 | '         d+=bi
1b484     1B 39 02 C1 |  if_b	add	local14, local13
1b488                 | '         x+=xi
1b488     16 29 02 C1 |  if_b	add	local06, local08
1b48c                 | '       putpixel(x,y,c)
1b48c     14 13 02 F6 | 	mov	arg01, local06
1b490     15 15 02 F6 | 	mov	arg02, local07
1b494     13 17 02 F6 | 	mov	arg03, local05
1b498     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1b49c     CC FF 9F FD | 	jmp	#LR__2091
1b4a0                 | LR__2092
1b4a0                 | '   else
1b4a0                 | '     ai:=(dx-dy)*2
1b4a0     17 35 02 F6 | 	mov	local12, local09
1b4a4     19 35 82 F1 | 	sub	local12, local11
1b4a8     01 34 66 F0 | 	shl	local12, #1
1b4ac                 | '     bi:=dx*2
1b4ac     01 2E 66 F0 | 	shl	local09, #1
1b4b0     17 37 02 F6 | 	mov	local13, local09
1b4b4                 | '     d:=bi-dy
1b4b4     1B 39 02 F6 | 	mov	local14, local13
1b4b8     19 39 82 F1 | 	sub	local14, local11
1b4bc                 | '     repeat while (y<>y2)
1b4bc                 | LR__2093
1b4bc     12 2B 0A F2 | 	cmp	local07, local04 wz
1b4c0     2C 00 90 AD |  if_e	jmp	#LR__2094
1b4c4                 | '       if (d>=0)
1b4c4     00 38 56 F2 | 	cmps	local14, #0 wc
1b4c8                 | '         x+=xi
1b4c8     16 29 02 31 |  if_ae	add	local06, local08
1b4cc                 | '         y+=yi
1b4cc     18 2B 02 31 |  if_ae	add	local07, local10
1b4d0                 | '         d+=ai
1b4d0     1A 39 02 31 |  if_ae	add	local14, local12
1b4d4                 | '       else
1b4d4                 | '         d+=bi
1b4d4     1B 39 02 C1 |  if_b	add	local14, local13
1b4d8                 | '         y+=yi
1b4d8     18 2B 02 C1 |  if_b	add	local07, local10
1b4dc                 | '       putpixel(x, y,c)
1b4dc     14 13 02 F6 | 	mov	arg01, local06
1b4e0     15 15 02 F6 | 	mov	arg02, local07
1b4e4     13 17 02 F6 | 	mov	arg03, local05
1b4e8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1b4ec     CC FF 9F FD | 	jmp	#LR__2093
1b4f0                 | LR__2094
1b4f0                 | LR__2095
1b4f0                 | LR__2096
1b4f0     A7 F0 03 F6 | 	mov	ptra, fp
1b4f4     B2 00 A0 FD | 	call	#popregs_
1b4f8                 | _hg010b_spin2_draw_ret
1b4f8     2D 00 64 FD | 	ret
1b4fc                 | 
1b4fc                 | '  
1b4fc                 | ' pub fillpush(val) 
1b4fc                 | _hg010b_spin2_fillpush
1b4fc                 | ' fillstack[fillptr]:=val
1b4fc     0B 00 00 FF 
1b500     BA E4 05 F1 | 	add	objptr, ##5818
1b504     F2 00 02 FB | 	rdlong	_var01, objptr
1b508     02 00 66 F0 | 	shl	_var01, #2
1b50c     0A 00 00 FF 
1b510     00 E4 85 F1 | 	sub	objptr, ##5120
1b514     F2 00 02 F1 | 	add	_var01, objptr
1b518     00 13 62 FC | 	wrlong	arg01, _var01
1b51c                 | ' fillptr+=1   
1b51c     0A 00 00 FF 
1b520     00 E4 05 F1 | 	add	objptr, ##5120
1b524     F2 00 02 FB | 	rdlong	_var01, objptr
1b528     01 00 06 F1 | 	add	_var01, #1
1b52c     F2 00 62 FC | 	wrlong	_var01, objptr
1b530     0B 00 00 FF 
1b534     BA E4 85 F1 | 	sub	objptr, ##5818
1b538                 | _hg010b_spin2_fillpush_ret
1b538     2D 00 64 FD | 	ret
1b53c                 | 
1b53c                 | ' 
1b53c                 | '     
1b53c                 | ' pub fillpop() : val
1b53c                 | _hg010b_spin2_fillpop
1b53c                 | ' 
1b53c                 | ' fillptr-=1
1b53c     0B 00 00 FF 
1b540     BA E4 05 F1 | 	add	objptr, ##5818
1b544     F2 FA 01 FB | 	rdlong	result1, objptr
1b548     01 FA 85 F1 | 	sub	result1, #1
1b54c     F2 FA 61 FC | 	wrlong	result1, objptr
1b550                 | ' if fillptr<0
1b550     0B 00 00 FF 
1b554     BA E4 85 F1 | 	sub	objptr, ##5818
1b558     00 FA 55 F2 | 	cmps	result1, #0 wc
1b55c                 | '   fillptr:=0
1b55c     0B 00 00 CF 
1b560     BA E4 05 C1 |  if_b	add	objptr, ##5818
1b564     F2 00 68 CC |  if_b	wrlong	#0, objptr
1b568     0B 00 00 CF 
1b56c     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1b570                 | '   val:=-12345
1b570     E7 FF 7F CF 
1b574     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1b578     28 00 90 CD |  if_b	jmp	#LR__2100
1b57c                 | ' else 
1b57c                 | '   val:=fillstack[fillptr]
1b57c     0B 00 00 FF 
1b580     BA E4 05 F1 | 	add	objptr, ##5818
1b584     F2 00 02 FB | 	rdlong	_var01, objptr
1b588     02 00 66 F0 | 	shl	_var01, #2
1b58c     0A 00 00 FF 
1b590     00 E4 85 F1 | 	sub	objptr, ##5120
1b594     F2 00 02 F1 | 	add	_var01, objptr
1b598     00 01 02 FB | 	rdlong	_var01, _var01
1b59c     01 00 00 FF 
1b5a0     BA E4 85 F1 | 	sub	objptr, ##698
1b5a4                 | LR__2100
1b5a4                 | ' return val
1b5a4     00 FB 01 F6 | 	mov	result1, _var01
1b5a8                 | _hg010b_spin2_fillpop_ret
1b5a8     2D 00 64 FD | 	ret
1b5ac                 | 
1b5ac                 | ' 
1b5ac                 | '       
1b5ac                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1b5ac                 | _hg010b_spin2_fill
1b5ac     0B 4A 05 F6 | 	mov	COUNT_, #11
1b5b0     A8 00 A0 FD | 	call	#pushregs_
1b5b4                 | ' 
1b5b4                 | ' newcolor:=newcolor & 255
1b5b4     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1b5b8                 | ' oldcolor:=oldcolor & 255
1b5b8     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1b5bc                 | ' 
1b5bc                 | ' if (oldcolor == newcolor) 
1b5bc     0F 21 0A F2 | 	cmp	local02, local01 wz
1b5c0                 | '   return
1b5c0     70 02 90 AD |  if_e	jmp	#LR__2119
1b5c4                 | ' 
1b5c4                 | ' fillptr:=0
1b5c4     0B 00 00 FF 
1b5c8     BA E4 05 F1 | 	add	objptr, ##5818
1b5cc     F2 00 68 FC | 	wrlong	#0, objptr
1b5d0                 | ' fillmax:=0
1b5d0     04 E4 05 F1 | 	add	objptr, #4
1b5d4     F2 00 68 FC | 	wrlong	#0, objptr
1b5d8     0B 00 00 FF 
1b5dc     BE E4 85 F1 | 	sub	objptr, ##5822
1b5e0                 | ' fillpush(x)
1b5e0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1b5e4                 | ' fillpush(y)
1b5e4     0A 13 02 F6 | 	mov	arg01, arg02
1b5e8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1b5ec                 | ' y:=fillpop()
1b5ec     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1b5f0     FD 22 02 F6 | 	mov	local03, result1
1b5f4                 | ' x:=fillpop()
1b5f4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1b5f8     FD 24 02 F6 | 	mov	local04, result1
1b5fc                 | ' 'pinhigh(38)
1b5fc                 | ' repeat while (x>-1)       
1b5fc                 | LR__2110
1b5fc     00 24 56 F2 | 	cmps	local04, #0 wc
1b600     30 02 90 CD |  if_b	jmp	#LR__2118
1b604                 | '  ' pintoggle(39)
1b604                 | '   x1 := x
1b604     12 27 02 F6 | 	mov	local05, local04
1b608                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1b608                 | LR__2111
1b608     00 28 06 F6 | 	mov	local06, #0
1b60c     00 2A 06 F6 | 	mov	local07, #0
1b610     00 26 56 F2 | 	cmps	local05, #0 wc
1b614     01 2A 66 36 |  if_ae	neg	local07, #1
1b618     00 2A 0E F2 | 	cmp	local07, #0 wz
1b61c     00 28 26 56 |  if_ne	not	local06, #0
1b620     00 2C 06 F6 | 	mov	local08, #0
1b624     00 2E 06 F6 | 	mov	local09, #0
1b628     11 15 02 F6 | 	mov	arg02, local03
1b62c     13 13 02 F6 | 	mov	arg01, local05
1b630     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1b634     10 FB 09 F2 | 	cmp	result1, local02 wz
1b638     00 2E 26 A6 |  if_e	not	local09, #0
1b63c     00 2E 0E F2 | 	cmp	local09, #0 wz
1b640     00 2C 26 56 |  if_ne	not	local08, #0
1b644     16 29 CA F7 | 	test	local06, local08 wz
1b648                 | '     x1--
1b648     01 26 86 51 |  if_ne	sub	local05, #1
1b64c     B8 FF 9F 5D |  if_ne	jmp	#LR__2111
1b650                 | '   x1++
1b650     01 26 06 F1 | 	add	local05, #1
1b654                 | '   spanabove := 0
1b654     00 30 06 F6 | 	mov	local10, #0
1b658                 | '   spanbelow := 0
1b658     00 32 06 F6 | 	mov	local11, #0
1b65c                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1b65c                 | LR__2112
1b65c     00 28 06 F6 | 	mov	local06, #0
1b660     02 00 00 FF 
1b664     00 26 56 F2 | 	cmps	local05, ##1024 wc
1b668     00 28 26 C6 |  if_b	not	local06, #0
1b66c     00 2C 06 F6 | 	mov	local08, #0
1b670     00 2E 06 F6 | 	mov	local09, #0
1b674     11 15 02 F6 | 	mov	arg02, local03
1b678     13 13 02 F6 | 	mov	arg01, local05
1b67c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1b680     10 FB 09 F2 | 	cmp	result1, local02 wz
1b684     00 2E 26 A6 |  if_e	not	local09, #0
1b688     00 2E 0E F2 | 	cmp	local09, #0 wz
1b68c     00 2C 26 56 |  if_ne	not	local08, #0
1b690     16 29 CA F7 | 	test	local06, local08 wz
1b694     88 01 90 AD |  if_e	jmp	#LR__2117
1b698                 | '     putpixel2 (x1,y, newcolor & 255)
1b698     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1b69c     13 13 02 F6 | 	mov	arg01, local05
1b6a0     11 15 02 F6 | 	mov	arg02, local03
1b6a4     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1b6a8                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1b6a8     00 28 06 F6 | 	mov	local06, #0
1b6ac     00 2A 06 F6 | 	mov	local07, #0
1b6b0     00 30 0E F2 | 	cmp	local10, #0 wz
1b6b4     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1b6b8     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1b6bc     00 2A 0E F2 | 	cmp	local07, #0 wz
1b6c0     00 28 26 56 |  if_ne	not	local06, #0
1b6c4     00 2C 06 F6 | 	mov	local08, #0
1b6c8     00 2E 06 F6 | 	mov	local09, #0
1b6cc     11 15 02 F6 | 	mov	arg02, local03
1b6d0     01 14 86 F1 | 	sub	arg02, #1
1b6d4     13 13 02 F6 | 	mov	arg01, local05
1b6d8     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1b6dc     10 FB 09 F2 | 	cmp	result1, local02 wz
1b6e0     00 2E 26 A6 |  if_e	not	local09, #0
1b6e4     00 2E 0E F2 | 	cmp	local09, #0 wz
1b6e8     00 2C 26 56 |  if_ne	not	local08, #0
1b6ec     16 29 CA F7 | 	test	local06, local08 wz
1b6f0     1C 00 90 AD |  if_e	jmp	#LR__2113
1b6f4                 | '       fillpush(x1)
1b6f4     13 13 02 F6 | 	mov	arg01, local05
1b6f8     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1b6fc                 | '       fillpush(y-1)
1b6fc     11 13 02 F6 | 	mov	arg01, local03
1b700     01 12 86 F1 | 	sub	arg01, #1
1b704     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1b708                 | '       spanabove := 1 
1b708     01 30 06 F6 | 	mov	local10, #1
1b70c     4C 00 90 FD | 	jmp	#LR__2114
1b710                 | LR__2113
1b710                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1b710     00 28 06 F6 | 	mov	local06, #0
1b714     00 2A 06 F6 | 	mov	local07, #0
1b718     00 30 0E F2 | 	cmp	local10, #0 wz
1b71c     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1b720     01 2A 66 16 |  if_a	neg	local07, #1
1b724     00 2A 0E F2 | 	cmp	local07, #0 wz
1b728     00 28 26 56 |  if_ne	not	local06, #0
1b72c     00 2C 06 F6 | 	mov	local08, #0
1b730     00 2E 06 F6 | 	mov	local09, #0
1b734     11 15 02 F6 | 	mov	arg02, local03
1b738     01 14 86 F1 | 	sub	arg02, #1
1b73c     13 13 02 F6 | 	mov	arg01, local05
1b740     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1b744     10 FB 09 F2 | 	cmp	result1, local02 wz
1b748     00 2E 26 56 |  if_ne	not	local09, #0
1b74c     00 2E 0E F2 | 	cmp	local09, #0 wz
1b750     00 2C 26 56 |  if_ne	not	local08, #0
1b754     16 29 CA F7 | 	test	local06, local08 wz
1b758                 | '       spanabove := 0 
1b758     00 30 06 56 |  if_ne	mov	local10, #0
1b75c                 | LR__2114
1b75c                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1b75c     00 28 06 F6 | 	mov	local06, #0
1b760     00 2A 06 F6 | 	mov	local07, #0
1b764     00 32 0E F2 | 	cmp	local11, #0 wz
1b768     01 00 00 AF 
1b76c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1b770     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1b774     00 2A 0E F2 | 	cmp	local07, #0 wz
1b778     00 28 26 56 |  if_ne	not	local06, #0
1b77c     00 2C 06 F6 | 	mov	local08, #0
1b780     00 2E 06 F6 | 	mov	local09, #0
1b784     11 15 02 F6 | 	mov	arg02, local03
1b788     01 14 06 F1 | 	add	arg02, #1
1b78c     13 13 02 F6 | 	mov	arg01, local05
1b790     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1b794     10 FB 09 F2 | 	cmp	result1, local02 wz
1b798     00 2E 26 A6 |  if_e	not	local09, #0
1b79c     00 2E 0E F2 | 	cmp	local09, #0 wz
1b7a0     00 2C 26 56 |  if_ne	not	local08, #0
1b7a4     16 29 CA F7 | 	test	local06, local08 wz
1b7a8     1C 00 90 AD |  if_e	jmp	#LR__2115
1b7ac                 | '       fillpush(x1)
1b7ac     13 13 02 F6 | 	mov	arg01, local05
1b7b0     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1b7b4                 | '       fillpush(y + 1)
1b7b4     11 13 02 F6 | 	mov	arg01, local03
1b7b8     01 12 06 F1 | 	add	arg01, #1
1b7bc     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1b7c0                 | '       spanBelow := 1
1b7c0     01 32 06 F6 | 	mov	local11, #1
1b7c4     50 00 90 FD | 	jmp	#LR__2116
1b7c8                 | LR__2115
1b7c8                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1b7c8     00 28 06 F6 | 	mov	local06, #0
1b7cc     00 2A 06 F6 | 	mov	local07, #0
1b7d0     00 32 0E F2 | 	cmp	local11, #0 wz
1b7d4     01 00 00 5F 
1b7d8     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1b7dc     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1b7e0     00 2A 0E F2 | 	cmp	local07, #0 wz
1b7e4     00 28 26 56 |  if_ne	not	local06, #0
1b7e8     00 2C 06 F6 | 	mov	local08, #0
1b7ec     00 2E 06 F6 | 	mov	local09, #0
1b7f0     11 15 02 F6 | 	mov	arg02, local03
1b7f4     01 14 06 F1 | 	add	arg02, #1
1b7f8     13 13 02 F6 | 	mov	arg01, local05
1b7fc     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1b800     10 FB 09 F2 | 	cmp	result1, local02 wz
1b804     00 2E 26 56 |  if_ne	not	local09, #0
1b808     00 2E 0E F2 | 	cmp	local09, #0 wz
1b80c     00 2C 26 56 |  if_ne	not	local08, #0
1b810     16 29 CA F7 | 	test	local06, local08 wz
1b814                 | '       spanbelow := 0
1b814     00 32 06 56 |  if_ne	mov	local11, #0
1b818                 | LR__2116
1b818                 | '     x1++
1b818     01 26 06 F1 | 	add	local05, #1
1b81c     3C FE 9F FD | 	jmp	#LR__2112
1b820                 | LR__2117
1b820                 | '   y:=fillpop()
1b820     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1b824     FD 22 02 F6 | 	mov	local03, result1
1b828                 | '   x:=fillpop()
1b828     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1b82c     FD 24 02 F6 | 	mov	local04, result1
1b830     C8 FD 9F FD | 	jmp	#LR__2110
1b834                 | LR__2118
1b834                 | LR__2119
1b834     A7 F0 03 F6 | 	mov	ptra, fp
1b838     B2 00 A0 FD | 	call	#popregs_
1b83c                 | _hg010b_spin2_fill_ret
1b83c     2D 00 64 FD | 	ret
1b840                 | 
1b840                 | ' 'pinlow(38)    
1b840                 | ' 
1b840                 | ' '-- A filled circle -----------------------------------------------------
1b840                 | ' 
1b840                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1b840                 | _hg010b_spin2_fcircle
1b840     08 4A 05 F6 | 	mov	COUNT_, #8
1b844     A8 00 A0 FD | 	call	#pushregs_
1b848     0B 1F 02 F6 | 	mov	local01, arg03
1b84c     FF FF 7F FF 
1b850     FE 1F 06 FD | 	qmul	local01, ##-2
1b854     09 21 02 F6 | 	mov	local02, arg01
1b858     0A 23 02 F6 | 	mov	local03, arg02
1b85c     0C 25 02 F6 | 	mov	local04, arg04
1b860                 | ' 
1b860                 | ' d:=5-4*r
1b860     0F 19 02 F6 | 	mov	arg04, local01
1b864     02 18 66 F0 | 	shl	arg04, #2
1b868     05 26 06 F6 | 	mov	local05, #5
1b86c     0C 27 82 F1 | 	sub	local05, arg04
1b870                 | ' x:=0
1b870     00 28 06 F6 | 	mov	local06, #0
1b874                 | ' y:=r
1b874                 | ' da:=(-2*r+5)*4
1b874                 | ' db:=3*4
1b874     0C 2A 06 F6 | 	mov	local07, #12
1b878                 | ' repeat while (x<=y) 
1b878     18 2C 62 FD | 	getqx	local08
1b87c     05 2C 06 F1 | 	add	local08, #5
1b880     02 2C 66 F0 | 	shl	local08, #2
1b884                 | LR__2120
1b884     0F 29 5A F2 | 	cmps	local06, local01 wcz
1b888     B4 00 90 1D |  if_a	jmp	#LR__2122
1b88c                 | '   fastline(x0-x,x0+x,y0-y,c)
1b88c     10 13 02 F6 | 	mov	arg01, local02
1b890     14 13 82 F1 | 	sub	arg01, local06
1b894     10 15 02 F6 | 	mov	arg02, local02
1b898     14 15 02 F1 | 	add	arg02, local06
1b89c     11 17 02 F6 | 	mov	arg03, local03
1b8a0     0F 17 82 F1 | 	sub	arg03, local01
1b8a4     12 19 02 F6 | 	mov	arg04, local04
1b8a8     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b8ac                 | '   fastline(x0-x,x0+x,y0+y,c)
1b8ac     10 13 02 F6 | 	mov	arg01, local02
1b8b0     14 13 82 F1 | 	sub	arg01, local06
1b8b4     10 15 02 F6 | 	mov	arg02, local02
1b8b8     14 15 02 F1 | 	add	arg02, local06
1b8bc     11 17 02 F6 | 	mov	arg03, local03
1b8c0     0F 17 02 F1 | 	add	arg03, local01
1b8c4     12 19 02 F6 | 	mov	arg04, local04
1b8c8     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b8cc                 | '   fastline(x0-y,x0+y,y0-x,c)
1b8cc     10 13 02 F6 | 	mov	arg01, local02
1b8d0     0F 13 82 F1 | 	sub	arg01, local01
1b8d4     10 15 02 F6 | 	mov	arg02, local02
1b8d8     0F 15 02 F1 | 	add	arg02, local01
1b8dc     11 17 02 F6 | 	mov	arg03, local03
1b8e0     14 17 82 F1 | 	sub	arg03, local06
1b8e4     12 19 02 F6 | 	mov	arg04, local04
1b8e8     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b8ec                 | '   fastline(x0-y,x0+y,y0+x,c)
1b8ec     10 13 02 F6 | 	mov	arg01, local02
1b8f0     0F 13 82 F1 | 	sub	arg01, local01
1b8f4     10 15 02 F6 | 	mov	arg02, local02
1b8f8     0F 15 02 F1 | 	add	arg02, local01
1b8fc     11 17 02 F6 | 	mov	arg03, local03
1b900     14 17 02 F1 | 	add	arg03, local06
1b904     12 19 02 F6 | 	mov	arg04, local04
1b908     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b90c                 | '   if d>0 
1b90c     01 26 56 F2 | 	cmps	local05, #1 wc
1b910     18 00 90 CD |  if_b	jmp	#LR__2121
1b914                 | '     d+=da
1b914     16 27 02 F1 | 	add	local05, local08
1b918                 | '     y-=1
1b918     01 1E 86 F1 | 	sub	local01, #1
1b91c                 | '     x+=1
1b91c     01 28 06 F1 | 	add	local06, #1
1b920                 | '     da+=4*4
1b920     10 2C 06 F1 | 	add	local08, #16
1b924                 | '     db+=2*4
1b924     08 2A 06 F1 | 	add	local07, #8
1b928     58 FF 9F FD | 	jmp	#LR__2120
1b92c                 | LR__2121
1b92c                 | '   else
1b92c                 | '     d+=db
1b92c     15 27 02 F1 | 	add	local05, local07
1b930                 | '     x+=1
1b930     01 28 06 F1 | 	add	local06, #1
1b934                 | '     da+=2*4
1b934     08 2C 06 F1 | 	add	local08, #8
1b938                 | '     db+=2*4
1b938     08 2A 06 F1 | 	add	local07, #8
1b93c     44 FF 9F FD | 	jmp	#LR__2120
1b940                 | LR__2122
1b940     A7 F0 03 F6 | 	mov	ptra, fp
1b944     B2 00 A0 FD | 	call	#popregs_
1b948                 | _hg010b_spin2_fcircle_ret
1b948     2D 00 64 FD | 	ret
1b94c                 | 
1b94c                 | '  
1b94c                 | ' '-- A circle ------------------------------------------------------------ 
1b94c                 | '  
1b94c                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1b94c                 | _hg010b_spin2_circle
1b94c     08 4A 05 F6 | 	mov	COUNT_, #8
1b950     A8 00 A0 FD | 	call	#pushregs_
1b954     0B 1F 02 F6 | 	mov	local01, arg03
1b958     FF FF 7F FF 
1b95c     FE 1F 06 FD | 	qmul	local01, ##-2
1b960     09 21 02 F6 | 	mov	local02, arg01
1b964     0A 23 02 F6 | 	mov	local03, arg02
1b968     0C 25 02 F6 | 	mov	local04, arg04
1b96c                 | ' 
1b96c                 | '  
1b96c                 | ' d:=5-4*r
1b96c     0F 19 02 F6 | 	mov	arg04, local01
1b970     02 18 66 F0 | 	shl	arg04, #2
1b974     05 26 06 F6 | 	mov	local05, #5
1b978     0C 27 82 F1 | 	sub	local05, arg04
1b97c                 | ' x:=0
1b97c     00 28 06 F6 | 	mov	local06, #0
1b980                 | ' y:=r
1b980                 | ' da:=(-2*r+5)*4
1b980                 | ' db:=3*4
1b980     0C 2A 06 F6 | 	mov	local07, #12
1b984                 | ' repeat while (x<=y) 
1b984     18 2C 62 FD | 	getqx	local08
1b988     05 2C 06 F1 | 	add	local08, #5
1b98c     02 2C 66 F0 | 	shl	local08, #2
1b990                 | LR__2130
1b990     0F 29 5A F2 | 	cmps	local06, local01 wcz
1b994     F4 00 90 1D |  if_a	jmp	#LR__2132
1b998                 | '   putpixel(x0-x,y0-y,c)
1b998     10 13 02 F6 | 	mov	arg01, local02
1b99c     14 13 82 F1 | 	sub	arg01, local06
1b9a0     11 15 02 F6 | 	mov	arg02, local03
1b9a4     0F 15 82 F1 | 	sub	arg02, local01
1b9a8     12 17 02 F6 | 	mov	arg03, local04
1b9ac     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b9b0                 | '   putpixel(x0-x,y0+y,c)
1b9b0     10 13 02 F6 | 	mov	arg01, local02
1b9b4     14 13 82 F1 | 	sub	arg01, local06
1b9b8     11 15 02 F6 | 	mov	arg02, local03
1b9bc     0F 15 02 F1 | 	add	arg02, local01
1b9c0     12 17 02 F6 | 	mov	arg03, local04
1b9c4     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b9c8                 | '   putpixel(x0+x,y0-y,c)
1b9c8     10 13 02 F6 | 	mov	arg01, local02
1b9cc     14 13 02 F1 | 	add	arg01, local06
1b9d0     11 15 02 F6 | 	mov	arg02, local03
1b9d4     0F 15 82 F1 | 	sub	arg02, local01
1b9d8     12 17 02 F6 | 	mov	arg03, local04
1b9dc     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b9e0                 | '   putpixel(x0+x,y0+y,c)
1b9e0     10 13 02 F6 | 	mov	arg01, local02
1b9e4     14 13 02 F1 | 	add	arg01, local06
1b9e8     11 15 02 F6 | 	mov	arg02, local03
1b9ec     0F 15 02 F1 | 	add	arg02, local01
1b9f0     12 17 02 F6 | 	mov	arg03, local04
1b9f4     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b9f8                 | '   putpixel(x0-y,y0-x,c)
1b9f8     10 13 02 F6 | 	mov	arg01, local02
1b9fc     0F 13 82 F1 | 	sub	arg01, local01
1ba00     11 15 02 F6 | 	mov	arg02, local03
1ba04     14 15 82 F1 | 	sub	arg02, local06
1ba08     12 17 02 F6 | 	mov	arg03, local04
1ba0c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ba10                 | '   putpixel(x0-y,y0+x,c)
1ba10     10 13 02 F6 | 	mov	arg01, local02
1ba14     0F 13 82 F1 | 	sub	arg01, local01
1ba18     11 15 02 F6 | 	mov	arg02, local03
1ba1c     14 15 02 F1 | 	add	arg02, local06
1ba20     12 17 02 F6 | 	mov	arg03, local04
1ba24     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ba28                 | '   putpixel(x0+y,y0-x,c)
1ba28     10 13 02 F6 | 	mov	arg01, local02
1ba2c     0F 13 02 F1 | 	add	arg01, local01
1ba30     11 15 02 F6 | 	mov	arg02, local03
1ba34     14 15 82 F1 | 	sub	arg02, local06
1ba38     12 17 02 F6 | 	mov	arg03, local04
1ba3c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ba40                 | '   putpixel(x0+y,y0+x,c)
1ba40     10 13 02 F6 | 	mov	arg01, local02
1ba44     0F 13 02 F1 | 	add	arg01, local01
1ba48     11 15 02 F6 | 	mov	arg02, local03
1ba4c     14 15 02 F1 | 	add	arg02, local06
1ba50     12 17 02 F6 | 	mov	arg03, local04
1ba54     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ba58                 | '   if d>0 
1ba58     01 26 56 F2 | 	cmps	local05, #1 wc
1ba5c     18 00 90 CD |  if_b	jmp	#LR__2131
1ba60                 | '     d+=da
1ba60     16 27 02 F1 | 	add	local05, local08
1ba64                 | '     y-=1
1ba64     01 1E 86 F1 | 	sub	local01, #1
1ba68                 | '     x+=1
1ba68     01 28 06 F1 | 	add	local06, #1
1ba6c                 | '     da+=4*4
1ba6c     10 2C 06 F1 | 	add	local08, #16
1ba70                 | '     db+=2*4
1ba70     08 2A 06 F1 | 	add	local07, #8
1ba74     18 FF 9F FD | 	jmp	#LR__2130
1ba78                 | LR__2131
1ba78                 | '   else
1ba78                 | '     d+=db
1ba78     15 27 02 F1 | 	add	local05, local07
1ba7c                 | '     x+=1
1ba7c     01 28 06 F1 | 	add	local06, #1
1ba80                 | '     da+=2*4
1ba80     08 2C 06 F1 | 	add	local08, #8
1ba84                 | '     db+=2*4
1ba84     08 2A 06 F1 | 	add	local07, #8
1ba88     04 FF 9F FD | 	jmp	#LR__2130
1ba8c                 | LR__2132
1ba8c     A7 F0 03 F6 | 	mov	ptra, fp
1ba90     B2 00 A0 FD | 	call	#popregs_
1ba94                 | _hg010b_spin2_circle_ret
1ba94     2D 00 64 FD | 	ret
1ba98                 | 
1ba98                 | '     
1ba98                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ba98                 | ' 
1ba98                 | ' pub frame(x1,y1,x2,y2,c)
1ba98                 | _hg010b_spin2_frame
1ba98     05 4A 05 F6 | 	mov	COUNT_, #5
1ba9c     A8 00 A0 FD | 	call	#pushregs_
1baa0     09 1F 02 F6 | 	mov	local01, arg01
1baa4     0A 21 02 F6 | 	mov	local02, arg02
1baa8     0B 23 02 F6 | 	mov	local03, arg03
1baac     0C 25 02 F6 | 	mov	local04, arg04
1bab0     0D 27 02 F6 | 	mov	local05, arg05
1bab4                 | ' 
1bab4                 | ' fastline(x1,x2,y1,c)
1bab4     0F 13 02 F6 | 	mov	arg01, local01
1bab8     11 15 02 F6 | 	mov	arg02, local03
1babc     10 17 02 F6 | 	mov	arg03, local02
1bac0     13 19 02 F6 | 	mov	arg04, local05
1bac4     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1bac8                 | ' fastline(x1,x2,y2,c)
1bac8     0F 13 02 F6 | 	mov	arg01, local01
1bacc     11 15 02 F6 | 	mov	arg02, local03
1bad0     12 17 02 F6 | 	mov	arg03, local04
1bad4     13 19 02 F6 | 	mov	arg04, local05
1bad8     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1badc                 | ' line(x1,y1,x1,y2,c)
1badc     0F 13 02 F6 | 	mov	arg01, local01
1bae0     10 15 02 F6 | 	mov	arg02, local02
1bae4     0F 17 02 F6 | 	mov	arg03, local01
1bae8     12 19 02 F6 | 	mov	arg04, local04
1baec     13 1B 02 F6 | 	mov	arg05, local05
1baf0                 | ' draw(x1,y1,x2,y2,c)
1baf0     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1baf4                 | ' line(x2,y1,x2,y2,c)
1baf4     11 13 02 F6 | 	mov	arg01, local03
1baf8     10 15 02 F6 | 	mov	arg02, local02
1bafc     11 17 02 F6 | 	mov	arg03, local03
1bb00     12 19 02 F6 | 	mov	arg04, local04
1bb04     13 1B 02 F6 | 	mov	arg05, local05
1bb08                 | ' draw(x1,y1,x2,y2,c)
1bb08     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1bb0c     A7 F0 03 F6 | 	mov	ptra, fp
1bb10     B2 00 A0 FD | 	call	#popregs_
1bb14                 | _hg010b_spin2_frame_ret
1bb14     2D 00 64 FD | 	ret
1bb18                 | 
1bb18                 | ' 
1bb18                 | ' '-- A box (a filled rectangle) ----------------------------------------
1bb18                 | ' 
1bb18                 | ' pub box(x1,y1,x2,y2,c) |yy
1bb18                 | _hg010b_spin2_box
1bb18     06 4A 05 F6 | 	mov	COUNT_, #6
1bb1c     A8 00 A0 FD | 	call	#pushregs_
1bb20     09 1F 02 F6 | 	mov	local01, arg01
1bb24     0A 21 02 F6 | 	mov	local02, arg02
1bb28     0B 23 02 F6 | 	mov	local03, arg03
1bb2c     0C 25 02 F6 | 	mov	local04, arg04
1bb30     0D 27 02 F6 | 	mov	local05, arg05
1bb34                 | ' 
1bb34                 | ' repeat yy from y1 to y2
1bb34     10 25 52 F2 | 	cmps	local04, local02 wc
1bb38     01 28 86 F6 | 	negc	local06, #1
1bb3c     14 25 02 F1 | 	add	local04, local06
1bb40                 | LR__2140
1bb40                 | '   fastline(x1,x2,yy,c)
1bb40     0F 13 02 F6 | 	mov	arg01, local01
1bb44     11 15 02 F6 | 	mov	arg02, local03
1bb48     13 19 02 F6 | 	mov	arg04, local05
1bb4c     10 17 02 F6 | 	mov	arg03, local02
1bb50     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1bb54     14 21 02 F1 | 	add	local02, local06
1bb58     12 21 0A F2 | 	cmp	local02, local04 wz
1bb5c     E0 FF 9F 5D |  if_ne	jmp	#LR__2140
1bb60     A7 F0 03 F6 | 	mov	ptra, fp
1bb64     B2 00 A0 FD | 	call	#popregs_
1bb68                 | _hg010b_spin2_box_ret
1bb68     2D 00 64 FD | 	ret
1bb6c                 | 
1bb6c                 | '       
1bb6c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1bb6c                 | _hg010b_spin2_putcharxycgf
1bb6c                 | ' 
1bb6c                 | '  
1bb6c                 | ' repeat yy from 0 to 15
1bb6c     00 00 06 F6 | 	mov	_var01, #0
1bb70     97 8C 48 FB | 	callpa	#(@LR__2152-@LR__2150)>>2,fcache_load_ptr_
1bb74                 | LR__2150
1bb74                 | ' 
1bb74                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1bb74     95 E4 05 F1 | 	add	objptr, #149
1bb78     F2 02 02 FB | 	rdlong	_var02, objptr
1bb7c     0A 02 66 F0 | 	shl	_var02, #10
1bb80     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1bb84     01 05 02 F1 | 	add	_var03, _var02
1bb88     0B 03 02 F6 | 	mov	_var02, arg03
1bb8c     04 02 66 F0 | 	shl	_var02, #4
1bb90     01 05 02 F1 | 	add	_var03, _var02
1bb94     00 05 02 F1 | 	add	_var03, _var01
1bb98     02 05 C2 FA | 	rdbyte	_var03, _var03
1bb9c                 | '   asm
1bb9c     00 04 0E F4 | 	testb	_var03, #0 wz
1bba0     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1bba4     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1bba8     01 04 0E F4 | 	testb	_var03, #1 wz
1bbac     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1bbb0     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1bbb4     02 04 0E F4 | 	testb	_var03, #2 wz
1bbb8     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1bbbc     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1bbc0     03 04 0E F4 | 	testb	_var03, #3 wz
1bbc4     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1bbc8     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1bbcc     04 04 0E F4 | 	testb	_var03, #4 wz
1bbd0     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1bbd4     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1bbd8     05 04 0E F4 | 	testb	_var03, #5 wz
1bbdc     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1bbe0     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1bbe4     06 04 0E F4 | 	testb	_var03, #6 wz
1bbe8     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1bbec     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1bbf0     07 04 0E F4 | 	testb	_var03, #7 wz
1bbf4     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1bbf8     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1bbfc                 | '   
1bbfc                 | '   ccc[0]:=c1
1bbfc     99 E5 05 F1 | 	add	objptr, #409
1bc00     F2 06 62 FC | 	wrlong	_var04, objptr
1bc04                 | '   ccc[1]:=c2 
1bc04     04 E4 05 F1 | 	add	objptr, #4
1bc08     F2 08 62 FC | 	wrlong	_var05, objptr
1bc0c                 | '   long[mailbox0][2]:=8
1bc0c     49 E4 85 F1 | 	sub	objptr, #73
1bc10     F2 04 02 FB | 	rdlong	_var03, objptr
1bc14     08 04 06 F1 | 	add	_var03, #8
1bc18     02 11 68 FC | 	wrlong	#8, _var03
1bc1c                 | '   long[mailbox0][1]:=@ccc
1bc1c     45 E4 05 F1 | 	add	objptr, #69
1bc20     F2 04 02 F6 | 	mov	_var03, objptr
1bc24     45 E4 85 F1 | 	sub	objptr, #69
1bc28     F2 02 02 FB | 	rdlong	_var02, objptr
1bc2c     04 02 06 F1 | 	add	_var02, #4
1bc30     01 05 62 FC | 	wrlong	_var03, _var02
1bc34                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1bc34     0C E5 85 F1 | 	sub	objptr, #268
1bc38     F2 04 02 FB | 	rdlong	_var03, objptr
1bc3c     0A 03 02 F6 | 	mov	_var02, arg02
1bc40     00 03 02 F1 | 	add	_var02, _var01
1bc44     0A 02 66 F0 | 	shl	_var02, #10
1bc48     09 0B 02 F6 | 	mov	_var06, arg01
1bc4c     02 0A 66 F0 | 	shl	_var06, #2
1bc50     05 03 02 F1 | 	add	_var02, _var06
1bc54     01 05 02 F1 | 	add	_var03, _var02
1bc58     00 00 78 FF 
1bc5c     00 04 06 F1 | 	add	_var03, ##-268435456
1bc60     0C E5 05 F1 | 	add	objptr, #268
1bc64     F2 0A 02 FB | 	rdlong	_var06, objptr
1bc68     05 05 62 FC | 	wrlong	_var03, _var06
1bc6c                 | '   repeat
1bc6c                 | LR__2151
1bc6c     F2 04 02 FB | 	rdlong	_var03, objptr
1bc70     02 03 02 FB | 	rdlong	_var02, _var03
1bc74     00 02 56 F2 | 	cmps	_var02, #0 wc
1bc78     F0 FF 9F CD |  if_b	jmp	#LR__2151
1bc7c     E9 E5 85 F1 | 	sub	objptr, #489
1bc80     01 00 06 F1 | 	add	_var01, #1
1bc84     10 00 56 F2 | 	cmps	_var01, #16 wc
1bc88     E8 FE 9F CD |  if_b	jmp	#LR__2150
1bc8c                 | LR__2152
1bc8c                 | _hg010b_spin2_putcharxycgf_ret
1bc8c     2D 00 64 FD | 	ret
1bc90                 | 
1bc90                 | ' 
1bc90                 | ' 
1bc90                 | ' '**********************************************************************r***
1bc90                 | ' '                                                                        *
1bc90                 | ' ' Font related functions                                                 *
1bc90                 | ' '                                                                        *
1bc90                 | ' '*************************************************************************
1bc90                 | ' 
1bc90                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1bc90                 | ' 
1bc90                 | ' pub setfontfamily(afontnum)
1bc90                 | _hg010b_spin2_setfontfamily
1bc90                 | ' 
1bc90                 | ' font_family:=afontnum
1bc90     95 E4 05 F1 | 	add	objptr, #149
1bc94     F2 12 62 FC | 	wrlong	arg01, objptr
1bc98     95 E4 85 F1 | 	sub	objptr, #149
1bc9c                 | ' 'if afontnum==8
1bc9c                 | ' '  font_ptr:=@amiga_font
1bc9c                 | ' 
1bc9c                 | ' if afontnum==4
1bc9c     04 12 0E F2 | 	cmp	arg01, #4 wz
1bca0                 | '   font_ptr:=@st_font
1bca0     08 00 00 AF 
1bca4     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1bca8     08 E4 05 A1 |  if_e	add	objptr, #8
1bcac     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1bcb0     08 E4 85 A1 |  if_e	sub	objptr, #8
1bcb4     08 00 00 AF 
1bcb8     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1bcbc                 | ' if afontnum==0
1bcbc     00 12 0E F2 | 	cmp	arg01, #0 wz
1bcc0                 | '   font_ptr:=@vga_font
1bcc0     08 E4 05 A1 |  if_e	add	objptr, #8
1bcc4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1bcc8     08 E4 85 A1 |  if_e	sub	objptr, #8
1bccc                 | _hg010b_spin2_setfontfamily_ret
1bccc     2D 00 64 FD | 	ret
1bcd0                 | 
1bcd0                 | ' 
1bcd0                 | ' '*************************************************************************
1bcd0                 | ' '                                                                        *
1bcd0                 | ' '  Cursor functions                                                      *
1bcd0                 | ' '                                                                        *
1bcd0                 | ' '*************************************************************************
1bcd0                 | ' 
1bcd0                 | ' 
1bcd0                 | ' pub setcursorpos(x,y)
1bcd0                 | _hg010b_spin2_setcursorpos
1bcd0                 | ' 
1bcd0                 | ' ''---------- Set the (x,y) position of cursor
1bcd0                 | ' 
1bcd0                 | ' cursor_x:=x
1bcd0     3C E4 05 F1 | 	add	objptr, #60
1bcd4     F2 12 52 FC | 	wrword	arg01, objptr
1bcd8                 | ' cursor_y:=y
1bcd8     02 E4 05 F1 | 	add	objptr, #2
1bcdc     F2 14 42 FC | 	wrbyte	arg02, objptr
1bce0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1bce0     02 E4 85 F1 | 	sub	objptr, #2
1bce4     F2 14 E2 FA | 	rdword	arg02, objptr
1bce8     02 14 66 F0 | 	shl	arg02, #2
1bcec     02 E4 05 F1 | 	add	objptr, #2
1bcf0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bcf4     3E E4 85 F1 | 	sub	objptr, #62
1bcf8     04 16 66 F0 | 	shl	arg03, #4
1bcfc     04 16 06 F1 | 	add	arg03, #4
1bd00     11 12 06 F6 | 	mov	arg01, #17
1bd04     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1bd08                 | _hg010b_spin2_setcursorpos_ret
1bd08     2D 00 64 FD | 	ret
1bd0c                 | 
1bd0c                 | ' 
1bd0c                 | ' pub setcursorx(x)
1bd0c                 | _hg010b_spin2_setcursorx
1bd0c                 | ' cursor_x:=x
1bd0c     3C E4 05 F1 | 	add	objptr, #60
1bd10     F2 12 52 FC | 	wrword	arg01, objptr
1bd14                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1bd14     F2 14 E2 FA | 	rdword	arg02, objptr
1bd18     02 14 66 F0 | 	shl	arg02, #2
1bd1c     02 E4 05 F1 | 	add	objptr, #2
1bd20     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bd24     3E E4 85 F1 | 	sub	objptr, #62
1bd28     04 16 66 F0 | 	shl	arg03, #4
1bd2c     04 16 06 F1 | 	add	arg03, #4
1bd30     11 12 06 F6 | 	mov	arg01, #17
1bd34     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1bd38                 | _hg010b_spin2_setcursorx_ret
1bd38     2D 00 64 FD | 	ret
1bd3c                 | 
1bd3c                 | ' 
1bd3c                 | ' pub setcursory(y) 
1bd3c                 | _hg010b_spin2_setcursory
1bd3c                 | ' cursor_y:=y
1bd3c     3E E4 05 F1 | 	add	objptr, #62
1bd40     F2 12 42 FC | 	wrbyte	arg01, objptr
1bd44                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1bd44     02 E4 85 F1 | 	sub	objptr, #2
1bd48     F2 14 E2 FA | 	rdword	arg02, objptr
1bd4c     02 14 66 F0 | 	shl	arg02, #2
1bd50     02 E4 05 F1 | 	add	objptr, #2
1bd54     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bd58     3E E4 85 F1 | 	sub	objptr, #62
1bd5c     04 16 66 F0 | 	shl	arg03, #4
1bd60     04 16 06 F1 | 	add	arg03, #4
1bd64     11 12 06 F6 | 	mov	arg01, #17
1bd68     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1bd6c                 | _hg010b_spin2_setcursory_ret
1bd6c     2D 00 64 FD | 	ret
1bd70                 | 
1bd70                 | ' 
1bd70                 | ' '*************************************************************************
1bd70                 | ' '                                                                        *
1bd70                 | ' '  VBlank functions                                                      *
1bd70                 | ' '                                                                        *
1bd70                 | ' '*************************************************************************
1bd70                 | ' 
1bd70                 | ' pub waitvbl(amount) | i
1bd70                 | _hg010b_spin2_waitvbl
1bd70     03 4A 05 F6 | 	mov	COUNT_, #3
1bd74     A8 00 A0 FD | 	call	#pushregs_
1bd78     09 1F 02 F6 | 	mov	local01, arg01
1bd7c                 | ' 
1bd7c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1bd7c                 | ' 
1bd7c                 | ' repeat i from 1 to amount
1bd7c     01 20 06 F6 | 	mov	local02, #1
1bd80     01 1E 56 F2 | 	cmps	local01, #1 wc
1bd84     01 22 86 F6 | 	negc	local03, #1
1bd88     11 1F 02 F1 | 	add	local01, local03
1bd8c                 | LR__2160
1bd8c                 | '   repeat until vblank==0
1bd8c                 | LR__2161
1bd8c     49 E4 05 F1 | 	add	objptr, #73
1bd90     F2 12 0A FB | 	rdlong	arg01, objptr wz
1bd94     49 E4 85 F1 | 	sub	objptr, #73
1bd98     0C 00 90 AD |  if_e	jmp	#LR__2162
1bd9c                 | '     waitus(100)
1bd9c     64 12 06 F6 | 	mov	arg01, #100
1bda0     08 1A B0 FD | 	call	#__system___waitus
1bda4     E4 FF 9F FD | 	jmp	#LR__2161
1bda8                 | LR__2162
1bda8                 | '   repeat until vblank==1
1bda8                 | LR__2163
1bda8     49 E4 05 F1 | 	add	objptr, #73
1bdac     F2 12 02 FB | 	rdlong	arg01, objptr
1bdb0     49 E4 85 F1 | 	sub	objptr, #73
1bdb4     01 12 0E F2 | 	cmp	arg01, #1 wz
1bdb8     0C 00 90 AD |  if_e	jmp	#LR__2164
1bdbc                 | '     waitus(100)
1bdbc     64 12 06 F6 | 	mov	arg01, #100
1bdc0     E8 19 B0 FD | 	call	#__system___waitus
1bdc4     E0 FF 9F FD | 	jmp	#LR__2163
1bdc8                 | LR__2164
1bdc8     11 21 02 F1 | 	add	local02, local03
1bdcc     0F 21 0A F2 | 	cmp	local02, local01 wz
1bdd0     B8 FF 9F 5D |  if_ne	jmp	#LR__2160
1bdd4     A7 F0 03 F6 | 	mov	ptra, fp
1bdd8     B2 00 A0 FD | 	call	#popregs_
1bddc                 | _hg010b_spin2_waitvbl_ret
1bddc     2D 00 64 FD | 	ret
1bde0                 | 
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' pub cls(fc,bc)   :c,i
1bde0                 | _hg010b_spin2_cls
1bde0     02 4A 05 F6 | 	mov	COUNT_, #2
1bde4     A8 00 A0 FD | 	call	#pushregs_
1bde8     09 1F 02 F6 | 	mov	local01, arg01
1bdec     0A 21 02 F6 | 	mov	local02, arg02
1bdf0                 | ' 
1bdf0                 | ' c:=bc
1bdf0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1bdf0     DD E4 05 F1 | 	add	objptr, #221
1bdf4     F2 12 02 FB | 	rdlong	arg01, objptr
1bdf8     A5 E4 85 F1 | 	sub	objptr, #165
1bdfc     F2 16 02 FB | 	rdlong	arg03, objptr
1be00     02 16 66 F0 | 	shl	arg03, #2
1be04     10 15 02 F6 | 	mov	arg02, local02
1be08     00 18 06 F6 | 	mov	arg04, #0
1be0c     01 1A 06 F6 | 	mov	arg05, #1
1be10     0B 00 00 FF 
1be14     94 E4 05 F1 | 	add	objptr, ##5780
1be18     64 0B B0 FD | 	call	#_psram_spin2_fill
1be1c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1be1c     0B 00 00 FF 
1be20     C8 E4 85 F1 | 	sub	objptr, ##5832
1be24     F2 12 02 FB | 	rdlong	arg01, objptr
1be28     04 E4 85 F1 | 	sub	objptr, #4
1be2c     F2 16 02 FB | 	rdlong	arg03, objptr
1be30     09 17 82 F1 | 	sub	arg03, arg01
1be34     20 14 06 F6 | 	mov	arg02, #32
1be38     00 18 06 F6 | 	mov	arg04, #0
1be3c     01 1A 06 F6 | 	mov	arg05, #1
1be40     0B 00 00 FF 
1be44     CC E4 05 F1 | 	add	objptr, ##5836
1be48     34 0B B0 FD | 	call	#_psram_spin2_fill
1be4c                 | ' setwritecolors(fc,bc)
1be4c                 | ' 
1be4c                 | ' write_color:=ff
1be4c     0B 00 00 FF 
1be50     8B E4 85 F1 | 	sub	objptr, ##5771
1be54     F2 1E 62 FC | 	wrlong	local01, objptr
1be58                 | ' write_background:=bb
1be58     04 E4 05 F1 | 	add	objptr, #4
1be5c     F2 20 62 FC | 	wrlong	local02, objptr
1be60                 | ' cursor_x:=0
1be60     09 E4 85 F1 | 	sub	objptr, #9
1be64     F2 00 58 FC | 	wrword	#0, objptr
1be68                 | ' cursor_y:=0
1be68     02 E4 05 F1 | 	add	objptr, #2
1be6c     F2 00 48 FC | 	wrbyte	#0, objptr
1be70                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1be70     02 E4 85 F1 | 	sub	objptr, #2
1be74     F2 14 E2 FA | 	rdword	arg02, objptr
1be78     02 14 66 F0 | 	shl	arg02, #2
1be7c     02 E4 05 F1 | 	add	objptr, #2
1be80     F2 16 C2 FA | 	rdbyte	arg03, objptr
1be84     3E E4 85 F1 | 	sub	objptr, #62
1be88     04 16 66 F0 | 	shl	arg03, #4
1be8c     04 16 06 F1 | 	add	arg03, #4
1be90     11 12 06 F6 | 	mov	arg01, #17
1be94     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1be98                 | ' setcursorcolor(fc)
1be98     0F 13 02 F6 | 	mov	arg01, local01
1be9c     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1bea0     10 FB 01 F6 | 	mov	result1, local02
1bea4     00 FC 05 F6 | 	mov	result2, #0
1bea8     A7 F0 03 F6 | 	mov	ptra, fp
1beac     B2 00 A0 FD | 	call	#popregs_
1beb0                 | _hg010b_spin2_cls_ret
1beb0     2D 00 64 FD | 	ret
1beb4                 | 
1beb4                 | ' 
1beb4                 | ' ''---------- Output a char at the cursor position, move the cursor 
1beb4                 | ' 
1beb4                 | ' pub putchar(achar) | c,x,y,l,newcpl
1beb4                 | _hg010b_spin2_putchar
1beb4     02 4A 05 F6 | 	mov	COUNT_, #2
1beb8     A8 00 A0 FD | 	call	#pushregs_
1bebc     09 1F 02 F6 | 	mov	local01, arg01
1bec0                 | ' 
1bec0                 | ' if achar==10
1bec0     0A 1E 0E F2 | 	cmp	local01, #10 wz
1bec4                 | '   crlf()
1bec4     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1bec8                 | ' if achar==9
1bec8     09 1E 0E F2 | 	cmp	local01, #9 wz
1becc     18 00 90 5D |  if_ne	jmp	#LR__2170
1bed0                 | '   cursor_x:=(cursor_x& %11110000)+16
1bed0     3C E4 05 F1 | 	add	objptr, #60
1bed4     F2 16 E2 FA | 	rdword	arg03, objptr
1bed8     F0 16 06 F5 | 	and	arg03, #240
1bedc     10 16 06 F1 | 	add	arg03, #16
1bee0     F2 16 52 FC | 	wrword	arg03, objptr
1bee4     3C E4 85 F1 | 	sub	objptr, #60
1bee8                 | LR__2170
1bee8                 | '   
1bee8                 | ' if (achar<>9) && (achar<>10) 
1bee8     09 1E 0E F2 | 	cmp	local01, #9 wz
1beec     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1bef0     A8 00 90 AD |  if_e	jmp	#LR__2171
1bef4                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1bef4     3C E4 05 F1 | 	add	objptr, #60
1bef8     F2 12 E2 FA | 	rdword	arg01, objptr
1befc     02 E4 05 F1 | 	add	objptr, #2
1bf00     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bf04     04 14 66 F0 | 	shl	arg02, #4
1bf08     04 14 06 F1 | 	add	arg02, #4
1bf0c     03 E4 05 F1 | 	add	objptr, #3
1bf10     F2 18 02 FB | 	rdlong	arg04, objptr
1bf14     04 E4 05 F1 | 	add	objptr, #4
1bf18     F2 1A 02 FB | 	rdlong	arg05, objptr
1bf1c     45 E4 85 F1 | 	sub	objptr, #69
1bf20     0F 17 02 F6 | 	mov	arg03, local01
1bf24     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1bf28     04 E4 05 F1 | 	add	objptr, #4
1bf2c     F2 12 02 FB | 	rdlong	arg01, objptr
1bf30     10 00 00 FF 
1bf34     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1bf38     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1bf3c     3A E4 05 F1 | 	add	objptr, #58
1bf40     F2 1A C2 FA | 	rdbyte	arg05, objptr
1bf44     0D 17 02 FD | 	qmul	arg03, arg05
1bf48                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1bf48     10 00 00 FF 
1bf4c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1bf50     02 E4 85 F1 | 	sub	objptr, #2
1bf54     F2 20 E2 FA | 	rdword	local02, objptr
1bf58     01 20 46 F0 | 	shr	local02, #1
1bf5c     0F 15 02 F6 | 	mov	arg02, local01
1bf60     01 16 06 F6 | 	mov	arg03, #1
1bf64     00 18 06 F6 | 	mov	arg04, #0
1bf68     01 1A 06 F6 | 	mov	arg05, #1
1bf6c     0B 00 00 FF 
1bf70     90 E4 05 F1 | 	add	objptr, ##5776
1bf74     18 1E 62 FD | 	getqx	local01
1bf78     10 1F 02 F1 | 	add	local01, local02
1bf7c     0F 13 02 F1 | 	add	arg01, local01
1bf80     FC 09 B0 FD | 	call	#_psram_spin2_fill
1bf84                 | '   cursor_x+=2
1bf84     0B 00 00 FF 
1bf88     90 E4 85 F1 | 	sub	objptr, ##5776
1bf8c     F2 20 E2 FA | 	rdword	local02, objptr
1bf90     02 20 06 F1 | 	add	local02, #2
1bf94     F2 20 52 FC | 	wrword	local02, objptr
1bf98     3C E4 85 F1 | 	sub	objptr, #60
1bf9c                 | LR__2171
1bf9c                 | ' 
1bf9c                 | ' if cursor_x>=256
1bf9c     3C E4 05 F1 | 	add	objptr, #60
1bfa0     F2 20 E2 FA | 	rdword	local02, objptr
1bfa4     3C E4 85 F1 | 	sub	objptr, #60
1bfa8     00 21 56 F2 | 	cmps	local02, #256 wc
1bfac     64 00 90 CD |  if_b	jmp	#LR__2173
1bfb0                 | '   cursor_x:=0
1bfb0     3C E4 05 F1 | 	add	objptr, #60
1bfb4     F2 00 58 FC | 	wrword	#0, objptr
1bfb8                 | '   cursor_y+=1
1bfb8     02 E4 05 F1 | 	add	objptr, #2
1bfbc     F2 20 C2 FA | 	rdbyte	local02, objptr
1bfc0     01 20 06 F1 | 	add	local02, #1
1bfc4     F2 20 42 FC | 	wrbyte	local02, objptr
1bfc8                 | '   if cursor_y>st_lines-1
1bfc8     C3 E4 05 F1 | 	add	objptr, #195
1bfcc     F2 20 02 FB | 	rdlong	local02, objptr
1bfd0     01 20 86 F1 | 	sub	local02, #1
1bfd4     C3 E4 85 F1 | 	sub	objptr, #195
1bfd8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bfdc     3E E4 85 F1 | 	sub	objptr, #62
1bfe0     10 17 5A F2 | 	cmps	arg03, local02 wcz
1bfe4     2C 00 90 ED |  if_be	jmp	#LR__2172
1bfe8                 | '     scrollup2()
1bfe8     00 12 06 F6 | 	mov	arg01, #0
1bfec     01 00 00 FF 
1bff0     58 14 06 F6 | 	mov	arg02, ##600
1bff4     10 16 06 F6 | 	mov	arg03, #16
1bff8     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1bffc                 | '     cursor_y:=st_lines-1
1bffc     01 E5 05 F1 | 	add	objptr, #257
1c000     F2 20 02 FB | 	rdlong	local02, objptr
1c004     01 20 86 F1 | 	sub	local02, #1
1c008     C3 E4 85 F1 | 	sub	objptr, #195
1c00c     F2 20 42 FC | 	wrbyte	local02, objptr
1c010     3E E4 85 F1 | 	sub	objptr, #62
1c014                 | LR__2172
1c014                 | LR__2173
1c014                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1c014     3C E4 05 F1 | 	add	objptr, #60
1c018     F2 14 E2 FA | 	rdword	arg02, objptr
1c01c     02 14 66 F0 | 	shl	arg02, #2
1c020     02 E4 05 F1 | 	add	objptr, #2
1c024     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c028     3E E4 85 F1 | 	sub	objptr, #62
1c02c     04 16 66 F0 | 	shl	arg03, #4
1c030     04 16 06 F1 | 	add	arg03, #4
1c034     11 12 06 F6 | 	mov	arg01, #17
1c038     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1c03c     A7 F0 03 F6 | 	mov	ptra, fp
1c040     B2 00 A0 FD | 	call	#popregs_
1c044                 | _hg010b_spin2_putchar_ret
1c044     2D 00 64 FD | 	ret
1c048                 | 
1c048                 | '     
1c048                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1c048                 | ' 
1c048                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1c048                 | _hg010b_spin2_putchar2
1c048     02 4A 05 F6 | 	mov	COUNT_, #2
1c04c     A8 00 A0 FD | 	call	#pushregs_
1c050     09 1F 02 F6 | 	mov	local01, arg01
1c054                 | ' 
1c054                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1c054     3C E4 05 F1 | 	add	objptr, #60
1c058     F2 12 E2 FA | 	rdword	arg01, objptr
1c05c     02 E4 05 F1 | 	add	objptr, #2
1c060     F2 14 C2 FA | 	rdbyte	arg02, objptr
1c064     04 14 66 F0 | 	shl	arg02, #4
1c068     04 14 06 F1 | 	add	arg02, #4
1c06c     03 E4 05 F1 | 	add	objptr, #3
1c070     F2 18 02 FB | 	rdlong	arg04, objptr
1c074     04 E4 05 F1 | 	add	objptr, #4
1c078     F2 1A 02 FB | 	rdlong	arg05, objptr
1c07c     45 E4 85 F1 | 	sub	objptr, #69
1c080     0F 17 02 F6 | 	mov	arg03, local01
1c084     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1c088     04 E4 05 F1 | 	add	objptr, #4
1c08c     F2 12 02 FB | 	rdlong	arg01, objptr
1c090     10 00 00 FF 
1c094     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1c098     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1c09c     3A E4 05 F1 | 	add	objptr, #58
1c0a0     F2 1A C2 FA | 	rdbyte	arg05, objptr
1c0a4     0D 17 02 FD | 	qmul	arg03, arg05
1c0a8                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1c0a8     10 00 00 FF 
1c0ac     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1c0b0     02 E4 85 F1 | 	sub	objptr, #2
1c0b4     F2 20 E2 FA | 	rdword	local02, objptr
1c0b8     01 20 46 F0 | 	shr	local02, #1
1c0bc     0F 15 02 F6 | 	mov	arg02, local01
1c0c0     01 16 06 F6 | 	mov	arg03, #1
1c0c4     00 18 06 F6 | 	mov	arg04, #0
1c0c8     01 1A 06 F6 | 	mov	arg05, #1
1c0cc     0B 00 00 FF 
1c0d0     90 E4 05 F1 | 	add	objptr, ##5776
1c0d4     18 1E 62 FD | 	getqx	local01
1c0d8     10 1F 02 F1 | 	add	local01, local02
1c0dc     0F 13 02 F1 | 	add	arg01, local01
1c0e0     9C 08 B0 FD | 	call	#_psram_spin2_fill
1c0e4                 | ' 
1c0e4                 | ' cursor_x+=2
1c0e4     0B 00 00 FF 
1c0e8     90 E4 85 F1 | 	sub	objptr, ##5776
1c0ec     F2 20 E2 FA | 	rdword	local02, objptr
1c0f0     02 20 06 F1 | 	add	local02, #2
1c0f4     F2 20 52 FC | 	wrword	local02, objptr
1c0f8                 | ' if cursor_x>=256
1c0f8     F2 20 E2 FA | 	rdword	local02, objptr
1c0fc     3C E4 85 F1 | 	sub	objptr, #60
1c100     00 21 56 F2 | 	cmps	local02, #256 wc
1c104     64 00 90 CD |  if_b	jmp	#LR__2181
1c108                 | '   cursor_x:=0
1c108     3C E4 05 F1 | 	add	objptr, #60
1c10c     F2 00 58 FC | 	wrword	#0, objptr
1c110                 | '   cursor_y+=1
1c110     02 E4 05 F1 | 	add	objptr, #2
1c114     F2 20 C2 FA | 	rdbyte	local02, objptr
1c118     01 20 06 F1 | 	add	local02, #1
1c11c     F2 20 42 FC | 	wrbyte	local02, objptr
1c120                 | '   if cursor_y>st_lines-1
1c120     C3 E4 05 F1 | 	add	objptr, #195
1c124     F2 20 02 FB | 	rdlong	local02, objptr
1c128     01 20 86 F1 | 	sub	local02, #1
1c12c     C3 E4 85 F1 | 	sub	objptr, #195
1c130     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c134     3E E4 85 F1 | 	sub	objptr, #62
1c138     10 17 5A F2 | 	cmps	arg03, local02 wcz
1c13c     2C 00 90 ED |  if_be	jmp	#LR__2180
1c140                 | '     scrollup2()
1c140     00 12 06 F6 | 	mov	arg01, #0
1c144     01 00 00 FF 
1c148     58 14 06 F6 | 	mov	arg02, ##600
1c14c     10 16 06 F6 | 	mov	arg03, #16
1c150     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1c154                 | '     cursor_y:=st_lines-1
1c154     01 E5 05 F1 | 	add	objptr, #257
1c158     F2 20 02 FB | 	rdlong	local02, objptr
1c15c     01 20 86 F1 | 	sub	local02, #1
1c160     C3 E4 85 F1 | 	sub	objptr, #195
1c164     F2 20 42 FC | 	wrbyte	local02, objptr
1c168     3E E4 85 F1 | 	sub	objptr, #62
1c16c                 | LR__2180
1c16c                 | LR__2181
1c16c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1c16c     3C E4 05 F1 | 	add	objptr, #60
1c170     F2 14 E2 FA | 	rdword	arg02, objptr
1c174     02 14 66 F0 | 	shl	arg02, #2
1c178     02 E4 05 F1 | 	add	objptr, #2
1c17c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c180     3E E4 85 F1 | 	sub	objptr, #62
1c184     04 16 66 F0 | 	shl	arg03, #4
1c188     04 16 06 F1 | 	add	arg03, #4
1c18c     11 12 06 F6 | 	mov	arg01, #17
1c190     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1c194     A7 F0 03 F6 | 	mov	ptra, fp
1c198     B2 00 A0 FD | 	call	#popregs_
1c19c                 | _hg010b_spin2_putchar2_ret
1c19c     2D 00 64 FD | 	ret
1c1a0                 | 
1c1a0                 | ' ''--------- Output a string at the cursor position, move the cursor  
1c1a0                 | ' 
1c1a0                 | ' pub write(text) | iii,c,ncx,ncy
1c1a0                 | _hg010b_spin2_write
1c1a0     04 4A 05 F6 | 	mov	COUNT_, #4
1c1a4     A8 00 A0 FD | 	call	#pushregs_
1c1a8     09 1F 02 F6 | 	mov	local01, arg01
1c1ac                 | ' 
1c1ac                 | ' repeat iii from 0 to strsize(text)-1
1c1ac     00 20 06 F6 | 	mov	local02, #0
1c1b0     0F 13 02 F6 | 	mov	arg01, local01
1c1b4     09 23 02 F6 | 	mov	local03, arg01
1c1b8     97 06 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1c1bc                 | LR__2190
1c1bc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c1c0     01 22 06 51 |  if_ne	add	local03, #1
1c1c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2190
1c1c8                 | LR__2191
1c1c8     09 23 82 F1 | 	sub	local03, arg01
1c1cc     01 22 86 F1 | 	sub	local03, #1
1c1d0     00 22 56 F2 | 	cmps	local03, #0 wc
1c1d4     01 24 86 F6 | 	negc	local04, #1
1c1d8     12 23 02 F1 | 	add	local03, local04
1c1dc                 | LR__2192
1c1dc                 | '   putchar2(byte[text+iii])
1c1dc     0F 13 02 F6 | 	mov	arg01, local01
1c1e0     10 13 02 F1 | 	add	arg01, local02
1c1e4     09 13 C2 FA | 	rdbyte	arg01, arg01
1c1e8     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1c1ec     12 21 02 F1 | 	add	local02, local04
1c1f0     11 21 0A F2 | 	cmp	local02, local03 wz
1c1f4     E4 FF 9F 5D |  if_ne	jmp	#LR__2192
1c1f8     A7 F0 03 F6 | 	mov	ptra, fp
1c1fc     B2 00 A0 FD | 	call	#popregs_
1c200                 | _hg010b_spin2_write_ret
1c200     2D 00 64 FD | 	ret
1c204                 | 
1c204                 | '    
1c204                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1c204                 | ' 
1c204                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1c204                 | _hg010b_spin2_scrollup2
1c204     03 4A 05 F6 | 	mov	COUNT_, #3
1c208     A8 00 A0 FD | 	call	#pushregs_
1c20c                 | ' 	
1c20c                 | ' repeat i from 4 to 579 
1c20c     04 1E 06 F6 | 	mov	local01, #4
1c210                 | LR__2200
1c210     F9 E4 05 F1 | 	add	objptr, #249
1c214     F2 1A 02 FB | 	rdlong	arg05, objptr
1c218     1C E4 85 F1 | 	sub	objptr, #28
1c21c     F2 14 02 FB | 	rdlong	arg02, objptr
1c220     0F 19 02 F6 | 	mov	arg04, local01
1c224     10 18 06 F1 | 	add	arg04, #16
1c228     02 18 66 F0 | 	shl	arg04, #2
1c22c     14 E4 05 F1 | 	add	objptr, #20
1c230     F2 16 02 FB | 	rdlong	arg03, objptr
1c234     0B 19 02 FD | 	qmul	arg04, arg03
1c238                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1c238     F6 03 00 FF 
1c23c     00 12 06 F6 | 	mov	arg01, ##519168
1c240     0D 13 82 F1 | 	sub	arg01, arg05
1c244     02 16 66 F0 | 	shl	arg03, #2
1c248     0A 00 00 FF 
1c24c     DB E5 05 F1 | 	add	objptr, ##5595
1c250     18 1A 62 FD | 	getqx	arg05
1c254     0D 15 02 F1 | 	add	arg02, arg05
1c258     EC 05 B0 FD | 	call	#_psram_spin2_read1
1c25c     0A 00 00 FF 
1c260     D3 E5 85 F1 | 	sub	objptr, ##5587
1c264     F2 1A 02 FB | 	rdlong	arg05, objptr
1c268     1C E4 85 F1 | 	sub	objptr, #28
1c26c     F2 14 02 FB | 	rdlong	arg02, objptr
1c270     0F 19 02 F6 | 	mov	arg04, local01
1c274     02 18 66 F0 | 	shl	arg04, #2
1c278     14 E4 05 F1 | 	add	objptr, #20
1c27c     F2 16 02 FB | 	rdlong	arg03, objptr
1c280     0B 19 02 FD | 	qmul	arg04, arg03
1c284                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1c284     F6 03 00 FF 
1c288     00 12 06 F6 | 	mov	arg01, ##519168
1c28c     0D 13 82 F1 | 	sub	arg01, arg05
1c290     02 16 66 F0 | 	shl	arg03, #2
1c294     0A 00 00 FF 
1c298     DB E5 05 F1 | 	add	objptr, ##5595
1c29c     18 1A 62 FD | 	getqx	arg05
1c2a0     0D 15 02 F1 | 	add	arg02, arg05
1c2a4     3C 06 B0 FD | 	call	#_psram_spin2_write
1c2a8     0B 00 00 FF 
1c2ac     CC E4 85 F1 | 	sub	objptr, ##5836
1c2b0     01 1E 06 F1 | 	add	local01, #1
1c2b4     01 00 00 FF 
1c2b8     44 1E 16 F2 | 	cmp	local01, ##580 wc
1c2bc     50 FF 9F CD |  if_b	jmp	#LR__2200
1c2c0                 | ' 
1c2c0                 | ' repeat i from 580 to 599
1c2c0     01 00 00 FF 
1c2c4     44 1E 06 F6 | 	mov	local01, ##580
1c2c8                 | LR__2201
1c2c8                 | '    fastline(0,1023,i,write_background)   
1c2c8     45 E4 05 F1 | 	add	objptr, #69
1c2cc     F2 18 02 FB | 	rdlong	arg04, objptr
1c2d0     45 E4 85 F1 | 	sub	objptr, #69
1c2d4     00 12 06 F6 | 	mov	arg01, #0
1c2d8     09 14 CE F9 | 	bmask	arg02, #9
1c2dc     0F 17 02 F6 | 	mov	arg03, local01
1c2e0     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1c2e4     01 1E 06 F1 | 	add	local01, #1
1c2e8     01 00 00 FF 
1c2ec     58 1E 16 F2 | 	cmp	local01, ##600 wc
1c2f0     D4 FF 9F CD |  if_b	jmp	#LR__2201
1c2f4                 | ' repeat i from 0 to 3
1c2f4     00 1E 06 F6 | 	mov	local01, #0
1c2f8                 | LR__2202
1c2f8                 | '    fastline(0,1023,i,write_background)      
1c2f8     45 E4 05 F1 | 	add	objptr, #69
1c2fc     F2 18 02 FB | 	rdlong	arg04, objptr
1c300     45 E4 85 F1 | 	sub	objptr, #69
1c304     00 12 06 F6 | 	mov	arg01, #0
1c308     09 14 CE F9 | 	bmask	arg02, #9
1c30c     0F 17 02 F6 | 	mov	arg03, local01
1c310     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1c314     01 1E 06 F1 | 	add	local01, #1
1c318     04 1E 56 F2 | 	cmps	local01, #4 wc
1c31c     D8 FF 9F CD |  if_b	jmp	#LR__2202
1c320                 | ' 
1c320                 | ' repeat i from 0 to 35
1c320     00 1E 06 F6 | 	mov	local01, #0
1c324                 | LR__2203
1c324     0F 1B 02 F6 | 	mov	arg05, local01
1c328     01 1A 06 F1 | 	add	arg05, #1
1c32c     10 00 00 FF 
1c330     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1c334     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1c338     0B 1B 02 FD | 	qmul	arg05, arg03
1c33c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1c33c     F6 03 00 FF 
1c340     00 12 06 F6 | 	mov	arg01, ##519168
1c344     F9 E4 05 F1 | 	add	objptr, #249
1c348     F2 1A 02 FB | 	rdlong	arg05, objptr
1c34c     0D 13 82 F1 | 	sub	arg01, arg05
1c350     F5 E4 85 F1 | 	sub	objptr, #245
1c354     F2 14 02 FB | 	rdlong	arg02, objptr
1c358     10 00 00 FF 
1c35c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1c360     0B 00 00 FF 
1c364     C8 E4 05 F1 | 	add	objptr, ##5832
1c368     18 1A 62 FD | 	getqx	arg05
1c36c     0D 15 02 F1 | 	add	arg02, arg05
1c370     D4 04 B0 FD | 	call	#_psram_spin2_read1
1c374     10 00 00 FF 
1c378     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1c37c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1c380     0B 1F 02 FD | 	qmul	local01, arg03
1c384                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1c384     F6 03 00 FF 
1c388     00 12 06 F6 | 	mov	arg01, ##519168
1c38c     0A 00 00 FF 
1c390     D3 E5 85 F1 | 	sub	objptr, ##5587
1c394     F2 1A 02 FB | 	rdlong	arg05, objptr
1c398     0D 13 82 F1 | 	sub	arg01, arg05
1c39c     F5 E4 85 F1 | 	sub	objptr, #245
1c3a0     F2 14 02 FB | 	rdlong	arg02, objptr
1c3a4     10 00 00 FF 
1c3a8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1c3ac     0B 00 00 FF 
1c3b0     C8 E4 05 F1 | 	add	objptr, ##5832
1c3b4     18 1A 62 FD | 	getqx	arg05
1c3b8     0D 15 02 F1 | 	add	arg02, arg05
1c3bc     24 05 B0 FD | 	call	#_psram_spin2_write
1c3c0     0B 00 00 FF 
1c3c4     CC E4 85 F1 | 	sub	objptr, ##5836
1c3c8     01 1E 06 F1 | 	add	local01, #1
1c3cc     24 1E 56 F2 | 	cmps	local01, #36 wc
1c3d0     50 FF 9F CD |  if_b	jmp	#LR__2203
1c3d4                 | ' repeat i from 0 to timings[7]-1
1c3d4     00 1E 06 F6 | 	mov	local01, #0
1c3d8     10 00 00 FF 
1c3dc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1c3e0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1c3e4     10 00 00 FF 
1c3e8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1c3ec     01 20 86 F1 | 	sub	local02, #1
1c3f0     00 20 56 F2 | 	cmps	local02, #0 wc
1c3f4     01 22 86 F6 | 	negc	local03, #1
1c3f8     11 21 02 F1 | 	add	local02, local03
1c3fc                 | LR__2204
1c3fc                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1c3fc     04 E4 05 F1 | 	add	objptr, #4
1c400     F2 12 02 FB | 	rdlong	arg01, objptr
1c404     10 00 00 FF 
1c408     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1c40c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c410     10 00 00 FF 
1c414     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1c418     0D 19 02 F6 | 	mov	arg04, arg05
1c41c     03 18 66 F0 | 	shl	arg04, #3
1c420     0D 19 02 F1 | 	add	arg04, arg05
1c424     02 18 66 F0 | 	shl	arg04, #2
1c428     0F 19 02 F1 | 	add	arg04, local01
1c42c     0C 13 02 F1 | 	add	arg01, arg04
1c430     20 14 06 F6 | 	mov	arg02, #32
1c434     01 16 06 F6 | 	mov	arg03, #1
1c438     00 18 06 F6 | 	mov	arg04, #0
1c43c     01 1A 06 F6 | 	mov	arg05, #1
1c440     0B 00 00 FF 
1c444     C8 E4 05 F1 | 	add	objptr, ##5832
1c448     34 05 B0 FD | 	call	#_psram_spin2_fill
1c44c     0B 00 00 FF 
1c450     CC E4 85 F1 | 	sub	objptr, ##5836
1c454     11 1F 02 F1 | 	add	local01, local03
1c458     10 1F 0A F2 | 	cmp	local01, local02 wz
1c45c     9C FF 9F 5D |  if_ne	jmp	#LR__2204
1c460     A7 F0 03 F6 | 	mov	ptra, fp
1c464     B2 00 A0 FD | 	call	#popregs_
1c468                 | _hg010b_spin2_scrollup2_ret
1c468     2D 00 64 FD | 	ret
1c46c                 | 
1c46c                 | ' 
1c46c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1c46c                 | ' 
1c46c                 | ' pub crlf()
1c46c                 | _hg010b_spin2_crlf
1c46c                 | ' 
1c46c                 | ' cursor_x:=leading_spaces*2
1c46c     01 00 00 FF 
1c470     B6 E4 05 F1 | 	add	objptr, ##694
1c474     F2 16 02 FB | 	rdlong	arg03, objptr
1c478     01 16 66 F0 | 	shl	arg03, #1
1c47c     01 00 00 FF 
1c480     7A E4 85 F1 | 	sub	objptr, ##634
1c484     F2 16 52 FC | 	wrword	arg03, objptr
1c488                 | ' cursor_y+=1
1c488     02 E4 05 F1 | 	add	objptr, #2
1c48c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c490     01 16 06 F1 | 	add	arg03, #1
1c494     F2 16 42 FC | 	wrbyte	arg03, objptr
1c498                 | ' if cursor_y>st_lines-1
1c498     C3 E4 05 F1 | 	add	objptr, #195
1c49c     F2 16 02 FB | 	rdlong	arg03, objptr
1c4a0     01 16 86 F1 | 	sub	arg03, #1
1c4a4     C3 E4 85 F1 | 	sub	objptr, #195
1c4a8     F2 14 C2 FA | 	rdbyte	arg02, objptr
1c4ac     3E E4 85 F1 | 	sub	objptr, #62
1c4b0     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1c4b4     2C 00 90 ED |  if_be	jmp	#LR__2210
1c4b8                 | '   scrollup2()
1c4b8     00 12 06 F6 | 	mov	arg01, #0
1c4bc     01 00 00 FF 
1c4c0     58 14 06 F6 | 	mov	arg02, ##600
1c4c4     10 16 06 F6 | 	mov	arg03, #16
1c4c8     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1c4cc                 | '   cursor_y:=st_lines-1
1c4cc     01 E5 05 F1 | 	add	objptr, #257
1c4d0     F2 16 02 FB | 	rdlong	arg03, objptr
1c4d4     01 16 86 F1 | 	sub	arg03, #1
1c4d8     C3 E4 85 F1 | 	sub	objptr, #195
1c4dc     F2 16 42 FC | 	wrbyte	arg03, objptr
1c4e0     3E E4 85 F1 | 	sub	objptr, #62
1c4e4                 | LR__2210
1c4e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1c4e4     3C E4 05 F1 | 	add	objptr, #60
1c4e8     F2 14 E2 FA | 	rdword	arg02, objptr
1c4ec     02 14 66 F0 | 	shl	arg02, #2
1c4f0     02 E4 05 F1 | 	add	objptr, #2
1c4f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c4f8     3E E4 85 F1 | 	sub	objptr, #62
1c4fc     04 16 66 F0 | 	shl	arg03, #4
1c500     04 16 06 F1 | 	add	arg03, #4
1c504     11 12 06 F6 | 	mov	arg01, #17
1c508     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1c50c                 | _hg010b_spin2_crlf_ret
1c50c     2D 00 64 FD | 	ret
1c510                 | 
1c510                 | ' 
1c510                 | ' 
1c510                 | ' '*************************************************************************
1c510                 | ' '                                                                        *
1c510                 | ' '  Conversions                                                           *
1c510                 | ' '                                                                        *
1c510                 | ' '*************************************************************************
1c510                 | ' 
1c510                 | ' ''---------- Convert a integer to dec string, return a pointer
1c510                 | ' 
1c510                 | ' pub inttostr(i):result |q,pos,k,j
1c510                 | _hg010b_spin2_inttostr
1c510     03 4A 05 F6 | 	mov	COUNT_, #3
1c514     A8 00 A0 FD | 	call	#pushregs_
1c518     09 1F 0A F6 | 	mov	local01, arg01 wz
1c51c                 | ' 
1c51c                 | ' j:=i
1c51c                 | ' pos:=10
1c51c     0A 20 06 F6 | 	mov	local02, #10
1c520                 | ' k:=0
1c520     00 22 06 F6 | 	mov	local03, #0
1c524                 | ' 
1c524                 | ' if (j==0)
1c524     18 00 90 5D |  if_ne	jmp	#LR__2220
1c528                 | '   n_string[0]:=48
1c528     4D E4 05 F1 | 	add	objptr, #77
1c52c     F2 60 48 FC | 	wrbyte	#48, objptr
1c530                 | '   n_string[1]:=0
1c530     01 E4 05 F1 | 	add	objptr, #1
1c534     F2 00 48 FC | 	wrbyte	#0, objptr
1c538     4E E4 85 F1 | 	sub	objptr, #78
1c53c     C4 00 90 FD | 	jmp	#LR__2227
1c540                 | LR__2220
1c540                 | ' 
1c540                 | ' else
1c540                 | '   if (j<0)
1c540     0F 1F 52 F6 | 	abs	local01, local01 wc
1c544                 | '     j:=0-j
1c544                 | '     k:=45
1c544     2D 22 06 C6 |  if_b	mov	local03, #45
1c548                 | ' 
1c548                 | '   n_string[11]:=0
1c548     58 E4 05 F1 | 	add	objptr, #88
1c54c     F2 00 48 FC | 	wrbyte	#0, objptr
1c550     58 E4 85 F1 | 	sub	objptr, #88
1c554     97 24 48 FB | 	callpa	#(@LR__2222-@LR__2221)>>2,fcache_load_ptr_
1c558                 | '   repeat while (pos>-1)
1c558                 | LR__2221
1c558     00 20 56 F2 | 	cmps	local02, #0 wc
1c55c     40 00 90 CD |  if_b	jmp	#LR__2223
1c560     0F FB 51 F6 | 	abs	result1, local01 wc
1c564     0A FA 15 FD | 	qdiv	result1, #10
1c568                 | '     q:=j//10
1c568     19 FA 61 FD | 	getqy	result1
1c56c     FD FA 81 F6 | 	negc	result1, result1
1c570     0F 1F 52 F6 | 	abs	local01, local01 wc
1c574     0A 1E 16 FD | 	qdiv	local01, #10
1c578                 | '     q:=48+q
1c578     30 FA 05 F1 | 	add	result1, #48
1c57c                 | '     n_string[pos]:=q
1c57c     10 1F 02 F6 | 	mov	local01, local02
1c580     4D E4 05 F1 | 	add	objptr, #77
1c584     F2 1E 02 F1 | 	add	local01, objptr
1c588     0F FB 41 FC | 	wrbyte	result1, local01
1c58c                 | '     j:=j/10
1c58c     4D E4 85 F1 | 	sub	objptr, #77
1c590                 | '     pos-=1
1c590     01 20 86 F1 | 	sub	local02, #1
1c594     18 1E 62 FD | 	getqx	local01
1c598     0F 1F 82 F6 | 	negc	local01, local01
1c59c     B8 FF 9F FD | 	jmp	#LR__2221
1c5a0                 | LR__2222
1c5a0                 | LR__2223
1c5a0                 | '   repeat while n_string[0]==48
1c5a0                 | LR__2224
1c5a0     4D E4 05 F1 | 	add	objptr, #77
1c5a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c5a8     4D E4 85 F1 | 	sub	objptr, #77
1c5ac     30 16 0E F2 | 	cmp	arg03, #48 wz
1c5b0     20 00 90 5D |  if_ne	jmp	#LR__2225
1c5b4                 | '     bytemove(@n_string,@n_string+1,12)
1c5b4     4D E4 05 F1 | 	add	objptr, #77
1c5b8     F2 12 02 F6 | 	mov	arg01, objptr
1c5bc     F2 14 02 F6 | 	mov	arg02, objptr
1c5c0     4D E4 85 F1 | 	sub	objptr, #77
1c5c4     01 14 06 F1 | 	add	arg02, #1
1c5c8     0C 16 06 F6 | 	mov	arg03, #12
1c5cc     9C 0D B0 FD | 	call	#__system____builtin_memmove
1c5d0     CC FF 9F FD | 	jmp	#LR__2224
1c5d4                 | LR__2225
1c5d4                 | ' 
1c5d4                 | '   if k==45
1c5d4     2D 22 0E F2 | 	cmp	local03, #45 wz
1c5d8     28 00 90 5D |  if_ne	jmp	#LR__2226
1c5dc                 | '      bytemove(@n_string+1,@n_string,12)
1c5dc     4D E4 05 F1 | 	add	objptr, #77
1c5e0     F2 12 02 F6 | 	mov	arg01, objptr
1c5e4     01 12 06 F1 | 	add	arg01, #1
1c5e8     F2 14 02 F6 | 	mov	arg02, objptr
1c5ec     4D E4 85 F1 | 	sub	objptr, #77
1c5f0     0C 16 06 F6 | 	mov	arg03, #12
1c5f4     74 0D B0 FD | 	call	#__system____builtin_memmove
1c5f8                 | '      n_string[0]:=k
1c5f8     4D E4 05 F1 | 	add	objptr, #77
1c5fc     F2 22 42 FC | 	wrbyte	local03, objptr
1c600     4D E4 85 F1 | 	sub	objptr, #77
1c604                 | LR__2226
1c604                 | LR__2227
1c604                 | ' 
1c604                 | ' q:=@n_string
1c604     4D E4 05 F1 | 	add	objptr, #77
1c608     F2 FA 01 F6 | 	mov	result1, objptr
1c60c     4D E4 85 F1 | 	sub	objptr, #77
1c610                 | ' return q
1c610     A7 F0 03 F6 | 	mov	ptra, fp
1c614     B2 00 A0 FD | 	call	#popregs_
1c618                 | _hg010b_spin2_inttostr_ret
1c618     2D 00 64 FD | 	ret
1c61c                 | 
1c61c                 | ' 
1c61c                 | ' '..............................................................................
1c61c                 | ' 
1c61c                 | ' {{
1c61c                 | ' }}
1c61c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1c61c                 | _psram_spin2_startx
1c61c     04 4A 05 F6 | 	mov	COUNT_, #4
1c620     A8 00 A0 FD | 	call	#pushregs_
1c624     09 1F 02 F6 | 	mov	local01, arg01
1c628     0B 21 02 F6 | 	mov	local02, arg03
1c62c     0C 23 02 F6 | 	mov	local03, arg04
1c630                 | '     stop() ' restart driver if required
1c630     54 01 B0 FD | 	call	#_psram_spin2_stop
1c634     00 1E 0E F2 | 	cmp	local01, #0 wz
1c638     14 1E 06 AB |  if_e	rdlong	local01, #20
1c63c     0F 15 52 F6 | 	abs	arg02, local01 wc
1c640     A1 07 00 FF 
1c644     40 14 16 FD | 	qdiv	arg02, ##1000000
1c648                 | ' 
1c648                 | '     ' use current frequency if none specified
1c648                 | ' 
1c648                 | '     if freq == 0 
1c648                 | '         freq := clkfreq 
1c648                 | ' 
1c648                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1c648                 | ' 
1c648                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1c648                 | '     if burst < 0
1c648                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1c648     18 14 62 FD | 	getqx	arg02
1c64c     0A 19 82 F6 | 	negc	arg04, arg02
1c650     03 18 66 F0 | 	shl	arg04, #3
1c654     84 18 86 F1 | 	sub	arg04, #132
1c658     04 18 46 F0 | 	shr	arg04, #4
1c65c     04 18 66 F0 | 	shl	arg04, #4
1c660     00 18 56 F2 | 	cmps	arg04, #0 wc
1c664     0E FA 65 C6 |  if_b	neg	result1, #14
1c668     10 01 90 CD |  if_b	jmp	#LR__2233
1c66c                 | ' 
1c66c                 | '     ' compute the input delay
1c66c                 | ' 
1c66c                 | '     if delay <= 0
1c66c     01 20 56 F2 | 	cmps	local02, #1 wc
1c670     10 00 90 3D |  if_ae	jmp	#LR__2230
1c674                 | '         delay := lookupDelay(freq)
1c674     0F 13 02 F6 | 	mov	arg01, local01
1c678     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1c67c     FD 20 02 F6 | 	mov	local02, result1
1c680     04 00 90 FD | 	jmp	#LR__2231
1c684                 | LR__2230
1c684                 | '     else
1c684                 | '         delay <#= $f ' limit to 15
1c684     0F 20 66 F3 | 	fles	local02, #15
1c688                 | LR__2231
1c688                 | ' 
1c688                 | '     ' create our lock
1c688                 | ' 
1c688                 | '     driverlock := LOCKNEW()  
1c688     00 FA 05 F6 | 	mov	result1, #0
1c68c     04 FA 61 FD | 	locknew	result1
1c690     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1c694     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1c698                 | '     if driverlock == -1
1c698     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1c69c     FF FF 7F FF 
1c6a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1c6a4                 | '         return ERR_NO_LOCK
1c6a4     1A FA 65 A6 |  if_e	neg	result1, #26
1c6a8     D0 00 90 AD |  if_e	jmp	#LR__2233
1c6ac                 | ' 
1c6ac                 | '     ' patch in the proper data and HUB addresses to the startup structure
1c6ac                 | ' 
1c6ac                 | '     long[@startupData][0]:=clkfreq
1c6ac     14 1E 06 FB | 	rdlong	local01, #20
1c6b0     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1c6b4     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1c6b8                 | ' '    long[@startupData][1]:=$1000_0000
1c6b8                 | '     long[@startupData][5]:=@deviceData
1c6b8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1c6bc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1c6c0     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1c6c4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1c6c8     14 14 06 F1 | 	add	arg02, #20
1c6cc     0A 1F 62 FC | 	wrlong	local01, arg02
1c6d0                 | '     long[@startupData][6]:=@qosData
1c6d0     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1c6d4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1c6d8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1c6dc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1c6e0     18 14 06 F1 | 	add	arg02, #24
1c6e4     0A 1F 62 FC | 	wrlong	local01, arg02
1c6e8                 | '     long[@startupData][7]:=$7FF00
1c6e8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1c6ec     1C 1E 06 F1 | 	add	local01, #28
1c6f0     FF 03 80 FF 
1c6f4     0F 01 6A FC | 	wrlong	##524032, local01
1c6f8                 | ' 
1c6f8                 | '     ' setup some default bank and QoS parameter values
1c6f8                 | ' 
1c6f8                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1c6f8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1c6fc     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1c700     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1c704     10 18 66 F0 | 	shl	arg04, #16
1c708     0C 20 66 F0 | 	shl	local02, #12
1c70c     10 19 42 F5 | 	or	arg04, local02
1c710     18 18 46 F5 | 	or	arg04, #24
1c714     0C 15 02 F6 | 	mov	arg02, arg04
1c718     02 16 06 F6 | 	mov	arg03, #2
1c71c     A0 00 A0 FD | 	call	#\builtin_longfill_
1c720                 | '     longfill(@qosData, $FFFF0000, 8)
1c720     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1c724     07 16 06 F6 | 	mov	arg03, #7
1c728     28 16 62 FD | 	setq	arg03
1c72c     80 FF FF FF 
1c730     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1c734                 | ' 
1c734                 | '     ' get the address of the PSRAM memory driver so we can start it
1c734                 | ' 
1c734                 | '     driverAddr:= driver.getDriverAddr()
1c734                 | '     return @driver_start
1c734     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1c738     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1c73c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1c740                 | ' 
1c740                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1c740                 | ' 
1c740                 | '     if desiredcog < 0
1c740     00 22 56 F2 | 	cmps	local03, #0 wc
1c744                 | '         desiredcog := NEWCOG
1c744     10 22 06 C6 |  if_b	mov	local03, #16
1c748                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1c748     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1c74c     11 25 02 F6 | 	mov	local04, local03
1c750     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1c754     0A 25 F2 FC | 	coginit	local04, arg02 wc
1c758     01 24 66 C6 |  if_b	neg	local04, #1
1c75c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1c760     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1c764                 | '     repeat until long[@startupData] == 0 
1c764     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1c768                 | LR__2232
1c768     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1c76c     F8 FF 9F 5D |  if_ne	jmp	#LR__2232
1c770                 | ' 
1c770                 | '     return drivercog
1c770     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1c774     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1c778     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c77c                 | LR__2233
1c77c     A7 F0 03 F6 | 	mov	ptra, fp
1c780     B2 00 A0 FD | 	call	#popregs_
1c784                 | _psram_spin2_startx_ret
1c784     2D 00 64 FD | 	ret
1c788                 | 
1c788                 | ' 
1c788                 | ' '..............................................................................
1c788                 | ' 
1c788                 | ' {{
1c788                 | ' }}
1c788                 | ' PUB stop() : i
1c788                 | _psram_spin2_stop
1c788     00 00 06 F6 | 	mov	_var01, #0
1c78c                 | '     if drivercog <> -1
1c78c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c790     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1c794     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c798     FF FF 7F FF 
1c79c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1c7a0     70 00 90 AD |  if_e	jmp	#LR__2243
1c7a4                 | '         cogstop(drivercog) ' a rather brutal stop
1c7a4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c7a8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1c7ac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c7b0     03 12 62 FD | 	cogstop	arg01
1c7b4     97 26 48 FB | 	callpa	#(@LR__2242-@LR__2240)>>2,fcache_load_ptr_
1c7b8                 | '         repeat i from 0 to 7
1c7b8                 | LR__2240
1c7b8                 | '             if long[$7FF00][i*3] < 0
1c7b8     00 FB 01 F6 | 	mov	result1, _var01
1c7bc     01 FA 65 F0 | 	shl	result1, #1
1c7c0     00 FB 01 F1 | 	add	result1, _var01
1c7c4     02 FA 65 F0 | 	shl	result1, #2
1c7c8     FF 03 00 FF 
1c7cc     00 FB 05 F1 | 	add	result1, ##524032
1c7d0     FD FA 01 FB | 	rdlong	result1, result1
1c7d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1c7d8     1C 00 90 3D |  if_ae	jmp	#LR__2241
1c7dc                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1c7dc     00 FB 01 F6 | 	mov	result1, _var01
1c7e0     01 FA 65 F0 | 	shl	result1, #1
1c7e4     00 FB 01 F1 | 	add	result1, _var01
1c7e8     02 FA 65 F0 | 	shl	result1, #2
1c7ec     FF 03 00 FF 
1c7f0     00 FB 05 F1 | 	add	result1, ##524032
1c7f4     FD 20 68 FC | 	wrlong	#16, result1
1c7f8                 | LR__2241
1c7f8     01 00 06 F1 | 	add	_var01, #1
1c7fc     08 00 56 F2 | 	cmps	_var01, #8 wc
1c800     B4 FF 9F CD |  if_b	jmp	#LR__2240
1c804                 | LR__2242
1c804                 | '         drivercog := -1
1c804     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c808     FF FF FF FF 
1c80c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1c810     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c814                 | LR__2243
1c814                 | '     if driverlock <> -1
1c814     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1c818     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1c81c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1c820     FF FF 7F FF 
1c824     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1c828                 | '         LOCKRET(driverlock)
1c828     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1c82c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1c830     05 12 62 5D |  if_ne	lockret	arg01
1c834                 | '         driverlock := -1
1c834     FF FF FF 5F 
1c838     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1c83c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1c840     00 FB 01 F6 | 	mov	result1, _var01
1c844                 | _psram_spin2_stop_ret
1c844     2D 00 64 FD | 	ret
1c848                 | 
1c848                 | ' 
1c848                 | ' '..............................................................................
1c848                 | ' 
1c848                 | ' {{
1c848                 | ' }}
1c848                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1c848                 | _psram_spin2_read1
1c848                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1c848                 | '     if drivercog == -1 ' driver must be running
1c848     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c84c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1c850     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c854     FF FF 7F FF 
1c858     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1c85c                 | '         return ERR_INACTIVE
1c85c     0F FA 65 A6 |  if_e	neg	result1, #15
1c860     7C 00 90 AD |  if_e	jmp	#LR__2251
1c864                 | '     if count == 0 ' don't even bother reading
1c864     00 16 0E F2 | 	cmp	arg03, #0 wz
1c868                 | '         return 0
1c868     00 FA 05 A6 |  if_e	mov	result1, #0
1c86c     70 00 90 AD |  if_e	jmp	#LR__2251
1c870                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1c870     00 FA 05 F6 | 	mov	result1, #0
1c874     01 FA 61 FD | 	cogid	result1
1c878     FD 00 02 F6 | 	mov	_var01, result1
1c87c     01 00 66 F0 | 	shl	_var01, #1
1c880     FD 00 02 F1 | 	add	_var01, result1
1c884     02 00 66 F0 | 	shl	_var01, #2
1c888     FF 03 00 FF 
1c88c     00 03 06 F6 | 	mov	_var02, ##524032
1c890     00 03 02 F1 | 	add	_var02, _var01
1c894                 | '     if long[mailbox] < 0
1c894     01 01 02 FB | 	rdlong	_var01, _var02
1c898     00 00 56 F2 | 	cmps	_var01, #0 wc
1c89c                 | '         return ERR_MAILBOX_BUSY
1c89c     1C FA 65 C6 |  if_b	neg	result1, #28
1c8a0     3C 00 90 CD |  if_b	jmp	#LR__2251
1c8a4                 | '     long[mailbox][2] := count
1c8a4     08 02 06 F1 | 	add	_var02, #8
1c8a8     01 17 62 FC | 	wrlong	arg03, _var02
1c8ac                 | '     long[mailbox][1] := dstHubAddr
1c8ac     04 02 86 F1 | 	sub	_var02, #4
1c8b0     01 13 62 FC | 	wrlong	arg01, _var02
1c8b4     04 02 86 F1 | 	sub	_var02, #4
1c8b8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1c8b8     0A 05 02 F6 | 	mov	_var03, arg02
1c8bc     D9 04 06 F4 | 	bitl	_var03, #217
1c8c0     00 00 58 FF 
1c8c4     00 00 06 F6 | 	mov	_var01, ##-1342177280
1c8c8     02 01 02 F1 | 	add	_var01, _var03
1c8cc     01 01 62 FC | 	wrlong	_var01, _var02
1c8d0                 | '     repeat
1c8d0                 | LR__2250
1c8d0                 | '         result := long[mailbox]    
1c8d0     01 05 02 FB | 	rdlong	_var03, _var02
1c8d4     00 04 56 F2 | 	cmps	_var03, #0 wc
1c8d8     F4 FF 9F CD |  if_b	jmp	#LR__2250
1c8dc                 | '     while result < 0   
1c8dc                 | '     return -result                       'return success or error
1c8dc     02 FB 61 F6 | 	neg	result1, _var03
1c8e0                 | LR__2251
1c8e0                 | _psram_spin2_read1_ret
1c8e0     2D 00 64 FD | 	ret
1c8e4                 | 
1c8e4                 | ' 
1c8e4                 | ' '..............................................................................
1c8e4                 | ' 
1c8e4                 | ' {{
1c8e4                 | ' }}
1c8e4                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1c8e4                 | _psram_spin2_write
1c8e4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1c8e4                 | '     if drivercog == -1 ' driver must be running
1c8e4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c8e8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1c8ec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c8f0     FF FF 7F FF 
1c8f4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1c8f8                 | '         return ERR_INACTIVE
1c8f8     0F FA 65 A6 |  if_e	neg	result1, #15
1c8fc     7C 00 90 AD |  if_e	jmp	#LR__2261
1c900                 | '     if count == 0 ' don't even bother writing
1c900     00 16 0E F2 | 	cmp	arg03, #0 wz
1c904                 | '         return 0
1c904     00 FA 05 A6 |  if_e	mov	result1, #0
1c908     70 00 90 AD |  if_e	jmp	#LR__2261
1c90c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1c90c     00 FA 05 F6 | 	mov	result1, #0
1c910     01 FA 61 FD | 	cogid	result1
1c914     FD 00 02 F6 | 	mov	_var01, result1
1c918     01 00 66 F0 | 	shl	_var01, #1
1c91c     FD 00 02 F1 | 	add	_var01, result1
1c920     02 00 66 F0 | 	shl	_var01, #2
1c924     FF 03 00 FF 
1c928     00 03 06 F6 | 	mov	_var02, ##524032
1c92c     00 03 02 F1 | 	add	_var02, _var01
1c930                 | '     if long[mailbox] < 0
1c930     01 01 02 FB | 	rdlong	_var01, _var02
1c934     00 00 56 F2 | 	cmps	_var01, #0 wc
1c938                 | '         return ERR_MAILBOX_BUSY
1c938     1C FA 65 C6 |  if_b	neg	result1, #28
1c93c     3C 00 90 CD |  if_b	jmp	#LR__2261
1c940                 | '     long[mailbox][2] := count
1c940     08 02 06 F1 | 	add	_var02, #8
1c944     01 17 62 FC | 	wrlong	arg03, _var02
1c948                 | '     long[mailbox][1] := srcHubAddr
1c948     04 02 86 F1 | 	sub	_var02, #4
1c94c     01 13 62 FC | 	wrlong	arg01, _var02
1c950     04 02 86 F1 | 	sub	_var02, #4
1c954                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1c954     0A 05 02 F6 | 	mov	_var03, arg02
1c958     D9 04 06 F4 | 	bitl	_var03, #217
1c95c     00 00 78 FF 
1c960     00 00 06 F6 | 	mov	_var01, ##-268435456
1c964     02 01 02 F1 | 	add	_var01, _var03
1c968     01 01 62 FC | 	wrlong	_var01, _var02
1c96c                 | '     repeat
1c96c                 | LR__2260
1c96c                 | '         result := long[mailbox]    
1c96c     01 05 02 FB | 	rdlong	_var03, _var02
1c970     00 04 56 F2 | 	cmps	_var03, #0 wc
1c974     F4 FF 9F CD |  if_b	jmp	#LR__2260
1c978                 | '     while result < 0   
1c978                 | '     return -result                       'return success or error
1c978     02 FB 61 F6 | 	neg	result1, _var03
1c97c                 | LR__2261
1c97c                 | _psram_spin2_write_ret
1c97c     2D 00 64 FD | 	ret
1c980                 | 
1c980                 | ' 
1c980                 | ' ' generalized fill
1c980                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1c980                 | _psram_spin2_fill
1c980     09 01 02 F6 | 	mov	_var01, arg01
1c984     0A 03 02 F6 | 	mov	_var02, arg02
1c988     0B 05 02 F6 | 	mov	_var03, arg03
1c98c     0D 07 02 F6 | 	mov	_var04, arg05
1c990                 | '     case datasize 
1c990     01 06 86 F1 | 	sub	_var04, #1
1c994     04 06 26 F3 | 	fle	_var04, #4
1c998     30 06 62 FD | 	jmprel	_var04
1c99c                 | LR__2270
1c99c     10 00 90 FD | 	jmp	#LR__2271
1c9a0     18 00 90 FD | 	jmp	#LR__2272
1c9a4     2C 00 90 FD | 	jmp	#LR__2274
1c9a8     1C 00 90 FD | 	jmp	#LR__2273
1c9ac     24 00 90 FD | 	jmp	#LR__2274
1c9b0                 | LR__2271
1c9b0                 | '         1: req := driver.R_WRITEBYTE
1c9b0     00 00 60 FF 
1c9b4     00 08 06 F6 | 	mov	_var05, ##-1073741824
1c9b8     20 00 90 FD | 	jmp	#LR__2275
1c9bc                 | LR__2272
1c9bc                 | '         2: req := driver.R_WRITEWORD
1c9bc     00 00 68 FF 
1c9c0     00 08 06 F6 | 	mov	_var05, ##-805306368
1c9c4     14 00 90 FD | 	jmp	#LR__2275
1c9c8                 | LR__2273
1c9c8                 | '         4: req := driver.R_WRITELONG
1c9c8     00 00 70 FF 
1c9cc     00 08 06 F6 | 	mov	_var05, ##-536870912
1c9d0     08 00 90 FD | 	jmp	#LR__2275
1c9d4                 | LR__2274
1c9d4                 | '         other : return ERR_INVALID
1c9d4     06 FA 65 F6 | 	neg	result1, #6
1c9d8     94 00 90 FD | 	jmp	#LR__2277
1c9dc                 | LR__2275
1c9dc                 | '     if count == 0   ' nothing to do
1c9dc     00 04 0E F2 | 	cmp	_var03, #0 wz
1c9e0                 | '         return 0
1c9e0     00 FA 05 A6 |  if_e	mov	result1, #0
1c9e4     88 00 90 AD |  if_e	jmp	#LR__2277
1c9e8                 | '     if drivercog == -1
1c9e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c9ec     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1c9f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c9f4     FF FF 7F FF 
1c9f8     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1c9fc                 | '         return ERR_INACTIVE
1c9fc     0F FA 65 A6 |  if_e	neg	result1, #15
1ca00     6C 00 90 AD |  if_e	jmp	#LR__2277
1ca04                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1ca04     00 FA 05 F6 | 	mov	result1, #0
1ca08     01 FA 61 FD | 	cogid	result1
1ca0c     FD 06 02 F6 | 	mov	_var04, result1
1ca10     01 06 66 F0 | 	shl	_var04, #1
1ca14     FD 06 02 F1 | 	add	_var04, result1
1ca18     02 06 66 F0 | 	shl	_var04, #2
1ca1c     FF 03 00 FF 
1ca20     00 0B 06 F6 | 	mov	_var06, ##524032
1ca24     03 0B 02 F1 | 	add	_var06, _var04
1ca28                 | '     if long[mailbox] < 0
1ca28     05 07 02 FB | 	rdlong	_var04, _var06
1ca2c     00 06 56 F2 | 	cmps	_var04, #0 wc
1ca30                 | '         return ERR_MAILBOX_BUSY
1ca30     1C FA 65 C6 |  if_b	neg	result1, #28
1ca34     38 00 90 CD |  if_b	jmp	#LR__2277
1ca38                 | '     long[mailbox][2] := count
1ca38     08 0A 06 F1 | 	add	_var06, #8
1ca3c     05 05 62 FC | 	wrlong	_var03, _var06
1ca40                 | '     long[mailbox][1] := pattern
1ca40     04 0A 86 F1 | 	sub	_var06, #4
1ca44     05 03 62 FC | 	wrlong	_var02, _var06
1ca48     04 0A 86 F1 | 	sub	_var06, #4
1ca4c                 | '     long[mailbox] := req + (addr & $1ffffff)
1ca4c     04 0D 02 F6 | 	mov	_var07, _var05
1ca50     00 0F 02 F6 | 	mov	_var08, _var01
1ca54     D9 0E 06 F4 | 	bitl	_var08, #217
1ca58     07 0D 02 F1 | 	add	_var07, _var08
1ca5c     05 0D 62 FC | 	wrlong	_var07, _var06
1ca60                 | '     repeat
1ca60                 | LR__2276
1ca60                 | '         r := long[mailbox]
1ca60     05 0F 02 FB | 	rdlong	_var08, _var06
1ca64     00 0E 56 F2 | 	cmps	_var08, #0 wc
1ca68     F4 FF 9F CD |  if_b	jmp	#LR__2276
1ca6c                 | '     while r < 0
1ca6c                 | '     return -r                  ' return 0 for success or negated error code
1ca6c     07 FB 61 F6 | 	neg	result1, _var08
1ca70                 | LR__2277
1ca70                 | _psram_spin2_fill_ret
1ca70     2D 00 64 FD | 	ret
1ca74                 | 
1ca74                 | ' 
1ca74                 | ' '..............................................................................
1ca74                 | ' 
1ca74                 | ' {{
1ca74                 | ' }}
1ca74                 | ' PUB setQos(cog, qos) : result | mailbox
1ca74                 | _psram_spin2_setQos
1ca74     09 01 02 F6 | 	mov	_var01, arg01
1ca78                 | '     if drivercog == -1 ' driver must be running
1ca78     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ca7c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1ca80     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ca84     FF FF 7F FF 
1ca88     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1ca8c                 | '         return ERR_INACTIVE
1ca8c     0F FA 65 A6 |  if_e	neg	result1, #15
1ca90     9C 00 90 AD |  if_e	jmp	#LR__2284
1ca94                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1ca94     00 00 56 F2 | 	cmps	_var01, #0 wc
1ca98     08 00 90 CD |  if_b	jmp	#LR__2280
1ca9c     08 00 56 F2 | 	cmps	_var01, #8 wc
1caa0     08 00 90 CD |  if_b	jmp	#LR__2281
1caa4                 | LR__2280
1caa4                 | '         return ERR_INVALID
1caa4     06 FA 65 F6 | 	neg	result1, #6
1caa8     84 00 90 FD | 	jmp	#LR__2284
1caac                 | LR__2281
1caac                 | '     long[@qosData][cog] := qos & !$1ff
1caac     FF 15 26 F5 | 	andn	arg02, #511
1cab0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1cab4     02 00 66 F0 | 	shl	_var01, #2
1cab8     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1cabc     00 15 62 FC | 	wrlong	arg02, _var01
1cac0                 | '     mailbox := $7FF00 + drivercog*12
1cac0     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1cac4     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1cac8     02 07 02 F6 | 	mov	_var04, _var03
1cacc     01 06 66 F0 | 	shl	_var04, #1
1cad0     02 07 02 F1 | 	add	_var04, _var03
1cad4     02 06 66 F0 | 	shl	_var04, #2
1cad8     FF 03 00 FF 
1cadc     00 09 06 F6 | 	mov	_var05, ##524032
1cae0     03 09 02 F1 | 	add	_var05, _var04
1cae4                 | '     repeat until LOCKTRY(driverlock)
1cae4     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1cae8                 | LR__2282
1cae8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1caec     06 12 72 FD | 	locktry	arg01 wc
1caf0     F4 FF 9F 3D |  if_ae	jmp	#LR__2282
1caf4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1caf8                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1caf8     00 06 06 F6 | 	mov	_var04, #0
1cafc     01 06 62 FD | 	cogid	_var04
1cb00     00 00 78 FF 
1cb04     00 02 06 F6 | 	mov	_var02, ##-268435456
1cb08     03 03 02 F1 | 	add	_var02, _var04
1cb0c     04 03 62 FC | 	wrlong	_var02, _var05
1cb10                 | '     repeat while long[mailbox] < 0
1cb10                 | LR__2283
1cb10     04 03 02 FB | 	rdlong	_var02, _var05
1cb14     00 02 56 F2 | 	cmps	_var02, #0 wc
1cb18     F4 FF 9F CD |  if_b	jmp	#LR__2283
1cb1c                 | '     LOCKREL(driverlock)
1cb1c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1cb20     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1cb24     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1cb28     07 12 72 FD | 	lockrel	arg01 wc
1cb2c     00 FA 05 F6 | 	mov	result1, #0
1cb30                 | LR__2284
1cb30                 | _psram_spin2_setQos_ret
1cb30     2D 00 64 FD | 	ret
1cb34                 | 
1cb34                 | ' 
1cb34                 | ' '..............................................................................
1cb34                 | ' 
1cb34                 | ' {{
1cb34                 | ' }}
1cb34                 | ' PRI lookupDelay(freq) : delay | profile
1cb34                 | _psram_spin2_lookupDelay
1cb34                 | '     profile := @delayTable
1cb34     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1cb38     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1cb3c                 | '     delay := long[profile][0]
1cb3c     00 03 02 FB | 	rdlong	_var02, _var01
1cb40                 | '     repeat while long[profile][1] 
1cb40     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1cb44     97 16 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
1cb48                 | LR__2290
1cb48     04 00 06 F1 | 	add	_var01, #4
1cb4c     00 FB 09 FB | 	rdlong	result1, _var01 wz
1cb50     04 00 86 F1 | 	sub	_var01, #4
1cb54     1C 00 90 AD |  if_e	jmp	#LR__2292
1cb58                 | '         if freq +< long[profile][1] 
1cb58     04 00 06 F1 | 	add	_var01, #4
1cb5c     00 FB 01 FB | 	rdlong	result1, _var01
1cb60     04 00 86 F1 | 	sub	_var01, #4
1cb64     FD 12 12 F2 | 	cmp	arg01, result1 wc
1cb68                 | '             quit
1cb68                 | '         profile += 4
1cb68     04 00 06 31 |  if_ae	add	_var01, #4
1cb6c                 | '         delay++
1cb6c     01 02 06 31 |  if_ae	add	_var02, #1
1cb70     D4 FF 9F 3D |  if_ae	jmp	#LR__2290
1cb74                 | LR__2291
1cb74                 | LR__2292
1cb74     01 FB 01 F6 | 	mov	result1, _var02
1cb78                 | _psram_spin2_lookupDelay_ret
1cb78     2D 00 64 FD | 	ret
1cb7c                 | 
1cb7c                 | ' 
1cb7c                 | ' PUB start() : r
1cb7c                 | _usbnew_spin2_start
1cb7c     00 00 06 F6 | 	mov	_var01, #0
1cb80                 | '   ifnot driver_cog
1cb80     15 00 00 FF 
1cb84     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1cb88     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1cb8c     15 00 00 FF 
1cb90     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1cb94     38 00 90 5D |  if_ne	jmp	#LR__2300
1cb98                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1cb98     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1cb9c     10 00 06 F6 | 	mov	_var01, #16
1cba0     00 16 06 F6 | 	mov	arg03, #0
1cba4     28 16 62 FD | 	setq	arg03
1cba8     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1cbac     01 00 66 C6 |  if_b	neg	_var01, #1
1cbb0                 | '     if r >= 0
1cbb0     00 00 56 F2 | 	cmps	_var01, #0 wc
1cbb4                 | '       driver_cog := r+1
1cbb4     00 03 02 36 |  if_ae	mov	_var02, _var01
1cbb8     01 02 06 31 |  if_ae	add	_var02, #1
1cbbc     15 00 00 3F 
1cbc0     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1cbc4     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1cbc8     15 00 00 3F 
1cbcc     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1cbd0                 | LR__2300
1cbd0     00 FB 01 F6 | 	mov	result1, _var01
1cbd4                 | _usbnew_spin2_start_ret
1cbd4     2D 00 64 FD | 	ret
1cbd8                 | 
1cbd8                 | '     '' (Always enabled)
1cbd8                 | ' 
1cbd8                 | ' '' Get current pressed state of a keyboard key
1cbd8                 | ' PUB keystate(key) : r | buf[2],tmp
1cbd8                 | _usbnew_spin2_keystate
1cbd8     00 04 06 F6 | 	mov	_var03, #0
1cbdc                 | '   if key >= $E0 && key < $E8
1cbdc     E0 12 56 F2 | 	cmps	arg01, #224 wc
1cbe0     34 00 90 CD |  if_b	jmp	#LR__2310
1cbe4     E8 12 56 F2 | 	cmps	arg01, #232 wc
1cbe8     2C 00 90 3D |  if_ae	jmp	#LR__2310
1cbec                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1cbec     00 FA 05 F6 | 	mov	result1, #0
1cbf0     13 00 00 FF 
1cbf4     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1cbf8     09 07 02 F6 | 	mov	_var04, arg01
1cbfc     E0 06 86 F1 | 	sub	_var04, #224
1cc00     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1cc04     03 09 4A F0 | 	shr	_var05, _var04 wz
1cc08     13 00 00 FF 
1cc0c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1cc10     01 FA 65 56 |  if_ne	neg	result1, #1
1cc14     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1cc18                 | LR__2310
1cc18                 | '   else
1cc18                 | '     '' Do this in inline ASM to ensure atomicity
1cc18                 | '     tmp := @hkbd_report
1cc18     13 00 00 FF 
1cc1c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1cc20     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1cc24                 | '     org
1cc24     13 00 00 FF 
1cc28     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1cc2c     97 1E 48 FB | 	callpa	#(@LR__2312-@LR__2311)>>2,fcache_load_ptr_
1cc30                 | LR__2311
1cc30 000             | 	org	0
1cc30 000 28 02 64 FD | 	setq	#1
1cc34 001 04 01 02 FB | 	rdlong	_var01, _var05
1cc38 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1cc3c 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1cc40 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1cc44 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1cc48 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1cc4c 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1cc50 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1cc54 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1cc58 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1cc5c 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1cc60 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1cc64 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1cc68 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1cc6c 00f             | LR__2312
1cc6c                 | 	orgh
1cc6c     02 FB 01 F6 | 	mov	result1, _var03
1cc70                 | _usbnew_spin2_keystate_ret
1cc70     2D 00 64 FD | 	ret
1cc74                 | 
1cc74                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1cc74                 | ' 
1cc74                 | ' '' Return key event from buffer if there is one
1cc74                 | ' PUB get_key() : r | tail
1cc74                 | _usbnew_spin2_get_key
1cc74                 | '   tail := keyq_tail
1cc74     0F 00 00 FF 
1cc78     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1cc7c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1cc80                 | '   if keyq_head == tail
1cc80     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1cc84     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1cc88     0F 00 00 FF 
1cc8c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1cc90     00 03 0A F2 | 	cmp	_var02, _var01 wz
1cc94                 | '     return 0 ' No event
1cc94     00 FA 05 A6 |  if_e	mov	result1, #0
1cc98     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1cc9c                 | '   r := keyq_data[tail]
1cc9c     00 03 02 F6 | 	mov	_var02, _var01
1cca0     02 02 66 F0 | 	shl	_var02, #2
1cca4     0F 00 00 FF 
1cca8     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1ccac     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1ccb0     01 FB 01 FB | 	rdlong	result1, _var02
1ccb4                 | '   if ++tail == KEYQUEUE_SIZE
1ccb4     01 00 06 F1 | 	add	_var01, #1
1ccb8     80 00 0E F2 | 	cmp	_var01, #128 wz
1ccbc                 | '     tail := 0
1ccbc     00 00 06 A6 |  if_e	mov	_var01, #0
1ccc0                 | '   keyq_tail := tail
1ccc0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1ccc4     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1ccc8     0F 00 00 FF 
1cccc     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1ccd0                 | _usbnew_spin2_get_key_ret
1ccd0     2D 00 64 FD | 	ret
1ccd4                 | 
1ccd4                 | ' 
1ccd4                 | ' '' Emulate mouse movement
1ccd4                 | ' PUB mouse_move(x,y)
1ccd4                 | _usbnew_spin2_mouse_move
1ccd4     02 4A 05 F6 | 	mov	COUNT_, #2
1ccd8     A8 00 A0 FD | 	call	#pushregs_
1ccdc     09 1F 02 F6 | 	mov	local01, arg01
1cce0     0A 21 02 F6 | 	mov	local02, arg02
1cce4                 | '   mouse_lock := 1
1cce4     14 00 00 FF 
1cce8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1ccec     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1ccf0     14 00 00 FF 
1ccf4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1ccf8                 | '   waitus(2) ' hope driver is now done
1ccf8     02 12 06 F6 | 	mov	arg01, #2
1ccfc     AC 0A B0 FD | 	call	#__system___waitus
1cd00                 | '   mouse_xacc := x
1cd00     14 00 00 FF 
1cd04     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1cd08     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1cd0c                 | '   mouse_yacc := y
1cd0c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1cd10     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1cd14                 | '   if mouse_outptr
1cd14     04 00 00 FF 
1cd18     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1cd1c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1cd20     0F 00 00 FF 
1cd24     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1cd28     24 00 90 AD |  if_e	jmp	#LR__2320
1cd2c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1cd2c     10 20 66 F0 | 	shl	local02, #16
1cd30     0F 1F 32 F9 | 	getword	local01, local01, #0
1cd34     0F 21 42 F5 | 	or	local02, local01
1cd38     0F 00 00 FF 
1cd3c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1cd40     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1cd44     0F 00 00 FF 
1cd48     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1cd4c     0F 21 62 FC | 	wrlong	local02, local01
1cd50                 | LR__2320
1cd50                 | '   mouse_lock := 0
1cd50     14 00 00 FF 
1cd54     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1cd58     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1cd5c     14 00 00 FF 
1cd60     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1cd64     A7 F0 03 F6 | 	mov	ptra, fp
1cd68     B2 00 A0 FD | 	call	#popregs_
1cd6c                 | _usbnew_spin2_mouse_move_ret
1cd6c     2D 00 64 FD | 	ret
1cd70                 | 
1cd70                 | '     '' Set HAVE_HIDPAD to enable.
1cd70                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1cd70                 | ' 
1cd70                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1cd70                 | ' PUB hidpad_id(dev) : r
1cd70                 | _usbnew_spin2_hidpad_id
1cd70                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1cd70     13 00 00 FF 
1cd74     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1cd78     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1cd7c     09 01 02 F6 | 	mov	_var01, arg01
1cd80     03 00 66 F0 | 	shl	_var01, #3
1cd84     09 01 82 F1 | 	sub	_var01, arg01
1cd88     02 00 66 F0 | 	shl	_var01, #2
1cd8c     00 FB 01 F1 | 	add	result1, _var01
1cd90     FD FA 01 FB | 	rdlong	result1, result1
1cd94     13 00 00 FF 
1cd98     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1cd9c                 | _usbnew_spin2_hidpad_id_ret
1cd9c     2D 00 64 FD | 	ret
1cda0                 | 
1cda0                 | ' 
1cda0                 | ' '' Get all button states for a device
1cda0                 | ' PUB hidpad_buttons(dev) : r 
1cda0                 | _usbnew_spin2_hidpad_buttons
1cda0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1cda0     13 00 00 FF 
1cda4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1cda8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1cdac     09 01 02 F6 | 	mov	_var01, arg01
1cdb0     03 00 66 F0 | 	shl	_var01, #3
1cdb4     09 01 82 F1 | 	sub	_var01, arg01
1cdb8     02 00 66 F0 | 	shl	_var01, #2
1cdbc     00 FB 01 F1 | 	add	result1, _var01
1cdc0     14 FA 05 F1 | 	add	result1, #20
1cdc4     FD FA 01 FB | 	rdlong	result1, result1
1cdc8     13 00 00 FF 
1cdcc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1cdd0                 | _usbnew_spin2_hidpad_buttons_ret
1cdd0     2D 00 64 FD | 	ret
1cdd4                 | 
1cdd4                 | ' 
1cdd4                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1cdd4                 | ' PUB hidpad_axis(dev,axnum) : r
1cdd4                 | _usbnew_spin2_hidpad_axis
1cdd4                 | '   if axnum +>= 6
1cdd4     06 14 16 F2 | 	cmp	arg02, #6 wc
1cdd8                 | '     return 0
1cdd8     00 FA 05 36 |  if_ae	mov	result1, #0
1cddc     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1cde0                 | '   else 
1cde0                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1cde0     13 00 00 FF 
1cde4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1cde8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1cdec     09 01 02 F6 | 	mov	_var01, arg01
1cdf0     03 00 66 F0 | 	shl	_var01, #3
1cdf4     09 01 82 F1 | 	sub	_var01, arg01
1cdf8     02 00 66 F0 | 	shl	_var01, #2
1cdfc     00 FB 01 F1 | 	add	result1, _var01
1ce00     04 00 06 F6 | 	mov	_var01, #4
1ce04     0A 01 02 F1 | 	add	_var01, arg02
1ce08     01 00 66 F0 | 	shl	_var01, #1
1ce0c     FD 00 02 F1 | 	add	_var01, result1
1ce10     00 FB E1 FA | 	rdword	result1, _var01
1ce14     0F FA 65 F7 | 	signx	result1, #15
1ce18     13 00 00 FF 
1ce1c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1ce20                 | _usbnew_spin2_hidpad_axis_ret
1ce20     2D 00 64 FD | 	ret
1ce24                 | 
1ce24                 | ' 
1ce24                 | ' 
1ce24                 | ' '--------------------------------------------------------------
1ce24                 | ' '---------- Init the variables, start the cog. ----------------
1ce24                 | ' '--------------------------------------------------------------
1ce24                 | ' 
1ce24                 | ' pub start(mbox,scope,cache) :cog,base | iii
1ce24                 | _audio096_spin2_start
1ce24     04 4A 05 F6 | 	mov	COUNT_, #4
1ce28     A8 00 A0 FD | 	call	#pushregs_
1ce2c     09 1F 02 F6 | 	mov	local01, arg01
1ce30                 | ' 
1ce30                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1ce30                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1ce30                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1ce30                 | ' 
1ce30                 | ' mailboxaddr:=mbox 
1ce30     F2 1E 62 FC | 	wrlong	local01, objptr
1ce34                 | ' scope_ptr:=scope
1ce34     04 E4 05 F1 | 	add	objptr, #4
1ce38     F2 14 62 FC | 	wrlong	arg02, objptr
1ce3c                 | ' cache_ptr:=cache
1ce3c     04 E4 05 F1 | 	add	objptr, #4
1ce40     F2 16 62 FC | 	wrlong	arg03, objptr
1ce44                 | ' base:=@channel1[0]
1ce44     04 E4 05 F1 | 	add	objptr, #4
1ce48     F2 20 02 F6 | 	mov	local02, objptr
1ce4c                 | ' 
1ce4c                 | ' repeat iii from 0 to 7
1ce4c     00 22 06 F6 | 	mov	local03, #0
1ce50     02 00 00 FF 
1ce54     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1ce58     0C E4 85 F1 | 	sub	objptr, #12
1ce5c     97 B0 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
1ce60                 | LR__2330
1ce60                 | '   long[base+64*iii]:=0
1ce60     10 1F 02 F6 | 	mov	local01, local02
1ce64     11 FD 01 F6 | 	mov	result2, local03
1ce68     06 FC 65 F0 | 	shl	result2, #6
1ce6c     FE 1E 02 F1 | 	add	local01, result2
1ce70     0F 01 68 FC | 	wrlong	#0, local01
1ce74                 | '   long[base+64*iii+4]:=0
1ce74     10 1F 02 F6 | 	mov	local01, local02
1ce78     11 FD 01 F6 | 	mov	result2, local03
1ce7c     06 FC 65 F0 | 	shl	result2, #6
1ce80     FE 1E 02 F1 | 	add	local01, result2
1ce84     04 1E 06 F1 | 	add	local01, #4
1ce88     0F 01 68 FC | 	wrlong	#0, local01
1ce8c                 | '   long[base+64*iii+12]:=0
1ce8c     10 25 02 F6 | 	mov	local04, local02
1ce90     11 1F 02 F6 | 	mov	local01, local03
1ce94     06 1E 66 F0 | 	shl	local01, #6
1ce98     0F 25 02 F1 | 	add	local04, local01
1ce9c     0C 24 06 F1 | 	add	local04, #12
1cea0     12 01 68 FC | 	wrlong	#0, local04
1cea4                 | '   long[base+64*iii+16]:=2 
1cea4     10 25 02 F6 | 	mov	local04, local02
1cea8     11 1F 02 F6 | 	mov	local01, local03
1ceac     06 1E 66 F0 | 	shl	local01, #6
1ceb0     0F 25 02 F1 | 	add	local04, local01
1ceb4     10 24 06 F1 | 	add	local04, #16
1ceb8     12 05 68 FC | 	wrlong	#2, local04
1cebc                 | '   word[base+64*iii+20]:=0
1cebc     10 25 02 F6 | 	mov	local04, local02
1cec0     11 1F 02 F6 | 	mov	local01, local03
1cec4     06 1E 66 F0 | 	shl	local01, #6
1cec8     0F 25 02 F1 | 	add	local04, local01
1cecc     14 24 06 F1 | 	add	local04, #20
1ced0     12 01 58 FC | 	wrword	#0, local04
1ced4                 | '   word[base+64*iii+22]:=8192
1ced4     10 25 02 F6 | 	mov	local04, local02
1ced8     11 1F 02 F6 | 	mov	local01, local03
1cedc     06 1E 66 F0 | 	shl	local01, #6
1cee0     0F 25 02 F1 | 	add	local04, local01
1cee4     16 24 06 F1 | 	add	local04, #22
1cee8     10 00 80 FF 
1ceec     12 01 58 FC | 	wrword	##8192, local04
1cef0                 | '   word[base+64*iii+24]:=4000+2*iii
1cef0     11 25 02 F6 | 	mov	local04, local03
1cef4     01 24 66 F0 | 	shl	local04, #1
1cef8     07 00 00 FF 
1cefc     A0 1F 06 F6 | 	mov	local01, ##4000
1cf00     12 1F 02 F1 | 	add	local01, local04
1cf04     10 25 02 F6 | 	mov	local04, local02
1cf08     11 FD 01 F6 | 	mov	result2, local03
1cf0c     06 FC 65 F0 | 	shl	result2, #6
1cf10     FE 24 02 F1 | 	add	local04, result2
1cf14     18 24 06 F1 | 	add	local04, #24
1cf18     12 1F 52 FC | 	wrword	local01, local04
1cf1c                 | '   word[base+64*iii+26]:=2
1cf1c     10 25 02 F6 | 	mov	local04, local02
1cf20     11 1F 02 F6 | 	mov	local01, local03
1cf24     06 1E 66 F0 | 	shl	local01, #6
1cf28     0F 25 02 F1 | 	add	local04, local01
1cf2c     1A 24 06 F1 | 	add	local04, #26
1cf30     12 05 58 FC | 	wrword	#2, local04
1cf34                 | '   long [base+64*iii+8]:=@null | $C0000000
1cf34     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1cf38     3E 1E 26 F4 | 	bith	local01, #62
1cf3c     10 25 02 F6 | 	mov	local04, local02
1cf40     11 17 02 F6 | 	mov	arg03, local03
1cf44     06 16 66 F0 | 	shl	arg03, #6
1cf48     0B 25 02 F1 | 	add	local04, arg03
1cf4c     08 24 06 F1 | 	add	local04, #8
1cf50     12 1F 62 FC | 	wrlong	local01, local04
1cf54                 | '   long[base+64*iii+32]:=0
1cf54     10 25 02 F6 | 	mov	local04, local02
1cf58     11 1F 02 F6 | 	mov	local01, local03
1cf5c     06 1E 66 F0 | 	shl	local01, #6
1cf60     0F 25 02 F1 | 	add	local04, local01
1cf64     20 24 06 F1 | 	add	local04, #32
1cf68     12 01 68 FC | 	wrlong	#0, local04
1cf6c                 | '   long[base+64*iii+36]:=0
1cf6c     10 25 02 F6 | 	mov	local04, local02
1cf70     11 1F 02 F6 | 	mov	local01, local03
1cf74     06 1E 66 F0 | 	shl	local01, #6
1cf78     0F 25 02 F1 | 	add	local04, local01
1cf7c     24 24 06 F1 | 	add	local04, #36
1cf80     12 01 68 FC | 	wrlong	#0, local04
1cf84                 | '   long[base+64*iii+40]:=0
1cf84     10 25 02 F6 | 	mov	local04, local02
1cf88     11 1F 02 F6 | 	mov	local01, local03
1cf8c     06 1E 66 F0 | 	shl	local01, #6
1cf90     0F 25 02 F1 | 	add	local04, local01
1cf94     28 24 06 F1 | 	add	local04, #40
1cf98     12 01 68 FC | 	wrlong	#0, local04
1cf9c                 | '   long[base+64*iii+44]:=0
1cf9c     10 25 02 F6 | 	mov	local04, local02
1cfa0     11 1F 02 F6 | 	mov	local01, local03
1cfa4     06 1E 66 F0 | 	shl	local01, #6
1cfa8     0F 25 02 F1 | 	add	local04, local01
1cfac     2C 24 06 F1 | 	add	local04, #44
1cfb0     12 01 68 FC | 	wrlong	#0, local04
1cfb4     01 22 06 F1 | 	add	local03, #1
1cfb8     08 22 56 F2 | 	cmps	local03, #8 wc
1cfbc     A0 FE 9F CD |  if_b	jmp	#LR__2330
1cfc0                 | LR__2331
1cfc0     02 00 00 FF 
1cfc4     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1cfc8                 | '   
1cfc8                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1cfc8     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1cfcc     F2 16 02 F6 | 	mov	arg03, objptr
1cfd0     10 24 06 F6 | 	mov	local04, #16
1cfd4     28 16 62 FD | 	setq	arg03
1cfd8     0A 25 F2 FC | 	coginit	local04, arg02 wc
1cfdc     01 24 66 C6 |  if_b	neg	local04, #1
1cfe0                 | ' waitms(100)
1cfe0     64 12 06 F6 | 	mov	arg01, #100
1cfe4     58 07 B0 FD | 	call	#__system___waitms
1cfe8                 | ' return cog,base
1cfe8     10 FD 01 F6 | 	mov	result2, local02
1cfec     12 FB 01 F6 | 	mov	result1, local04
1cff0     A7 F0 03 F6 | 	mov	ptra, fp
1cff4     B2 00 A0 FD | 	call	#popregs_
1cff8                 | _audio096_spin2_start_ret
1cff8     2D 00 64 FD | 	ret
1cffc                 | 
1cffc                 | ' 
1cffc                 | ' ' a simple play procedure to not poke everything. 
1cffc                 | ' 
1cffc                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1cffc                 | _audio096_spin2_play
1cffc     0C E4 05 F1 | 	add	objptr, #12
1d000     F2 00 02 F6 | 	mov	_var01, objptr
1d004     06 12 66 F0 | 	shl	arg01, #6
1d008     09 01 02 F1 | 	add	_var01, arg01
1d00c     00 13 02 F6 | 	mov	arg01, _var01
1d010     0C 12 06 F1 | 	add	arg01, #12
1d014     09 1B 62 FC | 	wrlong	arg05, arg01
1d018     00 1C 56 F2 | 	cmps	arg06, #0 wc
1d01c     00 13 02 36 |  if_ae	mov	arg01, _var01
1d020     10 12 06 31 |  if_ae	add	arg01, #16
1d024     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1d028     02 1A 06 C1 |  if_b	add	arg05, #2
1d02c     00 13 02 C6 |  if_b	mov	arg01, _var01
1d030     10 12 06 C1 |  if_b	add	arg01, #16
1d034     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1d038     0B 13 52 F6 | 	abs	arg01, arg03 wc
1d03c     0B 0A 80 FF 
1d040     09 6D 18 FD | 	qdiv	##1316406, arg01
1d044                 | ' 
1d044                 | ' base2:=@channel1[0]+64*channel
1d044                 | ' 
1d044                 | ' 
1d044                 | ' long[base2+12]:= len
1d044                 | ' if loop >=0 
1d044                 | '   long[base2+16]:= loop
1d044     0C E4 85 F1 | 	sub	objptr, #12
1d048                 | ' else
1d048                 | '   long[base2+16]:= len+2
1d048                 | ' word[base2+20]:=vol
1d048     00 13 02 F6 | 	mov	arg01, _var01
1d04c     14 12 06 F1 | 	add	arg01, #20
1d050     09 19 52 FC | 	wrword	arg04, arg01
1d054                 | ' word[base2+24]:= 1316406/splfreq 
1d054     00 19 02 F6 | 	mov	arg04, _var01
1d058     18 18 06 F1 | 	add	arg04, #24
1d05c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1d05c                 | ' long[base2+28]:=$40000000
1d05c                 | ' long[base2+8]:=sample+$C0000000 
1d05c     00 00 60 FF 
1d060     00 14 06 F1 | 	add	arg02, ##-1073741824
1d064     18 12 62 FD | 	getqx	arg01
1d068     09 13 82 F6 | 	negc	arg01, arg01
1d06c     0C 13 52 FC | 	wrword	arg01, arg04
1d070     00 13 02 F6 | 	mov	arg01, _var01
1d074     1A 12 06 F1 | 	add	arg01, #26
1d078     09 01 5A FC | 	wrword	#256, arg01
1d07c     00 13 02 F6 | 	mov	arg01, _var01
1d080     1C 12 06 F1 | 	add	arg01, #28
1d084     00 00 A0 FF 
1d088     09 01 68 FC | 	wrlong	##1073741824, arg01
1d08c     08 00 06 F1 | 	add	_var01, #8
1d090     00 15 62 FC | 	wrlong	arg02, _var01
1d094                 | _audio096_spin2_play_ret
1d094     2D 00 64 FD | 	ret
1d098                 | 
1d098                 | ' 
1d098                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1d098                 | _audio096_spin2_play8
1d098                 | ' 
1d098                 | ' base2:=@channel1[0]+64*channel
1d098     0C E4 05 F1 | 	add	objptr, #12
1d09c     F2 00 02 F6 | 	mov	_var01, objptr
1d0a0     06 12 66 F0 | 	shl	arg01, #6
1d0a4     09 01 02 F1 | 	add	_var01, arg01
1d0a8                 | ' long[base2]:=0
1d0a8     00 01 68 FC | 	wrlong	#0, _var01
1d0ac                 | ' long[base2+8]:=sample+$40000000 
1d0ac     00 00 20 FF 
1d0b0     00 14 06 F1 | 	add	arg02, ##1073741824
1d0b4     00 13 02 F6 | 	mov	arg01, _var01
1d0b8     08 12 06 F1 | 	add	arg01, #8
1d0bc     09 15 62 FC | 	wrlong	arg02, arg01
1d0c0                 | ' if loop>=0
1d0c0     00 1C 56 F2 | 	cmps	arg06, #0 wc
1d0c4     0C E4 85 F1 | 	sub	objptr, #12
1d0c8     1C 00 90 CD |  if_b	jmp	#LR__2340
1d0cc                 | '   long[base2+12]:=loop
1d0cc     00 15 02 F6 | 	mov	arg02, _var01
1d0d0     0C 14 06 F1 | 	add	arg02, #12
1d0d4     0A 1D 62 FC | 	wrlong	arg06, arg02
1d0d8                 | '   long[base2+16]:= len
1d0d8     00 1D 02 F6 | 	mov	arg06, _var01
1d0dc     10 1C 06 F1 | 	add	arg06, #16
1d0e0     0E 1B 62 FC | 	wrlong	arg05, arg06
1d0e4     1C 00 90 FD | 	jmp	#LR__2341
1d0e8                 | LR__2340
1d0e8                 | ' else
1d0e8                 | '   long[base2+12]:= len
1d0e8     00 1D 02 F6 | 	mov	arg06, _var01
1d0ec     0C 1C 06 F1 | 	add	arg06, #12
1d0f0     0E 1B 62 FC | 	wrlong	arg05, arg06
1d0f4                 | '   long[base2+16]:= len+1
1d0f4     01 1A 06 F1 | 	add	arg05, #1
1d0f8     00 13 02 F6 | 	mov	arg01, _var01
1d0fc     10 12 06 F1 | 	add	arg01, #16
1d100     09 1B 62 FC | 	wrlong	arg05, arg01
1d104                 | LR__2341
1d104     0B 17 52 F6 | 	abs	arg03, arg03 wc
1d108     0B 0A 80 FF 
1d10c     0B 6D 18 FD | 	qdiv	##1316406, arg03
1d110                 | ' word[base2+20]:=vol
1d110     00 17 02 F6 | 	mov	arg03, _var01
1d114     14 16 06 F1 | 	add	arg03, #20
1d118     0B 19 52 FC | 	wrword	arg04, arg03
1d11c                 | ' word[base2+24]:= 1316406 /splfreq 
1d11c     00 13 02 F6 | 	mov	arg01, _var01
1d120     18 12 06 F1 | 	add	arg01, #24
1d124                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1d124                 | ' long[base2+28]:=$40000000
1d124     18 18 62 FD | 	getqx	arg04
1d128     0C 19 82 F6 | 	negc	arg04, arg04
1d12c     09 19 52 FC | 	wrword	arg04, arg01
1d130     00 19 02 F6 | 	mov	arg04, _var01
1d134     1A 18 06 F1 | 	add	arg04, #26
1d138     0C 01 5A FC | 	wrword	#256, arg04
1d13c     1C 00 06 F1 | 	add	_var01, #28
1d140     00 00 A0 FF 
1d144     00 01 68 FC | 	wrlong	##1073741824, _var01
1d148                 | _audio096_spin2_play8_ret
1d148     2D 00 64 FD | 	ret
1d14c                 | 
1d14c                 | ' 
1d14c                 | '     
1d14c                 | ' pub stop(channel) 'silence it
1d14c                 | _audio096_spin2_stop
1d14c                 | ' 
1d14c                 | ' word[@channel1[0]+64*channel+20]:=0
1d14c     0C E4 05 F1 | 	add	objptr, #12
1d150     F2 00 02 F6 | 	mov	_var01, objptr
1d154     09 03 02 F6 | 	mov	_var02, arg01
1d158     06 02 66 F0 | 	shl	_var02, #6
1d15c     01 01 02 F1 | 	add	_var01, _var02
1d160     14 00 06 F1 | 	add	_var01, #20
1d164     00 01 58 FC | 	wrword	#0, _var01
1d168                 | ' word[@channel1[0]+64*channel+20]:=0
1d168     F2 00 02 F6 | 	mov	_var01, objptr
1d16c     06 12 66 F0 | 	shl	arg01, #6
1d170     09 01 02 F1 | 	add	_var01, arg01
1d174     14 00 06 F1 | 	add	_var01, #20
1d178     00 01 58 FC | 	wrword	#0, _var01
1d17c     0C E4 85 F1 | 	sub	objptr, #12
1d180                 | _audio096_spin2_stop_ret
1d180     2D 00 64 FD | 	ret
1d184                 | hubexit
1d184     81 00 80 FD | 	jmp	#cogexit
1d188                 | 
1d188                 | __system___setbaud
1d188     14 64 06 FB | 	rdlong	muldiva_, #20
1d18c     09 67 02 F6 | 	mov	muldivb_, arg01
1d190     BA 00 A0 FD | 	call	#divide_
1d194     97 06 48 FB | 	callpa	#(@LR__2351-@LR__2350)>>2,fcache_load_ptr_
1d198                 | LR__2350
1d198     3E FA 9D FA | 	rdpin	result1, #62 wc
1d19c     FE FC A1 F1 | 	subx	result2, result2
1d1a0     F4 FF 9F CD |  if_b	jmp	#LR__2350
1d1a4                 | LR__2351
1d1a4     40 7C 64 FD | 	dirl	#62
1d1a8     40 7E 64 FD | 	dirl	#63
1d1ac     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1d1b0     10 66 66 F0 | 	shl	muldivb_, #16
1d1b4     07 14 06 F6 | 	mov	arg02, #7
1d1b8     33 15 02 F1 | 	add	arg02, muldivb_
1d1bc     3E F8 0C FC | 	wrpin	#124, #62
1d1c0     3E 14 16 FC | 	wxpin	arg02, #62
1d1c4     3F 7C 0C FC | 	wrpin	#62, #63
1d1c8     14 14 06 F1 | 	add	arg02, #20
1d1cc     3F 14 16 FC | 	wxpin	arg02, #63
1d1d0     41 7C 64 FD | 	dirh	#62
1d1d4     41 7E 64 FD | 	dirh	#63
1d1d8                 | __system___setbaud_ret
1d1d8     2D 00 64 FD | 	ret
1d1dc                 | 
1d1dc                 | __system___txraw
1d1dc     01 4A 05 F6 | 	mov	COUNT_, #1
1d1e0     A8 00 A0 FD | 	call	#pushregs_
1d1e4     09 1F 02 F6 | 	mov	local01, arg01
1d1e8     97 06 48 FB | 	callpa	#(@LR__2361-@LR__2360)>>2,fcache_load_ptr_
1d1ec                 | LR__2360
1d1ec     3E FA 9D FA | 	rdpin	result1, #62 wc
1d1f0     FE FC A1 F1 | 	subx	result2, result2
1d1f4     F4 FF 9F CD |  if_b	jmp	#LR__2360
1d1f8                 | LR__2361
1d1f8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1d1fc     C2 01 00 AF 
1d200     00 12 06 A6 |  if_e	mov	arg01, ##230400
1d204     80 FF BF AD |  if_e	call	#__system___setbaud
1d208     58 7C 64 FD | 	drvl	#62
1d20c     3E 1E 26 FC | 	wypin	local01, #62
1d210     01 FA 05 F6 | 	mov	result1, #1
1d214     A7 F0 03 F6 | 	mov	ptra, fp
1d218     B2 00 A0 FD | 	call	#popregs_
1d21c                 | __system___txraw_ret
1d21c     2D 00 64 FD | 	ret
1d220                 | 
1d220                 | __system___rxraw
1d220     0D 4A 05 F6 | 	mov	COUNT_, #13
1d224     A8 00 A0 FD | 	call	#pushregs_
1d228     09 1F 02 F6 | 	mov	local01, arg01
1d22c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1d230     C2 01 00 AF 
1d234     00 12 06 A6 |  if_e	mov	arg01, ##230400
1d238     4C FF BF AD |  if_e	call	#__system___setbaud
1d23c     00 1E 0E F2 | 	cmp	local01, #0 wz
1d240     20 00 90 AD |  if_e	jmp	#LR__2370
1d244     14 22 06 FB | 	rdlong	local03, #20
1d248     0A 22 46 F0 | 	shr	local03, #10
1d24c     11 1F 02 FD | 	qmul	local01, local03
1d250     1A FA 61 FD | 	getct	result1
1d254     18 24 62 FD | 	getqx	local04
1d258     12 FB 01 F1 | 	add	result1, local04
1d25c     FD 26 02 F6 | 	mov	local05, result1
1d260     04 00 90 FD | 	jmp	#LR__2371
1d264                 | LR__2370
1d264     00 26 06 F6 | 	mov	local05, #0
1d268                 | LR__2371
1d268     01 28 66 F6 | 	neg	local06, #1
1d26c     3F 2A 06 F6 | 	mov	local07, #63
1d270     00 2C 06 F6 | 	mov	local08, #0
1d274     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1d278     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1d27c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1d280                 | LR__2372
1d280     08 2E 16 F4 | 	testb	local09, #8 wc
1d284     09 2E 76 F4 | 	testbn	local09, #9 andc
1d288     0A 2E 46 F0 | 	shr	local09, #10
1d28c     01 2C 06 C6 |  if_b	mov	local08, #1
1d290     40 7E 6C 3D |  if_ae	testp	#63 wz
1d294     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1d298     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1d29c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1d2a0                 | LR__2373
1d2a0     00 20 06 F6 | 	mov	local02, #0
1d2a4     00 2C 0E F2 | 	cmp	local08, #0 wz
1d2a8     01 20 66 56 |  if_ne	neg	local02, #1
1d2ac     00 30 06 F6 | 	mov	local10, #0
1d2b0     00 22 06 F6 | 	mov	local03, #0
1d2b4     00 1E 0E F2 | 	cmp	local01, #0 wz
1d2b8     01 22 66 56 |  if_ne	neg	local03, #1
1d2bc     00 24 06 F6 | 	mov	local04, #0
1d2c0     00 32 06 F6 | 	mov	local11, #0
1d2c4     1A FA 61 FD | 	getct	result1
1d2c8     FD 34 02 F6 | 	mov	local12, result1
1d2cc     1A 37 02 F6 | 	mov	local13, local12
1d2d0     13 37 82 F1 | 	sub	local13, local05
1d2d4     00 36 56 F2 | 	cmps	local13, #0 wc
1d2d8     00 32 26 C6 |  if_b	not	local11, #0
1d2dc     00 32 0E F2 | 	cmp	local11, #0 wz
1d2e0     00 24 26 56 |  if_ne	not	local04, #0
1d2e4     12 23 CA F7 | 	test	local03, local04 wz
1d2e8     00 30 26 56 |  if_ne	not	local10, #0
1d2ec     18 21 4A F5 | 	or	local02, local10 wz
1d2f0     8C FF 9F AD |  if_e	jmp	#LR__2372
1d2f4     00 2C 0E F2 | 	cmp	local08, #0 wz
1d2f8     17 29 02 56 |  if_ne	mov	local06, local09
1d2fc     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1d300     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1d304     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1d308     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1d30c     14 FB 01 F6 | 	mov	result1, local06
1d310     A7 F0 03 F6 | 	mov	ptra, fp
1d314     B2 00 A0 FD | 	call	#popregs_
1d318                 | __system___rxraw_ret
1d318     2D 00 64 FD | 	ret
1d31c                 | 
1d31c                 | __system___getus
1d31c     1A FC 71 FD | 	getct	result2 wc
1d320     1A 00 62 FD | 	getct	_var01
1d324     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1d328     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1d32c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1d330     20 00 90 5D |  if_ne	jmp	#LR__2380
1d334     14 02 06 FB | 	rdlong	_var02, #20
1d338     A1 07 00 FF 
1d33c     40 02 16 FD | 	qdiv	_var02, ##1000000
1d340     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1d344     18 FA 61 FD | 	getqx	result1
1d348     FD 02 02 F6 | 	mov	_var02, result1
1d34c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1d350     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1d354                 | LR__2380
1d354     01 FD 11 FD | 	qdiv	result2, _var02
1d358     19 FC 61 FD | 	getqy	result2
1d35c     28 FC 61 FD | 	setq	result2
1d360     01 01 12 FD | 	qdiv	_var01, _var02
1d364     18 FA 61 FD | 	getqx	result1
1d368                 | __system___getus_ret
1d368     2D 00 64 FD | 	ret
1d36c                 | 
1d36c                 | __system____builtin_memmove
1d36c     09 01 02 F6 | 	mov	_var01, arg01
1d370     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1d374     10 00 90 CD |  if_b	jmp	#LR__2390
1d378     0A 03 02 F6 | 	mov	_var02, arg02
1d37c     0B 03 02 F1 | 	add	_var02, arg03
1d380     01 13 52 F2 | 	cmps	arg01, _var02 wc
1d384     48 00 90 CD |  if_b	jmp	#LR__2396
1d388                 | LR__2390
1d388     0B 05 02 F6 | 	mov	_var03, arg03
1d38c     02 04 4E F0 | 	shr	_var03, #2 wz
1d390     18 00 90 AD |  if_e	jmp	#LR__2395
1d394     97 0A 48 FB | 	callpa	#(@LR__2393-@LR__2391)>>2,fcache_load_ptr_
1d398                 | LR__2391
1d398     02 09 D8 FC | 	rep	@LR__2394, _var03
1d39c                 | LR__2392
1d39c     0A 05 02 FB | 	rdlong	_var03, arg02
1d3a0     09 05 62 FC | 	wrlong	_var03, arg01
1d3a4     04 12 06 F1 | 	add	arg01, #4
1d3a8     04 14 06 F1 | 	add	arg02, #4
1d3ac                 | LR__2393
1d3ac                 | LR__2394
1d3ac                 | LR__2395
1d3ac     02 16 CE F7 | 	test	arg03, #2 wz
1d3b0     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1d3b4     09 03 52 5C |  if_ne	wrword	_var02, arg01
1d3b8     02 12 06 51 |  if_ne	add	arg01, #2
1d3bc     02 14 06 51 |  if_ne	add	arg02, #2
1d3c0     01 16 CE F7 | 	test	arg03, #1 wz
1d3c4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1d3c8     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1d3cc     28 00 90 FD | 	jmp	#LR__2402
1d3d0                 | LR__2396
1d3d0     0B 13 02 F1 | 	add	arg01, arg03
1d3d4     0B 15 02 F1 | 	add	arg02, arg03
1d3d8     0B 07 0A F6 | 	mov	_var04, arg03 wz
1d3dc     18 00 90 AD |  if_e	jmp	#LR__2401
1d3e0     97 0A 48 FB | 	callpa	#(@LR__2399-@LR__2397)>>2,fcache_load_ptr_
1d3e4                 | LR__2397
1d3e4     03 09 D8 FC | 	rep	@LR__2400, _var04
1d3e8                 | LR__2398
1d3e8     01 12 86 F1 | 	sub	arg01, #1
1d3ec     01 14 86 F1 | 	sub	arg02, #1
1d3f0     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d3f4     09 03 42 FC | 	wrbyte	_var02, arg01
1d3f8                 | LR__2399
1d3f8                 | LR__2400
1d3f8                 | LR__2401
1d3f8                 | LR__2402
1d3f8     00 FB 01 F6 | 	mov	result1, _var01
1d3fc                 | __system____builtin_memmove_ret
1d3fc     2D 00 64 FD | 	ret
1d400                 | 
1d400                 | __system____builtin_strcpy
1d400     09 01 02 F6 | 	mov	_var01, arg01
1d404     97 0A 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1d408                 | LR__2410
1d408     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1d40c     09 FB 41 FC | 	wrbyte	result1, arg01
1d410     01 14 06 F1 | 	add	arg02, #1
1d414     01 12 06 F1 | 	add	arg01, #1
1d418     EC FF 9F 5D |  if_ne	jmp	#LR__2410
1d41c                 | LR__2411
1d41c     00 FB 01 F6 | 	mov	result1, _var01
1d420                 | __system____builtin_strcpy_ret
1d420     2D 00 64 FD | 	ret
1d424                 | 
1d424                 | __system____topofstack
1d424     00 4A 05 F6 | 	mov	COUNT_, #0
1d428     A8 00 A0 FD | 	call	#pushregs_
1d42c     08 F0 07 F1 | 	add	ptra, #8
1d430     04 4E 05 F1 | 	add	fp, #4
1d434     A7 12 62 FC | 	wrlong	arg01, fp
1d438     A7 FA 01 F6 | 	mov	result1, fp
1d43c     04 4E 85 F1 | 	sub	fp, #4
1d440     A7 F0 03 F6 | 	mov	ptra, fp
1d444     B2 00 A0 FD | 	call	#popregs_
1d448                 | __system____topofstack_ret
1d448     2D 00 64 FD | 	ret
1d44c                 | 
1d44c                 | __system___lockmem
1d44c     00 FA 05 F6 | 	mov	result1, #0
1d450     01 FA 61 FD | 	cogid	result1
1d454     00 FB 05 F1 | 	add	result1, #256
1d458                 | LR__2420
1d458     09 01 0A FB | 	rdlong	_var01, arg01 wz
1d45c     09 FB 61 AC |  if_e	wrlong	result1, arg01
1d460     09 01 02 AB |  if_e	rdlong	_var01, arg01
1d464     09 01 02 AB |  if_e	rdlong	_var01, arg01
1d468     FD 00 0A F2 | 	cmp	_var01, result1 wz
1d46c     E8 FF 9F 5D |  if_ne	jmp	#LR__2420
1d470                 | __system___lockmem_ret
1d470     2D 00 64 FD | 	ret
1d474                 | 
1d474                 | __system___string_cmp
1d474     97 14 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1d478                 | LR__2430
1d478     09 01 C2 FA | 	rdbyte	_var01, arg01
1d47c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d480     00 05 02 F6 | 	mov	_var03, _var01
1d484     01 05 8A F1 | 	sub	_var03, _var02 wz
1d488     01 12 06 F1 | 	add	arg01, #1
1d48c     01 14 06 F1 | 	add	arg02, #1
1d490     0C 00 90 5D |  if_ne	jmp	#LR__2432
1d494     00 00 0E F2 | 	cmp	_var01, #0 wz
1d498     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1d49c     D8 FF 9F 5D |  if_ne	jmp	#LR__2430
1d4a0                 | LR__2431
1d4a0                 | LR__2432
1d4a0     02 FB 01 F6 | 	mov	result1, _var03
1d4a4                 | __system___string_cmp_ret
1d4a4     2D 00 64 FD | 	ret
1d4a8                 | 
1d4a8                 | __system___string_concat
1d4a8     05 4A 05 F6 | 	mov	COUNT_, #5
1d4ac     A8 00 A0 FD | 	call	#pushregs_
1d4b0     09 1F 02 F6 | 	mov	local01, arg01
1d4b4     0A 21 02 F6 | 	mov	local02, arg02
1d4b8     0F 13 02 F6 | 	mov	arg01, local01
1d4bc     09 23 02 F6 | 	mov	local03, arg01
1d4c0     97 06 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1d4c4                 | LR__2440
1d4c4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d4c8     01 22 06 51 |  if_ne	add	local03, #1
1d4cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2440
1d4d0                 | LR__2441
1d4d0     09 23 82 F1 | 	sub	local03, arg01
1d4d4     11 25 02 F6 | 	mov	local04, local03
1d4d8     10 13 02 F6 | 	mov	arg01, local02
1d4dc     09 23 02 F6 | 	mov	local03, arg01
1d4e0     97 06 48 FB | 	callpa	#(@LR__2443-@LR__2442)>>2,fcache_load_ptr_
1d4e4                 | LR__2442
1d4e4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d4e8     01 22 06 51 |  if_ne	add	local03, #1
1d4ec     F4 FF 9F 5D |  if_ne	jmp	#LR__2442
1d4f0                 | LR__2443
1d4f0     09 23 82 F1 | 	sub	local03, arg01
1d4f4     12 13 02 F6 | 	mov	arg01, local04
1d4f8     11 13 02 F1 | 	add	arg01, local03
1d4fc     01 12 06 F1 | 	add	arg01, #1
1d500     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1d504     FD 26 0A F6 | 	mov	local05, result1 wz
1d508     28 00 90 AD |  if_e	jmp	#LR__2444
1d50c     13 13 02 F6 | 	mov	arg01, local05
1d510     0F 15 02 F6 | 	mov	arg02, local01
1d514     12 17 02 F6 | 	mov	arg03, local04
1d518     50 FE BF FD | 	call	#__system____builtin_memmove
1d51c     13 13 02 F6 | 	mov	arg01, local05
1d520     12 13 02 F1 | 	add	arg01, local04
1d524     01 22 06 F1 | 	add	local03, #1
1d528     10 15 02 F6 | 	mov	arg02, local02
1d52c     11 17 02 F6 | 	mov	arg03, local03
1d530     38 FE BF FD | 	call	#__system____builtin_memmove
1d534                 | LR__2444
1d534     13 FB 01 F6 | 	mov	result1, local05
1d538     A7 F0 03 F6 | 	mov	ptra, fp
1d53c     B2 00 A0 FD | 	call	#popregs_
1d540                 | __system___string_concat_ret
1d540     2D 00 64 FD | 	ret
1d544                 | 
1d544                 | __system___tx
1d544     02 4A 05 F6 | 	mov	COUNT_, #2
1d548     A8 00 A0 FD | 	call	#pushregs_
1d54c     09 1F 02 F6 | 	mov	local01, arg01
1d550     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d554     18 00 90 5D |  if_ne	jmp	#LR__2450
1d558     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1d55c     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1d560     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1d564     02 20 CE F7 | 	test	local02, #2 wz
1d568     0D 12 06 56 |  if_ne	mov	arg01, #13
1d56c     6C FC BF 5D |  if_ne	call	#__system___txraw
1d570                 | LR__2450
1d570     0F 13 02 F6 | 	mov	arg01, local01
1d574     64 FC BF FD | 	call	#__system___txraw
1d578     A7 F0 03 F6 | 	mov	ptra, fp
1d57c     B2 00 A0 FD | 	call	#popregs_
1d580                 | __system___tx_ret
1d580     2D 00 64 FD | 	ret
1d584                 | 
1d584                 | __system___rx
1d584     01 4A 05 F6 | 	mov	COUNT_, #1
1d588     A8 00 A0 FD | 	call	#pushregs_
1d58c                 | LR__2460
1d58c     00 12 06 F6 | 	mov	arg01, #0
1d590     8C FC BF FD | 	call	#__system___rxraw
1d594     FD 1E 02 F6 | 	mov	local01, result1
1d598     FF FF 7F FF 
1d59c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1d5a0     E8 FF 9F AD |  if_e	jmp	#LR__2460
1d5a4     0D 1E 0E F2 | 	cmp	local01, #13 wz
1d5a8     14 00 90 5D |  if_ne	jmp	#LR__2461
1d5ac     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1d5b0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1d5b4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1d5b8     02 FA CD F7 | 	test	result1, #2 wz
1d5bc     0A 1E 06 56 |  if_ne	mov	local01, #10
1d5c0                 | LR__2461
1d5c0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1d5c4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1d5c8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1d5cc     01 12 CE F7 | 	test	arg01, #1 wz
1d5d0     1C 00 90 AD |  if_e	jmp	#LR__2464
1d5d4     7F 1E 0E F2 | 	cmp	local01, #127 wz
1d5d8     0C 00 90 5D |  if_ne	jmp	#LR__2462
1d5dc     08 12 06 F6 | 	mov	arg01, #8
1d5e0     60 FF BF FD | 	call	#__system___tx
1d5e4     08 00 90 FD | 	jmp	#LR__2463
1d5e8                 | LR__2462
1d5e8     0F 13 02 F6 | 	mov	arg01, local01
1d5ec     54 FF BF FD | 	call	#__system___tx
1d5f0                 | LR__2463
1d5f0                 | LR__2464
1d5f0     0F FB 01 F6 | 	mov	result1, local01
1d5f4     A7 F0 03 F6 | 	mov	ptra, fp
1d5f8     B2 00 A0 FD | 	call	#popregs_
1d5fc                 | __system___rx_ret
1d5fc     2D 00 64 FD | 	ret
1d600                 | 
1d600                 | __system___pinwrite
1d600     09 01 02 F6 | 	mov	_var01, arg01
1d604     1F 00 06 F5 | 	and	_var01, #31
1d608     20 12 CE F7 | 	test	arg01, #32 wz
1d60c     06 12 46 F0 | 	shr	arg01, #6
1d610     09 13 CA F9 | 	bmask	arg01, arg01
1d614     00 13 62 F0 | 	shl	arg01, _var01
1d618     00 15 62 F0 | 	shl	arg02, _var01
1d61c     1C 00 90 AD |  if_e	jmp	#LR__2470
1d620     09 F7 43 F5 | 	or	dirb, arg01
1d624     FD 01 02 F6 | 	mov	_var01, outb
1d628     09 01 22 F5 | 	andn	_var01, arg01
1d62c     09 15 02 F5 | 	and	arg02, arg01
1d630     0A 01 42 F5 | 	or	_var01, arg02
1d634     00 FB 03 F6 | 	mov	outb, _var01
1d638     18 00 90 FD | 	jmp	#LR__2471
1d63c                 | LR__2470
1d63c     09 F5 43 F5 | 	or	dira, arg01
1d640     FC 01 02 F6 | 	mov	_var01, outa
1d644     09 01 22 F5 | 	andn	_var01, arg01
1d648     09 15 02 F5 | 	and	arg02, arg01
1d64c     0A 01 42 F5 | 	or	_var01, arg02
1d650     00 F9 03 F6 | 	mov	outa, _var01
1d654                 | LR__2471
1d654                 | __system___pinwrite_ret
1d654     2D 00 64 FD | 	ret
1d658                 | 
1d658                 | __system___basic_read_line
1d658     06 4A 05 F6 | 	mov	COUNT_, #6
1d65c     A8 00 A0 FD | 	call	#pushregs_
1d660     09 1F 02 F6 | 	mov	local01, arg01
1d664     00 20 06 F6 | 	mov	local02, #0
1d668     18 22 06 F6 | 	mov	local03, #24
1d66c     00 24 06 F6 | 	mov	local04, #0
1d670     18 12 06 F6 | 	mov	arg01, #24
1d674     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1d678     FD 26 0A F6 | 	mov	local05, result1 wz
1d67c     13 FB 01 A6 |  if_e	mov	result1, local05
1d680     B0 00 90 AD |  if_e	jmp	#LR__2483
1d684                 | LR__2480
1d684     0F 13 02 F6 | 	mov	arg01, local01
1d688     88 0B B0 FD | 	call	#__system___basic_get_char
1d68c     FD 28 02 F6 | 	mov	local06, result1
1d690     01 28 56 F2 | 	cmps	local06, #1 wc
1d694     8C 00 90 CD |  if_b	jmp	#LR__2482
1d698     0A 28 0E F2 | 	cmp	local06, #10 wz
1d69c     10 00 90 5D |  if_ne	jmp	#LR__2481
1d6a0     00 24 0E F2 | 	cmp	local04, #0 wz
1d6a4     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1d6a8     01 20 86 11 |  if_a	sub	local02, #1
1d6ac     74 00 90 FD | 	jmp	#LR__2482
1d6b0                 | LR__2481
1d6b0     0D 28 0E F2 | 	cmp	local06, #13 wz
1d6b4     01 24 06 A6 |  if_e	mov	local04, #1
1d6b8     00 24 06 56 |  if_ne	mov	local04, #0
1d6bc     08 28 0E F2 | 	cmp	local06, #8 wz
1d6c0     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1d6c4     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1d6c8     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1d6cc     B4 FF 9F AD |  if_e	jmp	#LR__2480
1d6d0     13 17 02 F6 | 	mov	arg03, local05
1d6d4     10 17 02 F1 | 	add	arg03, local02
1d6d8     0B 29 42 FC | 	wrbyte	local06, arg03
1d6dc     01 20 06 F1 | 	add	local02, #1
1d6e0     11 21 0A F2 | 	cmp	local02, local03 wz
1d6e4     9C FF 9F 5D |  if_ne	jmp	#LR__2480
1d6e8     11 13 02 F6 | 	mov	arg01, local03
1d6ec     20 12 06 F1 | 	add	arg01, #32
1d6f0     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1d6f4     FD 28 0A F6 | 	mov	local06, result1 wz
1d6f8     14 FB 01 A6 |  if_e	mov	result1, local06
1d6fc     34 00 90 AD |  if_e	jmp	#LR__2483
1d700     14 13 02 F6 | 	mov	arg01, local06
1d704     13 15 02 F6 | 	mov	arg02, local05
1d708     11 17 02 F6 | 	mov	arg03, local03
1d70c     5C FC BF FD | 	call	#__system____builtin_memmove
1d710     20 22 06 F1 | 	add	local03, #32
1d714     13 13 02 F6 | 	mov	arg01, local05
1d718     B4 3C B0 FD | 	call	#__system___gc_free
1d71c     14 27 02 F6 | 	mov	local05, local06
1d720     60 FF 9F FD | 	jmp	#LR__2480
1d724                 | LR__2482
1d724     13 29 02 F6 | 	mov	local06, local05
1d728     10 29 02 F1 | 	add	local06, local02
1d72c     14 01 48 FC | 	wrbyte	#0, local06
1d730     13 FB 01 F6 | 	mov	result1, local05
1d734                 | LR__2483
1d734     A7 F0 03 F6 | 	mov	ptra, fp
1d738     B2 00 A0 FD | 	call	#popregs_
1d73c                 | __system___basic_read_line_ret
1d73c     2D 00 64 FD | 	ret
1d740                 | 
1d740                 | __system___waitms
1d740     09 01 02 F6 | 	mov	_var01, arg01
1d744     1A 02 62 FD | 	getct	_var02
1d748     14 04 06 FB | 	rdlong	_var03, #20
1d74c     97 14 48 FB | 	callpa	#(@LR__2491-@LR__2490)>>2,fcache_load_ptr_
1d750                 | LR__2490
1d750     01 00 00 FF 
1d754     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1d758     1C 00 90 CD |  if_b	jmp	#LR__2492
1d75c     02 03 02 F1 | 	add	_var02, _var03
1d760     01 13 02 F6 | 	mov	arg01, _var02
1d764     00 12 66 FA | 	addct1	arg01, #0
1d768     24 22 60 FD | 	waitct1
1d76c     01 00 00 FF 
1d770     E8 01 86 F1 | 	sub	_var01, ##1000
1d774     D8 FF 9F FD | 	jmp	#LR__2490
1d778                 | LR__2491
1d778                 | LR__2492
1d778     01 00 56 F2 | 	cmps	_var01, #1 wc
1d77c     28 00 90 CD |  if_b	jmp	#LR__2493
1d780     02 01 02 FD | 	qmul	_var01, _var03
1d784     01 00 00 FF 
1d788     E8 17 06 F6 | 	mov	arg03, ##1000
1d78c     19 FA 61 FD | 	getqy	result1
1d790     18 12 62 FD | 	getqx	arg01
1d794     28 FA 61 FD | 	setq	result1
1d798     0B 13 12 FD | 	qdiv	arg01, arg03
1d79c     18 12 62 FD | 	getqx	arg01
1d7a0     01 13 62 FA | 	addct1	arg01, _var02
1d7a4     24 22 60 FD | 	waitct1
1d7a8                 | LR__2493
1d7a8                 | __system___waitms_ret
1d7a8     2D 00 64 FD | 	ret
1d7ac                 | 
1d7ac                 | __system___waitus
1d7ac     09 01 02 F6 | 	mov	_var01, arg01
1d7b0     1A 02 62 FD | 	getct	_var02
1d7b4     14 04 06 FB | 	rdlong	_var03, #20
1d7b8     97 14 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1d7bc                 | LR__2500
1d7bc     A1 07 00 FF 
1d7c0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1d7c4     1C 00 90 CD |  if_b	jmp	#LR__2502
1d7c8     02 03 02 F1 | 	add	_var02, _var03
1d7cc     01 13 02 F6 | 	mov	arg01, _var02
1d7d0     00 12 66 FA | 	addct1	arg01, #0
1d7d4     24 22 60 FD | 	waitct1
1d7d8     A1 07 00 FF 
1d7dc     40 00 86 F1 | 	sub	_var01, ##1000000
1d7e0     D8 FF 9F FD | 	jmp	#LR__2500
1d7e4                 | LR__2501
1d7e4                 | LR__2502
1d7e4     01 00 56 F2 | 	cmps	_var01, #1 wc
1d7e8     28 00 90 CD |  if_b	jmp	#LR__2503
1d7ec     02 01 02 FD | 	qmul	_var01, _var03
1d7f0     A1 07 00 FF 
1d7f4     40 16 06 F6 | 	mov	arg03, ##1000000
1d7f8     19 FA 61 FD | 	getqy	result1
1d7fc     18 12 62 FD | 	getqx	arg01
1d800     28 FA 61 FD | 	setq	result1
1d804     0B 13 12 FD | 	qdiv	arg01, arg03
1d808     18 FA 61 FD | 	getqx	result1
1d80c     FD 02 62 FA | 	addct1	_var02, result1
1d810     24 22 60 FD | 	waitct1
1d814                 | LR__2503
1d814                 | __system___waitus_ret
1d814     2D 00 64 FD | 	ret
1d818                 | 
1d818                 | __system___mount
1d818     0B 4A 05 F6 | 	mov	COUNT_, #11
1d81c     A8 00 A0 FD | 	call	#pushregs_
1d820     09 1F 02 F6 | 	mov	local01, arg01
1d824     0A 21 0A F6 | 	mov	local02, arg02 wz
1d828     01 22 66 F6 | 	neg	local03, #1
1d82c     01 FA 65 A6 |  if_e	neg	result1, #1
1d830     98 02 90 AD |  if_e	jmp	#LR__2525
1d834     0F FB C1 FA | 	rdbyte	result1, local01
1d838     2F FA 0D F2 | 	cmp	result1, #47 wz
1d83c     28 00 90 5D |  if_ne	jmp	#LR__2512
1d840     0F 13 02 F6 | 	mov	arg01, local01
1d844     09 25 02 F6 | 	mov	local04, arg01
1d848     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1d84c                 | LR__2510
1d84c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d850     01 24 06 51 |  if_ne	add	local04, #1
1d854     F4 FF 9F 5D |  if_ne	jmp	#LR__2510
1d858                 | LR__2511
1d858     09 25 82 F1 | 	sub	local04, arg01
1d85c     12 FB 01 F6 | 	mov	result1, local04
1d860     10 FA 55 F2 | 	cmps	result1, #16 wc
1d864     14 00 90 CD |  if_b	jmp	#LR__2513
1d868                 | LR__2512
1d868     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1d86c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1d870     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1d874     01 FA 65 F6 | 	neg	result1, #1
1d878     50 02 90 FD | 	jmp	#LR__2525
1d87c                 | LR__2513
1d87c     00 26 06 F6 | 	mov	local05, #0
1d880                 | LR__2514
1d880     04 26 56 F2 | 	cmps	local05, #4 wc
1d884     B0 00 90 3D |  if_ae	jmp	#LR__2519
1d888     13 13 02 F6 | 	mov	arg01, local05
1d88c     02 12 66 F0 | 	shl	arg01, #2
1d890     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d894     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1d898     09 FB 09 FB | 	rdlong	result1, arg01 wz
1d89c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d8a0     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1d8a4     13 23 02 86 |  if_c_and_z	mov	local03, local05
1d8a8     84 00 90 8D |  if_c_and_z	jmp	#LR__2518
1d8ac     13 13 02 F6 | 	mov	arg01, local05
1d8b0     02 12 66 F0 | 	shl	arg01, #2
1d8b4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d8b8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1d8bc     09 13 02 FB | 	rdlong	arg01, arg01
1d8c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d8c4     09 25 02 F6 | 	mov	local04, arg01
1d8c8     97 06 48 FB | 	callpa	#(@LR__2516-@LR__2515)>>2,fcache_load_ptr_
1d8cc                 | LR__2515
1d8cc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d8d0     01 24 06 51 |  if_ne	add	local04, #1
1d8d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2515
1d8d8                 | LR__2516
1d8d8     09 25 82 F1 | 	sub	local04, arg01
1d8dc     12 29 02 F6 | 	mov	local06, local04
1d8e0     14 13 02 F6 | 	mov	arg01, local06
1d8e4     0F 13 02 F1 | 	add	arg01, local01
1d8e8     09 FB C1 FA | 	rdbyte	result1, arg01
1d8ec     2F FA 0D F2 | 	cmp	result1, #47 wz
1d8f0     14 2B 02 56 |  if_ne	mov	local07, local06
1d8f4     0F 2B 02 51 |  if_ne	add	local07, local01
1d8f8     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1d8fc     30 00 90 5D |  if_ne	jmp	#LR__2517
1d900     13 17 02 F6 | 	mov	arg03, local05
1d904     02 16 66 F0 | 	shl	arg03, #2
1d908     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d90c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1d910     0B 15 02 FB | 	rdlong	arg02, arg03
1d914     0F 13 02 F6 | 	mov	arg01, local01
1d918     14 17 02 F6 | 	mov	arg03, local06
1d91c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d920     B4 4D B0 FD | 	call	#__system__strncmp
1d924     00 FA 0D F2 | 	cmp	result1, #0 wz
1d928     13 23 02 A6 |  if_e	mov	local03, local05
1d92c     08 00 90 AD |  if_e	jmp	#LR__2519
1d930                 | LR__2517
1d930                 | LR__2518
1d930     01 26 06 F1 | 	add	local05, #1
1d934     48 FF 9F FD | 	jmp	#LR__2514
1d938                 | LR__2519
1d938     FF FF 7F FF 
1d93c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1d940     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1d944     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1d948     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d94c     01 FA 65 A6 |  if_e	neg	result1, #1
1d950     78 01 90 AD |  if_e	jmp	#LR__2525
1d954     11 27 02 F6 | 	mov	local05, local03
1d958     13 2B 02 F6 | 	mov	local07, local05
1d95c     02 2A 66 F0 | 	shl	local07, #2
1d960     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1d964     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1d968     15 29 0A FB | 	rdlong	local06, local07 wz
1d96c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1d970     58 00 90 AD |  if_e	jmp	#LR__2520
1d974     4C 28 06 F1 | 	add	local06, #76
1d978     14 2B 0A FB | 	rdlong	local07, local06 wz
1d97c     4C 28 86 F1 | 	sub	local06, #76
1d980     48 00 90 AD |  if_e	jmp	#LR__2520
1d984     4C 28 06 F1 | 	add	local06, #76
1d988     14 2B 02 FB | 	rdlong	local07, local06
1d98c     15 23 02 F6 | 	mov	local03, local07
1d990     13 2A 46 F7 | 	zerox	local07, #19
1d994     14 22 46 F0 | 	shr	local03, #20
1d998     02 22 66 F0 | 	shl	local03, #2
1d99c     ED 22 02 F1 | 	add	local03, __methods__
1d9a0     11 23 02 FB | 	rdlong	local03, local03
1d9a4     13 29 02 F6 | 	mov	local06, local05
1d9a8     02 28 66 F0 | 	shl	local06, #2
1d9ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d9b0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1d9b4     14 13 02 FB | 	rdlong	arg01, local06
1d9b8     F2 28 02 F6 | 	mov	local06, objptr
1d9bc     15 E5 01 F6 | 	mov	objptr, local07
1d9c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d9c4     2D 22 62 FD | 	call	local03
1d9c8     14 E5 01 F6 | 	mov	objptr, local06
1d9cc                 | LR__2520
1d9cc     13 2D 02 F6 | 	mov	local08, local05
1d9d0     02 2C 66 F0 | 	shl	local08, #2
1d9d4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1d9d8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1d9dc     16 21 62 FC | 	wrlong	local02, local08
1d9e0     00 20 0E F2 | 	cmp	local02, #0 wz
1d9e4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1d9e8     18 00 90 5D |  if_ne	jmp	#LR__2521
1d9ec     02 26 66 F0 | 	shl	local05, #2
1d9f0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d9f4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1d9f8     13 01 68 FC | 	wrlong	#0, local05
1d9fc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1da00     C4 00 90 FD | 	jmp	#LR__2524
1da04                 | LR__2521
1da04     13 2F 02 F6 | 	mov	local09, local05
1da08     04 2E 66 F0 | 	shl	local09, #4
1da0c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1da10     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1da14     17 13 02 F6 | 	mov	arg01, local09
1da18     0F 15 02 F6 | 	mov	arg02, local01
1da1c     10 16 06 F6 | 	mov	arg03, #16
1da20     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1da24     04 4C B0 FD | 	call	#__system__strncpy
1da28     48 20 06 F1 | 	add	local02, #72
1da2c     10 2D 0A FB | 	rdlong	local08, local02 wz
1da30     48 20 86 F1 | 	sub	local02, #72
1da34     7C 00 90 AD |  if_e	jmp	#LR__2523
1da38     48 20 06 F1 | 	add	local02, #72
1da3c     10 2D 02 FB | 	rdlong	local08, local02
1da40     16 31 02 F6 | 	mov	local10, local08
1da44     13 2C 46 F7 | 	zerox	local08, #19
1da48     14 30 46 F0 | 	shr	local10, #20
1da4c     02 30 66 F0 | 	shl	local10, #2
1da50     ED 30 02 F1 | 	add	local10, __methods__
1da54     18 31 02 FB | 	rdlong	local10, local10
1da58     17 13 02 F6 | 	mov	arg01, local09
1da5c     F2 32 02 F6 | 	mov	local11, objptr
1da60     16 E5 01 F6 | 	mov	objptr, local08
1da64     2D 30 62 FD | 	call	local10
1da68     19 E5 01 F6 | 	mov	objptr, local11
1da6c     FD 12 0A F6 | 	mov	arg01, result1 wz
1da70     40 00 90 AD |  if_e	jmp	#LR__2522
1da74     13 2D 02 F6 | 	mov	local08, local05
1da78     02 2C 66 F0 | 	shl	local08, #2
1da7c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1da80     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1da84     16 01 68 FC | 	wrlong	#0, local08
1da88     02 26 66 F0 | 	shl	local05, #2
1da8c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1da90     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1da94     13 01 68 FC | 	wrlong	#0, local05
1da98     09 13 6A F6 | 	neg	arg01, arg01 wz
1da9c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1daa0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1daa4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1daa8     01 FA 65 56 |  if_ne	neg	result1, #1
1daac     00 FA 05 A6 |  if_e	mov	result1, #0
1dab0     18 00 90 FD | 	jmp	#LR__2525
1dab4                 | LR__2522
1dab4                 | LR__2523
1dab4     02 26 66 F0 | 	shl	local05, #2
1dab8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1dabc     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1dac0     13 2F 62 FC | 	wrlong	local09, local05
1dac4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1dac8                 | LR__2524
1dac8     00 FA 05 F6 | 	mov	result1, #0
1dacc                 | LR__2525
1dacc     A7 F0 03 F6 | 	mov	ptra, fp
1dad0     B2 00 A0 FD | 	call	#popregs_
1dad4                 | __system___mount_ret
1dad4     2D 00 64 FD | 	ret
1dad8                 | 
1dad8                 | __system___chdir
1dad8     00 4A 05 F6 | 	mov	COUNT_, #0
1dadc     A8 00 A0 FD | 	call	#pushregs_
1dae0     40 F0 07 F1 | 	add	ptra, #64
1dae4     04 4E 05 F1 | 	add	fp, #4
1dae8     A7 12 62 FC | 	wrlong	arg01, fp
1daec     04 4E 05 F1 | 	add	fp, #4
1daf0     A7 14 02 F6 | 	mov	arg02, fp
1daf4     08 4E 85 F1 | 	sub	fp, #8
1daf8     10 48 B0 FD | 	call	#__system__stat
1dafc     3C 4E 05 F1 | 	add	fp, #60
1db00     A7 FA 61 FC | 	wrlong	result1, fp
1db04     3C 4E 85 F1 | 	sub	fp, #60
1db08     00 FA 0D F2 | 	cmp	result1, #0 wz
1db0c     3C 4E 05 51 |  if_ne	add	fp, #60
1db10     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1db14     3C 4E 85 51 |  if_ne	sub	fp, #60
1db18     BC 00 90 5D |  if_ne	jmp	#LR__2532
1db1c     10 4E 05 F1 | 	add	fp, #16
1db20     A7 12 02 FB | 	rdlong	arg01, fp
1db24     10 4E 85 F1 | 	sub	fp, #16
1db28     78 00 00 FF 
1db2c     00 12 06 F5 | 	and	arg01, ##61440
1db30     08 00 00 FF 
1db34     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1db38     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1db3c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1db40     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1db44     01 FA 65 56 |  if_ne	neg	result1, #1
1db48     8C 00 90 5D |  if_ne	jmp	#LR__2532
1db4c     04 4E 05 F1 | 	add	fp, #4
1db50     A7 16 02 FB | 	rdlong	arg03, fp
1db54     04 4E 85 F1 | 	sub	fp, #4
1db58     0B 17 C2 FA | 	rdbyte	arg03, arg03
1db5c     2F 16 0E F2 | 	cmp	arg03, #47 wz
1db60     24 00 90 5D |  if_ne	jmp	#LR__2530
1db64     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1db68     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1db6c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1db70     04 4E 05 F1 | 	add	fp, #4
1db74     A7 14 02 FB | 	rdlong	arg02, fp
1db78     04 4E 85 F1 | 	sub	fp, #4
1db7c     00 17 06 F6 | 	mov	arg03, #256
1db80     A8 4A B0 FD | 	call	#__system__strncpy
1db84     4C 00 90 FD | 	jmp	#LR__2531
1db88                 | LR__2530
1db88     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1db8c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1db90     38 4E 05 F1 | 	add	fp, #56
1db94     A7 12 62 FC | 	wrlong	arg01, fp
1db98     38 4E 85 F1 | 	sub	fp, #56
1db9c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1dba0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1dba4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1dba8     00 17 06 F6 | 	mov	arg03, #256
1dbac     7C 4A B0 FD | 	call	#__system__strncpy
1dbb0     38 4E 05 F1 | 	add	fp, #56
1dbb4     A7 12 02 FB | 	rdlong	arg01, fp
1dbb8     34 4E 85 F1 | 	sub	fp, #52
1dbbc     A7 14 02 FB | 	rdlong	arg02, fp
1dbc0     04 4E 85 F1 | 	sub	fp, #4
1dbc4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1dbc8     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1dbcc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1dbd0     10 00 B0 FD | 	call	#__system____getvfsforfile
1dbd4                 | LR__2531
1dbd4     00 FA 05 F6 | 	mov	result1, #0
1dbd8                 | LR__2532
1dbd8     A7 F0 03 F6 | 	mov	ptra, fp
1dbdc     B2 00 A0 FD | 	call	#popregs_
1dbe0                 | __system___chdir_ret
1dbe0     2D 00 64 FD | 	ret
1dbe4                 | 
1dbe4                 | __system____getvfsforfile
1dbe4     0E 4A 05 F6 | 	mov	COUNT_, #14
1dbe8     A8 00 A0 FD | 	call	#pushregs_
1dbec     09 1F 02 F6 | 	mov	local01, arg01
1dbf0     0A 21 02 F6 | 	mov	local02, arg02
1dbf4     0B 23 02 F6 | 	mov	local03, arg03
1dbf8     97 10 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1dbfc                 | LR__2540
1dbfc     10 FB C1 FA | 	rdbyte	result1, local02
1dc00     2F FA 0D F2 | 	cmp	result1, #47 wz
1dc04     01 20 06 A1 |  if_e	add	local02, #1
1dc08     10 25 C2 AA |  if_e	rdbyte	local04, local02
1dc0c     01 20 86 A1 |  if_e	sub	local02, #1
1dc10     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1dc14     01 20 06 A1 |  if_e	add	local02, #1
1dc18     E0 FF 9F AD |  if_e	jmp	#LR__2540
1dc1c                 | LR__2541
1dc1c     10 25 C2 FA | 	rdbyte	local04, local02
1dc20     2F 24 0E F2 | 	cmp	local04, #47 wz
1dc24     14 00 90 5D |  if_ne	jmp	#LR__2542
1dc28     0F 13 02 F6 | 	mov	arg01, local01
1dc2c     10 15 02 F6 | 	mov	arg02, local02
1dc30     00 17 06 F6 | 	mov	arg03, #256
1dc34     F4 49 B0 FD | 	call	#__system__strncpy
1dc38     7C 00 90 FD | 	jmp	#LR__2544
1dc3c                 | LR__2542
1dc3c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1dc40     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1dc44     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1dc48     0F 13 02 F6 | 	mov	arg01, local01
1dc4c     00 17 06 F6 | 	mov	arg03, #256
1dc50     D8 49 B0 FD | 	call	#__system__strncpy
1dc54     10 25 CA FA | 	rdbyte	local04, local02 wz
1dc58     5C 00 90 AD |  if_e	jmp	#LR__2543
1dc5c     10 25 C2 FA | 	rdbyte	local04, local02
1dc60     2E 24 0E F2 | 	cmp	local04, #46 wz
1dc64     01 20 06 A1 |  if_e	add	local02, #1
1dc68     10 27 C2 AA |  if_e	rdbyte	local05, local02
1dc6c     01 20 86 A1 |  if_e	sub	local02, #1
1dc70     13 29 02 A6 |  if_e	mov	local06, local05
1dc74     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1dc78     3C 00 90 AD |  if_e	jmp	#LR__2543
1dc7c     0F 27 C2 FA | 	rdbyte	local05, local01
1dc80     2F 26 0E F2 | 	cmp	local05, #47 wz
1dc84     01 1E 06 A1 |  if_e	add	local01, #1
1dc88     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1dc8c     01 1E 86 A1 |  if_e	sub	local01, #1
1dc90     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1dc94     64 01 00 5F 
1dc98     F8 15 06 56 |  if_ne	mov	arg02, ##@LR__4600
1dc9c     0F 13 02 56 |  if_ne	mov	arg01, local01
1dca0     00 17 06 56 |  if_ne	mov	arg03, #256
1dca4     D0 49 B0 5D |  if_ne	call	#__system__strncat
1dca8     0F 13 02 F6 | 	mov	arg01, local01
1dcac     10 15 02 F6 | 	mov	arg02, local02
1dcb0     00 17 06 F6 | 	mov	arg03, #256
1dcb4     C0 49 B0 FD | 	call	#__system__strncat
1dcb8                 | LR__2543
1dcb8                 | LR__2544
1dcb8     0F 13 02 F6 | 	mov	arg01, local01
1dcbc     78 4B B0 FD | 	call	#__system___normalizeName
1dcc0     0F 25 CA FA | 	rdbyte	local04, local01 wz
1dcc4     1C 00 90 AD |  if_e	jmp	#LR__2545
1dcc8     0F 25 C2 FA | 	rdbyte	local04, local01
1dccc     2F 24 0E F2 | 	cmp	local04, #47 wz
1dcd0     01 1E 06 A1 |  if_e	add	local01, #1
1dcd4     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1dcd8     01 1E 86 A1 |  if_e	sub	local01, #1
1dcdc     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1dce0     18 00 90 5D |  if_ne	jmp	#LR__2546
1dce4                 | LR__2545
1dce4     01 00 00 FF 
1dce8     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1dcec     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1dcf0     01 00 00 FF 
1dcf4     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1dcf8     EC 01 90 FD | 	jmp	#LR__2560
1dcfc                 | LR__2546
1dcfc     00 2A 06 F6 | 	mov	local07, #0
1dd00                 | LR__2547
1dd00     04 2A 56 F2 | 	cmps	local07, #4 wc
1dd04     CC 01 90 3D |  if_ae	jmp	#LR__2559
1dd08     15 29 02 F6 | 	mov	local06, local07
1dd0c     02 28 66 F0 | 	shl	local06, #2
1dd10     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1dd14     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1dd18     14 29 0A FB | 	rdlong	local06, local06 wz
1dd1c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1dd20     A8 01 90 AD |  if_e	jmp	#LR__2558
1dd24     15 25 02 F6 | 	mov	local04, local07
1dd28     02 24 66 F0 | 	shl	local04, #2
1dd2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1dd30     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1dd34     12 13 02 FB | 	rdlong	arg01, local04
1dd38     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1dd3c     09 2D 02 F6 | 	mov	local08, arg01
1dd40     97 06 48 FB | 	callpa	#(@LR__2549-@LR__2548)>>2,fcache_load_ptr_
1dd44                 | LR__2548
1dd44     16 FB C9 FA | 	rdbyte	result1, local08 wz
1dd48     01 2C 06 51 |  if_ne	add	local08, #1
1dd4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2548
1dd50                 | LR__2549
1dd50     09 2D 82 F1 | 	sub	local08, arg01
1dd54     16 2F 02 F6 | 	mov	local09, local08
1dd58     17 25 02 F6 | 	mov	local04, local09
1dd5c     0F 25 02 F1 | 	add	local04, local01
1dd60     12 29 C2 FA | 	rdbyte	local06, local04
1dd64     2F 28 0E F2 | 	cmp	local06, #47 wz
1dd68     17 31 02 56 |  if_ne	mov	local10, local09
1dd6c     0F 31 02 51 |  if_ne	add	local10, local01
1dd70     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1dd74     54 01 90 5D |  if_ne	jmp	#LR__2557
1dd78     15 17 02 F6 | 	mov	arg03, local07
1dd7c     02 16 66 F0 | 	shl	arg03, #2
1dd80     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1dd84     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1dd88     0B 15 02 FB | 	rdlong	arg02, arg03
1dd8c     17 17 02 F6 | 	mov	arg03, local09
1dd90     0F 13 02 F6 | 	mov	arg01, local01
1dd94     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1dd98     3C 49 B0 FD | 	call	#__system__strncmp
1dd9c     00 FA 4D F2 | 	cmps	result1, #0 wz
1dda0     28 01 90 5D |  if_ne	jmp	#LR__2557
1dda4     15 33 02 F6 | 	mov	local11, local07
1dda8     02 32 66 F0 | 	shl	local11, #2
1ddac     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1ddb0     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1ddb4     19 35 02 FB | 	rdlong	local12, local11
1ddb8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1ddbc     97 22 48 FB | 	callpa	#(@LR__2551-@LR__2550)>>2,fcache_load_ptr_
1ddc0                 | LR__2550
1ddc0     17 29 02 F6 | 	mov	local06, local09
1ddc4     01 28 06 F1 | 	add	local06, #1
1ddc8     0F 29 02 F1 | 	add	local06, local01
1ddcc     14 33 C2 FA | 	rdbyte	local11, local06
1ddd0     2E 32 0E F2 | 	cmp	local11, #46 wz
1ddd4     2C 00 90 5D |  if_ne	jmp	#LR__2552
1ddd8     17 33 02 F6 | 	mov	local11, local09
1dddc     02 32 06 F1 | 	add	local11, #2
1dde0     0F 33 02 F1 | 	add	local11, local01
1dde4     19 31 C2 FA | 	rdbyte	local10, local11
1dde8     2F 30 0E F2 | 	cmp	local10, #47 wz
1ddec     17 37 02 56 |  if_ne	mov	local13, local09
1ddf0     02 36 06 51 |  if_ne	add	local13, #2
1ddf4     0F 37 02 51 |  if_ne	add	local13, local01
1ddf8     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1ddfc     01 2E 06 A1 |  if_e	add	local09, #1
1de00     BC FF 9F AD |  if_e	jmp	#LR__2550
1de04                 | LR__2551
1de04                 | LR__2552
1de04     00 22 0E F2 | 	cmp	local03, #0 wz
1de08     11 13 02 56 |  if_ne	mov	arg01, local03
1de0c     0F 15 02 56 |  if_ne	mov	arg02, local01
1de10     00 17 06 56 |  if_ne	mov	arg03, #256
1de14     14 48 B0 5D |  if_ne	call	#__system__strncpy
1de18     0F 15 02 F6 | 	mov	arg02, local01
1de1c     17 15 02 F1 | 	add	arg02, local09
1de20     01 14 06 F1 | 	add	arg02, #1
1de24     0F 13 02 F6 | 	mov	arg01, local01
1de28     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1de2c     0F 13 02 F6 | 	mov	arg01, local01
1de30     09 2D 02 F6 | 	mov	local08, arg01
1de34     97 06 48 FB | 	callpa	#(@LR__2554-@LR__2553)>>2,fcache_load_ptr_
1de38                 | LR__2553
1de38     16 FB C9 FA | 	rdbyte	result1, local08 wz
1de3c     01 2C 06 51 |  if_ne	add	local08, #1
1de40     F4 FF 9F 5D |  if_ne	jmp	#LR__2553
1de44                 | LR__2554
1de44     09 2D 82 F1 | 	sub	local08, arg01
1de48     16 2F 02 F6 | 	mov	local09, local08
1de4c                 | LR__2555
1de4c     01 2E 56 F2 | 	cmps	local09, #1 wc
1de50     70 00 90 CD |  if_b	jmp	#LR__2556
1de54     17 25 02 F6 | 	mov	local04, local09
1de58     0F 25 02 F1 | 	add	local04, local01
1de5c     12 33 C2 FA | 	rdbyte	local11, local04
1de60     2F 32 0E F2 | 	cmp	local11, #47 wz
1de64     17 33 02 A6 |  if_e	mov	local11, local09
1de68     0F 33 02 A1 |  if_e	add	local11, local01
1de6c     19 01 48 AC |  if_e	wrbyte	#0, local11
1de70     01 2E 86 A1 |  if_e	sub	local09, #1
1de74     D4 FF 9F AD |  if_e	jmp	#LR__2555
1de78     17 25 02 F6 | 	mov	local04, local09
1de7c     0F 25 02 F1 | 	add	local04, local01
1de80     12 33 C2 FA | 	rdbyte	local11, local04
1de84     2E 32 0E F2 | 	cmp	local11, #46 wz
1de88     38 00 90 5D |  if_ne	jmp	#LR__2556
1de8c     02 2E 56 F2 | 	cmps	local09, #2 wc
1de90     30 00 90 CD |  if_b	jmp	#LR__2556
1de94     17 39 02 F6 | 	mov	local14, local09
1de98     01 38 86 F1 | 	sub	local14, #1
1de9c     0F 39 02 F1 | 	add	local14, local01
1dea0     1C 27 C2 FA | 	rdbyte	local05, local14
1dea4     2F 26 0E F2 | 	cmp	local05, #47 wz
1dea8     18 00 90 5D |  if_ne	jmp	#LR__2556
1deac     17 25 02 F6 | 	mov	local04, local09
1deb0     01 24 86 F1 | 	sub	local04, #1
1deb4     0F 25 02 F1 | 	add	local04, local01
1deb8     12 01 48 FC | 	wrbyte	#0, local04
1debc     02 2E 86 F1 | 	sub	local09, #2
1dec0     88 FF 9F FD | 	jmp	#LR__2555
1dec4                 | LR__2556
1dec4     1A FB 01 F6 | 	mov	result1, local12
1dec8     1C 00 90 FD | 	jmp	#LR__2560
1decc                 | LR__2557
1decc                 | LR__2558
1decc     01 2A 06 F1 | 	add	local07, #1
1ded0     2C FE 9F FD | 	jmp	#LR__2547
1ded4                 | LR__2559
1ded4     03 00 00 FF 
1ded8     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1dedc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1dee0     03 00 00 FF 
1dee4     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1dee8                 | LR__2560
1dee8     A7 F0 03 F6 | 	mov	ptra, fp
1deec     B2 00 A0 FD | 	call	#popregs_
1def0                 | __system____getvfsforfile_ret
1def0     2D 00 64 FD | 	ret
1def4                 | 
1def4                 | __system___basic_open
1def4     05 4A 05 F6 | 	mov	COUNT_, #5
1def8     A8 00 A0 FD | 	call	#pushregs_
1defc     0A 1F 02 F6 | 	mov	local01, arg02
1df00     0B 21 02 F6 | 	mov	local02, arg03
1df04     0C 23 02 F6 | 	mov	local03, arg04
1df08     00 24 06 F6 | 	mov	local04, #0
1df0c     F4 46 B0 FD | 	call	#__system____getftab
1df10     FD 26 0A F6 | 	mov	local05, result1 wz
1df14     18 00 90 5D |  if_ne	jmp	#LR__2570
1df18     EE 12 02 F6 | 	mov	arg01, abortchain
1df1c     0C 14 06 F6 | 	mov	arg02, #12
1df20     01 16 06 F6 | 	mov	arg03, #1
1df24     DA 00 A0 FD | 	call	#__longjmp
1df28     01 FA 65 F6 | 	neg	result1, #1
1df2c     10 01 90 FD | 	jmp	#LR__2579
1df30                 | LR__2570
1df30     08 26 06 F1 | 	add	local05, #8
1df34     13 FB 09 FB | 	rdlong	result1, local05 wz
1df38     08 26 86 F1 | 	sub	local05, #8
1df3c     13 13 02 56 |  if_ne	mov	arg01, local05
1df40     50 3E B0 5D |  if_ne	call	#__system___closeraw
1df44     00 1E 0E F2 | 	cmp	local01, #0 wz
1df48     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1df4c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1df50     3C 00 90 AD |  if_e	jmp	#LR__2572
1df54     0C 12 06 F6 | 	mov	arg01, #12
1df58     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1df5c     FD 24 0A F6 | 	mov	local04, result1 wz
1df60     18 00 90 5D |  if_ne	jmp	#LR__2571
1df64     EE 12 02 F6 | 	mov	arg01, abortchain
1df68     07 14 06 F6 | 	mov	arg02, #7
1df6c     01 16 06 F6 | 	mov	arg03, #1
1df70     DA 00 A0 FD | 	call	#__longjmp
1df74     01 FA 65 F6 | 	neg	result1, #1
1df78     C4 00 90 FD | 	jmp	#LR__2579
1df7c                 | LR__2571
1df7c     12 01 68 FC | 	wrlong	#0, local04
1df80     04 24 06 F1 | 	add	local04, #4
1df84     12 01 68 FC | 	wrlong	#0, local04
1df88     04 24 86 F1 | 	sub	local04, #4
1df8c     13 25 62 FC | 	wrlong	local04, local05
1df90                 | LR__2572
1df90     00 1E 0E F2 | 	cmp	local01, #0 wz
1df94     1C 00 90 AD |  if_e	jmp	#LR__2573
1df98     12 1F 62 FC | 	wrlong	local01, local04
1df9c     12 FB 01 F6 | 	mov	result1, local04
1dfa0     77 FA 25 F4 | 	bith	result1, #119
1dfa4     1C 26 06 F1 | 	add	local05, #28
1dfa8     13 FB 61 FC | 	wrlong	result1, local05
1dfac     1C 26 86 F1 | 	sub	local05, #28
1dfb0     0C 00 90 FD | 	jmp	#LR__2574
1dfb4                 | LR__2573
1dfb4     1C 26 06 F1 | 	add	local05, #28
1dfb8     13 01 68 FC | 	wrlong	#0, local05
1dfbc     1C 26 86 F1 | 	sub	local05, #28
1dfc0                 | LR__2574
1dfc0     00 20 0E F2 | 	cmp	local02, #0 wz
1dfc4     28 00 90 AD |  if_e	jmp	#LR__2575
1dfc8     04 24 06 F1 | 	add	local04, #4
1dfcc     12 21 62 FC | 	wrlong	local02, local04
1dfd0     04 24 86 F1 | 	sub	local04, #4
1dfd4     12 FB 01 F6 | 	mov	result1, local04
1dfd8     00 C8 03 FF 
1dfdc     00 FA 45 F5 | 	or	result1, ##126877696
1dfe0     20 26 06 F1 | 	add	local05, #32
1dfe4     13 FB 61 FC | 	wrlong	result1, local05
1dfe8     20 26 86 F1 | 	sub	local05, #32
1dfec     0C 00 90 FD | 	jmp	#LR__2576
1dff0                 | LR__2575
1dff0     20 26 06 F1 | 	add	local05, #32
1dff4     13 01 68 FC | 	wrlong	#0, local05
1dff8     20 26 86 F1 | 	sub	local05, #32
1dffc                 | LR__2576
1dffc     00 22 0E F2 | 	cmp	local03, #0 wz
1e000     24 00 90 AD |  if_e	jmp	#LR__2577
1e004     08 24 06 F1 | 	add	local04, #8
1e008     12 23 62 FC | 	wrlong	local03, local04
1e00c     08 24 86 F1 | 	sub	local04, #8
1e010     00 D0 03 FF 
1e014     00 24 46 F5 | 	or	local04, ##127926272
1e018     24 26 06 F1 | 	add	local05, #36
1e01c     13 25 62 FC | 	wrlong	local04, local05
1e020     24 26 86 F1 | 	sub	local05, #36
1e024     0C 00 90 FD | 	jmp	#LR__2578
1e028                 | LR__2577
1e028     24 26 06 F1 | 	add	local05, #36
1e02c     13 01 68 FC | 	wrlong	#0, local05
1e030     24 26 86 F1 | 	sub	local05, #36
1e034                 | LR__2578
1e034     08 26 06 F1 | 	add	local05, #8
1e038     13 0F 68 FC | 	wrlong	#7, local05
1e03c     00 FA 05 F6 | 	mov	result1, #0
1e040                 | LR__2579
1e040     A7 F0 03 F6 | 	mov	ptra, fp
1e044     B2 00 A0 FD | 	call	#popregs_
1e048                 | __system___basic_open_ret
1e048     2D 00 64 FD | 	ret
1e04c                 | 
1e04c                 | __system___basic_open_string
1e04c     04 4A 05 F6 | 	mov	COUNT_, #4
1e050     A8 00 A0 FD | 	call	#pushregs_
1e054     0A 1F 02 F6 | 	mov	local01, arg02
1e058     0B 21 02 F6 | 	mov	local02, arg03
1e05c     A4 45 B0 FD | 	call	#__system____getftab
1e060     FD 22 0A F6 | 	mov	local03, result1 wz
1e064     18 00 90 5D |  if_ne	jmp	#LR__2580
1e068     EE 12 02 F6 | 	mov	arg01, abortchain
1e06c     0C 14 06 F6 | 	mov	arg02, #12
1e070     01 16 06 F6 | 	mov	arg03, #1
1e074     DA 00 A0 FD | 	call	#__longjmp
1e078     01 FA 65 F6 | 	neg	result1, #1
1e07c     58 00 90 FD | 	jmp	#LR__2582
1e080                 | LR__2580
1e080     08 22 06 F1 | 	add	local03, #8
1e084     11 19 0A FB | 	rdlong	arg04, local03 wz
1e088     08 22 86 F1 | 	sub	local03, #8
1e08c     11 13 02 56 |  if_ne	mov	arg01, local03
1e090     00 3D B0 5D |  if_ne	call	#__system___closeraw
1e094     0F 15 02 F6 | 	mov	arg02, local01
1e098     10 17 02 F6 | 	mov	arg03, local02
1e09c     11 13 02 F6 | 	mov	arg01, local03
1e0a0     B6 19 06 F6 | 	mov	arg04, #438
1e0a4     E8 39 B0 FD | 	call	#__system___openraw
1e0a8     FD 24 02 F6 | 	mov	local04, result1
1e0ac     00 24 56 F2 | 	cmps	local04, #0 wc
1e0b0     20 00 90 3D |  if_ae	jmp	#LR__2581
1e0b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1e0b8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e0bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1e0c0     EE 12 02 F6 | 	mov	arg01, abortchain
1e0c4     01 16 06 F6 | 	mov	arg03, #1
1e0c8     DA 00 A0 FD | 	call	#__longjmp
1e0cc     01 FA 65 F6 | 	neg	result1, #1
1e0d0     04 00 90 FD | 	jmp	#LR__2582
1e0d4                 | LR__2581
1e0d4     12 FB 01 F6 | 	mov	result1, local04
1e0d8                 | LR__2582
1e0d8     A7 F0 03 F6 | 	mov	ptra, fp
1e0dc     B2 00 A0 FD | 	call	#popregs_
1e0e0                 | __system___basic_open_string_ret
1e0e0     2D 00 64 FD | 	ret
1e0e4                 | 
1e0e4                 | __system___basic_print_nl
1e0e4     0A 14 06 F6 | 	mov	arg02, #10
1e0e8     00 16 06 F6 | 	mov	arg03, #0
1e0ec     08 00 B0 FD | 	call	#__system___basic_print_char
1e0f0     01 FA 05 F6 | 	mov	result1, #1
1e0f4                 | __system___basic_print_nl_ret
1e0f4     2D 00 64 FD | 	ret
1e0f8                 | 
1e0f8                 | __system___basic_print_char
1e0f8     03 4A 05 F6 | 	mov	COUNT_, #3
1e0fc     A8 00 A0 FD | 	call	#pushregs_
1e100     0A 1F 02 F6 | 	mov	local01, arg02
1e104     50 4C B0 FD | 	call	#__system___gettxfunc
1e108     FD 20 0A F6 | 	mov	local02, result1 wz
1e10c     00 FA 05 A6 |  if_e	mov	result1, #0
1e110     30 00 90 AD |  if_e	jmp	#LR__2590
1e114     10 23 02 F6 | 	mov	local03, local02
1e118     13 20 46 F7 | 	zerox	local02, #19
1e11c     14 22 46 F0 | 	shr	local03, #20
1e120     02 22 66 F0 | 	shl	local03, #2
1e124     ED 22 02 F1 | 	add	local03, __methods__
1e128     11 23 02 FB | 	rdlong	local03, local03
1e12c     0F 13 02 F6 | 	mov	arg01, local01
1e130     F2 1E 02 F6 | 	mov	local01, objptr
1e134     10 E5 01 F6 | 	mov	objptr, local02
1e138     2D 22 62 FD | 	call	local03
1e13c     0F E5 01 F6 | 	mov	objptr, local01
1e140     01 FA 05 F6 | 	mov	result1, #1
1e144                 | LR__2590
1e144     A7 F0 03 F6 | 	mov	ptra, fp
1e148     B2 00 A0 FD | 	call	#popregs_
1e14c                 | __system___basic_print_char_ret
1e14c     2D 00 64 FD | 	ret
1e150                 | 
1e150                 | __system___basic_print_string
1e150     03 4A 05 F6 | 	mov	COUNT_, #3
1e154     A8 00 A0 FD | 	call	#pushregs_
1e158     0A 1F 02 F6 | 	mov	local01, arg02
1e15c     0B 21 02 F6 | 	mov	local02, arg03
1e160     F4 4B B0 FD | 	call	#__system___gettxfunc
1e164     FD 22 0A F6 | 	mov	local03, result1 wz
1e168     00 FA 05 A6 |  if_e	mov	result1, #0
1e16c     18 00 90 AD |  if_e	jmp	#LR__2600
1e170     00 1E 0E F2 | 	cmp	local01, #0 wz
1e174     00 FA 05 A6 |  if_e	mov	result1, #0
1e178     11 13 02 56 |  if_ne	mov	arg01, local03
1e17c     10 15 02 56 |  if_ne	mov	arg02, local02
1e180     0F 17 02 56 |  if_ne	mov	arg03, local01
1e184     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1e188                 | LR__2600
1e188     A7 F0 03 F6 | 	mov	ptra, fp
1e18c     B2 00 A0 FD | 	call	#popregs_
1e190                 | __system___basic_print_string_ret
1e190     2D 00 64 FD | 	ret
1e194                 | 
1e194                 | __system___basic_print_integer
1e194     04 4A 05 F6 | 	mov	COUNT_, #4
1e198     A8 00 A0 FD | 	call	#pushregs_
1e19c     0A 1F 02 F6 | 	mov	local01, arg02
1e1a0     0B 21 02 F6 | 	mov	local02, arg03
1e1a4     0C 23 02 F6 | 	mov	local03, arg04
1e1a8     AC 4B B0 FD | 	call	#__system___gettxfunc
1e1ac     FD 24 0A F6 | 	mov	local04, result1 wz
1e1b0     00 FA 05 A6 |  if_e	mov	result1, #0
1e1b4     12 13 02 56 |  if_ne	mov	arg01, local04
1e1b8     10 15 02 56 |  if_ne	mov	arg02, local02
1e1bc     0F 17 02 56 |  if_ne	mov	arg03, local01
1e1c0     11 19 02 56 |  if_ne	mov	arg04, local03
1e1c4     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1e1c8     A7 F0 03 F6 | 	mov	ptra, fp
1e1cc     B2 00 A0 FD | 	call	#popregs_
1e1d0                 | __system___basic_print_integer_ret
1e1d0     2D 00 64 FD | 	ret
1e1d4                 | 
1e1d4                 | __system___basic_print_unsigned
1e1d4     03 4A 05 F6 | 	mov	COUNT_, #3
1e1d8     A8 00 A0 FD | 	call	#pushregs_
1e1dc     0A 1F 02 F6 | 	mov	local01, arg02
1e1e0     0B 21 02 F6 | 	mov	local02, arg03
1e1e4     0C 23 02 F6 | 	mov	local03, arg04
1e1e8     6C 4B B0 FD | 	call	#__system___gettxfunc
1e1ec     FD 12 0A F6 | 	mov	arg01, result1 wz
1e1f0     00 FA 05 A6 |  if_e	mov	result1, #0
1e1f4     3A 20 26 54 |  if_ne	bith	local02, #58
1e1f8     10 15 02 56 |  if_ne	mov	arg02, local02
1e1fc     0F 17 02 56 |  if_ne	mov	arg03, local01
1e200     11 19 02 56 |  if_ne	mov	arg04, local03
1e204     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1e208     A7 F0 03 F6 | 	mov	ptra, fp
1e20c     B2 00 A0 FD | 	call	#popregs_
1e210                 | __system___basic_print_unsigned_ret
1e210     2D 00 64 FD | 	ret
1e214                 | 
1e214                 | __system___basic_get_char
1e214     03 4A 05 F6 | 	mov	COUNT_, #3
1e218     A8 00 A0 FD | 	call	#pushregs_
1e21c     7C 4B B0 FD | 	call	#__system___getrxfunc
1e220     FD 1E 0A F6 | 	mov	local01, result1 wz
1e224     01 FA 65 A6 |  if_e	neg	result1, #1
1e228     28 00 90 AD |  if_e	jmp	#LR__2610
1e22c     0F 21 02 F6 | 	mov	local02, local01
1e230     13 1E 46 F7 | 	zerox	local01, #19
1e234     14 20 46 F0 | 	shr	local02, #20
1e238     02 20 66 F0 | 	shl	local02, #2
1e23c     ED 20 02 F1 | 	add	local02, __methods__
1e240     10 21 02 FB | 	rdlong	local02, local02
1e244     F2 22 02 F6 | 	mov	local03, objptr
1e248     0F E5 01 F6 | 	mov	objptr, local01
1e24c     2D 20 62 FD | 	call	local02
1e250     11 E5 01 F6 | 	mov	objptr, local03
1e254                 | LR__2610
1e254     A7 F0 03 F6 | 	mov	ptra, fp
1e258     B2 00 A0 FD | 	call	#popregs_
1e25c                 | __system___basic_get_char_ret
1e25c     2D 00 64 FD | 	ret
1e260                 | 
1e260                 | __system___basic_get
1e260     04 4A 05 F6 | 	mov	COUNT_, #4
1e264     A8 00 A0 FD | 	call	#pushregs_
1e268     0D 1F 02 F6 | 	mov	local01, arg05
1e26c     0F 19 02 FD | 	qmul	arg04, local01
1e270     09 21 02 F6 | 	mov	local02, arg01
1e274     0B 23 02 F6 | 	mov	local03, arg03
1e278     00 14 0E F2 | 	cmp	arg02, #0 wz
1e27c     01 14 86 51 |  if_ne	sub	arg02, #1
1e280     10 13 02 56 |  if_ne	mov	arg01, local02
1e284     00 16 06 56 |  if_ne	mov	arg03, #0
1e288     18 24 62 FD | 	getqx	local04
1e28c     BC 41 B0 5D |  if_ne	call	#__system__lseek
1e290     11 15 02 F6 | 	mov	arg02, local03
1e294     12 17 02 F6 | 	mov	arg03, local04
1e298     10 13 02 F6 | 	mov	arg01, local02
1e29c     34 41 B0 FD | 	call	#__system__read
1e2a0     FD 24 02 F6 | 	mov	local04, result1
1e2a4     01 24 56 F2 | 	cmps	local04, #1 wc
1e2a8     10 00 90 CD |  if_b	jmp	#LR__2620
1e2ac     12 65 02 F6 | 	mov	muldiva_, local04
1e2b0     0F 67 02 F6 | 	mov	muldivb_, local01
1e2b4     BA 00 A0 FD | 	call	#divide_
1e2b8     33 25 02 F6 | 	mov	local04, muldivb_
1e2bc                 | LR__2620
1e2bc     12 FB 01 F6 | 	mov	result1, local04
1e2c0     A7 F0 03 F6 | 	mov	ptra, fp
1e2c4     B2 00 A0 FD | 	call	#popregs_
1e2c8                 | __system___basic_get_ret
1e2c8     2D 00 64 FD | 	ret
1e2cc                 | 
1e2cc                 | __system____lockio
1e2cc     0C 4B B0 FD | 	call	#__system___getiolock_0473
1e2d0     FD 12 02 F6 | 	mov	arg01, result1
1e2d4     74 F1 BF FD | 	call	#__system___lockmem
1e2d8     00 FA 05 F6 | 	mov	result1, #0
1e2dc                 | __system____lockio_ret
1e2dc     2D 00 64 FD | 	ret
1e2e0                 | 
1e2e0                 | __system____unlockio
1e2e0     F8 4A B0 FD | 	call	#__system___getiolock_0473
1e2e4     FD 00 68 FC | 	wrlong	#0, result1
1e2e8     00 FA 05 F6 | 	mov	result1, #0
1e2ec                 | __system____unlockio_ret
1e2ec     2D 00 64 FD | 	ret
1e2f0                 | 
1e2f0                 | __system___fmtchar
1e2f0     00 4A 05 F6 | 	mov	COUNT_, #0
1e2f4     A8 00 A0 FD | 	call	#pushregs_
1e2f8     10 F0 07 F1 | 	add	ptra, #16
1e2fc     04 4E 05 F1 | 	add	fp, #4
1e300     A7 12 62 FC | 	wrlong	arg01, fp
1e304     04 4E 05 F1 | 	add	fp, #4
1e308     A7 14 62 FC | 	wrlong	arg02, fp
1e30c     04 4E 05 F1 | 	add	fp, #4
1e310     A7 16 62 FC | 	wrlong	arg03, fp
1e314     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1e318     A7 16 62 FC | 	wrlong	arg03, fp
1e31c     08 4E 85 F1 | 	sub	fp, #8
1e320     A7 12 02 FB | 	rdlong	arg01, fp
1e324     04 4E 05 F1 | 	add	fp, #4
1e328     A7 14 02 FB | 	rdlong	arg02, fp
1e32c     04 4E 05 F1 | 	add	fp, #4
1e330     A7 16 02 F6 | 	mov	arg03, fp
1e334     0C 4E 85 F1 | 	sub	fp, #12
1e338     0C 00 B0 FD | 	call	#__system___fmtstr
1e33c     A7 F0 03 F6 | 	mov	ptra, fp
1e340     B2 00 A0 FD | 	call	#popregs_
1e344                 | __system___fmtchar_ret
1e344     2D 00 64 FD | 	ret
1e348                 | 
1e348                 | __system___fmtstr
1e348     09 4A 05 F6 | 	mov	COUNT_, #9
1e34c     A8 00 A0 FD | 	call	#pushregs_
1e350     09 1F 02 F6 | 	mov	local01, arg01
1e354     0A 21 02 F6 | 	mov	local02, arg02
1e358     0B 23 02 F6 | 	mov	local03, arg03
1e35c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1e360     11 13 02 F6 | 	mov	arg01, local03
1e364     09 25 02 F6 | 	mov	local04, arg01
1e368     97 06 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
1e36c                 | LR__2630
1e36c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e370     01 24 06 51 |  if_ne	add	local04, #1
1e374     F4 FF 9F 5D |  if_ne	jmp	#LR__2630
1e378                 | LR__2631
1e378     09 25 82 F1 | 	sub	local04, arg01
1e37c     00 18 0E F2 | 	cmp	arg04, #0 wz
1e380     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1e384     10 15 02 F6 | 	mov	arg02, local02
1e388     12 17 02 F6 | 	mov	arg03, local04
1e38c     0F 13 02 F6 | 	mov	arg01, local01
1e390     02 18 06 F6 | 	mov	arg04, #2
1e394     60 46 B0 FD | 	call	#__system___fmtpad
1e398     FD 26 02 F6 | 	mov	local05, result1
1e39c     00 26 56 F2 | 	cmps	local05, #0 wc
1e3a0     13 FB 01 C6 |  if_b	mov	result1, local05
1e3a4     80 00 90 CD |  if_b	jmp	#LR__2634
1e3a8     01 24 56 F2 | 	cmps	local04, #1 wc
1e3ac     50 00 90 CD |  if_b	jmp	#LR__2633
1e3b0     12 29 02 F6 | 	mov	local06, local04
1e3b4                 | LR__2632
1e3b4     0F 2B 02 F6 | 	mov	local07, local01
1e3b8     0F 2D 02 F6 | 	mov	local08, local01
1e3bc     13 2A 46 F7 | 	zerox	local07, #19
1e3c0     14 2C 46 F0 | 	shr	local08, #20
1e3c4     02 2C 66 F0 | 	shl	local08, #2
1e3c8     ED 2C 02 F1 | 	add	local08, __methods__
1e3cc     16 2D 02 FB | 	rdlong	local08, local08
1e3d0     11 13 C2 FA | 	rdbyte	arg01, local03
1e3d4     F2 2E 02 F6 | 	mov	local09, objptr
1e3d8     15 E5 01 F6 | 	mov	objptr, local07
1e3dc     01 22 06 F1 | 	add	local03, #1
1e3e0     2D 2C 62 FD | 	call	local08
1e3e4     17 E5 01 F6 | 	mov	objptr, local09
1e3e8     FD 2E 02 F6 | 	mov	local09, result1
1e3ec     00 2E 56 F2 | 	cmps	local09, #0 wc
1e3f0     17 FB 01 C6 |  if_b	mov	result1, local09
1e3f4     30 00 90 CD |  if_b	jmp	#LR__2634
1e3f8     17 27 02 F1 | 	add	local05, local09
1e3fc     ED 29 6E FB | 	djnz	local06, #LR__2632
1e400                 | LR__2633
1e400     10 15 02 F6 | 	mov	arg02, local02
1e404     12 17 02 F6 | 	mov	arg03, local04
1e408     0F 13 02 F6 | 	mov	arg01, local01
1e40c     01 18 06 F6 | 	mov	arg04, #1
1e410     E4 45 B0 FD | 	call	#__system___fmtpad
1e414     FD 2E 02 F6 | 	mov	local09, result1
1e418     00 2E 56 F2 | 	cmps	local09, #0 wc
1e41c     17 FB 01 C6 |  if_b	mov	result1, local09
1e420     17 27 02 31 |  if_ae	add	local05, local09
1e424     13 FB 01 36 |  if_ae	mov	result1, local05
1e428                 | LR__2634
1e428     A7 F0 03 F6 | 	mov	ptra, fp
1e42c     B2 00 A0 FD | 	call	#popregs_
1e430                 | __system___fmtstr_ret
1e430     2D 00 64 FD | 	ret
1e434                 | 
1e434                 | __system___fmtnum
1e434     0B 4A 05 F6 | 	mov	COUNT_, #11
1e438     A8 00 A0 FD | 	call	#pushregs_
1e43c     09 1F 02 F6 | 	mov	local01, arg01
1e440     0A 21 02 F6 | 	mov	local02, arg02
1e444     0B 23 02 F6 | 	mov	local03, arg03
1e448     0C 25 02 F6 | 	mov	local04, arg04
1e44c     F8 27 02 F6 | 	mov	local05, ptra
1e450     13 29 02 F6 | 	mov	local06, local05
1e454     00 2A 06 F6 | 	mov	local07, #0
1e458     10 2D 02 F6 | 	mov	local08, local02
1e45c     10 2C 46 F0 | 	shr	local08, #16
1e460     3F 2C 06 F5 | 	and	local08, #63
1e464     10 2F E2 F8 | 	getbyte	local09, local02, #0
1e468     10 31 02 F6 | 	mov	local10, local02
1e46c     1A 30 46 F0 | 	shr	local10, #26
1e470     03 30 06 F5 | 	and	local10, #3
1e474     18 33 02 F6 | 	mov	local11, local10
1e478     01 2C 56 F2 | 	cmps	local08, #1 wc
1e47c     44 F0 07 F1 | 	add	ptra, #68
1e480     01 2C 86 31 |  if_ae	sub	local08, #1
1e484     41 2E 56 F2 | 	cmps	local09, #65 wc
1e488     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1e48c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1e490     03 32 0E F2 | 	cmp	local11, #3 wz
1e494     00 32 06 A6 |  if_e	mov	local11, #0
1e498     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1e49c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1e4a0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1e4a4     00 32 0E F2 | 	cmp	local11, #0 wz
1e4a8     4C 00 90 AD |  if_e	jmp	#LR__2643
1e4ac     01 2A 06 F6 | 	mov	local07, #1
1e4b0     17 2D 0A F2 | 	cmp	local08, local09 wz
1e4b4     18 00 90 5D |  if_ne	jmp	#LR__2641
1e4b8     05 2C 6E FB | 	djnz	local08, #LR__2640
1e4bc     0F 13 02 F6 | 	mov	arg01, local01
1e4c0     10 15 02 F6 | 	mov	arg02, local02
1e4c4     23 16 06 F6 | 	mov	arg03, #35
1e4c8     24 FE BF FD | 	call	#__system___fmtchar
1e4cc     88 00 90 FD | 	jmp	#LR__2647
1e4d0                 | LR__2640
1e4d0                 | LR__2641
1e4d0     02 32 0E F2 | 	cmp	local11, #2 wz
1e4d4     14 31 02 A6 |  if_e	mov	local10, local06
1e4d8     01 28 06 A1 |  if_e	add	local06, #1
1e4dc     18 41 48 AC |  if_e	wrbyte	#32, local10
1e4e0     14 00 90 AD |  if_e	jmp	#LR__2642
1e4e4     04 32 0E F2 | 	cmp	local11, #4 wz
1e4e8     14 5B 48 AC |  if_e	wrbyte	#45, local06
1e4ec     01 28 06 A1 |  if_e	add	local06, #1
1e4f0     14 57 48 5C |  if_ne	wrbyte	#43, local06
1e4f4     01 28 06 51 |  if_ne	add	local06, #1
1e4f8                 | LR__2642
1e4f8                 | LR__2643
1e4f8     14 13 02 F6 | 	mov	arg01, local06
1e4fc     11 15 02 F6 | 	mov	arg02, local03
1e500     12 17 02 F6 | 	mov	arg03, local04
1e504     16 19 02 F6 | 	mov	arg04, local08
1e508     00 1A 06 F6 | 	mov	arg05, #0
1e50c     1D 20 2E F4 | 	testbn	local02, #29 wz
1e510     01 1A 06 56 |  if_ne	mov	arg05, #1
1e514     A8 45 B0 FD | 	call	#__system___uitoa
1e518     FD 2A 02 F1 | 	add	local07, result1
1e51c     17 2B 5A F2 | 	cmps	local07, local09 wcz
1e520     24 00 90 ED |  if_be	jmp	#LR__2646
1e524     97 0E 48 FB | 	callpa	#(@LR__2645-@LR__2644)>>2,fcache_load_ptr_
1e528                 | LR__2644
1e528     17 31 02 F6 | 	mov	local10, local09
1e52c     01 30 56 F2 | 	cmps	local10, #1 wc
1e530     01 2E 86 F1 | 	sub	local09, #1
1e534     14 31 02 36 |  if_ae	mov	local10, local06
1e538     01 28 06 31 |  if_ae	add	local06, #1
1e53c     18 47 48 3C |  if_ae	wrbyte	#35, local10
1e540     E4 FF 9F 3D |  if_ae	jmp	#LR__2644
1e544                 | LR__2645
1e544     14 01 48 FC | 	wrbyte	#0, local06
1e548                 | LR__2646
1e548     0F 13 02 F6 | 	mov	arg01, local01
1e54c     10 15 02 F6 | 	mov	arg02, local02
1e550     13 17 02 F6 | 	mov	arg03, local05
1e554     F0 FD BF FD | 	call	#__system___fmtstr
1e558                 | LR__2647
1e558     A7 F0 03 F6 | 	mov	ptra, fp
1e55c     B2 00 A0 FD | 	call	#popregs_
1e560                 | __system___fmtnum_ret
1e560     2D 00 64 FD | 	ret
1e564                 | 
1e564                 | __system___fmtfloat
1e564     10 4A 05 F6 | 	mov	COUNT_, #16
1e568     A8 00 A0 FD | 	call	#pushregs_
1e56c     24 F1 07 F1 | 	add	ptra, #292
1e570     04 4E 05 F1 | 	add	fp, #4
1e574     A7 12 62 FC | 	wrlong	arg01, fp
1e578     04 4E 05 F1 | 	add	fp, #4
1e57c     A7 14 62 FC | 	wrlong	arg02, fp
1e580     04 4E 05 F1 | 	add	fp, #4
1e584     A7 16 62 FC | 	wrlong	arg03, fp
1e588     04 4E 05 F1 | 	add	fp, #4
1e58c     A7 18 62 FC | 	wrlong	arg04, fp
1e590     0C 4E 05 F1 | 	add	fp, #12
1e594     A7 14 68 FC | 	wrlong	#10, fp
1e598     08 4E 05 F1 | 	add	fp, #8
1e59c     A7 00 68 FC | 	wrlong	#0, fp
1e5a0     08 4E 05 F1 | 	add	fp, #8
1e5a4     A7 00 68 FC | 	wrlong	#0, fp
1e5a8     08 4E 05 F1 | 	add	fp, #8
1e5ac     A7 00 68 FC | 	wrlong	#0, fp
1e5b0     04 4E 05 F1 | 	add	fp, #4
1e5b4     A7 04 68 FC | 	wrlong	#2, fp
1e5b8     04 4E 05 F1 | 	add	fp, #4
1e5bc     A7 00 68 FC | 	wrlong	#0, fp
1e5c0     04 4E 05 F1 | 	add	fp, #4
1e5c4     A7 00 68 FC | 	wrlong	#0, fp
1e5c8     04 4E 05 F1 | 	add	fp, #4
1e5cc     A7 00 68 FC | 	wrlong	#0, fp
1e5d0     04 4E 05 F1 | 	add	fp, #4
1e5d4     A7 00 68 FC | 	wrlong	#0, fp
1e5d8     18 4E 05 F1 | 	add	fp, #24
1e5dc     A7 00 68 FC | 	wrlong	#0, fp
1e5e0     68 4E 05 F1 | 	add	fp, #104
1e5e4     A7 1E 02 F6 | 	mov	local01, fp
1e5e8     08 4E 85 F1 | 	sub	fp, #8
1e5ec     A7 1E 62 FC | 	wrlong	local01, fp
1e5f0     04 4E 05 F1 | 	add	fp, #4
1e5f4     A7 1E 62 FC | 	wrlong	local01, fp
1e5f8     BC 4E 85 F1 | 	sub	fp, #188
1e5fc     A7 1E 02 FB | 	rdlong	local01, fp
1e600     10 1E 46 F0 | 	shr	local01, #16
1e604     3F 1E 06 F5 | 	and	local01, #63
1e608     B0 4E 05 F1 | 	add	fp, #176
1e60c     A7 1E 62 FC | 	wrlong	local01, fp
1e610     B0 4E 85 F1 | 	sub	fp, #176
1e614     A7 1E 02 FB | 	rdlong	local01, fp
1e618     1C 1E 46 F0 | 	shr	local01, #28
1e61c     01 1E 06 F5 | 	and	local01, #1
1e620     08 4F 05 F1 | 	add	fp, #264
1e624     A7 1E 62 FC | 	wrlong	local01, fp
1e628     58 4E 85 F1 | 	sub	fp, #88
1e62c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e630     B8 4E 85 F1 | 	sub	fp, #184
1e634     3C 00 90 5D |  if_ne	jmp	#LR__2651
1e638     10 4E 05 F1 | 	add	fp, #16
1e63c     A7 1E 02 FB | 	rdlong	local01, fp
1e640     10 4E 85 F1 | 	sub	fp, #16
1e644     61 1E 0E F2 | 	cmp	local01, #97 wz
1e648     18 00 90 5D |  if_ne	jmp	#LR__2650
1e64c     B8 4E 05 F1 | 	add	fp, #184
1e650     A7 1A 68 FC | 	wrlong	#13, fp
1e654     84 4E 85 F1 | 	sub	fp, #132
1e658     A7 02 68 FC | 	wrlong	#1, fp
1e65c     34 4E 85 F1 | 	sub	fp, #52
1e660     24 00 90 FD | 	jmp	#LR__2652
1e664                 | LR__2650
1e664     B8 4E 05 F1 | 	add	fp, #184
1e668     A7 0C 68 FC | 	wrlong	#6, fp
1e66c     B8 4E 85 F1 | 	sub	fp, #184
1e670     14 00 90 FD | 	jmp	#LR__2652
1e674                 | LR__2651
1e674     B8 4E 05 F1 | 	add	fp, #184
1e678     A7 1E 02 FB | 	rdlong	local01, fp
1e67c     01 1E 86 F1 | 	sub	local01, #1
1e680     A7 1E 62 FC | 	wrlong	local01, fp
1e684     B8 4E 85 F1 | 	sub	fp, #184
1e688                 | LR__2652
1e688     08 4E 05 F1 | 	add	fp, #8
1e68c     A7 1E 02 FB | 	rdlong	local01, fp
1e690     16 1E 46 F0 | 	shr	local01, #22
1e694     03 1E 06 F5 | 	and	local01, #3
1e698     04 4F 05 F1 | 	add	fp, #260
1e69c     A7 1E 62 FC | 	wrlong	local01, fp
1e6a0     04 4F 85 F1 | 	sub	fp, #260
1e6a4     A7 1E 02 FB | 	rdlong	local01, fp
1e6a8     1D 1E 46 F0 | 	shr	local01, #29
1e6ac     01 1E 06 F5 | 	and	local01, #1
1e6b0     B4 4E 05 F1 | 	add	fp, #180
1e6b4     A7 1E 62 FC | 	wrlong	local01, fp
1e6b8     B4 4E 85 F1 | 	sub	fp, #180
1e6bc     A7 1E 02 FB | 	rdlong	local01, fp
1e6c0     0F 1F EA F8 | 	getbyte	local01, local01, #1
1e6c4     60 4E 05 F1 | 	add	fp, #96
1e6c8     A7 1E 62 FC | 	wrlong	local01, fp
1e6cc     60 4E 85 F1 | 	sub	fp, #96
1e6d0     A7 1E 02 FB | 	rdlong	local01, fp
1e6d4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1e6d8     64 4E 05 F1 | 	add	fp, #100
1e6dc     A7 1E 62 FC | 	wrlong	local01, fp
1e6e0     00 1E 06 F6 | 	mov	local01, #0
1e6e4     5C 4E 85 F1 | 	sub	fp, #92
1e6e8     A7 1A 02 FB | 	rdlong	arg05, fp
1e6ec     65 1A 0E F2 | 	cmp	arg05, #101 wz
1e6f0     01 1E 06 A6 |  if_e	mov	local01, #1
1e6f4     14 4E 05 F1 | 	add	fp, #20
1e6f8     A7 1E 62 FC | 	wrlong	local01, fp
1e6fc     98 4E 05 F1 | 	add	fp, #152
1e700     A7 20 0A FB | 	rdlong	local02, fp wz
1e704     45 1E 06 56 |  if_ne	mov	local01, #69
1e708     65 1E 06 A6 |  if_e	mov	local01, #101
1e70c     8C 4E 85 F1 | 	sub	fp, #140
1e710     A7 1E 62 FC | 	wrlong	local01, fp
1e714     20 4E 85 F1 | 	sub	fp, #32
1e718     A7 1E 02 FB | 	rdlong	local01, fp
1e71c     10 4E 85 F1 | 	sub	fp, #16
1e720     61 1E 0E F2 | 	cmp	local01, #97 wz
1e724     4C 00 90 5D |  if_ne	jmp	#LR__2653
1e728     24 4E 05 F1 | 	add	fp, #36
1e72c     A7 02 68 FC | 	wrlong	#1, fp
1e730     98 4E 05 F1 | 	add	fp, #152
1e734     A7 20 0A FB | 	rdlong	local02, fp wz
1e738     50 1E 06 56 |  if_ne	mov	local01, #80
1e73c     70 1E 06 A6 |  if_e	mov	local01, #112
1e740     8C 4E 85 F1 | 	sub	fp, #140
1e744     A7 1E 62 FC | 	wrlong	local01, fp
1e748     14 4E 85 F1 | 	sub	fp, #20
1e74c     A7 04 68 FC | 	wrlong	#2, fp
1e750     1C 4E 05 F1 | 	add	fp, #28
1e754     A7 02 68 FC | 	wrlong	#1, fp
1e758     84 4E 05 F1 | 	add	fp, #132
1e75c     A7 20 0A FB | 	rdlong	local02, fp wz
1e760     58 1E 06 56 |  if_ne	mov	local01, #88
1e764     78 1E 06 A6 |  if_e	mov	local01, #120
1e768     7C 4E 85 F1 | 	sub	fp, #124
1e76c     A7 1E 62 FC | 	wrlong	local01, fp
1e770     40 4E 85 F1 | 	sub	fp, #64
1e774                 | LR__2653
1e774     10 4E 05 F1 | 	add	fp, #16
1e778     A7 1E 02 FB | 	rdlong	local01, fp
1e77c     10 4E 85 F1 | 	sub	fp, #16
1e780     23 1E 0E F2 | 	cmp	local01, #35 wz
1e784     3C 00 90 5D |  if_ne	jmp	#LR__2656
1e788     48 4E 05 F1 | 	add	fp, #72
1e78c     A7 02 68 FC | 	wrlong	#1, fp
1e790     C8 4E 05 F1 | 	add	fp, #200
1e794     A7 1E 0A FB | 	rdlong	local01, fp wz
1e798     10 4F 85 F1 | 	sub	fp, #272
1e79c     18 00 90 AD |  if_e	jmp	#LR__2654
1e7a0     10 4E 05 F1 | 	add	fp, #16
1e7a4     A7 CC 68 FC | 	wrlong	#102, fp
1e7a8     00 4F 05 F1 | 	add	fp, #256
1e7ac     A7 00 68 FC | 	wrlong	#0, fp
1e7b0     10 4F 85 F1 | 	sub	fp, #272
1e7b4     0C 00 90 FD | 	jmp	#LR__2655
1e7b8                 | LR__2654
1e7b8     10 4F 05 F1 | 	add	fp, #272
1e7bc     A7 02 68 FC | 	wrlong	#1, fp
1e7c0     10 4F 85 F1 | 	sub	fp, #272
1e7c4                 | LR__2655
1e7c4                 | LR__2656
1e7c4     08 4E 05 F1 | 	add	fp, #8
1e7c8     A7 1E 02 FB | 	rdlong	local01, fp
1e7cc     1A 1E 46 F0 | 	shr	local01, #26
1e7d0     03 1E 06 F5 | 	and	local01, #3
1e7d4     5C 4E 05 F1 | 	add	fp, #92
1e7d8     A7 1E 62 FC | 	wrlong	local01, fp
1e7dc     58 4E 85 F1 | 	sub	fp, #88
1e7e0     A7 FA 01 FB | 	rdlong	result1, fp
1e7e4     0C 4E 85 F1 | 	sub	fp, #12
1e7e8     1F FA 4D F0 | 	shr	result1, #31 wz
1e7ec     20 00 90 AD |  if_e	jmp	#LR__2657
1e7f0     2C 4E 05 F1 | 	add	fp, #44
1e7f4     A7 5A 68 FC | 	wrlong	#45, fp
1e7f8     20 4E 85 F1 | 	sub	fp, #32
1e7fc     A7 FA 01 FB | 	rdlong	result1, fp
1e800     1F FA E5 F4 | 	bitnot	result1, #31
1e804     A7 FA 61 FC | 	wrlong	result1, fp
1e808     0C 4E 85 F1 | 	sub	fp, #12
1e80c     3C 00 90 FD | 	jmp	#LR__2659
1e810                 | LR__2657
1e810     64 4E 05 F1 | 	add	fp, #100
1e814     A7 1E 02 FB | 	rdlong	local01, fp
1e818     64 4E 85 F1 | 	sub	fp, #100
1e81c     01 1E 0E F2 | 	cmp	local01, #1 wz
1e820     2C 4E 05 A1 |  if_e	add	fp, #44
1e824     A7 56 68 AC |  if_e	wrlong	#43, fp
1e828     2C 4E 85 A1 |  if_e	sub	fp, #44
1e82c     1C 00 90 AD |  if_e	jmp	#LR__2658
1e830     64 4E 05 F1 | 	add	fp, #100
1e834     A7 1E 02 FB | 	rdlong	local01, fp
1e838     64 4E 85 F1 | 	sub	fp, #100
1e83c     02 1E 0E F2 | 	cmp	local01, #2 wz
1e840     2C 4E 05 A1 |  if_e	add	fp, #44
1e844     A7 40 68 AC |  if_e	wrlong	#32, fp
1e848     2C 4E 85 A1 |  if_e	sub	fp, #44
1e84c                 | LR__2658
1e84c                 | LR__2659
1e84c     08 4E 05 F1 | 	add	fp, #8
1e850     A7 1E 02 FB | 	rdlong	local01, fp
1e854     18 1E 46 F0 | 	shr	local01, #24
1e858     03 1E 06 F5 | 	and	local01, #3
1e85c     3C 4E 05 F1 | 	add	fp, #60
1e860     A7 1E 62 FC | 	wrlong	local01, fp
1e864     00 1E 06 F6 | 	mov	local01, #0
1e868     18 4E 85 F1 | 	sub	fp, #24
1e86c     A7 22 0A FB | 	rdlong	local03, fp wz
1e870     2C 4E 85 F1 | 	sub	fp, #44
1e874     18 00 90 5D |  if_ne	jmp	#LR__2660
1e878     1C 4E 05 F1 | 	add	fp, #28
1e87c     A7 24 02 FB | 	rdlong	local04, fp
1e880     1C 4E 85 F1 | 	sub	fp, #28
1e884     12 27 02 F6 | 	mov	local05, local04
1e888     0A 26 0E F2 | 	cmp	local05, #10 wz
1e88c     04 00 90 AD |  if_e	jmp	#LR__2661
1e890                 | LR__2660
1e890     01 1E 66 F5 | 	xor	local01, #1
1e894                 | LR__2661
1e894     3C 4E 05 F1 | 	add	fp, #60
1e898     A7 1E 62 FC | 	wrlong	local01, fp
1e89c     3C 4E 85 F1 | 	sub	fp, #60
1e8a0     00 1E 0E F2 | 	cmp	local01, #0 wz
1e8a4     0C 01 90 AD |  if_e	jmp	#LR__2663
1e8a8     44 4E 05 F1 | 	add	fp, #68
1e8ac     A7 26 02 FB | 	rdlong	local05, fp
1e8b0     44 4E 85 F1 | 	sub	fp, #68
1e8b4     13 23 02 F6 | 	mov	local03, local05
1e8b8     02 22 0E F2 | 	cmp	local03, #2 wz
1e8bc     F4 00 90 5D |  if_ne	jmp	#LR__2663
1e8c0     0C 4F 05 F1 | 	add	fp, #268
1e8c4     A7 28 02 FB | 	rdlong	local06, fp
1e8c8     0C 4F 85 F1 | 	sub	fp, #268
1e8cc     14 25 02 F6 | 	mov	local04, local06
1e8d0     02 24 0E F2 | 	cmp	local04, #2 wz
1e8d4     DC 00 90 AD |  if_e	jmp	#LR__2663
1e8d8     C0 4E 05 F1 | 	add	fp, #192
1e8dc     A7 12 02 FB | 	rdlong	arg01, fp
1e8e0     94 4E 85 F1 | 	sub	fp, #148
1e8e4     A7 14 02 FB | 	rdlong	arg02, fp
1e8e8     14 4E 05 F1 | 	add	fp, #20
1e8ec     A7 16 02 FB | 	rdlong	arg03, fp
1e8f0     40 4E 85 F1 | 	sub	fp, #64
1e8f4     30 44 B0 FD | 	call	#__system__emitsign_0433
1e8f8     14 4F 05 F1 | 	add	fp, #276
1e8fc     A7 FA 61 FC | 	wrlong	result1, fp
1e900     14 4F 85 F1 | 	sub	fp, #276
1e904     00 FA 55 F2 | 	cmps	result1, #0 wc
1e908     14 4F 05 C1 |  if_b	add	fp, #276
1e90c     A7 FA 01 CB |  if_b	rdlong	result1, fp
1e910     14 4F 85 C1 |  if_b	sub	fp, #276
1e914     6C 0B 90 CD |  if_b	jmp	#LR__2713
1e918     C0 4E 05 F1 | 	add	fp, #192
1e91c     A7 1E 02 FB | 	rdlong	local01, fp
1e920     54 4E 05 F1 | 	add	fp, #84
1e924     A7 26 02 FB | 	rdlong	local05, fp
1e928     13 23 02 F6 | 	mov	local03, local05
1e92c     13 1F 02 F1 | 	add	local01, local05
1e930     54 4E 85 F1 | 	sub	fp, #84
1e934     A7 1E 62 FC | 	wrlong	local01, fp
1e938     58 4E 85 F1 | 	sub	fp, #88
1e93c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e940     68 4E 85 F1 | 	sub	fp, #104
1e944     60 00 90 AD |  if_e	jmp	#LR__2662
1e948     68 4E 05 F1 | 	add	fp, #104
1e94c     A7 1E 02 FB | 	rdlong	local01, fp
1e950     AC 4E 05 F1 | 	add	fp, #172
1e954     A7 22 02 FB | 	rdlong	local03, fp
1e958     11 1F 82 F1 | 	sub	local01, local03
1e95c     AC 4E 85 F1 | 	sub	fp, #172
1e960     A7 1E 62 FC | 	wrlong	local01, fp
1e964     68 4E 85 F1 | 	sub	fp, #104
1e968     00 1E 56 F2 | 	cmps	local01, #0 wc
1e96c     68 4E 05 C1 |  if_b	add	fp, #104
1e970     A7 00 68 CC |  if_b	wrlong	#0, fp
1e974     68 4E 85 C1 |  if_b	sub	fp, #104
1e978     08 4E 05 F1 | 	add	fp, #8
1e97c     A7 1E 02 FB | 	rdlong	local01, fp
1e980     E8 1E 06 F4 | 	bitl	local01, #232
1e984     A7 1E 62 FC | 	wrlong	local01, fp
1e988     60 4E 05 F1 | 	add	fp, #96
1e98c     A7 26 02 FB | 	rdlong	local05, fp
1e990     13 23 02 F6 | 	mov	local03, local05
1e994     08 22 66 F0 | 	shl	local03, #8
1e998     11 1F 42 F5 | 	or	local01, local03
1e99c     60 4E 85 F1 | 	sub	fp, #96
1e9a0     A7 1E 62 FC | 	wrlong	local01, fp
1e9a4     08 4E 85 F1 | 	sub	fp, #8
1e9a8                 | LR__2662
1e9a8     3C 4E 05 F1 | 	add	fp, #60
1e9ac     A7 00 68 FC | 	wrlong	#0, fp
1e9b0     3C 4E 85 F1 | 	sub	fp, #60
1e9b4                 | LR__2663
1e9b4     0C 4E 05 F1 | 	add	fp, #12
1e9b8     A7 12 02 FB | 	rdlong	arg01, fp
1e9bc     0C 4E 85 F1 | 	sub	fp, #12
1e9c0     04 1F B0 FD | 	call	#__system____builtin_ilogb
1e9c4     FF FF 3F FF 
1e9c8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1e9cc     50 00 90 5D |  if_ne	jmp	#LR__2665
1e9d0     2C 4E 05 F1 | 	add	fp, #44
1e9d4     A7 1E 0A FB | 	rdlong	local01, fp wz
1e9d8     2C 4E 85 F1 | 	sub	fp, #44
1e9dc     24 00 90 AD |  if_e	jmp	#LR__2664
1e9e0     C0 4E 05 F1 | 	add	fp, #192
1e9e4     A7 20 02 FB | 	rdlong	local02, fp
1e9e8     10 23 02 F6 | 	mov	local03, local02
1e9ec     01 22 06 F1 | 	add	local03, #1
1e9f0     A7 22 62 FC | 	wrlong	local03, fp
1e9f4     94 4E 85 F1 | 	sub	fp, #148
1e9f8     A7 24 02 FB | 	rdlong	local04, fp
1e9fc     2C 4E 85 F1 | 	sub	fp, #44
1ea00     10 25 42 FC | 	wrbyte	local04, local02
1ea04                 | LR__2664
1ea04     C0 4E 05 F1 | 	add	fp, #192
1ea08     A7 12 02 FB | 	rdlong	arg01, fp
1ea0c     C0 4E 85 F1 | 	sub	fp, #192
1ea10     64 01 00 FF 
1ea14     FA 15 06 F6 | 	mov	arg02, ##@LR__4601
1ea18     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1ea1c     A4 08 90 FD | 	jmp	#LR__2701
1ea20                 | LR__2665
1ea20     0C 4E 05 F1 | 	add	fp, #12
1ea24     A7 20 02 FB | 	rdlong	local02, fp
1ea28     0C 4E 85 F1 | 	sub	fp, #12
1ea2c     10 13 02 F6 | 	mov	arg01, local02
1ea30     94 1E B0 FD | 	call	#__system____builtin_ilogb
1ea34     00 00 40 FF 
1ea38     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1ea3c     50 00 90 5D |  if_ne	jmp	#LR__2667
1ea40     2C 4E 05 F1 | 	add	fp, #44
1ea44     A7 1E 0A FB | 	rdlong	local01, fp wz
1ea48     2C 4E 85 F1 | 	sub	fp, #44
1ea4c     24 00 90 AD |  if_e	jmp	#LR__2666
1ea50     C0 4E 05 F1 | 	add	fp, #192
1ea54     A7 20 02 FB | 	rdlong	local02, fp
1ea58     10 23 02 F6 | 	mov	local03, local02
1ea5c     01 22 06 F1 | 	add	local03, #1
1ea60     A7 22 62 FC | 	wrlong	local03, fp
1ea64     94 4E 85 F1 | 	sub	fp, #148
1ea68     A7 24 02 FB | 	rdlong	local04, fp
1ea6c     2C 4E 85 F1 | 	sub	fp, #44
1ea70     10 25 42 FC | 	wrbyte	local04, local02
1ea74                 | LR__2666
1ea74     C0 4E 05 F1 | 	add	fp, #192
1ea78     A7 12 02 FB | 	rdlong	arg01, fp
1ea7c     C0 4E 85 F1 | 	sub	fp, #192
1ea80     64 01 00 FF 
1ea84     FE 15 06 F6 | 	mov	arg02, ##@LR__4602
1ea88     74 E9 BF FD | 	call	#__system____builtin_strcpy
1ea8c     34 08 90 FD | 	jmp	#LR__2701
1ea90                 | LR__2667
1ea90     10 4E 05 F1 | 	add	fp, #16
1ea94     A7 1E 02 FB | 	rdlong	local01, fp
1ea98     10 4E 85 F1 | 	sub	fp, #16
1ea9c     67 1E 0E F2 | 	cmp	local01, #103 wz
1eaa0     10 4E 05 51 |  if_ne	add	fp, #16
1eaa4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1eaa8     10 4E 85 51 |  if_ne	sub	fp, #16
1eaac     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1eab0     94 01 90 5D |  if_ne	jmp	#LR__2672
1eab4     0C 4E 05 F1 | 	add	fp, #12
1eab8     A7 12 02 FB | 	rdlong	arg01, fp
1eabc     08 4E 05 F1 | 	add	fp, #8
1eac0     A7 14 02 F6 | 	mov	arg02, fp
1eac4     0C 4E 05 F1 | 	add	fp, #12
1eac8     A7 16 02 F6 | 	mov	arg03, fp
1eacc     98 4E 05 F1 | 	add	fp, #152
1ead0     A7 18 02 FB | 	rdlong	arg04, fp
1ead4     9C 4E 85 F1 | 	sub	fp, #156
1ead8     A7 1A 02 FB | 	rdlong	arg05, fp
1eadc     1C 4E 85 F1 | 	sub	fp, #28
1eae0     50 40 B0 FD | 	call	#__system__disassemble_0431
1eae4     10 4E 05 F1 | 	add	fp, #16
1eae8     A7 1E 02 FB | 	rdlong	local01, fp
1eaec     10 4E 85 F1 | 	sub	fp, #16
1eaf0     23 1E 0E F2 | 	cmp	local01, #35 wz
1eaf4     A0 00 90 5D |  if_ne	jmp	#LR__2669
1eaf8     20 4E 05 F1 | 	add	fp, #32
1eafc     A7 1E 02 FB | 	rdlong	local01, fp
1eb00     98 4E 05 F1 | 	add	fp, #152
1eb04     A7 22 02 FB | 	rdlong	local03, fp
1eb08     B8 4E 85 F1 | 	sub	fp, #184
1eb0c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1eb10     24 4E 05 11 |  if_a	add	fp, #36
1eb14     A7 02 68 1C |  if_a	wrlong	#1, fp
1eb18     24 4E 85 11 |  if_a	sub	fp, #36
1eb1c     A4 01 90 1D |  if_a	jmp	#LR__2675
1eb20     20 4E 05 F1 | 	add	fp, #32
1eb24     A7 1E 02 FB | 	rdlong	local01, fp
1eb28     20 4E 85 F1 | 	sub	fp, #32
1eb2c     00 1E 56 F2 | 	cmps	local01, #0 wc
1eb30     2C 00 90 3D |  if_ae	jmp	#LR__2668
1eb34     B8 4E 05 F1 | 	add	fp, #184
1eb38     A7 1E 02 FB | 	rdlong	local01, fp
1eb3c     0F 1F 62 F6 | 	neg	local01, local01
1eb40     98 4E 85 F1 | 	sub	fp, #152
1eb44     A7 22 02 FB | 	rdlong	local03, fp
1eb48     20 4E 85 F1 | 	sub	fp, #32
1eb4c     0F 23 5A F2 | 	cmps	local03, local01 wcz
1eb50     24 4E 05 E1 |  if_be	add	fp, #36
1eb54     A7 02 68 EC |  if_be	wrlong	#1, fp
1eb58     24 4E 85 E1 |  if_be	sub	fp, #36
1eb5c     64 01 90 FD | 	jmp	#LR__2675
1eb60                 | LR__2668
1eb60     20 4E 05 F1 | 	add	fp, #32
1eb64     A7 1E 02 FB | 	rdlong	local01, fp
1eb68     20 4E 85 F1 | 	sub	fp, #32
1eb6c     01 1E 56 F2 | 	cmps	local01, #1 wc
1eb70     50 01 90 CD |  if_b	jmp	#LR__2675
1eb74     B8 4E 05 F1 | 	add	fp, #184
1eb78     A7 1E 02 FB | 	rdlong	local01, fp
1eb7c     98 4E 85 F1 | 	sub	fp, #152
1eb80     A7 22 02 FB | 	rdlong	local03, fp
1eb84     11 1F 82 F1 | 	sub	local01, local03
1eb88     98 4E 05 F1 | 	add	fp, #152
1eb8c     A7 1E 62 FC | 	wrlong	local01, fp
1eb90     B8 4E 85 F1 | 	sub	fp, #184
1eb94     2C 01 90 FD | 	jmp	#LR__2675
1eb98                 | LR__2669
1eb98     00 1E 06 F6 | 	mov	local01, #0
1eb9c     08 4E 05 F1 | 	add	fp, #8
1eba0     A7 20 02 FB | 	rdlong	local02, fp
1eba4     1C 20 46 F0 | 	shr	local02, #28
1eba8     01 20 0E F5 | 	and	local02, #1 wz
1ebac     01 1E 06 A6 |  if_e	mov	local01, #1
1ebb0     2C 4E 05 F1 | 	add	fp, #44
1ebb4     A7 1E 62 FC | 	wrlong	local01, fp
1ebb8     14 4E 85 F1 | 	sub	fp, #20
1ebbc     A7 1E 02 FB | 	rdlong	local01, fp
1ebc0     98 4E 05 F1 | 	add	fp, #152
1ebc4     A7 22 02 FB | 	rdlong	local03, fp
1ebc8     B8 4E 85 F1 | 	sub	fp, #184
1ebcc     11 1F 52 F2 | 	cmps	local01, local03 wc
1ebd0     18 00 90 3D |  if_ae	jmp	#LR__2670
1ebd4     20 4E 05 F1 | 	add	fp, #32
1ebd8     A7 24 02 FB | 	rdlong	local04, fp
1ebdc     20 4E 85 F1 | 	sub	fp, #32
1ebe0     FF FF 7F FF 
1ebe4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1ebe8     10 00 90 3D |  if_ae	jmp	#LR__2671
1ebec                 | LR__2670
1ebec     24 4E 05 F1 | 	add	fp, #36
1ebf0     A7 02 68 FC | 	wrlong	#1, fp
1ebf4     24 4E 85 F1 | 	sub	fp, #36
1ebf8     C8 00 90 FD | 	jmp	#LR__2675
1ebfc                 | LR__2671
1ebfc     B8 4E 05 F1 | 	add	fp, #184
1ec00     A7 24 02 FB | 	rdlong	local04, fp
1ec04     98 4E 85 F1 | 	sub	fp, #152
1ec08     A7 22 02 FB | 	rdlong	local03, fp
1ec0c     11 25 82 F1 | 	sub	local04, local03
1ec10     98 4E 05 F1 | 	add	fp, #152
1ec14     A7 24 62 FC | 	wrlong	local04, fp
1ec18     AC 4E 85 F1 | 	sub	fp, #172
1ec1c     A7 12 02 FB | 	rdlong	arg01, fp
1ec20     08 4E 05 F1 | 	add	fp, #8
1ec24     A7 14 02 F6 | 	mov	arg02, fp
1ec28     0C 4E 05 F1 | 	add	fp, #12
1ec2c     A7 16 02 F6 | 	mov	arg03, fp
1ec30     12 19 62 F6 | 	neg	arg04, local04
1ec34     04 4E 85 F1 | 	sub	fp, #4
1ec38     A7 1A 02 FB | 	rdlong	arg05, fp
1ec3c     1C 4E 85 F1 | 	sub	fp, #28
1ec40     F0 3E B0 FD | 	call	#__system__disassemble_0431
1ec44     7C 00 90 FD | 	jmp	#LR__2675
1ec48                 | LR__2672
1ec48     24 4E 05 F1 | 	add	fp, #36
1ec4c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ec50     24 4E 85 F1 | 	sub	fp, #36
1ec54     34 00 90 AD |  if_e	jmp	#LR__2673
1ec58     0C 4E 05 F1 | 	add	fp, #12
1ec5c     A7 12 02 FB | 	rdlong	arg01, fp
1ec60     08 4E 05 F1 | 	add	fp, #8
1ec64     A7 14 02 F6 | 	mov	arg02, fp
1ec68     0C 4E 05 F1 | 	add	fp, #12
1ec6c     A7 16 02 F6 | 	mov	arg03, fp
1ec70     98 4E 05 F1 | 	add	fp, #152
1ec74     A7 18 02 FB | 	rdlong	arg04, fp
1ec78     9C 4E 85 F1 | 	sub	fp, #156
1ec7c     A7 1A 02 FB | 	rdlong	arg05, fp
1ec80     1C 4E 85 F1 | 	sub	fp, #28
1ec84     AC 3E B0 FD | 	call	#__system__disassemble_0431
1ec88     38 00 90 FD | 	jmp	#LR__2674
1ec8c                 | LR__2673
1ec8c     0C 4E 05 F1 | 	add	fp, #12
1ec90     A7 12 02 FB | 	rdlong	arg01, fp
1ec94     08 4E 05 F1 | 	add	fp, #8
1ec98     A7 14 02 F6 | 	mov	arg02, fp
1ec9c     0C 4E 05 F1 | 	add	fp, #12
1eca0     A7 16 02 F6 | 	mov	arg03, fp
1eca4     98 4E 05 F1 | 	add	fp, #152
1eca8     A7 24 02 FB | 	rdlong	local04, fp
1ecac     01 24 06 F1 | 	add	local04, #1
1ecb0     12 19 62 F6 | 	neg	arg04, local04
1ecb4     9C 4E 85 F1 | 	sub	fp, #156
1ecb8     A7 1A 02 FB | 	rdlong	arg05, fp
1ecbc     1C 4E 85 F1 | 	sub	fp, #28
1ecc0     70 3E B0 FD | 	call	#__system__disassemble_0431
1ecc4                 | LR__2674
1ecc4                 | LR__2675
1ecc4     1C 4E 05 F1 | 	add	fp, #28
1ecc8     A7 1E 02 FB | 	rdlong	local01, fp
1eccc     1C 4E 85 F1 | 	sub	fp, #28
1ecd0     02 1E 0E F2 | 	cmp	local01, #2 wz
1ecd4     4C 00 90 5D |  if_ne	jmp	#LR__2678
1ecd8     1C 4E 05 F1 | 	add	fp, #28
1ecdc     A7 20 68 FC | 	wrlong	#16, fp
1ece0     1C 4E 85 F1 | 	sub	fp, #28
1ece4                 | LR__2676
1ece4     14 4E 05 F1 | 	add	fp, #20
1ece8     A7 1E 0A FB | 	rdlong	local01, fp wz
1ecec     14 4E 85 F1 | 	sub	fp, #20
1ecf0     30 00 90 AD |  if_e	jmp	#LR__2677
1ecf4     14 4E 05 F1 | 	add	fp, #20
1ecf8     A7 22 02 FB | 	rdlong	local03, fp
1ecfc     14 4E 85 F1 | 	sub	fp, #20
1ed00     00 80 00 FF 
1ed04     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1ed08     18 00 90 3D |  if_ae	jmp	#LR__2677
1ed0c     14 4E 05 F1 | 	add	fp, #20
1ed10     A7 1E 02 FB | 	rdlong	local01, fp
1ed14     01 1E 66 F0 | 	shl	local01, #1
1ed18     A7 1E 62 FC | 	wrlong	local01, fp
1ed1c     14 4E 85 F1 | 	sub	fp, #20
1ed20     C0 FF 9F FD | 	jmp	#LR__2676
1ed24                 | LR__2677
1ed24                 | LR__2678
1ed24     70 4E 05 F1 | 	add	fp, #112
1ed28     A7 12 02 F6 | 	mov	arg01, fp
1ed2c     5C 4E 85 F1 | 	sub	fp, #92
1ed30     A7 14 02 FB | 	rdlong	arg02, fp
1ed34     08 4E 05 F1 | 	add	fp, #8
1ed38     A7 16 02 FB | 	rdlong	arg03, fp
1ed3c     A0 4E 05 F1 | 	add	fp, #160
1ed40     A7 1A 02 FB | 	rdlong	arg05, fp
1ed44     BC 4E 85 F1 | 	sub	fp, #188
1ed48     01 18 06 F6 | 	mov	arg04, #1
1ed4c     70 3D B0 FD | 	call	#__system___uitoa
1ed50     58 4E 05 F1 | 	add	fp, #88
1ed54     A7 FA 61 FC | 	wrlong	result1, fp
1ed58     38 4E 85 F1 | 	sub	fp, #56
1ed5c     A7 1E 02 FB | 	rdlong	local01, fp
1ed60     20 4E 85 F1 | 	sub	fp, #32
1ed64     00 1E 56 F2 | 	cmps	local01, #0 wc
1ed68     50 00 90 3D |  if_ae	jmp	#LR__2679
1ed6c     60 4E 05 F1 | 	add	fp, #96
1ed70     A7 5A 68 FC | 	wrlong	#45, fp
1ed74     50 4E 05 F1 | 	add	fp, #80
1ed78     A7 12 02 F6 | 	mov	arg01, fp
1ed7c     90 4E 85 F1 | 	sub	fp, #144
1ed80     A7 22 02 FB | 	rdlong	local03, fp
1ed84     11 15 62 F6 | 	neg	arg02, local03
1ed88     18 4E 05 F1 | 	add	fp, #24
1ed8c     A7 18 02 FB | 	rdlong	arg04, fp
1ed90     84 4E 05 F1 | 	add	fp, #132
1ed94     A7 28 02 FB | 	rdlong	local06, fp
1ed98     BC 4E 85 F1 | 	sub	fp, #188
1ed9c     14 25 02 F6 | 	mov	local04, local06
1eda0     0A 16 06 F6 | 	mov	arg03, #10
1eda4     12 1B 02 F6 | 	mov	arg05, local04
1eda8     14 3D B0 FD | 	call	#__system___uitoa
1edac     5C 4E 05 F1 | 	add	fp, #92
1edb0     A7 FA 61 FC | 	wrlong	result1, fp
1edb4     5C 4E 85 F1 | 	sub	fp, #92
1edb8     48 00 90 FD | 	jmp	#LR__2680
1edbc                 | LR__2679
1edbc     60 4E 05 F1 | 	add	fp, #96
1edc0     A7 56 68 FC | 	wrlong	#43, fp
1edc4     50 4E 05 F1 | 	add	fp, #80
1edc8     A7 12 02 F6 | 	mov	arg01, fp
1edcc     90 4E 85 F1 | 	sub	fp, #144
1edd0     A7 14 02 FB | 	rdlong	arg02, fp
1edd4     18 4E 05 F1 | 	add	fp, #24
1edd8     A7 18 02 FB | 	rdlong	arg04, fp
1eddc     84 4E 05 F1 | 	add	fp, #132
1ede0     A7 28 02 FB | 	rdlong	local06, fp
1ede4     BC 4E 85 F1 | 	sub	fp, #188
1ede8     14 25 02 F6 | 	mov	local04, local06
1edec     0A 16 06 F6 | 	mov	arg03, #10
1edf0     12 1B 02 F6 | 	mov	arg05, local04
1edf4     C8 3C B0 FD | 	call	#__system___uitoa
1edf8     5C 4E 05 F1 | 	add	fp, #92
1edfc     A7 FA 61 FC | 	wrlong	result1, fp
1ee00     5C 4E 85 F1 | 	sub	fp, #92
1ee04                 | LR__2680
1ee04     24 4E 05 F1 | 	add	fp, #36
1ee08     A7 1E 0A FB | 	rdlong	local01, fp wz
1ee0c     24 4E 85 F1 | 	sub	fp, #36
1ee10     2C 00 90 AD |  if_e	jmp	#LR__2681
1ee14     50 4E 05 F1 | 	add	fp, #80
1ee18     A7 00 68 FC | 	wrlong	#0, fp
1ee1c     04 4E 85 F1 | 	sub	fp, #4
1ee20     A7 00 68 FC | 	wrlong	#0, fp
1ee24     6C 4E 05 F1 | 	add	fp, #108
1ee28     A7 1E 02 FB | 	rdlong	local01, fp
1ee2c     01 1E 06 F1 | 	add	local01, #1
1ee30     64 4E 85 F1 | 	sub	fp, #100
1ee34     A7 1E 62 FC | 	wrlong	local01, fp
1ee38     54 4E 85 F1 | 	sub	fp, #84
1ee3c     88 00 90 FD | 	jmp	#LR__2684
1ee40                 | LR__2681
1ee40     20 4E 05 F1 | 	add	fp, #32
1ee44     A7 1E 02 FB | 	rdlong	local01, fp
1ee48     20 4E 85 F1 | 	sub	fp, #32
1ee4c     00 1E 56 F2 | 	cmps	local01, #0 wc
1ee50     40 00 90 3D |  if_ae	jmp	#LR__2682
1ee54     20 4E 05 F1 | 	add	fp, #32
1ee58     A7 20 02 FB | 	rdlong	local02, fp
1ee5c     30 4E 05 F1 | 	add	fp, #48
1ee60     A7 20 62 FC | 	wrlong	local02, fp
1ee64     04 4E 85 F1 | 	sub	fp, #4
1ee68     A7 20 62 FC | 	wrlong	local02, fp
1ee6c     2C 4E 85 F1 | 	sub	fp, #44
1ee70     A7 1E 02 FB | 	rdlong	local01, fp
1ee74     98 4E 05 F1 | 	add	fp, #152
1ee78     A7 22 02 FB | 	rdlong	local03, fp
1ee7c     11 1F 02 F1 | 	add	local01, local03
1ee80     01 1E 06 F1 | 	add	local01, #1
1ee84     64 4E 85 F1 | 	sub	fp, #100
1ee88     A7 1E 62 FC | 	wrlong	local01, fp
1ee8c     54 4E 85 F1 | 	sub	fp, #84
1ee90     34 00 90 FD | 	jmp	#LR__2683
1ee94                 | LR__2682
1ee94     4C 4E 05 F1 | 	add	fp, #76
1ee98     A7 00 68 FC | 	wrlong	#0, fp
1ee9c     2C 4E 85 F1 | 	sub	fp, #44
1eea0     A7 1E 02 FB | 	rdlong	local01, fp
1eea4     30 4E 05 F1 | 	add	fp, #48
1eea8     A7 1E 62 FC | 	wrlong	local01, fp
1eeac     68 4E 05 F1 | 	add	fp, #104
1eeb0     A7 22 02 FB | 	rdlong	local03, fp
1eeb4     11 1F 02 F1 | 	add	local01, local03
1eeb8     01 1E 06 F1 | 	add	local01, #1
1eebc     64 4E 85 F1 | 	sub	fp, #100
1eec0     A7 1E 62 FC | 	wrlong	local01, fp
1eec4     54 4E 85 F1 | 	sub	fp, #84
1eec8                 | LR__2683
1eec8                 | LR__2684
1eec8     54 4E 05 F1 | 	add	fp, #84
1eecc     A7 1E 02 FB | 	rdlong	local01, fp
1eed0     08 4E 85 F1 | 	sub	fp, #8
1eed4     A7 22 02 FB | 	rdlong	local03, fp
1eed8     11 1F 82 F1 | 	sub	local01, local03
1eedc     01 1E 06 F1 | 	add	local01, #1
1eee0     24 4E 85 F1 | 	sub	fp, #36
1eee4     A7 1E 62 FC | 	wrlong	local01, fp
1eee8     04 4E 05 F1 | 	add	fp, #4
1eeec     A7 1E 0A FB | 	rdlong	local01, fp wz
1eef0     2C 4E 85 F1 | 	sub	fp, #44
1eef4     28 4E 05 51 |  if_ne	add	fp, #40
1eef8     A7 22 02 5B |  if_ne	rdlong	local03, fp
1eefc     01 22 06 51 |  if_ne	add	local03, #1
1ef00     A7 22 62 5C |  if_ne	wrlong	local03, fp
1ef04     28 4E 85 51 |  if_ne	sub	fp, #40
1ef08     1C 4E 05 F1 | 	add	fp, #28
1ef0c     A7 1E 02 FB | 	rdlong	local01, fp
1ef10     1C 4E 85 F1 | 	sub	fp, #28
1ef14     10 1E 0E F2 | 	cmp	local01, #16 wz
1ef18     28 4E 05 A1 |  if_e	add	fp, #40
1ef1c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ef20     02 1E 06 A1 |  if_e	add	local01, #2
1ef24     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ef28     28 4E 85 A1 |  if_e	sub	fp, #40
1ef2c     24 4E 05 F1 | 	add	fp, #36
1ef30     A7 1E 0A FB | 	rdlong	local01, fp wz
1ef34     24 4E 85 F1 | 	sub	fp, #36
1ef38     28 00 90 AD |  if_e	jmp	#LR__2685
1ef3c     28 4E 05 F1 | 	add	fp, #40
1ef40     A7 1E 02 FB | 	rdlong	local01, fp
1ef44     02 22 06 F6 | 	mov	local03, #2
1ef48     34 4E 05 F1 | 	add	fp, #52
1ef4c     A7 26 02 FB | 	rdlong	local05, fp
1ef50     13 23 02 F1 | 	add	local03, local05
1ef54     11 1F 02 F1 | 	add	local01, local03
1ef58     34 4E 85 F1 | 	sub	fp, #52
1ef5c     A7 1E 62 FC | 	wrlong	local01, fp
1ef60     28 4E 85 F1 | 	sub	fp, #40
1ef64                 | LR__2685
1ef64     28 4E 05 F1 | 	add	fp, #40
1ef68     A7 1E 02 FB | 	rdlong	local01, fp
1ef6c     28 4E 85 F1 | 	sub	fp, #40
1ef70     41 1E 56 F2 | 	cmps	local01, #65 wc
1ef74     01 FA 65 36 |  if_ae	neg	result1, #1
1ef78     08 05 90 3D |  if_ae	jmp	#LR__2713
1ef7c     3C 4E 05 F1 | 	add	fp, #60
1ef80     A7 1E 0A FB | 	rdlong	local01, fp wz
1ef84     3C 4E 85 F1 | 	sub	fp, #60
1ef88     60 00 90 AD |  if_e	jmp	#LR__2686
1ef8c     C0 4E 05 F1 | 	add	fp, #192
1ef90     A7 12 02 FB | 	rdlong	arg01, fp
1ef94     94 4E 85 F1 | 	sub	fp, #148
1ef98     A7 14 02 FB | 	rdlong	arg02, fp
1ef9c     14 4E 05 F1 | 	add	fp, #20
1efa0     A7 16 02 FB | 	rdlong	arg03, fp
1efa4     40 4E 85 F1 | 	sub	fp, #64
1efa8     7C 3D B0 FD | 	call	#__system__emitsign_0433
1efac     18 4F 05 F1 | 	add	fp, #280
1efb0     A7 FA 61 FC | 	wrlong	result1, fp
1efb4     18 4F 85 F1 | 	sub	fp, #280
1efb8     00 FA 55 F2 | 	cmps	result1, #0 wc
1efbc     18 4F 05 C1 |  if_b	add	fp, #280
1efc0     A7 FA 01 CB |  if_b	rdlong	result1, fp
1efc4     18 4F 85 C1 |  if_b	sub	fp, #280
1efc8     B8 04 90 CD |  if_b	jmp	#LR__2713
1efcc     C0 4E 05 F1 | 	add	fp, #192
1efd0     A7 1E 02 FB | 	rdlong	local01, fp
1efd4     58 4E 05 F1 | 	add	fp, #88
1efd8     A7 22 02 FB | 	rdlong	local03, fp
1efdc     11 1F 02 F1 | 	add	local01, local03
1efe0     58 4E 85 F1 | 	sub	fp, #88
1efe4     A7 1E 62 FC | 	wrlong	local01, fp
1efe8     C0 4E 85 F1 | 	sub	fp, #192
1efec                 | LR__2686
1efec     4C 4E 05 F1 | 	add	fp, #76
1eff0     A7 1E 02 FB | 	rdlong	local01, fp
1eff4     34 4E 85 F1 | 	sub	fp, #52
1eff8     A7 1E 62 FC | 	wrlong	local01, fp
1effc     18 4E 85 F1 | 	sub	fp, #24
1f000     97 9E 48 FB | 	callpa	#(@LR__2692-@LR__2687)>>2,fcache_load_ptr_
1f004                 | LR__2687
1f004     18 4E 05 F1 | 	add	fp, #24
1f008     A7 20 02 FB | 	rdlong	local02, fp
1f00c     3C 4E 05 F1 | 	add	fp, #60
1f010     A7 26 02 FB | 	rdlong	local05, fp
1f014     54 4E 85 F1 | 	sub	fp, #84
1f018     13 21 52 F2 | 	cmps	local02, local05 wc
1f01c     20 01 90 3D |  if_ae	jmp	#LR__2693
1f020     18 4E 05 F1 | 	add	fp, #24
1f024     A7 28 02 FB | 	rdlong	local06, fp
1f028     18 4E 85 F1 | 	sub	fp, #24
1f02c     00 28 56 F2 | 	cmps	local06, #0 wc
1f030     58 00 90 CD |  if_b	jmp	#LR__2688
1f034     18 4E 05 F1 | 	add	fp, #24
1f038     A7 28 02 FB | 	rdlong	local06, fp
1f03c     40 4E 05 F1 | 	add	fp, #64
1f040     A7 2A 02 FB | 	rdlong	local07, fp
1f044     58 4E 85 F1 | 	sub	fp, #88
1f048     15 29 52 F2 | 	cmps	local06, local07 wc
1f04c     3C 00 90 3D |  if_ae	jmp	#LR__2688
1f050     C0 4E 05 F1 | 	add	fp, #192
1f054     A7 2C 02 FB | 	rdlong	local08, fp
1f058     16 2B 02 F6 | 	mov	local07, local08
1f05c     01 2A 06 F1 | 	add	local07, #1
1f060     A7 2A 62 FC | 	wrlong	local07, fp
1f064     A8 4E 85 F1 | 	sub	fp, #168
1f068     A7 2A 02 FB | 	rdlong	local07, fp
1f06c     15 2F 02 F6 | 	mov	local09, local07
1f070     58 4E 05 F1 | 	add	fp, #88
1f074     A7 30 02 F6 | 	mov	local10, fp
1f078     A7 2E 02 F1 | 	add	local09, fp
1f07c     17 33 C2 FA | 	rdbyte	local11, local09
1f080     16 33 42 FC | 	wrbyte	local11, local08
1f084     70 4E 85 F1 | 	sub	fp, #112
1f088     20 00 90 FD | 	jmp	#LR__2689
1f08c                 | LR__2688
1f08c     C0 4E 05 F1 | 	add	fp, #192
1f090     A7 2C 02 FB | 	rdlong	local08, fp
1f094     16 2F 02 F6 | 	mov	local09, local08
1f098     01 2E 06 F1 | 	add	local09, #1
1f09c     A7 2E 62 FC | 	wrlong	local09, fp
1f0a0     C0 4E 85 F1 | 	sub	fp, #192
1f0a4     30 2E 06 F6 | 	mov	local09, #48
1f0a8     16 61 48 FC | 	wrbyte	#48, local08
1f0ac                 | LR__2689
1f0ac     18 4E 05 F1 | 	add	fp, #24
1f0b0     A7 28 02 FB | 	rdlong	local06, fp
1f0b4     38 4E 05 F1 | 	add	fp, #56
1f0b8     A7 34 02 FB | 	rdlong	local12, fp
1f0bc     50 4E 85 F1 | 	sub	fp, #80
1f0c0     1A 29 0A F2 | 	cmp	local06, local12 wz
1f0c4     5C 00 90 5D |  if_ne	jmp	#LR__2691
1f0c8     10 4F 05 F1 | 	add	fp, #272
1f0cc     A7 2A 02 FB | 	rdlong	local07, fp
1f0d0     10 4F 85 F1 | 	sub	fp, #272
1f0d4     15 2F 0A F6 | 	mov	local09, local07 wz
1f0d8     28 00 90 5D |  if_ne	jmp	#LR__2690
1f0dc     54 4E 05 F1 | 	add	fp, #84
1f0e0     A7 32 02 FB | 	rdlong	local11, fp
1f0e4     19 31 02 F6 | 	mov	local10, local11
1f0e8     01 30 86 F1 | 	sub	local10, #1
1f0ec     3C 4E 85 F1 | 	sub	fp, #60
1f0f0     A7 36 02 FB | 	rdlong	local13, fp
1f0f4     18 4E 85 F1 | 	sub	fp, #24
1f0f8     1B 39 02 F6 | 	mov	local14, local13
1f0fc     18 39 52 F2 | 	cmps	local14, local10 wc
1f100     20 00 90 3D |  if_ae	jmp	#LR__2691
1f104                 | LR__2690
1f104     C0 4E 05 F1 | 	add	fp, #192
1f108     A7 2C 02 FB | 	rdlong	local08, fp
1f10c     16 35 02 F6 | 	mov	local12, local08
1f110     01 34 06 F1 | 	add	local12, #1
1f114     A7 34 62 FC | 	wrlong	local12, fp
1f118     C0 4E 85 F1 | 	sub	fp, #192
1f11c     2E 2E 06 F6 | 	mov	local09, #46
1f120     16 5D 48 FC | 	wrbyte	#46, local08
1f124                 | LR__2691
1f124     18 4E 05 F1 | 	add	fp, #24
1f128     A7 3A 02 FB | 	rdlong	local15, fp
1f12c     1D 35 02 F6 | 	mov	local12, local15
1f130     01 34 06 F1 | 	add	local12, #1
1f134     A7 34 62 FC | 	wrlong	local12, fp
1f138     18 4E 85 F1 | 	sub	fp, #24
1f13c     C4 FE 9F FD | 	jmp	#LR__2687
1f140                 | LR__2692
1f140                 | LR__2693
1f140     34 4E 05 F1 | 	add	fp, #52
1f144     A7 1E 0A FB | 	rdlong	local01, fp wz
1f148     34 4E 85 F1 | 	sub	fp, #52
1f14c     A0 00 90 AD |  if_e	jmp	#LR__2697
1f150     C0 4E 05 F1 | 	add	fp, #192
1f154     A7 1E 02 FB | 	rdlong	local01, fp
1f158     01 1E 86 F1 | 	sub	local01, #1
1f15c     A7 1E 62 FC | 	wrlong	local01, fp
1f160     C0 4E 85 F1 | 	sub	fp, #192
1f164     97 26 48 FB | 	callpa	#(@LR__2695-@LR__2694)>>2,fcache_load_ptr_
1f168                 | LR__2694
1f168     C0 4E 05 F1 | 	add	fp, #192
1f16c     A7 1E 02 FB | 	rdlong	local01, fp
1f170     04 4E 05 F1 | 	add	fp, #4
1f174     A7 22 02 FB | 	rdlong	local03, fp
1f178     C4 4E 85 F1 | 	sub	fp, #196
1f17c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1f180     30 00 90 ED |  if_be	jmp	#LR__2696
1f184     C0 4E 05 F1 | 	add	fp, #192
1f188     A7 28 02 FB | 	rdlong	local06, fp
1f18c     C0 4E 85 F1 | 	sub	fp, #192
1f190     14 25 C2 FA | 	rdbyte	local04, local06
1f194     30 24 0E F2 | 	cmp	local04, #48 wz
1f198     18 00 90 5D |  if_ne	jmp	#LR__2696
1f19c     C0 4E 05 F1 | 	add	fp, #192
1f1a0     A7 1E 02 FB | 	rdlong	local01, fp
1f1a4     01 1E 86 F1 | 	sub	local01, #1
1f1a8     A7 1E 62 FC | 	wrlong	local01, fp
1f1ac     C0 4E 85 F1 | 	sub	fp, #192
1f1b0     B4 FF 9F FD | 	jmp	#LR__2694
1f1b4                 | LR__2695
1f1b4                 | LR__2696
1f1b4     C0 4E 05 F1 | 	add	fp, #192
1f1b8     A7 20 02 FB | 	rdlong	local02, fp
1f1bc     C0 4E 85 F1 | 	sub	fp, #192
1f1c0     10 1F C2 FA | 	rdbyte	local01, local02
1f1c4     2E 1E 0E F2 | 	cmp	local01, #46 wz
1f1c8     C0 4E 05 A1 |  if_e	add	fp, #192
1f1cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1f1d0     01 1E 86 A1 |  if_e	sub	local01, #1
1f1d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1f1d8     C0 4E 85 A1 |  if_e	sub	fp, #192
1f1dc     C0 4E 05 F1 | 	add	fp, #192
1f1e0     A7 22 02 FB | 	rdlong	local03, fp
1f1e4     01 22 06 F1 | 	add	local03, #1
1f1e8     A7 22 62 FC | 	wrlong	local03, fp
1f1ec     C0 4E 85 F1 | 	sub	fp, #192
1f1f0                 | LR__2697
1f1f0     24 4E 05 F1 | 	add	fp, #36
1f1f4     A7 1E 0A FB | 	rdlong	local01, fp wz
1f1f8     24 4E 85 F1 | 	sub	fp, #36
1f1fc     B4 00 90 AD |  if_e	jmp	#LR__2700
1f200     C0 4E 05 F1 | 	add	fp, #192
1f204     A7 20 02 FB | 	rdlong	local02, fp
1f208     10 23 02 F6 | 	mov	local03, local02
1f20c     01 22 06 F1 | 	add	local03, #1
1f210     A7 22 62 FC | 	wrlong	local03, fp
1f214     90 4E 85 F1 | 	sub	fp, #144
1f218     A7 24 02 FB | 	rdlong	local04, fp
1f21c     10 25 42 FC | 	wrbyte	local04, local02
1f220     90 4E 05 F1 | 	add	fp, #144
1f224     A7 20 02 FB | 	rdlong	local02, fp
1f228     10 23 02 F6 | 	mov	local03, local02
1f22c     01 22 06 F1 | 	add	local03, #1
1f230     A7 22 62 FC | 	wrlong	local03, fp
1f234     60 4E 85 F1 | 	sub	fp, #96
1f238     A7 24 02 FB | 	rdlong	local04, fp
1f23c     10 25 42 FC | 	wrbyte	local04, local02
1f240     48 4E 85 F1 | 	sub	fp, #72
1f244     A7 00 68 FC | 	wrlong	#0, fp
1f248     18 4E 85 F1 | 	sub	fp, #24
1f24c                 | LR__2698
1f24c     18 4E 05 F1 | 	add	fp, #24
1f250     A7 20 02 FB | 	rdlong	local02, fp
1f254     44 4E 05 F1 | 	add	fp, #68
1f258     A7 26 02 FB | 	rdlong	local05, fp
1f25c     5C 4E 85 F1 | 	sub	fp, #92
1f260     13 21 52 F2 | 	cmps	local02, local05 wc
1f264     4C 00 90 3D |  if_ae	jmp	#LR__2699
1f268     C0 4E 05 F1 | 	add	fp, #192
1f26c     A7 2C 02 FB | 	rdlong	local08, fp
1f270     16 35 02 F6 | 	mov	local12, local08
1f274     01 34 06 F1 | 	add	local12, #1
1f278     A7 34 62 FC | 	wrlong	local12, fp
1f27c     A8 4E 85 F1 | 	sub	fp, #168
1f280     A7 2A 02 FB | 	rdlong	local07, fp
1f284     15 2F 02 F6 | 	mov	local09, local07
1f288     98 4E 05 F1 | 	add	fp, #152
1f28c     A7 30 02 F6 | 	mov	local10, fp
1f290     A7 2E 02 F1 | 	add	local09, fp
1f294     17 33 C2 FA | 	rdbyte	local11, local09
1f298     16 33 42 FC | 	wrbyte	local11, local08
1f29c     98 4E 85 F1 | 	sub	fp, #152
1f2a0     A7 34 02 FB | 	rdlong	local12, fp
1f2a4     01 34 06 F1 | 	add	local12, #1
1f2a8     A7 34 62 FC | 	wrlong	local12, fp
1f2ac     18 4E 85 F1 | 	sub	fp, #24
1f2b0     98 FF 9F FD | 	jmp	#LR__2698
1f2b4                 | LR__2699
1f2b4                 | LR__2700
1f2b4     C0 4E 05 F1 | 	add	fp, #192
1f2b8     A7 1E 02 FB | 	rdlong	local01, fp
1f2bc     C0 4E 85 F1 | 	sub	fp, #192
1f2c0     0F 01 48 FC | 	wrbyte	#0, local01
1f2c4                 | LR__2701
1f2c4     6C 4E 05 F1 | 	add	fp, #108
1f2c8     A7 1E 0A FB | 	rdlong	local01, fp wz
1f2cc     6C 4E 85 F1 | 	sub	fp, #108
1f2d0     90 01 90 AD |  if_e	jmp	#LR__2712
1f2d4     48 4E 05 F1 | 	add	fp, #72
1f2d8     A7 22 0A FB | 	rdlong	local03, fp wz
1f2dc     48 4E 85 F1 | 	sub	fp, #72
1f2e0     80 01 90 AD |  if_e	jmp	#LR__2712
1f2e4     C4 4E 05 F1 | 	add	fp, #196
1f2e8     A7 12 02 FB | 	rdlong	arg01, fp
1f2ec     C4 4E 85 F1 | 	sub	fp, #196
1f2f0     09 3D 02 F6 | 	mov	local16, arg01
1f2f4     97 06 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
1f2f8                 | LR__2702
1f2f8     1E FB C9 FA | 	rdbyte	result1, local16 wz
1f2fc     01 3C 06 51 |  if_ne	add	local16, #1
1f300     F4 FF 9F 5D |  if_ne	jmp	#LR__2702
1f304                 | LR__2703
1f304     09 3D 82 F1 | 	sub	local16, arg01
1f308     1E 25 02 F6 | 	mov	local04, local16
1f30c     6C 4E 05 F1 | 	add	fp, #108
1f310     A7 28 02 FB | 	rdlong	local06, fp
1f314     6C 4E 85 F1 | 	sub	fp, #108
1f318     14 25 5A F2 | 	cmps	local04, local06 wcz
1f31c     44 01 90 ED |  if_be	jmp	#LR__2712
1f320     C4 4E 05 F1 | 	add	fp, #196
1f324     A7 1E 02 FB | 	rdlong	local01, fp
1f328     5C 4E 05 F1 | 	add	fp, #92
1f32c     A7 1E 62 FC | 	wrlong	local01, fp
1f330     FC 4E 85 F1 | 	sub	fp, #252
1f334     A7 1E 0A FB | 	rdlong	local01, fp wz
1f338     24 4E 85 F1 | 	sub	fp, #36
1f33c     20 00 90 AD |  if_e	jmp	#LR__2704
1f340     B8 4E 05 F1 | 	add	fp, #184
1f344     A7 00 68 FC | 	wrlong	#0, fp
1f348     4C 4E 85 F1 | 	sub	fp, #76
1f34c     A7 1E 02 FB | 	rdlong	local01, fp
1f350     B0 4E 05 F1 | 	add	fp, #176
1f354     A7 1E 62 FC | 	wrlong	local01, fp
1f358     1C 4F 85 F1 | 	sub	fp, #284
1f35c     24 00 90 FD | 	jmp	#LR__2705
1f360                 | LR__2704
1f360     6C 4E 05 F1 | 	add	fp, #108
1f364     A7 1E 02 FB | 	rdlong	local01, fp
1f368     01 1E 86 F1 | 	sub	local01, #1
1f36c     4C 4E 05 F1 | 	add	fp, #76
1f370     A7 22 02 FB | 	rdlong	local03, fp
1f374     11 1F 82 F1 | 	sub	local01, local03
1f378     64 4E 05 F1 | 	add	fp, #100
1f37c     A7 1E 62 FC | 	wrlong	local01, fp
1f380     1C 4F 85 F1 | 	sub	fp, #284
1f384                 | LR__2705
1f384     97 20 48 FB | 	callpa	#(@LR__2707-@LR__2706)>>2,fcache_load_ptr_
1f388                 | LR__2706
1f388     1C 4F 05 F1 | 	add	fp, #284
1f38c     A7 1E 0A FB | 	rdlong	local01, fp wz
1f390     1C 4F 85 F1 | 	sub	fp, #284
1f394     30 00 90 AD |  if_e	jmp	#LR__2708
1f398     20 4F 05 F1 | 	add	fp, #288
1f39c     A7 20 02 FB | 	rdlong	local02, fp
1f3a0     10 23 02 F6 | 	mov	local03, local02
1f3a4     01 22 06 F1 | 	add	local03, #1
1f3a8     A7 22 62 FC | 	wrlong	local03, fp
1f3ac     10 55 48 FC | 	wrbyte	#42, local02
1f3b0     04 4E 85 F1 | 	sub	fp, #4
1f3b4     A7 1E 02 FB | 	rdlong	local01, fp
1f3b8     01 1E 86 F1 | 	sub	local01, #1
1f3bc     A7 1E 62 FC | 	wrlong	local01, fp
1f3c0     1C 4F 85 F1 | 	sub	fp, #284
1f3c4     C0 FF 9F FD | 	jmp	#LR__2706
1f3c8                 | LR__2707
1f3c8                 | LR__2708
1f3c8     B8 4E 05 F1 | 	add	fp, #184
1f3cc     A7 1E 0A FB | 	rdlong	local01, fp wz
1f3d0     B8 4E 85 F1 | 	sub	fp, #184
1f3d4     70 00 90 AD |  if_e	jmp	#LR__2711
1f3d8     20 4F 05 F1 | 	add	fp, #288
1f3dc     A7 20 02 FB | 	rdlong	local02, fp
1f3e0     10 23 02 F6 | 	mov	local03, local02
1f3e4     01 22 06 F1 | 	add	local03, #1
1f3e8     A7 22 62 FC | 	wrlong	local03, fp
1f3ec     10 5D 48 FC | 	wrbyte	#46, local02
1f3f0     04 4E 85 F1 | 	sub	fp, #4
1f3f4     A7 00 68 FC | 	wrlong	#0, fp
1f3f8     1C 4F 85 F1 | 	sub	fp, #284
1f3fc                 | LR__2709
1f3fc     1C 4F 05 F1 | 	add	fp, #284
1f400     A7 20 02 FB | 	rdlong	local02, fp
1f404     64 4E 85 F1 | 	sub	fp, #100
1f408     A7 26 02 FB | 	rdlong	local05, fp
1f40c     B8 4E 85 F1 | 	sub	fp, #184
1f410     13 21 52 F2 | 	cmps	local02, local05 wc
1f414     30 00 90 3D |  if_ae	jmp	#LR__2710
1f418     20 4F 05 F1 | 	add	fp, #288
1f41c     A7 2C 02 FB | 	rdlong	local08, fp
1f420     16 35 02 F6 | 	mov	local12, local08
1f424     01 34 06 F1 | 	add	local12, #1
1f428     A7 34 62 FC | 	wrlong	local12, fp
1f42c     16 55 48 FC | 	wrbyte	#42, local08
1f430     04 4E 85 F1 | 	sub	fp, #4
1f434     A7 34 02 FB | 	rdlong	local12, fp
1f438     01 34 06 F1 | 	add	local12, #1
1f43c     A7 34 62 FC | 	wrlong	local12, fp
1f440     1C 4F 85 F1 | 	sub	fp, #284
1f444     B4 FF 9F FD | 	jmp	#LR__2709
1f448                 | LR__2710
1f448                 | LR__2711
1f448     20 4F 05 F1 | 	add	fp, #288
1f44c     A7 20 02 FB | 	rdlong	local02, fp
1f450     10 23 02 F6 | 	mov	local03, local02
1f454     01 22 06 F1 | 	add	local03, #1
1f458     A7 22 62 FC | 	wrlong	local03, fp
1f45c     20 4F 85 F1 | 	sub	fp, #288
1f460     10 01 48 FC | 	wrbyte	#0, local02
1f464                 | LR__2712
1f464     04 4E 05 F1 | 	add	fp, #4
1f468     A7 12 02 FB | 	rdlong	arg01, fp
1f46c     04 4E 05 F1 | 	add	fp, #4
1f470     A7 14 02 FB | 	rdlong	arg02, fp
1f474     BC 4E 05 F1 | 	add	fp, #188
1f478     A7 16 02 FB | 	rdlong	arg03, fp
1f47c     C4 4E 85 F1 | 	sub	fp, #196
1f480     C4 EE BF FD | 	call	#__system___fmtstr
1f484                 | LR__2713
1f484     A7 F0 03 F6 | 	mov	ptra, fp
1f488     B2 00 A0 FD | 	call	#popregs_
1f48c                 | __system___fmtfloat_ret
1f48c     2D 00 64 FD | 	ret
1f490                 | 
1f490                 | __system__Left_S
1f490     04 4A 05 F6 | 	mov	COUNT_, #4
1f494     A8 00 A0 FD | 	call	#pushregs_
1f498     09 1F 02 F6 | 	mov	local01, arg01
1f49c     0A 21 02 F6 | 	mov	local02, arg02
1f4a0     01 20 56 F2 | 	cmps	local02, #1 wc
1f4a4     65 01 00 CF 
1f4a8     02 FA 05 C6 |  if_b	mov	result1, ##@LR__4603
1f4ac     5C 00 90 CD |  if_b	jmp	#LR__2723
1f4b0     0F 13 02 F6 | 	mov	arg01, local01
1f4b4     09 23 02 F6 | 	mov	local03, arg01
1f4b8     97 06 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
1f4bc                 | LR__2720
1f4bc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f4c0     01 22 06 51 |  if_ne	add	local03, #1
1f4c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2720
1f4c8                 | LR__2721
1f4c8     09 23 82 F1 | 	sub	local03, arg01
1f4cc     11 FB 01 F6 | 	mov	result1, local03
1f4d0     10 FB 59 F2 | 	cmps	result1, local02 wcz
1f4d4     0F FB 01 E6 |  if_be	mov	result1, local01
1f4d8     30 00 90 ED |  if_be	jmp	#LR__2723
1f4dc     10 13 02 F6 | 	mov	arg01, local02
1f4e0     02 12 06 F1 | 	add	arg01, #2
1f4e4     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
1f4e8     FD 24 0A F6 | 	mov	local04, result1 wz
1f4ec     18 00 90 AD |  if_e	jmp	#LR__2722
1f4f0     12 13 02 F6 | 	mov	arg01, local04
1f4f4     0F 15 02 F6 | 	mov	arg02, local01
1f4f8     10 17 02 F6 | 	mov	arg03, local02
1f4fc     6C DE BF FD | 	call	#__system____builtin_memmove
1f500     12 21 02 F1 | 	add	local02, local04
1f504     10 01 48 FC | 	wrbyte	#0, local02
1f508                 | LR__2722
1f508     12 FB 01 F6 | 	mov	result1, local04
1f50c                 | LR__2723
1f50c     A7 F0 03 F6 | 	mov	ptra, fp
1f510     B2 00 A0 FD | 	call	#popregs_
1f514                 | __system__Left_S_ret
1f514     2D 00 64 FD | 	ret
1f518                 | 
1f518                 | __system__Right_S
1f518     05 4A 05 F6 | 	mov	COUNT_, #5
1f51c     A8 00 A0 FD | 	call	#pushregs_
1f520     09 1F 02 F6 | 	mov	local01, arg01
1f524     0A 21 02 F6 | 	mov	local02, arg02
1f528     01 20 56 F2 | 	cmps	local02, #1 wc
1f52c     65 01 00 CF 
1f530     03 FA 05 C6 |  if_b	mov	result1, ##@LR__4604
1f534     64 00 90 CD |  if_b	jmp	#LR__2733
1f538     0F 13 02 F6 | 	mov	arg01, local01
1f53c     09 23 02 F6 | 	mov	local03, arg01
1f540     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
1f544                 | LR__2730
1f544     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f548     01 22 06 51 |  if_ne	add	local03, #1
1f54c     F4 FF 9F 5D |  if_ne	jmp	#LR__2730
1f550                 | LR__2731
1f550     09 23 82 F1 | 	sub	local03, arg01
1f554     11 FB 01 F6 | 	mov	result1, local03
1f558     FD 24 02 F6 | 	mov	local04, result1
1f55c     10 25 5A F2 | 	cmps	local04, local02 wcz
1f560     0F FB 01 E6 |  if_be	mov	result1, local01
1f564     34 00 90 ED |  if_be	jmp	#LR__2733
1f568     10 13 02 F6 | 	mov	arg01, local02
1f56c     02 12 06 F1 | 	add	arg01, #2
1f570     20 1D B0 FD | 	call	#__system___gc_alloc_managed
1f574     FD 26 0A F6 | 	mov	local05, result1 wz
1f578     1C 00 90 AD |  if_e	jmp	#LR__2732
1f57c     10 25 82 F1 | 	sub	local04, local02
1f580     0F 25 02 F1 | 	add	local04, local01
1f584     01 20 06 F1 | 	add	local02, #1
1f588     13 13 02 F6 | 	mov	arg01, local05
1f58c     12 15 02 F6 | 	mov	arg02, local04
1f590     10 17 02 F6 | 	mov	arg03, local02
1f594     D4 DD BF FD | 	call	#__system____builtin_memmove
1f598                 | LR__2732
1f598     13 FB 01 F6 | 	mov	result1, local05
1f59c                 | LR__2733
1f59c     A7 F0 03 F6 | 	mov	ptra, fp
1f5a0     B2 00 A0 FD | 	call	#popregs_
1f5a4                 | __system__Right_S_ret
1f5a4     2D 00 64 FD | 	ret
1f5a8                 | 
1f5a8                 | __system__Mid_S
1f5a8     05 4A 05 F6 | 	mov	COUNT_, #5
1f5ac     A8 00 A0 FD | 	call	#pushregs_
1f5b0     09 1F 02 F6 | 	mov	local01, arg01
1f5b4     0A 21 02 F6 | 	mov	local02, arg02
1f5b8     01 16 56 F2 | 	cmps	arg03, #1 wc
1f5bc     65 01 00 CF 
1f5c0     04 FA 05 C6 |  if_b	mov	result1, ##@LR__4605
1f5c4     80 00 90 CD |  if_b	jmp	#LR__2743
1f5c8     01 20 86 F1 | 	sub	local02, #1
1f5cc     00 20 56 F3 | 	fges	local02, #0 wc
1f5d0     0F 13 02 F6 | 	mov	arg01, local01
1f5d4     09 23 02 F6 | 	mov	local03, arg01
1f5d8     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1f5dc                 | LR__2740
1f5dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f5e0     01 22 06 51 |  if_ne	add	local03, #1
1f5e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2740
1f5e8                 | LR__2741
1f5e8     09 23 82 F1 | 	sub	local03, arg01
1f5ec     11 FB 01 F6 | 	mov	result1, local03
1f5f0     FD 14 02 F6 | 	mov	arg02, result1
1f5f4     10 15 52 F2 | 	cmps	arg02, local02 wc
1f5f8     65 01 00 CF 
1f5fc     05 FA 05 C6 |  if_b	mov	result1, ##@LR__4606
1f600     44 00 90 CD |  if_b	jmp	#LR__2743
1f604     0A 25 02 F6 | 	mov	local04, arg02
1f608     10 25 82 F1 | 	sub	local04, local02
1f60c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1f610     0B 25 02 16 |  if_a	mov	local04, arg03
1f614     12 13 02 F6 | 	mov	arg01, local04
1f618     02 12 06 F1 | 	add	arg01, #2
1f61c     74 1C B0 FD | 	call	#__system___gc_alloc_managed
1f620     FD 26 0A F6 | 	mov	local05, result1 wz
1f624     1C 00 90 AD |  if_e	jmp	#LR__2742
1f628     0F 21 02 F1 | 	add	local02, local01
1f62c     13 13 02 F6 | 	mov	arg01, local05
1f630     10 15 02 F6 | 	mov	arg02, local02
1f634     12 17 02 F6 | 	mov	arg03, local04
1f638     30 DD BF FD | 	call	#__system____builtin_memmove
1f63c     13 25 02 F1 | 	add	local04, local05
1f640     12 01 48 FC | 	wrbyte	#0, local04
1f644                 | LR__2742
1f644     13 FB 01 F6 | 	mov	result1, local05
1f648                 | LR__2743
1f648     A7 F0 03 F6 | 	mov	ptra, fp
1f64c     B2 00 A0 FD | 	call	#popregs_
1f650                 | __system__Mid_S_ret
1f650     2D 00 64 FD | 	ret
1f654                 | 
1f654                 | __system__Chr_S
1f654     01 4A 05 F6 | 	mov	COUNT_, #1
1f658     A8 00 A0 FD | 	call	#pushregs_
1f65c     09 1F 02 F6 | 	mov	local01, arg01
1f660     03 12 06 F6 | 	mov	arg01, #3
1f664     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
1f668     00 FA 4D F2 | 	cmps	result1, #0 wz
1f66c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1f670     01 FA 05 51 |  if_ne	add	result1, #1
1f674     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1f678     01 FA 85 51 |  if_ne	sub	result1, #1
1f67c     A7 F0 03 F6 | 	mov	ptra, fp
1f680     B2 00 A0 FD | 	call	#popregs_
1f684                 | __system__Chr_S_ret
1f684     2D 00 64 FD | 	ret
1f688                 | 
1f688                 | __system__str_S
1f688     02 4A 05 F6 | 	mov	COUNT_, #2
1f68c     A8 00 A0 FD | 	call	#pushregs_
1f690     09 1F 02 F6 | 	mov	local01, arg01
1f694     10 12 06 F6 | 	mov	arg01, #16
1f698     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
1f69c     FD 20 0A F6 | 	mov	local02, result1 wz
1f6a0     30 00 90 AD |  if_e	jmp	#LR__2750
1f6a4     F8 13 02 F6 | 	mov	arg01, ptra
1f6a8     08 F0 07 F1 | 	add	ptra, #8
1f6ac     09 21 62 FC | 	wrlong	local02, arg01
1f6b0     04 12 06 F1 | 	add	arg01, #4
1f6b4     09 01 68 FC | 	wrlong	#0, arg01
1f6b8     04 12 86 F1 | 	sub	arg01, #4
1f6bc     00 E8 03 FF 
1f6c0     00 12 46 F5 | 	or	arg01, ##131072000
1f6c4     00 14 06 F6 | 	mov	arg02, #0
1f6c8     0F 17 02 F6 | 	mov	arg03, local01
1f6cc     67 18 06 F6 | 	mov	arg04, #103
1f6d0     90 EE BF FD | 	call	#__system___fmtfloat
1f6d4                 | LR__2750
1f6d4     10 FB 01 F6 | 	mov	result1, local02
1f6d8     A7 F0 03 F6 | 	mov	ptra, fp
1f6dc     B2 00 A0 FD | 	call	#popregs_
1f6e0                 | __system__str_S_ret
1f6e0     2D 00 64 FD | 	ret
1f6e4                 | 
1f6e4                 | __system__Number_S
1f6e4     08 4A 05 F6 | 	mov	COUNT_, #8
1f6e8     A8 00 A0 FD | 	call	#pushregs_
1f6ec     09 1F 02 F6 | 	mov	local01, arg01
1f6f0     0A 21 0A F6 | 	mov	local02, arg02 wz
1f6f4     0B 23 02 F6 | 	mov	local03, arg03
1f6f8     3C 00 90 5D |  if_ne	jmp	#LR__2762
1f6fc     01 20 06 F6 | 	mov	local02, #1
1f700     11 25 02 F6 | 	mov	local04, local03
1f704     01 26 06 F6 | 	mov	local05, #1
1f708     97 16 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1f70c                 | LR__2760
1f70c     00 28 06 F6 | 	mov	local06, #0
1f710     0F 25 1A F2 | 	cmp	local04, local01 wcz
1f714     01 28 66 E6 |  if_be	neg	local06, #1
1f718     12 27 12 F2 | 	cmp	local05, local04 wc
1f71c     15 2B A2 F1 | 	subx	local07, local07
1f720     15 29 CA F7 | 	test	local06, local07 wz
1f724     11 25 02 5D |  if_ne	qmul	local04, local03
1f728     12 27 02 56 |  if_ne	mov	local05, local04
1f72c     01 20 06 51 |  if_ne	add	local02, #1
1f730     18 24 62 5D |  if_ne	getqx	local04
1f734     D4 FF 9F 5D |  if_ne	jmp	#LR__2760
1f738                 | LR__2761
1f738                 | LR__2762
1f738     20 20 36 F3 | 	fle	local02, #32 wc
1f73c     10 13 02 F6 | 	mov	arg01, local02
1f740     02 12 06 F1 | 	add	arg01, #2
1f744     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1f748     FD 28 02 F6 | 	mov	local06, result1
1f74c     10 2B 02 F6 | 	mov	local07, local02
1f750     14 2B 02 F1 | 	add	local07, local06
1f754     15 01 48 FC | 	wrbyte	#0, local07
1f758     97 1A 48 FB | 	callpa	#(@LR__2764-@LR__2763)>>2,fcache_load_ptr_
1f75c                 | LR__2763
1f75c     01 20 16 F2 | 	cmp	local02, #1 wc
1f760     2C 00 90 CD |  if_b	jmp	#LR__2765
1f764     11 1F 12 FD | 	qdiv	local01, local03
1f768     01 20 86 F1 | 	sub	local02, #1
1f76c     10 2B 02 F6 | 	mov	local07, local02
1f770     14 2B 02 F1 | 	add	local07, local06
1f774     19 2C 62 FD | 	getqy	local08
1f778     0A 2C 16 F2 | 	cmp	local08, #10 wc
1f77c     30 2C 06 C1 |  if_b	add	local08, #48
1f780     37 2C 06 31 |  if_ae	add	local08, #55
1f784     15 2D 42 FC | 	wrbyte	local08, local07
1f788     18 1E 62 FD | 	getqx	local01
1f78c     CC FF 9F FD | 	jmp	#LR__2763
1f790                 | LR__2764
1f790                 | LR__2765
1f790     14 FB 01 F6 | 	mov	result1, local06
1f794     A7 F0 03 F6 | 	mov	ptra, fp
1f798     B2 00 A0 FD | 	call	#popregs_
1f79c                 | __system__Number_S_ret
1f79c     2D 00 64 FD | 	ret
1f7a0                 | 
1f7a0                 | __system__LCase_S
1f7a0     07 4A 05 F6 | 	mov	COUNT_, #7
1f7a4     A8 00 A0 FD | 	call	#pushregs_
1f7a8     09 1F 02 F6 | 	mov	local01, arg01
1f7ac     09 21 02 F6 | 	mov	local02, arg01
1f7b0     97 06 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
1f7b4                 | LR__2770
1f7b4     10 FB C9 FA | 	rdbyte	result1, local02 wz
1f7b8     01 20 06 51 |  if_ne	add	local02, #1
1f7bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2770
1f7c0                 | LR__2771
1f7c0     09 21 82 F1 | 	sub	local02, arg01
1f7c4     10 FB 01 F6 | 	mov	result1, local02
1f7c8     FD 20 0A F6 | 	mov	local02, result1 wz
1f7cc     65 01 00 AF 
1f7d0     06 FA 05 A6 |  if_e	mov	result1, ##@LR__4607
1f7d4     7C 00 90 AD |  if_e	jmp	#LR__2777
1f7d8     10 13 02 F6 | 	mov	arg01, local02
1f7dc     02 12 06 F1 | 	add	arg01, #2
1f7e0     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1f7e4     FD 22 0A F6 | 	mov	local03, result1 wz
1f7e8     64 00 90 AD |  if_e	jmp	#LR__2776
1f7ec     01 24 66 F6 | 	neg	local04, #1
1f7f0     97 26 48 FB | 	callpa	#(@LR__2775-@LR__2772)>>2,fcache_load_ptr_
1f7f4                 | LR__2772
1f7f4     01 24 06 F1 | 	add	local04, #1
1f7f8     12 27 02 F6 | 	mov	local05, local04
1f7fc     0F 27 02 F1 | 	add	local05, local01
1f800     13 29 C2 FA | 	rdbyte	local06, local05
1f804     41 28 56 F2 | 	cmps	local06, #65 wc
1f808     18 00 90 CD |  if_b	jmp	#LR__2773
1f80c     5B 28 56 F2 | 	cmps	local06, #91 wc
1f810     12 2B 02 C6 |  if_b	mov	local07, local04
1f814     11 2B 02 C1 |  if_b	add	local07, local03
1f818     20 28 06 C1 |  if_b	add	local06, #32
1f81c     15 29 42 CC |  if_b	wrbyte	local06, local07
1f820     0C 00 90 CD |  if_b	jmp	#LR__2774
1f824                 | LR__2773
1f824     12 2B 02 F6 | 	mov	local07, local04
1f828     11 2B 02 F1 | 	add	local07, local03
1f82c     15 29 42 FC | 	wrbyte	local06, local07
1f830                 | LR__2774
1f830     10 29 02 F6 | 	mov	local06, local02
1f834     01 28 86 F1 | 	sub	local06, #1
1f838     14 25 0A F2 | 	cmp	local04, local06 wz
1f83c     B4 FF 9F 5D |  if_ne	jmp	#LR__2772
1f840                 | LR__2775
1f840     11 21 02 F1 | 	add	local02, local03
1f844     10 01 48 FC | 	wrbyte	#0, local02
1f848     11 FB 01 F6 | 	mov	result1, local03
1f84c     04 00 90 FD | 	jmp	#LR__2777
1f850                 | LR__2776
1f850     11 FB 01 F6 | 	mov	result1, local03
1f854                 | LR__2777
1f854     A7 F0 03 F6 | 	mov	ptra, fp
1f858     B2 00 A0 FD | 	call	#popregs_
1f85c                 | __system__LCase_S_ret
1f85c     2D 00 64 FD | 	ret
1f860                 | 
1f860                 | __system__LTrim_S
1f860     05 4A 05 F6 | 	mov	COUNT_, #5
1f864     A8 00 A0 FD | 	call	#pushregs_
1f868     09 1F 02 F6 | 	mov	local01, arg01
1f86c     09 21 02 F6 | 	mov	local02, arg01
1f870     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1f874                 | LR__2780
1f874     10 FB C9 FA | 	rdbyte	result1, local02 wz
1f878     01 20 06 51 |  if_ne	add	local02, #1
1f87c     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
1f880                 | LR__2781
1f880     09 21 82 F1 | 	sub	local02, arg01
1f884     10 FB 01 F6 | 	mov	result1, local02
1f888     FD 20 0A F6 | 	mov	local02, result1 wz
1f88c     65 01 00 AF 
1f890     07 FA 05 A6 |  if_e	mov	result1, ##@LR__4608
1f894     7C 00 90 AD |  if_e	jmp	#LR__2786
1f898     00 22 06 F6 | 	mov	local03, #0
1f89c     10 25 02 F6 | 	mov	local04, local02
1f8a0                 | LR__2782
1f8a0     12 23 52 F2 | 	cmps	local03, local04 wc
1f8a4     68 00 90 3D |  if_ae	jmp	#LR__2785
1f8a8     11 17 02 F6 | 	mov	arg03, local03
1f8ac     0F 17 02 F1 | 	add	arg03, local01
1f8b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f8b4     20 16 0E F2 | 	cmp	arg03, #32 wz
1f8b8     4C 00 90 AD |  if_e	jmp	#LR__2784
1f8bc     10 13 02 F6 | 	mov	arg01, local02
1f8c0     11 13 82 F1 | 	sub	arg01, local03
1f8c4     02 12 06 F1 | 	add	arg01, #2
1f8c8     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1f8cc     FD 26 0A F6 | 	mov	local05, result1 wz
1f8d0     2C 00 90 AD |  if_e	jmp	#LR__2783
1f8d4     11 15 02 F6 | 	mov	arg02, local03
1f8d8     0F 15 02 F1 | 	add	arg02, local01
1f8dc     10 17 02 F6 | 	mov	arg03, local02
1f8e0     11 17 82 F1 | 	sub	arg03, local03
1f8e4     13 13 02 F6 | 	mov	arg01, local05
1f8e8     80 DA BF FD | 	call	#__system____builtin_memmove
1f8ec     11 21 82 F1 | 	sub	local02, local03
1f8f0     13 21 02 F1 | 	add	local02, local05
1f8f4     10 01 48 FC | 	wrbyte	#0, local02
1f8f8     13 FB 01 F6 | 	mov	result1, local05
1f8fc     14 00 90 FD | 	jmp	#LR__2786
1f900                 | LR__2783
1f900     13 FB 01 F6 | 	mov	result1, local05
1f904     0C 00 90 FD | 	jmp	#LR__2786
1f908                 | LR__2784
1f908     01 22 06 F1 | 	add	local03, #1
1f90c     90 FF 9F FD | 	jmp	#LR__2782
1f910                 | LR__2785
1f910     0F FB 01 F6 | 	mov	result1, local01
1f914                 | LR__2786
1f914     A7 F0 03 F6 | 	mov	ptra, fp
1f918     B2 00 A0 FD | 	call	#popregs_
1f91c                 | __system__LTrim_S_ret
1f91c     2D 00 64 FD | 	ret
1f920                 | 
1f920                 | __system__RTrim_S
1f920     04 4A 05 F6 | 	mov	COUNT_, #4
1f924     A8 00 A0 FD | 	call	#pushregs_
1f928     09 1F 02 F6 | 	mov	local01, arg01
1f92c     09 21 02 F6 | 	mov	local02, arg01
1f930     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
1f934                 | LR__2790
1f934     10 FB C9 FA | 	rdbyte	result1, local02 wz
1f938     01 20 06 51 |  if_ne	add	local02, #1
1f93c     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
1f940                 | LR__2791
1f940     09 21 82 F1 | 	sub	local02, arg01
1f944     10 FB 01 F6 | 	mov	result1, local02
1f948     FD 20 0A F6 | 	mov	local02, result1 wz
1f94c     65 01 00 AF 
1f950     08 FA 05 A6 |  if_e	mov	result1, ##@LR__4609
1f954     74 00 90 AD |  if_e	jmp	#LR__2795
1f958     10 23 02 F6 | 	mov	local03, local02
1f95c     01 22 86 F1 | 	sub	local03, #1
1f960                 | LR__2792
1f960     11 15 02 F6 | 	mov	arg02, local03
1f964     0F 15 02 F1 | 	add	arg02, local01
1f968     0A 21 C2 FA | 	rdbyte	local02, arg02
1f96c     20 20 0E F2 | 	cmp	local02, #32 wz
1f970     44 00 90 AD |  if_e	jmp	#LR__2794
1f974     11 13 02 F6 | 	mov	arg01, local03
1f978     02 12 06 F1 | 	add	arg01, #2
1f97c     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1f980     FD 24 0A F6 | 	mov	local04, result1 wz
1f984     28 00 90 AD |  if_e	jmp	#LR__2793
1f988     11 17 02 F6 | 	mov	arg03, local03
1f98c     01 16 06 F1 | 	add	arg03, #1
1f990     12 13 02 F6 | 	mov	arg01, local04
1f994     0F 15 02 F6 | 	mov	arg02, local01
1f998     D0 D9 BF FD | 	call	#__system____builtin_memmove
1f99c     01 22 06 F1 | 	add	local03, #1
1f9a0     12 23 02 F1 | 	add	local03, local04
1f9a4     11 01 48 FC | 	wrbyte	#0, local03
1f9a8     12 FB 01 F6 | 	mov	result1, local04
1f9ac     1C 00 90 FD | 	jmp	#LR__2795
1f9b0                 | LR__2793
1f9b0     12 FB 01 F6 | 	mov	result1, local04
1f9b4     14 00 90 FD | 	jmp	#LR__2795
1f9b8                 | LR__2794
1f9b8     01 22 86 F1 | 	sub	local03, #1
1f9bc     00 22 56 F2 | 	cmps	local03, #0 wc
1f9c0     9C FF 9F 3D |  if_ae	jmp	#LR__2792
1f9c4     65 01 00 FF 
1f9c8     09 FA 05 F6 | 	mov	result1, ##@LR__4610
1f9cc                 | LR__2795
1f9cc     A7 F0 03 F6 | 	mov	ptra, fp
1f9d0     B2 00 A0 FD | 	call	#popregs_
1f9d4                 | __system__RTrim_S_ret
1f9d4     2D 00 64 FD | 	ret
1f9d8                 | 
1f9d8                 | __system__Instr
1f9d8     07 4A 05 F6 | 	mov	COUNT_, #7
1f9dc     A8 00 A0 FD | 	call	#pushregs_
1f9e0     09 1F 02 F6 | 	mov	local01, arg01
1f9e4     0A 21 02 F6 | 	mov	local02, arg02
1f9e8     0B 23 02 F6 | 	mov	local03, arg03
1f9ec     11 13 02 F6 | 	mov	arg01, local03
1f9f0     09 25 02 F6 | 	mov	local04, arg01
1f9f4     97 06 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
1f9f8                 | LR__2800
1f9f8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1f9fc     01 24 06 51 |  if_ne	add	local04, #1
1fa00     F4 FF 9F 5D |  if_ne	jmp	#LR__2800
1fa04                 | LR__2801
1fa04     09 25 82 F1 | 	sub	local04, arg01
1fa08     12 27 02 F6 | 	mov	local05, local04
1fa0c     10 13 02 F6 | 	mov	arg01, local02
1fa10     09 25 02 F6 | 	mov	local04, arg01
1fa14     97 06 48 FB | 	callpa	#(@LR__2803-@LR__2802)>>2,fcache_load_ptr_
1fa18                 | LR__2802
1fa18     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fa1c     01 24 06 51 |  if_ne	add	local04, #1
1fa20     F4 FF 9F 5D |  if_ne	jmp	#LR__2802
1fa24                 | LR__2803
1fa24     09 25 82 F1 | 	sub	local04, arg01
1fa28     12 FB 01 F6 | 	mov	result1, local04
1fa2c     FD 18 0A F6 | 	mov	arg04, result1 wz
1fa30     00 FA 05 A6 |  if_e	mov	result1, #0
1fa34     98 00 90 AD |  if_e	jmp	#LR__2807
1fa38     00 26 0E F2 | 	cmp	local05, #0 wz
1fa3c     00 FA 05 A6 |  if_e	mov	result1, #0
1fa40     8C 00 90 AD |  if_e	jmp	#LR__2807
1fa44     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1fa48     00 FA 05 16 |  if_a	mov	result1, #0
1fa4c     80 00 90 1D |  if_a	jmp	#LR__2807
1fa50     01 1E 56 F2 | 	cmps	local01, #1 wc
1fa54     01 1E 06 C6 |  if_b	mov	local01, #1
1fa58     11 29 C2 FA | 	rdbyte	local06, local03
1fa5c     01 26 0E F2 | 	cmp	local05, #1 wz
1fa60     18 00 90 5D |  if_ne	jmp	#LR__2804
1fa64     10 13 02 F6 | 	mov	arg01, local02
1fa68     14 15 02 F6 | 	mov	arg02, local06
1fa6c     0F 17 02 F6 | 	mov	arg03, local01
1fa70     00 18 06 F6 | 	mov	arg04, #0
1fa74     B4 33 B0 FD | 	call	#__system____ScanForChar
1fa78     54 00 90 FD | 	jmp	#LR__2807
1fa7c                 | LR__2804
1fa7c     0F 2B 02 F6 | 	mov	local07, local01
1fa80                 | LR__2805
1fa80     10 13 02 F6 | 	mov	arg01, local02
1fa84     14 15 02 F6 | 	mov	arg02, local06
1fa88     15 17 02 F6 | 	mov	arg03, local07
1fa8c     00 18 06 F6 | 	mov	arg04, #0
1fa90     98 33 B0 FD | 	call	#__system____ScanForChar
1fa94     FD 2A 0A F6 | 	mov	local07, result1 wz
1fa98     30 00 90 AD |  if_e	jmp	#LR__2806
1fa9c     13 17 02 F6 | 	mov	arg03, local05
1faa0     10 13 02 F6 | 	mov	arg01, local02
1faa4     15 15 02 F6 | 	mov	arg02, local07
1faa8     FC FA BF FD | 	call	#__system__Mid_S
1faac     FD 12 02 F6 | 	mov	arg01, result1
1fab0     11 15 02 F6 | 	mov	arg02, local03
1fab4     BC D9 BF FD | 	call	#__system___string_cmp
1fab8     00 FA 0D F2 | 	cmp	result1, #0 wz
1fabc     15 FB 01 A6 |  if_e	mov	result1, local07
1fac0     0C 00 90 AD |  if_e	jmp	#LR__2807
1fac4     13 2B 02 F1 | 	add	local07, local05
1fac8     B4 FF 9F FD | 	jmp	#LR__2805
1facc                 | LR__2806
1facc     00 FA 05 F6 | 	mov	result1, #0
1fad0                 | LR__2807
1fad0     A7 F0 03 F6 | 	mov	ptra, fp
1fad4     B2 00 A0 FD | 	call	#popregs_
1fad8                 | __system__Instr_ret
1fad8     2D 00 64 FD | 	ret
1fadc                 | 
1fadc                 | __system___strerror
1fadc     00 12 56 F2 | 	cmps	arg01, #0 wc
1fae0     08 00 90 CD |  if_b	jmp	#LR__2810
1fae4     1A 12 56 F2 | 	cmps	arg01, #26 wc
1fae8     04 00 90 CD |  if_b	jmp	#LR__2811
1faec                 | LR__2810
1faec     19 12 06 F6 | 	mov	arg01, #25
1faf0                 | LR__2811
1faf0     02 12 66 F0 | 	shl	arg01, #2
1faf4     01 00 00 FF 
1faf8     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1fafc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1fb00     09 FB 01 FB | 	rdlong	result1, arg01
1fb04     01 00 00 FF 
1fb08     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1fb0c                 | __system___strerror_ret
1fb0c     2D 00 64 FD | 	ret
1fb10                 | 
1fb10                 | __system___int64_shl
1fb10     20 16 CE F7 | 	test	arg03, #32 wz
1fb14     09 15 02 56 |  if_ne	mov	arg02, arg01
1fb18     00 12 06 56 |  if_ne	mov	arg01, #0
1fb1c     1F 16 CE F7 | 	test	arg03, #31 wz
1fb20     18 00 90 AD |  if_e	jmp	#LR__2820
1fb24     0B 15 62 F0 | 	shl	arg02, arg03
1fb28     09 FB 01 F6 | 	mov	result1, arg01
1fb2c     0B FD 61 F6 | 	neg	result2, arg03
1fb30     FE FA 41 F0 | 	shr	result1, result2
1fb34     FD 14 42 F5 | 	or	arg02, result1
1fb38     0B 13 62 F0 | 	shl	arg01, arg03
1fb3c                 | LR__2820
1fb3c     0A FD 01 F6 | 	mov	result2, arg02
1fb40     09 FB 01 F6 | 	mov	result1, arg01
1fb44                 | __system___int64_shl_ret
1fb44     2D 00 64 FD | 	ret
1fb48                 | 
1fb48                 | __system___usepins
1fb48     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1fb4c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1fb50     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1fb54     00 13 CA F7 | 	test	arg01, _var01 wz
1fb58     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1fb5c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1fb60     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1fb64     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1fb68     00 FA 05 56 |  if_ne	mov	result1, #0
1fb6c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1fb70     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1fb74     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1fb78     09 03 42 F5 | 	or	_var02, arg01
1fb7c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1fb80     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1fb84     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1fb88     0A 03 42 F5 | 	or	_var02, arg02
1fb8c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1fb90     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1fb94     01 FA 65 F6 | 	neg	result1, #1
1fb98                 | __system___usepins_ret
1fb98     2D 00 64 FD | 	ret
1fb9c                 | 
1fb9c                 | __system___freepins
1fb9c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1fba0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1fba4     09 01 22 F5 | 	andn	_var01, arg01
1fba8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1fbac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1fbb0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1fbb4     0A 01 22 F5 | 	andn	_var01, arg02
1fbb8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1fbbc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1fbc0                 | __system___freepins_ret
1fbc0     2D 00 64 FD | 	ret
1fbc4                 | 
1fbc4                 | __system___float_fromuns
1fbc4     09 17 0A F6 | 	mov	arg03, arg01 wz
1fbc8     0B FB 01 A6 |  if_e	mov	result1, arg03
1fbcc     24 00 90 AD |  if_e	jmp	#LR__2830
1fbd0     0B 15 92 F7 | 	encod	arg02, arg03 wc
1fbd4     01 14 06 C1 |  if_b	add	arg02, #1
1fbd8     01 14 86 F1 | 	sub	arg02, #1
1fbdc     1F 12 06 F6 | 	mov	arg01, #31
1fbe0     0A 13 82 F1 | 	sub	arg01, arg02
1fbe4     09 17 62 F0 | 	shl	arg03, arg01
1fbe8     02 16 46 F0 | 	shr	arg03, #2
1fbec     00 12 06 F6 | 	mov	arg01, #0
1fbf0     4C 09 B0 FD | 	call	#__system___float_Pack
1fbf4                 | LR__2830
1fbf4                 | __system___float_fromuns_ret
1fbf4     2D 00 64 FD | 	ret
1fbf8                 | 
1fbf8                 | __system___float_add
1fbf8     0F 4A 05 F6 | 	mov	COUNT_, #15
1fbfc     A8 00 A0 FD | 	call	#pushregs_
1fc00     09 1F 02 F6 | 	mov	local01, arg01
1fc04     0A 21 02 F6 | 	mov	local02, arg02
1fc08     00 22 06 F6 | 	mov	local03, #0
1fc0c     0F 25 02 F6 | 	mov	local04, local01
1fc10     12 27 02 F6 | 	mov	local05, local04
1fc14     16 26 46 F7 | 	zerox	local05, #22
1fc18     12 29 02 F6 | 	mov	local06, local04
1fc1c     01 28 66 F0 | 	shl	local06, #1
1fc20     18 28 46 F0 | 	shr	local06, #24
1fc24     1F 24 46 F0 | 	shr	local04, #31
1fc28     10 13 02 F6 | 	mov	arg01, local02
1fc2c     09 FB 01 F6 | 	mov	result1, arg01
1fc30     FD 2A 02 F6 | 	mov	local07, result1
1fc34     15 2D 02 F6 | 	mov	local08, local07
1fc38     16 2C 46 F7 | 	zerox	local08, #22
1fc3c     15 2F 02 F6 | 	mov	local09, local07
1fc40     01 2E 66 F0 | 	shl	local09, #1
1fc44     18 2E 46 F0 | 	shr	local09, #24
1fc48     17 31 02 F6 | 	mov	local10, local09
1fc4c     1F 2A 46 F0 | 	shr	local07, #31
1fc50     00 32 06 F6 | 	mov	local11, #0
1fc54     00 34 06 F6 | 	mov	local12, #0
1fc58     18 29 12 F2 | 	cmp	local06, local10 wc
1fc5c     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1fc60     2C 00 90 1D |  if_a	jmp	#LR__2840
1fc64     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1fc68     24 00 90 3D |  if_ae	jmp	#LR__2840
1fc6c     13 37 02 F6 | 	mov	local13, local05
1fc70     16 27 02 F6 | 	mov	local05, local08
1fc74     1B 2D 02 F6 | 	mov	local08, local13
1fc78     14 37 02 F6 | 	mov	local13, local06
1fc7c     18 29 02 F6 | 	mov	local06, local10
1fc80     1B 31 02 F6 | 	mov	local10, local13
1fc84     12 37 02 F6 | 	mov	local13, local04
1fc88     15 25 02 F6 | 	mov	local04, local07
1fc8c     1B 2B 02 F6 | 	mov	local07, local13
1fc90                 | LR__2840
1fc90     FF 28 0E F2 | 	cmp	local06, #255 wz
1fc94     70 01 90 AD |  if_e	jmp	#LR__2855
1fc98     00 28 0E F2 | 	cmp	local06, #0 wz
1fc9c     AC 01 90 AD |  if_e	jmp	#LR__2857
1fca0     17 26 26 F4 | 	bith	local05, #23
1fca4                 | LR__2841
1fca4     00 30 0E F2 | 	cmp	local10, #0 wz
1fca8     F0 01 90 AD |  if_e	jmp	#LR__2861
1fcac     17 2C 26 F4 | 	bith	local08, #23
1fcb0                 | LR__2842
1fcb0     7F 28 86 F1 | 	sub	local06, #127
1fcb4     7F 30 86 F1 | 	sub	local10, #127
1fcb8     14 39 02 F6 | 	mov	local14, local06
1fcbc     18 39 82 F1 | 	sub	local14, local10
1fcc0     97 14 48 FB | 	callpa	#(@LR__2844-@LR__2843)>>2,fcache_load_ptr_
1fcc4                 | LR__2843
1fcc4     20 38 56 F2 | 	cmps	local14, #32 wc
1fcc8     20 00 90 CD |  if_b	jmp	#LR__2845
1fccc     16 2F 02 F6 | 	mov	local09, local08
1fcd0     00 32 0E F2 | 	cmp	local11, #0 wz
1fcd4     6F 32 62 FD | 	wrnz	local11
1fcd8     19 2F 42 F5 | 	or	local09, local11
1fcdc     17 33 02 F6 | 	mov	local11, local09
1fce0     00 2C 06 F6 | 	mov	local08, #0
1fce4     20 38 86 F1 | 	sub	local14, #32
1fce8     D8 FF 9F FD | 	jmp	#LR__2843
1fcec                 | LR__2844
1fcec                 | LR__2845
1fcec     00 38 0E F2 | 	cmp	local14, #0 wz
1fcf0     38 00 90 AD |  if_e	jmp	#LR__2846
1fcf4     16 37 02 F6 | 	mov	local13, local08
1fcf8     20 30 06 F6 | 	mov	local10, #32
1fcfc     1C 31 82 F1 | 	sub	local10, local14
1fd00     18 37 62 F0 | 	shl	local13, local10
1fd04     19 31 02 F6 | 	mov	local10, local11
1fd08     20 2E 06 F6 | 	mov	local09, #32
1fd0c     1C 2F 82 F1 | 	sub	local09, local14
1fd10     17 31 6A F0 | 	shl	local10, local09 wz
1fd14     1C 33 42 F0 | 	shr	local11, local14
1fd18     1C 2D 42 F0 | 	shr	local08, local14
1fd1c     1B 33 42 F5 | 	or	local11, local13
1fd20     00 3A 06 F6 | 	mov	local15, #0
1fd24     01 3A 06 56 |  if_ne	mov	local15, #1
1fd28     1D 33 42 F5 | 	or	local11, local15
1fd2c                 | LR__2846
1fd2c     12 3B 02 F6 | 	mov	local15, local04
1fd30     15 3B 62 F5 | 	xor	local15, local07
1fd34     01 3A CE F7 | 	test	local15, #1 wz
1fd38     18 00 90 AD |  if_e	jmp	#LR__2847
1fd3c     16 2D 22 F6 | 	not	local08, local08
1fd40     19 33 22 F6 | 	not	local11, local11
1fd44     01 32 0E F1 | 	add	local11, #1 wz
1fd48     00 3A 06 F6 | 	mov	local15, #0
1fd4c     01 3A 06 A6 |  if_e	mov	local15, #1
1fd50     1D 2D 02 F1 | 	add	local08, local15
1fd54                 | LR__2847
1fd54     19 35 12 F1 | 	add	local12, local11 wc
1fd58     16 27 22 F1 | 	addx	local05, local08
1fd5c     00 26 56 F2 | 	cmps	local05, #0 wc
1fd60     1C 00 90 3D |  if_ae	jmp	#LR__2848
1fd64     01 24 66 F5 | 	xor	local04, #1
1fd68     13 27 22 F6 | 	not	local05, local05
1fd6c     1A 35 22 F6 | 	not	local12, local12
1fd70     01 34 0E F1 | 	add	local12, #1 wz
1fd74     00 3A 06 F6 | 	mov	local15, #0
1fd78     01 3A 06 A6 |  if_e	mov	local15, #1
1fd7c     1D 27 02 F1 | 	add	local05, local15
1fd80                 | LR__2848
1fd80     00 80 00 FF 
1fd84     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1fd88     28 00 90 CD |  if_b	jmp	#LR__2849
1fd8c     01 28 06 F1 | 	add	local06, #1
1fd90     1A 39 02 F6 | 	mov	local14, local12
1fd94     01 38 06 F5 | 	and	local14, #1
1fd98     01 34 46 F0 | 	shr	local12, #1
1fd9c     13 3B 02 F6 | 	mov	local15, local05
1fda0     1F 3A 66 F0 | 	shl	local15, #31
1fda4     1D 35 42 F5 | 	or	local12, local15
1fda8     1C 35 42 F5 | 	or	local12, local14
1fdac     01 26 46 F0 | 	shr	local05, #1
1fdb0     3C 00 90 FD | 	jmp	#LR__2854
1fdb4                 | LR__2849
1fdb4     00 40 00 FF 
1fdb8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1fdbc     30 00 90 3D |  if_ae	jmp	#LR__2853
1fdc0     00 26 0E F2 | 	cmp	local05, #0 wz
1fdc4     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1fdc8     08 24 46 A5 |  if_e	or	local04, #8
1fdcc     01 24 26 A5 |  if_e	andn	local04, #1
1fdd0     1C 00 90 AD |  if_e	jmp	#LR__2852
1fdd4                 | LR__2850
1fdd4     00 40 00 FF 
1fdd8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1fddc     10 00 90 3D |  if_ae	jmp	#LR__2851
1fde0     1A 35 12 F1 | 	add	local12, local12 wc
1fde4     13 27 22 F1 | 	addx	local05, local05
1fde8     01 28 86 F1 | 	sub	local06, #1
1fdec     E4 FF 9F FD | 	jmp	#LR__2850
1fdf0                 | LR__2851
1fdf0                 | LR__2852
1fdf0                 | LR__2853
1fdf0                 | LR__2854
1fdf0     13 13 02 F6 | 	mov	arg01, local05
1fdf4     1A 15 02 F6 | 	mov	arg02, local12
1fdf8     14 17 02 F6 | 	mov	arg03, local06
1fdfc     12 19 02 F6 | 	mov	arg04, local04
1fe00     6C 34 B0 FD | 	call	#__system__pack_0539
1fe04     DC 00 90 FD | 	jmp	#LR__2865
1fe08                 | LR__2855
1fe08     FF 30 0E F2 | 	cmp	local10, #255 wz
1fe0c     10 00 90 5D |  if_ne	jmp	#LR__2856
1fe10     12 2B 0A F2 | 	cmp	local07, local04 wz
1fe14     00 F8 3F 5F 
1fe18     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1fe1c     C4 00 90 5D |  if_ne	jmp	#LR__2865
1fe20                 | LR__2856
1fe20     00 26 0E F2 | 	cmp	local05, #0 wz
1fe24     00 F8 3F 5F 
1fe28     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1fe2c     B4 00 90 5D |  if_ne	jmp	#LR__2865
1fe30     1A 15 02 F6 | 	mov	arg02, local12
1fe34     14 17 02 F6 | 	mov	arg03, local06
1fe38     12 19 02 F6 | 	mov	arg04, local04
1fe3c     02 18 46 F5 | 	or	arg04, #2
1fe40     13 13 02 F6 | 	mov	arg01, local05
1fe44     28 34 B0 FD | 	call	#__system__pack_0539
1fe48     98 00 90 FD | 	jmp	#LR__2865
1fe4c                 | LR__2857
1fe4c     00 26 0E F2 | 	cmp	local05, #0 wz
1fe50     28 00 90 AD |  if_e	jmp	#LR__2860
1fe54     01 26 66 F0 | 	shl	local05, #1
1fe58     97 0E 48 FB | 	callpa	#(@LR__2859-@LR__2858)>>2,fcache_load_ptr_
1fe5c                 | LR__2858
1fe5c     00 40 00 FF 
1fe60     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1fe64     14 3B 02 C6 |  if_b	mov	local15, local06
1fe68     01 3A 86 C1 |  if_b	sub	local15, #1
1fe6c     1D 29 02 C6 |  if_b	mov	local06, local15
1fe70     01 26 66 C0 |  if_b	shl	local05, #1
1fe74     E4 FF 9F CD |  if_b	jmp	#LR__2858
1fe78                 | LR__2859
1fe78     28 FE 9F FD | 	jmp	#LR__2841
1fe7c                 | LR__2860
1fe7c     15 25 02 F5 | 	and	local04, local07
1fe80     12 19 02 F6 | 	mov	arg04, local04
1fe84     08 18 46 F5 | 	or	arg04, #8
1fe88     00 12 06 F6 | 	mov	arg01, #0
1fe8c     00 14 06 F6 | 	mov	arg02, #0
1fe90     00 16 06 F6 | 	mov	arg03, #0
1fe94     D8 33 B0 FD | 	call	#__system__pack_0539
1fe98     48 00 90 FD | 	jmp	#LR__2865
1fe9c                 | LR__2861
1fe9c     00 2C 0E F2 | 	cmp	local08, #0 wz
1fea0     28 00 90 AD |  if_e	jmp	#LR__2864
1fea4     01 2C 66 F0 | 	shl	local08, #1
1fea8     97 0E 48 FB | 	callpa	#(@LR__2863-@LR__2862)>>2,fcache_load_ptr_
1feac                 | LR__2862
1feac     00 40 00 FF 
1feb0     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1feb4     18 3B 02 C6 |  if_b	mov	local15, local10
1feb8     01 3A 86 C1 |  if_b	sub	local15, #1
1febc     1D 31 02 C6 |  if_b	mov	local10, local15
1fec0     01 2C 66 C0 |  if_b	shl	local08, #1
1fec4     E4 FF 9F CD |  if_b	jmp	#LR__2862
1fec8                 | LR__2863
1fec8     E4 FD 9F FD | 	jmp	#LR__2842
1fecc                 | LR__2864
1fecc     7F 28 86 F1 | 	sub	local06, #127
1fed0     13 13 02 F6 | 	mov	arg01, local05
1fed4     1A 15 02 F6 | 	mov	arg02, local12
1fed8     14 17 02 F6 | 	mov	arg03, local06
1fedc     12 19 02 F6 | 	mov	arg04, local04
1fee0     8C 33 B0 FD | 	call	#__system__pack_0539
1fee4                 | LR__2865
1fee4     A7 F0 03 F6 | 	mov	ptra, fp
1fee8     B2 00 A0 FD | 	call	#popregs_
1feec                 | __system___float_add_ret
1feec     2D 00 64 FD | 	ret
1fef0                 | 
1fef0                 | __system___float_sqrt
1fef0     04 4A 05 F6 | 	mov	COUNT_, #4
1fef4     A8 00 A0 FD | 	call	#pushregs_
1fef8     09 1F 02 F6 | 	mov	local01, arg01
1fefc     09 FB 01 F6 | 	mov	result1, arg01
1ff00     FD 20 02 F6 | 	mov	local02, result1
1ff04     10 23 02 F6 | 	mov	local03, local02
1ff08     16 22 46 F7 | 	zerox	local03, #22
1ff0c     10 25 02 F6 | 	mov	local04, local02
1ff10     01 24 66 F0 | 	shl	local04, #1
1ff14     18 24 4E F0 | 	shr	local04, #24 wz
1ff18     1F 20 46 F0 | 	shr	local02, #31
1ff1c     70 00 90 AD |  if_e	jmp	#LR__2871
1ff20     17 22 26 F4 | 	bith	local03, #23
1ff24                 | LR__2870
1ff24     00 20 0E F2 | 	cmp	local02, #0 wz
1ff28     00 F8 3F 5F 
1ff2c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ff30     88 00 90 5D |  if_ne	jmp	#LR__2874
1ff34     FF 24 0E F2 | 	cmp	local04, #255 wz
1ff38     0F FB 01 A6 |  if_e	mov	result1, local01
1ff3c     7C 00 90 AD |  if_e	jmp	#LR__2874
1ff40     7F 24 86 F1 | 	sub	local04, #127
1ff44     01 24 CE F7 | 	test	local04, #1 wz
1ff48     01 22 66 50 |  if_ne	shl	local03, #1
1ff4c     05 22 66 F0 | 	shl	local03, #5
1ff50     11 01 38 FD | 	qsqrt	#0, local03
1ff54     01 24 86 51 |  if_ne	sub	local04, #1
1ff58     12 25 52 F6 | 	abs	local04, local04 wc
1ff5c     01 24 46 F0 | 	shr	local04, #1
1ff60     12 17 82 F6 | 	negc	arg03, local04
1ff64     10 19 02 F6 | 	mov	arg04, local02
1ff68     18 12 62 FD | 	getqx	arg01
1ff6c     09 15 02 F6 | 	mov	arg02, arg01
1ff70     19 14 66 F0 | 	shl	arg02, #25
1ff74     07 12 46 F0 | 	shr	arg01, #7
1ff78     00 80 00 FF 
1ff7c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1ff80     01 16 06 31 |  if_ae	add	arg03, #1
1ff84     01 12 46 30 |  if_ae	shr	arg01, #1
1ff88     E4 32 B0 FD | 	call	#__system__pack_0539
1ff8c     2C 00 90 FD | 	jmp	#LR__2874
1ff90                 | LR__2871
1ff90     00 22 0E F2 | 	cmp	local03, #0 wz
1ff94     0F FB 01 A6 |  if_e	mov	result1, local01
1ff98     20 00 90 AD |  if_e	jmp	#LR__2874
1ff9c     01 22 66 F0 | 	shl	local03, #1
1ffa0     97 0A 48 FB | 	callpa	#(@LR__2873-@LR__2872)>>2,fcache_load_ptr_
1ffa4                 | LR__2872
1ffa4     00 40 00 FF 
1ffa8     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1ffac     01 24 86 C1 |  if_b	sub	local04, #1
1ffb0     01 22 66 C0 |  if_b	shl	local03, #1
1ffb4     EC FF 9F CD |  if_b	jmp	#LR__2872
1ffb8                 | LR__2873
1ffb8     68 FF 9F FD | 	jmp	#LR__2870
1ffbc                 | LR__2874
1ffbc     A7 F0 03 F6 | 	mov	ptra, fp
1ffc0     B2 00 A0 FD | 	call	#popregs_
1ffc4                 | __system___float_sqrt_ret
1ffc4     2D 00 64 FD | 	ret
1ffc8                 | 
1ffc8                 | __system___float_mul
1ffc8     0B 4A 05 F6 | 	mov	COUNT_, #11
1ffcc     A8 00 A0 FD | 	call	#pushregs_
1ffd0     09 1F 02 F6 | 	mov	local01, arg01
1ffd4     0A 21 02 F6 | 	mov	local02, arg02
1ffd8     0F 23 02 F6 | 	mov	local03, local01
1ffdc     11 25 02 F6 | 	mov	local04, local03
1ffe0     16 24 46 F7 | 	zerox	local04, #22
1ffe4     11 27 02 F6 | 	mov	local05, local03
1ffe8     01 26 66 F0 | 	shl	local05, #1
1ffec     18 26 46 F0 | 	shr	local05, #24
1fff0     1F 22 46 F0 | 	shr	local03, #31
1fff4     10 FB 01 F6 | 	mov	result1, local02
1fff8     FD 28 02 F6 | 	mov	local06, result1
1fffc     14 2B 02 F6 | 	mov	local07, local06
20000     16 2A 46 F7 | 	zerox	local07, #22
20004     14 2D 02 F6 | 	mov	local08, local06
20008     01 2C 66 F0 | 	shl	local08, #1
2000c     18 2C 46 F0 | 	shr	local08, #24
20010     1F 28 46 F0 | 	shr	local06, #31
20014     14 23 62 F5 | 	xor	local03, local06
20018     FF 26 0E F2 | 	cmp	local05, #255 wz
2001c     90 00 90 AD |  if_e	jmp	#LR__2883
20020     FF 2C 0E F2 | 	cmp	local08, #255 wz
20024     D8 00 90 AD |  if_e	jmp	#LR__2885
20028     00 26 0E F2 | 	cmp	local05, #0 wz
2002c     0C 01 90 AD |  if_e	jmp	#LR__2886
20030     17 24 26 F4 | 	bith	local04, #23
20034                 | LR__2880
20034     00 2C 0E F2 | 	cmp	local08, #0 wz
20038     44 01 90 AD |  if_e	jmp	#LR__2890
2003c     17 2A 26 F4 | 	bith	local07, #23
20040                 | LR__2881
20040     12 21 02 F6 | 	mov	local02, local04
20044     04 20 66 F0 | 	shl	local02, #4
20048     15 29 02 F6 | 	mov	local06, local07
2004c     05 28 66 F0 | 	shl	local06, #5
20050     14 21 02 FD | 	qmul	local02, local06
20054     16 27 02 F1 | 	add	local05, local08
20058     FE 26 86 F1 | 	sub	local05, #254
2005c     13 2F 02 F6 | 	mov	local09, local05
20060     04 24 66 F0 | 	shl	local04, #4
20064     05 2A 66 F0 | 	shl	local07, #5
20068     18 30 62 FD | 	getqx	local10
2006c     15 25 02 FD | 	qmul	local04, local07
20070     19 32 62 FD | 	getqy	local11
20074     00 80 00 FF 
20078     00 32 16 F2 | 	cmp	local11, ##16777216 wc
2007c     18 00 90 CD |  if_b	jmp	#LR__2882
20080     01 2E 06 F1 | 	add	local09, #1
20084     01 30 46 F0 | 	shr	local10, #1
20088     19 2D 02 F6 | 	mov	local08, local11
2008c     1F 2C 66 F0 | 	shl	local08, #31
20090     16 31 42 F5 | 	or	local10, local08
20094     01 32 46 F0 | 	shr	local11, #1
20098                 | LR__2882
20098     19 13 02 F6 | 	mov	arg01, local11
2009c     18 15 02 F6 | 	mov	arg02, local10
200a0     17 17 02 F6 | 	mov	arg03, local09
200a4     11 19 02 F6 | 	mov	arg04, local03
200a8     C4 31 B0 FD | 	call	#__system__pack_0539
200ac     10 01 90 FD | 	jmp	#LR__2894
200b0                 | LR__2883
200b0     00 24 0E F2 | 	cmp	local04, #0 wz
200b4     0F FB 01 56 |  if_ne	mov	result1, local01
200b8     04 01 90 5D |  if_ne	jmp	#LR__2894
200bc     FF 2C 56 F2 | 	cmps	local08, #255 wc
200c0     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
200c4     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
200c8     18 00 90 4D |  if_c_and_nz	jmp	#LR__2884
200cc     00 F8 3F CF 
200d0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
200d4     E8 00 90 CD |  if_b	jmp	#LR__2894
200d8     00 2A 0E F2 | 	cmp	local07, #0 wz
200dc     10 FB 01 56 |  if_ne	mov	result1, local02
200e0     DC 00 90 5D |  if_ne	jmp	#LR__2894
200e4                 | LR__2884
200e4     02 22 46 F5 | 	or	local03, #2
200e8     00 12 06 F6 | 	mov	arg01, #0
200ec     00 14 06 F6 | 	mov	arg02, #0
200f0     13 17 02 F6 | 	mov	arg03, local05
200f4     11 19 02 F6 | 	mov	arg04, local03
200f8     74 31 B0 FD | 	call	#__system__pack_0539
200fc     C0 00 90 FD | 	jmp	#LR__2894
20100                 | LR__2885
20100     00 26 0E F2 | 	cmp	local05, #0 wz
20104     00 24 0E A2 |  if_e	cmp	local04, #0 wz
20108     00 F8 3F AF 
2010c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
20110     AC 00 90 AD |  if_e	jmp	#LR__2894
20114     00 2A 0E F2 | 	cmp	local07, #0 wz
20118     10 FB 01 56 |  if_ne	mov	result1, local02
2011c     A0 00 90 5D |  if_ne	jmp	#LR__2894
20120     16 17 02 F6 | 	mov	arg03, local08
20124     11 19 02 F6 | 	mov	arg04, local03
20128     02 18 46 F5 | 	or	arg04, #2
2012c     00 12 06 F6 | 	mov	arg01, #0
20130     00 14 06 F6 | 	mov	arg02, #0
20134     38 31 B0 FD | 	call	#__system__pack_0539
20138     84 00 90 FD | 	jmp	#LR__2894
2013c                 | LR__2886
2013c     00 24 0E F2 | 	cmp	local04, #0 wz
20140     20 00 90 AD |  if_e	jmp	#LR__2889
20144     01 24 66 F0 | 	shl	local04, #1
20148     97 0A 48 FB | 	callpa	#(@LR__2888-@LR__2887)>>2,fcache_load_ptr_
2014c                 | LR__2887
2014c     00 40 00 FF 
20150     00 24 16 F2 | 	cmp	local04, ##8388608 wc
20154     01 26 86 C1 |  if_b	sub	local05, #1
20158     01 24 66 C0 |  if_b	shl	local04, #1
2015c     EC FF 9F CD |  if_b	jmp	#LR__2887
20160                 | LR__2888
20160     D0 FE 9F FD | 	jmp	#LR__2880
20164                 | LR__2889
20164     08 22 46 F5 | 	or	local03, #8
20168     00 12 06 F6 | 	mov	arg01, #0
2016c     00 14 06 F6 | 	mov	arg02, #0
20170     00 16 06 F6 | 	mov	arg03, #0
20174     11 19 02 F6 | 	mov	arg04, local03
20178     F4 30 B0 FD | 	call	#__system__pack_0539
2017c     40 00 90 FD | 	jmp	#LR__2894
20180                 | LR__2890
20180     00 2A 0E F2 | 	cmp	local07, #0 wz
20184     20 00 90 AD |  if_e	jmp	#LR__2893
20188     01 2A 66 F0 | 	shl	local07, #1
2018c     97 0A 48 FB | 	callpa	#(@LR__2892-@LR__2891)>>2,fcache_load_ptr_
20190                 | LR__2891
20190     00 40 00 FF 
20194     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
20198     01 2C 86 C1 |  if_b	sub	local08, #1
2019c     01 2A 66 C0 |  if_b	shl	local07, #1
201a0     EC FF 9F CD |  if_b	jmp	#LR__2891
201a4                 | LR__2892
201a4     98 FE 9F FD | 	jmp	#LR__2881
201a8                 | LR__2893
201a8     08 22 46 F5 | 	or	local03, #8
201ac     00 12 06 F6 | 	mov	arg01, #0
201b0     00 14 06 F6 | 	mov	arg02, #0
201b4     00 16 06 F6 | 	mov	arg03, #0
201b8     11 19 02 F6 | 	mov	arg04, local03
201bc     B0 30 B0 FD | 	call	#__system__pack_0539
201c0                 | LR__2894
201c0     A7 F0 03 F6 | 	mov	ptra, fp
201c4     B2 00 A0 FD | 	call	#popregs_
201c8                 | __system___float_mul_ret
201c8     2D 00 64 FD | 	ret
201cc                 | 
201cc                 | __system___float_div
201cc     0E 4A 05 F6 | 	mov	COUNT_, #14
201d0     A8 00 A0 FD | 	call	#pushregs_
201d4     09 23 02 F6 | 	mov	local03, arg01
201d8     0A 25 02 F6 | 	mov	local04, arg02
201dc     11 27 02 F6 | 	mov	local05, local03
201e0     13 29 02 F6 | 	mov	local06, local05
201e4     16 28 46 F7 | 	zerox	local06, #22
201e8     13 2B 02 F6 | 	mov	local07, local05
201ec     01 2A 66 F0 | 	shl	local07, #1
201f0     18 2A 46 F0 | 	shr	local07, #24
201f4     1F 26 46 F0 | 	shr	local05, #31
201f8     12 FB 01 F6 | 	mov	result1, local04
201fc     FD 2C 02 F6 | 	mov	local08, result1
20200     16 2F 02 F6 | 	mov	local09, local08
20204     16 2E 46 F7 | 	zerox	local09, #22
20208     16 31 02 F6 | 	mov	local10, local08
2020c     01 30 66 F0 | 	shl	local10, #1
20210     18 30 46 F0 | 	shr	local10, #24
20214     1F 2C 46 F0 | 	shr	local08, #31
20218     16 27 62 F5 | 	xor	local05, local08
2021c     FF 2A 0E F2 | 	cmp	local07, #255 wz
20220     D4 00 90 AD |  if_e	jmp	#LR__2905
20224     FF 30 0E F2 | 	cmp	local10, #255 wz
20228     04 01 90 AD |  if_e	jmp	#LR__2906
2022c     00 2A 0E F2 | 	cmp	local07, #0 wz
20230     24 01 90 AD |  if_e	jmp	#LR__2907
20234     17 28 26 F4 | 	bith	local06, #23
20238                 | LR__2900
20238     00 30 0E F2 | 	cmp	local10, #0 wz
2023c     70 01 90 AD |  if_e	jmp	#LR__2911
20240     17 2E 26 F4 | 	bith	local09, #23
20244                 | LR__2901
20244     18 2B 82 F1 | 	sub	local07, local10
20248     15 33 02 F6 | 	mov	local11, local07
2024c     14 13 02 F6 | 	mov	arg01, local06
20250     02 12 46 F0 | 	shr	arg01, #2
20254     1E 28 66 F0 | 	shl	local06, #30
20258     14 15 02 F6 | 	mov	arg02, local06
2025c     17 17 02 F6 | 	mov	arg03, local09
20260     28 12 62 FD | 	setq	arg01
20264     0B 15 12 FD | 	qdiv	arg02, arg03
20268     00 34 06 F6 | 	mov	local12, #0
2026c     18 1E 62 FD | 	getqx	local01
20270     19 FC 61 FD | 	getqy	result2
20274     FE 20 02 F6 | 	mov	local02, result2
20278     0F 37 02 F6 | 	mov	local13, local01
2027c     00 20 4E F2 | 	cmps	local02, #0 wz
20280     1B 39 02 F6 | 	mov	local14, local13
20284     19 38 66 F0 | 	shl	local14, #25
20288     01 34 06 56 |  if_ne	mov	local12, #1
2028c     1A 39 42 F5 | 	or	local14, local12
20290     07 36 46 F0 | 	shr	local13, #7
20294     00 80 00 FF 
20298     00 36 16 F2 | 	cmp	local13, ##16777216 wc
2029c     1C 00 90 CD |  if_b	jmp	#LR__2902
202a0     01 32 06 F1 | 	add	local11, #1
202a4     01 38 46 F0 | 	shr	local14, #1
202a8     1B 35 02 F6 | 	mov	local12, local13
202ac     1F 34 66 F0 | 	shl	local12, #31
202b0     1A 39 42 F5 | 	or	local14, local12
202b4     01 36 46 F0 | 	shr	local13, #1
202b8     24 00 90 FD | 	jmp	#LR__2904
202bc                 | LR__2902
202bc     00 40 00 FF 
202c0     00 36 16 F2 | 	cmp	local13, ##8388608 wc
202c4     18 00 90 3D |  if_ae	jmp	#LR__2903
202c8     01 32 86 F1 | 	sub	local11, #1
202cc     01 36 66 F0 | 	shl	local13, #1
202d0     1C 35 02 F6 | 	mov	local12, local14
202d4     1F 34 46 F0 | 	shr	local12, #31
202d8     1A 37 42 F5 | 	or	local13, local12
202dc     01 38 66 F0 | 	shl	local14, #1
202e0                 | LR__2903
202e0                 | LR__2904
202e0     1B 13 02 F6 | 	mov	arg01, local13
202e4     1C 15 02 F6 | 	mov	arg02, local14
202e8     19 17 02 F6 | 	mov	arg03, local11
202ec     13 19 02 F6 | 	mov	arg04, local05
202f0     7C 2F B0 FD | 	call	#__system__pack_0539
202f4     F8 00 90 FD | 	jmp	#LR__2915
202f8                 | LR__2905
202f8     00 28 0E F2 | 	cmp	local06, #0 wz
202fc     11 FB 01 56 |  if_ne	mov	result1, local03
20300     EC 00 90 5D |  if_ne	jmp	#LR__2915
20304     FF 30 0E F2 | 	cmp	local10, #255 wz
20308     00 F8 3F AF 
2030c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
20310     DC 00 90 AD |  if_e	jmp	#LR__2915
20314     02 26 46 F5 | 	or	local05, #2
20318     00 12 06 F6 | 	mov	arg01, #0
2031c     00 14 06 F6 | 	mov	arg02, #0
20320     15 17 02 F6 | 	mov	arg03, local07
20324     13 19 02 F6 | 	mov	arg04, local05
20328     44 2F B0 FD | 	call	#__system__pack_0539
2032c     C0 00 90 FD | 	jmp	#LR__2915
20330                 | LR__2906
20330     00 2E 0E F2 | 	cmp	local09, #0 wz
20334     12 FB 01 56 |  if_ne	mov	result1, local04
20338     B4 00 90 5D |  if_ne	jmp	#LR__2915
2033c     13 19 02 F6 | 	mov	arg04, local05
20340     08 18 46 F5 | 	or	arg04, #8
20344     00 12 06 F6 | 	mov	arg01, #0
20348     00 14 06 F6 | 	mov	arg02, #0
2034c     00 16 06 F6 | 	mov	arg03, #0
20350     1C 2F B0 FD | 	call	#__system__pack_0539
20354     98 00 90 FD | 	jmp	#LR__2915
20358                 | LR__2907
20358     00 28 0E F2 | 	cmp	local06, #0 wz
2035c     20 00 90 AD |  if_e	jmp	#LR__2910
20360     01 28 66 F0 | 	shl	local06, #1
20364     97 0A 48 FB | 	callpa	#(@LR__2909-@LR__2908)>>2,fcache_load_ptr_
20368                 | LR__2908
20368     00 40 00 FF 
2036c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
20370     01 2A 86 C1 |  if_b	sub	local07, #1
20374     01 28 66 C0 |  if_b	shl	local06, #1
20378     EC FF 9F CD |  if_b	jmp	#LR__2908
2037c                 | LR__2909
2037c     B8 FE 9F FD | 	jmp	#LR__2900
20380                 | LR__2910
20380     00 30 0E F2 | 	cmp	local10, #0 wz
20384     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
20388     00 F8 3F AF 
2038c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
20390     5C 00 90 AD |  if_e	jmp	#LR__2915
20394     13 19 02 F6 | 	mov	arg04, local05
20398     08 18 46 F5 | 	or	arg04, #8
2039c     00 12 06 F6 | 	mov	arg01, #0
203a0     00 14 06 F6 | 	mov	arg02, #0
203a4     00 16 06 F6 | 	mov	arg03, #0
203a8     C4 2E B0 FD | 	call	#__system__pack_0539
203ac     40 00 90 FD | 	jmp	#LR__2915
203b0                 | LR__2911
203b0     00 2E 0E F2 | 	cmp	local09, #0 wz
203b4     20 00 90 AD |  if_e	jmp	#LR__2914
203b8     01 2E 66 F0 | 	shl	local09, #1
203bc     97 0A 48 FB | 	callpa	#(@LR__2913-@LR__2912)>>2,fcache_load_ptr_
203c0                 | LR__2912
203c0     00 40 00 FF 
203c4     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
203c8     01 30 86 C1 |  if_b	sub	local10, #1
203cc     01 2E 66 C0 |  if_b	shl	local09, #1
203d0     EC FF 9F CD |  if_b	jmp	#LR__2912
203d4                 | LR__2913
203d4     6C FE 9F FD | 	jmp	#LR__2901
203d8                 | LR__2914
203d8     02 26 46 F5 | 	or	local05, #2
203dc     00 12 06 F6 | 	mov	arg01, #0
203e0     00 14 06 F6 | 	mov	arg02, #0
203e4     00 16 06 F6 | 	mov	arg03, #0
203e8     13 19 02 F6 | 	mov	arg04, local05
203ec     80 2E B0 FD | 	call	#__system__pack_0539
203f0                 | LR__2915
203f0     A7 F0 03 F6 | 	mov	ptra, fp
203f4     B2 00 A0 FD | 	call	#popregs_
203f8                 | __system___float_div_ret
203f8     2D 00 64 FD | 	ret
203fc                 | 
203fc                 | __system___float_cmp
203fc     00 C0 3F FF 
20400     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
20404     00 C0 3F CF 
20408     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2040c     0B FB 01 36 |  if_ae	mov	result1, arg03
20410     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
20414     00 C0 7F FF 
20418     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2041c     00 C0 7F CF 
20420     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
20424     0B FB 01 36 |  if_ae	mov	result1, arg03
20428     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2042c     00 12 56 F2 | 	cmps	arg01, #0 wc
20430     2C 00 90 3D |  if_ae	jmp	#LR__2920
20434     00 14 56 F2 | 	cmps	arg02, #0 wc
20438     0A FB 01 C6 |  if_b	mov	result1, arg02
2043c     09 FB 81 C1 |  if_b	sub	result1, arg01
20440     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
20444     00 14 0E F2 | 	cmp	arg02, #0 wz
20448     00 00 40 AF 
2044c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
20450     00 FA 05 A6 |  if_e	mov	result1, #0
20454     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
20458     01 FA 65 F6 | 	neg	result1, #1
2045c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
20460                 | LR__2920
20460     00 14 56 F2 | 	cmps	arg02, #0 wc
20464     1C 00 90 3D |  if_ae	jmp	#LR__2921
20468     00 12 0E F2 | 	cmp	arg01, #0 wz
2046c     00 00 40 AF 
20470     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
20474     00 FA 05 A6 |  if_e	mov	result1, #0
20478     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2047c     01 FA 05 F6 | 	mov	result1, #1
20480     08 00 90 FD | 	jmp	#__system___float_cmp_ret
20484                 | LR__2921
20484     0A 13 82 F1 | 	sub	arg01, arg02
20488     09 FB 01 F6 | 	mov	result1, arg01
2048c                 | __system___float_cmp_ret
2048c     2D 00 64 FD | 	ret
20490                 | 
20490                 | __system___float_tointeger
20490     02 4A 05 F6 | 	mov	COUNT_, #2
20494     A8 00 A0 FD | 	call	#pushregs_
20498     50 00 B0 FD | 	call	#__system___float_Unpack
2049c     FF FF 7F FF 
204a0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
204a4     34 00 90 CD |  if_b	jmp	#LR__2930
204a8     1F FC 55 F2 | 	cmps	result2, #31 wc
204ac     2C 00 90 3D |  if_ae	jmp	#LR__2930
204b0     02 FE 65 F0 | 	shl	result3, #2
204b4     1E 1E 06 F6 | 	mov	local01, #30
204b8     FE 1E 82 F1 | 	sub	local01, result2
204bc     0F FF 41 F0 | 	shr	result3, local01
204c0     FF 20 02 F6 | 	mov	local02, result3
204c4     0A 21 02 F1 | 	add	local02, arg02
204c8     01 20 46 F0 | 	shr	local02, #1
204cc     00 FA 0D F2 | 	cmp	result1, #0 wz
204d0     10 21 62 56 |  if_ne	neg	local02, local02
204d4     10 FB 01 F6 | 	mov	result1, local02
204d8     04 00 90 FD | 	jmp	#LR__2931
204dc                 | LR__2930
204dc     00 FA 05 F6 | 	mov	result1, #0
204e0                 | LR__2931
204e0     A7 F0 03 F6 | 	mov	ptra, fp
204e4     B2 00 A0 FD | 	call	#popregs_
204e8                 | __system___float_tointeger_ret
204e8     2D 00 64 FD | 	ret
204ec                 | 
204ec                 | __system___float_Unpack
204ec     09 01 02 F6 | 	mov	_var01, arg01
204f0     1F 00 46 F0 | 	shr	_var01, #31
204f4     09 03 02 F6 | 	mov	_var02, arg01
204f8     01 02 66 F0 | 	shl	_var02, #1
204fc     18 02 4E F0 | 	shr	_var02, #24 wz
20500     17 13 06 F4 | 	bitl	arg01, #279
20504     06 12 66 50 |  if_ne	shl	arg01, #6
20508     1D 12 26 54 |  if_ne	bith	arg01, #29
2050c     1C 00 90 5D |  if_ne	jmp	#LR__2940
20510     09 05 92 F7 | 	encod	_var03, arg01 wc
20514     01 04 06 C1 |  if_b	add	_var03, #1
20518     17 04 86 F1 | 	sub	_var03, #23
2051c     02 03 02 F6 | 	mov	_var02, _var03
20520     07 FC 05 F6 | 	mov	result2, #7
20524     02 FD 81 F1 | 	sub	result2, _var03
20528     FE 12 62 F0 | 	shl	arg01, result2
2052c                 | LR__2940
2052c     7F 02 86 F1 | 	sub	_var02, #127
20530     09 FF 01 F6 | 	mov	result3, arg01
20534     00 FB 01 F6 | 	mov	result1, _var01
20538     01 FD 01 F6 | 	mov	result2, _var02
2053c                 | __system___float_Unpack_ret
2053c     2D 00 64 FD | 	ret
20540                 | 
20540                 | __system___float_Pack
20540     00 00 06 F6 | 	mov	_var01, #0
20544     00 16 0E F2 | 	cmp	arg03, #0 wz
20548     8C 00 90 AD |  if_e	jmp	#LR__2951
2054c     0B 03 92 F7 | 	encod	_var02, arg03 wc
20550     01 02 06 C1 |  if_b	add	_var02, #1
20554     21 00 06 F6 | 	mov	_var01, #33
20558     01 01 82 F1 | 	sub	_var01, _var02
2055c     00 17 62 F0 | 	shl	arg03, _var01
20560     03 02 06 F6 | 	mov	_var02, #3
20564     00 03 82 F1 | 	sub	_var02, _var01
20568     01 15 02 F1 | 	add	arg02, _var02
2056c     0A 05 02 F6 | 	mov	_var03, arg02
20570     00 17 06 F1 | 	add	arg03, #256
20574     0B 03 02 F6 | 	mov	_var02, arg03
20578     FF 02 2E F5 | 	andn	_var02, #255 wz
2057c     01 04 06 A1 |  if_e	add	_var03, #1
20580     7F 04 06 F1 | 	add	_var03, #127
20584     FF FF 7F FF 
20588     E9 05 46 F3 | 	fges	_var03, ##-23
2058c     FF 04 66 F3 | 	fles	_var03, #255
20590     01 04 56 F2 | 	cmps	_var03, #1 wc
20594     1C 00 90 3D |  if_ae	jmp	#LR__2950
20598     01 16 46 F0 | 	shr	arg03, #1
2059c     1F 02 C6 F9 | 	decod	_var02, #31
205a0     0B 03 02 F1 | 	add	_var02, arg03
205a4     02 05 62 F6 | 	neg	_var03, _var03
205a8     02 03 42 F0 | 	shr	_var02, _var03
205ac     01 17 02 F6 | 	mov	arg03, _var02
205b0     00 04 06 F6 | 	mov	_var03, #0
205b4                 | LR__2950
205b4     09 FB 01 F6 | 	mov	result1, arg01
205b8     1F FA 65 F0 | 	shl	result1, #31
205bc     02 03 02 F6 | 	mov	_var02, _var03
205c0     17 02 66 F0 | 	shl	_var02, #23
205c4     01 FB 41 F5 | 	or	result1, _var02
205c8     0B 07 02 F6 | 	mov	_var04, arg03
205cc     09 06 46 F0 | 	shr	_var04, #9
205d0     03 FB 41 F5 | 	or	result1, _var04
205d4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
205d8                 | LR__2951
205d8     00 FB 01 F6 | 	mov	result1, _var01
205dc                 | __system___float_Pack_ret
205dc     2D 00 64 FD | 	ret
205e0                 | 
205e0                 | __system___basic_print_float
205e0     05 4A 05 F6 | 	mov	COUNT_, #5
205e4     A8 00 A0 FD | 	call	#pushregs_
205e8     09 1F 02 F6 | 	mov	local01, arg01
205ec     0A 21 02 F6 | 	mov	local02, arg02
205f0     0B 23 0A F6 | 	mov	local03, arg03 wz
205f4     0C 25 02 F6 | 	mov	local04, arg04
205f8     14 00 90 5D |  if_ne	jmp	#LR__2960
205fc     23 24 0E F2 | 	cmp	local04, #35 wz
20600     80 02 10 AF 
20604     00 26 06 A6 |  if_e	mov	local05, ##537198592
20608     1D 26 C6 59 |  if_ne	decod	local05, #29
2060c     13 23 02 F6 | 	mov	local03, local05
20610                 | LR__2960
20610     0F 13 02 F6 | 	mov	arg01, local01
20614     40 27 B0 FD | 	call	#__system___gettxfunc
20618     FD 26 0A F6 | 	mov	local05, result1 wz
2061c     00 FA 05 A6 |  if_e	mov	result1, #0
20620     13 13 02 56 |  if_ne	mov	arg01, local05
20624     11 15 02 56 |  if_ne	mov	arg02, local03
20628     10 17 02 56 |  if_ne	mov	arg03, local02
2062c     12 19 02 56 |  if_ne	mov	arg04, local04
20630     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
20634     A7 F0 03 F6 | 	mov	ptra, fp
20638     B2 00 A0 FD | 	call	#popregs_
2063c                 | __system___basic_print_float_ret
2063c     2D 00 64 FD | 	ret
20640                 | 
20640                 | __system____builtin_atoi
20640     07 4A 05 F6 | 	mov	COUNT_, #7
20644     A8 00 A0 FD | 	call	#pushregs_
20648                 | __system____builtin_atoi_enter
20648     09 1F 02 F6 | 	mov	local01, arg01
2064c     0A 21 02 F6 | 	mov	local02, arg02
20650     00 22 06 F6 | 	mov	local03, #0
20654     00 24 06 F6 | 	mov	local04, #0
20658     00 26 06 F6 | 	mov	local05, #0
2065c     97 08 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
20660                 | LR__2970
20660     0F 29 C2 FA | 	rdbyte	local06, local01
20664     20 28 0E F2 | 	cmp	local06, #32 wz
20668     01 1E 06 A1 |  if_e	add	local01, #1
2066c     F0 FF 9F AD |  if_e	jmp	#LR__2970
20670                 | LR__2971
20670     0F 2B C2 FA | 	rdbyte	local07, local01
20674                 | LR__2972
20674     2D 2A 0E F2 | 	cmp	local07, #45 wz
20678     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
2067c     18 00 90 5D |  if_ne	jmp	#LR__2973
20680     01 1E 06 F1 | 	add	local01, #1
20684     2D 2A 0E F2 | 	cmp	local07, #45 wz
20688     01 28 06 A6 |  if_e	mov	local06, #1
2068c     14 27 C2 A2 |  if_e	subr	local05, local06
20690     0F 2B C2 FA | 	rdbyte	local07, local01
20694     DC FF 9F FD | 	jmp	#LR__2972
20698                 | LR__2973
20698     97 48 48 FB | 	callpa	#(@LR__2981-@LR__2974)>>2,fcache_load_ptr_
2069c                 | LR__2974
2069c                 | LR__2975
2069c     0F 2B C2 FA | 	rdbyte	local07, local01
206a0     5F 2A 0E F2 | 	cmp	local07, #95 wz
206a4     01 1E 06 F1 | 	add	local01, #1
206a8     F0 FF 9F AD |  if_e	jmp	#LR__2975
206ac     30 2A 0E F2 | 	cmp	local07, #48 wz
206b0     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
206b4     00 24 06 A6 |  if_e	mov	local04, #0
206b8     60 00 90 AD |  if_e	jmp	#LR__2980
206bc     31 2A 56 F2 | 	cmps	local07, #49 wc
206c0     18 00 90 CD |  if_b	jmp	#LR__2976
206c4     3A 2A 56 F2 | 	cmps	local07, #58 wc
206c8     15 25 02 C6 |  if_b	mov	local04, local07
206cc     30 24 86 C1 |  if_b	sub	local04, #48
206d0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
206d4     0A 20 06 86 |  if_c_and_z	mov	local02, #10
206d8     40 00 90 CD |  if_b	jmp	#LR__2979
206dc                 | LR__2976
206dc     0B 20 56 F2 | 	cmps	local02, #11 wc
206e0     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
206e4     14 00 90 CD |  if_b	jmp	#LR__2977
206e8     67 2A 56 F2 | 	cmps	local07, #103 wc
206ec     61 2A 86 C1 |  if_b	sub	local07, #97
206f0     0A 24 06 C6 |  if_b	mov	local04, #10
206f4     15 25 02 C1 |  if_b	add	local04, local07
206f8     20 00 90 CD |  if_b	jmp	#LR__2978
206fc                 | LR__2977
206fc     0B 20 56 F2 | 	cmps	local02, #11 wc
20700     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
20704     24 00 90 CD |  if_b	jmp	#LR__2982
20708     47 2A 56 F2 | 	cmps	local07, #71 wc
2070c     41 2A 86 C1 |  if_b	sub	local07, #65
20710     0A 24 06 C6 |  if_b	mov	local04, #10
20714     15 25 02 C1 |  if_b	add	local04, local07
20718     10 00 90 3D |  if_ae	jmp	#LR__2982
2071c                 | LR__2978
2071c                 | LR__2979
2071c                 | LR__2980
2071c     11 21 02 FD | 	qmul	local02, local03
20720     18 22 62 FD | 	getqx	local03
20724     12 23 02 F1 | 	add	local03, local04
20728     70 FF 9F FD | 	jmp	#LR__2974
2072c                 | LR__2981
2072c                 | LR__2982
2072c     00 20 0E F2 | 	cmp	local02, #0 wz
20730     64 00 90 5D |  if_ne	jmp	#LR__2988
20734     78 2A 0E F2 | 	cmp	local07, #120 wz
20738     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
2073c     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
20740     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
20744     14 00 90 5D |  if_ne	jmp	#LR__2983
20748     0F 13 02 F6 | 	mov	arg01, local01
2074c     10 14 06 F6 | 	mov	arg02, #16
20750     EC FE BF FD | 	call	#__system____builtin_atoi
20754     FD 22 02 F6 | 	mov	local03, result1
20758     3C 00 90 FD | 	jmp	#LR__2987
2075c                 | LR__2983
2075c     62 2A 0E F2 | 	cmp	local07, #98 wz
20760     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
20764     14 00 90 5D |  if_ne	jmp	#LR__2984
20768     0F 13 02 F6 | 	mov	arg01, local01
2076c     02 14 06 F6 | 	mov	arg02, #2
20770     CC FE BF FD | 	call	#__system____builtin_atoi
20774     FD 22 02 F6 | 	mov	local03, result1
20778     1C 00 90 FD | 	jmp	#LR__2986
2077c                 | LR__2984
2077c     6F 2A 0E F2 | 	cmp	local07, #111 wz
20780     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
20784     10 00 90 5D |  if_ne	jmp	#LR__2985
20788     0F 13 02 F6 | 	mov	arg01, local01
2078c     08 14 06 F6 | 	mov	arg02, #8
20790     AC FE BF FD | 	call	#__system____builtin_atoi
20794     FD 22 02 F6 | 	mov	local03, result1
20798                 | LR__2985
20798                 | LR__2986
20798                 | LR__2987
20798                 | LR__2988
20798     00 26 0E F2 | 	cmp	local05, #0 wz
2079c     11 23 62 56 |  if_ne	neg	local03, local03
207a0     11 FB 01 F6 | 	mov	result1, local03
207a4     A7 F0 03 F6 | 	mov	ptra, fp
207a8     B2 00 A0 FD | 	call	#popregs_
207ac                 | __system____builtin_atoi_ret
207ac     2D 00 64 FD | 	ret
207b0                 | 
207b0                 | __system____builtin_atof
207b0     07 4A 05 F6 | 	mov	COUNT_, #7
207b4     A8 00 A0 FD | 	call	#pushregs_
207b8     09 1F 02 F6 | 	mov	local01, arg01
207bc     00 20 06 F6 | 	mov	local02, #0
207c0     00 22 06 F6 | 	mov	local03, #0
207c4     00 24 06 F6 | 	mov	local04, #0
207c8     00 26 06 F6 | 	mov	local05, #0
207cc     97 08 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
207d0                 | LR__2990
207d0     0F 17 C2 FA | 	rdbyte	arg03, local01
207d4     20 16 0E F2 | 	cmp	arg03, #32 wz
207d8     01 1E 06 A1 |  if_e	add	local01, #1
207dc     F0 FF 9F AD |  if_e	jmp	#LR__2990
207e0                 | LR__2991
207e0     0F 29 C2 FA | 	rdbyte	local06, local01
207e4                 | LR__2992
207e4     2B 28 0E F2 | 	cmp	local06, #43 wz
207e8     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
207ec     14 00 90 5D |  if_ne	jmp	#LR__2993
207f0     2D 28 0E F2 | 	cmp	local06, #45 wz
207f4     1F 24 E6 A4 |  if_e	bitnot	local04, #31
207f8     01 1E 06 F1 | 	add	local01, #1
207fc     0F 29 C2 FA | 	rdbyte	local06, local01
20800     E0 FF 9F FD | 	jmp	#LR__2992
20804                 | LR__2993
20804                 | LR__2994
20804     97 08 48 FB | 	callpa	#(@LR__2996-@LR__2995)>>2,fcache_load_ptr_
20808                 | LR__2995
20808     0F 29 C2 FA | 	rdbyte	local06, local01
2080c     5F 28 0E F2 | 	cmp	local06, #95 wz
20810     01 1E 06 F1 | 	add	local01, #1
20814     F0 FF 9F AD |  if_e	jmp	#LR__2995
20818                 | LR__2996
20818     00 28 0E F2 | 	cmp	local06, #0 wz
2081c     5C 00 90 AD |  if_e	jmp	#LR__2998
20820     30 28 56 F2 | 	cmps	local06, #48 wc
20824     44 00 90 CD |  if_b	jmp	#LR__2997
20828     3A 28 56 F2 | 	cmps	local06, #58 wc
2082c     3C 00 90 3D |  if_ae	jmp	#LR__2997
20830     10 13 02 F6 | 	mov	arg01, local02
20834     00 90 20 FF 
20838     00 14 06 F6 | 	mov	arg02, ##1092616192
2083c     88 F7 BF FD | 	call	#__system___float_mul
20840     FD 20 02 F6 | 	mov	local02, result1
20844     30 28 86 F1 | 	sub	local06, #48
20848     14 13 02 F6 | 	mov	arg01, local06
2084c     74 F3 BF FD | 	call	#__system___float_fromuns
20850     FD 14 02 F6 | 	mov	arg02, result1
20854     10 13 02 F6 | 	mov	arg01, local02
20858     9C F3 BF FD | 	call	#__system___float_add
2085c     FD 20 02 F6 | 	mov	local02, result1
20860     00 26 0E F2 | 	cmp	local05, #0 wz
20864     01 22 86 51 |  if_ne	sub	local03, #1
20868     98 FF 9F FD | 	jmp	#LR__2994
2086c                 | LR__2997
2086c     2E 28 0E F2 | 	cmp	local06, #46 wz
20870     00 26 0E A2 |  if_e	cmp	local05, #0 wz
20874     01 26 06 A6 |  if_e	mov	local05, #1
20878     88 FF 9F AD |  if_e	jmp	#LR__2994
2087c                 | LR__2998
2087c     45 28 0E F2 | 	cmp	local06, #69 wz
20880     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
20884     18 00 90 5D |  if_ne	jmp	#LR__2999
20888     0F 13 02 F6 | 	mov	arg01, local01
2088c     00 14 06 F6 | 	mov	arg02, #0
20890     AC FD BF FD | 	call	#__system____builtin_atoi
20894     11 FB 01 F1 | 	add	result1, local03
20898     FD 2A 02 F6 | 	mov	local07, result1
2089c     04 00 90 FD | 	jmp	#LR__3000
208a0                 | LR__2999
208a0     11 2B 02 F6 | 	mov	local07, local03
208a4                 | LR__3000
208a4     15 17 02 F6 | 	mov	arg03, local07
208a8     10 13 02 F6 | 	mov	arg01, local02
208ac     00 90 20 FF 
208b0     00 14 06 F6 | 	mov	arg02, ##1092616192
208b4     BC 06 B0 FD | 	call	#__system___float_pow_n
208b8     12 FB 61 F5 | 	xor	result1, local04
208bc     A7 F0 03 F6 | 	mov	ptra, fp
208c0     B2 00 A0 FD | 	call	#popregs_
208c4                 | __system____builtin_atof_ret
208c4     2D 00 64 FD | 	ret
208c8                 | 
208c8                 | __system____builtin_ilogb
208c8     20 FC BF FD | 	call	#__system___float_Unpack
208cc     00 FE 0D F2 | 	cmp	result3, #0 wz
208d0     00 00 40 AF 
208d4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
208d8     24 00 90 AD |  if_e	jmp	#LR__3011
208dc     80 FC 0D F2 | 	cmp	result2, #128 wz
208e0     18 00 90 5D |  if_ne	jmp	#LR__3010
208e4     00 00 10 FF 
208e8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
208ec     1E FA CD A9 |  if_e	bmask	result1, #30
208f0     0C 00 90 AD |  if_e	jmp	#LR__3011
208f4     1F FA C5 F9 | 	decod	result1, #31
208f8     04 00 90 FD | 	jmp	#LR__3011
208fc                 | LR__3010
208fc     FE FA 01 F6 | 	mov	result1, result2
20900                 | LR__3011
20900                 | __system____builtin_ilogb_ret
20900     2D 00 64 FD | 	ret
20904                 | 
20904                 | __system____builtin_sinf
20904     03 4A 05 F6 | 	mov	COUNT_, #3
20908     A8 00 A0 FD | 	call	#pushregs_
2090c     09 1F 02 F6 | 	mov	local01, arg01
20910     87 64 20 FF 
20914     DB 15 06 F6 | 	mov	arg02, ##1086918619
20918     B0 F8 BF FD | 	call	#__system___float_div
2091c     FD 12 02 F6 | 	mov	arg01, result1
20920     00 14 06 F6 | 	mov	arg02, #0
20924     68 FB BF FD | 	call	#__system___float_tointeger
20928     FD 16 0A F6 | 	mov	arg03, result1 wz
2092c     44 00 90 AD |  if_e	jmp	#LR__3020
20930     0B 13 52 F6 | 	abs	arg01, arg03 wc
20934     1F 20 C6 C9 |  if_b	decod	local02, #31
20938     00 20 06 36 |  if_ae	mov	local02, #0
2093c     84 F2 BF FD | 	call	#__system___float_fromuns
20940     10 FB 61 F5 | 	xor	result1, local02
20944     FD 12 02 F6 | 	mov	arg01, result1
20948     1E 14 C6 F9 | 	decod	arg02, #30
2094c     78 F6 BF FD | 	call	#__system___float_mul
20950     FD 12 02 F6 | 	mov	arg01, result1
20954     87 24 20 FF 
20958     DB 15 06 F6 | 	mov	arg02, ##1078530011
2095c     68 F6 BF FD | 	call	#__system___float_mul
20960     FD 14 02 F6 | 	mov	arg02, result1
20964     0F 13 02 F6 | 	mov	arg01, local01
20968     1F 14 E6 F4 | 	bitnot	arg02, #31
2096c     88 F2 BF FD | 	call	#__system___float_add
20970     FD 1E 02 F6 | 	mov	local01, result1
20974                 | LR__3020
20974     0F 13 02 F6 | 	mov	arg01, local01
20978     66 E6 1E FF 
2097c     CD 14 06 F6 | 	mov	arg02, ##1036831949
20980     01 16 06 F6 | 	mov	arg03, #1
20984     74 FA BF FD | 	call	#__system___float_cmp
20988     00 FA 55 F2 | 	cmps	result1, #0 wc
2098c     5C 00 90 3D |  if_ae	jmp	#LR__3021
20990     0F 13 02 F6 | 	mov	arg01, local01
20994     66 E6 5E FF 
20998     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2099c     01 16 66 F6 | 	neg	arg03, #1
209a0     58 FA BF FD | 	call	#__system___float_cmp
209a4     01 FA 55 F2 | 	cmps	result1, #1 wc
209a8     40 00 90 CD |  if_b	jmp	#LR__3021
209ac     0F 13 02 F6 | 	mov	arg01, local01
209b0     0F 15 02 F6 | 	mov	arg02, local01
209b4     10 F6 BF FD | 	call	#__system___float_mul
209b8     FD 12 02 F6 | 	mov	arg01, result1
209bc     0F 15 02 F6 | 	mov	arg02, local01
209c0     04 F6 BF FD | 	call	#__system___float_mul
209c4     FD 12 02 F6 | 	mov	arg01, result1
209c8     00 60 20 FF 
209cc     00 14 06 F6 | 	mov	arg02, ##1086324736
209d0     F8 F7 BF FD | 	call	#__system___float_div
209d4     FD 14 02 F6 | 	mov	arg02, result1
209d8     0F 13 02 F6 | 	mov	arg01, local01
209dc     1F 14 E6 F4 | 	bitnot	arg02, #31
209e0     14 F2 BF FD | 	call	#__system___float_add
209e4     FD 22 02 F6 | 	mov	local03, result1
209e8     54 00 90 FD | 	jmp	#LR__3022
209ec                 | LR__3021
209ec     0F 13 02 F6 | 	mov	arg01, local01
209f0     7C 91 26 FF 
209f4     83 15 06 F6 | 	mov	arg02, ##1294137731
209f8     CC F5 BF FD | 	call	#__system___float_mul
209fc     FD 12 02 F6 | 	mov	arg01, result1
20a00     00 14 06 F6 | 	mov	arg02, #0
20a04     88 FA BF FD | 	call	#__system___float_tointeger
20a08     02 FA 65 F0 | 	shl	result1, #2
20a0c     00 00 A0 FF 
20a10     FD 00 48 FD | 	qrotate	##1073741824, result1
20a14     19 12 62 FD | 	getqy	arg01
20a18     09 13 52 F6 | 	abs	arg01, arg01 wc
20a1c     1F 20 C6 C9 |  if_b	decod	local02, #31
20a20     00 20 06 36 |  if_ae	mov	local02, #0
20a24     9C F1 BF FD | 	call	#__system___float_fromuns
20a28     10 FB 61 F5 | 	xor	result1, local02
20a2c     FD 12 02 F6 | 	mov	arg01, result1
20a30     00 40 27 FF 
20a34     00 14 06 F6 | 	mov	arg02, ##1317011456
20a38     90 F7 BF FD | 	call	#__system___float_div
20a3c     FD 22 02 F6 | 	mov	local03, result1
20a40                 | LR__3022
20a40     11 FB 01 F6 | 	mov	result1, local03
20a44     A7 F0 03 F6 | 	mov	ptra, fp
20a48     B2 00 A0 FD | 	call	#popregs_
20a4c                 | __system____builtin_sinf_ret
20a4c     2D 00 64 FD | 	ret
20a50                 | 
20a50                 | __system____builtin_tanf
20a50     02 4A 05 F6 | 	mov	COUNT_, #2
20a54     A8 00 A0 FD | 	call	#pushregs_
20a58     09 1F 02 F6 | 	mov	local01, arg01
20a5c     A4 FE BF FD | 	call	#__system____builtin_sinf
20a60     FD 20 02 F6 | 	mov	local02, result1
20a64     0F 15 02 F6 | 	mov	arg02, local01
20a68     87 E4 1F FF 
20a6c     DB 13 06 F6 | 	mov	arg01, ##1070141403
20a70     1F 14 E6 F4 | 	bitnot	arg02, #31
20a74     80 F1 BF FD | 	call	#__system___float_add
20a78     FD 12 02 F6 | 	mov	arg01, result1
20a7c     84 FE BF FD | 	call	#__system____builtin_sinf
20a80     FD 14 02 F6 | 	mov	arg02, result1
20a84     10 13 02 F6 | 	mov	arg01, local02
20a88     40 F7 BF FD | 	call	#__system___float_div
20a8c     A7 F0 03 F6 | 	mov	ptra, fp
20a90     B2 00 A0 FD | 	call	#popregs_
20a94                 | __system____builtin_tanf_ret
20a94     2D 00 64 FD | 	ret
20a98                 | 
20a98                 | __system____builtin_asinf
20a98     01 4A 05 F6 | 	mov	COUNT_, #1
20a9c     A8 00 A0 FD | 	call	#pushregs_
20aa0     09 1F 02 F6 | 	mov	local01, arg01
20aa4     0F 15 02 F6 | 	mov	arg02, local01
20aa8     0F 13 02 F6 | 	mov	arg01, local01
20aac     18 F5 BF FD | 	call	#__system___float_mul
20ab0     FD 14 02 F6 | 	mov	arg02, result1
20ab4     00 C0 1F FF 
20ab8     00 12 06 F6 | 	mov	arg01, ##1065353216
20abc     1F 14 E6 F4 | 	bitnot	arg02, #31
20ac0     34 F1 BF FD | 	call	#__system___float_add
20ac4     FD 12 02 F6 | 	mov	arg01, result1
20ac8     24 F4 BF FD | 	call	#__system___float_sqrt
20acc     FD 14 02 F6 | 	mov	arg02, result1
20ad0     0F 13 02 F6 | 	mov	arg01, local01
20ad4     58 00 B0 FD | 	call	#__system____builtin_atan2f
20ad8     A7 F0 03 F6 | 	mov	ptra, fp
20adc     B2 00 A0 FD | 	call	#popregs_
20ae0                 | __system____builtin_asinf_ret
20ae0     2D 00 64 FD | 	ret
20ae4                 | 
20ae4                 | __system____builtin_acosf
20ae4     01 4A 05 F6 | 	mov	COUNT_, #1
20ae8     A8 00 A0 FD | 	call	#pushregs_
20aec     09 1F 02 F6 | 	mov	local01, arg01
20af0     0F 15 02 F6 | 	mov	arg02, local01
20af4     0F 13 02 F6 | 	mov	arg01, local01
20af8     CC F4 BF FD | 	call	#__system___float_mul
20afc     FD 14 02 F6 | 	mov	arg02, result1
20b00     00 C0 1F FF 
20b04     00 12 06 F6 | 	mov	arg01, ##1065353216
20b08     1F 14 E6 F4 | 	bitnot	arg02, #31
20b0c     E8 F0 BF FD | 	call	#__system___float_add
20b10     FD 12 02 F6 | 	mov	arg01, result1
20b14     D8 F3 BF FD | 	call	#__system___float_sqrt
20b18     FD 12 02 F6 | 	mov	arg01, result1
20b1c     0F 15 02 F6 | 	mov	arg02, local01
20b20     0C 00 B0 FD | 	call	#__system____builtin_atan2f
20b24     A7 F0 03 F6 | 	mov	ptra, fp
20b28     B2 00 A0 FD | 	call	#popregs_
20b2c                 | __system____builtin_acosf_ret
20b2c     2D 00 64 FD | 	ret
20b30                 | 
20b30                 | __system____builtin_atan2f
20b30     04 4A 05 F6 | 	mov	COUNT_, #4
20b34     A8 00 A0 FD | 	call	#pushregs_
20b38     09 1F 02 F6 | 	mov	local01, arg01
20b3c     0A 21 02 F6 | 	mov	local02, arg02
20b40     0F 13 02 F6 | 	mov	arg01, local01
20b44     00 14 06 F6 | 	mov	arg02, #0
20b48     01 16 06 F6 | 	mov	arg03, #1
20b4c     AC F8 BF FD | 	call	#__system___float_cmp
20b50     00 FA 0D F2 | 	cmp	result1, #0 wz
20b54     28 00 90 5D |  if_ne	jmp	#LR__3030
20b58     10 13 02 F6 | 	mov	arg01, local02
20b5c     00 14 06 F6 | 	mov	arg02, #0
20b60     01 16 06 F6 | 	mov	arg03, #1
20b64     94 F8 BF FD | 	call	#__system___float_cmp
20b68     00 FA 55 F2 | 	cmps	result1, #0 wc
20b6c     87 24 60 CF 
20b70     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
20b74     DC 00 90 CD |  if_b	jmp	#LR__3031
20b78     00 FA 05 F6 | 	mov	result1, #0
20b7c     D4 00 90 FD | 	jmp	#LR__3031
20b80                 | LR__3030
20b80     10 13 02 F6 | 	mov	arg01, local02
20b84     10 15 02 F6 | 	mov	arg02, local02
20b88     3C F4 BF FD | 	call	#__system___float_mul
20b8c     FD 22 02 F6 | 	mov	local03, result1
20b90     0F 13 02 F6 | 	mov	arg01, local01
20b94     0F 15 02 F6 | 	mov	arg02, local01
20b98     2C F4 BF FD | 	call	#__system___float_mul
20b9c     FD 14 02 F6 | 	mov	arg02, result1
20ba0     11 13 02 F6 | 	mov	arg01, local03
20ba4     50 F0 BF FD | 	call	#__system___float_add
20ba8     FD 12 02 F6 | 	mov	arg01, result1
20bac     40 F3 BF FD | 	call	#__system___float_sqrt
20bb0     FD 22 02 F6 | 	mov	local03, result1
20bb4     10 13 02 F6 | 	mov	arg01, local02
20bb8     11 15 02 F6 | 	mov	arg02, local03
20bbc     0C F6 BF FD | 	call	#__system___float_div
20bc0     FD 20 02 F6 | 	mov	local02, result1
20bc4     0F 13 02 F6 | 	mov	arg01, local01
20bc8     11 15 02 F6 | 	mov	arg02, local03
20bcc     FC F5 BF FD | 	call	#__system___float_div
20bd0     FD 1E 02 F6 | 	mov	local01, result1
20bd4     00 40 27 FF 
20bd8     00 12 06 F6 | 	mov	arg01, ##1317011456
20bdc     10 15 02 F6 | 	mov	arg02, local02
20be0     E4 F3 BF FD | 	call	#__system___float_mul
20be4     FD 12 02 F6 | 	mov	arg01, result1
20be8     00 14 06 F6 | 	mov	arg02, #0
20bec     A0 F8 BF FD | 	call	#__system___float_tointeger
20bf0     FD 22 02 F6 | 	mov	local03, result1
20bf4     00 40 27 FF 
20bf8     00 12 06 F6 | 	mov	arg01, ##1317011456
20bfc     0F 15 02 F6 | 	mov	arg02, local01
20c00     C4 F3 BF FD | 	call	#__system___float_mul
20c04     FD 12 02 F6 | 	mov	arg01, result1
20c08     00 14 06 F6 | 	mov	arg02, #0
20c0c     80 F8 BF FD | 	call	#__system___float_tointeger
20c10     FD 22 52 FD | 	qvector	local03, result1
20c14     87 24 20 FF 
20c18     DB 23 06 F6 | 	mov	local03, ##1078530011
20c1c     19 12 62 FD | 	getqy	arg01
20c20     01 12 C6 F0 | 	sar	arg01, #1
20c24     09 13 52 F6 | 	abs	arg01, arg01 wc
20c28     1F 24 C6 C9 |  if_b	decod	local04, #31
20c2c     00 24 06 36 |  if_ae	mov	local04, #0
20c30     90 EF BF FD | 	call	#__system___float_fromuns
20c34     12 FB 61 F5 | 	xor	result1, local04
20c38     FD 12 02 F6 | 	mov	arg01, result1
20c3c     00 40 27 FF 
20c40     00 14 06 F6 | 	mov	arg02, ##1317011456
20c44     84 F5 BF FD | 	call	#__system___float_div
20c48     FD 14 02 F6 | 	mov	arg02, result1
20c4c     11 13 02 F6 | 	mov	arg01, local03
20c50     74 F3 BF FD | 	call	#__system___float_mul
20c54                 | LR__3031
20c54     A7 F0 03 F6 | 	mov	ptra, fp
20c58     B2 00 A0 FD | 	call	#popregs_
20c5c                 | __system____builtin_atan2f_ret
20c5c     2D 00 64 FD | 	ret
20c60                 | 
20c60                 | __system____builtin_exp2f
20c60     04 4A 05 F6 | 	mov	COUNT_, #4
20c64     A8 00 A0 FD | 	call	#pushregs_
20c68     09 1F 02 F6 | 	mov	local01, arg01
20c6c     00 7F 21 FF 
20c70     00 14 06 F6 | 	mov	arg02, ##1123942400
20c74     01 16 66 F6 | 	neg	arg03, #1
20c78     80 F7 BF FD | 	call	#__system___float_cmp
20c7c     00 FA 55 F2 | 	cmps	result1, #0 wc
20c80     00 C0 3F 3F 
20c84     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
20c88     DC 00 90 3D |  if_ae	jmp	#LR__3041
20c8c     0F 13 02 F6 | 	mov	arg01, local01
20c90     00 7F 61 FF 
20c94     00 14 06 F6 | 	mov	arg02, ##-1023541248
20c98     01 16 06 F6 | 	mov	arg03, #1
20c9c     5C F7 BF FD | 	call	#__system___float_cmp
20ca0     00 FA 55 F2 | 	cmps	result1, #0 wc
20ca4     00 FA 05 C6 |  if_b	mov	result1, #0
20ca8     BC 00 90 CD |  if_b	jmp	#LR__3041
20cac     0F 13 02 F6 | 	mov	arg01, local01
20cb0     00 14 06 F6 | 	mov	arg02, #0
20cb4     D8 F7 BF FD | 	call	#__system___float_tointeger
20cb8     FD 20 02 F6 | 	mov	local02, result1
20cbc     10 13 52 F6 | 	abs	arg01, local02 wc
20cc0     1F 22 C6 C9 |  if_b	decod	local03, #31
20cc4     00 22 06 36 |  if_ae	mov	local03, #0
20cc8     F8 EE BF FD | 	call	#__system___float_fromuns
20ccc     11 FB 61 F5 | 	xor	result1, local03
20cd0     FD 14 02 F6 | 	mov	arg02, result1
20cd4     0F 13 02 F6 | 	mov	arg01, local01
20cd8     1F 14 E6 F4 | 	bitnot	arg02, #31
20cdc     18 EF BF FD | 	call	#__system___float_add
20ce0     FD 24 02 F6 | 	mov	local04, result1
20ce4     12 13 02 F6 | 	mov	arg01, local04
20ce8     00 14 06 F6 | 	mov	arg02, #0
20cec     01 16 06 F6 | 	mov	arg03, #1
20cf0     08 F7 BF FD | 	call	#__system___float_cmp
20cf4     00 FA 55 F2 | 	cmps	result1, #0 wc
20cf8     18 00 90 3D |  if_ae	jmp	#LR__3040
20cfc     12 13 02 F6 | 	mov	arg01, local04
20d00     00 C0 1F FF 
20d04     00 14 06 F6 | 	mov	arg02, ##1065353216
20d08     EC EE BF FD | 	call	#__system___float_add
20d0c     FD 24 02 F6 | 	mov	local04, result1
20d10     01 20 86 F1 | 	sub	local02, #1
20d14                 | LR__3040
20d14     7F 20 06 F1 | 	add	local02, #127
20d18     17 20 66 F0 | 	shl	local02, #23
20d1c     12 13 02 F6 | 	mov	arg01, local04
20d20     00 80 26 FF 
20d24     00 14 06 F6 | 	mov	arg02, ##1291845632
20d28     9C F2 BF FD | 	call	#__system___float_mul
20d2c     FD 12 02 F6 | 	mov	arg01, result1
20d30     00 14 06 F6 | 	mov	arg02, #0
20d34     58 F7 BF FD | 	call	#__system___float_tointeger
20d38     FD 24 0A F6 | 	mov	local04, result1 wz
20d3c     10 FB 01 A6 |  if_e	mov	result1, local02
20d40     24 00 90 AD |  if_e	jmp	#LR__3041
20d44     3E 24 26 F4 | 	bith	local04, #62
20d48     0F 24 62 FD | 	qexp	local04
20d4c     10 13 02 F6 | 	mov	arg01, local02
20d50     18 14 62 FD | 	getqx	arg02
20d54     01 14 06 F1 | 	add	arg02, #1
20d58     01 14 46 F0 | 	shr	arg02, #1
20d5c     00 80 1F FF 
20d60     00 14 06 F1 | 	add	arg02, ##1056964608
20d64     60 F2 BF FD | 	call	#__system___float_mul
20d68                 | LR__3041
20d68     A7 F0 03 F6 | 	mov	ptra, fp
20d6c     B2 00 A0 FD | 	call	#popregs_
20d70                 | __system____builtin_exp2f_ret
20d70     2D 00 64 FD | 	ret
20d74                 | 
20d74                 | __system____builtin_log2f
20d74     06 4A 05 F6 | 	mov	COUNT_, #6
20d78     A8 00 A0 FD | 	call	#pushregs_
20d7c     09 1F 02 F6 | 	mov	local01, arg01
20d80     09 21 0A F6 | 	mov	local02, arg01 wz
20d84     00 00 40 5F 
20d88     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
20d8c     00 40 00 AF 
20d90     00 FA 65 A6 |  if_e	neg	result1, ##8388608
20d94     08 01 90 AD |  if_e	jmp	#LR__3054
20d98     00 20 56 F2 | 	cmps	local02, #0 wc
20d9c     00 E0 3F CF 
20da0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
20da4     F8 00 90 CD |  if_b	jmp	#LR__3054
20da8     0F 13 02 F6 | 	mov	arg01, local01
20dac     00 90 20 FF 
20db0     00 14 06 F6 | 	mov	arg02, ##1092616192
20db4     01 16 06 F6 | 	mov	arg03, #1
20db8     40 F6 BF FD | 	call	#__system___float_cmp
20dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
20dc0     4D 2A 20 AF 
20dc4     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
20dc8     D4 00 90 AD |  if_e	jmp	#LR__3054
20dcc     0F 13 02 F6 | 	mov	arg01, local01
20dd0     FC 16 20 FF 
20dd4     54 14 06 F6 | 	mov	arg02, ##1076754516
20dd8     01 16 06 F6 | 	mov	arg03, #1
20ddc     1C F6 BF FD | 	call	#__system___float_cmp
20de0     00 FA 0D F2 | 	cmp	result1, #0 wz
20de4     55 DC 1F AF 
20de8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
20dec     B0 00 90 AD |  if_e	jmp	#LR__3054
20df0     10 23 02 F6 | 	mov	local03, local02
20df4     17 22 46 F0 | 	shr	local03, #23
20df8     11 23 E2 F8 | 	getbyte	local03, local03, #0
20dfc     17 21 06 F4 | 	bitl	local02, #279
20e00     10 25 02 F6 | 	mov	local04, local02
20e04     FF 22 0E F2 | 	cmp	local03, #255 wz
20e08     1C 00 90 5D |  if_ne	jmp	#LR__3050
20e0c     00 24 0E F2 | 	cmp	local04, #0 wz
20e10     00 C0 3F 5F 
20e14     00 26 06 56 |  if_ne	mov	local05, ##2139095040
20e18     00 E0 3F AF 
20e1c     00 26 06 A6 |  if_e	mov	local05, ##2143289344
20e20     13 FB 01 F6 | 	mov	result1, local05
20e24     78 00 90 FD | 	jmp	#LR__3054
20e28                 | LR__3050
20e28     00 22 0E F2 | 	cmp	local03, #0 wz
20e2c     17 24 26 54 |  if_ne	bith	local04, #23
20e30     7F 22 86 51 |  if_ne	sub	local03, #127
20e34     28 00 90 5D |  if_ne	jmp	#LR__3053
20e38     00 24 0E F2 | 	cmp	local04, #0 wz
20e3c     00 40 00 AF 
20e40     00 FA 65 A6 |  if_e	neg	result1, ##8388608
20e44     58 00 90 AD |  if_e	jmp	#LR__3054
20e48     7E 22 66 F6 | 	neg	local03, #126
20e4c     97 08 48 FB | 	callpa	#(@LR__3052-@LR__3051)>>2,fcache_load_ptr_
20e50                 | LR__3051
20e50     17 24 2E F4 | 	testbn	local04, #23 wz
20e54     01 24 66 A0 |  if_e	shl	local04, #1
20e58     01 22 06 A1 |  if_e	add	local03, #1
20e5c     F0 FF 9F AD |  if_e	jmp	#LR__3051
20e60                 | LR__3052
20e60                 | LR__3053
20e60     0E 24 62 FD | 	qlog	local04
20e64     01 22 86 F1 | 	sub	local03, #1
20e68     11 13 52 F6 | 	abs	arg01, local03 wc
20e6c     1F 28 C6 C9 |  if_b	decod	local06, #31
20e70     00 28 06 36 |  if_ae	mov	local06, #0
20e74     18 26 62 FD | 	getqx	local05
20e78     9B 26 06 F4 | 	bitl	local05, #155
20e7c     08 26 06 F1 | 	add	local05, #8
20e80     04 26 46 F0 | 	shr	local05, #4
20e84     00 C0 1F FF 
20e88     00 26 06 F1 | 	add	local05, ##1065353216
20e8c     34 ED BF FD | 	call	#__system___float_fromuns
20e90     14 FB 61 F5 | 	xor	result1, local06
20e94     FD 14 02 F6 | 	mov	arg02, result1
20e98     13 13 02 F6 | 	mov	arg01, local05
20e9c     58 ED BF FD | 	call	#__system___float_add
20ea0                 | LR__3054
20ea0     A7 F0 03 F6 | 	mov	ptra, fp
20ea4     B2 00 A0 FD | 	call	#popregs_
20ea8                 | __system____builtin_log2f_ret
20ea8     2D 00 64 FD | 	ret
20eac                 | 
20eac                 | __system____builtin_powf
20eac     04 4A 05 F6 | 	mov	COUNT_, #4
20eb0     A8 00 A0 FD | 	call	#pushregs_
20eb4     09 1F 02 F6 | 	mov	local01, arg01
20eb8     0A 21 02 F6 | 	mov	local02, arg02
20ebc     10 13 02 F6 | 	mov	arg01, local02
20ec0     00 14 06 F6 | 	mov	arg02, #0
20ec4     C8 F5 BF FD | 	call	#__system___float_tointeger
20ec8     FD 22 02 F6 | 	mov	local03, result1
20ecc     11 13 52 F6 | 	abs	arg01, local03 wc
20ed0     1F 24 C6 C9 |  if_b	decod	local04, #31
20ed4     00 24 06 36 |  if_ae	mov	local04, #0
20ed8     E8 EC BF FD | 	call	#__system___float_fromuns
20edc     12 FB 61 F5 | 	xor	result1, local04
20ee0     FD 12 02 F6 | 	mov	arg01, result1
20ee4     10 15 02 F6 | 	mov	arg02, local02
20ee8     01 16 06 F6 | 	mov	arg03, #1
20eec     0C F5 BF FD | 	call	#__system___float_cmp
20ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
20ef4     18 00 90 5D |  if_ne	jmp	#LR__3060
20ef8     00 C0 1F FF 
20efc     00 12 06 F6 | 	mov	arg01, ##1065353216
20f00     0F 15 02 F6 | 	mov	arg02, local01
20f04     11 17 02 F6 | 	mov	arg03, local03
20f08     68 00 B0 FD | 	call	#__system___float_pow_n
20f0c     58 00 90 FD | 	jmp	#LR__3061
20f10                 | LR__3060
20f10     0F 13 02 F6 | 	mov	arg01, local01
20f14     00 14 06 F6 | 	mov	arg02, #0
20f18     01 16 06 F6 | 	mov	arg03, #1
20f1c     DC F4 BF FD | 	call	#__system___float_cmp
20f20     00 FA 55 F2 | 	cmps	result1, #0 wc
20f24     00 E0 3F CF 
20f28     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
20f2c     38 00 90 CD |  if_b	jmp	#LR__3061
20f30     0F 13 02 F6 | 	mov	arg01, local01
20f34     00 14 06 F6 | 	mov	arg02, #0
20f38     01 16 06 F6 | 	mov	arg03, #1
20f3c     BC F4 BF FD | 	call	#__system___float_cmp
20f40     00 FA 0D F2 | 	cmp	result1, #0 wz
20f44     00 FA 05 A6 |  if_e	mov	result1, #0
20f48     1C 00 90 AD |  if_e	jmp	#LR__3061
20f4c     0F 13 02 F6 | 	mov	arg01, local01
20f50     20 FE BF FD | 	call	#__system____builtin_log2f
20f54     FD 12 02 F6 | 	mov	arg01, result1
20f58     10 15 02 F6 | 	mov	arg02, local02
20f5c     68 F0 BF FD | 	call	#__system___float_mul
20f60     FD 12 02 F6 | 	mov	arg01, result1
20f64     F8 FC BF FD | 	call	#__system____builtin_exp2f
20f68                 | LR__3061
20f68     A7 F0 03 F6 | 	mov	ptra, fp
20f6c     B2 00 A0 FD | 	call	#popregs_
20f70                 | __system____builtin_powf_ret
20f70     2D 00 64 FD | 	ret
20f74                 | 
20f74                 | __system___float_pow_n
20f74     05 4A 05 F6 | 	mov	COUNT_, #5
20f78     A8 00 A0 FD | 	call	#pushregs_
20f7c     09 1F 02 F6 | 	mov	local01, arg01
20f80     0A 21 02 F6 | 	mov	local02, arg02
20f84     0B 23 02 F6 | 	mov	local03, arg03
20f88     00 22 56 F2 | 	cmps	local03, #0 wc
20f8c     18 00 90 3D |  if_ae	jmp	#LR__3070
20f90     01 24 06 F6 | 	mov	local04, #1
20f94     11 23 62 F6 | 	neg	local03, local03
20f98     00 22 56 F2 | 	cmps	local03, #0 wc
20f9c     00 FA 05 C6 |  if_b	mov	result1, #0
20fa0     94 00 90 CD |  if_b	jmp	#LR__3078
20fa4     04 00 90 FD | 	jmp	#LR__3071
20fa8                 | LR__3070
20fa8     00 24 06 F6 | 	mov	local04, #0
20fac                 | LR__3071
20fac     00 C0 1F FF 
20fb0     00 26 06 F6 | 	mov	local05, ##1065353216
20fb4                 | LR__3072
20fb4     01 22 56 F2 | 	cmps	local03, #1 wc
20fb8     30 00 90 CD |  if_b	jmp	#LR__3074
20fbc     01 22 CE F7 | 	test	local03, #1 wz
20fc0     10 00 90 AD |  if_e	jmp	#LR__3073
20fc4     13 13 02 F6 | 	mov	arg01, local05
20fc8     10 15 02 F6 | 	mov	arg02, local02
20fcc     F8 EF BF FD | 	call	#__system___float_mul
20fd0     FD 26 02 F6 | 	mov	local05, result1
20fd4                 | LR__3073
20fd4     01 22 C6 F0 | 	sar	local03, #1
20fd8     10 13 02 F6 | 	mov	arg01, local02
20fdc     10 15 02 F6 | 	mov	arg02, local02
20fe0     E4 EF BF FD | 	call	#__system___float_mul
20fe4     FD 20 02 F6 | 	mov	local02, result1
20fe8     C8 FF 9F FD | 	jmp	#LR__3072
20fec                 | LR__3074
20fec     00 24 0E F2 | 	cmp	local04, #0 wz
20ff0     14 00 90 AD |  if_e	jmp	#LR__3075
20ff4     0F 13 02 F6 | 	mov	arg01, local01
20ff8     13 15 02 F6 | 	mov	arg02, local05
20ffc     CC F1 BF FD | 	call	#__system___float_div
21000     FD 26 02 F6 | 	mov	local05, result1
21004     2C 00 90 FD | 	jmp	#LR__3077
21008                 | LR__3075
21008     0F 13 02 F6 | 	mov	arg01, local01
2100c     00 C0 1F FF 
21010     00 14 06 F6 | 	mov	arg02, ##1065353216
21014     01 16 06 F6 | 	mov	arg03, #1
21018     E0 F3 BF FD | 	call	#__system___float_cmp
2101c     00 FA 0D F2 | 	cmp	result1, #0 wz
21020     10 00 90 AD |  if_e	jmp	#LR__3076
21024     0F 13 02 F6 | 	mov	arg01, local01
21028     13 15 02 F6 | 	mov	arg02, local05
2102c     98 EF BF FD | 	call	#__system___float_mul
21030     FD 26 02 F6 | 	mov	local05, result1
21034                 | LR__3076
21034                 | LR__3077
21034     13 FB 01 F6 | 	mov	result1, local05
21038                 | LR__3078
21038     A7 F0 03 F6 | 	mov	ptra, fp
2103c     B2 00 A0 FD | 	call	#popregs_
21040                 | __system___float_pow_n_ret
21040     2D 00 64 FD | 	ret
21044                 | 
21044                 | __system___gc_ptrs
21044     EC 00 02 F6 | 	mov	_var01, __heap_ptr
21048     00 03 02 F6 | 	mov	_var02, _var01
2104c     76 01 00 FF 
21050     F8 03 06 F1 | 	add	_var02, ##191992
21054     00 FD 09 FB | 	rdlong	result2, _var01 wz
21058     74 00 90 5D |  if_ne	jmp	#LR__3080
2105c     01 FD 01 F6 | 	mov	result2, _var02
21060     00 FD 81 F1 | 	sub	result2, _var01
21064     00 03 58 FC | 	wrword	#1, _var01
21068     00 FB 01 F6 | 	mov	result1, _var01
2106c     02 FA 05 F1 | 	add	result1, #2
21070     36 00 80 FF 
21074     FD 20 59 FC | 	wrword	##27792, result1
21078     00 FB 01 F6 | 	mov	result1, _var01
2107c     04 FA 05 F1 | 	add	result1, #4
21080     FD 00 58 FC | 	wrword	#0, result1
21084     00 FB 01 F6 | 	mov	result1, _var01
21088     06 FA 05 F1 | 	add	result1, #6
2108c     FD 02 58 FC | 	wrword	#1, result1
21090     10 00 06 F1 | 	add	_var01, #16
21094     FE FC 51 F6 | 	abs	result2, result2 wc
21098     04 FC 45 F0 | 	shr	result2, #4
2109c     FE FC 81 F6 | 	negc	result2, result2
210a0     00 FD 51 FC | 	wrword	result2, _var01
210a4     00 FD 01 F6 | 	mov	result2, _var01
210a8     02 FC 05 F1 | 	add	result2, #2
210ac     36 00 80 FF 
210b0     FE 1E 59 FC | 	wrword	##27791, result2
210b4     00 FD 01 F6 | 	mov	result2, _var01
210b8     04 FC 05 F1 | 	add	result2, #4
210bc     FE 00 58 FC | 	wrword	#0, result2
210c0     00 FD 01 F6 | 	mov	result2, _var01
210c4     06 FC 05 F1 | 	add	result2, #6
210c8     FE 00 58 FC | 	wrword	#0, result2
210cc     10 00 86 F1 | 	sub	_var01, #16
210d0                 | LR__3080
210d0     00 FB 01 F6 | 	mov	result1, _var01
210d4     01 FD 01 F6 | 	mov	result2, _var02
210d8                 | __system___gc_ptrs_ret
210d8     2D 00 64 FD | 	ret
210dc                 | 
210dc                 | __system___gc_tryalloc
210dc     0B 4A 05 F6 | 	mov	COUNT_, #11
210e0     A8 00 A0 FD | 	call	#pushregs_
210e4     09 1F 02 F6 | 	mov	local01, arg01
210e8     0A 21 02 F6 | 	mov	local02, arg02
210ec     54 FF BF FD | 	call	#__system___gc_ptrs
210f0     FD 22 02 F6 | 	mov	local03, result1
210f4     FE 24 02 F6 | 	mov	local04, result2
210f8     11 27 02 F6 | 	mov	local05, local03
210fc     00 28 06 F6 | 	mov	local06, #0
21100     97 1E 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
21104                 | LR__3090
21104     13 2B 02 F6 | 	mov	local07, local05
21108     06 26 06 F1 | 	add	local05, #6
2110c     13 15 EA FA | 	rdword	arg02, local05 wz
21110     11 13 02 F6 | 	mov	arg01, local03
21114     00 FA 05 A6 |  if_e	mov	result1, #0
21118     04 14 66 50 |  if_ne	shl	arg02, #4
2111c     0A 13 02 51 |  if_ne	add	arg01, arg02
21120     09 FB 01 56 |  if_ne	mov	result1, arg01
21124     FD 26 0A F6 | 	mov	local05, result1 wz
21128     13 29 E2 5A |  if_ne	rdword	local06, local05
2112c     00 26 0E F2 | 	cmp	local05, #0 wz
21130     12 27 52 52 |  if_ne	cmps	local05, local04 wc
21134     08 00 90 1D |  if_a	jmp	#LR__3092
21138     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
2113c     C4 FF 9F 1D |  if_a	jmp	#LR__3090
21140                 | LR__3091
21140                 | LR__3092
21140     00 26 0E F2 | 	cmp	local05, #0 wz
21144     13 FB 01 A6 |  if_e	mov	result1, local05
21148     3C 01 90 AD |  if_e	jmp	#LR__3095
2114c     13 FD 01 F6 | 	mov	result2, local05
21150     06 FC 05 F1 | 	add	result2, #6
21154     FE 2C E2 FA | 	rdword	local08, result2
21158     14 1F 52 F2 | 	cmps	local01, local06 wc
2115c     C0 00 90 3D |  if_ae	jmp	#LR__3094
21160     13 1F 52 FC | 	wrword	local01, local05
21164     13 13 02 F6 | 	mov	arg01, local05
21168     0F 2D 02 F6 | 	mov	local08, local01
2116c     04 2C 66 F0 | 	shl	local08, #4
21170     16 13 02 F1 | 	add	arg01, local08
21174     0F 29 82 F1 | 	sub	local06, local01
21178     09 29 52 FC | 	wrword	local06, arg01
2117c     09 2D 02 F6 | 	mov	local08, arg01
21180     02 2C 06 F1 | 	add	local08, #2
21184     36 00 80 FF 
21188     16 1F 59 FC | 	wrword	##27791, local08
2118c     13 15 0A F6 | 	mov	arg02, local05 wz
21190     00 FA 05 A6 |  if_e	mov	result1, #0
21194     11 15 82 51 |  if_ne	sub	arg02, local03
21198     04 14 46 50 |  if_ne	shr	arg02, #4
2119c     0A FB 01 56 |  if_ne	mov	result1, arg02
211a0     09 2D 02 F6 | 	mov	local08, arg01
211a4     04 2C 06 F1 | 	add	local08, #4
211a8     16 FB 51 FC | 	wrword	result1, local08
211ac     13 2D 02 F6 | 	mov	local08, local05
211b0     06 2C 06 F1 | 	add	local08, #6
211b4     09 15 02 F6 | 	mov	arg02, arg01
211b8     16 2D E2 FA | 	rdword	local08, local08
211bc     06 14 06 F1 | 	add	arg02, #6
211c0     0A 2D 52 FC | 	wrword	local08, arg02
211c4     09 2F 02 F6 | 	mov	local09, arg01
211c8     17 15 0A F6 | 	mov	arg02, local09 wz
211cc     00 FA 05 A6 |  if_e	mov	result1, #0
211d0     11 15 82 51 |  if_ne	sub	arg02, local03
211d4     04 14 46 50 |  if_ne	shr	arg02, #4
211d8     0A FB 01 56 |  if_ne	mov	result1, arg02
211dc     FD 2C 02 F6 | 	mov	local08, result1
211e0     09 31 EA FA | 	rdword	local10, arg01 wz
211e4     00 FA 05 A6 |  if_e	mov	result1, #0
211e8     04 30 66 50 |  if_ne	shl	local10, #4
211ec     18 13 02 51 |  if_ne	add	arg01, local10
211f0     09 FB 01 56 |  if_ne	mov	result1, arg01
211f4     FD 32 0A F6 | 	mov	local11, result1 wz
211f8     24 00 90 AD |  if_e	jmp	#LR__3093
211fc     12 33 52 F2 | 	cmps	local11, local04 wc
21200     1C 00 90 3D |  if_ae	jmp	#LR__3093
21204     17 15 0A F6 | 	mov	arg02, local09 wz
21208     00 FA 05 A6 |  if_e	mov	result1, #0
2120c     11 15 82 51 |  if_ne	sub	arg02, local03
21210     04 14 46 50 |  if_ne	shr	arg02, #4
21214     0A FB 01 56 |  if_ne	mov	result1, arg02
21218     04 32 06 F1 | 	add	local11, #4
2121c     19 FB 51 FC | 	wrword	result1, local11
21220                 | LR__3093
21220                 | LR__3094
21220     06 2A 06 F1 | 	add	local07, #6
21224     15 2D 52 FC | 	wrword	local08, local07
21228     36 00 00 FF 
2122c     80 2E 06 F6 | 	mov	local09, ##27776
21230     10 2F 42 F5 | 	or	local09, local02
21234     00 FA 05 F6 | 	mov	result1, #0
21238     01 FA 61 FD | 	cogid	result1
2123c     FD 2E 42 F5 | 	or	local09, result1
21240     13 33 02 F6 | 	mov	local11, local05
21244     02 32 06 F1 | 	add	local11, #2
21248     19 2F 52 FC | 	wrword	local09, local11
2124c     11 2F 02 F6 | 	mov	local09, local03
21250     08 2E 06 F1 | 	add	local09, #8
21254     13 33 02 F6 | 	mov	local11, local05
21258     17 2F E2 FA | 	rdword	local09, local09
2125c     06 32 06 F1 | 	add	local11, #6
21260     19 2F 52 FC | 	wrword	local09, local11
21264     13 15 0A F6 | 	mov	arg02, local05 wz
21268     00 FA 05 A6 |  if_e	mov	result1, #0
2126c     11 15 82 51 |  if_ne	sub	arg02, local03
21270     04 14 46 50 |  if_ne	shr	arg02, #4
21274     0A FB 01 56 |  if_ne	mov	result1, arg02
21278     08 22 06 F1 | 	add	local03, #8
2127c     11 FB 51 FC | 	wrword	result1, local03
21280     08 26 06 F1 | 	add	local05, #8
21284     13 FB 01 F6 | 	mov	result1, local05
21288                 | LR__3095
21288     A7 F0 03 F6 | 	mov	ptra, fp
2128c     B2 00 A0 FD | 	call	#popregs_
21290                 | __system___gc_tryalloc_ret
21290     2D 00 64 FD | 	ret
21294                 | 
21294                 | __system___gc_alloc_managed
21294     01 4A 05 F6 | 	mov	COUNT_, #1
21298     A8 00 A0 FD | 	call	#pushregs_
2129c     09 1F 02 F6 | 	mov	local01, arg01
212a0     00 14 06 F6 | 	mov	arg02, #0
212a4     1C 00 B0 FD | 	call	#__system___gc_doalloc
212a8     FD 14 0A F6 | 	mov	arg02, result1 wz
212ac     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
212b0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
212b4     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
212b8     A7 F0 03 F6 | 	mov	ptra, fp
212bc     B2 00 A0 FD | 	call	#popregs_
212c0                 | __system___gc_alloc_managed_ret
212c0     2D 00 64 FD | 	ret
212c4                 | 
212c4                 | __system___gc_doalloc
212c4     06 4A 05 F6 | 	mov	COUNT_, #6
212c8     A8 00 A0 FD | 	call	#pushregs_
212cc     09 1F 0A F6 | 	mov	local01, arg01 wz
212d0     0A 21 02 F6 | 	mov	local02, arg02
212d4     00 FA 05 A6 |  if_e	mov	result1, #0
212d8     8C 00 90 AD |  if_e	jmp	#LR__3107
212dc     17 1E 06 F1 | 	add	local01, #23
212e0     0F 1E 26 F5 | 	andn	local01, #15
212e4     04 1E 46 F0 | 	shr	local01, #4
212e8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
212ec     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
212f0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
212f4     54 C1 BF FD | 	call	#__system___lockmem
212f8     0F 13 02 F6 | 	mov	arg01, local01
212fc     10 15 02 F6 | 	mov	arg02, local02
21300     D8 FD BF FD | 	call	#__system___gc_tryalloc
21304     FD 22 0A F6 | 	mov	local03, result1 wz
21308     14 00 90 5D |  if_ne	jmp	#LR__3100
2130c     70 03 B0 FD | 	call	#__system___gc_docollect
21310     0F 13 02 F6 | 	mov	arg01, local01
21314     10 15 02 F6 | 	mov	arg02, local02
21318     C0 FD BF FD | 	call	#__system___gc_tryalloc
2131c     FD 22 02 F6 | 	mov	local03, result1
21320                 | LR__3100
21320     1C E6 05 F1 | 	add	ptr___system__dat__, #28
21324     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21328     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2132c     09 01 68 FC | 	wrlong	#0, arg01
21330     00 22 0E F2 | 	cmp	local03, #0 wz
21334     2C 00 90 AD |  if_e	jmp	#LR__3106
21338     04 1E 66 F0 | 	shl	local01, #4
2133c     08 1E 86 F1 | 	sub	local01, #8
21340     0F 25 52 F6 | 	abs	local04, local01 wc
21344     02 24 46 F0 | 	shr	local04, #2
21348     12 27 8A F6 | 	negc	local05, local04 wz
2134c     11 29 02 F6 | 	mov	local06, local03
21350     10 00 90 AD |  if_e	jmp	#LR__3105
21354     97 06 48 FB | 	callpa	#(@LR__3103-@LR__3101)>>2,fcache_load_ptr_
21358                 | LR__3101
21358     13 05 D8 FC | 	rep	@LR__3104, local05
2135c                 | LR__3102
2135c     14 01 68 FC | 	wrlong	#0, local06
21360     04 28 06 F1 | 	add	local06, #4
21364                 | LR__3103
21364                 | LR__3104
21364                 | LR__3105
21364                 | LR__3106
21364     11 FB 01 F6 | 	mov	result1, local03
21368                 | LR__3107
21368     A7 F0 03 F6 | 	mov	ptra, fp
2136c     B2 00 A0 FD | 	call	#popregs_
21370                 | __system___gc_doalloc_ret
21370     2D 00 64 FD | 	ret
21374                 | 
21374                 | __system___gc_isvalidptr
21374     F8 16 06 F4 | 	bitl	arg03, #248
21378     08 16 86 F1 | 	sub	arg03, #8
2137c     09 17 52 F2 | 	cmps	arg03, arg01 wc
21380     08 00 90 CD |  if_b	jmp	#LR__3110
21384     0A 17 52 F2 | 	cmps	arg03, arg02 wc
21388     08 00 90 CD |  if_b	jmp	#LR__3111
2138c                 | LR__3110
2138c     00 FA 05 F6 | 	mov	result1, #0
21390     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
21394                 | LR__3111
21394     0B 01 02 F6 | 	mov	_var01, arg03
21398     09 01 62 F5 | 	xor	_var01, arg01
2139c     0F 00 CE F7 | 	test	_var01, #15 wz
213a0     00 FA 05 56 |  if_ne	mov	result1, #0
213a4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
213a8     0B 01 02 F6 | 	mov	_var01, arg03
213ac     02 00 06 F1 | 	add	_var01, #2
213b0     00 01 E2 FA | 	rdword	_var01, _var01
213b4     7F 00 00 FF 
213b8     C0 01 06 F5 | 	and	_var01, ##65472
213bc     36 00 00 FF 
213c0     80 00 0E F2 | 	cmp	_var01, ##27776 wz
213c4     00 FA 05 56 |  if_ne	mov	result1, #0
213c8     0B FB 01 A6 |  if_e	mov	result1, arg03
213cc                 | __system___gc_isvalidptr_ret
213cc     2D 00 64 FD | 	ret
213d0                 | 
213d0                 | __system___gc_free
213d0     09 17 02 F6 | 	mov	arg03, arg01
213d4     6C FC BF FD | 	call	#__system___gc_ptrs
213d8     FD 12 02 F6 | 	mov	arg01, result1
213dc     FE 14 02 F6 | 	mov	arg02, result2
213e0     90 FF BF FD | 	call	#__system___gc_isvalidptr
213e4     FD 14 0A F6 | 	mov	arg02, result1 wz
213e8     28 00 90 AD |  if_e	jmp	#LR__3120
213ec     1C E6 05 F1 | 	add	ptr___system__dat__, #28
213f0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
213f4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
213f8     50 C0 BF FD | 	call	#__system___lockmem
213fc     0A 13 02 F6 | 	mov	arg01, arg02
21400     14 00 B0 FD | 	call	#__system___gc_dofree
21404     1C E6 05 F1 | 	add	ptr___system__dat__, #28
21408     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2140c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
21410     09 01 68 FC | 	wrlong	#0, arg01
21414                 | LR__3120
21414                 | __system___gc_free_ret
21414     2D 00 64 FD | 	ret
21418                 | 
21418                 | __system___gc_dofree
21418     06 4A 05 F6 | 	mov	COUNT_, #6
2141c     A8 00 A0 FD | 	call	#pushregs_
21420     09 1F 02 F6 | 	mov	local01, arg01
21424     1C FC BF FD | 	call	#__system___gc_ptrs
21428     FD 20 02 F6 | 	mov	local02, result1
2142c     FE 22 02 F6 | 	mov	local03, result2
21430     0F 15 02 F6 | 	mov	arg02, local01
21434     02 14 06 F1 | 	add	arg02, #2
21438     36 00 80 FF 
2143c     0A 1F 59 FC | 	wrword	##27791, arg02
21440     0F 25 02 F6 | 	mov	local04, local01
21444     0F 13 02 F6 | 	mov	arg01, local01
21448     09 27 EA FA | 	rdword	local05, arg01 wz
2144c     00 FA 05 A6 |  if_e	mov	result1, #0
21450     04 26 66 50 |  if_ne	shl	local05, #4
21454     13 13 02 51 |  if_ne	add	arg01, local05
21458     09 FB 01 56 |  if_ne	mov	result1, arg01
2145c     FD 28 02 F6 | 	mov	local06, result1
21460     97 24 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
21464                 | LR__3130
21464     04 24 06 F1 | 	add	local04, #4
21468     12 15 EA FA | 	rdword	arg02, local04 wz
2146c     10 13 02 F6 | 	mov	arg01, local02
21470     00 FA 05 A6 |  if_e	mov	result1, #0
21474     04 14 66 50 |  if_ne	shl	arg02, #4
21478     0A 13 02 51 |  if_ne	add	arg01, arg02
2147c     09 FB 01 56 |  if_ne	mov	result1, arg01
21480     FD 24 0A F6 | 	mov	local04, result1 wz
21484     24 00 90 AD |  if_e	jmp	#LR__3132
21488     12 13 02 F6 | 	mov	arg01, local04
2148c     00 FA 05 F6 | 	mov	result1, #0
21490     02 12 06 F1 | 	add	arg01, #2
21494     09 13 E2 FA | 	rdword	arg01, arg01
21498     36 00 00 FF 
2149c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
214a0     01 FA 65 A6 |  if_e	neg	result1, #1
214a4     00 FA 0D F2 | 	cmp	result1, #0 wz
214a8     B8 FF 9F AD |  if_e	jmp	#LR__3130
214ac                 | LR__3131
214ac                 | LR__3132
214ac     00 24 0E F2 | 	cmp	local04, #0 wz
214b0     10 25 02 A6 |  if_e	mov	local04, local02
214b4     12 15 02 F6 | 	mov	arg02, local04
214b8     06 14 06 F1 | 	add	arg02, #6
214bc     0F 13 02 F6 | 	mov	arg01, local01
214c0     0A 15 E2 FA | 	rdword	arg02, arg02
214c4     06 12 06 F1 | 	add	arg01, #6
214c8     09 15 52 FC | 	wrword	arg02, arg01
214cc     0F 15 0A F6 | 	mov	arg02, local01 wz
214d0     00 FA 05 A6 |  if_e	mov	result1, #0
214d4     10 15 82 51 |  if_ne	sub	arg02, local02
214d8     04 14 46 50 |  if_ne	shr	arg02, #4
214dc     0A FB 01 56 |  if_ne	mov	result1, arg02
214e0     12 15 02 F6 | 	mov	arg02, local04
214e4     06 14 06 F1 | 	add	arg02, #6
214e8     0A FB 51 FC | 	wrword	result1, arg02
214ec     10 25 0A F2 | 	cmp	local04, local02 wz
214f0     A4 00 90 AD |  if_e	jmp	#LR__3135
214f4     12 13 02 F6 | 	mov	arg01, local04
214f8     09 27 EA FA | 	rdword	local05, arg01 wz
214fc     00 FA 05 A6 |  if_e	mov	result1, #0
21500     04 26 66 50 |  if_ne	shl	local05, #4
21504     13 13 02 51 |  if_ne	add	arg01, local05
21508     09 FB 01 56 |  if_ne	mov	result1, arg01
2150c     0F FB 09 F2 | 	cmp	result1, local01 wz
21510     84 00 90 5D |  if_ne	jmp	#LR__3134
21514     12 29 E2 FA | 	rdword	local06, local04
21518     0F 15 E2 FA | 	rdword	arg02, local01
2151c     0A 29 02 F1 | 	add	local06, arg02
21520     12 29 52 FC | 	wrword	local06, local04
21524     0F 29 02 F6 | 	mov	local06, local01
21528     02 28 06 F1 | 	add	local06, #2
2152c     14 01 58 FC | 	wrword	#0, local06
21530     0F 13 02 F6 | 	mov	arg01, local01
21534     09 27 EA FA | 	rdword	local05, arg01 wz
21538     00 FA 05 A6 |  if_e	mov	result1, #0
2153c     04 26 66 50 |  if_ne	shl	local05, #4
21540     13 13 02 51 |  if_ne	add	arg01, local05
21544     09 FB 01 56 |  if_ne	mov	result1, arg01
21548     FD 28 02 F6 | 	mov	local06, result1
2154c     11 29 52 F2 | 	cmps	local06, local03 wc
21550     20 00 90 3D |  if_ae	jmp	#LR__3133
21554     12 15 0A F6 | 	mov	arg02, local04 wz
21558     00 FA 05 A6 |  if_e	mov	result1, #0
2155c     10 15 82 51 |  if_ne	sub	arg02, local02
21560     04 14 46 50 |  if_ne	shr	arg02, #4
21564     0A FB 01 56 |  if_ne	mov	result1, arg02
21568     14 15 02 F6 | 	mov	arg02, local06
2156c     04 14 06 F1 | 	add	arg02, #4
21570     0A FB 51 FC | 	wrword	result1, arg02
21574                 | LR__3133
21574     0F 15 02 F6 | 	mov	arg02, local01
21578     06 14 06 F1 | 	add	arg02, #6
2157c     12 FD 01 F6 | 	mov	result2, local04
21580     0A 15 E2 FA | 	rdword	arg02, arg02
21584     06 FC 05 F1 | 	add	result2, #6
21588     FE 14 52 FC | 	wrword	arg02, result2
2158c     06 1E 06 F1 | 	add	local01, #6
21590     0F 01 58 FC | 	wrword	#0, local01
21594     12 1F 02 F6 | 	mov	local01, local04
21598                 | LR__3134
21598                 | LR__3135
21598     0F 13 02 F6 | 	mov	arg01, local01
2159c     09 27 EA FA | 	rdword	local05, arg01 wz
215a0     00 FA 05 A6 |  if_e	mov	result1, #0
215a4     04 26 66 50 |  if_ne	shl	local05, #4
215a8     13 13 02 51 |  if_ne	add	arg01, local05
215ac     09 FB 01 56 |  if_ne	mov	result1, arg01
215b0     FD 14 0A F6 | 	mov	arg02, result1 wz
215b4     B8 00 90 AD |  if_e	jmp	#LR__3137
215b8     11 15 52 F2 | 	cmps	arg02, local03 wc
215bc     B0 00 90 3D |  if_ae	jmp	#LR__3137
215c0     0A 13 02 F6 | 	mov	arg01, arg02
215c4     00 FA 05 F6 | 	mov	result1, #0
215c8     02 12 06 F1 | 	add	arg01, #2
215cc     09 13 E2 FA | 	rdword	arg01, arg01
215d0     36 00 00 FF 
215d4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
215d8     01 FA 65 A6 |  if_e	neg	result1, #1
215dc     00 FA 0D F2 | 	cmp	result1, #0 wz
215e0     8C 00 90 AD |  if_e	jmp	#LR__3137
215e4     0F 25 02 F6 | 	mov	local04, local01
215e8     12 29 E2 FA | 	rdword	local06, local04
215ec     0A 13 02 F6 | 	mov	arg01, arg02
215f0     09 1F E2 FA | 	rdword	local01, arg01
215f4     0F 29 02 F1 | 	add	local06, local01
215f8     12 29 52 FC | 	wrword	local06, local04
215fc     09 29 02 F6 | 	mov	local06, arg01
21600     06 28 06 F1 | 	add	local06, #6
21604     12 1F 02 F6 | 	mov	local01, local04
21608     14 29 E2 FA | 	rdword	local06, local06
2160c     06 1E 06 F1 | 	add	local01, #6
21610     0F 29 52 FC | 	wrword	local06, local01
21614     09 29 02 F6 | 	mov	local06, arg01
21618     02 28 06 F1 | 	add	local06, #2
2161c     14 55 59 FC | 	wrword	#170, local06
21620     09 29 02 F6 | 	mov	local06, arg01
21624     06 28 06 F1 | 	add	local06, #6
21628     14 01 58 FC | 	wrword	#0, local06
2162c     09 27 EA FA | 	rdword	local05, arg01 wz
21630     00 FA 05 A6 |  if_e	mov	result1, #0
21634     04 26 66 50 |  if_ne	shl	local05, #4
21638     13 13 02 51 |  if_ne	add	arg01, local05
2163c     09 FB 01 56 |  if_ne	mov	result1, arg01
21640     FD 28 0A F6 | 	mov	local06, result1 wz
21644     28 00 90 AD |  if_e	jmp	#LR__3136
21648     11 29 52 F2 | 	cmps	local06, local03 wc
2164c     20 00 90 3D |  if_ae	jmp	#LR__3136
21650     12 15 0A F6 | 	mov	arg02, local04 wz
21654     00 FA 05 A6 |  if_e	mov	result1, #0
21658     10 15 82 51 |  if_ne	sub	arg02, local02
2165c     04 14 46 50 |  if_ne	shr	arg02, #4
21660     0A FB 01 56 |  if_ne	mov	result1, arg02
21664     14 25 02 F6 | 	mov	local04, local06
21668     04 24 06 F1 | 	add	local04, #4
2166c     12 FB 51 FC | 	wrword	result1, local04
21670                 | LR__3136
21670                 | LR__3137
21670     14 FB 01 F6 | 	mov	result1, local06
21674     A7 F0 03 F6 | 	mov	ptra, fp
21678     B2 00 A0 FD | 	call	#popregs_
2167c                 | __system___gc_dofree_ret
2167c     2D 00 64 FD | 	ret
21680                 | 
21680                 | __system___gc_docollect
21680     05 4A 05 F6 | 	mov	COUNT_, #5
21684     A8 00 A0 FD | 	call	#pushregs_
21688     B8 F9 BF FD | 	call	#__system___gc_ptrs
2168c     FE 1E 02 F6 | 	mov	local01, result2
21690     FD 20 02 F6 | 	mov	local02, result1
21694     10 13 02 F6 | 	mov	arg01, local02
21698     09 23 EA FA | 	rdword	local03, arg01 wz
2169c     00 FA 05 A6 |  if_e	mov	result1, #0
216a0     04 22 66 50 |  if_ne	shl	local03, #4
216a4     11 13 02 51 |  if_ne	add	arg01, local03
216a8     09 FB 01 56 |  if_ne	mov	result1, arg01
216ac     FD 24 0A F6 | 	mov	local04, result1 wz
216b0     00 FA 05 F6 | 	mov	result1, #0
216b4     01 FA 61 FD | 	cogid	result1
216b8     FD 26 02 F6 | 	mov	local05, result1
216bc     48 00 90 AD |  if_e	jmp	#LR__3142
216c0     97 22 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
216c4                 | LR__3140
216c4     0F 25 52 F2 | 	cmps	local04, local01 wc
216c8     3C 00 90 3D |  if_ae	jmp	#LR__3142
216cc     12 15 02 F6 | 	mov	arg02, local04
216d0     02 14 06 F1 | 	add	arg02, #2
216d4     0A 15 E2 FA | 	rdword	arg02, arg02
216d8     20 14 26 F5 | 	andn	arg02, #32
216dc     12 13 02 F6 | 	mov	arg01, local04
216e0     02 12 06 F1 | 	add	arg01, #2
216e4     09 15 52 FC | 	wrword	arg02, arg01
216e8     12 13 02 F6 | 	mov	arg01, local04
216ec     09 23 EA FA | 	rdword	local03, arg01 wz
216f0     00 FA 05 A6 |  if_e	mov	result1, #0
216f4     04 22 66 50 |  if_ne	shl	local03, #4
216f8     11 13 02 51 |  if_ne	add	arg01, local03
216fc     09 FB 01 56 |  if_ne	mov	result1, arg01
21700     FD 24 0A F6 | 	mov	local04, result1 wz
21704     BC FF 9F 5D |  if_ne	jmp	#LR__3140
21708                 | LR__3141
21708                 | LR__3142
21708     00 22 06 F6 | 	mov	local03, #0
2170c     00 12 06 F6 | 	mov	arg01, #0
21710     10 BD BF FD | 	call	#__system____topofstack
21714     FD 14 02 F6 | 	mov	arg02, result1
21718     11 13 02 F6 | 	mov	arg01, local03
2171c     90 00 B0 FD | 	call	#__system___gc_markhub
21720     1C 01 B0 FD | 	call	#__system___gc_markcog
21724     10 13 02 F6 | 	mov	arg01, local02
21728     09 23 EA FA | 	rdword	local03, arg01 wz
2172c     00 FA 05 A6 |  if_e	mov	result1, #0
21730     04 22 66 50 |  if_ne	shl	local03, #4
21734     11 13 02 51 |  if_ne	add	arg01, local03
21738     09 FB 01 56 |  if_ne	mov	result1, arg01
2173c     FD 20 0A F6 | 	mov	local02, result1 wz
21740     60 00 90 AD |  if_e	jmp	#LR__3146
21744                 | LR__3143
21744     10 25 02 F6 | 	mov	local04, local02
21748     12 13 02 F6 | 	mov	arg01, local04
2174c     09 23 EA FA | 	rdword	local03, arg01 wz
21750     00 FA 05 A6 |  if_e	mov	result1, #0
21754     04 22 66 50 |  if_ne	shl	local03, #4
21758     11 13 02 51 |  if_ne	add	arg01, local03
2175c     09 FB 01 56 |  if_ne	mov	result1, arg01
21760     FD 20 02 F6 | 	mov	local02, result1
21764     12 15 02 F6 | 	mov	arg02, local04
21768     02 14 06 F1 | 	add	arg02, #2
2176c     0A 15 E2 FA | 	rdword	arg02, arg02
21770     20 14 CE F7 | 	test	arg02, #32 wz
21774     10 14 CE A7 |  if_e	test	arg02, #16 wz
21778     1C 00 90 5D |  if_ne	jmp	#LR__3145
2177c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
21780     13 15 0A F2 | 	cmp	arg02, local05 wz
21784     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
21788     0C 00 90 5D |  if_ne	jmp	#LR__3144
2178c     12 13 02 F6 | 	mov	arg01, local04
21790     84 FC BF FD | 	call	#__system___gc_dofree
21794     FD 20 02 F6 | 	mov	local02, result1
21798                 | LR__3144
21798                 | LR__3145
21798     00 20 0E F2 | 	cmp	local02, #0 wz
2179c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
217a0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3143
217a4                 | LR__3146
217a4     A7 F0 03 F6 | 	mov	ptra, fp
217a8     B2 00 A0 FD | 	call	#popregs_
217ac                 | __system___gc_docollect_ret
217ac     2D 00 64 FD | 	ret
217b0                 | 
217b0                 | __system___gc_markhub
217b0     04 4A 05 F6 | 	mov	COUNT_, #4
217b4     A8 00 A0 FD | 	call	#pushregs_
217b8     09 1F 02 F6 | 	mov	local01, arg01
217bc     0A 21 02 F6 | 	mov	local02, arg02
217c0     80 F8 BF FD | 	call	#__system___gc_ptrs
217c4     FD 22 02 F6 | 	mov	local03, result1
217c8     FE 24 02 F6 | 	mov	local04, result2
217cc                 | LR__3150
217cc     10 1F 52 F2 | 	cmps	local01, local02 wc
217d0     60 00 90 3D |  if_ae	jmp	#LR__3151
217d4     0F 17 02 FB | 	rdlong	arg03, local01
217d8     04 1E 06 F1 | 	add	local01, #4
217dc     12 15 02 F6 | 	mov	arg02, local04
217e0     11 13 02 F6 | 	mov	arg01, local03
217e4     8C FB BF FD | 	call	#__system___gc_isvalidptr
217e8     FD 16 0A F6 | 	mov	arg03, result1 wz
217ec     DC FF 9F AD |  if_e	jmp	#LR__3150
217f0     0B 13 02 F6 | 	mov	arg01, arg03
217f4     00 FA 05 F6 | 	mov	result1, #0
217f8     02 12 06 F1 | 	add	arg01, #2
217fc     09 13 E2 FA | 	rdword	arg01, arg01
21800     36 00 00 FF 
21804     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
21808     01 FA 65 A6 |  if_e	neg	result1, #1
2180c     00 FA 0D F2 | 	cmp	result1, #0 wz
21810     B8 FF 9F 5D |  if_ne	jmp	#LR__3150
21814     0B FD 01 F6 | 	mov	result2, arg03
21818     02 FC 05 F1 | 	add	result2, #2
2181c     FE FC E1 FA | 	rdword	result2, result2
21820     0F FC 25 F5 | 	andn	result2, #15
21824     2E FC 45 F5 | 	or	result2, #46
21828     02 16 06 F1 | 	add	arg03, #2
2182c     0B FD 51 FC | 	wrword	result2, arg03
21830     98 FF 9F FD | 	jmp	#LR__3150
21834                 | LR__3151
21834     A7 F0 03 F6 | 	mov	ptra, fp
21838     B2 00 A0 FD | 	call	#popregs_
2183c                 | __system___gc_markhub_ret
2183c     2D 00 64 FD | 	ret
21840                 | 
21840                 | __system___gc_markcog
21840     04 4A 05 F6 | 	mov	COUNT_, #4
21844     A8 00 A0 FD | 	call	#pushregs_
21848     F8 F7 BF FD | 	call	#__system___gc_ptrs
2184c     FD 1E 02 F6 | 	mov	local01, result1
21850     FE 20 02 F6 | 	mov	local02, result2
21854     EF 23 06 F6 | 	mov	local03, #495
21858                 | LR__3160
21858                 | 	'.live	local03
21858     00 22 96 F9 | 	alts	local03, #0
2185c     11 25 02 F6 | 	mov	local04, local03
21860     0F 13 02 F6 | 	mov	arg01, local01
21864     10 15 02 F6 | 	mov	arg02, local02
21868     12 17 02 F6 | 	mov	arg03, local04
2186c     04 FB BF FD | 	call	#__system___gc_isvalidptr
21870     00 FA 0D F2 | 	cmp	result1, #0 wz
21874     18 00 90 AD |  if_e	jmp	#LR__3161
21878     FD 24 02 F6 | 	mov	local04, result1
2187c     02 24 06 F1 | 	add	local04, #2
21880     12 25 E2 FA | 	rdword	local04, local04
21884     20 24 46 F5 | 	or	local04, #32
21888     02 FA 05 F1 | 	add	result1, #2
2188c     FD 24 52 FC | 	wrword	local04, result1
21890                 | LR__3161
21890     01 22 86 F1 | 	sub	local03, #1
21894     00 22 56 F2 | 	cmps	local03, #0 wc
21898     BC FF 9F 3D |  if_ae	jmp	#LR__3160
2189c     A7 F0 03 F6 | 	mov	ptra, fp
218a0     B2 00 A0 FD | 	call	#popregs_
218a4                 | __system___gc_markcog_ret
218a4     2D 00 64 FD | 	ret
218a8                 | 
218a8                 | __system__opendir
218a8     06 4A 05 F6 | 	mov	COUNT_, #6
218ac     A8 00 A0 FD | 	call	#pushregs_
218b0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
218b4     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
218b8     09 15 02 F6 | 	mov	arg02, arg01
218bc     0F 13 02 F6 | 	mov	arg01, local01
218c0     00 16 06 F6 | 	mov	arg03, #0
218c4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
218c8     18 C3 BF FD | 	call	#__system____getvfsforfile
218cc     FD 20 0A F6 | 	mov	local02, result1 wz
218d0     10 00 90 AD |  if_e	jmp	#LR__3170
218d4     28 20 06 F1 | 	add	local02, #40
218d8     10 17 0A FB | 	rdlong	arg03, local02 wz
218dc     28 20 86 F1 | 	sub	local02, #40
218e0     14 00 90 5D |  if_ne	jmp	#LR__3171
218e4                 | LR__3170
218e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
218e8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
218ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
218f0     00 FA 05 F6 | 	mov	result1, #0
218f4     90 00 90 FD | 	jmp	#LR__3173
218f8                 | LR__3171
218f8     5C 12 06 F6 | 	mov	arg01, #92
218fc     10 14 06 F6 | 	mov	arg02, #16
21900     C0 F9 BF FD | 	call	#__system___gc_doalloc
21904     FD 22 0A F6 | 	mov	local03, result1 wz
21908     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2190c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
21910     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21914     00 FA 05 A6 |  if_e	mov	result1, #0
21918     6C 00 90 AD |  if_e	jmp	#LR__3173
2191c     28 20 06 F1 | 	add	local02, #40
21920     10 25 02 FB | 	rdlong	local04, local02
21924     12 27 02 F6 | 	mov	local05, local04
21928     28 20 86 F1 | 	sub	local02, #40
2192c     13 26 46 F7 | 	zerox	local05, #19
21930     14 24 46 F0 | 	shr	local04, #20
21934     02 24 66 F0 | 	shl	local04, #2
21938     ED 24 02 F1 | 	add	local04, __methods__
2193c     12 25 02 FB | 	rdlong	local04, local04
21940     11 13 02 F6 | 	mov	arg01, local03
21944     0F 15 02 F6 | 	mov	arg02, local01
21948     F2 28 02 F6 | 	mov	local06, objptr
2194c     13 E5 01 F6 | 	mov	objptr, local05
21950     2D 24 62 FD | 	call	local04
21954     14 E5 01 F6 | 	mov	objptr, local06
21958     FD 16 0A F6 | 	mov	arg03, result1 wz
2195c     20 00 90 AD |  if_e	jmp	#LR__3172
21960     00 16 4E F2 | 	cmps	arg03, #0 wz
21964     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21968     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2196c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21970     11 13 02 F6 | 	mov	arg01, local03
21974     58 FA BF FD | 	call	#__system___gc_free
21978     00 FA 05 F6 | 	mov	result1, #0
2197c     08 00 90 FD | 	jmp	#LR__3173
21980                 | LR__3172
21980     11 21 62 FC | 	wrlong	local02, local03
21984     11 FB 01 F6 | 	mov	result1, local03
21988                 | LR__3173
21988     A7 F0 03 F6 | 	mov	ptra, fp
2198c     B2 00 A0 FD | 	call	#popregs_
21990                 | __system__opendir_ret
21990     2D 00 64 FD | 	ret
21994                 | 
21994                 | __system__closedir
21994     04 4A 05 F6 | 	mov	COUNT_, #4
21998     A8 00 A0 FD | 	call	#pushregs_
2199c     09 1F 02 F6 | 	mov	local01, arg01
219a0     0F 13 02 FB | 	rdlong	arg01, local01
219a4     2C 12 06 F1 | 	add	arg01, #44
219a8     09 21 02 FB | 	rdlong	local02, arg01
219ac     10 23 02 F6 | 	mov	local03, local02
219b0     13 22 46 F7 | 	zerox	local03, #19
219b4     14 20 46 F0 | 	shr	local02, #20
219b8     02 20 66 F0 | 	shl	local02, #2
219bc     ED 20 02 F1 | 	add	local02, __methods__
219c0     10 21 02 FB | 	rdlong	local02, local02
219c4     0F 13 02 F6 | 	mov	arg01, local01
219c8     F2 24 02 F6 | 	mov	local04, objptr
219cc     11 E5 01 F6 | 	mov	objptr, local03
219d0     2D 20 62 FD | 	call	local02
219d4     12 E5 01 F6 | 	mov	objptr, local04
219d8     FD 24 02 F6 | 	mov	local04, result1
219dc     0F 13 02 F6 | 	mov	arg01, local01
219e0     EC F9 BF FD | 	call	#__system___gc_free
219e4     00 24 4E F2 | 	cmps	local04, #0 wz
219e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
219ec     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
219f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
219f4     01 FA 65 56 |  if_ne	neg	result1, #1
219f8     00 FA 05 A6 |  if_e	mov	result1, #0
219fc     A7 F0 03 F6 | 	mov	ptra, fp
21a00     B2 00 A0 FD | 	call	#popregs_
21a04                 | __system__closedir_ret
21a04     2D 00 64 FD | 	ret
21a08                 | 
21a08                 | __system__readdir
21a08     04 4A 05 F6 | 	mov	COUNT_, #4
21a0c     A8 00 A0 FD | 	call	#pushregs_
21a10     09 15 0A FB | 	rdlong	arg02, arg01 wz
21a14     08 12 06 F1 | 	add	arg01, #8
21a18     09 1F 02 F6 | 	mov	local01, arg01
21a1c     08 12 86 F1 | 	sub	arg01, #8
21a20     00 FA 05 A6 |  if_e	mov	result1, #0
21a24     5C 00 90 AD |  if_e	jmp	#LR__3181
21a28     30 14 06 F1 | 	add	arg02, #48
21a2c     0A 21 02 FB | 	rdlong	local02, arg02
21a30     10 23 02 F6 | 	mov	local03, local02
21a34     13 22 46 F7 | 	zerox	local03, #19
21a38     14 20 46 F0 | 	shr	local02, #20
21a3c     02 20 66 F0 | 	shl	local02, #2
21a40     ED 20 02 F1 | 	add	local02, __methods__
21a44     10 21 02 FB | 	rdlong	local02, local02
21a48     0F 15 02 F6 | 	mov	arg02, local01
21a4c     F2 24 02 F6 | 	mov	local04, objptr
21a50     11 E5 01 F6 | 	mov	objptr, local03
21a54     2D 20 62 FD | 	call	local02
21a58     12 E5 01 F6 | 	mov	objptr, local04
21a5c     00 FA 4D F2 | 	cmps	result1, #0 wz
21a60     1C 00 90 AD |  if_e	jmp	#LR__3180
21a64     01 FA 55 F2 | 	cmps	result1, #1 wc
21a68     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
21a6c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
21a70     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
21a74     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
21a78     00 FA 05 F6 | 	mov	result1, #0
21a7c     04 00 90 FD | 	jmp	#LR__3181
21a80                 | LR__3180
21a80     0F FB 01 F6 | 	mov	result1, local01
21a84                 | LR__3181
21a84     A7 F0 03 F6 | 	mov	ptra, fp
21a88     B2 00 A0 FD | 	call	#popregs_
21a8c                 | __system__readdir_ret
21a8c     2D 00 64 FD | 	ret
21a90                 | 
21a90                 | __system___openraw
21a90     15 4A 05 F6 | 	mov	COUNT_, #21
21a94     A8 00 A0 FD | 	call	#pushregs_
21a98     09 1F 02 F6 | 	mov	local01, arg01
21a9c     0A 21 02 F6 | 	mov	local02, arg02
21aa0     0B 23 02 F6 | 	mov	local03, arg03
21aa4     0C 25 02 F6 | 	mov	local04, arg04
21aa8     04 26 06 F6 | 	mov	local05, #4
21aac     0F 29 02 F6 | 	mov	local06, local01
21ab0     00 2A 06 F6 | 	mov	local07, #0
21ab4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21ab8     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
21abc     16 13 02 F6 | 	mov	arg01, local08
21ac0     10 15 02 F6 | 	mov	arg02, local02
21ac4     00 16 06 F6 | 	mov	arg03, #0
21ac8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
21acc     14 C1 BF FD | 	call	#__system____getvfsforfile
21ad0     FD 2E 0A F6 | 	mov	local09, result1 wz
21ad4     10 00 90 AD |  if_e	jmp	#LR__3190
21ad8     20 2E 06 F1 | 	add	local09, #32
21adc     17 FB 09 FB | 	rdlong	result1, local09 wz
21ae0     20 2E 86 F1 | 	sub	local09, #32
21ae4     14 00 90 5D |  if_ne	jmp	#LR__3191
21ae8                 | LR__3190
21ae8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21aec     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
21af0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21af4     01 FA 65 F6 | 	neg	result1, #1
21af8     8C 02 90 FD | 	jmp	#LR__3204
21afc                 | LR__3191
21afc     14 13 02 F6 | 	mov	arg01, local06
21b00     00 14 06 F6 | 	mov	arg02, #0
21b04     34 16 06 F6 | 	mov	arg03, #52
21b08     09 31 02 F6 | 	mov	local10, arg01
21b0c     98 00 A0 FD | 	call	#\builtin_bytefill_
21b10     20 2E 06 F1 | 	add	local09, #32
21b14     17 33 02 FB | 	rdlong	local11, local09
21b18     19 35 02 F6 | 	mov	local12, local11
21b1c     19 37 02 F6 | 	mov	local13, local11
21b20     20 2E 86 F1 | 	sub	local09, #32
21b24     1B 39 02 F6 | 	mov	local14, local13
21b28     13 34 46 F7 | 	zerox	local12, #19
21b2c     14 38 46 F0 | 	shr	local14, #20
21b30     02 38 66 F0 | 	shl	local14, #2
21b34     ED 38 02 F1 | 	add	local14, __methods__
21b38     1C 39 02 FB | 	rdlong	local14, local14
21b3c     14 3B 02 F6 | 	mov	local15, local06
21b40     16 3D 02 F6 | 	mov	local16, local08
21b44     11 3F 02 F6 | 	mov	local17, local03
21b48     1D 13 02 F6 | 	mov	arg01, local15
21b4c     1E 15 02 F6 | 	mov	arg02, local16
21b50     1F 17 02 F6 | 	mov	arg03, local17
21b54     F2 40 02 F6 | 	mov	local18, objptr
21b58     1A E5 01 F6 | 	mov	objptr, local12
21b5c     2D 38 62 FD | 	call	local14
21b60     20 E5 01 F6 | 	mov	objptr, local18
21b64     FD 42 0A F6 | 	mov	local19, result1 wz
21b68     04 22 CE 57 |  if_ne	test	local03, #4 wz
21b6c     58 00 90 AD |  if_e	jmp	#LR__3192
21b70     24 2E 06 F1 | 	add	local09, #36
21b74     17 33 02 FB | 	rdlong	local11, local09
21b78     19 35 02 F6 | 	mov	local12, local11
21b7c     19 37 02 F6 | 	mov	local13, local11
21b80     24 2E 86 F1 | 	sub	local09, #36
21b84     1B 39 02 F6 | 	mov	local14, local13
21b88     13 34 46 F7 | 	zerox	local12, #19
21b8c     14 38 46 F0 | 	shr	local14, #20
21b90     02 38 66 F0 | 	shl	local14, #2
21b94     ED 38 02 F1 | 	add	local14, __methods__
21b98     1C 39 02 FB | 	rdlong	local14, local14
21b9c     14 3B 02 F6 | 	mov	local15, local06
21ba0     16 3D 02 F6 | 	mov	local16, local08
21ba4     12 3F 02 F6 | 	mov	local17, local04
21ba8     1D 13 02 F6 | 	mov	arg01, local15
21bac     1E 15 02 F6 | 	mov	arg02, local16
21bb0     1F 17 02 F6 | 	mov	arg03, local17
21bb4     F2 40 02 F6 | 	mov	local18, objptr
21bb8     1A E5 01 F6 | 	mov	objptr, local12
21bbc     2D 38 62 FD | 	call	local14
21bc0     20 E5 01 F6 | 	mov	objptr, local18
21bc4     FD 42 02 F6 | 	mov	local19, result1
21bc8                 | LR__3192
21bc8     00 42 0E F2 | 	cmp	local19, #0 wz
21bcc     8C 01 90 5D |  if_ne	jmp	#LR__3202
21bd0     11 45 02 F6 | 	mov	local20, local03
21bd4     03 44 0E F5 | 	and	local20, #3 wz
21bd8     02 26 46 55 |  if_ne	or	local05, #2
21bdc     01 44 0E F2 | 	cmp	local20, #1 wz
21be0     01 26 46 55 |  if_ne	or	local05, #1
21be4     20 22 CE F7 | 	test	local03, #32 wz
21be8     C0 26 46 55 |  if_ne	or	local05, #192
21bec     08 28 06 F1 | 	add	local06, #8
21bf0     14 27 62 FC | 	wrlong	local05, local06
21bf4     0C 28 06 F1 | 	add	local06, #12
21bf8     14 47 0A FB | 	rdlong	local21, local06 wz
21bfc     14 28 86 F1 | 	sub	local06, #20
21c00     18 00 90 5D |  if_ne	jmp	#LR__3193
21c04     04 2E 06 F1 | 	add	local09, #4
21c08     17 47 02 FB | 	rdlong	local21, local09
21c0c     04 2E 86 F1 | 	sub	local09, #4
21c10     14 28 06 F1 | 	add	local06, #20
21c14     14 47 62 FC | 	wrlong	local21, local06
21c18     14 28 86 F1 | 	sub	local06, #20
21c1c                 | LR__3193
21c1c     18 28 06 F1 | 	add	local06, #24
21c20     14 47 0A FB | 	rdlong	local21, local06 wz
21c24     18 28 86 F1 | 	sub	local06, #24
21c28     18 00 90 5D |  if_ne	jmp	#LR__3194
21c2c     08 2E 06 F1 | 	add	local09, #8
21c30     17 47 02 FB | 	rdlong	local21, local09
21c34     08 2E 86 F1 | 	sub	local09, #8
21c38     18 28 06 F1 | 	add	local06, #24
21c3c     14 47 62 FC | 	wrlong	local21, local06
21c40     18 28 86 F1 | 	sub	local06, #24
21c44                 | LR__3194
21c44     24 28 06 F1 | 	add	local06, #36
21c48     14 47 0A FB | 	rdlong	local21, local06 wz
21c4c     24 28 86 F1 | 	sub	local06, #36
21c50     17 47 02 AB |  if_e	rdlong	local21, local09
21c54     24 28 06 A1 |  if_e	add	local06, #36
21c58     14 47 62 AC |  if_e	wrlong	local21, local06
21c5c     24 28 86 A1 |  if_e	sub	local06, #36
21c60     28 28 06 F1 | 	add	local06, #40
21c64     14 47 0A FB | 	rdlong	local21, local06 wz
21c68     28 28 86 F1 | 	sub	local06, #40
21c6c     18 00 90 5D |  if_ne	jmp	#LR__3195
21c70     10 2E 06 F1 | 	add	local09, #16
21c74     17 47 02 FB | 	rdlong	local21, local09
21c78     10 2E 86 F1 | 	sub	local09, #16
21c7c     28 28 06 F1 | 	add	local06, #40
21c80     14 47 62 FC | 	wrlong	local21, local06
21c84     28 28 86 F1 | 	sub	local06, #40
21c88                 | LR__3195
21c88     30 28 06 F1 | 	add	local06, #48
21c8c     14 47 0A FB | 	rdlong	local21, local06 wz
21c90     30 28 86 F1 | 	sub	local06, #48
21c94     18 00 90 5D |  if_ne	jmp	#LR__3196
21c98     0C 2E 06 F1 | 	add	local09, #12
21c9c     17 47 02 FB | 	rdlong	local21, local09
21ca0     0C 2E 86 F1 | 	sub	local09, #12
21ca4     30 28 06 F1 | 	add	local06, #48
21ca8     14 47 62 FC | 	wrlong	local21, local06
21cac     30 28 86 F1 | 	sub	local06, #48
21cb0                 | LR__3196
21cb0     1C 28 06 F1 | 	add	local06, #28
21cb4     14 47 0A FB | 	rdlong	local21, local06 wz
21cb8     1C 28 86 F1 | 	sub	local06, #28
21cbc     1C 00 90 5D |  if_ne	jmp	#LR__3197
21cc0     01 2A 06 F6 | 	mov	local07, #1
21cc4     F2 12 02 F6 | 	mov	arg01, objptr
21cc8     00 10 04 FF 
21ccc     00 12 46 F5 | 	or	arg01, ##136314880
21cd0     1C 28 06 F1 | 	add	local06, #28
21cd4     14 13 62 FC | 	wrlong	arg01, local06
21cd8     1C 28 86 F1 | 	sub	local06, #28
21cdc                 | LR__3197
21cdc     20 28 06 F1 | 	add	local06, #32
21ce0     14 47 0A FB | 	rdlong	local21, local06 wz
21ce4     20 28 86 F1 | 	sub	local06, #32
21ce8     1C 00 90 5D |  if_ne	jmp	#LR__3198
21cec     01 2A 06 F6 | 	mov	local07, #1
21cf0     F2 12 02 F6 | 	mov	arg01, objptr
21cf4     00 18 04 FF 
21cf8     00 12 46 F5 | 	or	arg01, ##137363456
21cfc     20 28 06 F1 | 	add	local06, #32
21d00     14 13 62 FC | 	wrlong	arg01, local06
21d04     20 28 86 F1 | 	sub	local06, #32
21d08                 | LR__3198
21d08     2C 28 06 F1 | 	add	local06, #44
21d0c     14 47 0A FB | 	rdlong	local21, local06 wz
21d10     2C 28 86 F1 | 	sub	local06, #44
21d14     44 00 90 5D |  if_ne	jmp	#LR__3201
21d18     14 2E 06 F1 | 	add	local09, #20
21d1c     17 47 0A FB | 	rdlong	local21, local09 wz
21d20     14 2E 86 F1 | 	sub	local09, #20
21d24     18 00 90 AD |  if_e	jmp	#LR__3199
21d28     14 2E 06 F1 | 	add	local09, #20
21d2c     17 47 02 FB | 	rdlong	local21, local09
21d30     2C 28 06 F1 | 	add	local06, #44
21d34     14 47 62 FC | 	wrlong	local21, local06
21d38     2C 28 86 F1 | 	sub	local06, #44
21d3c     1C 00 90 FD | 	jmp	#LR__3200
21d40                 | LR__3199
21d40     01 2A 06 F6 | 	mov	local07, #1
21d44     F2 12 02 F6 | 	mov	arg01, objptr
21d48     00 20 04 FF 
21d4c     00 12 46 F5 | 	or	arg01, ##138412032
21d50     2C 28 06 F1 | 	add	local06, #44
21d54     14 13 62 FC | 	wrlong	arg01, local06
21d58     2C 28 86 F1 | 	sub	local06, #44
21d5c                 | LR__3200
21d5c                 | LR__3201
21d5c                 | LR__3202
21d5c     00 2A 0E F2 | 	cmp	local07, #0 wz
21d60     14 13 02 56 |  if_ne	mov	arg01, local06
21d64     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
21d68     00 42 0E F2 | 	cmp	local19, #0 wz
21d6c     00 12 06 A6 |  if_e	mov	arg01, #0
21d70     10 00 90 5D |  if_ne	jmp	#LR__3203
21d74     00 12 4E F2 | 	cmps	arg01, #0 wz
21d78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21d7c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21d80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21d84                 | LR__3203
21d84     21 FB 01 F6 | 	mov	result1, local19
21d88                 | LR__3204
21d88     A7 F0 03 F6 | 	mov	ptra, fp
21d8c     B2 00 A0 FD | 	call	#popregs_
21d90                 | __system___openraw_ret
21d90     2D 00 64 FD | 	ret
21d94                 | 
21d94                 | __system___closeraw
21d94     05 4A 05 F6 | 	mov	COUNT_, #5
21d98     A8 00 A0 FD | 	call	#pushregs_
21d9c     09 1F 02 F6 | 	mov	local01, arg01
21da0     00 20 06 F6 | 	mov	local02, #0
21da4     08 1E 06 F1 | 	add	local01, #8
21da8     0F FB 09 FB | 	rdlong	result1, local01 wz
21dac     08 1E 86 F1 | 	sub	local01, #8
21db0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21db4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21db8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21dbc     01 FA 65 A6 |  if_e	neg	result1, #1
21dc0     A8 00 90 AD |  if_e	jmp	#LR__3212
21dc4     2C 1E 06 F1 | 	add	local01, #44
21dc8     0F FB 09 FB | 	rdlong	result1, local01 wz
21dcc     2C 1E 86 F1 | 	sub	local01, #44
21dd0     38 00 90 AD |  if_e	jmp	#LR__3210
21dd4     2C 1E 06 F1 | 	add	local01, #44
21dd8     0F 23 02 FB | 	rdlong	local03, local01
21ddc     11 25 02 F6 | 	mov	local04, local03
21de0     2C 1E 86 F1 | 	sub	local01, #44
21de4     13 24 46 F7 | 	zerox	local04, #19
21de8     14 22 46 F0 | 	shr	local03, #20
21dec     02 22 66 F0 | 	shl	local03, #2
21df0     ED 22 02 F1 | 	add	local03, __methods__
21df4     11 23 02 FB | 	rdlong	local03, local03
21df8     0F 13 02 F6 | 	mov	arg01, local01
21dfc     F2 26 02 F6 | 	mov	local05, objptr
21e00     12 E5 01 F6 | 	mov	objptr, local04
21e04     2D 22 62 FD | 	call	local03
21e08     13 E5 01 F6 | 	mov	objptr, local05
21e0c                 | LR__3210
21e0c     24 1E 06 F1 | 	add	local01, #36
21e10     0F 27 0A FB | 	rdlong	local05, local01 wz
21e14     24 1E 86 F1 | 	sub	local01, #36
21e18     3C 00 90 AD |  if_e	jmp	#LR__3211
21e1c     24 1E 06 F1 | 	add	local01, #36
21e20     0F 23 02 FB | 	rdlong	local03, local01
21e24     11 25 02 F6 | 	mov	local04, local03
21e28     24 1E 86 F1 | 	sub	local01, #36
21e2c     13 24 46 F7 | 	zerox	local04, #19
21e30     14 22 46 F0 | 	shr	local03, #20
21e34     02 22 66 F0 | 	shl	local03, #2
21e38     ED 22 02 F1 | 	add	local03, __methods__
21e3c     11 23 02 FB | 	rdlong	local03, local03
21e40     0F 13 02 F6 | 	mov	arg01, local01
21e44     F2 26 02 F6 | 	mov	local05, objptr
21e48     12 E5 01 F6 | 	mov	objptr, local04
21e4c     2D 22 62 FD | 	call	local03
21e50     13 E5 01 F6 | 	mov	objptr, local05
21e54     FD 20 02 F6 | 	mov	local02, result1
21e58                 | LR__3211
21e58     0F 13 02 F6 | 	mov	arg01, local01
21e5c     00 14 06 F6 | 	mov	arg02, #0
21e60     34 16 06 F6 | 	mov	arg03, #52
21e64     98 00 A0 FD | 	call	#\builtin_bytefill_
21e68     10 FB 01 F6 | 	mov	result1, local02
21e6c                 | LR__3212
21e6c     A7 F0 03 F6 | 	mov	ptra, fp
21e70     B2 00 A0 FD | 	call	#popregs_
21e74                 | __system___closeraw_ret
21e74     2D 00 64 FD | 	ret
21e78                 | 
21e78                 | __system___vfs_open_sdcardx
21e78     0B 4A 05 F6 | 	mov	COUNT_, #11
21e7c     A8 00 A0 FD | 	call	#pushregs_
21e80     09 23 02 F6 | 	mov	local03, arg01
21e84     0A 25 02 F6 | 	mov	local04, arg02
21e88     0B 27 02 F6 | 	mov	local05, arg03
21e8c     0C 29 02 F6 | 	mov	local06, arg04
21e90     01 00 00 FF 
21e94     24 12 06 F6 | 	mov	arg01, ##548
21e98     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
21e9c     FD 2A 02 F6 | 	mov	local07, result1
21ea0     01 00 00 FF 
21ea4     34 12 06 F6 | 	mov	arg01, ##564
21ea8     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
21eac     FD 2C 02 F6 | 	mov	local08, result1
21eb0     11 19 02 F6 | 	mov	arg04, local03
21eb4     1F 18 C6 F0 | 	sar	arg04, #31
21eb8     11 17 02 F6 | 	mov	arg03, local03
21ebc     01 12 06 F6 | 	mov	arg01, #1
21ec0     00 14 06 F6 | 	mov	arg02, #0
21ec4     48 DC BF FD | 	call	#__system___int64_shl
21ec8     FD 1E 02 F6 | 	mov	local01, result1
21ecc     FE 2E 02 F6 | 	mov	local09, result2
21ed0     12 19 02 F6 | 	mov	arg04, local04
21ed4     1F 18 C6 F0 | 	sar	arg04, #31
21ed8     12 17 02 F6 | 	mov	arg03, local04
21edc     01 12 06 F6 | 	mov	arg01, #1
21ee0     00 14 06 F6 | 	mov	arg02, #0
21ee4     28 DC BF FD | 	call	#__system___int64_shl
21ee8     FD 1E 42 F5 | 	or	local01, result1
21eec     FE 2E 42 F5 | 	or	local09, result2
21ef0     13 19 02 F6 | 	mov	arg04, local05
21ef4     1F 18 C6 F0 | 	sar	arg04, #31
21ef8     13 17 02 F6 | 	mov	arg03, local05
21efc     01 12 06 F6 | 	mov	arg01, #1
21f00     00 14 06 F6 | 	mov	arg02, #0
21f04     08 DC BF FD | 	call	#__system___int64_shl
21f08     FD 1E 42 F5 | 	or	local01, result1
21f0c     FE 2E 42 F5 | 	or	local09, result2
21f10     14 19 02 F6 | 	mov	arg04, local06
21f14     1F 18 C6 F0 | 	sar	arg04, #31
21f18     14 17 02 F6 | 	mov	arg03, local06
21f1c     01 12 06 F6 | 	mov	arg01, #1
21f20     00 14 06 F6 | 	mov	arg02, #0
21f24     E8 DB BF FD | 	call	#__system___int64_shl
21f28     17 15 02 F6 | 	mov	arg02, local09
21f2c     FD 1E 42 F5 | 	or	local01, result1
21f30     0A FD 41 F5 | 	or	result2, arg02
21f34     FE 20 02 F6 | 	mov	local02, result2
21f38     0F 13 02 F6 | 	mov	arg01, local01
21f3c     10 15 02 F6 | 	mov	arg02, local02
21f40     04 DC BF FD | 	call	#__system___usepins
21f44     00 FA 0D F2 | 	cmp	result1, #0 wz
21f48     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21f4c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
21f50     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21f54     00 FA 05 A6 |  if_e	mov	result1, #0
21f58     B4 00 90 AD |  if_e	jmp	#LR__3222
21f5c     0F 31 02 F6 | 	mov	local10, local01
21f60     10 2F 02 F6 | 	mov	local09, local02
21f64     01 00 00 FF 
21f68     08 2A 06 F1 | 	add	local07, ##520
21f6c     15 31 62 FC | 	wrlong	local10, local07
21f70     04 2A 06 F1 | 	add	local07, #4
21f74     15 2F 62 FC | 	wrlong	local09, local07
21f78     01 00 00 FF 
21f7c     0C 2A 86 F1 | 	sub	local07, ##524
21f80     14 1B 02 F6 | 	mov	arg05, local06
21f84     00 12 06 F6 | 	mov	arg01, #0
21f88     11 15 02 F6 | 	mov	arg02, local03
21f8c     12 17 02 F6 | 	mov	arg03, local04
21f90     13 19 02 F6 | 	mov	arg04, local05
21f94     F2 30 02 F6 | 	mov	local10, objptr
21f98     15 E5 01 F6 | 	mov	objptr, local07
21f9c     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
21fa0     18 E5 01 F6 | 	mov	objptr, local10
21fa4     FD 32 0A F6 | 	mov	local11, result1 wz
21fa8     24 00 90 5D |  if_ne	jmp	#LR__3220
21fac     65 01 00 FF 
21fb0     62 14 06 F6 | 	mov	arg02, ##@LR__4617
21fb4     16 13 02 F6 | 	mov	arg01, local08
21fb8     00 16 06 F6 | 	mov	arg03, #0
21fbc     F2 32 02 F6 | 	mov	local11, objptr
21fc0     15 E5 01 F6 | 	mov	objptr, local07
21fc4     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
21fc8     19 E5 01 F6 | 	mov	objptr, local11
21fcc     FD 32 02 F6 | 	mov	local11, result1
21fd0                 | LR__3220
21fd0     00 32 0E F2 | 	cmp	local11, #0 wz
21fd4     24 00 90 AD |  if_e	jmp	#LR__3221
21fd8     0F 13 02 F6 | 	mov	arg01, local01
21fdc     10 15 02 F6 | 	mov	arg02, local02
21fe0     B8 DB BF FD | 	call	#__system___freepins
21fe4     19 13 6A F6 | 	neg	arg01, local11 wz
21fe8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21fec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21ff0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21ff4     00 FA 05 F6 | 	mov	result1, #0
21ff8     14 00 90 FD | 	jmp	#LR__3222
21ffc                 | LR__3221
21ffc     15 13 02 F6 | 	mov	arg01, local07
22000     F2 32 02 F6 | 	mov	local11, objptr
22004     15 E5 01 F6 | 	mov	objptr, local07
22008     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
2200c     19 E5 01 F6 | 	mov	objptr, local11
22010                 | LR__3222
22010     A7 F0 03 F6 | 	mov	ptra, fp
22014     B2 00 A0 FD | 	call	#popregs_
22018                 | __system___vfs_open_sdcardx_ret
22018     2D 00 64 FD | 	ret
2201c                 | 
2201c                 | __system____default_getc
2201c     03 4A 05 F6 | 	mov	COUNT_, #3
22020     A8 00 A0 FD | 	call	#pushregs_
22024     09 1F 02 F6 | 	mov	local01, arg01
22028     0F 21 02 FB | 	rdlong	local02, local01
2202c     08 20 06 F1 | 	add	local02, #8
22030     10 23 02 FB | 	rdlong	local03, local02
22034     02 22 CE F7 | 	test	local03, #2 wz
22038     0F 13 02 56 |  if_ne	mov	arg01, local01
2203c     00 01 B0 5D |  if_ne	call	#__system____default_flush
22040     10 23 02 FB | 	rdlong	local03, local02
22044     01 22 46 F5 | 	or	local03, #1
22048     10 23 62 FC | 	wrlong	local03, local02
2204c     08 20 86 F1 | 	sub	local02, #8
22050     10 23 0A FB | 	rdlong	local03, local02 wz
22054     0C 00 90 5D |  if_ne	jmp	#LR__3230
22058     0F 13 02 F6 | 	mov	arg01, local01
2205c     60 16 B0 FD | 	call	#__system____default_filbuf
22060     FD 22 02 F6 | 	mov	local03, result1
22064                 | LR__3230
22064     01 22 56 F2 | 	cmps	local03, #1 wc
22068     01 FA 65 C6 |  if_b	neg	result1, #1
2206c     1C 00 90 CD |  if_b	jmp	#LR__3231
22070     01 22 86 F1 | 	sub	local03, #1
22074     10 23 62 FC | 	wrlong	local03, local02
22078     04 20 06 F1 | 	add	local02, #4
2207c     10 23 02 FB | 	rdlong	local03, local02
22080     11 FB C1 FA | 	rdbyte	result1, local03
22084     01 22 06 F1 | 	add	local03, #1
22088     10 23 62 FC | 	wrlong	local03, local02
2208c                 | LR__3231
2208c     A7 F0 03 F6 | 	mov	ptra, fp
22090     B2 00 A0 FD | 	call	#popregs_
22094                 | __system____default_getc_ret
22094     2D 00 64 FD | 	ret
22098                 | 
22098                 | __system____default_putc
22098     06 4A 05 F6 | 	mov	COUNT_, #6
2209c     A8 00 A0 FD | 	call	#pushregs_
220a0     09 1F 02 F6 | 	mov	local01, arg01
220a4     0A 21 02 F6 | 	mov	local02, arg02
220a8     10 23 02 FB | 	rdlong	local03, local02
220ac     08 22 06 F1 | 	add	local03, #8
220b0     11 FB 01 FB | 	rdlong	result1, local03
220b4     01 FA CD F7 | 	test	result1, #1 wz
220b8     10 13 02 56 |  if_ne	mov	arg01, local02
220bc     80 00 B0 5D |  if_ne	call	#__system____default_flush
220c0     11 25 02 FB | 	rdlong	local04, local03
220c4     02 24 46 F5 | 	or	local04, #2
220c8     11 25 62 FC | 	wrlong	local04, local03
220cc     08 22 86 F1 | 	sub	local03, #8
220d0     11 27 02 FB | 	rdlong	local05, local03
220d4     10 22 06 F1 | 	add	local03, #16
220d8     11 15 02 FB | 	rdlong	arg02, local03
220dc     10 22 86 F1 | 	sub	local03, #16
220e0     13 FB 01 F6 | 	mov	result1, local05
220e4     0A FB 01 F1 | 	add	result1, arg02
220e8     FD 1E 42 FC | 	wrbyte	local01, result1
220ec     0F 1F E2 F8 | 	getbyte	local01, local01, #0
220f0     01 26 06 F1 | 	add	local05, #1
220f4     11 27 62 FC | 	wrlong	local05, local03
220f8     06 20 06 F1 | 	add	local02, #6
220fc     10 29 EA FA | 	rdword	local06, local02 wz
22100     06 20 86 F1 | 	sub	local02, #6
22104     0C 22 06 51 |  if_ne	add	local03, #12
22108     11 25 02 5B |  if_ne	rdlong	local04, local03
2210c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
22110     0C 00 90 AD |  if_e	jmp	#LR__3240
22114     0A 1E 0E F2 | 	cmp	local01, #10 wz
22118     01 28 0E A2 |  if_e	cmp	local06, #1 wz
2211c     10 00 90 5D |  if_ne	jmp	#LR__3241
22120                 | LR__3240
22120     10 13 02 F6 | 	mov	arg01, local02
22124     18 00 B0 FD | 	call	#__system____default_flush
22128     00 FA 0D F2 | 	cmp	result1, #0 wz
2212c     01 1E 66 56 |  if_ne	neg	local01, #1
22130                 | LR__3241
22130     0F FB 01 F6 | 	mov	result1, local01
22134     A7 F0 03 F6 | 	mov	ptra, fp
22138     B2 00 A0 FD | 	call	#popregs_
2213c                 | __system____default_putc_ret
2213c     2D 00 64 FD | 	ret
22140                 | 
22140                 | __system____default_flush
22140     06 4A 05 F6 | 	mov	COUNT_, #6
22144     A8 00 A0 FD | 	call	#pushregs_
22148     09 1F 02 F6 | 	mov	local01, arg01
2214c     0F 21 02 FB | 	rdlong	local02, local01
22150     10 23 02 FB | 	rdlong	local03, local02
22154     08 20 06 F1 | 	add	local02, #8
22158     10 FB 01 FB | 	rdlong	result1, local02
2215c     08 20 86 F1 | 	sub	local02, #8
22160     02 FA CD F7 | 	test	result1, #2 wz
22164     D0 00 90 AD |  if_e	jmp	#LR__3252
22168     01 22 56 F2 | 	cmps	local03, #1 wc
2216c     20 01 90 CD |  if_b	jmp	#LR__3254
22170     08 1E 06 F1 | 	add	local01, #8
22174     0F FB 01 FB | 	rdlong	result1, local01
22178     08 1E 86 F1 | 	sub	local01, #8
2217c     40 FA CD F7 | 	test	result1, #64 wz
22180     68 00 90 AD |  if_e	jmp	#LR__3251
22184     08 1E 06 F1 | 	add	local01, #8
22188     0F 17 02 FB | 	rdlong	arg03, local01
2218c     08 1E 86 F1 | 	sub	local01, #8
22190     80 16 CE F7 | 	test	arg03, #128 wz
22194     54 00 90 AD |  if_e	jmp	#LR__3250
22198     30 1E 06 F1 | 	add	local01, #48
2219c     0F 25 02 FB | 	rdlong	local04, local01
221a0     12 27 02 F6 | 	mov	local05, local04
221a4     30 1E 86 F1 | 	sub	local01, #48
221a8     13 26 46 F7 | 	zerox	local05, #19
221ac     14 24 46 F0 | 	shr	local04, #20
221b0     02 24 66 F0 | 	shl	local04, #2
221b4     ED 24 02 F1 | 	add	local04, __methods__
221b8     12 25 02 FB | 	rdlong	local04, local04
221bc     0F 13 02 F6 | 	mov	arg01, local01
221c0     00 14 06 F6 | 	mov	arg02, #0
221c4     02 16 06 F6 | 	mov	arg03, #2
221c8     F2 28 02 F6 | 	mov	local06, objptr
221cc     13 E5 01 F6 | 	mov	objptr, local05
221d0     2D 24 62 FD | 	call	local04
221d4     14 E5 01 F6 | 	mov	objptr, local06
221d8     08 1E 06 F1 | 	add	local01, #8
221dc     0F 29 02 FB | 	rdlong	local06, local01
221e0     80 28 26 F5 | 	andn	local06, #128
221e4     0F 29 62 FC | 	wrlong	local06, local01
221e8     08 1E 86 F1 | 	sub	local01, #8
221ec                 | LR__3250
221ec                 | LR__3251
221ec     18 1E 06 F1 | 	add	local01, #24
221f0     0F 25 02 FB | 	rdlong	local04, local01
221f4     12 27 02 F6 | 	mov	local05, local04
221f8     18 1E 86 F1 | 	sub	local01, #24
221fc     13 26 46 F7 | 	zerox	local05, #19
22200     14 24 46 F0 | 	shr	local04, #20
22204     02 24 66 F0 | 	shl	local04, #2
22208     ED 24 02 F1 | 	add	local04, __methods__
2220c     12 25 02 FB | 	rdlong	local04, local04
22210     10 20 06 F1 | 	add	local02, #16
22214     10 15 02 FB | 	rdlong	arg02, local02
22218     10 20 86 F1 | 	sub	local02, #16
2221c     0F 13 02 F6 | 	mov	arg01, local01
22220     11 17 02 F6 | 	mov	arg03, local03
22224     F2 28 02 F6 | 	mov	local06, objptr
22228     13 E5 01 F6 | 	mov	objptr, local05
2222c     2D 24 62 FD | 	call	local04
22230     14 E5 01 F6 | 	mov	objptr, local06
22234     58 00 90 FD | 	jmp	#LR__3254
22238                 | LR__3252
22238     08 20 06 F1 | 	add	local02, #8
2223c     10 29 02 FB | 	rdlong	local06, local02
22240     08 20 86 F1 | 	sub	local02, #8
22244     01 28 CE F7 | 	test	local06, #1 wz
22248     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2224c     40 00 90 AD |  if_e	jmp	#LR__3253
22250     30 1E 06 F1 | 	add	local01, #48
22254     0F 25 02 FB | 	rdlong	local04, local01
22258     12 27 02 F6 | 	mov	local05, local04
2225c     30 1E 86 F1 | 	sub	local01, #48
22260     13 26 46 F7 | 	zerox	local05, #19
22264     14 24 46 F0 | 	shr	local04, #20
22268     02 24 66 F0 | 	shl	local04, #2
2226c     ED 24 02 F1 | 	add	local04, __methods__
22270     12 25 02 FB | 	rdlong	local04, local04
22274     0F 13 02 F6 | 	mov	arg01, local01
22278     11 15 62 F6 | 	neg	arg02, local03
2227c     01 16 06 F6 | 	mov	arg03, #1
22280     F2 28 02 F6 | 	mov	local06, objptr
22284     13 E5 01 F6 | 	mov	objptr, local05
22288     2D 24 62 FD | 	call	local04
2228c     14 E5 01 F6 | 	mov	objptr, local06
22290                 | LR__3253
22290                 | LR__3254
22290     10 01 68 FC | 	wrlong	#0, local02
22294     04 20 06 F1 | 	add	local02, #4
22298     10 01 68 FC | 	wrlong	#0, local02
2229c     04 20 06 F1 | 	add	local02, #4
222a0     10 01 68 FC | 	wrlong	#0, local02
222a4     00 FA 05 F6 | 	mov	result1, #0
222a8     A7 F0 03 F6 | 	mov	ptra, fp
222ac     B2 00 A0 FD | 	call	#popregs_
222b0                 | __system____default_flush_ret
222b0     2D 00 64 FD | 	ret
222b4                 | 
222b4                 | __system____default_buffer_init
222b4     02 4A 05 F6 | 	mov	COUNT_, #2
222b8     A8 00 A0 FD | 	call	#pushregs_
222bc     09 1F 02 F6 | 	mov	local01, arg01
222c0     0F 21 02 FB | 	rdlong	local02, local01
222c4     0F 13 02 F6 | 	mov	arg01, local01
222c8     F8 02 B0 FD | 	call	#__system___isatty
222cc     00 FA 0D F2 | 	cmp	result1, #0 wz
222d0     06 1E 06 51 |  if_ne	add	local01, #6
222d4     0F 0B 58 5C |  if_ne	wrword	#5, local01
222d8     06 1E 06 A1 |  if_e	add	local01, #6
222dc     0F 0D 58 AC |  if_e	wrword	#6, local01
222e0     14 20 06 F1 | 	add	local02, #20
222e4     10 1F 02 F6 | 	mov	local01, local02
222e8     04 20 86 F1 | 	sub	local02, #4
222ec     10 1F 62 FC | 	wrlong	local01, local02
222f0     04 20 86 F1 | 	sub	local02, #4
222f4     02 00 80 FF 
222f8     10 01 68 FC | 	wrlong	##1024, local02
222fc     00 FA 05 F6 | 	mov	result1, #0
22300     A7 F0 03 F6 | 	mov	ptra, fp
22304     B2 00 A0 FD | 	call	#popregs_
22308                 | __system____default_buffer_init_ret
22308     2D 00 64 FD | 	ret
2230c                 | 
2230c                 | __system__stat
2230c     04 4A 05 F6 | 	mov	COUNT_, #4
22310     A8 00 A0 FD | 	call	#pushregs_
22314     0A 1F 02 F6 | 	mov	local01, arg02
22318     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2231c     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
22320     09 15 02 F6 | 	mov	arg02, arg01
22324     10 13 02 F6 | 	mov	arg01, local02
22328     00 16 06 F6 | 	mov	arg03, #0
2232c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
22330     B0 B8 BF FD | 	call	#__system____getvfsforfile
22334     FD 22 0A F6 | 	mov	local03, result1 wz
22338     10 00 90 AD |  if_e	jmp	#LR__3260
2233c     34 22 06 F1 | 	add	local03, #52
22340     11 17 0A FB | 	rdlong	arg03, local03 wz
22344     34 22 86 F1 | 	sub	local03, #52
22348     14 00 90 5D |  if_ne	jmp	#LR__3261
2234c                 | LR__3260
2234c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22350     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
22354     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22358     01 FA 65 F6 | 	neg	result1, #1
2235c     68 00 90 FD | 	jmp	#LR__3262
22360                 | LR__3261
22360     0F 13 02 F6 | 	mov	arg01, local01
22364     00 14 06 F6 | 	mov	arg02, #0
22368     30 16 06 F6 | 	mov	arg03, #48
2236c     09 25 02 F6 | 	mov	local04, arg01
22370     98 00 A0 FD | 	call	#\builtin_bytefill_
22374     12 FB 01 F6 | 	mov	result1, local04
22378     10 13 CA FA | 	rdbyte	arg01, local02 wz
2237c     08 1E 06 A1 |  if_e	add	local01, #8
22380     08 00 80 AF 
22384     0F FF 6B AC |  if_e	wrlong	##4607, local01
22388     00 FA 05 A6 |  if_e	mov	result1, #0
2238c     38 00 90 AD |  if_e	jmp	#LR__3262
22390     34 22 06 F1 | 	add	local03, #52
22394     11 23 02 FB | 	rdlong	local03, local03
22398     11 25 02 F6 | 	mov	local04, local03
2239c     13 22 46 F7 | 	zerox	local03, #19
223a0     14 24 46 F0 | 	shr	local04, #20
223a4     02 24 66 F0 | 	shl	local04, #2
223a8     ED 24 02 F1 | 	add	local04, __methods__
223ac     12 25 02 FB | 	rdlong	local04, local04
223b0     10 13 02 F6 | 	mov	arg01, local02
223b4     0F 15 02 F6 | 	mov	arg02, local01
223b8     F2 20 02 F6 | 	mov	local02, objptr
223bc     11 E5 01 F6 | 	mov	objptr, local03
223c0     2D 24 62 FD | 	call	local04
223c4     10 E5 01 F6 | 	mov	objptr, local02
223c8                 | LR__3262
223c8     A7 F0 03 F6 | 	mov	ptra, fp
223cc     B2 00 A0 FD | 	call	#popregs_
223d0                 | __system__stat_ret
223d0     2D 00 64 FD | 	ret
223d4                 | 
223d4                 | __system__read
223d4     0A 12 16 F2 | 	cmp	arg01, #10 wc
223d8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
223dc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
223e0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
223e4     01 FA 65 36 |  if_ae	neg	result1, #1
223e8     20 00 90 3D |  if_ae	jmp	#LR__3270
223ec     34 12 06 FD | 	qmul	arg01, #52
223f0     02 00 00 FF 
223f4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
223f8     18 12 62 FD | 	getqx	arg01
223fc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22400     02 00 00 FF 
22404     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22408     CC 0F B0 FD | 	call	#__system___vfsread
2240c                 | LR__3270
2240c                 | __system__read_ret
2240c     2D 00 64 FD | 	ret
22410                 | 
22410                 | __system__close
22410     0A 12 16 F2 | 	cmp	arg01, #10 wc
22414     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
22418     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2241c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
22420     01 FA 65 36 |  if_ae	neg	result1, #1
22424     20 00 90 3D |  if_ae	jmp	#LR__3280
22428     34 12 06 FD | 	qmul	arg01, #52
2242c     02 00 00 FF 
22430     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
22434     18 12 62 FD | 	getqx	arg01
22438     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2243c     02 00 00 FF 
22440     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22444     4C F9 BF FD | 	call	#__system___closeraw
22448                 | LR__3280
22448                 | __system__close_ret
22448     2D 00 64 FD | 	ret
2244c                 | 
2244c                 | __system__lseek
2244c     06 4A 05 F6 | 	mov	COUNT_, #6
22450     A8 00 A0 FD | 	call	#pushregs_
22454     0A 12 16 F2 | 	cmp	arg01, #10 wc
22458     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2245c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22460     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
22464     01 FA 65 36 |  if_ae	neg	result1, #1
22468     C4 00 90 3D |  if_ae	jmp	#LR__3291
2246c     34 12 06 FD | 	qmul	arg01, #52
22470     02 00 00 FF 
22474     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
22478     18 1E 62 FD | 	getqx	local01
2247c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
22480     30 1E 06 F1 | 	add	local01, #48
22484     0F 13 0A FB | 	rdlong	arg01, local01 wz
22488     30 1E 86 F1 | 	sub	local01, #48
2248c     02 00 00 FF 
22490     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22494     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22498     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2249c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
224a0     01 FA 65 A6 |  if_e	neg	result1, #1
224a4     88 00 90 AD |  if_e	jmp	#LR__3291
224a8     08 1E 06 F1 | 	add	local01, #8
224ac     0F 21 02 FB | 	rdlong	local02, local01
224b0     08 1E 86 F1 | 	sub	local01, #8
224b4     40 20 CE F7 | 	test	local02, #64 wz
224b8     08 1E 06 51 |  if_ne	add	local01, #8
224bc     0F 21 02 5B |  if_ne	rdlong	local02, local01
224c0     80 20 46 55 |  if_ne	or	local02, #128
224c4     0F 21 62 5C |  if_ne	wrlong	local02, local01
224c8     08 1E 86 51 |  if_ne	sub	local01, #8
224cc     30 1E 06 F1 | 	add	local01, #48
224d0     0F 23 02 FB | 	rdlong	local03, local01
224d4     11 25 02 F6 | 	mov	local04, local03
224d8     30 1E 86 F1 | 	sub	local01, #48
224dc     13 24 46 F7 | 	zerox	local04, #19
224e0     14 22 46 F0 | 	shr	local03, #20
224e4     02 22 66 F0 | 	shl	local03, #2
224e8     ED 22 02 F1 | 	add	local03, __methods__
224ec     11 23 02 FB | 	rdlong	local03, local03
224f0     0F 13 02 F6 | 	mov	arg01, local01
224f4     F2 26 02 F6 | 	mov	local05, objptr
224f8     12 E5 01 F6 | 	mov	objptr, local04
224fc     2D 22 62 FD | 	call	local03
22500     13 E5 01 F6 | 	mov	objptr, local05
22504     FD 28 02 F6 | 	mov	local06, result1
22508     00 28 56 F2 | 	cmps	local06, #0 wc
2250c     1C 00 90 3D |  if_ae	jmp	#LR__3290
22510     14 13 6A F6 | 	neg	arg01, local06 wz
22514     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22518     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2251c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22520     01 FA 65 56 |  if_ne	neg	result1, #1
22524     00 FA 05 A6 |  if_e	mov	result1, #0
22528     04 00 90 FD | 	jmp	#LR__3291
2252c                 | LR__3290
2252c     14 FB 01 F6 | 	mov	result1, local06
22530                 | LR__3291
22530     A7 F0 03 F6 | 	mov	ptra, fp
22534     B2 00 A0 FD | 	call	#popregs_
22538                 | __system__lseek_ret
22538     2D 00 64 FD | 	ret
2253c                 | 
2253c                 | __system___ioctl
2253c     03 4A 05 F6 | 	mov	COUNT_, #3
22540     A8 00 A0 FD | 	call	#pushregs_
22544     00 12 4E F2 | 	cmps	arg01, #0 wz
22548     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2254c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22550     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22554     01 FA 65 A6 |  if_e	neg	result1, #1
22558     5C 00 90 AD |  if_e	jmp	#LR__3301
2255c     28 12 06 F1 | 	add	arg01, #40
22560     09 1F 02 FB | 	rdlong	local01, arg01
22564     0F 21 02 F6 | 	mov	local02, local01
22568     28 12 86 F1 | 	sub	arg01, #40
2256c     13 20 46 F7 | 	zerox	local02, #19
22570     14 1E 46 F0 | 	shr	local01, #20
22574     02 1E 66 F0 | 	shl	local01, #2
22578     ED 1E 02 F1 | 	add	local01, __methods__
2257c     0F 1F 02 FB | 	rdlong	local01, local01
22580     F2 22 02 F6 | 	mov	local03, objptr
22584     10 E5 01 F6 | 	mov	objptr, local02
22588     2D 1E 62 FD | 	call	local01
2258c     11 E5 01 F6 | 	mov	objptr, local03
22590     FD 12 0A F6 | 	mov	arg01, result1 wz
22594     1C 00 90 AD |  if_e	jmp	#LR__3300
22598     00 12 4E F2 | 	cmps	arg01, #0 wz
2259c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
225a0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
225a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
225a8     01 FA 65 56 |  if_ne	neg	result1, #1
225ac     00 FA 05 A6 |  if_e	mov	result1, #0
225b0     04 00 90 FD | 	jmp	#LR__3301
225b4                 | LR__3300
225b4     00 FA 05 F6 | 	mov	result1, #0
225b8                 | LR__3301
225b8     A7 F0 03 F6 | 	mov	ptra, fp
225bc     B2 00 A0 FD | 	call	#popregs_
225c0                 | __system___ioctl_ret
225c0     2D 00 64 FD | 	ret
225c4                 | 
225c4                 | __system___isatty
225c4     00 4A 05 F6 | 	mov	COUNT_, #0
225c8     A8 00 A0 FD | 	call	#pushregs_
225cc     0C F0 07 F1 | 	add	ptra, #12
225d0     04 4E 05 F1 | 	add	fp, #4
225d4     A7 12 62 FC | 	wrlong	arg01, fp
225d8     04 4E 05 F1 | 	add	fp, #4
225dc     A7 16 02 F6 | 	mov	arg03, fp
225e0     08 4E 85 F1 | 	sub	fp, #8
225e4     00 15 06 F6 | 	mov	arg02, #256
225e8     50 FF BF FD | 	call	#__system___ioctl
225ec     00 FA 0D F2 | 	cmp	result1, #0 wz
225f0     01 FA 05 A6 |  if_e	mov	result1, #1
225f4     00 FA 05 56 |  if_ne	mov	result1, #0
225f8     A7 F0 03 F6 | 	mov	ptra, fp
225fc     B2 00 A0 FD | 	call	#popregs_
22600                 | __system___isatty_ret
22600     2D 00 64 FD | 	ret
22604                 | 
22604                 | __system____getftab
22604     0A 12 16 F2 | 	cmp	arg01, #10 wc
22608     34 12 06 CD |  if_b	qmul	arg01, #52
2260c     00 FA 05 36 |  if_ae	mov	result1, #0
22610     02 00 00 CF 
22614     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
22618     18 FA 61 CD |  if_b	getqx	result1
2261c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
22620     02 00 00 CF 
22624     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
22628                 | __system____getftab_ret
22628     2D 00 64 FD | 	ret
2262c                 | 
2262c                 | __system__strncpy
2262c     09 01 02 F6 | 	mov	_var01, arg01
22630                 | LR__3310
22630     01 16 86 F1 | 	sub	arg03, #1
22634     00 16 56 F2 | 	cmps	arg03, #0 wc
22638     18 00 90 CD |  if_b	jmp	#LR__3311
2263c     0A FB C1 FA | 	rdbyte	result1, arg02
22640     00 FB 41 FC | 	wrbyte	result1, _var01
22644     01 14 06 F1 | 	add	arg02, #1
22648     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2264c     01 00 06 F1 | 	add	_var01, #1
22650     DC FF 9F 5D |  if_ne	jmp	#LR__3310
22654                 | LR__3311
22654     97 0C 48 FB | 	callpa	#(@LR__3313-@LR__3312)>>2,fcache_load_ptr_
22658                 | LR__3312
22658     01 16 86 F1 | 	sub	arg03, #1
2265c     00 16 56 F2 | 	cmps	arg03, #0 wc
22660     00 03 02 36 |  if_ae	mov	_var02, _var01
22664     01 00 06 31 |  if_ae	add	_var01, #1
22668     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2266c     E8 FF 9F 3D |  if_ae	jmp	#LR__3312
22670                 | LR__3313
22670     09 FB 01 F6 | 	mov	result1, arg01
22674                 | __system__strncpy_ret
22674     2D 00 64 FD | 	ret
22678                 | 
22678                 | __system__strncat
22678     00 14 4E F2 | 	cmps	arg02, #0 wz
2267c     50 00 90 AD |  if_e	jmp	#LR__3324
22680     01 16 16 F2 | 	cmp	arg03, #1 wc
22684     48 00 90 CD |  if_b	jmp	#LR__3324
22688     09 01 02 F6 | 	mov	_var01, arg01
2268c     97 1E 48 FB | 	callpa	#(@LR__3322-@LR__3320)>>2,fcache_load_ptr_
22690                 | LR__3320
22690     00 FB C9 FA | 	rdbyte	result1, _var01 wz
22694     01 00 06 51 |  if_ne	add	_var01, #1
22698     F4 FF 9F 5D |  if_ne	jmp	#LR__3320
2269c     0B 03 02 F6 | 	mov	_var02, arg03
226a0                 | LR__3321
226a0     0A 05 C2 FA | 	rdbyte	_var03, arg02
226a4     02 07 02 F6 | 	mov	_var04, _var03
226a8     07 06 4E F7 | 	zerox	_var04, #7 wz
226ac     01 14 06 F1 | 	add	arg02, #1
226b0     18 00 90 AD |  if_e	jmp	#LR__3323
226b4     01 02 86 F1 | 	sub	_var02, #1
226b8     00 02 56 F2 | 	cmps	_var02, #0 wc
226bc     00 07 02 36 |  if_ae	mov	_var04, _var01
226c0     01 00 06 31 |  if_ae	add	_var01, #1
226c4     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
226c8     D4 FF 9F 3D |  if_ae	jmp	#LR__3321
226cc                 | LR__3322
226cc                 | LR__3323
226cc     00 01 48 FC | 	wrbyte	#0, _var01
226d0                 | LR__3324
226d0     09 FB 01 F6 | 	mov	result1, arg01
226d4                 | __system__strncat_ret
226d4     2D 00 64 FD | 	ret
226d8                 | 
226d8                 | __system__strncmp
226d8     09 01 0A F6 | 	mov	_var01, arg01 wz
226dc     14 00 90 5D |  if_ne	jmp	#LR__3330
226e0     00 14 0E F2 | 	cmp	arg02, #0 wz
226e4     01 02 66 56 |  if_ne	neg	_var02, #1
226e8     00 02 06 A6 |  if_e	mov	_var02, #0
226ec     01 FB 01 F6 | 	mov	result1, _var02
226f0     74 00 90 FD | 	jmp	#__system__strncmp_ret
226f4                 | LR__3330
226f4     00 14 0E F2 | 	cmp	arg02, #0 wz
226f8     01 FA 05 A6 |  if_e	mov	result1, #1
226fc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
22700     0B 05 02 F6 | 	mov	_var03, arg03
22704     97 16 48 FB | 	callpa	#(@LR__3332-@LR__3331)>>2,fcache_load_ptr_
22708                 | LR__3331
22708     00 07 C2 FA | 	rdbyte	_var04, _var01
2270c     0A 09 02 F6 | 	mov	_var05, arg02
22710     04 0B C2 FA | 	rdbyte	_var06, _var05
22714     01 04 86 F1 | 	sub	_var03, #1
22718     00 04 56 F2 | 	cmps	_var03, #0 wc
2271c     01 00 06 F1 | 	add	_var01, #1
22720     01 14 06 F1 | 	add	arg02, #1
22724     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
22728     08 00 90 2D |  if_nc_and_z	jmp	#LR__3333
2272c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
22730     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3331
22734                 | LR__3332
22734                 | LR__3333
22734     00 04 56 F2 | 	cmps	_var03, #0 wc
22738     00 FA 05 C6 |  if_b	mov	result1, #0
2273c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
22740     05 07 0A F2 | 	cmp	_var04, _var06 wz
22744     00 FA 05 A6 |  if_e	mov	result1, #0
22748     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2274c     00 06 0E F2 | 	cmp	_var04, #0 wz
22750     01 FA 65 A6 |  if_e	neg	result1, #1
22754     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
22758     00 0A 0E F2 | 	cmp	_var06, #0 wz
2275c     01 FA 05 A6 |  if_e	mov	result1, #1
22760     03 FB 01 56 |  if_ne	mov	result1, _var04
22764     05 FB 81 51 |  if_ne	sub	result1, _var06
22768                 | __system__strncmp_ret
22768     2D 00 64 FD | 	ret
2276c                 | 
2276c                 | __system____root_opendir
2276c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22770     04 12 06 F1 | 	add	arg01, #4
22774     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
22778     00 FA 05 F6 | 	mov	result1, #0
2277c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22780                 | __system____root_opendir_ret
22780     2D 00 64 FD | 	ret
22784                 | 
22784                 | __system____root_readdir
22784     03 4A 05 F6 | 	mov	COUNT_, #3
22788     A8 00 A0 FD | 	call	#pushregs_
2278c     09 1F 02 F6 | 	mov	local01, arg01
22790     0A 21 02 F6 | 	mov	local02, arg02
22794     04 1E 06 F1 | 	add	local01, #4
22798     0F 23 02 FB | 	rdlong	local03, local01
2279c     04 1E 86 F1 | 	sub	local01, #4
227a0                 | LR__3340
227a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
227a4     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
227a8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
227ac     01 FA 65 A6 |  if_e	neg	result1, #1
227b0     48 00 90 AD |  if_e	jmp	#LR__3341
227b4     11 17 0A FB | 	rdlong	arg03, local03 wz
227b8     04 22 06 A1 |  if_e	add	local03, #4
227bc     E0 FF 9F AD |  if_e	jmp	#LR__3340
227c0     11 15 02 FB | 	rdlong	arg02, local03
227c4     01 14 06 F1 | 	add	arg02, #1
227c8     10 13 02 F6 | 	mov	arg01, local02
227cc     40 16 06 F6 | 	mov	arg03, #64
227d0     58 FE BF FD | 	call	#__system__strncpy
227d4     50 20 06 F1 | 	add	local02, #80
227d8     10 03 48 FC | 	wrbyte	#1, local02
227dc     08 20 86 F1 | 	sub	local02, #8
227e0     10 01 68 FC | 	wrlong	#0, local02
227e4     04 20 06 F1 | 	add	local02, #4
227e8     10 01 68 FC | 	wrlong	#0, local02
227ec     04 22 06 F1 | 	add	local03, #4
227f0     04 1E 06 F1 | 	add	local01, #4
227f4     0F 23 62 FC | 	wrlong	local03, local01
227f8     00 FA 05 F6 | 	mov	result1, #0
227fc                 | LR__3341
227fc     A7 F0 03 F6 | 	mov	ptra, fp
22800     B2 00 A0 FD | 	call	#popregs_
22804                 | __system____root_readdir_ret
22804     2D 00 64 FD | 	ret
22808                 | 
22808                 | __system____root_closedir
22808     00 FA 05 F6 | 	mov	result1, #0
2280c                 | __system____root_closedir_ret
2280c     2D 00 64 FD | 	ret
22810                 | 
22810                 | __system____root_stat
22810     0A 01 02 F6 | 	mov	_var01, arg02
22814     00 13 02 F6 | 	mov	arg01, _var01
22818     00 14 06 F6 | 	mov	arg02, #0
2281c     30 16 06 F6 | 	mov	arg03, #48
22820     98 00 A0 FD | 	call	#\builtin_bytefill_
22824     08 00 06 F1 | 	add	_var01, #8
22828     08 00 80 FF 
2282c     00 FF 6B FC | 	wrlong	##4607, _var01
22830     00 FA 05 F6 | 	mov	result1, #0
22834                 | __system____root_stat_ret
22834     2D 00 64 FD | 	ret
22838                 | 
22838                 | __system___normalizeName
22838     00 00 06 F6 | 	mov	_var01, #0
2283c     09 03 02 F6 | 	mov	_var02, arg01
22840     01 05 02 F6 | 	mov	_var03, _var02
22844                 | LR__3350
22844     01 07 CA FA | 	rdbyte	_var04, _var02 wz
22848     5C 01 90 AD |  if_e	jmp	#LR__3369
2284c     00 00 0E F2 | 	cmp	_var01, #0 wz
22850     02 07 02 56 |  if_ne	mov	_var04, _var03
22854     01 04 06 51 |  if_ne	add	_var03, #1
22858     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2285c     00 00 06 56 |  if_ne	mov	_var01, #0
22860     01 07 C2 FA | 	rdbyte	_var04, _var02
22864     2E 06 0E F2 | 	cmp	_var04, #46 wz
22868     D8 00 90 5D |  if_ne	jmp	#LR__3362
2286c     01 02 06 F1 | 	add	_var02, #1
22870     01 07 C2 FA | 	rdbyte	_var04, _var02
22874     01 02 86 F1 | 	sub	_var02, #1
22878     2F 06 0E F2 | 	cmp	_var04, #47 wz
2287c     18 00 90 AD |  if_e	jmp	#LR__3351
22880     01 02 06 F1 | 	add	_var02, #1
22884     01 09 C2 FA | 	rdbyte	_var05, _var02
22888     01 02 86 F1 | 	sub	_var02, #1
2288c     04 0B 02 F6 | 	mov	_var06, _var05
22890     07 0A 4E F7 | 	zerox	_var06, #7 wz
22894     10 00 90 5D |  if_ne	jmp	#LR__3352
22898                 | LR__3351
22898     01 0D 02 F6 | 	mov	_var07, _var02
2289c     01 0C 06 F1 | 	add	_var07, #1
228a0     06 03 02 F6 | 	mov	_var02, _var07
228a4     E0 00 90 FD | 	jmp	#LR__3366
228a8                 | LR__3352
228a8     01 02 06 F1 | 	add	_var02, #1
228ac     01 0D C2 FA | 	rdbyte	_var07, _var02
228b0     01 02 86 F1 | 	sub	_var02, #1
228b4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
228b8     2E 06 0E F2 | 	cmp	_var04, #46 wz
228bc     84 00 90 5D |  if_ne	jmp	#LR__3361
228c0     02 02 06 F1 | 	add	_var02, #2
228c4     01 0D C2 FA | 	rdbyte	_var07, _var02
228c8     02 02 86 F1 | 	sub	_var02, #2
228cc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
228d0     2F 06 0E F2 | 	cmp	_var04, #47 wz
228d4     18 00 90 AD |  if_e	jmp	#LR__3353
228d8     02 02 06 F1 | 	add	_var02, #2
228dc     01 09 C2 FA | 	rdbyte	_var05, _var02
228e0     02 02 86 F1 | 	sub	_var02, #2
228e4     04 0B 02 F6 | 	mov	_var06, _var05
228e8     07 0A 4E F7 | 	zerox	_var06, #7 wz
228ec     54 00 90 5D |  if_ne	jmp	#LR__3360
228f0                 | LR__3353
228f0     02 02 06 F1 | 	add	_var02, #2
228f4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
228f8     40 00 90 ED |  if_be	jmp	#LR__3359
228fc     02 0F 02 F6 | 	mov	_var08, _var03
22900     01 0E 86 F1 | 	sub	_var08, #1
22904                 | LR__3354
22904     07 07 C2 FA | 	rdbyte	_var04, _var08
22908     2F 06 0E F2 | 	cmp	_var04, #47 wz
2290c     0C 00 90 5D |  if_ne	jmp	#LR__3355
22910     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
22914     01 0E 86 11 |  if_a	sub	_var08, #1
22918     E8 FF 9F 1D |  if_a	jmp	#LR__3354
2291c                 | LR__3355
2291c     97 0C 48 FB | 	callpa	#(@LR__3357-@LR__3356)>>2,fcache_load_ptr_
22920                 | LR__3356
22920     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
22924     10 00 90 ED |  if_be	jmp	#LR__3358
22928     07 07 C2 FA | 	rdbyte	_var04, _var08
2292c     2F 06 0E F2 | 	cmp	_var04, #47 wz
22930     01 0E 86 51 |  if_ne	sub	_var08, #1
22934     E8 FF 9F 5D |  if_ne	jmp	#LR__3356
22938                 | LR__3357
22938                 | LR__3358
22938     07 05 02 F6 | 	mov	_var03, _var08
2293c                 | LR__3359
2293c     01 00 06 F6 | 	mov	_var01, #1
22940     44 00 90 FD | 	jmp	#LR__3366
22944                 | LR__3360
22944                 | LR__3361
22944                 | LR__3362
22944     97 18 48 FB | 	callpa	#(@LR__3364-@LR__3363)>>2,fcache_load_ptr_
22948                 | LR__3363
22948     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2294c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
22950     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
22954     20 00 90 AD |  if_e	jmp	#LR__3365
22958     01 0B 02 F6 | 	mov	_var06, _var02
2295c     01 09 02 F6 | 	mov	_var05, _var02
22960     01 08 06 F1 | 	add	_var05, #1
22964     05 11 C2 FA | 	rdbyte	_var09, _var06
22968     04 03 02 F6 | 	mov	_var02, _var05
2296c     02 11 42 FC | 	wrbyte	_var09, _var03
22970     01 04 06 F1 | 	add	_var03, #1
22974     D0 FF 9F FD | 	jmp	#LR__3363
22978                 | LR__3364
22978                 | LR__3365
22978     01 07 C2 FA | 	rdbyte	_var04, _var02
2297c     2F 06 0E F2 | 	cmp	_var04, #47 wz
22980     C0 FE 9F 5D |  if_ne	jmp	#LR__3350
22984     01 00 06 F6 | 	mov	_var01, #1
22988                 | LR__3366
22988     97 0C 48 FB | 	callpa	#(@LR__3368-@LR__3367)>>2,fcache_load_ptr_
2298c                 | LR__3367
2298c     01 07 C2 FA | 	rdbyte	_var04, _var02
22990     2F 06 0E F2 | 	cmp	_var04, #47 wz
22994     01 0D 02 A6 |  if_e	mov	_var07, _var02
22998     01 0C 06 A1 |  if_e	add	_var07, #1
2299c     06 03 02 A6 |  if_e	mov	_var02, _var07
229a0     E8 FF 9F AD |  if_e	jmp	#LR__3367
229a4                 | LR__3368
229a4     9C FE 9F FD | 	jmp	#LR__3350
229a8                 | LR__3369
229a8     02 01 48 FC | 	wrbyte	#0, _var03
229ac                 | __system___normalizeName_ret
229ac     2D 00 64 FD | 	ret
229b0                 | 
229b0                 | __system___strrev
229b0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
229b4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
229b8     09 03 02 F6 | 	mov	_var02, arg01
229bc     97 1A 48 FB | 	callpa	#(@LR__3372-@LR__3370)>>2,fcache_load_ptr_
229c0                 | LR__3370
229c0     01 01 CA FA | 	rdbyte	_var01, _var02 wz
229c4     01 02 06 51 |  if_ne	add	_var02, #1
229c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
229cc     01 02 86 F1 | 	sub	_var02, #1
229d0                 | LR__3371
229d0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
229d4     1C 00 90 ED |  if_be	jmp	#LR__3373
229d8     09 01 C2 FA | 	rdbyte	_var01, arg01
229dc     01 05 C2 FA | 	rdbyte	_var03, _var02
229e0     09 05 42 FC | 	wrbyte	_var03, arg01
229e4     01 01 42 FC | 	wrbyte	_var01, _var02
229e8     01 12 06 F1 | 	add	arg01, #1
229ec     01 02 86 F1 | 	sub	_var02, #1
229f0     DC FF 9F FD | 	jmp	#LR__3371
229f4                 | LR__3372
229f4                 | LR__3373
229f4                 | __system___strrev_ret
229f4     2D 00 64 FD | 	ret
229f8                 | 
229f8                 | __system___fmtpad
229f8     06 4A 05 F6 | 	mov	COUNT_, #6
229fc     A8 00 A0 FD | 	call	#pushregs_
22a00     09 1F 02 F6 | 	mov	local01, arg01
22a04     0A 21 02 F6 | 	mov	local02, arg02
22a08     0B 23 02 F6 | 	mov	local03, arg03
22a0c     10 13 EA F8 | 	getbyte	arg01, local02, #1
22a10     16 20 46 F0 | 	shr	local02, #22
22a14     03 20 0E F5 | 	and	local02, #3 wz
22a18     00 24 06 F6 | 	mov	local04, #0
22a1c     01 20 06 A6 |  if_e	mov	local02, #1
22a20     0C 21 CA F7 | 	test	local02, arg04 wz
22a24     00 FA 05 A6 |  if_e	mov	result1, #0
22a28     88 00 90 AD |  if_e	jmp	#LR__3383
22a2c     09 23 C2 F2 | 	subr	local03, arg01
22a30     01 22 56 F2 | 	cmps	local03, #1 wc
22a34     00 FA 05 C6 |  if_b	mov	result1, #0
22a38     78 00 90 CD |  if_b	jmp	#LR__3383
22a3c     03 20 0E F2 | 	cmp	local02, #3 wz
22a40     18 00 90 5D |  if_ne	jmp	#LR__3380
22a44     01 18 0E F2 | 	cmp	arg04, #1 wz
22a48     6E 20 62 FD | 	wrz	local02
22a4c     10 23 02 F1 | 	add	local03, local02
22a50     11 23 52 F6 | 	abs	local03, local03 wc
22a54     01 22 46 F0 | 	shr	local03, #1
22a58     11 23 82 F6 | 	negc	local03, local03
22a5c                 | LR__3380
22a5c     01 22 56 F2 | 	cmps	local03, #1 wc
22a60     4C 00 90 CD |  if_b	jmp	#LR__3382
22a64     11 27 02 F6 | 	mov	local05, local03
22a68                 | LR__3381
22a68     0F 21 02 F6 | 	mov	local02, local01
22a6c     0F 29 02 F6 | 	mov	local06, local01
22a70     13 20 46 F7 | 	zerox	local02, #19
22a74     14 28 46 F0 | 	shr	local06, #20
22a78     02 28 66 F0 | 	shl	local06, #2
22a7c     ED 28 02 F1 | 	add	local06, __methods__
22a80     14 29 02 FB | 	rdlong	local06, local06
22a84     20 12 06 F6 | 	mov	arg01, #32
22a88     F2 22 02 F6 | 	mov	local03, objptr
22a8c     10 E5 01 F6 | 	mov	objptr, local02
22a90     2D 28 62 FD | 	call	local06
22a94     11 E5 01 F6 | 	mov	objptr, local03
22a98     FD 28 02 F6 | 	mov	local06, result1
22a9c     00 28 56 F2 | 	cmps	local06, #0 wc
22aa0     14 FB 01 C6 |  if_b	mov	result1, local06
22aa4     0C 00 90 CD |  if_b	jmp	#LR__3383
22aa8     14 25 02 F1 | 	add	local04, local06
22aac     EE 27 6E FB | 	djnz	local05, #LR__3381
22ab0                 | LR__3382
22ab0     12 FB 01 F6 | 	mov	result1, local04
22ab4                 | LR__3383
22ab4     A7 F0 03 F6 | 	mov	ptra, fp
22ab8     B2 00 A0 FD | 	call	#popregs_
22abc                 | __system___fmtpad_ret
22abc     2D 00 64 FD | 	ret
22ac0                 | 
22ac0                 | __system___uitoa
22ac0     04 4A 05 F6 | 	mov	COUNT_, #4
22ac4     A8 00 A0 FD | 	call	#pushregs_
22ac8     09 1F 02 F6 | 	mov	local01, arg01
22acc     00 1A 4E F2 | 	cmps	arg05, #0 wz
22ad0     0F 1B 02 F6 | 	mov	arg05, local01
22ad4     00 20 06 F6 | 	mov	local02, #0
22ad8     37 22 06 56 |  if_ne	mov	local03, #55
22adc     57 22 06 A6 |  if_e	mov	local03, #87
22ae0                 | LR__3390
22ae0     0B 15 12 FD | 	qdiv	arg02, arg03
22ae4     19 24 62 FD | 	getqy	local04
22ae8     0B 15 12 FD | 	qdiv	arg02, arg03
22aec     0A 24 16 F2 | 	cmp	local04, #10 wc
22af0     30 24 06 C1 |  if_b	add	local04, #48
22af4     11 25 02 31 |  if_ae	add	local04, local03
22af8     0D 25 42 FC | 	wrbyte	local04, arg05
22afc     01 1A 06 F1 | 	add	arg05, #1
22b00     01 20 06 F1 | 	add	local02, #1
22b04     18 14 62 FD | 	getqx	arg02
22b08     00 14 0E F2 | 	cmp	arg02, #0 wz
22b0c     D0 FF 9F 5D |  if_ne	jmp	#LR__3390
22b10     0C 21 12 F2 | 	cmp	local02, arg04 wc
22b14     C8 FF 9F CD |  if_b	jmp	#LR__3390
22b18     0D 01 48 FC | 	wrbyte	#0, arg05
22b1c     0F 13 02 F6 | 	mov	arg01, local01
22b20     8C FE BF FD | 	call	#__system___strrev
22b24     10 FB 01 F6 | 	mov	result1, local02
22b28     A7 F0 03 F6 | 	mov	ptra, fp
22b2c     B2 00 A0 FD | 	call	#popregs_
22b30                 | __system___uitoa_ret
22b30     2D 00 64 FD | 	ret
22b34                 | 
22b34                 | __system__disassemble_0431
22b34     10 4A 05 F6 | 	mov	COUNT_, #16
22b38     A8 00 A0 FD | 	call	#pushregs_
22b3c     09 1F 02 F6 | 	mov	local01, arg01
22b40     0A 21 02 F6 | 	mov	local02, arg02
22b44     0B 23 02 F6 | 	mov	local03, arg03
22b48     0C 25 02 F6 | 	mov	local04, arg04
22b4c     0D 27 02 F6 | 	mov	local05, arg05
22b50     13 13 52 F6 | 	abs	arg01, local05 wc
22b54     1F 28 C6 C9 |  if_b	decod	local06, #31
22b58     00 28 06 36 |  if_ae	mov	local06, #0
22b5c     64 D0 BF FD | 	call	#__system___float_fromuns
22b60     14 FB 61 F5 | 	xor	result1, local06
22b64     FD 2A 02 F6 | 	mov	local07, result1
22b68     00 2C 06 F6 | 	mov	local08, #0
22b6c     0F 13 02 F6 | 	mov	arg01, local01
22b70     00 14 06 F6 | 	mov	arg02, #0
22b74     01 16 06 F6 | 	mov	arg03, #1
22b78     80 D8 BF FD | 	call	#__system___float_cmp
22b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
22b80     00 2E 06 A6 |  if_e	mov	local09, #0
22b84     10 01 68 AC |  if_e	wrlong	#0, local02
22b88     11 2F 62 AC |  if_e	wrlong	local09, local03
22b8c     8C 01 90 AD |  if_e	jmp	#LR__3412
22b90     0F 13 02 F6 | 	mov	arg01, local01
22b94     30 DD BF FD | 	call	#__system____builtin_ilogb
22b98     FD 30 02 F6 | 	mov	local10, result1
22b9c     0A 26 0E F2 | 	cmp	local05, #10 wz
22ba0     24 00 90 5D |  if_ne	jmp	#LR__3400
22ba4     18 2F 02 F6 | 	mov	local09, local10
22ba8     01 2E 66 F0 | 	shl	local09, #1
22bac     18 2F 02 F1 | 	add	local09, local10
22bb0     17 31 52 F6 | 	abs	local10, local09 wc
22bb4     0A 30 16 FD | 	qdiv	local10, #10
22bb8     09 32 06 F6 | 	mov	local11, #9
22bbc     18 30 62 FD | 	getqx	local10
22bc0     18 31 82 F6 | 	negc	local10, local10
22bc4     04 00 90 FD | 	jmp	#LR__3401
22bc8                 | LR__3400
22bc8     18 32 06 F6 | 	mov	local11, #24
22bcc                 | LR__3401
22bcc                 | LR__3402
22bcc     08 2C 56 F2 | 	cmps	local08, #8 wc
22bd0     01 2C 06 F1 | 	add	local08, #1
22bd4     60 00 90 3D |  if_ae	jmp	#LR__3403
22bd8     00 C0 1F FF 
22bdc     00 12 06 F6 | 	mov	arg01, ##1065353216
22be0     15 15 02 F6 | 	mov	arg02, local07
22be4     18 17 02 F6 | 	mov	arg03, local10
22be8     88 E3 BF FD | 	call	#__system___float_pow_n
22bec     FD 14 02 F6 | 	mov	arg02, result1
22bf0     0F 13 02 F6 | 	mov	arg01, local01
22bf4     D4 D5 BF FD | 	call	#__system___float_div
22bf8     FD 34 02 F6 | 	mov	local12, result1
22bfc     1A 13 02 F6 | 	mov	arg01, local12
22c00     00 C0 1F FF 
22c04     00 14 06 F6 | 	mov	arg02, ##1065353216
22c08     01 16 06 F6 | 	mov	arg03, #1
22c0c     EC D7 BF FD | 	call	#__system___float_cmp
22c10     00 FA 55 F2 | 	cmps	result1, #0 wc
22c14     01 30 86 C1 |  if_b	sub	local10, #1
22c18     B0 FF 9F CD |  if_b	jmp	#LR__3402
22c1c     15 15 02 F6 | 	mov	arg02, local07
22c20     1A 13 02 F6 | 	mov	arg01, local12
22c24     01 16 66 F6 | 	neg	arg03, #1
22c28     D0 D7 BF FD | 	call	#__system___float_cmp
22c2c     00 FA 55 F2 | 	cmps	result1, #0 wc
22c30     01 30 06 31 |  if_ae	add	local10, #1
22c34     94 FF 9F 3D |  if_ae	jmp	#LR__3402
22c38                 | LR__3403
22c38     1A 13 02 F6 | 	mov	arg01, local12
22c3c     88 DC BF FD | 	call	#__system____builtin_ilogb
22c40     FD 36 02 F6 | 	mov	local13, result1
22c44     1A 39 02 F6 | 	mov	local14, local12
22c48     17 39 06 F4 | 	bitl	local14, #279
22c4c     17 38 26 F4 | 	bith	local14, #23
22c50     1B 39 62 F0 | 	shl	local14, local13
22c54     02 26 0E F2 | 	cmp	local05, #2 wz
22c58     02 24 66 A0 |  if_e	shl	local04, #2
22c5c     00 3A 06 F6 | 	mov	local15, #0
22c60     00 24 56 F2 | 	cmps	local04, #0 wc
22c64     10 00 90 3D |  if_ae	jmp	#LR__3404
22c68     18 25 C2 F2 | 	subr	local04, local10
22c6c     00 24 56 F2 | 	cmps	local04, #0 wc
22c70     A0 00 90 CD |  if_b	jmp	#LR__3411
22c74     04 00 90 FD | 	jmp	#LR__3405
22c78                 | LR__3404
22c78     01 24 06 F1 | 	add	local04, #1
22c7c                 | LR__3405
22c7c     19 25 7A F3 | 	fles	local04, local11 wcz
22c80     01 3C 06 F6 | 	mov	local16, #1
22c84     97 22 48 FB | 	callpa	#(@LR__3407-@LR__3406)>>2,fcache_load_ptr_
22c88                 | LR__3406
22c88     00 40 00 FF 
22c8c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
22c90     38 00 90 3D |  if_ae	jmp	#LR__3408
22c94     01 24 56 F2 | 	cmps	local04, #1 wc
22c98     01 24 86 F1 | 	sub	local04, #1
22c9c     2C 00 90 CD |  if_b	jmp	#LR__3408
22ca0     13 3B 02 FD | 	qmul	local15, local05
22ca4     1C 37 02 F6 | 	mov	local13, local14
22ca8     17 36 46 F0 | 	shr	local13, #23
22cac     17 39 06 F4 | 	bitl	local14, #279
22cb0     18 3A 62 FD | 	getqx	local15
22cb4     13 3D 02 FD | 	qmul	local16, local05
22cb8     18 3C 62 FD | 	getqx	local16
22cbc     13 39 02 FD | 	qmul	local14, local05
22cc0     1B 3B 02 F1 | 	add	local15, local13
22cc4     18 38 62 FD | 	getqx	local14
22cc8     BC FF 9F FD | 	jmp	#LR__3406
22ccc                 | LR__3407
22ccc                 | LR__3408
22ccc     13 2F 02 F6 | 	mov	local09, local05
22cd0     17 2E 66 F0 | 	shl	local09, #23
22cd4     17 37 52 F6 | 	abs	local13, local09 wc
22cd8     01 36 46 F0 | 	shr	local13, #1
22cdc     1B 37 82 F6 | 	negc	local13, local13
22ce0     1B 39 1A F2 | 	cmp	local14, local13 wcz
22ce4     20 00 90 1D |  if_a	jmp	#LR__3409
22ce8     17 26 66 F0 | 	shl	local05, #23
22cec     13 37 52 F6 | 	abs	local13, local05 wc
22cf0     01 36 46 F0 | 	shr	local13, #1
22cf4     1B 37 82 F6 | 	negc	local13, local13
22cf8     1B 39 0A F2 | 	cmp	local14, local13 wz
22cfc     14 00 90 5D |  if_ne	jmp	#LR__3410
22d00     01 3A CE F7 | 	test	local15, #1 wz
22d04     0C 00 90 AD |  if_e	jmp	#LR__3410
22d08                 | LR__3409
22d08     01 3A 06 F1 | 	add	local15, #1
22d0c     1E 3B 0A F2 | 	cmp	local15, local16 wz
22d10     01 30 06 A1 |  if_e	add	local10, #1
22d14                 | LR__3410
22d14                 | LR__3411
22d14     10 3B 62 FC | 	wrlong	local15, local02
22d18     11 31 62 FC | 	wrlong	local10, local03
22d1c                 | LR__3412
22d1c     A7 F0 03 F6 | 	mov	ptra, fp
22d20     B2 00 A0 FD | 	call	#popregs_
22d24                 | __system__disassemble_0431_ret
22d24     2D 00 64 FD | 	ret
22d28                 | 
22d28                 | __system__emitsign_0433
22d28     00 FA 05 F6 | 	mov	result1, #0
22d2c     00 14 0E F2 | 	cmp	arg02, #0 wz
22d30     09 01 02 56 |  if_ne	mov	_var01, arg01
22d34     01 12 06 51 |  if_ne	add	arg01, #1
22d38     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
22d3c     01 FA 05 56 |  if_ne	mov	result1, #1
22d40     00 16 0E F2 | 	cmp	arg03, #0 wz
22d44     09 61 48 5C |  if_ne	wrbyte	#48, arg01
22d48     01 12 06 51 |  if_ne	add	arg01, #1
22d4c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
22d50     02 FA 05 51 |  if_ne	add	result1, #2
22d54                 | __system__emitsign_0433_ret
22d54     2D 00 64 FD | 	ret
22d58                 | 
22d58                 | __system___gettxfunc
22d58     01 4A 05 F6 | 	mov	COUNT_, #1
22d5c     A8 00 A0 FD | 	call	#pushregs_
22d60     A0 F8 BF FD | 	call	#__system____getftab
22d64     FD 1E 0A F6 | 	mov	local01, result1 wz
22d68     10 00 90 AD |  if_e	jmp	#LR__3420
22d6c     08 1E 06 F1 | 	add	local01, #8
22d70     0F 15 0A FB | 	rdlong	arg02, local01 wz
22d74     08 1E 86 F1 | 	sub	local01, #8
22d78     08 00 90 5D |  if_ne	jmp	#LR__3421
22d7c                 | LR__3420
22d7c     00 FA 05 F6 | 	mov	result1, #0
22d80     0C 00 90 FD | 	jmp	#LR__3422
22d84                 | LR__3421
22d84     00 D8 03 FF 
22d88     00 1E 46 F5 | 	or	local01, ##128974848
22d8c     0F FB 01 F6 | 	mov	result1, local01
22d90                 | LR__3422
22d90     A7 F0 03 F6 | 	mov	ptra, fp
22d94     B2 00 A0 FD | 	call	#popregs_
22d98                 | __system___gettxfunc_ret
22d98     2D 00 64 FD | 	ret
22d9c                 | 
22d9c                 | __system___getrxfunc
22d9c     01 4A 05 F6 | 	mov	COUNT_, #1
22da0     A8 00 A0 FD | 	call	#pushregs_
22da4     5C F8 BF FD | 	call	#__system____getftab
22da8     FD 1E 0A F6 | 	mov	local01, result1 wz
22dac     10 00 90 AD |  if_e	jmp	#LR__3430
22db0     08 1E 06 F1 | 	add	local01, #8
22db4     0F 15 0A FB | 	rdlong	arg02, local01 wz
22db8     08 1E 86 F1 | 	sub	local01, #8
22dbc     08 00 90 5D |  if_ne	jmp	#LR__3431
22dc0                 | LR__3430
22dc0     00 FA 05 F6 | 	mov	result1, #0
22dc4     08 00 90 FD | 	jmp	#LR__3432
22dc8                 | LR__3431
22dc8     96 1E 26 F4 | 	bith	local01, #150
22dcc     0F FB 01 F6 | 	mov	result1, local01
22dd0                 | LR__3432
22dd0     A7 F0 03 F6 | 	mov	ptra, fp
22dd4     B2 00 A0 FD | 	call	#popregs_
22dd8                 | __system___getrxfunc_ret
22dd8     2D 00 64 FD | 	ret
22ddc                 | 
22ddc                 | __system___getiolock_0473
22ddc     01 4A 05 F6 | 	mov	COUNT_, #1
22de0     A8 00 A0 FD | 	call	#pushregs_
22de4     1C F8 BF FD | 	call	#__system____getftab
22de8     FD 1E 0A F6 | 	mov	local01, result1 wz
22dec     10 00 90 AD |  if_e	jmp	#LR__3440
22df0     08 1E 06 F1 | 	add	local01, #8
22df4     0F FB 09 FB | 	rdlong	result1, local01 wz
22df8     08 1E 86 F1 | 	sub	local01, #8
22dfc     18 00 90 5D |  if_ne	jmp	#LR__3441
22e00                 | LR__3440
22e00     01 00 00 FF 
22e04     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
22e08     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
22e0c     01 00 00 FF 
22e10     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
22e14     08 00 90 FD | 	jmp	#LR__3442
22e18                 | LR__3441
22e18     0C 1E 06 F1 | 	add	local01, #12
22e1c     0F FB 01 F6 | 	mov	result1, local01
22e20                 | LR__3442
22e20     A7 F0 03 F6 | 	mov	ptra, fp
22e24     B2 00 A0 FD | 	call	#popregs_
22e28                 | __system___getiolock_0473_ret
22e28     2D 00 64 FD | 	ret
22e2c                 | 
22e2c                 | __system____ScanForChar
22e2c     09 01 02 F6 | 	mov	_var01, arg01
22e30     09 03 02 F6 | 	mov	_var02, arg01
22e34     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
22e38                 | LR__3450
22e38     01 FB C9 FA | 	rdbyte	result1, _var02 wz
22e3c     01 02 06 51 |  if_ne	add	_var02, #1
22e40     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
22e44                 | LR__3451
22e44     09 03 82 F1 | 	sub	_var02, arg01
22e48     01 FB 01 F6 | 	mov	result1, _var02
22e4c     FD 12 0A F6 | 	mov	arg01, result1 wz
22e50     00 FA 05 A6 |  if_e	mov	result1, #0
22e54     B8 00 90 AD |  if_e	jmp	#LR__3458
22e58     0A 05 02 F6 | 	mov	_var03, arg02
22e5c     07 04 4E F7 | 	zerox	_var03, #7 wz
22e60     00 FA 05 A6 |  if_e	mov	result1, #0
22e64     A8 00 90 AD |  if_e	jmp	#LR__3458
22e68     01 16 16 F2 | 	cmp	arg03, #1 wc
22e6c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
22e70     01 16 06 86 |  if_c_and_z	mov	arg03, #1
22e74     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
22e78     94 00 90 4D |  if_c_and_nz	jmp	#LR__3458
22e7c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
22e80     10 00 90 ED |  if_be	jmp	#LR__3452
22e84     00 18 0E F2 | 	cmp	arg04, #0 wz
22e88     00 FA 05 A6 |  if_e	mov	result1, #0
22e8c     80 00 90 AD |  if_e	jmp	#LR__3458
22e90     09 17 02 F6 | 	mov	arg03, arg01
22e94                 | LR__3452
22e94     01 16 86 F1 | 	sub	arg03, #1
22e98     00 18 0E F2 | 	cmp	arg04, #0 wz
22e9c     38 00 90 5D |  if_ne	jmp	#LR__3454
22ea0     0B 07 02 F6 | 	mov	_var04, arg03
22ea4     09 09 02 F6 | 	mov	_var05, arg01
22ea8                 | LR__3453
22ea8     04 07 12 F2 | 	cmp	_var04, _var05 wc
22eac     5C 00 90 3D |  if_ae	jmp	#LR__3457
22eb0     03 05 02 F6 | 	mov	_var03, _var04
22eb4     00 05 02 F1 | 	add	_var03, _var01
22eb8     02 05 C2 FA | 	rdbyte	_var03, _var03
22ebc     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
22ec0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
22ec4     01 06 06 A1 |  if_e	add	_var04, #1
22ec8     03 FB 01 A6 |  if_e	mov	result1, _var04
22ecc     40 00 90 AD |  if_e	jmp	#LR__3458
22ed0     01 06 06 F1 | 	add	_var04, #1
22ed4     D0 FF 9F FD | 	jmp	#LR__3453
22ed8                 | LR__3454
22ed8     0B 07 02 F6 | 	mov	_var04, arg03
22edc                 | LR__3455
22edc     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
22ee0     28 00 90 1D |  if_a	jmp	#LR__3456
22ee4     03 09 02 F6 | 	mov	_var05, _var04
22ee8     00 09 02 F1 | 	add	_var05, _var01
22eec     04 05 C2 FA | 	rdbyte	_var03, _var05
22ef0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
22ef4     04 05 0A F2 | 	cmp	_var03, _var05 wz
22ef8     01 06 06 A1 |  if_e	add	_var04, #1
22efc     03 FB 01 A6 |  if_e	mov	result1, _var04
22f00     0C 00 90 AD |  if_e	jmp	#LR__3458
22f04     01 06 86 F1 | 	sub	_var04, #1
22f08     D0 FF 9F FD | 	jmp	#LR__3455
22f0c                 | LR__3456
22f0c                 | LR__3457
22f0c     00 FA 05 F6 | 	mov	result1, #0
22f10                 | LR__3458
22f10                 | __system____ScanForChar_ret
22f10     2D 00 64 FD | 	ret
22f14                 | 
22f14                 | __system___basic_dir
22f14     05 4A 05 F6 | 	mov	COUNT_, #5
22f18     A8 00 A0 FD | 	call	#pushregs_
22f1c     4C F0 07 F1 | 	add	ptra, #76
22f20     04 4E 05 F1 | 	add	fp, #4
22f24     A7 12 62 FC | 	wrlong	arg01, fp
22f28     04 4E 05 F1 | 	add	fp, #4
22f2c     A7 14 62 FC | 	wrlong	arg02, fp
22f30     04 4E 85 F1 | 	sub	fp, #4
22f34     A7 14 0A FB | 	rdlong	arg02, fp wz
22f38     04 4E 85 F1 | 	sub	fp, #4
22f3c     04 4E 05 51 |  if_ne	add	fp, #4
22f40     A7 1E 02 5B |  if_ne	rdlong	local01, fp
22f44     04 4E 85 51 |  if_ne	sub	fp, #4
22f48     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
22f4c     70 00 90 AD |  if_e	jmp	#LR__3460
22f50     03 00 00 FF 
22f54     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22f58     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22f5c     03 00 00 FF 
22f60     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22f64     03 00 00 5F 
22f68     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
22f6c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
22f70     03 00 00 5F 
22f74     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
22f78     18 EA BF 5D |  if_ne	call	#__system__closedir
22f7c     65 01 00 FF 
22f80     64 12 06 F6 | 	mov	arg01, ##@LR__4618
22f84     20 E9 BF FD | 	call	#__system__opendir
22f88     03 00 00 FF 
22f8c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22f90     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
22f94     08 4E 05 F1 | 	add	fp, #8
22f98     A7 20 02 FB | 	rdlong	local02, fp
22f9c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fa0     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
22fa4     04 4E 85 F1 | 	sub	fp, #4
22fa8     A7 20 02 FB | 	rdlong	local02, fp
22fac     04 4E 85 F1 | 	sub	fp, #4
22fb0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fb4     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
22fb8     03 00 00 FF 
22fbc     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
22fc0                 | LR__3460
22fc0     03 00 00 FF 
22fc4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22fc8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22fcc     03 00 00 FF 
22fd0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22fd4     65 01 00 AF 
22fd8     66 FA 05 A6 |  if_e	mov	result1, ##@LR__4619
22fdc     84 02 90 AD |  if_e	jmp	#LR__3473
22fe0                 | LR__3461
22fe0     03 00 00 FF 
22fe4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22fe8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
22fec     03 00 00 FF 
22ff0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22ff4     10 EA BF FD | 	call	#__system__readdir
22ff8     0C 4E 05 F1 | 	add	fp, #12
22ffc     A7 FA 61 FC | 	wrlong	result1, fp
23000     0C 4E 85 F1 | 	sub	fp, #12
23004     00 FA 0D F2 | 	cmp	result1, #0 wz
23008     38 00 90 5D |  if_ne	jmp	#LR__3462
2300c     03 00 00 FF 
23010     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
23014     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
23018     03 00 00 FF 
2301c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
23020     70 E9 BF FD | 	call	#__system__closedir
23024     03 00 00 FF 
23028     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2302c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
23030     03 00 00 FF 
23034     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
23038     65 01 00 FF 
2303c     68 FA 05 F6 | 	mov	result1, ##@LR__4620
23040     20 02 90 FD | 	jmp	#LR__3473
23044                 | LR__3462
23044     0C 4E 05 F1 | 	add	fp, #12
23048     A7 12 02 FB | 	rdlong	arg01, fp
2304c     0C 4E 85 F1 | 	sub	fp, #12
23050     03 00 00 FF 
23054     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
23058     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2305c     03 00 00 FF 
23060     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
23064     48 07 B0 FD | 	call	#__system___pat_match
23068     00 FA 0D F2 | 	cmp	result1, #0 wz
2306c     70 FF 9F AD |  if_e	jmp	#LR__3461
23070     03 00 00 FF 
23074     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
23078     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2307c     03 00 00 FF 
23080     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
23084     78 01 90 AD |  if_e	jmp	#LR__3469
23088     0C 4E 05 F1 | 	add	fp, #12
2308c     A7 12 02 FB | 	rdlong	arg01, fp
23090     04 4E 05 F1 | 	add	fp, #4
23094     A7 14 02 F6 | 	mov	arg02, fp
23098     10 4E 85 F1 | 	sub	fp, #16
2309c     6C F2 BF FD | 	call	#__system__stat
230a0     40 4E 05 F1 | 	add	fp, #64
230a4     A7 FA 61 FC | 	wrlong	result1, fp
230a8     40 4E 85 F1 | 	sub	fp, #64
230ac     00 FA 0D F2 | 	cmp	result1, #0 wz
230b0     65 01 00 5F 
230b4     6A FA 05 56 |  if_ne	mov	result1, ##@LR__4621
230b8     A8 01 90 5D |  if_ne	jmp	#LR__3473
230bc     18 4E 05 F1 | 	add	fp, #24
230c0     A7 20 02 FB | 	rdlong	local02, fp
230c4     78 00 00 FF 
230c8     00 20 06 F5 | 	and	local02, ##61440
230cc     2C 4E 05 F1 | 	add	fp, #44
230d0     A7 20 62 FC | 	wrlong	local02, fp
230d4     38 4E 85 F1 | 	sub	fp, #56
230d8     A7 20 02 FB | 	rdlong	local02, fp
230dc     0C 4E 85 F1 | 	sub	fp, #12
230e0     10 21 C2 FA | 	rdbyte	local02, local02
230e4     2E 20 0E F2 | 	cmp	local02, #46 wz
230e8     08 4E 05 A1 |  if_e	add	fp, #8
230ec     A7 04 68 AC |  if_e	wrlong	#2, fp
230f0     08 4E C5 F3 | 	sumz	fp, #8
230f4     A7 00 68 5C |  if_ne	wrlong	#0, fp
230f8     08 4E 85 51 |  if_ne	sub	fp, #8
230fc     44 4E 05 F1 | 	add	fp, #68
23100     A7 20 02 FB | 	rdlong	local02, fp
23104     44 4E 85 F1 | 	sub	fp, #68
23108     08 00 00 FF 
2310c     00 20 0E F2 | 	cmp	local02, ##4096 wz
23110     18 00 90 5D |  if_ne	jmp	#LR__3463
23114     08 4E 05 F1 | 	add	fp, #8
23118     A7 20 02 FB | 	rdlong	local02, fp
2311c     10 20 46 F5 | 	or	local02, #16
23120     A7 20 62 FC | 	wrlong	local02, fp
23124     08 4E 85 F1 | 	sub	fp, #8
23128     AC 00 90 FD | 	jmp	#LR__3468
2312c                 | LR__3463
2312c     44 4E 05 F1 | 	add	fp, #68
23130     A7 20 02 FB | 	rdlong	local02, fp
23134     44 4E 85 F1 | 	sub	fp, #68
23138     10 00 00 FF 
2313c     00 20 0E F2 | 	cmp	local02, ##8192 wz
23140     44 4E 05 51 |  if_ne	add	fp, #68
23144     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23148     44 4E 85 51 |  if_ne	sub	fp, #68
2314c     18 00 00 5F 
23150     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
23154     44 4E 05 51 |  if_ne	add	fp, #68
23158     0F 23 02 56 |  if_ne	mov	local03, local01
2315c     44 4E 85 51 |  if_ne	sub	fp, #68
23160     20 00 00 5F 
23164     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
23168     18 00 90 5D |  if_ne	jmp	#LR__3464
2316c     08 4E 05 F1 | 	add	fp, #8
23170     A7 20 02 FB | 	rdlong	local02, fp
23174     04 20 46 F5 | 	or	local02, #4
23178     A7 20 62 FC | 	wrlong	local02, fp
2317c     08 4E 85 F1 | 	sub	fp, #8
23180     54 00 90 FD | 	jmp	#LR__3467
23184                 | LR__3464
23184     18 4E 05 F1 | 	add	fp, #24
23188     A7 20 02 FB | 	rdlong	local02, fp
2318c     18 4E 85 F1 | 	sub	fp, #24
23190     92 20 CE F7 | 	test	local02, #146 wz
23194     18 00 90 5D |  if_ne	jmp	#LR__3465
23198     08 4E 05 F1 | 	add	fp, #8
2319c     A7 20 02 FB | 	rdlong	local02, fp
231a0     01 20 46 F5 | 	or	local02, #1
231a4     A7 20 62 FC | 	wrlong	local02, fp
231a8     08 4E 85 F1 | 	sub	fp, #8
231ac     28 00 90 FD | 	jmp	#LR__3466
231b0                 | LR__3465
231b0     44 4E 05 F1 | 	add	fp, #68
231b4     A7 24 02 FB | 	rdlong	local04, fp
231b8     44 4E 85 F1 | 	sub	fp, #68
231bc     08 00 00 FF 
231c0     00 24 0E F2 | 	cmp	local04, ##4096 wz
231c4     08 4E 05 51 |  if_ne	add	fp, #8
231c8     A7 24 02 5B |  if_ne	rdlong	local04, fp
231cc     20 24 46 55 |  if_ne	or	local04, #32
231d0     A7 24 62 5C |  if_ne	wrlong	local04, fp
231d4     08 4E 85 51 |  if_ne	sub	fp, #8
231d8                 | LR__3466
231d8                 | LR__3467
231d8                 | LR__3468
231d8     08 4E 05 F1 | 	add	fp, #8
231dc     A7 24 02 FB | 	rdlong	local04, fp
231e0     08 4E 85 F1 | 	sub	fp, #8
231e4     03 00 00 FF 
231e8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
231ec     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
231f0     03 00 00 FF 
231f4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
231f8     0F 25 CA F7 | 	test	local04, local01 wz
231fc     E0 FD 9F AD |  if_e	jmp	#LR__3461
23200                 | LR__3469
23200     0C 4E 05 F1 | 	add	fp, #12
23204     A7 12 02 FB | 	rdlong	arg01, fp
23208     0C 4E 85 F1 | 	sub	fp, #12
2320c     09 27 02 F6 | 	mov	local05, arg01
23210     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
23214                 | LR__3470
23214     13 FB C9 FA | 	rdbyte	result1, local05 wz
23218     01 26 06 51 |  if_ne	add	local05, #1
2321c     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
23220                 | LR__3471
23220     13 13 C2 F2 | 	subr	arg01, local05
23224     01 12 06 F1 | 	add	arg01, #1
23228     68 E0 BF FD | 	call	#__system___gc_alloc_managed
2322c     48 4E 05 F1 | 	add	fp, #72
23230     A7 FA 61 FC | 	wrlong	result1, fp
23234     48 4E 85 F1 | 	sub	fp, #72
23238     00 FA 0D F2 | 	cmp	result1, #0 wz
2323c     18 00 90 AD |  if_e	jmp	#LR__3472
23240     48 4E 05 F1 | 	add	fp, #72
23244     A7 12 02 FB | 	rdlong	arg01, fp
23248     3C 4E 85 F1 | 	sub	fp, #60
2324c     A7 14 02 FB | 	rdlong	arg02, fp
23250     0C 4E 85 F1 | 	sub	fp, #12
23254     A8 A1 BF FD | 	call	#__system____builtin_strcpy
23258                 | LR__3472
23258     48 4E 05 F1 | 	add	fp, #72
2325c     A7 FA 01 FB | 	rdlong	result1, fp
23260     48 4E 85 F1 | 	sub	fp, #72
23264                 | LR__3473
23264     A7 F0 03 F6 | 	mov	ptra, fp
23268     B2 00 A0 FD | 	call	#popregs_
2326c                 | __system___basic_dir_ret
2326c     2D 00 64 FD | 	ret
23270                 | 
23270                 | __system__pack_0539
23270     09 01 02 F6 | 	mov	_var01, arg01
23274     7F 16 06 F1 | 	add	arg03, #127
23278     04 18 CE F7 | 	test	arg04, #4 wz
2327c     10 00 90 AD |  if_e	jmp	#LR__3480
23280     00 00 0E F2 | 	cmp	_var01, #0 wz
23284     16 00 C6 A9 |  if_e	decod	_var01, #22
23288     F7 00 26 F4 | 	bith	_var01, #247
2328c     B4 00 90 FD | 	jmp	#LR__3489
23290                 | LR__3480
23290     02 18 CE F7 | 	test	arg04, #2 wz
23294     00 C0 3F 5F 
23298     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2329c     00 14 06 56 |  if_ne	mov	arg02, #0
232a0     A0 00 90 5D |  if_ne	jmp	#LR__3488
232a4     08 18 CE F7 | 	test	arg04, #8 wz
232a8     00 00 06 56 |  if_ne	mov	_var01, #0
232ac     94 00 90 5D |  if_ne	jmp	#LR__3487
232b0     FF 16 56 F2 | 	cmps	arg03, #255 wc
232b4     00 C0 3F 3F 
232b8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
232bc     00 14 06 36 |  if_ae	mov	arg02, #0
232c0     80 00 90 3D |  if_ae	jmp	#LR__3486
232c4     01 16 56 F2 | 	cmps	arg03, #1 wc
232c8     6C 00 90 3D |  if_ae	jmp	#LR__3484
232cc     01 14 46 F0 | 	shr	arg02, #1
232d0     00 03 02 F6 | 	mov	_var02, _var01
232d4     01 02 06 F5 | 	and	_var02, #1
232d8     1F 02 66 F0 | 	shl	_var02, #31
232dc     01 15 42 F5 | 	or	arg02, _var02
232e0     01 00 46 F0 | 	shr	_var01, #1
232e4     97 1E 48 FB | 	callpa	#(@LR__3482-@LR__3481)>>2,fcache_load_ptr_
232e8                 | LR__3481
232e8     00 16 56 F2 | 	cmps	arg03, #0 wc
232ec     34 00 90 3D |  if_ae	jmp	#LR__3483
232f0     00 00 0E F2 | 	cmp	_var01, #0 wz
232f4     2C 00 90 AD |  if_e	jmp	#LR__3483
232f8     0A 13 02 F6 | 	mov	arg01, arg02
232fc     01 12 06 F5 | 	and	arg01, #1
23300     01 16 06 F1 | 	add	arg03, #1
23304     01 14 46 F0 | 	shr	arg02, #1
23308     00 03 02 F6 | 	mov	_var02, _var01
2330c     01 02 06 F5 | 	and	_var02, #1
23310     1F 02 66 F0 | 	shl	_var02, #31
23314     01 15 42 F5 | 	or	arg02, _var02
23318     09 15 42 F5 | 	or	arg02, arg01
2331c     01 00 46 F0 | 	shr	_var01, #1
23320     C4 FF 9F FD | 	jmp	#LR__3481
23324                 | LR__3482
23324                 | LR__3483
23324     00 16 56 F2 | 	cmps	arg03, #0 wc
23328     18 00 90 3D |  if_ae	jmp	#LR__3485
2332c     00 14 0E F2 | 	cmp	arg02, #0 wz
23330     6F 14 62 FD | 	wrnz	arg02
23334     0C 00 90 FD | 	jmp	#LR__3485
23338                 | LR__3484
23338     17 01 06 F4 | 	bitl	_var01, #279
2333c     17 16 66 F0 | 	shl	arg03, #23
23340     0B 01 42 F5 | 	or	_var01, arg03
23344                 | LR__3485
23344                 | LR__3486
23344                 | LR__3487
23344                 | LR__3488
23344                 | LR__3489
23344     01 00 CE F7 | 	test	_var01, #1 wz
23348     01 14 46 55 |  if_ne	or	arg02, #1
2334c     0A 17 02 F6 | 	mov	arg03, arg02
23350     00 02 06 F6 | 	mov	_var02, #0
23354     FF FF 3F FF 
23358     FF 15 06 F1 | 	add	arg02, ##2147483647
2335c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
23360     01 02 06 C6 |  if_b	mov	_var02, #1
23364     01 01 02 F1 | 	add	_var01, _var02
23368     01 18 CE F7 | 	test	arg04, #1 wz
2336c     1F 00 26 54 |  if_ne	bith	_var01, #31
23370     00 FB 01 F6 | 	mov	result1, _var01
23374                 | __system__pack_0539_ret
23374     2D 00 64 FD | 	ret
23378                 | 
23378                 | __system___rxtxioctl_0629
23378     00 15 0E F2 | 	cmp	arg02, #256 wz
2337c     0C 00 90 AD |  if_e	jmp	#LR__3490
23380     01 15 0E F2 | 	cmp	arg02, #257 wz
23384     1C 00 90 AD |  if_e	jmp	#LR__3491
23388     30 00 90 FD | 	jmp	#LR__3492
2338c                 | LR__3490
2338c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
23390     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23394     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
23398     0B FB 61 FC | 	wrlong	result1, arg03
2339c     00 FA 05 F6 | 	mov	result1, #0
233a0     28 00 90 FD | 	jmp	#LR__3493
233a4                 | LR__3491
233a4     0B 13 02 FB | 	rdlong	arg01, arg03
233a8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
233ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
233b0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
233b4     00 FA 05 F6 | 	mov	result1, #0
233b8     10 00 90 FD | 	jmp	#LR__3493
233bc                 | LR__3492
233bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
233c0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
233c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
233c8     01 FA 65 F6 | 	neg	result1, #1
233cc                 | LR__3493
233cc                 | __system___rxtxioctl_0629_ret
233cc     2D 00 64 FD | 	ret
233d0                 | 
233d0                 | __system____dummy_flush_0630
233d0     00 FA 05 F6 | 	mov	result1, #0
233d4                 | __system____dummy_flush_0630_ret
233d4     2D 00 64 FD | 	ret
233d8                 | 
233d8                 | __system___vfsread
233d8     03 4A 05 F6 | 	mov	COUNT_, #3
233dc     A8 00 A0 FD | 	call	#pushregs_
233e0     28 F0 07 F1 | 	add	ptra, #40
233e4     04 4E 05 F1 | 	add	fp, #4
233e8     A7 12 62 FC | 	wrlong	arg01, fp
233ec     04 4E 05 F1 | 	add	fp, #4
233f0     A7 14 62 FC | 	wrlong	arg02, fp
233f4     04 4E 05 F1 | 	add	fp, #4
233f8     A7 16 62 FC | 	wrlong	arg03, fp
233fc     04 4E 85 F1 | 	sub	fp, #4
23400     A7 FA 01 FB | 	rdlong	result1, fp
23404     14 4E 05 F1 | 	add	fp, #20
23408     A7 FA 61 FC | 	wrlong	result1, fp
2340c     04 4E 05 F1 | 	add	fp, #4
23410     A7 00 68 FC | 	wrlong	#0, fp
23414     1C 4E 85 F1 | 	sub	fp, #28
23418     A7 12 02 FB | 	rdlong	arg01, fp
2341c     04 4E 85 F1 | 	sub	fp, #4
23420     08 12 06 F1 | 	add	arg01, #8
23424     09 FB 01 FB | 	rdlong	result1, arg01
23428     01 FA CD F7 | 	test	result1, #1 wz
2342c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23430     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
23434     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23438     01 FA 65 A6 |  if_e	neg	result1, #1
2343c     74 02 90 AD |  if_e	jmp	#LR__3506
23440     04 4E 05 F1 | 	add	fp, #4
23444     A7 12 02 FB | 	rdlong	arg01, fp
23448     04 4E 85 F1 | 	sub	fp, #4
2344c     14 12 06 F1 | 	add	arg01, #20
23450     09 FB 09 FB | 	rdlong	result1, arg01 wz
23454     B8 00 90 AD |  if_e	jmp	#LR__3501
23458     04 4E 05 F1 | 	add	fp, #4
2345c     A7 12 02 FB | 	rdlong	arg01, fp
23460     09 17 02 F6 | 	mov	arg03, arg01
23464     14 16 06 F1 | 	add	arg03, #20
23468     0B 1F 02 FB | 	rdlong	local01, arg03
2346c     0F 21 02 F6 | 	mov	local02, local01
23470     13 1E 46 F7 | 	zerox	local01, #19
23474     14 20 46 F0 | 	shr	local02, #20
23478     02 20 66 F0 | 	shl	local02, #2
2347c     ED 20 02 F1 | 	add	local02, __methods__
23480     10 21 02 FB | 	rdlong	local02, local02
23484     04 4E 05 F1 | 	add	fp, #4
23488     A7 14 02 FB | 	rdlong	arg02, fp
2348c     04 4E 05 F1 | 	add	fp, #4
23490     A7 16 02 FB | 	rdlong	arg03, fp
23494     0C 4E 85 F1 | 	sub	fp, #12
23498     F2 22 02 F6 | 	mov	local03, objptr
2349c     0F E5 01 F6 | 	mov	objptr, local01
234a0     2D 20 62 FD | 	call	local02
234a4     11 E5 01 F6 | 	mov	objptr, local03
234a8     10 4E 05 F1 | 	add	fp, #16
234ac     A7 FA 61 FC | 	wrlong	result1, fp
234b0     10 4E 85 F1 | 	sub	fp, #16
234b4     00 FA 55 F2 | 	cmps	result1, #0 wc
234b8     44 00 90 3D |  if_ae	jmp	#LR__3500
234bc     04 4E 05 F1 | 	add	fp, #4
234c0     A7 22 02 FB | 	rdlong	local03, fp
234c4     11 1F 02 F6 | 	mov	local01, local03
234c8     08 22 06 F1 | 	add	local03, #8
234cc     11 21 02 FB | 	rdlong	local02, local03
234d0     20 20 46 F5 | 	or	local02, #32
234d4     08 1E 06 F1 | 	add	local01, #8
234d8     0F 21 62 FC | 	wrlong	local02, local01
234dc     0C 4E 05 F1 | 	add	fp, #12
234e0     A7 12 0A FB | 	rdlong	arg01, fp wz
234e4     10 4E 85 F1 | 	sub	fp, #16
234e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
234ec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
234f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
234f4     01 FA 65 56 |  if_ne	neg	result1, #1
234f8     00 FA 05 A6 |  if_e	mov	result1, #0
234fc     B4 01 90 FD | 	jmp	#LR__3506
23500                 | LR__3500
23500     10 4E 05 F1 | 	add	fp, #16
23504     A7 FA 01 FB | 	rdlong	result1, fp
23508     10 4E 85 F1 | 	sub	fp, #16
2350c     A4 01 90 FD | 	jmp	#LR__3506
23510                 | LR__3501
23510     04 4E 05 F1 | 	add	fp, #4
23514     A7 12 02 FB | 	rdlong	arg01, fp
23518     20 12 06 F1 | 	add	arg01, #32
2351c     09 13 0A FB | 	rdlong	arg01, arg01 wz
23520     14 4E 05 F1 | 	add	fp, #20
23524     A7 12 62 FC | 	wrlong	arg01, fp
23528     18 4E 85 F1 | 	sub	fp, #24
2352c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23530     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
23534     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23538     01 FA 65 A6 |  if_e	neg	result1, #1
2353c     74 01 90 AD |  if_e	jmp	#LR__3506
23540     04 4E 05 F1 | 	add	fp, #4
23544     A7 22 02 FB | 	rdlong	local03, fp
23548     04 4E 85 F1 | 	sub	fp, #4
2354c     28 22 06 F1 | 	add	local03, #40
23550     11 21 0A FB | 	rdlong	local02, local03 wz
23554     7C 00 90 AD |  if_e	jmp	#LR__3503
23558     04 4E 05 F1 | 	add	fp, #4
2355c     A7 12 02 FB | 	rdlong	arg01, fp
23560     09 23 02 F6 | 	mov	local03, arg01
23564     28 22 06 F1 | 	add	local03, #40
23568     11 1F 02 FB | 	rdlong	local01, local03
2356c     0F 21 02 F6 | 	mov	local02, local01
23570     13 1E 46 F7 | 	zerox	local01, #19
23574     14 20 46 F0 | 	shr	local02, #20
23578     02 20 66 F0 | 	shl	local02, #2
2357c     ED 20 02 F1 | 	add	local02, __methods__
23580     10 21 02 FB | 	rdlong	local02, local02
23584     20 4E 05 F1 | 	add	fp, #32
23588     A7 16 02 F6 | 	mov	arg03, fp
2358c     24 4E 85 F1 | 	sub	fp, #36
23590     00 15 06 F6 | 	mov	arg02, #256
23594     F2 22 02 F6 | 	mov	local03, objptr
23598     0F E5 01 F6 | 	mov	objptr, local01
2359c     2D 20 62 FD | 	call	local02
235a0     11 E5 01 F6 | 	mov	objptr, local03
235a4     10 4E 05 F1 | 	add	fp, #16
235a8     A7 FA 61 FC | 	wrlong	result1, fp
235ac     00 FA 4D F2 | 	cmps	result1, #0 wz
235b0     10 4E 85 F1 | 	sub	fp, #16
235b4     1C 00 90 5D |  if_ne	jmp	#LR__3502
235b8     24 4E 05 F1 | 	add	fp, #36
235bc     A7 20 02 FB | 	rdlong	local02, fp
235c0     24 4E 85 F1 | 	sub	fp, #36
235c4     02 20 CE F7 | 	test	local02, #2 wz
235c8     20 4E 05 51 |  if_ne	add	fp, #32
235cc     A7 02 68 5C |  if_ne	wrlong	#1, fp
235d0     20 4E 85 51 |  if_ne	sub	fp, #32
235d4                 | LR__3502
235d4                 | LR__3503
235d4     10 4E 05 F1 | 	add	fp, #16
235d8     A7 00 68 FC | 	wrlong	#0, fp
235dc     10 4E 85 F1 | 	sub	fp, #16
235e0                 | LR__3504
235e0     0C 4E 05 F1 | 	add	fp, #12
235e4     A7 22 02 FB | 	rdlong	local03, fp
235e8     0C 4E 85 F1 | 	sub	fp, #12
235ec     01 22 16 F2 | 	cmp	local03, #1 wc
235f0     B4 00 90 CD |  if_b	jmp	#LR__3505
235f4     18 4E 05 F1 | 	add	fp, #24
235f8     A7 20 02 FB | 	rdlong	local02, fp
235fc     10 23 02 F6 | 	mov	local03, local02
23600     13 22 46 F7 | 	zerox	local03, #19
23604     14 20 46 F0 | 	shr	local02, #20
23608     02 20 66 F0 | 	shl	local02, #2
2360c     ED 20 02 F1 | 	add	local02, __methods__
23610     10 21 02 FB | 	rdlong	local02, local02
23614     14 4E 85 F1 | 	sub	fp, #20
23618     A7 12 02 FB | 	rdlong	arg01, fp
2361c     04 4E 85 F1 | 	sub	fp, #4
23620     F2 1E 02 F6 | 	mov	local01, objptr
23624     11 E5 01 F6 | 	mov	objptr, local03
23628     2D 20 62 FD | 	call	local02
2362c     0F E5 01 F6 | 	mov	objptr, local01
23630     14 4E 05 F1 | 	add	fp, #20
23634     A7 FA 61 FC | 	wrlong	result1, fp
23638     14 4E 85 F1 | 	sub	fp, #20
2363c     00 FA 55 F2 | 	cmps	result1, #0 wc
23640     64 00 90 CD |  if_b	jmp	#LR__3505
23644     1C 4E 05 F1 | 	add	fp, #28
23648     A7 22 02 FB | 	rdlong	local03, fp
2364c     11 21 02 F6 | 	mov	local02, local03
23650     01 20 06 F1 | 	add	local02, #1
23654     A7 20 62 FC | 	wrlong	local02, fp
23658     08 4E 85 F1 | 	sub	fp, #8
2365c     A7 20 02 FB | 	rdlong	local02, fp
23660     11 21 42 FC | 	wrbyte	local02, local03
23664     04 4E 85 F1 | 	sub	fp, #4
23668     A7 22 02 FB | 	rdlong	local03, fp
2366c     01 22 06 F1 | 	add	local03, #1
23670     A7 22 62 FC | 	wrlong	local03, fp
23674     04 4E 85 F1 | 	sub	fp, #4
23678     A7 22 02 FB | 	rdlong	local03, fp
2367c     01 22 86 F1 | 	sub	local03, #1
23680     A7 22 62 FC | 	wrlong	local03, fp
23684     14 4E 05 F1 | 	add	fp, #20
23688     A7 22 0A FB | 	rdlong	local03, fp wz
2368c     20 4E 85 F1 | 	sub	fp, #32
23690     4C FF 9F AD |  if_e	jmp	#LR__3504
23694     14 4E 05 F1 | 	add	fp, #20
23698     A7 20 02 FB | 	rdlong	local02, fp
2369c     14 4E 85 F1 | 	sub	fp, #20
236a0     0A 20 0E F2 | 	cmp	local02, #10 wz
236a4     38 FF 9F 5D |  if_ne	jmp	#LR__3504
236a8                 | LR__3505
236a8     10 4E 05 F1 | 	add	fp, #16
236ac     A7 FA 01 FB | 	rdlong	result1, fp
236b0     10 4E 85 F1 | 	sub	fp, #16
236b4                 | LR__3506
236b4     A7 F0 03 F6 | 	mov	ptra, fp
236b8     B2 00 A0 FD | 	call	#popregs_
236bc                 | __system___vfsread_ret
236bc     2D 00 64 FD | 	ret
236c0                 | 
236c0                 | __system____default_filbuf
236c0     04 4A 05 F6 | 	mov	COUNT_, #4
236c4     A8 00 A0 FD | 	call	#pushregs_
236c8     09 1F 02 F6 | 	mov	local01, arg01
236cc     0F 21 02 FB | 	rdlong	local02, local01
236d0     0C 20 06 F1 | 	add	local02, #12
236d4     10 FB 09 FB | 	rdlong	result1, local02 wz
236d8     0C 20 86 F1 | 	sub	local02, #12
236dc     20 00 90 5D |  if_ne	jmp	#LR__3510
236e0     14 20 06 F1 | 	add	local02, #20
236e4     10 FB 01 F6 | 	mov	result1, local02
236e8     04 20 86 F1 | 	sub	local02, #4
236ec     10 FB 61 FC | 	wrlong	result1, local02
236f0     04 20 86 F1 | 	sub	local02, #4
236f4     02 00 80 FF 
236f8     10 01 68 FC | 	wrlong	##1024, local02
236fc     0C 20 86 F1 | 	sub	local02, #12
23700                 | LR__3510
23700     14 1E 06 F1 | 	add	local01, #20
23704     0F 23 02 FB | 	rdlong	local03, local01
23708     11 25 02 F6 | 	mov	local04, local03
2370c     14 1E 86 F1 | 	sub	local01, #20
23710     13 24 46 F7 | 	zerox	local04, #19
23714     14 22 46 F0 | 	shr	local03, #20
23718     02 22 66 F0 | 	shl	local03, #2
2371c     ED 22 02 F1 | 	add	local03, __methods__
23720     11 23 02 FB | 	rdlong	local03, local03
23724     10 20 06 F1 | 	add	local02, #16
23728     10 15 02 FB | 	rdlong	arg02, local02
2372c     04 20 86 F1 | 	sub	local02, #4
23730     10 17 02 FB | 	rdlong	arg03, local02
23734     0C 20 86 F1 | 	sub	local02, #12
23738     0F 13 02 F6 | 	mov	arg01, local01
2373c     F2 1E 02 F6 | 	mov	local01, objptr
23740     12 E5 01 F6 | 	mov	objptr, local04
23744     2D 22 62 FD | 	call	local03
23748     0F E5 01 F6 | 	mov	objptr, local01
2374c     FD 24 02 F6 | 	mov	local04, result1
23750     00 24 56 F2 | 	cmps	local04, #0 wc
23754     01 FA 65 C6 |  if_b	neg	result1, #1
23758     28 00 90 CD |  if_b	jmp	#LR__3511
2375c     10 25 62 FC | 	wrlong	local04, local02
23760     10 20 06 F1 | 	add	local02, #16
23764     10 23 02 FB | 	rdlong	local03, local02
23768     0C 20 86 F1 | 	sub	local02, #12
2376c     10 23 62 FC | 	wrlong	local03, local02
23770     04 20 06 F1 | 	add	local02, #4
23774     10 23 02 FB | 	rdlong	local03, local02
23778     01 22 46 F5 | 	or	local03, #1
2377c     10 23 62 FC | 	wrlong	local03, local02
23780     12 FB 01 F6 | 	mov	result1, local04
23784                 | LR__3511
23784     A7 F0 03 F6 | 	mov	ptra, fp
23788     B2 00 A0 FD | 	call	#popregs_
2378c                 | __system____default_filbuf_ret
2378c     2D 00 64 FD | 	ret
23790                 | 
23790                 | __system__getlower_1015
23790     41 12 56 F2 | 	cmps	arg01, #65 wc
23794     10 00 90 CD |  if_b	jmp	#LR__3520
23798     5B 12 56 F2 | 	cmps	arg01, #91 wc
2379c     09 FB 01 C6 |  if_b	mov	result1, arg01
237a0     20 FA 05 C1 |  if_b	add	result1, #32
237a4     04 00 90 CD |  if_b	jmp	#__system__getlower_1015_ret
237a8                 | LR__3520
237a8     09 FB 01 F6 | 	mov	result1, arg01
237ac                 | __system__getlower_1015_ret
237ac     2D 00 64 FD | 	ret
237b0                 | 
237b0                 | __system___pat_match
237b0     08 4A 05 F6 | 	mov	COUNT_, #8
237b4     A8 00 A0 FD | 	call	#pushregs_
237b8     09 1F 02 F6 | 	mov	local01, arg01
237bc                 | LR__3530
237bc     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
237c0     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
237c4     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
237c8     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
237cc     2C 00 90 AD |  if_e	jmp	#LR__3531
237d0     0A 13 C2 FA | 	rdbyte	arg01, arg02
237d4     B8 FF BF FD | 	call	#__system__getlower_1015
237d8     FD 22 02 F6 | 	mov	local03, result1
237dc     0F 13 C2 FA | 	rdbyte	arg01, local01
237e0     AC FF BF FD | 	call	#__system__getlower_1015
237e4     11 FB 09 F2 | 	cmp	result1, local03 wz
237e8     00 FA 05 56 |  if_ne	mov	result1, #0
237ec     FC 00 90 5D |  if_ne	jmp	#LR__3539
237f0     01 1E 06 F1 | 	add	local01, #1
237f4     01 14 06 F1 | 	add	arg02, #1
237f8     C0 FF 9F FD | 	jmp	#LR__3530
237fc                 | LR__3531
237fc     0A 23 C2 FA | 	rdbyte	local03, arg02
23800     2A 22 0E F2 | 	cmp	local03, #42 wz
23804     D4 00 90 5D |  if_ne	jmp	#LR__3538
23808     01 14 06 F1 | 	add	arg02, #1
2380c     0A 21 C2 FA | 	rdbyte	local02, arg02
23810     01 14 86 F1 | 	sub	arg02, #1
23814     2E 20 0E F2 | 	cmp	local02, #46 wz
23818     28 00 90 5D |  if_ne	jmp	#LR__3532
2381c     02 14 06 F1 | 	add	arg02, #2
23820     0A 21 C2 FA | 	rdbyte	local02, arg02
23824     02 14 86 F1 | 	sub	arg02, #2
23828     2A 20 0E F2 | 	cmp	local02, #42 wz
2382c     03 14 06 A1 |  if_e	add	arg02, #3
23830     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
23834     03 14 86 A1 |  if_e	sub	arg02, #3
23838     12 27 0A A6 |  if_e	mov	local05, local04 wz
2383c     01 FA 05 A6 |  if_e	mov	result1, #1
23840     A8 00 90 AD |  if_e	jmp	#LR__3539
23844                 | LR__3532
23844     01 14 06 F1 | 	add	arg02, #1
23848     00 28 06 F6 | 	mov	local06, #0
2384c     97 1E 48 FB | 	callpa	#(@LR__3535-@LR__3533)>>2,fcache_load_ptr_
23850                 | LR__3533
23850     14 2B 02 F6 | 	mov	local07, local06
23854     0A 2B 02 F1 | 	add	local07, arg02
23858     15 2B CA FA | 	rdbyte	local07, local07 wz
2385c     14 27 02 56 |  if_ne	mov	local05, local06
23860     01 26 06 51 |  if_ne	add	local05, #1
23864     13 29 02 56 |  if_ne	mov	local06, local05
23868     E4 FF 9F 5D |  if_ne	jmp	#LR__3533
2386c     00 2C 06 F6 | 	mov	local08, #0
23870                 | LR__3534
23870     16 2B 02 F6 | 	mov	local07, local08
23874     0F 2B 02 F1 | 	add	local07, local01
23878     15 2B CA FA | 	rdbyte	local07, local07 wz
2387c     16 27 02 56 |  if_ne	mov	local05, local08
23880     01 26 06 51 |  if_ne	add	local05, #1
23884     13 2D 02 56 |  if_ne	mov	local08, local05
23888     E4 FF 9F 5D |  if_ne	jmp	#LR__3534
2388c                 | LR__3535
2388c     14 2D 52 F2 | 	cmps	local08, local06 wc
23890     00 FA 05 C6 |  if_b	mov	result1, #0
23894     54 00 90 CD |  if_b	jmp	#LR__3539
23898     16 21 02 F6 | 	mov	local02, local08
2389c     14 21 82 F1 | 	sub	local02, local06
238a0     10 1F 02 F1 | 	add	local01, local02
238a4                 | LR__3536
238a4     01 28 56 F2 | 	cmps	local06, #1 wc
238a8     30 00 90 CD |  if_b	jmp	#LR__3537
238ac     0F 13 C2 FA | 	rdbyte	arg01, local01
238b0     DC FE BF FD | 	call	#__system__getlower_1015
238b4     FD 2C 02 F6 | 	mov	local08, result1
238b8     0A 13 C2 FA | 	rdbyte	arg01, arg02
238bc     D0 FE BF FD | 	call	#__system__getlower_1015
238c0     FD 2C 0A F2 | 	cmp	local08, result1 wz
238c4     00 FA 05 56 |  if_ne	mov	result1, #0
238c8     20 00 90 5D |  if_ne	jmp	#LR__3539
238cc     01 1E 06 F1 | 	add	local01, #1
238d0     01 14 06 F1 | 	add	arg02, #1
238d4     01 28 86 F1 | 	sub	local06, #1
238d8     C8 FF 9F FD | 	jmp	#LR__3536
238dc                 | LR__3537
238dc                 | LR__3538
238dc     0A 2D CA FA | 	rdbyte	local08, arg02 wz
238e0     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
238e4     01 FA 05 A6 |  if_e	mov	result1, #1
238e8     00 FA 05 56 |  if_ne	mov	result1, #0
238ec                 | LR__3539
238ec     A7 F0 03 F6 | 	mov	ptra, fp
238f0     B2 00 A0 FD | 	call	#popregs_
238f4                 | __system___pat_match_ret
238f4     2D 00 64 FD | 	ret
238f8                 | 
238f8                 | _fatfs_cc_ff_uni2oem
238f8     00 00 06 F6 | 	mov	_var01, #0
238fc     80 12 16 F2 | 	cmp	arg01, #128 wc
23900     09 01 02 C6 |  if_b	mov	_var01, arg01
23904     58 00 90 CD |  if_b	jmp	#LR__3544
23908     80 00 00 FF 
2390c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
23910     4C 00 90 3D |  if_ae	jmp	#LR__3543
23914     0A FB 31 F9 | 	getword	result1, arg02, #0
23918     01 00 00 FF 
2391c     52 FB 0D F2 | 	cmp	result1, ##850 wz
23920     3C 00 90 5D |  if_ne	jmp	#LR__3543
23924                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
23924     00 00 06 F6 | 	mov	_var01, #0
23928     97 14 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
2392c                 | LR__3540
2392c     00 FB 31 F9 | 	getword	result1, _var01, #0
23930     80 FA 15 F2 | 	cmp	result1, #128 wc
23934     1C 00 90 3D |  if_ae	jmp	#LR__3542
23938     00 FB 31 F9 | 	getword	result1, _var01, #0
2393c     01 FA 65 F0 | 	shl	result1, #1
23940     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
23944     FD FA E1 FA | 	rdword	result1, result1
23948     FD 12 0A F2 | 	cmp	arg01, result1 wz
2394c     01 00 06 51 |  if_ne	add	_var01, #1
23950     D8 FF 9F 5D |  if_ne	jmp	#LR__3540
23954                 | LR__3541
23954                 | LR__3542
23954     00 01 32 F9 | 	getword	_var01, _var01, #0
23958     80 00 06 F1 | 	add	_var01, #128
2395c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
23960                 | LR__3543
23960                 | LR__3544
23960                 | ' 			c = (c + 0x80) & 0xFF;
23960                 | ' 		}
23960                 | ' 	}
23960                 | ' 
23960                 | ' 	return c;
23960     00 FB 01 F6 | 	mov	result1, _var01
23964                 | _fatfs_cc_ff_uni2oem_ret
23964     2D 00 64 FD | 	ret
23968                 | 
23968                 | _fatfs_cc_ff_oem2uni
23968     00 00 06 F6 | 	mov	_var01, #0
2396c     09 FB 31 F9 | 	getword	result1, arg01, #0
23970     80 FA 15 F2 | 	cmp	result1, #128 wc
23974     09 01 02 C6 |  if_b	mov	_var01, arg01
23978     2C 00 90 CD |  if_b	jmp	#LR__3551
2397c     0A 15 32 F9 | 	getword	arg02, arg02, #0
23980     01 00 00 FF 
23984     52 15 0E F2 | 	cmp	arg02, ##850 wz
23988     1C 00 90 5D |  if_ne	jmp	#LR__3550
2398c     09 FB 31 F9 | 	getword	result1, arg01, #0
23990     00 FB 15 F2 | 	cmp	result1, #256 wc
23994     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
23998     80 12 86 C1 |  if_b	sub	arg01, #128
2399c     01 12 66 C0 |  if_b	shl	arg01, #1
239a0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
239a4     09 01 E2 CA |  if_b	rdword	_var01, arg01
239a8                 | LR__3550
239a8                 | LR__3551
239a8                 | ' 		}
239a8                 | ' 	}
239a8                 | ' 
239a8                 | ' 	return c;
239a8     00 FB 01 F6 | 	mov	result1, _var01
239ac                 | _fatfs_cc_ff_oem2uni_ret
239ac     2D 00 64 FD | 	ret
239b0                 | 
239b0                 | _fatfs_cc_ff_wtoupper
239b0     09 01 02 F6 | 	mov	_var01, arg01
239b4     80 00 00 FF 
239b8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
239bc     60 01 90 3D |  if_ae	jmp	#LR__3573
239c0     00 03 02 F6 | 	mov	_var02, _var01
239c4     01 01 32 F9 | 	getword	_var01, _var02, #0
239c8     08 00 00 FF 
239cc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
239d0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
239d4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
239d8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
239dc     01 00 00 3F 
239e0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
239e4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
239e8     01 00 00 3F 
239ec     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
239f0     02 07 02 F6 | 	mov	_var04, _var03
239f4                 | ' 		uc = (WORD)uni;
239f4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
239f4                 | ' 		for (;;) {
239f4                 | LR__3560
239f4     03 09 E2 FA | 	rdword	_var05, _var04
239f8     04 05 02 F6 | 	mov	_var03, _var05
239fc     0F 04 4E F7 | 	zerox	_var03, #15 wz
23a00     02 06 06 F1 | 	add	_var04, #2
23a04     14 01 90 AD |  if_e	jmp	#LR__3572
23a08     01 05 32 F9 | 	getword	_var03, _var02, #0
23a0c     04 01 32 F9 | 	getword	_var01, _var05, #0
23a10     00 05 12 F2 | 	cmp	_var03, _var01 wc
23a14     04 01 90 CD |  if_b	jmp	#LR__3572
23a18     03 0B E2 FA | 	rdword	_var06, _var04
23a1c     05 0D 32 F9 | 	getword	_var07, _var06, #0
23a20     08 0C 46 F0 | 	shr	_var07, #8
23a24     05 0B 32 F9 | 	getword	_var06, _var06, #0
23a28     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
23a2c     01 05 32 F9 | 	getword	_var03, _var02, #0
23a30     04 0F 32 F9 | 	getword	_var08, _var05, #0
23a34     05 01 32 F9 | 	getword	_var01, _var06, #0
23a38     00 0F 02 F1 | 	add	_var08, _var01
23a3c     07 05 52 F2 | 	cmps	_var03, _var08 wc
23a40     02 06 06 F1 | 	add	_var04, #2
23a44     C4 00 90 3D |  if_ae	jmp	#LR__3571
23a48                 | ' 				switch (cmd) {
23a48     06 11 32 F9 | 	getword	_var09, _var07, #0
23a4c     09 10 26 F3 | 	fle	_var09, #9
23a50     30 10 62 FD | 	jmprel	_var09
23a54                 | LR__3561
23a54     24 00 90 FD | 	jmp	#LR__3562
23a58     3C 00 90 FD | 	jmp	#LR__3563
23a5c     54 00 90 FD | 	jmp	#LR__3564
23a60     5C 00 90 FD | 	jmp	#LR__3565
23a64     64 00 90 FD | 	jmp	#LR__3566
23a68     6C 00 90 FD | 	jmp	#LR__3567
23a6c     74 00 90 FD | 	jmp	#LR__3568
23a70     7C 00 90 FD | 	jmp	#LR__3569
23a74     84 00 90 FD | 	jmp	#LR__3570
23a78     A0 00 90 FD | 	jmp	#LR__3572
23a7c                 | LR__3562
23a7c     01 03 32 F9 | 	getword	_var02, _var02, #0
23a80     04 09 32 F9 | 	getword	_var05, _var05, #0
23a84     04 03 82 F1 | 	sub	_var02, _var05
23a88     01 02 66 F0 | 	shl	_var02, #1
23a8c     03 03 02 F1 | 	add	_var02, _var04
23a90     01 03 E2 FA | 	rdword	_var02, _var02
23a94     84 00 90 FD | 	jmp	#LR__3572
23a98                 | LR__3563
23a98     01 05 32 F9 | 	getword	_var03, _var02, #0
23a9c     01 03 32 F9 | 	getword	_var02, _var02, #0
23aa0     04 09 32 F9 | 	getword	_var05, _var05, #0
23aa4     04 03 82 F1 | 	sub	_var02, _var05
23aa8     01 02 06 F5 | 	and	_var02, #1
23aac     02 03 C2 F2 | 	subr	_var02, _var03
23ab0     68 00 90 FD | 	jmp	#LR__3572
23ab4                 | LR__3564
23ab4     01 03 32 F9 | 	getword	_var02, _var02, #0
23ab8     10 02 86 F1 | 	sub	_var02, #16
23abc     5C 00 90 FD | 	jmp	#LR__3572
23ac0                 | LR__3565
23ac0     01 03 32 F9 | 	getword	_var02, _var02, #0
23ac4     20 02 86 F1 | 	sub	_var02, #32
23ac8     50 00 90 FD | 	jmp	#LR__3572
23acc                 | LR__3566
23acc     01 03 32 F9 | 	getword	_var02, _var02, #0
23ad0     30 02 86 F1 | 	sub	_var02, #48
23ad4     44 00 90 FD | 	jmp	#LR__3572
23ad8                 | LR__3567
23ad8     01 03 32 F9 | 	getword	_var02, _var02, #0
23adc     1A 02 86 F1 | 	sub	_var02, #26
23ae0     38 00 90 FD | 	jmp	#LR__3572
23ae4                 | LR__3568
23ae4     01 03 32 F9 | 	getword	_var02, _var02, #0
23ae8     08 02 06 F1 | 	add	_var02, #8
23aec     2C 00 90 FD | 	jmp	#LR__3572
23af0                 | LR__3569
23af0     01 03 32 F9 | 	getword	_var02, _var02, #0
23af4     50 02 86 F1 | 	sub	_var02, #80
23af8     20 00 90 FD | 	jmp	#LR__3572
23afc                 | LR__3570
23afc     01 03 32 F9 | 	getword	_var02, _var02, #0
23b00     0E 00 00 FF 
23b04     60 02 86 F1 | 	sub	_var02, ##7264
23b08                 | ' 				}
23b08                 | ' 				break;
23b08     10 00 90 FD | 	jmp	#LR__3572
23b0c                 | LR__3571
23b0c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
23b10     02 0A 06 AA |  if_e	mul	_var06, #2
23b14     05 07 02 A1 |  if_e	add	_var04, _var06
23b18     D8 FE 9F FD | 	jmp	#LR__3560
23b1c                 | LR__3572
23b1c     01 01 32 F9 | 	getword	_var01, _var02, #0
23b20                 | LR__3573
23b20                 | ' 		}
23b20                 | ' 		uni = uc;
23b20                 | ' 	}
23b20                 | ' 
23b20                 | ' 	return uni;
23b20     00 FB 01 F6 | 	mov	result1, _var01
23b24                 | _fatfs_cc_ff_wtoupper_ret
23b24     2D 00 64 FD | 	ret
23b28                 | 
23b28                 | _fatfs_cc_strncpy
23b28     09 01 02 F6 | 	mov	_var01, arg01
23b2c     97 12 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
23b30                 | ' 
23b30                 | ' 	dscan = dst;
23b30                 | ' 	sscan = src;
23b30                 | ' 	count = n;
23b30                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
23b30                 | LR__3580
23b30     01 16 86 F1 | 	sub	arg03, #1
23b34     00 16 56 F2 | 	cmps	arg03, #0 wc
23b38     18 00 90 CD |  if_b	jmp	#LR__3582
23b3c     0A FB C1 FA | 	rdbyte	result1, arg02
23b40     00 FB 41 FC | 	wrbyte	result1, _var01
23b44     01 14 06 F1 | 	add	arg02, #1
23b48     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23b4c                 | ' 		continue;
23b4c     01 00 06 F1 | 	add	_var01, #1
23b50     DC FF 9F 5D |  if_ne	jmp	#LR__3580
23b54                 | LR__3581
23b54                 | LR__3582
23b54     97 0C 48 FB | 	callpa	#(@LR__3584-@LR__3583)>>2,fcache_load_ptr_
23b58                 | ' 	while (--count >= 0)
23b58                 | LR__3583
23b58     01 16 86 F1 | 	sub	arg03, #1
23b5c     00 16 56 F2 | 	cmps	arg03, #0 wc
23b60     00 03 02 36 |  if_ae	mov	_var02, _var01
23b64     01 00 06 31 |  if_ae	add	_var01, #1
23b68     01 01 48 3C |  if_ae	wrbyte	#0, _var02
23b6c     E8 FF 9F 3D |  if_ae	jmp	#LR__3583
23b70                 | LR__3584
23b70                 | ' 		*dscan++ = '\0';
23b70                 | ' 	return(dst);
23b70     09 FB 01 F6 | 	mov	result1, arg01
23b74                 | _fatfs_cc_strncpy_ret
23b74     2D 00 64 FD | 	ret
23b78                 | 
23b78                 | _fatfs_cc_memcmp
23b78                 | ' 	for (n = size; n > 0; n--)
23b78     00 16 0E F2 | 	cmp	arg03, #0 wz
23b7c     28 00 90 AD |  if_e	jmp	#LR__3591
23b80                 | LR__3590
23b80     09 01 C2 FA | 	rdbyte	_var01, arg01
23b84     0A 03 C2 FA | 	rdbyte	_var02, arg02
23b88     01 01 0A F2 | 	cmp	_var01, _var02 wz
23b8c     01 12 06 A1 |  if_e	add	arg01, #1
23b90     01 14 06 A1 |  if_e	add	arg02, #1
23b94                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
23b94     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
23b98     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
23b9c     01 FB 81 51 |  if_ne	sub	result1, _var02
23ba0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
23ba4     F6 17 6E FB | 	djnz	arg03, #LR__3590
23ba8                 | LR__3591
23ba8                 | ' 
23ba8                 | ' 	return(0);
23ba8     00 FA 05 F6 | 	mov	result1, #0
23bac                 | _fatfs_cc_memcmp_ret
23bac     2D 00 64 FD | 	ret
23bb0                 | 
23bb0                 | _fatfs_cc_strncmp
23bb0     09 01 0A F6 | 	mov	_var01, arg01 wz
23bb4     14 00 90 5D |  if_ne	jmp	#LR__3600
23bb8                 | ' 		return scan2 ? -1 : 0;
23bb8     00 14 0E F2 | 	cmp	arg02, #0 wz
23bbc     01 02 66 56 |  if_ne	neg	_var02, #1
23bc0     00 02 06 A6 |  if_e	mov	_var02, #0
23bc4     01 FB 01 F6 | 	mov	result1, _var02
23bc8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
23bcc                 | LR__3600
23bcc     00 14 0E F2 | 	cmp	arg02, #0 wz
23bd0     01 FA 05 A6 |  if_e	mov	result1, #1
23bd4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
23bd8     0B 05 02 F6 | 	mov	_var03, arg03
23bdc     97 16 48 FB | 	callpa	#(@LR__3602-@LR__3601)>>2,fcache_load_ptr_
23be0                 | ' 	count = n;
23be0                 | ' 	do {
23be0                 | LR__3601
23be0     00 07 C2 FA | 	rdbyte	_var04, _var01
23be4     0A 09 02 F6 | 	mov	_var05, arg02
23be8     04 0B C2 FA | 	rdbyte	_var06, _var05
23bec     01 04 86 F1 | 	sub	_var03, #1
23bf0     00 04 56 F2 | 	cmps	_var03, #0 wc
23bf4     01 00 06 F1 | 	add	_var01, #1
23bf8     01 14 06 F1 | 	add	arg02, #1
23bfc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
23c00     08 00 90 2D |  if_nc_and_z	jmp	#LR__3603
23c04     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
23c08     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3601
23c0c                 | LR__3602
23c0c                 | LR__3603
23c0c     00 04 56 F2 | 	cmps	_var03, #0 wc
23c10                 | ' 		return(0);
23c10     00 FA 05 C6 |  if_b	mov	result1, #0
23c14     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
23c18     05 07 0A F2 | 	cmp	_var04, _var06 wz
23c1c                 | ' 		return(0);
23c1c     00 FA 05 A6 |  if_e	mov	result1, #0
23c20     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
23c24     00 06 0E F2 | 	cmp	_var04, #0 wz
23c28                 | ' 		return(-1);
23c28     01 FA 65 A6 |  if_e	neg	result1, #1
23c2c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
23c30     00 0A 0E F2 | 	cmp	_var06, #0 wz
23c34                 | ' 		return(1);
23c34     01 FA 05 A6 |  if_e	mov	result1, #1
23c38                 | ' 		return(c1 - c2);
23c38     03 FB 01 56 |  if_ne	mov	result1, _var04
23c3c     05 FB 81 51 |  if_ne	sub	result1, _var06
23c40                 | _fatfs_cc_strncmp_ret
23c40     2D 00 64 FD | 	ret
23c44                 | 
23c44                 | _fatfs_cc_strchr
23c44                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
23c44                 | ' 	while ((c = *s++) != (char) charwanted)
23c44                 | LR__3610
23c44     09 01 02 F6 | 	mov	_var01, arg01
23c48     00 03 C2 FA | 	rdbyte	_var02, _var01
23c4c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
23c50     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
23c54     03 05 0A F2 | 	cmp	_var03, _var04 wz
23c58     01 12 06 F1 | 	add	arg01, #1
23c5c     14 00 90 AD |  if_e	jmp	#LR__3611
23c60     01 05 02 F6 | 	mov	_var03, _var02
23c64     07 04 4E F7 | 	zerox	_var03, #7 wz
23c68     00 FA 05 A6 |  if_e	mov	result1, #0
23c6c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
23c70     D0 FF 9F FD | 	jmp	#LR__3610
23c74                 | LR__3611
23c74                 | ' 	return((char *)--s);
23c74     01 12 86 F1 | 	sub	arg01, #1
23c78     09 FB 01 F6 | 	mov	result1, arg01
23c7c                 | _fatfs_cc_strchr_ret
23c7c     2D 00 64 FD | 	ret
23c80                 | 
23c80                 | _fatfs_cc_disk_initialize
23c80     04 4A 05 F6 | 	mov	COUNT_, #4
23c84     A8 00 A0 FD | 	call	#pushregs_
23c88     40 F0 07 F1 | 	add	ptra, #64
23c8c     04 4E 05 F1 | 	add	fp, #4
23c90     A7 12 42 FC | 	wrbyte	arg01, fp
23c94     01 00 00 FF 
23c98     14 E4 05 F1 | 	add	objptr, ##532
23c9c     F2 18 02 FB | 	rdlong	arg04, objptr
23ca0     2C 4E 05 F1 | 	add	fp, #44
23ca4     A7 18 62 FC | 	wrlong	arg04, fp
23ca8     04 E4 85 F1 | 	sub	objptr, #4
23cac     F2 18 02 FB | 	rdlong	arg04, objptr
23cb0     04 4E 05 F1 | 	add	fp, #4
23cb4     A7 18 62 FC | 	wrlong	arg04, fp
23cb8     08 E4 05 F1 | 	add	objptr, #8
23cbc     F2 18 02 FB | 	rdlong	arg04, objptr
23cc0     04 4E 05 F1 | 	add	fp, #4
23cc4     A7 18 62 FC | 	wrlong	arg04, fp
23cc8     04 E4 05 F1 | 	add	objptr, #4
23ccc     F2 18 02 FB | 	rdlong	arg04, objptr
23cd0     04 4E 05 F1 | 	add	fp, #4
23cd4     A7 18 62 FC | 	wrlong	arg04, fp
23cd8     04 E4 05 F1 | 	add	objptr, #4
23cdc     F2 02 48 FC | 	wrbyte	#1, objptr
23ce0     01 00 00 FF 
23ce4     20 E4 85 F1 | 	sub	objptr, ##544
23ce8     38 4E 85 F1 | 	sub	fp, #56
23cec     A7 18 CA FA | 	rdbyte	arg04, fp wz
23cf0     04 4E 85 F1 | 	sub	fp, #4
23cf4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23cf4                 | '             return RES_NOTRDY;
23cf4     03 FA 05 56 |  if_ne	mov	result1, #3
23cf8     D8 05 90 5D |  if_ne	jmp	#LR__3638
23cfc     13 00 00 FF 
23d00     10 13 06 F6 | 	mov	arg01, ##10000
23d04     A4 9A BF FD | 	call	#__system___waitus
23d08     30 4E 05 F1 | 	add	fp, #48
23d0c     A7 12 02 FB | 	rdlong	arg01, fp
23d10     09 01 08 FC | 	wrpin	#0, arg01
23d14     04 4E 05 F1 | 	add	fp, #4
23d18     A7 12 02 FB | 	rdlong	arg01, fp
23d1c     09 01 08 FC | 	wrpin	#0, arg01
23d20     04 4E 05 F1 | 	add	fp, #4
23d24     A7 12 02 FB | 	rdlong	arg01, fp
23d28     09 01 08 FC | 	wrpin	#0, arg01
23d2c     04 4E 05 F1 | 	add	fp, #4
23d30     A7 12 02 FB | 	rdlong	arg01, fp
23d34     09 00 80 FF 
23d38     09 01 08 FC | 	wrpin	##4608, arg01
23d3c     0C 4E 85 F1 | 	sub	fp, #12
23d40     A7 12 02 FB | 	rdlong	arg01, fp
23d44     59 12 62 FD | 	drvh	arg01
23d48     04 4E 05 F1 | 	add	fp, #4
23d4c     A7 12 02 FB | 	rdlong	arg01, fp
23d50     59 12 62 FD | 	drvh	arg01
23d54     04 4E 05 F1 | 	add	fp, #4
23d58     A7 12 02 FB | 	rdlong	arg01, fp
23d5c     59 12 62 FD | 	drvh	arg01
23d60     04 4E 05 F1 | 	add	fp, #4
23d64     A7 12 02 FB | 	rdlong	arg01, fp
23d68     59 12 62 FD | 	drvh	arg01
23d6c     20 4E 85 F1 | 	sub	fp, #32
23d70     00 04 80 FF 
23d74     A7 20 68 FC | 	wrlong	##524304, fp
23d78     04 4E 05 F1 | 	add	fp, #4
23d7c     20 03 80 FF 
23d80     A7 90 68 FC | 	wrlong	##409672, fp
23d84     14 4E 05 F1 | 	add	fp, #20
23d88     A7 1E 02 FB | 	rdlong	local01, fp
23d8c     18 4E 85 F1 | 	sub	fp, #24
23d90     A7 16 02 FB | 	rdlong	arg03, fp
23d94     40 1E 62 FD | 	dirl	local01
23d98     A0 03 80 FF 
23d9c     0F 91 08 FC | 	wrpin	##475208, local01
23da0     0F 17 12 FC | 	wxpin	arg03, local01
23da4     0F 01 28 FC | 	wypin	#0, local01
23da8     41 1E 62 FD | 	dirh	local01
23dac     1C 4E 05 F1 | 	add	fp, #28
23db0     A7 20 02 FB | 	rdlong	local02, fp
23db4     10 1F 82 F1 | 	sub	local01, local02
23db8     07 1E 06 F5 | 	and	local01, #7
23dbc     18 1E 66 F0 | 	shl	local01, #24
23dc0     78 14 06 F6 | 	mov	arg02, #120
23dc4     0F 15 42 F5 | 	or	arg02, local01
23dc8     14 4E 85 F1 | 	sub	fp, #20
23dcc     A7 14 62 FC | 	wrlong	arg02, fp
23dd0     14 4E 05 F1 | 	add	fp, #20
23dd4     A7 12 02 FB | 	rdlong	arg01, fp
23dd8     10 14 26 F4 | 	bith	arg02, #16
23ddc     40 12 62 FD | 	dirl	arg01
23de0     09 15 02 FC | 	wrpin	arg02, arg01
23de4     09 3F 18 FC | 	wxpin	#31, arg01
23de8     FF FF FF FF 
23dec     09 FF 2B FC | 	wypin	##-1, arg01
23df0     41 12 62 FD | 	dirh	arg01
23df4     04 4E 85 F1 | 	sub	fp, #4
23df8     A7 14 02 FB | 	rdlong	arg02, fp
23dfc     08 4E 05 F1 | 	add	fp, #8
23e00     A7 22 02 FB | 	rdlong	local03, fp
23e04     11 15 82 F1 | 	sub	arg02, local03
23e08     07 14 06 F5 | 	and	arg02, #7
23e0c     18 14 66 F0 | 	shl	arg02, #24
23e10     14 4E 85 F1 | 	sub	fp, #20
23e14     A7 14 62 FC | 	wrlong	arg02, fp
23e18     29 00 00 FF 
23e1c     7A 14 46 F5 | 	or	arg02, ##21114
23e20     A7 14 62 FC | 	wrlong	arg02, fp
23e24     14 4E 05 F1 | 	add	fp, #20
23e28     A7 12 02 FB | 	rdlong	arg01, fp
23e2c     40 12 62 FD | 	dirl	arg01
23e30     09 15 02 FC | 	wrpin	arg02, arg01
23e34     09 4F 18 FC | 	wxpin	#39, arg01
23e38     09 01 28 FC | 	wypin	#0, arg01
23e3c     41 12 62 FD | 	dirh	arg01
23e40     28 4E 85 F1 | 	sub	fp, #40
23e44     A7 12 02 F6 | 	mov	arg01, fp
23e48     14 4E 85 F1 | 	sub	fp, #20
23e4c     0A 14 06 F6 | 	mov	arg02, #10
23e50     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1049
23e54     00 12 06 F6 | 	mov	arg01, #0
23e58     00 14 06 F6 | 	mov	arg02, #0
23e5c     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
23e60     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1059
23e64     64 12 06 F6 | 	mov	arg01, #100
23e68     40 99 BF FD | 	call	#__system___waitus
23e6c     14 4E 05 F1 | 	add	fp, #20
23e70     A7 12 02 F6 | 	mov	arg01, fp
23e74     14 4E 85 F1 | 	sub	fp, #20
23e78     0A 14 06 F6 | 	mov	arg02, #10
23e7c     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1049
23e80     0C 4E 05 F1 | 	add	fp, #12
23e84     A7 00 48 FC | 	wrbyte	#0, fp
23e88     0C 4E 85 F1 | 	sub	fp, #12
23e8c     00 12 06 F6 | 	mov	arg01, #0
23e90     00 14 06 F6 | 	mov	arg02, #0
23e94     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
23e98     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
23e9c     01 18 0E F2 | 	cmp	arg04, #1 wz
23ea0     B8 03 90 5D |  if_ne	jmp	#LR__3637
23ea4     08 12 06 F6 | 	mov	arg01, #8
23ea8     AA 15 06 F6 | 	mov	arg02, #426
23eac     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
23eb0     FD FA E1 F8 | 	getbyte	result1, result1, #0
23eb4     01 FA 0D F2 | 	cmp	result1, #1 wz
23eb8     98 01 90 5D |  if_ne	jmp	#LR__3623
23ebc     14 4E 05 F1 | 	add	fp, #20
23ec0     A7 12 02 F6 | 	mov	arg01, fp
23ec4     14 4E 85 F1 | 	sub	fp, #20
23ec8     04 14 06 F6 | 	mov	arg02, #4
23ecc     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1049
23ed0     16 4E 05 F1 | 	add	fp, #22
23ed4     A7 24 C2 FA | 	rdbyte	local04, fp
23ed8     16 4E 85 F1 | 	sub	fp, #22
23edc     01 24 0E F2 | 	cmp	local04, #1 wz
23ee0     17 4E 05 A1 |  if_e	add	fp, #23
23ee4     A7 22 C2 AA |  if_e	rdbyte	local03, fp
23ee8     17 4E 85 A1 |  if_e	sub	fp, #23
23eec     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
23ef0     68 03 90 5D |  if_ne	jmp	#LR__3636
23ef4                 | ' 				for (tmr = 1000; tmr; tmr--) {
23ef4     18 4E 05 F1 | 	add	fp, #24
23ef8     01 00 80 FF 
23efc     A7 D0 6B FC | 	wrlong	##1000, fp
23f00     18 4E 85 F1 | 	sub	fp, #24
23f04                 | LR__3620
23f04     18 4E 05 F1 | 	add	fp, #24
23f08     A7 1E 0A FB | 	rdlong	local01, fp wz
23f0c     18 4E 85 F1 | 	sub	fp, #24
23f10     3C 00 90 AD |  if_e	jmp	#LR__3621
23f14     A9 12 06 F6 | 	mov	arg01, #169
23f18     1E 14 C6 F9 | 	decod	arg02, #30
23f1c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
23f20     FD 24 02 F6 | 	mov	local04, result1
23f24     07 24 4E F7 | 	zerox	local04, #7 wz
23f28     24 00 90 AD |  if_e	jmp	#LR__3621
23f2c     01 00 00 FF 
23f30     E8 13 06 F6 | 	mov	arg01, ##1000
23f34     74 98 BF FD | 	call	#__system___waitus
23f38     18 4E 05 F1 | 	add	fp, #24
23f3c     A7 24 02 FB | 	rdlong	local04, fp
23f40     01 24 86 F1 | 	sub	local04, #1
23f44     A7 24 62 FC | 	wrlong	local04, fp
23f48     18 4E 85 F1 | 	sub	fp, #24
23f4c     B4 FF 9F FD | 	jmp	#LR__3620
23f50                 | LR__3621
23f50     18 4E 05 F1 | 	add	fp, #24
23f54     A7 24 0A FB | 	rdlong	local04, fp wz
23f58     18 4E 85 F1 | 	sub	fp, #24
23f5c     4C 00 90 AD |  if_e	jmp	#LR__3622
23f60     3A 12 06 F6 | 	mov	arg01, #58
23f64     00 14 06 F6 | 	mov	arg02, #0
23f68     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
23f6c     FD 22 02 F6 | 	mov	local03, result1
23f70     07 22 4E F7 | 	zerox	local03, #7 wz
23f74     34 00 90 5D |  if_ne	jmp	#LR__3622
23f78     14 4E 05 F1 | 	add	fp, #20
23f7c     A7 12 02 F6 | 	mov	arg01, fp
23f80     14 4E 85 F1 | 	sub	fp, #20
23f84     04 14 06 F6 | 	mov	arg02, #4
23f88     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1049
23f8c     14 4E 05 F1 | 	add	fp, #20
23f90     A7 1E C2 FA | 	rdbyte	local01, fp
23f94     40 1E CE F7 | 	test	local01, #64 wz
23f98     0C 24 06 56 |  if_ne	mov	local04, #12
23f9c     04 24 06 A6 |  if_e	mov	local04, #4
23fa0     08 4E 85 F1 | 	sub	fp, #8
23fa4     A7 24 42 FC | 	wrbyte	local04, fp
23fa8     0C 4E 85 F1 | 	sub	fp, #12
23fac                 | LR__3622
23fac     14 24 06 FB | 	rdlong	local04, #20
23fb0     18 4E 05 F1 | 	add	fp, #24
23fb4     A7 24 62 FC | 	wrlong	local04, fp
23fb8     0C 4E 05 F1 | 	add	fp, #12
23fbc     A7 24 02 FB | 	rdlong	local04, fp
23fc0     1B 24 26 F4 | 	bith	local04, #27
23fc4     A7 24 62 FC | 	wrlong	local04, fp
23fc8     0C 4E 85 F1 | 	sub	fp, #12
23fcc     A7 24 02 FB | 	rdlong	local04, fp
23fd0     18 4E 85 F1 | 	sub	fp, #24
23fd4     68 78 04 FF 
23fd8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
23fdc     1C 4E 05 C1 |  if_b	add	fp, #28
23fe0     00 01 80 CF 
23fe4     A7 08 68 CC |  if_b	wrlong	##131076, fp
23fe8     1C 4E 85 C1 |  if_b	sub	fp, #28
23fec     6C 02 90 CD |  if_b	jmp	#LR__3636
23ff0     18 4E 05 F1 | 	add	fp, #24
23ff4     A7 24 02 FB | 	rdlong	local04, fp
23ff8     18 4E 85 F1 | 	sub	fp, #24
23ffc     E1 F5 05 FF 
24000     01 24 16 F2 | 	cmp	local04, ##200000001 wc
24004     1C 4E 05 C1 |  if_b	add	fp, #28
24008     00 01 80 CF 
2400c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
24010     1C 4E 85 C1 |  if_b	sub	fp, #28
24014     44 02 90 CD |  if_b	jmp	#LR__3636
24018     18 4E 05 F1 | 	add	fp, #24
2401c     A7 24 02 FB | 	rdlong	local04, fp
24020     18 4E 85 F1 | 	sub	fp, #24
24024     3B 58 08 FF 
24028     01 24 16 F2 | 	cmp	local04, ##280000001 wc
2402c     1C 4E 05 C1 |  if_b	add	fp, #28
24030     00 01 80 CF 
24034     A7 0C 68 CC |  if_b	wrlong	##131078, fp
24038     1C 4E 85 C1 |  if_b	sub	fp, #28
2403c     1C 02 90 CD |  if_b	jmp	#LR__3636
24040     1C 4E 05 F1 | 	add	fp, #28
24044     80 01 80 FF 
24048     A7 10 68 FC | 	wrlong	##196616, fp
2404c     1C 4E 85 F1 | 	sub	fp, #28
24050     08 02 90 FD | 	jmp	#LR__3636
24054                 | LR__3623
24054     A9 12 06 F6 | 	mov	arg01, #169
24058     00 14 06 F6 | 	mov	arg02, #0
2405c     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
24060     FD 24 E2 F8 | 	getbyte	local04, result1, #0
24064     02 24 16 F2 | 	cmp	local04, #2 wc
24068     18 00 90 3D |  if_ae	jmp	#LR__3624
2406c     0C 4E 05 F1 | 	add	fp, #12
24070     A7 04 48 FC | 	wrbyte	#2, fp
24074     04 4E 05 F1 | 	add	fp, #4
24078     A7 52 49 FC | 	wrbyte	#169, fp
2407c     10 4E 85 F1 | 	sub	fp, #16
24080     14 00 90 FD | 	jmp	#LR__3625
24084                 | LR__3624
24084     0C 4E 05 F1 | 	add	fp, #12
24088     A7 02 48 FC | 	wrbyte	#1, fp
2408c     04 4E 05 F1 | 	add	fp, #4
24090     A7 02 48 FC | 	wrbyte	#1, fp
24094     10 4E 85 F1 | 	sub	fp, #16
24098                 | LR__3625
24098                 | ' 				ty =  0x01 ; cmd =  (1) ;
24098                 | ' 			}
24098                 | ' 			for (tmr = 1000; tmr; tmr--) {
24098     18 4E 05 F1 | 	add	fp, #24
2409c     01 00 80 FF 
240a0     A7 D0 6B FC | 	wrlong	##1000, fp
240a4     18 4E 85 F1 | 	sub	fp, #24
240a8                 | LR__3626
240a8     18 4E 05 F1 | 	add	fp, #24
240ac     A7 22 0A FB | 	rdlong	local03, fp wz
240b0     18 4E 85 F1 | 	sub	fp, #24
240b4     44 00 90 AD |  if_e	jmp	#LR__3627
240b8     10 4E 05 F1 | 	add	fp, #16
240bc     A7 12 C2 FA | 	rdbyte	arg01, fp
240c0     10 4E 85 F1 | 	sub	fp, #16
240c4     00 14 06 F6 | 	mov	arg02, #0
240c8     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
240cc     FD 24 02 F6 | 	mov	local04, result1
240d0     07 24 4E F7 | 	zerox	local04, #7 wz
240d4     24 00 90 AD |  if_e	jmp	#LR__3627
240d8     01 00 00 FF 
240dc     E8 13 06 F6 | 	mov	arg01, ##1000
240e0     C8 96 BF FD | 	call	#__system___waitus
240e4     18 4E 05 F1 | 	add	fp, #24
240e8     A7 24 02 FB | 	rdlong	local04, fp
240ec     01 24 86 F1 | 	sub	local04, #1
240f0     A7 24 62 FC | 	wrlong	local04, fp
240f4     18 4E 85 F1 | 	sub	fp, #24
240f8     AC FF 9F FD | 	jmp	#LR__3626
240fc                 | LR__3627
240fc     18 4E 05 F1 | 	add	fp, #24
24100     A7 24 0A FB | 	rdlong	local04, fp wz
24104     18 4E 85 F1 | 	sub	fp, #24
24108     14 00 90 AD |  if_e	jmp	#LR__3628
2410c     10 12 06 F6 | 	mov	arg01, #16
24110     09 14 C6 F9 | 	decod	arg02, #9
24114     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1073
24118     07 FA 4D F7 | 	zerox	result1, #7 wz
2411c     0C 00 90 AD |  if_e	jmp	#LR__3629
24120                 | LR__3628
24120     0C 4E 05 F1 | 	add	fp, #12
24124     A7 00 48 FC | 	wrbyte	#0, fp
24128     0C 4E 85 F1 | 	sub	fp, #12
2412c                 | LR__3629
2412c     14 24 06 FB | 	rdlong	local04, #20
24130     18 4E 05 F1 | 	add	fp, #24
24134     A7 24 62 FC | 	wrlong	local04, fp
24138     18 4E 85 F1 | 	sub	fp, #24
2413c     F0 FA 02 FF 
24140     01 25 16 F2 | 	cmp	local04, ##100000001 wc
24144     18 00 90 3D |  if_ae	jmp	#LR__3630
24148     24 4E 05 F1 | 	add	fp, #36
2414c     A7 24 02 FB | 	rdlong	local04, fp
24150     1B 24 26 F4 | 	bith	local04, #27
24154     A7 24 62 FC | 	wrlong	local04, fp
24158     24 4E 85 F1 | 	sub	fp, #36
2415c     2C 00 90 FD | 	jmp	#LR__3631
24160                 | LR__3630
24160     18 4E 05 F1 | 	add	fp, #24
24164     A7 24 02 FB | 	rdlong	local04, fp
24168     18 4E 85 F1 | 	sub	fp, #24
2416c     E1 F5 05 FF 
24170     01 24 16 F2 | 	cmp	local04, ##200000001 wc
24174     24 4E 05 C1 |  if_b	add	fp, #36
24178     A7 24 02 CB |  if_b	rdlong	local04, fp
2417c     80 00 04 CF 
24180     00 24 46 C5 |  if_b	or	local04, ##134283264
24184     A7 24 62 CC |  if_b	wrlong	local04, fp
24188     24 4E 85 C1 |  if_b	sub	fp, #36
2418c                 | LR__3631
2418c     18 4E 05 F1 | 	add	fp, #24
24190     A7 24 02 FB | 	rdlong	local04, fp
24194     18 4E 85 F1 | 	sub	fp, #24
24198     F0 FA 02 FF 
2419c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
241a0     1C 4E 05 C1 |  if_b	add	fp, #28
241a4     00 01 80 CF 
241a8     A7 08 68 CC |  if_b	wrlong	##131076, fp
241ac     1C 4E 85 C1 |  if_b	sub	fp, #28
241b0     A8 00 90 CD |  if_b	jmp	#LR__3635
241b4     18 4E 05 F1 | 	add	fp, #24
241b8     A7 24 02 FB | 	rdlong	local04, fp
241bc     18 4E 85 F1 | 	sub	fp, #24
241c0     68 78 04 FF 
241c4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
241c8     1C 4E 05 C1 |  if_b	add	fp, #28
241cc     80 01 80 CF 
241d0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
241d4     1C 4E 85 C1 |  if_b	sub	fp, #28
241d8     80 00 90 CD |  if_b	jmp	#LR__3634
241dc     18 4E 05 F1 | 	add	fp, #24
241e0     A7 24 02 FB | 	rdlong	local04, fp
241e4     18 4E 85 F1 | 	sub	fp, #24
241e8     E1 F5 05 FF 
241ec     01 24 16 F2 | 	cmp	local04, ##200000001 wc
241f0     1C 4E 05 C1 |  if_b	add	fp, #28
241f4     00 02 80 CF 
241f8     A7 10 68 CC |  if_b	wrlong	##262152, fp
241fc     1C 4E 85 C1 |  if_b	sub	fp, #28
24200     58 00 90 CD |  if_b	jmp	#LR__3633
24204     18 4E 05 F1 | 	add	fp, #24
24208     A7 24 02 FB | 	rdlong	local04, fp
2420c     18 4E 85 F1 | 	sub	fp, #24
24210     59 73 07 FF 
24214     81 24 16 F2 | 	cmp	local04, ##250000001 wc
24218     1C 4E 05 C1 |  if_b	add	fp, #28
2421c     80 02 80 CF 
24220     A7 14 68 CC |  if_b	wrlong	##327690, fp
24224     1C 4E 85 C1 |  if_b	sub	fp, #28
24228     30 00 90 CD |  if_b	jmp	#LR__3632
2422c     18 4E 05 F1 | 	add	fp, #24
24230     A7 24 02 FB | 	rdlong	local04, fp
24234     18 4E 85 F1 | 	sub	fp, #24
24238     D1 F0 08 FF 
2423c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
24240     1C 4E 05 C1 |  if_b	add	fp, #28
24244     00 03 80 CF 
24248     A7 18 68 CC |  if_b	wrlong	##393228, fp
2424c     1C 4E 85 F3 | 	sumc	fp, #28
24250     80 03 80 3F 
24254     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
24258     1C 4E 85 31 |  if_ae	sub	fp, #28
2425c                 | LR__3632
2425c                 | LR__3633
2425c                 | LR__3634
2425c                 | LR__3635
2425c                 | LR__3636
2425c                 | LR__3637
2425c     0C 4E 05 F1 | 	add	fp, #12
24260     A7 24 C2 FA | 	rdbyte	local04, fp
24264     01 00 00 FF 
24268     21 E4 05 F1 | 	add	objptr, ##545
2426c     F2 24 42 FC | 	wrbyte	local04, objptr
24270     A7 1E CA FA | 	rdbyte	local01, fp wz
24274     00 24 06 56 |  if_ne	mov	local04, #0
24278     01 24 06 A6 |  if_e	mov	local04, #1
2427c     20 4E 05 F1 | 	add	fp, #32
24280     A7 24 42 FC | 	wrbyte	local04, fp
24284     A7 24 C2 FA | 	rdbyte	local04, fp
24288     2C 4E 85 F1 | 	sub	fp, #44
2428c     01 E4 85 F1 | 	sub	objptr, #1
24290     F2 24 42 FC | 	wrbyte	local04, objptr
24294     01 00 00 FF 
24298     20 E4 85 F1 | 	sub	objptr, ##544
2429c     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1059
242a0     34 4E 05 F1 | 	add	fp, #52
242a4     A7 12 02 FB | 	rdlong	arg01, fp
242a8     18 4E 85 F1 | 	sub	fp, #24
242ac     A7 14 02 FB | 	rdlong	arg02, fp
242b0     09 15 12 FC | 	wxpin	arg02, arg01
242b4     1C 4E 05 F1 | 	add	fp, #28
242b8     A7 12 02 FB | 	rdlong	arg01, fp
242bc     14 4E 85 F1 | 	sub	fp, #20
242c0     A7 14 02 FB | 	rdlong	arg02, fp
242c4     09 15 02 FC | 	wrpin	arg02, arg01
242c8                 | ' 
242c8                 | ' 		}
242c8                 | ' 	}
242c8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
242c8                 | ' 	CardType = ty;
242c8                 | ' 	s = ty ? 0 :  0x01 ;
242c8                 | ' 	Stat = s;
242c8                 | ' 
242c8                 | ' 	deselect();
242c8                 | ' 
242c8                 | ' 
242c8                 | ' 	_wxpin( PIN_CLK, ck_div );
242c8                 | ' 	_wrpin( PIN_DI, spm_tx );
242c8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
242c8                 | ' 	return s;
242c8     08 4E 05 F1 | 	add	fp, #8
242cc     A7 FA C1 FA | 	rdbyte	result1, fp
242d0     2C 4E 85 F1 | 	sub	fp, #44
242d4                 | LR__3638
242d4     A7 F0 03 F6 | 	mov	ptra, fp
242d8     B2 00 A0 FD | 	call	#popregs_
242dc                 | _fatfs_cc_disk_initialize_ret
242dc     2D 00 64 FD | 	ret
242e0                 | 
242e0                 | _fatfs_cc_disk_read
242e0     05 4A 05 F6 | 	mov	COUNT_, #5
242e4     A8 00 A0 FD | 	call	#pushregs_
242e8     0A 1F 02 F6 | 	mov	local01, arg02
242ec     0B 21 02 F6 | 	mov	local02, arg03
242f0     0C 23 02 F6 | 	mov	local03, arg04
242f4     00 12 0E F2 | 	cmp	arg01, #0 wz
242f8     01 FA 05 56 |  if_ne	mov	result1, #1
242fc                 | ' 
242fc                 | ' 	return Stat;
242fc     01 00 00 AF 
24300     20 E4 05 A1 |  if_e	add	objptr, ##544
24304     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
24308     01 00 00 AF 
2430c     20 E4 85 A1 |  if_e	sub	objptr, ##544
24310     FD FA E1 F8 | 	getbyte	result1, result1, #0
24314     01 FA CD F7 | 	test	result1, #1 wz
24318     03 FA 05 56 |  if_ne	mov	result1, #3
2431c     84 00 90 5D |  if_ne	jmp	#LR__3642
24320     01 00 00 FF 
24324     21 E4 05 F1 | 	add	objptr, ##545
24328     F2 24 C2 FA | 	rdbyte	local04, objptr
2432c     01 00 00 FF 
24330     21 E4 85 F1 | 	sub	objptr, ##545
24334     08 24 CE F7 | 	test	local04, #8 wz
24338     09 20 66 A0 |  if_e	shl	local02, #9
2433c     02 22 16 F2 | 	cmp	local03, #2 wc
24340     12 24 06 36 |  if_ae	mov	local04, #18
24344     11 24 06 C6 |  if_b	mov	local04, #17
24348     10 15 02 F6 | 	mov	arg02, local02
2434c     12 13 02 F6 | 	mov	arg01, local04
24350     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1073
24354     FD 26 02 F6 | 	mov	local05, result1
24358     07 26 4E F7 | 	zerox	local05, #7 wz
2435c     30 00 90 5D |  if_ne	jmp	#LR__3641
24360                 | ' 		do {
24360                 | LR__3640
24360     0F 13 02 F6 | 	mov	arg01, local01
24364     09 14 C6 F9 | 	decod	arg02, #9
24368     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1067
2436c     00 FA 0D F2 | 	cmp	result1, #0 wz
24370     01 00 00 5F 
24374     00 1E 06 51 |  if_ne	add	local01, ##512
24378     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3640
2437c     12 25 E2 F8 | 	getbyte	local04, local04, #0
24380     12 24 0E F2 | 	cmp	local04, #18 wz
24384     0C 12 06 A6 |  if_e	mov	arg01, #12
24388     00 14 06 A6 |  if_e	mov	arg02, #0
2438c     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1073
24390                 | LR__3641
24390     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1059
24394                 | ' 	}
24394                 | ' 	deselect();
24394                 | ' 
24394                 | ' 	return count ? RES_ERROR : RES_OK;
24394     00 22 0E F2 | 	cmp	local03, #0 wz
24398     01 26 06 56 |  if_ne	mov	local05, #1
2439c     00 26 06 A6 |  if_e	mov	local05, #0
243a0     13 FB 01 F6 | 	mov	result1, local05
243a4                 | LR__3642
243a4     A7 F0 03 F6 | 	mov	ptra, fp
243a8     B2 00 A0 FD | 	call	#popregs_
243ac                 | _fatfs_cc_disk_read_ret
243ac     2D 00 64 FD | 	ret
243b0                 | 
243b0                 | _fatfs_cc_disk_write
243b0     04 4A 05 F6 | 	mov	COUNT_, #4
243b4     A8 00 A0 FD | 	call	#pushregs_
243b8     0A 1F 02 F6 | 	mov	local01, arg02
243bc     0C 21 02 F6 | 	mov	local02, arg04
243c0     0B 23 02 F6 | 	mov	local03, arg03
243c4     00 12 0E F2 | 	cmp	arg01, #0 wz
243c8     01 FA 05 56 |  if_ne	mov	result1, #1
243cc                 | ' 
243cc                 | ' 	return Stat;
243cc     01 00 00 AF 
243d0     20 E4 05 A1 |  if_e	add	objptr, ##544
243d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
243d8     01 00 00 AF 
243dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
243e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
243e4     01 FA CD F7 | 	test	result1, #1 wz
243e8     03 FA 05 56 |  if_ne	mov	result1, #3
243ec     D4 00 90 5D |  if_ne	jmp	#LR__3654
243f0     01 00 00 FF 
243f4     21 E4 05 F1 | 	add	objptr, ##545
243f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
243fc     01 00 00 FF 
24400     21 E4 85 F1 | 	sub	objptr, ##545
24404     08 16 CE F7 | 	test	arg03, #8 wz
24408     09 22 66 A0 |  if_e	shl	local03, #9
2440c     01 20 0E F2 | 	cmp	local02, #1 wz
24410     30 00 90 5D |  if_ne	jmp	#LR__3650
24414     18 12 06 F6 | 	mov	arg01, #24
24418     11 15 02 F6 | 	mov	arg02, local03
2441c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1073
24420     FD 24 02 F6 | 	mov	local04, result1
24424     07 24 4E F7 | 	zerox	local04, #7 wz
24428     84 00 90 5D |  if_ne	jmp	#LR__3653
2442c     0F 13 02 F6 | 	mov	arg01, local01
24430     FE 14 06 F6 | 	mov	arg02, #254
24434     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1069
24438     00 FA 0D F2 | 	cmp	result1, #0 wz
2443c     00 20 06 56 |  if_ne	mov	local02, #0
24440     6C 00 90 FD | 	jmp	#LR__3653
24444                 | LR__3650
24444     01 00 00 FF 
24448     21 E4 05 F1 | 	add	objptr, ##545
2444c     F2 24 C2 FA | 	rdbyte	local04, objptr
24450     01 00 00 FF 
24454     21 E4 85 F1 | 	sub	objptr, ##545
24458     06 24 CE F7 | 	test	local04, #6 wz
2445c     97 12 06 56 |  if_ne	mov	arg01, #151
24460     10 15 02 56 |  if_ne	mov	arg02, local02
24464     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1073
24468     11 15 02 F6 | 	mov	arg02, local03
2446c     19 12 06 F6 | 	mov	arg01, #25
24470     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1073
24474     FD 24 02 F6 | 	mov	local04, result1
24478     07 24 4E F7 | 	zerox	local04, #7 wz
2447c     30 00 90 5D |  if_ne	jmp	#LR__3652
24480                 | ' 			do {
24480                 | LR__3651
24480     0F 13 02 F6 | 	mov	arg01, local01
24484     FC 14 06 F6 | 	mov	arg02, #252
24488     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1069
2448c     00 FA 0D F2 | 	cmp	result1, #0 wz
24490     01 00 00 5F 
24494     00 1E 06 51 |  if_ne	add	local01, ##512
24498     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3651
2449c     00 12 06 F6 | 	mov	arg01, #0
244a0     FD 14 06 F6 | 	mov	arg02, #253
244a4     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1069
244a8     00 FA 0D F2 | 	cmp	result1, #0 wz
244ac     01 20 06 A6 |  if_e	mov	local02, #1
244b0                 | LR__3652
244b0                 | LR__3653
244b0     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1059
244b4                 | ' 				count = 1;
244b4                 | ' 		}
244b4                 | ' 	}
244b4                 | ' 	deselect();
244b4                 | ' 
244b4                 | ' 	return count ? RES_ERROR : RES_OK;
244b4     00 20 0E F2 | 	cmp	local02, #0 wz
244b8     01 24 06 56 |  if_ne	mov	local04, #1
244bc     00 24 06 A6 |  if_e	mov	local04, #0
244c0     12 FB 01 F6 | 	mov	result1, local04
244c4                 | LR__3654
244c4     A7 F0 03 F6 | 	mov	ptra, fp
244c8     B2 00 A0 FD | 	call	#popregs_
244cc                 | _fatfs_cc_disk_write_ret
244cc     2D 00 64 FD | 	ret
244d0                 | 
244d0                 | _fatfs_cc_disk_ioctl
244d0     01 4A 05 F6 | 	mov	COUNT_, #1
244d4     A8 00 A0 FD | 	call	#pushregs_
244d8     30 F0 07 F1 | 	add	ptra, #48
244dc     04 4E 05 F1 | 	add	fp, #4
244e0     A7 12 42 FC | 	wrbyte	arg01, fp
244e4     04 4E 05 F1 | 	add	fp, #4
244e8     A7 14 42 FC | 	wrbyte	arg02, fp
244ec     04 4E 05 F1 | 	add	fp, #4
244f0     A7 16 62 FC | 	wrlong	arg03, fp
244f4     08 4E 85 F1 | 	sub	fp, #8
244f8     A7 12 CA FA | 	rdbyte	arg01, fp wz
244fc     04 4E 85 F1 | 	sub	fp, #4
24500     01 FA 05 56 |  if_ne	mov	result1, #1
24504                 | ' 
24504                 | ' 	return Stat;
24504     01 00 00 AF 
24508     20 E4 05 A1 |  if_e	add	objptr, ##544
2450c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
24510     01 00 00 AF 
24514     20 E4 85 A1 |  if_e	sub	objptr, ##544
24518     FD FA E1 F8 | 	getbyte	result1, result1, #0
2451c     01 FA CD F7 | 	test	result1, #1 wz
24520     03 FA 05 56 |  if_ne	mov	result1, #3
24524     E4 01 90 5D |  if_ne	jmp	#LR__3668
24528     10 4E 05 F1 | 	add	fp, #16
2452c     A7 02 68 FC | 	wrlong	#1, fp
24530                 | ' 
24530                 | ' 	res = RES_ERROR;
24530                 | ' 	switch (ctrl) {
24530     08 4E 85 F1 | 	sub	fp, #8
24534     A7 1E C2 FA | 	rdbyte	local01, fp
24538     08 4E 85 F1 | 	sub	fp, #8
2453c     04 1E 26 F3 | 	fle	local01, #4
24540     30 1E 62 FD | 	jmprel	local01
24544                 | LR__3660
24544     10 00 90 FD | 	jmp	#LR__3661
24548     24 00 90 FD | 	jmp	#LR__3662
2454c     A0 01 90 FD | 	jmp	#LR__3666
24550     80 01 90 FD | 	jmp	#LR__3665
24554     98 01 90 FD | 	jmp	#LR__3666
24558                 | LR__3661
24558     B4 79 B0 FD | 	call	#_fatfs_cc_select_1063
2455c     00 FA 0D F2 | 	cmp	result1, #0 wz
24560     10 4E 05 51 |  if_ne	add	fp, #16
24564     A7 00 68 5C |  if_ne	wrlong	#0, fp
24568     10 4E 85 51 |  if_ne	sub	fp, #16
2456c                 | ' 			break;
2456c     8C 01 90 FD | 	jmp	#LR__3667
24570                 | LR__3662
24570     09 12 06 F6 | 	mov	arg01, #9
24574     00 14 06 F6 | 	mov	arg02, #0
24578     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1073
2457c     FD 1E 02 F6 | 	mov	local01, result1
24580     07 1E 4E F7 | 	zerox	local01, #7 wz
24584     74 01 90 5D |  if_ne	jmp	#LR__3667
24588     18 4E 05 F1 | 	add	fp, #24
2458c     A7 12 02 F6 | 	mov	arg01, fp
24590     18 4E 85 F1 | 	sub	fp, #24
24594     10 14 06 F6 | 	mov	arg02, #16
24598     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1067
2459c     00 FA 0D F2 | 	cmp	result1, #0 wz
245a0     58 01 90 AD |  if_e	jmp	#LR__3667
245a4     18 4E 05 F1 | 	add	fp, #24
245a8     A7 1E C2 FA | 	rdbyte	local01, fp
245ac     18 4E 85 F1 | 	sub	fp, #24
245b0     06 1E 46 F0 | 	shr	local01, #6
245b4     01 1E 0E F2 | 	cmp	local01, #1 wz
245b8     5C 00 90 5D |  if_ne	jmp	#LR__3663
245bc     21 4E 05 F1 | 	add	fp, #33
245c0     A7 1E C2 FA | 	rdbyte	local01, fp
245c4     01 4E 85 F1 | 	sub	fp, #1
245c8     A7 FA C1 FA | 	rdbyte	result1, fp
245cc     FD FA 31 F9 | 	getword	result1, result1, #0
245d0     08 FA 65 F0 | 	shl	result1, #8
245d4     FD 1E 02 F1 | 	add	local01, result1
245d8     01 4E 85 F1 | 	sub	fp, #1
245dc     A7 FA C1 FA | 	rdbyte	result1, fp
245e0     3F FA 05 F5 | 	and	result1, #63
245e4     10 FA 65 F0 | 	shl	result1, #16
245e8     FD 1E 02 F1 | 	add	local01, result1
245ec     01 1E 06 F1 | 	add	local01, #1
245f0     09 4E 05 F1 | 	add	fp, #9
245f4     A7 1E 62 FC | 	wrlong	local01, fp
245f8     1C 4E 85 F1 | 	sub	fp, #28
245fc     A7 1E 02 FB | 	rdlong	local01, fp
24600     1C 4E 05 F1 | 	add	fp, #28
24604     A7 FA 01 FB | 	rdlong	result1, fp
24608     28 4E 85 F1 | 	sub	fp, #40
2460c     0A FA 65 F0 | 	shl	result1, #10
24610     0F FB 61 FC | 	wrlong	result1, local01
24614     AC 00 90 FD | 	jmp	#LR__3664
24618                 | LR__3663
24618     1D 4E 05 F1 | 	add	fp, #29
2461c     A7 1E C2 FA | 	rdbyte	local01, fp
24620     0F 1F 42 F8 | 	getnib	local01, local01, #0
24624     05 4E 05 F1 | 	add	fp, #5
24628     A7 FA C1 FA | 	rdbyte	result1, fp
2462c     80 FA 05 F5 | 	and	result1, #128
24630     07 FA C5 F0 | 	sar	result1, #7
24634     FD 1E 02 F1 | 	add	local01, result1
24638     01 4E 85 F1 | 	sub	fp, #1
2463c     A7 FA C1 FA | 	rdbyte	result1, fp
24640     03 FA 05 F5 | 	and	result1, #3
24644     01 FA 65 F0 | 	shl	result1, #1
24648     FD 1E 02 F1 | 	add	local01, result1
2464c     02 1E 06 F1 | 	add	local01, #2
24650     0D 4E 85 F1 | 	sub	fp, #13
24654     A7 1E 42 FC | 	wrbyte	local01, fp
24658     0C 4E 05 F1 | 	add	fp, #12
2465c     A7 1E C2 FA | 	rdbyte	local01, fp
24660     06 1E 46 F0 | 	shr	local01, #6
24664     01 4E 85 F1 | 	sub	fp, #1
24668     A7 FA C1 FA | 	rdbyte	result1, fp
2466c     FD FA 31 F9 | 	getword	result1, result1, #0
24670     02 FA 65 F0 | 	shl	result1, #2
24674     FD 1E 02 F1 | 	add	local01, result1
24678     01 4E 85 F1 | 	sub	fp, #1
2467c     A7 FA C1 FA | 	rdbyte	result1, fp
24680     03 FA 05 F5 | 	and	result1, #3
24684     FD FA 31 F9 | 	getword	result1, result1, #0
24688     0A FA 65 F0 | 	shl	result1, #10
2468c     FD 1E 02 F1 | 	add	local01, result1
24690     01 1E 06 F1 | 	add	local01, #1
24694     0A 4E 05 F1 | 	add	fp, #10
24698     A7 1E 62 FC | 	wrlong	local01, fp
2469c     1C 4E 85 F1 | 	sub	fp, #28
246a0     A7 1E 02 FB | 	rdlong	local01, fp
246a4     1C 4E 05 F1 | 	add	fp, #28
246a8     A7 FA 01 FB | 	rdlong	result1, fp
246ac     14 4E 85 F1 | 	sub	fp, #20
246b0     A7 16 C2 FA | 	rdbyte	arg03, fp
246b4     14 4E 85 F1 | 	sub	fp, #20
246b8     09 16 86 F1 | 	sub	arg03, #9
246bc     0B FB 61 F0 | 	shl	result1, arg03
246c0     0F FB 61 FC | 	wrlong	result1, local01
246c4                 | LR__3664
246c4     10 4E 05 F1 | 	add	fp, #16
246c8     A7 00 68 FC | 	wrlong	#0, fp
246cc     10 4E 85 F1 | 	sub	fp, #16
246d0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
246d0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
246d0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
246d0                 | ' 				}
246d0                 | ' 				res = RES_OK;
246d0                 | ' 			}
246d0                 | ' 			break;
246d0     28 00 90 FD | 	jmp	#LR__3667
246d4                 | LR__3665
246d4     0C 4E 05 F1 | 	add	fp, #12
246d8     A7 1E 02 FB | 	rdlong	local01, fp
246dc     0F 01 69 FC | 	wrlong	#128, local01
246e0     04 4E 05 F1 | 	add	fp, #4
246e4     A7 00 68 FC | 	wrlong	#0, fp
246e8     10 4E 85 F1 | 	sub	fp, #16
246ec                 | ' 			*(DWORD*)buff = 128;
246ec                 | ' 			res = RES_OK;
246ec                 | ' 			break;
246ec     0C 00 90 FD | 	jmp	#LR__3667
246f0                 | LR__3666
246f0     10 4E 05 F1 | 	add	fp, #16
246f4     A7 08 68 FC | 	wrlong	#4, fp
246f8     10 4E 85 F1 | 	sub	fp, #16
246fc                 | LR__3667
246fc     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1059
24700                 | ' 			res = RES_PARERR;
24700                 | ' 	}
24700                 | ' 
24700                 | ' 	deselect();
24700                 | ' 
24700                 | ' 	return res;
24700     10 4E 05 F1 | 	add	fp, #16
24704     A7 FA 01 FB | 	rdlong	result1, fp
24708     10 4E 85 F1 | 	sub	fp, #16
2470c                 | LR__3668
2470c     A7 F0 03 F6 | 	mov	ptra, fp
24710     B2 00 A0 FD | 	call	#popregs_
24714                 | _fatfs_cc_disk_ioctl_ret
24714     2D 00 64 FD | 	ret
24718                 | 
24718                 | _fatfs_cc_disk_setpins
24718     00 12 0E F2 | 	cmp	arg01, #0 wz
2471c     01 FA 65 56 |  if_ne	neg	result1, #1
24720     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
24724     01 00 00 FF 
24728     10 E4 05 F1 | 	add	objptr, ##528
2472c     F2 14 62 FC | 	wrlong	arg02, objptr
24730     04 E4 05 F1 | 	add	objptr, #4
24734     F2 16 62 FC | 	wrlong	arg03, objptr
24738     04 E4 05 F1 | 	add	objptr, #4
2473c     F2 18 62 FC | 	wrlong	arg04, objptr
24740     04 E4 05 F1 | 	add	objptr, #4
24744     F2 1A 62 FC | 	wrlong	arg05, objptr
24748     01 00 00 FF 
2474c     1C E4 85 F1 | 	sub	objptr, ##540
24750     00 FA 05 F6 | 	mov	result1, #0
24754                 | _fatfs_cc_disk_setpins_ret
24754     2D 00 64 FD | 	ret
24758                 | 
24758                 | _fatfs_cc_tchar2uni
24758     09 01 02 FB | 	rdlong	_var01, arg01
2475c     00 03 02 F6 | 	mov	_var02, _var01
24760     01 00 06 F1 | 	add	_var01, #1
24764     00 05 02 F6 | 	mov	_var03, _var01
24768     01 07 C2 FA | 	rdbyte	_var04, _var02
2476c     80 06 CE F7 | 	test	_var04, #128 wz
24770     E8 00 90 AD |  if_e	jmp	#LR__3677
24774     03 09 02 F6 | 	mov	_var05, _var04
24778     E0 08 06 F5 | 	and	_var05, #224
2477c     C0 08 0E F2 | 	cmp	_var05, #192 wz
24780     1F 06 06 A5 |  if_e	and	_var04, #31
24784     01 0A 06 A6 |  if_e	mov	_var06, #1
24788     34 00 90 AD |  if_e	jmp	#LR__3671
2478c     03 09 02 F6 | 	mov	_var05, _var04
24790     F0 08 06 F5 | 	and	_var05, #240
24794     E0 08 0E F2 | 	cmp	_var05, #224 wz
24798     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2479c     02 0A 06 A6 |  if_e	mov	_var06, #2
247a0     1C 00 90 AD |  if_e	jmp	#LR__3670
247a4     03 09 02 F6 | 	mov	_var05, _var04
247a8     F8 08 06 F5 | 	and	_var05, #248
247ac     F0 08 0E F2 | 	cmp	_var05, #240 wz
247b0     07 06 06 A5 |  if_e	and	_var04, #7
247b4     03 0A 06 A6 |  if_e	mov	_var06, #3
247b8                 | ' 			return 0xFFFFFFFF;
247b8     01 FA 65 56 |  if_ne	neg	result1, #1
247bc     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
247c0                 | LR__3670
247c0                 | LR__3671
247c0                 | ' 		}
247c0                 | ' 		do {
247c0                 | LR__3672
247c0     02 0D C2 FA | 	rdbyte	_var07, _var03
247c4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
247c8     C0 08 06 F5 | 	and	_var05, #192
247cc     80 08 0E F2 | 	cmp	_var05, #128 wz
247d0     01 04 06 F1 | 	add	_var03, #1
247d4     01 FA 65 56 |  if_ne	neg	result1, #1
247d8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
247dc     06 06 66 F0 | 	shl	_var04, #6
247e0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
247e4     3F 02 06 F5 | 	and	_var02, #63
247e8     01 07 42 F5 | 	or	_var04, _var02
247ec     F4 0B 6E FB | 	djnz	_var06, #LR__3672
247f0     80 06 16 F2 | 	cmp	_var04, #128 wc
247f4     24 00 90 CD |  if_b	jmp	#LR__3674
247f8     6C 00 00 FF 
247fc     00 06 16 F2 | 	cmp	_var04, ##55296 wc
24800     0C 00 90 CD |  if_b	jmp	#LR__3673
24804     70 00 00 FF 
24808     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2480c     0C 00 90 CD |  if_b	jmp	#LR__3674
24810                 | LR__3673
24810     80 08 00 FF 
24814     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
24818     08 00 90 CD |  if_b	jmp	#LR__3675
2481c                 | LR__3674
2481c     01 FA 65 F6 | 	neg	result1, #1
24820     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
24824                 | LR__3675
24824     80 00 00 FF 
24828     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2482c     2C 00 90 CD |  if_b	jmp	#LR__3676
24830     03 03 02 F6 | 	mov	_var02, _var04
24834     80 00 00 FF 
24838     00 02 86 F1 | 	sub	_var02, ##65536
2483c     06 02 66 F0 | 	shl	_var02, #6
24840     80 FF 01 FF 
24844     00 02 06 F5 | 	and	_var02, ##67043328
24848     6E 00 6C FF 
2484c     00 08 06 F6 | 	mov	_var05, ##-671032320
24850     01 09 42 F5 | 	or	_var05, _var02
24854     09 06 46 F7 | 	zerox	_var04, #9
24858     04 07 42 F5 | 	or	_var04, _var05
2485c                 | LR__3676
2485c                 | LR__3677
2485c     09 05 62 FC | 	wrlong	_var03, arg01
24860                 | ' 	}
24860                 | ' #line 811 "ff.c"
24860                 | ' 	*str = p;
24860                 | ' 	return uc;
24860     03 FB 01 F6 | 	mov	result1, _var04
24864                 | _fatfs_cc_tchar2uni_ret
24864     2D 00 64 FD | 	ret
24868                 | 
24868                 | _fatfs_cc_put_utf
24868     80 12 16 F2 | 	cmp	arg01, #128 wc
2486c     18 00 90 3D |  if_ae	jmp	#LR__3680
24870     01 16 16 F2 | 	cmp	arg03, #1 wc
24874     00 FA 05 C6 |  if_b	mov	result1, #0
24878     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2487c     0A 13 42 FC | 	wrbyte	arg01, arg02
24880                 | ' 		*buf = (TCHAR)chr;
24880                 | ' 		return 1;
24880     01 FA 05 F6 | 	mov	result1, #1
24884     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
24888                 | LR__3680
24888     04 00 00 FF 
2488c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
24890     40 00 90 3D |  if_ae	jmp	#LR__3681
24894     02 16 16 F2 | 	cmp	arg03, #2 wc
24898     00 FA 05 C6 |  if_b	mov	result1, #0
2489c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
248a0     09 FB 01 F6 | 	mov	result1, arg01
248a4     06 FA 45 F0 | 	shr	result1, #6
248a8     1F FA 05 F5 | 	and	result1, #31
248ac     C0 16 06 F6 | 	mov	arg03, #192
248b0     FD 16 42 F5 | 	or	arg03, result1
248b4     0A 17 42 FC | 	wrbyte	arg03, arg02
248b8     01 14 06 F1 | 	add	arg02, #1
248bc     3F 12 06 F5 | 	and	arg01, #63
248c0     80 FA 05 F6 | 	mov	result1, #128
248c4     09 FB 41 F5 | 	or	result1, arg01
248c8     0A FB 41 FC | 	wrbyte	result1, arg02
248cc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
248cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
248cc                 | ' 		return 2;
248cc     02 FA 05 F6 | 	mov	result1, #2
248d0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
248d4                 | LR__3681
248d4     80 00 00 FF 
248d8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
248dc     70 00 90 3D |  if_ae	jmp	#LR__3684
248e0     03 16 16 F2 | 	cmp	arg03, #3 wc
248e4     18 00 90 CD |  if_b	jmp	#LR__3682
248e8     6C 00 00 FF 
248ec     00 12 16 F2 | 	cmp	arg01, ##55296 wc
248f0     14 00 90 CD |  if_b	jmp	#LR__3683
248f4     70 00 00 FF 
248f8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
248fc     08 00 90 3D |  if_ae	jmp	#LR__3683
24900                 | LR__3682
24900     00 FA 05 F6 | 	mov	result1, #0
24904     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
24908                 | LR__3683
24908     09 FB 59 F8 | 	getnib	result1, arg01, #3
2490c     E0 16 06 F6 | 	mov	arg03, #224
24910     FD 16 42 F5 | 	or	arg03, result1
24914     0A 17 42 FC | 	wrbyte	arg03, arg02
24918     01 14 06 F1 | 	add	arg02, #1
2491c     09 FB 01 F6 | 	mov	result1, arg01
24920     06 FA 45 F0 | 	shr	result1, #6
24924     3F FA 05 F5 | 	and	result1, #63
24928     80 16 06 F6 | 	mov	arg03, #128
2492c     FD 16 42 F5 | 	or	arg03, result1
24930     0A 17 42 FC | 	wrbyte	arg03, arg02
24934     01 14 06 F1 | 	add	arg02, #1
24938     3F 12 06 F5 | 	and	arg01, #63
2493c     80 FA 05 F6 | 	mov	result1, #128
24940     09 FB 41 F5 | 	or	result1, arg01
24944     0A FB 41 FC | 	wrbyte	result1, arg02
24948                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
24948                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
24948                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
24948                 | ' 		return 3;
24948     03 FA 05 F6 | 	mov	result1, #3
2494c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
24950                 | LR__3684
24950     04 16 16 F2 | 	cmp	arg03, #4 wc
24954     00 FA 05 C6 |  if_b	mov	result1, #0
24958     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2495c     09 01 02 F6 | 	mov	_var01, arg01
24960     E0 01 06 F4 | 	bitl	_var01, #480
24964     00 00 6C FF 
24968     00 00 86 F1 | 	sub	_var01, ##-671088640
2496c     06 00 46 F0 | 	shr	_var01, #6
24970     09 13 32 F9 | 	getword	arg01, arg01, #0
24974     6E 00 00 FF 
24978     00 12 86 F1 | 	sub	arg01, ##56320
2497c     00 08 00 FF 
24980     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
24984     02 00 00 CF 
24988     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2498c     00 FA 05 36 |  if_ae	mov	result1, #0
24990     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
24994     09 01 42 F5 | 	or	_var01, arg01
24998     80 00 00 FF 
2499c     00 00 06 F1 | 	add	_var01, ##65536
249a0     00 FB 01 F6 | 	mov	result1, _var01
249a4     12 FA 45 F0 | 	shr	result1, #18
249a8     07 FA 05 F5 | 	and	result1, #7
249ac     F0 16 06 F6 | 	mov	arg03, #240
249b0     FD 16 42 F5 | 	or	arg03, result1
249b4     0A 17 42 FC | 	wrbyte	arg03, arg02
249b8     01 14 06 F1 | 	add	arg02, #1
249bc     00 FB 01 F6 | 	mov	result1, _var01
249c0     0C FA 45 F0 | 	shr	result1, #12
249c4     3F FA 05 F5 | 	and	result1, #63
249c8     80 16 06 F6 | 	mov	arg03, #128
249cc     FD 16 42 F5 | 	or	arg03, result1
249d0     0A 17 42 FC | 	wrbyte	arg03, arg02
249d4     01 14 06 F1 | 	add	arg02, #1
249d8     00 FB 01 F6 | 	mov	result1, _var01
249dc     06 FA 45 F0 | 	shr	result1, #6
249e0     3F FA 05 F5 | 	and	result1, #63
249e4     80 16 06 F6 | 	mov	arg03, #128
249e8     FD 16 42 F5 | 	or	arg03, result1
249ec     0A 17 42 FC | 	wrbyte	arg03, arg02
249f0     01 14 06 F1 | 	add	arg02, #1
249f4     3F 00 06 F5 | 	and	_var01, #63
249f8     80 FA 05 F6 | 	mov	result1, #128
249fc     00 FB 41 F5 | 	or	result1, _var01
24a00     0A FB 41 FC | 	wrbyte	result1, arg02
24a04                 | ' 	chr = (hc | chr) + 0x10000;
24a04                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
24a04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
24a04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
24a04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
24a04                 | ' 	return 4;
24a04     04 FA 05 F6 | 	mov	result1, #4
24a08                 | _fatfs_cc_put_utf_ret
24a08     2D 00 64 FD | 	ret
24a0c                 | 
24a0c                 | _fatfs_cc_sync_window
24a0c     02 4A 05 F6 | 	mov	COUNT_, #2
24a10     A8 00 A0 FD | 	call	#pushregs_
24a14     09 1F 02 F6 | 	mov	local01, arg01
24a18     00 20 06 F6 | 	mov	local02, #0
24a1c     03 1E 06 F1 | 	add	local01, #3
24a20     0F FB C9 FA | 	rdbyte	result1, local01 wz
24a24     03 1E 86 F1 | 	sub	local01, #3
24a28     A4 00 90 AD |  if_e	jmp	#LR__3692
24a2c     01 1E 06 F1 | 	add	local01, #1
24a30     0F 13 C2 FA | 	rdbyte	arg01, local01
24a34     33 1E 06 F1 | 	add	local01, #51
24a38     0F 15 02 F6 | 	mov	arg02, local01
24a3c     04 1E 86 F1 | 	sub	local01, #4
24a40     0F 17 02 FB | 	rdlong	arg03, local01
24a44     30 1E 86 F1 | 	sub	local01, #48
24a48     01 18 06 F6 | 	mov	arg04, #1
24a4c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
24a50     00 FA 0D F2 | 	cmp	result1, #0 wz
24a54     74 00 90 5D |  if_ne	jmp	#LR__3690
24a58     03 1E 06 F1 | 	add	local01, #3
24a5c     0F 01 48 FC | 	wrbyte	#0, local01
24a60     2D 1E 06 F1 | 	add	local01, #45
24a64     0F FB 01 FB | 	rdlong	result1, local01
24a68     0C 1E 86 F1 | 	sub	local01, #12
24a6c     0F 19 02 FB | 	rdlong	arg04, local01
24a70     0C FB 81 F1 | 	sub	result1, arg04
24a74     08 1E 86 F1 | 	sub	local01, #8
24a78     0F 19 02 FB | 	rdlong	arg04, local01
24a7c     1C 1E 86 F1 | 	sub	local01, #28
24a80     0C FB 11 F2 | 	cmp	result1, arg04 wc
24a84     48 00 90 3D |  if_ae	jmp	#LR__3691
24a88     02 1E 06 F1 | 	add	local01, #2
24a8c     0F 19 C2 FA | 	rdbyte	arg04, local01
24a90     02 1E 86 F1 | 	sub	local01, #2
24a94     02 18 0E F2 | 	cmp	arg04, #2 wz
24a98     34 00 90 5D |  if_ne	jmp	#LR__3691
24a9c     01 1E 06 F1 | 	add	local01, #1
24aa0     0F 13 C2 FA | 	rdbyte	arg01, local01
24aa4     33 1E 06 F1 | 	add	local01, #51
24aa8     0F 15 02 F6 | 	mov	arg02, local01
24aac     04 1E 86 F1 | 	sub	local01, #4
24ab0     0F 17 02 FB | 	rdlong	arg03, local01
24ab4     14 1E 86 F1 | 	sub	local01, #20
24ab8     0F 1F 02 FB | 	rdlong	local01, local01
24abc     0F 17 02 F1 | 	add	arg03, local01
24ac0     01 18 06 F6 | 	mov	arg04, #1
24ac4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
24ac8     04 00 90 FD | 	jmp	#LR__3691
24acc                 | LR__3690
24acc     01 20 06 F6 | 	mov	local02, #1
24ad0                 | LR__3691
24ad0                 | LR__3692
24ad0                 | ' 			res = FR_DISK_ERR;
24ad0                 | ' 		}
24ad0                 | ' 	}
24ad0                 | ' 	return res;
24ad0     10 FB 01 F6 | 	mov	result1, local02
24ad4     A7 F0 03 F6 | 	mov	ptra, fp
24ad8     B2 00 A0 FD | 	call	#popregs_
24adc                 | _fatfs_cc_sync_window_ret
24adc     2D 00 64 FD | 	ret
24ae0                 | 
24ae0                 | _fatfs_cc_move_window
24ae0     03 4A 05 F6 | 	mov	COUNT_, #3
24ae4     A8 00 A0 FD | 	call	#pushregs_
24ae8     09 1F 02 F6 | 	mov	local01, arg01
24aec     0A 21 02 F6 | 	mov	local02, arg02
24af0     00 22 06 F6 | 	mov	local03, #0
24af4     30 1E 06 F1 | 	add	local01, #48
24af8     0F 19 02 FB | 	rdlong	arg04, local01
24afc     30 1E 86 F1 | 	sub	local01, #48
24b00     0C 21 0A F2 | 	cmp	local02, arg04 wz
24b04     40 00 90 AD |  if_e	jmp	#LR__3701
24b08     0F 13 02 F6 | 	mov	arg01, local01
24b0c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
24b10     FD 22 0A F6 | 	mov	local03, result1 wz
24b14     30 00 90 5D |  if_ne	jmp	#LR__3700
24b18     01 1E 06 F1 | 	add	local01, #1
24b1c     0F 13 C2 FA | 	rdbyte	arg01, local01
24b20     33 1E 06 F1 | 	add	local01, #51
24b24     0F 15 02 F6 | 	mov	arg02, local01
24b28     10 17 02 F6 | 	mov	arg03, local02
24b2c     01 18 06 F6 | 	mov	arg04, #1
24b30     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
24b34     00 FA 0D F2 | 	cmp	result1, #0 wz
24b38     01 20 66 56 |  if_ne	neg	local02, #1
24b3c     01 22 06 56 |  if_ne	mov	local03, #1
24b40     04 1E 86 F1 | 	sub	local01, #4
24b44     0F 21 62 FC | 	wrlong	local02, local01
24b48                 | LR__3700
24b48                 | LR__3701
24b48                 | ' 				sect = (LBA_t)0 - 1;
24b48                 | ' 				res = FR_DISK_ERR;
24b48                 | ' 			}
24b48                 | ' 			fs->winsect = sect;
24b48                 | ' 		}
24b48                 | ' 	}
24b48                 | ' 	return res;
24b48     11 FB 01 F6 | 	mov	result1, local03
24b4c     A7 F0 03 F6 | 	mov	ptra, fp
24b50     B2 00 A0 FD | 	call	#popregs_
24b54                 | _fatfs_cc_move_window_ret
24b54     2D 00 64 FD | 	ret
24b58                 | 
24b58                 | _fatfs_cc_sync_fs
24b58     02 4A 05 F6 | 	mov	COUNT_, #2
24b5c     A8 00 A0 FD | 	call	#pushregs_
24b60     09 1F 02 F6 | 	mov	local01, arg01
24b64     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
24b68     FD 20 0A F6 | 	mov	local02, result1 wz
24b6c     D8 00 90 5D |  if_ne	jmp	#LR__3711
24b70     0F 19 C2 FA | 	rdbyte	arg04, local01
24b74     03 18 0E F2 | 	cmp	arg04, #3 wz
24b78     04 1E 06 A1 |  if_e	add	local01, #4
24b7c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
24b80     04 1E 86 A1 |  if_e	sub	local01, #4
24b84     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
24b88     A0 00 90 5D |  if_ne	jmp	#LR__3710
24b8c     34 1E 06 F1 | 	add	local01, #52
24b90     0F 13 02 F6 | 	mov	arg01, local01
24b94     00 14 06 F6 | 	mov	arg02, #0
24b98     09 16 C6 F9 | 	decod	arg03, #9
24b9c     98 00 A0 FD | 	call	#\builtin_bytefill_
24ba0     0F 13 02 F6 | 	mov	arg01, local01
24ba4     FE 13 06 F1 | 	add	arg01, #510
24ba8     55 00 80 FF 
24bac     09 AB 58 FC | 	wrword	##43605, arg01
24bb0     A9 B0 A0 FF 
24bb4     0F A5 68 FC | 	wrlong	##1096897106, local01
24bb8     0F 13 02 F6 | 	mov	arg01, local01
24bbc     E4 13 06 F1 | 	add	arg01, #484
24bc0     B9 A0 B0 FF 
24bc4     09 E5 68 FC | 	wrlong	##1631679090, arg01
24bc8     0F 13 02 F6 | 	mov	arg01, local01
24bcc     E8 13 06 F1 | 	add	arg01, #488
24bd0     20 1E 86 F1 | 	sub	local01, #32
24bd4     0F 15 02 FB | 	rdlong	arg02, local01
24bd8     09 15 62 FC | 	wrlong	arg02, arg01
24bdc     20 1E 06 F1 | 	add	local01, #32
24be0     0F 13 02 F6 | 	mov	arg01, local01
24be4     EC 13 06 F1 | 	add	arg01, #492
24be8     24 1E 86 F1 | 	sub	local01, #36
24bec     0F 15 02 FB | 	rdlong	arg02, local01
24bf0     09 15 62 FC | 	wrlong	arg02, arg01
24bf4     10 1E 06 F1 | 	add	local01, #16
24bf8     0F 17 02 FB | 	rdlong	arg03, local01
24bfc     01 16 06 F1 | 	add	arg03, #1
24c00     10 1E 06 F1 | 	add	local01, #16
24c04     0F 17 62 FC | 	wrlong	arg03, local01
24c08     2F 1E 86 F1 | 	sub	local01, #47
24c0c     0F 13 C2 FA | 	rdbyte	arg01, local01
24c10     33 1E 06 F1 | 	add	local01, #51
24c14     0F 15 02 F6 | 	mov	arg02, local01
24c18     01 18 06 F6 | 	mov	arg04, #1
24c1c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
24c20     30 1E 86 F1 | 	sub	local01, #48
24c24     0F 01 48 FC | 	wrbyte	#0, local01
24c28     04 1E 86 F1 | 	sub	local01, #4
24c2c                 | LR__3710
24c2c     01 1E 06 F1 | 	add	local01, #1
24c30     0F 13 C2 FA | 	rdbyte	arg01, local01
24c34     00 14 06 F6 | 	mov	arg02, #0
24c38     00 16 06 F6 | 	mov	arg03, #0
24c3c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
24c40     00 FA 0D F2 | 	cmp	result1, #0 wz
24c44     01 20 06 56 |  if_ne	mov	local02, #1
24c48                 | LR__3711
24c48                 | ' 	}
24c48                 | ' 
24c48                 | ' 	return res;
24c48     10 FB 01 F6 | 	mov	result1, local02
24c4c     A7 F0 03 F6 | 	mov	ptra, fp
24c50     B2 00 A0 FD | 	call	#popregs_
24c54                 | _fatfs_cc_sync_fs_ret
24c54     2D 00 64 FD | 	ret
24c58                 | 
24c58                 | _fatfs_cc_clst2sect
24c58     02 14 86 F1 | 	sub	arg02, #2
24c5c     18 12 06 F1 | 	add	arg01, #24
24c60     09 01 02 FB | 	rdlong	_var01, arg01
24c64     18 12 86 F1 | 	sub	arg01, #24
24c68     02 00 86 F1 | 	sub	_var01, #2
24c6c     00 15 12 F2 | 	cmp	arg02, _var01 wc
24c70     00 FA 05 36 |  if_ae	mov	result1, #0
24c74     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
24c78     0A 12 06 F1 | 	add	arg01, #10
24c7c     09 01 E2 FA | 	rdword	_var01, arg01
24c80     0A 01 02 FD | 	qmul	_var01, arg02
24c84                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
24c84     22 12 06 F1 | 	add	arg01, #34
24c88     09 FB 01 FB | 	rdlong	result1, arg01
24c8c     18 00 62 FD | 	getqx	_var01
24c90     00 FB 01 F1 | 	add	result1, _var01
24c94                 | _fatfs_cc_clst2sect_ret
24c94     2D 00 64 FD | 	ret
24c98                 | 
24c98                 | _fatfs_cc_get_fat
24c98     07 4A 05 F6 | 	mov	COUNT_, #7
24c9c     A8 00 A0 FD | 	call	#pushregs_
24ca0     0A 1F 02 F6 | 	mov	local01, arg02
24ca4     09 21 02 FB | 	rdlong	local02, arg01
24ca8     02 1E 16 F2 | 	cmp	local01, #2 wc
24cac     14 00 90 CD |  if_b	jmp	#LR__3720
24cb0     18 20 06 F1 | 	add	local02, #24
24cb4     10 23 02 FB | 	rdlong	local03, local02
24cb8     18 20 86 F1 | 	sub	local02, #24
24cbc     11 1F 12 F2 | 	cmp	local01, local03 wc
24cc0     08 00 90 CD |  if_b	jmp	#LR__3721
24cc4                 | LR__3720
24cc4     01 24 06 F6 | 	mov	local04, #1
24cc8     60 01 90 FD | 	jmp	#LR__3728
24ccc                 | LR__3721
24ccc     01 24 66 F6 | 	neg	local04, #1
24cd0                 | ' 		val = 0xFFFFFFFF;
24cd0                 | ' 
24cd0                 | ' 		switch (fs->fs_type) {
24cd0     10 27 C2 FA | 	rdbyte	local05, local02
24cd4     01 26 86 F1 | 	sub	local05, #1
24cd8     03 26 26 F3 | 	fle	local05, #3
24cdc     30 26 62 FD | 	jmprel	local05
24ce0                 | LR__3722
24ce0     0C 00 90 FD | 	jmp	#LR__3723
24ce4     B8 00 90 FD | 	jmp	#LR__3724
24ce8     F8 00 90 FD | 	jmp	#LR__3725
24cec     38 01 90 FD | 	jmp	#LR__3726
24cf0                 | LR__3723
24cf0     0F 27 02 F6 | 	mov	local05, local01
24cf4     0F 13 02 F6 | 	mov	arg01, local01
24cf8     01 12 46 F0 | 	shr	arg01, #1
24cfc     09 27 02 F1 | 	add	local05, arg01
24d00     10 13 02 F6 | 	mov	arg01, local02
24d04     13 29 02 F6 | 	mov	local06, local05
24d08     09 28 46 F0 | 	shr	local06, #9
24d0c     24 20 06 F1 | 	add	local02, #36
24d10     10 15 02 FB | 	rdlong	arg02, local02
24d14     24 20 86 F1 | 	sub	local02, #36
24d18     14 15 02 F1 | 	add	arg02, local06
24d1c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
24d20     00 FA 0D F2 | 	cmp	result1, #0 wz
24d24     04 01 90 5D |  if_ne	jmp	#LR__3727
24d28     13 29 02 F6 | 	mov	local06, local05
24d2c     FF 29 06 F5 | 	and	local06, #511
24d30     34 20 06 F1 | 	add	local02, #52
24d34     10 29 02 F1 | 	add	local06, local02
24d38     14 2B C2 FA | 	rdbyte	local07, local06
24d3c     34 20 86 F1 | 	sub	local02, #52
24d40     10 13 02 F6 | 	mov	arg01, local02
24d44     01 26 06 F1 | 	add	local05, #1
24d48     13 29 02 F6 | 	mov	local06, local05
24d4c     09 28 46 F0 | 	shr	local06, #9
24d50     24 20 06 F1 | 	add	local02, #36
24d54     10 15 02 FB | 	rdlong	arg02, local02
24d58     24 20 86 F1 | 	sub	local02, #36
24d5c     14 15 02 F1 | 	add	arg02, local06
24d60     7C FD BF FD | 	call	#_fatfs_cc_move_window
24d64     00 FA 0D F2 | 	cmp	result1, #0 wz
24d68     C0 00 90 5D |  if_ne	jmp	#LR__3727
24d6c     FF 27 06 F5 | 	and	local05, #511
24d70     34 20 06 F1 | 	add	local02, #52
24d74     10 27 02 F1 | 	add	local05, local02
24d78     13 29 C2 FA | 	rdbyte	local06, local05
24d7c     08 28 66 F0 | 	shl	local06, #8
24d80     14 2B 42 F5 | 	or	local07, local06
24d84     01 1E CE F7 | 	test	local01, #1 wz
24d88     04 2A 46 50 |  if_ne	shr	local07, #4
24d8c     15 23 02 56 |  if_ne	mov	local03, local07
24d90     0B 2A 46 A7 |  if_e	zerox	local07, #11
24d94     15 23 02 A6 |  if_e	mov	local03, local07
24d98     11 25 02 F6 | 	mov	local04, local03
24d9c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
24d9c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
24d9c                 | ' 			break;
24d9c     8C 00 90 FD | 	jmp	#LR__3727
24da0                 | LR__3724
24da0     10 13 02 F6 | 	mov	arg01, local02
24da4     0F 29 02 F6 | 	mov	local06, local01
24da8     08 28 46 F0 | 	shr	local06, #8
24dac     24 20 06 F1 | 	add	local02, #36
24db0     10 15 02 FB | 	rdlong	arg02, local02
24db4     24 20 86 F1 | 	sub	local02, #36
24db8     14 15 02 F1 | 	add	arg02, local06
24dbc     20 FD BF FD | 	call	#_fatfs_cc_move_window
24dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
24dc4     64 00 90 5D |  if_ne	jmp	#LR__3727
24dc8     34 20 06 F1 | 	add	local02, #52
24dcc     01 1E 66 F0 | 	shl	local01, #1
24dd0     FF 1F 06 F5 | 	and	local01, #511
24dd4     0F 21 02 F1 | 	add	local02, local01
24dd8                 | ' {
24dd8                 | ' 
24dd8                 | ' 	return *((WORD*)ptr);
24dd8     10 FB E1 FA | 	rdword	result1, local02
24ddc     FD 24 32 F9 | 	getword	local04, result1, #0
24de0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
24de0                 | ' 			break;
24de0     48 00 90 FD | 	jmp	#LR__3727
24de4                 | LR__3725
24de4     10 13 02 F6 | 	mov	arg01, local02
24de8     0F 29 02 F6 | 	mov	local06, local01
24dec     07 28 46 F0 | 	shr	local06, #7
24df0     24 20 06 F1 | 	add	local02, #36
24df4     10 15 02 FB | 	rdlong	arg02, local02
24df8     24 20 86 F1 | 	sub	local02, #36
24dfc     14 15 02 F1 | 	add	arg02, local06
24e00     DC FC BF FD | 	call	#_fatfs_cc_move_window
24e04     00 FA 0D F2 | 	cmp	result1, #0 wz
24e08     20 00 90 5D |  if_ne	jmp	#LR__3727
24e0c     34 20 06 F1 | 	add	local02, #52
24e10     02 1E 66 F0 | 	shl	local01, #2
24e14     FF 1F 06 F5 | 	and	local01, #511
24e18     0F 21 02 F1 | 	add	local02, local01
24e1c                 | ' {
24e1c                 | ' 
24e1c                 | ' 	return *((DWORD*)ptr);
24e1c     10 25 02 FB | 	rdlong	local04, local02
24e20     7C 24 06 F4 | 	bitl	local04, #124
24e24                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
24e24                 | ' 			break;
24e24     04 00 90 FD | 	jmp	#LR__3727
24e28                 | LR__3726
24e28     01 24 06 F6 | 	mov	local04, #1
24e2c                 | LR__3727
24e2c                 | LR__3728
24e2c                 | ' 			val = 1;
24e2c                 | ' 		}
24e2c                 | ' 	}
24e2c                 | ' 
24e2c                 | ' 	return val;
24e2c     12 FB 01 F6 | 	mov	result1, local04
24e30     A7 F0 03 F6 | 	mov	ptra, fp
24e34     B2 00 A0 FD | 	call	#popregs_
24e38                 | _fatfs_cc_get_fat_ret
24e38     2D 00 64 FD | 	ret
24e3c                 | 
24e3c                 | _fatfs_cc_put_fat
24e3c     08 4A 05 F6 | 	mov	COUNT_, #8
24e40     A8 00 A0 FD | 	call	#pushregs_
24e44     09 1F 02 F6 | 	mov	local01, arg01
24e48     0A 21 02 F6 | 	mov	local02, arg02
24e4c     0B 23 02 F6 | 	mov	local03, arg03
24e50     02 24 06 F6 | 	mov	local04, #2
24e54     02 20 16 F2 | 	cmp	local02, #2 wc
24e58     E0 01 90 CD |  if_b	jmp	#LR__3737
24e5c     18 1E 06 F1 | 	add	local01, #24
24e60     0F 27 02 FB | 	rdlong	local05, local01
24e64     18 1E 86 F1 | 	sub	local01, #24
24e68     13 21 12 F2 | 	cmp	local02, local05 wc
24e6c     CC 01 90 3D |  if_ae	jmp	#LR__3737
24e70                 | ' 		switch (fs->fs_type) {
24e70     0F 29 C2 FA | 	rdbyte	local06, local01
24e74     01 28 86 F1 | 	sub	local06, #1
24e78     03 28 26 F3 | 	fle	local06, #3
24e7c     30 28 62 FD | 	jmprel	local06
24e80                 | LR__3730
24e80     0C 00 90 FD | 	jmp	#LR__3731
24e84     F8 00 90 FD | 	jmp	#LR__3734
24e88     40 01 90 FD | 	jmp	#LR__3735
24e8c     AC 01 90 FD | 	jmp	#LR__3736
24e90                 | LR__3731
24e90     10 2B 02 F6 | 	mov	local07, local02
24e94     10 27 02 F6 | 	mov	local05, local02
24e98     01 26 46 F0 | 	shr	local05, #1
24e9c     13 2B 02 F1 | 	add	local07, local05
24ea0     0F 13 02 F6 | 	mov	arg01, local01
24ea4     15 29 02 F6 | 	mov	local06, local07
24ea8     09 28 46 F0 | 	shr	local06, #9
24eac     24 1E 06 F1 | 	add	local01, #36
24eb0     0F 15 02 FB | 	rdlong	arg02, local01
24eb4     24 1E 86 F1 | 	sub	local01, #36
24eb8     14 15 02 F1 | 	add	arg02, local06
24ebc     20 FC BF FD | 	call	#_fatfs_cc_move_window
24ec0     FD 24 0A F6 | 	mov	local04, result1 wz
24ec4     74 01 90 5D |  if_ne	jmp	#LR__3736
24ec8     34 1E 06 F1 | 	add	local01, #52
24ecc     0F 2D 02 F6 | 	mov	local08, local01
24ed0     15 27 02 F6 | 	mov	local05, local07
24ed4     FF 27 06 F5 | 	and	local05, #511
24ed8     13 2D 02 F1 | 	add	local08, local05
24edc     01 20 CE F7 | 	test	local02, #1 wz
24ee0     34 1E 86 F1 | 	sub	local01, #52
24ee4     01 2A 06 F1 | 	add	local07, #1
24ee8     18 00 90 AD |  if_e	jmp	#LR__3732
24eec     16 27 C2 FA | 	rdbyte	local05, local08
24ef0     13 27 42 F8 | 	getnib	local05, local05, #0
24ef4     11 29 E2 F8 | 	getbyte	local06, local03, #0
24ef8     04 28 66 F0 | 	shl	local06, #4
24efc     14 27 42 F5 | 	or	local05, local06
24f00     04 00 90 FD | 	jmp	#LR__3733
24f04                 | LR__3732
24f04     11 27 02 F6 | 	mov	local05, local03
24f08                 | LR__3733
24f08     16 27 42 FC | 	wrbyte	local05, local08
24f0c     03 1E 06 F1 | 	add	local01, #3
24f10     0F 03 48 FC | 	wrbyte	#1, local01
24f14     03 1E 86 F1 | 	sub	local01, #3
24f18     0F 13 02 F6 | 	mov	arg01, local01
24f1c     15 2D 02 F6 | 	mov	local08, local07
24f20     09 2C 46 F0 | 	shr	local08, #9
24f24     24 1E 06 F1 | 	add	local01, #36
24f28     0F 15 02 FB | 	rdlong	arg02, local01
24f2c     24 1E 86 F1 | 	sub	local01, #36
24f30     16 15 02 F1 | 	add	arg02, local08
24f34     A8 FB BF FD | 	call	#_fatfs_cc_move_window
24f38     FD 24 0A F6 | 	mov	local04, result1 wz
24f3c     FC 00 90 5D |  if_ne	jmp	#LR__3736
24f40     34 1E 06 F1 | 	add	local01, #52
24f44     0F 2D 02 F6 | 	mov	local08, local01
24f48     FF 2B 06 F5 | 	and	local07, #511
24f4c     15 2D 02 F1 | 	add	local08, local07
24f50     01 20 CE F7 | 	test	local02, #1 wz
24f54     04 22 46 50 |  if_ne	shr	local03, #4
24f58     11 27 02 56 |  if_ne	mov	local05, local03
24f5c     16 27 C2 AA |  if_e	rdbyte	local05, local08
24f60     F0 26 06 A5 |  if_e	and	local05, #240
24f64     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
24f68     11 23 42 A8 |  if_e	getnib	local03, local03, #0
24f6c     11 27 42 A5 |  if_e	or	local05, local03
24f70     16 27 42 FC | 	wrbyte	local05, local08
24f74     31 1E 86 F1 | 	sub	local01, #49
24f78     0F 03 48 FC | 	wrbyte	#1, local01
24f7c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
24f7c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24f7c                 | ' 			fs->wflag = 1;
24f7c                 | ' 			break;
24f7c     BC 00 90 FD | 	jmp	#LR__3736
24f80                 | LR__3734
24f80     0F 13 02 F6 | 	mov	arg01, local01
24f84     10 2D 02 F6 | 	mov	local08, local02
24f88     08 2C 46 F0 | 	shr	local08, #8
24f8c     24 1E 06 F1 | 	add	local01, #36
24f90     0F 15 02 FB | 	rdlong	arg02, local01
24f94     24 1E 86 F1 | 	sub	local01, #36
24f98     16 15 02 F1 | 	add	arg02, local08
24f9c     40 FB BF FD | 	call	#_fatfs_cc_move_window
24fa0     FD 24 0A F6 | 	mov	local04, result1 wz
24fa4     94 00 90 5D |  if_ne	jmp	#LR__3736
24fa8     34 1E 06 F1 | 	add	local01, #52
24fac     0F 13 02 F6 | 	mov	arg01, local01
24fb0     01 20 66 F0 | 	shl	local02, #1
24fb4     FF 21 06 F5 | 	and	local02, #511
24fb8     10 13 02 F1 | 	add	arg01, local02
24fbc     09 23 52 FC | 	wrword	local03, arg01
24fc0     31 1E 86 F1 | 	sub	local01, #49
24fc4     0F 03 48 FC | 	wrbyte	#1, local01
24fc8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
24fc8                 | ' 			fs->wflag = 1;
24fc8                 | ' 			break;
24fc8     70 00 90 FD | 	jmp	#LR__3736
24fcc                 | LR__3735
24fcc     0F 13 02 F6 | 	mov	arg01, local01
24fd0     10 2D 02 F6 | 	mov	local08, local02
24fd4     07 2C 46 F0 | 	shr	local08, #7
24fd8     24 1E 06 F1 | 	add	local01, #36
24fdc     0F 15 02 FB | 	rdlong	arg02, local01
24fe0     24 1E 86 F1 | 	sub	local01, #36
24fe4     16 15 02 F1 | 	add	arg02, local08
24fe8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
24fec     FD 24 0A F6 | 	mov	local04, result1 wz
24ff0     48 00 90 5D |  if_ne	jmp	#LR__3736
24ff4     7C 22 06 F4 | 	bitl	local03, #124
24ff8     34 1E 06 F1 | 	add	local01, #52
24ffc     10 2D 02 F6 | 	mov	local08, local02
25000     02 2C 66 F0 | 	shl	local08, #2
25004     FF 2D 06 F5 | 	and	local08, #511
25008     0F 13 02 F6 | 	mov	arg01, local01
2500c     16 13 02 F1 | 	add	arg01, local08
25010                 | ' {
25010                 | ' 
25010                 | ' 	return *((DWORD*)ptr);
25010     09 2D 02 FB | 	rdlong	local08, arg01
25014     00 00 78 FF 
25018     00 2C 06 F5 | 	and	local08, ##-268435456
2501c     16 23 42 F5 | 	or	local03, local08
25020     0F 13 02 F6 | 	mov	arg01, local01
25024     02 20 66 F0 | 	shl	local02, #2
25028     FF 21 06 F5 | 	and	local02, #511
2502c     10 13 02 F1 | 	add	arg01, local02
25030     09 23 62 FC | 	wrlong	local03, arg01
25034     31 1E 86 F1 | 	sub	local01, #49
25038     0F 03 48 FC | 	wrbyte	#1, local01
2503c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2503c                 | ' 			}
2503c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2503c                 | ' 			fs->wflag = 1;
2503c                 | ' 			break;
2503c                 | LR__3736
2503c                 | LR__3737
2503c                 | ' 		}
2503c                 | ' 	}
2503c                 | ' 	return res;
2503c     12 FB 01 F6 | 	mov	result1, local04
25040     A7 F0 03 F6 | 	mov	ptra, fp
25044     B2 00 A0 FD | 	call	#popregs_
25048                 | _fatfs_cc_put_fat_ret
25048     2D 00 64 FD | 	ret
2504c                 | 
2504c                 | _fatfs_cc_remove_chain
2504c     05 4A 05 F6 | 	mov	COUNT_, #5
25050     A8 00 A0 FD | 	call	#pushregs_
25054     09 1F 02 F6 | 	mov	local01, arg01
25058     0A 21 02 F6 | 	mov	local02, arg02
2505c     0B 23 02 F6 | 	mov	local03, arg03
25060     0F 25 02 FB | 	rdlong	local04, local01
25064     02 20 16 F2 | 	cmp	local02, #2 wc
25068     14 00 90 CD |  if_b	jmp	#LR__3740
2506c     18 24 06 F1 | 	add	local04, #24
25070     12 FB 01 FB | 	rdlong	result1, local04
25074     18 24 86 F1 | 	sub	local04, #24
25078     FD 20 12 F2 | 	cmp	local02, result1 wc
2507c     08 00 90 CD |  if_b	jmp	#LR__3741
25080                 | LR__3740
25080     02 FA 05 F6 | 	mov	result1, #2
25084     CC 00 90 FD | 	jmp	#LR__3746
25088                 | LR__3741
25088     00 22 0E F2 | 	cmp	local03, #0 wz
2508c     18 00 90 AD |  if_e	jmp	#LR__3742
25090     11 15 02 F6 | 	mov	arg02, local03
25094     12 13 02 F6 | 	mov	arg01, local04
25098     01 16 66 F6 | 	neg	arg03, #1
2509c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
250a0     00 FA 0D F2 | 	cmp	result1, #0 wz
250a4     AC 00 90 5D |  if_ne	jmp	#LR__3746
250a8                 | LR__3742
250a8                 | ' 	}
250a8                 | ' 
250a8                 | ' 
250a8                 | ' 	do {
250a8                 | LR__3743
250a8     10 15 02 F6 | 	mov	arg02, local02
250ac     0F 13 02 F6 | 	mov	arg01, local01
250b0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
250b4     FD 26 0A F6 | 	mov	local05, result1 wz
250b8     94 00 90 AD |  if_e	jmp	#LR__3745
250bc     01 26 0E F2 | 	cmp	local05, #1 wz
250c0     02 FA 05 A6 |  if_e	mov	result1, #2
250c4     8C 00 90 AD |  if_e	jmp	#LR__3746
250c8     FF FF 7F FF 
250cc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
250d0     01 FA 05 A6 |  if_e	mov	result1, #1
250d4     7C 00 90 AD |  if_e	jmp	#LR__3746
250d8     10 15 02 F6 | 	mov	arg02, local02
250dc     12 13 02 F6 | 	mov	arg01, local04
250e0     00 16 06 F6 | 	mov	arg03, #0
250e4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
250e8     FD 22 0A F6 | 	mov	local03, result1 wz
250ec     11 FB 01 56 |  if_ne	mov	result1, local03
250f0     60 00 90 5D |  if_ne	jmp	#LR__3746
250f4     18 24 06 F1 | 	add	local04, #24
250f8     12 23 02 FB | 	rdlong	local03, local04
250fc     02 22 86 F1 | 	sub	local03, #2
25100     04 24 86 F1 | 	sub	local04, #4
25104     12 21 02 FB | 	rdlong	local02, local04
25108     14 24 86 F1 | 	sub	local04, #20
2510c     11 21 12 F2 | 	cmp	local02, local03 wc
25110     24 00 90 3D |  if_ae	jmp	#LR__3744
25114     14 24 06 F1 | 	add	local04, #20
25118     12 23 02 FB | 	rdlong	local03, local04
2511c     01 22 06 F1 | 	add	local03, #1
25120     12 23 62 FC | 	wrlong	local03, local04
25124     10 24 86 F1 | 	sub	local04, #16
25128     12 23 C2 FA | 	rdbyte	local03, local04
2512c     01 22 46 F5 | 	or	local03, #1
25130     12 23 42 FC | 	wrbyte	local03, local04
25134     04 24 86 F1 | 	sub	local04, #4
25138                 | LR__3744
25138     13 21 02 F6 | 	mov	local02, local05
2513c     18 24 06 F1 | 	add	local04, #24
25140     12 27 02 FB | 	rdlong	local05, local04
25144     18 24 86 F1 | 	sub	local04, #24
25148     13 21 12 F2 | 	cmp	local02, local05 wc
2514c     58 FF 9F CD |  if_b	jmp	#LR__3743
25150                 | LR__3745
25150                 | ' #line 1500 "ff.c"
25150                 | ' 	return FR_OK;
25150     00 FA 05 F6 | 	mov	result1, #0
25154                 | LR__3746
25154     A7 F0 03 F6 | 	mov	ptra, fp
25158     B2 00 A0 FD | 	call	#popregs_
2515c                 | _fatfs_cc_remove_chain_ret
2515c     2D 00 64 FD | 	ret
25160                 | 
25160                 | _fatfs_cc_create_chain
25160     09 4A 05 F6 | 	mov	COUNT_, #9
25164     A8 00 A0 FD | 	call	#pushregs_
25168     09 1F 02 F6 | 	mov	local01, arg01
2516c     0A 21 0A F6 | 	mov	local02, arg02 wz
25170     0F 23 02 FB | 	rdlong	local03, local01
25174     28 00 90 5D |  if_ne	jmp	#LR__3750
25178     10 22 06 F1 | 	add	local03, #16
2517c     11 25 0A FB | 	rdlong	local04, local03 wz
25180     10 22 86 F1 | 	sub	local03, #16
25184     18 22 06 51 |  if_ne	add	local03, #24
25188     11 27 02 5B |  if_ne	rdlong	local05, local03
2518c     18 22 86 51 |  if_ne	sub	local03, #24
25190     13 25 12 52 |  if_ne	cmp	local04, local05 wc
25194     50 00 90 4D |  if_c_and_nz	jmp	#LR__3751
25198     01 24 06 F6 | 	mov	local04, #1
2519c     48 00 90 FD | 	jmp	#LR__3751
251a0                 | LR__3750
251a0     10 15 02 F6 | 	mov	arg02, local02
251a4     0F 13 02 F6 | 	mov	arg01, local01
251a8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
251ac     FD 24 02 F6 | 	mov	local04, result1
251b0     02 24 16 F2 | 	cmp	local04, #2 wc
251b4     01 FA 05 C6 |  if_b	mov	result1, #1
251b8     BC 01 90 CD |  if_b	jmp	#LR__3761
251bc     FF FF 7F FF 
251c0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
251c4     12 FB 01 A6 |  if_e	mov	result1, local04
251c8     AC 01 90 AD |  if_e	jmp	#LR__3761
251cc     18 22 06 F1 | 	add	local03, #24
251d0     11 27 02 FB | 	rdlong	local05, local03
251d4     18 22 86 F1 | 	sub	local03, #24
251d8     13 25 12 F2 | 	cmp	local04, local05 wc
251dc     12 FB 01 C6 |  if_b	mov	result1, local04
251e0     94 01 90 CD |  if_b	jmp	#LR__3761
251e4     10 25 02 F6 | 	mov	local04, local02
251e8                 | LR__3751
251e8     14 22 06 F1 | 	add	local03, #20
251ec     11 27 0A FB | 	rdlong	local05, local03 wz
251f0     14 22 86 F1 | 	sub	local03, #20
251f4     00 FA 05 A6 |  if_e	mov	result1, #0
251f8     7C 01 90 AD |  if_e	jmp	#LR__3761
251fc     00 28 06 F6 | 	mov	local06, #0
25200     10 25 0A F2 | 	cmp	local04, local02 wz
25204     74 00 90 5D |  if_ne	jmp	#LR__3754
25208     12 29 02 F6 | 	mov	local06, local04
2520c     01 28 06 F1 | 	add	local06, #1
25210     18 22 06 F1 | 	add	local03, #24
25214     11 27 02 FB | 	rdlong	local05, local03
25218     18 22 86 F1 | 	sub	local03, #24
2521c     13 29 12 F2 | 	cmp	local06, local05 wc
25220     02 28 06 36 |  if_ae	mov	local06, #2
25224     14 15 02 F6 | 	mov	arg02, local06
25228     0F 13 02 F6 | 	mov	arg01, local01
2522c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
25230     FD 26 02 F6 | 	mov	local05, result1
25234     01 26 0E F2 | 	cmp	local05, #1 wz
25238     FF FF 7F 5F 
2523c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
25240     13 FB 01 A6 |  if_e	mov	result1, local05
25244     30 01 90 AD |  if_e	jmp	#LR__3761
25248     00 26 0E F2 | 	cmp	local05, #0 wz
2524c     2C 00 90 AD |  if_e	jmp	#LR__3753
25250     10 22 06 F1 | 	add	local03, #16
25254     11 2B 02 FB | 	rdlong	local07, local03
25258     10 22 86 F1 | 	sub	local03, #16
2525c     02 2A 16 F2 | 	cmp	local07, #2 wc
25260     14 00 90 CD |  if_b	jmp	#LR__3752
25264     18 22 06 F1 | 	add	local03, #24
25268     11 27 02 FB | 	rdlong	local05, local03
2526c     18 22 86 F1 | 	sub	local03, #24
25270     13 2B 12 F2 | 	cmp	local07, local05 wc
25274     15 25 02 C6 |  if_b	mov	local04, local07
25278                 | LR__3752
25278     00 28 06 F6 | 	mov	local06, #0
2527c                 | LR__3753
2527c                 | LR__3754
2527c     00 28 0E F2 | 	cmp	local06, #0 wz
25280     60 00 90 5D |  if_ne	jmp	#LR__3757
25284     12 29 02 F6 | 	mov	local06, local04
25288                 | ' 			ncl = scl;
25288                 | ' 			for (;;) {
25288                 | LR__3755
25288     01 28 06 F1 | 	add	local06, #1
2528c     18 22 06 F1 | 	add	local03, #24
25290     11 27 02 FB | 	rdlong	local05, local03
25294     18 22 86 F1 | 	sub	local03, #24
25298     13 29 12 F2 | 	cmp	local06, local05 wc
2529c     02 28 06 36 |  if_ae	mov	local06, #2
252a0     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
252a4     00 FA 05 16 |  if_a	mov	result1, #0
252a8     CC 00 90 1D |  if_a	jmp	#LR__3761
252ac     14 15 02 F6 | 	mov	arg02, local06
252b0     0F 13 02 F6 | 	mov	arg01, local01
252b4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
252b8     FD 2A 0A F6 | 	mov	local07, result1 wz
252bc     24 00 90 AD |  if_e	jmp	#LR__3756
252c0     01 2A 0E F2 | 	cmp	local07, #1 wz
252c4     FF FF 7F 5F 
252c8     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
252cc     15 FB 01 A6 |  if_e	mov	result1, local07
252d0     A4 00 90 AD |  if_e	jmp	#LR__3761
252d4     12 29 0A F2 | 	cmp	local06, local04 wz
252d8     00 FA 05 A6 |  if_e	mov	result1, #0
252dc     98 00 90 AD |  if_e	jmp	#LR__3761
252e0     A4 FF 9F FD | 	jmp	#LR__3755
252e4                 | LR__3756
252e4                 | LR__3757
252e4     11 13 02 F6 | 	mov	arg01, local03
252e8     14 15 02 F6 | 	mov	arg02, local06
252ec     01 16 66 F6 | 	neg	arg03, #1
252f0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
252f4     FD 2C 0A F6 | 	mov	local08, result1 wz
252f8     1C 00 90 5D |  if_ne	jmp	#LR__3758
252fc     00 20 0E F2 | 	cmp	local02, #0 wz
25300     14 00 90 AD |  if_e	jmp	#LR__3758
25304     11 13 02 F6 | 	mov	arg01, local03
25308     10 15 02 F6 | 	mov	arg02, local02
2530c     14 17 02 F6 | 	mov	arg03, local06
25310     28 FB BF FD | 	call	#_fatfs_cc_put_fat
25314     FD 2C 02 F6 | 	mov	local08, result1
25318                 | LR__3758
25318     00 2C 0E F2 | 	cmp	local08, #0 wz
2531c     4C 00 90 5D |  if_ne	jmp	#LR__3759
25320     10 22 06 F1 | 	add	local03, #16
25324     11 29 62 FC | 	wrlong	local06, local03
25328     08 22 06 F1 | 	add	local03, #8
2532c     11 27 02 FB | 	rdlong	local05, local03
25330     02 26 86 F1 | 	sub	local05, #2
25334     04 22 86 F1 | 	sub	local03, #4
25338     11 2F 02 FB | 	rdlong	local09, local03
2533c     14 22 86 F1 | 	sub	local03, #20
25340     13 2F 1A F2 | 	cmp	local09, local05 wcz
25344     14 22 06 E1 |  if_be	add	local03, #20
25348     11 2F 02 EB |  if_be	rdlong	local09, local03
2534c     01 2E 86 E1 |  if_be	sub	local09, #1
25350     11 2F 62 EC |  if_be	wrlong	local09, local03
25354     14 22 86 E1 |  if_be	sub	local03, #20
25358     04 22 06 F1 | 	add	local03, #4
2535c     11 27 C2 FA | 	rdbyte	local05, local03
25360     01 26 46 F5 | 	or	local05, #1
25364     11 27 42 FC | 	wrbyte	local05, local03
25368     08 00 90 FD | 	jmp	#LR__3760
2536c                 | LR__3759
2536c     01 2C 0E F2 | 	cmp	local08, #1 wz
25370     01 28 C6 F6 | 	negz	local06, #1
25374                 | LR__3760
25374                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
25374                 | ' 	}
25374                 | ' 
25374                 | ' 	return ncl;
25374     14 FB 01 F6 | 	mov	result1, local06
25378                 | LR__3761
25378     A7 F0 03 F6 | 	mov	ptra, fp
2537c     B2 00 A0 FD | 	call	#popregs_
25380                 | _fatfs_cc_create_chain_ret
25380     2D 00 64 FD | 	ret
25384                 | 
25384                 | _fatfs_cc_dir_clear
25384     06 4A 05 F6 | 	mov	COUNT_, #6
25388     A8 00 A0 FD | 	call	#pushregs_
2538c     09 1F 02 F6 | 	mov	local01, arg01
25390     0A 21 02 F6 | 	mov	local02, arg02
25394     0F 13 02 F6 | 	mov	arg01, local01
25398     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2539c     00 FA 0D F2 | 	cmp	result1, #0 wz
253a0     01 FA 05 56 |  if_ne	mov	result1, #1
253a4     90 00 90 5D |  if_ne	jmp	#LR__3772
253a8     0F 13 02 F6 | 	mov	arg01, local01
253ac     10 15 02 F6 | 	mov	arg02, local02
253b0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
253b4     FD 22 02 F6 | 	mov	local03, result1
253b8     30 1E 06 F1 | 	add	local01, #48
253bc     0F 23 62 FC | 	wrlong	local03, local01
253c0     04 1E 06 F1 | 	add	local01, #4
253c4     0F 13 02 F6 | 	mov	arg01, local01
253c8     00 14 06 F6 | 	mov	arg02, #0
253cc     09 16 C6 F9 | 	decod	arg03, #9
253d0     98 00 A0 FD | 	call	#\builtin_bytefill_
253d4     0F 25 02 F6 | 	mov	local04, local01
253d8                 | ' #line 1667 "ff.c"
253d8                 | ' 	{
253d8                 | ' 		ibuf = fs->win; szb = 1;
253d8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
253d8     00 26 06 F6 | 	mov	local05, #0
253dc     34 1E 86 F1 | 	sub	local01, #52
253e0                 | LR__3770
253e0     0A 1E 06 F1 | 	add	local01, #10
253e4     0F 29 E2 FA | 	rdword	local06, local01
253e8     0A 1E 86 F1 | 	sub	local01, #10
253ec     14 27 12 F2 | 	cmp	local05, local06 wc
253f0     2C 00 90 3D |  if_ae	jmp	#LR__3771
253f4     01 1E 06 F1 | 	add	local01, #1
253f8     0F 13 C2 FA | 	rdbyte	arg01, local01
253fc     01 1E 86 F1 | 	sub	local01, #1
25400     12 15 02 F6 | 	mov	arg02, local04
25404     11 17 02 F6 | 	mov	arg03, local03
25408     13 17 02 F1 | 	add	arg03, local05
2540c     01 18 06 F6 | 	mov	arg04, #1
25410     9C EF BF FD | 	call	#_fatfs_cc_disk_write
25414     00 FA 0D F2 | 	cmp	result1, #0 wz
25418     01 26 06 A1 |  if_e	add	local05, #1
2541c     C0 FF 9F AD |  if_e	jmp	#LR__3770
25420                 | LR__3771
25420                 | ' 	}
25420                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
25420     0A 1E 06 F1 | 	add	local01, #10
25424     0F 25 E2 FA | 	rdword	local04, local01
25428     12 27 0A F2 | 	cmp	local05, local04 wz
2542c     00 28 06 A6 |  if_e	mov	local06, #0
25430     01 28 06 56 |  if_ne	mov	local06, #1
25434     14 FB 01 F6 | 	mov	result1, local06
25438                 | LR__3772
25438     A7 F0 03 F6 | 	mov	ptra, fp
2543c     B2 00 A0 FD | 	call	#popregs_
25440                 | _fatfs_cc_dir_clear_ret
25440     2D 00 64 FD | 	ret
25444                 | 
25444                 | _fatfs_cc_dir_sdi
25444     06 4A 05 F6 | 	mov	COUNT_, #6
25448     A8 00 A0 FD | 	call	#pushregs_
2544c     09 1F 02 F6 | 	mov	local01, arg01
25450     0A 21 02 F6 | 	mov	local02, arg02
25454     0F 23 02 FB | 	rdlong	local03, local01
25458     00 10 00 FF 
2545c     00 20 16 F2 | 	cmp	local02, ##2097152 wc
25460     1F 20 CE C7 |  if_b	test	local02, #31 wz
25464                 | ' 		return FR_INT_ERR;
25464     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
25468     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3786
2546c     10 1E 06 F1 | 	add	local01, #16
25470     0F 21 62 FC | 	wrlong	local02, local01
25474     08 1E 86 F1 | 	sub	local01, #8
25478     0F 25 0A FB | 	rdlong	local04, local01 wz
2547c     08 1E 86 F1 | 	sub	local01, #8
25480     11 27 C2 AA |  if_e	rdbyte	local05, local03
25484     03 26 16 A2 |  if_e	cmp	local05, #3 wc
25488     28 22 06 21 |  if_nc_and_z	add	local03, #40
2548c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
25490     28 22 86 21 |  if_nc_and_z	sub	local03, #40
25494     00 24 0E F2 | 	cmp	local04, #0 wz
25498     3C 00 90 5D |  if_ne	jmp	#LR__3780
2549c     10 27 02 F6 | 	mov	local05, local02
254a0     05 26 46 F0 | 	shr	local05, #5
254a4     08 22 06 F1 | 	add	local03, #8
254a8     11 15 E2 FA | 	rdword	arg02, local03
254ac     08 22 86 F1 | 	sub	local03, #8
254b0     0A 27 12 F2 | 	cmp	local05, arg02 wc
254b4     02 FA 05 36 |  if_ae	mov	result1, #2
254b8     E4 00 90 3D |  if_ae	jmp	#LR__3786
254bc     28 22 06 F1 | 	add	local03, #40
254c0     11 27 02 FB | 	rdlong	local05, local03
254c4     28 22 86 F1 | 	sub	local03, #40
254c8     18 1E 06 F1 | 	add	local01, #24
254cc     0F 27 62 FC | 	wrlong	local05, local01
254d0     18 1E 86 F1 | 	sub	local01, #24
254d4     7C 00 90 FD | 	jmp	#LR__3785
254d8                 | LR__3780
254d8     0A 22 06 F1 | 	add	local03, #10
254dc     11 29 E2 FA | 	rdword	local06, local03
254e0     0A 22 86 F1 | 	sub	local03, #10
254e4     09 28 66 F0 | 	shl	local06, #9
254e8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
254e8                 | ' 		while (ofs >= csz) {
254e8                 | LR__3781
254e8     14 21 12 F2 | 	cmp	local02, local06 wc
254ec     4C 00 90 CD |  if_b	jmp	#LR__3784
254f0     0F 13 02 F6 | 	mov	arg01, local01
254f4     12 15 02 F6 | 	mov	arg02, local04
254f8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
254fc     FD 24 02 F6 | 	mov	local04, result1
25500     FF FF 7F FF 
25504     FF 25 0E F2 | 	cmp	local04, ##-1 wz
25508     01 FA 05 A6 |  if_e	mov	result1, #1
2550c     90 00 90 AD |  if_e	jmp	#LR__3786
25510     02 24 16 F2 | 	cmp	local04, #2 wc
25514     14 00 90 CD |  if_b	jmp	#LR__3782
25518     18 22 06 F1 | 	add	local03, #24
2551c     11 27 02 FB | 	rdlong	local05, local03
25520     18 22 86 F1 | 	sub	local03, #24
25524     13 25 12 F2 | 	cmp	local04, local05 wc
25528     08 00 90 CD |  if_b	jmp	#LR__3783
2552c                 | LR__3782
2552c     02 FA 05 F6 | 	mov	result1, #2
25530     6C 00 90 FD | 	jmp	#LR__3786
25534                 | LR__3783
25534     14 21 82 F1 | 	sub	local02, local06
25538     AC FF 9F FD | 	jmp	#LR__3781
2553c                 | LR__3784
2553c     11 13 02 F6 | 	mov	arg01, local03
25540     12 15 02 F6 | 	mov	arg02, local04
25544     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
25548     18 1E 06 F1 | 	add	local01, #24
2554c     0F FB 61 FC | 	wrlong	result1, local01
25550     18 1E 86 F1 | 	sub	local01, #24
25554                 | LR__3785
25554     14 1E 06 F1 | 	add	local01, #20
25558     0F 25 62 FC | 	wrlong	local04, local01
2555c     04 1E 06 F1 | 	add	local01, #4
25560     0F 27 0A FB | 	rdlong	local05, local01 wz
25564     18 1E 86 F1 | 	sub	local01, #24
25568     02 FA 05 A6 |  if_e	mov	result1, #2
2556c     30 00 90 AD |  if_e	jmp	#LR__3786
25570     10 29 02 F6 | 	mov	local06, local02
25574     09 28 46 F0 | 	shr	local06, #9
25578     18 1E 06 F1 | 	add	local01, #24
2557c     0F 27 02 FB | 	rdlong	local05, local01
25580     14 27 02 F1 | 	add	local05, local06
25584     0F 27 62 FC | 	wrlong	local05, local01
25588     34 22 06 F1 | 	add	local03, #52
2558c     FF 21 06 F5 | 	and	local02, #511
25590     10 23 02 F1 | 	add	local03, local02
25594     04 1E 06 F1 | 	add	local01, #4
25598     0F 23 62 FC | 	wrlong	local03, local01
2559c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2559c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2559c                 | ' 
2559c                 | ' 	return FR_OK;
2559c     00 FA 05 F6 | 	mov	result1, #0
255a0                 | LR__3786
255a0     A7 F0 03 F6 | 	mov	ptra, fp
255a4     B2 00 A0 FD | 	call	#popregs_
255a8                 | _fatfs_cc_dir_sdi_ret
255a8     2D 00 64 FD | 	ret
255ac                 | 
255ac                 | _fatfs_cc_dir_next
255ac     05 4A 05 F6 | 	mov	COUNT_, #5
255b0     A8 00 A0 FD | 	call	#pushregs_
255b4     09 1F 02 F6 | 	mov	local01, arg01
255b8     0A 21 02 F6 | 	mov	local02, arg02
255bc     0F 23 02 FB | 	rdlong	local03, local01
255c0     10 1E 06 F1 | 	add	local01, #16
255c4     0F 25 02 FB | 	rdlong	local04, local01
255c8     10 1E 86 F1 | 	sub	local01, #16
255cc     20 24 06 F1 | 	add	local04, #32
255d0     00 10 00 FF 
255d4     00 24 16 F2 | 	cmp	local04, ##2097152 wc
255d8     18 1E 06 31 |  if_ae	add	local01, #24
255dc     0F 01 68 3C |  if_ae	wrlong	#0, local01
255e0     18 1E 86 31 |  if_ae	sub	local01, #24
255e4     18 1E 06 F1 | 	add	local01, #24
255e8     0F 15 0A FB | 	rdlong	arg02, local01 wz
255ec     18 1E 86 F1 | 	sub	local01, #24
255f0     04 FA 05 A6 |  if_e	mov	result1, #4
255f4     64 01 90 AD |  if_e	jmp	#LR__3795
255f8     FF 25 CE F7 | 	test	local04, #511 wz
255fc     3C 01 90 5D |  if_ne	jmp	#LR__3794
25600     18 1E 06 F1 | 	add	local01, #24
25604     0F 15 02 FB | 	rdlong	arg02, local01
25608     01 14 06 F1 | 	add	arg02, #1
2560c     0F 15 62 FC | 	wrlong	arg02, local01
25610     04 1E 86 F1 | 	sub	local01, #4
25614     0F 15 0A FB | 	rdlong	arg02, local01 wz
25618     14 1E 86 F1 | 	sub	local01, #20
2561c     2C 00 90 5D |  if_ne	jmp	#LR__3790
25620     12 15 02 F6 | 	mov	arg02, local04
25624     05 14 46 F0 | 	shr	arg02, #5
25628     08 22 06 F1 | 	add	local03, #8
2562c     11 21 E2 FA | 	rdword	local02, local03
25630     08 22 86 F1 | 	sub	local03, #8
25634     10 15 12 F2 | 	cmp	arg02, local02 wc
25638     18 1E 06 31 |  if_ae	add	local01, #24
2563c     0F 01 68 3C |  if_ae	wrlong	#0, local01
25640                 | ' 				dp->sect = 0; return FR_NO_FILE;
25640     04 FA 05 36 |  if_ae	mov	result1, #4
25644     14 01 90 3D |  if_ae	jmp	#LR__3795
25648     F0 00 90 FD | 	jmp	#LR__3793
2564c                 | LR__3790
2564c     12 13 02 F6 | 	mov	arg01, local04
25650     09 12 46 F0 | 	shr	arg01, #9
25654     0A 22 06 F1 | 	add	local03, #10
25658     11 15 E2 FA | 	rdword	arg02, local03
2565c     0A 22 86 F1 | 	sub	local03, #10
25660     01 14 86 F1 | 	sub	arg02, #1
25664     0A 13 CA F7 | 	test	arg01, arg02 wz
25668     D0 00 90 5D |  if_ne	jmp	#LR__3792
2566c     0F 13 02 F6 | 	mov	arg01, local01
25670     14 1E 06 F1 | 	add	local01, #20
25674     0F 15 02 FB | 	rdlong	arg02, local01
25678     14 1E 86 F1 | 	sub	local01, #20
2567c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
25680     FD 26 02 F6 | 	mov	local05, result1
25684     02 26 16 F2 | 	cmp	local05, #2 wc
25688     02 FA 05 C6 |  if_b	mov	result1, #2
2568c     CC 00 90 CD |  if_b	jmp	#LR__3795
25690     FF FF 7F FF 
25694     FF 27 0E F2 | 	cmp	local05, ##-1 wz
25698     01 FA 05 A6 |  if_e	mov	result1, #1
2569c     BC 00 90 AD |  if_e	jmp	#LR__3795
256a0     18 22 06 F1 | 	add	local03, #24
256a4     11 15 02 FB | 	rdlong	arg02, local03
256a8     18 22 86 F1 | 	sub	local03, #24
256ac     0A 27 12 F2 | 	cmp	local05, arg02 wc
256b0     68 00 90 CD |  if_b	jmp	#LR__3791
256b4     00 20 0E F2 | 	cmp	local02, #0 wz
256b8     18 1E 06 A1 |  if_e	add	local01, #24
256bc     0F 01 68 AC |  if_e	wrlong	#0, local01
256c0                 | ' 						dp->sect = 0; return FR_NO_FILE;
256c0     04 FA 05 A6 |  if_e	mov	result1, #4
256c4     94 00 90 AD |  if_e	jmp	#LR__3795
256c8     0F 13 02 F6 | 	mov	arg01, local01
256cc     14 1E 06 F1 | 	add	local01, #20
256d0     0F 15 02 FB | 	rdlong	arg02, local01
256d4     14 1E 86 F1 | 	sub	local01, #20
256d8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
256dc     FD 26 0A F6 | 	mov	local05, result1 wz
256e0     07 FA 05 A6 |  if_e	mov	result1, #7
256e4     74 00 90 AD |  if_e	jmp	#LR__3795
256e8     01 26 0E F2 | 	cmp	local05, #1 wz
256ec     02 FA 05 A6 |  if_e	mov	result1, #2
256f0     68 00 90 AD |  if_e	jmp	#LR__3795
256f4     FF FF 7F FF 
256f8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
256fc     01 FA 05 A6 |  if_e	mov	result1, #1
25700     58 00 90 AD |  if_e	jmp	#LR__3795
25704     13 15 02 F6 | 	mov	arg02, local05
25708     11 13 02 F6 | 	mov	arg01, local03
2570c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
25710     00 FA 0D F2 | 	cmp	result1, #0 wz
25714     01 FA 05 56 |  if_ne	mov	result1, #1
25718     40 00 90 5D |  if_ne	jmp	#LR__3795
2571c                 | LR__3791
2571c     14 1E 06 F1 | 	add	local01, #20
25720     0F 27 62 FC | 	wrlong	local05, local01
25724     11 13 02 F6 | 	mov	arg01, local03
25728     13 15 02 F6 | 	mov	arg02, local05
2572c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
25730     04 1E 06 F1 | 	add	local01, #4
25734     0F FB 61 FC | 	wrlong	result1, local01
25738     18 1E 86 F1 | 	sub	local01, #24
2573c                 | LR__3792
2573c                 | LR__3793
2573c                 | LR__3794
2573c     10 1E 06 F1 | 	add	local01, #16
25740     0F 25 62 FC | 	wrlong	local04, local01
25744     34 22 06 F1 | 	add	local03, #52
25748     FF 25 06 F5 | 	and	local04, #511
2574c     12 23 02 F1 | 	add	local03, local04
25750     0C 1E 06 F1 | 	add	local01, #12
25754     0F 23 62 FC | 	wrlong	local03, local01
25758                 | ' #line 1771 "ff.c"
25758                 | ' 				}
25758                 | ' 				dp->clust = clst;
25758                 | ' 				dp->sect = clst2sect(fs, clst);
25758                 | ' 			}
25758                 | ' 		}
25758                 | ' 	}
25758                 | ' 	dp->dptr = ofs;
25758                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
25758                 | ' 
25758                 | ' 	return FR_OK;
25758     00 FA 05 F6 | 	mov	result1, #0
2575c                 | LR__3795
2575c     A7 F0 03 F6 | 	mov	ptra, fp
25760     B2 00 A0 FD | 	call	#popregs_
25764                 | _fatfs_cc_dir_next_ret
25764     2D 00 64 FD | 	ret
25768                 | 
25768                 | _fatfs_cc_dir_alloc
25768     08 4A 05 F6 | 	mov	COUNT_, #8
2576c     A8 00 A0 FD | 	call	#pushregs_
25770     09 1F 02 F6 | 	mov	local01, arg01
25774     0A 21 02 F6 | 	mov	local02, arg02
25778     0F 23 02 FB | 	rdlong	local03, local01
2577c     0F 13 02 F6 | 	mov	arg01, local01
25780     00 14 06 F6 | 	mov	arg02, #0
25784     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
25788     FD 24 0A F6 | 	mov	local04, result1 wz
2578c     70 00 90 5D |  if_ne	jmp	#LR__3804
25790     00 26 06 F6 | 	mov	local05, #0
25794                 | ' 		n = 0;
25794                 | ' 		do {
25794                 | LR__3800
25794     18 1E 06 F1 | 	add	local01, #24
25798     0F 15 02 FB | 	rdlong	arg02, local01
2579c     18 1E 86 F1 | 	sub	local01, #24
257a0     11 13 02 F6 | 	mov	arg01, local03
257a4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
257a8     FD 24 0A F6 | 	mov	local04, result1 wz
257ac     50 00 90 5D |  if_ne	jmp	#LR__3803
257b0     1C 1E 06 F1 | 	add	local01, #28
257b4     0F 29 02 FB | 	rdlong	local06, local01
257b8     1C 1E 86 F1 | 	sub	local01, #28
257bc     14 29 C2 FA | 	rdbyte	local06, local06
257c0     E5 28 0E F2 | 	cmp	local06, #229 wz
257c4     1C 1E 06 51 |  if_ne	add	local01, #28
257c8     0F 2B 02 5B |  if_ne	rdlong	local07, local01
257cc     1C 1E 86 51 |  if_ne	sub	local01, #28
257d0     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
257d4     10 00 90 5D |  if_ne	jmp	#LR__3801
257d8     01 26 06 F1 | 	add	local05, #1
257dc     10 27 0A F2 | 	cmp	local05, local02 wz
257e0     1C 00 90 AD |  if_e	jmp	#LR__3803
257e4     04 00 90 FD | 	jmp	#LR__3802
257e8                 | LR__3801
257e8     00 26 06 F6 | 	mov	local05, #0
257ec                 | LR__3802
257ec     0F 13 02 F6 | 	mov	arg01, local01
257f0     01 14 06 F6 | 	mov	arg02, #1
257f4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
257f8     FD 24 0A F6 | 	mov	local04, result1 wz
257fc     94 FF 9F AD |  if_e	jmp	#LR__3800
25800                 | LR__3803
25800                 | LR__3804
25800     04 24 0E F2 | 	cmp	local04, #4 wz
25804     07 24 06 A6 |  if_e	mov	local04, #7
25808                 | ' 	return res;
25808     12 FB 01 F6 | 	mov	result1, local04
2580c     A7 F0 03 F6 | 	mov	ptra, fp
25810     B2 00 A0 FD | 	call	#popregs_
25814                 | _fatfs_cc_dir_alloc_ret
25814     2D 00 64 FD | 	ret
25818                 | 
25818                 | _fatfs_cc_ld_clust
25818     09 01 02 F6 | 	mov	_var01, arg01
2581c     0A 13 02 F6 | 	mov	arg01, arg02
25820     1A 12 06 F1 | 	add	arg01, #26
25824                 | ' {
25824                 | ' 
25824                 | ' 	return *((WORD*)ptr);
25824     09 FB E1 FA | 	rdword	result1, arg01
25828     FD 12 32 F9 | 	getword	arg01, result1, #0
2582c     00 01 C2 FA | 	rdbyte	_var01, _var01
25830     03 00 0E F2 | 	cmp	_var01, #3 wz
25834     14 14 06 A1 |  if_e	add	arg02, #20
25838                 | ' {
25838                 | ' 
25838                 | ' 	return *((WORD*)ptr);
25838     0A FB E1 AA |  if_e	rdword	result1, arg02
2583c     10 FA 65 A0 |  if_e	shl	result1, #16
25840     FD 12 42 A5 |  if_e	or	arg01, result1
25844                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
25844                 | ' 	}
25844                 | ' 
25844                 | ' 	return cl;
25844     09 FB 01 F6 | 	mov	result1, arg01
25848                 | _fatfs_cc_ld_clust_ret
25848     2D 00 64 FD | 	ret
2584c                 | 
2584c                 | _fatfs_cc_st_clust
2584c     09 01 02 F6 | 	mov	_var01, arg01
25850     0A 13 02 F6 | 	mov	arg01, arg02
25854     1A 12 06 F1 | 	add	arg01, #26
25858     09 17 52 FC | 	wrword	arg03, arg01
2585c     00 01 C2 FA | 	rdbyte	_var01, _var01
25860     03 00 0E F2 | 	cmp	_var01, #3 wz
25864     14 14 06 A1 |  if_e	add	arg02, #20
25868     10 16 46 A0 |  if_e	shr	arg03, #16
2586c     0A 17 52 AC |  if_e	wrword	arg03, arg02
25870                 | _fatfs_cc_st_clust_ret
25870     2D 00 64 FD | 	ret
25874                 | 
25874                 | _fatfs_cc_cmp_lfn
25874     07 4A 05 F6 | 	mov	COUNT_, #7
25878     A8 00 A0 FD | 	call	#pushregs_
2587c     09 1F 02 F6 | 	mov	local01, arg01
25880     0A 13 02 F6 | 	mov	arg01, arg02
25884     1A 12 06 F1 | 	add	arg01, #26
25888                 | ' {
25888                 | ' 
25888                 | ' 	return *((WORD*)ptr);
25888     09 FB E9 FA | 	rdword	result1, arg01 wz
2588c     00 FA 05 56 |  if_ne	mov	result1, #0
25890     E0 00 90 5D |  if_ne	jmp	#LR__3816
25894     0A 21 C2 FA | 	rdbyte	local02, arg02
25898     3F 20 06 F5 | 	and	local02, #63
2589c     01 20 86 F1 | 	sub	local02, #1
258a0     0D 20 06 FD | 	qmul	local02, #13
258a4                 | ' 
258a4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
258a4                 | ' 
258a4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
258a4     01 22 06 F6 | 	mov	local03, #1
258a8     00 24 06 F6 | 	mov	local04, #0
258ac     18 26 62 FD | 	getqx	local05
258b0                 | LR__3810
258b0     0D 24 16 F2 | 	cmp	local04, #13 wc
258b4     9C 00 90 3D |  if_ae	jmp	#LR__3815
258b8     0A 13 02 F6 | 	mov	arg01, arg02
258bc     12 21 02 F6 | 	mov	local02, local04
258c0     01 00 00 FF 
258c4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
258c8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
258cc     10 21 C2 FA | 	rdbyte	local02, local02
258d0     01 20 06 FA | 	mul	local02, #1
258d4     10 13 02 F1 | 	add	arg01, local02
258d8     01 00 00 FF 
258dc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
258e0                 | ' {
258e0                 | ' 
258e0                 | ' 	return *((WORD*)ptr);
258e0     09 FB E1 FA | 	rdword	result1, arg01
258e4     FD 28 02 F6 | 	mov	local06, result1
258e8     11 21 02 F6 | 	mov	local02, local03
258ec     0F 20 4E F7 | 	zerox	local02, #15 wz
258f0     44 00 90 AD |  if_e	jmp	#LR__3813
258f4     00 27 16 F2 | 	cmp	local05, #256 wc
258f8     2C 00 90 3D |  if_ae	jmp	#LR__3811
258fc     14 13 32 F9 | 	getword	arg01, local06, #0
25900     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
25904     FD 20 02 F6 | 	mov	local02, result1
25908     13 23 02 F6 | 	mov	local03, local05
2590c     01 22 66 F0 | 	shl	local03, #1
25910     0F 23 02 F1 | 	add	local03, local01
25914     11 13 E2 FA | 	rdword	arg01, local03
25918     01 26 06 F1 | 	add	local05, #1
2591c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
25920     FD 20 0A F2 | 	cmp	local02, result1 wz
25924     08 00 90 AD |  if_e	jmp	#LR__3812
25928                 | LR__3811
25928                 | ' 				return 0;
25928     00 FA 05 F6 | 	mov	result1, #0
2592c     44 00 90 FD | 	jmp	#LR__3816
25930                 | LR__3812
25930     14 23 02 F6 | 	mov	local03, local06
25934     14 00 90 FD | 	jmp	#LR__3814
25938                 | LR__3813
25938     14 29 32 F9 | 	getword	local06, local06, #0
2593c     7F 00 00 FF 
25940     FF 29 0E F2 | 	cmp	local06, ##65535 wz
25944     00 FA 05 56 |  if_ne	mov	result1, #0
25948     28 00 90 5D |  if_ne	jmp	#LR__3816
2594c                 | LR__3814
2594c     01 24 06 F1 | 	add	local04, #1
25950     5C FF 9F FD | 	jmp	#LR__3810
25954                 | LR__3815
25954     0A 21 C2 FA | 	rdbyte	local02, arg02
25958     40 20 CE F7 | 	test	local02, #64 wz
2595c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
25960     01 26 66 50 |  if_ne	shl	local05, #1
25964     0F 27 02 51 |  if_ne	add	local05, local01
25968     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2596c     00 FA 05 56 |  if_ne	mov	result1, #0
25970                 | ' 
25970                 | ' 	return 1;
25970     01 FA 05 A6 |  if_e	mov	result1, #1
25974                 | LR__3816
25974     A7 F0 03 F6 | 	mov	ptra, fp
25978     B2 00 A0 FD | 	call	#popregs_
2597c                 | _fatfs_cc_cmp_lfn_ret
2597c     2D 00 64 FD | 	ret
25980                 | 
25980                 | _fatfs_cc_pick_lfn
25980     09 01 02 F6 | 	mov	_var01, arg01
25984     0A 13 02 F6 | 	mov	arg01, arg02
25988     1A 12 06 F1 | 	add	arg01, #26
2598c                 | ' {
2598c                 | ' 
2598c                 | ' 	return *((WORD*)ptr);
2598c     09 FB E9 FA | 	rdword	result1, arg01 wz
25990     00 FA 05 56 |  if_ne	mov	result1, #0
25994     D4 00 90 5D |  if_ne	jmp	#LR__3825
25998     0A 03 C2 FA | 	rdbyte	_var02, arg02
2599c     40 02 26 F5 | 	andn	_var02, #64
259a0     01 02 86 F1 | 	sub	_var02, #1
259a4     0D 02 06 FD | 	qmul	_var02, #13
259a8                 | ' 
259a8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
259a8                 | ' 
259a8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
259a8     01 04 06 F6 | 	mov	_var03, #1
259ac     00 06 06 F6 | 	mov	_var04, #0
259b0     18 08 62 FD | 	getqx	_var05
259b4                 | LR__3820
259b4     0D 06 16 F2 | 	cmp	_var04, #13 wc
259b8     80 00 90 3D |  if_ae	jmp	#LR__3823
259bc     0A 13 02 F6 | 	mov	arg01, arg02
259c0     03 03 02 F6 | 	mov	_var02, _var04
259c4     01 00 00 FF 
259c8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
259cc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
259d0     01 03 C2 FA | 	rdbyte	_var02, _var02
259d4     01 02 06 FA | 	mul	_var02, #1
259d8     01 13 02 F1 | 	add	arg01, _var02
259dc     01 00 00 FF 
259e0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
259e4                 | ' {
259e4                 | ' 
259e4                 | ' 	return *((WORD*)ptr);
259e4     09 FB E1 FA | 	rdword	result1, arg01
259e8     FD 0A 02 F6 | 	mov	_var06, result1
259ec     02 03 02 F6 | 	mov	_var02, _var03
259f0     0F 02 4E F7 | 	zerox	_var02, #15 wz
259f4     28 00 90 AD |  if_e	jmp	#LR__3821
259f8     00 09 16 F2 | 	cmp	_var05, #256 wc
259fc     00 FA 05 36 |  if_ae	mov	result1, #0
25a00     68 00 90 3D |  if_ae	jmp	#LR__3825
25a04     04 03 02 F6 | 	mov	_var02, _var05
25a08     01 02 66 F0 | 	shl	_var02, #1
25a0c     00 03 02 F1 | 	add	_var02, _var01
25a10     05 05 02 F6 | 	mov	_var03, _var06
25a14     01 05 52 FC | 	wrword	_var03, _var02
25a18     01 08 06 F1 | 	add	_var05, #1
25a1c     14 00 90 FD | 	jmp	#LR__3822
25a20                 | LR__3821
25a20     05 0B 32 F9 | 	getword	_var06, _var06, #0
25a24     7F 00 00 FF 
25a28     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
25a2c     00 FA 05 56 |  if_ne	mov	result1, #0
25a30     38 00 90 5D |  if_ne	jmp	#LR__3825
25a34                 | LR__3822
25a34     01 06 06 F1 | 	add	_var04, #1
25a38     78 FF 9F FD | 	jmp	#LR__3820
25a3c                 | LR__3823
25a3c     0A 03 C2 FA | 	rdbyte	_var02, arg02
25a40     40 02 CE F7 | 	test	_var02, #64 wz
25a44     02 0D 02 56 |  if_ne	mov	_var07, _var03
25a48     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
25a4c     18 00 90 AD |  if_e	jmp	#LR__3824
25a50     00 09 16 F2 | 	cmp	_var05, #256 wc
25a54     00 FA 05 36 |  if_ae	mov	result1, #0
25a58     10 00 90 3D |  if_ae	jmp	#LR__3825
25a5c     01 08 66 F0 | 	shl	_var05, #1
25a60     00 09 02 F1 | 	add	_var05, _var01
25a64     04 01 58 FC | 	wrword	#0, _var05
25a68                 | LR__3824
25a68                 | ' 		lfnbuf[i] = 0;
25a68                 | ' 	}
25a68                 | ' 
25a68                 | ' 	return 1;
25a68     01 FA 05 F6 | 	mov	result1, #1
25a6c                 | LR__3825
25a6c                 | _fatfs_cc_pick_lfn_ret
25a6c     2D 00 64 FD | 	ret
25a70                 | 
25a70                 | _fatfs_cc_put_lfn
25a70     0D 14 06 F1 | 	add	arg02, #13
25a74     0A 19 42 FC | 	wrbyte	arg04, arg02
25a78     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
25a7c     01 18 86 F1 | 	sub	arg04, #1
25a80     0D 18 06 FD | 	qmul	arg04, #13
25a84     09 01 02 F6 | 	mov	_var01, arg01
25a88     02 14 86 F1 | 	sub	arg02, #2
25a8c     0A 1F 48 FC | 	wrbyte	#15, arg02
25a90     01 14 06 F1 | 	add	arg02, #1
25a94     0A 01 48 FC | 	wrbyte	#0, arg02
25a98     0C 14 86 F1 | 	sub	arg02, #12
25a9c     0A 13 02 F6 | 	mov	arg01, arg02
25aa0     1A 12 06 F1 | 	add	arg01, #26
25aa4     09 01 58 FC | 	wrword	#0, arg01
25aa8     00 02 06 F6 | 	mov	_var02, #0
25aac     00 04 06 F6 | 	mov	_var03, #0
25ab0                 | ' 	BYTE* dir,
25ab0                 | ' 	BYTE ord,
25ab0                 | ' 	BYTE sum
25ab0                 | ' )
25ab0                 | ' {
25ab0                 | ' 	UINT i, s;
25ab0                 | ' 	WCHAR wc;
25ab0                 | ' 
25ab0                 | ' 
25ab0                 | ' 	dir[ 13 ] = sum;
25ab0                 | ' 	dir[ 11 ] =  0x0F ;
25ab0                 | ' 	dir[ 12 ] = 0;
25ab0                 | ' 	st_word(dir +  26 , 0);
25ab0                 | ' 
25ab0                 | ' 	i = (ord - 1) * 13;
25ab0                 | ' 	s = wc = 0;
25ab0                 | ' 	do {
25ab0     01 00 00 FF 
25ab4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
25ab8     18 06 62 FD | 	getqx	_var04
25abc     97 2A 48 FB | 	callpa	#(@LR__3831-@LR__3830)>>2,fcache_load_ptr_
25ac0                 | LR__3830
25ac0     01 19 32 F9 | 	getword	arg04, _var02, #0
25ac4     7F 00 00 FF 
25ac8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
25acc     03 13 02 56 |  if_ne	mov	arg01, _var04
25ad0     01 06 06 51 |  if_ne	add	_var04, #1
25ad4     01 12 66 50 |  if_ne	shl	arg01, #1
25ad8     00 13 02 51 |  if_ne	add	arg01, _var01
25adc     09 03 E2 5A |  if_ne	rdword	_var02, arg01
25ae0     0A 13 02 F6 | 	mov	arg01, arg02
25ae4     02 19 02 F6 | 	mov	arg04, _var03
25ae8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
25aec     0C 19 C2 FA | 	rdbyte	arg04, arg04
25af0     01 18 06 FA | 	mul	arg04, #1
25af4     0C 13 02 F1 | 	add	arg01, arg04
25af8     09 03 52 FC | 	wrword	_var02, arg01
25afc     01 19 02 F6 | 	mov	arg04, _var02
25b00     0F 18 4E F7 | 	zerox	arg04, #15 wz
25b04     0F 02 CE A9 |  if_e	bmask	_var02, #15
25b08     01 04 06 F1 | 	add	_var03, #1
25b0c     0D 04 16 F2 | 	cmp	_var03, #13 wc
25b10     AC FF 9F CD |  if_b	jmp	#LR__3830
25b14                 | LR__3831
25b14     01 00 00 FF 
25b18     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
25b1c     01 03 32 F9 | 	getword	_var02, _var02, #0
25b20     7F 00 00 FF 
25b24     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
25b28     01 06 66 50 |  if_ne	shl	_var04, #1
25b2c     00 07 02 51 |  if_ne	add	_var04, _var01
25b30     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
25b34     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
25b38     40 16 46 A5 |  if_e	or	arg03, #64
25b3c     0A 17 42 FC | 	wrbyte	arg03, arg02
25b40                 | _fatfs_cc_put_lfn_ret
25b40     2D 00 64 FD | 	ret
25b44                 | 
25b44                 | _fatfs_cc_gen_numname
25b44     08 4A 05 F6 | 	mov	COUNT_, #8
25b48     A8 00 A0 FD | 	call	#pushregs_
25b4c     2C F0 07 F1 | 	add	ptra, #44
25b50     09 1F 02 F6 | 	mov	local01, arg01
25b54     0A 21 02 F6 | 	mov	local02, arg02
25b58     0B 23 02 F6 | 	mov	local03, arg03
25b5c     0C 25 02 F6 | 	mov	local04, arg04
25b60     0F 13 02 F6 | 	mov	arg01, local01
25b64     10 15 02 F6 | 	mov	arg02, local02
25b68     0B 16 06 F6 | 	mov	arg03, #11
25b6c     FC 77 BF FD | 	call	#__system____builtin_memmove
25b70     06 24 16 F2 | 	cmp	local04, #6 wc
25b74     48 00 90 CD |  if_b	jmp	#LR__3845
25b78     12 27 02 F6 | 	mov	local05, local04
25b7c     97 1E 48 FB | 	callpa	#(@LR__3843-@LR__3840)>>2,fcache_load_ptr_
25b80                 | ' 		sreg = seq;
25b80                 | ' 		while (*lfn) {
25b80                 | LR__3840
25b80     11 29 EA FA | 	rdword	local06, local03 wz
25b84     34 00 90 AD |  if_e	jmp	#LR__3844
25b88     11 2B E2 FA | 	rdword	local07, local03
25b8c                 | ' 			wc = *lfn++;
25b8c                 | ' 			for (i = 0; i < 16; i++) {
25b8c     02 22 06 F1 | 	add	local03, #2
25b90     10 12 DC FC | 	rep	@LR__3842, #16
25b94                 | LR__3841
25b94     01 26 66 F0 | 	shl	local05, #1
25b98     15 29 32 F9 | 	getword	local06, local07, #0
25b9c     01 28 06 F5 | 	and	local06, #1
25ba0     14 27 02 F1 | 	add	local05, local06
25ba4     15 2B 32 F9 | 	getword	local07, local07, #0
25ba8     01 2A 46 F0 | 	shr	local07, #1
25bac     10 26 2E F4 | 	testbn	local05, #16 wz
25bb0     88 00 00 5F 
25bb4     21 26 66 55 |  if_ne	xor	local05, ##69665
25bb8                 | LR__3842
25bb8     C4 FF 9F FD | 	jmp	#LR__3840
25bbc                 | LR__3843
25bbc                 | LR__3844
25bbc     13 25 02 F6 | 	mov	local04, local05
25bc0                 | LR__3845
25bc0     07 2A 06 F6 | 	mov	local07, #7
25bc4                 | ' 			}
25bc4                 | ' 		}
25bc4                 | ' 		seq = (UINT)sreg;
25bc4                 | ' 	}
25bc4                 | ' 
25bc4                 | ' 
25bc4                 | ' 	i = 7;
25bc4                 | ' 	do {
25bc4     10 4E 05 F1 | 	add	fp, #16
25bc8     97 1A 48 FB | 	callpa	#(@LR__3847-@LR__3846)>>2,fcache_load_ptr_
25bcc                 | LR__3846
25bcc     12 27 42 F8 | 	getnib	local05, local04, #0
25bd0     30 26 06 F1 | 	add	local05, #48
25bd4     04 24 46 F0 | 	shr	local04, #4
25bd8     13 29 E2 F8 | 	getbyte	local06, local05, #0
25bdc     3A 28 16 F2 | 	cmp	local06, #58 wc
25be0     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
25be4     07 26 06 31 |  if_ae	add	local05, #7
25be8     15 29 02 F6 | 	mov	local06, local07
25bec     01 2A 8E F1 | 	sub	local07, #1 wz
25bf0     A7 28 02 F1 | 	add	local06, fp
25bf4     14 27 42 FC | 	wrbyte	local05, local06
25bf8     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
25bfc     CC FF 9F 5D |  if_ne	jmp	#LR__3846
25c00                 | LR__3847
25c00     15 29 02 F6 | 	mov	local06, local07
25c04     A7 28 02 F1 | 	add	local06, fp
25c08     14 FD 48 FC | 	wrbyte	#126, local06
25c0c                 | ' 	ns[i] = '~';
25c0c                 | ' 
25c0c                 | ' 
25c0c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
25c0c     00 26 06 F6 | 	mov	local05, #0
25c10     10 4E 85 F1 | 	sub	fp, #16
25c14     97 2A 48 FB | 	callpa	#(@LR__3850-@LR__3848)>>2,fcache_load_ptr_
25c18                 | LR__3848
25c18     15 27 12 F2 | 	cmp	local05, local07 wc
25c1c     4C 00 90 3D |  if_ae	jmp	#LR__3851
25c20     13 29 02 F6 | 	mov	local06, local05
25c24     0F 29 02 F1 | 	add	local06, local01
25c28     14 29 C2 FA | 	rdbyte	local06, local06
25c2c     20 28 0E F2 | 	cmp	local06, #32 wz
25c30     38 00 90 AD |  if_e	jmp	#LR__3851
25c34     13 13 02 F6 | 	mov	arg01, local05
25c38     0F 13 02 F1 | 	add	arg01, local01
25c3c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
25c40     00 FA 05 56 |  if_ne	mov	result1, #0
25c44                 | ' 
25c44                 | ' 	return 0;
25c44     00 FA 05 A6 |  if_e	mov	result1, #0
25c48     00 FA 0D F2 | 	cmp	result1, #0 wz
25c4c     14 00 90 AD |  if_e	jmp	#LR__3849
25c50     15 29 02 F6 | 	mov	local06, local07
25c54     01 28 86 F1 | 	sub	local06, #1
25c58     14 27 0A F2 | 	cmp	local05, local06 wz
25c5c     0C 00 90 AD |  if_e	jmp	#LR__3851
25c60     01 26 06 F1 | 	add	local05, #1
25c64                 | LR__3849
25c64     01 26 06 F1 | 	add	local05, #1
25c68     AC FF 9F FD | 	jmp	#LR__3848
25c6c                 | LR__3850
25c6c                 | LR__3851
25c6c     97 20 48 FB | 	callpa	#(@LR__3855-@LR__3852)>>2,fcache_load_ptr_
25c70                 | ' 			j++;
25c70                 | ' 		}
25c70                 | ' 	}
25c70                 | ' 	do {
25c70                 | LR__3852
25c70     13 29 02 F6 | 	mov	local06, local05
25c74     0F 29 02 F1 | 	add	local06, local01
25c78     08 2A 16 F2 | 	cmp	local07, #8 wc
25c7c     01 26 06 F1 | 	add	local05, #1
25c80     1C 00 90 3D |  if_ae	jmp	#LR__3853
25c84     15 25 02 F6 | 	mov	local04, local07
25c88     10 4E 05 F1 | 	add	fp, #16
25c8c     A7 24 02 F1 | 	add	local04, fp
25c90     12 2D C2 FA | 	rdbyte	local08, local04
25c94     01 2A 06 F1 | 	add	local07, #1
25c98     10 4E 85 F1 | 	sub	fp, #16
25c9c     04 00 90 FD | 	jmp	#LR__3854
25ca0                 | LR__3853
25ca0     20 2C 06 F6 | 	mov	local08, #32
25ca4                 | LR__3854
25ca4     14 2D 42 FC | 	wrbyte	local08, local06
25ca8     08 26 16 F2 | 	cmp	local05, #8 wc
25cac     C0 FF 9F CD |  if_b	jmp	#LR__3852
25cb0                 | LR__3855
25cb0     A7 F0 03 F6 | 	mov	ptra, fp
25cb4     B2 00 A0 FD | 	call	#popregs_
25cb8                 | _fatfs_cc_gen_numname_ret
25cb8     2D 00 64 FD | 	ret
25cbc                 | 
25cbc                 | _fatfs_cc_sum_sfn
25cbc     00 00 06 F6 | 	mov	_var01, #0
25cc0                 | ' )
25cc0                 | ' {
25cc0                 | ' 	BYTE sum = 0;
25cc0                 | ' 	UINT n = 11;
25cc0                 | ' 
25cc0                 | ' 	do {
25cc0     97 12 48 FB | 	callpa	#(@LR__3862-@LR__3860)>>2,fcache_load_ptr_
25cc4                 | LR__3860
25cc4     0B 10 DC FC | 	rep	@LR__3863, #11
25cc8                 | LR__3861
25cc8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
25ccc     01 FA 45 F0 | 	shr	result1, #1
25cd0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
25cd4     07 00 66 F0 | 	shl	_var01, #7
25cd8     00 FB 01 F1 | 	add	result1, _var01
25cdc     09 01 C2 FA | 	rdbyte	_var01, arg01
25ce0     FD 00 02 F1 | 	add	_var01, result1
25ce4     01 12 06 F1 | 	add	arg01, #1
25ce8                 | LR__3862
25ce8                 | LR__3863
25ce8                 | ' 	return sum;
25ce8     00 FB 01 F6 | 	mov	result1, _var01
25cec                 | _fatfs_cc_sum_sfn_ret
25cec     2D 00 64 FD | 	ret
25cf0                 | 
25cf0                 | _fatfs_cc_dir_read
25cf0     0C 4A 05 F6 | 	mov	COUNT_, #12
25cf4     A8 00 A0 FD | 	call	#pushregs_
25cf8     09 1F 02 F6 | 	mov	local01, arg01
25cfc     0A 21 02 F6 | 	mov	local02, arg02
25d00     04 22 06 F6 | 	mov	local03, #4
25d04     0F 25 02 FB | 	rdlong	local04, local01
25d08     FF 26 06 F6 | 	mov	local05, #255
25d0c     FF 28 06 F6 | 	mov	local06, #255
25d10                 | ' )
25d10                 | ' {
25d10                 | ' 	FRESULT res = FR_NO_FILE;
25d10                 | ' 	FATFS *fs = dp->obj.fs;
25d10                 | ' 	BYTE attr, b;
25d10                 | ' 
25d10                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
25d10                 | ' 
25d10                 | ' 
25d10                 | ' 	while (dp->sect) {
25d10                 | LR__3870
25d10     18 1E 06 F1 | 	add	local01, #24
25d14     0F FB 09 FB | 	rdlong	result1, local01 wz
25d18     18 1E 86 F1 | 	sub	local01, #24
25d1c     AC 01 90 AD |  if_e	jmp	#LR__3880
25d20     18 1E 06 F1 | 	add	local01, #24
25d24     0F 15 02 FB | 	rdlong	arg02, local01
25d28     18 1E 86 F1 | 	sub	local01, #24
25d2c     12 13 02 F6 | 	mov	arg01, local04
25d30     AC ED BF FD | 	call	#_fatfs_cc_move_window
25d34     FD 22 0A F6 | 	mov	local03, result1 wz
25d38     90 01 90 5D |  if_ne	jmp	#LR__3880
25d3c     1C 1E 06 F1 | 	add	local01, #28
25d40     0F FB 01 FB | 	rdlong	result1, local01
25d44     1C 1E 86 F1 | 	sub	local01, #28
25d48     FD 2A C2 FA | 	rdbyte	local07, result1
25d4c     15 FB 01 F6 | 	mov	result1, local07
25d50     07 FA 4D F7 | 	zerox	result1, #7 wz
25d54     04 22 06 A6 |  if_e	mov	local03, #4
25d58                 | ' 			res = FR_NO_FILE; break;
25d58     70 01 90 AD |  if_e	jmp	#LR__3880
25d5c     1C 1E 06 F1 | 	add	local01, #28
25d60     0F 2D 02 FB | 	rdlong	local08, local01
25d64     0B 2C 06 F1 | 	add	local08, #11
25d68     16 2F C2 FA | 	rdbyte	local09, local08
25d6c     3F 2E 06 F5 | 	and	local09, #63
25d70     16 1E 86 F1 | 	sub	local01, #22
25d74     0F 2F 42 FC | 	wrbyte	local09, local01
25d78     06 1E 86 F1 | 	sub	local01, #6
25d7c     15 FB E1 F8 | 	getbyte	result1, local07, #0
25d80     E5 FA 0D F2 | 	cmp	result1, #229 wz
25d84     15 2D 02 56 |  if_ne	mov	local08, local07
25d88     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
25d8c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
25d90     1C 00 90 AD |  if_e	jmp	#LR__3871
25d94     00 30 06 F6 | 	mov	local10, #0
25d98     17 2D E2 F8 | 	getbyte	local08, local09, #0
25d9c     20 2C 26 F5 | 	andn	local08, #32
25da0     08 2C 0E F2 | 	cmp	local08, #8 wz
25da4     01 30 06 A6 |  if_e	mov	local10, #1
25da8     10 31 0A F2 | 	cmp	local10, local02 wz
25dac     08 00 90 AD |  if_e	jmp	#LR__3872
25db0                 | LR__3871
25db0     FF 26 06 F6 | 	mov	local05, #255
25db4     00 01 90 FD | 	jmp	#LR__3879
25db8                 | LR__3872
25db8     17 2F E2 F8 | 	getbyte	local09, local09, #0
25dbc     0F 2E 0E F2 | 	cmp	local09, #15 wz
25dc0     B4 00 90 5D |  if_ne	jmp	#LR__3876
25dc4     15 33 E2 F8 | 	getbyte	local11, local07, #0
25dc8     40 32 CE F7 | 	test	local11, #64 wz
25dcc     30 00 90 AD |  if_e	jmp	#LR__3873
25dd0     1C 1E 06 F1 | 	add	local01, #28
25dd4     0F 33 02 FB | 	rdlong	local11, local01
25dd8     0D 32 06 F1 | 	add	local11, #13
25ddc     19 29 C2 FA | 	rdbyte	local06, local11
25de0     15 2B E2 F8 | 	getbyte	local07, local07, #0
25de4     BF 2A 06 F5 | 	and	local07, #191
25de8     15 27 02 F6 | 	mov	local05, local07
25dec     0C 1E 86 F1 | 	sub	local01, #12
25df0     0F 33 02 FB | 	rdlong	local11, local01
25df4     1C 1E 06 F1 | 	add	local01, #28
25df8     0F 33 62 FC | 	wrlong	local11, local01
25dfc     2C 1E 86 F1 | 	sub	local01, #44
25e00                 | LR__3873
25e00     15 2D E2 F8 | 	getbyte	local08, local07, #0
25e04     13 31 E2 F8 | 	getbyte	local10, local05, #0
25e08     18 2D 0A F2 | 	cmp	local08, local10 wz
25e0c     5C 00 90 5D |  if_ne	jmp	#LR__3874
25e10     14 31 E2 F8 | 	getbyte	local10, local06, #0
25e14     1C 1E 06 F1 | 	add	local01, #28
25e18     0F 2F 02 FB | 	rdlong	local09, local01
25e1c     1C 1E 86 F1 | 	sub	local01, #28
25e20     0D 2E 06 F1 | 	add	local09, #13
25e24     17 2D C2 FA | 	rdbyte	local08, local09
25e28     16 2F E2 F8 | 	getbyte	local09, local08, #0
25e2c     17 31 0A F2 | 	cmp	local10, local09 wz
25e30     38 00 90 5D |  if_ne	jmp	#LR__3874
25e34     0C 24 06 F1 | 	add	local04, #12
25e38     12 13 02 FB | 	rdlong	arg01, local04
25e3c     0C 24 86 F1 | 	sub	local04, #12
25e40     1C 1E 06 F1 | 	add	local01, #28
25e44     0F 35 02 FB | 	rdlong	local12, local01
25e48     1C 1E 86 F1 | 	sub	local01, #28
25e4c     1A 15 02 F6 | 	mov	arg02, local12
25e50     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
25e54     00 FA 4D F2 | 	cmps	result1, #0 wz
25e58     13 35 02 56 |  if_ne	mov	local12, local05
25e5c     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
25e60     01 34 86 51 |  if_ne	sub	local12, #1
25e64     1A 33 02 56 |  if_ne	mov	local11, local12
25e68     04 00 90 5D |  if_ne	jmp	#LR__3875
25e6c                 | LR__3874
25e6c     FF 32 06 F6 | 	mov	local11, #255
25e70                 | LR__3875
25e70     19 27 02 F6 | 	mov	local05, local11
25e74     40 00 90 FD | 	jmp	#LR__3878
25e78                 | LR__3876
25e78     13 33 02 F6 | 	mov	local11, local05
25e7c     07 32 4E F7 | 	zerox	local11, #7 wz
25e80     20 00 90 5D |  if_ne	jmp	#LR__3877
25e84     14 29 E2 F8 | 	getbyte	local06, local06, #0
25e88     1C 1E 06 F1 | 	add	local01, #28
25e8c     0F 13 02 FB | 	rdlong	arg01, local01
25e90     1C 1E 86 F1 | 	sub	local01, #28
25e94     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
25e98     FD FA E1 F8 | 	getbyte	result1, result1, #0
25e9c     FD 28 0A F2 | 	cmp	local06, result1 wz
25ea0     28 00 90 AD |  if_e	jmp	#LR__3880
25ea4                 | LR__3877
25ea4     2C 1E 06 F1 | 	add	local01, #44
25ea8     FF FF FF FF 
25eac     0F FF 6B FC | 	wrlong	##-1, local01
25eb0     2C 1E 86 F1 | 	sub	local01, #44
25eb4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
25eb4                 | ' 					}
25eb4                 | ' 					break;
25eb4     14 00 90 FD | 	jmp	#LR__3880
25eb8                 | LR__3878
25eb8                 | LR__3879
25eb8     0F 13 02 F6 | 	mov	arg01, local01
25ebc     00 14 06 F6 | 	mov	arg02, #0
25ec0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
25ec4     FD 22 0A F6 | 	mov	local03, result1 wz
25ec8     44 FE 9F AD |  if_e	jmp	#LR__3870
25ecc                 | LR__3880
25ecc     00 22 0E F2 | 	cmp	local03, #0 wz
25ed0     18 1E 06 51 |  if_ne	add	local01, #24
25ed4     0F 01 68 5C |  if_ne	wrlong	#0, local01
25ed8                 | ' 	return res;
25ed8     11 FB 01 F6 | 	mov	result1, local03
25edc     A7 F0 03 F6 | 	mov	ptra, fp
25ee0     B2 00 A0 FD | 	call	#popregs_
25ee4                 | _fatfs_cc_dir_read_ret
25ee4     2D 00 64 FD | 	ret
25ee8                 | 
25ee8                 | _fatfs_cc_dir_find
25ee8     0B 4A 05 F6 | 	mov	COUNT_, #11
25eec     A8 00 A0 FD | 	call	#pushregs_
25ef0     09 1F 02 F6 | 	mov	local01, arg01
25ef4     0F 21 02 FB | 	rdlong	local02, local01
25ef8     0F 13 02 F6 | 	mov	arg01, local01
25efc     00 14 06 F6 | 	mov	arg02, #0
25f00     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
25f04     00 FA 0D F2 | 	cmp	result1, #0 wz
25f08     18 02 90 5D |  if_ne	jmp	#LR__3902
25f0c     FF 22 06 F6 | 	mov	local03, #255
25f10     FF 24 06 F6 | 	mov	local04, #255
25f14     2C 1E 06 F1 | 	add	local01, #44
25f18     FF FF FF FF 
25f1c     0F FF 6B FC | 	wrlong	##-1, local01
25f20     2C 1E 86 F1 | 	sub	local01, #44
25f24                 | ' #line 2404 "ff.c"
25f24                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
25f24                 | ' 
25f24                 | ' 	do {
25f24                 | LR__3890
25f24     18 1E 06 F1 | 	add	local01, #24
25f28     0F 15 02 FB | 	rdlong	arg02, local01
25f2c     18 1E 86 F1 | 	sub	local01, #24
25f30     10 13 02 F6 | 	mov	arg01, local02
25f34     A8 EB BF FD | 	call	#_fatfs_cc_move_window
25f38     FD 26 0A F6 | 	mov	local05, result1 wz
25f3c     E0 01 90 5D |  if_ne	jmp	#LR__3901
25f40     1C 1E 06 F1 | 	add	local01, #28
25f44     0F 17 02 FB | 	rdlong	arg03, local01
25f48     1C 1E 86 F1 | 	sub	local01, #28
25f4c     0B 29 C2 FA | 	rdbyte	local06, arg03
25f50     14 17 02 F6 | 	mov	arg03, local06
25f54     07 16 4E F7 | 	zerox	arg03, #7 wz
25f58     04 26 06 A6 |  if_e	mov	local05, #4
25f5c     C0 01 90 AD |  if_e	jmp	#LR__3901
25f60     1C 1E 06 F1 | 	add	local01, #28
25f64     0F 2B 02 FB | 	rdlong	local07, local01
25f68     15 17 02 F6 | 	mov	arg03, local07
25f6c     0B 16 06 F1 | 	add	arg03, #11
25f70     0B 2D C2 FA | 	rdbyte	local08, arg03
25f74     3F 2C 06 F5 | 	and	local08, #63
25f78     16 1E 86 F1 | 	sub	local01, #22
25f7c     0F 2D 42 FC | 	wrbyte	local08, local01
25f80     06 1E 86 F1 | 	sub	local01, #6
25f84     14 17 E2 F8 | 	getbyte	arg03, local06, #0
25f88     E5 16 0E F2 | 	cmp	arg03, #229 wz
25f8c     18 00 90 AD |  if_e	jmp	#LR__3891
25f90     16 17 E2 F8 | 	getbyte	arg03, local08, #0
25f94     08 16 CE F7 | 	test	arg03, #8 wz
25f98     16 2B 02 56 |  if_ne	mov	local07, local08
25f9c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
25fa0     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
25fa4     18 00 90 AD |  if_e	jmp	#LR__3892
25fa8                 | LR__3891
25fa8     FF 24 06 F6 | 	mov	local04, #255
25fac     2C 1E 06 F1 | 	add	local01, #44
25fb0     FF FF FF FF 
25fb4     0F FF 6B FC | 	wrlong	##-1, local01
25fb8     2C 1E 86 F1 | 	sub	local01, #44
25fbc     4C 01 90 FD | 	jmp	#LR__3900
25fc0                 | LR__3892
25fc0     16 2D E2 F8 | 	getbyte	local08, local08, #0
25fc4     0F 2C 0E F2 | 	cmp	local08, #15 wz
25fc8     C8 00 90 5D |  if_ne	jmp	#LR__3896
25fcc     2B 1E 06 F1 | 	add	local01, #43
25fd0     0F 2D C2 FA | 	rdbyte	local08, local01
25fd4     2B 1E 86 F1 | 	sub	local01, #43
25fd8     40 2C CE F7 | 	test	local08, #64 wz
25fdc     2C 01 90 5D |  if_ne	jmp	#LR__3899
25fe0     14 2F E2 F8 | 	getbyte	local09, local06, #0
25fe4     40 2E CE F7 | 	test	local09, #64 wz
25fe8     30 00 90 AD |  if_e	jmp	#LR__3893
25fec     1C 1E 06 F1 | 	add	local01, #28
25ff0     0F 2F 02 FB | 	rdlong	local09, local01
25ff4     0D 2E 06 F1 | 	add	local09, #13
25ff8     17 23 C2 FA | 	rdbyte	local03, local09
25ffc     14 29 E2 F8 | 	getbyte	local06, local06, #0
26000     BF 28 06 F5 | 	and	local06, #191
26004     14 25 02 F6 | 	mov	local04, local06
26008     0C 1E 86 F1 | 	sub	local01, #12
2600c     0F 2F 02 FB | 	rdlong	local09, local01
26010     1C 1E 06 F1 | 	add	local01, #28
26014     0F 2F 62 FC | 	wrlong	local09, local01
26018     2C 1E 86 F1 | 	sub	local01, #44
2601c                 | LR__3893
2601c     14 31 E2 F8 | 	getbyte	local10, local06, #0
26020     12 2B E2 F8 | 	getbyte	local07, local04, #0
26024     15 31 0A F2 | 	cmp	local10, local07 wz
26028     5C 00 90 5D |  if_ne	jmp	#LR__3894
2602c     11 2D E2 F8 | 	getbyte	local08, local03, #0
26030     1C 1E 06 F1 | 	add	local01, #28
26034     0F 2B 02 FB | 	rdlong	local07, local01
26038     1C 1E 86 F1 | 	sub	local01, #28
2603c     0D 2A 06 F1 | 	add	local07, #13
26040     15 29 C2 FA | 	rdbyte	local06, local07
26044     14 2B E2 F8 | 	getbyte	local07, local06, #0
26048     15 2D 0A F2 | 	cmp	local08, local07 wz
2604c     38 00 90 5D |  if_ne	jmp	#LR__3894
26050     0C 20 06 F1 | 	add	local02, #12
26054     10 13 02 FB | 	rdlong	arg01, local02
26058     0C 20 86 F1 | 	sub	local02, #12
2605c     1C 1E 06 F1 | 	add	local01, #28
26060     0F 33 02 FB | 	rdlong	local11, local01
26064     1C 1E 86 F1 | 	sub	local01, #28
26068     19 15 02 F6 | 	mov	arg02, local11
2606c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
26070     00 FA 4D F2 | 	cmps	result1, #0 wz
26074     12 33 02 56 |  if_ne	mov	local11, local04
26078     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2607c     01 32 86 51 |  if_ne	sub	local11, #1
26080     19 2F 02 56 |  if_ne	mov	local09, local11
26084     04 00 90 5D |  if_ne	jmp	#LR__3895
26088                 | LR__3894
26088     FF 2E 06 F6 | 	mov	local09, #255
2608c                 | LR__3895
2608c     17 25 02 F6 | 	mov	local04, local09
26090     78 00 90 FD | 	jmp	#LR__3899
26094                 | LR__3896
26094     12 2F 02 F6 | 	mov	local09, local04
26098     07 2E 4E F7 | 	zerox	local09, #7 wz
2609c     20 00 90 5D |  if_ne	jmp	#LR__3897
260a0     11 31 E2 F8 | 	getbyte	local10, local03, #0
260a4     1C 1E 06 F1 | 	add	local01, #28
260a8     0F 13 02 FB | 	rdlong	arg01, local01
260ac     1C 1E 86 F1 | 	sub	local01, #28
260b0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
260b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
260b8     FD 30 0A F2 | 	cmp	local10, result1 wz
260bc     60 00 90 AD |  if_e	jmp	#LR__3901
260c0                 | LR__3897
260c0     2B 1E 06 F1 | 	add	local01, #43
260c4     0F 2F C2 FA | 	rdbyte	local09, local01
260c8     2B 1E 86 F1 | 	sub	local01, #43
260cc     01 2E CE F7 | 	test	local09, #1 wz
260d0     24 00 90 5D |  if_ne	jmp	#LR__3898
260d4     1C 1E 06 F1 | 	add	local01, #28
260d8     0F 13 02 FB | 	rdlong	arg01, local01
260dc     04 1E 06 F1 | 	add	local01, #4
260e0     0F 15 02 F6 | 	mov	arg02, local01
260e4     20 1E 86 F1 | 	sub	local01, #32
260e8     0B 16 06 F6 | 	mov	arg03, #11
260ec     88 DA BF FD | 	call	#_fatfs_cc_memcmp
260f0     00 FA 0D F2 | 	cmp	result1, #0 wz
260f4     28 00 90 AD |  if_e	jmp	#LR__3901
260f8                 | LR__3898
260f8     FF 24 06 F6 | 	mov	local04, #255
260fc     2C 1E 06 F1 | 	add	local01, #44
26100     FF FF FF FF 
26104     0F FF 6B FC | 	wrlong	##-1, local01
26108     2C 1E 86 F1 | 	sub	local01, #44
2610c                 | LR__3899
2610c                 | LR__3900
2610c     0F 13 02 F6 | 	mov	arg01, local01
26110     00 14 06 F6 | 	mov	arg02, #0
26114     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
26118     FD 26 0A F6 | 	mov	local05, result1 wz
2611c     04 FE 9F AD |  if_e	jmp	#LR__3890
26120                 | LR__3901
26120                 | ' 
26120                 | ' 	return res;
26120     13 FB 01 F6 | 	mov	result1, local05
26124                 | LR__3902
26124     A7 F0 03 F6 | 	mov	ptra, fp
26128     B2 00 A0 FD | 	call	#popregs_
2612c                 | _fatfs_cc_dir_find_ret
2612c     2D 00 64 FD | 	ret
26130                 | 
26130                 | _fatfs_cc_dir_register
26130     0A 4A 05 F6 | 	mov	COUNT_, #10
26134     A8 00 A0 FD | 	call	#pushregs_
26138     2C F0 07 F1 | 	add	ptra, #44
2613c     04 4E 05 F1 | 	add	fp, #4
26140     A7 12 62 FC | 	wrlong	arg01, fp
26144     09 1F 02 FB | 	rdlong	local01, arg01
26148     08 4E 05 F1 | 	add	fp, #8
2614c     A7 1E 62 FC | 	wrlong	local01, fp
26150     08 4E 85 F1 | 	sub	fp, #8
26154     A7 20 02 FB | 	rdlong	local02, fp
26158     04 4E 85 F1 | 	sub	fp, #4
2615c     2B 20 06 F1 | 	add	local02, #43
26160     10 21 C2 FA | 	rdbyte	local02, local02
26164     A0 20 CE F7 | 	test	local02, #160 wz
26168     06 FA 05 56 |  if_ne	mov	result1, #6
2616c     F8 03 90 5D |  if_ne	jmp	#LR__3925
26170                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
26170     14 4E 05 F1 | 	add	fp, #20
26174     A7 00 68 FC | 	wrlong	#0, fp
26178     14 4E 85 F1 | 	sub	fp, #20
2617c     97 28 48 FB | 	callpa	#(@LR__3911-@LR__3910)>>2,fcache_load_ptr_
26180                 | LR__3910
26180     0C 4E 05 F1 | 	add	fp, #12
26184     A7 20 02 FB | 	rdlong	local02, fp
26188     0C 20 06 F1 | 	add	local02, #12
2618c     10 23 02 FB | 	rdlong	local03, local02
26190     08 4E 05 F1 | 	add	fp, #8
26194     A7 24 02 FB | 	rdlong	local04, fp
26198     14 4E 85 F1 | 	sub	fp, #20
2619c     01 24 66 F0 | 	shl	local04, #1
261a0     11 25 02 F1 | 	add	local04, local03
261a4     12 21 EA FA | 	rdword	local02, local04 wz
261a8     24 00 90 AD |  if_e	jmp	#LR__3912
261ac     14 4E 05 F1 | 	add	fp, #20
261b0     A7 26 02 FB | 	rdlong	local05, fp
261b4     13 29 02 F6 | 	mov	local06, local05
261b8     13 2B 02 F6 | 	mov	local07, local05
261bc     15 2D 02 F6 | 	mov	local08, local07
261c0     01 2C 06 F1 | 	add	local08, #1
261c4     A7 2C 62 FC | 	wrlong	local08, fp
261c8     14 4E 85 F1 | 	sub	fp, #20
261cc     B0 FF 9F FD | 	jmp	#LR__3910
261d0                 | LR__3911
261d0                 | LR__3912
261d0     1C 4E 05 F1 | 	add	fp, #28
261d4     A7 12 02 F6 | 	mov	arg01, fp
261d8     18 4E 85 F1 | 	sub	fp, #24
261dc     A7 14 02 FB | 	rdlong	arg02, fp
261e0     04 4E 85 F1 | 	sub	fp, #4
261e4     20 14 06 F1 | 	add	arg02, #32
261e8     0C 16 06 F6 | 	mov	arg03, #12
261ec     7C 71 BF FD | 	call	#__system____builtin_memmove
261f0     27 4E 05 F1 | 	add	fp, #39
261f4     A7 2E C2 FA | 	rdbyte	local09, fp
261f8     27 4E 85 F1 | 	sub	fp, #39
261fc     01 2E CE F7 | 	test	local09, #1 wz
26200     F4 00 90 AD |  if_e	jmp	#LR__3915
26204     04 4E 05 F1 | 	add	fp, #4
26208     A7 30 02 FB | 	rdlong	local10, fp
2620c     2B 30 06 F1 | 	add	local10, #43
26210     18 81 48 FC | 	wrbyte	#64, local10
26214                 | ' 		dp->fn[ 11 ] =  0x40 ;
26214                 | ' 		for (n = 1; n < 100; n++) {
26214     0C 4E 05 F1 | 	add	fp, #12
26218     A7 02 68 FC | 	wrlong	#1, fp
2621c     10 4E 85 F1 | 	sub	fp, #16
26220                 | LR__3913
26220     10 4E 05 F1 | 	add	fp, #16
26224     A7 20 02 FB | 	rdlong	local02, fp
26228     10 4E 85 F1 | 	sub	fp, #16
2622c     64 20 16 F2 | 	cmp	local02, #100 wc
26230     70 00 90 3D |  if_ae	jmp	#LR__3914
26234     04 4E 05 F1 | 	add	fp, #4
26238     A7 12 02 FB | 	rdlong	arg01, fp
2623c     20 12 06 F1 | 	add	arg01, #32
26240     18 4E 05 F1 | 	add	fp, #24
26244     A7 14 02 F6 | 	mov	arg02, fp
26248     10 4E 85 F1 | 	sub	fp, #16
2624c     A7 30 02 FB | 	rdlong	local10, fp
26250     0C 30 06 F1 | 	add	local10, #12
26254     18 17 02 FB | 	rdlong	arg03, local10
26258     04 4E 05 F1 | 	add	fp, #4
2625c     A7 18 02 FB | 	rdlong	arg04, fp
26260     10 4E 85 F1 | 	sub	fp, #16
26264     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
26268     04 4E 05 F1 | 	add	fp, #4
2626c     A7 12 02 FB | 	rdlong	arg01, fp
26270     04 4E 85 F1 | 	sub	fp, #4
26274     70 FC BF FD | 	call	#_fatfs_cc_dir_find
26278     08 4E 05 F1 | 	add	fp, #8
2627c     A7 FA 61 FC | 	wrlong	result1, fp
26280     00 FA 4D F2 | 	cmps	result1, #0 wz
26284     08 4E 85 F1 | 	sub	fp, #8
26288     18 00 90 5D |  if_ne	jmp	#LR__3914
2628c     10 4E 05 F1 | 	add	fp, #16
26290     A7 30 02 FB | 	rdlong	local10, fp
26294     01 30 06 F1 | 	add	local10, #1
26298     A7 30 62 FC | 	wrlong	local10, fp
2629c     10 4E 85 F1 | 	sub	fp, #16
262a0     7C FF 9F FD | 	jmp	#LR__3913
262a4                 | LR__3914
262a4     10 4E 05 F1 | 	add	fp, #16
262a8     A7 30 02 FB | 	rdlong	local10, fp
262ac     10 4E 85 F1 | 	sub	fp, #16
262b0     64 30 0E F2 | 	cmp	local10, #100 wz
262b4     07 FA 05 A6 |  if_e	mov	result1, #7
262b8     AC 02 90 AD |  if_e	jmp	#LR__3925
262bc     08 4E 05 F1 | 	add	fp, #8
262c0     A7 30 02 FB | 	rdlong	local10, fp
262c4     08 4E 85 F1 | 	sub	fp, #8
262c8     04 30 0E F2 | 	cmp	local10, #4 wz
262cc     08 4E 05 51 |  if_ne	add	fp, #8
262d0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
262d4     08 4E 85 51 |  if_ne	sub	fp, #8
262d8     8C 02 90 5D |  if_ne	jmp	#LR__3925
262dc     04 4E 05 F1 | 	add	fp, #4
262e0     A7 30 02 FB | 	rdlong	local10, fp
262e4     23 4E 05 F1 | 	add	fp, #35
262e8     A7 1E C2 FA | 	rdbyte	local01, fp
262ec     27 4E 85 F1 | 	sub	fp, #39
262f0     2B 30 06 F1 | 	add	local10, #43
262f4     18 1F 42 FC | 	wrbyte	local01, local10
262f8                 | LR__3915
262f8     27 4E 05 F1 | 	add	fp, #39
262fc     A7 20 C2 FA | 	rdbyte	local02, fp
26300     27 4E 85 F1 | 	sub	fp, #39
26304     02 20 CE F7 | 	test	local02, #2 wz
26308     20 00 90 AD |  if_e	jmp	#LR__3916
2630c     14 4E 05 F1 | 	add	fp, #20
26310     A7 30 02 FB | 	rdlong	local10, fp
26314     0C 30 06 F1 | 	add	local10, #12
26318     0D 30 16 FD | 	qdiv	local10, #13
2631c     14 4E 85 F1 | 	sub	fp, #20
26320     18 30 62 FD | 	getqx	local10
26324     01 30 06 F1 | 	add	local10, #1
26328     04 00 90 FD | 	jmp	#LR__3917
2632c                 | LR__3916
2632c     01 30 06 F6 | 	mov	local10, #1
26330                 | LR__3917
26330     18 4E 05 F1 | 	add	fp, #24
26334     A7 30 62 FC | 	wrlong	local10, fp
26338     14 4E 85 F1 | 	sub	fp, #20
2633c     A7 12 02 FB | 	rdlong	arg01, fp
26340     18 15 02 F6 | 	mov	arg02, local10
26344     04 4E 85 F1 | 	sub	fp, #4
26348     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2634c     08 4E 05 F1 | 	add	fp, #8
26350     A7 FA 61 FC | 	wrlong	result1, fp
26354     08 4E 85 F1 | 	sub	fp, #8
26358     00 FA 0D F2 | 	cmp	result1, #0 wz
2635c     38 01 90 5D |  if_ne	jmp	#LR__3922
26360     18 4E 05 F1 | 	add	fp, #24
26364     A7 30 02 FB | 	rdlong	local10, fp
26368     01 30 8E F1 | 	sub	local10, #1 wz
2636c     A7 30 62 FC | 	wrlong	local10, fp
26370     18 4E 85 F1 | 	sub	fp, #24
26374     20 01 90 AD |  if_e	jmp	#LR__3922
26378     04 4E 05 F1 | 	add	fp, #4
2637c     A7 30 02 FB | 	rdlong	local10, fp
26380     18 13 02 F6 | 	mov	arg01, local10
26384     14 4E 05 F1 | 	add	fp, #20
26388     A7 18 02 FB | 	rdlong	arg04, fp
2638c     18 4E 85 F1 | 	sub	fp, #24
26390     05 18 66 F0 | 	shl	arg04, #5
26394     10 30 06 F1 | 	add	local10, #16
26398     18 15 02 FB | 	rdlong	arg02, local10
2639c     0C 15 82 F1 | 	sub	arg02, arg04
263a0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
263a4     08 4E 05 F1 | 	add	fp, #8
263a8     A7 FA 61 FC | 	wrlong	result1, fp
263ac     08 4E 85 F1 | 	sub	fp, #8
263b0     00 FA 0D F2 | 	cmp	result1, #0 wz
263b4     E0 00 90 5D |  if_ne	jmp	#LR__3921
263b8     04 4E 05 F1 | 	add	fp, #4
263bc     A7 12 02 FB | 	rdlong	arg01, fp
263c0     04 4E 85 F1 | 	sub	fp, #4
263c4     20 12 06 F1 | 	add	arg01, #32
263c8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
263cc     FD 30 02 F6 | 	mov	local10, result1
263d0     28 4E 05 F1 | 	add	fp, #40
263d4     A7 30 42 FC | 	wrbyte	local10, fp
263d8     28 4E 85 F1 | 	sub	fp, #40
263dc                 | ' 			sum = sum_sfn(dp->fn);
263dc                 | ' 			do {
263dc                 | LR__3918
263dc     0C 4E 05 F1 | 	add	fp, #12
263e0     A7 12 02 FB | 	rdlong	arg01, fp
263e4     08 4E 85 F1 | 	sub	fp, #8
263e8     A7 1E 02 FB | 	rdlong	local01, fp
263ec     04 4E 85 F1 | 	sub	fp, #4
263f0     18 1E 06 F1 | 	add	local01, #24
263f4     0F 15 02 FB | 	rdlong	arg02, local01
263f8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
263fc     08 4E 05 F1 | 	add	fp, #8
26400     A7 FA 61 FC | 	wrlong	result1, fp
26404     00 FA 4D F2 | 	cmps	result1, #0 wz
26408     08 4E 85 F1 | 	sub	fp, #8
2640c     88 00 90 5D |  if_ne	jmp	#LR__3920
26410     0C 4E 05 F1 | 	add	fp, #12
26414     A7 20 02 FB | 	rdlong	local02, fp
26418     0C 20 06 F1 | 	add	local02, #12
2641c     10 13 02 FB | 	rdlong	arg01, local02
26420     08 4E 85 F1 | 	sub	fp, #8
26424     A7 1E 02 FB | 	rdlong	local01, fp
26428     1C 1E 06 F1 | 	add	local01, #28
2642c     0F 15 02 FB | 	rdlong	arg02, local01
26430     14 4E 05 F1 | 	add	fp, #20
26434     A7 16 02 FB | 	rdlong	arg03, fp
26438     10 4E 05 F1 | 	add	fp, #16
2643c     A7 18 C2 FA | 	rdbyte	arg04, fp
26440     28 4E 85 F1 | 	sub	fp, #40
26444     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
26448     0C 4E 05 F1 | 	add	fp, #12
2644c     A7 30 02 FB | 	rdlong	local10, fp
26450     03 30 06 F1 | 	add	local10, #3
26454     18 03 48 FC | 	wrbyte	#1, local10
26458     08 4E 85 F1 | 	sub	fp, #8
2645c     A7 12 02 FB | 	rdlong	arg01, fp
26460     04 4E 85 F1 | 	sub	fp, #4
26464     00 14 06 F6 | 	mov	arg02, #0
26468     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2646c     08 4E 05 F1 | 	add	fp, #8
26470     A7 FA 61 FC | 	wrlong	result1, fp
26474     00 FA 4D F2 | 	cmps	result1, #0 wz
26478     08 4E 85 F1 | 	sub	fp, #8
2647c     18 00 90 5D |  if_ne	jmp	#LR__3919
26480     18 4E 05 F1 | 	add	fp, #24
26484     A7 30 02 FB | 	rdlong	local10, fp
26488     01 30 8E F1 | 	sub	local10, #1 wz
2648c     A7 30 62 FC | 	wrlong	local10, fp
26490     18 4E 85 F1 | 	sub	fp, #24
26494     44 FF 9F 5D |  if_ne	jmp	#LR__3918
26498                 | LR__3919
26498                 | LR__3920
26498                 | LR__3921
26498                 | LR__3922
26498     08 4E 05 F1 | 	add	fp, #8
2649c     A7 30 0A FB | 	rdlong	local10, fp wz
264a0     08 4E 85 F1 | 	sub	fp, #8
264a4     B4 00 90 5D |  if_ne	jmp	#LR__3924
264a8     0C 4E 05 F1 | 	add	fp, #12
264ac     A7 12 02 FB | 	rdlong	arg01, fp
264b0     08 4E 85 F1 | 	sub	fp, #8
264b4     A7 1E 02 FB | 	rdlong	local01, fp
264b8     04 4E 85 F1 | 	sub	fp, #4
264bc     18 1E 06 F1 | 	add	local01, #24
264c0     0F 15 02 FB | 	rdlong	arg02, local01
264c4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
264c8     08 4E 05 F1 | 	add	fp, #8
264cc     A7 FA 61 FC | 	wrlong	result1, fp
264d0     08 4E 85 F1 | 	sub	fp, #8
264d4     00 FA 0D F2 | 	cmp	result1, #0 wz
264d8     80 00 90 5D |  if_ne	jmp	#LR__3923
264dc     04 4E 05 F1 | 	add	fp, #4
264e0     A7 20 02 FB | 	rdlong	local02, fp
264e4     04 4E 85 F1 | 	sub	fp, #4
264e8     1C 20 06 F1 | 	add	local02, #28
264ec     10 13 02 FB | 	rdlong	arg01, local02
264f0     00 14 06 F6 | 	mov	arg02, #0
264f4     20 16 06 F6 | 	mov	arg03, #32
264f8     98 00 A0 FD | 	call	#\builtin_bytefill_
264fc     04 4E 05 F1 | 	add	fp, #4
26500     A7 14 02 FB | 	rdlong	arg02, fp
26504     0A 1F 02 F6 | 	mov	local01, arg02
26508     1C 1E 06 F1 | 	add	local01, #28
2650c     0F 13 02 FB | 	rdlong	arg01, local01
26510     04 4E 85 F1 | 	sub	fp, #4
26514     20 14 06 F1 | 	add	arg02, #32
26518     0B 16 06 F6 | 	mov	arg03, #11
2651c     4C 6E BF FD | 	call	#__system____builtin_memmove
26520     04 4E 05 F1 | 	add	fp, #4
26524     A7 2E 02 FB | 	rdlong	local09, fp
26528     17 31 02 F6 | 	mov	local10, local09
2652c     1C 30 06 F1 | 	add	local10, #28
26530     18 1F 02 FB | 	rdlong	local01, local10
26534     2B 2E 06 F1 | 	add	local09, #43
26538     17 31 C2 FA | 	rdbyte	local10, local09
2653c     18 30 06 F5 | 	and	local10, #24
26540     0C 1E 06 F1 | 	add	local01, #12
26544     0F 31 42 FC | 	wrbyte	local10, local01
26548     08 4E 05 F1 | 	add	fp, #8
2654c     A7 30 02 FB | 	rdlong	local10, fp
26550     0C 4E 85 F1 | 	sub	fp, #12
26554     03 30 06 F1 | 	add	local10, #3
26558     18 03 48 FC | 	wrbyte	#1, local10
2655c                 | LR__3923
2655c                 | LR__3924
2655c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2655c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2655c                 | ' 
2655c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2655c                 | ' 
2655c                 | ' 			fs->wflag = 1;
2655c                 | ' 		}
2655c                 | ' 	}
2655c                 | ' 
2655c                 | ' 	return res;
2655c     08 4E 05 F1 | 	add	fp, #8
26560     A7 FA 01 FB | 	rdlong	result1, fp
26564     08 4E 85 F1 | 	sub	fp, #8
26568                 | LR__3925
26568     A7 F0 03 F6 | 	mov	ptra, fp
2656c     B2 00 A0 FD | 	call	#popregs_
26570                 | _fatfs_cc_dir_register_ret
26570     2D 00 64 FD | 	ret
26574                 | 
26574                 | _fatfs_cc_dir_remove
26574     05 4A 05 F6 | 	mov	COUNT_, #5
26578     A8 00 A0 FD | 	call	#pushregs_
2657c     09 1F 02 F6 | 	mov	local01, arg01
26580     0F 21 02 FB | 	rdlong	local02, local01
26584     10 1E 06 F1 | 	add	local01, #16
26588     0F 23 02 FB | 	rdlong	local03, local01
2658c     1C 1E 06 F1 | 	add	local01, #28
26590     0F 15 02 FB | 	rdlong	arg02, local01
26594     2C 1E 86 F1 | 	sub	local01, #44
26598     FF FF 7F FF 
2659c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
265a0     00 24 06 A6 |  if_e	mov	local04, #0
265a4     18 00 90 AD |  if_e	jmp	#LR__3930
265a8     0F 13 02 F6 | 	mov	arg01, local01
265ac     2C 1E 06 F1 | 	add	local01, #44
265b0     0F 15 02 FB | 	rdlong	arg02, local01
265b4     2C 1E 86 F1 | 	sub	local01, #44
265b8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
265bc     FD 24 02 F6 | 	mov	local04, result1
265c0                 | LR__3930
265c0     12 27 0A F6 | 	mov	local05, local04 wz
265c4     64 00 90 5D |  if_ne	jmp	#LR__3933
265c8                 | ' 		do {
265c8                 | LR__3931
265c8     18 1E 06 F1 | 	add	local01, #24
265cc     0F 15 02 FB | 	rdlong	arg02, local01
265d0     18 1E 86 F1 | 	sub	local01, #24
265d4     10 13 02 F6 | 	mov	arg01, local02
265d8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
265dc     FD 26 0A F6 | 	mov	local05, result1 wz
265e0     40 00 90 5D |  if_ne	jmp	#LR__3932
265e4     1C 1E 06 F1 | 	add	local01, #28
265e8     0F 25 02 FB | 	rdlong	local04, local01
265ec     12 CB 49 FC | 	wrbyte	#229, local04
265f0     03 20 06 F1 | 	add	local02, #3
265f4     10 03 48 FC | 	wrbyte	#1, local02
265f8     03 20 86 F1 | 	sub	local02, #3
265fc     0C 1E 86 F1 | 	sub	local01, #12
26600     0F 25 02 FB | 	rdlong	local04, local01
26604     10 1E 86 F1 | 	sub	local01, #16
26608     11 25 12 F2 | 	cmp	local04, local03 wc
2660c     14 00 90 3D |  if_ae	jmp	#LR__3932
26610     0F 13 02 F6 | 	mov	arg01, local01
26614     00 14 06 F6 | 	mov	arg02, #0
26618     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2661c     FD 26 0A F6 | 	mov	local05, result1 wz
26620     A4 FF 9F AD |  if_e	jmp	#LR__3931
26624                 | LR__3932
26624     04 26 0E F2 | 	cmp	local05, #4 wz
26628     02 26 06 A6 |  if_e	mov	local05, #2
2662c                 | LR__3933
2662c                 | ' 	}
2662c                 | ' #line 2590 "ff.c"
2662c                 | ' 	return res;
2662c     13 FB 01 F6 | 	mov	result1, local05
26630     A7 F0 03 F6 | 	mov	ptra, fp
26634     B2 00 A0 FD | 	call	#popregs_
26638                 | _fatfs_cc_dir_remove_ret
26638     2D 00 64 FD | 	ret
2663c                 | 
2663c                 | _fatfs_cc_get_fileinfo
2663c     0F 4A 05 F6 | 	mov	COUNT_, #15
26640     A8 00 A0 FD | 	call	#pushregs_
26644     09 1F 02 F6 | 	mov	local01, arg01
26648     0A 21 02 F6 | 	mov	local02, arg02
2664c     0F 23 02 FB | 	rdlong	local03, local01
26650     1C 20 06 F1 | 	add	local02, #28
26654     10 01 48 FC | 	wrbyte	#0, local02
26658     1C 20 86 F1 | 	sub	local02, #28
2665c     18 1E 06 F1 | 	add	local01, #24
26660     0F 25 0A FB | 	rdlong	local04, local01 wz
26664     18 1E 86 F1 | 	sub	local01, #24
26668     90 03 90 AD |  if_e	jmp	#LR__3954
2666c     2C 1E 06 F1 | 	add	local01, #44
26670     0F 25 02 FB | 	rdlong	local04, local01
26674     2C 1E 86 F1 | 	sub	local01, #44
26678     FF FF 7F FF 
2667c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26680     D8 00 90 AD |  if_e	jmp	#LR__3943
26684     00 26 06 F6 | 	mov	local05, #0
26688     00 28 06 F6 | 	mov	local06, #0
2668c     00 2A 06 F6 | 	mov	local07, #0
26690                 | ' 			si = di = 0;
26690                 | ' 			hs = 0;
26690                 | ' 			while (fs->lfnbuf[si] != 0) {
26690                 | LR__3940
26690     0C 22 06 F1 | 	add	local03, #12
26694     11 25 02 FB | 	rdlong	local04, local03
26698     0C 22 86 F1 | 	sub	local03, #12
2669c     14 2D 02 F6 | 	mov	local08, local06
266a0     01 2C 66 F0 | 	shl	local08, #1
266a4     12 2D 02 F1 | 	add	local08, local04
266a8     16 25 EA FA | 	rdword	local04, local08 wz
266ac     90 00 90 AD |  if_e	jmp	#LR__3942
266b0     0C 22 06 F1 | 	add	local03, #12
266b4     11 2F 02 FB | 	rdlong	local09, local03
266b8     0C 22 86 F1 | 	sub	local03, #12
266bc     14 31 02 F6 | 	mov	local10, local06
266c0     01 30 66 F0 | 	shl	local10, #1
266c4     17 31 02 F1 | 	add	local10, local09
266c8     18 33 E2 FA | 	rdword	local11, local10
266cc     15 25 02 F6 | 	mov	local04, local07
266d0     0F 24 4E F7 | 	zerox	local04, #15 wz
266d4     01 28 06 F1 | 	add	local06, #1
266d8     24 00 90 5D |  if_ne	jmp	#LR__3941
266dc     19 35 32 F9 | 	getword	local12, local11, #0
266e0     6C 00 00 FF 
266e4     00 34 16 F2 | 	cmp	local12, ##55296 wc
266e8     14 00 90 CD |  if_b	jmp	#LR__3941
266ec     19 37 32 F9 | 	getword	local13, local11, #0
266f0     70 00 00 FF 
266f4     00 36 16 F2 | 	cmp	local13, ##57344 wc
266f8     19 2B 02 C6 |  if_b	mov	local07, local11
266fc                 | ' 					hs = wc; continue;
266fc     90 FF 9F CD |  if_b	jmp	#LR__3940
26700                 | LR__3941
26700     15 13 32 F9 | 	getword	arg01, local07, #0
26704     10 12 66 F0 | 	shl	arg01, #16
26708     19 33 32 F9 | 	getword	local11, local11, #0
2670c     19 13 42 F5 | 	or	arg01, local11
26710     13 15 02 F6 | 	mov	arg02, local05
26714     1C 20 06 F1 | 	add	local02, #28
26718     10 15 02 F1 | 	add	arg02, local02
2671c     FF 16 06 F6 | 	mov	arg03, #255
26720     13 17 82 F1 | 	sub	arg03, local05
26724     1C 20 86 F1 | 	sub	local02, #28
26728     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2672c     FD 38 0A F6 | 	mov	local14, result1 wz
26730     00 26 06 A6 |  if_e	mov	local05, #0
26734     1C 27 02 51 |  if_ne	add	local05, local14
26738     00 2A 06 56 |  if_ne	mov	local07, #0
2673c     50 FF 9F 5D |  if_ne	jmp	#LR__3940
26740                 | LR__3942
26740     15 25 02 F6 | 	mov	local04, local07
26744     0F 24 4E F7 | 	zerox	local04, #15 wz
26748     00 26 06 56 |  if_ne	mov	local05, #0
2674c     1C 20 06 F1 | 	add	local02, #28
26750     10 27 02 F1 | 	add	local05, local02
26754     13 01 48 FC | 	wrbyte	#0, local05
26758     1C 20 86 F1 | 	sub	local02, #28
2675c                 | LR__3943
2675c     00 26 06 F6 | 	mov	local05, #0
26760     00 28 06 F6 | 	mov	local06, #0
26764                 | ' 			fno->fname[di] = 0;
26764                 | ' 		}
26764                 | ' 	}
26764                 | ' 
26764                 | ' 	si = di = 0;
26764                 | ' 	while (si < 11) {
26764                 | LR__3944
26764     0B 28 16 F2 | 	cmp	local06, #11 wc
26768     20 01 90 3D |  if_ae	jmp	#LR__3947
2676c     1C 1E 06 F1 | 	add	local01, #28
26770     0F 2F 02 FB | 	rdlong	local09, local01
26774     1C 1E 86 F1 | 	sub	local01, #28
26778     14 31 02 F6 | 	mov	local10, local06
2677c     17 31 02 F1 | 	add	local10, local09
26780     18 33 C2 FA | 	rdbyte	local11, local10
26784     19 25 32 F9 | 	getword	local04, local11, #0
26788     20 24 0E F2 | 	cmp	local04, #32 wz
2678c     01 28 06 F1 | 	add	local06, #1
26790     D0 FF 9F AD |  if_e	jmp	#LR__3944
26794     19 25 32 F9 | 	getword	local04, local11, #0
26798     05 24 0E F2 | 	cmp	local04, #5 wz
2679c     E5 32 06 A6 |  if_e	mov	local11, #229
267a0     09 28 0E F2 | 	cmp	local06, #9 wz
267a4     20 00 90 5D |  if_ne	jmp	#LR__3945
267a8     0C 26 16 F2 | 	cmp	local05, #12 wc
267ac     18 00 90 3D |  if_ae	jmp	#LR__3945
267b0     13 37 02 F6 | 	mov	local13, local05
267b4     0C 20 06 F1 | 	add	local02, #12
267b8     10 37 02 F1 | 	add	local13, local02
267bc     1B 5D 48 FC | 	wrbyte	#46, local13
267c0     01 26 06 F1 | 	add	local05, #1
267c4     0C 20 86 F1 | 	sub	local02, #12
267c8                 | LR__3945
267c8     19 13 32 F9 | 	getword	arg01, local11, #0
267cc     07 12 4E F7 | 	zerox	arg01, #7 wz
267d0     00 FA 05 56 |  if_ne	mov	result1, #0
267d4                 | ' 
267d4                 | ' 	return 0;
267d4     00 FA 05 A6 |  if_e	mov	result1, #0
267d8     00 FA 0D F2 | 	cmp	result1, #0 wz
267dc     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
267e0     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
267e4     50 00 90 AD |  if_e	jmp	#LR__3946
267e8     1C 1E 06 F1 | 	add	local01, #28
267ec     0F 31 02 FB | 	rdlong	local10, local01
267f0     1C 1E 86 F1 | 	sub	local01, #28
267f4     14 2D 02 F6 | 	mov	local08, local06
267f8     18 2D 02 F1 | 	add	local08, local10
267fc     16 13 CA FA | 	rdbyte	arg01, local08 wz
26800     00 FA 05 56 |  if_ne	mov	result1, #0
26804                 | ' 
26804                 | ' 	return 0;
26804     00 FA 05 A6 |  if_e	mov	result1, #0
26808     00 FA 0D F2 | 	cmp	result1, #0 wz
2680c     28 00 90 AD |  if_e	jmp	#LR__3946
26810     19 33 32 F9 | 	getword	local11, local11, #0
26814     08 32 66 F0 | 	shl	local11, #8
26818     1C 1E 06 F1 | 	add	local01, #28
2681c     0F 39 02 FB | 	rdlong	local14, local01
26820     1C 1E 86 F1 | 	sub	local01, #28
26824     14 2F 02 F6 | 	mov	local09, local06
26828     1C 2F 02 F1 | 	add	local09, local14
2682c     17 35 C2 FA | 	rdbyte	local12, local09
26830     1A 33 42 F5 | 	or	local11, local12
26834     01 28 06 F1 | 	add	local06, #1
26838                 | LR__3946
26838     19 13 02 F6 | 	mov	arg01, local11
2683c     01 00 00 FF 
26840     52 15 06 F6 | 	mov	arg02, ##850
26844     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
26848     FD 32 02 F6 | 	mov	local11, result1
2684c     19 25 02 F6 | 	mov	local04, local11
26850     0F 24 4E F7 | 	zerox	local04, #15 wz
26854     00 26 06 A6 |  if_e	mov	local05, #0
26858     30 00 90 AD |  if_e	jmp	#LR__3947
2685c     19 13 32 F9 | 	getword	arg01, local11, #0
26860     13 15 02 F6 | 	mov	arg02, local05
26864     0C 20 06 F1 | 	add	local02, #12
26868     10 15 02 F1 | 	add	arg02, local02
2686c     0C 16 06 F6 | 	mov	arg03, #12
26870     13 17 82 F1 | 	sub	arg03, local05
26874     0C 20 86 F1 | 	sub	local02, #12
26878     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2687c     FD 38 0A F6 | 	mov	local14, result1 wz
26880     00 26 06 A6 |  if_e	mov	local05, #0
26884     1C 27 02 51 |  if_ne	add	local05, local14
26888     D8 FE 9F 5D |  if_ne	jmp	#LR__3944
2688c                 | LR__3947
2688c     13 25 02 F6 | 	mov	local04, local05
26890     0C 20 06 F1 | 	add	local02, #12
26894     10 25 02 F1 | 	add	local04, local02
26898     12 01 48 FC | 	wrbyte	#0, local04
2689c     10 20 06 F1 | 	add	local02, #16
268a0     10 25 CA FA | 	rdbyte	local04, local02 wz
268a4     1C 20 86 F1 | 	sub	local02, #28
268a8     F8 00 90 5D |  if_ne	jmp	#LR__3953
268ac     00 26 0E F2 | 	cmp	local05, #0 wz
268b0     1C 00 90 5D |  if_ne	jmp	#LR__3948
268b4     13 37 02 F6 | 	mov	local13, local05
268b8     1C 20 06 F1 | 	add	local02, #28
268bc     10 37 02 F1 | 	add	local13, local02
268c0     1B 7F 48 FC | 	wrbyte	#63, local13
268c4     01 26 06 F1 | 	add	local05, #1
268c8     1C 20 86 F1 | 	sub	local02, #28
268cc     A4 00 90 FD | 	jmp	#LR__3952
268d0                 | LR__3948
268d0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
268d0     00 26 06 F6 | 	mov	local05, #0
268d4     00 28 06 F6 | 	mov	local06, #0
268d8     08 3A 06 F6 | 	mov	local15, #8
268dc                 | LR__3949
268dc     14 25 02 F6 | 	mov	local04, local06
268e0     0C 20 06 F1 | 	add	local02, #12
268e4     10 25 02 F1 | 	add	local04, local02
268e8     12 37 CA FA | 	rdbyte	local13, local04 wz
268ec     0C 20 86 F1 | 	sub	local02, #12
268f0     80 00 90 AD |  if_e	jmp	#LR__3951
268f4     14 2D 02 F6 | 	mov	local08, local06
268f8     0C 20 06 F1 | 	add	local02, #12
268fc     10 2D 02 F1 | 	add	local08, local02
26900     16 33 C2 FA | 	rdbyte	local11, local08
26904     19 39 32 F9 | 	getword	local14, local11, #0
26908     2E 38 0E F2 | 	cmp	local14, #46 wz
2690c     0C 20 86 F1 | 	sub	local02, #12
26910     10 3A 06 A6 |  if_e	mov	local15, #16
26914     19 39 32 F9 | 	getword	local14, local11, #0
26918     41 38 16 F2 | 	cmp	local14, #65 wc
2691c     30 00 90 CD |  if_b	jmp	#LR__3950
26920     19 2D 32 F9 | 	getword	local08, local11, #0
26924     5B 2C 16 F2 | 	cmp	local08, #91 wc
26928     24 00 90 3D |  if_ae	jmp	#LR__3950
2692c     1C 1E 06 F1 | 	add	local01, #28
26930     0F 2F 02 FB | 	rdlong	local09, local01
26934     1C 1E 86 F1 | 	sub	local01, #28
26938     0C 2E 06 F1 | 	add	local09, #12
2693c     17 31 C2 FA | 	rdbyte	local10, local09
26940     1D 39 E2 F8 | 	getbyte	local14, local15, #0
26944     1C 31 CA F7 | 	test	local10, local14 wz
26948     19 33 32 59 |  if_ne	getword	local11, local11, #0
2694c     20 32 06 51 |  if_ne	add	local11, #32
26950                 | LR__3950
26950     13 39 02 F6 | 	mov	local14, local05
26954     1C 20 06 F1 | 	add	local02, #28
26958     10 39 02 F1 | 	add	local14, local02
2695c     19 33 32 F9 | 	getword	local11, local11, #0
26960     1C 33 42 FC | 	wrbyte	local11, local14
26964     01 28 06 F1 | 	add	local06, #1
26968     01 26 06 F1 | 	add	local05, #1
2696c     1C 20 86 F1 | 	sub	local02, #28
26970     68 FF 9F FD | 	jmp	#LR__3949
26974                 | LR__3951
26974                 | LR__3952
26974     1C 20 06 F1 | 	add	local02, #28
26978     10 27 02 F1 | 	add	local05, local02
2697c     13 01 48 FC | 	wrbyte	#0, local05
26980     1C 1E 06 F1 | 	add	local01, #28
26984     0F 25 02 FB | 	rdlong	local04, local01
26988     1C 1E 86 F1 | 	sub	local01, #28
2698c     0C 24 06 F1 | 	add	local04, #12
26990     12 37 CA FA | 	rdbyte	local13, local04 wz
26994     1C 20 86 F1 | 	sub	local02, #28
26998     0C 20 06 A1 |  if_e	add	local02, #12
2699c     10 01 48 AC |  if_e	wrbyte	#0, local02
269a0     0C 20 86 A1 |  if_e	sub	local02, #12
269a4                 | LR__3953
269a4     1C 1E 06 F1 | 	add	local01, #28
269a8     0F 35 02 FB | 	rdlong	local12, local01
269ac     0B 34 06 F1 | 	add	local12, #11
269b0     1A 25 C2 FA | 	rdbyte	local04, local12
269b4     3F 24 06 F5 | 	and	local04, #63
269b8     08 20 06 F1 | 	add	local02, #8
269bc     10 25 42 FC | 	wrbyte	local04, local02
269c0     08 20 86 F1 | 	sub	local02, #8
269c4     0F 13 02 FB | 	rdlong	arg01, local01
269c8     1C 12 06 F1 | 	add	arg01, #28
269cc                 | ' {
269cc                 | ' 
269cc                 | ' 	return *((DWORD*)ptr);
269cc     09 FB 01 FB | 	rdlong	result1, arg01
269d0     10 FB 61 FC | 	wrlong	result1, local02
269d4     0F 13 02 FB | 	rdlong	arg01, local01
269d8     16 12 06 F1 | 	add	arg01, #22
269dc                 | ' {
269dc                 | ' 
269dc                 | ' 	return *((WORD*)ptr);
269dc     09 FB E1 FA | 	rdword	result1, arg01
269e0     06 20 06 F1 | 	add	local02, #6
269e4     10 FB 51 FC | 	wrword	result1, local02
269e8     0F 13 02 FB | 	rdlong	arg01, local01
269ec     18 12 06 F1 | 	add	arg01, #24
269f0                 | ' {
269f0                 | ' 
269f0                 | ' 	return *((WORD*)ptr);
269f0     09 FB E1 FA | 	rdword	result1, arg01
269f4     02 20 86 F1 | 	sub	local02, #2
269f8     10 FB 51 FC | 	wrword	result1, local02
269fc                 | LR__3954
269fc     A7 F0 03 F6 | 	mov	ptra, fp
26a00     B2 00 A0 FD | 	call	#popregs_
26a04                 | _fatfs_cc_get_fileinfo_ret
26a04     2D 00 64 FD | 	ret
26a08                 | 
26a08                 | _fatfs_cc_create_name
26a08     0D 4A 05 F6 | 	mov	COUNT_, #13
26a0c     A8 00 A0 FD | 	call	#pushregs_
26a10     34 F0 07 F1 | 	add	ptra, #52
26a14     04 4E 05 F1 | 	add	fp, #4
26a18     A7 12 62 FC | 	wrlong	arg01, fp
26a1c     04 4E 05 F1 | 	add	fp, #4
26a20     A7 14 62 FC | 	wrlong	arg02, fp
26a24     0A FB 01 FB | 	rdlong	result1, arg02
26a28     28 4E 05 F1 | 	add	fp, #40
26a2c     A7 FA 61 FC | 	wrlong	result1, fp
26a30     2C 4E 85 F1 | 	sub	fp, #44
26a34     A7 FA 01 FB | 	rdlong	result1, fp
26a38     FD 1E 02 FB | 	rdlong	local01, result1
26a3c     0C 1E 06 F1 | 	add	local01, #12
26a40     0F 21 02 FB | 	rdlong	local02, local01
26a44     14 4E 05 F1 | 	add	fp, #20
26a48     A7 20 62 FC | 	wrlong	local02, fp
26a4c     14 4E 05 F1 | 	add	fp, #20
26a50     A7 00 68 FC | 	wrlong	#0, fp
26a54     2C 4E 85 F1 | 	sub	fp, #44
26a58                 | ' 
26a58                 | ' 
26a58                 | ' 
26a58                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
26a58                 | ' 	for (;;) {
26a58                 | LR__3960
26a58     30 4E 05 F1 | 	add	fp, #48
26a5c     A7 12 02 F6 | 	mov	arg01, fp
26a60     30 4E 85 F1 | 	sub	fp, #48
26a64     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
26a68     1C 4E 05 F1 | 	add	fp, #28
26a6c     A7 FA 61 FC | 	wrlong	result1, fp
26a70     1C 4E 85 F1 | 	sub	fp, #28
26a74     FF FF 7F FF 
26a78     FF FB 0D F2 | 	cmp	result1, ##-1 wz
26a7c     06 FA 05 A6 |  if_e	mov	result1, #6
26a80     74 08 90 AD |  if_e	jmp	#LR__4000
26a84     1C 4E 05 F1 | 	add	fp, #28
26a88     A7 1E 02 FB | 	rdlong	local01, fp
26a8c     1C 4E 85 F1 | 	sub	fp, #28
26a90     80 00 00 FF 
26a94     00 1E 16 F2 | 	cmp	local01, ##65536 wc
26a98     3C 00 90 CD |  if_b	jmp	#LR__3961
26a9c     18 4E 05 F1 | 	add	fp, #24
26aa0     A7 22 02 FB | 	rdlong	local03, fp
26aa4     14 4E 05 F1 | 	add	fp, #20
26aa8     A7 1E 02 FB | 	rdlong	local01, fp
26aac     0F 25 02 F6 | 	mov	local04, local01
26ab0     01 24 06 F1 | 	add	local04, #1
26ab4     A7 24 62 FC | 	wrlong	local04, fp
26ab8     01 1E 66 F0 | 	shl	local01, #1
26abc     11 1F 02 F1 | 	add	local01, local03
26ac0     10 4E 85 F1 | 	sub	fp, #16
26ac4     A7 26 02 FB | 	rdlong	local05, fp
26ac8     1C 4E 85 F1 | 	sub	fp, #28
26acc     13 29 02 F6 | 	mov	local06, local05
26ad0     10 28 46 F0 | 	shr	local06, #16
26ad4     0F 29 52 FC | 	wrword	local06, local01
26ad8                 | LR__3961
26ad8     1C 4E 05 F1 | 	add	fp, #28
26adc     A7 1E 02 FB | 	rdlong	local01, fp
26ae0     08 4E 85 F1 | 	sub	fp, #8
26ae4     A7 1E 52 FC | 	wrword	local01, fp
26ae8     A7 1E E2 FA | 	rdword	local01, fp
26aec     14 4E 85 F1 | 	sub	fp, #20
26af0     20 1E 16 F2 | 	cmp	local01, #32 wc
26af4     B0 00 90 CD |  if_b	jmp	#LR__3963
26af8     14 4E 05 F1 | 	add	fp, #20
26afc     A7 1E E2 FA | 	rdword	local01, fp
26b00     14 4E 85 F1 | 	sub	fp, #20
26b04     2F 1E 0E F2 | 	cmp	local01, #47 wz
26b08     14 4E 05 51 |  if_ne	add	fp, #20
26b0c     A7 24 E2 5A |  if_ne	rdword	local04, fp
26b10     14 4E 85 51 |  if_ne	sub	fp, #20
26b14     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
26b18     8C 00 90 AD |  if_e	jmp	#LR__3963
26b1c     14 4E 05 F1 | 	add	fp, #20
26b20     A7 12 E2 FA | 	rdword	arg01, fp
26b24     14 4E 85 F1 | 	sub	fp, #20
26b28     80 12 16 F2 | 	cmp	arg01, #128 wc
26b2c     24 00 90 3D |  if_ae	jmp	#LR__3962
26b30     65 01 00 FF 
26b34     6C 12 06 F6 | 	mov	arg01, ##@LR__4622
26b38     14 4E 05 F1 | 	add	fp, #20
26b3c     A7 14 E2 FA | 	rdword	arg02, fp
26b40     14 4E 85 F1 | 	sub	fp, #20
26b44     FC D0 BF FD | 	call	#_fatfs_cc_strchr
26b48     00 FA 0D F2 | 	cmp	result1, #0 wz
26b4c     06 FA 05 56 |  if_ne	mov	result1, #6
26b50     A4 07 90 5D |  if_ne	jmp	#LR__4000
26b54                 | LR__3962
26b54     2C 4E 05 F1 | 	add	fp, #44
26b58     A7 28 02 FB | 	rdlong	local06, fp
26b5c     2C 4E 85 F1 | 	sub	fp, #44
26b60     FF 28 16 F2 | 	cmp	local06, #255 wc
26b64     06 FA 05 36 |  if_ae	mov	result1, #6
26b68     8C 07 90 3D |  if_ae	jmp	#LR__4000
26b6c     18 4E 05 F1 | 	add	fp, #24
26b70     A7 22 02 FB | 	rdlong	local03, fp
26b74     14 4E 05 F1 | 	add	fp, #20
26b78     A7 20 02 FB | 	rdlong	local02, fp
26b7c     10 25 02 F6 | 	mov	local04, local02
26b80     01 24 06 F1 | 	add	local04, #1
26b84     A7 24 62 FC | 	wrlong	local04, fp
26b88     10 1F 02 F6 | 	mov	local01, local02
26b8c     01 1E 66 F0 | 	shl	local01, #1
26b90     11 1F 02 F1 | 	add	local01, local03
26b94     18 4E 85 F1 | 	sub	fp, #24
26b98     A7 28 E2 FA | 	rdword	local06, fp
26b9c     14 4E 85 F1 | 	sub	fp, #20
26ba0     0F 29 52 FC | 	wrword	local06, local01
26ba4     B0 FE 9F FD | 	jmp	#LR__3960
26ba8                 | LR__3963
26ba8     14 4E 05 F1 | 	add	fp, #20
26bac     A7 2A E2 FA | 	rdword	local07, fp
26bb0     14 4E 85 F1 | 	sub	fp, #20
26bb4     20 2A 16 F2 | 	cmp	local07, #32 wc
26bb8     10 4E 05 C1 |  if_b	add	fp, #16
26bbc     A7 08 48 CC |  if_b	wrbyte	#4, fp
26bc0     10 4E 85 C1 |  if_b	sub	fp, #16
26bc4     74 00 90 CD |  if_b	jmp	#LR__3968
26bc8     97 24 48 FB | 	callpa	#(@LR__3966-@LR__3964)>>2,fcache_load_ptr_
26bcc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
26bcc                 | LR__3964
26bcc     30 4E 05 F1 | 	add	fp, #48
26bd0     A7 24 02 FB | 	rdlong	local04, fp
26bd4     30 4E 85 F1 | 	sub	fp, #48
26bd8     12 2B C2 FA | 	rdbyte	local07, local04
26bdc     2F 2A 0E F2 | 	cmp	local07, #47 wz
26be0     18 00 90 AD |  if_e	jmp	#LR__3965
26be4     30 4E 05 F1 | 	add	fp, #48
26be8     A7 24 02 FB | 	rdlong	local04, fp
26bec     30 4E 85 F1 | 	sub	fp, #48
26bf0     12 21 C2 FA | 	rdbyte	local02, local04
26bf4     5C 20 0E F2 | 	cmp	local02, #92 wz
26bf8     18 00 90 5D |  if_ne	jmp	#LR__3967
26bfc                 | LR__3965
26bfc     30 4E 05 F1 | 	add	fp, #48
26c00     A7 1E 02 FB | 	rdlong	local01, fp
26c04     01 1E 06 F1 | 	add	local01, #1
26c08     A7 1E 62 FC | 	wrlong	local01, fp
26c0c     30 4E 85 F1 | 	sub	fp, #48
26c10     B8 FF 9F FD | 	jmp	#LR__3964
26c14                 | LR__3966
26c14                 | LR__3967
26c14     10 4E 05 F1 | 	add	fp, #16
26c18     A7 00 48 FC | 	wrbyte	#0, fp
26c1c     20 4E 05 F1 | 	add	fp, #32
26c20     A7 28 02 FB | 	rdlong	local06, fp
26c24     30 4E 85 F1 | 	sub	fp, #48
26c28     14 2B C2 FA | 	rdbyte	local07, local06
26c2c     20 2A 16 F2 | 	cmp	local07, #32 wc
26c30     10 4E 05 C1 |  if_b	add	fp, #16
26c34     A7 08 48 CC |  if_b	wrbyte	#4, fp
26c38     10 4E 85 C1 |  if_b	sub	fp, #16
26c3c                 | LR__3968
26c3c     08 4E 05 F1 | 	add	fp, #8
26c40     A7 2A 02 FB | 	rdlong	local07, fp
26c44     28 4E 05 F1 | 	add	fp, #40
26c48     A7 1E 02 FB | 	rdlong	local01, fp
26c4c     30 4E 85 F1 | 	sub	fp, #48
26c50     15 1F 62 FC | 	wrlong	local01, local07
26c54     97 38 48 FB | 	callpa	#(@LR__3970-@LR__3969)>>2,fcache_load_ptr_
26c58                 | ' 	}
26c58                 | ' 	*path = p;
26c58                 | ' #line 2862 "ff.c"
26c58                 | ' 	while (di) {
26c58                 | LR__3969
26c58     2C 4E 05 F1 | 	add	fp, #44
26c5c     A7 2A 0A FB | 	rdlong	local07, fp wz
26c60     2C 4E 85 F1 | 	sub	fp, #44
26c64     60 00 90 AD |  if_e	jmp	#LR__3971
26c68     18 4E 05 F1 | 	add	fp, #24
26c6c     A7 28 02 FB | 	rdlong	local06, fp
26c70     14 4E 05 F1 | 	add	fp, #20
26c74     A7 24 02 FB | 	rdlong	local04, fp
26c78     01 24 86 F1 | 	sub	local04, #1
26c7c     01 24 66 F0 | 	shl	local04, #1
26c80     14 25 02 F1 | 	add	local04, local06
26c84     12 29 E2 FA | 	rdword	local06, local04
26c88     18 4E 85 F1 | 	sub	fp, #24
26c8c     A7 28 52 FC | 	wrword	local06, fp
26c90     A7 2A E2 FA | 	rdword	local07, fp
26c94     14 4E 85 F1 | 	sub	fp, #20
26c98     20 2A 0E F2 | 	cmp	local07, #32 wz
26c9c     14 4E 05 51 |  if_ne	add	fp, #20
26ca0     A7 1E E2 5A |  if_ne	rdword	local01, fp
26ca4     14 4E 85 51 |  if_ne	sub	fp, #20
26ca8     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
26cac     18 00 90 5D |  if_ne	jmp	#LR__3971
26cb0     2C 4E 05 F1 | 	add	fp, #44
26cb4     A7 1E 02 FB | 	rdlong	local01, fp
26cb8     01 1E 86 F1 | 	sub	local01, #1
26cbc     A7 1E 62 FC | 	wrlong	local01, fp
26cc0     2C 4E 85 F1 | 	sub	fp, #44
26cc4     90 FF 9F FD | 	jmp	#LR__3969
26cc8                 | LR__3970
26cc8                 | LR__3971
26cc8     18 4E 05 F1 | 	add	fp, #24
26ccc     A7 2C 02 FB | 	rdlong	local08, fp
26cd0     14 4E 05 F1 | 	add	fp, #20
26cd4     A7 24 02 FB | 	rdlong	local04, fp
26cd8     01 24 66 F0 | 	shl	local04, #1
26cdc     16 25 02 F1 | 	add	local04, local08
26ce0     12 01 58 FC | 	wrword	#0, local04
26ce4     A7 2A 0A FB | 	rdlong	local07, fp wz
26ce8     2C 4E 85 F1 | 	sub	fp, #44
26cec     06 FA 05 A6 |  if_e	mov	result1, #6
26cf0     04 06 90 AD |  if_e	jmp	#LR__4000
26cf4                 | ' 
26cf4                 | ' 
26cf4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
26cf4     28 4E 05 F1 | 	add	fp, #40
26cf8     A7 00 68 FC | 	wrlong	#0, fp
26cfc     28 4E 85 F1 | 	sub	fp, #40
26d00     97 22 48 FB | 	callpa	#(@LR__3973-@LR__3972)>>2,fcache_load_ptr_
26d04                 | LR__3972
26d04     18 4E 05 F1 | 	add	fp, #24
26d08     A7 2E 02 FB | 	rdlong	local09, fp
26d0c     10 4E 05 F1 | 	add	fp, #16
26d10     A7 30 02 FB | 	rdlong	local10, fp
26d14     28 4E 85 F1 | 	sub	fp, #40
26d18     01 30 66 F0 | 	shl	local10, #1
26d1c     17 31 02 F1 | 	add	local10, local09
26d20     18 33 E2 FA | 	rdword	local11, local10
26d24     20 32 0E F2 | 	cmp	local11, #32 wz
26d28     1C 00 90 5D |  if_ne	jmp	#LR__3974
26d2c     28 4E 05 F1 | 	add	fp, #40
26d30     A7 34 02 FB | 	rdlong	local12, fp
26d34     1A 27 02 F6 | 	mov	local05, local12
26d38     01 26 06 F1 | 	add	local05, #1
26d3c     A7 26 62 FC | 	wrlong	local05, fp
26d40     28 4E 85 F1 | 	sub	fp, #40
26d44     BC FF 9F FD | 	jmp	#LR__3972
26d48                 | LR__3973
26d48                 | LR__3974
26d48     28 4E 05 F1 | 	add	fp, #40
26d4c     A7 2A 02 FB | 	rdlong	local07, fp
26d50     28 4E 85 F1 | 	sub	fp, #40
26d54     01 2A 16 F2 | 	cmp	local07, #1 wc
26d58     28 00 90 3D |  if_ae	jmp	#LR__3975
26d5c     18 4E 05 F1 | 	add	fp, #24
26d60     A7 22 02 FB | 	rdlong	local03, fp
26d64     10 4E 05 F1 | 	add	fp, #16
26d68     A7 2E 02 FB | 	rdlong	local09, fp
26d6c     28 4E 85 F1 | 	sub	fp, #40
26d70     01 2E 66 F0 | 	shl	local09, #1
26d74     11 2F 02 F1 | 	add	local09, local03
26d78     17 1F E2 FA | 	rdword	local01, local09
26d7c     2E 1E 0E F2 | 	cmp	local01, #46 wz
26d80     14 00 90 5D |  if_ne	jmp	#LR__3976
26d84                 | LR__3975
26d84     10 4E 05 F1 | 	add	fp, #16
26d88     A7 2A C2 FA | 	rdbyte	local07, fp
26d8c     03 2A 46 F5 | 	or	local07, #3
26d90     A7 2A 42 FC | 	wrbyte	local07, fp
26d94     10 4E 85 F1 | 	sub	fp, #16
26d98                 | LR__3976
26d98     97 2C 48 FB | 	callpa	#(@LR__3978-@LR__3977)>>2,fcache_load_ptr_
26d9c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
26d9c                 | LR__3977
26d9c     2C 4E 05 F1 | 	add	fp, #44
26da0     A7 2A 02 FB | 	rdlong	local07, fp
26da4     2C 4E 85 F1 | 	sub	fp, #44
26da8     01 2A 16 F2 | 	cmp	local07, #1 wc
26dac     44 00 90 CD |  if_b	jmp	#LR__3979
26db0     18 4E 05 F1 | 	add	fp, #24
26db4     A7 28 02 FB | 	rdlong	local06, fp
26db8     14 4E 05 F1 | 	add	fp, #20
26dbc     A7 22 02 FB | 	rdlong	local03, fp
26dc0     2C 4E 85 F1 | 	sub	fp, #44
26dc4     01 22 86 F1 | 	sub	local03, #1
26dc8     01 22 66 F0 | 	shl	local03, #1
26dcc     14 23 02 F1 | 	add	local03, local06
26dd0     11 1F E2 FA | 	rdword	local01, local03
26dd4     2E 1E 0E F2 | 	cmp	local01, #46 wz
26dd8     18 00 90 AD |  if_e	jmp	#LR__3979
26ddc     2C 4E 05 F1 | 	add	fp, #44
26de0     A7 1E 02 FB | 	rdlong	local01, fp
26de4     01 1E 86 F1 | 	sub	local01, #1
26de8     A7 1E 62 FC | 	wrlong	local01, fp
26dec     2C 4E 85 F1 | 	sub	fp, #44
26df0     A8 FF 9F FD | 	jmp	#LR__3977
26df4                 | LR__3978
26df4                 | LR__3979
26df4     04 4E 05 F1 | 	add	fp, #4
26df8     A7 12 02 FB | 	rdlong	arg01, fp
26dfc     04 4E 85 F1 | 	sub	fp, #4
26e00     20 12 06 F1 | 	add	arg01, #32
26e04     20 14 06 F6 | 	mov	arg02, #32
26e08     0B 16 06 F6 | 	mov	arg03, #11
26e0c     09 37 02 F6 | 	mov	local13, arg01
26e10     98 00 A0 FD | 	call	#\builtin_bytefill_
26e14     1B FB 01 F6 | 	mov	result1, local13
26e18     0C 4E 05 F1 | 	add	fp, #12
26e1c     A7 00 48 FC | 	wrbyte	#0, fp
26e20     A7 2A C2 FA | 	rdbyte	local07, fp
26e24     14 4E 05 F1 | 	add	fp, #20
26e28     A7 2A 62 FC | 	wrlong	local07, fp
26e2c     04 4E 05 F1 | 	add	fp, #4
26e30     A7 10 68 FC | 	wrlong	#8, fp
26e34     24 4E 85 F1 | 	sub	fp, #36
26e38                 | ' 
26e38                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
26e38                 | ' 	i = b = 0; ni = 8;
26e38                 | ' 	for (;;) {
26e38                 | LR__3980
26e38     18 4E 05 F1 | 	add	fp, #24
26e3c     A7 22 02 FB | 	rdlong	local03, fp
26e40     10 4E 05 F1 | 	add	fp, #16
26e44     A7 2E 02 FB | 	rdlong	local09, fp
26e48     17 25 02 F6 | 	mov	local04, local09
26e4c     01 24 06 F1 | 	add	local04, #1
26e50     A7 24 62 FC | 	wrlong	local04, fp
26e54     01 2E 66 F0 | 	shl	local09, #1
26e58     11 2F 02 F1 | 	add	local09, local03
26e5c     17 29 E2 FA | 	rdword	local06, local09
26e60     14 4E 85 F1 | 	sub	fp, #20
26e64     A7 28 52 FC | 	wrword	local06, fp
26e68     A7 2A EA FA | 	rdword	local07, fp wz
26e6c     14 4E 85 F1 | 	sub	fp, #20
26e70     74 03 90 AD |  if_e	jmp	#LR__3996
26e74     14 4E 05 F1 | 	add	fp, #20
26e78     A7 2A E2 FA | 	rdword	local07, fp
26e7c     14 4E 85 F1 | 	sub	fp, #20
26e80     20 2A 0E F2 | 	cmp	local07, #32 wz
26e84     30 00 90 AD |  if_e	jmp	#LR__3981
26e88     14 4E 05 F1 | 	add	fp, #20
26e8c     A7 1E E2 FA | 	rdword	local01, fp
26e90     14 4E 85 F1 | 	sub	fp, #20
26e94     2E 1E 0E F2 | 	cmp	local01, #46 wz
26e98     34 00 90 5D |  if_ne	jmp	#LR__3982
26e9c     28 4E 05 F1 | 	add	fp, #40
26ea0     A7 24 02 FB | 	rdlong	local04, fp
26ea4     04 4E 05 F1 | 	add	fp, #4
26ea8     A7 30 02 FB | 	rdlong	local10, fp
26eac     2C 4E 85 F1 | 	sub	fp, #44
26eb0     18 25 0A F2 | 	cmp	local04, local10 wz
26eb4     18 00 90 AD |  if_e	jmp	#LR__3982
26eb8                 | LR__3981
26eb8     10 4E 05 F1 | 	add	fp, #16
26ebc     A7 2A C2 FA | 	rdbyte	local07, fp
26ec0     03 2A 46 F5 | 	or	local07, #3
26ec4     A7 2A 42 FC | 	wrbyte	local07, fp
26ec8     10 4E 85 F1 | 	sub	fp, #16
26ecc                 | ' 			cf |=  0x01  |  0x02 ;
26ecc                 | ' 			continue;
26ecc     68 FF 9F FD | 	jmp	#LR__3980
26ed0                 | LR__3982
26ed0     20 4E 05 F1 | 	add	fp, #32
26ed4     A7 2A 02 FB | 	rdlong	local07, fp
26ed8     04 4E 05 F1 | 	add	fp, #4
26edc     A7 1E 02 FB | 	rdlong	local01, fp
26ee0     24 4E 85 F1 | 	sub	fp, #36
26ee4     0F 2B 12 F2 | 	cmp	local07, local01 wc
26ee8     1C 00 90 3D |  if_ae	jmp	#LR__3983
26eec     28 4E 05 F1 | 	add	fp, #40
26ef0     A7 2C 02 FB | 	rdlong	local08, fp
26ef4     04 4E 05 F1 | 	add	fp, #4
26ef8     A7 30 02 FB | 	rdlong	local10, fp
26efc     2C 4E 85 F1 | 	sub	fp, #44
26f00     18 2D 0A F2 | 	cmp	local08, local10 wz
26f04     B0 00 90 5D |  if_ne	jmp	#LR__3985
26f08                 | LR__3983
26f08     24 4E 05 F1 | 	add	fp, #36
26f0c     A7 2A 02 FB | 	rdlong	local07, fp
26f10     24 4E 85 F1 | 	sub	fp, #36
26f14     0B 2A 0E F2 | 	cmp	local07, #11 wz
26f18     18 00 90 5D |  if_ne	jmp	#LR__3984
26f1c     10 4E 05 F1 | 	add	fp, #16
26f20     A7 2A C2 FA | 	rdbyte	local07, fp
26f24     03 2A 46 F5 | 	or	local07, #3
26f28     A7 2A 42 FC | 	wrbyte	local07, fp
26f2c     10 4E 85 F1 | 	sub	fp, #16
26f30                 | ' 				cf |=  0x01  |  0x02 ;
26f30                 | ' 				break;
26f30     B4 02 90 FD | 	jmp	#LR__3996
26f34                 | LR__3984
26f34     28 4E 05 F1 | 	add	fp, #40
26f38     A7 2A 02 FB | 	rdlong	local07, fp
26f3c     04 4E 05 F1 | 	add	fp, #4
26f40     A7 1E 02 FB | 	rdlong	local01, fp
26f44     2C 4E 85 F1 | 	sub	fp, #44
26f48     0F 2B 0A F2 | 	cmp	local07, local01 wz
26f4c     10 4E 05 51 |  if_ne	add	fp, #16
26f50     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26f54     03 2A 46 55 |  if_ne	or	local07, #3
26f58     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26f5c     10 4E 85 51 |  if_ne	sub	fp, #16
26f60     28 4E 05 F1 | 	add	fp, #40
26f64     A7 2A 02 FB | 	rdlong	local07, fp
26f68     04 4E 05 F1 | 	add	fp, #4
26f6c     A7 20 02 FB | 	rdlong	local02, fp
26f70     2C 4E 85 F1 | 	sub	fp, #44
26f74     10 2B 1A F2 | 	cmp	local07, local02 wcz
26f78     6C 02 90 1D |  if_a	jmp	#LR__3996
26f7c     2C 4E 05 F1 | 	add	fp, #44
26f80     A7 2A 02 FB | 	rdlong	local07, fp
26f84     04 4E 85 F1 | 	sub	fp, #4
26f88     A7 2A 62 FC | 	wrlong	local07, fp
26f8c     08 4E 85 F1 | 	sub	fp, #8
26f90     A7 10 68 FC | 	wrlong	#8, fp
26f94     04 4E 05 F1 | 	add	fp, #4
26f98     A7 16 68 FC | 	wrlong	#11, fp
26f9c     18 4E 85 F1 | 	sub	fp, #24
26fa0     A7 32 C2 FA | 	rdbyte	local11, fp
26fa4     19 2B E2 F8 | 	getbyte	local07, local11, #0
26fa8     02 2A 66 F0 | 	shl	local07, #2
26fac     A7 2A 42 FC | 	wrbyte	local07, fp
26fb0     0C 4E 85 F1 | 	sub	fp, #12
26fb4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
26fb4                 | ' 			continue;
26fb4     80 FE 9F FD | 	jmp	#LR__3980
26fb8                 | LR__3985
26fb8     14 4E 05 F1 | 	add	fp, #20
26fbc     A7 2A E2 FA | 	rdword	local07, fp
26fc0     14 4E 85 F1 | 	sub	fp, #20
26fc4     80 2A 16 F2 | 	cmp	local07, #128 wc
26fc8     6C 00 90 CD |  if_b	jmp	#LR__3987
26fcc     10 4E 05 F1 | 	add	fp, #16
26fd0     A7 2A C2 FA | 	rdbyte	local07, fp
26fd4     02 2A 46 F5 | 	or	local07, #2
26fd8     A7 2A 42 FC | 	wrbyte	local07, fp
26fdc     04 4E 05 F1 | 	add	fp, #4
26fe0     A7 12 E2 FA | 	rdword	arg01, fp
26fe4     14 4E 85 F1 | 	sub	fp, #20
26fe8     01 00 00 FF 
26fec     52 15 06 F6 | 	mov	arg02, ##850
26ff0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
26ff4     14 4E 05 F1 | 	add	fp, #20
26ff8     A7 FA 51 FC | 	wrword	result1, fp
26ffc     A7 2A E2 FA | 	rdword	local07, fp
27000     14 4E 85 F1 | 	sub	fp, #20
27004     80 2A CE F7 | 	test	local07, #128 wz
27008     2C 00 90 AD |  if_e	jmp	#LR__3986
2700c     14 4E 05 F1 | 	add	fp, #20
27010     A7 20 E2 FA | 	rdword	local02, fp
27014     7F 20 06 F5 | 	and	local02, #127
27018     01 00 00 FF 
2701c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
27020     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
27024     10 2B C2 FA | 	rdbyte	local07, local02
27028     A7 2A 52 FC | 	wrword	local07, fp
2702c     14 4E 85 F1 | 	sub	fp, #20
27030     01 00 00 FF 
27034     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
27038                 | LR__3986
27038                 | LR__3987
27038     14 4E 05 F1 | 	add	fp, #20
2703c     A7 2A E2 FA | 	rdword	local07, fp
27040     14 4E 85 F1 | 	sub	fp, #20
27044     00 2B 16 F2 | 	cmp	local07, #256 wc
27048     88 00 90 CD |  if_b	jmp	#LR__3989
2704c     24 4E 05 F1 | 	add	fp, #36
27050     A7 2A 02 FB | 	rdlong	local07, fp
27054     01 2A 86 F1 | 	sub	local07, #1
27058     04 4E 85 F1 | 	sub	fp, #4
2705c     A7 20 02 FB | 	rdlong	local02, fp
27060     20 4E 85 F1 | 	sub	fp, #32
27064     15 21 12 F2 | 	cmp	local02, local07 wc
27068     2C 00 90 CD |  if_b	jmp	#LR__3988
2706c     10 4E 05 F1 | 	add	fp, #16
27070     A7 32 C2 FA | 	rdbyte	local11, fp
27074     19 2B E2 F8 | 	getbyte	local07, local11, #0
27078     03 2A 46 F5 | 	or	local07, #3
2707c     A7 2A 42 FC | 	wrbyte	local07, fp
27080     14 4E 05 F1 | 	add	fp, #20
27084     A7 2A 02 FB | 	rdlong	local07, fp
27088     04 4E 85 F1 | 	sub	fp, #4
2708c     A7 2A 62 FC | 	wrlong	local07, fp
27090     20 4E 85 F1 | 	sub	fp, #32
27094                 | ' 				cf |=  0x01  |  0x02 ;
27094                 | ' 				i = ni; continue;
27094     A0 FD 9F FD | 	jmp	#LR__3980
27098                 | LR__3988
27098     04 4E 05 F1 | 	add	fp, #4
2709c     A7 2E 02 FB | 	rdlong	local09, fp
270a0     1C 4E 05 F1 | 	add	fp, #28
270a4     A7 30 02 FB | 	rdlong	local10, fp
270a8     18 25 02 F6 | 	mov	local04, local10
270ac     01 24 06 F1 | 	add	local04, #1
270b0     A7 24 62 FC | 	wrlong	local04, fp
270b4     20 2E 06 F1 | 	add	local09, #32
270b8     17 31 02 F1 | 	add	local10, local09
270bc     0C 4E 85 F1 | 	sub	fp, #12
270c0     A7 22 E2 FA | 	rdword	local03, fp
270c4     14 4E 85 F1 | 	sub	fp, #20
270c8     08 22 46 F0 | 	shr	local03, #8
270cc     18 23 42 FC | 	wrbyte	local03, local10
270d0     D4 00 90 FD | 	jmp	#LR__3995
270d4                 | LR__3989
270d4     14 4E 05 F1 | 	add	fp, #20
270d8     A7 2A EA FA | 	rdword	local07, fp wz
270dc     14 4E 85 F1 | 	sub	fp, #20
270e0     20 00 90 AD |  if_e	jmp	#LR__3990
270e4     65 01 00 FF 
270e8     75 12 06 F6 | 	mov	arg01, ##@LR__4623
270ec     14 4E 05 F1 | 	add	fp, #20
270f0     A7 14 E2 FA | 	rdword	arg02, fp
270f4     14 4E 85 F1 | 	sub	fp, #20
270f8     48 CB BF FD | 	call	#_fatfs_cc_strchr
270fc     00 FA 0D F2 | 	cmp	result1, #0 wz
27100     20 00 90 AD |  if_e	jmp	#LR__3991
27104                 | LR__3990
27104     14 4E 05 F1 | 	add	fp, #20
27108     A7 BE 58 FC | 	wrword	#95, fp
2710c     04 4E 85 F1 | 	sub	fp, #4
27110     A7 2A C2 FA | 	rdbyte	local07, fp
27114     03 2A 46 F5 | 	or	local07, #3
27118     A7 2A 42 FC | 	wrbyte	local07, fp
2711c     10 4E 85 F1 | 	sub	fp, #16
27120     84 00 90 FD | 	jmp	#LR__3994
27124                 | LR__3991
27124     14 4E 05 F1 | 	add	fp, #20
27128     A7 2A E2 FA | 	rdword	local07, fp
2712c     14 4E 85 F1 | 	sub	fp, #20
27130     41 2A 16 F2 | 	cmp	local07, #65 wc
27134     24 00 90 CD |  if_b	jmp	#LR__3992
27138     14 4E 05 F1 | 	add	fp, #20
2713c     A7 1E E2 FA | 	rdword	local01, fp
27140     14 4E 85 F1 | 	sub	fp, #20
27144     5B 1E 16 F2 | 	cmp	local01, #91 wc
27148     0C 4E 05 C1 |  if_b	add	fp, #12
2714c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
27150     02 2A 46 C5 |  if_b	or	local07, #2
27154     A7 2A 42 CC |  if_b	wrbyte	local07, fp
27158     0C 4E 85 C1 |  if_b	sub	fp, #12
2715c                 | LR__3992
2715c     14 4E 05 F1 | 	add	fp, #20
27160     A7 2A E2 FA | 	rdword	local07, fp
27164     14 4E 85 F1 | 	sub	fp, #20
27168     61 2A 16 F2 | 	cmp	local07, #97 wc
2716c     38 00 90 CD |  if_b	jmp	#LR__3993
27170     14 4E 05 F1 | 	add	fp, #20
27174     A7 1E E2 FA | 	rdword	local01, fp
27178     14 4E 85 F1 | 	sub	fp, #20
2717c     7B 1E 16 F2 | 	cmp	local01, #123 wc
27180     24 00 90 3D |  if_ae	jmp	#LR__3993
27184     0C 4E 05 F1 | 	add	fp, #12
27188     A7 2A C2 FA | 	rdbyte	local07, fp
2718c     01 2A 46 F5 | 	or	local07, #1
27190     A7 2A 42 FC | 	wrbyte	local07, fp
27194     08 4E 05 F1 | 	add	fp, #8
27198     A7 2A E2 FA | 	rdword	local07, fp
2719c     20 2A 86 F1 | 	sub	local07, #32
271a0     A7 2A 52 FC | 	wrword	local07, fp
271a4     14 4E 85 F1 | 	sub	fp, #20
271a8                 | LR__3993
271a8                 | LR__3994
271a8                 | LR__3995
271a8     04 4E 05 F1 | 	add	fp, #4
271ac     A7 32 02 FB | 	rdlong	local11, fp
271b0     19 2F 02 F6 | 	mov	local09, local11
271b4     1C 4E 05 F1 | 	add	fp, #28
271b8     A7 20 02 FB | 	rdlong	local02, fp
271bc     10 25 02 F6 | 	mov	local04, local02
271c0     01 24 06 F1 | 	add	local04, #1
271c4     A7 24 62 FC | 	wrlong	local04, fp
271c8     10 31 02 F6 | 	mov	local10, local02
271cc     20 2E 06 F1 | 	add	local09, #32
271d0     17 31 02 F1 | 	add	local10, local09
271d4     0C 4E 85 F1 | 	sub	fp, #12
271d8     A7 22 E2 FA | 	rdword	local03, fp
271dc     14 4E 85 F1 | 	sub	fp, #20
271e0     18 23 42 FC | 	wrbyte	local03, local10
271e4     50 FC 9F FD | 	jmp	#LR__3980
271e8                 | LR__3996
271e8     04 4E 05 F1 | 	add	fp, #4
271ec     A7 32 02 FB | 	rdlong	local11, fp
271f0     04 4E 85 F1 | 	sub	fp, #4
271f4     20 32 06 F1 | 	add	local11, #32
271f8     19 2B C2 FA | 	rdbyte	local07, local11
271fc     E5 2A 0E F2 | 	cmp	local07, #229 wz
27200     04 4E 05 A1 |  if_e	add	fp, #4
27204     A7 2A 02 AB |  if_e	rdlong	local07, fp
27208     04 4E 85 A1 |  if_e	sub	fp, #4
2720c     20 2A 06 A1 |  if_e	add	local07, #32
27210     15 0B 48 AC |  if_e	wrbyte	#5, local07
27214     24 4E 05 F1 | 	add	fp, #36
27218     A7 2A 02 FB | 	rdlong	local07, fp
2721c     24 4E 85 F1 | 	sub	fp, #36
27220     08 2A 0E F2 | 	cmp	local07, #8 wz
27224     0C 4E 05 A1 |  if_e	add	fp, #12
27228     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2722c     02 2A 66 A0 |  if_e	shl	local07, #2
27230     A7 2A 42 AC |  if_e	wrbyte	local07, fp
27234     0C 4E 85 A1 |  if_e	sub	fp, #12
27238     0C 4E 05 F1 | 	add	fp, #12
2723c     A7 2A C2 FA | 	rdbyte	local07, fp
27240     0C 4E 85 F1 | 	sub	fp, #12
27244     0C 2A 06 F5 | 	and	local07, #12
27248     0C 2A 0E F2 | 	cmp	local07, #12 wz
2724c     18 00 90 AD |  if_e	jmp	#LR__3997
27250     0C 4E 05 F1 | 	add	fp, #12
27254     A7 1E C2 FA | 	rdbyte	local01, fp
27258     0C 4E 85 F1 | 	sub	fp, #12
2725c     03 1E 06 F5 | 	and	local01, #3
27260     03 1E 0E F2 | 	cmp	local01, #3 wz
27264     14 00 90 5D |  if_ne	jmp	#LR__3998
27268                 | LR__3997
27268     10 4E 05 F1 | 	add	fp, #16
2726c     A7 2A C2 FA | 	rdbyte	local07, fp
27270     02 2A 46 F5 | 	or	local07, #2
27274     A7 2A 42 FC | 	wrbyte	local07, fp
27278     10 4E 85 F1 | 	sub	fp, #16
2727c                 | LR__3998
2727c     10 4E 05 F1 | 	add	fp, #16
27280     A7 2A C2 FA | 	rdbyte	local07, fp
27284     10 4E 85 F1 | 	sub	fp, #16
27288     02 2A CE F7 | 	test	local07, #2 wz
2728c     48 00 90 5D |  if_ne	jmp	#LR__3999
27290     0C 4E 05 F1 | 	add	fp, #12
27294     A7 2A C2 FA | 	rdbyte	local07, fp
27298     0C 4E 85 F1 | 	sub	fp, #12
2729c     01 2A CE F7 | 	test	local07, #1 wz
272a0     10 4E 05 51 |  if_ne	add	fp, #16
272a4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
272a8     10 2A 46 55 |  if_ne	or	local07, #16
272ac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
272b0     10 4E 85 51 |  if_ne	sub	fp, #16
272b4     0C 4E 05 F1 | 	add	fp, #12
272b8     A7 2A C2 FA | 	rdbyte	local07, fp
272bc     0C 4E 85 F1 | 	sub	fp, #12
272c0     04 2A CE F7 | 	test	local07, #4 wz
272c4     10 4E 05 51 |  if_ne	add	fp, #16
272c8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
272cc     08 2A 46 55 |  if_ne	or	local07, #8
272d0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
272d4     10 4E 85 51 |  if_ne	sub	fp, #16
272d8                 | LR__3999
272d8     04 4E 05 F1 | 	add	fp, #4
272dc     A7 2A 02 FB | 	rdlong	local07, fp
272e0     0C 4E 05 F1 | 	add	fp, #12
272e4     A7 1E C2 FA | 	rdbyte	local01, fp
272e8     10 4E 85 F1 | 	sub	fp, #16
272ec     2B 2A 06 F1 | 	add	local07, #43
272f0     15 1F 42 FC | 	wrbyte	local01, local07
272f4                 | ' 	}
272f4                 | ' 
272f4                 | ' 	dp->fn[ 11 ] = cf;
272f4                 | ' 
272f4                 | ' 	return FR_OK;
272f4     00 FA 05 F6 | 	mov	result1, #0
272f8                 | LR__4000
272f8     A7 F0 03 F6 | 	mov	ptra, fp
272fc     B2 00 A0 FD | 	call	#popregs_
27300                 | _fatfs_cc_create_name_ret
27300     2D 00 64 FD | 	ret
27304                 | 
27304                 | _fatfs_cc_follow_path
27304     02 4A 05 F6 | 	mov	COUNT_, #2
27308     A8 00 A0 FD | 	call	#pushregs_
2730c     18 F0 07 F1 | 	add	ptra, #24
27310     04 4E 05 F1 | 	add	fp, #4
27314     A7 12 62 FC | 	wrlong	arg01, fp
27318     04 4E 05 F1 | 	add	fp, #4
2731c     A7 14 62 FC | 	wrlong	arg02, fp
27320     04 4E 85 F1 | 	sub	fp, #4
27324     A7 FA 01 FB | 	rdlong	result1, fp
27328     FD 1E 02 FB | 	rdlong	local01, result1
2732c     10 4E 05 F1 | 	add	fp, #16
27330     A7 1E 62 FC | 	wrlong	local01, fp
27334     14 4E 85 F1 | 	sub	fp, #20
27338     97 24 48 FB | 	callpa	#(@LR__4012-@LR__4010)>>2,fcache_load_ptr_
2733c                 | ' )
2733c                 | ' {
2733c                 | ' 	FRESULT res;
2733c                 | ' 	BYTE ns;
2733c                 | ' 	FATFS *fs = dp->obj.fs;
2733c                 | ' #line 3034 "ff.c"
2733c                 | ' 	{
2733c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2733c                 | LR__4010
2733c     08 4E 05 F1 | 	add	fp, #8
27340     A7 1E 02 FB | 	rdlong	local01, fp
27344     08 4E 85 F1 | 	sub	fp, #8
27348     0F 1F C2 FA | 	rdbyte	local01, local01
2734c     2F 1E 0E F2 | 	cmp	local01, #47 wz
27350     18 00 90 AD |  if_e	jmp	#LR__4011
27354     08 4E 05 F1 | 	add	fp, #8
27358     A7 1E 02 FB | 	rdlong	local01, fp
2735c     08 4E 85 F1 | 	sub	fp, #8
27360     0F 1F C2 FA | 	rdbyte	local01, local01
27364     5C 1E 0E F2 | 	cmp	local01, #92 wz
27368     18 00 90 5D |  if_ne	jmp	#LR__4013
2736c                 | LR__4011
2736c     08 4E 05 F1 | 	add	fp, #8
27370     A7 1E 02 FB | 	rdlong	local01, fp
27374     01 1E 06 F1 | 	add	local01, #1
27378     A7 1E 62 FC | 	wrlong	local01, fp
2737c     08 4E 85 F1 | 	sub	fp, #8
27380     B8 FF 9F FD | 	jmp	#LR__4010
27384                 | LR__4012
27384                 | LR__4013
27384     04 4E 05 F1 | 	add	fp, #4
27388     A7 1E 02 FB | 	rdlong	local01, fp
2738c     08 1E 06 F1 | 	add	local01, #8
27390     0F 01 68 FC | 	wrlong	#0, local01
27394     04 4E 05 F1 | 	add	fp, #4
27398     A7 1E 02 FB | 	rdlong	local01, fp
2739c     08 4E 85 F1 | 	sub	fp, #8
273a0     0F 1F C2 FA | 	rdbyte	local01, local01
273a4     20 1E 16 F2 | 	cmp	local01, #32 wc
273a8     30 00 90 3D |  if_ae	jmp	#LR__4014
273ac     04 4E 05 F1 | 	add	fp, #4
273b0     A7 1E 02 FB | 	rdlong	local01, fp
273b4     2B 1E 06 F1 | 	add	local01, #43
273b8     0F 01 49 FC | 	wrbyte	#128, local01
273bc     A7 12 02 FB | 	rdlong	arg01, fp
273c0     04 4E 85 F1 | 	sub	fp, #4
273c4     00 14 06 F6 | 	mov	arg02, #0
273c8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
273cc     0C 4E 05 F1 | 	add	fp, #12
273d0     A7 FA 61 FC | 	wrlong	result1, fp
273d4     0C 4E 85 F1 | 	sub	fp, #12
273d8     1C 01 90 FD | 	jmp	#LR__4018
273dc                 | LR__4014
273dc                 | ' 		for (;;) {
273dc                 | LR__4015
273dc     04 4E 05 F1 | 	add	fp, #4
273e0     A7 12 02 FB | 	rdlong	arg01, fp
273e4     04 4E 05 F1 | 	add	fp, #4
273e8     A7 14 02 F6 | 	mov	arg02, fp
273ec     08 4E 85 F1 | 	sub	fp, #8
273f0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
273f4     0C 4E 05 F1 | 	add	fp, #12
273f8     A7 FA 61 FC | 	wrlong	result1, fp
273fc     00 FA 4D F2 | 	cmps	result1, #0 wz
27400     0C 4E 85 F1 | 	sub	fp, #12
27404     F0 00 90 5D |  if_ne	jmp	#LR__4017
27408     04 4E 05 F1 | 	add	fp, #4
2740c     A7 12 02 FB | 	rdlong	arg01, fp
27410     04 4E 85 F1 | 	sub	fp, #4
27414     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
27418     0C 4E 05 F1 | 	add	fp, #12
2741c     A7 FA 61 FC | 	wrlong	result1, fp
27420     08 4E 85 F1 | 	sub	fp, #8
27424     A7 1E 02 FB | 	rdlong	local01, fp
27428     2B 1E 06 F1 | 	add	local01, #43
2742c     0F 1F C2 FA | 	rdbyte	local01, local01
27430     0C 4E 05 F1 | 	add	fp, #12
27434     A7 1E 42 FC | 	wrbyte	local01, fp
27438     04 4E 85 F1 | 	sub	fp, #4
2743c     A7 1E 0A FB | 	rdlong	local01, fp wz
27440     0C 4E 85 F1 | 	sub	fp, #12
27444     34 00 90 AD |  if_e	jmp	#LR__4016
27448     0C 4E 05 F1 | 	add	fp, #12
2744c     A7 1E 02 FB | 	rdlong	local01, fp
27450     0C 4E 85 F1 | 	sub	fp, #12
27454     04 1E 0E F2 | 	cmp	local01, #4 wz
27458     9C 00 90 5D |  if_ne	jmp	#LR__4017
2745c     10 4E 05 F1 | 	add	fp, #16
27460     A7 1E C2 FA | 	rdbyte	local01, fp
27464     10 4E 85 F1 | 	sub	fp, #16
27468     04 1E CE F7 | 	test	local01, #4 wz
2746c     0C 4E 05 A1 |  if_e	add	fp, #12
27470     A7 0A 68 AC |  if_e	wrlong	#5, fp
27474     0C 4E 85 A1 |  if_e	sub	fp, #12
27478                 | ' 					}
27478                 | ' 				}
27478                 | ' 				break;
27478     7C 00 90 FD | 	jmp	#LR__4017
2747c                 | LR__4016
2747c     10 4E 05 F1 | 	add	fp, #16
27480     A7 1E C2 FA | 	rdbyte	local01, fp
27484     10 4E 85 F1 | 	sub	fp, #16
27488     04 1E CE F7 | 	test	local01, #4 wz
2748c     68 00 90 5D |  if_ne	jmp	#LR__4017
27490     04 4E 05 F1 | 	add	fp, #4
27494     A7 1E 02 FB | 	rdlong	local01, fp
27498     04 4E 85 F1 | 	sub	fp, #4
2749c     06 1E 06 F1 | 	add	local01, #6
274a0     0F 1F C2 FA | 	rdbyte	local01, local01
274a4     10 1E CE F7 | 	test	local01, #16 wz
274a8     0C 4E 05 A1 |  if_e	add	fp, #12
274ac     A7 0A 68 AC |  if_e	wrlong	#5, fp
274b0     0C 4E 85 A1 |  if_e	sub	fp, #12
274b4                 | ' 				res = FR_NO_PATH; break;
274b4     40 00 90 AD |  if_e	jmp	#LR__4017
274b8     04 4E 05 F1 | 	add	fp, #4
274bc     A7 20 02 FB | 	rdlong	local02, fp
274c0     10 1F 02 F6 | 	mov	local01, local02
274c4     10 4E 05 F1 | 	add	fp, #16
274c8     A7 14 02 FB | 	rdlong	arg02, fp
274cc     0A 13 02 F6 | 	mov	arg01, arg02
274d0     34 14 06 F1 | 	add	arg02, #52
274d4     14 4E 85 F1 | 	sub	fp, #20
274d8     10 20 06 F1 | 	add	local02, #16
274dc     10 21 02 FB | 	rdlong	local02, local02
274e0     FF 21 06 F5 | 	and	local02, #511
274e4     10 15 02 F1 | 	add	arg02, local02
274e8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
274ec     08 1E 06 F1 | 	add	local01, #8
274f0     0F FB 61 FC | 	wrlong	result1, local01
274f4     E4 FE 9F FD | 	jmp	#LR__4015
274f8                 | LR__4017
274f8                 | LR__4018
274f8                 | ' 			}
274f8                 | ' #line 3090 "ff.c"
274f8                 | ' 			{
274f8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
274f8                 | ' 			}
274f8                 | ' 		}
274f8                 | ' 	}
274f8                 | ' 
274f8                 | ' 	return res;
274f8     0C 4E 05 F1 | 	add	fp, #12
274fc     A7 FA 01 FB | 	rdlong	result1, fp
27500     0C 4E 85 F1 | 	sub	fp, #12
27504     A7 F0 03 F6 | 	mov	ptra, fp
27508     B2 00 A0 FD | 	call	#popregs_
2750c                 | _fatfs_cc_follow_path_ret
2750c     2D 00 64 FD | 	ret
27510                 | 
27510                 | _fatfs_cc_get_ldnumber
27510     01 00 66 F6 | 	neg	_var01, #1
27514     09 03 0A FB | 	rdlong	_var02, arg01 wz
27518     01 05 02 F6 | 	mov	_var03, _var02
2751c     01 FA 65 A6 |  if_e	neg	result1, #1
27520     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
27524     97 10 48 FB | 	callpa	#(@LR__4021-@LR__4020)>>2,fcache_load_ptr_
27528                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
27528                 | LR__4020
27528     02 07 C2 FA | 	rdbyte	_var04, _var03
2752c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
27530     20 FA 15 F2 | 	cmp	result1, #32 wc
27534     01 04 06 F1 | 	add	_var03, #1
27538     03 09 02 36 |  if_ae	mov	_var05, _var04
2753c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
27540     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
27544     E0 FF 9F 1D |  if_a	jmp	#LR__4020
27548                 | LR__4021
27548     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2754c     3A 06 0E F2 | 	cmp	_var04, #58 wz
27550     40 00 90 5D |  if_ne	jmp	#LR__4023
27554     01 0A 06 F6 | 	mov	_var06, #1
27558     01 09 C2 FA | 	rdbyte	_var05, _var02
2755c     30 08 16 F2 | 	cmp	_var05, #48 wc
27560     1C 00 90 CD |  if_b	jmp	#LR__4022
27564     01 09 C2 FA | 	rdbyte	_var05, _var02
27568     3A 08 16 F2 | 	cmp	_var05, #58 wc
2756c     01 0D 02 C6 |  if_b	mov	_var07, _var02
27570     02 0C 06 C1 |  if_b	add	_var07, #2
27574     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
27578     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2757c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
27580                 | LR__4022
27580     01 0A 56 F2 | 	cmps	_var06, #1 wc
27584     05 01 02 C6 |  if_b	mov	_var01, _var06
27588     09 05 62 CC |  if_b	wrlong	_var03, arg01
2758c                 | ' 			vol = i;
2758c                 | ' 			*path = tt;
2758c                 | ' 		}
2758c                 | ' 		return vol;
2758c     00 FB 01 F6 | 	mov	result1, _var01
27590     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
27594                 | LR__4023
27594                 | ' 	}
27594                 | ' #line 3170 "ff.c"
27594                 | ' 	vol = 0;
27594                 | ' 
27594                 | ' 	return vol;
27594     00 FA 05 F6 | 	mov	result1, #0
27598                 | _fatfs_cc_get_ldnumber_ret
27598     2D 00 64 FD | 	ret
2759c                 | 
2759c                 | _fatfs_cc_check_fs
2759c     04 4A 05 F6 | 	mov	COUNT_, #4
275a0     A8 00 A0 FD | 	call	#pushregs_
275a4     09 1F 02 F6 | 	mov	local01, arg01
275a8     03 1E 06 F1 | 	add	local01, #3
275ac     0F 01 48 FC | 	wrbyte	#0, local01
275b0     2D 1E 06 F1 | 	add	local01, #45
275b4     FF FF FF FF 
275b8     0F FF 6B FC | 	wrlong	##-1, local01
275bc     30 1E 86 F1 | 	sub	local01, #48
275c0     0F 13 02 F6 | 	mov	arg01, local01
275c4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
275c8     00 FA 0D F2 | 	cmp	result1, #0 wz
275cc     04 FA 05 56 |  if_ne	mov	result1, #4
275d0     94 01 90 5D |  if_ne	jmp	#LR__4034
275d4     34 1E 06 F1 | 	add	local01, #52
275d8     0F 13 02 F6 | 	mov	arg01, local01
275dc     FE 13 06 F1 | 	add	arg01, #510
275e0                 | ' {
275e0                 | ' 
275e0                 | ' 	return *((WORD*)ptr);
275e0     09 21 E2 FA | 	rdword	local02, arg01
275e4     0F 23 C2 FA | 	rdbyte	local03, local01
275e8     34 1E 86 F1 | 	sub	local01, #52
275ec     11 25 E2 F8 | 	getbyte	local04, local03, #0
275f0     EB 24 0E F2 | 	cmp	local04, #235 wz
275f4     11 17 02 56 |  if_ne	mov	arg03, local03
275f8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
275fc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
27600     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
27604     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
27608     44 01 90 5D |  if_ne	jmp	#LR__4033
2760c     10 25 32 F9 | 	getword	local04, local02, #0
27610     55 00 00 FF 
27614     55 24 0E F2 | 	cmp	local04, ##43605 wz
27618     2C 00 90 5D |  if_ne	jmp	#LR__4030
2761c     34 1E 06 F1 | 	add	local01, #52
27620     0F 13 02 F6 | 	mov	arg01, local01
27624     34 1E 86 F1 | 	sub	local01, #52
27628     52 12 06 F1 | 	add	arg01, #82
2762c     65 01 00 FF 
27630     7C 14 06 F6 | 	mov	arg02, ##@LR__4624
27634     08 16 06 F6 | 	mov	arg03, #8
27638     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2763c     00 FA 0D F2 | 	cmp	result1, #0 wz
27640                 | ' 			return 0;
27640     00 FA 05 A6 |  if_e	mov	result1, #0
27644     20 01 90 AD |  if_e	jmp	#LR__4034
27648                 | LR__4030
27648     34 1E 06 F1 | 	add	local01, #52
2764c     0F 13 02 F6 | 	mov	arg01, local01
27650     0B 12 06 F1 | 	add	arg01, #11
27654                 | ' {
27654                 | ' 
27654                 | ' 	return *((WORD*)ptr);
27654     09 FB E1 FA | 	rdword	result1, arg01
27658     0D 1E 06 F1 | 	add	local01, #13
2765c     0F 23 C2 FA | 	rdbyte	local03, local01
27660     41 1E 86 F1 | 	sub	local01, #65
27664     FD 24 32 F9 | 	getword	local04, result1, #0
27668     FD 14 32 F9 | 	getword	arg02, result1, #0
2766c     01 14 86 F1 | 	sub	arg02, #1
27670     0A 25 CA F7 | 	test	local04, arg02 wz
27674     D8 00 90 5D |  if_ne	jmp	#LR__4032
27678     FD 14 32 F9 | 	getword	arg02, result1, #0
2767c     01 00 00 FF 
27680     00 14 16 F2 | 	cmp	arg02, ##512 wc
27684     C8 00 90 CD |  if_b	jmp	#LR__4032
27688     FD 14 32 F9 | 	getword	arg02, result1, #0
2768c     01 00 00 FF 
27690     01 14 16 F2 | 	cmp	arg02, ##513 wc
27694     B8 00 90 3D |  if_ae	jmp	#LR__4032
27698     11 13 02 F6 | 	mov	arg01, local03
2769c     07 12 4E F7 | 	zerox	arg01, #7 wz
276a0     AC 00 90 AD |  if_e	jmp	#LR__4032
276a4     11 13 E2 F8 | 	getbyte	arg01, local03, #0
276a8     11 23 E2 F8 | 	getbyte	local03, local03, #0
276ac     01 22 86 F1 | 	sub	local03, #1
276b0     11 13 CA F7 | 	test	arg01, local03 wz
276b4     98 00 90 5D |  if_ne	jmp	#LR__4032
276b8     34 1E 06 F1 | 	add	local01, #52
276bc     0F 13 02 F6 | 	mov	arg01, local01
276c0     34 1E 86 F1 | 	sub	local01, #52
276c4     0E 12 06 F1 | 	add	arg01, #14
276c8                 | ' {
276c8                 | ' 
276c8                 | ' 	return *((WORD*)ptr);
276c8     09 FB E9 FA | 	rdword	result1, arg01 wz
276cc     80 00 90 AD |  if_e	jmp	#LR__4032
276d0     44 1E 06 F1 | 	add	local01, #68
276d4     0F 13 C2 FA | 	rdbyte	arg01, local01
276d8     44 1E 86 F1 | 	sub	local01, #68
276dc     01 12 86 F1 | 	sub	arg01, #1
276e0     02 12 16 F2 | 	cmp	arg01, #2 wc
276e4     68 00 90 3D |  if_ae	jmp	#LR__4032
276e8     34 1E 06 F1 | 	add	local01, #52
276ec     0F 13 02 F6 | 	mov	arg01, local01
276f0     34 1E 86 F1 | 	sub	local01, #52
276f4     11 12 06 F1 | 	add	arg01, #17
276f8                 | ' {
276f8                 | ' 
276f8                 | ' 	return *((WORD*)ptr);
276f8     09 FB E9 FA | 	rdword	result1, arg01 wz
276fc     50 00 90 AD |  if_e	jmp	#LR__4032
27700     34 1E 06 F1 | 	add	local01, #52
27704     0F 13 02 F6 | 	mov	arg01, local01
27708     34 1E 86 F1 | 	sub	local01, #52
2770c     13 12 06 F1 | 	add	arg01, #19
27710                 | ' {
27710                 | ' 
27710                 | ' 	return *((WORD*)ptr);
27710     09 FB E1 FA | 	rdword	result1, arg01
27714     FD 22 32 F9 | 	getword	local03, result1, #0
27718     80 22 16 F2 | 	cmp	local03, #128 wc
2771c     20 00 90 3D |  if_ae	jmp	#LR__4031
27720     34 1E 06 F1 | 	add	local01, #52
27724     0F 13 02 F6 | 	mov	arg01, local01
27728     34 1E 86 F1 | 	sub	local01, #52
2772c     20 12 06 F1 | 	add	arg01, #32
27730                 | ' {
27730                 | ' 
27730                 | ' 	return *((DWORD*)ptr);
27730     09 FB 01 FB | 	rdlong	result1, arg01
27734     80 00 00 FF 
27738     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2773c     10 00 90 CD |  if_b	jmp	#LR__4032
27740                 | LR__4031
27740     4A 1E 06 F1 | 	add	local01, #74
27744                 | ' {
27744                 | ' 
27744                 | ' 	return *((WORD*)ptr);
27744     0F FB E9 FA | 	rdword	result1, local01 wz
27748                 | ' 			&& b != 0 && (b & (b - 1)) == 0
27748                 | ' 			&& ld_word(fs->win +  14 ) != 0
27748                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
27748                 | ' 			&& ld_word(fs->win +  17 ) != 0
27748                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
27748                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
27748                 | ' 				return 0;
27748     00 FA 05 56 |  if_ne	mov	result1, #0
2774c     18 00 90 5D |  if_ne	jmp	#LR__4034
27750                 | LR__4032
27750                 | LR__4033
27750                 | ' 		}
27750                 | ' 	}
27750                 | ' 	return sign == 0xAA55 ? 2 : 3;
27750     10 23 32 F9 | 	getword	local03, local02, #0
27754     55 00 00 FF 
27758     55 22 0E F2 | 	cmp	local03, ##43605 wz
2775c     02 24 06 A6 |  if_e	mov	local04, #2
27760     03 24 06 56 |  if_ne	mov	local04, #3
27764     12 FB 01 F6 | 	mov	result1, local04
27768                 | LR__4034
27768     A7 F0 03 F6 | 	mov	ptra, fp
2776c     B2 00 A0 FD | 	call	#popregs_
27770                 | _fatfs_cc_check_fs_ret
27770     2D 00 64 FD | 	ret
27774                 | 
27774                 | _fatfs_cc_find_volume
27774     05 4A 05 F6 | 	mov	COUNT_, #5
27778     A8 00 A0 FD | 	call	#pushregs_
2777c     24 F0 07 F1 | 	add	ptra, #36
27780     09 1F 02 F6 | 	mov	local01, arg01
27784     0A 21 02 F6 | 	mov	local02, arg02
27788     0F 13 02 F6 | 	mov	arg01, local01
2778c     00 14 06 F6 | 	mov	arg02, #0
27790     08 FE BF FD | 	call	#_fatfs_cc_check_fs
27794     02 FA 0D F2 | 	cmp	result1, #2 wz
27798     0C 00 90 AD |  if_e	jmp	#LR__4040
2779c     03 FA 15 F2 | 	cmp	result1, #3 wc
277a0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
277a4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4048
277a8                 | LR__4040
277a8                 | ' 	for (i = 0; i < 4; i++) {
277a8     00 22 06 F6 | 	mov	local03, #0
277ac     97 26 48 FB | 	callpa	#(@LR__4042-@LR__4041)>>2,fcache_load_ptr_
277b0                 | LR__4041
277b0     04 22 16 F2 | 	cmp	local03, #4 wc
277b4     44 00 90 3D |  if_ae	jmp	#LR__4043
277b8     11 25 02 F6 | 	mov	local04, local03
277bc     02 24 66 F0 | 	shl	local04, #2
277c0     14 4E 05 F1 | 	add	fp, #20
277c4     A7 24 02 F1 | 	add	local04, fp
277c8     34 1E 06 F1 | 	add	local01, #52
277cc     0F 13 02 F6 | 	mov	arg01, local01
277d0     34 1E 86 F1 | 	sub	local01, #52
277d4     BE 13 06 F1 | 	add	arg01, #446
277d8     11 15 02 F6 | 	mov	arg02, local03
277dc     04 14 66 F0 | 	shl	arg02, #4
277e0     0A 13 02 F1 | 	add	arg01, arg02
277e4     08 12 06 F1 | 	add	arg01, #8
277e8                 | ' {
277e8                 | ' 
277e8                 | ' 	return *((DWORD*)ptr);
277e8     09 FB 01 FB | 	rdlong	result1, arg01
277ec     14 4E 85 F1 | 	sub	fp, #20
277f0     12 FB 61 FC | 	wrlong	result1, local04
277f4     01 22 06 F1 | 	add	local03, #1
277f8     B4 FF 9F FD | 	jmp	#LR__4041
277fc                 | LR__4042
277fc                 | LR__4043
277fc     00 20 0E F2 | 	cmp	local02, #0 wz
27800     10 25 02 56 |  if_ne	mov	local04, local02
27804     01 24 86 51 |  if_ne	sub	local04, #1
27808     00 24 06 A6 |  if_e	mov	local04, #0
2780c     12 23 02 F6 | 	mov	local03, local04
27810                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
27810                 | ' 	}
27810                 | ' 	i = part ? part - 1 : 0;
27810                 | ' 	do {
27810                 | LR__4044
27810     11 25 02 F6 | 	mov	local04, local03
27814     02 24 66 F0 | 	shl	local04, #2
27818     14 4E 05 F1 | 	add	fp, #20
2781c     A7 24 02 F1 | 	add	local04, fp
27820     12 25 0A FB | 	rdlong	local04, local04 wz
27824     14 4E 85 F1 | 	sub	fp, #20
27828     28 00 90 AD |  if_e	jmp	#LR__4045
2782c     11 25 02 F6 | 	mov	local04, local03
27830     02 24 66 F0 | 	shl	local04, #2
27834     14 4E 05 F1 | 	add	fp, #20
27838     A7 24 02 F1 | 	add	local04, fp
2783c     12 15 02 FB | 	rdlong	arg02, local04
27840     0F 13 02 F6 | 	mov	arg01, local01
27844     14 4E 85 F1 | 	sub	fp, #20
27848     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2784c     FD 24 02 F6 | 	mov	local04, result1
27850     04 00 90 FD | 	jmp	#LR__4046
27854                 | LR__4045
27854     03 24 06 F6 | 	mov	local04, #3
27858                 | LR__4046
27858     12 27 02 F6 | 	mov	local05, local04
2785c     00 20 0E F2 | 	cmp	local02, #0 wz
27860     02 26 16 A2 |  if_e	cmp	local05, #2 wc
27864     0C 00 90 8D |  if_c_and_z	jmp	#LR__4047
27868     01 22 06 A1 |  if_e	add	local03, #1
2786c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
27870     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4044
27874                 | LR__4047
27874                 | ' 	return fmt;
27874     13 FB 01 F6 | 	mov	result1, local05
27878                 | LR__4048
27878     A7 F0 03 F6 | 	mov	ptra, fp
2787c     B2 00 A0 FD | 	call	#popregs_
27880                 | _fatfs_cc_find_volume_ret
27880     2D 00 64 FD | 	ret
27884                 | 
27884                 | _fatfs_cc_mount_volume
27884     0B 4A 05 F6 | 	mov	COUNT_, #11
27888     A8 00 A0 FD | 	call	#pushregs_
2788c     0A 1F 02 F6 | 	mov	local01, arg02
27890     0B 21 02 F6 | 	mov	local02, arg03
27894     0F 01 68 FC | 	wrlong	#0, local01
27898     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2789c     FD 22 02 F6 | 	mov	local03, result1
278a0     00 22 56 F2 | 	cmps	local03, #0 wc
278a4     0B FA 05 C6 |  if_b	mov	result1, #11
278a8     3C 05 90 CD |  if_b	jmp	#LR__4060
278ac     11 17 02 F6 | 	mov	arg03, local03
278b0     02 16 66 F0 | 	shl	arg03, #2
278b4     F2 16 02 F1 | 	add	arg03, objptr
278b8     0B 25 0A FB | 	rdlong	local04, arg03 wz
278bc     0C FA 05 A6 |  if_e	mov	result1, #12
278c0     24 05 90 AD |  if_e	jmp	#LR__4060
278c4     0F 25 62 FC | 	wrlong	local04, local01
278c8     10 21 E2 F8 | 	getbyte	local02, local02, #0
278cc     FE 20 06 F5 | 	and	local02, #254
278d0     12 17 CA FA | 	rdbyte	arg03, local04 wz
278d4     4C 00 90 AD |  if_e	jmp	#LR__4051
278d8     01 24 06 F1 | 	add	local04, #1
278dc     12 13 CA FA | 	rdbyte	arg01, local04 wz
278e0     01 24 86 F1 | 	sub	local04, #1
278e4     01 FA 05 56 |  if_ne	mov	result1, #1
278e8                 | ' 
278e8                 | ' 	return Stat;
278e8     01 00 00 AF 
278ec     20 E4 05 A1 |  if_e	add	objptr, ##544
278f0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
278f4     01 00 00 AF 
278f8     20 E4 85 A1 |  if_e	sub	objptr, ##544
278fc     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
27900     01 16 CE F7 | 	test	arg03, #1 wz
27904     1C 00 90 5D |  if_ne	jmp	#LR__4050
27908     00 20 0E F2 | 	cmp	local02, #0 wz
2790c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
27910     04 FA CD 57 |  if_ne	test	result1, #4 wz
27914                 | ' 				return FR_WRITE_PROTECTED;
27914     0A FA 05 56 |  if_ne	mov	result1, #10
27918     CC 04 90 5D |  if_ne	jmp	#LR__4060
2791c                 | ' 			}
2791c                 | ' 			return FR_OK;
2791c     00 FA 05 F6 | 	mov	result1, #0
27920     C4 04 90 FD | 	jmp	#LR__4060
27924                 | LR__4050
27924                 | LR__4051
27924     12 01 48 FC | 	wrbyte	#0, local04
27928     01 24 06 F1 | 	add	local04, #1
2792c     12 23 42 FC | 	wrbyte	local03, local04
27930     12 13 C2 FA | 	rdbyte	arg01, local04
27934     01 24 86 F1 | 	sub	local04, #1
27938     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2793c     FD 16 02 F6 | 	mov	arg03, result1
27940     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
27944     01 26 CE F7 | 	test	local05, #1 wz
27948                 | ' 		return FR_NOT_READY;
27948     03 FA 05 56 |  if_ne	mov	result1, #3
2794c     98 04 90 5D |  if_ne	jmp	#LR__4060
27950     00 20 0E F2 | 	cmp	local02, #0 wz
27954     0B 27 02 56 |  if_ne	mov	local05, arg03
27958     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2795c     04 26 CE 57 |  if_ne	test	local05, #4 wz
27960                 | ' 		return FR_WRITE_PROTECTED;
27960     0A FA 05 56 |  if_ne	mov	result1, #10
27964     80 04 90 5D |  if_ne	jmp	#LR__4060
27968     12 13 02 F6 | 	mov	arg01, local04
2796c     00 14 06 F6 | 	mov	arg02, #0
27970     00 FE BF FD | 	call	#_fatfs_cc_find_volume
27974     FD 12 02 F6 | 	mov	arg01, result1
27978     04 12 0E F2 | 	cmp	arg01, #4 wz
2797c     01 FA 05 A6 |  if_e	mov	result1, #1
27980     64 04 90 AD |  if_e	jmp	#LR__4060
27984     02 12 16 F2 | 	cmp	arg01, #2 wc
27988     0D FA 05 36 |  if_ae	mov	result1, #13
2798c     58 04 90 3D |  if_ae	jmp	#LR__4060
27990     30 24 06 F1 | 	add	local04, #48
27994     12 29 02 FB | 	rdlong	local06, local04
27998     04 24 06 F1 | 	add	local04, #4
2799c     12 13 02 F6 | 	mov	arg01, local04
279a0     34 24 86 F1 | 	sub	local04, #52
279a4     0B 12 06 F1 | 	add	arg01, #11
279a8                 | ' {
279a8                 | ' 
279a8                 | ' 	return *((WORD*)ptr);
279a8     09 FB E1 FA | 	rdword	result1, arg01
279ac     01 00 00 FF 
279b0     00 FA 0D F2 | 	cmp	result1, ##512 wz
279b4     0D FA 05 56 |  if_ne	mov	result1, #13
279b8     2C 04 90 5D |  if_ne	jmp	#LR__4060
279bc     34 24 06 F1 | 	add	local04, #52
279c0     12 13 02 F6 | 	mov	arg01, local04
279c4     34 24 86 F1 | 	sub	local04, #52
279c8     16 12 06 F1 | 	add	arg01, #22
279cc                 | ' {
279cc                 | ' 
279cc                 | ' 	return *((WORD*)ptr);
279cc     09 FB E1 FA | 	rdword	result1, arg01
279d0     FD 2A 0A F6 | 	mov	local07, result1 wz
279d4     18 00 90 5D |  if_ne	jmp	#LR__4052
279d8     34 24 06 F1 | 	add	local04, #52
279dc     12 13 02 F6 | 	mov	arg01, local04
279e0     34 24 86 F1 | 	sub	local04, #52
279e4     24 12 06 F1 | 	add	arg01, #36
279e8                 | ' {
279e8                 | ' 
279e8                 | ' 	return *((DWORD*)ptr);
279e8     09 FB 01 FB | 	rdlong	result1, arg01
279ec     FD 2A 02 F6 | 	mov	local07, result1
279f0                 | LR__4052
279f0     1C 24 06 F1 | 	add	local04, #28
279f4     12 2B 62 FC | 	wrlong	local07, local04
279f8     28 24 06 F1 | 	add	local04, #40
279fc     12 27 C2 FA | 	rdbyte	local05, local04
27a00     42 24 86 F1 | 	sub	local04, #66
27a04     12 27 42 FC | 	wrbyte	local05, local04
27a08     12 27 C2 FA | 	rdbyte	local05, local04
27a0c     02 24 86 F1 | 	sub	local04, #2
27a10     01 26 0E F2 | 	cmp	local05, #1 wz
27a14     02 24 06 51 |  if_ne	add	local04, #2
27a18     12 27 C2 5A |  if_ne	rdbyte	local05, local04
27a1c     02 24 86 51 |  if_ne	sub	local04, #2
27a20     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
27a24     0D FA 05 56 |  if_ne	mov	result1, #13
27a28     BC 03 90 5D |  if_ne	jmp	#LR__4060
27a2c     02 24 06 F1 | 	add	local04, #2
27a30     12 27 C2 FA | 	rdbyte	local05, local04
27a34     13 2B 02 FD | 	qmul	local07, local05
27a38     3F 24 06 F1 | 	add	local04, #63
27a3c     12 27 C2 FA | 	rdbyte	local05, local04
27a40     37 24 86 F1 | 	sub	local04, #55
27a44     12 27 52 FC | 	wrword	local05, local04
27a48     12 27 EA FA | 	rdword	local05, local04 wz
27a4c     0A 24 86 F1 | 	sub	local04, #10
27a50     18 2A 62 FD | 	getqx	local07
27a54     20 00 90 AD |  if_e	jmp	#LR__4053
27a58     0A 24 06 F1 | 	add	local04, #10
27a5c     12 27 E2 FA | 	rdword	local05, local04
27a60     13 23 32 F9 | 	getword	local03, local05, #0
27a64     0A 24 86 F1 | 	sub	local04, #10
27a68     13 27 32 F9 | 	getword	local05, local05, #0
27a6c     01 26 86 F1 | 	sub	local05, #1
27a70     13 23 CA F7 | 	test	local03, local05 wz
27a74     08 00 90 AD |  if_e	jmp	#LR__4054
27a78                 | LR__4053
27a78     0D FA 05 F6 | 	mov	result1, #13
27a7c     68 03 90 FD | 	jmp	#LR__4060
27a80                 | LR__4054
27a80     34 24 06 F1 | 	add	local04, #52
27a84     12 13 02 F6 | 	mov	arg01, local04
27a88     11 12 06 F1 | 	add	arg01, #17
27a8c                 | ' {
27a8c                 | ' 
27a8c                 | ' 	return *((WORD*)ptr);
27a8c     09 FB E1 FA | 	rdword	result1, arg01
27a90     2C 24 86 F1 | 	sub	local04, #44
27a94     12 FB 51 FC | 	wrword	result1, local04
27a98     12 27 E2 FA | 	rdword	local05, local04
27a9c     08 24 86 F1 | 	sub	local04, #8
27aa0     13 13 52 F6 | 	abs	arg01, local05 wc
27aa4     09 13 42 F8 | 	getnib	arg01, arg01, #0
27aa8     09 13 8A F6 | 	negc	arg01, arg01 wz
27aac     0D FA 05 56 |  if_ne	mov	result1, #13
27ab0     34 03 90 5D |  if_ne	jmp	#LR__4060
27ab4     34 24 06 F1 | 	add	local04, #52
27ab8     12 13 02 F6 | 	mov	arg01, local04
27abc     34 24 86 F1 | 	sub	local04, #52
27ac0     13 12 06 F1 | 	add	arg01, #19
27ac4                 | ' {
27ac4                 | ' 
27ac4                 | ' 	return *((WORD*)ptr);
27ac4     09 FB E1 FA | 	rdword	result1, arg01
27ac8     FD 2C 0A F6 | 	mov	local08, result1 wz
27acc     34 24 06 A1 |  if_e	add	local04, #52
27ad0     12 13 02 A6 |  if_e	mov	arg01, local04
27ad4     34 24 86 A1 |  if_e	sub	local04, #52
27ad8     20 12 06 A1 |  if_e	add	arg01, #32
27adc                 | ' {
27adc                 | ' 
27adc                 | ' 	return *((DWORD*)ptr);
27adc     09 2D 02 AB |  if_e	rdlong	local08, arg01
27ae0     34 24 06 F1 | 	add	local04, #52
27ae4     12 13 02 F6 | 	mov	arg01, local04
27ae8     34 24 86 F1 | 	sub	local04, #52
27aec     0E 12 06 F1 | 	add	arg01, #14
27af0                 | ' {
27af0                 | ' 
27af0                 | ' 	return *((WORD*)ptr);
27af0     09 FB E1 FA | 	rdword	result1, arg01
27af4     FD 12 02 F6 | 	mov	arg01, result1
27af8     09 27 02 F6 | 	mov	local05, arg01
27afc     0F 26 4E F7 | 	zerox	local05, #15 wz
27b00     0D FA 05 A6 |  if_e	mov	result1, #13
27b04     E0 02 90 AD |  if_e	jmp	#LR__4060
27b08     09 2F 32 F9 | 	getword	local09, arg01, #0
27b0c     15 2F 02 F1 | 	add	local09, local07
27b10     08 24 06 F1 | 	add	local04, #8
27b14     12 27 E2 FA | 	rdword	local05, local04
27b18     08 24 86 F1 | 	sub	local04, #8
27b1c     13 27 52 F6 | 	abs	local05, local05 wc
27b20     04 26 46 F0 | 	shr	local05, #4
27b24     13 2F 82 F3 | 	sumc	local09, local05
27b28     17 2D 12 F2 | 	cmp	local08, local09 wc
27b2c     0D FA 05 C6 |  if_b	mov	result1, #13
27b30     B4 02 90 CD |  if_b	jmp	#LR__4060
27b34     17 2D 82 F1 | 	sub	local08, local09
27b38     0A 24 06 F1 | 	add	local04, #10
27b3c     12 27 E2 FA | 	rdword	local05, local04
27b40     13 2D 12 FD | 	qdiv	local08, local05
27b44     0A 24 86 F1 | 	sub	local04, #10
27b48     18 26 62 FD | 	getqx	local05
27b4c     00 26 0E F2 | 	cmp	local05, #0 wz
27b50     0D FA 05 A6 |  if_e	mov	result1, #13
27b54     90 02 90 AD |  if_e	jmp	#LR__4060
27b58     00 30 06 F6 | 	mov	local10, #0
27b5c     FF FF 07 FF 
27b60     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
27b64     03 30 06 C6 |  if_b	mov	local10, #3
27b68     7F 00 00 FF 
27b6c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
27b70     02 30 06 C6 |  if_b	mov	local10, #2
27b74     07 00 00 FF 
27b78     F6 27 16 F2 | 	cmp	local05, ##4086 wc
27b7c     01 30 06 C6 |  if_b	mov	local10, #1
27b80     00 30 0E F2 | 	cmp	local10, #0 wz
27b84     0D FA 05 A6 |  if_e	mov	result1, #13
27b88     5C 02 90 AD |  if_e	jmp	#LR__4060
27b8c     02 26 06 F1 | 	add	local05, #2
27b90     18 24 06 F1 | 	add	local04, #24
27b94     12 27 62 FC | 	wrlong	local05, local04
27b98     08 24 06 F1 | 	add	local04, #8
27b9c     12 29 62 FC | 	wrlong	local06, local04
27ba0     14 27 02 F6 | 	mov	local05, local06
27ba4     09 13 32 F9 | 	getword	arg01, arg01, #0
27ba8     09 27 02 F1 | 	add	local05, arg01
27bac     04 24 06 F1 | 	add	local04, #4
27bb0     12 27 62 FC | 	wrlong	local05, local04
27bb4     14 27 02 F6 | 	mov	local05, local06
27bb8     17 27 02 F1 | 	add	local05, local09
27bbc     08 24 06 F1 | 	add	local04, #8
27bc0     12 27 62 FC | 	wrlong	local05, local04
27bc4     2C 24 86 F1 | 	sub	local04, #44
27bc8     03 30 0E F2 | 	cmp	local10, #3 wz
27bcc     5C 00 90 5D |  if_ne	jmp	#LR__4055
27bd0     34 24 06 F1 | 	add	local04, #52
27bd4     12 13 02 F6 | 	mov	arg01, local04
27bd8     34 24 86 F1 | 	sub	local04, #52
27bdc     2A 12 06 F1 | 	add	arg01, #42
27be0                 | ' {
27be0                 | ' 
27be0                 | ' 	return *((WORD*)ptr);
27be0     09 FB E9 FA | 	rdword	result1, arg01 wz
27be4     0D FA 05 56 |  if_ne	mov	result1, #13
27be8     FC 01 90 5D |  if_ne	jmp	#LR__4060
27bec     08 24 06 F1 | 	add	local04, #8
27bf0     12 27 EA FA | 	rdword	local05, local04 wz
27bf4     08 24 86 F1 | 	sub	local04, #8
27bf8     0D FA 05 56 |  if_ne	mov	result1, #13
27bfc     E8 01 90 5D |  if_ne	jmp	#LR__4060
27c00     34 24 06 F1 | 	add	local04, #52
27c04     12 13 02 F6 | 	mov	arg01, local04
27c08     2C 12 06 F1 | 	add	arg01, #44
27c0c                 | ' {
27c0c                 | ' 
27c0c                 | ' 	return *((DWORD*)ptr);
27c0c     09 FB 01 FB | 	rdlong	result1, arg01
27c10     0C 24 86 F1 | 	sub	local04, #12
27c14     12 FB 61 FC | 	wrlong	result1, local04
27c18     10 24 86 F1 | 	sub	local04, #16
27c1c     12 33 02 FB | 	rdlong	local11, local04
27c20     18 24 86 F1 | 	sub	local04, #24
27c24     02 32 66 F0 | 	shl	local11, #2
27c28     6C 00 90 FD | 	jmp	#LR__4057
27c2c                 | LR__4055
27c2c     08 24 06 F1 | 	add	local04, #8
27c30     12 27 EA FA | 	rdword	local05, local04 wz
27c34     08 24 86 F1 | 	sub	local04, #8
27c38     0D FA 05 A6 |  if_e	mov	result1, #13
27c3c     A8 01 90 AD |  if_e	jmp	#LR__4060
27c40     24 24 06 F1 | 	add	local04, #36
27c44     12 27 02 FB | 	rdlong	local05, local04
27c48     15 27 02 F1 | 	add	local05, local07
27c4c     04 24 06 F1 | 	add	local04, #4
27c50     12 27 62 FC | 	wrlong	local05, local04
27c54     28 24 86 F1 | 	sub	local04, #40
27c58     02 30 0E F2 | 	cmp	local10, #2 wz
27c5c     18 24 06 A1 |  if_e	add	local04, #24
27c60     12 27 02 AB |  if_e	rdlong	local05, local04
27c64     18 24 86 A1 |  if_e	sub	local04, #24
27c68     01 26 66 A0 |  if_e	shl	local05, #1
27c6c     24 00 90 AD |  if_e	jmp	#LR__4056
27c70     18 24 06 F1 | 	add	local04, #24
27c74     12 33 02 FB | 	rdlong	local11, local04
27c78     19 27 02 F6 | 	mov	local05, local11
27c7c     01 26 66 F0 | 	shl	local05, #1
27c80     19 27 02 F1 | 	add	local05, local11
27c84     01 26 46 F0 | 	shr	local05, #1
27c88     18 24 86 F1 | 	sub	local04, #24
27c8c     01 32 06 F5 | 	and	local11, #1
27c90     19 27 02 F1 | 	add	local05, local11
27c94                 | LR__4056
27c94     13 33 02 F6 | 	mov	local11, local05
27c98                 | LR__4057
27c98     FF 33 06 F1 | 	add	local11, #511
27c9c     09 32 46 F0 | 	shr	local11, #9
27ca0     1C 24 06 F1 | 	add	local04, #28
27ca4     12 17 02 FB | 	rdlong	arg03, local04
27ca8     1C 24 86 F1 | 	sub	local04, #28
27cac     19 17 12 F2 | 	cmp	arg03, local11 wc
27cb0     0D FA 05 C6 |  if_b	mov	result1, #13
27cb4     30 01 90 CD |  if_b	jmp	#LR__4060
27cb8     14 24 06 F1 | 	add	local04, #20
27cbc     FF FF FF FF 
27cc0     12 FF 6B FC | 	wrlong	##-1, local04
27cc4     04 24 86 F1 | 	sub	local04, #4
27cc8     FF FF FF FF 
27ccc     12 FF 6B FC | 	wrlong	##-1, local04
27cd0     0C 24 86 F1 | 	sub	local04, #12
27cd4     12 01 49 FC | 	wrbyte	#128, local04
27cd8     04 24 86 F1 | 	sub	local04, #4
27cdc     03 30 0E F2 | 	cmp	local10, #3 wz
27ce0     D0 00 90 5D |  if_ne	jmp	#LR__4059
27ce4     34 24 06 F1 | 	add	local04, #52
27ce8     12 13 02 F6 | 	mov	arg01, local04
27cec     34 24 86 F1 | 	sub	local04, #52
27cf0     30 12 06 F1 | 	add	arg01, #48
27cf4                 | ' {
27cf4                 | ' 
27cf4                 | ' 	return *((WORD*)ptr);
27cf4     09 FB E1 FA | 	rdword	result1, arg01
27cf8     FD 26 32 F9 | 	getword	local05, result1, #0
27cfc     01 26 0E F2 | 	cmp	local05, #1 wz
27d00     B0 00 90 5D |  if_ne	jmp	#LR__4059
27d04     01 28 06 F1 | 	add	local06, #1
27d08     12 13 02 F6 | 	mov	arg01, local04
27d0c     14 15 02 F6 | 	mov	arg02, local06
27d10     CC CD BF FD | 	call	#_fatfs_cc_move_window
27d14     00 FA 0D F2 | 	cmp	result1, #0 wz
27d18     98 00 90 5D |  if_ne	jmp	#LR__4059
27d1c     04 24 06 F1 | 	add	local04, #4
27d20     12 01 48 FC | 	wrbyte	#0, local04
27d24     30 24 06 F1 | 	add	local04, #48
27d28     12 13 02 F6 | 	mov	arg01, local04
27d2c     34 24 86 F1 | 	sub	local04, #52
27d30     FE 13 06 F1 | 	add	arg01, #510
27d34                 | ' {
27d34                 | ' 
27d34                 | ' 	return *((WORD*)ptr);
27d34     09 FB E1 FA | 	rdword	result1, arg01
27d38     FD 26 32 F9 | 	getword	local05, result1, #0
27d3c     55 00 00 FF 
27d40     55 26 0E F2 | 	cmp	local05, ##43605 wz
27d44     34 24 06 A1 |  if_e	add	local04, #52
27d48     12 13 02 A6 |  if_e	mov	arg01, local04
27d4c     34 24 86 A1 |  if_e	sub	local04, #52
27d50                 | ' {
27d50                 | ' 
27d50                 | ' 	return *((DWORD*)ptr);
27d50     09 FB 01 AB |  if_e	rdlong	result1, arg01
27d54     A9 B0 20 AF 
27d58     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
27d5c     54 00 90 5D |  if_ne	jmp	#LR__4058
27d60     34 24 06 F1 | 	add	local04, #52
27d64     12 13 02 F6 | 	mov	arg01, local04
27d68     34 24 86 F1 | 	sub	local04, #52
27d6c     E4 13 06 F1 | 	add	arg01, #484
27d70                 | ' {
27d70                 | ' 
27d70                 | ' 	return *((DWORD*)ptr);
27d70     09 FB 01 FB | 	rdlong	result1, arg01
27d74     B9 A0 30 FF 
27d78     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
27d7c     34 00 90 5D |  if_ne	jmp	#LR__4058
27d80     34 24 06 F1 | 	add	local04, #52
27d84     12 13 02 F6 | 	mov	arg01, local04
27d88     E8 13 06 F1 | 	add	arg01, #488
27d8c                 | ' {
27d8c                 | ' 
27d8c                 | ' 	return *((DWORD*)ptr);
27d8c     09 FB 01 FB | 	rdlong	result1, arg01
27d90     20 24 86 F1 | 	sub	local04, #32
27d94     12 FB 61 FC | 	wrlong	result1, local04
27d98     20 24 06 F1 | 	add	local04, #32
27d9c     12 13 02 F6 | 	mov	arg01, local04
27da0     EC 13 06 F1 | 	add	arg01, #492
27da4                 | ' {
27da4                 | ' 
27da4                 | ' 	return *((DWORD*)ptr);
27da4     09 FB 01 FB | 	rdlong	result1, arg01
27da8     24 24 86 F1 | 	sub	local04, #36
27dac     12 FB 61 FC | 	wrlong	result1, local04
27db0     10 24 86 F1 | 	sub	local04, #16
27db4                 | LR__4058
27db4                 | LR__4059
27db4     12 31 42 FC | 	wrbyte	local10, local04
27db8     04 E4 05 F1 | 	add	objptr, #4
27dbc     F2 26 E2 FA | 	rdword	local05, objptr
27dc0     01 26 06 F1 | 	add	local05, #1
27dc4     F2 26 52 FC | 	wrword	local05, objptr
27dc8     F2 32 E2 FA | 	rdword	local11, objptr
27dcc     06 24 06 F1 | 	add	local04, #6
27dd0     12 33 52 FC | 	wrword	local11, local04
27dd4     04 E4 05 F1 | 	add	objptr, #4
27dd8     06 24 06 F1 | 	add	local04, #6
27ddc     12 E5 61 FC | 	wrlong	objptr, local04
27de0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
27de0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
27de0                 | ' 			{
27de0                 | ' 
27de0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
27de0                 | ' 
27de0                 | ' 
27de0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
27de0                 | ' 
27de0                 | ' 			}
27de0                 | ' 		}
27de0                 | ' 
27de0                 | ' 
27de0                 | ' 	}
27de0                 | ' 
27de0                 | ' 	fs->fs_type = (BYTE)fmt;
27de0                 | ' 	fs->id = ++Fsid;
27de0                 | ' 
27de0                 | ' 	fs->lfnbuf = LfnBuf;
27de0                 | ' #line 3567 "ff.c"
27de0                 | ' 	return FR_OK;
27de0     00 FA 05 F6 | 	mov	result1, #0
27de4     08 E4 85 F1 | 	sub	objptr, #8
27de8                 | LR__4060
27de8     A7 F0 03 F6 | 	mov	ptra, fp
27dec     B2 00 A0 FD | 	call	#popregs_
27df0                 | _fatfs_cc_mount_volume_ret
27df0     2D 00 64 FD | 	ret
27df4                 | 
27df4                 | _fatfs_cc_validate
27df4     09 01 0A F6 | 	mov	_var01, arg01 wz
27df8     09 02 06 F6 | 	mov	_var02, #9
27dfc     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
27e00     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
27e04     50 00 90 AD |  if_e	jmp	#LR__4070
27e08     04 00 06 F1 | 	add	_var01, #4
27e0c     00 07 E2 FA | 	rdword	_var04, _var01
27e10     04 00 86 F1 | 	sub	_var01, #4
27e14     00 13 02 FB | 	rdlong	arg01, _var01
27e18     06 12 06 F1 | 	add	arg01, #6
27e1c     09 FB E1 FA | 	rdword	result1, arg01
27e20     FD 06 0A F2 | 	cmp	_var04, result1 wz
27e24     30 00 90 5D |  if_ne	jmp	#LR__4070
27e28     00 07 02 FB | 	rdlong	_var04, _var01
27e2c     01 06 06 F1 | 	add	_var04, #1
27e30     03 13 CA FA | 	rdbyte	arg01, _var04 wz
27e34     01 FA 05 56 |  if_ne	mov	result1, #1
27e38                 | ' 
27e38                 | ' 	return Stat;
27e38     01 00 00 AF 
27e3c     20 E4 05 A1 |  if_e	add	objptr, ##544
27e40     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27e44     01 00 00 AF 
27e48     20 E4 85 A1 |  if_e	sub	objptr, ##544
27e4c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
27e50     01 04 CE F7 | 	test	_var03, #1 wz
27e54     00 02 06 A6 |  if_e	mov	_var02, #0
27e58                 | LR__4070
27e58     00 02 0E F2 | 	cmp	_var02, #0 wz
27e5c     00 05 02 AB |  if_e	rdlong	_var03, _var01
27e60     00 04 06 56 |  if_ne	mov	_var03, #0
27e64     0A 05 62 FC | 	wrlong	_var03, arg02
27e68                 | ' 			res = FR_OK;
27e68                 | ' 		}
27e68                 | ' 
27e68                 | ' 	}
27e68                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
27e68                 | ' 	return res;
27e68     01 FB 01 F6 | 	mov	result1, _var02
27e6c                 | _fatfs_cc_validate_ret
27e6c     2D 00 64 FD | 	ret
27e70                 | 
27e70                 | _fatfs_cc_f_mount
27e70     01 4A 05 F6 | 	mov	COUNT_, #1
27e74     A8 00 A0 FD | 	call	#pushregs_
27e78     20 F0 07 F1 | 	add	ptra, #32
27e7c     04 4E 05 F1 | 	add	fp, #4
27e80     A7 12 62 FC | 	wrlong	arg01, fp
27e84     04 4E 05 F1 | 	add	fp, #4
27e88     A7 14 62 FC | 	wrlong	arg02, fp
27e8c     04 4E 05 F1 | 	add	fp, #4
27e90     A7 16 42 FC | 	wrbyte	arg03, fp
27e94     04 4E 85 F1 | 	sub	fp, #4
27e98     A7 16 02 FB | 	rdlong	arg03, fp
27e9c     14 4E 05 F1 | 	add	fp, #20
27ea0     A7 16 62 FC | 	wrlong	arg03, fp
27ea4     A7 12 02 F6 | 	mov	arg01, fp
27ea8     1C 4E 85 F1 | 	sub	fp, #28
27eac     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
27eb0     14 4E 05 F1 | 	add	fp, #20
27eb4     A7 FA 61 FC | 	wrlong	result1, fp
27eb8     14 4E 85 F1 | 	sub	fp, #20
27ebc     00 FA 55 F2 | 	cmps	result1, #0 wc
27ec0     0B FA 05 C6 |  if_b	mov	result1, #11
27ec4     C0 00 90 CD |  if_b	jmp	#LR__4081
27ec8     14 4E 05 F1 | 	add	fp, #20
27ecc     A7 16 02 FB | 	rdlong	arg03, fp
27ed0     02 16 66 F0 | 	shl	arg03, #2
27ed4     F2 16 02 F1 | 	add	arg03, objptr
27ed8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
27edc     04 4E 85 F1 | 	sub	fp, #4
27ee0     A7 16 62 FC | 	wrlong	arg03, fp
27ee4     10 4E 85 F1 | 	sub	fp, #16
27ee8     28 00 90 AD |  if_e	jmp	#LR__4080
27eec     10 4E 05 F1 | 	add	fp, #16
27ef0     A7 16 02 FB | 	rdlong	arg03, fp
27ef4     10 4E 85 F1 | 	sub	fp, #16
27ef8     01 16 06 F1 | 	add	arg03, #1
27efc     0B 13 C2 FA | 	rdbyte	arg01, arg03
27f00     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
27f04     10 4E 05 F1 | 	add	fp, #16
27f08     A7 16 02 FB | 	rdlong	arg03, fp
27f0c     10 4E 85 F1 | 	sub	fp, #16
27f10     0B 01 48 FC | 	wrbyte	#0, arg03
27f14                 | LR__4080
27f14     04 4E 05 F1 | 	add	fp, #4
27f18     A7 1E 0A FB | 	rdlong	local01, fp wz
27f1c     04 4E 85 F1 | 	sub	fp, #4
27f20     04 4E 05 51 |  if_ne	add	fp, #4
27f24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
27f28     04 4E 85 51 |  if_ne	sub	fp, #4
27f2c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
27f30     14 4E 05 F1 | 	add	fp, #20
27f34     A7 1E 02 FB | 	rdlong	local01, fp
27f38     02 1E 66 F0 | 	shl	local01, #2
27f3c     F2 1E 02 F1 | 	add	local01, objptr
27f40     10 4E 85 F1 | 	sub	fp, #16
27f44     A7 16 02 FB | 	rdlong	arg03, fp
27f48     0F 17 62 FC | 	wrlong	arg03, local01
27f4c     08 4E 05 F1 | 	add	fp, #8
27f50     A7 1E CA FA | 	rdbyte	local01, fp wz
27f54     0C 4E 85 F1 | 	sub	fp, #12
27f58     00 FA 05 A6 |  if_e	mov	result1, #0
27f5c     28 00 90 AD |  if_e	jmp	#LR__4081
27f60     08 4E 05 F1 | 	add	fp, #8
27f64     A7 12 02 F6 | 	mov	arg01, fp
27f68     04 4E 85 F1 | 	sub	fp, #4
27f6c     A7 14 02 F6 | 	mov	arg02, fp
27f70     04 4E 85 F1 | 	sub	fp, #4
27f74     00 16 06 F6 | 	mov	arg03, #0
27f78     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
27f7c     18 4E 05 F1 | 	add	fp, #24
27f80     A7 FA 61 FC | 	wrlong	result1, fp
27f84                 | ' 
27f84                 | ' 	res = mount_volume(&path, &fs, 0);
27f84                 | ' 	return res ;
27f84     18 4E 85 F1 | 	sub	fp, #24
27f88                 | LR__4081
27f88     A7 F0 03 F6 | 	mov	ptra, fp
27f8c     B2 00 A0 FD | 	call	#popregs_
27f90                 | _fatfs_cc_f_mount_ret
27f90     2D 00 64 FD | 	ret
27f94                 | 
27f94                 | _fatfs_cc_f_open
27f94     02 4A 05 F6 | 	mov	COUNT_, #2
27f98     A8 00 A0 FD | 	call	#pushregs_
27f9c     60 F0 07 F1 | 	add	ptra, #96
27fa0     04 4E 05 F1 | 	add	fp, #4
27fa4     A7 12 62 FC | 	wrlong	arg01, fp
27fa8     04 4E 05 F1 | 	add	fp, #4
27fac     A7 14 62 FC | 	wrlong	arg02, fp
27fb0     04 4E 05 F1 | 	add	fp, #4
27fb4     A7 16 42 FC | 	wrbyte	arg03, fp
27fb8     08 4E 85 F1 | 	sub	fp, #8
27fbc     A7 18 0A FB | 	rdlong	arg04, fp wz
27fc0     04 4E 85 F1 | 	sub	fp, #4
27fc4     09 FA 05 A6 |  if_e	mov	result1, #9
27fc8     98 06 90 AD |  if_e	jmp	#LR__4107
27fcc     0C 4E 05 F1 | 	add	fp, #12
27fd0     A7 18 C2 FA | 	rdbyte	arg04, fp
27fd4     3F 18 06 F5 | 	and	arg04, #63
27fd8     A7 18 42 FC | 	wrbyte	arg04, fp
27fdc     04 4E 85 F1 | 	sub	fp, #4
27fe0     A7 12 02 F6 | 	mov	arg01, fp
27fe4     3C 4E 05 F1 | 	add	fp, #60
27fe8     A7 14 02 F6 | 	mov	arg02, fp
27fec     38 4E 85 F1 | 	sub	fp, #56
27ff0     A7 16 C2 FA | 	rdbyte	arg03, fp
27ff4     0C 4E 85 F1 | 	sub	fp, #12
27ff8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
27ffc     10 4E 05 F1 | 	add	fp, #16
28000     A7 FA 61 FC | 	wrlong	result1, fp
28004     10 4E 85 F1 | 	sub	fp, #16
28008     00 FA 0D F2 | 	cmp	result1, #0 wz
2800c     2C 06 90 5D |  if_ne	jmp	#LR__4106
28010     44 4E 05 F1 | 	add	fp, #68
28014     A7 18 02 FB | 	rdlong	arg04, fp
28018     30 4E 85 F1 | 	sub	fp, #48
2801c     A7 18 62 FC | 	wrlong	arg04, fp
28020     A7 12 02 F6 | 	mov	arg01, fp
28024     0C 4E 85 F1 | 	sub	fp, #12
28028     A7 1E 02 FB | 	rdlong	local01, fp
2802c     08 4E 85 F1 | 	sub	fp, #8
28030     0F 15 02 F6 | 	mov	arg02, local01
28034     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
28038     10 4E 05 F1 | 	add	fp, #16
2803c     A7 FA 61 FC | 	wrlong	result1, fp
28040     10 4E 85 F1 | 	sub	fp, #16
28044     00 FA 0D F2 | 	cmp	result1, #0 wz
28048     1C 00 90 5D |  if_ne	jmp	#LR__4090
2804c     3F 4E 05 F1 | 	add	fp, #63
28050     A7 18 C2 FA | 	rdbyte	arg04, fp
28054     3F 4E 85 F1 | 	sub	fp, #63
28058     80 18 CE F7 | 	test	arg04, #128 wz
2805c     10 4E 05 51 |  if_ne	add	fp, #16
28060     A7 0C 68 5C |  if_ne	wrlong	#6, fp
28064     10 4E 85 51 |  if_ne	sub	fp, #16
28068                 | LR__4090
28068     0C 4E 05 F1 | 	add	fp, #12
2806c     A7 18 C2 FA | 	rdbyte	arg04, fp
28070     0C 4E 85 F1 | 	sub	fp, #12
28074     1C 18 CE F7 | 	test	arg04, #28 wz
28078     F0 01 90 AD |  if_e	jmp	#LR__4095
2807c     10 4E 05 F1 | 	add	fp, #16
28080     A7 1E 0A FB | 	rdlong	local01, fp wz
28084     10 4E 85 F1 | 	sub	fp, #16
28088     48 00 90 AD |  if_e	jmp	#LR__4092
2808c     10 4E 05 F1 | 	add	fp, #16
28090     A7 18 02 FB | 	rdlong	arg04, fp
28094     10 4E 85 F1 | 	sub	fp, #16
28098     04 18 0E F2 | 	cmp	arg04, #4 wz
2809c     1C 00 90 5D |  if_ne	jmp	#LR__4091
280a0     14 4E 05 F1 | 	add	fp, #20
280a4     A7 12 02 F6 | 	mov	arg01, fp
280a8     14 4E 85 F1 | 	sub	fp, #20
280ac     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
280b0     10 4E 05 F1 | 	add	fp, #16
280b4     A7 FA 61 FC | 	wrlong	result1, fp
280b8     10 4E 85 F1 | 	sub	fp, #16
280bc                 | LR__4091
280bc     0C 4E 05 F1 | 	add	fp, #12
280c0     A7 1E C2 FA | 	rdbyte	local01, fp
280c4     08 1E 46 F5 | 	or	local01, #8
280c8     A7 1E 42 FC | 	wrbyte	local01, fp
280cc     0C 4E 85 F1 | 	sub	fp, #12
280d0     3C 00 90 FD | 	jmp	#LR__4094
280d4                 | LR__4092
280d4     1A 4E 05 F1 | 	add	fp, #26
280d8     A7 1E C2 FA | 	rdbyte	local01, fp
280dc     1A 4E 85 F1 | 	sub	fp, #26
280e0     11 1E CE F7 | 	test	local01, #17 wz
280e4     10 4E 05 51 |  if_ne	add	fp, #16
280e8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
280ec     10 4E 85 51 |  if_ne	sub	fp, #16
280f0     1C 00 90 5D |  if_ne	jmp	#LR__4093
280f4     0C 4E 05 F1 | 	add	fp, #12
280f8     A7 1E C2 FA | 	rdbyte	local01, fp
280fc     0C 4E 85 F1 | 	sub	fp, #12
28100     04 1E CE F7 | 	test	local01, #4 wz
28104     10 4E 05 51 |  if_ne	add	fp, #16
28108     A7 10 68 5C |  if_ne	wrlong	#8, fp
2810c     10 4E 85 51 |  if_ne	sub	fp, #16
28110                 | LR__4093
28110                 | LR__4094
28110     10 4E 05 F1 | 	add	fp, #16
28114     A7 1E 0A FB | 	rdlong	local01, fp wz
28118     10 4E 85 F1 | 	sub	fp, #16
2811c     A8 01 90 5D |  if_ne	jmp	#LR__4098
28120     0C 4E 05 F1 | 	add	fp, #12
28124     A7 1E C2 FA | 	rdbyte	local01, fp
28128     0C 4E 85 F1 | 	sub	fp, #12
2812c     08 1E CE F7 | 	test	local01, #8 wz
28130     94 01 90 AD |  if_e	jmp	#LR__4098
28134     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
28138     54 4E 05 F1 | 	add	fp, #84
2813c     A7 FA 61 FC | 	wrlong	result1, fp
28140     24 4E 85 F1 | 	sub	fp, #36
28144     A7 12 02 FB | 	rdlong	arg01, fp
28148     0E 12 06 F1 | 	add	arg01, #14
2814c     09 FB 61 FC | 	wrlong	result1, arg01
28150     A7 12 02 FB | 	rdlong	arg01, fp
28154     16 12 06 F1 | 	add	arg01, #22
28158     24 4E 05 F1 | 	add	fp, #36
2815c     A7 14 02 FB | 	rdlong	arg02, fp
28160     09 15 62 FC | 	wrlong	arg02, arg01
28164     10 4E 85 F1 | 	sub	fp, #16
28168     A7 12 02 FB | 	rdlong	arg01, fp
2816c     14 4E 85 F1 | 	sub	fp, #20
28170     A7 14 02 FB | 	rdlong	arg02, fp
28174     30 4E 85 F1 | 	sub	fp, #48
28178     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2817c     48 4E 05 F1 | 	add	fp, #72
28180     A7 FA 61 FC | 	wrlong	result1, fp
28184     18 4E 85 F1 | 	sub	fp, #24
28188     A7 1E 02 FB | 	rdlong	local01, fp
2818c     0B 1E 06 F1 | 	add	local01, #11
28190     0F 41 48 FC | 	wrbyte	#32, local01
28194     14 4E 05 F1 | 	add	fp, #20
28198     A7 12 02 FB | 	rdlong	arg01, fp
2819c     14 4E 85 F1 | 	sub	fp, #20
281a0     A7 14 02 FB | 	rdlong	arg02, fp
281a4     30 4E 85 F1 | 	sub	fp, #48
281a8     00 16 06 F6 | 	mov	arg03, #0
281ac     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
281b0     30 4E 05 F1 | 	add	fp, #48
281b4     A7 12 02 FB | 	rdlong	arg01, fp
281b8     1C 12 06 F1 | 	add	arg01, #28
281bc     09 01 68 FC | 	wrlong	#0, arg01
281c0     14 4E 05 F1 | 	add	fp, #20
281c4     A7 1E 02 FB | 	rdlong	local01, fp
281c8     03 1E 06 F1 | 	add	local01, #3
281cc     0F 03 48 FC | 	wrbyte	#1, local01
281d0     04 4E 05 F1 | 	add	fp, #4
281d4     A7 1E 0A FB | 	rdlong	local01, fp wz
281d8     48 4E 85 F1 | 	sub	fp, #72
281dc     E8 00 90 AD |  if_e	jmp	#LR__4098
281e0     44 4E 05 F1 | 	add	fp, #68
281e4     A7 1E 02 FB | 	rdlong	local01, fp
281e8     30 1E 06 F1 | 	add	local01, #48
281ec     0F 1F 02 FB | 	rdlong	local01, local01
281f0     14 4E 05 F1 | 	add	fp, #20
281f4     A7 1E 62 FC | 	wrlong	local01, fp
281f8     44 4E 85 F1 | 	sub	fp, #68
281fc     A7 12 02 F6 | 	mov	arg01, fp
28200     34 4E 05 F1 | 	add	fp, #52
28204     A7 14 02 FB | 	rdlong	arg02, fp
28208     48 4E 85 F1 | 	sub	fp, #72
2820c     00 16 06 F6 | 	mov	arg03, #0
28210     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
28214     10 4E 05 F1 | 	add	fp, #16
28218     A7 FA 61 FC | 	wrlong	result1, fp
2821c     10 4E 85 F1 | 	sub	fp, #16
28220     00 FA 0D F2 | 	cmp	result1, #0 wz
28224     A0 00 90 5D |  if_ne	jmp	#LR__4098
28228     44 4E 05 F1 | 	add	fp, #68
2822c     A7 12 02 FB | 	rdlong	arg01, fp
28230     14 4E 05 F1 | 	add	fp, #20
28234     A7 14 02 FB | 	rdlong	arg02, fp
28238     58 4E 85 F1 | 	sub	fp, #88
2823c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
28240     10 4E 05 F1 | 	add	fp, #16
28244     A7 FA 61 FC | 	wrlong	result1, fp
28248     34 4E 05 F1 | 	add	fp, #52
2824c     A7 18 02 FB | 	rdlong	arg04, fp
28250     04 4E 05 F1 | 	add	fp, #4
28254     A7 1E 02 FB | 	rdlong	local01, fp
28258     48 4E 85 F1 | 	sub	fp, #72
2825c     01 1E 86 F1 | 	sub	local01, #1
28260     10 18 06 F1 | 	add	arg04, #16
28264     0C 1F 62 FC | 	wrlong	local01, arg04
28268     5C 00 90 FD | 	jmp	#LR__4098
2826c                 | LR__4095
2826c     10 4E 05 F1 | 	add	fp, #16
28270     A7 18 0A FB | 	rdlong	arg04, fp wz
28274     10 4E 85 F1 | 	sub	fp, #16
28278     4C 00 90 5D |  if_ne	jmp	#LR__4097
2827c     1A 4E 05 F1 | 	add	fp, #26
28280     A7 18 C2 FA | 	rdbyte	arg04, fp
28284     1A 4E 85 F1 | 	sub	fp, #26
28288     10 18 CE F7 | 	test	arg04, #16 wz
2828c     10 4E 05 51 |  if_ne	add	fp, #16
28290     A7 08 68 5C |  if_ne	wrlong	#4, fp
28294     10 4E 85 51 |  if_ne	sub	fp, #16
28298     2C 00 90 5D |  if_ne	jmp	#LR__4096
2829c     0C 4E 05 F1 | 	add	fp, #12
282a0     A7 18 C2 FA | 	rdbyte	arg04, fp
282a4     0C 4E 85 F1 | 	sub	fp, #12
282a8     02 18 CE F7 | 	test	arg04, #2 wz
282ac     1A 4E 05 51 |  if_ne	add	fp, #26
282b0     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
282b4     1A 4E 85 51 |  if_ne	sub	fp, #26
282b8     01 1E CE 57 |  if_ne	test	local01, #1 wz
282bc     10 4E 05 51 |  if_ne	add	fp, #16
282c0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
282c4     10 4E 85 51 |  if_ne	sub	fp, #16
282c8                 | LR__4096
282c8                 | LR__4097
282c8                 | LR__4098
282c8     10 4E 05 F1 | 	add	fp, #16
282cc     A7 1E 0A FB | 	rdlong	local01, fp wz
282d0     10 4E 85 F1 | 	sub	fp, #16
282d4     60 00 90 5D |  if_ne	jmp	#LR__4099
282d8     0C 4E 05 F1 | 	add	fp, #12
282dc     A7 20 C2 FA | 	rdbyte	local02, fp
282e0     0C 4E 85 F1 | 	sub	fp, #12
282e4     08 20 CE F7 | 	test	local02, #8 wz
282e8     0C 4E 05 51 |  if_ne	add	fp, #12
282ec     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
282f0     40 20 46 55 |  if_ne	or	local02, #64
282f4     A7 20 42 5C |  if_ne	wrbyte	local02, fp
282f8     0C 4E 85 51 |  if_ne	sub	fp, #12
282fc     04 4E 05 F1 | 	add	fp, #4
28300     A7 20 02 FB | 	rdlong	local02, fp
28304     40 4E 05 F1 | 	add	fp, #64
28308     A7 1E 02 FB | 	rdlong	local01, fp
2830c     30 1E 06 F1 | 	add	local01, #48
28310     0F 1F 02 FB | 	rdlong	local01, local01
28314     20 20 06 F1 | 	add	local02, #32
28318     10 1F 62 FC | 	wrlong	local01, local02
2831c     40 4E 85 F1 | 	sub	fp, #64
28320     A7 20 02 FB | 	rdlong	local02, fp
28324     2C 4E 05 F1 | 	add	fp, #44
28328     A7 1E 02 FB | 	rdlong	local01, fp
2832c     30 4E 85 F1 | 	sub	fp, #48
28330     24 20 06 F1 | 	add	local02, #36
28334     10 1F 62 FC | 	wrlong	local01, local02
28338                 | LR__4099
28338     10 4E 05 F1 | 	add	fp, #16
2833c     A7 20 0A FB | 	rdlong	local02, fp wz
28340     10 4E 85 F1 | 	sub	fp, #16
28344     F4 02 90 5D |  if_ne	jmp	#LR__4105
28348     04 4E 05 F1 | 	add	fp, #4
2834c     A7 20 02 FB | 	rdlong	local02, fp
28350     40 4E 05 F1 | 	add	fp, #64
28354     A7 12 02 FB | 	rdlong	arg01, fp
28358     14 4E 85 F1 | 	sub	fp, #20
2835c     A7 14 02 FB | 	rdlong	arg02, fp
28360     30 4E 85 F1 | 	sub	fp, #48
28364     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
28368     08 20 06 F1 | 	add	local02, #8
2836c     10 FB 61 FC | 	wrlong	result1, local02
28370     04 4E 05 F1 | 	add	fp, #4
28374     A7 20 02 FB | 	rdlong	local02, fp
28378     2C 4E 05 F1 | 	add	fp, #44
2837c     A7 12 02 FB | 	rdlong	arg01, fp
28380     1C 12 06 F1 | 	add	arg01, #28
28384                 | ' {
28384                 | ' 
28384                 | ' 	return *((DWORD*)ptr);
28384     09 FB 01 FB | 	rdlong	result1, arg01
28388     0C 20 06 F1 | 	add	local02, #12
2838c     10 FB 61 FC | 	wrlong	result1, local02
28390     2C 4E 85 F1 | 	sub	fp, #44
28394     A7 20 02 FB | 	rdlong	local02, fp
28398     40 4E 05 F1 | 	add	fp, #64
2839c     A7 1E 02 FB | 	rdlong	local01, fp
283a0     10 1F 62 FC | 	wrlong	local01, local02
283a4     40 4E 85 F1 | 	sub	fp, #64
283a8     A7 20 02 FB | 	rdlong	local02, fp
283ac     40 4E 05 F1 | 	add	fp, #64
283b0     A7 1E 02 FB | 	rdlong	local01, fp
283b4     06 1E 06 F1 | 	add	local01, #6
283b8     0F 1F E2 FA | 	rdword	local01, local01
283bc     04 20 06 F1 | 	add	local02, #4
283c0     10 1F 52 FC | 	wrword	local01, local02
283c4     40 4E 85 F1 | 	sub	fp, #64
283c8     A7 20 02 FB | 	rdlong	local02, fp
283cc     08 4E 05 F1 | 	add	fp, #8
283d0     A7 1E C2 FA | 	rdbyte	local01, fp
283d4     10 20 06 F1 | 	add	local02, #16
283d8     10 1F 42 FC | 	wrbyte	local01, local02
283dc     08 4E 85 F1 | 	sub	fp, #8
283e0     A7 20 02 FB | 	rdlong	local02, fp
283e4     11 20 06 F1 | 	add	local02, #17
283e8     10 01 48 FC | 	wrbyte	#0, local02
283ec     A7 20 02 FB | 	rdlong	local02, fp
283f0     1C 20 06 F1 | 	add	local02, #28
283f4     10 01 68 FC | 	wrlong	#0, local02
283f8     A7 20 02 FB | 	rdlong	local02, fp
283fc     14 20 06 F1 | 	add	local02, #20
28400     10 01 68 FC | 	wrlong	#0, local02
28404     A7 12 02 FB | 	rdlong	arg01, fp
28408     04 4E 85 F1 | 	sub	fp, #4
2840c     28 12 06 F1 | 	add	arg01, #40
28410     00 14 06 F6 | 	mov	arg02, #0
28414     09 16 C6 F9 | 	decod	arg03, #9
28418     98 00 A0 FD | 	call	#\builtin_bytefill_
2841c     0C 4E 05 F1 | 	add	fp, #12
28420     A7 20 C2 FA | 	rdbyte	local02, fp
28424     0C 4E 85 F1 | 	sub	fp, #12
28428     20 20 CE F7 | 	test	local02, #32 wz
2842c     0C 02 90 AD |  if_e	jmp	#LR__4104
28430     04 4E 05 F1 | 	add	fp, #4
28434     A7 1E 02 FB | 	rdlong	local01, fp
28438     04 4E 85 F1 | 	sub	fp, #4
2843c     0C 1E 06 F1 | 	add	local01, #12
28440     0F 21 02 FB | 	rdlong	local02, local01
28444     01 20 16 F2 | 	cmp	local02, #1 wc
28448     F0 01 90 CD |  if_b	jmp	#LR__4104
2844c     04 4E 05 F1 | 	add	fp, #4
28450     A7 1E 02 FB | 	rdlong	local01, fp
28454     0F 21 02 F6 | 	mov	local02, local01
28458     0C 1E 06 F1 | 	add	local01, #12
2845c     0F 1F 02 FB | 	rdlong	local01, local01
28460     14 20 06 F1 | 	add	local02, #20
28464     10 1F 62 FC | 	wrlong	local01, local02
28468     40 4E 05 F1 | 	add	fp, #64
2846c     A7 20 02 FB | 	rdlong	local02, fp
28470     0A 20 06 F1 | 	add	local02, #10
28474     10 21 E2 FA | 	rdword	local02, local02
28478     09 20 66 F0 | 	shl	local02, #9
2847c     08 4E 05 F1 | 	add	fp, #8
28480     A7 20 62 FC | 	wrlong	local02, fp
28484     48 4E 85 F1 | 	sub	fp, #72
28488     A7 20 02 FB | 	rdlong	local02, fp
2848c     08 20 06 F1 | 	add	local02, #8
28490     10 1F 02 FB | 	rdlong	local01, local02
28494     4C 4E 05 F1 | 	add	fp, #76
28498     A7 1E 62 FC | 	wrlong	local01, fp
2849c                 | ' 				fp->fptr = fp->obj.objsize;
2849c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2849c                 | ' 				clst = fp->obj.sclust;
2849c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2849c     4C 4E 85 F1 | 	sub	fp, #76
284a0     A7 20 02 FB | 	rdlong	local02, fp
284a4     0C 20 06 F1 | 	add	local02, #12
284a8     10 1F 02 FB | 	rdlong	local01, local02
284ac     58 4E 05 F1 | 	add	fp, #88
284b0     A7 1E 62 FC | 	wrlong	local01, fp
284b4     5C 4E 85 F1 | 	sub	fp, #92
284b8                 | LR__4100
284b8     10 4E 05 F1 | 	add	fp, #16
284bc     A7 20 0A FB | 	rdlong	local02, fp wz
284c0     10 4E 85 F1 | 	sub	fp, #16
284c4     94 00 90 5D |  if_ne	jmp	#LR__4101
284c8     5C 4E 05 F1 | 	add	fp, #92
284cc     A7 20 02 FB | 	rdlong	local02, fp
284d0     10 4E 85 F1 | 	sub	fp, #16
284d4     A7 1E 02 FB | 	rdlong	local01, fp
284d8     4C 4E 85 F1 | 	sub	fp, #76
284dc     0F 21 1A F2 | 	cmp	local02, local01 wcz
284e0     78 00 90 ED |  if_be	jmp	#LR__4101
284e4     04 4E 05 F1 | 	add	fp, #4
284e8     A7 12 02 FB | 	rdlong	arg01, fp
284ec     4C 4E 05 F1 | 	add	fp, #76
284f0     A7 14 02 FB | 	rdlong	arg02, fp
284f4     50 4E 85 F1 | 	sub	fp, #80
284f8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
284fc     50 4E 05 F1 | 	add	fp, #80
28500     A7 FA 61 FC | 	wrlong	result1, fp
28504     50 4E 85 F1 | 	sub	fp, #80
28508     02 FA 15 F2 | 	cmp	result1, #2 wc
2850c     10 4E 05 C1 |  if_b	add	fp, #16
28510     A7 04 68 CC |  if_b	wrlong	#2, fp
28514     10 4E 85 C1 |  if_b	sub	fp, #16
28518     50 4E 05 F1 | 	add	fp, #80
2851c     A7 20 02 FB | 	rdlong	local02, fp
28520     50 4E 85 F1 | 	sub	fp, #80
28524     FF FF 7F FF 
28528     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2852c     10 4E 05 A1 |  if_e	add	fp, #16
28530     A7 02 68 AC |  if_e	wrlong	#1, fp
28534     10 4E 85 A1 |  if_e	sub	fp, #16
28538     5C 4E 05 F1 | 	add	fp, #92
2853c     A7 20 02 FB | 	rdlong	local02, fp
28540     10 4E 85 F1 | 	sub	fp, #16
28544     A7 1E 02 FB | 	rdlong	local01, fp
28548     0F 21 82 F1 | 	sub	local02, local01
2854c     10 4E 05 F1 | 	add	fp, #16
28550     A7 20 62 FC | 	wrlong	local02, fp
28554     5C 4E 85 F1 | 	sub	fp, #92
28558     5C FF 9F FD | 	jmp	#LR__4100
2855c                 | LR__4101
2855c     04 4E 05 F1 | 	add	fp, #4
28560     A7 20 02 FB | 	rdlong	local02, fp
28564     4C 4E 05 F1 | 	add	fp, #76
28568     A7 1E 02 FB | 	rdlong	local01, fp
2856c     18 20 06 F1 | 	add	local02, #24
28570     10 1F 62 FC | 	wrlong	local01, local02
28574     40 4E 85 F1 | 	sub	fp, #64
28578     A7 20 0A FB | 	rdlong	local02, fp wz
2857c     10 4E 85 F1 | 	sub	fp, #16
28580     B8 00 90 5D |  if_ne	jmp	#LR__4103
28584     5C 4E 05 F1 | 	add	fp, #92
28588     A7 1E 02 FB | 	rdlong	local01, fp
2858c     5C 4E 85 F1 | 	sub	fp, #92
28590     FF 1F CE F7 | 	test	local01, #511 wz
28594     A4 00 90 AD |  if_e	jmp	#LR__4103
28598     44 4E 05 F1 | 	add	fp, #68
2859c     A7 12 02 FB | 	rdlong	arg01, fp
285a0     0C 4E 05 F1 | 	add	fp, #12
285a4     A7 14 02 FB | 	rdlong	arg02, fp
285a8     50 4E 85 F1 | 	sub	fp, #80
285ac     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
285b0     58 4E 05 F1 | 	add	fp, #88
285b4     A7 FA 61 FC | 	wrlong	result1, fp
285b8     00 FA 4D F2 | 	cmps	result1, #0 wz
285bc     58 4E 85 F1 | 	sub	fp, #88
285c0     10 4E 05 A1 |  if_e	add	fp, #16
285c4     A7 04 68 AC |  if_e	wrlong	#2, fp
285c8     10 4E 85 A1 |  if_e	sub	fp, #16
285cc     6C 00 90 AD |  if_e	jmp	#LR__4102
285d0     04 4E 05 F1 | 	add	fp, #4
285d4     A7 20 02 FB | 	rdlong	local02, fp
285d8     54 4E 05 F1 | 	add	fp, #84
285dc     A7 1E 02 FB | 	rdlong	local01, fp
285e0     04 4E 05 F1 | 	add	fp, #4
285e4     A7 18 02 FB | 	rdlong	arg04, fp
285e8     09 18 46 F0 | 	shr	arg04, #9
285ec     0C 1F 02 F1 | 	add	local01, arg04
285f0     1C 20 06 F1 | 	add	local02, #28
285f4     10 1F 62 FC | 	wrlong	local01, local02
285f8     18 4E 85 F1 | 	sub	fp, #24
285fc     A7 20 02 FB | 	rdlong	local02, fp
28600     01 20 06 F1 | 	add	local02, #1
28604     10 13 C2 FA | 	rdbyte	arg01, local02
28608     40 4E 85 F1 | 	sub	fp, #64
2860c     A7 20 02 FB | 	rdlong	local02, fp
28610     10 15 02 F6 | 	mov	arg02, local02
28614     28 14 06 F1 | 	add	arg02, #40
28618     04 4E 85 F1 | 	sub	fp, #4
2861c     1C 20 06 F1 | 	add	local02, #28
28620     10 17 02 FB | 	rdlong	arg03, local02
28624     01 18 06 F6 | 	mov	arg04, #1
28628     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2862c     00 FA 0D F2 | 	cmp	result1, #0 wz
28630     10 4E 05 51 |  if_ne	add	fp, #16
28634     A7 02 68 5C |  if_ne	wrlong	#1, fp
28638     10 4E 85 51 |  if_ne	sub	fp, #16
2863c                 | LR__4102
2863c                 | LR__4103
2863c                 | LR__4104
2863c                 | LR__4105
2863c                 | LR__4106
2863c     10 4E 05 F1 | 	add	fp, #16
28640     A7 20 0A FB | 	rdlong	local02, fp wz
28644     10 4E 85 F1 | 	sub	fp, #16
28648     04 4E 05 51 |  if_ne	add	fp, #4
2864c     A7 20 02 5B |  if_ne	rdlong	local02, fp
28650     04 4E 85 51 |  if_ne	sub	fp, #4
28654     10 01 68 5C |  if_ne	wrlong	#0, local02
28658                 | ' 
28658                 | ' 	return res ;
28658     10 4E 05 F1 | 	add	fp, #16
2865c     A7 FA 01 FB | 	rdlong	result1, fp
28660     10 4E 85 F1 | 	sub	fp, #16
28664                 | LR__4107
28664     A7 F0 03 F6 | 	mov	ptra, fp
28668     B2 00 A0 FD | 	call	#popregs_
2866c                 | _fatfs_cc_f_open_ret
2866c     2D 00 64 FD | 	ret
28670                 | 
28670                 | _fatfs_cc_f_read
28670     0E 4A 05 F6 | 	mov	COUNT_, #14
28674     A8 00 A0 FD | 	call	#pushregs_
28678     38 F0 07 F1 | 	add	ptra, #56
2867c     04 4E 05 F1 | 	add	fp, #4
28680     A7 12 62 FC | 	wrlong	arg01, fp
28684     04 4E 05 F1 | 	add	fp, #4
28688     A7 14 62 FC | 	wrlong	arg02, fp
2868c     04 4E 05 F1 | 	add	fp, #4
28690     A7 16 62 FC | 	wrlong	arg03, fp
28694     04 4E 05 F1 | 	add	fp, #4
28698     A7 18 62 FC | 	wrlong	arg04, fp
2869c     08 4E 85 F1 | 	sub	fp, #8
286a0     A7 FA 01 FB | 	rdlong	result1, fp
286a4     2C 4E 05 F1 | 	add	fp, #44
286a8     A7 FA 61 FC | 	wrlong	result1, fp
286ac     24 4E 85 F1 | 	sub	fp, #36
286b0     A7 FA 01 FB | 	rdlong	result1, fp
286b4     FD 00 68 FC | 	wrlong	#0, result1
286b8     0C 4E 85 F1 | 	sub	fp, #12
286bc     A7 12 02 FB | 	rdlong	arg01, fp
286c0     14 4E 05 F1 | 	add	fp, #20
286c4     A7 14 02 F6 | 	mov	arg02, fp
286c8     18 4E 85 F1 | 	sub	fp, #24
286cc     24 F7 BF FD | 	call	#_fatfs_cc_validate
286d0     14 4E 05 F1 | 	add	fp, #20
286d4     A7 FA 61 FC | 	wrlong	result1, fp
286d8     00 FA 4D F2 | 	cmps	result1, #0 wz
286dc     14 4E 85 F1 | 	sub	fp, #20
286e0     20 00 90 5D |  if_ne	jmp	#LR__4110
286e4     04 4E 05 F1 | 	add	fp, #4
286e8     A7 14 02 FB | 	rdlong	arg02, fp
286ec     11 14 06 F1 | 	add	arg02, #17
286f0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
286f4     10 4E 05 F1 | 	add	fp, #16
286f8     A7 14 62 FC | 	wrlong	arg02, fp
286fc     14 4E 85 F1 | 	sub	fp, #20
28700     10 00 90 AD |  if_e	jmp	#LR__4111
28704                 | LR__4110
28704     14 4E 05 F1 | 	add	fp, #20
28708     A7 FA 01 FB | 	rdlong	result1, fp
2870c     14 4E 85 F1 | 	sub	fp, #20
28710     EC 05 90 FD | 	jmp	#LR__4130
28714                 | LR__4111
28714     04 4E 05 F1 | 	add	fp, #4
28718     A7 18 02 FB | 	rdlong	arg04, fp
2871c     04 4E 85 F1 | 	sub	fp, #4
28720     10 18 06 F1 | 	add	arg04, #16
28724     0C 19 C2 FA | 	rdbyte	arg04, arg04
28728     01 18 CE F7 | 	test	arg04, #1 wz
2872c     07 FA 05 A6 |  if_e	mov	result1, #7
28730     CC 05 90 AD |  if_e	jmp	#LR__4130
28734     04 4E 05 F1 | 	add	fp, #4
28738     A7 1E 02 FB | 	rdlong	local01, fp
2873c     0F 21 02 F6 | 	mov	local02, local01
28740     0C 20 06 F1 | 	add	local02, #12
28744     10 23 02 FB | 	rdlong	local03, local02
28748     14 1E 06 F1 | 	add	local01, #20
2874c     0F 1F 02 FB | 	rdlong	local01, local01
28750     0F 23 82 F1 | 	sub	local03, local01
28754     20 4E 05 F1 | 	add	fp, #32
28758     A7 22 62 FC | 	wrlong	local03, fp
2875c     18 4E 85 F1 | 	sub	fp, #24
28760     A7 24 02 FB | 	rdlong	local04, fp
28764     0C 4E 85 F1 | 	sub	fp, #12
28768     11 25 1A F2 | 	cmp	local04, local03 wcz
2876c     24 4E 05 11 |  if_a	add	fp, #36
28770     A7 24 02 1B |  if_a	rdlong	local04, fp
28774     18 4E 85 11 |  if_a	sub	fp, #24
28778     A7 24 62 1C |  if_a	wrlong	local04, fp
2877c     0C 4E 85 11 |  if_a	sub	fp, #12
28780                 | ' 
28780                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
28780                 | LR__4112
28780     0C 4E 05 F1 | 	add	fp, #12
28784     A7 20 02 FB | 	rdlong	local02, fp
28788     0C 4E 85 F1 | 	sub	fp, #12
2878c     10 25 02 F6 | 	mov	local04, local02
28790     01 24 16 F2 | 	cmp	local04, #1 wc
28794     64 05 90 CD |  if_b	jmp	#LR__4129
28798     04 4E 05 F1 | 	add	fp, #4
2879c     A7 22 02 FB | 	rdlong	local03, fp
287a0     04 4E 85 F1 | 	sub	fp, #4
287a4     14 22 06 F1 | 	add	local03, #20
287a8     11 23 02 FB | 	rdlong	local03, local03
287ac     FF 23 CE F7 | 	test	local03, #511 wz
287b0     3C 04 90 5D |  if_ne	jmp	#LR__4127
287b4     04 4E 05 F1 | 	add	fp, #4
287b8     A7 1E 02 FB | 	rdlong	local01, fp
287bc     14 1E 06 F1 | 	add	local01, #20
287c0     0F 23 02 FB | 	rdlong	local03, local01
287c4     09 22 46 F0 | 	shr	local03, #9
287c8     14 4E 05 F1 | 	add	fp, #20
287cc     A7 26 02 FB | 	rdlong	local05, fp
287d0     13 29 02 F6 | 	mov	local06, local05
287d4     0A 28 06 F1 | 	add	local06, #10
287d8     14 2B E2 FA | 	rdword	local07, local06
287dc     0A 28 86 F1 | 	sub	local06, #10
287e0     15 2D 32 F9 | 	getword	local08, local07, #0
287e4     01 2C 86 F1 | 	sub	local08, #1
287e8     16 23 0A F5 | 	and	local03, local08 wz
287ec     18 4E 05 F1 | 	add	fp, #24
287f0     A7 22 62 FC | 	wrlong	local03, fp
287f4     30 4E 85 F1 | 	sub	fp, #48
287f8     E0 00 90 5D |  if_ne	jmp	#LR__4117
287fc     04 4E 05 F1 | 	add	fp, #4
28800     A7 22 02 FB | 	rdlong	local03, fp
28804     04 4E 85 F1 | 	sub	fp, #4
28808     14 22 06 F1 | 	add	local03, #20
2880c     11 23 0A FB | 	rdlong	local03, local03 wz
28810     20 00 90 5D |  if_ne	jmp	#LR__4113
28814     04 4E 05 F1 | 	add	fp, #4
28818     A7 22 02 FB | 	rdlong	local03, fp
2881c     08 22 06 F1 | 	add	local03, #8
28820     11 23 02 FB | 	rdlong	local03, local03
28824     18 4E 05 F1 | 	add	fp, #24
28828     A7 22 62 FC | 	wrlong	local03, fp
2882c     1C 4E 85 F1 | 	sub	fp, #28
28830     28 00 90 FD | 	jmp	#LR__4114
28834                 | LR__4113
28834     04 4E 05 F1 | 	add	fp, #4
28838     A7 2C 02 FB | 	rdlong	local08, fp
2883c     16 13 02 F6 | 	mov	arg01, local08
28840     04 4E 85 F1 | 	sub	fp, #4
28844     18 2C 06 F1 | 	add	local08, #24
28848     16 15 02 FB | 	rdlong	arg02, local08
2884c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
28850     1C 4E 05 F1 | 	add	fp, #28
28854     A7 FA 61 FC | 	wrlong	result1, fp
28858     1C 4E 85 F1 | 	sub	fp, #28
2885c                 | LR__4114
2885c     1C 4E 05 F1 | 	add	fp, #28
28860     A7 22 02 FB | 	rdlong	local03, fp
28864     1C 4E 85 F1 | 	sub	fp, #28
28868     02 22 16 F2 | 	cmp	local03, #2 wc
2886c     1C 00 90 3D |  if_ae	jmp	#LR__4115
28870     04 4E 05 F1 | 	add	fp, #4
28874     A7 22 02 FB | 	rdlong	local03, fp
28878     04 4E 85 F1 | 	sub	fp, #4
2887c     11 22 06 F1 | 	add	local03, #17
28880     11 05 48 FC | 	wrbyte	#2, local03
28884     02 FA 05 F6 | 	mov	result1, #2
28888     74 04 90 FD | 	jmp	#LR__4130
2888c                 | LR__4115
2888c     1C 4E 05 F1 | 	add	fp, #28
28890     A7 22 02 FB | 	rdlong	local03, fp
28894     1C 4E 85 F1 | 	sub	fp, #28
28898     FF FF 7F FF 
2889c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
288a0     1C 00 90 5D |  if_ne	jmp	#LR__4116
288a4     04 4E 05 F1 | 	add	fp, #4
288a8     A7 22 02 FB | 	rdlong	local03, fp
288ac     04 4E 85 F1 | 	sub	fp, #4
288b0     11 22 06 F1 | 	add	local03, #17
288b4     11 03 48 FC | 	wrbyte	#1, local03
288b8     01 FA 05 F6 | 	mov	result1, #1
288bc     40 04 90 FD | 	jmp	#LR__4130
288c0                 | LR__4116
288c0     04 4E 05 F1 | 	add	fp, #4
288c4     A7 22 02 FB | 	rdlong	local03, fp
288c8     18 4E 05 F1 | 	add	fp, #24
288cc     A7 2C 02 FB | 	rdlong	local08, fp
288d0     1C 4E 85 F1 | 	sub	fp, #28
288d4     18 22 06 F1 | 	add	local03, #24
288d8     11 2D 62 FC | 	wrlong	local08, local03
288dc                 | LR__4117
288dc     18 4E 05 F1 | 	add	fp, #24
288e0     A7 12 02 FB | 	rdlong	arg01, fp
288e4     14 4E 85 F1 | 	sub	fp, #20
288e8     A7 22 02 FB | 	rdlong	local03, fp
288ec     04 4E 85 F1 | 	sub	fp, #4
288f0     18 22 06 F1 | 	add	local03, #24
288f4     11 15 02 FB | 	rdlong	arg02, local03
288f8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
288fc     20 4E 05 F1 | 	add	fp, #32
28900     A7 FA 61 FC | 	wrlong	result1, fp
28904     20 4E 85 F1 | 	sub	fp, #32
28908     00 FA 0D F2 | 	cmp	result1, #0 wz
2890c     1C 00 90 5D |  if_ne	jmp	#LR__4118
28910     04 4E 05 F1 | 	add	fp, #4
28914     A7 22 02 FB | 	rdlong	local03, fp
28918     04 4E 85 F1 | 	sub	fp, #4
2891c     11 22 06 F1 | 	add	local03, #17
28920     11 05 48 FC | 	wrbyte	#2, local03
28924     02 FA 05 F6 | 	mov	result1, #2
28928     D4 03 90 FD | 	jmp	#LR__4130
2892c                 | LR__4118
2892c     20 4E 05 F1 | 	add	fp, #32
28930     A7 22 02 FB | 	rdlong	local03, fp
28934     10 4E 05 F1 | 	add	fp, #16
28938     A7 2C 02 FB | 	rdlong	local08, fp
2893c     16 23 02 F1 | 	add	local03, local08
28940     10 4E 85 F1 | 	sub	fp, #16
28944     A7 22 62 FC | 	wrlong	local03, fp
28948     14 4E 85 F1 | 	sub	fp, #20
2894c     A7 22 02 FB | 	rdlong	local03, fp
28950     09 22 46 F0 | 	shr	local03, #9
28954     20 4E 05 F1 | 	add	fp, #32
28958     A7 22 62 FC | 	wrlong	local03, fp
2895c     2C 4E 85 F1 | 	sub	fp, #44
28960     01 22 16 F2 | 	cmp	local03, #1 wc
28964     5C 01 90 CD |  if_b	jmp	#LR__4122
28968     30 4E 05 F1 | 	add	fp, #48
2896c     A7 22 02 FB | 	rdlong	local03, fp
28970     04 4E 85 F1 | 	sub	fp, #4
28974     A7 2C 02 FB | 	rdlong	local08, fp
28978     16 23 02 F1 | 	add	local03, local08
2897c     14 4E 85 F1 | 	sub	fp, #20
28980     A7 2C 02 FB | 	rdlong	local08, fp
28984     18 4E 85 F1 | 	sub	fp, #24
28988     0A 2C 06 F1 | 	add	local08, #10
2898c     16 2D E2 FA | 	rdword	local08, local08
28990     16 23 1A F2 | 	cmp	local03, local08 wcz
28994     28 00 90 ED |  if_be	jmp	#LR__4119
28998     18 4E 05 F1 | 	add	fp, #24
2899c     A7 1E 02 FB | 	rdlong	local01, fp
289a0     0A 1E 06 F1 | 	add	local01, #10
289a4     0F 23 E2 FA | 	rdword	local03, local01
289a8     18 4E 05 F1 | 	add	fp, #24
289ac     A7 2C 02 FB | 	rdlong	local08, fp
289b0     16 23 82 F1 | 	sub	local03, local08
289b4     04 4E 85 F1 | 	sub	fp, #4
289b8     A7 22 62 FC | 	wrlong	local03, fp
289bc     2C 4E 85 F1 | 	sub	fp, #44
289c0                 | LR__4119
289c0     18 4E 05 F1 | 	add	fp, #24
289c4     A7 1E 02 FB | 	rdlong	local01, fp
289c8     01 1E 06 F1 | 	add	local01, #1
289cc     0F 13 C2 FA | 	rdbyte	arg01, local01
289d0     1C 4E 05 F1 | 	add	fp, #28
289d4     A7 14 02 FB | 	rdlong	arg02, fp
289d8     14 4E 85 F1 | 	sub	fp, #20
289dc     A7 16 02 FB | 	rdlong	arg03, fp
289e0     0C 4E 05 F1 | 	add	fp, #12
289e4     A7 18 02 FB | 	rdlong	arg04, fp
289e8     2C 4E 85 F1 | 	sub	fp, #44
289ec     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
289f0     00 FA 0D F2 | 	cmp	result1, #0 wz
289f4     1C 00 90 AD |  if_e	jmp	#LR__4120
289f8     04 4E 05 F1 | 	add	fp, #4
289fc     A7 22 02 FB | 	rdlong	local03, fp
28a00     04 4E 85 F1 | 	sub	fp, #4
28a04     11 22 06 F1 | 	add	local03, #17
28a08     11 03 48 FC | 	wrbyte	#1, local03
28a0c     01 FA 05 F6 | 	mov	result1, #1
28a10     EC 02 90 FD | 	jmp	#LR__4130
28a14                 | LR__4120
28a14     04 4E 05 F1 | 	add	fp, #4
28a18     A7 1E 02 FB | 	rdlong	local01, fp
28a1c     04 4E 85 F1 | 	sub	fp, #4
28a20     10 1E 06 F1 | 	add	local01, #16
28a24     0F 23 C2 FA | 	rdbyte	local03, local01
28a28     80 22 CE F7 | 	test	local03, #128 wz
28a2c     78 00 90 AD |  if_e	jmp	#LR__4121
28a30     04 4E 05 F1 | 	add	fp, #4
28a34     A7 2C 02 FB | 	rdlong	local08, fp
28a38     1C 2C 06 F1 | 	add	local08, #28
28a3c     16 2D 02 FB | 	rdlong	local08, local08
28a40     1C 4E 05 F1 | 	add	fp, #28
28a44     A7 2E 02 FB | 	rdlong	local09, fp
28a48     17 2D 82 F1 | 	sub	local08, local09
28a4c     0C 4E 05 F1 | 	add	fp, #12
28a50     A7 30 02 FB | 	rdlong	local10, fp
28a54     2C 4E 85 F1 | 	sub	fp, #44
28a58     18 33 02 F6 | 	mov	local11, local10
28a5c     19 2D 12 F2 | 	cmp	local08, local11 wc
28a60     44 00 90 3D |  if_ae	jmp	#LR__4121
28a64     34 4E 05 F1 | 	add	fp, #52
28a68     A7 12 02 FB | 	rdlong	arg01, fp
28a6c     30 4E 85 F1 | 	sub	fp, #48
28a70     A7 14 02 FB | 	rdlong	arg02, fp
28a74     0A 33 02 F6 | 	mov	local11, arg02
28a78     1C 32 06 F1 | 	add	local11, #28
28a7c     19 2F 02 FB | 	rdlong	local09, local11
28a80     1C 4E 05 F1 | 	add	fp, #28
28a84     A7 26 02 FB | 	rdlong	local05, fp
28a88     13 2F 82 F1 | 	sub	local09, local05
28a8c     09 2E 66 F0 | 	shl	local09, #9
28a90     17 33 02 F6 | 	mov	local11, local09
28a94     17 13 02 F1 | 	add	arg01, local09
28a98     20 4E 85 F1 | 	sub	fp, #32
28a9c     28 14 06 F1 | 	add	arg02, #40
28aa0     09 16 C6 F9 | 	decod	arg03, #9
28aa4     C4 48 BF FD | 	call	#__system____builtin_memmove
28aa8                 | LR__4121
28aa8     2C 4E 05 F1 | 	add	fp, #44
28aac     A7 22 02 FB | 	rdlong	local03, fp
28ab0     09 22 66 F0 | 	shl	local03, #9
28ab4     04 4E 85 F1 | 	sub	fp, #4
28ab8     A7 22 62 FC | 	wrlong	local03, fp
28abc     28 4E 85 F1 | 	sub	fp, #40
28ac0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
28ac0                 | ' 				}
28ac0                 | ' 
28ac0                 | ' 
28ac0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
28ac0                 | ' 				continue;
28ac0     B4 01 90 FD | 	jmp	#LR__4128
28ac4                 | LR__4122
28ac4     04 4E 05 F1 | 	add	fp, #4
28ac8     A7 22 02 FB | 	rdlong	local03, fp
28acc     1C 22 06 F1 | 	add	local03, #28
28ad0     11 23 02 FB | 	rdlong	local03, local03
28ad4     1C 4E 05 F1 | 	add	fp, #28
28ad8     A7 1E 02 FB | 	rdlong	local01, fp
28adc     20 4E 85 F1 | 	sub	fp, #32
28ae0     0F 23 0A F2 | 	cmp	local03, local01 wz
28ae4     EC 00 90 AD |  if_e	jmp	#LR__4126
28ae8     04 4E 05 F1 | 	add	fp, #4
28aec     A7 1E 02 FB | 	rdlong	local01, fp
28af0     04 4E 85 F1 | 	sub	fp, #4
28af4     10 1E 06 F1 | 	add	local01, #16
28af8     0F 23 C2 FA | 	rdbyte	local03, local01
28afc     80 22 CE F7 | 	test	local03, #128 wz
28b00     7C 00 90 AD |  if_e	jmp	#LR__4124
28b04     18 4E 05 F1 | 	add	fp, #24
28b08     A7 1E 02 FB | 	rdlong	local01, fp
28b0c     01 1E 06 F1 | 	add	local01, #1
28b10     0F 13 C2 FA | 	rdbyte	arg01, local01
28b14     14 4E 85 F1 | 	sub	fp, #20
28b18     A7 22 02 FB | 	rdlong	local03, fp
28b1c     11 15 02 F6 | 	mov	arg02, local03
28b20     28 14 06 F1 | 	add	arg02, #40
28b24     04 4E 85 F1 | 	sub	fp, #4
28b28     1C 22 06 F1 | 	add	local03, #28
28b2c     11 17 02 FB | 	rdlong	arg03, local03
28b30     01 18 06 F6 | 	mov	arg04, #1
28b34     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
28b38     00 FA 0D F2 | 	cmp	result1, #0 wz
28b3c     1C 00 90 AD |  if_e	jmp	#LR__4123
28b40     04 4E 05 F1 | 	add	fp, #4
28b44     A7 22 02 FB | 	rdlong	local03, fp
28b48     04 4E 85 F1 | 	sub	fp, #4
28b4c     11 22 06 F1 | 	add	local03, #17
28b50     11 03 48 FC | 	wrbyte	#1, local03
28b54     01 FA 05 F6 | 	mov	result1, #1
28b58     A4 01 90 FD | 	jmp	#LR__4130
28b5c                 | LR__4123
28b5c     04 4E 05 F1 | 	add	fp, #4
28b60     A7 32 02 FB | 	rdlong	local11, fp
28b64     19 23 02 F6 | 	mov	local03, local11
28b68     04 4E 85 F1 | 	sub	fp, #4
28b6c     10 32 06 F1 | 	add	local11, #16
28b70     19 33 C2 FA | 	rdbyte	local11, local11
28b74     7F 32 06 F5 | 	and	local11, #127
28b78     10 22 06 F1 | 	add	local03, #16
28b7c     11 33 42 FC | 	wrbyte	local11, local03
28b80                 | LR__4124
28b80     18 4E 05 F1 | 	add	fp, #24
28b84     A7 1E 02 FB | 	rdlong	local01, fp
28b88     01 1E 06 F1 | 	add	local01, #1
28b8c     0F 13 C2 FA | 	rdbyte	arg01, local01
28b90     14 4E 85 F1 | 	sub	fp, #20
28b94     A7 14 02 FB | 	rdlong	arg02, fp
28b98     28 14 06 F1 | 	add	arg02, #40
28b9c     1C 4E 05 F1 | 	add	fp, #28
28ba0     A7 16 02 FB | 	rdlong	arg03, fp
28ba4     20 4E 85 F1 | 	sub	fp, #32
28ba8     01 18 06 F6 | 	mov	arg04, #1
28bac     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
28bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
28bb4     1C 00 90 AD |  if_e	jmp	#LR__4125
28bb8     04 4E 05 F1 | 	add	fp, #4
28bbc     A7 22 02 FB | 	rdlong	local03, fp
28bc0     04 4E 85 F1 | 	sub	fp, #4
28bc4     11 22 06 F1 | 	add	local03, #17
28bc8     11 03 48 FC | 	wrbyte	#1, local03
28bcc     01 FA 05 F6 | 	mov	result1, #1
28bd0     2C 01 90 FD | 	jmp	#LR__4130
28bd4                 | LR__4125
28bd4                 | LR__4126
28bd4     04 4E 05 F1 | 	add	fp, #4
28bd8     A7 22 02 FB | 	rdlong	local03, fp
28bdc     1C 4E 05 F1 | 	add	fp, #28
28be0     A7 32 02 FB | 	rdlong	local11, fp
28be4     20 4E 85 F1 | 	sub	fp, #32
28be8     1C 22 06 F1 | 	add	local03, #28
28bec     11 33 62 FC | 	wrlong	local11, local03
28bf0                 | LR__4127
28bf0     04 4E 05 F1 | 	add	fp, #4
28bf4     A7 1E 02 FB | 	rdlong	local01, fp
28bf8     14 1E 06 F1 | 	add	local01, #20
28bfc     0F 33 02 FB | 	rdlong	local11, local01
28c00     FF 33 06 F5 | 	and	local11, #511
28c04     09 22 C6 F9 | 	decod	local03, #9
28c08     19 23 82 F1 | 	sub	local03, local11
28c0c     24 4E 05 F1 | 	add	fp, #36
28c10     A7 22 62 FC | 	wrlong	local03, fp
28c14     1C 4E 85 F1 | 	sub	fp, #28
28c18     A7 32 02 FB | 	rdlong	local11, fp
28c1c     0C 4E 85 F1 | 	sub	fp, #12
28c20     19 23 1A F2 | 	cmp	local03, local11 wcz
28c24     0C 4E 05 11 |  if_a	add	fp, #12
28c28     A7 22 02 1B |  if_a	rdlong	local03, fp
28c2c     1C 4E 05 11 |  if_a	add	fp, #28
28c30     A7 22 62 1C |  if_a	wrlong	local03, fp
28c34     28 4E 85 11 |  if_a	sub	fp, #40
28c38     34 4E 05 F1 | 	add	fp, #52
28c3c     A7 12 02 FB | 	rdlong	arg01, fp
28c40     30 4E 85 F1 | 	sub	fp, #48
28c44     A7 28 02 FB | 	rdlong	local06, fp
28c48     14 15 02 F6 | 	mov	arg02, local06
28c4c     28 14 06 F1 | 	add	arg02, #40
28c50     14 28 06 F1 | 	add	local06, #20
28c54     14 33 02 FB | 	rdlong	local11, local06
28c58     19 2F 02 F6 | 	mov	local09, local11
28c5c     17 31 02 F6 | 	mov	local10, local09
28c60     FF 31 06 F5 | 	and	local10, #511
28c64     18 15 02 F1 | 	add	arg02, local10
28c68     24 4E 05 F1 | 	add	fp, #36
28c6c     A7 16 02 FB | 	rdlong	arg03, fp
28c70     28 4E 85 F1 | 	sub	fp, #40
28c74     F4 46 BF FD | 	call	#__system____builtin_memmove
28c78                 | LR__4128
28c78     0C 4E 05 F1 | 	add	fp, #12
28c7c     A7 22 02 FB | 	rdlong	local03, fp
28c80     1C 4E 05 F1 | 	add	fp, #28
28c84     A7 2C 02 FB | 	rdlong	local08, fp
28c88     16 23 82 F1 | 	sub	local03, local08
28c8c     1C 4E 85 F1 | 	sub	fp, #28
28c90     A7 22 62 FC | 	wrlong	local03, fp
28c94     04 4E 05 F1 | 	add	fp, #4
28c98     A7 1E 02 FB | 	rdlong	local01, fp
28c9c     0F 2B 02 FB | 	rdlong	local07, local01
28ca0     18 4E 05 F1 | 	add	fp, #24
28ca4     A7 2C 02 FB | 	rdlong	local08, fp
28ca8     16 2B 02 F1 | 	add	local07, local08
28cac     0F 2B 62 FC | 	wrlong	local07, local01
28cb0     0C 4E 05 F1 | 	add	fp, #12
28cb4     A7 22 02 FB | 	rdlong	local03, fp
28cb8     0C 4E 85 F1 | 	sub	fp, #12
28cbc     A7 34 02 FB | 	rdlong	local12, fp
28cc0     1A 23 02 F1 | 	add	local03, local12
28cc4     0C 4E 05 F1 | 	add	fp, #12
28cc8     A7 22 62 FC | 	wrlong	local03, fp
28ccc     30 4E 85 F1 | 	sub	fp, #48
28cd0     A7 36 02 FB | 	rdlong	local13, fp
28cd4     1B 23 02 F6 | 	mov	local03, local13
28cd8     14 36 06 F1 | 	add	local13, #20
28cdc     1B 39 02 FB | 	rdlong	local14, local13
28ce0     24 4E 05 F1 | 	add	fp, #36
28ce4     A7 28 02 FB | 	rdlong	local06, fp
28ce8     28 4E 85 F1 | 	sub	fp, #40
28cec     14 39 02 F1 | 	add	local14, local06
28cf0     14 22 06 F1 | 	add	local03, #20
28cf4     11 39 62 FC | 	wrlong	local14, local03
28cf8     84 FA 9F FD | 	jmp	#LR__4112
28cfc                 | LR__4129
28cfc                 | ' 
28cfc                 | ' 
28cfc                 | ' 
28cfc                 | ' 
28cfc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
28cfc                 | ' 
28cfc                 | ' 	}
28cfc                 | ' 
28cfc                 | ' 	return FR_OK ;
28cfc     00 FA 05 F6 | 	mov	result1, #0
28d00                 | LR__4130
28d00     A7 F0 03 F6 | 	mov	ptra, fp
28d04     B2 00 A0 FD | 	call	#popregs_
28d08                 | _fatfs_cc_f_read_ret
28d08     2D 00 64 FD | 	ret
28d0c                 | 
28d0c                 | _fatfs_cc_f_write
28d0c     15 4A 05 F6 | 	mov	COUNT_, #21
28d10     A8 00 A0 FD | 	call	#pushregs_
28d14     34 F0 07 F1 | 	add	ptra, #52
28d18     04 4E 05 F1 | 	add	fp, #4
28d1c     A7 12 62 FC | 	wrlong	arg01, fp
28d20     04 4E 05 F1 | 	add	fp, #4
28d24     A7 14 62 FC | 	wrlong	arg02, fp
28d28     04 4E 05 F1 | 	add	fp, #4
28d2c     A7 16 62 FC | 	wrlong	arg03, fp
28d30     04 4E 05 F1 | 	add	fp, #4
28d34     A7 18 62 FC | 	wrlong	arg04, fp
28d38     08 4E 85 F1 | 	sub	fp, #8
28d3c     A7 FA 01 FB | 	rdlong	result1, fp
28d40     28 4E 05 F1 | 	add	fp, #40
28d44     A7 FA 61 FC | 	wrlong	result1, fp
28d48     20 4E 85 F1 | 	sub	fp, #32
28d4c     A7 FA 01 FB | 	rdlong	result1, fp
28d50     FD 00 68 FC | 	wrlong	#0, result1
28d54     0C 4E 85 F1 | 	sub	fp, #12
28d58     A7 12 02 FB | 	rdlong	arg01, fp
28d5c     14 4E 05 F1 | 	add	fp, #20
28d60     A7 14 02 F6 | 	mov	arg02, fp
28d64     18 4E 85 F1 | 	sub	fp, #24
28d68     88 F0 BF FD | 	call	#_fatfs_cc_validate
28d6c     14 4E 05 F1 | 	add	fp, #20
28d70     A7 FA 61 FC | 	wrlong	result1, fp
28d74     00 FA 4D F2 | 	cmps	result1, #0 wz
28d78     14 4E 85 F1 | 	sub	fp, #20
28d7c     20 00 90 5D |  if_ne	jmp	#LR__4140
28d80     04 4E 05 F1 | 	add	fp, #4
28d84     A7 14 02 FB | 	rdlong	arg02, fp
28d88     11 14 06 F1 | 	add	arg02, #17
28d8c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
28d90     10 4E 05 F1 | 	add	fp, #16
28d94     A7 14 62 FC | 	wrlong	arg02, fp
28d98     14 4E 85 F1 | 	sub	fp, #20
28d9c     10 00 90 AD |  if_e	jmp	#LR__4141
28da0                 | LR__4140
28da0     14 4E 05 F1 | 	add	fp, #20
28da4     A7 FA 01 FB | 	rdlong	result1, fp
28da8     14 4E 85 F1 | 	sub	fp, #20
28dac     44 07 90 FD | 	jmp	#LR__4163
28db0                 | LR__4141
28db0     04 4E 05 F1 | 	add	fp, #4
28db4     A7 14 02 FB | 	rdlong	arg02, fp
28db8     04 4E 85 F1 | 	sub	fp, #4
28dbc     10 14 06 F1 | 	add	arg02, #16
28dc0     0A 15 C2 FA | 	rdbyte	arg02, arg02
28dc4     02 14 CE F7 | 	test	arg02, #2 wz
28dc8     07 FA 05 A6 |  if_e	mov	result1, #7
28dcc     24 07 90 AD |  if_e	jmp	#LR__4163
28dd0     04 4E 05 F1 | 	add	fp, #4
28dd4     A7 14 02 FB | 	rdlong	arg02, fp
28dd8     0A 13 02 F6 | 	mov	arg01, arg02
28ddc     14 12 06 F1 | 	add	arg01, #20
28de0     09 13 02 FB | 	rdlong	arg01, arg01
28de4     08 4E 05 F1 | 	add	fp, #8
28de8     A7 FA 01 FB | 	rdlong	result1, fp
28dec     FD 12 02 F1 | 	add	arg01, result1
28df0     0C 4E 85 F1 | 	sub	fp, #12
28df4     14 14 06 F1 | 	add	arg02, #20
28df8     0A FB 01 FB | 	rdlong	result1, arg02
28dfc     FD 12 12 F2 | 	cmp	arg01, result1 wc
28e00     24 00 90 3D |  if_ae	jmp	#LR__4142
28e04     04 4E 05 F1 | 	add	fp, #4
28e08     A7 14 02 FB | 	rdlong	arg02, fp
28e0c     01 FA 65 F6 | 	neg	result1, #1
28e10     14 14 06 F1 | 	add	arg02, #20
28e14     0A 15 02 FB | 	rdlong	arg02, arg02
28e18     0A FB 81 F1 | 	sub	result1, arg02
28e1c     08 4E 05 F1 | 	add	fp, #8
28e20     A7 FA 61 FC | 	wrlong	result1, fp
28e24     0C 4E 85 F1 | 	sub	fp, #12
28e28                 | LR__4142
28e28                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
28e28                 | ' 	}
28e28                 | ' 
28e28                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
28e28                 | LR__4143
28e28     0C 4E 05 F1 | 	add	fp, #12
28e2c     A7 FA 01 FB | 	rdlong	result1, fp
28e30     0C 4E 85 F1 | 	sub	fp, #12
28e34     01 FA 15 F2 | 	cmp	result1, #1 wc
28e38     90 06 90 CD |  if_b	jmp	#LR__4162
28e3c     04 4E 05 F1 | 	add	fp, #4
28e40     A7 FA 01 FB | 	rdlong	result1, fp
28e44     04 4E 85 F1 | 	sub	fp, #4
28e48     14 FA 05 F1 | 	add	result1, #20
28e4c     FD FA 01 FB | 	rdlong	result1, result1
28e50     FF FB CD F7 | 	test	result1, #511 wz
28e54     D8 04 90 5D |  if_ne	jmp	#LR__4158
28e58     04 4E 05 F1 | 	add	fp, #4
28e5c     A7 FA 01 FB | 	rdlong	result1, fp
28e60     14 FA 05 F1 | 	add	result1, #20
28e64     FD FA 01 FB | 	rdlong	result1, result1
28e68     09 FA 45 F0 | 	shr	result1, #9
28e6c     14 4E 05 F1 | 	add	fp, #20
28e70     A7 14 02 FB | 	rdlong	arg02, fp
28e74     0A 14 06 F1 | 	add	arg02, #10
28e78     0A 19 E2 FA | 	rdword	arg04, arg02
28e7c     0C 15 32 F9 | 	getword	arg02, arg04, #0
28e80     01 14 86 F1 | 	sub	arg02, #1
28e84     0A FB 09 F5 | 	and	result1, arg02 wz
28e88     14 4E 05 F1 | 	add	fp, #20
28e8c     A7 FA 61 FC | 	wrlong	result1, fp
28e90     2C 4E 85 F1 | 	sub	fp, #44
28e94     44 01 90 5D |  if_ne	jmp	#LR__4149
28e98     04 4E 05 F1 | 	add	fp, #4
28e9c     A7 FA 01 FB | 	rdlong	result1, fp
28ea0     04 4E 85 F1 | 	sub	fp, #4
28ea4     14 FA 05 F1 | 	add	result1, #20
28ea8     FD 14 0A FB | 	rdlong	arg02, result1 wz
28eac     44 00 90 5D |  if_ne	jmp	#LR__4144
28eb0     04 4E 05 F1 | 	add	fp, #4
28eb4     A7 14 02 FB | 	rdlong	arg02, fp
28eb8     08 14 06 F1 | 	add	arg02, #8
28ebc     0A 15 0A FB | 	rdlong	arg02, arg02 wz
28ec0     18 4E 05 F1 | 	add	fp, #24
28ec4     A7 14 62 FC | 	wrlong	arg02, fp
28ec8     1C 4E 85 F1 | 	sub	fp, #28
28ecc     4C 00 90 5D |  if_ne	jmp	#LR__4145
28ed0     04 4E 05 F1 | 	add	fp, #4
28ed4     A7 12 02 FB | 	rdlong	arg01, fp
28ed8     04 4E 85 F1 | 	sub	fp, #4
28edc     00 14 06 F6 | 	mov	arg02, #0
28ee0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
28ee4     1C 4E 05 F1 | 	add	fp, #28
28ee8     A7 FA 61 FC | 	wrlong	result1, fp
28eec     1C 4E 85 F1 | 	sub	fp, #28
28ef0     28 00 90 FD | 	jmp	#LR__4145
28ef4                 | LR__4144
28ef4     04 4E 05 F1 | 	add	fp, #4
28ef8     A7 18 02 FB | 	rdlong	arg04, fp
28efc     0C 13 02 F6 | 	mov	arg01, arg04
28f00     04 4E 85 F1 | 	sub	fp, #4
28f04     18 18 06 F1 | 	add	arg04, #24
28f08     0C 15 02 FB | 	rdlong	arg02, arg04
28f0c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
28f10     1C 4E 05 F1 | 	add	fp, #28
28f14     A7 FA 61 FC | 	wrlong	result1, fp
28f18     1C 4E 85 F1 | 	sub	fp, #28
28f1c                 | LR__4145
28f1c     1C 4E 05 F1 | 	add	fp, #28
28f20     A7 FA 09 FB | 	rdlong	result1, fp wz
28f24     1C 4E 85 F1 | 	sub	fp, #28
28f28     A0 05 90 AD |  if_e	jmp	#LR__4162
28f2c     1C 4E 05 F1 | 	add	fp, #28
28f30     A7 FA 01 FB | 	rdlong	result1, fp
28f34     1C 4E 85 F1 | 	sub	fp, #28
28f38     01 FA 0D F2 | 	cmp	result1, #1 wz
28f3c     1C 00 90 5D |  if_ne	jmp	#LR__4146
28f40     04 4E 05 F1 | 	add	fp, #4
28f44     A7 FA 01 FB | 	rdlong	result1, fp
28f48     04 4E 85 F1 | 	sub	fp, #4
28f4c     11 FA 05 F1 | 	add	result1, #17
28f50     FD 04 48 FC | 	wrbyte	#2, result1
28f54     02 FA 05 F6 | 	mov	result1, #2
28f58     98 05 90 FD | 	jmp	#LR__4163
28f5c                 | LR__4146
28f5c     1C 4E 05 F1 | 	add	fp, #28
28f60     A7 FA 01 FB | 	rdlong	result1, fp
28f64     1C 4E 85 F1 | 	sub	fp, #28
28f68     FF FF 7F FF 
28f6c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28f70     1C 00 90 5D |  if_ne	jmp	#LR__4147
28f74     04 4E 05 F1 | 	add	fp, #4
28f78     A7 FA 01 FB | 	rdlong	result1, fp
28f7c     04 4E 85 F1 | 	sub	fp, #4
28f80     11 FA 05 F1 | 	add	result1, #17
28f84     FD 02 48 FC | 	wrbyte	#1, result1
28f88     01 FA 05 F6 | 	mov	result1, #1
28f8c     64 05 90 FD | 	jmp	#LR__4163
28f90                 | LR__4147
28f90     04 4E 05 F1 | 	add	fp, #4
28f94     A7 FA 01 FB | 	rdlong	result1, fp
28f98     18 4E 05 F1 | 	add	fp, #24
28f9c     A7 18 02 FB | 	rdlong	arg04, fp
28fa0     18 FA 05 F1 | 	add	result1, #24
28fa4     FD 18 62 FC | 	wrlong	arg04, result1
28fa8     18 4E 85 F1 | 	sub	fp, #24
28fac     A7 FA 01 FB | 	rdlong	result1, fp
28fb0     04 4E 85 F1 | 	sub	fp, #4
28fb4     08 FA 05 F1 | 	add	result1, #8
28fb8     FD FA 09 FB | 	rdlong	result1, result1 wz
28fbc     1C 00 90 5D |  if_ne	jmp	#LR__4148
28fc0     04 4E 05 F1 | 	add	fp, #4
28fc4     A7 18 02 FB | 	rdlong	arg04, fp
28fc8     18 4E 05 F1 | 	add	fp, #24
28fcc     A7 FA 01 FB | 	rdlong	result1, fp
28fd0     1C 4E 85 F1 | 	sub	fp, #28
28fd4     08 18 06 F1 | 	add	arg04, #8
28fd8     0C FB 61 FC | 	wrlong	result1, arg04
28fdc                 | LR__4148
28fdc                 | LR__4149
28fdc     04 4E 05 F1 | 	add	fp, #4
28fe0     A7 18 02 FB | 	rdlong	arg04, fp
28fe4     04 4E 85 F1 | 	sub	fp, #4
28fe8     10 18 06 F1 | 	add	arg04, #16
28fec     0C 19 C2 FA | 	rdbyte	arg04, arg04
28ff0     80 18 CE F7 | 	test	arg04, #128 wz
28ff4     7C 00 90 AD |  if_e	jmp	#LR__4151
28ff8     18 4E 05 F1 | 	add	fp, #24
28ffc     A7 18 02 FB | 	rdlong	arg04, fp
29000     01 18 06 F1 | 	add	arg04, #1
29004     0C 13 C2 FA | 	rdbyte	arg01, arg04
29008     14 4E 85 F1 | 	sub	fp, #20
2900c     A7 18 02 FB | 	rdlong	arg04, fp
29010     0C 15 02 F6 | 	mov	arg02, arg04
29014     28 14 06 F1 | 	add	arg02, #40
29018     04 4E 85 F1 | 	sub	fp, #4
2901c     1C 18 06 F1 | 	add	arg04, #28
29020     0C 17 02 FB | 	rdlong	arg03, arg04
29024     01 18 06 F6 | 	mov	arg04, #1
29028     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2902c     00 FA 0D F2 | 	cmp	result1, #0 wz
29030     1C 00 90 AD |  if_e	jmp	#LR__4150
29034     04 4E 05 F1 | 	add	fp, #4
29038     A7 FA 01 FB | 	rdlong	result1, fp
2903c     04 4E 85 F1 | 	sub	fp, #4
29040     11 FA 05 F1 | 	add	result1, #17
29044     FD 02 48 FC | 	wrbyte	#1, result1
29048     01 FA 05 F6 | 	mov	result1, #1
2904c     A4 04 90 FD | 	jmp	#LR__4163
29050                 | LR__4150
29050     04 4E 05 F1 | 	add	fp, #4
29054     A7 18 02 FB | 	rdlong	arg04, fp
29058     0C FB 01 F6 | 	mov	result1, arg04
2905c     04 4E 85 F1 | 	sub	fp, #4
29060     10 18 06 F1 | 	add	arg04, #16
29064     0C 19 C2 FA | 	rdbyte	arg04, arg04
29068     7F 18 06 F5 | 	and	arg04, #127
2906c     10 FA 05 F1 | 	add	result1, #16
29070     FD 18 42 FC | 	wrbyte	arg04, result1
29074                 | LR__4151
29074     18 4E 05 F1 | 	add	fp, #24
29078     A7 12 02 FB | 	rdlong	arg01, fp
2907c     14 4E 85 F1 | 	sub	fp, #20
29080     A7 14 02 FB | 	rdlong	arg02, fp
29084     04 4E 85 F1 | 	sub	fp, #4
29088     18 14 06 F1 | 	add	arg02, #24
2908c     0A 15 02 FB | 	rdlong	arg02, arg02
29090     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
29094     20 4E 05 F1 | 	add	fp, #32
29098     A7 FA 61 FC | 	wrlong	result1, fp
2909c     20 4E 85 F1 | 	sub	fp, #32
290a0     00 FA 0D F2 | 	cmp	result1, #0 wz
290a4     1C 00 90 5D |  if_ne	jmp	#LR__4152
290a8     04 4E 05 F1 | 	add	fp, #4
290ac     A7 FA 01 FB | 	rdlong	result1, fp
290b0     04 4E 85 F1 | 	sub	fp, #4
290b4     11 FA 05 F1 | 	add	result1, #17
290b8     FD 04 48 FC | 	wrbyte	#2, result1
290bc     02 FA 05 F6 | 	mov	result1, #2
290c0     30 04 90 FD | 	jmp	#LR__4163
290c4                 | LR__4152
290c4     20 4E 05 F1 | 	add	fp, #32
290c8     A7 FA 01 FB | 	rdlong	result1, fp
290cc     0C 4E 05 F1 | 	add	fp, #12
290d0     A7 1E 02 FB | 	rdlong	local01, fp
290d4     0F FB 01 F1 | 	add	result1, local01
290d8     0C 4E 85 F1 | 	sub	fp, #12
290dc     A7 FA 61 FC | 	wrlong	result1, fp
290e0     14 4E 85 F1 | 	sub	fp, #20
290e4     A7 FA 01 FB | 	rdlong	result1, fp
290e8     09 FA 45 F0 | 	shr	result1, #9
290ec     1C 4E 05 F1 | 	add	fp, #28
290f0     A7 FA 61 FC | 	wrlong	result1, fp
290f4     28 4E 85 F1 | 	sub	fp, #40
290f8     01 FA 15 F2 | 	cmp	result1, #1 wc
290fc     60 01 90 CD |  if_b	jmp	#LR__4156
29100     2C 4E 05 F1 | 	add	fp, #44
29104     A7 FA 01 FB | 	rdlong	result1, fp
29108     04 4E 85 F1 | 	sub	fp, #4
2910c     A7 18 02 FB | 	rdlong	arg04, fp
29110     0C FB 01 F1 | 	add	result1, arg04
29114     10 4E 85 F1 | 	sub	fp, #16
29118     A7 18 02 FB | 	rdlong	arg04, fp
2911c     18 4E 85 F1 | 	sub	fp, #24
29120     0A 18 06 F1 | 	add	arg04, #10
29124     0C 19 E2 FA | 	rdword	arg04, arg04
29128     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2912c     28 00 90 ED |  if_be	jmp	#LR__4153
29130     18 4E 05 F1 | 	add	fp, #24
29134     A7 FA 01 FB | 	rdlong	result1, fp
29138     0A FA 05 F1 | 	add	result1, #10
2913c     FD FA E1 FA | 	rdword	result1, result1
29140     14 4E 05 F1 | 	add	fp, #20
29144     A7 18 02 FB | 	rdlong	arg04, fp
29148     0C FB 81 F1 | 	sub	result1, arg04
2914c     04 4E 85 F1 | 	sub	fp, #4
29150     A7 FA 61 FC | 	wrlong	result1, fp
29154     28 4E 85 F1 | 	sub	fp, #40
29158                 | LR__4153
29158     18 4E 05 F1 | 	add	fp, #24
2915c     A7 18 02 FB | 	rdlong	arg04, fp
29160     01 18 06 F1 | 	add	arg04, #1
29164     0C 13 C2 FA | 	rdbyte	arg01, arg04
29168     18 4E 05 F1 | 	add	fp, #24
2916c     A7 14 02 FB | 	rdlong	arg02, fp
29170     10 4E 85 F1 | 	sub	fp, #16
29174     A7 16 02 FB | 	rdlong	arg03, fp
29178     08 4E 05 F1 | 	add	fp, #8
2917c     A7 18 02 FB | 	rdlong	arg04, fp
29180     28 4E 85 F1 | 	sub	fp, #40
29184     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
29188     00 FA 0D F2 | 	cmp	result1, #0 wz
2918c     1C 00 90 AD |  if_e	jmp	#LR__4154
29190     04 4E 05 F1 | 	add	fp, #4
29194     A7 1E 02 FB | 	rdlong	local01, fp
29198     04 4E 85 F1 | 	sub	fp, #4
2919c     11 1E 06 F1 | 	add	local01, #17
291a0     0F 03 48 FC | 	wrbyte	#1, local01
291a4     01 FA 05 F6 | 	mov	result1, #1
291a8     48 03 90 FD | 	jmp	#LR__4163
291ac                 | LR__4154
291ac     04 4E 05 F1 | 	add	fp, #4
291b0     A7 FA 01 FB | 	rdlong	result1, fp
291b4     1C FA 05 F1 | 	add	result1, #28
291b8     FD FA 01 FB | 	rdlong	result1, result1
291bc     1C 4E 05 F1 | 	add	fp, #28
291c0     A7 20 02 FB | 	rdlong	local02, fp
291c4     10 FB 81 F1 | 	sub	result1, local02
291c8     08 4E 05 F1 | 	add	fp, #8
291cc     A7 18 02 FB | 	rdlong	arg04, fp
291d0     28 4E 85 F1 | 	sub	fp, #40
291d4     0C FB 11 F2 | 	cmp	result1, arg04 wc
291d8     68 00 90 3D |  if_ae	jmp	#LR__4155
291dc     04 4E 05 F1 | 	add	fp, #4
291e0     A7 12 02 FB | 	rdlong	arg01, fp
291e4     28 12 06 F1 | 	add	arg01, #40
291e8     2C 4E 05 F1 | 	add	fp, #44
291ec     A7 14 02 FB | 	rdlong	arg02, fp
291f0     2C 4E 85 F1 | 	sub	fp, #44
291f4     A7 FA 01 FB | 	rdlong	result1, fp
291f8     1C FA 05 F1 | 	add	result1, #28
291fc     FD 22 02 FB | 	rdlong	local03, result1
29200     1C 4E 05 F1 | 	add	fp, #28
29204     A7 18 02 FB | 	rdlong	arg04, fp
29208     20 4E 85 F1 | 	sub	fp, #32
2920c     0C 23 82 F1 | 	sub	local03, arg04
29210     09 22 66 F0 | 	shl	local03, #9
29214     11 15 02 F1 | 	add	arg02, local03
29218     09 16 C6 F9 | 	decod	arg03, #9
2921c     4C 41 BF FD | 	call	#__system____builtin_memmove
29220     04 4E 05 F1 | 	add	fp, #4
29224     A7 18 02 FB | 	rdlong	arg04, fp
29228     0C FB 01 F6 | 	mov	result1, arg04
2922c     04 4E 85 F1 | 	sub	fp, #4
29230     10 18 06 F1 | 	add	arg04, #16
29234     0C 19 C2 FA | 	rdbyte	arg04, arg04
29238     7F 18 06 F5 | 	and	arg04, #127
2923c     10 FA 05 F1 | 	add	result1, #16
29240     FD 18 42 FC | 	wrbyte	arg04, result1
29244                 | LR__4155
29244     28 4E 05 F1 | 	add	fp, #40
29248     A7 FA 01 FB | 	rdlong	result1, fp
2924c     09 FA 65 F0 | 	shl	result1, #9
29250     04 4E 85 F1 | 	sub	fp, #4
29254     A7 FA 61 FC | 	wrlong	result1, fp
29258     24 4E 85 F1 | 	sub	fp, #36
2925c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2925c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2925c                 | ' 				}
2925c                 | ' 
2925c                 | ' 
2925c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2925c                 | ' 				continue;
2925c     74 01 90 FD | 	jmp	#LR__4159
29260                 | LR__4156
29260     04 4E 05 F1 | 	add	fp, #4
29264     A7 20 02 FB | 	rdlong	local02, fp
29268     1C 20 06 F1 | 	add	local02, #28
2926c     10 FB 01 FB | 	rdlong	result1, local02
29270     1C 4E 05 F1 | 	add	fp, #28
29274     A7 20 02 FB | 	rdlong	local02, fp
29278     20 4E 85 F1 | 	sub	fp, #32
2927c     10 FB 09 F2 | 	cmp	result1, local02 wz
29280     90 00 90 AD |  if_e	jmp	#LR__4157
29284     04 4E 05 F1 | 	add	fp, #4
29288     A7 FA 01 FB | 	rdlong	result1, fp
2928c     FD 22 02 F6 | 	mov	local03, result1
29290     04 4E 85 F1 | 	sub	fp, #4
29294     14 22 06 F1 | 	add	local03, #20
29298     11 23 02 FB | 	rdlong	local03, local03
2929c     0C FA 05 F1 | 	add	result1, #12
292a0     FD 24 02 FB | 	rdlong	local04, result1
292a4     12 27 02 F6 | 	mov	local05, local04
292a8     13 23 12 F2 | 	cmp	local03, local05 wc
292ac     64 00 90 3D |  if_ae	jmp	#LR__4157
292b0     18 4E 05 F1 | 	add	fp, #24
292b4     A7 18 02 FB | 	rdlong	arg04, fp
292b8     01 18 06 F1 | 	add	arg04, #1
292bc     0C 13 C2 FA | 	rdbyte	arg01, arg04
292c0     14 4E 85 F1 | 	sub	fp, #20
292c4     A7 28 02 FB | 	rdlong	local06, fp
292c8     28 28 06 F1 | 	add	local06, #40
292cc     14 2B 02 F6 | 	mov	local07, local06
292d0     1C 4E 05 F1 | 	add	fp, #28
292d4     A7 2C 02 FB | 	rdlong	local08, fp
292d8     20 4E 85 F1 | 	sub	fp, #32
292dc     01 2E 06 F6 | 	mov	local09, #1
292e0     15 15 02 F6 | 	mov	arg02, local07
292e4     16 17 02 F6 | 	mov	arg03, local08
292e8     01 18 06 F6 | 	mov	arg04, #1
292ec     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
292f0     FD 30 0A F6 | 	mov	local10, result1 wz
292f4     1C 00 90 AD |  if_e	jmp	#LR__4157
292f8     04 4E 05 F1 | 	add	fp, #4
292fc     A7 30 02 FB | 	rdlong	local10, fp
29300     04 4E 85 F1 | 	sub	fp, #4
29304     11 30 06 F1 | 	add	local10, #17
29308     18 03 48 FC | 	wrbyte	#1, local10
2930c                 | ' 				fp->fptr < fp->obj.objsize &&
2930c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2930c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2930c     01 FA 05 F6 | 	mov	result1, #1
29310     E0 01 90 FD | 	jmp	#LR__4163
29314                 | LR__4157
29314     04 4E 05 F1 | 	add	fp, #4
29318     A7 18 02 FB | 	rdlong	arg04, fp
2931c     1C 4E 05 F1 | 	add	fp, #28
29320     A7 FA 01 FB | 	rdlong	result1, fp
29324     20 4E 85 F1 | 	sub	fp, #32
29328     1C 18 06 F1 | 	add	arg04, #28
2932c     0C FB 61 FC | 	wrlong	result1, arg04
29330                 | LR__4158
29330     04 4E 05 F1 | 	add	fp, #4
29334     A7 FA 01 FB | 	rdlong	result1, fp
29338     14 FA 05 F1 | 	add	result1, #20
2933c     FD FA 01 FB | 	rdlong	result1, result1
29340     FF FB 05 F5 | 	and	result1, #511
29344     09 32 C6 F9 | 	decod	local11, #9
29348     FD 32 82 F1 | 	sub	local11, result1
2934c     20 4E 05 F1 | 	add	fp, #32
29350     A7 32 62 FC | 	wrlong	local11, fp
29354     18 4E 85 F1 | 	sub	fp, #24
29358     A7 FA 01 FB | 	rdlong	result1, fp
2935c     0C 4E 85 F1 | 	sub	fp, #12
29360     FD 32 1A F2 | 	cmp	local11, result1 wcz
29364     0C 4E 05 11 |  if_a	add	fp, #12
29368     A7 32 02 1B |  if_a	rdlong	local11, fp
2936c     18 4E 05 11 |  if_a	add	fp, #24
29370     A7 32 62 1C |  if_a	wrlong	local11, fp
29374     24 4E 85 11 |  if_a	sub	fp, #36
29378     04 4E 05 F1 | 	add	fp, #4
2937c     A7 32 02 FB | 	rdlong	local11, fp
29380     19 13 02 F6 | 	mov	arg01, local11
29384     28 12 06 F1 | 	add	arg01, #40
29388     14 32 06 F1 | 	add	local11, #20
2938c     19 33 02 FB | 	rdlong	local11, local11
29390     FF 33 06 F5 | 	and	local11, #511
29394     19 13 02 F1 | 	add	arg01, local11
29398     2C 4E 05 F1 | 	add	fp, #44
2939c     A7 14 02 FB | 	rdlong	arg02, fp
293a0     0C 4E 85 F1 | 	sub	fp, #12
293a4     A7 16 02 FB | 	rdlong	arg03, fp
293a8     24 4E 85 F1 | 	sub	fp, #36
293ac     BC 3F BF FD | 	call	#__system____builtin_memmove
293b0     04 4E 05 F1 | 	add	fp, #4
293b4     A7 FA 01 FB | 	rdlong	result1, fp
293b8     FD 32 02 F6 | 	mov	local11, result1
293bc     04 4E 85 F1 | 	sub	fp, #4
293c0     10 FA 05 F1 | 	add	result1, #16
293c4     FD FA C1 FA | 	rdbyte	result1, result1
293c8     80 FA 45 F5 | 	or	result1, #128
293cc     10 32 06 F1 | 	add	local11, #16
293d0     19 FB 41 FC | 	wrbyte	result1, local11
293d4                 | LR__4159
293d4     0C 4E 05 F1 | 	add	fp, #12
293d8     A7 32 02 FB | 	rdlong	local11, fp
293dc     18 4E 05 F1 | 	add	fp, #24
293e0     A7 FA 01 FB | 	rdlong	result1, fp
293e4     FD 32 82 F1 | 	sub	local11, result1
293e8     18 4E 85 F1 | 	sub	fp, #24
293ec     A7 32 62 FC | 	wrlong	local11, fp
293f0     04 4E 05 F1 | 	add	fp, #4
293f4     A7 34 02 FB | 	rdlong	local12, fp
293f8     1A 33 02 FB | 	rdlong	local11, local12
293fc     14 4E 05 F1 | 	add	fp, #20
29400     A7 36 02 FB | 	rdlong	local13, fp
29404     1B 33 02 F1 | 	add	local11, local13
29408     1A 33 62 FC | 	wrlong	local11, local12
2940c     0C 4E 05 F1 | 	add	fp, #12
29410     A7 32 02 FB | 	rdlong	local11, fp
29414     0C 4E 85 F1 | 	sub	fp, #12
29418     A7 38 02 FB | 	rdlong	local14, fp
2941c     1C 33 02 F1 | 	add	local11, local14
29420     0C 4E 05 F1 | 	add	fp, #12
29424     A7 32 62 FC | 	wrlong	local11, fp
29428     2C 4E 85 F1 | 	sub	fp, #44
2942c     A7 3A 02 FB | 	rdlong	local15, fp
29430     1D 33 02 F6 | 	mov	local11, local15
29434     14 3A 06 F1 | 	add	local15, #20
29438     1D 3B 02 FB | 	rdlong	local15, local15
2943c     20 4E 05 F1 | 	add	fp, #32
29440     A7 3C 02 FB | 	rdlong	local16, fp
29444     1E 3B 02 F1 | 	add	local15, local16
29448     14 32 06 F1 | 	add	local11, #20
2944c     19 3B 62 FC | 	wrlong	local15, local11
29450     20 4E 85 F1 | 	sub	fp, #32
29454     A7 3E 02 FB | 	rdlong	local17, fp
29458     1F 33 02 F6 | 	mov	local11, local17
2945c     1F 41 02 F6 | 	mov	local18, local17
29460     04 4E 85 F1 | 	sub	fp, #4
29464     14 3E 06 F1 | 	add	local17, #20
29468     1F 43 02 FB | 	rdlong	local19, local17
2946c     0C 40 06 F1 | 	add	local18, #12
29470     20 45 02 FB | 	rdlong	local20, local18
29474     22 43 1A F2 | 	cmp	local19, local20 wcz
29478     24 00 90 ED |  if_be	jmp	#LR__4160
2947c     04 4E 05 F1 | 	add	fp, #4
29480     A7 26 02 FB | 	rdlong	local05, fp
29484     04 4E 85 F1 | 	sub	fp, #4
29488     13 23 02 F6 | 	mov	local03, local05
2948c     14 22 06 F1 | 	add	local03, #20
29490     11 25 02 FB | 	rdlong	local04, local03
29494     14 22 86 F1 | 	sub	local03, #20
29498     12 47 02 F6 | 	mov	local21, local04
2949c     20 00 90 FD | 	jmp	#LR__4161
294a0                 | LR__4160
294a0     04 4E 05 F1 | 	add	fp, #4
294a4     A7 2A 02 FB | 	rdlong	local07, fp
294a8     04 4E 85 F1 | 	sub	fp, #4
294ac     15 31 02 F6 | 	mov	local10, local07
294b0     0C 30 06 F1 | 	add	local10, #12
294b4     18 2D 02 FB | 	rdlong	local08, local10
294b8     0C 30 86 F1 | 	sub	local10, #12
294bc     16 47 02 F6 | 	mov	local21, local08
294c0                 | LR__4161
294c0     0C 32 06 F1 | 	add	local11, #12
294c4     19 47 62 FC | 	wrlong	local21, local11
294c8     5C F9 9F FD | 	jmp	#LR__4143
294cc                 | LR__4162
294cc     04 4E 05 F1 | 	add	fp, #4
294d0     A7 34 02 FB | 	rdlong	local12, fp
294d4     1A 1F 02 F6 | 	mov	local01, local12
294d8     04 4E 85 F1 | 	sub	fp, #4
294dc     10 34 06 F1 | 	add	local12, #16
294e0     1A 33 C2 FA | 	rdbyte	local11, local12
294e4     40 32 46 F5 | 	or	local11, #64
294e8     10 1E 06 F1 | 	add	local01, #16
294ec     0F 33 42 FC | 	wrbyte	local11, local01
294f0                 | ' 
294f0                 | ' 
294f0                 | ' 
294f0                 | ' 
294f0                 | ' 
294f0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
294f0                 | ' 		fp->flag |=  0x80 ;
294f0                 | ' 
294f0                 | ' 	}
294f0                 | ' 
294f0                 | ' 	fp->flag |=  0x40 ;
294f0                 | ' 
294f0                 | ' 	return FR_OK ;
294f0     00 FA 05 F6 | 	mov	result1, #0
294f4                 | LR__4163
294f4     A7 F0 03 F6 | 	mov	ptra, fp
294f8     B2 00 A0 FD | 	call	#popregs_
294fc                 | _fatfs_cc_f_write_ret
294fc     2D 00 64 FD | 	ret
29500                 | 
29500                 | _fatfs_cc_f_sync
29500     00 4A 05 F6 | 	mov	COUNT_, #0
29504     A8 00 A0 FD | 	call	#pushregs_
29508     18 F0 07 F1 | 	add	ptra, #24
2950c     04 4E 05 F1 | 	add	fp, #4
29510     A7 12 62 FC | 	wrlong	arg01, fp
29514     08 4E 05 F1 | 	add	fp, #8
29518     A7 14 02 F6 | 	mov	arg02, fp
2951c     0C 4E 85 F1 | 	sub	fp, #12
29520     D0 E8 BF FD | 	call	#_fatfs_cc_validate
29524     08 4E 05 F1 | 	add	fp, #8
29528     A7 FA 61 FC | 	wrlong	result1, fp
2952c     08 4E 85 F1 | 	sub	fp, #8
29530     00 FA 0D F2 | 	cmp	result1, #0 wz
29534     C0 01 90 5D |  if_ne	jmp	#LR__4173
29538     04 4E 05 F1 | 	add	fp, #4
2953c     A7 18 02 FB | 	rdlong	arg04, fp
29540     04 4E 85 F1 | 	sub	fp, #4
29544     10 18 06 F1 | 	add	arg04, #16
29548     0C 19 C2 FA | 	rdbyte	arg04, arg04
2954c     40 18 CE F7 | 	test	arg04, #64 wz
29550     A4 01 90 AD |  if_e	jmp	#LR__4172
29554     04 4E 05 F1 | 	add	fp, #4
29558     A7 18 02 FB | 	rdlong	arg04, fp
2955c     04 4E 85 F1 | 	sub	fp, #4
29560     10 18 06 F1 | 	add	arg04, #16
29564     0C 19 C2 FA | 	rdbyte	arg04, arg04
29568     80 18 CE F7 | 	test	arg04, #128 wz
2956c     64 00 90 AD |  if_e	jmp	#LR__4170
29570     0C 4E 05 F1 | 	add	fp, #12
29574     A7 18 02 FB | 	rdlong	arg04, fp
29578     01 18 06 F1 | 	add	arg04, #1
2957c     0C 13 C2 FA | 	rdbyte	arg01, arg04
29580     08 4E 85 F1 | 	sub	fp, #8
29584     A7 18 02 FB | 	rdlong	arg04, fp
29588     0C 15 02 F6 | 	mov	arg02, arg04
2958c     28 14 06 F1 | 	add	arg02, #40
29590     04 4E 85 F1 | 	sub	fp, #4
29594     1C 18 06 F1 | 	add	arg04, #28
29598     0C 17 02 FB | 	rdlong	arg03, arg04
2959c     01 18 06 F6 | 	mov	arg04, #1
295a0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
295a4     00 FA 0D F2 | 	cmp	result1, #0 wz
295a8     01 FA 05 56 |  if_ne	mov	result1, #1
295ac     54 01 90 5D |  if_ne	jmp	#LR__4174
295b0     04 4E 05 F1 | 	add	fp, #4
295b4     A7 18 02 FB | 	rdlong	arg04, fp
295b8     0C 17 02 F6 | 	mov	arg03, arg04
295bc     04 4E 85 F1 | 	sub	fp, #4
295c0     10 18 06 F1 | 	add	arg04, #16
295c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
295c8     7F 18 06 F5 | 	and	arg04, #127
295cc     10 16 06 F1 | 	add	arg03, #16
295d0     0B 19 42 FC | 	wrbyte	arg04, arg03
295d4                 | LR__4170
295d4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
295d8     10 4E 05 F1 | 	add	fp, #16
295dc     A7 FA 61 FC | 	wrlong	result1, fp
295e0     04 4E 85 F1 | 	sub	fp, #4
295e4     A7 12 02 FB | 	rdlong	arg01, fp
295e8     08 4E 85 F1 | 	sub	fp, #8
295ec     A7 18 02 FB | 	rdlong	arg04, fp
295f0     04 4E 85 F1 | 	sub	fp, #4
295f4     20 18 06 F1 | 	add	arg04, #32
295f8     0C 15 02 FB | 	rdlong	arg02, arg04
295fc     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
29600     08 4E 05 F1 | 	add	fp, #8
29604     A7 FA 61 FC | 	wrlong	result1, fp
29608     08 4E 85 F1 | 	sub	fp, #8
2960c     00 FA 0D F2 | 	cmp	result1, #0 wz
29610     E4 00 90 5D |  if_ne	jmp	#LR__4171
29614     04 4E 05 F1 | 	add	fp, #4
29618     A7 18 02 FB | 	rdlong	arg04, fp
2961c     24 18 06 F1 | 	add	arg04, #36
29620     0C 19 02 FB | 	rdlong	arg04, arg04
29624     10 4E 05 F1 | 	add	fp, #16
29628     A7 18 62 FC | 	wrlong	arg04, fp
2962c     0C 17 02 F6 | 	mov	arg03, arg04
29630     0B 16 06 F1 | 	add	arg03, #11
29634     0B 17 C2 FA | 	rdbyte	arg03, arg03
29638     20 16 46 F5 | 	or	arg03, #32
2963c     0B 18 06 F1 | 	add	arg04, #11
29640     0C 17 42 FC | 	wrbyte	arg03, arg04
29644     10 4E 85 F1 | 	sub	fp, #16
29648     A7 18 02 FB | 	rdlong	arg04, fp
2964c     0C 13 02 FB | 	rdlong	arg01, arg04
29650     10 4E 05 F1 | 	add	fp, #16
29654     A7 14 02 FB | 	rdlong	arg02, fp
29658     14 4E 85 F1 | 	sub	fp, #20
2965c     08 18 06 F1 | 	add	arg04, #8
29660     0C 17 02 FB | 	rdlong	arg03, arg04
29664     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
29668     14 4E 05 F1 | 	add	fp, #20
2966c     A7 12 02 FB | 	rdlong	arg01, fp
29670     1C 12 06 F1 | 	add	arg01, #28
29674     10 4E 85 F1 | 	sub	fp, #16
29678     A7 18 02 FB | 	rdlong	arg04, fp
2967c     0C 18 06 F1 | 	add	arg04, #12
29680     0C 15 02 FB | 	rdlong	arg02, arg04
29684     09 15 62 FC | 	wrlong	arg02, arg01
29688     10 4E 05 F1 | 	add	fp, #16
2968c     A7 12 02 FB | 	rdlong	arg01, fp
29690     16 12 06 F1 | 	add	arg01, #22
29694     04 4E 85 F1 | 	sub	fp, #4
29698     A7 14 02 FB | 	rdlong	arg02, fp
2969c     09 15 62 FC | 	wrlong	arg02, arg01
296a0     04 4E 05 F1 | 	add	fp, #4
296a4     A7 12 02 FB | 	rdlong	arg01, fp
296a8     12 12 06 F1 | 	add	arg01, #18
296ac     09 01 58 FC | 	wrword	#0, arg01
296b0     08 4E 85 F1 | 	sub	fp, #8
296b4     A7 18 02 FB | 	rdlong	arg04, fp
296b8     03 18 06 F1 | 	add	arg04, #3
296bc     0C 03 48 FC | 	wrbyte	#1, arg04
296c0     A7 12 02 FB | 	rdlong	arg01, fp
296c4     0C 4E 85 F1 | 	sub	fp, #12
296c8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
296cc     08 4E 05 F1 | 	add	fp, #8
296d0     A7 FA 61 FC | 	wrlong	result1, fp
296d4     04 4E 85 F1 | 	sub	fp, #4
296d8     A7 18 02 FB | 	rdlong	arg04, fp
296dc     0C 17 02 F6 | 	mov	arg03, arg04
296e0     04 4E 85 F1 | 	sub	fp, #4
296e4     10 18 06 F1 | 	add	arg04, #16
296e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
296ec     BF 18 06 F5 | 	and	arg04, #191
296f0     10 16 06 F1 | 	add	arg03, #16
296f4     0B 19 42 FC | 	wrbyte	arg04, arg03
296f8                 | LR__4171
296f8                 | LR__4172
296f8                 | LR__4173
296f8                 | ' 					dir = fp->dir_ptr;
296f8                 | ' 					dir[ 11 ] |=  0x20 ;
296f8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
296f8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
296f8                 | ' 					st_dword(dir +  22 , tm);
296f8                 | ' 					st_word(dir +  18 , 0);
296f8                 | ' 					fs->wflag = 1;
296f8                 | ' 					res = sync_fs(fs);
296f8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
296f8                 | ' 				}
296f8                 | ' 			}
296f8                 | ' 		}
296f8                 | ' 	}
296f8                 | ' 
296f8                 | ' 	return res ;
296f8     08 4E 05 F1 | 	add	fp, #8
296fc     A7 FA 01 FB | 	rdlong	result1, fp
29700     08 4E 85 F1 | 	sub	fp, #8
29704                 | LR__4174
29704     A7 F0 03 F6 | 	mov	ptra, fp
29708     B2 00 A0 FD | 	call	#popregs_
2970c                 | _fatfs_cc_f_sync_ret
2970c     2D 00 64 FD | 	ret
29710                 | 
29710                 | _fatfs_cc_f_close
29710     01 4A 05 F6 | 	mov	COUNT_, #1
29714     A8 00 A0 FD | 	call	#pushregs_
29718     10 F0 07 F1 | 	add	ptra, #16
2971c     04 4E 05 F1 | 	add	fp, #4
29720     A7 12 62 FC | 	wrlong	arg01, fp
29724     04 4E 85 F1 | 	sub	fp, #4
29728     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2972c     08 4E 05 F1 | 	add	fp, #8
29730     A7 FA 61 FC | 	wrlong	result1, fp
29734     08 4E 85 F1 | 	sub	fp, #8
29738     00 FA 0D F2 | 	cmp	result1, #0 wz
2973c     38 00 90 5D |  if_ne	jmp	#LR__4180
29740     04 4E 05 F1 | 	add	fp, #4
29744     A7 12 02 FB | 	rdlong	arg01, fp
29748     08 4E 05 F1 | 	add	fp, #8
2974c     A7 14 02 F6 | 	mov	arg02, fp
29750     0C 4E 85 F1 | 	sub	fp, #12
29754     9C E6 BF FD | 	call	#_fatfs_cc_validate
29758     08 4E 05 F1 | 	add	fp, #8
2975c     A7 FA 61 FC | 	wrlong	result1, fp
29760     08 4E 85 F1 | 	sub	fp, #8
29764     00 FA 0D F2 | 	cmp	result1, #0 wz
29768     04 4E 05 A1 |  if_e	add	fp, #4
2976c     A7 1E 02 AB |  if_e	rdlong	local01, fp
29770     04 4E 85 A1 |  if_e	sub	fp, #4
29774     0F 01 68 AC |  if_e	wrlong	#0, local01
29778                 | LR__4180
29778                 | ' 
29778                 | ' 
29778                 | ' 
29778                 | ' 
29778                 | ' 			fp->obj.fs = 0;
29778                 | ' #line 4192 "ff.c"
29778                 | ' 		}
29778                 | ' 	}
29778                 | ' 	return res;
29778     08 4E 05 F1 | 	add	fp, #8
2977c     A7 FA 01 FB | 	rdlong	result1, fp
29780     08 4E 85 F1 | 	sub	fp, #8
29784     A7 F0 03 F6 | 	mov	ptra, fp
29788     B2 00 A0 FD | 	call	#popregs_
2978c                 | _fatfs_cc_f_close_ret
2978c     2D 00 64 FD | 	ret
29790                 | 
29790                 | _fatfs_cc_f_lseek
29790     00 4A 05 F6 | 	mov	COUNT_, #0
29794     A8 00 A0 FD | 	call	#pushregs_
29798     24 F0 07 F1 | 	add	ptra, #36
2979c     04 4E 05 F1 | 	add	fp, #4
297a0     A7 12 62 FC | 	wrlong	arg01, fp
297a4     04 4E 05 F1 | 	add	fp, #4
297a8     A7 14 62 FC | 	wrlong	arg02, fp
297ac     04 4E 85 F1 | 	sub	fp, #4
297b0     A7 12 02 FB | 	rdlong	arg01, fp
297b4     0C 4E 05 F1 | 	add	fp, #12
297b8     A7 14 02 F6 | 	mov	arg02, fp
297bc     10 4E 85 F1 | 	sub	fp, #16
297c0     30 E6 BF FD | 	call	#_fatfs_cc_validate
297c4     0C 4E 05 F1 | 	add	fp, #12
297c8     A7 FA 61 FC | 	wrlong	result1, fp
297cc     0C 4E 85 F1 | 	sub	fp, #12
297d0     00 FA 0D F2 | 	cmp	result1, #0 wz
297d4     1C 00 90 5D |  if_ne	jmp	#LR__4190
297d8     04 4E 05 F1 | 	add	fp, #4
297dc     A7 18 02 FB | 	rdlong	arg04, fp
297e0     11 18 06 F1 | 	add	arg04, #17
297e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
297e8     08 4E 05 F1 | 	add	fp, #8
297ec     A7 18 62 FC | 	wrlong	arg04, fp
297f0     0C 4E 85 F1 | 	sub	fp, #12
297f4                 | LR__4190
297f4     0C 4E 05 F1 | 	add	fp, #12
297f8     A7 18 0A FB | 	rdlong	arg04, fp wz
297fc     0C 4E 85 F1 | 	sub	fp, #12
29800     0C 4E 05 51 |  if_ne	add	fp, #12
29804     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29808     0C 4E 85 51 |  if_ne	sub	fp, #12
2980c     40 06 90 5D |  if_ne	jmp	#LR__4213
29810     04 4E 05 F1 | 	add	fp, #4
29814     A7 18 02 FB | 	rdlong	arg04, fp
29818     04 4E 05 F1 | 	add	fp, #4
2981c     A7 16 02 FB | 	rdlong	arg03, fp
29820     08 4E 85 F1 | 	sub	fp, #8
29824     0C 18 06 F1 | 	add	arg04, #12
29828     0C 19 02 FB | 	rdlong	arg04, arg04
2982c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
29830     3C 00 90 ED |  if_be	jmp	#LR__4191
29834     04 4E 05 F1 | 	add	fp, #4
29838     A7 16 02 FB | 	rdlong	arg03, fp
2983c     04 4E 85 F1 | 	sub	fp, #4
29840     10 16 06 F1 | 	add	arg03, #16
29844     0B 17 C2 FA | 	rdbyte	arg03, arg03
29848     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2984c     02 16 CE F7 | 	test	arg03, #2 wz
29850     1C 00 90 5D |  if_ne	jmp	#LR__4191
29854     04 4E 05 F1 | 	add	fp, #4
29858     A7 16 02 FB | 	rdlong	arg03, fp
2985c     0C 16 06 F1 | 	add	arg03, #12
29860     0B 17 02 FB | 	rdlong	arg03, arg03
29864     04 4E 05 F1 | 	add	fp, #4
29868     A7 16 62 FC | 	wrlong	arg03, fp
2986c     08 4E 85 F1 | 	sub	fp, #8
29870                 | LR__4191
29870     04 4E 05 F1 | 	add	fp, #4
29874     A7 16 02 FB | 	rdlong	arg03, fp
29878     14 16 06 F1 | 	add	arg03, #20
2987c     0B 17 02 FB | 	rdlong	arg03, arg03
29880     1C 4E 05 F1 | 	add	fp, #28
29884     A7 16 62 FC | 	wrlong	arg03, fp
29888     1C 4E 85 F1 | 	sub	fp, #28
2988c     A7 16 02 FB | 	rdlong	arg03, fp
29890     18 4E 05 F1 | 	add	fp, #24
29894     A7 00 68 FC | 	wrlong	#0, fp
29898     14 16 06 F1 | 	add	arg03, #20
2989c     0B 01 68 FC | 	wrlong	#0, arg03
298a0     14 4E 85 F1 | 	sub	fp, #20
298a4     A7 16 02 FB | 	rdlong	arg03, fp
298a8     08 4E 85 F1 | 	sub	fp, #8
298ac     01 16 16 F2 | 	cmp	arg03, #1 wc
298b0     E4 03 90 CD |  if_b	jmp	#LR__4207
298b4     10 4E 05 F1 | 	add	fp, #16
298b8     A7 16 02 FB | 	rdlong	arg03, fp
298bc     0A 16 06 F1 | 	add	arg03, #10
298c0     0B 19 E2 FA | 	rdword	arg04, arg03
298c4     09 18 66 F0 | 	shl	arg04, #9
298c8     08 4E 05 F1 | 	add	fp, #8
298cc     A7 18 62 FC | 	wrlong	arg04, fp
298d0     08 4E 05 F1 | 	add	fp, #8
298d4     A7 18 02 FB | 	rdlong	arg04, fp
298d8     20 4E 85 F1 | 	sub	fp, #32
298dc     01 18 16 F2 | 	cmp	arg04, #1 wc
298e0     AC 00 90 CD |  if_b	jmp	#LR__4192
298e4     08 4E 05 F1 | 	add	fp, #8
298e8     A7 18 02 FB | 	rdlong	arg04, fp
298ec     01 18 86 F1 | 	sub	arg04, #1
298f0     10 4E 05 F1 | 	add	fp, #16
298f4     A7 16 02 FB | 	rdlong	arg03, fp
298f8     0B 19 12 FD | 	qdiv	arg04, arg03
298fc     08 4E 05 F1 | 	add	fp, #8
29900     A7 FA 01 FB | 	rdlong	result1, fp
29904     01 FA 85 F1 | 	sub	result1, #1
29908     18 18 62 FD | 	getqx	arg04
2990c     0B FB 11 FD | 	qdiv	result1, arg03
29910     20 4E 85 F1 | 	sub	fp, #32
29914     18 16 62 FD | 	getqx	arg03
29918     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2991c     70 00 90 CD |  if_b	jmp	#LR__4192
29920     04 4E 05 F1 | 	add	fp, #4
29924     A7 16 02 FB | 	rdlong	arg03, fp
29928     1C 4E 05 F1 | 	add	fp, #28
2992c     A7 FA 01 FB | 	rdlong	result1, fp
29930     01 FA 85 F1 | 	sub	result1, #1
29934     08 4E 85 F1 | 	sub	fp, #8
29938     A7 18 02 FB | 	rdlong	arg04, fp
2993c     01 18 86 F1 | 	sub	arg04, #1
29940     0C FB 21 F5 | 	andn	result1, arg04
29944     14 16 06 F1 | 	add	arg03, #20
29948     0B FB 61 FC | 	wrlong	result1, arg03
2994c     10 4E 85 F1 | 	sub	fp, #16
29950     A7 16 02 FB | 	rdlong	arg03, fp
29954     04 4E 85 F1 | 	sub	fp, #4
29958     A7 18 02 FB | 	rdlong	arg04, fp
2995c     14 18 06 F1 | 	add	arg04, #20
29960     0C 19 02 FB | 	rdlong	arg04, arg04
29964     0C 17 82 F1 | 	sub	arg03, arg04
29968     04 4E 05 F1 | 	add	fp, #4
2996c     A7 16 62 FC | 	wrlong	arg03, fp
29970     04 4E 85 F1 | 	sub	fp, #4
29974     A7 16 02 FB | 	rdlong	arg03, fp
29978     18 16 06 F1 | 	add	arg03, #24
2997c     0B 17 02 FB | 	rdlong	arg03, arg03
29980     10 4E 05 F1 | 	add	fp, #16
29984     A7 16 62 FC | 	wrlong	arg03, fp
29988     14 4E 85 F1 | 	sub	fp, #20
2998c     D0 00 90 FD | 	jmp	#LR__4196
29990                 | LR__4192
29990     04 4E 05 F1 | 	add	fp, #4
29994     A7 16 02 FB | 	rdlong	arg03, fp
29998     08 16 06 F1 | 	add	arg03, #8
2999c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
299a0     10 4E 05 F1 | 	add	fp, #16
299a4     A7 16 62 FC | 	wrlong	arg03, fp
299a8     14 4E 85 F1 | 	sub	fp, #20
299ac     94 00 90 5D |  if_ne	jmp	#LR__4195
299b0     04 4E 05 F1 | 	add	fp, #4
299b4     A7 12 02 FB | 	rdlong	arg01, fp
299b8     04 4E 85 F1 | 	sub	fp, #4
299bc     00 14 06 F6 | 	mov	arg02, #0
299c0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
299c4     14 4E 05 F1 | 	add	fp, #20
299c8     A7 FA 61 FC | 	wrlong	result1, fp
299cc     14 4E 85 F1 | 	sub	fp, #20
299d0     01 FA 0D F2 | 	cmp	result1, #1 wz
299d4     1C 00 90 5D |  if_ne	jmp	#LR__4193
299d8     04 4E 05 F1 | 	add	fp, #4
299dc     A7 16 02 FB | 	rdlong	arg03, fp
299e0     04 4E 85 F1 | 	sub	fp, #4
299e4     11 16 06 F1 | 	add	arg03, #17
299e8     0B 05 48 FC | 	wrbyte	#2, arg03
299ec     02 FA 05 F6 | 	mov	result1, #2
299f0     5C 04 90 FD | 	jmp	#LR__4213
299f4                 | LR__4193
299f4     14 4E 05 F1 | 	add	fp, #20
299f8     A7 FA 01 FB | 	rdlong	result1, fp
299fc     14 4E 85 F1 | 	sub	fp, #20
29a00     FF FF 7F FF 
29a04     FF FB 0D F2 | 	cmp	result1, ##-1 wz
29a08     1C 00 90 5D |  if_ne	jmp	#LR__4194
29a0c     04 4E 05 F1 | 	add	fp, #4
29a10     A7 16 02 FB | 	rdlong	arg03, fp
29a14     04 4E 85 F1 | 	sub	fp, #4
29a18     11 16 06 F1 | 	add	arg03, #17
29a1c     0B 03 48 FC | 	wrbyte	#1, arg03
29a20     01 FA 05 F6 | 	mov	result1, #1
29a24     28 04 90 FD | 	jmp	#LR__4213
29a28                 | LR__4194
29a28     04 4E 05 F1 | 	add	fp, #4
29a2c     A7 16 02 FB | 	rdlong	arg03, fp
29a30     10 4E 05 F1 | 	add	fp, #16
29a34     A7 18 02 FB | 	rdlong	arg04, fp
29a38     14 4E 85 F1 | 	sub	fp, #20
29a3c     08 16 06 F1 | 	add	arg03, #8
29a40     0B 19 62 FC | 	wrlong	arg04, arg03
29a44                 | LR__4195
29a44     04 4E 05 F1 | 	add	fp, #4
29a48     A7 16 02 FB | 	rdlong	arg03, fp
29a4c     10 4E 05 F1 | 	add	fp, #16
29a50     A7 18 02 FB | 	rdlong	arg04, fp
29a54     14 4E 85 F1 | 	sub	fp, #20
29a58     18 16 06 F1 | 	add	arg03, #24
29a5c     0B 19 62 FC | 	wrlong	arg04, arg03
29a60                 | LR__4196
29a60     14 4E 05 F1 | 	add	fp, #20
29a64     A7 16 0A FB | 	rdlong	arg03, fp wz
29a68     14 4E 85 F1 | 	sub	fp, #20
29a6c     28 02 90 AD |  if_e	jmp	#LR__4206
29a70                 | ' 				while (ofs > bcs) {
29a70                 | LR__4197
29a70     08 4E 05 F1 | 	add	fp, #8
29a74     A7 18 02 FB | 	rdlong	arg04, fp
29a78     10 4E 05 F1 | 	add	fp, #16
29a7c     A7 16 02 FB | 	rdlong	arg03, fp
29a80     18 4E 85 F1 | 	sub	fp, #24
29a84     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
29a88     68 01 90 ED |  if_be	jmp	#LR__4203
29a8c     08 4E 05 F1 | 	add	fp, #8
29a90     A7 18 02 FB | 	rdlong	arg04, fp
29a94     10 4E 05 F1 | 	add	fp, #16
29a98     A7 16 02 FB | 	rdlong	arg03, fp
29a9c     0B 19 82 F1 | 	sub	arg04, arg03
29aa0     10 4E 85 F1 | 	sub	fp, #16
29aa4     A7 18 62 FC | 	wrlong	arg04, fp
29aa8     04 4E 85 F1 | 	sub	fp, #4
29aac     A7 18 02 FB | 	rdlong	arg04, fp
29ab0     0C FB 01 F6 | 	mov	result1, arg04
29ab4     14 18 06 F1 | 	add	arg04, #20
29ab8     0C 19 02 FB | 	rdlong	arg04, arg04
29abc     14 4E 05 F1 | 	add	fp, #20
29ac0     A7 16 02 FB | 	rdlong	arg03, fp
29ac4     0B 19 02 F1 | 	add	arg04, arg03
29ac8     14 FA 05 F1 | 	add	result1, #20
29acc     FD 18 62 FC | 	wrlong	arg04, result1
29ad0     14 4E 85 F1 | 	sub	fp, #20
29ad4     A7 16 02 FB | 	rdlong	arg03, fp
29ad8     04 4E 85 F1 | 	sub	fp, #4
29adc     10 16 06 F1 | 	add	arg03, #16
29ae0     0B 17 C2 FA | 	rdbyte	arg03, arg03
29ae4     02 16 CE F7 | 	test	arg03, #2 wz
29ae8     3C 00 90 AD |  if_e	jmp	#LR__4198
29aec     04 4E 05 F1 | 	add	fp, #4
29af0     A7 12 02 FB | 	rdlong	arg01, fp
29af4     10 4E 05 F1 | 	add	fp, #16
29af8     A7 14 02 FB | 	rdlong	arg02, fp
29afc     14 4E 85 F1 | 	sub	fp, #20
29b00     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
29b04     14 4E 05 F1 | 	add	fp, #20
29b08     A7 FA 61 FC | 	wrlong	result1, fp
29b0c     00 FA 4D F2 | 	cmps	result1, #0 wz
29b10     14 4E 85 F1 | 	sub	fp, #20
29b14     08 4E 05 A1 |  if_e	add	fp, #8
29b18     A7 00 68 AC |  if_e	wrlong	#0, fp
29b1c     08 4E 85 A1 |  if_e	sub	fp, #8
29b20                 | ' 							ofs = 0; break;
29b20     D0 00 90 AD |  if_e	jmp	#LR__4203
29b24     24 00 90 FD | 	jmp	#LR__4199
29b28                 | LR__4198
29b28     04 4E 05 F1 | 	add	fp, #4
29b2c     A7 12 02 FB | 	rdlong	arg01, fp
29b30     10 4E 05 F1 | 	add	fp, #16
29b34     A7 14 02 FB | 	rdlong	arg02, fp
29b38     14 4E 85 F1 | 	sub	fp, #20
29b3c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
29b40     14 4E 05 F1 | 	add	fp, #20
29b44     A7 FA 61 FC | 	wrlong	result1, fp
29b48     14 4E 85 F1 | 	sub	fp, #20
29b4c                 | LR__4199
29b4c     14 4E 05 F1 | 	add	fp, #20
29b50     A7 16 02 FB | 	rdlong	arg03, fp
29b54     14 4E 85 F1 | 	sub	fp, #20
29b58     FF FF 7F FF 
29b5c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
29b60     1C 00 90 5D |  if_ne	jmp	#LR__4200
29b64     04 4E 05 F1 | 	add	fp, #4
29b68     A7 16 02 FB | 	rdlong	arg03, fp
29b6c     04 4E 85 F1 | 	sub	fp, #4
29b70     11 16 06 F1 | 	add	arg03, #17
29b74     0B 03 48 FC | 	wrbyte	#1, arg03
29b78     01 FA 05 F6 | 	mov	result1, #1
29b7c     D0 02 90 FD | 	jmp	#LR__4213
29b80                 | LR__4200
29b80     14 4E 05 F1 | 	add	fp, #20
29b84     A7 16 02 FB | 	rdlong	arg03, fp
29b88     14 4E 85 F1 | 	sub	fp, #20
29b8c     02 16 16 F2 | 	cmp	arg03, #2 wc
29b90     24 00 90 CD |  if_b	jmp	#LR__4201
29b94     10 4E 05 F1 | 	add	fp, #16
29b98     A7 18 02 FB | 	rdlong	arg04, fp
29b9c     04 4E 05 F1 | 	add	fp, #4
29ba0     A7 16 02 FB | 	rdlong	arg03, fp
29ba4     14 4E 85 F1 | 	sub	fp, #20
29ba8     18 18 06 F1 | 	add	arg04, #24
29bac     0C 19 02 FB | 	rdlong	arg04, arg04
29bb0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
29bb4     1C 00 90 CD |  if_b	jmp	#LR__4202
29bb8                 | LR__4201
29bb8     04 4E 05 F1 | 	add	fp, #4
29bbc     A7 16 02 FB | 	rdlong	arg03, fp
29bc0     04 4E 85 F1 | 	sub	fp, #4
29bc4     11 16 06 F1 | 	add	arg03, #17
29bc8     0B 05 48 FC | 	wrbyte	#2, arg03
29bcc     02 FA 05 F6 | 	mov	result1, #2
29bd0     7C 02 90 FD | 	jmp	#LR__4213
29bd4                 | LR__4202
29bd4     04 4E 05 F1 | 	add	fp, #4
29bd8     A7 18 02 FB | 	rdlong	arg04, fp
29bdc     10 4E 05 F1 | 	add	fp, #16
29be0     A7 16 02 FB | 	rdlong	arg03, fp
29be4     14 4E 85 F1 | 	sub	fp, #20
29be8     18 18 06 F1 | 	add	arg04, #24
29bec     0C 17 62 FC | 	wrlong	arg03, arg04
29bf0     7C FE 9F FD | 	jmp	#LR__4197
29bf4                 | LR__4203
29bf4     04 4E 05 F1 | 	add	fp, #4
29bf8     A7 16 02 FB | 	rdlong	arg03, fp
29bfc     0B 13 02 F6 | 	mov	arg01, arg03
29c00     14 16 06 F1 | 	add	arg03, #20
29c04     0B 15 02 FB | 	rdlong	arg02, arg03
29c08     04 4E 05 F1 | 	add	fp, #4
29c0c     A7 16 02 FB | 	rdlong	arg03, fp
29c10     0B 15 02 F1 | 	add	arg02, arg03
29c14     14 12 06 F1 | 	add	arg01, #20
29c18     09 15 62 FC | 	wrlong	arg02, arg01
29c1c     A7 16 02 FB | 	rdlong	arg03, fp
29c20     08 4E 85 F1 | 	sub	fp, #8
29c24     FF 17 CE F7 | 	test	arg03, #511 wz
29c28     6C 00 90 AD |  if_e	jmp	#LR__4205
29c2c     10 4E 05 F1 | 	add	fp, #16
29c30     A7 12 02 FB | 	rdlong	arg01, fp
29c34     04 4E 05 F1 | 	add	fp, #4
29c38     A7 14 02 FB | 	rdlong	arg02, fp
29c3c     14 4E 85 F1 | 	sub	fp, #20
29c40     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
29c44     1C 4E 05 F1 | 	add	fp, #28
29c48     A7 FA 61 FC | 	wrlong	result1, fp
29c4c     1C 4E 85 F1 | 	sub	fp, #28
29c50     00 FA 0D F2 | 	cmp	result1, #0 wz
29c54     1C 00 90 5D |  if_ne	jmp	#LR__4204
29c58     04 4E 05 F1 | 	add	fp, #4
29c5c     A7 16 02 FB | 	rdlong	arg03, fp
29c60     04 4E 85 F1 | 	sub	fp, #4
29c64     11 16 06 F1 | 	add	arg03, #17
29c68     0B 05 48 FC | 	wrbyte	#2, arg03
29c6c     02 FA 05 F6 | 	mov	result1, #2
29c70     DC 01 90 FD | 	jmp	#LR__4213
29c74                 | LR__4204
29c74     1C 4E 05 F1 | 	add	fp, #28
29c78     A7 18 02 FB | 	rdlong	arg04, fp
29c7c     14 4E 85 F1 | 	sub	fp, #20
29c80     A7 16 02 FB | 	rdlong	arg03, fp
29c84     09 16 46 F0 | 	shr	arg03, #9
29c88     0B 19 02 F1 | 	add	arg04, arg03
29c8c     14 4E 05 F1 | 	add	fp, #20
29c90     A7 18 62 FC | 	wrlong	arg04, fp
29c94     1C 4E 85 F1 | 	sub	fp, #28
29c98                 | LR__4205
29c98                 | LR__4206
29c98                 | LR__4207
29c98     04 4E 05 F1 | 	add	fp, #4
29c9c     A7 18 02 FB | 	rdlong	arg04, fp
29ca0     0C 17 02 F6 | 	mov	arg03, arg04
29ca4     04 4E 85 F1 | 	sub	fp, #4
29ca8     14 16 06 F1 | 	add	arg03, #20
29cac     0B 17 02 FB | 	rdlong	arg03, arg03
29cb0     0C 18 06 F1 | 	add	arg04, #12
29cb4     0C 19 02 FB | 	rdlong	arg04, arg04
29cb8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
29cbc     3C 00 90 ED |  if_be	jmp	#LR__4208
29cc0     04 4E 05 F1 | 	add	fp, #4
29cc4     A7 18 02 FB | 	rdlong	arg04, fp
29cc8     0C 17 02 F6 | 	mov	arg03, arg04
29ccc     14 18 06 F1 | 	add	arg04, #20
29cd0     0C 19 02 FB | 	rdlong	arg04, arg04
29cd4     0C 16 06 F1 | 	add	arg03, #12
29cd8     0B 19 62 FC | 	wrlong	arg04, arg03
29cdc     A7 18 02 FB | 	rdlong	arg04, fp
29ce0     0C 17 02 F6 | 	mov	arg03, arg04
29ce4     04 4E 85 F1 | 	sub	fp, #4
29ce8     10 18 06 F1 | 	add	arg04, #16
29cec     0C 19 C2 FA | 	rdbyte	arg04, arg04
29cf0     40 18 46 F5 | 	or	arg04, #64
29cf4     10 16 06 F1 | 	add	arg03, #16
29cf8     0B 19 42 FC | 	wrbyte	arg04, arg03
29cfc                 | LR__4208
29cfc     04 4E 05 F1 | 	add	fp, #4
29d00     A7 16 02 FB | 	rdlong	arg03, fp
29d04     04 4E 85 F1 | 	sub	fp, #4
29d08     14 16 06 F1 | 	add	arg03, #20
29d0c     0B 17 02 FB | 	rdlong	arg03, arg03
29d10     FF 17 CE F7 | 	test	arg03, #511 wz
29d14     2C 01 90 AD |  if_e	jmp	#LR__4212
29d18     04 4E 05 F1 | 	add	fp, #4
29d1c     A7 18 02 FB | 	rdlong	arg04, fp
29d20     18 4E 05 F1 | 	add	fp, #24
29d24     A7 16 02 FB | 	rdlong	arg03, fp
29d28     1C 4E 85 F1 | 	sub	fp, #28
29d2c     1C 18 06 F1 | 	add	arg04, #28
29d30     0C 19 02 FB | 	rdlong	arg04, arg04
29d34     0C 17 0A F2 | 	cmp	arg03, arg04 wz
29d38     08 01 90 AD |  if_e	jmp	#LR__4212
29d3c     04 4E 05 F1 | 	add	fp, #4
29d40     A7 16 02 FB | 	rdlong	arg03, fp
29d44     04 4E 85 F1 | 	sub	fp, #4
29d48     10 16 06 F1 | 	add	arg03, #16
29d4c     0B 17 C2 FA | 	rdbyte	arg03, arg03
29d50     80 16 CE F7 | 	test	arg03, #128 wz
29d54     7C 00 90 AD |  if_e	jmp	#LR__4210
29d58     10 4E 05 F1 | 	add	fp, #16
29d5c     A7 16 02 FB | 	rdlong	arg03, fp
29d60     01 16 06 F1 | 	add	arg03, #1
29d64     0B 13 C2 FA | 	rdbyte	arg01, arg03
29d68     0C 4E 85 F1 | 	sub	fp, #12
29d6c     A7 16 02 FB | 	rdlong	arg03, fp
29d70     0B 15 02 F6 | 	mov	arg02, arg03
29d74     28 14 06 F1 | 	add	arg02, #40
29d78     04 4E 85 F1 | 	sub	fp, #4
29d7c     1C 16 06 F1 | 	add	arg03, #28
29d80     0B 17 02 FB | 	rdlong	arg03, arg03
29d84     01 18 06 F6 | 	mov	arg04, #1
29d88     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
29d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
29d90     1C 00 90 AD |  if_e	jmp	#LR__4209
29d94     04 4E 05 F1 | 	add	fp, #4
29d98     A7 16 02 FB | 	rdlong	arg03, fp
29d9c     04 4E 85 F1 | 	sub	fp, #4
29da0     11 16 06 F1 | 	add	arg03, #17
29da4     0B 03 48 FC | 	wrbyte	#1, arg03
29da8     01 FA 05 F6 | 	mov	result1, #1
29dac     A0 00 90 FD | 	jmp	#LR__4213
29db0                 | LR__4209
29db0     04 4E 05 F1 | 	add	fp, #4
29db4     A7 18 02 FB | 	rdlong	arg04, fp
29db8     0C 17 02 F6 | 	mov	arg03, arg04
29dbc     04 4E 85 F1 | 	sub	fp, #4
29dc0     10 18 06 F1 | 	add	arg04, #16
29dc4     0C 19 C2 FA | 	rdbyte	arg04, arg04
29dc8     7F 18 06 F5 | 	and	arg04, #127
29dcc     10 16 06 F1 | 	add	arg03, #16
29dd0     0B 19 42 FC | 	wrbyte	arg04, arg03
29dd4                 | LR__4210
29dd4     10 4E 05 F1 | 	add	fp, #16
29dd8     A7 16 02 FB | 	rdlong	arg03, fp
29ddc     01 16 06 F1 | 	add	arg03, #1
29de0     0B 13 C2 FA | 	rdbyte	arg01, arg03
29de4     0C 4E 85 F1 | 	sub	fp, #12
29de8     A7 14 02 FB | 	rdlong	arg02, fp
29dec     28 14 06 F1 | 	add	arg02, #40
29df0     18 4E 05 F1 | 	add	fp, #24
29df4     A7 16 02 FB | 	rdlong	arg03, fp
29df8     1C 4E 85 F1 | 	sub	fp, #28
29dfc     01 18 06 F6 | 	mov	arg04, #1
29e00     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
29e04     00 FA 0D F2 | 	cmp	result1, #0 wz
29e08     1C 00 90 AD |  if_e	jmp	#LR__4211
29e0c     04 4E 05 F1 | 	add	fp, #4
29e10     A7 16 02 FB | 	rdlong	arg03, fp
29e14     04 4E 85 F1 | 	sub	fp, #4
29e18     11 16 06 F1 | 	add	arg03, #17
29e1c     0B 03 48 FC | 	wrbyte	#1, arg03
29e20     01 FA 05 F6 | 	mov	result1, #1
29e24     28 00 90 FD | 	jmp	#LR__4213
29e28                 | LR__4211
29e28     04 4E 05 F1 | 	add	fp, #4
29e2c     A7 18 02 FB | 	rdlong	arg04, fp
29e30     18 4E 05 F1 | 	add	fp, #24
29e34     A7 16 02 FB | 	rdlong	arg03, fp
29e38     1C 4E 85 F1 | 	sub	fp, #28
29e3c     1C 18 06 F1 | 	add	arg04, #28
29e40     0C 17 62 FC | 	wrlong	arg03, arg04
29e44                 | LR__4212
29e44                 | ' 
29e44                 | ' 			fp->sect = nsect;
29e44                 | ' 		}
29e44                 | ' 	}
29e44                 | ' 
29e44                 | ' 	return res ;
29e44     0C 4E 05 F1 | 	add	fp, #12
29e48     A7 FA 01 FB | 	rdlong	result1, fp
29e4c     0C 4E 85 F1 | 	sub	fp, #12
29e50                 | LR__4213
29e50     A7 F0 03 F6 | 	mov	ptra, fp
29e54     B2 00 A0 FD | 	call	#popregs_
29e58                 | _fatfs_cc_f_lseek_ret
29e58     2D 00 64 FD | 	ret
29e5c                 | 
29e5c                 | _fatfs_cc_f_opendir
29e5c     01 4A 05 F6 | 	mov	COUNT_, #1
29e60     A8 00 A0 FD | 	call	#pushregs_
29e64     14 F0 07 F1 | 	add	ptra, #20
29e68     04 4E 05 F1 | 	add	fp, #4
29e6c     A7 12 62 FC | 	wrlong	arg01, fp
29e70     04 4E 05 F1 | 	add	fp, #4
29e74     A7 14 62 FC | 	wrlong	arg02, fp
29e78     04 4E 85 F1 | 	sub	fp, #4
29e7c     A7 16 0A FB | 	rdlong	arg03, fp wz
29e80     04 4E 85 F1 | 	sub	fp, #4
29e84     09 FA 05 A6 |  if_e	mov	result1, #9
29e88     78 01 90 AD |  if_e	jmp	#LR__4226
29e8c     08 4E 05 F1 | 	add	fp, #8
29e90     A7 12 02 F6 | 	mov	arg01, fp
29e94     08 4E 05 F1 | 	add	fp, #8
29e98     A7 14 02 F6 | 	mov	arg02, fp
29e9c     10 4E 85 F1 | 	sub	fp, #16
29ea0     00 16 06 F6 | 	mov	arg03, #0
29ea4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
29ea8     0C 4E 05 F1 | 	add	fp, #12
29eac     A7 FA 61 FC | 	wrlong	result1, fp
29eb0     0C 4E 85 F1 | 	sub	fp, #12
29eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
29eb8     20 01 90 5D |  if_ne	jmp	#LR__4225
29ebc     04 4E 05 F1 | 	add	fp, #4
29ec0     A7 16 02 FB | 	rdlong	arg03, fp
29ec4     0C 4E 05 F1 | 	add	fp, #12
29ec8     A7 FA 01 FB | 	rdlong	result1, fp
29ecc     0B FB 61 FC | 	wrlong	result1, arg03
29ed0     0C 4E 85 F1 | 	sub	fp, #12
29ed4     A7 12 02 FB | 	rdlong	arg01, fp
29ed8     04 4E 05 F1 | 	add	fp, #4
29edc     A7 14 02 FB | 	rdlong	arg02, fp
29ee0     08 4E 85 F1 | 	sub	fp, #8
29ee4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
29ee8     0C 4E 05 F1 | 	add	fp, #12
29eec     A7 FA 61 FC | 	wrlong	result1, fp
29ef0     0C 4E 85 F1 | 	sub	fp, #12
29ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
29ef8     C4 00 90 5D |  if_ne	jmp	#LR__4224
29efc     04 4E 05 F1 | 	add	fp, #4
29f00     A7 16 02 FB | 	rdlong	arg03, fp
29f04     04 4E 85 F1 | 	sub	fp, #4
29f08     2B 16 06 F1 | 	add	arg03, #43
29f0c     0B 17 C2 FA | 	rdbyte	arg03, arg03
29f10     80 16 CE F7 | 	test	arg03, #128 wz
29f14     58 00 90 5D |  if_ne	jmp	#LR__4222
29f18     04 4E 05 F1 | 	add	fp, #4
29f1c     A7 16 02 FB | 	rdlong	arg03, fp
29f20     04 4E 85 F1 | 	sub	fp, #4
29f24     06 16 06 F1 | 	add	arg03, #6
29f28     0B 17 C2 FA | 	rdbyte	arg03, arg03
29f2c     10 16 CE F7 | 	test	arg03, #16 wz
29f30     30 00 90 AD |  if_e	jmp	#LR__4220
29f34     04 4E 05 F1 | 	add	fp, #4
29f38     A7 16 02 FB | 	rdlong	arg03, fp
29f3c     0B 1F 02 F6 | 	mov	local01, arg03
29f40     0C 4E 05 F1 | 	add	fp, #12
29f44     A7 12 02 FB | 	rdlong	arg01, fp
29f48     10 4E 85 F1 | 	sub	fp, #16
29f4c     1C 16 06 F1 | 	add	arg03, #28
29f50     0B 15 02 FB | 	rdlong	arg02, arg03
29f54     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
29f58     08 1E 06 F1 | 	add	local01, #8
29f5c     0F FB 61 FC | 	wrlong	result1, local01
29f60     0C 00 90 FD | 	jmp	#LR__4221
29f64                 | LR__4220
29f64     0C 4E 05 F1 | 	add	fp, #12
29f68     A7 0A 68 FC | 	wrlong	#5, fp
29f6c     0C 4E 85 F1 | 	sub	fp, #12
29f70                 | LR__4221
29f70                 | LR__4222
29f70     0C 4E 05 F1 | 	add	fp, #12
29f74     A7 1E 0A FB | 	rdlong	local01, fp wz
29f78     0C 4E 85 F1 | 	sub	fp, #12
29f7c     40 00 90 5D |  if_ne	jmp	#LR__4223
29f80     04 4E 05 F1 | 	add	fp, #4
29f84     A7 1E 02 FB | 	rdlong	local01, fp
29f88     0C 4E 05 F1 | 	add	fp, #12
29f8c     A7 16 02 FB | 	rdlong	arg03, fp
29f90     06 16 06 F1 | 	add	arg03, #6
29f94     0B 17 E2 FA | 	rdword	arg03, arg03
29f98     04 1E 06 F1 | 	add	local01, #4
29f9c     0F 17 52 FC | 	wrword	arg03, local01
29fa0     0C 4E 85 F1 | 	sub	fp, #12
29fa4     A7 12 02 FB | 	rdlong	arg01, fp
29fa8     04 4E 85 F1 | 	sub	fp, #4
29fac     00 14 06 F6 | 	mov	arg02, #0
29fb0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
29fb4     0C 4E 05 F1 | 	add	fp, #12
29fb8     A7 FA 61 FC | 	wrlong	result1, fp
29fbc     0C 4E 85 F1 | 	sub	fp, #12
29fc0                 | LR__4223
29fc0                 | LR__4224
29fc0     0C 4E 05 F1 | 	add	fp, #12
29fc4     A7 1E 02 FB | 	rdlong	local01, fp
29fc8     0C 4E 85 F1 | 	sub	fp, #12
29fcc     04 1E 0E F2 | 	cmp	local01, #4 wz
29fd0     0C 4E 05 A1 |  if_e	add	fp, #12
29fd4     A7 0A 68 AC |  if_e	wrlong	#5, fp
29fd8     0C 4E 85 A1 |  if_e	sub	fp, #12
29fdc                 | LR__4225
29fdc     0C 4E 05 F1 | 	add	fp, #12
29fe0     A7 1E 0A FB | 	rdlong	local01, fp wz
29fe4     0C 4E 85 F1 | 	sub	fp, #12
29fe8     04 4E 05 51 |  if_ne	add	fp, #4
29fec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
29ff0     04 4E 85 51 |  if_ne	sub	fp, #4
29ff4     0F 01 68 5C |  if_ne	wrlong	#0, local01
29ff8                 | ' 
29ff8                 | ' 	return res ;
29ff8     0C 4E 05 F1 | 	add	fp, #12
29ffc     A7 FA 01 FB | 	rdlong	result1, fp
2a000     0C 4E 85 F1 | 	sub	fp, #12
2a004                 | LR__4226
2a004     A7 F0 03 F6 | 	mov	ptra, fp
2a008     B2 00 A0 FD | 	call	#popregs_
2a00c                 | _fatfs_cc_f_opendir_ret
2a00c     2D 00 64 FD | 	ret
2a010                 | 
2a010                 | _fatfs_cc_f_closedir
2a010     00 4A 05 F6 | 	mov	COUNT_, #0
2a014     A8 00 A0 FD | 	call	#pushregs_
2a018     10 F0 07 F1 | 	add	ptra, #16
2a01c     04 4E 05 F1 | 	add	fp, #4
2a020     A7 12 62 FC | 	wrlong	arg01, fp
2a024     08 4E 05 F1 | 	add	fp, #8
2a028     A7 14 02 F6 | 	mov	arg02, fp
2a02c     0C 4E 85 F1 | 	sub	fp, #12
2a030     C0 DD BF FD | 	call	#_fatfs_cc_validate
2a034     08 4E 05 F1 | 	add	fp, #8
2a038     A7 FA 61 FC | 	wrlong	result1, fp
2a03c     08 4E 85 F1 | 	sub	fp, #8
2a040     00 FA 0D F2 | 	cmp	result1, #0 wz
2a044     04 4E 05 A1 |  if_e	add	fp, #4
2a048     A7 FA 01 AB |  if_e	rdlong	result1, fp
2a04c     04 4E 85 A1 |  if_e	sub	fp, #4
2a050     FD 00 68 AC |  if_e	wrlong	#0, result1
2a054                 | ' 
2a054                 | ' 
2a054                 | ' 
2a054                 | ' 
2a054                 | ' 		dp->obj.fs = 0;
2a054                 | ' #line 4633 "ff.c"
2a054                 | ' 	}
2a054                 | ' 	return res;
2a054     08 4E 05 F1 | 	add	fp, #8
2a058     A7 FA 01 FB | 	rdlong	result1, fp
2a05c     08 4E 85 F1 | 	sub	fp, #8
2a060     A7 F0 03 F6 | 	mov	ptra, fp
2a064     B2 00 A0 FD | 	call	#popregs_
2a068                 | _fatfs_cc_f_closedir_ret
2a068     2D 00 64 FD | 	ret
2a06c                 | 
2a06c                 | _fatfs_cc_f_readdir
2a06c     00 4A 05 F6 | 	mov	COUNT_, #0
2a070     A8 00 A0 FD | 	call	#pushregs_
2a074     14 F0 07 F1 | 	add	ptra, #20
2a078     04 4E 05 F1 | 	add	fp, #4
2a07c     A7 12 62 FC | 	wrlong	arg01, fp
2a080     04 4E 05 F1 | 	add	fp, #4
2a084     A7 14 62 FC | 	wrlong	arg02, fp
2a088     04 4E 85 F1 | 	sub	fp, #4
2a08c     A7 12 02 FB | 	rdlong	arg01, fp
2a090     0C 4E 05 F1 | 	add	fp, #12
2a094     A7 14 02 F6 | 	mov	arg02, fp
2a098     10 4E 85 F1 | 	sub	fp, #16
2a09c     54 DD BF FD | 	call	#_fatfs_cc_validate
2a0a0     0C 4E 05 F1 | 	add	fp, #12
2a0a4     A7 FA 61 FC | 	wrlong	result1, fp
2a0a8     0C 4E 85 F1 | 	sub	fp, #12
2a0ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0b0     BC 00 90 5D |  if_ne	jmp	#LR__4233
2a0b4     08 4E 05 F1 | 	add	fp, #8
2a0b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2a0bc     08 4E 85 F1 | 	sub	fp, #8
2a0c0     24 00 90 5D |  if_ne	jmp	#LR__4230
2a0c4     04 4E 05 F1 | 	add	fp, #4
2a0c8     A7 12 02 FB | 	rdlong	arg01, fp
2a0cc     04 4E 85 F1 | 	sub	fp, #4
2a0d0     00 14 06 F6 | 	mov	arg02, #0
2a0d4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2a0d8     0C 4E 05 F1 | 	add	fp, #12
2a0dc     A7 FA 61 FC | 	wrlong	result1, fp
2a0e0     0C 4E 85 F1 | 	sub	fp, #12
2a0e4     88 00 90 FD | 	jmp	#LR__4232
2a0e8                 | LR__4230
2a0e8     04 4E 05 F1 | 	add	fp, #4
2a0ec     A7 12 02 FB | 	rdlong	arg01, fp
2a0f0     04 4E 85 F1 | 	sub	fp, #4
2a0f4     00 14 06 F6 | 	mov	arg02, #0
2a0f8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2a0fc     0C 4E 05 F1 | 	add	fp, #12
2a100     A7 FA 61 FC | 	wrlong	result1, fp
2a104     0C 4E 85 F1 | 	sub	fp, #12
2a108     04 FA 0D F2 | 	cmp	result1, #4 wz
2a10c     0C 4E 05 A1 |  if_e	add	fp, #12
2a110     A7 00 68 AC |  if_e	wrlong	#0, fp
2a114     0C 4E 85 A1 |  if_e	sub	fp, #12
2a118     0C 4E 05 F1 | 	add	fp, #12
2a11c     A7 FA 09 FB | 	rdlong	result1, fp wz
2a120     0C 4E 85 F1 | 	sub	fp, #12
2a124     48 00 90 5D |  if_ne	jmp	#LR__4231
2a128     04 4E 05 F1 | 	add	fp, #4
2a12c     A7 12 02 FB | 	rdlong	arg01, fp
2a130     04 4E 05 F1 | 	add	fp, #4
2a134     A7 14 02 FB | 	rdlong	arg02, fp
2a138     08 4E 85 F1 | 	sub	fp, #8
2a13c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2a140     04 4E 05 F1 | 	add	fp, #4
2a144     A7 12 02 FB | 	rdlong	arg01, fp
2a148     04 4E 85 F1 | 	sub	fp, #4
2a14c     00 14 06 F6 | 	mov	arg02, #0
2a150     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2a154     0C 4E 05 F1 | 	add	fp, #12
2a158     A7 FA 61 FC | 	wrlong	result1, fp
2a15c     0C 4E 85 F1 | 	sub	fp, #12
2a160     04 FA 0D F2 | 	cmp	result1, #4 wz
2a164     0C 4E 05 A1 |  if_e	add	fp, #12
2a168     A7 00 68 AC |  if_e	wrlong	#0, fp
2a16c     0C 4E 85 A1 |  if_e	sub	fp, #12
2a170                 | LR__4231
2a170                 | LR__4232
2a170                 | LR__4233
2a170                 | ' 			}
2a170                 | ' 			;
2a170                 | ' 		}
2a170                 | ' 	}
2a170                 | ' 	return res ;
2a170     0C 4E 05 F1 | 	add	fp, #12
2a174     A7 FA 01 FB | 	rdlong	result1, fp
2a178     0C 4E 85 F1 | 	sub	fp, #12
2a17c     A7 F0 03 F6 | 	mov	ptra, fp
2a180     B2 00 A0 FD | 	call	#popregs_
2a184                 | _fatfs_cc_f_readdir_ret
2a184     2D 00 64 FD | 	ret
2a188                 | 
2a188                 | _fatfs_cc_f_stat
2a188     00 4A 05 F6 | 	mov	COUNT_, #0
2a18c     A8 00 A0 FD | 	call	#pushregs_
2a190     40 F0 07 F1 | 	add	ptra, #64
2a194     04 4E 05 F1 | 	add	fp, #4
2a198     A7 12 62 FC | 	wrlong	arg01, fp
2a19c     04 4E 05 F1 | 	add	fp, #4
2a1a0     A7 14 62 FC | 	wrlong	arg02, fp
2a1a4     04 4E 85 F1 | 	sub	fp, #4
2a1a8     A7 12 02 F6 | 	mov	arg01, fp
2a1ac     0C 4E 05 F1 | 	add	fp, #12
2a1b0     A7 14 02 F6 | 	mov	arg02, fp
2a1b4     10 4E 85 F1 | 	sub	fp, #16
2a1b8     00 16 06 F6 | 	mov	arg03, #0
2a1bc     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2a1c0     0C 4E 05 F1 | 	add	fp, #12
2a1c4     A7 FA 61 FC | 	wrlong	result1, fp
2a1c8     0C 4E 85 F1 | 	sub	fp, #12
2a1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1d0     74 00 90 5D |  if_ne	jmp	#LR__4243
2a1d4     10 4E 05 F1 | 	add	fp, #16
2a1d8     A7 12 02 F6 | 	mov	arg01, fp
2a1dc     0C 4E 85 F1 | 	sub	fp, #12
2a1e0     A7 14 02 FB | 	rdlong	arg02, fp
2a1e4     04 4E 85 F1 | 	sub	fp, #4
2a1e8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2a1ec     0C 4E 05 F1 | 	add	fp, #12
2a1f0     A7 FA 61 FC | 	wrlong	result1, fp
2a1f4     0C 4E 85 F1 | 	sub	fp, #12
2a1f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1fc     48 00 90 5D |  if_ne	jmp	#LR__4242
2a200     3B 4E 05 F1 | 	add	fp, #59
2a204     A7 FA C1 FA | 	rdbyte	result1, fp
2a208     3B 4E 85 F1 | 	sub	fp, #59
2a20c     80 FA CD F7 | 	test	result1, #128 wz
2a210     0C 4E 05 51 |  if_ne	add	fp, #12
2a214     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2a218     0C 4E 85 51 |  if_ne	sub	fp, #12
2a21c     28 00 90 5D |  if_ne	jmp	#LR__4241
2a220     08 4E 05 F1 | 	add	fp, #8
2a224     A7 FA 09 FB | 	rdlong	result1, fp wz
2a228     08 4E 85 F1 | 	sub	fp, #8
2a22c     18 00 90 AD |  if_e	jmp	#LR__4240
2a230     10 4E 05 F1 | 	add	fp, #16
2a234     A7 12 02 F6 | 	mov	arg01, fp
2a238     08 4E 85 F1 | 	sub	fp, #8
2a23c     A7 14 02 FB | 	rdlong	arg02, fp
2a240     08 4E 85 F1 | 	sub	fp, #8
2a244     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2a248                 | LR__4240
2a248                 | LR__4241
2a248                 | LR__4242
2a248                 | LR__4243
2a248                 | ' 			}
2a248                 | ' 		}
2a248                 | ' 		;
2a248                 | ' 	}
2a248                 | ' 
2a248                 | ' 	return res ;
2a248     0C 4E 05 F1 | 	add	fp, #12
2a24c     A7 FA 01 FB | 	rdlong	result1, fp
2a250     0C 4E 85 F1 | 	sub	fp, #12
2a254     A7 F0 03 F6 | 	mov	ptra, fp
2a258     B2 00 A0 FD | 	call	#popregs_
2a25c                 | _fatfs_cc_f_stat_ret
2a25c     2D 00 64 FD | 	ret
2a260                 | 
2a260                 | _fatfs_cc_f_unlink
2a260     00 4A 05 F6 | 	mov	COUNT_, #0
2a264     A8 00 A0 FD | 	call	#pushregs_
2a268     74 F0 07 F1 | 	add	ptra, #116
2a26c     04 4E 05 F1 | 	add	fp, #4
2a270     A7 12 62 FC | 	wrlong	arg01, fp
2a274     68 4E 05 F1 | 	add	fp, #104
2a278     A7 00 68 FC | 	wrlong	#0, fp
2a27c     68 4E 85 F1 | 	sub	fp, #104
2a280     A7 12 02 F6 | 	mov	arg01, fp
2a284     6C 4E 05 F1 | 	add	fp, #108
2a288     A7 14 02 F6 | 	mov	arg02, fp
2a28c     70 4E 85 F1 | 	sub	fp, #112
2a290     02 16 06 F6 | 	mov	arg03, #2
2a294     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2a298     08 4E 05 F1 | 	add	fp, #8
2a29c     A7 FA 61 FC | 	wrlong	result1, fp
2a2a0     08 4E 85 F1 | 	sub	fp, #8
2a2a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2a8     E4 01 90 5D |  if_ne	jmp	#LR__4258
2a2ac     70 4E 05 F1 | 	add	fp, #112
2a2b0     A7 16 02 FB | 	rdlong	arg03, fp
2a2b4     64 4E 85 F1 | 	sub	fp, #100
2a2b8     A7 16 62 FC | 	wrlong	arg03, fp
2a2bc     A7 12 02 F6 | 	mov	arg01, fp
2a2c0     08 4E 85 F1 | 	sub	fp, #8
2a2c4     A7 14 02 FB | 	rdlong	arg02, fp
2a2c8     04 4E 85 F1 | 	sub	fp, #4
2a2cc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2a2d0     08 4E 05 F1 | 	add	fp, #8
2a2d4     A7 FA 61 FC | 	wrlong	result1, fp
2a2d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2a2dc     08 4E 85 F1 | 	sub	fp, #8
2a2e0     AC 01 90 5D |  if_ne	jmp	#LR__4257
2a2e4     37 4E 05 F1 | 	add	fp, #55
2a2e8     A7 FA C1 FA | 	rdbyte	result1, fp
2a2ec     37 4E 85 F1 | 	sub	fp, #55
2a2f0     80 FA CD F7 | 	test	result1, #128 wz
2a2f4     08 4E 05 51 |  if_ne	add	fp, #8
2a2f8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2a2fc     08 4E 85 51 |  if_ne	sub	fp, #8
2a300     1C 00 90 5D |  if_ne	jmp	#LR__4250
2a304     12 4E 05 F1 | 	add	fp, #18
2a308     A7 FA C1 FA | 	rdbyte	result1, fp
2a30c     12 4E 85 F1 | 	sub	fp, #18
2a310     01 FA CD F7 | 	test	result1, #1 wz
2a314     08 4E 05 51 |  if_ne	add	fp, #8
2a318     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2a31c     08 4E 85 51 |  if_ne	sub	fp, #8
2a320                 | LR__4250
2a320     08 4E 05 F1 | 	add	fp, #8
2a324     A7 FA 09 FB | 	rdlong	result1, fp wz
2a328     08 4E 85 F1 | 	sub	fp, #8
2a32c     C8 00 90 5D |  if_ne	jmp	#LR__4253
2a330     70 4E 05 F1 | 	add	fp, #112
2a334     A7 12 02 FB | 	rdlong	arg01, fp
2a338     48 4E 85 F1 | 	sub	fp, #72
2a33c     A7 14 02 FB | 	rdlong	arg02, fp
2a340     28 4E 85 F1 | 	sub	fp, #40
2a344     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2a348     6C 4E 05 F1 | 	add	fp, #108
2a34c     A7 FA 61 FC | 	wrlong	result1, fp
2a350     5A 4E 85 F1 | 	sub	fp, #90
2a354     A7 FA C1 FA | 	rdbyte	result1, fp
2a358     12 4E 85 F1 | 	sub	fp, #18
2a35c     10 FA CD F7 | 	test	result1, #16 wz
2a360     94 00 90 AD |  if_e	jmp	#LR__4252
2a364     70 4E 05 F1 | 	add	fp, #112
2a368     A7 FA 01 FB | 	rdlong	result1, fp
2a36c     34 4E 85 F1 | 	sub	fp, #52
2a370     A7 FA 61 FC | 	wrlong	result1, fp
2a374     30 4E 05 F1 | 	add	fp, #48
2a378     A7 16 02 FB | 	rdlong	arg03, fp
2a37c     28 4E 85 F1 | 	sub	fp, #40
2a380     A7 16 62 FC | 	wrlong	arg03, fp
2a384     08 4E 85 F1 | 	sub	fp, #8
2a388     A7 12 02 F6 | 	mov	arg01, fp
2a38c     3C 4E 85 F1 | 	sub	fp, #60
2a390     00 14 06 F6 | 	mov	arg02, #0
2a394     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2a398     08 4E 05 F1 | 	add	fp, #8
2a39c     A7 FA 61 FC | 	wrlong	result1, fp
2a3a0     08 4E 85 F1 | 	sub	fp, #8
2a3a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3a8     4C 00 90 5D |  if_ne	jmp	#LR__4251
2a3ac     3C 4E 05 F1 | 	add	fp, #60
2a3b0     A7 12 02 F6 | 	mov	arg01, fp
2a3b4     3C 4E 85 F1 | 	sub	fp, #60
2a3b8     00 14 06 F6 | 	mov	arg02, #0
2a3bc     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2a3c0     08 4E 05 F1 | 	add	fp, #8
2a3c4     A7 FA 61 FC | 	wrlong	result1, fp
2a3c8     00 FA 4D F2 | 	cmps	result1, #0 wz
2a3cc     08 4E 85 F1 | 	sub	fp, #8
2a3d0     08 4E 05 A1 |  if_e	add	fp, #8
2a3d4     A7 0E 68 AC |  if_e	wrlong	#7, fp
2a3d8     08 4E 85 A1 |  if_e	sub	fp, #8
2a3dc     08 4E 05 F1 | 	add	fp, #8
2a3e0     A7 FA 01 FB | 	rdlong	result1, fp
2a3e4     08 4E 85 F1 | 	sub	fp, #8
2a3e8     04 FA 0D F2 | 	cmp	result1, #4 wz
2a3ec     08 4E 05 A1 |  if_e	add	fp, #8
2a3f0     A7 00 68 AC |  if_e	wrlong	#0, fp
2a3f4     08 4E 85 A1 |  if_e	sub	fp, #8
2a3f8                 | LR__4251
2a3f8                 | LR__4252
2a3f8                 | LR__4253
2a3f8     08 4E 05 F1 | 	add	fp, #8
2a3fc     A7 FA 09 FB | 	rdlong	result1, fp wz
2a400     08 4E 85 F1 | 	sub	fp, #8
2a404     88 00 90 5D |  if_ne	jmp	#LR__4256
2a408     0C 4E 05 F1 | 	add	fp, #12
2a40c     A7 12 02 F6 | 	mov	arg01, fp
2a410     0C 4E 85 F1 | 	sub	fp, #12
2a414     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2a418     08 4E 05 F1 | 	add	fp, #8
2a41c     A7 FA 61 FC | 	wrlong	result1, fp
2a420     08 4E 85 F1 | 	sub	fp, #8
2a424     00 FA 0D F2 | 	cmp	result1, #0 wz
2a428     38 00 90 5D |  if_ne	jmp	#LR__4254
2a42c     6C 4E 05 F1 | 	add	fp, #108
2a430     A7 FA 09 FB | 	rdlong	result1, fp wz
2a434     6C 4E 85 F1 | 	sub	fp, #108
2a438     28 00 90 AD |  if_e	jmp	#LR__4254
2a43c     0C 4E 05 F1 | 	add	fp, #12
2a440     A7 12 02 F6 | 	mov	arg01, fp
2a444     60 4E 05 F1 | 	add	fp, #96
2a448     A7 14 02 FB | 	rdlong	arg02, fp
2a44c     6C 4E 85 F1 | 	sub	fp, #108
2a450     00 16 06 F6 | 	mov	arg03, #0
2a454     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2a458     08 4E 05 F1 | 	add	fp, #8
2a45c     A7 FA 61 FC | 	wrlong	result1, fp
2a460     08 4E 85 F1 | 	sub	fp, #8
2a464                 | LR__4254
2a464     08 4E 05 F1 | 	add	fp, #8
2a468     A7 FA 09 FB | 	rdlong	result1, fp wz
2a46c     08 4E 85 F1 | 	sub	fp, #8
2a470     1C 00 90 5D |  if_ne	jmp	#LR__4255
2a474     70 4E 05 F1 | 	add	fp, #112
2a478     A7 12 02 FB | 	rdlong	arg01, fp
2a47c     70 4E 85 F1 | 	sub	fp, #112
2a480     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2a484     08 4E 05 F1 | 	add	fp, #8
2a488     A7 FA 61 FC | 	wrlong	result1, fp
2a48c     08 4E 85 F1 | 	sub	fp, #8
2a490                 | LR__4255
2a490                 | LR__4256
2a490                 | LR__4257
2a490                 | LR__4258
2a490                 | ' 			}
2a490                 | ' 		}
2a490                 | ' 		;
2a490                 | ' 	}
2a490                 | ' 
2a490                 | ' 	return res ;
2a490     08 4E 05 F1 | 	add	fp, #8
2a494     A7 FA 01 FB | 	rdlong	result1, fp
2a498     08 4E 85 F1 | 	sub	fp, #8
2a49c     A7 F0 03 F6 | 	mov	ptra, fp
2a4a0     B2 00 A0 FD | 	call	#popregs_
2a4a4                 | _fatfs_cc_f_unlink_ret
2a4a4     2D 00 64 FD | 	ret
2a4a8                 | 
2a4a8                 | _fatfs_cc_f_mkdir
2a4a8     00 4A 05 F6 | 	mov	COUNT_, #0
2a4ac     A8 00 A0 FD | 	call	#pushregs_
2a4b0     5C F0 07 F1 | 	add	ptra, #92
2a4b4     04 4E 05 F1 | 	add	fp, #4
2a4b8     A7 12 62 FC | 	wrlong	arg01, fp
2a4bc     A7 12 02 F6 | 	mov	arg01, fp
2a4c0     48 4E 05 F1 | 	add	fp, #72
2a4c4     A7 14 02 F6 | 	mov	arg02, fp
2a4c8     4C 4E 85 F1 | 	sub	fp, #76
2a4cc     02 16 06 F6 | 	mov	arg03, #2
2a4d0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2a4d4     08 4E 05 F1 | 	add	fp, #8
2a4d8     A7 FA 61 FC | 	wrlong	result1, fp
2a4dc     08 4E 85 F1 | 	sub	fp, #8
2a4e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a4e4     C4 02 90 5D |  if_ne	jmp	#LR__4265
2a4e8     4C 4E 05 F1 | 	add	fp, #76
2a4ec     A7 16 02 FB | 	rdlong	arg03, fp
2a4f0     40 4E 85 F1 | 	sub	fp, #64
2a4f4     A7 16 62 FC | 	wrlong	arg03, fp
2a4f8     A7 12 02 F6 | 	mov	arg01, fp
2a4fc     08 4E 85 F1 | 	sub	fp, #8
2a500     A7 14 02 FB | 	rdlong	arg02, fp
2a504     04 4E 85 F1 | 	sub	fp, #4
2a508     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2a50c     08 4E 05 F1 | 	add	fp, #8
2a510     A7 FA 61 FC | 	wrlong	result1, fp
2a514     00 FA 4D F2 | 	cmps	result1, #0 wz
2a518     08 4E 85 F1 | 	sub	fp, #8
2a51c     08 4E 05 A1 |  if_e	add	fp, #8
2a520     A7 10 68 AC |  if_e	wrlong	#8, fp
2a524     08 4E 85 A1 |  if_e	sub	fp, #8
2a528     08 4E 05 F1 | 	add	fp, #8
2a52c     A7 FA 01 FB | 	rdlong	result1, fp
2a530     08 4E 85 F1 | 	sub	fp, #8
2a534     04 FA 0D F2 | 	cmp	result1, #4 wz
2a538     70 02 90 5D |  if_ne	jmp	#LR__4264
2a53c     4C 4E 05 F1 | 	add	fp, #76
2a540     A7 16 02 FB | 	rdlong	arg03, fp
2a544     10 4E 85 F1 | 	sub	fp, #16
2a548     A7 16 62 FC | 	wrlong	arg03, fp
2a54c     A7 12 02 F6 | 	mov	arg01, fp
2a550     3C 4E 85 F1 | 	sub	fp, #60
2a554     00 14 06 F6 | 	mov	arg02, #0
2a558     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2a55c     50 4E 05 F1 | 	add	fp, #80
2a560     A7 FA 61 FC | 	wrlong	result1, fp
2a564     48 4E 85 F1 | 	sub	fp, #72
2a568     A7 00 68 FC | 	wrlong	#0, fp
2a56c     48 4E 05 F1 | 	add	fp, #72
2a570     A7 FA 09 FB | 	rdlong	result1, fp wz
2a574     50 4E 85 F1 | 	sub	fp, #80
2a578     08 4E 05 A1 |  if_e	add	fp, #8
2a57c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2a580     08 4E 85 A1 |  if_e	sub	fp, #8
2a584     50 4E 05 F1 | 	add	fp, #80
2a588     A7 FA 01 FB | 	rdlong	result1, fp
2a58c     50 4E 85 F1 | 	sub	fp, #80
2a590     01 FA 0D F2 | 	cmp	result1, #1 wz
2a594     08 4E 05 A1 |  if_e	add	fp, #8
2a598     A7 04 68 AC |  if_e	wrlong	#2, fp
2a59c     08 4E 85 A1 |  if_e	sub	fp, #8
2a5a0     50 4E 05 F1 | 	add	fp, #80
2a5a4     A7 16 02 FB | 	rdlong	arg03, fp
2a5a8     50 4E 85 F1 | 	sub	fp, #80
2a5ac     FF FF 7F FF 
2a5b0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2a5b4     08 4E 05 A1 |  if_e	add	fp, #8
2a5b8     A7 02 68 AC |  if_e	wrlong	#1, fp
2a5bc     08 4E 85 A1 |  if_e	sub	fp, #8
2a5c0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2a5c4     58 4E 05 F1 | 	add	fp, #88
2a5c8     A7 FA 61 FC | 	wrlong	result1, fp
2a5cc     50 4E 85 F1 | 	sub	fp, #80
2a5d0     A7 FA 09 FB | 	rdlong	result1, fp wz
2a5d4     08 4E 85 F1 | 	sub	fp, #8
2a5d8     1C 01 90 5D |  if_ne	jmp	#LR__4261
2a5dc     4C 4E 05 F1 | 	add	fp, #76
2a5e0     A7 12 02 FB | 	rdlong	arg01, fp
2a5e4     04 4E 05 F1 | 	add	fp, #4
2a5e8     A7 14 02 FB | 	rdlong	arg02, fp
2a5ec     50 4E 85 F1 | 	sub	fp, #80
2a5f0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2a5f4     08 4E 05 F1 | 	add	fp, #8
2a5f8     A7 FA 61 FC | 	wrlong	result1, fp
2a5fc     00 FA 4D F2 | 	cmps	result1, #0 wz
2a600     08 4E 85 F1 | 	sub	fp, #8
2a604     F0 00 90 5D |  if_ne	jmp	#LR__4260
2a608     4C 4E 05 F1 | 	add	fp, #76
2a60c     A7 12 02 FB | 	rdlong	arg01, fp
2a610     4C 4E 85 F1 | 	sub	fp, #76
2a614     34 12 06 F1 | 	add	arg01, #52
2a618     20 14 06 F6 | 	mov	arg02, #32
2a61c     0B 16 06 F6 | 	mov	arg03, #11
2a620     98 00 A0 FD | 	call	#\builtin_bytefill_
2a624     4C 4E 05 F1 | 	add	fp, #76
2a628     A7 FA 01 FB | 	rdlong	result1, fp
2a62c     34 FA 05 F1 | 	add	result1, #52
2a630     FD 5C 48 FC | 	wrbyte	#46, result1
2a634     A7 16 02 FB | 	rdlong	arg03, fp
2a638     3F 16 06 F1 | 	add	arg03, #63
2a63c     0B 21 48 FC | 	wrbyte	#16, arg03
2a640     A7 12 02 FB | 	rdlong	arg01, fp
2a644     4A 12 06 F1 | 	add	arg01, #74
2a648     0C 4E 05 F1 | 	add	fp, #12
2a64c     A7 14 02 FB | 	rdlong	arg02, fp
2a650     09 15 62 FC | 	wrlong	arg02, arg01
2a654     0C 4E 85 F1 | 	sub	fp, #12
2a658     A7 14 02 FB | 	rdlong	arg02, fp
2a65c     0A 13 02 F6 | 	mov	arg01, arg02
2a660     34 14 06 F1 | 	add	arg02, #52
2a664     04 4E 05 F1 | 	add	fp, #4
2a668     A7 16 02 FB | 	rdlong	arg03, fp
2a66c     50 4E 85 F1 | 	sub	fp, #80
2a670     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2a674     4C 4E 05 F1 | 	add	fp, #76
2a678     A7 14 02 FB | 	rdlong	arg02, fp
2a67c     0A 13 02 F6 | 	mov	arg01, arg02
2a680     54 12 06 F1 | 	add	arg01, #84
2a684     4C 4E 85 F1 | 	sub	fp, #76
2a688     34 14 06 F1 | 	add	arg02, #52
2a68c     20 16 06 F6 | 	mov	arg03, #32
2a690     D8 2C BF FD | 	call	#__system____builtin_memmove
2a694     4C 4E 05 F1 | 	add	fp, #76
2a698     A7 16 02 FB | 	rdlong	arg03, fp
2a69c     55 16 06 F1 | 	add	arg03, #85
2a6a0     0B 5D 48 FC | 	wrbyte	#46, arg03
2a6a4     38 4E 85 F1 | 	sub	fp, #56
2a6a8     A7 16 02 FB | 	rdlong	arg03, fp
2a6ac     40 4E 05 F1 | 	add	fp, #64
2a6b0     A7 16 62 FC | 	wrlong	arg03, fp
2a6b4     08 4E 85 F1 | 	sub	fp, #8
2a6b8     A7 14 02 FB | 	rdlong	arg02, fp
2a6bc     0A 13 02 F6 | 	mov	arg01, arg02
2a6c0     54 14 06 F1 | 	add	arg02, #84
2a6c4     4C 4E 85 F1 | 	sub	fp, #76
2a6c8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2a6cc     4C 4E 05 F1 | 	add	fp, #76
2a6d0     A7 16 02 FB | 	rdlong	arg03, fp
2a6d4     03 16 06 F1 | 	add	arg03, #3
2a6d8     0B 03 48 FC | 	wrbyte	#1, arg03
2a6dc     40 4E 85 F1 | 	sub	fp, #64
2a6e0     A7 12 02 F6 | 	mov	arg01, fp
2a6e4     0C 4E 85 F1 | 	sub	fp, #12
2a6e8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2a6ec     08 4E 05 F1 | 	add	fp, #8
2a6f0     A7 FA 61 FC | 	wrlong	result1, fp
2a6f4     08 4E 85 F1 | 	sub	fp, #8
2a6f8                 | LR__4260
2a6f8                 | LR__4261
2a6f8     08 4E 05 F1 | 	add	fp, #8
2a6fc     A7 FA 09 FB | 	rdlong	result1, fp wz
2a700     08 4E 85 F1 | 	sub	fp, #8
2a704     88 00 90 5D |  if_ne	jmp	#LR__4262
2a708     28 4E 05 F1 | 	add	fp, #40
2a70c     A7 12 02 FB | 	rdlong	arg01, fp
2a710     16 12 06 F1 | 	add	arg01, #22
2a714     30 4E 05 F1 | 	add	fp, #48
2a718     A7 14 02 FB | 	rdlong	arg02, fp
2a71c     09 15 62 FC | 	wrlong	arg02, arg01
2a720     0C 4E 85 F1 | 	sub	fp, #12
2a724     A7 12 02 FB | 	rdlong	arg01, fp
2a728     24 4E 85 F1 | 	sub	fp, #36
2a72c     A7 14 02 FB | 	rdlong	arg02, fp
2a730     28 4E 05 F1 | 	add	fp, #40
2a734     A7 16 02 FB | 	rdlong	arg03, fp
2a738     50 4E 85 F1 | 	sub	fp, #80
2a73c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2a740     28 4E 05 F1 | 	add	fp, #40
2a744     A7 FA 01 FB | 	rdlong	result1, fp
2a748     0B FA 05 F1 | 	add	result1, #11
2a74c     FD 20 48 FC | 	wrbyte	#16, result1
2a750     24 4E 05 F1 | 	add	fp, #36
2a754     A7 FA 01 FB | 	rdlong	result1, fp
2a758     03 FA 05 F1 | 	add	result1, #3
2a75c     FD 02 48 FC | 	wrbyte	#1, result1
2a760     44 4E 85 F1 | 	sub	fp, #68
2a764     A7 FA 09 FB | 	rdlong	result1, fp wz
2a768     08 4E 85 F1 | 	sub	fp, #8
2a76c     3C 00 90 5D |  if_ne	jmp	#LR__4263
2a770     4C 4E 05 F1 | 	add	fp, #76
2a774     A7 12 02 FB | 	rdlong	arg01, fp
2a778     4C 4E 85 F1 | 	sub	fp, #76
2a77c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2a780     08 4E 05 F1 | 	add	fp, #8
2a784     A7 FA 61 FC | 	wrlong	result1, fp
2a788     08 4E 85 F1 | 	sub	fp, #8
2a78c     1C 00 90 FD | 	jmp	#LR__4263
2a790                 | LR__4262
2a790     3C 4E 05 F1 | 	add	fp, #60
2a794     A7 12 02 F6 | 	mov	arg01, fp
2a798     14 4E 05 F1 | 	add	fp, #20
2a79c     A7 14 02 FB | 	rdlong	arg02, fp
2a7a0     50 4E 85 F1 | 	sub	fp, #80
2a7a4     00 16 06 F6 | 	mov	arg03, #0
2a7a8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2a7ac                 | LR__4263
2a7ac                 | LR__4264
2a7ac                 | LR__4265
2a7ac                 | ' 				remove_chain(&sobj, dcl, 0);
2a7ac                 | ' 			}
2a7ac                 | ' 		}
2a7ac                 | ' 		;
2a7ac                 | ' 	}
2a7ac                 | ' 
2a7ac                 | ' 	return res ;
2a7ac     08 4E 05 F1 | 	add	fp, #8
2a7b0     A7 FA 01 FB | 	rdlong	result1, fp
2a7b4     08 4E 85 F1 | 	sub	fp, #8
2a7b8     A7 F0 03 F6 | 	mov	ptra, fp
2a7bc     B2 00 A0 FD | 	call	#popregs_
2a7c0                 | _fatfs_cc_f_mkdir_ret
2a7c0     2D 00 64 FD | 	ret
2a7c4                 | 
2a7c4                 | _fatfs_cc_f_rename
2a7c4     01 4A 05 F6 | 	mov	COUNT_, #1
2a7c8     A8 00 A0 FD | 	call	#pushregs_
2a7cc     9C F0 07 F1 | 	add	ptra, #156
2a7d0     04 4E 05 F1 | 	add	fp, #4
2a7d4     A7 12 62 FC | 	wrlong	arg01, fp
2a7d8     04 4E 05 F1 | 	add	fp, #4
2a7dc     A7 14 62 FC | 	wrlong	arg02, fp
2a7e0     A7 12 02 F6 | 	mov	arg01, fp
2a7e4     08 4E 85 F1 | 	sub	fp, #8
2a7e8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2a7ec     04 4E 05 F1 | 	add	fp, #4
2a7f0     A7 12 02 F6 | 	mov	arg01, fp
2a7f4     6C 4E 05 F1 | 	add	fp, #108
2a7f8     A7 14 02 F6 | 	mov	arg02, fp
2a7fc     70 4E 85 F1 | 	sub	fp, #112
2a800     02 16 06 F6 | 	mov	arg03, #2
2a804     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2a808     0C 4E 05 F1 | 	add	fp, #12
2a80c     A7 FA 61 FC | 	wrlong	result1, fp
2a810     0C 4E 85 F1 | 	sub	fp, #12
2a814     00 FA 0D F2 | 	cmp	result1, #0 wz
2a818     44 03 90 5D |  if_ne	jmp	#LR__4283
2a81c     70 4E 05 F1 | 	add	fp, #112
2a820     A7 16 02 FB | 	rdlong	arg03, fp
2a824     60 4E 85 F1 | 	sub	fp, #96
2a828     A7 16 62 FC | 	wrlong	arg03, fp
2a82c     A7 12 02 F6 | 	mov	arg01, fp
2a830     0C 4E 85 F1 | 	sub	fp, #12
2a834     A7 14 02 FB | 	rdlong	arg02, fp
2a838     04 4E 85 F1 | 	sub	fp, #4
2a83c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2a840     0C 4E 05 F1 | 	add	fp, #12
2a844     A7 FA 61 FC | 	wrlong	result1, fp
2a848     00 FA 4D F2 | 	cmps	result1, #0 wz
2a84c     0C 4E 85 F1 | 	sub	fp, #12
2a850     1C 00 90 5D |  if_ne	jmp	#LR__4270
2a854     3B 4E 05 F1 | 	add	fp, #59
2a858     A7 FA C1 FA | 	rdbyte	result1, fp
2a85c     3B 4E 85 F1 | 	sub	fp, #59
2a860     A0 FA CD F7 | 	test	result1, #160 wz
2a864     0C 4E 05 51 |  if_ne	add	fp, #12
2a868     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2a86c     0C 4E 85 51 |  if_ne	sub	fp, #12
2a870                 | LR__4270
2a870     0C 4E 05 F1 | 	add	fp, #12
2a874     A7 1E 0A FB | 	rdlong	local01, fp wz
2a878     0C 4E 85 F1 | 	sub	fp, #12
2a87c     E0 02 90 5D |  if_ne	jmp	#LR__4282
2a880     74 4E 05 F1 | 	add	fp, #116
2a884     A7 12 02 F6 | 	mov	arg01, fp
2a888     48 4E 85 F1 | 	sub	fp, #72
2a88c     A7 14 02 FB | 	rdlong	arg02, fp
2a890     2C 4E 85 F1 | 	sub	fp, #44
2a894     20 16 06 F6 | 	mov	arg03, #32
2a898     D0 2A BF FD | 	call	#__system____builtin_memmove
2a89c     40 4E 05 F1 | 	add	fp, #64
2a8a0     A7 12 02 F6 | 	mov	arg01, fp
2a8a4     30 4E 85 F1 | 	sub	fp, #48
2a8a8     A7 14 02 F6 | 	mov	arg02, fp
2a8ac     10 4E 85 F1 | 	sub	fp, #16
2a8b0     30 16 06 F6 | 	mov	arg03, #48
2a8b4     B4 2A BF FD | 	call	#__system____builtin_memmove
2a8b8     40 4E 05 F1 | 	add	fp, #64
2a8bc     A7 12 02 F6 | 	mov	arg01, fp
2a8c0     38 4E 85 F1 | 	sub	fp, #56
2a8c4     A7 14 02 FB | 	rdlong	arg02, fp
2a8c8     08 4E 85 F1 | 	sub	fp, #8
2a8cc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2a8d0     0C 4E 05 F1 | 	add	fp, #12
2a8d4     A7 FA 61 FC | 	wrlong	result1, fp
2a8d8     0C 4E 85 F1 | 	sub	fp, #12
2a8dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8e0     4C 00 90 5D |  if_ne	jmp	#LR__4273
2a8e4     48 4E 05 F1 | 	add	fp, #72
2a8e8     A7 FA 01 FB | 	rdlong	result1, fp
2a8ec     30 4E 85 F1 | 	sub	fp, #48
2a8f0     A7 16 02 FB | 	rdlong	arg03, fp
2a8f4     18 4E 85 F1 | 	sub	fp, #24
2a8f8     0B FB 09 F2 | 	cmp	result1, arg03 wz
2a8fc     20 00 90 5D |  if_ne	jmp	#LR__4271
2a900     50 4E 05 F1 | 	add	fp, #80
2a904     A7 FA 01 FB | 	rdlong	result1, fp
2a908     30 4E 85 F1 | 	sub	fp, #48
2a90c     A7 16 02 FB | 	rdlong	arg03, fp
2a910     20 4E 85 F1 | 	sub	fp, #32
2a914     0B FB 09 F2 | 	cmp	result1, arg03 wz
2a918     04 1E 06 A6 |  if_e	mov	local01, #4
2a91c     04 00 90 AD |  if_e	jmp	#LR__4272
2a920                 | LR__4271
2a920     08 1E 06 F6 | 	mov	local01, #8
2a924                 | LR__4272
2a924     0C 4E 05 F1 | 	add	fp, #12
2a928     A7 1E 62 FC | 	wrlong	local01, fp
2a92c     0C 4E 85 F1 | 	sub	fp, #12
2a930                 | LR__4273
2a930     0C 4E 05 F1 | 	add	fp, #12
2a934     A7 1E 02 FB | 	rdlong	local01, fp
2a938     0C 4E 85 F1 | 	sub	fp, #12
2a93c     04 1E 0E F2 | 	cmp	local01, #4 wz
2a940     CC 01 90 5D |  if_ne	jmp	#LR__4279
2a944     40 4E 05 F1 | 	add	fp, #64
2a948     A7 12 02 F6 | 	mov	arg01, fp
2a94c     40 4E 85 F1 | 	sub	fp, #64
2a950     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2a954     0C 4E 05 F1 | 	add	fp, #12
2a958     A7 FA 61 FC | 	wrlong	result1, fp
2a95c     0C 4E 85 F1 | 	sub	fp, #12
2a960     00 FA 0D F2 | 	cmp	result1, #0 wz
2a964     A8 01 90 5D |  if_ne	jmp	#LR__4278
2a968     5C 4E 05 F1 | 	add	fp, #92
2a96c     A7 12 02 FB | 	rdlong	arg01, fp
2a970     38 4E 05 F1 | 	add	fp, #56
2a974     A7 12 62 FC | 	wrlong	arg01, fp
2a978     0D 12 06 F1 | 	add	arg01, #13
2a97c     20 4E 85 F1 | 	sub	fp, #32
2a980     A7 14 02 F6 | 	mov	arg02, fp
2a984     74 4E 85 F1 | 	sub	fp, #116
2a988     0D 14 06 F1 | 	add	arg02, #13
2a98c     13 16 06 F6 | 	mov	arg03, #19
2a990     D8 29 BF FD | 	call	#__system____builtin_memmove
2a994     94 4E 05 F1 | 	add	fp, #148
2a998     A7 1E 02 FB | 	rdlong	local01, fp
2a99c     15 4E 85 F1 | 	sub	fp, #21
2a9a0     A7 FA C1 FA | 	rdbyte	result1, fp
2a9a4     0B 1E 06 F1 | 	add	local01, #11
2a9a8     0F FB 41 FC | 	wrbyte	result1, local01
2a9ac     15 4E 05 F1 | 	add	fp, #21
2a9b0     A7 1E 02 FB | 	rdlong	local01, fp
2a9b4     94 4E 85 F1 | 	sub	fp, #148
2a9b8     0B 1E 06 F1 | 	add	local01, #11
2a9bc     0F 1F C2 FA | 	rdbyte	local01, local01
2a9c0     10 1E CE F7 | 	test	local01, #16 wz
2a9c4     24 00 90 5D |  if_ne	jmp	#LR__4274
2a9c8     94 4E 05 F1 | 	add	fp, #148
2a9cc     A7 FA 01 FB | 	rdlong	result1, fp
2a9d0     FD 1E 02 F6 | 	mov	local01, result1
2a9d4     94 4E 85 F1 | 	sub	fp, #148
2a9d8     0B FA 05 F1 | 	add	result1, #11
2a9dc     FD FA C1 FA | 	rdbyte	result1, result1
2a9e0     20 FA 45 F5 | 	or	result1, #32
2a9e4     0B 1E 06 F1 | 	add	local01, #11
2a9e8     0F FB 41 FC | 	wrbyte	result1, local01
2a9ec                 | LR__4274
2a9ec     70 4E 05 F1 | 	add	fp, #112
2a9f0     A7 1E 02 FB | 	rdlong	local01, fp
2a9f4     03 1E 06 F1 | 	add	local01, #3
2a9f8     0F 03 48 FC | 	wrbyte	#1, local01
2a9fc     24 4E 05 F1 | 	add	fp, #36
2aa00     A7 1E 02 FB | 	rdlong	local01, fp
2aa04     94 4E 85 F1 | 	sub	fp, #148
2aa08     0B 1E 06 F1 | 	add	local01, #11
2aa0c     0F 1F C2 FA | 	rdbyte	local01, local01
2aa10     10 1E CE F7 | 	test	local01, #16 wz
2aa14     F8 00 90 AD |  if_e	jmp	#LR__4277
2aa18     18 4E 05 F1 | 	add	fp, #24
2aa1c     A7 16 02 FB | 	rdlong	arg03, fp
2aa20     30 4E 05 F1 | 	add	fp, #48
2aa24     A7 1E 02 FB | 	rdlong	local01, fp
2aa28     48 4E 85 F1 | 	sub	fp, #72
2aa2c     0F 17 0A F2 | 	cmp	arg03, local01 wz
2aa30     DC 00 90 AD |  if_e	jmp	#LR__4277
2aa34     70 4E 05 F1 | 	add	fp, #112
2aa38     A7 12 02 FB | 	rdlong	arg01, fp
2aa3c     09 1F 02 F6 | 	mov	local01, arg01
2aa40     24 4E 05 F1 | 	add	fp, #36
2aa44     A7 14 02 FB | 	rdlong	arg02, fp
2aa48     94 4E 85 F1 | 	sub	fp, #148
2aa4c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2aa50     FD 14 02 F6 | 	mov	arg02, result1
2aa54     0F 13 02 F6 | 	mov	arg01, local01
2aa58     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2aa5c     98 4E 05 F1 | 	add	fp, #152
2aa60     A7 FA 61 FC | 	wrlong	result1, fp
2aa64     00 FA 4D F2 | 	cmps	result1, #0 wz
2aa68     98 4E 85 F1 | 	sub	fp, #152
2aa6c     0C 4E 05 A1 |  if_e	add	fp, #12
2aa70     A7 04 68 AC |  if_e	wrlong	#2, fp
2aa74     0C 4E 85 A1 |  if_e	sub	fp, #12
2aa78     94 00 90 AD |  if_e	jmp	#LR__4276
2aa7c     70 4E 05 F1 | 	add	fp, #112
2aa80     A7 12 02 FB | 	rdlong	arg01, fp
2aa84     28 4E 05 F1 | 	add	fp, #40
2aa88     A7 14 02 FB | 	rdlong	arg02, fp
2aa8c     98 4E 85 F1 | 	sub	fp, #152
2aa90     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2aa94     0C 4E 05 F1 | 	add	fp, #12
2aa98     A7 FA 61 FC | 	wrlong	result1, fp
2aa9c     64 4E 05 F1 | 	add	fp, #100
2aaa0     A7 1E 02 FB | 	rdlong	local01, fp
2aaa4     54 1E 06 F1 | 	add	local01, #84
2aaa8     24 4E 05 F1 | 	add	fp, #36
2aaac     A7 1E 62 FC | 	wrlong	local01, fp
2aab0     88 4E 85 F1 | 	sub	fp, #136
2aab4     A7 1E 0A FB | 	rdlong	local01, fp wz
2aab8     0C 4E 85 F1 | 	sub	fp, #12
2aabc     50 00 90 5D |  if_ne	jmp	#LR__4275
2aac0     94 4E 05 F1 | 	add	fp, #148
2aac4     A7 1E 02 FB | 	rdlong	local01, fp
2aac8     94 4E 85 F1 | 	sub	fp, #148
2aacc     01 1E 06 F1 | 	add	local01, #1
2aad0     0F 1F C2 FA | 	rdbyte	local01, local01
2aad4     2E 1E 0E F2 | 	cmp	local01, #46 wz
2aad8     34 00 90 5D |  if_ne	jmp	#LR__4275
2aadc     70 4E 05 F1 | 	add	fp, #112
2aae0     A7 12 02 FB | 	rdlong	arg01, fp
2aae4     24 4E 05 F1 | 	add	fp, #36
2aae8     A7 14 02 FB | 	rdlong	arg02, fp
2aaec     4C 4E 85 F1 | 	sub	fp, #76
2aaf0     A7 16 02 FB | 	rdlong	arg03, fp
2aaf4     48 4E 85 F1 | 	sub	fp, #72
2aaf8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2aafc     70 4E 05 F1 | 	add	fp, #112
2ab00     A7 1E 02 FB | 	rdlong	local01, fp
2ab04     70 4E 85 F1 | 	sub	fp, #112
2ab08     03 1E 06 F1 | 	add	local01, #3
2ab0c     0F 03 48 FC | 	wrbyte	#1, local01
2ab10                 | LR__4275
2ab10                 | LR__4276
2ab10                 | LR__4277
2ab10                 | LR__4278
2ab10                 | LR__4279
2ab10     0C 4E 05 F1 | 	add	fp, #12
2ab14     A7 1E 0A FB | 	rdlong	local01, fp wz
2ab18     0C 4E 85 F1 | 	sub	fp, #12
2ab1c     40 00 90 5D |  if_ne	jmp	#LR__4281
2ab20     10 4E 05 F1 | 	add	fp, #16
2ab24     A7 12 02 F6 | 	mov	arg01, fp
2ab28     10 4E 85 F1 | 	sub	fp, #16
2ab2c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2ab30     0C 4E 05 F1 | 	add	fp, #12
2ab34     A7 FA 61 FC | 	wrlong	result1, fp
2ab38     0C 4E 85 F1 | 	sub	fp, #12
2ab3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab40     1C 00 90 5D |  if_ne	jmp	#LR__4280
2ab44     70 4E 05 F1 | 	add	fp, #112
2ab48     A7 12 02 FB | 	rdlong	arg01, fp
2ab4c     70 4E 85 F1 | 	sub	fp, #112
2ab50     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2ab54     0C 4E 05 F1 | 	add	fp, #12
2ab58     A7 FA 61 FC | 	wrlong	result1, fp
2ab5c     0C 4E 85 F1 | 	sub	fp, #12
2ab60                 | LR__4280
2ab60                 | LR__4281
2ab60                 | LR__4282
2ab60                 | LR__4283
2ab60                 | ' 					res = sync_fs(fs);
2ab60                 | ' 				}
2ab60                 | ' 			}
2ab60                 | ' 
2ab60                 | ' 		}
2ab60                 | ' 		;
2ab60                 | ' 	}
2ab60                 | ' 
2ab60                 | ' 	return res ;
2ab60     0C 4E 05 F1 | 	add	fp, #12
2ab64     A7 FA 01 FB | 	rdlong	result1, fp
2ab68     0C 4E 85 F1 | 	sub	fp, #12
2ab6c     A7 F0 03 F6 | 	mov	ptra, fp
2ab70     B2 00 A0 FD | 	call	#popregs_
2ab74                 | _fatfs_cc_f_rename_ret
2ab74     2D 00 64 FD | 	ret
2ab78                 | 
2ab78                 | _fatfs_cc_time
2ab78     00 4A 05 F6 | 	mov	COUNT_, #0
2ab7c     A8 00 A0 FD | 	call	#pushregs_
2ab80     14 F0 07 F1 | 	add	ptra, #20
2ab84     04 4E 05 F1 | 	add	fp, #4
2ab88     A7 12 62 FC | 	wrlong	arg01, fp
2ab8c     04 4E 05 F1 | 	add	fp, #4
2ab90     A7 12 02 F6 | 	mov	arg01, fp
2ab94     08 4E 85 F1 | 	sub	fp, #8
2ab98     00 14 06 F6 | 	mov	arg02, #0
2ab9c     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2aba0     08 4E 05 F1 | 	add	fp, #8
2aba4     A7 FA 01 FB | 	rdlong	result1, fp
2aba8     08 4E 05 F1 | 	add	fp, #8
2abac     A7 FA 61 FC | 	wrlong	result1, fp
2abb0     0C 4E 85 F1 | 	sub	fp, #12
2abb4     A7 FA 09 FB | 	rdlong	result1, fp wz
2abb8     04 4E 85 F1 | 	sub	fp, #4
2abbc     18 00 90 AD |  if_e	jmp	#LR__4290
2abc0     04 4E 05 F1 | 	add	fp, #4
2abc4     A7 FA 01 FB | 	rdlong	result1, fp
2abc8     0C 4E 05 F1 | 	add	fp, #12
2abcc     A7 14 02 FB | 	rdlong	arg02, fp
2abd0     10 4E 85 F1 | 	sub	fp, #16
2abd4     FD 14 62 FC | 	wrlong	arg02, result1
2abd8                 | LR__4290
2abd8                 | '         *tp = now;
2abd8                 | '     return now;
2abd8     10 4E 05 F1 | 	add	fp, #16
2abdc     A7 FA 01 FB | 	rdlong	result1, fp
2abe0     10 4E 85 F1 | 	sub	fp, #16
2abe4     A7 F0 03 F6 | 	mov	ptra, fp
2abe8     B2 00 A0 FD | 	call	#popregs_
2abec                 | _fatfs_cc_time_ret
2abec     2D 00 64 FD | 	ret
2abf0                 | 
2abf0                 | _fatfs_cc_mktime
2abf0     06 4A 05 F6 | 	mov	COUNT_, #6
2abf4     A8 00 A0 FD | 	call	#pushregs_
2abf8     09 1F 02 F6 | 	mov	local01, arg01
2abfc     14 1E 06 F1 | 	add	local01, #20
2ac00     0F 13 02 FB | 	rdlong	arg01, local01
2ac04     14 1E 86 F1 | 	sub	local01, #20
2ac08     46 12 56 F2 | 	cmps	arg01, #70 wc
2ac0c                 | '                 return (time_t) -1;
2ac0c     01 FA 65 C6 |  if_b	neg	result1, #1
2ac10     7C 01 90 CD |  if_b	jmp	#LR__4304
2ac14     03 00 00 FF 
2ac18     6C 21 06 F6 | 	mov	local02, ##1900
2ac1c     14 1E 06 F1 | 	add	local01, #20
2ac20     0F FB 01 FB | 	rdlong	result1, local01
2ac24     FD 20 02 F1 | 	add	local02, result1
2ac28     08 1E 86 F1 | 	sub	local01, #8
2ac2c     0F 23 02 FB | 	rdlong	local03, local01
2ac30     01 22 86 F1 | 	sub	local03, #1
2ac34     04 1E 06 F1 | 	add	local01, #4
2ac38     0F 13 02 FB | 	rdlong	arg01, local01
2ac3c     10 1E 86 F1 | 	sub	local01, #16
2ac40     02 12 66 F0 | 	shl	arg01, #2
2ac44     02 00 00 FF 
2ac48     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2ac4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ac50     09 FB 01 FB | 	rdlong	result1, arg01
2ac54     FD 22 02 F1 | 	add	local03, result1
2ac58     10 13 02 F6 | 	mov	arg01, local02
2ac5c     02 00 00 FF 
2ac60     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2ac64     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2ac68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac6c     1C 00 90 AD |  if_e	jmp	#LR__4300
2ac70     00 24 06 F6 | 	mov	local04, #0
2ac74     10 1E 06 F1 | 	add	local01, #16
2ac78     0F FB 01 FB | 	rdlong	result1, local01
2ac7c     10 1E 86 F1 | 	sub	local01, #16
2ac80     02 FA 55 F2 | 	cmps	result1, #2 wc
2ac84     01 24 06 36 |  if_ae	mov	local04, #1
2ac88     04 00 90 FD | 	jmp	#LR__4301
2ac8c                 | LR__4300
2ac8c     00 24 06 F6 | 	mov	local04, #0
2ac90                 | LR__4301
2ac90     04 1E 06 F1 | 	add	local01, #4
2ac94     0F FB 01 FB | 	rdlong	result1, local01
2ac98     04 1E 86 F1 | 	sub	local01, #4
2ac9c     0F 27 02 FB | 	rdlong	local05, local01
2aca0     08 1E 06 F1 | 	add	local01, #8
2aca4     0F 13 02 FB | 	rdlong	arg01, local01
2aca8     07 00 00 FF 
2acac     10 12 06 FD | 	qmul	arg01, ##3600
2acb0     12 23 02 F1 | 	add	local03, local04
2acb4     FD 24 02 F6 | 	mov	local04, result1
2acb8     04 24 66 F0 | 	shl	local04, #4
2acbc     FD 24 82 F1 | 	sub	local04, result1
2acc0     02 24 66 F0 | 	shl	local04, #2
2acc4     12 27 02 F1 | 	add	local05, local04
2acc8     08 1E 86 F1 | 	sub	local01, #8
2accc     18 24 62 FD | 	getqx	local04
2acd0     A8 00 00 FF 
2acd4     80 23 06 FD | 	qmul	local03, ##86400
2acd8     12 27 02 F1 | 	add	local05, local04
2acdc     10 23 02 F6 | 	mov	local03, local02
2ace0     03 00 00 FF 
2ace4     B2 23 86 F1 | 	sub	local03, ##1970
2ace8     18 24 62 FD | 	getqx	local04
2acec     99 F0 00 FF 
2acf0     80 23 06 FD | 	qmul	local03, ##31536000
2acf4     12 27 02 F1 | 	add	local05, local04
2acf8     10 23 02 F6 | 	mov	local03, local02
2acfc     03 00 00 FF 
2ad00     B1 23 86 F1 | 	sub	local03, ##1969
2ad04     11 29 52 F6 | 	abs	local06, local03 wc
2ad08     02 28 46 F0 | 	shr	local06, #2
2ad0c     14 29 82 F6 | 	negc	local06, local06
2ad10     03 00 00 FF 
2ad14     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2ad18     18 24 62 FD | 	getqx	local04
2ad1c     12 27 02 F1 | 	add	local05, local04
2ad20     18 00 90 CD |  if_b	jmp	#LR__4302
2ad24     03 00 00 FF 
2ad28     D0 21 86 F1 | 	sub	local02, ##2000
2ad2c     10 25 52 F6 | 	abs	local04, local02 wc
2ad30     64 24 16 FD | 	qdiv	local04, #100
2ad34     18 24 62 FD | 	getqx	local04
2ad38     12 29 A2 F3 | 	sumnc	local06, local04
2ad3c                 | LR__4302
2ad3c     A8 00 00 FF 
2ad40     80 29 06 FD | 	qmul	local06, ##86400
2ad44     18 28 62 FD | 	getqx	local06
2ad48     14 27 02 F1 | 	add	local05, local06
2ad4c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2ad50     02 00 00 FF 
2ad54     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2ad58     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2ad5c     14 27 02 F1 | 	add	local05, local06
2ad60     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2ad64     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2ad68     02 00 00 FF 
2ad6c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2ad70     01 22 0E F2 | 	cmp	local03, #1 wz
2ad74     14 00 90 5D |  if_ne	jmp	#LR__4303
2ad78     0F 13 02 F6 | 	mov	arg01, local01
2ad7c     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2ad80     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad84     07 00 00 5F 
2ad88     10 26 86 51 |  if_ne	sub	local05, ##3600
2ad8c                 | LR__4303
2ad8c                 | '                 s -=  (3600L) ;
2ad8c                 | ' 
2ad8c                 | '         return s;
2ad8c     13 FB 01 F6 | 	mov	result1, local05
2ad90                 | LR__4304
2ad90     A7 F0 03 F6 | 	mov	ptra, fp
2ad94     B2 00 A0 FD | 	call	#popregs_
2ad98                 | _fatfs_cc_mktime_ret
2ad98     2D 00 64 FD | 	ret
2ad9c                 | 
2ad9c                 | _fatfs_cc__gmtime_r
2ad9c     03 4A 05 F6 | 	mov	COUNT_, #3
2ada0     A8 00 A0 FD | 	call	#pushregs_
2ada4     09 1F 02 FB | 	rdlong	local01, arg01
2ada8     A8 00 00 FF 
2adac     80 1F 16 FD | 	qdiv	local01, ##86400
2adb0     18 FA 61 FD | 	getqx	result1
2adb4     04 FA 05 F1 | 	add	result1, #4
2adb8     07 FA 15 FD | 	qdiv	result1, #7
2adbc     18 14 06 F1 | 	add	arg02, #24
2adc0     D1 7F 27 FF 
2adc4     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2adc8     D1 7F 27 3F 
2adcc     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2add0     03 00 00 3F 
2add4     DC 21 06 36 |  if_ae	mov	local02, ##2012
2add8     03 00 00 CF 
2addc     B2 21 06 C6 |  if_b	mov	local02, ##1970
2ade0                 | ' 	  year = 1970;
2ade0                 | ' 	}
2ade0                 | ' 
2ade0                 | ' 	for(;;) {
2ade0     19 FA 61 FD | 	getqy	result1
2ade4     0A FB 61 FC | 	wrlong	result1, arg02
2ade8     18 14 86 F1 | 	sub	arg02, #24
2adec                 | LR__4310
2adec     10 13 02 F6 | 	mov	arg01, local02
2adf0     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2adf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2adf8     42 F1 00 5F 
2adfc     00 23 06 56 |  if_ne	mov	local03, ##31622400
2ae00     99 F0 00 AF 
2ae04     80 23 06 A6 |  if_e	mov	local03, ##31536000
2ae08     11 1F 12 F2 | 	cmp	local01, local03 wc
2ae0c                 | ' 	    break;
2ae0c     01 20 06 31 |  if_ae	add	local02, #1
2ae10     11 1F 82 31 |  if_ae	sub	local01, local03
2ae14     D4 FF 9F 3D |  if_ae	jmp	#LR__4310
2ae18     A8 00 00 FF 
2ae1c     80 1F 16 FD | 	qdiv	local01, ##86400
2ae20     10 23 02 F6 | 	mov	local03, local02
2ae24     03 00 00 FF 
2ae28     6C 23 86 F1 | 	sub	local03, ##1900
2ae2c     14 14 06 F1 | 	add	arg02, #20
2ae30     0A 23 62 FC | 	wrlong	local03, arg02
2ae34     08 14 06 F1 | 	add	arg02, #8
2ae38     10 13 02 F6 | 	mov	arg01, local02
2ae3c     18 20 62 FD | 	getqx	local02
2ae40     0A 21 62 FC | 	wrlong	local02, arg02
2ae44     1C 14 86 F1 | 	sub	arg02, #28
2ae48     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2ae4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae50     1D 22 06 56 |  if_ne	mov	local03, #29
2ae54     1C 22 06 A6 |  if_e	mov	local03, #28
2ae58     02 00 00 FF 
2ae5c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2ae60     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2ae64     02 00 00 FF 
2ae68     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2ae6c                 | ' 
2ae6c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2ae6c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2ae6c     00 12 06 F6 | 	mov	arg01, #0
2ae70     97 2A 48 FB | 	callpa	#(@LR__4312-@LR__4311)>>2,fcache_load_ptr_
2ae74                 | LR__4311
2ae74     09 23 02 F6 | 	mov	local03, arg01
2ae78     02 22 66 F0 | 	shl	local03, #2
2ae7c     02 00 00 FF 
2ae80     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2ae84     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2ae88     11 23 02 FB | 	rdlong	local03, local03
2ae8c     11 21 52 F2 | 	cmps	local02, local03 wc
2ae90     02 00 00 FF 
2ae94     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2ae98     2C 00 90 CD |  if_b	jmp	#LR__4313
2ae9c     09 23 02 F6 | 	mov	local03, arg01
2aea0     02 22 66 F0 | 	shl	local03, #2
2aea4     02 00 00 FF 
2aea8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2aeac     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2aeb0     11 23 02 FB | 	rdlong	local03, local03
2aeb4     11 21 82 F1 | 	sub	local02, local03
2aeb8     01 12 06 F1 | 	add	arg01, #1
2aebc     02 00 00 FF 
2aec0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2aec4     AC FF 9F FD | 	jmp	#LR__4311
2aec8                 | LR__4312
2aec8                 | LR__4313
2aec8     A8 00 00 FF 
2aecc     80 1F 16 FD | 	qdiv	local01, ##86400
2aed0     10 14 06 F1 | 	add	arg02, #16
2aed4     0A 13 62 FC | 	wrlong	arg01, arg02
2aed8     01 20 06 F1 | 	add	local02, #1
2aedc     04 14 86 F1 | 	sub	arg02, #4
2aee0     0A 21 62 FC | 	wrlong	local02, arg02
2aee4     19 1E 62 FD | 	getqy	local01
2aee8     07 00 00 FF 
2aeec     10 1E 16 FD | 	qdiv	local01, ##3600
2aef0     18 22 62 FD | 	getqx	local03
2aef4     07 00 00 FF 
2aef8     10 1E 16 FD | 	qdiv	local01, ##3600
2aefc     04 14 86 F1 | 	sub	arg02, #4
2af00     0A 23 62 FC | 	wrlong	local03, arg02
2af04     19 1E 62 FD | 	getqy	local01
2af08     3C 1E 16 FD | 	qdiv	local01, #60
2af0c     18 22 62 FD | 	getqx	local03
2af10     3C 1E 16 FD | 	qdiv	local01, #60
2af14     04 14 86 F1 | 	sub	arg02, #4
2af18     0A 23 62 FC | 	wrlong	local03, arg02
2af1c     04 14 86 F1 | 	sub	arg02, #4
2af20                 | '         stm->tm_isdst = 0;
2af20                 | ' 
2af20                 | ' ;
2af20                 | '         return stm;
2af20     0A FB 01 F6 | 	mov	result1, arg02
2af24     19 22 62 FD | 	getqy	local03
2af28     0A 23 62 FC | 	wrlong	local03, arg02
2af2c     20 14 06 F1 | 	add	arg02, #32
2af30     0A 01 68 FC | 	wrlong	#0, arg02
2af34     A7 F0 03 F6 | 	mov	ptra, fp
2af38     B2 00 A0 FD | 	call	#popregs_
2af3c                 | _fatfs_cc__gmtime_r_ret
2af3c     2D 00 64 FD | 	ret
2af40                 | 
2af40                 | _fatfs_cc__tzset
2af40     65 01 00 FF 
2af44     85 12 06 F6 | 	mov	arg01, ##@LR__4625
2af48     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2af4c     FD 12 02 F6 | 	mov	arg01, result1
2af50     02 00 00 FF 
2af54     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2af58     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2af5c     02 00 00 FF 
2af60     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2af64     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2af68     02 00 00 FF 
2af6c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2af70     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2af74     02 00 00 FF 
2af78     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2af7c                 | _fatfs_cc__tzset_ret
2af7c     2D 00 64 FD | 	ret
2af80                 | 
2af80                 | _fatfs_cc_getenv
2af80     06 4A 05 F6 | 	mov	COUNT_, #6
2af84     A8 00 A0 FD | 	call	#pushregs_
2af88     09 1F 02 F6 | 	mov	local01, arg01
2af8c     09 21 02 F6 | 	mov	local02, arg01
2af90     97 06 48 FB | 	callpa	#(@LR__4321-@LR__4320)>>2,fcache_load_ptr_
2af94                 | LR__4320
2af94     10 FB C9 FA | 	rdbyte	result1, local02 wz
2af98     01 20 06 51 |  if_ne	add	local02, #1
2af9c     F4 FF 9F 5D |  if_ne	jmp	#LR__4320
2afa0                 | LR__4321
2afa0     09 21 82 F1 | 	sub	local02, arg01
2afa4     10 FB 01 F6 | 	mov	result1, local02
2afa8     02 00 00 FF 
2afac     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2afb0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2afb4     02 00 00 FF 
2afb8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2afbc                 | '             return 0;
2afbc     00 FA 05 A6 |  if_e	mov	result1, #0
2afc0     5C 00 90 AD |  if_e	jmp	#LR__4324
2afc4                 | ' 
2afc4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2afc4     02 00 00 FF 
2afc8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2afcc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2afd0     02 00 00 FF 
2afd4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2afd8                 | LR__4322
2afd8     11 25 0A FB | 	rdlong	local04, local03 wz
2afdc     3C 00 90 AD |  if_e	jmp	#LR__4323
2afe0     12 13 02 F6 | 	mov	arg01, local04
2afe4     0F 15 02 F6 | 	mov	arg02, local01
2afe8     10 17 02 F6 | 	mov	arg03, local02
2afec     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2aff0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aff4     10 27 02 A6 |  if_e	mov	local05, local02
2aff8     12 27 02 A1 |  if_e	add	local05, local04
2affc     13 29 C2 AA |  if_e	rdbyte	local06, local05
2b000     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2b004                 | ' 			return name+len+1;
2b004     10 25 02 A1 |  if_e	add	local04, local02
2b008     01 24 06 A1 |  if_e	add	local04, #1
2b00c     12 FB 01 A6 |  if_e	mov	result1, local04
2b010     0C 00 90 AD |  if_e	jmp	#LR__4324
2b014     04 22 06 F1 | 	add	local03, #4
2b018     BC FF 9F FD | 	jmp	#LR__4322
2b01c                 | LR__4323
2b01c                 | ' 	}
2b01c                 | ' 	return 0;
2b01c     00 FA 05 F6 | 	mov	result1, #0
2b020                 | LR__4324
2b020     A7 F0 03 F6 | 	mov	ptra, fp
2b024     B2 00 A0 FD | 	call	#popregs_
2b028                 | _fatfs_cc_getenv_ret
2b028     2D 00 64 FD | 	ret
2b02c                 | 
2b02c                 | _fatfs_cc__get_fattime
2b02c     00 4A 05 F6 | 	mov	COUNT_, #0
2b030     A8 00 A0 FD | 	call	#pushregs_
2b034     34 F0 07 F1 | 	add	ptra, #52
2b038     00 12 06 F6 | 	mov	arg01, #0
2b03c     38 FB BF FD | 	call	#_fatfs_cc_time
2b040     04 4E 05 F1 | 	add	fp, #4
2b044     A7 FA 61 FC | 	wrlong	result1, fp
2b048     A7 12 02 F6 | 	mov	arg01, fp
2b04c     0C 4E 05 F1 | 	add	fp, #12
2b050     A7 14 02 F6 | 	mov	arg02, fp
2b054     10 4E 85 F1 | 	sub	fp, #16
2b058     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2b05c     24 4E 05 F1 | 	add	fp, #36
2b060     A7 14 02 FB | 	rdlong	arg02, fp
2b064     50 14 86 F1 | 	sub	arg02, #80
2b068     09 14 66 F0 | 	shl	arg02, #9
2b06c     04 4E 85 F1 | 	sub	fp, #4
2b070     A7 FA 01 FB | 	rdlong	result1, fp
2b074     01 FA 05 F1 | 	add	result1, #1
2b078     05 FA 65 F0 | 	shl	result1, #5
2b07c     FD 14 42 F5 | 	or	arg02, result1
2b080     04 4E 85 F1 | 	sub	fp, #4
2b084     A7 FA 01 FB | 	rdlong	result1, fp
2b088     FD 14 42 F5 | 	or	arg02, result1
2b08c     14 4E 85 F1 | 	sub	fp, #20
2b090     A7 14 62 FC | 	wrlong	arg02, fp
2b094     10 4E 05 F1 | 	add	fp, #16
2b098     A7 14 02 FB | 	rdlong	arg02, fp
2b09c     0B 14 66 F0 | 	shl	arg02, #11
2b0a0     04 4E 85 F1 | 	sub	fp, #4
2b0a4     A7 FA 01 FB | 	rdlong	result1, fp
2b0a8     05 FA 65 F0 | 	shl	result1, #5
2b0ac     FD 14 42 F5 | 	or	arg02, result1
2b0b0     04 4E 85 F1 | 	sub	fp, #4
2b0b4     A7 FA 01 FB | 	rdlong	result1, fp
2b0b8     FD 14 42 F5 | 	or	arg02, result1
2b0bc     04 4E 85 F1 | 	sub	fp, #4
2b0c0     A7 14 62 FC | 	wrlong	arg02, fp
2b0c4                 | ' 
2b0c4                 | '     now = time(0);
2b0c4                 | '     _gmtime_r (&now, &date);
2b0c4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2b0c4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2b0c4                 | '     return (ffdate << 16) | fftime;
2b0c4     04 4E 85 F1 | 	sub	fp, #4
2b0c8     A7 FA 01 FB | 	rdlong	result1, fp
2b0cc     10 FA 65 F0 | 	shl	result1, #16
2b0d0     08 4E 85 F1 | 	sub	fp, #8
2b0d4     0A FB 41 F5 | 	or	result1, arg02
2b0d8     A7 F0 03 F6 | 	mov	ptra, fp
2b0dc     B2 00 A0 FD | 	call	#popregs_
2b0e0                 | _fatfs_cc__get_fattime_ret
2b0e0     2D 00 64 FD | 	ret
2b0e4                 | 
2b0e4                 | _fatfs_cc_unixtime_0893
2b0e4     00 4A 05 F6 | 	mov	COUNT_, #0
2b0e8     A8 00 A0 FD | 	call	#pushregs_
2b0ec     34 F0 07 F1 | 	add	ptra, #52
2b0f0     04 4E 05 F1 | 	add	fp, #4
2b0f4     A7 12 62 FC | 	wrlong	arg01, fp
2b0f8     04 4E 05 F1 | 	add	fp, #4
2b0fc     A7 14 62 FC | 	wrlong	arg02, fp
2b100     04 4E 85 F1 | 	sub	fp, #4
2b104     A7 14 02 FB | 	rdlong	arg02, fp
2b108     09 14 46 F0 | 	shr	arg02, #9
2b10c     7F 14 06 F5 | 	and	arg02, #127
2b110     50 FA 05 F6 | 	mov	result1, #80
2b114     0A FB 01 F1 | 	add	result1, arg02
2b118     20 4E 05 F1 | 	add	fp, #32
2b11c     A7 FA 61 FC | 	wrlong	result1, fp
2b120     20 4E 85 F1 | 	sub	fp, #32
2b124     A7 FA 01 FB | 	rdlong	result1, fp
2b128     05 FA 45 F0 | 	shr	result1, #5
2b12c     FD FA 41 F8 | 	getnib	result1, result1, #0
2b130     01 FA 85 F1 | 	sub	result1, #1
2b134     1C 4E 05 F1 | 	add	fp, #28
2b138     A7 FA 61 FC | 	wrlong	result1, fp
2b13c     1C 4E 85 F1 | 	sub	fp, #28
2b140     A7 FA 01 FB | 	rdlong	result1, fp
2b144     1F FA 05 F5 | 	and	result1, #31
2b148     18 4E 05 F1 | 	add	fp, #24
2b14c     A7 FA 61 FC | 	wrlong	result1, fp
2b150     14 4E 85 F1 | 	sub	fp, #20
2b154     A7 FA 01 FB | 	rdlong	result1, fp
2b158     0B FA 45 F0 | 	shr	result1, #11
2b15c     1F FA 05 F5 | 	and	result1, #31
2b160     10 4E 05 F1 | 	add	fp, #16
2b164     A7 FA 61 FC | 	wrlong	result1, fp
2b168     10 4E 85 F1 | 	sub	fp, #16
2b16c     A7 FA 01 FB | 	rdlong	result1, fp
2b170     05 FA 45 F0 | 	shr	result1, #5
2b174     3F FA 05 F5 | 	and	result1, #63
2b178     0C 4E 05 F1 | 	add	fp, #12
2b17c     A7 FA 61 FC | 	wrlong	result1, fp
2b180     0C 4E 85 F1 | 	sub	fp, #12
2b184     A7 14 02 FB | 	rdlong	arg02, fp
2b188     1F 14 06 F5 | 	and	arg02, #31
2b18c     01 14 66 F0 | 	shl	arg02, #1
2b190     08 4E 05 F1 | 	add	fp, #8
2b194     A7 14 62 FC | 	wrlong	arg02, fp
2b198     A7 12 02 F6 | 	mov	arg01, fp
2b19c     10 4E 85 F1 | 	sub	fp, #16
2b1a0     4C FA BF FD | 	call	#_fatfs_cc_mktime
2b1a4     0C 4E 05 F1 | 	add	fp, #12
2b1a8     A7 FA 61 FC | 	wrlong	result1, fp
2b1ac                 | ' 
2b1ac                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2b1ac                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2b1ac                 | '     date.tm_mday = (dosdate & 0x1f);
2b1ac                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2b1ac                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2b1ac                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2b1ac                 | ' 
2b1ac                 | '     t = mktime(&date);
2b1ac                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b1ac                 | '     return t;
2b1ac     0C 4E 85 F1 | 	sub	fp, #12
2b1b0     A7 F0 03 F6 | 	mov	ptra, fp
2b1b4     B2 00 A0 FD | 	call	#popregs_
2b1b8                 | _fatfs_cc_unixtime_0893_ret
2b1b8     2D 00 64 FD | 	ret
2b1bc                 | 
2b1bc                 | _fatfs_cc__set_dos_error_0895
2b1bc     09 01 02 F6 | 	mov	_var01, arg01
2b1c0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b1c0                 | '     switch (derr) {
2b1c0     14 00 26 F3 | 	fle	_var01, #20
2b1c4     30 00 62 FD | 	jmprel	_var01
2b1c8                 | LR__4330
2b1c8     50 00 90 FD | 	jmp	#LR__4331
2b1cc     84 00 90 FD | 	jmp	#LR__4345
2b1d0     80 00 90 FD | 	jmp	#LR__4346
2b1d4     7C 00 90 FD | 	jmp	#LR__4347
2b1d8     48 00 90 FD | 	jmp	#LR__4332
2b1dc     44 00 90 FD | 	jmp	#LR__4333
2b1e0     40 00 90 FD | 	jmp	#LR__4334
2b1e4     44 00 90 FD | 	jmp	#LR__4335
2b1e8     48 00 90 FD | 	jmp	#LR__4337
2b1ec     54 00 90 FD | 	jmp	#LR__4340
2b1f0     38 00 90 FD | 	jmp	#LR__4336
2b1f4     4C 00 90 FD | 	jmp	#LR__4341
2b1f8     48 00 90 FD | 	jmp	#LR__4342
2b1fc     44 00 90 FD | 	jmp	#LR__4343
2b200     50 00 90 FD | 	jmp	#LR__4348
2b204     4C 00 90 FD | 	jmp	#LR__4348
2b208     48 00 90 FD | 	jmp	#LR__4348
2b20c     2C 00 90 FD | 	jmp	#LR__4338
2b210     38 00 90 FD | 	jmp	#LR__4344
2b214     2C 00 90 FD | 	jmp	#LR__4339
2b218     38 00 90 FD | 	jmp	#LR__4348
2b21c                 | LR__4331
2b21c     00 02 06 F6 | 	mov	_var02, #0
2b220                 | '         r = 0;
2b220                 | '         break;
2b220     34 00 90 FD | 	jmp	#LR__4349
2b224                 | LR__4332
2b224                 | LR__4333
2b224                 | LR__4334
2b224     04 02 06 F6 | 	mov	_var02, #4
2b228                 | '         r =  4 ;
2b228                 | '         break;
2b228     2C 00 90 FD | 	jmp	#LR__4349
2b22c                 | LR__4335
2b22c                 | LR__4336
2b22c     06 02 06 F6 | 	mov	_var02, #6
2b230                 | '         r =  6 ;
2b230                 | '         break;
2b230     24 00 90 FD | 	jmp	#LR__4349
2b234                 | LR__4337
2b234     09 02 06 F6 | 	mov	_var02, #9
2b238                 | '         r =  9 ;
2b238                 | '         break;
2b238     1C 00 90 FD | 	jmp	#LR__4349
2b23c                 | LR__4338
2b23c     07 02 06 F6 | 	mov	_var02, #7
2b240                 | '         r =  7 ;
2b240                 | '         break;
2b240     14 00 90 FD | 	jmp	#LR__4349
2b244                 | LR__4339
2b244                 | LR__4340
2b244                 | LR__4341
2b244                 | LR__4342
2b244                 | LR__4343
2b244     0A 02 06 F6 | 	mov	_var02, #10
2b248                 | '         r =  10 ;
2b248                 | '         break;
2b248     0C 00 90 FD | 	jmp	#LR__4349
2b24c                 | LR__4344
2b24c     0B 02 06 F6 | 	mov	_var02, #11
2b250                 | '         r =  11 ;
2b250                 | '         break;
2b250     04 00 90 FD | 	jmp	#LR__4349
2b254                 | LR__4345
2b254                 | LR__4346
2b254                 | LR__4347
2b254                 | LR__4348
2b254     0C 02 06 F6 | 	mov	_var02, #12
2b258                 | '         r =  12 ;
2b258                 | '         break;
2b258                 | LR__4349
2b258                 | '     }
2b258                 | '     return _seterror(r);
2b258     00 02 4E F2 | 	cmps	_var02, #0 wz
2b25c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b260     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2b264     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b268     01 FA 65 56 |  if_ne	neg	result1, #1
2b26c     00 FA 05 A6 |  if_e	mov	result1, #0
2b270                 | _fatfs_cc__set_dos_error_0895_ret
2b270     2D 00 64 FD | 	ret
2b274                 | 
2b274                 | _fatfs_cc_v_creat
2b274     04 4A 05 F6 | 	mov	COUNT_, #4
2b278     A8 00 A0 FD | 	call	#pushregs_
2b27c     09 1F 02 F6 | 	mov	local01, arg01
2b280     0A 21 02 F6 | 	mov	local02, arg02
2b284     03 00 00 FF 
2b288     3C 12 06 F6 | 	mov	arg01, ##1596
2b28c                 | '     return _gc_alloc(size);
2b28c     10 14 06 F6 | 	mov	arg02, #16
2b290     30 60 BF FD | 	call	#__system___gc_doalloc
2b294     FD 22 0A F6 | 	mov	local03, result1 wz
2b298                 | '       return _seterror( 7 );
2b298     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b29c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b2a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b2a4     01 FA 65 A6 |  if_e	neg	result1, #1
2b2a8     58 00 90 AD |  if_e	jmp	#LR__4351
2b2ac     11 13 02 F6 | 	mov	arg01, local03
2b2b0     00 14 06 F6 | 	mov	arg02, #0
2b2b4     03 00 00 FF 
2b2b8     3C 16 06 F6 | 	mov	arg03, ##1596
2b2bc     98 00 A0 FD | 	call	#\builtin_bytefill_
2b2c0     02 00 00 FF 
2b2c4     14 22 06 F1 | 	add	local03, ##1044
2b2c8     11 13 02 F6 | 	mov	arg01, local03
2b2cc     02 00 00 FF 
2b2d0     14 22 86 F1 | 	sub	local03, ##1044
2b2d4     10 15 02 F6 | 	mov	arg02, local02
2b2d8     07 16 06 F6 | 	mov	arg03, #7
2b2dc     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2b2e0     FD 24 0A F6 | 	mov	local04, result1 wz
2b2e4     14 00 90 AD |  if_e	jmp	#LR__4350
2b2e8     11 13 02 F6 | 	mov	arg01, local03
2b2ec                 | '     return _gc_free(ptr);
2b2ec     E0 60 BF FD | 	call	#__system___gc_free
2b2f0                 | '     free(f);
2b2f0                 | '     return _set_dos_error(r);
2b2f0     12 13 02 F6 | 	mov	arg01, local04
2b2f4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b2f8     08 00 90 FD | 	jmp	#LR__4351
2b2fc                 | LR__4350
2b2fc     0F 23 62 FC | 	wrlong	local03, local01
2b300                 | '   }
2b300                 | '   fil->vfsdata = f;
2b300                 | '   return 0;
2b300     00 FA 05 F6 | 	mov	result1, #0
2b304                 | LR__4351
2b304     A7 F0 03 F6 | 	mov	ptra, fp
2b308     B2 00 A0 FD | 	call	#popregs_
2b30c                 | _fatfs_cc_v_creat_ret
2b30c     2D 00 64 FD | 	ret
2b310                 | 
2b310                 | _fatfs_cc_v_close
2b310     02 4A 05 F6 | 	mov	COUNT_, #2
2b314     A8 00 A0 FD | 	call	#pushregs_
2b318     09 1F 02 FB | 	rdlong	local01, arg01
2b31c     02 00 00 FF 
2b320     14 1E 06 F1 | 	add	local01, ##1044
2b324     0F 13 02 F6 | 	mov	arg01, local01
2b328     02 00 00 FF 
2b32c     14 1E 86 F1 | 	sub	local01, ##1044
2b330     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2b334     FD 20 02 F6 | 	mov	local02, result1
2b338     0F 13 02 F6 | 	mov	arg01, local01
2b33c                 | '     return _gc_free(ptr);
2b33c     90 60 BF FD | 	call	#__system___gc_free
2b340                 | '     FAT_FIL *f = fil->vfsdata;
2b340                 | '     r=f_close(&f->fil);
2b340                 | '     free(f);
2b340                 | '     return _set_dos_error(r);
2b340     10 13 02 F6 | 	mov	arg01, local02
2b344     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b348     A7 F0 03 F6 | 	mov	ptra, fp
2b34c     B2 00 A0 FD | 	call	#popregs_
2b350                 | _fatfs_cc_v_close_ret
2b350     2D 00 64 FD | 	ret
2b354                 | 
2b354                 | _fatfs_cc_v_opendir
2b354     04 4A 05 F6 | 	mov	COUNT_, #4
2b358     A8 00 A0 FD | 	call	#pushregs_
2b35c     09 1F 02 F6 | 	mov	local01, arg01
2b360     0A 21 02 F6 | 	mov	local02, arg02
2b364     30 12 06 F6 | 	mov	arg01, #48
2b368                 | '     return _gc_alloc(size);
2b368     10 14 06 F6 | 	mov	arg02, #16
2b36c     54 5F BF FD | 	call	#__system___gc_doalloc
2b370     FD 22 0A F6 | 	mov	local03, result1 wz
2b374                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b374                 | '       return _seterror( 7 );
2b374     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b378     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b37c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b380     01 FA 65 A6 |  if_e	neg	result1, #1
2b384     34 00 90 AD |  if_e	jmp	#LR__4361
2b388     10 15 02 F6 | 	mov	arg02, local02
2b38c     11 13 02 F6 | 	mov	arg01, local03
2b390     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2b394     FD 24 0A F6 | 	mov	local04, result1 wz
2b398     14 00 90 AD |  if_e	jmp	#LR__4360
2b39c     11 13 02 F6 | 	mov	arg01, local03
2b3a0                 | '     return _gc_free(ptr);
2b3a0     2C 60 BF FD | 	call	#__system___gc_free
2b3a4                 | '         free(f);
2b3a4                 | '         return _set_dos_error(r);
2b3a4     12 13 02 F6 | 	mov	arg01, local04
2b3a8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b3ac     0C 00 90 FD | 	jmp	#LR__4361
2b3b0                 | LR__4360
2b3b0     04 1E 06 F1 | 	add	local01, #4
2b3b4     0F 23 62 FC | 	wrlong	local03, local01
2b3b8                 | '     }
2b3b8                 | '     dir->vfsdata = f;
2b3b8                 | '     return 0;
2b3b8     00 FA 05 F6 | 	mov	result1, #0
2b3bc                 | LR__4361
2b3bc     A7 F0 03 F6 | 	mov	ptra, fp
2b3c0     B2 00 A0 FD | 	call	#popregs_
2b3c4                 | _fatfs_cc_v_opendir_ret
2b3c4     2D 00 64 FD | 	ret
2b3c8                 | 
2b3c8                 | _fatfs_cc_v_closedir
2b3c8     02 4A 05 F6 | 	mov	COUNT_, #2
2b3cc     A8 00 A0 FD | 	call	#pushregs_
2b3d0     04 12 06 F1 | 	add	arg01, #4
2b3d4     09 1F 02 FB | 	rdlong	local01, arg01
2b3d8     0F 13 02 F6 | 	mov	arg01, local01
2b3dc     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2b3e0     FD 20 02 F6 | 	mov	local02, result1
2b3e4     0F 13 02 F6 | 	mov	arg01, local01
2b3e8                 | '     return _gc_free(ptr);
2b3e8     E4 5F BF FD | 	call	#__system___gc_free
2b3ec     00 20 0E F2 | 	cmp	local02, #0 wz
2b3f0     10 13 02 56 |  if_ne	mov	arg01, local02
2b3f4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0895
2b3f8                 | '     return r;
2b3f8     10 FB 01 F6 | 	mov	result1, local02
2b3fc     A7 F0 03 F6 | 	mov	ptra, fp
2b400     B2 00 A0 FD | 	call	#popregs_
2b404                 | _fatfs_cc_v_closedir_ret
2b404     2D 00 64 FD | 	ret
2b408                 | 
2b408                 | _fatfs_cc_v_readdir
2b408     01 4A 05 F6 | 	mov	COUNT_, #1
2b40c     A8 00 A0 FD | 	call	#pushregs_
2b410     2C F1 07 F1 | 	add	ptra, #300
2b414     04 4E 05 F1 | 	add	fp, #4
2b418     A7 12 62 FC | 	wrlong	arg01, fp
2b41c     04 4E 05 F1 | 	add	fp, #4
2b420     A7 14 62 FC | 	wrlong	arg02, fp
2b424     04 4E 85 F1 | 	sub	fp, #4
2b428     A7 16 02 FB | 	rdlong	arg03, fp
2b42c     04 16 06 F1 | 	add	arg03, #4
2b430     0B 13 02 FB | 	rdlong	arg01, arg03
2b434     08 4E 05 F1 | 	add	fp, #8
2b438     A7 14 02 F6 | 	mov	arg02, fp
2b43c     0C 4E 85 F1 | 	sub	fp, #12
2b440     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2b444     28 4F 05 F1 | 	add	fp, #296
2b448     A7 FA 61 FC | 	wrlong	result1, fp
2b44c     28 4F 85 F1 | 	sub	fp, #296
2b450     00 FA 0D F2 | 	cmp	result1, #0 wz
2b454     14 00 90 AD |  if_e	jmp	#LR__4370
2b458                 | '         return _set_dos_error(r);
2b458     28 4F 05 F1 | 	add	fp, #296
2b45c     A7 12 02 FB | 	rdlong	arg01, fp
2b460     28 4F 85 F1 | 	sub	fp, #296
2b464     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b468     C4 00 90 FD | 	jmp	#LR__4373
2b46c                 | LR__4370
2b46c     28 4E 05 F1 | 	add	fp, #40
2b470     A7 16 CA FA | 	rdbyte	arg03, fp wz
2b474     28 4E 85 F1 | 	sub	fp, #40
2b478                 | '         return -1;
2b478     01 FA 65 A6 |  if_e	neg	result1, #1
2b47c     B0 00 90 AD |  if_e	jmp	#LR__4373
2b480     08 4E 05 F1 | 	add	fp, #8
2b484     A7 12 02 FB | 	rdlong	arg01, fp
2b488     20 4E 05 F1 | 	add	fp, #32
2b48c     A7 14 02 F6 | 	mov	arg02, fp
2b490     28 4E 85 F1 | 	sub	fp, #40
2b494     3F 16 06 F6 | 	mov	arg03, #63
2b498     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2b49c     08 4E 05 F1 | 	add	fp, #8
2b4a0     A7 16 02 FB | 	rdlong	arg03, fp
2b4a4     3F 16 06 F1 | 	add	arg03, #63
2b4a8     0B 01 48 FC | 	wrbyte	#0, arg03
2b4ac     0C 4E 05 F1 | 	add	fp, #12
2b4b0     A7 16 C2 FA | 	rdbyte	arg03, fp
2b4b4     14 4E 85 F1 | 	sub	fp, #20
2b4b8     10 16 CE F7 | 	test	arg03, #16 wz
2b4bc     18 00 90 AD |  if_e	jmp	#LR__4371
2b4c0     08 4E 05 F1 | 	add	fp, #8
2b4c4     A7 16 02 FB | 	rdlong	arg03, fp
2b4c8     08 4E 85 F1 | 	sub	fp, #8
2b4cc     50 16 06 F1 | 	add	arg03, #80
2b4d0     0B 03 48 FC | 	wrbyte	#1, arg03
2b4d4     14 00 90 FD | 	jmp	#LR__4372
2b4d8                 | LR__4371
2b4d8     08 4E 05 F1 | 	add	fp, #8
2b4dc     A7 16 02 FB | 	rdlong	arg03, fp
2b4e0     08 4E 85 F1 | 	sub	fp, #8
2b4e4     50 16 06 F1 | 	add	arg03, #80
2b4e8     0B 01 48 FC | 	wrbyte	#0, arg03
2b4ec                 | LR__4372
2b4ec     08 4E 05 F1 | 	add	fp, #8
2b4f0     A7 16 02 FB | 	rdlong	arg03, fp
2b4f4     04 4E 05 F1 | 	add	fp, #4
2b4f8     A7 14 02 FB | 	rdlong	arg02, fp
2b4fc     48 16 06 F1 | 	add	arg03, #72
2b500     0B 15 62 FC | 	wrlong	arg02, arg03
2b504     04 4E 85 F1 | 	sub	fp, #4
2b508     A7 1E 02 FB | 	rdlong	local01, fp
2b50c     08 4E 05 F1 | 	add	fp, #8
2b510     A7 12 E2 FA | 	rdword	arg01, fp
2b514     02 4E 05 F1 | 	add	fp, #2
2b518     A7 14 E2 FA | 	rdword	arg02, fp
2b51c     12 4E 85 F1 | 	sub	fp, #18
2b520     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0893
2b524     4C 1E 06 F1 | 	add	local01, #76
2b528     0F FB 61 FC | 	wrlong	result1, local01
2b52c                 | '         ent->d_type =  (0) ;
2b52c                 | '     }
2b52c                 | '     ent->d_size = finfo.fsize;
2b52c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2b52c                 | '     return 0;
2b52c     00 FA 05 F6 | 	mov	result1, #0
2b530                 | LR__4373
2b530     A7 F0 03 F6 | 	mov	ptra, fp
2b534     B2 00 A0 FD | 	call	#popregs_
2b538                 | _fatfs_cc_v_readdir_ret
2b538     2D 00 64 FD | 	ret
2b53c                 | 
2b53c                 | _fatfs_cc_v_stat
2b53c     03 4A 05 F6 | 	mov	COUNT_, #3
2b540     A8 00 A0 FD | 	call	#pushregs_
2b544     30 F1 07 F1 | 	add	ptra, #304
2b548     04 4E 05 F1 | 	add	fp, #4
2b54c     A7 12 62 FC | 	wrlong	arg01, fp
2b550     04 4E 05 F1 | 	add	fp, #4
2b554     A7 14 62 FC | 	wrlong	arg02, fp
2b558     08 4E 85 F1 | 	sub	fp, #8
2b55c     0A 13 02 F6 | 	mov	arg01, arg02
2b560     00 14 06 F6 | 	mov	arg02, #0
2b564     30 16 06 F6 | 	mov	arg03, #48
2b568     98 00 A0 FD | 	call	#\builtin_bytefill_
2b56c     04 4E 05 F1 | 	add	fp, #4
2b570     A7 FA 01 FB | 	rdlong	result1, fp
2b574     04 4E 85 F1 | 	sub	fp, #4
2b578     FD FA C9 FA | 	rdbyte	result1, result1 wz
2b57c     2C 00 90 AD |  if_e	jmp	#LR__4380
2b580     04 4E 05 F1 | 	add	fp, #4
2b584     A7 FA 01 FB | 	rdlong	result1, fp
2b588     04 4E 85 F1 | 	sub	fp, #4
2b58c     FD FA C1 FA | 	rdbyte	result1, result1
2b590     2E FA 0D F2 | 	cmp	result1, #46 wz
2b594     04 4E 05 A1 |  if_e	add	fp, #4
2b598     A7 1E 02 AB |  if_e	rdlong	local01, fp
2b59c     04 4E 85 A1 |  if_e	sub	fp, #4
2b5a0     01 1E 06 A1 |  if_e	add	local01, #1
2b5a4     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2b5a8     18 00 90 5D |  if_ne	jmp	#LR__4381
2b5ac                 | LR__4380
2b5ac     18 4E 05 F1 | 	add	fp, #24
2b5b0     A7 20 48 FC | 	wrbyte	#16, fp
2b5b4     0C 4E 85 F1 | 	sub	fp, #12
2b5b8     A7 00 68 FC | 	wrlong	#0, fp
2b5bc     0C 4E 85 F1 | 	sub	fp, #12
2b5c0     24 00 90 FD | 	jmp	#LR__4382
2b5c4                 | LR__4381
2b5c4     04 4E 05 F1 | 	add	fp, #4
2b5c8     A7 12 02 FB | 	rdlong	arg01, fp
2b5cc     0C 4E 05 F1 | 	add	fp, #12
2b5d0     A7 14 02 F6 | 	mov	arg02, fp
2b5d4     10 4E 85 F1 | 	sub	fp, #16
2b5d8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2b5dc     0C 4E 05 F1 | 	add	fp, #12
2b5e0     A7 FA 61 FC | 	wrlong	result1, fp
2b5e4     0C 4E 85 F1 | 	sub	fp, #12
2b5e8                 | LR__4382
2b5e8     0C 4E 05 F1 | 	add	fp, #12
2b5ec     A7 20 0A FB | 	rdlong	local02, fp wz
2b5f0     0C 4E 85 F1 | 	sub	fp, #12
2b5f4     14 00 90 AD |  if_e	jmp	#LR__4383
2b5f8                 | '         return _set_dos_error(r);
2b5f8     0C 4E 05 F1 | 	add	fp, #12
2b5fc     A7 12 02 FB | 	rdlong	arg01, fp
2b600     0C 4E 85 F1 | 	sub	fp, #12
2b604     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b608     14 01 90 FD | 	jmp	#LR__4384
2b60c                 | LR__4383
2b60c     2C 4F 05 F1 | 	add	fp, #300
2b610     A7 48 6A FC | 	wrlong	#292, fp
2b614     14 4F 85 F1 | 	sub	fp, #276
2b618     A7 22 C2 FA | 	rdbyte	local03, fp
2b61c     18 4E 85 F1 | 	sub	fp, #24
2b620     01 22 CE F7 | 	test	local03, #1 wz
2b624     2C 4F 05 A1 |  if_e	add	fp, #300
2b628     A7 22 02 AB |  if_e	rdlong	local03, fp
2b62c     92 22 46 A5 |  if_e	or	local03, #146
2b630     A7 22 62 AC |  if_e	wrlong	local03, fp
2b634     2C 4F 85 A1 |  if_e	sub	fp, #300
2b638     18 4E 05 F1 | 	add	fp, #24
2b63c     A7 22 C2 FA | 	rdbyte	local03, fp
2b640     18 4E 85 F1 | 	sub	fp, #24
2b644     10 22 CE F7 | 	test	local03, #16 wz
2b648     2C 4F 05 51 |  if_ne	add	fp, #300
2b64c     A7 22 02 5B |  if_ne	rdlong	local03, fp
2b650     08 00 00 5F 
2b654     49 22 46 55 |  if_ne	or	local03, ##4169
2b658     A7 22 62 5C |  if_ne	wrlong	local03, fp
2b65c     2C 4F 85 51 |  if_ne	sub	fp, #300
2b660     08 4E 05 F1 | 	add	fp, #8
2b664     A7 22 02 FB | 	rdlong	local03, fp
2b668     24 4F 05 F1 | 	add	fp, #292
2b66c     A7 20 02 FB | 	rdlong	local02, fp
2b670     08 22 06 F1 | 	add	local03, #8
2b674     11 21 62 FC | 	wrlong	local02, local03
2b678     24 4F 85 F1 | 	sub	fp, #292
2b67c     A7 22 02 FB | 	rdlong	local03, fp
2b680     0C 22 06 F1 | 	add	local03, #12
2b684     11 03 68 FC | 	wrlong	#1, local03
2b688     A7 22 02 FB | 	rdlong	local03, fp
2b68c     08 4E 05 F1 | 	add	fp, #8
2b690     A7 20 02 FB | 	rdlong	local02, fp
2b694     18 22 06 F1 | 	add	local03, #24
2b698     11 21 62 FC | 	wrlong	local02, local03
2b69c     08 4E 85 F1 | 	sub	fp, #8
2b6a0     A7 22 02 FB | 	rdlong	local03, fp
2b6a4     1C 22 06 F1 | 	add	local03, #28
2b6a8     01 00 80 FF 
2b6ac     11 01 68 FC | 	wrlong	##512, local03
2b6b0     A7 20 02 FB | 	rdlong	local02, fp
2b6b4     10 23 02 F6 | 	mov	local03, local02
2b6b8     18 20 06 F1 | 	add	local02, #24
2b6bc     10 21 02 FB | 	rdlong	local02, local02
2b6c0     FF 21 06 F1 | 	add	local02, #511
2b6c4     10 21 52 F6 | 	abs	local02, local02 wc
2b6c8     09 20 46 F0 | 	shr	local02, #9
2b6cc     10 21 82 F6 | 	negc	local02, local02
2b6d0     20 22 06 F1 | 	add	local03, #32
2b6d4     11 21 62 FC | 	wrlong	local02, local03
2b6d8     A7 20 02 FB | 	rdlong	local02, fp
2b6dc     10 23 02 F6 | 	mov	local03, local02
2b6e0     10 1F 02 F6 | 	mov	local01, local02
2b6e4     0C 4E 05 F1 | 	add	fp, #12
2b6e8     A7 12 E2 FA | 	rdword	arg01, fp
2b6ec     02 4E 05 F1 | 	add	fp, #2
2b6f0     A7 14 E2 FA | 	rdword	arg02, fp
2b6f4     16 4E 85 F1 | 	sub	fp, #22
2b6f8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0893
2b6fc     2C 1E 06 F1 | 	add	local01, #44
2b700     0F FB 61 FC | 	wrlong	result1, local01
2b704     28 20 06 F1 | 	add	local02, #40
2b708     10 FB 61 FC | 	wrlong	result1, local02
2b70c     24 22 06 F1 | 	add	local03, #36
2b710     11 FB 61 FC | 	wrlong	result1, local03
2b714                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2b714                 | '     }
2b714                 | '     buf->st_mode = mode;
2b714                 | '     buf->st_nlink = 1;
2b714                 | '     buf->st_size = finfo.fsize;
2b714                 | '     buf->st_blksize = 512;
2b714                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2b714                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2b714                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b714                 | '     return r;
2b714     0C 4E 05 F1 | 	add	fp, #12
2b718     A7 FA 01 FB | 	rdlong	result1, fp
2b71c     0C 4E 85 F1 | 	sub	fp, #12
2b720                 | LR__4384
2b720     A7 F0 03 F6 | 	mov	ptra, fp
2b724     B2 00 A0 FD | 	call	#popregs_
2b728                 | _fatfs_cc_v_stat_ret
2b728     2D 00 64 FD | 	ret
2b72c                 | 
2b72c                 | _fatfs_cc_v_read
2b72c     00 4A 05 F6 | 	mov	COUNT_, #0
2b730     A8 00 A0 FD | 	call	#pushregs_
2b734     1C F0 07 F1 | 	add	ptra, #28
2b738     04 4E 05 F1 | 	add	fp, #4
2b73c     A7 12 62 FC | 	wrlong	arg01, fp
2b740     04 4E 05 F1 | 	add	fp, #4
2b744     A7 14 62 FC | 	wrlong	arg02, fp
2b748     04 4E 05 F1 | 	add	fp, #4
2b74c     A7 16 62 FC | 	wrlong	arg03, fp
2b750     08 4E 85 F1 | 	sub	fp, #8
2b754     A7 12 02 FB | 	rdlong	arg01, fp
2b758     09 13 0A FB | 	rdlong	arg01, arg01 wz
2b75c     0C 4E 05 F1 | 	add	fp, #12
2b760     A7 12 62 FC | 	wrlong	arg01, fp
2b764     10 4E 85 F1 | 	sub	fp, #16
2b768                 | '         return _seterror( 5 );
2b768     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b76c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b770     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b774     01 FA 65 A6 |  if_e	neg	result1, #1
2b778     B8 00 90 AD |  if_e	jmp	#LR__4392
2b77c     10 4E 05 F1 | 	add	fp, #16
2b780     A7 12 02 FB | 	rdlong	arg01, fp
2b784     02 00 00 FF 
2b788     14 12 06 F1 | 	add	arg01, ##1044
2b78c     08 4E 85 F1 | 	sub	fp, #8
2b790     A7 14 02 FB | 	rdlong	arg02, fp
2b794     04 4E 05 F1 | 	add	fp, #4
2b798     A7 16 02 FB | 	rdlong	arg03, fp
2b79c     0C 4E 05 F1 | 	add	fp, #12
2b7a0     A7 18 02 F6 | 	mov	arg04, fp
2b7a4     18 4E 85 F1 | 	sub	fp, #24
2b7a8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2b7ac     14 4E 05 F1 | 	add	fp, #20
2b7b0     A7 FA 61 FC | 	wrlong	result1, fp
2b7b4     14 4E 85 F1 | 	sub	fp, #20
2b7b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7bc     34 00 90 AD |  if_e	jmp	#LR__4390
2b7c0     04 4E 05 F1 | 	add	fp, #4
2b7c4     A7 18 02 FB | 	rdlong	arg04, fp
2b7c8     0C 17 02 F6 | 	mov	arg03, arg04
2b7cc     08 18 06 F1 | 	add	arg04, #8
2b7d0     0C 19 02 FB | 	rdlong	arg04, arg04
2b7d4     20 18 46 F5 | 	or	arg04, #32
2b7d8     08 16 06 F1 | 	add	arg03, #8
2b7dc     0B 19 62 FC | 	wrlong	arg04, arg03
2b7e0                 | '         fil->state |=  (0x20) ;
2b7e0                 | '         return _set_dos_error(r);
2b7e0     10 4E 05 F1 | 	add	fp, #16
2b7e4     A7 12 02 FB | 	rdlong	arg01, fp
2b7e8     14 4E 85 F1 | 	sub	fp, #20
2b7ec     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b7f0     40 00 90 FD | 	jmp	#LR__4392
2b7f4                 | LR__4390
2b7f4     18 4E 05 F1 | 	add	fp, #24
2b7f8     A7 FA 09 FB | 	rdlong	result1, fp wz
2b7fc     18 4E 85 F1 | 	sub	fp, #24
2b800     24 00 90 5D |  if_ne	jmp	#LR__4391
2b804     04 4E 05 F1 | 	add	fp, #4
2b808     A7 FA 01 FB | 	rdlong	result1, fp
2b80c     FD 18 02 F6 | 	mov	arg04, result1
2b810     04 4E 85 F1 | 	sub	fp, #4
2b814     08 FA 05 F1 | 	add	result1, #8
2b818     FD FA 01 FB | 	rdlong	result1, result1
2b81c     10 FA 45 F5 | 	or	result1, #16
2b820     08 18 06 F1 | 	add	arg04, #8
2b824     0C FB 61 FC | 	wrlong	result1, arg04
2b828                 | LR__4391
2b828                 | '         fil->state |=  (0x10) ;
2b828                 | '     }
2b828                 | '     return x;
2b828     18 4E 05 F1 | 	add	fp, #24
2b82c     A7 FA 01 FB | 	rdlong	result1, fp
2b830     18 4E 85 F1 | 	sub	fp, #24
2b834                 | LR__4392
2b834     A7 F0 03 F6 | 	mov	ptra, fp
2b838     B2 00 A0 FD | 	call	#popregs_
2b83c                 | _fatfs_cc_v_read_ret
2b83c     2D 00 64 FD | 	ret
2b840                 | 
2b840                 | _fatfs_cc_v_write
2b840     00 4A 05 F6 | 	mov	COUNT_, #0
2b844     A8 00 A0 FD | 	call	#pushregs_
2b848     1C F0 07 F1 | 	add	ptra, #28
2b84c     04 4E 05 F1 | 	add	fp, #4
2b850     A7 12 62 FC | 	wrlong	arg01, fp
2b854     04 4E 05 F1 | 	add	fp, #4
2b858     A7 14 62 FC | 	wrlong	arg02, fp
2b85c     04 4E 05 F1 | 	add	fp, #4
2b860     A7 16 62 FC | 	wrlong	arg03, fp
2b864     08 4E 85 F1 | 	sub	fp, #8
2b868     A7 12 02 FB | 	rdlong	arg01, fp
2b86c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2b870     0C 4E 05 F1 | 	add	fp, #12
2b874     A7 12 62 FC | 	wrlong	arg01, fp
2b878     10 4E 85 F1 | 	sub	fp, #16
2b87c                 | '         return _seterror( 5 );
2b87c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b880     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b884     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b888     01 FA 65 A6 |  if_e	neg	result1, #1
2b88c     84 00 90 AD |  if_e	jmp	#LR__4401
2b890     10 4E 05 F1 | 	add	fp, #16
2b894     A7 12 02 FB | 	rdlong	arg01, fp
2b898     02 00 00 FF 
2b89c     14 12 06 F1 | 	add	arg01, ##1044
2b8a0     08 4E 85 F1 | 	sub	fp, #8
2b8a4     A7 14 02 FB | 	rdlong	arg02, fp
2b8a8     04 4E 05 F1 | 	add	fp, #4
2b8ac     A7 16 02 FB | 	rdlong	arg03, fp
2b8b0     0C 4E 05 F1 | 	add	fp, #12
2b8b4     A7 18 02 F6 | 	mov	arg04, fp
2b8b8     18 4E 85 F1 | 	sub	fp, #24
2b8bc     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2b8c0     14 4E 05 F1 | 	add	fp, #20
2b8c4     A7 FA 61 FC | 	wrlong	result1, fp
2b8c8     14 4E 85 F1 | 	sub	fp, #20
2b8cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8d0     34 00 90 AD |  if_e	jmp	#LR__4400
2b8d4     04 4E 05 F1 | 	add	fp, #4
2b8d8     A7 18 02 FB | 	rdlong	arg04, fp
2b8dc     0C 17 02 F6 | 	mov	arg03, arg04
2b8e0     08 18 06 F1 | 	add	arg04, #8
2b8e4     0C 19 02 FB | 	rdlong	arg04, arg04
2b8e8     20 18 46 F5 | 	or	arg04, #32
2b8ec     08 16 06 F1 | 	add	arg03, #8
2b8f0     0B 19 62 FC | 	wrlong	arg04, arg03
2b8f4                 | '         fil->state |=  (0x20) ;
2b8f4                 | '         return _set_dos_error(r);
2b8f4     10 4E 05 F1 | 	add	fp, #16
2b8f8     A7 12 02 FB | 	rdlong	arg01, fp
2b8fc     14 4E 85 F1 | 	sub	fp, #20
2b900     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b904     0C 00 90 FD | 	jmp	#LR__4401
2b908                 | LR__4400
2b908                 | '     }
2b908                 | '     return x;
2b908     18 4E 05 F1 | 	add	fp, #24
2b90c     A7 FA 01 FB | 	rdlong	result1, fp
2b910     18 4E 85 F1 | 	sub	fp, #24
2b914                 | LR__4401
2b914     A7 F0 03 F6 | 	mov	ptra, fp
2b918     B2 00 A0 FD | 	call	#popregs_
2b91c                 | _fatfs_cc_v_write_ret
2b91c     2D 00 64 FD | 	ret
2b920                 | 
2b920                 | _fatfs_cc_v_lseek
2b920     04 4A 05 F6 | 	mov	COUNT_, #4
2b924     A8 00 A0 FD | 	call	#pushregs_
2b928     0A 1F 02 F6 | 	mov	local01, arg02
2b92c     0B 21 02 F6 | 	mov	local02, arg03
2b930     09 23 02 FB | 	rdlong	local03, arg01
2b934     02 00 00 FF 
2b938     14 22 0E F1 | 	add	local03, ##1044 wz
2b93c                 | '         return _seterror( 5 );
2b93c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b940     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b944     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b948     01 FA 65 A6 |  if_e	neg	result1, #1
2b94c     4C 00 90 AD |  if_e	jmp	#LR__4412
2b950     00 20 0E F2 | 	cmp	local02, #0 wz
2b954     24 00 90 AD |  if_e	jmp	#LR__4410
2b958     01 20 0E F2 | 	cmp	local02, #1 wz
2b95c     14 22 06 A1 |  if_e	add	local03, #20
2b960     11 25 02 AB |  if_e	rdlong	local04, local03
2b964     14 22 86 A1 |  if_e	sub	local03, #20
2b968     12 1F 02 A1 |  if_e	add	local01, local04
2b96c     0C 22 06 51 |  if_ne	add	local03, #12
2b970     11 25 02 5B |  if_ne	rdlong	local04, local03
2b974     0C 22 86 51 |  if_ne	sub	local03, #12
2b978     12 1F 02 51 |  if_ne	add	local01, local04
2b97c                 | LR__4410
2b97c     0F 15 02 F6 | 	mov	arg02, local01
2b980     11 13 02 F6 | 	mov	arg01, local03
2b984     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2b988     FD 12 0A F6 | 	mov	arg01, result1 wz
2b98c     08 00 90 AD |  if_e	jmp	#LR__4411
2b990                 | '         return _set_dos_error(result);
2b990     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b994     04 00 90 FD | 	jmp	#LR__4412
2b998                 | LR__4411
2b998                 | '     }
2b998                 | '     return offset;
2b998     0F FB 01 F6 | 	mov	result1, local01
2b99c                 | LR__4412
2b99c     A7 F0 03 F6 | 	mov	ptra, fp
2b9a0     B2 00 A0 FD | 	call	#popregs_
2b9a4                 | _fatfs_cc_v_lseek_ret
2b9a4     2D 00 64 FD | 	ret
2b9a8                 | 
2b9a8                 | _fatfs_cc_v_ioctl
2b9a8                 | ' {
2b9a8                 | '     return _seterror( 10 );
2b9a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b9ac     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2b9b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b9b4     01 FA 65 F6 | 	neg	result1, #1
2b9b8                 | _fatfs_cc_v_ioctl_ret
2b9b8     2D 00 64 FD | 	ret
2b9bc                 | 
2b9bc                 | _fatfs_cc_v_mkdir
2b9bc     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2b9c0     FD 12 02 F6 | 	mov	arg01, result1
2b9c4                 | ' 
2b9c4                 | '     r = f_mkdir(name);
2b9c4                 | '     return _set_dos_error(r);
2b9c4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b9c8                 | _fatfs_cc_v_mkdir_ret
2b9c8     2D 00 64 FD | 	ret
2b9cc                 | 
2b9cc                 | _fatfs_cc_v_remove
2b9cc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2b9d0     FD 12 02 F6 | 	mov	arg01, result1
2b9d4                 | ' 
2b9d4                 | '     r = f_unlink(name);
2b9d4                 | '     return _set_dos_error(r);
2b9d4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b9d8                 | _fatfs_cc_v_remove_ret
2b9d8     2D 00 64 FD | 	ret
2b9dc                 | 
2b9dc                 | _fatfs_cc_v_rmdir
2b9dc     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2b9e0     FD 12 02 F6 | 	mov	arg01, result1
2b9e4                 | ' 
2b9e4                 | '     r = f_unlink(name);
2b9e4                 | '     return _set_dos_error(r);
2b9e4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b9e8                 | _fatfs_cc_v_rmdir_ret
2b9e8     2D 00 64 FD | 	ret
2b9ec                 | 
2b9ec                 | _fatfs_cc_v_rename
2b9ec     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2b9f0     FD 12 02 F6 | 	mov	arg01, result1
2b9f4                 | '     return _set_dos_error(r);
2b9f4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2b9f8                 | _fatfs_cc_v_rename_ret
2b9f8     2D 00 64 FD | 	ret
2b9fc                 | 
2b9fc                 | _fatfs_cc_v_open
2b9fc     07 4A 05 F6 | 	mov	COUNT_, #7
2ba00     A8 00 A0 FD | 	call	#pushregs_
2ba04     09 1F 02 F6 | 	mov	local01, arg01
2ba08     0A 21 02 F6 | 	mov	local02, arg02
2ba0c     0B 23 02 F6 | 	mov	local03, arg03
2ba10     03 00 00 FF 
2ba14     3C 12 06 F6 | 	mov	arg01, ##1596
2ba18                 | '     return _gc_alloc(size);
2ba18     10 14 06 F6 | 	mov	arg02, #16
2ba1c     A4 58 BF FD | 	call	#__system___gc_doalloc
2ba20     FD 24 0A F6 | 	mov	local04, result1 wz
2ba24                 | '       return _seterror( 7 );
2ba24     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ba28     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ba2c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ba30     01 FA 65 A6 |  if_e	neg	result1, #1
2ba34     98 00 90 AD |  if_e	jmp	#LR__4426
2ba38     12 13 02 F6 | 	mov	arg01, local04
2ba3c     00 14 06 F6 | 	mov	arg02, #0
2ba40     03 00 00 FF 
2ba44     3C 16 06 F6 | 	mov	arg03, ##1596
2ba48     98 00 A0 FD | 	call	#\builtin_bytefill_
2ba4c                 | '   switch (flags & 3) {
2ba4c     11 27 02 F6 | 	mov	local05, local03
2ba50     03 26 0E F5 | 	and	local05, #3 wz
2ba54     0C 00 90 AD |  if_e	jmp	#LR__4420
2ba58     01 26 0E F2 | 	cmp	local05, #1 wz
2ba5c     0C 00 90 AD |  if_e	jmp	#LR__4421
2ba60     10 00 90 FD | 	jmp	#LR__4422
2ba64                 | LR__4420
2ba64     01 28 06 F6 | 	mov	local06, #1
2ba68                 | '       fs_flags =  0x01 ;
2ba68                 | '       break;
2ba68     0C 00 90 FD | 	jmp	#LR__4423
2ba6c                 | LR__4421
2ba6c     02 28 06 F6 | 	mov	local06, #2
2ba70                 | '       fs_flags =  0x02 ;
2ba70                 | '       break;
2ba70     04 00 90 FD | 	jmp	#LR__4423
2ba74                 | LR__4422
2ba74     03 28 06 F6 | 	mov	local06, #3
2ba78                 | '       fs_flags =  0x01  |  0x02 ;
2ba78                 | '       break;
2ba78                 | LR__4423
2ba78     08 22 CE F7 | 	test	local03, #8 wz
2ba7c     18 28 46 55 |  if_ne	or	local06, #24
2ba80     08 00 90 5D |  if_ne	jmp	#LR__4424
2ba84     20 22 CE F7 | 	test	local03, #32 wz
2ba88     30 28 46 55 |  if_ne	or	local06, #48
2ba8c                 | LR__4424
2ba8c     02 00 00 FF 
2ba90     14 24 06 F1 | 	add	local04, ##1044
2ba94     12 13 02 F6 | 	mov	arg01, local04
2ba98     02 00 00 FF 
2ba9c     14 24 86 F1 | 	sub	local04, ##1044
2baa0     10 15 02 F6 | 	mov	arg02, local02
2baa4     14 17 02 F6 | 	mov	arg03, local06
2baa8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2baac     FD 2A 0A F6 | 	mov	local07, result1 wz
2bab0     14 00 90 AD |  if_e	jmp	#LR__4425
2bab4     12 13 02 F6 | 	mov	arg01, local04
2bab8                 | '     return _gc_free(ptr);
2bab8     14 59 BF FD | 	call	#__system___gc_free
2babc                 | '     free(f);
2babc                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2babc                 | '     return _set_dos_error(r);
2babc     15 13 02 F6 | 	mov	arg01, local07
2bac0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2bac4     08 00 90 FD | 	jmp	#LR__4426
2bac8                 | LR__4425
2bac8     0F 25 62 FC | 	wrlong	local04, local01
2bacc                 | '   }
2bacc                 | '   fil->vfsdata = f;
2bacc                 | '   return 0;
2bacc     00 FA 05 F6 | 	mov	result1, #0
2bad0                 | LR__4426
2bad0     A7 F0 03 F6 | 	mov	ptra, fp
2bad4     B2 00 A0 FD | 	call	#popregs_
2bad8                 | _fatfs_cc_v_open_ret
2bad8     2D 00 64 FD | 	ret
2badc                 | 
2badc                 | _fatfs_cc_v_flush
2badc     09 13 02 FB | 	rdlong	arg01, arg01
2bae0     02 00 00 FF 
2bae4     14 12 0E F1 | 	add	arg01, ##1044 wz
2bae8                 | '         return _seterror( 5 );
2bae8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2baec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2baf0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2baf4     01 FA 65 A6 |  if_e	neg	result1, #1
2baf8     0C 00 90 AD |  if_e	jmp	#LR__4430
2bafc     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2bb00     FD 12 02 F6 | 	mov	arg01, result1
2bb04                 | '     }
2bb04                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2bb04                 | '     result = f_sync(f);
2bb04                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2bb04                 | '     return _set_dos_error(result);
2bb04     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0895
2bb08                 | LR__4430
2bb08                 | _fatfs_cc_v_flush_ret
2bb08     2D 00 64 FD | 	ret
2bb0c                 | 
2bb0c                 | _fatfs_cc_v_init
2bb0c                 | ' {
2bb0c                 | '     return 0;
2bb0c     00 FA 05 F6 | 	mov	result1, #0
2bb10                 | _fatfs_cc_v_init_ret
2bb10     2D 00 64 FD | 	ret
2bb14                 | 
2bb14                 | _fatfs_cc_v_deinit
2bb14     65 01 00 FF 
2bb18     88 14 06 F6 | 	mov	arg02, ##@LR__4626
2bb1c     00 12 06 F6 | 	mov	arg01, #0
2bb20     00 16 06 F6 | 	mov	arg03, #0
2bb24     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2bb28     01 00 00 FF 
2bb2c     08 E4 05 F1 | 	add	objptr, ##520
2bb30     F2 12 02 FB | 	rdlong	arg01, objptr
2bb34     04 E4 05 F1 | 	add	objptr, #4
2bb38     F2 14 02 FB | 	rdlong	arg02, objptr
2bb3c     01 00 00 FF 
2bb40     0C E4 85 F1 | 	sub	objptr, ##524
2bb44     54 40 BF FD | 	call	#__system___freepins
2bb48                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2bb48                 | '     _freepins(f_pinmask);
2bb48                 | '     return 0;
2bb48     00 FA 05 F6 | 	mov	result1, #0
2bb4c                 | _fatfs_cc_v_deinit_ret
2bb4c     2D 00 64 FD | 	ret
2bb50                 | 
2bb50                 | _fatfs_cc_get_vfs
2bb50     01 4A 05 F6 | 	mov	COUNT_, #1
2bb54     A8 00 A0 FD | 	call	#pushregs_
2bb58     09 1F 02 F6 | 	mov	local01, arg01
2bb5c     50 12 06 F6 | 	mov	arg01, #80
2bb60     30 57 BF FD | 	call	#__system___gc_alloc_managed
2bb64     FD 12 02 F6 | 	mov	arg01, result1
2bb68     F2 FA 01 F6 | 	mov	result1, objptr
2bb6c     00 28 04 FF 
2bb70     00 FA 45 F5 | 	or	result1, ##139460608
2bb74     09 FB 61 FC | 	wrlong	result1, arg01
2bb78     F2 FA 01 F6 | 	mov	result1, objptr
2bb7c     00 30 04 FF 
2bb80     00 FA 45 F5 | 	or	result1, ##140509184
2bb84     04 12 06 F1 | 	add	arg01, #4
2bb88     09 FB 61 FC | 	wrlong	result1, arg01
2bb8c     F2 FA 01 F6 | 	mov	result1, objptr
2bb90     00 38 04 FF 
2bb94     00 FA 45 F5 | 	or	result1, ##141557760
2bb98     04 12 06 F1 | 	add	arg01, #4
2bb9c     09 FB 61 FC | 	wrlong	result1, arg01
2bba0     F2 FA 01 F6 | 	mov	result1, objptr
2bba4     00 40 04 FF 
2bba8     00 FA 45 F5 | 	or	result1, ##142606336
2bbac     04 12 06 F1 | 	add	arg01, #4
2bbb0     09 FB 61 FC | 	wrlong	result1, arg01
2bbb4     F2 FA 01 F6 | 	mov	result1, objptr
2bbb8     00 48 04 FF 
2bbbc     00 FA 45 F5 | 	or	result1, ##143654912
2bbc0     04 12 06 F1 | 	add	arg01, #4
2bbc4     09 FB 61 FC | 	wrlong	result1, arg01
2bbc8     04 12 06 F1 | 	add	arg01, #4
2bbcc     09 01 68 FC | 	wrlong	#0, arg01
2bbd0     04 12 06 F1 | 	add	arg01, #4
2bbd4     09 1F 62 FC | 	wrlong	local01, arg01
2bbd8     04 12 06 F1 | 	add	arg01, #4
2bbdc     09 01 68 FC | 	wrlong	#0, arg01
2bbe0     F2 FA 01 F6 | 	mov	result1, objptr
2bbe4     00 50 04 FF 
2bbe8     00 FA 45 F5 | 	or	result1, ##144703488
2bbec     04 12 06 F1 | 	add	arg01, #4
2bbf0     09 FB 61 FC | 	wrlong	result1, arg01
2bbf4     F2 FA 01 F6 | 	mov	result1, objptr
2bbf8     00 58 04 FF 
2bbfc     00 FA 45 F5 | 	or	result1, ##145752064
2bc00     04 12 06 F1 | 	add	arg01, #4
2bc04     09 FB 61 FC | 	wrlong	result1, arg01
2bc08     F2 FA 01 F6 | 	mov	result1, objptr
2bc0c     00 60 04 FF 
2bc10     00 FA 45 F5 | 	or	result1, ##146800640
2bc14     04 12 06 F1 | 	add	arg01, #4
2bc18     09 FB 61 FC | 	wrlong	result1, arg01
2bc1c     F2 FA 01 F6 | 	mov	result1, objptr
2bc20     00 68 04 FF 
2bc24     00 FA 45 F5 | 	or	result1, ##147849216
2bc28     04 12 06 F1 | 	add	arg01, #4
2bc2c     09 FB 61 FC | 	wrlong	result1, arg01
2bc30     F2 FA 01 F6 | 	mov	result1, objptr
2bc34     00 70 04 FF 
2bc38     00 FA 45 F5 | 	or	result1, ##148897792
2bc3c     04 12 06 F1 | 	add	arg01, #4
2bc40     09 FB 61 FC | 	wrlong	result1, arg01
2bc44     F2 FA 01 F6 | 	mov	result1, objptr
2bc48     00 78 04 FF 
2bc4c     00 FA 45 F5 | 	or	result1, ##149946368
2bc50     04 12 06 F1 | 	add	arg01, #4
2bc54     09 FB 61 FC | 	wrlong	result1, arg01
2bc58     F2 FA 01 F6 | 	mov	result1, objptr
2bc5c     00 80 04 FF 
2bc60     00 FA 45 F5 | 	or	result1, ##150994944
2bc64     04 12 06 F1 | 	add	arg01, #4
2bc68     09 FB 61 FC | 	wrlong	result1, arg01
2bc6c     F2 FA 01 F6 | 	mov	result1, objptr
2bc70     00 88 04 FF 
2bc74     00 FA 45 F5 | 	or	result1, ##152043520
2bc78     04 12 06 F1 | 	add	arg01, #4
2bc7c     09 FB 61 FC | 	wrlong	result1, arg01
2bc80     F2 FA 01 F6 | 	mov	result1, objptr
2bc84     00 90 04 FF 
2bc88     00 FA 45 F5 | 	or	result1, ##153092096
2bc8c     04 12 06 F1 | 	add	arg01, #4
2bc90     09 FB 61 FC | 	wrlong	result1, arg01
2bc94     F2 FA 01 F6 | 	mov	result1, objptr
2bc98     00 98 04 FF 
2bc9c     00 FA 45 F5 | 	or	result1, ##154140672
2bca0     04 12 06 F1 | 	add	arg01, #4
2bca4     09 FB 61 FC | 	wrlong	result1, arg01
2bca8     F2 FA 01 F6 | 	mov	result1, objptr
2bcac     00 A0 04 FF 
2bcb0     00 FA 45 F5 | 	or	result1, ##155189248
2bcb4     04 12 06 F1 | 	add	arg01, #4
2bcb8     09 FB 61 FC | 	wrlong	result1, arg01
2bcbc     F2 FA 01 F6 | 	mov	result1, objptr
2bcc0     00 A8 04 FF 
2bcc4     00 FA 45 F5 | 	or	result1, ##156237824
2bcc8     04 12 06 F1 | 	add	arg01, #4
2bccc     09 FB 61 FC | 	wrlong	result1, arg01
2bcd0     4C 12 86 F1 | 	sub	arg01, #76
2bcd4                 | ' 
2bcd4                 | '     v->close = &v_close;
2bcd4                 | '     v->read = &v_read;
2bcd4                 | '     v->write = &v_write;
2bcd4                 | '     v->lseek = &v_lseek;
2bcd4                 | '     v->ioctl = &v_ioctl;
2bcd4                 | '     v->flush = 0;
2bcd4                 | '     v->vfs_data = ptr;
2bcd4                 | '     v->reserved = 0;
2bcd4                 | ' 
2bcd4                 | '     v->open = &v_open;
2bcd4                 | '     v->creat = &v_creat;
2bcd4                 | '     v->opendir = &v_opendir;
2bcd4                 | '     v->closedir = &v_closedir;
2bcd4                 | '     v->readdir = &v_readdir;
2bcd4                 | '     v->stat = &v_stat;
2bcd4                 | ' 
2bcd4                 | '     v->mkdir = &v_mkdir;
2bcd4                 | '     v->rmdir = &v_rmdir;
2bcd4                 | ' 
2bcd4                 | '     v->remove = &v_remove;
2bcd4                 | '     v->rename = &v_rename;
2bcd4                 | ' 
2bcd4                 | '     v->init = &v_init;
2bcd4                 | '     v->deinit = &v_deinit;
2bcd4                 | ' 
2bcd4                 | '     return v;
2bcd4     09 FB 01 F6 | 	mov	result1, arg01
2bcd8     A7 F0 03 F6 | 	mov	ptra, fp
2bcdc     B2 00 A0 FD | 	call	#popregs_
2bce0                 | _fatfs_cc_get_vfs_ret
2bce0     2D 00 64 FD | 	ret
2bce4                 | 
2bce4                 | _fatfs_cc_xmit_mmc_1042
2bce4     01 00 00 FF 
2bce8     10 E4 05 F1 | 	add	objptr, ##528
2bcec     F2 00 02 FB | 	rdlong	_var01, objptr
2bcf0     08 E4 05 F1 | 	add	objptr, #8
2bcf4     F2 02 02 FB | 	rdlong	_var02, objptr
2bcf8     01 00 00 FF 
2bcfc     18 E4 85 F1 | 	sub	objptr, ##536
2bd00     40 02 62 FD | 	dirl	_var02
2bd04     28 02 64 FD | 	setq	#1
2bd08     09 05 02 FB | 	rdlong	_var03, arg01
2bd0c     69 04 62 FD | 	rev	_var03
2bd10     1B 04 FE F9 | 	movbyts	_var03, #27
2bd14     01 05 22 FC | 	wypin	_var03, _var02
2bd18     0A 05 02 F6 | 	mov	_var03, arg02
2bd1c     02 14 4E F0 | 	shr	arg02, #2 wz
2bd20     03 04 66 F0 | 	shl	_var03, #3
2bd24     00 05 22 FC | 	wypin	_var03, _var01
2bd28     41 02 62 FD | 	dirh	_var02
2bd2c     08 12 06 F1 | 	add	arg01, #8
2bd30     69 06 62 FD | 	rev	_var04
2bd34     1B 06 FE F9 | 	movbyts	_var04, #27
2bd38                 | LR__4440
2bd38     01 07 22 5C |  if_ne	wypin	_var04, _var02
2bd3c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2bd40     04 12 06 51 |  if_ne	add	arg01, #4
2bd44     69 06 62 5D |  if_ne	rev	_var04
2bd48     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2bd4c                 | LR__4441
2bd4c     40 02 72 5D |  if_ne	testp	_var02 wc
2bd50     F8 FF 9F 1D |  if_a	jmp	#LR__4441
2bd54     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4440
2bd58                 | LR__4442
2bd58     40 00 72 FD | 	testp	_var01 wc
2bd5c     F8 FF 9F 3D |  if_ae	jmp	#LR__4442
2bd60     40 02 62 FD | 	dirl	_var02
2bd64     FF FF FF FF 
2bd68     01 FF 2B FC | 	wypin	##-1, _var02
2bd6c     41 02 62 FD | 	dirh	_var02
2bd70                 | _fatfs_cc_xmit_mmc_1042_ret
2bd70     2D 00 64 FD | 	ret
2bd74                 | 
2bd74                 | _fatfs_cc_rcvr_mmc_1049
2bd74     01 00 00 FF 
2bd78     10 E4 05 F1 | 	add	objptr, ##528
2bd7c     F2 00 02 FB | 	rdlong	_var01, objptr
2bd80     0C E4 05 F1 | 	add	objptr, #12
2bd84     F2 02 02 FB | 	rdlong	_var02, objptr
2bd88     01 00 00 FF 
2bd8c     1C E4 85 F1 | 	sub	objptr, ##540
2bd90     01 03 08 FC | 	akpin	_var02
2bd94     0A 05 0A F6 | 	mov	_var03, arg02 wz
2bd98     02 04 4E F0 | 	shr	_var03, #2 wz
2bd9c     30 00 90 AD |  if_e	jmp	#LR__4452
2bda0     02 07 02 F6 | 	mov	_var04, _var03
2bda4     05 06 66 F0 | 	shl	_var04, #5
2bda8     00 07 22 FC | 	wypin	_var04, _var01
2bdac     01 7F 18 FC | 	wxpin	#63, _var02
2bdb0                 | LR__4450
2bdb0                 | LR__4451
2bdb0     40 02 72 FD | 	testp	_var02 wc
2bdb4     F8 FF 9F 3D |  if_ae	jmp	#LR__4451
2bdb8     01 07 8A FA | 	rdpin	_var04, _var02
2bdbc     69 06 62 FD | 	rev	_var04
2bdc0     1B 06 FE F9 | 	movbyts	_var04, #27
2bdc4     09 07 62 FC | 	wrlong	_var04, arg01
2bdc8     04 12 06 F1 | 	add	arg01, #4
2bdcc     F8 05 6E FB | 	djnz	_var03, #LR__4450
2bdd0                 | LR__4452
2bdd0     03 14 0E F5 | 	and	arg02, #3 wz
2bdd4     24 00 90 AD |  if_e	jmp	#LR__4455
2bdd8     01 4F 18 FC | 	wxpin	#39, _var02
2bddc                 | LR__4453
2bddc     00 11 28 FC | 	wypin	#8, _var01
2bde0                 | LR__4454
2bde0     40 02 72 FD | 	testp	_var02 wc
2bde4     F8 FF 9F 3D |  if_ae	jmp	#LR__4454
2bde8     01 07 8A FA | 	rdpin	_var04, _var02
2bdec     69 06 62 FD | 	rev	_var04
2bdf0     09 07 42 FC | 	wrbyte	_var04, arg01
2bdf4     01 12 06 F1 | 	add	arg01, #1
2bdf8     F8 15 6E FB | 	djnz	arg02, #LR__4453
2bdfc                 | LR__4455
2bdfc                 | _fatfs_cc_rcvr_mmc_1049_ret
2bdfc     2D 00 64 FD | 	ret
2be00                 | 
2be00                 | _fatfs_cc_wait_ready_1053
2be00     01 4A 05 F6 | 	mov	COUNT_, #1
2be04     A8 00 A0 FD | 	call	#pushregs_
2be08     10 F0 07 F1 | 	add	ptra, #16
2be0c     1A FA 61 FD | 	getct	result1
2be10     08 4E 05 F1 | 	add	fp, #8
2be14     A7 FA 61 FC | 	wrlong	result1, fp
2be18     14 1E 06 FB | 	rdlong	local01, #20
2be1c     01 1E 46 F0 | 	shr	local01, #1
2be20     04 4E 05 F1 | 	add	fp, #4
2be24     A7 1E 62 FC | 	wrlong	local01, fp
2be28     0C 4E 85 F1 | 	sub	fp, #12
2be2c                 | ' {
2be2c                 | ' 	BYTE d;
2be2c                 | ' 	UINT tmr, tmout;
2be2c                 | ' 
2be2c                 | ' 	tmr = _cnt();
2be2c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2be2c                 | ' 	for(;;) {
2be2c                 | LR__4460
2be2c     04 4E 05 F1 | 	add	fp, #4
2be30     A7 12 02 F6 | 	mov	arg01, fp
2be34     04 4E 85 F1 | 	sub	fp, #4
2be38     01 14 06 F6 | 	mov	arg02, #1
2be3c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2be40     04 4E 05 F1 | 	add	fp, #4
2be44     A7 1E C2 FA | 	rdbyte	local01, fp
2be48     04 4E 85 F1 | 	sub	fp, #4
2be4c     FF 1E 0E F2 | 	cmp	local01, #255 wz
2be50     01 FA 05 A6 |  if_e	mov	result1, #1
2be54     28 00 90 AD |  if_e	jmp	#LR__4461
2be58     1A FA 61 FD | 	getct	result1
2be5c     08 4E 05 F1 | 	add	fp, #8
2be60     A7 1E 02 FB | 	rdlong	local01, fp
2be64     0F FB 81 F1 | 	sub	result1, local01
2be68     04 4E 05 F1 | 	add	fp, #4
2be6c     A7 1E 02 FB | 	rdlong	local01, fp
2be70     0C 4E 85 F1 | 	sub	fp, #12
2be74     0F FB 11 F2 | 	cmp	result1, local01 wc
2be78     00 FA 05 36 |  if_ae	mov	result1, #0
2be7c     AC FF 9F CD |  if_b	jmp	#LR__4460
2be80                 | LR__4461
2be80     A7 F0 03 F6 | 	mov	ptra, fp
2be84     B2 00 A0 FD | 	call	#popregs_
2be88                 | _fatfs_cc_wait_ready_1053_ret
2be88     2D 00 64 FD | 	ret
2be8c                 | 
2be8c                 | _fatfs_cc_deselect_1059
2be8c     00 4A 05 F6 | 	mov	COUNT_, #0
2be90     A8 00 A0 FD | 	call	#pushregs_
2be94     14 F0 07 F1 | 	add	ptra, #20
2be98     01 00 00 FF 
2be9c     14 E4 05 F1 | 	add	objptr, ##532
2bea0     F2 14 02 FB | 	rdlong	arg02, objptr
2bea4     04 4E 05 F1 | 	add	fp, #4
2bea8     A7 14 62 FC | 	wrlong	arg02, fp
2beac     04 E4 85 F1 | 	sub	objptr, #4
2beb0     F2 14 02 FB | 	rdlong	arg02, objptr
2beb4     04 4E 05 F1 | 	add	fp, #4
2beb8     A7 14 62 FC | 	wrlong	arg02, fp
2bebc     08 E4 05 F1 | 	add	objptr, #8
2bec0     F2 14 02 FB | 	rdlong	arg02, objptr
2bec4     04 4E 05 F1 | 	add	fp, #4
2bec8     A7 14 62 FC | 	wrlong	arg02, fp
2becc     04 E4 05 F1 | 	add	objptr, #4
2bed0     F2 14 02 FB | 	rdlong	arg02, objptr
2bed4     01 00 00 FF 
2bed8     1C E4 85 F1 | 	sub	objptr, ##540
2bedc     04 4E 05 F1 | 	add	fp, #4
2bee0     A7 14 62 FC | 	wrlong	arg02, fp
2bee4     0C 4E 85 F1 | 	sub	fp, #12
2bee8     A7 12 02 FB | 	rdlong	arg01, fp
2beec     04 4E 85 F1 | 	sub	fp, #4
2bef0     59 12 62 FD | 	drvh	arg01
2bef4     1F 20 64 FD | 	waitx	#16
2bef8     A7 12 02 F6 | 	mov	arg01, fp
2befc     01 14 06 F6 | 	mov	arg02, #1
2bf00     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2bf04     A7 F0 03 F6 | 	mov	ptra, fp
2bf08     B2 00 A0 FD | 	call	#popregs_
2bf0c                 | _fatfs_cc_deselect_1059_ret
2bf0c     2D 00 64 FD | 	ret
2bf10                 | 
2bf10                 | _fatfs_cc_select_1063
2bf10     00 4A 05 F6 | 	mov	COUNT_, #0
2bf14     A8 00 A0 FD | 	call	#pushregs_
2bf18     10 F0 07 F1 | 	add	ptra, #16
2bf1c     01 00 00 FF 
2bf20     14 E4 05 F1 | 	add	objptr, ##532
2bf24     F2 14 02 FB | 	rdlong	arg02, objptr
2bf28     08 4E 05 F1 | 	add	fp, #8
2bf2c     A7 14 62 FC | 	wrlong	arg02, fp
2bf30     08 E4 05 F1 | 	add	objptr, #8
2bf34     F2 12 02 FB | 	rdlong	arg01, objptr
2bf38     01 00 00 FF 
2bf3c     1C E4 85 F1 | 	sub	objptr, ##540
2bf40     04 4E 05 F1 | 	add	fp, #4
2bf44     A7 12 62 FC | 	wrlong	arg01, fp
2bf48     50 12 62 FD | 	fltl	arg01
2bf4c     04 4E 85 F1 | 	sub	fp, #4
2bf50     A7 12 02 FB | 	rdlong	arg01, fp
2bf54     58 12 62 FD | 	drvl	arg01
2bf58     1F 20 64 FD | 	waitx	#16
2bf5c     04 4E 05 F1 | 	add	fp, #4
2bf60     A7 12 02 FB | 	rdlong	arg01, fp
2bf64     41 12 62 FD | 	dirh	arg01
2bf68     08 4E 85 F1 | 	sub	fp, #8
2bf6c     A7 12 02 F6 | 	mov	arg01, fp
2bf70     04 4E 85 F1 | 	sub	fp, #4
2bf74     01 14 06 F6 | 	mov	arg02, #1
2bf78     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2bf7c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1053
2bf80     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf84     01 FA 05 56 |  if_ne	mov	result1, #1
2bf88     08 00 90 5D |  if_ne	jmp	#LR__4470
2bf8c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1059
2bf90                 | ' 
2bf90                 | ' 	deselect();
2bf90                 | ' 	return 0;
2bf90     00 FA 05 F6 | 	mov	result1, #0
2bf94                 | LR__4470
2bf94     A7 F0 03 F6 | 	mov	ptra, fp
2bf98     B2 00 A0 FD | 	call	#popregs_
2bf9c                 | _fatfs_cc_select_1063_ret
2bf9c     2D 00 64 FD | 	ret
2bfa0                 | 
2bfa0                 | _fatfs_cc_rcvr_datablock_1067
2bfa0     01 4A 05 F6 | 	mov	COUNT_, #1
2bfa4     A8 00 A0 FD | 	call	#pushregs_
2bfa8     18 F0 07 F1 | 	add	ptra, #24
2bfac     04 4E 05 F1 | 	add	fp, #4
2bfb0     A7 12 62 FC | 	wrlong	arg01, fp
2bfb4     04 4E 05 F1 | 	add	fp, #4
2bfb8     A7 14 62 FC | 	wrlong	arg02, fp
2bfbc     1A FA 61 FD | 	getct	result1
2bfc0     08 4E 05 F1 | 	add	fp, #8
2bfc4     A7 FA 61 FC | 	wrlong	result1, fp
2bfc8     14 1E 06 FB | 	rdlong	local01, #20
2bfcc     03 1E 46 F0 | 	shr	local01, #3
2bfd0     04 4E 05 F1 | 	add	fp, #4
2bfd4     A7 1E 62 FC | 	wrlong	local01, fp
2bfd8     14 4E 85 F1 | 	sub	fp, #20
2bfdc                 | ' 	BYTE *buff,
2bfdc                 | ' 	UINT btr
2bfdc                 | ' )
2bfdc                 | ' {
2bfdc                 | ' 	BYTE d[2];
2bfdc                 | ' 	UINT tmr, tmout;
2bfdc                 | ' 
2bfdc                 | ' 	tmr = _cnt();
2bfdc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2bfdc                 | ' 	for(;;) {
2bfdc                 | LR__4480
2bfdc     0C 4E 05 F1 | 	add	fp, #12
2bfe0     A7 12 02 F6 | 	mov	arg01, fp
2bfe4     0C 4E 85 F1 | 	sub	fp, #12
2bfe8     01 14 06 F6 | 	mov	arg02, #1
2bfec     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2bff0     0C 4E 05 F1 | 	add	fp, #12
2bff4     A7 1E C2 FA | 	rdbyte	local01, fp
2bff8     0C 4E 85 F1 | 	sub	fp, #12
2bffc     FF 1E 0E F2 | 	cmp	local01, #255 wz
2c000     28 00 90 5D |  if_ne	jmp	#LR__4481
2c004     1A FA 61 FD | 	getct	result1
2c008     FD 1E 02 F6 | 	mov	local01, result1
2c00c     10 4E 05 F1 | 	add	fp, #16
2c010     A7 14 02 FB | 	rdlong	arg02, fp
2c014     0A 1F 82 F1 | 	sub	local01, arg02
2c018     04 4E 05 F1 | 	add	fp, #4
2c01c     A7 14 02 FB | 	rdlong	arg02, fp
2c020     14 4E 85 F1 | 	sub	fp, #20
2c024     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2c028     B0 FF 9F CD |  if_b	jmp	#LR__4480
2c02c                 | LR__4481
2c02c     0C 4E 05 F1 | 	add	fp, #12
2c030     A7 1E C2 FA | 	rdbyte	local01, fp
2c034     0C 4E 85 F1 | 	sub	fp, #12
2c038     FE 1E 0E F2 | 	cmp	local01, #254 wz
2c03c     00 FA 05 56 |  if_ne	mov	result1, #0
2c040     30 00 90 5D |  if_ne	jmp	#LR__4482
2c044     04 4E 05 F1 | 	add	fp, #4
2c048     A7 12 02 FB | 	rdlong	arg01, fp
2c04c     04 4E 05 F1 | 	add	fp, #4
2c050     A7 14 02 FB | 	rdlong	arg02, fp
2c054     08 4E 85 F1 | 	sub	fp, #8
2c058     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2c05c     0C 4E 05 F1 | 	add	fp, #12
2c060     A7 12 02 F6 | 	mov	arg01, fp
2c064     0C 4E 85 F1 | 	sub	fp, #12
2c068     02 14 06 F6 | 	mov	arg02, #2
2c06c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2c070                 | ' 
2c070                 | ' 	rcvr_mmc(buff, btr);
2c070                 | ' 	rcvr_mmc(d, 2);
2c070                 | ' 
2c070                 | ' 	return 1;
2c070     01 FA 05 F6 | 	mov	result1, #1
2c074                 | LR__4482
2c074     A7 F0 03 F6 | 	mov	ptra, fp
2c078     B2 00 A0 FD | 	call	#popregs_
2c07c                 | _fatfs_cc_rcvr_datablock_1067_ret
2c07c     2D 00 64 FD | 	ret
2c080                 | 
2c080                 | _fatfs_cc_xmit_datablock_1069
2c080     00 4A 05 F6 | 	mov	COUNT_, #0
2c084     A8 00 A0 FD | 	call	#pushregs_
2c088     10 F0 07 F1 | 	add	ptra, #16
2c08c     04 4E 05 F1 | 	add	fp, #4
2c090     A7 12 62 FC | 	wrlong	arg01, fp
2c094     04 4E 05 F1 | 	add	fp, #4
2c098     A7 14 42 FC | 	wrbyte	arg02, fp
2c09c     08 4E 85 F1 | 	sub	fp, #8
2c0a0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1053
2c0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0a8     00 FA 05 A6 |  if_e	mov	result1, #0
2c0ac     90 00 90 AD |  if_e	jmp	#LR__4491
2c0b0     08 4E 05 F1 | 	add	fp, #8
2c0b4     A7 14 C2 FA | 	rdbyte	arg02, fp
2c0b8     04 4E 05 F1 | 	add	fp, #4
2c0bc     A7 14 42 FC | 	wrbyte	arg02, fp
2c0c0     A7 12 02 F6 | 	mov	arg01, fp
2c0c4     0C 4E 85 F1 | 	sub	fp, #12
2c0c8     01 14 06 F6 | 	mov	arg02, #1
2c0cc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1042
2c0d0     08 4E 05 F1 | 	add	fp, #8
2c0d4     A7 14 C2 FA | 	rdbyte	arg02, fp
2c0d8     08 4E 85 F1 | 	sub	fp, #8
2c0dc     FD 14 0E F2 | 	cmp	arg02, #253 wz
2c0e0     58 00 90 AD |  if_e	jmp	#LR__4490
2c0e4     04 4E 05 F1 | 	add	fp, #4
2c0e8     A7 12 02 FB | 	rdlong	arg01, fp
2c0ec     04 4E 85 F1 | 	sub	fp, #4
2c0f0     09 14 C6 F9 | 	decod	arg02, #9
2c0f4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1042
2c0f8     0C 4E 05 F1 | 	add	fp, #12
2c0fc     A7 12 02 F6 | 	mov	arg01, fp
2c100     0C 4E 85 F1 | 	sub	fp, #12
2c104     02 14 06 F6 | 	mov	arg02, #2
2c108     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2c10c     0C 4E 05 F1 | 	add	fp, #12
2c110     A7 12 02 F6 | 	mov	arg01, fp
2c114     0C 4E 85 F1 | 	sub	fp, #12
2c118     01 14 06 F6 | 	mov	arg02, #1
2c11c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2c120     0C 4E 05 F1 | 	add	fp, #12
2c124     A7 14 C2 FA | 	rdbyte	arg02, fp
2c128     0C 4E 85 F1 | 	sub	fp, #12
2c12c     1F 14 06 F5 | 	and	arg02, #31
2c130     05 14 0E F2 | 	cmp	arg02, #5 wz
2c134                 | ' 			return 0;
2c134     00 FA 05 56 |  if_ne	mov	result1, #0
2c138     04 00 90 5D |  if_ne	jmp	#LR__4491
2c13c                 | LR__4490
2c13c                 | ' 	}
2c13c                 | ' 
2c13c                 | ' 	return 1;
2c13c     01 FA 05 F6 | 	mov	result1, #1
2c140                 | LR__4491
2c140     A7 F0 03 F6 | 	mov	ptra, fp
2c144     B2 00 A0 FD | 	call	#popregs_
2c148                 | _fatfs_cc_xmit_datablock_1069_ret
2c148     2D 00 64 FD | 	ret
2c14c                 | 
2c14c                 | _fatfs_cc_send_cmd_1073
2c14c     01 4A 05 F6 | 	mov	COUNT_, #1
2c150     A8 00 A0 FD | 	call	#pushregs_
2c154     1C F0 07 F1 | 	add	ptra, #28
2c158                 | _fatfs_cc_send_cmd_1073_enter
2c158     04 4E 05 F1 | 	add	fp, #4
2c15c     A7 12 42 FC | 	wrbyte	arg01, fp
2c160     04 4E 05 F1 | 	add	fp, #4
2c164     A7 14 62 FC | 	wrlong	arg02, fp
2c168     04 4E 85 F1 | 	sub	fp, #4
2c16c     A7 FA C1 FA | 	rdbyte	result1, fp
2c170     04 4E 85 F1 | 	sub	fp, #4
2c174     80 FA CD F7 | 	test	result1, #128 wz
2c178     44 00 90 AD |  if_e	jmp	#LR__4500
2c17c     04 4E 05 F1 | 	add	fp, #4
2c180     A7 14 C2 FA | 	rdbyte	arg02, fp
2c184     7F 14 06 F5 | 	and	arg02, #127
2c188     A7 14 42 FC | 	wrbyte	arg02, fp
2c18c     04 4E 85 F1 | 	sub	fp, #4
2c190     37 12 06 F6 | 	mov	arg01, #55
2c194     00 14 06 F6 | 	mov	arg02, #0
2c198     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1073
2c19c     0C 4E 05 F1 | 	add	fp, #12
2c1a0     A7 FA 41 FC | 	wrbyte	result1, fp
2c1a4     A7 14 C2 FA | 	rdbyte	arg02, fp
2c1a8     0C 4E 85 F1 | 	sub	fp, #12
2c1ac     02 14 16 F2 | 	cmp	arg02, #2 wc
2c1b0     0C 4E 05 31 |  if_ae	add	fp, #12
2c1b4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2c1b8     0C 4E 85 31 |  if_ae	sub	fp, #12
2c1bc     6C 01 90 3D |  if_ae	jmp	#LR__4504
2c1c0                 | LR__4500
2c1c0     04 4E 05 F1 | 	add	fp, #4
2c1c4     A7 14 C2 FA | 	rdbyte	arg02, fp
2c1c8     04 4E 85 F1 | 	sub	fp, #4
2c1cc     0C 14 0E F2 | 	cmp	arg02, #12 wz
2c1d0     14 00 90 AD |  if_e	jmp	#LR__4501
2c1d4     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1059
2c1d8     34 FD BF FD | 	call	#_fatfs_cc_select_1063
2c1dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1e0     FF FA 05 A6 |  if_e	mov	result1, #255
2c1e4     44 01 90 AD |  if_e	jmp	#LR__4504
2c1e8                 | LR__4501
2c1e8     04 4E 05 F1 | 	add	fp, #4
2c1ec     A7 14 C2 FA | 	rdbyte	arg02, fp
2c1f0     40 FA 05 F6 | 	mov	result1, #64
2c1f4     0A FB 41 F5 | 	or	result1, arg02
2c1f8     10 4E 05 F1 | 	add	fp, #16
2c1fc     A7 FA 41 FC | 	wrbyte	result1, fp
2c200     0C 4E 85 F1 | 	sub	fp, #12
2c204     A7 FA 01 FB | 	rdlong	result1, fp
2c208     18 FA 45 F0 | 	shr	result1, #24
2c20c     0D 4E 05 F1 | 	add	fp, #13
2c210     A7 FA 41 FC | 	wrbyte	result1, fp
2c214     0D 4E 85 F1 | 	sub	fp, #13
2c218     A7 FA 01 FB | 	rdlong	result1, fp
2c21c     10 FA 45 F0 | 	shr	result1, #16
2c220     0E 4E 05 F1 | 	add	fp, #14
2c224     A7 FA 41 FC | 	wrbyte	result1, fp
2c228     0E 4E 85 F1 | 	sub	fp, #14
2c22c     A7 FA 01 FB | 	rdlong	result1, fp
2c230     08 FA 45 F0 | 	shr	result1, #8
2c234     0F 4E 05 F1 | 	add	fp, #15
2c238     A7 FA 41 FC | 	wrbyte	result1, fp
2c23c     0F 4E 85 F1 | 	sub	fp, #15
2c240     A7 FA 01 FB | 	rdlong	result1, fp
2c244     10 4E 05 F1 | 	add	fp, #16
2c248     A7 FA 41 FC | 	wrbyte	result1, fp
2c24c     0C 4E 85 F1 | 	sub	fp, #12
2c250     A7 02 48 FC | 	wrbyte	#1, fp
2c254     08 4E 85 F1 | 	sub	fp, #8
2c258     A7 FA C9 FA | 	rdbyte	result1, fp wz
2c25c     04 4E 85 F1 | 	sub	fp, #4
2c260     0C 4E 05 A1 |  if_e	add	fp, #12
2c264     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2c268     0C 4E 85 A1 |  if_e	sub	fp, #12
2c26c     04 4E 05 F1 | 	add	fp, #4
2c270     A7 FA C1 FA | 	rdbyte	result1, fp
2c274     04 4E 85 F1 | 	sub	fp, #4
2c278     08 FA 0D F2 | 	cmp	result1, #8 wz
2c27c     0C 4E 05 A1 |  if_e	add	fp, #12
2c280     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2c284     0C 4E 85 A1 |  if_e	sub	fp, #12
2c288     0C 4E 05 F1 | 	add	fp, #12
2c28c     A7 14 C2 FA | 	rdbyte	arg02, fp
2c290     0D 4E 05 F1 | 	add	fp, #13
2c294     A7 14 42 FC | 	wrbyte	arg02, fp
2c298     05 4E 85 F1 | 	sub	fp, #5
2c29c     A7 12 02 F6 | 	mov	arg01, fp
2c2a0     14 4E 85 F1 | 	sub	fp, #20
2c2a4     06 14 06 F6 | 	mov	arg02, #6
2c2a8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1042
2c2ac     04 4E 05 F1 | 	add	fp, #4
2c2b0     A7 1E C2 FA | 	rdbyte	local01, fp
2c2b4     04 4E 85 F1 | 	sub	fp, #4
2c2b8     0C 1E 0E F2 | 	cmp	local01, #12 wz
2c2bc     10 4E 05 A1 |  if_e	add	fp, #16
2c2c0     A7 12 02 A6 |  if_e	mov	arg01, fp
2c2c4     10 4E 85 A1 |  if_e	sub	fp, #16
2c2c8     01 14 06 A6 |  if_e	mov	arg02, #1
2c2cc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1049
2c2d0     0C 4E 05 F1 | 	add	fp, #12
2c2d4     A7 14 48 FC | 	wrbyte	#10, fp
2c2d8     0C 4E 85 F1 | 	sub	fp, #12
2c2dc                 | ' 	n = 10;
2c2dc                 | ' 	do
2c2dc                 | LR__4502
2c2dc     10 4E 05 F1 | 	add	fp, #16
2c2e0     A7 12 02 F6 | 	mov	arg01, fp
2c2e4     10 4E 85 F1 | 	sub	fp, #16
2c2e8     01 14 06 F6 | 	mov	arg02, #1
2c2ec     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1049
2c2f0     10 4E 05 F1 | 	add	fp, #16
2c2f4     A7 1E C2 FA | 	rdbyte	local01, fp
2c2f8     10 4E 85 F1 | 	sub	fp, #16
2c2fc     80 1E CE F7 | 	test	local01, #128 wz
2c300     1C 00 90 AD |  if_e	jmp	#LR__4503
2c304     0C 4E 05 F1 | 	add	fp, #12
2c308     A7 1E C2 FA | 	rdbyte	local01, fp
2c30c     01 1E 86 F1 | 	sub	local01, #1
2c310     A7 1E 42 FC | 	wrbyte	local01, fp
2c314     A7 1E CA FA | 	rdbyte	local01, fp wz
2c318     0C 4E 85 F1 | 	sub	fp, #12
2c31c     BC FF 9F 5D |  if_ne	jmp	#LR__4502
2c320                 | LR__4503
2c320                 | ' 
2c320                 | ' 	return d;
2c320     10 4E 05 F1 | 	add	fp, #16
2c324     A7 FA C1 FA | 	rdbyte	result1, fp
2c328     10 4E 85 F1 | 	sub	fp, #16
2c32c                 | LR__4504
2c32c     A7 F0 03 F6 | 	mov	ptra, fp
2c330     B2 00 A0 FD | 	call	#popregs_
2c334                 | _fatfs_cc_send_cmd_1073_ret
2c334     2D 00 64 FD | 	ret
2c338                 | 
2c338                 | _fatfs_cc_disk_deinitialize
2c338     03 4A 05 F6 | 	mov	COUNT_, #3
2c33c     A8 00 A0 FD | 	call	#pushregs_
2c340     00 12 4E F2 | 	cmps	arg01, #0 wz
2c344     01 00 00 FF 
2c348     14 E4 05 F1 | 	add	objptr, ##532
2c34c     F2 12 02 FB | 	rdlong	arg01, objptr
2c350     04 E4 85 F1 | 	sub	objptr, #4
2c354     F2 1E 02 FB | 	rdlong	local01, objptr
2c358     08 E4 05 F1 | 	add	objptr, #8
2c35c     F2 20 02 FB | 	rdlong	local02, objptr
2c360     04 E4 05 F1 | 	add	objptr, #4
2c364     F2 22 02 FB | 	rdlong	local03, objptr
2c368     01 00 00 FF 
2c36c     1C E4 85 F1 | 	sub	objptr, ##540
2c370                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c370                 | '         return RES_NOTRDY;
2c370     03 FA 05 56 |  if_ne	mov	result1, #3
2c374     2C 00 90 5D |  if_ne	jmp	#LR__4510
2c378     50 12 62 FD | 	fltl	arg01
2c37c     09 01 08 FC | 	wrpin	#0, arg01
2c380     50 1E 62 FD | 	fltl	local01
2c384     0F 01 08 FC | 	wrpin	#0, local01
2c388     50 20 62 FD | 	fltl	local02
2c38c     10 01 08 FC | 	wrpin	#0, local02
2c390     50 22 62 FD | 	fltl	local03
2c394     11 01 08 FC | 	wrpin	#0, local03
2c398     0A 12 06 F6 | 	mov	arg01, #10
2c39c     A0 13 BF FD | 	call	#__system___waitms
2c3a0                 | '     }
2c3a0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c3a0                 | '     _pinclear(PIN_SS);
2c3a0                 | '     _pinclear(PIN_CLK);
2c3a0                 | '     _pinclear(PIN_DI);
2c3a0                 | '     _pinclear(PIN_DO);
2c3a0                 | ' 
2c3a0                 | '     _waitms(10);
2c3a0                 | ' 
2c3a0                 | '     return 0;
2c3a0     00 FA 05 F6 | 	mov	result1, #0
2c3a4                 | LR__4510
2c3a4     A7 F0 03 F6 | 	mov	ptra, fp
2c3a8     B2 00 A0 FD | 	call	#popregs_
2c3ac                 | _fatfs_cc_disk_deinitialize_ret
2c3ac     2D 00 64 FD | 	ret
2c3b0                 | 
2c3b0                 | _fatfs_cc_gettimeofday
2c3b0     04 4A 05 F6 | 	mov	COUNT_, #4
2c3b4     A8 00 A0 FD | 	call	#pushregs_
2c3b8     09 1F 02 F6 | 	mov	local01, arg01
2c3bc     5C 0F BF FD | 	call	#__system___getus
2c3c0     FD 12 02 F6 | 	mov	arg01, result1
2c3c4     02 00 00 FF 
2c3c8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2c3cc     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2c3d0     09 FB 01 F6 | 	mov	result1, arg01
2c3d4     10 FB 81 F1 | 	sub	result1, local02
2c3d8     A1 07 00 FF 
2c3dc     40 FA 15 FD | 	qdiv	result1, ##1000000
2c3e0     02 00 00 FF 
2c3e4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2c3e8     18 20 62 FD | 	getqx	local02
2c3ec     A1 07 00 FF 
2c3f0     40 FA 15 FD | 	qdiv	result1, ##1000000
2c3f4     00 20 0E F2 | 	cmp	local02, #0 wz
2c3f8     19 22 62 FD | 	getqy	local03
2c3fc     28 00 90 AD |  if_e	jmp	#LR__4520
2c400     02 00 00 FF 
2c404     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2c408     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2c40c     10 25 02 F1 | 	add	local04, local02
2c410     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2c414     11 13 82 F1 | 	sub	arg01, local03
2c418     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2c41c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2c420     02 00 00 FF 
2c424     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2c428                 | LR__4520
2c428     02 00 00 FF 
2c42c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2c430     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2c434     02 00 00 FF 
2c438     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2c43c     0F 25 62 FC | 	wrlong	local04, local01
2c440     04 1E 06 F1 | 	add	local01, #4
2c444     0F 23 62 FC | 	wrlong	local03, local01
2c448                 | '         lastsec += secs;
2c448                 | '         lastus = now - leftover;
2c448                 | '     }
2c448                 | '     tv->tv_sec = lastsec;
2c448                 | '     tv->tv_usec = leftover;
2c448                 | '     return 0;
2c448     00 FA 05 F6 | 	mov	result1, #0
2c44c     A7 F0 03 F6 | 	mov	ptra, fp
2c450     B2 00 A0 FD | 	call	#popregs_
2c454                 | _fatfs_cc_gettimeofday_ret
2c454     2D 00 64 FD | 	ret
2c458                 | 
2c458                 | _fatfs_cc__is_leap_year
2c458     09 FB 51 F6 | 	abs	result1, arg01 wc
2c45c     03 FA 05 F5 | 	and	result1, #3
2c460     FD FA 89 F6 | 	negc	result1, result1 wz
2c464     38 00 90 5D |  if_ne	jmp	#LR__4531
2c468     09 FB 51 F6 | 	abs	result1, arg01 wc
2c46c     64 FA 15 FD | 	qdiv	result1, #100
2c470     19 FA 61 FD | 	getqy	result1
2c474     FD FA 89 F6 | 	negc	result1, result1 wz
2c478     1C 00 90 5D |  if_ne	jmp	#LR__4530
2c47c     09 FB 51 F6 | 	abs	result1, arg01 wc
2c480     90 FB 15 FD | 	qdiv	result1, #400
2c484                 | '       return (0 == y % 400);
2c484     00 FA 05 F6 | 	mov	result1, #0
2c488     19 00 62 FD | 	getqy	_var01
2c48c     00 01 8A F6 | 	negc	_var01, _var01 wz
2c490     01 FA 05 A6 |  if_e	mov	result1, #1
2c494     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2c498                 | LR__4530
2c498                 | '     return 1;
2c498     01 FA 05 F6 | 	mov	result1, #1
2c49c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2c4a0                 | LR__4531
2c4a0                 | '   }
2c4a0                 | '   return 0;
2c4a0     00 FA 05 F6 | 	mov	result1, #0
2c4a4                 | _fatfs_cc__is_leap_year_ret
2c4a4     2D 00 64 FD | 	ret
2c4a8                 | 
2c4a8                 | _fatfs_cc___tzoffset
2c4a8     09 01 0A F6 | 	mov	_var01, arg01 wz
2c4ac     FF FF FF FF 
2c4b0     0A FF 6B FC | 	wrlong	##-1, arg02
2c4b4     01 02 06 F6 | 	mov	_var02, #1
2c4b8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2c4bc                 | '                 return 0;
2c4bc     00 FA 05 A6 |  if_e	mov	result1, #0
2c4c0     94 02 90 AD |  if_e	jmp	#LR__4557
2c4c4     0A 01 68 FC | 	wrlong	#0, arg02
2c4c8     02 00 00 FF 
2c4cc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c4d0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2c4d4                 | ' 
2c4d4                 | '        *hasdst = 0;
2c4d4                 | ' 
2c4d4                 | ' 	n = stdname;
2c4d4                 | '         while (*s && isalpha(*s)) {
2c4d4     02 00 00 FF 
2c4d8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2c4dc     97 28 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2c4e0                 | LR__4540
2c4e0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2c4e4     48 00 90 AD |  if_e	jmp	#LR__4542
2c4e8     00 13 C2 FA | 	rdbyte	arg01, _var01
2c4ec                 | ' {
2c4ec                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2c4ec     80 12 36 F3 | 	fle	arg01, #128 wc
2c4f0                 | '     return __ctype[c];
2c4f0     02 00 00 FF 
2c4f4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c4f8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c4fc     09 FB C1 FA | 	rdbyte	result1, arg01
2c500     02 00 00 FF 
2c504     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c508     0C FA CD F7 | 	test	result1, #12 wz
2c50c     20 00 90 AD |  if_e	jmp	#LR__4542
2c510     00 09 02 F6 | 	mov	_var05, _var01
2c514     00 0B 02 F6 | 	mov	_var06, _var01
2c518     01 0A 06 F1 | 	add	_var06, #1
2c51c     04 0D C2 FA | 	rdbyte	_var07, _var05
2c520     05 01 02 F6 | 	mov	_var01, _var06
2c524     03 0D 42 FC | 	wrbyte	_var07, _var04
2c528     01 06 06 F1 | 	add	_var04, #1
2c52c     B0 FF 9F FD | 	jmp	#LR__4540
2c530                 | LR__4541
2c530                 | LR__4542
2c530     03 01 48 FC | 	wrbyte	#0, _var04
2c534     00 0E 06 F6 | 	mov	_var08, #0
2c538     00 05 C2 FA | 	rdbyte	_var03, _var01
2c53c     2D 04 0E F2 | 	cmp	_var03, #45 wz
2c540     01 02 66 A6 |  if_e	neg	_var02, #1
2c544     01 00 06 A1 |  if_e	add	_var01, #1
2c548     97 28 48 FB | 	callpa	#(@LR__4544-@LR__4543)>>2,fcache_load_ptr_
2c54c                 | '                 sgn = -1;
2c54c                 | '                 s++;
2c54c                 | '         }
2c54c                 | '         while (isdigit(*s)) {
2c54c                 | LR__4543
2c54c     00 13 C2 FA | 	rdbyte	arg01, _var01
2c550                 | ' {
2c550                 | '   return  (__ctype_get(c) & 0x02 ) ;
2c550     80 12 36 F3 | 	fle	arg01, #128 wc
2c554                 | '     return __ctype[c];
2c554     02 00 00 FF 
2c558     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c55c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c560     09 FB C1 FA | 	rdbyte	result1, arg01
2c564     02 00 00 FF 
2c568     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c56c     02 FA CD F7 | 	test	result1, #2 wz
2c570     28 00 90 AD |  if_e	jmp	#LR__4545
2c574     07 05 02 F6 | 	mov	_var03, _var08
2c578     02 04 66 F0 | 	shl	_var03, #2
2c57c     07 05 02 F1 | 	add	_var03, _var08
2c580     01 04 66 F0 | 	shl	_var03, #1
2c584     00 09 C2 FA | 	rdbyte	_var05, _var01
2c588     30 08 86 F1 | 	sub	_var05, #48
2c58c     04 05 02 F1 | 	add	_var03, _var05
2c590     02 0F 02 F6 | 	mov	_var08, _var03
2c594     01 00 06 F1 | 	add	_var01, #1
2c598     B0 FF 9F FD | 	jmp	#LR__4543
2c59c                 | LR__4544
2c59c                 | LR__4545
2c59c     07 00 00 FF 
2c5a0     10 0E 06 FD | 	qmul	_var08, ##3600
2c5a4     00 05 C2 FA | 	rdbyte	_var03, _var01
2c5a8     3A 04 0E F2 | 	cmp	_var03, #58 wz
2c5ac     18 10 62 FD | 	getqx	_var09
2c5b0     70 00 90 5D |  if_ne	jmp	#LR__4549
2c5b4     00 0E 06 F6 | 	mov	_var08, #0
2c5b8     01 00 06 F1 | 	add	_var01, #1
2c5bc     97 28 48 FB | 	callpa	#(@LR__4547-@LR__4546)>>2,fcache_load_ptr_
2c5c0                 | '                 x = 0;
2c5c0                 | '                 s++;
2c5c0                 | '                 while (isdigit(*s)) {
2c5c0                 | LR__4546
2c5c0     00 13 C2 FA | 	rdbyte	arg01, _var01
2c5c4                 | ' {
2c5c4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2c5c4     80 12 36 F3 | 	fle	arg01, #128 wc
2c5c8                 | '     return __ctype[c];
2c5c8     02 00 00 FF 
2c5cc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c5d0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c5d4     09 FB C1 FA | 	rdbyte	result1, arg01
2c5d8     02 00 00 FF 
2c5dc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c5e0     02 FA CD F7 | 	test	result1, #2 wz
2c5e4     28 00 90 AD |  if_e	jmp	#LR__4548
2c5e8     07 05 02 F6 | 	mov	_var03, _var08
2c5ec     02 04 66 F0 | 	shl	_var03, #2
2c5f0     07 05 02 F1 | 	add	_var03, _var08
2c5f4     01 04 66 F0 | 	shl	_var03, #1
2c5f8     00 09 C2 FA | 	rdbyte	_var05, _var01
2c5fc     30 08 86 F1 | 	sub	_var05, #48
2c600     04 05 02 F1 | 	add	_var03, _var05
2c604     02 0F 02 F6 | 	mov	_var08, _var03
2c608     01 00 06 F1 | 	add	_var01, #1
2c60c     B0 FF 9F FD | 	jmp	#LR__4546
2c610                 | LR__4547
2c610                 | LR__4548
2c610     07 0D 02 F6 | 	mov	_var07, _var08
2c614     04 0C 66 F0 | 	shl	_var07, #4
2c618     07 0D 82 F1 | 	sub	_var07, _var08
2c61c     02 0C 66 F0 | 	shl	_var07, #2
2c620     06 11 02 F1 | 	add	_var09, _var07
2c624                 | LR__4549
2c624     02 00 00 FF 
2c628     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2c62c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2c630     00 13 C2 FA | 	rdbyte	arg01, _var01
2c634                 | ' {
2c634                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2c634     80 12 36 F3 | 	fle	arg01, #128 wc
2c638                 | '     return __ctype[c];
2c638     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2c63c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c640     09 FB C1 FA | 	rdbyte	result1, arg01
2c644     02 00 00 FF 
2c648     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c64c     0C FA CD F7 | 	test	result1, #12 wz
2c650     50 00 90 AD |  if_e	jmp	#LR__4552
2c654     0A 03 68 FC | 	wrlong	#1, arg02
2c658                 | '                 *hasdst = 1;
2c658                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2c658                 | LR__4550
2c658     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2c65c     44 00 90 AD |  if_e	jmp	#LR__4551
2c660     00 13 C2 FA | 	rdbyte	arg01, _var01
2c664                 | ' {
2c664                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2c664     80 12 36 F3 | 	fle	arg01, #128 wc
2c668                 | '     return __ctype[c];
2c668     02 00 00 FF 
2c66c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c670     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c674     09 FB C1 FA | 	rdbyte	result1, arg01
2c678     02 00 00 FF 
2c67c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c680     0C FA CD F7 | 	test	result1, #12 wz
2c684     1C 00 90 AD |  if_e	jmp	#LR__4551
2c688     00 0B 02 F6 | 	mov	_var06, _var01
2c68c     01 0A 06 F1 | 	add	_var06, #1
2c690     00 0D C2 FA | 	rdbyte	_var07, _var01
2c694     05 01 02 F6 | 	mov	_var01, _var06
2c698     03 0D 42 FC | 	wrbyte	_var07, _var04
2c69c     01 06 06 F1 | 	add	_var04, #1
2c6a0     B4 FF 9F FD | 	jmp	#LR__4550
2c6a4                 | LR__4551
2c6a4                 | LR__4552
2c6a4     03 01 48 FC | 	wrbyte	#0, _var04
2c6a8     02 00 00 FF 
2c6ac     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c6b0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2c6b4     02 00 00 FF 
2c6b8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2c6bc     20 00 90 AD |  if_e	jmp	#LR__4553
2c6c0     02 00 00 FF 
2c6c4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c6c8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c6cc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2c6d0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c6d4     02 00 00 FF 
2c6d8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2c6dc     1C 00 90 FD | 	jmp	#LR__4554
2c6e0                 | LR__4553
2c6e0     02 00 00 FF 
2c6e4     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2c6e8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c6ec     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2c6f0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c6f4     02 00 00 FF 
2c6f8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2c6fc                 | LR__4554
2c6fc     02 00 00 FF 
2c700     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2c704     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2c708     02 00 00 FF 
2c70c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2c710     20 00 90 AD |  if_e	jmp	#LR__4555
2c714     02 00 00 FF 
2c718     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2c71c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c720     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2c724     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c728     02 00 00 FF 
2c72c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2c730     1C 00 90 FD | 	jmp	#LR__4556
2c734                 | LR__4555
2c734     02 00 00 FF 
2c738     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c73c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c740     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2c744     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c748     02 00 00 FF 
2c74c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2c750                 | LR__4556
2c750     08 03 02 FD | 	qmul	_var02, _var09
2c754                 | ' 		_tzname[1] = stdname;
2c754                 | ' 
2c754                 | '         return sgn * off;
2c754     18 FA 61 FD | 	getqx	result1
2c758                 | LR__4557
2c758                 | _fatfs_cc___tzoffset_ret
2c758     2D 00 64 FD | 	ret
2c75c                 | 
2c75c                 | _fatfs_cc___indst
2c75c     10 12 06 F1 | 	add	arg01, #16
2c760     09 01 02 FB | 	rdlong	_var01, arg01
2c764     10 12 86 F1 | 	sub	arg01, #16
2c768     02 00 0E F2 | 	cmp	_var01, #2 wz
2c76c     30 00 90 5D |  if_ne	jmp	#LR__4560
2c770     07 00 06 F6 | 	mov	_var01, #7
2c774     18 12 06 F1 | 	add	arg01, #24
2c778     09 03 02 FB | 	rdlong	_var02, arg01
2c77c     01 01 02 F1 | 	add	_var01, _var02
2c780     0C 12 86 F1 | 	sub	arg01, #12
2c784     09 05 02 FB | 	rdlong	_var03, arg01
2c788     02 01 82 F1 | 	sub	_var01, _var03
2c78c     00 00 56 F2 | 	cmps	_var01, #0 wc
2c790                 | '                         return 1;
2c790     01 FA 05 C6 |  if_b	mov	result1, #1
2c794     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2c798                 | '                 return 0;
2c798     00 FA 05 F6 | 	mov	result1, #0
2c79c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2c7a0                 | LR__4560
2c7a0     10 12 06 F1 | 	add	arg01, #16
2c7a4     09 01 02 FB | 	rdlong	_var01, arg01
2c7a8     10 12 86 F1 | 	sub	arg01, #16
2c7ac     0A 00 0E F2 | 	cmp	_var01, #10 wz
2c7b0     28 00 90 5D |  if_ne	jmp	#LR__4561
2c7b4     18 12 06 F1 | 	add	arg01, #24
2c7b8     09 01 02 FB | 	rdlong	_var01, arg01
2c7bc     0C 12 86 F1 | 	sub	arg01, #12
2c7c0     09 07 02 FB | 	rdlong	_var04, arg01
2c7c4     03 01 82 F1 | 	sub	_var01, _var04
2c7c8     00 00 56 F2 | 	cmps	_var01, #0 wc
2c7cc                 | '                         return 0;
2c7cc     00 FA 05 C6 |  if_b	mov	result1, #0
2c7d0     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2c7d4                 | '                 return 1;
2c7d4     01 FA 05 F6 | 	mov	result1, #1
2c7d8     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2c7dc                 | LR__4561
2c7dc                 | '         }
2c7dc                 | ' 
2c7dc                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2c7dc     00 00 06 F6 | 	mov	_var01, #0
2c7e0     10 12 06 F1 | 	add	arg01, #16
2c7e4     09 03 02 FB | 	rdlong	_var02, arg01
2c7e8     10 12 86 F1 | 	sub	arg01, #16
2c7ec     03 02 56 F2 | 	cmps	_var02, #3 wc
2c7f0     10 00 90 CD |  if_b	jmp	#LR__4562
2c7f4     10 12 06 F1 | 	add	arg01, #16
2c7f8     09 05 02 FB | 	rdlong	_var03, arg01
2c7fc     0A 04 56 F2 | 	cmps	_var03, #10 wc
2c800     01 00 06 C6 |  if_b	mov	_var01, #1
2c804                 | LR__4562
2c804     00 FB 01 F6 | 	mov	result1, _var01
2c808                 | _fatfs_cc___indst_ret
2c808     2D 00 64 FD | 	ret
2c80c                 | 
2c80c                 | ' 	
2c80c                 | ' 	FUNCTION pfunc(c as integer) as integer
2c80c                 | ___strs_cl_pfunc
2c80c                 | ' 		if (i < 16) then
2c80c     04 E4 05 F1 | 	add	objptr, #4
2c810     F2 FA 01 FB | 	rdlong	result1, objptr
2c814     04 E4 85 F1 | 	sub	objptr, #4
2c818     10 FA 55 F2 | 	cmps	result1, #16 wc
2c81c     2C 00 90 3D |  if_ae	jmp	#LR__4570
2c820     F2 FA 01 FB | 	rdlong	result1, objptr
2c824     04 E4 05 F1 | 	add	objptr, #4
2c828     F2 00 02 FB | 	rdlong	_var01, objptr
2c82c     FD 00 02 F1 | 	add	_var01, result1
2c830     00 13 42 FC | 	wrbyte	arg01, _var01
2c834     F2 FA 01 FB | 	rdlong	result1, objptr
2c838     01 FA 05 F1 | 	add	result1, #1
2c83c     F2 FA 61 FC | 	wrlong	result1, objptr
2c840     04 E4 85 F1 | 	sub	objptr, #4
2c844                 | ' 			p(i) = c
2c844                 | ' 			i = i+1
2c844                 | ' 			return 1
2c844     01 FA 05 F6 | 	mov	result1, #1
2c848     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2c84c                 | LR__4570
2c84c                 | ' 			return -1
2c84c     01 FA 65 F6 | 	neg	result1, #1
2c850                 | ___strs_cl_pfunc_ret
2c850     2D 00 64 FD | 	ret
2c854                 | 
2c854                 | __struct__s_vfs_file_t_putchar
2c854     04 4A 05 F6 | 	mov	COUNT_, #4
2c858     A8 00 A0 FD | 	call	#pushregs_
2c85c     1C E4 05 F1 | 	add	objptr, #28
2c860     F2 1E 0A FB | 	rdlong	local01, objptr wz
2c864     1C E4 85 F1 | 	sub	objptr, #28
2c868     00 FA 05 A6 |  if_e	mov	result1, #0
2c86c     48 00 90 AD |  if_e	jmp	#LR__4580
2c870     1C E4 05 F1 | 	add	objptr, #28
2c874     F2 20 02 FB | 	rdlong	local02, objptr
2c878     10 23 02 F6 | 	mov	local03, local02
2c87c     1C E4 85 F1 | 	sub	objptr, #28
2c880     13 22 46 F7 | 	zerox	local03, #19
2c884     14 20 46 F0 | 	shr	local02, #20
2c888     02 20 66 F0 | 	shl	local02, #2
2c88c     ED 20 02 F1 | 	add	local02, __methods__
2c890     10 21 02 FB | 	rdlong	local02, local02
2c894     F2 14 02 F6 | 	mov	arg02, objptr
2c898     F2 24 02 F6 | 	mov	local04, objptr
2c89c     11 E5 01 F6 | 	mov	objptr, local03
2c8a0     2D 20 62 FD | 	call	local02
2c8a4     12 E5 01 F6 | 	mov	objptr, local04
2c8a8                 | '     return (i < 0) ? 0 : 1;
2c8a8     00 FA 55 F2 | 	cmps	result1, #0 wc
2c8ac     00 1E 06 C6 |  if_b	mov	local01, #0
2c8b0     01 1E 06 36 |  if_ae	mov	local01, #1
2c8b4     0F FB 01 F6 | 	mov	result1, local01
2c8b8                 | LR__4580
2c8b8     A7 F0 03 F6 | 	mov	ptra, fp
2c8bc     B2 00 A0 FD | 	call	#popregs_
2c8c0                 | __struct__s_vfs_file_t_putchar_ret
2c8c0     2D 00 64 FD | 	ret
2c8c4                 | 
2c8c4                 | __struct__s_vfs_file_t_getchar
2c8c4     03 4A 05 F6 | 	mov	COUNT_, #3
2c8c8     A8 00 A0 FD | 	call	#pushregs_
2c8cc     20 E4 05 F1 | 	add	objptr, #32
2c8d0     F2 12 0A FB | 	rdlong	arg01, objptr wz
2c8d4     20 E4 85 F1 | 	sub	objptr, #32
2c8d8     01 FA 65 A6 |  if_e	neg	result1, #1
2c8dc     38 00 90 AD |  if_e	jmp	#LR__4590
2c8e0                 | '     return getcf(__this);
2c8e0     20 E4 05 F1 | 	add	objptr, #32
2c8e4     F2 1E 02 FB | 	rdlong	local01, objptr
2c8e8     0F 21 02 F6 | 	mov	local02, local01
2c8ec     20 E4 85 F1 | 	sub	objptr, #32
2c8f0     13 20 46 F7 | 	zerox	local02, #19
2c8f4     14 1E 46 F0 | 	shr	local01, #20
2c8f8     02 1E 66 F0 | 	shl	local01, #2
2c8fc     ED 1E 02 F1 | 	add	local01, __methods__
2c900     0F 1F 02 FB | 	rdlong	local01, local01
2c904     F2 12 02 F6 | 	mov	arg01, objptr
2c908     F2 22 02 F6 | 	mov	local03, objptr
2c90c     10 E5 01 F6 | 	mov	objptr, local02
2c910     2D 1E 62 FD | 	call	local01
2c914     11 E5 01 F6 | 	mov	objptr, local03
2c918                 | LR__4590
2c918     A7 F0 03 F6 | 	mov	ptra, fp
2c91c     B2 00 A0 FD | 	call	#popregs_
2c920                 | __struct__s_vfs_file_t_getchar_ret
2c920     2D 00 64 FD | 	ret
2c924                 | 
2c924                 | __struct___bas_wrap_sender_tx
2c924     03 4A 05 F6 | 	mov	COUNT_, #3
2c928     A8 00 A0 FD | 	call	#pushregs_
2c92c     F2 1E 02 FB | 	rdlong	local01, objptr
2c930     0F 21 02 F6 | 	mov	local02, local01
2c934     13 1E 46 F7 | 	zerox	local01, #19
2c938     14 20 46 F0 | 	shr	local02, #20
2c93c     02 20 66 F0 | 	shl	local02, #2
2c940     ED 20 02 F1 | 	add	local02, __methods__
2c944     10 21 02 FB | 	rdlong	local02, local02
2c948     F2 22 02 F6 | 	mov	local03, objptr
2c94c     0F E5 01 F6 | 	mov	objptr, local01
2c950     2D 20 62 FD | 	call	local02
2c954     11 E5 01 F6 | 	mov	objptr, local03
2c958     01 FA 05 F6 | 	mov	result1, #1
2c95c     A7 F0 03 F6 | 	mov	ptra, fp
2c960     B2 00 A0 FD | 	call	#popregs_
2c964                 | __struct___bas_wrap_sender_tx_ret
2c964     2D 00 64 FD | 	ret
2c968                 | 
2c968                 | __struct___bas_wrap_sender_rx
2c968     03 4A 05 F6 | 	mov	COUNT_, #3
2c96c     A8 00 A0 FD | 	call	#pushregs_
2c970     04 E4 05 F1 | 	add	objptr, #4
2c974     F2 1E 02 FB | 	rdlong	local01, objptr
2c978     0F 21 02 F6 | 	mov	local02, local01
2c97c     04 E4 85 F1 | 	sub	objptr, #4
2c980     13 20 46 F7 | 	zerox	local02, #19
2c984     14 1E 46 F0 | 	shr	local01, #20
2c988     02 1E 66 F0 | 	shl	local01, #2
2c98c     ED 1E 02 F1 | 	add	local01, __methods__
2c990     0F 1F 02 FB | 	rdlong	local01, local01
2c994     F2 22 02 F6 | 	mov	local03, objptr
2c998     10 E5 01 F6 | 	mov	objptr, local02
2c99c     2D 1E 62 FD | 	call	local01
2c9a0     11 E5 01 F6 | 	mov	objptr, local03
2c9a4     A7 F0 03 F6 | 	mov	ptra, fp
2c9a8     B2 00 A0 FD | 	call	#popregs_
2c9ac                 | __struct___bas_wrap_sender_rx_ret
2c9ac     2D 00 64 FD | 	ret
2c9b0                 | 
2c9b0                 | __struct___bas_wrap_sender_close
2c9b0     03 4A 05 F6 | 	mov	COUNT_, #3
2c9b4     A8 00 A0 FD | 	call	#pushregs_
2c9b8     08 E4 05 F1 | 	add	objptr, #8
2c9bc     F2 1E 02 FB | 	rdlong	local01, objptr
2c9c0     0F 21 02 F6 | 	mov	local02, local01
2c9c4     08 E4 85 F1 | 	sub	objptr, #8
2c9c8     13 20 46 F7 | 	zerox	local02, #19
2c9cc     14 1E 46 F0 | 	shr	local01, #20
2c9d0     02 1E 66 F0 | 	shl	local01, #2
2c9d4     ED 1E 02 F1 | 	add	local01, __methods__
2c9d8     0F 1F 02 FB | 	rdlong	local01, local01
2c9dc     F2 22 02 F6 | 	mov	local03, objptr
2c9e0     10 E5 01 F6 | 	mov	objptr, local02
2c9e4     2D 1E 62 FD | 	call	local01
2c9e8     11 E5 01 F6 | 	mov	objptr, local03
2c9ec     A7 F0 03 F6 | 	mov	ptra, fp
2c9f0     B2 00 A0 FD | 	call	#popregs_
2c9f4                 | __struct___bas_wrap_sender_close_ret
2c9f4     2D 00 64 FD | 	ret
2c9f8                 | 
2c9f8                 | LR__4600
2c9f8     2F          | 	byte	"/"
2c9f9     00          | 	byte	0
2c9fa                 | LR__4601
2c9fa     69 6E 66    | 	byte	"inf"
2c9fd     00          | 	byte	0
2c9fe                 | LR__4602
2c9fe     6E 61 6E    | 	byte	"nan"
2ca01     00          | 	byte	0
2ca02                 | LR__4603
2ca02                 | 	byte	
2ca02     00          | 	byte	0
2ca03                 | LR__4604
2ca03                 | 	byte	
2ca03     00          | 	byte	0
2ca04                 | LR__4605
2ca04                 | 	byte	
2ca04     00          | 	byte	0
2ca05                 | LR__4606
2ca05                 | 	byte	
2ca05     00          | 	byte	0
2ca06                 | LR__4607
2ca06                 | 	byte	
2ca06     00          | 	byte	0
2ca07                 | LR__4608
2ca07                 | 	byte	
2ca07     00          | 	byte	0
2ca08                 | LR__4609
2ca08                 | 	byte	
2ca08     00          | 	byte	0
2ca09                 | LR__4610
2ca09                 | 	byte	
2ca09     00          | 	byte	0
2ca0a                 | LR__4611
2ca0a     00          | 	byte	0
2ca0b     00          | 	byte	0
2ca0c                 | LR__4612
2ca0c     00          | 	byte	0
2ca0d     00          | 	byte	0
2ca0e                 | LR__4613
2ca0e     00          | 	byte	0
2ca0f     00          | 	byte	0
2ca10                 | LR__4614
2ca10     20 21 21 21 
2ca14     20 63 6F 72 
2ca18     72 75 70 74 
2ca1c     65 64 20 68 
2ca20     65 61 70 3F 
2ca24     3F 3F 20 21 
2ca28     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2ca2b     00          | 	byte	0
2ca2c                 | LR__4615
2ca2c     20 21 21 21 
2ca30     20 6F 75 74 
2ca34     20 6F 66 20 
2ca38     68 65 61 70 
2ca3c     20 6D 65 6D 
2ca40     6F 72 79 20 
2ca44     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2ca48     00          | 	byte	0
2ca49                 | LR__4616
2ca49     20 21 21 21 
2ca4d     20 63 6F 72 
2ca51     72 75 70 74 
2ca55     65 64 20 68 
2ca59     65 61 70 20 
2ca5d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2ca61     00          | 	byte	0
2ca62                 | LR__4617
2ca62     00          | 	byte	0
2ca63     00          | 	byte	0
2ca64                 | LR__4618
2ca64     2E          | 	byte	"."
2ca65     00          | 	byte	0
2ca66                 | LR__4619
2ca66     00          | 	byte	0
2ca67     00          | 	byte	0
2ca68                 | LR__4620
2ca68     00          | 	byte	0
2ca69     00          | 	byte	0
2ca6a                 | LR__4621
2ca6a     00          | 	byte	0
2ca6b     00          | 	byte	0
2ca6c                 | LR__4622
2ca6c     2A 3A 3C 3E 
2ca70     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2ca74     00          | 	byte	0
2ca75                 | LR__4623
2ca75     2B 2C 3B 3D 
2ca79     5B 5D       | 	byte	"+,;=[]"
2ca7b     00          | 	byte	0
2ca7c                 | LR__4624
2ca7c     46 41 54 33 
2ca80     32 20 20 20 | 	byte	"FAT32   "
2ca84     00          | 	byte	0
2ca85                 | LR__4625
2ca85     54 5A       | 	byte	"TZ"
2ca87     00          | 	byte	0
2ca88                 | LR__4626
2ca88     00          | 	byte	0
2ca89     00          | 	byte	0
2ca8a                 | LR__4627
2ca8a                 | 	byte	
2ca8a     00          | 	byte	0
2ca8b                 | LR__4628
2ca8b                 | 	byte	
2ca8b     00          | 	byte	0
2ca8c                 | LR__4629
2ca8c     22          | 	byte	34
2ca8d     00          | 	byte	0
2ca8e                 | LR__4630
2ca8e     22          | 	byte	34
2ca8f     00          | 	byte	0
2ca90                 | LR__4631
2ca90     3A          | 	byte	":"
2ca91     00          | 	byte	0
2ca92                 | LR__4632
2ca92                 | 	byte	
2ca92     00          | 	byte	0
2ca93                 | LR__4633
2ca93                 | 	byte	
2ca93     00          | 	byte	0
2ca94                 | LR__4634
2ca94                 | 	byte	
2ca94     00          | 	byte	0
2ca95                 | LR__4635
2ca95                 | 	byte	
2ca95     00          | 	byte	0
2ca96                 | LR__4636
2ca96                 | 	byte	
2ca96     00          | 	byte	0
2ca97                 | LR__4637
2ca97                 | 	byte	
2ca97     00          | 	byte	0
2ca98                 | LR__4638
2ca98                 | 	byte	
2ca98     00          | 	byte	0
2ca99                 | LR__4639
2ca99     22          | 	byte	34
2ca9a     00          | 	byte	0
2ca9b                 | LR__4640
2ca9b     22          | 	byte	34
2ca9c     00          | 	byte	0
2ca9d                 | LR__4641
2ca9d     22          | 	byte	34
2ca9e     00          | 	byte	0
2ca9f                 | LR__4642
2ca9f     22          | 	byte	34
2caa0     00          | 	byte	0
2caa1                 | LR__4643
2caa1     22          | 	byte	34
2caa2     00          | 	byte	0
2caa3                 | LR__4644
2caa3     3E          | 	byte	">"
2caa4     00          | 	byte	0
2caa5                 | LR__4645
2caa5     3C          | 	byte	"<"
2caa6     00          | 	byte	0
2caa7                 | LR__4646
2caa7     2B          | 	byte	"+"
2caa8     00          | 	byte	0
2caa9                 | LR__4647
2caa9     2D          | 	byte	"-"
2caaa     00          | 	byte	0
2caab                 | LR__4648
2caab     2A          | 	byte	"*"
2caac     00          | 	byte	0
2caad                 | LR__4649
2caad     2F          | 	byte	"/"
2caae     00          | 	byte	0
2caaf                 | LR__4650
2caaf     5E          | 	byte	"^"
2cab0     00          | 	byte	0
2cab1                 | LR__4651
2cab1     3D          | 	byte	"="
2cab2     00          | 	byte	0
2cab3                 | LR__4652
2cab3     2B          | 	byte	"+"
2cab4     00          | 	byte	0
2cab5                 | LR__4653
2cab5     2B          | 	byte	"+"
2cab6     00          | 	byte	0
2cab7                 | LR__4654
2cab7     2D          | 	byte	"-"
2cab8     00          | 	byte	0
2cab9                 | LR__4655
2cab9     2D          | 	byte	"-"
2caba     00          | 	byte	0
2cabb                 | LR__4656
2cabb     3C          | 	byte	"<"
2cabc     00          | 	byte	0
2cabd                 | LR__4657
2cabd     3E          | 	byte	">"
2cabe     00          | 	byte	0
2cabf                 | LR__4658
2cabf     22          | 	byte	34
2cac0     00          | 	byte	0
2cac1                 | LR__4659
2cac1     22          | 	byte	34
2cac2     00          | 	byte	0
2cac3                 | LR__4660
2cac3     2E          | 	byte	"."
2cac4     00          | 	byte	0
2cac5                 | LR__4661
2cac5     3F          | 	byte	"?"
2cac6     00          | 	byte	0
2cac7                 | LR__4662
2cac7     3F          | 	byte	"?"
2cac8     00          | 	byte	0
2cac9                 | LR__4663
2cac9     6D 6F 75 73 
2cacd     65          | 	byte	"mouse"
2cace     00          | 	byte	0
2cacf                 | LR__4664
2cacf     63 75 72 73 
2cad3     6F 72       | 	byte	"cursor"
2cad5     00          | 	byte	0
2cad6                 | LR__4665
2cad6     63 6C 69 63 
2cada     6B          | 	byte	"click"
2cadb     00          | 	byte	0
2cadc                 | LR__4666
2cadc     6F 6E       | 	byte	"on"
2cade     00          | 	byte	0
2cadf                 | LR__4667
2cadf     31          | 	byte	"1"
2cae0     00          | 	byte	0
2cae1                 | LR__4668
2cae1     6F 66 66    | 	byte	"off"
2cae4     00          | 	byte	0
2cae5                 | LR__4669
2cae5     30          | 	byte	"0"
2cae6     00          | 	byte	0
2cae7                 | LR__4670
2cae7     6D 6F 64 65 | 	byte	"mode"
2caeb     00          | 	byte	0
2caec                 | LR__4671
2caec     6D 2E       | 	byte	"m."
2caee     00          | 	byte	0
2caef                 | LR__4672
2caef     61 74 61 72 
2caf3     69          | 	byte	"atari"
2caf4     00          | 	byte	0
2caf5                 | LR__4673
2caf5     30          | 	byte	"0"
2caf6     00          | 	byte	0
2caf7                 | LR__4674
2caf7     70 63 5F 61 
2cafb     6D 62 65 72 | 	byte	"pc_amber"
2caff     00          | 	byte	0
2cb00                 | LR__4675
2cb00     31          | 	byte	"1"
2cb01     00          | 	byte	0
2cb02                 | LR__4676
2cb02     70 63 5F 67 
2cb06     72 65 65 6E | 	byte	"pc_green"
2cb0a     00          | 	byte	0
2cb0b                 | LR__4677
2cb0b     32          | 	byte	"2"
2cb0c     00          | 	byte	0
2cb0d                 | LR__4678
2cb0d     70 63 5F 77 
2cb11     68 69 74 65 | 	byte	"pc_white"
2cb15     00          | 	byte	0
2cb16                 | LR__4679
2cb16     33          | 	byte	"3"
2cb17     00          | 	byte	0
2cb18                 | LR__4680
2cb18     73 74       | 	byte	"st"
2cb1a     00          | 	byte	0
2cb1b                 | LR__4681
2cb1b     34          | 	byte	"4"
2cb1c     00          | 	byte	0
2cb1d                 | LR__4682
2cb1d                 | 	byte	
2cb1d     00          | 	byte	0
2cb1e                 | LR__4683
2cb1e     6C 6F 61 64 | 	byte	"load"
2cb22     00          | 	byte	0
2cb23                 | LR__4684
2cb23     73 61 76 65 | 	byte	"save"
2cb27     00          | 	byte	0
2cb28                 | LR__4685
2cb28     62 72 75 6E | 	byte	"brun"
2cb2c     00          | 	byte	0
2cb2d                 | LR__4686
2cb2d     72 75 6E    | 	byte	"run"
2cb30     00          | 	byte	0
2cb31                 | LR__4687
2cb31     6C 6F 2E    | 	byte	"lo."
2cb34     00          | 	byte	0
2cb35                 | LR__4688
2cb35     73 2E       | 	byte	"s."
2cb37     00          | 	byte	0
2cb38                 | LR__4689
2cb38     62 72 2E    | 	byte	"br."
2cb3b     00          | 	byte	0
2cb3c                 | LR__4690
2cb3c                 | 	byte	
2cb3c     00          | 	byte	0
2cb3d                 | LR__4691
2cb3d                 | 	byte	
2cb3d     00          | 	byte	0
2cb3e                 | LR__4692
2cb3e                 | 	byte	
2cb3e     00          | 	byte	0
2cb3f                 | LR__4693
2cb3f                 | 	byte	
2cb3f     00          | 	byte	0
2cb40                 | LR__4694
2cb40     20 55 73 65 
2cb44     72 20 66 75 
2cb48     6E 63 74 69 
2cb4c     6F 6E 73 20 
2cb50     61 6E 64 20 
2cb54     61 72 72 61 
2cb58     79 73 20 6E 
2cb5c     6F 74 20 79 
2cb60     65 74 20 69 
2cb64     6D 70 6C 65 
2cb68     6D 65 6E 74 
2cb6c     65 64       | 	byte	" User functions and arrays not yet implemented"
2cb6e     00          | 	byte	0
2cb6f                 | LR__4695
2cb6f                 | 	byte	
2cb6f     00          | 	byte	0
2cb70                 | LR__4696
2cb70                 | 	byte	
2cb70     00          | 	byte	0
2cb71                 | LR__4697
2cb71     52 65 61 64 
2cb75     79          | 	byte	"Ready"
2cb76     00          | 	byte	0
2cb77                 | LR__4698
2cb77     2B          | 	byte	"+"
2cb78     00          | 	byte	0
2cb79                 | LR__4699
2cb79     2D          | 	byte	"-"
2cb7a     00          | 	byte	0
2cb7b                 | LR__4700
2cb7b     6F 72       | 	byte	"or"
2cb7d     00          | 	byte	0
2cb7e                 | LR__4701
2cb7e     78 6F 72    | 	byte	"xor"
2cb81     00          | 	byte	0
2cb82                 | LR__4702
2cb82     2A          | 	byte	"*"
2cb83     00          | 	byte	0
2cb84                 | LR__4703
2cb84     2F          | 	byte	"/"
2cb85     00          | 	byte	0
2cb86                 | LR__4704
2cb86     61 6E 64    | 	byte	"and"
2cb89     00          | 	byte	0
2cb8a                 | LR__4705
2cb8a     64 69 76    | 	byte	"div"
2cb8d     00          | 	byte	0
2cb8e                 | LR__4706
2cb8e     6D 6F 64    | 	byte	"mod"
2cb91     00          | 	byte	0
2cb92                 | LR__4707
2cb92     73 68 6C    | 	byte	"shl"
2cb95     00          | 	byte	0
2cb96                 | LR__4708
2cb96     73 68 72    | 	byte	"shr"
2cb99     00          | 	byte	0
2cb9a                 | LR__4709
2cb9a     5E          | 	byte	"^"
2cb9b     00          | 	byte	0
2cb9c                 | LR__4710
2cb9c     6E 6F 74    | 	byte	"not"
2cb9f     00          | 	byte	0
2cba0                 | LR__4711
2cba0     40          | 	byte	"@"
2cba1     00          | 	byte	0
2cba2                 | LR__4712
2cba2     3D          | 	byte	"="
2cba3     00          | 	byte	0
2cba4                 | LR__4713
2cba4     3E 3D       | 	byte	">="
2cba6     00          | 	byte	0
2cba7                 | LR__4714
2cba7     3C 3D       | 	byte	"<="
2cba9     00          | 	byte	0
2cbaa                 | LR__4715
2cbaa     3C          | 	byte	"<"
2cbab     00          | 	byte	0
2cbac                 | LR__4716
2cbac     3E          | 	byte	">"
2cbad     00          | 	byte	0
2cbae                 | LR__4717
2cbae     3C 3E       | 	byte	"<>"
2cbb0     00          | 	byte	0
2cbb1                 | LR__4718
2cbb1     2B 2B       | 	byte	"++"
2cbb3     00          | 	byte	0
2cbb4                 | LR__4719
2cbb4     2D 2D       | 	byte	"--"
2cbb6     00          | 	byte	0
2cbb7                 | LR__4720
2cbb7     23          | 	byte	"#"
2cbb8     00          | 	byte	0
2cbb9                 | LR__4721
2cbb9     23          | 	byte	"#"
2cbba     00          | 	byte	0
2cbbb                 | LR__4722
2cbbb     2D          | 	byte	"-"
2cbbc     00          | 	byte	0
2cbbd                 | LR__4723
2cbbd     30          | 	byte	"0"
2cbbe     00          | 	byte	0
2cbbf                 | LR__4724
2cbbf     63          | 	byte	"c"
2cbc0     00          | 	byte	0
2cbc1                 | LR__4725
2cbc1     63 23       | 	byte	"c#"
2cbc3     00          | 	byte	0
2cbc4                 | LR__4726
2cbc4     64          | 	byte	"d"
2cbc5     00          | 	byte	0
2cbc6                 | LR__4727
2cbc6     64 23       | 	byte	"d#"
2cbc8     00          | 	byte	0
2cbc9                 | LR__4728
2cbc9     65          | 	byte	"e"
2cbca     00          | 	byte	0
2cbcb                 | LR__4729
2cbcb     66          | 	byte	"f"
2cbcc     00          | 	byte	0
2cbcd                 | LR__4730
2cbcd     66 23       | 	byte	"f#"
2cbcf     00          | 	byte	0
2cbd0                 | LR__4731
2cbd0     67          | 	byte	"g"
2cbd1     00          | 	byte	0
2cbd2                 | LR__4732
2cbd2     67 23       | 	byte	"g#"
2cbd4     00          | 	byte	0
2cbd5                 | LR__4733
2cbd5     61          | 	byte	"a"
2cbd6     00          | 	byte	0
2cbd7                 | LR__4734
2cbd7     61 23       | 	byte	"a#"
2cbd9     00          | 	byte	0
2cbda                 | LR__4735
2cbda     68          | 	byte	"h"
2cbdb     00          | 	byte	0
2cbdc                 | LR__4736
2cbdc     62          | 	byte	"b"
2cbdd     00          | 	byte	0
2cbde                 | LR__4737
2cbde     2B          | 	byte	"+"
2cbdf     00          | 	byte	0
2cbe0                 | LR__4738
2cbe0     2D          | 	byte	"-"
2cbe1     00          | 	byte	0
2cbe2                 | LR__4739
2cbe2     3D          | 	byte	"="
2cbe3     00          | 	byte	0
2cbe4                 | LR__4740
2cbe4     2C          | 	byte	","
2cbe5     00          | 	byte	0
2cbe6                 | LR__4741
2cbe6     2A          | 	byte	"*"
2cbe7     00          | 	byte	0
2cbe8                 | LR__4742
2cbe8     2F          | 	byte	"/"
2cbe9     00          | 	byte	0
2cbea                 | LR__4743
2cbea     3B          | 	byte	";"
2cbeb     00          | 	byte	0
2cbec                 | LR__4744
2cbec     22          | 	byte	34
2cbed     00          | 	byte	0
2cbee                 | LR__4745
2cbee     5E          | 	byte	"^"
2cbef     00          | 	byte	0
2cbf0                 | LR__4746
2cbf0     29          | 	byte	")"
2cbf1     00          | 	byte	0
2cbf2                 | LR__4747
2cbf2     28          | 	byte	"("
2cbf3     00          | 	byte	0
2cbf4                 | LR__4748
2cbf4     3A          | 	byte	":"
2cbf5     00          | 	byte	0
2cbf6                 | LR__4749
2cbf6     20          | 	byte	" "
2cbf7     00          | 	byte	0
2cbf8                 | LR__4750
2cbf8     3E          | 	byte	">"
2cbf9     00          | 	byte	0
2cbfa                 | LR__4751
2cbfa     3C          | 	byte	"<"
2cbfb     00          | 	byte	0
2cbfc                 | LR__4752
2cbfc     3D          | 	byte	"="
2cbfd     00          | 	byte	0
2cbfe                 | LR__4753
2cbfe     62 65 65 70 | 	byte	"beep"
2cc02     00          | 	byte	0
2cc03                 | LR__4754
2cc03     62 2E       | 	byte	"b."
2cc05     00          | 	byte	0
2cc06                 | LR__4755
2cc06     62 6F 78    | 	byte	"box"
2cc09     00          | 	byte	0
2cc0a                 | LR__4756
2cc0a     62 72 75 6E | 	byte	"brun"
2cc0e     00          | 	byte	0
2cc0f                 | LR__4757
2cc0f     62 72 2E    | 	byte	"br."
2cc12     00          | 	byte	0
2cc13                 | LR__4758
2cc13     63 69 72 63 
2cc17     6C 65       | 	byte	"circle"
2cc19     00          | 	byte	0
2cc1a                 | LR__4759
2cc1a     63 69 2E    | 	byte	"ci."
2cc1d     00          | 	byte	0
2cc1e                 | LR__4760
2cc1e     63 6C 69 63 
2cc22     6B          | 	byte	"click"
2cc23     00          | 	byte	0
2cc24                 | LR__4761
2cc24     63 6C 73    | 	byte	"cls"
2cc27     00          | 	byte	0
2cc28                 | LR__4762
2cc28     63 6F 6C 6F 
2cc2c     72          | 	byte	"color"
2cc2d     00          | 	byte	0
2cc2e                 | LR__4763
2cc2e     63 2E       | 	byte	"c."
2cc30     00          | 	byte	0
2cc31                 | LR__4764
2cc31     63 73 61 76 
2cc35     65          | 	byte	"csave"
2cc36     00          | 	byte	0
2cc37                 | LR__4765
2cc37     63 73 2E    | 	byte	"cs."
2cc3a     00          | 	byte	0
2cc3b                 | LR__4766
2cc3b     63 75 72 73 
2cc3f     6F 72       | 	byte	"cursor"
2cc41     00          | 	byte	0
2cc42                 | LR__4767
2cc42     64 65 66 73 
2cc46     6E 64       | 	byte	"defsnd"
2cc48     00          | 	byte	0
2cc49                 | LR__4768
2cc49     64 65 66 65 
2cc4d     6E 76       | 	byte	"defenv"
2cc4f     00          | 	byte	0
2cc50                 | LR__4769
2cc50     64 65 66 73 
2cc54     70 72 69 74 
2cc58     65          | 	byte	"defsprite"
2cc59     00          | 	byte	0
2cc5a                 | LR__4770
2cc5a     64 73 2E    | 	byte	"ds."
2cc5d     00          | 	byte	0
2cc5e                 | LR__4771
2cc5e     64 65 67    | 	byte	"deg"
2cc61     00          | 	byte	0
2cc62                 | LR__4772
2cc62     64 69 6D    | 	byte	"dim"
2cc65     00          | 	byte	0
2cc66                 | LR__4773
2cc66     64 69 72    | 	byte	"dir"
2cc69     00          | 	byte	0
2cc6a                 | LR__4774
2cc6a     64 70 6F 6B 
2cc6e     65          | 	byte	"dpoke"
2cc6f     00          | 	byte	0
2cc70                 | LR__4775
2cc70     64 72 61 77 | 	byte	"draw"
2cc74     00          | 	byte	0
2cc75                 | LR__4776
2cc75     64 72 2E    | 	byte	"dr."
2cc78     00          | 	byte	0
2cc79                 | LR__4777
2cc79     65 6C 73 65 | 	byte	"else"
2cc7d     00          | 	byte	0
2cc7e                 | LR__4778
2cc7e     66 63 69 72 
2cc82     63 6C 65    | 	byte	"fcircle"
2cc85     00          | 	byte	0
2cc86                 | LR__4779
2cc86     66 63 2E    | 	byte	"fc."
2cc89     00          | 	byte	0
2cc8a                 | LR__4780
2cc8a     66 69 6C 6C | 	byte	"fill"
2cc8e     00          | 	byte	0
2cc8f                 | LR__4781
2cc8f     66 69 2E    | 	byte	"fi."
2cc92     00          | 	byte	0
2cc93                 | LR__4782
2cc93     66 6F 6E 74 | 	byte	"font"
2cc97     00          | 	byte	0
2cc98                 | LR__4783
2cc98     66 6F 72    | 	byte	"for"
2cc9b     00          | 	byte	0
2cc9c                 | LR__4784
2cc9c     66 2E       | 	byte	"f."
2cc9e     00          | 	byte	0
2cc9f                 | LR__4785
2cc9f     66 72 61 6D 
2cca3     65          | 	byte	"frame"
2cca4     00          | 	byte	0
2cca5                 | LR__4786
2cca5     66 72 2E    | 	byte	"fr."
2cca8     00          | 	byte	0
2cca9                 | LR__4787
2cca9     67 6F 74 6F | 	byte	"goto"
2ccad     00          | 	byte	0
2ccae                 | LR__4788
2ccae     67 2E       | 	byte	"g."
2ccb0     00          | 	byte	0
2ccb1                 | LR__4789
2ccb1     69 66       | 	byte	"if"
2ccb3     00          | 	byte	0
2ccb4                 | LR__4790
2ccb4     69 6E 6B    | 	byte	"ink"
2ccb7     00          | 	byte	0
2ccb8                 | LR__4791
2ccb8     69 2E       | 	byte	"i."
2ccba     00          | 	byte	0
2ccbb                 | LR__4792
2ccbb     69 6E 74    | 	byte	"int"
2ccbe     00          | 	byte	0
2ccbf                 | LR__4793
2ccbf     6C 69 73 74 | 	byte	"list"
2ccc3     00          | 	byte	0
2ccc4                 | LR__4794
2ccc4     6C 2E       | 	byte	"l."
2ccc6     00          | 	byte	0
2ccc7                 | LR__4795
2ccc7     6C 6F 61 64 | 	byte	"load"
2cccb     00          | 	byte	0
2cccc                 | LR__4796
2cccc     6C 6F 2E    | 	byte	"lo."
2cccf     00          | 	byte	0
2ccd0                 | LR__4797
2ccd0     6C 70 6F 6B 
2ccd4     65          | 	byte	"lpoke"
2ccd5     00          | 	byte	0
2ccd6                 | LR__4798
2ccd6     6D 6F 64 65 | 	byte	"mode"
2ccda     00          | 	byte	0
2ccdb                 | LR__4799
2ccdb     6D 2E       | 	byte	"m."
2ccdd     00          | 	byte	0
2ccde                 | LR__4800
2ccde     6D 6F 75 73 
2cce2     65          | 	byte	"mouse"
2cce3     00          | 	byte	0
2cce4                 | LR__4801
2cce4     6E 65 77    | 	byte	"new"
2cce7     00          | 	byte	0
2cce8                 | LR__4802
2cce8     6E 65 78 74 | 	byte	"next"
2ccec     00          | 	byte	0
2cced                 | LR__4803
2cced     6E 2E       | 	byte	"n."
2ccef     00          | 	byte	0
2ccf0                 | LR__4804
2ccf0     70 61 70 65 
2ccf4     72          | 	byte	"paper"
2ccf5     00          | 	byte	0
2ccf6                 | LR__4805
2ccf6     70 2E       | 	byte	"p."
2ccf8     00          | 	byte	0
2ccf9                 | LR__4806
2ccf9     70 69 6E 66 
2ccfd     6C 6F 61 74 | 	byte	"pinfloat"
2cd01     00          | 	byte	0
2cd02                 | LR__4807
2cd02     70 69 6E 68 
2cd06     69          | 	byte	"pinhi"
2cd07     00          | 	byte	0
2cd08                 | LR__4808
2cd08     70 69 6E 6C 
2cd0c     6F          | 	byte	"pinlo"
2cd0d     00          | 	byte	0
2cd0e                 | LR__4809
2cd0e     70 69 6E 73 
2cd12     74 61 72 74 | 	byte	"pinstart"
2cd16     00          | 	byte	0
2cd17                 | LR__4810
2cd17     70 69 6E 74 
2cd1b     6F 67 67 6C 
2cd1f     65          | 	byte	"pintoggle"
2cd20     00          | 	byte	0
2cd21                 | LR__4811
2cd21     70 69 6E 77 
2cd25     72 69 74 65 | 	byte	"pinwrite"
2cd29     00          | 	byte	0
2cd2a                 | LR__4812
2cd2a     70 6C 61 79 | 	byte	"play"
2cd2e     00          | 	byte	0
2cd2f                 | LR__4813
2cd2f     70 6C 6F 74 | 	byte	"plot"
2cd33     00          | 	byte	0
2cd34                 | LR__4814
2cd34     70 6C 2E    | 	byte	"pl."
2cd37     00          | 	byte	0
2cd38                 | LR__4815
2cd38     70 6F 6B 65 | 	byte	"poke"
2cd3c     00          | 	byte	0
2cd3d                 | LR__4816
2cd3d     70 6F 73 69 
2cd41     74 69 6F 6E | 	byte	"position"
2cd45     00          | 	byte	0
2cd46                 | LR__4817
2cd46     70 6F 73 2E | 	byte	"pos."
2cd4a     00          | 	byte	0
2cd4b                 | LR__4818
2cd4b     70 72 69 6E 
2cd4f     74          | 	byte	"print"
2cd50     00          | 	byte	0
2cd51                 | LR__4819
2cd51     3F          | 	byte	"?"
2cd52     00          | 	byte	0
2cd53                 | LR__4820
2cd53     72 61 64    | 	byte	"rad"
2cd56     00          | 	byte	0
2cd57                 | LR__4821
2cd57     72 65 6C 65 
2cd5b     61 73 65    | 	byte	"release"
2cd5e     00          | 	byte	0
2cd5f                 | LR__4822
2cd5f     72 75 6E    | 	byte	"run"
2cd62     00          | 	byte	0
2cd63                 | LR__4823
2cd63     73 61 76 65 | 	byte	"save"
2cd67     00          | 	byte	0
2cd68                 | LR__4824
2cd68     73 2E       | 	byte	"s."
2cd6a     00          | 	byte	0
2cd6b                 | LR__4825
2cd6b     73 65 74 64 
2cd6f     65 6C 61 79 | 	byte	"setdelay"
2cd73     00          | 	byte	0
2cd74                 | LR__4826
2cd74     73 65 74 65 
2cd78     6E 76       | 	byte	"setenv"
2cd7a     00          | 	byte	0
2cd7b                 | LR__4827
2cd7b     73 65 74 6C 
2cd7f     65 6E       | 	byte	"setlen"
2cd81     00          | 	byte	0
2cd82                 | LR__4828
2cd82     73 65 74 70 
2cd86     61 6E       | 	byte	"setpan"
2cd88     00          | 	byte	0
2cd89                 | LR__4829
2cd89     73 65 74 73 
2cd8d     75 73 74 61 
2cd91     69 6E       | 	byte	"setsustain"
2cd93     00          | 	byte	0
2cd94                 | LR__4830
2cd94     73 65 74 76 
2cd98     6F 6C       | 	byte	"setvol"
2cd9a     00          | 	byte	0
2cd9b                 | LR__4831
2cd9b     73 65 74 77 
2cd9f     61 76 65    | 	byte	"setwave"
2cda2     00          | 	byte	0
2cda3                 | LR__4832
2cda3     73 6F 75 6E 
2cda7     64          | 	byte	"sound"
2cda8     00          | 	byte	0
2cda9                 | LR__4833
2cda9     73 6F 2E    | 	byte	"so."
2cdac     00          | 	byte	0
2cdad                 | LR__4834
2cdad     73 70 72 69 
2cdb1     74 65       | 	byte	"sprite"
2cdb3     00          | 	byte	0
2cdb4                 | LR__4835
2cdb4     73 70 2E    | 	byte	"sp."
2cdb7     00          | 	byte	0
2cdb8                 | LR__4836
2cdb8     74 68 65 6E | 	byte	"then"
2cdbc     00          | 	byte	0
2cdbd                 | LR__4837
2cdbd     77 61 69 74 
2cdc1     6D 73       | 	byte	"waitms"
2cdc3     00          | 	byte	0
2cdc4                 | LR__4838
2cdc4     77 61 69 74 
2cdc8     63 6C 6F 63 
2cdcc     6B          | 	byte	"waitclock"
2cdcd     00          | 	byte	0
2cdce                 | LR__4839
2cdce     77 63 2E    | 	byte	"wc."
2cdd1     00          | 	byte	0
2cdd2                 | LR__4840
2cdd2     77 61 69 74 
2cdd6     76 62 6C    | 	byte	"waitvbl"
2cdd9     00          | 	byte	0
2cdda                 | LR__4841
2cdda     77 76 2E    | 	byte	"wv."
2cddd     00          | 	byte	0
2cdde                 | LR__4842
2cdde     77 78 70 69 
2cde2     6E          | 	byte	"wxpin"
2cde3     00          | 	byte	0
2cde4                 | LR__4843
2cde4     77 79 70 69 
2cde8     6E          | 	byte	"wypin"
2cde9     00          | 	byte	0
2cdea                 | LR__4844
2cdea     61 62 73    | 	byte	"abs"
2cded     00          | 	byte	0
2cdee                 | LR__4845
2cdee     61 63 6F 73 | 	byte	"acos"
2cdf2     00          | 	byte	0
2cdf3                 | LR__4846
2cdf3     61 64 72    | 	byte	"adr"
2cdf6     00          | 	byte	0
2cdf7                 | LR__4847
2cdf7     61 64 64 72 | 	byte	"addr"
2cdfb     00          | 	byte	0
2cdfc                 | LR__4848
2cdfc     76 61 72 70 
2ce00     74 72       | 	byte	"varptr"
2ce02     00          | 	byte	0
2ce03                 | LR__4849
2ce03     61 73 69 6E | 	byte	"asin"
2ce07     00          | 	byte	0
2ce08                 | LR__4850
2ce08     61 74 6E    | 	byte	"atn"
2ce0b     00          | 	byte	0
2ce0c                 | LR__4851
2ce0c     63 6F 73    | 	byte	"cos"
2ce0f     00          | 	byte	0
2ce10                 | LR__4852
2ce10     64 70 65 65 
2ce14     6B          | 	byte	"dpeek"
2ce15     00          | 	byte	0
2ce16                 | LR__4853
2ce16     66 72 65    | 	byte	"fre"
2ce19     00          | 	byte	0
2ce1a                 | LR__4854
2ce1a     67 65 74 70 
2ce1e     69 78 65 6C | 	byte	"getpixel"
2ce22     00          | 	byte	0
2ce23                 | LR__4855
2ce23     67 65 2E    | 	byte	"ge."
2ce26     00          | 	byte	0
2ce27                 | LR__4856
2ce27     67 65 74 65 
2ce2b     6E 76 73 75 
2ce2f     73 74 61 69 
2ce33     6E          | 	byte	"getenvsustain"
2ce34     00          | 	byte	0
2ce35                 | LR__4857
2ce35     67 65 74 6E 
2ce39     6F 74 65 76 
2ce3d     61 6C 75 65 | 	byte	"getnotevalue"
2ce41     00          | 	byte	0
2ce42                 | LR__4858
2ce42     67 65 74 74 
2ce46     69 6D 65    | 	byte	"gettime"
2ce49     00          | 	byte	0
2ce4a                 | LR__4859
2ce4a     69 6E 6B 65 
2ce4e     79 24       | 	byte	"inkey$"
2ce50     00          | 	byte	0
2ce51                 | LR__4860
2ce51     6C 70 65 65 
2ce55     6B          | 	byte	"lpeek"
2ce56     00          | 	byte	0
2ce57                 | LR__4861
2ce57     6D 6F 75 73 
2ce5b     65 6B       | 	byte	"mousek"
2ce5d     00          | 	byte	0
2ce5e                 | LR__4862
2ce5e     6D 6F 75 73 
2ce62     65 77       | 	byte	"mousew"
2ce64     00          | 	byte	0
2ce65                 | LR__4863
2ce65     6D 6F 75 73 
2ce69     65 78       | 	byte	"mousex"
2ce6b     00          | 	byte	0
2ce6c                 | LR__4864
2ce6c     6D 6F 75 73 
2ce70     65 79       | 	byte	"mousey"
2ce72     00          | 	byte	0
2ce73                 | LR__4865
2ce73     70 65 65 6B | 	byte	"peek"
2ce77     00          | 	byte	0
2ce78                 | LR__4866
2ce78     70 69 6E 72 
2ce7c     65 61 64    | 	byte	"pinread"
2ce7f     00          | 	byte	0
2ce80                 | LR__4867
2ce80     72 64 70 69 
2ce84     6E          | 	byte	"rdpin"
2ce85     00          | 	byte	0
2ce86                 | LR__4868
2ce86     72 71 70 69 
2ce8a     6E          | 	byte	"rqpin"
2ce8b     00          | 	byte	0
2ce8c                 | LR__4869
2ce8c     72 6E 64    | 	byte	"rnd"
2ce8f     00          | 	byte	0
2ce90                 | LR__4870
2ce90     73 69 6E    | 	byte	"sin"
2ce93     00          | 	byte	0
2ce94                 | LR__4871
2ce94     73 71 72    | 	byte	"sqr"
2ce97     00          | 	byte	0
2ce98                 | LR__4872
2ce98     73 74 69 63 
2ce9c     6B          | 	byte	"stick"
2ce9d     00          | 	byte	0
2ce9e                 | LR__4873
2ce9e     73 74 72 69 
2cea2     67          | 	byte	"strig"
2cea3     00          | 	byte	0
2cea4                 | LR__4874
2cea4     74 61 6E    | 	byte	"tan"
2cea7     00          | 	byte	0
2cea8                 | LR__4875
2cea8     61          | 	byte	"a"
2cea9     00          | 	byte	0
2ceaa                 | LR__4876
2ceaa     7A          | 	byte	"z"
2ceab     00          | 	byte	0
2ceac                 | LR__4877
2ceac     5F          | 	byte	"_"
2cead     00          | 	byte	0
2ceae                 | LR__4878
2ceae     61          | 	byte	"a"
2ceaf     00          | 	byte	0
2ceb0                 | LR__4879
2ceb0     7A          | 	byte	"z"
2ceb1     00          | 	byte	0
2ceb2                 | LR__4880
2ceb2     30          | 	byte	"0"
2ceb3     00          | 	byte	0
2ceb4                 | LR__4881
2ceb4     39          | 	byte	"9"
2ceb5     00          | 	byte	0
2ceb6                 | LR__4882
2ceb6     5F          | 	byte	"_"
2ceb7     00          | 	byte	0
2ceb8                 | LR__4883
2ceb8     2E          | 	byte	"."
2ceb9     00          | 	byte	0
2ceba                 | LR__4884
2ceba     61          | 	byte	"a"
2cebb     00          | 	byte	0
2cebc                 | LR__4885
2cebc     7A          | 	byte	"z"
2cebd     00          | 	byte	0
2cebe                 | LR__4886
2cebe     30          | 	byte	"0"
2cebf     00          | 	byte	0
2cec0                 | LR__4887
2cec0     39          | 	byte	"9"
2cec1     00          | 	byte	0
2cec2                 | LR__4888
2cec2     5F          | 	byte	"_"
2cec3     00          | 	byte	0
2cec4                 | LR__4889
2cec4     24          | 	byte	"$"
2cec5     00          | 	byte	0
2cec6                 | LR__4890
2cec6     25          | 	byte	"%"
2cec7     00          | 	byte	0
2cec8                 | LR__4891
2cec8     21          | 	byte	"!"
2cec9     00          | 	byte	0
2ceca                 | LR__4892
2ceca     30          | 	byte	"0"
2cecb     00          | 	byte	0
2cecc                 | LR__4893
2cecc     39          | 	byte	"9"
2cecd     00          | 	byte	0
2cece                 | LR__4894
2cece     2E          | 	byte	"."
2cecf     00          | 	byte	0
2ced0                 | LR__4895
2ced0     24          | 	byte	"$"
2ced1     00          | 	byte	0
2ced2                 | LR__4896
2ced2     25          | 	byte	"%"
2ced3     00          | 	byte	0
2ced4                 | LR__4897
2ced4     2D          | 	byte	"-"
2ced5     00          | 	byte	0
2ced6                 | LR__4898
2ced6     2E          | 	byte	"."
2ced7     00          | 	byte	0
2ced8                 | LR__4899
2ced8     30          | 	byte	"0"
2ced9     00          | 	byte	0
2ceda                 | LR__4900
2ceda     39          | 	byte	"9"
2cedb     00          | 	byte	0
2cedc                 | LR__4901
2cedc     5F          | 	byte	"_"
2cedd     00          | 	byte	0
2cede                 | LR__4902
2cede     2E          | 	byte	"."
2cedf     00          | 	byte	0
2cee0                 | LR__4903
2cee0     45          | 	byte	"E"
2cee1     00          | 	byte	0
2cee2                 | LR__4904
2cee2     65          | 	byte	"e"
2cee3     00          | 	byte	0
2cee4                 | LR__4905
2cee4     2D          | 	byte	"-"
2cee5     00          | 	byte	0
2cee6                 | LR__4906
2cee6     2D          | 	byte	"-"
2cee7     00          | 	byte	0
2cee8                 | LR__4907
2cee8     65          | 	byte	"e"
2cee9     00          | 	byte	0
2ceea                 | LR__4908
2ceea     2E          | 	byte	"."
2ceeb     00          | 	byte	0
2ceec                 | LR__4909
2ceec     45          | 	byte	"E"
2ceed     00          | 	byte	0
2ceee                 | LR__4910
2ceee     65          | 	byte	"e"
2ceef     00          | 	byte	0
2cef0                 | LR__4911
2cef0     30          | 	byte	"0"
2cef1     00          | 	byte	0
2cef2                 | LR__4912
2cef2     39          | 	byte	"9"
2cef3     00          | 	byte	0
2cef4                 | LR__4913
2cef4     24          | 	byte	"$"
2cef5     00          | 	byte	0
2cef6                 | LR__4914
2cef6     25          | 	byte	"%"
2cef7     00          | 	byte	0
2cef8                 | LR__4915
2cef8     2D          | 	byte	"-"
2cef9     00          | 	byte	0
2cefa                 | LR__4916
2cefa     30          | 	byte	"0"
2cefb     00          | 	byte	0
2cefc                 | LR__4917
2cefc     39          | 	byte	"9"
2cefd     00          | 	byte	0
2cefe                 | LR__4918
2cefe     5F          | 	byte	"_"
2ceff     00          | 	byte	0
2cf00                 | LR__4919
2cf00     30          | 	byte	"0"
2cf01     00          | 	byte	0
2cf02                 | LR__4920
2cf02     39          | 	byte	"9"
2cf03     00          | 	byte	0
2cf04                 | LR__4921
2cf04     5F          | 	byte	"_"
2cf05     00          | 	byte	0
2cf06                 | LR__4922
2cf06     22          | 	byte	34
2cf07     00          | 	byte	0
2cf08                 | LR__4923
2cf08     22          | 	byte	34
2cf09     00          | 	byte	0
2cf0a                 | LR__4924
2cf0a     44 69 6D 3A 
2cf0e     20 61 74 20 
2cf12     6C 69 6E 65 
2cf16     20          | 	byte	"Dim: at line "
2cf17     00          | 	byte	0
2cf18                 | LR__4925
2cf18     3A 20 77 61 
2cf1c     72 6E 69 6E 
2cf20     67 3A 20 74 
2cf24     68 65 20 76 
2cf28     61 72 69 61 
2cf2c     62 6C 65 20 
2cf30     65 78 69 73 
2cf34     74 65 64 2E | 	byte	": warning: the variable existed."
2cf38     00          | 	byte	0
2cf39                 | LR__4926
2cf39     28          | 	byte	"("
2cf3a     00          | 	byte	0
2cf3b                 | LR__4927
2cf3b     61 73       | 	byte	"as"
2cf3d     00          | 	byte	0
2cf3e                 | LR__4928
2cf3e     61 73       | 	byte	"as"
2cf40     00          | 	byte	0
2cf41                 | LR__4929
2cf41     2C          | 	byte	","
2cf42     00          | 	byte	0
2cf43                 | LR__4930
2cf43     29          | 	byte	")"
2cf44     00          | 	byte	0
2cf45                 | LR__4931
2cf45     29          | 	byte	")"
2cf46     00          | 	byte	0
2cf47                 | LR__4932
2cf47     61 73       | 	byte	"as"
2cf49     00          | 	byte	0
2cf4a                 | LR__4933
2cf4a     62 79 74 65 | 	byte	"byte"
2cf4e     00          | 	byte	0
2cf4f                 | LR__4934
2cf4f     75 62 79 74 
2cf53     65          | 	byte	"ubyte"
2cf54     00          | 	byte	0
2cf55                 | LR__4935
2cf55     73 68 6F 72 
2cf59     74          | 	byte	"short"
2cf5a     00          | 	byte	0
2cf5b                 | LR__4936
2cf5b     75 73 68 6F 
2cf5f     72 74       | 	byte	"ushort"
2cf61     00          | 	byte	0
2cf62                 | LR__4937
2cf62     6C 6F 6E 67 | 	byte	"long"
2cf66     00          | 	byte	0
2cf67                 | LR__4938
2cf67     69 6E 74 65 
2cf6b     67 65 72    | 	byte	"integer"
2cf6e     00          | 	byte	0
2cf6f                 | LR__4939
2cf6f     75 6C 6F 6E 
2cf73     67          | 	byte	"ulong"
2cf74     00          | 	byte	0
2cf75                 | LR__4940
2cf75     69 6E 74 36 
2cf79     34          | 	byte	"int64"
2cf7a     00          | 	byte	0
2cf7b                 | LR__4941
2cf7b     75 69 6E 74 
2cf7f     36 34       | 	byte	"uint64"
2cf81     00          | 	byte	0
2cf82                 | LR__4942
2cf82     73 69 6E 67 
2cf86     6C 65       | 	byte	"single"
2cf88     00          | 	byte	0
2cf89                 | LR__4943
2cf89     64 6F 75 62 
2cf8d     6C 65       | 	byte	"double"
2cf8f     00          | 	byte	0
2cf90                 | LR__4944
2cf90     73 74 72 69 
2cf94     6E 67       | 	byte	"string"
2cf96     00          | 	byte	0
2cf97                 | LR__4945
2cf97     74 6F       | 	byte	"to"
2cf99     00          | 	byte	0
2cf9a                 | LR__4946
2cf9a     73 74 65 70 | 	byte	"step"
2cf9e     00          | 	byte	0
2cf9f                 | LR__4947
2cf9f     73 2E       | 	byte	"s."
2cfa1     00          | 	byte	0
2cfa2                 | LR__4948
2cfa2     57 65 20 68 
2cfa6     61 76 65 20 
2cfaa     61 20 73 6C 
2cfae     6F 77 20 67 
2cfb2     6F 74 6F 2C 
2cfb6     20 74 6F 64 
2cfba     6F 20 20    | 	byte	"We have a slow goto, todo  "
2cfbd     00          | 	byte	0
2cfbe                 | LR__4949
2cfbe                 | 	byte	
2cfbe     00          | 	byte	0
2cfbf                 | LR__4950
2cfbf     2F          | 	byte	"/"
2cfc0     00          | 	byte	0
2cfc1                 | LR__4951
2cfc1                 | 	byte	
2cfc1     00          | 	byte	0
2cfc2                 | LR__4952
2cfc2     53 61 76 65 
2cfc6     64 20 61 73 
2cfca     20          | 	byte	"Saved as "
2cfcb     00          | 	byte	0
2cfcc                 | LR__4953
2cfcc     2F          | 	byte	"/"
2cfcd     00          | 	byte	0
2cfce                 | LR__4954
2cfce                 | 	byte	
2cfce     00          | 	byte	0
2cfcf                 | LR__4955
2cfcf     2F          | 	byte	"/"
2cfd0     00          | 	byte	0
2cfd1                 | LR__4956
2cfd1     2F          | 	byte	"/"
2cfd2     00          | 	byte	0
2cfd3                 | LR__4957
2cfd3     2E 62 61 73 | 	byte	".bas"
2cfd7     00          | 	byte	0
2cfd8                 | LR__4958
2cfd8     53 79 73 74 
2cfdc     65 6D 20 65 
2cfe0     72 72 6F 72 
2cfe4     20          | 	byte	"System error "
2cfe5     00          | 	byte	0
2cfe6                 | LR__4959
2cfe6     3A 20       | 	byte	": "
2cfe8     00          | 	byte	0
2cfe9                 | LR__4960
2cfe9     2E 62 61 73 | 	byte	".bas"
2cfed     00          | 	byte	0
2cfee                 | LR__4961
2cfee     2F          | 	byte	"/"
2cfef     00          | 	byte	0
2cff0                 | LR__4962
2cff0     30          | 	byte	"0"
2cff1     00          | 	byte	0
2cff2                 | LR__4963
2cff2     39          | 	byte	"9"
2cff3     00          | 	byte	0
2cff4                 | LR__4964
2cff4                 | 	byte	
2cff4     00          | 	byte	0
2cff5                 | LR__4965
2cff5     4C 6F 61 64 
2cff9     65 64 20    | 	byte	"Loaded "
2cffc     00          | 	byte	0
2cffd                 | LR__4966
2cffd     2F          | 	byte	"/"
2cffe     00          | 	byte	0
2cfff                 | LR__4967
2cfff     53 74 6F 70 
2d003     70 65 64 20 
2d007     61 74 20 6C 
2d00b     69 6E 65 20 | 	byte	"Stopped at line "
2d00f     00          | 	byte	0
2d010                 | LR__4968
2d010                 | 	byte	
2d010     00          | 	byte	0
2d011                 | LR__4969
2d011                 | 	byte	
2d011     00          | 	byte	0
2d012                 | LR__4970
2d012     2F 73 64 2F 
2d016     6D 65 64 69 
2d01a     61 2F 68 2F | 	byte	"/sd/media/h/"
2d01e     00          | 	byte	0
2d01f                 | LR__4971
2d01f     53 79 73 74 
2d023     65 6D 20 65 
2d027     72 72 6F 72 
2d02b     20          | 	byte	"System error "
2d02c     00          | 	byte	0
2d02d                 | LR__4972
2d02d     3A 20       | 	byte	": "
2d02f     00          | 	byte	0
2d030                 | LR__4973
2d030                 | 	byte	
2d030     00          | 	byte	0
2d031                 | LR__4974
2d031                 | 	byte	
2d031     00          | 	byte	0
2d032                 | LR__4975
2d032     2F 73 64 2F 
2d036     6D 65 64 69 
2d03a     61 2F 73 2F | 	byte	"/sd/media/s/"
2d03e     00          | 	byte	0
2d03f                 | LR__4976
2d03f     53 79 73 74 
2d043     65 6D 20 65 
2d047     72 72 6F 72 
2d04b     20          | 	byte	"System error "
2d04c     00          | 	byte	0
2d04d                 | LR__4977
2d04d     3A 20       | 	byte	": "
2d04f     00          | 	byte	0
2d050                 | LR__4978
2d050     6E 6F 6E 61 
2d054     6D 65 2E 62 
2d058     61 73       | 	byte	"noname.bas"
2d05a     00          | 	byte	0
2d05b                 | LR__4979
2d05b     45 72 72 6F 
2d05f     72 20       | 	byte	"Error "
2d061     00          | 	byte	0
2d062                 | LR__4980
2d062     3A 20       | 	byte	": "
2d064     00          | 	byte	0
2d065                 | LR__4981
2d065                 | 	byte	
2d065     00          | 	byte	0
2d066                 | LR__4982
2d066                 | 	byte	
2d066     00          | 	byte	0
2d067                 | LR__4983
2d067     72 6E 64 3A 
2d06b     20          | 	byte	"rnd: "
2d06c     00          | 	byte	0
2d06d                 | LR__4984
2d06d     72 6E 64 3A 
2d071     20          | 	byte	"rnd: "
2d072     00          | 	byte	0
2d073                 | LR__4985
2d073     67 65 74 65 
2d077     6E 76 73 75 
2d07b     73 74 61 69 
2d07f     6E 3A 20    | 	byte	"getenvsustain: "
2d082     00          | 	byte	0
2d083                 | LR__4986
2d083     73 69 6E 3A 
2d087     20          | 	byte	"sin: "
2d088     00          | 	byte	0
2d089                 | LR__4987
2d089     63 6F 73 3A 
2d08d     20          | 	byte	"cos: "
2d08e     00          | 	byte	0
2d08f                 | LR__4988
2d08f     74 61 6E 3A 
2d093     20          | 	byte	"tan: "
2d094     00          | 	byte	0
2d095                 | LR__4989
2d095     61 73 69 6E 
2d099     3A 20       | 	byte	"asin: "
2d09b     00          | 	byte	0
2d09c                 | LR__4990
2d09c     61 63 6F 73 
2d0a0     3A 20       | 	byte	"acos: "
2d0a2     00          | 	byte	0
2d0a3                 | LR__4991
2d0a3     61 74 6E 3A 
2d0a7     20          | 	byte	"atn: "
2d0a8     00          | 	byte	0
2d0a9                 | LR__4992
2d0a9     73 71 72 3A 
2d0ad     20          | 	byte	"sqr: "
2d0ae     00          | 	byte	0
2d0af                 | LR__4993
2d0af     73 74 69 63 
2d0b3     6B 3A 20    | 	byte	"stick: "
2d0b6     00          | 	byte	0
2d0b7                 | LR__4994
2d0b7     73 74 72 69 
2d0bb     67 3A 20    | 	byte	"strig: "
2d0be     00          | 	byte	0
2d0bf                 | LR__4995
2d0bf     67 65 74 70 
2d0c3     69 78 65 6C 
2d0c7     3A 20       | 	byte	"getpixel: "
2d0c9     00          | 	byte	0
2d0ca                 | LR__4996
2d0ca     20 42 41 53 
2d0ce     49 43 20 62 
2d0d2     79 74 65 73 
2d0d6     20 66 72 65 
2d0da     65          | 	byte	" BASIC bytes free"
2d0db     00          | 	byte	0
2d0dc                 | LR__4997
2d0dc                 | 	byte	
2d0dc     00          | 	byte	0
2d0dd                 | LR__4998
2d0dd     2F 73 64 2F 
2d0e1     62 61 73    | 	byte	"/sd/bas"
2d0e4     00          | 	byte	0
2d0e5                 | LR__4999
2d0e5     57 6F 72 6B 
2d0e9     69 6E 67 20 
2d0ed     64 69 72 65 
2d0f1     63 74 6F 72 
2d0f5     79 3A 20    | 	byte	"Working directory: "
2d0f8     00          | 	byte	0
2d0f9                 | LR__5000
2d0f9     2A          | 	byte	"*"
2d0fa     00          | 	byte	0
2d0fb                 | LR__5001
2d0fb                 | 	byte	
2d0fb     00          | 	byte	0
2d0fc                 | LR__5002
2d0fc     5B 64 69 72 
2d100     5D 20       | 	byte	"[dir] "
2d102     00          | 	byte	0
2d103                 | LR__5003
2d103     2A          | 	byte	"*"
2d104     00          | 	byte	0
2d105                 | LR__5004
2d105                 | 	byte	
2d105     00          | 	byte	0
2d106                 | LR__5005
2d106     2D 2D 2D 2D 
2d10a     2D 6D 6F 72 
2d10e     65 2C 20 70 
2d112     72 65 73 73 
2d116     20 61 6E 79 
2d11a     20 6B 65 79 | 	byte	"-----more, press any key"
2d11e     00          | 	byte	0
2d11f                 | LR__5006
2d11f     20 20 20 20 
      ...             
2d137     20 20 20 20 
2d13b     20          | 	byte	"                             "
2d13c     00          | 	byte	0
2d13d                 | LR__5007
2d13d     2F          | 	byte	"/"
2d13e     00          | 	byte	0
2d13f                 | LR__5008
2d13f     2F 73 64 2F 
2d143     62 69 6E 2F | 	byte	"/sd/bin/"
2d147     00          | 	byte	0
2d148                 | LR__5009
2d148     53 79 73 74 
2d14c     65 6D 20 65 
2d150     72 72 6F 72 
2d154     20          | 	byte	"System error "
2d155     00          | 	byte	0
2d156                 | LR__5010
2d156     3A 20       | 	byte	": "
2d158     00          | 	byte	0
2d159                 | LR__5011
2d159                 | 	byte	
2d159     00          | 	byte	0
2d15a                 | LR__5012
2d15a     45 78 70 65 
2d15e     63 74 65 64 
2d162     20 6E 75 6D 
2d166     62 65 72 2C 
2d16a     20 67 6F 74 
2d16e     20 73 6F 6D 
2d172     65 74 68 69 
2d176     6E 67 20 65 
2d17a     6C 73 65 2E | 	byte	"Expected number, got something else."
2d17e     00          | 	byte	0
2d17f                 | LR__5013
2d17f     43 61 6E 6E 
2d183     6F 74 20 61 
2d187     64 64 20 61 
2d18b     20 6E 75 6D 
2d18f     62 65 72 20 
2d193     74 6F 20 61 
2d197     20 73 74 72 
2d19b     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2d19f     00          | 	byte	0
2d1a0                 | LR__5014
2d1a0     43 61 6E 6E 
2d1a4     6F 74 20 73 
2d1a8     75 62 73 74 
2d1ac     72 61 63 74 
2d1b0     20 73 74 72 
2d1b4     69 6E 67 73 
2d1b8     2E          | 	byte	"Cannot substract strings."
2d1b9     00          | 	byte	0
2d1ba                 | LR__5015
2d1ba     55 6E 6B 6E 
2d1be     6F 77 6E 20 
2d1c2     65 72 72 6F 
2d1c6     72 20 77 68 
2d1ca     69 6C 65 20 
2d1ce     61 64 64 69 
2d1d2     6E 67 2E    | 	byte	"Unknown error while adding."
2d1d5     00          | 	byte	0
2d1d6                 | LR__5016
2d1d6     55 6E 6B 6E 
2d1da     6F 77 6E 20 
2d1de     65 72 72 6F 
2d1e2     72 20 77 68 
2d1e6     69 6C 65 20 
2d1ea     73 75 62 73 
2d1ee     74 72 61 63 
2d1f2     74 69 6E 67 
2d1f6     2E          | 	byte	"Unknown error while substracting."
2d1f7     00          | 	byte	0
2d1f8                 | LR__5017
2d1f8     43 61 6E 6E 
2d1fc     6F 74 20 64 
2d200     6F 20 6C 6F 
2d204     67 69 63 20 
2d208     6F 70 65 72 
2d20c     61 74 69 6F 
2d210     6E 20 6F 6E 
2d214     20 73 74 72 
2d218     69 6E 67 20 
2d21c     6F 72 20 66 
2d220     6C 6F 61 74 
2d224     2E          | 	byte	"Cannot do logic operation on string or float."
2d225     00          | 	byte	0
2d226                 | LR__5018
2d226     55 6E 6B 6E 
2d22a     6F 77 6E 20 
2d22e     65 72 72 6F 
2d232     72 20 77 68 
2d236     69 6C 65 20 
2d23a     64 6F 69 6E 
2d23e     67 20 6C 6F 
2d242     67 69 63 20 
2d246     6F 70 65 72 
2d24a     61 74 69 6F 
2d24e     6E 2E       | 	byte	"Unknown error while doing logic operation."
2d250     00          | 	byte	0
2d251                 | LR__5019
2d251     43 61 6E 6E 
2d255     6F 74 20 6D 
2d259     75 6C 74 69 
2d25d     70 6C 79 20 
2d261     73 74 72 69 
2d265     6E 67 73 2E | 	byte	"Cannot multiply strings."
2d269     00          | 	byte	0
2d26a                 | LR__5020
2d26a     55 6E 6B 6E 
2d26e     6F 77 6E 20 
2d272     65 72 72 6F 
2d276     72 20 77 68 
2d27a     69 6C 65 20 
2d27e     6D 75 6C 74 
2d282     69 70 6C 79 
2d286     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2d28a     00          | 	byte	0
2d28b                 | LR__5021
2d28b     43 61 6E 6E 
2d28f     6F 74 20 64 
2d293     69 76 69 64 
2d297     65 20 73 74 
2d29b     72 69 6E 67 
2d29f     73 2E       | 	byte	"Cannot divide strings."
2d2a1     00          | 	byte	0
2d2a2                 | LR__5022
2d2a2     55 6E 6B 6E 
2d2a6     6F 77 6E 20 
2d2aa     65 72 72 6F 
2d2ae     72 20 77 68 
2d2b2     69 6C 65 20 
2d2b6     64 69 76 69 
2d2ba     64 69 6E 67 
2d2be     2E          | 	byte	"Unknown error while dividing."
2d2bf     00          | 	byte	0
2d2c0                 | LR__5023
2d2c0     43 61 6E 6E 
2d2c4     6F 74 20 63 
2d2c8     6F 6D 70 75 
2d2cc     74 65 20 61 
2d2d0     20 70 6F 77 
2d2d4     65 72 20 6F 
2d2d8     66 20 61 20 
2d2dc     73 74 72 69 
2d2e0     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2d2e3     00          | 	byte	0
2d2e4                 | LR__5024
2d2e4     55 6E 6B 6E 
2d2e8     6F 77 6E 20 
2d2ec     65 72 72 6F 
2d2f0     72 20 77 68 
2d2f4     69 6C 65 20 
2d2f8     63 6F 6D 70 
2d2fc     75 74 69 6E 
2d300     67 20 61 20 
2d304     70 6F 77 65 
2d308     72 2E       | 	byte	"Unknown error while computing a power."
2d30a     00          | 	byte	0
2d30b                 | LR__5025
2d30b     52 69 67 68 
2d30f     74 20 70 61 
2d313     72 65 6E 74 
2d317     68 65 73 69 
2d31b     73 20 65 78 
2d31f     70 65 63 74 
2d323     65 64 2E    | 	byte	"Right parenthesis expected."
2d326     00          | 	byte	0
2d327                 | LR__5026
2d327     45 78 70 65 
2d32b     63 74 65 64 
2d32f     20 73 74 72 
2d333     69 6E 67 2E | 	byte	"Expected string."
2d337     00          | 	byte	0
2d338                 | LR__5027
2d338     45 78 70 65 
2d33c     63 74 65 64 
2d340     20 66 6C 6F 
2d344     61 74 2E    | 	byte	"Expected float."
2d347     00          | 	byte	0
2d348                 | LR__5028
2d348     45 78 70 65 
2d34c     63 74 65 64 
2d350     20 75 6E 73 
2d354     69 67 6E 65 
2d358     64 20 69 6E 
2d35c     74 65 67 65 
2d360     72 2E       | 	byte	"Expected unsigned integer."
2d362     00          | 	byte	0
2d363                 | LR__5029
2d363     45 78 70 65 
2d367     63 74 65 64 
2d36b     20 69 6E 74 
2d36f     65 67 65 72 
2d373     2E          | 	byte	"Expected integer."
2d374     00          | 	byte	0
2d375                 | LR__5030
2d375     4E 6F 20 6D 
2d379     6F 72 65 20 
2d37d     76 61 72 69 
2d381     61 62 6C 65 
2d385     20 73 6C 6F 
2d389     74 73 2E    | 	byte	"No more variable slots."
2d38c     00          | 	byte	0
2d38d                 | LR__5031
2d38d     56 61 72 69 
2d391     61 62 6C 65 
2d395     20 6E 6F 74 
2d399     20 66 6F 75 
2d39d     6E 64 2E    | 	byte	"Variable not found."
2d3a0     00          | 	byte	0
2d3a1                 | LR__5032
2d3a1     43 6F 6D 6D 
2d3a5     61 20 65 78 
2d3a9     70 65 63 74 
2d3ad     65 64 2E    | 	byte	"Comma expected."
2d3b0     00          | 	byte	0
2d3b1                 | LR__5033
2d3b1     43 6F 6D 6D 
2d3b5     61 20 6F 72 
2d3b9     20 73 65 6D 
2d3bd     69 63 6F 6C 
2d3c1     6F 6E 20 65 
2d3c5     78 70 65 63 
2d3c9     74 65 64 2E | 	byte	"Comma or semicolon expected."
2d3cd     00          | 	byte	0
2d3ce                 | LR__5034
2d3ce     55 6E 6B 6E 
2d3d2     6F 77 6E 20 
2d3d6     63 6F 6D 6D 
2d3da     61 6E 64 2E | 	byte	"Unknown command."
2d3de     00          | 	byte	0
2d3df                 | LR__5035
2d3df     53 74 61 63 
2d3e3     6B 20 75 6E 
2d3e7     64 65 72 66 
2d3eb     6C 6F 77 2E | 	byte	"Stack underflow."
2d3ef     00          | 	byte	0
2d3f0                 | LR__5036
2d3f0     43 61 6E 6E 
2d3f4     6F 74 20 65 
2d3f8     78 65 63 75 
2d3fc     74 65 20 67 
2d400     6F 74 6F 20 
2d404     69 6E 20 74 
2d408     68 65 20 69 
2d40c     6D 6D 65 64 
2d410     69 61 74 65 
2d414     20 6D 6F 64 
2d418     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2d41a     00          | 	byte	0
2d41b                 | LR__5037
2d41b     43 61 6E 6E 
2d41f     6F 74 20 6C 
2d423     6F 61 64 20 
2d427     66 72 6F 6D 
2d42b     20 74 68 69 
2d42f     73 20 66 69 
2d433     6C 65 2E    | 	byte	"Cannot load from this file."
2d436     00          | 	byte	0
2d437                 | LR__5038
2d437     54 68 65 20 
2d43b     70 72 6F 67 
2d43f     72 61 6D 20 
2d443     69 73 20 65 
2d447     6D 70 74 79 
2d44b     2E          | 	byte	"The program is empty."
2d44c     00          | 	byte	0
2d44d                 | LR__5039
2d44d     49 66 20 61 
2d451     66 74 65 72 
2d455     20 69 66 2E | 	byte	"If after if."
2d459     00          | 	byte	0
2d45a                 | LR__5040
2d45a     45 6D 70 74 
2d45e     79 20 65 78 
2d462     70 72 65 73 
2d466     73 69 6F 6E 
2d46a     2E          | 	byte	"Empty expression."
2d46b     00          | 	byte	0
2d46c                 | LR__5041
2d46c     53 74 72 69 
2d470     6E 67 20 65 
2d474     78 70 65 63 
2d478     74 65 64 2E | 	byte	"String expected."
2d47c     00          | 	byte	0
2d47d                 | LR__5042
2d47d     49 6E 74 65 
2d481     72 70 72 65 
2d485     74 65 72 20 
2d489     69 6E 74 65 
2d48d     72 6E 61 6C 
2d491     20 65 72 72 
2d495     6F 72 2E    | 	byte	"Interpreter internal error."
2d498     00          | 	byte	0
2d499                 | LR__5043
2d499     45 78 70 65 
2d49d     63 74 65 64 
2d4a1     20 61 73 73 
2d4a5     69 67 6E 2E | 	byte	"Expected assign."
2d4a9     00          | 	byte	0
2d4aa                 | LR__5044
2d4aa     45 78 70 65 
2d4ae     63 74 65 64 
2d4b2     20 27 74 6F 
2d4b6     27 2E       | 	byte	"Expected 'to'."
2d4b8     00          | 	byte	0
2d4b9                 | LR__5045
2d4b9     45 78 70 65 
2d4bd     63 74 65 64 
2d4c1     20 69 6E 74 
2d4c5     65 67 65 72 
2d4c9     20 76 61 72 
2d4cd     69 61 62 6C 
2d4d1     65 2E       | 	byte	"Expected integer variable."
2d4d3     00          | 	byte	0
2d4d4                 | LR__5046
2d4d4     55 6E 69 6E 
2d4d8     69 74 69 61 
2d4dc     6C 69 7A 65 
2d4e0     64 20 76 61 
2d4e4     72 69 61 62 
2d4e8     6C 65 20 69 
2d4ec     6E 20 27 6E 
2d4f0     65 78 74 27 
2d4f4     2C 20 75 73 
2d4f8     65 20 27 66 
2d4fc     6F 72 27 20 
2d500     62 65 66 6F 
2d504     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2d507     00          | 	byte	0
2d508                 | LR__5047
2d508     4E 6F 20 6D 
2d50c     6F 72 65 20 
2d510     73 6C 6F 74 
2d514     73 20 66 6F 
2d518     72 20 27 66 
2d51c     6F 72 27 2E | 	byte	"No more slots for 'for'."
2d520     00          | 	byte	0
2d521                 | LR__5048
2d521     27 4E 65 78 
2d525     74 27 20 64 
2d529     6F 65 73 6E 
2d52d     27 74 20 6D 
2d531     61 74 63 68 
2d535     20 27 66 6F 
2d539     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2d53c     00          | 	byte	0
2d53d                 | LR__5049
2d53d     27 47 6F 74 
2d541     6F 27 20 74 
2d545     61 72 67 65 
2d549     74 20 6C 69 
2d54d     6E 65 20 6E 
2d551     6F 74 20 66 
2d555     6F 75 6E 64 
2d559     2E          | 	byte	"'Goto' target line not found."
2d55a     00          | 	byte	0
2d55b                 | LR__5050
2d55b     42 61 64 20 
2d55f     6E 75 6D 62 
2d563     65 72 20 6F 
2d567     66 20 70 61 
2d56b     72 61 6D 65 
2d56f     74 65 72 73 | 	byte	"Bad number of parameters"
2d573     00          | 	byte	0
2d574                 | LR__5051
2d574     46 75 6E 63 
2d578     74 69 6F 6E 
2d57c     20 75 6E 64 
2d580     65 66 69 6E 
2d584     65 64 20 66 
2d588     6F 72 20 73 
2d58c     74 72 69 6E 
2d590     67 73       | 	byte	"Function undefined for strings"
2d592     00          | 	byte	0
2d593                 | LR__5052
2d593     42 61 64 20 
2d597     70 61 72 61 
2d59b     6D 65 74 65 
2d59f     72 2E       | 	byte	"Bad parameter."
2d5a1     00          | 	byte	0
2d5a2                 | LR__5053
2d5a2     43 61 6E 6E 
2d5a6     6F 74 20 64 
2d5aa     65 63 6C 61 
2d5ae     72 65 20 61 
2d5b2     6E 20 61 72 
2d5b6     72 61 79 3A 
2d5ba     20 74 68 65 
2d5be     20 76 61 72 
2d5c2     69 61 62 6C 
2d5c6     65 20 65 78 
2d5ca     69 73 74 73 
2d5ce     2E          | 	byte	"Cannot declare an array: the variable exists."
2d5cf     00          | 	byte	0
2d5d0                 | LR__5054
2d5d0     45 78 70 65 
2d5d4     63 74 65 64 
2d5d8     20 27 28 27 
2d5dc     2E          | 	byte	"Expected '('."
2d5dd     00          | 	byte	0
2d5de                 | LR__5055
2d5de     45 78 70 65 
2d5e2     63 74 65 64 
2d5e6     20 27 29 27 
2d5ea     20 6F 72 20 
2d5ee     27 2C 27 2E | 	byte	"Expected ')' or ','."
2d5f2     00          | 	byte	0
2d5f3                 | LR__5056
2d5f3     4E 6F 20 6D 
2d5f7     6F 72 65 20 
2d5fb     74 68 61 6E 
2d5ff     20 33 20 64 
2d603     69 6D 65 6E 
2d607     73 69 6F 6E 
2d60b     73 20 73 75 
2d60f     70 70 6F 72 
2d613     74 65 64    | 	byte	"No more than 3 dimensions supported"
2d616     00          | 	byte	0
2d617                 | LR__5057
2d617     56 61 72 69 
2d61b     61 62 6C 65 
2d61f     20 6E 61 6D 
2d623     65 20 65 78 
2d627     70 65 63 74 
2d62b     65 64       | 	byte	"Variable name expected"
2d62d     00          | 	byte	0
2d62e                 | LR__5058
2d62e     54 79 70 65 
2d632     20 6E 61 6D 
2d636     65 20 65 78 
2d63a     70 65 63 74 
2d63e     65 64       | 	byte	"Type name expected"
2d640     00          | 	byte	0
2d641                 | LR__5059
2d641     54 79 70 65 
2d645     20 6E 6F 74 
2d649     20 73 75 70 
2d64d     70 6F 72 74 
2d651     65 64 20 79 
2d655     65 74       | 	byte	"Type not supported yet"
2d657     00          | 	byte	0
2d658                 | LR__5060
2d658     41 72 72 61 
2d65c     79 20 69 6E 
2d660     64 65 78 20 
2d664     6F 75 74 20 
2d668     6F 66 20 72 
2d66c     61 6E 67 65 | 	byte	"Array index out of range"
2d670     00          | 	byte	0
2d671                 | LR__5061
2d671     45 72 72 6F 
2d675     72 20       | 	byte	"Error "
2d677     00          | 	byte	0
2d678                 | LR__5062
2d678     3A 20       | 	byte	": "
2d67a     00          | 	byte	0
2d67b                 | LR__5063
2d67b     2F 73 64    | 	byte	"/sd"
2d67e     00          | 	byte	0
2d67f                 | LR__5064
2d67f     2F 73 64 2F 
2d683     62 61 73    | 	byte	"/sd/bas"
2d686     00          | 	byte	0
2d687                 | LR__5065
2d687     2F 73 64 2F 
2d68b     62 61 73    | 	byte	"/sd/bas"
2d68e     00          | 	byte	0
2d68f                 | LR__5066
2d68f     20 42 41 53 
2d693     49 43 20 62 
2d697     79 74 65 73 
2d69b     20 66 72 65 
2d69f     65          | 	byte	" BASIC bytes free"
2d6a0     00          | 	byte	0
2d6a1                 | LR__5067
2d6a1     52 65 61 64 
2d6a5     79          | 	byte	"Ready"
2d6a6     00          | 	byte	0
2d6a7                 | LR__5068
2d6a7     6E 6F 6E 61 
2d6ab     6D 65 2E 62 
2d6af     61 73       | 	byte	"noname.bas"
2d6b1     00          | 	byte	0
2d6b2                 | LR__5069
2d6b2                 | 	byte	
2d6b2     00          | 	byte	0
2d6b3                 | LR__5070
2d6b3                 | 	byte	
2d6b3     00          | 	byte	0
2d6b4                 | LR__5071
2d6b4                 | 	byte	
2d6b4     00          | 	byte	0
2d6b5     00 00 00    | 	alignl
2d6b8                 | _dat_
2d6b8     00 00 00 00 
2d6bc     00 00 00 00 
2d6c0     00 00 00 00 
2d6c4     00 00 00 00 | 	byte	$00[16]
2d6c8     61 41 17 0E 
2d6cc     62 42 00 00 
2d6d0     63 43 19 10 
2d6d4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2d6d8     65 45 18 0F 
2d6dc     66 46 00 00 
2d6e0     67 47 00 00 
2d6e4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2d6e8     69 49 00 00 
2d6ec     6A 4A 00 00 
2d6f0     6B 4B 00 00 
2d6f4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2d6f8     6D 4D 00 00 
2d6fc     6E 4E 1A 11 
2d700     6F 4F 1E 15 
2d704     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2d708     71 51 00 00 
2d70c     72 52 00 00 
2d710     73 53 1B 12 
2d714     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2d718     75 55 00 00 
2d71c     76 56 00 00 
2d720     77 57 00 00 
2d724     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2d728     79 59 00 00 
2d72c     7A 5A 1D 14 
2d730     31 21 04 00 
2d734     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2d738     33 23 06 00 
2d73c     34 24 07 00 
2d740     35 25 08 00 
2d744     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2d748     37 26 0A 00 
2d74c     38 2A 0B 00 
2d750     39 28 0C 00 
2d754     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2d758     8D 8D 00 00 
2d75c     9B 9B 00 00 
2d760     88 88 00 00 
2d764     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2d768     20 20 00 00 
2d76c     2D 5F 00 00 
2d770     3D 2B 00 00 
2d774     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2d778     5D 7D 00 00 
2d77c     5C 7C 00 00 
2d780     23 7E 00 00 
2d784     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2d788     27 22 00 00 
2d78c     60 7E 03 00 
2d790     2C 3C 00 00 
2d794     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2d798     2F 3F 00 00 
2d79c     B9 B9 00 00 
2d7a0     BA 00 00 00 
2d7a4     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2d7a8     BC 00 00 00 
2d7ac     BD 00 00 00 
2d7b0     BE 00 00 00 
2d7b4     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2d7b8     C0 00 00 00 
2d7bc     C1 00 00 00 
2d7c0     C2 00 00 00 
2d7c4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2d7c8     C4 00 00 00 
2d7cc     C5 00 00 00 
2d7d0     C6 00 00 00 
2d7d4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2d7d8     C8 00 00 00 
2d7dc     C9 00 00 00 
2d7e0     CA 00 00 00 
2d7e4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2d7e8     7F 7F 00 00 
2d7ec     CC 00 00 00 
2d7f0     CD 00 00 00 
2d7f4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2d7f8     CF 00 00 00 
2d7fc     D0 00 00 00 
2d800     D1 00 00 00 
2d804     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2d808     2F 2F 00 00 
2d80c     2A 2A 00 00 
2d810     2D 2D 00 00 
2d814     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2d818     8D 8D 00 00 
2d81c     31 31 00 00 
2d820     32 32 00 00 
2d824     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2d828     34 34 00 00 
2d82c     35 35 00 00 
2d830     36 36 00 00 
2d834     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2d838     38 38 00 00 
2d83c     39 39 00 00 
2d840     30 30 00 00 
2d844     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2d848     5C 7C 00 00 
2d84c     00 00 00 00 
2d850     00 00 00 00 
2d854     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2d858     00 00 00 00 
      ...             
2d8b0     00 00 00 00 
2d8b4     00 00 00 00 | 	byte	$00[96]
2d8b8     2B 00 A6 F2 
2d8bc     24 A7 09 80 
2d8c0     5B 88 4D 89 
2d8c4     80 88 A5 88 | atari_spl file "atari.spl"
2d8c8     6D 88 B8 88 
2d8cc     80 88 CB 88 
2d8d0     92 88 A5 88 
2d8d4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2d8d8     A5 88 CA 88 
2d8dc     A6 88 DD 88 
2d8e0     B8 88 AB 89 
2d8e4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2d8e8     C8 AD C6 F1 
2d8ec     91 06 B6 FF 
2d8f0     13 00 4A 00 
2d8f4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2d8f8     5D 00 5E 00 
2d8fc     5D 00 5E 00 
2d900     5E 00 5D 00 
2d904     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2d908     38 00 83 00 
2d90c     25 00 83 00 
2d910     C3 FE D1 04 
2d914     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2d918     48 88 38 85 
2d91c     41 8A CB 88 
2d920     28 89 B8 88 
2d924     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2d928     15 89 03 89 
2d92c     02 89 15 89 
2d930     16 89 15 89 
2d934     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2d938     15 89 3A 89 
2d93c     72 89 E3 89 
2d940     52 83 AD 97 
2d944     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2d948     0C 02 B6 FF 
2d94c     E1 00 A8 00 
2d950     F3 00 A8 00 
2d954     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2d958     CE 00 CD 00 
2d95c     CD 00 BA 00 
2d960     E1 00 BB 00 
2d964     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2d968     DF 00 C9 FF 
2d96c     E6 01 B6 06 
2d970     EE DD 8D 98 
2d974     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2d978     97 89 73 89 
2d97c     3B 89 60 89 
2d980     60 89 60 89 
2d984     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2d988     73 89 72 89 
2d98c     85 89 73 89 
2d990     AA 89 60 89 
2d994     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2d998     E8 8A 18 86 
2d99c     92 88 A5 C2 
2d9a0     E0 00 C3 05 
2d9a4     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2d9a8     F2 00 64 01 
2d9ac     06 01 3E 01 
2d9b0     2B 01 2B 01 
2d9b4     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2d9b8     2B 01 2A 01 
2d9bc     2B 01 2B 01 
2d9c0     2B 01 18 01 
2d9c4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2d9c8     39 07 61 F3 
2d9cc     C0 AF 37 85 
2d9d0     0F 88 8B 8A 
2d9d4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2d9d8     AB 89 D0 89 
2d9dc     AB 89 D0 89 
2d9e0     D0 89 CF 89 
2d9e4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2d9e8     D0 89 F5 89 
2d9ec     BD 89 08 8A 
2d9f0     CF 89 E8 8A 
2d9f4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2d9f8     53 B3 0D F8 
2d9fc     F4 07 38 00 
2da00     63 01 63 01 
2da04     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2da08     88 01 88 01 
2da0c     76 01 88 01 
2da10     88 01 89 01 
2da14     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2da18     75 01 AE 01 
2da1c     76 01 88 01 
2da20     4A 00 46 06 
2da24     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2da28     08 8A 9A 86 
2da2c     33 8B 08 8A 
2da30     2D 8A F5 89 
2da34     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2da38     2D 8A 2D 8A 
2da3c     2E 8A 1B 8A 
2da40     40 8A 2D 8A 
2da44     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2da48     2E 8A 79 8A 
2da4c     66 8A C8 8B 
2da50     72 82 2B 97 
2da54     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2da58     1D 02 05 01 
2da5c     F8 01 C0 01 
2da60     0B 02 C0 01 
2da64     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2da68     F9 01 D3 01 
2da6c     F8 01 D3 01 
2da70     F8 01 D2 01 
2da74     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2da78     E6 01 2B 01 
2da7c     8E 02 5F 07 
2da80     F7 E2 ED 9C 
2da84     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2da88     E8 8A 78 8A 
2da8c     78 8A 65 8A 
2da90     8B 8A 78 8A 
2da94     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2da98     8B 8A 9D 8A 
2da9c     9D 8A 8B 8A 
2daa0     C2 8A 78 8A 
2daa4     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2daa8     70 8C 18 86 
2daac     8B 8A 23 C9 
2dab0     CB 03 C4 05 
2dab4     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2dab8     0B 02 7B 02 
2dabc     1E 02 55 02 
2dac0     30 02 43 02 
2dac4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2dac8     43 02 44 02 
2dacc     43 02 30 02 
2dad0     68 02 31 02 
2dad4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2dad8     07 08 3F F7 
2dadc     73 B2 13 85 
2dae0     15 89 ED 8B 
2dae4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2dae8     B0 8A FB 8A 
2daec     D5 8A FA 8A 
2daf0     E8 8A FB 8A 
2daf4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2daf8     E8 8A 21 8B 
2dafc     E7 8A 33 8B 
2db00     E8 8A 26 8C 
2db04     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2db08     8D B0 27 F6 
2db0c     9C 08 AD 01 
2db10     7B 02 8D 02 
2db14     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2db18     A1 02 A0 02 
2db1c     A1 02 A0 02 
2db20     A0 02 A0 02 
2db24     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2db28     7B 02 D8 02 
2db2c     7B 02 C6 02 
2db30     3E 01 C3 05 
2db34     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2db38     00 8C 2A 86 
2db3c     E0 8C FA 8A 
2db40     6A 8B FB 8A 
2db44     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2db48     45 8B 45 8B 
2db4c     45 8B 6B 8B 
2db50     46 8B 59 8B 
2db54     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2db58     6B 8B 6B 8B 
2db5c     6B 8B 6B 8B 
2db60     7D 8B 7D 8B 
2db64     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2db68     90 8B 91 8B 
2db6c     90 8B 90 8B 
2db70     A3 8B A3 8B 
2db74     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2db78     B5 8B B6 8B 
2db7c     B5 8B B5 8B 
2db80     B6 8B C8 8B 
2db84     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2db88     C8 8B DA 8B 
2db8c     DB 8B DB 8B 
2db90     DB 8B DC 8B 
2db94     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2db98     EE 8B EE 8B 
2db9c     00 8C 01 8C 
2dba0     00 8C 01 8C 
2dba4     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2dba8     12 8C 13 8C 
2dbac     13 8C 26 8C 
2dbb0     26 8C 26 8C 
2dbb4     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2dbb8     38 8C 38 8C 
2dbbc     38 8C 38 8C 
2dbc0     4B 8C 4B 8C 
2dbc4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2dbc8     5E 8C 5E 8C 
2dbcc     5E 8C 5E 8C 
2dbd0     70 8C 70 8C 
2dbd4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2dbd8     70 8C 83 8C 
2dbdc     83 8C 83 8C 
2dbe0     83 8C 96 8C 
2dbe4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2dbe8     95 8C A9 8C 
2dbec     A9 8C A8 8C 
2dbf0     A8 8C A8 8C 
2dbf4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2dbf8     BB 8C BB 8C 
2dbfc     BB 8C CE 8C 
2dc00     CE 8C CE 8C 
2dc04     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2dc08     E0 8C E1 8C 
2dc0c     E1 8C E0 8C 
2dc10     F4 8C F2 8C 
2dc14     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2dc18     05 8D 05 8D 
2dc1c     06 8D 06 8D 
2dc20     19 8D 19 8D 
2dc24     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2dc28     18 8D 2B 8D 
2dc2c     2B 8D 2B 8D 
2dc30     2A 8D 3E 8D 
2dc34     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2dc38     3E 8D 51 8D 
2dc3c     50 8D 50 8D 
2dc40     50 8D 51 8D 
2dc44     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2dc48     63 8D 64 8D 
2dc4c     76 8D 75 8D 
2dc50     75 8D 76 8D 
2dc54     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2dc58     88 8D 88 8D 
2dc5c     89 8D 9B 8D 
2dc60     9A 8D 9B 8D 
2dc64     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2dc68     AD 8D AE 8D 
2dc6c     AD 8D AE 8D 
2dc70     C1 8D C1 8D 
2dc74     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2dc78     D3 8D D3 8D 
2dc7c     D3 8D D3 8D 
2dc80     D3 8D E6 8D 
2dc84     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2dc88     E6 8D E6 8D 
2dc8c     F9 8D F9 8D 
2dc90     F9 8D F8 8D 
2dc94     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2dc98     0B 8E 0B 8E 
2dc9c     1D 8E 1D 8E 
2dca0     1E 8E 1E 8E 
2dca4     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2dca8     31 8E 31 8E 
2dcac     31 8E 42 8E 
2dcb0     43 8E 43 8E 
2dcb4     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2dcb8     56 8E 56 8E 
2dcbc     55 8E 56 8E 
2dcc0     68 8E 69 8E 
2dcc4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2dcc8     69 8E 7B 8E 
2dccc     7C 8E 7B 8E 
2dcd0     7B 8E 8D 8E 
2dcd4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2dcd8     8D 8E A1 8E 
2dcdc     A0 8E A1 8E 
2dce0     A1 8E A0 8E 
2dce4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2dce8     B3 8E B3 8E 
2dcec     C6 8E C5 8E 
2dcf0     C6 8E C6 8E 
2dcf4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2dcf8     D8 8E D9 8E 
2dcfc     D8 8E EC 8E 
2dd00     EB 8E EC 8E 
2dd04     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2dd08     FE 8E FE 8E 
2dd0c     FE 8E FE 8E 
2dd10     10 8F 10 8F 
2dd14     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2dd18     11 8F 23 8F 
2dd1c     24 8F 23 8F 
2dd20     24 8F 37 8F 
2dd24     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2dd28     36 8F 36 8F 
2dd2c     48 8F 49 8F 
2dd30     49 8F 49 8F 
2dd34     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2dd38     5B 8F 5C 8F 
2dd3c     5B 8F 6E 8F 
2dd40     6E 8F 6E 8F 
2dd44     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2dd48     81 8F 81 8F 
2dd4c     81 8F 81 8F 
2dd50     93 8F 93 8F 
2dd54     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2dd58     93 8F A6 8F 
2dd5c     A6 8F A6 8F 
2dd60     A6 8F B9 8F 
2dd64     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2dd68     B9 8F B9 8F 
2dd6c     CC 8F CB 8F 
2dd70     CB 8F CC 8F 
2dd74     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2dd78     DF 8F DE 8F 
2dd7c     DE 8F F1 8F 
2dd80     F1 8F F1 8F 
2dd84     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2dd88     03 90 04 90 
2dd8c     04 90 04 90 
2dd90     16 90 17 90 
2dd94     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2dd98     29 90 28 90 
2dd9c     29 90 28 90 
2dda0     29 90 3C 90 
2dda4     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2dda8     3C 90 4F 90 
2ddac     4E 90 4E 90 
2ddb0     4E 90 4E 90 
2ddb4     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2ddb8     61 90 61 90 
2ddbc     73 90 74 90 
2ddc0     74 90 74 90 
2ddc4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2ddc8     87 90 86 90 
2ddcc     87 90 86 90 
2ddd0     99 90 99 90 
2ddd4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2ddd8     AB 90 AB 90 
2dddc     AC 90 AB 90 
2dde0     AB 90 BF 90 
2dde4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2dde8     BE 90 D1 90 
2ddec     D0 90 D1 90 
2ddf0     D1 90 D1 90 
2ddf4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2ddf8     E3 90 E4 90 
2ddfc     F6 90 F6 90 
2de00     F6 90 F6 90 
2de04     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2de08     09 91 0A 91 
2de0c     0A 91 1C 91 
2de10     1C 91 1C 91 
2de14     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2de18     2F 91 2E 91 
2de1c     2F 91 2F 91 
2de20     2E 91 41 91 
2de24     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2de28     41 91 53 91 
2de2c     54 91 54 91 
2de30     53 91 54 91 
2de34     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2de38     67 91 67 91 
2de3c     79 91 7A 91 
2de40     79 91 78 91 
2de44     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2de48     8C 91 8B 91 
2de4c     8C 91 8C 91 
2de50     9E 91 9E 91 
2de54     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2de58     B1 91 B1 91 
2de5c     B2 91 B1 91 
2de60     B1 91 C4 91 
2de64     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2de68     C4 91 D6 91 
2de6c     D7 91 D7 91 
2de70     D7 91 D6 91 
2de74     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2de78     EA 91 EA 91 
2de7c     EA 91 FC 91 
2de80     FC 91 FB 91 
2de84     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2de88     0E 92 0F 92 
2de8c     0F 92 0E 92 
2de90     21 92 21 92 
2de94     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2de98     21 92 34 92 
2de9c     33 92 34 92 
2dea0     34 92 47 92 
2dea4     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2dea8     46 92 47 92 
2deac     59 92 59 92 
2deb0     59 92 59 92 
2deb4     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2deb8     6C 92 6C 92 
2debc     6B 92 7E 92 
2dec0     7E 92 7E 92 
2dec4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2dec8     92 92 91 92 
2decc     91 92 90 92 
2ded0     91 92 A4 92 
2ded4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2ded8     A3 92 B6 92 
2dedc     B6 92 B7 92 
2dee0     B7 92 B6 92 
2dee4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2dee8     CA 92 C9 92 
2deec     CA 92 DC 92 
2def0     DC 92 DC 92 
2def4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2def8     EF 92 EF 92 
2defc     EF 92 EF 92 
2df00     01 93 01 93 
2df04     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2df08     15 93 14 93 
2df0c     14 93 14 93 
2df10     14 93 27 93 
2df14     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2df18     27 93 39 93 
2df1c     3A 93 39 93 
2df20     39 93 39 93 
2df24     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2df28     4B 93 4C 93 
2df2c     5F 93 5F 93 
2df30     5F 93 5E 93 
2df34     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2df38     5F 93 84 93 
2df3c     4C 93 96 93 
2df40     5F 93 AE 94 
2df44     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2df48     7B C1 00 00 
2df4c     00 00 00 00 
2df50     00 00 00 00 
2df54     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2df58     00 00 00 00 | 	byte	$00, $00, $00, $00
2df5c     00 00 00 00 | zero long 0
2df60     7A D7 00 80 
2df64     87 8A 48 8F 
2df68     EC 8C 76 8D 
2df6c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2df70     3C 8D 82 8D 
2df74     42 8D 88 8D 
2df78     8C 8D 8E 8D 
2df7c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2df80     97 8D DE 8D 
2df84     E1 8D F1 8E 
2df88     D8 8C A3 83 
2df8c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2df90     65 71 C9 65 
2df94     FC 64 C4 65 
2df98     C1 65 BF 65 
2df9c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2dfa0     B6 65 B4 65 
2dfa4     B2 65 AE 65 
2dfa8     AC 65 ED 65 
2dfac     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2dfb0     5E 65 25 66 
2dfb4     FA 62 23 6B 
2dfb8     B5 6C 61 0A 
2dfbc     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2dfc0     5D 90 BE 8D 
2dfc4     47 8E C3 8D 
2dfc8     09 8E C9 8D 
2dfcc     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2dfd0     15 8E 19 8E 
2dfd4     1B 8E 62 8E 
2dfd8     64 8E 68 8E 
2dfdc     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2dfe0     B5 8E 4C 90 
2dfe4     FA 84 3C 9D 
2dfe8     98 13 79 6D 
2dfec     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2dff0     D9 66 50 66 
2dff4     D4 66 4B 66 
2dff8     8C 66 46 66 
2dffc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2e000     81 66 3A 66 
2e004     7C 66 36 66 
2e008     76 66 30 66 
2e00c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2e010     6B 66 88 72 
2e014     BF 37 E7 B7 
2e018     75 83 8B 8E 
2e01c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2e020     94 8E 96 8E 
2e024     DD 8E 9C 8E 
2e028     E2 8E A2 8E 
2e02c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2e030     EE 8E AE 8E 
2e034     38 8F B5 8E 
2e038     3F 8F FD 8E 
2e03c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2e040     A5 87 1E E3 
2e044     6D 5D FA 71 
2e048     41 64 25 67 
2e04c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2e050     D9 66 1A 67 
2e054     18 67 15 67 
2e058     12 67 0F 67 
2e05c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2e060     07 67 C0 66 
2e064     01 67 BC 66 
2e068     B8 66 DE 64 
2e06c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2e070     43 E5 1F 8B 
2e074     14 8A F1 90 
2e078     1C 8F 63 8F 
2e07c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2e080     29 8F 6E 8F 
2e084     72 8F 75 8F 
2e088     34 8F BE 8F 
2e08c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2e090     84 8F 87 8F 
2e094     CC 8F 56 90 
2e098     67 91 49 80 
2e09c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2e0a0     46 77 A6 66 
2e0a4     E8 66 B0 67 
2e0a8     AD 67 ED 67 
2e0ac     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2e0b0     A2 67 E3 67 
2e0b4     9D 67 9A 67 
2e0b8     98 67 94 67 
2e0bc     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2e0c0     49 67 CD 67 
2e0c4     28 65 5F 6E 
2e0c8     82 67 3A 01 
2e0cc     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2e0d0     C2 91 A9 8F 
2e0d4     EF 8F AE 8F 
2e0d8     F4 8F B5 8F 
2e0dc     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2e0e0     01 90 03 90 
2e0e4     07 90 09 90 
2e0e8     0C 90 53 90 
2e0ec     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2e0f0     18 90 44 93 
2e0f4     85 84 D6 9D 
2e0f8     87 1F 2F 75 
2e0fc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2e100     C4 68 F6 67 
2e104     BE 68 F1 67 
2e108     76 68 2E 68 
2e10c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2e110     27 68 24 68 
2e114     64 68 1E 68 
2e118     5F 68 19 68 
2e11c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2e120     DC 68 56 72 
2e124     7E 36 C2 B8 
2e128     D7 84 73 90 
2e12c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2e130     7B 90 7F 90 
2e134     82 90 84 90 
2e138     CB 90 8B 90 
2e13c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2e140     D7 90 96 90 
2e144     20 91 59 90 
2e148     25 91 A2 90 
2e14c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2e150     D0 89 40 EE 
2e154     12 64 C4 71 
2e158     29 66 0C 69 
2e15c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2e160     C0 68 02 69 
2e164     FE 68 FB 68 
2e168     F9 68 F6 68 
2e16c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2e170     EE 68 A8 68 
2e174     2C 69 5F 68 
2e178     E2 68 81 66 
2e17c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2e180     1E EB A6 8A 
2e184     73 8B 5E 93 
2e188     7B 90 48 91 
2e18c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2e190     0D 91 11 91 
2e194     14 91 16 91 
2e198     5C 91 1C 91 
2e19c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2e1a0     68 91 AF 91 
2e1a4     2A 91 B5 91 
2e1a8     75 91 1A 94 
2e1ac     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2e1b0     70 0E CB 6C 
2e1b4     5D 6E C4 67 
2e1b8     99 69 54 69 
2e1bc     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2e1c0     D2 69 49 69 
2e1c4     89 69 86 69 
2e1c8     40 69 C4 69 
2e1cc     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2e1d0     35 69 76 69 
2e1d4     58 67 EB 6D 
2e1d8     E9 6D 89 0F 
2e1dc     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2e1e0     33 94 94 91 
2e1e4     D9 91 56 91 
2e1e8     E0 91 9F 91 
2e1ec     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2e1f0     EC 91 EE 91 
2e1f4     F1 91 F4 91 
2e1f8     F7 91 3D 92 
2e1fc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2e200     46 92 21 94 
2e204     11 89 A4 9D 
2e208     FD 0E 8F 6C 
2e20c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2e210     28 6A E1 69 
2e214     65 6A 1F 6A 
2e218     5F 6A 1A 6A 
2e21c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2e220     54 6A 0F 6A 
2e224     4F 6A 09 6A 
2e228     06 6A 03 6A 
2e22c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2e230     23 68 69 77 
2e234     3A 4D 38 CA 
2e238     38 86 4E 91 
2e23c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2e240     64 92 24 92 
2e244     6A 92 2A 92 
2e248     70 92 30 92 
2e24c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2e250     7B 92 7E 92 
2e254     C5 92 84 92 
2e258     CB 92 8A 92 
2e25c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2e260     4D 8D F9 E2 
2e264     97 59 FE 74 
2e268     DB 68 6D 6A 
2e26c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2e270     A8 6A A5 6A 
2e274     A3 6A 9F 6A 
2e278     9D 6A 9B 6A 
2e27c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2e280     D6 6A 8F 6A 
2e284     CF 6A 46 6A 
2e288     CA 6A E1 67 
2e28c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2e290     D3 F7 15 92 
2e294     90 8C BF 94 
2e298     A6 92 EB 92 
2e29c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2e2a0     B1 92 F7 92 
2e2a4     FA 92 FD 92 
2e2a8     00 93 02 93 
2e2ac     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2e2b0     4F 93 52 93 
2e2b4     54 93 22 94 
2e2b8     5A 93 8F 88 
2e2bc     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2e2c0     1C 77 07 6C 
2e2c4     E8 69 7A 6B 
2e2c8     34 6B 75 6B 
2e2cc     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2e2d0     29 6B 26 6B 
2e2d4     24 6B 21 6B 
2e2d8     1D 6B 5E 6B 
2e2dc     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2e2e0     12 6B 52 6B 
2e2e4     34 69 34 6E 
2e2e8     BA 73 A4 24 
2e2ec     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2e2f0     7A 94 B3 93 
2e2f4     72 93 31 93 
2e2f8     78 93 7A 93 
2e2fc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2e300     83 93 86 93 
2e304     89 93 D0 93 
2e308     D2 93 D5 93 
2e30c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2e310     DD 93 40 96 
2e314     30 8B 99 9C 
2e318     52 10 94 71 
2e31c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2e320     46 6C 79 6B 
2e324     40 6C B7 6B 
2e328     F7 6B B1 6B 
2e32c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2e330     EC 6B A5 6B 
2e334     A2 6B 9F 6B 
2e338     9D 6B 9A 6B 
2e33c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2e340     C8 6A E4 76 
2e344     20 4B F9 CE 
2e348     2E 8A 1A 92 
2e34c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2e350     FB 93 BA 93 
2e354     01 94 03 94 
2e358     4A 94 09 94 
2e35c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2e360     55 94 14 94 
2e364     9E 94 1A 94 
2e368     61 94 20 94 
2e36c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2e370     3E 87 E5 CD 
2e374     5F 50 6C 78 
2e378     B5 6A 04 6C 
2e37c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2e380     83 6C 7F 6C 
2e384     7C 6C 36 6C 
2e388     76 6C 74 6C 
2e38c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2e390     6B 6C 25 6C 
2e394     66 6C 1F 6C 
2e398     1D 6C 41 6A 
2e39c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2e3a0     BA FA FC 94 
2e3a4     5B 8D 97 96 
2e3a8     3B 94 C5 94 
2e3ac     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2e3b0     89 94 8C 94 
2e3b4     8F 94 92 94 
2e3b8     94 94 DB 94 
2e3bc     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2e3c0     E4 94 E7 94 
2e3c4     2D 95 74 95 
2e3c8     C8 96 15 89 
2e3cc     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2e3d0     CB 75 31 6F 
2e3d4     7E 6B 10 6D 
2e3d8     C9 6C 0A 6D 
2e3dc     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2e3e0     BD 6C FF 6C 
2e3e4     FB 6C F9 6C 
2e3e8     B2 6C F3 6C 
2e3ec     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2e3f0     A7 6C E8 6C 
2e3f4     0D 6B 85 6F 
2e3f8     C7 74 10 28 
2e3fc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2e400     96 96 47 95 
2e404     06 95 0A 95 
2e408     0C 95 0F 95 
2e40c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2e410     17 95 5E 95 
2e414     61 95 63 95 
2e418     22 95 AC 95 
2e41c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2e420     72 95 17 98 
2e424     59 8E 01 96 
2e428     CF FC 5A 68 
2e42c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2e430     96 6D 50 6D 
2e434     D5 6D 4A 6D 
2e438     8C 6D 89 6D 
2e43c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2e440     80 6D 3A 6D 
2e444     7A 6D 77 6D 
2e448     75 6D 71 6D 
2e44c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2e450     18 6C BC 78 
2e454     9A 4F 7E CF 
2e458     1F 89 F1 93 
2e45c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2e460     D2 95 4E 95 
2e464     D7 95 53 95 
2e468     DD 95 E0 95 
2e46c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2e470     A5 95 EB 95 
2e474     EE 95 F0 95 
2e478     37 96 B3 95 
2e47c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2e480     1A 98 D5 8D 
2e484     C5 9F CD 0F 
2e488     0F 71 F3 73 
2e48c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2e490     D9 6D 5E 6E 
2e494     D3 6D 58 6E 
2e498     12 6E 0F 6E 
2e49c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2e4a0     49 6E BF 6D 
2e4a4     87 6E 76 6D 
2e4a8     81 6E 11 6B 
2e4ac     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2e4b0     3F 09 44 95 
2e4b4     E5 8D 3F 99 
2e4b8     D4 95 A2 96 
2e4bc     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2e4c0     23 96 69 96 
2e4c4     6B 96 6E 96 
2e4c8     71 96 74 96 
2e4cc     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2e4d0     BF 96 3C 96 
2e4d4     C6 96 C8 96 
2e4d8     A3 98 51 8D 
2e4dc     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2e4e0     CF 75 29 73 
2e4e4     90 6C EC 6E 
2e4e8     62 6E E7 6E 
2e4ec     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2e4f0     9A 6E 98 6E 
2e4f4     95 6E 91 6E 
2e4f8     8E 6E CF 6E 
2e4fc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2e500     40 6E C3 6E 
2e504     E8 6C 45 6F 
2e508     A5 7B C9 35 
2e50c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2e510     2D 98 23 97 
2e514     E1 96 A0 96 
2e518     A4 96 EA 96 
2e51c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2e520     AF 96 F4 96 
2e524     F8 96 3E 97 
2e528     FD 96 43 97 
2e52c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2e530     08 97 6B 99 
2e534     D6 92 88 91 
2e538     D8 EE 84 66 
2e53c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2e540     2E 6F E7 6E 
2e544     6C 6F 24 6F 
2e548     21 6F 1F 6F 
2e54c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2e550     17 6F 13 6F 
2e554     54 6F 0E 6F 
2e558     0B 6F 4B 6F 
2e55c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2e560     27 6D 1C 7B 
2e564     19 59 9F DB 
2e568     66 8E BC 94 
2e56c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2e570     67 97 26 97 
2e574     6D 97 2B 97 
2e578     72 97 32 97 
2e57c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2e580     C1 97 7F 97 
2e584     C6 97 85 97 
2e588     CB 97 CE 97 
2e58c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2e590     EC 8A C4 C6 
2e594     68 4C F4 7D 
2e598     63 6E E8 6E 
2e59c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2e5a0     ED 6F A7 6F 
2e5a4     E7 6F A0 6F 
2e5a8     E1 6F 9B 6F 
2e5ac     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2e5b0     D5 6F 8F 6F 
2e5b4     CE 6F 45 6F 
2e5b8     86 6F 68 6D 
2e5bc     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2e5c0     C0 13 AD A2 
2e5c4     A7 8E 79 99 
2e5c8     E6 97 E8 97 
2e5cc     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2e5d0     F1 97 F3 97 
2e5d4     F6 97 F9 97 
2e5d8     FB 97 FE 97 
2e5dc     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2e5e0     4A 98 0A 98 
2e5e4     93 98 0F 98 
2e5e8     7F 9B BF 8C 
2e5ec     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2e5f0     91 7B 62 73 
2e5f4     1A 6E B9 70 
2e5f8     EB 6F B3 70 
2e5fc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2e600     25 70 20 70 
2e604     1E 70 1B 70 
2e608     18 70 15 70 
2e60c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2e610     0D 70 09 70 
2e614     07 70 03 70 
2e618     01 70 FD 6F 
2e61c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2e620     F6 6F F2 6F 
2e624     EF 6F EC 6F 
2e628     2C 70 E6 6F 
2e62c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2e630     DD 6F 97 6F 
2e634     D7 6F 84 6E 
2e638     8F 6F 3F 7D 
2e63c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2e63e     00 00 00 00 | zero1 long 0
2e642     FF FF FF FF 
2e646     FF FF       | atarist_spl file "atarist.spl" '512
2e648     00 00 00 00 
2e64c     00 00 00 00 
2e650     00 00       | 	byte	$00[10]
2e652     17 7F F2 7F 
2e656     B2 7F 72 7F 
2e65a     33 7F F4 7E 
2e65e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2e662     36 7E F5 7D 
2e666     E9 51 F2 0D 
2e66a     8E 00 F3 FD 
2e66e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2e672     57 FD 58 FD 
2e676     5B FD 5C FD 
2e67a     5C FD 60 7D 
2e67e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2e682     D6 7C 98 7C 
2e686     59 7C 1A 7C 
2e68a     DC 7B 9E 7B 
2e68e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2e692     F3 05 00 FD 
2e696     41 FB EA FA 
2e69a     D9 FA DB FA 
2e69e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2e6a2     E4 FA 9B 36 
2e6a6     F8 7A C0 7A 
2e6aa     84 7A 45 7A 
2e6ae     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2e6b2     8E 79 51 79 
2e6b6     15 79 D7 78 
2e6ba     3C 1F EB FF 
2e6be     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2e6c2     6D F8 65 F8 
2e6c6     68 F8 6D F8 
2e6ca     70 F8 74 F8 
2e6ce     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2e6d2     AB 60 79 60 
2e6d6     4B 60 1A 60 
2e6da     E9 5F B9 5F 
2e6de     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2e6e2     FB 59 B2 0B 
2e6e6     92 FA 3A F7 
2e6ea     96 F6 79 F6 
2e6ee     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2e6f2     82 F6 86 F6 
2e6f6     8C F6 DB 5D 
2e6fa     F1 5E C1 5E 
2e6fe     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2e702     34 5E 04 5E 
2e706     D6 5D A6 5D 
2e70a     78 5D D4 3E 
2e70e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2e712     27 F5 BA F4 
2e716     AB F4 AD F4 
2e71a     B2 F4 B8 F4 
2e71e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2e722     26 5D 2B 5D 
2e726     FC 5C CD 5C 
2e72a     9F 5C 70 5C 
2e72e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2e732     E5 5B B8 5B 
2e736     DB 24 A7 FC 
2e73a     D1 F4 4D F3 
2e73e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2e742     04 F3 0B F3 
2e746     11 F3 16 F3 
2e74a     DE 18 98 5B 
2e74e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2e752     4E 4A 29 48 
2e756     A0 47 6A 47 
2e75a     43 47 20 47 
2e75e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2e762     E2 F6 98 F2 
2e766     C5 F1 A3 F1 
2e76a     A3 F1 A8 F1 
2e76e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2e772     BF F1 00 3D 
2e776     EF 46 CD 46 
2e77a     AA 46 86 46 
2e77e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2e782     1C 46 F9 45 
2e786     D7 45 EE 43 
2e78a     DE 02 E8 F3 
2e78e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2e792     61 F0 65 F0 
2e796     6D F0 74 F0 
2e79a     7C F0 84 F0 
2e79e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2e7a2     8E 45 6D 45 
2e7a6     49 45 27 45 
2e7aa     05 45 E1 44 
2e7ae     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2e7b2     F1 2F A9 FB 
2e7b6     8B F1 9B EF 
2e7ba     40 EF 36 EF 
2e7be     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2e7c2     4D EF 56 EF 
2e7c6     5E EF 7B 44 
2e7ca     8C 44 69 44 
2e7ce     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2e7d2     03 44 E1 43 
2e7d6     C0 43 F5 37 
2e7da     69 33 0F 11 
2e7de     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2e7e2     66 EE 37 EE 
2e7e6     38 EE 40 EE 
2e7ea     48 EE 51 EE 
2e7ee     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2e7f2     7D 32 6A 32 
2e7f6     51 32 37 32 
2e7fa     1F 32 05 32 
2e7fe     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2e802     B9 31 A1 31 
2e806     F1 04 F4 F1 
2e80a     50 EE A0 ED 
2e80e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2e812     93 ED 9A ED 
2e816     A4 ED AD ED 
2e81a     F4 27 C1 31 
2e81e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2e822     78 31 5F 31 
2e826     46 31 2E 31 
2e82a     15 31 FC 30 
2e82e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2e832     C4 EF 4A ED 
2e836     DC EC CB EC 
2e83a     D2 EC DA EC 
2e83e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2e842     F9 EC 64 2F 
2e846     0A 31 F1 30 
2e84a     D9 30 C0 30 
2e84e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2e852     78 30 5F 30 
2e856     46 30 38 23 
2e85a     A6 F6 19 EE 
2e85e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2e862     20 EC 28 EC 
2e866     32 EC 3C EC 
2e86a     47 EC 51 EC 
2e86e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2e872     A3 22 93 22 
2e876     7F 22 6E 22 
2e87a     5D 22 4C 22 
2e87e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2e882     77 09 76 F1 
2e886     CC EC F0 EB 
2e88a     CD EB CE EB 
2e88e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2e892     ED EB F5 EB 
2e896     3E F6 6B 22 
2e89a     5F 22 4E 22 
2e89e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2e8a2     1B 22 0B 22 
2e8a6     FA 21 E9 21 
2e8aa     D8 21 4D FF 
2e8ae     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2e8b2     92 EB 7B EB 
2e8b6     82 EB 8C EB 
2e8ba     97 EB A1 EB 
2e8be     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2e8c2     15 22 04 22 
2e8c6     F3 21 E3 21 
2e8ca     D2 21 C0 21 
2e8ce     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2e8d2     8E 21 7D 21 
2e8d6     9A F8 A4 ED 
2e8da     8E EB 2F EB 
2e8de     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2e8e2     37 EB 42 EB 
2e8e6     4C EB 57 EB 
2e8ea     B2 17 22 19 
2e8ee     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2e8f2     FD 18 EF 18 
2e8f6     E3 18 D6 18 
2e8fa     CA 18 BD 18 
2e8fe     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2e902     60 EC 35 EB 
2e906     01 EB 01 EB 
2e90a     0C EB 16 EB 
2e90e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2e912     34 EB D0 18 
2e916     00 19 F4 18 
2e91a     E8 18 DA 18 
2e91e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2e922     B6 18 A9 18 
2e926     9D 18 91 05 
2e92a     F0 EF CA EB 
2e92e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2e932     E8 EA F2 EA 
2e936     FE EA 07 EB 
2e93a     12 EB C2 EF 
2e93e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2e942     D9 18 CD 18 
2e946     C0 18 B3 18 
2e94a     A7 18 9B 18 
2e94e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2e952     B8 FC 30 EE 
2e956     61 EB DC EA 
2e95a     CD EA D2 EA 
2e95e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2e962     F3 EA FE EA 
2e966     D2 09 D1 18 
2e96a     C3 18 17 18 
2e96e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2e972     66 11 52 11 
2e976     49 11 41 11 
2e97a     38 11 E0 F4 
2e97e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2e982     C9 EA C5 EA 
2e986     CF EA DB EA 
2e98a     E6 EA EF EA 
2e98e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2e992     89 11 80 11 
2e996     78 11 6E 11 
2e99a     67 11 5D 11 
2e99e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2e9a2     43 11 32 0D 
2e9a6     9C F1 07 EC 
2e9aa     F8 EA CD EA 
2e9ae     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2e9b2     E4 EA ED EA 
2e9b6     F8 EA 02 EB 
2e9ba     55 11 91 11 
2e9be     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2e9c2     75 11 6E 11 
2e9c6     64 11 5E 11 
2e9ca     54 11 4A 11 
2e9ce     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2e9d2     A8 EB F1 EA 
2e9d6     D9 EA DC EA 
2e9da     E8 EA F1 EA 
2e9de     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2e9e2     A6 EB 9E 11 
2e9e6     A0 11 96 11 
2e9ea     8D 11 85 11 
2e9ee     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2e9f2     6A 11 CA 0D 
2e9f6     36 0B 57 F8 
2e9fa     6C ED 57 EB 
2e9fe     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2ea02     F4 EA FF EA 
2ea06     09 EB 15 EB 
2ea0a     1E EB 1A FD 
2ea0e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2ea12     ED 0A E8 0A 
2ea16     E2 0A DC 0A 
2ea1a     D6 0A D1 0A 
2ea1e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2ea22     F8 F3 BC EC 
2ea26     57 EB 1E EB 
2ea2a     18 EB 24 EB 
2ea2e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2ea32     42 EB 4D EB 
2ea36     08 09 20 0B 
2ea3a     1A 0B 14 0B 
2ea3e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2ea42     04 0B FE 0A 
2ea46     F9 0A F2 0A 
2ea4a     84 08 3A F1 
2ea4e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2ea52     42 EB 42 EB 
2ea56     4E EB 57 EB 
2ea5a     62 EB 6B EB 
2ea5e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2ea62     48 0B 43 0B 
2ea66     3C 0B 36 0B 
2ea6a     31 0B 2C 0B 
2ea6e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2ea72     1B 0B 5C 00 
2ea76     6A EF 1B EC 
2ea7a     81 EB 6A EB 
2ea7e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2ea82     85 EB 8E EB 
2ea86     99 EB A3 EB 
2ea8a     DD 05 E5 05 
2ea8e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2ea92     DB 05 D8 05 
2ea96     D5 05 D1 05 
2ea9a     D0 05 CB 05 
2ea9e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2eaa2     0C EC BB EB 
2eaa6     B3 EB BB EB 
2eaaa     C5 EB D0 EB 
2eaae     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2eab2     E4 F7 2C 06 
2eab6     28 06 24 06 
2eaba     22 06 1F 06 
2eabe     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2eac2     16 06 14 06 
2eac6     0F 06 D0 F3 
2eaca     65 ED 2D EC 
2eace     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2ead2     01 EC 0A EC 
2ead6     14 EC 1E EC 
2eada     29 EC FB 03 
2eade     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2eae2     63 06 60 06 
2eae6     5E 06 59 06 
2eaea     58 06 54 06 
2eaee     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2eaf2     69 F1 21 ED 
2eaf6     55 EC 33 EC 
2eafa     36 EC 40 EC 
2eafe     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2eb02     5C EC 68 EC 
2eb06     92 02 D9 02 
2eb0a     D7 02 D7 02 
2eb0e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2eb12     D1 02 D1 02 
2eb16     CE 02 CD 02 
2eb1a     5D FC 80 EF 
2eb1e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2eb22     83 EC 8A EC 
2eb26     93 EC 9C EC 
2eb2a     A5 EC B1 EC 
2eb2e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2eb32     2B 03 2A 03 
2eb36     29 03 26 03 
2eb3a     25 03 24 03 
2eb3e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2eb42     1F 03 70 F7 
2eb46     D0 EE 27 ED 
2eb4a     DB EC D4 EC 
2eb4e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2eb52     F0 EC FA EC 
2eb56     02 ED F9 F4 
2eb5a     7B 03 7C 03 
2eb5e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2eb62     75 03 73 03 
2eb66     72 03 70 03 
2eb6a     6D 03 6C 03 
2eb6e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2eb72     54 ED 22 ED 
2eb76     22 ED 2C ED 
2eb7a     35 ED 3F ED 
2eb7e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2eb82     14 01 C3 03 
2eb86     C1 03 C0 03 
2eb8a     5F 01 A5 00 
2eb8e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2eb92     7B 00 7C 00 
2eb96     20 00 85 F1 
2eb9a     2A EE 89 ED 
2eb9e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2eba2     80 ED 87 ED 
2eba6     90 ED 9A ED 
2ebaa     A3 ED 73 00 
2ebae     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2ebb2     D0 00 D0 00 
2ebb6     D0 00 D0 00 
2ebba     D0 00 CF 00 
2ebbe     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2ebc2     80 F0 3D EE 
2ebc6     D5 ED C7 ED 
2ebca     CD ED D6 ED 
2ebce     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2ebd2     F2 ED FA ED 
2ebd6     1D 01 29 01 
2ebda     27 01 27 01 
2ebde     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2ebe2     25 01 26 01 
2ebe6     26 01 23 01 
2ebea     D0 F7 EC EF 
2ebee     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2ebf2     1C EE 24 EE 
2ebf6     2D EE 37 EE 
2ebfa     40 EE 47 EE 
2ebfe     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2ec02     7D 01 7B 01 
2ec06     7A 01 7A 01 
2ec0a     79 01 78 01 
2ec0e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2ec12     84 FE DE F3 
2ec16     6C EF 93 EE 
2ec1a     72 EE 72 EE 
2ec1e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2ec22     8B EE 95 EE 
2ec26     9E EE 15 FC 
2ec2a     67 FE 67 FE 
2ec2e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2ec32     6B FE 6B FE 
2ec36     6D FE 6D FE 
2ec3a     6D FE 6F FE 
2ec3e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2ec42     DF EE CC EE 
2ec46     CF EE D9 EE 
2ec4a     E1 EE EA EE 
2ec4e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2ec52     5A FE C4 FE 
2ec56     C3 FE C5 FE 
2ec5a     C6 FE C6 FE 
2ec5e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2ec62     C8 FE C7 FE 
2ec66     DA FB 85 F1 
2ec6a     8D EF 31 EF 
2ec6e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2ec72     34 EF 3E EF 
2ec76     46 EF 4F EF 
2ec7a     57 EF 0D FF 
2ec7e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2ec82     1F FF 1F FF 
2ec86     21 FF 21 FF 
2ec8a     21 FF 21 FF 
2ec8e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2ec92     15 F1 BE EF 
2ec96     84 EF 7E EF 
2ec9a     88 EF 8F EF 
2ec9e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2eca2     A9 EF 06 F2 
2eca6     A6 FC AB FC 
2ecaa     AD FC AE FC 
2ecae     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2ecb2     B2 FC B4 FC 
2ecb6     B6 FC B7 FC 
2ecba     8B F4 BD F0 
2ecbe     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2ecc2     E4 EF EE EF 
2ecc6     F6 EF FD EF 
2ecca     04 F0 0E F0 
2ecce     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2ecd2     0B FD 0D FD 
2ecd6     0F FD 11 FD 
2ecda     11 FD 13 FD 
2ecde     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2ece2     17 FD 64 F3 
2ece6     CD F0 52 F0 
2ecea     41 F0 45 F0 
2ecee     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2ecf2     5B F0 64 F0 
2ecf6     6D F0 FB FC 
2ecfa     65 FD 68 FD 
2ecfe     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2ed02     6C FD 6D FD 
2ed06     6F FD 70 FD 
2ed0a     72 FD B3 FB 
2ed0e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2ed12     A4 F0 99 F0 
2ed16     A0 F0 A8 F0 
2ed1a     AE F0 B9 F0 
2ed1e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2ed22     CB FB DD FB 
2ed26     DE FB E0 FB 
2ed2a     E3 FB E3 FB 
2ed2e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2ed32     E9 FB EC FB 
2ed36     62 F7 27 F2 
2ed3a     2A F1 FF F0 
2ed3e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2ed42     0C F1 13 F1 
2ed46     1B F1 23 F1 
2ed4a     33 F2 3C FC 
2ed4e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2ed52     42 FC 45 FC 
2ed56     47 FC 48 FC 
2ed5a     4A FC 4C FC 
2ed5e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2ed62     20 F2 77 F1 
2ed66     5C F1 5F F1 
2ed6a     64 F1 6C F1 
2ed6e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2ed72     83 F1 DC F8 
2ed76     9A FC 9A FC 
2ed7a     9B FC 9E FC 
2ed7e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2ed82     A3 FC A4 FC 
2ed86     A6 FC A9 FC 
2ed8a     90 F4 33 F2 
2ed8e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2ed92     BA F1 BF F1 
2ed96     C7 F1 CE F1 
2ed9a     D6 F1 DC F1 
2ed9e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2eda2     F3 FC F5 FC 
2eda6     FE FB 79 FB 
2edaa     62 FB 5F FB 
2edae     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2edb2     6F FA AF F3 
2edb6     53 F2 12 F2 
2edba     0F F2 15 F2 
2edbe     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2edc2     2A F2 32 F2 
2edc6     38 F2 9A FB 
2edca     AF FB B1 FB 
2edce     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2edd2     B7 FB B8 FB 
2edd6     BA FB BC FB 
2edda     C1 FB 3B F8 
2edde     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2ede2     6E F2 6C F2 
2ede6     74 F2 7A F2 
2edea     81 F2 87 F2 
2edee     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2edf2     06 FC 09 FC 
2edf6     0C FC 0E FC 
2edfa     0F FC 12 FC 
2edfe     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2ee02     17 FC 1A FC 
2ee06     B2 F6 7B F3 
2ee0a     DD F2 C5 F2 
2ee0e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2ee12     D4 F2 DB F2 
2ee16     E0 F2 E8 F2 
2ee1a     28 F8 60 FC 
2ee1e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2ee22     64 FC 66 FC 
2ee26     68 FC 6A FC 
2ee2a     6D FC 52 FC 
2ee2e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2ee32     78 F3 24 F3 
2ee36     1A F3 1E F3 
2ee3a     24 F3 2A F3 
2ee3e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2ee42     3D F3 80 FA 
2ee46     0C FB 0F FB 
2ee4a     10 FB 14 FB 
2ee4e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2ee52     1B FB 1D FB 
2ee56     1F FB 92 FA 
2ee5a     DE F4 AE F3 
2ee5e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2ee62     79 F3 7E F3 
2ee66     84 F3 8C F3 
2ee6a     92 F3 97 F3 
2ee6e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2ee72     67 FB 69 FB 
2ee76     6B FB 6F FB 
2ee7a     71 FB 72 FB 
2ee7e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2ee82     E3 F8 BA F4 
2ee86     EE F3 CC F3 
2ee8a     CA F3 CF F3 
2ee8e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2ee92     E2 F3 E8 F3 
2ee96     ED F3 B7 FB 
2ee9a     BC FB BE FB 
2ee9e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2eea2     C4 FB C6 FB 
2eea6     C8 FB C9 FB 
2eeaa     CC FB 8F F7 
2eeae     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2eeb2     1E F4 1E F4 
2eeb6     24 F4 2A F4 
2eeba     30 F4 38 F4 
2eebe     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2eec2     AD FA B1 FA 
2eec6     B4 FA B6 FA 
2eeca     BA FA BB FA 
2eece     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2eed2     C2 FA C6 FA 
2eed6     55 F6 C6 F4 
2eeda     7D F4 72 F4 
2eede     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2eee2     83 F4 89 F4 
2eee6     8F F4 94 F4 
2eeea     66 FA 03 FB 
2eeee     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2eef2     0A FB 0E FB 
2eef6     10 FB 11 FB 
2eefa     16 FB 18 FB 
2eefe     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2ef02     F9 F4 CA F4 
2ef06     C5 F4 CB F4 
2ef0a     D1 F4 D7 F4 
2ef0e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2ef12     E8 F4 3F FB 
2ef16     56 FB 58 FB 
2ef1a     5A FB 5E FB 
2ef1e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2ef22     64 FB 64 FB 
2ef26     69 FB 99 F9 
2ef2a     E9 F5 33 F5 
2ef2e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2ef32     1D F5 22 F5 
2ef36     27 F5 2E F5 
2ef3a     32 F5 37 F5 
2ef3e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2ef42     BC FA BC FA 
2ef46     C1 FA C2 FA 
2ef4a     C4 FA C8 FA 
2ef4e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2ef52     F9 F7 DB F5 
2ef56     78 F5 69 F5 
2ef5a     6A F5 70 F5 
2ef5e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2ef62     7F F5 85 F5 
2ef66     6E F7 06 FB 
2ef6a     0A FB 0B FB 
2ef6e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2ef72     14 FB 15 FB 
2ef76     18 FB 1B FB 
2ef7a     1D FB 70 F7 
2ef7e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2ef82     B6 F5 BB F5 
2ef86     C0 F5 C6 F5 
2ef8a     CA F5 CF F5 
2ef8e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2ef92     54 FB 56 FB 
2ef96     5A FB 5B FB 
2ef9a     5E FB 5F FB 
2ef9e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2efa2     67 FB 52 FB 
2efa6     29 F7 33 F6 
2efaa     06 F6 02 F6 
2efae     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2efb2     10 F6 16 F6 
2efb6     1A F6 1F F6 
2efba     81 FB 9F FB 
2efbe     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2efc2     51 FB F2 FA 
2efc6     E3 FA E3 FA 
2efca     E5 FA E9 FA 
2efce     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2efd2     64 F6 4D F6 
2efd6     4D F6 53 F6 
2efda     57 F6 5C F6 
2efde     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2efe2     6A F6 19 FB 
2efe6     1E FB 22 FB 
2efea     23 FB 24 FB 
2efee     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2eff2     2C FB 2E FB 
2eff6     32 FB F0 F8 
2effa     01 F7 A5 F6 
2effe     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2f002     9F F6 A3 F6 
2f006     A6 F6 AC F6 
2f00a     B0 F6 EB F7 
2f00e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2f012     68 FB 6C FB 
2f016     6E FB 71 FB 
2f01a     72 FB 74 FB 
2f01e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2f022     71 F8 21 F7 
2f026     E5 F6 DD F6 
2f02a     E1 F6 E6 F6 
2f02e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2f032     F5 F6 F7 F6 
2f036     F7 FA AB FB 
2f03a     AD FB AF FB 
2f03e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2f042     B6 FB B9 FB 
2f046     BB FB BC FB 
2f04a     21 FB 07 F8 
2f04e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2f052     22 F7 26 F7 
2f056     2B F7 2E F7 
2f05a     34 F7 38 F7 
2f05e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2f062     13 FB 16 FB 
2f066     17 FB 1B FB 
2f06a     1E FB 20 FB 
2f06e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2f072     26 FB 77 FA 
2f076     F3 F7 7C F7 
2f07a     67 F7 6A F7 
2f07e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2f082     74 F7 7A F7 
2f086     7E F7 82 F7 
2f08a     53 FB 5A FB 
2f08e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2f092     5F FB 63 FB 
2f096     65 FB 67 FB 
2f09a     69 FB 6A FB 
2f09e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2f0a2     B5 F7 A9 F7 
2f0a6     AD F7 B0 F7 
2f0aa     B5 F7 B8 F7 
2f0ae     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2f0b2     6E F8 99 FB 
2f0b6     9C FB 9D FB 
2f0ba     9F FB A4 FB 
2f0be     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2f0c2     A9 FB AB FB 
2f0c6     AD FB 46 F9 
2f0ca     26 F8 F0 F7 
2f0ce     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2f0d2     F4 F7 F8 F7 
2f0d6     FB F7 FF F7 
2f0da     03 F8 65 FA 
2f0de     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2f0e2     2B FB 2F FB 
2f0e6     30 FB 32 FB 
2f0ea     34 FB 38 FB 
2f0ee     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2f0f2     E9 F8 4A F8 
2f0f6     2E F8 2C F8 
2f0fa     2F F8 36 F8 
2f0fe     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2f102     41 F8 44 F8 
2f106     4A FB 67 FB 
2f10a     68 FB 6B FB 
2f10e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2f112     73 FB 74 FB 
2f116     78 FB 7A FB 
2f11a     14 FB E7 F8 
2f11e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2f122     6D F8 70 F8 
2f126     73 F8 78 F8 
2f12a     7C F8 80 F8 
2f12e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2f132     A6 FB A7 FB 
2f136     A9 FB AC FB 
2f13a     AF FB B1 FB 
2f13e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2f142     B7 FB 73 FA 
2f146     F8 F8 B4 F8 
2f14a     A9 F8 AB F8 
2f14e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2f152     B4 F8 B8 F8 
2f156     BB F8 FA F8 
2f15a     64 FB 65 FB 
2f15e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2f162     6D FB 6F FB 
2f166     70 FB 74 FB 
2f16a     77 FB 77 FB 
2f16e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2f172     E9 F8 E4 F8 
2f176     E8 F8 EB F8 
2f17a     EE F8 F2 F8 
2f17e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2f182     B5 FA 9F FB 
2f186     A1 FB A4 FB 
2f18a     A5 FB A9 FB 
2f18e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2f192     AE FB B1 FB 
2f196     B2 FB C7 F9 
2f19a     39 F9 22 F9 
2f19e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2f1a2     26 F9 2A F9 
2f1a6     2E F9 32 F9 
2f1aa     33 F9 BA FB 
2f1ae     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2f1b2     DE FB E1 FB 
2f1b6     E2 FB E4 FB 
2f1ba     E5 FB E7 FB 
2f1be     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2f1c2     C5 F9 67 F9 
2f1c6     57 F9 56 F9 
2f1ca     5B F9 5F F9 
2f1ce     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2f1d2     68 F9 6C F9 
2f1d6     0B FC 11 FC 
2f1da     14 FC 15 FC 
2f1de     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2f1e2     B5 FB B5 FB 
2f1e6     B6 FB B8 FB 
2f1ea     E9 FA C8 F9 
2f1ee     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2f1f2     90 F9 94 F9 
2f1f6     95 F9 99 F9 
2f1fa     9D F9 9F F9 
2f1fe     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2f202     DE FB DF FB 
2f206     E2 FB E4 FB 
2f20a     E6 FB E8 FB 
2f20e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2f212     EF FB AC FA 
2f216     E9 F9 C7 F9 
2f21a     C3 F9 C8 F9 
2f21e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2f222     D0 F9 D4 F9 
2f226     D6 F9 0E FB 
2f22a     11 FC 13 FC 
2f22e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2f232     19 FC 1B FC 
2f236     1D FC 1E FC 
2f23a     21 FC 22 FC 
2f23e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2f242     F7 F9 F7 F9 
2f246     FB F9 FE F9 
2f24a     00 FA 03 FA 
2f24e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2f252     1B FC 45 FC 
2f256     46 FC 48 FC 
2f25a     4A FC 4B FC 
2f25e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2f262     52 FC 54 FC 
2f266     F3 FB 82 FA 
2f26a     35 FA 28 FA 
2f26e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2f272     31 FA 32 FA 
2f276     37 FA 37 FA 
2f27a     3C FA 00 FC 
2f27e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2f282     09 FC 0B FC 
2f286     0F FC 12 FC 
2f28a     12 FC 15 FC 
2f28e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2f292     8D FA 60 FA 
2f296     5B FA 5C FA 
2f29a     60 FA 61 FA 
2f29e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2f2a2     6C FA 6D FA 
2f2a6     37 FC 3A FC 
2f2aa     3B FC 3D FC 
2f2ae     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2f2b2     43 FC 44 FC 
2f2b6     45 FC 47 FC 
2f2ba     51 FB AB FA 
2f2be     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2f2c2     8E FA 91 FA 
2f2c6     93 FA 95 FA 
2f2ca     98 FA 9B FA 
2f2ce     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2f2d2     68 FC 6A FC 
2f2d6     6C FC 6E FC 
2f2da     70 FC 72 FC 
2f2de     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2f2e2     76 FC 3B FB 
2f2e6     D0 FA BB FA 
2f2ea     B9 FA BD FA 
2f2ee     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2f2f2     C4 FA C6 FA 
2f2f6     CA FA 13 FC 
2f2fa     3A FC 3A FC 
2f2fe     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2f302     41 FC 43 FC 
2f306     44 FC 47 FC 
2f30a     48 FC 3C FC 
2f30e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2f312     E6 FA E8 FA 
2f316     EB FA EE FA 
2f31a     F0 FA F2 FA 
2f31e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2f322     61 FC 66 FC 
2f326     68 FC 6B FC 
2f32a     6C FC 6E FC 
2f32e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2f332     73 FC 75 FC 
2f336     13 FC 3F FB 
2f33a     17 FB 12 FB 
2f33e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2f342     1A FB 1D FB 
2f346     1F FB 20 FB 
2f34a     23 FB 92 FC 
2f34e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2f352     96 FC 97 FC 
2f356     9A FC 9C FC 
2f35a     9E FC 9F FC 
2f35e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2f362     5A FB 41 FB 
2f366     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2f36a     00 00 00 00 | zero2 long 0
2f36e     01 00 00 00 
2f372     00 00 00 00 
2f376     00 00 00 00 
2f37a     00 00 00 00 | mouse  file "mouse2.def"
2f37e     00 00 00 00 
2f382     00 00 00 00 
2f386     00 00 00 00 
2f38a     00 00 00 00 | 	byte	$00[16]
2f38e     01 01 00 00 
2f392     00 00 00 00 
2f396     00 00 00 00 
2f39a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f39e     00 00 00 00 
2f3a2     00 00 00 00 
2f3a6     00 00 00 00 
2f3aa     00 00 00 00 | 	byte	$00[16]
2f3ae     01 0D 01 00 
2f3b2     00 00 00 00 
2f3b6     00 00 00 00 
2f3ba     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f3be     00 00 00 00 
2f3c2     00 00 00 00 
2f3c6     00 00 00 00 
2f3ca     00 00 00 00 | 	byte	$00[16]
2f3ce     01 0D 0D 01 
2f3d2     00 00 00 00 
2f3d6     00 00 00 00 
2f3da     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f3de     00 00 00 00 
2f3e2     00 00 00 00 
2f3e6     00 00 00 00 
2f3ea     00 00 00 00 | 	byte	$00[16]
2f3ee     01 0D 0D 0D 
2f3f2     01 00 00 00 
2f3f6     00 00 00 00 
2f3fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f3fe     00 00 00 00 
2f402     00 00 00 00 
2f406     00 00 00 00 
2f40a     00 00 00 00 | 	byte	$00[16]
2f40e     01 0D 0D 0D 
2f412     0D 01 00 00 
2f416     00 00 00 00 
2f41a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f41e     00 00 00 00 
2f422     00 00 00 00 
2f426     00 00 00 00 
2f42a     00 00 00 00 | 	byte	$00[16]
2f42e     01 0D 0D 0D 
2f432     0D 0D 01 00 
2f436     00 00 00 00 
2f43a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f43e     00 00 00 00 
2f442     00 00 00 00 
2f446     00 00 00 00 
2f44a     00 00 00 00 | 	byte	$00[16]
2f44e     01 0D 0D 0D 
2f452     0D 0D 0D 01 
2f456     00 00 00 00 
2f45a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2f45e     00 00 00 00 
2f462     00 00 00 00 
2f466     00 00 00 00 
2f46a     00 00 00 00 | 	byte	$00[16]
2f46e     01 0D 0D 0D 
2f472     0D 0D 0D 0C 
2f476     01 00 00 00 
2f47a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2f47e     00 00 00 00 
2f482     00 00 00 00 
2f486     00 00 00 00 
2f48a     00 00 00 00 | 	byte	$00[16]
2f48e     01 0D 0D 0D 
2f492     0D 0D 0D 0D 
2f496     0C 01 00 00 
2f49a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2f49e     00 00 00 00 
2f4a2     00 00 00 00 
2f4a6     00 00 00 00 
2f4aa     00 00 00 00 | 	byte	$00[16]
2f4ae     01 0D 0D 0D 
2f4b2     0D 0D 0D 0D 
2f4b6     0D 0C 01 00 
2f4ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2f4be     00 00 00 00 
2f4c2     00 00 00 00 
2f4c6     00 00 00 00 
2f4ca     00 00 00 00 | 	byte	$00[16]
2f4ce     01 0D 0D 0D 
2f4d2     0D 0D 0D 0D 
2f4d6     0D 0D 0B 01 
2f4da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2f4de     00 00 00 00 
2f4e2     00 00 00 00 
2f4e6     00 00 00 00 
2f4ea     00 00 00 00 | 	byte	$00[16]
2f4ee     01 0D 0D 0D 
2f4f2     0C 0D 0D 03 
2f4f6     01 01 01 01 
2f4fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2f4fe     00 00 00 00 
2f502     00 00 00 00 
2f506     00 00 00 00 
2f50a     00 00 00 00 | 	byte	$00[16]
2f50e     01 0D 0D 0C 
2f512     01 09 0D 03 
2f516     00 00 00 00 
2f51a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2f51e     00 00 00 00 
2f522     00 00 00 00 
2f526     00 00 00 00 
2f52a     00 00 00 00 | 	byte	$00[16]
2f52e     01 0D 0C 01 
2f532     00 01 0D 0B 
2f536     01 00 00 00 
2f53a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2f53e     00 00 00 00 
2f542     00 00 00 00 
2f546     00 00 00 00 
2f54a     00 00 00 00 | 	byte	$00[16]
2f54e     01 0C 01 00 
2f552     00 01 0A 0D 
2f556     01 00 00 00 
2f55a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2f55e     00 00 00 00 
2f562     00 00 00 00 
2f566     00 00 00 00 
2f56a     00 00 00 00 | 	byte	$00[16]
2f56e     01 01 00 00 
2f572     00 00 01 0D 
2f576     0B 01 00 00 
2f57a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2f57e     00 00 00 00 
2f582     00 00 00 00 
2f586     00 00 00 00 
2f58a     00 00 00 00 
2f58e     00 00 00 00 
2f592     00 00       | 	byte	$00[22]
2f594     01 0B 0D 01 
2f598     00 00 00 00 
2f59c     00 00 00 00 
2f5a0     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f5a4     00 00 00 00 
2f5a8     00 00 00 00 
2f5ac     00 00 00 00 
2f5b0     00 00 00 00 
2f5b4     00          | 	byte	$00[17]
2f5b5     01 01 00 00 
2f5b9     00 00 00 00 
2f5bd     00 00 00 00 
2f5c1     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f5c5     00 00 00 00 
      ...             
2f769     00 00 00 00 
2f76d     00          | 	byte	$00[425]
2f76e     73 32 00 04 
2f772     00 00 10 00 
2f776     00 00 00 00 
2f77a     00 00 00 00 | atari2 file "atari2.s2"
2f77e     43 87 43 87 
2f782     43 87 44 87 
2f786     43 87 44 87 
2f78a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f78e     43 87 43 87 
2f792     43 87 44 87 
2f796     43 87 43 87 
2f79a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f79e     44 87 43 87 
2f7a2     44 87 43 87 
2f7a6     43 87 43 87 
2f7aa     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f7ae     43 87 43 87 
2f7b2     44 87 43 87 
2f7b6     44 87 44 87 
2f7ba     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2f7be     43 87 43 87 
2f7c2     44 87 43 87 
2f7c6     43 87 42 87 
2f7ca     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2f7ce     43 87 43 87 
2f7d2     43 87 43 87 
2f7d6     44 87 43 87 
2f7da     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2f7de     44 87 44 87 
2f7e2     43 87 44 87 
2f7e6     43 87 44 87 
2f7ea     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2f7ee     44 87 43 87 
2f7f2     44 87 44 87 
2f7f6     43 87 43 87 
2f7fa     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f7fe     43 87 44 87 
2f802     44 87 43 87 
2f806     43 87 44 87 
2f80a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2f80e     43 87 43 87 
2f812     43 87 43 87 
2f816     43 87 43 87 
2f81a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f81e     42 87 43 87 
2f822     44 87 42 87 
2f826     43 87 43 87 
2f82a     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f82e     43 87 44 87 
2f832     44 87 43 87 
2f836     43 87 43 87 
2f83a     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f83e     43 87 5C 87 
2f842     EE 86 AC 87 
2f846     4C 7C A3 78 
2f84a     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2f84e     BC 78 BB 78 
2f852     BD 78 BC 78 
2f856     BB 78 BD 78 
2f85a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2f85e     BB 78 BB 78 
2f862     BC 78 BC 78 
2f866     BC 78 BB 78 
2f86a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f86e     BC 78 BC 78 
2f872     BC 78 BC 78 
2f876     BC 78 BC 78 
2f87a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2f87e     BB 78 BC 78 
2f882     A0 78 4C 7C 
2f886     11 7A 29 89 
2f88a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2f88e     44 87 43 87 
2f892     44 87 43 87 
2f896     43 87 42 87 
2f89a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2f89e     43 87 43 87 
2f8a2     44 87 ED 85 
2f8a6     71 85 52 79 
2f8aa     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2f8ae     BC 78 BC 78 
2f8b2     BC 78 BC 78 
2f8b6     BC 78 BC 78 
2f8ba     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2f8be     BC 78 BC 78 
2f8c2     BC 78 A0 78 
2f8c6     CF 7A B9 81 
2f8ca     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2f8ce     44 87 43 87 
2f8d2     43 87 44 87 
2f8d6     43 87 44 87 
2f8da     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f8de     43 87 43 87 
2f8e2     43 87 43 87 
2f8e6     44 87 43 87 
2f8ea     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2f8ee     43 87 43 87 
2f8f2     44 87 43 87 
2f8f6     44 87 43 87 
2f8fa     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2f8fe     44 87 43 87 
2f902     43 87 43 87 
2f906     5A 87 39 81 
2f90a     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2f90e     A5 78 BC 78 
2f912     BB 78 BC 78 
2f916     BB 78 BC 78 
2f91a     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2f91e     BC 78 BC 78 
2f922     BC 78 BC 78 
2f926     BC 78 8F 79 
2f92a     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2f92e     09 85 47 87 
2f932     43 87 43 87 
2f936     42 87 42 87 
2f93a     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2f93e     43 87 43 87 
2f942     43 87 43 87 
2f946     43 87 44 87 
2f94a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f94e     43 87 43 87 
2f952     44 87 43 87 
2f956     42 87 43 87 
2f95a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2f95e     44 87 43 87 
2f962     43 87 43 87 
2f966     44 87 44 87 
2f96a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2f96e     94 78 55 7A 
2f972     B9 78 BC 78 
2f976     BC 78 BC 78 
2f97a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2f97e     BC 78 BB 78 
2f982     BC 78 BC 78 
2f986     BC 78 BC 78 
2f98a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2f98e     BB 78 BC 78 
2f992     BC 78 BC 78 
2f996     BB 78 BC 78 
2f99a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f99e     BC 78 BC 78 
2f9a2     BD 78 BC 78 
2f9a6     BC 78 BB 78 
2f9aa     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2f9ae     94 78 B3 84 
2f9b2     36 84 4A 87 
2f9b6     43 87 43 87 
2f9ba     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f9be     43 87 44 87 
2f9c2     43 87 43 87 
2f9c6     43 87 43 87 
2f9ca     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f9ce     43 87 44 87 
2f9d2     43 87 44 87 
2f9d6     43 87 43 87 
2f9da     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f9de     43 87 43 87 
2f9e2     43 87 45 87 
2f9e6     43 87 43 87 
2f9ea     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f9ee     43 87 44 87 
2f9f2     44 87 44 87 
2f9f6     43 87 43 87 
2f9fa     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f9fe     43 87 42 87 
2fa02     43 87 43 87 
2fa06     44 87 43 87 
2fa0a     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2fa0e     54 87 3C 82 
2fa12     36 83 52 79 
2fa16     C6 78 BC 78 
2fa1a     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2fa1e     BB 78 BB 78 
2fa22     BC 78 BC 78 
2fa26     BC 78 BC 78 
2fa2a     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2fa2e     BD 78 ED 78 
2fa32     1B 79 F4 83 
2fa36     4D 83 4E 87 
2fa3a     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2fa3e     44 87 43 87 
2fa42     42 87 44 87 
2fa46     43 87 42 87 
2fa4a     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2fa4e     43 87 54 87 
2fa52     26 82 B3 84 
2fa56     D6 77 BB 78 
2fa5a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2fa5e     BC 78 BB 78 
2fa62     BB 78 BB 78 
2fa66     BB 78 BB 78 
2fa6a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2fa6e     BC 78 BC 78 
2fa72     26 79 18 75 
2fa76     36 83 1F 84 
2fa7a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2fa7e     43 87 43 87 
2fa82     43 87 43 87 
2fa86     43 87 44 87 
2fa8a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2fa8e     43 87 44 87 
2fa92     44 87 43 87 
2fa96     43 87 43 87 
2fa9a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2fa9e     43 87 43 87 
2faa2     43 87 43 87 
2faa6     44 87 44 87 
2faaa     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2faae     44 87 43 87 
2fab2     43 87 43 87 
2fab6     43 87 44 87 
2faba     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2fabe     44 87 44 87 
2fac2     44 87 43 87 
2fac6     44 87 43 87 
2faca     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2face     43 87 43 87 
2fad2     43 87 44 87 
2fad6     44 87 43 87 
2fada     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2fade     43 87 43 87 
2fae2     43 87 43 87 
2fae6     43 87 44 87 
2faea     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2faee     43 87 44 87 
2faf2     43 87 44 87 
2faf6     19 87 7D 86 
2fafa     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2fafe     B1 78 BC 78 
2fb02     BC 78 BC 78 
2fb06     BC 78 BC 78 
2fb0a     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2fb0e     BC 78 BC 78 
2fb12     BD 78 BC 78 
2fb16     B7 78 3B 7B 
2fb1a     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2fb1e     96 86 44 87 
2fb22     43 87 43 87 
2fb26     43 87 43 87 
2fb2a     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2fb2e     44 87 44 87 
2fb32     43 87 44 87 
2fb36     43 87 44 87 
2fb3a     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2fb3e     43 87 44 87 
2fb42     43 87 44 87 
2fb46     43 87 44 87 
2fb4a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2fb4e     43 87 44 87 
2fb52     43 87 43 87 
2fb56     44 87 43 87 
2fb5a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2fb5e     44 87 44 87 
2fb62     43 87 43 87 
2fb66     43 87 44 87 
2fb6a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2fb6e     43 87 43 87 
2fb72     43 87 43 87 
2fb76     44 87 44 87 
2fb7a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2fb7e     36 83 CF 7A 
2fb82     AB 78 BB 78 
2fb86     BC 78 BC 78 
2fb8a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2fb8e     BB 78 BC 78 
2fb92     BC 78 BC 78 
2fb96     BC 78 BC 78 
2fb9a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2fb9e     BC 78 BC 78 
2fba2     BC 78 BB 78 
2fba6     BC 78 BC 78 
2fbaa     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2fbae     BB 78 BC 78 
2fbb2     BB 78 BC 78 
2fbb6     BC 78 BD 78 
2fbba     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2fbbe     BC 78 BC 78 
2fbc2     BC 78 BC 78 
2fbc6     BC 78 BD 78 
2fbca     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2fbce     BC 78 BB 78 
2fbd2     BC 78 BB 78 
2fbd6     BB 78 BC 78 
2fbda     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2fbde     BC 78 BC 78 
2fbe2     BC 78 BC 78 
2fbe6     BC 78 BB 78 
2fbea     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2fbee     BC 78 BC 78 
2fbf2     BC 78 BD 78 
2fbf6     BB 78 BC 78 
2fbfa     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2fbfe     BC 78 BC 78 
2fc02     BC 78 BB 78 
2fc06     BC 78 BB 78 
2fc0a     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2fc0e     BB 78 BC 78 
2fc12     BC 78 BC 78 
2fc16     BC 78 BB 78 
2fc1a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fc1e     BC 78 BC 78 
2fc22     BC 78 BB 78 
2fc26     BC 78 BB 78 
2fc2a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fc2e     BC 78 BC 78 
2fc32     BC 78 BC 78 
2fc36     BB 78 BC 78 
2fc3a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2fc3e     BC 78 9F 78 
2fc42     52 79 B3 84 
2fc46     2F 86 60 87 
2fc4a     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2fc4e     44 87 43 87 
2fc52     43 87 43 87 
2fc56     43 87 43 87 
2fc5a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2fc5e     43 87 43 87 
2fc62     43 87 44 87 
2fc66     43 87 43 87 
2fc6a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2fc6e     43 87 43 87 
2fc72     43 87 43 87 
2fc76     43 87 44 87 
2fc7a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2fc7e     44 87 44 87 
2fc82     5E 87 BC 80 
2fc86     FB 80 94 78 
2fc8a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2fc8e     BD 78 BC 78 
2fc92     BB 78 BC 78 
2fc96     BB 78 BB 78 
2fc9a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2fc9e     BC 78 BB 78 
2fca2     BB 78 6B 79 
2fca6     D6 77 AC 87 
2fcaa     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2fcae     43 87 44 87 
2fcb2     43 87 43 87 
2fcb6     44 87 43 87 
2fcba     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2fcbe     43 87 44 87 
2fcc2     43 87 5C 87 
2fcc6     E7 80 00 80 
2fcca     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2fcce     BC 78 BD 78 
2fcd2     BC 78 BC 78 
2fcd6     BC 78 BB 78 
2fcda     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fcde     BC 78 BC 78 
2fce2     BB 78 BC 78 
2fce6     BB 78 BC 78 
2fcea     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2fcee     BB 78 BC 78 
2fcf2     BC 78 BC 78 
2fcf6     BC 78 BC 78 
2fcfa     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2fcfe     BC 78 BC 78 
2fd02     BC 78 BC 78 
2fd06     A0 78 8D 7B 
2fd0a     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2fd0e     60 87 43 87 
2fd12     44 87 44 87 
2fd16     43 87 43 87 
2fd1a     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2fd1e     44 87 43 87 
2fd22     43 87 43 87 
2fd26     44 87 73 86 
2fd2a     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2fd2e     51 7B B6 78 
2fd32     BC 78 BD 78 
2fd36     BC 78 BC 78 
2fd3a     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2fd3e     BB 78 BC 78 
2fd42     BD 78 BB 78 
2fd46     BC 78 BB 78 
2fd4a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2fd4e     BC 78 BC 78 
2fd52     BC 78 BC 78 
2fd56     BB 78 BC 78 
2fd5a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2fd5e     BC 78 BB 78 
2fd62     BB 78 BC 78 
2fd66     BC 78 BB 78 
2fd6a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2fd6e     22 8C AF 84 
2fd72     48 87 43 87 
2fd76     44 87 43 87 
2fd7a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2fd7e     43 87 42 87 
2fd82     43 87 43 87 
2fd86     44 87 43 87 
2fd8a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2fd8e     43 87 43 87 
2fd92     44 87 44 87 
2fd96     43 87 43 87 
2fd9a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2fd9e     43 87 43 87 
2fda2     43 87 43 87 
2fda6     44 87 43 87 
2fdaa     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2fdae     9F 8B D6 77 
2fdb2     16 7C B3 78 
2fdb6     BC 78 BB 78 
2fdba     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2fdbe     BB 78 BC 78 
2fdc2     BB 78 BC 78 
2fdc6     BC 78 BC 78 
2fdca     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2fdce     BC 78 BB 78 
2fdd2     BB 78 BC 78 
2fdd6     BB 78 BC 78 
2fdda     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2fdde     BB 78 BB 78 
2fde2     BC 78 BC 78 
2fde6     BC 78 BB 78 
2fdea     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2fdee     BC 78 BC 78 
2fdf2     BC 78 BD 78 
2fdf6     BB 78 BC 78 
2fdfa     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2fdfe     BC 78 BC 78 
2fe02     BC 78 BB 78 
2fe06     BC 78 BC 78 
2fe0a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2fe0e     A8 78 54 7E 
2fe12     F4 83 17 82 
2fe16     50 87 43 87 
2fe1a     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2fe1e     44 87 43 87 
2fe22     44 87 43 87 
2fe26     43 87 44 87 
2fe2a     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2fe2e     43 87 28 87 
2fe32     20 85 CF 7A 
2fe36     70 7D AD 78 
2fe3a     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2fe3e     BB 78 BC 78 
2fe42     BC 78 BC 78 
2fe46     BB 78 BB 78 
2fe4a     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2fe4e     BB 78 B2 78 
2fe52     9A 7C CF 7A 
2fe56     4A 87 0D 87 
2fe5a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2fe5e     43 87 44 87 
2fe62     43 87 44 87 
2fe66     43 87 43 87 
2fe6a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2fe6e     44 87 43 87 
2fe72     28 87 51 85 
2fe76     11 7A 1E 7D 
2fe7a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2fe7e     BC 78 BB 78 
2fe82     BC 78 BC 78 
2fe86     BC 78 BC 78 
2fe8a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2fe8e     BB 78 BC 78 
2fe92     BB 78 BC 78 
2fe96     BC 78 BC 78 
2fe9a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2fe9e     BB 78 BC 78 
2fea2     BC 78 BC 78 
2fea6     BD 78 BB 78 
2feaa     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2feae     BC 78 BB 78 
2feb2     BC 78 BC 78 
2feb6     BC 78 BB 78 
2feba     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2febe     BC 78 BC 78 
2fec2     BC 78 BC 78 
2fec6     BB 78 BC 78 
2feca     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2fece     BC 78 BD 78 
2fed2     BC 78 BC 78 
2fed6     BC 78 BB 78 
2feda     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fede     BC 78 BB 78 
2fee2     BB 78 BC 78 
2fee6     BC 78 BB 78 
2feea     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2feee     BB 78 BB 78 
2fef2     BB 78 BC 78 
2fef6     B6 78 48 7D 
2fefa     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2fefe     56 87 43 87 
2ff02     42 87 44 87 
2ff06     44 87 43 87 
2ff0a     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ff0e     43 87 44 87 
2ff12     43 87 44 87 
2ff16     4C 87 7E 83 
2ff1a     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2ff1e     F7 78 BC 78 
2ff22     BC 78 BB 78 
2ff26     BB 78 BC 78 
2ff2a     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ff2e     BC 78 BB 78 
2ff32     BC 78 BC 78 
2ff36     BB 78 BC 78 
2ff3a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2ff3e     BB 78 BC 78 
2ff42     BC 78 BC 78 
2ff46     BC 78 BB 78 
2ff4a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ff4e     BC 78 BC 78 
2ff52     BC 78 BC 78 
2ff56     BC 78 BB 78 
2ff5a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ff5e     BC 78 BB 78 
2ff62     BB 78 BC 78 
2ff66     BC 78 BB 78 
2ff6a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ff6e     BC 78 BC 78 
2ff72     BB 78 BC 78 
2ff76     BC 78 BC 78 
2ff7a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2ff7e     73 32 00 04 
2ff82     00 00 10 00 
2ff86     00 00 00 00 
2ff8a     00 00 00 00 | atari12 file "atari12.s2"
2ff8e     00 6D 00 6D 
2ff92     00 6D 00 6D 
2ff96     00 6D 00 6D 
2ff9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ff9e     00 6D 00 6D 
2ffa2     00 6D 00 6D 
2ffa6     00 6D 00 6D 
2ffaa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffae     00 6D 00 6D 
2ffb2     00 6D 00 6D 
2ffb6     00 6D 00 6D 
2ffba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffbe     00 6D 00 6D 
2ffc2     00 6D 00 6D 
2ffc6     00 6D 00 6D 
2ffca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffce     00 6D 00 6D 
2ffd2     00 6D 00 6D 
2ffd6     00 6D 00 6D 
2ffda     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2ffde     00 6C 00 6C 
2ffe2     00 6C 00 6C 
2ffe6     00 6C 00 6C 
2ffea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ffee     00 6C 00 6C 
2fff2     00 6C 00 6C 
2fff6     00 6C 00 6C 
2fffa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fffe     00 6C 00 6C 
30002     00 6C 00 6C 
30006     00 6C 00 6C 
3000a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3000e     00 6C 00 6C 
30012     00 6C 00 6C 
30016     00 6C 00 6C 
3001a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3001e     00 6C 00 6C 
30022     00 6C 00 6C 
30026     00 6C 00 6C 
3002a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3002e     00 6C 00 6C 
30032     00 6C 00 6C 
30036     00 6C 00 6C 
3003a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3003e     00 6C 00 6C 
30042     00 6C 00 6C 
30046     00 6C 00 6C 
3004a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3004e     00 6C 00 6C 
30052     00 6C 00 6C 
30056     00 6C 00 6C 
3005a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3005e     00 6C 00 6C 
30062     00 6C 00 6C 
30066     00 6C 00 6C 
3006a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3006e     00 6C 00 6C 
30072     00 6C 00 6C 
30076     00 6C 00 6C 
3007a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3007e     00 6C 00 6C 
30082     00 6C 00 6C 
30086     00 6C 00 6C 
3008a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3008e     00 6C 00 6B 
30092     00 6B 00 6B 
30096     00 6B 00 6B 
3009a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3009e     00 6B 00 6B 
300a2     00 6B 00 6B 
300a6     00 6B 00 6B 
300aa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
300ae     00 6B 00 6B 
300b2     00 6B 00 6B 
300b6     00 6B 00 6B 
300ba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
300be     00 6B 00 6B 
300c2     00 6B 00 6B 
300c6     00 6B 00 6B 
300ca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
300ce     00 6B 00 6B 
300d2     00 6B 00 6B 
300d6     00 6B 00 6B 
300da     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
300de     00 6B 00 6B 
300e2     00 6B 00 6B 
300e6     00 6B 00 6B 
300ea     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
300ee     00 6B 00 6B 
300f2     00 6B 00 6B 
300f6     00 6B 00 6B 
300fa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
300fe     00 6B 00 6B 
30102     00 6B 00 6B 
30106     00 6B 00 6B 
3010a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3010e     00 6B 00 6B 
30112     00 6B 00 6B 
30116     00 6B 00 6B 
3011a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3011e     00 6B 00 6B 
30122     00 6B 00 6B 
30126     00 6A 00 9D 
3012a     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3012e     00 9E 00 9E 
30132     00 9E 00 9E 
30136     00 9E 00 9E 
3013a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3013e     00 9E 00 9E 
30142     00 9E 00 9E 
30146     00 9E 00 9E 
3014a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3014e     00 9E 00 9E 
30152     00 9E 00 9E 
30156     00 9E 00 9E 
3015a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3015e     00 9E 00 9E 
30162     00 9E 00 9E 
30166     00 9E 00 9E 
3016a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3016e     00 9E 00 9E 
30172     00 9E 00 9E 
30176     00 9E 00 9E 
3017a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3017e     00 9E 00 9E 
30182     00 9E 00 9E 
30186     00 9E 00 9E 
3018a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3018e     00 9E 00 9E 
30192     00 9E 00 9E 
30196     00 9E 00 9E 
3019a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3019e     00 9E 00 9E 
301a2     00 9E 00 9E 
301a6     00 9E 00 9E 
301aa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
301ae     00 9E 00 9E 
301b2     00 9E 00 9E 
301b6     00 9E 00 9E 
301ba     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
301be     00 9F 00 9F 
301c2     00 9F 00 9F 
301c6     00 9F 00 9F 
301ca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
301ce     00 9F 00 9F 
301d2     00 9F 00 9F 
301d6     00 9F 00 9F 
301da     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
301de     00 9F 00 9F 
301e2     00 9F 00 9F 
301e6     00 9F 00 9F 
301ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
301ee     00 9F 00 9F 
301f2     00 9F 00 9F 
301f6     00 9F 00 9F 
301fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
301fe     00 9F 00 9F 
30202     00 9F 00 9F 
30206     00 9F 00 9F 
3020a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3020e     00 9F 00 9F 
30212     00 9F 00 9F 
30216     00 9F 00 9F 
3021a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3021e     00 9F 00 9F 
30222     00 9F 00 9F 
30226     00 9F 00 9F 
3022a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3022e     00 9F 00 9F 
30232     00 9F 00 9F 
30236     00 9F 00 9F 
3023a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3023e     00 9F 00 9F 
30242     00 9F 00 9F 
30246     00 9F 00 9F 
3024a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3024e     00 9F 00 9F 
30252     00 9F 00 9F 
30256     00 9F 00 9F 
3025a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3025e     00 9F 00 9F 
30262     00 9F 00 9F 
30266     00 9F 00 9F 
3026a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3026e     00 9F 00 9F 
30272     00 9F 00 9F 
30276     00 9F 00 9F 
3027a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3027e     00 9F 00 9F 
30282     00 9F 00 A0 
30286     00 A0 00 A0 
3028a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3028e     00 A0 00 A0 
30292     00 A0 00 A0 
30296     00 A0 00 A0 
3029a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3029e     00 A0 00 A0 
302a2     00 A0 00 A0 
302a6     00 A0 00 A0 
302aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
302ae     00 A0 00 A0 
302b2     00 A0 00 A0 
302b6     00 A0 00 A0 
302ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
302be     00 A0 00 A0 
302c2     00 A0 00 A0 
302c6     00 A0 00 A0 
302ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
302ce     00 A0 00 A0 
302d2     00 A0 00 A0 
302d6     00 A0 00 A0 
302da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
302de     00 A0 00 A0 
302e2     00 A0 00 A0 
302e6     00 A0 00 A0 
302ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
302ee     00 A0 00 A0 
302f2     00 A0 00 A0 
302f6     00 A0 00 A0 
302fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
302fe     00 A0 00 A0 
30302     00 A0 00 A0 
30306     00 A0 00 A0 
3030a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3030e     00 A0 00 A0 
30312     00 A0 00 A0 
30316     00 A0 00 A0 
3031a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3031e     00 A0 00 A0 
30322     00 A0 00 A0 
30326     00 A0 00 A0 
3032a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3032e     00 A0 00 A0 
30332     00 A0 00 A0 
30336     00 A0 00 A0 
3033a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3033e     00 A0 00 A0 
30342     00 A0 00 A0 
30346     00 A0 00 A0 
3034a     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3034e     00 6D 00 6D 
30352     00 6D 00 6D 
30356     00 6D 00 6D 
3035a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3035e     00 6D 00 6D 
30362     00 6D 00 6D 
30366     00 6D 00 6D 
3036a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3036e     00 6D 00 6D 
30372     00 6D 00 6D 
30376     00 6D 00 6D 
3037a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3037e     00 6D 00 6D 
30382     00 6D 00 6D 
30386     00 6D 00 6D 
3038a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3038e     00 6D 00 6D 
30392     00 6D 00 6D 
30396     00 6D 00 6D 
3039a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3039e     00 6D 00 6D 
303a2     00 6D 00 6D 
303a6     00 6D 00 6D 
303aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
303ae     00 6D 00 6D 
303b2     00 6D 00 6D 
303b6     00 6D 00 6D 
303ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
303be     00 6D 00 6D 
303c2     00 6D 00 6D 
303c6     00 6D 00 6D 
303ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
303ce     00 6D 00 6D 
303d2     00 A0 00 A0 
303d6     00 A0 00 A0 
303da     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
303de     00 A0 00 A0 
303e2     00 A0 00 A0 
303e6     00 A0 00 A0 
303ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
303ee     00 A0 00 A0 
303f2     00 A0 00 A0 
303f6     00 A0 00 A0 
303fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
303fe     00 A0 00 A0 
30402     00 A0 00 A0 
30406     00 A0 00 A0 
3040a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3040e     00 A0 00 A0 
30412     00 A0 00 A0 
30416     00 A0 00 A0 
3041a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3041e     00 A0 00 A0 
30422     00 A0 00 A0 
30426     00 A0 00 A0 
3042a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3042e     00 A0 00 A0 
30432     00 A0 00 A0 
30436     00 A0 00 A0 
3043a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3043e     00 A0 00 A0 
30442     00 A0 00 A0 
30446     00 A0 00 A0 
3044a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3044e     00 A0 00 A0 
30452     00 A0 00 A0 
30456     00 A0 00 A0 
3045a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3045e     00 6D 00 6D 
30462     00 6D 00 6D 
30466     00 6D 00 6D 
3046a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3046e     00 6D 00 6D 
30472     00 6D 00 6D 
30476     00 6D 00 6D 
3047a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3047e     00 6D 00 6D 
30482     00 6D 00 6D 
30486     00 6D 00 6D 
3048a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3048e     00 6D 00 6D 
30492     00 6D 00 6D 
30496     00 6D 00 6D 
3049a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3049e     00 6D 00 6D 
304a2     00 6D 00 6D 
304a6     00 6D 00 6D 
304aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
304ae     00 6D 00 6D 
304b2     00 6D 00 6D 
304b6     00 6D 00 6D 
304ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
304be     00 6D 00 6D 
304c2     00 6D 00 6D 
304c6     00 6D 00 6D 
304ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
304ce     00 6D 00 6D 
304d2     00 6D 00 6D 
304d6     00 6D 00 6D 
304da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
304de     00 6D 00 6D 
304e2     00 6C 00 A0 
304e6     00 9F 00 A0 
304ea     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
304ee     00 A0 00 A0 
304f2     00 A0 00 A0 
304f6     00 A0 00 A0 
304fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
304fe     00 A0 00 A0 
30502     00 A0 00 A0 
30506     00 A0 00 A0 
3050a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3050e     00 A0 00 A0 
30512     00 A0 00 A0 
30516     00 A0 00 A0 
3051a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3051e     00 A0 00 A0 
30522     00 A0 00 A0 
30526     00 A0 00 A0 
3052a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3052e     00 A0 00 A0 
30532     00 A0 00 A0 
30536     00 A0 00 A0 
3053a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3053e     00 A0 00 A0 
30542     00 A0 00 A0 
30546     00 A0 00 A0 
3054a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3054e     00 A0 00 A0 
30552     00 A0 00 A0 
30556     00 A0 00 A0 
3055a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3055e     00 A0 00 A0 
30562     00 A0 00 A0 
30566     00 A0 00 A0 
3056a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3056e     00 A0 00 A0 
30572     00 A0 00 A0 
30576     00 A0 00 A0 
3057a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3057e     00 A0 00 A0 
30582     00 A0 00 A0 
30586     00 A0 00 A0 
3058a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3058e     00 A0 00 A0 
30592     00 A0 00 A0 
30596     00 A0 00 A0 
3059a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3059e     00 A1 00 A1 
305a2     00 A1 00 A1 
305a6     00 A1 00 A1 
305aa     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
305ae     00 A1 00 A1 
305b2     00 A1 00 A1 
305b6     00 A1 00 A1 
305ba     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
305be     00 A1 00 A1 
305c2     00 A1 00 A1 
305c6     00 A1 00 A1 
305ca     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
305ce     00 A1 00 A1 
305d2     00 A1 00 A1 
305d6     00 A1 00 A1 
305da     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
305de     00 A1 00 A1 
305e2     00 A1 00 A1 
305e6     00 A1 00 A1 
305ea     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
305ee     00 A1 00 A1 
305f2     00 A1 00 A1 
305f6     00 6E 00 6E 
305fa     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
305fe     00 6E 00 6E 
30602     00 6E 00 6E 
30606     00 6E 00 6E 
3060a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3060e     00 6E 00 6E 
30612     00 6E 00 6E 
30616     00 6E 00 6E 
3061a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3061e     00 6E 00 6E 
30622     00 6E 00 6E 
30626     00 6E 00 6E 
3062a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3062e     00 6E 00 6D 
30632     00 6D 00 6D 
30636     00 6D 00 6D 
3063a     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3063e     00 6D 00 6D 
30642     00 6D 00 6D 
30646     00 6D 00 6D 
3064a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3064e     00 6D 00 6D 
30652     00 6D 00 6D 
30656     00 6D 00 6D 
3065a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3065e     00 6D 00 6D 
30662     00 6D 00 6D 
30666     00 6D 00 6D 
3066a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3066e     00 6D 00 6D 
30672     00 6D 00 6D 
30676     00 6D 00 6D 
3067a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3067e     00 6D 00 6D 
30682     00 6D 00 6D 
30686     00 6D 00 6D 
3068a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3068e     00 6D 00 6D 
30692     00 6D 00 6D 
30696     00 6D 00 6D 
3069a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3069e     00 6D 00 6D 
306a2     00 6D 00 6D 
306a6     00 6D 00 6D 
306aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
306ae     00 6D 00 6D 
306b2     00 6D 00 6D 
306b6     00 6D 00 6D 
306ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
306be     00 6D 00 6D 
306c2     00 6D 00 6D 
306c6     00 6D 00 6D 
306ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
306ce     00 6D 00 6D 
306d2     00 6D 00 6D 
306d6     00 6D 00 6D 
306da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
306de     00 6D 00 6D 
306e2     00 6C 00 6C 
306e6     00 6C 00 6C 
306ea     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
306ee     00 6C 00 6C 
306f2     00 6C 00 6C 
306f6     00 6C 00 6C 
306fa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
306fe     00 6C 00 6C 
30702     00 6C 00 6C 
30706     00 9D 00 9F 
3070a     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3070e     00 9F 00 9F 
30712     00 9F 00 9F 
30716     00 A0 00 A0 
3071a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3071e     00 A0 00 A0 
30722     00 A0 00 A0 
30726     00 A0 00 A0 
3072a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3072e     00 A0 00 A0 
30732     00 A0 00 A0 
30736     00 A0 00 A0 
3073a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3073e     00 A0 00 A0 
30742     00 A0 00 A0 
30746     00 A0 00 A0 
3074a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3074e     00 A0 00 A0 
30752     00 A0 00 A0 
30756     00 A0 00 A0 
3075a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3075e     00 A0 00 A0 
30762     00 A0 00 A0 
30766     00 A0 00 A0 
3076a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3076e     00 A0 00 A0 
30772     00 A0 00 A0 
30776     00 A0 00 A0 
3077a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3077e     00 A0 00 A0 
30782     00 A0 00 A0 
30786     00 A0 00 A0 
3078a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3078e                 | 
3078e     00 00       |              	org
30790 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
30794 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
30798 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3079c 003             | 
3079c 003 00 30 04 F6 |                 mov     psramaddr,#0
307a0 004             | 
307a0 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
307a4 005 20 00 00 FF 
307a8 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
307ac 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
307b0 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
307b4 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
307b8 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
307bc 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
307c0 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
307c4 00d             | 
307c4 00d 20 00 00 FF 
307c8 00e 00 30 04 F1 |                 add 	psramaddr,##16384
307cc 00f E0 03 00 FF 
307d0 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
307d4 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
307d8 012             | 
307d8 012             |                 
307d8 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
307dc 013             |     
307dc 013 01 2C 60 FD |                 cogid 	t11				' get id
307e0 014 00 00 EC FC |                 coginit #0,#0				' start the new program
307e4 015 03 2C 60 FD |                 cogstop t11				' stop the loader
307e8 016             | 
307e8 016 00 00 00 00 | t11 		long 	0
307ec 017 00 FF 07 00 | mailbox 	long 	$7FF00
307f0 018 00 00 00 00 | psramaddr 	long 	0
307f4 019 00 00 00 00 | pslockval	long 	0
307f8 01a 00 00 00 00 | cmd             long    0
307fc 01b 00 00 00 00 | buf1            long    0
30800 01c 00 40 00 00 | buf2            long    16384
30804 01d 08 08 03 00 | 	long	@@@_dat_ + 12624
30808 01e 50 32 20 52 
3080c 01f 65 74 72 6F 
30810 020 6D 61 63 68 
30814 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
30818 022 42 41 53 49 
3081c 023 43 20 76 65 
30820 024 72 73 69 6F 
30824 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
30828 026 32 38 00 00 | 	byte	$32, $38, $00, $00
3082c 027             | 	alignl
3082c 027             | _hg010b_spin2_dat_
3082c 027             | 
3082c 027 00 00 00 00 
30830 028 00 00 00 00 
30834 029 00 00 00 00 
30838 02a 00 00 00 00 
3083c 02b 00 00 00    | vga_font       file "vgafont.def"
3083f 02b 7E 81 A5 81 
30843 02c 81 BD 99 81 
30847 02d 81 7E 00 00 
3084b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3084f 02f 7E FF DB FF 
30853 030 FF C3 E7 FF 
30857 031 FF 7E 00 00 
3085b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3085f 033 00 36 7F 7F 
30863 034 7F 7F 3E 1C 
30867 035 08 00 00 00 
3086b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3086f 037 00 08 1C 3E 
30873 038 7F 3E 1C 08 
30877 039 00 00 00 00 
3087b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3087f 03b 18 3C 3C E7 
30883 03c E7 E7 18 18 
30887 03d 3C 00 00 00 
3088b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3088f 03f 18 3C 7E FF 
30893 040 FF 7E 18 18 
30897 041 3C 00 00 00 
3089b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3089f 043 00 00 00 18 
308a3 044 3C 3C 18 00 
308a7 045 00 00 00 00 
308ab 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
308af 047 FF FF FF E7 
308b3 048 C3 C3 E7 FF 
308b7 049 FF FF FF FF 
308bb 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
308bf 04b 00 00 3C 66 
308c3 04c 42 42 66 3C 
308c7 04d 00 00 00 00 
308cb 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
308cf 04f FF FF C3 99 
308d3 050 BD BD 99 C3 
308d7 051 FF FF FF FF 
308db 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
308df 053 78 70 58 4C 
308e3 054 1E 33 33 33 
308e7 055 33 1E 00 00 
308eb 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
308ef 057 3C 66 66 66 
308f3 058 66 3C 18 7E 
308f7 059 18 18 00 00 
308fb 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
308ff 05b FC CC FC 0C 
30903 05c 0C 0C 0C 0E 
30907 05d 0F 07 00 00 
3090b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3090f 05f FE C6 FE C6 
30913 060 C6 C6 C6 E6 
30917 061 E7 67 03 00 
3091b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3091f 063 18 18 DB 3C 
30923 064 E7 3C DB 18 
30927 065 18 00 00 00 
3092b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3092f 067 03 07 0F 1F 
30933 068 7F 1F 0F 07 
30937 069 03 01 00 00 
3093b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3093f 06b 60 70 78 7C 
30943 06c 7F 7C 78 70 
30947 06d 60 40 00 00 
3094b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3094f 06f 18 3C 7E 18 
30953 070 18 18 7E 3C 
30957 071 18 00 00 00 
3095b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3095f 073 66 66 66 66 
30963 074 66 66 66    | 	byte	$66[7]
30966 075 00 66 66 00 
3096a 076 00 00 00 00 
3096e 077 00 FE DB DB 
30972 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
30976 079 D8 D8 D8 00 
3097a 07a 00 00 00 3E 
3097e 07b 63 06 1C 36 
30982 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
30986 07d 30 63 3E 00 
3098a 07e 00 00 00 00 
3098e 07f 00 00 00 00 
30992 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
30996 081 7F 7F 7F 00 
3099a 082 00 00 00 00 
3099e 083 00 18 3C 7E 
309a2 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
309a6 085 3C 18 7E 00 
309aa 086 00 00 00 00 
309ae 087 00 18 3C 7E 
309b2 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
309b6 089 18 18 18 00 
309ba 08a 00 00 00 00 
309be 08b 00 18 18 18 
309c2 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
309c6 08d 7E 3C 18 00 
309ca 08e 00 00 00 00 
309ce 08f 00 00 00 18 
309d2 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
309d6 091 00 00 00 00 
309da 092 00 00 00 00 
309de 093 00 00 00    | 	byte	$00[11]
309e1 094 0C 06 7F 06 
309e5 095 0C 00 00 00 
309e9 096 00 00 00 00 
309ed 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
309f1 098 00 03 03 03 
309f5 099 7F 00 00 00 
309f9 09a 00 00 00 00 
309fd 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a01 09c 14 36 7F 36 
30a05 09d 14 00 00 00 
30a09 09e 00 00 00 00 
30a0d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
30a11 0a0 1C 1C 3E 3E 
30a15 0a1 7F 7F 00 00 
30a19 0a2 00 00 00 00 
30a1d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
30a21 0a4 7F 3E 3E 1C 
30a25 0a5 1C 08 00 00 
30a29 0a6 00 00 00 00 
30a2d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a31 0a8 00 00 00 00 
30a35 0a9 00 00 00 00 
30a39 0aa 00 00 00 00 
30a3d 0ab 00 00       | 	byte	$00[14]
30a3f 0ab 18 3C 3C 3C 
30a43 0ac 18 18 18 00 
30a47 0ad 18 18 00 00 
30a4b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
30a4f 0af 66 24 00 00 
30a53 0b0 00 00 00 00 
30a57 0b1 00 00 00 00 
30a5b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a5f 0b3 00 36 36 7F 
30a63 0b4 36 36 36 7F 
30a67 0b5 36 36 00 00 
30a6b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
30a6f 0b7 3E 63 43 03 
30a73 0b8 3E 60 60 61 
30a77 0b9 63 3E 18 18 
30a7b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
30a7f 0bb 00 00 43 63 
30a83 0bc 30 18 0C 06 
30a87 0bd 63 61 00 00 
30a8b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
30a8f 0bf 1C 36 36 1C 
30a93 0c0 6E 3B 33 33 
30a97 0c1 33 6E 00 00 
30a9b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
30a9f 0c3 0C 0C 0C 06 
30aa3 0c4 00 00 00 00 
30aa7 0c5 00 00 00 00 
30aab 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30aaf 0c7 30 18 0C 0C 
30ab3 0c8 0C 0C 0C 0C 
30ab7 0c9 18 30 00 00 
30abb 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
30abf 0cb 0C 18 30 30 
30ac3 0cc 30 30 30 30 
30ac7 0cd 18 0C 00 00 
30acb 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
30acf 0cf 00 00 00 66 
30ad3 0d0 3C FF 3C 66 
30ad7 0d1 00 00 00 00 
30adb 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
30adf 0d3 00 00 00 18 
30ae3 0d4 18 7E 18 18 
30ae7 0d5 00 00 00 00 
30aeb 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
30aef 0d7 00 00 00 00 
30af3 0d8 00 00 00 00 | 	byte	$00[8]
30af7 0d9 18 18 18 0C 
30afb 0da 00 00 00 00 
30aff 0db 00 00 00 00 
30b03 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
30b07 0dd 00 00 00 00 
30b0b 0de 00 00 00 00 
30b0f 0df 00 00 00 00 
30b13 0e0 00 00 00 00 | 	byte	$00[16]
30b17 0e1 18 18 00 00 
30b1b 0e2 00 00 00 00 
30b1f 0e3 00 00 40 60 
30b23 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
30b27 0e5 03 01 00 00 
30b2b 0e6 00 00 00 00 
30b2f 0e7 1C 36 63 63 
30b33 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
30b37 0e9 36 1C 00 00 
30b3b 0ea 00 00 00 00 
30b3f 0eb 18 1C 1E 18 
30b43 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
30b47 0ed 18 7E 00 00 
30b4b 0ee 00 00 00 00 
30b4f 0ef 3E 63 60 30 
30b53 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
30b57 0f1 63 7F 00 00 
30b5b 0f2 00 00 00 00 
30b5f 0f3 3E 63 60 60 
30b63 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
30b67 0f5 63 3E 00 00 
30b6b 0f6 00 00 00 00 
30b6f 0f7 30 38 3C 36 
30b73 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
30b77 0f9 30 78 00 00 
30b7b 0fa 00 00 00 00 
30b7f 0fb 7F 03 03 03 
30b83 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
30b87 0fd 63 3E 00 00 
30b8b 0fe 00 00 00 00 
30b8f 0ff 1C 06 03 03 
30b93 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
30b97 101 63 3E 00 00 
30b9b 102 00 00 00 00 
30b9f 103 7F 63 60 60 
30ba3 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
30ba7 105 0C 0C 00 00 
30bab 106 00 00 00 00 
30baf 107 3E 63 63 63 
30bb3 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
30bb7 109 63 3E 00 00 
30bbb 10a 00 00 00 00 
30bbf 10b 3E 63 63 63 
30bc3 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
30bc7 10d 30 1E 00 00 
30bcb 10e 00 00 00 00 
30bcf 10f 00 00 00 18 
30bd3 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
30bd7 111 18 18 00 00 
30bdb 112 00 00 00 00 
30bdf 113 00 00 00 18 
30be3 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
30be7 115 18 18 0C 00 
30beb 116 00 00 00 00 
30bef 117 00 60 30 18 
30bf3 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
30bf7 119 30 60 00 00 
30bfb 11a 00 00 00 00 
30bff 11b 00 00 00 7E 
30c03 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
30c07 11d 00 00 00 00 
30c0b 11e 00 00 00 00 
30c0f 11f 00          | 	byte	$00[9]
30c10 120 06 0C 18 30 
30c14 121 60 30 18 0C 
30c18 122 06 00 00 00 
30c1c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
30c20 124 63 63 30 18 
30c24 125 18 18 00 18 
30c28 126 18 00 00 00 
30c2c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
30c30 128 3E 63 63 7B 
30c34 129 7B 7B 3B 03 
30c38 12a 3E 00 00 00 
30c3c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
30c40 12c 1C 36 63 63 
30c44 12d 7F 63 63 63 
30c48 12e 63 00 00 00 
30c4c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
30c50 130 66 66 66 3E 
30c54 131 66 66 66 66 
30c58 132 3F 00 00 00 
30c5c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
30c60 134 66 43 03 03 
30c64 135 03 03 43 66 
30c68 136 3C 00 00 00 
30c6c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
30c70 138 36 66 66 66 
30c74 139 66 66 66 36 
30c78 13a 1F 00 00 00 
30c7c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
30c80 13c 66 46 16 1E 
30c84 13d 16 06 46 66 
30c88 13e 7F 00 00 00 
30c8c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
30c90 140 66 46 16 1E 
30c94 141 16 06 06 06 
30c98 142 0F 00 00 00 
30c9c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
30ca0 144 66 43 03 03 
30ca4 145 7B 63 63 66 
30ca8 146 5C 00 00 00 
30cac 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
30cb0 148 63 63 63 7F 
30cb4 149 63 63 63 63 
30cb8 14a 63 00 00 00 
30cbc 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
30cc0 14c 18 18 18 18 
30cc4 14d 18 18 18 18 | 	byte	$18[8]
30cc8 14e 3C 00 00 00 
30ccc 14f 00 00 00 78 
30cd0 150 30 30 30 30 
30cd4 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
30cd8 152 1E 00 00 00 
30cdc 153 00 00 00 67 
30ce0 154 66 66 36 1E 
30ce4 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
30ce8 156 67 00 00 00 
30cec 157 00 00 00 0F 
30cf0 158 06 06 06 06 
30cf4 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
30cf8 15a 7F 00 00 00 
30cfc 15b 00 00 00 63 
30d00 15c 77 7F 7F 6B 
30d04 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
30d08 15e 63 00 00 00 
30d0c 15f 00 00 00 63 
30d10 160 67 6F 7F 7B 
30d14 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
30d18 162 63 00 00 00 
30d1c 163 00 00 00 3E 
30d20 164 63 63 63 63 
30d24 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
30d28 166 3E 00 00 00 
30d2c 167 00 00 00 3F 
30d30 168 66 66 66 3E 
30d34 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
30d38 16a 0F 00 00 00 
30d3c 16b 00 00 00 3E 
30d40 16c 63 63 63 63 
30d44 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
30d48 16e 3E 30 70 00 
30d4c 16f 00 00 00 3F 
30d50 170 66 66 66 3E 
30d54 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
30d58 172 67 00 00 00 
30d5c 173 00 00 00 3E 
30d60 174 63 63 06 1C 
30d64 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
30d68 176 3E 00 00 00 
30d6c 177 00 00 00 7E 
30d70 178 7E 5A 18 18 
30d74 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
30d78 17a 3C 00 00 00 
30d7c 17b 00 00 00 63 
30d80 17c 63 63 63 63 
30d84 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
30d88 17e 3E 00 00 00 
30d8c 17f 00 00 00 63 
30d90 180 63 63 63 63 
30d94 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
30d98 182 08 00 00 00 
30d9c 183 00 00 00 63 
30da0 184 63 63 63 6B 
30da4 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
30da8 186 36 00 00 00 
30dac 187 00 00 00 63 
30db0 188 63 36 3E 1C 
30db4 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
30db8 18a 63 00 00 00 
30dbc 18b 00 00 00 66 
30dc0 18c 66 66 66 3C 
30dc4 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
30dc8 18e 3C 00 00 00 
30dcc 18f 00 00 00 7F 
30dd0 190 63 61 30 18 
30dd4 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
30dd8 192 7F 00 00 00 
30ddc 193 00 00 00 3C 
30de0 194 0C 0C 0C 0C 
30de4 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
30de8 196 3C 00 00 00 
30dec 197 00 00 00 00 
30df0 198 01 03 07 0E 
30df4 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
30df8 19a 40 00 00 00 
30dfc 19b 00 00 00 3C 
30e00 19c 30 30 30 30 
30e04 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
30e08 19e 3C 00 00 00 
30e0c 19f 1C 36 00 00 
30e10 1a0 00 00 00 00 
30e14 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e18 1a2 00 00 00 00 
30e1c 1a3 00 00 00 00 
30e20 1a4 00 00 00 00 
30e24 1a5 00 00 00 00 
30e28 1a6 00          | 	byte	$00[17]
30e29 1a6 FF 00 00 0C 
30e2d 1a7 18 00 00 00 
30e31 1a8 00 00 00 00 
30e35 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e39 1aa 00 00 00 00 
30e3d 1ab 00 00 00 00 
30e41 1ac 00          | 	byte	$00[9]
30e42 1ac 1E 30 3E 33 
30e46 1ad 33 33 6E 00 
30e4a 1ae 00 00 00 00 
30e4e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
30e52 1b0 1E 36 66 66 
30e56 1b1 66 66 3E 00 
30e5a 1b2 00 00 00 00 
30e5e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e62 1b4 3E 63 03 03 
30e66 1b5 03 63 3E 00 
30e6a 1b6 00 00 00 00 
30e6e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
30e72 1b8 3C 36 33 33 
30e76 1b9 33 33 6E 00 
30e7a 1ba 00 00 00 00 
30e7e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e82 1bc 3E 63 7F 03 
30e86 1bd 03 63 3E 00 
30e8a 1be 00 00 00 00 
30e8e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
30e92 1c0 0C 1E 0C 0C 
30e96 1c1 0C 0C 1E 00 
30e9a 1c2 00 00 00 00 
30e9e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
30ea2 1c4 6E 33 33 33 
30ea6 1c5 33 33 3E 30 
30eaa 1c6 33 1E 00 00 
30eae 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
30eb2 1c8 36 6E 66 66 
30eb6 1c9 66 66 67 00 
30eba 1ca 00 00 00 00 
30ebe 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
30ec2 1cc 1C 18 18 18 
30ec6 1cd 18 18 3C 00 
30eca 1ce 00 00 00 00 
30ece 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
30ed2 1d0 70 60 60 60 
30ed6 1d1 60 60 60 66 
30eda 1d2 66 3C 00 00 
30ede 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
30ee2 1d4 66 36 1E 1E 
30ee6 1d5 36 66 67 00 
30eea 1d6 00 00 00 00 
30eee 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
30ef2 1d8 18 18 18 18 
30ef6 1d9 18 18       | 	byte	$18[6]
30ef8 1da 3C 00 00 00 
30efc 1db 00 00 00 00 
30f00 1dc 00 00 37 7F 
30f04 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
30f08 1de 63 00 00 00 
30f0c 1df 00 00 00 00 
30f10 1e0 00 00 3B 66 
30f14 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
30f18 1e2 66 00 00 00 
30f1c 1e3 00 00 00 00 
30f20 1e4 00 00 3E 63 
30f24 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
30f28 1e6 3E 00 00 00 
30f2c 1e7 00 00 00 00 
30f30 1e8 00 00 3B 66 
30f34 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
30f38 1ea 3E 06 06 0F 
30f3c 1eb 00 00 00 00 
30f40 1ec 00 00 6E 33 
30f44 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
30f48 1ee 3E 30 30 78 
30f4c 1ef 00 00 00 00 
30f50 1f0 00 00 3B 6E 
30f54 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
30f58 1f2 0F 00 00 00 
30f5c 1f3 00 00 00 00 
30f60 1f4 00 00 3E 63 
30f64 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
30f68 1f6 3E 00 00 00 
30f6c 1f7 00 00 00 08 
30f70 1f8 0C 0C 3F 0C 
30f74 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
30f78 1fa 38 00 00 00 
30f7c 1fb 00 00 00 00 
30f80 1fc 00 00 33 33 
30f84 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
30f88 1fe 6E 00 00 00 
30f8c 1ff 00 00 00 00 
30f90 200 00 00 63 63 
30f94 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
30f98 202 1C 00 00 00 
30f9c 203 00 00 00 00 
30fa0 204 00 00 63 63 
30fa4 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
30fa8 206 36 00 00 00 
30fac 207 00 00 00 00 
30fb0 208 00 00 63 36 
30fb4 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
30fb8 20a 63 00 00 00 
30fbc 20b 00 00 00 00 
30fc0 20c 00 00 63 63 
30fc4 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
30fc8 20e 7E 60 30 1F 
30fcc 20f 00 00 00 00 
30fd0 210 00 00 7F 33 
30fd4 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
30fd8 212 7F 00 00 00 
30fdc 213 00 00 00 70 
30fe0 214 18 18 18 0E 
30fe4 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
30fe8 216 70 00 00 00 
30fec 217 00 00 00 18 
30ff0 218 18 18 18 18 
30ff4 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
30ff8 21a 18 00 00 00 
30ffc 21b 00 00 00 0E 
31000 21c 18 18 18 70 
31004 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
31008 21e 0E 00 00 00 
3100c 21f 6E 3B 00 00 
31010 220 00 00 00 00 
31014 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31018 222 00 00 00 00 
3101c 223 00 00 00 00 
31020 224 00 00       | 	byte	$00[10]
31022 224 08 1C 36 63 
31026 225 63 63 7F 00 
3102a 226 00 00 00 00 
3102e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
31032 228 03 03 03 03 
31036 229 43 66 3C 18 
3103a 22a 30 1E 00 00 
3103e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
31042 22c 33 33 33 33 
31046 22d 33 33       | 	byte	$33[6]
31048 22e 6E 00 00 00 
3104c 22f 00 00 60 30 
31050 230 18 00 3E 63 
31054 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
31058 232 3E 00 00 00 
3105c 233 00 00 08 1C 
31060 234 36 00 1E 30 
31064 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
31068 236 6E 00 00 00 
3106c 237 00 00 00 00 
31070 238 33 00 1E 30 
31074 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
31078 23a 6E 00 00 00 
3107c 23b 00 00 1C 36 
31080 23c 1C 00 33 33 
31084 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
31088 23e 6E 00 00 00 
3108c 23f 00 00 60 30 
31090 240 18 00 3E 63 
31094 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
31098 242 3E 00 00 00 
3109c 243 00 00 00 00 
310a0 244 00 00 3E 63 
310a4 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
310a8 246 3E 18 30 1E 
310ac 247 00 00 00 1C 
310b0 248 58 78 38 18 
310b4 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
310b8 24a 3C 00 00 00 
310bc 24b 00 00 00 00 
310c0 24c 63 00 3E 63 
310c4 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
310c8 24e 3E 00 00 00 
310cc 24f 66 33 00 3E 
310d0 250 63 63 63 63 
310d4 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
310d8 252 3E 00 00 00 
310dc 253 00 00 CC 66 
310e0 254 33 00 3E 63 
310e4 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
310e8 256 3E 00 00 00 
310ec 257 00 00 18 3C 
310f0 258 66 00 1C 18 
310f4 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
310f8 25a 3C 00 00 00 
310fc 25b 30 18 00 7F 
31100 25c 63 61 30 18 
31104 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
31108 25e 7F 00 00 00 
3110c 25f 00 63 00 08 
31110 260 1C 36 63 63 
31114 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
31118 262 63 00 00 00 
3111c 263 30 18 00 3C 
31120 264 66 43 03 03 
31124 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
31128 266 3C 00 00 00 
3112c 267 30 18 00 7F 
31130 268 66 46 16 1E 
31134 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
31138 26a 7F 00 00 00 
3113c 26b 0C 06 00 0F 
31140 26c 06 06 06 06 
31144 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
31148 26e 7F 00 00 00 
3114c 26f 30 18 00 1C 
31150 270 18 18 18 18 
31154 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
31158 272 3C 00 00 00 
3115c 273 00 00 08 1C 
31160 274 36 00 3E 63 
31164 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
31168 276 3E 00 00 00 
3116c 277 00 00 00 00 
31170 278 63 00 3E 63 
31174 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
31178 27a 3E 00 00 00 
3117c 27b 00 00 00 6F 
31180 27c 46 26 06 06 
31184 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
31188 27e 7F 00 00 00 
3118c 27f 00 00 00 6E 
31190 280 4C 2C 0C 0C 
31194 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
31198 282 1E 00 00 00 
3119c 283 30 18 00 3E 
311a0 284 63 63 06 1C 
311a4 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
311a8 286 3E 00 00 00 
311ac 287 00 00 60 30 
311b0 288 18 00 3E 63 
311b4 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
311b8 28a 3E 00 00 00 
311bc 28b 00 63 00 3E 
311c0 28c 63 63 63 63 
311c4 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
311c8 28e 3E 00 00 00 
311cc 28f 00 63 00 63 
311d0 290 63 63 63 63 
311d4 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
311d8 292 3E 00 00 00 
311dc 293 6C 38 00 7E 
311e0 294 7E 5A 18 18 
311e4 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
311e8 296 3C 00 00 00 
311ec 297 00 00 60 48 
311f0 298 2C 0C 3F 0C 
311f4 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
311f8 29a 38 00 00 00 
311fc 29b 00 00 00 0F 
31200 29c 26 36 1E 0E 
31204 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
31208 29e 7F 00 00 00 
3120c 29f 00 00 00 00 
31210 2a0 00 63 36 1C 
31214 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
31218 2a2 00 00 00 00 
3121c 2a3 00 00       | 	byte	$00[6]
3121e 2a3 36 1C 08 00 
31222 2a4 3E 63 03 03 
31226 2a5 03 63 3E 00 
3122a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3122e 2a7 30 18 0C 00 
31232 2a8 1E 30 3E 33 
31236 2a9 33 33 6E 00 
3123a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3123e 2ab 60 30 18 00 
31242 2ac 1C 18 18 18 
31246 2ad 18 18 3C 00 
3124a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3124e 2af 60 30 18 00 
31252 2b0 3E 63 63 63 
31256 2b1 63 63 3E 00 
3125a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3125e 2b3 30 18 0C 00 
31262 2b4 33 33 33 33 
31266 2b5 33 33 6E 00 
3126a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3126e 2b7 00 08 1C 36 
31272 2b8 63 63 7F 63 
31276 2b9 63 63 63 18 
3127a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3127e 2bb 00 00 00 00 
31282 2bc 1E 30 3E 33 
31286 2bd 33 33 6E 18 
3128a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3128e 2bf 00 7F 63 61 
31292 2c0 30 18 0C 06 
31296 2c1 43 63 7F 00 
3129a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3129e 2c3 36 1C 08 00 
312a2 2c4 7F 33 18 0C 
312a6 2c5 06 63 7F 00 
312aa 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
312ae 2c7 00 7F 66 46 
312b2 2c8 16 1E 16 06 
312b6 2c9 46 66 7F 18 
312ba 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
312be 2cb 00 00 00 00 
312c2 2cc 3E 63 7F 03 
312c6 2cd 03 63 3E 18 
312ca 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
312ce 2cf 00 3C 66 03 
312d2 2d0 1F 03 0F 03 
312d6 2d1 03 66 3C 00 
312da 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
312de 2d3 60 30 18 00 
312e2 2d4 7F 33 18 0C 
312e6 2d5 06 63 7F 00 
312ea 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
312ee 2d7 00 3C 66 43 
312f2 2d8 03 03 03 03 
312f6 2d9 43 66 3C 00 
312fa 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
312fe 2db 00 00 00 00 
31302 2dc 3E 63 06 1C 
31306 2dd 30 63 3E 18 
3130a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3130e 2df 00 00 00 00 
31312 2e0 00 00       | 	byte	$00[6]
31314 2e1 6C 36 1B 36 
31318 2e2 6C 00 00 00 
3131c 2e3 00 00 00 00 
31320 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31324 2e5 1B 36 6C 36 
31328 2e6 1B 00 00 00 
3132c 2e7 88 22 88 22 
31330 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
31334 2e9 88 22 88 22 
31338 2ea 88 22 88 22 
3133c 2eb AA 55 AA 55 
31340 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
31344 2ed AA 55 AA 55 
31348 2ee AA 55 AA 55 
3134c 2ef BB EE BB EE 
31350 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
31354 2f1 BB EE BB EE 
31358 2f2 BB EE BB EE 
3135c 2f3 18 18 18 18 
31360 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
31364 2f5 18 18 18 18 
31368 2f6 18 18 18 18 
3136c 2f7 18 18 18 18 
31370 2f8 18 18 18    | 	byte	$18[15]
31373 2f8 1F 18 18 18 
31377 2f9 18 18 18 18 
3137b 2fa 18 30 18 00 
3137f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
31383 2fc 63 7F 63 63 
31387 2fd 63 63 00 00 
3138b 2fe 00 1C 36 00 
3138f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
31393 300 63 7F 63 63 
31397 301 63 63 00 00 
3139b 302 00 36 1C 00 
3139f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
313a3 304 1E 16 06 46 
313a7 305 66 7F 00 00 
313ab 306 00 00 00 00 
313af 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
313b3 308 1C 30 60 63 
313b7 309 63 3E 18 30 
313bb 30a 1E 6C 6C 6C 
313bf 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
313c3 30c 6F 6C 6C 6C 
313c7 30d 6C 6C 6C 6C 
313cb 30e 6C 6C 6C 6C 
313cf 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
313d3 310 6C 6C 6C 6C 
313d7 311 6C 6C 6C 6C 
313db 312 6C          | 	byte	$6c[9]
313dc 313 00 00 00 00 
313e0 314 00          | 	byte	$00[5]
313e1 314 7F 60 6F 6C 
313e5 315 6C 6C 6C 6C 
313e9 316 6C 6C 6C 6C 
313ed 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
313f1 318 6F 60 7F 00 
313f5 319 00 00 00 00 
313f9 31a 00 00 00 18 
313fd 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
31401 31c 61 30 18 0C 
31405 31d 06 43 63 7F 
31409 31e 00 00 00 00 
3140d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
31411 320 00 7F 33 18 
31415 321 0C 06 63 7F 
31419 322 00 00 00 00 
3141d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
31421 324 00 00 1F 18 
31425 325 18 18 18 18 
31429 326 18 18 18 18 
3142d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
31431 328 18 18 F8 00 
31435 329 00 00 00 00 
31439 32a 00 00 00 18 
3143d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
31441 32c 18 18 FF 00 
31445 32d 00 00 00 00 
31449 32e 00 00 00 00 
3144d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31451 330 00 00 FF 18 
31455 331 18 18 18 18 
31459 332 18 18 18 18 
3145d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
31461 334 18 18 F8 18 
31465 335 18 18 18 18 
31469 336 18 18 18 00 
3146d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
31471 338 00 00 FF 00 
31475 339 00 00 00 00 
31479 33a 00 00 00 18 
3147d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
31481 33c 18 18 FF 18 
31485 33d 18 18 18 18 
31489 33e 18 18 18 63 
3148d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
31491 340 36 63 63 7F 
31495 341 63 63 63 63 
31499 342 00 00 00 00 
3149d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
314a1 344 00 1E 30 3E 
314a5 345 33 33 33 6E 
314a9 346 00 00 00 6C 
314ad 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
314b1 348 EC 0C FC 00 
314b5 349 00 00 00 00 
314b9 34a 00 00 00 00 
314bd 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
314c1 34c FC 0C EC 6C 
314c5 34d 6C 6C 6C 6C 
314c9 34e 6C 6C 6C 6C 
314cd 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
314d1 350 EF 00 FF 00 
314d5 351 00 00 00 00 
314d9 352 00 00 00 00 
314dd 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
314e1 354 FF 00 EF 6C 
314e5 355 6C 6C 6C 6C 
314e9 356 6C 6C 6C 6C 
314ed 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
314f1 358 EC 0C EC 6C 
314f5 359 6C 6C 6C 6C 
314f9 35a 6C 6C 6C 00 
314fd 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
31501 35c FF 00 FF 00 
31505 35d 00 00 00 00 
31509 35e 00 00 00 6C 
3150d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
31511 360 EF 00 EF 6C 
31515 361 6C 6C 6C 6C 
31519 362 6C 6C 6C 00 
3151d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
31521 364 63 3E 63 63 
31525 365 63 63 3E 63 
31529 366 00 00 00 00 
3152d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
31531 368 30 3C 36 33 
31535 369 33 33 33 6E 
31539 36a 00 00 00 00 
3153d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
31541 36c 66 66 6F 66 
31545 36d 66 66 36 1F 
31549 36e 00 00 00 36 
3154d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
31551 370 66 66 66 66 
31555 371 66 66       | 	byte	$66[6]
31557 371 36 1F 00 00 
3155b 372 00 00 63 00 
3155f 373 7F 66 46 16 
31563 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
31567 375 66 7F 00 00 
3156b 376 00 6C 38 00 
3156f 377 38 30 30 3C 
31573 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
31577 379 33 6E 00 00 
3157b 37a 00 36 1C 00 
3157f 37b 63 67 6F 7F 
31583 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
31587 37d 63 63 00 00 
3158b 37e 00 30 18 00 
3158f 37f 3C 18 18 18 
31593 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
31597 381 18 3C 00 00 
3159b 382 00 3C 66 00 
3159f 383 3C 18 18 18 
315a3 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
315a7 385 18 3C 00 00 
315ab 386 00 00 00 36 
315af 387 1C 08 00 3E 
315b3 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
315b7 389 63 3E 00 00 
315bb 38a 00 18 18 18 
315bf 38b 18 18 18 18 
315c3 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
315c7 38d 00 00 00 00 
315cb 38e 00 00 00 00 
315cf 38f 00 00 00 00 | 	byte	$00[12]
315d3 390 F8 18 18 18 
315d7 391 18 18 18 18 
315db 392 18 FF FF FF 
315df 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
315e3 394 FF FF FF FF 
315e7 395 FF FF FF FF 
315eb 396 FF          | 	byte	$ff[9]
315ec 397 00 00 00 00 
315f0 398 00 00 00    | 	byte	$00[7]
315f3 398 FF FF FF FF 
315f7 399 FF FF FF FF 
315fb 39a FF          | 	byte	$ff[9]
315fc 39b 00 00 00 7E 
31600 39c 7E 5A 18 18 
31604 39d 18 18 18 18 
31608 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3160c 39f 1C 36 1C 63 
31610 3a0 63 63 63 63 
31614 3a1 63 63 63 63 
31618 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3161c 3a3 FF FF FF FF 
31620 3a4 FF FF FF    | 	byte	$ff[7]
31623 3a4 00 00 00 00 
31627 3a5 00 00 00 00 
3162b 3a6 00          | 	byte	$00[9]
3162c 3a7 30 18 00 3E 
31630 3a8 63 63 63 63 
31634 3a9 63 63 63 63 
31638 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3163c 3ab 00 00 00 1E 
31640 3ac 33 33 33 1B 
31644 3ad 33 63 63 63 
31648 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3164c 3af 1C 36 00 3E 
31650 3b0 63 63 63 63 
31654 3b1 63 63 63 63 
31658 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3165c 3b3 30 18 00 63 
31660 3b4 67 6F 7F 7B 
31664 3b5 73 63 63 63 
31668 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3166c 3b7 00 00 60 30 
31670 3b8 18 00 3B 66 
31674 3b9 66 66 66 66 
31678 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3167c 3bb 00 00 36 1C 
31680 3bc 08 00 3B 66 
31684 3bd 66 66 66 66 
31688 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3168c 3bf 36 1C 00 3E 
31690 3c0 63 63 06 1C 
31694 3c1 30 60 63 63 
31698 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3169c 3c3 00 00 36 1C 
316a0 3c4 08 00 3E 63 
316a4 3c5 06 1C 30 63 
316a8 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
316ac 3c7 30 18 00 3F 
316b0 3c8 66 66 66 3E 
316b4 3c9 36 66 66 66 
316b8 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
316bc 3cb 30 18 00 63 
316c0 3cc 63 63 63 63 
316c4 3cd 63 63 63 63 
316c8 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
316cc 3cf 00 00 60 30 
316d0 3d0 18 00 3B 6E 
316d4 3d1 66 06 06 06 
316d8 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
316dc 3d3 66 33 00 63 
316e0 3d4 63 63 63 63 
316e4 3d5 63 63 63 63 
316e8 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
316ec 3d7 00 00 60 30 
316f0 3d8 18 00 63 63 
316f4 3d9 63 63 63 63 
316f8 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
316fc 3db 30 18 00 66 
31700 3dc 66 66 66 3C 
31704 3dd 18 18 18 18 
31708 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3170c 3df 00 00 00 08 
31710 3e0 0C 0C 3F 0C 
31714 3e1 0C 0C 0C 6C 
31718 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3171c 3e3 30 18 00 00 
31720 3e4 00 00 00 00 
31724 3e5 00 00 00 00 
31728 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3172c 3e7 00 00 00 00 
31730 3e8 00 00 00 00 | 	byte	$00[8]
31734 3e9 7F 00 00 00 
31738 3ea 00 00 00 00 
3173c 3eb 66 33 00 00 
31740 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
31744 3ed 00 00 00 00 
31748 3ee 00 00 00 00 
3174c 3ef 00 00 00 00 
31750 3f0 00 00 00 00 
31754 3f1 00 00 00 00 
31758 3f2 00          | 	byte	$00[21]
31759 3f2 0C 06 3C 36 
3175d 3f3 1C 00 00 00 
31761 3f4 00 00 00 00 
31765 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31769 3f6 00 00 00 63 
3176d 3f7 3E 00 00 00 
31771 3f8 00 00 00 00 
31775 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31779 3fa 00 00 00 00 
3177d 3fb 3E 63 06 1C 
31781 3fc 36 63 63 36 
31785 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
31789 3fe 00 00 00 00 
3178d 3ff 00 00 00 00 | 	byte	$00[8]
31791 400 18 00 7E 00 
31795 401 18 00 00 00 
31799 402 00 00 00 00 
3179d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
317a1 404 00 00 00 00 
317a5 405 00 00 00 00 | 	byte	$00[8]
317a9 406 18 30 1E 00 
317ad 407 00 00 1C 36 
317b1 408 36 1C 00 00 
317b5 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
317b9 40a 00 00 00 00 
317bd 40b 63 00 00 00 
317c1 40c 00 00 00 00 
317c5 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
317c9 40e 00 00 00 18 
317cd 40f 18 00 00 00 
317d1 410 00 00 00 00 
317d5 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
317d9 412 00 00 00 00 
317dd 413 00          | 	byte	$00[5]
317de 413 CC 66 33 00 
317e2 414 33 33 33 33 
317e6 415 33 33 6E 00 
317ea 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
317ee 417 00 3F 66 66 
317f2 418 66 3E 36 66 
317f6 419 66 66 6F 00 
317fa 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
317fe 41b 36 1C 08 00 
31802 41c 3B 6E 66 06 
31806 41d 06 06 0F 00 
3180a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3180e 41f 00 00 00 7E 
31812 420 7E 7E 7E 7E 
31816 421 7E 7E 00 00 
3181a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3181e 423 00 00 00 00 
31822 424 00 00 00 00 
31826 425 00 00 00 00 
3182a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3182c 427             | 'vga_font       file "vgafont.def"
3182c 427 00 00 00 00 
      ...             
3185c 433 00 00 00 00 
31860 434 00 00 00    | st_font        file "st4font.def"
31863 434 FF FF 00 00 
31867 435 00 00 00 00 
3186b 436 00 18 18 18 
3186f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
31873 438 18 18 18 18 
31877 439 18 18 18 18 
3187b 43a 18          | 	byte	$18[9]
3187c 43b 00 00 00 00 
31880 43c 00 00 00    | 	byte	$00[7]
31883 43c FF FF 18 18 
31887 43d 18 18 18 18 
3188b 43e 18 18 18 18 
3188f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
31893 440 FF FF 00 00 
31897 441 00 00 00 00 
3189b 442 00 18 18 18 
3189f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
318a3 444 1F 1F 18 18 
318a7 445 18 18 18 18 
318ab 446 18 18 18 18 
318af 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
318b3 448 F8 F8 18 18 
318b7 449 18 18 18 18 
318bb 44a 18 00 00 00 
318bf 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
318c3 44c 1F 1F 18 18 
318c7 44d 18 18 18 18 
318cb 44e 18 00 00 00 
318cf 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
318d3 450 F8 F8 18 18 
318d7 451 18 18 18 18 
318db 452 18 18 18 18 
318df 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
318e3 454 1F 1F 00 00 
318e7 455 00 00 00 00 
318eb 456 00 18 18 18 
318ef 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
318f3 458 F8 F8 00 00 
318f7 459 00 00 00 00 
318fb 45a 00 18 18 18 
318ff 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
31903 45c FF FF 18 18 
31907 45d 18 18 18 18 
3190b 45e 18 00 00 18 
3190f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
31913 460 66 7E 7E 66 
31917 461 66 66 66 30 
3191b 462 18 00 00 7E 
3191f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
31923 464 3E 06 06 06 
31927 465 06 7E 7E 18 
3192b 466 0C 30 18 3C 
3192f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
31933 468 06 06 06 66 
31937 469 66 7E 3C 00 
3193b 46a 00 30 18 66 
3193f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
31943 46c 7E 7E 76 76 
31947 46d 66 66 66 00 
3194b 46e 00 30 18 7C 
3194f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
31953 470 1C 38 70 60 
31957 471 60 7E 3E 00 
3195b 472 00 30 18 7E 
3195f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
31963 474 18 0C 0C 06 
31967 475 06 7E 7E 00 
3196b 476 00 18 18 00 
3196f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
31973 478 18 18 0C 0C 
31977 479 06 7E 7E 00 
3197b 47a 00 30 18 3C 
3197f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
31983 47c 66 66 66 66 
31987 47d 66          | 	byte	$66[5]
31988 47e 7E 3C 00 00 
3198c 47f 00 00 06 06 
31990 480 06 06 16 1E 
31994 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
31998 482 7E 7E 00 00 
3199c 483 00 00 00 00 
319a0 484 00 3C 7C 60 
319a4 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
319a8 486 7E 7C 30 18 
319ac 487 00 00 00 00 
319b0 488 00 3C 7E 66 
319b4 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
319b8 48a 7E 7C 18 0C 
319bc 48b 00 00 30 18 
319c0 48c 00 3C 3E 06 
319c4 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
319c8 48e 7E 7C 00 00 
319cc 48f 00 00 30 18 
319d0 490 00 3E 7E 66 
319d4 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
319d8 492 66 66 00 00 
319dc 493 00 00 30 18 
319e0 494 00 7C 7E 06 
319e4 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
319e8 496 7E 3E 00 00 
319ec 497 00 00 30 18 
319f0 498 00 7E 7E 30 
319f4 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
319f8 49a 7E 7E 00 00 
319fc 49b 00 00 18 18 
31a00 49c 00 7E 7E 30 
31a04 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
31a08 49e 7E 7E 00 00 
31a0c 49f 00 00 30 18 
31a10 4a0 00 3C 7E 66 
31a14 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
31a18 4a2 7E 3C 00 00 
31a1c 4a3 00 00 1C 1C 
31a20 4a4 18 18 38 3C 
31a24 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
31a28 4a6 3C 3C 00 00 
31a2c 4a7 00 00 00 00 
31a30 4a8 00 00 00 00 
31a34 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a38 4aa 00 00 00 00 
31a3c 4ab 00 00       | 	byte	$00[6]
31a3e 4ab 18 18 18 18 
31a42 4ac 18 18 18 18 | 	byte	$18[8]
31a46 4ad 00 00 18 18 
31a4a 4ae 00 00 00 00 
31a4e 4af 66 66 66 66 
31a52 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
31a56 4b1 00 00 00 00 
31a5a 4b2 00 00 00 00 
31a5e 4b3 00          | 	byte	$00[9]
31a5f 4b3 66 66 FF FF 
31a63 4b4 66 66 FF FF 
31a67 4b5 66 66 00 00 
31a6b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
31a6f 4b7 7C 7E 06 06 
31a73 4b8 3E 7C 60 60 
31a77 4b9 7E 3E 18 18 
31a7b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
31a7f 4bb 66 30 30 18 
31a83 4bc 18 0C 0C 66 
31a87 4bd 66 00 00 00 
31a8b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
31a8f 4bf 66 66 3C 1C 
31a93 4c0 1C FC FE 66 
31a97 4c1 66 FE FC 00 
31a9b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
31a9f 4c3 18 18 18 18 
31aa3 4c4 00 00 00 00 
31aa7 4c5 00 00 00 00 
31aab 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
31aaf 4c7 18 1C 0C 0C 
31ab3 4c8 0C 0C 0C 0C 
31ab7 4c9 1C 18 30 00 
31abb 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
31abf 4cb 18 38 30 30 
31ac3 4cc 30 30 30 30 
31ac7 4cd 38 18 0C 00 
31acb 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
31acf 4cf 66 66 3C 3C 
31ad3 4d0 FF FF 3C 3C 
31ad7 4d1 66 66 00 00 
31adb 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
31adf 4d3 00 18 18 18 
31ae3 4d4 7E 7E 18 18 
31ae7 4d5 18 00 00 00 
31aeb 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
31aef 4d7 00 00 00 00 
31af3 4d8 00 00       | 	byte	$00[6]
31af5 4d9 18 18 18 18 
31af9 4da 18          | 	byte	$18[5]
31afa 4da 0C 04 00 00 
31afe 4db 00 00 00 00 
31b02 4dc 7E 7E 00 00 
31b06 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
31b0a 4de 00 00 00 00 
31b0e 4df 00 00 00 00 
31b12 4e0 00 00 00 00 
31b16 4e1 00          | 	byte	$00[13]
31b17 4e1 18 18 18 00 
31b1b 4e2 00 00 00 60 
31b1f 4e3 60 60 30 30 
31b23 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
31b27 4e5 06 06 06 00 
31b2b 4e6 00 00 00 3C 
31b2f 4e7 7E 66 66 66 
31b33 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
31b37 4e9 66 7E 3C 00 
31b3b 4ea 00 00 00 18 
31b3f 4eb 18 1C 1C 18 
31b43 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
31b47 4ed 18 7E 7E 00 
31b4b 4ee 00 00 00 3C 
31b4f 4ef 7E 66 66 30 
31b53 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
31b57 4f1 0C 7E 7E 00 
31b5b 4f2 00 00 00 7E 
31b5f 4f3 7E 30 30 18 
31b63 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
31b67 4f5 66 7E 3C 00 
31b6b 4f6 00 00 00 30 
31b6f 4f7 30 38 38 3C 
31b73 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
31b77 4f9 7E 30 30 00 
31b7b 4fa 00 00 00 7E 
31b7f 4fb 7E 06 06 3E 
31b83 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
31b87 4fd 66 7E 3C 00 
31b8b 4fe 00 00 00 38 
31b8f 4ff 3C 0E 06 06 
31b93 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
31b97 501 66 7E 3C 00 
31b9b 502 00 00 00 7E 
31b9f 503 7E 60 60 30 
31ba3 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
31ba7 505 0C 0C 0C 00 
31bab 506 00 00 00 3C 
31baf 507 7E 66 66 3C 
31bb3 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
31bb7 509 66 7E 3C 00 
31bbb 50a 00 00 00 3C 
31bbf 50b 7E 66 66 7E 
31bc3 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
31bc7 50d 70 3C 1C 00 
31bcb 50e 00 00 00 00 
31bcf 50f 00 00 18 18 
31bd3 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
31bd7 511 18 18 18 00 
31bdb 512 00 00 00 00 
31bdf 513 00 00 18 18 
31be3 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
31be7 515 18 18 18 0C 
31beb 516 04 00 00 00 
31bef 517 70 38 1C 0E 
31bf3 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
31bf7 519 70 00 00 00 
31bfb 51a 00 00 00 00 
31bff 51b 00 00 7E 7E 
31c03 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
31c07 51d 00 00 00 00 
31c0b 51e 00 00 00 00 | 	byte	$00[8]
31c0f 51f 0E 1C 38 70 
31c13 520 E0 70 38 1C 
31c17 521 0E 00 00 00 
31c1b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
31c1f 523 7E 66 66 30 
31c23 524 30 18 18 18 
31c27 525 00 18 18 00 
31c2b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
31c2f 527 7E 66 66 66 
31c33 528 66 36 06 66 
31c37 529 66 7E 3C 00 
31c3b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
31c3f 52b 3C 7E 66 66 
31c43 52c 66 7E 7E 66 
31c47 52d 66 66 66 00 
31c4b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
31c4f 52f 7E 66 66 7E 
31c53 530 3E 66 66 66 
31c57 531 66 7E 3E 00 
31c5b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
31c5f 533 7E 66 66 06 
31c63 534 06 06 06 66 
31c67 535 66 7E 3C 00 
31c6b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
31c6f 537 7E 66 66 66 
31c73 538 66 66 66 66 
31c77 539 66 7E 3E 00 
31c7b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
31c7f 53b 7E 06 06 3E 
31c83 53c 3E 06 06 06 
31c87 53d 06 7E 7E 00 
31c8b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
31c8f 53f 7E 06 06 3E 
31c93 540 3E 06 06 06 
31c97 541 06 06 06 00 
31c9b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
31c9f 543 7E 06 06 76 
31ca3 544 76 66 66 66 
31ca7 545 66 7E 3C 00 
31cab 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
31caf 547 66 66 66 7E 
31cb3 548 7E 66 66 66 
31cb7 549 66 66 66 00 
31cbb 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
31cbf 54b 7E 18 18 18 
31cc3 54c 18 18 18 18 
31cc7 54d 18 7E 7E 00 
31ccb 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
31ccf 54f 60 60 60 60 
31cd3 550 60 60 60    | 	byte	$60[7]
31cd6 551 66 66 7E 3C 
31cda 552 00 00 00 00 
31cde 553 66 66 36 36 
31ce2 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
31ce6 555 66 66 C6 C6 
31cea 556 00 00 00 00 
31cee 557 06 06 06 06 
31cf2 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
31cf6 559 06 06 7E 7E 
31cfa 55a 00 00 00 00 
31cfe 55b C6 C6 EE EE 
31d02 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
31d06 55d C6 C6 C6 C6 
31d0a 55e 00 00 00 00 
31d0e 55f 66 66 66 6E 
31d12 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
31d16 561 76 66 66 66 
31d1a 562 00 00 00 00 
31d1e 563 3C 7E 66 66 
31d22 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
31d26 565 66 66 7E 3C 
31d2a 566 00 00 00 00 
31d2e 567 3E 7E 66 66 
31d32 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
31d36 569 06 06 06 06 
31d3a 56a 00 00 00 00 
31d3e 56b 3C 7E 66 66 
31d42 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
31d46 56d 66 56 3E 6C 
31d4a 56e 00 00 00 00 
31d4e 56f 3E 7E 66 66 
31d52 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
31d56 571 66 66 C6 C6 
31d5a 572 00 00 00 00 
31d5e 573 7C 7E 06 06 
31d62 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
31d66 575 60 60 7E 3E 
31d6a 576 00 00 00 00 
31d6e 577 7E 7E 18 18 
31d72 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
31d76 579 18 18 18 18 
31d7a 57a 00 00 00 00 
31d7e 57b 66 66 66 66 
31d82 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
31d86 57d 66 66 7E 3C 
31d8a 57e 00 00 00 00 
31d8e 57f 66 66 66 66 
31d92 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
31d96 581 3C 3C 18 18 
31d9a 582 00 00 00 00 
31d9e 583 C6 C6 C6 C6 
31da2 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
31da6 585 FE EE C6 82 
31daa 586 00 00 00 00 
31dae 587 66 66 66 3C 
31db2 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
31db6 589 3C 66 66 66 
31dba 58a 00 00 00 00 
31dbe 58b 66 66 66 66 
31dc2 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
31dc6 58d 18 18 18 18 
31dca 58e 00 00 00 00 
31dce 58f 7E 7E 30 30 
31dd2 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
31dd6 591 06 06 7E 7E 
31dda 592 00 00 00 00 
31dde 593 3C 3C 0C 0C 
31de2 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
31de6 595 0C 0C 3C 3C 
31dea 596 00 00 00 00 
31dee 597 06 06 0C 0C 
31df2 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
31df6 599 60 60 C0 C0 
31dfa 59a 00 00 00 00 
31dfe 59b 3C 3C 30 30 
31e02 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
31e06 59d 30 30 3C 3C 
31e0a 59e 00 00 00 00 
31e0e 59f 18 18 3C 3C 
31e12 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
31e16 5a1 00 00 00 00 
31e1a 5a2 00 00 00 00 
31e1e 5a3 00 00 00 00 
31e22 5a4 00 00 00 00 
31e26 5a5 00 00       | 	byte	$00[18]
31e28 5a6 FE FE 00 00 
31e2c 5a7 00 00 0C 0C 
31e30 5a8 18 18 00 00 
31e34 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
31e38 5aa 00 00 00 00 
31e3c 5ab 00 00 00 00 
31e40 5ac 00          | 	byte	$00[9]
31e41 5ac 3C 7C 60 7C 
31e45 5ad 7E 66 66 7E 
31e49 5ae 7C 00 00 00 
31e4d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
31e51 5b0 3E 7E 66 66 
31e55 5b1 66 66 66 7E 
31e59 5b2 3E 00 00 00 
31e5d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
31e61 5b4 3C 3E 06 06 
31e65 5b5 06 06 06 7E 
31e69 5b6 7C 00 00 00 
31e6d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
31e71 5b8 7C 7E 66 66 
31e75 5b9 66 66 66 7E 
31e79 5ba 7C 00 00 00 
31e7d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
31e81 5bc 3C 7E 66 66 
31e85 5bd 7E 06 06 7E 
31e89 5be 7C 00 00 00 
31e8d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
31e91 5c0 18 7E 7E 18 
31e95 5c1 18 18 18 18 
31e99 5c2 18 00 00 00 
31e9d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
31ea1 5c4 7C 7E 66 66 
31ea5 5c5 66 66 7E 7C 
31ea9 5c6 60 7E 3E 00 
31ead 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
31eb1 5c8 3E 7E 66 66 
31eb5 5c9 66 66 66 66 
31eb9 5ca 66 00 00 00 
31ebd 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
31ec1 5cc 1C 1C 18 18 
31ec5 5cd 18 18 18 3C 
31ec9 5ce 3C 00 00 00 
31ecd 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
31ed1 5d0 30 30 30 30 
31ed5 5d1 30 30 30 30 
31ed9 5d2 30          | 	byte	$30[9]
31eda 5d2 3E 1E 00 00 
31ede 5d3 06 06 06 36 
31ee2 5d4 36 1E 1E 1E 
31ee6 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
31eea 5d6 00 00 00 00 
31eee 5d7 1C 1C 18 18 
31ef2 5d8 18 18 18 18 
31ef6 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
31efa 5da 00 00 00 00 
31efe 5db 00 00 00    | 	byte	$00[7]
31f01 5dc 6C FE FE D6 
31f05 5dd D6 C6 C6 C6 
31f09 5de C6 00 00 00 
31f0d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
31f11 5e0 3E 7E 66 66 
31f15 5e1 66 66 66 66 
31f19 5e2 66 00 00 00 
31f1d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
31f21 5e4 3C 7E 66 66 
31f25 5e5 66 66 66 7E 
31f29 5e6 3C 00 00 00 
31f2d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
31f31 5e8 3E 7E 66 66 
31f35 5e9 66 66 66 7E 
31f39 5ea 3E 06 06 00 
31f3d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
31f41 5ec 7C 7E 66 66 
31f45 5ed 66 66 66 7E 
31f49 5ee 7C 60 60 00 
31f4d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
31f51 5f0 3E 7E 66 06 
31f55 5f1 06 06 06 06 
31f59 5f2 06 00 00 00 
31f5d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
31f61 5f4 7C 7E 06 0E 
31f65 5f5 3C 70 60 7E 
31f69 5f6 3E 00 00 00 
31f6d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
31f71 5f8 7E 7E 18 18 
31f75 5f9 18 18 18 78 
31f79 5fa 70 00 00 00 
31f7d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
31f81 5fc 66 66 66 66 
31f85 5fd 66 66 66    | 	byte	$66[7]
31f88 5fe 7E 7C 00 00 
31f8c 5ff 00 00 00 00 
31f90 600 00 66 66 66 
31f94 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
31f98 602 18 18 00 00 
31f9c 603 00 00 00 00 
31fa0 604 00 C6 C6 D6 
31fa4 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
31fa8 606 C6 82 00 00 
31fac 607 00 00 00 00 
31fb0 608 00 66 66 3C 
31fb4 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
31fb8 60a 66 66 00 00 
31fbc 60b 00 00 00 00 
31fc0 60c 00 66 66 66 
31fc4 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
31fc8 60e 7C 60 7E 3E 
31fcc 60f 00 00 00 00 
31fd0 610 00 7E 7E 30 
31fd4 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
31fd8 612 7E 7E 00 00 
31fdc 613 00 00 30 18 
31fe0 614 18 18 18 0C 
31fe4 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
31fe8 616 18 30 00 00 
31fec 617 00 00 18 18 
31ff0 618 18 18 18 18 
31ff4 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
31ff8 61a 18 18 00 00 
31ffc 61b 00 00 0C 18 
32000 61c 18 18 18 30 
32004 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
32008 61e 18 0C 00 00 
3200c 61f 00 00 6C 7E 
32010 620 36 00 00 00 
32014 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
32018 622 00 00 00 00 
3201c 623 00 00 00 00 
32020 624 00          | 	byte	$00[9]
32021 624 18 18 18 18 
32025 625 18 18 00 00 
32029 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3202c 627             | 'amiga_font     file "amigafont.def"
3202c 627 00 6C FE FE 
32030 628 7C 38 10 00 
32034 629 18 18 18 F8 
32038 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3203c 62b C0 C0 C0 C0 
32040 62c C0 C0 C0 C0 | 	byte	$c0[8]
32044 62d 18 18 18 1F 
32048 62e 1F 00 00 00 
3204c 62f 18 18 18 1F 
32050 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
32054 631 00 00 00 1F 
32058 632 1F 18 18 18 
3205c 633 C0 E0 70 38 
32060 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
32064 635 03 07 0E 1C 
32068 636 38 70 E0 C0 
3206c 637 80 C0 E0 F0 
32070 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
32074 639 00 00 00 00 
32078 63a F0 F0 F0 F0 
3207c 63b 01 03 07 0F 
32080 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
32084 63d F0 F0 F0 F0 
32088 63e 00 00 00 00 
3208c 63f 0F 0F 0F 0F 
32090 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
32094 641 FF FF 00 00 
32098 642 00 00 00 00 
3209c 643 00 00 00 00 
320a0 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
320a4 645 00 00 00 00 
320a8 646 0F 0F 0F 0F 
320ac 647 00 38 38 EE 
320b0 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
320b4 649 00 00 00 F8 
320b8 64a F8 18 18 18 
320bc 64b 00 00 00 FF 
320c0 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
320c4 64d 18 18 18 FF 
320c8 64e FF 18 18 18 
320cc 64f 00 00 3C 7E 
320d0 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
320d4 651 00 00 00 00 
320d8 652 FF FF FF FF 
320dc 653 03 03 03 03 
320e0 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
320e4 655 00 00 00 FF 
320e8 656 FF 18 18 18 
320ec 657 18 18 18 FF 
320f0 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
320f4 659 0F 0F 0F 0F 
320f8 65a 0F 0F 0F 0F | 	byte	$0f[8]
320fc 65b 18 18 18 F8 
32100 65c F8 00 00 00 
32104 65d 1E 06 1E 06 
32108 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3210c 65f 00 18 3C 7E 
32110 660 18 18 18 00 
32114 661 00 18 18 18 
32118 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3211c 663 00 18 0C 7E 
32120 664 0C 18 00 00 
32124 665 00 18 30 7E 
32128 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3212c 667 00 00 00 00 
32130 668 00 00 00 00 
32134 669 00          | 	byte	$00[9]
32135 669 18 18 18 18 
32139 66a 00 18 00 00 
3213d 66b 66 66 66 00 
32141 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
32145 66d 66 FF 66 66 
32149 66e FF 66 00 18 
3214d 66f 7C 06 3C 60 
32151 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
32155 671 66 36 18 0C 
32159 672 66 62 00 38 
3215d 673 6C 38 1C F6 
32161 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
32165 675 18 18 18 00 
32169 676 00 00 00 00 
3216d 677 70 38 18 18 
32171 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
32175 679 0E 1C 18 18 
32179 67a 1C 0E 00 00 
3217d 67b 66 3C FF 3C 
32181 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
32185 67d 18 18 7E 18 
32189 67e 18 00 00 00 
3218d 67f 00 00 00 00 
32191 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
32195 681 00 00 7E 00 
32199 682 00 00 00 00 
3219d 683 00 00 00 00 
321a1 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
321a5 685 60 30 18 0C 
321a9 686 06 02 00 00 
321ad 687 3C 66 76 6E 
321b1 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
321b5 689 18 1C 18 18 
321b9 68a 18 7E 00 00 
321bd 68b 3C 66 30 18 
321c1 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
321c5 68d 7E 30 18 30 
321c9 68e 66 3C 00 00 
321cd 68f 30 38 3C 36 
321d1 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
321d5 691 7E 06 3E 60 
321d9 692 66 3C 00 00 
321dd 693 3C 06 3E 66 
321e1 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
321e5 695 7E 60 30 18 
321e9 696 0C 0C 00 00 
321ed 697 3C 66 3C 66 
321f1 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
321f5 699 3C 66 7C 60 
321f9 69a 30 1C 00 00 
321fd 69b 00 18 18 00 
32201 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
32205 69d 00 18 18 00 
32209 69e 18 18 0C 60 
3220d 69f 30 18 0C 18 
32211 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
32215 6a1 00 7E 00 00 
32219 6a2 7E 00 00 06 
3221d 6a3 0C 18 30 18 
32221 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
32225 6a5 3C 66 30 18 
32229 6a6 00 18 00 00 
3222d 6a7 3C 66 76 76 
32231 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
32235 6a9 18 3C 66 66 
32239 6aa 7E 66 00 00 
3223d 6ab 3E 66 3E 66 
32241 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
32245 6ad 3C 66 06 06 
32249 6ae 66 3C 00 00 
3224d 6af 1E 36 66 66 
32251 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
32255 6b1 7E 06 3E 06 
32259 6b2 06 7E 00 00 
3225d 6b3 7E 06 3E 06 
32261 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
32265 6b5 7C 06 06 76 
32269 6b6 66 7C 00 00 
3226d 6b7 66 66 7E 66 
32271 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
32275 6b9 7E 18 18 18 
32279 6ba 18 7E 00 00 
3227d 6bb 60 60 60 60 
32281 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
32285 6bd 66 36 1E 1E 
32289 6be 36 66 00 00 
3228d 6bf 06 06 06 06 
32291 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
32295 6c1 C6 EE FE D6 
32299 6c2 C6 C6 00 00 
3229d 6c3 66 6E 7E 7E 
322a1 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
322a5 6c5 3C 66 66 66 
322a9 6c6 66 3C 00 00 
322ad 6c7 3E 66 66 3E 
322b1 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
322b5 6c9 3C 66 66 66 
322b9 6ca 36 6C 00 00 
322bd 6cb 3E 66 66 3E 
322c1 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
322c5 6cd 3C 06 3C 60 
322c9 6ce 60 3C 00 00 
322cd 6cf 7E 18 18 18 
322d1 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
322d5 6d1 66 66 66 66 
322d9 6d2 66          | 	byte	$66[5]
322da 6d2 7E 00 00 66 
322de 6d3 66 66 66 3C 
322e2 6d4 18 00 00 C6 
322e6 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
322ea 6d6 C6 00 00 66 
322ee 6d7 66 3C 3C 66 
322f2 6d8 66 00 00 66 
322f6 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
322fa 6da 18 00 00 7E 
322fe 6db 30 18 0C 06 
32302 6dc 7E 00 00 78 
32306 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3230a 6de 78 00 00 02 
3230e 6df 06 0C 18 30 
32312 6e0 60 00 00 1E 
32316 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3231a 6e2 1E 00 00 10 
3231e 6e3 38 6C C6 00 
32322 6e4 00 00 00 00 
32326 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3232a 6e6 FF 00 00 18 
3232e 6e7 3C 7E 7E 3C 
32332 6e8 18 00 00 00 
32336 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3233a 6ea 7C 00 00 06 
3233e 6eb 06 3E 66 66 
32342 6ec 3E 00 00 00 
32346 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3234a 6ee 3C 00 00 60 
3234e 6ef 60 7C 66 66 
32352 6f0 7C 00 00 00 
32356 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3235a 6f2 3C 00 00 70 
3235e 6f3 18 7C 18 18 
32362 6f4 18 00 00 00 
32366 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3236a 6f6 60 3E 00 06 
3236e 6f7 06 3E 66 66 
32372 6f8 66 00 00 18 
32376 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3237a 6fa 3C 00 00 60 
3237e 6fb 00 60 60 60 
32382 6fc 60 3C 00 06 
32386 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3238a 6fe 66 00 00 1C 
3238e 6ff 18 18 18 18 
32392 700 3C 00 00 00 
32396 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3239a 702 C6 00 00 00 
3239e 703 3E 66 66 66 
323a2 704 66 00 00 00 
323a6 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
323aa 706 3C 00 00 00 
323ae 707 3E 66 66 3E 
323b2 708 06 06 00 00 
323b6 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
323ba 70a 60 60 00 00 
323be 70b 3E 66 06 06 
323c2 70c 06 00 00 00 
323c6 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
323ca 70e 3E 00 00 18 
323ce 70f 7E 18 18 18 
323d2 710 70 00 00 00 
323d6 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
323da 712 7C 00 00 00 
323de 713 66 66 66 3C 
323e2 714 18 00 00 00 
323e6 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
323ea 716 6C 00 00 00 
323ee 717 66 3C 18 3C 
323f2 718 66 00 00 00 
323f6 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
323fa 71a 30 1E 00 00 
323fe 71b 7E 30 18 0C 
32402 71c 7E 00 00 18 
32406 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3240a 71e 3C 00 18 18 
3240e 71f 18 18 18 18 
32412 720 18 18 00 7E 
32416 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3241a 722 60 00 10 18 
3241e 723 1C 1E 1C 18 
32422 724 10 00 08 18 
32426 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3242a 726 08 00       | 	byte	$08, $00
3242c 727 00 00 00 00 
32430 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
32431 728 80 00 00 00 
32435 729 00 80 00 00 
32439 72a 80 80 00 00 
3243d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
32441 72c 80 00 80 00 
32445 72d 00 40 80 00 
32449 72e AA AA AA 00 
3244d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
32451 730 FF 00 00 00 
32455 731 00 FF 00 00 
32459 732 FF FF 00 00 
3245d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
32461 734 FF 00 FF 00 
32465 735 00 FF FF 00 
32469 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3246c 737 00 00 00 00 
32470 738 00          | ataripalette   file "ataripalettep2.def"
32471 738 11 11 11 00 
32475 739 22 22 22 00 
32479 73a 33 33 33 00 
3247d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
32481 73c 55 55 55 00 
32485 73d 66 66 66 00 
32489 73e 77 77 77 00 
3248d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
32491 740 99 99 99 00 
32495 741 AA AA AA 00 
32499 742 BB BB BB 00 
3249d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
324a1 744 DD DD DD 00 
324a5 745 EE EE EE 00 
324a9 746 FF FF FF 00 
324ad 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
324b1 748 00 14 40 00 
324b5 749 00 1E 60 00 
324b9 74a 00 28 80 00 
324bd 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
324c1 74c 00 3C BF 00 
324c5 74d 00 46 DF 00 
324c9 74e 00 50 FF 00 
324cd 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
324d1 750 39 77 FF 00 
324d5 751 55 8A FF 00 
324d9 752 71 9E FF 00 
324dd 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
324e1 754 AA C5 FF 00 
324e5 755 C6 D8 FF 00 
324e9 756 E3 EC FF 00 
324ed 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
324f1 758 00 00 40 00 
324f5 759 00 00 60 00 
324f9 75a 00 00 80 00 
324fd 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
32501 75c 00 00 BF 00 
32505 75d 00 00 DF 00 
32509 75e 00 00 FF 00 
3250d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
32511 760 39 39 FF 00 
32515 761 55 55 FF 00 
32519 762 71 71 FF 00 
3251d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
32521 764 AA AA FF 00 
32525 765 C6 C6 FF 00 
32529 766 E3 E3 FF 00 
3252d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
32531 768 20 00 40 00 
32535 769 30 00 60 00 
32539 76a 40 00 80 00 
3253d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
32541 76c 60 00 BF 00 
32545 76d 70 00 DF 00 
32549 76e 80 00 FF 00 
3254d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
32551 770 9C 39 FF 00 
32555 771 AA 55 FF 00 
32559 772 B8 71 FF 00 
3255d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
32561 774 D5 AA FF 00 
32565 775 E3 C6 FF 00 
32569 776 F1 E3 FF 00 
3256d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
32571 778 40 00 40 00 
32575 779 60 00 60 00 
32579 77a 80 00 80 00 
3257d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
32581 77c BF 00 BF 00 
32585 77d DF 00 DF 00 
32589 77e FF 00 FF 00 
3258d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
32591 780 FF 39 FF 00 
32595 781 FF 55 FF 00 
32599 782 FF 71 FF 00 
3259d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
325a1 784 FF AA FF 00 
325a5 785 FF C6 FF 00 
325a9 786 FF E3 FF 00 
325ad 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
325b1 788 40 00 20 00 
325b5 789 60 00 30 00 
325b9 78a 80 00 40 00 
325bd 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
325c1 78c BF 00 60 00 
325c5 78d DF 00 70 00 
325c9 78e FF 00 80 00 
325cd 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
325d1 790 FF 39 9C 00 
325d5 791 FF 55 AA 00 
325d9 792 FF 71 B8 00 
325dd 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
325e1 794 FF AA D5 00 
325e5 795 FF C6 E3 00 
325e9 796 FF E3 F1 00 
325ed 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
325f1 798 40 00 00 00 
325f5 799 60 00 00 00 
325f9 79a 80 00 00 00 
325fd 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
32601 79c BF 00 00 00 
32605 79d DF 00 00 00 
32609 79e FF 00 00 00 
3260d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
32611 7a0 FF 39 39 00 
32615 7a1 FF 55 55 00 
32619 7a2 FF 71 71 00 
3261d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
32621 7a4 FF AA AA 00 
32625 7a5 FF C6 C6 00 
32629 7a6 FF E3 E3 00 
3262d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
32631 7a8 40 10 00 00 
32635 7a9 60 18 00 00 
32639 7aa 80 20 00 00 
3263d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
32641 7ac BF 30 00 00 
32645 7ad DF 38 00 00 
32649 7ae FF 40 00 00 
3264d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
32651 7b0 FF 6A 39 00 
32655 7b1 FF 80 55 00 
32659 7b2 FF 95 71 00 
3265d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
32661 7b4 FF BF AA 00 
32665 7b5 FF D5 C6 00 
32669 7b6 FF EA E3 00 
3266d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
32671 7b8 40 20 00 00 
32675 7b9 60 30 00 00 
32679 7ba 80 40 00 00 
3267d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
32681 7bc BF 60 00 00 
32685 7bd DF 70 00 00 
32689 7be FF 80 00 00 
3268d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
32691 7c0 FF 9C 39 00 
32695 7c1 FF AA 55 00 
32699 7c2 FF B8 71 00 
3269d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
326a1 7c4 FF D5 AA 00 
326a5 7c5 FF E3 C6 00 
326a9 7c6 FF F1 E3 00 
326ad 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
326b1 7c8 40 30 00 00 
326b5 7c9 60 48 00 00 
326b9 7ca 80 60 00 00 
326bd 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
326c1 7cc BF 90 00 00 
326c5 7cd DF A8 00 00 
326c9 7ce FF C0 00 00 
326cd 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
326d1 7d0 FF CE 39 00 
326d5 7d1 FF D5 55 00 
326d9 7d2 FF DC 71 00 
326dd 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
326e1 7d4 FF EA AA 00 
326e5 7d5 FF F1 C6 00 
326e9 7d6 FF F8 E3 00 
326ed 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
326f1 7d8 30 40 00 00 
326f5 7d9 48 60 00 00 
326f9 7da 60 80 00 00 
326fd 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
32701 7dc 90 BF 00 00 
32705 7dd A8 DF 00 00 
32709 7de C0 FF 00 00 
3270d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
32711 7e0 CE FF 39 00 
32715 7e1 D5 FF 55 00 
32719 7e2 DC FF 71 00 
3271d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
32721 7e4 EA FF AA 00 
32725 7e5 F1 FF C6 00 
32729 7e6 F8 FF E3 00 
3272d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
32731 7e8 00 40 00 00 
32735 7e9 00 60 00 00 
32739 7ea 00 80 00 00 
3273d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
32741 7ec 00 BF 00 00 
32745 7ed 00 DF 00 00 
32749 7ee 00 FF 00 00 
3274d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
32751 7f0 39 FF 39 00 
32755 7f1 55 FF 55 00 
32759 7f2 71 FF 71 00 
3275d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
32761 7f4 AA FF AA 00 
32765 7f5 C6 FF C6 00 
32769 7f6 E3 FF E3 00 
3276d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
32771 7f8 00 40 14 00 
32775 7f9 00 60 1E 00 
32779 7fa 00 80 28 00 
3277d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
32781 7fc 00 BF 3C 00 
32785 7fd 00 DF 46 00 
32789 7fe 00 FF 50 00 
3278d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
32791 800 39 FF 77 00 
32795 801 55 FF 8A 00 
32799 802 71 FF 9E 00 
3279d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
327a1 804 AA FF C5 00 
327a5 805 C6 FF D8 00 
327a9 806 E3 FF EC 00 
327ad 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
327b1 808 00 40 28 00 
327b5 809 00 60 3C 00 
327b9 80a 00 80 50 00 
327bd 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
327c1 80c 00 BF 78 00 
327c5 80d 00 DF 8C 00 
327c9 80e 00 FF A0 00 
327cd 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
327d1 810 39 FF B5 00 
327d5 811 55 FF C0 00 
327d9 812 71 FF CA 00 
327dd 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
327e1 814 AA FF DF 00 
327e5 815 C6 FF EA 00 
327e9 816 E3 FF F4 00 
327ed 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
327f1 818 00 40 40 00 
327f5 819 00 60 60 00 
327f9 81a 00 80 80 00 
327fd 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
32801 81c 00 BF BF 00 
32805 81d 00 DF DF 00 
32809 81e 00 FF FF 00 
3280d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
32811 820 39 FF FF 00 
32815 821 55 FF FF 00 
32819 822 71 FF FF 00 
3281d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
32821 824 AA FF FF 00 
32825 825 C6 FF FF 00 
32829 826 E3 FF FF 00 
3282d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
32831 828 00 28 40 00 
32835 829 00 3C 60 00 
32839 82a 00 50 80 00 
3283d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
32841 82c 00 78 BF 00 
32845 82d 00 8C DF 00 
32849 82e 00 A0 FF 00 
3284d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
32851 830 39 B5 FF 00 
32855 831 55 C0 FF 00 
32859 832 71 CA FF 00 
3285d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
32861 834 AA DF FF 00 
32865 835 C6 EA FF 00 
32869 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3286c 837             | 
3286c 837             | '**********************************************************************************
3286c 837             | '
3286c 837             | '        Timings and colors definitions
3286c 837             | '
3286c 837             | '**********************************************************************************
3286c 837             | 
3286c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3286c 837 08 00 00 00 
32870 838 3C 00 00 00 
32874 839 08 00 00 00 
32878 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
3287c 83b 07 00 00 00 
32880 83c 04 00 00 00 
32884 83d 01 00 00 00 
32888 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3288c 83f 58 02 00 00 
32890 840 6A 8C 15 14 
32894 841 FB 06 B7 01 
32898 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
3289c 843 00 00 00 00 
328a0 844 C0 00 00 00 
328a4 845 00 00 00 00 
328a8 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
328ac 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
328ac 847 00 75 C7 97 
328b0 848 27 47 F6 0A 
328b4 849 05 79 CB 9B 
328b8 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
328bc 84b             | 
328bc 84b             | ''--------  Initialization  ----------------------------------------------------------------
328bc 84b             | 
328bc 84b 28 0C 64 FD | hdmi            setq    #6
328c0 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
328c4 84d 28 10 64 FD |                 setq    #8
328c8 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
328cc 84f             | 
328cc 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
328d0 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
328d4 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
328d8 852 D6 C6 01 F1 |                 add     t1,hbase
328dc 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
328e0 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
328e4 855 7B 0B 80 5F 
328e8 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
328ec 857 66 66 86 FF 
328f0 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
328f4 859             | '
328f4 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
328f8 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
328fc 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
32900 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
32904 85d             | 
32904 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
32908 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3290c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
32910 860             | 
32910 860             | ''--------  frame rendering main loop  ---------------------------------------------------
32910 860             | 
32910 860 28 06 64 FD | p101            setq 	#3
32914 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
32918 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3291c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
32920 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
32924 865 00 A0 05 F6 |                 mov     dlinum, #0
32928 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3292c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
32930 868             | 
32930 868             | 
32930 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
32934 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
32938 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3293c 86b             |                 
3293c 86b             | 
3293c 86b             | 
3293c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3293c 86b             |   
3293c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
32940 86c 29 FE 65 3D |          if_nc  setq2   #255
32944 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
32948 86e             | 
32948 86e             | '' -----   up porch (before the picture)
32948 86e             | 
32948 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3294c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
32950 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
32954 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
32958 872             |  
32958 872             |    
32958 872             |  
32958 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3295c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
32960 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
32964 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
32968 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3296c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
32970 878             | 
32970 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
32974 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
32978 87a 48 00 B0 FD | 		call    #dli
3297c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
32980 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
32984 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
32988 87e             |                 	
32988 87e             |                 
32988 87e             | 
32988 87e             |  
32988 87e             | '' ------- the main screen drawing starts here
32988 87e             | 
32988 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3298c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
32990 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
32994 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
32998 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3299c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
329a0 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
329a4 885             |               
329a4 885             | 
329a4 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
329a8 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
329ac 887             | 
329ac 887             | ' ---------------- All visible lines displayed now, start vblank  
329ac 887             | 
329ac 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
329b0 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
329b4 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
329b8 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
329bc 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
329c0 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
329c4 88d             | 
329c4 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
329c4 88d             | 
329c4 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
329c4 88d             | 
329c4 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
329c8 88e             | 
329c8 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
329cc 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
329d0 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
329d4 891             | 
329d4 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
329d8 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
329dc 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
329e0 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
329e4 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
329e8 896             | 
329e8 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
329ec 897 DD C6 41 F8 |                 getnib  t1,dl,#0
329f0 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
329f4 899 70 00 90 AD |     if_z        jmp     #preload
329f8 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
329fc 89b 94 00 90 AD |     if_z        jmp     #preload2
32a00 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
32a04 89d 0C 00 90 AD |     if_z        jmp     #p390
32a08 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
32a0c 89f 28 00 90 AD |     if_z        jmp     #p391  
32a10 8a0             | 
32a10 8a0 2D 00 64 FD | p308            ret
32a14 8a1             |    
32a14 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
32a18 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
32a1c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
32a20 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
32a24 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
32a28 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
32a2c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
32a30 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
32a34 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
32a38 8aa             |  
32a38 8aa             | '' --------  Reload palette. To do 
32a38 8aa             | 
32a38 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
32a3c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
32a40 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
32a44 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
32a48 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
32a4c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
32a50 8b0 70 FF 9F FD |         	jmp     #dli                
32a54 8b1             |       
32a54 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
32a54 8b1             | 
32a54 8b1             | 
32a54 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
32a54 8b1             | 
32a54 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
32a58 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
32a5c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
32a60 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
32a64 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
32a68 8b6             |         
32a68 8b6             | '' -------------- Preload a line from PSRAM        
32a68 8b6             |         
32a68 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
32a6c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
32a70 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
32a74 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
32a78 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
32a7c 8bb             | 
32a7c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
32a80 8bc 32 B7 01 F6 |                 mov     buf2,a1024
32a84 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
32a88 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
32a8c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
32a90 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
32a94 8c1             |  
32a94 8c1             |  
32a94 8c1             | preload2      '  incmod  dlinum,#3
32a94 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
32a98 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
32a9c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
32aa0 8c4 28 02 64 FD |                 setq	#1
32aa4 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
32aa8 8c6             |                 
32aa8 8c6             | 
32aa8 8c6             | '' -------------- Draw sprites
32aa8 8c6             | 
32aa8 8c6 CF 5C 02 F6 | sprite          mov t8,frames
32aac 8c7 10 5C 0E F5 | 		and t8,#16 wz
32ab0 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
32ab4 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
32ab8 8ca             | 		
32ab8 8ca             | 
32ab8 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
32abc 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
32ac0 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
32ac4 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
32ac8 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
32acc 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
32ad0 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
32ad4 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
32ad8 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
32adc 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
32ae0 8d4 01 52 86 F1 |                 sub     sprite_h,#1
32ae4 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
32ae8 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
32aec 8d7             | 
32aec 8d7             | 
32aec 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
32af0 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
32af4 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
32af8 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
32afc 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
32b00 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
32b04 8dd 00 5E 06 F6 |                 mov 	t9,#0
32b08 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
32b0c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
32b10 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
32b14 8e1             |      
32b14 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
32b18 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
32b1c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
32b20 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
32b24 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
32b28 8e6             |                 
32b28 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
32b2c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
32b30 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
32b34 8e9             |   		
32b34 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
32b38 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
32b3c 8eb             | 
32b3c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
32b40 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
32b44 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
32b48 8ee             |  
32b48 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
32b4c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
32b50 8f0 10 00 90 CD |      if_c 	jmp     #p899		
32b54 8f1             | 	
32b54 8f1             | 	
32b54 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
32b58 8f2 28 CD 01 F1 | 		add	t4,sprite_w
32b5c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
32b60 8f4             | 
32b60 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
32b64 8f5             | 
32b64 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
32b68 8f6 01 58 86 F1 | 	 	sub     t6,#1
32b6c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
32b70 8f8             | 
32b70 8f8 28 58 62 FD |                 setq   	t6
32b74 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
32b78 8fa 28 5D 02 F6 |                 mov t8,sprite_w
32b7c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
32b80 8fc 24 00 90 AD |         if_z    jmp #p898
32b84 8fd             |          
32b84 8fd             |         
32b84 8fd 70 5F 06 F6 |                 mov  t9,#368
32b88 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
32b8c 8ff             | 
32b8c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
32b90 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
32b94 901 FF FF 7F FF 
32b98 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
32b9c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
32ba0 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
32ba4 905 2D 01 00 F5 |                 and 0-0, t7
32ba8 906             |                
32ba8 906             | 
32ba8 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
32bac 907 E5 E0 7A FA |                 wmlong 368,t3				
32bb0 908             |                 
32bb0 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
32bb4 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
32bb8 90a 2D 00 64 FD |                 ret
32bbc 90b             | 	
32bbc 90b             | 	
32bbc 90b             |                
32bbc 90b             |  
32bbc 90b             | '' -------------- Graphics line ------------------------------------------------------------
32bbc 90b             |  
32bbc 90b             | 
32bbc 90b             | '' consts and vars
32bbc 90b             | 
32bbc 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
32bc0 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
32bc4 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
32bc8 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
32bcc 90f             | 
32bcc 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
32bd0 910             | 
32bd0 910             | '------ these longs will be set by setmode function
32bd0 910             | 
32bd0 910 00 00 00 00 | m_bs            long    0        'blanks before sync
32bd4 911 00 00 00 00 | m_sn            long    0        'sync
32bd8 912 00 00 00 00 | m_bv            long    0        'blanks before visible
32bdc 913 00 00 00 00 | m_vi            long    0        'visible pixels #
32be0 914             | 'm_border        long    0        'left/right borders
32be0 914 00 00 00 00 | i_upporch       long    0        'up porch lines
32be4 915 00 00 00 00 | i_vsync         long    0        'vsync lines
32be8 916 00 00 00 00 | i_downporch     long    0        'down porch lines
32bec 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
32bf0 918 00 00 00 00 | i_totalvis      long    0
32bf4 919             | 
32bf4 919             | '-------------------------------------
32bf4 919             |  
32bf4 919 00 00 00 00 | linenum         long    0
32bf8 91a 00 00 00 00 | frames          long    0
32bfc 91b 00 00 00 00 | dlinum long 0
32c00 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
32c04 91d             | 
32c04 91d 00 00 00 00 | vblankptr       long    0
32c08 91e 00 00 00 00 | modeptr         long    0
32c0c 91f 00 00 00 00 | paletteptr      long    0
32c10 920 00 00 00 00 | dlptr           long    0
32c14 921 01 00 00 00 | hbase           long    1
32c18 922 00 00 00 00 | mailbox         long    0
32c1c 923 00 00 00 00 | spriteptr          long 0
32c20 924             | 
32c20 924 00 00 00 00 | cmd             long    0
32c24 925 00 B0 07 00 | buf1            long    $80000-16384-4096
32c28 926 00 04 00 00 | buf2            long    1024
32c2c 927 01 00 00 00 | dlptr2          long    1
32c30 928 01 00 00 00 | dl              long    1
32c34 929             | 
32c34 929 00 00 00 00 | buf1c long 0
32c38 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
32c3c 92b 01 00 00 00 | framebuf2       long    1
32c40 92c 01 00 00 00 | hsync0          long    1
32c44 92d 01 00 00 00 | hsync1          long    1
32c48 92e             | 
32c48 92e 01 00 00 00 | t1              long    1
32c4c 92f 00 00 00 00 | t2 long 0
32c50 930 00 00 00 00 | t3 long 0
32c54 931 00 00 00 00 | t4 long 0
32c58 932             | 
32c58 932 00 00 00 00 | rcnt            long    0  'dl repeat count
32c5c 933 00 00 00 00 | rcnt2           long    0
32c60 934 00 00 00 00 | rcnt2a          long    0
32c64 935 00 00 00 00 | roffset         long    0
32c68 936 00 00 00 00 | rdl             long    0  'dl repeat line
32c6c 937 00 00 00 00 | dlc             long    0  'dl command
32c70 938             | 
32c70 938 FF FF FF FF | affffffff       long    $ffffffff
32c74 939 00 00 00 00 | sprite1pointer long 0
32c78 93a 00 00 00 00 | sprite1xy      long 0
32c7c 93b 00 00 00 00 | sprite1wh      long 0
32c80 93c 00 00 00 00 | sprite2pointer long 0
32c84 93d 00 00 00 00 | sprite2xy      long 0
32c88 93e 00 00 00 00 | sprite2wh      long 0
32c8c 93f 00 00 00 00 | sprite3pointer long 0
32c90 940 00 00 00 00 | sprite3xy      long 0
32c94 941 00 00 00 00 | sprite3wh      long 0
32c98 942 00 00 00 00 | sprite4pointer long 0
32c9c 943 00 00 00 00 | sprite4xy      long 0
32ca0 944 00 00 00 00 | sprite4wh      long 0
32ca4 945 00 00 00 00 | sprite5pointer long 0
32ca8 946 00 00 00 00 | sprite5xy      long 0
32cac 947 00 00 00 00 | sprite5wh      long 0
32cb0 948 00 00 00 00 | sprite6pointer long 0
32cb4 949 00 00 00 00 | sprite6xy      long 0
32cb8 94a 00 00 00 00 | sprite6wh      long 0
32cbc 94b 00 00 00 00 | sprite7pointer long 0
32cc0 94c 00 00 00 00 | sprite7xy      long 0
32cc4 94d 00 00 00 00 | sprite7wh      long 0
32cc8 94e 00 00 00 00 | sprite8pointer long 0
32ccc 94f 00 00 00 00 | sprite8xy      long 0
32cd0 950 00 00 00 00 | sprite8wh      long 0
32cd4 951 00 00 00 00 | sprite9pointer long 0
32cd8 952 00 00 00 00 | sprite9xy      long 0
32cdc 953 00 00 00 00 | sprite9wh      long 0
32ce0 954 00 00 00 00 | sprite10pointer long 0
32ce4 955 00 00 00 00 | sprite10xy      long 0
32ce8 956 00 00 00 00 | sprite10wh      long 0
32cec 957 00 00 00 00 | sprite11pointer long 0
32cf0 958 00 00 00 00 | sprite11xy      long 0
32cf4 959 00 00 00 00 | sprite11wh      long 0
32cf8 95a 00 00 00 00 | sprite12pointer long 0
32cfc 95b 00 00 00 00 | sprite12xy      long 0
32d00 95c 00 00 00 00 | sprite12wh      long 0
32d04 95d 00 00 00 00 | sprite13pointer long 0
32d08 95e 00 00 00 00 | sprite13xy      long 0
32d0c 95f 00 00 00 00 | sprite13wh      long 0
32d10 960 00 00 00 00 | sprite14pointer long 0
32d14 961 00 00 00 00 | sprite14xy      long 0
32d18 962 00 00 00 00 | sprite14wh      long 0
32d1c 963 00 00 00 00 | sprite15pointer long 0
32d20 964 00 00 00 00 | sprite15xy      long 0
32d24 965 00 00 00 00 | sprite15wh      long 0
32d28 966 00 00 00 00 | sprite16pointer long 0
32d2c 967 00 00 00 00 | sprite16xy      long 0
32d30 968 00 00 00 00 | sprite16wh      long 0
32d34 969 00 00 00 00 | sprite17pointer long 0
32d38 96a 00 00 00 00 | sprite17xy      long 0
32d3c 96b 00 00 00 00 | sprite17wh      long 0
32d40 96c 00 00 00 00 | sprite18pointer long 0
32d44 96d 00 00 00 00 | sprite18xy      long 0
32d48 96e 00 00 00 00 | sprite18wh      long 0
32d4c 96f 00 00 00 00 | spritenum long 0
32d50 970             | 
32d50 970 00 00 00 00 | spriteline long 0
32d54 971 84 03 00 00 | sprite_x long 900
32d58 972 00 00 00 00 | sprite_y long 0
32d5c 973 10 00 00 00 | sprite_w long 16
32d60 974 40 00 00 00 | sprite_h long 64
32d64 975 00 00 00 00 | l2 long 0
32d68 976 00 00 00 00 | t5 long 0
32d6c 977 00 00 00 00 | t6 long 0
32d70 978 00 00 00 00 | t7 long 0
32d74 979 00 00 00 00 | t8 long 0
32d78 97a 00 00 00 00 | t9 long 0
32d7c 97b 00 00 00 00 | preloadaddr long 0
32d80 97c 00 00 00 00 | preloadlineaddr long 0
32d84 97d 00 04 00 00 | a1024 long 1024
32d88 97e             | 
32d88 97e E0 03 00 00 | aa long 992
32d8c 97f FF 03 00 00 | a1023 long 1023
32d90 980 00 10 00 00 | a4096 long 4096
32d94 981             |  fit 368
32d94 981             | _psram_spin2_dat_
32d94 981 00 00 00 00 
      ...             
32e8c 9bf 00 00 00 00 
32e90 9c0 00 00 00 00 |     listdata long 0[8*8]
32e94 9c1             |             orgh
32e94                 | 
32e94                 | ' driver state
32e94     FF FF FF FF | drivercog   long    -1  ' COG id of driver
32e98     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
32e9c                 | 
32e9c                 | ' delay profile
32e9c     07 00 00 00 
32ea0     00 CF 7B 05 
32ea4     80 D1 F0 08 
32ea8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
32eac     80 C4 60 0F 
32eb0     80 39 7A 12 
32eb4     40 2D D9 13 
32eb8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
32ebc                 | 
32ebc                 | ' data to be passed to driver when starting it
32ebc                 | startupData
32ebc     00 00 00 00 |     long    0           ' current frequency
32ec0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
32ec4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
32ec8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
32ecc     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
32ed0     DC 2E 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
32ed4     5C 2F 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
32ed8     7C 2F 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
32edc                 | 
32edc                 | ' data for memory
32edc                 | deviceData
32edc                 |     ' 16 bank parameters follow (16MB per bank)
32edc     00 00 00 00 
      ...             
32f14     00 00 00 00 
32f18     00 00 00 00 |     long    0[16]                               ' banks 0-15
32f1c                 |     ' 16 banks of pin parameters follow
32f1c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
32f20     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
32f24     FF FF FF FF 
      ...             
32f54     FF FF FF FF 
32f58     FF FF FF FF |     long    -1[14]                              ' banks 2-15
32f5c                 | 
32f5c                 | ' data for COG polling
32f5c                 | qosData 
32f5c     00 00 FF FF 
32f60     00 00 FF FF 
32f64     00 00 FF FF 
32f68     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
32f6c     00 00 FF FF 
32f70     00 00 FF FF 
32f74     00 00 FF FF 
32f78     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
32f7c                 |     
32f7c                 | ' mailbox storage
32f7c                 | 
32f7c                 | mailboxes
32f7c     00 00 00 00 
      ...             
32fd4     00 00 00 00 
32fd8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
32fdc                 | 	alignl
32fdc                 | _psram16drv_spin2_dat_
32fdc                 |                             orgh
32fdc     00 00 00 00 
      ...             
32ff4     00 00 00 00 
32ff8     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
32ffc                 | 
32ffc                 | driver_start
32ffc                 |                             org
32ffc 000             | '..................................................................................................
32ffc 000             | ' Memory layout for COG RAM once operational:
32ffc 000             | '
32ffc 000             | '  COG RAM address      Usage
32ffc 000             | '  ---------------      ----
32ffc 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
32ffc 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
32ffc 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
32ffc 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
32ffc 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
32ffc 000             | '  ~$198-$1F3           State and register variables
32ffc 000             | '
32ffc 000             | ' Also during driver COG startup:
32ffc 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
32ffc 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
32ffc 000             | '..................................................................................................
32ffc 000             |                             
32ffc 000             | ' Mailbox storage after vector initialization
32ffc 000             | 
32ffc 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
33000 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
33004 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
33008 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3300c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
33010 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
33014 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
33018 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3301c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
33020 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
33024 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
33028 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3302c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
33030 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
33034 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
33038 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3303c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
33040 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
33044 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
33048 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3304c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
33050 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
33054 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
33058 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3305c 018             | 
3305c 018             | ' Mailbox parameter addresses per COG once patched
3305c 018             |                             
3305c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
33060 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
33064 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
33068 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3306c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
33070 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
33074 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
33078 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3307c 020             | 
3307c 020             | '..................................................................................................
3307c 020             | ' Per COG request and state setup and service branching
3307c 020             |         
3307c 020             | cog0                 
3307c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
33080 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
33084 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
33088 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3308c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
33090 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
33094 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
33098 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3309c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
330a0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
330a4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
330a8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
330ac 02c             | cog1                        
330ac 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
330b0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
330b4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
330b8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
330bc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
330c0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
330c4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
330c8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
330cc 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
330d0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
330d4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
330d8 037 33 CA 63 FD |                             execf   request-0               'jump to service
330dc 038             | cog2                         
330dc 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
330e0 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
330e4 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
330e8 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
330ec 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
330f0 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
330f4 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
330f8 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
330fc 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
33100 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
33104 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
33108 043 33 CA 63 FD |                             execf   request-0               'jump to service
3310c 044             | cog3                        
3310c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
33110 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
33114 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
33118 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3311c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
33120 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
33124 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
33128 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3312c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
33130 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
33134 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
33138 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3313c 050             | cog4                        
3313c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
33140 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
33144 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
33148 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3314c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
33150 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
33154 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
33158 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3315c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
33160 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
33164 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
33168 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3316c 05c             | cog5                        
3316c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
33170 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
33174 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
33178 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3317c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
33180 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
33184 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
33188 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3318c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
33190 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
33194 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
33198 067 33 CA 63 FD |                             execf   request-0               'jump to service
3319c 068             | cog6                        
3319c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
331a0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
331a4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
331a8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
331ac 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
331b0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
331b4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
331b8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
331bc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
331c0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
331c4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
331c8 073 33 CA 63 FD |                             execf   request-0               'jump to service
331cc 074             | cog7                        
331cc 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
331d0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
331d4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
331d8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
331dc 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
331e0 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
331e4 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
331e8 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
331ec 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
331f0 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
331f4 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
331f8 07f 33 CA 63 FD |                             execf   request-0               'jump to service
331fc 080             |                             fit     128
331fc 080             | 
331fc 080             |                             fit     128
331fc 080             | pad                         long    0[128-$]                'align init code to $80
331fc 080             | 
331fc 080             | '..................................................................................................
331fc 080             | 
331fc 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
331fc 080             | 
331fc 080             | init                        
331fc 080             |                             ' get driver scratch long address in hub
331fc 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
33200 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
33204 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
33208 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3320c 084             |                     
3320c 084             |                             ' read in the additional LUT RAM code
3320c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
33210 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
33214 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
33218 087             | 
33218 087             |                             ' read the startup parameters
33218 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3321c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
33220 089             | 
33220 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
33220 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
33224 08a             | 
33224 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
33228 08b 01 00 00 5F 
3322c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
33230 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
33234 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
33238 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3323c 090             | 
3323c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3323c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
33240 091 01 00 00 FF 
33244 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
33248 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3324c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
33250 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
33254 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
33258 097 08 DE 47 F5 |                             or      a, #8
3325c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
33260 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
33264 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
33268 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3326c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
33270 09d 01 DE 07 F1 |                             add     a, #1
33274 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
33278 09f             |  
33278 09f             |                             ' setup device control pin states
33278 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3327c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
33280 0a1 01 00 00 FF 
33284 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
33288 0a3             | 
33288 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3328c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
33290 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
33294 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
33298 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3329c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
332a0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
332a4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
332a8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
332ac 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
332b0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
332b4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
332b8 0af             | pinloop
332b8 0af             |                             ' generate minimum CE high time before access
332b8 0af A1 07 00 FF 
332bc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
332c0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
332c4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
332c8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
332cc 0b4 1F DE 63 FD |                             waitx   a                       'delay
332d0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
332d4 0b6             | 
332d4 0b6             |                             ' setup the COG mailboxes and addresses 
332d4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
332d8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
332dc 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
332e0 0b9             | 
332e0 0b9 28 2E 64 FD |                             setq    #24-1
332e4 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
332e8 0bb             | 
332e8 0bb             |                             ' setup the polling loop for active COGs 
332e8 0bb 01 C2 63 FD |                             cogid   id
332ec 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
332f0 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
332f4 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
332f8 0bf 0A F0 07 F6 |                             mov     ptra, #10
332fc 0c0 E1 F1 03 FA |                             mul     ptra, id
33300 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
33304 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
33308 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3330c 0c4 03 C2 07 FA |                             mul     id, #3
33310 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
33314 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
33318 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3331c 0c8 D8 01 B0 FD |                             call    #reloadcogs
33320 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
33324 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
33328 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
33328 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3332c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
33330 0cd 08 04 DC FC |                             rep     #2, #8
33334 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
33338 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3333c 0d0             | 
3333c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3333c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3333c 0d0 01 C2 63 FD |                             cogid   id
33340 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
33344 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
33348 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3334c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
33350 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
33354 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
33358 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3335c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
33360 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
33364 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
33368 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3336c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
33370 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
33374 0de A5 E5 03 F1 |                             add     d, const512
33378 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3337c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
33380 0e1 00 00 00 F6 |                             mov     0-0, 0-0
33384 0e2             |                             
33384 0e2             |                             ' setup register values for control vector loop setup after we return
33384 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
33388 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3338c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
33390 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
33394 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
33398 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3339c 0e8 D0 C3 8F F9 |                             altd    id, #id0
333a0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
333a4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
333a8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
333ac 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
333b0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
333b4 0ee             |  
333b4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
333b8 0ef 07 CA 07 F5 |                             and     request, #7
333bc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
333c0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
333c4 0f2             |                             fit     $100                    'ensure all init code fits this space
333c4 0f2             | 
333c4 0f2             |                             fit     $100                    'ensure all init code fits this space
333c4 0f2             | 
333c4 0f2 00 00 00 00 
      ...             
333f4 0fe 00 00 00 00 
333f8 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
333fc 100             | 
333fc 100             | '..................................................................................................
333fc 100             | ' Error result handling and COG notification of request completion
333fc 100             | 
333fc 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
33400 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
33404 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
33408 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3340c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
33410 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
33414 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
33418 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3341c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
33420 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
33424 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
33428 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3342c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
33430 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
33434 10e             | ' Poller re-starts here after a COG is serviced
33434 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
33438 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3343c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
33440 111             | ' Main dynamic polling loop repeats until a request arrives
33440 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
33444 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
33448 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3344c 114             | 
3344c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
33450 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
33454 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
33458 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3345c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
33460 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
33464 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
33468 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3346c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
33470 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
33474 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
33478 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3347c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
33480 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
33484 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
33488 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3348c 124             | 
3348c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
33490 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
33494 126             |  
33494 126             | '..................................................................................................
33494 126             | ' List handler                               
33494 126             | 
33494 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
33498 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3349c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
334a0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
334a4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
334a8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
334ac 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
334b0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
334b4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
334b8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
334bc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
334c0 131 33 00 60 FD |                             execf   0-0                     'process the request 
334c4 132             | 
334c4 132             | '..................................................................................................
334c4 132             | ' Restoring per COG state and resuming where we left off
334c4 132             | 
334c4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
334c8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
334cc 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
334d0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
334d4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
334d8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
334dc 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
334e0 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
334e4 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
334e8 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
334ec 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
334f0 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
334f4 13e             |                    
334f4 13e             | '..................................................................................................
334f4 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
334f4 13e             | 
334f4 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
334f8 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
334fc 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
33500 141 D0 DF B7 F9 |                             setd    a, #id0
33504 142 D8 DF BF F9 |                             sets    a, #addr1
33508 143 FE FF FF FF 
3350c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
33510 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
33514 146 3F DE A7 F9 |                             alti    a, #%111_111 
33518 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3351c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
33520 149 01 E2 63 FD |                             cogid   c
33524 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
33528 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3352c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
33530 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
33534 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
33538 14f 00 E0 03 F6 |                             mov     b, 0-0
3353c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
33540 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
33544 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
33548 153 0C 00 90 AD |             if_z            jmp     #excluded               
3354c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
33550 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
33554 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
33558 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3355c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
33560 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
33564 15a             | 
33564 15a             | 'determine priority cogs and build instructions for the polling sequence
33564 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
33568 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3356c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
33570 15d             | 
33570 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
33574 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
33578 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3357c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
33580 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
33584 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
33588 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3358c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
33590 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
33594 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
33598 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3359c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
335a0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
335a4 16a             | endprioloop
335a4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
335a8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
335ac 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
335b0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
335b4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
335b8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
335bc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
335c0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
335c4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
335c8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
335cc 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
335d0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
335d4 176             | 
335d4 176             | ' populate the round robin COG polling instructions
335d4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
335d8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
335dc 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
335e0 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
335e4 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
335e8 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
335ec 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
335f0 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
335f4 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
335f8 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
335fc 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
33600 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
33604 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
33608 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3360c 184             | '..................................................................................................
3360c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3360c 184             | 
3360c 184             | set_latency                                                 '            (a) set latency
3360c 184             | get_latency                                                 '            (b) get latency
3360c 184             | set_burst                                                   '            (c) set burst size of bank
3360c 184             | get_burst                                                   '            (d) get burst size of bank
3360c 184             |                                                             '            (e) dump state
3360c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
33610 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
33614 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
33618 187             |                                                             ' | | | | e  account for following AUGS
33618 187 04 00 00 FF 
3361c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
33620 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
33624 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
33628 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3362c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
33630 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
33634 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
33638 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3363c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
33640 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
33644 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
33648 193             | 
33648 193             | '..................................................................................................
33648 193             | ' Misc EXECF code
33648 193             | 
33648 193 33 72 63 FD | start_read_exec             execf   newburstr
3364c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
33650 195 33 78 63 FD | continue_read_exec          execf   lockedreads
33654 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
33658 197             | 
33658 197             | '..................................................................................................
33658 197             | ' Variables
33658 197             | 
33658 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3365c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
33660 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
33664 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
33668 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3366c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
33670 19d             | 
33670 19d 00 00 00 80 | xfreq1          long    $80000000
33674 19e 00 00 00 40 | xfreq2          long    $40000000
33678 19f 03 00 00 00 | delay           long    3
3367c 1a0             | 
3367c 1a0             | lutcodeaddr                 
3367c 1a0             | startupparams
3367c 1a0             | excludedcogs                                    'careful: shared register use!
3367c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
33680 1a1 00 00 00 00 | flags           long    0
33684 1a2             | mask                                            'careful: shared register use!
33684 1a2 00 00 00 00 | resetmaskA      long    0
33688 1a3             | limit                                           'careful: shared register use!
33688 1a3 00 00 00 00 | resetmaskB      long    0
3368c 1a4 00 00 00 00 | datapins        long    0
33690 1a5             | const512                                        'careful: shared register use!
33690 1a5 00 00 00 00 | devicelist      long    0
33694 1a6 00 00 00 00 | coglist         long    0
33698 1a7 00 00 00 00 | mbox            long    0 
3369c 1a8             | 
3369c 1a8             | clkpin                                          'shared with code patched during init
3369c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
336a0 1a9             | cspin                                           'shared with code patched during init
336a0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
336a4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
336a8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
336ac 1ac 01 00 00 00 | clkdelay        long    1
336b0 1ad 00 00 00 00 | regdatabus      long    0
336b4 1ae             | 
336b4 1ae 10 00 00 00 | deviceaddr      long    $10
336b8 1af             | rrcounter
336b8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
336bc 1b0             | 
336bc 1b0             | ' jump addresses for the per COG handlers
336bc 1b0 20 00 00 00 | cog0_handler    long    cog0
336c0 1b1 2C 00 00 00 | cog1_handler    long    cog1
336c4 1b2 38 00 00 00 | cog2_handler    long    cog2
336c8 1b3 44 00 00 00 | cog3_handler    long    cog3
336cc 1b4 50 00 00 00 | cog4_handler    long    cog4
336d0 1b5 5C 00 00 00 | cog5_handler    long    cog5
336d4 1b6 68 00 00 00 | cog6_handler    long    cog6
336d8 1b7 74 00 00 00 | cog7_handler    long    cog7
336dc 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
336e0 1b9             | 
336e0 1b9             | ' EXECF sequences
336e0 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
336e4 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
336e8 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
336ec 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
336f0 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
336f4 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
336f8 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
336fc 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
336fc 1c0             | 
336fc 1c0             | 
336fc 1c0             | ' SKIPF sequences
336fc 1c0             | skiptable
336fc 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
33700 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
33704 1c2 00 00 00 00 |                 long    0                      ' read modify write long
33708 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3370c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
33710 1c5 00 00 00 00 | pattern2        long    0
33714 1c6 00 00 00 00 | pattern3        long    0
33718 1c7 77 02 00 00 | singlelong      long    %1001110111  
3371c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
33720 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
33724 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
33728 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3372c 1cc             | 
3372c 1cc             | ' LUT RAM address values
3372c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
33730 1cd DD 02 00 00 | continue_read   long    continue_read_lut
33734 1ce DB 02 00 00 | continue_write  long    continue_write_lut
33738 1cf F6 02 00 00 | noread          long    noread_lut
3373c 1d0             | 
3373c 1d0 00 00 00 00 | id0             long    0
33740 1d1 01 00 00 00 | id1             long    1
33744 1d2 02 00 00 00 | id2             long    2
33748 1d3 03 00 00 00 | id3             long    3
3374c 1d4 04 00 00 00 | id4             long    4
33750 1d5 05 00 00 00 | id5             long    5
33754 1d6 06 00 00 00 | id6             long    6
33758 1d7 07 00 00 00 | id7             long    7
3375c 1d8             | 
3375c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3375c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3375c 1d8 00 00 00 00 | addr1           long    0
33760 1d9 00 00 00 00 | hubdata         long    0
33764 1da 00 00 00 00 | count           long    0
33768 1db 00 00 00 00 | addr2           long    0
3376c 1dc 00 00 00 00 | total           long    0
33770 1dd 00 00 00 00 | offset1         long    0
33774 1de 00 00 00 00 | offset2         long    0
33778 1df 00 00 00 00 | link            long    0
3377c 1e0             | 
3377c 1e0             | burstwrite                                      'note shared register use during init
3377c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
33780 1e1 00 00 00 00 | id              long    0
33784 1e2             | 
33784 1e2 00 00 00 00 | header          long    0
33788 1e3 00 00 00 00 | trailer         long    0
3378c 1e4 00 00 00 00 | cmdaddr         long    0
33790 1e5 00 00 00 00 | request         long    0
33794 1e6 00 00 00 00 | rrlimit         long    0
33798 1e7 00 00 00 00 | pinconfig       long    0
3379c 1e8 00 00 00 00 | clks            long    0
337a0 1e9 00 00 00 00 | resume          long    0
337a4 1ea 00 00 00 00 | orighubsize     long    0
337a8 1eb 00 00 00 00 | wrclks          long    0
337ac 1ec             | 
337ac 1ec 00 00 00 00 | pattern         long    0
337b0 1ed 00 00 00 00 | hubscratch      long    0
337b4 1ee 00 10 00 00 | val4k           long    4096
337b8 1ef             | 
337b8 1ef             | ' temporary general purpose regs
337b8 1ef 00 00 00 00 | a               long    0
337bc 1f0 00 00 00 00 | b               long    0
337c0 1f1 00 00 00 00 | c               long    0
337c4 1f2 00 00 00 00 | d               long    0
337c8 1f3             |                 fit     502
337c8 1f3             | 
337c8 1f3             |                 fit     502
337c8 1f3             | 
337c8 1f3             | '..................................................................................................
337c8 1f3             | 
337c8 1f3             |             orgh
337c8                 | 
337c8                 | lut_code
337c8                 | 'HW init code up to 80 longs
337c8                 | 
337c8                 | '..................................................................................................
337c8                 | ' Memory layout for LUT RAM once operational:
337c8                 | '
337c8                 | '  LUT RAM address      Usage
337c8                 | '  ---------------      ----
337c8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
337c8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
337c8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
337c8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
337c8                 | '
337c8                 | ' Also during driver COG startup:
337c8                 | ' $230-$24F is used for HW init setup
337c8                 | ' $250-$26F is used as temporary vector storage 
337c8                 | '..................................................................................................
337c8                 | 
337c8                 |                 org $230    
337c8 230             | 
337c8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
337c8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
337cc 231 24 16 60 FD |                             pollxfi
337d0 232 FF AA 2A FF 
337d4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
337d8 234 28 00 B0 FD |                             call    #sendqspi
337dc 235 07 F8 07 FF 
337e0 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
337e4 237 28 00 B0 FD |                             call    #sendspi
337e8 238 F8 07 78 FF 
337ec 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
337f0 23a 1C 00 B0 FD |                             call    #sendspi
337f4 23b 7F 78 78 FF 
337f8 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
337fc 23d 10 00 B0 FD |                             call    #sendspi 
33800 23e 2D 00 64 FD |                             ret
33804 23f             | 
33804 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
33808 240 32 0C 64 FD |                             skipf   #%110
3380c 241 9C EF 03 F6 |                             mov     pb, xsendimm
33810 242             | 
33810 242 10 D0 07 F6 | sendspi                     mov     clks, #16
33814 243 97 EF 03 F6 |                             mov     pb, ximm8lut
33818 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3381c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
33820 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
33824 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
33828 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3382c 249 50 48 63 FD |                             fltl    datapins                'float data bus
33830 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
33834 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
33838 24c             | 
33838 24c 00 00 00 00 
3383c 24d 00 00 00 00 
33840 24e 00 00 00 00 
33844 24f 00 00 00 00 |                 long    0[$270-32-$]
33848 250             |                 fit     $270-32  ' keep room for 32 vector longs
33848 250             |     
33848 250             |                 fit     $270-32  ' keep room for 32 vector longs
33848 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
33848 250             | rw_vect ' PSRAM jump vectors
33848 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3384c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
33850 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
33854 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
33858 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3385c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
33860 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
33864 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
33868 258             | ro_vect ' R/O PSRAM jump vectors
33868 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3386c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
33870 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
33874 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
33878 25c 00 01 00 00 |                 long    unsupported
3387c 25d 00 01 00 00 |                 long    unsupported
33880 25e 00 01 00 00 |                 long    unsupported
33884 25f 00 01 00 00 |                 long    unsupported
33888 260             | ctrl_vect ' Control jump vectors
33888 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3388c 261 00 01 00 00 |                 long    unsupported
33890 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
33894 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
33898 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3389c 265 00 01 00 00 |                 long    unsupported
338a0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
338a4 267 3E 01 00 00 |                 long    reconfig 
338a8 268             | no_vect ' Invalid bank jump vectors
338a8 268 01 01 00 00 |                 long    invalidbank
338ac 269 01 01 00 00 |                 long    invalidbank
338b0 26a 01 01 00 00 |                 long    invalidbank
338b4 26b 01 01 00 00 |                 long    invalidbank
338b8 26c 01 01 00 00 |                 long    invalidbank
338bc 26d 01 01 00 00 |                 long    invalidbank
338c0 26e 01 01 00 00 |                 long    invalidbank
338c4 26f 01 01 00 00 |                 long    invalidbank
338c8 270             |                 fit     $270
338c8 270             | 
338c8 270             |                 fit     $270
338c8 270             | '..................................................................................................
338c8 270             | ' PSRAM READS
338c8 270             |                                                             ' a b c d e f
338c8 270             |                                                             ' B W L B R L  (a) byte read
338c8 270             |                                                             ' Y O O U E O  (b) word read
338c8 270             |                                                             ' T R N R S C  (c) long read
338c8 270             |                                                             ' E D G S U K  (d) new burst read
338c8 270             |                                                             '       T M E  (e) resumed sub-burst
338c8 270             |                                                             '         E D  (f) locked sub-burst
338c8 270             | 
338c8 270             | 
338c8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
338cc 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
338d0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
338d4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
338d8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
338dc 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
338e0 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
338e4 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
338e8 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
338ec 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
338f0 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
338f4 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
338f8 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
338fc 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
33900 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
33904 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
33908 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3390c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
33910 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
33914 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
33918 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3391c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
33920 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
33924 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
33928 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3392c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
33930 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
33934 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
33938 28c             | 
33938 28c             |                             ' fall through to read bursts
33938 28c             |                         
33938 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
33938 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3393c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
33940 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
33944 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
33948 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3394c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
33950 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
33954 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
33958 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3395c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
33960 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
33964 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
33968 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3396c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
33970 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
33974 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
33978 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3397c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
33980 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
33984 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
33988 2a0 E8 D1 03 F1 |                             add     clks, clks
3398c 2a1             | readcommon
3398c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
33990 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
33994 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
33998 2a4             | 
33998 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3399c 2a5 69 C8 63 FD |                             rev     cmdaddr
339a0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
339a4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
339a8 2a8             | 
339a8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
339ac 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
339b0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
339b0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
339b4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
339b8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
339bc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
339c0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
339c0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
339c4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
339c8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
339cc 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
339d0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
339d4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
339d8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
339d8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
339dc 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
339e0 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
339e4 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
339e8 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
339ec 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
339f0 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
339f4 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
339f8 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
339fc 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
33a00 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
33a04 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
33a08 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
33a0c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
33a10 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
33a10 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
33a14 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
33a18 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
33a1c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
33a20 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
33a24 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
33a28 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
33a2c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
33a30 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
33a34 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
33a38 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
33a3c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
33a40 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
33a44 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
33a48 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
33a4c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
33a50 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
33a54 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
33a58 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
33a5c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
33a60 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
33a64 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
33a68 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
33a6c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
33a70 2da 10 03 90 FD |                             jmp     #writecommon
33a74 2db             | 
33a74 2db             | '..................................................................................................
33a74 2db             | ' Burst continuation testing
33a74 2db             | 
33a74 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
33a78 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
33a7c 2dd             | continue_read_lut          
33a7c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
33a80 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
33a84 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
33a88 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
33a8c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
33a90 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
33a94 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
33a98 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
33a9c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
33aa0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
33aa4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
33aa8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
33aac 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
33ab0 2ea             | 
33ab0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
33ab4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
33ab8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
33abc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
33ac0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
33ac4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
33ac8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
33acc 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
33ad0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
33ad4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
33ad8 2f4 2A 1C 66 0D |             _ret_           push    #poller
33adc 2f5             | 
33adc 2f5             | 
33adc 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
33ae0 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
33ae0 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
33ae4 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
33ae8 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
33aec 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
33af0 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
33af4 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
33af8 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
33afc 2fd 2D 00 64 FD |                             ret                             ' | continue processing
33b00 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
33b04 2ff             | '..................................................................................................
33b04 2ff             | ' Completion of requests
33b04 2ff             | 
33b04 2ff             | complete_rw_lut             
33b04 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
33b08 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
33b0c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
33b10 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
33b14 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
33b18 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
33b1c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
33b20 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
33b24 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
33b28 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
33b2c 309 32 62 64 AD |             if_z            skipf   #%110001
33b30 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
33b34 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
33b38 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
33b3c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
33b40 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
33b44 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
33b48 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
33b4c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
33b50 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
33b54 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
33b58 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
33b5c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
33b60 316             |                                                             ' skipcase (a) gfx copy to/from hub
33b60 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
33b60 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
33b60 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
33b64 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
33b68 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
33b6c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
33b70 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
33b74 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
33b78 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
33b7c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
33b80 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
33b84 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
33b88 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
33b8c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
33b90 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
33b94 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
33b98 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
33b9c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
33ba0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
33ba4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
33ba8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
33bac 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
33bb0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
33bb4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
33bb8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
33bbc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
33bc0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
33bc4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
33bc8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
33bcc 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
33bd0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
33bd4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
33bd8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
33bdc 335 DF B7 03 A6 |             if_z            mov     addr2, link
33be0 336 34 FF 9F AD |             if_z            jmp     #checknext
33be4 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
33be8 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
33bec 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
33bf0 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
33bf4 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
33bf8 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
33bfc 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
33c00 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
33c04 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
33c08 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
33c0c 341             | 
33c0c 341             | '..................................................................................................
33c0c 341             | ' PSRAM WRITES
33c0c 341             |                                                             '  a b c d e f g h
33c0c 341             | 
33c0c 341             |                                                             '  B W L F B R L L (a) byte write(s)
33c0c 341             |                                                             '  Y O O I U E O O (b) word write(s)
33c0c 341             |                                                             '  T R N L R S C C (c) long write(s)
33c0c 341             |                                                             '  E D G L S U K K (d) resumed fill
33c0c 341             |                                                             '          T M E E (e) new burst write
33c0c 341             |                                                             '            E D D (f) resumed burst
33c0c 341             |                                                             '              F B (g) locked fill
33c0c 341             |                                                             '              I U (h) locked burst write
33c0c 341             |                                                             '              L R 
33c0c 341             |                                                             '              L S 
33c0c 341             |                                                             '                T 
33c0c 341             | 
33c0c 341             | w_single                   
33c0c 341             | w_fill_cont           
33c0c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
33c10 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
33c14 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
33c18 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
33c1c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
33c20 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
33c24 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
33c28 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
33c2c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
33c30 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
33c34 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
33c38 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
33c3c 34d             |                ' disable call to r_resume_burst for single longs when z=0
33c3c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
33c40 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
33c44 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
33c48 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
33c4c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
33c50 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
33c54 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
33c58 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
33c5c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
33c60 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
33c64 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
33c68 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
33c6c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
33c70 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
33c74 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
33c78 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
33c7c 35d             |         
33c7c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
33c7c 35d             |             '
33c7c 35d             |             '  At least one of these 3 optional components will be sent
33c7c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
33c7c 35d             |             '     body - N x full longs of data
33c7c 35d             |             '     trailer - last partial long of data
33c7c 35d             |             '
33c7c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
33c7c 35d             |             '
33c7c 35d             |             'Case    Type                           Sends
33c7c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
33c7c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
33c7c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
33c7c 35d             |             ' 4)     Multiple long fill             body only
33c7c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
33c7c 35d             | 
33c7c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
33c7c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
33c80 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
33c84 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
33c88 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
33c8c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
33c90 362 13 8C 07 F6 |                             mov     pattern3, #%10011
33c94 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
33c98 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
33c9c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
33ca0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
33ca4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
33ca8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
33cac 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
33cb0 36a             |                             
33cb0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
33cb4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
33cb8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
33cbc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
33cc0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
33cc4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
33cc8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
33ccc 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
33cd0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
33cd4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
33cd8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
33cdc 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
33ce0 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
33ce4 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
33ce8 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
33cec 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
33cf0 37a             | 
33cf0 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
33cf4 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
33cf8 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
33cfc 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
33d00 37e             |                  
33d00 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
33d04 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
33d08 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
33d0c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
33d10 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
33d14 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
33d18 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
33d1c 385             | 
33d1c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
33d20 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
33d24 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
33d28 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
33d2c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
33d30 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
33d34 38b             | 
33d34 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
33d34 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
33d38 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
33d3c 38d 2A B0 63 FD |                             push    addr1                   'save address
33d40 38e             | 
33d40 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
33d40 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
33d44 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
33d48 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
33d4c 391             |             
33d4c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
33d50 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
33d54 393 2B B0 63 FD |                             pop     addr1                   'restore address
33d58 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
33d5c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
33d60 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
33d64 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
33d68 398             | 
33d68 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
33d6c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
33d70 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
33d74 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
33d78 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
33d7c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
33d80 39e             | 
33d80 39e             |                             'trailer is done
33d80 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
33d84 39f             | 
33d84 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
33d88 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
33d8c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
33d90 3a2             | 
33d90 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
33d94 3a3 69 C8 63 FD |                             rev     cmdaddr                 
33d98 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
33d9c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
33da0 3a6             |                             
33da0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
33da4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
33da8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
33dac 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
33db0 3aa             |                                                          
33db0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
33db4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
33db8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
33dbc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
33dc0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
33dc4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
33dc8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
33dcc 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
33dd0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
33dd4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
33dd8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
33ddc 3b5             |  
33ddc 3b5 59 52 63 FD |                             drvh    cspin
33de0 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
33de4 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
33de8 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
33dec 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
33df0 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
33df4 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
33df8 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
33dfc 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
33e00 3be EA E5 03 F6 |                             mov     d, orighubsize
33e04 3bf EF E5 63 F0 |                             shl     d, a
33e08 3c0 F2 E3 83 F1 |                             sub     c, d
33e0c 3c1 DD E3 03 F1 |                             add     c, offset1
33e10 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
33e14 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
33e18 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
33e1c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
33e20 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
33e24 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
33e28 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
33e2c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
33e30 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
33e34 3cb BB D3 03 F6 |                             mov     resume, restorefill
33e38 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
33e3c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
33e40 3ce 6C FC BF CD |             if_c            call    #yield
33e44 3cf 2D 00 64 FD |                             ret
33e48 3d0             |                            
33e48 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
33e48 3d0             |                       '     rczl    pa                      'rotate left into address offset
33e48 3d0             |                       '     rczl    c wcz                   'restore count and flags
33e48 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
33e4c 3d1 02 EC 67 F0 |                             shl     pa, #2
33e50 3d2 28 06 64 AD |             if_z            setq    #3
33e54 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
33e58 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
33e5c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
33e60 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
33e64 3d7             | 
33e64 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
33e68 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
33e6c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
33e70 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
33e74 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
33e78 3dc             |                 fit 1024-32
33e78 3dc             |         
33e78 3dc             | 
33e78 3dc             | '..................................................................................................
33e78 3dc             | 
33e78 3dc             |                 fit 1024-32
33e78 3dc 00 00 00 00 
33e7c 3dd 00 00 00 00 
33e80 3de 00 00 00 00 
33e84 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
33e88 3e0             |                 org 1024-32
33e88 000             | 
33e88 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
33e88 000 00 00 00 00 |                 long $0000
33e8c 001 11 11 00 00 |                 long $1111
33e90 002 22 22 00 00 |                 long $2222
33e94 003 33 33 00 00 |                 long $3333
33e98 004 44 44 00 00 |                 long $4444
33e9c 005 55 55 00 00 |                 long $5555
33ea0 006 66 66 00 00 |                 long $6666
33ea4 007 77 77 00 00 |                 long $7777
33ea8 008 88 88 00 00 |                 long $8888
33eac 009 99 99 00 00 |                 long $9999
33eb0 00a AA AA 00 00 |                 long $aaaa
33eb4 00b BB BB 00 00 |                 long $bbbb
33eb8 00c CC CC 00 00 |                 long $cccc
33ebc 00d DD DD 00 00 |                 long $dddd
33ec0 00e EE EE 00 00 |                 long $eeee
33ec4 00f FF FF 00 00 |                 long $ffff
33ec8 010             | 
33ec8 010             | 'masks
33ec8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
33ecc 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
33ed0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
33ed4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
33ed8 014             | 
33ed8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
33edc 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
33ee0 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
33ee4 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
33ee8 018             | 
33ee8 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
33eec 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
33ef0 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
33ef4 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
33ef8 01c             | 
33ef8 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
33efc 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
33f00 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
33f04 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
33f08 020             |         fit 1024
33f08 020             | 
33f08 020             |         fit 1024
33f08 020             | 
33f08 020             | '--------------------------------------------------------------------------------------------------
33f08 020             |         orgh
33f08                 | 
33f08                 | gfxexpansion
33f08                 |                             'simple line drawing graphics expansion of memory driver
33f08                 |                             'jmp     #donerepeats                'just return for now
33f08                 | 
33f08     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
33f0c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
33f10     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
33f14     DD E1 03 F6 |                             mov     b, offset1              'get error term
33f18     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
33f1c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
33f20     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
33f24     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
33f28     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
33f2c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
33f30     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
33f34     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
33f38     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
33f3c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
33f40     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
33f44     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
33f48     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
33f4c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
33f50     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
33f54     DC E5 33 F9 |                             getword d, total, #0            'get line width
33f58     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
33f5c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
33f60     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
33f64     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
33f68     C3 03 80 FD |                             jmp     #readmask               'continue filling
33f6c                 | 	alignl
33f6c                 | _usbnew_spin2_dat_
33f6c                 |                 org     $000
33f6c 000             | 
33f6c 000             | usb_host_start
33f6c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
33f70 001             | 
33f70 001 03 00 00 FF 
33f74 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
33f78 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
33f7c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
33f80 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
33f84 006 29 70 63 FD |                 setq2   htmp
33f88 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
33f8c 008             | 
33f8c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
33f90 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
33f94 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
33f98 00b             | 
33f98 00b             | '------------------------------------------------------------------------------
33f98 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
33f98 00b             | ' special because the receiving function must not respond with either STALL or
33f98 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
33f98 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
33f98 00b             | ' corrupt packet, it must ignore the transaction
33f98 00b             | '------------------------------------------------------------------------------
33f98 00b             | ' On entry:
33f98 00b             | '   PTRA - start address of the SETUP data struct.
33f98 00b             | ' On exit:
33f98 00b             | '   retval - PID_ACK on success, otherwise error code.
33f98 00b             | '------------------------------------------------------------------------------
33f98 00b             | txn_setup
33f98 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
33f9c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
33fa0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
33fa4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
33fa8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
33fac 010             | .setup
33fac 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
33fb0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33fb4 012 2D 00 64 AD |         if_z    ret
33fb8 013 7C 0B B0 FD |                 call    #retry_wait
33fbc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33fc0 015 2D 00 64 AD |         if_z    ret
33fc4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
33fc8 017 E0 FF 9F FD |                 jmp     #.setup
33fcc 018             | 
33fcc 018             | '------------------------------------------------------------------------------
33fcc 018             | ' IN/INTERRUPT transaction.
33fcc 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
33fcc 018             | '------------------------------------------------------------------------------
33fcc 018             | ' On entry:
33fcc 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
33fcc 018             | '     CRC(b19..23).
33fcc 018             | ' On exit:
33fcc 018             | '------------------------------------------------------------------------------
33fcc 018             | txn_in
33fcc 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
33fd0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
33fd4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
33fd8 01b             | 
33fd8 01b             |                 ' Fall through to urx_packet
33fd8 01b             | 
33fd8 01b             | '------------------------------------------------------------------------------
33fd8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
33fd8 01b             | ' received are handshakes and IN DATAx.
33fd8 01b             | '------------------------------------------------------------------------------
33fd8 01b             | ' On entry:
33fd8 01b             | ' On exit:
33fd8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
33fd8 01b             | '     returned.
33fd8 01b             | '------------------------------------------------------------------------------
33fd8 01b             | urx_packet
33fd8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
33fdc 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33fe0 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
33fe4 01e 1A 92 63 FD |                 getct   hct2
33fe8 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
33fec 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
33ff0 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
33ff4 022             | .wait_sop
33ff4 022 22 A7 8A FA |                 rdpin   urx, dm
33ff8 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33ffc 024 08 00 90 CD |         if_c    jmp     #.get_pid
34000 025 FC 25 CC FB |                 jnct2   #.wait_sop
34004 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
34008 027             | .get_pid
34008 027 28 02 B0 FD |                 call    #urx_next
3400c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
34010 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
34014 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
34018 02b             | .chk_pid
34018 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3401c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
34020 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
34024 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
34028 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3402c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
34030 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
34034 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
34038 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3403c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
34040 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
34044 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
34048 037             | .ack_resend
34048 037 22 A7 82 FA |                 rqpin   urx, dm
3404c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
34050 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
34054 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
34058 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3405c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
34060 03d             | .chk_eop
34060 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
34064 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
34068 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3406c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
34070 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
34074 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
34078 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3407c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
34080 045 2D 00 64 FD |                 ret
34084 046             | .idle
34084 046 22 A7 82 FA |                 rqpin   urx, dm
34088 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3408c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
34090 049 2D 00 64 FD |                 ret
34094 04a             | 
34094 04a             | '------------------------------------------------------------------------------
34094 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
34094 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
34094 04a             | ' if one is required.
34094 04a             | '------------------------------------------------------------------------------
34094 04a             | ' On entry:
34094 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
34094 04a             | ' On exit:
34094 04a             | '------------------------------------------------------------------------------
34094 04a             | utx_token
34094 04a 22 A7 82 FA |                 rqpin   urx, dm
34098 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3409c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
340a0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
340a4 04e 34 0D B0 CD |         if_c    call    #utx_pre
340a8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
340ac 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
340b0 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
340b4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
340b8 053             | .next_byte
340b8 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
340bc 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
340c0 055             | .wait
340c0 055 40 46 72 FD |                 testp   dp                      wc
340c4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
340c8 057 23 03 08 FC |                 akpin   dp
340cc 058 22 A5 22 FC |                 wypin   utx, dm
340d0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
340d4 05a             | 
340d4 05a             | '------------------------------------------------------------------------------
340d4 05a             | ' SETUP/OUT/INTERRUPT transaction.
340d4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
340d4 05a             | '------------------------------------------------------------------------------
340d4 05a             | ' On entry:
340d4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
340d4 05a             | '     CRC(b19..23).
340d4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
340d4 05a             | '   pkt_data - count of DATAx payload bytes to send.
340d4 05a             | ' On exit:
340d4 05a             | '------------------------------------------------------------------------------
340d4 05a             | txn_out
340d4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
340d8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
340dc 05c 00 00 C0 FF 
340e0 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
340e4 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
340e8 05f             | 
340e8 05f             |                 ' Fall through to utx_data
340e8 05f             | 
340e8 05f             | '------------------------------------------------------------------------------
340e8 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
340e8 05f             | ' calculated while the data byte is being shifted out. Since data stage
340e8 05f             | ' success/fail is not determined until the status stage of the transaction,
340e8 05f             | ' this routine is only concerned about the current DATAx packet.
340e8 05f             | '------------------------------------------------------------------------------
340e8 05f             | ' On entry:
340e8 05f             | '   PTRA - hub start address of the data to read.
340e8 05f             | '   pkt_cnt - data payload size.
340e8 05f             | ' On exit:
340e8 05f             | '------------------------------------------------------------------------------
340e8 05f             | utx_data
340e8 05f 22 A7 82 FA |                 rqpin   urx, dm
340ec 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
340f0 061 F4 FF 9F CD |         if_c    jmp     #utx_data
340f4 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
340f8 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
340fc 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
34100 065 D8 0C B0 CD |         if_c    call    #utx_pre
34104 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
34108 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3410c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
34110 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
34114 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
34118 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3411c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
34120 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
34124 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
34128 06f             | .read_byte
34128 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3412c 070 F0 00 B0 FD |                 call    #utx_byte
34130 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
34134 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
34138 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3413c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
34140 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
34144 076             | .send_crc
34144 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
34148 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3414c 078 D0 00 B0 FD |                 call    #utx_byte
34150 079 5D A5 EA F8 |                 getbyte utx, crc, #1
34154 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
34158 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3415c 07c             | 
3415c 07c             | '------------------------------------------------------------------------------
3415c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3415c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3415c 07c             | ' expects that the packet includes at least the CRC word.
3415c 07c             | '
3415c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3415c 07c             | ' was requested, which makes it difficult to determine where the data stops
3415c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3415c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3415c 07c             | ' USB-16 expected residual value of 0xB001.
3415c 07c             | '
3415c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3415c 07c             | ' so the caller can verify IN success before writing the data to its final
3415c 07c             | ' destination.
3415c 07c             | '------------------------------------------------------------------------------
3415c 07c             | ' On entry:
3415c 07c             | '   pkt_data - max byte count expected to be in the packet.
3415c 07c             | '   newb_flg - signals new byte ready when toggled.
3415c 07c             | ' On exit:
3415c 07c             | '   pkt_cnt - actual number of bytes read.
3415c 07c             | '------------------------------------------------------------------------------
3415c 07c             | urx_data
3415c 07c F7 75 03 F6 |                 mov     htmp2, pb
34160 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
34164 07e 00 00 C0 FF 
34168 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3416c 080 BA EF 03 F6 |                 mov     pb, htmp2
34170 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
34174 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
34178 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3417c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
34180 085             | .wait_byte
34180 085             | ' In-line rx for max speed
34180 085 22 A7 82 FA |                 rqpin   urx, dm
34184 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
34188 087 53 A5 02 F5 |                 and     utx, urx
3418c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
34190 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
34194 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
34198 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3419c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
341a0 08d DC FF 9F FD |                 jmp     #.wait_byte
341a4 08e             | .get_byte
341a4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
341a8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
341ac 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
341b0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
341b4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
341b8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
341bc 094             | .end_crc
341bc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
341c0 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
341c4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
341c8 097 2D 00 64 1D |         if_a    ret
341cc 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
341cc 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
341cc 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
341cc 098             | ' to miss it, so cheat a bit and look for SOP clear here.
341cc 098 22 A7 82 FA |                 rqpin   urx, dm
341d0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
341d4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
341d8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
341d8 09b             | .chk_crc
341d8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
341dc 09c 58 00 00 FF 
341e0 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
341e4 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
341e8 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
341ec 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
341f0 0a1 34 09 B0 FD |                 call    #poll_waitx
341f4 0a2             | 
341f4 0a2             |                 ' Fall through to utx_handshake
341f4 0a2             | 
341f4 0a2             | '------------------------------------------------------------------------------
341f4 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
341f4 0a2             | ' the appropriate IP delay has been inserted.
341f4 0a2             | '------------------------------------------------------------------------------
341f4 0a2             | ' On entry:
341f4 0a2             | '   retval - handshake PID to send.
341f4 0a2             | ' On exit:
341f4 0a2             | '   retval unchanged.
341f4 0a2             | '------------------------------------------------------------------------------
341f4 0a2             | utx_handshake
341f4 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
341f8 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
341fc 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
34200 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
34204 0a6 5F A5 02 F6 |                 mov     utx, retval
34208 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3420c 0a8             | .idle
3420c 0a8 22 A7 82 FA |                 rqpin   urx, dm
34210 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
34214 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
34218 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3421c 0ac 08 09 90 FD |                 jmp     #poll_waitx
34220 0ad             | 
34220 0ad             | '------------------------------------------------------------------------------
34220 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
34220 0ad             | '------------------------------------------------------------------------------
34220 0ad             | ' On entry:
34220 0ad             | '   utx - byte to transmit.
34220 0ad             | ' On exit:
34220 0ad             | '------------------------------------------------------------------------------
34220 0ad             | utx_byte
34220 0ad 40 46 72 FD |                 testp   dp                      wc
34224 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
34228 0af 23 03 08 FC |                 akpin   dp
3422c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
34230 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
34234 0b2             | 
34234 0b2             | '------------------------------------------------------------------------------
34234 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
34234 0b2             | '------------------------------------------------------------------------------
34234 0b2             | ' On entry:
34234 0b2             | ' On exit:
34234 0b2             | '   retval - the byte read.
34234 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
34234 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
34234 0b2             | '     received.
34234 0b2             | '------------------------------------------------------------------------------
34234 0b2             | urx_next
34234 0b2 22 A7 8A FA |                 rdpin   urx, dm
34238 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3423c 0b4 53 A5 02 F5 |                 and     utx, urx
34240 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
34244 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
34248 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3424c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
34250 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
34254 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
34258 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3425c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
34260 0bd 2D 00 64 FD |                 ret
34264 0be             | 
34264 0be             | '------------------------------------------------------------------------------
34264 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
34264 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
34264 0be             | ' length, and the PID is not included in the CRC calculation:
34264 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
34264 0be             | '  CRC5  ENDP ADDRESS PID
34264 0be             | ' %00000_1111_1111111_xxxxxxxx
34264 0be             | '------------------------------------------------------------------------------
34264 0be             | ' On entry:
34264 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
34264 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
34264 0be             | ' On exit:
34264 0be             | '   ep_addr_pid - CRC value appended to the packet.
34264 0be             | '------------------------------------------------------------------------------
34264 0be             | calc_crc5
34264 0be FF 03 00 FF 
34268 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3426c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
34270 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
34274 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
34278 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3427c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
34280 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
34284 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
34288 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3428c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
34290 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
34294 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
34298 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3429c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
342a0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
342a4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
342a8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
342ac 0d0             | 
342ac 0d0             | '------------------------------------------------------------------------------
342ac 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
342ac 0d0             | '------------------------------------------------------------------------------
342ac 0d0             | isr1_fsframe
342ac 0d0 1A 92 62 FD |                 getct   iframe_ct_base
342b0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
342b4 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
342b8 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
342bc 0d4             | .wait
342bc 0d4 40 46 72 FD |                 testp   dp                      wc
342c0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
342c4 0d6 23 03 08 FC |                 akpin   dp
342c8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
342cc 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
342d0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
342d4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
342d8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
342dc 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
342e0 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
342e4 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
342e8 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
342ec 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
342f0 0e1 2C FF BF FD |                 call    #utx_byte
342f4 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
342f8 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
342fc 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
34300 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
34304 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
34308 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3430c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
34310 0e9 5B A5 42 F5 |                 or      utx, icrc
34314 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
34318 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3431c 0ec 20 00 90 FD |                 jmp     #isr1_wait
34320 0ed             | isr1_lsframe
34320 0ed 1A 92 62 FD |                 getct   iframe_ct_base
34324 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
34328 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3432c 0f0             | .wait
3432c 0f0 40 46 72 FD |                 testp   dp                      wc
34330 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
34334 0f2 23 03 08 FC |                 akpin   dp
34338 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3433c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
34340 0f5             | isr1_wait
34340 0f5 22 A5 82 FA |                 rqpin   utx, dm
34344 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
34348 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3434c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
34350 0f9 03 00 00 FF 
34354 0fa FF B3 06 F5 |                 and     frame, ##$7ff
34358 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3435c 0fc F5 FF 3B FB |                 reti1
34360 0fd             | 
34360 0fd             | '------------------------------------------------------------------------------
34360 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
34360 0fd             | ' transaction will complete before the next frame is triggered.
34360 0fd             | '------------------------------------------------------------------------------
34360 0fd             | ' On entry:
34360 0fd             | ' On exit:
34360 0fd             | '------------------------------------------------------------------------------
34360 0fd             | wait_txn_ok
34360 0fd 1A 74 63 FD |                 getct   htmp2
34364 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
34368 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3436c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
34370 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
34374 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
34378 103 2D 00 64 FD |                 ret
3437c 104             | 
3437c 104             | '------------------------------------------------------------------------------
3437c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3437c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3437c 104             | ' and perform a reset sequence prior to device enumeration.
3437c 104             | '------------------------------------------------------------------------------
3437c 104             | dev_reset
3437c 104 22 A7 82 FA |                 rqpin   urx, dm
34380 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
34384 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
34388 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3438c 108             | reset
3438c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
34390 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
34394 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
34398 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3439c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
343a0 10d 1A 92 62 FD |                 getct   iframe_ct_base
343a4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
343a8 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
343ac 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
343b0 111 24 70 07 F1 |                 add     htmp, #36
343b4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
343b8 113             | .framewait
343b8 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
343bc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
343c0 115 2D 00 64 FD |                 ret
343c4 116             | 
343c4 116             | '------------------------------------------------------------------------------
343c4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
343c4 116             | '------------------------------------------------------------------------------
343c4 116             | ' On entry:
343c4 116             | '   PTRA - source address.
343c4 116             | '   PB - destination address.
343c4 116             | '   hr0 - length of copy, in bytes.
343c4 116             | ' On exit:
343c4 116             | '------------------------------------------------------------------------------
343c4 116             | hmemcpy
343c4 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
343c8 117 F7 71 43 FC |                 wrbyte  htmp, pb
343cc 118 01 EE 07 F1 |                 add     pb, #1
343d0 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
343d4 11a             | 
343d4 11a             | '------------------------------------------------------------------------------
343d4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
343d4 11a             | ' loop until the errant device is disconnected.
343d4 11a             | '------------------------------------------------------------------------------
343d4 11a             | ' On entry:
343d4 11a             | ' On exit:
343d4 11a             | '------------------------------------------------------------------------------
343d4 11a             | host_error
343d4 11a             |           if ERROR_LED >= 0
343d4 11a             |           end
343d4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
343d8 11b             | 
343d8 11b             | '------------------------------------------------------------------------------
343d8 11b             | ' Get HID descriptor buffer for current port
343d8 11b             | '------------------------------------------------------------------------------
343d8 11b             | ' On entry:
343d8 11b             | ' On exit:
343d8 11b             | '   PB - HID descriptor buffer pointer
343d8 11b             | '------------------------------------------------------------------------------
343d8 11b             | get_hid_descr_buffer
343d8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
343dc 11c 01 EE E7 F2 |                 cmpsub  pb, #1
343e0 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
343e4 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
343e8 11f             | 
343e8 11f             | 
343e8 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
343ec 120             | 
343ec 120             | ' USB commands and error codes
343ec 120 00 00 00 00 | cmd_data        long    0
343f0 121 00 00 00 00 | usb_err_code    long    ERR_NONE
343f4 122             | 
343f4 122             | ' Parameters block assigned at cog startup
343f4 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
343f8 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
343fc 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
34400 125             | if ACTIVITY_LED >= 0
34400 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
34400 125             | end
34400 125             | if ERROR_LED >= 0
34400 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
34400 125             | end
34400 125 00 00 00 00 | hid_descr_p     long    0
34404 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
34404 126             | 'hkbd_report_p   long    0
34404 126 00 00 00 00 | hub_descr_p     long    0
34408 127 00 00 00 00 | urx_buff_p      long    0
3440c 128 00 00 00 00 | dev_desc_buff_p long    0
34410 129 00 00 00 00 | con_desc_buff_p long    0
34414 12a 00 00 00 00 | cache_start_p   long    0
34418 12b 00 00 00 00 | cache_end_p     long    0
3441c 12c             | if EMUPAD_MAX_PLAYER > 0
3441c 12c             | emupad_out_ptr  long    0
3441c 12c             | end
3441c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
34420 12d             | 
34420 12d             | hdev_init_start
34420 12d             | hdev_port       res     1
34420 12d             | hdev_port       res     1
34420 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
34420 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
34420 12d             | kbm_next_datax  res     1
34420 12d             | kbm_next_datax  res     1
34420 12d             | hub_intf_num    res     1
34420 12d             | hub_intf_num    res     1
34420 12d             | hub_next_datax  res     1
34420 12d             | hub_next_datax  res     1
34420 12d             | hub_status_chg  res     1
34420 12d             | hub_status_chg  res     1
34420 12d             | hub_port_status res     1
34420 12d             | hub_port_status res     1
34420 12d             | if HAVE_MOUSE
34420 12d             | ms_intf_num     res     1
34420 12d             | ms_intf_num     res     1
34420 12d             | ms_in_max_pkt   res     1
34420 12d             | ms_in_max_pkt   res     1
34420 12d             | end
34420 12d             | kb_intf_num     res     1
34420 12d             | kb_intf_num     res     1
34420 12d             | kb_interval     res     1
34420 12d             | kb_interval     res     1
34420 12d             | kb_in_max_pkt   res     1
34420 12d             | kb_in_max_pkt   res     1
34420 12d             | kb_max_index    res     1
34420 12d             | kb_max_index    res     1
34420 12d             | kb_led_states   res     1
34420 12d             | kb_led_states   res     1
34420 12d             | gp_intf_num     res     1
34420 12d             | gp_intf_num     res     1
34420 12d             | gp_interval     res     1
34420 12d             | gp_interval     res     1
34420 12d             | gp_max_index    res     1
34420 12d             | gp_max_index    res     1
34420 12d             | gp_descr_len    res     1+MAX_DEVICES
34420 12d             | gp_descr_len    res     1+MAX_DEVICES
34420 12d             | hdev_init_end
34420 12d             | 
34420 12d             | ' Initialized at cog startup:
34420 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
34420 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
34420 12d             | iframe_ct_new   res     1
34420 12d             | iframe_ct_new   res     1
34420 12d             | iframe_ct_base  res     1
34420 12d             | iframe_ct_base  res     1
34420 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
34420 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
34420 12d             | 
34420 12d             | ' This register block is reset to zero when a USB device connects
34420 12d             | hreg_init_start
34420 12d             | hstatus         res     1         ' Host status flags
34420 12d             | hstatus         res     1         ' Host status flags
34420 12d             | hctwait         res     1         ' Poll-based wait clocks
34420 12d             | hctwait         res     1         ' Poll-based wait clocks
34420 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
34420 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
34420 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
34420 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
34420 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
34420 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
34420 12d             | xfer_retry      res     1         ' Control transfer retry count
34420 12d             | xfer_retry      res     1         ' Control transfer retry count
34420 12d             | retry           res     1         ' Transaction retry count
34420 12d             | retry           res     1         ' Transaction retry count
34420 12d             | utx             res     1         ' Byte to transmit on USB
34420 12d             | utx             res     1         ' Byte to transmit on USB
34420 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
34420 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
34420 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
34420 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
34420 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
34420 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
34420 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
34420 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
34420 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
34420 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
34420 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
34420 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
34420 12d             | frame           res     1         ' USB 1ms frame counter value
34420 12d             | frame           res     1         ' USB 1ms frame counter value
34420 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
34420 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
34420 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
34420 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
34420 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
34420 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
34420 12d             | crc             res     1         ' Used for CRC16 calculation
34420 12d             | crc             res     1         ' Used for CRC16 calculation
34420 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
34420 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
34420 12d             | retval          res     1         ' Global success/fail return parameter
34420 12d             | retval          res     1         ' Global success/fail return parameter
34420 12d             | context_retval  res     1         ' Operation contextual return parameter
34420 12d             | context_retval  res     1         ' Operation contextual return parameter
34420 12d             | ' Device stuff
34420 12d             | hdev_id         res     1+MAX_DEVICES
34420 12d             | hdev_id         res     1+MAX_DEVICES
34420 12d             | hdev_bcd        res     1
34420 12d             | hdev_bcd        res     1
34420 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
34420 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
34420 12d             | ' Keyboard/mouse stuff
34420 12d             | hctrl_ep_addr   res     1
34420 12d             | hctrl_ep_addr   res     1
34420 12d             | hctrl_max_pkt   res     1
34420 12d             | hctrl_max_pkt   res     1
34420 12d             | hconfig_base    res     1
34420 12d             | hconfig_base    res     1
34420 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
34420 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
34420 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
34420 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
34420 12d             | hdev_class      res     1
34420 12d             | hdev_class      res     1
34420 12d             | hdev_subclass   res     1
34420 12d             | hdev_subclass   res     1
34420 12d             | hdev_protocol   res     1
34420 12d             | hdev_protocol   res     1
34420 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
34420 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
34420 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
34420 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
34420 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
34420 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
34420 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
34420 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
34420 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
34420 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
34420 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
34420 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
34420 12d             | if HAVE_MOUSE
34420 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
34420 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
34420 12d             | end
34420 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
34420 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
34420 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
34420 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
34420 12d             | hdev_ep_addr    res     1+MAX_DEVICES
34420 12d             | hdev_ep_addr    res     1+MAX_DEVICES
34420 12d             | hdev_out_addr   res     1
34420 12d             | hdev_out_addr   res     1
34420 12d             | 
34420 12d             | if EMUPAD_MAX_PLAYER > 0
34420 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
34420 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
34420 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
34420 12d             | end
34420 12d             | 
34420 12d             | hreg_init_end
34420 12d             | 
34420 12d             | hidr_start
34420 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
34420 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
34420 12d             | hidr_flags      res     1
34420 12d             | hidr_flags      res     1
34420 12d             | hidr_axis       res     3
34420 12d             | hidr_axis       res     3
34420 12d             | hidr_buttons    res     1
34420 12d             | hidr_buttons    res     1
34420 12d             | hidr_hats       res     1
34420 12d             | hidr_hats       res     1
34420 12d             | '' Above are actually useful values, 6 longs
34420 12d             | hidr_id         res     1
34420 12d             | hidr_id         res     1
34420 12d             | hidr_state      res     1
34420 12d             | hidr_state      res     1
34420 12d             | hidr_size       res     1
34420 12d             | hidr_size       res     1
34420 12d             | hidr_count      res     1
34420 12d             | hidr_count      res     1
34420 12d             | hidr_offset     res     1
34420 12d             | hidr_offset     res     1
34420 12d             | hidr_usage_idx  res     1
34420 12d             | hidr_usage_idx  res     1
34420 12d             | hidr_lminmax    res     1
34420 12d             | hidr_lminmax    res     1
34420 12d             | hidr_pminmax    res     1
34420 12d             | hidr_pminmax    res     1
34420 12d             | hidr_type       res     1
34420 12d             | hidr_type       res     1
34420 12d             | hidr_end
34420 12d             | 
34420 12d             | ' Variables dependent on the system freqency
34420 12d             | _var_64_lower_  res     1
34420 12d             | _var_64_lower_  res     1
34420 12d             | _var_64_upper_  res     1
34420 12d             | _var_64_upper_  res     1
34420 12d             | _12Mbps_        res     1
34420 12d             | _12Mbps_        res     1
34420 12d             | _1_5Mbps_       res     1
34420 12d             | _1_5Mbps_       res     1
34420 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
34420 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
34420 12d             | _1us_           res     1         ' 1us
34420 12d             | _1us_           res     1         ' 1us
34420 12d             | _10us_          res     1         ' 10us
34420 12d             | _10us_          res     1         ' 10us
34420 12d             | _33us_          res     1         ' 33us
34420 12d             | _33us_          res     1         ' 33us
34420 12d             | _txn_err_       res     1         ' 250us
34420 12d             | _txn_err_       res     1         ' 250us
34420 12d             | _500us_         res     1         ' 500us
34420 12d             | _500us_         res     1         ' 500us
34420 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
34420 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
34420 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
34420 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
34420 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
34420 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
34420 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
34420 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
34420 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
34420 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
34420 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
34420 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
34420 12d             | _preamble_wait_ res     1
34420 12d             | _preamble_wait_ res     1
34420 12d             | _1ms_           res     1         ' 1ms
34420 12d             | _1ms_           res     1         ' 1ms
34420 12d             | _2ms_           res     1         ' 2ms
34420 12d             | _2ms_           res     1         ' 2ms
34420 12d             | _suspend_wait_  res     1         ' 3ms
34420 12d             | _suspend_wait_  res     1         ' 3ms
34420 12d             | _4ms_           res     1         ' 4ms
34420 12d             | _4ms_           res     1         ' 4ms
34420 12d             | _xfer_wait_     res     1         ' 5ms
34420 12d             | _xfer_wait_     res     1         ' 5ms
34420 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
34420 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
34420 12d             | _reset_hold_    res     1         ' 15ms
34420 12d             | _reset_hold_    res     1         ' 15ms
34420 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
34420 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
34420 12d             | _21ms_          res     1         ' 21ms
34420 12d             | _21ms_          res     1         ' 21ms
34420 12d             | _100ms_         res     1         ' 100ms
34420 12d             | _100ms_         res     1         ' 100ms
34420 12d             | _500ms_         res     1         ' 500ms
34420 12d             | _500ms_         res     1         ' 500ms
34420 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
34420 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
34420 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
34420 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
34420 12d             | '------------------------------------------------------------------------------
34420 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
34420 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
34420 12d             | _usb_d_ls_nco_  res     1
34420 12d             | _usb_d_ls_nco_  res     1
34420 12d             | _usb_h_fs_nco_  res     1
34420 12d             | _usb_h_fs_nco_  res     1
34420 12d             | _usb_d_fs_nco_  res     1
34420 12d             | _usb_d_fs_nco_  res     1
34420 12d             | '------------------------------------------------------------------------------
34420 12d             | ' Scratch registers
34420 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
34420 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
34420 12d             | htmp1           res     1
34420 12d             | htmp1           res     1
34420 12d             | htmp2           res     1
34420 12d             | htmp2           res     1
34420 12d             | htmp3           res     1
34420 12d             | htmp3           res     1
34420 12d             | hrep            res     1         ' Repeat count
34420 12d             | hrep            res     1         ' Repeat count
34420 12d             | hsave0          res     1         ' Subroutine parameter saves
34420 12d             | hsave0          res     1         ' Subroutine parameter saves
34420 12d             | hsave1          res     1
34420 12d             | hsave1          res     1
34420 12d             | hsave2          res     1
34420 12d             | hsave2          res     1
34420 12d             | isrtmp1         res     1
34420 12d             | isrtmp1         res     1
34420 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
34420 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
34420 12d             | hr0             res     1         ' Multi-purpose registers
34420 12d             | hr0             res     1         ' Multi-purpose registers
34420 12d             | hr1             res     1
34420 12d             | hr1             res     1
34420 12d             | hr2             res     1
34420 12d             | hr2             res     1
34420 12d             | hr3             res     1
34420 12d             | hr3             res     1
34420 12d             | hpar1           res     1         ' Routine entry/exit parameters
34420 12d             | hpar1           res     1         ' Routine entry/exit parameters
34420 12d             | hpar2           res     1
34420 12d             | hpar2           res     1
34420 12d             | hpar3           res     1
34420 12d             | hpar3           res     1
34420 12d             | hct2            res     1         ' Function response bus turn-around timer
34420 12d             | hct2            res     1         ' Function response bus turn-around timer
34420 12d             | hct3            res     1         ' Keyboard/mouse poll timer
34420 12d             | hct3            res     1         ' Keyboard/mouse poll timer
34420 12d             | mod_cnt         res     1         ' Used in idle loops
34420 12d             | mod_cnt         res     1         ' Used in idle loops
34420 12d             |                 fit     $1F0
34420 12d             |                 org     $200
34420 200             | hlut_start
34420 200             | 
34420 200             | '------------------------------------------------------------------------------
34420 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
34420 200             | ' settings to startup defaults.
34420 200             | '------------------------------------------------------------------------------
34420 200             | ' On entry:
34420 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
34420 200             | '------------------------------------------------------------------------------
34420 200             | set_speed_full
34420 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
34424 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
34428 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3442c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
34430 204             | '                ret                             wcz     ' Restore caller flags on exit
34430 204             | 
34430 204             | '------------------------------------------------------------------------------
34430 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
34430 204             | ' is a downstream hub connected (not yet implemented), the baud generator
34430 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
34430 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
34430 204             | ' putting the smart pins into reset.
34430 204             | '------------------------------------------------------------------------------
34430 204             | ' On entry:
34430 204             | ' On exit: CZ flags restored to caller states
34430 204             | '------------------------------------------------------------------------------
34430 204             | set_speed_low
34430 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
34434 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
34438 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3443c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
34440 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
34444 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
34448 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3444c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
34450 20c             | 
34450 20c             | '------------------------------------------------------------------------------
34450 20c             | ' Perform configuration stuff required when a device intitially connects.
34450 20c             | '------------------------------------------------------------------------------
34450 20c             | ' On entry:
34450 20c             | ' On exit:
34450 20c             | '------------------------------------------------------------------------------
34450 20c             | on_connect
34450 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
34454 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
34458 20e             | .retry
34458 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3445c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
34460 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
34464 211 00 08 00 FF 
34468 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3446c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
34470 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
34474 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
34478 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3447c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
34480 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34484 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
34488 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3448c 21b 4C 03 B0 FD |                 call    #poll_waitx
34490 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
34494 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
34498 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3449c 21f B8 FF 9F FD |                 jmp     #.retry
344a0 220             | .get_dev_desc
344a0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
344a4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
344a8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
344ac 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
344b0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
344b4 225 88 FB BF FD |                 call    #reset
344b8 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
344bc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
344c0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
344c4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
344c8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
344cc 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
344d0 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
344d4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
344d8 22e 04 00 00 FF 
344dc 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
344e0 230 34 FA BF FD |                 call    #calc_crc5
344e4 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
344e8 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
344ec 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
344f0 234 F7 AD C2 FA |                 rdbyte  total_data, pb
344f4 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
344f8 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
344fc 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34500 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
34504 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
34508 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3450c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
34510 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
34514 23d C4 02 B0 FD |                 call    #poll_waitx
34518 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3451c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
34520 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
34524 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
34528 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3452c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34530 244 2D 00 64 5D |         if_nz   ret
34534 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
34538 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3453c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
34540 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
34544 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
34548 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3454c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
34550 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
34554 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
34558 24e 2C FB 9F CD |         if_b    jmp     #host_error
3455c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
34560 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
34564 251 2D EC 63 FD |                 call    pa
34568 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3456c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
34570 254 2C EC 63 FD |                 jmp     pa
34574 255             | 
34574 255             | '------------------------------------------------------------------------------
34574 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
34574 255             | ' Status reporting is always in the function-to-host direction.
34574 255             | '------------------------------------------------------------------------------
34574 255             | ' On entry:
34574 255             | '   PTRA - start address of the SETUP data in hub.
34574 255             | '   PB - start address of the buffer/struct to be written to during the IN data
34574 255             | '     stage.
34574 255             | '   ep_addr_pid - device address, endpoint and CRC5.
34574 255             | ' On exit:
34574 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
34574 255             | '     contains the count of data stage bytes actually received, which must
34574 255             | '     always be <= the count requested.
34574 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
34574 255             | '     more specific USB operation error code.
34574 255             | '------------------------------------------------------------------------------
34574 255             | control_read
34574 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
34578 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3457c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
34580 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
34584 259             | .xfer_start
34584 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
34588 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3458c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34590 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
34594 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
34598 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3459c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
345a0 260 61 00 00 FF 
345a4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
345a8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
345ac 263             | .data
345ac 263 56 B1 02 F6 |                 mov     pkt_data, total_data
345b0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
345b4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
345b8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
345bc 267             | .nak_retry
345bc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
345c0 268             | .in_retry
345c0 268 BC F6 BF FD |                 call    #txn_in
345c4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
345c8 26a 28 00 90 AD |         if_z    jmp     #.commit
345cc 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
345d0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
345d4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
345d8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
345dc 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
345e0 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
345e4 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
345e8 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
345ec 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
345f0 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
345f4 275             | .commit
345f4 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
345f8 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
345fc 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
34600 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
34604 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
34608 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3460c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
34610 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
34614 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
34618 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3461c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
34620 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
34624 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
34628 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3462c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
34630 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
34634 285             | .pre_status
34634 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
34638 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3463c 287 00 B0 06 F6 |                 mov     pkt_data, #0
34640 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
34644 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
34648 28a 61 00 00 FF 
3464c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
34650 28c             | .out_retry
34650 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
34654 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34658 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3465c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
34660 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
34664 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
34668 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3466c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
34670 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
34674 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
34678 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3467c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3467c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3467c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3467c 297             | .xfer_retry
3467c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
34680 298 58 01 B0 FD |                 call    #poll_waitx
34684 299 8C F9 BF FD |                 call    #wait_txn_ok
34688 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3468c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
34690 29c C8 EF 03 F6 |                 mov     pb, hpar3
34694 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
34698 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3469c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
346a0 2a0             | 
346a0 2a0             | '------------------------------------------------------------------------------
346a0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
346a0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
346a0 2a0             | ' the SETUP data struct is filled with the required values.
346a0 2a0             | '------------------------------------------------------------------------------
346a0 2a0             | ' On entry:
346a0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
346a0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
346a0 2a0             | '     stage.
346a0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
346a0 2a0             | ' On exit:
346a0 2a0             | '   retval - used to convey the success/failure of each stage.
346a0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
346a0 2a0             | '     more specific USB operation error code.
346a0 2a0             | '------------------------------------------------------------------------------
346a0 2a0             | control_write
346a0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
346a4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
346a8 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
346ac 2a3             | 
346ac 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
346b0 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
346b4 2a5 F7 91 03 F6 |                 mov     hpar3, pb
346b8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
346bc 2a7             | .xfer_start
346bc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
346c0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
346c4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
346c8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
346cc 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
346d0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
346d4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
346d8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
346dc 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
346e0 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
346e4 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
346e8 2b2             | .data
346e8 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
346ec 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
346f0 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
346f4 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
346f8 2b6             | .out_retry
346f8 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
346fc 2b7 88 F6 BF FD |                 call    #txn_out
34700 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34704 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
34708 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3470c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
34710 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
34714 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
34718 2be             | .commit
34718 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3471c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
34720 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
34724 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
34728 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3472c 2c3             | pre_status_in
3472c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
34730 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
34734 2c5             | .status_retry
34734 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
34738 2c6 44 F5 BF FD |                 call    #txn_in
3473c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
34740 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
34744 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
34748 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3474c 2cb 2D 00 64 AD |         if_z    ret
34750 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
34754 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
34758 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3475c 2cf             | '               ret                                     ' Caller must handle transfer retirement
3475c 2cf             | 
3475c 2cf             | '------------------------------------------------------------------------------
3475c 2cf             | ' Execute an IN interrupt transaction.
3475c 2cf             | '------------------------------------------------------------------------------
3475c 2cf             | ' On entry:
3475c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3475c 2cf             | '   hpar2 - Address of the IN data buffer
3475c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3475c 2cf             | ' On exit:
3475c 2cf             | '   retval - the result of the operation.
3475c 2cf             | '   hpar3 - the count of IN data bytes actually received.
3475c 2cf             | '------------------------------------------------------------------------------
3475c 2cf             | do_int_in
3475c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
34760 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
34764 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
34768 2d2             | 
34768 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3476c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
34770 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
34774 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
34778 2d6             | .retry
34778 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3477c 2d7 00 F5 BF FD |                 call    #txn_in
34780 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
34784 2d9 1C 00 90 AD |         if_z    jmp     #.commit
34788 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3478c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
34790 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
34794 2dd 54 00 B0 FD |                 call    #retry_wait
34798 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3479c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
347a0 2e0 D4 FF 9F FD |                 jmp     #.retry
347a4 2e1             | .commit
347a4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
347a8 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
347ac 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
347b0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
347b4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
347b8 2e6             | .post_ret
347b8 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
347bc 2e7             | 
347bc 2e7             | 
347bc 2e7             | '------------------------------------------------------------------------------
347bc 2e7             | ' Resets the downstream hub port to FS
347bc 2e7             | '------------------------------------------------------------------------------
347bc 2e7             | dwnstream_reset
347bc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
347c0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
347c4 2e9             | 
347c4 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
347c8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
347cc 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
347d0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
347d4 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
347d8 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
347dc 2ef             | 
347dc 2ef             | '------------------------------------------------------------------------------
347dc 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
347dc 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
347dc 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
347dc 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
347dc 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
347dc 2ef             | '------------------------------------------------------------------------------
347dc 2ef             | ' On entry:
347dc 2ef             | '   hctwait - wait interval in sysclocks.
347dc 2ef             | ' On exit:
347dc 2ef             | '------------------------------------------------------------------------------
347dc 2ef             | poll_waitx
347dc 2ef 1A 92 63 FD |                 getct   hct2
347e0 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
347e4 2f1             | .wait
347e4 2f1 FF 25 CC FB |                 jnct2   #.wait
347e8 2f2 2D 00 64 FD |                 ret
347ec 2f3             | 
347ec 2f3             | '------------------------------------------------------------------------------
347ec 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
347ec 2f3             | '------------------------------------------------------------------------------
347ec 2f3             | ' On entry:
347ec 2f3             | '   retval - transaction response PID or error code.
347ec 2f3             | ' On exit:
347ec 2f3             | '------------------------------------------------------------------------------
347ec 2f3             | retry_wait
347ec 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
347f0 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
347f4 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
347f8 2f6 14 00 90 AD |         if_z    jmp     #.nak
347fc 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
34800 2f8 D8 FF BF FD |                 call    #poll_waitx
34804 2f9             | .dec
34804 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
34808 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3480c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
34810 2fc             | .nak
34810 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
34814 2fd C4 FF BF FD |                 call    #poll_waitx
34818 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3481c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
34820 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
34824 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
34828 302 2D 00 64 FD |                 ret
3482c 303             | 
3482c 303             | host_reset
3482c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
34830 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
34834 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
34834 305 BD 01 05 FF 
34838 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3483c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
34840 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
34844 309             | ' Check to see if the system clock has been changed.
34844 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
34848 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3484c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
34850 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
34854 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
34858 30e 40 46 62 FD |                 dirl    dp
3485c 30f             | 
3485c 30f 28 02 64 FD |                 setq    #1
34860 310 80 00 80 FF 
34864 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
34868 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3486c 313             | .enable
3486c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
34870 314 41 46 62 FD |                 dirh    dp
34874 315 1F 36 63 FD |                 waitx   _1us_
34878 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3487c 317             | 
3487c 317             |                 ' Handle Port protection enable and startup delay
3487c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
34880 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
34884 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
34888 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3488c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
34890 31c             | 
34890 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
34894 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
34898 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3489c 31f 00 00 04 F6 |                 mov     0-0, #0
348a0 320             | .regloop
348a0 320             | 
348a0 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
348a0 320             | 
348a0 320             | discon_entry
348a0 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
348a4 321             | 
348a4 321             |               
348a4 321             |         if HAVE_HIDPAD
348a4 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
348a8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
348ac 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
348b0 324 F7 01 68 FC |                 wrlong  #0,pb
348b4 325             |         end
348b4 325             |         if EMUPAD_MAX_PLAYER > 0
348b4 325             |         end
348b4 325             | 
348b4 325             |                 ' Fall through to disconnected loop
348b4 325             | 
348b4 325             | '-----------------------------------------------------------------------------------------------------------------
348b4 325             | ' Device connect handling (Section 7.1.7.3).
348b4 325             | '-----------------------------------------------------------------------------------------------------------------
348b4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
348b4 325             | ' device to connect (Section 7.1.7.3).
348b4 325             | '-----------------------------------------------------------------------------------------------------------------
348b4 325             | disconnected
348b4 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
348b8 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
348bc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
348c0 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
348c4 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
348c8 32a             |         if ACTIVITY_LED >= 0
348c8 32a             |         end
348c8 32a 22 A7 82 FA |                 rqpin   urx, dm
348cc 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
348d0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
348d4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
348d8 32e             | .se1_test
348d8 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
348dc 32f FC FE BF FD |                 call    #poll_waitx
348e0 330 22 A7 82 FA |                 rqpin   urx, dm
348e4 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
348e8 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
348ec 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
348f0 334             | .se1            'SE1 is a fatal error condition
348f0 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
348f4 335 E4 FE BF FD |                 call    #poll_waitx
348f8 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
348fc 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
34900 338             | .connect_test                                           ' Test lines until stable J/K state seen
34900 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
34904 339 22 A7 82 FA |                 rqpin   urx, dm
34908 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3490c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
34910 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
34914 33d             | connected
34914 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
34918 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3491c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
34920 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
34924 341             | .set_pulse
34924 341 1A 64 63 FD |                 getct   _pulse_time_
34928 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3492c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3492c 343             | ' of 1ms and make a correction, if necessary.
3492c 343             | '                mov     htmp, _1ms_
3492c 343             | '                subs    htmp, iframe_delta
3492c 343             | '                adds    _frame1ms_clks_, htmp
3492c 343             | '                debug(udec(_frame1ms_clks_))
3492c 343             | 
3492c 343             |                 ' Fall through to idle/processing loop
3492c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
34930 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
34934 345             | 
34934 345             | hidle
34934 345 22 A7 82 FA |                 rqpin   urx, dm
34938 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3493c 347 98 00 90 CD |         if_c    jmp     #.se0_test
34940 348 24 06 70 FD |                 pollct3                         wc
34944 349 68 00 90 3D |         if_nc   jmp     #.nopoll
34948 34a 1A 94 63 FD |                 getct   hct3
3494c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
34950 34c             | 
34950 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34954 34d 00 70 E3 F8 |                 getbyte htmp
34958 34e             | 
34958 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3495c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
34960 350 40 00 90 AD |         if_z    jmp     #.poll
34964 351             | 
34964 351             |         if _HAVE_GAMEPAD
34964 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
34968 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3496c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
34970 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
34974 355 2C 00 90 AD |         if_z    jmp     #.poll
34978 356             |         end
34978 356             | 
34978 356             |         if HAVE_MOUSE
34978 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3497c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
34980 358 20 00 90 AD |         if_z    jmp     #.poll
34984 359             |         end
34984 359             | 
34984 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
34988 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3498c 35b 14 00 90 AD |         if_z    jmp     #.poll
34990 35c             | 
34990 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
34994 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
34998 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3499c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
349a0 360             |         if HAVE_MOUSE
349a0 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
349a4 361             |         else
349a4 361             |         end
349a4 361             | 
349a4 361             | .poll
349a4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
349a8 362 2D EC 63 FD |                 call    pa
349ac 363             | .skip_poll
349ac 363             | 
349ac 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
349b0 364             | 
349b0 364             | .nopoll
349b0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
349b4 365 44 00 90 AD |         if_z    jmp     #hsuspend
349b8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
349bc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
349c0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
349c4 369 1A 84 63 FD |                 getct   hr0
349c8 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
349cc 36b             |         if ACTIVITY_LED >= 0
349cc 36b             |         end
349cc 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
349d0 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
349d4 36d 5C FF 9F FD |                 jmp     #hidle
349d8 36e             | ' Check for extended SE0 state on the bus
349d8 36e             | .se0_test
349d8 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
349dc 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
349e0 370 22 A7 82 FA |                 rqpin   urx, dm
349e4 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
349e8 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
349ec 373 24 F6 BF FD |                 call    #wait_txn_ok
349f0 374 00 00 80 FF 
349f4 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
349f8 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
349f8 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
349fc 377             | 
349fc 377             | hsuspend
349fc 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
34a00 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
34a04 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
34a08 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
34a0c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
34a10 37c 00 96 07 F6 |                 mov     mod_cnt, #0
34a14 37d             | 
34a14 37d             |                 ' Fall through to resume wait loop
34a14 37d             | 
34a14 37d             | hwait_resume
34a14 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
34a18 37e 02 86 47 F0 |                 shr     hr1, #2
34a1c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
34a20 380             |         if ACTIVITY_LED >= 0
34a20 380             |         end
34a20 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
34a24 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
34a28 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
34a2c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
34a30 384 18 00 90 AD |         if_z    jmp     #.resume
34a34 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
34a38 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
34a3c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
34a40 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
34a44 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
34a48 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
34a4c 38b             | .resume
34a4c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
34a50 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
34a54 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
34a58 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
34a5c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
34a60 390 1F 70 63 FD |                 waitx   htmp
34a64 391 22 07 28 FC |                 wypin   #OUT_J, dm
34a68 392 01 70 47 F0 |                 shr     htmp, #1
34a6c 393 1F 70 63 FD |                 waitx   htmp
34a70 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
34a74 395 1A 92 62 FD |                 getct   iframe_ct_base
34a78 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
34a7c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
34a80 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
34a84 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
34a88 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
34a8c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
34a90 39c             | 
34a90 39c             | '------------------------------------------------------------------------------
34a90 39c             | ' Send preamble to enable low-speed HUB ports
34a90 39c             | '------------------------------------------------------------------------------
34a90 39c             | ' On entry:
34a90 39c             | ' On exit:
34a90 39c             | '   USB baud rate set to low-speed
34a90 39c             | '------------------------------------------------------------------------------
34a90 39c             | utx_pre
34a90 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
34a94 39d 40 46 62 FD |                 dirl    dp
34a98 39e 28 02 64 FD |                 setq    #1
34a9c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
34aa0 3a0 58 44 62 FD |                 drvl    dm
34aa4 3a1 59 46 62 FD |                 drvh    dp
34aa8 3a2             | 
34aa8 3a2 1E 00 00 FF 
34aac 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
34ab0 3a4             | 
34ab0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
34ab4 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
34ab8 3a6 28 02 64 3D |         if_nc   setq    #1
34abc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
34ac0 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
34ac4 3a9             | .l1
34ac4 3a9             | 
34ac4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
34ac8 3aa 40 46 62 FD |                 dirl    dp
34acc 3ab 28 02 64 FD |                 setq    #1
34ad0 3ac 80 00 80 FF 
34ad4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
34ad8 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
34adc 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
34ae0 3b0 41 46 62 FD |                 dirh    dp
34ae4 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
34ae8 3b2             | 
34ae8 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
34aec 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
34af0 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
34af4 3b5             | 
34af4 3b5             | hlut_end
34af4 3b5             |                 fit     $400
34af4 3b5             |                 orgh
34af4                 | if OVERLAP_MEMORY
34af4                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
34af4                 | end
34af4                 | '------------------------------------------------------------------------------
34af4                 | ' Routines called from cog space.
34af4                 | '------------------------------------------------------------------------------
34af4                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
34af4                 | '------------------------------------------------------------------------------
34af4                 | 
34af4                 | '------------------------------------------------------------------------------
34af4                 | ' USB host cog initialization.
34af4                 | '------------------------------------------------------------------------------
34af4                 | usb_host_init
34af4                 |                 ' Initialize buffer pointers
34af4                 |         if OVERLAP_MEMORY
34af4                 |         else
34af4     40 15 B0 FE |                 loc     pb, #hid_descr
34af8                 |         end
34af8     F7 4B 02 F6 |                 mov     hid_descr_p, pb
34afc                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
34afc                 |                 {
34afc                 |                 }
34afc                 |         
34afc                 |                 {
34afc                 |                 }
34afc                 |                 'loc     pb,#hkbd_report
34afc                 |                 'mov     hkbd_report_p,pb
34afc                 | 
34afc     08 1D B0 FE |                 loc     pb, #hub_descr
34b00     F7 4D 02 F6 |                 mov     hub_descr_p, pb
34b04     1D 1D B0 FE |                 loc     pb, #urx_buff
34b08     F7 4F 02 F6 |                 mov     urx_buff_p, pb
34b0c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
34b10     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
34b14     9F 1D B0 FE |                 loc     pb, #con_desc_buff
34b18     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
34b1c     18 15 B0 FE |                 loc     pb, #usb_cache_start
34b20     F7 55 02 F6 |                 mov     cache_start_p, pb
34b24     E9 1C B0 FE |                 loc     pb, #usb_cache_end
34b28     F7 57 02 F6 |                 mov     cache_end_p, pb
34b2c                 | 
34b2c                 |         if ERROR_LED >= 0
34b2c                 |         end
34b2c                 | 
34b2c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
34b2c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
34b2c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
34b2c                 | ' Configure and enable the Serial Host USB port.
34b2c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
34b30                 | 
34b30                 | '------------------------------------------------------------------------------
34b30                 | ' Timing calculations happen before any interrupt(s) are enabled.
34b30                 | '------------------------------------------------------------------------------
34b30                 | ' On entry:
34b30                 | '   htmp - current CLKFREQ value.
34b30                 | '------------------------------------------------------------------------------
34b30                 | hinit_usb_timings
34b30                 | '                getct   htmp2
34b30     B8 59 02 F6 |                 mov     save_sysclk, htmp
34b34     8D 5B 80 FF 
34b38     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
34b3c     18 30 63 FD |                 getqx   _12Mbps_
34b40     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
34b44     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
34b48     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
34b4c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
34b50     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
34b54     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
34b58     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
34b5c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
34b60     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
34b64     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
34b68     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
34b6c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
34b70     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
34b74     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
34b78     80 00 00 FF 
34b7c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
34b80     18 2C 63 FD |                 getqx   _var_64_lower_
34b84     19 2E 63 FD |                 getqy   _var_64_upper_
34b88     28 2C 63 FD |                 setq    _var_64_lower_
34b8c     65 CD 1D FF 
34b90     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
34b94     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
34b98     01 00 00 FF 
34b9c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
34ba0     18 2C 63 FD |                 getqx   _var_64_lower_
34ba4     19 2E 63 FD |                 getqy   _var_64_upper_
34ba8     28 2C 63 FD |                 setq    _var_64_lower_
34bac     A1 07 00 FF 
34bb0     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
34bb4     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
34bb8     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
34bbc     09 36 57 F0 |                 shr     _1us_, #9               wc
34bc0     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
34bc4     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
34bc8     18 38 63 FD |                 getqx   _10us_
34bcc     09 38 57 F0 |                 shr     _10us_, #9              wc
34bd0     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
34bd4     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
34bd8     18 3A 63 FD |                 getqx   _33us_
34bdc     09 3A 57 F0 |                 shr     _33us_, #9              wc
34be0     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
34be4     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
34be8     18 3C 63 FD |                 getqx   _txn_err_
34bec     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
34bf0     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
34bf4     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
34bf8     18 3E 63 FD |                 getqx   _500us_
34bfc     09 3E 57 F0 |                 shr     _500us_, #9             wc
34c00     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
34c04     01 00 00 FF 
34c08     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
34c0c     18 40 63 FD |                 getqx   _txn_ok_ls_
34c10     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
34c14     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
34c18     01 00 00 FF 
34c1c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
34c20     18 42 63 FD |                 getqx   _txn_ok_fs_
34c24     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
34c28     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
34c2c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
34c30     05 00 00 FF 
34c34     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
34c38     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
34c3c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
34c40     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
34c44     1C 00 00 FF 
34c48     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
34c4c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
34c50     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
34c54     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
34c58     00 00 00 FF 
34c5c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
34c60     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
34c64     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
34c68     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
34c6c     04 00 00 FF 
34c70     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
34c74     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
34c78     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
34c7c     8D 5B 00 FF 
34c80     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
34c84     18 4C 63 FD |                 getqx   _preamble_wait_
34c88     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
34c8c     01 00 00 FF 
34c90     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
34c94     18 2C 63 FD |                 getqx   _var_64_lower_
34c98     19 2E 63 FD |                 getqy   _var_64_upper_
34c9c     28 2C 63 FD |                 setq    _var_64_lower_
34ca0     01 00 00 FF 
34ca4     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
34ca8     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
34cac     09 4E 57 F0 |                 shr     _1ms_, #9               wc
34cb0     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
34cb4     FF FF 7F FF 
34cb8     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
34cbc     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
34cc0     A7 51 03 F6 |                 mov     _2ms_, _1ms_
34cc4     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
34cc8     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
34ccc     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
34cd0     A7 55 03 F6 |                 mov     _4ms_, _1ms_
34cd4     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
34cd8     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
34cdc     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
34ce0     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
34ce4     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
34ce8     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
34cec     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
34cf0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
34cf4     A7 59 03 F6 |                 mov     _8ms_, _1ms_
34cf8     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
34cfc     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
34d00     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
34d04     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
34d08     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
34d0c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
34d10     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
34d14     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
34d18     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
34d1c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
34d20     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
34d24                 | '        _ret_   mov     _1sec_, save_sysclk
34d24                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
34d24                 | '                ret
34d24                 | {
34d24                 | }
34d24                 | 
34d24                 | '------------------------------------------------------------------------------
34d24                 | ' Parse a configuration descriptor chain to see if the device is a recognized
34d24                 | ' one. If it is, start the task progression that will configure the device for
34d24                 | ' use.
34d24                 | '------------------------------------------------------------------------------
34d24                 | ' On entry:
34d24                 | '   hconfig_base - start address of the cached config descriptor chain.
34d24                 | ' On exit:
34d24                 | '------------------------------------------------------------------------------
34d24                 | hparse_con_desc
34d24     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
34d28     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
34d2c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
34d30     4E 70 FF F9 |                 movbyts htmp,#%%1032
34d34     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
34d38                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
34d38                 | 
34d38     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
34d3c     6E ED 03 F1 |                 add     pa, hconfig_base
34d40     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
34d44                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
34d44                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
34d44                 | ' that defines a keyboard and/or mouse.
34d44     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
34d48                 | .next_intf
34d48     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
34d4c     BC 01 90 3D |         if_ae   jmp     #hset_config
34d50     6E F3 03 F6 |                 mov     ptrb, hconfig_base
34d54     75 F3 03 F1 |                 add     ptrb, hnext_desc
34d58     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
34d5c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
34d60     0C 00 90 AD |         if_z    jmp     #.intf
34d64     80 71 C7 FA |                 rdbyte  htmp, ptrb
34d68     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
34d6c     D8 FF 9F FD |                 jmp     #.next_intf
34d70                 | .intf
34d70     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
34d74     00 90 07 F6 |                 mov     hpar3, #0
34d78     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
34d7c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
34d80     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
34d84     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
34d88                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
34d88                 | 
34d88                 | .endp
34d88     80 71 C7 FA |                 rdbyte  htmp, ptrb
34d8c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
34d90     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
34d94     78 00 90 3D |         if_ae   jmp     #.get_device
34d98     6E F3 03 F6 |                 mov     ptrb, hconfig_base
34d9c     75 F3 03 F1 |                 add     ptrb, hnext_desc
34da0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
34da4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
34da8     64 00 90 AD |         if_z    jmp     #.get_device
34dac     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
34db0     04 00 90 AD |         if_z    jmp     #.get_ep
34db4     D0 FF 9F FD |                 jmp     #.endp
34db8                 | .get_ep
34db8     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
34dbc     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
34dc0     0F 86 67 F0 |                 shl     hr1, #8 + 7
34dc4     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
34dc8     3F 00 00 FF 
34dcc     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
34dd0     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
34dd4     00 8E 0F F2 |                 cmp     hpar2, #0               wz
34dd8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
34ddc     00 90 0F F2 |                 cmp     hpar3, #0               wz
34de0     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
34de4     A0 FF 9F FD |                 jmp     #.endp
34de8                 | .in_ep
34de8     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
34dec     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
34df0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
34df0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
34df4     C2 89 DB F8 |                 setbyte hr2, hr0, #3
34df8     8C FF 9F FD |                 jmp     #.endp
34dfc                 | .out_ep
34dfc     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
34e00     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
34e04                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
34e04     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
34e08     C2 8B DB F8 |                 setbyte hr3, hr0, #3
34e0c     78 FF 9F FD |                 jmp     #.endp
34e10                 | 
34e10                 | .get_device
34e10     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
34e14     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
34e18     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
34e1c     68 00 90 AD |         if_z    jmp     #.gamepad
34e20     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
34e24     AC 00 90 AD |         if_z    jmp     #.hub
34e28     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
34e2c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
34e30     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
34e34     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
34e38     4C 00 90 AD |         if_z    jmp     #.gamepad
34e3c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
34e40     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
34e44                 | .keyboard
34e44     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
34e48                 |         if HAVE_MOUSE
34e48     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
34e4c                 |         else
34e4c                 |         end
34e4c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
34e50     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
34e54     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
34e58     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
34e5c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
34e60     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
34e64                 |                 'debug(udec(kb_intf_num))
34e64                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
34e64     E0 FE 9F FD |                 jmp     #.next_intf
34e68                 | if HAVE_MOUSE
34e68                 | .mouse
34e68     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
34e6c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
34e70     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
34e74     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
34e78     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
34e7c                 |                 'getbyte ms_interval, hr2, #3
34e7c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
34e80     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
34e84                 |                 'debug(udec(kb_intf_num))
34e84                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
34e84     C0 FE 9F FD |                 jmp     #.next_intf
34e88                 | end
34e88                 | .gamepad
34e88     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
34e8c     C7 71 63 F5 |                 xor     htmp, hpar2
34e90     3F 00 00 FF 
34e94     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34e98     AC FE 9F AD |         if_z    jmp     #.next_intf
34e9c                 |         if HAVE_MOUSE
34e9c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
34ea0     C7 71 63 F5 |                 xor     htmp, hpar2
34ea4     3F 00 00 FF 
34ea8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34eac     98 FE 9F AD |         if_z    jmp     #.next_intf
34eb0                 |         end
34eb0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
34eb4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
34eb8     8C FE 9F 5D |         if_nz   jmp     #.next_intf
34ebc                 | 
34ebc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
34ec0     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
34ec4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34ec8     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
34ecc     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
34ed0                 |                 'debug(udec(gp_intf_num))
34ed0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
34ed0     74 FE 9F FD |                 jmp     #.next_intf
34ed4                 | .hub
34ed4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
34ed8     6C FE 9F 5D |         if_nz   jmp     #.next_intf
34edc     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
34ee0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
34ee4     60 FE 9F 5D |         if_nz   jmp     #.next_intf
34ee8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
34eec     58 FE 9F 5D |         if_nz   jmp     #.next_intf
34ef0     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
34ef4     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
34ef8     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
34efc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34f00     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
34f04     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
34f08                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
34f08     3C FE 9F FD |                 jmp     #.next_intf
34f0c                 | 
34f0c                 | '------------------------------------------------------------------------------
34f0c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
34f0c                 | ' it according to its function, or functions. In the case of this boot protocol
34f0c                 | ' keyboard/mouse class driver:
34f0c                 | ' - SetConfiguration(config_num)
34f0c                 | ' - SetProtocol(boot)
34f0c                 | ' - SetIdle(indefinite)
34f0c                 | ' - Enter the device interrupt IN polling task stage.
34f0c                 | '------------------------------------------------------------------------------
34f0c                 | ' On entry:
34f0c                 | ' On exit:
34f0c                 | '------------------------------------------------------------------------------
34f0c                 | hset_config
34f0c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
34f0c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
34f0c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
34f10     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34f14     00 00 0C F2 |                 cmp     0-0, #0                 wz
34f18     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
34f1c                 |         if HAVE_MOUSE
34f1c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
34f20                 |         end
34f20     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
34f24     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
34f28                 | .set_config
34f28     6C 0E D0 FE |                 loc     ptra, #set_config
34f2c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
34f30     6E ED 03 F1 |                 add     pa, hconfig_base
34f34     F6 8D C3 FA |                 rdbyte  hpar1, pa
34f38     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
34f3c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
34f40     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
34f44     A0 02 A0 FD |                 call    #control_write
34f48     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34f4c     2D 00 64 5D |         if_nz   ret
34f50                 | .kbd_config
34f50     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
34f54     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
34f58                 | 
34f58     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
34f5c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34f60     3F 00 00 FF 
34f64     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34f68     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
34f6c                 | 
34f6c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
34f70     34 0E D0 FE |                 loc     ptra, #set_protocol
34f74     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
34f78     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34f7c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
34f80     A0 02 A0 FD |                 call    #control_write
34f84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34f88     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
34f8c     E4 02 90 5D |         if_nz   jmp     #.notify_client
34f90     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
34f94     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
34f98     30 03 B0 FD |                 call    #hset_idle
34f9c                 |                 'cmp     retval, #PID_ACK        wz
34f9c                 |         'if_nz   mov     hkbd_ep_addr, #0
34f9c                 |         'if_nz   jmp     #.notify_client
34f9c     A8 99 02 F6 |                 mov     hctwait, _2ms_
34fa0     EF 02 A0 FD |                 call    #poll_waitx
34fa4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
34fa8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
34fac     90 17 90 FE |                 loc     pa, #hkbd_led_rep
34fb0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
34fb4     2C 03 B0 FD |                 call    #hset_kbdled_report
34fb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34fbc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
34fc0     B0 02 90 5D |         if_nz   jmp     #.notify_client
34fc4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
34fc8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34fcc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34fd0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
34fd4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
34fd8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
34fdc     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
34fe0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
34fe4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
34fe8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
34fec     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
34ff0                 |         if !!HAVE_MOUSE
34ff0                 |         end
34ff0                 | 
34ff0                 | .mouse_config
34ff0                 | if HAVE_MOUSE
34ff0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
34ff4     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
34ff8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
34ffc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
35000     3F 00 00 FF 
35004     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
35008     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3500c                 | 
3500c                 |                 debug("mouse passed addr check")
3500c                 | 
3500c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
35010     00 00 80 FF 
35014     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
35018     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3501c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
35020     55 02 A0 FD |                 call    #control_read
35024     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35028     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3502c     44 02 90 5D |         if_nz   jmp     #.notify_client
35030     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
35034     56 01 00 F6 |                 mov     0-0, total_data
35038     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3503c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3503c                 | 
3503c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
35040     64 0D D0 FE |                 loc     ptra, #set_protocol
35044     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
35048     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3504c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
35050     A0 02 A0 FD |                 call    #control_write
35054     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35058     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3505c     14 02 90 5D |         if_nz   jmp     #.notify_client
35060                 |                 debug("mouse passed SetProtocol")
35060     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
35064     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
35068     60 02 B0 FD |                 call    #hset_idle
3506c                 |                 'cmp     retval, #PID_ACK        wz
3506c                 |         'if_nz   mov     hmouse_ep_addr, #0
3506c                 |         'if_nz   jmp     #.notify_client
3506c                 |                 debug("mouse passed SetIdle")
3506c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
35070     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
35074     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
35078     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3507c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
35080     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
35084     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
35088     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3508c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
35090     3F 00 00 FF 
35094     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
35098     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3509c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
350a0     D0 01 90 FD |                 jmp     #.notify_client
350a4                 | end
350a4                 | .gamepad_config
350a4                 | if _HAVE_GAMEPAD
350a4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
350a8     00 00 0C F2 |                 cmp     0-0, #0                 wz
350ac     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
350b0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
350b4     00 70 03 F6 |                 mov     htmp, 0-0
350b8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
350bc     3F 00 00 FF 
350c0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
350c4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
350c8                 | 
350c8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
350cc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
350d0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
350d4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
350d8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
350dc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
350e0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
350e4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
350e8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
350ec     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
350f0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
350f4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
350f8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
350fc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
35100                 | 
35100                 |                 if EMUPAD_MAX_PLAYER > 0
35100                 |                 
35100                 | .rule_loop           
35100                 |                 end
35100                 | 
35100     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
35104     5C 00 90 AD |         if_e    jmp     #.xinput
35108     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3510c     00 70 03 F6 |                 mov     htmp,0-0
35110     01 A6 02 FF 
35114     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
35118     7C 00 90 AD |         if_e    jmp     #.ps3
3511c                 | 
3511c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
35120     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
35124     00 00 80 5F 
35128     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3512c     03 00 80 AF 
35130     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
35134     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
35138     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3513c     55 02 A0 FD |                 call    #control_read
35140     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35144     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
35148     00 00 04 56 |         if_nz   mov     0-0, #0
3514c     24 01 90 5D |         if_nz   jmp     #.notify_client
35150     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
35154     56 01 00 F6 |                 mov     0-0, total_data
35158     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3515c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3515c                 | 
3515c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
35160     10 01 90 FD |                 jmp     #.notify_client
35164                 | .xinput
35164     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
35168     2D EF 03 F6 |                 mov     pb,hdev_port
3516c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
35170     03 EE 27 F3 |                 fle     pb,#3
35174     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
35178     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3517c                 | 
3517c     03 B0 06 F6 |                 mov     pkt_data, #3
35180     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
35184     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
35188     5A 00 A0 FD |                 call    #txn_out
3518c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
35190                 | 
35190     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
35194     DC 00 90 FD |                 jmp     #.notify_client
35198                 | .ps3
35198     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3519c     2D EF 03 F6 |                 mov     pb,hdev_port
351a0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
351a4     04 EE 27 F3 |                 fle     pb,#4
351a8     F7 EF C3 F9 |                 decod   pb
351ac     09 EF 47 FC |                 wrbyte  pb, ptra[9]
351b0                 | 
351b0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
351b4     00 0C D0 FE |                 loc     ptra, #set_report
351b8     01 00 80 FF 
351bc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
351c0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
351c4     03 61 5C FC |                 wrword  #48, ptra[wLength]
351c8     20 0C B0 FE |                 loc     pb, #ps3_command_buff
351cc     A0 02 A0 FD |                 call    #control_write
351d0                 | 
351d0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
351d4     E0 0B D0 FE |                 loc     ptra, #set_report
351d8     01 00 80 FF 
351dc     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
351e0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
351e4     03 09 5C FC |                 wrword  #4, ptra[wLength]
351e8     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
351ec     A0 02 A0 FD |                 call    #control_write
351f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
351f4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
351f8     00 00 04 56 |         if_nz   mov     0-0, #0
351fc     74 00 90 5D |         if_nz   jmp     #.notify_client
35200                 | 
35200     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
35204     6C 00 90 FD |                 jmp     #.notify_client
35208                 | end
35208                 | 
35208                 | .hub_config
35208     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3520c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
35210     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
35214     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
35218     3F 00 00 FF 
3521c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
35220     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
35224                 | 
35224     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
35228     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3522c     26 EF 03 F6 |                 mov     pb, hub_descr_p
35230     55 02 A0 FD |                 call    #control_read
35234     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35238     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3523c     34 00 90 5D |         if_nz   jmp     #.notify_client
35240                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
35240                 | 
35240     26 F1 03 F6 |                 mov     ptra, hub_descr_p
35244     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
35248     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3524c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3524c                 | .pwr_loop
3524c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
35250     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
35254     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
35258     A0 02 A0 FD |                 call    #control_write
3525c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
35260                 | 
35260     B1 99 02 F6 |                 mov     hctwait, _500ms_
35264     B0 99 02 F1 |                 add     hctwait, _100ms_
35268     EF 02 A0 FD |                 call    #poll_waitx
3526c                 | 
3526c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
35270     00 00 90 FD |                 jmp     #.notify_client
35274                 | 
35274                 | .notify_client
35274     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
35278     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3527c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3527c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3527c     2D 00 64 FD |                 ret
35280                 | 
35280                 | '------------------------------------------------------------------------------
35280                 | ' Initialize the keyboard/mouse data area to start-up values.
35280                 | '------------------------------------------------------------------------------
35280                 | ' On entry:
35280                 | ' On exit:
35280                 | '------------------------------------------------------------------------------
35280                 | init_kbdm_data
35280     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
35284     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
35288                 | 
35288     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3528c     2B ED 03 F6 |                 mov     pa, cache_end_p
35290                 | .loop
35290     61 01 4C FC |                 wrbyte  #0, ptra++
35294     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
35298     F4 FF 9F CD |         if_b    jmp     #.loop
3529c                 |         
3529c                 |         if EMUPAD_MAX_PLAYER > 0
3529c                 |         end
3529c                 | 
3529c                 | 
3529c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
352a0                 | .regloop
352a0     00 EC 8F F9 |                 altd    pa
352a4     00 00 04 F6 |                 mov     0-0, #0
352a8     01 EC 07 F1 |                 add     pa, #1
352ac     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
352b0     EC FF 9F 5D |         if_nz   jmp     #.regloop
352b4                 | 
352b4     E1 E1 61 FF 
352b8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
352bc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
352c0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
352c4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
352c8                 | 
352c8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
352cc                 | 
352cc                 | '------------------------------------------------------------------------------
352cc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
352cc                 | ' function.
352cc                 | '------------------------------------------------------------------------------
352cc                 | ' On entry:
352cc                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
352cc                 | '   hpar2 - index number of the target interface.
352cc                 | ' On exit:
352cc                 | '------------------------------------------------------------------------------
352cc                 | hset_idle
352cc     A8 99 02 F6 |                 mov     hctwait, _2ms_
352d0     EF 02 A0 FD |                 call    #poll_waitx
352d4     D8 0A D0 FE |                 loc     ptra, #set_idle
352d8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
352dc     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
352e0     A0 02 80 FD |                 jmp     #control_write
352e4                 | 
352e4                 | '------------------------------------------------------------------------------
352e4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
352e4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
352e4                 | '------------------------------------------------------------------------------
352e4                 | ' On entry:
352e4                 | '   ep_addr_pid - device address and enpoint for the request.
352e4                 | ' On exit:
352e4                 | '   retval - transaction result.
352e4                 | '------------------------------------------------------------------------------
352e4                 | hset_kbdled_report
352e4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
352e8     CC 0A D0 FE |                 loc     ptra, #set_report
352ec     01 00 80 FF 
352f0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
352f4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
352f8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
352fc     27 EF 03 F6 |                 mov     pb, urx_buff_p
35300     F7 77 42 FC |                 wrbyte  kb_led_states, pb
35304     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
35308                 | 
35308                 | '------------------------------------------------------------------------------
35308                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
35308                 | '------------------------------------------------------------------------------
35308                 | ' On entry:
35308                 | ' On exit:
35308                 | '------------------------------------------------------------------------------
35308                 | hget_kbd_in_report
35308     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3530c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
35310     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
35314     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
35318     CF 02 A0 FD |                 call    #do_int_in
3531c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35320     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
35324                 | 
35324     00 90 0F F2 |                 cmp     hpar3, #0               wz
35328     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3532c                 | 
3532c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
35330     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
35334     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
35338     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3533c                 | 
3533c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
35340     18 00 B0 FD |                 call    #hkbd_compare
35344                 |         if EMUPAD_MAX_PLAYER > 0
35344                 |         end
35344                 | 
35344                 | .led_check
35344     3B 71 03 F6 |                 mov     htmp, kb_led_states
35348     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3534c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
35350     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
35354     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
35358     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3535c                 | 
3535c                 | '------------------------------------------------------------------------------
3535c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3535c                 | '------------------------------------------------------------------------------
3535c                 | hkbd_compare
3535c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
35360     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
35364     61 73 07 FB |                 rdlong  htmp1, ptra++
35368     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3536c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
35370     61 73 07 FB |                 rdlong  htmp1, ptra++
35374     E1 75 07 FB |                 rdlong  htmp2, ptrb++
35378     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3537c     2D 00 64 AD |         if_z    ret
35380                 | 
35380     B4 13 D0 FE |                 loc     ptra, #hkbd_report
35384                 | 
35384                 |                 ' Handle modifiers
35384     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
35388     00 87 C7 FA |                 rdbyte  hr1, ptra
3538c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
35390     63 86 63 FD |                 mergew  hr1
35394     08 EC 07 F6 |                 mov     pa,#8
35398                 | .modloop
35398     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3539c     E8 8C 07 F6 |                 mov     hpar1,#$E8
353a0     F6 8D 83 F1 |                 sub     hpar1,pa
353a4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
353a8     FB ED 6F FB |                 djnz    pa,#.modloop
353ac                 | 
353ac     6F E0 75 FD | .release        modc    _set    wc
353b0                 |                 'alts    hdev_port, #hid_report_p
353b0                 |                 'mov     ptra, hid_report_p
353b0     02 F0 07 F1 |                 add     ptra, #2
353b4     06 EC 07 F6 |                 mov     pa, #6
353b8     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
353bc     20 00 90 AD |         if_z    jmp     #.rl3
353c0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
353c4     02 F2 07 F1 |                 add     ptrb, #2
353c8     06 EE 07 F6 |                 mov     pb, #6
353cc     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
353d0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
353d4     08 00 90 AD |         if_z    jmp     #.rl3
353d8     FC EF 6F FB |                 djnz    pb, #.rl2
353dc     68 00 B0 FD |                 call    #hkbd_translate
353e0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
353e4                 | 
353e4     00 90 07 F6 |                 mov     hpar3, #0
353e8     1F 90 27 F4 |                 bith    hpar3, #31
353ec                 | 
353ec     6F 00 74 FD | .press          modc    _clr    wc
353f0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
353f4     02 F0 07 F1 |                 add     ptra, #2
353f8     06 EC 07 F6 |                 mov     pa, #6
353fc     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
35400     20 00 90 AD |         if_z    jmp     #.pl3
35404     30 13 F0 FE |                 loc     ptrb, #hkbd_report
35408     02 F2 07 F1 |                 add     ptrb, #2
3540c     06 EE 07 F6 |                 mov     pb, #6
35410     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
35414     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
35418     08 00 90 AD |         if_z    jmp     #.pl3
3541c     FC EF 6F FB |                 djnz    pb, #.pl2
35420     24 00 B0 FD |                 call    #hkbd_translate
35424     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
35428                 | 
35428     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3542c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
35430     28 02 64 FD |                 setq #1
35434     61 73 07 FB |                 rdlong  htmp1, ptra++
35438     28 02 64 FD |                 setq #1
3543c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
35440     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
35444                 | 
35444     2D 00 64 FD |                 ret
35448                 | 
35448                 | '------------------------------------------------------------------------------
35448                 | ' Translate keyboard scancode to ASCII
35448                 | '------------------------------------------------------------------------------
35448                 | ' On entry:
35448                 | '   hpar1 - scancode
35448                 | '   hpar2 - key modifiers state
35448                 | '       c - pressed (0) or released (1) flag
35448                 | ' On exit:
35448                 | '   hpar1 - bit     31 = 0 pressed, 1 released
35448                 | '               30..17 = unused
35448                 | '                   18 = scroll-lock state 
35448                 | '                   17 = caps-lock state
35448                 | '                   16 = num-lock state 
35448                 | '                15..8 = key modifiers state
35448                 | '                 7..0 = scancode
35448                 | '------------------------------------------------------------------------------
35448                 | hkbd_translate
35448     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3544c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
35450     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
35454     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
35458     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3545c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
35460                 | 
35460                 |         if EMUPAD_MAX_PLAYER > 0
35460                 | 
35460                 |         if EMUPAD_BT0_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT1_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT2_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT3_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT4_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT5_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT6_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT7_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT8_BIT >= 0
35460                 |         end
35460                 |         if EMUPAD_BT9_BIT >= 0
35460                 |         end
35460                 | 
35460                 |         end
35460     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
35464     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
35468     1F 8C 47 F4 |                 bitc    hpar1, #31
3546c                 |         if KEYQUEUE_SIZE > 0
3546c     C4 09 B0 FE |                 loc pb,#keyq_head
35470     F7 71 E3 FA |                 rdword htmp,pb
35474     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
35478     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3547c     B8 75 03 F6 |                 mov htmp2,htmp
35480     04 74 07 FA |                 mul htmp2,#4
35484     F7 75 03 F1 |                 add htmp2,pb
35488     02 74 07 F1 |                 add htmp2,#2
3548c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
35490     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
35494     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
35498     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3549c                 |         end
3549c     2D 00 7C FD |                 ret wcz
354a0                 | 
354a0                 | if HAVE_MOUSE
354a0                 | '------------------------------------------------------------------------------
354a0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
354a0                 | '------------------------------------------------------------------------------
354a0                 | ' On entry:
354a0                 | ' On exit:
354a0                 | '------------------------------------------------------------------------------
354a0                 | hget_mouse_in_report
354a0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
354a4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
354a8     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
354ac     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
354b0     CF 02 A0 FD |                 call    #do_int_in
354b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
354b8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
354bc                 | 
354bc     00 90 0F F2 |                 cmp     hpar3, #0               wz
354c0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
354c4                 | 
354c4     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
354c8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
354cc     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
354d0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
354d4                 | 
354d4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
354d8     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
354dc     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
354e0     01 90 87 31 |         if_ae   sub     hpar3, #1
354e4                 | 
354e4     40 09 90 FE |                 loc     pa, #mouse_limits
354e8     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
354ec                 | 
354ec                 |                 ' load xacc,yacc,zacc
354ec     28 04 64 FD |                 setq    #3-1
354f0     80 87 07 FB |                 rdlong  hr1,ptrb
354f4                 |                 ' load limits and outptr
354f4     28 04 64 FD |                 setq    #3-1
354f8     F6 73 03 FB |                 rdlong  htmp1,pa
354fc                 | 
354fc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
35500     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
35504     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
35508     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3550c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
35510     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
35514     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
35518     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3551c                 |               
3551c                 | 
3551c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
35520     07 70 67 F7 |                 signx   htmp, #7
35524     B8 87 03 F1 |                 add     hr1,htmp
35528     00 72 0F F2 |                 cmp     htmp1,#0 wz
3552c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
35530     00 86 47 53 |         if_ne   fges    hr1,#0
35534                 | 
35534     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
35538     07 70 67 F7 |                 signx   htmp, #7
3553c     B8 89 03 F1 |                 add     hr2,htmp
35540     00 74 0F F2 |                 cmp     htmp2,#0 wz
35544     BA 89 63 53 |         if_ne   fles    hr2,htmp2
35548     00 88 47 53 |         if_ne   fges    hr2,#0
3554c                 |                 
3554c                 | 
3554c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
35550     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
35554     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
35558     B8 8B 03 A1 |         if_z    add     hr3,htmp
3555c                 | 
3555c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
35560     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
35564                 | 
35564                 |                 ' write back accumulators
35564     28 04 64 FD |                 setq    #3-1
35568     80 87 67 FC |                 wrlong  hr1,ptrb
3556c                 |                 ' if outptr set, write X/Y words
3556c     00 76 0F F2 |                 cmp htmp3,#0                    wz
35570     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
35574     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
35578     2D 00 64 FD |                 ret
3557c                 | end
3557c                 | 
3557c                 | '------------------------------------------------------------------------------
3557c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3557c                 | '------------------------------------------------------------------------------
3557c                 | ' On entry:
3557c                 | ' On exit:
3557c                 | '------------------------------------------------------------------------------
3557c                 | if _HAVE_GAMEPAD
3557c                 | hget_gp_in_report
3557c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
35580     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
35584                 | 
35584     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
35588     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3558c     00 90 E3 F8 |                 getbyte hpar3
35590     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
35594     CF 02 A0 FD |                 call    #do_int_in
35598     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3559c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
355a0                 | 
355a0     00 90 0F F2 |                 cmp     hpar3, #0               wz
355a4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
355a8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
355a8                 | 
355a8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
355ac     00 70 E3 F8 |                 getbyte htmp                            ' |
355b0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
355b4     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
355b8     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
355bc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
355c0     B8 01 C0 F8 |                 setbyte htmp                            ' |
355c4                 | 
355c4                 | ' Note: the following code compares the current and previous reports
355c4                 | ' and process the data if there are changes to ease the debug output.
355c4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
355c4                 | ' gpPreReport buffer.
355c4                 | 
355c4                 |                 ' ----- start of block to remove
355c4                 |                 {
355c4                 |                 }
355c4                 |                 ' ----- end of block to remove
355c4     F4 04 90 FE |                 loc pa,#hpad_translate
355c8     2A EC 63 FD |                 push pa
355cc                 | 
355cc                 |                 ' FALL THROUGH !!!!
355cc                 | 
355cc                 | '------------------------------------------------------------------------------
355cc                 | ' Decode controller report
355cc                 | '------------------------------------------------------------------------------
355cc                 | hid_decode
355cc                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
355cc     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
355d0     00 04 00 FF 
355d4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
355d8                 | 
355d8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
355dc                 | 
355dc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
355e0     00 2A E3 F8 |                 getbyte hidr_type
355e4     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
355e8     34 02 90 AD |         if_z    jmp     #hpad_xinput
355ec     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
355f0     1C 03 90 AD |         if_z    jmp     #hpad_ps3
355f4     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
355f8     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
355fc     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
35600                 |                 
35600                 | 
35600                 | '------------------------------------------------------------------------------
35600                 | ' Handle HID controller (or mouse now
35600                 | ' On entry:
35600                 | '   ptrb - controller report
35600                 | '------------------------------------------------------------------------------
35600                 | hpad_hid
35600     1B 01 A0 FD |                 call    #get_hid_descr_buffer
35604     F7 F1 03 F6 |                 mov     ptra, pb
35608     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3560c     00 EC 03 F6 |                 mov     pa, 0-0
35610                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
35610     19 2A 3B FF 
35614     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
35618                 | 
35618                 | .next
35618     00 EC 5F F2 |                 cmps    pa, #0      wcz
3561c     2D 00 7C ED |         if_be   ret     wcz
35620                 | 
35620     61 8D C7 FA |                 rdbyte  hpar1, ptra++
35624     01 EC 87 F1 |                 sub     pa, #1
35628     00 8E 07 F6 |                 mov     hpar2, #0
3562c                 | 
3562c     C6 71 03 F6 |                 mov     htmp, hpar1
35630     03 70 07 F5 |                 and     htmp, #$03
35634     01 70 0F F2 |                 cmp     htmp, #1    wz
35638     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3563c     07 8E 67 A7 |         if_z    signx   hpar2,#7
35640     01 EC 87 A1 |         if_z    sub     pa, #1
35644     02 70 0F F2 |                 cmp     htmp, #2    wz
35648     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3564c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
35650     02 EC 87 A1 |         if_z    sub     pa, #2
35654     03 70 0F F2 |                 cmp     htmp, #3    wz
35658     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3565c     04 EC 87 A1 |         if_z    sub     pa, #4
35660                 | 
35660     FC 8C 07 F5 |                 and     hpar1, #$FC
35664                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
35664                 | 
35664     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
35668     0C 01 90 AD |         if_z    jmp     #.report_id
3566c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
35670     24 01 90 AD |         if_z    jmp     #.usage_page
35674     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
35678     2C 01 90 AD |         if_z    jmp     #.usage
3567c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
35680     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
35684     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
35688     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3568c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
35690     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
35694     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
35698     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3569c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
356a0     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
356a4     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
356a8     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
356ac     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
356b0     64 FF 9F 5D |         if_nz   jmp     #.next
356b4                 | 
356b4     D8 1D A7 FB |                 tjf     hidr_state,#.next
356b8                 | 
356b8     03 8E 07 F5 |                 and     hpar2, #$03
356bc     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
356c0     18 00 90 5D |         if_nz   jmp     #.skip
356c4                 | 
356c4     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
356c8     20 00 90 AD |         if_z    jmp     #.axes
356cc     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
356d0     5C 00 90 AD |         if_z    jmp     #.hats
356d4     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
356d8     70 00 90 AD |         if_z    jmp     #.buttons
356dc                 | .skip
356dc     8F 71 03 F6 |                 mov     htmp, hidr_size
356e0     90 71 03 FA |                 mul     htmp, hidr_count
356e4     B8 23 03 F1 |                 add     hidr_offset, htmp
356e8     2C FF 9F FD |                 jmp     #.next
356ec                 | .axes
356ec                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
356ec     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
356f0     90 87 03 F6 |                 mov     hr1, hidr_count
356f4                 | .l1
356f4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
356f8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
356fc     04 03 B0 FD |                 call    #hpad_getbits
35700     64 03 B0 FD |                 call    #hpad_normalize
35704     06 84 1F F2 |                 cmp     hr0, #6         wcz
35708     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3570c     00 88 43 C8 |         if_b    getnib  hr2
35710     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
35714     5F 01 20 C9 |         if_b    setword retval
35718     01 84 07 C1 |         if_b    add     hr0, #1
3571c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
35720     F4 87 6F FB |                 djnz    hr1, #.l1
35724                 | 
35724     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
35728     01 1C 07 F6 |                 mov     hidr_state, #1
3572c     E8 FE 9F FD |                 jmp     #.next
35730                 | .hats
35730                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
35730     91 8D 03 F6 |                 mov     hpar1, hidr_offset
35734     8F 8F 03 F6 |                 mov     hpar2, hidr_size
35738     C8 02 B0 FD |                 call    #hpad_getbits
3573c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
35740     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
35744     01 1C 07 F6 |                 mov     hidr_state, #1
35748     90 FF 9F FD |                 jmp     #.skip
3574c                 | .buttons
3574c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3574c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
35750     8F 8F 03 F6 |                 mov     hpar2, hidr_size
35754     90 8F 03 FA |                 mul     hpar2, hidr_count
35758     A8 02 B0 FD |                 call    #hpad_getbits
3575c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
35760     B8 BF 62 F0 |                 shl     retval, htmp
35764     5F 17 43 F5 |                 or      hidr_buttons, retval
35768     90 71 03 F1 |                 add     htmp, hidr_count
3576c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
35770     01 1C 07 F6 |                 mov     hidr_state, #1
35774     64 FF 9F FD |                 jmp     #.skip
35778                 | .report_id
35778     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3577c     2D 00 7C 5D |         if_nz   ret     wcz
35780     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
35784     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
35788     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3578c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
35790     01 F2 87 51 |         if_nz   sub     ptrb,#1
35794     80 FE 9F FD |                 jmp     #.next
35798                 | .usage_page
35798     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3579c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
357a0     04 1C 07 A6 |         if_z    mov     hidr_state, #4
357a4     70 FE 9F FD |                 jmp     #.next
357a8                 | .usage
357a8     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
357ac     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
357b0     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
357b4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
357b8     5C FE 9F AD |         if_z    jmp     #.next
357bc     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
357c0     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
357c4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
357c8     4C FE 9F AD |         if_z    jmp     #.next
357cc     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
357d0     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
357d4     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
357d8     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
357dc     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
357e0     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
357e4     10 00 90 AD |         if_z    jmp     #.usage_axis
357e8     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
357ec     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
357f0     03 1C 07 A6 |         if_z    mov     hidr_state, #3
357f4     20 FE 9F FD |                 jmp     #.next
357f8                 | .usage_axis
357f8     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
357fc     18 FE 9F CD |         if_b    jmp     #.next
35800     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
35804     C7 01 00 F8 |                 setnib  hpar2
35808                 | 
35808     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3580c     C7 8F C3 F9 |                 decod   hpar2
35810     C7 0F 43 F5 |                 or      hidr_flags, hpar2
35814                 | 
35814     01 24 07 F1 |                 add     hidr_usage_idx, #1
35818     02 1C 07 F6 |                 mov     hidr_state, #2
3581c     F8 FD 9F FD |                 jmp     #.next
35820                 | 
35820                 | '------------------------------------------------------------------------------
35820                 | ' Handle XInput controller
35820                 | ' On entry:
35820                 | '   ptrb - controller report
35820                 | '------------------------------------------------------------------------------
35820                 | '   Default implementation translates the report to a pseudo-defacto hid
35820                 | '   standard and jumps to hpad_translate for actions.
35820                 | '   Implementors may take specific actions for this kind of controller.
35820                 | '------------------------------------------------------------------------------
35820                 | hpad_xinput
35820     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
35824     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
35828     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3582c     14 70 0F F2 |                 cmp     htmp, #$14      wz
35830     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
35834                 | 
35834                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
35834                 | 
35834     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
35838     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3583c                 | 
3583c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
35840     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
35844     5F BF 22 F6 |                 not     retval
35848     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3584c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
35850     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
35854     5F BF 22 F6 |                 not     retval
35858     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3585c                 | 
3585c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
35860     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
35864     C0 BE 1E F2 |                 cmp     retval, #192    wcz
35868     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3586c     F8 01 B0 FD |                 call    #hpad_normalize
35870     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
35874     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
35878     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3587c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
35880     E4 01 B0 FD |                 call    #hpad_normalize
35884     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
35888                 | 
35888     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3588c     81 BF E6 FA |                 rdword  retval, ptrb[1]
35890     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
35894     00 16 47 F4 |                 bitc    hidr_buttons, #0
35898     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3589c     01 16 47 F4 |                 bitc    hidr_buttons, #1
358a0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
358a4     02 16 47 F4 |                 bitc    hidr_buttons, #2
358a8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
358ac     03 16 47 F4 |                 bitc    hidr_buttons, #3
358b0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
358b4     04 16 47 F4 |                 bitc    hidr_buttons, #4
358b8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
358bc     05 16 47 F4 |                 bitc    hidr_buttons, #5
358c0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
358c4     08 16 47 F4 |                 bitc    hidr_buttons, #8
358c8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
358cc     09 16 47 F4 |                 bitc    hidr_buttons, #9
358d0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
358d4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
358d8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
358dc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
358e0     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
358e4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
358e8                 | 
358e8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
358ec     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
358f0     7A BB 7A FF 
358f4     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
358f8     F9 FF 7F FF 
358fc     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
35900     B9 71 5F F9 |                 altgn   htmp, #htmp1
35904     00 70 43 F8 |                 getnib  htmp
35908     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3590c                 | 
3590c     AC 01 90 FD |                 jmp     #hpad_translate
35910                 | 
35910                 | '------------------------------------------------------------------------------
35910                 | ' Handle PS3 controller
35910                 | ' On entry:
35910                 | '   ptrb - controller report
35910                 | '------------------------------------------------------------------------------
35910                 | '   Default implementation translates the report to a pseudo-defacto hid
35910                 | '   standard and jumps to hpad_translate for actions.
35910                 | '   Implementors may take specific actions for this kind of controller.
35910                 | '------------------------------------------------------------------------------
35910                 | hpad_ps3
35910     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
35914     01 70 0F F2 |                 cmp     htmp, #$01      wz
35918     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3591c                 | 
3591c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3591c                 | 
3591c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
35920     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
35924     40 01 B0 FD |                 call    #hpad_normalize
35928     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3592c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
35930     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
35934     30 01 B0 FD |                 call    #hpad_normalize
35938     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3593c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
35940     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
35944     20 01 B0 FD |                 call    #hpad_normalize
35948     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3594c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
35950     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
35954     10 01 B0 FD |                 call    #hpad_normalize
35958     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3595c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
35960     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
35964                 | 
35964     08 8C 07 F6 |                 mov     hpar1, #8
35968     13 8E 07 F6 |                 mov     hpar2, #19
3596c     94 00 B0 FD |                 call    #hpad_getbits
35970                 | 
35970     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
35974     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
35978     00 16 47 F4 |                 bitc    hidr_buttons, #0
3597c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
35980     01 16 47 F4 |                 bitc    hidr_buttons, #1
35984     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
35988     02 16 47 F4 |                 bitc    hidr_buttons, #2
3598c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
35990     03 16 47 F4 |                 bitc    hidr_buttons, #3
35994     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
35998     04 16 47 F4 |                 bitc    hidr_buttons, #4
3599c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
359a0     05 16 47 F4 |                 bitc    hidr_buttons, #5
359a4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
359a8     06 16 47 F4 |                 bitc    hidr_buttons, #6
359ac     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
359b0     07 16 47 F4 |                 bitc    hidr_buttons, #7
359b4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
359b8     08 16 47 F4 |                 bitc    hidr_buttons, #8
359bc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
359c0     09 16 47 F4 |                 bitc    hidr_buttons, #9
359c4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
359c8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
359cc     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
359d0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
359d4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
359d8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
359dc                 | 
359dc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
359e0     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
359e4     09 FA 79 FF 
359e8     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
359ec     FF FA 7F FF 
359f0     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
359f4     B9 71 5F F9 |                 altgn   htmp, #htmp1
359f8     00 70 43 F8 |                 getnib  htmp
359fc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
35a00                 | 
35a00     B8 00 90 FD |                 jmp     #hpad_translate
35a04                 | 
35a04                 | '------------------------------------------------------------------------------
35a04                 | ' Read bits from report data buffer
35a04                 | '------------------------------------------------------------------------------
35a04                 | ' On entry:
35a04                 | '   PTRB - report buffer
35a04                 | '   hpar1 - start bit
35a04                 | '   hpar2 - number of bits
35a04                 | ' On exit:
35a04                 | '   retval - bits
35a04                 | '------------------------------------------------------------------------------
35a04                 | hpad_getbits
35a04     C6 71 03 F6 |                 mov     htmp, hpar1
35a08     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
35a0c     F9 71 03 F1 |                 add     htmp, ptrb
35a10     B8 BF 02 FB |                 rdlong  retval, htmp
35a14                 | 
35a14     C6 73 03 F6 |                 mov     htmp1, hpar1
35a18     07 72 07 F5 |                 and     htmp1, #$07     ' shift
35a1c     B9 BF 42 F0 |                 shr     retval, htmp1
35a20                 | 
35a20     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
35a24     10 00 90 1D |         if_a    jmp     #.l1
35a28                 | 
35a28     C7 8F C3 F9 |                 decod   hpar2
35a2c     01 8E 87 F1 |                 sub     hpar2, #1
35a30     C7 BF 02 F5 |                 and     retval, hpar2
35a34     2D 00 64 FD |                 ret
35a38                 | .l1
35a38     FF 7F 00 FF 
35a3c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
35a40     03 70 07 F1 |                 add     htmp, #3
35a44     B8 75 03 FB |                 rdlong  htmp2, htmp
35a48     18 8E 87 F1 |                 sub     hpar2, #24
35a4c     C7 8F C3 F9 |                 decod   hpar2
35a50     01 8E 87 F1 |                 sub     hpar2, #1
35a54     B9 75 43 F0 |                 shr     htmp2, htmp1
35a58     C7 75 03 F5 |                 and     htmp2, hpar2
35a5c     18 74 67 F0 |                 shl     htmp2, #24
35a60     BA BF 42 F5 |                 or      retval, htmp2
35a64     2D 00 64 FD |                 ret
35a68                 | 
35a68                 | '------------------------------------------------------------------------------
35a68                 | ' Normalize value to signed word (-32768 / 32767)
35a68                 | '------------------------------------------------------------------------------
35a68                 | ' On entry:
35a68                 | '   retval - value to normalize
35a68                 | '   hidr_lminmax - min (word 1) max (word 0) value range
35a68                 | '   - or -
35a68                 | '   hidr_pminmax - min (word 1) max (word 0) value range
35a68                 | '   hidr_size - value bits length
35a68                 | ' On exit:
35a68                 | '   retval - normalized value
35a68                 | '------------------------------------------------------------------------------
35a68                 | hpad_normalize
35a68     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
35a6c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
35a70     2D 00 64 AD |         if_z    ret
35a74     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
35a78     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
35a7c     0F 72 77 F7 |                 signx   htmp1, #15      wc
35a80     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
35a84     00 BE 66 C7 |         if_c    signx   retval, #0-0
35a88     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
35a8c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
35a90     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
35a94     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
35a98     B8 71 53 F6 |                 abs     htmp            wc
35a9c     1F BE 0E F4 |                 testb   retval, #31     wz
35aa0     5F BF 42 F6 |                 abs     retval
35aa4     B8 BF 12 FD |                 qdiv    retval, htmp
35aa8     18 BE 62 FD |                 getqx   retval
35aac     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
35ab0     C0 FF 7F FF 
35ab4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
35ab8     2D 00 64 FD |                 ret
35abc                 | 
35abc                 | '------------------------------------------------------------------------------
35abc                 | ' Perform controller actions
35abc                 | ' On entry:
35abc                 | '    hidr_id        report id
35abc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
35abc                 | '                      X = hidr_axis+0, #0
35abc                 | '                      Y = hidr_axis+0, #1
35abc                 | '                      Z = hidr_axis+1, #0
35abc                 | '                     RX = hidr_axis+1, #1
35abc                 | '                     RY = hidr_axis+2, #0
35abc                 | '                     RZ = hidr_axis+2, #1
35abc                 | '    hidr_buttons   buttons state (bits 0 to 31)
35abc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
35abc                 | '
35abc                 | '                     -------3 -------2 -------1 -------0 byte
35abc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
35abc                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
35abc                 | '                                zyx||| |||||||| ++++++++ n. buttons
35abc                 | '                                |||||| ||||++++--------- n. axes
35abc                 | '                                |||||| ++++------------- n. hats
35abc                 | '                                ++++++------------------ valid axes
35abc                 | '------------------------------------------------------------------------------
35abc                 | hpad_translate
35abc                 | 
35abc                 | 
35abc                 |         if HAVE_HIDPAD
35abc     84 0C F0 FE |                 loc     ptrb,#hidpad_report
35ac0     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
35ac4     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
35ac8     01 70 E7 F2 |                 cmpsub  htmp,#1
35acc     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
35ad0     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
35ad4     2D 00 7C 3D |         if_ae   ret     wcz
35ad8     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
35adc     B8 F3 03 F1 |                 add     ptrb,htmp
35ae0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
35ae4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
35ae8     28 0C 64 FD |                 setq    #7-1
35aec     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
35af0                 |         end
35af0                 | 
35af0                 | 
35af0                 |         if EMUPAD_MAX_PLAYER > 0
35af0                 | .emupad_no_hat
35af0                 |         if EMUPAD_BT0_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT1_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT2_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT3_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT4_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT5_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT6_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT7_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT8_BIT >= 0
35af0                 |         end
35af0                 |         if EMUPAD_BT9_BIT >= 0
35af0                 |         end
35af0                 | .emupad_slot_over
35af0                 |         end
35af0                 | 
35af0                 |         if 0
35af0                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
35af0                 | 
35af0                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
35af0                 | 
35af0                 |         end
35af0     2D 00 64 FD |                 ret
35af4                 | end
35af4                 | 
35af4                 | if EMUPAD_MAX_PLAYER > 0
35af4                 | '------------------------------------------------------------------------------
35af4                 | ' Clear EmuPad state
35af4                 | '------------------------------------------------------------------------------
35af4                 | emupad_reset
35af4                 | 
35af4                 | '------------------------------------------------------------------------------
35af4                 | ' Get EmuPad Player number for current device (into retval)
35af4                 | ' Z flag is also set if current device is valid
35af4                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
35af4                 | '------------------------------------------------------------------------------
35af4                 | emupad_getnum
35af4                 | .loop
35af4                 | '------------------------------------------------------------------------------
35af4                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
35af4                 | '------------------------------------------------------------------------------
35af4                 | emupad_discon
35af4                 | .loop         
35af4                 |         
35af4                 |         ' FALL THROUGH!!!
35af4                 | 
35af4                 | '------------------------------------------------------------------------------
35af4                 | ' Update EmuPad reports (all of them...)
35af4                 | '------------------------------------------------------------------------------
35af4                 | emupad_write_reports
35af4                 | .devloop
35af4                 | 
35af4                 | end
35af4                 | 
35af4                 | 
35af4                 | '------------------------------------------------------------------------------
35af4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
35af4                 | '------------------------------------------------------------------------------
35af4                 | ' On entry:
35af4                 | ' On exit:
35af4                 | '------------------------------------------------------------------------------
35af4                 | hget_hub_status
35af4     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
35af8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
35afc     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
35b00     01 90 2F F9 |                 setword hpar3, #1, #1
35b04     CF 02 A0 FD |                 call    #do_int_in
35b08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35b0c     0C 00 90 AD |         if_z    jmp     #.data
35b10     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35b14     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
35b18     2D 00 64 FD |                 ret
35b1c                 | .data
35b1c     00 90 0F F2 |                 cmp     hpar3, #0               wz
35b20     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
35b24                 | 
35b24     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
35b28     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
35b2c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
35b30     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
35b34                 |                 debug(ubin_long(hub_status_chg))
35b34                 | 
35b34     01 5A 06 F6 |                 mov     hdev_port, #1
35b38                 | .loop
35b38     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
35b3c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
35b40     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
35b44     F0 FF 9F 3D |         if_nc   jmp     #.loop
35b48     2D 00 64 FD |                 ret
35b4c                 | 
35b4c                 | hub_port_handler
35b4c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
35b50     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
35b54     27 EF 03 F6 |                 mov     pb, urx_buff_p
35b58     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35b5c     55 02 A0 FD |                 call    #control_read
35b60     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
35b64                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
35b64                 | 
35b64     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
35b68     50 01 90 5D |         if_x0   jmp     #.other
35b6c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
35b70     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
35b74     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35b78     A0 02 A0 FD |                 call    #control_write
35b7c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
35b80     7C 01 90 5D |         if_x0   jmp     #.disconnect
35b84     B0 99 02 F6 |                 mov     hctwait, _100ms_
35b88     EF 02 A0 FD |                 call    #poll_waitx
35b8c                 | 
35b8c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
35b90     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
35b94     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35b98     A0 02 A0 FD |                 call    #control_write
35b9c                 | 
35b9c     02 76 07 F6 |                 mov     htmp3, #2
35ba0                 | .wait_reset
35ba0     AC 99 02 F6 |                 mov     hctwait, _8ms_
35ba4     EF 02 A0 FD |                 call    #poll_waitx
35ba8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
35bac     27 EF 03 F6 |                 mov     pb, urx_buff_p
35bb0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35bb4     55 02 A0 FD |                 call    #control_read
35bb8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
35bbc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
35bc0     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
35bc4                 | 
35bc4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
35bc8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
35bcc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35bd0     A0 02 A0 FD |                 call    #control_write
35bd4                 | 
35bd4     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
35bd8                 | .wait_recover
35bd8     A7 99 02 F6 |                 mov     hctwait, _1ms_
35bdc     EF 02 A0 FD |                 call    #poll_waitx
35be0     FD 71 6F FB |                 djnz    htmp,#.wait_recover
35be4                 | 
35be4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
35be8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35bec     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35bf0                 | 
35bf0     00 08 00 FF 
35bf4     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35bf8     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
35bfc     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
35c00     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35c04     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
35c08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c0c     48 01 90 5D |         if_nz   jmp     #.done
35c10                 | .get_dev_desc
35c10     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35c14     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35c18     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35c1c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
35c20     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
35c24     01 71 57 FC |                 wrword  htmp, ptra[wValue]
35c28     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
35c2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c30     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
35c34     AC 99 02 F6 |                 mov     hctwait, _8ms_
35c38     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35c3c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
35c40     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
35c44     BE 00 A0 FD |                 call    #calc_crc5
35c48     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
35c4c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
35c50     F7 AD C2 FA |                 rdbyte  total_data, pb
35c54     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35c58     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35c5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c60     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
35c64     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
35c68     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
35c6c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
35c6c     9F 99 02 F6 |                 mov     hctwait, _500us_
35c70     EF 02 A0 FD |                 call    #poll_waitx
35c74     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
35c78     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
35c7c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
35c80     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
35c84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c88     CC 00 90 5D |         if_nz   jmp     #.done
35c8c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
35c90     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
35c94     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
35c98     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
35c9c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
35ca0     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
35ca4     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
35ca8     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
35cac     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
35cb0     A4 00 90 CD |         if_b    jmp     #.done
35cb4     6C F0 BF FD |                 call    #hparse_con_desc
35cb8     9C 00 90 FD |                 jmp     #.done
35cbc                 | 
35cbc                 | .other
35cbc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
35cc0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
35cc4     28 00 90 AD |         if_x1   jmp     #.reset_feature
35cc8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
35ccc     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
35cd0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
35cd4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
35cd8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
35cdc     10 00 90 AD |         if_x1   jmp     #.reset_feature
35ce0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
35ce4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
35ce8     04 00 90 AD |         if_x1   jmp     #.reset_feature
35cec     68 00 90 FD |                 jmp     #.done
35cf0                 | .reset_feature
35cf0     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
35cf4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35cf8     A0 02 A0 FD |                 call    #control_write
35cfc     58 00 90 FD |                 jmp     #.done
35d00                 | .disconnect
35d00                 | 
35d00     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
35d04     00 70 E3 F8 |                 getbyte htmp
35d08     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
35d0c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
35d10     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
35d14     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
35d18     00 76 06 A6 |         if_z    mov     kb_led_states, #0
35d1c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
35d20                 |         if EMUPAD_MAX_PLAYER > 0
35d20                 |         end
35d20                 |         if HAVE_MOUSE
35d20     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
35d24     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
35d28     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
35d2c                 |         end
35d2c                 |         if HAVE_HIDPAD
35d2c     14 0A F0 FE |                 loc ptrb,#hidpad_report
35d30     2D 71 03 F6 |                 mov htmp,hdev_port
35d34     01 70 E7 F2 |                 cmpsub htmp,#1
35d38     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
35d3c     B8 F3 03 F1 |                 add ptrb,htmp
35d40     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
35d44     80 01 6C FC |                 wrlong #0,ptrb
35d48                 |         end
35d48                 | 
35d48     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
35d4c     00 00 C4 F8 |                 setbyte #0
35d50     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
35d54     00 00 04 F6 |                 mov     0-0, #0
35d58                 | 
35d58                 | .done
35d58     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
35d5c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
35d60     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35d64     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
35d68     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
35d6c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
35d70                 | 
35d70     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
35d74     27 EF 03 F6 |                 mov     pb, urx_buff_p
35d78     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35d7c     55 02 A0 FD |                 call    #control_read
35d80     00 69 06 FB |                 rdlong  hub_port_status, ptra
35d84                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
35d84     2D 00 64 FD |                 ret
35d88                 | 
35d88                 | '------------------------------------------------------------------------------
35d88                 | ' Partially populated SETUP packets
35d88                 | '------------------------------------------------------------------------------
35d88     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
35d89     06          |                 byte    REQ_GET_DESC
35d8a     00 01       |                 word    TYPE_DEVICE << 8
35d8c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35d8e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35d90     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
35d91     06          |                 byte    REQ_GET_DESC
35d92     00 02       |                 word    TYPE_CONFIG << 8
35d94     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35d96     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35d98     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
35d99     09          |                 byte    REQ_SET_CONFIG
35d9a     00 00       |                 word    0       ' Configuration value
35d9c     00 00       |                 word    0       ' Zero
35d9e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
35da0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
35da1     05          |                 byte    REQ_SET_ADDR
35da2     00 00       |                 word    0       ' Zero
35da4     00 00       |                 word    0       ' Zero
35da6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
35da8                 | '------------------------------------------------------------------------------
35da8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
35da8                 | ' wValue field dictates which protocol should be used.
35da8                 | '
35da8                 | ' When initialized, all devices default to report protocol. However the host
35da8                 | ' should not make any assumptions about the device state and should set the
35da8                 | ' desired protocol whenever initializing a device.
35da8                 | '------------------------------------------------------------------------------
35da8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
35da9     0B          |                 byte    HID_SET_PROTO
35daa     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
35dac                 |                                                 ' (HID 1.11 Section 7.2.6).
35dac     00 00       |                 word    0               ' Interface index number.
35dae     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
35db0                 | '------------------------------------------------------------------------------
35db0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
35db1     0A          |                 byte    HID_SET_IDLE
35db2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
35db4                 |                                         ' reporting until a change is detected in the report data
35db4                 | 
35db4                 |                                         ' (HID 1.11 Section 7.2.4).
35db4     00 00       |                 word    0       ' Interface index number.
35db6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
35db8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
35db9     09          |                 byte    HID_SET_REPORT
35dba     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
35dbc                 |                                         ' (HID 1.11 Section 7.2.2).
35dbc     00 00       |                 word    0       ' Interface index number.
35dbe     00 00       |                 word    0       ' Size of the report, in bytes.
35dc0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
35dc1     06          |                 byte    REQ_GET_DESC
35dc2     00 22       |                 word    TYPE_REPORT << 8
35dc4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35dc6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35dc8                 | '------------------------------------------------------------------------------
35dc8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
35dc9     06          |                 byte    REQ_GET_DESC
35dca     00 29       |                 word    TYPE_HUB << 8
35dcc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35dce     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35dd0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
35dd1     03          |                 byte    REQ_SET_FEATURE
35dd2     00 00       |                 word    0       ' port power
35dd4     01 00       |                 word    1       ' Port index number (1+)
35dd6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35dd8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
35dd9     01          |                 byte    REQ_CLEAR_FEATURE
35dda     00 00       |                 word    0       ' port power
35ddc     01 00       |                 word    1       ' Port index number (1+)
35dde     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35de0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
35de1     00          |                 byte    REQ_GET_STATUS
35de2     00 00       |                 word    0
35de4     01 00       |                 word    1       ' Port index number (1+)
35de6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
35de8                 | '------------------------------------------------------------------------------
35de8                 | if _HAVE_GAMEPAD
35de8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
35dec                 | ps3_command_buff
35dec     00 00 00 00 
35df0     00          |                 byte    $00, $00, $00, $00, $00
35df1     00 00 00 00 
35df5     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
35df6     FF 27 10 00 
35dfa     32          |                 byte    $FF, $27, $10, $00, $32
35dfb     FF 27 10 00 
35dff     32          |                 byte    $FF, $27, $10, $00, $32
35e00     FF 27 10 00 
35e04     32          |                 byte    $FF, $27, $10, $00, $32
35e05     FF 27 10 00 
35e09     32          |                 byte    $FF, $27, $10, $00, $32
35e0a     00 00 00 00 
35e0e     00          |                 byte    $00, $00, $00, $00, $00
35e0f     00 00 00 00 
35e13     00          |                 byte    $00, $00, $00, $00, $00
35e14     00 00 00 00 
35e18     00          |                 byte    $00, $00, $00, $00, $00
35e19     00 00 00    |                 byte    $00, $00, $00
35e1c                 | '------------------------------------------------------------------------------
35e1c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
35e1f                 |                                         ' 0x01 All blinking
35e1f                 |                                         ' 0x02 1 flashes, then on
35e1f                 |                                         ' 0x03 2 flashes, then on
35e1f                 |                                         ' 0x04 3 flashes, then on
35e1f                 |                                         ' 0x05 4 flashes, then on
35e1f                 |                                         ' 0x06 1 on
35e1f                 |                                         ' 0x07 2 on
35e1f                 |                                         ' 0x08 3 on
35e1f                 |                                         ' 0x09 4 on
35e1f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
35e1f                 |                                         ' 0x0B Blinking*
35e1f                 |                                         ' 0x0C Slow blinking*
35e1f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
35e1f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
35e22     00          |                 byte    $00             ' Left rumble
35e23     00          |                 byte    $00             ' Right rumble
35e24     00 00 00    |                 byte    $00, $00, $00
35e27     00          | end
35e28                 | alignl
35e28                 | 
35e28                 | if HAVE_MOUSE
35e28     00 00 00 00 
35e2c     00 00 00 00 | mouse_limits long 0[2]
35e30     00 00 00 00 | mouse_outptr long 0
35e34                 | end
35e34                 | 
35e34                 | if KEYQUEUE_SIZE > 0
35e34     00          | keyq_head byte 0
35e35     00          | keyq_tail byte 0
35e36     00 00 00 00 
      ...             
36032     00 00 00 00 
36036     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
36038                 | alignl
36038                 | end
36038                 | 
36038                 | if EMUPAD_MAX_PLAYER > 0
36038                 | emupad_rule_buffer
36038                 | if EMUPAD_BUILTIN_RULES
36038                 | file "padmap_builtin.dat"
36038                 | end
36038                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
36038                 | '' Default rule directly follows!
36038                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
36038                 | end
36038                 | 
36038                 | '------------------------------------------------------------------------------
36038                 | ' The USB data cache area gets zero-filled at every device disconnect
36038                 | '------------------------------------------------------------------------------
36038                 | usb_cache_start
36038                 | 
36038                 | ' HID descriptor and report buffers
36038                 | if !!OVERLAP_MEMORY
36038     00 00 00 00 
      ...             
36730     00 00 00 00 
36734     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
36738                 | end
36738     00 00 00 00 
3673c     00 00 00 00 | hkbd_report     byte    0[8]
36740     00 00 00 00 | hkbd_led_rep    byte    0
36744                 | alignl
36744                 | 
36744                 | if HAVE_HIDPAD
36744     00 00 00 00 
      ...             
36800     00 00 00 00 
36804     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
36808                 | end
36808                 | 
36808                 | ' HUB descriptor
36808     00          | hub_descr       byte    0   ' bDescLength
36809     00          |                 byte    0   ' bDescriptorType
3680a     00          |                 byte    0   ' bNbrPorts
3680b     00 00       |                 word    0   ' wHubCharacteristics
3680d     00          |                 byte    0   ' bPwrOn2PwrGood
3680e     00          |                 byte    0   ' bHubContrCurrent
3680f     00          |                 byte    0   ' DeviceRemoveable
36810     00          |                 byte    0   ' PortPwrCtrlMask
36811                 | 
36811                 | usb_cache_end
36811                 | 
36811                 | if HAVE_MOUSE
36811     00 00 00 00 | mouse_xacc      long 0
36815     00 00 00 00 | mouse_yacc      long 0
36819     00 00 00 00 | mouse_zacc      long 0
3681d     00          | mouse_bstate    byte 0
3681e     00          | mouse_lpending  byte 0
3681f     00          | mouse_rpending  byte 0
36820     00          | mouse_mpending  byte 0
36821     00          | mouse_lock      byte 0
36822     00 00 00    |                 byte 0[3] ' padding
36825                 | end
36825                 | 
36825     00 00 00 00 
      ...             
3689d     00 00 00 00 
368a1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
368a5     00 00 00 00 
368a9     00 00 00 00 
368ad     00 00 00 00 
368b1     00 00 00 00 
368b5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
368b7     00 00 00 00 
      ...             
369af     00 00 00 00 
369b3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
369b7                 | 
369b7     00          | driver_cog      byte    0                       ' Current driver cog + 1
369b8                 | 	alignl
369b8                 | _audio096_spin2_dat_
369b8                 | 
369b8                 | audio       org     0
369b8                 | 
369b8     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
369bc     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
369c0     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
369c4                 | 
369c4     01 EC 63 FD |             cogid   pa                   ' compute cogid
369c8     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
369cc     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
369d0     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
369d4                 | 
369d4     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
369d8     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
369dc     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
369e0     0F 20 06 FC |             wrpin   dac2,#right
369e4     0F 00 1E FC |             wxpin   #256,#right    
369e8     41 9C 64 FD |             dirh    #left addpins 1
369ec     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
369f0     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
369f4     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
369f8                 |             
369f8                 | '---------------------------------------------------------------------------------        
369f8                 | '----------------- The main loop -------------------------------------------------
369f8                 | '---------------------------------------------------------------------------------
369f8                 | 
369f8     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
369fc     10 00 90 CD |       if_c  jmp     #loop1
36a00                 |   
36a00     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
36a04     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
36a08     D3 00 80 F1 |             sub     0-0,a40000000
36a0c     FD FD 6D FB |             djnz    cn,#p402
36a10                 |     
36a10     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
36a14     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
36a18     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
36a1c     01 FC 05 C6 |     if_c    mov     cn,#1
36a20     D8 FE 39 F3 |             fle     ct,time3 wcz
36a24     02 FC 05 C6 |     if_c    mov     cn,#2     
36a28     D9 FE 39 F3 |             fle     ct,time4 wcz
36a2c     03 FC 05 C6 |     if_c    mov     cn,#3
36a30     DA FE 39 F3 |             fle     ct,time5 wcz
36a34     04 FC 05 C6 |     if_c    mov     cn,#4
36a38     DB FE 39 F3 |             fle     ct,time6 wcz
36a3c     05 FC 05 C6 |     if_c    mov     cn,#5
36a40     DC FE 39 F3 |             fle     ct,time7 wcz
36a44     06 FC 05 C6 |     if_c    mov     cn,#6
36a48     DD FE 39 F3 |             fle     ct,time8 wcz
36a4c     07 FC 05 C6 |     if_c    mov     cn,#7
36a50                 | 
36a50                 | 
36a50                 | '----------------------------------------------------------------------------------
36a50                 | '------------- Compute channel samples --------------------------------------------
36a50                 | '----------------------------------------------------------------------------------
36a50                 | 
36a50                 | 
36a50     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
36a54     06 BC 65 F0 |             shl     channeladd,#6
36a58     DE F0 03 F1 |             add     ptra,channeladd
36a5c                 | 
36a5c     28 16 64 FD |             setq    #11                        	' read parameters
36a60     00 D3 05 FB |             rdlong  pointer0,ptra
36a64                 |     	    
36a64     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
36a68     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
36a6c     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
36a70     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
36a74     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
36a78     00 C0 0D F2 |             cmp     qq,#0 wz                         
36a7c     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
36a80     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
36a84                 |             
36a84     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
36a88     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
36a8c     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
36a90                 | 
36a90     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
36a94     EA 04 3A F9 |             getword oldrs,sample0,#1
36a98     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
36a9c     EE F6 31 F9 |     	    getword avol0,volpan0,#0
36aa0     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
36aa4     EF F2 31 F9 |             getword afreq0,freqskip0,#0
36aa8                 | 
36aa8     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
36aac     00 00 02 F6 |             mov     dt0,0-0    
36ab0     D5 00 82 F1 |             sub     dt0,time0
36ab4                 |             
36ab4     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
36ab8     F9 00 00 F1 |             add     0-0,afreq0  	
36abc                 |             
36abc                 | '---- envelopes
36abc                 |             
36abc     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
36ac0     20 00 00 AF 
36ac4     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
36ac8     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
36acc                 | 
36acc     F9 44 02 F6 |             mov     envs1,afreq0
36ad0     F3 44 02 FA |             mul     envs1,envspd0
36ad4     22 E3 01 F1 |             add     envph0,envs1 
36ad8                 | 
36ad8     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
36adc     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
36ae0     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
36ae4     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
36ae8     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
36aec     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
36af0     00 42 06 36 |     if_ge   mov     envlo,#0
36af4     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
36af8     16 E2 65 30 |     if_ge   shl     envph0,#22
36afc                 | 
36afc     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
36b00     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
36b04     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
36b08     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
36b0c     22 47 3A F9 |             getword envs2,envs1,#1		' next value
36b10     22 45 32 F9 |             getword envs1,envs1,#0		' current value
36b14     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
36b18     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
36b1c     21 45 02 FA |             mul     envs1,envlo
36b20     23 45 02 F1 |             add     envs1,envs2
36b24     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
36b28                 |             
36b28     1B D6 0D F4 | p410        testb   sstart0, #27 wz
36b2c     1B C2 61 AD |     if_z    getrnd  spl
36b30     58 00 90 AD |     if_z    jmp     #p406
36b34                 |  
36b34     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
36b38     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
36b3c     08 D2 45 F0 |             shr     pointer0,#8
36b40                 |          
36b40     1F D6 0D F4 |             testb   sstart0,#31 wz            
36b44     01 D2 65 A0 |     if_z    shl     pointer0,#1        
36b48     1C D6 0D F4 |             testb   sstart0,#28 wz            
36b4c     01 D2 65 A0 |     if_z    shl     pointer0,#1        
36b50                 |         
36b50     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
36b54     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
36b58     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
36b5c                 |             
36b5c     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
36b60     EB C0 01 F1 |             add     qq,sstart0            
36b64                 | 
36b64     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
36b68     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
36b6c     14 01 B0 1D |     if_gt   call    #cache_read
36b70                 |          
36b70     1F D6 0D F4 |             testb   sstart0,#31 wz 
36b74     08 C2 65 50 |     if_nz   shl     spl,#8
36b78     08 D2 65 50 |     if_nz   shl     pointer0,#8
36b7c     07 D2 65 A0 |     if_z    shl     pointer0,#7
36b80     1C D6 0D F4 |             testb   sstart0,#28 wz            
36b84     01 D2 45 A0 |     if_z    shr     pointer0,#1    
36b88     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
36b8c                 | 
36b8c                 | 
36b8c     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
36b90     00 C2 01 F6 |             mov     spl,0-0
36b94     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
36b98     00 C2 01 F6 |             mov     spl,0-0
36b9c                 | 
36b9c     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
36ba0     00 06 02 F6 |             mov     ls0,0-0
36ba4     20 00 00 FF 
36ba8     00 C0 05 F6 |             mov     qq,##16384
36bac     FC C0 81 F1 |             sub     qq,apan0
36bb0     E0 C2 31 FA |             scas    spl,qq
36bb4     00 08 02 F6 |             mov     rs0, 0-0
36bb8                 | 
36bb8     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
36bbc     04 0D 02 F1 |             add     rs,rs0
36bc0     01 0B 82 F1 |             sub     ls,oldls
36bc4     03 0B 02 F1 |             add     ls,ls0
36bc8                 |    
36bc8     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
36bcc     03 D5 21 F9 |             setword sample0,ls0,#0
36bd0                 |             
36bd0     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
36bd4     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
36bd8     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
36bdc                 |   '  if_z    mov     sample0,#0
36bdc     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
36be0     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
36be4     04 00 00 AF 
36be8     00 AC 05 A1 |     if_z    add     time1,##2048
36bec     D6 AE 01 A6 |     if_z    mov     time2,time1
36bf0     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
36bf4                 | 
36bf4     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
36bf8     00 D3 65 FC |             wrlong  pointer0,ptra
36bfc     08 E3 65 FC |             wrlong  envph0,ptra[8]
36c00     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
36c04                 |                       
36c04     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
36c08     FF BF 25 A7 |     if_z    decmod  front, #511          
36c0c                 |          
36c0c     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
36c10     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
36c14     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
36c18     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
36c1c                 | 	    
36c1c                 | 		    
36c1c     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
36c20     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
36c24     02 11 02 F6 |             mov     newsample, oldrs       
36c28                 | 
36c28     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
36c2c     00 AB 01 F1 |             add     time0,dt0    
36c30                 |                                      
36c30     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
36c34     D8 FD 9F AD |     if_z    jmp     #loop1
36c38     00 C1 01 F6 |             mov     qq,dt0
36c3c                 |   
36c3c     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
36c40     00 BE 9D F2 |             cmpr    front, #0-0 wcz
36c44     F4 FF 9F AD |     if_e    jmp     #p301    
36c48                 | 		
36c48     00 16 0E F2 | 	    cmp     scbase,#0 wz
36c4c     20 00 90 AD |     if_z    jmp     #p302	   
36c50                 |   
36c50     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
36c54     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
36c58     02 1A 66 C0 |     if_c    shl     scptr2,#2
36c5c     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
36c60     60 1A 66 FC |             wrlong  scptr2,#$60
36c64     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
36c68     01 00 00 CF 
36c6c     7F 18 06 C7 |     if_c    incmod  scptr,##639
36c70                 | 			    
36c70     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
36c74     00 00 00 FF 
36c78     FF BF 05 F7 |             incmod  front, ##511
36c7c     EF C1 6D FB |             djnz    qq,#p301
36c80                 |             
36c80     74 FD 9F FD |             jmp     #loop            'loop
36c84                 | 
36c84                 | '----------------------------------------------------------------------------------
36c84                 | '------------- This is the end of the main loop -----------------------------------
36c84                 | '----------------------------------------------------------------------------------
36c84                 | 
36c84                 | '----------------------------------------------------------------------------------
36c84                 | '------------- PSRAM cache ----------- --------------------------------------------
36c84                 | '----------------------------------------------------------------------------------
36c84                 | 
36c84                 | ' There are 8 cache pointers for 8 channels
36c84                 | ' if 24 higher bits of address=cache, then get a word from the cache
36c84                 | ' else load the cache from PSRAM, update the pointer, then read a sample
36c84                 | 
36c84                 | 
36c84     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
36c88                 |             
36c88     E0 3C 02 F6 | 	    mov     addrhi,qq		
36c8c     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
36c90     12 FD 95 F9 | 	    alts    cn,#cache1            
36c94     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
36c98     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
36c9c                 | 	
36c9c     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
36ca0     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
36ca4     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
36ca8     08 34 66 F0 | 	    shl     cmd,#8
36cac     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
36cb0     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
36cb4     08 36 66 F0 |             shl     hubaddr,#8                  '
36cb8     11 37 02 F1 |             add     hubaddr,hubptr 
36cbc     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
36cc0     28 04 64 FD |             setq    #2                          ' write 3 longs
36cc4     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
36cc8     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
36ccc     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
36cd0                 |             
36cd0                 | 	
36cd0     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
36cd4     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
36cd8     11 C1 01 F1 | 	    add     qq,hubptr
36cdc     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
36ce0     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
36ce4                 |           
36ce4                 | 
36ce4                 | '--------------------------------------------------------------------------
36ce4                 | '------ Interrupt service -------------------------------------------------
36ce4                 | '------ Output the sample, get the next one if exists ---------------------
36ce4                 | '--------------------------------------------------------------------------
36ce4                 | 
36ce4     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
36ce8     0F CC 25 FC |             wypin   rsample,#right       '4
36cec     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
36cf0     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
36cf4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
36cf8     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
36cfc     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
36d00                 |     
36d00     F5 FF 3B FB |             reti1                        '17/19 
36d04                 |           
36d04                 | '---------------------------------------------------------------------------
36d04                 | '-------- End of interrupt -------------------------------------------------
36d04                 | '---------------------------------------------------------------------------    
36d04                 | 
36d04                 | 
36d04                 | '---------------------------------------------------------------------------
36d04                 | '------- Variables ---------------------------------------------------------
36d04                 | '---------------------------------------------------------------------------
36d04                 | 
36d04                 | ' constants
36d04                 | 
36d04     00 00 00 40 | a40000000   long $40000000
36d08     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
36d0c                 | 
36d0c                 | ' Time variables
36d0c                 | 
36d0c     00 00 00 00 | time0       long 0    ' Global sample computing time
36d10     01 00 00 00 | time1       long 1    ' Local channels time
36d14     02 00 00 00 | time2       long 2
36d18     03 00 00 00 | time3       long 3
36d1c     04 00 00 00 | time4       long 4
36d20     05 00 00 00 | time5       long 5
36d24     06 00 00 00 | time6       long 6
36d28     07 00 00 00 | time7       long 7
36d2c     08 00 00 00 | time8       long 8
36d30                 | 
36d30     00 00 00 00 | channeladd long 0
36d34                 | 
36d34     00 00 00 00 | front       long 0
36d38                 | 
36d38                 | ' temporary variables 
36d38     00 00 00 00 | qq          long 0
36d3c     00 00 00 00 | spl         long 0
36d40     00 00 00 00 | zero        long 0
36d44     00 00 00 00 | mailbox     long 0
36d48     00 00 00 00 | mailbox2 long 0
36d4c                 | 
36d4c                 | ' Interrupt ISR variables
36d4c                 | 
36d4c     00 00 00 00 | lsample     long 0
36d50     00 00 00 00 | rsample     long 0
36d54     00 00 00 00 | lsnext      long 0
36d58     00 00 00 00 | rsnext      long 0 
36d5c                 | 
36d5c                 | ' channel parameter block
36d5c                 | 
36d5c     00 00 00 00 | pointer0    long 0     
36d60     00 00 00 00 | sample0     long 0
36d64     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
36d68     00 00 00 00 | lstart0     long 0
36d6c     00 00 00 00 | lend0       long 0
36d70     00 00 00 00 | volpan0     long 0
36d74     00 00 00 00 | freqskip0   long 0
36d78     00 00 00 00 | command0    long 0
36d7c     00 00 00 00 | envph0	    long 0
36d80     00 00 00 00 | envptr0	    long 0
36d84     00 00 00 00 | envspd0	    long 0
36d88     00 00 00 00 | envlen0	    long 0
36d8c     00 00 00 00 | res5	    long 0
36d90     00 00 00 00 | res6	    long 0
36d94     00 00 00 00 | res7	    long 0
36d98     00 00 00 00 | res8	    long 0
36d9c                 | 
36d9c     00 00 00 00 | afreq0      long 0
36da0     00 00 00 00 | askip0      long 0
36da4     00 00 00 00 | avol0       long 0
36da8     00 00 00 00 | apan0       long 0
36dac                 | 
36dac     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
36db0     00 00 00 00 | cn          long 0
36db4     00 00 00 00 | ct          long 0
36db8     00 00 00 00 | dt0         long 0
36dbc                 | 
36dbc                 | ' Samples
36dbc     00 00 00 00 | oldls       long 0
36dc0     00 00 00 00 | oldrs       long 0
36dc4                 | 
36dc4     00 00 00 00 | ls0         long 0
36dc8     00 00 00 00 | rs0         long 0
36dcc                 | 
36dcc     00 00 00 00 | ls          long 0    
36dd0     00 00 00 00 | rs          long 0
36dd4                 | 
36dd4     00 00 00 00 | oldsample   long 0
36dd8     00 00 00 00 | newsample   long 0
36ddc                 | 
36ddc     00 00 00 00 | nrsample    long 0
36de0     00 00 00 00 | nlsample    long 0
36de4                 | 
36de4     00 00 00 00 | scbase long 0
36de8     00 00 00 00 | scptr long 0
36dec     00 00 00 00 | scptr2 long 0
36df0     00 00 00 00 | scope long 0
36df4                 | 
36df4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
36df8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
36dfc                 | 
36dfc     00 18 07 00 | hubptr      long $71800
36e00     00 00 00 00 | cache1      long 0
36e04     00 00 00 00 | cache2      long 0
36e08     00 00 00 00 | cache3      long 0
36e0c     00 00 00 00 | cache4      long 0
36e10     00 00 00 00 | cache5      long 0
36e14     00 00 00 00 | cache6      long 0
36e18     00 00 00 00 | cache7      long 0
36e1c     00 00 00 00 | cache8      long 0
36e20                 | 
36e20                 | 
36e20     00 00 00 00 | cmd         long 0
36e24     00 00 00 00 | hubaddr     long 0
36e28     00 01 00 00 | count       long 256
36e2c     00 00 00 00 | addrlo long 0
36e30     00 00 00 00 | addrhi long 0
36e34     00 00 00 00 | pointer00 long 0
36e38     00 00 00 00 | envhi long 0
36e3c     00 00 00 00 | envlo long 0
36e40     00 00 00 00 | envs1 long 0
36e44     00 00 00 00 | envs2 long 0
36e48     00 00 00 00 | noise0 long 0
36e4c     00 00 00 00 
36e50     00 00 00 00 | null  			long 	0,0           ' for channel reset
36e54                 | 	alignl
36e54                 | __system__dat_
36e54     00 00 00 00 
36e58     00 00 00 00 | 	byte	$00[8]
36e5c     03 00 00 00 
36e60     00 00 00 00 
36e64     00 00 00 00 
36e68     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e6c     00 00 00 00 
      ...             
370f8     00 00 00 00 
370fc     00 00 00 00 | 	byte	$00[660]
37100     00 00 E0 07 | 	long	(126 {__system____root_opendir})<<20
37104     00 00 F0 07 | 	long	(127 {__system____root_closedir})<<20
37108     00 00 00 08 | 	long	(128 {__system____root_readdir})<<20
3710c     00 00 10 08 | 	long	(129 {__system____root_stat})<<20
37110     00 00 00 00 
37114     00 00 00 00 
37118     00 00 00 00 
3711c     00 00 00 00 
37120     00 00 00 00 
37124     00 00 00 00 
37128     00 00 00 00 | 	byte	$00[28]
3712c     94 71 03 00 | 	long	@@@__system__dat_ + 832
37130     97 71 03 00 | 	long	@@@__system__dat_ + 835
37134     B8 71 03 00 | 	long	@@@__system__dat_ + 868
37138     D1 71 03 00 | 	long	@@@__system__dat_ + 893
3713c     EC 71 03 00 | 	long	@@@__system__dat_ + 920
37140     06 72 03 00 | 	long	@@@__system__dat_ + 946
37144     16 72 03 00 | 	long	@@@__system__dat_ + 962
37148     28 72 03 00 | 	long	@@@__system__dat_ + 980
3714c     3A 72 03 00 | 	long	@@@__system__dat_ + 998
37150     4C 72 03 00 | 	long	@@@__system__dat_ + 1016
37154     58 72 03 00 | 	long	@@@__system__dat_ + 1028
37158     69 72 03 00 | 	long	@@@__system__dat_ + 1045
3715c     7D 72 03 00 | 	long	@@@__system__dat_ + 1065
37160     87 72 03 00 | 	long	@@@__system__dat_ + 1075
37164     97 72 03 00 | 	long	@@@__system__dat_ + 1091
37168     A6 72 03 00 | 	long	@@@__system__dat_ + 1106
3716c     BC 72 03 00 | 	long	@@@__system__dat_ + 1128
37170     D5 72 03 00 | 	long	@@@__system__dat_ + 1153
37174     E9 72 03 00 | 	long	@@@__system__dat_ + 1173
37178     F7 72 03 00 | 	long	@@@__system__dat_ + 1187
3717c     0B 73 03 00 | 	long	@@@__system__dat_ + 1207
37180     17 73 03 00 | 	long	@@@__system__dat_ + 1219
37184     29 73 03 00 | 	long	@@@__system__dat_ + 1237
37188     41 73 03 00 | 	long	@@@__system__dat_ + 1261
3718c     53 73 03 00 | 	long	@@@__system__dat_ + 1279
37190     66 73 03 00 | 	long	@@@__system__dat_ + 1298
37194     4F 4B 00 4E 
37198     75 6D 65 72 
3719c     69 63 61 6C 
371a0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
371a4     75 6D 65 6E 
371a8     74 20 6F 75 
371ac     74 20 6F 66 
371b0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
371b4     61 69 6E 00 
371b8     52 65 73 75 
371bc     6C 74 20 6E 
371c0     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
371c4     65 70 72 65 
371c8     73 65 6E 74 
371cc     61 62 6C 65 
371d0     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
371d4     65 67 61 6C 
371d8     20 6D 75 6C 
371dc     74 69 62 79 
371e0     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
371e4     65 71 75 65 
371e8     6E 63 65 00 
371ec     4E 6F 20 73 
371f0     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
371f4     66 69 6C 65 
371f8     20 6F 72 20 
371fc     64 69 72 65 
37200     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
37204     79 00 42 61 
37208     64 20 66 69 
3720c     6C 65 20 6E 
37210     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
37214     72 00 50 65 
37218     72 6D 69 73 
3721c     73 69 6F 6E 
37220     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
37224     69 65 64 00 
37228     4E 6F 74 20 
3722c     65 6E 6F 75 
37230     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
37234     65 6D 6F 72 
37238     79 00 54 65 
3723c     6D 70 6F 72 
37240     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
37244     66 61 69 6C 
37248     75 72 65 00 
3724c     46 69 6C 65 
37250     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
37254     73 74 73 00 
37258     49 6E 76 61 
3725c     6C 69 64 20 
37260     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
37264     6D 65 6E 74 
37268     00 54 6F 6F 
3726c     20 6D 61 6E 
37270     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
37274     65 6E 20 66 
37278     69 6C 65 73 
3727c     00 49 2F 4F 
37280     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
37284     6F 72 00 4E 
37288     6F 74 20 61 
3728c     20 64 69 72 
37290     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
37294     72 79 00 49 
37298     73 20 61 20 
3729c     64 69 72 65 
372a0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
372a4     79 00 52 65 
372a8     61 64 20 6F 
372ac     6E 6C 79 20 
372b0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
372b4     20 73 79 73 
372b8     74 65 6D 00 
372bc     46 75 6E 63 
372c0     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
372c4     20 6E 6F 74 
372c8     20 69 6D 70 
372cc     6C 65 6D 65 
372d0     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
372d4     00 44 69 72 
372d8     65 63 74 6F 
372dc     72 79 20 6E 
372e0     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
372e4     6D 70 74 79 
372e8     00 4E 61 6D 
372ec     65 20 74 6F 
372f0     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
372f4     6E 67 00 44 
372f8     65 76 69 63 
372fc     65 20 6E 6F 
37300     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
37304     65 6B 61 62 
37308     6C 65 00 42 
3730c     61 64 20 61 
37310     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
37314     73 73 00 42 
37318     72 6F 6B 65 
3731c     6E 20 63 6F 
37320     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
37324     74 69 6F 6E 
37328     00 44 65 76 
3732c     69 63 65 20 
37330     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
37334     65 73 6F 75 
37338     72 63 65 20 
3733c     62 75 73 79 
37340     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
37344     73 73 20 64 
37348     65 76 69 63 
3734c     65 20 6C 69 
37350     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
37354     6F 20 73 70 
37358     61 63 65 20 
3735c     6F 6E 20 64 
37360     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
37364     65 00 55 6E 
37368     6B 6E 6F 77 
3736c     6E 20 65 72 
37370     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
37374     00 00 00 00 
37378     00 00 00 00 | 	byte	$00[8]
3737c     05 00 00 00 
37380     00 00 00 00 
37384     00 00 00 00 
37388     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3738c     00 00 00 00 | 	byte	$00, $00, $00, $00
37390     00 00 60 09 | 	long	(150 {__system___tx})<<20
37394     00 00 70 09 | 	long	(151 {__system___rx})<<20
37398     00 00 00 00 | 	byte	$00, $00, $00, $00
3739c     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0629})<<20
373a0     00 00 90 09 | 	long	(153 {__system____dummy_flush_0630})<<20
373a4     00 00 00 00 
373a8     00 00 00 00 | 	byte	$00[8]
373ac     01 00 00 00 
373b0     06 00 00 00 
373b4     00 00 00 00 
373b8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
373bc     00 00 00 00 
373c0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
373c4     00 00 60 09 | 	long	(150 {__system___tx})<<20
373c8     00 00 70 09 | 	long	(151 {__system___rx})<<20
373cc     00 00 00 00 | 	byte	$00, $00, $00, $00
373d0     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0629})<<20
373d4     00 00 90 09 | 	long	(153 {__system____dummy_flush_0630})<<20
373d8     00 00 00 00 
373dc     00 00 00 00 | 	byte	$00[8]
373e0     01 00 00 00 
373e4     06 00 00 00 
373e8     00 00 00 00 
373ec     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
373f0     00 00 00 00 
373f4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
373f8     00 00 60 09 | 	long	(150 {__system___tx})<<20
373fc     00 00 70 09 | 	long	(151 {__system___rx})<<20
37400     00 00 00 00 | 	byte	$00, $00, $00, $00
37404     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0629})<<20
37408     00 00 90 09 | 	long	(153 {__system____dummy_flush_0630})<<20
3740c     00 00 00 00 
      ...             
3757c     00 00 00 00 
37580     00 00 00 00 | 	byte	$00[376]
37584     88 75 03 00 | 	long	@@@__system__dat_ + 1844
37588     00 00 00 00 
3758c     00 00 00 00 
37590     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37594                 | 	alignl
37594                 | _fatfs_cc_dat_
37594     C7 00 FC 00 
37598     E9 00 E2 00 
3759c     E4 00 E0 00 
375a0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
375a4     EA 00 EB 00 
375a8     E8 00 EF 00 
375ac     EE 00 EC 00 
375b0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
375b4     C9 00 E6 00 
375b8     C6 00 F4 00 
375bc     F6 00 F2 00 
375c0     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
375c4     FF 00 D6 00 
375c8     DC 00 F8 00 
375cc     A3 00 D8 00 
375d0     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
375d4     E1 00 ED 00 
375d8     F3 00 FA 00 
375dc     F1 00 D1 00 
375e0     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
375e4     BF 00 AE 00 
375e8     AC 00 BD 00 
375ec     BC 00 A1 00 
375f0     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
375f4     91 25 92 25 
375f8     93 25 02 25 
375fc     24 25 C1 00 
37600     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
37604     A9 00 63 25 
37608     51 25 57 25 
3760c     5D 25 A2 00 
37610     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
37614     14 25 34 25 
37618     2C 25 1C 25 
3761c     00 25 3C 25 
37620     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
37624     5A 25 54 25 
37628     69 25 66 25 
3762c     60 25 50 25 
37630     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
37634     F0 00 D0 00 
37638     CA 00 CB 00 
3763c     C8 00 31 01 
37640     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
37644     CF 00 18 25 
37648     0C 25 88 25 
3764c     84 25 A6 00 
37650     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
37654     D3 00 DF 00 
37658     D4 00 D2 00 
3765c     F5 00 D5 00 
37660     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
37664     DE 00 DA 00 
37668     DB 00 D9 00 
3766c     FD 00 DD 00 
37670     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
37674     AD 00 B1 00 
37678     17 20 BE 00 
3767c     B6 00 A7 00 
37680     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
37684     B0 00 A8 00 
37688     B7 00 B9 00 
3768c     B3 00 B2 00 
37690     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
37694     61 00 1A 03 
37698     E0 00 17 03 
3769c     F8 00 07 03 
376a0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
376a4     78 01 00 01 
376a8     30 01 32 01 
376ac     06 01 39 01 
376b0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
376b4     2E 01 79 01 
376b8     06 01 80 01 
376bc     4D 00 43 02 
376c0     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
376c4     82 01 84 01 
376c8     84 01 86 01 
376cc     87 01 87 01 
376d0     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
376d4     8B 01 8B 01 
376d8     8D 01 8E 01 
376dc     8F 01 90 01 
376e0     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
376e4     93 01 94 01 
376e8     F6 01 96 01 
376ec     97 01 98 01 
376f0     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
376f4     9B 01 9C 01 
376f8     9D 01 20 02 
376fc     9F 01 A0 01 
37700     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
37704     A2 01 A4 01 
37708     A4 01 A6 01 
3770c     A7 01 A7 01 
37710     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
37714     AB 01 AC 01 
37718     AC 01 AE 01 
3771c     AF 01 AF 01 
37720     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
37724     B3 01 B3 01 
37728     B5 01 B5 01 
3772c     B7 01 B8 01 
37730     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
37734     BB 01 BC 01 
37738     BC 01 BE 01 
3773c     F7 01 C0 01 
37740     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
37744     C3 01 C4 01 
37748     C5 01 C4 01 
3774c     C7 01 C8 01 
37750     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
37754     CB 01 CA 01 
37758     CD 01 10 01 
3775c     DD 01 01 00 
37760     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
37764     12 01 F3 01 
37768     03 00 F1 01 
3776c     F4 01 F4 01 
37770     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
37774     22 02 12 01 
37778     3A 02 09 00 
3777c     65 2C 3B 02 
37780     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
37784     66 2C 3F 02 
37788     40 02 41 02 
3778c     41 02 46 02 
37790     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
37794     40 00 81 01 
37798     86 01 55 02 
3779c     89 01 8A 01 
377a0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
377a4     5A 02 90 01 
377a8     5C 02 5D 02 
377ac     5E 02 5F 02 
377b0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
377b4     62 02 94 01 
377b8     64 02 65 02 
377bc     66 02 67 02 
377c0     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
377c4     6A 02 62 2C 
377c8     6C 02 6D 02 
377cc     6E 02 9C 01 
377d0     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
377d4     9D 01 73 02 
377d8     74 02 9F 01 
377dc     76 02 77 02 
377e0     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
377e4     7A 02 7B 02 
377e8     7C 02 64 2C 
377ec     7E 02 7F 02 
377f0     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
377f4     82 02 A9 01 
377f8     84 02 85 02 
377fc     86 02 87 02 
37800     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
37804     B1 01 B2 01 
37808     45 02 8D 02 
3780c     8E 02 8F 02 
37810     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
37814     B7 01 7B 03 
37818     03 00 FD 03 
3781c     FE 03 FF 03 
37820     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
37824     86 03 88 03 
37828     89 03 8A 03 
3782c     B1 03 11 03 
37830     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
37834     A3 03 A3 03 
37838     C4 03 08 03 
3783c     CC 03 03 00 
37840     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
37844     8F 03 D8 03 
37848     18 01 F2 03 
3784c     0A 00 F9 03 
37850     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
37854     F5 03 F6 03 
37858     F7 03 F7 03 
3785c     F9 03 FA 03 
37860     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
37864     20 03 50 04 
37868     10 07 60 04 
3786c     22 01 8A 04 
37870     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
37874     0E 01 CF 04 
37878     01 00 C0 04 
3787c     D0 04 44 01 
37880     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
37884     00 00 7D 1D 
37888     01 00 63 2C 
3788c     00 1E 96 01 
37890     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
37894     00 1F 08 06 
37898     10 1F 06 06 
3789c     20 1F 08 06 
378a0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
378a4     40 1F 06 06 
378a8     51 1F 07 00 
378ac     59 1F 52 1F 
378b0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
378b4     5D 1F 56 1F 
378b8     5F 1F 60 1F 
378bc     08 06 70 1F 
378c0     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
378c4     BB 1F C8 1F 
378c8     C9 1F CA 1F 
378cc     CB 1F DA 1F 
378d0     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
378d4     F9 1F EA 1F 
378d8     EB 1F FA 1F 
378dc     FB 1F 80 1F 
378e0     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
378e4     08 06 A0 1F 
378e8     08 06 B0 1F 
378ec     04 00 B8 1F 
378f0     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
378f4     BC 1F CC 1F 
378f8     01 00 C3 1F 
378fc     D0 1F 02 06 
37900     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
37904     E5 1F 01 00 
37908     EC 1F F3 1F 
3790c     01 00 FC 1F 
37910     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
37914     32 21 70 21 
37918     10 02 84 21 
3791c     01 00 83 21 
37920     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
37924     30 2C 2F 04 
37928     60 2C 02 01 
3792c     67 2C 06 01 
37930     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
37934     80 2C 64 01 
37938     00 2D 26 08 
3793c     41 FF 1A 03 
37940     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
37944     05 07 09 0E 
37948     10 12 14 16 
3794c     18 1C 1E 43 
37950     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
37954     41 41 43 45 
37958     45 45 49 49 
3795c     49 41 41 45 
37960     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
37964     4F 55 55 59 
37968     4F 55 4F 9C 
3796c     4F 9E 9F 41 
37970     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
37974     A5 A6 A7 A8 
37978     A9 AA AB AC 
3797c     AD AE AF B0 
37980     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
37984     41 41 41 B8 
37988     B9 BA BB BC 
3798c     BD BE BF C0 
37990     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
37994     C5 41 41 C8 
37998     C9 CA CB CC 
3799c     CD CE CF D1 
379a0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
379a4     49 49 49 49 
379a8     D9 DA DB DC 
379ac     DD 49 DF 4F 
379b0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
379b4     4F E6 E8 E8 
379b8     55 55 55 59 
379bc     59 EE EF F0 
379c0     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
379c4     F5 F6 F7 F8 
379c8     F9 FA FB FC 
379cc     FD FE FF 00 
379d0     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
379d4     00 00 00 00 | 	byte	$00, $00, $00, $00
379d8     00 00 50 08 | 	long	(133 {_fatfs_cc_v_close})<<20
379dc     00 00 60 08 | 	long	(134 {_fatfs_cc_v_read})<<20
379e0     00 00 70 08 | 	long	(135 {_fatfs_cc_v_write})<<20
379e4     00 00 80 08 | 	long	(136 {_fatfs_cc_v_lseek})<<20
379e8     00 00 90 08 | 	long	(137 {_fatfs_cc_v_ioctl})<<20
379ec     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_flush})<<20
379f0     00 00 00 00 
379f4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
379f8     00 00 A0 08 | 	long	(138 {_fatfs_cc_v_open})<<20
379fc     00 00 B0 08 | 	long	(139 {_fatfs_cc_v_creat})<<20
37a00     00 00 C0 08 | 	long	(140 {_fatfs_cc_v_opendir})<<20
37a04     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_closedir})<<20
37a08     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_readdir})<<20
37a0c     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_stat})<<20
37a10     00 00 00 09 | 	long	(144 {_fatfs_cc_v_mkdir})<<20
37a14     00 00 10 09 | 	long	(145 {_fatfs_cc_v_rmdir})<<20
37a18     00 00 20 09 | 	long	(146 {_fatfs_cc_v_remove})<<20
37a1c     00 00 30 09 | 	long	(147 {_fatfs_cc_v_rename})<<20
37a20     00 00 40 09 | 	long	(148 {_fatfs_cc_v_init})<<20
37a24     00 00 50 09 | 	long	(149 {_fatfs_cc_v_deinit})<<20
37a28     FF FF FF FF 
37a2c     1F 00 00 00 
37a30     1C 00 00 00 
37a34     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
37a38     1E 00 00 00 
37a3c     1F 00 00 00 
37a40     1E 00 00 00 
37a44     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
37a48     1F 00 00 00 
37a4c     1E 00 00 00 
37a50     1F 00 00 00 
37a54     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
37a58     1F 00 00 00 
37a5c     00 00 00 00 
37a60     1F 00 00 00 
37a64     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
37a68     5A 00 00 00 
37a6c     78 00 00 00 
37a70     97 00 00 00 
37a74     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
37a78     D4 00 00 00 
37a7c     F3 00 00 00 
37a80     11 01 00 00 
37a84     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
37a88     4E 01 00 00 
37a8c     6D 01 00 00 
37a90     FF FF FF FF 
37a94     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
37a98     00 00 00 00 
      ...             
37ab0     00 00 00 00 
37ab4     00 00 00 00 | 	byte	$00[32]
37ab8     D6 7A 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
37abc     DA 7A 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
37ac0     00 00 00 00 
37ac4     00 00 00 00 
37ac8     00 00 00 00 
37acc     00 00 00 00 
37ad0     00 00       | 	byte	$00[18]
37ad2     3F 3F 3F 00 
37ad6     55 43 54 00 
37ada     55 43 54 00 
37ade     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
37ae2     00 00 00 00 
37ae6     00 00 00    | 	byte	$00[7]
37ae9     CA 9A 3B 00 
37aed     00 00 00 01 
37af1     01 01 01 01 
37af5     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
37af9     91 11 11 11 
37afd     11 01 01 01 
37b01     01 01 01 01 
37b05     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
37b09     01 01 01 01 
37b0d     01 01 01    | 	byte	$01[7]
37b10     90 20 20 20 
37b14     20 20 20 20 
37b18     20 20 20 20 
37b1c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
37b20     42 42 42 42 
37b24     42 42 42 42 
37b28     42 42       | 	byte	$42[10]
37b2a     20 20 20 20 
37b2e     20 20 20    | 	byte	$20[7]
37b31     44 44 44 44 
37b35     44 44       | 	byte	$44[6]
37b37     04 04 04 04 
37b3b     04 04 04 04 
37b3f     04 04 04 04 
37b43     04 04 04 04 
37b47     04 04 04 04 | 	byte	$04[20]
37b4b     20 20 20 20 
37b4f     20 20       | 	byte	$20[6]
37b51     48 48 48 48 
37b55     48 48       | 	byte	$48[6]
37b57     08 08 08 08 
37b5b     08 08 08 08 
37b5f     08 08 08 08 
37b63     08 08 08 08 
37b67     08 08 08 08 | 	byte	$08[20]
37b6b     20 20 20 20 
37b6f     01 00 00 00 
37b73     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
37b74                 | __methodtable__
37b74     AC 73 01 00 | 	long	@_do_no_command
37b78     40 F7 00 00 | 	long	@_do_plus
37b7c     2C FC 00 00 | 	long	@_do_minus
37b80     F4 00 01 00 | 	long	@_do_or
37b84     0C 02 01 00 | 	long	@_do_mul
37b88     98 07 01 00 | 	long	@_do_fdiv
37b8c     DC FF 00 00 | 	long	@_do_and
37b90     78 05 01 00 | 	long	@_do_div
37b94     60 09 01 00 | 	long	@_do_mod
37b98     80 0B 01 00 | 	long	@_do_shl
37b9c     98 0C 01 00 | 	long	@_do_shr
37ba0     B0 0D 01 00 | 	long	@_do_power
37ba4     C0 EA 00 00 | 	long	@_do_getvar
37ba8     24 A3 00 00 | 	long	@_do_push
37bac     C0 E4 00 00 | 	long	@_do_assign
37bb0     10 45 01 00 | 	long	@_do_cls
37bb4     B0 DE 00 00 | 	long	@_do_new
37bb8     B4 45 01 00 | 	long	@_do_plot
37bbc     84 46 01 00 | 	long	@_do_draw
37bc0     F8 4F 01 00 | 	long	@_do_print
37bc4     F0 48 01 00 | 	long	@_do_circle
37bc8     78 47 01 00 | 	long	@_do_fcircle
37bcc     68 4A 01 00 | 	long	@_do_box
37bd0     10 4E 01 00 | 	long	@_do_frame
37bd4     7C 45 01 00 | 	long	@_do_color
37bd8     88 82 00 00 | 	long	@_do_for
37bdc     FC 84 00 00 | 	long	@_do_next
37be0     14 DC 00 00 | 	long	@_do_list
37be4     7C B6 00 00 | 	long	@_do_run
37be8     7C E3 00 00 | 	long	@_do_error
37bec     78 E0 00 00 | 	long	@_do_fast_goto
37bf0     68 E1 00 00 | 	long	@_do_find_goto
37bf4     78 E3 00 00 | 	long	@_do_slow_goto
37bf8     78 2C 01 00 | 	long	@_do_converttoint
37bfc     68 A9 00 00 | 	long	@_test_csave
37c00     CC AC 00 00 | 	long	@_do_save
37c04     C8 B0 00 00 | 	long	@_do_load
37c08     A4 5E 01 00 | 	long	@_do_pinwrite
37c0c     40 69 01 00 | 	long	@_do_waitms
37c10     7C 6A 01 00 | 	long	@_do_waitvbl
37c14     1C 6E 01 00 | 	long	@_do_if
37c18     00 6F 01 00 | 	long	@_do_else
37c1c     C8 6F 01 00 | 	long	@_do_nothing
37c20     78 0F 01 00 | 	long	@_do_eq
37c24     F0 1D 01 00 | 	long	@_do_ge
37c28     C8 22 01 00 | 	long	@_do_le
37c2c     50 14 01 00 | 	long	@_do_gt
37c30     28 19 01 00 | 	long	@_do_lt
37c34     A0 27 01 00 | 	long	@_do_ne
37c38     54 2F 01 00 | 	long	@_do_rnd
37c3c     CC 6F 01 00 | 	long	@_do_brun
37c40     98 72 01 00 | 	long	@_do_beep
37c44     AC 6A 01 00 | 	long	@_do_dir
37c48     C0 54 01 00 | 	long	@_do_paper
37c4c     48 55 01 00 | 	long	@_do_ink
37c50     E4 55 01 00 | 	long	@_do_font
37c54     60 56 01 00 | 	long	@_do_mode
37c58     04 72 01 00 | 	long	@_do_mouse
37c5c     A8 44 01 00 | 	long	@_do_gettime
37c60     38 72 01 00 | 	long	@_do_cursor
37c64     6C 72 01 00 | 	long	@_do_click
37c68     34 42 01 00 | 	long	@_do_mousex
37c6c     78 42 01 00 | 	long	@_do_mousey
37c70     00 43 01 00 | 	long	@_do_mousek
37c74     BC 42 01 00 | 	long	@_do_mousew
37c78     28 32 01 00 | 	long	@_do_sin
37c7c     7C 39 01 00 | 	long	@_do_stick
37c80     00 3B 01 00 | 	long	@_do_strig
37c84     48 41 01 00 | 	long	@_do_sprite
37c88     D4 3D 01 00 | 	long	@_do_defsprite
37c8c     84 3C 01 00 | 	long	@_do_getpixel
37c90     88 6A 01 00 | 	long	@_do_waitclock
37c94     B8 73 01 00 | 	long	@_do_negative
37c98     44 43 01 00 | 	long	@_do_rdpin
37c9c     B0 43 01 00 | 	long	@_do_rqpin
37ca0     24 44 01 00 | 	long	@_do_pinread
37ca4     3C 61 01 00 | 	long	@_do_wrpin
37ca8     BC 61 01 00 | 	long	@_do_wxpin
37cac     3C 62 01 00 | 	long	@_do_wypin
37cb0     2C 5F 01 00 | 	long	@_do_pinfloat
37cb4     6C 5F 01 00 | 	long	@_do_pinlo
37cb8     AC 5F 01 00 | 	long	@_do_pinhi
37cbc     2C 60 01 00 | 	long	@_do_pinstart
37cc0     EC 5F 01 00 | 	long	@_do_pintoggle
37cc4     BC 62 01 00 | 	long	@_do_position
37cc8     34 33 01 00 | 	long	@_do_cos
37ccc     54 34 01 00 | 	long	@_do_tan
37cd0     78 37 01 00 | 	long	@_do_atn
37cd4     60 35 01 00 | 	long	@_do_asin
37cd8     6C 36 01 00 | 	long	@_do_acos
37cdc     8C 38 01 00 | 	long	@_do_sqr
37ce0     50 4C 01 00 | 	long	@_do_fill
37ce4     1C D2 00 00 | 	long	@_do_defsnd
37ce8     04 BA 00 00 | 	long	@_do_defenv
37cec     24 6F 01 00 | 	long	@_do_rad
37cf0     4C 6F 01 00 | 	long	@_do_deg
37cf4     74 6F 01 00 | 	long	@_do_int
37cf8     AC C6 00 00 | 	long	@_do_play
37cfc     04 5C 01 00 | 	long	@_do_setdelay
37d00     5C 5B 01 00 | 	long	@_do_setenv
37d04     AC 5C 01 00 | 	long	@_do_setlen
37d08     FC 5D 01 00 | 	long	@_do_setpan
37d0c     54 5D 01 00 | 	long	@_do_setvol
37d10     0C 5A 01 00 | 	long	@_do_setwave
37d14     B4 5A 01 00 | 	long	@_do_setsustain
37d18     84 D1 00 00 | 	long	@_do_release
37d1c     1C 31 01 00 | 	long	@_do_getenvsustain
37d20     44 63 01 00 | 	long	@_do_poke
37d24     1C 64 01 00 | 	long	@_do_dpoke
37d28     F4 64 01 00 | 	long	@_do_lpoke
37d2c     CC 65 01 00 | 	long	@_do_peek
37d30     7C 66 01 00 | 	long	@_do_dpeek
37d34     28 67 01 00 | 	long	@_do_lpeek
37d38     38 68 01 00 | 	long	@_do_adr
37d3c     D4 67 01 00 | 	long	@_do_fre
37d40     3C 68 01 00 | 	long	@_do_getnotevalue
37d44     78 F0 00 00 | 	long	@_do_getaddr
37d48     68 F4 00 00 | 	long	@_do_inkey
37d4c     68 74 01 00 | 	long	@_do_abs
37d50     B4 BE 01 00 | 	long	@_hg010b_spin2_putchar
37d54     24 C9 02 00 | 	long	@__struct___bas_wrap_sender_tx
37d58     68 C9 02 00 | 	long	@__struct___bas_wrap_sender_rx
37d5c     B0 C9 02 00 | 	long	@__struct___bas_wrap_sender_close
37d60     54 C8 02 00 | 	long	@__struct__s_vfs_file_t_putchar
37d64     C4 C8 02 00 | 	long	@__struct__s_vfs_file_t_getchar
37d68     0C C8 02 00 | 	long	@___strs_cl_pfunc
37d6c     6C 27 02 00 | 	long	@__system____root_opendir
37d70     08 28 02 00 | 	long	@__system____root_closedir
37d74     84 27 02 00 | 	long	@__system____root_readdir
37d78     10 28 02 00 | 	long	@__system____root_stat
37d7c     98 20 02 00 | 	long	@__system____default_putc
37d80     1C 20 02 00 | 	long	@__system____default_getc
37d84     40 21 02 00 | 	long	@__system____default_flush
37d88     10 B3 02 00 | 	long	@_fatfs_cc_v_close
37d8c     2C B7 02 00 | 	long	@_fatfs_cc_v_read
37d90     40 B8 02 00 | 	long	@_fatfs_cc_v_write
37d94     20 B9 02 00 | 	long	@_fatfs_cc_v_lseek
37d98     A8 B9 02 00 | 	long	@_fatfs_cc_v_ioctl
37d9c     FC B9 02 00 | 	long	@_fatfs_cc_v_open
37da0     74 B2 02 00 | 	long	@_fatfs_cc_v_creat
37da4     54 B3 02 00 | 	long	@_fatfs_cc_v_opendir
37da8     C8 B3 02 00 | 	long	@_fatfs_cc_v_closedir
37dac     08 B4 02 00 | 	long	@_fatfs_cc_v_readdir
37db0     3C B5 02 00 | 	long	@_fatfs_cc_v_stat
37db4     BC B9 02 00 | 	long	@_fatfs_cc_v_mkdir
37db8     DC B9 02 00 | 	long	@_fatfs_cc_v_rmdir
37dbc     CC B9 02 00 | 	long	@_fatfs_cc_v_remove
37dc0     EC B9 02 00 | 	long	@_fatfs_cc_v_rename
37dc4     0C BB 02 00 | 	long	@_fatfs_cc_v_init
37dc8     14 BB 02 00 | 	long	@_fatfs_cc_v_deinit
37dcc     44 D5 01 00 | 	long	@__system___tx
37dd0     84 D5 01 00 | 	long	@__system___rx
37dd4     78 33 02 00 | 	long	@__system___rxtxioctl_0629
37dd8     D0 33 02 00 | 	long	@__system____dummy_flush_0630
37ddc     DC BA 02 00 | 	long	@_fatfs_cc_v_flush
37de0                 | __heap_base
37de0     00 00 00 00 
      ...             
66be0     00 00 00 00 
66be4     00 00 00 00 | 	long	0[48002]
66be8                 | objmem
66be8     00 00 00 00 
      ...             
762fc     00 00 00 00 
76300     00 00 00 00 | 	long	0[15815]
76304                 | stackspace
76304     00 00 00 00 | 	long	0[1]
76308 100             | 	org	COG_BSS_START
76308 100             | _var01
76308 100             | 	res	1
76308 101             | _var02
76308 101             | 	res	1
76308 102             | _var03
76308 102             | 	res	1
76308 103             | _var04
76308 103             | 	res	1
76308 104             | _var05
76308 104             | 	res	1
76308 105             | _var06
76308 105             | 	res	1
76308 106             | _var07
76308 106             | 	res	1
76308 107             | _var08
76308 107             | 	res	1
76308 108             | _var09
76308 108             | 	res	1
76308 109             | arg01
76308 109             | 	res	1
76308 10a             | arg02
76308 10a             | 	res	1
76308 10b             | arg03
76308 10b             | 	res	1
76308 10c             | arg04
76308 10c             | 	res	1
76308 10d             | arg05
76308 10d             | 	res	1
76308 10e             | arg06
76308 10e             | 	res	1
76308 10f             | local01
76308 10f             | 	res	1
76308 110             | local02
76308 110             | 	res	1
76308 111             | local03
76308 111             | 	res	1
76308 112             | local04
76308 112             | 	res	1
76308 113             | local05
76308 113             | 	res	1
76308 114             | local06
76308 114             | 	res	1
76308 115             | local07
76308 115             | 	res	1
76308 116             | local08
76308 116             | 	res	1
76308 117             | local09
76308 117             | 	res	1
76308 118             | local10
76308 118             | 	res	1
76308 119             | local11
76308 119             | 	res	1
76308 11a             | local12
76308 11a             | 	res	1
76308 11b             | local13
76308 11b             | 	res	1
76308 11c             | local14
76308 11c             | 	res	1
76308 11d             | local15
76308 11d             | 	res	1
76308 11e             | local16
76308 11e             | 	res	1
76308 11f             | local17
76308 11f             | 	res	1
76308 120             | local18
76308 120             | 	res	1
76308 121             | local19
76308 121             | 	res	1
76308 122             | local20
76308 122             | 	res	1
76308 123             | local21
76308 123             | 	res	1
76308 124             | local22
76308 124             | 	res	1
76308 125             | local23
76308 125             | 	res	1
76308 126             | local24
76308 126             | 	res	1
76308 127             | local25
76308 127             | 	res	1
76308 128             | local26
76308 128             | 	res	1
76308 129             | local27
76308 129             | 	res	1
76308 12a             | local28
76308 12a             | 	res	1
76308 12b             | local29
76308 12b             | 	res	1
76308 12c             | local30
76308 12c             | 	res	1
76308 12d             | local31
76308 12d             | 	res	1
76308 12e             | local32
76308 12e             | 	res	1
76308 12f             | local33
76308 12f             | 	res	1
76308 130             | local34
76308 130             | 	res	1
76308 131             | local35
76308 131             | 	res	1
76308 132             | muldiva_
76308 132             | 	res	1
76308 133             | muldivb_
76308 133             | 	res	1
76308 134             | 	fit	480
76308 134             | 
