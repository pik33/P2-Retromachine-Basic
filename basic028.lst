00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic028.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 27
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C0 A4 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 9C 8F 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 10 8D 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 A4 7D 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 F0 7F 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 54 7B 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 54 E8 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 30 87 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 C8 19 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 78 41 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 30 3F 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 08 51 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc C0 74 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     1B E4 05 F1 | 	add	objptr, ##63003
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     64 E4 85 F1 | 	sub	objptr, ##63076
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     F0 DF B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     64 E4 05 F1 | 	add	objptr, ##63076
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     64 E4 85 F1 | 	sub	objptr, ##63076
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     C8 DF B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     64 E4 05 F1 | 	add	objptr, ##63076
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     64 E4 85 F1 | 	sub	objptr, ##63076
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     A0 DF B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     64 E4 05 F1 | 	add	objptr, ##63076
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     64 E4 85 F1 | 	sub	objptr, ##63076
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     DC E5 05 F1 | 	add	objptr, ##62940
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     E4 E5 85 F1 | 	sub	objptr, ##62948
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     14 D5 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     64 D5 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     54 D5 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     EC E5 05 F1 | 	add	objptr, ##62956
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7B 00 00 FF 
009ac     08 E4 85 F1 | 	sub	objptr, ##62984
009b0     B8 D4 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     EC E5 05 F1 | 	add	objptr, ##62956
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7B 00 00 FF 
00a08     08 E4 85 F1 | 	sub	objptr, ##62984
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     0C E4 05 F1 | 	add	objptr, ##44556
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     57 00 00 FF 
00a3c     0C E4 85 F1 | 	sub	objptr, ##44556
00a40     C8 FF B1 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     00 FF B1 FD | 	call	#__system__LTrim_S
00a4c     57 00 00 FF 
00a50     10 E4 05 F1 | 	add	objptr, ##44560
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     24 00 00 FF 
00a68     6C E4 05 F1 | 	add	objptr, ##18540
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     11 00 00 FF 
00a74     14 E4 85 F1 | 	sub	objptr, ##8724
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     6A 00 00 FF 
00a80     6C E4 85 F1 | 	sub	objptr, ##54380
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     54 00 00 FF 
00abc     FC E5 05 F1 | 	add	objptr, ##43516
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     6D 01 00 FF 
00ad4     7A 17 06 F6 | 	mov	arg03, ##@LR__4737
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     57 00 00 FF 
00b14     0C E4 85 F1 | 	sub	objptr, ##44556
00b18     F0 FE B1 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     28 FE B1 FD | 	call	#__system__LTrim_S
00b24     57 00 00 FF 
00b28     0C E4 05 F1 | 	add	objptr, ##44556
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     6D 01 00 FF 
00b34     7B 25 06 F6 | 	mov	local04, ##@LR__4738
00b38     24 00 00 FF 
00b3c     B4 E4 05 F1 | 	add	objptr, ##18612
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     24 00 00 FF 
00b48     B4 E4 85 F1 | 	sub	objptr, ##18612
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     57 00 00 FF 
00b54     0C E4 85 F1 | 	sub	objptr, ##44556
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     7B 00 00 FF 
00b74     C4 E4 05 F1 | 	add	objptr, ##63172
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     7B 00 00 FF 
00b80     C4 E4 85 F1 | 	sub	objptr, ##63172
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     7B 00 00 FF 
00b8c     C8 E4 05 F1 | 	add	objptr, ##63176
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     24 00 00 FF 
00b9c     BC E4 85 F1 | 	sub	objptr, ##18620
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     57 00 00 FF 
00ba8     0C E4 85 F1 | 	sub	objptr, ##44556
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     57 00 00 FF 
00bd8     0C E4 05 F1 | 	add	objptr, ##44556
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     57 00 00 FF 
00be4     0C E4 85 F1 | 	sub	objptr, ##44556
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     A0 FA B1 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     6D 01 00 FF 
00bfc     7C 15 06 F6 | 	mov	arg02, ##@LR__4739
00c00     5C D9 B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     7B 00 00 FF 
00c10     C8 E4 05 F1 | 	add	objptr, ##63176
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     7B 00 00 FF 
00c1c     C8 E4 85 F1 | 	sub	objptr, ##63176
00c20     7B 00 00 AF 
00c24     C8 E4 05 A1 |  if_e	add	objptr, ##63176
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     7B 00 00 AF 
00c30     C8 E4 85 A1 |  if_e	sub	objptr, ##63176
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     57 00 00 FF 
00c3c     0C E4 05 F1 | 	add	objptr, ##44556
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     57 00 00 FF 
00c48     0C E4 85 F1 | 	sub	objptr, ##44556
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     3C FA B1 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     6D 01 00 FF 
00c60     7E 15 06 F6 | 	mov	arg02, ##@LR__4740
00c64     F8 D8 B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     7B 00 00 AF 
00c70     C8 E4 05 A1 |  if_e	add	objptr, ##63176
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     7B 00 00 AF 
00c7c     C8 E4 85 A1 |  if_e	sub	objptr, ##63176
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     7B 00 00 AF 
00c88     C8 E4 05 A1 |  if_e	add	objptr, ##63176
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     7B 00 00 AF 
00c94     C8 E4 85 A1 |  if_e	sub	objptr, ##63176
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     54 00 00 FF 
00ca4     FC E5 05 F1 | 	add	objptr, ##43516
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     26 00 00 FF 
00cb4     CC E4 05 F1 | 	add	objptr, ##19660
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     7B 00 00 FF 
00cc0     C8 E4 85 F1 | 	sub	objptr, ##63176
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     57 00 00 FF 
00cdc     0C E4 05 F1 | 	add	objptr, ##44556
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     57 00 00 FF 
00ce8     0C E4 85 F1 | 	sub	objptr, ##44556
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     9C F9 B1 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     6D 01 00 FF 
00d00     80 2F 06 F6 | 	mov	local09, ##@LR__4741
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     54 D8 B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     54 00 00 FF 
00d20     FC E5 05 F1 | 	add	objptr, ##43516
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     54 00 00 FF 
00d40     FC E5 85 F1 | 	sub	objptr, ##43516
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     7B 00 00 FF 
00d4c     C4 E4 05 F1 | 	add	objptr, ##63172
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     7B 00 00 FF 
00d58     C4 E4 85 F1 | 	sub	objptr, ##63172
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     7B 00 00 FF 
00d70     C4 E4 05 F1 | 	add	objptr, ##63172
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     7B 00 00 FF 
00d7c     C4 E4 85 F1 | 	sub	objptr, ##63172
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     57 00 00 FF 
00d8c     0C E4 05 F1 | 	add	objptr, ##44556
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     57 00 00 FF 
00d98     0C E4 85 F1 | 	sub	objptr, ##44556
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     3C F8 B1 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     3C FC B1 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     74 FB B1 FD | 	call	#__system__LTrim_S
00dd8     7B 00 00 FF 
00ddc     CC E4 05 F1 | 	add	objptr, ##63180
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     24 00 00 FF 
00de8     C0 E4 85 F1 | 	sub	objptr, ##18624
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     57 00 00 FF 
00df4     0C E4 85 F1 | 	sub	objptr, ##44556
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     78 F7 B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     00 FC B1 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     38 FB B1 FD | 	call	#__system__LTrim_S
00e14     57 00 00 FF 
00e18     0C E4 05 F1 | 	add	objptr, ##44556
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     57 00 00 FF 
00e24     0C E4 85 F1 | 	sub	objptr, ##44556
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     6D 01 00 FF 
00e30     82 25 06 F6 | 	mov	local04, ##@LR__4742
00e34     7B 00 00 FF 
00e38     CC E4 05 F1 | 	add	objptr, ##63180
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     7B 00 00 FF 
00e44     CC E4 85 F1 | 	sub	objptr, ##63180
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     57 00 00 FF 
00e4c     14 E4 05 F1 | 	add	objptr, ##44564
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     57 00 00 FF 
00e58     14 E4 85 F1 | 	sub	objptr, ##44564
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     7B 00 00 FF 
00e6c     CC E4 05 F1 | 	add	objptr, ##63180
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     7B 00 00 FF 
00e78     CC E4 85 F1 | 	sub	objptr, ##63180
00e7c     6D 01 00 FF 
00e80     83 15 06 F6 | 	mov	arg02, ##@LR__4743
00e84     D8 D6 B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     57 00 00 5F 
00e90     14 E4 05 51 |  if_ne	add	objptr, ##44564
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     57 00 00 5F 
00e9c     14 E4 85 51 |  if_ne	sub	objptr, ##44564
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     57 00 00 FF 
00ea8     14 E4 05 F1 | 	add	objptr, ##44564
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     57 00 00 FF 
00eb4     14 E4 85 F1 | 	sub	objptr, ##44564
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     7B 00 00 FF 
00ec8     CC E4 05 F1 | 	add	objptr, ##63180
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     7B 00 00 FF 
00ed4     CC E4 85 F1 | 	sub	objptr, ##63180
00ed8     6D 01 00 FF 
00edc     84 15 06 F6 | 	mov	arg02, ##@LR__4744
00ee0     7C D6 B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     57 00 00 AF 
00eec     14 E4 05 A1 |  if_e	add	objptr, ##44564
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     57 00 00 AF 
00ef8     14 E4 85 A1 |  if_e	sub	objptr, ##44564
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     57 00 00 FF 
00f04     14 E4 05 F1 | 	add	objptr, ##44564
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     57 00 00 FF 
00f10     14 E4 85 F1 | 	sub	objptr, ##44564
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     7B 00 00 FF 
00f20     CC E4 05 F1 | 	add	objptr, ##63180
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     7B 00 00 FF 
00f2c     CC E4 85 F1 | 	sub	objptr, ##63180
00f30     6D 01 00 FF 
00f34     85 15 06 F6 | 	mov	arg02, ##@LR__4745
00f38     24 D6 B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     57 00 00 5F 
00f44     14 E4 05 51 |  if_ne	add	objptr, ##44564
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     57 00 00 5F 
00f50     14 E4 85 51 |  if_ne	sub	objptr, ##44564
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     57 00 00 FF 
00f5c     14 E4 05 F1 | 	add	objptr, ##44564
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     57 00 00 FF 
00f68     14 E4 85 F1 | 	sub	objptr, ##44564
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     7B 00 00 FF 
00f78     CC E4 05 F1 | 	add	objptr, ##63180
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     7B 00 00 FF 
00f84     CC E4 85 F1 | 	sub	objptr, ##63180
00f88     6D 01 00 FF 
00f8c     86 15 06 F6 | 	mov	arg02, ##@LR__4746
00f90     CC D5 B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     57 00 00 AF 
00f9c     14 E4 05 A1 |  if_e	add	objptr, ##44564
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     57 00 00 AF 
00fa8     14 E4 85 A1 |  if_e	sub	objptr, ##44564
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     57 00 00 FF 
00fc8     0C E4 05 F1 | 	add	objptr, ##44556
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     57 00 00 FF 
00fd4     0C E4 85 F1 | 	sub	objptr, ##44556
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     B0 F6 B1 FD | 	call	#__system__Mid_S
00fe4     7B 00 00 FF 
00fe8     D0 E4 05 F1 | 	add	objptr, ##63184
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     7B 00 00 FF 
00ff8     D0 E4 85 F1 | 	sub	objptr, ##63184
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     7B 00 00 FF 
01028     C4 E4 05 F1 | 	add	objptr, ##63172
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     7B 00 00 FF 
01034     C4 E4 85 F1 | 	sub	objptr, ##63172
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     7B 00 00 FF 
01084     D8 E4 05 F1 | 	add	objptr, ##63192
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     7B 00 00 FF 
010b8     D8 E4 85 F1 | 	sub	objptr, ##63192
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     57 00 00 FF 
010cc     0C E4 05 F1 | 	add	objptr, ##44556
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     24 00 00 FF 
010d8     CC E4 05 F1 | 	add	objptr, ##18636
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     7B 00 00 FF 
010e4     D8 E4 85 F1 | 	sub	objptr, ##63192
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     A4 F5 B1 FD | 	call	#__system__Mid_S
010f0     7B 00 00 FF 
010f4     E0 E4 05 F1 | 	add	objptr, ##63200
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     7B 00 00 FF 
01100     E0 E4 85 F1 | 	sub	objptr, ##63200
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     6D 01 00 FF 
0110c     87 15 06 F6 | 	mov	arg02, ##@LR__4747
01110     4C D4 B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     54 00 00 FF 
01128     FC E5 05 F1 | 	add	objptr, ##43516
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     26 00 00 FF 
01134     E4 E4 05 F1 | 	add	objptr, ##19684
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     7B 00 00 FF 
01140     E0 E4 85 F1 | 	sub	objptr, ##63200
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     57 00 00 FF 
01150     0C E4 05 F1 | 	add	objptr, ##44556
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     24 00 00 FF 
0115c     CC E4 05 F1 | 	add	objptr, ##18636
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     7B 00 00 FF 
0117c     D8 E4 85 F1 | 	sub	objptr, ##63192
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     04 F5 B1 FD | 	call	#__system__Mid_S
01190     7B 00 00 FF 
01194     E0 E4 05 F1 | 	add	objptr, ##63200
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     7B 00 00 FF 
011a0     E0 E4 85 F1 | 	sub	objptr, ##63200
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     6D 01 00 FF 
011ac     88 15 06 F6 | 	mov	arg02, ##@LR__4748
011b0     AC D3 B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     54 00 00 FF 
011c8     FC E5 05 F1 | 	add	objptr, ##43516
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     26 00 00 FF 
011d4     E4 E4 05 F1 | 	add	objptr, ##19684
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     7B 00 00 FF 
011e0     E0 E4 85 F1 | 	sub	objptr, ##63200
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     54 00 00 FF 
01204     FC E5 05 F1 | 	add	objptr, ##43516
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     6D 01 00 FF 
01214     89 15 06 F6 | 	mov	arg02, ##@LR__4749
01218     54 00 00 FF 
0121c     FC E5 85 F1 | 	sub	objptr, ##43516
01220     3C D3 B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     54 00 00 FF 
01244     FC E5 05 F1 | 	add	objptr, ##43516
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     26 00 00 FF 
01254     E4 E4 05 F1 | 	add	objptr, ##19684
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     26 00 00 FF 
01268     E4 E4 85 F1 | 	sub	objptr, ##19684
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     54 00 00 FF 
01284     FC E5 85 F1 | 	sub	objptr, ##43516
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     00 D3 B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     54 00 00 FF 
012c4     FC E5 05 F1 | 	add	objptr, ##43516
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     54 00 00 FF 
0131c     FC E5 85 F1 | 	sub	objptr, ##43516
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     7B 00 00 FF 
0132c     E0 E4 05 F1 | 	add	objptr, ##63200
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     7B 00 00 FF 
01338     E0 E4 85 F1 | 	sub	objptr, ##63200
0133c     6D 01 00 FF 
01340     8B 15 06 F6 | 	mov	arg02, ##@LR__4750
01344     18 D2 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     7B 00 00 FF 
01358     E0 E4 05 F1 | 	add	objptr, ##63200
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     7B 00 00 FF 
01364     E0 E4 85 F1 | 	sub	objptr, ##63200
01368     6D 01 00 FF 
0136c     8D 15 06 F6 | 	mov	arg02, ##@LR__4751
01370     EC D1 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     54 00 00 FF 
01398     FC E5 05 F1 | 	add	objptr, ##43516
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     54 00 00 FF 
013ac     FC E5 85 F1 | 	sub	objptr, ##43516
013b0     50 F2 B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     6D 01 00 FF 
013bc     8F 15 06 F6 | 	mov	arg02, ##@LR__4752
013c0     9C D1 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     54 00 00 FF 
013dc     FC E5 05 F1 | 	add	objptr, ##43516
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     54 00 00 FF 
013f4     FC E5 85 F1 | 	sub	objptr, ##43516
013f8     80 F1 B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     6D 01 00 FF 
01404     91 15 06 F6 | 	mov	arg02, ##@LR__4753
01408     54 D1 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     54 00 00 FF 
01420     FC E5 05 F1 | 	add	objptr, ##43516
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     54 00 00 FF 
0146c     FC E5 85 F1 | 	sub	objptr, ##43516
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     68 F1 B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     E8 D0 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     54 00 00 FF 
014dc     FC E5 05 F1 | 	add	objptr, ##43516
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     54 00 00 FF 
01534     FC E5 85 F1 | 	sub	objptr, ##43516
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     54 00 00 FF 
01560     FC E5 05 F1 | 	add	objptr, ##43516
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     26 00 00 FF 
01570     EC E4 05 F1 | 	add	objptr, ##19692
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     26 00 00 FF 
01588     EC E4 85 F1 | 	sub	objptr, ##19692
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     26 00 00 FF 
01598     F0 E4 05 F1 | 	add	objptr, ##19696
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     7B 00 00 FF 
015ac     E8 E4 85 F1 | 	sub	objptr, ##63208
015b0     6D 01 00 FF 
015b4     93 15 06 F6 | 	mov	arg02, ##@LR__4754
015b8     A4 CF B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     7B 00 00 FF 
015c8     E8 E4 05 F1 | 	add	objptr, ##63208
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     7B 00 00 FF 
015d4     E8 E4 85 F1 | 	sub	objptr, ##63208
015d8     6D 01 00 FF 
015dc     95 15 06 F6 | 	mov	arg02, ##@LR__4755
015e0     7C CF B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     7B 00 00 FF 
015f0     E8 E4 05 F1 | 	add	objptr, ##63208
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     7B 00 00 FF 
015fc     E8 E4 85 F1 | 	sub	objptr, ##63208
01600     6D 01 00 FF 
01604     97 15 06 F6 | 	mov	arg02, ##@LR__4756
01608     54 CF B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     7B 00 00 FF 
01618     E8 E4 05 F1 | 	add	objptr, ##63208
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     7B 00 00 FF 
01624     E8 E4 85 F1 | 	sub	objptr, ##63208
01628     6D 01 00 FF 
0162c     99 33 06 F6 | 	mov	local11, ##@LR__4757
01630     19 15 02 F6 | 	mov	arg02, local11
01634     28 CF B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     7B 00 00 FF 
01644     E8 E4 05 F1 | 	add	objptr, ##63208
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     7B 00 00 FF 
01650     E8 E4 85 F1 | 	sub	objptr, ##63208
01654     6D 01 00 FF 
01658     9B 31 06 F6 | 	mov	local10, ##@LR__4758
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     F8 CE B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     7B 00 00 FF 
01674     E8 E4 05 F1 | 	add	objptr, ##63208
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     7B 00 00 FF 
01680     E8 E4 85 F1 | 	sub	objptr, ##63208
01684     6D 01 00 FF 
01688     9D 31 06 F6 | 	mov	local10, ##@LR__4759
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     CC CE B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     7B 00 00 FF 
016a0     E8 E4 05 F1 | 	add	objptr, ##63208
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     7B 00 00 FF 
016ac     E8 E4 85 F1 | 	sub	objptr, ##63208
016b0     6D 01 00 FF 
016b4     9F 37 06 F6 | 	mov	local13, ##@LR__4760
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     A0 CE B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     7B 00 00 FF 
016cc     EC E4 05 F1 | 	add	objptr, ##63212
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     7B 00 00 FF 
016d8     EC E4 85 F1 | 	sub	objptr, ##63212
016dc     6D 01 00 FF 
016e0     A1 4B 06 F6 | 	mov	local23, ##@LR__4761
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     70 CE B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     7B 00 00 FF 
016fc     E8 E4 05 F1 | 	add	objptr, ##63208
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     7B 00 00 FF 
01708     E8 E4 85 F1 | 	sub	objptr, ##63208
0170c     6D 01 00 FF 
01710     A3 4B 06 F6 | 	mov	local23, ##@LR__4762
01714     25 15 02 F6 | 	mov	arg02, local23
01718     44 CE B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     7B 00 00 FF 
01728     EC E4 05 F1 | 	add	objptr, ##63212
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     7B 00 00 FF 
01734     EC E4 85 F1 | 	sub	objptr, ##63212
01738     6D 01 00 FF 
0173c     A5 45 06 F6 | 	mov	local20, ##@LR__4763
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     14 CE B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     7B 00 00 FF 
01758     E8 E4 05 F1 | 	add	objptr, ##63208
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     7B 00 00 FF 
01764     E8 E4 85 F1 | 	sub	objptr, ##63208
01768     6D 01 00 FF 
0176c     A7 45 06 F6 | 	mov	local20, ##@LR__4764
01770     22 15 02 F6 | 	mov	arg02, local20
01774     E8 CD B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     7B 00 00 FF 
01784     EC E4 05 F1 | 	add	objptr, ##63212
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     7B 00 00 FF 
01790     EC E4 85 F1 | 	sub	objptr, ##63212
01794     6D 01 00 FF 
01798     A9 4D 06 F6 | 	mov	local24, ##@LR__4765
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     B8 CD B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     7B 00 00 FF 
017b4     E8 E4 05 F1 | 	add	objptr, ##63208
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     7B 00 00 FF 
017c0     E8 E4 85 F1 | 	sub	objptr, ##63208
017c4     6D 01 00 FF 
017c8     AB 4F 06 F6 | 	mov	local25, ##@LR__4766
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     88 CD B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     7B 00 00 FF 
017e4     EC E4 05 F1 | 	add	objptr, ##63212
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     7B 00 00 FF 
017f0     EC E4 85 F1 | 	sub	objptr, ##63212
017f4     6D 01 00 FF 
017f8     AD 51 06 F6 | 	mov	local26, ##@LR__4767
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     58 CD B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     54 00 00 FF 
0181c     FC E5 05 F1 | 	add	objptr, ##43516
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     26 00 00 FF 
01828     EC E4 05 F1 | 	add	objptr, ##19692
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     7B 00 00 FF 
0183c     EC E4 85 F1 | 	sub	objptr, ##63212
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     48 CD B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     54 00 00 FF 
0187c     FC E5 05 F1 | 	add	objptr, ##43516
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     54 00 00 FF 
018e0     FC E5 85 F1 | 	sub	objptr, ##43516
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     54 00 00 FF 
0191c     FC E5 05 F1 | 	add	objptr, ##43516
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     54 00 00 FF 
01944     FC E5 85 F1 | 	sub	objptr, ##43516
01948     C0 F0 B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     F8 EF B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     54 00 00 FF 
01978     FC E5 05 F1 | 	add	objptr, ##43516
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     54 00 00 FF 
01988     FC E5 85 F1 | 	sub	objptr, ##43516
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     54 00 00 FF 
019ec     FC E5 05 F1 | 	add	objptr, ##43516
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     54 00 00 FF 
01a54     FC E5 85 F1 | 	sub	objptr, ##43516
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     54 00 00 FF 
01a98     FC E5 05 F1 | 	add	objptr, ##43516
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     54 00 00 FF 
01aac     FC E5 85 F1 | 	sub	objptr, ##43516
01ab0     C8 EA B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     6D 01 00 FF 
01abc     AF 15 06 F6 | 	mov	arg02, ##@LR__4768
01ac0     9C CA B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     54 00 00 FF 
01ad8     FC E5 05 F1 | 	add	objptr, ##43516
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     54 00 00 FF 
01aec     FC E5 85 F1 | 	sub	objptr, ##43516
01af0     10 EB B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     6D 01 00 FF 
01afc     B1 15 06 F6 | 	mov	arg02, ##@LR__4769
01b00     5C CA B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     54 00 00 FF 
01b18     FC E5 05 F1 | 	add	objptr, ##43516
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     54 00 00 FF 
01b38     FC E5 85 F1 | 	sub	objptr, ##43516
01b3c     4C ED B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     54 00 00 FF 
01b70     FC E5 05 F1 | 	add	objptr, ##43516
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     54 00 00 FF 
01b8c     FC E5 85 F1 | 	sub	objptr, ##43516
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     54 00 00 FF 
01b98     FC E5 05 F1 | 	add	objptr, ##43516
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     54 00 00 FF 
01ba4     FC E5 85 F1 | 	sub	objptr, ##43516
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     54 00 00 FF 
01bc8     FC E5 05 F1 | 	add	objptr, ##43516
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     54 00 00 FF 
01bd4     FC E5 85 F1 | 	sub	objptr, ##43516
01bd8     40 37 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     7B 00 00 5F 
01be4     F0 E4 05 51 |  if_ne	add	objptr, ##63216
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     7B 00 00 FF 
01bf0     F0 E4 E5 F3 | 	sumnz	objptr, ##63216
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     7B 00 00 AF 
01bfc     F0 E4 85 A1 |  if_e	sub	objptr, ##63216
01c00     7B 00 00 FF 
01c04     F0 E4 05 F1 | 	add	objptr, ##63216
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     26 00 00 FF 
01c14     F4 E4 85 F1 | 	sub	objptr, ##19700
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     26 00 00 FF 
01c24     F8 E4 05 F1 | 	add	objptr, ##19704
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     26 00 00 FF 
01c3c     F4 E4 85 F1 | 	sub	objptr, ##19700
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     6D 01 00 FF 
01c50     B3 17 06 F6 | 	mov	arg03, ##@LR__4770
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     54 00 00 FF 
01c5c     FC E5 85 F1 | 	sub	objptr, ##43516
01c60     60 EE B1 FD | 	call	#__system__Instr
01c64     7B 00 00 FF 
01c68     F8 E4 05 F1 | 	add	objptr, ##63224
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     7B 00 00 FF 
01c78     F8 E4 85 F1 | 	sub	objptr, ##63224
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     7B 00 00 FF 
01c88     F0 E4 05 F1 | 	add	objptr, ##63216
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     26 00 00 FF 
01c98     F4 E4 85 F1 | 	sub	objptr, ##19700
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     54 00 00 FF 
01cac     FC E5 85 F1 | 	sub	objptr, ##43516
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     7B 00 00 FF 
01cd0     F8 E4 05 F1 | 	add	objptr, ##63224
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     7B 00 00 FF 
01cdc     F8 E4 85 F1 | 	sub	objptr, ##63224
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     7B 00 00 FF 
01cf4     F0 E4 05 F1 | 	add	objptr, ##63216
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     26 00 00 FF 
01d04     F4 E4 85 F1 | 	sub	objptr, ##19700
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     26 00 00 FF 
01d6c     F4 E4 05 F1 | 	add	objptr, ##19700
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     26 00 00 FF 
01d84     F4 E4 85 F1 | 	sub	objptr, ##19700
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     26 00 00 FF 
01d9c     F4 E4 05 F1 | 	add	objptr, ##19700
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     26 00 00 FF 
01db0     F4 E4 85 F1 | 	sub	objptr, ##19700
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     54 00 00 FF 
01dc4     FC E5 85 F1 | 	sub	objptr, ##43516
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     7B 00 00 FF 
01de8     F8 E4 05 F1 | 	add	objptr, ##63224
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     7B 00 00 FF 
01df4     F8 E4 85 F1 | 	sub	objptr, ##63224
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     00 E8 B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     7B 00 00 FF 
01e0c     F0 E4 05 F1 | 	add	objptr, ##63216
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     26 00 00 FF 
01e20     F4 E4 85 F1 | 	sub	objptr, ##19700
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     26 00 00 FF 
01e40     FC E4 05 F1 | 	add	objptr, ##19708
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     7B 00 00 FF 
01e4c     F8 E4 85 F1 | 	sub	objptr, ##63224
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     20 E7 B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     7B 00 00 FF 
01e64     F0 E4 05 F1 | 	add	objptr, ##63216
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     26 00 00 FF 
01e74     F4 E4 85 F1 | 	sub	objptr, ##19700
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     54 00 00 FF 
01e88     FC E5 85 F1 | 	sub	objptr, ##43516
01e8c     EC E6 B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     6D 01 00 FF 
01e98     B5 15 06 F6 | 	mov	arg02, ##@LR__4771
01e9c     C0 C6 B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     7B 00 00 FF 
01eac     F0 E4 05 F1 | 	add	objptr, ##63216
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     26 00 00 FF 
01ebc     F4 E4 85 F1 | 	sub	objptr, ##19700
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     54 00 00 FF 
01ed0     FC E5 85 F1 | 	sub	objptr, ##43516
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     7B 00 00 FF 
01f00     F0 E4 05 F1 | 	add	objptr, ##63216
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     26 00 00 FF 
01f10     F4 E4 85 F1 | 	sub	objptr, ##19700
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     26 00 00 FF 
01f78     F4 E4 05 F1 | 	add	objptr, ##19700
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     26 00 00 FF 
01f90     F4 E4 85 F1 | 	sub	objptr, ##19700
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     26 00 00 FF 
01fa8     F4 E4 05 F1 | 	add	objptr, ##19700
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     26 00 00 FF 
01fc4     F4 E4 85 F1 | 	sub	objptr, ##19700
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     54 00 00 FF 
01fd8     FC E5 85 F1 | 	sub	objptr, ##43516
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     F4 E5 B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     7B 00 00 FF 
02018     F0 E4 05 F1 | 	add	objptr, ##63216
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     26 00 00 FF 
02028     F4 E4 85 F1 | 	sub	objptr, ##19700
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     6D 01 00 FF 
02034     B7 33 06 F6 | 	mov	local11, ##@LR__4772
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     54 00 00 FF 
02040     FC E5 85 F1 | 	sub	objptr, ##43516
02044                 | LR__0107
02044     7B 00 00 FF 
02048     F0 E4 05 F1 | 	add	objptr, ##63216
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     26 00 00 FF 
02058     F4 E4 85 F1 | 	sub	objptr, ##19700
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     26 00 00 FF 
02068     F8 E4 05 F1 | 	add	objptr, ##19704
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     7B 00 00 FF 
02074     F4 E4 85 F1 | 	sub	objptr, ##63220
02078     6D 01 00 FF 
0207c     B9 15 06 F6 | 	mov	arg02, ##@LR__4773
02080     19 13 02 F6 | 	mov	arg01, local11
02084     D8 C4 B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     7B 00 00 FF 
02094     F4 E4 05 F1 | 	add	objptr, ##63220
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     7B 00 00 FF 
020a0     F4 E4 85 F1 | 	sub	objptr, ##63220
020a4     6D 01 00 FF 
020a8     BF 15 06 F6 | 	mov	arg02, ##@LR__4774
020ac     B0 C4 B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     7B 00 00 FF 
020bc     F4 E4 05 F1 | 	add	objptr, ##63220
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     7B 00 00 FF 
020c8     F4 E4 85 F1 | 	sub	objptr, ##63220
020cc     6D 01 00 FF 
020d0     C6 15 06 F6 | 	mov	arg02, ##@LR__4775
020d4     88 C4 B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     7B 00 00 FF 
020e4     F0 E4 05 F1 | 	add	objptr, ##63216
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     26 00 00 FF 
020f8     F4 E4 85 F1 | 	sub	objptr, ##19700
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     6D 01 00 FF 
02108     CC 15 06 F6 | 	mov	arg02, ##@LR__4776
0210c     54 00 00 FF 
02110     FC E5 85 F1 | 	sub	objptr, ##43516
02114     48 C4 B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     7B 00 00 FF 
02124     F0 E4 05 F1 | 	add	objptr, ##63216
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     26 00 00 FF 
02138     F4 E4 85 F1 | 	sub	objptr, ##19700
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     6D 01 00 FF 
02144     CF 33 06 F6 | 	mov	local11, ##@LR__4777
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     26 00 00 FF 
02150     F4 E4 05 F1 | 	add	objptr, ##19700
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     26 00 00 FF 
02164     F4 E4 85 F1 | 	sub	objptr, ##19700
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     54 00 00 FF 
0217c     FC E5 85 F1 | 	sub	objptr, ##43516
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     7B 00 00 FF 
02184     F0 E4 05 F1 | 	add	objptr, ##63216
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     26 00 00 FF 
02198     F4 E4 85 F1 | 	sub	objptr, ##19700
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     6D 01 00 FF 
021ac     D1 15 06 F6 | 	mov	arg02, ##@LR__4778
021b0     54 00 00 FF 
021b4     FC E5 85 F1 | 	sub	objptr, ##43516
021b8     A4 C3 B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     7B 00 00 FF 
021c8     F0 E4 05 F1 | 	add	objptr, ##63216
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     26 00 00 FF 
021dc     F4 E4 85 F1 | 	sub	objptr, ##19700
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     6D 01 00 FF 
021e8     D5 33 06 F6 | 	mov	local11, ##@LR__4779
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     26 00 00 FF 
021f4     F4 E4 05 F1 | 	add	objptr, ##19700
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     26 00 00 FF 
02208     F4 E4 85 F1 | 	sub	objptr, ##19700
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     54 00 00 FF 
02224     FC E5 85 F1 | 	sub	objptr, ##43516
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     7B 00 00 FF 
0222c     F4 E4 05 F1 | 	add	objptr, ##63220
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     7B 00 00 FF 
02238     F4 E4 85 F1 | 	sub	objptr, ##63220
0223c     6D 01 00 FF 
02240     D7 15 06 F6 | 	mov	arg02, ##@LR__4780
02244     18 C3 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     7B 00 00 FF 
02254     F4 E4 05 F1 | 	add	objptr, ##63220
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     7B 00 00 FF 
02260     F4 E4 85 F1 | 	sub	objptr, ##63220
02264     6D 01 00 FF 
02268     DC 15 06 F6 | 	mov	arg02, ##@LR__4781
0226c     F0 C2 B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     7B 00 00 FF 
0227c     F0 E4 05 F1 | 	add	objptr, ##63216
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     26 00 00 FF 
02290     F4 E4 85 F1 | 	sub	objptr, ##19700
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     6D 01 00 FF 
022a0     DF 15 06 F6 | 	mov	arg02, ##@LR__4782
022a4     54 00 00 FF 
022a8     FC E5 85 F1 | 	sub	objptr, ##43516
022ac     B0 C2 B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     7B 00 00 FF 
022bc     F0 E4 05 F1 | 	add	objptr, ##63216
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     26 00 00 FF 
022d0     F4 E4 85 F1 | 	sub	objptr, ##19700
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     6D 01 00 FF 
022dc     E5 33 06 F6 | 	mov	local11, ##@LR__4783
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     54 00 00 FF 
022e8     FC E5 85 F1 | 	sub	objptr, ##43516
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     7B 00 00 FF 
022f0     F0 E4 05 F1 | 	add	objptr, ##63216
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     26 00 00 FF 
02304     F4 E4 85 F1 | 	sub	objptr, ##19700
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     6D 01 00 FF 
02314     E7 15 06 F6 | 	mov	arg02, ##@LR__4784
02318     54 00 00 FF 
0231c     FC E5 85 F1 | 	sub	objptr, ##43516
02320     3C C2 B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     7B 00 00 FF 
02330     F0 E4 05 F1 | 	add	objptr, ##63216
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     26 00 00 FF 
02344     F4 E4 85 F1 | 	sub	objptr, ##19700
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     6D 01 00 FF 
02350     F0 33 06 F6 | 	mov	local11, ##@LR__4785
02354     13 33 62 FC | 	wrlong	local11, local05
02358     54 00 00 FF 
0235c     FC E5 85 F1 | 	sub	objptr, ##43516
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     7B 00 00 FF 
02364     F0 E4 05 F1 | 	add	objptr, ##63216
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     26 00 00 FF 
02378     F4 E4 85 F1 | 	sub	objptr, ##19700
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     6D 01 00 FF 
02388     F2 15 06 F6 | 	mov	arg02, ##@LR__4786
0238c     54 00 00 FF 
02390     FC E5 85 F1 | 	sub	objptr, ##43516
02394     C8 C1 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     7B 00 00 FF 
023a4     F0 E4 05 F1 | 	add	objptr, ##63216
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     26 00 00 FF 
023b8     F4 E4 85 F1 | 	sub	objptr, ##19700
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     6D 01 00 FF 
023c4     FB 33 06 F6 | 	mov	local11, ##@LR__4787
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     54 00 00 FF 
023d0     FC E5 85 F1 | 	sub	objptr, ##43516
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     7B 00 00 FF 
023d8     F0 E4 05 F1 | 	add	objptr, ##63216
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     26 00 00 FF 
023ec     F4 E4 85 F1 | 	sub	objptr, ##19700
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     6D 01 00 FF 
023fc     FD 15 06 F6 | 	mov	arg02, ##@LR__4788
02400     54 00 00 FF 
02404     FC E5 85 F1 | 	sub	objptr, ##43516
02408     54 C1 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     7B 00 00 FF 
02418     F0 E4 05 F1 | 	add	objptr, ##63216
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     26 00 00 FF 
0242c     F4 E4 85 F1 | 	sub	objptr, ##19700
02430     F2 26 02 F1 | 	add	local05, objptr
02434     6E 01 00 FF 
02438     06 32 06 F6 | 	mov	local11, ##@LR__4789
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     54 00 00 FF 
02444     FC E5 85 F1 | 	sub	objptr, ##43516
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     7B 00 00 FF 
0244c     F0 E4 05 F1 | 	add	objptr, ##63216
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     26 00 00 FF 
02460     F4 E4 85 F1 | 	sub	objptr, ##19700
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     6E 01 00 FF 
02474     08 14 06 F6 | 	mov	arg02, ##@LR__4790
02478     54 00 00 FF 
0247c     FC E5 85 F1 | 	sub	objptr, ##43516
02480     DC C0 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     7B 00 00 FF 
02490     F0 E4 05 F1 | 	add	objptr, ##63216
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     26 00 00 FF 
024a4     F4 E4 85 F1 | 	sub	objptr, ##19700
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     6E 01 00 FF 
024b0     0B 32 06 F6 | 	mov	local11, ##@LR__4791
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     54 00 00 FF 
024bc     FC E5 85 F1 | 	sub	objptr, ##43516
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     54 00 00 FF 
024dc     FC E5 05 F1 | 	add	objptr, ##43516
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     54 00 00 FF 
02500     FC E5 85 F1 | 	sub	objptr, ##43516
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     54 00 00 FF 
02520     FC E5 05 F1 | 	add	objptr, ##43516
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     54 00 00 FF 
02538     FC E5 85 F1 | 	sub	objptr, ##43516
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     54 00 00 FF 
0254c     FC E5 05 F1 | 	add	objptr, ##43516
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     54 00 00 FF 
02570     FC E5 85 F1 | 	sub	objptr, ##43516
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     54 00 00 FF 
02590     FC E5 05 F1 | 	add	objptr, ##43516
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     54 00 00 FF 
025a8     FC E5 85 F1 | 	sub	objptr, ##43516
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     FC E5 05 F1 | 	add	objptr, ##43516
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     54 00 00 FF 
025e0     FC E5 85 F1 | 	sub	objptr, ##43516
025e4                 | ' 
025e4                 | ' select case s
025e4     6E 01 00 FF 
025e8     EC 14 06 F6 | 	mov	arg02, ##@LR__4862
025ec     70 BF B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     54 00 00 FF 
02614     FC E5 05 F1 | 	add	objptr, ##43516
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     54 00 00 FF 
0262c     FC E5 85 F1 | 	sub	objptr, ##43516
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     54 00 00 FF 
02640     FC E5 05 F1 | 	add	objptr, ##43516
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     54 00 00 FF 
02664     FC E5 85 F1 | 	sub	objptr, ##43516
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     54 00 00 FF 
02684     FC E5 05 F1 | 	add	objptr, ##43516
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     54 00 00 FF 
0269c     FC E5 85 F1 | 	sub	objptr, ##43516
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     54 00 00 FF 
026b0     FC E5 05 F1 | 	add	objptr, ##43516
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     54 00 00 FF 
026d4     FC E5 85 F1 | 	sub	objptr, ##43516
026d8     5C 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     54 00 00 FF 
026f4     FC E5 05 F1 | 	add	objptr, ##43516
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     54 00 00 FF 
0270c     FC E5 85 F1 | 	sub	objptr, ##43516
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     54 00 00 FF 
02720     FC E5 05 F1 | 	add	objptr, ##43516
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     54 00 00 FF 
02744     FC E5 85 F1 | 	sub	objptr, ##43516
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     54 00 00 FF 
02760     FC E5 05 F1 | 	add	objptr, ##43516
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     54 00 00 FF 
02778     FC E5 85 F1 | 	sub	objptr, ##43516
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     54 00 00 FF 
0278c     FC E5 05 F1 | 	add	objptr, ##43516
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     54 00 00 FF 
027a4     FC E5 85 F1 | 	sub	objptr, ##43516
027a8     78 75 B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     54 00 00 FF 
027bc     FC E5 05 F1 | 	add	objptr, ##43516
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     54 00 00 FF 
027cc     FC E5 85 F1 | 	sub	objptr, ##43516
027d0     A0 DF B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     54 00 00 FF 
027e8     FC E5 05 F1 | 	add	objptr, ##43516
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     54 00 00 FF 
02800     FC E5 85 F1 | 	sub	objptr, ##43516
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     54 00 00 FF 
02814     FC E5 05 F1 | 	add	objptr, ##43516
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     54 00 00 FF 
02824     FC E5 85 F1 | 	sub	objptr, ##43516
02828     C0 26 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     7B 00 00 FF 
02834     FC E4 05 F1 | 	add	objptr, ##63228
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     26 00 00 FF 
02848     00 E5 85 F1 | 	sub	objptr, ##19712
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     54 00 00 FF 
02858     FC E5 85 F1 | 	sub	objptr, ##43516
0285c     64 29 B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     7B 00 00 FF 
02868     00 E5 05 F1 | 	add	objptr, ##63232
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     26 00 00 FF 
0287c     04 E5 85 F1 | 	sub	objptr, ##19716
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     54 00 00 FF 
02890     FC E5 85 F1 | 	sub	objptr, ##43516
02894     84 2A B0 FD | 	call	#_isdec
02898     7B 00 00 FF 
0289c     04 E5 05 F1 | 	add	objptr, ##63236
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     7B 00 00 FF 
028b0     FC E4 85 F1 | 	sub	objptr, ##63228
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     7B 00 00 FF 
028bc     00 E5 05 F1 | 	add	objptr, ##63232
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     7B 00 00 FF 
028c8     00 E5 85 F1 | 	sub	objptr, ##63232
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     7B 00 00 FF 
028d4     04 E5 05 F1 | 	add	objptr, ##63236
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     7B 00 00 FF 
028e0     04 E5 85 F1 | 	sub	objptr, ##63236
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     54 00 00 FF 
028f8     FC E5 05 F1 | 	add	objptr, ##43516
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     54 00 00 FF 
02910     FC E5 85 F1 | 	sub	objptr, ##43516
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     7B 00 00 FF 
0291c     FC E4 05 F1 | 	add	objptr, ##63228
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     7B 00 00 FF 
02928     FC E4 85 F1 | 	sub	objptr, ##63228
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     7B 00 00 FF 
02934     00 E5 05 F1 | 	add	objptr, ##63232
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     7B 00 00 FF 
02940     00 E5 85 F1 | 	sub	objptr, ##63232
02944     7B 00 00 5F 
02948     04 E5 05 51 |  if_ne	add	objptr, ##63236
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     7B 00 00 5F 
02954     04 E5 85 51 |  if_ne	sub	objptr, ##63236
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     54 00 00 FF 
02974     FC E5 05 F1 | 	add	objptr, ##43516
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     54 00 00 FF 
0298c     FC E5 85 F1 | 	sub	objptr, ##43516
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     7B 00 00 FF 
02998     FC E4 05 F1 | 	add	objptr, ##63228
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     7B 00 00 FF 
029a4     FC E4 85 F1 | 	sub	objptr, ##63228
029a8     7B 00 00 5F 
029ac     00 E5 05 51 |  if_ne	add	objptr, ##63232
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     7B 00 00 5F 
029b8     00 E5 85 51 |  if_ne	sub	objptr, ##63232
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     7B 00 00 5F 
029c8     04 E5 05 51 |  if_ne	add	objptr, ##63236
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     7B 00 00 5F 
029d4     04 E5 85 51 |  if_ne	sub	objptr, ##63236
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     54 00 00 FF 
029f4     FC E5 05 F1 | 	add	objptr, ##43516
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     54 00 00 FF 
02a0c     FC E5 85 F1 | 	sub	objptr, ##43516
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     54 00 00 FF 
02a20     FC E5 05 F1 | 	add	objptr, ##43516
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     54 00 00 FF 
02a30     FC E5 85 F1 | 	sub	objptr, ##43516
02a34     A4 29 B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     54 00 00 FF 
02a4c     FC E5 05 F1 | 	add	objptr, ##43516
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     54 00 00 FF 
02aa4     FC E5 85 F1 | 	sub	objptr, ##43516
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     BC DB B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     54 00 00 FF 
02af0     FC E5 05 F1 | 	add	objptr, ##43516
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     54 00 00 FF 
02b00     FC E5 85 F1 | 	sub	objptr, ##43516
02b04     70 21 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     54 00 00 FF 
02b20     FC E5 05 F1 | 	add	objptr, ##43516
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     54 00 00 FF 
02b38     FC E5 85 F1 | 	sub	objptr, ##43516
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     54 00 00 FF 
02b50     FC E5 05 F1 | 	add	objptr, ##43516
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     6E 01 00 FF 
02b74     0D 28 06 F6 | 	mov	local06, ##@LR__4792
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     16 00 00 FF 
02b8c     A4 E4 05 F1 | 	add	objptr, ##11428
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     7B 00 00 FF 
02b98     F4 E4 85 F1 | 	sub	objptr, ##63220
02b9c     6E 01 00 FF 
02ba0     0E 2E 06 F6 | 	mov	local09, ##@LR__4793
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     B4 B9 B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     7B 00 00 FF 
02bb8     F4 E4 05 F1 | 	add	objptr, ##63220
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     7B 00 00 FF 
02bc4     F4 E4 85 F1 | 	sub	objptr, ##63220
02bc8     6E 01 00 FF 
02bcc     13 26 06 F6 | 	mov	local05, ##@LR__4794
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     84 B9 B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     7B 00 00 FF 
02be8     F4 E4 05 F1 | 	add	objptr, ##63220
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     7B 00 00 FF 
02bf4     F4 E4 85 F1 | 	sub	objptr, ##63220
02bf8     6E 01 00 FF 
02bfc     18 28 06 F6 | 	mov	local06, ##@LR__4795
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     54 B9 B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     7B 00 00 FF 
02c18     F4 E4 05 F1 | 	add	objptr, ##63220
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     7B 00 00 FF 
02c24     F4 E4 85 F1 | 	sub	objptr, ##63220
02c28     6E 01 00 FF 
02c2c     1D 32 06 F6 | 	mov	local11, ##@LR__4796
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     24 B9 B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     7B 00 00 FF 
02c48     F4 E4 05 F1 | 	add	objptr, ##63220
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     7B 00 00 FF 
02c54     F4 E4 85 F1 | 	sub	objptr, ##63220
02c58     6E 01 00 FF 
02c5c     21 30 06 F6 | 	mov	local10, ##@LR__4797
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     F4 B8 B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     7B 00 00 FF 
02c78     F4 E4 05 F1 | 	add	objptr, ##63220
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     7B 00 00 FF 
02c84     F4 E4 85 F1 | 	sub	objptr, ##63220
02c88     6E 01 00 FF 
02c8c     25 30 06 F6 | 	mov	local10, ##@LR__4798
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     C8 B8 B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     7B 00 00 FF 
02ca4     F4 E4 05 F1 | 	add	objptr, ##63220
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     7B 00 00 FF 
02cb0     F4 E4 85 F1 | 	sub	objptr, ##63220
02cb4     6E 01 00 FF 
02cb8     28 34 06 F6 | 	mov	local12, ##@LR__4799
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     98 B8 B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     7B 00 00 FF 
02cd4     F0 E4 05 F1 | 	add	objptr, ##63216
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     26 00 00 FF 
02cf4     F4 E4 85 F1 | 	sub	objptr, ##19700
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     54 00 00 FF 
02d1c     FC E5 85 F1 | 	sub	objptr, ##43516
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     7B 00 00 FF 
02d28     F0 E4 05 F1 | 	add	objptr, ##63216
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     26 00 00 FF 
02d40     F4 E4 85 F1 | 	sub	objptr, ##19700
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     54 00 00 FF 
02d68     FC E5 85 F1 | 	sub	objptr, ##43516
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     54 00 00 FF 
02d70     FC E5 05 F1 | 	add	objptr, ##43516
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     54 00 00 FF 
02d7c     FC E5 85 F1 | 	sub	objptr, ##43516
02d80     98 25 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     54 00 00 FF 
02d90     FC E5 05 F1 | 	add	objptr, ##43516
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     54 00 00 FF 
02d9c     FC E5 85 F1 | 	sub	objptr, ##43516
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     84 E9 B1 FD | 	call	#__system____builtin_atoi
02da8     7B 00 00 FF 
02dac     80 E4 05 F1 | 	add	objptr, ##63104
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     7B 00 00 FF 
02db8     80 E4 85 F1 | 	sub	objptr, ##63104
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     7B 00 00 FF 
02dc0     80 E4 05 F1 | 	add	objptr, ##63104
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     7B 00 00 FF 
02dcc     80 E4 85 F1 | 	sub	objptr, ##63104
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     57 00 00 AF 
02de0     14 E4 05 A1 |  if_e	add	objptr, ##44564
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     57 00 00 AF 
02dec     14 E4 85 A1 |  if_e	sub	objptr, ##44564
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     7B 00 00 FF 
02dfc     80 E4 05 F1 | 	add	objptr, ##63104
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     7B 00 00 FF 
02e08     80 E4 85 F1 | 	sub	objptr, ##63104
02e0c     30 26 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     7B 00 00 FF 
02e18     80 E4 05 F1 | 	add	objptr, ##63104
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     7B 00 00 FF 
02e24     80 E4 85 F1 | 	sub	objptr, ##63104
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     57 00 00 FF 
02e34     14 E4 05 F1 | 	add	objptr, ##44564
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     57 00 00 FF 
02e40     14 E4 85 F1 | 	sub	objptr, ##44564
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     57 00 00 FF 
02e50     14 E4 05 F1 | 	add	objptr, ##44564
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     57 00 00 FF 
02e5c     14 E4 85 F1 | 	sub	objptr, ##44564
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     55 00 00 FF 
02e70     10 E4 05 F1 | 	add	objptr, ##43536
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     55 00 00 FF 
02e7c     10 E4 85 F1 | 	sub	objptr, ##43536
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     7B 00 00 FF 
02e90     80 E4 05 F1 | 	add	objptr, ##63104
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     24 00 00 FF 
02e9c     6C E4 85 F1 | 	sub	objptr, ##18540
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     57 00 00 FF 
02ea8     14 E4 85 F1 | 	sub	objptr, ##44564
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     CC 39 B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     18 72 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     7B 00 00 FF 
02ecc     CC E4 05 F1 | 	add	objptr, ##63180
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     7B 00 00 FF 
02ed8     CC E4 85 F1 | 	sub	objptr, ##63180
02edc     6E 01 00 FF 
02ee0     2C 14 06 F6 | 	mov	arg02, ##@LR__4800
02ee4     78 B6 B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     7B 00 00 FF 
02ef4     CC E4 05 F1 | 	add	objptr, ##63180
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     24 00 00 FF 
02f00     C0 E4 85 F1 | 	sub	objptr, ##18624
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     57 00 00 FF 
02f14     14 E4 85 F1 | 	sub	objptr, ##44564
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     7B 00 00 FF 
02f20     80 E4 05 F1 | 	add	objptr, ##63104
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     7B 00 00 FF 
02f2c     80 E4 85 F1 | 	sub	objptr, ##63104
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     57 00 00 FF 
02f3c     14 E4 05 F1 | 	add	objptr, ##44564
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     57 00 00 FF 
02f48     14 E4 85 F1 | 	sub	objptr, ##44564
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     57 00 00 FF 
02f58     14 E4 05 F1 | 	add	objptr, ##44564
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     57 00 00 FF 
02f64     14 E4 85 F1 | 	sub	objptr, ##44564
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     55 00 00 FF 
02f78     08 E4 05 F1 | 	add	objptr, ##43528
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     55 00 00 FF 
02f84     08 E4 85 F1 | 	sub	objptr, ##43528
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     7B 00 00 FF 
02f98     80 E4 05 F1 | 	add	objptr, ##63104
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     24 00 00 FF 
02fa4     6C E4 85 F1 | 	sub	objptr, ##18540
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     57 00 00 FF 
02fb0     14 E4 85 F1 | 	sub	objptr, ##44564
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     C4 38 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     10 71 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     7B 00 00 FF 
02fd4     CC E4 05 F1 | 	add	objptr, ##63180
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     7B 00 00 FF 
02fe0     CC E4 85 F1 | 	sub	objptr, ##63180
02fe4     6E 01 00 FF 
02fe8     2D 14 06 F6 | 	mov	arg02, ##@LR__4801
02fec     70 B5 B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     7B 00 00 FF 
02ffc     CC E4 05 F1 | 	add	objptr, ##63180
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     24 00 00 FF 
03008     C0 E4 85 F1 | 	sub	objptr, ##18624
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     57 00 00 FF 
0301c     14 E4 85 F1 | 	sub	objptr, ##44564
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     7B 00 00 FF 
03028     80 E4 05 F1 | 	add	objptr, ##63104
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     7B 00 00 FF 
03034     80 E4 85 F1 | 	sub	objptr, ##63104
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     57 00 00 FF 
03044     14 E4 05 F1 | 	add	objptr, ##44564
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     57 00 00 FF 
03050     14 E4 85 F1 | 	sub	objptr, ##44564
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     57 00 00 FF 
0305c     14 E4 05 F1 | 	add	objptr, ##44564
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     57 00 00 FF 
03068     14 E4 85 F1 | 	sub	objptr, ##44564
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     55 00 00 FF 
0307c     10 E4 05 F1 | 	add	objptr, ##43536
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     55 00 00 FF 
03088     10 E4 85 F1 | 	sub	objptr, ##43536
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     7B 00 00 FF 
0309c     80 E4 05 F1 | 	add	objptr, ##63104
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     24 00 00 FF 
030a8     6C E4 85 F1 | 	sub	objptr, ##18540
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     57 00 00 FF 
030b4     14 E4 85 F1 | 	sub	objptr, ##44564
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     90 38 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     7B 00 00 FF 
030c4     CC E4 05 F1 | 	add	objptr, ##63180
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     7B 00 00 FF 
030d0     CC E4 85 F1 | 	sub	objptr, ##63180
030d4     6E 01 00 FF 
030d8     2E 14 06 F6 | 	mov	arg02, ##@LR__4802
030dc     80 B4 B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     7B 00 00 FF 
030ec     CC E4 05 F1 | 	add	objptr, ##63180
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     24 00 00 FF 
030f8     C0 E4 85 F1 | 	sub	objptr, ##18624
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     57 00 00 FF 
0310c     14 E4 85 F1 | 	sub	objptr, ##44564
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     7B 00 00 FF 
03118     80 E4 05 F1 | 	add	objptr, ##63104
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     7B 00 00 FF 
03124     80 E4 85 F1 | 	sub	objptr, ##63104
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     57 00 00 FF 
03134     14 E4 05 F1 | 	add	objptr, ##44564
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     57 00 00 FF 
03140     14 E4 85 F1 | 	sub	objptr, ##44564
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     57 00 00 5F 
0314c     14 E4 05 51 |  if_ne	add	objptr, ##44564
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     57 00 00 5F 
03158     14 E4 85 51 |  if_ne	sub	objptr, ##44564
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     55 00 00 AF 
03164     08 E4 05 A1 |  if_e	add	objptr, ##43528
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     55 00 00 AF 
03170     08 E4 85 A1 |  if_e	sub	objptr, ##43528
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     7B 00 00 FF 
03184     80 E4 05 F1 | 	add	objptr, ##63104
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     24 00 00 FF 
03190     6C E4 85 F1 | 	sub	objptr, ##18540
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     57 00 00 FF 
0319c     14 E4 85 F1 | 	sub	objptr, ##44564
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     A8 37 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     7B 00 00 FF 
031ac     CC E4 05 F1 | 	add	objptr, ##63180
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     7B 00 00 FF 
031b8     CC E4 85 F1 | 	sub	objptr, ##63180
031bc     6E 01 00 FF 
031c0     2F 14 06 F6 | 	mov	arg02, ##@LR__4803
031c4     98 B3 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     7B 00 00 FF 
031d4     CC E4 05 F1 | 	add	objptr, ##63180
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     24 00 00 FF 
031e0     C0 E4 85 F1 | 	sub	objptr, ##18624
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     57 00 00 FF 
031f4     14 E4 85 F1 | 	sub	objptr, ##44564
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     55 00 00 FF 
03200     00 E4 05 F1 | 	add	objptr, ##43520
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     55 00 00 FF 
0320c     00 E4 85 F1 | 	sub	objptr, ##43520
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     55 00 00 AF 
0321c     08 E4 05 A1 |  if_e	add	objptr, ##43528
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     55 00 00 AF 
03228     08 E4 85 A1 |  if_e	sub	objptr, ##43528
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     0C 37 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     55 00 00 FF 
0324c     00 E4 05 F1 | 	add	objptr, ##43520
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     55 00 00 FF 
03258     00 E4 85 F1 | 	sub	objptr, ##43520
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     55 00 00 AF 
03268     08 E4 05 A1 |  if_e	add	objptr, ##43528
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     55 00 00 AF 
03274     08 E4 85 A1 |  if_e	sub	objptr, ##43528
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     44 0C B2 FD | 	call	#__system___getiolock_0475
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     A8 B2 B1 FD | 	call	#__system___lockmem
03290     6E 01 00 FF 
03294     30 14 06 F6 | 	mov	arg02, ##@LR__4804
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     98 BF B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     30 BF B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     10 0C B2 FD | 	call	#__system___getiolock_0475
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     AC 35 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     B8 70 B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     E8 6D B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     7B 00 00 FF 
032f8     CC E4 05 F1 | 	add	objptr, ##63180
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     7B 00 00 FF 
03304     CC E4 85 F1 | 	sub	objptr, ##63180
03308     6E 01 00 FF 
0330c     5F 14 06 F6 | 	mov	arg02, ##@LR__4805
03310     4C B2 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     7B 00 00 FF 
03320     CC E4 05 F1 | 	add	objptr, ##63180
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     24 00 00 FF 
0332c     C0 E4 85 F1 | 	sub	objptr, ##18624
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     57 00 00 FF 
03338     0C E4 85 F1 | 	sub	objptr, ##44556
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     6E 01 00 FF 
03344     60 12 06 F6 | 	mov	arg01, ##@LR__4806
03348                 | ' 
03348                 | ' write(text)
03348     20 9F B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     E8 A1 B1 FD | 	call	#_hg010b_spin2_crlf
03350     6E 01 00 FF 
03354     61 12 06 F6 | 	mov	arg01, ##@LR__4807
03358                 | ' 
03358                 | ' write(text)
03358     10 9F B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     D8 A1 B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     6E 01 00 FF 
0337c     67 14 06 F6 | 	mov	arg02, ##@LR__4808
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     D8 B1 B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     6E 01 00 FF 
03394     69 14 06 F6 | 	mov	arg02, ##@LR__4809
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     C0 B1 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     6E 01 00 FF 
033ac     6B 14 06 F6 | 	mov	arg02, ##@LR__4810
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     A8 B1 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     6E 01 00 FF 
033c4     6E 14 06 F6 | 	mov	arg02, ##@LR__4811
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     90 B1 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     6E 01 00 FF 
033dc     72 14 06 F6 | 	mov	arg02, ##@LR__4812
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     78 B1 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     6E 01 00 FF 
033f4     74 14 06 F6 | 	mov	arg02, ##@LR__4813
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     60 B1 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     6E 01 00 FF 
0340c     76 14 06 F6 | 	mov	arg02, ##@LR__4814
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     48 B1 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     6E 01 00 FF 
03424     7A 14 06 F6 | 	mov	arg02, ##@LR__4815
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     30 B1 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     6E 01 00 FF 
0343c     7E 14 06 F6 | 	mov	arg02, ##@LR__4816
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     18 B1 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     6E 01 00 FF 
03454     82 14 06 F6 | 	mov	arg02, ##@LR__4817
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     00 B1 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     6E 01 00 FF 
0346c     86 14 06 F6 | 	mov	arg02, ##@LR__4818
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     E8 B0 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     6E 01 00 FF 
03484     8A 14 06 F6 | 	mov	arg02, ##@LR__4819
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     D0 B0 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     6E 01 00 FF 
0349c     8C 14 06 F6 | 	mov	arg02, ##@LR__4820
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     B8 B0 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     6E 01 00 FF 
034b4     90 14 06 F6 | 	mov	arg02, ##@LR__4821
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     A0 B0 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     6E 01 00 FF 
034cc     92 14 06 F6 | 	mov	arg02, ##@LR__4822
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     88 B0 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     6E 01 00 FF 
034e4     94 14 06 F6 | 	mov	arg02, ##@LR__4823
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     70 B0 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     6E 01 00 FF 
034fc     97 14 06 F6 | 	mov	arg02, ##@LR__4824
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     58 B0 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     6E 01 00 FF 
03514     9A 14 06 F6 | 	mov	arg02, ##@LR__4825
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     40 B0 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     6E 01 00 FF 
0352c     9C 14 06 F6 | 	mov	arg02, ##@LR__4826
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     28 B0 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     6E 01 00 FF 
03544     9E 14 06 F6 | 	mov	arg02, ##@LR__4827
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     10 B0 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     6E 01 00 FF 
0355c     A1 14 06 F6 | 	mov	arg02, ##@LR__4828
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     F8 AF B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     6E 01 00 FF 
03574     A4 14 06 F6 | 	mov	arg02, ##@LR__4829
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     E0 AF B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     1C CF B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     6E 01 00 FF 
03668     A7 14 06 F6 | 	mov	arg02, ##@LR__4830
0366c     F0 AE B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     08 D0 B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     6E 01 00 FF 
03694     A9 14 06 F6 | 	mov	arg02, ##@LR__4831
03698     C4 AE B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     E0 CF B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     C8 CF B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     94 CF B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     6E 01 00 FF 
03708     AB 14 06 F6 | 	mov	arg02, ##@LR__4832
0370c     50 AE B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     E0 CE B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     70 E1 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     44 DE B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     B8 CE B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     48 E1 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     50 D9 B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     0C DE B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     7C CE B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     6E 01 00 FF 
03790     AD 14 06 F6 | 	mov	arg02, ##@LR__4833
03794     C8 AD B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     6E 01 00 FF 
037a8     AF 14 06 F6 | 	mov	arg02, ##@LR__4834
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     AC AD B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     6E 01 00 FF 
037c0     B1 14 06 F6 | 	mov	arg02, ##@LR__4835
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     94 AD B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     6E 01 00 FF 
037d8     B4 14 06 F6 | 	mov	arg02, ##@LR__4836
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     7C AD B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     6E 01 00 FF 
037f0     B6 14 06 F6 | 	mov	arg02, ##@LR__4837
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     64 AD B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     6E 01 00 FF 
03808     B9 14 06 F6 | 	mov	arg02, ##@LR__4838
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     4C AD B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     6E 01 00 FF 
03820     BB 14 06 F6 | 	mov	arg02, ##@LR__4839
03824     13 13 02 F6 | 	mov	arg01, local05
03828     34 AD B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     6E 01 00 FF 
03838     BD 14 06 F6 | 	mov	arg02, ##@LR__4840
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     1C AD B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     6E 01 00 FF 
03850     C0 14 06 F6 | 	mov	arg02, ##@LR__4841
03854     13 13 02 F6 | 	mov	arg01, local05
03858     04 AD B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     6E 01 00 FF 
03868     C2 14 06 F6 | 	mov	arg02, ##@LR__4842
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     EC AC B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     6E 01 00 FF 
03880     C5 14 06 F6 | 	mov	arg02, ##@LR__4843
03884     13 13 02 F6 | 	mov	arg01, local05
03888     D4 AC B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     6E 01 00 FF 
03898     C7 14 06 F6 | 	mov	arg02, ##@LR__4844
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     BC AC B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     6E 01 00 FF 
038b0     CA 14 06 F6 | 	mov	arg02, ##@LR__4845
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     A4 AC B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     6E 01 00 FF 
038c8     CC 14 06 F6 | 	mov	arg02, ##@LR__4846
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     8C AC B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     6E 01 00 FF 
039c8     CE 14 06 F6 | 	mov	arg02, ##@LR__4847
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     8C AB B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     6E 01 00 FF 
039e0     D0 14 06 F6 | 	mov	arg02, ##@LR__4848
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     74 AB B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     6E 01 00 FF 
039f8     D2 14 06 F6 | 	mov	arg02, ##@LR__4849
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     5C AB B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     6E 01 00 FF 
03a10     D4 14 06 F6 | 	mov	arg02, ##@LR__4850
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     44 AB B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     6E 01 00 FF 
03a28     D6 14 06 F6 | 	mov	arg02, ##@LR__4851
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     2C AB B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     6E 01 00 FF 
03a40     D8 14 06 F6 | 	mov	arg02, ##@LR__4852
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     14 AB B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     6E 01 00 FF 
03a58     DA 14 06 F6 | 	mov	arg02, ##@LR__4853
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     FC AA B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     6E 01 00 FF 
03a70     DC 14 06 F6 | 	mov	arg02, ##@LR__4854
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     E4 AA B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     6E 01 00 FF 
03a88     DE 14 06 F6 | 	mov	arg02, ##@LR__4855
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     CC AA B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     6E 01 00 FF 
03aa0     E0 14 06 F6 | 	mov	arg02, ##@LR__4856
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     B4 AA B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     6E 01 00 FF 
03ab8     E2 14 06 F6 | 	mov	arg02, ##@LR__4857
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     9C AA B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     6E 01 00 FF 
03ad0     E4 14 06 F6 | 	mov	arg02, ##@LR__4858
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     84 AA B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     6E 01 00 FF 
03ae8     E6 14 06 F6 | 	mov	arg02, ##@LR__4859
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     6C AA B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     6E 01 00 FF 
03b00     E8 14 06 F6 | 	mov	arg02, ##@LR__4860
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     54 AA B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     6E 01 00 FF 
03b18     EA 14 06 F6 | 	mov	arg02, ##@LR__4861
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     3C AA B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     6E 01 00 FF 
03bc8     EE 14 06 F6 | 	mov	arg02, ##@LR__4863
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     8C A9 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     74 08 90 AD |  if_e	jmp	#LR__0240
03bdc     6E 01 00 FF 
03be0     F3 14 06 F6 | 	mov	arg02, ##@LR__4864
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     74 A9 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     64 08 90 AD |  if_e	jmp	#LR__0241
03bf4     6E 01 00 FF 
03bf8     F6 14 06 F6 | 	mov	arg02, ##@LR__4865
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     5C A9 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     54 08 90 AD |  if_e	jmp	#LR__0242
03c0c     6E 01 00 FF 
03c10     FA 14 06 F6 | 	mov	arg02, ##@LR__4866
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     44 A9 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     44 08 90 AD |  if_e	jmp	#LR__0243
03c24     6E 01 00 FF 
03c28     FF 14 06 F6 | 	mov	arg02, ##@LR__4867
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     2C A9 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     34 08 90 AD |  if_e	jmp	#LR__0244
03c3c     6E 01 00 FF 
03c40     03 15 06 F6 | 	mov	arg02, ##@LR__4868
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     14 A9 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     24 08 90 AD |  if_e	jmp	#LR__0245
03c54     6E 01 00 FF 
03c58     0A 15 06 F6 | 	mov	arg02, ##@LR__4869
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     FC A8 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     14 08 90 AD |  if_e	jmp	#LR__0246
03c6c     6E 01 00 FF 
03c70     0E 15 06 F6 | 	mov	arg02, ##@LR__4870
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     E4 A8 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     04 08 90 AD |  if_e	jmp	#LR__0247
03c84     6E 01 00 FF 
03c88     14 15 06 F6 | 	mov	arg02, ##@LR__4871
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     CC A8 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     F4 07 90 AD |  if_e	jmp	#LR__0248
03c9c     6E 01 00 FF 
03ca0     18 15 06 F6 | 	mov	arg02, ##@LR__4872
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     B4 A8 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     E4 07 90 AD |  if_e	jmp	#LR__0249
03cb4     6E 01 00 FF 
03cb8     1E 15 06 F6 | 	mov	arg02, ##@LR__4873
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     9C A8 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     D4 07 90 AD |  if_e	jmp	#LR__0250
03ccc     6E 01 00 FF 
03cd0     21 15 06 F6 | 	mov	arg02, ##@LR__4874
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     84 A8 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     C4 07 90 AD |  if_e	jmp	#LR__0251
03ce4     6E 01 00 FF 
03ce8     27 15 06 F6 | 	mov	arg02, ##@LR__4875
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     6C A8 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     B4 07 90 AD |  if_e	jmp	#LR__0252
03cfc     6E 01 00 FF 
03d00     2B 15 06 F6 | 	mov	arg02, ##@LR__4876
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     54 A8 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     A4 07 90 AD |  if_e	jmp	#LR__0253
03d14     6E 01 00 FF 
03d18     32 15 06 F6 | 	mov	arg02, ##@LR__4877
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     3C A8 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     94 07 90 AD |  if_e	jmp	#LR__0254
03d2c     6E 01 00 FF 
03d30     39 15 06 F6 | 	mov	arg02, ##@LR__4878
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     24 A8 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     84 07 90 AD |  if_e	jmp	#LR__0255
03d44     6E 01 00 FF 
03d48     40 15 06 F6 | 	mov	arg02, ##@LR__4879
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     0C A8 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     74 07 90 AD |  if_e	jmp	#LR__0256
03d5c     6E 01 00 FF 
03d60     4A 15 06 F6 | 	mov	arg02, ##@LR__4880
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     F4 A7 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     64 07 90 AD |  if_e	jmp	#LR__0257
03d74     6E 01 00 FF 
03d78     4E 15 06 F6 | 	mov	arg02, ##@LR__4881
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     DC A7 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     54 07 90 AD |  if_e	jmp	#LR__0258
03d8c     6E 01 00 FF 
03d90     52 15 06 F6 | 	mov	arg02, ##@LR__4882
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     C4 A7 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     44 07 90 AD |  if_e	jmp	#LR__0259
03da4     6E 01 00 FF 
03da8     56 15 06 F6 | 	mov	arg02, ##@LR__4883
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     AC A7 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     34 07 90 AD |  if_e	jmp	#LR__0260
03dbc     6E 01 00 FF 
03dc0     5A 15 06 F6 | 	mov	arg02, ##@LR__4884
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     94 A7 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     24 07 90 AD |  if_e	jmp	#LR__0261
03dd4     6E 01 00 FF 
03dd8     60 15 06 F6 | 	mov	arg02, ##@LR__4885
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     7C A7 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     14 07 90 AD |  if_e	jmp	#LR__0262
03dec     6E 01 00 FF 
03df0     65 15 06 F6 | 	mov	arg02, ##@LR__4886
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     64 A7 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     04 07 90 AD |  if_e	jmp	#LR__0263
03e04     6E 01 00 FF 
03e08     69 15 06 F6 | 	mov	arg02, ##@LR__4887
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     4C A7 B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     F4 06 90 AD |  if_e	jmp	#LR__0264
03e1c     6E 01 00 FF 
03e20     6E 15 06 F6 | 	mov	arg02, ##@LR__4888
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     34 A7 B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     E4 06 90 AD |  if_e	jmp	#LR__0265
03e34     6E 01 00 FF 
03e38     76 15 06 F6 | 	mov	arg02, ##@LR__4889
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     1C A7 B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     D4 06 90 AD |  if_e	jmp	#LR__0266
03e4c     6E 01 00 FF 
03e50     7A 15 06 F6 | 	mov	arg02, ##@LR__4890
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     04 A7 B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     C4 06 90 AD |  if_e	jmp	#LR__0267
03e64     6E 01 00 FF 
03e68     7F 15 06 F6 | 	mov	arg02, ##@LR__4891
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     EC A6 B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     B4 06 90 AD |  if_e	jmp	#LR__0268
03e7c     6E 01 00 FF 
03e80     83 15 06 F6 | 	mov	arg02, ##@LR__4892
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     D4 A6 B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     A4 06 90 AD |  if_e	jmp	#LR__0269
03e94     6E 01 00 FF 
03e98     88 15 06 F6 | 	mov	arg02, ##@LR__4893
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     BC A6 B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     94 06 90 AD |  if_e	jmp	#LR__0270
03eac     6E 01 00 FF 
03eb0     8C 15 06 F6 | 	mov	arg02, ##@LR__4894
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     A4 A6 B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     84 06 90 AD |  if_e	jmp	#LR__0271
03ec4     6E 01 00 FF 
03ec8     8F 15 06 F6 | 	mov	arg02, ##@LR__4895
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     8C A6 B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     74 06 90 AD |  if_e	jmp	#LR__0272
03edc     6E 01 00 FF 
03ee0     95 15 06 F6 | 	mov	arg02, ##@LR__4896
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     74 A6 B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     64 06 90 AD |  if_e	jmp	#LR__0273
03ef4     6E 01 00 FF 
03ef8     99 15 06 F6 | 	mov	arg02, ##@LR__4897
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     5C A6 B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     54 06 90 AD |  if_e	jmp	#LR__0274
03f0c     6E 01 00 FF 
03f10     9E 15 06 F6 | 	mov	arg02, ##@LR__4898
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     44 A6 B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     44 06 90 AD |  if_e	jmp	#LR__0275
03f24     6E 01 00 FF 
03f28     A1 15 06 F6 | 	mov	arg02, ##@LR__4899
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     2C A6 B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     34 06 90 AD |  if_e	jmp	#LR__0276
03f3c     6E 01 00 FF 
03f40     A4 15 06 F6 | 	mov	arg02, ##@LR__4900
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     14 A6 B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     24 06 90 AD |  if_e	jmp	#LR__0277
03f54     6E 01 00 FF 
03f58     A8 15 06 F6 | 	mov	arg02, ##@LR__4901
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     FC A5 B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     14 06 90 AD |  if_e	jmp	#LR__0278
03f6c     6E 01 00 FF 
03f70     AB 15 06 F6 | 	mov	arg02, ##@LR__4902
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     E4 A5 B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     04 06 90 AD |  if_e	jmp	#LR__0279
03f84     6E 01 00 FF 
03f88     AF 15 06 F6 | 	mov	arg02, ##@LR__4903
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     CC A5 B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     F4 05 90 AD |  if_e	jmp	#LR__0280
03f9c     6E 01 00 FF 
03fa0     B4 15 06 F6 | 	mov	arg02, ##@LR__4904
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     B4 A5 B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     E4 05 90 AD |  if_e	jmp	#LR__0281
03fb4     6E 01 00 FF 
03fb8     B7 15 06 F6 | 	mov	arg02, ##@LR__4905
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     9C A5 B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     D4 05 90 AD |  if_e	jmp	#LR__0282
03fcc     6E 01 00 FF 
03fd0     BC 15 06 F6 | 	mov	arg02, ##@LR__4906
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     84 A5 B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     C4 05 90 AD |  if_e	jmp	#LR__0283
03fe4     6E 01 00 FF 
03fe8     C0 15 06 F6 | 	mov	arg02, ##@LR__4907
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     6C A5 B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     B4 05 90 AD |  if_e	jmp	#LR__0284
03ffc     6E 01 00 FF 
04000     C6 15 06 F6 | 	mov	arg02, ##@LR__4908
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     54 A5 B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     A4 05 90 AD |  if_e	jmp	#LR__0285
04014     6E 01 00 FF 
04018     CB 15 06 F6 | 	mov	arg02, ##@LR__4909
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     3C A5 B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     94 05 90 AD |  if_e	jmp	#LR__0286
0402c     6E 01 00 FF 
04030     CE 15 06 F6 | 	mov	arg02, ##@LR__4910
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     24 A5 B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     84 05 90 AD |  if_e	jmp	#LR__0287
04044     6E 01 00 FF 
04048     D4 15 06 F6 | 	mov	arg02, ##@LR__4911
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     0C A5 B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     74 05 90 AD |  if_e	jmp	#LR__0288
0405c     6E 01 00 FF 
04060     D8 15 06 F6 | 	mov	arg02, ##@LR__4912
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     F4 A4 B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     64 05 90 AD |  if_e	jmp	#LR__0289
04074     6E 01 00 FF 
04078     DD 15 06 F6 | 	mov	arg02, ##@LR__4913
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     DC A4 B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     54 05 90 AD |  if_e	jmp	#LR__0290
0408c     6E 01 00 FF 
04090     E0 15 06 F6 | 	mov	arg02, ##@LR__4914
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     C4 A4 B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     44 05 90 AD |  if_e	jmp	#LR__0291
040a4     6E 01 00 FF 
040a8     E6 15 06 F6 | 	mov	arg02, ##@LR__4915
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     AC A4 B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     34 05 90 AD |  if_e	jmp	#LR__0292
040bc     6E 01 00 FF 
040c0     E9 15 06 F6 | 	mov	arg02, ##@LR__4916
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     94 A4 B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     24 05 90 AD |  if_e	jmp	#LR__0293
040d4     6E 01 00 FF 
040d8     F2 15 06 F6 | 	mov	arg02, ##@LR__4917
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     7C A4 B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     14 05 90 AD |  if_e	jmp	#LR__0294
040ec     6E 01 00 FF 
040f0     F8 15 06 F6 | 	mov	arg02, ##@LR__4918
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     64 A4 B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     04 05 90 AD |  if_e	jmp	#LR__0295
04104     6E 01 00 FF 
04108     FE 15 06 F6 | 	mov	arg02, ##@LR__4919
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     4C A4 B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     F4 04 90 AD |  if_e	jmp	#LR__0296
0411c     6F 01 00 FF 
04120     07 14 06 F6 | 	mov	arg02, ##@LR__4920
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     34 A4 B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     E4 04 90 AD |  if_e	jmp	#LR__0297
04134     6F 01 00 FF 
04138     11 14 06 F6 | 	mov	arg02, ##@LR__4921
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     1C A4 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     D4 04 90 AD |  if_e	jmp	#LR__0298
0414c     6F 01 00 FF 
04150     1A 14 06 F6 | 	mov	arg02, ##@LR__4922
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     04 A4 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     C4 04 90 AD |  if_e	jmp	#LR__0299
04164     6F 01 00 FF 
04168     1F 14 06 F6 | 	mov	arg02, ##@LR__4923
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     EC A3 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     B4 04 90 AD |  if_e	jmp	#LR__0300
0417c     6F 01 00 FF 
04180     24 14 06 F6 | 	mov	arg02, ##@LR__4924
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     D4 A3 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     A4 04 90 AD |  if_e	jmp	#LR__0301
04194     6F 01 00 FF 
04198     28 14 06 F6 | 	mov	arg02, ##@LR__4925
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     BC A3 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     94 04 90 AD |  if_e	jmp	#LR__0302
041ac     6F 01 00 FF 
041b0     2D 14 06 F6 | 	mov	arg02, ##@LR__4926
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     A4 A3 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     84 04 90 AD |  if_e	jmp	#LR__0303
041c4     6F 01 00 FF 
041c8     36 14 06 F6 | 	mov	arg02, ##@LR__4927
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     8C A3 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     74 04 90 AD |  if_e	jmp	#LR__0304
041dc     6F 01 00 FF 
041e0     3B 14 06 F6 | 	mov	arg02, ##@LR__4928
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     74 A3 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     64 04 90 AD |  if_e	jmp	#LR__0305
041f4     6F 01 00 FF 
041f8     41 14 06 F6 | 	mov	arg02, ##@LR__4929
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     5C A3 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     54 04 90 AD |  if_e	jmp	#LR__0306
0420c     6F 01 00 FF 
04210     43 14 06 F6 | 	mov	arg02, ##@LR__4930
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     44 A3 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     44 04 90 AD |  if_e	jmp	#LR__0307
04224     6F 01 00 FF 
04228     47 14 06 F6 | 	mov	arg02, ##@LR__4931
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     2C A3 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     34 04 90 AD |  if_e	jmp	#LR__0308
0423c     6F 01 00 FF 
04240     4F 14 06 F6 | 	mov	arg02, ##@LR__4932
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     14 A3 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     24 04 90 AD |  if_e	jmp	#LR__0309
04254     6F 01 00 FF 
04258     53 14 06 F6 | 	mov	arg02, ##@LR__4933
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     FC A2 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     14 04 90 AD |  if_e	jmp	#LR__0310
0426c     6F 01 00 FF 
04270     58 14 06 F6 | 	mov	arg02, ##@LR__4934
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     E4 A2 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     04 04 90 AD |  if_e	jmp	#LR__0311
04284     6F 01 00 FF 
04288     5B 14 06 F6 | 	mov	arg02, ##@LR__4935
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     CC A2 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     F4 03 90 AD |  if_e	jmp	#LR__0312
0429c     6F 01 00 FF 
042a0     64 14 06 F6 | 	mov	arg02, ##@LR__4936
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     B4 A2 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     E4 03 90 AD |  if_e	jmp	#LR__0313
042b4     6F 01 00 FF 
042b8     6B 14 06 F6 | 	mov	arg02, ##@LR__4937
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     9C A2 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     D4 03 90 AD |  if_e	jmp	#LR__0314
042cc     6F 01 00 FF 
042d0     72 14 06 F6 | 	mov	arg02, ##@LR__4938
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     84 A2 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     C4 03 90 AD |  if_e	jmp	#LR__0315
042e4     6F 01 00 FF 
042e8     79 14 06 F6 | 	mov	arg02, ##@LR__4939
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     6C A2 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     B4 03 90 AD |  if_e	jmp	#LR__0316
042fc     6F 01 00 FF 
04300     84 14 06 F6 | 	mov	arg02, ##@LR__4940
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     54 A2 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     A4 03 90 AD |  if_e	jmp	#LR__0317
04314     6F 01 00 FF 
04318     8B 14 06 F6 | 	mov	arg02, ##@LR__4941
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     3C A2 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     94 03 90 AD |  if_e	jmp	#LR__0318
0432c     6F 01 00 FF 
04330     93 14 06 F6 | 	mov	arg02, ##@LR__4942
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     24 A2 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     84 03 90 AD |  if_e	jmp	#LR__0319
04344     6F 01 00 FF 
04348     99 14 06 F6 | 	mov	arg02, ##@LR__4943
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     0C A2 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     74 03 90 AD |  if_e	jmp	#LR__0320
0435c     6F 01 00 FF 
04360     9D 14 06 F6 | 	mov	arg02, ##@LR__4944
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     F4 A1 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     64 03 90 AD |  if_e	jmp	#LR__0321
04374     6F 01 00 FF 
04378     A4 14 06 F6 | 	mov	arg02, ##@LR__4945
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     DC A1 B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     54 03 90 AD |  if_e	jmp	#LR__0322
0438c     6F 01 00 FF 
04390     A8 14 06 F6 | 	mov	arg02, ##@LR__4946
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     C4 A1 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     44 03 90 AD |  if_e	jmp	#LR__0323
043a4     6F 01 00 FF 
043a8     AD 14 06 F6 | 	mov	arg02, ##@LR__4947
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     AC A1 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     34 03 90 AD |  if_e	jmp	#LR__0324
043bc     6F 01 00 FF 
043c0     B4 14 06 F6 | 	mov	arg02, ##@LR__4948
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     94 A1 B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     24 03 90 AD |  if_e	jmp	#LR__0325
043d4     6F 01 00 FF 
043d8     BE 14 06 F6 | 	mov	arg02, ##@LR__4949
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     7C A1 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     14 03 90 AD |  if_e	jmp	#LR__0326
043ec     6F 01 00 FF 
043f0     C2 14 06 F6 | 	mov	arg02, ##@LR__4950
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     64 A1 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     04 03 90 AD |  if_e	jmp	#LR__0327
04404     6F 01 00 FF 
04408     CA 14 06 F6 | 	mov	arg02, ##@LR__4951
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     4C A1 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     F4 02 90 AD |  if_e	jmp	#LR__0328
0441c     6F 01 00 FF 
04420     CE 14 06 F6 | 	mov	arg02, ##@LR__4952
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     34 A1 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     E4 02 90 AD |  if_e	jmp	#LR__0329
04434     6F 01 00 FF 
04438     D4 14 06 F6 | 	mov	arg02, ##@LR__4953
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     1C A1 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     D4 02 90 AD |  if_e	jmp	#LR__0330
0444c     D8 02 90 FD | 	jmp	#LR__0331
04450                 | LR__0240
04450     5C FA 05 F6 | 	mov	result1, #92
04454     D4 02 90 FD | 	jmp	#LR__0332
04458                 | LR__0241
04458     5C FA 05 F6 | 	mov	result1, #92
0445c     CC 02 90 FD | 	jmp	#LR__0332
04460                 | LR__0242
04460     47 FA 05 F6 | 	mov	result1, #71
04464     C4 02 90 FD | 	jmp	#LR__0332
04468                 | LR__0243
04468     59 FA 05 F6 | 	mov	result1, #89
0446c     BC 02 90 FD | 	jmp	#LR__0332
04470                 | LR__0244
04470     59 FA 05 F6 | 	mov	result1, #89
04474     B4 02 90 FD | 	jmp	#LR__0332
04478                 | LR__0245
04478     45 FA 05 F6 | 	mov	result1, #69
0447c     AC 02 90 FD | 	jmp	#LR__0332
04480                 | LR__0246
04480     45 FA 05 F6 | 	mov	result1, #69
04484     A4 02 90 FD | 	jmp	#LR__0332
04488                 | LR__0247
04488     69 FA 05 F6 | 	mov	result1, #105
0448c     9C 02 90 FD | 	jmp	#LR__0332
04490                 | LR__0248
04490     40 FA 05 F6 | 	mov	result1, #64
04494     94 02 90 FD | 	jmp	#LR__0332
04498                 | LR__0249
04498     49 FA 05 F6 | 	mov	result1, #73
0449c     8C 02 90 FD | 	jmp	#LR__0332
044a0                 | LR__0250
044a0     49 FA 05 F6 | 	mov	result1, #73
044a4     84 02 90 FD | 	jmp	#LR__0332
044a8                 | LR__0251
044a8     50 FA 05 F6 | 	mov	result1, #80
044ac     7C 02 90 FD | 	jmp	#LR__0332
044b0                 | LR__0252
044b0     50 FA 05 F6 | 	mov	result1, #80
044b4     74 02 90 FD | 	jmp	#LR__0332
044b8                 | LR__0253
044b8     68 FA 05 F6 | 	mov	result1, #104
044bc     6C 02 90 FD | 	jmp	#LR__0332
044c0                 | LR__0254
044c0     73 FA 05 F6 | 	mov	result1, #115
044c4     64 02 90 FD | 	jmp	#LR__0332
044c8                 | LR__0255
044c8     74 FA 05 F6 | 	mov	result1, #116
044cc     5C 02 90 FD | 	jmp	#LR__0332
044d0                 | LR__0256
044d0     6C FA 05 F6 | 	mov	result1, #108
044d4     54 02 90 FD | 	jmp	#LR__0332
044d8                 | LR__0257
044d8     6C FA 05 F6 | 	mov	result1, #108
044dc     4C 02 90 FD | 	jmp	#LR__0332
044e0                 | LR__0258
044e0     89 FA 05 F6 | 	mov	result1, #137
044e4     44 02 90 FD | 	jmp	#LR__0332
044e8                 | LR__0259
044e8     72 FA 05 F6 | 	mov	result1, #114
044ec     3C 02 90 FD | 	jmp	#LR__0332
044f0                 | LR__0260
044f0     5D FA 05 F6 | 	mov	result1, #93
044f4     34 02 90 FD | 	jmp	#LR__0332
044f8                 | LR__0261
044f8     96 FA 05 F6 | 	mov	result1, #150
044fc     2C 02 90 FD | 	jmp	#LR__0332
04500                 | LR__0262
04500     43 FA 05 F6 | 	mov	result1, #67
04504     24 02 90 FD | 	jmp	#LR__0332
04508                 | LR__0263
04508     43 FA 05 F6 | 	mov	result1, #67
0450c     1C 02 90 FD | 	jmp	#LR__0332
04510                 | LR__0264
04510     5A FA 05 F6 | 	mov	result1, #90
04514     14 02 90 FD | 	jmp	#LR__0332
04518                 | LR__0265
04518     46 FA 05 F6 | 	mov	result1, #70
0451c     0C 02 90 FD | 	jmp	#LR__0332
04520                 | LR__0266
04520     46 FA 05 F6 | 	mov	result1, #70
04524     04 02 90 FD | 	jmp	#LR__0332
04528                 | LR__0267
04528     71 FA 05 F6 | 	mov	result1, #113
0452c     FC 01 90 FD | 	jmp	#LR__0332
04530                 | LR__0268
04530     71 FA 05 F6 | 	mov	result1, #113
04534     F4 01 90 FD | 	jmp	#LR__0332
04538                 | LR__0269
04538     60 FA 05 F6 | 	mov	result1, #96
0453c     EC 01 90 FD | 	jmp	#LR__0332
04540                 | LR__0270
04540     4A FA 05 F6 | 	mov	result1, #74
04544     E4 01 90 FD | 	jmp	#LR__0332
04548                 | LR__0271
04548     4A FA 05 F6 | 	mov	result1, #74
0454c     DC 01 90 FD | 	jmp	#LR__0332
04550                 | LR__0272
04550     48 FA 05 F6 | 	mov	result1, #72
04554     D4 01 90 FD | 	jmp	#LR__0332
04558                 | LR__0273
04558     48 FA 05 F6 | 	mov	result1, #72
0455c     CC 01 90 FD | 	jmp	#LR__0332
04560                 | LR__0274
04560     4E FA 05 F6 | 	mov	result1, #78
04564     C4 01 90 FD | 	jmp	#LR__0332
04568                 | LR__0275
04568     4E FA 05 F6 | 	mov	result1, #78
0456c     BC 01 90 FD | 	jmp	#LR__0332
04570                 | LR__0276
04570     58 FA 05 F6 | 	mov	result1, #88
04574     B4 01 90 FD | 	jmp	#LR__0332
04578                 | LR__0277
04578     5F FA 05 F6 | 	mov	result1, #95
0457c     AC 01 90 FD | 	jmp	#LR__0332
04580                 | LR__0278
04580     5F FA 05 F6 | 	mov	result1, #95
04584     A4 01 90 FD | 	jmp	#LR__0332
04588                 | LR__0279
04588     8A FA 05 F6 | 	mov	result1, #138
0458c     9C 01 90 FD | 	jmp	#LR__0332
04590                 | LR__0280
04590     4C FA 05 F6 | 	mov	result1, #76
04594     94 01 90 FD | 	jmp	#LR__0332
04598                 | LR__0281
04598     4C FA 05 F6 | 	mov	result1, #76
0459c     8C 01 90 FD | 	jmp	#LR__0332
045a0                 | LR__0282
045a0     52 FA 05 F6 | 	mov	result1, #82
045a4     84 01 90 FD | 	jmp	#LR__0332
045a8                 | LR__0283
045a8     52 FA 05 F6 | 	mov	result1, #82
045ac     7C 01 90 FD | 	jmp	#LR__0332
045b0                 | LR__0284
045b0     97 FA 05 F6 | 	mov	result1, #151
045b4     74 01 90 FD | 	jmp	#LR__0332
045b8                 | LR__0285
045b8     61 FA 05 F6 | 	mov	result1, #97
045bc     6C 01 90 FD | 	jmp	#LR__0332
045c0                 | LR__0286
045c0     61 FA 05 F6 | 	mov	result1, #97
045c4     64 01 90 FD | 	jmp	#LR__0332
045c8                 | LR__0287
045c8     63 FA 05 F6 | 	mov	result1, #99
045cc     5C 01 90 FD | 	jmp	#LR__0332
045d0                 | LR__0288
045d0     41 FA 05 F6 | 	mov	result1, #65
045d4     54 01 90 FD | 	jmp	#LR__0332
045d8                 | LR__0289
045d8     4B FA 05 F6 | 	mov	result1, #75
045dc     4C 01 90 FD | 	jmp	#LR__0332
045e0                 | LR__0290
045e0     4B FA 05 F6 | 	mov	result1, #75
045e4     44 01 90 FD | 	jmp	#LR__0332
045e8                 | LR__0291
045e8     5E FA 05 F6 | 	mov	result1, #94
045ec     3C 01 90 FD | 	jmp	#LR__0332
045f0                 | LR__0292
045f0     5E FA 05 F6 | 	mov	result1, #94
045f4     34 01 90 FD | 	jmp	#LR__0332
045f8                 | LR__0293
045f8     7C FA 05 F6 | 	mov	result1, #124
045fc     2C 01 90 FD | 	jmp	#LR__0332
04600                 | LR__0294
04600     7E FA 05 F6 | 	mov	result1, #126
04604     24 01 90 FD | 	jmp	#LR__0332
04608                 | LR__0295
04608     7D FA 05 F6 | 	mov	result1, #125
0460c     1C 01 90 FD | 	jmp	#LR__0332
04610                 | LR__0296
04610     7F FA 05 F6 | 	mov	result1, #127
04614     14 01 90 FD | 	jmp	#LR__0332
04618                 | LR__0297
04618     80 FA 05 F6 | 	mov	result1, #128
0461c     0C 01 90 FD | 	jmp	#LR__0332
04620                 | LR__0298
04620     55 FA 05 F6 | 	mov	result1, #85
04624     04 01 90 FD | 	jmp	#LR__0332
04628                 | LR__0299
04628     75 FA 05 F6 | 	mov	result1, #117
0462c     FC 00 90 FD | 	jmp	#LR__0332
04630                 | LR__0300
04630     42 FA 05 F6 | 	mov	result1, #66
04634     F4 00 90 FD | 	jmp	#LR__0332
04638                 | LR__0301
04638     42 FA 05 F6 | 	mov	result1, #66
0463c     EC 00 90 FD | 	jmp	#LR__0332
04640                 | LR__0302
04640     95 FA 05 F6 | 	mov	result1, #149
04644     E4 00 90 FD | 	jmp	#LR__0332
04648                 | LR__0303
04648     81 FA 05 F6 | 	mov	result1, #129
0464c     DC 00 90 FD | 	jmp	#LR__0332
04650                 | LR__0304
04650     81 FA 05 F6 | 	mov	result1, #129
04654     D4 00 90 FD | 	jmp	#LR__0332
04658                 | LR__0305
04658     44 FA 05 F6 | 	mov	result1, #68
0465c     CC 00 90 FD | 	jmp	#LR__0332
04660                 | LR__0306
04660     44 FA 05 F6 | 	mov	result1, #68
04664     C4 00 90 FD | 	jmp	#LR__0332
04668                 | LR__0307
04668     88 FA 05 F6 | 	mov	result1, #136
0466c     BC 00 90 FD | 	jmp	#LR__0332
04670                 | LR__0308
04670     92 FA 05 F6 | 	mov	result1, #146
04674     B4 00 90 FD | 	jmp	#LR__0332
04678                 | LR__0309
04678     4D FA 05 F6 | 	mov	result1, #77
0467c     AC 00 90 FD | 	jmp	#LR__0332
04680                 | LR__0310
04680     51 FA 05 F6 | 	mov	result1, #81
04684     A4 00 90 FD | 	jmp	#LR__0332
04688                 | LR__0311
04688     51 FA 05 F6 | 	mov	result1, #81
0468c     9C 00 90 FD | 	jmp	#LR__0332
04690                 | LR__0312
04690     8E FA 05 F6 | 	mov	result1, #142
04694     94 00 90 FD | 	jmp	#LR__0332
04698                 | LR__0313
04698     90 FA 05 F6 | 	mov	result1, #144
0469c     8C 00 90 FD | 	jmp	#LR__0332
046a0                 | LR__0314
046a0     8D FA 05 F6 | 	mov	result1, #141
046a4     84 00 90 FD | 	jmp	#LR__0332
046a8                 | LR__0315
046a8     8C FA 05 F6 | 	mov	result1, #140
046ac     7C 00 90 FD | 	jmp	#LR__0332
046b0                 | LR__0316
046b0     91 FA 05 F6 | 	mov	result1, #145
046b4     74 00 90 FD | 	jmp	#LR__0332
046b8                 | LR__0317
046b8     8B FA 05 F6 | 	mov	result1, #139
046bc     6C 00 90 FD | 	jmp	#LR__0332
046c0                 | LR__0318
046c0     8F FA 05 F6 | 	mov	result1, #143
046c4     64 00 90 FD | 	jmp	#LR__0332
046c8                 | LR__0319
046c8     75 FA 05 F6 | 	mov	result1, #117
046cc     5C 00 90 FD | 	jmp	#LR__0332
046d0                 | LR__0320
046d0     75 FA 05 F6 | 	mov	result1, #117
046d4     54 00 90 FD | 	jmp	#LR__0332
046d8                 | LR__0321
046d8     6D FA 05 F6 | 	mov	result1, #109
046dc     4C 00 90 FD | 	jmp	#LR__0332
046e0                 | LR__0322
046e0     6D FA 05 F6 | 	mov	result1, #109
046e4     44 00 90 FD | 	jmp	#LR__0332
046e8                 | LR__0323
046e8     5B FA 05 F6 | 	mov	result1, #91
046ec     3C 00 90 FD | 	jmp	#LR__0332
046f0                 | LR__0324
046f0     56 FA 05 F6 | 	mov	result1, #86
046f4     34 00 90 FD | 	jmp	#LR__0332
046f8                 | LR__0325
046f8     70 FA 05 F6 | 	mov	result1, #112
046fc     2C 00 90 FD | 	jmp	#LR__0332
04700                 | LR__0326
04700     70 FA 05 F6 | 	mov	result1, #112
04704     24 00 90 FD | 	jmp	#LR__0332
04708                 | LR__0327
04708     57 FA 05 F6 | 	mov	result1, #87
0470c     1C 00 90 FD | 	jmp	#LR__0332
04710                 | LR__0328
04710     57 FA 05 F6 | 	mov	result1, #87
04714     14 00 90 FD | 	jmp	#LR__0332
04718                 | LR__0329
04718     77 FA 05 F6 | 	mov	result1, #119
0471c     0C 00 90 FD | 	jmp	#LR__0332
04720                 | LR__0330
04720     78 FA 05 F6 | 	mov	result1, #120
04724     04 00 90 FD | 	jmp	#LR__0332
04728                 | LR__0331
04728     00 FA 05 F6 | 	mov	result1, #0
0472c                 | LR__0332
0472c     A7 F0 03 F6 | 	mov	ptra, fp
04730     B2 00 A0 FD | 	call	#popregs_
04734                 | _iscommand_ret
04734     2D 00 64 FD | 	ret
04738                 | 
04738                 | ' 
04738                 | ' function isfunction(s as string) as ubyte
04738                 | _isfunction
04738     01 4A 05 F6 | 	mov	COUNT_, #1
0473c     A8 00 A0 FD | 	call	#pushregs_
04740                 | ' 
04740                 | ' select case s
04740     09 1F 02 F6 | 	mov	local01, arg01
04744     6F 01 00 FF 
04748     DA 14 06 F6 | 	mov	arg02, ##@LR__4954
0474c     0F 13 02 F6 | 	mov	arg01, local01
04750     0C 9E B1 FD | 	call	#__system___string_cmp
04754     00 FA 0D F2 | 	cmp	result1, #0 wz
04758     C4 03 90 AD |  if_e	jmp	#LR__0340
0475c     6F 01 00 FF 
04760     DE 14 06 F6 | 	mov	arg02, ##@LR__4955
04764     0F 13 02 F6 | 	mov	arg01, local01
04768     F4 9D B1 FD | 	call	#__system___string_cmp
0476c     00 FA 0D F2 | 	cmp	result1, #0 wz
04770     B4 03 90 AD |  if_e	jmp	#LR__0341
04774     6F 01 00 FF 
04778     E3 14 06 F6 | 	mov	arg02, ##@LR__4956
0477c     0F 13 02 F6 | 	mov	arg01, local01
04780     DC 9D B1 FD | 	call	#__system___string_cmp
04784     00 FA 0D F2 | 	cmp	result1, #0 wz
04788     A4 03 90 AD |  if_e	jmp	#LR__0342
0478c     6F 01 00 FF 
04790     E7 14 06 F6 | 	mov	arg02, ##@LR__4957
04794     0F 13 02 F6 | 	mov	arg01, local01
04798     C4 9D B1 FD | 	call	#__system___string_cmp
0479c     00 FA 0D F2 | 	cmp	result1, #0 wz
047a0     94 03 90 AD |  if_e	jmp	#LR__0343
047a4     6F 01 00 FF 
047a8     EC 14 06 F6 | 	mov	arg02, ##@LR__4958
047ac     0F 13 02 F6 | 	mov	arg01, local01
047b0     AC 9D B1 FD | 	call	#__system___string_cmp
047b4     00 FA 0D F2 | 	cmp	result1, #0 wz
047b8     84 03 90 AD |  if_e	jmp	#LR__0344
047bc     6F 01 00 FF 
047c0     F0 14 06 F6 | 	mov	arg02, ##@LR__4959
047c4     0F 13 02 F6 | 	mov	arg01, local01
047c8     94 9D B1 FD | 	call	#__system___string_cmp
047cc     00 FA 0D F2 | 	cmp	result1, #0 wz
047d0     74 03 90 AD |  if_e	jmp	#LR__0345
047d4     6F 01 00 FF 
047d8     F5 14 06 F6 | 	mov	arg02, ##@LR__4960
047dc     0F 13 02 F6 | 	mov	arg01, local01
047e0     7C 9D B1 FD | 	call	#__system___string_cmp
047e4     00 FA 0D F2 | 	cmp	result1, #0 wz
047e8     64 03 90 AD |  if_e	jmp	#LR__0346
047ec     6F 01 00 FF 
047f0     F9 14 06 F6 | 	mov	arg02, ##@LR__4961
047f4     0F 13 02 F6 | 	mov	arg01, local01
047f8     64 9D B1 FD | 	call	#__system___string_cmp
047fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04800     54 03 90 AD |  if_e	jmp	#LR__0347
04804     6F 01 00 FF 
04808     FE 14 06 F6 | 	mov	arg02, ##@LR__4962
0480c     0F 13 02 F6 | 	mov	arg01, local01
04810     4C 9D B1 FD | 	call	#__system___string_cmp
04814     00 FA 0D F2 | 	cmp	result1, #0 wz
04818     44 03 90 AD |  if_e	jmp	#LR__0348
0481c     6F 01 00 FF 
04820     03 15 06 F6 | 	mov	arg02, ##@LR__4963
04824     0F 13 02 F6 | 	mov	arg01, local01
04828     34 9D B1 FD | 	call	#__system___string_cmp
0482c     00 FA 0D F2 | 	cmp	result1, #0 wz
04830     34 03 90 AD |  if_e	jmp	#LR__0349
04834     6F 01 00 FF 
04838     07 15 06 F6 | 	mov	arg02, ##@LR__4964
0483c     0F 13 02 F6 | 	mov	arg01, local01
04840     1C 9D B1 FD | 	call	#__system___string_cmp
04844     00 FA 0D F2 | 	cmp	result1, #0 wz
04848     24 03 90 AD |  if_e	jmp	#LR__0350
0484c     6F 01 00 FF 
04850     0D 15 06 F6 | 	mov	arg02, ##@LR__4965
04854     0F 13 02 F6 | 	mov	arg01, local01
04858     04 9D B1 FD | 	call	#__system___string_cmp
0485c     00 FA 0D F2 | 	cmp	result1, #0 wz
04860     14 03 90 AD |  if_e	jmp	#LR__0351
04864     6F 01 00 FF 
04868     11 15 06 F6 | 	mov	arg02, ##@LR__4966
0486c     0F 13 02 F6 | 	mov	arg01, local01
04870     EC 9C B1 FD | 	call	#__system___string_cmp
04874     00 FA 0D F2 | 	cmp	result1, #0 wz
04878     04 03 90 AD |  if_e	jmp	#LR__0352
0487c     6F 01 00 FF 
04880     1A 15 06 F6 | 	mov	arg02, ##@LR__4967
04884     0F 13 02 F6 | 	mov	arg01, local01
04888     D4 9C B1 FD | 	call	#__system___string_cmp
0488c     00 FA 0D F2 | 	cmp	result1, #0 wz
04890     F4 02 90 AD |  if_e	jmp	#LR__0353
04894     6F 01 00 FF 
04898     1E 15 06 F6 | 	mov	arg02, ##@LR__4968
0489c     0F 13 02 F6 | 	mov	arg01, local01
048a0     BC 9C B1 FD | 	call	#__system___string_cmp
048a4     00 FA 0D F2 | 	cmp	result1, #0 wz
048a8     E4 02 90 AD |  if_e	jmp	#LR__0354
048ac     6F 01 00 FF 
048b0     2C 15 06 F6 | 	mov	arg02, ##@LR__4969
048b4     0F 13 02 F6 | 	mov	arg01, local01
048b8     A4 9C B1 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     D4 02 90 AD |  if_e	jmp	#LR__0355
048c4     6F 01 00 FF 
048c8     39 15 06 F6 | 	mov	arg02, ##@LR__4970
048cc     0F 13 02 F6 | 	mov	arg01, local01
048d0     8C 9C B1 FD | 	call	#__system___string_cmp
048d4     00 FA 0D F2 | 	cmp	result1, #0 wz
048d8     C4 02 90 AD |  if_e	jmp	#LR__0356
048dc     6F 01 00 FF 
048e0     41 15 06 F6 | 	mov	arg02, ##@LR__4971
048e4     0F 13 02 F6 | 	mov	arg01, local01
048e8     74 9C B1 FD | 	call	#__system___string_cmp
048ec     00 FA 0D F2 | 	cmp	result1, #0 wz
048f0     B4 02 90 AD |  if_e	jmp	#LR__0357
048f4     6F 01 00 FF 
048f8     46 15 06 F6 | 	mov	arg02, ##@LR__4972
048fc     0F 13 02 F6 | 	mov	arg01, local01
04900     5C 9C B1 FD | 	call	#__system___string_cmp
04904     00 FA 0D F2 | 	cmp	result1, #0 wz
04908     A4 02 90 AD |  if_e	jmp	#LR__0358
0490c     6F 01 00 FF 
04910     4D 15 06 F6 | 	mov	arg02, ##@LR__4973
04914     0F 13 02 F6 | 	mov	arg01, local01
04918     44 9C B1 FD | 	call	#__system___string_cmp
0491c     00 FA 0D F2 | 	cmp	result1, #0 wz
04920     94 02 90 AD |  if_e	jmp	#LR__0359
04924     6F 01 00 FF 
04928     53 15 06 F6 | 	mov	arg02, ##@LR__4974
0492c     0F 13 02 F6 | 	mov	arg01, local01
04930     2C 9C B1 FD | 	call	#__system___string_cmp
04934     00 FA 0D F2 | 	cmp	result1, #0 wz
04938     84 02 90 AD |  if_e	jmp	#LR__0360
0493c     6F 01 00 FF 
04940     57 15 06 F6 | 	mov	arg02, ##@LR__4975
04944     0F 13 02 F6 | 	mov	arg01, local01
04948     14 9C B1 FD | 	call	#__system___string_cmp
0494c     00 FA 0D F2 | 	cmp	result1, #0 wz
04950     74 02 90 AD |  if_e	jmp	#LR__0361
04954     6F 01 00 FF 
04958     5D 15 06 F6 | 	mov	arg02, ##@LR__4976
0495c     0F 13 02 F6 | 	mov	arg01, local01
04960     FC 9B B1 FD | 	call	#__system___string_cmp
04964     00 FA 0D F2 | 	cmp	result1, #0 wz
04968     64 02 90 AD |  if_e	jmp	#LR__0362
0496c     6F 01 00 FF 
04970     62 15 06 F6 | 	mov	arg02, ##@LR__4977
04974     0F 13 02 F6 | 	mov	arg01, local01
04978     E4 9B B1 FD | 	call	#__system___string_cmp
0497c     00 FA 0D F2 | 	cmp	result1, #0 wz
04980     54 02 90 AD |  if_e	jmp	#LR__0363
04984     6F 01 00 FF 
04988     69 15 06 F6 | 	mov	arg02, ##@LR__4978
0498c     0F 13 02 F6 | 	mov	arg01, local01
04990     CC 9B B1 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     44 02 90 AD |  if_e	jmp	#LR__0364
0499c     6F 01 00 FF 
049a0     70 15 06 F6 | 	mov	arg02, ##@LR__4979
049a4     0F 13 02 F6 | 	mov	arg01, local01
049a8     B4 9B B1 FD | 	call	#__system___string_cmp
049ac     00 FA 0D F2 | 	cmp	result1, #0 wz
049b0     34 02 90 AD |  if_e	jmp	#LR__0365
049b4     6F 01 00 FF 
049b8     77 15 06 F6 | 	mov	arg02, ##@LR__4980
049bc     0F 13 02 F6 | 	mov	arg01, local01
049c0     9C 9B B1 FD | 	call	#__system___string_cmp
049c4     00 FA 0D F2 | 	cmp	result1, #0 wz
049c8     24 02 90 AD |  if_e	jmp	#LR__0366
049cc     6F 01 00 FF 
049d0     7E 15 06 F6 | 	mov	arg02, ##@LR__4981
049d4     0F 13 02 F6 | 	mov	arg01, local01
049d8     84 9B B1 FD | 	call	#__system___string_cmp
049dc     00 FA 0D F2 | 	cmp	result1, #0 wz
049e0     14 02 90 AD |  if_e	jmp	#LR__0367
049e4     6F 01 00 FF 
049e8     83 15 06 F6 | 	mov	arg02, ##@LR__4982
049ec     0F 13 02 F6 | 	mov	arg01, local01
049f0     6C 9B B1 FD | 	call	#__system___string_cmp
049f4     00 FA 0D F2 | 	cmp	result1, #0 wz
049f8     04 02 90 AD |  if_e	jmp	#LR__0368
049fc     6F 01 00 FF 
04a00     8B 15 06 F6 | 	mov	arg02, ##@LR__4983
04a04     0F 13 02 F6 | 	mov	arg01, local01
04a08     54 9B B1 FD | 	call	#__system___string_cmp
04a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a10     F4 01 90 AD |  if_e	jmp	#LR__0369
04a14     6F 01 00 FF 
04a18     91 15 06 F6 | 	mov	arg02, ##@LR__4984
04a1c     0F 13 02 F6 | 	mov	arg01, local01
04a20     3C 9B B1 FD | 	call	#__system___string_cmp
04a24     00 FA 0D F2 | 	cmp	result1, #0 wz
04a28     E4 01 90 AD |  if_e	jmp	#LR__0370
04a2c     6F 01 00 FF 
04a30     98 15 06 F6 | 	mov	arg02, ##@LR__4985
04a34     0F 13 02 F6 | 	mov	arg01, local01
04a38     24 9B B1 FD | 	call	#__system___string_cmp
04a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a40     D4 01 90 AD |  if_e	jmp	#LR__0371
04a44     6F 01 00 FF 
04a48     9E 15 06 F6 | 	mov	arg02, ##@LR__4986
04a4c     0F 13 02 F6 | 	mov	arg01, local01
04a50     0C 9B B1 FD | 	call	#__system___string_cmp
04a54     00 FA 0D F2 | 	cmp	result1, #0 wz
04a58     C4 01 90 AD |  if_e	jmp	#LR__0372
04a5c     6F 01 00 FF 
04a60     A2 15 06 F6 | 	mov	arg02, ##@LR__4987
04a64     0F 13 02 F6 | 	mov	arg01, local01
04a68     F4 9A B1 FD | 	call	#__system___string_cmp
04a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a70     B4 01 90 AD |  if_e	jmp	#LR__0373
04a74     6F 01 00 FF 
04a78     A6 15 06 F6 | 	mov	arg02, ##@LR__4988
04a7c     0F 13 02 F6 | 	mov	arg01, local01
04a80     DC 9A B1 FD | 	call	#__system___string_cmp
04a84     00 FA 0D F2 | 	cmp	result1, #0 wz
04a88     A4 01 90 AD |  if_e	jmp	#LR__0374
04a8c     6F 01 00 FF 
04a90     AA 15 06 F6 | 	mov	arg02, ##@LR__4989
04a94     0F 13 02 F6 | 	mov	arg01, local01
04a98     C4 9A B1 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     94 01 90 AD |  if_e	jmp	#LR__0375
04aa4     6F 01 00 FF 
04aa8     B0 15 06 F6 | 	mov	arg02, ##@LR__4990
04aac     0F 13 02 F6 | 	mov	arg01, local01
04ab0     AC 9A B1 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     84 01 90 AD |  if_e	jmp	#LR__0376
04abc     6F 01 00 FF 
04ac0     B6 15 06 F6 | 	mov	arg02, ##@LR__4991
04ac4     0F 13 02 F6 | 	mov	arg01, local01
04ac8     94 9A B1 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     74 01 90 AD |  if_e	jmp	#LR__0377
04ad4     6F 01 00 FF 
04ad8     BB 15 06 F6 | 	mov	arg02, ##@LR__4992
04adc     0F 13 02 F6 | 	mov	arg01, local01
04ae0     7C 9A B1 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     64 01 90 AD |  if_e	jmp	#LR__0378
04aec     6F 01 00 FF 
04af0     BF 15 06 F6 | 	mov	arg02, ##@LR__4993
04af4     0F 13 02 F6 | 	mov	arg01, local01
04af8     64 9A B1 FD | 	call	#__system___string_cmp
04afc     00 FA 0D F2 | 	cmp	result1, #0 wz
04b00     54 01 90 AD |  if_e	jmp	#LR__0379
04b04     6F 01 00 FF 
04b08     C3 15 06 F6 | 	mov	arg02, ##@LR__4994
04b0c     0F 13 02 F6 | 	mov	arg01, local01
04b10     4C 9A B1 FD | 	call	#__system___string_cmp
04b14     00 FA 0D F2 | 	cmp	result1, #0 wz
04b18     44 01 90 AD |  if_e	jmp	#LR__0380
04b1c     48 01 90 FD | 	jmp	#LR__0381
04b20                 | LR__0340
04b20     9E FA 05 F6 | 	mov	result1, #158
04b24     44 01 90 FD | 	jmp	#LR__0382
04b28                 | LR__0341
04b28     85 FA 05 F6 | 	mov	result1, #133
04b2c     3C 01 90 FD | 	jmp	#LR__0382
04b30                 | LR__0342
04b30     9B FA 05 F6 | 	mov	result1, #155
04b34     34 01 90 FD | 	jmp	#LR__0382
04b38                 | LR__0343
04b38     9B FA 05 F6 | 	mov	result1, #155
04b3c     2C 01 90 FD | 	jmp	#LR__0382
04b40                 | LR__0344
04b40     A7 FA 05 F6 | 	mov	result1, #167
04b44     24 01 90 FD | 	jmp	#LR__0382
04b48                 | LR__0345
04b48     84 FA 05 F6 | 	mov	result1, #132
04b4c     1C 01 90 FD | 	jmp	#LR__0382
04b50                 | LR__0346
04b50     86 FA 05 F6 | 	mov	result1, #134
04b54     14 01 90 FD | 	jmp	#LR__0382
04b58                 | LR__0347
04b58     A2 FA 05 F6 | 	mov	result1, #162
04b5c     0C 01 90 FD | 	jmp	#LR__0382
04b60                 | LR__0348
04b60     9F FA 05 F6 | 	mov	result1, #159
04b64     04 01 90 FD | 	jmp	#LR__0382
04b68                 | LR__0349
04b68     82 FA 05 F6 | 	mov	result1, #130
04b6c     FC 00 90 FD | 	jmp	#LR__0382
04b70                 | LR__0350
04b70     99 FA 05 F6 | 	mov	result1, #153
04b74     F4 00 90 FD | 	jmp	#LR__0382
04b78                 | LR__0351
04b78     9C FA 05 F6 | 	mov	result1, #156
04b7c     EC 00 90 FD | 	jmp	#LR__0382
04b80                 | LR__0352
04b80     6F FA 05 F6 | 	mov	result1, #111
04b84     E4 00 90 FD | 	jmp	#LR__0382
04b88                 | LR__0353
04b88     6F FA 05 F6 | 	mov	result1, #111
04b8c     DC 00 90 FD | 	jmp	#LR__0382
04b90                 | LR__0354
04b90     93 FA 05 F6 | 	mov	result1, #147
04b94     D4 00 90 FD | 	jmp	#LR__0382
04b98                 | LR__0355
04b98     94 FA 05 F6 | 	mov	result1, #148
04b9c     CC 00 90 FD | 	jmp	#LR__0382
04ba0                 | LR__0356
04ba0     62 FA 05 F6 | 	mov	result1, #98
04ba4     C4 00 90 FD | 	jmp	#LR__0382
04ba8                 | LR__0357
04ba8     A3 FA 05 F6 | 	mov	result1, #163
04bac     BC 00 90 FD | 	jmp	#LR__0382
04bb0                 | LR__0358
04bb0     9D FA 05 F6 | 	mov	result1, #157
04bb4     B4 00 90 FD | 	jmp	#LR__0382
04bb8                 | LR__0359
04bb8     A4 FA 05 F6 | 	mov	result1, #164
04bbc     AC 00 90 FD | 	jmp	#LR__0382
04bc0                 | LR__0360
04bc0     A8 FA 05 F6 | 	mov	result1, #168
04bc4     A4 00 90 FD | 	jmp	#LR__0382
04bc8                 | LR__0361
04bc8     9A FA 05 F6 | 	mov	result1, #154
04bcc     9C 00 90 FD | 	jmp	#LR__0382
04bd0                 | LR__0362
04bd0     A6 FA 05 F6 | 	mov	result1, #166
04bd4     94 00 90 FD | 	jmp	#LR__0382
04bd8                 | LR__0363
04bd8     66 FA 05 F6 | 	mov	result1, #102
04bdc     8C 00 90 FD | 	jmp	#LR__0382
04be0                 | LR__0364
04be0     67 FA 05 F6 | 	mov	result1, #103
04be4     84 00 90 FD | 	jmp	#LR__0382
04be8                 | LR__0365
04be8     64 FA 05 F6 | 	mov	result1, #100
04bec     7C 00 90 FD | 	jmp	#LR__0382
04bf0                 | LR__0366
04bf0     65 FA 05 F6 | 	mov	result1, #101
04bf4     74 00 90 FD | 	jmp	#LR__0382
04bf8                 | LR__0367
04bf8     98 FA 05 F6 | 	mov	result1, #152
04bfc     6C 00 90 FD | 	jmp	#LR__0382
04c00                 | LR__0368
04c00     7B FA 05 F6 | 	mov	result1, #123
04c04     64 00 90 FD | 	jmp	#LR__0382
04c08                 | LR__0369
04c08     76 FA 05 F6 | 	mov	result1, #118
04c0c     5C 00 90 FD | 	jmp	#LR__0382
04c10                 | LR__0370
04c10     A5 FA 05 F6 | 	mov	result1, #165
04c14     54 00 90 FD | 	jmp	#LR__0382
04c18                 | LR__0371
04c18     7A FA 05 F6 | 	mov	result1, #122
04c1c     4C 00 90 FD | 	jmp	#LR__0382
04c20                 | LR__0372
04c20     54 FA 05 F6 | 	mov	result1, #84
04c24     44 00 90 FD | 	jmp	#LR__0382
04c28                 | LR__0373
04c28     6B FA 05 F6 | 	mov	result1, #107
04c2c     3C 00 90 FD | 	jmp	#LR__0382
04c30                 | LR__0374
04c30     87 FA 05 F6 | 	mov	result1, #135
04c34     34 00 90 FD | 	jmp	#LR__0382
04c38                 | LR__0375
04c38     6A FA 05 F6 | 	mov	result1, #106
04c3c     2C 00 90 FD | 	jmp	#LR__0382
04c40                 | LR__0376
04c40     6E FA 05 F6 | 	mov	result1, #110
04c44     24 00 90 FD | 	jmp	#LR__0382
04c48                 | LR__0377
04c48     A1 FA 05 F6 | 	mov	result1, #161
04c4c     1C 00 90 FD | 	jmp	#LR__0382
04c50                 | LR__0378
04c50     83 FA 05 F6 | 	mov	result1, #131
04c54     14 00 90 FD | 	jmp	#LR__0382
04c58                 | LR__0379
04c58     A0 FA 05 F6 | 	mov	result1, #160
04c5c     0C 00 90 FD | 	jmp	#LR__0382
04c60                 | LR__0380
04c60     9B FA 05 F6 | 	mov	result1, #155
04c64     04 00 90 FD | 	jmp	#LR__0382
04c68                 | LR__0381
04c68     00 FA 05 F6 | 	mov	result1, #0
04c6c                 | LR__0382
04c6c     A7 F0 03 F6 | 	mov	ptra, fp
04c70     B2 00 A0 FD | 	call	#popregs_
04c74                 | _isfunction_ret
04c74     2D 00 64 FD | 	ret
04c78                 | 
04c78                 | ' 
04c78                 | ' function isname(s as string) as boolean
04c78                 | _isname
04c78     0D 4A 05 F6 | 	mov	COUNT_, #13
04c7c     A8 00 A0 FD | 	call	#pushregs_
04c80     09 1F 02 F6 | 	mov	local01, arg01
04c84     09 21 02 F6 | 	mov	local02, arg01
04c88     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04c8c                 | LR__0390
04c8c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04c90     01 20 06 51 |  if_ne	add	local02, #1
04c94     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04c98                 | LR__0391
04c98     09 21 82 F1 | 	sub	local02, arg01
04c9c     10 FB 01 F6 | 	mov	result1, local02
04ca0     FD 22 0A F6 | 	mov	local03, result1 wz
04ca4     00 FA 05 A6 |  if_e	mov	result1, #0
04ca8     34 02 90 AD |  if_e	jmp	#LR__0403
04cac     0F 13 02 F6 | 	mov	arg01, local01
04cb0     01 14 06 F6 | 	mov	arg02, #1
04cb4     01 16 06 F6 | 	mov	arg03, #1
04cb8     D8 B9 B1 FD | 	call	#__system__Mid_S
04cbc     FD 24 02 F6 | 	mov	local04, result1
04cc0                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04cc0     6F 01 00 FF 
04cc4     CA 15 06 F6 | 	mov	arg02, ##@LR__4995
04cc8     12 13 02 F6 | 	mov	arg01, local04
04ccc     90 98 B1 FD | 	call	#__system___string_cmp
04cd0     00 FA 55 F2 | 	cmps	result1, #0 wc
04cd4     18 00 90 CD |  if_b	jmp	#LR__0392
04cd8     6F 01 00 FF 
04cdc     CC 15 06 F6 | 	mov	arg02, ##@LR__4996
04ce0     12 13 02 F6 | 	mov	arg01, local04
04ce4     78 98 B1 FD | 	call	#__system___string_cmp
04ce8     01 FA 55 F2 | 	cmps	result1, #1 wc
04cec     1C 00 90 CD |  if_b	jmp	#LR__0393
04cf0                 | LR__0392
04cf0     6F 01 00 FF 
04cf4     CE 15 06 F6 | 	mov	arg02, ##@LR__4997
04cf8     12 13 02 F6 | 	mov	arg01, local04
04cfc     60 98 B1 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     00 FA 05 56 |  if_ne	mov	result1, #0
04d08     D4 01 90 5D |  if_ne	jmp	#LR__0403
04d0c                 | LR__0393
04d0c                 | ' if l>2 then 
04d0c     03 22 56 F2 | 	cmps	local03, #3 wc
04d10     C8 01 90 CD |  if_b	jmp	#LR__0402
04d14                 | '   for i=2 to l
04d14     02 26 06 F6 | 	mov	local05, #2
04d18     11 29 02 F6 | 	mov	local06, local03
04d1c     01 28 06 F1 | 	add	local06, #1
04d20                 | LR__0394
04d20     14 27 52 F2 | 	cmps	local05, local06 wc
04d24     B4 01 90 3D |  if_ae	jmp	#LR__0401
04d28     0F 13 02 F6 | 	mov	arg01, local01
04d2c     13 15 02 F6 | 	mov	arg02, local05
04d30     01 16 06 F6 | 	mov	arg03, #1
04d34     5C B9 B1 FD | 	call	#__system__Mid_S
04d38     FD 24 02 F6 | 	mov	local04, result1
04d3c                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04d3c     11 27 52 F2 | 	cmps	local05, local03 wc
04d40     9C 00 90 3D |  if_ae	jmp	#LR__0397
04d44     6F 01 00 FF 
04d48     D0 15 06 F6 | 	mov	arg02, ##@LR__4998
04d4c     12 13 02 F6 | 	mov	arg01, local04
04d50     0C 98 B1 FD | 	call	#__system___string_cmp
04d54     00 FA 55 F2 | 	cmps	result1, #0 wc
04d58     18 00 90 CD |  if_b	jmp	#LR__0395
04d5c     6F 01 00 FF 
04d60     D2 15 06 F6 | 	mov	arg02, ##@LR__4999
04d64     12 13 02 F6 | 	mov	arg01, local04
04d68     F4 97 B1 FD | 	call	#__system___string_cmp
04d6c     01 FA 55 F2 | 	cmps	result1, #1 wc
04d70     6C 00 90 CD |  if_b	jmp	#LR__0397
04d74                 | LR__0395
04d74     6F 01 00 FF 
04d78     D4 15 06 F6 | 	mov	arg02, ##@LR__5000
04d7c     12 13 02 F6 | 	mov	arg01, local04
04d80     DC 97 B1 FD | 	call	#__system___string_cmp
04d84     00 FA 55 F2 | 	cmps	result1, #0 wc
04d88     18 00 90 CD |  if_b	jmp	#LR__0396
04d8c     6F 01 00 FF 
04d90     D6 15 06 F6 | 	mov	arg02, ##@LR__5001
04d94     12 13 02 F6 | 	mov	arg01, local04
04d98     C4 97 B1 FD | 	call	#__system___string_cmp
04d9c     01 FA 55 F2 | 	cmps	result1, #1 wc
04da0     3C 00 90 CD |  if_b	jmp	#LR__0397
04da4                 | LR__0396
04da4     6F 01 00 FF 
04da8     D8 2B 06 F6 | 	mov	local07, ##@LR__5002
04dac     12 13 02 F6 | 	mov	arg01, local04
04db0     15 15 02 F6 | 	mov	arg02, local07
04db4     A8 97 B1 FD | 	call	#__system___string_cmp
04db8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dbc     20 00 90 AD |  if_e	jmp	#LR__0397
04dc0     6F 01 00 FF 
04dc4     DA 2D 06 F6 | 	mov	local08, ##@LR__5003
04dc8     12 13 02 F6 | 	mov	arg01, local04
04dcc     16 15 02 F6 | 	mov	arg02, local08
04dd0     8C 97 B1 FD | 	call	#__system___string_cmp
04dd4     FD 2E 0A F6 | 	mov	local09, result1 wz
04dd8     00 FA 05 56 |  if_ne	mov	result1, #0
04ddc     00 01 90 5D |  if_ne	jmp	#LR__0403
04de0                 | LR__0397
04de0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04de0     11 27 0A F2 | 	cmp	local05, local03 wz
04de4     EC 00 90 5D |  if_ne	jmp	#LR__0400
04de8     6F 01 00 FF 
04dec     DC 31 06 F6 | 	mov	local10, ##@LR__5004
04df0     12 13 02 F6 | 	mov	arg01, local04
04df4     18 15 02 F6 | 	mov	arg02, local10
04df8     64 97 B1 FD | 	call	#__system___string_cmp
04dfc     FD 32 02 F6 | 	mov	local11, result1
04e00     00 32 56 F2 | 	cmps	local11, #0 wc
04e04     1C 00 90 CD |  if_b	jmp	#LR__0398
04e08     6F 01 00 FF 
04e0c     DE 15 06 F6 | 	mov	arg02, ##@LR__5005
04e10     12 13 02 F6 | 	mov	arg01, local04
04e14     48 97 B1 FD | 	call	#__system___string_cmp
04e18     FD 30 02 F6 | 	mov	local10, result1
04e1c     01 30 56 F2 | 	cmps	local10, #1 wc
04e20     B0 00 90 CD |  if_b	jmp	#LR__0400
04e24                 | LR__0398
04e24     6F 01 00 FF 
04e28     E0 15 06 F6 | 	mov	arg02, ##@LR__5006
04e2c     12 13 02 F6 | 	mov	arg01, local04
04e30     2C 97 B1 FD | 	call	#__system___string_cmp
04e34     00 FA 55 F2 | 	cmps	result1, #0 wc
04e38     1C 00 90 CD |  if_b	jmp	#LR__0399
04e3c     6F 01 00 FF 
04e40     E2 2F 06 F6 | 	mov	local09, ##@LR__5007
04e44     12 13 02 F6 | 	mov	arg01, local04
04e48     17 15 02 F6 | 	mov	arg02, local09
04e4c     10 97 B1 FD | 	call	#__system___string_cmp
04e50     01 FA 55 F2 | 	cmps	result1, #1 wc
04e54     7C 00 90 CD |  if_b	jmp	#LR__0400
04e58                 | LR__0399
04e58     6F 01 00 FF 
04e5c     E4 2F 06 F6 | 	mov	local09, ##@LR__5008
04e60     12 13 02 F6 | 	mov	arg01, local04
04e64     17 15 02 F6 | 	mov	arg02, local09
04e68     F4 96 B1 FD | 	call	#__system___string_cmp
04e6c     00 FA 4D F2 | 	cmps	result1, #0 wz
04e70     60 00 90 AD |  if_e	jmp	#LR__0400
04e74     6F 01 00 FF 
04e78     E6 2D 06 F6 | 	mov	local08, ##@LR__5009
04e7c     12 13 02 F6 | 	mov	arg01, local04
04e80     16 15 02 F6 | 	mov	arg02, local08
04e84     D8 96 B1 FD | 	call	#__system___string_cmp
04e88     FD 2E 0A F6 | 	mov	local09, result1 wz
04e8c     44 00 90 AD |  if_e	jmp	#LR__0400
04e90     6F 01 00 FF 
04e94     E8 35 06 F6 | 	mov	local12, ##@LR__5010
04e98     1A 2D 02 F6 | 	mov	local08, local12
04e9c     12 13 02 F6 | 	mov	arg01, local04
04ea0     16 15 02 F6 | 	mov	arg02, local08
04ea4     B8 96 B1 FD | 	call	#__system___string_cmp
04ea8     FD 2A 0A F6 | 	mov	local07, result1 wz
04eac     24 00 90 AD |  if_e	jmp	#LR__0400
04eb0     6F 01 00 FF 
04eb4     EA 37 06 F6 | 	mov	local13, ##@LR__5011
04eb8     1B 35 02 F6 | 	mov	local12, local13
04ebc     12 13 02 F6 | 	mov	arg01, local04
04ec0     1A 15 02 F6 | 	mov	arg02, local12
04ec4     98 96 B1 FD | 	call	#__system___string_cmp
04ec8     FD 2C 0A F6 | 	mov	local08, result1 wz
04ecc     00 FA 05 56 |  if_ne	mov	result1, #0
04ed0     0C 00 90 5D |  if_ne	jmp	#LR__0403
04ed4                 | LR__0400
04ed4     01 26 06 F1 | 	add	local05, #1
04ed8     44 FE 9F FD | 	jmp	#LR__0394
04edc                 | LR__0401
04edc                 | LR__0402
04edc                 | ' return true
04edc     01 FA 65 F6 | 	neg	result1, #1
04ee0                 | LR__0403
04ee0     A7 F0 03 F6 | 	mov	ptra, fp
04ee4     B2 00 A0 FD | 	call	#popregs_
04ee8                 | _isname_ret
04ee8     2D 00 64 FD | 	ret
04eec                 | 
04eec                 | ' 
04eec                 | ' function isnum(s as string) as boolean
04eec                 | _isnum
04eec     0D 4A 05 F6 | 	mov	COUNT_, #13
04ef0     A8 00 A0 FD | 	call	#pushregs_
04ef4     09 1F 02 F6 | 	mov	local01, arg01
04ef8     00 20 06 F6 | 	mov	local02, #0
04efc     00 22 06 F6 | 	mov	local03, #0
04f00     0F 13 02 F6 | 	mov	arg01, local01
04f04     09 25 02 F6 | 	mov	local04, arg01
04f08     97 06 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
04f0c                 | LR__0410
04f0c     12 FB C9 FA | 	rdbyte	result1, local04 wz
04f10     01 24 06 51 |  if_ne	add	local04, #1
04f14     F4 FF 9F 5D |  if_ne	jmp	#LR__0410
04f18                 | LR__0411
04f18     09 25 82 F1 | 	sub	local04, arg01
04f1c     12 FB 01 F6 | 	mov	result1, local04
04f20     FD 26 0A F6 | 	mov	local05, result1 wz
04f24     00 FA 05 A6 |  if_e	mov	result1, #0
04f28     8C 02 90 AD |  if_e	jmp	#LR__0422
04f2c     0F 13 02 F6 | 	mov	arg01, local01
04f30     01 14 06 F6 | 	mov	arg02, #1
04f34     01 16 06 F6 | 	mov	arg03, #1
04f38     58 B7 B1 FD | 	call	#__system__Mid_S
04f3c     FD 28 02 F6 | 	mov	local06, result1
04f40                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04f40     6F 01 00 FF 
04f44     EC 15 06 F6 | 	mov	arg02, ##@LR__5012
04f48     14 13 02 F6 | 	mov	arg01, local06
04f4c     10 96 B1 FD | 	call	#__system___string_cmp
04f50     00 FA 55 F2 | 	cmps	result1, #0 wc
04f54     18 00 90 CD |  if_b	jmp	#LR__0412
04f58     6F 01 00 FF 
04f5c     EE 15 06 F6 | 	mov	arg02, ##@LR__5013
04f60     14 13 02 F6 | 	mov	arg01, local06
04f64     F8 95 B1 FD | 	call	#__system___string_cmp
04f68     01 FA 55 F2 | 	cmps	result1, #1 wc
04f6c     78 00 90 CD |  if_b	jmp	#LR__0413
04f70                 | LR__0412
04f70     6F 01 00 FF 
04f74     F0 15 06 F6 | 	mov	arg02, ##@LR__5014
04f78     14 13 02 F6 | 	mov	arg01, local06
04f7c     E0 95 B1 FD | 	call	#__system___string_cmp
04f80     00 FA 0D F2 | 	cmp	result1, #0 wz
04f84     60 00 90 AD |  if_e	jmp	#LR__0413
04f88     6F 01 00 FF 
04f8c     F2 2B 06 F6 | 	mov	local07, ##@LR__5015
04f90     14 13 02 F6 | 	mov	arg01, local06
04f94     15 15 02 F6 | 	mov	arg02, local07
04f98     C4 95 B1 FD | 	call	#__system___string_cmp
04f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa0     44 00 90 AD |  if_e	jmp	#LR__0413
04fa4     6F 01 00 FF 
04fa8     F4 2D 06 F6 | 	mov	local08, ##@LR__5016
04fac     16 2B 02 F6 | 	mov	local07, local08
04fb0     14 13 02 F6 | 	mov	arg01, local06
04fb4     15 15 02 F6 | 	mov	arg02, local07
04fb8     A4 95 B1 FD | 	call	#__system___string_cmp
04fbc     00 FA 4D F2 | 	cmps	result1, #0 wz
04fc0     24 00 90 AD |  if_e	jmp	#LR__0413
04fc4     6F 01 00 FF 
04fc8     F6 2F 06 F6 | 	mov	local09, ##@LR__5017
04fcc     17 2D 02 F6 | 	mov	local08, local09
04fd0     14 13 02 F6 | 	mov	arg01, local06
04fd4     16 15 02 F6 | 	mov	arg02, local08
04fd8     84 95 B1 FD | 	call	#__system___string_cmp
04fdc     FD 2A 0A F6 | 	mov	local07, result1 wz
04fe0     00 FA 05 56 |  if_ne	mov	result1, #0
04fe4     D0 01 90 5D |  if_ne	jmp	#LR__0422
04fe8                 | LR__0413
04fe8                 | ' if m$="." then ds=1
04fe8     6F 01 00 FF 
04fec     F8 15 06 F6 | 	mov	arg02, ##@LR__5018
04ff0     14 13 02 F6 | 	mov	arg01, local06
04ff4     68 95 B1 FD | 	call	#__system___string_cmp
04ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ffc     01 20 06 A6 |  if_e	mov	local02, #1
05000                 | ' if l>1 then 
05000     02 26 56 F2 | 	cmps	local05, #2 wc
05004     AC 01 90 CD |  if_b	jmp	#LR__0421
05008                 | '   for i=2 to l
05008     02 30 06 F6 | 	mov	local10, #2
0500c     13 33 02 F6 | 	mov	local11, local05
05010     01 32 06 F1 | 	add	local11, #1
05014                 | LR__0414
05014     19 31 52 F2 | 	cmps	local10, local11 wc
05018     98 01 90 3D |  if_ae	jmp	#LR__0420
0501c     0F 13 02 F6 | 	mov	arg01, local01
05020     18 15 02 F6 | 	mov	arg02, local10
05024     01 16 06 F6 | 	mov	arg03, #1
05028     68 B6 B1 FD | 	call	#__system__Mid_S
0502c     FD 28 02 F6 | 	mov	local06, result1
05030                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
05030     6F 01 00 FF 
05034     FA 15 06 F6 | 	mov	arg02, ##@LR__5019
05038     14 13 02 F6 | 	mov	arg01, local06
0503c     20 95 B1 FD | 	call	#__system___string_cmp
05040     00 FA 55 F2 | 	cmps	result1, #0 wc
05044     18 00 90 CD |  if_b	jmp	#LR__0415
05048     6F 01 00 FF 
0504c     FC 15 06 F6 | 	mov	arg02, ##@LR__5020
05050     14 13 02 F6 | 	mov	arg01, local06
05054     08 95 B1 FD | 	call	#__system___string_cmp
05058     01 FA 55 F2 | 	cmps	result1, #1 wc
0505c     98 00 90 CD |  if_b	jmp	#LR__0416
05060                 | LR__0415
05060     6F 01 00 FF 
05064     FE 15 06 F6 | 	mov	arg02, ##@LR__5021
05068     14 13 02 F6 | 	mov	arg01, local06
0506c     F0 94 B1 FD | 	call	#__system___string_cmp
05070     00 FA 0D F2 | 	cmp	result1, #0 wz
05074     80 00 90 AD |  if_e	jmp	#LR__0416
05078     70 01 00 FF 
0507c     00 2A 06 F6 | 	mov	local07, ##@LR__5022
05080     14 13 02 F6 | 	mov	arg01, local06
05084     15 15 02 F6 | 	mov	arg02, local07
05088     D4 94 B1 FD | 	call	#__system___string_cmp
0508c     00 FA 4D F2 | 	cmps	result1, #0 wz
05090     64 00 90 AD |  if_e	jmp	#LR__0416
05094     70 01 00 FF 
05098     02 2C 06 F6 | 	mov	local08, ##@LR__5023
0509c     16 2B 02 F6 | 	mov	local07, local08
050a0     14 13 02 F6 | 	mov	arg01, local06
050a4     15 15 02 F6 | 	mov	arg02, local07
050a8     B4 94 B1 FD | 	call	#__system___string_cmp
050ac     FD 34 0A F6 | 	mov	local12, result1 wz
050b0     44 00 90 AD |  if_e	jmp	#LR__0416
050b4     70 01 00 FF 
050b8     04 2E 06 F6 | 	mov	local09, ##@LR__5024
050bc     17 2D 02 F6 | 	mov	local08, local09
050c0     14 13 02 F6 | 	mov	arg01, local06
050c4     16 15 02 F6 | 	mov	arg02, local08
050c8     94 94 B1 FD | 	call	#__system___string_cmp
050cc     FD 2A 0A F6 | 	mov	local07, result1 wz
050d0     24 00 90 AD |  if_e	jmp	#LR__0416
050d4     70 01 00 FF 
050d8     06 36 06 F6 | 	mov	local13, ##@LR__5025
050dc     1B 2F 02 F6 | 	mov	local09, local13
050e0     14 13 02 F6 | 	mov	arg01, local06
050e4     17 15 02 F6 | 	mov	arg02, local09
050e8     74 94 B1 FD | 	call	#__system___string_cmp
050ec     FD 2C 0A F6 | 	mov	local08, result1 wz
050f0     00 FA 05 56 |  if_ne	mov	result1, #0
050f4     C0 00 90 5D |  if_ne	jmp	#LR__0422
050f8                 | LR__0416
050f8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
050f8     70 01 00 FF 
050fc     08 14 06 F6 | 	mov	arg02, ##@LR__5026
05100     14 13 02 F6 | 	mov	arg01, local06
05104     58 94 B1 FD | 	call	#__system___string_cmp
05108     00 FA 0D F2 | 	cmp	result1, #0 wz
0510c     38 00 90 5D |  if_ne	jmp	#LR__0417
05110     18 15 02 F6 | 	mov	arg02, local10
05114     01 14 86 F1 | 	sub	arg02, #1
05118     0F 13 02 F6 | 	mov	arg01, local01
0511c     01 16 06 F6 | 	mov	arg03, #1
05120     70 B5 B1 FD | 	call	#__system__Mid_S
05124     FD 12 02 F6 | 	mov	arg01, result1
05128     60 B7 B1 FD | 	call	#__system__LCase_S
0512c     FD 12 02 F6 | 	mov	arg01, result1
05130     70 01 00 FF 
05134     0A 14 06 F6 | 	mov	arg02, ##@LR__5027
05138     24 94 B1 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     00 FA 05 56 |  if_ne	mov	result1, #0
05144     70 00 90 5D |  if_ne	jmp	#LR__0422
05148                 | LR__0417
05148                 | '     if m$="." then ds+=1: if ds>1 then return false
05148     70 01 00 FF 
0514c     0C 14 06 F6 | 	mov	arg02, ##@LR__5028
05150     14 13 02 F6 | 	mov	arg01, local06
05154     08 94 B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     01 20 06 A1 |  if_e	add	local02, #1
05160     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05164     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05168     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0422
0516c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0516c     70 01 00 FF 
05170     0E 14 06 F6 | 	mov	arg02, ##@LR__5029
05174     14 13 02 F6 | 	mov	arg01, local06
05178     E4 93 B1 FD | 	call	#__system___string_cmp
0517c     00 FA 4D F2 | 	cmps	result1, #0 wz
05180     18 00 90 AD |  if_e	jmp	#LR__0418
05184     70 01 00 FF 
05188     10 14 06 F6 | 	mov	arg02, ##@LR__5030
0518c     14 13 02 F6 | 	mov	arg01, local06
05190     CC 93 B1 FD | 	call	#__system___string_cmp
05194     00 FA 4D F2 | 	cmps	result1, #0 wz
05198     10 00 90 5D |  if_ne	jmp	#LR__0419
0519c                 | LR__0418
0519c     01 22 06 F1 | 	add	local03, #1
051a0     02 22 56 F2 | 	cmps	local03, #2 wc
051a4     00 FA 05 36 |  if_ae	mov	result1, #0
051a8     0C 00 90 3D |  if_ae	jmp	#LR__0422
051ac                 | LR__0419
051ac     01 30 06 F1 | 	add	local10, #1
051b0     60 FE 9F FD | 	jmp	#LR__0414
051b4                 | LR__0420
051b4                 | LR__0421
051b4                 | ' return true
051b4     01 FA 65 F6 | 	neg	result1, #1
051b8                 | LR__0422
051b8     A7 F0 03 F6 | 	mov	ptra, fp
051bc     B2 00 A0 FD | 	call	#popregs_
051c0                 | _isnum_ret
051c0     2D 00 64 FD | 	ret
051c4                 | 
051c4                 | '   
051c4                 | ' function isint(s as string) as boolean
051c4                 | _isint
051c4     05 4A 05 F6 | 	mov	COUNT_, #5
051c8     A8 00 A0 FD | 	call	#pushregs_
051cc     09 1F 02 F6 | 	mov	local01, arg01
051d0     09 21 02 F6 | 	mov	local02, arg01
051d4     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
051d8                 | LR__0430
051d8     10 FB C9 FA | 	rdbyte	result1, local02 wz
051dc     01 20 06 51 |  if_ne	add	local02, #1
051e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
051e4                 | LR__0431
051e4     09 21 82 F1 | 	sub	local02, arg01
051e8     10 FB 01 F6 | 	mov	result1, local02
051ec     FD 20 0A F6 | 	mov	local02, result1 wz
051f0     00 FA 05 A6 |  if_e	mov	result1, #0
051f4     18 01 90 AD |  if_e	jmp	#LR__0439
051f8     0F 13 02 F6 | 	mov	arg01, local01
051fc     01 14 06 F6 | 	mov	arg02, #1
05200     01 16 06 F6 | 	mov	arg03, #1
05204     8C B4 B1 FD | 	call	#__system__Mid_S
05208     FD 22 02 F6 | 	mov	local03, result1
0520c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0520c     70 01 00 FF 
05210     12 14 06 F6 | 	mov	arg02, ##@LR__5031
05214     11 13 02 F6 | 	mov	arg01, local03
05218     44 93 B1 FD | 	call	#__system___string_cmp
0521c     00 FA 55 F2 | 	cmps	result1, #0 wc
05220     18 00 90 CD |  if_b	jmp	#LR__0432
05224     70 01 00 FF 
05228     14 14 06 F6 | 	mov	arg02, ##@LR__5032
0522c     11 13 02 F6 | 	mov	arg01, local03
05230     2C 93 B1 FD | 	call	#__system___string_cmp
05234     01 FA 55 F2 | 	cmps	result1, #1 wc
05238     4C 00 90 CD |  if_b	jmp	#LR__0433
0523c                 | LR__0432
0523c     70 01 00 FF 
05240     16 14 06 F6 | 	mov	arg02, ##@LR__5033
05244     11 13 02 F6 | 	mov	arg01, local03
05248     14 93 B1 FD | 	call	#__system___string_cmp
0524c     00 FA 0D F2 | 	cmp	result1, #0 wz
05250     34 00 90 AD |  if_e	jmp	#LR__0433
05254     70 01 00 FF 
05258     18 14 06 F6 | 	mov	arg02, ##@LR__5034
0525c     11 13 02 F6 | 	mov	arg01, local03
05260     FC 92 B1 FD | 	call	#__system___string_cmp
05264     00 FA 0D F2 | 	cmp	result1, #0 wz
05268     1C 00 90 AD |  if_e	jmp	#LR__0433
0526c     70 01 00 FF 
05270     1A 14 06 F6 | 	mov	arg02, ##@LR__5035
05274     11 13 02 F6 | 	mov	arg01, local03
05278     E4 92 B1 FD | 	call	#__system___string_cmp
0527c     00 FA 0D F2 | 	cmp	result1, #0 wz
05280     00 FA 05 56 |  if_ne	mov	result1, #0
05284     88 00 90 5D |  if_ne	jmp	#LR__0439
05288                 | LR__0433
05288                 | ' 
05288                 | ' if l>1 then 
05288     02 20 56 F2 | 	cmps	local02, #2 wc
0528c     7C 00 90 CD |  if_b	jmp	#LR__0438
05290                 | '   for i=2 to l
05290     02 24 06 F6 | 	mov	local04, #2
05294     10 27 02 F6 | 	mov	local05, local02
05298     01 26 06 F1 | 	add	local05, #1
0529c                 | LR__0434
0529c     13 25 52 F2 | 	cmps	local04, local05 wc
052a0     68 00 90 3D |  if_ae	jmp	#LR__0437
052a4     0F 13 02 F6 | 	mov	arg01, local01
052a8     12 15 02 F6 | 	mov	arg02, local04
052ac     01 16 06 F6 | 	mov	arg03, #1
052b0     E0 B3 B1 FD | 	call	#__system__Mid_S
052b4     FD 22 02 F6 | 	mov	local03, result1
052b8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
052b8     70 01 00 FF 
052bc     1C 14 06 F6 | 	mov	arg02, ##@LR__5036
052c0     11 13 02 F6 | 	mov	arg01, local03
052c4     98 92 B1 FD | 	call	#__system___string_cmp
052c8     00 FA 55 F2 | 	cmps	result1, #0 wc
052cc     18 00 90 CD |  if_b	jmp	#LR__0435
052d0     70 01 00 FF 
052d4     1E 14 06 F6 | 	mov	arg02, ##@LR__5037
052d8     11 13 02 F6 | 	mov	arg01, local03
052dc     80 92 B1 FD | 	call	#__system___string_cmp
052e0     01 FA 55 F2 | 	cmps	result1, #1 wc
052e4     1C 00 90 CD |  if_b	jmp	#LR__0436
052e8                 | LR__0435
052e8     70 01 00 FF 
052ec     20 14 06 F6 | 	mov	arg02, ##@LR__5038
052f0     11 13 02 F6 | 	mov	arg01, local03
052f4     68 92 B1 FD | 	call	#__system___string_cmp
052f8     00 FA 0D F2 | 	cmp	result1, #0 wz
052fc     00 FA 05 56 |  if_ne	mov	result1, #0
05300     0C 00 90 5D |  if_ne	jmp	#LR__0439
05304                 | LR__0436
05304     01 24 06 F1 | 	add	local04, #1
05308     90 FF 9F FD | 	jmp	#LR__0434
0530c                 | LR__0437
0530c                 | LR__0438
0530c                 | ' return true
0530c     01 FA 65 F6 | 	neg	result1, #1
05310                 | LR__0439
05310     A7 F0 03 F6 | 	mov	ptra, fp
05314     B2 00 A0 FD | 	call	#popregs_
05318                 | _isint_ret
05318     2D 00 64 FD | 	ret
0531c                 | 
0531c                 | ' 
0531c                 | ' function isdec(s as string) as boolean
0531c                 | _isdec
0531c     05 4A 05 F6 | 	mov	COUNT_, #5
05320     A8 00 A0 FD | 	call	#pushregs_
05324     09 1F 02 F6 | 	mov	local01, arg01
05328     09 21 02 F6 | 	mov	local02, arg01
0532c     97 06 48 FB | 	callpa	#(@LR__0441-@LR__0440)>>2,fcache_load_ptr_
05330                 | LR__0440
05330     10 FB C9 FA | 	rdbyte	result1, local02 wz
05334     01 20 06 51 |  if_ne	add	local02, #1
05338     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
0533c                 | LR__0441
0533c     09 21 82 F1 | 	sub	local02, arg01
05340     10 FB 01 F6 | 	mov	result1, local02
05344     FD 20 0A F6 | 	mov	local02, result1 wz
05348     00 FA 05 A6 |  if_e	mov	result1, #0
0534c     80 00 90 AD |  if_e	jmp	#LR__0446
05350                 | ' for i=1 to l
05350     01 22 06 F6 | 	mov	local03, #1
05354     10 25 02 F6 | 	mov	local04, local02
05358     01 24 06 F1 | 	add	local04, #1
0535c                 | LR__0442
0535c     12 23 52 F2 | 	cmps	local03, local04 wc
05360     68 00 90 3D |  if_ae	jmp	#LR__0445
05364     0F 13 02 F6 | 	mov	arg01, local01
05368     11 15 02 F6 | 	mov	arg02, local03
0536c     01 16 06 F6 | 	mov	arg03, #1
05370     20 B3 B1 FD | 	call	#__system__Mid_S
05374     FD 26 02 F6 | 	mov	local05, result1
05378                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05378     70 01 00 FF 
0537c     22 14 06 F6 | 	mov	arg02, ##@LR__5039
05380     13 13 02 F6 | 	mov	arg01, local05
05384     D8 91 B1 FD | 	call	#__system___string_cmp
05388     00 FA 55 F2 | 	cmps	result1, #0 wc
0538c     18 00 90 CD |  if_b	jmp	#LR__0443
05390     70 01 00 FF 
05394     24 14 06 F6 | 	mov	arg02, ##@LR__5040
05398     13 13 02 F6 | 	mov	arg01, local05
0539c     C0 91 B1 FD | 	call	#__system___string_cmp
053a0     01 FA 55 F2 | 	cmps	result1, #1 wc
053a4     1C 00 90 CD |  if_b	jmp	#LR__0444
053a8                 | LR__0443
053a8     70 01 00 FF 
053ac     26 14 06 F6 | 	mov	arg02, ##@LR__5041
053b0     13 13 02 F6 | 	mov	arg01, local05
053b4     A8 91 B1 FD | 	call	#__system___string_cmp
053b8     00 FA 0D F2 | 	cmp	result1, #0 wz
053bc     00 FA 05 56 |  if_ne	mov	result1, #0
053c0     0C 00 90 5D |  if_ne	jmp	#LR__0446
053c4                 | LR__0444
053c4     01 22 06 F1 | 	add	local03, #1
053c8     90 FF 9F FD | 	jmp	#LR__0442
053cc                 | LR__0445
053cc                 | ' return true
053cc     01 FA 65 F6 | 	neg	result1, #1
053d0                 | LR__0446
053d0     A7 F0 03 F6 | 	mov	ptra, fp
053d4     B2 00 A0 FD | 	call	#popregs_
053d8                 | _isdec_ret
053d8     2D 00 64 FD | 	ret
053dc                 | 
053dc                 | ' 
053dc                 | ' function isstring(s as string) as boolean
053dc                 | _isstring
053dc     01 4A 05 F6 | 	mov	COUNT_, #1
053e0     A8 00 A0 FD | 	call	#pushregs_
053e4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
053e4     09 1F 02 F6 | 	mov	local01, arg01
053e8     01 14 06 F6 | 	mov	arg02, #1
053ec     8C B1 B1 FD | 	call	#__system__Left_S
053f0     FD 12 02 F6 | 	mov	arg01, result1
053f4     70 01 00 FF 
053f8     28 14 06 F6 | 	mov	arg02, ##@LR__5042
053fc     60 91 B1 FD | 	call	#__system___string_cmp
05400     00 FA 4D F2 | 	cmps	result1, #0 wz
05404     28 00 90 5D |  if_ne	jmp	#LR__0450
05408     0F 13 02 F6 | 	mov	arg01, local01
0540c     01 14 06 F6 | 	mov	arg02, #1
05410     F0 B1 B1 FD | 	call	#__system__Right_S
05414     FD 12 02 F6 | 	mov	arg01, result1
05418     70 01 00 FF 
0541c     2A 14 06 F6 | 	mov	arg02, ##@LR__5043
05420     3C 91 B1 FD | 	call	#__system___string_cmp
05424     00 FA 4D F2 | 	cmps	result1, #0 wz
05428     01 FA 65 A6 |  if_e	neg	result1, #1
0542c     04 00 90 AD |  if_e	jmp	#LR__0451
05430                 | LR__0450
05430     00 FA 05 F6 | 	mov	result1, #0
05434                 | LR__0451
05434     A7 F0 03 F6 | 	mov	ptra, fp
05438     B2 00 A0 FD | 	call	#popregs_
0543c                 | _isstring_ret
0543c     2D 00 64 FD | 	ret
05440                 | 
05440                 | ' 
05440                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
05440                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05440                 | ' 
05440                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05440                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
05440                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05440                 | ' 
05440                 | ' '----- delete a line from a program
05440                 | ' 
05440                 | ' function deleteline(aline as ulong) as integer
05440                 | _deleteline
05440     03 4A 05 F6 | 	mov	COUNT_, #3
05444     A8 00 A0 FD | 	call	#pushregs_
05448     2C F0 07 F1 | 	add	ptra, #44
0544c     04 4E 05 F1 | 	add	fp, #4
05450     A7 12 62 FC | 	wrlong	arg01, fp
05454     6A 00 00 FF 
05458     74 E4 05 F1 | 	add	objptr, ##54388
0545c     F2 1E 02 FB | 	rdlong	local01, objptr
05460     0C 4E 05 F1 | 	add	fp, #12
05464     A7 1E 62 FC | 	wrlong	local01, fp
05468     10 4E 85 F1 | 	sub	fp, #16
0546c                 | ' 
0546c                 | ' 
0546c                 | ' searchptr=programstart
0546c                 | ' 
0546c                 | ' do
0546c     5E 00 00 FF 
05470     A8 E5 85 F1 | 	sub	objptr, ##48552
05474                 | LR__0460
05474     14 4E 05 F1 | 	add	fp, #20
05478     A7 12 02 F6 | 	mov	arg01, fp
0547c     04 4E 85 F1 | 	sub	fp, #4
05480     A7 14 02 FB | 	rdlong	arg02, fp
05484     10 4E 85 F1 | 	sub	fp, #16
05488     18 16 06 F6 | 	mov	arg03, #24
0548c     84 84 B1 FD | 	call	#_psram_spin2_read1
05490     10 4E 05 F1 | 	add	fp, #16
05494     A7 1E 02 FB | 	rdlong	local01, fp
05498     08 4E 85 F1 | 	sub	fp, #8
0549c     A7 1E 62 FC | 	wrlong	local01, fp
054a0     20 4E 05 F1 | 	add	fp, #32
054a4     A7 1E 02 FB | 	rdlong	local01, fp
054a8     18 4E 85 F1 | 	sub	fp, #24
054ac     A7 1E 62 FC | 	wrlong	local01, fp
054b0     04 4E 05 F1 | 	add	fp, #4
054b4     A7 1E 02 FB | 	rdlong	local01, fp
054b8     10 4E 85 F1 | 	sub	fp, #16
054bc     A7 16 02 FB | 	rdlong	arg03, fp
054c0     04 4E 85 F1 | 	sub	fp, #4
054c4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
054c8     28 4E 05 C1 |  if_b	add	fp, #40
054cc     A7 20 02 CB |  if_b	rdlong	local02, fp
054d0     28 4E 85 C1 |  if_b	sub	fp, #40
054d4     FF FF 3F CF 
054d8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
054dc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0460
054e0     0B 00 00 FF 
054e4     CC E4 85 F1 | 	sub	objptr, ##5836
054e8                 | ' 
054e8                 | ' 
054e8                 | ' if header(0)<>aline then return -1
054e8     14 4E 05 F1 | 	add	fp, #20
054ec     A7 1E 02 FB | 	rdlong	local01, fp
054f0     10 4E 85 F1 | 	sub	fp, #16
054f4     A7 22 02 FB | 	rdlong	local03, fp
054f8     04 4E 85 F1 | 	sub	fp, #4
054fc     11 1F 0A F2 | 	cmp	local01, local03 wz
05500     01 FA 65 56 |  if_ne	neg	result1, #1
05504     C8 02 90 5D |  if_ne	jmp	#LR__0466
05508     08 4E 05 F1 | 	add	fp, #8
0550c     A7 12 02 FB | 	rdlong	arg01, fp
05510     08 4E 85 F1 | 	sub	fp, #8
05514     01 14 66 F6 | 	neg	arg02, #1
05518     20 4D B1 FD | 	call	#_pslpoke
0551c                 | ' 
0551c                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
0551c                 | ' 
0551c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
0551c     28 4E 05 F1 | 	add	fp, #40
05520     A7 1E 02 FB | 	rdlong	local01, fp
05524     28 4E 85 F1 | 	sub	fp, #40
05528     FF FF 3F FF 
0552c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05530     24 4E 05 A1 |  if_e	add	fp, #36
05534     A7 22 02 AB |  if_e	rdlong	local03, fp
05538     24 4E 85 A1 |  if_e	sub	fp, #36
0553c     FF FF 7F AF 
05540     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
05544     78 00 90 5D |  if_ne	jmp	#LR__0461
05548     6A 00 00 FF 
0554c     74 E4 05 F1 | 	add	objptr, ##54388
05550     F2 00 68 FC | 	wrlong	#0, objptr
05554     07 00 00 FF 
05558     28 E4 85 F1 | 	sub	objptr, ##3624
0555c     F2 00 68 FC | 	wrlong	#0, objptr
05560     07 00 00 FF 
05564     2C E4 05 F1 | 	add	objptr, ##3628
05568     F2 00 68 FC | 	wrlong	#0, objptr
0556c     04 E4 05 F1 | 	add	objptr, #4
05570     FF FF FF FF 
05574     F2 FE 6B FC | 	wrlong	##-1, objptr
05578     6A 00 00 FF 
0557c     7C E4 85 F1 | 	sub	objptr, ##54396
05580     00 12 06 F6 | 	mov	arg01, #0
05584     01 14 66 F6 | 	neg	arg02, #1
05588     B0 4C B1 FD | 	call	#_pslpoke
0558c     10 12 06 F6 | 	mov	arg01, #16
05590     01 14 66 F6 | 	neg	arg02, #1
05594     A4 4C B1 FD | 	call	#_pslpoke
05598     14 12 06 F6 | 	mov	arg01, #20
0559c     1E 14 CE F9 | 	bmask	arg02, #30
055a0     98 4C B1 FD | 	call	#_pslpoke
055a4     79 00 00 FF 
055a8     A0 E5 05 F1 | 	add	objptr, ##62368
055ac     F2 00 68 FC | 	wrlong	#0, objptr
055b0     04 E4 05 F1 | 	add	objptr, #4
055b4     F2 00 68 FC | 	wrlong	#0, objptr
055b8     79 00 00 FF 
055bc     A4 E5 85 F1 | 	sub	objptr, ##62372
055c0                 | LR__0461
055c0                 | ' 
055c0                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
055c0     28 4E 05 F1 | 	add	fp, #40
055c4     A7 1E 02 FB | 	rdlong	local01, fp
055c8     28 4E 85 F1 | 	sub	fp, #40
055cc     FF FF 3F FF 
055d0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
055d4     74 00 90 5D |  if_ne	jmp	#LR__0462
055d8     24 4E 05 F1 | 	add	fp, #36
055dc     A7 22 02 FB | 	rdlong	local03, fp
055e0     24 4E 85 F1 | 	sub	fp, #36
055e4     FF FF 7F FF 
055e8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
055ec     5C 00 90 AD |  if_e	jmp	#LR__0462
055f0     24 4E 05 F1 | 	add	fp, #36
055f4     A7 12 02 FB | 	rdlong	arg01, fp
055f8     24 4E 85 F1 | 	sub	fp, #36
055fc     14 12 06 F1 | 	add	arg01, #20
05600     1E 14 CE F9 | 	bmask	arg02, #30
05604     34 4C B1 FD | 	call	#_pslpoke
05608     24 4E 05 F1 | 	add	fp, #36
0560c     A7 1E 02 FB | 	rdlong	local01, fp
05610     6A 00 00 FF 
05614     7C E4 05 F1 | 	add	objptr, ##54396
05618     F2 1E 62 FC | 	wrlong	local01, objptr
0561c     6A 00 00 FF 
05620     7C E4 85 F1 | 	sub	objptr, ##54396
05624     A7 12 02 FB | 	rdlong	arg01, fp
05628     24 4E 85 F1 | 	sub	fp, #36
0562c     3C 4D B1 FD | 	call	#_pslpeek
05630     6A 00 00 FF 
05634     78 E4 05 F1 | 	add	objptr, ##54392
05638     F2 FA 61 FC | 	wrlong	result1, objptr
0563c     6A 00 00 FF 
05640     78 E4 85 F1 | 	sub	objptr, ##54392
05644                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
05644                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
05644                 | '   lastline=pslpeek(header(4))
05644                 | '   return 0
05644     00 FA 05 F6 | 	mov	result1, #0
05648     84 01 90 FD | 	jmp	#LR__0466
0564c                 | LR__0462
0564c                 | ' 
0564c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
0564c     28 4E 05 F1 | 	add	fp, #40
05650     A7 1E 02 FB | 	rdlong	local01, fp
05654     28 4E 85 F1 | 	sub	fp, #40
05658     FF FF 3F FF 
0565c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05660     58 00 90 AD |  if_e	jmp	#LR__0463
05664     24 4E 05 F1 | 	add	fp, #36
05668     A7 22 02 FB | 	rdlong	local03, fp
0566c     24 4E 85 F1 | 	sub	fp, #36
05670     FF FF 7F FF 
05674     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05678     40 00 90 5D |  if_ne	jmp	#LR__0463
0567c     28 4E 05 F1 | 	add	fp, #40
05680     A7 12 02 FB | 	rdlong	arg01, fp
05684     28 4E 85 F1 | 	sub	fp, #40
05688     10 12 06 F1 | 	add	arg01, #16
0568c     01 14 66 F6 | 	neg	arg02, #1
05690     A8 4B B1 FD | 	call	#_pslpoke
05694     28 4E 05 F1 | 	add	fp, #40
05698     A7 1E 02 FB | 	rdlong	local01, fp
0569c     28 4E 85 F1 | 	sub	fp, #40
056a0     6A 00 00 FF 
056a4     74 E4 05 F1 | 	add	objptr, ##54388
056a8     F2 1E 62 FC | 	wrlong	local01, objptr
056ac     6A 00 00 FF 
056b0     74 E4 85 F1 | 	sub	objptr, ##54388
056b4                 | ' '   print "deleted first line"
056b4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
056b4                 | '   programstart=header(5) ' adjust the program start to point on the first new line
056b4                 | '   return 0
056b4     00 FA 05 F6 | 	mov	result1, #0
056b8     14 01 90 FD | 	jmp	#LR__0466
056bc                 | LR__0463
056bc                 | ' 
056bc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
056bc     28 4E 05 F1 | 	add	fp, #40
056c0     A7 1E 02 FB | 	rdlong	local01, fp
056c4     28 4E 85 F1 | 	sub	fp, #40
056c8     FF FF 3F FF 
056cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
056d0     24 4E 05 51 |  if_ne	add	fp, #36
056d4     A7 22 02 5B |  if_ne	rdlong	local03, fp
056d8     24 4E 85 51 |  if_ne	sub	fp, #36
056dc     FF FF 7F 5F 
056e0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
056e4     40 00 90 AD |  if_e	jmp	#LR__0464
056e8     28 4E 05 F1 | 	add	fp, #40
056ec     A7 12 02 FB | 	rdlong	arg01, fp
056f0     10 12 06 F1 | 	add	arg01, #16
056f4     04 4E 85 F1 | 	sub	fp, #4
056f8     A7 14 02 FB | 	rdlong	arg02, fp
056fc     24 4E 85 F1 | 	sub	fp, #36
05700     38 4B B1 FD | 	call	#_pslpoke
05704     24 4E 05 F1 | 	add	fp, #36
05708     A7 12 02 FB | 	rdlong	arg01, fp
0570c     14 12 06 F1 | 	add	arg01, #20
05710     04 4E 05 F1 | 	add	fp, #4
05714     A7 14 02 FB | 	rdlong	arg02, fp
05718     28 4E 85 F1 | 	sub	fp, #40
0571c     1C 4B B1 FD | 	call	#_pslpoke
05720                 | '    pslpoke(header(5)+16,header(4))  
05720                 | '    pslpoke(header(4)+20, header(5))
05720                 | '    return 0
05720     00 FA 05 F6 | 	mov	result1, #0
05724     A8 00 90 FD | 	jmp	#LR__0466
05728                 | LR__0464
05728     10 4E 05 F1 | 	add	fp, #16
0572c     A7 1E 02 FB | 	rdlong	local01, fp
05730     08 4E 85 F1 | 	sub	fp, #8
05734     A7 1E 62 FC | 	wrlong	local01, fp
05738     6A 00 00 FF 
0573c     74 E4 05 F1 | 	add	objptr, ##54388
05740     F2 1E 02 FB | 	rdlong	local01, objptr
05744     08 4E 05 F1 | 	add	fp, #8
05748     A7 1E 62 FC | 	wrlong	local01, fp
0574c     10 4E 85 F1 | 	sub	fp, #16
05750                 | ' 
05750                 | ' 
05750                 | ' 
05750                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05750                 | ' 
05750                 | ' lineptr2=searchptr
05750                 | ' searchptr=programstart
05750                 | ' 
05750                 | ' do
05750     5E 00 00 FF 
05754     A8 E5 85 F1 | 	sub	objptr, ##48552
05758                 | LR__0465
05758     14 4E 05 F1 | 	add	fp, #20
0575c     A7 12 02 F6 | 	mov	arg01, fp
05760     04 4E 85 F1 | 	sub	fp, #4
05764     A7 14 02 FB | 	rdlong	arg02, fp
05768     10 4E 85 F1 | 	sub	fp, #16
0576c     18 16 06 F6 | 	mov	arg03, #24
05770     A0 81 B1 FD | 	call	#_psram_spin2_read1
05774     10 4E 05 F1 | 	add	fp, #16
05778     A7 1E 02 FB | 	rdlong	local01, fp
0577c     08 4E 85 F1 | 	sub	fp, #8
05780     A7 1E 62 FC | 	wrlong	local01, fp
05784     20 4E 05 F1 | 	add	fp, #32
05788     A7 1E 02 FB | 	rdlong	local01, fp
0578c     18 4E 85 F1 | 	sub	fp, #24
05790     A7 1E 62 FC | 	wrlong	local01, fp
05794     04 4E 05 F1 | 	add	fp, #4
05798     A7 1E 02 FB | 	rdlong	local01, fp
0579c     10 4E 85 F1 | 	sub	fp, #16
057a0     A7 22 02 FB | 	rdlong	local03, fp
057a4     04 4E 85 F1 | 	sub	fp, #4
057a8     11 1F 12 F2 | 	cmp	local01, local03 wc
057ac     28 4E 05 C1 |  if_b	add	fp, #40
057b0     A7 20 02 CB |  if_b	rdlong	local02, fp
057b4     28 4E 85 C1 |  if_b	sub	fp, #40
057b8     FF FF 3F CF 
057bc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
057c0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0465
057c4     0B 00 00 FF 
057c8     CC E4 85 F1 | 	sub	objptr, ##5836
057cc     00 FA 05 F6 | 	mov	result1, #0
057d0                 | LR__0466
057d0     A7 F0 03 F6 | 	mov	ptra, fp
057d4     B2 00 A0 FD | 	call	#popregs_
057d8                 | _deleteline_ret
057d8     2D 00 64 FD | 	ret
057dc                 | 
057dc                 | ' 
057dc                 | ' sub save_line
057dc                 | _save_line
057dc     03 4A 05 F6 | 	mov	COUNT_, #3
057e0     A8 00 A0 FD | 	call	#pushregs_
057e4     6A 00 00 FF 
057e8     6C E4 05 F1 | 	add	objptr, ##54380
057ec     F2 16 02 FB | 	rdlong	arg03, objptr
057f0     01 16 06 F1 | 	add	arg03, #1
057f4     05 00 00 FF 
057f8     18 E4 85 F1 | 	sub	objptr, ##2584
057fc     F2 14 02 FB | 	rdlong	arg02, objptr
05800     0B 15 02 FD | 	qmul	arg02, arg03
05804     0E 00 00 FF 
05808     44 E4 85 F1 | 	sub	objptr, ##7236
0580c     F2 12 02 FB | 	rdlong	arg01, objptr
05810     57 00 00 FF 
05814     10 E4 85 F1 | 	sub	objptr, ##44560
05818     09 1F 02 F6 | 	mov	local01, arg01
0581c     18 20 62 FD | 	getqx	local02
05820     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
05824                 | LR__0470
05824     0F FB C9 FA | 	rdbyte	result1, local01 wz
05828     01 1E 06 51 |  if_ne	add	local01, #1
0582c     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
05830                 | LR__0471
05830     09 1F 82 F1 | 	sub	local01, arg01
05834     03 1E CE F7 | 	test	local01, #3 wz
05838     02 1E 46 50 |  if_ne	shr	local01, #2
0583c     01 1E 06 51 |  if_ne	add	local01, #1
05840     02 1E 66 50 |  if_ne	shl	local01, #2
05844     10 23 02 F6 | 	mov	local03, local02
05848     0F 23 02 F1 | 	add	local03, local01
0584c     63 00 00 FF 
05850     4C E4 05 F1 | 	add	objptr, ##50764
05854     F2 16 02 FB | 	rdlong	arg03, objptr
05858     10 17 02 F1 | 	add	arg03, local02
0585c     04 00 00 FF 
05860     28 E4 05 F1 | 	add	objptr, ##2088
05864     F2 16 62 FC | 	wrlong	arg03, objptr
05868     04 E4 05 F1 | 	add	objptr, #4
0586c     F2 1E 62 FC | 	wrlong	local01, objptr
05870     0C E4 85 F1 | 	sub	objptr, #12
05874     F2 12 02 F6 | 	mov	arg01, objptr
05878     04 00 00 FF 
0587c     20 E4 85 F1 | 	sub	objptr, ##2080
05880     F2 14 02 FB | 	rdlong	arg02, objptr
05884     10 17 02 F6 | 	mov	arg03, local02
05888     57 00 00 FF 
0588c     80 E5 85 F1 | 	sub	objptr, ##44928
05890     1C 81 B1 FD | 	call	#_psram_spin2_write
05894     4B 00 00 FF 
05898     44 E5 05 F1 | 	add	objptr, ##38724
0589c     F2 12 02 FB | 	rdlong	arg01, objptr
058a0     0C 00 00 FF 
058a4     3C E4 05 F1 | 	add	objptr, ##6204
058a8     F2 14 02 FB | 	rdlong	arg02, objptr
058ac     10 15 02 F1 | 	add	arg02, local02
058b0     0F 17 02 F6 | 	mov	arg03, local01
058b4     57 00 00 FF 
058b8     80 E5 85 F1 | 	sub	objptr, ##44928
058bc     F0 80 B1 FD | 	call	#_psram_spin2_write
058c0     57 00 00 FF 
058c4     80 E5 05 F1 | 	add	objptr, ##44928
058c8     F2 1E 02 FB | 	rdlong	local01, objptr
058cc     11 1F 02 F1 | 	add	local01, local03
058d0     F2 1E 62 FC | 	wrlong	local01, objptr
058d4     63 00 00 FF 
058d8     4C E4 85 F1 | 	sub	objptr, ##50764
058dc     A7 F0 03 F6 | 	mov	ptra, fp
058e0     B2 00 A0 FD | 	call	#popregs_
058e4                 | _save_line_ret
058e4     2D 00 64 FD | 	ret
058e8                 | 
058e8                 | ' 
058e8                 | ' 
058e8                 | ' function insertline(aline as ulong) as integer
058e8                 | _insertline
058e8     02 4A 05 F6 | 	mov	COUNT_, #2
058ec     A8 00 A0 FD | 	call	#pushregs_
058f0     28 F0 07 F1 | 	add	ptra, #40
058f4     04 4E 05 F1 | 	add	fp, #4
058f8     A7 12 62 FC | 	wrlong	arg01, fp
058fc     6A 00 00 FF 
05900     74 E4 05 F1 | 	add	objptr, ##54388
05904     F2 1E 02 FB | 	rdlong	local01, objptr
05908     04 4E 05 F1 | 	add	fp, #4
0590c     A7 1E 62 FC | 	wrlong	local01, fp
05910     08 4E 85 F1 | 	sub	fp, #8
05914                 | ' 
05914                 | ' do
05914     5E 00 00 FF 
05918     A8 E5 85 F1 | 	sub	objptr, ##48552
0591c                 | LR__0480
0591c     10 4E 05 F1 | 	add	fp, #16
05920     A7 12 02 F6 | 	mov	arg01, fp
05924     08 4E 85 F1 | 	sub	fp, #8
05928     A7 14 02 FB | 	rdlong	arg02, fp
0592c     08 4E 85 F1 | 	sub	fp, #8
05930     18 16 06 F6 | 	mov	arg03, #24
05934     DC 7F B1 FD | 	call	#_psram_spin2_read1
05938     08 4E 05 F1 | 	add	fp, #8
0593c     A7 1E 02 FB | 	rdlong	local01, fp
05940     04 4E 05 F1 | 	add	fp, #4
05944     A7 1E 62 FC | 	wrlong	local01, fp
05948     18 4E 05 F1 | 	add	fp, #24
0594c     A7 1E 02 FB | 	rdlong	local01, fp
05950     1C 4E 85 F1 | 	sub	fp, #28
05954     A7 1E 62 FC | 	wrlong	local01, fp
05958     08 4E 05 F1 | 	add	fp, #8
0595c     A7 1E 02 FB | 	rdlong	local01, fp
05960     0C 4E 85 F1 | 	sub	fp, #12
05964     A7 16 02 FB | 	rdlong	arg03, fp
05968     04 4E 85 F1 | 	sub	fp, #4
0596c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05970     24 4E 05 C1 |  if_b	add	fp, #36
05974     A7 20 02 CB |  if_b	rdlong	local02, fp
05978     24 4E 85 C1 |  if_b	sub	fp, #36
0597c     FF FF 3F CF 
05980     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05984     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0480
05988     0B 00 00 FF 
0598c     CC E4 85 F1 | 	sub	objptr, ##5836
05990                 | ' 
05990                 | ' if header(0)=aline then return -1 ' delete it first
05990     10 4E 05 F1 | 	add	fp, #16
05994     A7 1E 02 FB | 	rdlong	local01, fp
05998     0C 4E 85 F1 | 	sub	fp, #12
0599c     A7 20 02 FB | 	rdlong	local02, fp
059a0     04 4E 85 F1 | 	sub	fp, #4
059a4     10 1F 0A F2 | 	cmp	local01, local02 wz
059a8     01 FA 65 A6 |  if_e	neg	result1, #1
059ac     48 01 90 AD |  if_e	jmp	#LR__0483
059b0                 | ' if header(0)<aline then return -2 ' end of program reached
059b0     10 4E 05 F1 | 	add	fp, #16
059b4     A7 1E 02 FB | 	rdlong	local01, fp
059b8     0C 4E 85 F1 | 	sub	fp, #12
059bc     A7 16 02 FB | 	rdlong	arg03, fp
059c0     04 4E 85 F1 | 	sub	fp, #4
059c4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
059c8     02 FA 65 C6 |  if_b	neg	result1, #2
059cc     28 01 90 CD |  if_b	jmp	#LR__0483
059d0                 | ' 
059d0                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
059d0     20 4E 05 F1 | 	add	fp, #32
059d4     A7 1E 02 FB | 	rdlong	local01, fp
059d8     20 4E 85 F1 | 	sub	fp, #32
059dc     FF FF 7F FF 
059e0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
059e4     78 00 90 5D |  if_ne	jmp	#LR__0481
059e8     63 00 00 FF 
059ec     4C E4 05 F1 | 	add	objptr, ##50764
059f0     F2 1E 02 FB | 	rdlong	local01, objptr
059f4     07 00 00 FF 
059f8     28 E4 05 F1 | 	add	objptr, ##3624
059fc     F2 1E 62 FC | 	wrlong	local01, objptr
05a00     0C 4E 05 F1 | 	add	fp, #12
05a04     A7 12 02 FB | 	rdlong	arg01, fp
05a08     0C 4E 85 F1 | 	sub	fp, #12
05a0c     10 12 06 F1 | 	add	arg01, #16
05a10     07 00 00 FF 
05a14     28 E4 85 F1 | 	sub	objptr, ##3624
05a18     F2 14 02 FB | 	rdlong	arg02, objptr
05a1c     63 00 00 FF 
05a20     4C E4 85 F1 | 	sub	objptr, ##50764
05a24     14 48 B1 FD | 	call	#_pslpoke
05a28     67 00 00 FF 
05a2c     7C E4 05 F1 | 	add	objptr, ##52860
05a30     FF FF FF FF 
05a34     F2 FE 6B FC | 	wrlong	##-1, objptr
05a38     0C 4E 05 F1 | 	add	fp, #12
05a3c     A7 1E 02 FB | 	rdlong	local01, fp
05a40     0C 4E 85 F1 | 	sub	fp, #12
05a44     04 E4 05 F1 | 	add	objptr, #4
05a48     F2 1E 62 FC | 	wrlong	local01, objptr
05a4c     67 00 00 FF 
05a50     80 E4 85 F1 | 	sub	objptr, ##52864
05a54     84 FD BF FD | 	call	#_save_line
05a58                 | '   programstart=programptr
05a58                 | '   pslpoke(lineptr2+16,programptr)
05a58                 | '   ucompiledline(4)=$FFFF_FFFF
05a58                 | '   ucompiledline(5)=lineptr2
05a58                 | '   save_line
05a58                 | '   return 0
05a58     00 FA 05 F6 | 	mov	result1, #0
05a5c     98 00 90 FD | 	jmp	#LR__0483
05a60                 | LR__0481
05a60                 | ' 
05a60                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05a60     20 4E 05 F1 | 	add	fp, #32
05a64     A7 1E 02 FB | 	rdlong	local01, fp
05a68     20 4E 85 F1 | 	sub	fp, #32
05a6c     FF FF 7F FF 
05a70     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05a74     7C 00 90 AD |  if_e	jmp	#LR__0482
05a78     20 4E 05 F1 | 	add	fp, #32
05a7c     A7 1E 02 FB | 	rdlong	local01, fp
05a80     67 00 00 FF 
05a84     7C E4 05 F1 | 	add	objptr, ##52860
05a88     F2 1E 62 FC | 	wrlong	local01, objptr
05a8c     14 4E 85 F1 | 	sub	fp, #20
05a90     A7 1E 02 FB | 	rdlong	local01, fp
05a94     04 E4 05 F1 | 	add	objptr, #4
05a98     F2 1E 62 FC | 	wrlong	local01, objptr
05a9c     A7 12 02 FB | 	rdlong	arg01, fp
05aa0     0C 4E 85 F1 | 	sub	fp, #12
05aa4     10 12 06 F1 | 	add	arg01, #16
05aa8     04 00 00 FF 
05aac     34 E4 85 F1 | 	sub	objptr, ##2100
05ab0     F2 14 02 FB | 	rdlong	arg02, objptr
05ab4     63 00 00 FF 
05ab8     4C E4 85 F1 | 	sub	objptr, ##50764
05abc     7C 47 B1 FD | 	call	#_pslpoke
05ac0     20 4E 05 F1 | 	add	fp, #32
05ac4     A7 12 02 FB | 	rdlong	arg01, fp
05ac8     20 4E 85 F1 | 	sub	fp, #32
05acc     14 12 06 F1 | 	add	arg01, #20
05ad0     63 00 00 FF 
05ad4     4C E4 05 F1 | 	add	objptr, ##50764
05ad8     F2 14 02 FB | 	rdlong	arg02, objptr
05adc     63 00 00 FF 
05ae0     4C E4 85 F1 | 	sub	objptr, ##50764
05ae4     54 47 B1 FD | 	call	#_pslpoke
05ae8     F0 FC BF FD | 	call	#_save_line
05aec                 | '   ucompiledline(4)=header(4)
05aec                 | '   ucompiledline(5)=lineptr2
05aec                 | '   pslpoke(lineptr2+16,programptr)
05aec                 | '   pslpoke(header(4)+20,programptr)
05aec                 | '   save_line
05aec                 | '   return 0
05aec     00 FA 05 F6 | 	mov	result1, #0
05af0     04 00 90 FD | 	jmp	#LR__0483
05af4                 | LR__0482
05af4     00 FA 05 F6 | 	mov	result1, #0
05af8                 | LR__0483
05af8     A7 F0 03 F6 | 	mov	ptra, fp
05afc     B2 00 A0 FD | 	call	#popregs_
05b00                 | _insertline_ret
05b00     2D 00 64 FD | 	ret
05b04                 | 
05b04                 | ' 
05b04                 | ' sub add_line_at_end(aline) 
05b04                 | _add_line_at_end
05b04     6A 00 00 FF 
05b08     78 E4 05 F1 | 	add	objptr, ##54392
05b0c     F2 12 62 FC | 	wrlong	arg01, objptr
05b10     04 E4 05 F1 | 	add	objptr, #4
05b14     F2 14 02 FB | 	rdlong	arg02, objptr
05b18     03 00 00 FF 
05b1c     00 E4 85 F1 | 	sub	objptr, ##1536
05b20     F2 14 62 FC | 	wrlong	arg02, objptr
05b24     03 00 00 FF 
05b28     00 E4 05 F1 | 	add	objptr, ##1536
05b2c     F2 12 02 FB | 	rdlong	arg01, objptr
05b30     14 12 06 F1 | 	add	arg01, #20
05b34     07 00 00 FF 
05b38     30 E4 85 F1 | 	sub	objptr, ##3632
05b3c     F2 14 02 FB | 	rdlong	arg02, objptr
05b40     63 00 00 FF 
05b44     4C E4 85 F1 | 	sub	objptr, ##50764
05b48     F0 46 B1 FD | 	call	#_pslpoke
05b4c     63 00 00 FF 
05b50     4C E4 05 F1 | 	add	objptr, ##50764
05b54     F2 14 02 FB | 	rdlong	arg02, objptr
05b58     07 00 00 FF 
05b5c     30 E4 05 F1 | 	add	objptr, ##3632
05b60     F2 14 62 FC | 	wrlong	arg02, objptr
05b64     02 00 00 FF 
05b68     FC E5 85 F1 | 	sub	objptr, ##1532
05b6c     FF FF BF FF 
05b70     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05b74                 | ' 
05b74                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05b74                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05b74     04 00 00 FF 
05b78     34 E4 85 F1 | 	sub	objptr, ##2100
05b7c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05b80     63 00 00 FF 
05b84     4C E4 85 F1 | 	sub	objptr, ##50764
05b88     67 00 00 AF 
05b8c     7C E4 05 A1 |  if_e	add	objptr, ##52860
05b90     FF FF FF AF 
05b94     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05b98     67 00 00 AF 
05b9c     7C E4 85 A1 |  if_e	sub	objptr, ##52860
05ba0     38 FC BF FD | 	call	#_save_line
05ba4     63 00 00 FF 
05ba8     4C E4 05 F1 | 	add	objptr, ##50764
05bac     F2 12 02 FB | 	rdlong	arg01, objptr
05bb0     63 00 00 FF 
05bb4     4C E4 85 F1 | 	sub	objptr, ##50764
05bb8     01 14 66 F6 | 	neg	arg02, #1
05bbc     7C 46 B1 FD | 	call	#_pslpoke
05bc0                 | _add_line_at_end_ret
05bc0     2D 00 64 FD | 	ret
05bc4                 | 
05bc4                 | ' 
05bc4                 | ' function compile_immediate(linetype as ulong) as integer
05bc4                 | _compile_immediate
05bc4     09 4A 05 F6 | 	mov	COUNT_, #9
05bc8     A8 00 A0 FD | 	call	#pushregs_
05bcc                 | _compile_immediate_enter
05bcc     09 25 0A F6 | 	mov	local04, arg01 wz
05bd0     00 26 06 F6 | 	mov	local05, #0
05bd4     00 28 06 F6 | 	mov	local06, #0
05bd8                 | ' 
05bd8                 | ' ' linetype=cont+1, linetype=0 immediate
05bd8                 | ' '  : 1: this is the first part of the line that will continue
05bd8                 | ' ' 2 - this is the continuation of the line
05bd8                 | ' ' 3 - this is the last continued line
05bd8                 | ' ' 4 - this is the one and only part
05bd8                 | ' 
05bd8                 | ' err=0
05bd8                 | ' cmd=0
05bd8                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05bd8     30 00 90 5D |  if_ne	jmp	#LR__0490
05bdc     55 00 00 FF 
05be0     00 E4 05 F1 | 	add	objptr, ##43520
05be4     F2 28 02 FB | 	rdlong	local06, objptr
05be8     02 00 00 FF 
05bec     34 E4 05 F1 | 	add	objptr, ##1076
05bf0     F2 02 68 FC | 	wrlong	#1, objptr
05bf4     00 2A 06 F6 | 	mov	local07, #0
05bf8     13 00 00 FF 
05bfc     38 E4 05 F1 | 	add	objptr, ##9784
05c00     F2 00 68 FC | 	wrlong	#0, objptr
05c04     6A 00 00 FF 
05c08     6C E4 85 F1 | 	sub	objptr, ##54380
05c0c                 | LR__0490
05c0c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05c0c     02 24 0E F2 | 	cmp	local04, #2 wz
05c10     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05c14     24 00 90 5D |  if_ne	jmp	#LR__0491
05c18     55 00 00 FF 
05c1c     00 E4 05 F1 | 	add	objptr, ##43520
05c20     F2 28 02 FB | 	rdlong	local06, objptr
05c24     01 2A 06 F6 | 	mov	local07, #1
05c28     02 00 00 FF 
05c2c     34 E4 05 F1 | 	add	objptr, ##1076
05c30     F2 02 68 FC | 	wrlong	#1, objptr
05c34     57 00 00 FF 
05c38     34 E4 85 F1 | 	sub	objptr, ##44596
05c3c                 | LR__0491
05c3c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05c3c     04 24 0E F2 | 	cmp	local04, #4 wz
05c40     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05c44     30 00 90 5D |  if_ne	jmp	#LR__0492
05c48     55 00 00 FF 
05c4c     08 E4 05 F1 | 	add	objptr, ##43528
05c50     F2 28 02 FB | 	rdlong	local06, objptr
05c54     02 2A 06 F6 | 	mov	local07, #2
05c58     02 00 00 FF 
05c5c     2C E4 05 F1 | 	add	objptr, ##1068
05c60     F2 04 68 FC | 	wrlong	#2, objptr
05c64     13 00 00 FF 
05c68     38 E4 05 F1 | 	add	objptr, ##9784
05c6c     F2 04 68 FC | 	wrlong	#2, objptr
05c70     6A 00 00 FF 
05c74     6C E4 85 F1 | 	sub	objptr, ##54380
05c78                 | LR__0492
05c78                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05c78     05 24 0E F2 | 	cmp	local04, #5 wz
05c7c     44 00 90 5D |  if_ne	jmp	#LR__0493
05c80     57 00 00 FF 
05c84     34 E4 05 F1 | 	add	objptr, ##44596
05c88     F2 FA 01 FB | 	rdlong	result1, objptr
05c8c     FD 2A 02 F6 | 	mov	local07, result1
05c90     03 2A 66 F0 | 	shl	local07, #3
05c94     02 00 00 FF 
05c98     38 E4 85 F1 | 	sub	objptr, ##1080
05c9c     F2 2A 02 F1 | 	add	local07, objptr
05ca0     04 2A 06 F1 | 	add	local07, #4
05ca4     15 29 02 FB | 	rdlong	local06, local07
05ca8     FD 2A 02 F6 | 	mov	local07, result1
05cac     01 2A 06 F1 | 	add	local07, #1
05cb0     02 00 00 FF 
05cb4     38 E4 05 F1 | 	add	objptr, ##1080
05cb8     F2 2A 62 FC | 	wrlong	local07, objptr
05cbc     57 00 00 FF 
05cc0     34 E4 85 F1 | 	sub	objptr, ##44596
05cc4                 | LR__0493
05cc4     00 2C 06 F6 | 	mov	local08, #0
05cc8                 | ' vars=0
05cc8                 | ' 'print  "In compile_immediate cmd=:", cmd
05cc8                 | ' 451 select case cmd
05cc8     5C 28 0E F2 | 	cmp	local06, #92 wz
05ccc     08 02 90 AD |  if_e	jmp	#LR__0494
05cd0     47 28 0E F2 | 	cmp	local06, #71 wz
05cd4     0C 02 90 AD |  if_e	jmp	#LR__0495
05cd8     59 28 0E F2 | 	cmp	local06, #89 wz
05cdc     10 02 90 AD |  if_e	jmp	#LR__0496
05ce0     45 28 0E F2 | 	cmp	local06, #69 wz
05ce4     14 02 90 AD |  if_e	jmp	#LR__0497
05ce8     69 28 0E F2 | 	cmp	local06, #105 wz
05cec     18 02 90 AD |  if_e	jmp	#LR__0498
05cf0     40 28 0E F2 | 	cmp	local06, #64 wz
05cf4     90 04 90 AD |  if_e	jmp	#LR__0554
05cf8     49 28 0E F2 | 	cmp	local06, #73 wz
05cfc     14 02 90 AD |  if_e	jmp	#LR__0499
05d00     50 28 0E F2 | 	cmp	local06, #80 wz
05d04     18 02 90 AD |  if_e	jmp	#LR__0500
05d08     68 28 0E F2 | 	cmp	local06, #104 wz
05d0c     1C 02 90 AD |  if_e	jmp	#LR__0501
05d10     74 28 0E F2 | 	cmp	local06, #116 wz
05d14     20 02 90 AD |  if_e	jmp	#LR__0502
05d18     73 28 0E F2 | 	cmp	local06, #115 wz
05d1c     24 02 90 AD |  if_e	jmp	#LR__0503
05d20     6C 28 0E F2 | 	cmp	local06, #108 wz
05d24     28 02 90 AD |  if_e	jmp	#LR__0504
05d28     89 28 0E F2 | 	cmp	local06, #137 wz
05d2c     58 04 90 AD |  if_e	jmp	#LR__0554
05d30     72 28 0E F2 | 	cmp	local06, #114 wz
05d34     24 02 90 AD |  if_e	jmp	#LR__0505
05d38     5D 28 0E F2 | 	cmp	local06, #93 wz
05d3c     48 04 90 AD |  if_e	jmp	#LR__0554
05d40     96 28 0E F2 | 	cmp	local06, #150 wz
05d44     1C 02 90 AD |  if_e	jmp	#LR__0506
05d48     43 28 0E F2 | 	cmp	local06, #67 wz
05d4c     1C 02 90 AD |  if_e	jmp	#LR__0507
05d50     5A 28 0E F2 | 	cmp	local06, #90 wz
05d54     20 02 90 AD |  if_e	jmp	#LR__0508
05d58     4E 28 0E F2 | 	cmp	local06, #78 wz
05d5c     20 02 90 AD |  if_e	jmp	#LR__0509
05d60     46 28 0E F2 | 	cmp	local06, #70 wz
05d64     34 02 90 AD |  if_e	jmp	#LR__0511
05d68     71 28 0E F2 | 	cmp	local06, #113 wz
05d6c     38 02 90 AD |  if_e	jmp	#LR__0512
05d70     60 28 0E F2 | 	cmp	local06, #96 wz
05d74     3C 02 90 AD |  if_e	jmp	#LR__0513
05d78     4A 28 0E F2 | 	cmp	local06, #74 wz
05d7c     40 02 90 AD |  if_e	jmp	#LR__0514
05d80     48 28 0E F2 | 	cmp	local06, #72 wz
05d84     40 02 90 AD |  if_e	jmp	#LR__0515
05d88     58 28 0E F2 | 	cmp	local06, #88 wz
05d8c     44 02 90 AD |  if_e	jmp	#LR__0516
05d90     5F 28 0E F2 | 	cmp	local06, #95 wz
05d94     44 02 90 AD |  if_e	jmp	#LR__0517
05d98     8A 28 0E F2 | 	cmp	local06, #138 wz
05d9c     48 02 90 AD |  if_e	jmp	#LR__0518
05da0     4C 28 0E F2 | 	cmp	local06, #76 wz
05da4     4C 02 90 AD |  if_e	jmp	#LR__0519
05da8     52 28 0E F2 | 	cmp	local06, #82 wz
05dac     50 02 90 AD |  if_e	jmp	#LR__0520
05db0     97 28 0E F2 | 	cmp	local06, #151 wz
05db4     54 02 90 AD |  if_e	jmp	#LR__0521
05db8     61 28 0E F2 | 	cmp	local06, #97 wz
05dbc     58 02 90 AD |  if_e	jmp	#LR__0522
05dc0     63 28 0E F2 | 	cmp	local06, #99 wz
05dc4     5C 02 90 AD |  if_e	jmp	#LR__0523
05dc8     41 28 0E F2 | 	cmp	local06, #65 wz
05dcc     B8 03 90 AD |  if_e	jmp	#LR__0554
05dd0     4B 28 0E F2 | 	cmp	local06, #75 wz
05dd4     58 02 90 AD |  if_e	jmp	#LR__0524
05dd8     5E 28 0E F2 | 	cmp	local06, #94 wz
05ddc     58 02 90 AD |  if_e	jmp	#LR__0525
05de0     7C 28 0E F2 | 	cmp	local06, #124 wz
05de4     5C 02 90 AD |  if_e	jmp	#LR__0526
05de8     7D 28 0E F2 | 	cmp	local06, #125 wz
05dec     60 02 90 AD |  if_e	jmp	#LR__0527
05df0     7E 28 0E F2 | 	cmp	local06, #126 wz
05df4     64 02 90 AD |  if_e	jmp	#LR__0528
05df8     7F 28 0E F2 | 	cmp	local06, #127 wz
05dfc     68 02 90 AD |  if_e	jmp	#LR__0529
05e00     80 28 0E F2 | 	cmp	local06, #128 wz
05e04     6C 02 90 AD |  if_e	jmp	#LR__0530
05e08     55 28 0E F2 | 	cmp	local06, #85 wz
05e0c     70 02 90 AD |  if_e	jmp	#LR__0531
05e10     75 28 0E F2 | 	cmp	local06, #117 wz
05e14     74 02 90 AD |  if_e	jmp	#LR__0532
05e18     42 28 0E F2 | 	cmp	local06, #66 wz
05e1c     78 02 90 AD |  if_e	jmp	#LR__0533
05e20     95 28 0E F2 | 	cmp	local06, #149 wz
05e24     7C 02 90 AD |  if_e	jmp	#LR__0534
05e28     81 28 0E F2 | 	cmp	local06, #129 wz
05e2c     80 02 90 AD |  if_e	jmp	#LR__0535
05e30     44 28 0E F2 | 	cmp	local06, #68 wz
05e34     84 02 90 AD |  if_e	jmp	#LR__0536
05e38     88 28 0E F2 | 	cmp	local06, #136 wz
05e3c     48 03 90 AD |  if_e	jmp	#LR__0554
05e40     92 28 0E F2 | 	cmp	local06, #146 wz
05e44     80 02 90 AD |  if_e	jmp	#LR__0537
05e48     4D 28 0E F2 | 	cmp	local06, #77 wz
05e4c     80 02 90 AD |  if_e	jmp	#LR__0538
05e50     51 28 0E F2 | 	cmp	local06, #81 wz
05e54     84 02 90 AD |  if_e	jmp	#LR__0539
05e58     8E 28 0E F2 | 	cmp	local06, #142 wz
05e5c     88 02 90 AD |  if_e	jmp	#LR__0540
05e60     90 28 0E F2 | 	cmp	local06, #144 wz
05e64     8C 02 90 AD |  if_e	jmp	#LR__0541
05e68     8D 28 0E F2 | 	cmp	local06, #141 wz
05e6c     90 02 90 AD |  if_e	jmp	#LR__0542
05e70     8C 28 0E F2 | 	cmp	local06, #140 wz
05e74     94 02 90 AD |  if_e	jmp	#LR__0543
05e78     91 28 0E F2 | 	cmp	local06, #145 wz
05e7c     98 02 90 AD |  if_e	jmp	#LR__0544
05e80     8B 28 0E F2 | 	cmp	local06, #139 wz
05e84     9C 02 90 AD |  if_e	jmp	#LR__0545
05e88     8F 28 0E F2 | 	cmp	local06, #143 wz
05e8c     A0 02 90 AD |  if_e	jmp	#LR__0546
05e90     6D 28 0E F2 | 	cmp	local06, #109 wz
05e94     A4 02 90 AD |  if_e	jmp	#LR__0547
05e98     70 28 0E F2 | 	cmp	local06, #112 wz
05e9c     E8 02 90 AD |  if_e	jmp	#LR__0554
05ea0     56 28 0E F2 | 	cmp	local06, #86 wz
05ea4     A0 02 90 AD |  if_e	jmp	#LR__0548
05ea8     57 28 0E F2 | 	cmp	local06, #87 wz
05eac     D8 02 90 AD |  if_e	jmp	#LR__0554
05eb0     79 28 0E F2 | 	cmp	local06, #121 wz
05eb4     9C 02 90 AD |  if_e	jmp	#LR__0549
05eb8     77 28 0E F2 | 	cmp	local06, #119 wz
05ebc     A0 02 90 AD |  if_e	jmp	#LR__0550
05ec0     78 28 0E F2 | 	cmp	local06, #120 wz
05ec4     A4 02 90 AD |  if_e	jmp	#LR__0551
05ec8     01 00 00 FF 
05ecc     04 28 0E F2 | 	cmp	local06, ##516 wz
05ed0     A4 02 90 AD |  if_e	jmp	#LR__0552
05ed4     A8 02 90 FD | 	jmp	#LR__0553
05ed8                 | LR__0494
05ed8     AC 0C B0 FD | 	call	#_compile_fun_2p
05edc     FD 26 02 F6 | 	mov	local05, result1
05ee0     A4 02 90 FD | 	jmp	#LR__0554
05ee4                 | LR__0495
05ee4     E0 0D B0 FD | 	call	#_compile_fun_4p
05ee8     FD 26 02 F6 | 	mov	local05, result1
05eec     98 02 90 FD | 	jmp	#LR__0554
05ef0                 | LR__0496
05ef0     70 2F B0 FD | 	call	#_expr
05ef4                 | ' expr()
05ef4                 | ' return 0
05ef4     00 26 06 F6 | 	mov	local05, #0
05ef8     8C 02 90 FD | 	jmp	#LR__0554
05efc                 | LR__0497
05efc     FC 0C B0 FD | 	call	#_compile_fun_3p
05f00     FD 26 02 F6 | 	mov	local05, result1
05f04     80 02 90 FD | 	jmp	#LR__0554
05f08                 | LR__0498
05f08     58 2F B0 FD | 	call	#_expr
05f0c                 | ' expr()
05f0c                 | ' return 0
05f0c     00 26 06 F6 | 	mov	local05, #0
05f10     74 02 90 FD | 	jmp	#LR__0554
05f14                 | LR__0499
05f14     4C 2F B0 FD | 	call	#_expr
05f18                 | ' expr()
05f18                 | ' return 0
05f18     00 26 06 F6 | 	mov	local05, #0
05f1c     68 02 90 FD | 	jmp	#LR__0554
05f20                 | LR__0500
05f20     44 10 B0 FD | 	call	#_compile_fun_varp
05f24     FD 2C 02 F6 | 	mov	local08, result1
05f28     5C 02 90 FD | 	jmp	#LR__0554
05f2c                 | LR__0501
05f2c     34 2F B0 FD | 	call	#_expr
05f30                 | ' expr()
05f30                 | ' return 0
05f30     00 26 06 F6 | 	mov	local05, #0
05f34     50 02 90 FD | 	jmp	#LR__0554
05f38                 | LR__0502
05f38     2C 10 B0 FD | 	call	#_compile_fun_varp
05f3c     FD 2C 02 F6 | 	mov	local08, result1
05f40     44 02 90 FD | 	jmp	#LR__0554
05f44                 | LR__0503
05f44     20 10 B0 FD | 	call	#_compile_fun_varp
05f48     FD 2C 02 F6 | 	mov	local08, result1
05f4c     38 02 90 FD | 	jmp	#LR__0554
05f50                 | LR__0504
05f50     98 0E B0 FD | 	call	#_compile_fun_5p
05f54     FD 26 02 F6 | 	mov	local05, result1
05f58     2C 02 90 FD | 	jmp	#LR__0554
05f5c                 | LR__0505
05f5c     F4 19 B0 FD | 	call	#_compile_dim
05f60     E0 02 90 FD | 	jmp	#LR__0555
05f64                 | LR__0506
05f64     20 0C B0 FD | 	call	#_compile_fun_2p
05f68     1C 02 90 FD | 	jmp	#LR__0554
05f6c                 | LR__0507
05f6c     18 0C B0 FD | 	call	#_compile_fun_2p
05f70     FD 26 02 F6 | 	mov	local05, result1
05f74     10 02 90 FD | 	jmp	#LR__0554
05f78                 | LR__0508
05f78     B0 18 B0 FD | 	call	#_compile_else
05f7c     C4 02 90 FD | 	jmp	#LR__0555
05f80                 | LR__0509
05f80     01 24 16 F2 | 	cmp	local04, #1 wc
05f84     08 00 90 CD |  if_b	jmp	#LR__0510
05f88     78 2B B0 FD | 	call	#_compile_goto
05f8c     B4 02 90 FD | 	jmp	#LR__0555
05f90                 | LR__0510
05f90     19 12 06 F6 | 	mov	arg01, #25
05f94     44 41 B1 FD | 	call	#_printerror
05f98     A8 02 90 FD | 	jmp	#LR__0555
05f9c                 | LR__0511
05f9c     5C 0C B0 FD | 	call	#_compile_fun_3p
05fa0     FD 26 02 F6 | 	mov	local05, result1
05fa4     E0 01 90 FD | 	jmp	#LR__0554
05fa8                 | LR__0512
05fa8     1C 0D B0 FD | 	call	#_compile_fun_4p
05fac     FD 26 02 F6 | 	mov	local05, result1
05fb0     D4 01 90 FD | 	jmp	#LR__0554
05fb4                 | LR__0513
05fb4     AC 2E B0 FD | 	call	#_expr
05fb8                 | ' expr()
05fb8                 | ' return 0
05fb8     00 26 06 F6 | 	mov	local05, #0
05fbc     C8 01 90 FD | 	jmp	#LR__0554
05fc0                 | LR__0514
05fc0     A0 20 B0 FD | 	call	#_compile_for
05fc4     7C 02 90 FD | 	jmp	#LR__0555
05fc8                 | LR__0515
05fc8     FC 0C B0 FD | 	call	#_compile_fun_4p
05fcc     FD 26 02 F6 | 	mov	local05, result1
05fd0     B4 01 90 FD | 	jmp	#LR__0554
05fd4                 | LR__0516
05fd4     14 17 B0 FD | 	call	#_compile_if
05fd8     68 02 90 FD | 	jmp	#LR__0555
05fdc                 | LR__0517
05fdc     84 2E B0 FD | 	call	#_expr
05fe0                 | ' expr()
05fe0                 | ' return 0
05fe0     00 26 06 F6 | 	mov	local05, #0
05fe4     A0 01 90 FD | 	jmp	#LR__0554
05fe8                 | LR__0518
05fe8     78 2E B0 FD | 	call	#_expr
05fec                 | ' expr()
05fec                 | ' return 0
05fec     00 26 06 F6 | 	mov	local05, #0
05ff0     94 01 90 FD | 	jmp	#LR__0554
05ff4                 | LR__0519
05ff4     70 0F B0 FD | 	call	#_compile_fun_varp
05ff8     FD 2C 02 F6 | 	mov	local08, result1
05ffc     88 01 90 FD | 	jmp	#LR__0554
06000                 | LR__0520
06000     64 0F B0 FD | 	call	#_compile_fun_varp
06004     FD 2C 02 F6 | 	mov	local08, result1
06008     7C 01 90 FD | 	jmp	#LR__0554
0600c                 | LR__0521
0600c     78 0B B0 FD | 	call	#_compile_fun_2p
06010     FD 26 02 F6 | 	mov	local05, result1
06014     70 01 90 FD | 	jmp	#LR__0554
06018                 | LR__0522
06018     48 2E B0 FD | 	call	#_expr
0601c                 | ' expr()
0601c                 | ' return 0
0601c     00 26 06 F6 | 	mov	local05, #0
06020     64 01 90 FD | 	jmp	#LR__0554
06024                 | LR__0523
06024     3C 2E B0 FD | 	call	#_expr
06028                 | ' expr()
06028                 | ' return 0
06028     00 26 06 F6 | 	mov	local05, #0
0602c     58 01 90 FD | 	jmp	#LR__0554
06030                 | LR__0524
06030     20 29 B0 FD | 	call	#_compile_next
06034     0C 02 90 FD | 	jmp	#LR__0555
06038                 | LR__0525
06038     28 2E B0 FD | 	call	#_expr
0603c                 | ' expr()
0603c                 | ' return 0
0603c     00 26 06 F6 | 	mov	local05, #0
06040     44 01 90 FD | 	jmp	#LR__0554
06044                 | LR__0526
06044     1C 2E B0 FD | 	call	#_expr
06048                 | ' expr()
06048                 | ' return 0
06048     00 26 06 F6 | 	mov	local05, #0
0604c     38 01 90 FD | 	jmp	#LR__0554
06050                 | LR__0527
06050     10 2E B0 FD | 	call	#_expr
06054                 | ' expr()
06054                 | ' return 0
06054     00 26 06 F6 | 	mov	local05, #0
06058     2C 01 90 FD | 	jmp	#LR__0554
0605c                 | LR__0528
0605c     04 2E B0 FD | 	call	#_expr
06060                 | ' expr()
06060                 | ' return 0
06060     00 26 06 F6 | 	mov	local05, #0
06064     20 01 90 FD | 	jmp	#LR__0554
06068                 | LR__0529
06068     5C 0C B0 FD | 	call	#_compile_fun_4p
0606c     FD 26 02 F6 | 	mov	local05, result1
06070     14 01 90 FD | 	jmp	#LR__0554
06074                 | LR__0530
06074     EC 2D B0 FD | 	call	#_expr
06078                 | ' expr()
06078                 | ' return 0
06078     00 26 06 F6 | 	mov	local05, #0
0607c     08 01 90 FD | 	jmp	#LR__0554
06080                 | LR__0531
06080     04 0B B0 FD | 	call	#_compile_fun_2p
06084     FD 26 02 F6 | 	mov	local05, result1
06088     FC 00 90 FD | 	jmp	#LR__0554
0608c                 | LR__0532
0608c     D8 0E B0 FD | 	call	#_compile_fun_varp
06090     FD 2C 02 F6 | 	mov	local08, result1
06094     F0 00 90 FD | 	jmp	#LR__0554
06098                 | LR__0533
06098     EC 0A B0 FD | 	call	#_compile_fun_2p
0609c     FD 26 02 F6 | 	mov	local05, result1
060a0     E4 00 90 FD | 	jmp	#LR__0554
060a4                 | LR__0534
060a4     E0 0A B0 FD | 	call	#_compile_fun_2p
060a8     FD 26 02 F6 | 	mov	local05, result1
060ac     D8 00 90 FD | 	jmp	#LR__0554
060b0                 | LR__0535
060b0     D4 0A B0 FD | 	call	#_compile_fun_2p
060b4     FD 26 02 F6 | 	mov	local05, result1
060b8     CC 00 90 FD | 	jmp	#LR__0554
060bc                 | LR__0536
060bc     54 0F B0 FD | 	call	#_compile_print
060c0     FD 26 02 F6 | 	mov	local05, result1
060c4     7C 01 90 FD | 	jmp	#LR__0555
060c8                 | LR__0537
060c8     98 2D B0 FD | 	call	#_expr
060cc                 | ' expr()
060cc                 | ' return 0
060cc     B8 00 90 FD | 	jmp	#LR__0554
060d0                 | LR__0538
060d0     94 0E B0 FD | 	call	#_compile_fun_varp
060d4     FD 2C 02 F6 | 	mov	local08, result1
060d8     AC 00 90 FD | 	jmp	#LR__0554
060dc                 | LR__0539
060dc     88 0E B0 FD | 	call	#_compile_fun_varp
060e0     FD 2C 02 F6 | 	mov	local08, result1
060e4     A0 00 90 FD | 	jmp	#LR__0554
060e8                 | LR__0540
060e8     9C 0A B0 FD | 	call	#_compile_fun_2p
060ec     FD 26 02 F6 | 	mov	local05, result1
060f0     94 00 90 FD | 	jmp	#LR__0554
060f4                 | LR__0541
060f4     90 0A B0 FD | 	call	#_compile_fun_2p
060f8     FD 26 02 F6 | 	mov	local05, result1
060fc     88 00 90 FD | 	jmp	#LR__0554
06100                 | LR__0542
06100     84 0A B0 FD | 	call	#_compile_fun_2p
06104     FD 26 02 F6 | 	mov	local05, result1
06108     7C 00 90 FD | 	jmp	#LR__0554
0610c                 | LR__0543
0610c     78 0A B0 FD | 	call	#_compile_fun_2p
06110     FD 26 02 F6 | 	mov	local05, result1
06114     70 00 90 FD | 	jmp	#LR__0554
06118                 | LR__0544
06118     6C 0A B0 FD | 	call	#_compile_fun_2p
0611c     FD 26 02 F6 | 	mov	local05, result1
06120     64 00 90 FD | 	jmp	#LR__0554
06124                 | LR__0545
06124     60 0A B0 FD | 	call	#_compile_fun_2p
06128     FD 26 02 F6 | 	mov	local05, result1
0612c     58 00 90 FD | 	jmp	#LR__0554
06130                 | LR__0546
06130     54 0A B0 FD | 	call	#_compile_fun_2p
06134     FD 26 02 F6 | 	mov	local05, result1
06138     4C 00 90 FD | 	jmp	#LR__0554
0613c                 | LR__0547
0613c     BC 0A B0 FD | 	call	#_compile_fun_3p
06140     FD 26 02 F6 | 	mov	local05, result1
06144     40 00 90 FD | 	jmp	#LR__0554
06148                 | LR__0548
06148     18 2D B0 FD | 	call	#_expr
0614c                 | ' expr()
0614c                 | ' return 0
0614c     00 26 06 F6 | 	mov	local05, #0
06150     34 00 90 FD | 	jmp	#LR__0554
06154                 | LR__0549
06154     30 0A B0 FD | 	call	#_compile_fun_2p
06158     FD 26 02 F6 | 	mov	local05, result1
0615c     28 00 90 FD | 	jmp	#LR__0554
06160                 | LR__0550
06160     24 0A B0 FD | 	call	#_compile_fun_2p
06164     FD 26 02 F6 | 	mov	local05, result1
06168     1C 00 90 FD | 	jmp	#LR__0554
0616c                 | LR__0551
0616c     18 0A B0 FD | 	call	#_compile_fun_2p
06170     FD 26 02 F6 | 	mov	local05, result1
06174     10 00 90 FD | 	jmp	#LR__0554
06178                 | LR__0552
06178     E8 01 B0 FD | 	call	#_compile_array_assign
0617c     C4 00 90 FD | 	jmp	#LR__0555
06180                 | LR__0553
06180     48 09 B0 FD | 	call	#_compile_unknown
06184     BC 00 90 FD | 	jmp	#LR__0555
06188                 | LR__0554
06188     14 23 02 F6 | 	mov	local03, local06
0618c     16 1F 02 F6 | 	mov	local01, local08
06190     0F 2B 02 F6 | 	mov	local07, local01
06194     10 2F 02 F6 | 	mov	local09, local02
06198     11 29 02 F6 | 	mov	local06, local03
0619c     6A 00 00 FF 
061a0     6C E4 05 F1 | 	add	objptr, ##54380
061a4     F2 1E 02 FB | 	rdlong	local01, objptr
061a8     0F 2D 02 F6 | 	mov	local08, local01
061ac     01 2C 66 F0 | 	shl	local08, #1
061b0     0F 2D 02 F1 | 	add	local08, local01
061b4     02 2C 66 F0 | 	shl	local08, #2
061b8     03 00 00 FF 
061bc     00 E4 85 F1 | 	sub	objptr, ##1536
061c0     F2 2C 02 F1 | 	add	local08, objptr
061c4     16 2B 62 FC | 	wrlong	local07, local08
061c8     03 00 00 FF 
061cc     00 E4 05 F1 | 	add	objptr, ##1536
061d0     F2 1E 02 FB | 	rdlong	local01, objptr
061d4     0F 2D 02 F6 | 	mov	local08, local01
061d8     01 2C 66 F0 | 	shl	local08, #1
061dc     0F 2D 02 F1 | 	add	local08, local01
061e0     02 2C 66 F0 | 	shl	local08, #2
061e4     03 00 00 FF 
061e8     00 E4 85 F1 | 	sub	objptr, ##1536
061ec     F2 2C 02 F1 | 	add	local08, objptr
061f0     04 2C 06 F1 | 	add	local08, #4
061f4     16 2F 62 FC | 	wrlong	local09, local08
061f8     03 00 00 FF 
061fc     00 E4 05 F1 | 	add	objptr, ##1536
06200     F2 1E 02 FB | 	rdlong	local01, objptr
06204     0F 2D 02 F6 | 	mov	local08, local01
06208     01 2C 66 F0 | 	shl	local08, #1
0620c     0F 2D 02 F1 | 	add	local08, local01
06210     02 2C 66 F0 | 	shl	local08, #2
06214     03 00 00 FF 
06218     00 E4 85 F1 | 	sub	objptr, ##1536
0621c     F2 2C 02 F1 | 	add	local08, objptr
06220     08 2C 06 F1 | 	add	local08, #8
06224     16 29 62 FC | 	wrlong	local06, local08
06228     03 00 00 FF 
0622c     00 E4 05 F1 | 	add	objptr, ##1536
06230     F2 2A 02 FB | 	rdlong	local07, objptr
06234     01 2A 06 F1 | 	add	local07, #1
06238     F2 2A 62 FC | 	wrlong	local07, objptr
0623c     6A 00 00 FF 
06240     6C E4 85 F1 | 	sub	objptr, ##54380
06244                 | LR__0555
06244                 | ' 
06244                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
06244                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
06244     00 24 0E F2 | 	cmp	local04, #0 wz
06248     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0624c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06250     38 00 90 5D |  if_ne	jmp	#LR__0556
06254     6A 00 00 FF 
06258     6C E4 05 F1 | 	add	objptr, ##54380
0625c     F2 2C 02 FB | 	rdlong	local08, objptr
06260     16 1F 02 F6 | 	mov	local01, local08
06264     01 1E 66 F0 | 	shl	local01, #1
06268     16 1F 02 F1 | 	add	local01, local08
0626c     02 1E 66 F0 | 	shl	local01, #2
06270     03 00 00 FF 
06274     00 E4 85 F1 | 	sub	objptr, ##1536
06278     F2 1E 02 F1 | 	add	local01, objptr
0627c     08 1E 06 F1 | 	add	local01, #8
06280     0F FD 6B FC | 	wrlong	#510, local01
06284     67 00 00 FF 
06288     6C E4 85 F1 | 	sub	objptr, ##52844
0628c                 | LR__0556
0628c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0628c     6A 00 00 FF 
06290     6C E4 05 F1 | 	add	objptr, ##54380
06294     F2 1E 02 FB | 	rdlong	local01, objptr
06298     6A 00 00 FF 
0629c     6C E4 85 F1 | 	sub	objptr, ##54380
062a0     97 58 48 FB | 	callpa	#(@LR__0559-@LR__0557)>>2,fcache_load_ptr_
062a4                 | LR__0557
062a4     0F 2D 02 F6 | 	mov	local08, local01
062a8     01 2C 66 F0 | 	shl	local08, #1
062ac     0F 2D 02 F1 | 	add	local08, local01
062b0     02 2C 66 F0 | 	shl	local08, #2
062b4     67 00 00 FF 
062b8     6C E4 05 F1 | 	add	objptr, ##52844
062bc     F2 2C 02 F1 | 	add	local08, objptr
062c0     08 2C 06 F1 | 	add	local08, #8
062c4     16 2D 02 FB | 	rdlong	local08, local08
062c8     9B 2C 0E F2 | 	cmp	local08, #155 wz
062cc     67 00 00 FF 
062d0     6C E4 85 F1 | 	sub	objptr, ##52844
062d4     70 00 90 5D |  if_ne	jmp	#LR__0558
062d8     0F 2D 02 F6 | 	mov	local08, local01
062dc     01 2C 86 F1 | 	sub	local08, #1
062e0     16 2F 02 F6 | 	mov	local09, local08
062e4     01 2E 66 F0 | 	shl	local09, #1
062e8     16 2F 02 F1 | 	add	local09, local08
062ec     02 2E 66 F0 | 	shl	local09, #2
062f0     67 00 00 FF 
062f4     6C E4 05 F1 | 	add	objptr, ##52844
062f8     F2 2E 02 F1 | 	add	local09, objptr
062fc     08 2E 06 F1 | 	add	local09, #8
06300     17 2D 02 FB | 	rdlong	local08, local09
06304     11 2C 0E F2 | 	cmp	local08, #17 wz
06308     67 00 00 FF 
0630c     6C E4 85 F1 | 	sub	objptr, ##52844
06310     34 00 90 5D |  if_ne	jmp	#LR__0558
06314     0F 2F 02 F6 | 	mov	local09, local01
06318     01 2E 86 F1 | 	sub	local09, #1
0631c     17 2D 02 F6 | 	mov	local08, local09
06320     01 2C 66 F0 | 	shl	local08, #1
06324     17 2D 02 F1 | 	add	local08, local09
06328     02 2C 66 F0 | 	shl	local08, #2
0632c     67 00 00 FF 
06330     6C E4 05 F1 | 	add	objptr, ##52844
06334     F2 2C 02 F1 | 	add	local08, objptr
06338     08 2C 06 F1 | 	add	local08, #8
0633c     16 25 68 FC | 	wrlong	#18, local08
06340     67 00 00 FF 
06344     6C E4 85 F1 | 	sub	objptr, ##52844
06348                 | LR__0558
06348     01 1E 86 F1 | 	sub	local01, #1
0634c     01 1E 56 F2 | 	cmps	local01, #1 wc
06350     50 FF 9F 3D |  if_ae	jmp	#LR__0557
06354                 | LR__0559
06354                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
06354                 | ' return err
06354     13 FB 01 F6 | 	mov	result1, local05
06358     A7 F0 03 F6 | 	mov	ptra, fp
0635c     B2 00 A0 FD | 	call	#popregs_
06360                 | _compile_immediate_ret
06360     2D 00 64 FD | 	ret
06364                 | 
06364                 | ' 
06364                 | ' sub compile_array_assign
06364                 | _compile_array_assign
06364     0A 4A 05 F6 | 	mov	COUNT_, #10
06368     A8 00 A0 FD | 	call	#pushregs_
0636c     00 24 06 F6 | 	mov	local04, #0
06370     57 00 00 FF 
06374     34 E4 05 F1 | 	add	objptr, ##44596
06378     F2 26 02 FB | 	rdlong	local05, objptr
0637c     13 FB 01 F6 | 	mov	result1, local05
06380     01 FA 85 F1 | 	sub	result1, #1
06384     03 FA 65 F0 | 	shl	result1, #3
06388     02 00 00 FF 
0638c     38 E4 85 F1 | 	sub	objptr, ##1080
06390     F2 FA 01 F1 | 	add	result1, objptr
06394     FD 28 02 FB | 	rdlong	local06, result1
06398                 | ' numpar=0
06398                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06398                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06398                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06398                 | ' if lparts(ct).token=token_lpar then
06398     03 26 66 F0 | 	shl	local05, #3
0639c     F2 26 02 F1 | 	add	local05, objptr
063a0     04 26 06 F1 | 	add	local05, #4
063a4     13 27 02 FB | 	rdlong	local05, local05
063a8     15 26 0E F2 | 	cmp	local05, #21 wz
063ac     54 00 00 FF 
063b0     FC E5 85 F1 | 	sub	objptr, ##43516
063b4     D4 01 90 5D |  if_ne	jmp	#LR__0564
063b8     57 00 00 FF 
063bc     34 E4 05 F1 | 	add	objptr, ##44596
063c0     F2 2A 02 FB | 	rdlong	local07, objptr
063c4     01 2A 06 F1 | 	add	local07, #1
063c8     F2 2A 62 FC | 	wrlong	local07, objptr
063cc     57 00 00 FF 
063d0     34 E4 85 F1 | 	sub	objptr, ##44596
063d4                 | '   ct+=1 											' omit this lpar, this is for expr list
063d4                 | '   do
063d4                 | LR__0560
063d4     8C 2A B0 FD | 	call	#_expr
063d8     57 00 00 FF 
063dc     34 E4 05 F1 | 	add	objptr, ##44596
063e0     F2 26 02 FB | 	rdlong	local05, objptr
063e4     01 26 06 F1 | 	add	local05, #1
063e8     F2 26 62 FC | 	wrlong	local05, objptr
063ec     01 24 06 F1 | 	add	local04, #1
063f0     01 26 86 F1 | 	sub	local05, #1
063f4     03 26 66 F0 | 	shl	local05, #3
063f8     02 00 00 FF 
063fc     38 E4 85 F1 | 	sub	objptr, ##1080
06400     F2 26 02 F1 | 	add	local05, objptr
06404     04 26 06 F1 | 	add	local05, #4
06408     13 2B 02 FB | 	rdlong	local07, local05
0640c     14 2A 0E F2 | 	cmp	local07, #20 wz
06410     54 00 00 FF 
06414     FC E5 85 F1 | 	sub	objptr, ##43516
06418     34 00 90 AD |  if_e	jmp	#LR__0561
0641c     57 00 00 FF 
06420     34 E4 05 F1 | 	add	objptr, ##44596
06424     F2 2A 02 FB | 	rdlong	local07, objptr
06428     03 2A 66 F0 | 	shl	local07, #3
0642c     02 00 00 FF 
06430     38 E4 85 F1 | 	sub	objptr, ##1080
06434     F2 2A 02 F1 | 	add	local07, objptr
06438     04 2A 06 F1 | 	add	local07, #4
0643c     15 2B 02 FB | 	rdlong	local07, local07
06440     FE 2B 0E F2 | 	cmp	local07, #510 wz
06444     54 00 00 FF 
06448     FC E5 85 F1 | 	sub	objptr, ##43516
0644c     84 FF 9F 5D |  if_ne	jmp	#LR__0560
06450                 | LR__0561
06450     57 00 00 FF 
06454     34 E4 05 F1 | 	add	objptr, ##44596
06458     F2 2A 02 FB | 	rdlong	local07, objptr
0645c     01 2A 06 F1 | 	add	local07, #1
06460     F2 2A 62 FC | 	wrlong	local07, objptr
06464     57 00 00 FF 
06468     34 E4 85 F1 | 	sub	objptr, ##44596
0646c     F4 29 B0 FD | 	call	#_expr
06470     01 2C 66 F6 | 	neg	local08, #1
06474     00 2E 06 F6 | 	mov	local09, #0
06478                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06478                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06478                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06478                 | ' ct+=1 : expr()
06478                 | ' ' now find the vae
06478                 | ' 
06478                 | ' j=-1 : i=0 : do : 
06478                 | LR__0562
06478                 | '   if variables(i).name=varname$ then j=i: exit loop
06478     17 27 02 F6 | 	mov	local05, local09
0647c     04 26 66 F0 | 	shl	local05, #4
06480     34 00 00 FF 
06484     F8 E5 05 F1 | 	add	objptr, ##27128
06488     F2 26 02 F1 | 	add	local05, objptr
0648c     13 13 02 FB | 	rdlong	arg01, local05
06490     14 15 02 F6 | 	mov	arg02, local06
06494     34 00 00 FF 
06498     F8 E5 85 F1 | 	sub	objptr, ##27128
0649c     C0 80 B1 FD | 	call	#__system___string_cmp
064a0     00 FA 0D F2 | 	cmp	result1, #0 wz
064a4     17 2D 02 A6 |  if_e	mov	local08, local09
064a8     20 00 90 AD |  if_e	jmp	#LR__0563
064ac     01 2E 06 F1 | 	add	local09, #1
064b0     54 00 00 FF 
064b4     F8 E5 05 F1 | 	add	objptr, ##43512
064b8     F2 2A 02 FB | 	rdlong	local07, objptr
064bc     54 00 00 FF 
064c0     F8 E5 85 F1 | 	sub	objptr, ##43512
064c4     15 2F 5A F2 | 	cmps	local09, local07 wcz
064c8     AC FF 9F ED |  if_be	jmp	#LR__0562
064cc                 | LR__0563
064cc     16 1F 02 F6 | 	mov	local01, local08
064d0     12 21 02 F6 | 	mov	local02, local04
064d4     17 22 06 F6 | 	mov	local03, #23
064d8     0F 2B 02 F6 | 	mov	local07, local01
064dc     10 31 02 F6 | 	mov	local10, local02
064e0     11 2D 02 F6 | 	mov	local08, local03
064e4     6A 00 00 FF 
064e8     6C E4 05 F1 | 	add	objptr, ##54380
064ec     F2 1E 02 FB | 	rdlong	local01, objptr
064f0     0F 2F 02 F6 | 	mov	local09, local01
064f4     01 2E 66 F0 | 	shl	local09, #1
064f8     0F 2F 02 F1 | 	add	local09, local01
064fc     02 2E 66 F0 | 	shl	local09, #2
06500     03 00 00 FF 
06504     00 E4 85 F1 | 	sub	objptr, ##1536
06508     F2 2E 02 F1 | 	add	local09, objptr
0650c     17 2B 62 FC | 	wrlong	local07, local09
06510     03 00 00 FF 
06514     00 E4 05 F1 | 	add	objptr, ##1536
06518     F2 1E 02 FB | 	rdlong	local01, objptr
0651c     0F 2F 02 F6 | 	mov	local09, local01
06520     01 2E 66 F0 | 	shl	local09, #1
06524     0F 2F 02 F1 | 	add	local09, local01
06528     02 2E 66 F0 | 	shl	local09, #2
0652c     03 00 00 FF 
06530     00 E4 85 F1 | 	sub	objptr, ##1536
06534     F2 2E 02 F1 | 	add	local09, objptr
06538     04 2E 06 F1 | 	add	local09, #4
0653c     17 31 62 FC | 	wrlong	local10, local09
06540     03 00 00 FF 
06544     00 E4 05 F1 | 	add	objptr, ##1536
06548     F2 30 02 FB | 	rdlong	local10, objptr
0654c     18 1F 02 F6 | 	mov	local01, local10
06550     01 1E 66 F0 | 	shl	local01, #1
06554     18 1F 02 F1 | 	add	local01, local10
06558     02 1E 66 F0 | 	shl	local01, #2
0655c     03 00 00 FF 
06560     00 E4 85 F1 | 	sub	objptr, ##1536
06564     F2 1E 02 F1 | 	add	local01, objptr
06568     08 1E 06 F1 | 	add	local01, #8
0656c     0F 2D 62 FC | 	wrlong	local08, local01
06570     03 00 00 FF 
06574     00 E4 05 F1 | 	add	objptr, ##1536
06578     F2 2A 02 FB | 	rdlong	local07, objptr
0657c     01 2A 06 F1 | 	add	local07, #1
06580     F2 2A 62 FC | 	wrlong	local07, objptr
06584     6A 00 00 FF 
06588     6C E4 85 F1 | 	sub	objptr, ##54380
0658c                 | LR__0564
0658c     A7 F0 03 F6 | 	mov	ptra, fp
06590     B2 00 A0 FD | 	call	#popregs_
06594                 | _compile_array_assign_ret
06594     2D 00 64 FD | 	ret
06598                 | 
06598                 | ' 
06598                 | ' 
06598                 | ' sub compile_immediate_assign(linetype as ulong)
06598                 | _compile_immediate_assign
06598     09 4A 05 F6 | 	mov	COUNT_, #9
0659c     A8 00 A0 FD | 	call	#pushregs_
065a0     09 25 0A F6 | 	mov	local04, arg01 wz
065a4     FF 22 06 F6 | 	mov	local03, #255
065a8     01 26 66 F6 | 	neg	local05, #1
065ac                 | ' 
065ac                 | ' t1.result_type=result_error : t1.result.uresult=0
065ac                 | ' i=-1: j=-1
065ac                 | ' 
065ac                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
065ac     2C 00 90 5D |  if_ne	jmp	#LR__0570
065b0     54 00 00 FF 
065b4     FC E5 05 F1 | 	add	objptr, ##43516
065b8     F2 28 02 FB | 	rdlong	local06, objptr
065bc     02 00 00 FF 
065c0     38 E4 05 F1 | 	add	objptr, ##1080
065c4     F2 04 68 FC | 	wrlong	#2, objptr
065c8     13 00 00 FF 
065cc     38 E4 05 F1 | 	add	objptr, ##9784
065d0     F2 00 68 FC | 	wrlong	#0, objptr
065d4     6A 00 00 FF 
065d8     6C E4 85 F1 | 	sub	objptr, ##54380
065dc                 | LR__0570
065dc                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
065dc     02 24 0E F2 | 	cmp	local04, #2 wz
065e0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
065e4     54 00 00 AF 
065e8     FC E5 05 A1 |  if_e	add	objptr, ##43516
065ec     F2 28 02 AB |  if_e	rdlong	local06, objptr
065f0     02 00 00 AF 
065f4     38 E4 05 A1 |  if_e	add	objptr, ##1080
065f8     F2 04 68 AC |  if_e	wrlong	#2, objptr
065fc     57 00 00 AF 
06600     34 E4 85 A1 |  if_e	sub	objptr, ##44596
06604                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
06604     04 24 0E F2 | 	cmp	local04, #4 wz
06608     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0660c     2C 00 90 5D |  if_ne	jmp	#LR__0571
06610     55 00 00 FF 
06614     04 E4 05 F1 | 	add	objptr, ##43524
06618     F2 28 02 FB | 	rdlong	local06, objptr
0661c     02 00 00 FF 
06620     30 E4 05 F1 | 	add	objptr, ##1072
06624     F2 06 68 FC | 	wrlong	#3, objptr
06628     13 00 00 FF 
0662c     38 E4 05 F1 | 	add	objptr, ##9784
06630     F2 04 68 FC | 	wrlong	#2, objptr
06634     6A 00 00 FF 
06638     6C E4 85 F1 | 	sub	objptr, ##54380
0663c                 | LR__0571
0663c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0663c     05 24 0E F2 | 	cmp	local04, #5 wz
06640     3C 00 90 5D |  if_ne	jmp	#LR__0572
06644     57 00 00 FF 
06648     34 E4 05 F1 | 	add	objptr, ##44596
0664c     F2 FA 01 FB | 	rdlong	result1, objptr
06650     FD 28 02 F6 | 	mov	local06, result1
06654     03 28 66 F0 | 	shl	local06, #3
06658     02 00 00 FF 
0665c     38 E4 85 F1 | 	sub	objptr, ##1080
06660     F2 28 02 F1 | 	add	local06, objptr
06664     14 29 02 FB | 	rdlong	local06, local06
06668     02 FA 05 F1 | 	add	result1, #2
0666c     02 00 00 FF 
06670     38 E4 05 F1 | 	add	objptr, ##1080
06674     F2 FA 61 FC | 	wrlong	result1, objptr
06678     57 00 00 FF 
0667c     34 E4 85 F1 | 	sub	objptr, ##44596
06680                 | LR__0572
06680     14 13 02 F6 | 	mov	arg01, local06
06684     01 14 06 F6 | 	mov	arg02, #1
06688     78 9F B1 FD | 	call	#__system__Right_S
0668c     D4 27 B0 FD | 	call	#_expr
06690                 | '  
06690                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06690                 | ' 
06690                 | ' suffix2$=right$(varname2$,1)
06690                 | ' expr()
06690                 | ' 
06690                 | ' 
06690                 | ' if varnum>0 then
06690     54 00 00 FF 
06694     F8 E5 05 F1 | 	add	objptr, ##43512
06698     F2 2A 02 FB | 	rdlong	local07, objptr
0669c     54 00 00 FF 
066a0     F8 E5 85 F1 | 	sub	objptr, ##43512
066a4     01 2A 56 F2 | 	cmps	local07, #1 wc
066a8     58 00 90 CD |  if_b	jmp	#LR__0575
066ac                 | '   for i=0 to varnum-1
066ac     00 2C 06 F6 | 	mov	local08, #0
066b0     54 00 00 FF 
066b4     F8 E5 05 F1 | 	add	objptr, ##43512
066b8     F2 2E 02 FB | 	rdlong	local09, objptr
066bc     54 00 00 FF 
066c0     F8 E5 85 F1 | 	sub	objptr, ##43512
066c4                 | LR__0573
066c4     17 2D 52 F2 | 	cmps	local08, local09 wc
066c8     38 00 90 3D |  if_ae	jmp	#LR__0574
066cc                 | '     if variables(i).name=varname2$ then j=i : exit
066cc     16 2B 02 F6 | 	mov	local07, local08
066d0     04 2A 66 F0 | 	shl	local07, #4
066d4     34 00 00 FF 
066d8     F8 E5 05 F1 | 	add	objptr, ##27128
066dc     F2 2A 02 F1 | 	add	local07, objptr
066e0     15 13 02 FB | 	rdlong	arg01, local07
066e4     14 15 02 F6 | 	mov	arg02, local06
066e8     34 00 00 FF 
066ec     F8 E5 85 F1 | 	sub	objptr, ##27128
066f0     6C 7E B1 FD | 	call	#__system___string_cmp
066f4     00 FA 0D F2 | 	cmp	result1, #0 wz
066f8     16 27 02 A6 |  if_e	mov	local05, local08
066fc     01 2C 06 51 |  if_ne	add	local08, #1
06700     C0 FF 9F 5D |  if_ne	jmp	#LR__0573
06704                 | LR__0574
06704                 | LR__0575
06704                 | ' if  j=-1 andalso varnum<maxvars then   
06704     FF FF 7F FF 
06708     FF 27 0E F2 | 	cmp	local05, ##-1 wz
0670c     60 00 90 5D |  if_ne	jmp	#LR__0576
06710     54 00 00 FF 
06714     F8 E5 05 F1 | 	add	objptr, ##43512
06718     F2 2A 02 FB | 	rdlong	local07, objptr
0671c     54 00 00 FF 
06720     F8 E5 85 F1 | 	sub	objptr, ##43512
06724     01 00 00 FF 
06728     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
0672c     40 00 90 3D |  if_ae	jmp	#LR__0576
06730     54 00 00 FF 
06734     F8 E5 05 F1 | 	add	objptr, ##43512
06738     F2 2E 02 FB | 	rdlong	local09, objptr
0673c     04 2E 66 F0 | 	shl	local09, #4
06740     20 00 00 FF 
06744     00 E4 85 F1 | 	sub	objptr, ##16384
06748     F2 2E 02 F1 | 	add	local09, objptr
0674c     17 29 62 FC | 	wrlong	local06, local09
06750     20 00 00 FF 
06754     00 E4 05 F1 | 	add	objptr, ##16384
06758     F2 2A 02 FB | 	rdlong	local07, objptr
0675c     15 27 02 F6 | 	mov	local05, local07
06760     01 2A 06 F1 | 	add	local07, #1
06764     F2 2A 62 FC | 	wrlong	local07, objptr
06768     54 00 00 FF 
0676c     F8 E5 85 F1 | 	sub	objptr, ##43512
06770                 | LR__0576
06770     13 1F 02 F6 | 	mov	local01, local05
06774     17 22 06 F6 | 	mov	local03, #23
06778     0F 2B 02 F6 | 	mov	local07, local01
0677c     10 2F 02 F6 | 	mov	local09, local02
06780     11 1F 02 F6 | 	mov	local01, local03
06784     6A 00 00 FF 
06788     6C E4 05 F1 | 	add	objptr, ##54380
0678c     F2 2C 02 FB | 	rdlong	local08, objptr
06790     16 29 02 F6 | 	mov	local06, local08
06794     01 28 66 F0 | 	shl	local06, #1
06798     16 29 02 F1 | 	add	local06, local08
0679c     02 28 66 F0 | 	shl	local06, #2
067a0     03 00 00 FF 
067a4     00 E4 85 F1 | 	sub	objptr, ##1536
067a8     F2 28 02 F1 | 	add	local06, objptr
067ac     14 2B 62 FC | 	wrlong	local07, local06
067b0     03 00 00 FF 
067b4     00 E4 05 F1 | 	add	objptr, ##1536
067b8     F2 2C 02 FB | 	rdlong	local08, objptr
067bc     16 2B 02 F6 | 	mov	local07, local08
067c0     01 2A 66 F0 | 	shl	local07, #1
067c4     16 2B 02 F1 | 	add	local07, local08
067c8     02 2A 66 F0 | 	shl	local07, #2
067cc     03 00 00 FF 
067d0     00 E4 85 F1 | 	sub	objptr, ##1536
067d4     F2 2A 02 F1 | 	add	local07, objptr
067d8     04 2A 06 F1 | 	add	local07, #4
067dc     15 2F 62 FC | 	wrlong	local09, local07
067e0     03 00 00 FF 
067e4     00 E4 05 F1 | 	add	objptr, ##1536
067e8     F2 2E 02 FB | 	rdlong	local09, objptr
067ec     17 2D 02 F6 | 	mov	local08, local09
067f0     01 2C 66 F0 | 	shl	local08, #1
067f4     17 2D 02 F1 | 	add	local08, local09
067f8     02 2C 66 F0 | 	shl	local08, #2
067fc     03 00 00 FF 
06800     00 E4 85 F1 | 	sub	objptr, ##1536
06804     F2 2C 02 F1 | 	add	local08, objptr
06808     08 2C 06 F1 | 	add	local08, #8
0680c     16 1F 62 FC | 	wrlong	local01, local08
06810     03 00 00 FF 
06814     00 E4 05 F1 | 	add	objptr, ##1536
06818     F2 2A 02 FB | 	rdlong	local07, objptr
0681c     01 2A 06 F1 | 	add	local07, #1
06820     F2 2A 62 FC | 	wrlong	local07, objptr
06824     6A 00 00 FF 
06828     6C E4 85 F1 | 	sub	objptr, ##54380
0682c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
0682c                 | ' 
0682c                 | ' 
0682c                 | ' 
0682c                 | ' 
0682c                 | ' 
0682c                 | ' 
0682c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
0682c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0682c     00 24 0E F2 | 	cmp	local04, #0 wz
06830     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06834     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06838     38 00 90 5D |  if_ne	jmp	#LR__0577
0683c     6A 00 00 FF 
06840     6C E4 05 F1 | 	add	objptr, ##54380
06844     F2 1E 02 FB | 	rdlong	local01, objptr
06848     0F 2F 02 F6 | 	mov	local09, local01
0684c     01 2E 66 F0 | 	shl	local09, #1
06850     0F 2F 02 F1 | 	add	local09, local01
06854     02 2E 66 F0 | 	shl	local09, #2
06858     03 00 00 FF 
0685c     00 E4 85 F1 | 	sub	objptr, ##1536
06860     F2 2E 02 F1 | 	add	local09, objptr
06864     08 2E 06 F1 | 	add	local09, #8
06868     17 FD 6B FC | 	wrlong	#510, local09
0686c     67 00 00 FF 
06870     6C E4 85 F1 | 	sub	objptr, ##52844
06874                 | LR__0577
06874     A7 F0 03 F6 | 	mov	ptra, fp
06878     B2 00 A0 FD | 	call	#popregs_
0687c                 | _compile_immediate_assign_ret
0687c     2D 00 64 FD | 	ret
06880                 | 
06880                 | ' 
06880                 | ' ' ------------------ compile the line that is calling a command 
06880                 | ' 
06880                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06880                 | _compile
06880     04 4A 05 F6 | 	mov	COUNT_, #4
06884     A8 00 A0 FD | 	call	#pushregs_
06888     09 1F 0A F6 | 	mov	local01, arg01 wz
0688c     0A 21 02 F6 | 	mov	local02, arg02
06890     0B 23 02 F6 | 	mov	local03, arg03
06894                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06894                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06894                 | '  
06894                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06894                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06894     0C 00 90 5D |  if_ne	jmp	#LR__0580
06898     00 12 06 F6 | 	mov	arg01, #0
0689c     24 F3 BF FD | 	call	#_compile_immediate
068a0     A0 00 90 FD | 	jmp	#LR__0587
068a4                 | LR__0580
068a4     67 00 00 FF 
068a8     6C E4 05 F1 | 	add	objptr, ##52844
068ac     F2 1E 62 FC | 	wrlong	local01, objptr
068b0     04 E4 05 F1 | 	add	objptr, #4
068b4     F2 20 62 FC | 	wrlong	local02, objptr
068b8     67 00 00 FF 
068bc     70 E4 85 F1 | 	sub	objptr, ##52848
068c0     11 13 02 F6 | 	mov	arg01, local03
068c4     01 12 06 F1 | 	add	arg01, #1
068c8     F8 F2 BF FD | 	call	#_compile_immediate
068cc     FD 24 0A F6 | 	mov	local04, result1 wz
068d0                 | ' 
068d0                 | ' ucompiledline(0)=alinemajor
068d0                 | ' ucompiledline(1)=alineminor
068d0                 | ' 
068d0                 | ' 
068d0                 | ' ' cont: 0: this is the first part of the line that will continue
068d0                 | ' ' 1 - this is the continuation of the line
068d0                 | ' ' 2 - this is the last continued line
068d0                 | ' ' 3 - this is the ome and only part
068d0                 | ' 
068d0                 | ' err=compile_immediate(cont+1) 
068d0                 | ' if err=0 then
068d0     6C 00 90 5D |  if_ne	jmp	#LR__0586
068d4                 | '   if cont=3 orelse cont=2 then 
068d4     03 22 0E F2 | 	cmp	local03, #3 wz
068d8     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
068dc     60 00 90 5D |  if_ne	jmp	#LR__0585
068e0                 | '     if alinemajor >lastline then 
068e0     6A 00 00 FF 
068e4     78 E4 05 F1 | 	add	objptr, ##54392
068e8     F2 16 02 FB | 	rdlong	arg03, objptr
068ec     6A 00 00 FF 
068f0     78 E4 85 F1 | 	sub	objptr, ##54392
068f4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
068f8     0C 00 90 ED |  if_be	jmp	#LR__0581
068fc     0F 13 02 F6 | 	mov	arg01, local01
06900     00 F2 BF FD | 	call	#_add_line_at_end
06904     38 00 90 FD | 	jmp	#LR__0584
06908                 | LR__0581
06908     0F 13 02 F6 | 	mov	arg01, local01
0690c     30 EB BF FD | 	call	#_deleteline
06910                 | '       deleteline(alinemajor)  
06910                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
06910     6A 00 00 FF 
06914     78 E4 05 F1 | 	add	objptr, ##54392
06918     F2 16 02 FB | 	rdlong	arg03, objptr
0691c     6A 00 00 FF 
06920     78 E4 85 F1 | 	sub	objptr, ##54392
06924     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06928     0C 00 90 ED |  if_be	jmp	#LR__0582
0692c     0F 13 02 F6 | 	mov	arg01, local01
06930     D0 F1 BF FD | 	call	#_add_line_at_end
06934     08 00 90 FD | 	jmp	#LR__0583
06938                 | LR__0582
06938     0F 13 02 F6 | 	mov	arg01, local01
0693c     A8 EF BF FD | 	call	#_insertline
06940                 | LR__0583
06940                 | LR__0584
06940                 | LR__0585
06940                 | LR__0586
06940                 | ' return err
06940     12 FB 01 F6 | 	mov	result1, local04
06944                 | LR__0587
06944     A7 F0 03 F6 | 	mov	ptra, fp
06948     B2 00 A0 FD | 	call	#popregs_
0694c                 | _compile_ret
0694c     2D 00 64 FD | 	ret
06950                 | 
06950                 | ' 
06950                 | ' ' ------------------ compile the line that is assigning to a variable
06950                 | ' 
06950                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06950                 | _compile_assign
06950     03 4A 05 F6 | 	mov	COUNT_, #3
06954     A8 00 A0 FD | 	call	#pushregs_
06958     09 1F 0A F6 | 	mov	local01, arg01 wz
0695c     0A 21 02 F6 | 	mov	local02, arg02
06960     0B 23 02 F6 | 	mov	local03, arg03
06964                 | ' 
06964                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06964                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06964     0C 00 90 5D |  if_ne	jmp	#LR__0590
06968     00 12 06 F6 | 	mov	arg01, #0
0696c     28 FC BF FD | 	call	#_compile_immediate_assign
06970     94 00 90 FD | 	jmp	#LR__0596
06974                 | LR__0590
06974     67 00 00 FF 
06978     6C E4 05 F1 | 	add	objptr, ##52844
0697c     F2 1E 62 FC | 	wrlong	local01, objptr
06980     04 E4 05 F1 | 	add	objptr, #4
06984     F2 20 62 FC | 	wrlong	local02, objptr
06988     67 00 00 FF 
0698c     70 E4 85 F1 | 	sub	objptr, ##52848
06990     11 13 02 F6 | 	mov	arg01, local03
06994     01 12 06 F1 | 	add	arg01, #1
06998     FC FB BF FD | 	call	#_compile_immediate_assign
0699c                 | ' 
0699c                 | ' ucompiledline(0)=alinemajor
0699c                 | ' ucompiledline(1)=alineminor
0699c                 | ' 
0699c                 | ' compile_immediate_assign(cont+1) 
0699c                 | ' 
0699c                 | ' if cont=3 orelse cont=2 then 
0699c     03 22 0E F2 | 	cmp	local03, #3 wz
069a0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
069a4     60 00 90 5D |  if_ne	jmp	#LR__0595
069a8                 | '   if alinemajor >lastline then 
069a8     6A 00 00 FF 
069ac     78 E4 05 F1 | 	add	objptr, ##54392
069b0     F2 16 02 FB | 	rdlong	arg03, objptr
069b4     6A 00 00 FF 
069b8     78 E4 85 F1 | 	sub	objptr, ##54392
069bc     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069c0     0C 00 90 ED |  if_be	jmp	#LR__0591
069c4     0F 13 02 F6 | 	mov	arg01, local01
069c8     38 F1 BF FD | 	call	#_add_line_at_end
069cc     38 00 90 FD | 	jmp	#LR__0594
069d0                 | LR__0591
069d0     0F 13 02 F6 | 	mov	arg01, local01
069d4     68 EA BF FD | 	call	#_deleteline
069d8                 | '     deleteline(alinemajor)  
069d8                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
069d8     6A 00 00 FF 
069dc     78 E4 05 F1 | 	add	objptr, ##54392
069e0     F2 16 02 FB | 	rdlong	arg03, objptr
069e4     6A 00 00 FF 
069e8     78 E4 85 F1 | 	sub	objptr, ##54392
069ec     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069f0     0C 00 90 ED |  if_be	jmp	#LR__0592
069f4     0F 13 02 F6 | 	mov	arg01, local01
069f8     08 F1 BF FD | 	call	#_add_line_at_end
069fc     08 00 90 FD | 	jmp	#LR__0593
06a00                 | LR__0592
06a00     0F 13 02 F6 | 	mov	arg01, local01
06a04     E0 EE BF FD | 	call	#_insertline
06a08                 | LR__0593
06a08                 | LR__0594
06a08                 | LR__0595
06a08                 | LR__0596
06a08     A7 F0 03 F6 | 	mov	ptra, fp
06a0c     B2 00 A0 FD | 	call	#popregs_
06a10                 | _compile_assign_ret
06a10     2D 00 64 FD | 	ret
06a14                 | 
06a14                 | ' 
06a14                 | ' sub compile_error(errno)
06a14                 | _compile_error
06a14     FF 04 06 F6 | 	mov	_var03, #255
06a18     01 07 02 F6 | 	mov	_var04, _var02
06a1c     02 09 02 F6 | 	mov	_var05, _var03
06a20     6A 00 00 FF 
06a24     6C E4 05 F1 | 	add	objptr, ##54380
06a28     F2 0A 02 FB | 	rdlong	_var06, objptr
06a2c     05 0D 02 F6 | 	mov	_var07, _var06
06a30     01 0C 66 F0 | 	shl	_var07, #1
06a34     05 0D 02 F1 | 	add	_var07, _var06
06a38     02 0C 66 F0 | 	shl	_var07, #2
06a3c     03 00 00 FF 
06a40     00 E4 85 F1 | 	sub	objptr, ##1536
06a44     F2 0C 02 F1 | 	add	_var07, objptr
06a48     06 13 62 FC | 	wrlong	arg01, _var07
06a4c     03 00 00 FF 
06a50     00 E4 05 F1 | 	add	objptr, ##1536
06a54     F2 0C 02 FB | 	rdlong	_var07, objptr
06a58     06 0B 02 F6 | 	mov	_var06, _var07
06a5c     01 0A 66 F0 | 	shl	_var06, #1
06a60     06 0B 02 F1 | 	add	_var06, _var07
06a64     02 0A 66 F0 | 	shl	_var06, #2
06a68     03 00 00 FF 
06a6c     00 E4 85 F1 | 	sub	objptr, ##1536
06a70     F2 0A 02 F1 | 	add	_var06, objptr
06a74     04 0A 06 F1 | 	add	_var06, #4
06a78     05 07 62 FC | 	wrlong	_var04, _var06
06a7c     03 00 00 FF 
06a80     00 E4 05 F1 | 	add	objptr, ##1536
06a84     F2 0C 02 FB | 	rdlong	_var07, objptr
06a88     06 0B 02 F6 | 	mov	_var06, _var07
06a8c     01 0A 66 F0 | 	shl	_var06, #1
06a90     06 0B 02 F1 | 	add	_var06, _var07
06a94     02 0A 66 F0 | 	shl	_var06, #2
06a98     03 00 00 FF 
06a9c     00 E4 85 F1 | 	sub	objptr, ##1536
06aa0     F2 0A 02 F1 | 	add	_var06, objptr
06aa4     08 0A 06 F1 | 	add	_var06, #8
06aa8     05 09 62 FC | 	wrlong	_var05, _var06
06aac     03 00 00 FF 
06ab0     00 E4 05 F1 | 	add	objptr, ##1536
06ab4     F2 12 02 FB | 	rdlong	arg01, objptr
06ab8     01 12 06 F1 | 	add	arg01, #1
06abc     F2 12 62 FC | 	wrlong	arg01, objptr
06ac0     6A 00 00 FF 
06ac4     6C E4 85 F1 | 	sub	objptr, ##54380
06ac8                 | _compile_error_ret
06ac8     2D 00 64 FD | 	ret
06acc                 | 
06acc                 | ' 
06acc                 | ' sub compile_unknown() 
06acc                 | _compile_unknown
06acc     FF 04 06 F6 | 	mov	_var03, #255
06ad0     17 00 06 F6 | 	mov	_var01, #23
06ad4     01 07 02 F6 | 	mov	_var04, _var02
06ad8     02 01 02 F6 | 	mov	_var01, _var03
06adc     6A 00 00 FF 
06ae0     6C E4 05 F1 | 	add	objptr, ##54380
06ae4     F2 08 02 FB | 	rdlong	_var05, objptr
06ae8     04 0B 02 F6 | 	mov	_var06, _var05
06aec     01 0A 66 F0 | 	shl	_var06, #1
06af0     04 0B 02 F1 | 	add	_var06, _var05
06af4     02 0A 66 F0 | 	shl	_var06, #2
06af8     03 00 00 FF 
06afc     00 E4 85 F1 | 	sub	objptr, ##1536
06b00     F2 0A 02 F1 | 	add	_var06, objptr
06b04     05 2F 68 FC | 	wrlong	#23, _var06
06b08     03 00 00 FF 
06b0c     00 E4 05 F1 | 	add	objptr, ##1536
06b10     F2 0A 02 FB | 	rdlong	_var06, objptr
06b14     05 09 02 F6 | 	mov	_var05, _var06
06b18     01 08 66 F0 | 	shl	_var05, #1
06b1c     05 09 02 F1 | 	add	_var05, _var06
06b20     02 08 66 F0 | 	shl	_var05, #2
06b24     03 00 00 FF 
06b28     00 E4 85 F1 | 	sub	objptr, ##1536
06b2c     F2 08 02 F1 | 	add	_var05, objptr
06b30     04 08 06 F1 | 	add	_var05, #4
06b34     04 07 62 FC | 	wrlong	_var04, _var05
06b38     03 00 00 FF 
06b3c     00 E4 05 F1 | 	add	objptr, ##1536
06b40     F2 0A 02 FB | 	rdlong	_var06, objptr
06b44     05 09 02 F6 | 	mov	_var05, _var06
06b48     01 08 66 F0 | 	shl	_var05, #1
06b4c     05 09 02 F1 | 	add	_var05, _var06
06b50     02 08 66 F0 | 	shl	_var05, #2
06b54     03 00 00 FF 
06b58     00 E4 85 F1 | 	sub	objptr, ##1536
06b5c     F2 08 02 F1 | 	add	_var05, objptr
06b60     08 08 06 F1 | 	add	_var05, #8
06b64     04 01 62 FC | 	wrlong	_var01, _var05
06b68     03 00 00 FF 
06b6c     00 E4 05 F1 | 	add	objptr, ##1536
06b70     F2 0A 02 FB | 	rdlong	_var06, objptr
06b74     01 0A 06 F1 | 	add	_var06, #1
06b78     F2 0A 62 FC | 	wrlong	_var06, objptr
06b7c     6A 00 00 FF 
06b80     6C E4 85 F1 | 	sub	objptr, ##54380
06b84                 | _compile_unknown_ret
06b84     2D 00 64 FD | 	ret
06b88                 | 
06b88                 | ' 
06b88                 | ' function compile_fun_2p() as ulong
06b88                 | _compile_fun_2p
06b88     01 4A 05 F6 | 	mov	COUNT_, #1
06b8c     A8 00 A0 FD | 	call	#pushregs_
06b90     D0 22 B0 FD | 	call	#_expr
06b94                 | ' 
06b94                 | ' expr()
06b94                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b94     57 00 00 FF 
06b98     34 E4 05 F1 | 	add	objptr, ##44596
06b9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ba0     03 1E 66 F0 | 	shl	local01, #3
06ba4     02 00 00 FF 
06ba8     38 E4 85 F1 | 	sub	objptr, ##1080
06bac     F2 1E 02 F1 | 	add	local01, objptr
06bb0     04 1E 06 F1 | 	add	local01, #4
06bb4     0F 1F 02 FB | 	rdlong	local01, local01
06bb8     11 1E 0E F2 | 	cmp	local01, #17 wz
06bbc     54 00 00 FF 
06bc0     FC E5 85 F1 | 	sub	objptr, ##43516
06bc4     15 FA 05 56 |  if_ne	mov	result1, #21
06bc8     24 00 90 5D |  if_ne	jmp	#LR__0600
06bcc     57 00 00 FF 
06bd0     34 E4 05 F1 | 	add	objptr, ##44596
06bd4     F2 1E 02 FB | 	rdlong	local01, objptr
06bd8     01 1E 06 F1 | 	add	local01, #1
06bdc     F2 1E 62 FC | 	wrlong	local01, objptr
06be0     57 00 00 FF 
06be4     34 E4 85 F1 | 	sub	objptr, ##44596
06be8     78 22 B0 FD | 	call	#_expr
06bec     00 FA 05 F6 | 	mov	result1, #0
06bf0                 | LR__0600
06bf0     A7 F0 03 F6 | 	mov	ptra, fp
06bf4     B2 00 A0 FD | 	call	#popregs_
06bf8                 | _compile_fun_2p_ret
06bf8     2D 00 64 FD | 	ret
06bfc                 | 
06bfc                 | ' 
06bfc                 | ' function compile_fun_3p() as ulong
06bfc                 | _compile_fun_3p
06bfc     01 4A 05 F6 | 	mov	COUNT_, #1
06c00     A8 00 A0 FD | 	call	#pushregs_
06c04     5C 22 B0 FD | 	call	#_expr
06c08                 | ' 
06c08                 | ' expr()
06c08                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c08     57 00 00 FF 
06c0c     34 E4 05 F1 | 	add	objptr, ##44596
06c10     F2 1E 02 FB | 	rdlong	local01, objptr
06c14     03 1E 66 F0 | 	shl	local01, #3
06c18     02 00 00 FF 
06c1c     38 E4 85 F1 | 	sub	objptr, ##1080
06c20     F2 1E 02 F1 | 	add	local01, objptr
06c24     04 1E 06 F1 | 	add	local01, #4
06c28     0F 1F 02 FB | 	rdlong	local01, local01
06c2c     11 1E 0E F2 | 	cmp	local01, #17 wz
06c30     54 00 00 FF 
06c34     FC E5 85 F1 | 	sub	objptr, ##43516
06c38     15 FA 05 56 |  if_ne	mov	result1, #21
06c3c     7C 00 90 5D |  if_ne	jmp	#LR__0610
06c40     57 00 00 FF 
06c44     34 E4 05 F1 | 	add	objptr, ##44596
06c48     F2 1E 02 FB | 	rdlong	local01, objptr
06c4c     01 1E 06 F1 | 	add	local01, #1
06c50     F2 1E 62 FC | 	wrlong	local01, objptr
06c54     57 00 00 FF 
06c58     34 E4 85 F1 | 	sub	objptr, ##44596
06c5c     04 22 B0 FD | 	call	#_expr
06c60                 | ' expr()
06c60                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c60     57 00 00 FF 
06c64     34 E4 05 F1 | 	add	objptr, ##44596
06c68     F2 1E 02 FB | 	rdlong	local01, objptr
06c6c     03 1E 66 F0 | 	shl	local01, #3
06c70     02 00 00 FF 
06c74     38 E4 85 F1 | 	sub	objptr, ##1080
06c78     F2 1E 02 F1 | 	add	local01, objptr
06c7c     04 1E 06 F1 | 	add	local01, #4
06c80     0F 1F 02 FB | 	rdlong	local01, local01
06c84     11 1E 0E F2 | 	cmp	local01, #17 wz
06c88     54 00 00 FF 
06c8c     FC E5 85 F1 | 	sub	objptr, ##43516
06c90     15 FA 05 56 |  if_ne	mov	result1, #21
06c94     24 00 90 5D |  if_ne	jmp	#LR__0610
06c98     57 00 00 FF 
06c9c     34 E4 05 F1 | 	add	objptr, ##44596
06ca0     F2 1E 02 FB | 	rdlong	local01, objptr
06ca4     01 1E 06 F1 | 	add	local01, #1
06ca8     F2 1E 62 FC | 	wrlong	local01, objptr
06cac     57 00 00 FF 
06cb0     34 E4 85 F1 | 	sub	objptr, ##44596
06cb4     AC 21 B0 FD | 	call	#_expr
06cb8     00 FA 05 F6 | 	mov	result1, #0
06cbc                 | LR__0610
06cbc     A7 F0 03 F6 | 	mov	ptra, fp
06cc0     B2 00 A0 FD | 	call	#popregs_
06cc4                 | _compile_fun_3p_ret
06cc4     2D 00 64 FD | 	ret
06cc8                 | 
06cc8                 | ' 
06cc8                 | ' function compile_fun_4p() as ulong
06cc8                 | _compile_fun_4p
06cc8     01 4A 05 F6 | 	mov	COUNT_, #1
06ccc     A8 00 A0 FD | 	call	#pushregs_
06cd0     90 21 B0 FD | 	call	#_expr
06cd4                 | ' 
06cd4                 | ' expr()
06cd4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cd4     57 00 00 FF 
06cd8     34 E4 05 F1 | 	add	objptr, ##44596
06cdc     F2 1E 02 FB | 	rdlong	local01, objptr
06ce0     03 1E 66 F0 | 	shl	local01, #3
06ce4     02 00 00 FF 
06ce8     38 E4 85 F1 | 	sub	objptr, ##1080
06cec     F2 1E 02 F1 | 	add	local01, objptr
06cf0     04 1E 06 F1 | 	add	local01, #4
06cf4     0F 1F 02 FB | 	rdlong	local01, local01
06cf8     11 1E 0E F2 | 	cmp	local01, #17 wz
06cfc     54 00 00 FF 
06d00     FC E5 85 F1 | 	sub	objptr, ##43516
06d04     15 FA 05 56 |  if_ne	mov	result1, #21
06d08     D4 00 90 5D |  if_ne	jmp	#LR__0620
06d0c     57 00 00 FF 
06d10     34 E4 05 F1 | 	add	objptr, ##44596
06d14     F2 1E 02 FB | 	rdlong	local01, objptr
06d18     01 1E 06 F1 | 	add	local01, #1
06d1c     F2 1E 62 FC | 	wrlong	local01, objptr
06d20     57 00 00 FF 
06d24     34 E4 85 F1 | 	sub	objptr, ##44596
06d28     38 21 B0 FD | 	call	#_expr
06d2c                 | ' expr()
06d2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d2c     57 00 00 FF 
06d30     34 E4 05 F1 | 	add	objptr, ##44596
06d34     F2 1E 02 FB | 	rdlong	local01, objptr
06d38     03 1E 66 F0 | 	shl	local01, #3
06d3c     02 00 00 FF 
06d40     38 E4 85 F1 | 	sub	objptr, ##1080
06d44     F2 1E 02 F1 | 	add	local01, objptr
06d48     04 1E 06 F1 | 	add	local01, #4
06d4c     0F 1F 02 FB | 	rdlong	local01, local01
06d50     11 1E 0E F2 | 	cmp	local01, #17 wz
06d54     54 00 00 FF 
06d58     FC E5 85 F1 | 	sub	objptr, ##43516
06d5c     15 FA 05 56 |  if_ne	mov	result1, #21
06d60     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d64     57 00 00 FF 
06d68     34 E4 05 F1 | 	add	objptr, ##44596
06d6c     F2 1E 02 FB | 	rdlong	local01, objptr
06d70     01 1E 06 F1 | 	add	local01, #1
06d74     F2 1E 62 FC | 	wrlong	local01, objptr
06d78     57 00 00 FF 
06d7c     34 E4 85 F1 | 	sub	objptr, ##44596
06d80     E0 20 B0 FD | 	call	#_expr
06d84                 | ' expr()
06d84                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d84     57 00 00 FF 
06d88     34 E4 05 F1 | 	add	objptr, ##44596
06d8c     F2 1E 02 FB | 	rdlong	local01, objptr
06d90     03 1E 66 F0 | 	shl	local01, #3
06d94     02 00 00 FF 
06d98     38 E4 85 F1 | 	sub	objptr, ##1080
06d9c     F2 1E 02 F1 | 	add	local01, objptr
06da0     04 1E 06 F1 | 	add	local01, #4
06da4     0F 1F 02 FB | 	rdlong	local01, local01
06da8     11 1E 0E F2 | 	cmp	local01, #17 wz
06dac     54 00 00 FF 
06db0     FC E5 85 F1 | 	sub	objptr, ##43516
06db4     15 FA 05 56 |  if_ne	mov	result1, #21
06db8     24 00 90 5D |  if_ne	jmp	#LR__0620
06dbc     57 00 00 FF 
06dc0     34 E4 05 F1 | 	add	objptr, ##44596
06dc4     F2 1E 02 FB | 	rdlong	local01, objptr
06dc8     01 1E 06 F1 | 	add	local01, #1
06dcc     F2 1E 62 FC | 	wrlong	local01, objptr
06dd0     57 00 00 FF 
06dd4     34 E4 85 F1 | 	sub	objptr, ##44596
06dd8     88 20 B0 FD | 	call	#_expr
06ddc     00 FA 05 F6 | 	mov	result1, #0
06de0                 | LR__0620
06de0     A7 F0 03 F6 | 	mov	ptra, fp
06de4     B2 00 A0 FD | 	call	#popregs_
06de8                 | _compile_fun_4p_ret
06de8     2D 00 64 FD | 	ret
06dec                 | 
06dec                 | ' 
06dec                 | ' 
06dec                 | ' function compile_fun_5p() as ulong
06dec                 | _compile_fun_5p
06dec     01 4A 05 F6 | 	mov	COUNT_, #1
06df0     A8 00 A0 FD | 	call	#pushregs_
06df4     6C 20 B0 FD | 	call	#_expr
06df8                 | ' 
06df8                 | ' expr()
06df8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06df8     57 00 00 FF 
06dfc     34 E4 05 F1 | 	add	objptr, ##44596
06e00     F2 1E 02 FB | 	rdlong	local01, objptr
06e04     03 1E 66 F0 | 	shl	local01, #3
06e08     02 00 00 FF 
06e0c     38 E4 85 F1 | 	sub	objptr, ##1080
06e10     F2 1E 02 F1 | 	add	local01, objptr
06e14     04 1E 06 F1 | 	add	local01, #4
06e18     0F 1F 02 FB | 	rdlong	local01, local01
06e1c     11 1E 0E F2 | 	cmp	local01, #17 wz
06e20     54 00 00 FF 
06e24     FC E5 85 F1 | 	sub	objptr, ##43516
06e28     15 FA 05 56 |  if_ne	mov	result1, #21
06e2c     2C 01 90 5D |  if_ne	jmp	#LR__0630
06e30     57 00 00 FF 
06e34     34 E4 05 F1 | 	add	objptr, ##44596
06e38     F2 1E 02 FB | 	rdlong	local01, objptr
06e3c     01 1E 06 F1 | 	add	local01, #1
06e40     F2 1E 62 FC | 	wrlong	local01, objptr
06e44     57 00 00 FF 
06e48     34 E4 85 F1 | 	sub	objptr, ##44596
06e4c     14 20 B0 FD | 	call	#_expr
06e50                 | ' expr()
06e50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e50     57 00 00 FF 
06e54     34 E4 05 F1 | 	add	objptr, ##44596
06e58     F2 1E 02 FB | 	rdlong	local01, objptr
06e5c     03 1E 66 F0 | 	shl	local01, #3
06e60     02 00 00 FF 
06e64     38 E4 85 F1 | 	sub	objptr, ##1080
06e68     F2 1E 02 F1 | 	add	local01, objptr
06e6c     04 1E 06 F1 | 	add	local01, #4
06e70     0F 1F 02 FB | 	rdlong	local01, local01
06e74     11 1E 0E F2 | 	cmp	local01, #17 wz
06e78     54 00 00 FF 
06e7c     FC E5 85 F1 | 	sub	objptr, ##43516
06e80     15 FA 05 56 |  if_ne	mov	result1, #21
06e84     D4 00 90 5D |  if_ne	jmp	#LR__0630
06e88     57 00 00 FF 
06e8c     34 E4 05 F1 | 	add	objptr, ##44596
06e90     F2 1E 02 FB | 	rdlong	local01, objptr
06e94     01 1E 06 F1 | 	add	local01, #1
06e98     F2 1E 62 FC | 	wrlong	local01, objptr
06e9c     57 00 00 FF 
06ea0     34 E4 85 F1 | 	sub	objptr, ##44596
06ea4     BC 1F B0 FD | 	call	#_expr
06ea8                 | ' expr()
06ea8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ea8     57 00 00 FF 
06eac     34 E4 05 F1 | 	add	objptr, ##44596
06eb0     F2 1E 02 FB | 	rdlong	local01, objptr
06eb4     03 1E 66 F0 | 	shl	local01, #3
06eb8     02 00 00 FF 
06ebc     38 E4 85 F1 | 	sub	objptr, ##1080
06ec0     F2 1E 02 F1 | 	add	local01, objptr
06ec4     04 1E 06 F1 | 	add	local01, #4
06ec8     0F 1F 02 FB | 	rdlong	local01, local01
06ecc     11 1E 0E F2 | 	cmp	local01, #17 wz
06ed0     54 00 00 FF 
06ed4     FC E5 85 F1 | 	sub	objptr, ##43516
06ed8     15 FA 05 56 |  if_ne	mov	result1, #21
06edc     7C 00 90 5D |  if_ne	jmp	#LR__0630
06ee0     57 00 00 FF 
06ee4     34 E4 05 F1 | 	add	objptr, ##44596
06ee8     F2 1E 02 FB | 	rdlong	local01, objptr
06eec     01 1E 06 F1 | 	add	local01, #1
06ef0     F2 1E 62 FC | 	wrlong	local01, objptr
06ef4     57 00 00 FF 
06ef8     34 E4 85 F1 | 	sub	objptr, ##44596
06efc     64 1F B0 FD | 	call	#_expr
06f00                 | ' expr()
06f00                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f00     57 00 00 FF 
06f04     34 E4 05 F1 | 	add	objptr, ##44596
06f08     F2 1E 02 FB | 	rdlong	local01, objptr
06f0c     03 1E 66 F0 | 	shl	local01, #3
06f10     02 00 00 FF 
06f14     38 E4 85 F1 | 	sub	objptr, ##1080
06f18     F2 1E 02 F1 | 	add	local01, objptr
06f1c     04 1E 06 F1 | 	add	local01, #4
06f20     0F 1F 02 FB | 	rdlong	local01, local01
06f24     11 1E 0E F2 | 	cmp	local01, #17 wz
06f28     54 00 00 FF 
06f2c     FC E5 85 F1 | 	sub	objptr, ##43516
06f30     15 FA 05 56 |  if_ne	mov	result1, #21
06f34     24 00 90 5D |  if_ne	jmp	#LR__0630
06f38     57 00 00 FF 
06f3c     34 E4 05 F1 | 	add	objptr, ##44596
06f40     F2 1E 02 FB | 	rdlong	local01, objptr
06f44     01 1E 06 F1 | 	add	local01, #1
06f48     F2 1E 62 FC | 	wrlong	local01, objptr
06f4c     57 00 00 FF 
06f50     34 E4 85 F1 | 	sub	objptr, ##44596
06f54     0C 1F B0 FD | 	call	#_expr
06f58     00 FA 05 F6 | 	mov	result1, #0
06f5c                 | LR__0630
06f5c     A7 F0 03 F6 | 	mov	ptra, fp
06f60     B2 00 A0 FD | 	call	#popregs_
06f64                 | _compile_fun_5p_ret
06f64     2D 00 64 FD | 	ret
06f68                 | 
06f68                 | ' 
06f68                 | ' function compile_fun_varp() as ulong 
06f68                 | _compile_fun_varp
06f68     02 4A 05 F6 | 	mov	COUNT_, #2
06f6c     A8 00 A0 FD | 	call	#pushregs_
06f70     00 1E 06 F6 | 	mov	local01, #0
06f74                 | ' i=0
06f74                 | ' if lparts(ct).token<>token_end then
06f74     57 00 00 FF 
06f78     34 E4 05 F1 | 	add	objptr, ##44596
06f7c     F2 20 02 FB | 	rdlong	local02, objptr
06f80     03 20 66 F0 | 	shl	local02, #3
06f84     02 00 00 FF 
06f88     38 E4 85 F1 | 	sub	objptr, ##1080
06f8c     F2 20 02 F1 | 	add	local02, objptr
06f90     04 20 06 F1 | 	add	local02, #4
06f94     10 21 02 FB | 	rdlong	local02, local02
06f98     FE 21 0E F2 | 	cmp	local02, #510 wz
06f9c     54 00 00 FF 
06fa0     FC E5 85 F1 | 	sub	objptr, ##43516
06fa4     5C 00 90 AD |  if_e	jmp	#LR__0642
06fa8                 | '   do
06fa8                 | LR__0640
06fa8     B8 1E B0 FD | 	call	#_expr
06fac     01 1E 06 F1 | 	add	local01, #1
06fb0                 | '   expr()
06fb0                 | '    i+=1
06fb0                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06fb0     57 00 00 FF 
06fb4     34 E4 05 F1 | 	add	objptr, ##44596
06fb8     F2 20 02 FB | 	rdlong	local02, objptr
06fbc     03 20 66 F0 | 	shl	local02, #3
06fc0     02 00 00 FF 
06fc4     38 E4 85 F1 | 	sub	objptr, ##1080
06fc8     F2 20 02 F1 | 	add	local02, objptr
06fcc     04 20 06 F1 | 	add	local02, #4
06fd0     10 21 02 FB | 	rdlong	local02, local02
06fd4     11 20 0E F2 | 	cmp	local02, #17 wz
06fd8     54 00 00 FF 
06fdc     FC E5 85 F1 | 	sub	objptr, ##43516
06fe0     20 00 90 5D |  if_ne	jmp	#LR__0641
06fe4     57 00 00 FF 
06fe8     34 E4 05 F1 | 	add	objptr, ##44596
06fec     F2 20 02 FB | 	rdlong	local02, objptr
06ff0     01 20 06 F1 | 	add	local02, #1
06ff4     F2 20 62 FC | 	wrlong	local02, objptr
06ff8     57 00 00 FF 
06ffc     34 E4 85 F1 | 	sub	objptr, ##44596
07000     A4 FF 9F FD | 	jmp	#LR__0640
07004                 | LR__0641
07004                 | LR__0642
07004                 | ' return i
07004     0F FB 01 F6 | 	mov	result1, local01
07008     A7 F0 03 F6 | 	mov	ptra, fp
0700c     B2 00 A0 FD | 	call	#popregs_
07010                 | _compile_fun_varp_ret
07010     2D 00 64 FD | 	ret
07014                 | 
07014                 | ' 
07014                 | ' 
07014                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
07014                 | _compile_print
07014     0B 4A 05 F6 | 	mov	COUNT_, #11
07018     A8 00 A0 FD | 	call	#pushregs_
0701c     00 1E 06 F6 | 	mov	local01, #0
07020     1D 22 06 F6 | 	mov	local03, #29
07024                 | ' t1.result.uresult=0 : t1.result_type=result_uint
07024                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
07024     57 00 00 FF 
07028     34 E4 05 F1 | 	add	objptr, ##44596
0702c     F2 24 02 FB | 	rdlong	local04, objptr
07030     03 24 66 F0 | 	shl	local04, #3
07034     02 00 00 FF 
07038     38 E4 85 F1 | 	sub	objptr, ##1080
0703c     F2 24 02 F1 | 	add	local04, objptr
07040     04 24 06 F1 | 	add	local04, #4
07044     12 25 02 FB | 	rdlong	local04, local04
07048     FE 25 0E F2 | 	cmp	local04, #510 wz
0704c     54 00 00 FF 
07050     FC E5 85 F1 | 	sub	objptr, ##43516
07054     68 01 90 5D |  if_ne	jmp	#LR__0650
07058     20 22 06 F6 | 	mov	local03, #32
0705c     0F 27 02 F6 | 	mov	local05, local01
07060     10 29 02 F6 | 	mov	local06, local02
07064     11 2B 02 F6 | 	mov	local07, local03
07068     6A 00 00 FF 
0706c     6C E4 05 F1 | 	add	objptr, ##54380
07070     F2 2C 02 FB | 	rdlong	local08, objptr
07074     16 2F 02 F6 | 	mov	local09, local08
07078     01 2E 66 F0 | 	shl	local09, #1
0707c     16 2F 02 F1 | 	add	local09, local08
07080     02 2E 66 F0 | 	shl	local09, #2
07084     03 00 00 FF 
07088     00 E4 85 F1 | 	sub	objptr, ##1536
0708c     F2 2E 02 F1 | 	add	local09, objptr
07090     17 27 62 FC | 	wrlong	local05, local09
07094     03 00 00 FF 
07098     00 E4 05 F1 | 	add	objptr, ##1536
0709c     F2 26 02 FB | 	rdlong	local05, objptr
070a0     13 31 02 F6 | 	mov	local10, local05
070a4     01 30 66 F0 | 	shl	local10, #1
070a8     13 31 02 F1 | 	add	local10, local05
070ac     02 30 66 F0 | 	shl	local10, #2
070b0     03 00 00 FF 
070b4     00 E4 85 F1 | 	sub	objptr, ##1536
070b8     F2 30 02 F1 | 	add	local10, objptr
070bc     04 30 06 F1 | 	add	local10, #4
070c0     18 29 62 FC | 	wrlong	local06, local10
070c4     03 00 00 FF 
070c8     00 E4 05 F1 | 	add	objptr, ##1536
070cc     F2 26 02 FB | 	rdlong	local05, objptr
070d0     13 33 02 F6 | 	mov	local11, local05
070d4     01 32 66 F0 | 	shl	local11, #1
070d8     13 33 02 F1 | 	add	local11, local05
070dc     02 32 66 F0 | 	shl	local11, #2
070e0     03 00 00 FF 
070e4     00 E4 85 F1 | 	sub	objptr, ##1536
070e8     F2 32 02 F1 | 	add	local11, objptr
070ec     08 32 06 F1 | 	add	local11, #8
070f0     19 2B 62 FC | 	wrlong	local07, local11
070f4     03 00 00 FF 
070f8     00 E4 05 F1 | 	add	objptr, ##1536
070fc     F2 26 02 FB | 	rdlong	local05, objptr
07100     01 26 06 F1 | 	add	local05, #1
07104     F2 26 62 FC | 	wrlong	local05, objptr
07108     44 22 06 F6 | 	mov	local03, #68
0710c     0F 27 02 F6 | 	mov	local05, local01
07110     10 29 02 F6 | 	mov	local06, local02
07114     11 2B 02 F6 | 	mov	local07, local03
07118     F2 2C 02 FB | 	rdlong	local08, objptr
0711c     16 2F 02 F6 | 	mov	local09, local08
07120     01 2E 66 F0 | 	shl	local09, #1
07124     16 2F 02 F1 | 	add	local09, local08
07128     02 2E 66 F0 | 	shl	local09, #2
0712c     03 00 00 FF 
07130     00 E4 85 F1 | 	sub	objptr, ##1536
07134     F2 2E 02 F1 | 	add	local09, objptr
07138     17 27 62 FC | 	wrlong	local05, local09
0713c     03 00 00 FF 
07140     00 E4 05 F1 | 	add	objptr, ##1536
07144     F2 32 02 FB | 	rdlong	local11, objptr
07148     19 31 02 F6 | 	mov	local10, local11
0714c     01 30 66 F0 | 	shl	local10, #1
07150     19 31 02 F1 | 	add	local10, local11
07154     02 30 66 F0 | 	shl	local10, #2
07158     03 00 00 FF 
0715c     00 E4 85 F1 | 	sub	objptr, ##1536
07160     F2 30 02 F1 | 	add	local10, objptr
07164     04 30 06 F1 | 	add	local10, #4
07168     18 29 62 FC | 	wrlong	local06, local10
0716c     03 00 00 FF 
07170     00 E4 05 F1 | 	add	objptr, ##1536
07174     F2 30 02 FB | 	rdlong	local10, objptr
07178     18 33 02 F6 | 	mov	local11, local10
0717c     01 32 66 F0 | 	shl	local11, #1
07180     18 33 02 F1 | 	add	local11, local10
07184     02 32 66 F0 | 	shl	local11, #2
07188     03 00 00 FF 
0718c     00 E4 85 F1 | 	sub	objptr, ##1536
07190     F2 32 02 F1 | 	add	local11, objptr
07194     08 32 06 F1 | 	add	local11, #8
07198     19 2B 62 FC | 	wrlong	local07, local11
0719c     03 00 00 FF 
071a0     00 E4 05 F1 | 	add	objptr, ##1536
071a4     F2 26 02 FB | 	rdlong	local05, objptr
071a8     01 26 06 F1 | 	add	local05, #1
071ac     F2 26 62 FC | 	wrlong	local05, objptr
071b0     6A 00 00 FF 
071b4     6C E4 85 F1 | 	sub	objptr, ##54380
071b8     00 FA 05 F6 | 	mov	result1, #0
071bc     20 05 90 FD | 	jmp	#LR__0657
071c0                 | LR__0650
071c0                 | ' do
071c0                 | LR__0651
071c0     A0 1C B0 FD | 	call	#_expr
071c4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
071c4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
071c4     57 00 00 FF 
071c8     34 E4 05 F1 | 	add	objptr, ##44596
071cc     F2 24 02 FB | 	rdlong	local04, objptr
071d0     03 24 66 F0 | 	shl	local04, #3
071d4     02 00 00 FF 
071d8     38 E4 85 F1 | 	sub	objptr, ##1080
071dc     F2 24 02 F1 | 	add	local04, objptr
071e0     04 24 06 F1 | 	add	local04, #4
071e4     12 2D 02 FB | 	rdlong	local08, local04
071e8     11 2C 0E F2 | 	cmp	local08, #17 wz
071ec     54 00 00 FF 
071f0     FC E5 85 F1 | 	sub	objptr, ##43516
071f4     60 01 90 5D |  if_ne	jmp	#LR__0652
071f8     21 22 06 F6 | 	mov	local03, #33
071fc     0F 27 02 F6 | 	mov	local05, local01
07200     10 29 02 F6 | 	mov	local06, local02
07204     11 2B 02 F6 | 	mov	local07, local03
07208     6A 00 00 FF 
0720c     6C E4 05 F1 | 	add	objptr, ##54380
07210     F2 2C 02 FB | 	rdlong	local08, objptr
07214     16 2F 02 F6 | 	mov	local09, local08
07218     01 2E 66 F0 | 	shl	local09, #1
0721c     16 2F 02 F1 | 	add	local09, local08
07220     02 2E 66 F0 | 	shl	local09, #2
07224     03 00 00 FF 
07228     00 E4 85 F1 | 	sub	objptr, ##1536
0722c     F2 2E 02 F1 | 	add	local09, objptr
07230     17 27 62 FC | 	wrlong	local05, local09
07234     03 00 00 FF 
07238     00 E4 05 F1 | 	add	objptr, ##1536
0723c     F2 32 02 FB | 	rdlong	local11, objptr
07240     19 31 02 F6 | 	mov	local10, local11
07244     01 30 66 F0 | 	shl	local10, #1
07248     19 31 02 F1 | 	add	local10, local11
0724c     02 30 66 F0 | 	shl	local10, #2
07250     03 00 00 FF 
07254     00 E4 85 F1 | 	sub	objptr, ##1536
07258     F2 30 02 F1 | 	add	local10, objptr
0725c     04 30 06 F1 | 	add	local10, #4
07260     18 29 62 FC | 	wrlong	local06, local10
07264     03 00 00 FF 
07268     00 E4 05 F1 | 	add	objptr, ##1536
0726c     F2 26 02 FB | 	rdlong	local05, objptr
07270     13 33 02 F6 | 	mov	local11, local05
07274     01 32 66 F0 | 	shl	local11, #1
07278     13 33 02 F1 | 	add	local11, local05
0727c     02 32 66 F0 | 	shl	local11, #2
07280     03 00 00 FF 
07284     00 E4 85 F1 | 	sub	objptr, ##1536
07288     F2 32 02 F1 | 	add	local11, objptr
0728c     08 32 06 F1 | 	add	local11, #8
07290     19 2B 62 FC | 	wrlong	local07, local11
07294     03 00 00 FF 
07298     00 E4 05 F1 | 	add	objptr, ##1536
0729c     F2 26 02 FB | 	rdlong	local05, objptr
072a0     01 26 06 F1 | 	add	local05, #1
072a4     F2 26 62 FC | 	wrlong	local05, objptr
072a8     44 22 06 F6 | 	mov	local03, #68
072ac     0F 27 02 F6 | 	mov	local05, local01
072b0     10 29 02 F6 | 	mov	local06, local02
072b4     11 2B 02 F6 | 	mov	local07, local03
072b8     F2 2C 02 FB | 	rdlong	local08, objptr
072bc     16 2F 02 F6 | 	mov	local09, local08
072c0     01 2E 66 F0 | 	shl	local09, #1
072c4     16 2F 02 F1 | 	add	local09, local08
072c8     02 2E 66 F0 | 	shl	local09, #2
072cc     03 00 00 FF 
072d0     00 E4 85 F1 | 	sub	objptr, ##1536
072d4     F2 2E 02 F1 | 	add	local09, objptr
072d8     17 27 62 FC | 	wrlong	local05, local09
072dc     03 00 00 FF 
072e0     00 E4 05 F1 | 	add	objptr, ##1536
072e4     F2 32 02 FB | 	rdlong	local11, objptr
072e8     19 31 02 F6 | 	mov	local10, local11
072ec     01 30 66 F0 | 	shl	local10, #1
072f0     19 31 02 F1 | 	add	local10, local11
072f4     02 30 66 F0 | 	shl	local10, #2
072f8     03 00 00 FF 
072fc     00 E4 85 F1 | 	sub	objptr, ##1536
07300     F2 30 02 F1 | 	add	local10, objptr
07304     04 30 06 F1 | 	add	local10, #4
07308     18 29 62 FC | 	wrlong	local06, local10
0730c     03 00 00 FF 
07310     00 E4 05 F1 | 	add	objptr, ##1536
07314     F2 30 02 FB | 	rdlong	local10, objptr
07318     18 33 02 F6 | 	mov	local11, local10
0731c     01 32 66 F0 | 	shl	local11, #1
07320     18 33 02 F1 | 	add	local11, local10
07324     02 32 66 F0 | 	shl	local11, #2
07328     03 00 00 FF 
0732c     00 E4 85 F1 | 	sub	objptr, ##1536
07330     F2 32 02 F1 | 	add	local11, objptr
07334     08 32 06 F1 | 	add	local11, #8
07338     19 2B 62 FC | 	wrlong	local07, local11
0733c     03 00 00 FF 
07340     00 E4 05 F1 | 	add	objptr, ##1536
07344     F2 26 02 FB | 	rdlong	local05, objptr
07348     01 26 06 F1 | 	add	local05, #1
0734c     F2 26 62 FC | 	wrlong	local05, objptr
07350     6A 00 00 FF 
07354     6C E4 85 F1 | 	sub	objptr, ##54380
07358                 | LR__0652
07358                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07358     57 00 00 FF 
0735c     34 E4 05 F1 | 	add	objptr, ##44596
07360     F2 24 02 FB | 	rdlong	local04, objptr
07364     03 24 66 F0 | 	shl	local04, #3
07368     02 00 00 FF 
0736c     38 E4 85 F1 | 	sub	objptr, ##1080
07370     F2 24 02 F1 | 	add	local04, objptr
07374     04 24 06 F1 | 	add	local04, #4
07378     12 2D 02 FB | 	rdlong	local08, local04
0737c     12 2C 0E F2 | 	cmp	local08, #18 wz
07380     54 00 00 FF 
07384     FC E5 85 F1 | 	sub	objptr, ##43516
07388     60 01 90 5D |  if_ne	jmp	#LR__0653
0738c     22 22 06 F6 | 	mov	local03, #34
07390     0F 27 02 F6 | 	mov	local05, local01
07394     10 29 02 F6 | 	mov	local06, local02
07398     11 2B 02 F6 | 	mov	local07, local03
0739c     6A 00 00 FF 
073a0     6C E4 05 F1 | 	add	objptr, ##54380
073a4     F2 2C 02 FB | 	rdlong	local08, objptr
073a8     16 2F 02 F6 | 	mov	local09, local08
073ac     01 2E 66 F0 | 	shl	local09, #1
073b0     16 2F 02 F1 | 	add	local09, local08
073b4     02 2E 66 F0 | 	shl	local09, #2
073b8     03 00 00 FF 
073bc     00 E4 85 F1 | 	sub	objptr, ##1536
073c0     F2 2E 02 F1 | 	add	local09, objptr
073c4     17 27 62 FC | 	wrlong	local05, local09
073c8     03 00 00 FF 
073cc     00 E4 05 F1 | 	add	objptr, ##1536
073d0     F2 32 02 FB | 	rdlong	local11, objptr
073d4     19 31 02 F6 | 	mov	local10, local11
073d8     01 30 66 F0 | 	shl	local10, #1
073dc     19 31 02 F1 | 	add	local10, local11
073e0     02 30 66 F0 | 	shl	local10, #2
073e4     03 00 00 FF 
073e8     00 E4 85 F1 | 	sub	objptr, ##1536
073ec     F2 30 02 F1 | 	add	local10, objptr
073f0     04 30 06 F1 | 	add	local10, #4
073f4     18 29 62 FC | 	wrlong	local06, local10
073f8     03 00 00 FF 
073fc     00 E4 05 F1 | 	add	objptr, ##1536
07400     F2 26 02 FB | 	rdlong	local05, objptr
07404     13 33 02 F6 | 	mov	local11, local05
07408     01 32 66 F0 | 	shl	local11, #1
0740c     13 33 02 F1 | 	add	local11, local05
07410     02 32 66 F0 | 	shl	local11, #2
07414     03 00 00 FF 
07418     00 E4 85 F1 | 	sub	objptr, ##1536
0741c     F2 32 02 F1 | 	add	local11, objptr
07420     08 32 06 F1 | 	add	local11, #8
07424     19 2B 62 FC | 	wrlong	local07, local11
07428     03 00 00 FF 
0742c     00 E4 05 F1 | 	add	objptr, ##1536
07430     F2 26 02 FB | 	rdlong	local05, objptr
07434     01 26 06 F1 | 	add	local05, #1
07438     F2 26 62 FC | 	wrlong	local05, objptr
0743c     44 22 06 F6 | 	mov	local03, #68
07440     0F 27 02 F6 | 	mov	local05, local01
07444     10 29 02 F6 | 	mov	local06, local02
07448     11 2B 02 F6 | 	mov	local07, local03
0744c     F2 2C 02 FB | 	rdlong	local08, objptr
07450     16 2F 02 F6 | 	mov	local09, local08
07454     01 2E 66 F0 | 	shl	local09, #1
07458     16 2F 02 F1 | 	add	local09, local08
0745c     02 2E 66 F0 | 	shl	local09, #2
07460     03 00 00 FF 
07464     00 E4 85 F1 | 	sub	objptr, ##1536
07468     F2 2E 02 F1 | 	add	local09, objptr
0746c     17 27 62 FC | 	wrlong	local05, local09
07470     03 00 00 FF 
07474     00 E4 05 F1 | 	add	objptr, ##1536
07478     F2 32 02 FB | 	rdlong	local11, objptr
0747c     19 31 02 F6 | 	mov	local10, local11
07480     01 30 66 F0 | 	shl	local10, #1
07484     19 31 02 F1 | 	add	local10, local11
07488     02 30 66 F0 | 	shl	local10, #2
0748c     03 00 00 FF 
07490     00 E4 85 F1 | 	sub	objptr, ##1536
07494     F2 30 02 F1 | 	add	local10, objptr
07498     04 30 06 F1 | 	add	local10, #4
0749c     18 29 62 FC | 	wrlong	local06, local10
074a0     03 00 00 FF 
074a4     00 E4 05 F1 | 	add	objptr, ##1536
074a8     F2 30 02 FB | 	rdlong	local10, objptr
074ac     18 33 02 F6 | 	mov	local11, local10
074b0     01 32 66 F0 | 	shl	local11, #1
074b4     18 33 02 F1 | 	add	local11, local10
074b8     02 32 66 F0 | 	shl	local11, #2
074bc     03 00 00 FF 
074c0     00 E4 85 F1 | 	sub	objptr, ##1536
074c4     F2 32 02 F1 | 	add	local11, objptr
074c8     08 32 06 F1 | 	add	local11, #8
074cc     19 2B 62 FC | 	wrlong	local07, local11
074d0     03 00 00 FF 
074d4     00 E4 05 F1 | 	add	objptr, ##1536
074d8     F2 26 02 FB | 	rdlong	local05, objptr
074dc     01 26 06 F1 | 	add	local05, #1
074e0     F2 26 62 FC | 	wrlong	local05, objptr
074e4     6A 00 00 FF 
074e8     6C E4 85 F1 | 	sub	objptr, ##54380
074ec                 | LR__0653
074ec                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
074ec     57 00 00 FF 
074f0     34 E4 05 F1 | 	add	objptr, ##44596
074f4     F2 24 02 FB | 	rdlong	local04, objptr
074f8     03 24 66 F0 | 	shl	local04, #3
074fc     02 00 00 FF 
07500     38 E4 85 F1 | 	sub	objptr, ##1080
07504     F2 24 02 F1 | 	add	local04, objptr
07508     04 24 06 F1 | 	add	local04, #4
0750c     12 2D 02 FB | 	rdlong	local08, local04
07510     FE 2D 0E F2 | 	cmp	local08, #510 wz
07514     54 00 00 FF 
07518     FC E5 85 F1 | 	sub	objptr, ##43516
0751c     B8 00 90 5D |  if_ne	jmp	#LR__0654
07520     44 22 06 F6 | 	mov	local03, #68
07524     0F 27 02 F6 | 	mov	local05, local01
07528     10 29 02 F6 | 	mov	local06, local02
0752c     11 2B 02 F6 | 	mov	local07, local03
07530     6A 00 00 FF 
07534     6C E4 05 F1 | 	add	objptr, ##54380
07538     F2 2C 02 FB | 	rdlong	local08, objptr
0753c     16 2F 02 F6 | 	mov	local09, local08
07540     01 2E 66 F0 | 	shl	local09, #1
07544     16 2F 02 F1 | 	add	local09, local08
07548     02 2E 66 F0 | 	shl	local09, #2
0754c     03 00 00 FF 
07550     00 E4 85 F1 | 	sub	objptr, ##1536
07554     F2 2E 02 F1 | 	add	local09, objptr
07558     17 27 62 FC | 	wrlong	local05, local09
0755c     03 00 00 FF 
07560     00 E4 05 F1 | 	add	objptr, ##1536
07564     F2 32 02 FB | 	rdlong	local11, objptr
07568     19 31 02 F6 | 	mov	local10, local11
0756c     01 30 66 F0 | 	shl	local10, #1
07570     19 31 02 F1 | 	add	local10, local11
07574     02 30 66 F0 | 	shl	local10, #2
07578     03 00 00 FF 
0757c     00 E4 85 F1 | 	sub	objptr, ##1536
07580     F2 30 02 F1 | 	add	local10, objptr
07584     04 30 06 F1 | 	add	local10, #4
07588     18 29 62 FC | 	wrlong	local06, local10
0758c     03 00 00 FF 
07590     00 E4 05 F1 | 	add	objptr, ##1536
07594     F2 30 02 FB | 	rdlong	local10, objptr
07598     18 33 02 F6 | 	mov	local11, local10
0759c     01 32 66 F0 | 	shl	local11, #1
075a0     18 33 02 F1 | 	add	local11, local10
075a4     02 32 66 F0 | 	shl	local11, #2
075a8     03 00 00 FF 
075ac     00 E4 85 F1 | 	sub	objptr, ##1536
075b0     F2 32 02 F1 | 	add	local11, objptr
075b4     08 32 06 F1 | 	add	local11, #8
075b8     19 2B 62 FC | 	wrlong	local07, local11
075bc     03 00 00 FF 
075c0     00 E4 05 F1 | 	add	objptr, ##1536
075c4     F2 26 02 FB | 	rdlong	local05, objptr
075c8     01 26 06 F1 | 	add	local05, #1
075cc     F2 26 62 FC | 	wrlong	local05, objptr
075d0     6A 00 00 FF 
075d4     6C E4 85 F1 | 	sub	objptr, ##54380
075d8                 | LR__0654
075d8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
075d8     57 00 00 FF 
075dc     34 E4 05 F1 | 	add	objptr, ##44596
075e0     F2 24 02 FB | 	rdlong	local04, objptr
075e4     03 24 66 F0 | 	shl	local04, #3
075e8     02 00 00 FF 
075ec     38 E4 85 F1 | 	sub	objptr, ##1080
075f0     F2 24 02 F1 | 	add	local04, objptr
075f4     04 24 06 F1 | 	add	local04, #4
075f8     12 2D 02 FB | 	rdlong	local08, local04
075fc     11 2C 0E F2 | 	cmp	local08, #17 wz
07600     54 00 00 FF 
07604     FC E5 85 F1 | 	sub	objptr, ##43516
07608     6C 00 90 AD |  if_e	jmp	#LR__0655
0760c     57 00 00 FF 
07610     34 E4 05 F1 | 	add	objptr, ##44596
07614     F2 2C 02 FB | 	rdlong	local08, objptr
07618     03 2C 66 F0 | 	shl	local08, #3
0761c     02 00 00 FF 
07620     38 E4 85 F1 | 	sub	objptr, ##1080
07624     F2 2C 02 F1 | 	add	local08, objptr
07628     04 2C 06 F1 | 	add	local08, #4
0762c     16 2D 02 FB | 	rdlong	local08, local08
07630     12 2C 0E F2 | 	cmp	local08, #18 wz
07634     54 00 00 FF 
07638     FC E5 85 F1 | 	sub	objptr, ##43516
0763c     38 00 90 AD |  if_e	jmp	#LR__0655
07640     57 00 00 FF 
07644     34 E4 05 F1 | 	add	objptr, ##44596
07648     F2 32 02 FB | 	rdlong	local11, objptr
0764c     03 32 66 F0 | 	shl	local11, #3
07650     02 00 00 FF 
07654     38 E4 85 F1 | 	sub	objptr, ##1080
07658     F2 32 02 F1 | 	add	local11, objptr
0765c     04 32 06 F1 | 	add	local11, #4
07660     19 33 02 FB | 	rdlong	local11, local11
07664     FE 33 0E F2 | 	cmp	local11, #510 wz
07668     54 00 00 FF 
0766c     FC E5 85 F1 | 	sub	objptr, ##43516
07670     16 FA 05 56 |  if_ne	mov	result1, #22
07674     68 00 90 5D |  if_ne	jmp	#LR__0657
07678                 | LR__0655
07678     57 00 00 FF 
0767c     34 E4 05 F1 | 	add	objptr, ##44596
07680     F2 24 02 FB | 	rdlong	local04, objptr
07684     01 24 06 F1 | 	add	local04, #1
07688     F2 24 62 FC | 	wrlong	local04, objptr
0768c     03 24 66 F0 | 	shl	local04, #3
07690     02 00 00 FF 
07694     38 E4 85 F1 | 	sub	objptr, ##1080
07698     F2 24 02 F1 | 	add	local04, objptr
0769c     04 24 06 F1 | 	add	local04, #4
076a0     12 2D 02 FB | 	rdlong	local08, local04
076a4     FE 2D 0E F2 | 	cmp	local08, #510 wz
076a8     54 00 00 FF 
076ac     FC E5 85 F1 | 	sub	objptr, ##43516
076b0     28 00 90 AD |  if_e	jmp	#LR__0656
076b4     57 00 00 FF 
076b8     34 E4 05 F1 | 	add	objptr, ##44596
076bc     F2 32 02 FB | 	rdlong	local11, objptr
076c0     0E 00 00 FF 
076c4     1C E4 05 F1 | 	add	objptr, ##7196
076c8     F2 30 02 FB | 	rdlong	local10, objptr
076cc     65 00 00 FF 
076d0     50 E4 85 F1 | 	sub	objptr, ##51792
076d4     18 33 52 F2 | 	cmps	local11, local10 wc
076d8     E4 FA 9F CD |  if_b	jmp	#LR__0651
076dc                 | LR__0656
076dc                 | ' return 0
076dc     00 FA 05 F6 | 	mov	result1, #0
076e0                 | LR__0657
076e0     A7 F0 03 F6 | 	mov	ptra, fp
076e4     B2 00 A0 FD | 	call	#popregs_
076e8                 | _compile_print_ret
076e8     2D 00 64 FD | 	ret
076ec                 | 
076ec                 | ' 
076ec                 | ' function compile_if() as ulong  
076ec                 | _compile_if
076ec     05 4A 05 F6 | 	mov	COUNT_, #5
076f0     A8 00 A0 FD | 	call	#pushregs_
076f4                 | _compile_if_enter
076f4     6C 17 B0 FD | 	call	#_expr
076f8                 | ' expr()
076f8                 | ' return 0
076f8     57 00 00 FF 
076fc     34 E4 05 F1 | 	add	objptr, ##44596
07700     F2 FA 01 FB | 	rdlong	result1, objptr
07704     01 FA 05 F1 | 	add	result1, #1
07708     F2 FA 61 FC | 	wrlong	result1, objptr
0770c     58 22 06 F6 | 	mov	local03, #88
07710     0F 25 02 F6 | 	mov	local04, local01
07714     10 27 02 F6 | 	mov	local05, local02
07718     11 1F 02 F6 | 	mov	local01, local03
0771c     13 00 00 FF 
07720     38 E4 05 F1 | 	add	objptr, ##9784
07724     F2 12 02 FB | 	rdlong	arg01, objptr
07728     09 FB 01 F6 | 	mov	result1, arg01
0772c     01 FA 65 F0 | 	shl	result1, #1
07730     09 FB 01 F1 | 	add	result1, arg01
07734     02 FA 65 F0 | 	shl	result1, #2
07738     03 00 00 FF 
0773c     00 E4 85 F1 | 	sub	objptr, ##1536
07740     F2 FA 01 F1 | 	add	result1, objptr
07744     FD 24 62 FC | 	wrlong	local04, result1
07748     03 00 00 FF 
0774c     00 E4 05 F1 | 	add	objptr, ##1536
07750     F2 12 02 FB | 	rdlong	arg01, objptr
07754     09 25 02 F6 | 	mov	local04, arg01
07758     01 24 66 F0 | 	shl	local04, #1
0775c     09 25 02 F1 | 	add	local04, arg01
07760     02 24 66 F0 | 	shl	local04, #2
07764     03 00 00 FF 
07768     00 E4 85 F1 | 	sub	objptr, ##1536
0776c     F2 24 02 F1 | 	add	local04, objptr
07770     04 24 06 F1 | 	add	local04, #4
07774     12 27 62 FC | 	wrlong	local05, local04
07778     03 00 00 FF 
0777c     00 E4 05 F1 | 	add	objptr, ##1536
07780     F2 24 02 FB | 	rdlong	local04, objptr
07784     12 27 02 F6 | 	mov	local05, local04
07788     01 26 66 F0 | 	shl	local05, #1
0778c     12 27 02 F1 | 	add	local05, local04
07790     02 26 66 F0 | 	shl	local05, #2
07794     03 00 00 FF 
07798     00 E4 85 F1 | 	sub	objptr, ##1536
0779c     F2 26 02 F1 | 	add	local05, objptr
077a0     08 26 06 F1 | 	add	local05, #8
077a4     13 1F 62 FC | 	wrlong	local01, local05
077a8     03 00 00 FF 
077ac     00 E4 05 F1 | 	add	objptr, ##1536
077b0     F2 24 02 FB | 	rdlong	local04, objptr
077b4     01 24 06 F1 | 	add	local04, #1
077b8     F2 24 62 FC | 	wrlong	local04, objptr
077bc                 | ' 
077bc                 | ' 'print "In compile_if"
077bc                 | ' compile_fun_1p()
077bc                 | ' cmd=lparts(ct).token : ct+=1
077bc                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
077bc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
077bc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
077bc     13 00 00 FF 
077c0     38 E4 85 F1 | 	sub	objptr, ##9784
077c4     F2 26 02 FB | 	rdlong	local05, objptr
077c8     01 26 06 F1 | 	add	local05, #1
077cc     03 26 66 F0 | 	shl	local05, #3
077d0     02 00 00 FF 
077d4     38 E4 85 F1 | 	sub	objptr, ##1080
077d8     F2 26 02 F1 | 	add	local05, objptr
077dc     13 13 02 FB | 	rdlong	arg01, local05
077e0     54 00 00 FF 
077e4     FC E5 85 F1 | 	sub	objptr, ##43516
077e8                 | ' 
077e8                 | ' select case s
077e8     6E 01 00 FF 
077ec     EC 14 06 F6 | 	mov	arg02, ##@LR__4862
077f0     6C 6D B1 FD | 	call	#__system___string_cmp
077f4     00 FA 0D F2 | 	cmp	result1, #0 wz
077f8     1B FA 05 A6 |  if_e	mov	result1, #27
077fc     00 FA 05 56 |  if_ne	mov	result1, #0
07800     00 FA 0D F2 | 	cmp	result1, #0 wz
07804     0C 00 90 AD |  if_e	jmp	#LR__0660
07808     05 12 06 F6 | 	mov	arg01, #5
0780c     88 ED BF FD | 	call	#_compile_immediate_assign
07810     08 00 90 FD | 	jmp	#LR__0661
07814                 | LR__0660
07814     05 12 06 F6 | 	mov	arg01, #5
07818     A8 E3 BF FD | 	call	#_compile_immediate
0781c                 | LR__0661
0781c                 | ' 
0781c                 | ' 
0781c                 | ' return 0
0781c     00 FA 05 F6 | 	mov	result1, #0
07820     A7 F0 03 F6 | 	mov	ptra, fp
07824     B2 00 A0 FD | 	call	#popregs_
07828                 | _compile_if_ret
07828     2D 00 64 FD | 	ret
0782c                 | 
0782c                 | ' 
0782c                 | ' function compile_else() as ulong  
0782c                 | _compile_else
0782c     05 4A 05 F6 | 	mov	COUNT_, #5
07830     A8 00 A0 FD | 	call	#pushregs_
07834                 | _compile_else_enter
07834     5A 22 06 F6 | 	mov	local03, #90
07838     0F 25 02 F6 | 	mov	local04, local01
0783c     10 27 02 F6 | 	mov	local05, local02
07840     11 1F 02 F6 | 	mov	local01, local03
07844     6A 00 00 FF 
07848     6C E4 05 F1 | 	add	objptr, ##54380
0784c     F2 12 02 FB | 	rdlong	arg01, objptr
07850     09 FB 01 F6 | 	mov	result1, arg01
07854     01 FA 65 F0 | 	shl	result1, #1
07858     09 FB 01 F1 | 	add	result1, arg01
0785c     02 FA 65 F0 | 	shl	result1, #2
07860     03 00 00 FF 
07864     00 E4 85 F1 | 	sub	objptr, ##1536
07868     F2 FA 01 F1 | 	add	result1, objptr
0786c     FD 24 62 FC | 	wrlong	local04, result1
07870     03 00 00 FF 
07874     00 E4 05 F1 | 	add	objptr, ##1536
07878     F2 FA 01 FB | 	rdlong	result1, objptr
0787c     FD 24 02 F6 | 	mov	local04, result1
07880     01 24 66 F0 | 	shl	local04, #1
07884     FD 24 02 F1 | 	add	local04, result1
07888     02 24 66 F0 | 	shl	local04, #2
0788c     03 00 00 FF 
07890     00 E4 85 F1 | 	sub	objptr, ##1536
07894     F2 24 02 F1 | 	add	local04, objptr
07898     04 24 06 F1 | 	add	local04, #4
0789c     12 27 62 FC | 	wrlong	local05, local04
078a0     03 00 00 FF 
078a4     00 E4 05 F1 | 	add	objptr, ##1536
078a8     F2 24 02 FB | 	rdlong	local04, objptr
078ac     12 27 02 F6 | 	mov	local05, local04
078b0     01 26 66 F0 | 	shl	local05, #1
078b4     12 27 02 F1 | 	add	local05, local04
078b8     02 26 66 F0 | 	shl	local05, #2
078bc     03 00 00 FF 
078c0     00 E4 85 F1 | 	sub	objptr, ##1536
078c4     F2 26 02 F1 | 	add	local05, objptr
078c8     08 26 06 F1 | 	add	local05, #8
078cc     13 1F 62 FC | 	wrlong	local01, local05
078d0     03 00 00 FF 
078d4     00 E4 05 F1 | 	add	objptr, ##1536
078d8     F2 24 02 FB | 	rdlong	local04, objptr
078dc     01 24 06 F1 | 	add	local04, #1
078e0     F2 24 62 FC | 	wrlong	local04, objptr
078e4                 | ' 
078e4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
078e4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
078e4     13 00 00 FF 
078e8     38 E4 85 F1 | 	sub	objptr, ##9784
078ec     F2 26 02 FB | 	rdlong	local05, objptr
078f0     01 26 06 F1 | 	add	local05, #1
078f4     03 26 66 F0 | 	shl	local05, #3
078f8     02 00 00 FF 
078fc     38 E4 85 F1 | 	sub	objptr, ##1080
07900     F2 26 02 F1 | 	add	local05, objptr
07904     13 13 02 FB | 	rdlong	arg01, local05
07908     54 00 00 FF 
0790c     FC E5 85 F1 | 	sub	objptr, ##43516
07910                 | ' 
07910                 | ' select case s
07910     6E 01 00 FF 
07914     EC 14 06 F6 | 	mov	arg02, ##@LR__4862
07918     44 6C B1 FD | 	call	#__system___string_cmp
0791c     00 FA 0D F2 | 	cmp	result1, #0 wz
07920     1B FA 05 A6 |  if_e	mov	result1, #27
07924     00 FA 05 56 |  if_ne	mov	result1, #0
07928     00 FA 0D F2 | 	cmp	result1, #0 wz
0792c     0C 00 90 AD |  if_e	jmp	#LR__0670
07930     05 12 06 F6 | 	mov	arg01, #5
07934     60 EC BF FD | 	call	#_compile_immediate_assign
07938     08 00 90 FD | 	jmp	#LR__0671
0793c                 | LR__0670
0793c     05 12 06 F6 | 	mov	arg01, #5
07940     80 E2 BF FD | 	call	#_compile_immediate
07944                 | LR__0671
07944                 | ' 
07944                 | ' 
07944                 | ' return 0
07944     00 FA 05 F6 | 	mov	result1, #0
07948     A7 F0 03 F6 | 	mov	ptra, fp
0794c     B2 00 A0 FD | 	call	#popregs_
07950                 | _compile_else_ret
07950     2D 00 64 FD | 	ret
07954                 | 
07954                 | ' 
07954                 | ' 
07954                 | ' function compile_dim() as ulong  
07954                 | _compile_dim
07954     11 4A 05 F6 | 	mov	COUNT_, #17
07958     A8 00 A0 FD | 	call	#pushregs_
0795c     01 1E 06 F6 | 	mov	local01, #1
07960     01 20 06 F6 | 	mov	local02, #1
07964     01 22 06 F6 | 	mov	local03, #1
07968                 | ' 
07968                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07968                 | ' 
07968                 | ' if isname(lparts(ct).part$) then 
07968     57 00 00 FF 
0796c     34 E4 05 F1 | 	add	objptr, ##44596
07970     F2 18 02 FB | 	rdlong	arg04, objptr
07974     03 18 66 F0 | 	shl	arg04, #3
07978     02 00 00 FF 
0797c     38 E4 85 F1 | 	sub	objptr, ##1080
07980     F2 18 02 F1 | 	add	arg04, objptr
07984     0C 13 02 FB | 	rdlong	arg01, arg04
07988     54 00 00 FF 
0798c     FC E5 85 F1 | 	sub	objptr, ##43516
07990     E4 D2 BF FD | 	call	#_isname
07994     00 FA 0D F2 | 	cmp	result1, #0 wz
07998     AC 05 90 AD |  if_e	jmp	#LR__0704
0799c     57 00 00 FF 
079a0     34 E4 05 F1 | 	add	objptr, ##44596
079a4     F2 24 02 FB | 	rdlong	local04, objptr
079a8     03 24 66 F0 | 	shl	local04, #3
079ac     02 00 00 FF 
079b0     38 E4 85 F1 | 	sub	objptr, ##1080
079b4     F2 24 02 F1 | 	add	local04, objptr
079b8     12 27 02 FB | 	rdlong	local05, local04
079bc     01 28 66 F6 | 	neg	local06, #1
079c0                 | '   varname2$=lparts(ct).part$ 
079c0                 | '   j=-1
079c0                 | '   if varnum>0 then
079c0     04 E4 85 F1 | 	sub	objptr, #4
079c4     F2 2A 02 FB | 	rdlong	local07, objptr
079c8     54 00 00 FF 
079cc     F8 E5 85 F1 | 	sub	objptr, ##43512
079d0     01 2A 56 F2 | 	cmps	local07, #1 wc
079d4     58 00 90 CD |  if_b	jmp	#LR__0682
079d8                 | '  '   print "in dim, varnum=";varnum
079d8                 | '     for i=0 to varnum-1
079d8     00 2C 06 F6 | 	mov	local08, #0
079dc     54 00 00 FF 
079e0     F8 E5 05 F1 | 	add	objptr, ##43512
079e4     F2 2E 02 FB | 	rdlong	local09, objptr
079e8     54 00 00 FF 
079ec     F8 E5 85 F1 | 	sub	objptr, ##43512
079f0                 | LR__0680
079f0     17 2D 52 F2 | 	cmps	local08, local09 wc
079f4     38 00 90 3D |  if_ae	jmp	#LR__0681
079f8                 | '       if variables(i).name=varname2$ then j=i : exit
079f8     16 25 02 F6 | 	mov	local04, local08
079fc     04 24 66 F0 | 	shl	local04, #4
07a00     34 00 00 FF 
07a04     F8 E5 05 F1 | 	add	objptr, ##27128
07a08     F2 24 02 F1 | 	add	local04, objptr
07a0c     12 13 02 FB | 	rdlong	arg01, local04
07a10     13 15 02 F6 | 	mov	arg02, local05
07a14     34 00 00 FF 
07a18     F8 E5 85 F1 | 	sub	objptr, ##27128
07a1c     40 6B B1 FD | 	call	#__system___string_cmp
07a20     00 FA 0D F2 | 	cmp	result1, #0 wz
07a24     16 29 02 A6 |  if_e	mov	local06, local08
07a28     01 2C 06 51 |  if_ne	add	local08, #1
07a2c     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
07a30                 | LR__0681
07a30                 | LR__0682
07a30                 | ' '  if j<>-1 then printerror (42) : return 42
07a30                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07a30     FF FF 7F FF 
07a34     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07a38     54 00 00 AF 
07a3c     F8 E5 05 A1 |  if_e	add	objptr, ##43512
07a40     F2 28 02 AB |  if_e	rdlong	local06, objptr
07a44     54 00 00 AF 
07a48     F8 E5 85 A1 |  if_e	sub	objptr, ##43512
07a4c     78 00 90 AD |  if_e	jmp	#LR__0683
07a50     00 12 06 F6 | 	mov	arg01, #0
07a54     74 C4 B1 FD | 	call	#__system___getiolock_0475
07a58     FD 12 02 F6 | 	mov	arg01, result1
07a5c     D8 6A B1 FD | 	call	#__system___lockmem
07a60     70 01 00 FF 
07a64     2C 14 06 F6 | 	mov	arg02, ##@LR__5044
07a68     00 12 06 F6 | 	mov	arg01, #0
07a6c     00 16 06 F6 | 	mov	arg03, #0
07a70     C8 77 B1 FD | 	call	#__system___basic_print_string
07a74     7B 00 00 FF 
07a78     80 E4 05 F1 | 	add	objptr, ##63104
07a7c     F2 14 02 FB | 	rdlong	arg02, objptr
07a80     7B 00 00 FF 
07a84     80 E4 85 F1 | 	sub	objptr, ##63104
07a88     00 12 06 F6 | 	mov	arg01, #0
07a8c     00 16 06 F6 | 	mov	arg03, #0
07a90     0A 18 06 F6 | 	mov	arg04, #10
07a94     28 78 B1 FD | 	call	#__system___basic_print_unsigned
07a98     70 01 00 FF 
07a9c     3A 14 06 F6 | 	mov	arg02, ##@LR__5045
07aa0     00 12 06 F6 | 	mov	arg01, #0
07aa4     00 16 06 F6 | 	mov	arg03, #0
07aa8     90 77 B1 FD | 	call	#__system___basic_print_string
07aac     00 12 06 F6 | 	mov	arg01, #0
07ab0     0A 14 06 F6 | 	mov	arg02, #10
07ab4     00 16 06 F6 | 	mov	arg03, #0
07ab8     28 77 B1 FD | 	call	#__system___basic_print_char
07abc     00 12 06 F6 | 	mov	arg01, #0
07ac0     08 C4 B1 FD | 	call	#__system___getiolock_0475
07ac4     FD 00 68 FC | 	wrlong	#0, result1
07ac8                 | LR__0683
07ac8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07ac8     57 00 00 FF 
07acc     34 E4 05 F1 | 	add	objptr, ##44596
07ad0     F2 18 02 FB | 	rdlong	arg04, objptr
07ad4     01 18 06 F1 | 	add	arg04, #1
07ad8     03 18 66 F0 | 	shl	arg04, #3
07adc     02 00 00 FF 
07ae0     38 E4 85 F1 | 	sub	objptr, ##1080
07ae4     F2 18 02 F1 | 	add	arg04, objptr
07ae8     0C 13 02 FB | 	rdlong	arg01, arg04
07aec     70 01 00 FF 
07af0     5B 14 06 F6 | 	mov	arg02, ##@LR__5046
07af4     54 00 00 FF 
07af8     FC E5 85 F1 | 	sub	objptr, ##43516
07afc     60 6A B1 FD | 	call	#__system___string_cmp
07b00     00 FA 0D F2 | 	cmp	result1, #0 wz
07b04     50 00 90 AD |  if_e	jmp	#LR__0684
07b08     57 00 00 FF 
07b0c     34 E4 05 F1 | 	add	objptr, ##44596
07b10     F2 2E 02 FB | 	rdlong	local09, objptr
07b14     01 2E 06 F1 | 	add	local09, #1
07b18     03 2E 66 F0 | 	shl	local09, #3
07b1c     02 00 00 FF 
07b20     38 E4 85 F1 | 	sub	objptr, ##1080
07b24     F2 2E 02 F1 | 	add	local09, objptr
07b28     17 13 02 FB | 	rdlong	arg01, local09
07b2c     70 01 00 FF 
07b30     5D 14 06 F6 | 	mov	arg02, ##@LR__5047
07b34     54 00 00 FF 
07b38     FC E5 85 F1 | 	sub	objptr, ##43516
07b3c     20 6A B1 FD | 	call	#__system___string_cmp
07b40     00 FA 0D F2 | 	cmp	result1, #0 wz
07b44     10 00 90 AD |  if_e	jmp	#LR__0684
07b48     2B 12 06 F6 | 	mov	arg01, #43
07b4c     8C 25 B1 FD | 	call	#_printerror
07b50     2B FA 05 F6 | 	mov	result1, #43
07b54     00 05 90 FD | 	jmp	#LR__0706
07b58                 | LR__0684
07b58                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07b58     57 00 00 FF 
07b5c     34 E4 05 F1 | 	add	objptr, ##44596
07b60     F2 14 02 FB | 	rdlong	arg02, objptr
07b64     01 14 06 F1 | 	add	arg02, #1
07b68     03 14 66 F0 | 	shl	arg02, #3
07b6c     02 00 00 FF 
07b70     38 E4 85 F1 | 	sub	objptr, ##1080
07b74     F2 14 02 F1 | 	add	arg02, objptr
07b78     0A 13 02 FB | 	rdlong	arg01, arg02
07b7c     70 01 00 FF 
07b80     60 14 06 F6 | 	mov	arg02, ##@LR__5048
07b84     54 00 00 FF 
07b88     FC E5 85 F1 | 	sub	objptr, ##43516
07b8c     D0 69 B1 FD | 	call	#__system___string_cmp
07b90     00 FA 0D F2 | 	cmp	result1, #0 wz
07b94     57 00 00 AF 
07b98     34 E4 05 A1 |  if_e	add	objptr, ##44596
07b9c     F2 30 02 AB |  if_e	rdlong	local10, objptr
07ba0     57 00 00 AF 
07ba4     34 E4 85 A1 |  if_e	sub	objptr, ##44596
07ba8     01 30 06 A1 |  if_e	add	local10, #1
07bac     7C 01 90 AD |  if_e	jmp	#LR__0690
07bb0     57 00 00 FF 
07bb4     34 E4 05 F1 | 	add	objptr, ##44596
07bb8     F2 30 02 FB | 	rdlong	local10, objptr
07bbc     57 00 00 FF 
07bc0     34 E4 85 F1 | 	sub	objptr, ##44596
07bc4     02 30 06 F1 | 	add	local10, #2
07bc8     00 32 06 F6 | 	mov	local11, #0
07bcc                 | '   l=ct+2 : m=0 : do
07bcc                 | LR__0685
07bcc                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07bcc                 | '     if isdec(lparts(l).part$) then 
07bcc     18 25 02 F6 | 	mov	local04, local10
07bd0     03 24 66 F0 | 	shl	local04, #3
07bd4     54 00 00 FF 
07bd8     FC E5 05 F1 | 	add	objptr, ##43516
07bdc     F2 24 02 F1 | 	add	local04, objptr
07be0     12 13 02 FB | 	rdlong	arg01, local04
07be4     54 00 00 FF 
07be8     FC E5 85 F1 | 	sub	objptr, ##43516
07bec     2C D7 BF FD | 	call	#_isdec
07bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
07bf4     44 00 90 AD |  if_e	jmp	#LR__0686
07bf8     19 35 02 F6 | 	mov	local12, local11
07bfc     0F 35 06 F1 | 	add	local12, #local01
07c00     18 2F 02 F6 | 	mov	local09, local10
07c04     03 2E 66 F0 | 	shl	local09, #3
07c08     54 00 00 FF 
07c0c     FC E5 05 F1 | 	add	objptr, ##43516
07c10     F2 2E 02 F1 | 	add	local09, objptr
07c14     17 13 02 FB | 	rdlong	arg01, local09
07c18     00 14 06 F6 | 	mov	arg02, #0
07c1c     54 00 00 FF 
07c20     FC E5 85 F1 | 	sub	objptr, ##43516
07c24     04 9B B1 FD | 	call	#__system____builtin_atoi
07c28     FD 36 02 F6 | 	mov	local13, result1
07c2c                 | 	'.live	local13
07c2c                 | 	'.live	local12
07c2c     00 34 8E F9 | 	altd	local12, #0
07c30     1B 35 02 F6 | 	mov	local12, local13
07c34     01 32 06 F1 | 	add	local11, #1
07c38     10 00 90 FD | 	jmp	#LR__0687
07c3c                 | LR__0686
07c3c     11 12 06 F6 | 	mov	arg01, #17
07c40     98 24 B1 FD | 	call	#_printerror
07c44                 | '       printerror (17)  : return(17)
07c44     11 FA 05 F6 | 	mov	result1, #17
07c48     0C 04 90 FD | 	jmp	#LR__0706
07c4c                 | LR__0687
07c4c                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07c4c     18 25 02 F6 | 	mov	local04, local10
07c50     01 24 06 F1 | 	add	local04, #1
07c54     03 24 66 F0 | 	shl	local04, #3
07c58     54 00 00 FF 
07c5c     FC E5 05 F1 | 	add	objptr, ##43516
07c60     F2 24 02 F1 | 	add	local04, objptr
07c64     12 13 02 FB | 	rdlong	arg01, local04
07c68     70 01 00 FF 
07c6c     63 14 06 F6 | 	mov	arg02, ##@LR__5049
07c70     54 00 00 FF 
07c74     FC E5 85 F1 | 	sub	objptr, ##43516
07c78     E4 68 B1 FD | 	call	#__system___string_cmp
07c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
07c80     48 00 90 AD |  if_e	jmp	#LR__0688
07c84     18 37 02 F6 | 	mov	local13, local10
07c88     01 36 06 F1 | 	add	local13, #1
07c8c     03 36 66 F0 | 	shl	local13, #3
07c90     54 00 00 FF 
07c94     FC E5 05 F1 | 	add	objptr, ##43516
07c98     F2 36 02 F1 | 	add	local13, objptr
07c9c     1B 13 02 FB | 	rdlong	arg01, local13
07ca0     70 01 00 FF 
07ca4     65 14 06 F6 | 	mov	arg02, ##@LR__5050
07ca8     54 00 00 FF 
07cac     FC E5 85 F1 | 	sub	objptr, ##43516
07cb0     AC 68 B1 FD | 	call	#__system___string_cmp
07cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
07cb8     10 00 90 AD |  if_e	jmp	#LR__0688
07cbc     2C 12 06 F6 | 	mov	arg01, #44
07cc0     18 24 B1 FD | 	call	#_printerror
07cc4     2C FA 05 F6 | 	mov	result1, #44
07cc8     8C 03 90 FD | 	jmp	#LR__0706
07ccc                 | LR__0688
07ccc     02 30 06 F1 | 	add	local10, #2
07cd0     18 25 02 F6 | 	mov	local04, local10
07cd4     01 24 86 F1 | 	sub	local04, #1
07cd8     03 24 66 F0 | 	shl	local04, #3
07cdc     54 00 00 FF 
07ce0     FC E5 05 F1 | 	add	objptr, ##43516
07ce4     F2 24 02 F1 | 	add	local04, objptr
07ce8     12 13 02 FB | 	rdlong	arg01, local04
07cec     70 01 00 FF 
07cf0     67 14 06 F6 | 	mov	arg02, ##@LR__5051
07cf4     54 00 00 FF 
07cf8     FC E5 85 F1 | 	sub	objptr, ##43516
07cfc     60 68 B1 FD | 	call	#__system___string_cmp
07d00     00 FA 0D F2 | 	cmp	result1, #0 wz
07d04     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07d08     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0685
07d0c                 | '   if m>3 then printerror(45): return(45)
07d0c     04 32 56 F2 | 	cmps	local11, #4 wc
07d10     10 00 90 CD |  if_b	jmp	#LR__0689
07d14     2D 12 06 F6 | 	mov	arg01, #45
07d18     C0 23 B1 FD | 	call	#_printerror
07d1c     2D FA 05 F6 | 	mov	result1, #45
07d20     34 03 90 FD | 	jmp	#LR__0706
07d24                 | LR__0689
07d24     00 39 06 F6 | 	mov	local14, #256
07d28     0C 3A 06 F6 | 	mov	local15, #12
07d2c                 | LR__0690
07d2c                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07d2c                 | '   arraytype=array_no_type : esize=12
07d2c                 | ' 1350 
07d2c                 | '   if lparts(l).part$="as" then
07d2c     18 25 02 F6 | 	mov	local04, local10
07d30     03 24 66 F0 | 	shl	local04, #3
07d34     54 00 00 FF 
07d38     FC E5 05 F1 | 	add	objptr, ##43516
07d3c     F2 24 02 F1 | 	add	local04, objptr
07d40     12 13 02 FB | 	rdlong	arg01, local04
07d44     70 01 00 FF 
07d48     69 14 06 F6 | 	mov	arg02, ##@LR__5052
07d4c     54 00 00 FF 
07d50     FC E5 85 F1 | 	sub	objptr, ##43516
07d54     08 68 B1 FD | 	call	#__system___string_cmp
07d58     00 FA 0D F2 | 	cmp	result1, #0 wz
07d5c     F8 01 90 5D |  if_ne	jmp	#LR__0705
07d60                 | '     select case lparts(l+1).part$
07d60     18 35 02 F6 | 	mov	local12, local10
07d64     01 34 06 F1 | 	add	local12, #1
07d68     03 34 66 F0 | 	shl	local12, #3
07d6c     54 00 00 FF 
07d70     FC E5 05 F1 | 	add	objptr, ##43516
07d74     F2 34 02 F1 | 	add	local12, objptr
07d78     1A 3D 02 FB | 	rdlong	local16, local12
07d7c     70 01 00 FF 
07d80     6C 14 06 F6 | 	mov	arg02, ##@LR__5053
07d84     1E 13 02 F6 | 	mov	arg01, local16
07d88     54 00 00 FF 
07d8c     FC E5 85 F1 | 	sub	objptr, ##43516
07d90     CC 67 B1 FD | 	call	#__system___string_cmp
07d94     00 FA 0D F2 | 	cmp	result1, #0 wz
07d98     0C 01 90 AD |  if_e	jmp	#LR__0691
07d9c     70 01 00 FF 
07da0     71 14 06 F6 | 	mov	arg02, ##@LR__5054
07da4     1E 13 02 F6 | 	mov	arg01, local16
07da8     B4 67 B1 FD | 	call	#__system___string_cmp
07dac     00 FA 0D F2 | 	cmp	result1, #0 wz
07db0     00 01 90 AD |  if_e	jmp	#LR__0692
07db4     70 01 00 FF 
07db8     77 14 06 F6 | 	mov	arg02, ##@LR__5055
07dbc     1E 13 02 F6 | 	mov	arg01, local16
07dc0     9C 67 B1 FD | 	call	#__system___string_cmp
07dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
07dc8     F4 00 90 AD |  if_e	jmp	#LR__0693
07dcc     70 01 00 FF 
07dd0     7D 14 06 F6 | 	mov	arg02, ##@LR__5056
07dd4     1E 13 02 F6 | 	mov	arg01, local16
07dd8     84 67 B1 FD | 	call	#__system___string_cmp
07ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
07de0     E8 00 90 AD |  if_e	jmp	#LR__0694
07de4     70 01 00 FF 
07de8     84 14 06 F6 | 	mov	arg02, ##@LR__5057
07dec     1E 13 02 F6 | 	mov	arg01, local16
07df0     6C 67 B1 FD | 	call	#__system___string_cmp
07df4     00 FA 0D F2 | 	cmp	result1, #0 wz
07df8     DC 00 90 AD |  if_e	jmp	#LR__0695
07dfc     70 01 00 FF 
07e00     89 14 06 F6 | 	mov	arg02, ##@LR__5058
07e04     1E 13 02 F6 | 	mov	arg01, local16
07e08     54 67 B1 FD | 	call	#__system___string_cmp
07e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e10     D0 00 90 AD |  if_e	jmp	#LR__0696
07e14     70 01 00 FF 
07e18     91 14 06 F6 | 	mov	arg02, ##@LR__5059
07e1c     1E 13 02 F6 | 	mov	arg01, local16
07e20     3C 67 B1 FD | 	call	#__system___string_cmp
07e24     00 FA 0D F2 | 	cmp	result1, #0 wz
07e28     C4 00 90 AD |  if_e	jmp	#LR__0697
07e2c     70 01 00 FF 
07e30     97 14 06 F6 | 	mov	arg02, ##@LR__5060
07e34     1E 13 02 F6 | 	mov	arg01, local16
07e38     24 67 B1 FD | 	call	#__system___string_cmp
07e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e40     B8 00 90 AD |  if_e	jmp	#LR__0698
07e44     70 01 00 FF 
07e48     9D 14 06 F6 | 	mov	arg02, ##@LR__5061
07e4c     1E 13 02 F6 | 	mov	arg01, local16
07e50     0C 67 B1 FD | 	call	#__system___string_cmp
07e54     00 FA 0D F2 | 	cmp	result1, #0 wz
07e58     AC 00 90 AD |  if_e	jmp	#LR__0699
07e5c     70 01 00 FF 
07e60     A4 14 06 F6 | 	mov	arg02, ##@LR__5062
07e64     1E 13 02 F6 | 	mov	arg01, local16
07e68     F4 66 B1 FD | 	call	#__system___string_cmp
07e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e70     A0 00 90 AD |  if_e	jmp	#LR__0700
07e74     70 01 00 FF 
07e78     AB 14 06 F6 | 	mov	arg02, ##@LR__5063
07e7c     1E 13 02 F6 | 	mov	arg01, local16
07e80     DC 66 B1 FD | 	call	#__system___string_cmp
07e84     00 FA 0D F2 | 	cmp	result1, #0 wz
07e88     94 00 90 AD |  if_e	jmp	#LR__0701
07e8c     70 01 00 FF 
07e90     B2 14 06 F6 | 	mov	arg02, ##@LR__5064
07e94     1E 13 02 F6 | 	mov	arg01, local16
07e98     C4 66 B1 FD | 	call	#__system___string_cmp
07e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
07ea0     88 00 90 AD |  if_e	jmp	#LR__0702
07ea4     90 00 90 FD | 	jmp	#LR__0703
07ea8                 | LR__0691
07ea8     01 39 06 F6 | 	mov	local14, #257
07eac     01 3A 06 F6 | 	mov	local15, #1
07eb0     A4 00 90 FD | 	jmp	#LR__0705
07eb4                 | LR__0692
07eb4     02 39 06 F6 | 	mov	local14, #258
07eb8     01 3A 06 F6 | 	mov	local15, #1
07ebc     98 00 90 FD | 	jmp	#LR__0705
07ec0                 | LR__0693
07ec0     03 39 06 F6 | 	mov	local14, #259
07ec4     02 3A 06 F6 | 	mov	local15, #2
07ec8     8C 00 90 FD | 	jmp	#LR__0705
07ecc                 | LR__0694
07ecc     04 39 06 F6 | 	mov	local14, #260
07ed0     02 3A 06 F6 | 	mov	local15, #2
07ed4     80 00 90 FD | 	jmp	#LR__0705
07ed8                 | LR__0695
07ed8     05 39 06 F6 | 	mov	local14, #261
07edc     04 3A 06 F6 | 	mov	local15, #4
07ee0     74 00 90 FD | 	jmp	#LR__0705
07ee4                 | LR__0696
07ee4     05 39 06 F6 | 	mov	local14, #261
07ee8     04 3A 06 F6 | 	mov	local15, #4
07eec     68 00 90 FD | 	jmp	#LR__0705
07ef0                 | LR__0697
07ef0     06 39 06 F6 | 	mov	local14, #262
07ef4     04 3A 06 F6 | 	mov	local15, #4
07ef8     5C 00 90 FD | 	jmp	#LR__0705
07efc                 | LR__0698
07efc     07 39 06 F6 | 	mov	local14, #263
07f00     08 3A 06 F6 | 	mov	local15, #8
07f04     50 00 90 FD | 	jmp	#LR__0705
07f08                 | LR__0699
07f08     08 39 06 F6 | 	mov	local14, #264
07f0c     08 3A 06 F6 | 	mov	local15, #8
07f10     44 00 90 FD | 	jmp	#LR__0705
07f14                 | LR__0700
07f14     09 39 06 F6 | 	mov	local14, #265
07f18     04 3A 06 F6 | 	mov	local15, #4
07f1c     38 00 90 FD | 	jmp	#LR__0705
07f20                 | LR__0701
07f20     0A 39 06 F6 | 	mov	local14, #266
07f24     08 3A 06 F6 | 	mov	local15, #8
07f28     2C 00 90 FD | 	jmp	#LR__0705
07f2c                 | LR__0702
07f2c     0B 39 06 F6 | 	mov	local14, #267
07f30     04 3A 06 F6 | 	mov	local15, #4
07f34     20 00 90 FD | 	jmp	#LR__0705
07f38                 | LR__0703
07f38     2F 12 06 F6 | 	mov	arg01, #47
07f3c     9C 21 B1 FD | 	call	#_printerror
07f40     2F FA 05 F6 | 	mov	result1, #47
07f44     10 01 90 FD | 	jmp	#LR__0706
07f48                 | LR__0704
07f48     2E 12 06 F6 | 	mov	arg01, #46
07f4c     8C 21 B1 FD | 	call	#_printerror
07f50                 | '   printerror(46): return 46
07f50     2E FA 05 F6 | 	mov	result1, #46
07f54     00 01 90 FD | 	jmp	#LR__0706
07f58                 | LR__0705
07f58     0F 3B 02 FD | 	qmul	local15, local01
07f5c     18 2A 62 FD | 	getqx	local07
07f60     10 2B 02 FD | 	qmul	local07, local02
07f64     18 3C 62 FD | 	getqx	local16
07f68     11 3D 02 FD | 	qmul	local16, local03
07f6c     7B 00 00 FF 
07f70     68 E4 05 F1 | 	add	objptr, ##63080
07f74     F2 3E 02 FB | 	rdlong	local17, objptr
07f78     1C 15 02 F6 | 	mov	arg02, local14
07f7c     18 3C 62 FD | 	getqx	local16
07f80     1E 3F 82 F1 | 	sub	local17, local16
07f84     10 3E 86 F1 | 	sub	local17, #16
07f88     0F 3E 26 F5 | 	andn	local17, #15
07f8c     F2 3E 62 FC | 	wrlong	local17, objptr
07f90     7B 00 00 FF 
07f94     68 E4 85 F1 | 	sub	objptr, ##63080
07f98     1F 13 02 F6 | 	mov	arg01, local17
07f9c     E4 22 B1 FD | 	call	#_psdpoke
07fa0     1F 13 02 F6 | 	mov	arg01, local17
07fa4     02 12 06 F1 | 	add	arg01, #2
07fa8     1D 15 02 F6 | 	mov	arg02, local15
07fac     D4 22 B1 FD | 	call	#_psdpoke
07fb0     1F 13 02 F6 | 	mov	arg01, local17
07fb4     04 12 06 F1 | 	add	arg01, #4
07fb8     0F 15 02 F6 | 	mov	arg02, local01
07fbc     7C 22 B1 FD | 	call	#_pslpoke
07fc0     1F 13 02 F6 | 	mov	arg01, local17
07fc4     08 12 06 F1 | 	add	arg01, #8
07fc8     10 15 02 F6 | 	mov	arg02, local02
07fcc     6C 22 B1 FD | 	call	#_pslpoke
07fd0     1F 13 02 F6 | 	mov	arg01, local17
07fd4     0C 12 06 F1 | 	add	arg01, #12
07fd8     11 15 02 F6 | 	mov	arg02, local03
07fdc     5C 22 B1 FD | 	call	#_pslpoke
07fe0     14 35 02 F6 | 	mov	local12, local06
07fe4     04 34 66 F0 | 	shl	local12, #4
07fe8     34 00 00 FF 
07fec     F8 E5 05 F1 | 	add	objptr, ##27128
07ff0     F2 34 02 F1 | 	add	local12, objptr
07ff4     1A 27 62 FC | 	wrlong	local05, local12
07ff8     14 35 02 F6 | 	mov	local12, local06
07ffc     04 34 66 F0 | 	shl	local12, #4
08000     F2 34 02 F1 | 	add	local12, objptr
08004     04 34 06 F1 | 	add	local12, #4
08008     1A 3F 62 FC | 	wrlong	local17, local12
0800c     14 35 02 F6 | 	mov	local12, local06
08010     04 34 66 F0 | 	shl	local12, #4
08014     F2 34 02 F1 | 	add	local12, objptr
08018     0C 34 06 F1 | 	add	local12, #12
0801c     1A 39 62 FC | 	wrlong	local14, local12
08020                 | ' memtop=arrayptr
08020                 | ' 
08020                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
08020                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
08020                 | ' pslpoke arrayptr+4,dims(0)
08020                 | ' pslpoke arrayptr+8,dims(1)
08020                 | ' pslpoke arrayptr+12,dims(2)
08020                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
08020                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
08020                 | ' 
08020                 | ' 
08020                 | ' variables(j).name=varname2$
08020                 | ' variables(j).value.uresult=arrayptr
08020                 | ' variables(j).vartype=arraytype
08020                 | ' if j=varnum then varnum+=1
08020     20 00 00 FF 
08024     00 E4 05 F1 | 	add	objptr, ##16384
08028     F2 2A 02 FB | 	rdlong	local07, objptr
0802c     54 00 00 FF 
08030     F8 E5 85 F1 | 	sub	objptr, ##43512
08034     15 29 0A F2 | 	cmp	local06, local07 wz
08038     54 00 00 AF 
0803c     F8 E5 05 A1 |  if_e	add	objptr, ##43512
08040     F2 2A 02 AB |  if_e	rdlong	local07, objptr
08044     01 2A 06 A1 |  if_e	add	local07, #1
08048     F2 2A 62 AC |  if_e	wrlong	local07, objptr
0804c     54 00 00 AF 
08050     F8 E5 85 A1 |  if_e	sub	objptr, ##43512
08054                 | ' 
08054                 | ' return 0
08054     00 FA 05 F6 | 	mov	result1, #0
08058                 | LR__0706
08058     A7 F0 03 F6 | 	mov	ptra, fp
0805c     B2 00 A0 FD | 	call	#popregs_
08060                 | _compile_dim_ret
08060     2D 00 64 FD | 	ret
08064                 | 
08064                 | ' 
08064                 | ' 
08064                 | ' function compile_for() as ulong  
08064                 | _compile_for
08064     07 4A 05 F6 | 	mov	COUNT_, #7
08068     A8 00 A0 FD | 	call	#pushregs_
0806c                 | ' 
0806c                 | ' 
0806c                 | ' 
0806c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
0806c     57 00 00 FF 
08070     34 E4 05 F1 | 	add	objptr, ##44596
08074     F2 14 02 FB | 	rdlong	arg02, objptr
08078     01 14 06 F1 | 	add	arg02, #1
0807c     03 14 66 F0 | 	shl	arg02, #3
08080     02 00 00 FF 
08084     38 E4 85 F1 | 	sub	objptr, ##1080
08088     F2 14 02 F1 | 	add	arg02, objptr
0808c     0A 13 02 FB | 	rdlong	arg01, arg02
08090     54 00 00 FF 
08094     FC E5 85 F1 | 	sub	objptr, ##43516
08098                 | ' 
08098                 | ' select case s
08098     6E 01 00 FF 
0809c     EC 14 06 F6 | 	mov	arg02, ##@LR__4862
080a0     BC 64 B1 FD | 	call	#__system___string_cmp
080a4     00 FA 0D F2 | 	cmp	result1, #0 wz
080a8     1B FA 05 A6 |  if_e	mov	result1, #27
080ac     00 FA 05 56 |  if_ne	mov	result1, #0
080b0     00 FA 0D F2 | 	cmp	result1, #0 wz
080b4     0C 00 90 AD |  if_e	jmp	#LR__0710
080b8     05 12 06 F6 | 	mov	arg01, #5
080bc     D8 E4 BF FD | 	call	#_compile_immediate_assign
080c0     10 00 90 FD | 	jmp	#LR__0711
080c4                 | LR__0710
080c4     20 12 06 F6 | 	mov	arg01, #32
080c8     48 E9 BF FD | 	call	#_compile_error
080cc     20 FA 05 F6 | 	mov	result1, #32
080d0     E8 02 90 FD | 	jmp	#LR__0717
080d4                 | LR__0711
080d4     6A 00 00 FF 
080d8     6C E4 05 F1 | 	add	objptr, ##54380
080dc     F2 12 02 FB | 	rdlong	arg01, objptr
080e0     09 25 02 F6 | 	mov	local04, arg01
080e4     01 24 86 F1 | 	sub	local04, #1
080e8     12 15 02 F6 | 	mov	arg02, local04
080ec     01 14 66 F0 | 	shl	arg02, #1
080f0     12 15 02 F1 | 	add	arg02, local04
080f4     02 14 66 F0 | 	shl	arg02, #2
080f8     03 00 00 FF 
080fc     00 E4 85 F1 | 	sub	objptr, ##1536
08100     F2 14 02 F1 | 	add	arg02, objptr
08104     0A 1F 02 FB | 	rdlong	local01, arg02
08108     04 14 06 F1 | 	add	arg02, #4
0810c     0A 27 02 FB | 	rdlong	local05, arg02
08110     01 12 86 F1 | 	sub	arg01, #1
08114     09 29 02 F6 | 	mov	local06, arg01
08118     01 28 66 F0 | 	shl	local06, #1
0811c     09 29 02 F1 | 	add	local06, arg01
08120     02 28 66 F0 | 	shl	local06, #2
08124     F2 28 02 F1 | 	add	local06, objptr
08128     08 28 06 F1 | 	add	local06, #8
0812c     14 13 02 FB | 	rdlong	arg01, local06
08130     13 21 02 F6 | 	mov	local02, local05
08134     09 23 02 F6 | 	mov	local03, arg01
08138                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
08138                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
08138     17 22 0E F2 | 	cmp	local03, #23 wz
0813c     67 00 00 FF 
08140     6C E4 85 F1 | 	sub	objptr, ##52844
08144     10 00 90 AD |  if_e	jmp	#LR__0712
08148     22 12 06 F6 | 	mov	arg01, #34
0814c     C4 E8 BF FD | 	call	#_compile_error
08150     22 FA 05 F6 | 	mov	result1, #34
08154     64 02 90 FD | 	jmp	#LR__0717
08158                 | LR__0712
08158     0F 2B 02 F6 | 	mov	local07, local01
0815c                 | ' varnum=t1.result.uresult
0815c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
0815c     57 00 00 FF 
08160     34 E4 05 F1 | 	add	objptr, ##44596
08164     F2 24 02 FB | 	rdlong	local04, objptr
08168     03 24 66 F0 | 	shl	local04, #3
0816c     02 00 00 FF 
08170     38 E4 85 F1 | 	sub	objptr, ##1080
08174     F2 24 02 F1 | 	add	local04, objptr
08178     12 13 02 FB | 	rdlong	arg01, local04
0817c     70 01 00 FF 
08180     B9 14 06 F6 | 	mov	arg02, ##@LR__5065
08184     54 00 00 FF 
08188     FC E5 85 F1 | 	sub	objptr, ##43516
0818c     D0 63 B1 FD | 	call	#__system___string_cmp
08190     00 FA 0D F2 | 	cmp	result1, #0 wz
08194     10 00 90 AD |  if_e	jmp	#LR__0713
08198     21 12 06 F6 | 	mov	arg01, #33
0819c     74 E8 BF FD | 	call	#_compile_error
081a0     21 FA 05 F6 | 	mov	result1, #33
081a4     14 02 90 FD | 	jmp	#LR__0717
081a8                 | LR__0713
081a8     57 00 00 FF 
081ac     34 E4 05 F1 | 	add	objptr, ##44596
081b0     F2 24 02 FB | 	rdlong	local04, objptr
081b4     01 24 06 F1 | 	add	local04, #1
081b8     F2 24 62 FC | 	wrlong	local04, objptr
081bc     57 00 00 FF 
081c0     34 E4 85 F1 | 	sub	objptr, ##44596
081c4     9C 0C B0 FD | 	call	#_expr
081c8                 | ' ct+=1
081c8                 | ' expr()  ' there is "to" value pushed on the stack
081c8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
081c8     57 00 00 FF 
081cc     34 E4 05 F1 | 	add	objptr, ##44596
081d0     F2 24 02 FB | 	rdlong	local04, objptr
081d4     03 24 66 F0 | 	shl	local04, #3
081d8     02 00 00 FF 
081dc     38 E4 85 F1 | 	sub	objptr, ##1080
081e0     F2 24 02 F1 | 	add	local04, objptr
081e4     12 13 02 FB | 	rdlong	arg01, local04
081e8     70 01 00 FF 
081ec     BC 14 06 F6 | 	mov	arg02, ##@LR__5066
081f0     54 00 00 FF 
081f4     FC E5 85 F1 | 	sub	objptr, ##43516
081f8     64 63 B1 FD | 	call	#__system___string_cmp
081fc     00 FA 0D F2 | 	cmp	result1, #0 wz
08200     3C 00 90 AD |  if_e	jmp	#LR__0714
08204     57 00 00 FF 
08208     34 E4 05 F1 | 	add	objptr, ##44596
0820c     F2 28 02 FB | 	rdlong	local06, objptr
08210     03 28 66 F0 | 	shl	local06, #3
08214     02 00 00 FF 
08218     38 E4 85 F1 | 	sub	objptr, ##1080
0821c     F2 28 02 F1 | 	add	local06, objptr
08220     14 13 02 FB | 	rdlong	arg01, local06
08224     70 01 00 FF 
08228     C1 14 06 F6 | 	mov	arg02, ##@LR__5067
0822c     54 00 00 FF 
08230     FC E5 85 F1 | 	sub	objptr, ##43516
08234     28 63 B1 FD | 	call	#__system___string_cmp
08238     00 FA 0D F2 | 	cmp	result1, #0 wz
0823c     24 00 90 5D |  if_ne	jmp	#LR__0715
08240                 | LR__0714
08240     57 00 00 FF 
08244     34 E4 05 F1 | 	add	objptr, ##44596
08248     F2 28 02 FB | 	rdlong	local06, objptr
0824c     01 28 06 F1 | 	add	local06, #1
08250     F2 28 62 FC | 	wrlong	local06, objptr
08254     57 00 00 FF 
08258     34 E4 85 F1 | 	sub	objptr, ##44596
0825c     04 0C B0 FD | 	call	#_expr
08260     78 00 90 FD | 	jmp	#LR__0716
08264                 | LR__0715
08264     6A 00 00 FF 
08268     6C E4 05 F1 | 	add	objptr, ##54380
0826c     F2 28 02 FB | 	rdlong	local06, objptr
08270     14 27 02 F6 | 	mov	local05, local06
08274     01 26 66 F0 | 	shl	local05, #1
08278     14 27 02 F1 | 	add	local05, local06
0827c     02 26 66 F0 | 	shl	local05, #2
08280     03 00 00 FF 
08284     00 E4 85 F1 | 	sub	objptr, ##1536
08288     F2 26 02 F1 | 	add	local05, objptr
0828c     08 26 06 F1 | 	add	local05, #8
08290     13 39 68 FC | 	wrlong	#28, local05
08294     03 00 00 FF 
08298     00 E4 05 F1 | 	add	objptr, ##1536
0829c     F2 28 02 FB | 	rdlong	local06, objptr
082a0     14 27 02 F6 | 	mov	local05, local06
082a4     01 26 66 F0 | 	shl	local05, #1
082a8     14 27 02 F1 | 	add	local05, local06
082ac     02 26 66 F0 | 	shl	local05, #2
082b0     03 00 00 FF 
082b4     00 E4 85 F1 | 	sub	objptr, ##1536
082b8     F2 26 02 F1 | 	add	local05, objptr
082bc     13 03 68 FC | 	wrlong	#1, local05
082c0     03 00 00 FF 
082c4     00 E4 05 F1 | 	add	objptr, ##1536
082c8     F2 28 02 FB | 	rdlong	local06, objptr
082cc     01 28 06 F1 | 	add	local06, #1
082d0     F2 28 62 FC | 	wrlong	local06, objptr
082d4     6A 00 00 FF 
082d8     6C E4 85 F1 | 	sub	objptr, ##54380
082dc                 | LR__0716
082dc     6A 00 00 FF 
082e0     6C E4 05 F1 | 	add	objptr, ##54380
082e4     F2 28 02 FB | 	rdlong	local06, objptr
082e8     14 27 02 F6 | 	mov	local05, local06
082ec     01 26 66 F0 | 	shl	local05, #1
082f0     14 27 02 F1 | 	add	local05, local06
082f4     02 26 66 F0 | 	shl	local05, #2
082f8     03 00 00 FF 
082fc     00 E4 85 F1 | 	sub	objptr, ##1536
08300     F2 26 02 F1 | 	add	local05, objptr
08304     08 26 06 F1 | 	add	local05, #8
08308     13 39 68 FC | 	wrlong	#28, local05
0830c     03 00 00 FF 
08310     00 E4 05 F1 | 	add	objptr, ##1536
08314     F2 28 02 FB | 	rdlong	local06, objptr
08318     14 27 02 F6 | 	mov	local05, local06
0831c     01 26 66 F0 | 	shl	local05, #1
08320     14 27 02 F1 | 	add	local05, local06
08324     02 26 66 F0 | 	shl	local05, #2
08328     03 00 00 FF 
0832c     00 E4 85 F1 | 	sub	objptr, ##1536
08330     F2 26 02 F1 | 	add	local05, objptr
08334     13 2B 62 FC | 	wrlong	local07, local05
08338     03 00 00 FF 
0833c     00 E4 05 F1 | 	add	objptr, ##1536
08340     F2 2A 02 FB | 	rdlong	local07, objptr
08344     01 2A 06 F1 | 	add	local07, #1
08348     F2 2A 62 FC | 	wrlong	local07, objptr
0834c     15 29 02 F6 | 	mov	local06, local07
08350     01 28 66 F0 | 	shl	local06, #1
08354     15 29 02 F1 | 	add	local06, local07
08358     02 28 66 F0 | 	shl	local06, #2
0835c     03 00 00 FF 
08360     00 E4 85 F1 | 	sub	objptr, ##1536
08364     F2 28 02 F1 | 	add	local06, objptr
08368     08 28 06 F1 | 	add	local06, #8
0836c     14 95 68 FC | 	wrlong	#74, local06
08370     03 00 00 FF 
08374     00 E4 05 F1 | 	add	objptr, ##1536
08378     F2 2A 02 FB | 	rdlong	local07, objptr
0837c     15 29 02 F6 | 	mov	local06, local07
08380     01 28 66 F0 | 	shl	local06, #1
08384     15 29 02 F1 | 	add	local06, local07
08388     02 28 66 F0 | 	shl	local06, #2
0838c     03 00 00 FF 
08390     00 E4 85 F1 | 	sub	objptr, ##1536
08394     F2 28 02 F1 | 	add	local06, objptr
08398     14 01 68 FC | 	wrlong	#0, local06
0839c     03 00 00 FF 
083a0     00 E4 05 F1 | 	add	objptr, ##1536
083a4     F2 2A 02 FB | 	rdlong	local07, objptr
083a8     01 2A 06 F1 | 	add	local07, #1
083ac     F2 2A 62 FC | 	wrlong	local07, objptr
083b0     6A 00 00 FF 
083b4     6C E4 85 F1 | 	sub	objptr, ##54380
083b8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
083b8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
083b8                 | ' 
083b8                 | ' 
083b8                 | ' return 0
083b8     00 FA 05 F6 | 	mov	result1, #0
083bc                 | LR__0717
083bc     A7 F0 03 F6 | 	mov	ptra, fp
083c0     B2 00 A0 FD | 	call	#popregs_
083c4                 | _compile_for_ret
083c4     2D 00 64 FD | 	ret
083c8                 | 
083c8                 | ' 
083c8                 | ' 
083c8                 | ' sub do_for()
083c8                 | _do_for
083c8     01 4A 05 F6 | 	mov	COUNT_, #1
083cc     A8 00 A0 FD | 	call	#pushregs_
083d0     10 F0 07 F1 | 	add	ptra, #16
083d4     79 00 00 FF 
083d8     C8 E5 05 F1 | 	add	objptr, ##62408
083dc     F2 12 02 FB | 	rdlong	arg01, objptr
083e0     01 12 06 F1 | 	add	arg01, #1
083e4     F2 12 62 FC | 	wrlong	arg01, objptr
083e8     79 00 00 FF 
083ec     C8 E5 85 F1 | 	sub	objptr, ##62408
083f0     B0 20 B0 FD | 	call	#_pop
083f4     A7 FA 61 FC | 	wrlong	result1, fp
083f8     04 4E 05 F1 | 	add	fp, #4
083fc     A7 FC 61 FC | 	wrlong	result2, fp
08400     04 4E 05 F1 | 	add	fp, #4
08404     A7 FE 61 FC | 	wrlong	result3, fp
08408     08 4E 85 F1 | 	sub	fp, #8
0840c     79 00 00 FF 
08410     C8 E5 05 F1 | 	add	objptr, ##62408
08414     F2 12 02 FB | 	rdlong	arg01, objptr
08418     09 1F 02 F6 | 	mov	local01, arg01
0841c     02 1E 66 F0 | 	shl	local01, #2
08420     09 1F 02 F1 | 	add	local01, arg01
08424     02 1E 66 F0 | 	shl	local01, #2
08428     07 00 00 FF 
0842c     40 E5 85 F1 | 	sub	objptr, ##3904
08430     F2 1E 02 F1 | 	add	local01, objptr
08434     A7 12 02 FB | 	rdlong	arg01, fp
08438     08 1E 06 F1 | 	add	local01, #8
0843c     0F 13 62 FC | 	wrlong	arg01, local01
08440     72 00 00 FF 
08444     88 E4 85 F1 | 	sub	objptr, ##58504
08448     58 20 B0 FD | 	call	#_pop
0844c     A7 FA 61 FC | 	wrlong	result1, fp
08450     04 4E 05 F1 | 	add	fp, #4
08454     A7 FC 61 FC | 	wrlong	result2, fp
08458     04 4E 05 F1 | 	add	fp, #4
0845c     A7 FE 61 FC | 	wrlong	result3, fp
08460     08 4E 85 F1 | 	sub	fp, #8
08464     79 00 00 FF 
08468     C8 E5 05 F1 | 	add	objptr, ##62408
0846c     F2 12 02 FB | 	rdlong	arg01, objptr
08470     09 1F 02 F6 | 	mov	local01, arg01
08474     02 1E 66 F0 | 	shl	local01, #2
08478     09 1F 02 F1 | 	add	local01, arg01
0847c     02 1E 66 F0 | 	shl	local01, #2
08480     07 00 00 FF 
08484     40 E5 85 F1 | 	sub	objptr, ##3904
08488     F2 1E 02 F1 | 	add	local01, objptr
0848c     A7 12 02 F6 | 	mov	arg01, fp
08490     72 00 00 FF 
08494     88 E4 85 F1 | 	sub	objptr, ##58504
08498     D4 AA B0 FD | 	call	#_converttoint
0849c     FD 12 02 F6 | 	mov	arg01, result1
084a0     0C 1E 06 F1 | 	add	local01, #12
084a4     0F 13 62 FC | 	wrlong	arg01, local01
084a8     F8 1F B0 FD | 	call	#_pop
084ac     A7 FA 61 FC | 	wrlong	result1, fp
084b0     04 4E 05 F1 | 	add	fp, #4
084b4     A7 FC 61 FC | 	wrlong	result2, fp
084b8     04 4E 05 F1 | 	add	fp, #4
084bc     A7 FE 61 FC | 	wrlong	result3, fp
084c0     08 4E 85 F1 | 	sub	fp, #8
084c4     79 00 00 FF 
084c8     C8 E5 05 F1 | 	add	objptr, ##62408
084cc     F2 12 02 FB | 	rdlong	arg01, objptr
084d0     09 1F 02 F6 | 	mov	local01, arg01
084d4     02 1E 66 F0 | 	shl	local01, #2
084d8     09 1F 02 F1 | 	add	local01, arg01
084dc     02 1E 66 F0 | 	shl	local01, #2
084e0     07 00 00 FF 
084e4     40 E5 85 F1 | 	sub	objptr, ##3904
084e8     F2 1E 02 F1 | 	add	local01, objptr
084ec     A7 12 02 F6 | 	mov	arg01, fp
084f0     72 00 00 FF 
084f4     88 E4 85 F1 | 	sub	objptr, ##58504
084f8     74 AA B0 FD | 	call	#_converttoint
084fc     10 1E 06 F1 | 	add	local01, #16
08500     0F FB 61 FC | 	wrlong	result1, local01
08504                 | ' fortop+=1
08504                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
08504                 | ' 'if i> maxfor then printerror(36) : return
08504                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
08504                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
08504                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
08504                 | ' if compiledline(lineptr_e).result_type=token_end then
08504     6A 00 00 FF 
08508     70 E4 05 F1 | 	add	objptr, ##54384
0850c     F2 12 02 FB | 	rdlong	arg01, objptr
08510     09 1F 02 F6 | 	mov	local01, arg01
08514     01 1E 66 F0 | 	shl	local01, #1
08518     09 1F 02 F1 | 	add	local01, arg01
0851c     02 1E 66 F0 | 	shl	local01, #2
08520     03 00 00 FF 
08524     04 E4 85 F1 | 	sub	objptr, ##1540
08528     F2 1E 02 F1 | 	add	local01, objptr
0852c     08 1E 06 F1 | 	add	local01, #8
08530     0F 1F 02 FB | 	rdlong	local01, local01
08534     FE 1F 0E F2 | 	cmp	local01, #510 wz
08538     67 00 00 FF 
0853c     6C E4 85 F1 | 	sub	objptr, ##52844
08540     70 00 90 5D |  if_ne	jmp	#LR__0720
08544     79 00 00 FF 
08548     C8 E5 05 F1 | 	add	objptr, ##62408
0854c     F2 12 02 FB | 	rdlong	arg01, objptr
08550     09 1F 02 F6 | 	mov	local01, arg01
08554     02 1E 66 F0 | 	shl	local01, #2
08558     09 1F 02 F1 | 	add	local01, arg01
0855c     02 1E 66 F0 | 	shl	local01, #2
08560     07 00 00 FF 
08564     40 E5 85 F1 | 	sub	objptr, ##3904
08568     F2 1E 02 F1 | 	add	local01, objptr
0856c     07 00 00 FF 
08570     18 E5 05 F1 | 	add	objptr, ##3864
08574     F2 12 02 FB | 	rdlong	arg01, objptr
08578     0F 13 62 FC | 	wrlong	arg01, local01
0857c     28 E4 05 F1 | 	add	objptr, #40
08580     F2 12 02 FB | 	rdlong	arg01, objptr
08584     09 1F 02 F6 | 	mov	local01, arg01
08588     02 1E 66 F0 | 	shl	local01, #2
0858c     09 1F 02 F1 | 	add	local01, arg01
08590     02 1E 66 F0 | 	shl	local01, #2
08594     07 00 00 FF 
08598     40 E5 85 F1 | 	sub	objptr, ##3904
0859c     F2 1E 02 F1 | 	add	local01, objptr
085a0     04 1E 06 F1 | 	add	local01, #4
085a4     0F 01 68 FC | 	wrlong	#0, local01
085a8     72 00 00 FF 
085ac     88 E4 85 F1 | 	sub	objptr, ##58504
085b0     7C 00 90 FD | 	jmp	#LR__0721
085b4                 | LR__0720
085b4     79 00 00 FF 
085b8     C8 E5 05 F1 | 	add	objptr, ##62408
085bc     F2 12 02 FB | 	rdlong	arg01, objptr
085c0     09 1F 02 F6 | 	mov	local01, arg01
085c4     02 1E 66 F0 | 	shl	local01, #2
085c8     09 1F 02 F1 | 	add	local01, arg01
085cc     02 1E 66 F0 | 	shl	local01, #2
085d0     07 00 00 FF 
085d4     40 E5 85 F1 | 	sub	objptr, ##3904
085d8     F2 1E 02 F1 | 	add	local01, objptr
085dc     07 00 00 FF 
085e0     20 E5 05 F1 | 	add	objptr, ##3872
085e4     F2 12 02 FB | 	rdlong	arg01, objptr
085e8     0F 13 62 FC | 	wrlong	arg01, local01
085ec     20 E4 05 F1 | 	add	objptr, #32
085f0     F2 12 02 FB | 	rdlong	arg01, objptr
085f4     09 1F 02 F6 | 	mov	local01, arg01
085f8     02 1E 66 F0 | 	shl	local01, #2
085fc     09 1F 02 F1 | 	add	local01, arg01
08600     02 1E 66 F0 | 	shl	local01, #2
08604     07 00 00 FF 
08608     40 E5 85 F1 | 	sub	objptr, ##3904
0860c     F2 1E 02 F1 | 	add	local01, objptr
08610     08 00 00 FF 
08614     18 E4 85 F1 | 	sub	objptr, ##4120
08618     F2 12 02 FB | 	rdlong	arg01, objptr
0861c     6A 00 00 FF 
08620     70 E4 85 F1 | 	sub	objptr, ##54384
08624     01 12 06 F1 | 	add	arg01, #1
08628     04 1E 06 F1 | 	add	local01, #4
0862c     0F 13 62 FC | 	wrlong	arg01, local01
08630                 | LR__0721
08630     A7 F0 03 F6 | 	mov	ptra, fp
08634     B2 00 A0 FD | 	call	#popregs_
08638                 | _do_for_ret
08638     2D 00 64 FD | 	ret
0863c                 | 
0863c                 | ' 
0863c                 | ' ' now do_next todo
0863c                 | ' 
0863c                 | ' sub do_next()
0863c                 | _do_next
0863c     04 4A 05 F6 | 	mov	COUNT_, #4
08640     A8 00 A0 FD | 	call	#pushregs_
08644     5C 1E B0 FD | 	call	#_pop
08648     FD 1E 02 F6 | 	mov	local01, result1
0864c     FE 20 02 F6 | 	mov	local02, result2
08650     FF 22 02 F6 | 	mov	local03, result3
08654                 | ' 
08654                 | ' t1=pop() :varnum=t1.result.uresult
08654                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08654     79 00 00 FF 
08658     C8 E5 05 F1 | 	add	objptr, ##62408
0865c     F2 12 02 FB | 	rdlong	arg01, objptr
08660     09 15 02 F6 | 	mov	arg02, arg01
08664     02 14 66 F0 | 	shl	arg02, #2
08668     09 15 02 F1 | 	add	arg02, arg01
0866c     02 14 66 F0 | 	shl	arg02, #2
08670     07 00 00 FF 
08674     40 E5 85 F1 | 	sub	objptr, ##3904
08678     F2 14 02 F1 | 	add	arg02, objptr
0867c     08 14 06 F1 | 	add	arg02, #8
08680     0A 15 02 FB | 	rdlong	arg02, arg02
08684     0F 15 0A F2 | 	cmp	arg02, local01 wz
08688     72 00 00 FF 
0868c     88 E4 85 F1 | 	sub	objptr, ##58504
08690     0C 00 90 AD |  if_e	jmp	#LR__0730
08694     25 12 06 F6 | 	mov	arg01, #37
08698     40 1A B1 FD | 	call	#_printerror
0869c     A8 02 90 FD | 	jmp	#LR__0735
086a0                 | LR__0730
086a0                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
086a0     0F 15 02 F6 | 	mov	arg02, local01
086a4     04 14 66 F0 | 	shl	arg02, #4
086a8     34 00 00 FF 
086ac     F8 E5 05 F1 | 	add	objptr, ##27128
086b0     F2 14 02 F1 | 	add	arg02, objptr
086b4     0C 14 06 F1 | 	add	arg02, #12
086b8     0A 15 02 FB | 	rdlong	arg02, arg02
086bc     1E 14 0E F2 | 	cmp	arg02, #30 wz
086c0     34 00 00 FF 
086c4     F8 E5 85 F1 | 	sub	objptr, ##27128
086c8     54 00 90 5D |  if_ne	jmp	#LR__0731
086cc     0F 15 02 F6 | 	mov	arg02, local01
086d0     04 14 66 F0 | 	shl	arg02, #4
086d4     34 00 00 FF 
086d8     F8 E5 05 F1 | 	add	objptr, ##27128
086dc     F2 14 02 F1 | 	add	arg02, objptr
086e0     0C 14 06 F1 | 	add	arg02, #12
086e4     0A 39 68 FC | 	wrlong	#28, arg02
086e8     0F 25 02 F6 | 	mov	local04, local01
086ec     04 24 66 F0 | 	shl	local04, #4
086f0     F2 24 02 F1 | 	add	local04, objptr
086f4     0F 13 02 F6 | 	mov	arg01, local01
086f8     04 12 66 F0 | 	shl	arg01, #4
086fc     F2 12 02 F1 | 	add	arg01, objptr
08700     04 12 06 F1 | 	add	arg01, #4
08704     09 13 02 FB | 	rdlong	arg01, arg01
08708     34 00 00 FF 
0870c     F8 E5 85 F1 | 	sub	objptr, ##27128
08710     01 14 06 F6 | 	mov	arg02, #1
08714     64 8E B1 FD | 	call	#__system___float_tointeger
08718     04 24 06 F1 | 	add	local04, #4
0871c     12 FB 61 FC | 	wrlong	result1, local04
08720                 | LR__0731
08720     79 00 00 FF 
08724     C8 E5 05 F1 | 	add	objptr, ##62408
08728     F2 12 02 FB | 	rdlong	arg01, objptr
0872c     09 25 02 F6 | 	mov	local04, arg01
08730     02 24 66 F0 | 	shl	local04, #2
08734     09 25 02 F1 | 	add	local04, arg01
08738     02 24 66 F0 | 	shl	local04, #2
0873c     07 00 00 FF 
08740     40 E5 85 F1 | 	sub	objptr, ##3904
08744     F2 24 02 F1 | 	add	local04, objptr
08748     0C 24 06 F1 | 	add	local04, #12
0874c     12 25 02 FB | 	rdlong	local04, local04
08750     0F 13 02 F6 | 	mov	arg01, local01
08754     04 12 66 F0 | 	shl	arg01, #4
08758     3D 00 00 FF 
0875c     90 E4 85 F1 | 	sub	objptr, ##31376
08760     F2 12 02 F1 | 	add	arg01, objptr
08764     0F FF 01 F6 | 	mov	result3, local01
08768     04 FE 65 F0 | 	shl	result3, #4
0876c     F2 FE 01 F1 | 	add	result3, objptr
08770     04 FE 05 F1 | 	add	result3, #4
08774     FF FE 01 FB | 	rdlong	result3, result3
08778     12 FF 01 F1 | 	add	result3, local04
0877c     04 12 06 F1 | 	add	arg01, #4
08780     09 FF 61 FC | 	wrlong	result3, arg01
08784                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08784                 | ' if fortable(fortop).stepval>=0 then
08784     44 00 00 FF 
08788     D0 E5 05 F1 | 	add	objptr, ##35280
0878c     F2 12 02 FB | 	rdlong	arg01, objptr
08790     09 25 02 F6 | 	mov	local04, arg01
08794     02 24 66 F0 | 	shl	local04, #2
08798     09 25 02 F1 | 	add	local04, arg01
0879c     02 24 66 F0 | 	shl	local04, #2
087a0     07 00 00 FF 
087a4     40 E5 85 F1 | 	sub	objptr, ##3904
087a8     F2 24 02 F1 | 	add	local04, objptr
087ac     0C 24 06 F1 | 	add	local04, #12
087b0     12 25 02 FB | 	rdlong	local04, local04
087b4     00 24 56 F2 | 	cmps	local04, #0 wc
087b8     72 00 00 FF 
087bc     88 E4 85 F1 | 	sub	objptr, ##58504
087c0     78 00 90 CD |  if_b	jmp	#LR__0732
087c4                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
087c4     04 1E 66 F0 | 	shl	local01, #4
087c8     34 00 00 FF 
087cc     F8 E5 05 F1 | 	add	objptr, ##27128
087d0     F2 1E 02 F1 | 	add	local01, objptr
087d4     44 00 00 FF 
087d8     D0 E5 05 F1 | 	add	objptr, ##35280
087dc     F2 24 02 FB | 	rdlong	local04, objptr
087e0     12 13 02 F6 | 	mov	arg01, local04
087e4     02 12 66 F0 | 	shl	arg01, #2
087e8     12 13 02 F1 | 	add	arg01, local04
087ec     02 12 66 F0 | 	shl	arg01, #2
087f0     07 00 00 FF 
087f4     40 E5 85 F1 | 	sub	objptr, ##3904
087f8     F2 12 02 F1 | 	add	arg01, objptr
087fc     04 1E 06 F1 | 	add	local01, #4
08800     0F 25 02 FB | 	rdlong	local04, local01
08804     10 12 06 F1 | 	add	arg01, #16
08808     09 13 02 FB | 	rdlong	arg01, arg01
0880c     09 25 5A F2 | 	cmps	local04, arg01 wcz
08810     72 00 00 FF 
08814     88 E4 85 F1 | 	sub	objptr, ##58504
08818     9C 00 90 ED |  if_be	jmp	#LR__0734
0881c     79 00 00 FF 
08820     C8 E5 05 F1 | 	add	objptr, ##62408
08824     F2 24 02 FB | 	rdlong	local04, objptr
08828     01 24 86 F1 | 	sub	local04, #1
0882c     F2 24 62 FC | 	wrlong	local04, objptr
08830     79 00 00 FF 
08834     C8 E5 85 F1 | 	sub	objptr, ##62408
08838     0C 01 90 FD | 	jmp	#LR__0735
0883c                 | LR__0732
0883c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
0883c     0F 13 02 F6 | 	mov	arg01, local01
08840     04 12 66 F0 | 	shl	arg01, #4
08844     34 00 00 FF 
08848     F8 E5 05 F1 | 	add	objptr, ##27128
0884c     F2 12 02 F1 | 	add	arg01, objptr
08850     44 00 00 FF 
08854     D0 E5 05 F1 | 	add	objptr, ##35280
08858     F2 24 02 FB | 	rdlong	local04, objptr
0885c     12 1F 02 F6 | 	mov	local01, local04
08860     02 1E 66 F0 | 	shl	local01, #2
08864     12 1F 02 F1 | 	add	local01, local04
08868     02 1E 66 F0 | 	shl	local01, #2
0886c     07 00 00 FF 
08870     40 E5 85 F1 | 	sub	objptr, ##3904
08874     F2 1E 02 F1 | 	add	local01, objptr
08878     04 12 06 F1 | 	add	arg01, #4
0887c     09 13 02 FB | 	rdlong	arg01, arg01
08880     10 1E 06 F1 | 	add	local01, #16
08884     0F 1F 02 FB | 	rdlong	local01, local01
08888     0F 13 52 F2 | 	cmps	arg01, local01 wc
0888c     72 00 00 FF 
08890     88 E4 85 F1 | 	sub	objptr, ##58504
08894     20 00 90 3D |  if_ae	jmp	#LR__0733
08898     79 00 00 FF 
0889c     C8 E5 05 F1 | 	add	objptr, ##62408
088a0     F2 24 02 FB | 	rdlong	local04, objptr
088a4     01 24 86 F1 | 	sub	local04, #1
088a8     F2 24 62 FC | 	wrlong	local04, objptr
088ac     79 00 00 FF 
088b0     C8 E5 85 F1 | 	sub	objptr, ##62408
088b4     90 00 90 FD | 	jmp	#LR__0735
088b8                 | LR__0733
088b8                 | LR__0734
088b8     79 00 00 FF 
088bc     C8 E5 05 F1 | 	add	objptr, ##62408
088c0     F2 1E 02 FB | 	rdlong	local01, objptr
088c4     0F 25 02 F6 | 	mov	local04, local01
088c8     02 24 66 F0 | 	shl	local04, #2
088cc     0F 25 02 F1 | 	add	local04, local01
088d0     02 24 66 F0 | 	shl	local04, #2
088d4     07 00 00 FF 
088d8     40 E5 85 F1 | 	sub	objptr, ##3904
088dc     F2 24 02 F1 | 	add	local04, objptr
088e0     12 25 02 FB | 	rdlong	local04, local04
088e4     07 00 00 FF 
088e8     18 E5 05 F1 | 	add	objptr, ##3864
088ec     F2 24 62 FC | 	wrlong	local04, objptr
088f0     28 E4 05 F1 | 	add	objptr, #40
088f4     F2 1E 02 FB | 	rdlong	local01, objptr
088f8     0F 25 02 F6 | 	mov	local04, local01
088fc     02 24 66 F0 | 	shl	local04, #2
08900     0F 25 02 F1 | 	add	local04, local01
08904     02 24 66 F0 | 	shl	local04, #2
08908     07 00 00 FF 
0890c     40 E5 85 F1 | 	sub	objptr, ##3904
08910     F2 24 02 F1 | 	add	local04, objptr
08914     04 24 06 F1 | 	add	local04, #4
08918     12 25 02 FB | 	rdlong	local04, local04
0891c     07 00 00 FF 
08920     1C E5 05 F1 | 	add	objptr, ##3868
08924     F2 24 62 FC | 	wrlong	local04, objptr
08928     0F 00 00 FF 
0892c     38 E5 85 F1 | 	sub	objptr, ##7992
08930     F2 24 02 FB | 	rdlong	local04, objptr
08934     01 24 86 F1 | 	sub	local04, #1
08938     04 E4 05 F1 | 	add	objptr, #4
0893c     F2 24 62 FC | 	wrlong	local04, objptr
08940     6A 00 00 FF 
08944     70 E4 85 F1 | 	sub	objptr, ##54384
08948                 | LR__0735
08948     A7 F0 03 F6 | 	mov	ptra, fp
0894c     B2 00 A0 FD | 	call	#popregs_
08950                 | _do_next_ret
08950     2D 00 64 FD | 	ret
08954                 | 
08954                 | ' 
08954                 | ' 
08954                 | ' function compile_next() as ulong
08954                 | _compile_next
08954     04 4A 05 F6 | 	mov	COUNT_, #4
08958     A8 00 A0 FD | 	call	#pushregs_
0895c     57 00 00 FF 
08960     34 E4 05 F1 | 	add	objptr, ##44596
08964     F2 12 02 FB | 	rdlong	arg01, objptr
08968     03 12 66 F0 | 	shl	arg01, #3
0896c     02 00 00 FF 
08970     38 E4 85 F1 | 	sub	objptr, ##1080
08974     F2 12 02 F1 | 	add	arg01, objptr
08978     09 1F 02 FB | 	rdlong	local01, arg01
0897c                 | ' 
0897c                 | ' varname$=lparts(ct).part$ 
0897c                 | ' 'suffix$=right$(varname$,1)
0897c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
0897c                 | ' if varnum=0 then compile_error(35)  : return 35
0897c     04 E4 85 F1 | 	sub	objptr, #4
08980     F2 14 0A FB | 	rdlong	arg02, objptr wz
08984     54 00 00 FF 
08988     F8 E5 85 F1 | 	sub	objptr, ##43512
0898c     10 00 90 5D |  if_ne	jmp	#LR__0740
08990     23 12 06 F6 | 	mov	arg01, #35
08994     7C E0 BF FD | 	call	#_compile_error
08998     23 FA 05 F6 | 	mov	result1, #35
0899c     58 01 90 FD | 	jmp	#LR__0744
089a0                 | LR__0740
089a0     01 20 66 F6 | 	neg	local02, #1
089a4                 | ' j=-1
089a4                 | ' for i=0 to varnum-1
089a4     00 22 06 F6 | 	mov	local03, #0
089a8     54 00 00 FF 
089ac     F8 E5 05 F1 | 	add	objptr, ##43512
089b0     F2 24 02 FB | 	rdlong	local04, objptr
089b4     54 00 00 FF 
089b8     F8 E5 85 F1 | 	sub	objptr, ##43512
089bc                 | LR__0741
089bc     12 23 12 F2 | 	cmp	local03, local04 wc
089c0     38 00 90 3D |  if_ae	jmp	#LR__0742
089c4                 | '   if variables(i).name=varname$ then j=i : exit
089c4     11 15 02 F6 | 	mov	arg02, local03
089c8     04 14 66 F0 | 	shl	arg02, #4
089cc     34 00 00 FF 
089d0     F8 E5 05 F1 | 	add	objptr, ##27128
089d4     F2 14 02 F1 | 	add	arg02, objptr
089d8     0A 13 02 FB | 	rdlong	arg01, arg02
089dc     0F 15 02 F6 | 	mov	arg02, local01
089e0     34 00 00 FF 
089e4     F8 E5 85 F1 | 	sub	objptr, ##27128
089e8     74 5B B1 FD | 	call	#__system___string_cmp
089ec     00 FA 0D F2 | 	cmp	result1, #0 wz
089f0     11 21 02 A6 |  if_e	mov	local02, local03
089f4     01 22 06 51 |  if_ne	add	local03, #1
089f8     C0 FF 9F 5D |  if_ne	jmp	#LR__0741
089fc                 | LR__0742
089fc                 | ' if j=-1 then compile_error(35) : return 35
089fc     FF FF 7F FF 
08a00     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08a04     10 00 90 5D |  if_ne	jmp	#LR__0743
08a08     23 12 06 F6 | 	mov	arg01, #35
08a0c     04 E0 BF FD | 	call	#_compile_error
08a10     23 FA 05 F6 | 	mov	result1, #35
08a14     E0 00 90 FD | 	jmp	#LR__0744
08a18                 | LR__0743
08a18     6A 00 00 FF 
08a1c     6C E4 05 F1 | 	add	objptr, ##54380
08a20     F2 24 02 FB | 	rdlong	local04, objptr
08a24     12 23 02 F6 | 	mov	local03, local04
08a28     01 22 66 F0 | 	shl	local03, #1
08a2c     12 23 02 F1 | 	add	local03, local04
08a30     02 22 66 F0 | 	shl	local03, #2
08a34     03 00 00 FF 
08a38     00 E4 85 F1 | 	sub	objptr, ##1536
08a3c     F2 22 02 F1 | 	add	local03, objptr
08a40     08 22 06 F1 | 	add	local03, #8
08a44     11 39 68 FC | 	wrlong	#28, local03
08a48     03 00 00 FF 
08a4c     00 E4 05 F1 | 	add	objptr, ##1536
08a50     F2 24 02 FB | 	rdlong	local04, objptr
08a54     12 23 02 F6 | 	mov	local03, local04
08a58     01 22 66 F0 | 	shl	local03, #1
08a5c     12 23 02 F1 | 	add	local03, local04
08a60     02 22 66 F0 | 	shl	local03, #2
08a64     03 00 00 FF 
08a68     00 E4 85 F1 | 	sub	objptr, ##1536
08a6c     F2 22 02 F1 | 	add	local03, objptr
08a70     11 21 62 FC | 	wrlong	local02, local03
08a74     03 00 00 FF 
08a78     00 E4 05 F1 | 	add	objptr, ##1536
08a7c     F2 24 02 FB | 	rdlong	local04, objptr
08a80     01 24 06 F1 | 	add	local04, #1
08a84     F2 24 62 FC | 	wrlong	local04, objptr
08a88     12 23 02 F6 | 	mov	local03, local04
08a8c     01 22 66 F0 | 	shl	local03, #1
08a90     12 23 02 F1 | 	add	local03, local04
08a94     02 22 66 F0 | 	shl	local03, #2
08a98     03 00 00 FF 
08a9c     00 E4 85 F1 | 	sub	objptr, ##1536
08aa0     F2 22 02 F1 | 	add	local03, objptr
08aa4     08 22 06 F1 | 	add	local03, #8
08aa8     11 97 68 FC | 	wrlong	#75, local03
08aac     03 00 00 FF 
08ab0     00 E4 05 F1 | 	add	objptr, ##1536
08ab4     F2 24 02 FB | 	rdlong	local04, objptr
08ab8     12 23 02 F6 | 	mov	local03, local04
08abc     01 22 66 F0 | 	shl	local03, #1
08ac0     12 23 02 F1 | 	add	local03, local04
08ac4     02 22 66 F0 | 	shl	local03, #2
08ac8     03 00 00 FF 
08acc     00 E4 85 F1 | 	sub	objptr, ##1536
08ad0     F2 22 02 F1 | 	add	local03, objptr
08ad4     11 01 68 FC | 	wrlong	#0, local03
08ad8     03 00 00 FF 
08adc     00 E4 05 F1 | 	add	objptr, ##1536
08ae0     F2 24 02 FB | 	rdlong	local04, objptr
08ae4     01 24 06 F1 | 	add	local04, #1
08ae8     F2 24 62 FC | 	wrlong	local04, objptr
08aec     6A 00 00 FF 
08af0     6C E4 85 F1 | 	sub	objptr, ##54380
08af4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08af4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08af4                 | ' return 0
08af4     00 FA 05 F6 | 	mov	result1, #0
08af8                 | LR__0744
08af8     A7 F0 03 F6 | 	mov	ptra, fp
08afc     B2 00 A0 FD | 	call	#popregs_
08b00                 | _compile_next_ret
08b00     2D 00 64 FD | 	ret
08b04                 | 
08b04                 | ' 
08b04                 | ' 
08b04                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08b04                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08b04                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08b04                 | ' 
08b04                 | ' 
08b04                 | ' function compile_goto( ) as ulong
08b04                 | _compile_goto
08b04     03 4A 05 F6 | 	mov	COUNT_, #3
08b08     A8 00 A0 FD | 	call	#pushregs_
08b0c     28 F0 07 F1 | 	add	ptra, #40
08b10                 | ' 
08b10                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08b10     57 00 00 FF 
08b14     34 E4 05 F1 | 	add	objptr, ##44596
08b18     F2 16 02 FB | 	rdlong	arg03, objptr
08b1c     03 16 66 F0 | 	shl	arg03, #3
08b20     02 00 00 FF 
08b24     38 E4 85 F1 | 	sub	objptr, ##1080
08b28     F2 16 02 F1 | 	add	arg03, objptr
08b2c     04 16 06 F1 | 	add	arg03, #4
08b30     0B 17 02 FB | 	rdlong	arg03, arg03
08b34     01 00 00 FF 
08b38     00 16 0E F2 | 	cmp	arg03, ##512 wz
08b3c     54 00 00 FF 
08b40     FC E5 85 F1 | 	sub	objptr, ##43516
08b44     CC 02 90 5D |  if_ne	jmp	#LR__0755
08b48     57 00 00 FF 
08b4c     34 E4 05 F1 | 	add	objptr, ##44596
08b50     F2 16 02 FB | 	rdlong	arg03, objptr
08b54     01 16 06 F1 | 	add	arg03, #1
08b58     03 16 66 F0 | 	shl	arg03, #3
08b5c     02 00 00 FF 
08b60     38 E4 85 F1 | 	sub	objptr, ##1080
08b64     F2 16 02 F1 | 	add	arg03, objptr
08b68     04 16 06 F1 | 	add	arg03, #4
08b6c     0B 17 02 FB | 	rdlong	arg03, arg03
08b70     FE 17 0E F2 | 	cmp	arg03, #510 wz
08b74     54 00 00 FF 
08b78     FC E5 85 F1 | 	sub	objptr, ##43516
08b7c     94 02 90 5D |  if_ne	jmp	#LR__0755
08b80     57 00 00 FF 
08b84     34 E4 05 F1 | 	add	objptr, ##44596
08b88     F2 16 02 FB | 	rdlong	arg03, objptr
08b8c     03 16 66 F0 | 	shl	arg03, #3
08b90     02 00 00 FF 
08b94     38 E4 85 F1 | 	sub	objptr, ##1080
08b98     F2 16 02 F1 | 	add	arg03, objptr
08b9c     0B 13 02 FB | 	rdlong	arg01, arg03
08ba0     00 14 06 F6 | 	mov	arg02, #0
08ba4     54 00 00 FF 
08ba8     FC E5 85 F1 | 	sub	objptr, ##43516
08bac     7C 8B B1 FD | 	call	#__system____builtin_atoi
08bb0     04 4E 05 F1 | 	add	fp, #4
08bb4     A7 FA 61 FC | 	wrlong	result1, fp
08bb8     6A 00 00 FF 
08bbc     6C E4 05 F1 | 	add	objptr, ##54380
08bc0     F2 1E 02 FB | 	rdlong	local01, objptr
08bc4     0F 21 02 F6 | 	mov	local02, local01
08bc8     01 20 66 F0 | 	shl	local02, #1
08bcc     0F 21 02 F1 | 	add	local02, local01
08bd0     02 20 66 F0 | 	shl	local02, #2
08bd4     03 00 00 FF 
08bd8     00 E4 85 F1 | 	sub	objptr, ##1536
08bdc     F2 20 02 F1 | 	add	local02, objptr
08be0     08 20 06 F1 | 	add	local02, #8
08be4     10 9D 68 FC | 	wrlong	#78, local02
08be8     03 00 00 FF 
08bec     08 E4 05 F1 | 	add	objptr, ##1544
08bf0     F2 22 02 FB | 	rdlong	local03, objptr
08bf4     6A 00 00 FF 
08bf8     74 E4 85 F1 | 	sub	objptr, ##54388
08bfc     04 4E 05 F1 | 	add	fp, #4
08c00     A7 22 62 FC | 	wrlong	local03, fp
08c04     08 4E 85 F1 | 	sub	fp, #8
08c08                 | ' 
08c08                 | '   gotoline=val%(lparts(ct).part$) 
08c08                 | '   compiledline(lineptr).result_type=token_fast_goto
08c08                 | ' ' now find a pointer to goto
08c08                 | '   gotoptr=programstart
08c08                 | '   do
08c08                 | LR__0750
08c08     10 4E 05 F1 | 	add	fp, #16
08c0c     A7 12 02 F6 | 	mov	arg01, fp
08c10     08 4E 85 F1 | 	sub	fp, #8
08c14     A7 14 02 FB | 	rdlong	arg02, fp
08c18     08 4E 85 F1 | 	sub	fp, #8
08c1c     18 16 06 F6 | 	mov	arg03, #24
08c20     0B 00 00 FF 
08c24     CC E4 05 F1 | 	add	objptr, ##5836
08c28     E8 4C B1 FD | 	call	#_psram_spin2_read1
08c2c     0B 00 00 FF 
08c30     CC E4 85 F1 | 	sub	objptr, ##5836
08c34                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08c34                 | '     if gotoheader(0)<>$FFFFFFFF then
08c34     10 4E 05 F1 | 	add	fp, #16
08c38     A7 22 02 FB | 	rdlong	local03, fp
08c3c     10 4E 85 F1 | 	sub	fp, #16
08c40     FF FF 7F FF 
08c44     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08c48     24 00 90 AD |  if_e	jmp	#LR__0751
08c4c     08 4E 05 F1 | 	add	fp, #8
08c50     A7 22 02 FB | 	rdlong	local03, fp
08c54     04 4E 05 F1 | 	add	fp, #4
08c58     A7 22 62 FC | 	wrlong	local03, fp
08c5c     18 4E 05 F1 | 	add	fp, #24
08c60     A7 22 02 FB | 	rdlong	local03, fp
08c64     1C 4E 85 F1 | 	sub	fp, #28
08c68     A7 22 62 FC | 	wrlong	local03, fp
08c6c     08 4E 85 F1 | 	sub	fp, #8
08c70                 | LR__0751
08c70     24 4E 05 F1 | 	add	fp, #36
08c74     A7 22 02 FB | 	rdlong	local03, fp
08c78     24 4E 85 F1 | 	sub	fp, #36
08c7c     FF FF 3F FF 
08c80     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08c84     10 4E 05 51 |  if_ne	add	fp, #16
08c88     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08c8c     10 4E 85 51 |  if_ne	sub	fp, #16
08c90     FF FF 7F 5F 
08c94     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08c98     1C 00 90 AD |  if_e	jmp	#LR__0752
08c9c     10 4E 05 F1 | 	add	fp, #16
08ca0     A7 22 02 FB | 	rdlong	local03, fp
08ca4     0C 4E 85 F1 | 	sub	fp, #12
08ca8     A7 20 02 FB | 	rdlong	local02, fp
08cac     04 4E 85 F1 | 	sub	fp, #4
08cb0     10 23 0A F2 | 	cmp	local03, local02 wz
08cb4     50 FF 9F 5D |  if_ne	jmp	#LR__0750
08cb8                 | LR__0752
08cb8                 | '   if gotoheader(0)=gotoline then
08cb8     10 4E 05 F1 | 	add	fp, #16
08cbc     A7 22 02 FB | 	rdlong	local03, fp
08cc0     0C 4E 85 F1 | 	sub	fp, #12
08cc4     A7 1E 02 FB | 	rdlong	local01, fp
08cc8     04 4E 85 F1 | 	sub	fp, #4
08ccc     0F 23 0A F2 | 	cmp	local03, local01 wz
08cd0     7C 00 90 5D |  if_ne	jmp	#LR__0753
08cd4     6A 00 00 FF 
08cd8     6C E4 05 F1 | 	add	objptr, ##54380
08cdc     F2 1E 02 FB | 	rdlong	local01, objptr
08ce0     0F 21 02 F6 | 	mov	local02, local01
08ce4     01 20 66 F0 | 	shl	local02, #1
08ce8     0F 21 02 F1 | 	add	local02, local01
08cec     02 20 66 F0 | 	shl	local02, #2
08cf0     03 00 00 FF 
08cf4     00 E4 85 F1 | 	sub	objptr, ##1536
08cf8     F2 20 02 F1 | 	add	local02, objptr
08cfc     0C 4E 05 F1 | 	add	fp, #12
08d00     A7 22 02 FB | 	rdlong	local03, fp
08d04     10 23 62 FC | 	wrlong	local03, local02
08d08     03 00 00 FF 
08d0c     00 E4 05 F1 | 	add	objptr, ##1536
08d10     F2 1E 02 FB | 	rdlong	local01, objptr
08d14     0F 21 02 F6 | 	mov	local02, local01
08d18     01 20 66 F0 | 	shl	local02, #1
08d1c     0F 21 02 F1 | 	add	local02, local01
08d20     02 20 66 F0 | 	shl	local02, #2
08d24     03 00 00 FF 
08d28     00 E4 85 F1 | 	sub	objptr, ##1536
08d2c     F2 20 02 F1 | 	add	local02, objptr
08d30     08 4E 85 F1 | 	sub	fp, #8
08d34     A7 22 02 FB | 	rdlong	local03, fp
08d38     04 4E 85 F1 | 	sub	fp, #4
08d3c     04 20 06 F1 | 	add	local02, #4
08d40     10 23 62 FC | 	wrlong	local03, local02
08d44     67 00 00 FF 
08d48     6C E4 85 F1 | 	sub	objptr, ##52844
08d4c     A4 00 90 FD | 	jmp	#LR__0754
08d50                 | LR__0753
08d50     6A 00 00 FF 
08d54     6C E4 05 F1 | 	add	objptr, ##54380
08d58     F2 1E 02 FB | 	rdlong	local01, objptr
08d5c     0F 21 02 F6 | 	mov	local02, local01
08d60     01 20 66 F0 | 	shl	local02, #1
08d64     0F 21 02 F1 | 	add	local02, local01
08d68     02 20 66 F0 | 	shl	local02, #2
08d6c     03 00 00 FF 
08d70     00 E4 85 F1 | 	sub	objptr, ##1536
08d74     F2 20 02 F1 | 	add	local02, objptr
08d78     00 00 C0 FF 
08d7c     10 01 68 FC | 	wrlong	##-2147483648, local02
08d80     03 00 00 FF 
08d84     00 E4 05 F1 | 	add	objptr, ##1536
08d88     F2 1E 02 FB | 	rdlong	local01, objptr
08d8c     0F 21 02 F6 | 	mov	local02, local01
08d90     01 20 66 F0 | 	shl	local02, #1
08d94     0F 21 02 F1 | 	add	local02, local01
08d98     02 20 66 F0 | 	shl	local02, #2
08d9c     03 00 00 FF 
08da0     00 E4 85 F1 | 	sub	objptr, ##1536
08da4     F2 20 02 F1 | 	add	local02, objptr
08da8     04 4E 05 F1 | 	add	fp, #4
08dac     A7 22 02 FB | 	rdlong	local03, fp
08db0     04 4E 85 F1 | 	sub	fp, #4
08db4     04 20 06 F1 | 	add	local02, #4
08db8     10 23 62 FC | 	wrlong	local03, local02
08dbc     03 00 00 FF 
08dc0     00 E4 05 F1 | 	add	objptr, ##1536
08dc4     F2 1E 02 FB | 	rdlong	local01, objptr
08dc8     0F 21 02 F6 | 	mov	local02, local01
08dcc     01 20 66 F0 | 	shl	local02, #1
08dd0     0F 21 02 F1 | 	add	local02, local01
08dd4     02 20 66 F0 | 	shl	local02, #2
08dd8     03 00 00 FF 
08ddc     00 E4 85 F1 | 	sub	objptr, ##1536
08de0     F2 20 02 F1 | 	add	local02, objptr
08de4     08 20 06 F1 | 	add	local02, #8
08de8     10 A7 68 FC | 	wrlong	#83, local02
08dec     67 00 00 FF 
08df0     6C E4 85 F1 | 	sub	objptr, ##52844
08df4                 | LR__0754
08df4     6A 00 00 FF 
08df8     6C E4 05 F1 | 	add	objptr, ##54380
08dfc     F2 22 02 FB | 	rdlong	local03, objptr
08e00     01 22 06 F1 | 	add	local03, #1
08e04     F2 22 62 FC | 	wrlong	local03, objptr
08e08     6A 00 00 FF 
08e0c     6C E4 85 F1 | 	sub	objptr, ##54380
08e10     40 00 90 FD | 	jmp	#LR__0756
08e14                 | LR__0755
08e14                 | '    print "We have a slow goto, todo  "
08e14     00 12 06 F6 | 	mov	arg01, #0
08e18     B0 B0 B1 FD | 	call	#__system___getiolock_0475
08e1c     FD 12 02 F6 | 	mov	arg01, result1
08e20     14 57 B1 FD | 	call	#__system___lockmem
08e24     70 01 00 FF 
08e28     C4 14 06 F6 | 	mov	arg02, ##@LR__5068
08e2c     00 12 06 F6 | 	mov	arg01, #0
08e30     00 16 06 F6 | 	mov	arg03, #0
08e34     04 64 B1 FD | 	call	#__system___basic_print_string
08e38     00 12 06 F6 | 	mov	arg01, #0
08e3c     0A 14 06 F6 | 	mov	arg02, #10
08e40     00 16 06 F6 | 	mov	arg03, #0
08e44     9C 63 B1 FD | 	call	#__system___basic_print_char
08e48     00 12 06 F6 | 	mov	arg01, #0
08e4c     7C B0 B1 FD | 	call	#__system___getiolock_0475
08e50     FD 00 68 FC | 	wrlong	#0, result1
08e54                 | LR__0756
08e54                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08e54                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08e54                 | ' return 0
08e54     00 FA 05 F6 | 	mov	result1, #0
08e58     A7 F0 03 F6 | 	mov	ptra, fp
08e5c     B2 00 A0 FD | 	call	#popregs_
08e60                 | _compile_goto_ret
08e60     2D 00 64 FD | 	ret
08e64                 | 
08e64                 | ' 
08e64                 | ' 
08e64                 | ' 
08e64                 | ' 
08e64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08e64                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08e64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08e64                 | ' 
08e64                 | ' 
08e64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08e64                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08e64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08e64                 | ' 
08e64                 | ' 
08e64                 | ' function expr() as integer 
08e64                 | _expr
08e64     07 4A 05 F6 | 	mov	COUNT_, #7
08e68     A8 00 A0 FD | 	call	#pushregs_
08e6c                 | _expr_enter
08e6c     57 00 00 FF 
08e70     34 E4 05 F1 | 	add	objptr, ##44596
08e74     F2 24 02 FB | 	rdlong	local04, objptr
08e78     03 24 66 F0 | 	shl	local04, #3
08e7c     02 00 00 FF 
08e80     38 E4 85 F1 | 	sub	objptr, ##1080
08e84     F2 24 02 F1 | 	add	local04, objptr
08e88     04 24 06 F1 | 	add	local04, #4
08e8c     12 27 02 FB | 	rdlong	local05, local04
08e90                 | ' 
08e90                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08e90     FE 27 0E F2 | 	cmp	local05, #510 wz
08e94     54 00 00 FF 
08e98     FC E5 85 F1 | 	sub	objptr, ##43516
08e9c     C4 00 90 5D |  if_ne	jmp	#LR__0760
08ea0     1D 1E 06 F6 | 	mov	local01, #29
08ea4     FF 22 06 F6 | 	mov	local03, #255
08ea8     0F 29 02 F6 | 	mov	local06, local01
08eac     10 2B 02 F6 | 	mov	local07, local02
08eb0     11 1F 02 F6 | 	mov	local01, local03
08eb4     6A 00 00 FF 
08eb8     6C E4 05 F1 | 	add	objptr, ##54380
08ebc     F2 26 02 FB | 	rdlong	local05, objptr
08ec0     13 25 02 F6 | 	mov	local04, local05
08ec4     01 24 66 F0 | 	shl	local04, #1
08ec8     13 25 02 F1 | 	add	local04, local05
08ecc     02 24 66 F0 | 	shl	local04, #2
08ed0     03 00 00 FF 
08ed4     00 E4 85 F1 | 	sub	objptr, ##1536
08ed8     F2 24 02 F1 | 	add	local04, objptr
08edc     12 29 62 FC | 	wrlong	local06, local04
08ee0     03 00 00 FF 
08ee4     00 E4 05 F1 | 	add	objptr, ##1536
08ee8     F2 28 02 FB | 	rdlong	local06, objptr
08eec     14 27 02 F6 | 	mov	local05, local06
08ef0     01 26 66 F0 | 	shl	local05, #1
08ef4     14 27 02 F1 | 	add	local05, local06
08ef8     02 26 66 F0 | 	shl	local05, #2
08efc     03 00 00 FF 
08f00     00 E4 85 F1 | 	sub	objptr, ##1536
08f04     F2 26 02 F1 | 	add	local05, objptr
08f08     04 26 06 F1 | 	add	local05, #4
08f0c     13 2B 62 FC | 	wrlong	local07, local05
08f10     03 00 00 FF 
08f14     00 E4 05 F1 | 	add	objptr, ##1536
08f18     F2 2A 02 FB | 	rdlong	local07, objptr
08f1c     15 29 02 F6 | 	mov	local06, local07
08f20     01 28 66 F0 | 	shl	local06, #1
08f24     15 29 02 F1 | 	add	local06, local07
08f28     02 28 66 F0 | 	shl	local06, #2
08f2c     03 00 00 FF 
08f30     00 E4 85 F1 | 	sub	objptr, ##1536
08f34     F2 28 02 F1 | 	add	local06, objptr
08f38     08 28 06 F1 | 	add	local06, #8
08f3c     14 1F 62 FC | 	wrlong	local01, local06
08f40     03 00 00 FF 
08f44     00 E4 05 F1 | 	add	objptr, ##1536
08f48     F2 28 02 FB | 	rdlong	local06, objptr
08f4c     01 28 06 F1 | 	add	local06, #1
08f50     F2 28 62 FC | 	wrlong	local06, objptr
08f54     6A 00 00 FF 
08f58     6C E4 85 F1 | 	sub	objptr, ##54380
08f5c     1D FA 05 F6 | 	mov	result1, #29
08f60     54 01 90 FD | 	jmp	#LR__0763
08f64                 | LR__0760
08f64     00 1E 06 F6 | 	mov	local01, #0
08f68     58 01 B0 FD | 	call	#_addsub
08f6c     57 00 00 FF 
08f70     34 E4 05 F1 | 	add	objptr, ##44596
08f74     F2 24 02 FB | 	rdlong	local04, objptr
08f78     03 24 66 F0 | 	shl	local04, #3
08f7c     02 00 00 FF 
08f80     38 E4 85 F1 | 	sub	objptr, ##1080
08f84     F2 24 02 F1 | 	add	local04, objptr
08f88     04 24 06 F1 | 	add	local04, #4
08f8c     12 27 02 FB | 	rdlong	local05, local04
08f90                 | ' t3.result.uresult=0
08f90                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08f90                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08f90                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08f90     54 00 00 FF 
08f94     FC E5 85 F1 | 	sub	objptr, ##43516
08f98                 | LR__0761
08f98     1B 26 0E F2 | 	cmp	local05, #27 wz
08f9c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08fa0     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08fa4     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08fa8     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08fac     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08fb0     00 01 90 5D |  if_ne	jmp	#LR__0762
08fb4     57 00 00 FF 
08fb8     34 E4 05 F1 | 	add	objptr, ##44596
08fbc     F2 28 02 FB | 	rdlong	local06, objptr
08fc0     01 28 06 F1 | 	add	local06, #1
08fc4     F2 28 62 FC | 	wrlong	local06, objptr
08fc8     57 00 00 FF 
08fcc     34 E4 85 F1 | 	sub	objptr, ##44596
08fd0     F0 00 B0 FD | 	call	#_addsub
08fd4     13 23 02 F6 | 	mov	local03, local05
08fd8     0F 29 02 F6 | 	mov	local06, local01
08fdc     10 2B 02 F6 | 	mov	local07, local02
08fe0     11 27 02 F6 | 	mov	local05, local03
08fe4     6A 00 00 FF 
08fe8     6C E4 05 F1 | 	add	objptr, ##54380
08fec     F2 24 02 FB | 	rdlong	local04, objptr
08ff0     12 FB 01 F6 | 	mov	result1, local04
08ff4     01 FA 65 F0 | 	shl	result1, #1
08ff8     12 FB 01 F1 | 	add	result1, local04
08ffc     02 FA 65 F0 | 	shl	result1, #2
09000     03 00 00 FF 
09004     00 E4 85 F1 | 	sub	objptr, ##1536
09008     F2 FA 01 F1 | 	add	result1, objptr
0900c     FD 28 62 FC | 	wrlong	local06, result1
09010     03 00 00 FF 
09014     00 E4 05 F1 | 	add	objptr, ##1536
09018     F2 28 02 FB | 	rdlong	local06, objptr
0901c     14 25 02 F6 | 	mov	local04, local06
09020     01 24 66 F0 | 	shl	local04, #1
09024     14 25 02 F1 | 	add	local04, local06
09028     02 24 66 F0 | 	shl	local04, #2
0902c     03 00 00 FF 
09030     00 E4 85 F1 | 	sub	objptr, ##1536
09034     F2 24 02 F1 | 	add	local04, objptr
09038     04 24 06 F1 | 	add	local04, #4
0903c     12 2B 62 FC | 	wrlong	local07, local04
09040     03 00 00 FF 
09044     00 E4 05 F1 | 	add	objptr, ##1536
09048     F2 2A 02 FB | 	rdlong	local07, objptr
0904c     15 29 02 F6 | 	mov	local06, local07
09050     01 28 66 F0 | 	shl	local06, #1
09054     15 29 02 F1 | 	add	local06, local07
09058     02 28 66 F0 | 	shl	local06, #2
0905c     03 00 00 FF 
09060     00 E4 85 F1 | 	sub	objptr, ##1536
09064     F2 28 02 F1 | 	add	local06, objptr
09068     08 28 06 F1 | 	add	local06, #8
0906c     14 27 62 FC | 	wrlong	local05, local06
09070     03 00 00 FF 
09074     00 E4 05 F1 | 	add	objptr, ##1536
09078     F2 28 02 FB | 	rdlong	local06, objptr
0907c     01 28 06 F1 | 	add	local06, #1
09080     F2 28 62 FC | 	wrlong	local06, objptr
09084     13 00 00 FF 
09088     38 E4 85 F1 | 	sub	objptr, ##9784
0908c     F2 24 02 FB | 	rdlong	local04, objptr
09090     03 24 66 F0 | 	shl	local04, #3
09094     02 00 00 FF 
09098     38 E4 85 F1 | 	sub	objptr, ##1080
0909c     F2 24 02 F1 | 	add	local04, objptr
090a0     04 24 06 F1 | 	add	local04, #4
090a4     12 27 02 FB | 	rdlong	local05, local04
090a8     54 00 00 FF 
090ac     FC E5 85 F1 | 	sub	objptr, ##43516
090b0     E4 FE 9F FD | 	jmp	#LR__0761
090b4                 | LR__0762
090b4                 | ' return 0  
090b4     00 FA 05 F6 | 	mov	result1, #0
090b8                 | LR__0763
090b8     A7 F0 03 F6 | 	mov	ptra, fp
090bc     B2 00 A0 FD | 	call	#popregs_
090c0                 | _expr_ret
090c0     2D 00 64 FD | 	ret
090c4                 | 
090c4                 | ' 
090c4                 | ' 
090c4                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
090c4                 | ' 
090c4                 | ' function addsub() as integer 
090c4                 | _addsub
090c4     07 4A 05 F6 | 	mov	COUNT_, #7
090c8     A8 00 A0 FD | 	call	#pushregs_
090cc                 | _addsub_enter
090cc     00 1E 06 F6 | 	mov	local01, #0
090d0     50 01 B0 FD | 	call	#_muldiv
090d4     57 00 00 FF 
090d8     34 E4 05 F1 | 	add	objptr, ##44596
090dc     F2 24 02 FB | 	rdlong	local04, objptr
090e0     03 24 66 F0 | 	shl	local04, #3
090e4     02 00 00 FF 
090e8     38 E4 85 F1 | 	sub	objptr, ##1080
090ec     F2 24 02 F1 | 	add	local04, objptr
090f0     04 24 06 F1 | 	add	local04, #4
090f4     12 27 02 FB | 	rdlong	local05, local04
090f8                 | ' t3.result.uresult=0
090f8                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
090f8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
090f8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
090f8     54 00 00 FF 
090fc     FC E5 85 F1 | 	sub	objptr, ##43516
09100                 | LR__0770
09100     01 26 0E F2 | 	cmp	local05, #1 wz
09104     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09108     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0910c     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09110     00 01 90 5D |  if_ne	jmp	#LR__0771
09114     57 00 00 FF 
09118     34 E4 05 F1 | 	add	objptr, ##44596
0911c     F2 24 02 FB | 	rdlong	local04, objptr
09120     01 24 06 F1 | 	add	local04, #1
09124     F2 24 62 FC | 	wrlong	local04, objptr
09128     57 00 00 FF 
0912c     34 E4 85 F1 | 	sub	objptr, ##44596
09130     F0 00 B0 FD | 	call	#_muldiv
09134     13 23 02 F6 | 	mov	local03, local05
09138     0F 29 02 F6 | 	mov	local06, local01
0913c     10 2B 02 F6 | 	mov	local07, local02
09140     11 27 02 F6 | 	mov	local05, local03
09144     6A 00 00 FF 
09148     6C E4 05 F1 | 	add	objptr, ##54380
0914c     F2 24 02 FB | 	rdlong	local04, objptr
09150     12 FB 01 F6 | 	mov	result1, local04
09154     01 FA 65 F0 | 	shl	result1, #1
09158     12 FB 01 F1 | 	add	result1, local04
0915c     02 FA 65 F0 | 	shl	result1, #2
09160     03 00 00 FF 
09164     00 E4 85 F1 | 	sub	objptr, ##1536
09168     F2 FA 01 F1 | 	add	result1, objptr
0916c     FD 28 62 FC | 	wrlong	local06, result1
09170     03 00 00 FF 
09174     00 E4 05 F1 | 	add	objptr, ##1536
09178     F2 28 02 FB | 	rdlong	local06, objptr
0917c     14 25 02 F6 | 	mov	local04, local06
09180     01 24 66 F0 | 	shl	local04, #1
09184     14 25 02 F1 | 	add	local04, local06
09188     02 24 66 F0 | 	shl	local04, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 24 02 F1 | 	add	local04, objptr
09198     04 24 06 F1 | 	add	local04, #4
0919c     12 2B 62 FC | 	wrlong	local07, local04
091a0     03 00 00 FF 
091a4     00 E4 05 F1 | 	add	objptr, ##1536
091a8     F2 2A 02 FB | 	rdlong	local07, objptr
091ac     15 29 02 F6 | 	mov	local06, local07
091b0     01 28 66 F0 | 	shl	local06, #1
091b4     15 29 02 F1 | 	add	local06, local07
091b8     02 28 66 F0 | 	shl	local06, #2
091bc     03 00 00 FF 
091c0     00 E4 85 F1 | 	sub	objptr, ##1536
091c4     F2 28 02 F1 | 	add	local06, objptr
091c8     08 28 06 F1 | 	add	local06, #8
091cc     14 27 62 FC | 	wrlong	local05, local06
091d0     03 00 00 FF 
091d4     00 E4 05 F1 | 	add	objptr, ##1536
091d8     F2 28 02 FB | 	rdlong	local06, objptr
091dc     01 28 06 F1 | 	add	local06, #1
091e0     F2 28 62 FC | 	wrlong	local06, objptr
091e4     13 00 00 FF 
091e8     38 E4 85 F1 | 	sub	objptr, ##9784
091ec     F2 24 02 FB | 	rdlong	local04, objptr
091f0     03 24 66 F0 | 	shl	local04, #3
091f4     02 00 00 FF 
091f8     38 E4 85 F1 | 	sub	objptr, ##1080
091fc     F2 24 02 F1 | 	add	local04, objptr
09200     04 24 06 F1 | 	add	local04, #4
09204     12 27 02 FB | 	rdlong	local05, local04
09208     54 00 00 FF 
0920c     FC E5 85 F1 | 	sub	objptr, ##43516
09210     EC FE 9F FD | 	jmp	#LR__0770
09214                 | LR__0771
09214                 | '   return 0
09214     00 FA 05 F6 | 	mov	result1, #0
09218     A7 F0 03 F6 | 	mov	ptra, fp
0921c     B2 00 A0 FD | 	call	#popregs_
09220                 | _addsub_ret
09220     2D 00 64 FD | 	ret
09224                 | 
09224                 | ' 
09224                 | ' sub muldiv()
09224                 | _muldiv
09224     08 4A 05 F6 | 	mov	COUNT_, #8
09228     A8 00 A0 FD | 	call	#pushregs_
0922c                 | _muldiv_enter
0922c     00 1E 06 F6 | 	mov	local01, #0
09230     58 01 B0 FD | 	call	#_getvalue
09234     57 00 00 FF 
09238     34 E4 05 F1 | 	add	objptr, ##44596
0923c     F2 24 02 FB | 	rdlong	local04, objptr
09240     03 24 66 F0 | 	shl	local04, #3
09244     02 00 00 FF 
09248     38 E4 85 F1 | 	sub	objptr, ##1080
0924c     F2 24 02 F1 | 	add	local04, objptr
09250     04 24 06 F1 | 	add	local04, #4
09254     12 27 02 FB | 	rdlong	local05, local04
09258                 | ' t3.result.uresult=0
09258                 | ' getvalue()    
09258                 | ' op = lparts(ct).token
09258                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09258     54 00 00 FF 
0925c     FC E5 85 F1 | 	sub	objptr, ##43516
09260                 | LR__0780
09260     05 26 0E F2 | 	cmp	local05, #5 wz
09264     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09268     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0926c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09270     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09274     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09278     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0927c     00 01 90 5D |  if_ne	jmp	#LR__0781
09280     57 00 00 FF 
09284     34 E4 05 F1 | 	add	objptr, ##44596
09288     F2 24 02 FB | 	rdlong	local04, objptr
0928c     01 24 06 F1 | 	add	local04, #1
09290     F2 24 62 FC | 	wrlong	local04, objptr
09294     57 00 00 FF 
09298     34 E4 85 F1 | 	sub	objptr, ##44596
0929c     EC 00 B0 FD | 	call	#_getvalue
092a0     13 23 02 F6 | 	mov	local03, local05
092a4     0F 29 02 F6 | 	mov	local06, local01
092a8     10 2B 02 F6 | 	mov	local07, local02
092ac     11 27 02 F6 | 	mov	local05, local03
092b0     6A 00 00 FF 
092b4     6C E4 05 F1 | 	add	objptr, ##54380
092b8     F2 24 02 FB | 	rdlong	local04, objptr
092bc     12 2D 02 F6 | 	mov	local08, local04
092c0     01 2C 66 F0 | 	shl	local08, #1
092c4     12 2D 02 F1 | 	add	local08, local04
092c8     02 2C 66 F0 | 	shl	local08, #2
092cc     03 00 00 FF 
092d0     00 E4 85 F1 | 	sub	objptr, ##1536
092d4     F2 2C 02 F1 | 	add	local08, objptr
092d8     16 29 62 FC | 	wrlong	local06, local08
092dc     03 00 00 FF 
092e0     00 E4 05 F1 | 	add	objptr, ##1536
092e4     F2 2C 02 FB | 	rdlong	local08, objptr
092e8     16 29 02 F6 | 	mov	local06, local08
092ec     01 28 66 F0 | 	shl	local06, #1
092f0     16 29 02 F1 | 	add	local06, local08
092f4     02 28 66 F0 | 	shl	local06, #2
092f8     03 00 00 FF 
092fc     00 E4 85 F1 | 	sub	objptr, ##1536
09300     F2 28 02 F1 | 	add	local06, objptr
09304     04 28 06 F1 | 	add	local06, #4
09308     14 2B 62 FC | 	wrlong	local07, local06
0930c     03 00 00 FF 
09310     00 E4 05 F1 | 	add	objptr, ##1536
09314     F2 2C 02 FB | 	rdlong	local08, objptr
09318     16 2B 02 F6 | 	mov	local07, local08
0931c     01 2A 66 F0 | 	shl	local07, #1
09320     16 2B 02 F1 | 	add	local07, local08
09324     02 2A 66 F0 | 	shl	local07, #2
09328     03 00 00 FF 
0932c     00 E4 85 F1 | 	sub	objptr, ##1536
09330     F2 2A 02 F1 | 	add	local07, objptr
09334     08 2A 06 F1 | 	add	local07, #8
09338     15 27 62 FC | 	wrlong	local05, local07
0933c     03 00 00 FF 
09340     00 E4 05 F1 | 	add	objptr, ##1536
09344     F2 28 02 FB | 	rdlong	local06, objptr
09348     01 28 06 F1 | 	add	local06, #1
0934c     F2 28 62 FC | 	wrlong	local06, objptr
09350     13 00 00 FF 
09354     38 E4 85 F1 | 	sub	objptr, ##9784
09358     F2 24 02 FB | 	rdlong	local04, objptr
0935c     03 24 66 F0 | 	shl	local04, #3
09360     02 00 00 FF 
09364     38 E4 85 F1 | 	sub	objptr, ##1080
09368     F2 24 02 F1 | 	add	local04, objptr
0936c     04 24 06 F1 | 	add	local04, #4
09370     12 27 02 FB | 	rdlong	local05, local04
09374     54 00 00 FF 
09378     FC E5 85 F1 | 	sub	objptr, ##43516
0937c     E0 FE 9F FD | 	jmp	#LR__0780
09380                 | LR__0781
09380     A7 F0 03 F6 | 	mov	ptra, fp
09384     B2 00 A0 FD | 	call	#popregs_
09388                 | _muldiv_ret
09388     2D 00 64 FD | 	ret
0938c                 | 
0938c                 | ' 
0938c                 | ' sub getvalue() 
0938c                 | _getvalue
0938c     0B 4A 05 F6 | 	mov	COUNT_, #11
09390     A8 00 A0 FD | 	call	#pushregs_
09394                 | _getvalue_enter
09394     01 24 06 F6 | 	mov	local04, #1
09398     00 1E 06 F6 | 	mov	local01, #0
0939c     1D 22 06 F6 | 	mov	local03, #29
093a0     57 00 00 FF 
093a4     34 E4 05 F1 | 	add	objptr, ##44596
093a8     F2 16 02 FB | 	rdlong	arg03, objptr
093ac     03 16 66 F0 | 	shl	arg03, #3
093b0     02 00 00 FF 
093b4     38 E4 85 F1 | 	sub	objptr, ##1080
093b8     F2 16 02 F1 | 	add	arg03, objptr
093bc     04 16 06 F1 | 	add	arg03, #4
093c0     0B 27 02 FB | 	rdlong	local05, arg03
093c4                 | ' m=1
093c4                 | ' t1.result.uresult=0: t1.result_type=result_uint
093c4                 | ' op=lparts(ct).token
093c4                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
093c4     02 26 0E F2 | 	cmp	local05, #2 wz
093c8     54 00 00 FF 
093cc     FC E5 85 F1 | 	sub	objptr, ##43516
093d0     38 00 90 5D |  if_ne	jmp	#LR__0790
093d4     01 24 66 F6 | 	neg	local04, #1
093d8     57 00 00 FF 
093dc     34 E4 05 F1 | 	add	objptr, ##44596
093e0     F2 26 02 FB | 	rdlong	local05, objptr
093e4     01 26 06 F1 | 	add	local05, #1
093e8     F2 26 62 FC | 	wrlong	local05, objptr
093ec     03 26 66 F0 | 	shl	local05, #3
093f0     02 00 00 FF 
093f4     38 E4 85 F1 | 	sub	objptr, ##1080
093f8     F2 26 02 F1 | 	add	local05, objptr
093fc     04 26 06 F1 | 	add	local05, #4
09400     13 27 02 FB | 	rdlong	local05, local05
09404     54 00 00 FF 
09408     FC E5 85 F1 | 	sub	objptr, ##43516
0940c                 | LR__0790
0940c                 | ' select case op
0940c     01 00 00 FF 
09410     00 26 0E F2 | 	cmp	local05, ##512 wz
09414     3C 00 90 AD |  if_e	jmp	#LR__0791
09418     01 00 00 FF 
0941c     01 26 0E F2 | 	cmp	local05, ##513 wz
09420     88 01 90 AD |  if_e	jmp	#LR__0794
09424     01 00 00 FF 
09428     02 26 0E F2 | 	cmp	local05, ##514 wz
0942c     3C 04 90 AD |  if_e	jmp	#LR__0801
09430     01 00 00 FF 
09434     03 26 0E F2 | 	cmp	local05, ##515 wz
09438     A0 05 90 AD |  if_e	jmp	#LR__0804
0943c     01 00 00 FF 
09440     04 26 0E F2 | 	cmp	local05, ##516 wz
09444     70 07 90 AD |  if_e	jmp	#LR__0809
09448     15 26 0E F2 | 	cmp	local05, #21 wz
0944c     90 07 90 AD |  if_e	jmp	#LR__0810
09450     00 08 90 FD | 	jmp	#LR__0811
09454                 | LR__0791
09454                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09454     01 24 0E F2 | 	cmp	local04, #1 wz
09458     3C 00 90 5D |  if_ne	jmp	#LR__0792
0945c     57 00 00 FF 
09460     34 E4 05 F1 | 	add	objptr, ##44596
09464     F2 26 02 FB | 	rdlong	local05, objptr
09468     03 26 66 F0 | 	shl	local05, #3
0946c     02 00 00 FF 
09470     38 E4 85 F1 | 	sub	objptr, ##1080
09474     F2 26 02 F1 | 	add	local05, objptr
09478     13 13 02 FB | 	rdlong	arg01, local05
0947c     00 14 06 F6 | 	mov	arg02, #0
09480     54 00 00 FF 
09484     FC E5 85 F1 | 	sub	objptr, ##43516
09488     A0 82 B1 FD | 	call	#__system____builtin_atoi
0948c     FD 24 02 FD | 	qmul	local04, result1
09490     18 1E 62 FD | 	getqx	local01
09494     1C 22 06 F6 | 	mov	local03, #28
09498                 | LR__0792
09498                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09498     FF FF 7F FF 
0949c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
094a0     3C 00 90 5D |  if_ne	jmp	#LR__0793
094a4     57 00 00 FF 
094a8     34 E4 05 F1 | 	add	objptr, ##44596
094ac     F2 26 02 FB | 	rdlong	local05, objptr
094b0     03 26 66 F0 | 	shl	local05, #3
094b4     02 00 00 FF 
094b8     38 E4 85 F1 | 	sub	objptr, ##1080
094bc     F2 26 02 F1 | 	add	local05, objptr
094c0     13 13 02 FB | 	rdlong	arg01, local05
094c4     00 14 06 F6 | 	mov	arg02, #0
094c8     54 00 00 FF 
094cc     FC E5 85 F1 | 	sub	objptr, ##43516
094d0     58 82 B1 FD | 	call	#__system____builtin_atoi
094d4     FD 24 02 FD | 	qmul	local04, result1
094d8     18 1E 62 FD | 	getqx	local01
094dc     1C 22 06 F6 | 	mov	local03, #28
094e0                 | LR__0793
094e0     0F 29 02 F6 | 	mov	local06, local01
094e4     10 2B 02 F6 | 	mov	local07, local02
094e8     11 27 02 F6 | 	mov	local05, local03
094ec     6A 00 00 FF 
094f0     6C E4 05 F1 | 	add	objptr, ##54380
094f4     F2 1E 02 FB | 	rdlong	local01, objptr
094f8     0F 25 02 F6 | 	mov	local04, local01
094fc     01 24 66 F0 | 	shl	local04, #1
09500     0F 25 02 F1 | 	add	local04, local01
09504     02 24 66 F0 | 	shl	local04, #2
09508     03 00 00 FF 
0950c     00 E4 85 F1 | 	sub	objptr, ##1536
09510     F2 24 02 F1 | 	add	local04, objptr
09514     12 29 62 FC | 	wrlong	local06, local04
09518     03 00 00 FF 
0951c     00 E4 05 F1 | 	add	objptr, ##1536
09520     F2 28 02 FB | 	rdlong	local06, objptr
09524     14 1F 02 F6 | 	mov	local01, local06
09528     01 1E 66 F0 | 	shl	local01, #1
0952c     14 1F 02 F1 | 	add	local01, local06
09530     02 1E 66 F0 | 	shl	local01, #2
09534     03 00 00 FF 
09538     00 E4 85 F1 | 	sub	objptr, ##1536
0953c     F2 1E 02 F1 | 	add	local01, objptr
09540     04 1E 06 F1 | 	add	local01, #4
09544     0F 2B 62 FC | 	wrlong	local07, local01
09548     03 00 00 FF 
0954c     00 E4 05 F1 | 	add	objptr, ##1536
09550     F2 2A 02 FB | 	rdlong	local07, objptr
09554     15 29 02 F6 | 	mov	local06, local07
09558     01 28 66 F0 | 	shl	local06, #1
0955c     15 29 02 F1 | 	add	local06, local07
09560     02 28 66 F0 | 	shl	local06, #2
09564     03 00 00 FF 
09568     00 E4 85 F1 | 	sub	objptr, ##1536
0956c     F2 28 02 F1 | 	add	local06, objptr
09570     08 28 06 F1 | 	add	local06, #8
09574     14 27 62 FC | 	wrlong	local05, local06
09578     03 00 00 FF 
0957c     00 E4 05 F1 | 	add	objptr, ##1536
09580     F2 28 02 FB | 	rdlong	local06, objptr
09584     01 28 06 F1 | 	add	local06, #1
09588     F2 28 62 FC | 	wrlong	local06, objptr
0958c     13 00 00 FF 
09590     38 E4 85 F1 | 	sub	objptr, ##9784
09594     F2 28 02 FB | 	rdlong	local06, objptr
09598     01 28 06 F1 | 	add	local06, #1
0959c     F2 28 62 FC | 	wrlong	local06, objptr
095a0     57 00 00 FF 
095a4     34 E4 85 F1 | 	sub	objptr, ##44596
095a8     CC 06 90 FD | 	jmp	#LR__0812
095ac                 | LR__0794
095ac                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
095ac     57 00 00 FF 
095b0     34 E4 05 F1 | 	add	objptr, ##44596
095b4     F2 16 02 FB | 	rdlong	arg03, objptr
095b8     03 16 66 F0 | 	shl	arg03, #3
095bc     02 00 00 FF 
095c0     38 E4 85 F1 | 	sub	objptr, ##1080
095c4     F2 16 02 F1 | 	add	arg03, objptr
095c8     0B 13 02 FB | 	rdlong	arg01, arg03
095cc     01 14 06 F6 | 	mov	arg02, #1
095d0     54 00 00 FF 
095d4     FC E5 85 F1 | 	sub	objptr, ##43516
095d8     A0 6F B1 FD | 	call	#__system__Left_S
095dc     FD 12 02 F6 | 	mov	arg01, result1
095e0     70 01 00 FF 
095e4     E0 14 06 F6 | 	mov	arg02, ##@LR__5069
095e8     74 4F B1 FD | 	call	#__system___string_cmp
095ec     00 FA 0D F2 | 	cmp	result1, #0 wz
095f0     94 00 90 5D |  if_ne	jmp	#LR__0797
095f4     57 00 00 FF 
095f8     34 E4 05 F1 | 	add	objptr, ##44596
095fc     F2 2A 02 FB | 	rdlong	local07, objptr
09600     15 29 02 F6 | 	mov	local06, local07
09604     03 28 66 F0 | 	shl	local06, #3
09608     02 00 00 FF 
0960c     38 E4 85 F1 | 	sub	objptr, ##1080
09610     F2 28 02 F1 | 	add	local06, objptr
09614     70 01 00 FF 
09618     E2 26 06 F6 | 	mov	local05, ##@LR__5070
0961c     03 2A 66 F0 | 	shl	local07, #3
09620     F2 2A 02 F1 | 	add	local07, objptr
09624     15 2B 02 FB | 	rdlong	local07, local07
09628     02 00 00 FF 
0962c     38 E4 05 F1 | 	add	objptr, ##1080
09630     F2 1E 02 FB | 	rdlong	local01, objptr
09634     03 1E 66 F0 | 	shl	local01, #3
09638     02 00 00 FF 
0963c     38 E4 85 F1 | 	sub	objptr, ##1080
09640     F2 1E 02 F1 | 	add	local01, objptr
09644     0F 13 02 FB | 	rdlong	arg01, local01
09648     54 00 00 FF 
0964c     FC E5 85 F1 | 	sub	objptr, ##43516
09650     09 2D 02 F6 | 	mov	local08, arg01
09654     97 06 48 FB | 	callpa	#(@LR__0796-@LR__0795)>>2,fcache_load_ptr_
09658                 | LR__0795
09658     16 FB C9 FA | 	rdbyte	result1, local08 wz
0965c     01 2C 06 51 |  if_ne	add	local08, #1
09660     F4 FF 9F 5D |  if_ne	jmp	#LR__0795
09664                 | LR__0796
09664     09 2D 82 F1 | 	sub	local08, arg01
09668     16 15 02 F6 | 	mov	arg02, local08
0966c     01 14 86 F1 | 	sub	arg02, #1
09670     15 13 02 F6 | 	mov	arg01, local07
09674     8C 6F B1 FD | 	call	#__system__Right_S
09678     FD 14 02 F6 | 	mov	arg02, result1
0967c     13 13 02 F6 | 	mov	arg01, local05
09680     10 4F B1 FD | 	call	#__system___string_concat
09684     14 FB 61 FC | 	wrlong	result1, local06
09688                 | LR__0797
09688                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09688     57 00 00 FF 
0968c     34 E4 05 F1 | 	add	objptr, ##44596
09690     F2 16 02 FB | 	rdlong	arg03, objptr
09694     03 16 66 F0 | 	shl	arg03, #3
09698     02 00 00 FF 
0969c     38 E4 85 F1 | 	sub	objptr, ##1080
096a0     F2 16 02 F1 | 	add	arg03, objptr
096a4     0B 13 02 FB | 	rdlong	arg01, arg03
096a8     01 14 06 F6 | 	mov	arg02, #1
096ac     54 00 00 FF 
096b0     FC E5 85 F1 | 	sub	objptr, ##43516
096b4     C4 6E B1 FD | 	call	#__system__Left_S
096b8     FD 12 02 F6 | 	mov	arg01, result1
096bc     70 01 00 FF 
096c0     E5 14 06 F6 | 	mov	arg02, ##@LR__5071
096c4     98 4E B1 FD | 	call	#__system___string_cmp
096c8     00 FA 0D F2 | 	cmp	result1, #0 wz
096cc     94 00 90 5D |  if_ne	jmp	#LR__0800
096d0     57 00 00 FF 
096d4     34 E4 05 F1 | 	add	objptr, ##44596
096d8     F2 2A 02 FB | 	rdlong	local07, objptr
096dc     15 29 02 F6 | 	mov	local06, local07
096e0     03 28 66 F0 | 	shl	local06, #3
096e4     02 00 00 FF 
096e8     38 E4 85 F1 | 	sub	objptr, ##1080
096ec     F2 28 02 F1 | 	add	local06, objptr
096f0     70 01 00 FF 
096f4     E7 26 06 F6 | 	mov	local05, ##@LR__5072
096f8     03 2A 66 F0 | 	shl	local07, #3
096fc     F2 2A 02 F1 | 	add	local07, objptr
09700     15 2B 02 FB | 	rdlong	local07, local07
09704     02 00 00 FF 
09708     38 E4 05 F1 | 	add	objptr, ##1080
0970c     F2 1E 02 FB | 	rdlong	local01, objptr
09710     03 1E 66 F0 | 	shl	local01, #3
09714     02 00 00 FF 
09718     38 E4 85 F1 | 	sub	objptr, ##1080
0971c     F2 1E 02 F1 | 	add	local01, objptr
09720     0F 13 02 FB | 	rdlong	arg01, local01
09724     54 00 00 FF 
09728     FC E5 85 F1 | 	sub	objptr, ##43516
0972c     09 2D 02 F6 | 	mov	local08, arg01
09730     97 06 48 FB | 	callpa	#(@LR__0799-@LR__0798)>>2,fcache_load_ptr_
09734                 | LR__0798
09734     16 FB C9 FA | 	rdbyte	result1, local08 wz
09738     01 2C 06 51 |  if_ne	add	local08, #1
0973c     F4 FF 9F 5D |  if_ne	jmp	#LR__0798
09740                 | LR__0799
09740     09 2D 82 F1 | 	sub	local08, arg01
09744     16 15 02 F6 | 	mov	arg02, local08
09748     01 14 86 F1 | 	sub	arg02, #1
0974c     15 13 02 F6 | 	mov	arg01, local07
09750     B0 6E B1 FD | 	call	#__system__Right_S
09754     FD 14 02 F6 | 	mov	arg02, result1
09758     13 13 02 F6 | 	mov	arg01, local05
0975c     34 4E B1 FD | 	call	#__system___string_concat
09760     14 FB 61 FC | 	wrlong	result1, local06
09764                 | LR__0800
09764     57 00 00 FF 
09768     34 E4 05 F1 | 	add	objptr, ##44596
0976c     F2 28 02 FB | 	rdlong	local06, objptr
09770     03 28 66 F0 | 	shl	local06, #3
09774     02 00 00 FF 
09778     38 E4 85 F1 | 	sub	objptr, ##1080
0977c     F2 28 02 F1 | 	add	local06, objptr
09780     14 13 02 FB | 	rdlong	arg01, local06
09784     00 14 06 F6 | 	mov	arg02, #0
09788     54 00 00 FF 
0978c     FC E5 85 F1 | 	sub	objptr, ##43516
09790     98 7F B1 FD | 	call	#__system____builtin_atoi
09794     FD 24 02 FD | 	qmul	local04, result1
09798     6A 00 00 FF 
0979c     6C E4 05 F1 | 	add	objptr, ##54380
097a0     F2 28 02 FB | 	rdlong	local06, objptr
097a4     14 2F 02 F6 | 	mov	local09, local06
097a8     01 2E 66 F0 | 	shl	local09, #1
097ac     14 2F 02 F1 | 	add	local09, local06
097b0     02 2E 66 F0 | 	shl	local09, #2
097b4     03 00 00 FF 
097b8     00 E4 85 F1 | 	sub	objptr, ##1536
097bc     F2 2E 02 F1 | 	add	local09, objptr
097c0     03 00 00 FF 
097c4     00 E4 05 F1 | 	add	objptr, ##1536
097c8     18 1E 62 FD | 	getqx	local01
097cc     1C 22 06 F6 | 	mov	local03, #28
097d0     0F 29 02 F6 | 	mov	local06, local01
097d4     10 2B 02 F6 | 	mov	local07, local02
097d8     17 29 62 FC | 	wrlong	local06, local09
097dc     11 2F 02 F6 | 	mov	local09, local03
097e0     F2 28 02 FB | 	rdlong	local06, objptr
097e4     14 27 02 F6 | 	mov	local05, local06
097e8     01 26 66 F0 | 	shl	local05, #1
097ec     14 27 02 F1 | 	add	local05, local06
097f0     02 26 66 F0 | 	shl	local05, #2
097f4     03 00 00 FF 
097f8     00 E4 85 F1 | 	sub	objptr, ##1536
097fc     F2 26 02 F1 | 	add	local05, objptr
09800     04 26 06 F1 | 	add	local05, #4
09804     13 2B 62 FC | 	wrlong	local07, local05
09808     03 00 00 FF 
0980c     00 E4 05 F1 | 	add	objptr, ##1536
09810     F2 2A 02 FB | 	rdlong	local07, objptr
09814     15 29 02 F6 | 	mov	local06, local07
09818     01 28 66 F0 | 	shl	local06, #1
0981c     15 29 02 F1 | 	add	local06, local07
09820     02 28 66 F0 | 	shl	local06, #2
09824     03 00 00 FF 
09828     00 E4 85 F1 | 	sub	objptr, ##1536
0982c     F2 28 02 F1 | 	add	local06, objptr
09830     08 28 06 F1 | 	add	local06, #8
09834     14 2F 62 FC | 	wrlong	local09, local06
09838     03 00 00 FF 
0983c     00 E4 05 F1 | 	add	objptr, ##1536
09840     F2 28 02 FB | 	rdlong	local06, objptr
09844     01 28 06 F1 | 	add	local06, #1
09848     F2 28 62 FC | 	wrlong	local06, objptr
0984c     13 00 00 FF 
09850     38 E4 85 F1 | 	sub	objptr, ##9784
09854     F2 28 02 FB | 	rdlong	local06, objptr
09858     01 28 06 F1 | 	add	local06, #1
0985c     F2 28 62 FC | 	wrlong	local06, objptr
09860     57 00 00 FF 
09864     34 E4 85 F1 | 	sub	objptr, ##44596
09868     0C 04 90 FD | 	jmp	#LR__0812
0986c                 | LR__0801
0986c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0986c     01 24 0E F2 | 	cmp	local04, #1 wz
09870     48 00 90 5D |  if_ne	jmp	#LR__0802
09874     00 C0 1F FF 
09878     00 28 06 F6 | 	mov	local06, ##1065353216
0987c     57 00 00 FF 
09880     34 E4 05 F1 | 	add	objptr, ##44596
09884     F2 2E 02 FB | 	rdlong	local09, objptr
09888     03 2E 66 F0 | 	shl	local09, #3
0988c     02 00 00 FF 
09890     38 E4 85 F1 | 	sub	objptr, ##1080
09894     F2 2E 02 F1 | 	add	local09, objptr
09898     17 13 02 FB | 	rdlong	arg01, local09
0989c     54 00 00 FF 
098a0     FC E5 85 F1 | 	sub	objptr, ##43516
098a4     F4 7F B1 FD | 	call	#__system____builtin_atof
098a8     FD 14 02 F6 | 	mov	arg02, result1
098ac     14 13 02 F6 | 	mov	arg01, local06
098b0     00 78 B1 FD | 	call	#__system___float_mul
098b4     FD 1E 02 F6 | 	mov	local01, result1
098b8     1E 22 06 F6 | 	mov	local03, #30
098bc                 | LR__0802
098bc                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
098bc     FF FF 7F FF 
098c0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
098c4     48 00 90 5D |  if_ne	jmp	#LR__0803
098c8     00 C0 5F FF 
098cc     00 28 06 F6 | 	mov	local06, ##-1082130432
098d0     57 00 00 FF 
098d4     34 E4 05 F1 | 	add	objptr, ##44596
098d8     F2 2E 02 FB | 	rdlong	local09, objptr
098dc     03 2E 66 F0 | 	shl	local09, #3
098e0     02 00 00 FF 
098e4     38 E4 85 F1 | 	sub	objptr, ##1080
098e8     F2 2E 02 F1 | 	add	local09, objptr
098ec     17 13 02 FB | 	rdlong	arg01, local09
098f0     54 00 00 FF 
098f4     FC E5 85 F1 | 	sub	objptr, ##43516
098f8     A0 7F B1 FD | 	call	#__system____builtin_atof
098fc     FD 14 02 F6 | 	mov	arg02, result1
09900     14 13 02 F6 | 	mov	arg01, local06
09904     AC 77 B1 FD | 	call	#__system___float_mul
09908     FD 1E 02 F6 | 	mov	local01, result1
0990c     1E 22 06 F6 | 	mov	local03, #30
09910                 | LR__0803
09910     0F 29 02 F6 | 	mov	local06, local01
09914     10 2B 02 F6 | 	mov	local07, local02
09918     11 27 02 F6 | 	mov	local05, local03
0991c     6A 00 00 FF 
09920     6C E4 05 F1 | 	add	objptr, ##54380
09924     F2 1E 02 FB | 	rdlong	local01, objptr
09928     0F 2F 02 F6 | 	mov	local09, local01
0992c     01 2E 66 F0 | 	shl	local09, #1
09930     0F 2F 02 F1 | 	add	local09, local01
09934     02 2E 66 F0 | 	shl	local09, #2
09938     03 00 00 FF 
0993c     00 E4 85 F1 | 	sub	objptr, ##1536
09940     F2 2E 02 F1 | 	add	local09, objptr
09944     17 29 62 FC | 	wrlong	local06, local09
09948     03 00 00 FF 
0994c     00 E4 05 F1 | 	add	objptr, ##1536
09950     F2 2E 02 FB | 	rdlong	local09, objptr
09954     17 29 02 F6 | 	mov	local06, local09
09958     01 28 66 F0 | 	shl	local06, #1
0995c     17 29 02 F1 | 	add	local06, local09
09960     02 28 66 F0 | 	shl	local06, #2
09964     03 00 00 FF 
09968     00 E4 85 F1 | 	sub	objptr, ##1536
0996c     F2 28 02 F1 | 	add	local06, objptr
09970     04 28 06 F1 | 	add	local06, #4
09974     14 2B 62 FC | 	wrlong	local07, local06
09978     03 00 00 FF 
0997c     00 E4 05 F1 | 	add	objptr, ##1536
09980     F2 2E 02 FB | 	rdlong	local09, objptr
09984     17 2B 02 F6 | 	mov	local07, local09
09988     01 2A 66 F0 | 	shl	local07, #1
0998c     17 2B 02 F1 | 	add	local07, local09
09990     02 2A 66 F0 | 	shl	local07, #2
09994     03 00 00 FF 
09998     00 E4 85 F1 | 	sub	objptr, ##1536
0999c     F2 2A 02 F1 | 	add	local07, objptr
099a0     08 2A 06 F1 | 	add	local07, #8
099a4     15 27 62 FC | 	wrlong	local05, local07
099a8     03 00 00 FF 
099ac     00 E4 05 F1 | 	add	objptr, ##1536
099b0     F2 28 02 FB | 	rdlong	local06, objptr
099b4     01 28 06 F1 | 	add	local06, #1
099b8     F2 28 62 FC | 	wrlong	local06, objptr
099bc     13 00 00 FF 
099c0     38 E4 85 F1 | 	sub	objptr, ##9784
099c4     F2 28 02 FB | 	rdlong	local06, objptr
099c8     01 28 06 F1 | 	add	local06, #1
099cc     F2 28 62 FC | 	wrlong	local06, objptr
099d0     57 00 00 FF 
099d4     34 E4 85 F1 | 	sub	objptr, ##44596
099d8     9C 02 90 FD | 	jmp	#LR__0812
099dc                 | LR__0804
099dc     1F 22 06 F6 | 	mov	local03, #31
099e0     57 00 00 FF 
099e4     34 E4 05 F1 | 	add	objptr, ##44596
099e8     F2 16 02 FB | 	rdlong	arg03, objptr
099ec     03 16 66 F0 | 	shl	arg03, #3
099f0     02 00 00 FF 
099f4     38 E4 85 F1 | 	sub	objptr, ##1080
099f8     F2 16 02 F1 | 	add	arg03, objptr
099fc     0B 13 02 FB | 	rdlong	arg01, arg03
09a00     54 00 00 FF 
09a04     FC E5 85 F1 | 	sub	objptr, ##43516
09a08     09 2D 02 F6 | 	mov	local08, arg01
09a0c     97 06 48 FB | 	callpa	#(@LR__0806-@LR__0805)>>2,fcache_load_ptr_
09a10                 | LR__0805
09a10     16 FB C9 FA | 	rdbyte	result1, local08 wz
09a14     01 2C 06 51 |  if_ne	add	local08, #1
09a18     F4 FF 9F 5D |  if_ne	jmp	#LR__0805
09a1c                 | LR__0806
09a1c     09 2D 82 F1 | 	sub	local08, arg01
09a20     16 FB 01 F6 | 	mov	result1, local08
09a24     7B 00 00 FF 
09a28     C4 E4 05 F1 | 	add	objptr, ##63172
09a2c     F2 FA 61 FC | 	wrlong	result1, objptr
09a30     5C E4 85 F1 | 	sub	objptr, #92
09a34     F2 12 02 FB | 	rdlong	arg01, objptr
09a38     FD 12 82 F1 | 	sub	arg01, result1
09a3c     04 12 86 F1 | 	sub	arg01, #4
09a40     03 12 26 F5 | 	andn	arg01, #3
09a44     F2 12 62 FC | 	wrlong	arg01, objptr
09a48     5C E4 05 F1 | 	add	objptr, #92
09a4c     F2 14 02 FB | 	rdlong	arg02, objptr
09a50     7B 00 00 FF 
09a54     C4 E4 85 F1 | 	sub	objptr, ##63172
09a58     E0 07 B1 FD | 	call	#_pslpoke
09a5c                 | '     pslpoke memtop,l
09a5c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09a5c     01 30 06 F6 | 	mov	local10, #1
09a60     7B 00 00 FF 
09a64     C4 E4 05 F1 | 	add	objptr, ##63172
09a68     F2 32 02 FB | 	rdlong	local11, objptr
09a6c     7B 00 00 FF 
09a70     C4 E4 85 F1 | 	sub	objptr, ##63172
09a74     01 32 06 F1 | 	add	local11, #1
09a78                 | LR__0807
09a78     19 31 52 F2 | 	cmps	local10, local11 wc
09a7c     5C 00 90 3D |  if_ae	jmp	#LR__0808
09a80     7B 00 00 FF 
09a84     68 E4 05 F1 | 	add	objptr, ##63080
09a88     F2 2A 02 FB | 	rdlong	local07, objptr
09a8c     03 2A 06 F1 | 	add	local07, #3
09a90     18 2B 02 F1 | 	add	local07, local10
09a94     24 00 00 FF 
09a98     34 E4 85 F1 | 	sub	objptr, ##18484
09a9c     F2 2E 02 FB | 	rdlong	local09, objptr
09aa0     03 2E 66 F0 | 	shl	local09, #3
09aa4     02 00 00 FF 
09aa8     38 E4 85 F1 | 	sub	objptr, ##1080
09aac     F2 2E 02 F1 | 	add	local09, objptr
09ab0     17 13 02 FB | 	rdlong	arg01, local09
09ab4     18 15 02 F6 | 	mov	arg02, local10
09ab8     01 16 06 F6 | 	mov	arg03, #1
09abc     54 00 00 FF 
09ac0     FC E5 85 F1 | 	sub	objptr, ##43516
09ac4     CC 6B B1 FD | 	call	#__system__Mid_S
09ac8     FD 14 C2 FA | 	rdbyte	arg02, result1
09acc     15 13 02 F6 | 	mov	arg01, local07
09ad0     F8 07 B1 FD | 	call	#_pspoke
09ad4     01 30 06 F1 | 	add	local10, #1
09ad8     9C FF 9F FD | 	jmp	#LR__0807
09adc                 | LR__0808
09adc     7B 00 00 FF 
09ae0     68 E4 05 F1 | 	add	objptr, ##63080
09ae4     F2 1E 02 FB | 	rdlong	local01, objptr
09ae8     2B 22 06 F6 | 	mov	local03, #43
09aec     0F 29 02 F6 | 	mov	local06, local01
09af0     10 2B 02 F6 | 	mov	local07, local02
09af4     11 33 02 F6 | 	mov	local11, local03
09af8     10 00 00 FF 
09afc     FC E5 85 F1 | 	sub	objptr, ##8700
09b00     F2 30 02 FB | 	rdlong	local10, objptr
09b04     18 2F 02 F6 | 	mov	local09, local10
09b08     01 2E 66 F0 | 	shl	local09, #1
09b0c     18 2F 02 F1 | 	add	local09, local10
09b10     02 2E 66 F0 | 	shl	local09, #2
09b14     03 00 00 FF 
09b18     00 E4 85 F1 | 	sub	objptr, ##1536
09b1c     F2 2E 02 F1 | 	add	local09, objptr
09b20     17 29 62 FC | 	wrlong	local06, local09
09b24     03 00 00 FF 
09b28     00 E4 05 F1 | 	add	objptr, ##1536
09b2c     F2 30 02 FB | 	rdlong	local10, objptr
09b30     18 2F 02 F6 | 	mov	local09, local10
09b34     01 2E 66 F0 | 	shl	local09, #1
09b38     18 2F 02 F1 | 	add	local09, local10
09b3c     02 2E 66 F0 | 	shl	local09, #2
09b40     03 00 00 FF 
09b44     00 E4 85 F1 | 	sub	objptr, ##1536
09b48     F2 2E 02 F1 | 	add	local09, objptr
09b4c     04 2E 06 F1 | 	add	local09, #4
09b50     17 2B 62 FC | 	wrlong	local07, local09
09b54     03 00 00 FF 
09b58     00 E4 05 F1 | 	add	objptr, ##1536
09b5c     F2 30 02 FB | 	rdlong	local10, objptr
09b60     18 2F 02 F6 | 	mov	local09, local10
09b64     01 2E 66 F0 | 	shl	local09, #1
09b68     18 2F 02 F1 | 	add	local09, local10
09b6c     02 2E 66 F0 | 	shl	local09, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 2E 02 F1 | 	add	local09, objptr
09b7c     08 2E 06 F1 | 	add	local09, #8
09b80     17 33 62 FC | 	wrlong	local11, local09
09b84     03 00 00 FF 
09b88     00 E4 05 F1 | 	add	objptr, ##1536
09b8c     F2 28 02 FB | 	rdlong	local06, objptr
09b90     01 28 06 F1 | 	add	local06, #1
09b94     F2 28 62 FC | 	wrlong	local06, objptr
09b98     13 00 00 FF 
09b9c     38 E4 85 F1 | 	sub	objptr, ##9784
09ba0     F2 28 02 FB | 	rdlong	local06, objptr
09ba4     01 28 06 F1 | 	add	local06, #1
09ba8     F2 28 62 FC | 	wrlong	local06, objptr
09bac     57 00 00 FF 
09bb0     34 E4 85 F1 | 	sub	objptr, ##44596
09bb4     C0 00 90 FD | 	jmp	#LR__0812
09bb8                 | LR__0809
09bb8     12 13 02 F6 | 	mov	arg01, local04
09bbc     B8 03 B0 FD | 	call	#_getvar
09bc0     57 00 00 FF 
09bc4     34 E4 05 F1 | 	add	objptr, ##44596
09bc8     F2 28 02 FB | 	rdlong	local06, objptr
09bcc     01 28 06 F1 | 	add	local06, #1
09bd0     F2 28 62 FC | 	wrlong	local06, objptr
09bd4     57 00 00 FF 
09bd8     34 E4 85 F1 | 	sub	objptr, ##44596
09bdc     98 00 90 FD | 	jmp	#LR__0812
09be0                 | LR__0810
09be0     57 00 00 FF 
09be4     34 E4 05 F1 | 	add	objptr, ##44596
09be8     F2 28 02 FB | 	rdlong	local06, objptr
09bec     01 28 06 F1 | 	add	local06, #1
09bf0     F2 28 62 FC | 	wrlong	local06, objptr
09bf4     57 00 00 FF 
09bf8     34 E4 85 F1 | 	sub	objptr, ##44596
09bfc     64 F2 BF FD | 	call	#_expr
09c00                 | '     ct+=1
09c00                 | '     expr() 
09c00                 | '     if lparts(ct).token=token_rpar then ct+=1
09c00     57 00 00 FF 
09c04     34 E4 05 F1 | 	add	objptr, ##44596
09c08     F2 32 02 FB | 	rdlong	local11, objptr
09c0c     03 32 66 F0 | 	shl	local11, #3
09c10     02 00 00 FF 
09c14     38 E4 85 F1 | 	sub	objptr, ##1080
09c18     F2 32 02 F1 | 	add	local11, objptr
09c1c     04 32 06 F1 | 	add	local11, #4
09c20     19 33 02 FB | 	rdlong	local11, local11
09c24     14 32 0E F2 | 	cmp	local11, #20 wz
09c28     54 00 00 FF 
09c2c     FC E5 85 F1 | 	sub	objptr, ##43516
09c30     44 00 90 5D |  if_ne	jmp	#LR__0812
09c34     57 00 00 FF 
09c38     34 E4 05 F1 | 	add	objptr, ##44596
09c3c     F2 28 02 FB | 	rdlong	local06, objptr
09c40     01 28 06 F1 | 	add	local06, #1
09c44     F2 28 62 FC | 	wrlong	local06, objptr
09c48     57 00 00 FF 
09c4c     34 E4 85 F1 | 	sub	objptr, ##44596
09c50     24 00 90 FD | 	jmp	#LR__0812
09c54                 | LR__0811
09c54     12 13 02 F6 | 	mov	arg01, local04
09c58     28 00 B0 FD | 	call	#_getfun
09c5c     57 00 00 FF 
09c60     34 E4 05 F1 | 	add	objptr, ##44596
09c64     F2 28 02 FB | 	rdlong	local06, objptr
09c68     01 28 06 F1 | 	add	local06, #1
09c6c     F2 28 62 FC | 	wrlong	local06, objptr
09c70     57 00 00 FF 
09c74     34 E4 85 F1 | 	sub	objptr, ##44596
09c78                 | LR__0812
09c78     A7 F0 03 F6 | 	mov	ptra, fp
09c7c     B2 00 A0 FD | 	call	#popregs_
09c80                 | _getvalue_ret
09c80     2D 00 64 FD | 	ret
09c84                 | 
09c84                 | ' 
09c84                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
09c84                 | _getfun
09c84     0A 4A 05 F6 | 	mov	COUNT_, #10
09c88     A8 00 A0 FD | 	call	#pushregs_
09c8c                 | _getfun_enter
09c8c     09 25 02 F6 | 	mov	local04, arg01
09c90     57 00 00 FF 
09c94     34 E4 05 F1 | 	add	objptr, ##44596
09c98     F2 26 02 FB | 	rdlong	local05, objptr
09c9c     13 29 02 F6 | 	mov	local06, local05
09ca0     00 2A 06 F6 | 	mov	local07, #0
09ca4                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
09ca4                 | ' oldct=ct
09ca4                 | ' numpar=0
09ca4                 | '   
09ca4                 | ' if lparts(ct+1).token=token_lpar then
09ca4     01 26 06 F1 | 	add	local05, #1
09ca8     03 26 66 F0 | 	shl	local05, #3
09cac     02 00 00 FF 
09cb0     38 E4 85 F1 | 	sub	objptr, ##1080
09cb4     F2 26 02 F1 | 	add	local05, objptr
09cb8     04 26 06 F1 | 	add	local05, #4
09cbc     13 27 02 FB | 	rdlong	local05, local05
09cc0     15 26 0E F2 | 	cmp	local05, #21 wz
09cc4     54 00 00 FF 
09cc8     FC E5 85 F1 | 	sub	objptr, ##43516
09ccc     08 01 90 5D |  if_ne	jmp	#LR__0824
09cd0     57 00 00 FF 
09cd4     34 E4 05 F1 | 	add	objptr, ##44596
09cd8     F2 2C 02 FB | 	rdlong	local08, objptr
09cdc     01 2C 06 F1 | 	add	local08, #1
09ce0     F2 2C 62 FC | 	wrlong	local08, objptr
09ce4     57 00 00 FF 
09ce8     34 E4 85 F1 | 	sub	objptr, ##44596
09cec                 | '   ct+=1 											' omit this lpar, this is for expr list
09cec                 | '   do
09cec                 | LR__0820
09cec     57 00 00 FF 
09cf0     34 E4 05 F1 | 	add	objptr, ##44596
09cf4     F2 26 02 FB | 	rdlong	local05, objptr
09cf8     01 26 06 F1 | 	add	local05, #1
09cfc     F2 26 62 FC | 	wrlong	local05, objptr
09d00                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09d00                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09d00     03 26 66 F0 | 	shl	local05, #3
09d04     02 00 00 FF 
09d08     38 E4 85 F1 | 	sub	objptr, ##1080
09d0c     F2 26 02 F1 | 	add	local05, objptr
09d10     04 26 06 F1 | 	add	local05, #4
09d14     13 2D 02 FB | 	rdlong	local08, local05
09d18     15 2C 0E F2 | 	cmp	local08, #21 wz
09d1c     54 00 00 FF 
09d20     FC E5 85 F1 | 	sub	objptr, ##43516
09d24     40 00 90 5D |  if_ne	jmp	#LR__0821
09d28     57 00 00 FF 
09d2c     34 E4 05 F1 | 	add	objptr, ##44596
09d30     F2 2C 02 FB | 	rdlong	local08, objptr
09d34     01 2C 06 F1 | 	add	local08, #1
09d38     F2 2C 62 FC | 	wrlong	local08, objptr
09d3c     57 00 00 FF 
09d40     34 E4 85 F1 | 	sub	objptr, ##44596
09d44     1C F1 BF FD | 	call	#_expr
09d48     57 00 00 FF 
09d4c     34 E4 05 F1 | 	add	objptr, ##44596
09d50     F2 2C 02 FB | 	rdlong	local08, objptr
09d54     01 2C 06 F1 | 	add	local08, #1
09d58     F2 2C 62 FC | 	wrlong	local08, objptr
09d5c     57 00 00 FF 
09d60     34 E4 85 F1 | 	sub	objptr, ##44596
09d64     04 00 90 FD | 	jmp	#LR__0822
09d68                 | LR__0821
09d68     F8 F0 BF FD | 	call	#_expr
09d6c                 | LR__0822
09d6c     01 2A 06 F1 | 	add	local07, #1
09d70     57 00 00 FF 
09d74     34 E4 05 F1 | 	add	objptr, ##44596
09d78     F2 26 02 FB | 	rdlong	local05, objptr
09d7c     03 26 66 F0 | 	shl	local05, #3
09d80     02 00 00 FF 
09d84     38 E4 85 F1 | 	sub	objptr, ##1080
09d88     F2 26 02 F1 | 	add	local05, objptr
09d8c     04 26 06 F1 | 	add	local05, #4
09d90     13 2D 02 FB | 	rdlong	local08, local05
09d94     14 2C 0E F2 | 	cmp	local08, #20 wz
09d98     54 00 00 FF 
09d9c     FC E5 85 F1 | 	sub	objptr, ##43516
09da0     34 00 90 AD |  if_e	jmp	#LR__0823
09da4     57 00 00 FF 
09da8     34 E4 05 F1 | 	add	objptr, ##44596
09dac     F2 2C 02 FB | 	rdlong	local08, objptr
09db0     03 2C 66 F0 | 	shl	local08, #3
09db4     02 00 00 FF 
09db8     38 E4 85 F1 | 	sub	objptr, ##1080
09dbc     F2 2C 02 F1 | 	add	local08, objptr
09dc0     04 2C 06 F1 | 	add	local08, #4
09dc4     16 2D 02 FB | 	rdlong	local08, local08
09dc8     FE 2D 0E F2 | 	cmp	local08, #510 wz
09dcc     54 00 00 FF 
09dd0     FC E5 85 F1 | 	sub	objptr, ##43516
09dd4     14 FF 9F 5D |  if_ne	jmp	#LR__0820
09dd8                 | LR__0823
09dd8                 | LR__0824
09dd8     15 1F 02 F6 | 	mov	local01, local07
09ddc     03 28 66 F0 | 	shl	local06, #3
09de0     54 00 00 FF 
09de4     FC E5 05 F1 | 	add	objptr, ##43516
09de8     F2 28 02 F1 | 	add	local06, objptr
09dec     04 28 06 F1 | 	add	local06, #4
09df0     14 23 02 FB | 	rdlong	local03, local06
09df4     0F 2D 02 F6 | 	mov	local08, local01
09df8     10 2B 02 F6 | 	mov	local07, local02
09dfc     11 29 02 F6 | 	mov	local06, local03
09e00     15 00 00 FF 
09e04     70 E4 05 F1 | 	add	objptr, ##10864
09e08     F2 26 02 FB | 	rdlong	local05, objptr
09e0c     13 13 02 F6 | 	mov	arg01, local05
09e10     01 12 66 F0 | 	shl	arg01, #1
09e14     13 13 02 F1 | 	add	arg01, local05
09e18     02 12 66 F0 | 	shl	arg01, #2
09e1c     03 00 00 FF 
09e20     00 E4 85 F1 | 	sub	objptr, ##1536
09e24     F2 12 02 F1 | 	add	arg01, objptr
09e28     09 2D 62 FC | 	wrlong	local08, arg01
09e2c     03 00 00 FF 
09e30     00 E4 05 F1 | 	add	objptr, ##1536
09e34     F2 2C 02 FB | 	rdlong	local08, objptr
09e38     16 2F 02 F6 | 	mov	local09, local08
09e3c     01 2E 66 F0 | 	shl	local09, #1
09e40     16 2F 02 F1 | 	add	local09, local08
09e44     02 2E 66 F0 | 	shl	local09, #2
09e48     03 00 00 FF 
09e4c     00 E4 85 F1 | 	sub	objptr, ##1536
09e50     F2 2E 02 F1 | 	add	local09, objptr
09e54     04 2E 06 F1 | 	add	local09, #4
09e58     17 2B 62 FC | 	wrlong	local07, local09
09e5c     03 00 00 FF 
09e60     00 E4 05 F1 | 	add	objptr, ##1536
09e64     F2 2C 02 FB | 	rdlong	local08, objptr
09e68     16 31 02 F6 | 	mov	local10, local08
09e6c     01 30 66 F0 | 	shl	local10, #1
09e70     16 31 02 F1 | 	add	local10, local08
09e74     02 30 66 F0 | 	shl	local10, #2
09e78     03 00 00 FF 
09e7c     00 E4 85 F1 | 	sub	objptr, ##1536
09e80     F2 30 02 F1 | 	add	local10, objptr
09e84     08 30 06 F1 | 	add	local10, #8
09e88     18 29 62 FC | 	wrlong	local06, local10
09e8c     03 00 00 FF 
09e90     00 E4 05 F1 | 	add	objptr, ##1536
09e94     F2 2C 02 FB | 	rdlong	local08, objptr
09e98     01 2C 06 F1 | 	add	local08, #1
09e9c     F2 2C 62 FC | 	wrlong	local08, objptr
09ea0     6A 00 00 FF 
09ea4     6C E4 85 F1 | 	sub	objptr, ##54380
09ea8                 | ' 
09ea8                 | ' t2.result.uresult=numpar
09ea8                 | ' 
09ea8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09ea8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09ea8                 | ' 
09ea8                 | '   
09ea8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09ea8     FF FF 7F FF 
09eac     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09eb0     B8 00 90 5D |  if_ne	jmp	#LR__0825
09eb4     15 22 06 F6 | 	mov	local03, #21
09eb8     0F 2D 02 F6 | 	mov	local08, local01
09ebc     10 2B 02 F6 | 	mov	local07, local02
09ec0     11 29 02 F6 | 	mov	local06, local03
09ec4     6A 00 00 FF 
09ec8     6C E4 05 F1 | 	add	objptr, ##54380
09ecc     F2 26 02 FB | 	rdlong	local05, objptr
09ed0     13 13 02 F6 | 	mov	arg01, local05
09ed4     01 12 66 F0 | 	shl	arg01, #1
09ed8     13 13 02 F1 | 	add	arg01, local05
09edc     02 12 66 F0 | 	shl	arg01, #2
09ee0     03 00 00 FF 
09ee4     00 E4 85 F1 | 	sub	objptr, ##1536
09ee8     F2 12 02 F1 | 	add	arg01, objptr
09eec     09 2D 62 FC | 	wrlong	local08, arg01
09ef0     03 00 00 FF 
09ef4     00 E4 05 F1 | 	add	objptr, ##1536
09ef8     F2 30 02 FB | 	rdlong	local10, objptr
09efc     18 2F 02 F6 | 	mov	local09, local10
09f00     01 2E 66 F0 | 	shl	local09, #1
09f04     18 2F 02 F1 | 	add	local09, local10
09f08     02 2E 66 F0 | 	shl	local09, #2
09f0c     03 00 00 FF 
09f10     00 E4 85 F1 | 	sub	objptr, ##1536
09f14     F2 2E 02 F1 | 	add	local09, objptr
09f18     04 2E 06 F1 | 	add	local09, #4
09f1c     17 2B 62 FC | 	wrlong	local07, local09
09f20     03 00 00 FF 
09f24     00 E4 05 F1 | 	add	objptr, ##1536
09f28     F2 2E 02 FB | 	rdlong	local09, objptr
09f2c     17 31 02 F6 | 	mov	local10, local09
09f30     01 30 66 F0 | 	shl	local10, #1
09f34     17 31 02 F1 | 	add	local10, local09
09f38     02 30 66 F0 | 	shl	local10, #2
09f3c     03 00 00 FF 
09f40     00 E4 85 F1 | 	sub	objptr, ##1536
09f44     F2 30 02 F1 | 	add	local10, objptr
09f48     08 30 06 F1 | 	add	local10, #8
09f4c     18 29 62 FC | 	wrlong	local06, local10
09f50     03 00 00 FF 
09f54     00 E4 05 F1 | 	add	objptr, ##1536
09f58     F2 2C 02 FB | 	rdlong	local08, objptr
09f5c     01 2C 06 F1 | 	add	local08, #1
09f60     F2 2C 62 FC | 	wrlong	local08, objptr
09f64     6A 00 00 FF 
09f68     6C E4 85 F1 | 	sub	objptr, ##54380
09f6c                 | LR__0825
09f6c     A7 F0 03 F6 | 	mov	ptra, fp
09f70     B2 00 A0 FD | 	call	#popregs_
09f74                 | _getfun_ret
09f74     2D 00 64 FD | 	ret
09f78                 | 
09f78                 | '   
09f78                 | '   
09f78                 | ' sub getvar(m as integer) 
09f78                 | _getvar
09f78     0A 4A 05 F6 | 	mov	COUNT_, #10
09f7c     A8 00 A0 FD | 	call	#pushregs_
09f80                 | _getvar_enter
09f80     09 25 02 F6 | 	mov	local04, arg01
09f84     57 00 00 FF 
09f88     34 E4 05 F1 | 	add	objptr, ##44596
09f8c     F2 14 02 FB | 	rdlong	arg02, objptr
09f90     03 14 66 F0 | 	shl	arg02, #3
09f94     02 00 00 FF 
09f98     38 E4 85 F1 | 	sub	objptr, ##1080
09f9c     F2 14 02 F1 | 	add	arg02, objptr
09fa0     0A 27 02 FB | 	rdlong	local05, arg02
09fa4     13 13 02 F6 | 	mov	arg01, local05
09fa8     01 14 06 F6 | 	mov	arg02, #1
09fac     54 00 00 FF 
09fb0     FC E5 85 F1 | 	sub	objptr, ##43516
09fb4     4C 66 B1 FD | 	call	#__system__Right_S
09fb8     FD 28 02 F6 | 	mov	local06, result1
09fbc     01 2A 66 F6 | 	neg	local07, #1
09fc0                 | ' 
09fc0                 | ' varname$=lparts(ct).part$
09fc0                 | ' suffix$=right$(varname$,1)
09fc0                 | ' j=-1
09fc0                 | ' 
09fc0                 | ' for i=0 to varnum-1
09fc0     00 2C 06 F6 | 	mov	local08, #0
09fc4     54 00 00 FF 
09fc8     F8 E5 05 F1 | 	add	objptr, ##43512
09fcc     F2 2E 02 FB | 	rdlong	local09, objptr
09fd0     54 00 00 FF 
09fd4     F8 E5 85 F1 | 	sub	objptr, ##43512
09fd8                 | LR__0830
09fd8     17 2D 52 F2 | 	cmps	local08, local09 wc
09fdc     38 00 90 3D |  if_ae	jmp	#LR__0831
09fe0                 | '   if variables(i).name=varname$ then j=i : exit
09fe0     16 15 02 F6 | 	mov	arg02, local08
09fe4     04 14 66 F0 | 	shl	arg02, #4
09fe8     34 00 00 FF 
09fec     F8 E5 05 F1 | 	add	objptr, ##27128
09ff0     F2 14 02 F1 | 	add	arg02, objptr
09ff4     0A 13 02 FB | 	rdlong	arg01, arg02
09ff8     13 15 02 F6 | 	mov	arg02, local05
09ffc     34 00 00 FF 
0a000     F8 E5 85 F1 | 	sub	objptr, ##27128
0a004     58 45 B1 FD | 	call	#__system___string_cmp
0a008     00 FA 0D F2 | 	cmp	result1, #0 wz
0a00c     16 2B 02 A6 |  if_e	mov	local07, local08
0a010     01 2C 06 51 |  if_ne	add	local08, #1
0a014     C0 FF 9F 5D |  if_ne	jmp	#LR__0830
0a018                 | LR__0831
0a018                 | ' if  j=-1 andalso varnum<maxvars then   
0a018     FF FF 7F FF 
0a01c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0a020     A8 00 90 5D |  if_ne	jmp	#LR__0832
0a024     54 00 00 FF 
0a028     F8 E5 05 F1 | 	add	objptr, ##43512
0a02c     F2 2E 02 FB | 	rdlong	local09, objptr
0a030     54 00 00 FF 
0a034     F8 E5 85 F1 | 	sub	objptr, ##43512
0a038     01 00 00 FF 
0a03c     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
0a040     88 00 90 3D |  if_ae	jmp	#LR__0832
0a044     54 00 00 FF 
0a048     F8 E5 05 F1 | 	add	objptr, ##43512
0a04c     F2 2E 02 FB | 	rdlong	local09, objptr
0a050     04 2E 66 F0 | 	shl	local09, #4
0a054     20 00 00 FF 
0a058     00 E4 85 F1 | 	sub	objptr, ##16384
0a05c     F2 2E 02 F1 | 	add	local09, objptr
0a060     17 27 62 FC | 	wrlong	local05, local09
0a064     20 00 00 FF 
0a068     00 E4 05 F1 | 	add	objptr, ##16384
0a06c     F2 2E 02 FB | 	rdlong	local09, objptr
0a070     04 2E 66 F0 | 	shl	local09, #4
0a074     20 00 00 FF 
0a078     00 E4 85 F1 | 	sub	objptr, ##16384
0a07c     F2 2E 02 F1 | 	add	local09, objptr
0a080     04 2E 06 F1 | 	add	local09, #4
0a084     17 01 68 FC | 	wrlong	#0, local09
0a088     20 00 00 FF 
0a08c     00 E4 05 F1 | 	add	objptr, ##16384
0a090     F2 2E 02 FB | 	rdlong	local09, objptr
0a094     04 2E 66 F0 | 	shl	local09, #4
0a098     20 00 00 FF 
0a09c     00 E4 85 F1 | 	sub	objptr, ##16384
0a0a0     F2 2E 02 F1 | 	add	local09, objptr
0a0a4     0C 2E 06 F1 | 	add	local09, #12
0a0a8     17 39 68 FC | 	wrlong	#28, local09
0a0ac     20 00 00 FF 
0a0b0     00 E4 05 F1 | 	add	objptr, ##16384
0a0b4     F2 2E 02 FB | 	rdlong	local09, objptr
0a0b8     17 2B 02 F6 | 	mov	local07, local09
0a0bc     01 2E 06 F1 | 	add	local09, #1
0a0c0     F2 2E 62 FC | 	wrlong	local09, objptr
0a0c4     54 00 00 FF 
0a0c8     F8 E5 85 F1 | 	sub	objptr, ##43512
0a0cc                 | LR__0832
0a0cc     00 2E 06 F6 | 	mov	local09, #0
0a0d0                 | ' numpar=0
0a0d0                 | ' ' check if it is an array
0a0d0                 | ' 
0a0d0                 | ' if lparts(ct+1).token=token_lpar then
0a0d0     57 00 00 FF 
0a0d4     34 E4 05 F1 | 	add	objptr, ##44596
0a0d8     F2 2C 02 FB | 	rdlong	local08, objptr
0a0dc     01 2C 06 F1 | 	add	local08, #1
0a0e0     03 2C 66 F0 | 	shl	local08, #3
0a0e4     02 00 00 FF 
0a0e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a0ec     F2 2C 02 F1 | 	add	local08, objptr
0a0f0     04 2C 06 F1 | 	add	local08, #4
0a0f4     16 2D 02 FB | 	rdlong	local08, local08
0a0f8     15 2C 0E F2 | 	cmp	local08, #21 wz
0a0fc     54 00 00 FF 
0a100     FC E5 85 F1 | 	sub	objptr, ##43516
0a104     08 01 90 5D |  if_ne	jmp	#LR__0837
0a108     57 00 00 FF 
0a10c     34 E4 05 F1 | 	add	objptr, ##44596
0a110     F2 30 02 FB | 	rdlong	local10, objptr
0a114     01 30 06 F1 | 	add	local10, #1
0a118     F2 30 62 FC | 	wrlong	local10, objptr
0a11c     57 00 00 FF 
0a120     34 E4 85 F1 | 	sub	objptr, ##44596
0a124                 | '   ct+=1 											' omit this lpar, this is for expr list
0a124                 | '   do
0a124                 | LR__0833
0a124     57 00 00 FF 
0a128     34 E4 05 F1 | 	add	objptr, ##44596
0a12c     F2 2C 02 FB | 	rdlong	local08, objptr
0a130     01 2C 06 F1 | 	add	local08, #1
0a134     F2 2C 62 FC | 	wrlong	local08, objptr
0a138                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a138                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a138     03 2C 66 F0 | 	shl	local08, #3
0a13c     02 00 00 FF 
0a140     38 E4 85 F1 | 	sub	objptr, ##1080
0a144     F2 2C 02 F1 | 	add	local08, objptr
0a148     04 2C 06 F1 | 	add	local08, #4
0a14c     16 31 02 FB | 	rdlong	local10, local08
0a150     15 30 0E F2 | 	cmp	local10, #21 wz
0a154     54 00 00 FF 
0a158     FC E5 85 F1 | 	sub	objptr, ##43516
0a15c     40 00 90 5D |  if_ne	jmp	#LR__0834
0a160     57 00 00 FF 
0a164     34 E4 05 F1 | 	add	objptr, ##44596
0a168     F2 30 02 FB | 	rdlong	local10, objptr
0a16c     01 30 06 F1 | 	add	local10, #1
0a170     F2 30 62 FC | 	wrlong	local10, objptr
0a174     57 00 00 FF 
0a178     34 E4 85 F1 | 	sub	objptr, ##44596
0a17c     E4 EC BF FD | 	call	#_expr
0a180     57 00 00 FF 
0a184     34 E4 05 F1 | 	add	objptr, ##44596
0a188     F2 30 02 FB | 	rdlong	local10, objptr
0a18c     01 30 06 F1 | 	add	local10, #1
0a190     F2 30 62 FC | 	wrlong	local10, objptr
0a194     57 00 00 FF 
0a198     34 E4 85 F1 | 	sub	objptr, ##44596
0a19c     04 00 90 FD | 	jmp	#LR__0835
0a1a0                 | LR__0834
0a1a0     C0 EC BF FD | 	call	#_expr
0a1a4                 | LR__0835
0a1a4     01 2E 06 F1 | 	add	local09, #1
0a1a8     57 00 00 FF 
0a1ac     34 E4 05 F1 | 	add	objptr, ##44596
0a1b0     F2 2C 02 FB | 	rdlong	local08, objptr
0a1b4     03 2C 66 F0 | 	shl	local08, #3
0a1b8     02 00 00 FF 
0a1bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a1c0     F2 2C 02 F1 | 	add	local08, objptr
0a1c4     04 2C 06 F1 | 	add	local08, #4
0a1c8     16 31 02 FB | 	rdlong	local10, local08
0a1cc     14 30 0E F2 | 	cmp	local10, #20 wz
0a1d0     54 00 00 FF 
0a1d4     FC E5 85 F1 | 	sub	objptr, ##43516
0a1d8     34 00 90 AD |  if_e	jmp	#LR__0836
0a1dc     57 00 00 FF 
0a1e0     34 E4 05 F1 | 	add	objptr, ##44596
0a1e4     F2 30 02 FB | 	rdlong	local10, objptr
0a1e8     03 30 66 F0 | 	shl	local10, #3
0a1ec     02 00 00 FF 
0a1f0     38 E4 85 F1 | 	sub	objptr, ##1080
0a1f4     F2 30 02 F1 | 	add	local10, objptr
0a1f8     04 30 06 F1 | 	add	local10, #4
0a1fc     18 31 02 FB | 	rdlong	local10, local10
0a200     FE 31 0E F2 | 	cmp	local10, #510 wz
0a204     54 00 00 FF 
0a208     FC E5 85 F1 | 	sub	objptr, ##43516
0a20c     14 FF 9F 5D |  if_ne	jmp	#LR__0833
0a210                 | LR__0836
0a210                 | LR__0837
0a210     17 21 02 F6 | 	mov	local02, local09
0a214     11 22 06 F6 | 	mov	local03, #17
0a218     15 1F 02 F6 | 	mov	local01, local07
0a21c     0F 31 02 F6 | 	mov	local10, local01
0a220     10 2F 02 F6 | 	mov	local09, local02
0a224     11 2D 02 F6 | 	mov	local08, local03
0a228     6A 00 00 FF 
0a22c     6C E4 05 F1 | 	add	objptr, ##54380
0a230     F2 2A 02 FB | 	rdlong	local07, objptr
0a234     15 29 02 F6 | 	mov	local06, local07
0a238     01 28 66 F0 | 	shl	local06, #1
0a23c     15 29 02 F1 | 	add	local06, local07
0a240     02 28 66 F0 | 	shl	local06, #2
0a244     03 00 00 FF 
0a248     00 E4 85 F1 | 	sub	objptr, ##1536
0a24c     F2 28 02 F1 | 	add	local06, objptr
0a250     14 31 62 FC | 	wrlong	local10, local06
0a254     03 00 00 FF 
0a258     00 E4 05 F1 | 	add	objptr, ##1536
0a25c     F2 30 02 FB | 	rdlong	local10, objptr
0a260     18 27 02 F6 | 	mov	local05, local10
0a264     01 26 66 F0 | 	shl	local05, #1
0a268     18 27 02 F1 | 	add	local05, local10
0a26c     02 26 66 F0 | 	shl	local05, #2
0a270     03 00 00 FF 
0a274     00 E4 85 F1 | 	sub	objptr, ##1536
0a278     F2 26 02 F1 | 	add	local05, objptr
0a27c     04 26 06 F1 | 	add	local05, #4
0a280     13 2F 62 FC | 	wrlong	local09, local05
0a284     03 00 00 FF 
0a288     00 E4 05 F1 | 	add	objptr, ##1536
0a28c     F2 30 02 FB | 	rdlong	local10, objptr
0a290     18 FB 01 F6 | 	mov	result1, local10
0a294     01 FA 65 F0 | 	shl	result1, #1
0a298     18 FB 01 F1 | 	add	result1, local10
0a29c     02 FA 65 F0 | 	shl	result1, #2
0a2a0     03 00 00 FF 
0a2a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a2a8     F2 FA 01 F1 | 	add	result1, objptr
0a2ac     08 FA 05 F1 | 	add	result1, #8
0a2b0     FD 2C 62 FC | 	wrlong	local08, result1
0a2b4     03 00 00 FF 
0a2b8     00 E4 05 F1 | 	add	objptr, ##1536
0a2bc     F2 30 02 FB | 	rdlong	local10, objptr
0a2c0     01 30 06 F1 | 	add	local10, #1
0a2c4     F2 30 62 FC | 	wrlong	local10, objptr
0a2c8     6A 00 00 FF 
0a2cc     6C E4 85 F1 | 	sub	objptr, ##54380
0a2d0                 | ' 
0a2d0                 | ' t2.result.twowords(1)=numpar
0a2d0                 | ' 
0a2d0                 | ' 
0a2d0                 | ' 
0a2d0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a2d0                 | ' 
0a2d0                 | ' 
0a2d0                 | '  
0a2d0                 | ' 
0a2d0                 | ' 701 
0a2d0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a2d0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a2d0     FF FF 7F FF 
0a2d4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a2d8     B8 00 90 5D |  if_ne	jmp	#LR__0838
0a2dc     15 22 06 F6 | 	mov	local03, #21
0a2e0     0F 31 02 F6 | 	mov	local10, local01
0a2e4     10 2F 02 F6 | 	mov	local09, local02
0a2e8     11 2D 02 F6 | 	mov	local08, local03
0a2ec     6A 00 00 FF 
0a2f0     6C E4 05 F1 | 	add	objptr, ##54380
0a2f4     F2 2A 02 FB | 	rdlong	local07, objptr
0a2f8     15 29 02 F6 | 	mov	local06, local07
0a2fc     01 28 66 F0 | 	shl	local06, #1
0a300     15 29 02 F1 | 	add	local06, local07
0a304     02 28 66 F0 | 	shl	local06, #2
0a308     03 00 00 FF 
0a30c     00 E4 85 F1 | 	sub	objptr, ##1536
0a310     F2 28 02 F1 | 	add	local06, objptr
0a314     14 31 62 FC | 	wrlong	local10, local06
0a318     03 00 00 FF 
0a31c     00 E4 05 F1 | 	add	objptr, ##1536
0a320     F2 1E 02 FB | 	rdlong	local01, objptr
0a324     0F 27 02 F6 | 	mov	local05, local01
0a328     01 26 66 F0 | 	shl	local05, #1
0a32c     0F 27 02 F1 | 	add	local05, local01
0a330     02 26 66 F0 | 	shl	local05, #2
0a334     03 00 00 FF 
0a338     00 E4 85 F1 | 	sub	objptr, ##1536
0a33c     F2 26 02 F1 | 	add	local05, objptr
0a340     04 26 06 F1 | 	add	local05, #4
0a344     13 2F 62 FC | 	wrlong	local09, local05
0a348     03 00 00 FF 
0a34c     00 E4 05 F1 | 	add	objptr, ##1536
0a350     F2 1E 02 FB | 	rdlong	local01, objptr
0a354     0F FB 01 F6 | 	mov	result1, local01
0a358     01 FA 65 F0 | 	shl	result1, #1
0a35c     0F FB 01 F1 | 	add	result1, local01
0a360     02 FA 65 F0 | 	shl	result1, #2
0a364     03 00 00 FF 
0a368     00 E4 85 F1 | 	sub	objptr, ##1536
0a36c     F2 FA 01 F1 | 	add	result1, objptr
0a370     08 FA 05 F1 | 	add	result1, #8
0a374     FD 2C 62 FC | 	wrlong	local08, result1
0a378     03 00 00 FF 
0a37c     00 E4 05 F1 | 	add	objptr, ##1536
0a380     F2 30 02 FB | 	rdlong	local10, objptr
0a384     01 30 06 F1 | 	add	local10, #1
0a388     F2 30 62 FC | 	wrlong	local10, objptr
0a38c     6A 00 00 FF 
0a390     6C E4 85 F1 | 	sub	objptr, ##54380
0a394                 | LR__0838
0a394     A7 F0 03 F6 | 	mov	ptra, fp
0a398     B2 00 A0 FD | 	call	#popregs_
0a39c                 | _getvar_ret
0a39c     2D 00 64 FD | 	ret
0a3a0                 | 
0a3a0                 | ' 
0a3a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a3a0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a3a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a3a0                 | ' 
0a3a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a3a0                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a3a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a3a0                 | ' 
0a3a0                 | ' function execute_line (astart=0 as integer) as integer
0a3a0                 | _execute_line
0a3a0     04 4A 05 F6 | 	mov	COUNT_, #4
0a3a4     A8 00 A0 FD | 	call	#pushregs_
0a3a8     79 00 00 FF 
0a3ac     A4 E5 05 F1 | 	add	objptr, ##62372
0a3b0     F2 00 68 FC | 	wrlong	#0, objptr
0a3b4                 | ' runptr2=0
0a3b4                 | ' for lineptr_e=astart to lineptr-1
0a3b4     0F 00 00 FF 
0a3b8     34 E5 85 F1 | 	sub	objptr, ##7988
0a3bc     F2 12 62 FC | 	wrlong	arg01, objptr
0a3c0     04 E4 85 F1 | 	sub	objptr, #4
0a3c4     F2 1E 02 FB | 	rdlong	local01, objptr
0a3c8     6A 00 00 FF 
0a3cc     6C E4 85 F1 | 	sub	objptr, ##54380
0a3d0                 | LR__0840
0a3d0     6A 00 00 FF 
0a3d4     70 E4 05 F1 | 	add	objptr, ##54384
0a3d8     F2 FA 01 FB | 	rdlong	result1, objptr
0a3dc     6A 00 00 FF 
0a3e0     70 E4 85 F1 | 	sub	objptr, ##54384
0a3e4     0F FB 51 F2 | 	cmps	result1, local01 wc
0a3e8     98 00 90 3D |  if_ae	jmp	#LR__0841
0a3ec     6A 00 00 FF 
0a3f0     70 E4 05 F1 | 	add	objptr, ##54384
0a3f4     F2 FA 01 FB | 	rdlong	result1, objptr
0a3f8     FD 20 02 F6 | 	mov	local02, result1
0a3fc     01 20 66 F0 | 	shl	local02, #1
0a400     FD 20 02 F1 | 	add	local02, result1
0a404     02 20 66 F0 | 	shl	local02, #2
0a408     03 00 00 FF 
0a40c     04 E4 85 F1 | 	sub	objptr, ##1540
0a410     F2 20 02 F1 | 	add	local02, objptr
0a414     08 20 06 F1 | 	add	local02, #8
0a418     10 21 02 FB | 	rdlong	local02, local02
0a41c     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a420     02 20 66 F0 | 	shl	local02, #2
0a424     04 00 00 FF 
0a428     1C E4 85 F1 | 	sub	objptr, ##2076
0a42c     F2 20 02 F1 | 	add	local02, objptr
0a430     10 21 02 FB | 	rdlong	local02, local02
0a434     10 23 02 F6 | 	mov	local03, local02
0a438     13 20 46 F7 | 	zerox	local02, #19
0a43c     14 22 46 F0 | 	shr	local03, #20
0a440     02 22 66 F0 | 	shl	local03, #2
0a444     ED 22 02 F1 | 	add	local03, __methods__
0a448     11 23 02 FB | 	rdlong	local03, local03
0a44c     63 00 00 FF 
0a450     50 E4 85 F1 | 	sub	objptr, ##50768
0a454     F2 24 02 F6 | 	mov	local04, objptr
0a458     10 E5 01 F6 | 	mov	objptr, local02
0a45c     2D 22 62 FD | 	call	local03
0a460     12 E5 01 F6 | 	mov	objptr, local04
0a464     6A 00 00 FF 
0a468     70 E4 05 F1 | 	add	objptr, ##54384
0a46c     F2 24 02 FB | 	rdlong	local04, objptr
0a470     01 24 06 F1 | 	add	local04, #1
0a474     F2 24 62 FC | 	wrlong	local04, objptr
0a478     6A 00 00 FF 
0a47c     70 E4 85 F1 | 	sub	objptr, ##54384
0a480     4C FF 9F FD | 	jmp	#LR__0840
0a484                 | LR__0841
0a484                 | ' return runptr2
0a484     79 00 00 FF 
0a488     A4 E5 05 F1 | 	add	objptr, ##62372
0a48c     F2 FA 01 FB | 	rdlong	result1, objptr
0a490     79 00 00 FF 
0a494     A4 E5 85 F1 | 	sub	objptr, ##62372
0a498     A7 F0 03 F6 | 	mov	ptra, fp
0a49c     B2 00 A0 FD | 	call	#popregs_
0a4a0                 | _execute_line_ret
0a4a0     2D 00 64 FD | 	ret
0a4a4                 | 
0a4a4                 | ' 
0a4a4                 | ' 
0a4a4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a4a4                 | ' 
0a4a4                 | ' function pop() as expr_result
0a4a4                 | _pop
0a4a4                 | ' 
0a4a4                 | ' if stackpointer=0 then
0a4a4     63 00 00 FF 
0a4a8     48 E4 05 F1 | 	add	objptr, ##50760
0a4ac     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a4b0     63 00 00 FF 
0a4b4     48 E4 85 F1 | 	sub	objptr, ##50760
0a4b8     FF 04 06 A6 |  if_e	mov	_var03, #255
0a4bc     18 00 06 A6 |  if_e	mov	_var01, #24
0a4c0     68 00 90 AD |  if_e	jmp	#LR__0850
0a4c4     63 00 00 FF 
0a4c8     48 E4 05 F1 | 	add	objptr, ##50760
0a4cc     F2 FA 01 FB | 	rdlong	result1, objptr
0a4d0     01 FA 85 F1 | 	sub	result1, #1
0a4d4     F2 FA 61 FC | 	wrlong	result1, objptr
0a4d8     FD FE 01 F6 | 	mov	result3, result1
0a4dc     01 FE 65 F0 | 	shl	result3, #1
0a4e0     FD FE 01 F1 | 	add	result3, result1
0a4e4     02 FE 65 F0 | 	shl	result3, #2
0a4e8     0C 00 00 FF 
0a4ec     0C E4 85 F1 | 	sub	objptr, ##6156
0a4f0     F2 FE 01 F1 | 	add	result3, objptr
0a4f4     FF 00 02 FB | 	rdlong	_var01, result3
0a4f8     04 FE 05 F1 | 	add	result3, #4
0a4fc     FF FE 01 FB | 	rdlong	result3, result3
0a500     FD FC 01 F6 | 	mov	result2, result1
0a504     01 FC 65 F0 | 	shl	result2, #1
0a508     FD FC 01 F1 | 	add	result2, result1
0a50c     02 FC 65 F0 | 	shl	result2, #2
0a510     F2 FC 01 F1 | 	add	result2, objptr
0a514     08 FC 05 F1 | 	add	result2, #8
0a518     FE FA 01 FB | 	rdlong	result1, result2
0a51c     FF 02 02 F6 | 	mov	_var02, result3
0a520     FD 04 02 F6 | 	mov	_var03, result1
0a524     57 00 00 FF 
0a528     3C E4 85 F1 | 	sub	objptr, ##44604
0a52c                 | LR__0850
0a52c                 | ' return t1
0a52c     01 FD 01 F6 | 	mov	result2, _var02
0a530     02 FF 01 F6 | 	mov	result3, _var03
0a534     00 FB 01 F6 | 	mov	result1, _var01
0a538                 | _pop_ret
0a538     2D 00 64 FD | 	ret
0a53c                 | 
0a53c                 | ' 
0a53c                 | ' sub push(t1 as expr_result )
0a53c                 | _push
0a53c                 | ' 
0a53c                 | ' 'print "In push: "; t1.result_type
0a53c                 | ' 'print "In push: "; t1.result.uresult
0a53c                 | ' 
0a53c                 | ' if stackpointer<maxstack then 
0a53c     63 00 00 FF 
0a540     48 E4 05 F1 | 	add	objptr, ##50760
0a544     F2 00 02 FB | 	rdlong	_var01, objptr
0a548     63 00 00 FF 
0a54c     48 E4 85 F1 | 	sub	objptr, ##50760
0a550     01 00 00 FF 
0a554     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a558     BC 00 90 3D |  if_ae	jmp	#LR__0860
0a55c     09 01 02 FB | 	rdlong	_var01, arg01
0a560     04 12 06 F1 | 	add	arg01, #4
0a564     09 03 02 FB | 	rdlong	_var02, arg01
0a568     04 12 06 F1 | 	add	arg01, #4
0a56c     09 13 02 FB | 	rdlong	arg01, arg01
0a570     63 00 00 FF 
0a574     48 E4 05 F1 | 	add	objptr, ##50760
0a578     F2 04 02 FB | 	rdlong	_var03, objptr
0a57c     02 07 02 F6 | 	mov	_var04, _var03
0a580     01 06 66 F0 | 	shl	_var04, #1
0a584     02 07 02 F1 | 	add	_var04, _var03
0a588     02 06 66 F0 | 	shl	_var04, #2
0a58c     0C 00 00 FF 
0a590     0C E4 85 F1 | 	sub	objptr, ##6156
0a594     F2 06 02 F1 | 	add	_var04, objptr
0a598     03 01 62 FC | 	wrlong	_var01, _var04
0a59c     0C 00 00 FF 
0a5a0     0C E4 05 F1 | 	add	objptr, ##6156
0a5a4     F2 06 02 FB | 	rdlong	_var04, objptr
0a5a8     03 05 02 F6 | 	mov	_var03, _var04
0a5ac     01 04 66 F0 | 	shl	_var03, #1
0a5b0     03 05 02 F1 | 	add	_var03, _var04
0a5b4     02 04 66 F0 | 	shl	_var03, #2
0a5b8     0C 00 00 FF 
0a5bc     0C E4 85 F1 | 	sub	objptr, ##6156
0a5c0     F2 04 02 F1 | 	add	_var03, objptr
0a5c4     04 04 06 F1 | 	add	_var03, #4
0a5c8     02 03 62 FC | 	wrlong	_var02, _var03
0a5cc     0C 00 00 FF 
0a5d0     0C E4 05 F1 | 	add	objptr, ##6156
0a5d4     F2 06 02 FB | 	rdlong	_var04, objptr
0a5d8     03 05 02 F6 | 	mov	_var03, _var04
0a5dc     01 04 66 F0 | 	shl	_var03, #1
0a5e0     03 05 02 F1 | 	add	_var03, _var04
0a5e4     02 04 66 F0 | 	shl	_var03, #2
0a5e8     0C 00 00 FF 
0a5ec     0C E4 85 F1 | 	sub	objptr, ##6156
0a5f0     F2 04 02 F1 | 	add	_var03, objptr
0a5f4     08 04 06 F1 | 	add	_var03, #8
0a5f8     02 13 62 FC | 	wrlong	arg01, _var03
0a5fc     0C 00 00 FF 
0a600     0C E4 05 F1 | 	add	objptr, ##6156
0a604     F2 00 02 FB | 	rdlong	_var01, objptr
0a608     01 00 06 F1 | 	add	_var01, #1
0a60c     F2 00 62 FC | 	wrlong	_var01, objptr
0a610     63 00 00 FF 
0a614     48 E4 85 F1 | 	sub	objptr, ##50760
0a618                 | LR__0860
0a618                 | _push_ret
0a618     2D 00 64 FD | 	ret
0a61c                 | 
0a61c                 | ' 
0a61c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a61c                 | ' 
0a61c                 | ' sub do_push
0a61c                 | _do_push
0a61c                 | ' if stackpointer<maxstack then 
0a61c     63 00 00 FF 
0a620     48 E4 05 F1 | 	add	objptr, ##50760
0a624     F2 00 02 FB | 	rdlong	_var01, objptr
0a628     63 00 00 FF 
0a62c     48 E4 85 F1 | 	sub	objptr, ##50760
0a630     01 00 00 FF 
0a634     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a638     F8 00 90 3D |  if_ae	jmp	#LR__0870
0a63c     6A 00 00 FF 
0a640     70 E4 05 F1 | 	add	objptr, ##54384
0a644     F2 02 02 FB | 	rdlong	_var02, objptr
0a648     01 05 02 F6 | 	mov	_var03, _var02
0a64c     01 04 66 F0 | 	shl	_var03, #1
0a650     01 05 02 F1 | 	add	_var03, _var02
0a654     02 04 66 F0 | 	shl	_var03, #2
0a658     03 00 00 FF 
0a65c     04 E4 85 F1 | 	sub	objptr, ##1540
0a660     F2 04 02 F1 | 	add	_var03, objptr
0a664     02 01 02 FB | 	rdlong	_var01, _var03
0a668     04 04 06 F1 | 	add	_var03, #4
0a66c     02 07 02 FB | 	rdlong	_var04, _var03
0a670     01 05 02 F6 | 	mov	_var03, _var02
0a674     01 04 66 F0 | 	shl	_var03, #1
0a678     01 05 02 F1 | 	add	_var03, _var02
0a67c     02 04 66 F0 | 	shl	_var03, #2
0a680     F2 04 02 F1 | 	add	_var03, objptr
0a684     08 04 06 F1 | 	add	_var03, #8
0a688     02 03 02 FB | 	rdlong	_var02, _var03
0a68c     04 00 00 FF 
0a690     24 E4 85 F1 | 	sub	objptr, ##2084
0a694     F2 04 02 FB | 	rdlong	_var03, objptr
0a698     02 09 02 F6 | 	mov	_var05, _var03
0a69c     01 08 66 F0 | 	shl	_var05, #1
0a6a0     02 09 02 F1 | 	add	_var05, _var03
0a6a4     02 08 66 F0 | 	shl	_var05, #2
0a6a8     0C 00 00 FF 
0a6ac     0C E4 85 F1 | 	sub	objptr, ##6156
0a6b0     F2 08 02 F1 | 	add	_var05, objptr
0a6b4     04 01 62 FC | 	wrlong	_var01, _var05
0a6b8     0C 00 00 FF 
0a6bc     0C E4 05 F1 | 	add	objptr, ##6156
0a6c0     F2 08 02 FB | 	rdlong	_var05, objptr
0a6c4     04 05 02 F6 | 	mov	_var03, _var05
0a6c8     01 04 66 F0 | 	shl	_var03, #1
0a6cc     04 05 02 F1 | 	add	_var03, _var05
0a6d0     02 04 66 F0 | 	shl	_var03, #2
0a6d4     0C 00 00 FF 
0a6d8     0C E4 85 F1 | 	sub	objptr, ##6156
0a6dc     F2 04 02 F1 | 	add	_var03, objptr
0a6e0     04 04 06 F1 | 	add	_var03, #4
0a6e4     02 07 62 FC | 	wrlong	_var04, _var03
0a6e8     0C 00 00 FF 
0a6ec     0C E4 05 F1 | 	add	objptr, ##6156
0a6f0     F2 08 02 FB | 	rdlong	_var05, objptr
0a6f4     04 07 02 F6 | 	mov	_var04, _var05
0a6f8     01 06 66 F0 | 	shl	_var04, #1
0a6fc     04 07 02 F1 | 	add	_var04, _var05
0a700     02 06 66 F0 | 	shl	_var04, #2
0a704     0C 00 00 FF 
0a708     0C E4 85 F1 | 	sub	objptr, ##6156
0a70c     F2 06 02 F1 | 	add	_var04, objptr
0a710     08 06 06 F1 | 	add	_var04, #8
0a714     03 03 62 FC | 	wrlong	_var02, _var04
0a718     0C 00 00 FF 
0a71c     0C E4 05 F1 | 	add	objptr, ##6156
0a720     F2 00 02 FB | 	rdlong	_var01, objptr
0a724     01 00 06 F1 | 	add	_var01, #1
0a728     F2 00 62 FC | 	wrlong	_var01, objptr
0a72c     63 00 00 FF 
0a730     48 E4 85 F1 | 	sub	objptr, ##50760
0a734                 | LR__0870
0a734                 | _do_push_ret
0a734     2D 00 64 FD | 	ret
0a738                 | 
0a738                 | ' 
0a738                 | '   
0a738                 | ' sub csave_block(address as ulong)
0a738                 | _csave_block
0a738     09 01 02 F6 | 	mov	_var01, arg01
0a73c                 | ' 
0a73c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a73c                 | ' ' we enter it at the state of playing 1 kHz header tone
0a73c                 | ' 
0a73c                 | ' for i=0 to 63 step 2
0a73c     00 02 06 F6 | 	mov	_var02, #0
0a740                 | LR__0880
0a740                 | '   do: loop until lpeek(base+32*7)>32768
0a740     57 00 00 FF 
0a744     00 E4 05 F1 | 	add	objptr, ##44544
0a748     97 0C 48 FB | 	callpa	#(@LR__0882-@LR__0881)>>2,fcache_load_ptr_
0a74c                 | LR__0881
0a74c     F2 12 02 FB | 	rdlong	arg01, objptr
0a750     E0 12 06 F1 | 	add	arg01, #224
0a754     09 FB 01 FB | 	rdlong	result1, arg01
0a758     40 00 00 FF 
0a75c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a760     E8 FF 9F CD |  if_b	jmp	#LR__0881
0a764                 | LR__0882
0a764     00 13 02 F6 | 	mov	arg01, _var01
0a768     01 05 02 F6 | 	mov	_var03, _var02
0a76c     02 04 66 F0 | 	shl	_var03, #2
0a770     02 13 02 F1 | 	add	arg01, _var03
0a774     09 07 02 FB | 	rdlong	_var04, arg01
0a778     24 00 00 FF 
0a77c     E4 E4 05 F1 | 	add	objptr, ##18660
0a780     F2 06 62 FC | 	wrlong	_var04, objptr
0a784     7B 00 00 FF 
0a788     E4 E4 85 F1 | 	sub	objptr, ##63204
0a78c                 | '   q=lpeek(address+4*i)
0a78c                 | '      for bit=0 to 31
0a78c     00 08 06 F6 | 	mov	_var05, #0
0a790     97 84 48 FB | 	callpa	#(@LR__0887-@LR__0883)>>2,fcache_load_ptr_
0a794                 | LR__0883
0a794                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a794     7B 00 00 FF 
0a798     E4 E4 05 F1 | 	add	objptr, ##63204
0a79c     F2 06 02 FB | 	rdlong	_var04, objptr
0a7a0     7B 00 00 FF 
0a7a4     E4 E4 85 F1 | 	sub	objptr, ##63204
0a7a8     04 05 C2 F9 | 	decod	_var03, _var05
0a7ac     02 07 CA F7 | 	test	_var04, _var03 wz
0a7b0     60 00 90 AD |  if_e	jmp	#LR__0884
0a7b4     04 05 02 F6 | 	mov	_var03, _var05
0a7b8     02 04 66 F0 | 	shl	_var03, #2
0a7bc     77 00 00 FF 
0a7c0     9C E4 05 F1 | 	add	objptr, ##61084
0a7c4     F2 04 02 F1 | 	add	_var03, objptr
0a7c8     02 FF 48 FC | 	wrbyte	#127, _var03
0a7cc     04 05 02 F6 | 	mov	_var03, _var05
0a7d0     02 04 66 F0 | 	shl	_var03, #2
0a7d4     01 04 06 F1 | 	add	_var03, #1
0a7d8     F2 04 02 F1 | 	add	_var03, objptr
0a7dc     02 01 49 FC | 	wrbyte	#128, _var03
0a7e0     04 05 02 F6 | 	mov	_var03, _var05
0a7e4     02 04 66 F0 | 	shl	_var03, #2
0a7e8     02 04 06 F1 | 	add	_var03, #2
0a7ec     F2 04 02 F1 | 	add	_var03, objptr
0a7f0     02 FF 48 FC | 	wrbyte	#127, _var03
0a7f4     04 05 02 F6 | 	mov	_var03, _var05
0a7f8     02 04 66 F0 | 	shl	_var03, #2
0a7fc     03 04 06 F1 | 	add	_var03, #3
0a800     F2 04 02 F1 | 	add	_var03, objptr
0a804     02 01 49 FC | 	wrbyte	#128, _var03
0a808     77 00 00 FF 
0a80c     9C E4 85 F1 | 	sub	objptr, ##61084
0a810     5C 00 90 FD | 	jmp	#LR__0885
0a814                 | LR__0884
0a814     04 05 02 F6 | 	mov	_var03, _var05
0a818     02 04 66 F0 | 	shl	_var03, #2
0a81c     77 00 00 FF 
0a820     9C E4 05 F1 | 	add	objptr, ##61084
0a824     F2 04 02 F1 | 	add	_var03, objptr
0a828     02 01 49 FC | 	wrbyte	#128, _var03
0a82c     04 05 02 F6 | 	mov	_var03, _var05
0a830     02 04 66 F0 | 	shl	_var03, #2
0a834     01 04 06 F1 | 	add	_var03, #1
0a838     F2 04 02 F1 | 	add	_var03, objptr
0a83c     02 01 49 FC | 	wrbyte	#128, _var03
0a840     04 05 02 F6 | 	mov	_var03, _var05
0a844     02 04 66 F0 | 	shl	_var03, #2
0a848     02 04 06 F1 | 	add	_var03, #2
0a84c     F2 04 02 F1 | 	add	_var03, objptr
0a850     02 FF 48 FC | 	wrbyte	#127, _var03
0a854     04 05 02 F6 | 	mov	_var03, _var05
0a858     02 04 66 F0 | 	shl	_var03, #2
0a85c     03 04 06 F1 | 	add	_var03, #3
0a860     F2 04 02 F1 | 	add	_var03, objptr
0a864     02 FF 48 FC | 	wrbyte	#127, _var03
0a868     77 00 00 FF 
0a86c     9C E4 85 F1 | 	sub	objptr, ##61084
0a870                 | LR__0885
0a870     01 08 06 F1 | 	add	_var05, #1
0a874     20 08 56 F2 | 	cmps	_var05, #32 wc
0a878     18 FF 9F CD |  if_b	jmp	#LR__0883
0a87c                 | '   do: loop until lpeek(base+32*7)<32768
0a87c     57 00 00 FF 
0a880     00 E4 05 F1 | 	add	objptr, ##44544
0a884                 | LR__0886
0a884     F2 12 02 FB | 	rdlong	arg01, objptr
0a888     E0 12 06 F1 | 	add	arg01, #224
0a88c     09 FB 01 FB | 	rdlong	result1, arg01
0a890     40 00 00 FF 
0a894     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a898     E8 FF 9F 3D |  if_ae	jmp	#LR__0886
0a89c                 | LR__0887
0a89c     00 13 02 F6 | 	mov	arg01, _var01
0a8a0     04 12 06 F1 | 	add	arg01, #4
0a8a4     01 05 02 F6 | 	mov	_var03, _var02
0a8a8     02 04 66 F0 | 	shl	_var03, #2
0a8ac     02 13 02 F1 | 	add	arg01, _var03
0a8b0     09 07 02 FB | 	rdlong	_var04, arg01
0a8b4     24 00 00 FF 
0a8b8     E4 E4 05 F1 | 	add	objptr, ##18660
0a8bc     F2 06 62 FC | 	wrlong	_var04, objptr
0a8c0     7B 00 00 FF 
0a8c4     E4 E4 85 F1 | 	sub	objptr, ##63204
0a8c8                 | '   q=lpeek(address+4+4*i)
0a8c8                 | '      for bit=0 to 31
0a8c8     00 08 06 F6 | 	mov	_var05, #0
0a8cc     97 94 48 FB | 	callpa	#(@LR__0891-@LR__0888)>>2,fcache_load_ptr_
0a8d0                 | LR__0888
0a8d0                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a8d0     7B 00 00 FF 
0a8d4     E4 E4 05 F1 | 	add	objptr, ##63204
0a8d8     F2 06 02 FB | 	rdlong	_var04, objptr
0a8dc     7B 00 00 FF 
0a8e0     E4 E4 85 F1 | 	sub	objptr, ##63204
0a8e4     04 05 C2 F9 | 	decod	_var03, _var05
0a8e8     02 07 CA F7 | 	test	_var04, _var03 wz
0a8ec     80 00 90 AD |  if_e	jmp	#LR__0889
0a8f0     04 0B 02 F6 | 	mov	_var06, _var05
0a8f4     02 0A 66 F0 | 	shl	_var06, #2
0a8f8     80 04 06 F6 | 	mov	_var03, #128
0a8fc     05 05 02 F1 | 	add	_var03, _var06
0a900     77 00 00 FF 
0a904     9C E4 05 F1 | 	add	objptr, ##61084
0a908     F2 04 02 F1 | 	add	_var03, objptr
0a90c     02 FF 48 FC | 	wrbyte	#127, _var03
0a910     04 0B 02 F6 | 	mov	_var06, _var05
0a914     02 0A 66 F0 | 	shl	_var06, #2
0a918     80 04 06 F6 | 	mov	_var03, #128
0a91c     05 05 02 F1 | 	add	_var03, _var06
0a920     01 04 06 F1 | 	add	_var03, #1
0a924     F2 04 02 F1 | 	add	_var03, objptr
0a928     02 01 49 FC | 	wrbyte	#128, _var03
0a92c     04 0B 02 F6 | 	mov	_var06, _var05
0a930     02 0A 66 F0 | 	shl	_var06, #2
0a934     80 04 06 F6 | 	mov	_var03, #128
0a938     05 05 02 F1 | 	add	_var03, _var06
0a93c     02 04 06 F1 | 	add	_var03, #2
0a940     F2 04 02 F1 | 	add	_var03, objptr
0a944     02 FF 48 FC | 	wrbyte	#127, _var03
0a948     04 0B 02 F6 | 	mov	_var06, _var05
0a94c     02 0A 66 F0 | 	shl	_var06, #2
0a950     80 04 06 F6 | 	mov	_var03, #128
0a954     05 05 02 F1 | 	add	_var03, _var06
0a958     03 04 06 F1 | 	add	_var03, #3
0a95c     F2 04 02 F1 | 	add	_var03, objptr
0a960     02 01 49 FC | 	wrbyte	#128, _var03
0a964     77 00 00 FF 
0a968     9C E4 85 F1 | 	sub	objptr, ##61084
0a96c     7C 00 90 FD | 	jmp	#LR__0890
0a970                 | LR__0889
0a970     04 0B 02 F6 | 	mov	_var06, _var05
0a974     02 0A 66 F0 | 	shl	_var06, #2
0a978     80 04 06 F6 | 	mov	_var03, #128
0a97c     05 05 02 F1 | 	add	_var03, _var06
0a980     77 00 00 FF 
0a984     9C E4 05 F1 | 	add	objptr, ##61084
0a988     F2 04 02 F1 | 	add	_var03, objptr
0a98c     02 01 49 FC | 	wrbyte	#128, _var03
0a990     04 0B 02 F6 | 	mov	_var06, _var05
0a994     02 0A 66 F0 | 	shl	_var06, #2
0a998     80 04 06 F6 | 	mov	_var03, #128
0a99c     05 05 02 F1 | 	add	_var03, _var06
0a9a0     01 04 06 F1 | 	add	_var03, #1
0a9a4     F2 04 02 F1 | 	add	_var03, objptr
0a9a8     02 01 49 FC | 	wrbyte	#128, _var03
0a9ac     04 0B 02 F6 | 	mov	_var06, _var05
0a9b0     02 0A 66 F0 | 	shl	_var06, #2
0a9b4     80 04 06 F6 | 	mov	_var03, #128
0a9b8     05 05 02 F1 | 	add	_var03, _var06
0a9bc     02 04 06 F1 | 	add	_var03, #2
0a9c0     F2 04 02 F1 | 	add	_var03, objptr
0a9c4     02 FF 48 FC | 	wrbyte	#127, _var03
0a9c8     04 0B 02 F6 | 	mov	_var06, _var05
0a9cc     02 0A 66 F0 | 	shl	_var06, #2
0a9d0     80 04 06 F6 | 	mov	_var03, #128
0a9d4     05 05 02 F1 | 	add	_var03, _var06
0a9d8     03 04 06 F1 | 	add	_var03, #3
0a9dc     F2 04 02 F1 | 	add	_var03, objptr
0a9e0     02 FF 48 FC | 	wrbyte	#127, _var03
0a9e4     77 00 00 FF 
0a9e8     9C E4 85 F1 | 	sub	objptr, ##61084
0a9ec                 | LR__0890
0a9ec     01 08 06 F1 | 	add	_var05, #1
0a9f0     20 08 56 F2 | 	cmps	_var05, #32 wc
0a9f4     D8 FE 9F CD |  if_b	jmp	#LR__0888
0a9f8                 | LR__0891
0a9f8     02 02 06 F1 | 	add	_var02, #2
0a9fc     40 02 56 F2 | 	cmps	_var02, #64 wc
0aa00     3C FD 9F CD |  if_b	jmp	#LR__0880
0aa04                 | ' do: loop until lpeek(base+32*7)>32768
0aa04     57 00 00 FF 
0aa08     00 E4 05 F1 | 	add	objptr, ##44544
0aa0c     97 84 48 FB | 	callpa	#(@LR__0900-@LR__0892)>>2,fcache_load_ptr_
0aa10                 | LR__0892
0aa10     F2 12 02 FB | 	rdlong	arg01, objptr
0aa14     E0 12 06 F1 | 	add	arg01, #224
0aa18     09 FB 01 FB | 	rdlong	result1, arg01
0aa1c     40 00 00 FF 
0aa20     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0aa24     E8 FF 9F CD |  if_b	jmp	#LR__0892
0aa28     57 00 00 FF 
0aa2c     00 E4 85 F1 | 	sub	objptr, ##44544
0aa30                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0aa30     00 02 06 F6 | 	mov	_var02, #0
0aa34                 | LR__0893
0aa34     01 07 52 F6 | 	abs	_var04, _var02 wc
0aa38     07 06 06 F5 | 	and	_var04, #7
0aa3c     03 07 82 F6 | 	negc	_var04, _var04
0aa40     04 06 56 F2 | 	cmps	_var04, #4 wc
0aa44     20 00 90 3D |  if_ae	jmp	#LR__0894
0aa48     01 0B 02 F6 | 	mov	_var06, _var02
0aa4c     77 00 00 FF 
0aa50     9C E4 05 F1 | 	add	objptr, ##61084
0aa54     F2 0A 02 F1 | 	add	_var06, objptr
0aa58     05 FF 48 FC | 	wrbyte	#127, _var06
0aa5c     77 00 00 FF 
0aa60     9C E4 85 F1 | 	sub	objptr, ##61084
0aa64     1C 00 90 FD | 	jmp	#LR__0895
0aa68                 | LR__0894
0aa68     01 0B 02 F6 | 	mov	_var06, _var02
0aa6c     77 00 00 FF 
0aa70     9C E4 05 F1 | 	add	objptr, ##61084
0aa74     F2 0A 02 F1 | 	add	_var06, objptr
0aa78     05 01 49 FC | 	wrbyte	#128, _var06
0aa7c     77 00 00 FF 
0aa80     9C E4 85 F1 | 	sub	objptr, ##61084
0aa84                 | LR__0895
0aa84     01 02 06 F1 | 	add	_var02, #1
0aa88     80 02 56 F2 | 	cmps	_var02, #128 wc
0aa8c     A4 FF 9F CD |  if_b	jmp	#LR__0893
0aa90                 | ' 
0aa90                 | ' do: loop until lpeek(base+32*7)<32768
0aa90     57 00 00 FF 
0aa94     00 E4 05 F1 | 	add	objptr, ##44544
0aa98                 | LR__0896
0aa98     F2 12 02 FB | 	rdlong	arg01, objptr
0aa9c     E0 12 06 F1 | 	add	arg01, #224
0aaa0     09 FB 01 FB | 	rdlong	result1, arg01
0aaa4     40 00 00 FF 
0aaa8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0aaac     E8 FF 9F 3D |  if_ae	jmp	#LR__0896
0aab0     57 00 00 FF 
0aab4     00 E4 85 F1 | 	sub	objptr, ##44544
0aab8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0aab8     80 02 06 F6 | 	mov	_var02, #128
0aabc                 | LR__0897
0aabc     01 07 52 F6 | 	abs	_var04, _var02 wc
0aac0     07 06 06 F5 | 	and	_var04, #7
0aac4     03 07 82 F6 | 	negc	_var04, _var04
0aac8     04 06 56 F2 | 	cmps	_var04, #4 wc
0aacc     20 00 90 3D |  if_ae	jmp	#LR__0898
0aad0     01 0B 02 F6 | 	mov	_var06, _var02
0aad4     77 00 00 FF 
0aad8     9C E4 05 F1 | 	add	objptr, ##61084
0aadc     F2 0A 02 F1 | 	add	_var06, objptr
0aae0     05 FF 48 FC | 	wrbyte	#127, _var06
0aae4     77 00 00 FF 
0aae8     9C E4 85 F1 | 	sub	objptr, ##61084
0aaec     1C 00 90 FD | 	jmp	#LR__0899
0aaf0                 | LR__0898
0aaf0     01 0B 02 F6 | 	mov	_var06, _var02
0aaf4     77 00 00 FF 
0aaf8     9C E4 05 F1 | 	add	objptr, ##61084
0aafc     F2 0A 02 F1 | 	add	_var06, objptr
0ab00     05 01 49 FC | 	wrbyte	#128, _var06
0ab04     77 00 00 FF 
0ab08     9C E4 85 F1 | 	sub	objptr, ##61084
0ab0c                 | LR__0899
0ab0c     01 02 06 F1 | 	add	_var02, #1
0ab10     00 03 16 F2 | 	cmp	_var02, #256 wc
0ab14     A4 FF 9F CD |  if_b	jmp	#LR__0897
0ab18                 | LR__0900
0ab18                 | _csave_block_ret
0ab18     2D 00 64 FD | 	ret
0ab1c                 | 
0ab1c                 | ' 
0ab1c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0ab1c                 | _csave_addtoblock
0ab1c     04 4A 05 F6 | 	mov	COUNT_, #4
0ab20     A8 00 A0 FD | 	call	#pushregs_
0ab24     09 1F 02 F6 | 	mov	local01, arg01
0ab28                 | ' 
0ab28                 | ' 
0ab28                 | ' if force=0 then
0ab28     07 14 4E F7 | 	zerox	arg02, #7 wz
0ab2c     78 00 90 5D |  if_ne	jmp	#LR__0910
0ab30     79 00 00 FF 
0ab34     9C E5 05 F1 | 	add	objptr, ##62364
0ab38     F2 14 02 FB | 	rdlong	arg02, objptr
0ab3c     02 00 00 FF 
0ab40     00 E4 85 F1 | 	sub	objptr, ##1024
0ab44     F2 14 02 F1 | 	add	arg02, objptr
0ab48     0A 1F 42 FC | 	wrbyte	local01, arg02
0ab4c     02 00 00 FF 
0ab50     00 E4 05 F1 | 	add	objptr, ##1024
0ab54     F2 1E 02 FB | 	rdlong	local01, objptr
0ab58     01 1E 06 F1 | 	add	local01, #1
0ab5c     F2 1E 62 FC | 	wrlong	local01, objptr
0ab60                 | '   block(blockptr)=d
0ab60                 | '   blockptr+=1
0ab60                 | '   if blockptr>=255 then
0ab60     79 00 00 FF 
0ab64     9C E5 85 F1 | 	sub	objptr, ##62364
0ab68     FF 1E 16 F2 | 	cmp	local01, #255 wc
0ab6c     E4 00 90 CD |  if_b	jmp	#LR__0914
0ab70     77 00 00 FF 
0ab74     9C E5 05 F1 | 	add	objptr, ##61340
0ab78     F2 12 02 F6 | 	mov	arg01, objptr
0ab7c     77 00 00 FF 
0ab80     9C E5 85 F1 | 	sub	objptr, ##61340
0ab84     B0 FB BF FD | 	call	#_csave_block
0ab88     79 00 00 FF 
0ab8c     9C E5 05 F1 | 	add	objptr, ##62364
0ab90     F2 00 68 FC | 	wrlong	#0, objptr
0ab94     79 00 00 FF 
0ab98     9C E5 85 F1 | 	sub	objptr, ##62364
0ab9c     2C 13 06 F6 | 	mov	arg01, #300
0aba0     88 3C B1 FD | 	call	#__system___waitms
0aba4     AC 00 90 FD | 	jmp	#LR__0914
0aba8                 | LR__0910
0aba8     79 00 00 FF 
0abac     9C E5 05 F1 | 	add	objptr, ##62364
0abb0     F2 20 02 FB | 	rdlong	local02, objptr
0abb4     02 00 00 FF 
0abb8     00 E4 85 F1 | 	sub	objptr, ##1024
0abbc     F2 20 02 F1 | 	add	local02, objptr
0abc0     10 1F 42 FC | 	wrbyte	local01, local02
0abc4                 | '   block(blockptr)=d
0abc4                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0abc4     02 00 00 FF 
0abc8     00 E4 05 F1 | 	add	objptr, ##1024
0abcc     F2 22 02 FB | 	rdlong	local03, objptr
0abd0     79 00 00 FF 
0abd4     9C E5 85 F1 | 	sub	objptr, ##62364
0abd8     FF 22 16 F2 | 	cmp	local03, #255 wc
0abdc     40 00 90 3D |  if_ae	jmp	#LR__0913
0abe0     79 00 00 FF 
0abe4     9C E5 05 F1 | 	add	objptr, ##62364
0abe8     F2 24 02 FB | 	rdlong	local04, objptr
0abec     79 00 00 FF 
0abf0     9C E5 85 F1 | 	sub	objptr, ##62364
0abf4                 | LR__0911
0abf4     00 25 56 F2 | 	cmps	local04, #256 wc
0abf8     24 00 90 3D |  if_ae	jmp	#LR__0912
0abfc     12 21 02 F6 | 	mov	local02, local04
0ac00     77 00 00 FF 
0ac04     9C E5 05 F1 | 	add	objptr, ##61340
0ac08     F2 20 02 F1 | 	add	local02, objptr
0ac0c     10 01 48 FC | 	wrbyte	#0, local02
0ac10     01 24 06 F1 | 	add	local04, #1
0ac14     77 00 00 FF 
0ac18     9C E5 85 F1 | 	sub	objptr, ##61340
0ac1c     D4 FF 9F FD | 	jmp	#LR__0911
0ac20                 | LR__0912
0ac20                 | LR__0913
0ac20     77 00 00 FF 
0ac24     9C E5 05 F1 | 	add	objptr, ##61340
0ac28     F2 12 02 F6 | 	mov	arg01, objptr
0ac2c     77 00 00 FF 
0ac30     9C E5 85 F1 | 	sub	objptr, ##61340
0ac34     00 FB BF FD | 	call	#_csave_block
0ac38     79 00 00 FF 
0ac3c     9C E5 05 F1 | 	add	objptr, ##62364
0ac40     F2 00 68 FC | 	wrlong	#0, objptr
0ac44     79 00 00 FF 
0ac48     9C E5 85 F1 | 	sub	objptr, ##62364
0ac4c     2C 13 06 F6 | 	mov	arg01, #300
0ac50     D8 3B B1 FD | 	call	#__system___waitms
0ac54                 | LR__0914
0ac54     A7 F0 03 F6 | 	mov	ptra, fp
0ac58     B2 00 A0 FD | 	call	#popregs_
0ac5c                 | _csave_addtoblock_ret
0ac5c     2D 00 64 FD | 	ret
0ac60                 | 
0ac60                 | ' 
0ac60                 | ' sub test_csave
0ac60                 | _test_csave
0ac60     04 4A 05 F6 | 	mov	COUNT_, #4
0ac64     A8 00 A0 FD | 	call	#pushregs_
0ac68     C0 F0 07 F1 | 	add	ptra, #192
0ac6c                 | ' 'dim fileheader,savestart, saveptr as ulong
0ac6c                 | ' 
0ac6c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ac6c     6A 00 00 FF 
0ac70     74 E4 05 F1 | 	add	objptr, ##54388
0ac74     F2 12 02 FB | 	rdlong	arg01, objptr
0ac78     6A 00 00 FF 
0ac7c     74 E4 85 F1 | 	sub	objptr, ##54388
0ac80     E8 F6 B0 FD | 	call	#_pslpeek
0ac84     FF FF 7F FF 
0ac88     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0ac8c     0C 00 90 5D |  if_ne	jmp	#LR__0920
0ac90     1B 12 06 F6 | 	mov	arg01, #27
0ac94     44 F4 B0 FD | 	call	#_printerror
0ac98     1C 03 90 FD | 	jmp	#LR__0934
0ac9c                 | LR__0920
0ac9c     04 F8 BF FD | 	call	#_pop
0aca0     90 4E 05 F1 | 	add	fp, #144
0aca4     A7 FA 61 FC | 	wrlong	result1, fp
0aca8     04 4E 05 F1 | 	add	fp, #4
0acac     A7 FC 61 FC | 	wrlong	result2, fp
0acb0     04 4E 05 F1 | 	add	fp, #4
0acb4     A7 FE 61 FC | 	wrlong	result3, fp
0acb8                 | ' t1=pop()
0acb8                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0acb8     98 4E 85 F1 | 	sub	fp, #152
0acbc     1F FE 0D F2 | 	cmp	result3, #31 wz
0acc0     24 00 90 AD |  if_e	jmp	#LR__0921
0acc4     7B 00 00 FF 
0acc8     94 E4 05 F1 | 	add	objptr, ##63124
0accc     F2 1C 02 FB | 	rdlong	arg06, objptr
0acd0     7B 00 00 FF 
0acd4     94 E4 85 F1 | 	sub	objptr, ##63124
0acd8     8C 4E 05 F1 | 	add	fp, #140
0acdc     A7 1C 62 FC | 	wrlong	arg06, fp
0ace0     8C 4E 85 F1 | 	sub	fp, #140
0ace4     14 00 90 FD | 	jmp	#LR__0922
0ace8                 | LR__0921
0ace8     90 4E 05 F1 | 	add	fp, #144
0acec     A7 1C 02 FB | 	rdlong	arg06, fp
0acf0     04 4E 85 F1 | 	sub	fp, #4
0acf4     A7 1C 62 FC | 	wrlong	arg06, fp
0acf8     8C 4E 85 F1 | 	sub	fp, #140
0acfc                 | LR__0922
0acfc                 | ' 
0acfc                 | ' ' prepare 1 kHz header wave
0acfc                 | ' 
0acfc                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0acfc     A7 00 68 FC | 	wrlong	#0, fp
0ad00     97 34 48 FB | 	callpa	#(@LR__0926-@LR__0923)>>2,fcache_load_ptr_
0ad04                 | LR__0923
0ad04     A7 1C 02 FB | 	rdlong	arg06, fp
0ad08     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0ad0c     07 1A 06 F5 | 	and	arg05, #7
0ad10     0D 1B 82 F6 | 	negc	arg05, arg05
0ad14     04 1A 56 F2 | 	cmps	arg05, #4 wc
0ad18     20 00 90 3D |  if_ae	jmp	#LR__0924
0ad1c     A7 1A 02 FB | 	rdlong	arg05, fp
0ad20     77 00 00 FF 
0ad24     9C E4 05 F1 | 	add	objptr, ##61084
0ad28     F2 1A 02 F1 | 	add	arg05, objptr
0ad2c     0D FF 48 FC | 	wrbyte	#127, arg05
0ad30     77 00 00 FF 
0ad34     9C E4 85 F1 | 	sub	objptr, ##61084
0ad38     1C 00 90 FD | 	jmp	#LR__0925
0ad3c                 | LR__0924
0ad3c     A7 1A 02 FB | 	rdlong	arg05, fp
0ad40     77 00 00 FF 
0ad44     9C E4 05 F1 | 	add	objptr, ##61084
0ad48     F2 1A 02 F1 | 	add	arg05, objptr
0ad4c     0D 01 49 FC | 	wrbyte	#128, arg05
0ad50     77 00 00 FF 
0ad54     9C E4 85 F1 | 	sub	objptr, ##61084
0ad58                 | LR__0925
0ad58     A7 1A 02 FB | 	rdlong	arg05, fp
0ad5c     01 1A 06 F1 | 	add	arg05, #1
0ad60     A7 1A 62 FC | 	wrlong	arg05, fp
0ad64     00 1B 56 F2 | 	cmps	arg05, #256 wc
0ad68     98 FF 9F CD |  if_b	jmp	#LR__0923
0ad6c                 | LR__0926
0ad6c     77 00 00 FF 
0ad70     9C E4 05 F1 | 	add	objptr, ##61084
0ad74     F2 14 02 F6 | 	mov	arg02, objptr
0ad78     07 12 06 F6 | 	mov	arg01, #7
0ad7c     0F 00 00 FF 
0ad80     40 17 06 F6 | 	mov	arg03, ##8000
0ad84     0E 18 C6 F9 | 	decod	arg04, #14
0ad88     00 1B 06 F6 | 	mov	arg05, #256
0ad8c     00 1C 06 F6 | 	mov	arg06, #0
0ad90     6B 00 00 FF 
0ad94     D0 E5 85 F1 | 	sub	objptr, ##55248
0ad98     E8 33 B1 FD | 	call	#_audio096_spin2_play8
0ad9c     0B 00 00 FF 
0ada0     CC E4 85 F1 | 	sub	objptr, ##5836
0ada4     05 00 00 FF 
0ada8     B8 13 06 F6 | 	mov	arg01, ##3000
0adac     7C 3A B1 FD | 	call	#__system___waitms
0adb0     79 00 00 FF 
0adb4     9C E5 05 F1 | 	add	objptr, ##62364
0adb8     F2 00 68 FC | 	wrlong	#0, objptr
0adbc     79 00 00 FF 
0adc0     9C E5 85 F1 | 	sub	objptr, ##62364
0adc4     72 12 06 F6 | 	mov	arg01, #114
0adc8     00 14 06 F6 | 	mov	arg02, #0
0adcc     4C FD BF FD | 	call	#_csave_addtoblock
0add0     62 12 06 F6 | 	mov	arg01, #98
0add4     00 14 06 F6 | 	mov	arg02, #0
0add8     40 FD BF FD | 	call	#_csave_addtoblock
0addc     61 12 06 F6 | 	mov	arg01, #97
0ade0     00 14 06 F6 | 	mov	arg02, #0
0ade4     34 FD BF FD | 	call	#_csave_addtoblock
0ade8     0D 12 06 F6 | 	mov	arg01, #13
0adec     00 14 06 F6 | 	mov	arg02, #0
0adf0     28 FD BF FD | 	call	#_csave_addtoblock
0adf4                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0adf4                 | ' waitms 3000 
0adf4                 | ' 
0adf4                 | ' blockptr=0
0adf4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0adf4                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0adf4     A7 02 68 FC | 	wrlong	#1, fp
0adf8     8C 4E 05 F1 | 	add	fp, #140
0adfc     A7 12 02 FB | 	rdlong	arg01, fp
0ae00     8C 4E 85 F1 | 	sub	fp, #140
0ae04     09 1F 02 F6 | 	mov	local01, arg01
0ae08     97 06 48 FB | 	callpa	#(@LR__0928-@LR__0927)>>2,fcache_load_ptr_
0ae0c                 | LR__0927
0ae0c     0F FB C9 FA | 	rdbyte	result1, local01 wz
0ae10     01 1E 06 51 |  if_ne	add	local01, #1
0ae14     F4 FF 9F 5D |  if_ne	jmp	#LR__0927
0ae18                 | LR__0928
0ae18     09 1F 82 F1 | 	sub	local01, arg01
0ae1c     0F 21 02 F6 | 	mov	local02, local01
0ae20     01 20 06 F1 | 	add	local02, #1
0ae24                 | LR__0929
0ae24     A7 1A 02 FB | 	rdlong	arg05, fp
0ae28     10 1B 52 F2 | 	cmps	arg05, local02 wc
0ae2c     34 00 90 3D |  if_ae	jmp	#LR__0930
0ae30     8C 4E 05 F1 | 	add	fp, #140
0ae34     A7 12 02 FB | 	rdlong	arg01, fp
0ae38     8C 4E 85 F1 | 	sub	fp, #140
0ae3c     A7 14 02 FB | 	rdlong	arg02, fp
0ae40     01 16 06 F6 | 	mov	arg03, #1
0ae44     4C 58 B1 FD | 	call	#__system__Mid_S
0ae48     FD 12 C2 FA | 	rdbyte	arg01, result1
0ae4c     00 14 06 F6 | 	mov	arg02, #0
0ae50     C8 FC BF FD | 	call	#_csave_addtoblock
0ae54     A7 1A 02 FB | 	rdlong	arg05, fp
0ae58     01 1A 06 F1 | 	add	arg05, #1
0ae5c     A7 1A 62 FC | 	wrlong	arg05, fp
0ae60     C0 FF 9F FD | 	jmp	#LR__0929
0ae64                 | LR__0930
0ae64     00 12 06 F6 | 	mov	arg01, #0
0ae68     00 14 06 F6 | 	mov	arg02, #0
0ae6c     AC FC BF FD | 	call	#_csave_addtoblock
0ae70     72 12 06 F6 | 	mov	arg01, #114
0ae74     00 14 06 F6 | 	mov	arg02, #0
0ae78     A0 FC BF FD | 	call	#_csave_addtoblock
0ae7c     62 12 06 F6 | 	mov	arg01, #98
0ae80     00 14 06 F6 | 	mov	arg02, #0
0ae84     94 FC BF FD | 	call	#_csave_addtoblock
0ae88     73 12 06 F6 | 	mov	arg01, #115
0ae8c     00 14 06 F6 | 	mov	arg02, #0
0ae90     88 FC BF FD | 	call	#_csave_addtoblock
0ae94     0D 12 06 F6 | 	mov	arg01, #13
0ae98     00 14 06 F6 | 	mov	arg02, #0
0ae9c     7C FC BF FD | 	call	#_csave_addtoblock
0aea0     6A 00 00 FF 
0aea4     74 E4 05 F1 | 	add	objptr, ##54388
0aea8     F2 22 02 FB | 	rdlong	local03, objptr
0aeac     6A 00 00 FF 
0aeb0     74 E4 85 F1 | 	sub	objptr, ##54388
0aeb4     9C 4E 05 F1 | 	add	fp, #156
0aeb8     A7 22 62 FC | 	wrlong	local03, fp
0aebc     9C 4E 85 F1 | 	sub	fp, #156
0aec0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0aec0                 | ' 
0aec0                 | ' saveptr=programstart
0aec0                 | ' do
0aec0                 | LR__0931
0aec0     A0 4E 05 F1 | 	add	fp, #160
0aec4     A7 12 02 F6 | 	mov	arg01, fp
0aec8     04 4E 85 F1 | 	sub	fp, #4
0aecc     A7 14 02 FB | 	rdlong	arg02, fp
0aed0     9C 4E 85 F1 | 	sub	fp, #156
0aed4     18 16 06 F6 | 	mov	arg03, #24
0aed8     0B 00 00 FF 
0aedc     CC E4 05 F1 | 	add	objptr, ##5836
0aee0     30 2A B1 FD | 	call	#_psram_spin2_read1
0aee4     0C 4E 05 F1 | 	add	fp, #12
0aee8     A7 12 02 F6 | 	mov	arg01, fp
0aeec     9C 4E 05 F1 | 	add	fp, #156
0aef0     A7 14 02 FB | 	rdlong	arg02, fp
0aef4     04 4E 05 F1 | 	add	fp, #4
0aef8     A7 16 02 FB | 	rdlong	arg03, fp
0aefc     AC 4E 85 F1 | 	sub	fp, #172
0af00     10 2A B1 FD | 	call	#_psram_spin2_read1
0af04     0B 00 00 FF 
0af08     CC E4 85 F1 | 	sub	objptr, ##5836
0af0c     AC 4E 05 F1 | 	add	fp, #172
0af10     A7 12 02 FB | 	rdlong	arg01, fp
0af14     AC 4E 85 F1 | 	sub	fp, #172
0af18     00 14 06 F6 | 	mov	arg02, #0
0af1c     FC FB BF FD | 	call	#_csave_addtoblock
0af20                 | '   psram.read1(varptr(header(0)),saveptr,24)
0af20                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0af20                 | '   csave_addtoblock(header(3),0) ' that's always <255
0af20                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0af20     A7 00 68 FC | 	wrlong	#0, fp
0af24     AC 4E 05 F1 | 	add	fp, #172
0af28     A7 24 02 FB | 	rdlong	local04, fp
0af2c     AC 4E 85 F1 | 	sub	fp, #172
0af30                 | LR__0932
0af30     A7 22 02 FB | 	rdlong	local03, fp
0af34     12 23 52 F2 | 	cmps	local03, local04 wc
0af38     2C 00 90 3D |  if_ae	jmp	#LR__0933
0af3c     A7 22 02 FB | 	rdlong	local03, fp
0af40     0C 4E 05 F1 | 	add	fp, #12
0af44     A7 22 02 F1 | 	add	local03, fp
0af48     11 13 C2 FA | 	rdbyte	arg01, local03
0af4c     00 14 06 F6 | 	mov	arg02, #0
0af50     0C 4E 85 F1 | 	sub	fp, #12
0af54     C4 FB BF FD | 	call	#_csave_addtoblock
0af58     A7 22 02 FB | 	rdlong	local03, fp
0af5c     01 22 06 F1 | 	add	local03, #1
0af60     A7 22 62 FC | 	wrlong	local03, fp
0af64     C8 FF 9F FD | 	jmp	#LR__0932
0af68                 | LR__0933
0af68     B4 4E 05 F1 | 	add	fp, #180
0af6c     A7 22 02 FB | 	rdlong	local03, fp
0af70     18 4E 85 F1 | 	sub	fp, #24
0af74     A7 22 62 FC | 	wrlong	local03, fp
0af78     18 4E 05 F1 | 	add	fp, #24
0af7c     A7 22 02 FB | 	rdlong	local03, fp
0af80     B4 4E 85 F1 | 	sub	fp, #180
0af84     FF FF 3F FF 
0af88     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0af8c     30 FF 9F 5D |  if_ne	jmp	#LR__0931
0af90     00 12 06 F6 | 	mov	arg01, #0
0af94     01 14 06 F6 | 	mov	arg02, #1
0af98     80 FB BF FD | 	call	#_csave_addtoblock
0af9c     57 00 00 FF 
0afa0     00 E4 05 F1 | 	add	objptr, ##44544
0afa4     F2 12 02 FB | 	rdlong	arg01, objptr
0afa8     57 00 00 FF 
0afac     00 E4 85 F1 | 	sub	objptr, ##44544
0afb0     F4 12 06 F1 | 	add	arg01, #244
0afb4     09 01 58 FC | 	wrword	#0, arg01
0afb8                 | LR__0934
0afb8     A7 F0 03 F6 | 	mov	ptra, fp
0afbc     B2 00 A0 FD | 	call	#popregs_
0afc0                 | _test_csave_ret
0afc0     2D 00 64 FD | 	ret
0afc4                 | 
0afc4                 | ' 
0afc4                 | ' ' ----------------- Save the program
0afc4                 | ' 
0afc4                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0afc4                 | _do_save
0afc4     04 4A 05 F6 | 	mov	COUNT_, #4
0afc8     A8 00 A0 FD | 	call	#pushregs_
0afcc     01 00 00 FF 
0afd0     C0 F0 07 F1 | 	add	ptra, ##704
0afd4     6A 00 00 FF 
0afd8     70 E4 05 F1 | 	add	objptr, ##54384
0afdc     F2 1E 02 FB | 	rdlong	local01, objptr
0afe0     0F 21 02 F6 | 	mov	local02, local01
0afe4     01 20 66 F0 | 	shl	local02, #1
0afe8     0F 21 02 F1 | 	add	local02, local01
0afec     02 20 66 F0 | 	shl	local02, #2
0aff0     03 00 00 FF 
0aff4     04 E4 85 F1 | 	sub	objptr, ##1540
0aff8     F2 20 02 F1 | 	add	local02, objptr
0affc     10 23 02 FB | 	rdlong	local03, local02
0b000     01 00 00 FF 
0b004     10 4E 05 F1 | 	add	fp, ##528
0b008     A7 22 62 FC | 	wrlong	local03, fp
0b00c                 | ' 
0b00c                 | ' numpar=compiledline(lineptr_e).result.uresult
0b00c                 | ' 
0b00c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b00c     01 00 00 FF 
0b010     10 4E 85 F1 | 	sub	fp, ##528
0b014     01 22 56 F2 | 	cmps	local03, #1 wc
0b018     67 00 00 FF 
0b01c     6C E4 85 F1 | 	sub	objptr, ##52844
0b020     20 00 90 CD |  if_b	jmp	#LR__0940
0b024     7C F4 BF FD | 	call	#_pop
0b028     A7 FA 61 FC | 	wrlong	result1, fp
0b02c     04 4E 05 F1 | 	add	fp, #4
0b030     A7 FC 61 FC | 	wrlong	result2, fp
0b034     04 4E 05 F1 | 	add	fp, #4
0b038     A7 FE 61 FC | 	wrlong	result3, fp
0b03c     08 4E 85 F1 | 	sub	fp, #8
0b040     24 00 90 FD | 	jmp	#LR__0941
0b044                 | LR__0940
0b044     7B 00 00 FF 
0b048     94 E4 05 F1 | 	add	objptr, ##63124
0b04c     F2 22 02 FB | 	rdlong	local03, objptr
0b050     7B 00 00 FF 
0b054     94 E4 85 F1 | 	sub	objptr, ##63124
0b058     A7 22 62 FC | 	wrlong	local03, fp
0b05c     08 4E 05 F1 | 	add	fp, #8
0b060     A7 3E 68 FC | 	wrlong	#31, fp
0b064     08 4E 85 F1 | 	sub	fp, #8
0b068                 | LR__0941
0b068                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b068     6A 00 00 FF 
0b06c     74 E4 05 F1 | 	add	objptr, ##54388
0b070     F2 12 02 FB | 	rdlong	arg01, objptr
0b074     6A 00 00 FF 
0b078     74 E4 85 F1 | 	sub	objptr, ##54388
0b07c     EC F2 B0 FD | 	call	#_pslpeek
0b080     FF FF 7F FF 
0b084     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b088     0C 00 90 5D |  if_ne	jmp	#LR__0942
0b08c     1B 12 06 F6 | 	mov	arg01, #27
0b090     48 F0 B0 FD | 	call	#_printerror
0b094     1C 03 90 FD | 	jmp	#LR__0948
0b098                 | LR__0942
0b098                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0b098     08 4E 05 F1 | 	add	fp, #8
0b09c     A7 22 02 FB | 	rdlong	local03, fp
0b0a0     08 4E 85 F1 | 	sub	fp, #8
0b0a4     2B 22 0E F2 | 	cmp	local03, #43 wz
0b0a8     18 00 90 5D |  if_ne	jmp	#LR__0943
0b0ac     A7 12 02 FB | 	rdlong	arg01, fp
0b0b0     98 36 B0 FD | 	call	#_convertstring
0b0b4     A7 FA 61 FC | 	wrlong	result1, fp
0b0b8     08 4E 05 F1 | 	add	fp, #8
0b0bc     A7 3E 68 FC | 	wrlong	#31, fp
0b0c0     08 4E 85 F1 | 	sub	fp, #8
0b0c4                 | LR__0943
0b0c4                 | ' if t1.result_type=result_string then
0b0c4     08 4E 05 F1 | 	add	fp, #8
0b0c8     A7 22 02 FB | 	rdlong	local03, fp
0b0cc     08 4E 85 F1 | 	sub	fp, #8
0b0d0     1F 22 0E F2 | 	cmp	local03, #31 wz
0b0d4     DC 02 90 5D |  if_ne	jmp	#LR__0947
0b0d8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b0d8     A7 12 02 FB | 	rdlong	arg01, fp
0b0dc     70 01 00 FF 
0b0e0     EA 14 06 F6 | 	mov	arg02, ##@LR__5073
0b0e4     78 34 B1 FD | 	call	#__system___string_cmp
0b0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b0ec     7B 00 00 AF 
0b0f0     94 E4 05 A1 |  if_e	add	objptr, ##63124
0b0f4     F2 22 02 AB |  if_e	rdlong	local03, objptr
0b0f8     A7 22 62 AC |  if_e	wrlong	local03, fp
0b0fc     7B 00 00 AF 
0b100     94 E4 85 A1 |  if_e	sub	objptr, ##63124
0b104     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b108     7B 00 00 5F 
0b10c     94 E4 05 51 |  if_ne	add	objptr, ##63124
0b110     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0b114     7B 00 00 5F 
0b118     94 E4 85 51 |  if_ne	sub	objptr, ##63124
0b11c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0b11c     09 12 06 F6 | 	mov	arg01, #9
0b120     D8 83 B1 FD | 	call	#__system__close
0b124     09 22 06 F6 | 	mov	local03, #9
0b128     72 00 00 FF 
0b12c     84 E4 05 F1 | 	add	objptr, ##58500
0b130     F2 12 02 FB | 	rdlong	arg01, objptr
0b134     72 00 00 FF 
0b138     84 E4 85 F1 | 	sub	objptr, ##58500
0b13c     70 01 00 FF 
0b140     EB 14 06 F6 | 	mov	arg02, ##@LR__5074
0b144     4C 34 B1 FD | 	call	#__system___string_concat
0b148     FD 12 02 F6 | 	mov	arg01, result1
0b14c     A7 14 02 FB | 	rdlong	arg02, fp
0b150     40 34 B1 FD | 	call	#__system___string_concat
0b154     FD 14 02 F6 | 	mov	arg02, result1
0b158     11 13 02 F6 | 	mov	arg01, local03
0b15c     0D 16 06 F6 | 	mov	arg03, #13
0b160     D4 3F B1 FD | 	call	#__system___basic_open_string
0b164     01 00 00 FF 
0b168     0C 4E 05 F1 | 	add	fp, ##524
0b16c     A7 0A 68 FC | 	wrlong	#5, fp
0b170     6A 00 00 FF 
0b174     74 E4 05 F1 | 	add	objptr, ##54388
0b178     F2 22 02 FB | 	rdlong	local03, objptr
0b17c     6A 00 00 FF 
0b180     74 E4 85 F1 | 	sub	objptr, ##54388
0b184     10 4E 05 F1 | 	add	fp, #16
0b188     A7 22 62 FC | 	wrlong	local03, fp
0b18c     01 00 00 FF 
0b190     1C 4E 85 F1 | 	sub	fp, ##540
0b194                 | ' '  put #9,1,fileheader,1
0b194                 | '   i=5
0b194                 | '   saveptr=programstart
0b194                 | '   do
0b194                 | LR__0944
0b194     01 00 00 FF 
0b198     20 4E 05 F1 | 	add	fp, ##544
0b19c     A7 12 02 F6 | 	mov	arg01, fp
0b1a0     04 4E 85 F1 | 	sub	fp, #4
0b1a4     A7 14 02 FB | 	rdlong	arg02, fp
0b1a8     01 00 00 FF 
0b1ac     1C 4E 85 F1 | 	sub	fp, ##540
0b1b0     18 16 06 F6 | 	mov	arg03, #24
0b1b4     0B 00 00 FF 
0b1b8     CC E4 05 F1 | 	add	objptr, ##5836
0b1bc     54 27 B1 FD | 	call	#_psram_spin2_read1
0b1c0     01 00 00 FF 
0b1c4     38 4E 05 F1 | 	add	fp, ##568
0b1c8     A7 12 02 F6 | 	mov	arg01, fp
0b1cc     10 4E 85 F1 | 	sub	fp, #16
0b1d0     A7 14 02 FB | 	rdlong	arg02, fp
0b1d4     04 4E 05 F1 | 	add	fp, #4
0b1d8     A7 16 02 FB | 	rdlong	arg03, fp
0b1dc     01 00 00 FF 
0b1e0     2C 4E 85 F1 | 	sub	fp, ##556
0b1e4     2C 27 B1 FD | 	call	#_psram_spin2_read1
0b1e8     0B 00 00 FF 
0b1ec     CC E4 85 F1 | 	sub	objptr, ##5836
0b1f0     70 01 00 FF 
0b1f4     ED 22 06 F6 | 	mov	local03, ##@LR__5075
0b1f8     01 00 00 FF 
0b1fc     B8 4E 05 F1 | 	add	fp, ##696
0b200     A7 22 62 FC | 	wrlong	local03, fp
0b204                 | '     psram.read1(varptr(header(0)),saveptr,24)
0b204                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0b204                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0b204     AC 4E 85 F1 | 	sub	fp, #172
0b208     A7 02 68 FC | 	wrlong	#1, fp
0b20c     20 4E 05 F1 | 	add	fp, #32
0b210     A7 24 02 FB | 	rdlong	local04, fp
0b214     01 00 00 FF 
0b218     2C 4E 85 F1 | 	sub	fp, ##556
0b21c     01 24 06 F1 | 	add	local04, #1
0b220                 | LR__0945
0b220     01 00 00 FF 
0b224     0C 4E 05 F1 | 	add	fp, ##524
0b228     A7 22 02 FB | 	rdlong	local03, fp
0b22c     01 00 00 FF 
0b230     0C 4E 85 F1 | 	sub	fp, ##524
0b234     12 23 52 F2 | 	cmps	local03, local04 wc
0b238     64 00 90 3D |  if_ae	jmp	#LR__0946
0b23c     01 00 00 FF 
0b240     B8 4E 05 F1 | 	add	fp, ##696
0b244     A7 1E 02 FB | 	rdlong	local01, fp
0b248     AC 4E 85 F1 | 	sub	fp, #172
0b24c     A7 22 02 FB | 	rdlong	local03, fp
0b250     01 22 86 F1 | 	sub	local03, #1
0b254     2C 4E 05 F1 | 	add	fp, #44
0b258     A7 22 02 F1 | 	add	local03, fp
0b25c     11 13 C2 FA | 	rdbyte	arg01, local03
0b260     01 00 00 FF 
0b264     38 4E 85 F1 | 	sub	fp, ##568
0b268     D4 54 B1 FD | 	call	#__system__Chr_S
0b26c     FD 14 02 F6 | 	mov	arg02, result1
0b270     0F 13 02 F6 | 	mov	arg01, local01
0b274     1C 33 B1 FD | 	call	#__system___string_concat
0b278     01 00 00 FF 
0b27c     B8 4E 05 F1 | 	add	fp, ##696
0b280     A7 FA 61 FC | 	wrlong	result1, fp
0b284     AC 4E 85 F1 | 	sub	fp, #172
0b288     A7 22 02 FB | 	rdlong	local03, fp
0b28c     01 22 06 F1 | 	add	local03, #1
0b290     A7 22 62 FC | 	wrlong	local03, fp
0b294     01 00 00 FF 
0b298     0C 4E 85 F1 | 	sub	fp, ##524
0b29c     80 FF 9F FD | 	jmp	#LR__0945
0b2a0                 | LR__0946
0b2a0                 | '  '   put #9,i,header(3),1 : i+=4
0b2a0                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0b2a0                 | '      print #9, saveline$
0b2a0     09 12 06 F6 | 	mov	arg01, #9
0b2a4     24 8C B1 FD | 	call	#__system___getiolock_0475
0b2a8     FD 12 02 F6 | 	mov	arg01, result1
0b2ac     88 32 B1 FD | 	call	#__system___lockmem
0b2b0     01 00 00 FF 
0b2b4     B8 4E 05 F1 | 	add	fp, ##696
0b2b8     A7 14 02 FB | 	rdlong	arg02, fp
0b2bc     01 00 00 FF 
0b2c0     B8 4E 85 F1 | 	sub	fp, ##696
0b2c4     09 12 06 F6 | 	mov	arg01, #9
0b2c8     00 16 06 F6 | 	mov	arg03, #0
0b2cc     6C 3F B1 FD | 	call	#__system___basic_print_string
0b2d0     09 12 06 F6 | 	mov	arg01, #9
0b2d4     0A 14 06 F6 | 	mov	arg02, #10
0b2d8     00 16 06 F6 | 	mov	arg03, #0
0b2dc     04 3F B1 FD | 	call	#__system___basic_print_char
0b2e0     09 12 06 F6 | 	mov	arg01, #9
0b2e4     E4 8B B1 FD | 	call	#__system___getiolock_0475
0b2e8     FD 00 68 FC | 	wrlong	#0, result1
0b2ec     01 00 00 FF 
0b2f0     34 4E 05 F1 | 	add	fp, ##564
0b2f4     A7 22 02 FB | 	rdlong	local03, fp
0b2f8     18 4E 85 F1 | 	sub	fp, #24
0b2fc     A7 22 62 FC | 	wrlong	local03, fp
0b300     18 4E 05 F1 | 	add	fp, #24
0b304     A7 22 02 FB | 	rdlong	local03, fp
0b308     01 00 00 FF 
0b30c     34 4E 85 F1 | 	sub	fp, ##564
0b310     FF FF 3F FF 
0b314     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b318     78 FE 9F 5D |  if_ne	jmp	#LR__0944
0b31c                 | '   close #9  
0b31c     09 12 06 F6 | 	mov	arg01, #9
0b320     D8 81 B1 FD | 	call	#__system__close
0b324                 | '   print "Saved as ";currentdir$+"/"+loadname
0b324     00 12 06 F6 | 	mov	arg01, #0
0b328     A0 8B B1 FD | 	call	#__system___getiolock_0475
0b32c     FD 12 02 F6 | 	mov	arg01, result1
0b330     04 32 B1 FD | 	call	#__system___lockmem
0b334     70 01 00 FF 
0b338     EE 14 06 F6 | 	mov	arg02, ##@LR__5076
0b33c     00 12 06 F6 | 	mov	arg01, #0
0b340     00 16 06 F6 | 	mov	arg03, #0
0b344     F4 3E B1 FD | 	call	#__system___basic_print_string
0b348     00 20 06 F6 | 	mov	local02, #0
0b34c     72 00 00 FF 
0b350     84 E4 05 F1 | 	add	objptr, ##58500
0b354     F2 12 02 FB | 	rdlong	arg01, objptr
0b358     72 00 00 FF 
0b35c     84 E4 85 F1 | 	sub	objptr, ##58500
0b360     70 01 00 FF 
0b364     F8 14 06 F6 | 	mov	arg02, ##@LR__5077
0b368     28 32 B1 FD | 	call	#__system___string_concat
0b36c     FD 12 02 F6 | 	mov	arg01, result1
0b370     7B 00 00 FF 
0b374     94 E4 05 F1 | 	add	objptr, ##63124
0b378     F2 14 02 FB | 	rdlong	arg02, objptr
0b37c     7B 00 00 FF 
0b380     94 E4 85 F1 | 	sub	objptr, ##63124
0b384     0C 32 B1 FD | 	call	#__system___string_concat
0b388     FD 14 02 F6 | 	mov	arg02, result1
0b38c     10 13 02 F6 | 	mov	arg01, local02
0b390     00 16 06 F6 | 	mov	arg03, #0
0b394     A4 3E B1 FD | 	call	#__system___basic_print_string
0b398     00 12 06 F6 | 	mov	arg01, #0
0b39c     0A 14 06 F6 | 	mov	arg02, #10
0b3a0     00 16 06 F6 | 	mov	arg03, #0
0b3a4     3C 3E B1 FD | 	call	#__system___basic_print_char
0b3a8     00 12 06 F6 | 	mov	arg01, #0
0b3ac     1C 8B B1 FD | 	call	#__system___getiolock_0475
0b3b0     FD 00 68 FC | 	wrlong	#0, result1
0b3b4                 | LR__0947
0b3b4                 | LR__0948
0b3b4     A7 F0 03 F6 | 	mov	ptra, fp
0b3b8     B2 00 A0 FD | 	call	#popregs_
0b3bc                 | _do_save_ret
0b3bc     2D 00 64 FD | 	ret
0b3c0                 | 
0b3c0                 | ' 
0b3c0                 | ' '----------------- Load the program
0b3c0                 | ' 'lo todo: errors while loading
0b3c0                 | ' sub do_load
0b3c0                 | _do_load
0b3c0     01 4A 05 F6 | 	mov	COUNT_, #1
0b3c4     A8 00 A0 FD | 	call	#pushregs_
0b3c8     A8 F0 07 F1 | 	add	ptra, #168
0b3cc     6A 00 00 FF 
0b3d0     70 E4 05 F1 | 	add	objptr, ##54384
0b3d4     F2 14 02 FB | 	rdlong	arg02, objptr
0b3d8     0A 13 02 F6 | 	mov	arg01, arg02
0b3dc     01 12 66 F0 | 	shl	arg01, #1
0b3e0     0A 13 02 F1 | 	add	arg01, arg02
0b3e4     02 12 66 F0 | 	shl	arg01, #2
0b3e8     03 00 00 FF 
0b3ec     04 E4 85 F1 | 	sub	objptr, ##1540
0b3f0     F2 12 02 F1 | 	add	arg01, objptr
0b3f4     09 15 02 FB | 	rdlong	arg02, arg01
0b3f8     18 4E 05 F1 | 	add	fp, #24
0b3fc     A7 14 62 FC | 	wrlong	arg02, fp
0b400     8C 4E 05 F1 | 	add	fp, #140
0b404     A7 12 02 F6 | 	mov	arg01, fp
0b408     67 00 00 FF 
0b40c     6C E4 85 F1 | 	sub	objptr, ##52844
0b410     80 4E 85 F1 | 	sub	fp, #128
0b414     09 4F 61 FC | 	wrlong	fp, arg01
0b418                 | ' numpar=compiledline(lineptr_e).result.uresult
0b418                 | ' lpoke varptr(line2$),varptr(line2)
0b418                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b418     0C 4E 85 F1 | 	sub	fp, #12
0b41c     A7 1E 02 FB | 	rdlong	local01, fp
0b420     18 4E 85 F1 | 	sub	fp, #24
0b424     01 1E 56 F2 | 	cmps	local01, #1 wc
0b428     20 00 90 CD |  if_b	jmp	#LR__0950
0b42c     74 F0 BF FD | 	call	#_pop
0b430     A7 FA 61 FC | 	wrlong	result1, fp
0b434     04 4E 05 F1 | 	add	fp, #4
0b438     A7 FC 61 FC | 	wrlong	result2, fp
0b43c     04 4E 05 F1 | 	add	fp, #4
0b440     A7 FE 61 FC | 	wrlong	result3, fp
0b444     08 4E 85 F1 | 	sub	fp, #8
0b448     24 00 90 FD | 	jmp	#LR__0951
0b44c                 | LR__0950
0b44c     7B 00 00 FF 
0b450     94 E4 05 F1 | 	add	objptr, ##63124
0b454     F2 1E 02 FB | 	rdlong	local01, objptr
0b458     7B 00 00 FF 
0b45c     94 E4 85 F1 | 	sub	objptr, ##63124
0b460     A7 1E 62 FC | 	wrlong	local01, fp
0b464     08 4E 05 F1 | 	add	fp, #8
0b468     A7 3E 68 FC | 	wrlong	#31, fp
0b46c     08 4E 85 F1 | 	sub	fp, #8
0b470                 | LR__0951
0b470                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b470                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b470     08 4E 05 F1 | 	add	fp, #8
0b474     A7 1E 02 FB | 	rdlong	local01, fp
0b478     08 4E 85 F1 | 	sub	fp, #8
0b47c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b480     18 00 90 5D |  if_ne	jmp	#LR__0952
0b484     A7 12 02 FB | 	rdlong	arg01, fp
0b488     C0 32 B0 FD | 	call	#_convertstring
0b48c     A7 FA 61 FC | 	wrlong	result1, fp
0b490     08 4E 05 F1 | 	add	fp, #8
0b494     A7 3E 68 FC | 	wrlong	#31, fp
0b498     08 4E 85 F1 | 	sub	fp, #8
0b49c                 | LR__0952
0b49c                 | ' if t1.result_type=result_string then
0b49c     08 4E 05 F1 | 	add	fp, #8
0b4a0     A7 1E 02 FB | 	rdlong	local01, fp
0b4a4     08 4E 85 F1 | 	sub	fp, #8
0b4a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b4ac     20 04 90 5D |  if_ne	jmp	#LR__0960
0b4b0     F4 2C B0 FD | 	call	#_do_new
0b4b4                 | '   do_new
0b4b4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b4b4     A7 12 02 FB | 	rdlong	arg01, fp
0b4b8     70 01 00 FF 
0b4bc     FA 14 06 F6 | 	mov	arg02, ##@LR__5078
0b4c0     9C 30 B1 FD | 	call	#__system___string_cmp
0b4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4c8     7B 00 00 AF 
0b4cc     94 E4 05 A1 |  if_e	add	objptr, ##63124
0b4d0     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b4d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b4d8     7B 00 00 AF 
0b4dc     94 E4 85 A1 |  if_e	sub	objptr, ##63124
0b4e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b4e4     7B 00 00 5F 
0b4e8     94 E4 05 51 |  if_ne	add	objptr, ##63124
0b4ec     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b4f0     7B 00 00 5F 
0b4f4     94 E4 85 51 |  if_ne	sub	objptr, ##63124
0b4f8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b4f8     09 12 06 F6 | 	mov	arg01, #9
0b4fc     FC 7F B1 FD | 	call	#__system__close
0b500     09 1E 06 F6 | 	mov	local01, #9
0b504     72 00 00 FF 
0b508     84 E4 05 F1 | 	add	objptr, ##58500
0b50c     F2 12 02 FB | 	rdlong	arg01, objptr
0b510     72 00 00 FF 
0b514     84 E4 85 F1 | 	sub	objptr, ##58500
0b518     70 01 00 FF 
0b51c     FB 14 06 F6 | 	mov	arg02, ##@LR__5079
0b520     70 30 B1 FD | 	call	#__system___string_concat
0b524     FD 12 02 F6 | 	mov	arg01, result1
0b528     A7 14 02 FB | 	rdlong	arg02, fp
0b52c     64 30 B1 FD | 	call	#__system___string_concat
0b530     FD 14 02 F6 | 	mov	arg02, result1
0b534     0F 13 02 F6 | 	mov	arg01, local01
0b538     00 16 06 F6 | 	mov	arg03, #0
0b53c     F8 3B B1 FD | 	call	#__system___basic_open_string
0b540     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b544     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b548     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b54c     10 4E 05 F1 | 	add	fp, #16
0b550     A7 FA 61 FC | 	wrlong	result1, fp
0b554                 | '   r=geterr() 
0b554                 | '   if r then 
0b554     10 4E 85 F1 | 	sub	fp, #16
0b558     48 01 90 AD |  if_e	jmp	#LR__0954
0b55c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b55c     09 12 06 F6 | 	mov	arg01, #9
0b560     98 7F B1 FD | 	call	#__system__close
0b564     09 1E 06 F6 | 	mov	local01, #9
0b568     72 00 00 FF 
0b56c     84 E4 05 F1 | 	add	objptr, ##58500
0b570     F2 12 02 FB | 	rdlong	arg01, objptr
0b574     72 00 00 FF 
0b578     84 E4 85 F1 | 	sub	objptr, ##58500
0b57c     70 01 00 FF 
0b580     FD 14 06 F6 | 	mov	arg02, ##@LR__5080
0b584     0C 30 B1 FD | 	call	#__system___string_concat
0b588     FD 12 02 F6 | 	mov	arg01, result1
0b58c     A7 14 02 FB | 	rdlong	arg02, fp
0b590     00 30 B1 FD | 	call	#__system___string_concat
0b594     FD 12 02 F6 | 	mov	arg01, result1
0b598     70 01 00 FF 
0b59c     FF 14 06 F6 | 	mov	arg02, ##@LR__5081
0b5a0     F0 2F B1 FD | 	call	#__system___string_concat
0b5a4     FD 14 02 F6 | 	mov	arg02, result1
0b5a8     0F 13 02 F6 | 	mov	arg01, local01
0b5ac     00 16 06 F6 | 	mov	arg03, #0
0b5b0     84 3B B1 FD | 	call	#__system___basic_open_string
0b5b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b5b8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b5bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b5c0     10 4E 05 F1 | 	add	fp, #16
0b5c4     A7 FA 61 FC | 	wrlong	result1, fp
0b5c8                 | '     r=geterr() 
0b5c8                 | '     if r then 
0b5c8     10 4E 85 F1 | 	sub	fp, #16
0b5cc     A0 00 90 AD |  if_e	jmp	#LR__0953
0b5d0                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b5d0     00 12 06 F6 | 	mov	arg01, #0
0b5d4     F4 88 B1 FD | 	call	#__system___getiolock_0475
0b5d8     FD 12 02 F6 | 	mov	arg01, result1
0b5dc     58 2F B1 FD | 	call	#__system___lockmem
0b5e0     70 01 00 FF 
0b5e4     04 15 06 F6 | 	mov	arg02, ##@LR__5082
0b5e8     00 12 06 F6 | 	mov	arg01, #0
0b5ec     00 16 06 F6 | 	mov	arg03, #0
0b5f0     48 3C B1 FD | 	call	#__system___basic_print_string
0b5f4     10 4E 05 F1 | 	add	fp, #16
0b5f8     A7 14 02 FB | 	rdlong	arg02, fp
0b5fc     10 4E 85 F1 | 	sub	fp, #16
0b600     00 12 06 F6 | 	mov	arg01, #0
0b604     00 16 06 F6 | 	mov	arg03, #0
0b608     0A 18 06 F6 | 	mov	arg04, #10
0b60c     70 3C B1 FD | 	call	#__system___basic_print_integer
0b610     70 01 00 FF 
0b614     12 15 06 F6 | 	mov	arg02, ##@LR__5083
0b618     00 12 06 F6 | 	mov	arg01, #0
0b61c     00 16 06 F6 | 	mov	arg03, #0
0b620     18 3C B1 FD | 	call	#__system___basic_print_string
0b624     00 1E 06 F6 | 	mov	local01, #0
0b628     10 4E 05 F1 | 	add	fp, #16
0b62c     A7 12 02 FB | 	rdlong	arg01, fp
0b630     10 4E 85 F1 | 	sub	fp, #16
0b634     90 55 B1 FD | 	call	#__system___strerror
0b638     FD 14 02 F6 | 	mov	arg02, result1
0b63c     0F 13 02 F6 | 	mov	arg01, local01
0b640     00 16 06 F6 | 	mov	arg03, #0
0b644     F4 3B B1 FD | 	call	#__system___basic_print_string
0b648     00 12 06 F6 | 	mov	arg01, #0
0b64c     0A 14 06 F6 | 	mov	arg02, #10
0b650     00 16 06 F6 | 	mov	arg03, #0
0b654     8C 3B B1 FD | 	call	#__system___basic_print_char
0b658     00 12 06 F6 | 	mov	arg01, #0
0b65c     6C 88 B1 FD | 	call	#__system___getiolock_0475
0b660     FD 00 68 FC | 	wrlong	#0, result1
0b664     09 12 06 F6 | 	mov	arg01, #9
0b668     90 7E B1 FD | 	call	#__system__close
0b66c     F8 02 90 FD | 	jmp	#LR__0962
0b670                 | LR__0953
0b670     7B 00 00 FF 
0b674     94 E4 05 F1 | 	add	objptr, ##63124
0b678     F2 12 02 FB | 	rdlong	arg01, objptr
0b67c     7B 00 00 FF 
0b680     94 E4 85 F1 | 	sub	objptr, ##63124
0b684     70 01 00 FF 
0b688     15 15 06 F6 | 	mov	arg02, ##@LR__5084
0b68c     04 2F B1 FD | 	call	#__system___string_concat
0b690     7B 00 00 FF 
0b694     94 E4 05 F1 | 	add	objptr, ##63124
0b698     F2 FA 61 FC | 	wrlong	result1, objptr
0b69c     7B 00 00 FF 
0b6a0     94 E4 85 F1 | 	sub	objptr, ##63124
0b6a4                 | LR__0954
0b6a4     0C 4E 05 F1 | 	add	fp, #12
0b6a8     A7 0A 68 FC | 	wrlong	#5, fp
0b6ac                 | '   i=5
0b6ac                 | '   get #9,1,header,1   
0b6ac     10 4E 05 F1 | 	add	fp, #16
0b6b0     A7 16 02 F6 | 	mov	arg03, fp
0b6b4     1C 4E 85 F1 | 	sub	fp, #28
0b6b8     09 12 06 F6 | 	mov	arg01, #9
0b6bc     01 14 06 F6 | 	mov	arg02, #1
0b6c0     01 18 06 F6 | 	mov	arg04, #1
0b6c4     04 1A 06 F6 | 	mov	arg05, #4
0b6c8     80 3C B1 FD | 	call	#__system___basic_get
0b6cc                 | '   
0b6cc                 | '   if header<>$0D616272 then 
0b6cc     1C 4E 05 F1 | 	add	fp, #28
0b6d0     A7 1E 02 FB | 	rdlong	local01, fp
0b6d4     1C 4E 85 F1 | 	sub	fp, #28
0b6d8     B1 B0 06 FF 
0b6dc     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b6e0     00 01 90 AD |  if_e	jmp	#LR__0957
0b6e4                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0b6e4     09 12 06 F6 | 	mov	arg01, #9
0b6e8     10 7E B1 FD | 	call	#__system__close
0b6ec     09 1E 06 F6 | 	mov	local01, #9
0b6f0     72 00 00 FF 
0b6f4     84 E4 05 F1 | 	add	objptr, ##58500
0b6f8     F2 12 02 FB | 	rdlong	arg01, objptr
0b6fc     72 00 00 FF 
0b700     84 E4 85 F1 | 	sub	objptr, ##58500
0b704     70 01 00 FF 
0b708     1A 15 06 F6 | 	mov	arg02, ##@LR__5085
0b70c     84 2E B1 FD | 	call	#__system___string_concat
0b710     FD 12 02 F6 | 	mov	arg01, result1
0b714     7B 00 00 FF 
0b718     94 E4 05 F1 | 	add	objptr, ##63124
0b71c     F2 14 02 FB | 	rdlong	arg02, objptr
0b720     7B 00 00 FF 
0b724     94 E4 85 F1 | 	sub	objptr, ##63124
0b728     68 2E B1 FD | 	call	#__system___string_concat
0b72c     FD 14 02 F6 | 	mov	arg02, result1
0b730     0F 13 02 F6 | 	mov	arg01, local01
0b734     00 16 06 F6 | 	mov	arg03, #0
0b738     FC 39 B1 FD | 	call	#__system___basic_open_string
0b73c                 | '     do
0b73c                 | LR__0955
0b73c     09 12 06 F6 | 	mov	arg01, #9
0b740     00 30 B1 FD | 	call	#__system___basic_read_line
0b744     57 00 00 FF 
0b748     0C E4 05 F1 | 	add	objptr, ##44556
0b74c     F2 FA 61 FC | 	wrlong	result1, objptr
0b750                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b750     57 00 00 FF 
0b754     0C E4 85 F1 | 	sub	objptr, ##44556
0b758     FD 12 02 F6 | 	mov	arg01, result1
0b75c     01 14 06 F6 | 	mov	arg02, #1
0b760     18 4E B1 FD | 	call	#__system__Left_S
0b764     FD 12 02 F6 | 	mov	arg01, result1
0b768     70 01 00 FF 
0b76c     1C 15 06 F6 | 	mov	arg02, ##@LR__5086
0b770     EC 2D B1 FD | 	call	#__system___string_cmp
0b774     00 FA 55 F2 | 	cmps	result1, #0 wc
0b778     34 00 90 CD |  if_b	jmp	#LR__0956
0b77c     57 00 00 FF 
0b780     0C E4 05 F1 | 	add	objptr, ##44556
0b784     F2 12 02 FB | 	rdlong	arg01, objptr
0b788     57 00 00 FF 
0b78c     0C E4 85 F1 | 	sub	objptr, ##44556
0b790     01 14 06 F6 | 	mov	arg02, #1
0b794     E4 4D B1 FD | 	call	#__system__Left_S
0b798     FD 12 02 F6 | 	mov	arg01, result1
0b79c     70 01 00 FF 
0b7a0     1E 15 06 F6 | 	mov	arg02, ##@LR__5087
0b7a4     B8 2D B1 FD | 	call	#__system___string_cmp
0b7a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0b7ac     6C 52 BF CD |  if_b	call	#_interpret
0b7b0                 | LR__0956
0b7b0     57 00 00 FF 
0b7b4     0C E4 05 F1 | 	add	objptr, ##44556
0b7b8     F2 12 02 FB | 	rdlong	arg01, objptr
0b7bc     57 00 00 FF 
0b7c0     0C E4 85 F1 | 	sub	objptr, ##44556
0b7c4     70 01 00 FF 
0b7c8     20 15 06 F6 | 	mov	arg02, ##@LR__5088
0b7cc     90 2D B1 FD | 	call	#__system___string_cmp
0b7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0b7d4     64 FF 9F 5D |  if_ne	jmp	#LR__0955
0b7d8                 | '     close #9
0b7d8     09 12 06 F6 | 	mov	arg01, #9
0b7dc     1C 7D B1 FD | 	call	#__system__close
0b7e0     F4 00 90 FD | 	jmp	#LR__0961
0b7e4                 | LR__0957
0b7e4                 | '   'printerror(26) : close #9 : return
0b7e4                 | '     do
0b7e4                 | LR__0958
0b7e4                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b7e4     0C 4E 05 F1 | 	add	fp, #12
0b7e8     A7 14 02 FB | 	rdlong	arg02, fp
0b7ec     14 4E 05 F1 | 	add	fp, #20
0b7f0     A7 16 02 F6 | 	mov	arg03, fp
0b7f4     20 4E 85 F1 | 	sub	fp, #32
0b7f8     09 12 06 F6 | 	mov	arg01, #9
0b7fc     01 18 06 F6 | 	mov	arg04, #1
0b800     04 1A 06 F6 | 	mov	arg05, #4
0b804     44 3B B1 FD | 	call	#__system___basic_get
0b808     14 4E 05 F1 | 	add	fp, #20
0b80c     A7 FA 61 FC | 	wrlong	result1, fp
0b810     08 4E 85 F1 | 	sub	fp, #8
0b814     A7 1E 02 FB | 	rdlong	local01, fp
0b818     04 1E 06 F1 | 	add	local01, #4
0b81c     A7 1E 62 FC | 	wrlong	local01, fp
0b820     14 4E 05 F1 | 	add	fp, #20
0b824     A7 1E 02 FB | 	rdlong	local01, fp
0b828     04 4E 05 F1 | 	add	fp, #4
0b82c     A7 1E 02 F1 | 	add	local01, fp
0b830     0F 01 48 FC | 	wrbyte	#0, local01
0b834                 | '       if amount=1 then  
0b834     10 4E 85 F1 | 	sub	fp, #16
0b838     A7 1E 02 FB | 	rdlong	local01, fp
0b83c     14 4E 85 F1 | 	sub	fp, #20
0b840     01 1E 0E F2 | 	cmp	local01, #1 wz
0b844     68 00 90 5D |  if_ne	jmp	#LR__0959
0b848                 | '         get #9,i,line2(0),linelength : i+=linelength
0b848     0C 4E 05 F1 | 	add	fp, #12
0b84c     A7 14 02 FB | 	rdlong	arg02, fp
0b850     18 4E 05 F1 | 	add	fp, #24
0b854     A7 16 02 F6 | 	mov	arg03, fp
0b858     04 4E 85 F1 | 	sub	fp, #4
0b85c     A7 18 02 FB | 	rdlong	arg04, fp
0b860     20 4E 85 F1 | 	sub	fp, #32
0b864     09 12 06 F6 | 	mov	arg01, #9
0b868     01 1A 06 F6 | 	mov	arg05, #1
0b86c     DC 3A B1 FD | 	call	#__system___basic_get
0b870     0C 4E 05 F1 | 	add	fp, #12
0b874     A7 1E 02 FB | 	rdlong	local01, fp
0b878     14 4E 05 F1 | 	add	fp, #20
0b87c     A7 1A 02 FB | 	rdlong	arg05, fp
0b880     0D 1F 02 F1 | 	add	local01, arg05
0b884     14 4E 85 F1 | 	sub	fp, #20
0b888     A7 1E 62 FC | 	wrlong	local01, fp
0b88c     98 4E 05 F1 | 	add	fp, #152
0b890     A7 1E 02 FB | 	rdlong	local01, fp
0b894     A4 4E 85 F1 | 	sub	fp, #164
0b898     57 00 00 FF 
0b89c     0C E4 05 F1 | 	add	objptr, ##44556
0b8a0     F2 1E 62 FC | 	wrlong	local01, objptr
0b8a4     57 00 00 FF 
0b8a8     0C E4 85 F1 | 	sub	objptr, ##44556
0b8ac     6C 51 BF FD | 	call	#_interpret
0b8b0                 | LR__0959
0b8b0     14 4E 05 F1 | 	add	fp, #20
0b8b4     A7 1E 02 FB | 	rdlong	local01, fp
0b8b8     14 4E 85 F1 | 	sub	fp, #20
0b8bc     01 1E 56 F2 | 	cmps	local01, #1 wc
0b8c0     20 FF 9F 3D |  if_ae	jmp	#LR__0958
0b8c4                 | '     close #9 
0b8c4     09 12 06 F6 | 	mov	arg01, #9
0b8c8     30 7C B1 FD | 	call	#__system__close
0b8cc     08 00 90 FD | 	jmp	#LR__0961
0b8d0                 | LR__0960
0b8d0     1E 12 06 F6 | 	mov	arg01, #30
0b8d4     04 E8 B0 FD | 	call	#_printerror
0b8d8                 | LR__0961
0b8d8                 | '   print "Loaded ";currentdir$+"/"+loadname
0b8d8     00 12 06 F6 | 	mov	arg01, #0
0b8dc     EC 85 B1 FD | 	call	#__system___getiolock_0475
0b8e0     FD 12 02 F6 | 	mov	arg01, result1
0b8e4     50 2C B1 FD | 	call	#__system___lockmem
0b8e8     70 01 00 FF 
0b8ec     21 15 06 F6 | 	mov	arg02, ##@LR__5089
0b8f0     00 12 06 F6 | 	mov	arg01, #0
0b8f4     00 16 06 F6 | 	mov	arg03, #0
0b8f8     40 39 B1 FD | 	call	#__system___basic_print_string
0b8fc     00 1E 06 F6 | 	mov	local01, #0
0b900     72 00 00 FF 
0b904     84 E4 05 F1 | 	add	objptr, ##58500
0b908     F2 12 02 FB | 	rdlong	arg01, objptr
0b90c     72 00 00 FF 
0b910     84 E4 85 F1 | 	sub	objptr, ##58500
0b914     70 01 00 FF 
0b918     29 15 06 F6 | 	mov	arg02, ##@LR__5090
0b91c     74 2C B1 FD | 	call	#__system___string_concat
0b920     FD 12 02 F6 | 	mov	arg01, result1
0b924     7B 00 00 FF 
0b928     94 E4 05 F1 | 	add	objptr, ##63124
0b92c     F2 14 02 FB | 	rdlong	arg02, objptr
0b930     7B 00 00 FF 
0b934     94 E4 85 F1 | 	sub	objptr, ##63124
0b938     58 2C B1 FD | 	call	#__system___string_concat
0b93c     FD 14 02 F6 | 	mov	arg02, result1
0b940     0F 13 02 F6 | 	mov	arg01, local01
0b944     00 16 06 F6 | 	mov	arg03, #0
0b948     F0 38 B1 FD | 	call	#__system___basic_print_string
0b94c     00 12 06 F6 | 	mov	arg01, #0
0b950     0A 14 06 F6 | 	mov	arg02, #10
0b954     00 16 06 F6 | 	mov	arg03, #0
0b958     88 38 B1 FD | 	call	#__system___basic_print_char
0b95c     00 12 06 F6 | 	mov	arg01, #0
0b960     68 85 B1 FD | 	call	#__system___getiolock_0475
0b964     FD 00 68 FC | 	wrlong	#0, result1
0b968                 | LR__0962
0b968     A7 F0 03 F6 | 	mov	ptra, fp
0b96c     B2 00 A0 FD | 	call	#popregs_
0b970                 | _do_load_ret
0b970     2D 00 64 FD | 	ret
0b974                 | 
0b974                 | ' 
0b974                 | ' '----------------- Run the program 
0b974                 | ' 
0b974                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b974                 | ' 
0b974                 | ' sub do_run
0b974                 | _do_run
0b974     01 4A 05 F6 | 	mov	COUNT_, #1
0b978     A8 00 A0 FD | 	call	#pushregs_
0b97c     6A 00 00 FF 
0b980     70 E4 05 F1 | 	add	objptr, ##54384
0b984     F2 1C 02 FB | 	rdlong	arg06, objptr
0b988     0E 19 02 F6 | 	mov	arg04, arg06
0b98c     01 18 66 F0 | 	shl	arg04, #1
0b990     0E 19 02 F1 | 	add	arg04, arg06
0b994     02 18 66 F0 | 	shl	arg04, #2
0b998     03 00 00 FF 
0b99c     04 E4 85 F1 | 	sub	objptr, ##1540
0b9a0     F2 18 02 F1 | 	add	arg04, objptr
0b9a4     0C 1B 02 FB | 	rdlong	arg05, arg04
0b9a8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b9a8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0b9a8     01 1A 0E F2 | 	cmp	arg05, #1 wz
0b9ac     67 00 00 FF 
0b9b0     6C E4 85 F1 | 	sub	objptr, ##52844
0b9b4     08 FA BF AD |  if_e	call	#_do_load
0b9b8     6A 00 00 FF 
0b9bc     74 E4 05 F1 | 	add	objptr, ##54388
0b9c0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b9c4     0F 00 00 FF 
0b9c8     2C E5 05 F1 | 	add	objptr, ##7980
0b9cc     F2 1C 62 FC | 	wrlong	arg06, objptr
0b9d0     04 E4 05 F1 | 	add	objptr, #4
0b9d4     F2 00 68 FC | 	wrlong	#0, objptr
0b9d8     04 E4 05 F1 | 	add	objptr, #4
0b9dc     FF FF FF FF 
0b9e0     F2 FE 6B FC | 	wrlong	##-1, objptr
0b9e4                 | ' if inrun>0 then 
0b9e4     04 E4 05 F1 | 	add	objptr, #4
0b9e8     F2 1C 02 FB | 	rdlong	arg06, objptr
0b9ec     79 00 00 FF 
0b9f0     AC E5 85 F1 | 	sub	objptr, ##62380
0b9f4     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b9f8     30 00 90 CD |  if_b	jmp	#LR__0970
0b9fc     79 00 00 FF 
0ba00     B0 E5 05 F1 | 	add	objptr, ##62384
0ba04     F2 12 02 F6 | 	mov	arg01, objptr
0ba08     10 E4 85 F1 | 	sub	objptr, #16
0ba0c     F2 14 02 FB | 	rdlong	arg02, objptr
0ba10     18 16 06 F6 | 	mov	arg03, #24
0ba14     6E 00 00 FF 
0ba18     D4 E4 85 F1 | 	sub	objptr, ##56532
0ba1c     F4 1E B1 FD | 	call	#_psram_spin2_read1
0ba20     0B 00 00 FF 
0ba24     CC E4 85 F1 | 	sub	objptr, ##5836
0ba28                 | '   psram.read1(varptr(runheader),runptr,24)  
0ba28                 | '   return
0ba28     C4 02 90 FD | 	jmp	#LR__0977
0ba2c                 | LR__0970
0ba2c     79 00 00 FF 
0ba30     AC E5 05 F1 | 	add	objptr, ##62380
0ba34     F2 02 68 FC | 	wrlong	#1, objptr
0ba38     04 E4 05 F1 | 	add	objptr, #4
0ba3c     F2 12 02 F6 | 	mov	arg01, objptr
0ba40     10 E4 85 F1 | 	sub	objptr, #16
0ba44     F2 14 02 FB | 	rdlong	arg02, objptr
0ba48     18 16 06 F6 | 	mov	arg03, #24
0ba4c     6E 00 00 FF 
0ba50     D4 E4 85 F1 | 	sub	objptr, ##56532
0ba54     BC 1E B1 FD | 	call	#_psram_spin2_read1
0ba58                 | ' inrun=1
0ba58                 | ' psram.read1(varptr(runheader),runptr,24) 
0ba58                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ba58     6E 00 00 FF 
0ba5c     E4 E4 05 F1 | 	add	objptr, ##56548
0ba60     F2 1E 02 FB | 	rdlong	local01, objptr
0ba64     79 00 00 FF 
0ba68     B0 E5 85 F1 | 	sub	objptr, ##62384
0ba6c     FF FF 7F FF 
0ba70     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ba74     79 00 00 AF 
0ba78     AC E5 05 A1 |  if_e	add	objptr, ##62380
0ba7c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ba80     79 00 00 AF 
0ba84     AC E5 85 A1 |  if_e	sub	objptr, ##62380
0ba88     64 02 90 AD |  if_e	jmp	#LR__0977
0ba8c                 | ' do 
0ba8c                 | LR__0971
0ba8c                 | '   if runptr<>oldrunptr then
0ba8c     79 00 00 FF 
0ba90     A0 E5 05 F1 | 	add	objptr, ##62368
0ba94     F2 1E 02 FB | 	rdlong	local01, objptr
0ba98     08 E4 05 F1 | 	add	objptr, #8
0ba9c     F2 1C 02 FB | 	rdlong	arg06, objptr
0baa0     79 00 00 FF 
0baa4     A8 E5 85 F1 | 	sub	objptr, ##62376
0baa8     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0baac     CC 00 90 AD |  if_e	jmp	#LR__0972
0bab0     79 00 00 FF 
0bab4     B0 E5 05 F1 | 	add	objptr, ##62384
0bab8     F2 12 02 F6 | 	mov	arg01, objptr
0babc     10 E4 85 F1 | 	sub	objptr, #16
0bac0     F2 14 02 FB | 	rdlong	arg02, objptr
0bac4     18 16 06 F6 | 	mov	arg03, #24
0bac8     6E 00 00 FF 
0bacc     D4 E4 85 F1 | 	sub	objptr, ##56532
0bad0     40 1E B1 FD | 	call	#_psram_spin2_read1
0bad4     5B 00 00 FF 
0bad8     A0 E5 05 F1 | 	add	objptr, ##47008
0badc     F2 12 02 F6 | 	mov	arg01, objptr
0bae0     12 00 00 FF 
0bae4     34 E5 05 F1 | 	add	objptr, ##9524
0bae8     F2 14 02 FB | 	rdlong	arg02, objptr
0baec     14 00 00 FF 
0baf0     4C E5 85 F1 | 	sub	objptr, ##10572
0baf4     F2 1E 02 FB | 	rdlong	local01, objptr
0baf8     01 1E 66 F0 | 	shl	local01, #1
0bafc     0F 15 02 F1 | 	add	arg02, local01
0bb00     14 00 00 FF 
0bb04     64 E5 05 F1 | 	add	objptr, ##10596
0bb08     F2 16 02 FB | 	rdlong	arg03, objptr
0bb0c     18 E4 85 F1 | 	sub	objptr, #24
0bb10     F2 1E 02 FB | 	rdlong	local01, objptr
0bb14     0F 17 82 F1 | 	sub	arg03, local01
0bb18     6E 00 00 FF 
0bb1c     D4 E4 85 F1 | 	sub	objptr, ##56532
0bb20     F0 1D B1 FD | 	call	#_psram_spin2_read1
0bb24     6E 00 00 FF 
0bb28     EC E4 05 F1 | 	add	objptr, ##56556
0bb2c     F2 1E 02 FB | 	rdlong	local01, objptr
0bb30     18 E4 85 F1 | 	sub	objptr, #24
0bb34     F2 16 02 FB | 	rdlong	arg03, objptr
0bb38     0B 1F 82 F1 | 	sub	local01, arg03
0bb3c     14 00 00 FF 
0bb40     4C E5 85 F1 | 	sub	objptr, ##10572
0bb44     F2 16 02 FB | 	rdlong	arg03, objptr
0bb48     0B 1F 12 FD | 	qdiv	local01, arg03
0bb4c     05 00 00 FF 
0bb50     18 E4 05 F1 | 	add	objptr, ##2584
0bb54     18 1E 62 FD | 	getqx	local01
0bb58     03 1E 86 F1 | 	sub	local01, #3
0bb5c     F2 1E 62 FC | 	wrlong	local01, objptr
0bb60     0F 00 00 FF 
0bb64     34 E5 05 F1 | 	add	objptr, ##7988
0bb68     F2 1E 02 FB | 	rdlong	local01, objptr
0bb6c     08 E4 05 F1 | 	add	objptr, #8
0bb70     F2 1E 62 FC | 	wrlong	local01, objptr
0bb74     79 00 00 FF 
0bb78     A8 E5 85 F1 | 	sub	objptr, ##62376
0bb7c                 | LR__0972
0bb7c     79 00 00 FF 
0bb80     C4 E5 05 F1 | 	add	objptr, ##62404
0bb84     F2 1E 02 FB | 	rdlong	local01, objptr
0bb88     24 E4 85 F1 | 	sub	objptr, #36
0bb8c     F2 1E 62 FC | 	wrlong	local01, objptr
0bb90     04 E4 05 F1 | 	add	objptr, #4
0bb94     F2 12 02 FB | 	rdlong	arg01, objptr
0bb98     79 00 00 FF 
0bb9c     A4 E5 85 F1 | 	sub	objptr, ##62372
0bba0     FC E7 BF FD | 	call	#_execute_line
0bba4     79 00 00 FF 
0bba8     A4 E5 05 F1 | 	add	objptr, ##62372
0bbac     F2 FA 61 FC | 	wrlong	result1, objptr
0bbb0     04 E4 85 F1 | 	sub	objptr, #4
0bbb4     F2 1E 02 FB | 	rdlong	local01, objptr
0bbb8     79 00 00 FF 
0bbbc     A0 E5 85 F1 | 	sub	objptr, ##62368
0bbc0     FF FF 3F FF 
0bbc4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0bbc8     30 00 90 AD |  if_e	jmp	#LR__0974
0bbcc     E0 12 06 F6 | 	mov	arg01, #224
0bbd0     D0 20 B1 FD | 	call	#_usbnew_spin2_keystate
0bbd4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bbd8     10 00 90 5D |  if_ne	jmp	#LR__0973
0bbdc     E4 12 06 F6 | 	mov	arg01, #228
0bbe0     C0 20 B1 FD | 	call	#_usbnew_spin2_keystate
0bbe4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bbe8     A0 FE 9F AD |  if_e	jmp	#LR__0971
0bbec                 | LR__0973
0bbec     06 12 06 F6 | 	mov	arg01, #6
0bbf0     B0 20 B1 FD | 	call	#_usbnew_spin2_keystate
0bbf4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bbf8     90 FE 9F AD |  if_e	jmp	#LR__0971
0bbfc                 | LR__0974
0bbfc                 | '   ''do whatever kbm.peek_latest_key()=$106 
0bbfc                 | ' if runheader(5)<>$7FFF_FFFF then 
0bbfc     79 00 00 FF 
0bc00     C4 E5 05 F1 | 	add	objptr, ##62404
0bc04     F2 1E 02 FB | 	rdlong	local01, objptr
0bc08     79 00 00 FF 
0bc0c     C4 E5 85 F1 | 	sub	objptr, ##62404
0bc10     FF FF 3F FF 
0bc14     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0bc18     C0 00 90 AD |  if_e	jmp	#LR__0976
0bc1c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0bc1c     79 00 00 FF 
0bc20     D0 E5 05 F1 | 	add	objptr, ##62416
0bc24     F2 1E 02 FB | 	rdlong	local01, objptr
0bc28     79 00 00 FF 
0bc2c     D0 E5 85 F1 | 	sub	objptr, ##62416
0bc30     01 1E 0E F2 | 	cmp	local01, #1 wz
0bc34     40 00 90 5D |  if_ne	jmp	#LR__0975
0bc38     7B 00 00 FF 
0bc3c     74 E4 05 F1 | 	add	objptr, ##63092
0bc40     F2 14 02 FB | 	rdlong	arg02, objptr
0bc44     04 E4 85 F1 | 	sub	objptr, #4
0bc48     F2 1A 02 FB | 	rdlong	arg05, objptr
0bc4c     07 12 06 F6 | 	mov	arg01, #7
0bc50     56 00 00 FF 
0bc54     44 16 06 F6 | 	mov	arg03, ##44100
0bc58     0C 18 C6 F9 | 	decod	arg04, #12
0bc5c     01 1C 66 F6 | 	neg	arg06, #1
0bc60     6F 00 00 FF 
0bc64     A4 E5 85 F1 | 	sub	objptr, ##57252
0bc68     5C 24 B1 FD | 	call	#_audio096_spin2_play
0bc6c     0B 00 00 FF 
0bc70     CC E4 85 F1 | 	sub	objptr, ##5836
0bc74     C8 20 B1 FD | 	call	#_usbnew_spin2_get_key
0bc78                 | LR__0975
0bc78                 | '   print "Stopped at line ";runheader(0)
0bc78     00 12 06 F6 | 	mov	arg01, #0
0bc7c     4C 82 B1 FD | 	call	#__system___getiolock_0475
0bc80     FD 12 02 F6 | 	mov	arg01, result1
0bc84     B0 28 B1 FD | 	call	#__system___lockmem
0bc88     70 01 00 FF 
0bc8c     2B 15 06 F6 | 	mov	arg02, ##@LR__5091
0bc90     00 12 06 F6 | 	mov	arg01, #0
0bc94     00 16 06 F6 | 	mov	arg03, #0
0bc98     A0 35 B1 FD | 	call	#__system___basic_print_string
0bc9c     79 00 00 FF 
0bca0     B0 E5 05 F1 | 	add	objptr, ##62384
0bca4     F2 14 02 FB | 	rdlong	arg02, objptr
0bca8     79 00 00 FF 
0bcac     B0 E5 85 F1 | 	sub	objptr, ##62384
0bcb0     00 12 06 F6 | 	mov	arg01, #0
0bcb4     00 16 06 F6 | 	mov	arg03, #0
0bcb8     0A 18 06 F6 | 	mov	arg04, #10
0bcbc     00 36 B1 FD | 	call	#__system___basic_print_unsigned
0bcc0     00 12 06 F6 | 	mov	arg01, #0
0bcc4     0A 14 06 F6 | 	mov	arg02, #10
0bcc8     00 16 06 F6 | 	mov	arg03, #0
0bccc     14 35 B1 FD | 	call	#__system___basic_print_char
0bcd0     00 12 06 F6 | 	mov	arg01, #0
0bcd4     F4 81 B1 FD | 	call	#__system___getiolock_0475
0bcd8     FD 00 68 FC | 	wrlong	#0, result1
0bcdc                 | LR__0976
0bcdc     79 00 00 FF 
0bce0     AC E5 05 F1 | 	add	objptr, ##62380
0bce4     F2 00 68 FC | 	wrlong	#0, objptr
0bce8     79 00 00 FF 
0bcec     AC E5 85 F1 | 	sub	objptr, ##62380
0bcf0                 | LR__0977
0bcf0     A7 F0 03 F6 | 	mov	ptra, fp
0bcf4     B2 00 A0 FD | 	call	#popregs_
0bcf8                 | _do_run_ret
0bcf8     2D 00 64 FD | 	ret
0bcfc                 | 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' sub do_defenv
0bcfc                 | _do_defenv
0bcfc     09 4A 05 F6 | 	mov	COUNT_, #9
0bd00     A8 00 A0 FD | 	call	#pushregs_
0bd04     B4 F0 07 F1 | 	add	ptra, #180
0bd08     6A 00 00 FF 
0bd0c     70 E4 05 F1 | 	add	objptr, ##54384
0bd10     F2 1E 02 FB | 	rdlong	local01, objptr
0bd14     0F 1B 02 F6 | 	mov	arg05, local01
0bd18     01 1A 66 F0 | 	shl	arg05, #1
0bd1c     0F 1B 02 F1 | 	add	arg05, local01
0bd20     02 1A 66 F0 | 	shl	arg05, #2
0bd24     03 00 00 FF 
0bd28     04 E4 85 F1 | 	sub	objptr, ##1540
0bd2c     F2 20 02 F6 | 	mov	local02, objptr
0bd30     F2 1A 02 F1 | 	add	arg05, objptr
0bd34     0D 1B 02 FB | 	rdlong	arg05, arg05
0bd38     10 4E 05 F1 | 	add	fp, #16
0bd3c     A7 1A 62 FC | 	wrlong	arg05, fp
0bd40                 | ' 
0bd40                 | ' numpar=compiledline(lineptr_e).result.uresult
0bd40                 | ' 
0bd40                 | ' 
0bd40                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0bd40                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0bd40                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0bd40                 | ' 
0bd40                 | ' 
0bd40                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0bd40     10 4E 85 F1 | 	sub	fp, #16
0bd44     02 1A 0E F2 | 	cmp	arg05, #2 wz
0bd48     67 00 00 FF 
0bd4c     6C E4 85 F1 | 	sub	objptr, ##52844
0bd50     10 4E 05 51 |  if_ne	add	fp, #16
0bd54     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0bd58     10 4E 85 51 |  if_ne	sub	fp, #16
0bd5c     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0bd60     10 4E 05 51 |  if_ne	add	fp, #16
0bd64     0F 21 02 56 |  if_ne	mov	local02, local01
0bd68     10 4E 85 51 |  if_ne	sub	fp, #16
0bd6c     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0bd70     24 0C 90 5D |  if_ne	jmp	#LR__1001
0bd74                 | ' 
0bd74                 | '  
0bd74                 | ' if numpar=2 then
0bd74     10 4E 05 F1 | 	add	fp, #16
0bd78     A7 20 02 FB | 	rdlong	local02, fp
0bd7c     10 4E 85 F1 | 	sub	fp, #16
0bd80     02 20 0E F2 | 	cmp	local02, #2 wz
0bd84     CC 03 90 5D |  if_ne	jmp	#LR__0992
0bd88     18 E7 BF FD | 	call	#_pop
0bd8c     FF 1A 02 F6 | 	mov	arg05, result3
0bd90     5C 4E 05 F1 | 	add	fp, #92
0bd94     A7 FA 61 FC | 	wrlong	result1, fp
0bd98     04 4E 05 F1 | 	add	fp, #4
0bd9c     A7 FC 61 FC | 	wrlong	result2, fp
0bda0     04 4E 05 F1 | 	add	fp, #4
0bda4     A7 1A 62 FC | 	wrlong	arg05, fp
0bda8                 | '   t1=pop()
0bda8                 | '   if t1.result_type=result_string2 then 
0bda8     64 4E 85 F1 | 	sub	fp, #100
0bdac     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0bdb0     20 00 90 5D |  if_ne	jmp	#LR__0980
0bdb4     5C 4E 05 F1 | 	add	fp, #92
0bdb8     A7 12 02 FB | 	rdlong	arg01, fp
0bdbc     5C 4E 85 F1 | 	sub	fp, #92
0bdc0     88 29 B0 FD | 	call	#_convertstring
0bdc4     68 4E 05 F1 | 	add	fp, #104
0bdc8     A7 FA 61 FC | 	wrlong	result1, fp
0bdcc     68 4E 85 F1 | 	sub	fp, #104
0bdd0     58 00 90 FD | 	jmp	#LR__0983
0bdd4                 | LR__0980
0bdd4     64 4E 05 F1 | 	add	fp, #100
0bdd8     A7 20 02 FB | 	rdlong	local02, fp
0bddc     64 4E 85 F1 | 	sub	fp, #100
0bde0     1F 20 0E F2 | 	cmp	local02, #31 wz
0bde4     18 00 90 5D |  if_ne	jmp	#LR__0981
0bde8     5C 4E 05 F1 | 	add	fp, #92
0bdec     A7 20 02 FB | 	rdlong	local02, fp
0bdf0     0C 4E 05 F1 | 	add	fp, #12
0bdf4     A7 20 62 FC | 	wrlong	local02, fp
0bdf8     68 4E 85 F1 | 	sub	fp, #104
0bdfc     2C 00 90 FD | 	jmp	#LR__0982
0be00                 | LR__0981
0be00     70 01 00 FF 
0be04     3C 21 06 F6 | 	mov	local02, ##@LR__5092
0be08     68 4E 05 F1 | 	add	fp, #104
0be0c     A7 20 62 FC | 	wrlong	local02, fp
0be10     0C 4E 85 F1 | 	sub	fp, #12
0be14     A7 12 02 F6 | 	mov	arg01, fp
0be18     5C 4E 85 F1 | 	sub	fp, #92
0be1c     50 71 B0 FD | 	call	#_converttoint
0be20     24 4E 05 F1 | 	add	fp, #36
0be24     A7 FA 61 FC | 	wrlong	result1, fp
0be28     24 4E 85 F1 | 	sub	fp, #36
0be2c                 | LR__0982
0be2c                 | LR__0983
0be2c                 | ' 
0be2c                 | '     
0be2c                 | '   if s1<>"" then 
0be2c     68 4E 05 F1 | 	add	fp, #104
0be30     A7 12 02 FB | 	rdlong	arg01, fp
0be34     68 4E 85 F1 | 	sub	fp, #104
0be38     70 01 00 FF 
0be3c     3D 15 06 F6 | 	mov	arg02, ##@LR__5093
0be40     1C 27 B1 FD | 	call	#__system___string_cmp
0be44     00 FA 0D F2 | 	cmp	result1, #0 wz
0be48     F8 01 90 AD |  if_e	jmp	#LR__0987
0be4c     54 E6 BF FD | 	call	#_pop
0be50     FF 1E 02 F6 | 	mov	local01, result3
0be54     5C 4E 05 F1 | 	add	fp, #92
0be58     A7 FA 61 FC | 	wrlong	result1, fp
0be5c     04 4E 05 F1 | 	add	fp, #4
0be60     A7 FC 61 FC | 	wrlong	result2, fp
0be64     04 4E 05 F1 | 	add	fp, #4
0be68     A7 1E 62 FC | 	wrlong	local01, fp
0be6c     08 4E 85 F1 | 	sub	fp, #8
0be70     A7 12 02 F6 | 	mov	arg01, fp
0be74     5C 4E 85 F1 | 	sub	fp, #92
0be78     F4 70 B0 FD | 	call	#_converttoint
0be7c     20 4E 05 F1 | 	add	fp, #32
0be80     A7 FA 61 FC | 	wrlong	result1, fp
0be84     20 4E 85 F1 | 	sub	fp, #32
0be88                 | '     t1=pop()
0be88                 | '     channel=converttoint(t1) 
0be88                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0be88     09 12 06 F6 | 	mov	arg01, #9
0be8c     6C 76 B1 FD | 	call	#__system__close
0be90     09 20 06 F6 | 	mov	local02, #9
0be94     70 01 00 FF 
0be98     3E 13 06 F6 | 	mov	arg01, ##@LR__5094
0be9c     68 4E 05 F1 | 	add	fp, #104
0bea0     A7 14 02 FB | 	rdlong	arg02, fp
0bea4     68 4E 85 F1 | 	sub	fp, #104
0bea8     E8 26 B1 FD | 	call	#__system___string_concat
0beac     FD 14 02 F6 | 	mov	arg02, result1
0beb0     10 13 02 F6 | 	mov	arg01, local02
0beb4     00 16 06 F6 | 	mov	arg03, #0
0beb8     7C 32 B1 FD | 	call	#__system___basic_open_string
0bebc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0bec0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0bec4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0bec8     0C 4E 05 F1 | 	add	fp, #12
0becc     A7 FA 61 FC | 	wrlong	result1, fp
0bed0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0bed0     0C 4E 85 F1 | 	sub	fp, #12
0bed4     A0 00 90 AD |  if_e	jmp	#LR__0984
0bed8     00 12 06 F6 | 	mov	arg01, #0
0bedc     EC 7F B1 FD | 	call	#__system___getiolock_0475
0bee0     FD 12 02 F6 | 	mov	arg01, result1
0bee4     50 26 B1 FD | 	call	#__system___lockmem
0bee8     70 01 00 FF 
0beec     4B 15 06 F6 | 	mov	arg02, ##@LR__5095
0bef0     00 12 06 F6 | 	mov	arg01, #0
0bef4     00 16 06 F6 | 	mov	arg03, #0
0bef8     40 33 B1 FD | 	call	#__system___basic_print_string
0befc     0C 4E 05 F1 | 	add	fp, #12
0bf00     A7 14 02 FB | 	rdlong	arg02, fp
0bf04     0C 4E 85 F1 | 	sub	fp, #12
0bf08     00 12 06 F6 | 	mov	arg01, #0
0bf0c     00 16 06 F6 | 	mov	arg03, #0
0bf10     0A 18 06 F6 | 	mov	arg04, #10
0bf14     68 33 B1 FD | 	call	#__system___basic_print_integer
0bf18     70 01 00 FF 
0bf1c     59 15 06 F6 | 	mov	arg02, ##@LR__5096
0bf20     00 12 06 F6 | 	mov	arg01, #0
0bf24     00 16 06 F6 | 	mov	arg03, #0
0bf28     10 33 B1 FD | 	call	#__system___basic_print_string
0bf2c     00 20 06 F6 | 	mov	local02, #0
0bf30     0C 4E 05 F1 | 	add	fp, #12
0bf34     A7 12 02 FB | 	rdlong	arg01, fp
0bf38     0C 4E 85 F1 | 	sub	fp, #12
0bf3c     88 4C B1 FD | 	call	#__system___strerror
0bf40     FD 14 02 F6 | 	mov	arg02, result1
0bf44     10 13 02 F6 | 	mov	arg01, local02
0bf48     00 16 06 F6 | 	mov	arg03, #0
0bf4c     EC 32 B1 FD | 	call	#__system___basic_print_string
0bf50     00 12 06 F6 | 	mov	arg01, #0
0bf54     0A 14 06 F6 | 	mov	arg02, #10
0bf58     00 16 06 F6 | 	mov	arg03, #0
0bf5c     84 32 B1 FD | 	call	#__system___basic_print_char
0bf60     00 12 06 F6 | 	mov	arg01, #0
0bf64     64 7F B1 FD | 	call	#__system___getiolock_0475
0bf68     FD 00 68 FC | 	wrlong	#0, result1
0bf6c     09 12 06 F6 | 	mov	arg01, #9
0bf70     88 75 B1 FD | 	call	#__system__close
0bf74     20 0A 90 FD | 	jmp	#LR__1001
0bf78                 | LR__0984
0bf78                 | '     get #9,17,envbuf8(channel,0),256
0bf78     20 4E 05 F1 | 	add	fp, #32
0bf7c     A7 1A 02 FB | 	rdlong	arg05, fp
0bf80     20 4E 85 F1 | 	sub	fp, #32
0bf84     0D 17 02 F6 | 	mov	arg03, arg05
0bf88     09 16 66 F0 | 	shl	arg03, #9
0bf8c     0D 17 02 F1 | 	add	arg03, arg05
0bf90     2C 00 00 FF 
0bf94     D8 E4 05 F1 | 	add	objptr, ##22744
0bf98     F2 16 02 F1 | 	add	arg03, objptr
0bf9c     09 12 06 F6 | 	mov	arg01, #9
0bfa0     11 14 06 F6 | 	mov	arg02, #17
0bfa4     00 19 06 F6 | 	mov	arg04, #256
0bfa8     01 1A 06 F6 | 	mov	arg05, #1
0bfac     2C 00 00 FF 
0bfb0     D8 E4 85 F1 | 	sub	objptr, ##22744
0bfb4     94 33 B1 FD | 	call	#__system___basic_get
0bfb8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0bfb8     14 4E 05 F1 | 	add	fp, #20
0bfbc     A7 FE 69 FC | 	wrlong	#255, fp
0bfc0     14 4E 85 F1 | 	sub	fp, #20
0bfc4     2C 00 00 FF 
0bfc8     D8 E4 05 F1 | 	add	objptr, ##22744
0bfcc     97 30 48 FB | 	callpa	#(@LR__0986-@LR__0985)>>2,fcache_load_ptr_
0bfd0                 | LR__0985
0bfd0     20 4E 05 F1 | 	add	fp, #32
0bfd4     A7 18 02 FB | 	rdlong	arg04, fp
0bfd8     0C 21 02 F6 | 	mov	local02, arg04
0bfdc     09 20 66 F0 | 	shl	local02, #9
0bfe0     F2 20 02 F1 | 	add	local02, objptr
0bfe4     0C 4E 85 F1 | 	sub	fp, #12
0bfe8     A7 1E 02 FB | 	rdlong	local01, fp
0bfec     0F 1B 02 F6 | 	mov	arg05, local01
0bff0     01 1A 66 F0 | 	shl	arg05, #1
0bff4     10 1B 02 F1 | 	add	arg05, local02
0bff8     0C 21 02 F6 | 	mov	local02, arg04
0bffc     09 20 66 F0 | 	shl	local02, #9
0c000     0C 21 02 F1 | 	add	local02, arg04
0c004     F2 20 02 F1 | 	add	local02, objptr
0c008     10 1F 02 F1 | 	add	local01, local02
0c00c     0F 21 C2 FA | 	rdbyte	local02, local01
0c010     00 21 06 FA | 	mul	local02, #256
0c014     0D 21 52 FC | 	wrword	local02, arg05
0c018     A7 20 02 FB | 	rdlong	local02, fp
0c01c     01 20 86 F1 | 	sub	local02, #1
0c020     A7 20 62 FC | 	wrlong	local02, fp
0c024     14 4E 85 F1 | 	sub	fp, #20
0c028     00 20 56 F2 | 	cmps	local02, #0 wc
0c02c     A0 FF 9F 3D |  if_ae	jmp	#LR__0985
0c030                 | LR__0986
0c030     2C 00 00 FF 
0c034     D8 E4 85 F1 | 	sub	objptr, ##22744
0c038                 | '     close #9
0c038     09 12 06 F6 | 	mov	arg01, #9
0c03c     BC 74 B1 FD | 	call	#__system__close
0c040                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0c040                 | '     return
0c040     54 09 90 FD | 	jmp	#LR__1001
0c044                 | LR__0987
0c044                 | '     if wptr < ($80000 - 2048) then 
0c044     24 4E 05 F1 | 	add	fp, #36
0c048     A7 22 02 FB | 	rdlong	local03, fp
0c04c     24 4E 85 F1 | 	sub	fp, #36
0c050     FC 03 00 FF 
0c054     00 22 56 F2 | 	cmps	local03, ##522240 wc
0c058     7C 00 90 3D |  if_ae	jmp	#LR__0990
0c05c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c05c     14 4E 05 F1 | 	add	fp, #20
0c060     A7 00 68 FC | 	wrlong	#0, fp
0c064     14 4E 85 F1 | 	sub	fp, #20
0c068     2C 00 00 FF 
0c06c     D8 E4 05 F1 | 	add	objptr, ##22744
0c070     97 2C 48 FB | 	callpa	#(@LR__0989-@LR__0988)>>2,fcache_load_ptr_
0c074                 | LR__0988
0c074     20 4E 05 F1 | 	add	fp, #32
0c078     A7 22 02 FB | 	rdlong	local03, fp
0c07c     09 22 66 F0 | 	shl	local03, #9
0c080     F2 22 02 F1 | 	add	local03, objptr
0c084     0C 4E 85 F1 | 	sub	fp, #12
0c088     A7 20 02 FB | 	rdlong	local02, fp
0c08c     10 1F 02 F6 | 	mov	local01, local02
0c090     01 1E 66 F0 | 	shl	local01, #1
0c094     11 1F 02 F1 | 	add	local01, local03
0c098     10 4E 05 F1 | 	add	fp, #16
0c09c     A7 12 02 FB | 	rdlong	arg01, fp
0c0a0     01 20 66 F0 | 	shl	local02, #1
0c0a4     10 13 02 F1 | 	add	arg01, local02
0c0a8     09 FB E1 FA | 	rdword	result1, arg01
0c0ac     0F FB 51 FC | 	wrword	result1, local01
0c0b0     10 4E 85 F1 | 	sub	fp, #16
0c0b4     A7 22 02 FB | 	rdlong	local03, fp
0c0b8     01 22 06 F1 | 	add	local03, #1
0c0bc     A7 22 62 FC | 	wrlong	local03, fp
0c0c0     14 4E 85 F1 | 	sub	fp, #20
0c0c4     00 23 56 F2 | 	cmps	local03, #256 wc
0c0c8     A8 FF 9F CD |  if_b	jmp	#LR__0988
0c0cc                 | LR__0989
0c0cc     2C 00 00 FF 
0c0d0     D8 E4 85 F1 | 	sub	objptr, ##22744
0c0d4     C0 08 90 FD | 	jmp	#LR__1001
0c0d8                 | LR__0990
0c0d8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c0d8     14 4E 05 F1 | 	add	fp, #20
0c0dc     A7 00 68 FC | 	wrlong	#0, fp
0c0e0     14 4E 85 F1 | 	sub	fp, #20
0c0e4                 | LR__0991
0c0e4     20 4E 05 F1 | 	add	fp, #32
0c0e8     A7 22 02 FB | 	rdlong	local03, fp
0c0ec     09 22 66 F0 | 	shl	local03, #9
0c0f0     2C 00 00 FF 
0c0f4     D8 E4 05 F1 | 	add	objptr, ##22744
0c0f8     F2 22 02 F1 | 	add	local03, objptr
0c0fc     0C 4E 85 F1 | 	sub	fp, #12
0c100     A7 20 02 FB | 	rdlong	local02, fp
0c104     10 1F 02 F6 | 	mov	local01, local02
0c108     01 1E 66 F0 | 	shl	local01, #1
0c10c     11 1F 02 F1 | 	add	local01, local03
0c110     10 4E 05 F1 | 	add	fp, #16
0c114     A7 12 02 FB | 	rdlong	arg01, fp
0c118     24 4E 85 F1 | 	sub	fp, #36
0c11c     01 20 66 F0 | 	shl	local02, #1
0c120     10 13 02 F1 | 	add	arg01, local02
0c124     2C 00 00 FF 
0c128     D8 E4 85 F1 | 	sub	objptr, ##22744
0c12c     94 E2 B0 FD | 	call	#_psdpeek
0c130     0F FB 51 FC | 	wrword	result1, local01
0c134     14 4E 05 F1 | 	add	fp, #20
0c138     A7 24 02 FB | 	rdlong	local04, fp
0c13c     01 24 06 F1 | 	add	local04, #1
0c140     A7 24 62 FC | 	wrlong	local04, fp
0c144     14 4E 85 F1 | 	sub	fp, #20
0c148     00 25 56 F2 | 	cmps	local04, #256 wc
0c14c     94 FF 9F CD |  if_b	jmp	#LR__0991
0c150                 | '     return   
0c150     44 08 90 FD | 	jmp	#LR__1001
0c154                 | LR__0992
0c154                 | ' 
0c154                 | ' if numpar=5 then    'simple adsr
0c154     10 4E 05 F1 | 	add	fp, #16
0c158     A7 22 02 FB | 	rdlong	local03, fp
0c15c     10 4E 85 F1 | 	sub	fp, #16
0c160     05 22 0E F2 | 	cmp	local03, #5 wz
0c164     30 08 90 5D |  if_ne	jmp	#LR__1000
0c168     38 E3 BF FD | 	call	#_pop
0c16c     FF 1E 02 F6 | 	mov	local01, result3
0c170     5C 4E 05 F1 | 	add	fp, #92
0c174     A7 FA 61 FC | 	wrlong	result1, fp
0c178     04 4E 05 F1 | 	add	fp, #4
0c17c     A7 FC 61 FC | 	wrlong	result2, fp
0c180     04 4E 05 F1 | 	add	fp, #4
0c184     A7 1E 62 FC | 	wrlong	local01, fp
0c188     08 4E 85 F1 | 	sub	fp, #8
0c18c     A7 12 02 F6 | 	mov	arg01, fp
0c190     5C 4E 85 F1 | 	sub	fp, #92
0c194     84 6E B0 FD | 	call	#_converttofloat
0c198     FD 22 02 F6 | 	mov	local03, result1
0c19c     34 4E 05 F1 | 	add	fp, #52
0c1a0     A7 22 62 FC | 	wrlong	local03, fp
0c1a4     34 4E 85 F1 | 	sub	fp, #52
0c1a8     F8 E2 BF FD | 	call	#_pop
0c1ac     FF 1E 02 F6 | 	mov	local01, result3
0c1b0     5C 4E 05 F1 | 	add	fp, #92
0c1b4     A7 FA 61 FC | 	wrlong	result1, fp
0c1b8     04 4E 05 F1 | 	add	fp, #4
0c1bc     A7 FC 61 FC | 	wrlong	result2, fp
0c1c0     04 4E 05 F1 | 	add	fp, #4
0c1c4     A7 1E 62 FC | 	wrlong	local01, fp
0c1c8     08 4E 85 F1 | 	sub	fp, #8
0c1cc     A7 12 02 F6 | 	mov	arg01, fp
0c1d0     5C 4E 85 F1 | 	sub	fp, #92
0c1d4     44 6E B0 FD | 	call	#_converttofloat
0c1d8     FD 22 02 F6 | 	mov	local03, result1
0c1dc     30 4E 05 F1 | 	add	fp, #48
0c1e0     A7 22 62 FC | 	wrlong	local03, fp
0c1e4     30 4E 85 F1 | 	sub	fp, #48
0c1e8     B8 E2 BF FD | 	call	#_pop
0c1ec     FF 1E 02 F6 | 	mov	local01, result3
0c1f0     5C 4E 05 F1 | 	add	fp, #92
0c1f4     A7 FA 61 FC | 	wrlong	result1, fp
0c1f8     04 4E 05 F1 | 	add	fp, #4
0c1fc     A7 FC 61 FC | 	wrlong	result2, fp
0c200     04 4E 05 F1 | 	add	fp, #4
0c204     A7 1E 62 FC | 	wrlong	local01, fp
0c208     08 4E 85 F1 | 	sub	fp, #8
0c20c     A7 12 02 F6 | 	mov	arg01, fp
0c210     5C 4E 85 F1 | 	sub	fp, #92
0c214     04 6E B0 FD | 	call	#_converttofloat
0c218     FD 22 02 F6 | 	mov	local03, result1
0c21c     2C 4E 05 F1 | 	add	fp, #44
0c220     A7 22 62 FC | 	wrlong	local03, fp
0c224     2C 4E 85 F1 | 	sub	fp, #44
0c228     78 E2 BF FD | 	call	#_pop
0c22c     FF 1E 02 F6 | 	mov	local01, result3
0c230     5C 4E 05 F1 | 	add	fp, #92
0c234     A7 FA 61 FC | 	wrlong	result1, fp
0c238     04 4E 05 F1 | 	add	fp, #4
0c23c     A7 FC 61 FC | 	wrlong	result2, fp
0c240     04 4E 05 F1 | 	add	fp, #4
0c244     A7 1E 62 FC | 	wrlong	local01, fp
0c248     08 4E 85 F1 | 	sub	fp, #8
0c24c     A7 12 02 F6 | 	mov	arg01, fp
0c250     5C 4E 85 F1 | 	sub	fp, #92
0c254     C4 6D B0 FD | 	call	#_converttofloat
0c258     FD 22 02 F6 | 	mov	local03, result1
0c25c     28 4E 05 F1 | 	add	fp, #40
0c260     A7 22 62 FC | 	wrlong	local03, fp
0c264     28 4E 85 F1 | 	sub	fp, #40
0c268     38 E2 BF FD | 	call	#_pop
0c26c     FF 1E 02 F6 | 	mov	local01, result3
0c270     5C 4E 05 F1 | 	add	fp, #92
0c274     A7 FA 61 FC | 	wrlong	result1, fp
0c278     04 4E 05 F1 | 	add	fp, #4
0c27c     A7 FC 61 FC | 	wrlong	result2, fp
0c280     04 4E 05 F1 | 	add	fp, #4
0c284     A7 1E 62 FC | 	wrlong	local01, fp
0c288     08 4E 85 F1 | 	sub	fp, #8
0c28c     A7 12 02 F6 | 	mov	arg01, fp
0c290     5C 4E 85 F1 | 	sub	fp, #92
0c294     D8 6C B0 FD | 	call	#_converttoint
0c298     20 4E 05 F1 | 	add	fp, #32
0c29c     A7 FA 61 FC | 	wrlong	result1, fp
0c2a0                 | ' 
0c2a0                 | '   t1=pop() : rr=converttofloat(t1)
0c2a0                 | '   t1=pop() : ss=converttofloat(t1) 
0c2a0                 | '   t1=pop() : dd=converttofloat(t1)
0c2a0                 | '   t1=pop() : aa=converttofloat(t1)
0c2a0                 | '   t1=pop() : channel=converttoint(t1)
0c2a0                 | '   if ss<0.0 then ss=0.0 
0c2a0     10 4E 05 F1 | 	add	fp, #16
0c2a4     A7 12 02 FB | 	rdlong	arg01, fp
0c2a8     30 4E 85 F1 | 	sub	fp, #48
0c2ac     00 14 06 F6 | 	mov	arg02, #0
0c2b0     01 16 06 F6 | 	mov	arg03, #1
0c2b4     30 52 B1 FD | 	call	#__system___float_cmp
0c2b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c2bc     30 4E 05 C1 |  if_b	add	fp, #48
0c2c0     A7 00 68 CC |  if_b	wrlong	#0, fp
0c2c4     30 4E 85 C1 |  if_b	sub	fp, #48
0c2c8                 | '   if ss>1.0 then ss=1.0
0c2c8     30 4E 05 F1 | 	add	fp, #48
0c2cc     A7 12 02 FB | 	rdlong	arg01, fp
0c2d0     30 4E 85 F1 | 	sub	fp, #48
0c2d4     00 C0 1F FF 
0c2d8     00 14 06 F6 | 	mov	arg02, ##1065353216
0c2dc     01 16 66 F6 | 	neg	arg03, #1
0c2e0     04 52 B1 FD | 	call	#__system___float_cmp
0c2e4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c2e8     30 4E 05 31 |  if_ae	add	fp, #48
0c2ec     00 C0 9F 3F 
0c2f0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c2f4     30 4E 85 31 |  if_ae	sub	fp, #48
0c2f8     28 4E 05 F1 | 	add	fp, #40
0c2fc     A7 12 02 FB | 	rdlong	arg01, fp
0c300     04 4E 05 F1 | 	add	fp, #4
0c304     A7 14 02 FB | 	rdlong	arg02, fp
0c308     2C 4E 85 F1 | 	sub	fp, #44
0c30c     D4 49 B1 FD | 	call	#__system___float_add
0c310     FD 12 02 F6 | 	mov	arg01, result1
0c314     34 4E 05 F1 | 	add	fp, #52
0c318     A7 14 02 FB | 	rdlong	arg02, fp
0c31c     34 4E 85 F1 | 	sub	fp, #52
0c320     C0 49 B1 FD | 	call	#__system___float_add
0c324     4C 4E 05 F1 | 	add	fp, #76
0c328     A7 FA 61 FC | 	wrlong	result1, fp
0c32c     FD 14 02 F6 | 	mov	arg02, result1
0c330     4C 4E 85 F1 | 	sub	fp, #76
0c334     00 C0 21 FF 
0c338     00 12 06 F6 | 	mov	arg01, ##1132462080
0c33c     78 4F B1 FD | 	call	#__system___float_div
0c340     50 4E 05 F1 | 	add	fp, #80
0c344     A7 FA 61 FC | 	wrlong	result1, fp
0c348     28 4E 85 F1 | 	sub	fp, #40
0c34c     A7 12 02 FB | 	rdlong	arg01, fp
0c350     FD 14 02 F6 | 	mov	arg02, result1
0c354     28 4E 85 F1 | 	sub	fp, #40
0c358     58 4D B1 FD | 	call	#__system___float_mul
0c35c     FD 12 02 F6 | 	mov	arg01, result1
0c360     01 14 06 F6 | 	mov	arg02, #1
0c364     14 52 B1 FD | 	call	#__system___float_tointeger
0c368     A7 FA 61 FC | 	wrlong	result1, fp
0c36c     2C 4E 05 F1 | 	add	fp, #44
0c370     A7 12 02 FB | 	rdlong	arg01, fp
0c374     24 4E 05 F1 | 	add	fp, #36
0c378     A7 14 02 FB | 	rdlong	arg02, fp
0c37c     50 4E 85 F1 | 	sub	fp, #80
0c380     30 4D B1 FD | 	call	#__system___float_mul
0c384     FD 12 02 F6 | 	mov	arg01, result1
0c388     01 14 06 F6 | 	mov	arg02, #1
0c38c     EC 51 B1 FD | 	call	#__system___float_tointeger
0c390     04 4E 05 F1 | 	add	fp, #4
0c394     A7 FA 61 FC | 	wrlong	result1, fp
0c398     30 4E 05 F1 | 	add	fp, #48
0c39c     A7 12 02 FB | 	rdlong	arg01, fp
0c3a0     1C 4E 05 F1 | 	add	fp, #28
0c3a4     A7 14 02 FB | 	rdlong	arg02, fp
0c3a8     50 4E 85 F1 | 	sub	fp, #80
0c3ac     04 4D B1 FD | 	call	#__system___float_mul
0c3b0     FD 12 02 F6 | 	mov	arg01, result1
0c3b4     01 14 06 F6 | 	mov	arg02, #1
0c3b8     C0 51 B1 FD | 	call	#__system___float_tointeger
0c3bc     FD 22 02 F6 | 	mov	local03, result1
0c3c0     0C 4E 05 F1 | 	add	fp, #12
0c3c4     A7 22 62 FC | 	wrlong	local03, fp
0c3c8     0C 4E 85 F1 | 	sub	fp, #12
0c3cc                 | '   fulltime=aa+dd+rr
0c3cc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c3cc     00 12 06 F6 | 	mov	arg01, #0
0c3d0     F8 7A B1 FD | 	call	#__system___getiolock_0475
0c3d4     FD 12 02 F6 | 	mov	arg01, result1
0c3d8     5C 21 B1 FD | 	call	#__system___lockmem
0c3dc     A7 14 02 FB | 	rdlong	arg02, fp
0c3e0     00 12 06 F6 | 	mov	arg01, #0
0c3e4     00 16 06 F6 | 	mov	arg03, #0
0c3e8     0A 18 06 F6 | 	mov	arg04, #10
0c3ec     90 2E B1 FD | 	call	#__system___basic_print_integer
0c3f0     00 12 06 F6 | 	mov	arg01, #0
0c3f4     09 14 06 F6 | 	mov	arg02, #9
0c3f8     00 16 06 F6 | 	mov	arg03, #0
0c3fc     E4 2D B1 FD | 	call	#__system___basic_print_char
0c400     04 4E 05 F1 | 	add	fp, #4
0c404     A7 14 02 FB | 	rdlong	arg02, fp
0c408     04 4E 85 F1 | 	sub	fp, #4
0c40c     00 12 06 F6 | 	mov	arg01, #0
0c410     00 16 06 F6 | 	mov	arg03, #0
0c414     0A 18 06 F6 | 	mov	arg04, #10
0c418     64 2E B1 FD | 	call	#__system___basic_print_integer
0c41c     00 12 06 F6 | 	mov	arg01, #0
0c420     09 14 06 F6 | 	mov	arg02, #9
0c424     00 16 06 F6 | 	mov	arg03, #0
0c428     B8 2D B1 FD | 	call	#__system___basic_print_char
0c42c     0C 4E 05 F1 | 	add	fp, #12
0c430     A7 14 02 FB | 	rdlong	arg02, fp
0c434     0C 4E 85 F1 | 	sub	fp, #12
0c438     00 12 06 F6 | 	mov	arg01, #0
0c43c     00 16 06 F6 | 	mov	arg03, #0
0c440     0A 18 06 F6 | 	mov	arg04, #10
0c444     38 2E B1 FD | 	call	#__system___basic_print_integer
0c448     00 12 06 F6 | 	mov	arg01, #0
0c44c     09 14 06 F6 | 	mov	arg02, #9
0c450     00 16 06 F6 | 	mov	arg03, #0
0c454     8C 2D B1 FD | 	call	#__system___basic_print_char
0c458     A7 14 02 FB | 	rdlong	arg02, fp
0c45c     04 4E 05 F1 | 	add	fp, #4
0c460     A7 22 02 FB | 	rdlong	local03, fp
0c464     11 15 02 F1 | 	add	arg02, local03
0c468     08 4E 05 F1 | 	add	fp, #8
0c46c     A7 22 02 FB | 	rdlong	local03, fp
0c470     0C 4E 85 F1 | 	sub	fp, #12
0c474     11 15 02 F1 | 	add	arg02, local03
0c478     00 12 06 F6 | 	mov	arg01, #0
0c47c     00 16 06 F6 | 	mov	arg03, #0
0c480     0A 18 06 F6 | 	mov	arg04, #10
0c484     F8 2D B1 FD | 	call	#__system___basic_print_integer
0c488     00 12 06 F6 | 	mov	arg01, #0
0c48c     0A 14 06 F6 | 	mov	arg02, #10
0c490     00 16 06 F6 | 	mov	arg03, #0
0c494     4C 2D B1 FD | 	call	#__system___basic_print_char
0c498     00 12 06 F6 | 	mov	arg01, #0
0c49c     2C 7A B1 FD | 	call	#__system___getiolock_0475
0c4a0     FD 00 68 FC | 	wrlong	#0, result1
0c4a4     F8 BF 23 FF 
0c4a8     00 22 06 F6 | 	mov	local03, ##1199566848
0c4ac     A7 12 02 FB | 	rdlong	arg01, fp
0c4b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0c4b4     1F 26 C6 C9 |  if_b	decod	local05, #31
0c4b8     00 26 06 36 |  if_ae	mov	local05, #0
0c4bc     F0 47 B1 FD | 	call	#__system___float_fromuns
0c4c0     13 FB 61 F5 | 	xor	result1, local05
0c4c4     FD 14 02 F6 | 	mov	arg02, result1
0c4c8     11 13 02 F6 | 	mov	arg01, local03
0c4cc     E8 4D B1 FD | 	call	#__system___float_div
0c4d0     54 4E 05 F1 | 	add	fp, #84
0c4d4     A7 FA 61 FC | 	wrlong	result1, fp
0c4d8     F8 BF 23 FF 
0c4dc     00 22 06 F6 | 	mov	local03, ##1199566848
0c4e0     24 4E 85 F1 | 	sub	fp, #36
0c4e4     A7 14 02 FB | 	rdlong	arg02, fp
0c4e8     30 4E 85 F1 | 	sub	fp, #48
0c4ec     F8 BF 23 FF 
0c4f0     00 12 06 F6 | 	mov	arg01, ##1199566848
0c4f4     BC 4B B1 FD | 	call	#__system___float_mul
0c4f8     FD 14 02 F6 | 	mov	arg02, result1
0c4fc     11 13 02 F6 | 	mov	arg01, local03
0c500     1F 14 E6 F4 | 	bitnot	arg02, #31
0c504     DC 47 B1 FD | 	call	#__system___float_add
0c508     FD 22 02 F6 | 	mov	local03, result1
0c50c     04 4E 05 F1 | 	add	fp, #4
0c510     A7 12 02 FB | 	rdlong	arg01, fp
0c514     04 4E 85 F1 | 	sub	fp, #4
0c518     09 13 52 F6 | 	abs	arg01, arg01 wc
0c51c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c520     00 26 06 36 |  if_ae	mov	local05, #0
0c524     88 47 B1 FD | 	call	#__system___float_fromuns
0c528     13 FB 61 F5 | 	xor	result1, local05
0c52c     FD 14 02 F6 | 	mov	arg02, result1
0c530     11 13 02 F6 | 	mov	arg01, local03
0c534     80 4D B1 FD | 	call	#__system___float_div
0c538     2C 4E 05 F1 | 	add	fp, #44
0c53c     A7 FA 61 FC | 	wrlong	result1, fp
0c540     04 4E 05 F1 | 	add	fp, #4
0c544     A7 14 02 FB | 	rdlong	arg02, fp
0c548     30 4E 85 F1 | 	sub	fp, #48
0c54c     F8 BF 23 FF 
0c550     00 12 06 F6 | 	mov	arg01, ##1199566848
0c554     5C 4B B1 FD | 	call	#__system___float_mul
0c558     FD 22 02 F6 | 	mov	local03, result1
0c55c     0C 4E 05 F1 | 	add	fp, #12
0c560     A7 12 02 FB | 	rdlong	arg01, fp
0c564     0C 4E 85 F1 | 	sub	fp, #12
0c568     09 13 52 F6 | 	abs	arg01, arg01 wc
0c56c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c570     00 26 06 36 |  if_ae	mov	local05, #0
0c574     38 47 B1 FD | 	call	#__system___float_fromuns
0c578     13 FB 61 F5 | 	xor	result1, local05
0c57c     FD 14 02 F6 | 	mov	arg02, result1
0c580     11 13 02 F6 | 	mov	arg01, local03
0c584     30 4D B1 FD | 	call	#__system___float_div
0c588     FD 22 02 F6 | 	mov	local03, result1
0c58c     58 4E 05 F1 | 	add	fp, #88
0c590     A7 22 62 FC | 	wrlong	local03, fp
0c594     58 4E 85 F1 | 	sub	fp, #88
0c598                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c598     00 12 06 F6 | 	mov	arg01, #0
0c59c     2C 79 B1 FD | 	call	#__system___getiolock_0475
0c5a0     FD 12 02 F6 | 	mov	arg01, result1
0c5a4     90 1F B1 FD | 	call	#__system___lockmem
0c5a8     54 4E 05 F1 | 	add	fp, #84
0c5ac     A7 14 02 FB | 	rdlong	arg02, fp
0c5b0     54 4E 85 F1 | 	sub	fp, #84
0c5b4     00 12 06 F6 | 	mov	arg01, #0
0c5b8     00 16 06 F6 | 	mov	arg03, #0
0c5bc     23 18 06 F6 | 	mov	arg04, #35
0c5c0     08 51 B1 FD | 	call	#__system___basic_print_float
0c5c4     00 12 06 F6 | 	mov	arg01, #0
0c5c8     09 14 06 F6 | 	mov	arg02, #9
0c5cc     00 16 06 F6 | 	mov	arg03, #0
0c5d0     10 2C B1 FD | 	call	#__system___basic_print_char
0c5d4     2C 4E 05 F1 | 	add	fp, #44
0c5d8     A7 14 02 FB | 	rdlong	arg02, fp
0c5dc     2C 4E 85 F1 | 	sub	fp, #44
0c5e0     00 12 06 F6 | 	mov	arg01, #0
0c5e4     00 16 06 F6 | 	mov	arg03, #0
0c5e8     23 18 06 F6 | 	mov	arg04, #35
0c5ec     DC 50 B1 FD | 	call	#__system___basic_print_float
0c5f0     00 12 06 F6 | 	mov	arg01, #0
0c5f4     09 14 06 F6 | 	mov	arg02, #9
0c5f8     00 16 06 F6 | 	mov	arg03, #0
0c5fc     E4 2B B1 FD | 	call	#__system___basic_print_char
0c600     58 4E 05 F1 | 	add	fp, #88
0c604     A7 14 02 FB | 	rdlong	arg02, fp
0c608     58 4E 85 F1 | 	sub	fp, #88
0c60c     00 12 06 F6 | 	mov	arg01, #0
0c610     00 16 06 F6 | 	mov	arg03, #0
0c614     23 18 06 F6 | 	mov	arg04, #35
0c618     B0 50 B1 FD | 	call	#__system___basic_print_float
0c61c     00 12 06 F6 | 	mov	arg01, #0
0c620     0A 14 06 F6 | 	mov	arg02, #10
0c624     00 16 06 F6 | 	mov	arg03, #0
0c628     B8 2B B1 FD | 	call	#__system___basic_print_char
0c62c     00 12 06 F6 | 	mov	arg01, #0
0c630     98 78 B1 FD | 	call	#__system___getiolock_0475
0c634     FD 00 68 FC | 	wrlong	#0, result1
0c638     20 4E 05 F1 | 	add	fp, #32
0c63c     A7 28 02 FB | 	rdlong	local06, fp
0c640     20 4E 85 F1 | 	sub	fp, #32
0c644     01 28 66 F0 | 	shl	local06, #1
0c648     7B 00 00 FF 
0c64c     84 E4 05 F1 | 	add	objptr, ##63108
0c650     F2 28 02 F1 | 	add	local06, objptr
0c654     A7 2A 02 FB | 	rdlong	local07, fp
0c658     04 4E 05 F1 | 	add	fp, #4
0c65c     A7 22 02 FB | 	rdlong	local03, fp
0c660     11 2B 02 F1 | 	add	local07, local03
0c664     14 2B 52 FC | 	wrword	local07, local06
0c668     24 4E 05 F1 | 	add	fp, #36
0c66c     A7 00 68 FC | 	wrlong	#0, fp
0c670                 | '   suspoints(channel)=a+d
0c670                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0c670     14 4E 85 F1 | 	sub	fp, #20
0c674     A7 00 68 FC | 	wrlong	#0, fp
0c678     14 4E 85 F1 | 	sub	fp, #20
0c67c     A7 2C 02 FB | 	rdlong	local08, fp
0c680     7B 00 00 FF 
0c684     84 E4 85 F1 | 	sub	objptr, ##63108
0c688                 | LR__0993
0c688     14 4E 05 F1 | 	add	fp, #20
0c68c     A7 22 02 FB | 	rdlong	local03, fp
0c690     14 4E 85 F1 | 	sub	fp, #20
0c694     16 23 52 F2 | 	cmps	local03, local08 wc
0c698     80 00 90 3D |  if_ae	jmp	#LR__0994
0c69c     20 4E 05 F1 | 	add	fp, #32
0c6a0     A7 28 02 FB | 	rdlong	local06, fp
0c6a4     09 28 66 F0 | 	shl	local06, #9
0c6a8     2C 00 00 FF 
0c6ac     D8 E4 05 F1 | 	add	objptr, ##22744
0c6b0     F2 28 02 F1 | 	add	local06, objptr
0c6b4     0C 4E 85 F1 | 	sub	fp, #12
0c6b8     A7 22 02 FB | 	rdlong	local03, fp
0c6bc     01 22 66 F0 | 	shl	local03, #1
0c6c0     14 23 02 F1 | 	add	local03, local06
0c6c4     14 4E 05 F1 | 	add	fp, #20
0c6c8     A7 12 02 FB | 	rdlong	arg01, fp
0c6cc     28 4E 85 F1 | 	sub	fp, #40
0c6d0     2C 00 00 FF 
0c6d4     D8 E4 85 F1 | 	sub	objptr, ##22744
0c6d8     01 14 06 F6 | 	mov	arg02, #1
0c6dc     9C 4E B1 FD | 	call	#__system___float_tointeger
0c6e0     11 FB 51 FC | 	wrword	result1, local03
0c6e4     28 4E 05 F1 | 	add	fp, #40
0c6e8     A7 12 02 FB | 	rdlong	arg01, fp
0c6ec     2C 4E 05 F1 | 	add	fp, #44
0c6f0     A7 14 02 FB | 	rdlong	arg02, fp
0c6f4     54 4E 85 F1 | 	sub	fp, #84
0c6f8     E8 45 B1 FD | 	call	#__system___float_add
0c6fc     28 4E 05 F1 | 	add	fp, #40
0c700     A7 FA 61 FC | 	wrlong	result1, fp
0c704     14 4E 85 F1 | 	sub	fp, #20
0c708     A7 20 02 FB | 	rdlong	local02, fp
0c70c     01 20 06 F1 | 	add	local02, #1
0c710     A7 20 62 FC | 	wrlong	local02, fp
0c714     14 4E 85 F1 | 	sub	fp, #20
0c718     6C FF 9F FD | 	jmp	#LR__0993
0c71c                 | LR__0994
0c71c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0c71c     A7 22 02 FB | 	rdlong	local03, fp
0c720     14 4E 05 F1 | 	add	fp, #20
0c724     A7 22 62 FC | 	wrlong	local03, fp
0c728     14 4E 85 F1 | 	sub	fp, #20
0c72c     A7 2E 02 FB | 	rdlong	local09, fp
0c730     04 4E 05 F1 | 	add	fp, #4
0c734     A7 22 02 FB | 	rdlong	local03, fp
0c738     04 4E 85 F1 | 	sub	fp, #4
0c73c     11 2F 02 F1 | 	add	local09, local03
0c740                 | LR__0995
0c740     14 4E 05 F1 | 	add	fp, #20
0c744     A7 22 02 FB | 	rdlong	local03, fp
0c748     14 4E 85 F1 | 	sub	fp, #20
0c74c     17 23 52 F2 | 	cmps	local03, local09 wc
0c750     A8 00 90 3D |  if_ae	jmp	#LR__0996
0c754     20 4E 05 F1 | 	add	fp, #32
0c758     A7 2C 02 FB | 	rdlong	local08, fp
0c75c     09 2C 66 F0 | 	shl	local08, #9
0c760     2C 00 00 FF 
0c764     D8 E4 05 F1 | 	add	objptr, ##22744
0c768     F2 2C 02 F1 | 	add	local08, objptr
0c76c     0C 4E 85 F1 | 	sub	fp, #12
0c770     A7 2A 02 FB | 	rdlong	local07, fp
0c774     01 2A 66 F0 | 	shl	local07, #1
0c778     16 2B 02 F1 | 	add	local07, local08
0c77c     14 4E 05 F1 | 	add	fp, #20
0c780     A7 12 02 FB | 	rdlong	arg01, fp
0c784     28 4E 85 F1 | 	sub	fp, #40
0c788     2C 00 00 FF 
0c78c     D8 E4 85 F1 | 	sub	objptr, ##22744
0c790     01 14 06 F6 | 	mov	arg02, #1
0c794     E4 4D B1 FD | 	call	#__system___float_tointeger
0c798     15 FB 51 FC | 	wrword	result1, local07
0c79c     28 4E 05 F1 | 	add	fp, #40
0c7a0     A7 12 02 FB | 	rdlong	arg01, fp
0c7a4     04 4E 05 F1 | 	add	fp, #4
0c7a8     A7 14 02 FB | 	rdlong	arg02, fp
0c7ac     2C 4E 85 F1 | 	sub	fp, #44
0c7b0     1F 14 E6 F4 | 	bitnot	arg02, #31
0c7b4     2C 45 B1 FD | 	call	#__system___float_add
0c7b8     28 4E 05 F1 | 	add	fp, #40
0c7bc     A7 FA 61 FC | 	wrlong	result1, fp
0c7c0     28 4E 85 F1 | 	sub	fp, #40
0c7c4     FD 12 02 F6 | 	mov	arg01, result1
0c7c8     00 14 06 F6 | 	mov	arg02, #0
0c7cc     01 16 06 F6 | 	mov	arg03, #1
0c7d0     14 4D B1 FD | 	call	#__system___float_cmp
0c7d4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c7d8     28 4E 05 C1 |  if_b	add	fp, #40
0c7dc     A7 00 68 CC |  if_b	wrlong	#0, fp
0c7e0     28 4E 85 C1 |  if_b	sub	fp, #40
0c7e4     14 4E 05 F1 | 	add	fp, #20
0c7e8     A7 20 02 FB | 	rdlong	local02, fp
0c7ec     01 20 06 F1 | 	add	local02, #1
0c7f0     A7 20 62 FC | 	wrlong	local02, fp
0c7f4     14 4E 85 F1 | 	sub	fp, #20
0c7f8     44 FF 9F FD | 	jmp	#LR__0995
0c7fc                 | LR__0996
0c7fc                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c7fc     A7 22 02 FB | 	rdlong	local03, fp
0c800     04 4E 05 F1 | 	add	fp, #4
0c804     A7 2E 02 FB | 	rdlong	local09, fp
0c808     17 23 02 F1 | 	add	local03, local09
0c80c     10 4E 05 F1 | 	add	fp, #16
0c810     A7 22 62 FC | 	wrlong	local03, fp
0c814     14 4E 85 F1 | 	sub	fp, #20
0c818                 | LR__0997
0c818     14 4E 05 F1 | 	add	fp, #20
0c81c     A7 28 02 FB | 	rdlong	local06, fp
0c820     14 4E 85 F1 | 	sub	fp, #20
0c824     00 29 56 F2 | 	cmps	local06, #256 wc
0c828     A8 00 90 3D |  if_ae	jmp	#LR__0998
0c82c     20 4E 05 F1 | 	add	fp, #32
0c830     A7 2E 02 FB | 	rdlong	local09, fp
0c834     09 2E 66 F0 | 	shl	local09, #9
0c838     2C 00 00 FF 
0c83c     D8 E4 05 F1 | 	add	objptr, ##22744
0c840     F2 2E 02 F1 | 	add	local09, objptr
0c844     0C 4E 85 F1 | 	sub	fp, #12
0c848     A7 2C 02 FB | 	rdlong	local08, fp
0c84c     01 2C 66 F0 | 	shl	local08, #1
0c850     17 2D 02 F1 | 	add	local08, local09
0c854     14 4E 05 F1 | 	add	fp, #20
0c858     A7 12 02 FB | 	rdlong	arg01, fp
0c85c     28 4E 85 F1 | 	sub	fp, #40
0c860     2C 00 00 FF 
0c864     D8 E4 85 F1 | 	sub	objptr, ##22744
0c868     01 14 06 F6 | 	mov	arg02, #1
0c86c     0C 4D B1 FD | 	call	#__system___float_tointeger
0c870     16 FB 51 FC | 	wrword	result1, local08
0c874     28 4E 05 F1 | 	add	fp, #40
0c878     A7 12 02 FB | 	rdlong	arg01, fp
0c87c     30 4E 05 F1 | 	add	fp, #48
0c880     A7 14 02 FB | 	rdlong	arg02, fp
0c884     58 4E 85 F1 | 	sub	fp, #88
0c888     1F 14 E6 F4 | 	bitnot	arg02, #31
0c88c     54 44 B1 FD | 	call	#__system___float_add
0c890     28 4E 05 F1 | 	add	fp, #40
0c894     A7 FA 61 FC | 	wrlong	result1, fp
0c898     28 4E 85 F1 | 	sub	fp, #40
0c89c     FD 12 02 F6 | 	mov	arg01, result1
0c8a0     00 14 06 F6 | 	mov	arg02, #0
0c8a4     01 16 06 F6 | 	mov	arg03, #1
0c8a8     3C 4C B1 FD | 	call	#__system___float_cmp
0c8ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0c8b0     28 4E 05 C1 |  if_b	add	fp, #40
0c8b4     A7 00 68 CC |  if_b	wrlong	#0, fp
0c8b8     28 4E 85 C1 |  if_b	sub	fp, #40
0c8bc     14 4E 05 F1 | 	add	fp, #20
0c8c0     A7 2E 02 FB | 	rdlong	local09, fp
0c8c4     01 2E 06 F1 | 	add	local09, #1
0c8c8     A7 2E 62 FC | 	wrlong	local09, fp
0c8cc     14 4E 85 F1 | 	sub	fp, #20
0c8d0     44 FF 9F FD | 	jmp	#LR__0997
0c8d4                 | LR__0998
0c8d4     20 4E 05 F1 | 	add	fp, #32
0c8d8     A7 28 02 FB | 	rdlong	local06, fp
0c8dc     09 28 66 F0 | 	shl	local06, #9
0c8e0     2C 00 00 FF 
0c8e4     D8 E4 05 F1 | 	add	objptr, ##22744
0c8e8     F2 28 02 F1 | 	add	local06, objptr
0c8ec     FE 29 06 F1 | 	add	local06, #510
0c8f0     14 01 58 FC | 	wrword	#0, local06
0c8f4                 | '   envbuf(channel,255)=0
0c8f4                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c8f4     0C 4E 85 F1 | 	sub	fp, #12
0c8f8     A7 00 68 FC | 	wrlong	#0, fp
0c8fc     14 4E 85 F1 | 	sub	fp, #20
0c900     2C 00 00 FF 
0c904     D8 E4 85 F1 | 	sub	objptr, ##22744
0c908                 | LR__0999
0c908     00 12 06 F6 | 	mov	arg01, #0
0c90c     BC 75 B1 FD | 	call	#__system___getiolock_0475
0c910     FD 12 02 F6 | 	mov	arg01, result1
0c914     20 1C B1 FD | 	call	#__system___lockmem
0c918     20 4E 05 F1 | 	add	fp, #32
0c91c     A7 2E 02 FB | 	rdlong	local09, fp
0c920     09 2E 66 F0 | 	shl	local09, #9
0c924     2C 00 00 FF 
0c928     D8 E4 05 F1 | 	add	objptr, ##22744
0c92c     F2 2E 02 F1 | 	add	local09, objptr
0c930     0C 4E 85 F1 | 	sub	fp, #12
0c934     A7 2C 02 FB | 	rdlong	local08, fp
0c938     14 4E 85 F1 | 	sub	fp, #20
0c93c     01 2C 66 F0 | 	shl	local08, #1
0c940     17 2D 02 F1 | 	add	local08, local09
0c944     16 15 E2 FA | 	rdword	arg02, local08
0c948     00 12 06 F6 | 	mov	arg01, #0
0c94c     00 16 06 F6 | 	mov	arg03, #0
0c950     0A 18 06 F6 | 	mov	arg04, #10
0c954     2C 00 00 FF 
0c958     D8 E4 85 F1 | 	sub	objptr, ##22744
0c95c     60 29 B1 FD | 	call	#__system___basic_print_unsigned
0c960     00 12 06 F6 | 	mov	arg01, #0
0c964     09 14 06 F6 | 	mov	arg02, #9
0c968     00 16 06 F6 | 	mov	arg03, #0
0c96c     74 28 B1 FD | 	call	#__system___basic_print_char
0c970     00 12 06 F6 | 	mov	arg01, #0
0c974     54 75 B1 FD | 	call	#__system___getiolock_0475
0c978     FD 00 68 FC | 	wrlong	#0, result1
0c97c     14 4E 05 F1 | 	add	fp, #20
0c980     A7 2E 02 FB | 	rdlong	local09, fp
0c984     01 2E 06 F1 | 	add	local09, #1
0c988     A7 2E 62 FC | 	wrlong	local09, fp
0c98c     14 4E 85 F1 | 	sub	fp, #20
0c990     00 2F 56 F2 | 	cmps	local09, #256 wc
0c994     70 FF 9F CD |  if_b	jmp	#LR__0999
0c998                 | LR__1000
0c998                 | LR__1001
0c998     A7 F0 03 F6 | 	mov	ptra, fp
0c99c     B2 00 A0 FD | 	call	#popregs_
0c9a0                 | _do_defenv_ret
0c9a0     2D 00 64 FD | 	ret
0c9a4                 | 
0c9a4                 | ' 
0c9a4                 | ' 
0c9a4                 | ' sub do_play
0c9a4                 | _do_play
0c9a4     05 4A 05 F6 | 	mov	COUNT_, #5
0c9a8     A8 00 A0 FD | 	call	#pushregs_
0c9ac     74 F0 07 F1 | 	add	ptra, #116
0c9b0     60 4E 05 F1 | 	add	fp, #96
0c9b4     F5 25 A2 FF 
0c9b8     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c9bc                 | ' speed_coeff=815.6614449376854599406528189911
0c9bc                 | ' 
0c9bc                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c9bc     5C 4E 85 F1 | 	sub	fp, #92
0c9c0     A7 00 68 FC | 	wrlong	#0, fp
0c9c4     97 18 48 FB | 	callpa	#(@LR__1011-@LR__1010)>>2,fcache_load_ptr_
0c9c8                 | LR__1010
0c9c8     A7 16 02 FB | 	rdlong	arg03, fp
0c9cc     02 16 66 F0 | 	shl	arg03, #2
0c9d0     2C 4E 05 F1 | 	add	fp, #44
0c9d4     A7 16 02 F1 | 	add	arg03, fp
0c9d8     00 00 E0 FF 
0c9dc     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0c9e0     2C 4E 85 F1 | 	sub	fp, #44
0c9e4     A7 1E 02 FB | 	rdlong	local01, fp
0c9e8     01 1E 06 F1 | 	add	local01, #1
0c9ec     A7 1E 62 FC | 	wrlong	local01, fp
0c9f0     09 1E 56 F2 | 	cmps	local01, #9 wc
0c9f4     D0 FF 9F CD |  if_b	jmp	#LR__1010
0c9f8                 | LR__1011
0c9f8     04 4E 85 F1 | 	sub	fp, #4
0c9fc     6A 00 00 FF 
0ca00     70 E4 05 F1 | 	add	objptr, ##54384
0ca04     F2 20 02 FB | 	rdlong	local02, objptr
0ca08     10 23 02 F6 | 	mov	local03, local02
0ca0c     01 22 66 F0 | 	shl	local03, #1
0ca10     10 23 02 F1 | 	add	local03, local02
0ca14     02 22 66 F0 | 	shl	local03, #2
0ca18     03 00 00 FF 
0ca1c     04 E4 85 F1 | 	sub	objptr, ##1540
0ca20     F2 22 02 F1 | 	add	local03, objptr
0ca24     11 25 02 FB | 	rdlong	local04, local03
0ca28     A7 24 62 FC | 	wrlong	local04, fp
0ca2c                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0ca2c                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0ca2c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ca2c                 | ' for i=numpar to 1 step -1 
0ca2c     04 4E 05 F1 | 	add	fp, #4
0ca30     A7 24 62 FC | 	wrlong	local04, fp
0ca34     04 4E 85 F1 | 	sub	fp, #4
0ca38     67 00 00 FF 
0ca3c     6C E4 85 F1 | 	sub	objptr, ##52844
0ca40                 | LR__1012
0ca40     60 DA BF FD | 	call	#_pop
0ca44     54 4E 05 F1 | 	add	fp, #84
0ca48     A7 FA 61 FC | 	wrlong	result1, fp
0ca4c     04 4E 05 F1 | 	add	fp, #4
0ca50     A7 FC 61 FC | 	wrlong	result2, fp
0ca54     04 4E 05 F1 | 	add	fp, #4
0ca58     A7 FE 61 FC | 	wrlong	result3, fp
0ca5c     58 4E 85 F1 | 	sub	fp, #88
0ca60     A7 22 02 FB | 	rdlong	local03, fp
0ca64     01 22 86 F1 | 	sub	local03, #1
0ca68     02 22 66 F0 | 	shl	local03, #2
0ca6c     2C 4E 05 F1 | 	add	fp, #44
0ca70     A7 22 02 F1 | 	add	local03, fp
0ca74     24 4E 05 F1 | 	add	fp, #36
0ca78     A7 26 02 F6 | 	mov	local05, fp
0ca7c     13 13 02 F6 | 	mov	arg01, local05
0ca80     54 4E 85 F1 | 	sub	fp, #84
0ca84     94 65 B0 FD | 	call	#_converttofloat
0ca88     11 FB 61 FC | 	wrlong	result1, local03
0ca8c     04 4E 05 F1 | 	add	fp, #4
0ca90     A7 1E 02 FB | 	rdlong	local01, fp
0ca94     01 1E 86 F1 | 	sub	local01, #1
0ca98     A7 1E 62 FC | 	wrlong	local01, fp
0ca9c     04 4E 85 F1 | 	sub	fp, #4
0caa0     01 1E 56 F2 | 	cmps	local01, #1 wc
0caa4     98 FF 9F 3D |  if_ae	jmp	#LR__1012
0caa8                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0caa8     30 4E 05 F1 | 	add	fp, #48
0caac     A7 12 02 FB | 	rdlong	arg01, fp
0cab0     30 4E 85 F1 | 	sub	fp, #48
0cab4     00 14 06 F6 | 	mov	arg02, #0
0cab8     01 16 06 F6 | 	mov	arg03, #1
0cabc     28 4A B1 FD | 	call	#__system___float_cmp
0cac0     00 FA 55 F2 | 	cmps	result1, #0 wc
0cac4     0C 4E 05 C1 |  if_b	add	fp, #12
0cac8     A7 00 68 CC |  if_b	wrlong	#0, fp
0cacc     0C 4E 85 C1 |  if_b	sub	fp, #12
0cad0     20 00 90 CD |  if_b	jmp	#LR__1013
0cad4     30 4E 05 F1 | 	add	fp, #48
0cad8     A7 12 02 FB | 	rdlong	arg01, fp
0cadc     30 4E 85 F1 | 	sub	fp, #48
0cae0     01 14 06 F6 | 	mov	arg02, #1
0cae4     94 4A B1 FD | 	call	#__system___float_tointeger
0cae8     0C 4E 05 F1 | 	add	fp, #12
0caec     A7 FA 61 FC | 	wrlong	result1, fp
0caf0     0C 4E 85 F1 | 	sub	fp, #12
0caf4                 | LR__1013
0caf4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0caf4     34 4E 05 F1 | 	add	fp, #52
0caf8     A7 12 02 FB | 	rdlong	arg01, fp
0cafc     34 4E 85 F1 | 	sub	fp, #52
0cb00     00 14 06 F6 | 	mov	arg02, #0
0cb04     01 16 06 F6 | 	mov	arg03, #1
0cb08     DC 49 B1 FD | 	call	#__system___float_cmp
0cb0c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cb10     40 00 90 3D |  if_ae	jmp	#LR__1014
0cb14     0C 4E 05 F1 | 	add	fp, #12
0cb18     A7 20 02 FB | 	rdlong	local02, fp
0cb1c     10 23 02 F6 | 	mov	local03, local02
0cb20     01 22 66 F0 | 	shl	local03, #1
0cb24     10 23 02 F1 | 	add	local03, local02
0cb28     03 22 66 F0 | 	shl	local03, #3
0cb2c     34 00 00 FF 
0cb30     38 E5 05 F1 | 	add	objptr, ##26936
0cb34     F2 22 02 F1 | 	add	local03, objptr
0cb38     11 23 02 FB | 	rdlong	local03, local03
0cb3c     58 4E 05 F1 | 	add	fp, #88
0cb40     A7 22 62 FC | 	wrlong	local03, fp
0cb44     64 4E 85 F1 | 	sub	fp, #100
0cb48     34 00 00 FF 
0cb4c     38 E5 85 F1 | 	sub	objptr, ##26936
0cb50     44 00 90 FD | 	jmp	#LR__1015
0cb54                 | LR__1014
0cb54     34 4E 05 F1 | 	add	fp, #52
0cb58     A7 24 02 FB | 	rdlong	local04, fp
0cb5c     30 4E 05 F1 | 	add	fp, #48
0cb60     A7 24 62 FC | 	wrlong	local04, fp
0cb64     58 4E 85 F1 | 	sub	fp, #88
0cb68     A7 20 02 FB | 	rdlong	local02, fp
0cb6c     10 23 02 F6 | 	mov	local03, local02
0cb70     01 22 66 F0 | 	shl	local03, #1
0cb74     10 23 02 F1 | 	add	local03, local02
0cb78     03 22 66 F0 | 	shl	local03, #3
0cb7c     34 00 00 FF 
0cb80     38 E5 05 F1 | 	add	objptr, ##26936
0cb84     F2 22 02 F1 | 	add	local03, objptr
0cb88     0C 4E 85 F1 | 	sub	fp, #12
0cb8c     11 25 62 FC | 	wrlong	local04, local03
0cb90     34 00 00 FF 
0cb94     38 E5 85 F1 | 	sub	objptr, ##26936
0cb98                 | LR__1015
0cb98                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0cb98     3C 4E 05 F1 | 	add	fp, #60
0cb9c     A7 12 02 FB | 	rdlong	arg01, fp
0cba0     3C 4E 85 F1 | 	sub	fp, #60
0cba4     00 14 06 F6 | 	mov	arg02, #0
0cba8     01 16 06 F6 | 	mov	arg03, #1
0cbac     38 49 B1 FD | 	call	#__system___float_cmp
0cbb0     00 FA 55 F2 | 	cmps	result1, #0 wc
0cbb4     24 00 90 CD |  if_b	jmp	#LR__1016
0cbb8     3C 4E 05 F1 | 	add	fp, #60
0cbbc     A7 12 02 FB | 	rdlong	arg01, fp
0cbc0     3C 4E 85 F1 | 	sub	fp, #60
0cbc4     89 C1 20 FF 
0cbc8     6F 14 06 F6 | 	mov	arg02, ##1099108975
0cbcc     01 16 66 F6 | 	neg	arg03, #1
0cbd0     14 49 B1 FD | 	call	#__system___float_cmp
0cbd4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cbd8     44 00 90 CD |  if_b	jmp	#LR__1017
0cbdc                 | LR__1016
0cbdc     0C 4E 05 F1 | 	add	fp, #12
0cbe0     A7 20 02 FB | 	rdlong	local02, fp
0cbe4     10 23 02 F6 | 	mov	local03, local02
0cbe8     01 22 66 F0 | 	shl	local03, #1
0cbec     10 23 02 F1 | 	add	local03, local02
0cbf0     03 22 66 F0 | 	shl	local03, #3
0cbf4     34 00 00 FF 
0cbf8     38 E5 05 F1 | 	add	objptr, ##26936
0cbfc     F2 22 02 F1 | 	add	local03, objptr
0cc00     0C 22 06 F1 | 	add	local03, #12
0cc04     11 23 02 FB | 	rdlong	local03, local03
0cc08     60 4E 05 F1 | 	add	fp, #96
0cc0c     A7 22 62 FC | 	wrlong	local03, fp
0cc10     6C 4E 85 F1 | 	sub	fp, #108
0cc14     34 00 00 FF 
0cc18     38 E5 85 F1 | 	sub	objptr, ##26936
0cc1c     48 00 90 FD | 	jmp	#LR__1018
0cc20                 | LR__1017
0cc20     3C 4E 05 F1 | 	add	fp, #60
0cc24     A7 24 02 FB | 	rdlong	local04, fp
0cc28     30 4E 05 F1 | 	add	fp, #48
0cc2c     A7 24 62 FC | 	wrlong	local04, fp
0cc30     60 4E 85 F1 | 	sub	fp, #96
0cc34     A7 20 02 FB | 	rdlong	local02, fp
0cc38     10 23 02 F6 | 	mov	local03, local02
0cc3c     01 22 66 F0 | 	shl	local03, #1
0cc40     10 23 02 F1 | 	add	local03, local02
0cc44     03 22 66 F0 | 	shl	local03, #3
0cc48     34 00 00 FF 
0cc4c     38 E5 05 F1 | 	add	objptr, ##26936
0cc50     F2 22 02 F1 | 	add	local03, objptr
0cc54     0C 4E 85 F1 | 	sub	fp, #12
0cc58     0C 22 06 F1 | 	add	local03, #12
0cc5c     11 25 62 FC | 	wrlong	local04, local03
0cc60     34 00 00 FF 
0cc64     38 E5 85 F1 | 	sub	objptr, ##26936
0cc68                 | LR__1018
0cc68                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0cc68     40 4E 05 F1 | 	add	fp, #64
0cc6c     A7 12 02 FB | 	rdlong	arg01, fp
0cc70     40 4E 85 F1 | 	sub	fp, #64
0cc74     00 14 06 F6 | 	mov	arg02, #0
0cc78     01 16 06 F6 | 	mov	arg03, #1
0cc7c     68 48 B1 FD | 	call	#__system___float_cmp
0cc80     00 FA 55 F2 | 	cmps	result1, #0 wc
0cc84     24 00 90 CD |  if_b	jmp	#LR__1019
0cc88     40 4E 05 F1 | 	add	fp, #64
0cc8c     A7 12 02 FB | 	rdlong	arg01, fp
0cc90     40 4E 85 F1 | 	sub	fp, #64
0cc94     00 80 20 FF 
0cc98     00 14 06 F6 | 	mov	arg02, ##1090519040
0cc9c     01 16 66 F6 | 	neg	arg03, #1
0cca0     44 48 B1 FD | 	call	#__system___float_cmp
0cca4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cca8     48 00 90 CD |  if_b	jmp	#LR__1020
0ccac                 | LR__1019
0ccac     0C 4E 05 F1 | 	add	fp, #12
0ccb0     A7 22 02 FB | 	rdlong	local03, fp
0ccb4     11 27 02 F6 | 	mov	local05, local03
0ccb8     01 26 66 F0 | 	shl	local05, #1
0ccbc     11 27 02 F1 | 	add	local05, local03
0ccc0     03 26 66 F0 | 	shl	local05, #3
0ccc4     34 00 00 FF 
0ccc8     38 E5 05 F1 | 	add	objptr, ##26936
0cccc     F2 26 02 F1 | 	add	local05, objptr
0ccd0     04 26 06 F1 | 	add	local05, #4
0ccd4     13 27 C2 FA | 	rdbyte	local05, local05
0ccd8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0ccdc     14 4E 05 F1 | 	add	fp, #20
0cce0     A7 24 62 FC | 	wrlong	local04, fp
0cce4     20 4E 85 F1 | 	sub	fp, #32
0cce8     34 00 00 FF 
0ccec     38 E5 85 F1 | 	sub	objptr, ##26936
0ccf0     54 00 90 FD | 	jmp	#LR__1021
0ccf4                 | LR__1020
0ccf4     40 4E 05 F1 | 	add	fp, #64
0ccf8     A7 12 02 FB | 	rdlong	arg01, fp
0ccfc     40 4E 85 F1 | 	sub	fp, #64
0cd00     01 14 06 F6 | 	mov	arg02, #1
0cd04     74 48 B1 FD | 	call	#__system___float_tointeger
0cd08     20 4E 05 F1 | 	add	fp, #32
0cd0c     A7 FA 61 FC | 	wrlong	result1, fp
0cd10     14 4E 85 F1 | 	sub	fp, #20
0cd14     A7 20 02 FB | 	rdlong	local02, fp
0cd18     10 23 02 F6 | 	mov	local03, local02
0cd1c     01 22 66 F0 | 	shl	local03, #1
0cd20     10 23 02 F1 | 	add	local03, local02
0cd24     03 22 66 F0 | 	shl	local03, #3
0cd28     34 00 00 FF 
0cd2c     38 E5 05 F1 | 	add	objptr, ##26936
0cd30     F2 22 02 F1 | 	add	local03, objptr
0cd34     0C 4E 85 F1 | 	sub	fp, #12
0cd38     04 22 06 F1 | 	add	local03, #4
0cd3c     11 FB 41 FC | 	wrbyte	result1, local03
0cd40     34 00 00 FF 
0cd44     38 E5 85 F1 | 	sub	objptr, ##26936
0cd48                 | LR__1021
0cd48                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0cd48     44 4E 05 F1 | 	add	fp, #68
0cd4c     A7 12 02 FB | 	rdlong	arg01, fp
0cd50     44 4E 85 F1 | 	sub	fp, #68
0cd54     00 14 06 F6 | 	mov	arg02, #0
0cd58     01 16 06 F6 | 	mov	arg03, #1
0cd5c     88 47 B1 FD | 	call	#__system___float_cmp
0cd60     00 FA 55 F2 | 	cmps	result1, #0 wc
0cd64     24 00 90 CD |  if_b	jmp	#LR__1022
0cd68     44 4E 05 F1 | 	add	fp, #68
0cd6c     A7 12 02 FB | 	rdlong	arg01, fp
0cd70     44 4E 85 F1 | 	sub	fp, #68
0cd74     00 80 20 FF 
0cd78     00 14 06 F6 | 	mov	arg02, ##1090519040
0cd7c     01 16 66 F6 | 	neg	arg03, #1
0cd80     64 47 B1 FD | 	call	#__system___float_cmp
0cd84     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd88     48 00 90 CD |  if_b	jmp	#LR__1023
0cd8c                 | LR__1022
0cd8c     0C 4E 05 F1 | 	add	fp, #12
0cd90     A7 22 02 FB | 	rdlong	local03, fp
0cd94     11 27 02 F6 | 	mov	local05, local03
0cd98     01 26 66 F0 | 	shl	local05, #1
0cd9c     11 27 02 F1 | 	add	local05, local03
0cda0     03 26 66 F0 | 	shl	local05, #3
0cda4     34 00 00 FF 
0cda8     38 E5 05 F1 | 	add	objptr, ##26936
0cdac     F2 26 02 F1 | 	add	local05, objptr
0cdb0     05 26 06 F1 | 	add	local05, #5
0cdb4     13 27 C2 FA | 	rdbyte	local05, local05
0cdb8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0cdbc     18 4E 05 F1 | 	add	fp, #24
0cdc0     A7 24 62 FC | 	wrlong	local04, fp
0cdc4     24 4E 85 F1 | 	sub	fp, #36
0cdc8     34 00 00 FF 
0cdcc     38 E5 85 F1 | 	sub	objptr, ##26936
0cdd0     54 00 90 FD | 	jmp	#LR__1024
0cdd4                 | LR__1023
0cdd4     44 4E 05 F1 | 	add	fp, #68
0cdd8     A7 12 02 FB | 	rdlong	arg01, fp
0cddc     44 4E 85 F1 | 	sub	fp, #68
0cde0     01 14 06 F6 | 	mov	arg02, #1
0cde4     94 47 B1 FD | 	call	#__system___float_tointeger
0cde8     24 4E 05 F1 | 	add	fp, #36
0cdec     A7 FA 61 FC | 	wrlong	result1, fp
0cdf0     18 4E 85 F1 | 	sub	fp, #24
0cdf4     A7 20 02 FB | 	rdlong	local02, fp
0cdf8     10 23 02 F6 | 	mov	local03, local02
0cdfc     01 22 66 F0 | 	shl	local03, #1
0ce00     10 23 02 F1 | 	add	local03, local02
0ce04     03 22 66 F0 | 	shl	local03, #3
0ce08     34 00 00 FF 
0ce0c     38 E5 05 F1 | 	add	objptr, ##26936
0ce10     F2 22 02 F1 | 	add	local03, objptr
0ce14     0C 4E 85 F1 | 	sub	fp, #12
0ce18     05 22 06 F1 | 	add	local03, #5
0ce1c     11 FB 41 FC | 	wrbyte	result1, local03
0ce20     34 00 00 FF 
0ce24     38 E5 85 F1 | 	sub	objptr, ##26936
0ce28                 | LR__1024
0ce28                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0ce28     48 4E 05 F1 | 	add	fp, #72
0ce2c     A7 12 02 FB | 	rdlong	arg01, fp
0ce30     48 4E 85 F1 | 	sub	fp, #72
0ce34     00 14 06 F6 | 	mov	arg02, #0
0ce38     01 16 06 F6 | 	mov	arg03, #1
0ce3c     A8 46 B1 FD | 	call	#__system___float_cmp
0ce40     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce44     24 00 90 CD |  if_b	jmp	#LR__1025
0ce48     48 4E 05 F1 | 	add	fp, #72
0ce4c     A7 12 02 FB | 	rdlong	arg01, fp
0ce50     48 4E 85 F1 | 	sub	fp, #72
0ce54     00 3D 22 FF 
0ce58     00 14 06 F6 | 	mov	arg02, ##1148846080
0ce5c     01 16 66 F6 | 	neg	arg03, #1
0ce60     84 46 B1 FD | 	call	#__system___float_cmp
0ce64     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce68     44 00 90 CD |  if_b	jmp	#LR__1026
0ce6c                 | LR__1025
0ce6c     0C 4E 05 F1 | 	add	fp, #12
0ce70     A7 20 02 FB | 	rdlong	local02, fp
0ce74     10 23 02 F6 | 	mov	local03, local02
0ce78     01 22 66 F0 | 	shl	local03, #1
0ce7c     10 23 02 F1 | 	add	local03, local02
0ce80     03 22 66 F0 | 	shl	local03, #3
0ce84     34 00 00 FF 
0ce88     38 E5 05 F1 | 	add	objptr, ##26936
0ce8c     F2 22 02 F1 | 	add	local03, objptr
0ce90     08 22 06 F1 | 	add	local03, #8
0ce94     11 25 02 FB | 	rdlong	local04, local03
0ce98     64 4E 05 F1 | 	add	fp, #100
0ce9c     A7 24 62 FC | 	wrlong	local04, fp
0cea0     70 4E 85 F1 | 	sub	fp, #112
0cea4     34 00 00 FF 
0cea8     38 E5 85 F1 | 	sub	objptr, ##26936
0ceac     48 00 90 FD | 	jmp	#LR__1027
0ceb0                 | LR__1026
0ceb0     48 4E 05 F1 | 	add	fp, #72
0ceb4     A7 24 02 FB | 	rdlong	local04, fp
0ceb8     28 4E 05 F1 | 	add	fp, #40
0cebc     A7 24 62 FC | 	wrlong	local04, fp
0cec0     64 4E 85 F1 | 	sub	fp, #100
0cec4     A7 20 02 FB | 	rdlong	local02, fp
0cec8     10 23 02 F6 | 	mov	local03, local02
0cecc     01 22 66 F0 | 	shl	local03, #1
0ced0     10 23 02 F1 | 	add	local03, local02
0ced4     03 22 66 F0 | 	shl	local03, #3
0ced8     34 00 00 FF 
0cedc     38 E5 05 F1 | 	add	objptr, ##26936
0cee0     F2 22 02 F1 | 	add	local03, objptr
0cee4     0C 4E 85 F1 | 	sub	fp, #12
0cee8     08 22 06 F1 | 	add	local03, #8
0ceec     11 25 62 FC | 	wrlong	local04, local03
0cef0     34 00 00 FF 
0cef4     38 E5 85 F1 | 	sub	objptr, ##26936
0cef8                 | LR__1027
0cef8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0cef8     38 4E 05 F1 | 	add	fp, #56
0cefc     A7 12 02 FB | 	rdlong	arg01, fp
0cf00     38 4E 85 F1 | 	sub	fp, #56
0cf04     00 14 06 F6 | 	mov	arg02, #0
0cf08     01 16 06 F6 | 	mov	arg03, #1
0cf0c     D8 45 B1 FD | 	call	#__system___float_cmp
0cf10     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf14     24 00 90 CD |  if_b	jmp	#LR__1028
0cf18     38 4E 05 F1 | 	add	fp, #56
0cf1c     A7 12 02 FB | 	rdlong	arg01, fp
0cf20     38 4E 85 F1 | 	sub	fp, #56
0cf24     20 0E 23 FF 
0cf28     00 14 06 F6 | 	mov	arg02, ##1176256512
0cf2c     01 16 66 F6 | 	neg	arg03, #1
0cf30     B4 45 B1 FD | 	call	#__system___float_cmp
0cf34     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf38     48 00 90 CD |  if_b	jmp	#LR__1029
0cf3c                 | LR__1028
0cf3c     0C 4E 05 F1 | 	add	fp, #12
0cf40     A7 22 02 FB | 	rdlong	local03, fp
0cf44     11 27 02 F6 | 	mov	local05, local03
0cf48     01 26 66 F0 | 	shl	local05, #1
0cf4c     11 27 02 F1 | 	add	local05, local03
0cf50     03 26 66 F0 | 	shl	local05, #3
0cf54     34 00 00 FF 
0cf58     38 E5 05 F1 | 	add	objptr, ##26936
0cf5c     F2 26 02 F1 | 	add	local05, objptr
0cf60     06 26 06 F1 | 	add	local05, #6
0cf64     13 27 E2 FA | 	rdword	local05, local05
0cf68     13 25 32 F9 | 	getword	local04, local05, #0
0cf6c     1C 4E 05 F1 | 	add	fp, #28
0cf70     A7 24 62 FC | 	wrlong	local04, fp
0cf74     28 4E 85 F1 | 	sub	fp, #40
0cf78     34 00 00 FF 
0cf7c     38 E5 85 F1 | 	sub	objptr, ##26936
0cf80     54 00 90 FD | 	jmp	#LR__1030
0cf84                 | LR__1029
0cf84     38 4E 05 F1 | 	add	fp, #56
0cf88     A7 12 02 FB | 	rdlong	arg01, fp
0cf8c     38 4E 85 F1 | 	sub	fp, #56
0cf90     01 14 06 F6 | 	mov	arg02, #1
0cf94     E4 45 B1 FD | 	call	#__system___float_tointeger
0cf98     28 4E 05 F1 | 	add	fp, #40
0cf9c     A7 FA 61 FC | 	wrlong	result1, fp
0cfa0     1C 4E 85 F1 | 	sub	fp, #28
0cfa4     A7 20 02 FB | 	rdlong	local02, fp
0cfa8     10 23 02 F6 | 	mov	local03, local02
0cfac     01 22 66 F0 | 	shl	local03, #1
0cfb0     10 23 02 F1 | 	add	local03, local02
0cfb4     03 22 66 F0 | 	shl	local03, #3
0cfb8     34 00 00 FF 
0cfbc     38 E5 05 F1 | 	add	objptr, ##26936
0cfc0     F2 22 02 F1 | 	add	local03, objptr
0cfc4     0C 4E 85 F1 | 	sub	fp, #12
0cfc8     06 22 06 F1 | 	add	local03, #6
0cfcc     11 FB 51 FC | 	wrword	result1, local03
0cfd0     34 00 00 FF 
0cfd4     38 E5 85 F1 | 	sub	objptr, ##26936
0cfd8                 | LR__1030
0cfd8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0cfd8     4C 4E 05 F1 | 	add	fp, #76
0cfdc     A7 12 02 FB | 	rdlong	arg01, fp
0cfe0     4C 4E 85 F1 | 	sub	fp, #76
0cfe4     00 C0 5F FF 
0cfe8     00 14 06 F6 | 	mov	arg02, ##-1082130432
0cfec     01 16 06 F6 | 	mov	arg03, #1
0cff0     F4 44 B1 FD | 	call	#__system___float_cmp
0cff4     00 FA 55 F2 | 	cmps	result1, #0 wc
0cff8     24 00 90 CD |  if_b	jmp	#LR__1031
0cffc     4C 4E 05 F1 | 	add	fp, #76
0d000     A7 12 02 FB | 	rdlong	arg01, fp
0d004     4C 4E 85 F1 | 	sub	fp, #76
0d008     00 C0 1F FF 
0d00c     00 14 06 F6 | 	mov	arg02, ##1065353216
0d010     01 16 66 F6 | 	neg	arg03, #1
0d014     D0 44 B1 FD | 	call	#__system___float_cmp
0d018     01 FA 55 F2 | 	cmps	result1, #1 wc
0d01c     44 00 90 CD |  if_b	jmp	#LR__1032
0d020                 | LR__1031
0d020     0C 4E 05 F1 | 	add	fp, #12
0d024     A7 20 02 FB | 	rdlong	local02, fp
0d028     10 23 02 F6 | 	mov	local03, local02
0d02c     01 22 66 F0 | 	shl	local03, #1
0d030     10 23 02 F1 | 	add	local03, local02
0d034     03 22 66 F0 | 	shl	local03, #3
0d038     34 00 00 FF 
0d03c     38 E5 05 F1 | 	add	objptr, ##26936
0d040     F2 22 02 F1 | 	add	local03, objptr
0d044     10 22 06 F1 | 	add	local03, #16
0d048     11 27 02 FB | 	rdlong	local05, local03
0d04c     5C 4E 05 F1 | 	add	fp, #92
0d050     A7 26 62 FC | 	wrlong	local05, fp
0d054     68 4E 85 F1 | 	sub	fp, #104
0d058     34 00 00 FF 
0d05c     38 E5 85 F1 | 	sub	objptr, ##26936
0d060     48 00 90 FD | 	jmp	#LR__1033
0d064                 | LR__1032
0d064     4C 4E 05 F1 | 	add	fp, #76
0d068     A7 26 02 FB | 	rdlong	local05, fp
0d06c     1C 4E 05 F1 | 	add	fp, #28
0d070     A7 26 62 FC | 	wrlong	local05, fp
0d074     5C 4E 85 F1 | 	sub	fp, #92
0d078     A7 20 02 FB | 	rdlong	local02, fp
0d07c     10 23 02 F6 | 	mov	local03, local02
0d080     01 22 66 F0 | 	shl	local03, #1
0d084     10 23 02 F1 | 	add	local03, local02
0d088     03 22 66 F0 | 	shl	local03, #3
0d08c     34 00 00 FF 
0d090     38 E5 05 F1 | 	add	objptr, ##26936
0d094     F2 22 02 F1 | 	add	local03, objptr
0d098     0C 4E 85 F1 | 	sub	fp, #12
0d09c     10 22 06 F1 | 	add	local03, #16
0d0a0     11 27 62 FC | 	wrlong	local05, local03
0d0a4     34 00 00 FF 
0d0a8     38 E5 85 F1 | 	sub	objptr, ##26936
0d0ac                 | LR__1033
0d0ac                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0d0ac     50 4E 05 F1 | 	add	fp, #80
0d0b0     A7 12 02 FB | 	rdlong	arg01, fp
0d0b4     50 4E 85 F1 | 	sub	fp, #80
0d0b8     00 14 06 F6 | 	mov	arg02, #0
0d0bc     01 16 06 F6 | 	mov	arg03, #1
0d0c0     24 44 B1 FD | 	call	#__system___float_cmp
0d0c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d0c8     24 00 90 CD |  if_b	jmp	#LR__1034
0d0cc     50 4E 05 F1 | 	add	fp, #80
0d0d0     A7 12 02 FB | 	rdlong	arg01, fp
0d0d4     50 4E 85 F1 | 	sub	fp, #80
0d0d8     80 BF 21 FF 
0d0dc     00 14 06 F6 | 	mov	arg02, ##1132396544
0d0e0     01 16 66 F6 | 	neg	arg03, #1
0d0e4     00 44 B1 FD | 	call	#__system___float_cmp
0d0e8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d0ec     44 00 90 CD |  if_b	jmp	#LR__1035
0d0f0                 | LR__1034
0d0f0     0C 4E 05 F1 | 	add	fp, #12
0d0f4     A7 22 02 FB | 	rdlong	local03, fp
0d0f8     11 27 02 F6 | 	mov	local05, local03
0d0fc     01 26 66 F0 | 	shl	local05, #1
0d100     11 27 02 F1 | 	add	local05, local03
0d104     03 26 66 F0 | 	shl	local05, #3
0d108     34 00 00 FF 
0d10c     38 E5 05 F1 | 	add	objptr, ##26936
0d110     F2 26 02 F1 | 	add	local05, objptr
0d114     14 26 06 F1 | 	add	local05, #20
0d118     13 25 E2 FA | 	rdword	local04, local05
0d11c     20 4E 05 F1 | 	add	fp, #32
0d120     A7 24 62 FC | 	wrlong	local04, fp
0d124     2C 4E 85 F1 | 	sub	fp, #44
0d128     34 00 00 FF 
0d12c     38 E5 85 F1 | 	sub	objptr, ##26936
0d130     54 00 90 FD | 	jmp	#LR__1036
0d134                 | LR__1035
0d134     50 4E 05 F1 | 	add	fp, #80
0d138     A7 12 02 FB | 	rdlong	arg01, fp
0d13c     50 4E 85 F1 | 	sub	fp, #80
0d140     01 14 06 F6 | 	mov	arg02, #1
0d144     34 44 B1 FD | 	call	#__system___float_tointeger
0d148     2C 4E 05 F1 | 	add	fp, #44
0d14c     A7 FA 61 FC | 	wrlong	result1, fp
0d150     20 4E 85 F1 | 	sub	fp, #32
0d154     A7 20 02 FB | 	rdlong	local02, fp
0d158     10 23 02 F6 | 	mov	local03, local02
0d15c     01 22 66 F0 | 	shl	local03, #1
0d160     10 23 02 F1 | 	add	local03, local02
0d164     03 22 66 F0 | 	shl	local03, #3
0d168     34 00 00 FF 
0d16c     38 E5 05 F1 | 	add	objptr, ##26936
0d170     F2 22 02 F1 | 	add	local03, objptr
0d174     0C 4E 85 F1 | 	sub	fp, #12
0d178     14 22 06 F1 | 	add	local03, #20
0d17c     11 FB 51 FC | 	wrword	result1, local03
0d180     34 00 00 FF 
0d184     38 E5 85 F1 | 	sub	objptr, ##26936
0d188                 | LR__1036
0d188     60 4E 05 F1 | 	add	fp, #96
0d18c     A7 12 02 FB | 	rdlong	arg01, fp
0d190     10 4E 05 F1 | 	add	fp, #16
0d194     A7 14 02 FB | 	rdlong	arg02, fp
0d198     70 4E 85 F1 | 	sub	fp, #112
0d19c     18 41 B1 FD | 	call	#__system___float_div
0d1a0     FD 12 02 F6 | 	mov	arg01, result1
0d1a4     01 14 06 F6 | 	mov	arg02, #1
0d1a8     D0 43 B1 FD | 	call	#__system___float_tointeger
0d1ac     FD 24 02 F6 | 	mov	local04, result1
0d1b0     14 4E 05 F1 | 	add	fp, #20
0d1b4     A7 24 62 FC | 	wrlong	local04, fp
0d1b8     54 4E 05 F1 | 	add	fp, #84
0d1bc     A7 14 02 FB | 	rdlong	arg02, fp
0d1c0     68 4E 85 F1 | 	sub	fp, #104
0d1c4     00 00 23 FF 
0d1c8     00 12 06 F6 | 	mov	arg01, ##1174405120
0d1cc     E4 3E B1 FD | 	call	#__system___float_mul
0d1d0     FD 12 02 F6 | 	mov	arg01, result1
0d1d4     01 14 06 F6 | 	mov	arg02, #1
0d1d8     A0 43 B1 FD | 	call	#__system___float_tointeger
0d1dc     0D 24 C6 F9 | 	decod	local04, #13
0d1e0     FD 24 02 F1 | 	add	local04, result1
0d1e4     18 4E 05 F1 | 	add	fp, #24
0d1e8     A7 24 62 FC | 	wrlong	local04, fp
0d1ec     54 4E 05 F1 | 	add	fp, #84
0d1f0     A7 14 02 FB | 	rdlong	arg02, fp
0d1f4     6C 4E 85 F1 | 	sub	fp, #108
0d1f8     00 3D 22 FF 
0d1fc     00 12 06 F6 | 	mov	arg01, ##1148846080
0d200     B0 3E B1 FD | 	call	#__system___float_mul
0d204     FD 12 02 F6 | 	mov	arg01, result1
0d208     01 14 06 F6 | 	mov	arg02, #1
0d20c     6C 43 B1 FD | 	call	#__system___float_tointeger
0d210     1C 4E 05 F1 | 	add	fp, #28
0d214     A7 FA 61 FC | 	wrlong	result1, fp
0d218     57 00 00 FF 
0d21c     00 E4 05 F1 | 	add	objptr, ##44544
0d220     F2 24 02 FB | 	rdlong	local04, objptr
0d224     57 00 00 FF 
0d228     00 E4 85 F1 | 	sub	objptr, ##44544
0d22c     10 4E 85 F1 | 	sub	fp, #16
0d230     A7 20 02 FB | 	rdlong	local02, fp
0d234     06 20 66 F0 | 	shl	local02, #6
0d238     10 25 02 F1 | 	add	local04, local02
0d23c     04 4E 85 F1 | 	sub	fp, #4
0d240     A7 24 62 FC | 	wrlong	local04, fp
0d244     5C 4E 05 F1 | 	add	fp, #92
0d248     A7 12 02 FB | 	rdlong	arg01, fp
0d24c     64 4E 85 F1 | 	sub	fp, #100
0d250     72 3F 20 FF 
0d254     EA 14 06 F6 | 	mov	arg02, ##1082057962
0d258     58 3E B1 FD | 	call	#__system___float_mul
0d25c     FD 12 02 F6 | 	mov	arg01, result1
0d260     01 14 06 F6 | 	mov	arg02, #1
0d264     14 43 B1 FD | 	call	#__system___float_tointeger
0d268     10 4E 05 F1 | 	add	fp, #16
0d26c     A7 FA 61 FC | 	wrlong	result1, fp
0d270                 | ' 
0d270                 | ' speed=round(speed_coeff/slen)
0d270                 | ' ipan=8192+round(8192*pan)
0d270                 | ' ivol=round(1000.0*vol)
0d270                 | ' base2=base+64*channel
0d270                 | ' skip=round(freq*3.9827219) 
0d270                 | ' if wave <8 then 
0d270     10 4E 05 F1 | 	add	fp, #16
0d274     A7 24 02 FB | 	rdlong	local04, fp
0d278     20 4E 85 F1 | 	sub	fp, #32
0d27c     08 24 56 F2 | 	cmps	local04, #8 wc
0d280     40 00 90 3D |  if_ae	jmp	#LR__1037
0d284     08 4E 05 F1 | 	add	fp, #8
0d288     A7 12 02 FB | 	rdlong	arg01, fp
0d28c     08 12 06 F1 | 	add	arg01, #8
0d290     18 4E 05 F1 | 	add	fp, #24
0d294     A7 14 02 FB | 	rdlong	arg02, fp
0d298     20 4E 85 F1 | 	sub	fp, #32
0d29c     0B 14 66 F0 | 	shl	arg02, #11
0d2a0     0C 00 00 FF 
0d2a4     D8 E4 05 F1 | 	add	objptr, ##6360
0d2a8     F2 14 02 F1 | 	add	arg02, objptr
0d2ac     0C 00 00 FF 
0d2b0     D8 E4 85 F1 | 	sub	objptr, ##6360
0d2b4     00 00 60 FF 
0d2b8     00 14 06 F1 | 	add	arg02, ##-1073741824
0d2bc     09 15 62 FC | 	wrlong	arg02, arg01
0d2c0     18 00 90 FD | 	jmp	#LR__1038
0d2c4                 | LR__1037
0d2c4     08 4E 05 F1 | 	add	fp, #8
0d2c8     A7 12 02 FB | 	rdlong	arg01, fp
0d2cc     08 4E 85 F1 | 	sub	fp, #8
0d2d0     08 12 06 F1 | 	add	arg01, #8
0d2d4     00 00 E4 FF 
0d2d8     09 01 68 FC | 	wrlong	##-939524096, arg01
0d2dc                 | LR__1038
0d2dc     08 4E 05 F1 | 	add	fp, #8
0d2e0     A7 12 02 FB | 	rdlong	arg01, fp
0d2e4     10 12 06 F1 | 	add	arg01, #16
0d2e8     04 00 80 FF 
0d2ec     09 01 68 FC | 	wrlong	##2048, arg01
0d2f0     A7 12 02 FB | 	rdlong	arg01, fp
0d2f4     0C 12 06 F1 | 	add	arg01, #12
0d2f8     09 01 68 FC | 	wrlong	#0, arg01
0d2fc     A7 12 02 FB | 	rdlong	arg01, fp
0d300     14 12 06 F1 | 	add	arg01, #20
0d304     14 4E 05 F1 | 	add	fp, #20
0d308     A7 14 02 FB | 	rdlong	arg02, fp
0d30c     09 15 52 FC | 	wrword	arg02, arg01
0d310     14 4E 85 F1 | 	sub	fp, #20
0d314     A7 12 02 FB | 	rdlong	arg01, fp
0d318     16 12 06 F1 | 	add	arg01, #22
0d31c     10 4E 05 F1 | 	add	fp, #16
0d320     A7 14 02 FB | 	rdlong	arg02, fp
0d324     09 15 52 FC | 	wrword	arg02, arg01
0d328                 | '   
0d328                 | ' lpoke base2+16,2048
0d328                 | ' lpoke base2+12,0
0d328                 | ' dpoke base2+20,ivol 
0d328                 | ' dpoke base2+22,ipan 
0d328                 | ' if wave<8 then
0d328     08 4E 05 F1 | 	add	fp, #8
0d32c     A7 24 02 FB | 	rdlong	local04, fp
0d330     20 4E 85 F1 | 	sub	fp, #32
0d334     08 24 56 F2 | 	cmps	local04, #8 wc
0d338     2C 00 90 3D |  if_ae	jmp	#LR__1039
0d33c     08 4E 05 F1 | 	add	fp, #8
0d340     A7 12 02 FB | 	rdlong	arg01, fp
0d344     18 12 06 F1 | 	add	arg01, #24
0d348     09 29 58 FC | 	wrword	#20, arg01
0d34c     A7 12 02 FB | 	rdlong	arg01, fp
0d350     1A 12 06 F1 | 	add	arg01, #26
0d354     08 4E 05 F1 | 	add	fp, #8
0d358     A7 14 02 FB | 	rdlong	arg02, fp
0d35c     10 4E 85 F1 | 	sub	fp, #16
0d360     09 15 52 FC | 	wrword	arg02, arg01
0d364     48 00 90 FD | 	jmp	#LR__1040
0d368                 | LR__1039
0d368     08 4E 05 F1 | 	add	fp, #8
0d36c     A7 24 02 FB | 	rdlong	local04, fp
0d370     18 24 06 F1 | 	add	local04, #24
0d374     5C 4E 05 F1 | 	add	fp, #92
0d378     A7 14 02 FB | 	rdlong	arg02, fp
0d37c     64 4E 85 F1 | 	sub	fp, #100
0d380     58 D0 24 FF 
0d384     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d388     2C 3F B1 FD | 	call	#__system___float_div
0d38c     FD 12 02 F6 | 	mov	arg01, result1
0d390     01 14 06 F6 | 	mov	arg02, #1
0d394     E4 41 B1 FD | 	call	#__system___float_tointeger
0d398     12 FB 51 FC | 	wrword	result1, local04
0d39c     08 4E 05 F1 | 	add	fp, #8
0d3a0     A7 12 02 FB | 	rdlong	arg01, fp
0d3a4     08 4E 85 F1 | 	sub	fp, #8
0d3a8     1A 12 06 F1 | 	add	arg01, #26
0d3ac     09 01 5A FC | 	wrword	#256, arg01
0d3b0                 | LR__1040
0d3b0     08 4E 05 F1 | 	add	fp, #8
0d3b4     A7 12 02 FB | 	rdlong	arg01, fp
0d3b8     20 12 06 F1 | 	add	arg01, #32
0d3bc     09 01 68 FC | 	wrlong	#0, arg01
0d3c0                 | ' 'dpoke base2+28,$4000_0000
0d3c0                 | ' lpoke base2+32,0 
0d3c0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d3c0     1C 4E 05 F1 | 	add	fp, #28
0d3c4     A7 24 02 FB | 	rdlong	local04, fp
0d3c8     24 4E 85 F1 | 	sub	fp, #36
0d3cc     08 24 0E F2 | 	cmp	local04, #8 wz
0d3d0     18 00 90 5D |  if_ne	jmp	#LR__1041
0d3d4     08 4E 05 F1 | 	add	fp, #8
0d3d8     A7 12 02 FB | 	rdlong	arg01, fp
0d3dc     08 4E 85 F1 | 	sub	fp, #8
0d3e0     24 12 06 F1 | 	add	arg01, #36
0d3e4     09 01 68 FC | 	wrlong	#0, arg01
0d3e8     34 00 90 FD | 	jmp	#LR__1042
0d3ec                 | LR__1041
0d3ec     08 4E 05 F1 | 	add	fp, #8
0d3f0     A7 12 02 FB | 	rdlong	arg01, fp
0d3f4     24 12 06 F1 | 	add	arg01, #36
0d3f8     1C 4E 05 F1 | 	add	fp, #28
0d3fc     A7 14 02 FB | 	rdlong	arg02, fp
0d400     24 4E 85 F1 | 	sub	fp, #36
0d404     09 14 66 F0 | 	shl	arg02, #9
0d408     2C 00 00 FF 
0d40c     D8 E4 05 F1 | 	add	objptr, ##22744
0d410     F2 14 02 F1 | 	add	arg02, objptr
0d414     2C 00 00 FF 
0d418     D8 E4 85 F1 | 	sub	objptr, ##22744
0d41c     09 15 62 FC | 	wrlong	arg02, arg01
0d420                 | LR__1042
0d420     08 4E 05 F1 | 	add	fp, #8
0d424     A7 12 02 FB | 	rdlong	arg01, fp
0d428     28 12 06 F1 | 	add	arg01, #40
0d42c     0C 4E 05 F1 | 	add	fp, #12
0d430     A7 14 02 FB | 	rdlong	arg02, fp
0d434     09 15 62 FC | 	wrlong	arg02, arg01
0d438     0C 4E 85 F1 | 	sub	fp, #12
0d43c     A7 12 02 FB | 	rdlong	arg01, fp
0d440     2C 12 06 F1 | 	add	arg01, #44
0d444     24 4E 05 F1 | 	add	fp, #36
0d448     A7 14 02 FB | 	rdlong	arg02, fp
0d44c     09 15 62 FC | 	wrlong	arg02, arg01
0d450                 | ' lpoke base2+40,speed' speed
0d450                 | ' lpoke base2+44,sus 'len
0d450                 | ' 
0d450                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d450     04 4E 85 F1 | 	sub	fp, #4
0d454     A7 24 02 FB | 	rdlong	local04, fp
0d458     28 4E 85 F1 | 	sub	fp, #40
0d45c     01 24 56 F2 | 	cmps	local04, #1 wc
0d460     28 4E 05 31 |  if_ae	add	fp, #40
0d464     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d468     28 4E 85 31 |  if_ae	sub	fp, #40
0d46c     BC 13 B1 3D |  if_ae	call	#__system___waitms
0d470     A7 F0 03 F6 | 	mov	ptra, fp
0d474     B2 00 A0 FD | 	call	#popregs_
0d478                 | _do_play_ret
0d478     2D 00 64 FD | 	ret
0d47c                 | 
0d47c                 | ' 
0d47c                 | ' sub do_release
0d47c                 | _do_release
0d47c     00 4A 05 F6 | 	mov	COUNT_, #0
0d480     A8 00 A0 FD | 	call	#pushregs_
0d484     10 F0 07 F1 | 	add	ptra, #16
0d488     18 D0 BF FD | 	call	#_pop
0d48c     FF 14 02 F6 | 	mov	arg02, result3
0d490     A7 FA 61 FC | 	wrlong	result1, fp
0d494     04 4E 05 F1 | 	add	fp, #4
0d498     A7 FC 61 FC | 	wrlong	result2, fp
0d49c     04 4E 05 F1 | 	add	fp, #4
0d4a0     A7 14 62 FC | 	wrlong	arg02, fp
0d4a4     08 4E 85 F1 | 	sub	fp, #8
0d4a8     A7 12 02 F6 | 	mov	arg01, fp
0d4ac     C0 5A B0 FD | 	call	#_converttoint
0d4b0     0C 4E 05 F1 | 	add	fp, #12
0d4b4     A7 FA 61 FC | 	wrlong	result1, fp
0d4b8                 | ' t1=pop()
0d4b8                 | ' channel=converttoint(t1)
0d4b8                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d4b8     0C 4E 85 F1 | 	sub	fp, #12
0d4bc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4c0     44 00 90 CD |  if_b	jmp	#LR__1050
0d4c4     0C 4E 05 F1 | 	add	fp, #12
0d4c8     A7 14 02 FB | 	rdlong	arg02, fp
0d4cc     0C 4E 85 F1 | 	sub	fp, #12
0d4d0     08 14 56 F2 | 	cmps	arg02, #8 wc
0d4d4     30 00 90 3D |  if_ae	jmp	#LR__1050
0d4d8     57 00 00 FF 
0d4dc     00 E4 05 F1 | 	add	objptr, ##44544
0d4e0     F2 12 02 FB | 	rdlong	arg01, objptr
0d4e4     57 00 00 FF 
0d4e8     00 E4 85 F1 | 	sub	objptr, ##44544
0d4ec     0C 4E 05 F1 | 	add	fp, #12
0d4f0     A7 14 02 FB | 	rdlong	arg02, fp
0d4f4     0C 4E 85 F1 | 	sub	fp, #12
0d4f8     06 14 66 F0 | 	shl	arg02, #6
0d4fc     0A 13 02 F1 | 	add	arg01, arg02
0d500     2C 12 06 F1 | 	add	arg01, #44
0d504     09 FF 69 FC | 	wrlong	#255, arg01
0d508                 | LR__1050
0d508     A7 F0 03 F6 | 	mov	ptra, fp
0d50c     B2 00 A0 FD | 	call	#popregs_
0d510                 | _do_release_ret
0d510     2D 00 64 FD | 	ret
0d514                 | 
0d514                 | ' 
0d514                 | ' 
0d514                 | ' sub do_defsnd
0d514                 | _do_defsnd
0d514     05 4A 05 F6 | 	mov	COUNT_, #5
0d518     A8 00 A0 FD | 	call	#pushregs_
0d51c     88 F0 07 F1 | 	add	ptra, #136
0d520     6A 00 00 FF 
0d524     70 E4 05 F1 | 	add	objptr, ##54384
0d528     F2 1A 02 FB | 	rdlong	arg05, objptr
0d52c     0D 19 02 F6 | 	mov	arg04, arg05
0d530     01 18 66 F0 | 	shl	arg04, #1
0d534     0D 19 02 F1 | 	add	arg04, arg05
0d538     02 18 66 F0 | 	shl	arg04, #2
0d53c     03 00 00 FF 
0d540     04 E4 85 F1 | 	sub	objptr, ##1540
0d544     F2 18 02 F1 | 	add	arg04, objptr
0d548     0C 1B 02 FB | 	rdlong	arg05, arg04
0d54c     A7 1A 62 FC | 	wrlong	arg05, fp
0d550                 | ' 
0d550                 | ' numpar=compiledline(lineptr_e).result.uresult
0d550                 | ' 
0d550                 | ' 
0d550                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d550                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d550                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d550                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d550                 | ' 
0d550                 | ' if numpar<2 then return
0d550     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d554     67 00 00 FF 
0d558     6C E4 85 F1 | 	sub	objptr, ##52844
0d55c     A0 09 90 CD |  if_b	jmp	#LR__1088
0d560                 | ' 
0d560                 | '   
0d560                 | ' if numpar=2 then
0d560     A7 1A 02 FB | 	rdlong	arg05, fp
0d564     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d568     0C 04 90 5D |  if_ne	jmp	#LR__1071
0d56c     34 CF BF FD | 	call	#_pop
0d570     FF 1A 02 F6 | 	mov	arg05, result3
0d574     2C 4E 05 F1 | 	add	fp, #44
0d578     A7 FA 61 FC | 	wrlong	result1, fp
0d57c     04 4E 05 F1 | 	add	fp, #4
0d580     A7 FC 61 FC | 	wrlong	result2, fp
0d584     04 4E 05 F1 | 	add	fp, #4
0d588     A7 1A 62 FC | 	wrlong	arg05, fp
0d58c                 | '   t1=pop()
0d58c                 | '   if t1.result_type=result_string2 then 
0d58c     34 4E 85 F1 | 	sub	fp, #52
0d590     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d594     20 00 90 5D |  if_ne	jmp	#LR__1060
0d598     2C 4E 05 F1 | 	add	fp, #44
0d59c     A7 12 02 FB | 	rdlong	arg01, fp
0d5a0     2C 4E 85 F1 | 	sub	fp, #44
0d5a4     A4 11 B0 FD | 	call	#_convertstring
0d5a8     38 4E 05 F1 | 	add	fp, #56
0d5ac     A7 FA 61 FC | 	wrlong	result1, fp
0d5b0     38 4E 85 F1 | 	sub	fp, #56
0d5b4     58 00 90 FD | 	jmp	#LR__1063
0d5b8                 | LR__1060
0d5b8     34 4E 05 F1 | 	add	fp, #52
0d5bc     A7 1A 02 FB | 	rdlong	arg05, fp
0d5c0     34 4E 85 F1 | 	sub	fp, #52
0d5c4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d5c8     18 00 90 5D |  if_ne	jmp	#LR__1061
0d5cc     2C 4E 05 F1 | 	add	fp, #44
0d5d0     A7 1A 02 FB | 	rdlong	arg05, fp
0d5d4     0C 4E 05 F1 | 	add	fp, #12
0d5d8     A7 1A 62 FC | 	wrlong	arg05, fp
0d5dc     38 4E 85 F1 | 	sub	fp, #56
0d5e0     2C 00 90 FD | 	jmp	#LR__1062
0d5e4                 | LR__1061
0d5e4     70 01 00 FF 
0d5e8     5C 1B 06 F6 | 	mov	arg05, ##@LR__5097
0d5ec     38 4E 05 F1 | 	add	fp, #56
0d5f0     A7 1A 62 FC | 	wrlong	arg05, fp
0d5f4     0C 4E 85 F1 | 	sub	fp, #12
0d5f8     A7 12 02 F6 | 	mov	arg01, fp
0d5fc     2C 4E 85 F1 | 	sub	fp, #44
0d600     6C 59 B0 FD | 	call	#_converttoint
0d604     14 4E 05 F1 | 	add	fp, #20
0d608     A7 FA 61 FC | 	wrlong	result1, fp
0d60c     14 4E 85 F1 | 	sub	fp, #20
0d610                 | LR__1062
0d610                 | LR__1063
0d610                 | ' 
0d610                 | '     
0d610                 | '   if s<>"" then 
0d610     38 4E 05 F1 | 	add	fp, #56
0d614     A7 12 02 FB | 	rdlong	arg01, fp
0d618     38 4E 85 F1 | 	sub	fp, #56
0d61c     70 01 00 FF 
0d620     5D 15 06 F6 | 	mov	arg02, ##@LR__5098
0d624     38 0F B1 FD | 	call	#__system___string_cmp
0d628     00 FA 0D F2 | 	cmp	result1, #0 wz
0d62c     88 01 90 AD |  if_e	jmp	#LR__1065
0d630     70 CE BF FD | 	call	#_pop
0d634     FF 1A 02 F6 | 	mov	arg05, result3
0d638     2C 4E 05 F1 | 	add	fp, #44
0d63c     A7 FA 61 FC | 	wrlong	result1, fp
0d640     04 4E 05 F1 | 	add	fp, #4
0d644     A7 FC 61 FC | 	wrlong	result2, fp
0d648     04 4E 05 F1 | 	add	fp, #4
0d64c     A7 1A 62 FC | 	wrlong	arg05, fp
0d650     08 4E 85 F1 | 	sub	fp, #8
0d654     A7 12 02 F6 | 	mov	arg01, fp
0d658     2C 4E 85 F1 | 	sub	fp, #44
0d65c     10 59 B0 FD | 	call	#_converttoint
0d660     10 4E 05 F1 | 	add	fp, #16
0d664     A7 FA 61 FC | 	wrlong	result1, fp
0d668     10 4E 85 F1 | 	sub	fp, #16
0d66c                 | '     t1=pop()
0d66c                 | '     channel=converttoint(t1) 
0d66c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0d66c     09 12 06 F6 | 	mov	arg01, #9
0d670     88 5E B1 FD | 	call	#__system__close
0d674     09 1E 06 F6 | 	mov	local01, #9
0d678     70 01 00 FF 
0d67c     5E 13 06 F6 | 	mov	arg01, ##@LR__5099
0d680     38 4E 05 F1 | 	add	fp, #56
0d684     A7 14 02 FB | 	rdlong	arg02, fp
0d688     38 4E 85 F1 | 	sub	fp, #56
0d68c     04 0F B1 FD | 	call	#__system___string_concat
0d690     FD 14 02 F6 | 	mov	arg02, result1
0d694     0F 13 02 F6 | 	mov	arg01, local01
0d698     00 16 06 F6 | 	mov	arg03, #0
0d69c     98 1A B1 FD | 	call	#__system___basic_open_string
0d6a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d6a4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d6a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d6ac     7B 00 00 FF 
0d6b0     10 E5 05 F1 | 	add	objptr, ##63248
0d6b4     F2 FA 61 FC | 	wrlong	result1, objptr
0d6b8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d6b8     7B 00 00 FF 
0d6bc     10 E5 85 F1 | 	sub	objptr, ##63248
0d6c0     B0 00 90 AD |  if_e	jmp	#LR__1064
0d6c4     00 12 06 F6 | 	mov	arg01, #0
0d6c8     00 68 B1 FD | 	call	#__system___getiolock_0475
0d6cc     FD 12 02 F6 | 	mov	arg01, result1
0d6d0     64 0E B1 FD | 	call	#__system___lockmem
0d6d4     70 01 00 FF 
0d6d8     6B 15 06 F6 | 	mov	arg02, ##@LR__5100
0d6dc     00 12 06 F6 | 	mov	arg01, #0
0d6e0     00 16 06 F6 | 	mov	arg03, #0
0d6e4     54 1B B1 FD | 	call	#__system___basic_print_string
0d6e8     7B 00 00 FF 
0d6ec     10 E5 05 F1 | 	add	objptr, ##63248
0d6f0     F2 14 02 FB | 	rdlong	arg02, objptr
0d6f4     7B 00 00 FF 
0d6f8     10 E5 85 F1 | 	sub	objptr, ##63248
0d6fc     00 12 06 F6 | 	mov	arg01, #0
0d700     00 16 06 F6 | 	mov	arg03, #0
0d704     0A 18 06 F6 | 	mov	arg04, #10
0d708     74 1B B1 FD | 	call	#__system___basic_print_integer
0d70c     70 01 00 FF 
0d710     79 15 06 F6 | 	mov	arg02, ##@LR__5101
0d714     00 12 06 F6 | 	mov	arg01, #0
0d718     00 16 06 F6 | 	mov	arg03, #0
0d71c     1C 1B B1 FD | 	call	#__system___basic_print_string
0d720     00 1E 06 F6 | 	mov	local01, #0
0d724     7B 00 00 FF 
0d728     10 E5 05 F1 | 	add	objptr, ##63248
0d72c     F2 12 02 FB | 	rdlong	arg01, objptr
0d730     7B 00 00 FF 
0d734     10 E5 85 F1 | 	sub	objptr, ##63248
0d738     8C 34 B1 FD | 	call	#__system___strerror
0d73c     FD 14 02 F6 | 	mov	arg02, result1
0d740     0F 13 02 F6 | 	mov	arg01, local01
0d744     00 16 06 F6 | 	mov	arg03, #0
0d748     F0 1A B1 FD | 	call	#__system___basic_print_string
0d74c     00 12 06 F6 | 	mov	arg01, #0
0d750     0A 14 06 F6 | 	mov	arg02, #10
0d754     00 16 06 F6 | 	mov	arg03, #0
0d758     88 1A B1 FD | 	call	#__system___basic_print_char
0d75c     00 12 06 F6 | 	mov	arg01, #0
0d760     68 67 B1 FD | 	call	#__system___getiolock_0475
0d764     FD 00 68 FC | 	wrlong	#0, result1
0d768     09 12 06 F6 | 	mov	arg01, #9
0d76c     8C 5D B1 FD | 	call	#__system__close
0d770     8C 07 90 FD | 	jmp	#LR__1088
0d774                 | LR__1064
0d774                 | '     get #9,17,samplebuf(channel,0),1024
0d774     10 4E 05 F1 | 	add	fp, #16
0d778     A7 16 02 FB | 	rdlong	arg03, fp
0d77c     10 4E 85 F1 | 	sub	fp, #16
0d780     0B 16 66 F0 | 	shl	arg03, #11
0d784     0C 00 00 FF 
0d788     D8 E4 05 F1 | 	add	objptr, ##6360
0d78c     F2 16 02 F1 | 	add	arg03, objptr
0d790     09 12 06 F6 | 	mov	arg01, #9
0d794     11 14 06 F6 | 	mov	arg02, #17
0d798     0A 18 C6 F9 | 	decod	arg04, #10
0d79c     02 1A 06 F6 | 	mov	arg05, #2
0d7a0     0C 00 00 FF 
0d7a4     D8 E4 85 F1 | 	sub	objptr, ##6360
0d7a8     A0 1B B1 FD | 	call	#__system___basic_get
0d7ac                 | '     close #9
0d7ac     09 12 06 F6 | 	mov	arg01, #9
0d7b0     48 5D B1 FD | 	call	#__system__close
0d7b4                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d7b4                 | '     return
0d7b4     48 07 90 FD | 	jmp	#LR__1088
0d7b8                 | LR__1065
0d7b8                 | '     if wptr < ($80000 - 2048) then 
0d7b8     14 4E 05 F1 | 	add	fp, #20
0d7bc     A7 1E 02 FB | 	rdlong	local01, fp
0d7c0     14 4E 85 F1 | 	sub	fp, #20
0d7c4     FC 03 00 FF 
0d7c8     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d7cc     80 00 90 3D |  if_ae	jmp	#LR__1068
0d7d0                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d7d0     04 4E 05 F1 | 	add	fp, #4
0d7d4     A7 00 68 FC | 	wrlong	#0, fp
0d7d8     04 4E 85 F1 | 	sub	fp, #4
0d7dc     0C 00 00 FF 
0d7e0     D8 E4 05 F1 | 	add	objptr, ##6360
0d7e4     97 2E 48 FB | 	callpa	#(@LR__1067-@LR__1066)>>2,fcache_load_ptr_
0d7e8                 | LR__1066
0d7e8     10 4E 05 F1 | 	add	fp, #16
0d7ec     A7 1E 02 FB | 	rdlong	local01, fp
0d7f0     0B 1E 66 F0 | 	shl	local01, #11
0d7f4     F2 1E 02 F1 | 	add	local01, objptr
0d7f8     0C 4E 85 F1 | 	sub	fp, #12
0d7fc     A7 1A 02 FB | 	rdlong	arg05, fp
0d800     0D 19 02 F6 | 	mov	arg04, arg05
0d804     01 18 66 F0 | 	shl	arg04, #1
0d808     0F 19 02 F1 | 	add	arg04, local01
0d80c     10 4E 05 F1 | 	add	fp, #16
0d810     A7 12 02 FB | 	rdlong	arg01, fp
0d814     01 1A 66 F0 | 	shl	arg05, #1
0d818     0D 13 02 F1 | 	add	arg01, arg05
0d81c     09 FB E1 FA | 	rdword	result1, arg01
0d820     0C FB 51 FC | 	wrword	result1, arg04
0d824     10 4E 85 F1 | 	sub	fp, #16
0d828     A7 1E 02 FB | 	rdlong	local01, fp
0d82c     01 1E 06 F1 | 	add	local01, #1
0d830     A7 1E 62 FC | 	wrlong	local01, fp
0d834     04 4E 85 F1 | 	sub	fp, #4
0d838     02 00 00 FF 
0d83c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d840     A4 FF 9F CD |  if_b	jmp	#LR__1066
0d844                 | LR__1067
0d844     0C 00 00 FF 
0d848     D8 E4 85 F1 | 	sub	objptr, ##6360
0d84c     B0 06 90 FD | 	jmp	#LR__1088
0d850                 | LR__1068
0d850                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d850     04 4E 05 F1 | 	add	fp, #4
0d854     A7 00 68 FC | 	wrlong	#0, fp
0d858     04 4E 85 F1 | 	sub	fp, #4
0d85c                 | LR__1069
0d85c     10 4E 05 F1 | 	add	fp, #16
0d860     A7 1A 02 FB | 	rdlong	arg05, fp
0d864     0B 1A 66 F0 | 	shl	arg05, #11
0d868     0C 00 00 FF 
0d86c     D8 E4 05 F1 | 	add	objptr, ##6360
0d870     F2 1A 02 F1 | 	add	arg05, objptr
0d874     0C 4E 85 F1 | 	sub	fp, #12
0d878     A7 18 02 FB | 	rdlong	arg04, fp
0d87c     0C 21 02 F6 | 	mov	local02, arg04
0d880     01 20 66 F0 | 	shl	local02, #1
0d884     0D 21 02 F1 | 	add	local02, arg05
0d888     10 4E 05 F1 | 	add	fp, #16
0d88c     A7 12 02 FB | 	rdlong	arg01, fp
0d890     14 4E 85 F1 | 	sub	fp, #20
0d894     01 18 66 F0 | 	shl	arg04, #1
0d898     0C 13 02 F1 | 	add	arg01, arg04
0d89c     0C 00 00 FF 
0d8a0     D8 E4 85 F1 | 	sub	objptr, ##6360
0d8a4     1C CB B0 FD | 	call	#_psdpeek
0d8a8     10 FB 51 FC | 	wrword	result1, local02
0d8ac     04 4E 05 F1 | 	add	fp, #4
0d8b0     A7 22 02 FB | 	rdlong	local03, fp
0d8b4     01 22 06 F1 | 	add	local03, #1
0d8b8     A7 22 62 FC | 	wrlong	local03, fp
0d8bc     04 4E 85 F1 | 	sub	fp, #4
0d8c0     02 00 00 FF 
0d8c4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d8c8     90 FF 9F CD |  if_b	jmp	#LR__1069
0d8cc                 | '     return 
0d8cc     30 06 90 FD | 	jmp	#LR__1088
0d8d0                 | '   
0d8d0                 | '   par=converttoint(t1)  : print par
0d8d0                 | '   t1=pop()
0d8d0                 | '   channel=converttoint(t1)  
0d8d0                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d8d0                 | LR__1070
0d8d0     10 4E 05 F1 | 	add	fp, #16
0d8d4     A7 22 02 FB | 	rdlong	local03, fp
0d8d8     0B 22 66 F0 | 	shl	local03, #11
0d8dc     0C 00 00 FF 
0d8e0     D8 E4 05 F1 | 	add	objptr, ##6360
0d8e4     F2 22 02 F1 | 	add	local03, objptr
0d8e8     0C 4E 85 F1 | 	sub	fp, #12
0d8ec     A7 12 02 FB | 	rdlong	arg01, fp
0d8f0     09 21 02 F6 | 	mov	local02, arg01
0d8f4     01 20 66 F0 | 	shl	local02, #1
0d8f8     11 21 02 F1 | 	add	local02, local03
0d8fc     04 4E 85 F1 | 	sub	fp, #4
0d900     0C 00 00 FF 
0d904     D8 E4 85 F1 | 	sub	objptr, ##6360
0d908     09 13 52 F6 | 	abs	arg01, arg01 wc
0d90c     1F 24 C6 C9 |  if_b	decod	local04, #31
0d910     00 24 06 36 |  if_ae	mov	local04, #0
0d914     98 33 B1 FD | 	call	#__system___float_fromuns
0d918     12 FB 61 F5 | 	xor	result1, local04
0d91c     FD 14 02 F6 | 	mov	arg02, result1
0d920     87 E4 1D FF 
0d924     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d928     88 37 B1 FD | 	call	#__system___float_mul
0d92c     FD 12 02 F6 | 	mov	arg01, result1
0d930     BC 40 B1 FD | 	call	#__system____builtin_sinf
0d934     FD 14 02 F6 | 	mov	arg02, result1
0d938     58 7F 23 FF 
0d93c     00 12 06 F6 | 	mov	arg01, ##1191096320
0d940     70 37 B1 FD | 	call	#__system___float_mul
0d944     FD 12 02 F6 | 	mov	arg01, result1
0d948     01 14 06 F6 | 	mov	arg02, #1
0d94c     2C 3C B1 FD | 	call	#__system___float_tointeger
0d950     10 FB 51 FC | 	wrword	result1, local02
0d954     04 4E 05 F1 | 	add	fp, #4
0d958     A7 22 02 FB | 	rdlong	local03, fp
0d95c     01 22 06 F1 | 	add	local03, #1
0d960     A7 22 62 FC | 	wrlong	local03, fp
0d964     04 4E 85 F1 | 	sub	fp, #4
0d968     02 00 00 FF 
0d96c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d970     5C FF 9F CD |  if_b	jmp	#LR__1070
0d974                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d974                 | '   return
0d974     88 05 90 FD | 	jmp	#LR__1088
0d978                 | LR__1071
0d978                 | ' for i=0 to 15 : harm(i)=0: next i  
0d978     04 4E 05 F1 | 	add	fp, #4
0d97c     A7 00 68 FC | 	wrlong	#0, fp
0d980     97 16 48 FB | 	callpa	#(@LR__1073-@LR__1072)>>2,fcache_load_ptr_
0d984                 | LR__1072
0d984     A7 22 02 FB | 	rdlong	local03, fp
0d988     02 22 66 F0 | 	shl	local03, #2
0d98c     38 4E 05 F1 | 	add	fp, #56
0d990     A7 22 02 F1 | 	add	local03, fp
0d994     11 01 68 FC | 	wrlong	#0, local03
0d998     38 4E 85 F1 | 	sub	fp, #56
0d99c     A7 22 02 FB | 	rdlong	local03, fp
0d9a0     01 22 06 F1 | 	add	local03, #1
0d9a4     A7 22 62 FC | 	wrlong	local03, fp
0d9a8     10 22 56 F2 | 	cmps	local03, #16 wc
0d9ac     D4 FF 9F CD |  if_b	jmp	#LR__1072
0d9b0                 | LR__1073
0d9b0     04 4E 85 F1 | 	sub	fp, #4
0d9b4                 | ' for i=numpar to 2 step -1 
0d9b4     A7 1E 02 FB | 	rdlong	local01, fp
0d9b8     04 4E 05 F1 | 	add	fp, #4
0d9bc     A7 1E 62 FC | 	wrlong	local01, fp
0d9c0     04 4E 85 F1 | 	sub	fp, #4
0d9c4                 | LR__1074
0d9c4     DC CA BF FD | 	call	#_pop
0d9c8     2C 4E 05 F1 | 	add	fp, #44
0d9cc     A7 FA 61 FC | 	wrlong	result1, fp
0d9d0     04 4E 05 F1 | 	add	fp, #4
0d9d4     A7 FC 61 FC | 	wrlong	result2, fp
0d9d8     04 4E 05 F1 | 	add	fp, #4
0d9dc     A7 FE 61 FC | 	wrlong	result3, fp
0d9e0     30 4E 85 F1 | 	sub	fp, #48
0d9e4     A7 22 02 FB | 	rdlong	local03, fp
0d9e8     02 22 86 F1 | 	sub	local03, #2
0d9ec     02 22 66 F0 | 	shl	local03, #2
0d9f0     38 4E 05 F1 | 	add	fp, #56
0d9f4     A7 22 02 F1 | 	add	local03, fp
0d9f8     10 4E 85 F1 | 	sub	fp, #16
0d9fc     A7 12 02 F6 | 	mov	arg01, fp
0da00     2C 4E 85 F1 | 	sub	fp, #44
0da04     14 56 B0 FD | 	call	#_converttofloat
0da08     11 FB 61 FC | 	wrlong	result1, local03
0da0c     04 4E 05 F1 | 	add	fp, #4
0da10     A7 22 02 FB | 	rdlong	local03, fp
0da14     01 22 86 F1 | 	sub	local03, #1
0da18     A7 22 62 FC | 	wrlong	local03, fp
0da1c     04 4E 85 F1 | 	sub	fp, #4
0da20     02 22 56 F2 | 	cmps	local03, #2 wc
0da24     9C FF 9F 3D |  if_ae	jmp	#LR__1074
0da28     78 CA BF FD | 	call	#_pop
0da2c     FF 1E 02 F6 | 	mov	local01, result3
0da30     2C 4E 05 F1 | 	add	fp, #44
0da34     A7 FA 61 FC | 	wrlong	result1, fp
0da38     04 4E 05 F1 | 	add	fp, #4
0da3c     A7 FC 61 FC | 	wrlong	result2, fp
0da40     04 4E 05 F1 | 	add	fp, #4
0da44     A7 1E 62 FC | 	wrlong	local01, fp
0da48     08 4E 85 F1 | 	sub	fp, #8
0da4c     A7 12 02 F6 | 	mov	arg01, fp
0da50     2C 4E 85 F1 | 	sub	fp, #44
0da54     18 55 B0 FD | 	call	#_converttoint
0da58     FD 1E 02 F6 | 	mov	local01, result1
0da5c     10 4E 05 F1 | 	add	fp, #16
0da60     A7 1E 62 FC | 	wrlong	local01, fp
0da64     10 4E 85 F1 | 	sub	fp, #16
0da68                 | ' t1=pop()
0da68                 | ' channel=converttoint(t1) : print channel
0da68     00 12 06 F6 | 	mov	arg01, #0
0da6c     5C 64 B1 FD | 	call	#__system___getiolock_0475
0da70     FD 12 02 F6 | 	mov	arg01, result1
0da74     C0 0A B1 FD | 	call	#__system___lockmem
0da78     10 4E 05 F1 | 	add	fp, #16
0da7c     A7 14 02 FB | 	rdlong	arg02, fp
0da80     10 4E 85 F1 | 	sub	fp, #16
0da84     00 12 06 F6 | 	mov	arg01, #0
0da88     00 16 06 F6 | 	mov	arg03, #0
0da8c     0A 18 06 F6 | 	mov	arg04, #10
0da90     EC 17 B1 FD | 	call	#__system___basic_print_integer
0da94     00 12 06 F6 | 	mov	arg01, #0
0da98     0A 14 06 F6 | 	mov	arg02, #10
0da9c     00 16 06 F6 | 	mov	arg03, #0
0daa0     40 17 B1 FD | 	call	#__system___basic_print_char
0daa4     00 12 06 F6 | 	mov	arg01, #0
0daa8     20 64 B1 FD | 	call	#__system___getiolock_0475
0daac     FD 00 68 FC | 	wrlong	#0, result1
0dab0                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0dab0     08 4E 05 F1 | 	add	fp, #8
0dab4     02 00 80 FF 
0dab8     A7 00 68 FC | 	wrlong	##1024, fp
0dabc     08 4E 85 F1 | 	sub	fp, #8
0dac0     0C 00 00 FF 
0dac4     D8 E4 05 F1 | 	add	objptr, ##6360
0dac8     97 18 48 FB | 	callpa	#(@LR__1077-@LR__1075)>>2,fcache_load_ptr_
0dacc                 | LR__1075
0dacc     02 00 00 FF 
0dad0     00 14 DC FC | 	rep	@LR__1078, ##1024
0dad4                 | LR__1076
0dad4     10 4E 05 F1 | 	add	fp, #16
0dad8     A7 20 02 FB | 	rdlong	local02, fp
0dadc     0B 20 66 F0 | 	shl	local02, #11
0dae0     F2 20 02 F1 | 	add	local02, objptr
0dae4     0C 4E 85 F1 | 	sub	fp, #12
0dae8     A7 22 02 FB | 	rdlong	local03, fp
0daec     04 4E 85 F1 | 	sub	fp, #4
0daf0     01 22 66 F0 | 	shl	local03, #1
0daf4     10 23 02 F1 | 	add	local03, local02
0daf8     11 01 58 FC | 	wrword	#0, local03
0dafc                 | LR__1077
0dafc                 | LR__1078
0dafc     0C 00 00 FF 
0db00     D8 E4 85 F1 | 	sub	objptr, ##6360
0db04     20 4E 05 F1 | 	add	fp, #32
0db08     A7 00 68 FC | 	wrlong	#0, fp
0db0c                 | ' max=0
0db0c                 | ' if harm(0)<0 then
0db0c     1C 4E 05 F1 | 	add	fp, #28
0db10     A7 12 02 FB | 	rdlong	arg01, fp
0db14     3C 4E 85 F1 | 	sub	fp, #60
0db18     00 14 06 F6 | 	mov	arg02, #0
0db1c     01 16 06 F6 | 	mov	arg03, #1
0db20     C4 39 B1 FD | 	call	#__system___float_cmp
0db24     00 FA 55 F2 | 	cmps	result1, #0 wc
0db28     04 01 90 3D |  if_ae	jmp	#LR__1081
0db2c     3C 4E 05 F1 | 	add	fp, #60
0db30     A7 FA 01 FB | 	rdlong	result1, fp
0db34     1F FA 05 F4 | 	bitl	result1, #31
0db38     24 4E 85 F1 | 	sub	fp, #36
0db3c     A7 FA 61 FC | 	wrlong	result1, fp
0db40     28 4E 05 F1 | 	add	fp, #40
0db44     A7 FA 01 FB | 	rdlong	result1, fp
0db48     1F FA 05 F4 | 	bitl	result1, #31
0db4c     24 4E 85 F1 | 	sub	fp, #36
0db50     A7 FA 61 FC | 	wrlong	result1, fp
0db54     20 4E 05 F1 | 	add	fp, #32
0db58     00 C0 9F FF 
0db5c     A7 00 68 FC | 	wrlong	##1065353216, fp
0db60     24 4E 85 F1 | 	sub	fp, #36
0db64     A7 1E 02 FB | 	rdlong	local01, fp
0db68     28 4E 05 F1 | 	add	fp, #40
0db6c     A7 1E 62 FC | 	wrlong	local01, fp
0db70     24 4E 85 F1 | 	sub	fp, #36
0db74     A7 1E 02 FB | 	rdlong	local01, fp
0db78     28 4E 05 F1 | 	add	fp, #40
0db7c     A7 1E 62 FC | 	wrlong	local01, fp
0db80                 | '   harm(0)=1
0db80                 | '   harm(1)=even
0db80                 | '   harm(2)=odd
0db80                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0db80     40 4E 85 F1 | 	sub	fp, #64
0db84     A7 06 68 FC | 	wrlong	#3, fp
0db88                 | LR__1079
0db88     A7 22 02 FB | 	rdlong	local03, fp
0db8c     11 27 02 F6 | 	mov	local05, local03
0db90     02 26 66 F0 | 	shl	local05, #2
0db94     38 4E 05 F1 | 	add	fp, #56
0db98     A7 26 02 F1 | 	add	local05, fp
0db9c     02 22 86 F1 | 	sub	local03, #2
0dba0     02 22 66 F0 | 	shl	local03, #2
0dba4     A7 22 02 F1 | 	add	local03, fp
0dba8     11 13 02 FB | 	rdlong	arg01, local03
0dbac     24 4E 85 F1 | 	sub	fp, #36
0dbb0     A7 14 02 FB | 	rdlong	arg02, fp
0dbb4     18 4E 85 F1 | 	sub	fp, #24
0dbb8     F8 34 B1 FD | 	call	#__system___float_mul
0dbbc     13 FB 61 FC | 	wrlong	result1, local05
0dbc0     04 4E 05 F1 | 	add	fp, #4
0dbc4     A7 22 02 FB | 	rdlong	local03, fp
0dbc8     02 22 06 F1 | 	add	local03, #2
0dbcc     A7 22 62 FC | 	wrlong	local03, fp
0dbd0     10 22 56 F2 | 	cmps	local03, #16 wc
0dbd4     B0 FF 9F CD |  if_b	jmp	#LR__1079
0dbd8                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0dbd8     A7 08 68 FC | 	wrlong	#4, fp
0dbdc                 | LR__1080
0dbdc     A7 22 02 FB | 	rdlong	local03, fp
0dbe0     11 27 02 F6 | 	mov	local05, local03
0dbe4     02 26 66 F0 | 	shl	local05, #2
0dbe8     38 4E 05 F1 | 	add	fp, #56
0dbec     A7 26 02 F1 | 	add	local05, fp
0dbf0     02 22 86 F1 | 	sub	local03, #2
0dbf4     02 22 66 F0 | 	shl	local03, #2
0dbf8     A7 22 02 F1 | 	add	local03, fp
0dbfc     11 13 02 FB | 	rdlong	arg01, local03
0dc00     20 4E 85 F1 | 	sub	fp, #32
0dc04     A7 14 02 FB | 	rdlong	arg02, fp
0dc08     1C 4E 85 F1 | 	sub	fp, #28
0dc0c     A4 34 B1 FD | 	call	#__system___float_mul
0dc10     13 FB 61 FC | 	wrlong	result1, local05
0dc14     04 4E 05 F1 | 	add	fp, #4
0dc18     A7 22 02 FB | 	rdlong	local03, fp
0dc1c     02 22 06 F1 | 	add	local03, #2
0dc20     A7 22 62 FC | 	wrlong	local03, fp
0dc24     0F 22 56 F2 | 	cmps	local03, #15 wc
0dc28     B0 FF 9F CD |  if_b	jmp	#LR__1080
0dc2c     04 4E 85 F1 | 	sub	fp, #4
0dc30                 | LR__1081
0dc30                 | ' if harm(0)>=0 then ' synthesize with harmonics
0dc30     3C 4E 05 F1 | 	add	fp, #60
0dc34     A7 12 02 FB | 	rdlong	arg01, fp
0dc38     3C 4E 85 F1 | 	sub	fp, #60
0dc3c     00 14 06 F6 | 	mov	arg02, #0
0dc40     01 16 66 F6 | 	neg	arg03, #1
0dc44     A0 38 B1 FD | 	call	#__system___float_cmp
0dc48     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc4c     B0 02 90 CD |  if_b	jmp	#LR__1087
0dc50                 | '   for i=0 to 1023
0dc50     04 4E 05 F1 | 	add	fp, #4
0dc54     A7 00 68 FC | 	wrlong	#0, fp
0dc58     04 4E 85 F1 | 	sub	fp, #4
0dc5c                 | LR__1082
0dc5c     24 4E 05 F1 | 	add	fp, #36
0dc60     A7 00 68 FC | 	wrlong	#0, fp
0dc64                 | '     spl=0
0dc64                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0dc64     1C 4E 85 F1 | 	sub	fp, #28
0dc68     A7 00 68 FC | 	wrlong	#0, fp
0dc6c                 | LR__1083
0dc6c     A7 26 02 FB | 	rdlong	local05, fp
0dc70     02 26 66 F0 | 	shl	local05, #2
0dc74     34 4E 05 F1 | 	add	fp, #52
0dc78     A7 26 02 F1 | 	add	local05, fp
0dc7c     13 23 02 FB | 	rdlong	local03, local05
0dc80     87 E4 1D FF 
0dc84     DB 27 06 F6 | 	mov	local05, ##1003032539
0dc88     38 4E 85 F1 | 	sub	fp, #56
0dc8c     A7 12 02 FB | 	rdlong	arg01, fp
0dc90     04 4E 85 F1 | 	sub	fp, #4
0dc94     09 13 52 F6 | 	abs	arg01, arg01 wc
0dc98     1F 24 C6 C9 |  if_b	decod	local04, #31
0dc9c     00 24 06 36 |  if_ae	mov	local04, #0
0dca0     0C 30 B1 FD | 	call	#__system___float_fromuns
0dca4     12 FB 61 F5 | 	xor	result1, local04
0dca8     FD 14 02 F6 | 	mov	arg02, result1
0dcac     13 13 02 F6 | 	mov	arg01, local05
0dcb0     00 34 B1 FD | 	call	#__system___float_mul
0dcb4     FD 26 02 F6 | 	mov	local05, result1
0dcb8     08 4E 05 F1 | 	add	fp, #8
0dcbc     A7 12 02 FB | 	rdlong	arg01, fp
0dcc0     08 4E 85 F1 | 	sub	fp, #8
0dcc4     01 12 06 F1 | 	add	arg01, #1
0dcc8     09 13 52 F6 | 	abs	arg01, arg01 wc
0dccc     1F 24 C6 C9 |  if_b	decod	local04, #31
0dcd0     00 24 06 36 |  if_ae	mov	local04, #0
0dcd4     D8 2F B1 FD | 	call	#__system___float_fromuns
0dcd8     12 FB 61 F5 | 	xor	result1, local04
0dcdc     FD 14 02 F6 | 	mov	arg02, result1
0dce0     13 13 02 F6 | 	mov	arg01, local05
0dce4     CC 33 B1 FD | 	call	#__system___float_mul
0dce8     FD 12 02 F6 | 	mov	arg01, result1
0dcec     00 3D B1 FD | 	call	#__system____builtin_sinf
0dcf0     FD 14 02 F6 | 	mov	arg02, result1
0dcf4     11 13 02 F6 | 	mov	arg01, local03
0dcf8     B8 33 B1 FD | 	call	#__system___float_mul
0dcfc     FD 14 02 F6 | 	mov	arg02, result1
0dd00     24 4E 05 F1 | 	add	fp, #36
0dd04     A7 12 02 FB | 	rdlong	arg01, fp
0dd08     24 4E 85 F1 | 	sub	fp, #36
0dd0c     D4 2F B1 FD | 	call	#__system___float_add
0dd10     24 4E 05 F1 | 	add	fp, #36
0dd14     A7 FA 61 FC | 	wrlong	result1, fp
0dd18     1C 4E 85 F1 | 	sub	fp, #28
0dd1c     A7 16 02 FB | 	rdlong	arg03, fp
0dd20     01 16 06 F1 | 	add	arg03, #1
0dd24     A7 16 62 FC | 	wrlong	arg03, fp
0dd28     10 16 56 F2 | 	cmps	arg03, #16 wc
0dd2c     3C FF 9F CD |  if_b	jmp	#LR__1083
0dd30                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0dd30     1C 4E 05 F1 | 	add	fp, #28
0dd34     A7 12 02 FB | 	rdlong	arg01, fp
0dd38     1F 12 06 F4 | 	bitl	arg01, #31
0dd3c     04 4E 85 F1 | 	sub	fp, #4
0dd40     A7 14 02 FB | 	rdlong	arg02, fp
0dd44     20 4E 85 F1 | 	sub	fp, #32
0dd48     01 16 66 F6 | 	neg	arg03, #1
0dd4c     98 37 B1 FD | 	call	#__system___float_cmp
0dd50     01 FA 55 F2 | 	cmps	result1, #1 wc
0dd54     18 00 90 CD |  if_b	jmp	#LR__1084
0dd58     24 4E 05 F1 | 	add	fp, #36
0dd5c     A7 FA 01 FB | 	rdlong	result1, fp
0dd60     1F FA 05 F4 | 	bitl	result1, #31
0dd64     04 4E 85 F1 | 	sub	fp, #4
0dd68     A7 FA 61 FC | 	wrlong	result1, fp
0dd6c     20 4E 85 F1 | 	sub	fp, #32
0dd70                 | LR__1084
0dd70     04 4E 05 F1 | 	add	fp, #4
0dd74     A7 22 02 FB | 	rdlong	local03, fp
0dd78     01 22 06 F1 | 	add	local03, #1
0dd7c     A7 22 62 FC | 	wrlong	local03, fp
0dd80     04 4E 85 F1 | 	sub	fp, #4
0dd84     02 00 00 FF 
0dd88     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dd8c     CC FE 9F CD |  if_b	jmp	#LR__1082
0dd90                 | '   for i=0 to 1023
0dd90     04 4E 05 F1 | 	add	fp, #4
0dd94     A7 00 68 FC | 	wrlong	#0, fp
0dd98     04 4E 85 F1 | 	sub	fp, #4
0dd9c                 | LR__1085
0dd9c     24 4E 05 F1 | 	add	fp, #36
0dda0     A7 00 68 FC | 	wrlong	#0, fp
0dda4                 | '     spl=0
0dda4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0dda4     1C 4E 85 F1 | 	sub	fp, #28
0dda8     A7 00 68 FC | 	wrlong	#0, fp
0ddac                 | LR__1086
0ddac     A7 26 02 FB | 	rdlong	local05, fp
0ddb0     02 26 66 F0 | 	shl	local05, #2
0ddb4     34 4E 05 F1 | 	add	fp, #52
0ddb8     A7 26 02 F1 | 	add	local05, fp
0ddbc     13 27 02 FB | 	rdlong	local05, local05
0ddc0     1C 4E 85 F1 | 	sub	fp, #28
0ddc4     A7 14 02 FB | 	rdlong	arg02, fp
0ddc8     20 4E 85 F1 | 	sub	fp, #32
0ddcc     58 7F 23 FF 
0ddd0     00 12 06 F6 | 	mov	arg01, ##1191096320
0ddd4     E0 34 B1 FD | 	call	#__system___float_div
0ddd8     FD 14 02 F6 | 	mov	arg02, result1
0dddc     13 13 02 F6 | 	mov	arg01, local05
0dde0     D0 32 B1 FD | 	call	#__system___float_mul
0dde4     FD 22 02 F6 | 	mov	local03, result1
0dde8     87 E4 1D FF 
0ddec     DB 27 06 F6 | 	mov	local05, ##1003032539
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 12 02 FB | 	rdlong	arg01, fp
0ddf8     04 4E 85 F1 | 	sub	fp, #4
0ddfc     09 13 52 F6 | 	abs	arg01, arg01 wc
0de00     1F 24 C6 C9 |  if_b	decod	local04, #31
0de04     00 24 06 36 |  if_ae	mov	local04, #0
0de08     A4 2E B1 FD | 	call	#__system___float_fromuns
0de0c     12 FB 61 F5 | 	xor	result1, local04
0de10     FD 14 02 F6 | 	mov	arg02, result1
0de14     13 13 02 F6 | 	mov	arg01, local05
0de18     98 32 B1 FD | 	call	#__system___float_mul
0de1c     FD 26 02 F6 | 	mov	local05, result1
0de20     08 4E 05 F1 | 	add	fp, #8
0de24     A7 12 02 FB | 	rdlong	arg01, fp
0de28     08 4E 85 F1 | 	sub	fp, #8
0de2c     01 12 06 F1 | 	add	arg01, #1
0de30     09 13 52 F6 | 	abs	arg01, arg01 wc
0de34     1F 24 C6 C9 |  if_b	decod	local04, #31
0de38     00 24 06 36 |  if_ae	mov	local04, #0
0de3c     70 2E B1 FD | 	call	#__system___float_fromuns
0de40     12 FB 61 F5 | 	xor	result1, local04
0de44     FD 14 02 F6 | 	mov	arg02, result1
0de48     13 13 02 F6 | 	mov	arg01, local05
0de4c     64 32 B1 FD | 	call	#__system___float_mul
0de50     FD 12 02 F6 | 	mov	arg01, result1
0de54     98 3B B1 FD | 	call	#__system____builtin_sinf
0de58     FD 14 02 F6 | 	mov	arg02, result1
0de5c     11 13 02 F6 | 	mov	arg01, local03
0de60     50 32 B1 FD | 	call	#__system___float_mul
0de64     FD 14 02 F6 | 	mov	arg02, result1
0de68     24 4E 05 F1 | 	add	fp, #36
0de6c     A7 12 02 FB | 	rdlong	arg01, fp
0de70     24 4E 85 F1 | 	sub	fp, #36
0de74     6C 2E B1 FD | 	call	#__system___float_add
0de78     24 4E 05 F1 | 	add	fp, #36
0de7c     A7 FA 61 FC | 	wrlong	result1, fp
0de80     1C 4E 85 F1 | 	sub	fp, #28
0de84     A7 26 02 FB | 	rdlong	local05, fp
0de88     01 26 06 F1 | 	add	local05, #1
0de8c     A7 26 62 FC | 	wrlong	local05, fp
0de90     10 26 56 F2 | 	cmps	local05, #16 wc
0de94     14 FF 9F CD |  if_b	jmp	#LR__1086
0de98     08 4E 05 F1 | 	add	fp, #8
0de9c     A7 26 02 FB | 	rdlong	local05, fp
0dea0     0B 26 66 F0 | 	shl	local05, #11
0dea4     0C 00 00 FF 
0dea8     D8 E4 05 F1 | 	add	objptr, ##6360
0deac     F2 26 02 F1 | 	add	local05, objptr
0deb0     0C 4E 85 F1 | 	sub	fp, #12
0deb4     A7 20 02 FB | 	rdlong	local02, fp
0deb8     01 20 66 F0 | 	shl	local02, #1
0debc     13 21 02 F1 | 	add	local02, local05
0dec0     20 4E 05 F1 | 	add	fp, #32
0dec4     A7 12 02 FB | 	rdlong	arg01, fp
0dec8     24 4E 85 F1 | 	sub	fp, #36
0decc     0C 00 00 FF 
0ded0     D8 E4 85 F1 | 	sub	objptr, ##6360
0ded4     01 14 06 F6 | 	mov	arg02, #1
0ded8     A0 36 B1 FD | 	call	#__system___float_tointeger
0dedc     10 FB 51 FC | 	wrword	result1, local02
0dee0     04 4E 05 F1 | 	add	fp, #4
0dee4     A7 22 02 FB | 	rdlong	local03, fp
0dee8     01 22 06 F1 | 	add	local03, #1
0deec     A7 22 62 FC | 	wrlong	local03, fp
0def0     04 4E 85 F1 | 	sub	fp, #4
0def4     02 00 00 FF 
0def8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0defc     9C FE 9F CD |  if_b	jmp	#LR__1085
0df00                 | LR__1087
0df00                 | LR__1088
0df00     A7 F0 03 F6 | 	mov	ptra, fp
0df04     B2 00 A0 FD | 	call	#popregs_
0df08                 | _do_defsnd_ret
0df08     2D 00 64 FD | 	ret
0df0c                 | 
0df0c                 | ' 
0df0c                 | ' ' ---------------  List the program. 
0df0c                 | ' 
0df0c                 | ' sub do_list
0df0c                 | _do_list
0df0c     02 4A 05 F6 | 	mov	COUNT_, #2
0df10     A8 00 A0 FD | 	call	#pushregs_
0df14     B8 F0 07 F1 | 	add	ptra, #184
0df18     04 4E 05 F1 | 	add	fp, #4
0df1c     A7 00 68 FC | 	wrlong	#0, fp
0df20     04 4E 05 F1 | 	add	fp, #4
0df24     FF FF BF FF 
0df28     A7 FE 6B FC | 	wrlong	##2147483647, fp
0df2c     08 4E 85 F1 | 	sub	fp, #8
0df30     6A 00 00 FF 
0df34     70 E4 05 F1 | 	add	objptr, ##54384
0df38     F2 1E 02 FB | 	rdlong	local01, objptr
0df3c     0F 17 02 F6 | 	mov	arg03, local01
0df40     01 16 66 F0 | 	shl	arg03, #1
0df44     0F 17 02 F1 | 	add	arg03, local01
0df48     02 16 66 F0 | 	shl	arg03, #2
0df4c     03 00 00 FF 
0df50     04 E4 85 F1 | 	sub	objptr, ##1540
0df54     F2 16 02 F1 | 	add	arg03, objptr
0df58     0B 17 02 FB | 	rdlong	arg03, arg03
0df5c     A7 16 62 FC | 	wrlong	arg03, fp
0df60                 | ' 
0df60                 | ' startline=0 : endline=$7FFFFFFF
0df60                 | ' numpar=compiledline(lineptr_e).result.uresult
0df60                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0df60     01 16 0E F2 | 	cmp	arg03, #1 wz
0df64     67 00 00 FF 
0df68     6C E4 85 F1 | 	sub	objptr, ##52844
0df6c     3C 00 90 5D |  if_ne	jmp	#LR__1090
0df70     30 C5 BF FD | 	call	#_pop
0df74     FF 1E 02 F6 | 	mov	local01, result3
0df78     0C 4E 05 F1 | 	add	fp, #12
0df7c     A7 FA 61 FC | 	wrlong	result1, fp
0df80     04 4E 05 F1 | 	add	fp, #4
0df84     A7 FC 61 FC | 	wrlong	result2, fp
0df88     04 4E 05 F1 | 	add	fp, #4
0df8c     A7 1E 62 FC | 	wrlong	local01, fp
0df90     08 4E 85 F1 | 	sub	fp, #8
0df94     A7 12 02 F6 | 	mov	arg01, fp
0df98     0C 4E 85 F1 | 	sub	fp, #12
0df9c     D0 4F B0 FD | 	call	#_converttoint
0dfa0     04 4E 05 F1 | 	add	fp, #4
0dfa4     A7 FA 61 FC | 	wrlong	result1, fp
0dfa8     04 4E 85 F1 | 	sub	fp, #4
0dfac                 | LR__1090
0dfac                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0dfac     A7 16 02 FB | 	rdlong	arg03, fp
0dfb0     02 16 0E F2 | 	cmp	arg03, #2 wz
0dfb4     7C 00 90 5D |  if_ne	jmp	#LR__1091
0dfb8     E8 C4 BF FD | 	call	#_pop
0dfbc     FF 1E 02 F6 | 	mov	local01, result3
0dfc0     0C 4E 05 F1 | 	add	fp, #12
0dfc4     A7 FA 61 FC | 	wrlong	result1, fp
0dfc8     04 4E 05 F1 | 	add	fp, #4
0dfcc     A7 FC 61 FC | 	wrlong	result2, fp
0dfd0     04 4E 05 F1 | 	add	fp, #4
0dfd4     A7 1E 62 FC | 	wrlong	local01, fp
0dfd8     08 4E 85 F1 | 	sub	fp, #8
0dfdc     A7 12 02 F6 | 	mov	arg01, fp
0dfe0     0C 4E 85 F1 | 	sub	fp, #12
0dfe4     88 4F B0 FD | 	call	#_converttoint
0dfe8     FD 1E 02 F6 | 	mov	local01, result1
0dfec     08 4E 05 F1 | 	add	fp, #8
0dff0     A7 1E 62 FC | 	wrlong	local01, fp
0dff4     08 4E 85 F1 | 	sub	fp, #8
0dff8     A8 C4 BF FD | 	call	#_pop
0dffc     FF 1E 02 F6 | 	mov	local01, result3
0e000     0C 4E 05 F1 | 	add	fp, #12
0e004     A7 FA 61 FC | 	wrlong	result1, fp
0e008     04 4E 05 F1 | 	add	fp, #4
0e00c     A7 FC 61 FC | 	wrlong	result2, fp
0e010     04 4E 05 F1 | 	add	fp, #4
0e014     A7 1E 62 FC | 	wrlong	local01, fp
0e018     08 4E 85 F1 | 	sub	fp, #8
0e01c     A7 12 02 F6 | 	mov	arg01, fp
0e020     0C 4E 85 F1 | 	sub	fp, #12
0e024     48 4F B0 FD | 	call	#_converttoint
0e028     04 4E 05 F1 | 	add	fp, #4
0e02c     A7 FA 61 FC | 	wrlong	result1, fp
0e030     04 4E 85 F1 | 	sub	fp, #4
0e034                 | LR__1091
0e034                 | ' 
0e034                 | ' 
0e034                 | ' print
0e034     00 12 06 F6 | 	mov	arg01, #0
0e038     90 5E B1 FD | 	call	#__system___getiolock_0475
0e03c     FD 12 02 F6 | 	mov	arg01, result1
0e040     F4 04 B1 FD | 	call	#__system___lockmem
0e044     00 12 06 F6 | 	mov	arg01, #0
0e048     0A 14 06 F6 | 	mov	arg02, #10
0e04c     00 16 06 F6 | 	mov	arg03, #0
0e050     90 11 B1 FD | 	call	#__system___basic_print_char
0e054     00 12 06 F6 | 	mov	arg01, #0
0e058     70 5E B1 FD | 	call	#__system___getiolock_0475
0e05c     FD 00 68 FC | 	wrlong	#0, result1
0e060     6A 00 00 FF 
0e064     74 E4 05 F1 | 	add	objptr, ##54388
0e068     F2 20 02 FB | 	rdlong	local02, objptr
0e06c     11 00 00 FF 
0e070     94 E4 05 F1 | 	add	objptr, ##8852
0e074     F2 20 62 FC | 	wrlong	local02, objptr
0e078     7B 00 00 FF 
0e07c     08 E5 85 F1 | 	sub	objptr, ##63240
0e080                 | ' do 
0e080                 | LR__1092
0e080     20 4E 05 F1 | 	add	fp, #32
0e084     A7 12 02 F6 | 	mov	arg01, fp
0e088     20 4E 85 F1 | 	sub	fp, #32
0e08c     7B 00 00 FF 
0e090     08 E5 05 F1 | 	add	objptr, ##63240
0e094     F2 14 02 FB | 	rdlong	arg02, objptr
0e098     18 16 06 F6 | 	mov	arg03, #24
0e09c     70 00 00 FF 
0e0a0     3C E4 85 F1 | 	sub	objptr, ##57404
0e0a4     6C F8 B0 FD | 	call	#_psram_spin2_read1
0e0a8     0B 00 00 FF 
0e0ac     CC E4 85 F1 | 	sub	objptr, ##5836
0e0b0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0e0b0                 | '   
0e0b0                 | '   if header(0)<> $FFFFFFFF then
0e0b0     20 4E 05 F1 | 	add	fp, #32
0e0b4     A7 20 02 FB | 	rdlong	local02, fp
0e0b8     20 4E 85 F1 | 	sub	fp, #32
0e0bc     FF FF 7F FF 
0e0c0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0e0c4     A8 00 90 AD |  if_e	jmp	#LR__1094
0e0c8     38 4E 05 F1 | 	add	fp, #56
0e0cc     3F 16 06 F6 | 	mov	arg03, #63
0e0d0     28 16 62 FD | 	setq	arg03
0e0d4     A7 00 68 FC | 	wrlong	#0, fp
0e0d8     A7 12 02 F6 | 	mov	arg01, fp
0e0dc     10 4E 85 F1 | 	sub	fp, #16
0e0e0     A7 14 02 FB | 	rdlong	arg02, fp
0e0e4     04 4E 05 F1 | 	add	fp, #4
0e0e8     A7 16 02 FB | 	rdlong	arg03, fp
0e0ec     2C 4E 85 F1 | 	sub	fp, #44
0e0f0     0B 00 00 FF 
0e0f4     CC E4 05 F1 | 	add	objptr, ##5836
0e0f8     18 F8 B0 FD | 	call	#_psram_spin2_read1
0e0fc     0B 00 00 FF 
0e100     CC E4 85 F1 | 	sub	objptr, ##5836
0e104                 | '     longfill(linebuf,0,64)
0e104                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0e104                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0e104     20 4E 05 F1 | 	add	fp, #32
0e108     A7 20 02 FB | 	rdlong	local02, fp
0e10c     1C 4E 85 F1 | 	sub	fp, #28
0e110     A7 1E 02 FB | 	rdlong	local01, fp
0e114     04 4E 85 F1 | 	sub	fp, #4
0e118     0F 21 52 F2 | 	cmps	local02, local01 wc
0e11c     30 00 90 CD |  if_b	jmp	#LR__1093
0e120     20 4E 05 F1 | 	add	fp, #32
0e124     A7 20 02 FB | 	rdlong	local02, fp
0e128     18 4E 85 F1 | 	sub	fp, #24
0e12c     A7 16 02 FB | 	rdlong	arg03, fp
0e130     08 4E 85 F1 | 	sub	fp, #8
0e134     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0e138     14 00 90 1D |  if_a	jmp	#LR__1093
0e13c     38 4E 05 F1 | 	add	fp, #56
0e140     A7 12 02 F6 | 	mov	arg01, fp
0e144     38 4E 85 F1 | 	sub	fp, #56
0e148                 | ' 
0e148                 | ' write(text)
0e148     20 F1 B0 FD | 	call	#_hg010b_spin2_write
0e14c                 | ' crlf
0e14c     E8 F3 B0 FD | 	call	#_hg010b_spin2_crlf
0e150                 | LR__1093
0e150     34 4E 05 F1 | 	add	fp, #52
0e154     A7 20 02 FB | 	rdlong	local02, fp
0e158     34 4E 85 F1 | 	sub	fp, #52
0e15c     7B 00 00 FF 
0e160     08 E5 05 F1 | 	add	objptr, ##63240
0e164     F2 20 62 FC | 	wrlong	local02, objptr
0e168     7B 00 00 FF 
0e16c     08 E5 85 F1 | 	sub	objptr, ##63240
0e170                 | LR__1094
0e170     34 4E 05 F1 | 	add	fp, #52
0e174     A7 20 02 FB | 	rdlong	local02, fp
0e178     34 4E 85 F1 | 	sub	fp, #52
0e17c     FF FF 3F FF 
0e180     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e184     20 4E 05 51 |  if_ne	add	fp, #32
0e188     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e18c     20 4E 85 51 |  if_ne	sub	fp, #32
0e190     FF FF 7F 5F 
0e194     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e198     E4 FE 9F 5D |  if_ne	jmp	#LR__1092
0e19c     A7 F0 03 F6 | 	mov	ptra, fp
0e1a0     B2 00 A0 FD | 	call	#popregs_
0e1a4                 | _do_list_ret
0e1a4     2D 00 64 FD | 	ret
0e1a8                 | 
0e1a8                 | ' 
0e1a8                 | ' '---------------- Clear the program
0e1a8                 | ' 
0e1a8                 | ' sub do_new
0e1a8                 | _do_new
0e1a8     03 4A 05 F6 | 	mov	COUNT_, #3
0e1ac     A8 00 A0 FD | 	call	#pushregs_
0e1b0     00 12 06 F6 | 	mov	arg01, #0
0e1b4     01 14 66 F6 | 	neg	arg02, #1
0e1b8     80 C0 B0 FD | 	call	#_pslpoke
0e1bc     54 00 00 FF 
0e1c0     F8 E5 05 F1 | 	add	objptr, ##43512
0e1c4     F2 00 68 FC | 	wrlong	#0, objptr
0e1c8     15 00 00 FF 
0e1cc     7C E4 05 F1 | 	add	objptr, ##10876
0e1d0     F2 00 68 FC | 	wrlong	#0, objptr
0e1d4     0F 00 00 FF 
0e1d8     2C E5 05 F1 | 	add	objptr, ##7980
0e1dc     F2 00 68 FC | 	wrlong	#0, objptr
0e1e0     04 E4 05 F1 | 	add	objptr, #4
0e1e4     F2 00 68 FC | 	wrlong	#0, objptr
0e1e8     16 00 00 FF 
0e1ec     5C E5 85 F1 | 	sub	objptr, ##11612
0e1f0     F2 00 68 FC | 	wrlong	#0, objptr
0e1f4     07 00 00 FF 
0e1f8     24 E4 05 F1 | 	add	objptr, ##3620
0e1fc     F2 00 68 FC | 	wrlong	#0, objptr
0e200     07 00 00 FF 
0e204     20 E4 85 F1 | 	sub	objptr, ##3616
0e208     F2 00 68 FC | 	wrlong	#0, objptr
0e20c     0F 00 00 FF 
0e210     34 E4 05 F1 | 	add	objptr, ##7732
0e214     F2 00 68 FC | 	wrlong	#0, objptr
0e218     08 00 00 FF 
0e21c     08 E4 85 F1 | 	sub	objptr, ##4104
0e220     F2 00 68 FC | 	wrlong	#0, objptr
0e224     04 E4 05 F1 | 	add	objptr, #4
0e228     FF FF FF FF 
0e22c     F2 FE 6B FC | 	wrlong	##-1, objptr
0e230     0F 00 00 FF 
0e234     4C E5 05 F1 | 	add	objptr, ##8012
0e238     F2 00 68 FC | 	wrlong	#0, objptr
0e23c                 | ' 
0e23c                 | ' pslpoke(0,$FFFFFFFF)
0e23c                 | ' varnum=0
0e23c                 | ' programstart=0 :runptr=0 : runptr2=0
0e23c                 | ' stackpointer=0
0e23c                 | ' lineptr=0 
0e23c                 | ' programptr=0 : stringptr=0
0e23c                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0e23c                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0e23c     00 1E 06 F6 | 	mov	local01, #0
0e240     07 00 00 FF 
0e244     40 E5 85 F1 | 	sub	objptr, ##3904
0e248     97 16 48 FB | 	callpa	#(@LR__1101-@LR__1100)>>2,fcache_load_ptr_
0e24c                 | LR__1100
0e24c     0F 21 02 F6 | 	mov	local02, local01
0e250     02 20 66 F0 | 	shl	local02, #2
0e254     0F 21 02 F1 | 	add	local02, local01
0e258     02 20 66 F0 | 	shl	local02, #2
0e25c     F2 20 02 F1 | 	add	local02, objptr
0e260     08 20 06 F1 | 	add	local02, #8
0e264     FF FF FF FF 
0e268     10 FF 6B FC | 	wrlong	##-1, local02
0e26c     01 1E 06 F1 | 	add	local01, #1
0e270     81 1E 56 F2 | 	cmps	local01, #129 wc
0e274     D4 FF 9F CD |  if_b	jmp	#LR__1100
0e278                 | LR__1101
0e278     72 00 00 FF 
0e27c     88 E4 85 F1 | 	sub	objptr, ##58504
0e280                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0e280     00 1E 06 F6 | 	mov	local01, #0
0e284                 | LR__1102
0e284     0F 21 02 F6 | 	mov	local02, local01
0e288     02 20 66 F0 | 	shl	local02, #2
0e28c     7B 00 00 FF 
0e290     24 E4 05 F1 | 	add	objptr, ##63012
0e294     F2 20 02 F1 | 	add	local02, objptr
0e298     10 21 0A FB | 	rdlong	local02, local02 wz
0e29c     7B 00 00 FF 
0e2a0     24 E4 85 F1 | 	sub	objptr, ##63012
0e2a4     34 00 90 AD |  if_e	jmp	#LR__1103
0e2a8     0F 13 02 F6 | 	mov	arg01, local01
0e2ac     00 14 06 F6 | 	mov	arg02, #0
0e2b0     00 16 06 F6 | 	mov	arg03, #0
0e2b4     D4 DE B0 FD | 	call	#_hg010b_spin2_setspritesize
0e2b8     0F 21 02 F6 | 	mov	local02, local01
0e2bc     02 20 66 F0 | 	shl	local02, #2
0e2c0     7B 00 00 FF 
0e2c4     24 E4 05 F1 | 	add	objptr, ##63012
0e2c8     F2 20 02 F1 | 	add	local02, objptr
0e2cc     10 13 02 FB | 	rdlong	arg01, local02
0e2d0     7B 00 00 FF 
0e2d4     24 E4 85 F1 | 	sub	objptr, ##63012
0e2d8     E0 41 B1 FD | 	call	#__system___gc_free
0e2dc                 | LR__1103
0e2dc     01 1E 06 F1 | 	add	local01, #1
0e2e0     10 1E 56 F2 | 	cmps	local01, #16 wc
0e2e4     9C FF 9F CD |  if_b	jmp	#LR__1102
0e2e8     7B 00 00 FF 
0e2ec     78 E4 05 F1 | 	add	objptr, ##63096
0e2f0     00 C0 9F FF 
0e2f4     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e2f8     04 E4 05 F1 | 	add	objptr, #4
0e2fc     00 C0 9F FF 
0e300     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e304     7B 00 00 FF 
0e308     78 E4 85 F1 | 	sub	objptr, ##63096
0e30c     F2 22 02 FB | 	rdlong	local03, objptr
0e310     7B 00 00 FF 
0e314     64 E4 05 F1 | 	add	objptr, ##63076
0e318     F2 22 62 FC | 	wrlong	local03, objptr
0e31c     7B 00 00 FF 
0e320     68 E4 85 F1 | 	sub	objptr, ##63080
0e324     11 12 06 F6 | 	mov	arg01, #17
0e328     08 14 06 F6 | 	mov	arg02, #8
0e32c     10 16 06 F6 | 	mov	arg03, #16
0e330     58 DE B0 FD | 	call	#_hg010b_spin2_setspritesize
0e334     10 12 06 F6 | 	mov	arg01, #16
0e338     20 14 06 F6 | 	mov	arg02, #32
0e33c     20 16 06 F6 | 	mov	arg03, #32
0e340     48 DE B0 FD | 	call	#_hg010b_spin2_setspritesize
0e344     70 01 00 FF 
0e348     7C 23 06 F6 | 	mov	local03, ##@LR__5102
0e34c     7B 00 00 FF 
0e350     94 E4 05 F1 | 	add	objptr, ##63124
0e354     F2 22 62 FC | 	wrlong	local03, objptr
0e358     7B 00 00 FF 
0e35c     94 E4 85 F1 | 	sub	objptr, ##63124
0e360     E8 B1 B0 FD | 	call	#_init_audio
0e364     A7 F0 03 F6 | 	mov	ptra, fp
0e368     B2 00 A0 FD | 	call	#popregs_
0e36c                 | _do_new_ret
0e36c     2D 00 64 FD | 	ret
0e370                 | 
0e370                 | ' 
0e370                 | ' '----------------------- goto
0e370                 | ' sub do_fast_goto
0e370                 | _do_fast_goto
0e370     02 4A 05 F6 | 	mov	COUNT_, #2
0e374     A8 00 A0 FD | 	call	#pushregs_
0e378                 | _do_fast_goto_enter
0e378     6A 00 00 FF 
0e37c     70 E4 05 F1 | 	add	objptr, ##54384
0e380     F2 12 02 FB | 	rdlong	arg01, objptr
0e384     09 1F 02 F6 | 	mov	local01, arg01
0e388     01 1E 66 F0 | 	shl	local01, #1
0e38c     09 1F 02 F1 | 	add	local01, arg01
0e390     02 1E 66 F0 | 	shl	local01, #2
0e394     03 00 00 FF 
0e398     04 E4 85 F1 | 	sub	objptr, ##1540
0e39c     F2 1E 02 F1 | 	add	local01, objptr
0e3a0     0F 21 02 FB | 	rdlong	local02, local01
0e3a4     10 13 02 F6 | 	mov	arg01, local02
0e3a8     67 00 00 FF 
0e3ac     6C E4 85 F1 | 	sub	objptr, ##52844
0e3b0     B8 BF B0 FD | 	call	#_pslpeek
0e3b4     FD 12 02 F6 | 	mov	arg01, result1
0e3b8                 | ' 
0e3b8                 | ' testptr=compiledline(lineptr_e).result.uresult
0e3b8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e3b8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e3b8     6A 00 00 FF 
0e3bc     70 E4 05 F1 | 	add	objptr, ##54384
0e3c0     F2 FA 01 FB | 	rdlong	result1, objptr
0e3c4     FD 1E 02 F6 | 	mov	local01, result1
0e3c8     01 1E 66 F0 | 	shl	local01, #1
0e3cc     FD 1E 02 F1 | 	add	local01, result1
0e3d0     02 1E 66 F0 | 	shl	local01, #2
0e3d4     03 00 00 FF 
0e3d8     04 E4 85 F1 | 	sub	objptr, ##1540
0e3dc     F2 1E 02 F1 | 	add	local01, objptr
0e3e0     04 1E 06 F1 | 	add	local01, #4
0e3e4     0F 1F 02 FB | 	rdlong	local01, local01
0e3e8     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e3ec     67 00 00 FF 
0e3f0     6C E4 85 F1 | 	sub	objptr, ##52844
0e3f4     58 00 90 5D |  if_ne	jmp	#LR__1110
0e3f8     79 00 00 FF 
0e3fc     A0 E5 05 F1 | 	add	objptr, ##62368
0e400     F2 20 62 FC | 	wrlong	local02, objptr
0e404     0F 00 00 FF 
0e408     34 E5 85 F1 | 	sub	objptr, ##7988
0e40c     F2 20 02 FB | 	rdlong	local02, objptr
0e410     01 20 86 F1 | 	sub	local02, #1
0e414     04 E4 05 F1 | 	add	objptr, #4
0e418     F2 20 62 FC | 	wrlong	local02, objptr
0e41c                 | '   runptr=testptr
0e41c                 | '   lineptr_e=lineptr-1
0e41c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e41c     0F 00 00 FF 
0e420     54 E5 05 F1 | 	add	objptr, ##8020
0e424     F2 20 02 FB | 	rdlong	local02, objptr
0e428     79 00 00 FF 
0e42c     C4 E5 85 F1 | 	sub	objptr, ##62404
0e430     FF FF 3F FF 
0e434     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e438     79 00 00 AF 
0e43c     C4 E5 05 A1 |  if_e	add	objptr, ##62404
0e440     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e444     79 00 00 AF 
0e448     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
0e44c     04 00 90 FD | 	jmp	#LR__1111
0e450                 | LR__1110
0e450     0C 00 B0 FD | 	call	#_do_find_goto
0e454                 | LR__1111
0e454     A7 F0 03 F6 | 	mov	ptra, fp
0e458     B2 00 A0 FD | 	call	#popregs_
0e45c                 | _do_fast_goto_ret
0e45c     2D 00 64 FD | 	ret
0e460                 | 
0e460                 | ' 
0e460                 | ' 
0e460                 | ' 
0e460                 | ' 
0e460                 | ' sub do_find_goto
0e460                 | _do_find_goto
0e460     03 4A 05 F6 | 	mov	COUNT_, #3
0e464     A8 00 A0 FD | 	call	#pushregs_
0e468     24 F0 07 F1 | 	add	ptra, #36
0e46c                 | _do_find_goto_enter
0e46c     6A 00 00 FF 
0e470     70 E4 05 F1 | 	add	objptr, ##54384
0e474     F2 1E 02 FB | 	rdlong	local01, objptr
0e478     0F 21 02 F6 | 	mov	local02, local01
0e47c     01 20 66 F0 | 	shl	local02, #1
0e480     0F 21 02 F1 | 	add	local02, local01
0e484     02 20 66 F0 | 	shl	local02, #2
0e488     03 00 00 FF 
0e48c     04 E4 85 F1 | 	sub	objptr, ##1540
0e490     F2 20 02 F1 | 	add	local02, objptr
0e494     04 20 06 F1 | 	add	local02, #4
0e498     10 21 02 FB | 	rdlong	local02, local02
0e49c     A7 20 62 FC | 	wrlong	local02, fp
0e4a0     03 00 00 FF 
0e4a4     08 E4 05 F1 | 	add	objptr, ##1544
0e4a8     F2 22 02 FB | 	rdlong	local03, objptr
0e4ac     6A 00 00 FF 
0e4b0     74 E4 85 F1 | 	sub	objptr, ##54388
0e4b4     04 4E 05 F1 | 	add	fp, #4
0e4b8     A7 22 62 FC | 	wrlong	local03, fp
0e4bc     04 4E 85 F1 | 	sub	fp, #4
0e4c0                 | ' 
0e4c0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e4c0                 | '  ' print "find goto"                                                                     'print gotoline 
0e4c0                 | ' gotoptr=programstart
0e4c0                 | ' do
0e4c0                 | LR__1120
0e4c0     0C 4E 05 F1 | 	add	fp, #12
0e4c4     A7 12 02 F6 | 	mov	arg01, fp
0e4c8     08 4E 85 F1 | 	sub	fp, #8
0e4cc     A7 14 02 FB | 	rdlong	arg02, fp
0e4d0     04 4E 85 F1 | 	sub	fp, #4
0e4d4     18 16 06 F6 | 	mov	arg03, #24
0e4d8     0B 00 00 FF 
0e4dc     CC E4 05 F1 | 	add	objptr, ##5836
0e4e0     30 F4 B0 FD | 	call	#_psram_spin2_read1
0e4e4     0B 00 00 FF 
0e4e8     CC E4 85 F1 | 	sub	objptr, ##5836
0e4ec                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e4ec                 | '   if gotoheader(0)<>$FFFFFFFF then
0e4ec     0C 4E 05 F1 | 	add	fp, #12
0e4f0     A7 22 02 FB | 	rdlong	local03, fp
0e4f4     0C 4E 85 F1 | 	sub	fp, #12
0e4f8     FF FF 7F FF 
0e4fc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e500     24 00 90 AD |  if_e	jmp	#LR__1121
0e504     04 4E 05 F1 | 	add	fp, #4
0e508     A7 22 02 FB | 	rdlong	local03, fp
0e50c     04 4E 05 F1 | 	add	fp, #4
0e510     A7 22 62 FC | 	wrlong	local03, fp
0e514     18 4E 05 F1 | 	add	fp, #24
0e518     A7 22 02 FB | 	rdlong	local03, fp
0e51c     1C 4E 85 F1 | 	sub	fp, #28
0e520     A7 22 62 FC | 	wrlong	local03, fp
0e524     04 4E 85 F1 | 	sub	fp, #4
0e528                 | LR__1121
0e528     20 4E 05 F1 | 	add	fp, #32
0e52c     A7 22 02 FB | 	rdlong	local03, fp
0e530     20 4E 85 F1 | 	sub	fp, #32
0e534     FF FF 3F FF 
0e538     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e53c     0C 4E 05 51 |  if_ne	add	fp, #12
0e540     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e544     0C 4E 85 51 |  if_ne	sub	fp, #12
0e548     FF FF 7F 5F 
0e54c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e550     18 00 90 AD |  if_e	jmp	#LR__1122
0e554     0C 4E 05 F1 | 	add	fp, #12
0e558     A7 22 02 FB | 	rdlong	local03, fp
0e55c     0C 4E 85 F1 | 	sub	fp, #12
0e560     A7 20 02 FB | 	rdlong	local02, fp
0e564     10 23 0A F2 | 	cmp	local03, local02 wz
0e568     54 FF 9F 5D |  if_ne	jmp	#LR__1120
0e56c                 | LR__1122
0e56c                 | ' 
0e56c                 | ' if gotoheader(0)=gotoline then
0e56c     0C 4E 05 F1 | 	add	fp, #12
0e570     A7 22 02 FB | 	rdlong	local03, fp
0e574     0C 4E 85 F1 | 	sub	fp, #12
0e578     A7 1E 02 FB | 	rdlong	local01, fp
0e57c     0F 23 0A F2 | 	cmp	local03, local01 wz
0e580     D8 00 90 5D |  if_ne	jmp	#LR__1123
0e584     6A 00 00 FF 
0e588     70 E4 05 F1 | 	add	objptr, ##54384
0e58c     F2 1E 02 FB | 	rdlong	local01, objptr
0e590     0F 21 02 F6 | 	mov	local02, local01
0e594     01 20 66 F0 | 	shl	local02, #1
0e598     0F 21 02 F1 | 	add	local02, local01
0e59c     02 20 66 F0 | 	shl	local02, #2
0e5a0     03 00 00 FF 
0e5a4     04 E4 85 F1 | 	sub	objptr, ##1540
0e5a8     F2 20 02 F1 | 	add	local02, objptr
0e5ac     08 4E 05 F1 | 	add	fp, #8
0e5b0     A7 22 02 FB | 	rdlong	local03, fp
0e5b4     10 23 62 FC | 	wrlong	local03, local02
0e5b8     03 00 00 FF 
0e5bc     04 E4 05 F1 | 	add	objptr, ##1540
0e5c0     F2 1E 02 FB | 	rdlong	local01, objptr
0e5c4     0F 21 02 F6 | 	mov	local02, local01
0e5c8     01 20 66 F0 | 	shl	local02, #1
0e5cc     0F 21 02 F1 | 	add	local02, local01
0e5d0     02 20 66 F0 | 	shl	local02, #2
0e5d4     03 00 00 FF 
0e5d8     04 E4 85 F1 | 	sub	objptr, ##1540
0e5dc     F2 20 02 F1 | 	add	local02, objptr
0e5e0     08 20 06 F1 | 	add	local02, #8
0e5e4     10 9D 68 FC | 	wrlong	#78, local02
0e5e8     03 00 00 FF 
0e5ec     04 E4 05 F1 | 	add	objptr, ##1540
0e5f0     F2 20 02 FB | 	rdlong	local02, objptr
0e5f4     10 13 02 F6 | 	mov	arg01, local02
0e5f8     01 12 66 F0 | 	shl	arg01, #1
0e5fc     10 13 02 F1 | 	add	arg01, local02
0e600     02 12 66 F0 | 	shl	arg01, #2
0e604     03 00 00 FF 
0e608     04 E4 85 F1 | 	sub	objptr, ##1540
0e60c     F2 12 02 F1 | 	add	arg01, objptr
0e610     12 00 00 FF 
0e614     3C E5 05 F1 | 	add	objptr, ##9532
0e618     F2 14 02 FB | 	rdlong	arg02, objptr
0e61c     02 22 06 F6 | 	mov	local03, #2
0e620     10 23 02 F1 | 	add	local03, local02
0e624     14 00 00 FF 
0e628     54 E5 85 F1 | 	sub	objptr, ##10580
0e62c     F2 16 02 FB | 	rdlong	arg03, objptr
0e630     0B 23 02 FD | 	qmul	local03, arg03
0e634     08 4E 85 F1 | 	sub	fp, #8
0e638     59 00 00 FF 
0e63c     88 E5 85 F1 | 	sub	objptr, ##45960
0e640     18 22 62 FD | 	getqx	local03
0e644     11 15 02 F1 | 	add	arg02, local03
0e648     64 F3 B0 FD | 	call	#_psram_spin2_write
0e64c     0B 00 00 FF 
0e650     CC E4 85 F1 | 	sub	objptr, ##5836
0e654     18 FD BF FD | 	call	#_do_fast_goto
0e658     08 00 90 FD | 	jmp	#LR__1124
0e65c                 | LR__1123
0e65c     26 12 06 F6 | 	mov	arg01, #38
0e660     78 BA B0 FD | 	call	#_printerror
0e664                 | LR__1124
0e664     A7 F0 03 F6 | 	mov	ptra, fp
0e668     B2 00 A0 FD | 	call	#popregs_
0e66c                 | _do_find_goto_ret
0e66c     2D 00 64 FD | 	ret
0e670                 | 
0e670                 | ' 
0e670                 | ' sub do_slow_goto
0e670                 | _do_slow_goto
0e670                 | _do_slow_goto_ret
0e670     2D 00 64 FD | 	ret
0e674                 | 
0e674                 | ' 
0e674                 | ' '----------------------- Error processing
0e674                 | ' 
0e674                 | ' sub do_error
0e674                 | _do_error
0e674     01 4A 05 F6 | 	mov	COUNT_, #1
0e678     A8 00 A0 FD | 	call	#pushregs_
0e67c     6A 00 00 FF 
0e680     70 E4 05 F1 | 	add	objptr, ##54384
0e684     F2 18 02 FB | 	rdlong	arg04, objptr
0e688     0C 17 02 F6 | 	mov	arg03, arg04
0e68c     01 16 66 F0 | 	shl	arg03, #1
0e690     0C 17 02 F1 | 	add	arg03, arg04
0e694     02 16 66 F0 | 	shl	arg03, #2
0e698     03 00 00 FF 
0e69c     04 E4 85 F1 | 	sub	objptr, ##1540
0e6a0     F2 16 02 F1 | 	add	arg03, objptr
0e6a4     0B 1F 02 FB | 	rdlong	local01, arg03
0e6a8                 | ' r=compiledline(lineptr_e).result.uresult
0e6a8                 | ' print "Error ";r;": ";errors$(r)
0e6a8     00 12 06 F6 | 	mov	arg01, #0
0e6ac     67 00 00 FF 
0e6b0     6C E4 85 F1 | 	sub	objptr, ##52844
0e6b4     14 58 B1 FD | 	call	#__system___getiolock_0475
0e6b8     FD 12 02 F6 | 	mov	arg01, result1
0e6bc     78 FE B0 FD | 	call	#__system___lockmem
0e6c0     70 01 00 FF 
0e6c4     87 15 06 F6 | 	mov	arg02, ##@LR__5103
0e6c8     00 12 06 F6 | 	mov	arg01, #0
0e6cc     00 16 06 F6 | 	mov	arg03, #0
0e6d0     68 0B B1 FD | 	call	#__system___basic_print_string
0e6d4     00 12 06 F6 | 	mov	arg01, #0
0e6d8     0F 15 02 F6 | 	mov	arg02, local01
0e6dc     00 16 06 F6 | 	mov	arg03, #0
0e6e0     0A 18 06 F6 | 	mov	arg04, #10
0e6e4     D8 0B B1 FD | 	call	#__system___basic_print_unsigned
0e6e8     70 01 00 FF 
0e6ec     8E 15 06 F6 | 	mov	arg02, ##@LR__5104
0e6f0     00 12 06 F6 | 	mov	arg01, #0
0e6f4     00 16 06 F6 | 	mov	arg03, #0
0e6f8     40 0B B1 FD | 	call	#__system___basic_print_string
0e6fc     02 1E 66 F0 | 	shl	local01, #2
0e700     65 00 00 FF 
0e704     6C E4 05 F1 | 	add	objptr, ##51820
0e708     F2 1E 02 F1 | 	add	local01, objptr
0e70c     0F 15 02 FB | 	rdlong	arg02, local01
0e710     00 12 06 F6 | 	mov	arg01, #0
0e714     00 16 06 F6 | 	mov	arg03, #0
0e718     65 00 00 FF 
0e71c     6C E4 85 F1 | 	sub	objptr, ##51820
0e720     18 0B B1 FD | 	call	#__system___basic_print_string
0e724     00 12 06 F6 | 	mov	arg01, #0
0e728     0A 14 06 F6 | 	mov	arg02, #10
0e72c     00 16 06 F6 | 	mov	arg03, #0
0e730     B0 0A B1 FD | 	call	#__system___basic_print_char
0e734     00 12 06 F6 | 	mov	arg01, #0
0e738     90 57 B1 FD | 	call	#__system___getiolock_0475
0e73c     FD 00 68 FC | 	wrlong	#0, result1
0e740     A7 F0 03 F6 | 	mov	ptra, fp
0e744     B2 00 A0 FD | 	call	#popregs_
0e748                 | _do_error_ret
0e748     2D 00 64 FD | 	ret
0e74c                 | 
0e74c                 | ' 
0e74c                 | ' 
0e74c                 | ' '------------------ Assigning to a variable  
0e74c                 | ' 
0e74c                 | ' function  convertstring(psaddr as ulong) as string
0e74c                 | _convertstring
0e74c     04 4A 05 F6 | 	mov	COUNT_, #4
0e750     A8 00 A0 FD | 	call	#pushregs_
0e754     09 1F 02 F6 | 	mov	local01, arg01
0e758     10 BC B0 FD | 	call	#_pslpeek
0e75c     FD 20 02 F6 | 	mov	local02, result1
0e760     70 01 00 FF 
0e764     91 23 06 F6 | 	mov	local03, ##@LR__5105
0e768                 | ' 'print "in convertstring: psaddr=";psaddr
0e768                 | ' l=pslpeek(psaddr)
0e768                 | ' 'print "in convertstring: len=";l
0e768                 | ' s="" 
0e768                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e768     01 24 06 F6 | 	mov	local04, #1
0e76c     01 20 06 F1 | 	add	local02, #1
0e770                 | LR__1130
0e770     10 25 52 F2 | 	cmps	local04, local02 wc
0e774     30 00 90 3D |  if_ae	jmp	#LR__1131
0e778     0F 13 02 F6 | 	mov	arg01, local01
0e77c     03 12 06 F1 | 	add	arg01, #3
0e780     12 13 02 F1 | 	add	arg01, local04
0e784     8C BB B0 FD | 	call	#_pspeek
0e788     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e78c     B0 1F B1 FD | 	call	#__system__Chr_S
0e790     FD 14 02 F6 | 	mov	arg02, result1
0e794     11 13 02 F6 | 	mov	arg01, local03
0e798     F8 FD B0 FD | 	call	#__system___string_concat
0e79c     FD 22 02 F6 | 	mov	local03, result1
0e7a0     01 24 06 F1 | 	add	local04, #1
0e7a4     C8 FF 9F FD | 	jmp	#LR__1130
0e7a8                 | LR__1131
0e7a8                 | ' 'print "in convertstring: str=";s
0e7a8                 | ' return s
0e7a8     11 FB 01 F6 | 	mov	result1, local03
0e7ac     A7 F0 03 F6 | 	mov	ptra, fp
0e7b0     B2 00 A0 FD | 	call	#popregs_
0e7b4                 | _convertstring_ret
0e7b4     2D 00 64 FD | 	ret
0e7b8                 | 
0e7b8                 | ' 
0e7b8                 | ' sub do_assign
0e7b8                 | _do_assign
0e7b8     05 4A 05 F6 | 	mov	COUNT_, #5
0e7bc     A8 00 A0 FD | 	call	#pushregs_
0e7c0     44 F0 07 F1 | 	add	ptra, #68
0e7c4     6A 00 00 FF 
0e7c8     70 E4 05 F1 | 	add	objptr, ##54384
0e7cc     F2 16 02 FB | 	rdlong	arg03, objptr
0e7d0     0B 15 02 F6 | 	mov	arg02, arg03
0e7d4     01 14 66 F0 | 	shl	arg02, #1
0e7d8     0B 15 02 F1 | 	add	arg02, arg03
0e7dc     02 14 66 F0 | 	shl	arg02, #2
0e7e0     03 00 00 FF 
0e7e4     04 E4 85 F1 | 	sub	objptr, ##1540
0e7e8     F2 14 02 F1 | 	add	arg02, objptr
0e7ec     0A 15 02 FB | 	rdlong	arg02, arg02
0e7f0     18 4E 05 F1 | 	add	fp, #24
0e7f4     A7 14 62 FC | 	wrlong	arg02, fp
0e7f8                 | ' 
0e7f8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e7f8                 | ' 
0e7f8                 | ' if variables(varnum).vartype<array_no_type then 
0e7f8     18 4E 85 F1 | 	sub	fp, #24
0e7fc     04 14 66 F0 | 	shl	arg02, #4
0e800     32 00 00 FF 
0e804     74 E4 85 F1 | 	sub	objptr, ##25716
0e808     F2 14 02 F1 | 	add	arg02, objptr
0e80c     0C 14 06 F1 | 	add	arg02, #12
0e810     0A 17 02 FB | 	rdlong	arg03, arg02
0e814     00 17 16 F2 | 	cmp	arg03, #256 wc
0e818     34 00 00 FF 
0e81c     F8 E5 85 F1 | 	sub	objptr, ##27128
0e820     18 01 90 3D |  if_ae	jmp	#LR__1140
0e824     7C BC BF FD | 	call	#_pop
0e828     A7 FA 61 FC | 	wrlong	result1, fp
0e82c     04 4E 05 F1 | 	add	fp, #4
0e830     A7 FC 61 FC | 	wrlong	result2, fp
0e834     04 4E 05 F1 | 	add	fp, #4
0e838     A7 FE 61 FC | 	wrlong	result3, fp
0e83c     08 4E 85 F1 | 	sub	fp, #8
0e840     A7 16 02 FB | 	rdlong	arg03, fp
0e844     04 4E 05 F1 | 	add	fp, #4
0e848     A7 14 02 FB | 	rdlong	arg02, fp
0e84c     14 4E 05 F1 | 	add	fp, #20
0e850     A7 12 02 FB | 	rdlong	arg01, fp
0e854     04 12 66 F0 | 	shl	arg01, #4
0e858     34 00 00 FF 
0e85c     F8 E5 05 F1 | 	add	objptr, ##27128
0e860     F2 12 02 F1 | 	add	arg01, objptr
0e864     04 12 06 F1 | 	add	arg01, #4
0e868     09 17 62 FC | 	wrlong	arg03, arg01
0e86c     A7 16 02 FB | 	rdlong	arg03, fp
0e870     04 16 66 F0 | 	shl	arg03, #4
0e874     F2 16 02 F1 | 	add	arg03, objptr
0e878     08 16 06 F1 | 	add	arg03, #8
0e87c     0B 15 62 FC | 	wrlong	arg02, arg03
0e880     A7 16 02 FB | 	rdlong	arg03, fp
0e884     04 16 66 F0 | 	shl	arg03, #4
0e888     F2 16 02 F1 | 	add	arg03, objptr
0e88c     10 4E 85 F1 | 	sub	fp, #16
0e890     A7 14 02 FB | 	rdlong	arg02, fp
0e894     0C 16 06 F1 | 	add	arg03, #12
0e898     0B 15 62 FC | 	wrlong	arg02, arg03
0e89c                 | '   t1=pop() 
0e89c                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e89c                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e89c                 | '   if variables(varnum).vartype<>result_string2 then return
0e89c     10 4E 05 F1 | 	add	fp, #16
0e8a0     A7 16 02 FB | 	rdlong	arg03, fp
0e8a4     18 4E 85 F1 | 	sub	fp, #24
0e8a8     04 16 66 F0 | 	shl	arg03, #4
0e8ac     F2 16 02 F1 | 	add	arg03, objptr
0e8b0     0C 16 06 F1 | 	add	arg03, #12
0e8b4     0B 17 02 FB | 	rdlong	arg03, arg03
0e8b8     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e8bc     34 00 00 FF 
0e8c0     F8 E5 85 F1 | 	sub	objptr, ##27128
0e8c4     E4 04 90 5D |  if_ne	jmp	#LR__1163
0e8c8     18 4E 05 F1 | 	add	fp, #24
0e8cc     A7 16 02 FB | 	rdlong	arg03, fp
0e8d0     0B 1F 02 F6 | 	mov	local01, arg03
0e8d4     04 1E 66 F0 | 	shl	local01, #4
0e8d8     34 00 00 FF 
0e8dc     F8 E5 05 F1 | 	add	objptr, ##27128
0e8e0     F2 1E 02 F1 | 	add	local01, objptr
0e8e4     18 4E 85 F1 | 	sub	fp, #24
0e8e8     04 16 66 F0 | 	shl	arg03, #4
0e8ec     F2 16 02 F1 | 	add	arg03, objptr
0e8f0     04 16 06 F1 | 	add	arg03, #4
0e8f4     0B 13 02 FB | 	rdlong	arg01, arg03
0e8f8     34 00 00 FF 
0e8fc     F8 E5 85 F1 | 	sub	objptr, ##27128
0e900     48 FE BF FD | 	call	#_convertstring
0e904     04 1E 06 F1 | 	add	local01, #4
0e908     0F FB 61 FC | 	wrlong	result1, local01
0e90c     18 4E 05 F1 | 	add	fp, #24
0e910     A7 1E 02 FB | 	rdlong	local01, fp
0e914     18 4E 85 F1 | 	sub	fp, #24
0e918     04 1E 66 F0 | 	shl	local01, #4
0e91c     34 00 00 FF 
0e920     F8 E5 05 F1 | 	add	objptr, ##27128
0e924     F2 1E 02 F1 | 	add	local01, objptr
0e928     0C 1E 06 F1 | 	add	local01, #12
0e92c     0F 3F 68 FC | 	wrlong	#31, local01
0e930                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e930                 | '   variables(varnum).vartype=result_string
0e930                 | '   return
0e930     34 00 00 FF 
0e934     F8 E5 85 F1 | 	sub	objptr, ##27128
0e938     70 04 90 FD | 	jmp	#LR__1163
0e93c                 | LR__1140
0e93c                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e93c     1C 4E 05 F1 | 	add	fp, #28
0e940     A7 00 68 FC | 	wrlong	#0, fp
0e944     97 16 48 FB | 	callpa	#(@LR__1142-@LR__1141)>>2,fcache_load_ptr_
0e948                 | LR__1141
0e948     A7 1E 02 FB | 	rdlong	local01, fp
0e94c     02 1E 66 F0 | 	shl	local01, #2
0e950     18 4E 05 F1 | 	add	fp, #24
0e954     A7 1E 02 F1 | 	add	local01, fp
0e958     0F 01 68 FC | 	wrlong	#0, local01
0e95c     18 4E 85 F1 | 	sub	fp, #24
0e960     A7 1E 02 FB | 	rdlong	local01, fp
0e964     01 1E 06 F1 | 	add	local01, #1
0e968     A7 1E 62 FC | 	wrlong	local01, fp
0e96c     03 1E 16 F2 | 	cmp	local01, #3 wc
0e970     D4 FF 9F CD |  if_b	jmp	#LR__1141
0e974                 | LR__1142
0e974     6A 00 00 FF 
0e978     70 E4 05 F1 | 	add	objptr, ##54384
0e97c     F2 16 02 FB | 	rdlong	arg03, objptr
0e980     0B 1F 02 F6 | 	mov	local01, arg03
0e984     01 1E 66 F0 | 	shl	local01, #1
0e988     0B 1F 02 F1 | 	add	local01, arg03
0e98c     02 1E 66 F0 | 	shl	local01, #2
0e990     03 00 00 FF 
0e994     04 E4 85 F1 | 	sub	objptr, ##1540
0e998     F2 1E 02 F1 | 	add	local01, objptr
0e99c     04 1E 06 F1 | 	add	local01, #4
0e9a0     0F 21 02 FB | 	rdlong	local02, local01
0e9a4     04 4E 05 F1 | 	add	fp, #4
0e9a8     A7 20 62 FC | 	wrlong	local02, fp
0e9ac     20 4E 85 F1 | 	sub	fp, #32
0e9b0     67 00 00 FF 
0e9b4     6C E4 85 F1 | 	sub	objptr, ##52844
0e9b8     E8 BA BF FD | 	call	#_pop
0e9bc     A7 FA 61 FC | 	wrlong	result1, fp
0e9c0     04 4E 05 F1 | 	add	fp, #4
0e9c4     A7 FC 61 FC | 	wrlong	result2, fp
0e9c8     04 4E 05 F1 | 	add	fp, #4
0e9cc     A7 FE 61 FC | 	wrlong	result3, fp
0e9d0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e9d0                 | ' t1=pop() ' var value
0e9d0                 | ' if numpar>0 then
0e9d0     18 4E 05 F1 | 	add	fp, #24
0e9d4     A7 22 02 FB | 	rdlong	local03, fp
0e9d8     20 4E 85 F1 | 	sub	fp, #32
0e9dc     01 22 16 F2 | 	cmp	local03, #1 wc
0e9e0     78 00 90 CD |  if_b	jmp	#LR__1145
0e9e4                 | '   for i=numpar to 1 step -1
0e9e4     20 4E 05 F1 | 	add	fp, #32
0e9e8     A7 24 0A FB | 	rdlong	local04, fp wz
0e9ec     04 4E 85 F1 | 	sub	fp, #4
0e9f0     A7 24 62 FC | 	wrlong	local04, fp
0e9f4     1C 4E 85 F1 | 	sub	fp, #28
0e9f8     60 00 90 AD |  if_e	jmp	#LR__1144
0e9fc                 | LR__1143
0e9fc     A4 BA BF FD | 	call	#_pop
0ea00     0C 4E 05 F1 | 	add	fp, #12
0ea04     A7 FA 61 FC | 	wrlong	result1, fp
0ea08     04 4E 05 F1 | 	add	fp, #4
0ea0c     A7 FC 61 FC | 	wrlong	result2, fp
0ea10     04 4E 05 F1 | 	add	fp, #4
0ea14     A7 FE 61 FC | 	wrlong	result3, fp
0ea18     08 4E 05 F1 | 	add	fp, #8
0ea1c     A7 22 02 FB | 	rdlong	local03, fp
0ea20     01 22 86 F1 | 	sub	local03, #1
0ea24     02 22 66 F0 | 	shl	local03, #2
0ea28     18 4E 05 F1 | 	add	fp, #24
0ea2c     A7 22 02 F1 | 	add	local03, fp
0ea30     28 4E 85 F1 | 	sub	fp, #40
0ea34     A7 12 02 F6 | 	mov	arg01, fp
0ea38     0C 4E 85 F1 | 	sub	fp, #12
0ea3c     30 45 B0 FD | 	call	#_converttoint
0ea40     11 FB 61 FC | 	wrlong	result1, local03
0ea44     1C 4E 05 F1 | 	add	fp, #28
0ea48     A7 24 02 FB | 	rdlong	local04, fp
0ea4c     01 24 8E F1 | 	sub	local04, #1 wz
0ea50     A7 24 62 FC | 	wrlong	local04, fp
0ea54     1C 4E 85 F1 | 	sub	fp, #28
0ea58     A0 FF 9F 5D |  if_ne	jmp	#LR__1143
0ea5c                 | LR__1144
0ea5c                 | LR__1145
0ea5c     18 4E 05 F1 | 	add	fp, #24
0ea60     A7 1E 02 FB | 	rdlong	local01, fp
0ea64     04 1E 66 F0 | 	shl	local01, #4
0ea68     34 00 00 FF 
0ea6c     F8 E5 05 F1 | 	add	objptr, ##27128
0ea70     F2 1E 02 F1 | 	add	local01, objptr
0ea74     04 1E 06 F1 | 	add	local01, #4
0ea78     0F 13 02 FB | 	rdlong	arg01, local01
0ea7c     0C 4E 05 F1 | 	add	fp, #12
0ea80     A7 12 62 FC | 	wrlong	arg01, fp
0ea84     24 4E 85 F1 | 	sub	fp, #36
0ea88     34 00 00 FF 
0ea8c     F8 E5 85 F1 | 	sub	objptr, ##27128
0ea90     D8 B8 B0 FD | 	call	#_pslpeek
0ea94     FD 24 32 F9 | 	getword	local04, result1, #0
0ea98     28 4E 05 F1 | 	add	fp, #40
0ea9c     A7 24 62 FC | 	wrlong	local04, fp
0eaa0     04 4E 85 F1 | 	sub	fp, #4
0eaa4     A7 12 02 FB | 	rdlong	arg01, fp
0eaa8     24 4E 85 F1 | 	sub	fp, #36
0eaac     02 12 06 F1 | 	add	arg01, #2
0eab0     60 B8 B0 FD | 	call	#_pspeek
0eab4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eab8     2C 4E 05 F1 | 	add	fp, #44
0eabc     A7 FA 61 FC | 	wrlong	result1, fp
0eac0                 | ' esize=pspeek(arrptr+2)
0eac0                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0eac0     08 4E 85 F1 | 	sub	fp, #8
0eac4     A7 12 02 FB | 	rdlong	arg01, fp
0eac8     24 4E 85 F1 | 	sub	fp, #36
0eacc     04 12 06 F1 | 	add	arg01, #4
0ead0     98 B8 B0 FD | 	call	#_pslpeek
0ead4     FD 24 02 F6 | 	mov	local04, result1
0ead8     34 4E 05 F1 | 	add	fp, #52
0eadc     A7 1E 02 FB | 	rdlong	local01, fp
0eae0     34 4E 85 F1 | 	sub	fp, #52
0eae4     12 1F 12 F2 | 	cmp	local01, local04 wc
0eae8     54 00 90 3D |  if_ae	jmp	#LR__1146
0eaec     24 4E 05 F1 | 	add	fp, #36
0eaf0     A7 12 02 FB | 	rdlong	arg01, fp
0eaf4     24 4E 85 F1 | 	sub	fp, #36
0eaf8     08 12 06 F1 | 	add	arg01, #8
0eafc     6C B8 B0 FD | 	call	#_pslpeek
0eb00     FD 1E 02 F6 | 	mov	local01, result1
0eb04     38 4E 05 F1 | 	add	fp, #56
0eb08     A7 24 02 FB | 	rdlong	local04, fp
0eb0c     38 4E 85 F1 | 	sub	fp, #56
0eb10     0F 25 12 F2 | 	cmp	local04, local01 wc
0eb14     28 00 90 3D |  if_ae	jmp	#LR__1146
0eb18     24 4E 05 F1 | 	add	fp, #36
0eb1c     A7 12 02 FB | 	rdlong	arg01, fp
0eb20     24 4E 85 F1 | 	sub	fp, #36
0eb24     0C 12 06 F1 | 	add	arg01, #12
0eb28     40 B8 B0 FD | 	call	#_pslpeek
0eb2c     3C 4E 05 F1 | 	add	fp, #60
0eb30     A7 24 02 FB | 	rdlong	local04, fp
0eb34     3C 4E 85 F1 | 	sub	fp, #60
0eb38     FD 24 12 F2 | 	cmp	local04, result1 wc
0eb3c     0C 00 90 CD |  if_b	jmp	#LR__1147
0eb40                 | LR__1146
0eb40     31 12 06 F6 | 	mov	arg01, #49
0eb44     94 B5 B0 FD | 	call	#_printerror
0eb48     60 02 90 FD | 	jmp	#LR__1163
0eb4c                 | LR__1147
0eb4c     24 4E 05 F1 | 	add	fp, #36
0eb50     A7 12 02 FB | 	rdlong	arg01, fp
0eb54     09 25 02 F6 | 	mov	local04, arg01
0eb58     10 24 06 F1 | 	add	local04, #16
0eb5c     24 4E 85 F1 | 	sub	fp, #36
0eb60     04 12 06 F1 | 	add	arg01, #4
0eb64     04 B8 B0 FD | 	call	#_pslpeek
0eb68     FD 1E 02 F6 | 	mov	local01, result1
0eb6c     38 4E 05 F1 | 	add	fp, #56
0eb70     A7 20 02 FB | 	rdlong	local02, fp
0eb74     10 1F 02 FD | 	qmul	local01, local02
0eb78     04 4E 85 F1 | 	sub	fp, #4
0eb7c     A7 22 02 FB | 	rdlong	local03, fp
0eb80     10 4E 85 F1 | 	sub	fp, #16
0eb84     A7 12 02 FB | 	rdlong	arg01, fp
0eb88     24 4E 85 F1 | 	sub	fp, #36
0eb8c     08 12 06 F1 | 	add	arg01, #8
0eb90     18 20 62 FD | 	getqx	local02
0eb94     10 23 02 F1 | 	add	local03, local02
0eb98     D0 B7 B0 FD | 	call	#_pslpeek
0eb9c     FD 20 02 F6 | 	mov	local02, result1
0eba0     24 4E 05 F1 | 	add	fp, #36
0eba4     A7 12 02 FB | 	rdlong	arg01, fp
0eba8     24 4E 85 F1 | 	sub	fp, #36
0ebac     04 12 06 F1 | 	add	arg01, #4
0ebb0     B8 B7 B0 FD | 	call	#_pslpeek
0ebb4     FD 20 02 FD | 	qmul	local02, result1
0ebb8     3C 4E 05 F1 | 	add	fp, #60
0ebbc     A7 20 02 FB | 	rdlong	local02, fp
0ebc0     18 1E 62 FD | 	getqx	local01
0ebc4     10 1F 02 FD | 	qmul	local01, local02
0ebc8     10 4E 85 F1 | 	sub	fp, #16
0ebcc     A7 20 02 FB | 	rdlong	local02, fp
0ebd0     18 1E 62 FD | 	getqx	local01
0ebd4     0F 23 02 F1 | 	add	local03, local01
0ebd8     11 21 02 FD | 	qmul	local02, local03
0ebdc     04 4E 05 F1 | 	add	fp, #4
0ebe0                 | ' 
0ebe0                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0ebe0                 | ' select case arrtype
0ebe0     18 22 62 FD | 	getqx	local03
0ebe4     11 25 02 F1 | 	add	local04, local03
0ebe8     A7 24 62 FC | 	wrlong	local04, fp
0ebec     08 4E 85 F1 | 	sub	fp, #8
0ebf0     A7 26 02 FB | 	rdlong	local05, fp
0ebf4     28 4E 85 F1 | 	sub	fp, #40
0ebf8     00 27 86 F1 | 	sub	local05, #256
0ebfc     0C 26 26 F3 | 	fle	local05, #12
0ec00     30 26 62 FD | 	jmprel	local05
0ec04                 | LR__1148
0ec04     30 00 90 FD | 	jmp	#LR__1149
0ec08     58 00 90 FD | 	jmp	#LR__1150
0ec0c     6C 00 90 FD | 	jmp	#LR__1151
0ec10     80 00 90 FD | 	jmp	#LR__1152
0ec14     B0 00 90 FD | 	jmp	#LR__1153
0ec18     E0 00 90 FD | 	jmp	#LR__1154
0ec1c     F4 00 90 FD | 	jmp	#LR__1155
0ec20     08 01 90 FD | 	jmp	#LR__1156
0ec24     1C 01 90 FD | 	jmp	#LR__1157
0ec28     30 01 90 FD | 	jmp	#LR__1158
0ec2c     44 01 90 FD | 	jmp	#LR__1159
0ec30     58 01 90 FD | 	jmp	#LR__1160
0ec34     6C 01 90 FD | 	jmp	#LR__1161
0ec38                 | LR__1149
0ec38     A7 12 02 F6 | 	mov	arg01, fp
0ec3c     30 4E 05 F1 | 	add	fp, #48
0ec40     A7 14 02 FB | 	rdlong	arg02, fp
0ec44     30 4E 85 F1 | 	sub	fp, #48
0ec48     0C 16 06 F6 | 	mov	arg03, #12
0ec4c     0B 00 00 FF 
0ec50     CC E4 05 F1 | 	add	objptr, ##5836
0ec54     58 ED B0 FD | 	call	#_psram_spin2_write
0ec58     0B 00 00 FF 
0ec5c     CC E4 85 F1 | 	sub	objptr, ##5836
0ec60     48 01 90 FD | 	jmp	#LR__1162
0ec64                 | LR__1150
0ec64     30 4E 05 F1 | 	add	fp, #48
0ec68     A7 12 02 FB | 	rdlong	arg01, fp
0ec6c     30 4E 85 F1 | 	sub	fp, #48
0ec70     A7 14 02 FB | 	rdlong	arg02, fp
0ec74     54 B6 B0 FD | 	call	#_pspoke
0ec78     30 01 90 FD | 	jmp	#LR__1162
0ec7c                 | LR__1151
0ec7c     30 4E 05 F1 | 	add	fp, #48
0ec80     A7 12 02 FB | 	rdlong	arg01, fp
0ec84     30 4E 85 F1 | 	sub	fp, #48
0ec88     A7 14 02 FB | 	rdlong	arg02, fp
0ec8c     3C B6 B0 FD | 	call	#_pspoke
0ec90     18 01 90 FD | 	jmp	#LR__1162
0ec94                 | LR__1152
0ec94     30 4E 05 F1 | 	add	fp, #48
0ec98     A7 12 02 FB | 	rdlong	arg01, fp
0ec9c     30 4E 85 F1 | 	sub	fp, #48
0eca0     A7 14 02 FB | 	rdlong	arg02, fp
0eca4     24 B6 B0 FD | 	call	#_pspoke
0eca8     30 4E 05 F1 | 	add	fp, #48
0ecac     A7 12 02 FB | 	rdlong	arg01, fp
0ecb0     30 4E 85 F1 | 	sub	fp, #48
0ecb4     01 12 06 F1 | 	add	arg01, #1
0ecb8     A7 14 02 FB | 	rdlong	arg02, fp
0ecbc     08 14 46 F0 | 	shr	arg02, #8
0ecc0     08 B6 B0 FD | 	call	#_pspoke
0ecc4     E4 00 90 FD | 	jmp	#LR__1162
0ecc8                 | LR__1153
0ecc8     30 4E 05 F1 | 	add	fp, #48
0eccc     A7 12 02 FB | 	rdlong	arg01, fp
0ecd0     30 4E 85 F1 | 	sub	fp, #48
0ecd4     A7 14 02 FB | 	rdlong	arg02, fp
0ecd8     F0 B5 B0 FD | 	call	#_pspoke
0ecdc     30 4E 05 F1 | 	add	fp, #48
0ece0     A7 12 02 FB | 	rdlong	arg01, fp
0ece4     30 4E 85 F1 | 	sub	fp, #48
0ece8     01 12 06 F1 | 	add	arg01, #1
0ecec     A7 14 02 FB | 	rdlong	arg02, fp
0ecf0     08 14 46 F0 | 	shr	arg02, #8
0ecf4     D4 B5 B0 FD | 	call	#_pspoke
0ecf8     B0 00 90 FD | 	jmp	#LR__1162
0ecfc                 | LR__1154
0ecfc     30 4E 05 F1 | 	add	fp, #48
0ed00     A7 12 02 FB | 	rdlong	arg01, fp
0ed04     30 4E 85 F1 | 	sub	fp, #48
0ed08     A7 14 02 FB | 	rdlong	arg02, fp
0ed0c     2C B5 B0 FD | 	call	#_pslpoke
0ed10     98 00 90 FD | 	jmp	#LR__1162
0ed14                 | LR__1155
0ed14     30 4E 05 F1 | 	add	fp, #48
0ed18     A7 12 02 FB | 	rdlong	arg01, fp
0ed1c     30 4E 85 F1 | 	sub	fp, #48
0ed20     A7 14 02 FB | 	rdlong	arg02, fp
0ed24     14 B5 B0 FD | 	call	#_pslpoke
0ed28     80 00 90 FD | 	jmp	#LR__1162
0ed2c                 | LR__1156
0ed2c     30 4E 05 F1 | 	add	fp, #48
0ed30     A7 12 02 FB | 	rdlong	arg01, fp
0ed34     30 4E 85 F1 | 	sub	fp, #48
0ed38     A7 14 02 FB | 	rdlong	arg02, fp
0ed3c     FC B4 B0 FD | 	call	#_pslpoke
0ed40     68 00 90 FD | 	jmp	#LR__1162
0ed44                 | LR__1157
0ed44     30 4E 05 F1 | 	add	fp, #48
0ed48     A7 12 02 FB | 	rdlong	arg01, fp
0ed4c     30 4E 85 F1 | 	sub	fp, #48
0ed50     A7 14 02 FB | 	rdlong	arg02, fp
0ed54     E4 B4 B0 FD | 	call	#_pslpoke
0ed58     50 00 90 FD | 	jmp	#LR__1162
0ed5c                 | LR__1158
0ed5c     30 4E 05 F1 | 	add	fp, #48
0ed60     A7 12 02 FB | 	rdlong	arg01, fp
0ed64     30 4E 85 F1 | 	sub	fp, #48
0ed68     A7 14 02 FB | 	rdlong	arg02, fp
0ed6c     CC B4 B0 FD | 	call	#_pslpoke
0ed70     38 00 90 FD | 	jmp	#LR__1162
0ed74                 | LR__1159
0ed74     30 4E 05 F1 | 	add	fp, #48
0ed78     A7 12 02 FB | 	rdlong	arg01, fp
0ed7c     30 4E 85 F1 | 	sub	fp, #48
0ed80     A7 14 02 FB | 	rdlong	arg02, fp
0ed84     B4 B4 B0 FD | 	call	#_pslpoke
0ed88     20 00 90 FD | 	jmp	#LR__1162
0ed8c                 | LR__1160
0ed8c     30 4E 05 F1 | 	add	fp, #48
0ed90     A7 12 02 FB | 	rdlong	arg01, fp
0ed94     30 4E 85 F1 | 	sub	fp, #48
0ed98     A7 14 02 FB | 	rdlong	arg02, fp
0ed9c     9C B4 B0 FD | 	call	#_pslpoke
0eda0     08 00 90 FD | 	jmp	#LR__1162
0eda4                 | LR__1161
0eda4     2F 12 06 F6 | 	mov	arg01, #47
0eda8     30 B3 B0 FD | 	call	#_printerror
0edac                 | LR__1162
0edac                 | LR__1163
0edac     A7 F0 03 F6 | 	mov	ptra, fp
0edb0     B2 00 A0 FD | 	call	#popregs_
0edb4                 | _do_assign_ret
0edb4     2D 00 64 FD | 	ret
0edb8                 | 
0edb8                 | ' 
0edb8                 | ' 
0edb8                 | ' ' --------------------- Read a variable and push to the stack
0edb8                 | ' 
0edb8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0edb8                 | ' 
0edb8                 | ' sub do_getvar
0edb8                 | _do_getvar
0edb8     04 4A 05 F6 | 	mov	COUNT_, #4
0edbc     A8 00 A0 FD | 	call	#pushregs_
0edc0     3C F0 07 F1 | 	add	ptra, #60
0edc4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0edc4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0edc4     6A 00 00 FF 
0edc8     70 E4 05 F1 | 	add	objptr, ##54384
0edcc     F2 1E 02 FB | 	rdlong	local01, objptr
0edd0     0F 17 02 F6 | 	mov	arg03, local01
0edd4     01 16 66 F0 | 	shl	arg03, #1
0edd8     0F 17 02 F1 | 	add	arg03, local01
0eddc     02 16 66 F0 | 	shl	arg03, #2
0ede0     03 00 00 FF 
0ede4     04 E4 85 F1 | 	sub	objptr, ##1540
0ede8     F2 16 02 F1 | 	add	arg03, objptr
0edec     04 16 06 F1 | 	add	arg03, #4
0edf0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0edf4     67 00 00 FF 
0edf8     6C E4 85 F1 | 	sub	objptr, ##52844
0edfc     C4 00 90 5D |  if_ne	jmp	#LR__1171
0ee00     6A 00 00 FF 
0ee04     70 E4 05 F1 | 	add	objptr, ##54384
0ee08     F2 1E 02 FB | 	rdlong	local01, objptr
0ee0c     0F 13 02 F6 | 	mov	arg01, local01
0ee10     01 12 66 F0 | 	shl	arg01, #1
0ee14     0F 13 02 F1 | 	add	arg01, local01
0ee18     02 12 66 F0 | 	shl	arg01, #2
0ee1c     03 00 00 FF 
0ee20     04 E4 85 F1 | 	sub	objptr, ##1540
0ee24     F2 12 02 F1 | 	add	arg01, objptr
0ee28     09 1F 02 FB | 	rdlong	local01, arg01
0ee2c     04 1E 66 F0 | 	shl	local01, #4
0ee30     32 00 00 FF 
0ee34     74 E4 85 F1 | 	sub	objptr, ##25716
0ee38     F2 1E 02 F1 | 	add	local01, objptr
0ee3c     04 1E 06 F1 | 	add	local01, #4
0ee40     0F 13 02 FB | 	rdlong	arg01, local01
0ee44     04 1E 06 F1 | 	add	local01, #4
0ee48     0F 1F 02 FB | 	rdlong	local01, local01
0ee4c     A7 12 62 FC | 	wrlong	arg01, fp
0ee50     04 4E 05 F1 | 	add	fp, #4
0ee54     A7 1E 62 FC | 	wrlong	local01, fp
0ee58     35 00 00 FF 
0ee5c     78 E4 05 F1 | 	add	objptr, ##27256
0ee60     F2 1E 02 FB | 	rdlong	local01, objptr
0ee64     0F 13 02 F6 | 	mov	arg01, local01
0ee68     01 12 66 F0 | 	shl	arg01, #1
0ee6c     0F 13 02 F1 | 	add	arg01, local01
0ee70     02 12 66 F0 | 	shl	arg01, #2
0ee74     03 00 00 FF 
0ee78     04 E4 85 F1 | 	sub	objptr, ##1540
0ee7c     F2 12 02 F1 | 	add	arg01, objptr
0ee80     09 1F 02 FB | 	rdlong	local01, arg01
0ee84     04 1E 66 F0 | 	shl	local01, #4
0ee88     32 00 00 FF 
0ee8c     74 E4 85 F1 | 	sub	objptr, ##25716
0ee90     F2 1E 02 F1 | 	add	local01, objptr
0ee94     0C 1E 06 F1 | 	add	local01, #12
0ee98     0F 1F 02 FB | 	rdlong	local01, local01
0ee9c     04 4E 05 F1 | 	add	fp, #4
0eea0     A7 1E 62 FC | 	wrlong	local01, fp
0eea4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0eea4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0eea4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0eea4     08 4E 85 F1 | 	sub	fp, #8
0eea8     00 1F 16 F2 | 	cmp	local01, #256 wc
0eeac     34 00 00 FF 
0eeb0     F8 E5 85 F1 | 	sub	objptr, ##27128
0eeb4     0C 00 90 3D |  if_ae	jmp	#LR__1170
0eeb8     A7 12 02 F6 | 	mov	arg01, fp
0eebc     7C B6 BF FD | 	call	#_push
0eec0     A0 04 90 FD | 	jmp	#LR__1192
0eec4                 | LR__1170
0eec4                 | LR__1171
0eec4     6A 00 00 FF 
0eec8     70 E4 05 F1 | 	add	objptr, ##54384
0eecc     F2 16 02 FB | 	rdlong	arg03, objptr
0eed0     0B 15 02 F6 | 	mov	arg02, arg03
0eed4     01 14 66 F0 | 	shl	arg02, #1
0eed8     0B 15 02 F1 | 	add	arg02, arg03
0eedc     02 14 66 F0 | 	shl	arg02, #2
0eee0     03 00 00 FF 
0eee4     04 E4 85 F1 | 	sub	objptr, ##1540
0eee8     F2 14 02 F1 | 	add	arg02, objptr
0eeec     0A 17 02 FB | 	rdlong	arg03, arg02
0eef0     04 16 66 F0 | 	shl	arg03, #4
0eef4     32 00 00 FF 
0eef8     74 E4 85 F1 | 	sub	objptr, ##25716
0eefc     F2 16 02 F1 | 	add	arg03, objptr
0ef00     04 16 06 F1 | 	add	arg03, #4
0ef04     0B 13 02 FB | 	rdlong	arg01, arg03
0ef08     0C 4E 05 F1 | 	add	fp, #12
0ef0c     A7 12 62 FC | 	wrlong	arg01, fp
0ef10     0C 4E 85 F1 | 	sub	fp, #12
0ef14     34 00 00 FF 
0ef18     F8 E5 85 F1 | 	sub	objptr, ##27128
0ef1c     4C B4 B0 FD | 	call	#_pslpeek
0ef20     FD FA 31 F9 | 	getword	result1, result1, #0
0ef24     10 4E 05 F1 | 	add	fp, #16
0ef28     A7 FA 61 FC | 	wrlong	result1, fp
0ef2c     6A 00 00 FF 
0ef30     70 E4 05 F1 | 	add	objptr, ##54384
0ef34     F2 16 02 FB | 	rdlong	arg03, objptr
0ef38     0B 15 02 F6 | 	mov	arg02, arg03
0ef3c     01 14 66 F0 | 	shl	arg02, #1
0ef40     0B 15 02 F1 | 	add	arg02, arg03
0ef44     02 14 66 F0 | 	shl	arg02, #2
0ef48     03 00 00 FF 
0ef4c     04 E4 85 F1 | 	sub	objptr, ##1540
0ef50     F2 14 02 F1 | 	add	arg02, objptr
0ef54     04 14 06 F1 | 	add	arg02, #4
0ef58     0A 17 02 FB | 	rdlong	arg03, arg02
0ef5c     04 4E 05 F1 | 	add	fp, #4
0ef60     A7 16 62 FC | 	wrlong	arg03, fp
0ef64     08 4E 85 F1 | 	sub	fp, #8
0ef68     A7 12 02 FB | 	rdlong	arg01, fp
0ef6c     0C 4E 85 F1 | 	sub	fp, #12
0ef70     02 12 06 F1 | 	add	arg01, #2
0ef74     67 00 00 FF 
0ef78     6C E4 85 F1 | 	sub	objptr, ##52844
0ef7c     94 B3 B0 FD | 	call	#_pspeek
0ef80     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ef84     18 4E 05 F1 | 	add	fp, #24
0ef88     A7 FA 61 FC | 	wrlong	result1, fp
0ef8c     0C 4E 85 F1 | 	sub	fp, #12
0ef90     A7 12 02 FB | 	rdlong	arg01, fp
0ef94     0C 4E 85 F1 | 	sub	fp, #12
0ef98     04 12 06 F1 | 	add	arg01, #4
0ef9c     CC B3 B0 FD | 	call	#_pslpeek
0efa0     1C 4E 05 F1 | 	add	fp, #28
0efa4     A7 FA 61 FC | 	wrlong	result1, fp
0efa8     10 4E 85 F1 | 	sub	fp, #16
0efac     A7 12 02 FB | 	rdlong	arg01, fp
0efb0     0C 4E 85 F1 | 	sub	fp, #12
0efb4     08 12 06 F1 | 	add	arg01, #8
0efb8     B0 B3 B0 FD | 	call	#_pslpeek
0efbc     20 4E 05 F1 | 	add	fp, #32
0efc0     A7 FA 61 FC | 	wrlong	result1, fp
0efc4     14 4E 85 F1 | 	sub	fp, #20
0efc8     A7 12 02 FB | 	rdlong	arg01, fp
0efcc     0C 4E 85 F1 | 	sub	fp, #12
0efd0     0C 12 06 F1 | 	add	arg01, #12
0efd4     94 B3 B0 FD | 	call	#_pslpeek
0efd8     24 4E 05 F1 | 	add	fp, #36
0efdc     A7 FA 61 FC | 	wrlong	result1, fp
0efe0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0efe0                 | ' esize=pspeek(arrptr+2)
0efe0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0efe0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0efe0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0efe0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0efe0     10 4E 85 F1 | 	sub	fp, #16
0efe4     A7 16 02 FB | 	rdlong	arg03, fp
0efe8     14 4E 85 F1 | 	sub	fp, #20
0efec     03 16 16 F2 | 	cmp	arg03, #3 wc
0eff0     38 00 90 CD |  if_b	jmp	#LR__1172
0eff4     AC B4 BF FD | 	call	#_pop
0eff8     FF 16 02 F6 | 	mov	arg03, result3
0effc     A7 FA 61 FC | 	wrlong	result1, fp
0f000     04 4E 05 F1 | 	add	fp, #4
0f004     A7 FC 61 FC | 	wrlong	result2, fp
0f008     04 4E 05 F1 | 	add	fp, #4
0f00c     A7 16 62 FC | 	wrlong	arg03, fp
0f010     08 4E 85 F1 | 	sub	fp, #8
0f014     A7 12 02 F6 | 	mov	arg01, fp
0f018     54 3F B0 FD | 	call	#_converttoint
0f01c     30 4E 05 F1 | 	add	fp, #48
0f020     A7 FA 61 FC | 	wrlong	result1, fp
0f024     30 4E 85 F1 | 	sub	fp, #48
0f028     0C 00 90 FD | 	jmp	#LR__1173
0f02c                 | LR__1172
0f02c     30 4E 05 F1 | 	add	fp, #48
0f030     A7 00 68 FC | 	wrlong	#0, fp
0f034     30 4E 85 F1 | 	sub	fp, #48
0f038                 | LR__1173
0f038                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f038     14 4E 05 F1 | 	add	fp, #20
0f03c     A7 16 02 FB | 	rdlong	arg03, fp
0f040     14 4E 85 F1 | 	sub	fp, #20
0f044     02 16 16 F2 | 	cmp	arg03, #2 wc
0f048     38 00 90 CD |  if_b	jmp	#LR__1174
0f04c     54 B4 BF FD | 	call	#_pop
0f050     FF 16 02 F6 | 	mov	arg03, result3
0f054     A7 FA 61 FC | 	wrlong	result1, fp
0f058     04 4E 05 F1 | 	add	fp, #4
0f05c     A7 FC 61 FC | 	wrlong	result2, fp
0f060     04 4E 05 F1 | 	add	fp, #4
0f064     A7 16 62 FC | 	wrlong	arg03, fp
0f068     08 4E 85 F1 | 	sub	fp, #8
0f06c     A7 12 02 F6 | 	mov	arg01, fp
0f070     FC 3E B0 FD | 	call	#_converttoint
0f074     2C 4E 05 F1 | 	add	fp, #44
0f078     A7 FA 61 FC | 	wrlong	result1, fp
0f07c     2C 4E 85 F1 | 	sub	fp, #44
0f080     0C 00 90 FD | 	jmp	#LR__1175
0f084                 | LR__1174
0f084     2C 4E 05 F1 | 	add	fp, #44
0f088     A7 00 68 FC | 	wrlong	#0, fp
0f08c     2C 4E 85 F1 | 	sub	fp, #44
0f090                 | LR__1175
0f090                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f090     14 4E 05 F1 | 	add	fp, #20
0f094     A7 16 02 FB | 	rdlong	arg03, fp
0f098     14 4E 85 F1 | 	sub	fp, #20
0f09c     01 16 16 F2 | 	cmp	arg03, #1 wc
0f0a0     38 00 90 CD |  if_b	jmp	#LR__1176
0f0a4     FC B3 BF FD | 	call	#_pop
0f0a8     FF 16 02 F6 | 	mov	arg03, result3
0f0ac     A7 FA 61 FC | 	wrlong	result1, fp
0f0b0     04 4E 05 F1 | 	add	fp, #4
0f0b4     A7 FC 61 FC | 	wrlong	result2, fp
0f0b8     04 4E 05 F1 | 	add	fp, #4
0f0bc     A7 16 62 FC | 	wrlong	arg03, fp
0f0c0     08 4E 85 F1 | 	sub	fp, #8
0f0c4     A7 12 02 F6 | 	mov	arg01, fp
0f0c8     A4 3E B0 FD | 	call	#_converttoint
0f0cc     28 4E 05 F1 | 	add	fp, #40
0f0d0     A7 FA 61 FC | 	wrlong	result1, fp
0f0d4     28 4E 85 F1 | 	sub	fp, #40
0f0d8     0C 00 90 FD | 	jmp	#LR__1177
0f0dc                 | LR__1176
0f0dc     28 4E 05 F1 | 	add	fp, #40
0f0e0     A7 00 68 FC | 	wrlong	#0, fp
0f0e4     28 4E 85 F1 | 	sub	fp, #40
0f0e8                 | LR__1177
0f0e8     0C 4E 05 F1 | 	add	fp, #12
0f0ec     A7 20 02 FB | 	rdlong	local02, fp
0f0f0     1C 4E 05 F1 | 	add	fp, #28
0f0f4     A7 22 02 FB | 	rdlong	local03, fp
0f0f8     04 4E 05 F1 | 	add	fp, #4
0f0fc     A7 FC 01 FB | 	rdlong	result2, fp
0f100     10 4E 85 F1 | 	sub	fp, #16
0f104     A7 FE 01 FB | 	rdlong	result3, fp
0f108     FF FC 01 FD | 	qmul	result2, result3
0f10c     10 20 06 F1 | 	add	local02, #16
0f110     14 4E 05 F1 | 	add	fp, #20
0f114     A7 FC 01 FB | 	rdlong	result2, fp
0f118     18 FA 61 FD | 	getqx	result1
0f11c     FF FC 01 FD | 	qmul	result2, result3
0f120     FD 22 02 F1 | 	add	local03, result1
0f124     10 4E 85 F1 | 	sub	fp, #16
0f128     A7 FE 01 FB | 	rdlong	result3, fp
0f12c     18 FC 61 FD | 	getqx	result2
0f130     FF FC 01 FD | 	qmul	result2, result3
0f134     08 4E 85 F1 | 	sub	fp, #8
0f138     A7 FE 01 FB | 	rdlong	result3, fp
0f13c     18 FC 61 FD | 	getqx	result2
0f140     FE 22 02 F1 | 	add	local03, result2
0f144     FF 22 02 FD | 	qmul	local03, result3
0f148     1C 4E 05 F1 | 	add	fp, #28
0f14c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f14c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0f14c                 | ' 
0f14c                 | ' select case vartype
0f14c     18 FC 61 FD | 	getqx	result2
0f150     FE 20 02 F1 | 	add	local02, result2
0f154     A7 20 62 FC | 	wrlong	local02, fp
0f158     24 4E 85 F1 | 	sub	fp, #36
0f15c     A7 24 02 FB | 	rdlong	local04, fp
0f160     10 4E 85 F1 | 	sub	fp, #16
0f164     00 25 86 F1 | 	sub	local04, #256
0f168     0C 24 26 F3 | 	fle	local04, #12
0f16c     30 24 62 FD | 	jmprel	local04
0f170                 | LR__1178
0f170     30 00 90 FD | 	jmp	#LR__1179
0f174     58 00 90 FD | 	jmp	#LR__1180
0f178     8C 00 90 FD | 	jmp	#LR__1181
0f17c     AC 00 90 FD | 	jmp	#LR__1182
0f180     E8 00 90 FD | 	jmp	#LR__1183
0f184     08 01 90 FD | 	jmp	#LR__1184
0f188     24 01 90 FD | 	jmp	#LR__1185
0f18c     40 01 90 FD | 	jmp	#LR__1186
0f190     50 01 90 FD | 	jmp	#LR__1187
0f194     60 01 90 FD | 	jmp	#LR__1188
0f198     7C 01 90 FD | 	jmp	#LR__1189
0f19c     8C 01 90 FD | 	jmp	#LR__1190
0f1a0     B8 01 90 FD | 	jmp	#LR__1191
0f1a4                 | LR__1179
0f1a4     A7 12 02 F6 | 	mov	arg01, fp
0f1a8     34 4E 05 F1 | 	add	fp, #52
0f1ac     A7 14 02 FB | 	rdlong	arg02, fp
0f1b0     34 4E 85 F1 | 	sub	fp, #52
0f1b4     0C 16 06 F6 | 	mov	arg03, #12
0f1b8     0B 00 00 FF 
0f1bc     CC E4 05 F1 | 	add	objptr, ##5836
0f1c0     50 E7 B0 FD | 	call	#_psram_spin2_read1
0f1c4     0B 00 00 FF 
0f1c8     CC E4 85 F1 | 	sub	objptr, ##5836
0f1cc     8C 01 90 FD | 	jmp	#LR__1191
0f1d0                 | LR__1180
0f1d0     08 4E 05 F1 | 	add	fp, #8
0f1d4     A7 38 68 FC | 	wrlong	#28, fp
0f1d8     2C 4E 05 F1 | 	add	fp, #44
0f1dc     A7 12 02 FB | 	rdlong	arg01, fp
0f1e0     34 4E 85 F1 | 	sub	fp, #52
0f1e4     2C B1 B0 FD | 	call	#_pspeek
0f1e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f1ec     A7 FA 61 FC | 	wrlong	result1, fp
0f1f0     80 FA 15 F2 | 	cmp	result1, #128 wc
0f1f4     00 1F 66 36 |  if_ae	neg	local01, #256
0f1f8     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f1fc     11 1F 42 35 |  if_ae	or	local01, local03
0f200     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f204     54 01 90 FD | 	jmp	#LR__1191
0f208                 | LR__1181
0f208     08 4E 05 F1 | 	add	fp, #8
0f20c     A7 3A 68 FC | 	wrlong	#29, fp
0f210     2C 4E 05 F1 | 	add	fp, #44
0f214     A7 12 02 FB | 	rdlong	arg01, fp
0f218     34 4E 85 F1 | 	sub	fp, #52
0f21c     F4 B0 B0 FD | 	call	#_pspeek
0f220     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f224     A7 FA 61 FC | 	wrlong	result1, fp
0f228     30 01 90 FD | 	jmp	#LR__1191
0f22c                 | LR__1182
0f22c     08 4E 05 F1 | 	add	fp, #8
0f230     A7 38 68 FC | 	wrlong	#28, fp
0f234     2C 4E 05 F1 | 	add	fp, #44
0f238     A7 12 02 FB | 	rdlong	arg01, fp
0f23c     34 4E 85 F1 | 	sub	fp, #52
0f240     28 B1 B0 FD | 	call	#_pslpeek
0f244     FD FA 31 F9 | 	getword	result1, result1, #0
0f248     A7 FA 61 FC | 	wrlong	result1, fp
0f24c     40 00 00 FF 
0f250     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0f254     FF 7F 00 3F 
0f258     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0f25c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f260     11 1F 42 35 |  if_ae	or	local01, local03
0f264     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f268     F0 00 90 FD | 	jmp	#LR__1191
0f26c                 | LR__1183
0f26c     08 4E 05 F1 | 	add	fp, #8
0f270     A7 3A 68 FC | 	wrlong	#29, fp
0f274     2C 4E 05 F1 | 	add	fp, #44
0f278     A7 12 02 FB | 	rdlong	arg01, fp
0f27c     34 4E 85 F1 | 	sub	fp, #52
0f280     E8 B0 B0 FD | 	call	#_pslpeek
0f284     FD FA 31 F9 | 	getword	result1, result1, #0
0f288     A7 FA 61 FC | 	wrlong	result1, fp
0f28c     CC 00 90 FD | 	jmp	#LR__1191
0f290                 | LR__1184
0f290     08 4E 05 F1 | 	add	fp, #8
0f294     A7 38 68 FC | 	wrlong	#28, fp
0f298     2C 4E 05 F1 | 	add	fp, #44
0f29c     A7 12 02 FB | 	rdlong	arg01, fp
0f2a0     34 4E 85 F1 | 	sub	fp, #52
0f2a4     C4 B0 B0 FD | 	call	#_pslpeek
0f2a8     A7 FA 61 FC | 	wrlong	result1, fp
0f2ac     AC 00 90 FD | 	jmp	#LR__1191
0f2b0                 | LR__1185
0f2b0     08 4E 05 F1 | 	add	fp, #8
0f2b4     A7 3A 68 FC | 	wrlong	#29, fp
0f2b8     2C 4E 05 F1 | 	add	fp, #44
0f2bc     A7 12 02 FB | 	rdlong	arg01, fp
0f2c0     34 4E 85 F1 | 	sub	fp, #52
0f2c4     A4 B0 B0 FD | 	call	#_pslpeek
0f2c8     A7 FA 61 FC | 	wrlong	result1, fp
0f2cc     8C 00 90 FD | 	jmp	#LR__1191
0f2d0                 | LR__1186
0f2d0     08 4E 05 F1 | 	add	fp, #8
0f2d4     A7 FE 69 FC | 	wrlong	#255, fp
0f2d8     08 4E 85 F1 | 	sub	fp, #8
0f2dc     A7 60 68 FC | 	wrlong	#48, fp
0f2e0     78 00 90 FD | 	jmp	#LR__1191
0f2e4                 | LR__1187
0f2e4     08 4E 05 F1 | 	add	fp, #8
0f2e8     A7 FE 69 FC | 	wrlong	#255, fp
0f2ec     08 4E 85 F1 | 	sub	fp, #8
0f2f0     A7 60 68 FC | 	wrlong	#48, fp
0f2f4     64 00 90 FD | 	jmp	#LR__1191
0f2f8                 | LR__1188
0f2f8     08 4E 05 F1 | 	add	fp, #8
0f2fc     A7 3C 68 FC | 	wrlong	#30, fp
0f300     2C 4E 05 F1 | 	add	fp, #44
0f304     A7 12 02 FB | 	rdlong	arg01, fp
0f308     34 4E 85 F1 | 	sub	fp, #52
0f30c     5C B0 B0 FD | 	call	#_pslpeek
0f310     A7 FA 61 FC | 	wrlong	result1, fp
0f314     44 00 90 FD | 	jmp	#LR__1191
0f318                 | LR__1189
0f318     08 4E 05 F1 | 	add	fp, #8
0f31c     A7 FE 69 FC | 	wrlong	#255, fp
0f320     08 4E 85 F1 | 	sub	fp, #8
0f324     A7 60 68 FC | 	wrlong	#48, fp
0f328     30 00 90 FD | 	jmp	#LR__1191
0f32c                 | LR__1190
0f32c     08 4E 05 F1 | 	add	fp, #8
0f330     A7 3E 68 FC | 	wrlong	#31, fp
0f334     2C 4E 05 F1 | 	add	fp, #44
0f338     A7 12 02 FB | 	rdlong	arg01, fp
0f33c     34 4E 85 F1 | 	sub	fp, #52
0f340     28 B0 B0 FD | 	call	#_pslpeek
0f344     A7 FA 61 FC | 	wrlong	result1, fp
0f348     00 04 00 FF 
0f34c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f350     08 4E 05 31 |  if_ae	add	fp, #8
0f354     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f358     08 4E 85 31 |  if_ae	sub	fp, #8
0f35c                 | LR__1191
0f35c     A7 12 02 F6 | 	mov	arg01, fp
0f360     D8 B1 BF FD | 	call	#_push
0f364                 | LR__1192
0f364     A7 F0 03 F6 | 	mov	ptra, fp
0f368     B2 00 A0 FD | 	call	#popregs_
0f36c                 | _do_getvar_ret
0f36c     2D 00 64 FD | 	ret
0f370                 | 
0f370                 | ' 
0f370                 | ' 
0f370                 | ' sub do_getaddr
0f370                 | _do_getaddr
0f370     01 4A 05 F6 | 	mov	COUNT_, #1
0f374     A8 00 A0 FD | 	call	#pushregs_
0f378     38 F0 07 F1 | 	add	ptra, #56
0f37c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f37c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f37c     6A 00 00 FF 
0f380     70 E4 05 F1 | 	add	objptr, ##54384
0f384     F2 12 02 FB | 	rdlong	arg01, objptr
0f388     09 FD 01 F6 | 	mov	result2, arg01
0f38c     01 FC 65 F0 | 	shl	result2, #1
0f390     09 FD 01 F1 | 	add	result2, arg01
0f394     02 FC 65 F0 | 	shl	result2, #2
0f398     03 00 00 FF 
0f39c     04 E4 85 F1 | 	sub	objptr, ##1540
0f3a0     F2 FC 01 F1 | 	add	result2, objptr
0f3a4     04 FC 05 F1 | 	add	result2, #4
0f3a8     FE FC 09 FB | 	rdlong	result2, result2 wz
0f3ac     67 00 00 FF 
0f3b0     6C E4 85 F1 | 	sub	objptr, ##52844
0f3b4     C4 00 90 5D |  if_ne	jmp	#LR__1200
0f3b8     6A 00 00 FF 
0f3bc     70 E4 05 F1 | 	add	objptr, ##54384
0f3c0     F2 12 02 FB | 	rdlong	arg01, objptr
0f3c4     09 FD 01 F6 | 	mov	result2, arg01
0f3c8     01 FC 65 F0 | 	shl	result2, #1
0f3cc     09 FD 01 F1 | 	add	result2, arg01
0f3d0     02 FC 65 F0 | 	shl	result2, #2
0f3d4     03 00 00 FF 
0f3d8     04 E4 85 F1 | 	sub	objptr, ##1540
0f3dc     F2 FC 01 F1 | 	add	result2, objptr
0f3e0     FE 12 02 FB | 	rdlong	arg01, result2
0f3e4     04 12 66 F0 | 	shl	arg01, #4
0f3e8     32 00 00 FF 
0f3ec     74 E4 85 F1 | 	sub	objptr, ##25716
0f3f0     F2 12 02 F1 | 	add	arg01, objptr
0f3f4     0C 12 06 F1 | 	add	arg01, #12
0f3f8     09 13 02 FB | 	rdlong	arg01, arg01
0f3fc     08 4E 05 F1 | 	add	fp, #8
0f400     A7 12 62 FC | 	wrlong	arg01, fp
0f404                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f404                 | '    if t1.result_type>=array_no_type then goto 2200
0f404     08 4E 85 F1 | 	sub	fp, #8
0f408     00 13 16 F2 | 	cmp	arg01, #256 wc
0f40c     34 00 00 FF 
0f410     F8 E5 85 F1 | 	sub	objptr, ##27128
0f414     64 00 90 3D |  if_ae	jmp	#LR__1201
0f418     6A 00 00 FF 
0f41c     70 E4 05 F1 | 	add	objptr, ##54384
0f420     F2 12 02 FB | 	rdlong	arg01, objptr
0f424     09 FB 01 F6 | 	mov	result1, arg01
0f428     01 FA 65 F0 | 	shl	result1, #1
0f42c     09 FB 01 F1 | 	add	result1, arg01
0f430     02 FA 65 F0 | 	shl	result1, #2
0f434     03 00 00 FF 
0f438     04 E4 85 F1 | 	sub	objptr, ##1540
0f43c     F2 FA 01 F1 | 	add	result1, objptr
0f440     FD FA 01 FB | 	rdlong	result1, result1
0f444     04 FA 65 F0 | 	shl	result1, #4
0f448     32 00 00 FF 
0f44c     74 E4 85 F1 | 	sub	objptr, ##25716
0f450     F2 FA 01 F1 | 	add	result1, objptr
0f454     04 FA 05 F1 | 	add	result1, #4
0f458     34 00 00 FF 
0f45c     F8 E5 85 F1 | 	sub	objptr, ##27128
0f460     A7 FA 61 FC | 	wrlong	result1, fp
0f464     08 4E 05 F1 | 	add	fp, #8
0f468     A7 3A 68 FC | 	wrlong	#29, fp
0f46c     08 4E 85 F1 | 	sub	fp, #8
0f470     A7 12 02 F6 | 	mov	arg01, fp
0f474     C4 B0 BF FD | 	call	#_push
0f478                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0f478                 | '   t1.result_type=result_uint
0f478                 | '   push t1 : return
0f478     D8 02 90 FD | 	jmp	#LR__1210
0f47c                 | LR__1200
0f47c                 | LR__1201
0f47c     6A 00 00 FF 
0f480     70 E4 05 F1 | 	add	objptr, ##54384
0f484     F2 FE 01 FB | 	rdlong	result3, objptr
0f488     FF 12 02 F6 | 	mov	arg01, result3
0f48c     01 12 66 F0 | 	shl	arg01, #1
0f490     FF 12 02 F1 | 	add	arg01, result3
0f494     02 12 66 F0 | 	shl	arg01, #2
0f498     03 00 00 FF 
0f49c     04 E4 85 F1 | 	sub	objptr, ##1540
0f4a0     F2 12 02 F1 | 	add	arg01, objptr
0f4a4     09 13 02 FB | 	rdlong	arg01, arg01
0f4a8     04 12 66 F0 | 	shl	arg01, #4
0f4ac     32 00 00 FF 
0f4b0     74 E4 85 F1 | 	sub	objptr, ##25716
0f4b4     F2 12 02 F1 | 	add	arg01, objptr
0f4b8     04 12 06 F1 | 	add	arg01, #4
0f4bc     09 13 02 FB | 	rdlong	arg01, arg01
0f4c0     0C 4E 05 F1 | 	add	fp, #12
0f4c4     A7 12 62 FC | 	wrlong	arg01, fp
0f4c8     0C 4E 85 F1 | 	sub	fp, #12
0f4cc     34 00 00 FF 
0f4d0     F8 E5 85 F1 | 	sub	objptr, ##27128
0f4d4     94 AE B0 FD | 	call	#_pslpeek
0f4d8     FD FA 31 F9 | 	getword	result1, result1, #0
0f4dc     10 4E 05 F1 | 	add	fp, #16
0f4e0     A7 FA 61 FC | 	wrlong	result1, fp
0f4e4     6A 00 00 FF 
0f4e8     70 E4 05 F1 | 	add	objptr, ##54384
0f4ec     F2 FE 01 FB | 	rdlong	result3, objptr
0f4f0     FF 12 02 F6 | 	mov	arg01, result3
0f4f4     01 12 66 F0 | 	shl	arg01, #1
0f4f8     FF 12 02 F1 | 	add	arg01, result3
0f4fc     02 12 66 F0 | 	shl	arg01, #2
0f500     03 00 00 FF 
0f504     04 E4 85 F1 | 	sub	objptr, ##1540
0f508     F2 12 02 F1 | 	add	arg01, objptr
0f50c     04 12 06 F1 | 	add	arg01, #4
0f510     09 13 02 FB | 	rdlong	arg01, arg01
0f514     04 4E 05 F1 | 	add	fp, #4
0f518     A7 12 62 FC | 	wrlong	arg01, fp
0f51c     08 4E 85 F1 | 	sub	fp, #8
0f520     A7 12 02 FB | 	rdlong	arg01, fp
0f524     0C 4E 85 F1 | 	sub	fp, #12
0f528     02 12 06 F1 | 	add	arg01, #2
0f52c     67 00 00 FF 
0f530     6C E4 85 F1 | 	sub	objptr, ##52844
0f534     DC AD B0 FD | 	call	#_pspeek
0f538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f53c     18 4E 05 F1 | 	add	fp, #24
0f540     A7 FA 61 FC | 	wrlong	result1, fp
0f544     0C 4E 85 F1 | 	sub	fp, #12
0f548     A7 12 02 FB | 	rdlong	arg01, fp
0f54c     0C 4E 85 F1 | 	sub	fp, #12
0f550     04 12 06 F1 | 	add	arg01, #4
0f554     14 AE B0 FD | 	call	#_pslpeek
0f558     1C 4E 05 F1 | 	add	fp, #28
0f55c     A7 FA 61 FC | 	wrlong	result1, fp
0f560     10 4E 85 F1 | 	sub	fp, #16
0f564     A7 12 02 FB | 	rdlong	arg01, fp
0f568     0C 4E 85 F1 | 	sub	fp, #12
0f56c     08 12 06 F1 | 	add	arg01, #8
0f570     F8 AD B0 FD | 	call	#_pslpeek
0f574     20 4E 05 F1 | 	add	fp, #32
0f578     A7 FA 61 FC | 	wrlong	result1, fp
0f57c     14 4E 85 F1 | 	sub	fp, #20
0f580     A7 12 02 FB | 	rdlong	arg01, fp
0f584     0C 4E 85 F1 | 	sub	fp, #12
0f588     0C 12 06 F1 | 	add	arg01, #12
0f58c     DC AD B0 FD | 	call	#_pslpeek
0f590     24 4E 05 F1 | 	add	fp, #36
0f594     A7 FA 61 FC | 	wrlong	result1, fp
0f598                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f598                 | ' esize=pspeek(arrptr+2)
0f598                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f598                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f598                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f598                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f598     10 4E 85 F1 | 	sub	fp, #16
0f59c     A7 12 02 FB | 	rdlong	arg01, fp
0f5a0     14 4E 85 F1 | 	sub	fp, #20
0f5a4     03 12 16 F2 | 	cmp	arg01, #3 wc
0f5a8     34 00 90 CD |  if_b	jmp	#LR__1202
0f5ac     F4 AE BF FD | 	call	#_pop
0f5b0     A7 FA 61 FC | 	wrlong	result1, fp
0f5b4     04 4E 05 F1 | 	add	fp, #4
0f5b8     A7 FC 61 FC | 	wrlong	result2, fp
0f5bc     04 4E 05 F1 | 	add	fp, #4
0f5c0     A7 FE 61 FC | 	wrlong	result3, fp
0f5c4     08 4E 85 F1 | 	sub	fp, #8
0f5c8     A7 12 02 F6 | 	mov	arg01, fp
0f5cc     A0 39 B0 FD | 	call	#_converttoint
0f5d0     30 4E 05 F1 | 	add	fp, #48
0f5d4     A7 FA 61 FC | 	wrlong	result1, fp
0f5d8     30 4E 85 F1 | 	sub	fp, #48
0f5dc     0C 00 90 FD | 	jmp	#LR__1203
0f5e0                 | LR__1202
0f5e0     30 4E 05 F1 | 	add	fp, #48
0f5e4     A7 00 68 FC | 	wrlong	#0, fp
0f5e8     30 4E 85 F1 | 	sub	fp, #48
0f5ec                 | LR__1203
0f5ec                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f5ec     14 4E 05 F1 | 	add	fp, #20
0f5f0     A7 12 02 FB | 	rdlong	arg01, fp
0f5f4     14 4E 85 F1 | 	sub	fp, #20
0f5f8     02 12 16 F2 | 	cmp	arg01, #2 wc
0f5fc     34 00 90 CD |  if_b	jmp	#LR__1204
0f600     A0 AE BF FD | 	call	#_pop
0f604     A7 FA 61 FC | 	wrlong	result1, fp
0f608     04 4E 05 F1 | 	add	fp, #4
0f60c     A7 FC 61 FC | 	wrlong	result2, fp
0f610     04 4E 05 F1 | 	add	fp, #4
0f614     A7 FE 61 FC | 	wrlong	result3, fp
0f618     08 4E 85 F1 | 	sub	fp, #8
0f61c     A7 12 02 F6 | 	mov	arg01, fp
0f620     4C 39 B0 FD | 	call	#_converttoint
0f624     2C 4E 05 F1 | 	add	fp, #44
0f628     A7 FA 61 FC | 	wrlong	result1, fp
0f62c     2C 4E 85 F1 | 	sub	fp, #44
0f630     0C 00 90 FD | 	jmp	#LR__1205
0f634                 | LR__1204
0f634     2C 4E 05 F1 | 	add	fp, #44
0f638     A7 00 68 FC | 	wrlong	#0, fp
0f63c     2C 4E 85 F1 | 	sub	fp, #44
0f640                 | LR__1205
0f640                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f640     14 4E 05 F1 | 	add	fp, #20
0f644     A7 12 02 FB | 	rdlong	arg01, fp
0f648     14 4E 85 F1 | 	sub	fp, #20
0f64c     01 12 16 F2 | 	cmp	arg01, #1 wc
0f650     34 00 90 CD |  if_b	jmp	#LR__1206
0f654     4C AE BF FD | 	call	#_pop
0f658     A7 FA 61 FC | 	wrlong	result1, fp
0f65c     04 4E 05 F1 | 	add	fp, #4
0f660     A7 FC 61 FC | 	wrlong	result2, fp
0f664     04 4E 05 F1 | 	add	fp, #4
0f668     A7 FE 61 FC | 	wrlong	result3, fp
0f66c     08 4E 85 F1 | 	sub	fp, #8
0f670     A7 12 02 F6 | 	mov	arg01, fp
0f674     F8 38 B0 FD | 	call	#_converttoint
0f678     28 4E 05 F1 | 	add	fp, #40
0f67c     A7 FA 61 FC | 	wrlong	result1, fp
0f680     28 4E 85 F1 | 	sub	fp, #40
0f684     0C 00 90 FD | 	jmp	#LR__1207
0f688                 | LR__1206
0f688     28 4E 05 F1 | 	add	fp, #40
0f68c     A7 00 68 FC | 	wrlong	#0, fp
0f690     28 4E 85 F1 | 	sub	fp, #40
0f694                 | LR__1207
0f694                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f694                 | ' if numpar>0 then
0f694     14 4E 05 F1 | 	add	fp, #20
0f698     A7 FE 01 FB | 	rdlong	result3, fp
0f69c     14 4E 85 F1 | 	sub	fp, #20
0f6a0     01 FE 15 F2 | 	cmp	result3, #1 wc
0f6a4     8C 00 90 CD |  if_b	jmp	#LR__1208
0f6a8     0C 4E 05 F1 | 	add	fp, #12
0f6ac     A7 FC 01 FB | 	rdlong	result2, fp
0f6b0     1C 4E 05 F1 | 	add	fp, #28
0f6b4     A7 FE 01 FB | 	rdlong	result3, fp
0f6b8     04 4E 05 F1 | 	add	fp, #4
0f6bc     A7 12 02 FB | 	rdlong	arg01, fp
0f6c0     10 4E 85 F1 | 	sub	fp, #16
0f6c4     A7 FA 01 FB | 	rdlong	result1, fp
0f6c8     FD 12 02 FD | 	qmul	arg01, result1
0f6cc     10 FC 05 F1 | 	add	result2, #16
0f6d0     14 4E 05 F1 | 	add	fp, #20
0f6d4     A7 1E 02 FB | 	rdlong	local01, fp
0f6d8     18 12 62 FD | 	getqx	arg01
0f6dc     FD 1E 02 FD | 	qmul	local01, result1
0f6e0     09 FF 01 F1 | 	add	result3, arg01
0f6e4     10 4E 85 F1 | 	sub	fp, #16
0f6e8     A7 1E 02 FB | 	rdlong	local01, fp
0f6ec     18 FA 61 FD | 	getqx	result1
0f6f0     0F FB 01 FD | 	qmul	result1, local01
0f6f4     08 4E 85 F1 | 	sub	fp, #8
0f6f8     A7 1E 02 FB | 	rdlong	local01, fp
0f6fc     18 FA 61 FD | 	getqx	result1
0f700     FD FE 01 F1 | 	add	result3, result1
0f704     0F FF 01 FD | 	qmul	result3, local01
0f708     1C 4E 05 F1 | 	add	fp, #28
0f70c     18 1E 62 FD | 	getqx	local01
0f710     0F FD 01 F1 | 	add	result2, local01
0f714     A7 FC 61 FC | 	wrlong	result2, fp
0f718     2C 4E 85 F1 | 	sub	fp, #44
0f71c     A7 3A 68 FC | 	wrlong	#29, fp
0f720     2C 4E 05 F1 | 	add	fp, #44
0f724     A7 1E 02 FB | 	rdlong	local01, fp
0f728     34 4E 85 F1 | 	sub	fp, #52
0f72c     A7 1E 62 FC | 	wrlong	local01, fp
0f730     18 00 90 FD | 	jmp	#LR__1209
0f734                 | LR__1208
0f734     08 4E 05 F1 | 	add	fp, #8
0f738     A7 3A 68 FC | 	wrlong	#29, fp
0f73c     04 4E 05 F1 | 	add	fp, #4
0f740     A7 1E 02 FB | 	rdlong	local01, fp
0f744     0C 4E 85 F1 | 	sub	fp, #12
0f748     A7 1E 62 FC | 	wrlong	local01, fp
0f74c                 | LR__1209
0f74c     A7 12 02 F6 | 	mov	arg01, fp
0f750     E8 AD BF FD | 	call	#_push
0f754                 | LR__1210
0f754     A7 F0 03 F6 | 	mov	ptra, fp
0f758     B2 00 A0 FD | 	call	#popregs_
0f75c                 | _do_getaddr_ret
0f75c     2D 00 64 FD | 	ret
0f760                 | 
0f760                 | ' 
0f760                 | ' 
0f760                 | ' sub do_inkey
0f760                 | _do_inkey
0f760     02 4A 05 F6 | 	mov	COUNT_, #2
0f764     A8 00 A0 FD | 	call	#pushregs_
0f768     0C F0 07 F1 | 	add	ptra, #12
0f76c     D0 E5 B0 FD | 	call	#_usbnew_spin2_get_key
0f770     65 00 00 FF 
0f774     64 E4 05 F1 | 	add	objptr, ##51812
0f778     F2 FA 61 FC | 	wrlong	result1, objptr
0f77c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0f77c     65 00 00 FF 
0f780     64 E4 85 F1 | 	sub	objptr, ##51812
0f784     00 FA 0D F2 | 	cmp	result1, #0 wz
0f788     94 00 90 AD |  if_e	jmp	#LR__1221
0f78c     65 00 00 FF 
0f790     64 E4 05 F1 | 	add	objptr, ##51812
0f794     F2 1C 02 FB | 	rdlong	arg06, objptr
0f798     65 00 00 FF 
0f79c     64 E4 85 F1 | 	sub	objptr, ##51812
0f7a0     00 00 40 FF 
0f7a4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f7a8     65 00 00 CF 
0f7ac     64 E4 05 C1 |  if_b	add	objptr, ##51812
0f7b0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f7b4     65 00 00 CF 
0f7b8     64 E4 85 C1 |  if_b	sub	objptr, ##51812
0f7bc     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f7c0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f7c4     58 00 90 3D |  if_ae	jmp	#LR__1221
0f7c8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0f7c8     79 00 00 FF 
0f7cc     D0 E5 05 F1 | 	add	objptr, ##62416
0f7d0     F2 1C 02 FB | 	rdlong	arg06, objptr
0f7d4     79 00 00 FF 
0f7d8     D0 E5 85 F1 | 	sub	objptr, ##62416
0f7dc     01 1C 0E F2 | 	cmp	arg06, #1 wz
0f7e0     3C 00 90 5D |  if_ne	jmp	#LR__1220
0f7e4     7B 00 00 FF 
0f7e8     74 E4 05 F1 | 	add	objptr, ##63092
0f7ec     F2 14 02 FB | 	rdlong	arg02, objptr
0f7f0     04 E4 85 F1 | 	sub	objptr, #4
0f7f4     F2 1A 02 FB | 	rdlong	arg05, objptr
0f7f8     07 12 06 F6 | 	mov	arg01, #7
0f7fc     56 00 00 FF 
0f800     44 16 06 F6 | 	mov	arg03, ##44100
0f804     0C 18 C6 F9 | 	decod	arg04, #12
0f808     01 1C 66 F6 | 	neg	arg06, #1
0f80c     6F 00 00 FF 
0f810     A4 E5 85 F1 | 	sub	objptr, ##57252
0f814     B0 E8 B0 FD | 	call	#_audio096_spin2_play
0f818     0B 00 00 FF 
0f81c     CC E4 85 F1 | 	sub	objptr, ##5836
0f820                 | LR__1220
0f820                 | LR__1221
0f820                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0f820     65 00 00 FF 
0f824     64 E4 05 F1 | 	add	objptr, ##51812
0f828     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0f82c     65 00 00 FF 
0f830     64 E4 85 F1 | 	sub	objptr, ##51812
0f834     D4 01 90 AD |  if_e	jmp	#LR__1230
0f838     65 00 00 FF 
0f83c     64 E4 05 F1 | 	add	objptr, ##51812
0f840     F2 1C 02 FB | 	rdlong	arg06, objptr
0f844     65 00 00 FF 
0f848     64 E4 85 F1 | 	sub	objptr, ##51812
0f84c     00 00 40 FF 
0f850     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f854     65 00 00 CF 
0f858     64 E4 05 C1 |  if_b	add	objptr, ##51812
0f85c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f860     65 00 00 CF 
0f864     64 E4 85 C1 |  if_b	sub	objptr, ##51812
0f868     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f86c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f870     98 01 90 3D |  if_ae	jmp	#LR__1230
0f874                 | '   if leds and 2 = 2 then 
0f874     7B 00 00 FF 
0f878     9C E4 05 F1 | 	add	objptr, ##63132
0f87c     F2 1E 0A FB | 	rdlong	local01, objptr wz
0f880     7B 00 00 FF 
0f884     9C E4 85 F1 | 	sub	objptr, ##63132
0f888     58 01 90 AD |  if_e	jmp	#LR__1229
0f88c                 | '     if key>96 andalso key<123 then
0f88c     65 00 00 FF 
0f890     64 E4 05 F1 | 	add	objptr, ##51812
0f894     F2 1E 02 FB | 	rdlong	local01, objptr
0f898     65 00 00 FF 
0f89c     64 E4 85 F1 | 	sub	objptr, ##51812
0f8a0     61 1E 16 F2 | 	cmp	local01, #97 wc
0f8a4     3C 00 90 CD |  if_b	jmp	#LR__1222
0f8a8     65 00 00 FF 
0f8ac     64 E4 05 F1 | 	add	objptr, ##51812
0f8b0     F2 1E 02 FB | 	rdlong	local01, objptr
0f8b4     65 00 00 FF 
0f8b8     64 E4 85 F1 | 	sub	objptr, ##51812
0f8bc     7B 1E 16 F2 | 	cmp	local01, #123 wc
0f8c0     20 00 90 3D |  if_ae	jmp	#LR__1222
0f8c4     65 00 00 FF 
0f8c8     64 E4 05 F1 | 	add	objptr, ##51812
0f8cc     F2 1E 02 FB | 	rdlong	local01, objptr
0f8d0     20 1E 86 F1 | 	sub	local01, #32
0f8d4     F2 1E 62 FC | 	wrlong	local01, objptr
0f8d8     65 00 00 FF 
0f8dc     64 E4 85 F1 | 	sub	objptr, ##51812
0f8e0     00 01 90 FD | 	jmp	#LR__1228
0f8e4                 | LR__1222
0f8e4     65 00 00 FF 
0f8e8     64 E4 05 F1 | 	add	objptr, ##51812
0f8ec     F2 1E 02 FB | 	rdlong	local01, objptr
0f8f0     65 00 00 FF 
0f8f4     64 E4 85 F1 | 	sub	objptr, ##51812
0f8f8     41 1E 16 F2 | 	cmp	local01, #65 wc
0f8fc     3C 00 90 CD |  if_b	jmp	#LR__1223
0f900     65 00 00 FF 
0f904     64 E4 05 F1 | 	add	objptr, ##51812
0f908     F2 1E 02 FB | 	rdlong	local01, objptr
0f90c     65 00 00 FF 
0f910     64 E4 85 F1 | 	sub	objptr, ##51812
0f914     5B 1E 16 F2 | 	cmp	local01, #91 wc
0f918     20 00 90 3D |  if_ae	jmp	#LR__1223
0f91c     65 00 00 FF 
0f920     64 E4 05 F1 | 	add	objptr, ##51812
0f924     F2 1E 02 FB | 	rdlong	local01, objptr
0f928     20 1E 06 F1 | 	add	local01, #32
0f92c     F2 1E 62 FC | 	wrlong	local01, objptr
0f930     65 00 00 FF 
0f934     64 E4 85 F1 | 	sub	objptr, ##51812
0f938     A8 00 90 FD | 	jmp	#LR__1227
0f93c                 | LR__1223
0f93c     65 00 00 FF 
0f940     64 E4 05 F1 | 	add	objptr, ##51812
0f944     F2 1E 02 FB | 	rdlong	local01, objptr
0f948     65 00 00 FF 
0f94c     64 E4 85 F1 | 	sub	objptr, ##51812
0f950     17 1E 16 F2 | 	cmp	local01, #23 wc
0f954     3C 00 90 CD |  if_b	jmp	#LR__1224
0f958     65 00 00 FF 
0f95c     64 E4 05 F1 | 	add	objptr, ##51812
0f960     F2 1E 02 FB | 	rdlong	local01, objptr
0f964     65 00 00 FF 
0f968     64 E4 85 F1 | 	sub	objptr, ##51812
0f96c     20 1E 16 F2 | 	cmp	local01, #32 wc
0f970     20 00 90 3D |  if_ae	jmp	#LR__1224
0f974     65 00 00 FF 
0f978     64 E4 05 F1 | 	add	objptr, ##51812
0f97c     F2 1E 02 FB | 	rdlong	local01, objptr
0f980     09 1E 86 F1 | 	sub	local01, #9
0f984     F2 1E 62 FC | 	wrlong	local01, objptr
0f988     65 00 00 FF 
0f98c     64 E4 85 F1 | 	sub	objptr, ##51812
0f990     50 00 90 FD | 	jmp	#LR__1226
0f994                 | LR__1224
0f994     65 00 00 FF 
0f998     64 E4 05 F1 | 	add	objptr, ##51812
0f99c     F2 20 02 FB | 	rdlong	local02, objptr
0f9a0     65 00 00 FF 
0f9a4     64 E4 85 F1 | 	sub	objptr, ##51812
0f9a8     0E 20 16 F2 | 	cmp	local02, #14 wc
0f9ac     34 00 90 CD |  if_b	jmp	#LR__1225
0f9b0     65 00 00 FF 
0f9b4     64 E4 05 F1 | 	add	objptr, ##51812
0f9b8     F2 1E 02 FB | 	rdlong	local01, objptr
0f9bc     65 00 00 FF 
0f9c0     64 E4 85 F1 | 	sub	objptr, ##51812
0f9c4     17 1E 16 F2 | 	cmp	local01, #23 wc
0f9c8     7B 00 00 CF 
0f9cc     AC E4 05 C1 |  if_b	add	objptr, ##63148
0f9d0     F2 20 02 CB |  if_b	rdlong	local02, objptr
0f9d4     27 20 06 C1 |  if_b	add	local02, #39
0f9d8     F2 20 62 CC |  if_b	wrlong	local02, objptr
0f9dc     7B 00 00 CF 
0f9e0     AC E4 85 C1 |  if_b	sub	objptr, ##63148
0f9e4                 | LR__1225
0f9e4                 | LR__1226
0f9e4                 | LR__1227
0f9e4                 | LR__1228
0f9e4                 | LR__1229
0f9e4     65 00 00 FF 
0f9e8     64 E4 05 F1 | 	add	objptr, ##51812
0f9ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f9f0     65 00 00 FF 
0f9f4     64 E4 85 F1 | 	sub	objptr, ##51812
0f9f8     20 AA B0 FD | 	call	#_scantochar
0f9fc     FD 12 02 F6 | 	mov	arg01, result1
0fa00     3C 0D B1 FD | 	call	#__system__Chr_S
0fa04     A7 FA 61 FC | 	wrlong	result1, fp
0fa08     0C 00 90 FD | 	jmp	#LR__1231
0fa0c                 | LR__1230
0fa0c     70 01 00 FF 
0fa10     92 21 06 F6 | 	mov	local02, ##@LR__5106
0fa14     A7 20 62 FC | 	wrlong	local02, fp
0fa18                 | LR__1231
0fa18     08 4E 05 F1 | 	add	fp, #8
0fa1c     A7 3E 68 FC | 	wrlong	#31, fp
0fa20     08 4E 85 F1 | 	sub	fp, #8
0fa24     A7 12 02 F6 | 	mov	arg01, fp
0fa28     10 AB BF FD | 	call	#_push
0fa2c     A7 F0 03 F6 | 	mov	ptra, fp
0fa30     B2 00 A0 FD | 	call	#popregs_
0fa34                 | _do_inkey_ret
0fa34     2D 00 64 FD | 	ret
0fa38                 | 
0fa38                 | '  
0fa38                 | ' '------------------------ Operators 
0fa38                 | ' 
0fa38                 | ' sub do_plus 
0fa38                 | _do_plus
0fa38     05 4A 05 F6 | 	mov	COUNT_, #5
0fa3c     A8 00 A0 FD | 	call	#pushregs_
0fa40     18 F0 07 F1 | 	add	ptra, #24
0fa44     5C AA BF FD | 	call	#_pop
0fa48     FD 1E 02 F6 | 	mov	local01, result1
0fa4c     FE 20 02 F6 | 	mov	local02, result2
0fa50     FF 22 02 F6 | 	mov	local03, result3
0fa54     0C 4E 05 F1 | 	add	fp, #12
0fa58     A7 1E 62 FC | 	wrlong	local01, fp
0fa5c     04 4E 05 F1 | 	add	fp, #4
0fa60     A7 20 62 FC | 	wrlong	local02, fp
0fa64     04 4E 05 F1 | 	add	fp, #4
0fa68     A7 22 62 FC | 	wrlong	local03, fp
0fa6c     14 4E 85 F1 | 	sub	fp, #20
0fa70     30 AA BF FD | 	call	#_pop
0fa74     FF 22 02 F6 | 	mov	local03, result3
0fa78     A7 FA 61 FC | 	wrlong	result1, fp
0fa7c     04 4E 05 F1 | 	add	fp, #4
0fa80     A7 FC 61 FC | 	wrlong	result2, fp
0fa84     04 4E 05 F1 | 	add	fp, #4
0fa88     A7 22 62 FC | 	wrlong	local03, fp
0fa8c                 | ' 
0fa8c                 | ' t2=pop()
0fa8c                 | ' t1=pop()
0fa8c                 | ' 
0fa8c                 | ' 
0fa8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0fa8c     08 4E 85 F1 | 	sub	fp, #8
0fa90     1D 22 0E F2 | 	cmp	local03, #29 wz
0fa94     14 4E 05 A1 |  if_e	add	fp, #20
0fa98     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa9c     14 4E 85 A1 |  if_e	sub	fp, #20
0faa0     12 23 02 A6 |  if_e	mov	local03, local04
0faa4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0faa8     1C 00 90 5D |  if_ne	jmp	#LR__1240
0faac     A7 1E 02 FB | 	rdlong	local01, fp
0fab0     0C 4E 05 F1 | 	add	fp, #12
0fab4     A7 20 02 FB | 	rdlong	local02, fp
0fab8     0C 4E 85 F1 | 	sub	fp, #12
0fabc     10 1F 02 F1 | 	add	local01, local02
0fac0     A7 1E 62 FC | 	wrlong	local01, fp
0fac4     48 04 90 FD | 	jmp	#LR__1255
0fac8                 | LR__1240
0fac8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0fac8     08 4E 05 F1 | 	add	fp, #8
0facc     A7 1E 02 FB | 	rdlong	local01, fp
0fad0     08 4E 85 F1 | 	sub	fp, #8
0fad4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fad8     14 4E 05 A1 |  if_e	add	fp, #20
0fadc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fae0     14 4E 85 A1 |  if_e	sub	fp, #20
0fae4     12 23 02 A6 |  if_e	mov	local03, local04
0fae8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0faec     28 00 90 5D |  if_ne	jmp	#LR__1241
0faf0     A7 1E 02 FB | 	rdlong	local01, fp
0faf4     0C 4E 05 F1 | 	add	fp, #12
0faf8     A7 20 02 FB | 	rdlong	local02, fp
0fafc     0C 4E 85 F1 | 	sub	fp, #12
0fb00     10 1F 02 F1 | 	add	local01, local02
0fb04     A7 1E 62 FC | 	wrlong	local01, fp
0fb08     08 4E 05 F1 | 	add	fp, #8
0fb0c     A7 38 68 FC | 	wrlong	#28, fp
0fb10     08 4E 85 F1 | 	sub	fp, #8
0fb14     F8 03 90 FD | 	jmp	#LR__1255
0fb18                 | LR__1241
0fb18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0fb18     08 4E 05 F1 | 	add	fp, #8
0fb1c     A7 1E 02 FB | 	rdlong	local01, fp
0fb20     08 4E 85 F1 | 	sub	fp, #8
0fb24     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fb28     14 4E 05 A1 |  if_e	add	fp, #20
0fb2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb30     14 4E 85 A1 |  if_e	sub	fp, #20
0fb34     12 23 02 A6 |  if_e	mov	local03, local04
0fb38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb3c     30 00 90 5D |  if_ne	jmp	#LR__1242
0fb40     A7 12 02 FB | 	rdlong	arg01, fp
0fb44     68 11 B1 FD | 	call	#__system___float_fromuns
0fb48     FD 12 02 F6 | 	mov	arg01, result1
0fb4c     0C 4E 05 F1 | 	add	fp, #12
0fb50     A7 14 02 FB | 	rdlong	arg02, fp
0fb54     0C 4E 85 F1 | 	sub	fp, #12
0fb58     88 11 B1 FD | 	call	#__system___float_add
0fb5c     A7 FA 61 FC | 	wrlong	result1, fp
0fb60     08 4E 05 F1 | 	add	fp, #8
0fb64     A7 3C 68 FC | 	wrlong	#30, fp
0fb68     08 4E 85 F1 | 	sub	fp, #8
0fb6c     A0 03 90 FD | 	jmp	#LR__1255
0fb70                 | LR__1242
0fb70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0fb70     08 4E 05 F1 | 	add	fp, #8
0fb74     A7 1E 02 FB | 	rdlong	local01, fp
0fb78     08 4E 85 F1 | 	sub	fp, #8
0fb7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb80     14 4E 05 A1 |  if_e	add	fp, #20
0fb84     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb88     14 4E 85 A1 |  if_e	sub	fp, #20
0fb8c     12 23 02 A6 |  if_e	mov	local03, local04
0fb90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb94     1C 00 90 5D |  if_ne	jmp	#LR__1243
0fb98     A7 1E 02 FB | 	rdlong	local01, fp
0fb9c     0C 4E 05 F1 | 	add	fp, #12
0fba0     A7 20 02 FB | 	rdlong	local02, fp
0fba4     0C 4E 85 F1 | 	sub	fp, #12
0fba8     10 1F 02 F1 | 	add	local01, local02
0fbac     A7 1E 62 FC | 	wrlong	local01, fp
0fbb0     5C 03 90 FD | 	jmp	#LR__1255
0fbb4                 | LR__1243
0fbb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0fbb4     08 4E 05 F1 | 	add	fp, #8
0fbb8     A7 1E 02 FB | 	rdlong	local01, fp
0fbbc     08 4E 85 F1 | 	sub	fp, #8
0fbc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbc4     14 4E 05 A1 |  if_e	add	fp, #20
0fbc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbcc     14 4E 85 A1 |  if_e	sub	fp, #20
0fbd0     12 23 02 A6 |  if_e	mov	local03, local04
0fbd4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fbd8     1C 00 90 5D |  if_ne	jmp	#LR__1244
0fbdc     A7 1E 02 FB | 	rdlong	local01, fp
0fbe0     0C 4E 05 F1 | 	add	fp, #12
0fbe4     A7 20 02 FB | 	rdlong	local02, fp
0fbe8     0C 4E 85 F1 | 	sub	fp, #12
0fbec     10 1F 02 F1 | 	add	local01, local02
0fbf0     A7 1E 62 FC | 	wrlong	local01, fp
0fbf4     18 03 90 FD | 	jmp	#LR__1255
0fbf8                 | LR__1244
0fbf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0fbf8     08 4E 05 F1 | 	add	fp, #8
0fbfc     A7 1E 02 FB | 	rdlong	local01, fp
0fc00     08 4E 85 F1 | 	sub	fp, #8
0fc04     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc08     14 4E 05 A1 |  if_e	add	fp, #20
0fc0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc10     14 4E 85 A1 |  if_e	sub	fp, #20
0fc14     12 23 02 A6 |  if_e	mov	local03, local04
0fc18     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fc1c     40 00 90 5D |  if_ne	jmp	#LR__1245
0fc20     A7 12 02 FB | 	rdlong	arg01, fp
0fc24     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc28     1F 26 C6 C9 |  if_b	decod	local05, #31
0fc2c     00 26 06 36 |  if_ae	mov	local05, #0
0fc30     7C 10 B1 FD | 	call	#__system___float_fromuns
0fc34     13 FB 61 F5 | 	xor	result1, local05
0fc38     FD 12 02 F6 | 	mov	arg01, result1
0fc3c     0C 4E 05 F1 | 	add	fp, #12
0fc40     A7 14 02 FB | 	rdlong	arg02, fp
0fc44     0C 4E 85 F1 | 	sub	fp, #12
0fc48     98 10 B1 FD | 	call	#__system___float_add
0fc4c     A7 FA 61 FC | 	wrlong	result1, fp
0fc50     08 4E 05 F1 | 	add	fp, #8
0fc54     A7 3C 68 FC | 	wrlong	#30, fp
0fc58     08 4E 85 F1 | 	sub	fp, #8
0fc5c     B0 02 90 FD | 	jmp	#LR__1255
0fc60                 | LR__1245
0fc60                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0fc60     08 4E 05 F1 | 	add	fp, #8
0fc64     A7 1E 02 FB | 	rdlong	local01, fp
0fc68     08 4E 85 F1 | 	sub	fp, #8
0fc6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fc70     14 4E 05 A1 |  if_e	add	fp, #20
0fc74     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc78     14 4E 85 A1 |  if_e	sub	fp, #20
0fc7c     12 23 02 A6 |  if_e	mov	local03, local04
0fc80     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fc84     28 00 90 5D |  if_ne	jmp	#LR__1246
0fc88     A7 1E 02 FB | 	rdlong	local01, fp
0fc8c     0C 4E 05 F1 | 	add	fp, #12
0fc90     A7 12 02 FB | 	rdlong	arg01, fp
0fc94     0C 4E 85 F1 | 	sub	fp, #12
0fc98     14 10 B1 FD | 	call	#__system___float_fromuns
0fc9c     FD 14 02 F6 | 	mov	arg02, result1
0fca0     0F 13 02 F6 | 	mov	arg01, local01
0fca4     3C 10 B1 FD | 	call	#__system___float_add
0fca8     A7 FA 61 FC | 	wrlong	result1, fp
0fcac     60 02 90 FD | 	jmp	#LR__1255
0fcb0                 | LR__1246
0fcb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0fcb0     08 4E 05 F1 | 	add	fp, #8
0fcb4     A7 1E 02 FB | 	rdlong	local01, fp
0fcb8     08 4E 85 F1 | 	sub	fp, #8
0fcbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fcc0     14 4E 05 A1 |  if_e	add	fp, #20
0fcc4     A7 24 02 AB |  if_e	rdlong	local04, fp
0fcc8     14 4E 85 A1 |  if_e	sub	fp, #20
0fccc     12 23 02 A6 |  if_e	mov	local03, local04
0fcd0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fcd4     38 00 90 5D |  if_ne	jmp	#LR__1247
0fcd8     A7 1E 02 FB | 	rdlong	local01, fp
0fcdc     0C 4E 05 F1 | 	add	fp, #12
0fce0     A7 12 02 FB | 	rdlong	arg01, fp
0fce4     0C 4E 85 F1 | 	sub	fp, #12
0fce8     09 13 52 F6 | 	abs	arg01, arg01 wc
0fcec     1F 26 C6 C9 |  if_b	decod	local05, #31
0fcf0     00 26 06 36 |  if_ae	mov	local05, #0
0fcf4     B8 0F B1 FD | 	call	#__system___float_fromuns
0fcf8     13 FB 61 F5 | 	xor	result1, local05
0fcfc     FD 14 02 F6 | 	mov	arg02, result1
0fd00     0F 13 02 F6 | 	mov	arg01, local01
0fd04     DC 0F B1 FD | 	call	#__system___float_add
0fd08     A7 FA 61 FC | 	wrlong	result1, fp
0fd0c     00 02 90 FD | 	jmp	#LR__1255
0fd10                 | LR__1247
0fd10                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0fd10     08 4E 05 F1 | 	add	fp, #8
0fd14     A7 1E 02 FB | 	rdlong	local01, fp
0fd18     08 4E 85 F1 | 	sub	fp, #8
0fd1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fd20     14 4E 05 A1 |  if_e	add	fp, #20
0fd24     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd28     14 4E 85 A1 |  if_e	sub	fp, #20
0fd2c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0fd30     1C 00 90 5D |  if_ne	jmp	#LR__1248
0fd34     A7 12 02 FB | 	rdlong	arg01, fp
0fd38     0C 4E 05 F1 | 	add	fp, #12
0fd3c     A7 14 02 FB | 	rdlong	arg02, fp
0fd40     0C 4E 85 F1 | 	sub	fp, #12
0fd44     9C 0F B1 FD | 	call	#__system___float_add
0fd48     A7 FA 61 FC | 	wrlong	result1, fp
0fd4c     C0 01 90 FD | 	jmp	#LR__1255
0fd50                 | LR__1248
0fd50                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0fd50     08 4E 05 F1 | 	add	fp, #8
0fd54     A7 1E 02 FB | 	rdlong	local01, fp
0fd58     08 4E 85 F1 | 	sub	fp, #8
0fd5c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fd60     24 00 90 5D |  if_ne	jmp	#LR__1249
0fd64     14 4E 05 F1 | 	add	fp, #20
0fd68     A7 22 02 FB | 	rdlong	local03, fp
0fd6c     14 4E 85 F1 | 	sub	fp, #20
0fd70     1F 22 0E F2 | 	cmp	local03, #31 wz
0fd74     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fd78     08 4E 05 51 |  if_ne	add	fp, #8
0fd7c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fd80     08 4E 85 51 |  if_ne	sub	fp, #8
0fd84     88 01 90 5D |  if_ne	jmp	#LR__1255
0fd88                 | LR__1249
0fd88                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0fd88     14 4E 05 F1 | 	add	fp, #20
0fd8c     A7 1E 02 FB | 	rdlong	local01, fp
0fd90     14 4E 85 F1 | 	sub	fp, #20
0fd94     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fd98     24 00 90 5D |  if_ne	jmp	#LR__1250
0fd9c     08 4E 05 F1 | 	add	fp, #8
0fda0     A7 22 02 FB | 	rdlong	local03, fp
0fda4     08 4E 85 F1 | 	sub	fp, #8
0fda8     1F 22 0E F2 | 	cmp	local03, #31 wz
0fdac     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fdb0     08 4E 05 51 |  if_ne	add	fp, #8
0fdb4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fdb8     08 4E 85 51 |  if_ne	sub	fp, #8
0fdbc     50 01 90 5D |  if_ne	jmp	#LR__1255
0fdc0                 | LR__1250
0fdc0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0fdc0     08 4E 05 F1 | 	add	fp, #8
0fdc4     A7 1E 02 FB | 	rdlong	local01, fp
0fdc8     08 4E 85 F1 | 	sub	fp, #8
0fdcc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fdd0     14 4E 05 A1 |  if_e	add	fp, #20
0fdd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdd8     14 4E 85 A1 |  if_e	sub	fp, #20
0fddc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fde0     1C 00 90 5D |  if_ne	jmp	#LR__1251
0fde4     A7 12 02 FB | 	rdlong	arg01, fp
0fde8     0C 4E 05 F1 | 	add	fp, #12
0fdec     A7 14 02 FB | 	rdlong	arg02, fp
0fdf0     0C 4E 85 F1 | 	sub	fp, #12
0fdf4     9C E7 B0 FD | 	call	#__system___string_concat
0fdf8     A7 FA 61 FC | 	wrlong	result1, fp
0fdfc     10 01 90 FD | 	jmp	#LR__1255
0fe00                 | LR__1251
0fe00                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0fe00     08 4E 05 F1 | 	add	fp, #8
0fe04     A7 1E 02 FB | 	rdlong	local01, fp
0fe08     08 4E 85 F1 | 	sub	fp, #8
0fe0c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fe10     14 4E 05 A1 |  if_e	add	fp, #20
0fe14     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe18     14 4E 85 A1 |  if_e	sub	fp, #20
0fe1c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fe20     30 00 90 5D |  if_ne	jmp	#LR__1252
0fe24     A7 12 02 FB | 	rdlong	arg01, fp
0fe28     20 E9 BF FD | 	call	#_convertstring
0fe2c     FD 12 02 F6 | 	mov	arg01, result1
0fe30     0C 4E 05 F1 | 	add	fp, #12
0fe34     A7 14 02 FB | 	rdlong	arg02, fp
0fe38     0C 4E 85 F1 | 	sub	fp, #12
0fe3c     54 E7 B0 FD | 	call	#__system___string_concat
0fe40     A7 FA 61 FC | 	wrlong	result1, fp
0fe44     08 4E 05 F1 | 	add	fp, #8
0fe48     A7 3E 68 FC | 	wrlong	#31, fp
0fe4c     08 4E 85 F1 | 	sub	fp, #8
0fe50     BC 00 90 FD | 	jmp	#LR__1255
0fe54                 | LR__1252
0fe54                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0fe54     08 4E 05 F1 | 	add	fp, #8
0fe58     A7 1E 02 FB | 	rdlong	local01, fp
0fe5c     08 4E 85 F1 | 	sub	fp, #8
0fe60     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fe64     14 4E 05 A1 |  if_e	add	fp, #20
0fe68     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe6c     14 4E 85 A1 |  if_e	sub	fp, #20
0fe70     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fe74     28 00 90 5D |  if_ne	jmp	#LR__1253
0fe78     A7 1E 02 FB | 	rdlong	local01, fp
0fe7c     0C 4E 05 F1 | 	add	fp, #12
0fe80     A7 12 02 FB | 	rdlong	arg01, fp
0fe84     0C 4E 85 F1 | 	sub	fp, #12
0fe88     C0 E8 BF FD | 	call	#_convertstring
0fe8c     FD 14 02 F6 | 	mov	arg02, result1
0fe90     0F 13 02 F6 | 	mov	arg01, local01
0fe94     FC E6 B0 FD | 	call	#__system___string_concat
0fe98     A7 FA 61 FC | 	wrlong	result1, fp
0fe9c     70 00 90 FD | 	jmp	#LR__1255
0fea0                 | LR__1253
0fea0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0fea0     08 4E 05 F1 | 	add	fp, #8
0fea4     A7 1E 02 FB | 	rdlong	local01, fp
0fea8     08 4E 85 F1 | 	sub	fp, #8
0feac     2B 1E 0E F2 | 	cmp	local01, #43 wz
0feb0     14 4E 05 A1 |  if_e	add	fp, #20
0feb4     A7 22 02 AB |  if_e	rdlong	local03, fp
0feb8     14 4E 85 A1 |  if_e	sub	fp, #20
0febc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fec0     3C 00 90 5D |  if_ne	jmp	#LR__1254
0fec4     A7 12 02 FB | 	rdlong	arg01, fp
0fec8     80 E8 BF FD | 	call	#_convertstring
0fecc     FD 1E 02 F6 | 	mov	local01, result1
0fed0     0C 4E 05 F1 | 	add	fp, #12
0fed4     A7 12 02 FB | 	rdlong	arg01, fp
0fed8     0C 4E 85 F1 | 	sub	fp, #12
0fedc     6C E8 BF FD | 	call	#_convertstring
0fee0     FD 14 02 F6 | 	mov	arg02, result1
0fee4     0F 13 02 F6 | 	mov	arg01, local01
0fee8     A8 E6 B0 FD | 	call	#__system___string_concat
0feec     A7 FA 61 FC | 	wrlong	result1, fp
0fef0     08 4E 05 F1 | 	add	fp, #8
0fef4     A7 3E 68 FC | 	wrlong	#31, fp
0fef8     08 4E 85 F1 | 	sub	fp, #8
0fefc     10 00 90 FD | 	jmp	#LR__1255
0ff00                 | LR__1254
0ff00     A7 08 68 FC | 	wrlong	#4, fp
0ff04     08 4E 05 F1 | 	add	fp, #8
0ff08     A7 FE 69 FC | 	wrlong	#255, fp
0ff0c     08 4E 85 F1 | 	sub	fp, #8
0ff10                 | LR__1255
0ff10     A7 12 02 F6 | 	mov	arg01, fp
0ff14     24 A6 BF FD | 	call	#_push
0ff18     A7 F0 03 F6 | 	mov	ptra, fp
0ff1c     B2 00 A0 FD | 	call	#popregs_
0ff20                 | _do_plus_ret
0ff20     2D 00 64 FD | 	ret
0ff24                 | 
0ff24                 | ' 
0ff24                 | ' sub do_minus
0ff24                 | _do_minus
0ff24     05 4A 05 F6 | 	mov	COUNT_, #5
0ff28     A8 00 A0 FD | 	call	#pushregs_
0ff2c     18 F0 07 F1 | 	add	ptra, #24
0ff30     70 A5 BF FD | 	call	#_pop
0ff34     FD 1E 02 F6 | 	mov	local01, result1
0ff38     FE 20 02 F6 | 	mov	local02, result2
0ff3c     FF 22 02 F6 | 	mov	local03, result3
0ff40     0C 4E 05 F1 | 	add	fp, #12
0ff44     A7 1E 62 FC | 	wrlong	local01, fp
0ff48     04 4E 05 F1 | 	add	fp, #4
0ff4c     A7 20 62 FC | 	wrlong	local02, fp
0ff50     04 4E 05 F1 | 	add	fp, #4
0ff54     A7 22 62 FC | 	wrlong	local03, fp
0ff58     14 4E 85 F1 | 	sub	fp, #20
0ff5c     44 A5 BF FD | 	call	#_pop
0ff60     FF 22 02 F6 | 	mov	local03, result3
0ff64     A7 FA 61 FC | 	wrlong	result1, fp
0ff68     04 4E 05 F1 | 	add	fp, #4
0ff6c     A7 FC 61 FC | 	wrlong	result2, fp
0ff70     04 4E 05 F1 | 	add	fp, #4
0ff74     A7 22 62 FC | 	wrlong	local03, fp
0ff78                 | ' 
0ff78                 | ' t2=pop()
0ff78                 | ' t1=pop()
0ff78                 | ' 
0ff78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0ff78     08 4E 85 F1 | 	sub	fp, #8
0ff7c     1D 22 0E F2 | 	cmp	local03, #29 wz
0ff80     14 4E 05 A1 |  if_e	add	fp, #20
0ff84     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff88     14 4E 85 A1 |  if_e	sub	fp, #20
0ff8c     12 23 02 A6 |  if_e	mov	local03, local04
0ff90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ff94     5C 00 90 5D |  if_ne	jmp	#LR__1261
0ff98                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0ff98     0C 4E 05 F1 | 	add	fp, #12
0ff9c     A7 1E 02 FB | 	rdlong	local01, fp
0ffa0     0C 4E 85 F1 | 	sub	fp, #12
0ffa4     A7 22 02 FB | 	rdlong	local03, fp
0ffa8     11 1F 12 F2 | 	cmp	local01, local03 wc
0ffac     1C 00 90 3D |  if_ae	jmp	#LR__1260
0ffb0     A7 1E 02 FB | 	rdlong	local01, fp
0ffb4     0C 4E 05 F1 | 	add	fp, #12
0ffb8     A7 20 02 FB | 	rdlong	local02, fp
0ffbc     0C 4E 85 F1 | 	sub	fp, #12
0ffc0     10 1F 82 F1 | 	sub	local01, local02
0ffc4     A7 1E 62 FC | 	wrlong	local01, fp
0ffc8     F4 02 90 FD | 	jmp	#LR__1270
0ffcc                 | LR__1260
0ffcc     A7 1E 02 FB | 	rdlong	local01, fp
0ffd0     0C 4E 05 F1 | 	add	fp, #12
0ffd4     A7 20 02 FB | 	rdlong	local02, fp
0ffd8     0C 4E 85 F1 | 	sub	fp, #12
0ffdc     10 1F 82 F1 | 	sub	local01, local02
0ffe0     A7 1E 62 FC | 	wrlong	local01, fp
0ffe4     08 4E 05 F1 | 	add	fp, #8
0ffe8     A7 38 68 FC | 	wrlong	#28, fp
0ffec     08 4E 85 F1 | 	sub	fp, #8
0fff0     CC 02 90 FD | 	jmp	#LR__1270
0fff4                 | LR__1261
0fff4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0fff4     08 4E 05 F1 | 	add	fp, #8
0fff8     A7 1E 02 FB | 	rdlong	local01, fp
0fffc     08 4E 85 F1 | 	sub	fp, #8
10000     1D 1E 0E F2 | 	cmp	local01, #29 wz
10004     14 4E 05 A1 |  if_e	add	fp, #20
10008     A7 24 02 AB |  if_e	rdlong	local04, fp
1000c     14 4E 85 A1 |  if_e	sub	fp, #20
10010     12 23 02 A6 |  if_e	mov	local03, local04
10014     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10018     28 00 90 5D |  if_ne	jmp	#LR__1262
1001c     A7 1E 02 FB | 	rdlong	local01, fp
10020     0C 4E 05 F1 | 	add	fp, #12
10024     A7 20 02 FB | 	rdlong	local02, fp
10028     0C 4E 85 F1 | 	sub	fp, #12
1002c     10 1F 82 F1 | 	sub	local01, local02
10030     A7 1E 62 FC | 	wrlong	local01, fp
10034     08 4E 05 F1 | 	add	fp, #8
10038     A7 38 68 FC | 	wrlong	#28, fp
1003c     08 4E 85 F1 | 	sub	fp, #8
10040     7C 02 90 FD | 	jmp	#LR__1270
10044                 | LR__1262
10044                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
10044     08 4E 05 F1 | 	add	fp, #8
10048     A7 1E 02 FB | 	rdlong	local01, fp
1004c     08 4E 85 F1 | 	sub	fp, #8
10050     1D 1E 0E F2 | 	cmp	local01, #29 wz
10054     14 4E 05 A1 |  if_e	add	fp, #20
10058     A7 24 02 AB |  if_e	rdlong	local04, fp
1005c     14 4E 85 A1 |  if_e	sub	fp, #20
10060     12 23 02 A6 |  if_e	mov	local03, local04
10064     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10068     34 00 90 5D |  if_ne	jmp	#LR__1263
1006c     A7 12 02 FB | 	rdlong	arg01, fp
10070     3C 0C B1 FD | 	call	#__system___float_fromuns
10074     FD 12 02 F6 | 	mov	arg01, result1
10078     0C 4E 05 F1 | 	add	fp, #12
1007c     A7 14 02 FB | 	rdlong	arg02, fp
10080     0C 4E 85 F1 | 	sub	fp, #12
10084     1F 14 E6 F4 | 	bitnot	arg02, #31
10088     58 0C B1 FD | 	call	#__system___float_add
1008c     A7 FA 61 FC | 	wrlong	result1, fp
10090     08 4E 05 F1 | 	add	fp, #8
10094     A7 3C 68 FC | 	wrlong	#30, fp
10098     08 4E 85 F1 | 	sub	fp, #8
1009c     20 02 90 FD | 	jmp	#LR__1270
100a0                 | LR__1263
100a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
100a0     08 4E 05 F1 | 	add	fp, #8
100a4     A7 1E 02 FB | 	rdlong	local01, fp
100a8     08 4E 85 F1 | 	sub	fp, #8
100ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
100b0     14 4E 05 A1 |  if_e	add	fp, #20
100b4     A7 24 02 AB |  if_e	rdlong	local04, fp
100b8     14 4E 85 A1 |  if_e	sub	fp, #20
100bc     12 23 02 A6 |  if_e	mov	local03, local04
100c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
100c4     1C 00 90 5D |  if_ne	jmp	#LR__1264
100c8     A7 1E 02 FB | 	rdlong	local01, fp
100cc     0C 4E 05 F1 | 	add	fp, #12
100d0     A7 20 02 FB | 	rdlong	local02, fp
100d4     0C 4E 85 F1 | 	sub	fp, #12
100d8     10 1F 82 F1 | 	sub	local01, local02
100dc     A7 1E 62 FC | 	wrlong	local01, fp
100e0     DC 01 90 FD | 	jmp	#LR__1270
100e4                 | LR__1264
100e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
100e4     08 4E 05 F1 | 	add	fp, #8
100e8     A7 1E 02 FB | 	rdlong	local01, fp
100ec     08 4E 85 F1 | 	sub	fp, #8
100f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
100f4     14 4E 05 A1 |  if_e	add	fp, #20
100f8     A7 24 02 AB |  if_e	rdlong	local04, fp
100fc     14 4E 85 A1 |  if_e	sub	fp, #20
10100     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10104     1C 00 90 5D |  if_ne	jmp	#LR__1265
10108     A7 1E 02 FB | 	rdlong	local01, fp
1010c     0C 4E 05 F1 | 	add	fp, #12
10110     A7 20 02 FB | 	rdlong	local02, fp
10114     0C 4E 85 F1 | 	sub	fp, #12
10118     10 1F 82 F1 | 	sub	local01, local02
1011c     A7 1E 62 FC | 	wrlong	local01, fp
10120     9C 01 90 FD | 	jmp	#LR__1270
10124                 | LR__1265
10124                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
10124     08 4E 05 F1 | 	add	fp, #8
10128     A7 1E 02 FB | 	rdlong	local01, fp
1012c     08 4E 85 F1 | 	sub	fp, #8
10130     1C 1E 0E F2 | 	cmp	local01, #28 wz
10134     14 4E 05 A1 |  if_e	add	fp, #20
10138     A7 22 02 AB |  if_e	rdlong	local03, fp
1013c     14 4E 85 A1 |  if_e	sub	fp, #20
10140     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10144     44 00 90 5D |  if_ne	jmp	#LR__1266
10148     A7 12 02 FB | 	rdlong	arg01, fp
1014c     09 13 52 F6 | 	abs	arg01, arg01 wc
10150     1F 26 C6 C9 |  if_b	decod	local05, #31
10154     00 26 06 36 |  if_ae	mov	local05, #0
10158     54 0B B1 FD | 	call	#__system___float_fromuns
1015c     13 FB 61 F5 | 	xor	result1, local05
10160     FD 12 02 F6 | 	mov	arg01, result1
10164     0C 4E 05 F1 | 	add	fp, #12
10168     A7 14 02 FB | 	rdlong	arg02, fp
1016c     0C 4E 85 F1 | 	sub	fp, #12
10170     1F 14 E6 F4 | 	bitnot	arg02, #31
10174     6C 0B B1 FD | 	call	#__system___float_add
10178     A7 FA 61 FC | 	wrlong	result1, fp
1017c     08 4E 05 F1 | 	add	fp, #8
10180     A7 3C 68 FC | 	wrlong	#30, fp
10184     08 4E 85 F1 | 	sub	fp, #8
10188     34 01 90 FD | 	jmp	#LR__1270
1018c                 | LR__1266
1018c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1018c     08 4E 05 F1 | 	add	fp, #8
10190     A7 1E 02 FB | 	rdlong	local01, fp
10194     08 4E 85 F1 | 	sub	fp, #8
10198     1E 1E 0E F2 | 	cmp	local01, #30 wz
1019c     14 4E 05 A1 |  if_e	add	fp, #20
101a0     A7 22 02 AB |  if_e	rdlong	local03, fp
101a4     14 4E 85 A1 |  if_e	sub	fp, #20
101a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
101ac     2C 00 90 5D |  if_ne	jmp	#LR__1267
101b0     A7 1E 02 FB | 	rdlong	local01, fp
101b4     0C 4E 05 F1 | 	add	fp, #12
101b8     A7 12 02 FB | 	rdlong	arg01, fp
101bc     0C 4E 85 F1 | 	sub	fp, #12
101c0     EC 0A B1 FD | 	call	#__system___float_fromuns
101c4     FD 14 02 F6 | 	mov	arg02, result1
101c8     0F 13 02 F6 | 	mov	arg01, local01
101cc     1F 14 E6 F4 | 	bitnot	arg02, #31
101d0     10 0B B1 FD | 	call	#__system___float_add
101d4     A7 FA 61 FC | 	wrlong	result1, fp
101d8     E4 00 90 FD | 	jmp	#LR__1270
101dc                 | LR__1267
101dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
101dc     08 4E 05 F1 | 	add	fp, #8
101e0     A7 1E 02 FB | 	rdlong	local01, fp
101e4     08 4E 85 F1 | 	sub	fp, #8
101e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
101ec     14 4E 05 A1 |  if_e	add	fp, #20
101f0     A7 22 02 AB |  if_e	rdlong	local03, fp
101f4     14 4E 85 A1 |  if_e	sub	fp, #20
101f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
101fc     3C 00 90 5D |  if_ne	jmp	#LR__1268
10200     A7 1E 02 FB | 	rdlong	local01, fp
10204     0C 4E 05 F1 | 	add	fp, #12
10208     A7 12 02 FB | 	rdlong	arg01, fp
1020c     0C 4E 85 F1 | 	sub	fp, #12
10210     09 13 52 F6 | 	abs	arg01, arg01 wc
10214     1F 26 C6 C9 |  if_b	decod	local05, #31
10218     00 26 06 36 |  if_ae	mov	local05, #0
1021c     90 0A B1 FD | 	call	#__system___float_fromuns
10220     13 FB 61 F5 | 	xor	result1, local05
10224     FD 14 02 F6 | 	mov	arg02, result1
10228     0F 13 02 F6 | 	mov	arg01, local01
1022c     1F 14 E6 F4 | 	bitnot	arg02, #31
10230     B0 0A B1 FD | 	call	#__system___float_add
10234     A7 FA 61 FC | 	wrlong	result1, fp
10238     84 00 90 FD | 	jmp	#LR__1270
1023c                 | LR__1268
1023c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1023c     08 4E 05 F1 | 	add	fp, #8
10240     A7 1E 02 FB | 	rdlong	local01, fp
10244     08 4E 85 F1 | 	sub	fp, #8
10248     1E 1E 0E F2 | 	cmp	local01, #30 wz
1024c     14 4E 05 A1 |  if_e	add	fp, #20
10250     A7 22 02 AB |  if_e	rdlong	local03, fp
10254     14 4E 85 A1 |  if_e	sub	fp, #20
10258     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1025c     20 00 90 5D |  if_ne	jmp	#LR__1269
10260     A7 12 02 FB | 	rdlong	arg01, fp
10264     0C 4E 05 F1 | 	add	fp, #12
10268     A7 14 02 FB | 	rdlong	arg02, fp
1026c     0C 4E 85 F1 | 	sub	fp, #12
10270     1F 14 E6 F4 | 	bitnot	arg02, #31
10274     6C 0A B1 FD | 	call	#__system___float_add
10278     A7 FA 61 FC | 	wrlong	result1, fp
1027c     40 00 90 FD | 	jmp	#LR__1270
10280                 | LR__1269
10280                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
10280     08 4E 05 F1 | 	add	fp, #8
10284     A7 1E 02 FB | 	rdlong	local01, fp
10288     08 4E 85 F1 | 	sub	fp, #8
1028c     1F 1E 0E F2 | 	cmp	local01, #31 wz
10290     14 4E 05 51 |  if_ne	add	fp, #20
10294     A7 22 02 5B |  if_ne	rdlong	local03, fp
10298     14 4E 85 51 |  if_ne	sub	fp, #20
1029c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
102a0     A7 06 68 AC |  if_e	wrlong	#3, fp
102a4     08 4E 05 A1 |  if_e	add	fp, #8
102a8     A7 FE 69 AC |  if_e	wrlong	#255, fp
102ac     08 4E 85 A1 |  if_e	sub	fp, #8
102b0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
102b4     08 4E 05 51 |  if_ne	add	fp, #8
102b8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
102bc     08 4E 85 51 |  if_ne	sub	fp, #8
102c0                 | LR__1270
102c0     A7 12 02 F6 | 	mov	arg01, fp
102c4     74 A2 BF FD | 	call	#_push
102c8     A7 F0 03 F6 | 	mov	ptra, fp
102cc     B2 00 A0 FD | 	call	#popregs_
102d0                 | _do_minus_ret
102d0     2D 00 64 FD | 	ret
102d4                 | 
102d4                 | ' 
102d4                 | ' sub do_and 
102d4                 | _do_and
102d4     03 4A 05 F6 | 	mov	COUNT_, #3
102d8     A8 00 A0 FD | 	call	#pushregs_
102dc     18 F0 07 F1 | 	add	ptra, #24
102e0     C0 A1 BF FD | 	call	#_pop
102e4     FD 12 02 F6 | 	mov	arg01, result1
102e8     FE 1E 02 F6 | 	mov	local01, result2
102ec     FF 20 02 F6 | 	mov	local02, result3
102f0     0C 4E 05 F1 | 	add	fp, #12
102f4     A7 12 62 FC | 	wrlong	arg01, fp
102f8     04 4E 05 F1 | 	add	fp, #4
102fc     A7 1E 62 FC | 	wrlong	local01, fp
10300     04 4E 05 F1 | 	add	fp, #4
10304     A7 20 62 FC | 	wrlong	local02, fp
10308     14 4E 85 F1 | 	sub	fp, #20
1030c     94 A1 BF FD | 	call	#_pop
10310     FF 22 02 F6 | 	mov	local03, result3
10314     A7 FA 61 FC | 	wrlong	result1, fp
10318     04 4E 05 F1 | 	add	fp, #4
1031c     A7 FC 61 FC | 	wrlong	result2, fp
10320     04 4E 05 F1 | 	add	fp, #4
10324     A7 22 62 FC | 	wrlong	local03, fp
10328                 | ' 
10328                 | ' t2=pop()
10328                 | ' t1=pop()
10328                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10328     08 4E 85 F1 | 	sub	fp, #8
1032c     1C 22 0E F2 | 	cmp	local03, #28 wz
10330     A7 22 02 AB |  if_e	rdlong	local03, fp
10334     A7 22 62 AC |  if_e	wrlong	local03, fp
10338     08 4E 05 A1 |  if_e	add	fp, #8
1033c     A7 3A 68 AC |  if_e	wrlong	#29, fp
10340     08 4E 85 A1 |  if_e	sub	fp, #8
10344                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10344     14 4E 05 F1 | 	add	fp, #20
10348     A7 22 02 FB | 	rdlong	local03, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350     1C 22 0E F2 | 	cmp	local03, #28 wz
10354     18 00 90 5D |  if_ne	jmp	#LR__1280
10358     0C 4E 05 F1 | 	add	fp, #12
1035c     A7 22 02 FB | 	rdlong	local03, fp
10360     A7 22 62 FC | 	wrlong	local03, fp
10364     08 4E 05 F1 | 	add	fp, #8
10368     A7 3A 68 FC | 	wrlong	#29, fp
1036c     14 4E 85 F1 | 	sub	fp, #20
10370                 | LR__1280
10370                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
10370     08 4E 05 F1 | 	add	fp, #8
10374     A7 22 02 FB | 	rdlong	local03, fp
10378     08 4E 85 F1 | 	sub	fp, #8
1037c     1F 22 0E F2 | 	cmp	local03, #31 wz
10380     14 4E 05 51 |  if_ne	add	fp, #20
10384     A7 20 02 5B |  if_ne	rdlong	local02, fp
10388     14 4E 85 51 |  if_ne	sub	fp, #20
1038c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10390     08 4E 05 51 |  if_ne	add	fp, #8
10394     A7 22 02 5B |  if_ne	rdlong	local03, fp
10398     08 4E 85 51 |  if_ne	sub	fp, #8
1039c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
103a0     14 4E 05 51 |  if_ne	add	fp, #20
103a4     14 4E 85 51 |  if_ne	sub	fp, #20
103a8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
103ac     A7 0C 68 AC |  if_e	wrlong	#6, fp
103b0     08 4E 05 A1 |  if_e	add	fp, #8
103b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
103b8     08 4E 85 A1 |  if_e	sub	fp, #8
103bc     18 00 90 AD |  if_e	jmp	#LR__1281
103c0     A7 22 02 FB | 	rdlong	local03, fp
103c4     0C 4E 05 F1 | 	add	fp, #12
103c8     A7 1E 02 FB | 	rdlong	local01, fp
103cc     0C 4E 85 F1 | 	sub	fp, #12
103d0     0F 23 02 F5 | 	and	local03, local01
103d4     A7 22 62 FC | 	wrlong	local03, fp
103d8                 | LR__1281
103d8     A7 12 02 F6 | 	mov	arg01, fp
103dc     5C A1 BF FD | 	call	#_push
103e0     A7 F0 03 F6 | 	mov	ptra, fp
103e4     B2 00 A0 FD | 	call	#popregs_
103e8                 | _do_and_ret
103e8     2D 00 64 FD | 	ret
103ec                 | 
103ec                 | ' 
103ec                 | ' sub do_or 
103ec                 | _do_or
103ec     03 4A 05 F6 | 	mov	COUNT_, #3
103f0     A8 00 A0 FD | 	call	#pushregs_
103f4     18 F0 07 F1 | 	add	ptra, #24
103f8     A8 A0 BF FD | 	call	#_pop
103fc     FD 12 02 F6 | 	mov	arg01, result1
10400     FE 1E 02 F6 | 	mov	local01, result2
10404     FF 20 02 F6 | 	mov	local02, result3
10408     0C 4E 05 F1 | 	add	fp, #12
1040c     A7 12 62 FC | 	wrlong	arg01, fp
10410     04 4E 05 F1 | 	add	fp, #4
10414     A7 1E 62 FC | 	wrlong	local01, fp
10418     04 4E 05 F1 | 	add	fp, #4
1041c     A7 20 62 FC | 	wrlong	local02, fp
10420     14 4E 85 F1 | 	sub	fp, #20
10424     7C A0 BF FD | 	call	#_pop
10428     FF 22 02 F6 | 	mov	local03, result3
1042c     A7 FA 61 FC | 	wrlong	result1, fp
10430     04 4E 05 F1 | 	add	fp, #4
10434     A7 FC 61 FC | 	wrlong	result2, fp
10438     04 4E 05 F1 | 	add	fp, #4
1043c     A7 22 62 FC | 	wrlong	local03, fp
10440                 | ' 
10440                 | ' t2=pop()
10440                 | ' t1=pop()
10440                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10440     08 4E 85 F1 | 	sub	fp, #8
10444     1C 22 0E F2 | 	cmp	local03, #28 wz
10448     A7 22 02 AB |  if_e	rdlong	local03, fp
1044c     A7 22 62 AC |  if_e	wrlong	local03, fp
10450     08 4E 05 A1 |  if_e	add	fp, #8
10454     A7 3A 68 AC |  if_e	wrlong	#29, fp
10458     08 4E 85 A1 |  if_e	sub	fp, #8
1045c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1045c     14 4E 05 F1 | 	add	fp, #20
10460     A7 22 02 FB | 	rdlong	local03, fp
10464     14 4E 85 F1 | 	sub	fp, #20
10468     1C 22 0E F2 | 	cmp	local03, #28 wz
1046c     18 00 90 5D |  if_ne	jmp	#LR__1290
10470     0C 4E 05 F1 | 	add	fp, #12
10474     A7 22 02 FB | 	rdlong	local03, fp
10478     A7 22 62 FC | 	wrlong	local03, fp
1047c     08 4E 05 F1 | 	add	fp, #8
10480     A7 3A 68 FC | 	wrlong	#29, fp
10484     14 4E 85 F1 | 	sub	fp, #20
10488                 | LR__1290
10488                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
10488     08 4E 05 F1 | 	add	fp, #8
1048c     A7 22 02 FB | 	rdlong	local03, fp
10490     08 4E 85 F1 | 	sub	fp, #8
10494     1F 22 0E F2 | 	cmp	local03, #31 wz
10498     14 4E 05 51 |  if_ne	add	fp, #20
1049c     A7 20 02 5B |  if_ne	rdlong	local02, fp
104a0     14 4E 85 51 |  if_ne	sub	fp, #20
104a4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
104a8     08 4E 05 51 |  if_ne	add	fp, #8
104ac     A7 22 02 5B |  if_ne	rdlong	local03, fp
104b0     08 4E 85 51 |  if_ne	sub	fp, #8
104b4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
104b8     14 4E 05 51 |  if_ne	add	fp, #20
104bc     14 4E 85 51 |  if_ne	sub	fp, #20
104c0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
104c4     A7 0C 68 AC |  if_e	wrlong	#6, fp
104c8     08 4E 05 A1 |  if_e	add	fp, #8
104cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
104d0     08 4E 85 A1 |  if_e	sub	fp, #8
104d4     18 00 90 AD |  if_e	jmp	#LR__1291
104d8     A7 22 02 FB | 	rdlong	local03, fp
104dc     0C 4E 05 F1 | 	add	fp, #12
104e0     A7 1E 02 FB | 	rdlong	local01, fp
104e4     0C 4E 85 F1 | 	sub	fp, #12
104e8     0F 23 42 F5 | 	or	local03, local01
104ec     A7 22 62 FC | 	wrlong	local03, fp
104f0                 | LR__1291
104f0     A7 12 02 F6 | 	mov	arg01, fp
104f4     44 A0 BF FD | 	call	#_push
104f8     A7 F0 03 F6 | 	mov	ptra, fp
104fc     B2 00 A0 FD | 	call	#popregs_
10500                 | _do_or_ret
10500     2D 00 64 FD | 	ret
10504                 | 
10504                 | ' 
10504                 | ' sub do_mul
10504                 | _do_mul
10504     05 4A 05 F6 | 	mov	COUNT_, #5
10508     A8 00 A0 FD | 	call	#pushregs_
1050c     18 F0 07 F1 | 	add	ptra, #24
10510     90 9F BF FD | 	call	#_pop
10514     FD 1E 02 F6 | 	mov	local01, result1
10518     FE 20 02 F6 | 	mov	local02, result2
1051c     FF 22 02 F6 | 	mov	local03, result3
10520     0C 4E 05 F1 | 	add	fp, #12
10524     A7 1E 62 FC | 	wrlong	local01, fp
10528     04 4E 05 F1 | 	add	fp, #4
1052c     A7 20 62 FC | 	wrlong	local02, fp
10530     04 4E 05 F1 | 	add	fp, #4
10534     A7 22 62 FC | 	wrlong	local03, fp
10538     14 4E 85 F1 | 	sub	fp, #20
1053c     64 9F BF FD | 	call	#_pop
10540     FF 22 02 F6 | 	mov	local03, result3
10544     A7 FA 61 FC | 	wrlong	result1, fp
10548     04 4E 05 F1 | 	add	fp, #4
1054c     A7 FC 61 FC | 	wrlong	result2, fp
10550     04 4E 05 F1 | 	add	fp, #4
10554     A7 22 62 FC | 	wrlong	local03, fp
10558                 | ' 
10558                 | ' t2=pop()
10558                 | ' t1=pop()
10558                 | ' 
10558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10558     08 4E 85 F1 | 	sub	fp, #8
1055c     1D 22 0E F2 | 	cmp	local03, #29 wz
10560     14 4E 05 A1 |  if_e	add	fp, #20
10564     A7 24 02 AB |  if_e	rdlong	local04, fp
10568     14 4E 85 A1 |  if_e	sub	fp, #20
1056c     12 23 02 A6 |  if_e	mov	local03, local04
10570     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10574     20 00 90 5D |  if_ne	jmp	#LR__1300
10578     A7 20 02 FB | 	rdlong	local02, fp
1057c     0C 4E 05 F1 | 	add	fp, #12
10580     A7 22 02 FB | 	rdlong	local03, fp
10584     11 21 02 FD | 	qmul	local02, local03
10588     0C 4E 85 F1 | 	sub	fp, #12
1058c     18 1E 62 FD | 	getqx	local01
10590     A7 1E 62 FC | 	wrlong	local01, fp
10594     C4 02 90 FD | 	jmp	#LR__1309
10598                 | LR__1300
10598                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
10598     08 4E 05 F1 | 	add	fp, #8
1059c     A7 1E 02 FB | 	rdlong	local01, fp
105a0     08 4E 85 F1 | 	sub	fp, #8
105a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
105a8     14 4E 05 A1 |  if_e	add	fp, #20
105ac     A7 24 02 AB |  if_e	rdlong	local04, fp
105b0     14 4E 85 A1 |  if_e	sub	fp, #20
105b4     12 23 02 A6 |  if_e	mov	local03, local04
105b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
105bc     2C 00 90 5D |  if_ne	jmp	#LR__1301
105c0     A7 20 02 FB | 	rdlong	local02, fp
105c4     0C 4E 05 F1 | 	add	fp, #12
105c8     A7 22 02 FB | 	rdlong	local03, fp
105cc     11 21 02 FD | 	qmul	local02, local03
105d0     0C 4E 85 F1 | 	sub	fp, #12
105d4     18 1E 62 FD | 	getqx	local01
105d8     A7 1E 62 FC | 	wrlong	local01, fp
105dc     08 4E 05 F1 | 	add	fp, #8
105e0     A7 38 68 FC | 	wrlong	#28, fp
105e4     08 4E 85 F1 | 	sub	fp, #8
105e8     70 02 90 FD | 	jmp	#LR__1309
105ec                 | LR__1301
105ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
105ec     08 4E 05 F1 | 	add	fp, #8
105f0     A7 1E 02 FB | 	rdlong	local01, fp
105f4     08 4E 85 F1 | 	sub	fp, #8
105f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
105fc     14 4E 05 A1 |  if_e	add	fp, #20
10600     A7 24 02 AB |  if_e	rdlong	local04, fp
10604     14 4E 85 A1 |  if_e	sub	fp, #20
10608     12 23 02 A6 |  if_e	mov	local03, local04
1060c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10610     30 00 90 5D |  if_ne	jmp	#LR__1302
10614     A7 12 02 FB | 	rdlong	arg01, fp
10618     94 06 B1 FD | 	call	#__system___float_fromuns
1061c     FD 12 02 F6 | 	mov	arg01, result1
10620     0C 4E 05 F1 | 	add	fp, #12
10624     A7 14 02 FB | 	rdlong	arg02, fp
10628     0C 4E 85 F1 | 	sub	fp, #12
1062c     84 0A B1 FD | 	call	#__system___float_mul
10630     A7 FA 61 FC | 	wrlong	result1, fp
10634     08 4E 05 F1 | 	add	fp, #8
10638     A7 3C 68 FC | 	wrlong	#30, fp
1063c     08 4E 85 F1 | 	sub	fp, #8
10640     18 02 90 FD | 	jmp	#LR__1309
10644                 | LR__1302
10644                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
10644     08 4E 05 F1 | 	add	fp, #8
10648     A7 1E 02 FB | 	rdlong	local01, fp
1064c     08 4E 85 F1 | 	sub	fp, #8
10650     1C 1E 0E F2 | 	cmp	local01, #28 wz
10654     14 4E 05 A1 |  if_e	add	fp, #20
10658     A7 24 02 AB |  if_e	rdlong	local04, fp
1065c     14 4E 85 A1 |  if_e	sub	fp, #20
10660     12 23 02 A6 |  if_e	mov	local03, local04
10664     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10668     20 00 90 5D |  if_ne	jmp	#LR__1303
1066c     A7 20 02 FB | 	rdlong	local02, fp
10670     0C 4E 05 F1 | 	add	fp, #12
10674     A7 22 02 FB | 	rdlong	local03, fp
10678     11 21 02 FD | 	qmul	local02, local03
1067c     0C 4E 85 F1 | 	sub	fp, #12
10680     18 1E 62 FD | 	getqx	local01
10684     A7 1E 62 FC | 	wrlong	local01, fp
10688     D0 01 90 FD | 	jmp	#LR__1309
1068c                 | LR__1303
1068c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1068c     08 4E 05 F1 | 	add	fp, #8
10690     A7 1E 02 FB | 	rdlong	local01, fp
10694     08 4E 85 F1 | 	sub	fp, #8
10698     1C 1E 0E F2 | 	cmp	local01, #28 wz
1069c     14 4E 05 A1 |  if_e	add	fp, #20
106a0     A7 24 02 AB |  if_e	rdlong	local04, fp
106a4     14 4E 85 A1 |  if_e	sub	fp, #20
106a8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
106ac     20 00 90 5D |  if_ne	jmp	#LR__1304
106b0     A7 20 02 FB | 	rdlong	local02, fp
106b4     0C 4E 05 F1 | 	add	fp, #12
106b8     A7 22 02 FB | 	rdlong	local03, fp
106bc     11 21 02 FD | 	qmul	local02, local03
106c0     0C 4E 85 F1 | 	sub	fp, #12
106c4     18 1E 62 FD | 	getqx	local01
106c8     A7 1E 62 FC | 	wrlong	local01, fp
106cc     8C 01 90 FD | 	jmp	#LR__1309
106d0                 | LR__1304
106d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
106d0     08 4E 05 F1 | 	add	fp, #8
106d4     A7 1E 02 FB | 	rdlong	local01, fp
106d8     08 4E 85 F1 | 	sub	fp, #8
106dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
106e0     14 4E 05 A1 |  if_e	add	fp, #20
106e4     A7 22 02 AB |  if_e	rdlong	local03, fp
106e8     14 4E 85 A1 |  if_e	sub	fp, #20
106ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
106f0     40 00 90 5D |  if_ne	jmp	#LR__1305
106f4     A7 12 02 FB | 	rdlong	arg01, fp
106f8     09 13 52 F6 | 	abs	arg01, arg01 wc
106fc     1F 26 C6 C9 |  if_b	decod	local05, #31
10700     00 26 06 36 |  if_ae	mov	local05, #0
10704     A8 05 B1 FD | 	call	#__system___float_fromuns
10708     13 FB 61 F5 | 	xor	result1, local05
1070c     FD 12 02 F6 | 	mov	arg01, result1
10710     0C 4E 05 F1 | 	add	fp, #12
10714     A7 14 02 FB | 	rdlong	arg02, fp
10718     0C 4E 85 F1 | 	sub	fp, #12
1071c     94 09 B1 FD | 	call	#__system___float_mul
10720     A7 FA 61 FC | 	wrlong	result1, fp
10724     08 4E 05 F1 | 	add	fp, #8
10728     A7 3C 68 FC | 	wrlong	#30, fp
1072c     08 4E 85 F1 | 	sub	fp, #8
10730     28 01 90 FD | 	jmp	#LR__1309
10734                 | LR__1305
10734                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10734     08 4E 05 F1 | 	add	fp, #8
10738     A7 1E 02 FB | 	rdlong	local01, fp
1073c     08 4E 85 F1 | 	sub	fp, #8
10740     1E 1E 0E F2 | 	cmp	local01, #30 wz
10744     14 4E 05 A1 |  if_e	add	fp, #20
10748     A7 22 02 AB |  if_e	rdlong	local03, fp
1074c     14 4E 85 A1 |  if_e	sub	fp, #20
10750     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10754     28 00 90 5D |  if_ne	jmp	#LR__1306
10758     A7 1E 02 FB | 	rdlong	local01, fp
1075c     0C 4E 05 F1 | 	add	fp, #12
10760     A7 12 02 FB | 	rdlong	arg01, fp
10764     0C 4E 85 F1 | 	sub	fp, #12
10768     44 05 B1 FD | 	call	#__system___float_fromuns
1076c     FD 14 02 F6 | 	mov	arg02, result1
10770     0F 13 02 F6 | 	mov	arg01, local01
10774     3C 09 B1 FD | 	call	#__system___float_mul
10778     A7 FA 61 FC | 	wrlong	result1, fp
1077c     DC 00 90 FD | 	jmp	#LR__1309
10780                 | LR__1306
10780                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10780     08 4E 05 F1 | 	add	fp, #8
10784     A7 1E 02 FB | 	rdlong	local01, fp
10788     08 4E 85 F1 | 	sub	fp, #8
1078c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10790     14 4E 05 A1 |  if_e	add	fp, #20
10794     A7 22 02 AB |  if_e	rdlong	local03, fp
10798     14 4E 85 A1 |  if_e	sub	fp, #20
1079c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
107a0     38 00 90 5D |  if_ne	jmp	#LR__1307
107a4     A7 1E 02 FB | 	rdlong	local01, fp
107a8     0C 4E 05 F1 | 	add	fp, #12
107ac     A7 12 02 FB | 	rdlong	arg01, fp
107b0     0C 4E 85 F1 | 	sub	fp, #12
107b4     09 13 52 F6 | 	abs	arg01, arg01 wc
107b8     1F 26 C6 C9 |  if_b	decod	local05, #31
107bc     00 26 06 36 |  if_ae	mov	local05, #0
107c0     EC 04 B1 FD | 	call	#__system___float_fromuns
107c4     13 FB 61 F5 | 	xor	result1, local05
107c8     FD 14 02 F6 | 	mov	arg02, result1
107cc     0F 13 02 F6 | 	mov	arg01, local01
107d0     E0 08 B1 FD | 	call	#__system___float_mul
107d4     A7 FA 61 FC | 	wrlong	result1, fp
107d8     80 00 90 FD | 	jmp	#LR__1309
107dc                 | LR__1307
107dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
107dc     08 4E 05 F1 | 	add	fp, #8
107e0     A7 1E 02 FB | 	rdlong	local01, fp
107e4     08 4E 85 F1 | 	sub	fp, #8
107e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
107ec     14 4E 05 A1 |  if_e	add	fp, #20
107f0     A7 22 02 AB |  if_e	rdlong	local03, fp
107f4     14 4E 85 A1 |  if_e	sub	fp, #20
107f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
107fc     1C 00 90 5D |  if_ne	jmp	#LR__1308
10800     A7 12 02 FB | 	rdlong	arg01, fp
10804     0C 4E 05 F1 | 	add	fp, #12
10808     A7 14 02 FB | 	rdlong	arg02, fp
1080c     0C 4E 85 F1 | 	sub	fp, #12
10810     A0 08 B1 FD | 	call	#__system___float_mul
10814     A7 FA 61 FC | 	wrlong	result1, fp
10818     40 00 90 FD | 	jmp	#LR__1309
1081c                 | LR__1308
1081c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1081c     08 4E 05 F1 | 	add	fp, #8
10820     A7 1E 02 FB | 	rdlong	local01, fp
10824     08 4E 85 F1 | 	sub	fp, #8
10828     1F 1E 0E F2 | 	cmp	local01, #31 wz
1082c     14 4E 05 51 |  if_ne	add	fp, #20
10830     A7 22 02 5B |  if_ne	rdlong	local03, fp
10834     14 4E 85 51 |  if_ne	sub	fp, #20
10838     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1083c     A7 10 68 AC |  if_e	wrlong	#8, fp
10840     08 4E 05 A1 |  if_e	add	fp, #8
10844     A7 FE 69 AC |  if_e	wrlong	#255, fp
10848     08 4E 85 A1 |  if_e	sub	fp, #8
1084c     A7 12 68 5C |  if_ne	wrlong	#9, fp
10850     08 4E 05 51 |  if_ne	add	fp, #8
10854     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10858     08 4E 85 51 |  if_ne	sub	fp, #8
1085c                 | LR__1309
1085c     A7 12 02 F6 | 	mov	arg01, fp
10860     D8 9C BF FD | 	call	#_push
10864     A7 F0 03 F6 | 	mov	ptra, fp
10868     B2 00 A0 FD | 	call	#popregs_
1086c                 | _do_mul_ret
1086c     2D 00 64 FD | 	ret
10870                 | 
10870                 | ' 
10870                 | ' sub do_div 
10870                 | _do_div
10870     01 4A 05 F6 | 	mov	COUNT_, #1
10874     A8 00 A0 FD | 	call	#pushregs_
10878     18 F0 07 F1 | 	add	ptra, #24
1087c     24 9C BF FD | 	call	#_pop
10880     FD 66 02 F6 | 	mov	muldivb_, result1
10884     FE 64 02 F6 | 	mov	muldiva_, result2
10888     FF 1E 02 F6 | 	mov	local01, result3
1088c     0C 4E 05 F1 | 	add	fp, #12
10890     A7 66 62 FC | 	wrlong	muldivb_, fp
10894     04 4E 05 F1 | 	add	fp, #4
10898     A7 64 62 FC | 	wrlong	muldiva_, fp
1089c     04 4E 05 F1 | 	add	fp, #4
108a0     A7 1E 62 FC | 	wrlong	local01, fp
108a4     14 4E 85 F1 | 	sub	fp, #20
108a8     F8 9B BF FD | 	call	#_pop
108ac     A7 FA 61 FC | 	wrlong	result1, fp
108b0     04 4E 05 F1 | 	add	fp, #4
108b4     A7 FC 61 FC | 	wrlong	result2, fp
108b8     04 4E 05 F1 | 	add	fp, #4
108bc     A7 FE 61 FC | 	wrlong	result3, fp
108c0                 | ' 
108c0                 | ' t2=pop()
108c0                 | ' t1=pop()
108c0                 | ' 
108c0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
108c0     08 4E 85 F1 | 	sub	fp, #8
108c4     1F FE 0D F2 | 	cmp	result3, #31 wz
108c8     14 4E 05 51 |  if_ne	add	fp, #20
108cc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
108d0     14 4E 85 51 |  if_ne	sub	fp, #20
108d4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
108d8     A7 14 68 AC |  if_e	wrlong	#10, fp
108dc     08 4E 05 A1 |  if_e	add	fp, #8
108e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
108e4     08 4E 85 A1 |  if_e	sub	fp, #8
108e8     90 01 90 AD |  if_e	jmp	#LR__1316
108ec                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
108ec     08 4E 05 F1 | 	add	fp, #8
108f0     A7 66 02 FB | 	rdlong	muldivb_, fp
108f4     08 4E 85 F1 | 	sub	fp, #8
108f8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
108fc     1C 00 90 5D |  if_ne	jmp	#LR__1310
10900     08 4E 05 F1 | 	add	fp, #8
10904     A7 38 68 FC | 	wrlong	#28, fp
10908     08 4E 85 F1 | 	sub	fp, #8
1090c     A7 12 02 FB | 	rdlong	arg01, fp
10910     00 14 06 F6 | 	mov	arg02, #0
10914     64 0C B1 FD | 	call	#__system___float_tointeger
10918     A7 FA 61 FC | 	wrlong	result1, fp
1091c                 | LR__1310
1091c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1091c     14 4E 05 F1 | 	add	fp, #20
10920     A7 66 02 FB | 	rdlong	muldivb_, fp
10924     14 4E 85 F1 | 	sub	fp, #20
10928     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1092c     28 00 90 5D |  if_ne	jmp	#LR__1311
10930     14 4E 05 F1 | 	add	fp, #20
10934     A7 38 68 FC | 	wrlong	#28, fp
10938     08 4E 85 F1 | 	sub	fp, #8
1093c     A7 12 02 FB | 	rdlong	arg01, fp
10940     0C 4E 85 F1 | 	sub	fp, #12
10944     00 14 06 F6 | 	mov	arg02, #0
10948     30 0C B1 FD | 	call	#__system___float_tointeger
1094c     0C 4E 05 F1 | 	add	fp, #12
10950     A7 FA 61 FC | 	wrlong	result1, fp
10954     0C 4E 85 F1 | 	sub	fp, #12
10958                 | LR__1311
10958                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10958     08 4E 05 F1 | 	add	fp, #8
1095c     A7 66 02 FB | 	rdlong	muldivb_, fp
10960     08 4E 85 F1 | 	sub	fp, #8
10964     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10968     14 4E 05 A1 |  if_e	add	fp, #20
1096c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10970     14 4E 85 A1 |  if_e	sub	fp, #20
10974     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10978     20 00 90 5D |  if_ne	jmp	#LR__1312
1097c     0C 4E 05 F1 | 	add	fp, #12
10980     A7 1E 02 FB | 	rdlong	local01, fp
10984     0C 4E 85 F1 | 	sub	fp, #12
10988     A7 66 02 FB | 	rdlong	muldivb_, fp
1098c     0F 67 12 FD | 	qdiv	muldivb_, local01
10990     18 1E 62 FD | 	getqx	local01
10994     A7 1E 62 FC | 	wrlong	local01, fp
10998     E0 00 90 FD | 	jmp	#LR__1316
1099c                 | LR__1312
1099c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1099c     08 4E 05 F1 | 	add	fp, #8
109a0     A7 66 02 FB | 	rdlong	muldivb_, fp
109a4     08 4E 85 F1 | 	sub	fp, #8
109a8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
109ac     14 4E 05 A1 |  if_e	add	fp, #20
109b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
109b4     14 4E 85 A1 |  if_e	sub	fp, #20
109b8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
109bc     2C 00 90 5D |  if_ne	jmp	#LR__1313
109c0     0C 4E 05 F1 | 	add	fp, #12
109c4     A7 1E 02 FB | 	rdlong	local01, fp
109c8     0C 4E 85 F1 | 	sub	fp, #12
109cc     A7 66 02 FB | 	rdlong	muldivb_, fp
109d0     0F 67 12 FD | 	qdiv	muldivb_, local01
109d4     18 1E 62 FD | 	getqx	local01
109d8     A7 1E 62 FC | 	wrlong	local01, fp
109dc     08 4E 05 F1 | 	add	fp, #8
109e0     A7 38 68 FC | 	wrlong	#28, fp
109e4     08 4E 85 F1 | 	sub	fp, #8
109e8     90 00 90 FD | 	jmp	#LR__1316
109ec                 | LR__1313
109ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
109ec     08 4E 05 F1 | 	add	fp, #8
109f0     A7 66 02 FB | 	rdlong	muldivb_, fp
109f4     08 4E 85 F1 | 	sub	fp, #8
109f8     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
109fc     14 4E 05 A1 |  if_e	add	fp, #20
10a00     A7 1E 02 AB |  if_e	rdlong	local01, fp
10a04     14 4E 85 A1 |  if_e	sub	fp, #20
10a08     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10a0c     1C 00 90 5D |  if_ne	jmp	#LR__1314
10a10     A7 64 02 FB | 	rdlong	muldiva_, fp
10a14     0C 4E 05 F1 | 	add	fp, #12
10a18     A7 66 02 FB | 	rdlong	muldivb_, fp
10a1c     0C 4E 85 F1 | 	sub	fp, #12
10a20     BA 00 A0 FD | 	call	#divide_
10a24     A7 66 62 FC | 	wrlong	muldivb_, fp
10a28     50 00 90 FD | 	jmp	#LR__1316
10a2c                 | LR__1314
10a2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10a2c     08 4E 05 F1 | 	add	fp, #8
10a30     A7 66 02 FB | 	rdlong	muldivb_, fp
10a34     08 4E 85 F1 | 	sub	fp, #8
10a38     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10a3c     14 4E 05 A1 |  if_e	add	fp, #20
10a40     A7 1E 02 AB |  if_e	rdlong	local01, fp
10a44     14 4E 85 A1 |  if_e	sub	fp, #20
10a48     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10a4c     1C 00 90 5D |  if_ne	jmp	#LR__1315
10a50     A7 64 02 FB | 	rdlong	muldiva_, fp
10a54     0C 4E 05 F1 | 	add	fp, #12
10a58     A7 66 02 FB | 	rdlong	muldivb_, fp
10a5c     0C 4E 85 F1 | 	sub	fp, #12
10a60     BA 00 A0 FD | 	call	#divide_
10a64     A7 66 62 FC | 	wrlong	muldivb_, fp
10a68     10 00 90 FD | 	jmp	#LR__1316
10a6c                 | LR__1315
10a6c     A7 16 68 FC | 	wrlong	#11, fp
10a70     08 4E 05 F1 | 	add	fp, #8
10a74     A7 FE 69 FC | 	wrlong	#255, fp
10a78     08 4E 85 F1 | 	sub	fp, #8
10a7c                 | LR__1316
10a7c     A7 12 02 F6 | 	mov	arg01, fp
10a80     B8 9A BF FD | 	call	#_push
10a84     A7 F0 03 F6 | 	mov	ptra, fp
10a88     B2 00 A0 FD | 	call	#popregs_
10a8c                 | _do_div_ret
10a8c     2D 00 64 FD | 	ret
10a90                 | 
10a90                 | ' 
10a90                 | ' sub do_fdiv 
10a90                 | _do_fdiv
10a90     02 4A 05 F6 | 	mov	COUNT_, #2
10a94     A8 00 A0 FD | 	call	#pushregs_
10a98     18 F0 07 F1 | 	add	ptra, #24
10a9c     04 9A BF FD | 	call	#_pop
10aa0     FD 14 02 F6 | 	mov	arg02, result1
10aa4     FE 12 02 F6 | 	mov	arg01, result2
10aa8     FF 1E 02 F6 | 	mov	local01, result3
10aac     0C 4E 05 F1 | 	add	fp, #12
10ab0     A7 14 62 FC | 	wrlong	arg02, fp
10ab4     04 4E 05 F1 | 	add	fp, #4
10ab8     A7 12 62 FC | 	wrlong	arg01, fp
10abc     04 4E 05 F1 | 	add	fp, #4
10ac0     A7 1E 62 FC | 	wrlong	local01, fp
10ac4     14 4E 85 F1 | 	sub	fp, #20
10ac8     D8 99 BF FD | 	call	#_pop
10acc     A7 FA 61 FC | 	wrlong	result1, fp
10ad0     04 4E 05 F1 | 	add	fp, #4
10ad4     A7 FC 61 FC | 	wrlong	result2, fp
10ad8     04 4E 05 F1 | 	add	fp, #4
10adc     A7 FE 61 FC | 	wrlong	result3, fp
10ae0                 | ' 
10ae0                 | ' t2=pop()
10ae0                 | ' t1=pop()
10ae0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
10ae0     08 4E 85 F1 | 	sub	fp, #8
10ae4     1F FE 0D F2 | 	cmp	result3, #31 wz
10ae8     14 4E 05 51 |  if_ne	add	fp, #20
10aec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10af0     14 4E 85 51 |  if_ne	sub	fp, #20
10af4     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10af8     A7 14 68 AC |  if_e	wrlong	#10, fp
10afc     08 4E 05 A1 |  if_e	add	fp, #8
10b00     A7 FE 69 AC |  if_e	wrlong	#255, fp
10b04     08 4E 85 A1 |  if_e	sub	fp, #8
10b08     38 01 90 AD |  if_e	jmp	#LR__1325
10b0c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10b0c     08 4E 05 F1 | 	add	fp, #8
10b10     A7 14 02 FB | 	rdlong	arg02, fp
10b14     08 4E 85 F1 | 	sub	fp, #8
10b18     1C 14 0E F2 | 	cmp	arg02, #28 wz
10b1c     28 00 90 5D |  if_ne	jmp	#LR__1320
10b20     08 4E 05 F1 | 	add	fp, #8
10b24     A7 3C 68 FC | 	wrlong	#30, fp
10b28     08 4E 85 F1 | 	sub	fp, #8
10b2c     A7 12 02 FB | 	rdlong	arg01, fp
10b30     09 13 52 F6 | 	abs	arg01, arg01 wc
10b34     1F 20 C6 C9 |  if_b	decod	local02, #31
10b38     00 20 06 36 |  if_ae	mov	local02, #0
10b3c     70 01 B1 FD | 	call	#__system___float_fromuns
10b40     10 FB 61 F5 | 	xor	result1, local02
10b44     A7 FA 61 FC | 	wrlong	result1, fp
10b48                 | LR__1320
10b48                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10b48     08 4E 05 F1 | 	add	fp, #8
10b4c     A7 14 02 FB | 	rdlong	arg02, fp
10b50     08 4E 85 F1 | 	sub	fp, #8
10b54     1D 14 0E F2 | 	cmp	arg02, #29 wz
10b58     18 00 90 5D |  if_ne	jmp	#LR__1321
10b5c     08 4E 05 F1 | 	add	fp, #8
10b60     A7 3C 68 FC | 	wrlong	#30, fp
10b64     08 4E 85 F1 | 	sub	fp, #8
10b68     A7 12 02 FB | 	rdlong	arg01, fp
10b6c     40 01 B1 FD | 	call	#__system___float_fromuns
10b70     A7 FA 61 FC | 	wrlong	result1, fp
10b74                 | LR__1321
10b74                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10b74     14 4E 05 F1 | 	add	fp, #20
10b78     A7 14 02 FB | 	rdlong	arg02, fp
10b7c     14 4E 85 F1 | 	sub	fp, #20
10b80     1C 14 0E F2 | 	cmp	arg02, #28 wz
10b84     34 00 90 5D |  if_ne	jmp	#LR__1322
10b88     14 4E 05 F1 | 	add	fp, #20
10b8c     A7 3C 68 FC | 	wrlong	#30, fp
10b90     08 4E 85 F1 | 	sub	fp, #8
10b94     A7 12 02 FB | 	rdlong	arg01, fp
10b98     0C 4E 85 F1 | 	sub	fp, #12
10b9c     09 13 52 F6 | 	abs	arg01, arg01 wc
10ba0     1F 20 C6 C9 |  if_b	decod	local02, #31
10ba4     00 20 06 36 |  if_ae	mov	local02, #0
10ba8     04 01 B1 FD | 	call	#__system___float_fromuns
10bac     10 FB 61 F5 | 	xor	result1, local02
10bb0     0C 4E 05 F1 | 	add	fp, #12
10bb4     A7 FA 61 FC | 	wrlong	result1, fp
10bb8     0C 4E 85 F1 | 	sub	fp, #12
10bbc                 | LR__1322
10bbc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10bbc     14 4E 05 F1 | 	add	fp, #20
10bc0     A7 14 02 FB | 	rdlong	arg02, fp
10bc4     14 4E 85 F1 | 	sub	fp, #20
10bc8     1D 14 0E F2 | 	cmp	arg02, #29 wz
10bcc     24 00 90 5D |  if_ne	jmp	#LR__1323
10bd0     14 4E 05 F1 | 	add	fp, #20
10bd4     A7 3C 68 FC | 	wrlong	#30, fp
10bd8     08 4E 85 F1 | 	sub	fp, #8
10bdc     A7 12 02 FB | 	rdlong	arg01, fp
10be0     0C 4E 85 F1 | 	sub	fp, #12
10be4     C8 00 B1 FD | 	call	#__system___float_fromuns
10be8     0C 4E 05 F1 | 	add	fp, #12
10bec     A7 FA 61 FC | 	wrlong	result1, fp
10bf0     0C 4E 85 F1 | 	sub	fp, #12
10bf4                 | LR__1323
10bf4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
10bf4     08 4E 05 F1 | 	add	fp, #8
10bf8     A7 14 02 FB | 	rdlong	arg02, fp
10bfc     08 4E 85 F1 | 	sub	fp, #8
10c00     1E 14 0E F2 | 	cmp	arg02, #30 wz
10c04     14 4E 05 A1 |  if_e	add	fp, #20
10c08     A7 1E 02 AB |  if_e	rdlong	local01, fp
10c0c     14 4E 85 A1 |  if_e	sub	fp, #20
10c10     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10c14     1C 00 90 5D |  if_ne	jmp	#LR__1324
10c18     A7 12 02 FB | 	rdlong	arg01, fp
10c1c     0C 4E 05 F1 | 	add	fp, #12
10c20     A7 14 02 FB | 	rdlong	arg02, fp
10c24     0C 4E 85 F1 | 	sub	fp, #12
10c28     8C 06 B1 FD | 	call	#__system___float_div
10c2c     A7 FA 61 FC | 	wrlong	result1, fp
10c30     10 00 90 FD | 	jmp	#LR__1325
10c34                 | LR__1324
10c34     A7 16 68 FC | 	wrlong	#11, fp
10c38     08 4E 05 F1 | 	add	fp, #8
10c3c     A7 FE 69 FC | 	wrlong	#255, fp
10c40     08 4E 85 F1 | 	sub	fp, #8
10c44                 | LR__1325
10c44     A7 12 02 F6 | 	mov	arg01, fp
10c48     F0 98 BF FD | 	call	#_push
10c4c     A7 F0 03 F6 | 	mov	ptra, fp
10c50     B2 00 A0 FD | 	call	#popregs_
10c54                 | _do_fdiv_ret
10c54     2D 00 64 FD | 	ret
10c58                 | 
10c58                 | ' 
10c58                 | ' 
10c58                 | ' sub do_mod 
10c58                 | _do_mod
10c58     01 4A 05 F6 | 	mov	COUNT_, #1
10c5c     A8 00 A0 FD | 	call	#pushregs_
10c60     18 F0 07 F1 | 	add	ptra, #24
10c64     3C 98 BF FD | 	call	#_pop
10c68     FD 66 02 F6 | 	mov	muldivb_, result1
10c6c     FE 64 02 F6 | 	mov	muldiva_, result2
10c70     FF 1E 02 F6 | 	mov	local01, result3
10c74     0C 4E 05 F1 | 	add	fp, #12
10c78     A7 66 62 FC | 	wrlong	muldivb_, fp
10c7c     04 4E 05 F1 | 	add	fp, #4
10c80     A7 64 62 FC | 	wrlong	muldiva_, fp
10c84     04 4E 05 F1 | 	add	fp, #4
10c88     A7 1E 62 FC | 	wrlong	local01, fp
10c8c     14 4E 85 F1 | 	sub	fp, #20
10c90     10 98 BF FD | 	call	#_pop
10c94     A7 FA 61 FC | 	wrlong	result1, fp
10c98     04 4E 05 F1 | 	add	fp, #4
10c9c     A7 FC 61 FC | 	wrlong	result2, fp
10ca0     04 4E 05 F1 | 	add	fp, #4
10ca4     A7 FE 61 FC | 	wrlong	result3, fp
10ca8                 | ' 
10ca8                 | ' t2=pop()
10ca8                 | ' t1=pop()
10ca8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
10ca8     08 4E 85 F1 | 	sub	fp, #8
10cac     1F FE 0D F2 | 	cmp	result3, #31 wz
10cb0     14 4E 05 51 |  if_ne	add	fp, #20
10cb4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10cb8     14 4E 85 51 |  if_ne	sub	fp, #20
10cbc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
10cc0     A7 14 68 AC |  if_e	wrlong	#10, fp
10cc4     08 4E 05 A1 |  if_e	add	fp, #8
10cc8     A7 FE 69 AC |  if_e	wrlong	#255, fp
10ccc     08 4E 85 A1 |  if_e	sub	fp, #8
10cd0     90 01 90 AD |  if_e	jmp	#LR__1336
10cd4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10cd4     08 4E 05 F1 | 	add	fp, #8
10cd8     A7 66 02 FB | 	rdlong	muldivb_, fp
10cdc     08 4E 85 F1 | 	sub	fp, #8
10ce0     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10ce4     1C 00 90 5D |  if_ne	jmp	#LR__1330
10ce8     08 4E 05 F1 | 	add	fp, #8
10cec     A7 38 68 FC | 	wrlong	#28, fp
10cf0     08 4E 85 F1 | 	sub	fp, #8
10cf4     A7 12 02 FB | 	rdlong	arg01, fp
10cf8     00 14 06 F6 | 	mov	arg02, #0
10cfc     7C 08 B1 FD | 	call	#__system___float_tointeger
10d00     A7 FA 61 FC | 	wrlong	result1, fp
10d04                 | LR__1330
10d04                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10d04     14 4E 05 F1 | 	add	fp, #20
10d08     A7 66 02 FB | 	rdlong	muldivb_, fp
10d0c     14 4E 85 F1 | 	sub	fp, #20
10d10     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10d14     28 00 90 5D |  if_ne	jmp	#LR__1331
10d18     14 4E 05 F1 | 	add	fp, #20
10d1c     A7 38 68 FC | 	wrlong	#28, fp
10d20     08 4E 85 F1 | 	sub	fp, #8
10d24     A7 12 02 FB | 	rdlong	arg01, fp
10d28     0C 4E 85 F1 | 	sub	fp, #12
10d2c     00 14 06 F6 | 	mov	arg02, #0
10d30     48 08 B1 FD | 	call	#__system___float_tointeger
10d34     0C 4E 05 F1 | 	add	fp, #12
10d38     A7 FA 61 FC | 	wrlong	result1, fp
10d3c     0C 4E 85 F1 | 	sub	fp, #12
10d40                 | LR__1331
10d40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
10d40     08 4E 05 F1 | 	add	fp, #8
10d44     A7 66 02 FB | 	rdlong	muldivb_, fp
10d48     08 4E 85 F1 | 	sub	fp, #8
10d4c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10d50     14 4E 05 A1 |  if_e	add	fp, #20
10d54     A7 1E 02 AB |  if_e	rdlong	local01, fp
10d58     14 4E 85 A1 |  if_e	sub	fp, #20
10d5c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10d60     20 00 90 5D |  if_ne	jmp	#LR__1332
10d64     0C 4E 05 F1 | 	add	fp, #12
10d68     A7 1E 02 FB | 	rdlong	local01, fp
10d6c     0C 4E 85 F1 | 	sub	fp, #12
10d70     A7 66 02 FB | 	rdlong	muldivb_, fp
10d74     0F 67 12 FD | 	qdiv	muldivb_, local01
10d78     19 1E 62 FD | 	getqy	local01
10d7c     A7 1E 62 FC | 	wrlong	local01, fp
10d80     E0 00 90 FD | 	jmp	#LR__1336
10d84                 | LR__1332
10d84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
10d84     08 4E 05 F1 | 	add	fp, #8
10d88     A7 66 02 FB | 	rdlong	muldivb_, fp
10d8c     08 4E 85 F1 | 	sub	fp, #8
10d90     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10d94     14 4E 05 A1 |  if_e	add	fp, #20
10d98     A7 1E 02 AB |  if_e	rdlong	local01, fp
10d9c     14 4E 85 A1 |  if_e	sub	fp, #20
10da0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10da4     2C 00 90 5D |  if_ne	jmp	#LR__1333
10da8     0C 4E 05 F1 | 	add	fp, #12
10dac     A7 1E 02 FB | 	rdlong	local01, fp
10db0     0C 4E 85 F1 | 	sub	fp, #12
10db4     A7 66 02 FB | 	rdlong	muldivb_, fp
10db8     0F 67 12 FD | 	qdiv	muldivb_, local01
10dbc     19 1E 62 FD | 	getqy	local01
10dc0     A7 1E 62 FC | 	wrlong	local01, fp
10dc4     08 4E 05 F1 | 	add	fp, #8
10dc8     A7 38 68 FC | 	wrlong	#28, fp
10dcc     08 4E 85 F1 | 	sub	fp, #8
10dd0     90 00 90 FD | 	jmp	#LR__1336
10dd4                 | LR__1333
10dd4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
10dd4     08 4E 05 F1 | 	add	fp, #8
10dd8     A7 66 02 FB | 	rdlong	muldivb_, fp
10ddc     08 4E 85 F1 | 	sub	fp, #8
10de0     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10de4     14 4E 05 A1 |  if_e	add	fp, #20
10de8     A7 1E 02 AB |  if_e	rdlong	local01, fp
10dec     14 4E 85 A1 |  if_e	sub	fp, #20
10df0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10df4     1C 00 90 5D |  if_ne	jmp	#LR__1334
10df8     A7 64 02 FB | 	rdlong	muldiva_, fp
10dfc     0C 4E 05 F1 | 	add	fp, #12
10e00     A7 66 02 FB | 	rdlong	muldivb_, fp
10e04     0C 4E 85 F1 | 	sub	fp, #12
10e08     BA 00 A0 FD | 	call	#divide_
10e0c     A7 64 62 FC | 	wrlong	muldiva_, fp
10e10     50 00 90 FD | 	jmp	#LR__1336
10e14                 | LR__1334
10e14                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
10e14     08 4E 05 F1 | 	add	fp, #8
10e18     A7 66 02 FB | 	rdlong	muldivb_, fp
10e1c     08 4E 85 F1 | 	sub	fp, #8
10e20     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10e24     14 4E 05 A1 |  if_e	add	fp, #20
10e28     A7 1E 02 AB |  if_e	rdlong	local01, fp
10e2c     14 4E 85 A1 |  if_e	sub	fp, #20
10e30     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10e34     1C 00 90 5D |  if_ne	jmp	#LR__1335
10e38     A7 64 02 FB | 	rdlong	muldiva_, fp
10e3c     0C 4E 05 F1 | 	add	fp, #12
10e40     A7 66 02 FB | 	rdlong	muldivb_, fp
10e44     0C 4E 85 F1 | 	sub	fp, #12
10e48     BA 00 A0 FD | 	call	#divide_
10e4c     A7 64 62 FC | 	wrlong	muldiva_, fp
10e50     10 00 90 FD | 	jmp	#LR__1336
10e54                 | LR__1335
10e54     A7 16 68 FC | 	wrlong	#11, fp
10e58     08 4E 05 F1 | 	add	fp, #8
10e5c     A7 FE 69 FC | 	wrlong	#255, fp
10e60     08 4E 85 F1 | 	sub	fp, #8
10e64                 | LR__1336
10e64     A7 12 02 F6 | 	mov	arg01, fp
10e68     D0 96 BF FD | 	call	#_push
10e6c     A7 F0 03 F6 | 	mov	ptra, fp
10e70     B2 00 A0 FD | 	call	#popregs_
10e74                 | _do_mod_ret
10e74     2D 00 64 FD | 	ret
10e78                 | 
10e78                 | ' 
10e78                 | ' sub do_shl 
10e78                 | _do_shl
10e78     03 4A 05 F6 | 	mov	COUNT_, #3
10e7c     A8 00 A0 FD | 	call	#pushregs_
10e80     18 F0 07 F1 | 	add	ptra, #24
10e84     1C 96 BF FD | 	call	#_pop
10e88     FD 12 02 F6 | 	mov	arg01, result1
10e8c     FE 1E 02 F6 | 	mov	local01, result2
10e90     FF 20 02 F6 | 	mov	local02, result3
10e94     0C 4E 05 F1 | 	add	fp, #12
10e98     A7 12 62 FC | 	wrlong	arg01, fp
10e9c     04 4E 05 F1 | 	add	fp, #4
10ea0     A7 1E 62 FC | 	wrlong	local01, fp
10ea4     04 4E 05 F1 | 	add	fp, #4
10ea8     A7 20 62 FC | 	wrlong	local02, fp
10eac     14 4E 85 F1 | 	sub	fp, #20
10eb0     F0 95 BF FD | 	call	#_pop
10eb4     FF 22 02 F6 | 	mov	local03, result3
10eb8     A7 FA 61 FC | 	wrlong	result1, fp
10ebc     04 4E 05 F1 | 	add	fp, #4
10ec0     A7 FC 61 FC | 	wrlong	result2, fp
10ec4     04 4E 05 F1 | 	add	fp, #4
10ec8     A7 22 62 FC | 	wrlong	local03, fp
10ecc                 | ' 
10ecc                 | ' t2=pop()
10ecc                 | ' t1=pop()
10ecc                 | ' 
10ecc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10ecc     08 4E 85 F1 | 	sub	fp, #8
10ed0     1C 22 0E F2 | 	cmp	local03, #28 wz
10ed4     A7 22 02 AB |  if_e	rdlong	local03, fp
10ed8     A7 22 62 AC |  if_e	wrlong	local03, fp
10edc     08 4E 05 A1 |  if_e	add	fp, #8
10ee0     A7 3A 68 AC |  if_e	wrlong	#29, fp
10ee4     08 4E 85 A1 |  if_e	sub	fp, #8
10ee8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10ee8     14 4E 05 F1 | 	add	fp, #20
10eec     A7 22 02 FB | 	rdlong	local03, fp
10ef0     14 4E 85 F1 | 	sub	fp, #20
10ef4     1C 22 0E F2 | 	cmp	local03, #28 wz
10ef8     18 00 90 5D |  if_ne	jmp	#LR__1340
10efc     0C 4E 05 F1 | 	add	fp, #12
10f00     A7 22 02 FB | 	rdlong	local03, fp
10f04     A7 22 62 FC | 	wrlong	local03, fp
10f08     08 4E 05 F1 | 	add	fp, #8
10f0c     A7 3A 68 FC | 	wrlong	#29, fp
10f10     14 4E 85 F1 | 	sub	fp, #20
10f14                 | LR__1340
10f14                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
10f14     08 4E 05 F1 | 	add	fp, #8
10f18     A7 22 02 FB | 	rdlong	local03, fp
10f1c     08 4E 85 F1 | 	sub	fp, #8
10f20     1F 22 0E F2 | 	cmp	local03, #31 wz
10f24     14 4E 05 51 |  if_ne	add	fp, #20
10f28     A7 20 02 5B |  if_ne	rdlong	local02, fp
10f2c     14 4E 85 51 |  if_ne	sub	fp, #20
10f30     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10f34     08 4E 05 51 |  if_ne	add	fp, #8
10f38     A7 22 02 5B |  if_ne	rdlong	local03, fp
10f3c     08 4E 85 51 |  if_ne	sub	fp, #8
10f40     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10f44     14 4E 05 51 |  if_ne	add	fp, #20
10f48     14 4E 85 51 |  if_ne	sub	fp, #20
10f4c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10f50     A7 0C 68 AC |  if_e	wrlong	#6, fp
10f54     08 4E 05 A1 |  if_e	add	fp, #8
10f58     A7 FE 69 AC |  if_e	wrlong	#255, fp
10f5c     08 4E 85 A1 |  if_e	sub	fp, #8
10f60     18 00 90 AD |  if_e	jmp	#LR__1341
10f64     A7 22 02 FB | 	rdlong	local03, fp
10f68     0C 4E 05 F1 | 	add	fp, #12
10f6c     A7 1E 02 FB | 	rdlong	local01, fp
10f70     0C 4E 85 F1 | 	sub	fp, #12
10f74     0F 23 62 F0 | 	shl	local03, local01
10f78     A7 22 62 FC | 	wrlong	local03, fp
10f7c                 | LR__1341
10f7c     A7 12 02 F6 | 	mov	arg01, fp
10f80     B8 95 BF FD | 	call	#_push
10f84     A7 F0 03 F6 | 	mov	ptra, fp
10f88     B2 00 A0 FD | 	call	#popregs_
10f8c                 | _do_shl_ret
10f8c     2D 00 64 FD | 	ret
10f90                 | 
10f90                 | ' 
10f90                 | ' sub do_shr 
10f90                 | _do_shr
10f90     03 4A 05 F6 | 	mov	COUNT_, #3
10f94     A8 00 A0 FD | 	call	#pushregs_
10f98     18 F0 07 F1 | 	add	ptra, #24
10f9c     04 95 BF FD | 	call	#_pop
10fa0     FD 12 02 F6 | 	mov	arg01, result1
10fa4     FE 1E 02 F6 | 	mov	local01, result2
10fa8     FF 20 02 F6 | 	mov	local02, result3
10fac     0C 4E 05 F1 | 	add	fp, #12
10fb0     A7 12 62 FC | 	wrlong	arg01, fp
10fb4     04 4E 05 F1 | 	add	fp, #4
10fb8     A7 1E 62 FC | 	wrlong	local01, fp
10fbc     04 4E 05 F1 | 	add	fp, #4
10fc0     A7 20 62 FC | 	wrlong	local02, fp
10fc4     14 4E 85 F1 | 	sub	fp, #20
10fc8     D8 94 BF FD | 	call	#_pop
10fcc     FF 22 02 F6 | 	mov	local03, result3
10fd0     A7 FA 61 FC | 	wrlong	result1, fp
10fd4     04 4E 05 F1 | 	add	fp, #4
10fd8     A7 FC 61 FC | 	wrlong	result2, fp
10fdc     04 4E 05 F1 | 	add	fp, #4
10fe0     A7 22 62 FC | 	wrlong	local03, fp
10fe4                 | ' t2=pop()
10fe4                 | ' t1=pop()
10fe4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10fe4     08 4E 85 F1 | 	sub	fp, #8
10fe8     1C 22 0E F2 | 	cmp	local03, #28 wz
10fec     A7 22 02 AB |  if_e	rdlong	local03, fp
10ff0     A7 22 62 AC |  if_e	wrlong	local03, fp
10ff4     08 4E 05 A1 |  if_e	add	fp, #8
10ff8     A7 3A 68 AC |  if_e	wrlong	#29, fp
10ffc     08 4E 85 A1 |  if_e	sub	fp, #8
11000                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11000     14 4E 05 F1 | 	add	fp, #20
11004     A7 22 02 FB | 	rdlong	local03, fp
11008     14 4E 85 F1 | 	sub	fp, #20
1100c     1C 22 0E F2 | 	cmp	local03, #28 wz
11010     18 00 90 5D |  if_ne	jmp	#LR__1350
11014     0C 4E 05 F1 | 	add	fp, #12
11018     A7 22 02 FB | 	rdlong	local03, fp
1101c     A7 22 62 FC | 	wrlong	local03, fp
11020     08 4E 05 F1 | 	add	fp, #8
11024     A7 3A 68 FC | 	wrlong	#29, fp
11028     14 4E 85 F1 | 	sub	fp, #20
1102c                 | LR__1350
1102c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1102c     08 4E 05 F1 | 	add	fp, #8
11030     A7 22 02 FB | 	rdlong	local03, fp
11034     08 4E 85 F1 | 	sub	fp, #8
11038     1F 22 0E F2 | 	cmp	local03, #31 wz
1103c     14 4E 05 51 |  if_ne	add	fp, #20
11040     A7 20 02 5B |  if_ne	rdlong	local02, fp
11044     14 4E 85 51 |  if_ne	sub	fp, #20
11048     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1104c     08 4E 05 51 |  if_ne	add	fp, #8
11050     A7 22 02 5B |  if_ne	rdlong	local03, fp
11054     08 4E 85 51 |  if_ne	sub	fp, #8
11058     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1105c     14 4E 05 51 |  if_ne	add	fp, #20
11060     14 4E 85 51 |  if_ne	sub	fp, #20
11064     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
11068     A7 0C 68 AC |  if_e	wrlong	#6, fp
1106c     08 4E 05 A1 |  if_e	add	fp, #8
11070     A7 FE 69 AC |  if_e	wrlong	#255, fp
11074     08 4E 85 A1 |  if_e	sub	fp, #8
11078     18 00 90 AD |  if_e	jmp	#LR__1351
1107c     A7 22 02 FB | 	rdlong	local03, fp
11080     0C 4E 05 F1 | 	add	fp, #12
11084     A7 1E 02 FB | 	rdlong	local01, fp
11088     0C 4E 85 F1 | 	sub	fp, #12
1108c     0F 23 42 F0 | 	shr	local03, local01
11090     A7 22 62 FC | 	wrlong	local03, fp
11094                 | LR__1351
11094     A7 12 02 F6 | 	mov	arg01, fp
11098     A0 94 BF FD | 	call	#_push
1109c     A7 F0 03 F6 | 	mov	ptra, fp
110a0     B2 00 A0 FD | 	call	#popregs_
110a4                 | _do_shr_ret
110a4     2D 00 64 FD | 	ret
110a8                 | 
110a8                 | ' 
110a8                 | ' sub do_power 
110a8                 | _do_power
110a8     02 4A 05 F6 | 	mov	COUNT_, #2
110ac     A8 00 A0 FD | 	call	#pushregs_
110b0     18 F0 07 F1 | 	add	ptra, #24
110b4     EC 93 BF FD | 	call	#_pop
110b8     FD 14 02 F6 | 	mov	arg02, result1
110bc     FE 12 02 F6 | 	mov	arg01, result2
110c0     FF 1E 02 F6 | 	mov	local01, result3
110c4     0C 4E 05 F1 | 	add	fp, #12
110c8     A7 14 62 FC | 	wrlong	arg02, fp
110cc     04 4E 05 F1 | 	add	fp, #4
110d0     A7 12 62 FC | 	wrlong	arg01, fp
110d4     04 4E 05 F1 | 	add	fp, #4
110d8     A7 1E 62 FC | 	wrlong	local01, fp
110dc     14 4E 85 F1 | 	sub	fp, #20
110e0     C0 93 BF FD | 	call	#_pop
110e4     A7 FA 61 FC | 	wrlong	result1, fp
110e8     04 4E 05 F1 | 	add	fp, #4
110ec     A7 FC 61 FC | 	wrlong	result2, fp
110f0     04 4E 05 F1 | 	add	fp, #4
110f4     A7 FE 61 FC | 	wrlong	result3, fp
110f8                 | ' t2=pop()
110f8                 | ' t1=pop()
110f8                 | ' 
110f8                 | ' 
110f8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
110f8     08 4E 85 F1 | 	sub	fp, #8
110fc     1F FE 0D F2 | 	cmp	result3, #31 wz
11100     14 4E 05 51 |  if_ne	add	fp, #20
11104     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11108     14 4E 85 51 |  if_ne	sub	fp, #20
1110c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
11110     A7 18 68 AC |  if_e	wrlong	#12, fp
11114     08 4E 05 A1 |  if_e	add	fp, #8
11118     A7 FE 69 AC |  if_e	wrlong	#255, fp
1111c     08 4E 85 A1 |  if_e	sub	fp, #8
11120     38 01 90 AD |  if_e	jmp	#LR__1365
11124                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
11124     08 4E 05 F1 | 	add	fp, #8
11128     A7 14 02 FB | 	rdlong	arg02, fp
1112c     08 4E 85 F1 | 	sub	fp, #8
11130     1C 14 0E F2 | 	cmp	arg02, #28 wz
11134     28 00 90 5D |  if_ne	jmp	#LR__1360
11138     08 4E 05 F1 | 	add	fp, #8
1113c     A7 3C 68 FC | 	wrlong	#30, fp
11140     08 4E 85 F1 | 	sub	fp, #8
11144     A7 12 02 FB | 	rdlong	arg01, fp
11148     09 13 52 F6 | 	abs	arg01, arg01 wc
1114c     1F 20 C6 C9 |  if_b	decod	local02, #31
11150     00 20 06 36 |  if_ae	mov	local02, #0
11154     58 FB B0 FD | 	call	#__system___float_fromuns
11158     10 FB 61 F5 | 	xor	result1, local02
1115c     A7 FA 61 FC | 	wrlong	result1, fp
11160                 | LR__1360
11160                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
11160     08 4E 05 F1 | 	add	fp, #8
11164     A7 14 02 FB | 	rdlong	arg02, fp
11168     08 4E 85 F1 | 	sub	fp, #8
1116c     1D 14 0E F2 | 	cmp	arg02, #29 wz
11170     18 00 90 5D |  if_ne	jmp	#LR__1361
11174     08 4E 05 F1 | 	add	fp, #8
11178     A7 3C 68 FC | 	wrlong	#30, fp
1117c     08 4E 85 F1 | 	sub	fp, #8
11180     A7 12 02 FB | 	rdlong	arg01, fp
11184     28 FB B0 FD | 	call	#__system___float_fromuns
11188     A7 FA 61 FC | 	wrlong	result1, fp
1118c                 | LR__1361
1118c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1118c     14 4E 05 F1 | 	add	fp, #20
11190     A7 14 02 FB | 	rdlong	arg02, fp
11194     14 4E 85 F1 | 	sub	fp, #20
11198     1C 14 0E F2 | 	cmp	arg02, #28 wz
1119c     34 00 90 5D |  if_ne	jmp	#LR__1362
111a0     14 4E 05 F1 | 	add	fp, #20
111a4     A7 3C 68 FC | 	wrlong	#30, fp
111a8     08 4E 85 F1 | 	sub	fp, #8
111ac     A7 12 02 FB | 	rdlong	arg01, fp
111b0     0C 4E 85 F1 | 	sub	fp, #12
111b4     09 13 52 F6 | 	abs	arg01, arg01 wc
111b8     1F 20 C6 C9 |  if_b	decod	local02, #31
111bc     00 20 06 36 |  if_ae	mov	local02, #0
111c0     EC FA B0 FD | 	call	#__system___float_fromuns
111c4     10 FB 61 F5 | 	xor	result1, local02
111c8     0C 4E 05 F1 | 	add	fp, #12
111cc     A7 FA 61 FC | 	wrlong	result1, fp
111d0     0C 4E 85 F1 | 	sub	fp, #12
111d4                 | LR__1362
111d4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
111d4     14 4E 05 F1 | 	add	fp, #20
111d8     A7 14 02 FB | 	rdlong	arg02, fp
111dc     14 4E 85 F1 | 	sub	fp, #20
111e0     1D 14 0E F2 | 	cmp	arg02, #29 wz
111e4     24 00 90 5D |  if_ne	jmp	#LR__1363
111e8     14 4E 05 F1 | 	add	fp, #20
111ec     A7 3C 68 FC | 	wrlong	#30, fp
111f0     08 4E 85 F1 | 	sub	fp, #8
111f4     A7 12 02 FB | 	rdlong	arg01, fp
111f8     0C 4E 85 F1 | 	sub	fp, #12
111fc     B0 FA B0 FD | 	call	#__system___float_fromuns
11200     0C 4E 05 F1 | 	add	fp, #12
11204     A7 FA 61 FC | 	wrlong	result1, fp
11208     0C 4E 85 F1 | 	sub	fp, #12
1120c                 | LR__1363
1120c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1120c     08 4E 05 F1 | 	add	fp, #8
11210     A7 14 02 FB | 	rdlong	arg02, fp
11214     08 4E 85 F1 | 	sub	fp, #8
11218     1E 14 0E F2 | 	cmp	arg02, #30 wz
1121c     14 4E 05 A1 |  if_e	add	fp, #20
11220     A7 1E 02 AB |  if_e	rdlong	local01, fp
11224     14 4E 85 A1 |  if_e	sub	fp, #20
11228     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1122c     1C 00 90 5D |  if_ne	jmp	#LR__1364
11230     A7 12 02 FB | 	rdlong	arg01, fp
11234     0C 4E 05 F1 | 	add	fp, #12
11238     A7 14 02 FB | 	rdlong	arg02, fp
1123c     0C 4E 85 F1 | 	sub	fp, #12
11240     54 0D B1 FD | 	call	#__system____builtin_powf
11244     A7 FA 61 FC | 	wrlong	result1, fp
11248     10 00 90 FD | 	jmp	#LR__1365
1124c                 | LR__1364
1124c     A7 1A 68 FC | 	wrlong	#13, fp
11250     08 4E 05 F1 | 	add	fp, #8
11254     A7 FE 69 FC | 	wrlong	#255, fp
11258     08 4E 85 F1 | 	sub	fp, #8
1125c                 | LR__1365
1125c     A7 12 02 F6 | 	mov	arg01, fp
11260     D8 92 BF FD | 	call	#_push
11264     A7 F0 03 F6 | 	mov	ptra, fp
11268     B2 00 A0 FD | 	call	#popregs_
1126c                 | _do_power_ret
1126c     2D 00 64 FD | 	ret
11270                 | 
11270                 | ' 
11270                 | ' 
11270                 | ' sub do_eq
11270                 | _do_eq
11270     05 4A 05 F6 | 	mov	COUNT_, #5
11274     A8 00 A0 FD | 	call	#pushregs_
11278     18 F0 07 F1 | 	add	ptra, #24
1127c     24 92 BF FD | 	call	#_pop
11280     FD 1E 02 F6 | 	mov	local01, result1
11284     FE 20 02 F6 | 	mov	local02, result2
11288     FF 22 02 F6 | 	mov	local03, result3
1128c     0C 4E 05 F1 | 	add	fp, #12
11290     A7 1E 62 FC | 	wrlong	local01, fp
11294     04 4E 05 F1 | 	add	fp, #4
11298     A7 20 62 FC | 	wrlong	local02, fp
1129c     04 4E 05 F1 | 	add	fp, #4
112a0     A7 22 62 FC | 	wrlong	local03, fp
112a4     14 4E 85 F1 | 	sub	fp, #20
112a8     F8 91 BF FD | 	call	#_pop
112ac     FF 22 02 F6 | 	mov	local03, result3
112b0     A7 FA 61 FC | 	wrlong	result1, fp
112b4     04 4E 05 F1 | 	add	fp, #4
112b8     A7 FC 61 FC | 	wrlong	result2, fp
112bc     04 4E 05 F1 | 	add	fp, #4
112c0     A7 22 62 FC | 	wrlong	local03, fp
112c4                 | ' t2=pop()
112c4                 | ' t1=pop()
112c4                 | ' 
112c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
112c4     08 4E 85 F1 | 	sub	fp, #8
112c8     1F 22 0E F2 | 	cmp	local03, #31 wz
112cc     14 4E 05 A1 |  if_e	add	fp, #20
112d0     A7 24 02 AB |  if_e	rdlong	local04, fp
112d4     14 4E 85 A1 |  if_e	sub	fp, #20
112d8     12 23 02 A6 |  if_e	mov	local03, local04
112dc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
112e0     28 00 90 5D |  if_ne	jmp	#LR__1370
112e4     00 1E 06 F6 | 	mov	local01, #0
112e8     A7 12 02 FB | 	rdlong	arg01, fp
112ec     0C 4E 05 F1 | 	add	fp, #12
112f0     A7 14 02 FB | 	rdlong	arg02, fp
112f4     0C 4E 85 F1 | 	sub	fp, #12
112f8     64 D2 B0 FD | 	call	#__system___string_cmp
112fc     00 FA 0D F2 | 	cmp	result1, #0 wz
11300     00 1E 26 A6 |  if_e	not	local01, #0
11304     A7 1E 62 FC | 	wrlong	local01, fp
11308     1C 04 90 FD | 	jmp	#LR__1383
1130c                 | LR__1370
1130c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1130c     08 4E 05 F1 | 	add	fp, #8
11310     A7 1E 02 FB | 	rdlong	local01, fp
11314     08 4E 85 F1 | 	sub	fp, #8
11318     1E 1E 0E F2 | 	cmp	local01, #30 wz
1131c     14 4E 05 A1 |  if_e	add	fp, #20
11320     A7 24 02 AB |  if_e	rdlong	local04, fp
11324     14 4E 85 A1 |  if_e	sub	fp, #20
11328     12 23 02 A6 |  if_e	mov	local03, local04
1132c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11330     2C 00 90 5D |  if_ne	jmp	#LR__1371
11334     00 1E 06 F6 | 	mov	local01, #0
11338     A7 12 02 FB | 	rdlong	arg01, fp
1133c     0C 4E 05 F1 | 	add	fp, #12
11340     A7 14 02 FB | 	rdlong	arg02, fp
11344     0C 4E 85 F1 | 	sub	fp, #12
11348     01 16 06 F6 | 	mov	arg03, #1
1134c     98 01 B1 FD | 	call	#__system___float_cmp
11350     00 FA 0D F2 | 	cmp	result1, #0 wz
11354     00 1E 26 A6 |  if_e	not	local01, #0
11358     A7 1E 62 FC | 	wrlong	local01, fp
1135c     C8 03 90 FD | 	jmp	#LR__1383
11360                 | LR__1371
11360                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
11360     08 4E 05 F1 | 	add	fp, #8
11364     A7 1E 02 FB | 	rdlong	local01, fp
11368     08 4E 85 F1 | 	sub	fp, #8
1136c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11370     14 4E 05 A1 |  if_e	add	fp, #20
11374     A7 24 02 AB |  if_e	rdlong	local04, fp
11378     14 4E 85 A1 |  if_e	sub	fp, #20
1137c     12 23 02 A6 |  if_e	mov	local03, local04
11380     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11384     48 00 90 5D |  if_ne	jmp	#LR__1372
11388     00 1E 06 F6 | 	mov	local01, #0
1138c     A7 20 02 FB | 	rdlong	local02, fp
11390     0C 4E 05 F1 | 	add	fp, #12
11394     A7 12 02 FB | 	rdlong	arg01, fp
11398     0C 4E 85 F1 | 	sub	fp, #12
1139c     09 13 52 F6 | 	abs	arg01, arg01 wc
113a0     1F 26 C6 C9 |  if_b	decod	local05, #31
113a4     00 26 06 36 |  if_ae	mov	local05, #0
113a8     04 F9 B0 FD | 	call	#__system___float_fromuns
113ac     13 FB 61 F5 | 	xor	result1, local05
113b0     FD 14 02 F6 | 	mov	arg02, result1
113b4     10 13 02 F6 | 	mov	arg01, local02
113b8     01 16 06 F6 | 	mov	arg03, #1
113bc     28 01 B1 FD | 	call	#__system___float_cmp
113c0     00 FA 0D F2 | 	cmp	result1, #0 wz
113c4     00 1E 26 A6 |  if_e	not	local01, #0
113c8     A7 1E 62 FC | 	wrlong	local01, fp
113cc     58 03 90 FD | 	jmp	#LR__1383
113d0                 | LR__1372
113d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
113d0     08 4E 05 F1 | 	add	fp, #8
113d4     A7 1E 02 FB | 	rdlong	local01, fp
113d8     08 4E 85 F1 | 	sub	fp, #8
113dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
113e0     14 4E 05 A1 |  if_e	add	fp, #20
113e4     A7 24 02 AB |  if_e	rdlong	local04, fp
113e8     14 4E 85 A1 |  if_e	sub	fp, #20
113ec     12 23 02 A6 |  if_e	mov	local03, local04
113f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
113f4     38 00 90 5D |  if_ne	jmp	#LR__1373
113f8     00 1E 06 F6 | 	mov	local01, #0
113fc     A7 20 02 FB | 	rdlong	local02, fp
11400     0C 4E 05 F1 | 	add	fp, #12
11404     A7 12 02 FB | 	rdlong	arg01, fp
11408     0C 4E 85 F1 | 	sub	fp, #12
1140c     A0 F8 B0 FD | 	call	#__system___float_fromuns
11410     FD 14 02 F6 | 	mov	arg02, result1
11414     10 13 02 F6 | 	mov	arg01, local02
11418     01 16 06 F6 | 	mov	arg03, #1
1141c     C8 00 B1 FD | 	call	#__system___float_cmp
11420     00 FA 0D F2 | 	cmp	result1, #0 wz
11424     00 1E 26 A6 |  if_e	not	local01, #0
11428     A7 1E 62 FC | 	wrlong	local01, fp
1142c     F8 02 90 FD | 	jmp	#LR__1383
11430                 | LR__1373
11430                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
11430     08 4E 05 F1 | 	add	fp, #8
11434     A7 1E 02 FB | 	rdlong	local01, fp
11438     08 4E 85 F1 | 	sub	fp, #8
1143c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11440     14 4E 05 A1 |  if_e	add	fp, #20
11444     A7 24 02 AB |  if_e	rdlong	local04, fp
11448     14 4E 85 A1 |  if_e	sub	fp, #20
1144c     12 23 02 A6 |  if_e	mov	local03, local04
11450     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11454     44 00 90 5D |  if_ne	jmp	#LR__1374
11458     00 1E 06 F6 | 	mov	local01, #0
1145c     A7 12 02 FB | 	rdlong	arg01, fp
11460     09 13 52 F6 | 	abs	arg01, arg01 wc
11464     1F 26 C6 C9 |  if_b	decod	local05, #31
11468     00 26 06 36 |  if_ae	mov	local05, #0
1146c     40 F8 B0 FD | 	call	#__system___float_fromuns
11470     13 FB 61 F5 | 	xor	result1, local05
11474     FD 12 02 F6 | 	mov	arg01, result1
11478     0C 4E 05 F1 | 	add	fp, #12
1147c     A7 14 02 FB | 	rdlong	arg02, fp
11480     0C 4E 85 F1 | 	sub	fp, #12
11484     01 16 06 F6 | 	mov	arg03, #1
11488     5C 00 B1 FD | 	call	#__system___float_cmp
1148c     00 FA 0D F2 | 	cmp	result1, #0 wz
11490     00 1E 26 A6 |  if_e	not	local01, #0
11494     A7 1E 62 FC | 	wrlong	local01, fp
11498     8C 02 90 FD | 	jmp	#LR__1383
1149c                 | LR__1374
1149c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1149c     08 4E 05 F1 | 	add	fp, #8
114a0     A7 1E 02 FB | 	rdlong	local01, fp
114a4     08 4E 85 F1 | 	sub	fp, #8
114a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
114ac     14 4E 05 A1 |  if_e	add	fp, #20
114b0     A7 24 02 AB |  if_e	rdlong	local04, fp
114b4     14 4E 85 A1 |  if_e	sub	fp, #20
114b8     12 23 02 A6 |  if_e	mov	local03, local04
114bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
114c0     24 00 90 5D |  if_ne	jmp	#LR__1375
114c4     00 1E 06 F6 | 	mov	local01, #0
114c8     A7 20 02 FB | 	rdlong	local02, fp
114cc     0C 4E 05 F1 | 	add	fp, #12
114d0     A7 22 02 FB | 	rdlong	local03, fp
114d4     0C 4E 85 F1 | 	sub	fp, #12
114d8     11 21 0A F2 | 	cmp	local02, local03 wz
114dc     01 1E 66 A6 |  if_e	neg	local01, #1
114e0     A7 1E 62 FC | 	wrlong	local01, fp
114e4     40 02 90 FD | 	jmp	#LR__1383
114e8                 | LR__1375
114e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
114e8     08 4E 05 F1 | 	add	fp, #8
114ec     A7 1E 02 FB | 	rdlong	local01, fp
114f0     08 4E 85 F1 | 	sub	fp, #8
114f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
114f8     14 4E 05 A1 |  if_e	add	fp, #20
114fc     A7 24 02 AB |  if_e	rdlong	local04, fp
11500     14 4E 85 A1 |  if_e	sub	fp, #20
11504     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11508     24 00 90 5D |  if_ne	jmp	#LR__1376
1150c     00 1E 06 F6 | 	mov	local01, #0
11510     A7 20 02 FB | 	rdlong	local02, fp
11514     0C 4E 05 F1 | 	add	fp, #12
11518     A7 22 02 FB | 	rdlong	local03, fp
1151c     0C 4E 85 F1 | 	sub	fp, #12
11520     11 21 0A F2 | 	cmp	local02, local03 wz
11524     01 1E 66 A6 |  if_e	neg	local01, #1
11528     A7 1E 62 FC | 	wrlong	local01, fp
1152c     F8 01 90 FD | 	jmp	#LR__1383
11530                 | LR__1376
11530                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11530     08 4E 05 F1 | 	add	fp, #8
11534     A7 1E 02 FB | 	rdlong	local01, fp
11538     08 4E 85 F1 | 	sub	fp, #8
1153c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11540     14 4E 05 A1 |  if_e	add	fp, #20
11544     A7 22 02 AB |  if_e	rdlong	local03, fp
11548     14 4E 85 A1 |  if_e	sub	fp, #20
1154c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11550     34 00 90 5D |  if_ne	jmp	#LR__1377
11554     00 1E 06 F6 | 	mov	local01, #0
11558     A7 12 02 FB | 	rdlong	arg01, fp
1155c     50 F7 B0 FD | 	call	#__system___float_fromuns
11560     FD 12 02 F6 | 	mov	arg01, result1
11564     0C 4E 05 F1 | 	add	fp, #12
11568     A7 14 02 FB | 	rdlong	arg02, fp
1156c     0C 4E 85 F1 | 	sub	fp, #12
11570     01 16 06 F6 | 	mov	arg03, #1
11574     70 FF B0 FD | 	call	#__system___float_cmp
11578     00 FA 0D F2 | 	cmp	result1, #0 wz
1157c     00 1E 26 A6 |  if_e	not	local01, #0
11580     A7 1E 62 FC | 	wrlong	local01, fp
11584     A0 01 90 FD | 	jmp	#LR__1383
11588                 | LR__1377
11588                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
11588     08 4E 05 F1 | 	add	fp, #8
1158c     A7 1E 02 FB | 	rdlong	local01, fp
11590     08 4E 85 F1 | 	sub	fp, #8
11594     1D 1E 0E F2 | 	cmp	local01, #29 wz
11598     14 4E 05 A1 |  if_e	add	fp, #20
1159c     A7 22 02 AB |  if_e	rdlong	local03, fp
115a0     14 4E 85 A1 |  if_e	sub	fp, #20
115a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
115a8     24 00 90 5D |  if_ne	jmp	#LR__1378
115ac     00 1E 06 F6 | 	mov	local01, #0
115b0     A7 20 02 FB | 	rdlong	local02, fp
115b4     0C 4E 05 F1 | 	add	fp, #12
115b8     A7 22 02 FB | 	rdlong	local03, fp
115bc     0C 4E 85 F1 | 	sub	fp, #12
115c0     11 21 0A F2 | 	cmp	local02, local03 wz
115c4     01 1E 66 A6 |  if_e	neg	local01, #1
115c8     A7 1E 62 FC | 	wrlong	local01, fp
115cc     58 01 90 FD | 	jmp	#LR__1383
115d0                 | LR__1378
115d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
115d0     08 4E 05 F1 | 	add	fp, #8
115d4     A7 1E 02 FB | 	rdlong	local01, fp
115d8     08 4E 85 F1 | 	sub	fp, #8
115dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
115e0     14 4E 05 A1 |  if_e	add	fp, #20
115e4     A7 22 02 AB |  if_e	rdlong	local03, fp
115e8     14 4E 85 A1 |  if_e	sub	fp, #20
115ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
115f0     24 00 90 5D |  if_ne	jmp	#LR__1379
115f4     00 1E 06 F6 | 	mov	local01, #0
115f8     A7 20 02 FB | 	rdlong	local02, fp
115fc     0C 4E 05 F1 | 	add	fp, #12
11600     A7 22 02 FB | 	rdlong	local03, fp
11604     0C 4E 85 F1 | 	sub	fp, #12
11608     11 21 0A F2 | 	cmp	local02, local03 wz
1160c     01 1E 66 A6 |  if_e	neg	local01, #1
11610     A7 1E 62 FC | 	wrlong	local01, fp
11614     10 01 90 FD | 	jmp	#LR__1383
11618                 | LR__1379
11618                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11618     08 4E 05 F1 | 	add	fp, #8
1161c     A7 1E 02 FB | 	rdlong	local01, fp
11620     08 4E 85 F1 | 	sub	fp, #8
11624     2B 1E 0E F2 | 	cmp	local01, #43 wz
11628     14 4E 05 A1 |  if_e	add	fp, #20
1162c     A7 22 02 AB |  if_e	rdlong	local03, fp
11630     14 4E 85 A1 |  if_e	sub	fp, #20
11634     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11638     30 00 90 5D |  if_ne	jmp	#LR__1380
1163c     00 1E 06 F6 | 	mov	local01, #0
11640     A7 12 02 FB | 	rdlong	arg01, fp
11644     04 D1 BF FD | 	call	#_convertstring
11648     FD 12 02 F6 | 	mov	arg01, result1
1164c     0C 4E 05 F1 | 	add	fp, #12
11650     A7 14 02 FB | 	rdlong	arg02, fp
11654     0C 4E 85 F1 | 	sub	fp, #12
11658     04 CF B0 FD | 	call	#__system___string_cmp
1165c     00 FA 0D F2 | 	cmp	result1, #0 wz
11660     00 1E 26 A6 |  if_e	not	local01, #0
11664     A7 1E 62 FC | 	wrlong	local01, fp
11668     BC 00 90 FD | 	jmp	#LR__1383
1166c                 | LR__1380
1166c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1166c     08 4E 05 F1 | 	add	fp, #8
11670     A7 1E 02 FB | 	rdlong	local01, fp
11674     08 4E 85 F1 | 	sub	fp, #8
11678     1F 1E 0E F2 | 	cmp	local01, #31 wz
1167c     14 4E 05 A1 |  if_e	add	fp, #20
11680     A7 22 02 AB |  if_e	rdlong	local03, fp
11684     14 4E 85 A1 |  if_e	sub	fp, #20
11688     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1168c     34 00 90 5D |  if_ne	jmp	#LR__1381
11690     00 1E 06 F6 | 	mov	local01, #0
11694     A7 20 02 FB | 	rdlong	local02, fp
11698     0C 4E 05 F1 | 	add	fp, #12
1169c     A7 12 02 FB | 	rdlong	arg01, fp
116a0     0C 4E 85 F1 | 	sub	fp, #12
116a4     A4 D0 BF FD | 	call	#_convertstring
116a8     FD 14 02 F6 | 	mov	arg02, result1
116ac     10 13 02 F6 | 	mov	arg01, local02
116b0     AC CE B0 FD | 	call	#__system___string_cmp
116b4     00 FA 0D F2 | 	cmp	result1, #0 wz
116b8     00 1E 26 A6 |  if_e	not	local01, #0
116bc     A7 1E 62 FC | 	wrlong	local01, fp
116c0     64 00 90 FD | 	jmp	#LR__1383
116c4                 | LR__1381
116c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
116c4     08 4E 05 F1 | 	add	fp, #8
116c8     A7 1E 02 FB | 	rdlong	local01, fp
116cc     08 4E 85 F1 | 	sub	fp, #8
116d0     2B 1E 0E F2 | 	cmp	local01, #43 wz
116d4     14 4E 05 A1 |  if_e	add	fp, #20
116d8     A7 22 02 AB |  if_e	rdlong	local03, fp
116dc     14 4E 85 A1 |  if_e	sub	fp, #20
116e0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
116e4     3C 00 90 5D |  if_ne	jmp	#LR__1382
116e8     00 1E 06 F6 | 	mov	local01, #0
116ec     A7 12 02 FB | 	rdlong	arg01, fp
116f0     58 D0 BF FD | 	call	#_convertstring
116f4     FD 20 02 F6 | 	mov	local02, result1
116f8     0C 4E 05 F1 | 	add	fp, #12
116fc     A7 12 02 FB | 	rdlong	arg01, fp
11700     0C 4E 85 F1 | 	sub	fp, #12
11704     44 D0 BF FD | 	call	#_convertstring
11708     FD 14 02 F6 | 	mov	arg02, result1
1170c     10 13 02 F6 | 	mov	arg01, local02
11710     4C CE B0 FD | 	call	#__system___string_cmp
11714     00 FA 0D F2 | 	cmp	result1, #0 wz
11718     00 1E 26 A6 |  if_e	not	local01, #0
1171c     A7 1E 62 FC | 	wrlong	local01, fp
11720     04 00 90 FD | 	jmp	#LR__1383
11724                 | LR__1382
11724     A7 00 68 FC | 	wrlong	#0, fp
11728                 | LR__1383
11728     08 4E 05 F1 | 	add	fp, #8
1172c     A7 38 68 FC | 	wrlong	#28, fp
11730     08 4E 85 F1 | 	sub	fp, #8
11734     A7 12 02 F6 | 	mov	arg01, fp
11738     00 8E BF FD | 	call	#_push
1173c     A7 F0 03 F6 | 	mov	ptra, fp
11740     B2 00 A0 FD | 	call	#popregs_
11744                 | _do_eq_ret
11744     2D 00 64 FD | 	ret
11748                 | 
11748                 | ' 
11748                 | ' sub do_gt
11748                 | _do_gt
11748     05 4A 05 F6 | 	mov	COUNT_, #5
1174c     A8 00 A0 FD | 	call	#pushregs_
11750     18 F0 07 F1 | 	add	ptra, #24
11754     4C 8D BF FD | 	call	#_pop
11758     FD 1E 02 F6 | 	mov	local01, result1
1175c     FE 20 02 F6 | 	mov	local02, result2
11760     FF 22 02 F6 | 	mov	local03, result3
11764     0C 4E 05 F1 | 	add	fp, #12
11768     A7 1E 62 FC | 	wrlong	local01, fp
1176c     04 4E 05 F1 | 	add	fp, #4
11770     A7 20 62 FC | 	wrlong	local02, fp
11774     04 4E 05 F1 | 	add	fp, #4
11778     A7 22 62 FC | 	wrlong	local03, fp
1177c     14 4E 85 F1 | 	sub	fp, #20
11780     20 8D BF FD | 	call	#_pop
11784     FF 22 02 F6 | 	mov	local03, result3
11788     A7 FA 61 FC | 	wrlong	result1, fp
1178c     04 4E 05 F1 | 	add	fp, #4
11790     A7 FC 61 FC | 	wrlong	result2, fp
11794     04 4E 05 F1 | 	add	fp, #4
11798     A7 22 62 FC | 	wrlong	local03, fp
1179c                 | ' t2=pop()
1179c                 | ' t1=pop()
1179c                 | ' 
1179c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1179c     08 4E 85 F1 | 	sub	fp, #8
117a0     1F 22 0E F2 | 	cmp	local03, #31 wz
117a4     14 4E 05 A1 |  if_e	add	fp, #20
117a8     A7 24 02 AB |  if_e	rdlong	local04, fp
117ac     14 4E 85 A1 |  if_e	sub	fp, #20
117b0     12 23 02 A6 |  if_e	mov	local03, local04
117b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
117b8     28 00 90 5D |  if_ne	jmp	#LR__1390
117bc     00 1E 06 F6 | 	mov	local01, #0
117c0     A7 12 02 FB | 	rdlong	arg01, fp
117c4     0C 4E 05 F1 | 	add	fp, #12
117c8     A7 14 02 FB | 	rdlong	arg02, fp
117cc     0C 4E 85 F1 | 	sub	fp, #12
117d0     8C CD B0 FD | 	call	#__system___string_cmp
117d4     01 FA 55 F2 | 	cmps	result1, #1 wc
117d8     00 1E 26 36 |  if_ae	not	local01, #0
117dc     A7 1E 62 FC | 	wrlong	local01, fp
117e0     1C 04 90 FD | 	jmp	#LR__1403
117e4                 | LR__1390
117e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
117e4     08 4E 05 F1 | 	add	fp, #8
117e8     A7 1E 02 FB | 	rdlong	local01, fp
117ec     08 4E 85 F1 | 	sub	fp, #8
117f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
117f4     14 4E 05 A1 |  if_e	add	fp, #20
117f8     A7 24 02 AB |  if_e	rdlong	local04, fp
117fc     14 4E 85 A1 |  if_e	sub	fp, #20
11800     12 23 02 A6 |  if_e	mov	local03, local04
11804     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11808     2C 00 90 5D |  if_ne	jmp	#LR__1391
1180c     00 1E 06 F6 | 	mov	local01, #0
11810     A7 12 02 FB | 	rdlong	arg01, fp
11814     0C 4E 05 F1 | 	add	fp, #12
11818     A7 14 02 FB | 	rdlong	arg02, fp
1181c     0C 4E 85 F1 | 	sub	fp, #12
11820     01 16 66 F6 | 	neg	arg03, #1
11824     C0 FC B0 FD | 	call	#__system___float_cmp
11828     01 FA 55 F2 | 	cmps	result1, #1 wc
1182c     00 1E 26 36 |  if_ae	not	local01, #0
11830     A7 1E 62 FC | 	wrlong	local01, fp
11834     C8 03 90 FD | 	jmp	#LR__1403
11838                 | LR__1391
11838                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11838     08 4E 05 F1 | 	add	fp, #8
1183c     A7 1E 02 FB | 	rdlong	local01, fp
11840     08 4E 85 F1 | 	sub	fp, #8
11844     1E 1E 0E F2 | 	cmp	local01, #30 wz
11848     14 4E 05 A1 |  if_e	add	fp, #20
1184c     A7 24 02 AB |  if_e	rdlong	local04, fp
11850     14 4E 85 A1 |  if_e	sub	fp, #20
11854     12 23 02 A6 |  if_e	mov	local03, local04
11858     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1185c     48 00 90 5D |  if_ne	jmp	#LR__1392
11860     00 1E 06 F6 | 	mov	local01, #0
11864     A7 20 02 FB | 	rdlong	local02, fp
11868     0C 4E 05 F1 | 	add	fp, #12
1186c     A7 12 02 FB | 	rdlong	arg01, fp
11870     0C 4E 85 F1 | 	sub	fp, #12
11874     09 13 52 F6 | 	abs	arg01, arg01 wc
11878     1F 26 C6 C9 |  if_b	decod	local05, #31
1187c     00 26 06 36 |  if_ae	mov	local05, #0
11880     2C F4 B0 FD | 	call	#__system___float_fromuns
11884     13 FB 61 F5 | 	xor	result1, local05
11888     FD 14 02 F6 | 	mov	arg02, result1
1188c     10 13 02 F6 | 	mov	arg01, local02
11890     01 16 66 F6 | 	neg	arg03, #1
11894     50 FC B0 FD | 	call	#__system___float_cmp
11898     01 FA 55 F2 | 	cmps	result1, #1 wc
1189c     00 1E 26 36 |  if_ae	not	local01, #0
118a0     A7 1E 62 FC | 	wrlong	local01, fp
118a4     58 03 90 FD | 	jmp	#LR__1403
118a8                 | LR__1392
118a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
118a8     08 4E 05 F1 | 	add	fp, #8
118ac     A7 1E 02 FB | 	rdlong	local01, fp
118b0     08 4E 85 F1 | 	sub	fp, #8
118b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
118b8     14 4E 05 A1 |  if_e	add	fp, #20
118bc     A7 24 02 AB |  if_e	rdlong	local04, fp
118c0     14 4E 85 A1 |  if_e	sub	fp, #20
118c4     12 23 02 A6 |  if_e	mov	local03, local04
118c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
118cc     38 00 90 5D |  if_ne	jmp	#LR__1393
118d0     00 1E 06 F6 | 	mov	local01, #0
118d4     A7 20 02 FB | 	rdlong	local02, fp
118d8     0C 4E 05 F1 | 	add	fp, #12
118dc     A7 12 02 FB | 	rdlong	arg01, fp
118e0     0C 4E 85 F1 | 	sub	fp, #12
118e4     C8 F3 B0 FD | 	call	#__system___float_fromuns
118e8     FD 14 02 F6 | 	mov	arg02, result1
118ec     10 13 02 F6 | 	mov	arg01, local02
118f0     01 16 66 F6 | 	neg	arg03, #1
118f4     F0 FB B0 FD | 	call	#__system___float_cmp
118f8     01 FA 55 F2 | 	cmps	result1, #1 wc
118fc     00 1E 26 36 |  if_ae	not	local01, #0
11900     A7 1E 62 FC | 	wrlong	local01, fp
11904     F8 02 90 FD | 	jmp	#LR__1403
11908                 | LR__1393
11908                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11908     08 4E 05 F1 | 	add	fp, #8
1190c     A7 1E 02 FB | 	rdlong	local01, fp
11910     08 4E 85 F1 | 	sub	fp, #8
11914     1C 1E 0E F2 | 	cmp	local01, #28 wz
11918     14 4E 05 A1 |  if_e	add	fp, #20
1191c     A7 24 02 AB |  if_e	rdlong	local04, fp
11920     14 4E 85 A1 |  if_e	sub	fp, #20
11924     12 23 02 A6 |  if_e	mov	local03, local04
11928     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1192c     44 00 90 5D |  if_ne	jmp	#LR__1394
11930     00 1E 06 F6 | 	mov	local01, #0
11934     A7 12 02 FB | 	rdlong	arg01, fp
11938     09 13 52 F6 | 	abs	arg01, arg01 wc
1193c     1F 26 C6 C9 |  if_b	decod	local05, #31
11940     00 26 06 36 |  if_ae	mov	local05, #0
11944     68 F3 B0 FD | 	call	#__system___float_fromuns
11948     13 FB 61 F5 | 	xor	result1, local05
1194c     FD 12 02 F6 | 	mov	arg01, result1
11950     0C 4E 05 F1 | 	add	fp, #12
11954     A7 14 02 FB | 	rdlong	arg02, fp
11958     0C 4E 85 F1 | 	sub	fp, #12
1195c     01 16 66 F6 | 	neg	arg03, #1
11960     84 FB B0 FD | 	call	#__system___float_cmp
11964     01 FA 55 F2 | 	cmps	result1, #1 wc
11968     00 1E 26 36 |  if_ae	not	local01, #0
1196c     A7 1E 62 FC | 	wrlong	local01, fp
11970     8C 02 90 FD | 	jmp	#LR__1403
11974                 | LR__1394
11974                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11974     08 4E 05 F1 | 	add	fp, #8
11978     A7 1E 02 FB | 	rdlong	local01, fp
1197c     08 4E 85 F1 | 	sub	fp, #8
11980     1C 1E 0E F2 | 	cmp	local01, #28 wz
11984     14 4E 05 A1 |  if_e	add	fp, #20
11988     A7 24 02 AB |  if_e	rdlong	local04, fp
1198c     14 4E 85 A1 |  if_e	sub	fp, #20
11990     12 23 02 A6 |  if_e	mov	local03, local04
11994     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11998     24 00 90 5D |  if_ne	jmp	#LR__1395
1199c     00 1E 06 F6 | 	mov	local01, #0
119a0     A7 20 02 FB | 	rdlong	local02, fp
119a4     0C 4E 05 F1 | 	add	fp, #12
119a8     A7 22 02 FB | 	rdlong	local03, fp
119ac     0C 4E 85 F1 | 	sub	fp, #12
119b0     11 21 5A F2 | 	cmps	local02, local03 wcz
119b4     01 1E 66 16 |  if_a	neg	local01, #1
119b8     A7 1E 62 FC | 	wrlong	local01, fp
119bc     40 02 90 FD | 	jmp	#LR__1403
119c0                 | LR__1395
119c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
119c0     08 4E 05 F1 | 	add	fp, #8
119c4     A7 1E 02 FB | 	rdlong	local01, fp
119c8     08 4E 85 F1 | 	sub	fp, #8
119cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
119d0     14 4E 05 A1 |  if_e	add	fp, #20
119d4     A7 24 02 AB |  if_e	rdlong	local04, fp
119d8     14 4E 85 A1 |  if_e	sub	fp, #20
119dc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
119e0     24 00 90 5D |  if_ne	jmp	#LR__1396
119e4     00 1E 06 F6 | 	mov	local01, #0
119e8     A7 20 02 FB | 	rdlong	local02, fp
119ec     0C 4E 05 F1 | 	add	fp, #12
119f0     A7 22 02 FB | 	rdlong	local03, fp
119f4     0C 4E 85 F1 | 	sub	fp, #12
119f8     11 21 5A F2 | 	cmps	local02, local03 wcz
119fc     01 1E 66 16 |  if_a	neg	local01, #1
11a00     A7 1E 62 FC | 	wrlong	local01, fp
11a04     F8 01 90 FD | 	jmp	#LR__1403
11a08                 | LR__1396
11a08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11a08     08 4E 05 F1 | 	add	fp, #8
11a0c     A7 1E 02 FB | 	rdlong	local01, fp
11a10     08 4E 85 F1 | 	sub	fp, #8
11a14     1D 1E 0E F2 | 	cmp	local01, #29 wz
11a18     14 4E 05 A1 |  if_e	add	fp, #20
11a1c     A7 22 02 AB |  if_e	rdlong	local03, fp
11a20     14 4E 85 A1 |  if_e	sub	fp, #20
11a24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11a28     34 00 90 5D |  if_ne	jmp	#LR__1397
11a2c     00 1E 06 F6 | 	mov	local01, #0
11a30     A7 12 02 FB | 	rdlong	arg01, fp
11a34     78 F2 B0 FD | 	call	#__system___float_fromuns
11a38     FD 12 02 F6 | 	mov	arg01, result1
11a3c     0C 4E 05 F1 | 	add	fp, #12
11a40     A7 14 02 FB | 	rdlong	arg02, fp
11a44     0C 4E 85 F1 | 	sub	fp, #12
11a48     01 16 66 F6 | 	neg	arg03, #1
11a4c     98 FA B0 FD | 	call	#__system___float_cmp
11a50     01 FA 55 F2 | 	cmps	result1, #1 wc
11a54     00 1E 26 36 |  if_ae	not	local01, #0
11a58     A7 1E 62 FC | 	wrlong	local01, fp
11a5c     A0 01 90 FD | 	jmp	#LR__1403
11a60                 | LR__1397
11a60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11a60     08 4E 05 F1 | 	add	fp, #8
11a64     A7 1E 02 FB | 	rdlong	local01, fp
11a68     08 4E 85 F1 | 	sub	fp, #8
11a6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11a70     14 4E 05 A1 |  if_e	add	fp, #20
11a74     A7 22 02 AB |  if_e	rdlong	local03, fp
11a78     14 4E 85 A1 |  if_e	sub	fp, #20
11a7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a80     24 00 90 5D |  if_ne	jmp	#LR__1398
11a84     00 1E 06 F6 | 	mov	local01, #0
11a88     A7 20 02 FB | 	rdlong	local02, fp
11a8c     0C 4E 05 F1 | 	add	fp, #12
11a90     A7 22 02 FB | 	rdlong	local03, fp
11a94     0C 4E 85 F1 | 	sub	fp, #12
11a98     11 21 5A F2 | 	cmps	local02, local03 wcz
11a9c     01 1E 66 16 |  if_a	neg	local01, #1
11aa0     A7 1E 62 FC | 	wrlong	local01, fp
11aa4     58 01 90 FD | 	jmp	#LR__1403
11aa8                 | LR__1398
11aa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
11aa8     08 4E 05 F1 | 	add	fp, #8
11aac     A7 1E 02 FB | 	rdlong	local01, fp
11ab0     08 4E 85 F1 | 	sub	fp, #8
11ab4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ab8     14 4E 05 A1 |  if_e	add	fp, #20
11abc     A7 22 02 AB |  if_e	rdlong	local03, fp
11ac0     14 4E 85 A1 |  if_e	sub	fp, #20
11ac4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11ac8     24 00 90 5D |  if_ne	jmp	#LR__1399
11acc     00 1E 06 F6 | 	mov	local01, #0
11ad0     A7 20 02 FB | 	rdlong	local02, fp
11ad4     0C 4E 05 F1 | 	add	fp, #12
11ad8     A7 22 02 FB | 	rdlong	local03, fp
11adc     0C 4E 85 F1 | 	sub	fp, #12
11ae0     11 21 1A F2 | 	cmp	local02, local03 wcz
11ae4     01 1E 66 16 |  if_a	neg	local01, #1
11ae8     A7 1E 62 FC | 	wrlong	local01, fp
11aec     10 01 90 FD | 	jmp	#LR__1403
11af0                 | LR__1399
11af0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
11af0     08 4E 05 F1 | 	add	fp, #8
11af4     A7 1E 02 FB | 	rdlong	local01, fp
11af8     08 4E 85 F1 | 	sub	fp, #8
11afc     2B 1E 0E F2 | 	cmp	local01, #43 wz
11b00     14 4E 05 A1 |  if_e	add	fp, #20
11b04     A7 22 02 AB |  if_e	rdlong	local03, fp
11b08     14 4E 85 A1 |  if_e	sub	fp, #20
11b0c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11b10     30 00 90 5D |  if_ne	jmp	#LR__1400
11b14     00 1E 06 F6 | 	mov	local01, #0
11b18     A7 12 02 FB | 	rdlong	arg01, fp
11b1c     2C CC BF FD | 	call	#_convertstring
11b20     FD 12 02 F6 | 	mov	arg01, result1
11b24     0C 4E 05 F1 | 	add	fp, #12
11b28     A7 14 02 FB | 	rdlong	arg02, fp
11b2c     0C 4E 85 F1 | 	sub	fp, #12
11b30     2C CA B0 FD | 	call	#__system___string_cmp
11b34     01 FA 55 F2 | 	cmps	result1, #1 wc
11b38     00 1E 26 36 |  if_ae	not	local01, #0
11b3c     A7 1E 62 FC | 	wrlong	local01, fp
11b40     BC 00 90 FD | 	jmp	#LR__1403
11b44                 | LR__1400
11b44                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
11b44     08 4E 05 F1 | 	add	fp, #8
11b48     A7 1E 02 FB | 	rdlong	local01, fp
11b4c     08 4E 85 F1 | 	sub	fp, #8
11b50     1F 1E 0E F2 | 	cmp	local01, #31 wz
11b54     14 4E 05 A1 |  if_e	add	fp, #20
11b58     A7 22 02 AB |  if_e	rdlong	local03, fp
11b5c     14 4E 85 A1 |  if_e	sub	fp, #20
11b60     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11b64     34 00 90 5D |  if_ne	jmp	#LR__1401
11b68     00 1E 06 F6 | 	mov	local01, #0
11b6c     A7 20 02 FB | 	rdlong	local02, fp
11b70     0C 4E 05 F1 | 	add	fp, #12
11b74     A7 12 02 FB | 	rdlong	arg01, fp
11b78     0C 4E 85 F1 | 	sub	fp, #12
11b7c     CC CB BF FD | 	call	#_convertstring
11b80     FD 14 02 F6 | 	mov	arg02, result1
11b84     10 13 02 F6 | 	mov	arg01, local02
11b88     D4 C9 B0 FD | 	call	#__system___string_cmp
11b8c     01 FA 55 F2 | 	cmps	result1, #1 wc
11b90     00 1E 26 36 |  if_ae	not	local01, #0
11b94     A7 1E 62 FC | 	wrlong	local01, fp
11b98     64 00 90 FD | 	jmp	#LR__1403
11b9c                 | LR__1401
11b9c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
11b9c     08 4E 05 F1 | 	add	fp, #8
11ba0     A7 1E 02 FB | 	rdlong	local01, fp
11ba4     08 4E 85 F1 | 	sub	fp, #8
11ba8     2B 1E 0E F2 | 	cmp	local01, #43 wz
11bac     14 4E 05 A1 |  if_e	add	fp, #20
11bb0     A7 22 02 AB |  if_e	rdlong	local03, fp
11bb4     14 4E 85 A1 |  if_e	sub	fp, #20
11bb8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11bbc     3C 00 90 5D |  if_ne	jmp	#LR__1402
11bc0     00 1E 06 F6 | 	mov	local01, #0
11bc4     A7 12 02 FB | 	rdlong	arg01, fp
11bc8     80 CB BF FD | 	call	#_convertstring
11bcc     FD 20 02 F6 | 	mov	local02, result1
11bd0     0C 4E 05 F1 | 	add	fp, #12
11bd4     A7 12 02 FB | 	rdlong	arg01, fp
11bd8     0C 4E 85 F1 | 	sub	fp, #12
11bdc     6C CB BF FD | 	call	#_convertstring
11be0     FD 14 02 F6 | 	mov	arg02, result1
11be4     10 13 02 F6 | 	mov	arg01, local02
11be8     74 C9 B0 FD | 	call	#__system___string_cmp
11bec     01 FA 55 F2 | 	cmps	result1, #1 wc
11bf0     00 1E 26 36 |  if_ae	not	local01, #0
11bf4     A7 1E 62 FC | 	wrlong	local01, fp
11bf8     04 00 90 FD | 	jmp	#LR__1403
11bfc                 | LR__1402
11bfc     A7 00 68 FC | 	wrlong	#0, fp
11c00                 | LR__1403
11c00     08 4E 05 F1 | 	add	fp, #8
11c04     A7 38 68 FC | 	wrlong	#28, fp
11c08     08 4E 85 F1 | 	sub	fp, #8
11c0c     A7 12 02 F6 | 	mov	arg01, fp
11c10     28 89 BF FD | 	call	#_push
11c14     A7 F0 03 F6 | 	mov	ptra, fp
11c18     B2 00 A0 FD | 	call	#popregs_
11c1c                 | _do_gt_ret
11c1c     2D 00 64 FD | 	ret
11c20                 | 
11c20                 | ' 
11c20                 | ' sub do_lt
11c20                 | _do_lt
11c20     05 4A 05 F6 | 	mov	COUNT_, #5
11c24     A8 00 A0 FD | 	call	#pushregs_
11c28     18 F0 07 F1 | 	add	ptra, #24
11c2c     74 88 BF FD | 	call	#_pop
11c30     FD 1E 02 F6 | 	mov	local01, result1
11c34     FE 20 02 F6 | 	mov	local02, result2
11c38     FF 22 02 F6 | 	mov	local03, result3
11c3c     0C 4E 05 F1 | 	add	fp, #12
11c40     A7 1E 62 FC | 	wrlong	local01, fp
11c44     04 4E 05 F1 | 	add	fp, #4
11c48     A7 20 62 FC | 	wrlong	local02, fp
11c4c     04 4E 05 F1 | 	add	fp, #4
11c50     A7 22 62 FC | 	wrlong	local03, fp
11c54     14 4E 85 F1 | 	sub	fp, #20
11c58     48 88 BF FD | 	call	#_pop
11c5c     FF 22 02 F6 | 	mov	local03, result3
11c60     A7 FA 61 FC | 	wrlong	result1, fp
11c64     04 4E 05 F1 | 	add	fp, #4
11c68     A7 FC 61 FC | 	wrlong	result2, fp
11c6c     04 4E 05 F1 | 	add	fp, #4
11c70     A7 22 62 FC | 	wrlong	local03, fp
11c74                 | ' t2=pop()
11c74                 | ' t1=pop()
11c74                 | ' 
11c74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
11c74     08 4E 85 F1 | 	sub	fp, #8
11c78     1F 22 0E F2 | 	cmp	local03, #31 wz
11c7c     14 4E 05 A1 |  if_e	add	fp, #20
11c80     A7 24 02 AB |  if_e	rdlong	local04, fp
11c84     14 4E 85 A1 |  if_e	sub	fp, #20
11c88     12 23 02 A6 |  if_e	mov	local03, local04
11c8c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11c90     28 00 90 5D |  if_ne	jmp	#LR__1410
11c94     00 1E 06 F6 | 	mov	local01, #0
11c98     A7 12 02 FB | 	rdlong	arg01, fp
11c9c     0C 4E 05 F1 | 	add	fp, #12
11ca0     A7 14 02 FB | 	rdlong	arg02, fp
11ca4     0C 4E 85 F1 | 	sub	fp, #12
11ca8     B4 C8 B0 FD | 	call	#__system___string_cmp
11cac     00 FA 55 F2 | 	cmps	result1, #0 wc
11cb0     00 1E 26 C6 |  if_b	not	local01, #0
11cb4     A7 1E 62 FC | 	wrlong	local01, fp
11cb8     0C 04 90 FD | 	jmp	#LR__1423
11cbc                 | LR__1410
11cbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
11cbc     08 4E 05 F1 | 	add	fp, #8
11cc0     A7 1E 02 FB | 	rdlong	local01, fp
11cc4     08 4E 85 F1 | 	sub	fp, #8
11cc8     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ccc     14 4E 05 A1 |  if_e	add	fp, #20
11cd0     A7 24 02 AB |  if_e	rdlong	local04, fp
11cd4     14 4E 85 A1 |  if_e	sub	fp, #20
11cd8     12 23 02 A6 |  if_e	mov	local03, local04
11cdc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ce0     2C 00 90 5D |  if_ne	jmp	#LR__1411
11ce4     00 1E 06 F6 | 	mov	local01, #0
11ce8     A7 12 02 FB | 	rdlong	arg01, fp
11cec     0C 4E 05 F1 | 	add	fp, #12
11cf0     A7 14 02 FB | 	rdlong	arg02, fp
11cf4     0C 4E 85 F1 | 	sub	fp, #12
11cf8     01 16 06 F6 | 	mov	arg03, #1
11cfc     E8 F7 B0 FD | 	call	#__system___float_cmp
11d00     00 FA 55 F2 | 	cmps	result1, #0 wc
11d04     00 1E 26 C6 |  if_b	not	local01, #0
11d08     A7 1E 62 FC | 	wrlong	local01, fp
11d0c     B8 03 90 FD | 	jmp	#LR__1423
11d10                 | LR__1411
11d10                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
11d10     08 4E 05 F1 | 	add	fp, #8
11d14     A7 1E 02 FB | 	rdlong	local01, fp
11d18     08 4E 85 F1 | 	sub	fp, #8
11d1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d20     14 4E 05 A1 |  if_e	add	fp, #20
11d24     A7 24 02 AB |  if_e	rdlong	local04, fp
11d28     14 4E 85 A1 |  if_e	sub	fp, #20
11d2c     12 23 02 A6 |  if_e	mov	local03, local04
11d30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11d34     48 00 90 5D |  if_ne	jmp	#LR__1412
11d38     00 1E 06 F6 | 	mov	local01, #0
11d3c     A7 20 02 FB | 	rdlong	local02, fp
11d40     0C 4E 05 F1 | 	add	fp, #12
11d44     A7 12 02 FB | 	rdlong	arg01, fp
11d48     0C 4E 85 F1 | 	sub	fp, #12
11d4c     09 13 52 F6 | 	abs	arg01, arg01 wc
11d50     1F 26 C6 C9 |  if_b	decod	local05, #31
11d54     00 26 06 36 |  if_ae	mov	local05, #0
11d58     54 EF B0 FD | 	call	#__system___float_fromuns
11d5c     13 FB 61 F5 | 	xor	result1, local05
11d60     FD 14 02 F6 | 	mov	arg02, result1
11d64     10 13 02 F6 | 	mov	arg01, local02
11d68     01 16 06 F6 | 	mov	arg03, #1
11d6c     78 F7 B0 FD | 	call	#__system___float_cmp
11d70     00 FA 55 F2 | 	cmps	result1, #0 wc
11d74     00 1E 26 C6 |  if_b	not	local01, #0
11d78     A7 1E 62 FC | 	wrlong	local01, fp
11d7c     48 03 90 FD | 	jmp	#LR__1423
11d80                 | LR__1412
11d80                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
11d80     08 4E 05 F1 | 	add	fp, #8
11d84     A7 1E 02 FB | 	rdlong	local01, fp
11d88     08 4E 85 F1 | 	sub	fp, #8
11d8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d90     14 4E 05 A1 |  if_e	add	fp, #20
11d94     A7 24 02 AB |  if_e	rdlong	local04, fp
11d98     14 4E 85 A1 |  if_e	sub	fp, #20
11d9c     12 23 02 A6 |  if_e	mov	local03, local04
11da0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11da4     38 00 90 5D |  if_ne	jmp	#LR__1413
11da8     00 1E 06 F6 | 	mov	local01, #0
11dac     A7 20 02 FB | 	rdlong	local02, fp
11db0     0C 4E 05 F1 | 	add	fp, #12
11db4     A7 12 02 FB | 	rdlong	arg01, fp
11db8     0C 4E 85 F1 | 	sub	fp, #12
11dbc     F0 EE B0 FD | 	call	#__system___float_fromuns
11dc0     FD 14 02 F6 | 	mov	arg02, result1
11dc4     10 13 02 F6 | 	mov	arg01, local02
11dc8     01 16 06 F6 | 	mov	arg03, #1
11dcc     18 F7 B0 FD | 	call	#__system___float_cmp
11dd0     00 FA 55 F2 | 	cmps	result1, #0 wc
11dd4     00 1E 26 C6 |  if_b	not	local01, #0
11dd8     A7 1E 62 FC | 	wrlong	local01, fp
11ddc     E8 02 90 FD | 	jmp	#LR__1423
11de0                 | LR__1413
11de0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
11de0     08 4E 05 F1 | 	add	fp, #8
11de4     A7 1E 02 FB | 	rdlong	local01, fp
11de8     08 4E 85 F1 | 	sub	fp, #8
11dec     1C 1E 0E F2 | 	cmp	local01, #28 wz
11df0     14 4E 05 A1 |  if_e	add	fp, #20
11df4     A7 24 02 AB |  if_e	rdlong	local04, fp
11df8     14 4E 85 A1 |  if_e	sub	fp, #20
11dfc     12 23 02 A6 |  if_e	mov	local03, local04
11e00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11e04     44 00 90 5D |  if_ne	jmp	#LR__1414
11e08     00 1E 06 F6 | 	mov	local01, #0
11e0c     A7 12 02 FB | 	rdlong	arg01, fp
11e10     09 13 52 F6 | 	abs	arg01, arg01 wc
11e14     1F 26 C6 C9 |  if_b	decod	local05, #31
11e18     00 26 06 36 |  if_ae	mov	local05, #0
11e1c     90 EE B0 FD | 	call	#__system___float_fromuns
11e20     13 FB 61 F5 | 	xor	result1, local05
11e24     FD 12 02 F6 | 	mov	arg01, result1
11e28     0C 4E 05 F1 | 	add	fp, #12
11e2c     A7 14 02 FB | 	rdlong	arg02, fp
11e30     0C 4E 85 F1 | 	sub	fp, #12
11e34     01 16 06 F6 | 	mov	arg03, #1
11e38     AC F6 B0 FD | 	call	#__system___float_cmp
11e3c     00 FA 55 F2 | 	cmps	result1, #0 wc
11e40     00 1E 26 C6 |  if_b	not	local01, #0
11e44     A7 1E 62 FC | 	wrlong	local01, fp
11e48     7C 02 90 FD | 	jmp	#LR__1423
11e4c                 | LR__1414
11e4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
11e4c     08 4E 05 F1 | 	add	fp, #8
11e50     A7 1E 02 FB | 	rdlong	local01, fp
11e54     08 4E 85 F1 | 	sub	fp, #8
11e58     1C 1E 0E F2 | 	cmp	local01, #28 wz
11e5c     14 4E 05 A1 |  if_e	add	fp, #20
11e60     A7 24 02 AB |  if_e	rdlong	local04, fp
11e64     14 4E 85 A1 |  if_e	sub	fp, #20
11e68     12 23 02 A6 |  if_e	mov	local03, local04
11e6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11e70     20 00 90 5D |  if_ne	jmp	#LR__1415
11e74     A7 20 02 FB | 	rdlong	local02, fp
11e78     0C 4E 05 F1 | 	add	fp, #12
11e7c     A7 22 02 FB | 	rdlong	local03, fp
11e80     0C 4E 85 F1 | 	sub	fp, #12
11e84     11 21 52 F2 | 	cmps	local02, local03 wc
11e88     0F 1F A2 F1 | 	subx	local01, local01
11e8c     A7 1E 62 FC | 	wrlong	local01, fp
11e90     34 02 90 FD | 	jmp	#LR__1423
11e94                 | LR__1415
11e94                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
11e94     08 4E 05 F1 | 	add	fp, #8
11e98     A7 1E 02 FB | 	rdlong	local01, fp
11e9c     08 4E 85 F1 | 	sub	fp, #8
11ea0     1C 1E 0E F2 | 	cmp	local01, #28 wz
11ea4     14 4E 05 A1 |  if_e	add	fp, #20
11ea8     A7 24 02 AB |  if_e	rdlong	local04, fp
11eac     14 4E 85 A1 |  if_e	sub	fp, #20
11eb0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11eb4     20 00 90 5D |  if_ne	jmp	#LR__1416
11eb8     A7 20 02 FB | 	rdlong	local02, fp
11ebc     0C 4E 05 F1 | 	add	fp, #12
11ec0     A7 22 02 FB | 	rdlong	local03, fp
11ec4     0C 4E 85 F1 | 	sub	fp, #12
11ec8     11 21 52 F2 | 	cmps	local02, local03 wc
11ecc     0F 1F A2 F1 | 	subx	local01, local01
11ed0     A7 1E 62 FC | 	wrlong	local01, fp
11ed4     F0 01 90 FD | 	jmp	#LR__1423
11ed8                 | LR__1416
11ed8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
11ed8     08 4E 05 F1 | 	add	fp, #8
11edc     A7 1E 02 FB | 	rdlong	local01, fp
11ee0     08 4E 85 F1 | 	sub	fp, #8
11ee4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ee8     14 4E 05 A1 |  if_e	add	fp, #20
11eec     A7 22 02 AB |  if_e	rdlong	local03, fp
11ef0     14 4E 85 A1 |  if_e	sub	fp, #20
11ef4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ef8     34 00 90 5D |  if_ne	jmp	#LR__1417
11efc     00 1E 06 F6 | 	mov	local01, #0
11f00     A7 12 02 FB | 	rdlong	arg01, fp
11f04     A8 ED B0 FD | 	call	#__system___float_fromuns
11f08     FD 12 02 F6 | 	mov	arg01, result1
11f0c     0C 4E 05 F1 | 	add	fp, #12
11f10     A7 14 02 FB | 	rdlong	arg02, fp
11f14     0C 4E 85 F1 | 	sub	fp, #12
11f18     01 16 06 F6 | 	mov	arg03, #1
11f1c     C8 F5 B0 FD | 	call	#__system___float_cmp
11f20     00 FA 55 F2 | 	cmps	result1, #0 wc
11f24     00 1E 26 C6 |  if_b	not	local01, #0
11f28     A7 1E 62 FC | 	wrlong	local01, fp
11f2c     98 01 90 FD | 	jmp	#LR__1423
11f30                 | LR__1417
11f30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
11f30     08 4E 05 F1 | 	add	fp, #8
11f34     A7 1E 02 FB | 	rdlong	local01, fp
11f38     08 4E 85 F1 | 	sub	fp, #8
11f3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11f40     14 4E 05 A1 |  if_e	add	fp, #20
11f44     A7 22 02 AB |  if_e	rdlong	local03, fp
11f48     14 4E 85 A1 |  if_e	sub	fp, #20
11f4c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11f50     20 00 90 5D |  if_ne	jmp	#LR__1418
11f54     A7 20 02 FB | 	rdlong	local02, fp
11f58     0C 4E 05 F1 | 	add	fp, #12
11f5c     A7 22 02 FB | 	rdlong	local03, fp
11f60     0C 4E 85 F1 | 	sub	fp, #12
11f64     11 21 52 F2 | 	cmps	local02, local03 wc
11f68     0F 1F A2 F1 | 	subx	local01, local01
11f6c     A7 1E 62 FC | 	wrlong	local01, fp
11f70     54 01 90 FD | 	jmp	#LR__1423
11f74                 | LR__1418
11f74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11f74     08 4E 05 F1 | 	add	fp, #8
11f78     A7 1E 02 FB | 	rdlong	local01, fp
11f7c     08 4E 85 F1 | 	sub	fp, #8
11f80     1D 1E 0E F2 | 	cmp	local01, #29 wz
11f84     14 4E 05 A1 |  if_e	add	fp, #20
11f88     A7 22 02 AB |  if_e	rdlong	local03, fp
11f8c     14 4E 85 A1 |  if_e	sub	fp, #20
11f90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11f94     20 00 90 5D |  if_ne	jmp	#LR__1419
11f98     A7 20 02 FB | 	rdlong	local02, fp
11f9c     0C 4E 05 F1 | 	add	fp, #12
11fa0     A7 22 02 FB | 	rdlong	local03, fp
11fa4     0C 4E 85 F1 | 	sub	fp, #12
11fa8     11 21 12 F2 | 	cmp	local02, local03 wc
11fac     0F 1F A2 F1 | 	subx	local01, local01
11fb0     A7 1E 62 FC | 	wrlong	local01, fp
11fb4     10 01 90 FD | 	jmp	#LR__1423
11fb8                 | LR__1419
11fb8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
11fb8     08 4E 05 F1 | 	add	fp, #8
11fbc     A7 1E 02 FB | 	rdlong	local01, fp
11fc0     08 4E 85 F1 | 	sub	fp, #8
11fc4     2B 1E 0E F2 | 	cmp	local01, #43 wz
11fc8     14 4E 05 A1 |  if_e	add	fp, #20
11fcc     A7 22 02 AB |  if_e	rdlong	local03, fp
11fd0     14 4E 85 A1 |  if_e	sub	fp, #20
11fd4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11fd8     30 00 90 5D |  if_ne	jmp	#LR__1420
11fdc     00 1E 06 F6 | 	mov	local01, #0
11fe0     A7 12 02 FB | 	rdlong	arg01, fp
11fe4     64 C7 BF FD | 	call	#_convertstring
11fe8     FD 12 02 F6 | 	mov	arg01, result1
11fec     0C 4E 05 F1 | 	add	fp, #12
11ff0     A7 14 02 FB | 	rdlong	arg02, fp
11ff4     0C 4E 85 F1 | 	sub	fp, #12
11ff8     64 C5 B0 FD | 	call	#__system___string_cmp
11ffc     00 FA 55 F2 | 	cmps	result1, #0 wc
12000     00 1E 26 C6 |  if_b	not	local01, #0
12004     A7 1E 62 FC | 	wrlong	local01, fp
12008     BC 00 90 FD | 	jmp	#LR__1423
1200c                 | LR__1420
1200c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1200c     08 4E 05 F1 | 	add	fp, #8
12010     A7 1E 02 FB | 	rdlong	local01, fp
12014     08 4E 85 F1 | 	sub	fp, #8
12018     1F 1E 0E F2 | 	cmp	local01, #31 wz
1201c     14 4E 05 A1 |  if_e	add	fp, #20
12020     A7 22 02 AB |  if_e	rdlong	local03, fp
12024     14 4E 85 A1 |  if_e	sub	fp, #20
12028     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1202c     34 00 90 5D |  if_ne	jmp	#LR__1421
12030     00 1E 06 F6 | 	mov	local01, #0
12034     A7 20 02 FB | 	rdlong	local02, fp
12038     0C 4E 05 F1 | 	add	fp, #12
1203c     A7 12 02 FB | 	rdlong	arg01, fp
12040     0C 4E 85 F1 | 	sub	fp, #12
12044     04 C7 BF FD | 	call	#_convertstring
12048     FD 14 02 F6 | 	mov	arg02, result1
1204c     10 13 02 F6 | 	mov	arg01, local02
12050     0C C5 B0 FD | 	call	#__system___string_cmp
12054     00 FA 55 F2 | 	cmps	result1, #0 wc
12058     00 1E 26 C6 |  if_b	not	local01, #0
1205c     A7 1E 62 FC | 	wrlong	local01, fp
12060     64 00 90 FD | 	jmp	#LR__1423
12064                 | LR__1421
12064                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
12064     08 4E 05 F1 | 	add	fp, #8
12068     A7 1E 02 FB | 	rdlong	local01, fp
1206c     08 4E 85 F1 | 	sub	fp, #8
12070     2B 1E 0E F2 | 	cmp	local01, #43 wz
12074     14 4E 05 A1 |  if_e	add	fp, #20
12078     A7 22 02 AB |  if_e	rdlong	local03, fp
1207c     14 4E 85 A1 |  if_e	sub	fp, #20
12080     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12084     3C 00 90 5D |  if_ne	jmp	#LR__1422
12088     00 1E 06 F6 | 	mov	local01, #0
1208c     A7 12 02 FB | 	rdlong	arg01, fp
12090     B8 C6 BF FD | 	call	#_convertstring
12094     FD 20 02 F6 | 	mov	local02, result1
12098     0C 4E 05 F1 | 	add	fp, #12
1209c     A7 12 02 FB | 	rdlong	arg01, fp
120a0     0C 4E 85 F1 | 	sub	fp, #12
120a4     A4 C6 BF FD | 	call	#_convertstring
120a8     FD 14 02 F6 | 	mov	arg02, result1
120ac     10 13 02 F6 | 	mov	arg01, local02
120b0     AC C4 B0 FD | 	call	#__system___string_cmp
120b4     00 FA 55 F2 | 	cmps	result1, #0 wc
120b8     00 1E 26 C6 |  if_b	not	local01, #0
120bc     A7 1E 62 FC | 	wrlong	local01, fp
120c0     04 00 90 FD | 	jmp	#LR__1423
120c4                 | LR__1422
120c4     A7 00 68 FC | 	wrlong	#0, fp
120c8                 | LR__1423
120c8     08 4E 05 F1 | 	add	fp, #8
120cc     A7 38 68 FC | 	wrlong	#28, fp
120d0     08 4E 85 F1 | 	sub	fp, #8
120d4     A7 12 02 F6 | 	mov	arg01, fp
120d8     60 84 BF FD | 	call	#_push
120dc     A7 F0 03 F6 | 	mov	ptra, fp
120e0     B2 00 A0 FD | 	call	#popregs_
120e4                 | _do_lt_ret
120e4     2D 00 64 FD | 	ret
120e8                 | 
120e8                 | ' 
120e8                 | ' sub do_ge
120e8                 | _do_ge
120e8     05 4A 05 F6 | 	mov	COUNT_, #5
120ec     A8 00 A0 FD | 	call	#pushregs_
120f0     18 F0 07 F1 | 	add	ptra, #24
120f4     AC 83 BF FD | 	call	#_pop
120f8     FD 1E 02 F6 | 	mov	local01, result1
120fc     FE 20 02 F6 | 	mov	local02, result2
12100     FF 22 02 F6 | 	mov	local03, result3
12104     0C 4E 05 F1 | 	add	fp, #12
12108     A7 1E 62 FC | 	wrlong	local01, fp
1210c     04 4E 05 F1 | 	add	fp, #4
12110     A7 20 62 FC | 	wrlong	local02, fp
12114     04 4E 05 F1 | 	add	fp, #4
12118     A7 22 62 FC | 	wrlong	local03, fp
1211c     14 4E 85 F1 | 	sub	fp, #20
12120     80 83 BF FD | 	call	#_pop
12124     FF 22 02 F6 | 	mov	local03, result3
12128     A7 FA 61 FC | 	wrlong	result1, fp
1212c     04 4E 05 F1 | 	add	fp, #4
12130     A7 FC 61 FC | 	wrlong	result2, fp
12134     04 4E 05 F1 | 	add	fp, #4
12138     A7 22 62 FC | 	wrlong	local03, fp
1213c                 | ' t2=pop()
1213c                 | ' t1=pop()
1213c                 | ' 
1213c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1213c     08 4E 85 F1 | 	sub	fp, #8
12140     1F 22 0E F2 | 	cmp	local03, #31 wz
12144     14 4E 05 A1 |  if_e	add	fp, #20
12148     A7 24 02 AB |  if_e	rdlong	local04, fp
1214c     14 4E 85 A1 |  if_e	sub	fp, #20
12150     12 23 02 A6 |  if_e	mov	local03, local04
12154     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12158     28 00 90 5D |  if_ne	jmp	#LR__1430
1215c     00 1E 06 F6 | 	mov	local01, #0
12160     A7 12 02 FB | 	rdlong	arg01, fp
12164     0C 4E 05 F1 | 	add	fp, #12
12168     A7 14 02 FB | 	rdlong	arg02, fp
1216c     0C 4E 85 F1 | 	sub	fp, #12
12170     EC C3 B0 FD | 	call	#__system___string_cmp
12174     00 FA 55 F2 | 	cmps	result1, #0 wc
12178     00 1E 26 36 |  if_ae	not	local01, #0
1217c     A7 1E 62 FC | 	wrlong	local01, fp
12180     1C 04 90 FD | 	jmp	#LR__1443
12184                 | LR__1430
12184                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
12184     08 4E 05 F1 | 	add	fp, #8
12188     A7 1E 02 FB | 	rdlong	local01, fp
1218c     08 4E 85 F1 | 	sub	fp, #8
12190     1E 1E 0E F2 | 	cmp	local01, #30 wz
12194     14 4E 05 A1 |  if_e	add	fp, #20
12198     A7 24 02 AB |  if_e	rdlong	local04, fp
1219c     14 4E 85 A1 |  if_e	sub	fp, #20
121a0     12 23 02 A6 |  if_e	mov	local03, local04
121a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
121a8     2C 00 90 5D |  if_ne	jmp	#LR__1431
121ac     00 1E 06 F6 | 	mov	local01, #0
121b0     A7 12 02 FB | 	rdlong	arg01, fp
121b4     0C 4E 05 F1 | 	add	fp, #12
121b8     A7 14 02 FB | 	rdlong	arg02, fp
121bc     0C 4E 85 F1 | 	sub	fp, #12
121c0     01 16 66 F6 | 	neg	arg03, #1
121c4     20 F3 B0 FD | 	call	#__system___float_cmp
121c8     00 FA 55 F2 | 	cmps	result1, #0 wc
121cc     00 1E 26 36 |  if_ae	not	local01, #0
121d0     A7 1E 62 FC | 	wrlong	local01, fp
121d4     C8 03 90 FD | 	jmp	#LR__1443
121d8                 | LR__1431
121d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
121d8     08 4E 05 F1 | 	add	fp, #8
121dc     A7 1E 02 FB | 	rdlong	local01, fp
121e0     08 4E 85 F1 | 	sub	fp, #8
121e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
121e8     14 4E 05 A1 |  if_e	add	fp, #20
121ec     A7 24 02 AB |  if_e	rdlong	local04, fp
121f0     14 4E 85 A1 |  if_e	sub	fp, #20
121f4     12 23 02 A6 |  if_e	mov	local03, local04
121f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
121fc     48 00 90 5D |  if_ne	jmp	#LR__1432
12200     00 1E 06 F6 | 	mov	local01, #0
12204     A7 20 02 FB | 	rdlong	local02, fp
12208     0C 4E 05 F1 | 	add	fp, #12
1220c     A7 12 02 FB | 	rdlong	arg01, fp
12210     0C 4E 85 F1 | 	sub	fp, #12
12214     09 13 52 F6 | 	abs	arg01, arg01 wc
12218     1F 26 C6 C9 |  if_b	decod	local05, #31
1221c     00 26 06 36 |  if_ae	mov	local05, #0
12220     8C EA B0 FD | 	call	#__system___float_fromuns
12224     13 FB 61 F5 | 	xor	result1, local05
12228     FD 14 02 F6 | 	mov	arg02, result1
1222c     10 13 02 F6 | 	mov	arg01, local02
12230     01 16 66 F6 | 	neg	arg03, #1
12234     B0 F2 B0 FD | 	call	#__system___float_cmp
12238     00 FA 55 F2 | 	cmps	result1, #0 wc
1223c     00 1E 26 36 |  if_ae	not	local01, #0
12240     A7 1E 62 FC | 	wrlong	local01, fp
12244     58 03 90 FD | 	jmp	#LR__1443
12248                 | LR__1432
12248                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
12248     08 4E 05 F1 | 	add	fp, #8
1224c     A7 1E 02 FB | 	rdlong	local01, fp
12250     08 4E 85 F1 | 	sub	fp, #8
12254     1E 1E 0E F2 | 	cmp	local01, #30 wz
12258     14 4E 05 A1 |  if_e	add	fp, #20
1225c     A7 24 02 AB |  if_e	rdlong	local04, fp
12260     14 4E 85 A1 |  if_e	sub	fp, #20
12264     12 23 02 A6 |  if_e	mov	local03, local04
12268     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1226c     38 00 90 5D |  if_ne	jmp	#LR__1433
12270     00 1E 06 F6 | 	mov	local01, #0
12274     A7 20 02 FB | 	rdlong	local02, fp
12278     0C 4E 05 F1 | 	add	fp, #12
1227c     A7 12 02 FB | 	rdlong	arg01, fp
12280     0C 4E 85 F1 | 	sub	fp, #12
12284     28 EA B0 FD | 	call	#__system___float_fromuns
12288     FD 14 02 F6 | 	mov	arg02, result1
1228c     10 13 02 F6 | 	mov	arg01, local02
12290     01 16 66 F6 | 	neg	arg03, #1
12294     50 F2 B0 FD | 	call	#__system___float_cmp
12298     00 FA 55 F2 | 	cmps	result1, #0 wc
1229c     00 1E 26 36 |  if_ae	not	local01, #0
122a0     A7 1E 62 FC | 	wrlong	local01, fp
122a4     F8 02 90 FD | 	jmp	#LR__1443
122a8                 | LR__1433
122a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
122a8     08 4E 05 F1 | 	add	fp, #8
122ac     A7 1E 02 FB | 	rdlong	local01, fp
122b0     08 4E 85 F1 | 	sub	fp, #8
122b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
122b8     14 4E 05 A1 |  if_e	add	fp, #20
122bc     A7 24 02 AB |  if_e	rdlong	local04, fp
122c0     14 4E 85 A1 |  if_e	sub	fp, #20
122c4     12 23 02 A6 |  if_e	mov	local03, local04
122c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
122cc     44 00 90 5D |  if_ne	jmp	#LR__1434
122d0     00 1E 06 F6 | 	mov	local01, #0
122d4     A7 12 02 FB | 	rdlong	arg01, fp
122d8     09 13 52 F6 | 	abs	arg01, arg01 wc
122dc     1F 26 C6 C9 |  if_b	decod	local05, #31
122e0     00 26 06 36 |  if_ae	mov	local05, #0
122e4     C8 E9 B0 FD | 	call	#__system___float_fromuns
122e8     13 FB 61 F5 | 	xor	result1, local05
122ec     FD 12 02 F6 | 	mov	arg01, result1
122f0     0C 4E 05 F1 | 	add	fp, #12
122f4     A7 14 02 FB | 	rdlong	arg02, fp
122f8     0C 4E 85 F1 | 	sub	fp, #12
122fc     01 16 66 F6 | 	neg	arg03, #1
12300     E4 F1 B0 FD | 	call	#__system___float_cmp
12304     00 FA 55 F2 | 	cmps	result1, #0 wc
12308     00 1E 26 36 |  if_ae	not	local01, #0
1230c     A7 1E 62 FC | 	wrlong	local01, fp
12310     8C 02 90 FD | 	jmp	#LR__1443
12314                 | LR__1434
12314                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
12314     08 4E 05 F1 | 	add	fp, #8
12318     A7 1E 02 FB | 	rdlong	local01, fp
1231c     08 4E 85 F1 | 	sub	fp, #8
12320     1C 1E 0E F2 | 	cmp	local01, #28 wz
12324     14 4E 05 A1 |  if_e	add	fp, #20
12328     A7 24 02 AB |  if_e	rdlong	local04, fp
1232c     14 4E 85 A1 |  if_e	sub	fp, #20
12330     12 23 02 A6 |  if_e	mov	local03, local04
12334     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12338     24 00 90 5D |  if_ne	jmp	#LR__1435
1233c     00 1E 06 F6 | 	mov	local01, #0
12340     A7 20 02 FB | 	rdlong	local02, fp
12344     0C 4E 05 F1 | 	add	fp, #12
12348     A7 22 02 FB | 	rdlong	local03, fp
1234c     0C 4E 85 F1 | 	sub	fp, #12
12350     11 21 52 F2 | 	cmps	local02, local03 wc
12354     01 1E 66 36 |  if_ae	neg	local01, #1
12358     A7 1E 62 FC | 	wrlong	local01, fp
1235c     40 02 90 FD | 	jmp	#LR__1443
12360                 | LR__1435
12360                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
12360     08 4E 05 F1 | 	add	fp, #8
12364     A7 1E 02 FB | 	rdlong	local01, fp
12368     08 4E 85 F1 | 	sub	fp, #8
1236c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12370     14 4E 05 A1 |  if_e	add	fp, #20
12374     A7 24 02 AB |  if_e	rdlong	local04, fp
12378     14 4E 85 A1 |  if_e	sub	fp, #20
1237c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12380     24 00 90 5D |  if_ne	jmp	#LR__1436
12384     00 1E 06 F6 | 	mov	local01, #0
12388     A7 20 02 FB | 	rdlong	local02, fp
1238c     0C 4E 05 F1 | 	add	fp, #12
12390     A7 22 02 FB | 	rdlong	local03, fp
12394     0C 4E 85 F1 | 	sub	fp, #12
12398     11 21 52 F2 | 	cmps	local02, local03 wc
1239c     01 1E 66 36 |  if_ae	neg	local01, #1
123a0     A7 1E 62 FC | 	wrlong	local01, fp
123a4     F8 01 90 FD | 	jmp	#LR__1443
123a8                 | LR__1436
123a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
123a8     08 4E 05 F1 | 	add	fp, #8
123ac     A7 1E 02 FB | 	rdlong	local01, fp
123b0     08 4E 85 F1 | 	sub	fp, #8
123b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
123b8     14 4E 05 A1 |  if_e	add	fp, #20
123bc     A7 22 02 AB |  if_e	rdlong	local03, fp
123c0     14 4E 85 A1 |  if_e	sub	fp, #20
123c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
123c8     34 00 90 5D |  if_ne	jmp	#LR__1437
123cc     00 1E 06 F6 | 	mov	local01, #0
123d0     A7 12 02 FB | 	rdlong	arg01, fp
123d4     D8 E8 B0 FD | 	call	#__system___float_fromuns
123d8     FD 12 02 F6 | 	mov	arg01, result1
123dc     0C 4E 05 F1 | 	add	fp, #12
123e0     A7 14 02 FB | 	rdlong	arg02, fp
123e4     0C 4E 85 F1 | 	sub	fp, #12
123e8     01 16 66 F6 | 	neg	arg03, #1
123ec     F8 F0 B0 FD | 	call	#__system___float_cmp
123f0     00 FA 55 F2 | 	cmps	result1, #0 wc
123f4     00 1E 26 36 |  if_ae	not	local01, #0
123f8     A7 1E 62 FC | 	wrlong	local01, fp
123fc     A0 01 90 FD | 	jmp	#LR__1443
12400                 | LR__1437
12400                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
12400     08 4E 05 F1 | 	add	fp, #8
12404     A7 1E 02 FB | 	rdlong	local01, fp
12408     08 4E 85 F1 | 	sub	fp, #8
1240c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12410     14 4E 05 A1 |  if_e	add	fp, #20
12414     A7 22 02 AB |  if_e	rdlong	local03, fp
12418     14 4E 85 A1 |  if_e	sub	fp, #20
1241c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12420     24 00 90 5D |  if_ne	jmp	#LR__1438
12424     00 1E 06 F6 | 	mov	local01, #0
12428     A7 20 02 FB | 	rdlong	local02, fp
1242c     0C 4E 05 F1 | 	add	fp, #12
12430     A7 22 02 FB | 	rdlong	local03, fp
12434     0C 4E 85 F1 | 	sub	fp, #12
12438     11 21 52 F2 | 	cmps	local02, local03 wc
1243c     01 1E 66 36 |  if_ae	neg	local01, #1
12440     A7 1E 62 FC | 	wrlong	local01, fp
12444     58 01 90 FD | 	jmp	#LR__1443
12448                 | LR__1438
12448                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
12448     08 4E 05 F1 | 	add	fp, #8
1244c     A7 1E 02 FB | 	rdlong	local01, fp
12450     08 4E 85 F1 | 	sub	fp, #8
12454     1D 1E 0E F2 | 	cmp	local01, #29 wz
12458     14 4E 05 A1 |  if_e	add	fp, #20
1245c     A7 22 02 AB |  if_e	rdlong	local03, fp
12460     14 4E 85 A1 |  if_e	sub	fp, #20
12464     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12468     24 00 90 5D |  if_ne	jmp	#LR__1439
1246c     00 1E 06 F6 | 	mov	local01, #0
12470     A7 20 02 FB | 	rdlong	local02, fp
12474     0C 4E 05 F1 | 	add	fp, #12
12478     A7 22 02 FB | 	rdlong	local03, fp
1247c     0C 4E 85 F1 | 	sub	fp, #12
12480     11 21 12 F2 | 	cmp	local02, local03 wc
12484     01 1E 66 36 |  if_ae	neg	local01, #1
12488     A7 1E 62 FC | 	wrlong	local01, fp
1248c     10 01 90 FD | 	jmp	#LR__1443
12490                 | LR__1439
12490                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
12490     08 4E 05 F1 | 	add	fp, #8
12494     A7 1E 02 FB | 	rdlong	local01, fp
12498     08 4E 85 F1 | 	sub	fp, #8
1249c     2B 1E 0E F2 | 	cmp	local01, #43 wz
124a0     14 4E 05 A1 |  if_e	add	fp, #20
124a4     A7 22 02 AB |  if_e	rdlong	local03, fp
124a8     14 4E 85 A1 |  if_e	sub	fp, #20
124ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
124b0     30 00 90 5D |  if_ne	jmp	#LR__1440
124b4     00 1E 06 F6 | 	mov	local01, #0
124b8     A7 12 02 FB | 	rdlong	arg01, fp
124bc     8C C2 BF FD | 	call	#_convertstring
124c0     FD 12 02 F6 | 	mov	arg01, result1
124c4     0C 4E 05 F1 | 	add	fp, #12
124c8     A7 14 02 FB | 	rdlong	arg02, fp
124cc     0C 4E 85 F1 | 	sub	fp, #12
124d0     8C C0 B0 FD | 	call	#__system___string_cmp
124d4     00 FA 55 F2 | 	cmps	result1, #0 wc
124d8     00 1E 26 36 |  if_ae	not	local01, #0
124dc     A7 1E 62 FC | 	wrlong	local01, fp
124e0     BC 00 90 FD | 	jmp	#LR__1443
124e4                 | LR__1440
124e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
124e4     08 4E 05 F1 | 	add	fp, #8
124e8     A7 1E 02 FB | 	rdlong	local01, fp
124ec     08 4E 85 F1 | 	sub	fp, #8
124f0     1F 1E 0E F2 | 	cmp	local01, #31 wz
124f4     14 4E 05 A1 |  if_e	add	fp, #20
124f8     A7 22 02 AB |  if_e	rdlong	local03, fp
124fc     14 4E 85 A1 |  if_e	sub	fp, #20
12500     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12504     34 00 90 5D |  if_ne	jmp	#LR__1441
12508     00 1E 06 F6 | 	mov	local01, #0
1250c     A7 20 02 FB | 	rdlong	local02, fp
12510     0C 4E 05 F1 | 	add	fp, #12
12514     A7 12 02 FB | 	rdlong	arg01, fp
12518     0C 4E 85 F1 | 	sub	fp, #12
1251c     2C C2 BF FD | 	call	#_convertstring
12520     FD 14 02 F6 | 	mov	arg02, result1
12524     10 13 02 F6 | 	mov	arg01, local02
12528     34 C0 B0 FD | 	call	#__system___string_cmp
1252c     00 FA 55 F2 | 	cmps	result1, #0 wc
12530     00 1E 26 36 |  if_ae	not	local01, #0
12534     A7 1E 62 FC | 	wrlong	local01, fp
12538     64 00 90 FD | 	jmp	#LR__1443
1253c                 | LR__1441
1253c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1253c     08 4E 05 F1 | 	add	fp, #8
12540     A7 1E 02 FB | 	rdlong	local01, fp
12544     08 4E 85 F1 | 	sub	fp, #8
12548     2B 1E 0E F2 | 	cmp	local01, #43 wz
1254c     14 4E 05 A1 |  if_e	add	fp, #20
12550     A7 22 02 AB |  if_e	rdlong	local03, fp
12554     14 4E 85 A1 |  if_e	sub	fp, #20
12558     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1255c     3C 00 90 5D |  if_ne	jmp	#LR__1442
12560     00 1E 06 F6 | 	mov	local01, #0
12564     A7 12 02 FB | 	rdlong	arg01, fp
12568     E0 C1 BF FD | 	call	#_convertstring
1256c     FD 20 02 F6 | 	mov	local02, result1
12570     0C 4E 05 F1 | 	add	fp, #12
12574     A7 12 02 FB | 	rdlong	arg01, fp
12578     0C 4E 85 F1 | 	sub	fp, #12
1257c     CC C1 BF FD | 	call	#_convertstring
12580     FD 14 02 F6 | 	mov	arg02, result1
12584     10 13 02 F6 | 	mov	arg01, local02
12588     D4 BF B0 FD | 	call	#__system___string_cmp
1258c     00 FA 55 F2 | 	cmps	result1, #0 wc
12590     00 1E 26 36 |  if_ae	not	local01, #0
12594     A7 1E 62 FC | 	wrlong	local01, fp
12598     04 00 90 FD | 	jmp	#LR__1443
1259c                 | LR__1442
1259c     A7 00 68 FC | 	wrlong	#0, fp
125a0                 | LR__1443
125a0     08 4E 05 F1 | 	add	fp, #8
125a4     A7 38 68 FC | 	wrlong	#28, fp
125a8     08 4E 85 F1 | 	sub	fp, #8
125ac     A7 12 02 F6 | 	mov	arg01, fp
125b0     88 7F BF FD | 	call	#_push
125b4     A7 F0 03 F6 | 	mov	ptra, fp
125b8     B2 00 A0 FD | 	call	#popregs_
125bc                 | _do_ge_ret
125bc     2D 00 64 FD | 	ret
125c0                 | 
125c0                 | ' 
125c0                 | ' sub do_le
125c0                 | _do_le
125c0     05 4A 05 F6 | 	mov	COUNT_, #5
125c4     A8 00 A0 FD | 	call	#pushregs_
125c8     18 F0 07 F1 | 	add	ptra, #24
125cc     D4 7E BF FD | 	call	#_pop
125d0     FD 1E 02 F6 | 	mov	local01, result1
125d4     FE 20 02 F6 | 	mov	local02, result2
125d8     FF 22 02 F6 | 	mov	local03, result3
125dc     0C 4E 05 F1 | 	add	fp, #12
125e0     A7 1E 62 FC | 	wrlong	local01, fp
125e4     04 4E 05 F1 | 	add	fp, #4
125e8     A7 20 62 FC | 	wrlong	local02, fp
125ec     04 4E 05 F1 | 	add	fp, #4
125f0     A7 22 62 FC | 	wrlong	local03, fp
125f4     14 4E 85 F1 | 	sub	fp, #20
125f8     A8 7E BF FD | 	call	#_pop
125fc     FF 22 02 F6 | 	mov	local03, result3
12600     A7 FA 61 FC | 	wrlong	result1, fp
12604     04 4E 05 F1 | 	add	fp, #4
12608     A7 FC 61 FC | 	wrlong	result2, fp
1260c     04 4E 05 F1 | 	add	fp, #4
12610     A7 22 62 FC | 	wrlong	local03, fp
12614                 | ' t2=pop()
12614                 | ' t1=pop()
12614                 | ' 
12614                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
12614     08 4E 85 F1 | 	sub	fp, #8
12618     1F 22 0E F2 | 	cmp	local03, #31 wz
1261c     14 4E 05 A1 |  if_e	add	fp, #20
12620     A7 24 02 AB |  if_e	rdlong	local04, fp
12624     14 4E 85 A1 |  if_e	sub	fp, #20
12628     12 23 02 A6 |  if_e	mov	local03, local04
1262c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12630     28 00 90 5D |  if_ne	jmp	#LR__1450
12634     00 1E 06 F6 | 	mov	local01, #0
12638     A7 12 02 FB | 	rdlong	arg01, fp
1263c     0C 4E 05 F1 | 	add	fp, #12
12640     A7 14 02 FB | 	rdlong	arg02, fp
12644     0C 4E 85 F1 | 	sub	fp, #12
12648     14 BF B0 FD | 	call	#__system___string_cmp
1264c     01 FA 55 F2 | 	cmps	result1, #1 wc
12650     00 1E 26 C6 |  if_b	not	local01, #0
12654     A7 1E 62 FC | 	wrlong	local01, fp
12658     1C 04 90 FD | 	jmp	#LR__1463
1265c                 | LR__1450
1265c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1265c     08 4E 05 F1 | 	add	fp, #8
12660     A7 1E 02 FB | 	rdlong	local01, fp
12664     08 4E 85 F1 | 	sub	fp, #8
12668     1E 1E 0E F2 | 	cmp	local01, #30 wz
1266c     14 4E 05 A1 |  if_e	add	fp, #20
12670     A7 24 02 AB |  if_e	rdlong	local04, fp
12674     14 4E 85 A1 |  if_e	sub	fp, #20
12678     12 23 02 A6 |  if_e	mov	local03, local04
1267c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12680     2C 00 90 5D |  if_ne	jmp	#LR__1451
12684     00 1E 06 F6 | 	mov	local01, #0
12688     A7 12 02 FB | 	rdlong	arg01, fp
1268c     0C 4E 05 F1 | 	add	fp, #12
12690     A7 14 02 FB | 	rdlong	arg02, fp
12694     0C 4E 85 F1 | 	sub	fp, #12
12698     01 16 06 F6 | 	mov	arg03, #1
1269c     48 EE B0 FD | 	call	#__system___float_cmp
126a0     01 FA 55 F2 | 	cmps	result1, #1 wc
126a4     00 1E 26 C6 |  if_b	not	local01, #0
126a8     A7 1E 62 FC | 	wrlong	local01, fp
126ac     C8 03 90 FD | 	jmp	#LR__1463
126b0                 | LR__1451
126b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
126b0     08 4E 05 F1 | 	add	fp, #8
126b4     A7 1E 02 FB | 	rdlong	local01, fp
126b8     08 4E 85 F1 | 	sub	fp, #8
126bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
126c0     14 4E 05 A1 |  if_e	add	fp, #20
126c4     A7 24 02 AB |  if_e	rdlong	local04, fp
126c8     14 4E 85 A1 |  if_e	sub	fp, #20
126cc     12 23 02 A6 |  if_e	mov	local03, local04
126d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
126d4     48 00 90 5D |  if_ne	jmp	#LR__1452
126d8     00 1E 06 F6 | 	mov	local01, #0
126dc     A7 20 02 FB | 	rdlong	local02, fp
126e0     0C 4E 05 F1 | 	add	fp, #12
126e4     A7 12 02 FB | 	rdlong	arg01, fp
126e8     0C 4E 85 F1 | 	sub	fp, #12
126ec     09 13 52 F6 | 	abs	arg01, arg01 wc
126f0     1F 26 C6 C9 |  if_b	decod	local05, #31
126f4     00 26 06 36 |  if_ae	mov	local05, #0
126f8     B4 E5 B0 FD | 	call	#__system___float_fromuns
126fc     13 FB 61 F5 | 	xor	result1, local05
12700     FD 14 02 F6 | 	mov	arg02, result1
12704     10 13 02 F6 | 	mov	arg01, local02
12708     01 16 06 F6 | 	mov	arg03, #1
1270c     D8 ED B0 FD | 	call	#__system___float_cmp
12710     01 FA 55 F2 | 	cmps	result1, #1 wc
12714     00 1E 26 C6 |  if_b	not	local01, #0
12718     A7 1E 62 FC | 	wrlong	local01, fp
1271c     58 03 90 FD | 	jmp	#LR__1463
12720                 | LR__1452
12720                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12720     08 4E 05 F1 | 	add	fp, #8
12724     A7 1E 02 FB | 	rdlong	local01, fp
12728     08 4E 85 F1 | 	sub	fp, #8
1272c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12730     14 4E 05 A1 |  if_e	add	fp, #20
12734     A7 24 02 AB |  if_e	rdlong	local04, fp
12738     14 4E 85 A1 |  if_e	sub	fp, #20
1273c     12 23 02 A6 |  if_e	mov	local03, local04
12740     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12744     38 00 90 5D |  if_ne	jmp	#LR__1453
12748     00 1E 06 F6 | 	mov	local01, #0
1274c     A7 20 02 FB | 	rdlong	local02, fp
12750     0C 4E 05 F1 | 	add	fp, #12
12754     A7 12 02 FB | 	rdlong	arg01, fp
12758     0C 4E 85 F1 | 	sub	fp, #12
1275c     50 E5 B0 FD | 	call	#__system___float_fromuns
12760     FD 14 02 F6 | 	mov	arg02, result1
12764     10 13 02 F6 | 	mov	arg01, local02
12768     01 16 06 F6 | 	mov	arg03, #1
1276c     78 ED B0 FD | 	call	#__system___float_cmp
12770     01 FA 55 F2 | 	cmps	result1, #1 wc
12774     00 1E 26 C6 |  if_b	not	local01, #0
12778     A7 1E 62 FC | 	wrlong	local01, fp
1277c     F8 02 90 FD | 	jmp	#LR__1463
12780                 | LR__1453
12780                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12780     08 4E 05 F1 | 	add	fp, #8
12784     A7 1E 02 FB | 	rdlong	local01, fp
12788     08 4E 85 F1 | 	sub	fp, #8
1278c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12790     14 4E 05 A1 |  if_e	add	fp, #20
12794     A7 24 02 AB |  if_e	rdlong	local04, fp
12798     14 4E 85 A1 |  if_e	sub	fp, #20
1279c     12 23 02 A6 |  if_e	mov	local03, local04
127a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
127a4     44 00 90 5D |  if_ne	jmp	#LR__1454
127a8     00 1E 06 F6 | 	mov	local01, #0
127ac     A7 12 02 FB | 	rdlong	arg01, fp
127b0     09 13 52 F6 | 	abs	arg01, arg01 wc
127b4     1F 26 C6 C9 |  if_b	decod	local05, #31
127b8     00 26 06 36 |  if_ae	mov	local05, #0
127bc     F0 E4 B0 FD | 	call	#__system___float_fromuns
127c0     13 FB 61 F5 | 	xor	result1, local05
127c4     FD 12 02 F6 | 	mov	arg01, result1
127c8     0C 4E 05 F1 | 	add	fp, #12
127cc     A7 14 02 FB | 	rdlong	arg02, fp
127d0     0C 4E 85 F1 | 	sub	fp, #12
127d4     01 16 06 F6 | 	mov	arg03, #1
127d8     0C ED B0 FD | 	call	#__system___float_cmp
127dc     01 FA 55 F2 | 	cmps	result1, #1 wc
127e0     00 1E 26 C6 |  if_b	not	local01, #0
127e4     A7 1E 62 FC | 	wrlong	local01, fp
127e8     8C 02 90 FD | 	jmp	#LR__1463
127ec                 | LR__1454
127ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
127ec     08 4E 05 F1 | 	add	fp, #8
127f0     A7 1E 02 FB | 	rdlong	local01, fp
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
127fc     14 4E 05 A1 |  if_e	add	fp, #20
12800     A7 24 02 AB |  if_e	rdlong	local04, fp
12804     14 4E 85 A1 |  if_e	sub	fp, #20
12808     12 23 02 A6 |  if_e	mov	local03, local04
1280c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12810     24 00 90 5D |  if_ne	jmp	#LR__1455
12814     00 1E 06 F6 | 	mov	local01, #0
12818     A7 20 02 FB | 	rdlong	local02, fp
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 22 02 FB | 	rdlong	local03, fp
12824     0C 4E 85 F1 | 	sub	fp, #12
12828     11 21 5A F2 | 	cmps	local02, local03 wcz
1282c     01 1E 66 E6 |  if_be	neg	local01, #1
12830     A7 1E 62 FC | 	wrlong	local01, fp
12834     40 02 90 FD | 	jmp	#LR__1463
12838                 | LR__1455
12838                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12838     08 4E 05 F1 | 	add	fp, #8
1283c     A7 1E 02 FB | 	rdlong	local01, fp
12840     08 4E 85 F1 | 	sub	fp, #8
12844     1C 1E 0E F2 | 	cmp	local01, #28 wz
12848     14 4E 05 A1 |  if_e	add	fp, #20
1284c     A7 24 02 AB |  if_e	rdlong	local04, fp
12850     14 4E 85 A1 |  if_e	sub	fp, #20
12854     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12858     24 00 90 5D |  if_ne	jmp	#LR__1456
1285c     00 1E 06 F6 | 	mov	local01, #0
12860     A7 20 02 FB | 	rdlong	local02, fp
12864     0C 4E 05 F1 | 	add	fp, #12
12868     A7 22 02 FB | 	rdlong	local03, fp
1286c     0C 4E 85 F1 | 	sub	fp, #12
12870     11 21 5A F2 | 	cmps	local02, local03 wcz
12874     01 1E 66 E6 |  if_be	neg	local01, #1
12878     A7 1E 62 FC | 	wrlong	local01, fp
1287c     F8 01 90 FD | 	jmp	#LR__1463
12880                 | LR__1456
12880                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12880     08 4E 05 F1 | 	add	fp, #8
12884     A7 1E 02 FB | 	rdlong	local01, fp
12888     08 4E 85 F1 | 	sub	fp, #8
1288c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12890     14 4E 05 A1 |  if_e	add	fp, #20
12894     A7 22 02 AB |  if_e	rdlong	local03, fp
12898     14 4E 85 A1 |  if_e	sub	fp, #20
1289c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
128a0     34 00 90 5D |  if_ne	jmp	#LR__1457
128a4     00 1E 06 F6 | 	mov	local01, #0
128a8     A7 12 02 FB | 	rdlong	arg01, fp
128ac     00 E4 B0 FD | 	call	#__system___float_fromuns
128b0     FD 12 02 F6 | 	mov	arg01, result1
128b4     0C 4E 05 F1 | 	add	fp, #12
128b8     A7 14 02 FB | 	rdlong	arg02, fp
128bc     0C 4E 85 F1 | 	sub	fp, #12
128c0     01 16 06 F6 | 	mov	arg03, #1
128c4     20 EC B0 FD | 	call	#__system___float_cmp
128c8     01 FA 55 F2 | 	cmps	result1, #1 wc
128cc     00 1E 26 C6 |  if_b	not	local01, #0
128d0     A7 1E 62 FC | 	wrlong	local01, fp
128d4     A0 01 90 FD | 	jmp	#LR__1463
128d8                 | LR__1457
128d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
128d8     08 4E 05 F1 | 	add	fp, #8
128dc     A7 1E 02 FB | 	rdlong	local01, fp
128e0     08 4E 85 F1 | 	sub	fp, #8
128e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
128e8     14 4E 05 A1 |  if_e	add	fp, #20
128ec     A7 22 02 AB |  if_e	rdlong	local03, fp
128f0     14 4E 85 A1 |  if_e	sub	fp, #20
128f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128f8     24 00 90 5D |  if_ne	jmp	#LR__1458
128fc     00 1E 06 F6 | 	mov	local01, #0
12900     A7 20 02 FB | 	rdlong	local02, fp
12904     0C 4E 05 F1 | 	add	fp, #12
12908     A7 22 02 FB | 	rdlong	local03, fp
1290c     0C 4E 85 F1 | 	sub	fp, #12
12910     11 21 5A F2 | 	cmps	local02, local03 wcz
12914     01 1E 66 E6 |  if_be	neg	local01, #1
12918     A7 1E 62 FC | 	wrlong	local01, fp
1291c     58 01 90 FD | 	jmp	#LR__1463
12920                 | LR__1458
12920                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12920     08 4E 05 F1 | 	add	fp, #8
12924     A7 1E 02 FB | 	rdlong	local01, fp
12928     08 4E 85 F1 | 	sub	fp, #8
1292c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12930     14 4E 05 A1 |  if_e	add	fp, #20
12934     A7 22 02 AB |  if_e	rdlong	local03, fp
12938     14 4E 85 A1 |  if_e	sub	fp, #20
1293c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12940     24 00 90 5D |  if_ne	jmp	#LR__1459
12944     00 1E 06 F6 | 	mov	local01, #0
12948     A7 20 02 FB | 	rdlong	local02, fp
1294c     0C 4E 05 F1 | 	add	fp, #12
12950     A7 22 02 FB | 	rdlong	local03, fp
12954     0C 4E 85 F1 | 	sub	fp, #12
12958     11 21 1A F2 | 	cmp	local02, local03 wcz
1295c     01 1E 66 E6 |  if_be	neg	local01, #1
12960     A7 1E 62 FC | 	wrlong	local01, fp
12964     10 01 90 FD | 	jmp	#LR__1463
12968                 | LR__1459
12968                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12968     08 4E 05 F1 | 	add	fp, #8
1296c     A7 1E 02 FB | 	rdlong	local01, fp
12970     08 4E 85 F1 | 	sub	fp, #8
12974     2B 1E 0E F2 | 	cmp	local01, #43 wz
12978     14 4E 05 A1 |  if_e	add	fp, #20
1297c     A7 22 02 AB |  if_e	rdlong	local03, fp
12980     14 4E 85 A1 |  if_e	sub	fp, #20
12984     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12988     30 00 90 5D |  if_ne	jmp	#LR__1460
1298c     00 1E 06 F6 | 	mov	local01, #0
12990     A7 12 02 FB | 	rdlong	arg01, fp
12994     B4 BD BF FD | 	call	#_convertstring
12998     FD 12 02 F6 | 	mov	arg01, result1
1299c     0C 4E 05 F1 | 	add	fp, #12
129a0     A7 14 02 FB | 	rdlong	arg02, fp
129a4     0C 4E 85 F1 | 	sub	fp, #12
129a8     B4 BB B0 FD | 	call	#__system___string_cmp
129ac     01 FA 55 F2 | 	cmps	result1, #1 wc
129b0     00 1E 26 C6 |  if_b	not	local01, #0
129b4     A7 1E 62 FC | 	wrlong	local01, fp
129b8     BC 00 90 FD | 	jmp	#LR__1463
129bc                 | LR__1460
129bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
129bc     08 4E 05 F1 | 	add	fp, #8
129c0     A7 1E 02 FB | 	rdlong	local01, fp
129c4     08 4E 85 F1 | 	sub	fp, #8
129c8     1F 1E 0E F2 | 	cmp	local01, #31 wz
129cc     14 4E 05 A1 |  if_e	add	fp, #20
129d0     A7 22 02 AB |  if_e	rdlong	local03, fp
129d4     14 4E 85 A1 |  if_e	sub	fp, #20
129d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
129dc     34 00 90 5D |  if_ne	jmp	#LR__1461
129e0     00 1E 06 F6 | 	mov	local01, #0
129e4     A7 20 02 FB | 	rdlong	local02, fp
129e8     0C 4E 05 F1 | 	add	fp, #12
129ec     A7 12 02 FB | 	rdlong	arg01, fp
129f0     0C 4E 85 F1 | 	sub	fp, #12
129f4     54 BD BF FD | 	call	#_convertstring
129f8     FD 14 02 F6 | 	mov	arg02, result1
129fc     10 13 02 F6 | 	mov	arg01, local02
12a00     5C BB B0 FD | 	call	#__system___string_cmp
12a04     01 FA 55 F2 | 	cmps	result1, #1 wc
12a08     00 1E 26 C6 |  if_b	not	local01, #0
12a0c     A7 1E 62 FC | 	wrlong	local01, fp
12a10     64 00 90 FD | 	jmp	#LR__1463
12a14                 | LR__1461
12a14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12a14     08 4E 05 F1 | 	add	fp, #8
12a18     A7 1E 02 FB | 	rdlong	local01, fp
12a1c     08 4E 85 F1 | 	sub	fp, #8
12a20     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a24     14 4E 05 A1 |  if_e	add	fp, #20
12a28     A7 22 02 AB |  if_e	rdlong	local03, fp
12a2c     14 4E 85 A1 |  if_e	sub	fp, #20
12a30     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12a34     3C 00 90 5D |  if_ne	jmp	#LR__1462
12a38     00 1E 06 F6 | 	mov	local01, #0
12a3c     A7 12 02 FB | 	rdlong	arg01, fp
12a40     08 BD BF FD | 	call	#_convertstring
12a44     FD 20 02 F6 | 	mov	local02, result1
12a48     0C 4E 05 F1 | 	add	fp, #12
12a4c     A7 12 02 FB | 	rdlong	arg01, fp
12a50     0C 4E 85 F1 | 	sub	fp, #12
12a54     F4 BC BF FD | 	call	#_convertstring
12a58     FD 14 02 F6 | 	mov	arg02, result1
12a5c     10 13 02 F6 | 	mov	arg01, local02
12a60     FC BA B0 FD | 	call	#__system___string_cmp
12a64     01 FA 55 F2 | 	cmps	result1, #1 wc
12a68     00 1E 26 C6 |  if_b	not	local01, #0
12a6c     A7 1E 62 FC | 	wrlong	local01, fp
12a70     04 00 90 FD | 	jmp	#LR__1463
12a74                 | LR__1462
12a74     A7 00 68 FC | 	wrlong	#0, fp
12a78                 | LR__1463
12a78     08 4E 05 F1 | 	add	fp, #8
12a7c     A7 38 68 FC | 	wrlong	#28, fp
12a80     08 4E 85 F1 | 	sub	fp, #8
12a84     A7 12 02 F6 | 	mov	arg01, fp
12a88     B0 7A BF FD | 	call	#_push
12a8c     A7 F0 03 F6 | 	mov	ptra, fp
12a90     B2 00 A0 FD | 	call	#popregs_
12a94                 | _do_le_ret
12a94     2D 00 64 FD | 	ret
12a98                 | 
12a98                 | ' 
12a98                 | ' 
12a98                 | ' sub do_ne
12a98                 | _do_ne
12a98     05 4A 05 F6 | 	mov	COUNT_, #5
12a9c     A8 00 A0 FD | 	call	#pushregs_
12aa0     18 F0 07 F1 | 	add	ptra, #24
12aa4     FC 79 BF FD | 	call	#_pop
12aa8     FD 1E 02 F6 | 	mov	local01, result1
12aac     FE 20 02 F6 | 	mov	local02, result2
12ab0     FF 22 02 F6 | 	mov	local03, result3
12ab4     0C 4E 05 F1 | 	add	fp, #12
12ab8     A7 1E 62 FC | 	wrlong	local01, fp
12abc     04 4E 05 F1 | 	add	fp, #4
12ac0     A7 20 62 FC | 	wrlong	local02, fp
12ac4     04 4E 05 F1 | 	add	fp, #4
12ac8     A7 22 62 FC | 	wrlong	local03, fp
12acc     14 4E 85 F1 | 	sub	fp, #20
12ad0     D0 79 BF FD | 	call	#_pop
12ad4     FF 22 02 F6 | 	mov	local03, result3
12ad8     A7 FA 61 FC | 	wrlong	result1, fp
12adc     04 4E 05 F1 | 	add	fp, #4
12ae0     A7 FC 61 FC | 	wrlong	result2, fp
12ae4     04 4E 05 F1 | 	add	fp, #4
12ae8     A7 22 62 FC | 	wrlong	local03, fp
12aec                 | ' t2=pop()
12aec                 | ' t1=pop()
12aec                 | ' 
12aec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
12aec     08 4E 85 F1 | 	sub	fp, #8
12af0     1F 22 0E F2 | 	cmp	local03, #31 wz
12af4     14 4E 05 A1 |  if_e	add	fp, #20
12af8     A7 24 02 AB |  if_e	rdlong	local04, fp
12afc     14 4E 85 A1 |  if_e	sub	fp, #20
12b00     12 23 02 A6 |  if_e	mov	local03, local04
12b04     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12b08     28 00 90 5D |  if_ne	jmp	#LR__1470
12b0c     00 1E 06 F6 | 	mov	local01, #0
12b10     A7 12 02 FB | 	rdlong	arg01, fp
12b14     0C 4E 05 F1 | 	add	fp, #12
12b18     A7 14 02 FB | 	rdlong	arg02, fp
12b1c     0C 4E 85 F1 | 	sub	fp, #12
12b20     3C BA B0 FD | 	call	#__system___string_cmp
12b24     00 FA 0D F2 | 	cmp	result1, #0 wz
12b28     00 1E 26 56 |  if_ne	not	local01, #0
12b2c     A7 1E 62 FC | 	wrlong	local01, fp
12b30     1C 04 90 FD | 	jmp	#LR__1483
12b34                 | LR__1470
12b34                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
12b34     08 4E 05 F1 | 	add	fp, #8
12b38     A7 1E 02 FB | 	rdlong	local01, fp
12b3c     08 4E 85 F1 | 	sub	fp, #8
12b40     1E 1E 0E F2 | 	cmp	local01, #30 wz
12b44     14 4E 05 A1 |  if_e	add	fp, #20
12b48     A7 24 02 AB |  if_e	rdlong	local04, fp
12b4c     14 4E 85 A1 |  if_e	sub	fp, #20
12b50     12 23 02 A6 |  if_e	mov	local03, local04
12b54     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12b58     2C 00 90 5D |  if_ne	jmp	#LR__1471
12b5c     00 1E 06 F6 | 	mov	local01, #0
12b60     A7 12 02 FB | 	rdlong	arg01, fp
12b64     0C 4E 05 F1 | 	add	fp, #12
12b68     A7 14 02 FB | 	rdlong	arg02, fp
12b6c     0C 4E 85 F1 | 	sub	fp, #12
12b70     01 16 06 F6 | 	mov	arg03, #1
12b74     70 E9 B0 FD | 	call	#__system___float_cmp
12b78     00 FA 0D F2 | 	cmp	result1, #0 wz
12b7c     00 1E 26 56 |  if_ne	not	local01, #0
12b80     A7 1E 62 FC | 	wrlong	local01, fp
12b84     C8 03 90 FD | 	jmp	#LR__1483
12b88                 | LR__1471
12b88                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
12b88     08 4E 05 F1 | 	add	fp, #8
12b8c     A7 1E 02 FB | 	rdlong	local01, fp
12b90     08 4E 85 F1 | 	sub	fp, #8
12b94     1E 1E 0E F2 | 	cmp	local01, #30 wz
12b98     14 4E 05 A1 |  if_e	add	fp, #20
12b9c     A7 24 02 AB |  if_e	rdlong	local04, fp
12ba0     14 4E 85 A1 |  if_e	sub	fp, #20
12ba4     12 23 02 A6 |  if_e	mov	local03, local04
12ba8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12bac     48 00 90 5D |  if_ne	jmp	#LR__1472
12bb0     00 1E 06 F6 | 	mov	local01, #0
12bb4     A7 20 02 FB | 	rdlong	local02, fp
12bb8     0C 4E 05 F1 | 	add	fp, #12
12bbc     A7 12 02 FB | 	rdlong	arg01, fp
12bc0     0C 4E 85 F1 | 	sub	fp, #12
12bc4     09 13 52 F6 | 	abs	arg01, arg01 wc
12bc8     1F 26 C6 C9 |  if_b	decod	local05, #31
12bcc     00 26 06 36 |  if_ae	mov	local05, #0
12bd0     DC E0 B0 FD | 	call	#__system___float_fromuns
12bd4     13 FB 61 F5 | 	xor	result1, local05
12bd8     FD 14 02 F6 | 	mov	arg02, result1
12bdc     10 13 02 F6 | 	mov	arg01, local02
12be0     01 16 06 F6 | 	mov	arg03, #1
12be4     00 E9 B0 FD | 	call	#__system___float_cmp
12be8     00 FA 0D F2 | 	cmp	result1, #0 wz
12bec     00 1E 26 56 |  if_ne	not	local01, #0
12bf0     A7 1E 62 FC | 	wrlong	local01, fp
12bf4     58 03 90 FD | 	jmp	#LR__1483
12bf8                 | LR__1472
12bf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
12bf8     08 4E 05 F1 | 	add	fp, #8
12bfc     A7 1E 02 FB | 	rdlong	local01, fp
12c00     08 4E 85 F1 | 	sub	fp, #8
12c04     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c08     14 4E 05 A1 |  if_e	add	fp, #20
12c0c     A7 24 02 AB |  if_e	rdlong	local04, fp
12c10     14 4E 85 A1 |  if_e	sub	fp, #20
12c14     12 23 02 A6 |  if_e	mov	local03, local04
12c18     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12c1c     38 00 90 5D |  if_ne	jmp	#LR__1473
12c20     00 1E 06 F6 | 	mov	local01, #0
12c24     A7 20 02 FB | 	rdlong	local02, fp
12c28     0C 4E 05 F1 | 	add	fp, #12
12c2c     A7 12 02 FB | 	rdlong	arg01, fp
12c30     0C 4E 85 F1 | 	sub	fp, #12
12c34     78 E0 B0 FD | 	call	#__system___float_fromuns
12c38     FD 14 02 F6 | 	mov	arg02, result1
12c3c     10 13 02 F6 | 	mov	arg01, local02
12c40     01 16 06 F6 | 	mov	arg03, #1
12c44     A0 E8 B0 FD | 	call	#__system___float_cmp
12c48     00 FA 0D F2 | 	cmp	result1, #0 wz
12c4c     00 1E 26 56 |  if_ne	not	local01, #0
12c50     A7 1E 62 FC | 	wrlong	local01, fp
12c54     F8 02 90 FD | 	jmp	#LR__1483
12c58                 | LR__1473
12c58                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
12c58     08 4E 05 F1 | 	add	fp, #8
12c5c     A7 1E 02 FB | 	rdlong	local01, fp
12c60     08 4E 85 F1 | 	sub	fp, #8
12c64     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c68     14 4E 05 A1 |  if_e	add	fp, #20
12c6c     A7 24 02 AB |  if_e	rdlong	local04, fp
12c70     14 4E 85 A1 |  if_e	sub	fp, #20
12c74     12 23 02 A6 |  if_e	mov	local03, local04
12c78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c7c     44 00 90 5D |  if_ne	jmp	#LR__1474
12c80     00 1E 06 F6 | 	mov	local01, #0
12c84     A7 12 02 FB | 	rdlong	arg01, fp
12c88     09 13 52 F6 | 	abs	arg01, arg01 wc
12c8c     1F 26 C6 C9 |  if_b	decod	local05, #31
12c90     00 26 06 36 |  if_ae	mov	local05, #0
12c94     18 E0 B0 FD | 	call	#__system___float_fromuns
12c98     13 FB 61 F5 | 	xor	result1, local05
12c9c     FD 12 02 F6 | 	mov	arg01, result1
12ca0     0C 4E 05 F1 | 	add	fp, #12
12ca4     A7 14 02 FB | 	rdlong	arg02, fp
12ca8     0C 4E 85 F1 | 	sub	fp, #12
12cac     01 16 06 F6 | 	mov	arg03, #1
12cb0     34 E8 B0 FD | 	call	#__system___float_cmp
12cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
12cb8     00 1E 26 56 |  if_ne	not	local01, #0
12cbc     A7 1E 62 FC | 	wrlong	local01, fp
12cc0     8C 02 90 FD | 	jmp	#LR__1483
12cc4                 | LR__1474
12cc4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
12cc4     08 4E 05 F1 | 	add	fp, #8
12cc8     A7 1E 02 FB | 	rdlong	local01, fp
12ccc     08 4E 85 F1 | 	sub	fp, #8
12cd0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cd4     14 4E 05 A1 |  if_e	add	fp, #20
12cd8     A7 24 02 AB |  if_e	rdlong	local04, fp
12cdc     14 4E 85 A1 |  if_e	sub	fp, #20
12ce0     12 23 02 A6 |  if_e	mov	local03, local04
12ce4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12ce8     24 00 90 5D |  if_ne	jmp	#LR__1475
12cec     00 1E 06 F6 | 	mov	local01, #0
12cf0     A7 20 02 FB | 	rdlong	local02, fp
12cf4     0C 4E 05 F1 | 	add	fp, #12
12cf8     A7 22 02 FB | 	rdlong	local03, fp
12cfc     0C 4E 85 F1 | 	sub	fp, #12
12d00     11 21 0A F2 | 	cmp	local02, local03 wz
12d04     01 1E 66 56 |  if_ne	neg	local01, #1
12d08     A7 1E 62 FC | 	wrlong	local01, fp
12d0c     40 02 90 FD | 	jmp	#LR__1483
12d10                 | LR__1475
12d10                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
12d10     08 4E 05 F1 | 	add	fp, #8
12d14     A7 1E 02 FB | 	rdlong	local01, fp
12d18     08 4E 85 F1 | 	sub	fp, #8
12d1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d20     14 4E 05 A1 |  if_e	add	fp, #20
12d24     A7 24 02 AB |  if_e	rdlong	local04, fp
12d28     14 4E 85 A1 |  if_e	sub	fp, #20
12d2c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12d30     24 00 90 5D |  if_ne	jmp	#LR__1476
12d34     00 1E 06 F6 | 	mov	local01, #0
12d38     A7 20 02 FB | 	rdlong	local02, fp
12d3c     0C 4E 05 F1 | 	add	fp, #12
12d40     A7 22 02 FB | 	rdlong	local03, fp
12d44     0C 4E 85 F1 | 	sub	fp, #12
12d48     11 21 0A F2 | 	cmp	local02, local03 wz
12d4c     01 1E 66 56 |  if_ne	neg	local01, #1
12d50     A7 1E 62 FC | 	wrlong	local01, fp
12d54     F8 01 90 FD | 	jmp	#LR__1483
12d58                 | LR__1476
12d58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
12d58     08 4E 05 F1 | 	add	fp, #8
12d5c     A7 1E 02 FB | 	rdlong	local01, fp
12d60     08 4E 85 F1 | 	sub	fp, #8
12d64     1D 1E 0E F2 | 	cmp	local01, #29 wz
12d68     14 4E 05 A1 |  if_e	add	fp, #20
12d6c     A7 22 02 AB |  if_e	rdlong	local03, fp
12d70     14 4E 85 A1 |  if_e	sub	fp, #20
12d74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d78     34 00 90 5D |  if_ne	jmp	#LR__1477
12d7c     00 1E 06 F6 | 	mov	local01, #0
12d80     A7 12 02 FB | 	rdlong	arg01, fp
12d84     28 DF B0 FD | 	call	#__system___float_fromuns
12d88     FD 12 02 F6 | 	mov	arg01, result1
12d8c     0C 4E 05 F1 | 	add	fp, #12
12d90     A7 14 02 FB | 	rdlong	arg02, fp
12d94     0C 4E 85 F1 | 	sub	fp, #12
12d98     01 16 06 F6 | 	mov	arg03, #1
12d9c     48 E7 B0 FD | 	call	#__system___float_cmp
12da0     00 FA 0D F2 | 	cmp	result1, #0 wz
12da4     00 1E 26 56 |  if_ne	not	local01, #0
12da8     A7 1E 62 FC | 	wrlong	local01, fp
12dac     A0 01 90 FD | 	jmp	#LR__1483
12db0                 | LR__1477
12db0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
12db0     08 4E 05 F1 | 	add	fp, #8
12db4     A7 1E 02 FB | 	rdlong	local01, fp
12db8     08 4E 85 F1 | 	sub	fp, #8
12dbc     1D 1E 0E F2 | 	cmp	local01, #29 wz
12dc0     14 4E 05 A1 |  if_e	add	fp, #20
12dc4     A7 22 02 AB |  if_e	rdlong	local03, fp
12dc8     14 4E 85 A1 |  if_e	sub	fp, #20
12dcc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12dd0     24 00 90 5D |  if_ne	jmp	#LR__1478
12dd4     00 1E 06 F6 | 	mov	local01, #0
12dd8     A7 20 02 FB | 	rdlong	local02, fp
12ddc     0C 4E 05 F1 | 	add	fp, #12
12de0     A7 22 02 FB | 	rdlong	local03, fp
12de4     0C 4E 85 F1 | 	sub	fp, #12
12de8     11 21 0A F2 | 	cmp	local02, local03 wz
12dec     01 1E 66 56 |  if_ne	neg	local01, #1
12df0     A7 1E 62 FC | 	wrlong	local01, fp
12df4     58 01 90 FD | 	jmp	#LR__1483
12df8                 | LR__1478
12df8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
12df8     08 4E 05 F1 | 	add	fp, #8
12dfc     A7 1E 02 FB | 	rdlong	local01, fp
12e00     08 4E 85 F1 | 	sub	fp, #8
12e04     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e08     14 4E 05 A1 |  if_e	add	fp, #20
12e0c     A7 22 02 AB |  if_e	rdlong	local03, fp
12e10     14 4E 85 A1 |  if_e	sub	fp, #20
12e14     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12e18     24 00 90 5D |  if_ne	jmp	#LR__1479
12e1c     00 1E 06 F6 | 	mov	local01, #0
12e20     A7 20 02 FB | 	rdlong	local02, fp
12e24     0C 4E 05 F1 | 	add	fp, #12
12e28     A7 22 02 FB | 	rdlong	local03, fp
12e2c     0C 4E 85 F1 | 	sub	fp, #12
12e30     11 21 0A F2 | 	cmp	local02, local03 wz
12e34     01 1E 66 56 |  if_ne	neg	local01, #1
12e38     A7 1E 62 FC | 	wrlong	local01, fp
12e3c     10 01 90 FD | 	jmp	#LR__1483
12e40                 | LR__1479
12e40                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
12e40     08 4E 05 F1 | 	add	fp, #8
12e44     A7 1E 02 FB | 	rdlong	local01, fp
12e48     08 4E 85 F1 | 	sub	fp, #8
12e4c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12e50     14 4E 05 A1 |  if_e	add	fp, #20
12e54     A7 22 02 AB |  if_e	rdlong	local03, fp
12e58     14 4E 85 A1 |  if_e	sub	fp, #20
12e5c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12e60     30 00 90 5D |  if_ne	jmp	#LR__1480
12e64     00 1E 06 F6 | 	mov	local01, #0
12e68     A7 12 02 FB | 	rdlong	arg01, fp
12e6c     DC B8 BF FD | 	call	#_convertstring
12e70     FD 12 02 F6 | 	mov	arg01, result1
12e74     0C 4E 05 F1 | 	add	fp, #12
12e78     A7 14 02 FB | 	rdlong	arg02, fp
12e7c     0C 4E 85 F1 | 	sub	fp, #12
12e80     DC B6 B0 FD | 	call	#__system___string_cmp
12e84     00 FA 0D F2 | 	cmp	result1, #0 wz
12e88     00 1E 26 56 |  if_ne	not	local01, #0
12e8c     A7 1E 62 FC | 	wrlong	local01, fp
12e90     BC 00 90 FD | 	jmp	#LR__1483
12e94                 | LR__1480
12e94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
12e94     08 4E 05 F1 | 	add	fp, #8
12e98     A7 1E 02 FB | 	rdlong	local01, fp
12e9c     08 4E 85 F1 | 	sub	fp, #8
12ea0     1F 1E 0E F2 | 	cmp	local01, #31 wz
12ea4     14 4E 05 A1 |  if_e	add	fp, #20
12ea8     A7 22 02 AB |  if_e	rdlong	local03, fp
12eac     14 4E 85 A1 |  if_e	sub	fp, #20
12eb0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12eb4     34 00 90 5D |  if_ne	jmp	#LR__1481
12eb8     00 1E 06 F6 | 	mov	local01, #0
12ebc     A7 20 02 FB | 	rdlong	local02, fp
12ec0     0C 4E 05 F1 | 	add	fp, #12
12ec4     A7 12 02 FB | 	rdlong	arg01, fp
12ec8     0C 4E 85 F1 | 	sub	fp, #12
12ecc     7C B8 BF FD | 	call	#_convertstring
12ed0     FD 14 02 F6 | 	mov	arg02, result1
12ed4     10 13 02 F6 | 	mov	arg01, local02
12ed8     84 B6 B0 FD | 	call	#__system___string_cmp
12edc     00 FA 0D F2 | 	cmp	result1, #0 wz
12ee0     00 1E 26 56 |  if_ne	not	local01, #0
12ee4     A7 1E 62 FC | 	wrlong	local01, fp
12ee8     64 00 90 FD | 	jmp	#LR__1483
12eec                 | LR__1481
12eec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
12eec     08 4E 05 F1 | 	add	fp, #8
12ef0     A7 1E 02 FB | 	rdlong	local01, fp
12ef4     08 4E 85 F1 | 	sub	fp, #8
12ef8     2B 1E 0E F2 | 	cmp	local01, #43 wz
12efc     14 4E 05 A1 |  if_e	add	fp, #20
12f00     A7 22 02 AB |  if_e	rdlong	local03, fp
12f04     14 4E 85 A1 |  if_e	sub	fp, #20
12f08     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12f0c     3C 00 90 5D |  if_ne	jmp	#LR__1482
12f10     00 1E 06 F6 | 	mov	local01, #0
12f14     A7 12 02 FB | 	rdlong	arg01, fp
12f18     30 B8 BF FD | 	call	#_convertstring
12f1c     FD 20 02 F6 | 	mov	local02, result1
12f20     0C 4E 05 F1 | 	add	fp, #12
12f24     A7 12 02 FB | 	rdlong	arg01, fp
12f28     0C 4E 85 F1 | 	sub	fp, #12
12f2c     1C B8 BF FD | 	call	#_convertstring
12f30     FD 14 02 F6 | 	mov	arg02, result1
12f34     10 13 02 F6 | 	mov	arg01, local02
12f38     24 B6 B0 FD | 	call	#__system___string_cmp
12f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
12f40     00 1E 26 56 |  if_ne	not	local01, #0
12f44     A7 1E 62 FC | 	wrlong	local01, fp
12f48     04 00 90 FD | 	jmp	#LR__1483
12f4c                 | LR__1482
12f4c     A7 00 68 FC | 	wrlong	#0, fp
12f50                 | LR__1483
12f50     08 4E 05 F1 | 	add	fp, #8
12f54     A7 38 68 FC | 	wrlong	#28, fp
12f58     08 4E 85 F1 | 	sub	fp, #8
12f5c     A7 12 02 F6 | 	mov	arg01, fp
12f60     D8 75 BF FD | 	call	#_push
12f64     A7 F0 03 F6 | 	mov	ptra, fp
12f68     B2 00 A0 FD | 	call	#popregs_
12f6c                 | _do_ne_ret
12f6c     2D 00 64 FD | 	ret
12f70                 | 
12f70                 | ' 
12f70                 | ' 
12f70                 | ' 
12f70                 | ' ' -------------------   convert a variable on the top of stack to integer
12f70                 | ' 
12f70                 | ' 'sub do_converttoint'
12f70                 | ' 
12f70                 | ' 'dim t1 as expr_result 
12f70                 | ' 'dim a1,r as integer
12f70                 | ' 't1=pop() 
12f70                 | ' 'select case t1.result_type
12f70                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
12f70                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
12f70                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
12f70                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
12f70                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
12f70                 | ' '  case result_error: a1=0: r=t1.result.uresult
12f70                 | ' '  case else : a1=0 : r=1
12f70                 | ' 
12f70                 | ' 'end select
12f70                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
12f70                 | ' 
12f70                 | ' 'end sub
12f70                 | ' 
12f70                 | ' function converttoint (t1 as expr_result) as integer
12f70                 | _converttoint
12f70     02 4A 05 F6 | 	mov	COUNT_, #2
12f74     A8 00 A0 FD | 	call	#pushregs_
12f78     09 1F 02 F6 | 	mov	local01, arg01
12f7c                 | ' 
12f7c                 | ' select case t1.result_type
12f7c     08 1E 06 F1 | 	add	local01, #8
12f80     0F 21 02 FB | 	rdlong	local02, local01
12f84     08 1E 86 F1 | 	sub	local01, #8
12f88     1C 20 0E F2 | 	cmp	local02, #28 wz
12f8c     24 00 90 AD |  if_e	jmp	#LR__1490
12f90     1D 20 0E F2 | 	cmp	local02, #29 wz
12f94     24 00 90 AD |  if_e	jmp	#LR__1491
12f98     1E 20 0E F2 | 	cmp	local02, #30 wz
12f9c     24 00 90 AD |  if_e	jmp	#LR__1492
12fa0     1F 20 0E F2 | 	cmp	local02, #31 wz
12fa4     2C 00 90 AD |  if_e	jmp	#LR__1493
12fa8     2B 20 0E F2 | 	cmp	local02, #43 wz
12fac     3C 00 90 AD |  if_e	jmp	#LR__1494
12fb0     58 00 90 FD | 	jmp	#LR__1495
12fb4                 | LR__1490
12fb4     0F FB 01 FB | 	rdlong	result1, local01
12fb8     54 00 90 FD | 	jmp	#LR__1496
12fbc                 | LR__1491
12fbc     0F FB 01 FB | 	rdlong	result1, local01
12fc0     4C 00 90 FD | 	jmp	#LR__1496
12fc4                 | LR__1492
12fc4     0F 13 02 FB | 	rdlong	arg01, local01
12fc8     01 14 06 F6 | 	mov	arg02, #1
12fcc     AC E5 B0 FD | 	call	#__system___float_tointeger
12fd0     3C 00 90 FD | 	jmp	#LR__1496
12fd4                 | LR__1493
12fd4     0F 13 02 FB | 	rdlong	arg01, local01
12fd8     C0 E8 B0 FD | 	call	#__system____builtin_atof
12fdc     FD 12 02 F6 | 	mov	arg01, result1
12fe0     00 14 06 F6 | 	mov	arg02, #0
12fe4     94 E5 B0 FD | 	call	#__system___float_tointeger
12fe8     24 00 90 FD | 	jmp	#LR__1496
12fec                 | LR__1494
12fec     0F 13 02 FB | 	rdlong	arg01, local01
12ff0     58 B7 BF FD | 	call	#_convertstring
12ff4     FD 12 02 F6 | 	mov	arg01, result1
12ff8     A0 E8 B0 FD | 	call	#__system____builtin_atof
12ffc     FD 12 02 F6 | 	mov	arg01, result1
13000     00 14 06 F6 | 	mov	arg02, #0
13004     74 E5 B0 FD | 	call	#__system___float_tointeger
13008     04 00 90 FD | 	jmp	#LR__1496
1300c                 | LR__1495
1300c     00 FA 05 F6 | 	mov	result1, #0
13010                 | LR__1496
13010     A7 F0 03 F6 | 	mov	ptra, fp
13014     B2 00 A0 FD | 	call	#popregs_
13018                 | _converttoint_ret
13018     2D 00 64 FD | 	ret
1301c                 | 
1301c                 | ' 
1301c                 | ' function converttofloat (t1 as expr_result) as single
1301c                 | _converttofloat
1301c     03 4A 05 F6 | 	mov	COUNT_, #3
13020     A8 00 A0 FD | 	call	#pushregs_
13024     09 1F 02 F6 | 	mov	local01, arg01
13028                 | ' 
13028                 | ' select case t1.result_type
13028     08 1E 06 F1 | 	add	local01, #8
1302c     0F 21 02 FB | 	rdlong	local02, local01
13030     08 1E 86 F1 | 	sub	local01, #8
13034     1C 20 0E F2 | 	cmp	local02, #28 wz
13038     24 00 90 AD |  if_e	jmp	#LR__1500
1303c     1D 20 0E F2 | 	cmp	local02, #29 wz
13040     38 00 90 AD |  if_e	jmp	#LR__1501
13044     1E 20 0E F2 | 	cmp	local02, #30 wz
13048     3C 00 90 AD |  if_e	jmp	#LR__1502
1304c     1F 20 0E F2 | 	cmp	local02, #31 wz
13050     3C 00 90 AD |  if_e	jmp	#LR__1503
13054     2B 20 0E F2 | 	cmp	local02, #43 wz
13058     40 00 90 AD |  if_e	jmp	#LR__1504
1305c     50 00 90 FD | 	jmp	#LR__1505
13060                 | LR__1500
13060     0F 13 02 FB | 	rdlong	arg01, local01
13064     09 13 52 F6 | 	abs	arg01, arg01 wc
13068     1F 22 C6 C9 |  if_b	decod	local03, #31
1306c     00 22 06 36 |  if_ae	mov	local03, #0
13070     3C DC B0 FD | 	call	#__system___float_fromuns
13074     11 FB 61 F5 | 	xor	result1, local03
13078     38 00 90 FD | 	jmp	#LR__1506
1307c                 | LR__1501
1307c     0F 13 02 FB | 	rdlong	arg01, local01
13080     2C DC B0 FD | 	call	#__system___float_fromuns
13084     2C 00 90 FD | 	jmp	#LR__1506
13088                 | LR__1502
13088     0F FB 01 FB | 	rdlong	result1, local01
1308c     24 00 90 FD | 	jmp	#LR__1506
13090                 | LR__1503
13090     0F 13 02 FB | 	rdlong	arg01, local01
13094     04 E8 B0 FD | 	call	#__system____builtin_atof
13098     18 00 90 FD | 	jmp	#LR__1506
1309c                 | LR__1504
1309c     0F 13 02 FB | 	rdlong	arg01, local01
130a0     A8 B6 BF FD | 	call	#_convertstring
130a4     FD 12 02 F6 | 	mov	arg01, result1
130a8     F0 E7 B0 FD | 	call	#__system____builtin_atof
130ac     04 00 90 FD | 	jmp	#LR__1506
130b0                 | LR__1505
130b0     00 FA 05 F6 | 	mov	result1, #0
130b4                 | LR__1506
130b4     A7 F0 03 F6 | 	mov	ptra, fp
130b8     B2 00 A0 FD | 	call	#popregs_
130bc                 | _converttofloat_ret
130bc     2D 00 64 FD | 	ret
130c0                 | 
130c0                 | ' 
130c0                 | ' sub do_rnd
130c0                 | _do_rnd
130c0     01 4A 05 F6 | 	mov	COUNT_, #1
130c4     A8 00 A0 FD | 	call	#pushregs_
130c8     10 F0 07 F1 | 	add	ptra, #16
130cc     6A 00 00 FF 
130d0     70 E4 05 F1 | 	add	objptr, ##54384
130d4     F2 1E 02 FB | 	rdlong	local01, objptr
130d8     0F 17 02 F6 | 	mov	arg03, local01
130dc     01 16 66 F0 | 	shl	arg03, #1
130e0     0F 17 02 F1 | 	add	arg03, local01
130e4     02 16 66 F0 | 	shl	arg03, #2
130e8     03 00 00 FF 
130ec     04 E4 85 F1 | 	sub	objptr, ##1540
130f0     F2 16 02 F1 | 	add	arg03, objptr
130f4     0B 17 02 FB | 	rdlong	arg03, arg03
130f8     0C 4E 05 F1 | 	add	fp, #12
130fc     A7 16 62 FC | 	wrlong	arg03, fp
13100                 | ' 
13100                 | ' numpar=compiledline(lineptr_e).result.uresult
13100                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
13100     0C 4E 85 F1 | 	sub	fp, #12
13104     02 16 16 F2 | 	cmp	arg03, #2 wc
13108     67 00 00 FF 
1310c     6C E4 85 F1 | 	sub	objptr, ##52844
13110     3C 00 90 CD |  if_b	jmp	#LR__1510
13114     00 12 06 F6 | 	mov	arg01, #0
13118     B0 0D B1 FD | 	call	#__system___getiolock_0475
1311c     FD 12 02 F6 | 	mov	arg01, result1
13120     14 B4 B0 FD | 	call	#__system___lockmem
13124     70 01 00 FF 
13128     93 15 06 F6 | 	mov	arg02, ##@LR__5107
1312c     00 12 06 F6 | 	mov	arg01, #0
13130     00 16 06 F6 | 	mov	arg03, #0
13134     04 C1 B0 FD | 	call	#__system___basic_print_string
13138     00 12 06 F6 | 	mov	arg01, #0
1313c     8C 0D B1 FD | 	call	#__system___getiolock_0475
13140     FD 00 68 FC | 	wrlong	#0, result1
13144     27 12 06 F6 | 	mov	arg01, #39
13148     90 6F B0 FD | 	call	#_printerror
1314c     2C 01 90 FD | 	jmp	#LR__1517
13150                 | LR__1510
13150                 | ' if numpar=0 then
13150     0C 4E 05 F1 | 	add	fp, #12
13154     A7 FE 09 FB | 	rdlong	result3, fp wz
13158     0C 4E 85 F1 | 	sub	fp, #12
1315c     20 00 90 5D |  if_ne	jmp	#LR__1511
13160     08 4E 05 F1 | 	add	fp, #8
13164     A7 3A 68 FC | 	wrlong	#29, fp
13168     08 4E 85 F1 | 	sub	fp, #8
1316c     1B FA 61 FD | 	getrnd	result1
13170     A7 FA 61 FC | 	wrlong	result1, fp
13174     A7 12 02 F6 | 	mov	arg01, fp
13178     C0 73 BF FD | 	call	#_push
1317c     FC 00 90 FD | 	jmp	#LR__1516
13180                 | LR__1511
13180     20 73 BF FD | 	call	#_pop
13184     A7 FA 61 FC | 	wrlong	result1, fp
13188     04 4E 05 F1 | 	add	fp, #4
1318c     A7 FC 61 FC | 	wrlong	result2, fp
13190     04 4E 05 F1 | 	add	fp, #4
13194     A7 FE 61 FC | 	wrlong	result3, fp
13198                 | '   t1=pop()
13198                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
13198     08 4E 85 F1 | 	sub	fp, #8
1319c     1C FE 0D F2 | 	cmp	result3, #28 wz
131a0     08 4E 05 51 |  if_ne	add	fp, #8
131a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
131a8     08 4E 85 51 |  if_ne	sub	fp, #8
131ac     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
131b0     2C 00 90 5D |  if_ne	jmp	#LR__1512
131b4     1B FA 61 FD | 	getrnd	result1
131b8     A7 1E 02 FB | 	rdlong	local01, fp
131bc     0F FB 11 FD | 	qdiv	result1, local01
131c0     A7 12 02 F6 | 	mov	arg01, fp
131c4     19 1E 62 FD | 	getqy	local01
131c8     A7 1E 62 FC | 	wrlong	local01, fp
131cc     08 4E 05 F1 | 	add	fp, #8
131d0     A7 3A 68 FC | 	wrlong	#29, fp
131d4     08 4E 85 F1 | 	sub	fp, #8
131d8     60 73 BF FD | 	call	#_push
131dc     9C 00 90 FD | 	jmp	#LR__1515
131e0                 | LR__1512
131e0     08 4E 05 F1 | 	add	fp, #8
131e4     A7 1E 02 FB | 	rdlong	local01, fp
131e8     08 4E 85 F1 | 	sub	fp, #8
131ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
131f0     48 00 90 5D |  if_ne	jmp	#LR__1513
131f4     A7 12 02 FB | 	rdlong	arg01, fp
131f8     00 C0 24 FF 
131fc     00 14 06 F6 | 	mov	arg02, ##1233125376
13200     B4 E0 B0 FD | 	call	#__system___float_div
13204     FD 1E 02 F6 | 	mov	local01, result1
13208     1B 12 62 FD | 	getrnd	arg01
1320c     74 13 06 F4 | 	bitl	arg01, #372
13210     9C DA B0 FD | 	call	#__system___float_fromuns
13214     FD 14 02 F6 | 	mov	arg02, result1
13218     0F 13 02 F6 | 	mov	arg01, local01
1321c     94 DE B0 FD | 	call	#__system___float_mul
13220     A7 FA 61 FC | 	wrlong	result1, fp
13224     08 4E 05 F1 | 	add	fp, #8
13228     A7 3C 68 FC | 	wrlong	#30, fp
1322c     08 4E 85 F1 | 	sub	fp, #8
13230     A7 12 02 F6 | 	mov	arg01, fp
13234     04 73 BF FD | 	call	#_push
13238     40 00 90 FD | 	jmp	#LR__1514
1323c                 | LR__1513
1323c                 | '     print "rnd: "; : printerror(40) 
1323c     00 12 06 F6 | 	mov	arg01, #0
13240     88 0C B1 FD | 	call	#__system___getiolock_0475
13244     FD 12 02 F6 | 	mov	arg01, result1
13248     EC B2 B0 FD | 	call	#__system___lockmem
1324c     70 01 00 FF 
13250     99 15 06 F6 | 	mov	arg02, ##@LR__5108
13254     00 12 06 F6 | 	mov	arg01, #0
13258     00 16 06 F6 | 	mov	arg03, #0
1325c     DC BF B0 FD | 	call	#__system___basic_print_string
13260     00 12 06 F6 | 	mov	arg01, #0
13264     64 0C B1 FD | 	call	#__system___getiolock_0475
13268     FD 00 68 FC | 	wrlong	#0, result1
1326c     28 12 06 F6 | 	mov	arg01, #40
13270     68 6E B0 FD | 	call	#_printerror
13274     A7 12 02 F6 | 	mov	arg01, fp
13278     C0 72 BF FD | 	call	#_push
1327c                 | LR__1514
1327c                 | LR__1515
1327c                 | LR__1516
1327c                 | LR__1517
1327c     A7 F0 03 F6 | 	mov	ptra, fp
13280     B2 00 A0 FD | 	call	#popregs_
13284                 | _do_rnd_ret
13284     2D 00 64 FD | 	ret
13288                 | 
13288                 | ' 
13288                 | ' sub do_getenvsustain
13288                 | _do_getenvsustain
13288     01 4A 05 F6 | 	mov	COUNT_, #1
1328c     A8 00 A0 FD | 	call	#pushregs_
13290     10 F0 07 F1 | 	add	ptra, #16
13294     6A 00 00 FF 
13298     70 E4 05 F1 | 	add	objptr, ##54384
1329c     F2 1E 02 FB | 	rdlong	local01, objptr
132a0     0F 17 02 F6 | 	mov	arg03, local01
132a4     01 16 66 F0 | 	shl	arg03, #1
132a8     0F 17 02 F1 | 	add	arg03, local01
132ac     02 16 66 F0 | 	shl	arg03, #2
132b0     03 00 00 FF 
132b4     04 E4 85 F1 | 	sub	objptr, ##1540
132b8     F2 16 02 F1 | 	add	arg03, objptr
132bc     0B 17 02 FB | 	rdlong	arg03, arg03
132c0     0C 4E 05 F1 | 	add	fp, #12
132c4     A7 16 62 FC | 	wrlong	arg03, fp
132c8                 | ' 
132c8                 | ' numpar=compiledline(lineptr_e).result.uresult
132c8                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
132c8     0C 4E 85 F1 | 	sub	fp, #12
132cc     02 16 16 F2 | 	cmp	arg03, #2 wc
132d0     67 00 00 FF 
132d4     6C E4 85 F1 | 	sub	objptr, ##52844
132d8     0C 4E 05 C1 |  if_b	add	fp, #12
132dc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
132e0     0C 4E 85 C1 |  if_b	sub	fp, #12
132e4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
132e8     00 12 06 F6 | 	mov	arg01, #0
132ec     DC 0B B1 FD | 	call	#__system___getiolock_0475
132f0     FD 12 02 F6 | 	mov	arg01, result1
132f4     40 B2 B0 FD | 	call	#__system___lockmem
132f8     70 01 00 FF 
132fc     9F 15 06 F6 | 	mov	arg02, ##@LR__5109
13300     00 12 06 F6 | 	mov	arg01, #0
13304     00 16 06 F6 | 	mov	arg03, #0
13308     30 BF B0 FD | 	call	#__system___basic_print_string
1330c     00 12 06 F6 | 	mov	arg01, #0
13310     B8 0B B1 FD | 	call	#__system___getiolock_0475
13314     FD 00 68 FC | 	wrlong	#0, result1
13318     27 12 06 F6 | 	mov	arg01, #39
1331c     BC 6D B0 FD | 	call	#_printerror
13320     64 00 90 FD | 	jmp	#LR__1521
13324                 | LR__1520
13324     7C 71 BF FD | 	call	#_pop
13328     FD 1E 02 F6 | 	mov	local01, result1
1332c     FE 16 02 F6 | 	mov	arg03, result2
13330     A7 1E 62 FC | 	wrlong	local01, fp
13334     04 4E 05 F1 | 	add	fp, #4
13338     A7 16 62 FC | 	wrlong	arg03, fp
1333c     04 4E 05 F1 | 	add	fp, #4
13340     A7 FE 61 FC | 	wrlong	result3, fp
13344     08 4E 85 F1 | 	sub	fp, #8
13348     A7 12 02 F6 | 	mov	arg01, fp
1334c     20 FC BF FD | 	call	#_converttoint
13350     FD 1E 02 F6 | 	mov	local01, result1
13354     01 1E 66 F0 | 	shl	local01, #1
13358     7B 00 00 FF 
1335c     84 E4 05 F1 | 	add	objptr, ##63108
13360     F2 1E 02 F1 | 	add	local01, objptr
13364     0F 1F E2 FA | 	rdword	local01, local01
13368     A7 1E 62 FC | 	wrlong	local01, fp
1336c     08 4E 05 F1 | 	add	fp, #8
13370     A7 38 68 FC | 	wrlong	#28, fp
13374     08 4E 85 F1 | 	sub	fp, #8
13378     A7 12 02 F6 | 	mov	arg01, fp
1337c     7B 00 00 FF 
13380     84 E4 85 F1 | 	sub	objptr, ##63108
13384     B4 71 BF FD | 	call	#_push
13388                 | LR__1521
13388     A7 F0 03 F6 | 	mov	ptra, fp
1338c     B2 00 A0 FD | 	call	#popregs_
13390                 | _do_getenvsustain_ret
13390     2D 00 64 FD | 	ret
13394                 | 
13394                 | ' 
13394                 | ' sub do_sin
13394                 | _do_sin
13394     01 4A 05 F6 | 	mov	COUNT_, #1
13398     A8 00 A0 FD | 	call	#pushregs_
1339c     10 F0 07 F1 | 	add	ptra, #16
133a0     6A 00 00 FF 
133a4     70 E4 05 F1 | 	add	objptr, ##54384
133a8     F2 1E 02 FB | 	rdlong	local01, objptr
133ac     0F 17 02 F6 | 	mov	arg03, local01
133b0     01 16 66 F0 | 	shl	arg03, #1
133b4     0F 17 02 F1 | 	add	arg03, local01
133b8     02 16 66 F0 | 	shl	arg03, #2
133bc     03 00 00 FF 
133c0     04 E4 85 F1 | 	sub	objptr, ##1540
133c4     F2 16 02 F1 | 	add	arg03, objptr
133c8     0B 17 02 FB | 	rdlong	arg03, arg03
133cc     0C 4E 05 F1 | 	add	fp, #12
133d0     A7 16 62 FC | 	wrlong	arg03, fp
133d4                 | ' 
133d4                 | ' numpar=compiledline(lineptr_e).result.uresult
133d4                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
133d4     0C 4E 85 F1 | 	sub	fp, #12
133d8     02 16 16 F2 | 	cmp	arg03, #2 wc
133dc     67 00 00 FF 
133e0     6C E4 85 F1 | 	sub	objptr, ##52844
133e4     0C 4E 05 C1 |  if_b	add	fp, #12
133e8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
133ec     0C 4E 85 C1 |  if_b	sub	fp, #12
133f0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
133f4     00 12 06 F6 | 	mov	arg01, #0
133f8     D0 0A B1 FD | 	call	#__system___getiolock_0475
133fc     FD 12 02 F6 | 	mov	arg01, result1
13400     34 B1 B0 FD | 	call	#__system___lockmem
13404     70 01 00 FF 
13408     AF 15 06 F6 | 	mov	arg02, ##@LR__5110
1340c     00 12 06 F6 | 	mov	arg01, #0
13410     00 16 06 F6 | 	mov	arg03, #0
13414     24 BE B0 FD | 	call	#__system___basic_print_string
13418     00 12 06 F6 | 	mov	arg01, #0
1341c     AC 0A B1 FD | 	call	#__system___getiolock_0475
13420     FD 00 68 FC | 	wrlong	#0, result1
13424     27 12 06 F6 | 	mov	arg01, #39
13428     B0 6C B0 FD | 	call	#_printerror
1342c     64 00 90 FD | 	jmp	#LR__1531
13430                 | LR__1530
13430     70 70 BF FD | 	call	#_pop
13434     A7 FA 61 FC | 	wrlong	result1, fp
13438     04 4E 05 F1 | 	add	fp, #4
1343c     A7 FC 61 FC | 	wrlong	result2, fp
13440     04 4E 05 F1 | 	add	fp, #4
13444     A7 FE 61 FC | 	wrlong	result3, fp
13448     08 4E 85 F1 | 	sub	fp, #8
1344c     7B 00 00 FF 
13450     78 E4 05 F1 | 	add	objptr, ##63096
13454     F2 1E 02 FB | 	rdlong	local01, objptr
13458     7B 00 00 FF 
1345c     78 E4 85 F1 | 	sub	objptr, ##63096
13460     A7 12 02 F6 | 	mov	arg01, fp
13464     B4 FB BF FD | 	call	#_converttofloat
13468     FD 14 02 F6 | 	mov	arg02, result1
1346c     0F 13 02 F6 | 	mov	arg01, local01
13470     40 DC B0 FD | 	call	#__system___float_mul
13474     FD 12 02 F6 | 	mov	arg01, result1
13478     74 E5 B0 FD | 	call	#__system____builtin_sinf
1347c     A7 FA 61 FC | 	wrlong	result1, fp
13480     08 4E 05 F1 | 	add	fp, #8
13484     A7 3C 68 FC | 	wrlong	#30, fp
13488     08 4E 85 F1 | 	sub	fp, #8
1348c     A7 12 02 F6 | 	mov	arg01, fp
13490     A8 70 BF FD | 	call	#_push
13494                 | LR__1531
13494     A7 F0 03 F6 | 	mov	ptra, fp
13498     B2 00 A0 FD | 	call	#popregs_
1349c                 | _do_sin_ret
1349c     2D 00 64 FD | 	ret
134a0                 | 
134a0                 | ' 
134a0                 | ' 
134a0                 | ' sub do_mid
134a0                 | _do_mid
134a0     00 4A 05 F6 | 	mov	COUNT_, #0
134a4     A8 00 A0 FD | 	call	#pushregs_
134a8     18 F0 07 F1 | 	add	ptra, #24
134ac     6A 00 00 FF 
134b0     70 E4 05 F1 | 	add	objptr, ##54384
134b4     F2 16 02 FB | 	rdlong	arg03, objptr
134b8     0B 15 02 F6 | 	mov	arg02, arg03
134bc     01 14 66 F0 | 	shl	arg02, #1
134c0     0B 15 02 F1 | 	add	arg02, arg03
134c4     02 14 66 F0 | 	shl	arg02, #2
134c8     03 00 00 FF 
134cc     04 E4 85 F1 | 	sub	objptr, ##1540
134d0     F2 14 02 F1 | 	add	arg02, objptr
134d4     0A 17 02 FB | 	rdlong	arg03, arg02
134d8     0C 4E 05 F1 | 	add	fp, #12
134dc     A7 16 62 FC | 	wrlong	arg03, fp
134e0                 | ' 
134e0                 | ' numpar=compiledline(lineptr_e).result.uresult
134e0                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
134e0     0C 4E 85 F1 | 	sub	fp, #12
134e4     03 16 0E F2 | 	cmp	arg03, #3 wz
134e8     67 00 00 FF 
134ec     6C E4 85 F1 | 	sub	objptr, ##52844
134f0     3C 00 90 AD |  if_e	jmp	#LR__1540
134f4     00 12 06 F6 | 	mov	arg01, #0
134f8     D0 09 B1 FD | 	call	#__system___getiolock_0475
134fc     FD 12 02 F6 | 	mov	arg01, result1
13500     34 B0 B0 FD | 	call	#__system___lockmem
13504     70 01 00 FF 
13508     B5 15 06 F6 | 	mov	arg02, ##@LR__5111
1350c     00 12 06 F6 | 	mov	arg01, #0
13510     00 16 06 F6 | 	mov	arg03, #0
13514     24 BD B0 FD | 	call	#__system___basic_print_string
13518     00 12 06 F6 | 	mov	arg01, #0
1351c     AC 09 B1 FD | 	call	#__system___getiolock_0475
13520     FD 00 68 FC | 	wrlong	#0, result1
13524     27 12 06 F6 | 	mov	arg01, #39
13528     B0 6B B0 FD | 	call	#_printerror
1352c     28 01 90 FD | 	jmp	#LR__1543
13530                 | LR__1540
13530     70 6F BF FD | 	call	#_pop
13534     FF 16 02 F6 | 	mov	arg03, result3
13538     A7 FA 61 FC | 	wrlong	result1, fp
1353c     04 4E 05 F1 | 	add	fp, #4
13540     A7 FC 61 FC | 	wrlong	result2, fp
13544     04 4E 05 F1 | 	add	fp, #4
13548     A7 16 62 FC | 	wrlong	arg03, fp
1354c     08 4E 85 F1 | 	sub	fp, #8
13550     A7 12 02 F6 | 	mov	arg01, fp
13554     18 FA BF FD | 	call	#_converttoint
13558     FD 16 02 F6 | 	mov	arg03, result1
1355c     14 4E 05 F1 | 	add	fp, #20
13560     A7 16 62 FC | 	wrlong	arg03, fp
13564     14 4E 85 F1 | 	sub	fp, #20
13568     38 6F BF FD | 	call	#_pop
1356c     FF 16 02 F6 | 	mov	arg03, result3
13570     A7 FA 61 FC | 	wrlong	result1, fp
13574     04 4E 05 F1 | 	add	fp, #4
13578     A7 FC 61 FC | 	wrlong	result2, fp
1357c     04 4E 05 F1 | 	add	fp, #4
13580     A7 16 62 FC | 	wrlong	arg03, fp
13584     08 4E 85 F1 | 	sub	fp, #8
13588     A7 12 02 F6 | 	mov	arg01, fp
1358c     E0 F9 BF FD | 	call	#_converttoint
13590     FD 16 02 F6 | 	mov	arg03, result1
13594     10 4E 05 F1 | 	add	fp, #16
13598     A7 16 62 FC | 	wrlong	arg03, fp
1359c     10 4E 85 F1 | 	sub	fp, #16
135a0     00 6F BF FD | 	call	#_pop
135a4     FF 16 02 F6 | 	mov	arg03, result3
135a8     A7 FA 61 FC | 	wrlong	result1, fp
135ac     04 4E 05 F1 | 	add	fp, #4
135b0     A7 FC 61 FC | 	wrlong	result2, fp
135b4     04 4E 05 F1 | 	add	fp, #4
135b8     A7 16 62 FC | 	wrlong	arg03, fp
135bc                 | ' t1=pop() : arg2=converttoint(t1)
135bc                 | ' t1=pop() : arg1=converttoint(t1)
135bc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
135bc     08 4E 85 F1 | 	sub	fp, #8
135c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
135c4     18 00 90 5D |  if_ne	jmp	#LR__1541
135c8     A7 12 02 FB | 	rdlong	arg01, fp
135cc     7C B1 BF FD | 	call	#_convertstring
135d0     A7 FA 61 FC | 	wrlong	result1, fp
135d4     08 4E 05 F1 | 	add	fp, #8
135d8     A7 3E 68 FC | 	wrlong	#31, fp
135dc     08 4E 85 F1 | 	sub	fp, #8
135e0                 | LR__1541
135e0                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
135e0     08 4E 05 F1 | 	add	fp, #8
135e4     A7 16 02 FB | 	rdlong	arg03, fp
135e8     08 4E 85 F1 | 	sub	fp, #8
135ec     1F 16 0E F2 | 	cmp	arg03, #31 wz
135f0     3C 00 90 AD |  if_e	jmp	#LR__1542
135f4     00 12 06 F6 | 	mov	arg01, #0
135f8     D0 08 B1 FD | 	call	#__system___getiolock_0475
135fc     FD 12 02 F6 | 	mov	arg01, result1
13600     34 AF B0 FD | 	call	#__system___lockmem
13604     70 01 00 FF 
13608     BC 15 06 F6 | 	mov	arg02, ##@LR__5112
1360c     00 12 06 F6 | 	mov	arg01, #0
13610     00 16 06 F6 | 	mov	arg03, #0
13614     24 BC B0 FD | 	call	#__system___basic_print_string
13618     00 12 06 F6 | 	mov	arg01, #0
1361c     AC 08 B1 FD | 	call	#__system___getiolock_0475
13620     FD 00 68 FC | 	wrlong	#0, result1
13624     0F 12 06 F6 | 	mov	arg01, #15
13628     B0 6A B0 FD | 	call	#_printerror
1362c     28 00 90 FD | 	jmp	#LR__1543
13630                 | LR__1542
13630     A7 12 02 FB | 	rdlong	arg01, fp
13634     10 4E 05 F1 | 	add	fp, #16
13638     A7 14 02 FB | 	rdlong	arg02, fp
1363c     04 4E 05 F1 | 	add	fp, #4
13640     A7 16 02 FB | 	rdlong	arg03, fp
13644     14 4E 85 F1 | 	sub	fp, #20
13648     48 D0 B0 FD | 	call	#__system__Mid_S
1364c     A7 FA 61 FC | 	wrlong	result1, fp
13650     A7 12 02 F6 | 	mov	arg01, fp
13654     E4 6E BF FD | 	call	#_push
13658                 | LR__1543
13658     A7 F0 03 F6 | 	mov	ptra, fp
1365c     B2 00 A0 FD | 	call	#popregs_
13660                 | _do_mid_ret
13660     2D 00 64 FD | 	ret
13664                 | 
13664                 | ' 
13664                 | ' sub do_right
13664                 | _do_right
13664     00 4A 05 F6 | 	mov	COUNT_, #0
13668     A8 00 A0 FD | 	call	#pushregs_
1366c     14 F0 07 F1 | 	add	ptra, #20
13670     6A 00 00 FF 
13674     70 E4 05 F1 | 	add	objptr, ##54384
13678     F2 16 02 FB | 	rdlong	arg03, objptr
1367c     0B 15 02 F6 | 	mov	arg02, arg03
13680     01 14 66 F0 | 	shl	arg02, #1
13684     0B 15 02 F1 | 	add	arg02, arg03
13688     02 14 66 F0 | 	shl	arg02, #2
1368c     03 00 00 FF 
13690     04 E4 85 F1 | 	sub	objptr, ##1540
13694     F2 14 02 F1 | 	add	arg02, objptr
13698     0A 17 02 FB | 	rdlong	arg03, arg02
1369c     0C 4E 05 F1 | 	add	fp, #12
136a0     A7 16 62 FC | 	wrlong	arg03, fp
136a4                 | ' 
136a4                 | ' numpar=compiledline(lineptr_e).result.uresult
136a4                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
136a4     0C 4E 85 F1 | 	sub	fp, #12
136a8     02 16 0E F2 | 	cmp	arg03, #2 wz
136ac     67 00 00 FF 
136b0     6C E4 85 F1 | 	sub	objptr, ##52844
136b4     3C 00 90 AD |  if_e	jmp	#LR__1550
136b8     00 12 06 F6 | 	mov	arg01, #0
136bc     0C 08 B1 FD | 	call	#__system___getiolock_0475
136c0     FD 12 02 F6 | 	mov	arg01, result1
136c4     70 AE B0 FD | 	call	#__system___lockmem
136c8     70 01 00 FF 
136cc     C3 15 06 F6 | 	mov	arg02, ##@LR__5113
136d0     00 12 06 F6 | 	mov	arg01, #0
136d4     00 16 06 F6 | 	mov	arg03, #0
136d8     60 BB B0 FD | 	call	#__system___basic_print_string
136dc     00 12 06 F6 | 	mov	arg01, #0
136e0     E8 07 B1 FD | 	call	#__system___getiolock_0475
136e4     FD 00 68 FC | 	wrlong	#0, result1
136e8     27 12 06 F6 | 	mov	arg01, #39
136ec     EC 69 B0 FD | 	call	#_printerror
136f0     E8 00 90 FD | 	jmp	#LR__1553
136f4                 | LR__1550
136f4     AC 6D BF FD | 	call	#_pop
136f8     FF 16 02 F6 | 	mov	arg03, result3
136fc     A7 FA 61 FC | 	wrlong	result1, fp
13700     04 4E 05 F1 | 	add	fp, #4
13704     A7 FC 61 FC | 	wrlong	result2, fp
13708     04 4E 05 F1 | 	add	fp, #4
1370c     A7 16 62 FC | 	wrlong	arg03, fp
13710     08 4E 85 F1 | 	sub	fp, #8
13714     A7 12 02 F6 | 	mov	arg01, fp
13718     54 F8 BF FD | 	call	#_converttoint
1371c     FD 16 02 F6 | 	mov	arg03, result1
13720     10 4E 05 F1 | 	add	fp, #16
13724     A7 16 62 FC | 	wrlong	arg03, fp
13728     10 4E 85 F1 | 	sub	fp, #16
1372c     74 6D BF FD | 	call	#_pop
13730     FF 16 02 F6 | 	mov	arg03, result3
13734     A7 FA 61 FC | 	wrlong	result1, fp
13738     04 4E 05 F1 | 	add	fp, #4
1373c     A7 FC 61 FC | 	wrlong	result2, fp
13740     04 4E 05 F1 | 	add	fp, #4
13744     A7 16 62 FC | 	wrlong	arg03, fp
13748                 | ' t1=pop() : arg=converttoint(t1)
13748                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13748     08 4E 85 F1 | 	sub	fp, #8
1374c     2B 16 0E F2 | 	cmp	arg03, #43 wz
13750     18 00 90 5D |  if_ne	jmp	#LR__1551
13754     A7 12 02 FB | 	rdlong	arg01, fp
13758     F0 AF BF FD | 	call	#_convertstring
1375c     A7 FA 61 FC | 	wrlong	result1, fp
13760     08 4E 05 F1 | 	add	fp, #8
13764     A7 3E 68 FC | 	wrlong	#31, fp
13768     08 4E 85 F1 | 	sub	fp, #8
1376c                 | LR__1551
1376c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1376c     08 4E 05 F1 | 	add	fp, #8
13770     A7 16 02 FB | 	rdlong	arg03, fp
13774     08 4E 85 F1 | 	sub	fp, #8
13778     1F 16 0E F2 | 	cmp	arg03, #31 wz
1377c     3C 00 90 AD |  if_e	jmp	#LR__1552
13780     00 12 06 F6 | 	mov	arg01, #0
13784     44 07 B1 FD | 	call	#__system___getiolock_0475
13788     FD 12 02 F6 | 	mov	arg01, result1
1378c     A8 AD B0 FD | 	call	#__system___lockmem
13790     70 01 00 FF 
13794     CC 15 06 F6 | 	mov	arg02, ##@LR__5114
13798     00 12 06 F6 | 	mov	arg01, #0
1379c     00 16 06 F6 | 	mov	arg03, #0
137a0     98 BA B0 FD | 	call	#__system___basic_print_string
137a4     00 12 06 F6 | 	mov	arg01, #0
137a8     20 07 B1 FD | 	call	#__system___getiolock_0475
137ac     FD 00 68 FC | 	wrlong	#0, result1
137b0     0F 12 06 F6 | 	mov	arg01, #15
137b4     24 69 B0 FD | 	call	#_printerror
137b8     20 00 90 FD | 	jmp	#LR__1553
137bc                 | LR__1552
137bc     A7 12 02 FB | 	rdlong	arg01, fp
137c0     10 4E 05 F1 | 	add	fp, #16
137c4     A7 14 02 FB | 	rdlong	arg02, fp
137c8     10 4E 85 F1 | 	sub	fp, #16
137cc     34 CE B0 FD | 	call	#__system__Right_S
137d0     A7 FA 61 FC | 	wrlong	result1, fp
137d4     A7 12 02 F6 | 	mov	arg01, fp
137d8     60 6D BF FD | 	call	#_push
137dc                 | LR__1553
137dc     A7 F0 03 F6 | 	mov	ptra, fp
137e0     B2 00 A0 FD | 	call	#popregs_
137e4                 | _do_right_ret
137e4     2D 00 64 FD | 	ret
137e8                 | 
137e8                 | ' 
137e8                 | ' sub do_left
137e8                 | _do_left
137e8     00 4A 05 F6 | 	mov	COUNT_, #0
137ec     A8 00 A0 FD | 	call	#pushregs_
137f0     14 F0 07 F1 | 	add	ptra, #20
137f4     6A 00 00 FF 
137f8     70 E4 05 F1 | 	add	objptr, ##54384
137fc     F2 16 02 FB | 	rdlong	arg03, objptr
13800     0B 15 02 F6 | 	mov	arg02, arg03
13804     01 14 66 F0 | 	shl	arg02, #1
13808     0B 15 02 F1 | 	add	arg02, arg03
1380c     02 14 66 F0 | 	shl	arg02, #2
13810     03 00 00 FF 
13814     04 E4 85 F1 | 	sub	objptr, ##1540
13818     F2 14 02 F1 | 	add	arg02, objptr
1381c     0A 17 02 FB | 	rdlong	arg03, arg02
13820     0C 4E 05 F1 | 	add	fp, #12
13824     A7 16 62 FC | 	wrlong	arg03, fp
13828                 | ' 
13828                 | ' numpar=compiledline(lineptr_e).result.uresult
13828                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13828     0C 4E 85 F1 | 	sub	fp, #12
1382c     02 16 0E F2 | 	cmp	arg03, #2 wz
13830     67 00 00 FF 
13834     6C E4 85 F1 | 	sub	objptr, ##52844
13838     3C 00 90 AD |  if_e	jmp	#LR__1560
1383c     00 12 06 F6 | 	mov	arg01, #0
13840     88 06 B1 FD | 	call	#__system___getiolock_0475
13844     FD 12 02 F6 | 	mov	arg01, result1
13848     EC AC B0 FD | 	call	#__system___lockmem
1384c     70 01 00 FF 
13850     D5 15 06 F6 | 	mov	arg02, ##@LR__5115
13854     00 12 06 F6 | 	mov	arg01, #0
13858     00 16 06 F6 | 	mov	arg03, #0
1385c     DC B9 B0 FD | 	call	#__system___basic_print_string
13860     00 12 06 F6 | 	mov	arg01, #0
13864     64 06 B1 FD | 	call	#__system___getiolock_0475
13868     FD 00 68 FC | 	wrlong	#0, result1
1386c     27 12 06 F6 | 	mov	arg01, #39
13870     68 68 B0 FD | 	call	#_printerror
13874     E8 00 90 FD | 	jmp	#LR__1563
13878                 | LR__1560
13878     28 6C BF FD | 	call	#_pop
1387c     FF 16 02 F6 | 	mov	arg03, result3
13880     A7 FA 61 FC | 	wrlong	result1, fp
13884     04 4E 05 F1 | 	add	fp, #4
13888     A7 FC 61 FC | 	wrlong	result2, fp
1388c     04 4E 05 F1 | 	add	fp, #4
13890     A7 16 62 FC | 	wrlong	arg03, fp
13894     08 4E 85 F1 | 	sub	fp, #8
13898     A7 12 02 F6 | 	mov	arg01, fp
1389c     D0 F6 BF FD | 	call	#_converttoint
138a0     FD 16 02 F6 | 	mov	arg03, result1
138a4     10 4E 05 F1 | 	add	fp, #16
138a8     A7 16 62 FC | 	wrlong	arg03, fp
138ac     10 4E 85 F1 | 	sub	fp, #16
138b0     F0 6B BF FD | 	call	#_pop
138b4     FF 16 02 F6 | 	mov	arg03, result3
138b8     A7 FA 61 FC | 	wrlong	result1, fp
138bc     04 4E 05 F1 | 	add	fp, #4
138c0     A7 FC 61 FC | 	wrlong	result2, fp
138c4     04 4E 05 F1 | 	add	fp, #4
138c8     A7 16 62 FC | 	wrlong	arg03, fp
138cc                 | ' t1=pop() : arg=converttoint(t1)
138cc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
138cc     08 4E 85 F1 | 	sub	fp, #8
138d0     2B 16 0E F2 | 	cmp	arg03, #43 wz
138d4     18 00 90 5D |  if_ne	jmp	#LR__1561
138d8     A7 12 02 FB | 	rdlong	arg01, fp
138dc     6C AE BF FD | 	call	#_convertstring
138e0     A7 FA 61 FC | 	wrlong	result1, fp
138e4     08 4E 05 F1 | 	add	fp, #8
138e8     A7 3E 68 FC | 	wrlong	#31, fp
138ec     08 4E 85 F1 | 	sub	fp, #8
138f0                 | LR__1561
138f0                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
138f0     08 4E 05 F1 | 	add	fp, #8
138f4     A7 16 02 FB | 	rdlong	arg03, fp
138f8     08 4E 85 F1 | 	sub	fp, #8
138fc     1F 16 0E F2 | 	cmp	arg03, #31 wz
13900     3C 00 90 AD |  if_e	jmp	#LR__1562
13904     00 12 06 F6 | 	mov	arg01, #0
13908     C0 05 B1 FD | 	call	#__system___getiolock_0475
1390c     FD 12 02 F6 | 	mov	arg01, result1
13910     24 AC B0 FD | 	call	#__system___lockmem
13914     70 01 00 FF 
13918     DD 15 06 F6 | 	mov	arg02, ##@LR__5116
1391c     00 12 06 F6 | 	mov	arg01, #0
13920     00 16 06 F6 | 	mov	arg03, #0
13924     14 B9 B0 FD | 	call	#__system___basic_print_string
13928     00 12 06 F6 | 	mov	arg01, #0
1392c     9C 05 B1 FD | 	call	#__system___getiolock_0475
13930     FD 00 68 FC | 	wrlong	#0, result1
13934     0F 12 06 F6 | 	mov	arg01, #15
13938     A0 67 B0 FD | 	call	#_printerror
1393c     20 00 90 FD | 	jmp	#LR__1563
13940                 | LR__1562
13940     A7 12 02 FB | 	rdlong	arg01, fp
13944     10 4E 05 F1 | 	add	fp, #16
13948     A7 14 02 FB | 	rdlong	arg02, fp
1394c     10 4E 85 F1 | 	sub	fp, #16
13950     28 CC B0 FD | 	call	#__system__Left_S
13954     A7 FA 61 FC | 	wrlong	result1, fp
13958     A7 12 02 F6 | 	mov	arg01, fp
1395c     DC 6B BF FD | 	call	#_push
13960                 | LR__1563
13960     A7 F0 03 F6 | 	mov	ptra, fp
13964     B2 00 A0 FD | 	call	#popregs_
13968                 | _do_left_ret
13968     2D 00 64 FD | 	ret
1396c                 | 
1396c                 | ' 
1396c                 | ' sub do_asc
1396c                 | _do_asc
1396c     01 4A 05 F6 | 	mov	COUNT_, #1
13970     A8 00 A0 FD | 	call	#pushregs_
13974     14 F0 07 F1 | 	add	ptra, #20
13978     6A 00 00 FF 
1397c     70 E4 05 F1 | 	add	objptr, ##54384
13980     F2 1E 02 FB | 	rdlong	local01, objptr
13984     0F 17 02 F6 | 	mov	arg03, local01
13988     01 16 66 F0 | 	shl	arg03, #1
1398c     0F 17 02 F1 | 	add	arg03, local01
13990     02 16 66 F0 | 	shl	arg03, #2
13994     03 00 00 FF 
13998     04 E4 85 F1 | 	sub	objptr, ##1540
1399c     F2 16 02 F1 | 	add	arg03, objptr
139a0     0B 17 02 FB | 	rdlong	arg03, arg03
139a4     0C 4E 05 F1 | 	add	fp, #12
139a8     A7 16 62 FC | 	wrlong	arg03, fp
139ac                 | ' 
139ac                 | ' numpar=compiledline(lineptr_e).result.uresult
139ac                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
139ac     0C 4E 85 F1 | 	sub	fp, #12
139b0     02 16 16 F2 | 	cmp	arg03, #2 wc
139b4     67 00 00 FF 
139b8     6C E4 85 F1 | 	sub	objptr, ##52844
139bc     0C 4E 05 C1 |  if_b	add	fp, #12
139c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
139c4     0C 4E 85 C1 |  if_b	sub	fp, #12
139c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
139cc     00 12 06 F6 | 	mov	arg01, #0
139d0     F8 04 B1 FD | 	call	#__system___getiolock_0475
139d4     FD 12 02 F6 | 	mov	arg01, result1
139d8     5C AB B0 FD | 	call	#__system___lockmem
139dc     70 01 00 FF 
139e0     E5 15 06 F6 | 	mov	arg02, ##@LR__5117
139e4     00 12 06 F6 | 	mov	arg01, #0
139e8     00 16 06 F6 | 	mov	arg03, #0
139ec     4C B8 B0 FD | 	call	#__system___basic_print_string
139f0     00 12 06 F6 | 	mov	arg01, #0
139f4     D4 04 B1 FD | 	call	#__system___getiolock_0475
139f8     FD 00 68 FC | 	wrlong	#0, result1
139fc     27 12 06 F6 | 	mov	arg01, #39
13a00     D8 66 B0 FD | 	call	#_printerror
13a04     B0 00 90 FD | 	jmp	#LR__1573
13a08                 | LR__1570
13a08     98 6A BF FD | 	call	#_pop
13a0c     FF 16 02 F6 | 	mov	arg03, result3
13a10     A7 FA 61 FC | 	wrlong	result1, fp
13a14     04 4E 05 F1 | 	add	fp, #4
13a18     A7 FC 61 FC | 	wrlong	result2, fp
13a1c     04 4E 05 F1 | 	add	fp, #4
13a20     A7 16 62 FC | 	wrlong	arg03, fp
13a24                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13a24     08 4E 85 F1 | 	sub	fp, #8
13a28     2B 16 0E F2 | 	cmp	arg03, #43 wz
13a2c     18 00 90 5D |  if_ne	jmp	#LR__1571
13a30     A7 12 02 FB | 	rdlong	arg01, fp
13a34     14 AD BF FD | 	call	#_convertstring
13a38     A7 FA 61 FC | 	wrlong	result1, fp
13a3c     08 4E 05 F1 | 	add	fp, #8
13a40     A7 3E 68 FC | 	wrlong	#31, fp
13a44     08 4E 85 F1 | 	sub	fp, #8
13a48                 | LR__1571
13a48                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
13a48     08 4E 05 F1 | 	add	fp, #8
13a4c     A7 16 02 FB | 	rdlong	arg03, fp
13a50     08 4E 85 F1 | 	sub	fp, #8
13a54     1F 16 0E F2 | 	cmp	arg03, #31 wz
13a58     3C 00 90 AD |  if_e	jmp	#LR__1572
13a5c     00 12 06 F6 | 	mov	arg01, #0
13a60     68 04 B1 FD | 	call	#__system___getiolock_0475
13a64     FD 12 02 F6 | 	mov	arg01, result1
13a68     CC AA B0 FD | 	call	#__system___lockmem
13a6c     70 01 00 FF 
13a70     EB 15 06 F6 | 	mov	arg02, ##@LR__5118
13a74     00 12 06 F6 | 	mov	arg01, #0
13a78     00 16 06 F6 | 	mov	arg03, #0
13a7c     BC B7 B0 FD | 	call	#__system___basic_print_string
13a80     00 12 06 F6 | 	mov	arg01, #0
13a84     44 04 B1 FD | 	call	#__system___getiolock_0475
13a88     FD 00 68 FC | 	wrlong	#0, result1
13a8c     0F 12 06 F6 | 	mov	arg01, #15
13a90     48 66 B0 FD | 	call	#_printerror
13a94     20 00 90 FD | 	jmp	#LR__1573
13a98                 | LR__1572
13a98     A7 1E 02 FB | 	rdlong	local01, fp
13a9c     0F 1F C2 FA | 	rdbyte	local01, local01
13aa0     A7 1E 62 FC | 	wrlong	local01, fp
13aa4     08 4E 05 F1 | 	add	fp, #8
13aa8     A7 38 68 FC | 	wrlong	#28, fp
13aac     08 4E 85 F1 | 	sub	fp, #8
13ab0     A7 12 02 F6 | 	mov	arg01, fp
13ab4     84 6A BF FD | 	call	#_push
13ab8                 | LR__1573
13ab8     A7 F0 03 F6 | 	mov	ptra, fp
13abc     B2 00 A0 FD | 	call	#popregs_
13ac0                 | _do_asc_ret
13ac0     2D 00 64 FD | 	ret
13ac4                 | 
13ac4                 | ' 
13ac4                 | ' sub do_len
13ac4                 | _do_len
13ac4     02 4A 05 F6 | 	mov	COUNT_, #2
13ac8     A8 00 A0 FD | 	call	#pushregs_
13acc     14 F0 07 F1 | 	add	ptra, #20
13ad0     6A 00 00 FF 
13ad4     70 E4 05 F1 | 	add	objptr, ##54384
13ad8     F2 1E 02 FB | 	rdlong	local01, objptr
13adc     0F 17 02 F6 | 	mov	arg03, local01
13ae0     01 16 66 F0 | 	shl	arg03, #1
13ae4     0F 17 02 F1 | 	add	arg03, local01
13ae8     02 16 66 F0 | 	shl	arg03, #2
13aec     03 00 00 FF 
13af0     04 E4 85 F1 | 	sub	objptr, ##1540
13af4     F2 16 02 F1 | 	add	arg03, objptr
13af8     0B 17 02 FB | 	rdlong	arg03, arg03
13afc     0C 4E 05 F1 | 	add	fp, #12
13b00     A7 16 62 FC | 	wrlong	arg03, fp
13b04                 | ' 
13b04                 | ' numpar=compiledline(lineptr_e).result.uresult
13b04                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
13b04     0C 4E 85 F1 | 	sub	fp, #12
13b08     02 16 16 F2 | 	cmp	arg03, #2 wc
13b0c     67 00 00 FF 
13b10     6C E4 85 F1 | 	sub	objptr, ##52844
13b14     0C 4E 05 C1 |  if_b	add	fp, #12
13b18     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13b1c     0C 4E 85 C1 |  if_b	sub	fp, #12
13b20     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1580
13b24     00 12 06 F6 | 	mov	arg01, #0
13b28     A0 03 B1 FD | 	call	#__system___getiolock_0475
13b2c     FD 12 02 F6 | 	mov	arg01, result1
13b30     04 AA B0 FD | 	call	#__system___lockmem
13b34     70 01 00 FF 
13b38     F1 15 06 F6 | 	mov	arg02, ##@LR__5119
13b3c     00 12 06 F6 | 	mov	arg01, #0
13b40     00 16 06 F6 | 	mov	arg03, #0
13b44     F4 B6 B0 FD | 	call	#__system___basic_print_string
13b48     00 12 06 F6 | 	mov	arg01, #0
13b4c     7C 03 B1 FD | 	call	#__system___getiolock_0475
13b50     FD 00 68 FC | 	wrlong	#0, result1
13b54     27 12 06 F6 | 	mov	arg01, #39
13b58     80 65 B0 FD | 	call	#_printerror
13b5c     C4 00 90 FD | 	jmp	#LR__1585
13b60                 | LR__1580
13b60     40 69 BF FD | 	call	#_pop
13b64     FF 16 02 F6 | 	mov	arg03, result3
13b68     A7 FA 61 FC | 	wrlong	result1, fp
13b6c     04 4E 05 F1 | 	add	fp, #4
13b70     A7 FC 61 FC | 	wrlong	result2, fp
13b74     04 4E 05 F1 | 	add	fp, #4
13b78     A7 16 62 FC | 	wrlong	arg03, fp
13b7c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13b7c     08 4E 85 F1 | 	sub	fp, #8
13b80     2B 16 0E F2 | 	cmp	arg03, #43 wz
13b84     18 00 90 5D |  if_ne	jmp	#LR__1581
13b88     A7 12 02 FB | 	rdlong	arg01, fp
13b8c     BC AB BF FD | 	call	#_convertstring
13b90     A7 FA 61 FC | 	wrlong	result1, fp
13b94     08 4E 05 F1 | 	add	fp, #8
13b98     A7 3E 68 FC | 	wrlong	#31, fp
13b9c     08 4E 85 F1 | 	sub	fp, #8
13ba0                 | LR__1581
13ba0                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
13ba0     08 4E 05 F1 | 	add	fp, #8
13ba4     A7 16 02 FB | 	rdlong	arg03, fp
13ba8     08 4E 85 F1 | 	sub	fp, #8
13bac     1F 16 0E F2 | 	cmp	arg03, #31 wz
13bb0     3C 00 90 AD |  if_e	jmp	#LR__1582
13bb4     00 12 06 F6 | 	mov	arg01, #0
13bb8     10 03 B1 FD | 	call	#__system___getiolock_0475
13bbc     FD 12 02 F6 | 	mov	arg01, result1
13bc0     74 A9 B0 FD | 	call	#__system___lockmem
13bc4     70 01 00 FF 
13bc8     F7 15 06 F6 | 	mov	arg02, ##@LR__5120
13bcc     00 12 06 F6 | 	mov	arg01, #0
13bd0     00 16 06 F6 | 	mov	arg03, #0
13bd4     64 B6 B0 FD | 	call	#__system___basic_print_string
13bd8     00 12 06 F6 | 	mov	arg01, #0
13bdc     EC 02 B1 FD | 	call	#__system___getiolock_0475
13be0     FD 00 68 FC | 	wrlong	#0, result1
13be4     0F 12 06 F6 | 	mov	arg01, #15
13be8     F0 64 B0 FD | 	call	#_printerror
13bec     34 00 90 FD | 	jmp	#LR__1585
13bf0                 | LR__1582
13bf0     A7 12 02 FB | 	rdlong	arg01, fp
13bf4     09 21 02 F6 | 	mov	local02, arg01
13bf8     97 06 48 FB | 	callpa	#(@LR__1584-@LR__1583)>>2,fcache_load_ptr_
13bfc                 | LR__1583
13bfc     10 FB C9 FA | 	rdbyte	result1, local02 wz
13c00     01 20 06 51 |  if_ne	add	local02, #1
13c04     F4 FF 9F 5D |  if_ne	jmp	#LR__1583
13c08                 | LR__1584
13c08     09 21 82 F1 | 	sub	local02, arg01
13c0c     A7 20 62 FC | 	wrlong	local02, fp
13c10     08 4E 05 F1 | 	add	fp, #8
13c14     A7 38 68 FC | 	wrlong	#28, fp
13c18     08 4E 85 F1 | 	sub	fp, #8
13c1c     A7 12 02 F6 | 	mov	arg01, fp
13c20     18 69 BF FD | 	call	#_push
13c24                 | LR__1585
13c24     A7 F0 03 F6 | 	mov	ptra, fp
13c28     B2 00 A0 FD | 	call	#popregs_
13c2c                 | _do_len_ret
13c2c     2D 00 64 FD | 	ret
13c30                 | 
13c30                 | ' 
13c30                 | ' sub do_chr
13c30                 | _do_chr
13c30     01 4A 05 F6 | 	mov	COUNT_, #1
13c34     A8 00 A0 FD | 	call	#pushregs_
13c38     14 F0 07 F1 | 	add	ptra, #20
13c3c     6A 00 00 FF 
13c40     70 E4 05 F1 | 	add	objptr, ##54384
13c44     F2 1E 02 FB | 	rdlong	local01, objptr
13c48     0F 17 02 F6 | 	mov	arg03, local01
13c4c     01 16 66 F0 | 	shl	arg03, #1
13c50     0F 17 02 F1 | 	add	arg03, local01
13c54     02 16 66 F0 | 	shl	arg03, #2
13c58     03 00 00 FF 
13c5c     04 E4 85 F1 | 	sub	objptr, ##1540
13c60     F2 16 02 F1 | 	add	arg03, objptr
13c64     0B 17 02 FB | 	rdlong	arg03, arg03
13c68     0C 4E 05 F1 | 	add	fp, #12
13c6c     A7 16 62 FC | 	wrlong	arg03, fp
13c70                 | ' 
13c70                 | ' numpar=compiledline(lineptr_e).result.uresult
13c70                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
13c70     0C 4E 85 F1 | 	sub	fp, #12
13c74     02 16 16 F2 | 	cmp	arg03, #2 wc
13c78     67 00 00 FF 
13c7c     6C E4 85 F1 | 	sub	objptr, ##52844
13c80     0C 4E 05 C1 |  if_b	add	fp, #12
13c84     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13c88     0C 4E 85 C1 |  if_b	sub	fp, #12
13c8c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1590
13c90     00 12 06 F6 | 	mov	arg01, #0
13c94     34 02 B1 FD | 	call	#__system___getiolock_0475
13c98     FD 12 02 F6 | 	mov	arg01, result1
13c9c     98 A8 B0 FD | 	call	#__system___lockmem
13ca0     70 01 00 FF 
13ca4     FD 15 06 F6 | 	mov	arg02, ##@LR__5121
13ca8     00 12 06 F6 | 	mov	arg01, #0
13cac     00 16 06 F6 | 	mov	arg03, #0
13cb0     88 B5 B0 FD | 	call	#__system___basic_print_string
13cb4     00 12 06 F6 | 	mov	arg01, #0
13cb8     10 02 B1 FD | 	call	#__system___getiolock_0475
13cbc     FD 00 68 FC | 	wrlong	#0, result1
13cc0     27 12 06 F6 | 	mov	arg01, #39
13cc4     14 64 B0 FD | 	call	#_printerror
13cc8     54 00 90 FD | 	jmp	#LR__1591
13ccc                 | LR__1590
13ccc     D4 67 BF FD | 	call	#_pop
13cd0     FF 1E 02 F6 | 	mov	local01, result3
13cd4     A7 FA 61 FC | 	wrlong	result1, fp
13cd8     04 4E 05 F1 | 	add	fp, #4
13cdc     A7 FC 61 FC | 	wrlong	result2, fp
13ce0     04 4E 05 F1 | 	add	fp, #4
13ce4     A7 1E 62 FC | 	wrlong	local01, fp
13ce8     08 4E 85 F1 | 	sub	fp, #8
13cec     A7 12 02 F6 | 	mov	arg01, fp
13cf0     7C F2 BF FD | 	call	#_converttoint
13cf4     10 4E 05 F1 | 	add	fp, #16
13cf8     A7 FA 61 FC | 	wrlong	result1, fp
13cfc     FD 12 02 F6 | 	mov	arg01, result1
13d00     10 4E 85 F1 | 	sub	fp, #16
13d04     38 CA B0 FD | 	call	#__system__Chr_S
13d08     A7 FA 61 FC | 	wrlong	result1, fp
13d0c     08 4E 05 F1 | 	add	fp, #8
13d10     A7 3E 68 FC | 	wrlong	#31, fp
13d14     08 4E 85 F1 | 	sub	fp, #8
13d18     A7 12 02 F6 | 	mov	arg01, fp
13d1c     1C 68 BF FD | 	call	#_push
13d20                 | LR__1591
13d20     A7 F0 03 F6 | 	mov	ptra, fp
13d24     B2 00 A0 FD | 	call	#popregs_
13d28                 | _do_chr_ret
13d28     2D 00 64 FD | 	ret
13d2c                 | 
13d2c                 | ' 
13d2c                 | ' sub do_val
13d2c                 | _do_val
13d2c     03 4A 05 F6 | 	mov	COUNT_, #3
13d30     A8 00 A0 FD | 	call	#pushregs_
13d34     20 F0 07 F1 | 	add	ptra, #32
13d38     6A 00 00 FF 
13d3c     70 E4 05 F1 | 	add	objptr, ##54384
13d40     F2 16 02 FB | 	rdlong	arg03, objptr
13d44     0B 1F 02 F6 | 	mov	local01, arg03
13d48     01 1E 66 F0 | 	shl	local01, #1
13d4c     0B 1F 02 F1 | 	add	local01, arg03
13d50     02 1E 66 F0 | 	shl	local01, #2
13d54     03 00 00 FF 
13d58     04 E4 85 F1 | 	sub	objptr, ##1540
13d5c     F2 1E 02 F1 | 	add	local01, objptr
13d60     0F 17 02 FB | 	rdlong	arg03, local01
13d64     0C 4E 05 F1 | 	add	fp, #12
13d68     A7 16 62 FC | 	wrlong	arg03, fp
13d6c                 | ' 
13d6c                 | ' numpar=compiledline(lineptr_e).result.uresult
13d6c                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
13d6c     0C 4E 85 F1 | 	sub	fp, #12
13d70     02 16 16 F2 | 	cmp	arg03, #2 wc
13d74     67 00 00 FF 
13d78     6C E4 85 F1 | 	sub	objptr, ##52844
13d7c     0C 4E 05 C1 |  if_b	add	fp, #12
13d80     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13d84     0C 4E 85 C1 |  if_b	sub	fp, #12
13d88     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1600
13d8c     00 12 06 F6 | 	mov	arg01, #0
13d90     38 01 B1 FD | 	call	#__system___getiolock_0475
13d94     FD 12 02 F6 | 	mov	arg01, result1
13d98     9C A7 B0 FD | 	call	#__system___lockmem
13d9c     71 01 00 FF 
13da0     04 14 06 F6 | 	mov	arg02, ##@LR__5122
13da4     00 12 06 F6 | 	mov	arg01, #0
13da8     00 16 06 F6 | 	mov	arg03, #0
13dac     8C B4 B0 FD | 	call	#__system___basic_print_string
13db0     00 12 06 F6 | 	mov	arg01, #0
13db4     14 01 B1 FD | 	call	#__system___getiolock_0475
13db8     FD 00 68 FC | 	wrlong	#0, result1
13dbc     27 12 06 F6 | 	mov	arg01, #39
13dc0     18 63 B0 FD | 	call	#_printerror
13dc4     5C 02 90 FD | 	jmp	#LR__1613
13dc8                 | LR__1600
13dc8     D8 66 BF FD | 	call	#_pop
13dcc     FF 16 02 F6 | 	mov	arg03, result3
13dd0     A7 FA 61 FC | 	wrlong	result1, fp
13dd4     04 4E 05 F1 | 	add	fp, #4
13dd8     A7 FC 61 FC | 	wrlong	result2, fp
13ddc     04 4E 05 F1 | 	add	fp, #4
13de0     A7 16 62 FC | 	wrlong	arg03, fp
13de4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13de4     08 4E 85 F1 | 	sub	fp, #8
13de8     2B 16 0E F2 | 	cmp	arg03, #43 wz
13dec     18 00 90 5D |  if_ne	jmp	#LR__1601
13df0     A7 12 02 FB | 	rdlong	arg01, fp
13df4     54 A9 BF FD | 	call	#_convertstring
13df8     A7 FA 61 FC | 	wrlong	result1, fp
13dfc     08 4E 05 F1 | 	add	fp, #8
13e00     A7 3E 68 FC | 	wrlong	#31, fp
13e04     08 4E 85 F1 | 	sub	fp, #8
13e08                 | LR__1601
13e08                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
13e08     08 4E 05 F1 | 	add	fp, #8
13e0c     A7 16 02 FB | 	rdlong	arg03, fp
13e10     08 4E 85 F1 | 	sub	fp, #8
13e14     1F 16 0E F2 | 	cmp	arg03, #31 wz
13e18     3C 00 90 AD |  if_e	jmp	#LR__1602
13e1c     00 12 06 F6 | 	mov	arg01, #0
13e20     A8 00 B1 FD | 	call	#__system___getiolock_0475
13e24     FD 12 02 F6 | 	mov	arg01, result1
13e28     0C A7 B0 FD | 	call	#__system___lockmem
13e2c     71 01 00 FF 
13e30     0A 14 06 F6 | 	mov	arg02, ##@LR__5123
13e34     00 12 06 F6 | 	mov	arg01, #0
13e38     00 16 06 F6 | 	mov	arg03, #0
13e3c     FC B3 B0 FD | 	call	#__system___basic_print_string
13e40     00 12 06 F6 | 	mov	arg01, #0
13e44     84 00 B1 FD | 	call	#__system___getiolock_0475
13e48     FD 00 68 FC | 	wrlong	#0, result1
13e4c     0F 12 06 F6 | 	mov	arg01, #15
13e50     88 62 B0 FD | 	call	#_printerror
13e54     CC 01 90 FD | 	jmp	#LR__1613
13e58                 | LR__1602
13e58                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
13e58     A7 12 02 FB | 	rdlong	arg01, fp
13e5c     01 14 06 F6 | 	mov	arg02, #1
13e60     18 C7 B0 FD | 	call	#__system__Left_S
13e64     FD 12 02 F6 | 	mov	arg01, result1
13e68     71 01 00 FF 
13e6c     10 14 06 F6 | 	mov	arg02, ##@LR__5124
13e70     EC A6 B0 FD | 	call	#__system___string_cmp
13e74     00 FA 0D F2 | 	cmp	result1, #0 wz
13e78     48 00 90 5D |  if_ne	jmp	#LR__1605
13e7c     71 01 00 FF 
13e80     12 1E 06 F6 | 	mov	local01, ##@LR__5125
13e84     A7 16 02 FB | 	rdlong	arg03, fp
13e88     0B 13 02 F6 | 	mov	arg01, arg03
13e8c     09 21 02 F6 | 	mov	local02, arg01
13e90     97 06 48 FB | 	callpa	#(@LR__1604-@LR__1603)>>2,fcache_load_ptr_
13e94                 | LR__1603
13e94     10 FB C9 FA | 	rdbyte	result1, local02 wz
13e98     01 20 06 51 |  if_ne	add	local02, #1
13e9c     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13ea0                 | LR__1604
13ea0     09 21 82 F1 | 	sub	local02, arg01
13ea4     10 15 02 F6 | 	mov	arg02, local02
13ea8     01 14 86 F1 | 	sub	arg02, #1
13eac     0B 13 02 F6 | 	mov	arg01, arg03
13eb0     50 C7 B0 FD | 	call	#__system__Right_S
13eb4     FD 14 02 F6 | 	mov	arg02, result1
13eb8     0F 13 02 F6 | 	mov	arg01, local01
13ebc     D4 A6 B0 FD | 	call	#__system___string_concat
13ec0     A7 FA 61 FC | 	wrlong	result1, fp
13ec4                 | LR__1605
13ec4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
13ec4     A7 12 02 FB | 	rdlong	arg01, fp
13ec8     01 14 06 F6 | 	mov	arg02, #1
13ecc     AC C6 B0 FD | 	call	#__system__Left_S
13ed0     FD 12 02 F6 | 	mov	arg01, result1
13ed4     71 01 00 FF 
13ed8     15 14 06 F6 | 	mov	arg02, ##@LR__5126
13edc     80 A6 B0 FD | 	call	#__system___string_cmp
13ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
13ee4     48 00 90 5D |  if_ne	jmp	#LR__1608
13ee8     71 01 00 FF 
13eec     17 1E 06 F6 | 	mov	local01, ##@LR__5127
13ef0     A7 16 02 FB | 	rdlong	arg03, fp
13ef4     0B 13 02 F6 | 	mov	arg01, arg03
13ef8     09 21 02 F6 | 	mov	local02, arg01
13efc     97 06 48 FB | 	callpa	#(@LR__1607-@LR__1606)>>2,fcache_load_ptr_
13f00                 | LR__1606
13f00     10 FB C9 FA | 	rdbyte	result1, local02 wz
13f04     01 20 06 51 |  if_ne	add	local02, #1
13f08     F4 FF 9F 5D |  if_ne	jmp	#LR__1606
13f0c                 | LR__1607
13f0c     09 21 82 F1 | 	sub	local02, arg01
13f10     10 15 02 F6 | 	mov	arg02, local02
13f14     01 14 86 F1 | 	sub	arg02, #1
13f18     0B 13 02 F6 | 	mov	arg01, arg03
13f1c     E4 C6 B0 FD | 	call	#__system__Right_S
13f20     FD 14 02 F6 | 	mov	arg02, result1
13f24     0F 13 02 F6 | 	mov	arg01, local01
13f28     68 A6 B0 FD | 	call	#__system___string_concat
13f2c     A7 FA 61 FC | 	wrlong	result1, fp
13f30                 | LR__1608
13f30     A7 12 02 FB | 	rdlong	arg01, fp
13f34     64 D9 B0 FD | 	call	#__system____builtin_atof
13f38     1C 4E 05 F1 | 	add	fp, #28
13f3c     A7 FA 61 FC | 	wrlong	result1, fp
13f40     1C 4E 85 F1 | 	sub	fp, #28
13f44     A7 12 02 FB | 	rdlong	arg01, fp
13f48     00 14 06 F6 | 	mov	arg02, #0
13f4c     DC D7 B0 FD | 	call	#__system____builtin_atoi
13f50     18 4E 05 F1 | 	add	fp, #24
13f54     A7 FA 61 FC | 	wrlong	result1, fp
13f58                 | ' fval=val(t1.result.sresult)
13f58                 | ' ival=val%(t1.result.sresult)
13f58                 | ' if fval=ival then
13f58     04 4E 05 F1 | 	add	fp, #4
13f5c     A7 1E 02 FB | 	rdlong	local01, fp
13f60     1C 4E 85 F1 | 	sub	fp, #28
13f64     FD 12 52 F6 | 	abs	arg01, result1 wc
13f68     1F 22 C6 C9 |  if_b	decod	local03, #31
13f6c     00 22 06 36 |  if_ae	mov	local03, #0
13f70     3C CD B0 FD | 	call	#__system___float_fromuns
13f74     11 FB 61 F5 | 	xor	result1, local03
13f78     FD 14 02 F6 | 	mov	arg02, result1
13f7c     0F 13 02 F6 | 	mov	arg01, local01
13f80     01 16 06 F6 | 	mov	arg03, #1
13f84     60 D5 B0 FD | 	call	#__system___float_cmp
13f88     00 FA 0D F2 | 	cmp	result1, #0 wz
13f8c     20 00 90 5D |  if_ne	jmp	#LR__1609
13f90     18 4E 05 F1 | 	add	fp, #24
13f94     A7 1E 02 FB | 	rdlong	local01, fp
13f98     18 4E 85 F1 | 	sub	fp, #24
13f9c     A7 1E 62 FC | 	wrlong	local01, fp
13fa0     08 4E 05 F1 | 	add	fp, #8
13fa4     A7 38 68 FC | 	wrlong	#28, fp
13fa8     08 4E 85 F1 | 	sub	fp, #8
13fac     6C 00 90 FD | 	jmp	#LR__1612
13fb0                 | LR__1609
13fb0                 | '   if fval=0 andalso ival<>0 then
13fb0     1C 4E 05 F1 | 	add	fp, #28
13fb4     A7 12 02 FB | 	rdlong	arg01, fp
13fb8     1C 4E 85 F1 | 	sub	fp, #28
13fbc     00 14 06 F6 | 	mov	arg02, #0
13fc0     01 16 06 F6 | 	mov	arg03, #1
13fc4     20 D5 B0 FD | 	call	#__system___float_cmp
13fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
13fcc     30 00 90 5D |  if_ne	jmp	#LR__1610
13fd0     18 4E 05 F1 | 	add	fp, #24
13fd4     A7 1E 0A FB | 	rdlong	local01, fp wz
13fd8     18 4E 85 F1 | 	sub	fp, #24
13fdc     20 00 90 AD |  if_e	jmp	#LR__1610
13fe0     18 4E 05 F1 | 	add	fp, #24
13fe4     A7 1E 02 FB | 	rdlong	local01, fp
13fe8     18 4E 85 F1 | 	sub	fp, #24
13fec     A7 1E 62 FC | 	wrlong	local01, fp
13ff0     08 4E 05 F1 | 	add	fp, #8
13ff4     A7 38 68 FC | 	wrlong	#28, fp
13ff8     08 4E 85 F1 | 	sub	fp, #8
13ffc     1C 00 90 FD | 	jmp	#LR__1611
14000                 | LR__1610
14000     1C 4E 05 F1 | 	add	fp, #28
14004     A7 1E 02 FB | 	rdlong	local01, fp
14008     1C 4E 85 F1 | 	sub	fp, #28
1400c     A7 1E 62 FC | 	wrlong	local01, fp
14010     08 4E 05 F1 | 	add	fp, #8
14014     A7 3C 68 FC | 	wrlong	#30, fp
14018     08 4E 85 F1 | 	sub	fp, #8
1401c                 | LR__1611
1401c                 | LR__1612
1401c     A7 12 02 F6 | 	mov	arg01, fp
14020     18 65 BF FD | 	call	#_push
14024                 | LR__1613
14024     A7 F0 03 F6 | 	mov	ptra, fp
14028     B2 00 A0 FD | 	call	#popregs_
1402c                 | _do_val_ret
1402c     2D 00 64 FD | 	ret
14030                 | 
14030                 | ' 
14030                 | ' 
14030                 | ' sub do_hex
14030                 | _do_hex
14030     01 4A 05 F6 | 	mov	COUNT_, #1
14034     A8 00 A0 FD | 	call	#pushregs_
14038     18 F0 07 F1 | 	add	ptra, #24
1403c     6A 00 00 FF 
14040     70 E4 05 F1 | 	add	objptr, ##54384
14044     F2 1E 02 FB | 	rdlong	local01, objptr
14048     0F 17 02 F6 | 	mov	arg03, local01
1404c     01 16 66 F0 | 	shl	arg03, #1
14050     0F 17 02 F1 | 	add	arg03, local01
14054     02 16 66 F0 | 	shl	arg03, #2
14058     03 00 00 FF 
1405c     04 E4 85 F1 | 	sub	objptr, ##1540
14060     F2 16 02 F1 | 	add	arg03, objptr
14064     0B 17 02 FB | 	rdlong	arg03, arg03
14068     0C 4E 05 F1 | 	add	fp, #12
1406c     A7 16 62 FC | 	wrlong	arg03, fp
14070                 | ' 
14070                 | ' numpar=compiledline(lineptr_e).result.uresult
14070                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
14070     0C 4E 85 F1 | 	sub	fp, #12
14074     03 16 16 F2 | 	cmp	arg03, #3 wc
14078     67 00 00 FF 
1407c     6C E4 85 F1 | 	sub	objptr, ##52844
14080     0C 4E 05 C1 |  if_b	add	fp, #12
14084     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14088     0C 4E 85 C1 |  if_b	sub	fp, #12
1408c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1620
14090     00 12 06 F6 | 	mov	arg01, #0
14094     34 FE B0 FD | 	call	#__system___getiolock_0475
14098     FD 12 02 F6 | 	mov	arg01, result1
1409c     98 A4 B0 FD | 	call	#__system___lockmem
140a0     71 01 00 FF 
140a4     1A 14 06 F6 | 	mov	arg02, ##@LR__5128
140a8     00 12 06 F6 | 	mov	arg01, #0
140ac     00 16 06 F6 | 	mov	arg03, #0
140b0     88 B1 B0 FD | 	call	#__system___basic_print_string
140b4     00 12 06 F6 | 	mov	arg01, #0
140b8     10 FE B0 FD | 	call	#__system___getiolock_0475
140bc     FD 00 68 FC | 	wrlong	#0, result1
140c0     27 12 06 F6 | 	mov	arg01, #39
140c4     14 60 B0 FD | 	call	#_printerror
140c8     B8 00 90 FD | 	jmp	#LR__1623
140cc                 | LR__1620
140cc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
140cc     0C 4E 05 F1 | 	add	fp, #12
140d0     A7 1E 02 FB | 	rdlong	local01, fp
140d4     0C 4E 85 F1 | 	sub	fp, #12
140d8     02 1E 0E F2 | 	cmp	local01, #2 wz
140dc     38 00 90 5D |  if_ne	jmp	#LR__1621
140e0     C0 63 BF FD | 	call	#_pop
140e4     FF 1E 02 F6 | 	mov	local01, result3
140e8     A7 FA 61 FC | 	wrlong	result1, fp
140ec     04 4E 05 F1 | 	add	fp, #4
140f0     A7 FC 61 FC | 	wrlong	result2, fp
140f4     04 4E 05 F1 | 	add	fp, #4
140f8     A7 1E 62 FC | 	wrlong	local01, fp
140fc     08 4E 85 F1 | 	sub	fp, #8
14100     A7 12 02 F6 | 	mov	arg01, fp
14104     68 EE BF FD | 	call	#_converttoint
14108     14 4E 05 F1 | 	add	fp, #20
1410c     A7 FA 61 FC | 	wrlong	result1, fp
14110     14 4E 85 F1 | 	sub	fp, #20
14114     0C 00 90 FD | 	jmp	#LR__1622
14118                 | LR__1621
14118     14 4E 05 F1 | 	add	fp, #20
1411c     A7 10 68 FC | 	wrlong	#8, fp
14120     14 4E 85 F1 | 	sub	fp, #20
14124                 | LR__1622
14124     7C 63 BF FD | 	call	#_pop
14128     FF 1E 02 F6 | 	mov	local01, result3
1412c     A7 FA 61 FC | 	wrlong	result1, fp
14130     04 4E 05 F1 | 	add	fp, #4
14134     A7 FC 61 FC | 	wrlong	result2, fp
14138     04 4E 05 F1 | 	add	fp, #4
1413c     A7 1E 62 FC | 	wrlong	local01, fp
14140     08 4E 85 F1 | 	sub	fp, #8
14144     A7 12 02 F6 | 	mov	arg01, fp
14148     24 EE BF FD | 	call	#_converttoint
1414c     10 4E 05 F1 | 	add	fp, #16
14150     A7 FA 61 FC | 	wrlong	result1, fp
14154     FD 12 02 F6 | 	mov	arg01, result1
14158     04 4E 05 F1 | 	add	fp, #4
1415c     A7 14 02 FB | 	rdlong	arg02, fp
14160     14 4E 85 F1 | 	sub	fp, #20
14164     10 16 06 F6 | 	mov	arg03, #16
14168     64 C6 B0 FD | 	call	#__system__Number_S
1416c     A7 FA 61 FC | 	wrlong	result1, fp
14170     08 4E 05 F1 | 	add	fp, #8
14174     A7 3E 68 FC | 	wrlong	#31, fp
14178     08 4E 85 F1 | 	sub	fp, #8
1417c     A7 12 02 F6 | 	mov	arg01, fp
14180     B8 63 BF FD | 	call	#_push
14184                 | LR__1623
14184     A7 F0 03 F6 | 	mov	ptra, fp
14188     B2 00 A0 FD | 	call	#popregs_
1418c                 | _do_hex_ret
1418c     2D 00 64 FD | 	ret
14190                 | 
14190                 | ' 
14190                 | ' sub do_bin
14190                 | _do_bin
14190     01 4A 05 F6 | 	mov	COUNT_, #1
14194     A8 00 A0 FD | 	call	#pushregs_
14198     18 F0 07 F1 | 	add	ptra, #24
1419c     6A 00 00 FF 
141a0     70 E4 05 F1 | 	add	objptr, ##54384
141a4     F2 1E 02 FB | 	rdlong	local01, objptr
141a8     0F 17 02 F6 | 	mov	arg03, local01
141ac     01 16 66 F0 | 	shl	arg03, #1
141b0     0F 17 02 F1 | 	add	arg03, local01
141b4     02 16 66 F0 | 	shl	arg03, #2
141b8     03 00 00 FF 
141bc     04 E4 85 F1 | 	sub	objptr, ##1540
141c0     F2 16 02 F1 | 	add	arg03, objptr
141c4     0B 17 02 FB | 	rdlong	arg03, arg03
141c8     0C 4E 05 F1 | 	add	fp, #12
141cc     A7 16 62 FC | 	wrlong	arg03, fp
141d0                 | ' 
141d0                 | ' numpar=compiledline(lineptr_e).result.uresult
141d0                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
141d0     0C 4E 85 F1 | 	sub	fp, #12
141d4     03 16 16 F2 | 	cmp	arg03, #3 wc
141d8     67 00 00 FF 
141dc     6C E4 85 F1 | 	sub	objptr, ##52844
141e0     0C 4E 05 C1 |  if_b	add	fp, #12
141e4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
141e8     0C 4E 85 C1 |  if_b	sub	fp, #12
141ec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1630
141f0     00 12 06 F6 | 	mov	arg01, #0
141f4     D4 FC B0 FD | 	call	#__system___getiolock_0475
141f8     FD 12 02 F6 | 	mov	arg01, result1
141fc     38 A3 B0 FD | 	call	#__system___lockmem
14200     71 01 00 FF 
14204     21 14 06 F6 | 	mov	arg02, ##@LR__5129
14208     00 12 06 F6 | 	mov	arg01, #0
1420c     00 16 06 F6 | 	mov	arg03, #0
14210     28 B0 B0 FD | 	call	#__system___basic_print_string
14214     00 12 06 F6 | 	mov	arg01, #0
14218     B0 FC B0 FD | 	call	#__system___getiolock_0475
1421c     FD 00 68 FC | 	wrlong	#0, result1
14220     27 12 06 F6 | 	mov	arg01, #39
14224     B4 5E B0 FD | 	call	#_printerror
14228     B8 00 90 FD | 	jmp	#LR__1633
1422c                 | LR__1630
1422c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
1422c     0C 4E 05 F1 | 	add	fp, #12
14230     A7 1E 02 FB | 	rdlong	local01, fp
14234     0C 4E 85 F1 | 	sub	fp, #12
14238     02 1E 0E F2 | 	cmp	local01, #2 wz
1423c     38 00 90 5D |  if_ne	jmp	#LR__1631
14240     60 62 BF FD | 	call	#_pop
14244     FF 1E 02 F6 | 	mov	local01, result3
14248     A7 FA 61 FC | 	wrlong	result1, fp
1424c     04 4E 05 F1 | 	add	fp, #4
14250     A7 FC 61 FC | 	wrlong	result2, fp
14254     04 4E 05 F1 | 	add	fp, #4
14258     A7 1E 62 FC | 	wrlong	local01, fp
1425c     08 4E 85 F1 | 	sub	fp, #8
14260     A7 12 02 F6 | 	mov	arg01, fp
14264     08 ED BF FD | 	call	#_converttoint
14268     14 4E 05 F1 | 	add	fp, #20
1426c     A7 FA 61 FC | 	wrlong	result1, fp
14270     14 4E 85 F1 | 	sub	fp, #20
14274     0C 00 90 FD | 	jmp	#LR__1632
14278                 | LR__1631
14278     14 4E 05 F1 | 	add	fp, #20
1427c     A7 00 68 FC | 	wrlong	#0, fp
14280     14 4E 85 F1 | 	sub	fp, #20
14284                 | LR__1632
14284     1C 62 BF FD | 	call	#_pop
14288     FF 1E 02 F6 | 	mov	local01, result3
1428c     A7 FA 61 FC | 	wrlong	result1, fp
14290     04 4E 05 F1 | 	add	fp, #4
14294     A7 FC 61 FC | 	wrlong	result2, fp
14298     04 4E 05 F1 | 	add	fp, #4
1429c     A7 1E 62 FC | 	wrlong	local01, fp
142a0     08 4E 85 F1 | 	sub	fp, #8
142a4     A7 12 02 F6 | 	mov	arg01, fp
142a8     C4 EC BF FD | 	call	#_converttoint
142ac     10 4E 05 F1 | 	add	fp, #16
142b0     A7 FA 61 FC | 	wrlong	result1, fp
142b4     FD 12 02 F6 | 	mov	arg01, result1
142b8     04 4E 05 F1 | 	add	fp, #4
142bc     A7 14 02 FB | 	rdlong	arg02, fp
142c0     14 4E 85 F1 | 	sub	fp, #20
142c4     02 16 06 F6 | 	mov	arg03, #2
142c8     04 C5 B0 FD | 	call	#__system__Number_S
142cc     A7 FA 61 FC | 	wrlong	result1, fp
142d0     08 4E 05 F1 | 	add	fp, #8
142d4     A7 3E 68 FC | 	wrlong	#31, fp
142d8     08 4E 85 F1 | 	sub	fp, #8
142dc     A7 12 02 F6 | 	mov	arg01, fp
142e0     58 62 BF FD | 	call	#_push
142e4                 | LR__1633
142e4     A7 F0 03 F6 | 	mov	ptra, fp
142e8     B2 00 A0 FD | 	call	#popregs_
142ec                 | _do_bin_ret
142ec     2D 00 64 FD | 	ret
142f0                 | 
142f0                 | ' 
142f0                 | ' sub do_cos
142f0                 | _do_cos
142f0     01 4A 05 F6 | 	mov	COUNT_, #1
142f4     A8 00 A0 FD | 	call	#pushregs_
142f8     10 F0 07 F1 | 	add	ptra, #16
142fc     6A 00 00 FF 
14300     70 E4 05 F1 | 	add	objptr, ##54384
14304     F2 1E 02 FB | 	rdlong	local01, objptr
14308     0F 17 02 F6 | 	mov	arg03, local01
1430c     01 16 66 F0 | 	shl	arg03, #1
14310     0F 17 02 F1 | 	add	arg03, local01
14314     02 16 66 F0 | 	shl	arg03, #2
14318     03 00 00 FF 
1431c     04 E4 85 F1 | 	sub	objptr, ##1540
14320     F2 16 02 F1 | 	add	arg03, objptr
14324     0B 17 02 FB | 	rdlong	arg03, arg03
14328     0C 4E 05 F1 | 	add	fp, #12
1432c     A7 16 62 FC | 	wrlong	arg03, fp
14330                 | ' 
14330                 | ' numpar=compiledline(lineptr_e).result.uresult
14330                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
14330     0C 4E 85 F1 | 	sub	fp, #12
14334     02 16 16 F2 | 	cmp	arg03, #2 wc
14338     67 00 00 FF 
1433c     6C E4 85 F1 | 	sub	objptr, ##52844
14340     0C 4E 05 C1 |  if_b	add	fp, #12
14344     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14348     0C 4E 85 C1 |  if_b	sub	fp, #12
1434c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1640
14350     00 12 06 F6 | 	mov	arg01, #0
14354     74 FB B0 FD | 	call	#__system___getiolock_0475
14358     FD 12 02 F6 | 	mov	arg01, result1
1435c     D8 A1 B0 FD | 	call	#__system___lockmem
14360     71 01 00 FF 
14364     28 14 06 F6 | 	mov	arg02, ##@LR__5130
14368     00 12 06 F6 | 	mov	arg01, #0
1436c     00 16 06 F6 | 	mov	arg03, #0
14370     C8 AE B0 FD | 	call	#__system___basic_print_string
14374     00 12 06 F6 | 	mov	arg01, #0
14378     50 FB B0 FD | 	call	#__system___getiolock_0475
1437c     FD 00 68 FC | 	wrlong	#0, result1
14380     27 12 06 F6 | 	mov	arg01, #39
14384     54 5D B0 FD | 	call	#_printerror
14388     78 00 90 FD | 	jmp	#LR__1641
1438c                 | LR__1640
1438c     14 61 BF FD | 	call	#_pop
14390     A7 FA 61 FC | 	wrlong	result1, fp
14394     04 4E 05 F1 | 	add	fp, #4
14398     A7 FC 61 FC | 	wrlong	result2, fp
1439c     04 4E 05 F1 | 	add	fp, #4
143a0     A7 FE 61 FC | 	wrlong	result3, fp
143a4     08 4E 85 F1 | 	sub	fp, #8
143a8     7B 00 00 FF 
143ac     78 E4 05 F1 | 	add	objptr, ##63096
143b0     F2 1E 02 FB | 	rdlong	local01, objptr
143b4     7B 00 00 FF 
143b8     78 E4 85 F1 | 	sub	objptr, ##63096
143bc     A7 12 02 F6 | 	mov	arg01, fp
143c0     58 EC BF FD | 	call	#_converttofloat
143c4     FD 14 02 F6 | 	mov	arg02, result1
143c8     0F 13 02 F6 | 	mov	arg01, local01
143cc     E4 CC B0 FD | 	call	#__system___float_mul
143d0     FD 14 02 F6 | 	mov	arg02, result1
143d4     87 E4 1F FF 
143d8     DB 13 06 F6 | 	mov	arg01, ##1070141403
143dc     1F 14 E6 F4 | 	bitnot	arg02, #31
143e0     00 C9 B0 FD | 	call	#__system___float_add
143e4     FD 12 02 F6 | 	mov	arg01, result1
143e8     04 D6 B0 FD | 	call	#__system____builtin_sinf
143ec     A7 FA 61 FC | 	wrlong	result1, fp
143f0     08 4E 05 F1 | 	add	fp, #8
143f4     A7 3C 68 FC | 	wrlong	#30, fp
143f8     08 4E 85 F1 | 	sub	fp, #8
143fc     A7 12 02 F6 | 	mov	arg01, fp
14400     38 61 BF FD | 	call	#_push
14404                 | LR__1641
14404     A7 F0 03 F6 | 	mov	ptra, fp
14408     B2 00 A0 FD | 	call	#popregs_
1440c                 | _do_cos_ret
1440c     2D 00 64 FD | 	ret
14410                 | 
14410                 | ' 
14410                 | ' sub do_tan
14410                 | _do_tan
14410     01 4A 05 F6 | 	mov	COUNT_, #1
14414     A8 00 A0 FD | 	call	#pushregs_
14418     10 F0 07 F1 | 	add	ptra, #16
1441c     6A 00 00 FF 
14420     70 E4 05 F1 | 	add	objptr, ##54384
14424     F2 1E 02 FB | 	rdlong	local01, objptr
14428     0F 17 02 F6 | 	mov	arg03, local01
1442c     01 16 66 F0 | 	shl	arg03, #1
14430     0F 17 02 F1 | 	add	arg03, local01
14434     02 16 66 F0 | 	shl	arg03, #2
14438     03 00 00 FF 
1443c     04 E4 85 F1 | 	sub	objptr, ##1540
14440     F2 16 02 F1 | 	add	arg03, objptr
14444     0B 17 02 FB | 	rdlong	arg03, arg03
14448     0C 4E 05 F1 | 	add	fp, #12
1444c     A7 16 62 FC | 	wrlong	arg03, fp
14450                 | ' 
14450                 | ' numpar=compiledline(lineptr_e).result.uresult
14450                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
14450     0C 4E 85 F1 | 	sub	fp, #12
14454     02 16 16 F2 | 	cmp	arg03, #2 wc
14458     67 00 00 FF 
1445c     6C E4 85 F1 | 	sub	objptr, ##52844
14460     0C 4E 05 C1 |  if_b	add	fp, #12
14464     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14468     0C 4E 85 C1 |  if_b	sub	fp, #12
1446c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1650
14470     00 12 06 F6 | 	mov	arg01, #0
14474     54 FA B0 FD | 	call	#__system___getiolock_0475
14478     FD 12 02 F6 | 	mov	arg01, result1
1447c     B8 A0 B0 FD | 	call	#__system___lockmem
14480     71 01 00 FF 
14484     2E 14 06 F6 | 	mov	arg02, ##@LR__5131
14488     00 12 06 F6 | 	mov	arg01, #0
1448c     00 16 06 F6 | 	mov	arg03, #0
14490     A8 AD B0 FD | 	call	#__system___basic_print_string
14494     00 12 06 F6 | 	mov	arg01, #0
14498     30 FA B0 FD | 	call	#__system___getiolock_0475
1449c     FD 00 68 FC | 	wrlong	#0, result1
144a0     27 12 06 F6 | 	mov	arg01, #39
144a4     34 5C B0 FD | 	call	#_printerror
144a8     64 00 90 FD | 	jmp	#LR__1651
144ac                 | LR__1650
144ac     F4 5F BF FD | 	call	#_pop
144b0     A7 FA 61 FC | 	wrlong	result1, fp
144b4     04 4E 05 F1 | 	add	fp, #4
144b8     A7 FC 61 FC | 	wrlong	result2, fp
144bc     04 4E 05 F1 | 	add	fp, #4
144c0     A7 FE 61 FC | 	wrlong	result3, fp
144c4     08 4E 85 F1 | 	sub	fp, #8
144c8     7B 00 00 FF 
144cc     78 E4 05 F1 | 	add	objptr, ##63096
144d0     F2 1E 02 FB | 	rdlong	local01, objptr
144d4     7B 00 00 FF 
144d8     78 E4 85 F1 | 	sub	objptr, ##63096
144dc     A7 12 02 F6 | 	mov	arg01, fp
144e0     38 EB BF FD | 	call	#_converttofloat
144e4     FD 14 02 F6 | 	mov	arg02, result1
144e8     0F 13 02 F6 | 	mov	arg01, local01
144ec     C4 CB B0 FD | 	call	#__system___float_mul
144f0     FD 12 02 F6 | 	mov	arg01, result1
144f4     44 D6 B0 FD | 	call	#__system____builtin_tanf
144f8     A7 FA 61 FC | 	wrlong	result1, fp
144fc     08 4E 05 F1 | 	add	fp, #8
14500     A7 3C 68 FC | 	wrlong	#30, fp
14504     08 4E 85 F1 | 	sub	fp, #8
14508     A7 12 02 F6 | 	mov	arg01, fp
1450c     2C 60 BF FD | 	call	#_push
14510                 | LR__1651
14510     A7 F0 03 F6 | 	mov	ptra, fp
14514     B2 00 A0 FD | 	call	#popregs_
14518                 | _do_tan_ret
14518     2D 00 64 FD | 	ret
1451c                 | 
1451c                 | ' 
1451c                 | ' sub do_asin
1451c                 | _do_asin
1451c     01 4A 05 F6 | 	mov	COUNT_, #1
14520     A8 00 A0 FD | 	call	#pushregs_
14524     10 F0 07 F1 | 	add	ptra, #16
14528     6A 00 00 FF 
1452c     70 E4 05 F1 | 	add	objptr, ##54384
14530     F2 1E 02 FB | 	rdlong	local01, objptr
14534     0F 17 02 F6 | 	mov	arg03, local01
14538     01 16 66 F0 | 	shl	arg03, #1
1453c     0F 17 02 F1 | 	add	arg03, local01
14540     02 16 66 F0 | 	shl	arg03, #2
14544     03 00 00 FF 
14548     04 E4 85 F1 | 	sub	objptr, ##1540
1454c     F2 16 02 F1 | 	add	arg03, objptr
14550     0B 17 02 FB | 	rdlong	arg03, arg03
14554     0C 4E 05 F1 | 	add	fp, #12
14558     A7 16 62 FC | 	wrlong	arg03, fp
1455c                 | ' 
1455c                 | ' numpar=compiledline(lineptr_e).result.uresult
1455c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
1455c     0C 4E 85 F1 | 	sub	fp, #12
14560     02 16 16 F2 | 	cmp	arg03, #2 wc
14564     67 00 00 FF 
14568     6C E4 85 F1 | 	sub	objptr, ##52844
1456c     0C 4E 05 C1 |  if_b	add	fp, #12
14570     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14574     0C 4E 85 C1 |  if_b	sub	fp, #12
14578     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1660
1457c     00 12 06 F6 | 	mov	arg01, #0
14580     48 F9 B0 FD | 	call	#__system___getiolock_0475
14584     FD 12 02 F6 | 	mov	arg01, result1
14588     AC 9F B0 FD | 	call	#__system___lockmem
1458c     71 01 00 FF 
14590     34 14 06 F6 | 	mov	arg02, ##@LR__5132
14594     00 12 06 F6 | 	mov	arg01, #0
14598     00 16 06 F6 | 	mov	arg03, #0
1459c     9C AC B0 FD | 	call	#__system___basic_print_string
145a0     00 12 06 F6 | 	mov	arg01, #0
145a4     24 F9 B0 FD | 	call	#__system___getiolock_0475
145a8     FD 00 68 FC | 	wrlong	#0, result1
145ac     27 12 06 F6 | 	mov	arg01, #39
145b0     28 5B B0 FD | 	call	#_printerror
145b4     64 00 90 FD | 	jmp	#LR__1661
145b8                 | LR__1660
145b8     E8 5E BF FD | 	call	#_pop
145bc     FF 1E 02 F6 | 	mov	local01, result3
145c0     A7 FA 61 FC | 	wrlong	result1, fp
145c4     04 4E 05 F1 | 	add	fp, #4
145c8     A7 FC 61 FC | 	wrlong	result2, fp
145cc     04 4E 05 F1 | 	add	fp, #4
145d0     A7 1E 62 FC | 	wrlong	local01, fp
145d4     08 4E 85 F1 | 	sub	fp, #8
145d8     A7 12 02 F6 | 	mov	arg01, fp
145dc     3C EA BF FD | 	call	#_converttofloat
145e0     FD 12 02 F6 | 	mov	arg01, result1
145e4     9C D5 B0 FD | 	call	#__system____builtin_asinf
145e8     FD 12 02 F6 | 	mov	arg01, result1
145ec     7B 00 00 FF 
145f0     7C E4 05 F1 | 	add	objptr, ##63100
145f4     F2 14 02 FB | 	rdlong	arg02, objptr
145f8     7B 00 00 FF 
145fc     7C E4 85 F1 | 	sub	objptr, ##63100
14600     B0 CA B0 FD | 	call	#__system___float_mul
14604     A7 FA 61 FC | 	wrlong	result1, fp
14608     08 4E 05 F1 | 	add	fp, #8
1460c     A7 3C 68 FC | 	wrlong	#30, fp
14610     08 4E 85 F1 | 	sub	fp, #8
14614     A7 12 02 F6 | 	mov	arg01, fp
14618     20 5F BF FD | 	call	#_push
1461c                 | LR__1661
1461c     A7 F0 03 F6 | 	mov	ptra, fp
14620     B2 00 A0 FD | 	call	#popregs_
14624                 | _do_asin_ret
14624     2D 00 64 FD | 	ret
14628                 | 
14628                 | ' 
14628                 | ' sub do_acos
14628                 | _do_acos
14628     01 4A 05 F6 | 	mov	COUNT_, #1
1462c     A8 00 A0 FD | 	call	#pushregs_
14630     10 F0 07 F1 | 	add	ptra, #16
14634     6A 00 00 FF 
14638     70 E4 05 F1 | 	add	objptr, ##54384
1463c     F2 1E 02 FB | 	rdlong	local01, objptr
14640     0F 17 02 F6 | 	mov	arg03, local01
14644     01 16 66 F0 | 	shl	arg03, #1
14648     0F 17 02 F1 | 	add	arg03, local01
1464c     02 16 66 F0 | 	shl	arg03, #2
14650     03 00 00 FF 
14654     04 E4 85 F1 | 	sub	objptr, ##1540
14658     F2 16 02 F1 | 	add	arg03, objptr
1465c     0B 17 02 FB | 	rdlong	arg03, arg03
14660     0C 4E 05 F1 | 	add	fp, #12
14664     A7 16 62 FC | 	wrlong	arg03, fp
14668                 | ' 
14668                 | ' numpar=compiledline(lineptr_e).result.uresult
14668                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
14668     0C 4E 85 F1 | 	sub	fp, #12
1466c     02 16 16 F2 | 	cmp	arg03, #2 wc
14670     67 00 00 FF 
14674     6C E4 85 F1 | 	sub	objptr, ##52844
14678     0C 4E 05 C1 |  if_b	add	fp, #12
1467c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14680     0C 4E 85 C1 |  if_b	sub	fp, #12
14684     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14688     00 12 06 F6 | 	mov	arg01, #0
1468c     3C F8 B0 FD | 	call	#__system___getiolock_0475
14690     FD 12 02 F6 | 	mov	arg01, result1
14694     A0 9E B0 FD | 	call	#__system___lockmem
14698     71 01 00 FF 
1469c     3B 14 06 F6 | 	mov	arg02, ##@LR__5133
146a0     00 12 06 F6 | 	mov	arg01, #0
146a4     00 16 06 F6 | 	mov	arg03, #0
146a8     90 AB B0 FD | 	call	#__system___basic_print_string
146ac     00 12 06 F6 | 	mov	arg01, #0
146b0     18 F8 B0 FD | 	call	#__system___getiolock_0475
146b4     FD 00 68 FC | 	wrlong	#0, result1
146b8     27 12 06 F6 | 	mov	arg01, #39
146bc     1C 5A B0 FD | 	call	#_printerror
146c0     64 00 90 FD | 	jmp	#LR__1671
146c4                 | LR__1670
146c4     DC 5D BF FD | 	call	#_pop
146c8     FF 1E 02 F6 | 	mov	local01, result3
146cc     A7 FA 61 FC | 	wrlong	result1, fp
146d0     04 4E 05 F1 | 	add	fp, #4
146d4     A7 FC 61 FC | 	wrlong	result2, fp
146d8     04 4E 05 F1 | 	add	fp, #4
146dc     A7 1E 62 FC | 	wrlong	local01, fp
146e0     08 4E 85 F1 | 	sub	fp, #8
146e4     A7 12 02 F6 | 	mov	arg01, fp
146e8     30 E9 BF FD | 	call	#_converttofloat
146ec     FD 12 02 F6 | 	mov	arg01, result1
146f0     DC D4 B0 FD | 	call	#__system____builtin_acosf
146f4     FD 12 02 F6 | 	mov	arg01, result1
146f8     7B 00 00 FF 
146fc     7C E4 05 F1 | 	add	objptr, ##63100
14700     F2 14 02 FB | 	rdlong	arg02, objptr
14704     7B 00 00 FF 
14708     7C E4 85 F1 | 	sub	objptr, ##63100
1470c     A4 C9 B0 FD | 	call	#__system___float_mul
14710     A7 FA 61 FC | 	wrlong	result1, fp
14714     08 4E 05 F1 | 	add	fp, #8
14718     A7 3C 68 FC | 	wrlong	#30, fp
1471c     08 4E 85 F1 | 	sub	fp, #8
14720     A7 12 02 F6 | 	mov	arg01, fp
14724     14 5E BF FD | 	call	#_push
14728                 | LR__1671
14728     A7 F0 03 F6 | 	mov	ptra, fp
1472c     B2 00 A0 FD | 	call	#popregs_
14730                 | _do_acos_ret
14730     2D 00 64 FD | 	ret
14734                 | 
14734                 | ' 
14734                 | ' sub do_atn
14734                 | _do_atn
14734     01 4A 05 F6 | 	mov	COUNT_, #1
14738     A8 00 A0 FD | 	call	#pushregs_
1473c     10 F0 07 F1 | 	add	ptra, #16
14740     6A 00 00 FF 
14744     70 E4 05 F1 | 	add	objptr, ##54384
14748     F2 1E 02 FB | 	rdlong	local01, objptr
1474c     0F 17 02 F6 | 	mov	arg03, local01
14750     01 16 66 F0 | 	shl	arg03, #1
14754     0F 17 02 F1 | 	add	arg03, local01
14758     02 16 66 F0 | 	shl	arg03, #2
1475c     03 00 00 FF 
14760     04 E4 85 F1 | 	sub	objptr, ##1540
14764     F2 16 02 F1 | 	add	arg03, objptr
14768     0B 17 02 FB | 	rdlong	arg03, arg03
1476c     0C 4E 05 F1 | 	add	fp, #12
14770     A7 16 62 FC | 	wrlong	arg03, fp
14774                 | ' 
14774                 | ' numpar=compiledline(lineptr_e).result.uresult
14774                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
14774     0C 4E 85 F1 | 	sub	fp, #12
14778     02 16 16 F2 | 	cmp	arg03, #2 wc
1477c     67 00 00 FF 
14780     6C E4 85 F1 | 	sub	objptr, ##52844
14784     0C 4E 05 C1 |  if_b	add	fp, #12
14788     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1478c     0C 4E 85 C1 |  if_b	sub	fp, #12
14790     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14794     00 12 06 F6 | 	mov	arg01, #0
14798     30 F7 B0 FD | 	call	#__system___getiolock_0475
1479c     FD 12 02 F6 | 	mov	arg01, result1
147a0     94 9D B0 FD | 	call	#__system___lockmem
147a4     71 01 00 FF 
147a8     42 14 06 F6 | 	mov	arg02, ##@LR__5134
147ac     00 12 06 F6 | 	mov	arg01, #0
147b0     00 16 06 F6 | 	mov	arg03, #0
147b4     84 AA B0 FD | 	call	#__system___basic_print_string
147b8     00 12 06 F6 | 	mov	arg01, #0
147bc     0C F7 B0 FD | 	call	#__system___getiolock_0475
147c0     FD 00 68 FC | 	wrlong	#0, result1
147c4     27 12 06 F6 | 	mov	arg01, #39
147c8     10 59 B0 FD | 	call	#_printerror
147cc     6C 00 90 FD | 	jmp	#LR__1681
147d0                 | LR__1680
147d0     D0 5C BF FD | 	call	#_pop
147d4     FF 1E 02 F6 | 	mov	local01, result3
147d8     A7 FA 61 FC | 	wrlong	result1, fp
147dc     04 4E 05 F1 | 	add	fp, #4
147e0     A7 FC 61 FC | 	wrlong	result2, fp
147e4     04 4E 05 F1 | 	add	fp, #4
147e8     A7 1E 62 FC | 	wrlong	local01, fp
147ec     08 4E 85 F1 | 	sub	fp, #8
147f0     A7 12 02 F6 | 	mov	arg01, fp
147f4     24 E8 BF FD | 	call	#_converttofloat
147f8     FD 12 02 F6 | 	mov	arg01, result1
147fc     00 C0 1F FF 
14800     00 14 06 F6 | 	mov	arg02, ##1065353216
14804     14 D4 B0 FD | 	call	#__system____builtin_atan2f
14808     FD 12 02 F6 | 	mov	arg01, result1
1480c     7B 00 00 FF 
14810     7C E4 05 F1 | 	add	objptr, ##63100
14814     F2 14 02 FB | 	rdlong	arg02, objptr
14818     7B 00 00 FF 
1481c     7C E4 85 F1 | 	sub	objptr, ##63100
14820     90 C8 B0 FD | 	call	#__system___float_mul
14824     A7 FA 61 FC | 	wrlong	result1, fp
14828     08 4E 05 F1 | 	add	fp, #8
1482c     A7 3C 68 FC | 	wrlong	#30, fp
14830     08 4E 85 F1 | 	sub	fp, #8
14834     A7 12 02 F6 | 	mov	arg01, fp
14838     00 5D BF FD | 	call	#_push
1483c                 | LR__1681
1483c     A7 F0 03 F6 | 	mov	ptra, fp
14840     B2 00 A0 FD | 	call	#popregs_
14844                 | _do_atn_ret
14844     2D 00 64 FD | 	ret
14848                 | 
14848                 | ' 
14848                 | ' sub do_sqr
14848                 | _do_sqr
14848     01 4A 05 F6 | 	mov	COUNT_, #1
1484c     A8 00 A0 FD | 	call	#pushregs_
14850     10 F0 07 F1 | 	add	ptra, #16
14854     6A 00 00 FF 
14858     70 E4 05 F1 | 	add	objptr, ##54384
1485c     F2 1E 02 FB | 	rdlong	local01, objptr
14860     0F 17 02 F6 | 	mov	arg03, local01
14864     01 16 66 F0 | 	shl	arg03, #1
14868     0F 17 02 F1 | 	add	arg03, local01
1486c     02 16 66 F0 | 	shl	arg03, #2
14870     03 00 00 FF 
14874     04 E4 85 F1 | 	sub	objptr, ##1540
14878     F2 16 02 F1 | 	add	arg03, objptr
1487c     0B 17 02 FB | 	rdlong	arg03, arg03
14880     0C 4E 05 F1 | 	add	fp, #12
14884     A7 16 62 FC | 	wrlong	arg03, fp
14888                 | ' 
14888                 | ' numpar=compiledline(lineptr_e).result.uresult
14888                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
14888     0C 4E 85 F1 | 	sub	fp, #12
1488c     02 16 16 F2 | 	cmp	arg03, #2 wc
14890     67 00 00 FF 
14894     6C E4 85 F1 | 	sub	objptr, ##52844
14898     0C 4E 05 C1 |  if_b	add	fp, #12
1489c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
148a0     0C 4E 85 C1 |  if_b	sub	fp, #12
148a4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1690
148a8     00 12 06 F6 | 	mov	arg01, #0
148ac     1C F6 B0 FD | 	call	#__system___getiolock_0475
148b0     FD 12 02 F6 | 	mov	arg01, result1
148b4     80 9C B0 FD | 	call	#__system___lockmem
148b8     71 01 00 FF 
148bc     48 14 06 F6 | 	mov	arg02, ##@LR__5135
148c0     00 12 06 F6 | 	mov	arg01, #0
148c4     00 16 06 F6 | 	mov	arg03, #0
148c8     70 A9 B0 FD | 	call	#__system___basic_print_string
148cc     00 12 06 F6 | 	mov	arg01, #0
148d0     F8 F5 B0 FD | 	call	#__system___getiolock_0475
148d4     FD 00 68 FC | 	wrlong	#0, result1
148d8     27 12 06 F6 | 	mov	arg01, #39
148dc     FC 57 B0 FD | 	call	#_printerror
148e0     48 00 90 FD | 	jmp	#LR__1691
148e4                 | LR__1690
148e4     BC 5B BF FD | 	call	#_pop
148e8     FF 1E 02 F6 | 	mov	local01, result3
148ec     A7 FA 61 FC | 	wrlong	result1, fp
148f0     04 4E 05 F1 | 	add	fp, #4
148f4     A7 FC 61 FC | 	wrlong	result2, fp
148f8     04 4E 05 F1 | 	add	fp, #4
148fc     A7 1E 62 FC | 	wrlong	local01, fp
14900     08 4E 85 F1 | 	sub	fp, #8
14904     A7 12 02 F6 | 	mov	arg01, fp
14908     10 E7 BF FD | 	call	#_converttofloat
1490c     FD 12 02 F6 | 	mov	arg01, result1
14910     C8 C6 B0 FD | 	call	#__system___float_sqrt
14914     A7 FA 61 FC | 	wrlong	result1, fp
14918     08 4E 05 F1 | 	add	fp, #8
1491c     A7 3C 68 FC | 	wrlong	#30, fp
14920     08 4E 85 F1 | 	sub	fp, #8
14924     A7 12 02 F6 | 	mov	arg01, fp
14928     10 5C BF FD | 	call	#_push
1492c                 | LR__1691
1492c     A7 F0 03 F6 | 	mov	ptra, fp
14930     B2 00 A0 FD | 	call	#popregs_
14934                 | _do_sqr_ret
14934     2D 00 64 FD | 	ret
14938                 | 
14938                 | ' 
14938                 | ' sub do_stick
14938                 | _do_stick
14938     01 4A 05 F6 | 	mov	COUNT_, #1
1493c     A8 00 A0 FD | 	call	#pushregs_
14940     10 F0 07 F1 | 	add	ptra, #16
14944     6A 00 00 FF 
14948     70 E4 05 F1 | 	add	objptr, ##54384
1494c     F2 1E 02 FB | 	rdlong	local01, objptr
14950     0F 17 02 F6 | 	mov	arg03, local01
14954     01 16 66 F0 | 	shl	arg03, #1
14958     0F 17 02 F1 | 	add	arg03, local01
1495c     02 16 66 F0 | 	shl	arg03, #2
14960     03 00 00 FF 
14964     04 E4 85 F1 | 	sub	objptr, ##1540
14968     F2 16 02 F1 | 	add	arg03, objptr
1496c     0B 17 02 FB | 	rdlong	arg03, arg03
14970     0C 4E 05 F1 | 	add	fp, #12
14974     A7 16 62 FC | 	wrlong	arg03, fp
14978                 | ' 
14978                 | ' numpar=compiledline(lineptr_e).result.uresult
14978                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
14978     0C 4E 85 F1 | 	sub	fp, #12
1497c     02 16 16 F2 | 	cmp	arg03, #2 wc
14980     67 00 00 FF 
14984     6C E4 85 F1 | 	sub	objptr, ##52844
14988     3C 00 90 CD |  if_b	jmp	#LR__1700
1498c     00 12 06 F6 | 	mov	arg01, #0
14990     38 F5 B0 FD | 	call	#__system___getiolock_0475
14994     FD 12 02 F6 | 	mov	arg01, result1
14998     9C 9B B0 FD | 	call	#__system___lockmem
1499c     71 01 00 FF 
149a0     4E 14 06 F6 | 	mov	arg02, ##@LR__5136
149a4     00 12 06 F6 | 	mov	arg01, #0
149a8     00 16 06 F6 | 	mov	arg03, #0
149ac     8C A8 B0 FD | 	call	#__system___basic_print_string
149b0     00 12 06 F6 | 	mov	arg01, #0
149b4     14 F5 B0 FD | 	call	#__system___getiolock_0475
149b8     FD 00 68 FC | 	wrlong	#0, result1
149bc     27 12 06 F6 | 	mov	arg01, #39
149c0     18 57 B0 FD | 	call	#_printerror
149c4     E8 00 90 FD | 	jmp	#LR__1704
149c8                 | LR__1700
149c8                 | ' 
149c8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
149c8     0C 4E 05 F1 | 	add	fp, #12
149cc     A7 FE 09 FB | 	rdlong	result3, fp wz
149d0     0C 4E 85 F1 | 	sub	fp, #12
149d4     30 00 90 5D |  if_ne	jmp	#LR__1701
149d8     7A 00 00 FF 
149dc     EC E5 05 F1 | 	add	objptr, ##62956
149e0     F2 1E 02 FB | 	rdlong	local01, objptr
149e4     7A 00 00 FF 
149e8     EC E5 85 F1 | 	sub	objptr, ##62956
149ec     A7 1E 62 FC | 	wrlong	local01, fp
149f0     08 4E 05 F1 | 	add	fp, #8
149f4     A7 3A 68 FC | 	wrlong	#29, fp
149f8     08 4E 85 F1 | 	sub	fp, #8
149fc     A7 12 02 F6 | 	mov	arg01, fp
14a00     38 5B BF FD | 	call	#_push
14a04     A8 00 90 FD | 	jmp	#LR__1704
14a08                 | LR__1701
14a08     98 5A BF FD | 	call	#_pop
14a0c     A7 FA 61 FC | 	wrlong	result1, fp
14a10     04 4E 05 F1 | 	add	fp, #4
14a14     A7 FC 61 FC | 	wrlong	result2, fp
14a18     04 4E 05 F1 | 	add	fp, #4
14a1c     A7 FE 61 FC | 	wrlong	result3, fp
14a20                 | ' 
14a20                 | ' t1=pop()
14a20                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14a20     08 4E 85 F1 | 	sub	fp, #8
14a24     1C FE 0D F2 | 	cmp	result3, #28 wz
14a28     08 4E 05 51 |  if_ne	add	fp, #8
14a2c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14a30     08 4E 85 51 |  if_ne	sub	fp, #8
14a34     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14a38     6C 00 90 5D |  if_ne	jmp	#LR__1703
14a3c     A7 1E 02 FB | 	rdlong	local01, fp
14a40     7B 00 00 FF 
14a44     E4 E4 05 F1 | 	add	objptr, ##63204
14a48     F2 1E 62 FC | 	wrlong	local01, objptr
14a4c                 | '   q=t1.result.uresult
14a4c                 | '   if q<7 then 
14a4c     7B 00 00 FF 
14a50     E4 E4 85 F1 | 	sub	objptr, ##63204
14a54     07 1E 56 F2 | 	cmps	local01, #7 wc
14a58     40 00 90 3D |  if_ae	jmp	#LR__1702
14a5c     7B 00 00 FF 
14a60     E4 E4 05 F1 | 	add	objptr, ##63204
14a64     F2 1E 02 FB | 	rdlong	local01, objptr
14a68     02 1E 66 F0 | 	shl	local01, #2
14a6c     F8 E4 85 F1 | 	sub	objptr, #248
14a70     F2 1E 02 F1 | 	add	local01, objptr
14a74     0F 1F 02 FB | 	rdlong	local01, local01
14a78     A7 1E 62 FC | 	wrlong	local01, fp
14a7c     08 4E 05 F1 | 	add	fp, #8
14a80     A7 3A 68 FC | 	wrlong	#29, fp
14a84     08 4E 85 F1 | 	sub	fp, #8
14a88     A7 12 02 F6 | 	mov	arg01, fp
14a8c     7A 00 00 FF 
14a90     EC E5 85 F1 | 	sub	objptr, ##62956
14a94     A4 5A BF FD | 	call	#_push
14a98                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
14a98     14 00 90 FD | 	jmp	#LR__1704
14a9c                 | LR__1702
14a9c     29 12 06 F6 | 	mov	arg01, #41
14aa0     38 56 B0 FD | 	call	#_printerror
14aa4                 | '      printerror(41) : return
14aa4     08 00 90 FD | 	jmp	#LR__1704
14aa8                 | LR__1703
14aa8     29 12 06 F6 | 	mov	arg01, #41
14aac     2C 56 B0 FD | 	call	#_printerror
14ab0                 | LR__1704
14ab0     A7 F0 03 F6 | 	mov	ptra, fp
14ab4     B2 00 A0 FD | 	call	#popregs_
14ab8                 | _do_stick_ret
14ab8     2D 00 64 FD | 	ret
14abc                 | 
14abc                 | ' 
14abc                 | ' sub do_strig
14abc                 | _do_strig
14abc     01 4A 05 F6 | 	mov	COUNT_, #1
14ac0     A8 00 A0 FD | 	call	#pushregs_
14ac4     10 F0 07 F1 | 	add	ptra, #16
14ac8     6A 00 00 FF 
14acc     70 E4 05 F1 | 	add	objptr, ##54384
14ad0     F2 1E 02 FB | 	rdlong	local01, objptr
14ad4     0F 17 02 F6 | 	mov	arg03, local01
14ad8     01 16 66 F0 | 	shl	arg03, #1
14adc     0F 17 02 F1 | 	add	arg03, local01
14ae0     02 16 66 F0 | 	shl	arg03, #2
14ae4     03 00 00 FF 
14ae8     04 E4 85 F1 | 	sub	objptr, ##1540
14aec     F2 16 02 F1 | 	add	arg03, objptr
14af0     0B 17 02 FB | 	rdlong	arg03, arg03
14af4     0C 4E 05 F1 | 	add	fp, #12
14af8     A7 16 62 FC | 	wrlong	arg03, fp
14afc                 | ' 
14afc                 | ' numpar=compiledline(lineptr_e).result.uresult
14afc                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
14afc     0C 4E 85 F1 | 	sub	fp, #12
14b00     02 16 16 F2 | 	cmp	arg03, #2 wc
14b04     67 00 00 FF 
14b08     6C E4 85 F1 | 	sub	objptr, ##52844
14b0c     3C 00 90 CD |  if_b	jmp	#LR__1710
14b10     00 12 06 F6 | 	mov	arg01, #0
14b14     B4 F3 B0 FD | 	call	#__system___getiolock_0475
14b18     FD 12 02 F6 | 	mov	arg01, result1
14b1c     18 9A B0 FD | 	call	#__system___lockmem
14b20     71 01 00 FF 
14b24     56 14 06 F6 | 	mov	arg02, ##@LR__5137
14b28     00 12 06 F6 | 	mov	arg01, #0
14b2c     00 16 06 F6 | 	mov	arg03, #0
14b30     08 A7 B0 FD | 	call	#__system___basic_print_string
14b34     00 12 06 F6 | 	mov	arg01, #0
14b38     90 F3 B0 FD | 	call	#__system___getiolock_0475
14b3c     FD 00 68 FC | 	wrlong	#0, result1
14b40     27 12 06 F6 | 	mov	arg01, #39
14b44     94 55 B0 FD | 	call	#_printerror
14b48     E8 00 90 FD | 	jmp	#LR__1714
14b4c                 | LR__1710
14b4c                 | ' 
14b4c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
14b4c     0C 4E 05 F1 | 	add	fp, #12
14b50     A7 FE 09 FB | 	rdlong	result3, fp wz
14b54     0C 4E 85 F1 | 	sub	fp, #12
14b58     30 00 90 5D |  if_ne	jmp	#LR__1711
14b5c     7B 00 00 FF 
14b60     08 E4 05 F1 | 	add	objptr, ##62984
14b64     F2 1E 02 FB | 	rdlong	local01, objptr
14b68     7B 00 00 FF 
14b6c     08 E4 85 F1 | 	sub	objptr, ##62984
14b70     A7 1E 62 FC | 	wrlong	local01, fp
14b74     08 4E 05 F1 | 	add	fp, #8
14b78     A7 3A 68 FC | 	wrlong	#29, fp
14b7c     08 4E 85 F1 | 	sub	fp, #8
14b80     A7 12 02 F6 | 	mov	arg01, fp
14b84     B4 59 BF FD | 	call	#_push
14b88     A8 00 90 FD | 	jmp	#LR__1714
14b8c                 | LR__1711
14b8c     14 59 BF FD | 	call	#_pop
14b90     A7 FA 61 FC | 	wrlong	result1, fp
14b94     04 4E 05 F1 | 	add	fp, #4
14b98     A7 FC 61 FC | 	wrlong	result2, fp
14b9c     04 4E 05 F1 | 	add	fp, #4
14ba0     A7 FE 61 FC | 	wrlong	result3, fp
14ba4                 | ' 
14ba4                 | ' t1=pop()
14ba4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14ba4     08 4E 85 F1 | 	sub	fp, #8
14ba8     1C FE 0D F2 | 	cmp	result3, #28 wz
14bac     08 4E 05 51 |  if_ne	add	fp, #8
14bb0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14bb4     08 4E 85 51 |  if_ne	sub	fp, #8
14bb8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14bbc     6C 00 90 5D |  if_ne	jmp	#LR__1713
14bc0     A7 1E 02 FB | 	rdlong	local01, fp
14bc4     7B 00 00 FF 
14bc8     E4 E4 05 F1 | 	add	objptr, ##63204
14bcc     F2 1E 62 FC | 	wrlong	local01, objptr
14bd0                 | '   q=t1.result.uresult
14bd0                 | '   if q<7 then 
14bd0     7B 00 00 FF 
14bd4     E4 E4 85 F1 | 	sub	objptr, ##63204
14bd8     07 1E 56 F2 | 	cmps	local01, #7 wc
14bdc     40 00 90 3D |  if_ae	jmp	#LR__1712
14be0     7B 00 00 FF 
14be4     E4 E4 05 F1 | 	add	objptr, ##63204
14be8     F2 1E 02 FB | 	rdlong	local01, objptr
14bec     02 1E 66 F0 | 	shl	local01, #2
14bf0     DC E4 85 F1 | 	sub	objptr, #220
14bf4     F2 1E 02 F1 | 	add	local01, objptr
14bf8     0F 1F 02 FB | 	rdlong	local01, local01
14bfc     A7 1E 62 FC | 	wrlong	local01, fp
14c00     08 4E 05 F1 | 	add	fp, #8
14c04     A7 3A 68 FC | 	wrlong	#29, fp
14c08     08 4E 85 F1 | 	sub	fp, #8
14c0c     A7 12 02 F6 | 	mov	arg01, fp
14c10     7B 00 00 FF 
14c14     08 E4 85 F1 | 	sub	objptr, ##62984
14c18     20 59 BF FD | 	call	#_push
14c1c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
14c1c     14 00 90 FD | 	jmp	#LR__1714
14c20                 | LR__1712
14c20     29 12 06 F6 | 	mov	arg01, #41
14c24     B4 54 B0 FD | 	call	#_printerror
14c28                 | '      printerror(41) : return
14c28     08 00 90 FD | 	jmp	#LR__1714
14c2c                 | LR__1713
14c2c     29 12 06 F6 | 	mov	arg01, #41
14c30     A8 54 B0 FD | 	call	#_printerror
14c34                 | LR__1714
14c34     A7 F0 03 F6 | 	mov	ptra, fp
14c38     B2 00 A0 FD | 	call	#popregs_
14c3c                 | _do_strig_ret
14c3c     2D 00 64 FD | 	ret
14c40                 | 
14c40                 | ' 
14c40                 | ' sub do_getpixel
14c40                 | _do_getpixel
14c40     00 4A 05 F6 | 	mov	COUNT_, #0
14c44     A8 00 A0 FD | 	call	#pushregs_
14c48     24 F0 07 F1 | 	add	ptra, #36
14c4c     6A 00 00 FF 
14c50     70 E4 05 F1 | 	add	objptr, ##54384
14c54     F2 16 02 FB | 	rdlong	arg03, objptr
14c58     0B 15 02 F6 | 	mov	arg02, arg03
14c5c     01 14 66 F0 | 	shl	arg02, #1
14c60     0B 15 02 F1 | 	add	arg02, arg03
14c64     02 14 66 F0 | 	shl	arg02, #2
14c68     03 00 00 FF 
14c6c     04 E4 85 F1 | 	sub	objptr, ##1540
14c70     F2 14 02 F1 | 	add	arg02, objptr
14c74     0A 17 02 FB | 	rdlong	arg03, arg02
14c78     18 4E 05 F1 | 	add	fp, #24
14c7c     A7 16 62 FC | 	wrlong	arg03, fp
14c80                 | ' 
14c80                 | ' numpar=compiledline(lineptr_e).result.uresult
14c80                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
14c80     18 4E 85 F1 | 	sub	fp, #24
14c84     02 16 0E F2 | 	cmp	arg03, #2 wz
14c88     67 00 00 FF 
14c8c     6C E4 85 F1 | 	sub	objptr, ##52844
14c90     3C 00 90 AD |  if_e	jmp	#LR__1720
14c94     00 12 06 F6 | 	mov	arg01, #0
14c98     30 F2 B0 FD | 	call	#__system___getiolock_0475
14c9c     FD 12 02 F6 | 	mov	arg01, result1
14ca0     94 98 B0 FD | 	call	#__system___lockmem
14ca4     71 01 00 FF 
14ca8     5E 14 06 F6 | 	mov	arg02, ##@LR__5138
14cac     00 12 06 F6 | 	mov	arg01, #0
14cb0     00 16 06 F6 | 	mov	arg03, #0
14cb4     84 A5 B0 FD | 	call	#__system___basic_print_string
14cb8     00 12 06 F6 | 	mov	arg01, #0
14cbc     0C F2 B0 FD | 	call	#__system___getiolock_0475
14cc0     FD 00 68 FC | 	wrlong	#0, result1
14cc4     27 12 06 F6 | 	mov	arg01, #39
14cc8     10 54 B0 FD | 	call	#_printerror
14ccc     B4 00 90 FD | 	jmp	#LR__1721
14cd0                 | LR__1720
14cd0     D0 57 BF FD | 	call	#_pop
14cd4     FD 16 02 F6 | 	mov	arg03, result1
14cd8     FE 14 02 F6 | 	mov	arg02, result2
14cdc     FF 12 02 F6 | 	mov	arg01, result3
14ce0     0C 4E 05 F1 | 	add	fp, #12
14ce4     A7 16 62 FC | 	wrlong	arg03, fp
14ce8     04 4E 05 F1 | 	add	fp, #4
14cec     A7 14 62 FC | 	wrlong	arg02, fp
14cf0     04 4E 05 F1 | 	add	fp, #4
14cf4     A7 12 62 FC | 	wrlong	arg01, fp
14cf8     14 4E 85 F1 | 	sub	fp, #20
14cfc     A4 57 BF FD | 	call	#_pop
14d00     FF 16 02 F6 | 	mov	arg03, result3
14d04     A7 FA 61 FC | 	wrlong	result1, fp
14d08     04 4E 05 F1 | 	add	fp, #4
14d0c     A7 FC 61 FC | 	wrlong	result2, fp
14d10     04 4E 05 F1 | 	add	fp, #4
14d14     A7 16 62 FC | 	wrlong	arg03, fp
14d18     08 4E 85 F1 | 	sub	fp, #8
14d1c     A7 12 02 F6 | 	mov	arg01, fp
14d20     4C E2 BF FD | 	call	#_converttoint
14d24     1C 4E 05 F1 | 	add	fp, #28
14d28     A7 FA 61 FC | 	wrlong	result1, fp
14d2c     10 4E 85 F1 | 	sub	fp, #16
14d30     A7 12 02 F6 | 	mov	arg01, fp
14d34     0C 4E 85 F1 | 	sub	fp, #12
14d38     34 E2 BF FD | 	call	#_converttoint
14d3c     FD 16 02 F6 | 	mov	arg03, result1
14d40     20 4E 05 F1 | 	add	fp, #32
14d44     A7 16 62 FC | 	wrlong	arg03, fp
14d48     F2 12 02 FB | 	rdlong	arg01, objptr
14d4c     04 4E 85 F1 | 	sub	fp, #4
14d50     A7 FE 01 FB | 	rdlong	result3, fp
14d54     FF 12 02 F1 | 	add	arg01, result3
14d58     1C 4E 85 F1 | 	sub	fp, #28
14d5c     0A 16 66 F0 | 	shl	arg03, #10
14d60     0B 13 02 F1 | 	add	arg01, arg03
14d64     AC 55 B0 FD | 	call	#_pspeek
14d68     FD FA E1 F8 | 	getbyte	result1, result1, #0
14d6c     A7 FA 61 FC | 	wrlong	result1, fp
14d70     08 4E 05 F1 | 	add	fp, #8
14d74     A7 3A 68 FC | 	wrlong	#29, fp
14d78     08 4E 85 F1 | 	sub	fp, #8
14d7c     A7 12 02 F6 | 	mov	arg01, fp
14d80     B8 57 BF FD | 	call	#_push
14d84                 | LR__1721
14d84     A7 F0 03 F6 | 	mov	ptra, fp
14d88     B2 00 A0 FD | 	call	#popregs_
14d8c                 | _do_getpixel_ret
14d8c     2D 00 64 FD | 	ret
14d90                 | 
14d90                 | ' 
14d90                 | ' 
14d90                 | ' 
14d90                 | ' sub do_defsprite
14d90                 | _do_defsprite
14d90     07 4A 05 F6 | 	mov	COUNT_, #7
14d94     A8 00 A0 FD | 	call	#pushregs_
14d98     60 F0 07 F1 | 	add	ptra, #96
14d9c     04 57 BF FD | 	call	#_pop
14da0     FD 16 02 F6 | 	mov	arg03, result1
14da4     FE 14 02 F6 | 	mov	arg02, result2
14da8     FF 12 02 F6 | 	mov	arg01, result3
14dac     30 4E 05 F1 | 	add	fp, #48
14db0     A7 16 62 FC | 	wrlong	arg03, fp
14db4     04 4E 05 F1 | 	add	fp, #4
14db8     A7 14 62 FC | 	wrlong	arg02, fp
14dbc     04 4E 05 F1 | 	add	fp, #4
14dc0     A7 12 62 FC | 	wrlong	arg01, fp
14dc4     38 4E 85 F1 | 	sub	fp, #56
14dc8     D8 56 BF FD | 	call	#_pop
14dcc     FD 16 02 F6 | 	mov	arg03, result1
14dd0     FE 14 02 F6 | 	mov	arg02, result2
14dd4     FF 12 02 F6 | 	mov	arg01, result3
14dd8     24 4E 05 F1 | 	add	fp, #36
14ddc     A7 16 62 FC | 	wrlong	arg03, fp
14de0     04 4E 05 F1 | 	add	fp, #4
14de4     A7 14 62 FC | 	wrlong	arg02, fp
14de8     04 4E 05 F1 | 	add	fp, #4
14dec     A7 12 62 FC | 	wrlong	arg01, fp
14df0     2C 4E 85 F1 | 	sub	fp, #44
14df4     AC 56 BF FD | 	call	#_pop
14df8     FD 16 02 F6 | 	mov	arg03, result1
14dfc     FE 14 02 F6 | 	mov	arg02, result2
14e00     FF 12 02 F6 | 	mov	arg01, result3
14e04     18 4E 05 F1 | 	add	fp, #24
14e08     A7 16 62 FC | 	wrlong	arg03, fp
14e0c     04 4E 05 F1 | 	add	fp, #4
14e10     A7 14 62 FC | 	wrlong	arg02, fp
14e14     04 4E 05 F1 | 	add	fp, #4
14e18     A7 12 62 FC | 	wrlong	arg01, fp
14e1c     20 4E 85 F1 | 	sub	fp, #32
14e20     80 56 BF FD | 	call	#_pop
14e24     FD 16 02 F6 | 	mov	arg03, result1
14e28     FE 14 02 F6 | 	mov	arg02, result2
14e2c     FF 12 02 F6 | 	mov	arg01, result3
14e30     0C 4E 05 F1 | 	add	fp, #12
14e34     A7 16 62 FC | 	wrlong	arg03, fp
14e38     04 4E 05 F1 | 	add	fp, #4
14e3c     A7 14 62 FC | 	wrlong	arg02, fp
14e40     04 4E 05 F1 | 	add	fp, #4
14e44     A7 12 62 FC | 	wrlong	arg01, fp
14e48     14 4E 85 F1 | 	sub	fp, #20
14e4c     54 56 BF FD | 	call	#_pop
14e50     FF 16 02 F6 | 	mov	arg03, result3
14e54     A7 FA 61 FC | 	wrlong	result1, fp
14e58     04 4E 05 F1 | 	add	fp, #4
14e5c     A7 FC 61 FC | 	wrlong	result2, fp
14e60     04 4E 05 F1 | 	add	fp, #4
14e64     A7 16 62 FC | 	wrlong	arg03, fp
14e68     08 4E 85 F1 | 	sub	fp, #8
14e6c     A7 12 02 F6 | 	mov	arg01, fp
14e70     FC E0 BF FD | 	call	#_converttoint
14e74     3C 4E 05 F1 | 	add	fp, #60
14e78     A7 FA 61 FC | 	wrlong	result1, fp
14e7c     30 4E 85 F1 | 	sub	fp, #48
14e80     A7 12 02 F6 | 	mov	arg01, fp
14e84     0C 4E 85 F1 | 	sub	fp, #12
14e88     E4 E0 BF FD | 	call	#_converttoint
14e8c     40 4E 05 F1 | 	add	fp, #64
14e90     A7 FA 61 FC | 	wrlong	result1, fp
14e94     28 4E 85 F1 | 	sub	fp, #40
14e98     A7 12 02 F6 | 	mov	arg01, fp
14e9c     18 4E 85 F1 | 	sub	fp, #24
14ea0     CC E0 BF FD | 	call	#_converttoint
14ea4     44 4E 05 F1 | 	add	fp, #68
14ea8     A7 FA 61 FC | 	wrlong	result1, fp
14eac     20 4E 85 F1 | 	sub	fp, #32
14eb0     A7 12 02 F6 | 	mov	arg01, fp
14eb4     24 4E 85 F1 | 	sub	fp, #36
14eb8     B4 E0 BF FD | 	call	#_converttoint
14ebc     48 4E 05 F1 | 	add	fp, #72
14ec0     A7 FA 61 FC | 	wrlong	result1, fp
14ec4     18 4E 85 F1 | 	sub	fp, #24
14ec8     A7 12 02 F6 | 	mov	arg01, fp
14ecc     30 4E 85 F1 | 	sub	fp, #48
14ed0     9C E0 BF FD | 	call	#_converttoint
14ed4     4C 4E 05 F1 | 	add	fp, #76
14ed8     A7 FA 61 FC | 	wrlong	result1, fp
14edc                 | ' 
14edc                 | ' t5=pop()
14edc                 | ' t4=pop()
14edc                 | ' t3=pop()
14edc                 | ' t2=pop()
14edc                 | ' t1=pop()
14edc                 | ' 
14edc                 | ' ' do convert, defsprite is not a racing command
14edc                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
14edc                 | '  
14edc                 | ' ' todo: check parameters for linits
14edc                 | ' if sprite(a1)<> nil then delete(sprite(a1))
14edc     10 4E 85 F1 | 	sub	fp, #16
14ee0     A7 16 02 FB | 	rdlong	arg03, fp
14ee4     3C 4E 85 F1 | 	sub	fp, #60
14ee8     02 16 66 F0 | 	shl	arg03, #2
14eec     7B 00 00 FF 
14ef0     24 E4 05 F1 | 	add	objptr, ##63012
14ef4     F2 16 02 F1 | 	add	arg03, objptr
14ef8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
14efc     7B 00 00 FF 
14f00     24 E4 85 F1 | 	sub	objptr, ##63012
14f04     2C 00 90 AD |  if_e	jmp	#LR__1730
14f08     3C 4E 05 F1 | 	add	fp, #60
14f0c     A7 16 02 FB | 	rdlong	arg03, fp
14f10     3C 4E 85 F1 | 	sub	fp, #60
14f14     02 16 66 F0 | 	shl	arg03, #2
14f18     7B 00 00 FF 
14f1c     24 E4 05 F1 | 	add	objptr, ##63012
14f20     F2 16 02 F1 | 	add	arg03, objptr
14f24     0B 13 02 FB | 	rdlong	arg01, arg03
14f28     7B 00 00 FF 
14f2c     24 E4 85 F1 | 	sub	objptr, ##63012
14f30     88 D5 B0 FD | 	call	#__system___gc_free
14f34                 | LR__1730
14f34     3C 4E 05 F1 | 	add	fp, #60
14f38     A7 1E 02 FB | 	rdlong	local01, fp
14f3c     0C 4E 05 F1 | 	add	fp, #12
14f40     A7 16 02 FB | 	rdlong	arg03, fp
14f44     04 4E 05 F1 | 	add	fp, #4
14f48     A7 14 02 FB | 	rdlong	arg02, fp
14f4c     0A 17 02 FD | 	qmul	arg03, arg02
14f50     02 1E 66 F0 | 	shl	local01, #2
14f54     7B 00 00 FF 
14f58     24 E4 05 F1 | 	add	objptr, ##63012
14f5c     F2 1E 02 F1 | 	add	local01, objptr
14f60     4C 4E 85 F1 | 	sub	fp, #76
14f64     7B 00 00 FF 
14f68     24 E4 85 F1 | 	sub	objptr, ##63012
14f6c     18 12 62 FD | 	getqx	arg01
14f70     0C D4 B0 FD | 	call	#__system___gc_alloc_managed
14f74     0F FB 61 FC | 	wrlong	result1, local01
14f78                 | ' for y=a3 to a3+a5-1
14f78     44 4E 05 F1 | 	add	fp, #68
14f7c     A7 20 02 FB | 	rdlong	local02, fp
14f80     0C 4E 05 F1 | 	add	fp, #12
14f84     A7 20 62 FC | 	wrlong	local02, fp
14f88     0C 4E 85 F1 | 	sub	fp, #12
14f8c     A7 22 02 FB | 	rdlong	local03, fp
14f90     08 4E 05 F1 | 	add	fp, #8
14f94     A7 24 02 FB | 	rdlong	local04, fp
14f98     4C 4E 85 F1 | 	sub	fp, #76
14f9c     12 23 02 F1 | 	add	local03, local04
14fa0                 | LR__1731
14fa0     50 4E 05 F1 | 	add	fp, #80
14fa4     A7 20 02 FB | 	rdlong	local02, fp
14fa8     50 4E 85 F1 | 	sub	fp, #80
14fac     11 21 52 F2 | 	cmps	local02, local03 wc
14fb0     F4 00 90 3D |  if_ae	jmp	#LR__1734
14fb4                 | '   for x=a2 to a4+a2-1
14fb4     40 4E 05 F1 | 	add	fp, #64
14fb8     A7 1E 02 FB | 	rdlong	local01, fp
14fbc     14 4E 05 F1 | 	add	fp, #20
14fc0     A7 1E 62 FC | 	wrlong	local01, fp
14fc4     0C 4E 85 F1 | 	sub	fp, #12
14fc8     A7 26 02 FB | 	rdlong	local05, fp
14fcc     08 4E 85 F1 | 	sub	fp, #8
14fd0     A7 28 02 FB | 	rdlong	local06, fp
14fd4     40 4E 85 F1 | 	sub	fp, #64
14fd8     14 27 02 F1 | 	add	local05, local06
14fdc                 | LR__1732
14fdc     54 4E 05 F1 | 	add	fp, #84
14fe0     A7 1E 02 FB | 	rdlong	local01, fp
14fe4     54 4E 85 F1 | 	sub	fp, #84
14fe8     13 1F 52 F2 | 	cmps	local01, local05 wc
14fec     A0 00 90 3D |  if_ae	jmp	#LR__1733
14ff0     3C 4E 05 F1 | 	add	fp, #60
14ff4     A7 28 02 FB | 	rdlong	local06, fp
14ff8     18 4E 05 F1 | 	add	fp, #24
14ffc     A7 24 02 FB | 	rdlong	local04, fp
15000     14 4E 85 F1 | 	sub	fp, #20
15004     A7 20 02 FB | 	rdlong	local02, fp
15008     10 4E 05 F1 | 	add	fp, #16
1500c     A7 1E 02 FB | 	rdlong	local01, fp
15010     0F 17 02 F6 | 	mov	arg03, local01
15014     0C 4E 85 F1 | 	sub	fp, #12
15018     A7 14 02 FB | 	rdlong	arg02, fp
1501c     0A 17 82 F1 | 	sub	arg03, arg02
15020     04 4E 05 F1 | 	add	fp, #4
15024     A7 14 02 FB | 	rdlong	arg02, fp
15028     0A 17 02 FD | 	qmul	arg03, arg02
1502c     02 28 66 F0 | 	shl	local06, #2
15030     7B 00 00 FF 
15034     24 E4 05 F1 | 	add	objptr, ##63012
15038     F2 28 02 F1 | 	add	local06, objptr
1503c     14 29 02 FB | 	rdlong	local06, local06
15040     12 2B 02 F6 | 	mov	local07, local04
15044     10 2B 82 F1 | 	sub	local07, local02
15048     7B 00 00 FF 
1504c     24 E4 85 F1 | 	sub	objptr, ##63012
15050     F2 12 02 FB | 	rdlong	arg01, objptr
15054     12 13 02 F1 | 	add	arg01, local04
15058     48 4E 85 F1 | 	sub	fp, #72
1505c     0A 1E 66 F0 | 	shl	local01, #10
15060     0F 13 02 F1 | 	add	arg01, local01
15064     18 24 62 FD | 	getqx	local04
15068     12 2B 02 F1 | 	add	local07, local04
1506c     14 2B 02 F1 | 	add	local07, local06
15070     A0 52 B0 FD | 	call	#_pspeek
15074     15 FB 41 FC | 	wrbyte	result1, local07
15078     54 4E 05 F1 | 	add	fp, #84
1507c     A7 2A 02 FB | 	rdlong	local07, fp
15080     01 2A 06 F1 | 	add	local07, #1
15084     A7 2A 62 FC | 	wrlong	local07, fp
15088     54 4E 85 F1 | 	sub	fp, #84
1508c     4C FF 9F FD | 	jmp	#LR__1732
15090                 | LR__1733
15090     50 4E 05 F1 | 	add	fp, #80
15094     A7 2A 02 FB | 	rdlong	local07, fp
15098     01 2A 06 F1 | 	add	local07, #1
1509c     A7 2A 62 FC | 	wrlong	local07, fp
150a0     50 4E 85 F1 | 	sub	fp, #80
150a4     F8 FE 9F FD | 	jmp	#LR__1731
150a8                 | LR__1734
150a8     3C 4E 05 F1 | 	add	fp, #60
150ac     A7 2A 02 FB | 	rdlong	local07, fp
150b0     15 13 02 F6 | 	mov	arg01, local07
150b4     3C 4E 85 F1 | 	sub	fp, #60
150b8     02 2A 66 F0 | 	shl	local07, #2
150bc     7B 00 00 FF 
150c0     24 E4 05 F1 | 	add	objptr, ##63012
150c4     F2 2A 02 F1 | 	add	local07, objptr
150c8     15 15 02 FB | 	rdlong	arg02, local07
150cc     7B 00 00 FF 
150d0     24 E4 85 F1 | 	sub	objptr, ##63012
150d4     24 70 B0 FD | 	call	#_hg010b_spin2_setspriteptr
150d8     3C 4E 05 F1 | 	add	fp, #60
150dc     A7 12 02 FB | 	rdlong	arg01, fp
150e0     0C 4E 05 F1 | 	add	fp, #12
150e4     A7 14 02 FB | 	rdlong	arg02, fp
150e8     04 4E 05 F1 | 	add	fp, #4
150ec     A7 16 02 FB | 	rdlong	arg03, fp
150f0     4C 4E 85 F1 | 	sub	fp, #76
150f4     94 70 B0 FD | 	call	#_hg010b_spin2_setspritesize
150f8     A7 F0 03 F6 | 	mov	ptra, fp
150fc     B2 00 A0 FD | 	call	#popregs_
15100                 | _do_defsprite_ret
15100     2D 00 64 FD | 	ret
15104                 | 
15104                 | ' 
15104                 | ' sub do_sprite
15104                 | _do_sprite
15104     00 4A 05 F6 | 	mov	COUNT_, #0
15108     A8 00 A0 FD | 	call	#pushregs_
1510c     30 F0 07 F1 | 	add	ptra, #48
15110     90 53 BF FD | 	call	#_pop
15114     FD 16 02 F6 | 	mov	arg03, result1
15118     FE 14 02 F6 | 	mov	arg02, result2
1511c     FF 12 02 F6 | 	mov	arg01, result3
15120     18 4E 05 F1 | 	add	fp, #24
15124     A7 16 62 FC | 	wrlong	arg03, fp
15128     04 4E 05 F1 | 	add	fp, #4
1512c     A7 14 62 FC | 	wrlong	arg02, fp
15130     04 4E 05 F1 | 	add	fp, #4
15134     A7 12 62 FC | 	wrlong	arg01, fp
15138     20 4E 85 F1 | 	sub	fp, #32
1513c     64 53 BF FD | 	call	#_pop
15140     FD 16 02 F6 | 	mov	arg03, result1
15144     FE 14 02 F6 | 	mov	arg02, result2
15148     FF 12 02 F6 | 	mov	arg01, result3
1514c     0C 4E 05 F1 | 	add	fp, #12
15150     A7 16 62 FC | 	wrlong	arg03, fp
15154     04 4E 05 F1 | 	add	fp, #4
15158     A7 14 62 FC | 	wrlong	arg02, fp
1515c     04 4E 05 F1 | 	add	fp, #4
15160     A7 12 62 FC | 	wrlong	arg01, fp
15164     14 4E 85 F1 | 	sub	fp, #20
15168     38 53 BF FD | 	call	#_pop
1516c     FF 16 02 F6 | 	mov	arg03, result3
15170     A7 FA 61 FC | 	wrlong	result1, fp
15174     04 4E 05 F1 | 	add	fp, #4
15178     A7 FC 61 FC | 	wrlong	result2, fp
1517c     04 4E 05 F1 | 	add	fp, #4
15180     A7 16 62 FC | 	wrlong	arg03, fp
15184     08 4E 85 F1 | 	sub	fp, #8
15188     A7 12 02 F6 | 	mov	arg01, fp
1518c     E0 DD BF FD | 	call	#_converttoint
15190     24 4E 05 F1 | 	add	fp, #36
15194     A7 FA 61 FC | 	wrlong	result1, fp
15198     18 4E 85 F1 | 	sub	fp, #24
1519c     A7 12 02 F6 | 	mov	arg01, fp
151a0     0C 4E 85 F1 | 	sub	fp, #12
151a4     C8 DD BF FD | 	call	#_converttoint
151a8     28 4E 05 F1 | 	add	fp, #40
151ac     A7 FA 61 FC | 	wrlong	result1, fp
151b0     10 4E 85 F1 | 	sub	fp, #16
151b4     A7 12 02 F6 | 	mov	arg01, fp
151b8     18 4E 85 F1 | 	sub	fp, #24
151bc     B0 DD BF FD | 	call	#_converttoint
151c0     2C 4E 05 F1 | 	add	fp, #44
151c4     A7 FA 61 FC | 	wrlong	result1, fp
151c8     08 4E 85 F1 | 	sub	fp, #8
151cc     A7 12 02 FB | 	rdlong	arg01, fp
151d0     04 4E 05 F1 | 	add	fp, #4
151d4     A7 14 02 FB | 	rdlong	arg02, fp
151d8     FD 16 02 F6 | 	mov	arg03, result1
151dc     28 4E 85 F1 | 	sub	fp, #40
151e0     40 6F B0 FD | 	call	#_hg010b_spin2_setspritepos
151e4     A7 F0 03 F6 | 	mov	ptra, fp
151e8     B2 00 A0 FD | 	call	#popregs_
151ec                 | _do_sprite_ret
151ec     2D 00 64 FD | 	ret
151f0                 | 
151f0                 | ' 
151f0                 | ' sub do_mousex
151f0                 | _do_mousex
151f0     00 4A 05 F6 | 	mov	COUNT_, #0
151f4     A8 00 A0 FD | 	call	#pushregs_
151f8     0C F0 07 F1 | 	add	ptra, #12
151fc     08 4E 05 F1 | 	add	fp, #8
15200     A7 3A 68 FC | 	wrlong	#29, fp
15204     08 4E 85 F1 | 	sub	fp, #8
15208     7A 00 00 FF 
1520c     DC E5 05 F1 | 	add	objptr, ##62940
15210     F2 12 02 FB | 	rdlong	arg01, objptr
15214     7A 00 00 FF 
15218     DC E5 85 F1 | 	sub	objptr, ##62940
1521c     A7 12 62 FC | 	wrlong	arg01, fp
15220     A7 12 02 F6 | 	mov	arg01, fp
15224     14 53 BF FD | 	call	#_push
15228     A7 F0 03 F6 | 	mov	ptra, fp
1522c     B2 00 A0 FD | 	call	#popregs_
15230                 | _do_mousex_ret
15230     2D 00 64 FD | 	ret
15234                 | 
15234                 | ' 
15234                 | ' sub do_mousey
15234                 | _do_mousey
15234     00 4A 05 F6 | 	mov	COUNT_, #0
15238     A8 00 A0 FD | 	call	#pushregs_
1523c     0C F0 07 F1 | 	add	ptra, #12
15240     08 4E 05 F1 | 	add	fp, #8
15244     A7 3A 68 FC | 	wrlong	#29, fp
15248     08 4E 85 F1 | 	sub	fp, #8
1524c     7A 00 00 FF 
15250     E0 E5 05 F1 | 	add	objptr, ##62944
15254     F2 12 02 FB | 	rdlong	arg01, objptr
15258     7A 00 00 FF 
1525c     E0 E5 85 F1 | 	sub	objptr, ##62944
15260     A7 12 62 FC | 	wrlong	arg01, fp
15264     A7 12 02 F6 | 	mov	arg01, fp
15268     D0 52 BF FD | 	call	#_push
1526c     A7 F0 03 F6 | 	mov	ptra, fp
15270     B2 00 A0 FD | 	call	#popregs_
15274                 | _do_mousey_ret
15274     2D 00 64 FD | 	ret
15278                 | 
15278                 | ' 
15278                 | ' sub do_mousew
15278                 | _do_mousew
15278     00 4A 05 F6 | 	mov	COUNT_, #0
1527c     A8 00 A0 FD | 	call	#pushregs_
15280     0C F0 07 F1 | 	add	ptra, #12
15284     08 4E 05 F1 | 	add	fp, #8
15288     A7 38 68 FC | 	wrlong	#28, fp
1528c     08 4E 85 F1 | 	sub	fp, #8
15290     7A 00 00 FF 
15294     E8 E5 05 F1 | 	add	objptr, ##62952
15298     F2 12 02 FB | 	rdlong	arg01, objptr
1529c     7A 00 00 FF 
152a0     E8 E5 85 F1 | 	sub	objptr, ##62952
152a4     A7 12 62 FC | 	wrlong	arg01, fp
152a8     A7 12 02 F6 | 	mov	arg01, fp
152ac     8C 52 BF FD | 	call	#_push
152b0     A7 F0 03 F6 | 	mov	ptra, fp
152b4     B2 00 A0 FD | 	call	#popregs_
152b8                 | _do_mousew_ret
152b8     2D 00 64 FD | 	ret
152bc                 | 
152bc                 | ' 
152bc                 | ' sub do_mousek
152bc                 | _do_mousek
152bc     00 4A 05 F6 | 	mov	COUNT_, #0
152c0     A8 00 A0 FD | 	call	#pushregs_
152c4     0C F0 07 F1 | 	add	ptra, #12
152c8     08 4E 05 F1 | 	add	fp, #8
152cc     A7 3A 68 FC | 	wrlong	#29, fp
152d0     08 4E 85 F1 | 	sub	fp, #8
152d4     7A 00 00 FF 
152d8     E4 E5 05 F1 | 	add	objptr, ##62948
152dc     F2 12 02 FB | 	rdlong	arg01, objptr
152e0     7A 00 00 FF 
152e4     E4 E5 85 F1 | 	sub	objptr, ##62948
152e8     A7 12 62 FC | 	wrlong	arg01, fp
152ec     A7 12 02 F6 | 	mov	arg01, fp
152f0     48 52 BF FD | 	call	#_push
152f4     A7 F0 03 F6 | 	mov	ptra, fp
152f8     B2 00 A0 FD | 	call	#popregs_
152fc                 | _do_mousek_ret
152fc     2D 00 64 FD | 	ret
15300                 | 
15300                 | ' 
15300                 | ' 
15300                 | ' sub do_rdpin
15300                 | _do_rdpin
15300     00 4A 05 F6 | 	mov	COUNT_, #0
15304     A8 00 A0 FD | 	call	#pushregs_
15308     0C F0 07 F1 | 	add	ptra, #12
1530c     94 51 BF FD | 	call	#_pop
15310     A7 FA 61 FC | 	wrlong	result1, fp
15314     04 4E 05 F1 | 	add	fp, #4
15318     A7 FC 61 FC | 	wrlong	result2, fp
1531c     04 4E 05 F1 | 	add	fp, #4
15320     A7 FE 61 FC | 	wrlong	result3, fp
15324     08 4E 85 F1 | 	sub	fp, #8
15328     A7 12 02 F6 | 	mov	arg01, fp
1532c     40 DC BF FD | 	call	#_converttoint
15330     FD FA 89 FA | 	rdpin	result1, result1
15334     7B 00 00 FF 
15338     10 E5 05 F1 | 	add	objptr, ##63248
1533c     F2 FA 61 FC | 	wrlong	result1, objptr
15340     7B 00 00 FF 
15344     10 E5 85 F1 | 	sub	objptr, ##63248
15348     08 4E 05 F1 | 	add	fp, #8
1534c     A7 3A 68 FC | 	wrlong	#29, fp
15350     08 4E 85 F1 | 	sub	fp, #8
15354     A7 08 68 FC | 	wrlong	#4, fp
15358     A7 12 02 F6 | 	mov	arg01, fp
1535c     DC 51 BF FD | 	call	#_push
15360     A7 F0 03 F6 | 	mov	ptra, fp
15364     B2 00 A0 FD | 	call	#popregs_
15368                 | _do_rdpin_ret
15368     2D 00 64 FD | 	ret
1536c                 | 
1536c                 | ' 
1536c                 | ' sub do_rqpin
1536c                 | _do_rqpin
1536c     00 4A 05 F6 | 	mov	COUNT_, #0
15370     A8 00 A0 FD | 	call	#pushregs_
15374     0C F0 07 F1 | 	add	ptra, #12
15378     28 51 BF FD | 	call	#_pop
1537c     A7 FA 61 FC | 	wrlong	result1, fp
15380     04 4E 05 F1 | 	add	fp, #4
15384     A7 FC 61 FC | 	wrlong	result2, fp
15388     04 4E 05 F1 | 	add	fp, #4
1538c     A7 FE 61 FC | 	wrlong	result3, fp
15390     08 4E 85 F1 | 	sub	fp, #8
15394     A7 12 02 F6 | 	mov	arg01, fp
15398     D4 DB BF FD | 	call	#_converttoint
1539c     FD 12 02 F6 | 	mov	arg01, result1
153a0     00 FA 05 F6 | 	mov	result1, #0
153a4     09 FB 81 FA | 	rqpin	result1, arg01
153a8     7B 00 00 FF 
153ac     10 E5 05 F1 | 	add	objptr, ##63248
153b0     F2 FA 61 FC | 	wrlong	result1, objptr
153b4     7B 00 00 FF 
153b8     10 E5 85 F1 | 	sub	objptr, ##63248
153bc     08 4E 05 F1 | 	add	fp, #8
153c0     A7 3A 68 FC | 	wrlong	#29, fp
153c4     08 4E 85 F1 | 	sub	fp, #8
153c8     A7 08 68 FC | 	wrlong	#4, fp
153cc     A7 12 02 F6 | 	mov	arg01, fp
153d0     68 51 BF FD | 	call	#_push
153d4     A7 F0 03 F6 | 	mov	ptra, fp
153d8     B2 00 A0 FD | 	call	#popregs_
153dc                 | _do_rqpin_ret
153dc     2D 00 64 FD | 	ret
153e0                 | 
153e0                 | ' 
153e0                 | ' sub do_pinread
153e0                 | _do_pinread
153e0     00 4A 05 F6 | 	mov	COUNT_, #0
153e4     A8 00 A0 FD | 	call	#pushregs_
153e8     0C F0 07 F1 | 	add	ptra, #12
153ec     B4 50 BF FD | 	call	#_pop
153f0     A7 FA 61 FC | 	wrlong	result1, fp
153f4     04 4E 05 F1 | 	add	fp, #4
153f8     A7 FC 61 FC | 	wrlong	result2, fp
153fc     04 4E 05 F1 | 	add	fp, #4
15400     A7 FE 61 FC | 	wrlong	result3, fp
15404     08 4E 85 F1 | 	sub	fp, #8
15408     A7 12 02 F6 | 	mov	arg01, fp
1540c     60 DB BF FD | 	call	#_converttoint
15410     FD 12 02 F6 | 	mov	arg01, result1
15414     20 12 CE F7 | 	test	arg01, #32 wz
15418     FF FB 01 56 |  if_ne	mov	result1, inb
1541c     FE FB 01 A6 |  if_e	mov	result1, ina
15420     09 FB 41 F0 | 	shr	result1, arg01
15424     06 12 46 F0 | 	shr	arg01, #6
15428     09 FB 41 F7 | 	zerox	result1, arg01
1542c     7B 00 00 FF 
15430     10 E5 05 F1 | 	add	objptr, ##63248
15434     F2 FA 61 FC | 	wrlong	result1, objptr
15438     7B 00 00 FF 
1543c     10 E5 85 F1 | 	sub	objptr, ##63248
15440     08 4E 05 F1 | 	add	fp, #8
15444     A7 3A 68 FC | 	wrlong	#29, fp
15448     08 4E 85 F1 | 	sub	fp, #8
1544c     A7 08 68 FC | 	wrlong	#4, fp
15450     A7 12 02 F6 | 	mov	arg01, fp
15454     E4 50 BF FD | 	call	#_push
15458     A7 F0 03 F6 | 	mov	ptra, fp
1545c     B2 00 A0 FD | 	call	#popregs_
15460                 | _do_pinread_ret
15460     2D 00 64 FD | 	ret
15464                 | 
15464                 | ' 
15464                 | ' sub do_gettime
15464                 | _do_gettime
15464     02 4A 05 F6 | 	mov	COUNT_, #2
15468     A8 00 A0 FD | 	call	#pushregs_
1546c     14 F0 07 F1 | 	add	ptra, #20
15470                 | ' 
15470                 | ' const asm 
15470     1A 1E 72 FD | 	getct	local01 wc
15474     1A 20 62 FD | 	getct	local02
15478                 | ' 
15478                 | ' return hi1, lo1
15478     10 FD 01 F6 | 	mov	result2, local02
1547c     A7 1E 62 FC | 	wrlong	local01, fp
15480     04 4E 05 F1 | 	add	fp, #4
15484     A7 FC 61 FC | 	wrlong	result2, fp
15488     0C 4E 05 F1 | 	add	fp, #12
1548c     A7 3A 68 FC | 	wrlong	#29, fp
15490     0C 4E 85 F1 | 	sub	fp, #12
15494     A7 12 02 FB | 	rdlong	arg01, fp
15498     04 4E 05 F1 | 	add	fp, #4
1549c     A7 12 62 FC | 	wrlong	arg01, fp
154a0     08 4E 85 F1 | 	sub	fp, #8
154a4     A7 12 02 FB | 	rdlong	arg01, fp
154a8     0C 4E 05 F1 | 	add	fp, #12
154ac     A7 12 62 FC | 	wrlong	arg01, fp
154b0     04 4E 85 F1 | 	sub	fp, #4
154b4     A7 12 02 F6 | 	mov	arg01, fp
154b8     08 4E 85 F1 | 	sub	fp, #8
154bc     7C 50 BF FD | 	call	#_push
154c0     A7 F0 03 F6 | 	mov	ptra, fp
154c4     B2 00 A0 FD | 	call	#popregs_
154c8                 | _do_gettime_ret
154c8     2D 00 64 FD | 	ret
154cc                 | 
154cc                 | '    
154cc                 | ' 
154cc                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
154cc                 | ' 
154cc                 | ' '' ----------------------------- Clear the screen
154cc                 | ' 
154cc                 | ' sub do_cls
154cc                 | _do_cls
154cc     57 00 00 FF 
154d0     2C E4 05 F1 | 	add	objptr, ##44588
154d4     F2 12 02 FB | 	rdlong	arg01, objptr
154d8     04 E4 85 F1 | 	sub	objptr, #4
154dc     F2 14 02 FB | 	rdlong	arg02, objptr
154e0     57 00 00 FF 
154e4     28 E4 85 F1 | 	sub	objptr, ##44584
154e8     C0 79 B0 FD | 	call	#_hg010b_spin2_cls
154ec     57 00 00 FF 
154f0     2C E4 05 F1 | 	add	objptr, ##44588
154f4     F2 14 02 FB | 	rdlong	arg02, objptr
154f8     14 E4 85 F1 | 	sub	objptr, #20
154fc     F2 14 62 FC | 	wrlong	arg02, objptr
15500     57 00 00 FF 
15504     18 E4 85 F1 | 	sub	objptr, ##44568
15508                 | ' cls(ink,paper): plot_color=ink: print
15508     00 12 06 F6 | 	mov	arg01, #0
1550c     BC E9 B0 FD | 	call	#__system___getiolock_0475
15510     FD 12 02 F6 | 	mov	arg01, result1
15514     20 90 B0 FD | 	call	#__system___lockmem
15518     00 12 06 F6 | 	mov	arg01, #0
1551c     0A 14 06 F6 | 	mov	arg02, #10
15520     00 16 06 F6 | 	mov	arg03, #0
15524     BC 9C B0 FD | 	call	#__system___basic_print_char
15528     00 12 06 F6 | 	mov	arg01, #0
1552c     9C E9 B0 FD | 	call	#__system___getiolock_0475
15530     FD 00 68 FC | 	wrlong	#0, result1
15534                 | _do_cls_ret
15534     2D 00 64 FD | 	ret
15538                 | 
15538                 | ' 
15538                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
15538                 | ' 
15538                 | ' sub do_color
15538                 | _do_color
15538     03 4A 05 F6 | 	mov	COUNT_, #3
1553c     A8 00 A0 FD | 	call	#pushregs_
15540     60 4F BF FD | 	call	#_pop
15544     FD 1E 02 F6 | 	mov	local01, result1
15548     FE 20 02 F6 | 	mov	local02, result2
1554c     FF 22 02 F6 | 	mov	local03, result3
15550     57 00 00 FF 
15554     18 E4 05 F1 | 	add	objptr, ##44568
15558     F2 1E 62 FC | 	wrlong	local01, objptr
1555c     57 00 00 FF 
15560     18 E4 85 F1 | 	sub	objptr, ##44568
15564     A7 F0 03 F6 | 	mov	ptra, fp
15568     B2 00 A0 FD | 	call	#popregs_
1556c                 | _do_color_ret
1556c     2D 00 64 FD | 	ret
15570                 | 
15570                 | ' 
15570                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
15570                 | ' 
15570                 | ' sub do_plot
15570                 | _do_plot
15570     00 4A 05 F6 | 	mov	COUNT_, #0
15574     A8 00 A0 FD | 	call	#pushregs_
15578     20 F0 07 F1 | 	add	ptra, #32
1557c     24 4F BF FD | 	call	#_pop
15580     FD 16 02 F6 | 	mov	arg03, result1
15584     FE 14 02 F6 | 	mov	arg02, result2
15588     FF 12 02 F6 | 	mov	arg01, result3
1558c     0C 4E 05 F1 | 	add	fp, #12
15590     A7 16 62 FC | 	wrlong	arg03, fp
15594     04 4E 05 F1 | 	add	fp, #4
15598     A7 14 62 FC | 	wrlong	arg02, fp
1559c     04 4E 05 F1 | 	add	fp, #4
155a0     A7 12 62 FC | 	wrlong	arg01, fp
155a4     14 4E 85 F1 | 	sub	fp, #20
155a8     F8 4E BF FD | 	call	#_pop
155ac     FF 16 02 F6 | 	mov	arg03, result3
155b0     A7 FA 61 FC | 	wrlong	result1, fp
155b4     04 4E 05 F1 | 	add	fp, #4
155b8     A7 FC 61 FC | 	wrlong	result2, fp
155bc     04 4E 05 F1 | 	add	fp, #4
155c0     A7 16 62 FC | 	wrlong	arg03, fp
155c4     08 4E 85 F1 | 	sub	fp, #8
155c8     A7 12 02 F6 | 	mov	arg01, fp
155cc     A0 D9 BF FD | 	call	#_converttoint
155d0     18 4E 05 F1 | 	add	fp, #24
155d4     A7 FA 61 FC | 	wrlong	result1, fp
155d8     0C 4E 85 F1 | 	sub	fp, #12
155dc     A7 12 02 F6 | 	mov	arg01, fp
155e0     0C 4E 85 F1 | 	sub	fp, #12
155e4     88 D9 BF FD | 	call	#_converttoint
155e8     1C 4E 05 F1 | 	add	fp, #28
155ec     A7 FA 61 FC | 	wrlong	result1, fp
155f0     04 4E 85 F1 | 	sub	fp, #4
155f4     A7 16 02 FB | 	rdlong	arg03, fp
155f8     57 00 00 FF 
155fc     1C E4 05 F1 | 	add	objptr, ##44572
15600     F2 16 62 FC | 	wrlong	arg03, objptr
15604     04 4E 05 F1 | 	add	fp, #4
15608     A7 14 02 FB | 	rdlong	arg02, fp
1560c     1C 4E 85 F1 | 	sub	fp, #28
15610     04 E4 05 F1 | 	add	objptr, #4
15614     F2 14 62 FC | 	wrlong	arg02, objptr
15618     04 E4 85 F1 | 	sub	objptr, #4
1561c     F2 12 02 FB | 	rdlong	arg01, objptr
15620     04 E4 85 F1 | 	sub	objptr, #4
15624     F2 16 02 FB | 	rdlong	arg03, objptr
15628     57 00 00 FF 
1562c     18 E4 85 F1 | 	sub	objptr, ##44568
15630     A4 6B B0 FD | 	call	#_hg010b_spin2_putpixel
15634     A7 F0 03 F6 | 	mov	ptra, fp
15638     B2 00 A0 FD | 	call	#popregs_
1563c                 | _do_plot_ret
1563c     2D 00 64 FD | 	ret
15640                 | 
15640                 | ' 
15640                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
15640                 | ' 
15640                 | ' sub do_draw
15640                 | _do_draw
15640     00 4A 05 F6 | 	mov	COUNT_, #0
15644     A8 00 A0 FD | 	call	#pushregs_
15648     20 F0 07 F1 | 	add	ptra, #32
1564c     54 4E BF FD | 	call	#_pop
15650     FD 1A 02 F6 | 	mov	arg05, result1
15654     FE 18 02 F6 | 	mov	arg04, result2
15658     FF 16 02 F6 | 	mov	arg03, result3
1565c     0C 4E 05 F1 | 	add	fp, #12
15660     A7 1A 62 FC | 	wrlong	arg05, fp
15664     04 4E 05 F1 | 	add	fp, #4
15668     A7 18 62 FC | 	wrlong	arg04, fp
1566c     04 4E 05 F1 | 	add	fp, #4
15670     A7 16 62 FC | 	wrlong	arg03, fp
15674     14 4E 85 F1 | 	sub	fp, #20
15678     28 4E BF FD | 	call	#_pop
1567c     FF 1A 02 F6 | 	mov	arg05, result3
15680     A7 FA 61 FC | 	wrlong	result1, fp
15684     04 4E 05 F1 | 	add	fp, #4
15688     A7 FC 61 FC | 	wrlong	result2, fp
1568c     04 4E 05 F1 | 	add	fp, #4
15690     A7 1A 62 FC | 	wrlong	arg05, fp
15694     08 4E 85 F1 | 	sub	fp, #8
15698     A7 12 02 F6 | 	mov	arg01, fp
1569c     D0 D8 BF FD | 	call	#_converttoint
156a0     18 4E 05 F1 | 	add	fp, #24
156a4     A7 FA 61 FC | 	wrlong	result1, fp
156a8     0C 4E 85 F1 | 	sub	fp, #12
156ac     A7 12 02 F6 | 	mov	arg01, fp
156b0     0C 4E 85 F1 | 	sub	fp, #12
156b4     B8 D8 BF FD | 	call	#_converttoint
156b8     1C 4E 05 F1 | 	add	fp, #28
156bc     A7 FA 61 FC | 	wrlong	result1, fp
156c0     57 00 00 FF 
156c4     1C E4 05 F1 | 	add	objptr, ##44572
156c8     F2 12 02 FB | 	rdlong	arg01, objptr
156cc     04 E4 05 F1 | 	add	objptr, #4
156d0     F2 14 02 FB | 	rdlong	arg02, objptr
156d4     04 4E 85 F1 | 	sub	fp, #4
156d8     A7 16 02 FB | 	rdlong	arg03, fp
156dc     FD 18 02 F6 | 	mov	arg04, result1
156e0     18 4E 85 F1 | 	sub	fp, #24
156e4     08 E4 85 F1 | 	sub	objptr, #8
156e8     F2 1A 02 FB | 	rdlong	arg05, objptr
156ec     57 00 00 FF 
156f0     18 E4 85 F1 | 	sub	objptr, ##44568
156f4     90 6D B0 FD | 	call	#_hg010b_spin2_draw
156f8     18 4E 05 F1 | 	add	fp, #24
156fc     A7 1A 02 FB | 	rdlong	arg05, fp
15700     57 00 00 FF 
15704     1C E4 05 F1 | 	add	objptr, ##44572
15708     F2 1A 62 FC | 	wrlong	arg05, objptr
1570c     04 4E 05 F1 | 	add	fp, #4
15710     A7 1A 02 FB | 	rdlong	arg05, fp
15714     1C 4E 85 F1 | 	sub	fp, #28
15718     04 E4 05 F1 | 	add	objptr, #4
1571c     F2 1A 62 FC | 	wrlong	arg05, objptr
15720     57 00 00 FF 
15724     20 E4 85 F1 | 	sub	objptr, ##44576
15728     A7 F0 03 F6 | 	mov	ptra, fp
1572c     B2 00 A0 FD | 	call	#popregs_
15730                 | _do_draw_ret
15730     2D 00 64 FD | 	ret
15734                 | 
15734                 | ' 
15734                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
15734                 | ' 
15734                 | ' sub do_fcircle
15734                 | _do_fcircle
15734     02 4A 05 F6 | 	mov	COUNT_, #2
15738     A8 00 A0 FD | 	call	#pushregs_
1573c     24 F0 07 F1 | 	add	ptra, #36
15740     60 4D BF FD | 	call	#_pop
15744     FD 18 02 F6 | 	mov	arg04, result1
15748     FE 16 02 F6 | 	mov	arg03, result2
1574c     FF 14 02 F6 | 	mov	arg02, result3
15750     18 4E 05 F1 | 	add	fp, #24
15754     A7 18 62 FC | 	wrlong	arg04, fp
15758     04 4E 05 F1 | 	add	fp, #4
1575c     A7 16 62 FC | 	wrlong	arg03, fp
15760     04 4E 05 F1 | 	add	fp, #4
15764     A7 14 62 FC | 	wrlong	arg02, fp
15768     20 4E 85 F1 | 	sub	fp, #32
1576c     34 4D BF FD | 	call	#_pop
15770     FD 18 02 F6 | 	mov	arg04, result1
15774     FE 16 02 F6 | 	mov	arg03, result2
15778     FF 1E 02 F6 | 	mov	local01, result3
1577c     0C 4E 05 F1 | 	add	fp, #12
15780     A7 18 62 FC | 	wrlong	arg04, fp
15784     04 4E 05 F1 | 	add	fp, #4
15788     A7 16 62 FC | 	wrlong	arg03, fp
1578c     04 4E 05 F1 | 	add	fp, #4
15790     A7 1E 62 FC | 	wrlong	local01, fp
15794     14 4E 85 F1 | 	sub	fp, #20
15798     08 4D BF FD | 	call	#_pop
1579c     A7 FA 61 FC | 	wrlong	result1, fp
157a0     04 4E 05 F1 | 	add	fp, #4
157a4     A7 FC 61 FC | 	wrlong	result2, fp
157a8     04 4E 05 F1 | 	add	fp, #4
157ac     A7 FE 61 FC | 	wrlong	result3, fp
157b0                 | ' 
157b0                 | ' t3=pop()
157b0                 | ' t2=pop()
157b0                 | ' t1=pop()
157b0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
157b0     FF 18 02 F6 | 	mov	arg04, result3
157b4     08 4E 85 F1 | 	sub	fp, #8
157b8     1C 18 0E F2 | 	cmp	arg04, #28 wz
157bc     08 4E 05 51 |  if_ne	add	fp, #8
157c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
157c4     08 4E 85 51 |  if_ne	sub	fp, #8
157c8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
157cc     7C 00 90 5D |  if_ne	jmp	#LR__1740
157d0     14 4E 05 F1 | 	add	fp, #20
157d4     A7 1E 02 FB | 	rdlong	local01, fp
157d8     14 4E 85 F1 | 	sub	fp, #20
157dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
157e0     14 4E 05 51 |  if_ne	add	fp, #20
157e4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
157e8     14 4E 85 51 |  if_ne	sub	fp, #20
157ec     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
157f0     58 00 90 5D |  if_ne	jmp	#LR__1740
157f4     20 4E 05 F1 | 	add	fp, #32
157f8     A7 1E 02 FB | 	rdlong	local01, fp
157fc     20 4E 85 F1 | 	sub	fp, #32
15800     1C 1E 0E F2 | 	cmp	local01, #28 wz
15804     20 4E 05 51 |  if_ne	add	fp, #32
15808     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1580c     20 4E 85 51 |  if_ne	sub	fp, #32
15810     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15814     34 00 90 5D |  if_ne	jmp	#LR__1740
15818     A7 12 02 FB | 	rdlong	arg01, fp
1581c     0C 4E 05 F1 | 	add	fp, #12
15820     A7 14 02 FB | 	rdlong	arg02, fp
15824     0C 4E 05 F1 | 	add	fp, #12
15828     A7 16 02 FB | 	rdlong	arg03, fp
1582c     18 4E 85 F1 | 	sub	fp, #24
15830     57 00 00 FF 
15834     18 E4 05 F1 | 	add	objptr, ##44568
15838     F2 18 02 FB | 	rdlong	arg04, objptr
1583c     57 00 00 FF 
15840     18 E4 85 F1 | 	sub	objptr, ##44568
15844     C4 70 B0 FD | 	call	#_hg010b_spin2_fcircle
15848                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15848     54 00 90 FD | 	jmp	#LR__1741
1584c                 | LR__1740
1584c     A7 12 02 F6 | 	mov	arg01, fp
15850     1C D7 BF FD | 	call	#_converttoint
15854     FD 1E 02 F6 | 	mov	local01, result1
15858     0C 4E 05 F1 | 	add	fp, #12
1585c     A7 12 02 F6 | 	mov	arg01, fp
15860     0C 4E 85 F1 | 	sub	fp, #12
15864     08 D7 BF FD | 	call	#_converttoint
15868     FD 20 02 F6 | 	mov	local02, result1
1586c     18 4E 05 F1 | 	add	fp, #24
15870     A7 12 02 F6 | 	mov	arg01, fp
15874     18 4E 85 F1 | 	sub	fp, #24
15878     F4 D6 BF FD | 	call	#_converttoint
1587c     FD 16 02 F6 | 	mov	arg03, result1
15880     57 00 00 FF 
15884     18 E4 05 F1 | 	add	objptr, ##44568
15888     F2 18 02 FB | 	rdlong	arg04, objptr
1588c     57 00 00 FF 
15890     18 E4 85 F1 | 	sub	objptr, ##44568
15894     0F 13 02 F6 | 	mov	arg01, local01
15898     10 15 02 F6 | 	mov	arg02, local02
1589c     6C 70 B0 FD | 	call	#_hg010b_spin2_fcircle
158a0                 | LR__1741
158a0     A7 F0 03 F6 | 	mov	ptra, fp
158a4     B2 00 A0 FD | 	call	#popregs_
158a8                 | _do_fcircle_ret
158a8     2D 00 64 FD | 	ret
158ac                 | 
158ac                 | ' 
158ac                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
158ac                 | ' 
158ac                 | ' sub do_circle
158ac                 | _do_circle
158ac     02 4A 05 F6 | 	mov	COUNT_, #2
158b0     A8 00 A0 FD | 	call	#pushregs_
158b4     24 F0 07 F1 | 	add	ptra, #36
158b8     E8 4B BF FD | 	call	#_pop
158bc     FD 18 02 F6 | 	mov	arg04, result1
158c0     FE 16 02 F6 | 	mov	arg03, result2
158c4     FF 14 02 F6 | 	mov	arg02, result3
158c8     18 4E 05 F1 | 	add	fp, #24
158cc     A7 18 62 FC | 	wrlong	arg04, fp
158d0     04 4E 05 F1 | 	add	fp, #4
158d4     A7 16 62 FC | 	wrlong	arg03, fp
158d8     04 4E 05 F1 | 	add	fp, #4
158dc     A7 14 62 FC | 	wrlong	arg02, fp
158e0     20 4E 85 F1 | 	sub	fp, #32
158e4     BC 4B BF FD | 	call	#_pop
158e8     FD 18 02 F6 | 	mov	arg04, result1
158ec     FE 16 02 F6 | 	mov	arg03, result2
158f0     FF 1E 02 F6 | 	mov	local01, result3
158f4     0C 4E 05 F1 | 	add	fp, #12
158f8     A7 18 62 FC | 	wrlong	arg04, fp
158fc     04 4E 05 F1 | 	add	fp, #4
15900     A7 16 62 FC | 	wrlong	arg03, fp
15904     04 4E 05 F1 | 	add	fp, #4
15908     A7 1E 62 FC | 	wrlong	local01, fp
1590c     14 4E 85 F1 | 	sub	fp, #20
15910     90 4B BF FD | 	call	#_pop
15914     A7 FA 61 FC | 	wrlong	result1, fp
15918     04 4E 05 F1 | 	add	fp, #4
1591c     A7 FC 61 FC | 	wrlong	result2, fp
15920     04 4E 05 F1 | 	add	fp, #4
15924     A7 FE 61 FC | 	wrlong	result3, fp
15928                 | ' 
15928                 | ' t3=pop()
15928                 | ' t2=pop()
15928                 | ' t1=pop()
15928                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15928     FF 18 02 F6 | 	mov	arg04, result3
1592c     08 4E 85 F1 | 	sub	fp, #8
15930     1C 18 0E F2 | 	cmp	arg04, #28 wz
15934     08 4E 05 51 |  if_ne	add	fp, #8
15938     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1593c     08 4E 85 51 |  if_ne	sub	fp, #8
15940     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15944     7C 00 90 5D |  if_ne	jmp	#LR__1750
15948     14 4E 05 F1 | 	add	fp, #20
1594c     A7 1E 02 FB | 	rdlong	local01, fp
15950     14 4E 85 F1 | 	sub	fp, #20
15954     1C 1E 0E F2 | 	cmp	local01, #28 wz
15958     14 4E 05 51 |  if_ne	add	fp, #20
1595c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15960     14 4E 85 51 |  if_ne	sub	fp, #20
15964     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15968     58 00 90 5D |  if_ne	jmp	#LR__1750
1596c     20 4E 05 F1 | 	add	fp, #32
15970     A7 1E 02 FB | 	rdlong	local01, fp
15974     20 4E 85 F1 | 	sub	fp, #32
15978     1C 1E 0E F2 | 	cmp	local01, #28 wz
1597c     20 4E 05 51 |  if_ne	add	fp, #32
15980     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15984     20 4E 85 51 |  if_ne	sub	fp, #32
15988     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1598c     34 00 90 5D |  if_ne	jmp	#LR__1750
15990     A7 12 02 FB | 	rdlong	arg01, fp
15994     0C 4E 05 F1 | 	add	fp, #12
15998     A7 14 02 FB | 	rdlong	arg02, fp
1599c     0C 4E 05 F1 | 	add	fp, #12
159a0     A7 16 02 FB | 	rdlong	arg03, fp
159a4     18 4E 85 F1 | 	sub	fp, #24
159a8     57 00 00 FF 
159ac     18 E4 05 F1 | 	add	objptr, ##44568
159b0     F2 18 02 FB | 	rdlong	arg04, objptr
159b4     57 00 00 FF 
159b8     18 E4 85 F1 | 	sub	objptr, ##44568
159bc     58 70 B0 FD | 	call	#_hg010b_spin2_circle
159c0                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
159c0     54 00 90 FD | 	jmp	#LR__1751
159c4                 | LR__1750
159c4     A7 12 02 F6 | 	mov	arg01, fp
159c8     A4 D5 BF FD | 	call	#_converttoint
159cc     FD 1E 02 F6 | 	mov	local01, result1
159d0     0C 4E 05 F1 | 	add	fp, #12
159d4     A7 12 02 F6 | 	mov	arg01, fp
159d8     0C 4E 85 F1 | 	sub	fp, #12
159dc     90 D5 BF FD | 	call	#_converttoint
159e0     FD 20 02 F6 | 	mov	local02, result1
159e4     18 4E 05 F1 | 	add	fp, #24
159e8     A7 12 02 F6 | 	mov	arg01, fp
159ec     18 4E 85 F1 | 	sub	fp, #24
159f0     7C D5 BF FD | 	call	#_converttoint
159f4     FD 16 02 F6 | 	mov	arg03, result1
159f8     57 00 00 FF 
159fc     18 E4 05 F1 | 	add	objptr, ##44568
15a00     F2 18 02 FB | 	rdlong	arg04, objptr
15a04     57 00 00 FF 
15a08     18 E4 85 F1 | 	sub	objptr, ##44568
15a0c     0F 13 02 F6 | 	mov	arg01, local01
15a10     10 15 02 F6 | 	mov	arg02, local02
15a14     00 70 B0 FD | 	call	#_hg010b_spin2_circle
15a18                 | LR__1751
15a18     A7 F0 03 F6 | 	mov	ptra, fp
15a1c     B2 00 A0 FD | 	call	#popregs_
15a20                 | _do_circle_ret
15a20     2D 00 64 FD | 	ret
15a24                 | 
15a24                 | ' 
15a24                 | ' ' -------------------------- Draw a rectangle
15a24                 | ' 
15a24                 | ' sub do_box
15a24                 | _do_box
15a24     03 4A 05 F6 | 	mov	COUNT_, #3
15a28     A8 00 A0 FD | 	call	#pushregs_
15a2c     30 F0 07 F1 | 	add	ptra, #48
15a30     70 4A BF FD | 	call	#_pop
15a34     FD 1A 02 F6 | 	mov	arg05, result1
15a38     FE 18 02 F6 | 	mov	arg04, result2
15a3c     FF 16 02 F6 | 	mov	arg03, result3
15a40     24 4E 05 F1 | 	add	fp, #36
15a44     A7 1A 62 FC | 	wrlong	arg05, fp
15a48     04 4E 05 F1 | 	add	fp, #4
15a4c     A7 18 62 FC | 	wrlong	arg04, fp
15a50     04 4E 05 F1 | 	add	fp, #4
15a54     A7 16 62 FC | 	wrlong	arg03, fp
15a58     2C 4E 85 F1 | 	sub	fp, #44
15a5c     44 4A BF FD | 	call	#_pop
15a60     FD 1A 02 F6 | 	mov	arg05, result1
15a64     FE 18 02 F6 | 	mov	arg04, result2
15a68     FF 16 02 F6 | 	mov	arg03, result3
15a6c     18 4E 05 F1 | 	add	fp, #24
15a70     A7 1A 62 FC | 	wrlong	arg05, fp
15a74     04 4E 05 F1 | 	add	fp, #4
15a78     A7 18 62 FC | 	wrlong	arg04, fp
15a7c     04 4E 05 F1 | 	add	fp, #4
15a80     A7 16 62 FC | 	wrlong	arg03, fp
15a84     20 4E 85 F1 | 	sub	fp, #32
15a88     18 4A BF FD | 	call	#_pop
15a8c     FD 1A 02 F6 | 	mov	arg05, result1
15a90     FE 18 02 F6 | 	mov	arg04, result2
15a94     FF 1E 02 F6 | 	mov	local01, result3
15a98     0C 4E 05 F1 | 	add	fp, #12
15a9c     A7 1A 62 FC | 	wrlong	arg05, fp
15aa0     04 4E 05 F1 | 	add	fp, #4
15aa4     A7 18 62 FC | 	wrlong	arg04, fp
15aa8     04 4E 05 F1 | 	add	fp, #4
15aac     A7 1E 62 FC | 	wrlong	local01, fp
15ab0     14 4E 85 F1 | 	sub	fp, #20
15ab4     EC 49 BF FD | 	call	#_pop
15ab8     A7 FA 61 FC | 	wrlong	result1, fp
15abc     04 4E 05 F1 | 	add	fp, #4
15ac0     A7 FC 61 FC | 	wrlong	result2, fp
15ac4     04 4E 05 F1 | 	add	fp, #4
15ac8     A7 FE 61 FC | 	wrlong	result3, fp
15acc                 | ' 
15acc                 | ' t4=pop()
15acc                 | ' t3=pop()
15acc                 | ' t2=pop()
15acc                 | ' t1=pop()
15acc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
15acc     FF 1A 02 F6 | 	mov	arg05, result3
15ad0     08 4E 85 F1 | 	sub	fp, #8
15ad4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
15ad8     08 4E 05 51 |  if_ne	add	fp, #8
15adc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15ae0     08 4E 85 51 |  if_ne	sub	fp, #8
15ae4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15ae8     A8 00 90 5D |  if_ne	jmp	#LR__1760
15aec     14 4E 05 F1 | 	add	fp, #20
15af0     A7 1E 02 FB | 	rdlong	local01, fp
15af4     14 4E 85 F1 | 	sub	fp, #20
15af8     1C 1E 0E F2 | 	cmp	local01, #28 wz
15afc     14 4E 05 51 |  if_ne	add	fp, #20
15b00     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15b04     14 4E 85 51 |  if_ne	sub	fp, #20
15b08     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15b0c     84 00 90 5D |  if_ne	jmp	#LR__1760
15b10     20 4E 05 F1 | 	add	fp, #32
15b14     A7 1E 02 FB | 	rdlong	local01, fp
15b18     20 4E 85 F1 | 	sub	fp, #32
15b1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15b20     20 4E 05 51 |  if_ne	add	fp, #32
15b24     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15b28     20 4E 85 51 |  if_ne	sub	fp, #32
15b2c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15b30     60 00 90 5D |  if_ne	jmp	#LR__1760
15b34     2C 4E 05 F1 | 	add	fp, #44
15b38     A7 1E 02 FB | 	rdlong	local01, fp
15b3c     2C 4E 85 F1 | 	sub	fp, #44
15b40     1C 1E 0E F2 | 	cmp	local01, #28 wz
15b44     2C 4E 05 51 |  if_ne	add	fp, #44
15b48     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15b4c     2C 4E 85 51 |  if_ne	sub	fp, #44
15b50     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15b54     3C 00 90 5D |  if_ne	jmp	#LR__1760
15b58     A7 12 02 FB | 	rdlong	arg01, fp
15b5c     0C 4E 05 F1 | 	add	fp, #12
15b60     A7 14 02 FB | 	rdlong	arg02, fp
15b64     0C 4E 05 F1 | 	add	fp, #12
15b68     A7 16 02 FB | 	rdlong	arg03, fp
15b6c     0C 4E 05 F1 | 	add	fp, #12
15b70     A7 18 02 FB | 	rdlong	arg04, fp
15b74     24 4E 85 F1 | 	sub	fp, #36
15b78     57 00 00 FF 
15b7c     18 E4 05 F1 | 	add	objptr, ##44568
15b80     F2 1A 02 FB | 	rdlong	arg05, objptr
15b84     57 00 00 FF 
15b88     18 E4 85 F1 | 	sub	objptr, ##44568
15b8c     54 70 B0 FD | 	call	#_hg010b_spin2_box
15b90                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
15b90     6C 00 90 FD | 	jmp	#LR__1761
15b94                 | LR__1760
15b94     A7 12 02 F6 | 	mov	arg01, fp
15b98     D4 D3 BF FD | 	call	#_converttoint
15b9c     FD 20 02 F6 | 	mov	local02, result1
15ba0     0C 4E 05 F1 | 	add	fp, #12
15ba4     A7 12 02 F6 | 	mov	arg01, fp
15ba8     0C 4E 85 F1 | 	sub	fp, #12
15bac     C0 D3 BF FD | 	call	#_converttoint
15bb0     FD 22 02 F6 | 	mov	local03, result1
15bb4     18 4E 05 F1 | 	add	fp, #24
15bb8     A7 12 02 F6 | 	mov	arg01, fp
15bbc     18 4E 85 F1 | 	sub	fp, #24
15bc0     AC D3 BF FD | 	call	#_converttoint
15bc4     FD 1E 02 F6 | 	mov	local01, result1
15bc8     24 4E 05 F1 | 	add	fp, #36
15bcc     A7 12 02 F6 | 	mov	arg01, fp
15bd0     24 4E 85 F1 | 	sub	fp, #36
15bd4     98 D3 BF FD | 	call	#_converttoint
15bd8     FD 18 02 F6 | 	mov	arg04, result1
15bdc     57 00 00 FF 
15be0     18 E4 05 F1 | 	add	objptr, ##44568
15be4     F2 1A 02 FB | 	rdlong	arg05, objptr
15be8     57 00 00 FF 
15bec     18 E4 85 F1 | 	sub	objptr, ##44568
15bf0     10 13 02 F6 | 	mov	arg01, local02
15bf4     11 15 02 F6 | 	mov	arg02, local03
15bf8     0F 17 02 F6 | 	mov	arg03, local01
15bfc     E4 6F B0 FD | 	call	#_hg010b_spin2_box
15c00                 | LR__1761
15c00     A7 F0 03 F6 | 	mov	ptra, fp
15c04     B2 00 A0 FD | 	call	#popregs_
15c08                 | _do_box_ret
15c08     2D 00 64 FD | 	ret
15c0c                 | 
15c0c                 | ' 
15c0c                 | ' sub do_fill
15c0c                 | _do_fill
15c0c     03 4A 05 F6 | 	mov	COUNT_, #3
15c10     A8 00 A0 FD | 	call	#pushregs_
15c14     30 F0 07 F1 | 	add	ptra, #48
15c18     88 48 BF FD | 	call	#_pop
15c1c     FD 18 02 F6 | 	mov	arg04, result1
15c20     FE 16 02 F6 | 	mov	arg03, result2
15c24     FF 14 02 F6 | 	mov	arg02, result3
15c28     24 4E 05 F1 | 	add	fp, #36
15c2c     A7 18 62 FC | 	wrlong	arg04, fp
15c30     04 4E 05 F1 | 	add	fp, #4
15c34     A7 16 62 FC | 	wrlong	arg03, fp
15c38     04 4E 05 F1 | 	add	fp, #4
15c3c     A7 14 62 FC | 	wrlong	arg02, fp
15c40     2C 4E 85 F1 | 	sub	fp, #44
15c44     5C 48 BF FD | 	call	#_pop
15c48     FD 18 02 F6 | 	mov	arg04, result1
15c4c     FE 16 02 F6 | 	mov	arg03, result2
15c50     FF 14 02 F6 | 	mov	arg02, result3
15c54     18 4E 05 F1 | 	add	fp, #24
15c58     A7 18 62 FC | 	wrlong	arg04, fp
15c5c     04 4E 05 F1 | 	add	fp, #4
15c60     A7 16 62 FC | 	wrlong	arg03, fp
15c64     04 4E 05 F1 | 	add	fp, #4
15c68     A7 14 62 FC | 	wrlong	arg02, fp
15c6c     20 4E 85 F1 | 	sub	fp, #32
15c70     30 48 BF FD | 	call	#_pop
15c74     FD 18 02 F6 | 	mov	arg04, result1
15c78     FE 16 02 F6 | 	mov	arg03, result2
15c7c     FF 1E 02 F6 | 	mov	local01, result3
15c80     0C 4E 05 F1 | 	add	fp, #12
15c84     A7 18 62 FC | 	wrlong	arg04, fp
15c88     04 4E 05 F1 | 	add	fp, #4
15c8c     A7 16 62 FC | 	wrlong	arg03, fp
15c90     04 4E 05 F1 | 	add	fp, #4
15c94     A7 1E 62 FC | 	wrlong	local01, fp
15c98     14 4E 85 F1 | 	sub	fp, #20
15c9c     04 48 BF FD | 	call	#_pop
15ca0     A7 FA 61 FC | 	wrlong	result1, fp
15ca4     04 4E 05 F1 | 	add	fp, #4
15ca8     A7 FC 61 FC | 	wrlong	result2, fp
15cac     04 4E 05 F1 | 	add	fp, #4
15cb0     A7 FE 61 FC | 	wrlong	result3, fp
15cb4                 | ' 
15cb4                 | ' t4=pop()
15cb4                 | ' t3=pop()
15cb4                 | ' t2=pop()
15cb4                 | ' t1=pop()
15cb4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
15cb4     FF 18 02 F6 | 	mov	arg04, result3
15cb8     08 4E 85 F1 | 	sub	fp, #8
15cbc     1C 18 0E F2 | 	cmp	arg04, #28 wz
15cc0     08 4E 05 51 |  if_ne	add	fp, #8
15cc4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15cc8     08 4E 85 51 |  if_ne	sub	fp, #8
15ccc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15cd0     94 00 90 5D |  if_ne	jmp	#LR__1770
15cd4     14 4E 05 F1 | 	add	fp, #20
15cd8     A7 1E 02 FB | 	rdlong	local01, fp
15cdc     14 4E 85 F1 | 	sub	fp, #20
15ce0     1C 1E 0E F2 | 	cmp	local01, #28 wz
15ce4     14 4E 05 51 |  if_ne	add	fp, #20
15ce8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15cec     14 4E 85 51 |  if_ne	sub	fp, #20
15cf0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15cf4     70 00 90 5D |  if_ne	jmp	#LR__1770
15cf8     20 4E 05 F1 | 	add	fp, #32
15cfc     A7 1E 02 FB | 	rdlong	local01, fp
15d00     20 4E 85 F1 | 	sub	fp, #32
15d04     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d08     20 4E 05 51 |  if_ne	add	fp, #32
15d0c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d10     20 4E 85 51 |  if_ne	sub	fp, #32
15d14     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d18     4C 00 90 5D |  if_ne	jmp	#LR__1770
15d1c     2C 4E 05 F1 | 	add	fp, #44
15d20     A7 1E 02 FB | 	rdlong	local01, fp
15d24     2C 4E 85 F1 | 	sub	fp, #44
15d28     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d2c     2C 4E 05 51 |  if_ne	add	fp, #44
15d30     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d34     2C 4E 85 51 |  if_ne	sub	fp, #44
15d38     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d3c     28 00 90 5D |  if_ne	jmp	#LR__1770
15d40     A7 12 02 FB | 	rdlong	arg01, fp
15d44     0C 4E 05 F1 | 	add	fp, #12
15d48     A7 14 02 FB | 	rdlong	arg02, fp
15d4c     0C 4E 05 F1 | 	add	fp, #12
15d50     A7 16 02 FB | 	rdlong	arg03, fp
15d54     0C 4E 05 F1 | 	add	fp, #12
15d58     A7 18 02 FB | 	rdlong	arg04, fp
15d5c     24 4E 85 F1 | 	sub	fp, #36
15d60     14 69 B0 FD | 	call	#_hg010b_spin2_fill
15d64                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
15d64     58 00 90 FD | 	jmp	#LR__1771
15d68                 | LR__1770
15d68     A7 12 02 F6 | 	mov	arg01, fp
15d6c     00 D2 BF FD | 	call	#_converttoint
15d70     FD 20 02 F6 | 	mov	local02, result1
15d74     0C 4E 05 F1 | 	add	fp, #12
15d78     A7 12 02 F6 | 	mov	arg01, fp
15d7c     0C 4E 85 F1 | 	sub	fp, #12
15d80     EC D1 BF FD | 	call	#_converttoint
15d84     FD 22 02 F6 | 	mov	local03, result1
15d88     18 4E 05 F1 | 	add	fp, #24
15d8c     A7 12 02 F6 | 	mov	arg01, fp
15d90     18 4E 85 F1 | 	sub	fp, #24
15d94     D8 D1 BF FD | 	call	#_converttoint
15d98     FD 1E 02 F6 | 	mov	local01, result1
15d9c     24 4E 05 F1 | 	add	fp, #36
15da0     A7 12 02 F6 | 	mov	arg01, fp
15da4     24 4E 85 F1 | 	sub	fp, #36
15da8     C4 D1 BF FD | 	call	#_converttoint
15dac     FD 18 02 F6 | 	mov	arg04, result1
15db0     10 13 02 F6 | 	mov	arg01, local02
15db4     11 15 02 F6 | 	mov	arg02, local03
15db8     0F 17 02 F6 | 	mov	arg03, local01
15dbc     B8 68 B0 FD | 	call	#_hg010b_spin2_fill
15dc0                 | LR__1771
15dc0     A7 F0 03 F6 | 	mov	ptra, fp
15dc4     B2 00 A0 FD | 	call	#popregs_
15dc8                 | _do_fill_ret
15dc8     2D 00 64 FD | 	ret
15dcc                 | 
15dcc                 | ' 
15dcc                 | ' ' -------------------------- Draw a frane
15dcc                 | ' 
15dcc                 | ' sub do_frame
15dcc                 | _do_frame
15dcc     03 4A 05 F6 | 	mov	COUNT_, #3
15dd0     A8 00 A0 FD | 	call	#pushregs_
15dd4     30 F0 07 F1 | 	add	ptra, #48
15dd8     C8 46 BF FD | 	call	#_pop
15ddc     FD 1A 02 F6 | 	mov	arg05, result1
15de0     FE 18 02 F6 | 	mov	arg04, result2
15de4     FF 16 02 F6 | 	mov	arg03, result3
15de8     24 4E 05 F1 | 	add	fp, #36
15dec     A7 1A 62 FC | 	wrlong	arg05, fp
15df0     04 4E 05 F1 | 	add	fp, #4
15df4     A7 18 62 FC | 	wrlong	arg04, fp
15df8     04 4E 05 F1 | 	add	fp, #4
15dfc     A7 16 62 FC | 	wrlong	arg03, fp
15e00     2C 4E 85 F1 | 	sub	fp, #44
15e04     9C 46 BF FD | 	call	#_pop
15e08     FD 1A 02 F6 | 	mov	arg05, result1
15e0c     FE 18 02 F6 | 	mov	arg04, result2
15e10     FF 16 02 F6 | 	mov	arg03, result3
15e14     18 4E 05 F1 | 	add	fp, #24
15e18     A7 1A 62 FC | 	wrlong	arg05, fp
15e1c     04 4E 05 F1 | 	add	fp, #4
15e20     A7 18 62 FC | 	wrlong	arg04, fp
15e24     04 4E 05 F1 | 	add	fp, #4
15e28     A7 16 62 FC | 	wrlong	arg03, fp
15e2c     20 4E 85 F1 | 	sub	fp, #32
15e30     70 46 BF FD | 	call	#_pop
15e34     FD 1A 02 F6 | 	mov	arg05, result1
15e38     FE 18 02 F6 | 	mov	arg04, result2
15e3c     FF 1E 02 F6 | 	mov	local01, result3
15e40     0C 4E 05 F1 | 	add	fp, #12
15e44     A7 1A 62 FC | 	wrlong	arg05, fp
15e48     04 4E 05 F1 | 	add	fp, #4
15e4c     A7 18 62 FC | 	wrlong	arg04, fp
15e50     04 4E 05 F1 | 	add	fp, #4
15e54     A7 1E 62 FC | 	wrlong	local01, fp
15e58     14 4E 85 F1 | 	sub	fp, #20
15e5c     44 46 BF FD | 	call	#_pop
15e60     A7 FA 61 FC | 	wrlong	result1, fp
15e64     04 4E 05 F1 | 	add	fp, #4
15e68     A7 FC 61 FC | 	wrlong	result2, fp
15e6c     04 4E 05 F1 | 	add	fp, #4
15e70     A7 FE 61 FC | 	wrlong	result3, fp
15e74                 | ' 
15e74                 | ' t4=pop()
15e74                 | ' t3=pop()
15e74                 | ' t2=pop()
15e74                 | ' t1=pop()
15e74                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
15e74     FF 1A 02 F6 | 	mov	arg05, result3
15e78     08 4E 85 F1 | 	sub	fp, #8
15e7c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
15e80     08 4E 05 51 |  if_ne	add	fp, #8
15e84     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15e88     08 4E 85 51 |  if_ne	sub	fp, #8
15e8c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15e90     A8 00 90 5D |  if_ne	jmp	#LR__1780
15e94     14 4E 05 F1 | 	add	fp, #20
15e98     A7 1E 02 FB | 	rdlong	local01, fp
15e9c     14 4E 85 F1 | 	sub	fp, #20
15ea0     1C 1E 0E F2 | 	cmp	local01, #28 wz
15ea4     14 4E 05 51 |  if_ne	add	fp, #20
15ea8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15eac     14 4E 85 51 |  if_ne	sub	fp, #20
15eb0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15eb4     84 00 90 5D |  if_ne	jmp	#LR__1780
15eb8     20 4E 05 F1 | 	add	fp, #32
15ebc     A7 1E 02 FB | 	rdlong	local01, fp
15ec0     20 4E 85 F1 | 	sub	fp, #32
15ec4     1C 1E 0E F2 | 	cmp	local01, #28 wz
15ec8     20 4E 05 51 |  if_ne	add	fp, #32
15ecc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15ed0     20 4E 85 51 |  if_ne	sub	fp, #32
15ed4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15ed8     60 00 90 5D |  if_ne	jmp	#LR__1780
15edc     2C 4E 05 F1 | 	add	fp, #44
15ee0     A7 1E 02 FB | 	rdlong	local01, fp
15ee4     2C 4E 85 F1 | 	sub	fp, #44
15ee8     1C 1E 0E F2 | 	cmp	local01, #28 wz
15eec     2C 4E 05 51 |  if_ne	add	fp, #44
15ef0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15ef4     2C 4E 85 51 |  if_ne	sub	fp, #44
15ef8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15efc     3C 00 90 5D |  if_ne	jmp	#LR__1780
15f00     A7 12 02 FB | 	rdlong	arg01, fp
15f04     0C 4E 05 F1 | 	add	fp, #12
15f08     A7 14 02 FB | 	rdlong	arg02, fp
15f0c     0C 4E 05 F1 | 	add	fp, #12
15f10     A7 16 02 FB | 	rdlong	arg03, fp
15f14     0C 4E 05 F1 | 	add	fp, #12
15f18     A7 18 02 FB | 	rdlong	arg04, fp
15f1c     24 4E 85 F1 | 	sub	fp, #36
15f20     57 00 00 FF 
15f24     18 E4 05 F1 | 	add	objptr, ##44568
15f28     F2 1A 02 FB | 	rdlong	arg05, objptr
15f2c     57 00 00 FF 
15f30     18 E4 85 F1 | 	sub	objptr, ##44568
15f34     2C 6C B0 FD | 	call	#_hg010b_spin2_frame
15f38                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
15f38     6C 00 90 FD | 	jmp	#LR__1781
15f3c                 | LR__1780
15f3c     A7 12 02 F6 | 	mov	arg01, fp
15f40     2C D0 BF FD | 	call	#_converttoint
15f44     FD 20 02 F6 | 	mov	local02, result1
15f48     0C 4E 05 F1 | 	add	fp, #12
15f4c     A7 12 02 F6 | 	mov	arg01, fp
15f50     0C 4E 85 F1 | 	sub	fp, #12
15f54     18 D0 BF FD | 	call	#_converttoint
15f58     FD 22 02 F6 | 	mov	local03, result1
15f5c     18 4E 05 F1 | 	add	fp, #24
15f60     A7 12 02 F6 | 	mov	arg01, fp
15f64     18 4E 85 F1 | 	sub	fp, #24
15f68     04 D0 BF FD | 	call	#_converttoint
15f6c     FD 1E 02 F6 | 	mov	local01, result1
15f70     24 4E 05 F1 | 	add	fp, #36
15f74     A7 12 02 F6 | 	mov	arg01, fp
15f78     24 4E 85 F1 | 	sub	fp, #36
15f7c     F0 CF BF FD | 	call	#_converttoint
15f80     FD 18 02 F6 | 	mov	arg04, result1
15f84     57 00 00 FF 
15f88     18 E4 05 F1 | 	add	objptr, ##44568
15f8c     F2 1A 02 FB | 	rdlong	arg05, objptr
15f90     57 00 00 FF 
15f94     18 E4 85 F1 | 	sub	objptr, ##44568
15f98     10 13 02 F6 | 	mov	arg01, local02
15f9c     11 15 02 F6 | 	mov	arg02, local03
15fa0     0F 17 02 F6 | 	mov	arg03, local01
15fa4     BC 6B B0 FD | 	call	#_hg010b_spin2_frame
15fa8                 | LR__1781
15fa8     A7 F0 03 F6 | 	mov	ptra, fp
15fac     B2 00 A0 FD | 	call	#popregs_
15fb0                 | _do_frame_ret
15fb0     2D 00 64 FD | 	ret
15fb4                 | 
15fb4                 | ' 
15fb4                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
15fb4                 | ' 
15fb4                 | ' ' ------------------------- Print to the screem
15fb4                 | ' 
15fb4                 | ' sub do_print  
15fb4                 | _do_print
15fb4     0A 4A 05 F6 | 	mov	COUNT_, #10
15fb8     A8 00 A0 FD | 	call	#pushregs_
15fbc     00 24 06 F6 | 	mov	local04, #0
15fc0     E0 44 BF FD | 	call	#_pop
15fc4     FD 26 02 F6 | 	mov	local05, result1
15fc8     FE 28 02 F6 | 	mov	local06, result2
15fcc     FF 2A 02 F6 | 	mov	local07, result3
15fd0     13 1F 02 F6 | 	mov	local01, local05
15fd4     14 21 02 F6 | 	mov	local02, local06
15fd8     15 23 02 F6 | 	mov	local03, local07
15fdc                 | '  
15fdc                 | ' r=0
15fdc                 | ' t1=pop() 
15fdc                 | ' 'print t1.result_type,t1.result.uresult
15fdc                 | ' 
15fdc                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
15fdc     21 22 0E F2 | 	cmp	local03, #33 wz
15fe0     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
15fe4     20 00 90 5D |  if_ne	jmp	#LR__1790
15fe8     11 25 02 F6 | 	mov	local04, local03
15fec     B4 44 BF FD | 	call	#_pop
15ff0     FD 26 02 F6 | 	mov	local05, result1
15ff4     FE 28 02 F6 | 	mov	local06, result2
15ff8     FF 2A 02 F6 | 	mov	local07, result3
15ffc     13 1F 02 F6 | 	mov	local01, local05
16000     14 21 02 F6 | 	mov	local02, local06
16004     15 23 02 F6 | 	mov	local03, local07
16008                 | LR__1790
16008                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
16008     20 22 0E F2 | 	cmp	local03, #32 wz
1600c     11 25 02 A6 |  if_e	mov	local04, local03
16010                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
16010     FF 22 0E F2 | 	cmp	local03, #255 wz
16014     0C 00 90 5D |  if_ne	jmp	#LR__1791
16018     0F 13 02 F6 | 	mov	arg01, local01
1601c     BC 40 B0 FD | 	call	#_printerror
16020     4C 04 90 FD | 	jmp	#LR__1809
16024                 | LR__1791
16024                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
16024     2B 22 0E F2 | 	cmp	local03, #43 wz
16028     14 00 90 5D |  if_ne	jmp	#LR__1792
1602c     0F 13 02 F6 | 	mov	arg01, local01
16030     18 87 BF FD | 	call	#_convertstring
16034     FD 26 02 F6 | 	mov	local05, result1
16038     13 1F 02 F6 | 	mov	local01, local05
1603c     1F 22 06 F6 | 	mov	local03, #31
16040                 | LR__1792
16040                 | ' 
16040                 | ' if r=print_mod_comma  then
16040     21 24 0E F2 | 	cmp	local04, #33 wz
16044     AC 01 90 5D |  if_ne	jmp	#LR__1797
16048                 | '   if t1.result_type=result_int then print t1.result.iresult,
16048     1C 22 0E F2 | 	cmp	local03, #28 wz
1604c     64 00 90 5D |  if_ne	jmp	#LR__1793
16050     00 12 06 F6 | 	mov	arg01, #0
16054     74 DE B0 FD | 	call	#__system___getiolock_0475
16058     FD 12 02 F6 | 	mov	arg01, result1
1605c     D8 84 B0 FD | 	call	#__system___lockmem
16060     00 28 06 F6 | 	mov	local06, #0
16064     00 12 06 F6 | 	mov	arg01, #0
16068     0F 15 02 F6 | 	mov	arg02, local01
1606c     00 16 06 F6 | 	mov	arg03, #0
16070     0A 18 06 F6 | 	mov	arg04, #10
16074     08 92 B0 FD | 	call	#__system___basic_print_integer
16078     FD 2A 02 F6 | 	mov	local07, result1
1607c     14 27 02 F6 | 	mov	local05, local06
16080     15 27 02 F1 | 	add	local05, local07
16084     00 2C 06 F6 | 	mov	local08, #0
16088     00 12 06 F6 | 	mov	arg01, #0
1608c     09 14 06 F6 | 	mov	arg02, #9
16090     00 16 06 F6 | 	mov	arg03, #0
16094     4C 91 B0 FD | 	call	#__system___basic_print_char
16098     FD 2E 02 F6 | 	mov	local09, result1
1609c     FD 26 02 F1 | 	add	local05, result1
160a0     00 12 06 F6 | 	mov	arg01, #0
160a4     24 DE B0 FD | 	call	#__system___getiolock_0475
160a8     FD 00 68 FC | 	wrlong	#0, result1
160ac     00 FA 05 F6 | 	mov	result1, #0
160b0     00 30 06 F6 | 	mov	local10, #0
160b4                 | LR__1793
160b4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
160b4     1D 22 0E F2 | 	cmp	local03, #29 wz
160b8     64 00 90 5D |  if_ne	jmp	#LR__1794
160bc     00 12 06 F6 | 	mov	arg01, #0
160c0     08 DE B0 FD | 	call	#__system___getiolock_0475
160c4     FD 12 02 F6 | 	mov	arg01, result1
160c8     6C 84 B0 FD | 	call	#__system___lockmem
160cc     00 28 06 F6 | 	mov	local06, #0
160d0     00 12 06 F6 | 	mov	arg01, #0
160d4     0F 15 02 F6 | 	mov	arg02, local01
160d8     00 16 06 F6 | 	mov	arg03, #0
160dc     0A 18 06 F6 | 	mov	arg04, #10
160e0     DC 91 B0 FD | 	call	#__system___basic_print_unsigned
160e4     FD 2A 02 F6 | 	mov	local07, result1
160e8     14 27 02 F6 | 	mov	local05, local06
160ec     15 27 02 F1 | 	add	local05, local07
160f0     00 2C 06 F6 | 	mov	local08, #0
160f4     00 12 06 F6 | 	mov	arg01, #0
160f8     09 14 06 F6 | 	mov	arg02, #9
160fc     00 16 06 F6 | 	mov	arg03, #0
16100     E0 90 B0 FD | 	call	#__system___basic_print_char
16104     FD 2E 02 F6 | 	mov	local09, result1
16108     FD 26 02 F1 | 	add	local05, result1
1610c     00 12 06 F6 | 	mov	arg01, #0
16110     B8 DD B0 FD | 	call	#__system___getiolock_0475
16114     FD 00 68 FC | 	wrlong	#0, result1
16118     00 FA 05 F6 | 	mov	result1, #0
1611c     00 30 06 F6 | 	mov	local10, #0
16120                 | LR__1794
16120                 | '   if t1.result_type=result_float then print t1.result.fresult,
16120     1E 22 0E F2 | 	cmp	local03, #30 wz
16124     64 00 90 5D |  if_ne	jmp	#LR__1795
16128     00 12 06 F6 | 	mov	arg01, #0
1612c     9C DD B0 FD | 	call	#__system___getiolock_0475
16130     FD 12 02 F6 | 	mov	arg01, result1
16134     00 84 B0 FD | 	call	#__system___lockmem
16138     00 28 06 F6 | 	mov	local06, #0
1613c     00 12 06 F6 | 	mov	arg01, #0
16140     0F 15 02 F6 | 	mov	arg02, local01
16144     00 16 06 F6 | 	mov	arg03, #0
16148     23 18 06 F6 | 	mov	arg04, #35
1614c     7C B5 B0 FD | 	call	#__system___basic_print_float
16150     FD 2A 02 F6 | 	mov	local07, result1
16154     14 27 02 F6 | 	mov	local05, local06
16158     15 27 02 F1 | 	add	local05, local07
1615c     00 2C 06 F6 | 	mov	local08, #0
16160     00 12 06 F6 | 	mov	arg01, #0
16164     09 14 06 F6 | 	mov	arg02, #9
16168     00 16 06 F6 | 	mov	arg03, #0
1616c     74 90 B0 FD | 	call	#__system___basic_print_char
16170     FD 2E 02 F6 | 	mov	local09, result1
16174     FD 26 02 F1 | 	add	local05, result1
16178     00 12 06 F6 | 	mov	arg01, #0
1617c     4C DD B0 FD | 	call	#__system___getiolock_0475
16180     FD 00 68 FC | 	wrlong	#0, result1
16184     00 FA 05 F6 | 	mov	result1, #0
16188     00 30 06 F6 | 	mov	local10, #0
1618c                 | LR__1795
1618c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1618c     1F 22 0E F2 | 	cmp	local03, #31 wz
16190     60 00 90 5D |  if_ne	jmp	#LR__1796
16194     00 12 06 F6 | 	mov	arg01, #0
16198     30 DD B0 FD | 	call	#__system___getiolock_0475
1619c     FD 12 02 F6 | 	mov	arg01, result1
161a0     94 83 B0 FD | 	call	#__system___lockmem
161a4     00 28 06 F6 | 	mov	local06, #0
161a8     00 12 06 F6 | 	mov	arg01, #0
161ac     0F 15 02 F6 | 	mov	arg02, local01
161b0     00 16 06 F6 | 	mov	arg03, #0
161b4     84 90 B0 FD | 	call	#__system___basic_print_string
161b8     FD 2A 02 F6 | 	mov	local07, result1
161bc     14 27 02 F6 | 	mov	local05, local06
161c0     15 27 02 F1 | 	add	local05, local07
161c4     00 2C 06 F6 | 	mov	local08, #0
161c8     00 12 06 F6 | 	mov	arg01, #0
161cc     09 14 06 F6 | 	mov	arg02, #9
161d0     00 16 06 F6 | 	mov	arg03, #0
161d4     0C 90 B0 FD | 	call	#__system___basic_print_char
161d8     FD 2E 02 F6 | 	mov	local09, result1
161dc     FD 26 02 F1 | 	add	local05, result1
161e0     00 12 06 F6 | 	mov	arg01, #0
161e4     E4 DC B0 FD | 	call	#__system___getiolock_0475
161e8     FD 00 68 FC | 	wrlong	#0, result1
161ec     00 FA 05 F6 | 	mov	result1, #0
161f0     00 30 06 F6 | 	mov	local10, #0
161f4                 | LR__1796
161f4                 | LR__1797
161f4                 | ' if r=print_mod_semicolon then 
161f4     22 24 0E F2 | 	cmp	local04, #34 wz
161f8     1C 01 90 5D |  if_ne	jmp	#LR__1802
161fc                 | '   if t1.result_type=result_int then print t1.result.iresult;
161fc     1C 22 0E F2 | 	cmp	local03, #28 wz
16200     50 00 90 5D |  if_ne	jmp	#LR__1798
16204     00 12 06 F6 | 	mov	arg01, #0
16208     C0 DC B0 FD | 	call	#__system___getiolock_0475
1620c     FD 12 02 F6 | 	mov	arg01, result1
16210     24 83 B0 FD | 	call	#__system___lockmem
16214     00 28 06 F6 | 	mov	local06, #0
16218     00 30 06 F6 | 	mov	local10, #0
1621c     0A 2C 06 F6 | 	mov	local08, #10
16220     00 12 06 F6 | 	mov	arg01, #0
16224     0F 15 02 F6 | 	mov	arg02, local01
16228     00 16 06 F6 | 	mov	arg03, #0
1622c     0A 18 06 F6 | 	mov	arg04, #10
16230     4C 90 B0 FD | 	call	#__system___basic_print_integer
16234     FD 2A 02 F6 | 	mov	local07, result1
16238     14 27 02 F6 | 	mov	local05, local06
1623c     15 27 02 F1 | 	add	local05, local07
16240     00 12 06 F6 | 	mov	arg01, #0
16244     84 DC B0 FD | 	call	#__system___getiolock_0475
16248     FD 00 68 FC | 	wrlong	#0, result1
1624c     00 FA 05 F6 | 	mov	result1, #0
16250     00 2E 06 F6 | 	mov	local09, #0
16254                 | LR__1798
16254                 | '   if t1.result_type=result_uint then print t1.result.uresult;
16254     1D 22 0E F2 | 	cmp	local03, #29 wz
16258     50 00 90 5D |  if_ne	jmp	#LR__1799
1625c     00 12 06 F6 | 	mov	arg01, #0
16260     68 DC B0 FD | 	call	#__system___getiolock_0475
16264     FD 12 02 F6 | 	mov	arg01, result1
16268     CC 82 B0 FD | 	call	#__system___lockmem
1626c     00 28 06 F6 | 	mov	local06, #0
16270     00 30 06 F6 | 	mov	local10, #0
16274     0A 2C 06 F6 | 	mov	local08, #10
16278     00 12 06 F6 | 	mov	arg01, #0
1627c     0F 15 02 F6 | 	mov	arg02, local01
16280     00 16 06 F6 | 	mov	arg03, #0
16284     0A 18 06 F6 | 	mov	arg04, #10
16288     34 90 B0 FD | 	call	#__system___basic_print_unsigned
1628c     FD 2A 02 F6 | 	mov	local07, result1
16290     14 27 02 F6 | 	mov	local05, local06
16294     15 27 02 F1 | 	add	local05, local07
16298     00 12 06 F6 | 	mov	arg01, #0
1629c     2C DC B0 FD | 	call	#__system___getiolock_0475
162a0     FD 00 68 FC | 	wrlong	#0, result1
162a4     00 FA 05 F6 | 	mov	result1, #0
162a8     00 2E 06 F6 | 	mov	local09, #0
162ac                 | LR__1799
162ac                 | '   if t1.result_type=result_float then print t1.result.fresult;
162ac     1E 22 0E F2 | 	cmp	local03, #30 wz
162b0     30 00 90 5D |  if_ne	jmp	#LR__1800
162b4     00 12 06 F6 | 	mov	arg01, #0
162b8     10 DC B0 FD | 	call	#__system___getiolock_0475
162bc     FD 12 02 F6 | 	mov	arg01, result1
162c0     74 82 B0 FD | 	call	#__system___lockmem
162c4     00 12 06 F6 | 	mov	arg01, #0
162c8     0F 15 02 F6 | 	mov	arg02, local01
162cc     00 16 06 F6 | 	mov	arg03, #0
162d0     23 18 06 F6 | 	mov	arg04, #35
162d4     F4 B3 B0 FD | 	call	#__system___basic_print_float
162d8     00 12 06 F6 | 	mov	arg01, #0
162dc     EC DB B0 FD | 	call	#__system___getiolock_0475
162e0     FD 00 68 FC | 	wrlong	#0, result1
162e4                 | LR__1800
162e4                 | '   if t1.result_type=result_string then print t1.result.sresult;
162e4     1F 22 0E F2 | 	cmp	local03, #31 wz
162e8     2C 00 90 5D |  if_ne	jmp	#LR__1801
162ec     00 12 06 F6 | 	mov	arg01, #0
162f0     D8 DB B0 FD | 	call	#__system___getiolock_0475
162f4     FD 12 02 F6 | 	mov	arg01, result1
162f8     3C 82 B0 FD | 	call	#__system___lockmem
162fc     00 12 06 F6 | 	mov	arg01, #0
16300     0F 15 02 F6 | 	mov	arg02, local01
16304     00 16 06 F6 | 	mov	arg03, #0
16308     30 8F B0 FD | 	call	#__system___basic_print_string
1630c     00 12 06 F6 | 	mov	arg01, #0
16310     B8 DB B0 FD | 	call	#__system___getiolock_0475
16314     FD 00 68 FC | 	wrlong	#0, result1
16318                 | LR__1801
16318                 | LR__1802
16318                 | ' if r=0 then 
16318     00 24 0E F2 | 	cmp	local04, #0 wz
1631c     1C 01 90 5D |  if_ne	jmp	#LR__1807
16320                 | '   if t1.result_type=result_int then print t1.result.iresult
16320     1C 22 0E F2 | 	cmp	local03, #28 wz
16324     40 00 90 5D |  if_ne	jmp	#LR__1803
16328     00 12 06 F6 | 	mov	arg01, #0
1632c     9C DB B0 FD | 	call	#__system___getiolock_0475
16330     FD 12 02 F6 | 	mov	arg01, result1
16334     00 82 B0 FD | 	call	#__system___lockmem
16338     00 12 06 F6 | 	mov	arg01, #0
1633c     0F 15 02 F6 | 	mov	arg02, local01
16340     00 16 06 F6 | 	mov	arg03, #0
16344     0A 18 06 F6 | 	mov	arg04, #10
16348     34 8F B0 FD | 	call	#__system___basic_print_integer
1634c     00 12 06 F6 | 	mov	arg01, #0
16350     0A 14 06 F6 | 	mov	arg02, #10
16354     00 16 06 F6 | 	mov	arg03, #0
16358     88 8E B0 FD | 	call	#__system___basic_print_char
1635c     00 12 06 F6 | 	mov	arg01, #0
16360     68 DB B0 FD | 	call	#__system___getiolock_0475
16364     FD 00 68 FC | 	wrlong	#0, result1
16368                 | LR__1803
16368                 | '   if t1.result_type=result_uint then print t1.result.uresult
16368     1D 22 0E F2 | 	cmp	local03, #29 wz
1636c     40 00 90 5D |  if_ne	jmp	#LR__1804
16370     00 12 06 F6 | 	mov	arg01, #0
16374     54 DB B0 FD | 	call	#__system___getiolock_0475
16378     FD 12 02 F6 | 	mov	arg01, result1
1637c     B8 81 B0 FD | 	call	#__system___lockmem
16380     00 12 06 F6 | 	mov	arg01, #0
16384     0F 15 02 F6 | 	mov	arg02, local01
16388     00 16 06 F6 | 	mov	arg03, #0
1638c     0A 18 06 F6 | 	mov	arg04, #10
16390     2C 8F B0 FD | 	call	#__system___basic_print_unsigned
16394     00 12 06 F6 | 	mov	arg01, #0
16398     0A 14 06 F6 | 	mov	arg02, #10
1639c     00 16 06 F6 | 	mov	arg03, #0
163a0     40 8E B0 FD | 	call	#__system___basic_print_char
163a4     00 12 06 F6 | 	mov	arg01, #0
163a8     20 DB B0 FD | 	call	#__system___getiolock_0475
163ac     FD 00 68 FC | 	wrlong	#0, result1
163b0                 | LR__1804
163b0                 | '   if t1.result_type=result_float then print t1.result.fresult
163b0     1E 22 0E F2 | 	cmp	local03, #30 wz
163b4     40 00 90 5D |  if_ne	jmp	#LR__1805
163b8     00 12 06 F6 | 	mov	arg01, #0
163bc     0C DB B0 FD | 	call	#__system___getiolock_0475
163c0     FD 12 02 F6 | 	mov	arg01, result1
163c4     70 81 B0 FD | 	call	#__system___lockmem
163c8     00 12 06 F6 | 	mov	arg01, #0
163cc     0F 15 02 F6 | 	mov	arg02, local01
163d0     00 16 06 F6 | 	mov	arg03, #0
163d4     23 18 06 F6 | 	mov	arg04, #35
163d8     F0 B2 B0 FD | 	call	#__system___basic_print_float
163dc     00 12 06 F6 | 	mov	arg01, #0
163e0     0A 14 06 F6 | 	mov	arg02, #10
163e4     00 16 06 F6 | 	mov	arg03, #0
163e8     F8 8D B0 FD | 	call	#__system___basic_print_char
163ec     00 12 06 F6 | 	mov	arg01, #0
163f0     D8 DA B0 FD | 	call	#__system___getiolock_0475
163f4     FD 00 68 FC | 	wrlong	#0, result1
163f8                 | LR__1805
163f8                 | '   if t1.result_type=result_string then print t1.result.sresult
163f8     1F 22 0E F2 | 	cmp	local03, #31 wz
163fc     3C 00 90 5D |  if_ne	jmp	#LR__1806
16400     00 12 06 F6 | 	mov	arg01, #0
16404     C4 DA B0 FD | 	call	#__system___getiolock_0475
16408     FD 12 02 F6 | 	mov	arg01, result1
1640c     28 81 B0 FD | 	call	#__system___lockmem
16410     00 12 06 F6 | 	mov	arg01, #0
16414     0F 15 02 F6 | 	mov	arg02, local01
16418     00 16 06 F6 | 	mov	arg03, #0
1641c     1C 8E B0 FD | 	call	#__system___basic_print_string
16420     00 12 06 F6 | 	mov	arg01, #0
16424     0A 14 06 F6 | 	mov	arg02, #10
16428     00 16 06 F6 | 	mov	arg03, #0
1642c     B4 8D B0 FD | 	call	#__system___basic_print_char
16430     00 12 06 F6 | 	mov	arg01, #0
16434     94 DA B0 FD | 	call	#__system___getiolock_0475
16438     FD 00 68 FC | 	wrlong	#0, result1
1643c                 | LR__1806
1643c                 | LR__1807
1643c                 | ' if r=print_mod_empty then print
1643c     20 24 0E F2 | 	cmp	local04, #32 wz
16440     2C 00 90 5D |  if_ne	jmp	#LR__1808
16444     00 12 06 F6 | 	mov	arg01, #0
16448     80 DA B0 FD | 	call	#__system___getiolock_0475
1644c     FD 12 02 F6 | 	mov	arg01, result1
16450     E4 80 B0 FD | 	call	#__system___lockmem
16454     00 12 06 F6 | 	mov	arg01, #0
16458     0A 14 06 F6 | 	mov	arg02, #10
1645c     00 16 06 F6 | 	mov	arg03, #0
16460     80 8D B0 FD | 	call	#__system___basic_print_char
16464     00 12 06 F6 | 	mov	arg01, #0
16468     60 DA B0 FD | 	call	#__system___getiolock_0475
1646c     FD 00 68 FC | 	wrlong	#0, result1
16470                 | LR__1808
16470                 | LR__1809
16470     A7 F0 03 F6 | 	mov	ptra, fp
16474     B2 00 A0 FD | 	call	#popregs_
16478                 | _do_print_ret
16478     2D 00 64 FD | 	ret
1647c                 | 
1647c                 | ' 
1647c                 | ' 
1647c                 | ' sub do_paper
1647c                 | _do_paper
1647c     03 4A 05 F6 | 	mov	COUNT_, #3
16480     A8 00 A0 FD | 	call	#pushregs_
16484     1C 40 BF FD | 	call	#_pop
16488     FD 1E 02 F6 | 	mov	local01, result1
1648c     FE 20 02 F6 | 	mov	local02, result2
16490     FF 22 02 F6 | 	mov	local03, result3
16494                 | ' t1=pop() 
16494                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16494     1E 22 0E F2 | 	cmp	local03, #30 wz
16498     10 00 90 5D |  if_ne	jmp	#LR__1810
1649c     0F 13 02 F6 | 	mov	arg01, local01
164a0     00 14 06 F6 | 	mov	arg02, #0
164a4     D4 B0 B0 FD | 	call	#__system___float_tointeger
164a8     FD 1E 02 F6 | 	mov	local01, result1
164ac                 | LR__1810
164ac                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
164ac     1F 22 0E F2 | 	cmp	local03, #31 wz
164b0     18 00 90 5D |  if_ne	jmp	#LR__1811
164b4     0F 13 02 F6 | 	mov	arg01, local01
164b8     E0 B3 B0 FD | 	call	#__system____builtin_atof
164bc     FD 12 02 F6 | 	mov	arg01, result1
164c0     00 14 06 F6 | 	mov	arg02, #0
164c4     B4 B0 B0 FD | 	call	#__system___float_tointeger
164c8     FD 1E 02 F6 | 	mov	local01, result1
164cc                 | LR__1811
164cc     57 00 00 FF 
164d0     28 E4 05 F1 | 	add	objptr, ##44584
164d4     F2 1E 62 FC | 	wrlong	local01, objptr
164d8     04 E4 05 F1 | 	add	objptr, #4
164dc     F2 12 02 FB | 	rdlong	arg01, objptr
164e0                 | ' 
164e0                 | ' write_color:=ff
164e0     56 00 00 FF 
164e4     EB E5 85 F1 | 	sub	objptr, ##44523
164e8     F2 12 62 FC | 	wrlong	arg01, objptr
164ec                 | ' write_background:=bb
164ec     04 E4 05 F1 | 	add	objptr, #4
164f0     F2 1E 62 FC | 	wrlong	local01, objptr
164f4     45 E4 85 F1 | 	sub	objptr, #69
164f8     A7 F0 03 F6 | 	mov	ptra, fp
164fc     B2 00 A0 FD | 	call	#popregs_
16500                 | _do_paper_ret
16500     2D 00 64 FD | 	ret
16504                 | 
16504                 | ' 
16504                 | ' sub do_ink
16504                 | _do_ink
16504     03 4A 05 F6 | 	mov	COUNT_, #3
16508     A8 00 A0 FD | 	call	#pushregs_
1650c     94 3F BF FD | 	call	#_pop
16510     FD 1E 02 F6 | 	mov	local01, result1
16514     FE 20 02 F6 | 	mov	local02, result2
16518     FF 22 02 F6 | 	mov	local03, result3
1651c                 | ' t1=pop() 
1651c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1651c     1E 22 0E F2 | 	cmp	local03, #30 wz
16520     10 00 90 5D |  if_ne	jmp	#LR__1820
16524     0F 13 02 F6 | 	mov	arg01, local01
16528     00 14 06 F6 | 	mov	arg02, #0
1652c     4C B0 B0 FD | 	call	#__system___float_tointeger
16530     FD 1E 02 F6 | 	mov	local01, result1
16534                 | LR__1820
16534                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16534     1F 22 0E F2 | 	cmp	local03, #31 wz
16538     18 00 90 5D |  if_ne	jmp	#LR__1821
1653c     0F 13 02 F6 | 	mov	arg01, local01
16540     58 B3 B0 FD | 	call	#__system____builtin_atof
16544     FD 12 02 F6 | 	mov	arg01, result1
16548     00 14 06 F6 | 	mov	arg02, #0
1654c     2C B0 B0 FD | 	call	#__system___float_tointeger
16550     FD 1E 02 F6 | 	mov	local01, result1
16554                 | LR__1821
16554     57 00 00 FF 
16558     2C E4 05 F1 | 	add	objptr, ##44588
1655c     F2 1E 62 FC | 	wrlong	local01, objptr
16560     04 E4 85 F1 | 	sub	objptr, #4
16564     F2 14 02 FB | 	rdlong	arg02, objptr
16568                 | ' 
16568                 | ' write_color:=ff
16568     56 00 00 FF 
1656c     E7 E5 85 F1 | 	sub	objptr, ##44519
16570     F2 1E 62 FC | 	wrlong	local01, objptr
16574                 | ' write_background:=bb
16574     04 E4 05 F1 | 	add	objptr, #4
16578     F2 14 62 FC | 	wrlong	arg02, objptr
1657c     56 00 00 FF 
16580     E7 E5 05 F1 | 	add	objptr, ##44519
16584     F2 12 02 FB | 	rdlong	arg01, objptr
16588     57 00 00 FF 
1658c     2C E4 85 F1 | 	sub	objptr, ##44588
16590     84 57 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
16594     A7 F0 03 F6 | 	mov	ptra, fp
16598     B2 00 A0 FD | 	call	#popregs_
1659c                 | _do_ink_ret
1659c     2D 00 64 FD | 	ret
165a0                 | 
165a0                 | ' 
165a0                 | ' 
165a0                 | ' sub do_font
165a0                 | _do_font
165a0     03 4A 05 F6 | 	mov	COUNT_, #3
165a4     A8 00 A0 FD | 	call	#pushregs_
165a8     F8 3E BF FD | 	call	#_pop
165ac     FD 1E 02 F6 | 	mov	local01, result1
165b0     FE 20 02 F6 | 	mov	local02, result2
165b4     FF 22 02 F6 | 	mov	local03, result3
165b8                 | ' t1=pop() 
165b8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
165b8     1E 22 0E F2 | 	cmp	local03, #30 wz
165bc     10 00 90 5D |  if_ne	jmp	#LR__1830
165c0     0F 13 02 F6 | 	mov	arg01, local01
165c4     00 14 06 F6 | 	mov	arg02, #0
165c8     B0 AF B0 FD | 	call	#__system___float_tointeger
165cc     FD 1E 02 F6 | 	mov	local01, result1
165d0                 | LR__1830
165d0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
165d0     1F 22 0E F2 | 	cmp	local03, #31 wz
165d4     18 00 90 5D |  if_ne	jmp	#LR__1831
165d8     0F 13 02 F6 | 	mov	arg01, local01
165dc     BC B2 B0 FD | 	call	#__system____builtin_atof
165e0     FD 12 02 F6 | 	mov	arg01, result1
165e4     00 14 06 F6 | 	mov	arg02, #0
165e8     90 AF B0 FD | 	call	#__system___float_tointeger
165ec     FD 1E 02 F6 | 	mov	local01, result1
165f0                 | LR__1831
165f0     57 00 00 FF 
165f4     30 E4 05 F1 | 	add	objptr, ##44592
165f8     F2 1E 62 FC | 	wrlong	local01, objptr
165fc     57 00 00 FF 
16600     30 E4 85 F1 | 	sub	objptr, ##44592
16604     02 1E 66 F0 | 	shl	local01, #2
16608     0F 13 02 F6 | 	mov	arg01, local01
1660c     4C 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16610     A7 F0 03 F6 | 	mov	ptra, fp
16614     B2 00 A0 FD | 	call	#popregs_
16618                 | _do_font_ret
16618     2D 00 64 FD | 	ret
1661c                 | 
1661c                 | ' 
1661c                 | ' sub do_mode
1661c                 | _do_mode
1661c     05 4A 05 F6 | 	mov	COUNT_, #5
16620     A8 00 A0 FD | 	call	#pushregs_
16624     7C 3E BF FD | 	call	#_pop
16628     FD 1E 02 F6 | 	mov	local01, result1
1662c     FE 20 02 F6 | 	mov	local02, result2
16630     FF 22 02 F6 | 	mov	local03, result3
16634                 | ' t1=pop() 
16634                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16634     1E 22 0E F2 | 	cmp	local03, #30 wz
16638     10 00 90 5D |  if_ne	jmp	#LR__1840
1663c     0F 13 02 F6 | 	mov	arg01, local01
16640     00 14 06 F6 | 	mov	arg02, #0
16644     34 AF B0 FD | 	call	#__system___float_tointeger
16648     FD 1E 02 F6 | 	mov	local01, result1
1664c                 | LR__1840
1664c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1664c     1F 22 0E F2 | 	cmp	local03, #31 wz
16650     18 00 90 5D |  if_ne	jmp	#LR__1841
16654     0F 13 02 F6 | 	mov	arg01, local01
16658     40 B2 B0 FD | 	call	#__system____builtin_atof
1665c     FD 12 02 F6 | 	mov	arg01, result1
16660     00 14 06 F6 | 	mov	arg02, #0
16664     14 AF B0 FD | 	call	#__system___float_tointeger
16668     FD 1E 02 F6 | 	mov	local01, result1
1666c                 | LR__1841
1666c                 | ' select case t1.result.iresult
1666c     0F 25 02 F6 | 	mov	local04, local01
16670     05 24 26 F3 | 	fle	local04, #5
16674     30 24 62 FD | 	jmprel	local04
16678                 | LR__1842
16678     14 00 90 FD | 	jmp	#LR__1843
1667c     A8 00 90 FD | 	jmp	#LR__1844
16680     10 01 90 FD | 	jmp	#LR__1845
16684     78 01 90 FD | 	jmp	#LR__1846
16688     E0 01 90 FD | 	jmp	#LR__1847
1668c     70 02 90 FD | 	jmp	#LR__1848
16690                 | LR__1843
16690     57 00 00 FF 
16694     30 E4 05 F1 | 	add	objptr, ##44592
16698     F2 02 68 FC | 	wrlong	#1, objptr
1669c     04 E4 85 F1 | 	sub	objptr, #4
166a0     F2 34 69 FC | 	wrlong	#154, objptr
166a4     22 00 00 FF 
166a8     A4 E5 05 F1 | 	add	objptr, ##17828
166ac     F2 02 68 FC | 	wrlong	#1, objptr
166b0     22 00 00 FF 
166b4     A8 E5 85 F1 | 	sub	objptr, ##17832
166b8     F2 26 69 FC | 	wrlong	#147, objptr
166bc     57 00 00 FF 
166c0     28 E4 85 F1 | 	sub	objptr, ##44584
166c4     04 12 06 F6 | 	mov	arg01, #4
166c8     90 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
166cc     57 00 00 FF 
166d0     2C E4 05 F1 | 	add	objptr, ##44588
166d4     F2 12 02 FB | 	rdlong	arg01, objptr
166d8     04 E4 85 F1 | 	sub	objptr, #4
166dc     F2 14 02 FB | 	rdlong	arg02, objptr
166e0                 | ' 
166e0                 | ' write_color:=ff
166e0     56 00 00 FF 
166e4     E7 E5 85 F1 | 	sub	objptr, ##44519
166e8     F2 12 62 FC | 	wrlong	arg01, objptr
166ec                 | ' write_background:=bb
166ec     04 E4 05 F1 | 	add	objptr, #4
166f0     F2 14 62 FC | 	wrlong	arg02, objptr
166f4     01 00 00 FF 
166f8     00 EA 05 F1 | 	add	ptr__dat__, ##512
166fc     7B 00 00 FF 
16700     2F E4 05 F1 | 	add	objptr, ##63023
16704     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16708     04 E4 85 F1 | 	sub	objptr, #4
1670c     03 00 80 FF 
16710     F2 30 69 FC | 	wrlong	##1688, objptr
16714     7B 00 00 FF 
16718     70 E4 85 F1 | 	sub	objptr, ##63088
1671c     01 00 00 FF 
16720     00 EA 85 F1 | 	sub	ptr__dat__, ##512
16724     D8 01 90 FD | 	jmp	#LR__1848
16728                 | LR__1844
16728     57 00 00 FF 
1672c     30 E4 05 F1 | 	add	objptr, ##44592
16730     F2 00 68 FC | 	wrlong	#0, objptr
16734     04 E4 85 F1 | 	sub	objptr, #4
16738     F2 2E 68 FC | 	wrlong	#23, objptr
1673c     22 00 00 FF 
16740     A4 E5 05 F1 | 	add	objptr, ##17828
16744     F2 00 68 FC | 	wrlong	#0, objptr
16748     22 00 00 FF 
1674c     A8 E5 85 F1 | 	sub	objptr, ##17832
16750     F2 00 68 FC | 	wrlong	#0, objptr
16754     57 00 00 FF 
16758     28 E4 85 F1 | 	sub	objptr, ##44584
1675c     00 12 06 F6 | 	mov	arg01, #0
16760     F8 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16764     57 00 00 FF 
16768     2C E4 05 F1 | 	add	objptr, ##44588
1676c     F2 12 02 FB | 	rdlong	arg01, objptr
16770     04 E4 85 F1 | 	sub	objptr, #4
16774     F2 14 02 FB | 	rdlong	arg02, objptr
16778                 | ' 
16778                 | ' write_color:=ff
16778     56 00 00 FF 
1677c     E7 E5 85 F1 | 	sub	objptr, ##44519
16780     F2 12 62 FC | 	wrlong	arg01, objptr
16784                 | ' write_background:=bb
16784     04 E4 05 F1 | 	add	objptr, #4
16788     F2 14 62 FC | 	wrlong	arg02, objptr
1678c     45 E4 85 F1 | 	sub	objptr, #69
16790     6C 01 90 FD | 	jmp	#LR__1848
16794                 | LR__1845
16794     57 00 00 FF 
16798     30 E4 05 F1 | 	add	objptr, ##44592
1679c     F2 00 68 FC | 	wrlong	#0, objptr
167a0     04 E4 85 F1 | 	sub	objptr, #4
167a4     F2 6A 69 FC | 	wrlong	#181, objptr
167a8     22 00 00 FF 
167ac     A4 E5 05 F1 | 	add	objptr, ##17828
167b0     F2 00 68 FC | 	wrlong	#0, objptr
167b4     22 00 00 FF 
167b8     A8 E5 85 F1 | 	sub	objptr, ##17832
167bc     F2 00 68 FC | 	wrlong	#0, objptr
167c0     57 00 00 FF 
167c4     28 E4 85 F1 | 	sub	objptr, ##44584
167c8     00 12 06 F6 | 	mov	arg01, #0
167cc     8C 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
167d0     57 00 00 FF 
167d4     2C E4 05 F1 | 	add	objptr, ##44588
167d8     F2 12 02 FB | 	rdlong	arg01, objptr
167dc     04 E4 85 F1 | 	sub	objptr, #4
167e0     F2 14 02 FB | 	rdlong	arg02, objptr
167e4                 | ' 
167e4                 | ' write_color:=ff
167e4     56 00 00 FF 
167e8     E7 E5 85 F1 | 	sub	objptr, ##44519
167ec     F2 12 62 FC | 	wrlong	arg01, objptr
167f0                 | ' write_background:=bb
167f0     04 E4 05 F1 | 	add	objptr, #4
167f4     F2 14 62 FC | 	wrlong	arg02, objptr
167f8     45 E4 85 F1 | 	sub	objptr, #69
167fc     00 01 90 FD | 	jmp	#LR__1848
16800                 | LR__1846
16800     57 00 00 FF 
16804     30 E4 05 F1 | 	add	objptr, ##44592
16808     F2 00 68 FC | 	wrlong	#0, objptr
1680c     04 E4 85 F1 | 	sub	objptr, #4
16810     F2 1E 68 FC | 	wrlong	#15, objptr
16814     22 00 00 FF 
16818     A4 E5 05 F1 | 	add	objptr, ##17828
1681c     F2 00 68 FC | 	wrlong	#0, objptr
16820     22 00 00 FF 
16824     A8 E5 85 F1 | 	sub	objptr, ##17832
16828     F2 00 68 FC | 	wrlong	#0, objptr
1682c     57 00 00 FF 
16830     28 E4 85 F1 | 	sub	objptr, ##44584
16834     00 12 06 F6 | 	mov	arg01, #0
16838     20 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1683c     57 00 00 FF 
16840     2C E4 05 F1 | 	add	objptr, ##44588
16844     F2 12 02 FB | 	rdlong	arg01, objptr
16848     04 E4 85 F1 | 	sub	objptr, #4
1684c     F2 14 02 FB | 	rdlong	arg02, objptr
16850                 | ' 
16850                 | ' write_color:=ff
16850     56 00 00 FF 
16854     E7 E5 85 F1 | 	sub	objptr, ##44519
16858     F2 12 62 FC | 	wrlong	arg01, objptr
1685c                 | ' write_background:=bb
1685c     04 E4 05 F1 | 	add	objptr, #4
16860     F2 14 62 FC | 	wrlong	arg02, objptr
16864     45 E4 85 F1 | 	sub	objptr, #69
16868     94 00 90 FD | 	jmp	#LR__1848
1686c                 | LR__1847
1686c     57 00 00 FF 
16870     30 E4 05 F1 | 	add	objptr, ##44592
16874     F2 02 68 FC | 	wrlong	#1, objptr
16878     04 E4 85 F1 | 	sub	objptr, #4
1687c     F2 02 68 FC | 	wrlong	#1, objptr
16880     22 00 00 FF 
16884     A4 E5 05 F1 | 	add	objptr, ##17828
16888     F2 02 68 FC | 	wrlong	#1, objptr
1688c     22 00 00 FF 
16890     A8 E5 85 F1 | 	sub	objptr, ##17832
16894     F2 1C 68 FC | 	wrlong	#14, objptr
16898     57 00 00 FF 
1689c     28 E4 85 F1 | 	sub	objptr, ##44584
168a0     04 12 06 F6 | 	mov	arg01, #4
168a4     B4 64 B0 FD | 	call	#_hg010b_spin2_setfontfamily
168a8     57 00 00 FF 
168ac     2C E4 05 F1 | 	add	objptr, ##44588
168b0     F2 12 02 FB | 	rdlong	arg01, objptr
168b4     04 E4 85 F1 | 	sub	objptr, #4
168b8     F2 14 02 FB | 	rdlong	arg02, objptr
168bc                 | ' 
168bc                 | ' write_color:=ff
168bc     56 00 00 FF 
168c0     E7 E5 85 F1 | 	sub	objptr, ##44519
168c4     F2 12 62 FC | 	wrlong	arg01, objptr
168c8                 | ' write_background:=bb
168c8     04 E4 05 F1 | 	add	objptr, #4
168cc     F2 14 62 FC | 	wrlong	arg02, objptr
168d0     07 00 00 FF 
168d4     8A EB 05 F1 | 	add	ptr__dat__, ##3978
168d8     7B 00 00 FF 
168dc     2F E4 05 F1 | 	add	objptr, ##63023
168e0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
168e4     04 E4 85 F1 | 	sub	objptr, #4
168e8     03 00 80 FF 
168ec     F2 30 69 FC | 	wrlong	##1688, objptr
168f0     7B 00 00 FF 
168f4     70 E4 85 F1 | 	sub	objptr, ##63088
168f8     07 00 00 FF 
168fc     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
16900                 | LR__1848
16900     7B 00 00 FF 
16904     6C E4 05 F1 | 	add	objptr, ##63084
16908     F2 1E 62 FC | 	wrlong	local01, objptr
1690c     04 E4 85 F1 | 	sub	objptr, #4
16910     F2 12 02 FB | 	rdlong	arg01, objptr
16914     18 00 00 FF 
16918     1C E4 85 F1 | 	sub	objptr, ##12316
1691c     F2 26 02 FB | 	rdlong	local05, objptr
16920     63 00 00 FF 
16924     4C E4 85 F1 | 	sub	objptr, ##50764
16928     13 13 82 F1 | 	sub	arg01, local05
1692c     00 14 06 F6 | 	mov	arg02, #0
16930     0A 16 06 F6 | 	mov	arg03, #10
16934     98 9E B0 FD | 	call	#__system__Number_S
16938     FD 12 02 F6 | 	mov	arg01, result1
1693c     71 01 00 FF 
16940     69 14 06 F6 | 	mov	arg02, ##@LR__5139
16944     4C 7C B0 FD | 	call	#__system___string_concat
16948     79 00 00 FF 
1694c     CC E5 05 F1 | 	add	objptr, ##62412
16950     F2 FA 61 FC | 	wrlong	result1, objptr
16954     22 00 00 FF 
16958     A0 E5 85 F1 | 	sub	objptr, ##17824
1695c     F2 12 02 FB | 	rdlong	arg01, objptr
16960     04 E4 85 F1 | 	sub	objptr, #4
16964     F2 14 02 FB | 	rdlong	arg02, objptr
16968     57 00 00 FF 
1696c     28 E4 85 F1 | 	sub	objptr, ##44584
16970     38 65 B0 FD | 	call	#_hg010b_spin2_cls
16974     71 01 00 FF 
16978     7B 12 06 F6 | 	mov	arg01, ##@LR__5140
1697c                 | ' 
1697c                 | ' write(text)
1697c     EC 68 B0 FD | 	call	#_hg010b_spin2_write
16980                 | ' crlf
16980     B4 6B B0 FD | 	call	#_hg010b_spin2_crlf
16984     18 00 00 FF 
16988     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1698c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
16990     18 00 00 FF 
16994     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
16998                 | ' 
16998                 | ' write(text)
16998     D0 68 B0 FD | 	call	#_hg010b_spin2_write
1699c                 | ' crlf
1699c     98 6B B0 FD | 	call	#_hg010b_spin2_crlf
169a0     79 00 00 FF 
169a4     CC E5 05 F1 | 	add	objptr, ##62412
169a8     F2 12 02 FB | 	rdlong	arg01, objptr
169ac     79 00 00 FF 
169b0     CC E5 85 F1 | 	sub	objptr, ##62412
169b4                 | ' 
169b4                 | ' write(text)
169b4     B4 68 B0 FD | 	call	#_hg010b_spin2_write
169b8                 | ' crlf
169b8     7C 6B B0 FD | 	call	#_hg010b_spin2_crlf
169bc     A7 F0 03 F6 | 	mov	ptra, fp
169c0     B2 00 A0 FD | 	call	#popregs_
169c4                 | _do_mode_ret
169c4     2D 00 64 FD | 	ret
169c8                 | 
169c8                 | ' 
169c8                 | ' sub do_setwave
169c8                 | _do_setwave
169c8     02 4A 05 F6 | 	mov	COUNT_, #2
169cc     A8 00 A0 FD | 	call	#pushregs_
169d0     18 F0 07 F1 | 	add	ptra, #24
169d4     CC 3A BF FD | 	call	#_pop
169d8     FD 12 02 F6 | 	mov	arg01, result1
169dc     FE 1E 02 F6 | 	mov	local01, result2
169e0     FF 20 02 F6 | 	mov	local02, result3
169e4     A7 12 62 FC | 	wrlong	arg01, fp
169e8     04 4E 05 F1 | 	add	fp, #4
169ec     A7 1E 62 FC | 	wrlong	local01, fp
169f0     04 4E 05 F1 | 	add	fp, #4
169f4     A7 20 62 FC | 	wrlong	local02, fp
169f8     08 4E 85 F1 | 	sub	fp, #8
169fc     A4 3A BF FD | 	call	#_pop
16a00     FD 20 02 F6 | 	mov	local02, result1
16a04     0C 4E 05 F1 | 	add	fp, #12
16a08     A7 20 62 FC | 	wrlong	local02, fp
16a0c     04 4E 05 F1 | 	add	fp, #4
16a10     A7 FC 61 FC | 	wrlong	result2, fp
16a14     04 4E 05 F1 | 	add	fp, #4
16a18     A7 FE 61 FC | 	wrlong	result3, fp
16a1c     08 4E 85 F1 | 	sub	fp, #8
16a20     A7 12 02 F6 | 	mov	arg01, fp
16a24     0C 4E 85 F1 | 	sub	fp, #12
16a28     44 C5 BF FD | 	call	#_converttoint
16a2c     FD 20 02 F6 | 	mov	local02, result1
16a30     10 1F 02 F6 | 	mov	local01, local02
16a34     01 1E 66 F0 | 	shl	local01, #1
16a38     10 1F 02 F1 | 	add	local01, local02
16a3c     03 1E 66 F0 | 	shl	local01, #3
16a40     34 00 00 FF 
16a44     38 E5 05 F1 | 	add	objptr, ##26936
16a48     F2 1E 02 F1 | 	add	local01, objptr
16a4c     A7 12 02 F6 | 	mov	arg01, fp
16a50     34 00 00 FF 
16a54     38 E5 85 F1 | 	sub	objptr, ##26936
16a58     14 C5 BF FD | 	call	#_converttoint
16a5c     04 1E 06 F1 | 	add	local01, #4
16a60     0F FB 41 FC | 	wrbyte	result1, local01
16a64     A7 F0 03 F6 | 	mov	ptra, fp
16a68     B2 00 A0 FD | 	call	#popregs_
16a6c                 | _do_setwave_ret
16a6c     2D 00 64 FD | 	ret
16a70                 | 
16a70                 | ' 
16a70                 | ' sub do_setsustain
16a70                 | _do_setsustain
16a70     02 4A 05 F6 | 	mov	COUNT_, #2
16a74     A8 00 A0 FD | 	call	#pushregs_
16a78     18 F0 07 F1 | 	add	ptra, #24
16a7c     24 3A BF FD | 	call	#_pop
16a80     FD 12 02 F6 | 	mov	arg01, result1
16a84     FE 1E 02 F6 | 	mov	local01, result2
16a88     FF 20 02 F6 | 	mov	local02, result3
16a8c     A7 12 62 FC | 	wrlong	arg01, fp
16a90     04 4E 05 F1 | 	add	fp, #4
16a94     A7 1E 62 FC | 	wrlong	local01, fp
16a98     04 4E 05 F1 | 	add	fp, #4
16a9c     A7 20 62 FC | 	wrlong	local02, fp
16aa0     08 4E 85 F1 | 	sub	fp, #8
16aa4     FC 39 BF FD | 	call	#_pop
16aa8     FD 20 02 F6 | 	mov	local02, result1
16aac     0C 4E 05 F1 | 	add	fp, #12
16ab0     A7 20 62 FC | 	wrlong	local02, fp
16ab4     04 4E 05 F1 | 	add	fp, #4
16ab8     A7 FC 61 FC | 	wrlong	result2, fp
16abc     04 4E 05 F1 | 	add	fp, #4
16ac0     A7 FE 61 FC | 	wrlong	result3, fp
16ac4     08 4E 85 F1 | 	sub	fp, #8
16ac8     A7 12 02 F6 | 	mov	arg01, fp
16acc     0C 4E 85 F1 | 	sub	fp, #12
16ad0     9C C4 BF FD | 	call	#_converttoint
16ad4     FD 20 02 F6 | 	mov	local02, result1
16ad8     10 1F 02 F6 | 	mov	local01, local02
16adc     01 1E 66 F0 | 	shl	local01, #1
16ae0     10 1F 02 F1 | 	add	local01, local02
16ae4     03 1E 66 F0 | 	shl	local01, #3
16ae8     34 00 00 FF 
16aec     38 E5 05 F1 | 	add	objptr, ##26936
16af0     F2 1E 02 F1 | 	add	local01, objptr
16af4     A7 12 02 F6 | 	mov	arg01, fp
16af8     34 00 00 FF 
16afc     38 E5 85 F1 | 	sub	objptr, ##26936
16b00     6C C4 BF FD | 	call	#_converttoint
16b04     14 1E 06 F1 | 	add	local01, #20
16b08     0F FB 51 FC | 	wrword	result1, local01
16b0c     A7 F0 03 F6 | 	mov	ptra, fp
16b10     B2 00 A0 FD | 	call	#popregs_
16b14                 | _do_setsustain_ret
16b14     2D 00 64 FD | 	ret
16b18                 | 
16b18                 | ' 
16b18                 | ' sub do_setenv
16b18                 | _do_setenv
16b18     02 4A 05 F6 | 	mov	COUNT_, #2
16b1c     A8 00 A0 FD | 	call	#pushregs_
16b20     18 F0 07 F1 | 	add	ptra, #24
16b24     7C 39 BF FD | 	call	#_pop
16b28     FD 12 02 F6 | 	mov	arg01, result1
16b2c     FE 1E 02 F6 | 	mov	local01, result2
16b30     FF 20 02 F6 | 	mov	local02, result3
16b34     A7 12 62 FC | 	wrlong	arg01, fp
16b38     04 4E 05 F1 | 	add	fp, #4
16b3c     A7 1E 62 FC | 	wrlong	local01, fp
16b40     04 4E 05 F1 | 	add	fp, #4
16b44     A7 20 62 FC | 	wrlong	local02, fp
16b48     08 4E 85 F1 | 	sub	fp, #8
16b4c     54 39 BF FD | 	call	#_pop
16b50     FD 20 02 F6 | 	mov	local02, result1
16b54     0C 4E 05 F1 | 	add	fp, #12
16b58     A7 20 62 FC | 	wrlong	local02, fp
16b5c     04 4E 05 F1 | 	add	fp, #4
16b60     A7 FC 61 FC | 	wrlong	result2, fp
16b64     04 4E 05 F1 | 	add	fp, #4
16b68     A7 FE 61 FC | 	wrlong	result3, fp
16b6c     08 4E 85 F1 | 	sub	fp, #8
16b70     A7 12 02 F6 | 	mov	arg01, fp
16b74     0C 4E 85 F1 | 	sub	fp, #12
16b78     F4 C3 BF FD | 	call	#_converttoint
16b7c     FD 20 02 F6 | 	mov	local02, result1
16b80     10 1F 02 F6 | 	mov	local01, local02
16b84     01 1E 66 F0 | 	shl	local01, #1
16b88     10 1F 02 F1 | 	add	local01, local02
16b8c     03 1E 66 F0 | 	shl	local01, #3
16b90     34 00 00 FF 
16b94     38 E5 05 F1 | 	add	objptr, ##26936
16b98     F2 1E 02 F1 | 	add	local01, objptr
16b9c     A7 12 02 F6 | 	mov	arg01, fp
16ba0     34 00 00 FF 
16ba4     38 E5 85 F1 | 	sub	objptr, ##26936
16ba8     C4 C3 BF FD | 	call	#_converttoint
16bac     05 1E 06 F1 | 	add	local01, #5
16bb0     0F FB 41 FC | 	wrbyte	result1, local01
16bb4     A7 F0 03 F6 | 	mov	ptra, fp
16bb8     B2 00 A0 FD | 	call	#popregs_
16bbc                 | _do_setenv_ret
16bbc     2D 00 64 FD | 	ret
16bc0                 | 
16bc0                 | ' 
16bc0                 | ' sub do_setdelay
16bc0                 | _do_setdelay
16bc0     02 4A 05 F6 | 	mov	COUNT_, #2
16bc4     A8 00 A0 FD | 	call	#pushregs_
16bc8     18 F0 07 F1 | 	add	ptra, #24
16bcc     D4 38 BF FD | 	call	#_pop
16bd0     FD 12 02 F6 | 	mov	arg01, result1
16bd4     FE 1E 02 F6 | 	mov	local01, result2
16bd8     FF 20 02 F6 | 	mov	local02, result3
16bdc     A7 12 62 FC | 	wrlong	arg01, fp
16be0     04 4E 05 F1 | 	add	fp, #4
16be4     A7 1E 62 FC | 	wrlong	local01, fp
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 20 62 FC | 	wrlong	local02, fp
16bf0     08 4E 85 F1 | 	sub	fp, #8
16bf4     AC 38 BF FD | 	call	#_pop
16bf8     FD 20 02 F6 | 	mov	local02, result1
16bfc     0C 4E 05 F1 | 	add	fp, #12
16c00     A7 20 62 FC | 	wrlong	local02, fp
16c04     04 4E 05 F1 | 	add	fp, #4
16c08     A7 FC 61 FC | 	wrlong	result2, fp
16c0c     04 4E 05 F1 | 	add	fp, #4
16c10     A7 FE 61 FC | 	wrlong	result3, fp
16c14     08 4E 85 F1 | 	sub	fp, #8
16c18     A7 12 02 F6 | 	mov	arg01, fp
16c1c     0C 4E 85 F1 | 	sub	fp, #12
16c20     4C C3 BF FD | 	call	#_converttoint
16c24     FD 20 02 F6 | 	mov	local02, result1
16c28     10 1F 02 F6 | 	mov	local01, local02
16c2c     01 1E 66 F0 | 	shl	local01, #1
16c30     10 1F 02 F1 | 	add	local01, local02
16c34     03 1E 66 F0 | 	shl	local01, #3
16c38     34 00 00 FF 
16c3c     38 E5 05 F1 | 	add	objptr, ##26936
16c40     F2 1E 02 F1 | 	add	local01, objptr
16c44     A7 12 02 F6 | 	mov	arg01, fp
16c48     34 00 00 FF 
16c4c     38 E5 85 F1 | 	sub	objptr, ##26936
16c50     1C C3 BF FD | 	call	#_converttoint
16c54     06 1E 06 F1 | 	add	local01, #6
16c58     0F FB 51 FC | 	wrword	result1, local01
16c5c     A7 F0 03 F6 | 	mov	ptra, fp
16c60     B2 00 A0 FD | 	call	#popregs_
16c64                 | _do_setdelay_ret
16c64     2D 00 64 FD | 	ret
16c68                 | 
16c68                 | ' 
16c68                 | ' sub do_setlen
16c68                 | _do_setlen
16c68     02 4A 05 F6 | 	mov	COUNT_, #2
16c6c     A8 00 A0 FD | 	call	#pushregs_
16c70     18 F0 07 F1 | 	add	ptra, #24
16c74     2C 38 BF FD | 	call	#_pop
16c78     FD 12 02 F6 | 	mov	arg01, result1
16c7c     FE 1E 02 F6 | 	mov	local01, result2
16c80     FF 20 02 F6 | 	mov	local02, result3
16c84     A7 12 62 FC | 	wrlong	arg01, fp
16c88     04 4E 05 F1 | 	add	fp, #4
16c8c     A7 1E 62 FC | 	wrlong	local01, fp
16c90     04 4E 05 F1 | 	add	fp, #4
16c94     A7 20 62 FC | 	wrlong	local02, fp
16c98     08 4E 85 F1 | 	sub	fp, #8
16c9c     04 38 BF FD | 	call	#_pop
16ca0     FD 20 02 F6 | 	mov	local02, result1
16ca4     0C 4E 05 F1 | 	add	fp, #12
16ca8     A7 20 62 FC | 	wrlong	local02, fp
16cac     04 4E 05 F1 | 	add	fp, #4
16cb0     A7 FC 61 FC | 	wrlong	result2, fp
16cb4     04 4E 05 F1 | 	add	fp, #4
16cb8     A7 FE 61 FC | 	wrlong	result3, fp
16cbc     08 4E 85 F1 | 	sub	fp, #8
16cc0     A7 12 02 F6 | 	mov	arg01, fp
16cc4     0C 4E 85 F1 | 	sub	fp, #12
16cc8     A4 C2 BF FD | 	call	#_converttoint
16ccc     FD 20 02 F6 | 	mov	local02, result1
16cd0     10 1F 02 F6 | 	mov	local01, local02
16cd4     01 1E 66 F0 | 	shl	local01, #1
16cd8     10 1F 02 F1 | 	add	local01, local02
16cdc     03 1E 66 F0 | 	shl	local01, #3
16ce0     34 00 00 FF 
16ce4     38 E5 05 F1 | 	add	objptr, ##26936
16ce8     F2 1E 02 F1 | 	add	local01, objptr
16cec     A7 12 02 F6 | 	mov	arg01, fp
16cf0     34 00 00 FF 
16cf4     38 E5 85 F1 | 	sub	objptr, ##26936
16cf8     20 C3 BF FD | 	call	#_converttofloat
16cfc     08 1E 06 F1 | 	add	local01, #8
16d00     0F FB 61 FC | 	wrlong	result1, local01
16d04     A7 F0 03 F6 | 	mov	ptra, fp
16d08     B2 00 A0 FD | 	call	#popregs_
16d0c                 | _do_setlen_ret
16d0c     2D 00 64 FD | 	ret
16d10                 | 
16d10                 | ' 
16d10                 | ' sub do_setvol
16d10                 | _do_setvol
16d10     02 4A 05 F6 | 	mov	COUNT_, #2
16d14     A8 00 A0 FD | 	call	#pushregs_
16d18     18 F0 07 F1 | 	add	ptra, #24
16d1c     84 37 BF FD | 	call	#_pop
16d20     FD 12 02 F6 | 	mov	arg01, result1
16d24     FE 1E 02 F6 | 	mov	local01, result2
16d28     FF 20 02 F6 | 	mov	local02, result3
16d2c     A7 12 62 FC | 	wrlong	arg01, fp
16d30     04 4E 05 F1 | 	add	fp, #4
16d34     A7 1E 62 FC | 	wrlong	local01, fp
16d38     04 4E 05 F1 | 	add	fp, #4
16d3c     A7 20 62 FC | 	wrlong	local02, fp
16d40     08 4E 85 F1 | 	sub	fp, #8
16d44     5C 37 BF FD | 	call	#_pop
16d48     FD 20 02 F6 | 	mov	local02, result1
16d4c     0C 4E 05 F1 | 	add	fp, #12
16d50     A7 20 62 FC | 	wrlong	local02, fp
16d54     04 4E 05 F1 | 	add	fp, #4
16d58     A7 FC 61 FC | 	wrlong	result2, fp
16d5c     04 4E 05 F1 | 	add	fp, #4
16d60     A7 FE 61 FC | 	wrlong	result3, fp
16d64     08 4E 85 F1 | 	sub	fp, #8
16d68     A7 12 02 F6 | 	mov	arg01, fp
16d6c     0C 4E 85 F1 | 	sub	fp, #12
16d70     FC C1 BF FD | 	call	#_converttoint
16d74     FD 20 02 F6 | 	mov	local02, result1
16d78     10 1F 02 F6 | 	mov	local01, local02
16d7c     01 1E 66 F0 | 	shl	local01, #1
16d80     10 1F 02 F1 | 	add	local01, local02
16d84     03 1E 66 F0 | 	shl	local01, #3
16d88     34 00 00 FF 
16d8c     38 E5 05 F1 | 	add	objptr, ##26936
16d90     F2 1E 02 F1 | 	add	local01, objptr
16d94     A7 12 02 F6 | 	mov	arg01, fp
16d98     34 00 00 FF 
16d9c     38 E5 85 F1 | 	sub	objptr, ##26936
16da0     78 C2 BF FD | 	call	#_converttofloat
16da4     0C 1E 06 F1 | 	add	local01, #12
16da8     0F FB 61 FC | 	wrlong	result1, local01
16dac     A7 F0 03 F6 | 	mov	ptra, fp
16db0     B2 00 A0 FD | 	call	#popregs_
16db4                 | _do_setvol_ret
16db4     2D 00 64 FD | 	ret
16db8                 | 
16db8                 | ' 
16db8                 | ' sub do_setpan
16db8                 | _do_setpan
16db8     02 4A 05 F6 | 	mov	COUNT_, #2
16dbc     A8 00 A0 FD | 	call	#pushregs_
16dc0     18 F0 07 F1 | 	add	ptra, #24
16dc4     DC 36 BF FD | 	call	#_pop
16dc8     FD 12 02 F6 | 	mov	arg01, result1
16dcc     FE 1E 02 F6 | 	mov	local01, result2
16dd0     FF 20 02 F6 | 	mov	local02, result3
16dd4     A7 12 62 FC | 	wrlong	arg01, fp
16dd8     04 4E 05 F1 | 	add	fp, #4
16ddc     A7 1E 62 FC | 	wrlong	local01, fp
16de0     04 4E 05 F1 | 	add	fp, #4
16de4     A7 20 62 FC | 	wrlong	local02, fp
16de8     08 4E 85 F1 | 	sub	fp, #8
16dec     B4 36 BF FD | 	call	#_pop
16df0     FD 20 02 F6 | 	mov	local02, result1
16df4     0C 4E 05 F1 | 	add	fp, #12
16df8     A7 20 62 FC | 	wrlong	local02, fp
16dfc     04 4E 05 F1 | 	add	fp, #4
16e00     A7 FC 61 FC | 	wrlong	result2, fp
16e04     04 4E 05 F1 | 	add	fp, #4
16e08     A7 FE 61 FC | 	wrlong	result3, fp
16e0c     08 4E 85 F1 | 	sub	fp, #8
16e10     A7 12 02 F6 | 	mov	arg01, fp
16e14     0C 4E 85 F1 | 	sub	fp, #12
16e18     54 C1 BF FD | 	call	#_converttoint
16e1c     FD 20 02 F6 | 	mov	local02, result1
16e20     10 1F 02 F6 | 	mov	local01, local02
16e24     01 1E 66 F0 | 	shl	local01, #1
16e28     10 1F 02 F1 | 	add	local01, local02
16e2c     03 1E 66 F0 | 	shl	local01, #3
16e30     34 00 00 FF 
16e34     38 E5 05 F1 | 	add	objptr, ##26936
16e38     F2 1E 02 F1 | 	add	local01, objptr
16e3c     A7 12 02 F6 | 	mov	arg01, fp
16e40     34 00 00 FF 
16e44     38 E5 85 F1 | 	sub	objptr, ##26936
16e48     D0 C1 BF FD | 	call	#_converttofloat
16e4c     10 1E 06 F1 | 	add	local01, #16
16e50     0F FB 61 FC | 	wrlong	result1, local01
16e54     A7 F0 03 F6 | 	mov	ptra, fp
16e58     B2 00 A0 FD | 	call	#popregs_
16e5c                 | _do_setpan_ret
16e5c     2D 00 64 FD | 	ret
16e60                 | 
16e60                 | ' 
16e60                 | ' 
16e60                 | ' sub do_pinwrite
16e60                 | _do_pinwrite
16e60     01 4A 05 F6 | 	mov	COUNT_, #1
16e64     A8 00 A0 FD | 	call	#pushregs_
16e68     18 F0 07 F1 | 	add	ptra, #24
16e6c     34 36 BF FD | 	call	#_pop
16e70     FD 14 02 F6 | 	mov	arg02, result1
16e74     FE 12 02 F6 | 	mov	arg01, result2
16e78     FF 1E 02 F6 | 	mov	local01, result3
16e7c     A7 14 62 FC | 	wrlong	arg02, fp
16e80     04 4E 05 F1 | 	add	fp, #4
16e84     A7 12 62 FC | 	wrlong	arg01, fp
16e88     04 4E 05 F1 | 	add	fp, #4
16e8c     A7 1E 62 FC | 	wrlong	local01, fp
16e90     08 4E 85 F1 | 	sub	fp, #8
16e94     0C 36 BF FD | 	call	#_pop
16e98     FF 1E 02 F6 | 	mov	local01, result3
16e9c     0C 4E 05 F1 | 	add	fp, #12
16ea0     A7 FA 61 FC | 	wrlong	result1, fp
16ea4     04 4E 05 F1 | 	add	fp, #4
16ea8     A7 FC 61 FC | 	wrlong	result2, fp
16eac     04 4E 05 F1 | 	add	fp, #4
16eb0     A7 1E 62 FC | 	wrlong	local01, fp
16eb4     08 4E 85 F1 | 	sub	fp, #8
16eb8     A7 12 02 F6 | 	mov	arg01, fp
16ebc     0C 4E 85 F1 | 	sub	fp, #12
16ec0     AC C0 BF FD | 	call	#_converttoint
16ec4     FD 1E 02 F6 | 	mov	local01, result1
16ec8     A7 12 02 F6 | 	mov	arg01, fp
16ecc     A0 C0 BF FD | 	call	#_converttoint
16ed0     FD 14 02 F6 | 	mov	arg02, result1
16ed4     0F 13 02 F6 | 	mov	arg01, local01
16ed8     10 78 B0 FD | 	call	#__system___pinwrite
16edc     A7 F0 03 F6 | 	mov	ptra, fp
16ee0     B2 00 A0 FD | 	call	#popregs_
16ee4                 | _do_pinwrite_ret
16ee4     2D 00 64 FD | 	ret
16ee8                 | 
16ee8                 | ' 
16ee8                 | ' sub do_pinfloat
16ee8                 | _do_pinfloat
16ee8     00 4A 05 F6 | 	mov	COUNT_, #0
16eec     A8 00 A0 FD | 	call	#pushregs_
16ef0     0C F0 07 F1 | 	add	ptra, #12
16ef4     AC 35 BF FD | 	call	#_pop
16ef8     A7 FA 61 FC | 	wrlong	result1, fp
16efc     04 4E 05 F1 | 	add	fp, #4
16f00     A7 FC 61 FC | 	wrlong	result2, fp
16f04     04 4E 05 F1 | 	add	fp, #4
16f08     A7 FE 61 FC | 	wrlong	result3, fp
16f0c     08 4E 85 F1 | 	sub	fp, #8
16f10     A7 12 02 F6 | 	mov	arg01, fp
16f14     58 C0 BF FD | 	call	#_converttoint
16f18     50 FA 61 FD | 	fltl	result1
16f1c     A7 F0 03 F6 | 	mov	ptra, fp
16f20     B2 00 A0 FD | 	call	#popregs_
16f24                 | _do_pinfloat_ret
16f24     2D 00 64 FD | 	ret
16f28                 | 
16f28                 | ' 
16f28                 | ' sub do_pinlo
16f28                 | _do_pinlo
16f28     00 4A 05 F6 | 	mov	COUNT_, #0
16f2c     A8 00 A0 FD | 	call	#pushregs_
16f30     0C F0 07 F1 | 	add	ptra, #12
16f34     6C 35 BF FD | 	call	#_pop
16f38     A7 FA 61 FC | 	wrlong	result1, fp
16f3c     04 4E 05 F1 | 	add	fp, #4
16f40     A7 FC 61 FC | 	wrlong	result2, fp
16f44     04 4E 05 F1 | 	add	fp, #4
16f48     A7 FE 61 FC | 	wrlong	result3, fp
16f4c     08 4E 85 F1 | 	sub	fp, #8
16f50     A7 12 02 F6 | 	mov	arg01, fp
16f54     18 C0 BF FD | 	call	#_converttoint
16f58     58 FA 61 FD | 	drvl	result1
16f5c     A7 F0 03 F6 | 	mov	ptra, fp
16f60     B2 00 A0 FD | 	call	#popregs_
16f64                 | _do_pinlo_ret
16f64     2D 00 64 FD | 	ret
16f68                 | 
16f68                 | ' 
16f68                 | ' sub do_pinhi
16f68                 | _do_pinhi
16f68     00 4A 05 F6 | 	mov	COUNT_, #0
16f6c     A8 00 A0 FD | 	call	#pushregs_
16f70     0C F0 07 F1 | 	add	ptra, #12
16f74     2C 35 BF FD | 	call	#_pop
16f78     A7 FA 61 FC | 	wrlong	result1, fp
16f7c     04 4E 05 F1 | 	add	fp, #4
16f80     A7 FC 61 FC | 	wrlong	result2, fp
16f84     04 4E 05 F1 | 	add	fp, #4
16f88     A7 FE 61 FC | 	wrlong	result3, fp
16f8c     08 4E 85 F1 | 	sub	fp, #8
16f90     A7 12 02 F6 | 	mov	arg01, fp
16f94     D8 BF BF FD | 	call	#_converttoint
16f98     59 FA 61 FD | 	drvh	result1
16f9c     A7 F0 03 F6 | 	mov	ptra, fp
16fa0     B2 00 A0 FD | 	call	#popregs_
16fa4                 | _do_pinhi_ret
16fa4     2D 00 64 FD | 	ret
16fa8                 | 
16fa8                 | ' 
16fa8                 | ' sub do_pintoggle
16fa8                 | _do_pintoggle
16fa8     00 4A 05 F6 | 	mov	COUNT_, #0
16fac     A8 00 A0 FD | 	call	#pushregs_
16fb0     0C F0 07 F1 | 	add	ptra, #12
16fb4     EC 34 BF FD | 	call	#_pop
16fb8     A7 FA 61 FC | 	wrlong	result1, fp
16fbc     04 4E 05 F1 | 	add	fp, #4
16fc0     A7 FC 61 FC | 	wrlong	result2, fp
16fc4     04 4E 05 F1 | 	add	fp, #4
16fc8     A7 FE 61 FC | 	wrlong	result3, fp
16fcc     08 4E 85 F1 | 	sub	fp, #8
16fd0     A7 12 02 F6 | 	mov	arg01, fp
16fd4     98 BF BF FD | 	call	#_converttoint
16fd8     5F FA 61 FD | 	drvnot	result1
16fdc     A7 F0 03 F6 | 	mov	ptra, fp
16fe0     B2 00 A0 FD | 	call	#popregs_
16fe4                 | _do_pintoggle_ret
16fe4     2D 00 64 FD | 	ret
16fe8                 | 
16fe8                 | ' 
16fe8                 | ' 
16fe8                 | ' sub do_pinstart
16fe8                 | _do_pinstart
16fe8     03 4A 05 F6 | 	mov	COUNT_, #3
16fec     A8 00 A0 FD | 	call	#pushregs_
16ff0     30 F0 07 F1 | 	add	ptra, #48
16ff4     AC 34 BF FD | 	call	#_pop
16ff8     FD 16 02 F6 | 	mov	arg03, result1
16ffc     FE 14 02 F6 | 	mov	arg02, result2
17000     FF 18 02 F6 | 	mov	arg04, result3
17004     A7 16 62 FC | 	wrlong	arg03, fp
17008     04 4E 05 F1 | 	add	fp, #4
1700c     A7 14 62 FC | 	wrlong	arg02, fp
17010     04 4E 05 F1 | 	add	fp, #4
17014     A7 18 62 FC | 	wrlong	arg04, fp
17018     08 4E 85 F1 | 	sub	fp, #8
1701c     84 34 BF FD | 	call	#_pop
17020     FD 16 02 F6 | 	mov	arg03, result1
17024     FE 14 02 F6 | 	mov	arg02, result2
17028     FF 18 02 F6 | 	mov	arg04, result3
1702c     0C 4E 05 F1 | 	add	fp, #12
17030     A7 16 62 FC | 	wrlong	arg03, fp
17034     04 4E 05 F1 | 	add	fp, #4
17038     A7 14 62 FC | 	wrlong	arg02, fp
1703c     04 4E 05 F1 | 	add	fp, #4
17040     A7 18 62 FC | 	wrlong	arg04, fp
17044     14 4E 85 F1 | 	sub	fp, #20
17048     58 34 BF FD | 	call	#_pop
1704c     FD 16 02 F6 | 	mov	arg03, result1
17050     FE 14 02 F6 | 	mov	arg02, result2
17054     FF 18 02 F6 | 	mov	arg04, result3
17058     18 4E 05 F1 | 	add	fp, #24
1705c     A7 16 62 FC | 	wrlong	arg03, fp
17060     04 4E 05 F1 | 	add	fp, #4
17064     A7 14 62 FC | 	wrlong	arg02, fp
17068     04 4E 05 F1 | 	add	fp, #4
1706c     A7 18 62 FC | 	wrlong	arg04, fp
17070     20 4E 85 F1 | 	sub	fp, #32
17074     2C 34 BF FD | 	call	#_pop
17078     FF 16 02 F6 | 	mov	arg03, result3
1707c     24 4E 05 F1 | 	add	fp, #36
17080     A7 FA 61 FC | 	wrlong	result1, fp
17084     04 4E 05 F1 | 	add	fp, #4
17088     A7 FC 61 FC | 	wrlong	result2, fp
1708c     04 4E 05 F1 | 	add	fp, #4
17090     A7 16 62 FC | 	wrlong	arg03, fp
17094     08 4E 85 F1 | 	sub	fp, #8
17098     A7 12 02 F6 | 	mov	arg01, fp
1709c     24 4E 85 F1 | 	sub	fp, #36
170a0     CC BE BF FD | 	call	#_converttoint
170a4     FD 1E 02 F6 | 	mov	local01, result1
170a8     18 4E 05 F1 | 	add	fp, #24
170ac     A7 12 02 F6 | 	mov	arg01, fp
170b0     18 4E 85 F1 | 	sub	fp, #24
170b4     B8 BE BF FD | 	call	#_converttoint
170b8     FD 20 02 F6 | 	mov	local02, result1
170bc     0C 4E 05 F1 | 	add	fp, #12
170c0     A7 12 02 F6 | 	mov	arg01, fp
170c4     0C 4E 85 F1 | 	sub	fp, #12
170c8     A4 BE BF FD | 	call	#_converttoint
170cc     FD 22 02 F6 | 	mov	local03, result1
170d0     A7 12 02 F6 | 	mov	arg01, fp
170d4     98 BE BF FD | 	call	#_converttoint
170d8     40 1E 62 FD | 	dirl	local01
170dc     0F 21 02 FC | 	wrpin	local02, local01
170e0     0F 23 12 FC | 	wxpin	local03, local01
170e4     0F FB 21 FC | 	wypin	result1, local01
170e8     41 1E 62 FD | 	dirh	local01
170ec     A7 F0 03 F6 | 	mov	ptra, fp
170f0     B2 00 A0 FD | 	call	#popregs_
170f4                 | _do_pinstart_ret
170f4     2D 00 64 FD | 	ret
170f8                 | 
170f8                 | ' 
170f8                 | ' 
170f8                 | ' sub do_wrpin
170f8                 | _do_wrpin
170f8     01 4A 05 F6 | 	mov	COUNT_, #1
170fc     A8 00 A0 FD | 	call	#pushregs_
17100     18 F0 07 F1 | 	add	ptra, #24
17104     9C 33 BF FD | 	call	#_pop
17108     FD 14 02 F6 | 	mov	arg02, result1
1710c     FE 12 02 F6 | 	mov	arg01, result2
17110     FF 1E 02 F6 | 	mov	local01, result3
17114     A7 14 62 FC | 	wrlong	arg02, fp
17118     04 4E 05 F1 | 	add	fp, #4
1711c     A7 12 62 FC | 	wrlong	arg01, fp
17120     04 4E 05 F1 | 	add	fp, #4
17124     A7 1E 62 FC | 	wrlong	local01, fp
17128     08 4E 85 F1 | 	sub	fp, #8
1712c     74 33 BF FD | 	call	#_pop
17130     FF 1E 02 F6 | 	mov	local01, result3
17134     0C 4E 05 F1 | 	add	fp, #12
17138     A7 FA 61 FC | 	wrlong	result1, fp
1713c     04 4E 05 F1 | 	add	fp, #4
17140     A7 FC 61 FC | 	wrlong	result2, fp
17144     04 4E 05 F1 | 	add	fp, #4
17148     A7 1E 62 FC | 	wrlong	local01, fp
1714c     08 4E 85 F1 | 	sub	fp, #8
17150     A7 12 02 F6 | 	mov	arg01, fp
17154     0C 4E 85 F1 | 	sub	fp, #12
17158     14 BE BF FD | 	call	#_converttoint
1715c     FD 1E 02 F6 | 	mov	local01, result1
17160     A7 12 02 F6 | 	mov	arg01, fp
17164     08 BE BF FD | 	call	#_converttoint
17168     0F FB 01 FC | 	wrpin	result1, local01
1716c     A7 F0 03 F6 | 	mov	ptra, fp
17170     B2 00 A0 FD | 	call	#popregs_
17174                 | _do_wrpin_ret
17174     2D 00 64 FD | 	ret
17178                 | 
17178                 | ' 
17178                 | ' sub do_wxpin
17178                 | _do_wxpin
17178     01 4A 05 F6 | 	mov	COUNT_, #1
1717c     A8 00 A0 FD | 	call	#pushregs_
17180     18 F0 07 F1 | 	add	ptra, #24
17184     1C 33 BF FD | 	call	#_pop
17188     FD 14 02 F6 | 	mov	arg02, result1
1718c     FE 12 02 F6 | 	mov	arg01, result2
17190     FF 1E 02 F6 | 	mov	local01, result3
17194     A7 14 62 FC | 	wrlong	arg02, fp
17198     04 4E 05 F1 | 	add	fp, #4
1719c     A7 12 62 FC | 	wrlong	arg01, fp
171a0     04 4E 05 F1 | 	add	fp, #4
171a4     A7 1E 62 FC | 	wrlong	local01, fp
171a8     08 4E 85 F1 | 	sub	fp, #8
171ac     F4 32 BF FD | 	call	#_pop
171b0     FF 1E 02 F6 | 	mov	local01, result3
171b4     0C 4E 05 F1 | 	add	fp, #12
171b8     A7 FA 61 FC | 	wrlong	result1, fp
171bc     04 4E 05 F1 | 	add	fp, #4
171c0     A7 FC 61 FC | 	wrlong	result2, fp
171c4     04 4E 05 F1 | 	add	fp, #4
171c8     A7 1E 62 FC | 	wrlong	local01, fp
171cc     08 4E 85 F1 | 	sub	fp, #8
171d0     A7 12 02 F6 | 	mov	arg01, fp
171d4     0C 4E 85 F1 | 	sub	fp, #12
171d8     94 BD BF FD | 	call	#_converttoint
171dc     FD 1E 02 F6 | 	mov	local01, result1
171e0     A7 12 02 F6 | 	mov	arg01, fp
171e4     88 BD BF FD | 	call	#_converttoint
171e8     0F FB 11 FC | 	wxpin	result1, local01
171ec     A7 F0 03 F6 | 	mov	ptra, fp
171f0     B2 00 A0 FD | 	call	#popregs_
171f4                 | _do_wxpin_ret
171f4     2D 00 64 FD | 	ret
171f8                 | 
171f8                 | ' 
171f8                 | ' sub do_wypin
171f8                 | _do_wypin
171f8     01 4A 05 F6 | 	mov	COUNT_, #1
171fc     A8 00 A0 FD | 	call	#pushregs_
17200     18 F0 07 F1 | 	add	ptra, #24
17204     9C 32 BF FD | 	call	#_pop
17208     FD 14 02 F6 | 	mov	arg02, result1
1720c     FE 12 02 F6 | 	mov	arg01, result2
17210     FF 1E 02 F6 | 	mov	local01, result3
17214     A7 14 62 FC | 	wrlong	arg02, fp
17218     04 4E 05 F1 | 	add	fp, #4
1721c     A7 12 62 FC | 	wrlong	arg01, fp
17220     04 4E 05 F1 | 	add	fp, #4
17224     A7 1E 62 FC | 	wrlong	local01, fp
17228     08 4E 85 F1 | 	sub	fp, #8
1722c     74 32 BF FD | 	call	#_pop
17230     FF 1E 02 F6 | 	mov	local01, result3
17234     0C 4E 05 F1 | 	add	fp, #12
17238     A7 FA 61 FC | 	wrlong	result1, fp
1723c     04 4E 05 F1 | 	add	fp, #4
17240     A7 FC 61 FC | 	wrlong	result2, fp
17244     04 4E 05 F1 | 	add	fp, #4
17248     A7 1E 62 FC | 	wrlong	local01, fp
1724c     08 4E 85 F1 | 	sub	fp, #8
17250     A7 12 02 F6 | 	mov	arg01, fp
17254     0C 4E 85 F1 | 	sub	fp, #12
17258     14 BD BF FD | 	call	#_converttoint
1725c     FD 1E 02 F6 | 	mov	local01, result1
17260     A7 12 02 F6 | 	mov	arg01, fp
17264     08 BD BF FD | 	call	#_converttoint
17268     0F FB 21 FC | 	wypin	result1, local01
1726c     A7 F0 03 F6 | 	mov	ptra, fp
17270     B2 00 A0 FD | 	call	#popregs_
17274                 | _do_wypin_ret
17274     2D 00 64 FD | 	ret
17278                 | 
17278                 | ' 
17278                 | ' sub do_position
17278                 | _do_position
17278     01 4A 05 F6 | 	mov	COUNT_, #1
1727c     A8 00 A0 FD | 	call	#pushregs_
17280     18 F0 07 F1 | 	add	ptra, #24
17284     1C 32 BF FD | 	call	#_pop
17288     FD 14 02 F6 | 	mov	arg02, result1
1728c     FE 12 02 F6 | 	mov	arg01, result2
17290     FF 1E 02 F6 | 	mov	local01, result3
17294     A7 14 62 FC | 	wrlong	arg02, fp
17298     04 4E 05 F1 | 	add	fp, #4
1729c     A7 12 62 FC | 	wrlong	arg01, fp
172a0     04 4E 05 F1 | 	add	fp, #4
172a4     A7 1E 62 FC | 	wrlong	local01, fp
172a8     08 4E 85 F1 | 	sub	fp, #8
172ac     F4 31 BF FD | 	call	#_pop
172b0     FF 1E 02 F6 | 	mov	local01, result3
172b4     0C 4E 05 F1 | 	add	fp, #12
172b8     A7 FA 61 FC | 	wrlong	result1, fp
172bc     04 4E 05 F1 | 	add	fp, #4
172c0     A7 FC 61 FC | 	wrlong	result2, fp
172c4     04 4E 05 F1 | 	add	fp, #4
172c8     A7 1E 62 FC | 	wrlong	local01, fp
172cc     08 4E 85 F1 | 	sub	fp, #8
172d0     A7 12 02 F6 | 	mov	arg01, fp
172d4     0C 4E 85 F1 | 	sub	fp, #12
172d8     94 BC BF FD | 	call	#_converttoint
172dc     FD 1E 02 F6 | 	mov	local01, result1
172e0     A7 12 02 F6 | 	mov	arg01, fp
172e4     88 BC BF FD | 	call	#_converttoint
172e8     FD 14 02 F6 | 	mov	arg02, result1
172ec     0F 13 02 F6 | 	mov	arg01, local01
172f0     A8 5A B0 FD | 	call	#_hg010b_spin2_setcursorpos
172f4     A7 F0 03 F6 | 	mov	ptra, fp
172f8     B2 00 A0 FD | 	call	#popregs_
172fc                 | _do_position_ret
172fc     2D 00 64 FD | 	ret
17300                 | 
17300                 | ' 
17300                 | ' sub do_poke
17300                 | _do_poke
17300     01 4A 05 F6 | 	mov	COUNT_, #1
17304     A8 00 A0 FD | 	call	#pushregs_
17308     20 F0 07 F1 | 	add	ptra, #32
1730c     94 31 BF FD | 	call	#_pop
17310     FD 14 02 F6 | 	mov	arg02, result1
17314     FE 12 02 F6 | 	mov	arg01, result2
17318     FF 1E 02 F6 | 	mov	local01, result3
1731c     A7 14 62 FC | 	wrlong	arg02, fp
17320     04 4E 05 F1 | 	add	fp, #4
17324     A7 12 62 FC | 	wrlong	arg01, fp
17328     04 4E 05 F1 | 	add	fp, #4
1732c     A7 1E 62 FC | 	wrlong	local01, fp
17330     08 4E 85 F1 | 	sub	fp, #8
17334     6C 31 BF FD | 	call	#_pop
17338     FF 1E 02 F6 | 	mov	local01, result3
1733c     0C 4E 05 F1 | 	add	fp, #12
17340     A7 FA 61 FC | 	wrlong	result1, fp
17344     04 4E 05 F1 | 	add	fp, #4
17348     A7 FC 61 FC | 	wrlong	result2, fp
1734c     04 4E 05 F1 | 	add	fp, #4
17350     A7 1E 62 FC | 	wrlong	local01, fp
17354     08 4E 85 F1 | 	sub	fp, #8
17358     A7 12 02 F6 | 	mov	arg01, fp
1735c     0C 4E 85 F1 | 	sub	fp, #12
17360     0C BC BF FD | 	call	#_converttoint
17364     18 4E 05 F1 | 	add	fp, #24
17368     A7 FA 61 FC | 	wrlong	result1, fp
1736c     18 4E 85 F1 | 	sub	fp, #24
17370     A7 12 02 F6 | 	mov	arg01, fp
17374     F8 BB BF FD | 	call	#_converttoint
17378     1C 4E 05 F1 | 	add	fp, #28
1737c     A7 FA 61 FC | 	wrlong	result1, fp
17380                 | ' t1=pop() 'value
17380                 | ' t2=pop() 
17380                 | ' a=converttoint(t2) : v=converttoint(t1)
17380                 | ' if a<$80000 then poke a,v else pspoke a,v
17380     04 4E 85 F1 | 	sub	fp, #4
17384     A7 1E 02 FB | 	rdlong	local01, fp
17388     18 4E 85 F1 | 	sub	fp, #24
1738c     00 04 00 FF 
17390     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17394     1C 00 90 3D |  if_ae	jmp	#LR__1850
17398     18 4E 05 F1 | 	add	fp, #24
1739c     A7 12 02 FB | 	rdlong	arg01, fp
173a0     04 4E 05 F1 | 	add	fp, #4
173a4     A7 14 02 FB | 	rdlong	arg02, fp
173a8     1C 4E 85 F1 | 	sub	fp, #28
173ac     09 15 42 FC | 	wrbyte	arg02, arg01
173b0     18 00 90 FD | 	jmp	#LR__1851
173b4                 | LR__1850
173b4     18 4E 05 F1 | 	add	fp, #24
173b8     A7 12 02 FB | 	rdlong	arg01, fp
173bc     04 4E 05 F1 | 	add	fp, #4
173c0     A7 14 02 FB | 	rdlong	arg02, fp
173c4     1C 4E 85 F1 | 	sub	fp, #28
173c8     00 2F B0 FD | 	call	#_pspoke
173cc                 | LR__1851
173cc     A7 F0 03 F6 | 	mov	ptra, fp
173d0     B2 00 A0 FD | 	call	#popregs_
173d4                 | _do_poke_ret
173d4     2D 00 64 FD | 	ret
173d8                 | 
173d8                 | ' 
173d8                 | ' sub do_dpoke
173d8                 | _do_dpoke
173d8     01 4A 05 F6 | 	mov	COUNT_, #1
173dc     A8 00 A0 FD | 	call	#pushregs_
173e0     20 F0 07 F1 | 	add	ptra, #32
173e4     BC 30 BF FD | 	call	#_pop
173e8     FD 14 02 F6 | 	mov	arg02, result1
173ec     FE 12 02 F6 | 	mov	arg01, result2
173f0     FF 1E 02 F6 | 	mov	local01, result3
173f4     A7 14 62 FC | 	wrlong	arg02, fp
173f8     04 4E 05 F1 | 	add	fp, #4
173fc     A7 12 62 FC | 	wrlong	arg01, fp
17400     04 4E 05 F1 | 	add	fp, #4
17404     A7 1E 62 FC | 	wrlong	local01, fp
17408     08 4E 85 F1 | 	sub	fp, #8
1740c     94 30 BF FD | 	call	#_pop
17410     FF 1E 02 F6 | 	mov	local01, result3
17414     0C 4E 05 F1 | 	add	fp, #12
17418     A7 FA 61 FC | 	wrlong	result1, fp
1741c     04 4E 05 F1 | 	add	fp, #4
17420     A7 FC 61 FC | 	wrlong	result2, fp
17424     04 4E 05 F1 | 	add	fp, #4
17428     A7 1E 62 FC | 	wrlong	local01, fp
1742c     08 4E 85 F1 | 	sub	fp, #8
17430     A7 12 02 F6 | 	mov	arg01, fp
17434     0C 4E 85 F1 | 	sub	fp, #12
17438     34 BB BF FD | 	call	#_converttoint
1743c     18 4E 05 F1 | 	add	fp, #24
17440     A7 FA 61 FC | 	wrlong	result1, fp
17444     18 4E 85 F1 | 	sub	fp, #24
17448     A7 12 02 F6 | 	mov	arg01, fp
1744c     20 BB BF FD | 	call	#_converttoint
17450     1C 4E 05 F1 | 	add	fp, #28
17454     A7 FA 61 FC | 	wrlong	result1, fp
17458                 | ' t1=pop() 'value
17458                 | ' t2=pop() 
17458                 | ' a=converttoint(t2) : v=converttoint(t1)
17458                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
17458     04 4E 85 F1 | 	sub	fp, #4
1745c     A7 1E 02 FB | 	rdlong	local01, fp
17460     18 4E 85 F1 | 	sub	fp, #24
17464     00 04 00 FF 
17468     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1746c     1C 00 90 3D |  if_ae	jmp	#LR__1860
17470     18 4E 05 F1 | 	add	fp, #24
17474     A7 12 02 FB | 	rdlong	arg01, fp
17478     04 4E 05 F1 | 	add	fp, #4
1747c     A7 14 02 FB | 	rdlong	arg02, fp
17480     1C 4E 85 F1 | 	sub	fp, #28
17484     09 15 52 FC | 	wrword	arg02, arg01
17488     18 00 90 FD | 	jmp	#LR__1861
1748c                 | LR__1860
1748c     18 4E 05 F1 | 	add	fp, #24
17490     A7 12 02 FB | 	rdlong	arg01, fp
17494     04 4E 05 F1 | 	add	fp, #4
17498     A7 14 02 FB | 	rdlong	arg02, fp
1749c     1C 4E 85 F1 | 	sub	fp, #28
174a0     E0 2D B0 FD | 	call	#_psdpoke
174a4                 | LR__1861
174a4     A7 F0 03 F6 | 	mov	ptra, fp
174a8     B2 00 A0 FD | 	call	#popregs_
174ac                 | _do_dpoke_ret
174ac     2D 00 64 FD | 	ret
174b0                 | 
174b0                 | ' 
174b0                 | ' sub do_lpoke
174b0                 | _do_lpoke
174b0     01 4A 05 F6 | 	mov	COUNT_, #1
174b4     A8 00 A0 FD | 	call	#pushregs_
174b8     20 F0 07 F1 | 	add	ptra, #32
174bc     E4 2F BF FD | 	call	#_pop
174c0     FD 14 02 F6 | 	mov	arg02, result1
174c4     FE 12 02 F6 | 	mov	arg01, result2
174c8     FF 1E 02 F6 | 	mov	local01, result3
174cc     A7 14 62 FC | 	wrlong	arg02, fp
174d0     04 4E 05 F1 | 	add	fp, #4
174d4     A7 12 62 FC | 	wrlong	arg01, fp
174d8     04 4E 05 F1 | 	add	fp, #4
174dc     A7 1E 62 FC | 	wrlong	local01, fp
174e0     08 4E 85 F1 | 	sub	fp, #8
174e4     BC 2F BF FD | 	call	#_pop
174e8     FF 1E 02 F6 | 	mov	local01, result3
174ec     0C 4E 05 F1 | 	add	fp, #12
174f0     A7 FA 61 FC | 	wrlong	result1, fp
174f4     04 4E 05 F1 | 	add	fp, #4
174f8     A7 FC 61 FC | 	wrlong	result2, fp
174fc     04 4E 05 F1 | 	add	fp, #4
17500     A7 1E 62 FC | 	wrlong	local01, fp
17504     08 4E 85 F1 | 	sub	fp, #8
17508     A7 12 02 F6 | 	mov	arg01, fp
1750c     0C 4E 85 F1 | 	sub	fp, #12
17510     5C BA BF FD | 	call	#_converttoint
17514     18 4E 05 F1 | 	add	fp, #24
17518     A7 FA 61 FC | 	wrlong	result1, fp
1751c     18 4E 85 F1 | 	sub	fp, #24
17520     A7 12 02 F6 | 	mov	arg01, fp
17524     48 BA BF FD | 	call	#_converttoint
17528     1C 4E 05 F1 | 	add	fp, #28
1752c     A7 FA 61 FC | 	wrlong	result1, fp
17530                 | ' t1=pop() 'value
17530                 | ' t2=pop() 
17530                 | ' a=converttoint(t2) : v=converttoint(t1)
17530                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
17530     04 4E 85 F1 | 	sub	fp, #4
17534     A7 1E 02 FB | 	rdlong	local01, fp
17538     18 4E 85 F1 | 	sub	fp, #24
1753c     00 04 00 FF 
17540     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17544     1C 00 90 3D |  if_ae	jmp	#LR__1870
17548     18 4E 05 F1 | 	add	fp, #24
1754c     A7 12 02 FB | 	rdlong	arg01, fp
17550     04 4E 05 F1 | 	add	fp, #4
17554     A7 14 02 FB | 	rdlong	arg02, fp
17558     1C 4E 85 F1 | 	sub	fp, #28
1755c     09 15 62 FC | 	wrlong	arg02, arg01
17560     18 00 90 FD | 	jmp	#LR__1871
17564                 | LR__1870
17564     18 4E 05 F1 | 	add	fp, #24
17568     A7 12 02 FB | 	rdlong	arg01, fp
1756c     04 4E 05 F1 | 	add	fp, #4
17570     A7 14 02 FB | 	rdlong	arg02, fp
17574     1C 4E 85 F1 | 	sub	fp, #28
17578     C0 2C B0 FD | 	call	#_pslpoke
1757c                 | LR__1871
1757c     A7 F0 03 F6 | 	mov	ptra, fp
17580     B2 00 A0 FD | 	call	#popregs_
17584                 | _do_lpoke_ret
17584     2D 00 64 FD | 	ret
17588                 | 
17588                 | ' 
17588                 | ' sub do_peek
17588                 | _do_peek
17588     00 4A 05 F6 | 	mov	COUNT_, #0
1758c     A8 00 A0 FD | 	call	#pushregs_
17590     14 F0 07 F1 | 	add	ptra, #20
17594     0C 2F BF FD | 	call	#_pop
17598     A7 FA 61 FC | 	wrlong	result1, fp
1759c     04 4E 05 F1 | 	add	fp, #4
175a0     A7 FC 61 FC | 	wrlong	result2, fp
175a4     04 4E 05 F1 | 	add	fp, #4
175a8     A7 FE 61 FC | 	wrlong	result3, fp
175ac     08 4E 85 F1 | 	sub	fp, #8
175b0     A7 12 02 F6 | 	mov	arg01, fp
175b4     B8 B9 BF FD | 	call	#_converttoint
175b8     0C 4E 05 F1 | 	add	fp, #12
175bc     A7 FA 61 FC | 	wrlong	result1, fp
175c0                 | ' t1=pop()
175c0                 | ' a=converttoint(t1)
175c0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
175c0     0C 4E 85 F1 | 	sub	fp, #12
175c4     00 04 00 FF 
175c8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
175cc     1C 00 90 3D |  if_ae	jmp	#LR__1880
175d0     0C 4E 05 F1 | 	add	fp, #12
175d4     A7 12 02 FB | 	rdlong	arg01, fp
175d8     09 FB C1 FA | 	rdbyte	result1, arg01
175dc     04 4E 05 F1 | 	add	fp, #4
175e0     A7 FA 61 FC | 	wrlong	result1, fp
175e4     10 4E 85 F1 | 	sub	fp, #16
175e8     20 00 90 FD | 	jmp	#LR__1881
175ec                 | LR__1880
175ec     0C 4E 05 F1 | 	add	fp, #12
175f0     A7 12 02 FB | 	rdlong	arg01, fp
175f4     0C 4E 85 F1 | 	sub	fp, #12
175f8     18 2D B0 FD | 	call	#_pspeek
175fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
17600     10 4E 05 F1 | 	add	fp, #16
17604     A7 FA 61 FC | 	wrlong	result1, fp
17608     10 4E 85 F1 | 	sub	fp, #16
1760c                 | LR__1881
1760c     08 4E 05 F1 | 	add	fp, #8
17610     A7 3A 68 FC | 	wrlong	#29, fp
17614     08 4E 05 F1 | 	add	fp, #8
17618     A7 12 02 FB | 	rdlong	arg01, fp
1761c     10 4E 85 F1 | 	sub	fp, #16
17620     A7 12 62 FC | 	wrlong	arg01, fp
17624     A7 12 02 F6 | 	mov	arg01, fp
17628     10 2F BF FD | 	call	#_push
1762c     A7 F0 03 F6 | 	mov	ptra, fp
17630     B2 00 A0 FD | 	call	#popregs_
17634                 | _do_peek_ret
17634     2D 00 64 FD | 	ret
17638                 | 
17638                 | ' 
17638                 | ' sub do_dpeek
17638                 | _do_dpeek
17638     00 4A 05 F6 | 	mov	COUNT_, #0
1763c     A8 00 A0 FD | 	call	#pushregs_
17640     14 F0 07 F1 | 	add	ptra, #20
17644     5C 2E BF FD | 	call	#_pop
17648     A7 FA 61 FC | 	wrlong	result1, fp
1764c     04 4E 05 F1 | 	add	fp, #4
17650     A7 FC 61 FC | 	wrlong	result2, fp
17654     04 4E 05 F1 | 	add	fp, #4
17658     A7 FE 61 FC | 	wrlong	result3, fp
1765c     08 4E 85 F1 | 	sub	fp, #8
17660     A7 12 02 F6 | 	mov	arg01, fp
17664     08 B9 BF FD | 	call	#_converttoint
17668     0C 4E 05 F1 | 	add	fp, #12
1766c     A7 FA 61 FC | 	wrlong	result1, fp
17670                 | ' t1=pop()
17670                 | ' a=converttoint(t1)
17670                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
17670     0C 4E 85 F1 | 	sub	fp, #12
17674     00 04 00 FF 
17678     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1767c     1C 00 90 3D |  if_ae	jmp	#LR__1890
17680     0C 4E 05 F1 | 	add	fp, #12
17684     A7 12 02 FB | 	rdlong	arg01, fp
17688     09 FB E1 FA | 	rdword	result1, arg01
1768c     04 4E 05 F1 | 	add	fp, #4
17690     A7 FA 61 FC | 	wrlong	result1, fp
17694     10 4E 85 F1 | 	sub	fp, #16
17698     1C 00 90 FD | 	jmp	#LR__1891
1769c                 | LR__1890
1769c     0C 4E 05 F1 | 	add	fp, #12
176a0     A7 12 02 FB | 	rdlong	arg01, fp
176a4     0C 4E 85 F1 | 	sub	fp, #12
176a8     18 2D B0 FD | 	call	#_psdpeek
176ac     10 4E 05 F1 | 	add	fp, #16
176b0     A7 FA 61 FC | 	wrlong	result1, fp
176b4     10 4E 85 F1 | 	sub	fp, #16
176b8                 | LR__1891
176b8     08 4E 05 F1 | 	add	fp, #8
176bc     A7 3A 68 FC | 	wrlong	#29, fp
176c0     08 4E 05 F1 | 	add	fp, #8
176c4     A7 12 02 FB | 	rdlong	arg01, fp
176c8     10 4E 85 F1 | 	sub	fp, #16
176cc     A7 12 62 FC | 	wrlong	arg01, fp
176d0     A7 12 02 F6 | 	mov	arg01, fp
176d4     64 2E BF FD | 	call	#_push
176d8     A7 F0 03 F6 | 	mov	ptra, fp
176dc     B2 00 A0 FD | 	call	#popregs_
176e0                 | _do_dpeek_ret
176e0     2D 00 64 FD | 	ret
176e4                 | 
176e4                 | ' 
176e4                 | ' 
176e4                 | ' sub do_lpeek
176e4                 | _do_lpeek
176e4     00 4A 05 F6 | 	mov	COUNT_, #0
176e8     A8 00 A0 FD | 	call	#pushregs_
176ec     14 F0 07 F1 | 	add	ptra, #20
176f0     B0 2D BF FD | 	call	#_pop
176f4     A7 FA 61 FC | 	wrlong	result1, fp
176f8     04 4E 05 F1 | 	add	fp, #4
176fc     A7 FC 61 FC | 	wrlong	result2, fp
17700     04 4E 05 F1 | 	add	fp, #4
17704     A7 FE 61 FC | 	wrlong	result3, fp
17708     08 4E 85 F1 | 	sub	fp, #8
1770c     A7 12 02 F6 | 	mov	arg01, fp
17710     5C B8 BF FD | 	call	#_converttoint
17714     0C 4E 05 F1 | 	add	fp, #12
17718     A7 FA 61 FC | 	wrlong	result1, fp
1771c                 | ' t1=pop()
1771c                 | ' a=converttoint(t1)
1771c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1771c     0C 4E 85 F1 | 	sub	fp, #12
17720     00 04 00 FF 
17724     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17728     1C 00 90 3D |  if_ae	jmp	#LR__1900
1772c     0C 4E 05 F1 | 	add	fp, #12
17730     A7 12 02 FB | 	rdlong	arg01, fp
17734     09 FB 01 FB | 	rdlong	result1, arg01
17738     04 4E 05 F1 | 	add	fp, #4
1773c     A7 FA 61 FC | 	wrlong	result1, fp
17740     10 4E 85 F1 | 	sub	fp, #16
17744     1C 00 90 FD | 	jmp	#LR__1901
17748                 | LR__1900
17748     0C 4E 05 F1 | 	add	fp, #12
1774c     A7 12 02 FB | 	rdlong	arg01, fp
17750     0C 4E 85 F1 | 	sub	fp, #12
17754     14 2C B0 FD | 	call	#_pslpeek
17758     10 4E 05 F1 | 	add	fp, #16
1775c     A7 FA 61 FC | 	wrlong	result1, fp
17760     10 4E 85 F1 | 	sub	fp, #16
17764                 | LR__1901
17764     08 4E 05 F1 | 	add	fp, #8
17768     A7 3A 68 FC | 	wrlong	#29, fp
1776c     08 4E 05 F1 | 	add	fp, #8
17770     A7 12 02 FB | 	rdlong	arg01, fp
17774     10 4E 85 F1 | 	sub	fp, #16
17778     A7 12 62 FC | 	wrlong	arg01, fp
1777c     A7 12 02 F6 | 	mov	arg01, fp
17780     B8 2D BF FD | 	call	#_push
17784     A7 F0 03 F6 | 	mov	ptra, fp
17788     B2 00 A0 FD | 	call	#popregs_
1778c                 | _do_lpeek_ret
1778c     2D 00 64 FD | 	ret
17790                 | 
17790                 | ' 
17790                 | ' sub do_fre
17790                 | _do_fre
17790     01 4A 05 F6 | 	mov	COUNT_, #1
17794     A8 00 A0 FD | 	call	#pushregs_
17798     0C F0 07 F1 | 	add	ptra, #12
1779c     7B 00 00 FF 
177a0     68 E4 05 F1 | 	add	objptr, ##63080
177a4     F2 12 02 FB | 	rdlong	arg01, objptr
177a8     18 00 00 FF 
177ac     1C E4 85 F1 | 	sub	objptr, ##12316
177b0     F2 1E 02 FB | 	rdlong	local01, objptr
177b4     0F 13 82 F1 | 	sub	arg01, local01
177b8     18 00 00 FF 
177bc     C4 E4 05 F1 | 	add	objptr, ##12484
177c0     F2 12 62 FC | 	wrlong	arg01, objptr
177c4     08 4E 05 F1 | 	add	fp, #8
177c8     A7 3A 68 FC | 	wrlong	#29, fp
177cc     08 4E 85 F1 | 	sub	fp, #8
177d0     F2 1E 02 FB | 	rdlong	local01, objptr
177d4     7B 00 00 FF 
177d8     10 E5 85 F1 | 	sub	objptr, ##63248
177dc     A7 1E 62 FC | 	wrlong	local01, fp
177e0     A7 12 02 F6 | 	mov	arg01, fp
177e4     54 2D BF FD | 	call	#_push
177e8     A7 F0 03 F6 | 	mov	ptra, fp
177ec     B2 00 A0 FD | 	call	#popregs_
177f0                 | _do_fre_ret
177f0     2D 00 64 FD | 	ret
177f4                 | 
177f4                 | ' 
177f4                 | ' sub do_adr
177f4                 | _do_adr
177f4                 | _do_adr_ret
177f4     2D 00 64 FD | 	ret
177f8                 | 
177f8                 | ' 
177f8                 | ' sub do_getnotevalue
177f8                 | _do_getnotevalue
177f8     01 4A 05 F6 | 	mov	COUNT_, #1
177fc     A8 00 A0 FD | 	call	#pushregs_
17800     1C F0 07 F1 | 	add	ptra, #28
17804     9C 2C BF FD | 	call	#_pop
17808     FF 14 02 F6 | 	mov	arg02, result3
1780c     10 4E 05 F1 | 	add	fp, #16
17810     A7 FA 61 FC | 	wrlong	result1, fp
17814     04 4E 05 F1 | 	add	fp, #4
17818     A7 FC 61 FC | 	wrlong	result2, fp
1781c     04 4E 05 F1 | 	add	fp, #4
17820     A7 14 62 FC | 	wrlong	arg02, fp
17824     08 4E 85 F1 | 	sub	fp, #8
17828     A7 12 02 F6 | 	mov	arg01, fp
1782c     10 4E 85 F1 | 	sub	fp, #16
17830     3C B7 BF FD | 	call	#_converttoint
17834     FD 14 52 F6 | 	abs	arg02, result1 wc
17838     0C 14 16 FD | 	qdiv	arg02, #12
1783c     0C 4E 05 F1 | 	add	fp, #12
17840     A7 FA 61 FC | 	wrlong	result1, fp
17844     34 00 00 FF 
17848     D8 E4 05 F1 | 	add	objptr, ##26840
1784c     08 4E 85 F1 | 	sub	fp, #8
17850     19 14 62 FD | 	getqy	arg02
17854     0A 15 82 F6 | 	negc	arg02, arg02
17858     02 14 66 F0 | 	shl	arg02, #2
1785c     F2 14 02 F1 | 	add	arg02, objptr
17860     0A 15 02 FB | 	rdlong	arg02, arg02
17864     A7 14 62 FC | 	wrlong	arg02, fp
17868     08 4E 05 F1 | 	add	fp, #8
1786c     A7 14 02 FB | 	rdlong	arg02, fp
17870     0A 15 52 F6 | 	abs	arg02, arg02 wc
17874     0C 14 16 FD | 	qdiv	arg02, #12
17878     0C 4E 85 F1 | 	sub	fp, #12
1787c     34 00 00 FF 
17880     D8 E4 85 F1 | 	sub	objptr, ##26840
17884     18 14 62 FD | 	getqx	arg02
17888     0A 13 82 F6 | 	negc	arg01, arg02
1788c     09 13 52 F6 | 	abs	arg01, arg01 wc
17890     1F 1E C6 C9 |  if_b	decod	local01, #31
17894     00 1E 06 36 |  if_ae	mov	local01, #0
17898     14 94 B0 FD | 	call	#__system___float_fromuns
1789c     0F FB 61 F5 | 	xor	result1, local01
178a0     08 4E 05 F1 | 	add	fp, #8
178a4     A7 FA 61 FC | 	wrlong	result1, fp
178a8     FD 14 02 F6 | 	mov	arg02, result1
178ac     08 4E 85 F1 | 	sub	fp, #8
178b0     1E 12 C6 F9 | 	decod	arg01, #30
178b4     E0 A6 B0 FD | 	call	#__system____builtin_powf
178b8     FD 12 02 F6 | 	mov	arg01, result1
178bc     04 4E 05 F1 | 	add	fp, #4
178c0     A7 14 02 FB | 	rdlong	arg02, fp
178c4     04 4E 85 F1 | 	sub	fp, #4
178c8     E8 97 B0 FD | 	call	#__system___float_mul
178cc     A7 FA 61 FC | 	wrlong	result1, fp
178d0     10 4E 05 F1 | 	add	fp, #16
178d4     A7 FA 61 FC | 	wrlong	result1, fp
178d8     08 4E 05 F1 | 	add	fp, #8
178dc     A7 3C 68 FC | 	wrlong	#30, fp
178e0     08 4E 85 F1 | 	sub	fp, #8
178e4     A7 12 02 F6 | 	mov	arg01, fp
178e8     10 4E 85 F1 | 	sub	fp, #16
178ec     4C 2C BF FD | 	call	#_push
178f0     A7 F0 03 F6 | 	mov	ptra, fp
178f4     B2 00 A0 FD | 	call	#popregs_
178f8                 | _do_getnotevalue_ret
178f8     2D 00 64 FD | 	ret
178fc                 | 
178fc                 | ' 
178fc                 | ' 
178fc                 | ' sub do_waitms
178fc                 | _do_waitms
178fc     01 4A 05 F6 | 	mov	COUNT_, #1
17900     A8 00 A0 FD | 	call	#pushregs_
17904     18 F0 07 F1 | 	add	ptra, #24
17908     98 2B BF FD | 	call	#_pop
1790c     A7 FA 61 FC | 	wrlong	result1, fp
17910     04 4E 05 F1 | 	add	fp, #4
17914     A7 FC 61 FC | 	wrlong	result2, fp
17918     04 4E 05 F1 | 	add	fp, #4
1791c     A7 FE 61 FC | 	wrlong	result3, fp
17920                 | ' 
17920                 | ' t1=pop() 'value
17920                 | ' 
17920                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
17920     08 4E 85 F1 | 	sub	fp, #8
17924     1C FE 0D F2 | 	cmp	result3, #28 wz
17928     08 4E 05 51 |  if_ne	add	fp, #8
1792c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17930     08 4E 85 51 |  if_ne	sub	fp, #8
17934     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
17938     A7 12 02 AB |  if_e	rdlong	arg01, fp
1793c     0C 4E 05 A1 |  if_e	add	fp, #12
17940     A7 12 62 AC |  if_e	wrlong	arg01, fp
17944     0C 4E 85 A1 |  if_e	sub	fp, #12
17948     14 00 90 AD |  if_e	jmp	#LR__1910
1794c     A7 12 02 F6 | 	mov	arg01, fp
17950     1C B6 BF FD | 	call	#_converttoint
17954     0C 4E 05 F1 | 	add	fp, #12
17958     A7 FA 61 FC | 	wrlong	result1, fp
1795c     0C 4E 85 F1 | 	sub	fp, #12
17960                 | LR__1910
17960                 | ' if t<0 then return
17960     0C 4E 05 F1 | 	add	fp, #12
17964     A7 12 02 FB | 	rdlong	arg01, fp
17968     0C 4E 85 F1 | 	sub	fp, #12
1796c     00 12 56 F2 | 	cmps	arg01, #0 wc
17970     B8 00 90 CD |  if_b	jmp	#LR__1915
17974                 | ' if t < 5000 then 
17974     0C 4E 05 F1 | 	add	fp, #12
17978     A7 12 02 FB | 	rdlong	arg01, fp
1797c     0C 4E 85 F1 | 	sub	fp, #12
17980     09 00 00 FF 
17984     88 13 56 F2 | 	cmps	arg01, ##5000 wc
17988     14 00 90 3D |  if_ae	jmp	#LR__1911
1798c     0C 4E 05 F1 | 	add	fp, #12
17990     A7 12 02 FB | 	rdlong	arg01, fp
17994     0C 4E 85 F1 | 	sub	fp, #12
17998     90 6E B0 FD | 	call	#__system___waitms
1799c     8C 00 90 FD | 	jmp	#LR__1914
179a0                 | LR__1911
179a0     10 4E 05 F1 | 	add	fp, #16
179a4     A7 02 68 FC | 	wrlong	#1, fp
179a8     04 4E 85 F1 | 	sub	fp, #4
179ac     A7 12 02 FB | 	rdlong	arg01, fp
179b0     09 13 52 F6 | 	abs	arg01, arg01 wc
179b4     09 00 00 FF 
179b8     88 13 16 FD | 	qdiv	arg01, ##5000
179bc                 | '   for i=1 to t/5000
179bc     0C 4E 85 F1 | 	sub	fp, #12
179c0     18 1E 62 FD | 	getqx	local01
179c4     0F 1F 82 F6 | 	negc	local01, local01
179c8     01 1E 06 F1 | 	add	local01, #1
179cc                 | LR__1912
179cc     10 4E 05 F1 | 	add	fp, #16
179d0     A7 12 02 FB | 	rdlong	arg01, fp
179d4     10 4E 85 F1 | 	sub	fp, #16
179d8     0F 13 52 F2 | 	cmps	arg01, local01 wc
179dc     28 00 90 3D |  if_ae	jmp	#LR__1913
179e0     0C 4E 05 F1 | 	add	fp, #12
179e4     A7 12 02 FB | 	rdlong	arg01, fp
179e8     0C 4E 85 F1 | 	sub	fp, #12
179ec     3C 6E B0 FD | 	call	#__system___waitms
179f0     10 4E 05 F1 | 	add	fp, #16
179f4     A7 12 02 FB | 	rdlong	arg01, fp
179f8     01 12 06 F1 | 	add	arg01, #1
179fc     A7 12 62 FC | 	wrlong	arg01, fp
17a00     10 4E 85 F1 | 	sub	fp, #16
17a04     C4 FF 9F FD | 	jmp	#LR__1912
17a08                 | LR__1913
17a08     0C 4E 05 F1 | 	add	fp, #12
17a0c     A7 1E 02 FB | 	rdlong	local01, fp
17a10     0F 1F 52 F6 | 	abs	local01, local01 wc
17a14     09 00 00 FF 
17a18     88 1F 16 FD | 	qdiv	local01, ##5000
17a1c     0C 4E 85 F1 | 	sub	fp, #12
17a20     19 1E 62 FD | 	getqy	local01
17a24     0F 13 82 F6 | 	negc	arg01, local01
17a28     00 6E B0 FD | 	call	#__system___waitms
17a2c                 | LR__1914
17a2c                 | LR__1915
17a2c     A7 F0 03 F6 | 	mov	ptra, fp
17a30     B2 00 A0 FD | 	call	#popregs_
17a34                 | _do_waitms_ret
17a34     2D 00 64 FD | 	ret
17a38                 | 
17a38                 | ' 
17a38                 | ' sub do_waitvbl
17a38                 | _do_waitvbl
17a38     01 12 06 F6 | 	mov	arg01, #1
17a3c     FC 53 B0 FD | 	call	#_hg010b_spin2_waitvbl
17a40                 | _do_waitvbl_ret
17a40     2D 00 64 FD | 	ret
17a44                 | 
17a44                 | ' 
17a44                 | ' sub do_waitclock
17a44                 | _do_waitclock
17a44     7B 00 00 FF 
17a48     64 E4 05 F1 | 	add	objptr, ##63076
17a4c     F2 00 02 FB | 	rdlong	_var01, objptr
17a50                 | ' c=hkcnt
17a50                 | ' do: loop until hkcnt<>c
17a50                 | LR__1920
17a50     F2 02 02 FB | 	rdlong	_var02, objptr
17a54     00 03 0A F2 | 	cmp	_var02, _var01 wz
17a58     F4 FF 9F AD |  if_e	jmp	#LR__1920
17a5c     7B 00 00 FF 
17a60     64 E4 85 F1 | 	sub	objptr, ##63076
17a64                 | _do_waitclock_ret
17a64     2D 00 64 FD | 	ret
17a68                 | 
17a68                 | ' 
17a68                 | ' sub do_dir
17a68                 | _do_dir
17a68     05 4A 05 F6 | 	mov	COUNT_, #5
17a6c     A8 00 A0 FD | 	call	#pushregs_
17a70     71 01 00 FF 
17a74     7C 12 06 F6 | 	mov	arg01, ##@LR__5141
17a78     48 71 B0 FD | 	call	#__system___chdir
17a7c                 | ' chdir("/sd/bas")       ' set working directory
17a7c                 | ' print "Working directory: "; currentdir$ 
17a7c     00 12 06 F6 | 	mov	arg01, #0
17a80     48 C4 B0 FD | 	call	#__system___getiolock_0475
17a84     FD 12 02 F6 | 	mov	arg01, result1
17a88     AC 6A B0 FD | 	call	#__system___lockmem
17a8c     71 01 00 FF 
17a90     84 14 06 F6 | 	mov	arg02, ##@LR__5142
17a94     00 12 06 F6 | 	mov	arg01, #0
17a98     00 16 06 F6 | 	mov	arg03, #0
17a9c     9C 77 B0 FD | 	call	#__system___basic_print_string
17aa0     72 00 00 FF 
17aa4     84 E4 05 F1 | 	add	objptr, ##58500
17aa8     F2 14 02 FB | 	rdlong	arg02, objptr
17aac     72 00 00 FF 
17ab0     84 E4 85 F1 | 	sub	objptr, ##58500
17ab4     00 12 06 F6 | 	mov	arg01, #0
17ab8     00 16 06 F6 | 	mov	arg03, #0
17abc     7C 77 B0 FD | 	call	#__system___basic_print_string
17ac0     00 12 06 F6 | 	mov	arg01, #0
17ac4     0A 14 06 F6 | 	mov	arg02, #10
17ac8     00 16 06 F6 | 	mov	arg03, #0
17acc     14 77 B0 FD | 	call	#__system___basic_print_char
17ad0     00 12 06 F6 | 	mov	arg01, #0
17ad4     F4 C3 B0 FD | 	call	#__system___getiolock_0475
17ad8     FD 00 68 FC | 	wrlong	#0, result1
17adc     00 1E 06 F6 | 	mov	local01, #0
17ae0     71 01 00 FF 
17ae4     98 12 06 F6 | 	mov	arg01, ##@LR__5143
17ae8     10 14 06 F6 | 	mov	arg02, #16
17aec     14 C5 B0 FD | 	call	#__system___basic_dir
17af0     FD 20 02 F6 | 	mov	local02, result1
17af4                 | ' px=0:
17af4                 | ' filename=dir$("*", fbDirectory)
17af4                 | ' while filename <> "" and filename <> nil
17af4                 | LR__1930
17af4     00 22 06 F6 | 	mov	local03, #0
17af8     71 01 00 FF 
17afc     9A 14 06 F6 | 	mov	arg02, ##@LR__5144
17b00     10 13 02 F6 | 	mov	arg01, local02
17b04     58 6A B0 FD | 	call	#__system___string_cmp
17b08     00 FA 0D F2 | 	cmp	result1, #0 wz
17b0c     00 22 26 56 |  if_ne	not	local03, #0
17b10     00 24 06 F6 | 	mov	local04, #0
17b14     10 13 02 F6 | 	mov	arg01, local02
17b18     00 14 06 F6 | 	mov	arg02, #0
17b1c     40 6A B0 FD | 	call	#__system___string_cmp
17b20     00 FA 0D F2 | 	cmp	result1, #0 wz
17b24     00 24 26 56 |  if_ne	not	local04, #0
17b28     12 23 CA F7 | 	test	local03, local04 wz
17b2c     9C 00 90 AD |  if_e	jmp	#LR__1932
17b30                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
17b30     00 12 06 F6 | 	mov	arg01, #0
17b34     94 C3 B0 FD | 	call	#__system___getiolock_0475
17b38     FD 12 02 F6 | 	mov	arg01, result1
17b3c     F8 69 B0 FD | 	call	#__system___lockmem
17b40     71 01 00 FF 
17b44     9B 14 06 F6 | 	mov	arg02, ##@LR__5145
17b48     00 12 06 F6 | 	mov	arg01, #0
17b4c     00 16 06 F6 | 	mov	arg03, #0
17b50     E8 76 B0 FD | 	call	#__system___basic_print_string
17b54     00 26 06 F6 | 	mov	local05, #0
17b58     00 12 06 F6 | 	mov	arg01, #0
17b5c     10 15 02 F6 | 	mov	arg02, local02
17b60     00 16 06 F6 | 	mov	arg03, #0
17b64     D4 76 B0 FD | 	call	#__system___basic_print_string
17b68     00 12 06 F6 | 	mov	arg01, #0
17b6c     5C C3 B0 FD | 	call	#__system___getiolock_0475
17b70     FD 00 68 FC | 	wrlong	#0, result1
17b74     40 1E 06 F1 | 	add	local01, #64
17b78     0F 13 02 F6 | 	mov	arg01, local01
17b7c     58 52 B0 FD | 	call	#_hg010b_spin2_setcursorx
17b80     00 1F 56 F2 | 	cmps	local01, #256 wc
17b84     30 00 90 CD |  if_b	jmp	#LR__1931
17b88     00 1E 06 F6 | 	mov	local01, #0
17b8c     00 12 06 F6 | 	mov	arg01, #0
17b90     38 C3 B0 FD | 	call	#__system___getiolock_0475
17b94     FD 12 02 F6 | 	mov	arg01, result1
17b98     9C 69 B0 FD | 	call	#__system___lockmem
17b9c     00 12 06 F6 | 	mov	arg01, #0
17ba0     0A 14 06 F6 | 	mov	arg02, #10
17ba4     00 16 06 F6 | 	mov	arg03, #0
17ba8     38 76 B0 FD | 	call	#__system___basic_print_char
17bac     00 12 06 F6 | 	mov	arg01, #0
17bb0     18 C3 B0 FD | 	call	#__system___getiolock_0475
17bb4     FD 00 68 FC | 	wrlong	#0, result1
17bb8                 | LR__1931
17bb8     00 12 06 F6 | 	mov	arg01, #0
17bbc     00 14 06 F6 | 	mov	arg02, #0
17bc0     40 C4 B0 FD | 	call	#__system___basic_dir
17bc4     FD 20 02 F6 | 	mov	local02, result1
17bc8     28 FF 9F FD | 	jmp	#LR__1930
17bcc                 | LR__1932
17bcc                 | ' print
17bcc     00 12 06 F6 | 	mov	arg01, #0
17bd0     F8 C2 B0 FD | 	call	#__system___getiolock_0475
17bd4     FD 12 02 F6 | 	mov	arg01, result1
17bd8     5C 69 B0 FD | 	call	#__system___lockmem
17bdc     00 12 06 F6 | 	mov	arg01, #0
17be0     0A 14 06 F6 | 	mov	arg02, #10
17be4     00 16 06 F6 | 	mov	arg03, #0
17be8     F8 75 B0 FD | 	call	#__system___basic_print_char
17bec     00 12 06 F6 | 	mov	arg01, #0
17bf0     D8 C2 B0 FD | 	call	#__system___getiolock_0475
17bf4     FD 00 68 FC | 	wrlong	#0, result1
17bf8     00 1E 06 F6 | 	mov	local01, #0
17bfc                 | ' return cursor_y
17bfc     71 01 00 FF 
17c00     A2 12 06 F6 | 	mov	arg01, ##@LR__5146
17c04     21 14 06 F6 | 	mov	arg02, #33
17c08     F8 C3 B0 FD | 	call	#__system___basic_dir
17c0c     FD 20 02 F6 | 	mov	local02, result1
17c10                 | ' px=0: py=v.getcursory()
17c10                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
17c10                 | ' do while filename <> "" and filename <> nil
17c10                 | LR__1933
17c10     00 22 06 F6 | 	mov	local03, #0
17c14     71 01 00 FF 
17c18     A4 14 06 F6 | 	mov	arg02, ##@LR__5147
17c1c     10 13 02 F6 | 	mov	arg01, local02
17c20     3C 69 B0 FD | 	call	#__system___string_cmp
17c24     00 FA 0D F2 | 	cmp	result1, #0 wz
17c28     00 22 26 56 |  if_ne	not	local03, #0
17c2c     00 24 06 F6 | 	mov	local04, #0
17c30     10 13 02 F6 | 	mov	arg01, local02
17c34     00 14 06 F6 | 	mov	arg02, #0
17c38     24 69 B0 FD | 	call	#__system___string_cmp
17c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
17c40     00 24 26 56 |  if_ne	not	local04, #0
17c44     12 23 CA F7 | 	test	local03, local04 wz
17c48     80 01 90 AD |  if_e	jmp	#LR__1938
17c4c                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
17c4c     00 12 06 F6 | 	mov	arg01, #0
17c50     78 C2 B0 FD | 	call	#__system___getiolock_0475
17c54     FD 12 02 F6 | 	mov	arg01, result1
17c58     DC 68 B0 FD | 	call	#__system___lockmem
17c5c     00 12 06 F6 | 	mov	arg01, #0
17c60     10 15 02 F6 | 	mov	arg02, local02
17c64     00 16 06 F6 | 	mov	arg03, #0
17c68     D0 75 B0 FD | 	call	#__system___basic_print_string
17c6c     00 12 06 F6 | 	mov	arg01, #0
17c70     58 C2 B0 FD | 	call	#__system___getiolock_0475
17c74     FD 00 68 FC | 	wrlong	#0, result1
17c78     40 1E 06 F1 | 	add	local01, #64
17c7c     0F 13 02 F6 | 	mov	arg01, local01
17c80     54 51 B0 FD | 	call	#_hg010b_spin2_setcursorx
17c84     00 1F 56 F2 | 	cmps	local01, #256 wc
17c88     30 00 90 CD |  if_b	jmp	#LR__1934
17c8c     00 1E 06 F6 | 	mov	local01, #0
17c90     00 12 06 F6 | 	mov	arg01, #0
17c94     34 C2 B0 FD | 	call	#__system___getiolock_0475
17c98     FD 12 02 F6 | 	mov	arg01, result1
17c9c     98 68 B0 FD | 	call	#__system___lockmem
17ca0     00 12 06 F6 | 	mov	arg01, #0
17ca4     0A 14 06 F6 | 	mov	arg02, #10
17ca8     00 16 06 F6 | 	mov	arg03, #0
17cac     34 75 B0 FD | 	call	#__system___basic_print_char
17cb0     00 12 06 F6 | 	mov	arg01, #0
17cb4     14 C2 B0 FD | 	call	#__system___getiolock_0475
17cb8     FD 00 68 FC | 	wrlong	#0, result1
17cbc                 | LR__1934
17cbc     00 12 06 F6 | 	mov	arg01, #0
17cc0     00 14 06 F6 | 	mov	arg02, #0
17cc4     3C C3 B0 FD | 	call	#__system___basic_dir
17cc8     FD 20 02 F6 | 	mov	local02, result1
17ccc                 | '   filename = dir$()      ' continue scan
17ccc                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
17ccc                 | ' return cursor_y
17ccc     3E E4 05 F1 | 	add	objptr, #62
17cd0     F2 FA C1 FA | 	rdbyte	result1, objptr
17cd4     3E E4 85 F1 | 	sub	objptr, #62
17cd8     22 FA 0D F2 | 	cmp	result1, #34 wz
17cdc     30 FF 9F 5D |  if_ne	jmp	#LR__1933
17ce0                 | '     print "-----more, press any key";
17ce0     00 12 06 F6 | 	mov	arg01, #0
17ce4     E4 C1 B0 FD | 	call	#__system___getiolock_0475
17ce8     FD 12 02 F6 | 	mov	arg01, result1
17cec     48 68 B0 FD | 	call	#__system___lockmem
17cf0     71 01 00 FF 
17cf4     A5 14 06 F6 | 	mov	arg02, ##@LR__5148
17cf8     00 12 06 F6 | 	mov	arg01, #0
17cfc     00 16 06 F6 | 	mov	arg03, #0
17d00     38 75 B0 FD | 	call	#__system___basic_print_string
17d04     00 12 06 F6 | 	mov	arg01, #0
17d08     C0 C1 B0 FD | 	call	#__system___getiolock_0475
17d0c     FD 00 68 FC | 	wrlong	#0, result1
17d10                 | '     do 
17d10                 | LR__1935
17d10     2C 60 B0 FD | 	call	#_usbnew_spin2_get_key
17d14     00 FA 0D F2 | 	cmp	result1, #0 wz
17d18     F4 FF 9F 5D |  if_ne	jmp	#LR__1935
17d1c                 | '     do
17d1c                 | LR__1936
17d1c     20 60 B0 FD | 	call	#_usbnew_spin2_get_key
17d20     00 FA 0D F2 | 	cmp	result1, #0 wz
17d24     F4 FF 9F AD |  if_e	jmp	#LR__1936
17d28                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
17d28     79 00 00 FF 
17d2c     D0 E5 05 F1 | 	add	objptr, ##62416
17d30     F2 22 02 FB | 	rdlong	local03, objptr
17d34     79 00 00 FF 
17d38     D0 E5 85 F1 | 	sub	objptr, ##62416
17d3c     01 22 0E F2 | 	cmp	local03, #1 wz
17d40     3C 00 90 5D |  if_ne	jmp	#LR__1937
17d44     7B 00 00 FF 
17d48     74 E4 05 F1 | 	add	objptr, ##63092
17d4c     F2 14 02 FB | 	rdlong	arg02, objptr
17d50     04 E4 85 F1 | 	sub	objptr, #4
17d54     F2 1A 02 FB | 	rdlong	arg05, objptr
17d58     07 12 06 F6 | 	mov	arg01, #7
17d5c     56 00 00 FF 
17d60     44 16 06 F6 | 	mov	arg03, ##44100
17d64     0C 18 C6 F9 | 	decod	arg04, #12
17d68     01 1C 66 F6 | 	neg	arg06, #1
17d6c     6F 00 00 FF 
17d70     A4 E5 85 F1 | 	sub	objptr, ##57252
17d74     50 63 B0 FD | 	call	#_audio096_spin2_play
17d78     0B 00 00 FF 
17d7c     CC E4 85 F1 | 	sub	objptr, ##5836
17d80                 | LR__1937
17d80     00 12 06 F6 | 	mov	arg01, #0
17d84     23 14 06 F6 | 	mov	arg02, #35
17d88     10 50 B0 FD | 	call	#_hg010b_spin2_setcursorpos
17d8c                 | '     position 0,35: print "                             ";: position 4,35  
17d8c     00 12 06 F6 | 	mov	arg01, #0
17d90     38 C1 B0 FD | 	call	#__system___getiolock_0475
17d94     FD 12 02 F6 | 	mov	arg01, result1
17d98     9C 67 B0 FD | 	call	#__system___lockmem
17d9c     71 01 00 FF 
17da0     BE 14 06 F6 | 	mov	arg02, ##@LR__5149
17da4     00 12 06 F6 | 	mov	arg01, #0
17da8     00 16 06 F6 | 	mov	arg03, #0
17dac     8C 74 B0 FD | 	call	#__system___basic_print_string
17db0     00 12 06 F6 | 	mov	arg01, #0
17db4     14 C1 B0 FD | 	call	#__system___getiolock_0475
17db8     FD 00 68 FC | 	wrlong	#0, result1
17dbc     04 12 06 F6 | 	mov	arg01, #4
17dc0     23 14 06 F6 | 	mov	arg02, #35
17dc4     D4 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
17dc8     44 FE 9F FD | 	jmp	#LR__1933
17dcc                 | LR__1938
17dcc     A7 F0 03 F6 | 	mov	ptra, fp
17dd0     B2 00 A0 FD | 	call	#popregs_
17dd4                 | _do_dir_ret
17dd4     2D 00 64 FD | 	ret
17dd8                 | 
17dd8                 | ' 
17dd8                 | ' sub do_if
17dd8                 | _do_if
17dd8     05 4A 05 F6 | 	mov	COUNT_, #5
17ddc     A8 00 A0 FD | 	call	#pushregs_
17de0     C0 26 BF FD | 	call	#_pop
17de4     FD 1E 0A F6 | 	mov	local01, result1 wz
17de8     FE 20 02 F6 | 	mov	local02, result2
17dec     FF 22 02 F6 | 	mov	local03, result3
17df0                 | ' t1=pop()
17df0                 | ' ' if uresult=0, jump over else
17df0                 | ' if t1.result.uresult = 0 then 
17df0     BC 00 90 5D |  if_ne	jmp	#LR__1942
17df4                 | '   for i=lineptr_e to lineptr-1
17df4     6A 00 00 FF 
17df8     70 E4 05 F1 | 	add	objptr, ##54384
17dfc     F2 24 02 FB | 	rdlong	local04, objptr
17e00     04 E4 85 F1 | 	sub	objptr, #4
17e04     F2 26 02 FB | 	rdlong	local05, objptr
17e08     6A 00 00 FF 
17e0c     6C E4 85 F1 | 	sub	objptr, ##54380
17e10                 | LR__1940
17e10     13 25 52 F2 | 	cmps	local04, local05 wc
17e14     78 00 90 3D |  if_ae	jmp	#LR__1941
17e18     12 FF 01 F6 | 	mov	result3, local04
17e1c     01 FE 65 F0 | 	shl	result3, #1
17e20     12 FF 01 F1 | 	add	result3, local04
17e24     02 FE 65 F0 | 	shl	result3, #2
17e28     67 00 00 FF 
17e2c     6C E4 05 F1 | 	add	objptr, ##52844
17e30     F2 FE 01 F1 | 	add	result3, objptr
17e34     FF 1E 02 FB | 	rdlong	local01, result3
17e38     04 FE 05 F1 | 	add	result3, #4
17e3c     FF FC 01 FB | 	rdlong	result2, result3
17e40     12 FF 01 F6 | 	mov	result3, local04
17e44     01 FE 65 F0 | 	shl	result3, #1
17e48     12 FF 01 F1 | 	add	result3, local04
17e4c     02 FE 65 F0 | 	shl	result3, #2
17e50     F2 FE 01 F1 | 	add	result3, objptr
17e54     08 FE 05 F1 | 	add	result3, #8
17e58     FF FE 01 FB | 	rdlong	result3, result3
17e5c     FE 20 02 F6 | 	mov	local02, result2
17e60     FF 22 02 F6 | 	mov	local03, result3
17e64                 | '     t1=compiledline(i)
17e64                 | '     if t1.result_type=token_else then lineptr_e=i : return
17e64     5A 22 0E F2 | 	cmp	local03, #90 wz
17e68     67 00 00 FF 
17e6c     6C E4 85 F1 | 	sub	objptr, ##52844
17e70     6A 00 00 AF 
17e74     70 E4 05 A1 |  if_e	add	objptr, ##54384
17e78     F2 24 62 AC |  if_e	wrlong	local04, objptr
17e7c     6A 00 00 AF 
17e80     70 E4 85 A1 |  if_e	sub	objptr, ##54384
17e84     28 00 90 AD |  if_e	jmp	#LR__1943
17e88     01 24 06 F1 | 	add	local04, #1
17e8c     80 FF 9F FD | 	jmp	#LR__1940
17e90                 | LR__1941
17e90     6A 00 00 FF 
17e94     6C E4 05 F1 | 	add	objptr, ##54380
17e98     F2 26 02 FB | 	rdlong	local05, objptr
17e9c     01 26 86 F1 | 	sub	local05, #1
17ea0     04 E4 05 F1 | 	add	objptr, #4
17ea4     F2 26 62 FC | 	wrlong	local05, objptr
17ea8     6A 00 00 FF 
17eac     70 E4 85 F1 | 	sub	objptr, ##54384
17eb0                 | LR__1942
17eb0                 | LR__1943
17eb0     A7 F0 03 F6 | 	mov	ptra, fp
17eb4     B2 00 A0 FD | 	call	#popregs_
17eb8                 | _do_if_ret
17eb8     2D 00 64 FD | 	ret
17ebc                 | 
17ebc                 | ' 
17ebc                 | ' sub do_else
17ebc                 | _do_else
17ebc     6A 00 00 FF 
17ec0     6C E4 05 F1 | 	add	objptr, ##54380
17ec4     F2 00 02 FB | 	rdlong	_var01, objptr
17ec8     01 00 86 F1 | 	sub	_var01, #1
17ecc     04 E4 05 F1 | 	add	objptr, #4
17ed0     F2 00 62 FC | 	wrlong	_var01, objptr
17ed4     6A 00 00 FF 
17ed8     70 E4 85 F1 | 	sub	objptr, ##54384
17edc                 | _do_else_ret
17edc     2D 00 64 FD | 	ret
17ee0                 | 
17ee0                 | ' 
17ee0                 | ' sub do_rad
17ee0                 | _do_rad
17ee0     7B 00 00 FF 
17ee4     78 E4 05 F1 | 	add	objptr, ##63096
17ee8     00 C0 9F FF 
17eec     F2 00 68 FC | 	wrlong	##1065353216, objptr
17ef0     04 E4 05 F1 | 	add	objptr, #4
17ef4     00 C0 9F FF 
17ef8     F2 00 68 FC | 	wrlong	##1065353216, objptr
17efc     7B 00 00 FF 
17f00     7C E4 85 F1 | 	sub	objptr, ##63100
17f04                 | _do_rad_ret
17f04     2D 00 64 FD | 	ret
17f08                 | 
17f08                 | ' 
17f08                 | ' sub do_deg
17f08                 | _do_deg
17f08     7B 00 00 FF 
17f0c     78 E4 05 F1 | 	add	objptr, ##63096
17f10     7D 47 9E FF 
17f14     F2 6A 68 FC | 	wrlong	##1016003125, objptr
17f18     04 E4 05 F1 | 	add	objptr, #4
17f1c     97 32 A1 FF 
17f20     F2 C2 69 FC | 	wrlong	##1113927393, objptr
17f24     7B 00 00 FF 
17f28     7C E4 85 F1 | 	sub	objptr, ##63100
17f2c                 | _do_deg_ret
17f2c     2D 00 64 FD | 	ret
17f30                 | 
17f30                 | ' 
17f30                 | ' sub do_int
17f30                 | _do_int
17f30     00 4A 05 F6 | 	mov	COUNT_, #0
17f34     A8 00 A0 FD | 	call	#pushregs_
17f38     0C F0 07 F1 | 	add	ptra, #12
17f3c     64 25 BF FD | 	call	#_pop
17f40     A7 FA 61 FC | 	wrlong	result1, fp
17f44     04 4E 05 F1 | 	add	fp, #4
17f48     A7 FC 61 FC | 	wrlong	result2, fp
17f4c     04 4E 05 F1 | 	add	fp, #4
17f50     A7 FE 61 FC | 	wrlong	result3, fp
17f54     08 4E 85 F1 | 	sub	fp, #8
17f58     A7 12 02 F6 | 	mov	arg01, fp
17f5c     10 B0 BF FD | 	call	#_converttoint
17f60     A7 FA 61 FC | 	wrlong	result1, fp
17f64     08 4E 05 F1 | 	add	fp, #8
17f68     A7 38 68 FC | 	wrlong	#28, fp
17f6c     08 4E 85 F1 | 	sub	fp, #8
17f70     A7 12 02 F6 | 	mov	arg01, fp
17f74     C4 25 BF FD | 	call	#_push
17f78     A7 F0 03 F6 | 	mov	ptra, fp
17f7c     B2 00 A0 FD | 	call	#popregs_
17f80                 | _do_int_ret
17f80     2D 00 64 FD | 	ret
17f84                 | 
17f84                 | ' 
17f84                 | ' sub do_nothing
17f84                 | _do_nothing
17f84                 | _do_nothing_ret
17f84     2D 00 64 FD | 	ret
17f88                 | 
17f88                 | ' 
17f88                 | ' sub do_brun
17f88                 | _do_brun
17f88     08 4A 05 F6 | 	mov	COUNT_, #8
17f8c     A8 00 A0 FD | 	call	#pushregs_
17f90     10 25 BF FD | 	call	#_pop
17f94     FE 1A 02 F6 | 	mov	arg05, result2
17f98     FF 18 02 F6 | 	mov	arg04, result3
17f9c     FD 1E 02 F6 | 	mov	local01, result1
17fa0     0D 21 02 F6 | 	mov	local02, arg05
17fa4     0C 23 02 F6 | 	mov	local03, arg04
17fa8                 | ' 
17fa8                 | ' t1=pop() 
17fa8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
17fa8     2B 22 0E F2 | 	cmp	local03, #43 wz
17fac     10 00 90 5D |  if_ne	jmp	#LR__1950
17fb0     0F 13 02 F6 | 	mov	arg01, local01
17fb4     94 67 BF FD | 	call	#_convertstring
17fb8     FD 1E 02 F6 | 	mov	local01, result1
17fbc     1F 22 06 F6 | 	mov	local03, #31
17fc0                 | LR__1950
17fc0                 | ' if t1.result_type=result_string then
17fc0     1F 22 0E F2 | 	cmp	local03, #31 wz
17fc4     EC 01 90 5D |  if_ne	jmp	#LR__1954
17fc8     0F 25 02 F6 | 	mov	local04, local01
17fcc                 | '   filename=t1.result.sresult
17fcc                 | '   if left$(filename,1)="/" then 
17fcc     12 13 02 F6 | 	mov	arg01, local04
17fd0     01 14 06 F6 | 	mov	arg02, #1
17fd4     A4 85 B0 FD | 	call	#__system__Left_S
17fd8     FD 12 02 F6 | 	mov	arg01, result1
17fdc     71 01 00 FF 
17fe0     DC 14 06 F6 | 	mov	arg02, ##@LR__5150
17fe4     78 65 B0 FD | 	call	#__system___string_cmp
17fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
17fec     12 27 02 A6 |  if_e	mov	local05, local04
17ff0     14 00 90 AD |  if_e	jmp	#LR__1951
17ff4     71 01 00 FF 
17ff8     DE 12 06 F6 | 	mov	arg01, ##@LR__5151
17ffc     12 15 02 F6 | 	mov	arg02, local04
18000     90 65 B0 FD | 	call	#__system___string_concat
18004     FD 26 02 F6 | 	mov	local05, result1
18008                 | LR__1951
18008                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
18008                 | '   open fullfilename for input as #9
18008     09 12 06 F6 | 	mov	arg01, #9
1800c     13 15 02 F6 | 	mov	arg02, local05
18010     00 16 06 F6 | 	mov	arg03, #0
18014     20 71 B0 FD | 	call	#__system___basic_open_string
18018     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1801c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18020     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
18024     FD 28 0A F6 | 	mov	local06, result1 wz
18028                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
18028     8C 00 90 AD |  if_e	jmp	#LR__1952
1802c     00 12 06 F6 | 	mov	arg01, #0
18030     98 BE B0 FD | 	call	#__system___getiolock_0475
18034     FD 12 02 F6 | 	mov	arg01, result1
18038     FC 64 B0 FD | 	call	#__system___lockmem
1803c     71 01 00 FF 
18040     E7 14 06 F6 | 	mov	arg02, ##@LR__5152
18044     00 12 06 F6 | 	mov	arg01, #0
18048     00 16 06 F6 | 	mov	arg03, #0
1804c     EC 71 B0 FD | 	call	#__system___basic_print_string
18050     00 12 06 F6 | 	mov	arg01, #0
18054     14 15 02 F6 | 	mov	arg02, local06
18058     00 16 06 F6 | 	mov	arg03, #0
1805c     0A 18 06 F6 | 	mov	arg04, #10
18060     1C 72 B0 FD | 	call	#__system___basic_print_integer
18064     71 01 00 FF 
18068     F5 14 06 F6 | 	mov	arg02, ##@LR__5153
1806c     00 12 06 F6 | 	mov	arg01, #0
18070     00 16 06 F6 | 	mov	arg03, #0
18074     C4 71 B0 FD | 	call	#__system___basic_print_string
18078     14 13 02 F6 | 	mov	arg01, local06
1807c     48 8B B0 FD | 	call	#__system___strerror
18080     FD 14 02 F6 | 	mov	arg02, result1
18084     00 12 06 F6 | 	mov	arg01, #0
18088     00 16 06 F6 | 	mov	arg03, #0
1808c     AC 71 B0 FD | 	call	#__system___basic_print_string
18090     00 12 06 F6 | 	mov	arg01, #0
18094     0A 14 06 F6 | 	mov	arg02, #10
18098     00 16 06 F6 | 	mov	arg03, #0
1809c     44 71 B0 FD | 	call	#__system___basic_print_char
180a0     00 12 06 F6 | 	mov	arg01, #0
180a4     24 BE B0 FD | 	call	#__system___getiolock_0475
180a8     FD 00 68 FC | 	wrlong	#0, result1
180ac     09 12 06 F6 | 	mov	arg01, #9
180b0     48 B4 B0 FD | 	call	#__system__close
180b4     FC 00 90 FD | 	jmp	#LR__1955
180b8                 | LR__1952
180b8     01 2A 06 F6 | 	mov	local07, #1
180bc     00 2C 06 F6 | 	mov	local08, #0
180c0                 | '   do
180c0                 | LR__1953
180c0                 | '     get #9,pos,block(0),1024,r : pos+=r	
180c0     77 00 00 FF 
180c4     9C E5 05 F1 | 	add	objptr, ##61340
180c8     F2 16 02 F6 | 	mov	arg03, objptr
180cc     77 00 00 FF 
180d0     9C E5 85 F1 | 	sub	objptr, ##61340
180d4     09 12 06 F6 | 	mov	arg01, #9
180d8     15 15 02 F6 | 	mov	arg02, local07
180dc     0A 18 C6 F9 | 	decod	arg04, #10
180e0     01 1A 06 F6 | 	mov	arg05, #1
180e4     64 72 B0 FD | 	call	#__system___basic_get
180e8     FD 28 02 F6 | 	mov	local06, result1
180ec     FD 2A 02 F1 | 	add	local07, result1
180f0     77 00 00 FF 
180f4     9C E5 05 F1 | 	add	objptr, ##61340
180f8     F2 12 02 F6 | 	mov	arg01, objptr
180fc     16 15 02 F6 | 	mov	arg02, local08
18100     0A 16 C6 F9 | 	decod	arg03, #10
18104     6C 00 00 FF 
18108     D0 E4 85 F1 | 	sub	objptr, ##55504
1810c     A0 58 B0 FD | 	call	#_psram_spin2_write
18110     0B 00 00 FF 
18114     CC E4 85 F1 | 	sub	objptr, ##5836
18118     14 2D 02 F1 | 	add	local08, local06
1811c     02 00 00 FF 
18120     00 28 0E F2 | 	cmp	local06, ##1024 wz
18124     E0 03 00 AF 
18128     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1812c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1953
18130     56 00 00 FF 
18134     EC E5 05 F1 | 	add	objptr, ##44524
18138     F2 12 02 FB | 	rdlong	arg01, objptr
1813c     03 12 62 FD | 	cogstop	arg01
18140     04 E4 05 F1 | 	add	objptr, #4
18144     F2 12 02 FB | 	rdlong	arg01, objptr
18148     03 12 62 FD | 	cogstop	arg01
1814c     04 E4 05 F1 | 	add	objptr, #4
18150     F2 12 02 FB | 	rdlong	arg01, objptr
18154     03 12 62 FD | 	cogstop	arg01
18158     22 00 00 FF 
1815c     E0 E5 05 F1 | 	add	objptr, ##17888
18160     F2 12 02 FB | 	rdlong	arg01, objptr
18164     03 12 62 FD | 	cogstop	arg01
18168     18 00 00 FF 
1816c     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
18170     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18174     18 00 00 FF 
18178     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1817c     22 00 00 FF 
18180     D8 E5 85 F1 | 	sub	objptr, ##17880
18184     1E 2C 06 F6 | 	mov	local08, #30
18188     28 E4 61 FD | 	setq	objptr
1818c     0A 2D F2 FC | 	coginit	local08, arg02 wc
18190     01 2C 66 C6 |  if_b	neg	local08, #1
18194     24 00 00 FF 
18198     1C E5 05 F1 | 	add	objptr, ##18716
1819c     F2 2C 62 FC | 	wrlong	local08, objptr
181a0     7B 00 00 FF 
181a4     18 E5 85 F1 | 	sub	objptr, ##63256
181a8     00 12 06 F6 | 	mov	arg01, #0
181ac     01 12 62 FD | 	cogid	arg01
181b0     03 12 62 FD | 	cogstop	arg01
181b4                 | LR__1954
181b4                 | LR__1955
181b4     A7 F0 03 F6 | 	mov	ptra, fp
181b8     B2 00 A0 FD | 	call	#popregs_
181bc                 | _do_brun_ret
181bc     2D 00 64 FD | 	ret
181c0                 | 
181c0                 | ' 
181c0                 | ' 
181c0                 | ' sub do_mouse
181c0                 | _do_mouse
181c0     E0 22 BF FD | 	call	#_pop
181c4     00 FA 4D F2 | 	cmps	result1, #0 wz
181c8                 | ' t1=pop()
181c8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
181c8     14 00 90 5D |  if_ne	jmp	#LR__1960
181cc     10 12 06 F6 | 	mov	arg01, #16
181d0     00 14 06 F6 | 	mov	arg02, #0
181d4     00 16 06 F6 | 	mov	arg03, #0
181d8     B0 3F B0 FD | 	call	#_hg010b_spin2_setspritesize
181dc     10 00 90 FD | 	jmp	#LR__1961
181e0                 | LR__1960
181e0     10 12 06 F6 | 	mov	arg01, #16
181e4     20 14 06 F6 | 	mov	arg02, #32
181e8     20 16 06 F6 | 	mov	arg03, #32
181ec     9C 3F B0 FD | 	call	#_hg010b_spin2_setspritesize
181f0                 | LR__1961
181f0                 | _do_mouse_ret
181f0     2D 00 64 FD | 	ret
181f4                 | 
181f4                 | ' 
181f4                 | ' sub do_cursor
181f4                 | _do_cursor
181f4     AC 22 BF FD | 	call	#_pop
181f8     00 FA 4D F2 | 	cmps	result1, #0 wz
181fc                 | ' t1=pop()
181fc                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
181fc     14 00 90 5D |  if_ne	jmp	#LR__1970
18200     11 12 06 F6 | 	mov	arg01, #17
18204     00 14 06 F6 | 	mov	arg02, #0
18208     00 16 06 F6 | 	mov	arg03, #0
1820c     7C 3F B0 FD | 	call	#_hg010b_spin2_setspritesize
18210     10 00 90 FD | 	jmp	#LR__1971
18214                 | LR__1970
18214     11 12 06 F6 | 	mov	arg01, #17
18218     08 14 06 F6 | 	mov	arg02, #8
1821c     10 16 06 F6 | 	mov	arg03, #16
18220     68 3F B0 FD | 	call	#_hg010b_spin2_setspritesize
18224                 | LR__1971
18224                 | _do_cursor_ret
18224     2D 00 64 FD | 	ret
18228                 | 
18228                 | ' 
18228                 | ' 
18228                 | ' sub do_click
18228                 | _do_click
18228     78 22 BF FD | 	call	#_pop
1822c     00 FA 4D F2 | 	cmps	result1, #0 wz
18230                 | ' t1=pop()
18230                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
18230     79 00 00 AF 
18234     D0 E5 05 A1 |  if_e	add	objptr, ##62416
18238     F2 00 68 AC |  if_e	wrlong	#0, objptr
1823c     79 00 00 FF 
18240     D0 E5 C5 F3 | 	sumz	objptr, ##62416
18244     F2 02 68 5C |  if_ne	wrlong	#1, objptr
18248     79 00 00 5F 
1824c     D0 E5 85 51 |  if_ne	sub	objptr, ##62416
18250                 | _do_click_ret
18250     2D 00 64 FD | 	ret
18254                 | 
18254                 | ' 
18254                 | ' 
18254                 | ' sub do_beep
18254                 | _do_beep
18254     02 4A 05 F6 | 	mov	COUNT_, #2
18258     A8 00 A0 FD | 	call	#pushregs_
1825c     20 F0 07 F1 | 	add	ptra, #32
18260     40 22 BF FD | 	call	#_pop
18264     FD 1E 02 F6 | 	mov	local01, result1
18268     FE 1C 02 F6 | 	mov	arg06, result2
1826c     FF 20 02 F6 | 	mov	local02, result3
18270     0C 4E 05 F1 | 	add	fp, #12
18274     A7 1E 62 FC | 	wrlong	local01, fp
18278     04 4E 05 F1 | 	add	fp, #4
1827c     A7 1C 62 FC | 	wrlong	arg06, fp
18280     04 4E 05 F1 | 	add	fp, #4
18284     A7 20 62 FC | 	wrlong	local02, fp
18288     14 4E 85 F1 | 	sub	fp, #20
1828c     14 22 BF FD | 	call	#_pop
18290     A7 FA 61 FC | 	wrlong	result1, fp
18294     04 4E 05 F1 | 	add	fp, #4
18298     A7 FC 61 FC | 	wrlong	result2, fp
1829c     04 4E 05 F1 | 	add	fp, #4
182a0     A7 FE 61 FC | 	wrlong	result3, fp
182a4                 | ' 
182a4                 | ' t2=pop()
182a4                 | ' t1=pop()
182a4                 | ' 
182a4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
182a4     08 4E 85 F1 | 	sub	fp, #8
182a8     1C FE 0D F2 | 	cmp	result3, #28 wz
182ac     08 4E 05 51 |  if_ne	add	fp, #8
182b0     A7 20 02 5B |  if_ne	rdlong	local02, fp
182b4     08 4E 85 51 |  if_ne	sub	fp, #8
182b8     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
182bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
182c0     18 4E 05 A1 |  if_e	add	fp, #24
182c4     A7 1E 62 AC |  if_e	wrlong	local01, fp
182c8     18 4E 85 A1 |  if_e	sub	fp, #24
182cc     14 00 90 AD |  if_e	jmp	#LR__1980
182d0     A7 12 02 F6 | 	mov	arg01, fp
182d4     98 AC BF FD | 	call	#_converttoint
182d8     18 4E 05 F1 | 	add	fp, #24
182dc     A7 FA 61 FC | 	wrlong	result1, fp
182e0     18 4E 85 F1 | 	sub	fp, #24
182e4                 | LR__1980
182e4     1C 4E 05 F1 | 	add	fp, #28
182e8     A7 FE 48 FC | 	wrbyte	#127, fp
182ec     01 4E 05 F1 | 	add	fp, #1
182f0     A7 00 49 FC | 	wrbyte	#128, fp
182f4     01 4E 85 F1 | 	sub	fp, #1
182f8     A7 14 02 F6 | 	mov	arg02, fp
182fc     04 4E 85 F1 | 	sub	fp, #4
18300     A7 16 02 FB | 	rdlong	arg03, fp
18304     18 4E 85 F1 | 	sub	fp, #24
18308     01 16 66 F0 | 	shl	arg03, #1
1830c     07 12 06 F6 | 	mov	arg01, #7
18310     0E 18 C6 F9 | 	decod	arg04, #14
18314     02 1A 06 F6 | 	mov	arg05, #2
18318     00 1C 06 F6 | 	mov	arg06, #0
1831c     0B 00 00 FF 
18320     CC E4 05 F1 | 	add	objptr, ##5836
18324     5C 5E B0 FD | 	call	#_audio096_spin2_play8
18328     0B 00 00 FF 
1832c     CC E4 85 F1 | 	sub	objptr, ##5836
18330     0C 4E 05 F1 | 	add	fp, #12
18334     A7 12 02 F6 | 	mov	arg01, fp
18338     0C 4E 85 F1 | 	sub	fp, #12
1833c     FC 21 BF FD | 	call	#_push
18340     B8 F5 BF FD | 	call	#_do_waitms
18344     07 12 06 F6 | 	mov	arg01, #7
18348     0B 00 00 FF 
1834c     CC E4 05 F1 | 	add	objptr, ##5836
18350     E4 5E B0 FD | 	call	#_audio096_spin2_stop
18354     0B 00 00 FF 
18358     CC E4 85 F1 | 	sub	objptr, ##5836
1835c     A7 F0 03 F6 | 	mov	ptra, fp
18360     B2 00 A0 FD | 	call	#popregs_
18364                 | _do_beep_ret
18364     2D 00 64 FD | 	ret
18368                 | 
18368                 | ' 
18368                 | ' sub do_no_command
18368                 | _do_no_command
18368     17 12 06 F6 | 	mov	arg01, #23
1836c     6C 1D B0 FD | 	call	#_printerror
18370                 | _do_no_command_ret
18370     2D 00 64 FD | 	ret
18374                 | 
18374                 | ' 
18374                 | ' sub do_negative
18374                 | _do_negative
18374     02 4A 05 F6 | 	mov	COUNT_, #2
18378     A8 00 A0 FD | 	call	#pushregs_
1837c     0C F0 07 F1 | 	add	ptra, #12
18380     20 21 BF FD | 	call	#_pop
18384     FF 1E 02 F6 | 	mov	local01, result3
18388     A7 FA 61 FC | 	wrlong	result1, fp
1838c     04 4E 05 F1 | 	add	fp, #4
18390     A7 FC 61 FC | 	wrlong	result2, fp
18394     04 4E 05 F1 | 	add	fp, #4
18398     A7 1E 62 FC | 	wrlong	local01, fp
1839c                 | ' t1=pop()
1839c                 | ' if t1.result_type=result_int then 
1839c     08 4E 85 F1 | 	sub	fp, #8
183a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
183a4     A7 20 02 AB |  if_e	rdlong	local02, fp
183a8     10 1F 62 A6 |  if_e	neg	local01, local02
183ac     A7 1E 62 AC |  if_e	wrlong	local01, fp
183b0     5C 00 90 AD |  if_e	jmp	#LR__1992
183b4     08 4E 05 F1 | 	add	fp, #8
183b8     A7 1E 02 FB | 	rdlong	local01, fp
183bc     08 4E 85 F1 | 	sub	fp, #8
183c0     1D 1E 0E F2 | 	cmp	local01, #29 wz
183c4     1C 00 90 5D |  if_ne	jmp	#LR__1990
183c8     A7 20 02 FB | 	rdlong	local02, fp
183cc     10 1F 62 F6 | 	neg	local01, local02
183d0     A7 1E 62 FC | 	wrlong	local01, fp
183d4     08 4E 05 F1 | 	add	fp, #8
183d8     A7 38 68 FC | 	wrlong	#28, fp
183dc     08 4E 85 F1 | 	sub	fp, #8
183e0     2C 00 90 FD | 	jmp	#LR__1991
183e4                 | LR__1990
183e4     08 4E 05 F1 | 	add	fp, #8
183e8     A7 1E 02 FB | 	rdlong	local01, fp
183ec     08 4E 85 F1 | 	sub	fp, #8
183f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
183f4     A7 FA 01 AB |  if_e	rdlong	result1, fp
183f8     1F FA E5 A4 |  if_e	bitnot	result1, #31
183fc     A7 FA 61 AC |  if_e	wrlong	result1, fp
18400     08 4E 05 51 |  if_ne	add	fp, #8
18404     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18408     08 4E 85 51 |  if_ne	sub	fp, #8
1840c     A7 50 68 5C |  if_ne	wrlong	#40, fp
18410                 | LR__1991
18410                 | LR__1992
18410     A7 12 02 F6 | 	mov	arg01, fp
18414     24 21 BF FD | 	call	#_push
18418     A7 F0 03 F6 | 	mov	ptra, fp
1841c     B2 00 A0 FD | 	call	#popregs_
18420                 | _do_negative_ret
18420     2D 00 64 FD | 	ret
18424                 | 
18424                 | ' 
18424                 | ' sub do_abs
18424                 | _do_abs
18424     01 4A 05 F6 | 	mov	COUNT_, #1
18428     A8 00 A0 FD | 	call	#pushregs_
1842c     0C F0 07 F1 | 	add	ptra, #12
18430     70 20 BF FD | 	call	#_pop
18434     FF 1E 02 F6 | 	mov	local01, result3
18438     A7 FA 61 FC | 	wrlong	result1, fp
1843c     04 4E 05 F1 | 	add	fp, #4
18440     A7 FC 61 FC | 	wrlong	result2, fp
18444     04 4E 05 F1 | 	add	fp, #4
18448     A7 1E 62 FC | 	wrlong	local01, fp
1844c                 | ' t1=pop()
1844c                 | ' if t1.result_type=result_int then 
1844c     08 4E 85 F1 | 	sub	fp, #8
18450     1C 1E 0E F2 | 	cmp	local01, #28 wz
18454     A7 12 02 AB |  if_e	rdlong	arg01, fp
18458     09 1F 42 A6 |  if_e	abs	local01, arg01
1845c     A7 1E 62 AC |  if_e	wrlong	local01, fp
18460     2C 00 90 AD |  if_e	jmp	#LR__2000
18464     08 4E 05 F1 | 	add	fp, #8
18468     A7 1E 02 FB | 	rdlong	local01, fp
1846c     08 4E 85 F1 | 	sub	fp, #8
18470     1E 1E 0E F2 | 	cmp	local01, #30 wz
18474     A7 FA 01 AB |  if_e	rdlong	result1, fp
18478     1F FA 05 A4 |  if_e	bitl	result1, #31
1847c     A7 FA 61 AC |  if_e	wrlong	result1, fp
18480     08 4E 05 51 |  if_ne	add	fp, #8
18484     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18488     08 4E 85 51 |  if_ne	sub	fp, #8
1848c     A7 50 68 5C |  if_ne	wrlong	#40, fp
18490                 | LR__2000
18490     A7 12 02 F6 | 	mov	arg01, fp
18494     A4 20 BF FD | 	call	#_push
18498     A7 F0 03 F6 | 	mov	ptra, fp
1849c     B2 00 A0 FD | 	call	#popregs_
184a0                 | _do_abs_ret
184a0     2D 00 64 FD | 	ret
184a4                 | 
184a4                 | ' 
184a4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
184a4                 | ' 
184a4                 | ' ''----------------------------------------------------------------------------------------------------
184a4                 | ' ''------------------ Initialization procedures -------------------------------------------------------
184a4                 | ' ''----------------------------------------------------------------------------------------------------
184a4                 | ' 
184a4                 | ' ''--------------------------- Command function pointers
184a4                 | ' 
184a4                 | ' sub init_commands
184a4                 | _init_commands
184a4                 | ' 
184a4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
184a4     00 00 06 F6 | 	mov	_var01, #0
184a8     97 16 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
184ac                 | LR__2010
184ac     00 FB 01 F6 | 	mov	result1, _var01
184b0     02 FA 65 F0 | 	shl	result1, #2
184b4     63 00 00 FF 
184b8     50 E4 05 F1 | 	add	objptr, ##50768
184bc     F2 FA 01 F1 | 	add	result1, objptr
184c0     63 00 00 FF 
184c4     50 E4 85 F1 | 	sub	objptr, ##50768
184c8     FD E4 61 FC | 	wrlong	objptr, result1
184cc     01 00 06 F1 | 	add	_var01, #1
184d0     00 01 56 F2 | 	cmps	_var01, #256 wc
184d4     D4 FF 9F CD |  if_b	jmp	#LR__2010
184d8                 | LR__2011
184d8     F2 FA 01 F6 | 	mov	result1, objptr
184dc     14 FA 25 F4 | 	bith	result1, #20
184e0     63 00 00 FF 
184e4     54 E4 05 F1 | 	add	objptr, ##50772
184e8     F2 FA 61 FC | 	wrlong	result1, objptr
184ec     63 00 00 FF 
184f0     54 E4 85 F1 | 	sub	objptr, ##50772
184f4     F2 FA 01 F6 | 	mov	result1, objptr
184f8     15 FA 25 F4 | 	bith	result1, #21
184fc     63 00 00 FF 
18500     58 E4 05 F1 | 	add	objptr, ##50776
18504     F2 FA 61 FC | 	wrlong	result1, objptr
18508     63 00 00 FF 
1850c     58 E4 85 F1 | 	sub	objptr, ##50776
18510     F2 FA 01 F6 | 	mov	result1, objptr
18514     34 FA 25 F4 | 	bith	result1, #52
18518     63 00 00 FF 
1851c     5C E4 05 F1 | 	add	objptr, ##50780
18520     F2 FA 61 FC | 	wrlong	result1, objptr
18524     63 00 00 FF 
18528     5C E4 85 F1 | 	sub	objptr, ##50780
1852c     F2 FA 01 F6 | 	mov	result1, objptr
18530     16 FA 25 F4 | 	bith	result1, #22
18534     63 00 00 FF 
18538     64 E4 05 F1 | 	add	objptr, ##50788
1853c     F2 FA 61 FC | 	wrlong	result1, objptr
18540     63 00 00 FF 
18544     64 E4 85 F1 | 	sub	objptr, ##50788
18548     F2 FA 01 F6 | 	mov	result1, objptr
1854c     00 28 00 FF 
18550     00 FA 45 F5 | 	or	result1, ##5242880
18554     63 00 00 FF 
18558     68 E4 05 F1 | 	add	objptr, ##50792
1855c     F2 FA 61 FC | 	wrlong	result1, objptr
18560     63 00 00 FF 
18564     68 E4 85 F1 | 	sub	objptr, ##50792
18568     F2 FA 01 F6 | 	mov	result1, objptr
1856c     35 FA 25 F4 | 	bith	result1, #53
18570     63 00 00 FF 
18574     6C E4 05 F1 | 	add	objptr, ##50796
18578     F2 FA 61 FC | 	wrlong	result1, objptr
1857c     63 00 00 FF 
18580     6C E4 85 F1 | 	sub	objptr, ##50796
18584     F2 FA 01 F6 | 	mov	result1, objptr
18588     54 FA 25 F4 | 	bith	result1, #84
1858c     63 00 00 FF 
18590     70 E4 05 F1 | 	add	objptr, ##50800
18594     F2 FA 61 FC | 	wrlong	result1, objptr
18598     63 00 00 FF 
1859c     70 E4 85 F1 | 	sub	objptr, ##50800
185a0     F2 FA 01 F6 | 	mov	result1, objptr
185a4     17 FA 25 F4 | 	bith	result1, #23
185a8     63 00 00 FF 
185ac     74 E4 05 F1 | 	add	objptr, ##50804
185b0     F2 FA 61 FC | 	wrlong	result1, objptr
185b4     63 00 00 FF 
185b8     74 E4 85 F1 | 	sub	objptr, ##50804
185bc     F2 FA 01 F6 | 	mov	result1, objptr
185c0     00 48 00 FF 
185c4     00 FA 45 F5 | 	or	result1, ##9437184
185c8     63 00 00 FF 
185cc     78 E4 05 F1 | 	add	objptr, ##50808
185d0     F2 FA 61 FC | 	wrlong	result1, objptr
185d4     63 00 00 FF 
185d8     78 E4 85 F1 | 	sub	objptr, ##50808
185dc     F2 FA 01 F6 | 	mov	result1, objptr
185e0     00 50 00 FF 
185e4     00 FA 45 F5 | 	or	result1, ##10485760
185e8     63 00 00 FF 
185ec     7C E4 05 F1 | 	add	objptr, ##50812
185f0     F2 FA 61 FC | 	wrlong	result1, objptr
185f4     63 00 00 FF 
185f8     7C E4 85 F1 | 	sub	objptr, ##50812
185fc     F2 FA 01 F6 | 	mov	result1, objptr
18600     00 58 00 FF 
18604     00 FA 45 F5 | 	or	result1, ##11534336
18608     63 00 00 FF 
1860c     80 E4 05 F1 | 	add	objptr, ##50816
18610     F2 FA 61 FC | 	wrlong	result1, objptr
18614     63 00 00 FF 
18618     80 E4 85 F1 | 	sub	objptr, ##50816
1861c     F2 FA 01 F6 | 	mov	result1, objptr
18620     36 FA 25 F4 | 	bith	result1, #54
18624     63 00 00 FF 
18628     94 E4 05 F1 | 	add	objptr, ##50836
1862c     F2 FA 61 FC | 	wrlong	result1, objptr
18630     63 00 00 FF 
18634     94 E4 85 F1 | 	sub	objptr, ##50836
18638     F2 FA 01 F6 | 	mov	result1, objptr
1863c     00 68 00 FF 
18640     00 FA 45 F5 | 	or	result1, ##13631488
18644     63 00 00 FF 
18648     C4 E4 05 F1 | 	add	objptr, ##50884
1864c     F2 FA 61 FC | 	wrlong	result1, objptr
18650     63 00 00 FF 
18654     C4 E4 85 F1 | 	sub	objptr, ##50884
18658     F2 FA 01 F6 | 	mov	result1, objptr
1865c     00 68 00 FF 
18660     00 FA 45 F5 | 	or	result1, ##13631488
18664     63 00 00 FF 
18668     C0 E4 05 F1 | 	add	objptr, ##50880
1866c     F2 FA 61 FC | 	wrlong	result1, objptr
18670     63 00 00 FF 
18674     C0 E4 85 F1 | 	sub	objptr, ##50880
18678     F2 FA 01 F6 | 	mov	result1, objptr
1867c     00 68 00 FF 
18680     00 FA 45 F5 | 	or	result1, ##13631488
18684     63 00 00 FF 
18688     C8 E4 05 F1 | 	add	objptr, ##50888
1868c     F2 FA 61 FC | 	wrlong	result1, objptr
18690     63 00 00 FF 
18694     C8 E4 85 F1 | 	sub	objptr, ##50888
18698     F2 FA 01 F6 | 	mov	result1, objptr
1869c     00 68 00 FF 
186a0     00 FA 45 F5 | 	or	result1, ##13631488
186a4     63 00 00 FF 
186a8     CC E4 05 F1 | 	add	objptr, ##50892
186ac     F2 FA 61 FC | 	wrlong	result1, objptr
186b0     63 00 00 FF 
186b4     CC E4 85 F1 | 	sub	objptr, ##50892
186b8     F2 FA 01 F6 | 	mov	result1, objptr
186bc     00 68 00 FF 
186c0     00 FA 45 F5 | 	or	result1, ##13631488
186c4     63 00 00 FF 
186c8     FC E4 05 F1 | 	add	objptr, ##50940
186cc     F2 FA 61 FC | 	wrlong	result1, objptr
186d0     63 00 00 FF 
186d4     FC E4 85 F1 | 	sub	objptr, ##50940
186d8     F2 FA 01 F6 | 	mov	result1, objptr
186dc     55 FA 25 F4 | 	bith	result1, #85
186e0     63 00 00 FF 
186e4     AC E4 05 F1 | 	add	objptr, ##50860
186e8     F2 FA 61 FC | 	wrlong	result1, objptr
186ec     63 00 00 FF 
186f0     AC E4 85 F1 | 	sub	objptr, ##50860
186f4     F2 FA 01 F6 | 	mov	result1, objptr
186f8     00 68 00 FF 
186fc     00 FA 45 F5 | 	or	result1, ##13631488
18700     63 00 00 FF 
18704     D0 E4 05 F1 | 	add	objptr, ##50896
18708     F2 FA 61 FC | 	wrlong	result1, objptr
1870c     63 00 00 FF 
18710     D0 E4 85 F1 | 	sub	objptr, ##50896
18714     F2 FA 01 F6 | 	mov	result1, objptr
18718     00 68 00 FF 
1871c     00 FA 45 F5 | 	or	result1, ##13631488
18720     63 00 00 FF 
18724     D4 E4 05 F1 | 	add	objptr, ##50900
18728     F2 FA 61 FC | 	wrlong	result1, objptr
1872c     63 00 00 FF 
18730     D4 E4 85 F1 | 	sub	objptr, ##50900
18734     F2 FA 01 F6 | 	mov	result1, objptr
18738     00 68 00 FF 
1873c     00 FA 45 F5 | 	or	result1, ##13631488
18740     63 00 00 FF 
18744     D8 E4 05 F1 | 	add	objptr, ##50904
18748     F2 FA 61 FC | 	wrlong	result1, objptr
1874c     63 00 00 FF 
18750     D8 E4 85 F1 | 	sub	objptr, ##50904
18754     F2 FA 01 F6 | 	mov	result1, objptr
18758     74 FA 25 F4 | 	bith	result1, #116
1875c     63 00 00 FF 
18760     50 E5 05 F1 | 	add	objptr, ##51024
18764     F2 FA 61 FC | 	wrlong	result1, objptr
18768     63 00 00 FF 
1876c     50 E5 85 F1 | 	sub	objptr, ##51024
18770     F2 FA 01 F6 | 	mov	result1, objptr
18774     18 FA 25 F4 | 	bith	result1, #24
18778     63 00 00 FF 
1877c     54 E5 05 F1 | 	add	objptr, ##51028
18780     F2 FA 61 FC | 	wrlong	result1, objptr
18784     63 00 00 FF 
18788     54 E5 85 F1 | 	sub	objptr, ##51028
1878c     F2 FA 01 F6 | 	mov	result1, objptr
18790     00 88 00 FF 
18794     00 FA 45 F5 | 	or	result1, ##17825792
18798     63 00 00 FF 
1879c     58 E5 05 F1 | 	add	objptr, ##51032
187a0     F2 FA 61 FC | 	wrlong	result1, objptr
187a4     63 00 00 FF 
187a8     58 E5 85 F1 | 	sub	objptr, ##51032
187ac     F2 FA 01 F6 | 	mov	result1, objptr
187b0     00 90 00 FF 
187b4     00 FA 45 F5 | 	or	result1, ##18874368
187b8     63 00 00 FF 
187bc     5C E5 05 F1 | 	add	objptr, ##51036
187c0     F2 FA 61 FC | 	wrlong	result1, objptr
187c4     63 00 00 FF 
187c8     5C E5 85 F1 | 	sub	objptr, ##51036
187cc     F2 FA 01 F6 | 	mov	result1, objptr
187d0     00 98 00 FF 
187d4     00 FA 45 F5 | 	or	result1, ##19922944
187d8     63 00 00 FF 
187dc     60 E5 05 F1 | 	add	objptr, ##51040
187e0     F2 FA 61 FC | 	wrlong	result1, objptr
187e4     63 00 00 FF 
187e8     60 E5 85 F1 | 	sub	objptr, ##51040
187ec     F2 FA 01 F6 | 	mov	result1, objptr
187f0     00 A0 00 FF 
187f4     00 FA 45 F5 | 	or	result1, ##20971520
187f8     63 00 00 FF 
187fc     64 E5 05 F1 | 	add	objptr, ##51044
18800     F2 FA 61 FC | 	wrlong	result1, objptr
18804     63 00 00 FF 
18808     64 E5 85 F1 | 	sub	objptr, ##51044
1880c     F2 FA 01 F6 | 	mov	result1, objptr
18810     00 A8 00 FF 
18814     00 FA 45 F5 | 	or	result1, ##22020096
18818     63 00 00 FF 
1881c     68 E5 05 F1 | 	add	objptr, ##51048
18820     F2 FA 61 FC | 	wrlong	result1, objptr
18824     63 00 00 FF 
18828     68 E5 85 F1 | 	sub	objptr, ##51048
1882c     F2 FA 01 F6 | 	mov	result1, objptr
18830     00 B0 00 FF 
18834     00 FA 45 F5 | 	or	result1, ##23068672
18838     63 00 00 FF 
1883c     6C E5 05 F1 | 	add	objptr, ##51052
18840     F2 FA 61 FC | 	wrlong	result1, objptr
18844     63 00 00 FF 
18848     6C E5 85 F1 | 	sub	objptr, ##51052
1884c     F2 FA 01 F6 | 	mov	result1, objptr
18850     00 B8 00 FF 
18854     00 FA 45 F5 | 	or	result1, ##24117248
18858     63 00 00 FF 
1885c     70 E5 05 F1 | 	add	objptr, ##51056
18860     F2 FA 61 FC | 	wrlong	result1, objptr
18864     63 00 00 FF 
18868     70 E5 85 F1 | 	sub	objptr, ##51056
1886c     F2 FA 01 F6 | 	mov	result1, objptr
18870     37 FA 25 F4 | 	bith	result1, #55
18874     63 00 00 FF 
18878     74 E5 05 F1 | 	add	objptr, ##51060
1887c     F2 FA 61 FC | 	wrlong	result1, objptr
18880     63 00 00 FF 
18884     74 E5 85 F1 | 	sub	objptr, ##51060
18888     F2 FA 01 F6 | 	mov	result1, objptr
1888c     00 C8 00 FF 
18890     00 FA 45 F5 | 	or	result1, ##26214400
18894     63 00 00 FF 
18898     78 E5 05 F1 | 	add	objptr, ##51064
1889c     F2 FA 61 FC | 	wrlong	result1, objptr
188a0     63 00 00 FF 
188a4     78 E5 85 F1 | 	sub	objptr, ##51064
188a8     F2 FA 01 F6 | 	mov	result1, objptr
188ac     00 D0 00 FF 
188b0     00 FA 45 F5 | 	or	result1, ##27262976
188b4     63 00 00 FF 
188b8     7C E5 05 F1 | 	add	objptr, ##51068
188bc     F2 FA 61 FC | 	wrlong	result1, objptr
188c0     63 00 00 FF 
188c4     7C E5 85 F1 | 	sub	objptr, ##51068
188c8     F2 FA 01 F6 | 	mov	result1, objptr
188cc     00 D8 00 FF 
188d0     00 FA 45 F5 | 	or	result1, ##28311552
188d4     63 00 00 FF 
188d8     80 E5 05 F1 | 	add	objptr, ##51072
188dc     F2 FA 61 FC | 	wrlong	result1, objptr
188e0     63 00 00 FF 
188e4     80 E5 85 F1 | 	sub	objptr, ##51072
188e8     F2 FA 01 F6 | 	mov	result1, objptr
188ec     56 FA 25 F4 | 	bith	result1, #86
188f0     63 00 00 FF 
188f4     84 E5 05 F1 | 	add	objptr, ##51076
188f8     F2 FA 61 FC | 	wrlong	result1, objptr
188fc     63 00 00 FF 
18900     84 E5 85 F1 | 	sub	objptr, ##51076
18904     F2 FA 01 F6 | 	mov	result1, objptr
18908     00 E8 00 FF 
1890c     00 FA 45 F5 | 	or	result1, ##30408704
18910     65 00 00 FF 
18914     4C E4 05 F1 | 	add	objptr, ##51788
18918     F2 FA 61 FC | 	wrlong	result1, objptr
1891c     65 00 00 FF 
18920     4C E4 85 F1 | 	sub	objptr, ##51788
18924     F2 FA 01 F6 | 	mov	result1, objptr
18928     75 FA 25 F4 | 	bith	result1, #117
1892c     63 00 00 FF 
18930     88 E5 05 F1 | 	add	objptr, ##51080
18934     F2 FA 61 FC | 	wrlong	result1, objptr
18938     63 00 00 FF 
1893c     88 E5 85 F1 | 	sub	objptr, ##51080
18940     F2 FA 01 F6 | 	mov	result1, objptr
18944     94 FA 25 F4 | 	bith	result1, #148
18948     63 00 00 FF 
1894c     9C E5 05 F1 | 	add	objptr, ##51100
18950     F2 FA 61 FC | 	wrlong	result1, objptr
18954     63 00 00 FF 
18958     9C E5 85 F1 | 	sub	objptr, ##51100
1895c     F2 FA 01 F6 | 	mov	result1, objptr
18960     19 FA 25 F4 | 	bith	result1, #25
18964     63 00 00 FF 
18968     8C E5 05 F1 | 	add	objptr, ##51084
1896c     F2 FA 61 FC | 	wrlong	result1, objptr
18970     63 00 00 FF 
18974     8C E5 85 F1 | 	sub	objptr, ##51084
18978     F2 FA 01 F6 | 	mov	result1, objptr
1897c     00 08 01 FF 
18980     00 FA 45 F5 | 	or	result1, ##34603008
18984     63 00 00 FF 
18988     A8 E4 05 F1 | 	add	objptr, ##50856
1898c     F2 FA 61 FC | 	wrlong	result1, objptr
18990     63 00 00 FF 
18994     A8 E4 85 F1 | 	sub	objptr, ##50856
18998     F2 FA 01 F6 | 	mov	result1, objptr
1899c     00 10 01 FF 
189a0     00 FA 45 F5 | 	or	result1, ##35651584
189a4     63 00 00 FF 
189a8     90 E5 05 F1 | 	add	objptr, ##51088
189ac     F2 FA 61 FC | 	wrlong	result1, objptr
189b0     63 00 00 FF 
189b4     90 E5 85 F1 | 	sub	objptr, ##51088
189b8     F2 FA 01 F6 | 	mov	result1, objptr
189bc     00 18 01 FF 
189c0     00 FA 45 F5 | 	or	result1, ##36700160
189c4     63 00 00 FF 
189c8     94 E5 05 F1 | 	add	objptr, ##51092
189cc     F2 FA 61 FC | 	wrlong	result1, objptr
189d0     63 00 00 FF 
189d4     94 E5 85 F1 | 	sub	objptr, ##51092
189d8     F2 FA 01 F6 | 	mov	result1, objptr
189dc     00 20 01 FF 
189e0     00 FA 45 F5 | 	or	result1, ##37748736
189e4     63 00 00 FF 
189e8     98 E5 05 F1 | 	add	objptr, ##51096
189ec     F2 FA 61 FC | 	wrlong	result1, objptr
189f0     63 00 00 FF 
189f4     98 E5 85 F1 | 	sub	objptr, ##51096
189f8     F2 FA 01 F6 | 	mov	result1, objptr
189fc     00 28 01 FF 
18a00     00 FA 45 F5 | 	or	result1, ##38797312
18a04     63 00 00 FF 
18a08     A4 E5 05 F1 | 	add	objptr, ##51108
18a0c     F2 FA 61 FC | 	wrlong	result1, objptr
18a10     63 00 00 FF 
18a14     A4 E5 85 F1 | 	sub	objptr, ##51108
18a18     F2 FA 01 F6 | 	mov	result1, objptr
18a1c     00 30 01 FF 
18a20     00 FA 45 F5 | 	or	result1, ##39845888
18a24     63 00 00 FF 
18a28     A8 E5 05 F1 | 	add	objptr, ##51112
18a2c     F2 FA 61 FC | 	wrlong	result1, objptr
18a30     63 00 00 FF 
18a34     A8 E5 85 F1 | 	sub	objptr, ##51112
18a38     F2 FA 01 F6 | 	mov	result1, objptr
18a3c     00 38 01 FF 
18a40     00 FA 45 F5 | 	or	result1, ##40894464
18a44     63 00 00 FF 
18a48     AC E5 05 F1 | 	add	objptr, ##51116
18a4c     F2 FA 61 FC | 	wrlong	result1, objptr
18a50     63 00 00 FF 
18a54     AC E5 85 F1 | 	sub	objptr, ##51116
18a58     F2 FA 01 F6 | 	mov	result1, objptr
18a5c     00 40 01 FF 
18a60     00 FA 45 F5 | 	or	result1, ##41943040
18a64     63 00 00 FF 
18a68     B0 E5 05 F1 | 	add	objptr, ##51120
18a6c     F2 FA 61 FC | 	wrlong	result1, objptr
18a70     63 00 00 FF 
18a74     B0 E5 85 F1 | 	sub	objptr, ##51120
18a78     F2 FA 01 F6 | 	mov	result1, objptr
18a7c     00 48 01 FF 
18a80     00 FA 45 F5 | 	or	result1, ##42991616
18a84     63 00 00 FF 
18a88     B8 E5 05 F1 | 	add	objptr, ##51128
18a8c     F2 FA 61 FC | 	wrlong	result1, objptr
18a90     63 00 00 FF 
18a94     B8 E5 85 F1 | 	sub	objptr, ##51128
18a98     F2 FA 01 F6 | 	mov	result1, objptr
18a9c     00 08 01 FF 
18aa0     00 FA 45 F5 | 	or	result1, ##34603008
18aa4     63 00 00 FF 
18aa8     BC E5 05 F1 | 	add	objptr, ##51132
18aac     F2 FA 61 FC | 	wrlong	result1, objptr
18ab0     63 00 00 FF 
18ab4     BC E5 85 F1 | 	sub	objptr, ##51132
18ab8     F2 FA 01 F6 | 	mov	result1, objptr
18abc     00 50 01 FF 
18ac0     00 FA 45 F5 | 	or	result1, ##44040192
18ac4     63 00 00 FF 
18ac8     BC E4 05 F1 | 	add	objptr, ##50876
18acc     F2 FA 61 FC | 	wrlong	result1, objptr
18ad0     63 00 00 FF 
18ad4     BC E4 85 F1 | 	sub	objptr, ##50876
18ad8     F2 FA 01 F6 | 	mov	result1, objptr
18adc     00 58 01 FF 
18ae0     00 FA 45 F5 | 	or	result1, ##45088768
18ae4     63 00 00 FF 
18ae8     EC E4 05 F1 | 	add	objptr, ##50924
18aec     F2 FA 61 FC | 	wrlong	result1, objptr
18af0     63 00 00 FF 
18af4     EC E4 85 F1 | 	sub	objptr, ##50924
18af8     F2 FA 01 F6 | 	mov	result1, objptr
18afc     00 60 01 FF 
18b00     00 FA 45 F5 | 	or	result1, ##46137344
18b04     63 00 00 FF 
18b08     E8 E4 05 F1 | 	add	objptr, ##50920
18b0c     F2 FA 61 FC | 	wrlong	result1, objptr
18b10     63 00 00 FF 
18b14     E8 E4 85 F1 | 	sub	objptr, ##50920
18b18     F2 FA 01 F6 | 	mov	result1, objptr
18b1c     00 68 01 FF 
18b20     00 FA 45 F5 | 	or	result1, ##47185920
18b24     63 00 00 FF 
18b28     8C E4 05 F1 | 	add	objptr, ##50828
18b2c     F2 FA 61 FC | 	wrlong	result1, objptr
18b30     63 00 00 FF 
18b34     8C E4 85 F1 | 	sub	objptr, ##50828
18b38     F2 FA 01 F6 | 	mov	result1, objptr
18b3c     00 70 01 FF 
18b40     00 FA 45 F5 | 	or	result1, ##48234496
18b44     63 00 00 FF 
18b48     90 E4 05 F1 | 	add	objptr, ##50832
18b4c     F2 FA 61 FC | 	wrlong	result1, objptr
18b50     63 00 00 FF 
18b54     90 E4 85 F1 | 	sub	objptr, ##50832
18b58     F2 FA 01 F6 | 	mov	result1, objptr
18b5c     00 78 01 FF 
18b60     00 FA 45 F5 | 	or	result1, ##49283072
18b64     63 00 00 FF 
18b68     F8 E4 05 F1 | 	add	objptr, ##50936
18b6c     F2 FA 61 FC | 	wrlong	result1, objptr
18b70     63 00 00 FF 
18b74     F8 E4 85 F1 | 	sub	objptr, ##50936
18b78     F2 FA 01 F6 | 	mov	result1, objptr
18b7c     38 FA 25 F4 | 	bith	result1, #56
18b80     63 00 00 FF 
18b84     A0 E5 05 F1 | 	add	objptr, ##51104
18b88     F2 FA 61 FC | 	wrlong	result1, objptr
18b8c     63 00 00 FF 
18b90     A0 E5 85 F1 | 	sub	objptr, ##51104
18b94     F2 FA 01 F6 | 	mov	result1, objptr
18b98     00 88 01 FF 
18b9c     00 FA 45 F5 | 	or	result1, ##51380224
18ba0     63 00 00 FF 
18ba4     B4 E5 05 F1 | 	add	objptr, ##51124
18ba8     F2 FA 61 FC | 	wrlong	result1, objptr
18bac     63 00 00 FF 
18bb0     B4 E5 85 F1 | 	sub	objptr, ##51124
18bb4     F2 FA 01 F6 | 	mov	result1, objptr
18bb8     00 90 01 FF 
18bbc     00 FA 45 F5 | 	or	result1, ##52428800
18bc0     63 00 00 FF 
18bc4     C0 E5 05 F1 | 	add	objptr, ##51136
18bc8     F2 FA 61 FC | 	wrlong	result1, objptr
18bcc     63 00 00 FF 
18bd0     C0 E5 85 F1 | 	sub	objptr, ##51136
18bd4     F2 FA 01 F6 | 	mov	result1, objptr
18bd8     00 98 01 FF 
18bdc     00 FA 45 F5 | 	or	result1, ##53477376
18be0     63 00 00 FF 
18be4     C4 E5 05 F1 | 	add	objptr, ##51140
18be8     F2 FA 61 FC | 	wrlong	result1, objptr
18bec     63 00 00 FF 
18bf0     C4 E5 85 F1 | 	sub	objptr, ##51140
18bf4     F2 FA 01 F6 | 	mov	result1, objptr
18bf8     00 A0 01 FF 
18bfc     00 FA 45 F5 | 	or	result1, ##54525952
18c00     63 00 00 FF 
18c04     C8 E5 05 F1 | 	add	objptr, ##51144
18c08     F2 FA 61 FC | 	wrlong	result1, objptr
18c0c     63 00 00 FF 
18c10     C8 E5 85 F1 | 	sub	objptr, ##51144
18c14     F2 FA 01 F6 | 	mov	result1, objptr
18c18     00 A8 01 FF 
18c1c     00 FA 45 F5 | 	or	result1, ##55574528
18c20     63 00 00 FF 
18c24     CC E5 05 F1 | 	add	objptr, ##51148
18c28     F2 FA 61 FC | 	wrlong	result1, objptr
18c2c     63 00 00 FF 
18c30     CC E5 85 F1 | 	sub	objptr, ##51148
18c34     F2 FA 01 F6 | 	mov	result1, objptr
18c38     00 B0 01 FF 
18c3c     00 FA 45 F5 | 	or	result1, ##56623104
18c40     63 00 00 FF 
18c44     D0 E5 05 F1 | 	add	objptr, ##51152
18c48     F2 FA 61 FC | 	wrlong	result1, objptr
18c4c     63 00 00 FF 
18c50     D0 E5 85 F1 | 	sub	objptr, ##51152
18c54     F2 FA 01 F6 | 	mov	result1, objptr
18c58     00 B8 01 FF 
18c5c     00 FA 45 F5 | 	or	result1, ##57671680
18c60     63 00 00 FF 
18c64     D4 E5 05 F1 | 	add	objptr, ##51156
18c68     F2 FA 61 FC | 	wrlong	result1, objptr
18c6c     63 00 00 FF 
18c70     D4 E5 85 F1 | 	sub	objptr, ##51156
18c74     F2 FA 01 F6 | 	mov	result1, objptr
18c78     94 FA 25 F4 | 	bith	result1, #148
18c7c     63 00 00 FF 
18c80     9C E5 05 F1 | 	add	objptr, ##51100
18c84     F2 FA 61 FC | 	wrlong	result1, objptr
18c88     63 00 00 FF 
18c8c     9C E5 85 F1 | 	sub	objptr, ##51100
18c90     F2 FA 01 F6 | 	mov	result1, objptr
18c94     57 FA 25 F4 | 	bith	result1, #87
18c98     63 00 00 FF 
18c9c     DC E5 05 F1 | 	add	objptr, ##51164
18ca0     F2 FA 61 FC | 	wrlong	result1, objptr
18ca4     63 00 00 FF 
18ca8     DC E5 85 F1 | 	sub	objptr, ##51164
18cac     F2 FA 01 F6 | 	mov	result1, objptr
18cb0     00 C8 01 FF 
18cb4     00 FA 45 F5 | 	or	result1, ##59768832
18cb8     63 00 00 FF 
18cbc     D8 E5 05 F1 | 	add	objptr, ##51160
18cc0     F2 FA 61 FC | 	wrlong	result1, objptr
18cc4     63 00 00 FF 
18cc8     D8 E5 85 F1 | 	sub	objptr, ##51160
18ccc     F2 FA 01 F6 | 	mov	result1, objptr
18cd0     00 D0 01 FF 
18cd4     00 FA 45 F5 | 	or	result1, ##60817408
18cd8     63 00 00 FF 
18cdc     F0 E5 05 F1 | 	add	objptr, ##51184
18ce0     F2 FA 61 FC | 	wrlong	result1, objptr
18ce4     63 00 00 FF 
18ce8     F0 E5 85 F1 | 	sub	objptr, ##51184
18cec     F2 FA 01 F6 | 	mov	result1, objptr
18cf0     00 D8 01 FF 
18cf4     00 FA 45 F5 | 	or	result1, ##61865984
18cf8     63 00 00 FF 
18cfc     F4 E5 05 F1 | 	add	objptr, ##51188
18d00     F2 FA 61 FC | 	wrlong	result1, objptr
18d04     63 00 00 FF 
18d08     F4 E5 85 F1 | 	sub	objptr, ##51188
18d0c     F2 FA 01 F6 | 	mov	result1, objptr
18d10     76 FA 25 F4 | 	bith	result1, #118
18d14     63 00 00 FF 
18d18     E0 E5 05 F1 | 	add	objptr, ##51168
18d1c     F2 FA 61 FC | 	wrlong	result1, objptr
18d20     63 00 00 FF 
18d24     E0 E5 85 F1 | 	sub	objptr, ##51168
18d28     F2 FA 01 F6 | 	mov	result1, objptr
18d2c     00 E8 01 FF 
18d30     00 FA 45 F5 | 	or	result1, ##63963136
18d34     63 00 00 FF 
18d38     E4 E5 05 F1 | 	add	objptr, ##51172
18d3c     F2 FA 61 FC | 	wrlong	result1, objptr
18d40     63 00 00 FF 
18d44     E4 E5 85 F1 | 	sub	objptr, ##51172
18d48     F2 FA 01 F6 | 	mov	result1, objptr
18d4c     95 FA 25 F4 | 	bith	result1, #149
18d50     63 00 00 FF 
18d54     E8 E5 05 F1 | 	add	objptr, ##51176
18d58     F2 FA 61 FC | 	wrlong	result1, objptr
18d5c     63 00 00 FF 
18d60     E8 E5 85 F1 | 	sub	objptr, ##51176
18d64     F2 FA 01 F6 | 	mov	result1, objptr
18d68     B4 FA 25 F4 | 	bith	result1, #180
18d6c     63 00 00 FF 
18d70     EC E5 05 F1 | 	add	objptr, ##51180
18d74     F2 FA 61 FC | 	wrlong	result1, objptr
18d78     63 00 00 FF 
18d7c     EC E5 85 F1 | 	sub	objptr, ##51180
18d80     F2 FA 01 F6 | 	mov	result1, objptr
18d84     1A FA 25 F4 | 	bith	result1, #26
18d88     63 00 00 FF 
18d8c     FC E5 05 F1 | 	add	objptr, ##51196
18d90     F2 FA 61 FC | 	wrlong	result1, objptr
18d94     63 00 00 FF 
18d98     FC E5 85 F1 | 	sub	objptr, ##51196
18d9c     F2 FA 01 F6 | 	mov	result1, objptr
18da0     00 08 02 FF 
18da4     00 FA 45 F5 | 	or	result1, ##68157440
18da8     63 00 00 FF 
18dac     F8 E5 05 F1 | 	add	objptr, ##51192
18db0     F2 FA 61 FC | 	wrlong	result1, objptr
18db4     63 00 00 FF 
18db8     F8 E5 85 F1 | 	sub	objptr, ##51192
18dbc     F2 FA 01 F6 | 	mov	result1, objptr
18dc0     00 10 02 FF 
18dc4     00 FA 45 F5 | 	or	result1, ##69206016
18dc8     64 00 00 FF 
18dcc     08 E4 05 F1 | 	add	objptr, ##51208
18dd0     F2 FA 61 FC | 	wrlong	result1, objptr
18dd4     64 00 00 FF 
18dd8     08 E4 85 F1 | 	sub	objptr, ##51208
18ddc     F2 FA 01 F6 | 	mov	result1, objptr
18de0     00 18 02 FF 
18de4     00 FA 45 F5 | 	or	result1, ##70254592
18de8     64 00 00 FF 
18dec     04 E4 05 F1 | 	add	objptr, ##51204
18df0     F2 FA 61 FC | 	wrlong	result1, objptr
18df4     64 00 00 FF 
18df8     04 E4 85 F1 | 	sub	objptr, ##51204
18dfc     F2 FA 01 F6 | 	mov	result1, objptr
18e00     00 20 02 FF 
18e04     00 FA 45 F5 | 	or	result1, ##71303168
18e08     64 00 00 FF 
18e0c     00 E4 05 F1 | 	add	objptr, ##51200
18e10     F2 FA 61 FC | 	wrlong	result1, objptr
18e14     64 00 00 FF 
18e18     00 E4 85 F1 | 	sub	objptr, ##51200
18e1c     F2 FA 01 F6 | 	mov	result1, objptr
18e20     00 28 02 FF 
18e24     00 FA 45 F5 | 	or	result1, ##72351744
18e28     64 00 00 FF 
18e2c     0C E4 05 F1 | 	add	objptr, ##51212
18e30     F2 FA 61 FC | 	wrlong	result1, objptr
18e34     64 00 00 FF 
18e38     0C E4 85 F1 | 	sub	objptr, ##51212
18e3c     F2 FA 01 F6 | 	mov	result1, objptr
18e40     00 30 02 FF 
18e44     00 FA 45 F5 | 	or	result1, ##73400320
18e48     64 00 00 FF 
18e4c     10 E4 05 F1 | 	add	objptr, ##51216
18e50     F2 FA 61 FC | 	wrlong	result1, objptr
18e54     64 00 00 FF 
18e58     10 E4 85 F1 | 	sub	objptr, ##51216
18e5c     F2 FA 01 F6 | 	mov	result1, objptr
18e60     00 38 02 FF 
18e64     00 FA 45 F5 | 	or	result1, ##74448896
18e68     63 00 00 FF 
18e6c     A4 E4 05 F1 | 	add	objptr, ##50852
18e70     F2 FA 61 FC | 	wrlong	result1, objptr
18e74     63 00 00 FF 
18e78     A4 E4 85 F1 | 	sub	objptr, ##50852
18e7c     F2 FA 01 F6 | 	mov	result1, objptr
18e80     00 40 02 FF 
18e84     00 FA 45 F5 | 	or	result1, ##75497472
18e88     64 00 00 FF 
18e8c     28 E4 05 F1 | 	add	objptr, ##51240
18e90     F2 FA 61 FC | 	wrlong	result1, objptr
18e94     64 00 00 FF 
18e98     28 E4 85 F1 | 	sub	objptr, ##51240
18e9c     F2 FA 01 F6 | 	mov	result1, objptr
18ea0     00 48 02 FF 
18ea4     00 FA 45 F5 | 	or	result1, ##76546048
18ea8     64 00 00 FF 
18eac     38 E4 05 F1 | 	add	objptr, ##51256
18eb0     F2 FA 61 FC | 	wrlong	result1, objptr
18eb4     64 00 00 FF 
18eb8     38 E4 85 F1 | 	sub	objptr, ##51256
18ebc     F2 FA 01 F6 | 	mov	result1, objptr
18ec0     00 50 02 FF 
18ec4     00 FA 45 F5 | 	or	result1, ##77594624
18ec8     64 00 00 FF 
18ecc     3C E4 05 F1 | 	add	objptr, ##51260
18ed0     F2 FA 61 FC | 	wrlong	result1, objptr
18ed4     64 00 00 FF 
18ed8     3C E4 85 F1 | 	sub	objptr, ##51260
18edc     F2 FA 01 F6 | 	mov	result1, objptr
18ee0     00 58 02 FF 
18ee4     00 FA 45 F5 | 	or	result1, ##78643200
18ee8     64 00 00 FF 
18eec     34 E4 05 F1 | 	add	objptr, ##51252
18ef0     F2 FA 61 FC | 	wrlong	result1, objptr
18ef4     64 00 00 FF 
18ef8     34 E4 85 F1 | 	sub	objptr, ##51252
18efc     F2 FA 01 F6 | 	mov	result1, objptr
18f00     00 60 02 FF 
18f04     00 FA 45 F5 | 	or	result1, ##79691776
18f08     64 00 00 FF 
18f0c     2C E4 05 F1 | 	add	objptr, ##51244
18f10     F2 FA 61 FC | 	wrlong	result1, objptr
18f14     64 00 00 FF 
18f18     2C E4 85 F1 | 	sub	objptr, ##51244
18f1c     F2 FA 01 F6 | 	mov	result1, objptr
18f20     00 68 02 FF 
18f24     00 FA 45 F5 | 	or	result1, ##80740352
18f28     64 00 00 FF 
18f2c     30 E4 05 F1 | 	add	objptr, ##51248
18f30     F2 FA 61 FC | 	wrlong	result1, objptr
18f34     64 00 00 FF 
18f38     30 E4 85 F1 | 	sub	objptr, ##51248
18f3c     F2 FA 01 F6 | 	mov	result1, objptr
18f40     00 70 02 FF 
18f44     00 FA 45 F5 | 	or	result1, ##81788928
18f48     64 00 00 FF 
18f4c     40 E4 05 F1 | 	add	objptr, ##51264
18f50     F2 FA 61 FC | 	wrlong	result1, objptr
18f54     64 00 00 FF 
18f58     40 E4 85 F1 | 	sub	objptr, ##51264
18f5c     F2 FA 01 F6 | 	mov	result1, objptr
18f60     00 78 02 FF 
18f64     00 FA 45 F5 | 	or	result1, ##82837504
18f68     64 00 00 FF 
18f6c     44 E4 05 F1 | 	add	objptr, ##51268
18f70     F2 FA 61 FC | 	wrlong	result1, objptr
18f74     64 00 00 FF 
18f78     44 E4 85 F1 | 	sub	objptr, ##51268
18f7c     F2 FA 01 F6 | 	mov	result1, objptr
18f80     00 80 02 FF 
18f84     00 FA 45 F5 | 	or	result1, ##83886080
18f88     64 00 00 FF 
18f8c     48 E4 05 F1 | 	add	objptr, ##51272
18f90     F2 FA 61 FC | 	wrlong	result1, objptr
18f94     64 00 00 FF 
18f98     48 E4 85 F1 | 	sub	objptr, ##51272
18f9c     F2 FA 01 F6 | 	mov	result1, objptr
18fa0     00 88 02 FF 
18fa4     00 FA 45 F5 | 	or	result1, ##84934656
18fa8     64 00 00 FF 
18fac     4C E4 05 F1 | 	add	objptr, ##51276
18fb0     F2 FA 61 FC | 	wrlong	result1, objptr
18fb4     64 00 00 FF 
18fb8     4C E4 85 F1 | 	sub	objptr, ##51276
18fbc     F2 FA 01 F6 | 	mov	result1, objptr
18fc0     00 90 02 FF 
18fc4     00 FA 45 F5 | 	or	result1, ##85983232
18fc8     64 00 00 FF 
18fcc     50 E4 05 F1 | 	add	objptr, ##51280
18fd0     F2 FA 61 FC | 	wrlong	result1, objptr
18fd4     64 00 00 FF 
18fd8     50 E4 85 F1 | 	sub	objptr, ##51280
18fdc     F2 FA 01 F6 | 	mov	result1, objptr
18fe0     00 98 02 FF 
18fe4     00 FA 45 F5 | 	or	result1, ##87031808
18fe8     64 00 00 FF 
18fec     54 E4 05 F1 | 	add	objptr, ##51284
18ff0     F2 FA 61 FC | 	wrlong	result1, objptr
18ff4     64 00 00 FF 
18ff8     54 E4 85 F1 | 	sub	objptr, ##51284
18ffc     F2 FA 01 F6 | 	mov	result1, objptr
19000     00 A0 02 FF 
19004     00 FA 45 F5 | 	or	result1, ##88080384
19008     64 00 00 FF 
1900c     58 E4 05 F1 | 	add	objptr, ##51288
19010     F2 FA 61 FC | 	wrlong	result1, objptr
19014     64 00 00 FF 
19018     58 E4 85 F1 | 	sub	objptr, ##51288
1901c     F2 FA 01 F6 | 	mov	result1, objptr
19020     00 A8 02 FF 
19024     00 FA 45 F5 | 	or	result1, ##89128960
19028     64 00 00 FF 
1902c     5C E4 05 F1 | 	add	objptr, ##51292
19030     F2 FA 61 FC | 	wrlong	result1, objptr
19034     64 00 00 FF 
19038     5C E4 85 F1 | 	sub	objptr, ##51292
1903c     F2 FA 01 F6 | 	mov	result1, objptr
19040     00 B0 02 FF 
19044     00 FA 45 F5 | 	or	result1, ##90177536
19048     64 00 00 FF 
1904c     68 E4 05 F1 | 	add	objptr, ##51304
19050     F2 FA 61 FC | 	wrlong	result1, objptr
19054     64 00 00 FF 
19058     68 E4 85 F1 | 	sub	objptr, ##51304
1905c     F2 FA 01 F6 | 	mov	result1, objptr
19060     00 B8 02 FF 
19064     00 FA 45 F5 | 	or	result1, ##91226112
19068     64 00 00 FF 
1906c     60 E4 05 F1 | 	add	objptr, ##51296
19070     F2 FA 61 FC | 	wrlong	result1, objptr
19074     64 00 00 FF 
19078     60 E4 85 F1 | 	sub	objptr, ##51296
1907c     F2 FA 01 F6 | 	mov	result1, objptr
19080     00 C0 02 FF 
19084     00 FA 45 F5 | 	or	result1, ##92274688
19088     64 00 00 FF 
1908c     64 E4 05 F1 | 	add	objptr, ##51300
19090     F2 FA 61 FC | 	wrlong	result1, objptr
19094     64 00 00 FF 
19098     64 E4 85 F1 | 	sub	objptr, ##51300
1909c     F2 FA 01 F6 | 	mov	result1, objptr
190a0     00 C8 02 FF 
190a4     00 FA 45 F5 | 	or	result1, ##93323264
190a8     64 00 00 FF 
190ac     6C E4 05 F1 | 	add	objptr, ##51308
190b0     F2 FA 61 FC | 	wrlong	result1, objptr
190b4     64 00 00 FF 
190b8     6C E4 85 F1 | 	sub	objptr, ##51308
190bc     F2 FA 01 F6 | 	mov	result1, objptr
190c0     00 D0 02 FF 
190c4     00 FA 45 F5 | 	or	result1, ##94371840
190c8     64 00 00 FF 
190cc     14 E4 05 F1 | 	add	objptr, ##51220
190d0     F2 FA 61 FC | 	wrlong	result1, objptr
190d4     64 00 00 FF 
190d8     14 E4 85 F1 | 	sub	objptr, ##51220
190dc     F2 FA 01 F6 | 	mov	result1, objptr
190e0     00 D8 02 FF 
190e4     00 FA 45 F5 | 	or	result1, ##95420416
190e8     64 00 00 FF 
190ec     1C E4 05 F1 | 	add	objptr, ##51228
190f0     F2 FA 61 FC | 	wrlong	result1, objptr
190f4     64 00 00 FF 
190f8     1C E4 85 F1 | 	sub	objptr, ##51228
190fc     F2 FA 01 F6 | 	mov	result1, objptr
19100     00 E0 02 FF 
19104     00 FA 45 F5 | 	or	result1, ##96468992
19108     64 00 00 FF 
1910c     20 E4 05 F1 | 	add	objptr, ##51232
19110     F2 FA 61 FC | 	wrlong	result1, objptr
19114     64 00 00 FF 
19118     20 E4 85 F1 | 	sub	objptr, ##51232
1911c     F2 FA 01 F6 | 	mov	result1, objptr
19120     00 E8 02 FF 
19124     00 FA 45 F5 | 	or	result1, ##97517568
19128     64 00 00 FF 
1912c     70 E4 05 F1 | 	add	objptr, ##51312
19130     F2 FA 61 FC | 	wrlong	result1, objptr
19134     64 00 00 FF 
19138     70 E4 85 F1 | 	sub	objptr, ##51312
1913c     F2 FA 01 F6 | 	mov	result1, objptr
19140     00 F0 02 FF 
19144     00 FA 45 F5 | 	or	result1, ##98566144
19148     64 00 00 FF 
1914c     74 E4 05 F1 | 	add	objptr, ##51316
19150     F2 FA 61 FC | 	wrlong	result1, objptr
19154     64 00 00 FF 
19158     74 E4 85 F1 | 	sub	objptr, ##51316
1915c     F2 FA 01 F6 | 	mov	result1, objptr
19160     00 F8 02 FF 
19164     00 FA 45 F5 | 	or	result1, ##99614720
19168     64 00 00 FF 
1916c     78 E4 05 F1 | 	add	objptr, ##51320
19170     F2 FA 61 FC | 	wrlong	result1, objptr
19174     64 00 00 FF 
19178     78 E4 85 F1 | 	sub	objptr, ##51320
1917c     F2 FA 01 F6 | 	mov	result1, objptr
19180     39 FA 25 F4 | 	bith	result1, #57
19184     64 00 00 FF 
19188     24 E4 05 F1 | 	add	objptr, ##51236
1918c     F2 FA 61 FC | 	wrlong	result1, objptr
19190     64 00 00 FF 
19194     24 E4 85 F1 | 	sub	objptr, ##51236
19198     F2 FA 01 F6 | 	mov	result1, objptr
1919c     00 08 03 FF 
191a0     00 FA 45 F5 | 	or	result1, ##101711872
191a4     64 00 00 FF 
191a8     88 E4 05 F1 | 	add	objptr, ##51336
191ac     F2 FA 61 FC | 	wrlong	result1, objptr
191b0     64 00 00 FF 
191b4     88 E4 85 F1 | 	sub	objptr, ##51336
191b8     F2 FA 01 F6 | 	mov	result1, objptr
191bc     00 10 03 FF 
191c0     00 FA 45 F5 | 	or	result1, ##102760448
191c4     64 00 00 FF 
191c8     90 E4 05 F1 | 	add	objptr, ##51344
191cc     F2 FA 61 FC | 	wrlong	result1, objptr
191d0     64 00 00 FF 
191d4     90 E4 85 F1 | 	sub	objptr, ##51344
191d8     F2 FA 01 F6 | 	mov	result1, objptr
191dc     00 18 03 FF 
191e0     00 FA 45 F5 | 	or	result1, ##103809024
191e4     64 00 00 FF 
191e8     84 E4 05 F1 | 	add	objptr, ##51332
191ec     F2 FA 61 FC | 	wrlong	result1, objptr
191f0     64 00 00 FF 
191f4     84 E4 85 F1 | 	sub	objptr, ##51332
191f8     F2 FA 01 F6 | 	mov	result1, objptr
191fc     00 20 03 FF 
19200     00 FA 45 F5 | 	or	result1, ##104857600
19204     64 00 00 FF 
19208     80 E4 05 F1 | 	add	objptr, ##51328
1920c     F2 FA 61 FC | 	wrlong	result1, objptr
19210     64 00 00 FF 
19214     80 E4 85 F1 | 	sub	objptr, ##51328
19218     F2 FA 01 F6 | 	mov	result1, objptr
1921c     00 28 03 FF 
19220     00 FA 45 F5 | 	or	result1, ##105906176
19224     64 00 00 FF 
19228     7C E4 05 F1 | 	add	objptr, ##51324
1922c     F2 FA 61 FC | 	wrlong	result1, objptr
19230     64 00 00 FF 
19234     7C E4 85 F1 | 	sub	objptr, ##51324
19238     F2 FA 01 F6 | 	mov	result1, objptr
1923c     00 30 03 FF 
19240     00 FA 45 F5 | 	or	result1, ##106954752
19244     64 00 00 FF 
19248     8C E4 05 F1 | 	add	objptr, ##51340
1924c     F2 FA 61 FC | 	wrlong	result1, objptr
19250     64 00 00 FF 
19254     8C E4 85 F1 | 	sub	objptr, ##51340
19258     F2 FA 01 F6 | 	mov	result1, objptr
1925c     00 38 03 FF 
19260     00 FA 45 F5 | 	or	result1, ##108003328
19264     64 00 00 FF 
19268     94 E4 05 F1 | 	add	objptr, ##51348
1926c     F2 FA 61 FC | 	wrlong	result1, objptr
19270     64 00 00 FF 
19274     94 E4 85 F1 | 	sub	objptr, ##51348
19278     F2 FA 01 F6 | 	mov	result1, objptr
1927c     00 40 03 FF 
19280     00 FA 45 F5 | 	or	result1, ##109051904
19284     64 00 00 FF 
19288     98 E4 05 F1 | 	add	objptr, ##51352
1928c     F2 FA 61 FC | 	wrlong	result1, objptr
19290     64 00 00 FF 
19294     98 E4 85 F1 | 	sub	objptr, ##51352
19298     F2 FA 01 F6 | 	mov	result1, objptr
1929c     00 48 03 FF 
192a0     00 FA 45 F5 | 	or	result1, ##110100480
192a4     64 00 00 FF 
192a8     9C E4 05 F1 | 	add	objptr, ##51356
192ac     F2 FA 61 FC | 	wrlong	result1, objptr
192b0     64 00 00 FF 
192b4     9C E4 85 F1 | 	sub	objptr, ##51356
192b8     F2 FA 01 F6 | 	mov	result1, objptr
192bc     00 50 03 FF 
192c0     00 FA 45 F5 | 	or	result1, ##111149056
192c4     64 00 00 FF 
192c8     A4 E4 05 F1 | 	add	objptr, ##51364
192cc     F2 FA 61 FC | 	wrlong	result1, objptr
192d0     64 00 00 FF 
192d4     A4 E4 85 F1 | 	sub	objptr, ##51364
192d8     F2 FA 01 F6 | 	mov	result1, objptr
192dc     00 58 03 FF 
192e0     00 FA 45 F5 | 	or	result1, ##112197632
192e4     64 00 00 FF 
192e8     A8 E4 05 F1 | 	add	objptr, ##51368
192ec     F2 FA 61 FC | 	wrlong	result1, objptr
192f0     64 00 00 FF 
192f4     A8 E4 85 F1 | 	sub	objptr, ##51368
192f8     F2 FA 01 F6 | 	mov	result1, objptr
192fc     00 60 03 FF 
19300     00 FA 45 F5 | 	or	result1, ##113246208
19304     64 00 00 FF 
19308     AC E4 05 F1 | 	add	objptr, ##51372
1930c     F2 FA 61 FC | 	wrlong	result1, objptr
19310     64 00 00 FF 
19314     AC E4 85 F1 | 	sub	objptr, ##51372
19318     F2 FA 01 F6 | 	mov	result1, objptr
1931c     00 68 03 FF 
19320     00 FA 45 F5 | 	or	result1, ##114294784
19324     64 00 00 FF 
19328     B0 E4 05 F1 | 	add	objptr, ##51376
1932c     F2 FA 61 FC | 	wrlong	result1, objptr
19330     64 00 00 FF 
19334     B0 E4 85 F1 | 	sub	objptr, ##51376
19338     F2 FA 01 F6 | 	mov	result1, objptr
1933c     00 70 03 FF 
19340     00 FA 45 F5 | 	or	result1, ##115343360
19344     64 00 00 FF 
19348     B4 E4 05 F1 | 	add	objptr, ##51380
1934c     F2 FA 61 FC | 	wrlong	result1, objptr
19350     64 00 00 FF 
19354     B4 E4 85 F1 | 	sub	objptr, ##51380
19358     F2 FA 01 F6 | 	mov	result1, objptr
1935c     00 78 03 FF 
19360     00 FA 45 F5 | 	or	result1, ##116391936
19364     64 00 00 FF 
19368     B8 E4 05 F1 | 	add	objptr, ##51384
1936c     F2 FA 61 FC | 	wrlong	result1, objptr
19370     64 00 00 FF 
19374     B8 E4 85 F1 | 	sub	objptr, ##51384
19378     F2 FA 01 F6 | 	mov	result1, objptr
1937c     58 FA 25 F4 | 	bith	result1, #88
19380     64 00 00 FF 
19384     BC E4 05 F1 | 	add	objptr, ##51388
19388     F2 FA 61 FC | 	wrlong	result1, objptr
1938c     64 00 00 FF 
19390     BC E4 85 F1 | 	sub	objptr, ##51388
19394     F2 FA 01 F6 | 	mov	result1, objptr
19398     00 88 03 FF 
1939c     00 FA 45 F5 | 	or	result1, ##118489088
193a0     64 00 00 FF 
193a4     C0 E4 05 F1 | 	add	objptr, ##51392
193a8     F2 FA 61 FC | 	wrlong	result1, objptr
193ac     64 00 00 FF 
193b0     C0 E4 85 F1 | 	sub	objptr, ##51392
193b4     F2 FA 01 F6 | 	mov	result1, objptr
193b8     00 90 03 FF 
193bc     00 FA 45 F5 | 	or	result1, ##119537664
193c0     64 00 00 FF 
193c4     A0 E4 05 F1 | 	add	objptr, ##51360
193c8     F2 FA 61 FC | 	wrlong	result1, objptr
193cc     64 00 00 FF 
193d0     A0 E4 85 F1 | 	sub	objptr, ##51360
193d4     F2 FA 01 F6 | 	mov	result1, objptr
193d8     00 98 03 FF 
193dc     00 FA 45 F5 | 	or	result1, ##120586240
193e0     63 00 00 FF 
193e4     98 E4 05 F1 | 	add	objptr, ##50840
193e8     F2 FA 61 FC | 	wrlong	result1, objptr
193ec     63 00 00 FF 
193f0     98 E4 85 F1 | 	sub	objptr, ##50840
193f4     F2 FA 01 F6 | 	mov	result1, objptr
193f8     00 A0 03 FF 
193fc     00 FA 45 F5 | 	or	result1, ##121634816
19400     64 00 00 FF 
19404     C4 E4 05 F1 | 	add	objptr, ##51396
19408     F2 FA 61 FC | 	wrlong	result1, objptr
1940c     64 00 00 FF 
19410     C4 E4 85 F1 | 	sub	objptr, ##51396
19414     F2 FA 01 F6 | 	mov	result1, objptr
19418     00 A8 03 FF 
1941c     00 FA 45 F5 | 	or	result1, ##122683392
19420     64 00 00 FF 
19424     C8 E4 05 F1 | 	add	objptr, ##51400
19428     F2 FA 61 FC | 	wrlong	result1, objptr
1942c     64 00 00 FF 
19430     C8 E4 85 F1 | 	sub	objptr, ##51400
19434     F2 FA 01 F6 | 	mov	result1, objptr
19438     00 B0 03 FF 
1943c     00 FA 45 F5 | 	or	result1, ##123731968
19440     64 00 00 FF 
19444     DC E4 05 F1 | 	add	objptr, ##51420
19448     F2 FA 61 FC | 	wrlong	result1, objptr
1944c     64 00 00 FF 
19450     DC E4 85 F1 | 	sub	objptr, ##51420
19454     F2 FA 01 F6 | 	mov	result1, objptr
19458     00 B8 03 FF 
1945c     00 FA 45 F5 | 	or	result1, ##124780544
19460     64 00 00 FF 
19464     D8 E4 05 F1 | 	add	objptr, ##51416
19468     F2 FA 61 FC | 	wrlong	result1, objptr
1946c     64 00 00 FF 
19470     D8 E4 85 F1 | 	sub	objptr, ##51416
19474     F2 FA 01 F6 | 	mov	result1, objptr
19478     77 FA 25 F4 | 	bith	result1, #119
1947c     64 00 00 FF 
19480     D0 E4 05 F1 | 	add	objptr, ##51408
19484     F2 FA 61 FC | 	wrlong	result1, objptr
19488     64 00 00 FF 
1948c     D0 E4 85 F1 | 	sub	objptr, ##51408
19490     F2 FA 01 F6 | 	mov	result1, objptr
19494     00 C8 03 FF 
19498     00 FA 45 F5 | 	or	result1, ##126877696
1949c     64 00 00 FF 
194a0     CC E4 05 F1 | 	add	objptr, ##51404
194a4     F2 FA 61 FC | 	wrlong	result1, objptr
194a8     64 00 00 FF 
194ac     CC E4 85 F1 | 	sub	objptr, ##51404
194b0     F2 FA 01 F6 | 	mov	result1, objptr
194b4     00 D0 03 FF 
194b8     00 FA 45 F5 | 	or	result1, ##127926272
194bc     64 00 00 FF 
194c0     EC E4 05 F1 | 	add	objptr, ##51436
194c4     F2 FA 61 FC | 	wrlong	result1, objptr
194c8     64 00 00 FF 
194cc     EC E4 85 F1 | 	sub	objptr, ##51436
194d0     F2 FA 01 F6 | 	mov	result1, objptr
194d4     00 D8 03 FF 
194d8     00 FA 45 F5 | 	or	result1, ##128974848
194dc     64 00 00 FF 
194e0     E0 E4 05 F1 | 	add	objptr, ##51424
194e4     F2 FA 61 FC | 	wrlong	result1, objptr
194e8     64 00 00 FF 
194ec     E0 E4 85 F1 | 	sub	objptr, ##51424
194f0     F2 FA 01 F6 | 	mov	result1, objptr
194f4     96 FA 25 F4 | 	bith	result1, #150
194f8     64 00 00 FF 
194fc     E4 E4 05 F1 | 	add	objptr, ##51428
19500     F2 FA 61 FC | 	wrlong	result1, objptr
19504     64 00 00 FF 
19508     E4 E4 85 F1 | 	sub	objptr, ##51428
1950c     F2 FA 01 F6 | 	mov	result1, objptr
19510     00 E8 03 FF 
19514     00 FA 45 F5 | 	or	result1, ##131072000
19518     64 00 00 FF 
1951c     E8 E4 05 F1 | 	add	objptr, ##51432
19520     F2 FA 61 FC | 	wrlong	result1, objptr
19524     64 00 00 FF 
19528     E8 E4 85 F1 | 	sub	objptr, ##51432
1952c     F2 FA 01 F6 | 	mov	result1, objptr
19530     B5 FA 25 F4 | 	bith	result1, #181
19534     64 00 00 FF 
19538     F0 E4 05 F1 | 	add	objptr, ##51440
1953c     F2 FA 61 FC | 	wrlong	result1, objptr
19540     64 00 00 FF 
19544     F0 E4 85 F1 | 	sub	objptr, ##51440
19548                 | _init_commands_ret
19548     2D 00 64 FD | 	ret
1954c                 | 
1954c                 | ' 
1954c                 | ' ''--------------------------------Error strings -------------------------------------
1954c                 | ' sub init_audio
1954c                 | _init_audio
1954c     05 4A 05 F6 | 	mov	COUNT_, #5
19550     A8 00 A0 FD | 	call	#pushregs_
19554     00 C0 1F FF 
19558     00 1E 06 F6 | 	mov	local01, ##1065353216
1955c                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1955c     00 20 06 F6 | 	mov	local02, #0
19560                 | LR__2020
19560     10 23 02 F6 | 	mov	local03, local02
19564     01 22 66 F0 | 	shl	local03, #1
19568     0C 00 00 FF 
1956c     D8 E4 05 F1 | 	add	objptr, ##6360
19570     F2 22 02 F1 | 	add	local03, objptr
19574     58 7F 23 FF 
19578     00 24 06 F6 | 	mov	local04, ##1191096320
1957c     0C 00 00 FF 
19580     D8 E4 85 F1 | 	sub	objptr, ##6360
19584     10 13 52 F6 | 	abs	arg01, local02 wc
19588     1F 26 C6 C9 |  if_b	decod	local05, #31
1958c     00 26 06 36 |  if_ae	mov	local05, #0
19590     1C 77 B0 FD | 	call	#__system___float_fromuns
19594     13 FB 61 F5 | 	xor	result1, local05
19598     FD 12 02 F6 | 	mov	arg01, result1
1959c     87 24 20 FF 
195a0     DB 15 06 F6 | 	mov	arg02, ##1078530011
195a4     0C 7B B0 FD | 	call	#__system___float_mul
195a8     FD 12 02 F6 | 	mov	arg01, result1
195ac     00 00 22 FF 
195b0     00 14 06 F6 | 	mov	arg02, ##1140850688
195b4     00 7D B0 FD | 	call	#__system___float_div
195b8     FD 12 02 F6 | 	mov	arg01, result1
195bc     30 84 B0 FD | 	call	#__system____builtin_sinf
195c0     FD 14 02 F6 | 	mov	arg02, result1
195c4     12 13 02 F6 | 	mov	arg01, local04
195c8     E8 7A B0 FD | 	call	#__system___float_mul
195cc     FD 12 02 F6 | 	mov	arg01, result1
195d0     01 14 06 F6 | 	mov	arg02, #1
195d4     A4 7F B0 FD | 	call	#__system___float_tointeger
195d8     11 FB 51 FC | 	wrword	result1, local03
195dc     01 20 06 F1 | 	add	local02, #1
195e0     02 00 00 FF 
195e4     00 20 56 F2 | 	cmps	local02, ##1024 wc
195e8     74 FF 9F CD |  if_b	jmp	#LR__2020
195ec                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
195ec     00 20 06 F6 | 	mov	local02, #0
195f0     10 00 00 FF 
195f4     D8 E4 05 F1 | 	add	objptr, ##8408
195f8     97 6A 48 FB | 	callpa	#(@LR__2024-@LR__2021)>>2,fcache_load_ptr_
195fc                 | LR__2021
195fc     10 23 02 F6 | 	mov	local03, local02
19600     01 22 66 F0 | 	shl	local03, #1
19604     F2 22 02 F1 | 	add	local03, objptr
19608     10 27 02 F6 | 	mov	local05, local02
1960c     07 26 66 F0 | 	shl	local05, #7
19610     10 27 82 F1 | 	sub	local05, local02
19614     C0 FF 7F FF 
19618     00 25 06 F6 | 	mov	local04, ##-32512
1961c     13 25 02 F1 | 	add	local04, local05
19620     11 25 52 FC | 	wrword	local04, local03
19624     09 22 C6 F9 | 	decod	local03, #9
19628     10 23 02 F1 | 	add	local03, local02
1962c     01 22 66 F0 | 	shl	local03, #1
19630     F2 22 02 F1 | 	add	local03, objptr
19634     10 25 02 F6 | 	mov	local04, local02
19638     01 24 66 F0 | 	shl	local04, #1
1963c     F2 24 02 F1 | 	add	local04, objptr
19640     12 25 E2 FA | 	rdword	local04, local04
19644     0F 24 66 F7 | 	signx	local04, #15
19648     12 25 62 F6 | 	neg	local04, local04
1964c     11 25 52 FC | 	wrword	local04, local03
19650     01 20 06 F1 | 	add	local02, #1
19654     01 00 00 FF 
19658     00 20 56 F2 | 	cmps	local02, ##512 wc
1965c     9C FF 9F CD |  if_b	jmp	#LR__2021
19660                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
19660     00 20 06 F6 | 	mov	local02, #0
19664     04 00 00 FF 
19668     00 E4 05 F1 | 	add	objptr, ##2048
1966c                 | LR__2022
1966c     10 23 02 F6 | 	mov	local03, local02
19670     01 22 66 F0 | 	shl	local03, #1
19674     F2 22 02 F1 | 	add	local03, objptr
19678     10 27 02 F6 | 	mov	local05, local02
1967c     06 26 66 F0 | 	shl	local05, #6
19680     10 27 82 F1 | 	sub	local05, local02
19684     C1 FF 7F FF 
19688     00 24 06 F6 | 	mov	local04, ##-32256
1968c     13 25 02 F1 | 	add	local04, local05
19690     11 25 52 FC | 	wrword	local04, local03
19694     01 20 06 F1 | 	add	local02, #1
19698     02 00 00 FF 
1969c     00 20 56 F2 | 	cmps	local02, ##1024 wc
196a0     C8 FF 9F CD |  if_b	jmp	#LR__2022
196a4                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
196a4     00 20 06 F6 | 	mov	local02, #0
196a8     04 00 00 FF 
196ac     00 E4 05 F1 | 	add	objptr, ##2048
196b0                 | LR__2023
196b0     10 23 02 F6 | 	mov	local03, local02
196b4     01 22 66 F0 | 	shl	local03, #1
196b8     F2 22 02 F1 | 	add	local03, objptr
196bc     40 00 80 FF 
196c0     11 51 59 FC | 	wrword	##32936, local03
196c4     01 20 06 F1 | 	add	local02, #1
196c8     80 20 56 F2 | 	cmps	local02, #128 wc
196cc     E0 FF 9F CD |  if_b	jmp	#LR__2023
196d0                 | LR__2024
196d0     80 20 06 F6 | 	mov	local02, #128
196d4     97 68 48 FB | 	callpa	#(@LR__2030-@LR__2025)>>2,fcache_load_ptr_
196d8                 | LR__2025
196d8     10 23 02 F6 | 	mov	local03, local02
196dc     01 22 66 F0 | 	shl	local03, #1
196e0     F2 22 02 F1 | 	add	local03, objptr
196e4     3F 00 80 FF 
196e8     11 B1 5A FC | 	wrword	##32600, local03
196ec     01 20 06 F1 | 	add	local02, #1
196f0     02 00 00 FF 
196f4     00 20 16 F2 | 	cmp	local02, ##1024 wc
196f8     DC FF 9F CD |  if_b	jmp	#LR__2025
196fc                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
196fc     00 20 06 F6 | 	mov	local02, #0
19700     04 00 00 FF 
19704     00 E4 05 F1 | 	add	objptr, ##2048
19708                 | LR__2026
19708     10 23 02 F6 | 	mov	local03, local02
1970c     01 22 66 F0 | 	shl	local03, #1
19710     F2 22 02 F1 | 	add	local03, objptr
19714     40 00 80 FF 
19718     11 51 59 FC | 	wrword	##32936, local03
1971c     01 20 06 F1 | 	add	local02, #1
19720     01 00 00 FF 
19724     00 20 56 F2 | 	cmps	local02, ##512 wc
19728     DC FF 9F CD |  if_b	jmp	#LR__2026
1972c     09 20 C6 F9 | 	decod	local02, #9
19730                 | LR__2027
19730     10 23 02 F6 | 	mov	local03, local02
19734     01 22 66 F0 | 	shl	local03, #1
19738     F2 22 02 F1 | 	add	local03, objptr
1973c     3F 00 80 FF 
19740     11 B1 5A FC | 	wrword	##32600, local03
19744     01 20 06 F1 | 	add	local02, #1
19748     02 00 00 FF 
1974c     00 20 16 F2 | 	cmp	local02, ##1024 wc
19750     DC FF 9F CD |  if_b	jmp	#LR__2027
19754                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
19754     00 20 06 F6 | 	mov	local02, #0
19758     04 00 00 FF 
1975c     00 E4 05 F1 | 	add	objptr, ##2048
19760                 | LR__2028
19760     10 23 02 F6 | 	mov	local03, local02
19764     01 22 66 F0 | 	shl	local03, #1
19768     F2 22 02 F1 | 	add	local03, objptr
1976c     40 00 80 FF 
19770     11 51 59 FC | 	wrword	##32936, local03
19774     01 20 06 F1 | 	add	local02, #1
19778     00 21 56 F2 | 	cmps	local02, #256 wc
1977c     E0 FF 9F CD |  if_b	jmp	#LR__2028
19780     00 21 06 F6 | 	mov	local02, #256
19784                 | LR__2029
19784     10 23 02 F6 | 	mov	local03, local02
19788     01 22 66 F0 | 	shl	local03, #1
1978c     F2 22 02 F1 | 	add	local03, objptr
19790     3F 00 80 FF 
19794     11 B1 5A FC | 	wrword	##32600, local03
19798     01 20 06 F1 | 	add	local02, #1
1979c     02 00 00 FF 
197a0     00 20 16 F2 | 	cmp	local02, ##1024 wc
197a4     DC FF 9F CD |  if_b	jmp	#LR__2029
197a8                 | LR__2030
197a8                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
197a8     00 20 06 F6 | 	mov	local02, #0
197ac     04 00 00 FF 
197b0     00 E4 05 F1 | 	add	objptr, ##2048
197b4     14 00 00 FF 
197b8     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
197bc     97 1C 48 FB | 	callpa	#(@LR__2032-@LR__2031)>>2,fcache_load_ptr_
197c0                 | LR__2031
197c0     10 23 02 F6 | 	mov	local03, local02
197c4     01 22 66 F0 | 	shl	local03, #1
197c8     F2 22 02 F1 | 	add	local03, objptr
197cc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
197d0     10 12 06 F1 | 	add	arg01, #16
197d4     10 FB 01 F6 | 	mov	result1, local02
197d8     01 FA 65 F0 | 	shl	result1, #1
197dc     FD 12 02 F1 | 	add	arg01, result1
197e0     09 FB E1 FA | 	rdword	result1, arg01
197e4     11 FB 51 FC | 	wrword	result1, local03
197e8     01 20 06 F1 | 	add	local02, #1
197ec     02 00 00 FF 
197f0     00 20 56 F2 | 	cmps	local02, ##1024 wc
197f4     C8 FF 9F CD |  if_b	jmp	#LR__2031
197f8                 | LR__2032
197f8                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
197f8     00 20 06 F6 | 	mov	local02, #0
197fc     04 00 00 FF 
19800     00 E4 05 F1 | 	add	objptr, ##2048
19804     04 00 00 FF 
19808     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
1980c     97 1C 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
19810                 | LR__2033
19810     10 23 02 F6 | 	mov	local03, local02
19814     01 22 66 F0 | 	shl	local03, #1
19818     F2 22 02 F1 | 	add	local03, objptr
1981c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19820     10 12 06 F1 | 	add	arg01, #16
19824     10 FB 01 F6 | 	mov	result1, local02
19828     01 FA 65 F0 | 	shl	result1, #1
1982c     FD 12 02 F1 | 	add	arg01, result1
19830     09 FB E1 FA | 	rdword	result1, arg01
19834     11 FB 51 FC | 	wrword	result1, local03
19838     01 20 06 F1 | 	add	local02, #1
1983c     02 00 00 FF 
19840     00 20 56 F2 | 	cmps	local02, ##1024 wc
19844     C8 FF 9F CD |  if_b	jmp	#LR__2033
19848                 | LR__2034
19848     10 00 00 FF 
1984c     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
19850                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
19850     00 20 06 F6 | 	mov	local02, #0
19854     04 00 00 FF 
19858     00 E4 05 F1 | 	add	objptr, ##2048
1985c     97 18 48 FB | 	callpa	#(@LR__2036-@LR__2035)>>2,fcache_load_ptr_
19860                 | LR__2035
19860     10 23 02 F6 | 	mov	local03, local02
19864     01 22 66 F0 | 	shl	local03, #1
19868     F2 22 02 F1 | 	add	local03, objptr
1986c     10 27 02 F6 | 	mov	local05, local02
19870     08 26 66 F0 | 	shl	local05, #8
19874     7F 00 00 FF 
19878     00 25 06 F6 | 	mov	local04, ##65280
1987c     13 25 82 F1 | 	sub	local04, local05
19880     11 25 52 FC | 	wrword	local04, local03
19884     01 20 06 F1 | 	add	local02, #1
19888     00 21 56 F2 | 	cmps	local02, #256 wc
1988c     D0 FF 9F CD |  if_b	jmp	#LR__2035
19890                 | LR__2036
19890     2C 00 00 FF 
19894     D8 E4 85 F1 | 	sub	objptr, ##22744
19898                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
19898     00 20 06 F6 | 	mov	local02, #0
1989c                 | LR__2037
1989c     10 23 02 F6 | 	mov	local03, local02
198a0     01 22 66 F0 | 	shl	local03, #1
198a4     2D 00 00 FF 
198a8     D8 E4 05 F1 | 	add	objptr, ##23256
198ac     F2 22 02 F1 | 	add	local03, objptr
198b0     80 BF 23 FF 
198b4     00 12 06 F6 | 	mov	arg01, ##1199505408
198b8     0F 15 02 F6 | 	mov	arg02, local01
198bc     2D 00 00 FF 
198c0     D8 E4 85 F1 | 	sub	objptr, ##23256
198c4     EC 77 B0 FD | 	call	#__system___float_mul
198c8     FD 12 02 F6 | 	mov	arg01, result1
198cc     01 14 06 F6 | 	mov	arg02, #1
198d0     A8 7C B0 FD | 	call	#__system___float_tointeger
198d4     11 FB 51 FC | 	wrword	result1, local03
198d8     0F 13 02 F6 | 	mov	arg01, local01
198dc     CC BC 1F FF 
198e0     9A 15 06 F6 | 	mov	arg02, ##1064933786
198e4     CC 77 B0 FD | 	call	#__system___float_mul
198e8     FD 1E 02 F6 | 	mov	local01, result1
198ec     01 20 06 F1 | 	add	local02, #1
198f0     00 21 56 F2 | 	cmps	local02, #256 wc
198f4     A4 FF 9F CD |  if_b	jmp	#LR__2037
198f8     2E 00 00 FF 
198fc     D6 E4 05 F1 | 	add	objptr, ##23766
19900     F2 00 58 FC | 	wrword	#0, objptr
19904                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
19904     00 20 06 F6 | 	mov	local02, #0
19908     02 E4 05 F1 | 	add	objptr, #2
1990c     97 10 48 FB | 	callpa	#(@LR__2039-@LR__2038)>>2,fcache_load_ptr_
19910                 | LR__2038
19910     10 23 02 F6 | 	mov	local03, local02
19914     01 22 66 F0 | 	shl	local03, #1
19918     F2 22 02 F1 | 	add	local03, objptr
1991c     7F 00 80 FF 
19920     11 01 5A FC | 	wrword	##65280, local03
19924     01 20 06 F1 | 	add	local02, #1
19928     FF 20 56 F2 | 	cmps	local02, #255 wc
1992c     E0 FF 9F CD |  if_b	jmp	#LR__2038
19930                 | LR__2039
19930     FE E5 05 F1 | 	add	objptr, #510
19934     F2 00 58 FC | 	wrword	#0, objptr
19938                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
19938     00 20 06 F6 | 	mov	local02, #0
1993c     02 E4 05 F1 | 	add	objptr, #2
19940     97 52 48 FB | 	callpa	#(@LR__2044-@LR__2040)>>2,fcache_load_ptr_
19944                 | LR__2040
19944     10 23 02 F6 | 	mov	local03, local02
19948     01 22 66 F0 | 	shl	local03, #1
1994c     F2 22 02 F1 | 	add	local03, objptr
19950     10 25 02 F6 | 	mov	local04, local02
19954     0C 24 66 F0 | 	shl	local04, #12
19958     11 25 52 FC | 	wrword	local04, local03
1995c     01 20 06 F1 | 	add	local02, #1
19960     10 20 56 F2 | 	cmps	local02, #16 wc
19964     DC FF 9F CD |  if_b	jmp	#LR__2040
19968                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
19968     10 20 06 F6 | 	mov	local02, #16
1996c                 | LR__2041
1996c     10 23 02 F6 | 	mov	local03, local02
19970     01 22 66 F0 | 	shl	local03, #1
19974     F2 22 02 F1 | 	add	local03, objptr
19978     7F 00 80 FF 
1997c     11 01 5A FC | 	wrword	##65280, local03
19980     01 20 06 F1 | 	add	local02, #1
19984     F0 20 16 F2 | 	cmp	local02, #240 wc
19988     E0 FF 9F CD |  if_b	jmp	#LR__2041
1998c                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1998c     F0 20 06 F6 | 	mov	local02, #240
19990                 | LR__2042
19990     10 23 02 F6 | 	mov	local03, local02
19994     01 22 66 F0 | 	shl	local03, #1
19998     F2 22 02 F1 | 	add	local03, objptr
1999c     FF 26 06 F6 | 	mov	local05, #255
199a0     10 27 82 F1 | 	sub	local05, local02
199a4     0C 26 66 F0 | 	shl	local05, #12
199a8     11 27 52 FC | 	wrword	local05, local03
199ac     01 20 06 F1 | 	add	local02, #1
199b0     00 21 16 F2 | 	cmp	local02, #256 wc
199b4     D8 FF 9F CD |  if_b	jmp	#LR__2042
199b8                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
199b8     00 20 06 F6 | 	mov	local02, #0
199bc     01 00 00 FF 
199c0     00 E4 05 F1 | 	add	objptr, ##512
199c4                 | LR__2043
199c4     10 23 02 F6 | 	mov	local03, local02
199c8     01 22 66 F0 | 	shl	local03, #1
199cc     F2 22 02 F1 | 	add	local03, objptr
199d0     10 25 02 F6 | 	mov	local04, local02
199d4     08 24 66 F0 | 	shl	local04, #8
199d8     11 25 52 FC | 	wrword	local04, local03
199dc     01 20 06 F1 | 	add	local02, #1
199e0     00 21 56 F2 | 	cmps	local02, #256 wc
199e4     DC FF 9F CD |  if_b	jmp	#LR__2043
199e8                 | LR__2044
199e8     FE E5 05 F1 | 	add	objptr, #510
199ec     F2 00 58 FC | 	wrword	#0, objptr
199f0                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
199f0     00 20 06 F6 | 	mov	local02, #0
199f4     02 E4 05 F1 | 	add	objptr, #2
199f8     97 6A 48 FB | 	callpa	#(@LR__2049-@LR__2045)>>2,fcache_load_ptr_
199fc                 | LR__2045
199fc     10 23 02 F6 | 	mov	local03, local02
19a00     01 22 66 F0 | 	shl	local03, #1
19a04     F2 22 02 F1 | 	add	local03, objptr
19a08     10 25 02 F6 | 	mov	local04, local02
19a0c     04 24 66 F0 | 	shl	local04, #4
19a10     10 25 02 F1 | 	add	local04, local02
19a14     04 24 66 F0 | 	shl	local04, #4
19a18     11 25 52 FC | 	wrword	local04, local03
19a1c     01 20 06 F1 | 	add	local02, #1
19a20     F0 20 56 F2 | 	cmps	local02, #240 wc
19a24     D4 FF 9F CD |  if_b	jmp	#LR__2045
19a28     F0 20 06 F6 | 	mov	local02, #240
19a2c                 | LR__2046
19a2c     10 23 02 F6 | 	mov	local03, local02
19a30     01 22 66 F0 | 	shl	local03, #1
19a34     F2 22 02 F1 | 	add	local03, objptr
19a38     FF 26 06 F6 | 	mov	local05, #255
19a3c     10 27 82 F1 | 	sub	local05, local02
19a40     0C 26 66 F0 | 	shl	local05, #12
19a44     11 27 52 FC | 	wrword	local05, local03
19a48     01 20 06 F1 | 	add	local02, #1
19a4c     00 21 16 F2 | 	cmp	local02, #256 wc
19a50     D8 FF 9F CD |  if_b	jmp	#LR__2046
19a54                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
19a54     00 20 06 F6 | 	mov	local02, #0
19a58     01 00 00 FF 
19a5c     00 E4 05 F1 | 	add	objptr, ##512
19a60                 | LR__2047
19a60     10 23 02 F6 | 	mov	local03, local02
19a64     01 22 66 F0 | 	shl	local03, #1
19a68     F2 22 02 F1 | 	add	local03, objptr
19a6c     10 25 02 F6 | 	mov	local04, local02
19a70     09 24 66 F0 | 	shl	local04, #9
19a74     11 25 52 FC | 	wrword	local04, local03
19a78     FF 22 06 F6 | 	mov	local03, #255
19a7c     10 23 82 F1 | 	sub	local03, local02
19a80     01 22 66 F0 | 	shl	local03, #1
19a84     F2 22 02 F1 | 	add	local03, objptr
19a88     10 25 02 F6 | 	mov	local04, local02
19a8c     09 24 66 F0 | 	shl	local04, #9
19a90     11 25 52 FC | 	wrword	local04, local03
19a94     01 20 06 F1 | 	add	local02, #1
19a98     80 20 56 F2 | 	cmps	local02, #128 wc
19a9c     C0 FF 9F CD |  if_b	jmp	#LR__2047
19aa0                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
19aa0     00 20 06 F6 | 	mov	local02, #0
19aa4     01 00 00 FF 
19aa8     00 E4 05 F1 | 	add	objptr, ##512
19aac                 | LR__2048
19aac     10 23 02 F6 | 	mov	local03, local02
19ab0     01 22 66 F0 | 	shl	local03, #1
19ab4     F2 22 02 F1 | 	add	local03, objptr
19ab8     10 25 02 F6 | 	mov	local04, local02
19abc     0D 24 66 F0 | 	shl	local04, #13
19ac0     11 25 52 FC | 	wrword	local04, local03
19ac4     01 20 06 F1 | 	add	local02, #1
19ac8     08 20 56 F2 | 	cmps	local02, #8 wc
19acc     DC FF 9F CD |  if_b	jmp	#LR__2048
19ad0                 | LR__2049
19ad0                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
19ad0     08 20 06 F6 | 	mov	local02, #8
19ad4     97 42 48 FB | 	callpa	#(@LR__2053-@LR__2050)>>2,fcache_load_ptr_
19ad8                 | LR__2050
19ad8     10 23 02 F6 | 	mov	local03, local02
19adc     01 22 66 F0 | 	shl	local03, #1
19ae0     F2 22 02 F1 | 	add	local03, objptr
19ae4     10 1F 02 F6 | 	mov	local01, local02
19ae8     08 1E 86 F1 | 	sub	local01, #8
19aec     0B 1E 66 F0 | 	shl	local01, #11
19af0     7F 00 00 FF 
19af4     00 25 06 F6 | 	mov	local04, ##65280
19af8     0F 25 82 F1 | 	sub	local04, local01
19afc     11 25 52 FC | 	wrword	local04, local03
19b00     01 20 06 F1 | 	add	local02, #1
19b04     18 20 16 F2 | 	cmp	local02, #24 wc
19b08     CC FF 9F CD |  if_b	jmp	#LR__2050
19b0c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
19b0c     18 20 06 F6 | 	mov	local02, #24
19b10                 | LR__2051
19b10     10 23 02 F6 | 	mov	local03, local02
19b14     01 22 66 F0 | 	shl	local03, #1
19b18     F2 22 02 F1 | 	add	local03, objptr
19b1c     40 00 80 FF 
19b20     11 01 58 FC | 	wrword	##32768, local03
19b24     01 20 06 F1 | 	add	local02, #1
19b28     81 20 16 F2 | 	cmp	local02, #129 wc
19b2c     E0 FF 9F CD |  if_b	jmp	#LR__2051
19b30                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
19b30     81 20 06 F6 | 	mov	local02, #129
19b34                 | LR__2052
19b34     10 23 02 F6 | 	mov	local03, local02
19b38     01 22 66 F0 | 	shl	local03, #1
19b3c     F2 22 02 F1 | 	add	local03, objptr
19b40     FF 26 06 F6 | 	mov	local05, #255
19b44     10 27 82 F1 | 	sub	local05, local02
19b48     08 26 66 F0 | 	shl	local05, #8
19b4c     11 27 52 FC | 	wrword	local05, local03
19b50     01 20 06 F1 | 	add	local02, #1
19b54     00 21 16 F2 | 	cmp	local02, #256 wc
19b58     D8 FF 9F CD |  if_b	jmp	#LR__2052
19b5c                 | LR__2053
19b5c     47 00 00 FF 
19b60     BA E5 05 F1 | 	add	objptr, ##36794
19b64     F2 00 59 FC | 	wrword	#128, objptr
19b68     7B 00 00 FF 
19b6c     92 E4 85 F1 | 	sub	objptr, ##63122
19b70                 | ' for i=0 to 7
19b70     00 20 06 F6 | 	mov	local02, #0
19b74     97 8E 48 FB | 	callpa	#(@LR__2055-@LR__2054)>>2,fcache_load_ptr_
19b78                 | LR__2054
19b78     10 23 02 F6 | 	mov	local03, local02
19b7c     01 22 66 F0 | 	shl	local03, #1
19b80     10 23 02 F1 | 	add	local03, local02
19b84     03 22 66 F0 | 	shl	local03, #3
19b88     34 00 00 FF 
19b8c     38 E5 05 F1 | 	add	objptr, ##26936
19b90     F2 22 02 F1 | 	add	local03, objptr
19b94     00 EE A1 FF 
19b98     11 01 68 FC | 	wrlong	##1138491392, local03
19b9c     10 23 02 F6 | 	mov	local03, local02
19ba0     01 22 66 F0 | 	shl	local03, #1
19ba4     10 23 02 F1 | 	add	local03, local02
19ba8     03 22 66 F0 | 	shl	local03, #3
19bac     F2 22 02 F1 | 	add	local03, objptr
19bb0     04 22 06 F1 | 	add	local03, #4
19bb4     11 21 42 FC | 	wrbyte	local02, local03
19bb8     10 23 02 F6 | 	mov	local03, local02
19bbc     01 22 66 F0 | 	shl	local03, #1
19bc0     10 23 02 F1 | 	add	local03, local02
19bc4     03 22 66 F0 | 	shl	local03, #3
19bc8     F2 22 02 F1 | 	add	local03, objptr
19bcc     05 22 06 F1 | 	add	local03, #5
19bd0     11 21 42 FC | 	wrbyte	local02, local03
19bd4     10 23 02 F6 | 	mov	local03, local02
19bd8     01 22 66 F0 | 	shl	local03, #1
19bdc     10 23 02 F1 | 	add	local03, local02
19be0     03 22 66 F0 | 	shl	local03, #3
19be4     F2 22 02 F1 | 	add	local03, objptr
19be8     06 22 06 F1 | 	add	local03, #6
19bec     11 01 58 FC | 	wrword	#0, local03
19bf0     10 23 02 F6 | 	mov	local03, local02
19bf4     01 22 66 F0 | 	shl	local03, #1
19bf8     10 23 02 F1 | 	add	local03, local02
19bfc     03 22 66 F0 | 	shl	local03, #3
19c00     F2 22 02 F1 | 	add	local03, objptr
19c04     08 22 06 F1 | 	add	local03, #8
19c08     00 C0 9F FF 
19c0c     11 01 68 FC | 	wrlong	##1065353216, local03
19c10     10 23 02 F6 | 	mov	local03, local02
19c14     01 22 66 F0 | 	shl	local03, #1
19c18     10 23 02 F1 | 	add	local03, local02
19c1c     03 22 66 F0 | 	shl	local03, #3
19c20     F2 22 02 F1 | 	add	local03, objptr
19c24     0C 22 06 F1 | 	add	local03, #12
19c28     00 40 A0 FF 
19c2c     11 01 68 FC | 	wrlong	##1082130432, local03
19c30     10 23 02 F6 | 	mov	local03, local02
19c34     01 22 66 F0 | 	shl	local03, #1
19c38     10 23 02 F1 | 	add	local03, local02
19c3c     03 22 66 F0 | 	shl	local03, #3
19c40     F2 22 02 F1 | 	add	local03, objptr
19c44     10 22 06 F1 | 	add	local03, #16
19c48     11 01 68 FC | 	wrlong	#0, local03
19c4c     10 23 02 F6 | 	mov	local03, local02
19c50     01 22 66 F0 | 	shl	local03, #1
19c54     10 23 02 F1 | 	add	local03, local02
19c58     03 22 66 F0 | 	shl	local03, #3
19c5c     F2 22 02 F1 | 	add	local03, objptr
19c60     14 22 06 F1 | 	add	local03, #20
19c64     11 FF 59 FC | 	wrword	#255, local03
19c68     10 23 02 F6 | 	mov	local03, local02
19c6c     01 22 66 F0 | 	shl	local03, #1
19c70     46 00 00 FF 
19c74     4C E5 05 F1 | 	add	objptr, ##36172
19c78     F2 22 02 F1 | 	add	local03, objptr
19c7c     11 FF 59 FC | 	wrword	#255, local03
19c80     01 20 06 F1 | 	add	local02, #1
19c84     08 20 56 F2 | 	cmps	local02, #8 wc
19c88     7B 00 00 FF 
19c8c     84 E4 85 F1 | 	sub	objptr, ##63108
19c90     E4 FE 9F CD |  if_b	jmp	#LR__2054
19c94                 | LR__2055
19c94     00 6E 20 FF 
19c98     00 1E 06 F6 | 	mov	local01, ##1088159744
19c9c                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
19c9c     03 26 06 F6 | 	mov	local05, #3
19ca0                 | LR__2056
19ca0     0F 13 02 F6 | 	mov	arg01, local01
19ca4     CE C3 1F FF 
19ca8     7D 14 06 F6 | 	mov	arg02, ##1065852029
19cac     04 74 B0 FD | 	call	#__system___float_mul
19cb0     FD 1E 02 F6 | 	mov	local01, result1
19cb4     FA 27 6E FB | 	djnz	local05, #LR__2056
19cb8     00 20 06 F6 | 	mov	local02, #0
19cbc                 | LR__2057
19cbc     10 27 02 F6 | 	mov	local05, local02
19cc0     02 26 66 F0 | 	shl	local05, #2
19cc4     34 00 00 FF 
19cc8     D8 E4 05 F1 | 	add	objptr, ##26840
19ccc     F2 26 02 F1 | 	add	local05, objptr
19cd0     13 1F 62 FC | 	wrlong	local01, local05
19cd4     0F 13 02 F6 | 	mov	arg01, local01
19cd8     CE C3 1F FF 
19cdc     7D 14 06 F6 | 	mov	arg02, ##1065852029
19ce0     34 00 00 FF 
19ce4     D8 E4 85 F1 | 	sub	objptr, ##26840
19ce8     C8 73 B0 FD | 	call	#__system___float_mul
19cec     FD 1E 02 F6 | 	mov	local01, result1
19cf0     01 20 06 F1 | 	add	local02, #1
19cf4     0C 20 56 F2 | 	cmps	local02, #12 wc
19cf8     C0 FF 9F CD |  if_b	jmp	#LR__2057
19cfc     7B 00 00 FF 
19d00     92 E4 05 F1 | 	add	objptr, ##63122
19d04     F2 00 59 FC | 	wrword	#128, objptr
19d08     02 E4 85 F1 | 	sub	objptr, #2
19d0c     F2 00 59 FC | 	wrword	#128, objptr
19d10     7B 00 00 FF 
19d14     90 E4 85 F1 | 	sub	objptr, ##63120
19d18     A7 F0 03 F6 | 	mov	ptra, fp
19d1c     B2 00 A0 FD | 	call	#popregs_
19d20                 | _init_audio_ret
19d20     2D 00 64 FD | 	ret
19d24                 | 
19d24                 | ' 
19d24                 | ' 
19d24                 | ' function getnoteval(token) as single
19d24                 | _getnoteval
19d24     02 4A 05 F6 | 	mov	COUNT_, #2
19d28     A8 00 A0 FD | 	call	#pushregs_
19d2c     01 00 00 FF 
19d30     00 13 86 F1 | 	sub	arg01, ##768
19d34     09 15 52 F6 | 	abs	arg02, arg01 wc
19d38     0C 14 16 FD | 	qdiv	arg02, #12
19d3c     34 00 00 FF 
19d40     D8 E4 05 F1 | 	add	objptr, ##26840
19d44     19 14 62 FD | 	getqy	arg02
19d48     0A 15 82 F6 | 	negc	arg02, arg02
19d4c     02 14 66 F0 | 	shl	arg02, #2
19d50     F2 14 02 F1 | 	add	arg02, objptr
19d54     0A 1F 02 FB | 	rdlong	local01, arg02
19d58     09 15 52 F6 | 	abs	arg02, arg01 wc
19d5c     0C 14 16 FD | 	qdiv	arg02, #12
19d60     34 00 00 FF 
19d64     D8 E4 85 F1 | 	sub	objptr, ##26840
19d68     01 12 06 F6 | 	mov	arg01, #1
19d6c                 | ' noteexp=1+(note/12) 
19d6c                 | ' return (2.0^noteexp)*notebase
19d6c     18 14 62 FD | 	getqx	arg02
19d70     0A 13 82 F3 | 	sumc	arg01, arg02
19d74     09 13 52 F6 | 	abs	arg01, arg01 wc
19d78     1F 20 C6 C9 |  if_b	decod	local02, #31
19d7c     00 20 06 36 |  if_ae	mov	local02, #0
19d80     2C 6F B0 FD | 	call	#__system___float_fromuns
19d84     10 FB 61 F5 | 	xor	result1, local02
19d88     FD 14 02 F6 | 	mov	arg02, result1
19d8c     1E 12 C6 F9 | 	decod	arg01, #30
19d90     04 82 B0 FD | 	call	#__system____builtin_powf
19d94     FD 12 02 F6 | 	mov	arg01, result1
19d98     0F 15 02 F6 | 	mov	arg02, local01
19d9c     14 73 B0 FD | 	call	#__system___float_mul
19da0     A7 F0 03 F6 | 	mov	ptra, fp
19da4     B2 00 A0 FD | 	call	#popregs_
19da8                 | _getnoteval_ret
19da8     2D 00 64 FD | 	ret
19dac                 | 
19dac                 | ' 
19dac                 | ' 
19dac                 | ' 
19dac                 | ' sub init_error_strings
19dac                 | _init_error_strings
19dac     71 01 00 FF 
19db0     F8 00 06 F6 | 	mov	_var01, ##@LR__5154
19db4     65 00 00 FF 
19db8     6C E4 05 F1 | 	add	objptr, ##51820
19dbc     F2 00 62 FC | 	wrlong	_var01, objptr
19dc0     71 01 00 FF 
19dc4     F9 00 06 F6 | 	mov	_var01, ##@LR__5155
19dc8     04 E4 05 F1 | 	add	objptr, #4
19dcc     F2 00 62 FC | 	wrlong	_var01, objptr
19dd0     71 01 00 FF 
19dd4     1E 01 06 F6 | 	mov	_var01, ##@LR__5156
19dd8     04 E4 05 F1 | 	add	objptr, #4
19ddc     F2 00 62 FC | 	wrlong	_var01, objptr
19de0     71 01 00 FF 
19de4     3F 01 06 F6 | 	mov	_var01, ##@LR__5157
19de8     04 E4 05 F1 | 	add	objptr, #4
19dec     F2 00 62 FC | 	wrlong	_var01, objptr
19df0     71 01 00 FF 
19df4     59 01 06 F6 | 	mov	_var01, ##@LR__5158
19df8     04 E4 05 F1 | 	add	objptr, #4
19dfc     F2 00 62 FC | 	wrlong	_var01, objptr
19e00     71 01 00 FF 
19e04     75 01 06 F6 | 	mov	_var01, ##@LR__5159
19e08     04 E4 05 F1 | 	add	objptr, #4
19e0c     F2 00 62 FC | 	wrlong	_var01, objptr
19e10     71 01 00 FF 
19e14     97 01 06 F6 | 	mov	_var01, ##@LR__5160
19e18     04 E4 05 F1 | 	add	objptr, #4
19e1c     F2 00 62 FC | 	wrlong	_var01, objptr
19e20     71 01 00 FF 
19e24     C5 01 06 F6 | 	mov	_var01, ##@LR__5161
19e28     04 E4 05 F1 | 	add	objptr, #4
19e2c     F2 00 62 FC | 	wrlong	_var01, objptr
19e30     71 01 00 FF 
19e34     F0 01 06 F6 | 	mov	_var01, ##@LR__5162
19e38     04 E4 05 F1 | 	add	objptr, #4
19e3c     F2 00 62 FC | 	wrlong	_var01, objptr
19e40     72 01 00 FF 
19e44     09 00 06 F6 | 	mov	_var01, ##@LR__5163
19e48     04 E4 05 F1 | 	add	objptr, #4
19e4c     F2 00 62 FC | 	wrlong	_var01, objptr
19e50     72 01 00 FF 
19e54     2A 00 06 F6 | 	mov	_var01, ##@LR__5164
19e58     04 E4 05 F1 | 	add	objptr, #4
19e5c     F2 00 62 FC | 	wrlong	_var01, objptr
19e60     72 01 00 FF 
19e64     41 00 06 F6 | 	mov	_var01, ##@LR__5165
19e68     04 E4 05 F1 | 	add	objptr, #4
19e6c     F2 00 62 FC | 	wrlong	_var01, objptr
19e70     72 01 00 FF 
19e74     5F 00 06 F6 | 	mov	_var01, ##@LR__5166
19e78     04 E4 05 F1 | 	add	objptr, #4
19e7c     F2 00 62 FC | 	wrlong	_var01, objptr
19e80     72 01 00 FF 
19e84     83 00 06 F6 | 	mov	_var01, ##@LR__5167
19e88     04 E4 05 F1 | 	add	objptr, #4
19e8c     F2 00 62 FC | 	wrlong	_var01, objptr
19e90     72 01 00 FF 
19e94     AA 00 06 F6 | 	mov	_var01, ##@LR__5168
19e98     04 E4 05 F1 | 	add	objptr, #4
19e9c     F2 00 62 FC | 	wrlong	_var01, objptr
19ea0     72 01 00 FF 
19ea4     C6 00 06 F6 | 	mov	_var01, ##@LR__5169
19ea8     04 E4 05 F1 | 	add	objptr, #4
19eac     F2 00 62 FC | 	wrlong	_var01, objptr
19eb0     72 01 00 FF 
19eb4     D7 00 06 F6 | 	mov	_var01, ##@LR__5170
19eb8     04 E4 05 F1 | 	add	objptr, #4
19ebc     F2 00 62 FC | 	wrlong	_var01, objptr
19ec0     72 01 00 FF 
19ec4     E7 00 06 F6 | 	mov	_var01, ##@LR__5171
19ec8     04 E4 05 F1 | 	add	objptr, #4
19ecc     F2 00 62 FC | 	wrlong	_var01, objptr
19ed0     72 01 00 FF 
19ed4     02 01 06 F6 | 	mov	_var01, ##@LR__5172
19ed8     04 E4 05 F1 | 	add	objptr, #4
19edc     F2 00 62 FC | 	wrlong	_var01, objptr
19ee0     72 01 00 FF 
19ee4     14 01 06 F6 | 	mov	_var01, ##@LR__5173
19ee8     04 E4 05 F1 | 	add	objptr, #4
19eec     F2 00 62 FC | 	wrlong	_var01, objptr
19ef0     72 01 00 FF 
19ef4     2C 01 06 F6 | 	mov	_var01, ##@LR__5174
19ef8     04 E4 05 F1 | 	add	objptr, #4
19efc     F2 00 62 FC | 	wrlong	_var01, objptr
19f00     72 01 00 FF 
19f04     40 01 06 F6 | 	mov	_var01, ##@LR__5175
19f08     04 E4 05 F1 | 	add	objptr, #4
19f0c     F2 00 62 FC | 	wrlong	_var01, objptr
19f10     72 01 00 FF 
19f14     50 01 06 F6 | 	mov	_var01, ##@LR__5176
19f18     04 E4 05 F1 | 	add	objptr, #4
19f1c     F2 00 62 FC | 	wrlong	_var01, objptr
19f20     72 01 00 FF 
19f24     6D 01 06 F6 | 	mov	_var01, ##@LR__5177
19f28     04 E4 05 F1 | 	add	objptr, #4
19f2c     F2 00 62 FC | 	wrlong	_var01, objptr
19f30     72 01 00 FF 
19f34     7E 01 06 F6 | 	mov	_var01, ##@LR__5178
19f38     04 E4 05 F1 | 	add	objptr, #4
19f3c     F2 00 62 FC | 	wrlong	_var01, objptr
19f40     72 01 00 FF 
19f44     8F 01 06 F6 | 	mov	_var01, ##@LR__5179
19f48     04 E4 05 F1 | 	add	objptr, #4
19f4c     F2 00 62 FC | 	wrlong	_var01, objptr
19f50     72 01 00 FF 
19f54     BA 01 06 F6 | 	mov	_var01, ##@LR__5180
19f58     04 E4 05 F1 | 	add	objptr, #4
19f5c     F2 00 62 FC | 	wrlong	_var01, objptr
19f60     72 01 00 FF 
19f64     D6 01 06 F6 | 	mov	_var01, ##@LR__5181
19f68     04 E4 05 F1 | 	add	objptr, #4
19f6c     F2 00 62 FC | 	wrlong	_var01, objptr
19f70     72 01 00 FF 
19f74     EC 01 06 F6 | 	mov	_var01, ##@LR__5182
19f78     04 E4 05 F1 | 	add	objptr, #4
19f7c     F2 00 62 FC | 	wrlong	_var01, objptr
19f80     72 01 00 FF 
19f84     F9 01 06 F6 | 	mov	_var01, ##@LR__5183
19f88     04 E4 05 F1 | 	add	objptr, #4
19f8c     F2 00 62 FC | 	wrlong	_var01, objptr
19f90     73 01 00 FF 
19f94     0B 00 06 F6 | 	mov	_var01, ##@LR__5184
19f98     04 E4 05 F1 | 	add	objptr, #4
19f9c     F2 00 62 FC | 	wrlong	_var01, objptr
19fa0     73 01 00 FF 
19fa4     1C 00 06 F6 | 	mov	_var01, ##@LR__5185
19fa8     04 E4 05 F1 | 	add	objptr, #4
19fac     F2 00 62 FC | 	wrlong	_var01, objptr
19fb0     73 01 00 FF 
19fb4     38 00 06 F6 | 	mov	_var01, ##@LR__5186
19fb8     04 E4 05 F1 | 	add	objptr, #4
19fbc     F2 00 62 FC | 	wrlong	_var01, objptr
19fc0     73 01 00 FF 
19fc4     49 00 06 F6 | 	mov	_var01, ##@LR__5187
19fc8     04 E4 05 F1 | 	add	objptr, #4
19fcc     F2 00 62 FC | 	wrlong	_var01, objptr
19fd0     73 01 00 FF 
19fd4     58 00 06 F6 | 	mov	_var01, ##@LR__5188
19fd8     04 E4 05 F1 | 	add	objptr, #4
19fdc     F2 00 62 FC | 	wrlong	_var01, objptr
19fe0     73 01 00 FF 
19fe4     73 00 06 F6 | 	mov	_var01, ##@LR__5189
19fe8     04 E4 05 F1 | 	add	objptr, #4
19fec     F2 00 62 FC | 	wrlong	_var01, objptr
19ff0     73 01 00 FF 
19ff4     A7 00 06 F6 | 	mov	_var01, ##@LR__5190
19ff8     04 E4 05 F1 | 	add	objptr, #4
19ffc     F2 00 62 FC | 	wrlong	_var01, objptr
1a000     73 01 00 FF 
1a004     C0 00 06 F6 | 	mov	_var01, ##@LR__5191
1a008     04 E4 05 F1 | 	add	objptr, #4
1a00c     F2 00 62 FC | 	wrlong	_var01, objptr
1a010     73 01 00 FF 
1a014     DC 00 06 F6 | 	mov	_var01, ##@LR__5192
1a018     04 E4 05 F1 | 	add	objptr, #4
1a01c     F2 00 62 FC | 	wrlong	_var01, objptr
1a020     73 01 00 FF 
1a024     FA 00 06 F6 | 	mov	_var01, ##@LR__5193
1a028     04 E4 05 F1 | 	add	objptr, #4
1a02c     F2 00 62 FC | 	wrlong	_var01, objptr
1a030     73 01 00 FF 
1a034     13 01 06 F6 | 	mov	_var01, ##@LR__5194
1a038     04 E4 05 F1 | 	add	objptr, #4
1a03c     F2 00 62 FC | 	wrlong	_var01, objptr
1a040     73 01 00 FF 
1a044     32 01 06 F6 | 	mov	_var01, ##@LR__5195
1a048     04 E4 05 F1 | 	add	objptr, #4
1a04c     F2 00 62 FC | 	wrlong	_var01, objptr
1a050     73 01 00 FF 
1a054     41 01 06 F6 | 	mov	_var01, ##@LR__5196
1a058     04 E4 05 F1 | 	add	objptr, #4
1a05c     F2 00 62 FC | 	wrlong	_var01, objptr
1a060     73 01 00 FF 
1a064     6F 01 06 F6 | 	mov	_var01, ##@LR__5197
1a068     04 E4 05 F1 | 	add	objptr, #4
1a06c     F2 00 62 FC | 	wrlong	_var01, objptr
1a070     73 01 00 FF 
1a074     7D 01 06 F6 | 	mov	_var01, ##@LR__5198
1a078     04 E4 05 F1 | 	add	objptr, #4
1a07c     F2 00 62 FC | 	wrlong	_var01, objptr
1a080     73 01 00 FF 
1a084     92 01 06 F6 | 	mov	_var01, ##@LR__5199
1a088     04 E4 05 F1 | 	add	objptr, #4
1a08c     F2 00 62 FC | 	wrlong	_var01, objptr
1a090     73 01 00 FF 
1a094     B6 01 06 F6 | 	mov	_var01, ##@LR__5200
1a098     04 E4 05 F1 | 	add	objptr, #4
1a09c     F2 00 62 FC | 	wrlong	_var01, objptr
1a0a0     73 01 00 FF 
1a0a4     CD 01 06 F6 | 	mov	_var01, ##@LR__5201
1a0a8     04 E4 05 F1 | 	add	objptr, #4
1a0ac     F2 00 62 FC | 	wrlong	_var01, objptr
1a0b0     73 01 00 FF 
1a0b4     E0 01 06 F6 | 	mov	_var01, ##@LR__5202
1a0b8     04 E4 05 F1 | 	add	objptr, #4
1a0bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a0c0     73 01 00 FF 
1a0c4     F7 01 06 F6 | 	mov	_var01, ##@LR__5203
1a0c8     04 E4 05 F1 | 	add	objptr, #4
1a0cc     F2 00 62 FC | 	wrlong	_var01, objptr
1a0d0     65 00 00 FF 
1a0d4     30 E5 85 F1 | 	sub	objptr, ##52016
1a0d8                 | _init_error_strings_ret
1a0d8     2D 00 64 FD | 	ret
1a0dc                 | 
1a0dc                 | '         
1a0dc                 | ' sub printerror(err as integer)
1a0dc                 | _printerror
1a0dc     01 4A 05 F6 | 	mov	COUNT_, #1
1a0e0     A8 00 A0 FD | 	call	#pushregs_
1a0e4     09 1F 02 F6 | 	mov	local01, arg01
1a0e8     74 01 00 FF 
1a0ec     10 12 06 F6 | 	mov	arg01, ##@LR__5204
1a0f0     78 31 B0 FD | 	call	#_hg010b_spin2_write
1a0f4     0F 13 02 F6 | 	mov	arg01, local01
1a0f8     E0 34 B0 FD | 	call	#_hg010b_spin2_inttostr
1a0fc     FD 12 02 F6 | 	mov	arg01, result1
1a100     68 31 B0 FD | 	call	#_hg010b_spin2_write
1a104     74 01 00 FF 
1a108     17 12 06 F6 | 	mov	arg01, ##@LR__5205
1a10c     5C 31 B0 FD | 	call	#_hg010b_spin2_write
1a110     02 1E 66 F0 | 	shl	local01, #2
1a114     65 00 00 FF 
1a118     6C E4 05 F1 | 	add	objptr, ##51820
1a11c     F2 1E 02 F1 | 	add	local01, objptr
1a120     0F 13 02 FB | 	rdlong	arg01, local01
1a124     65 00 00 FF 
1a128     6C E4 85 F1 | 	sub	objptr, ##51820
1a12c                 | ' 
1a12c                 | ' write(text)
1a12c     3C 31 B0 FD | 	call	#_hg010b_spin2_write
1a130                 | ' crlf
1a130     04 34 B0 FD | 	call	#_hg010b_spin2_crlf
1a134     A7 F0 03 F6 | 	mov	ptra, fp
1a138     B2 00 A0 FD | 	call	#popregs_
1a13c                 | _printerror_ret
1a13c     2D 00 64 FD | 	ret
1a140                 | 
1a140                 | ' 
1a140                 | ' '' ------------------------------- Hardware start/stop/initialization 
1a140                 | ' 
1a140                 | ' sub startpsram
1a140                 | _startpsram
1a140     00 12 06 F6 | 	mov	arg01, #0
1a144     0A 14 C6 F9 | 	decod	arg02, #10
1a148     0B 16 06 F6 | 	mov	arg03, #11
1a14c     07 18 06 F6 | 	mov	arg04, #7
1a150     0B 00 00 FF 
1a154     CC E4 05 F1 | 	add	objptr, ##5836
1a158     8C 35 B0 FD | 	call	#_psram_spin2_startx
1a15c     4B 00 00 FF 
1a160     2C E5 05 F1 | 	add	objptr, ##38700
1a164     F2 FA 61 FC | 	wrlong	result1, objptr
1a168                 | '     return $7FF00 + cog*12
1a168     0C E4 05 F1 | 	add	objptr, #12
1a16c     FF 03 80 FF 
1a170     F2 00 6A FC | 	wrlong	##524032, objptr
1a174     57 00 00 FF 
1a178     04 E4 85 F1 | 	sub	objptr, ##44548
1a17c                 | _startpsram_ret
1a17c     2D 00 64 FD | 	ret
1a180                 | 
1a180                 | ' 
1a180                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1a180                 | _startvideo
1a180     01 4A 05 F6 | 	mov	COUNT_, #1
1a184     A8 00 A0 FD | 	call	#pushregs_
1a188     57 00 00 FF 
1a18c     04 E4 05 F1 | 	add	objptr, ##44548
1a190     F2 18 02 FB | 	rdlong	arg04, objptr
1a194     57 00 00 FF 
1a198     04 E4 85 F1 | 	sub	objptr, ##44548
1a19c     0A 13 02 F6 | 	mov	arg01, arg02
1a1a0     0C 15 02 F6 | 	mov	arg02, arg04
1a1a4     BC 18 B0 FD | 	call	#_hg010b_spin2_start
1a1a8     56 00 00 FF 
1a1ac     F0 E5 05 F1 | 	add	objptr, ##44528
1a1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1a1b4                 | ' 
1a1b4                 | ' videocog=v.start(pin,mbox)
1a1b4                 | ' 
1a1b4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1a1b4     00 1E 06 F6 | 	mov	local01, #0
1a1b8     4B 00 00 FF 
1a1bc     24 E5 85 F1 | 	sub	objptr, ##38692
1a1c0                 | LR__2060
1a1c0     0F 13 02 F6 | 	mov	arg01, local01
1a1c4     00 28 00 FF 
1a1c8     00 14 06 F6 | 	mov	arg02, ##5242880
1a1cc     70 39 B0 FD | 	call	#_psram_spin2_setQos
1a1d0     01 1E 06 F1 | 	add	local01, #1
1a1d4     08 1E 56 F2 | 	cmps	local01, #8 wc
1a1d8     E4 FF 9F CD |  if_b	jmp	#LR__2060
1a1dc     4B 00 00 FF 
1a1e0     24 E5 05 F1 | 	add	objptr, ##38692
1a1e4     F2 12 02 FB | 	rdlong	arg01, objptr
1a1e8     7A 00 02 FF 
1a1ec     00 14 06 F6 | 	mov	arg02, ##67171328
1a1f0     4B 00 00 FF 
1a1f4     24 E5 85 F1 | 	sub	objptr, ##38692
1a1f8     44 39 B0 FD | 	call	#_psram_spin2_setQos
1a1fc     0B 00 00 FF 
1a200     CC E4 85 F1 | 	sub	objptr, ##5836
1a204                 | ' psram.setQoS(videocog, $0400f400) 
1a204                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1a204     F2 14 02 F6 | 	mov	arg02, objptr
1a208     D4 14 26 F4 | 	bith	arg02, #212
1a20c     00 16 06 F6 | 	mov	arg03, #0
1a210     00 18 06 F6 | 	mov	arg04, #0
1a214     00 12 06 F6 | 	mov	arg01, #0
1a218     C4 4D B0 FD | 	call	#__system___basic_open
1a21c                 | ' return videocog
1a21c     56 00 00 FF 
1a220     F0 E5 05 F1 | 	add	objptr, ##44528
1a224     F2 FA 01 FB | 	rdlong	result1, objptr
1a228     56 00 00 FF 
1a22c     F0 E5 85 F1 | 	sub	objptr, ##44528
1a230     A7 F0 03 F6 | 	mov	ptra, fp
1a234     B2 00 A0 FD | 	call	#popregs_
1a238                 | _startvideo_ret
1a238     2D 00 64 FD | 	ret
1a23c                 | 
1a23c                 | ' 
1a23c                 | ' 
1a23c                 | ' 
1a23c                 | ' 
1a23c                 | ' '' ------------------------------- Convenient psram peek/poke
1a23c                 | ' 
1a23c                 | ' sub pslpoke(addr as ulong,value as ulong)
1a23c                 | _pslpoke
1a23c     00 4A 05 F6 | 	mov	COUNT_, #0
1a240     A8 00 A0 FD | 	call	#pushregs_
1a244     08 F0 07 F1 | 	add	ptra, #8
1a248     A7 12 62 FC | 	wrlong	arg01, fp
1a24c     04 4E 05 F1 | 	add	fp, #4
1a250     A7 14 62 FC | 	wrlong	arg02, fp
1a254     A7 12 02 F6 | 	mov	arg01, fp
1a258     04 4E 85 F1 | 	sub	fp, #4
1a25c     A7 14 02 FB | 	rdlong	arg02, fp
1a260     04 16 06 F6 | 	mov	arg03, #4
1a264     0B 00 00 FF 
1a268     CC E4 05 F1 | 	add	objptr, ##5836
1a26c     40 37 B0 FD | 	call	#_psram_spin2_write
1a270     0B 00 00 FF 
1a274     CC E4 85 F1 | 	sub	objptr, ##5836
1a278     A7 F0 03 F6 | 	mov	ptra, fp
1a27c     B2 00 A0 FD | 	call	#popregs_
1a280                 | _pslpoke_ret
1a280     2D 00 64 FD | 	ret
1a284                 | 
1a284                 | ' 
1a284                 | ' sub psdpoke(addr as ulong,value as ulong)
1a284                 | _psdpoke
1a284     00 4A 05 F6 | 	mov	COUNT_, #0
1a288     A8 00 A0 FD | 	call	#pushregs_
1a28c     08 F0 07 F1 | 	add	ptra, #8
1a290     A7 12 62 FC | 	wrlong	arg01, fp
1a294     04 4E 05 F1 | 	add	fp, #4
1a298     A7 14 62 FC | 	wrlong	arg02, fp
1a29c     A7 12 02 F6 | 	mov	arg01, fp
1a2a0     04 4E 85 F1 | 	sub	fp, #4
1a2a4     A7 14 02 FB | 	rdlong	arg02, fp
1a2a8     02 16 06 F6 | 	mov	arg03, #2
1a2ac     0B 00 00 FF 
1a2b0     CC E4 05 F1 | 	add	objptr, ##5836
1a2b4     F8 36 B0 FD | 	call	#_psram_spin2_write
1a2b8     0B 00 00 FF 
1a2bc     CC E4 85 F1 | 	sub	objptr, ##5836
1a2c0     A7 F0 03 F6 | 	mov	ptra, fp
1a2c4     B2 00 A0 FD | 	call	#popregs_
1a2c8                 | _psdpoke_ret
1a2c8     2D 00 64 FD | 	ret
1a2cc                 | 
1a2cc                 | ' 
1a2cc                 | ' sub pspoke(addr as ulong,value as ulong)
1a2cc                 | _pspoke
1a2cc     00 4A 05 F6 | 	mov	COUNT_, #0
1a2d0     A8 00 A0 FD | 	call	#pushregs_
1a2d4     08 F0 07 F1 | 	add	ptra, #8
1a2d8     A7 12 62 FC | 	wrlong	arg01, fp
1a2dc     04 4E 05 F1 | 	add	fp, #4
1a2e0     A7 14 62 FC | 	wrlong	arg02, fp
1a2e4     A7 12 02 F6 | 	mov	arg01, fp
1a2e8     04 4E 85 F1 | 	sub	fp, #4
1a2ec     A7 14 02 FB | 	rdlong	arg02, fp
1a2f0     01 16 06 F6 | 	mov	arg03, #1
1a2f4     0B 00 00 FF 
1a2f8     CC E4 05 F1 | 	add	objptr, ##5836
1a2fc     B0 36 B0 FD | 	call	#_psram_spin2_write
1a300     0B 00 00 FF 
1a304     CC E4 85 F1 | 	sub	objptr, ##5836
1a308     A7 F0 03 F6 | 	mov	ptra, fp
1a30c     B2 00 A0 FD | 	call	#popregs_
1a310                 | _pspoke_ret
1a310     2D 00 64 FD | 	ret
1a314                 | 
1a314                 | ' 
1a314                 | ' function pspeek(adr as ulong) as ubyte
1a314                 | _pspeek
1a314     00 4A 05 F6 | 	mov	COUNT_, #0
1a318     A8 00 A0 FD | 	call	#pushregs_
1a31c     0C F0 07 F1 | 	add	ptra, #12
1a320     04 4E 05 F1 | 	add	fp, #4
1a324     A7 12 62 FC | 	wrlong	arg01, fp
1a328     04 4E 05 F1 | 	add	fp, #4
1a32c     A7 12 02 F6 | 	mov	arg01, fp
1a330     04 4E 85 F1 | 	sub	fp, #4
1a334     A7 14 02 FB | 	rdlong	arg02, fp
1a338     04 4E 85 F1 | 	sub	fp, #4
1a33c     01 16 06 F6 | 	mov	arg03, #1
1a340     0B 00 00 FF 
1a344     CC E4 05 F1 | 	add	objptr, ##5836
1a348     C8 35 B0 FD | 	call	#_psram_spin2_read1
1a34c     0B 00 00 FF 
1a350     CC E4 85 F1 | 	sub	objptr, ##5836
1a354                 | ' psram.read1(varptr(res),adr,1)
1a354                 | ' return res
1a354     08 4E 05 F1 | 	add	fp, #8
1a358     A7 FA C1 FA | 	rdbyte	result1, fp
1a35c     08 4E 85 F1 | 	sub	fp, #8
1a360     A7 F0 03 F6 | 	mov	ptra, fp
1a364     B2 00 A0 FD | 	call	#popregs_
1a368                 | _pspeek_ret
1a368     2D 00 64 FD | 	ret
1a36c                 | 
1a36c                 | ' 
1a36c                 | ' function pslpeek(adr as ulong) as ulong
1a36c                 | _pslpeek
1a36c     00 4A 05 F6 | 	mov	COUNT_, #0
1a370     A8 00 A0 FD | 	call	#pushregs_
1a374     0C F0 07 F1 | 	add	ptra, #12
1a378     04 4E 05 F1 | 	add	fp, #4
1a37c     A7 12 62 FC | 	wrlong	arg01, fp
1a380     04 4E 05 F1 | 	add	fp, #4
1a384     A7 12 02 F6 | 	mov	arg01, fp
1a388     04 4E 85 F1 | 	sub	fp, #4
1a38c     A7 14 02 FB | 	rdlong	arg02, fp
1a390     04 4E 85 F1 | 	sub	fp, #4
1a394     04 16 06 F6 | 	mov	arg03, #4
1a398     0B 00 00 FF 
1a39c     CC E4 05 F1 | 	add	objptr, ##5836
1a3a0     70 35 B0 FD | 	call	#_psram_spin2_read1
1a3a4     0B 00 00 FF 
1a3a8     CC E4 85 F1 | 	sub	objptr, ##5836
1a3ac                 | ' psram.read1(varptr(res),adr,4)
1a3ac                 | ' return res
1a3ac     08 4E 05 F1 | 	add	fp, #8
1a3b0     A7 FA 01 FB | 	rdlong	result1, fp
1a3b4     08 4E 85 F1 | 	sub	fp, #8
1a3b8     A7 F0 03 F6 | 	mov	ptra, fp
1a3bc     B2 00 A0 FD | 	call	#popregs_
1a3c0                 | _pslpeek_ret
1a3c0     2D 00 64 FD | 	ret
1a3c4                 | 
1a3c4                 | ' 
1a3c4                 | ' function psdpeek(adr as ulong) as ulong
1a3c4                 | _psdpeek
1a3c4     00 4A 05 F6 | 	mov	COUNT_, #0
1a3c8     A8 00 A0 FD | 	call	#pushregs_
1a3cc     0C F0 07 F1 | 	add	ptra, #12
1a3d0     04 4E 05 F1 | 	add	fp, #4
1a3d4     A7 12 62 FC | 	wrlong	arg01, fp
1a3d8     04 4E 05 F1 | 	add	fp, #4
1a3dc     A7 12 02 F6 | 	mov	arg01, fp
1a3e0     04 4E 85 F1 | 	sub	fp, #4
1a3e4     A7 14 02 FB | 	rdlong	arg02, fp
1a3e8     04 4E 85 F1 | 	sub	fp, #4
1a3ec     02 16 06 F6 | 	mov	arg03, #2
1a3f0     0B 00 00 FF 
1a3f4     CC E4 05 F1 | 	add	objptr, ##5836
1a3f8     18 35 B0 FD | 	call	#_psram_spin2_read1
1a3fc     0B 00 00 FF 
1a400     CC E4 85 F1 | 	sub	objptr, ##5836
1a404                 | ' psram.read1(varptr(res),adr,2)
1a404                 | ' return res
1a404     08 4E 05 F1 | 	add	fp, #8
1a408     A7 FA E1 FA | 	rdword	result1, fp
1a40c     08 4E 85 F1 | 	sub	fp, #8
1a410     A7 F0 03 F6 | 	mov	ptra, fp
1a414     B2 00 A0 FD | 	call	#popregs_
1a418                 | _psdpeek_ret
1a418     2D 00 64 FD | 	ret
1a41c                 | 
1a41c                 | ' 
1a41c                 | ' '' ------------------------------- USB keyboard scan to char translator
1a41c                 | ' 
1a41c                 | ' function scantochar(key)
1a41c                 | _scantochar
1a41c                 | ' 
1a41c                 | ' select case (key shr 8) and 255
1a41c     09 01 02 F6 | 	mov	_var01, arg01
1a420     08 00 C6 F0 | 	sar	_var01, #8
1a424     FF 00 0E F5 | 	and	_var01, #255 wz
1a428     24 00 90 AD |  if_e	jmp	#LR__2070
1a42c     02 00 0E F2 | 	cmp	_var01, #2 wz
1a430     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1a434     30 00 90 AD |  if_e	jmp	#LR__2071
1a438     40 00 0E F2 | 	cmp	_var01, #64 wz
1a43c     44 00 90 AD |  if_e	jmp	#LR__2072
1a440     42 00 0E F2 | 	cmp	_var01, #66 wz
1a444     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1a448     70 00 90 5D |  if_ne	jmp	#LR__2074
1a44c     50 00 90 FD | 	jmp	#LR__2073
1a450                 | LR__2070
1a450     09 FB 01 F6 | 	mov	result1, arg01
1a454     7F FA 05 F5 | 	and	result1, #127
1a458     02 FA 65 F0 | 	shl	result1, #2
1a45c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1a460     FD FA C1 FA | 	rdbyte	result1, result1
1a464     54 00 90 FD | 	jmp	#_scantochar_ret
1a468                 | LR__2071
1a468     09 FB 01 F6 | 	mov	result1, arg01
1a46c     7F FA 05 F5 | 	and	result1, #127
1a470     02 FA 65 F0 | 	shl	result1, #2
1a474     01 FA 05 F1 | 	add	result1, #1
1a478     F5 FA 01 F1 | 	add	result1, ptr__dat__
1a47c     FD FA C1 FA | 	rdbyte	result1, result1
1a480     38 00 90 FD | 	jmp	#_scantochar_ret
1a484                 | LR__2072
1a484     09 FB 01 F6 | 	mov	result1, arg01
1a488     7F FA 05 F5 | 	and	result1, #127
1a48c     02 FA 65 F0 | 	shl	result1, #2
1a490     02 FA 05 F1 | 	add	result1, #2
1a494     F5 FA 01 F1 | 	add	result1, ptr__dat__
1a498     FD FA C1 FA | 	rdbyte	result1, result1
1a49c     1C 00 90 FD | 	jmp	#_scantochar_ret
1a4a0                 | LR__2073
1a4a0     09 FB 01 F6 | 	mov	result1, arg01
1a4a4     7F FA 05 F5 | 	and	result1, #127
1a4a8     02 FA 65 F0 | 	shl	result1, #2
1a4ac     03 FA 05 F1 | 	add	result1, #3
1a4b0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1a4b4     FD FA C1 FA | 	rdbyte	result1, result1
1a4b8     00 00 90 FD | 	jmp	#_scantochar_ret
1a4bc                 | LR__2074
1a4bc                 | _scantochar_ret
1a4bc     2D 00 64 FD | 	ret
1a4c0                 | 
1a4c0                 | _program
1a4c0     13 4A 05 F6 | 	mov	COUNT_, #19
1a4c4     A8 00 A0 FD | 	call	#pushregs_
1a4c8     74 FC BF FD | 	call	#_startpsram
1a4cc     40 12 06 F6 | 	mov	arg01, #64
1a4d0     00 14 06 F6 | 	mov	arg02, #0
1a4d4     00 16 06 F6 | 	mov	arg03, #0
1a4d8     A4 FC BF FD | 	call	#_startvideo
1a4dc     00 12 06 F6 | 	mov	arg01, #0
1a4e0     00 14 06 F6 | 	mov	arg02, #0
1a4e4     00 16 06 F6 | 	mov	arg03, #0
1a4e8     0B 00 00 FF 
1a4ec     CC E4 05 F1 | 	add	objptr, ##5836
1a4f0     FC 39 B0 FD | 	call	#_audio096_spin2_start
1a4f4     FE 1C 02 F6 | 	mov	arg06, result2
1a4f8     4B 00 00 FF 
1a4fc     20 E5 05 F1 | 	add	objptr, ##38688
1a500     F2 FA 61 FC | 	wrlong	result1, objptr
1a504     14 E4 05 F1 | 	add	objptr, #20
1a508     F2 1C 62 FC | 	wrlong	arg06, objptr
1a50c     57 00 00 FF 
1a510     00 E4 85 F1 | 	sub	objptr, ##44544
1a514     32 12 06 F6 | 	mov	arg01, #50
1a518     10 43 B0 FD | 	call	#__system___waitms
1a51c     57 00 00 FF 
1a520     00 E4 05 F1 | 	add	objptr, ##44544
1a524     F2 12 02 FB | 	rdlong	arg01, objptr
1a528     57 00 00 FF 
1a52c     00 E4 85 F1 | 	sub	objptr, ##44544
1a530     14 12 06 F1 | 	add	arg01, #20
1a534     20 00 80 FF 
1a538     09 01 58 FC | 	wrword	##16384, arg01
1a53c     08 37 B0 FD | 	call	#_usbnew_spin2_start
1a540     56 00 00 FF 
1a544     F4 E5 05 F1 | 	add	objptr, ##44532
1a548     F2 FA 61 FC | 	wrlong	result1, objptr
1a54c                 | '   mouse_limits[0] := xlim
1a54c     0F 00 00 FF 
1a550     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1a554     01 00 80 FF 
1a558     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1a55c                 | '   mouse_limits[1] := ylim
1a55c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1a560     01 00 80 FF 
1a564     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1a568     56 00 00 FF 
1a56c     E3 E4 85 F1 | 	sub	objptr, ##44259
1a570     F2 12 02 F6 | 	mov	arg01, objptr
1a574     11 E5 85 F1 | 	sub	objptr, #273
1a578     C4 12 06 F1 | 	add	arg01, #196
1a57c                 | '   mouse_outptr := ptr
1a57c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1a580     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1a584     0F 00 00 FF 
1a588     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1a58c     0E 00 00 FF 
1a590     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1a594     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1a598     0E 00 00 FF 
1a59c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1a5a0     10 12 06 F6 | 	mov	arg01, #16
1a5a4     54 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1a5a8     10 12 06 F6 | 	mov	arg01, #16
1a5ac     20 14 06 F6 | 	mov	arg02, #32
1a5b0     20 16 06 F6 | 	mov	arg03, #32
1a5b4     D4 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1a5b8     09 12 C6 F9 | 	decod	arg01, #9
1a5bc     2C 15 06 F6 | 	mov	arg02, #300
1a5c0     DC 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1a5c4     F2 1C 02 F6 | 	mov	arg06, objptr
1a5c8     79 00 00 FF 
1a5cc     D8 E5 05 F1 | 	add	objptr, ##62424
1a5d0     F2 1A 02 F6 | 	mov	arg05, objptr
1a5d4     0D 1D 62 FC | 	wrlong	arg06, arg05
1a5d8     04 1A 06 F1 | 	add	arg05, #4
1a5dc     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1a5e0     EF 14 02 F6 | 	mov	arg02, entryptr__
1a5e4     F2 1E 02 F6 | 	mov	local01, objptr
1a5e8     1E FA 05 F6 | 	mov	result1, #30
1a5ec     28 1E 62 FD | 	setq	local01
1a5f0     0A FB F1 FC | 	coginit	result1, arg02 wc
1a5f4     01 FA 65 C6 |  if_b	neg	result1, #1
1a5f8     04 E4 85 F1 | 	sub	objptr, #4
1a5fc     F2 FA 61 FC | 	wrlong	result1, objptr
1a600     01 00 00 FF 
1a604     90 E4 05 F1 | 	add	objptr, ##656
1a608     F2 00 68 FC | 	wrlong	#0, objptr
1a60c     24 00 00 FF 
1a610     40 E4 85 F1 | 	sub	objptr, ##18496
1a614     F2 04 68 FC | 	wrlong	#2, objptr
1a618     04 E4 05 F1 | 	add	objptr, #4
1a61c     F2 26 69 FC | 	wrlong	#147, objptr
1a620     04 E4 05 F1 | 	add	objptr, #4
1a624     F2 34 69 FC | 	wrlong	#154, objptr
1a628     04 E4 05 F1 | 	add	objptr, #4
1a62c     F2 08 68 FC | 	wrlong	#4, objptr
1a630     04 E4 85 F1 | 	sub	objptr, #4
1a634     F2 1C 02 FB | 	rdlong	arg06, objptr
1a638     14 E4 85 F1 | 	sub	objptr, #20
1a63c     F2 1C 62 FC | 	wrlong	arg06, objptr
1a640     04 E4 05 F1 | 	add	objptr, #4
1a644     F2 00 68 FC | 	wrlong	#0, objptr
1a648     04 E4 05 F1 | 	add	objptr, #4
1a64c     F2 00 68 FC | 	wrlong	#0, objptr
1a650     22 00 00 FF 
1a654     B0 E5 05 F1 | 	add	objptr, ##17840
1a658     F2 02 68 FC | 	wrlong	#1, objptr
1a65c     01 00 00 FF 
1a660     9C E4 05 F1 | 	add	objptr, ##668
1a664     F2 00 68 FC | 	wrlong	#0, objptr
1a668     01 00 00 FF 
1a66c     00 EA 05 F1 | 	add	ptr__dat__, ##512
1a670     08 E4 05 F1 | 	add	objptr, #8
1a674     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1a678     04 E4 85 F1 | 	sub	objptr, #4
1a67c     03 00 80 FF 
1a680     F2 3C 69 FC | 	wrlong	##1694, objptr
1a684     16 00 00 FF 
1a688     1C E4 85 F1 | 	sub	objptr, ##11292
1a68c     F2 18 68 FC | 	wrlong	#12, objptr
1a690     65 00 00 FF 
1a694     54 E4 85 F1 | 	sub	objptr, ##51796
1a698     01 00 00 FF 
1a69c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1a6a0     00 DE BF FD | 	call	#_init_commands
1a6a4     04 F7 BF FD | 	call	#_init_error_strings
1a6a8     A0 EE BF FD | 	call	#_init_audio
1a6ac     F8 3A BF FD | 	call	#_do_new
1a6b0     57 00 00 FF 
1a6b4     2C E4 05 F1 | 	add	objptr, ##44588
1a6b8     F2 12 02 FB | 	rdlong	arg01, objptr
1a6bc     04 E4 85 F1 | 	sub	objptr, #4
1a6c0     F2 14 02 FB | 	rdlong	arg02, objptr
1a6c4     57 00 00 FF 
1a6c8     28 E4 85 F1 | 	sub	objptr, ##44584
1a6cc     DC 27 B0 FD | 	call	#_hg010b_spin2_cls
1a6d0     57 00 00 FF 
1a6d4     30 E4 05 F1 | 	add	objptr, ##44592
1a6d8     F2 12 02 FB | 	rdlong	arg01, objptr
1a6dc     57 00 00 FF 
1a6e0     30 E4 85 F1 | 	sub	objptr, ##44592
1a6e4     74 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1a6e8                 | ' 
1a6e8                 | ' leading_spaces:=amount
1a6e8     01 00 00 FF 
1a6ec     B6 E4 05 F1 | 	add	objptr, ##694
1a6f0     F2 04 68 FC | 	wrlong	#2, objptr
1a6f4     01 00 00 FF 
1a6f8     B6 E4 85 F1 | 	sub	objptr, ##694
1a6fc     74 01 00 FF 
1a700     1A 20 06 F6 | 	mov	local02, ##@LR__5206
1a704     3D 12 06 F6 | 	mov	arg01, #61
1a708     3C 14 06 F6 | 	mov	arg02, #60
1a70c     3B 16 06 F6 | 	mov	arg03, #59
1a710     3A 18 06 F6 | 	mov	arg04, #58
1a714     4C 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1a718     FD 14 02 F6 | 	mov	arg02, result1
1a71c     10 13 02 F6 | 	mov	arg01, local02
1a720     E0 41 B0 FD | 	call	#__system___mount
1a724     74 01 00 FF 
1a728     1E 12 06 F6 | 	mov	arg01, ##@LR__5207
1a72c     94 44 B0 FD | 	call	#__system___chdir
1a730     74 01 00 FF 
1a734     26 20 06 F6 | 	mov	local02, ##@LR__5208
1a738     72 00 00 FF 
1a73c     84 E4 05 F1 | 	add	objptr, ##58500
1a740     F2 20 62 FC | 	wrlong	local02, objptr
1a744     1B 00 00 FF 
1a748     60 E4 85 F1 | 	sub	objptr, ##13920
1a74c     F2 12 02 FB | 	rdlong	arg01, objptr
1a750     57 00 00 FF 
1a754     24 E4 85 F1 | 	sub	objptr, ##44580
1a758     01 12 66 F0 | 	shl	arg01, #1
1a75c     01 14 06 F6 | 	mov	arg02, #1
1a760     38 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a764                 | ' 
1a764                 | ' init_commands
1a764                 | ' init_error_strings
1a764                 | ' init_audio
1a764                 | ' do_new
1a764                 | ' 
1a764                 | ' 
1a764                 | ' cls(ink, paper)
1a764                 | ' v.setfontfamily(font) 				' use ST Mono font
1a764                 | ' v.setleadingspaces(2)
1a764                 | ' mount "/sd", _vfs_open_sdcard()
1a764                 | ' chdir "/sd/bas"
1a764                 | ' 
1a764                 | ' currentdir$="/sd/bas"
1a764                 | ' 
1a764                 | ' position 2*editor_spaces,1 : print ver$
1a764     00 12 06 F6 | 	mov	arg01, #0
1a768     60 97 B0 FD | 	call	#__system___getiolock_0475
1a76c     FD 12 02 F6 | 	mov	arg01, result1
1a770     C4 3D B0 FD | 	call	#__system___lockmem
1a774     18 00 00 FF 
1a778     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1a77c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1a780     18 00 00 FF 
1a784     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1a788     00 12 06 F6 | 	mov	arg01, #0
1a78c     00 16 06 F6 | 	mov	arg03, #0
1a790     A8 4A B0 FD | 	call	#__system___basic_print_string
1a794     00 12 06 F6 | 	mov	arg01, #0
1a798     0A 14 06 F6 | 	mov	arg02, #10
1a79c     00 16 06 F6 | 	mov	arg03, #0
1a7a0     40 4A B0 FD | 	call	#__system___basic_print_char
1a7a4     00 12 06 F6 | 	mov	arg01, #0
1a7a8     20 97 B0 FD | 	call	#__system___getiolock_0475
1a7ac     FD 00 68 FC | 	wrlong	#0, result1
1a7b0     7B 00 00 FF 
1a7b4     68 E4 05 F1 | 	add	objptr, ##63080
1a7b8     F2 12 02 FB | 	rdlong	arg01, objptr
1a7bc     18 00 00 FF 
1a7c0     1C E4 85 F1 | 	sub	objptr, ##12316
1a7c4     F2 20 02 FB | 	rdlong	local02, objptr
1a7c8     63 00 00 FF 
1a7cc     4C E4 85 F1 | 	sub	objptr, ##50764
1a7d0     10 13 82 F1 | 	sub	arg01, local02
1a7d4     00 14 06 F6 | 	mov	arg02, #0
1a7d8     0A 16 06 F6 | 	mov	arg03, #10
1a7dc     F0 5F B0 FD | 	call	#__system__Number_S
1a7e0     FD 12 02 F6 | 	mov	arg01, result1
1a7e4     74 01 00 FF 
1a7e8     2E 14 06 F6 | 	mov	arg02, ##@LR__5209
1a7ec     A4 3D B0 FD | 	call	#__system___string_concat
1a7f0     FD 20 02 F6 | 	mov	local02, result1
1a7f4     79 00 00 FF 
1a7f8     CC E5 05 F1 | 	add	objptr, ##62412
1a7fc     F2 20 62 FC | 	wrlong	local02, objptr
1a800     79 00 00 FF 
1a804     CC E5 85 F1 | 	sub	objptr, ##62412
1a808                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1a808     00 12 06 F6 | 	mov	arg01, #0
1a80c     BC 96 B0 FD | 	call	#__system___getiolock_0475
1a810     FD 12 02 F6 | 	mov	arg01, result1
1a814     20 3D B0 FD | 	call	#__system___lockmem
1a818     79 00 00 FF 
1a81c     CC E5 05 F1 | 	add	objptr, ##62412
1a820     F2 14 02 FB | 	rdlong	arg02, objptr
1a824     79 00 00 FF 
1a828     CC E5 85 F1 | 	sub	objptr, ##62412
1a82c     00 12 06 F6 | 	mov	arg01, #0
1a830     00 16 06 F6 | 	mov	arg03, #0
1a834     04 4A B0 FD | 	call	#__system___basic_print_string
1a838     00 12 06 F6 | 	mov	arg01, #0
1a83c     0A 14 06 F6 | 	mov	arg02, #10
1a840     00 16 06 F6 | 	mov	arg03, #0
1a844     9C 49 B0 FD | 	call	#__system___basic_print_char
1a848     00 12 06 F6 | 	mov	arg01, #0
1a84c     7C 96 B0 FD | 	call	#__system___getiolock_0475
1a850     FD 00 68 FC | 	wrlong	#0, result1
1a854     57 00 00 FF 
1a858     24 E4 05 F1 | 	add	objptr, ##44580
1a85c     F2 12 02 FB | 	rdlong	arg01, objptr
1a860     57 00 00 FF 
1a864     24 E4 85 F1 | 	sub	objptr, ##44580
1a868     01 12 66 F0 | 	shl	arg01, #1
1a86c     04 14 06 F6 | 	mov	arg02, #4
1a870     28 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a874                 | ' position 2*editor_spaces,4 : print "Ready"
1a874     00 12 06 F6 | 	mov	arg01, #0
1a878     50 96 B0 FD | 	call	#__system___getiolock_0475
1a87c     FD 12 02 F6 | 	mov	arg01, result1
1a880     B4 3C B0 FD | 	call	#__system___lockmem
1a884     74 01 00 FF 
1a888     40 14 06 F6 | 	mov	arg02, ##@LR__5210
1a88c     00 12 06 F6 | 	mov	arg01, #0
1a890     00 16 06 F6 | 	mov	arg03, #0
1a894     A4 49 B0 FD | 	call	#__system___basic_print_string
1a898     FD 22 02 F6 | 	mov	local03, result1
1a89c     00 12 06 F6 | 	mov	arg01, #0
1a8a0     0A 14 06 F6 | 	mov	arg02, #10
1a8a4     00 16 06 F6 | 	mov	arg03, #0
1a8a8     38 49 B0 FD | 	call	#__system___basic_print_char
1a8ac     01 24 06 F6 | 	mov	local04, #1
1a8b0     00 12 06 F6 | 	mov	arg01, #0
1a8b4     14 96 B0 FD | 	call	#__system___getiolock_0475
1a8b8     FD 00 68 FC | 	wrlong	#0, result1
1a8bc     00 26 06 F6 | 	mov	local05, #0
1a8c0     00 14 06 F6 | 	mov	arg02, #0
1a8c4     01 14 D6 F7 | 	test	arg02, #1 wc
1a8c8     5A 4C 64 FD | 	drvc	#38
1a8cc     01 14 D6 F7 | 	test	arg02, #1 wc
1a8d0     5A 4E 64 FD | 	drvc	#39
1a8d4     74 01 00 FF 
1a8d8     46 20 06 F6 | 	mov	local02, ##@LR__5211
1a8dc     7B 00 00 FF 
1a8e0     94 E4 05 F1 | 	add	objptr, ##63124
1a8e4     F2 20 62 FC | 	wrlong	local02, objptr
1a8e8     04 E4 05 F1 | 	add	objptr, #4
1a8ec     FF FF FF FF 
1a8f0     F2 FE 6B FC | 	wrlong	##-1, objptr
1a8f4     7B 00 00 FF 
1a8f8     98 E4 85 F1 | 	sub	objptr, ##63128
1a8fc                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1a8fc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1a8fc                 | ' 
1a8fc                 | ' loadname="noname.bas"
1a8fc                 | ' do_insert=-1
1a8fc                 | ' 
1a8fc                 | ' 
1a8fc                 | ' '-------------------------------------------------------------------------------------------------------- 
1a8fc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1a8fc                 | ' '--------------------------------------------------------------------------------------------------------
1a8fc                 | ' 
1a8fc                 | ' do
1a8fc                 | LR__2080
1a8fc     01 12 06 F6 | 	mov	arg01, #1
1a900     38 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a904     07 12 06 F6 | 	mov	arg01, #7
1a908     0B 00 00 FF 
1a90c     CC E4 05 F1 | 	add	objptr, ##5836
1a910     24 39 B0 FD | 	call	#_audio096_spin2_stop
1a914     0B 00 00 FF 
1a918     CC E4 85 F1 | 	sub	objptr, ##5836
1a91c     20 34 B0 FD | 	call	#_usbnew_spin2_get_key
1a920     65 00 00 FF 
1a924     64 E4 05 F1 | 	add	objptr, ##51812
1a928     F2 FA 61 FC | 	wrlong	result1, objptr
1a92c                 | '   return hkbd_led_rep
1a92c     13 00 00 FF 
1a930     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1a934     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1a938     13 00 00 FF 
1a93c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1a940     16 00 00 FF 
1a944     38 E4 05 F1 | 	add	objptr, ##11320
1a948     F2 FA 61 FC | 	wrlong	result1, objptr
1a94c                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1a94c     16 00 00 FF 
1a950     38 E4 85 F1 | 	sub	objptr, ##11320
1a954     F2 20 02 FB | 	rdlong	local02, objptr
1a958     65 00 00 FF 
1a95c     64 E4 85 F1 | 	sub	objptr, ##51812
1a960     01 20 16 F2 | 	cmp	local02, #1 wc
1a964     BC 00 90 CD |  if_b	jmp	#LR__2081
1a968     65 00 00 FF 
1a96c     64 E4 05 F1 | 	add	objptr, ##51812
1a970     F2 24 02 FB | 	rdlong	local04, objptr
1a974     65 00 00 FF 
1a978     64 E4 85 F1 | 	sub	objptr, ##51812
1a97c     12 23 02 F6 | 	mov	local03, local04
1a980     04 22 16 F2 | 	cmp	local03, #4 wc
1a984     9C 00 90 3D |  if_ae	jmp	#LR__2081
1a988     79 00 00 FF 
1a98c     D0 E5 05 F1 | 	add	objptr, ##62416
1a990     F2 1E 02 FB | 	rdlong	local01, objptr
1a994     79 00 00 FF 
1a998     D0 E5 85 F1 | 	sub	objptr, ##62416
1a99c     0F 27 02 F6 | 	mov	local05, local01
1a9a0     01 26 0E F2 | 	cmp	local05, #1 wz
1a9a4     7C 00 90 5D |  if_ne	jmp	#LR__2081
1a9a8     04 00 00 FF 
1a9ac     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1a9b0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1a9b4     04 00 00 FF 
1a9b8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1a9bc     56 00 00 FF 
1a9c0     44 22 06 F6 | 	mov	local03, ##44100
1a9c4     0C 24 C6 F9 | 	decod	local04, #12
1a9c8     00 26 06 F6 | 	mov	local05, #0
1a9cc     03 00 00 FF 
1a9d0     DE 1E 06 F6 | 	mov	local01, ##1758
1a9d4     07 12 06 F6 | 	mov	arg01, #7
1a9d8     56 00 00 FF 
1a9dc     44 16 06 F6 | 	mov	arg03, ##44100
1a9e0     0C 18 C6 F9 | 	decod	arg04, #12
1a9e4     00 1A 06 F6 | 	mov	arg05, #0
1a9e8     03 00 00 FF 
1a9ec     DE 1C 06 F6 | 	mov	arg06, ##1758
1a9f0     0B 00 00 FF 
1a9f4     CC E4 05 F1 | 	add	objptr, ##5836
1a9f8     CC 36 B0 FD | 	call	#_audio096_spin2_play
1a9fc     0B 00 00 FF 
1aa00     CC E4 85 F1 | 	sub	objptr, ##5836
1aa04     0A 12 06 F6 | 	mov	arg01, #10
1aa08     20 3E B0 FD | 	call	#__system___waitms
1aa0c     07 12 06 F6 | 	mov	arg01, #7
1aa10     0B 00 00 FF 
1aa14     CC E4 05 F1 | 	add	objptr, ##5836
1aa18     1C 38 B0 FD | 	call	#_audio096_spin2_stop
1aa1c     0B 00 00 FF 
1aa20     CC E4 85 F1 | 	sub	objptr, ##5836
1aa24                 | LR__2081
1aa24                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1aa24     65 00 00 FF 
1aa28     64 E4 05 F1 | 	add	objptr, ##51812
1aa2c     F2 20 02 FB | 	rdlong	local02, objptr
1aa30     65 00 00 FF 
1aa34     64 E4 85 F1 | 	sub	objptr, ##51812
1aa38     04 20 16 F2 | 	cmp	local02, #4 wc
1aa3c     80 00 90 CD |  if_b	jmp	#LR__2082
1aa40     65 00 00 FF 
1aa44     64 E4 05 F1 | 	add	objptr, ##51812
1aa48     F2 24 02 FB | 	rdlong	local04, objptr
1aa4c     65 00 00 FF 
1aa50     64 E4 85 F1 | 	sub	objptr, ##51812
1aa54     12 23 02 F6 | 	mov	local03, local04
1aa58     00 00 40 FF 
1aa5c     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1aa60     65 00 00 CF 
1aa64     64 E4 05 C1 |  if_b	add	objptr, ##51812
1aa68     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1aa6c     65 00 00 CF 
1aa70     64 E4 85 C1 |  if_b	sub	objptr, ##51812
1aa74     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1aa78     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1aa7c     40 00 90 3D |  if_ae	jmp	#LR__2082
1aa80     65 00 00 FF 
1aa84     64 E4 05 F1 | 	add	objptr, ##51812
1aa88     F2 20 02 FB | 	rdlong	local02, objptr
1aa8c     04 E4 05 F1 | 	add	objptr, #4
1aa90     F2 20 62 FC | 	wrlong	local02, objptr
1aa94     16 00 00 FF 
1aa98     38 E4 05 F1 | 	add	objptr, ##11320
1aa9c     F2 02 68 FC | 	wrlong	#1, objptr
1aaa0     16 00 00 FF 
1aaa4     38 E4 85 F1 | 	sub	objptr, ##11320
1aaa8     F2 20 02 FB | 	rdlong	local02, objptr
1aaac     16 00 00 FF 
1aab0     3C E4 05 F1 | 	add	objptr, ##11324
1aab4     F2 20 62 FC | 	wrlong	local02, objptr
1aab8     7B 00 00 FF 
1aabc     A4 E4 85 F1 | 	sub	objptr, ##63140
1aac0                 | LR__2082
1aac0                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1aac0     65 00 00 FF 
1aac4     64 E4 05 F1 | 	add	objptr, ##51812
1aac8     F2 20 02 FB | 	rdlong	local02, objptr
1aacc     65 00 00 FF 
1aad0     64 E4 85 F1 | 	sub	objptr, ##51812
1aad4     00 00 40 FF 
1aad8     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1aadc     7B 00 00 3F 
1aae0     A8 E4 05 31 |  if_ae	add	objptr, ##63144
1aae4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1aae8     08 E4 85 31 |  if_ae	sub	objptr, #8
1aaec     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1aaf0     7B 00 00 3F 
1aaf4     A0 E4 85 31 |  if_ae	sub	objptr, ##63136
1aaf8                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1aaf8     65 00 00 FF 
1aafc     64 E4 05 F1 | 	add	objptr, ##51812
1ab00     F2 20 0A FB | 	rdlong	local02, objptr wz
1ab04     65 00 00 FF 
1ab08     64 E4 85 F1 | 	sub	objptr, ##51812
1ab0c     7B 00 00 AF 
1ab10     A0 E4 05 A1 |  if_e	add	objptr, ##63136
1ab14     F2 24 02 AB |  if_e	rdlong	local04, objptr
1ab18     7B 00 00 AF 
1ab1c     A0 E4 85 A1 |  if_e	sub	objptr, ##63136
1ab20     12 23 02 A6 |  if_e	mov	local03, local04
1ab24     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1ab28     7B 00 00 AF 
1ab2c     A8 E4 05 A1 |  if_e	add	objptr, ##63144
1ab30     F2 20 02 AB |  if_e	rdlong	local02, objptr
1ab34     01 20 06 A1 |  if_e	add	local02, #1
1ab38     F2 20 62 AC |  if_e	wrlong	local02, objptr
1ab3c     7B 00 00 AF 
1ab40     A8 E4 85 A1 |  if_e	sub	objptr, ##63144
1ab44                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1ab44     65 00 00 FF 
1ab48     64 E4 05 F1 | 	add	objptr, ##51812
1ab4c     F2 20 02 FB | 	rdlong	local02, objptr
1ab50     65 00 00 FF 
1ab54     64 E4 85 F1 | 	sub	objptr, ##51812
1ab58     00 00 40 FF 
1ab5c     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1ab60     44 00 90 3D |  if_ae	jmp	#LR__2084
1ab64     7B 00 00 FF 
1ab68     A8 E4 05 F1 | 	add	objptr, ##63144
1ab6c     F2 20 02 FB | 	rdlong	local02, objptr
1ab70     7B 00 00 FF 
1ab74     A8 E4 85 F1 | 	sub	objptr, ##63144
1ab78     19 20 0E F2 | 	cmp	local02, #25 wz
1ab7c     28 00 90 5D |  if_ne	jmp	#LR__2083
1ab80     65 00 00 FF 
1ab84     68 E4 05 F1 | 	add	objptr, ##51816
1ab88     F2 20 02 FB | 	rdlong	local02, objptr
1ab8c     16 00 00 FF 
1ab90     3C E4 05 F1 | 	add	objptr, ##11324
1ab94     F2 20 62 FC | 	wrlong	local02, objptr
1ab98     04 E4 05 F1 | 	add	objptr, #4
1ab9c     F2 2A 68 FC | 	wrlong	#21, objptr
1aba0     7B 00 00 FF 
1aba4     A8 E4 85 F1 | 	sub	objptr, ##63144
1aba8                 | LR__2083
1aba8                 | LR__2084
1aba8                 | ' 
1aba8                 | ' 
1aba8                 | ' if key3<>0 then
1aba8     7B 00 00 FF 
1abac     A4 E4 05 F1 | 	add	objptr, ##63140
1abb0     F2 28 0A FB | 	rdlong	local06, objptr wz
1abb4     7B 00 00 FF 
1abb8     A4 E4 85 F1 | 	sub	objptr, ##63140
1abbc     3C FD 9F AD |  if_e	jmp	#LR__2080
1abc0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1abc0     79 00 00 FF 
1abc4     D0 E5 05 F1 | 	add	objptr, ##62416
1abc8     F2 20 02 FB | 	rdlong	local02, objptr
1abcc     79 00 00 FF 
1abd0     D0 E5 85 F1 | 	sub	objptr, ##62416
1abd4     01 20 0E F2 | 	cmp	local02, #1 wz
1abd8     50 00 90 5D |  if_ne	jmp	#LR__2085
1abdc     7B 00 00 FF 
1abe0     74 E4 05 F1 | 	add	objptr, ##63092
1abe4     F2 14 02 FB | 	rdlong	arg02, objptr
1abe8     56 00 00 FF 
1abec     44 22 06 F6 | 	mov	local03, ##44100
1abf0     0C 24 C6 F9 | 	decod	local04, #12
1abf4     04 E4 85 F1 | 	sub	objptr, #4
1abf8     F2 26 02 FB | 	rdlong	local05, objptr
1abfc     01 1E 66 F6 | 	neg	local01, #1
1ac00     07 12 06 F6 | 	mov	arg01, #7
1ac04     56 00 00 FF 
1ac08     44 16 06 F6 | 	mov	arg03, ##44100
1ac0c     0C 18 C6 F9 | 	decod	arg04, #12
1ac10     13 1B 02 F6 | 	mov	arg05, local05
1ac14     01 1C 66 F6 | 	neg	arg06, #1
1ac18     6F 00 00 FF 
1ac1c     A4 E5 85 F1 | 	sub	objptr, ##57252
1ac20     A4 34 B0 FD | 	call	#_audio096_spin2_play
1ac24     0B 00 00 FF 
1ac28     CC E4 85 F1 | 	sub	objptr, ##5836
1ac2c                 | LR__2085
1ac2c     7B 00 00 FF 
1ac30     A4 E4 05 F1 | 	add	objptr, ##63140
1ac34     F2 12 02 FB | 	rdlong	arg01, objptr
1ac38     7B 00 00 FF 
1ac3c     A4 E4 85 F1 | 	sub	objptr, ##63140
1ac40     D8 F7 BF FD | 	call	#_scantochar
1ac44     7B 00 00 FF 
1ac48     AC E4 05 F1 | 	add	objptr, ##63148
1ac4c     F2 FA 61 FC | 	wrlong	result1, objptr
1ac50                 | '   if leds and 2 = 2 then 
1ac50     10 E4 85 F1 | 	sub	objptr, #16
1ac54     F2 20 0A FB | 	rdlong	local02, objptr wz
1ac58     7B 00 00 FF 
1ac5c     9C E4 85 F1 | 	sub	objptr, ##63132
1ac60     68 01 90 AD |  if_e	jmp	#LR__2093
1ac64                 | '     if key4>96 andalso key4<123 then
1ac64     7B 00 00 FF 
1ac68     AC E4 05 F1 | 	add	objptr, ##63148
1ac6c     F2 20 02 FB | 	rdlong	local02, objptr
1ac70     7B 00 00 FF 
1ac74     AC E4 85 F1 | 	sub	objptr, ##63148
1ac78     61 20 56 F2 | 	cmps	local02, #97 wc
1ac7c     40 00 90 CD |  if_b	jmp	#LR__2086
1ac80     7B 00 00 FF 
1ac84     AC E4 05 F1 | 	add	objptr, ##63148
1ac88     F2 24 02 FB | 	rdlong	local04, objptr
1ac8c     7B 00 00 FF 
1ac90     AC E4 85 F1 | 	sub	objptr, ##63148
1ac94     12 23 02 F6 | 	mov	local03, local04
1ac98     7B 22 56 F2 | 	cmps	local03, #123 wc
1ac9c     20 00 90 3D |  if_ae	jmp	#LR__2086
1aca0     7B 00 00 FF 
1aca4     AC E4 05 F1 | 	add	objptr, ##63148
1aca8     F2 20 02 FB | 	rdlong	local02, objptr
1acac     20 20 86 F1 | 	sub	local02, #32
1acb0     F2 20 62 FC | 	wrlong	local02, objptr
1acb4     7B 00 00 FF 
1acb8     AC E4 85 F1 | 	sub	objptr, ##63148
1acbc     0C 01 90 FD | 	jmp	#LR__2092
1acc0                 | LR__2086
1acc0     7B 00 00 FF 
1acc4     AC E4 05 F1 | 	add	objptr, ##63148
1acc8     F2 20 02 FB | 	rdlong	local02, objptr
1accc     7B 00 00 FF 
1acd0     AC E4 85 F1 | 	sub	objptr, ##63148
1acd4     41 20 56 F2 | 	cmps	local02, #65 wc
1acd8     40 00 90 CD |  if_b	jmp	#LR__2087
1acdc     7B 00 00 FF 
1ace0     AC E4 05 F1 | 	add	objptr, ##63148
1ace4     F2 24 02 FB | 	rdlong	local04, objptr
1ace8     7B 00 00 FF 
1acec     AC E4 85 F1 | 	sub	objptr, ##63148
1acf0     12 23 02 F6 | 	mov	local03, local04
1acf4     5B 22 56 F2 | 	cmps	local03, #91 wc
1acf8     20 00 90 3D |  if_ae	jmp	#LR__2087
1acfc     7B 00 00 FF 
1ad00     AC E4 05 F1 | 	add	objptr, ##63148
1ad04     F2 20 02 FB | 	rdlong	local02, objptr
1ad08     20 20 06 F1 | 	add	local02, #32
1ad0c     F2 20 62 FC | 	wrlong	local02, objptr
1ad10     7B 00 00 FF 
1ad14     AC E4 85 F1 | 	sub	objptr, ##63148
1ad18     B0 00 90 FD | 	jmp	#LR__2091
1ad1c                 | LR__2087
1ad1c     7B 00 00 FF 
1ad20     AC E4 05 F1 | 	add	objptr, ##63148
1ad24     F2 20 02 FB | 	rdlong	local02, objptr
1ad28     7B 00 00 FF 
1ad2c     AC E4 85 F1 | 	sub	objptr, ##63148
1ad30     17 20 56 F2 | 	cmps	local02, #23 wc
1ad34     40 00 90 CD |  if_b	jmp	#LR__2088
1ad38     7B 00 00 FF 
1ad3c     AC E4 05 F1 | 	add	objptr, ##63148
1ad40     F2 24 02 FB | 	rdlong	local04, objptr
1ad44     7B 00 00 FF 
1ad48     AC E4 85 F1 | 	sub	objptr, ##63148
1ad4c     12 23 02 F6 | 	mov	local03, local04
1ad50     20 22 56 F2 | 	cmps	local03, #32 wc
1ad54     20 00 90 3D |  if_ae	jmp	#LR__2088
1ad58     7B 00 00 FF 
1ad5c     AC E4 05 F1 | 	add	objptr, ##63148
1ad60     F2 20 02 FB | 	rdlong	local02, objptr
1ad64     09 20 86 F1 | 	sub	local02, #9
1ad68     F2 20 62 FC | 	wrlong	local02, objptr
1ad6c     7B 00 00 FF 
1ad70     AC E4 85 F1 | 	sub	objptr, ##63148
1ad74     54 00 90 FD | 	jmp	#LR__2090
1ad78                 | LR__2088
1ad78     7B 00 00 FF 
1ad7c     AC E4 05 F1 | 	add	objptr, ##63148
1ad80     F2 20 02 FB | 	rdlong	local02, objptr
1ad84     7B 00 00 FF 
1ad88     AC E4 85 F1 | 	sub	objptr, ##63148
1ad8c     0E 20 56 F2 | 	cmps	local02, #14 wc
1ad90     38 00 90 CD |  if_b	jmp	#LR__2089
1ad94     7B 00 00 FF 
1ad98     AC E4 05 F1 | 	add	objptr, ##63148
1ad9c     F2 24 02 FB | 	rdlong	local04, objptr
1ada0     7B 00 00 FF 
1ada4     AC E4 85 F1 | 	sub	objptr, ##63148
1ada8     12 23 02 F6 | 	mov	local03, local04
1adac     17 22 56 F2 | 	cmps	local03, #23 wc
1adb0     7B 00 00 CF 
1adb4     AC E4 05 C1 |  if_b	add	objptr, ##63148
1adb8     F2 20 02 CB |  if_b	rdlong	local02, objptr
1adbc     27 20 06 C1 |  if_b	add	local02, #39
1adc0     F2 20 62 CC |  if_b	wrlong	local02, objptr
1adc4     7B 00 00 CF 
1adc8     AC E4 85 C1 |  if_b	sub	objptr, ##63148
1adcc                 | LR__2089
1adcc                 | LR__2090
1adcc                 | LR__2091
1adcc                 | LR__2092
1adcc                 | LR__2093
1adcc                 | '  
1adcc                 | '  
1adcc                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1adcc     7B 00 00 FF 
1add0     AC E4 05 F1 | 	add	objptr, ##63148
1add4     F2 20 02 FB | 	rdlong	local02, objptr
1add8     7B 00 00 FF 
1addc     AC E4 85 F1 | 	sub	objptr, ##63148
1ade0     01 20 56 F2 | 	cmps	local02, #1 wc
1ade4     E4 01 90 CD |  if_b	jmp	#LR__2098
1ade8     7B 00 00 FF 
1adec     AC E4 05 F1 | 	add	objptr, ##63148
1adf0     F2 24 02 FB | 	rdlong	local04, objptr
1adf4     7B 00 00 FF 
1adf8     AC E4 85 F1 | 	sub	objptr, ##63148
1adfc     12 23 02 F6 | 	mov	local03, local04
1ae00     7F 22 56 F2 | 	cmps	local03, #127 wc
1ae04     3C E4 05 C1 |  if_b	add	objptr, #60
1ae08     F2 1E E2 CA |  if_b	rdword	local01, objptr
1ae0c     3C E4 85 C1 |  if_b	sub	objptr, #60
1ae10     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1ae14     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1ae18     B0 01 90 3D |  if_ae	jmp	#LR__2098
1ae1c                 | '     if do_insert then
1ae1c     7B 00 00 FF 
1ae20     98 E4 05 F1 | 	add	objptr, ##63128
1ae24     F2 20 0A FB | 	rdlong	local02, objptr wz
1ae28     7B 00 00 FF 
1ae2c     98 E4 85 F1 | 	sub	objptr, ##63128
1ae30     80 01 90 AD |  if_e	jmp	#LR__2097
1ae34                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) step -1 : pspoke i,pspeek(i-1) : next i 
1ae34     3E E4 05 F1 | 	add	objptr, #62
1ae38     F2 22 C2 FA | 	rdbyte	local03, objptr
1ae3c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1ae40     80 24 06 FA | 	mul	local04, #128
1ae44     3A E4 85 F1 | 	sub	objptr, #58
1ae48     F2 2A 02 FB | 	rdlong	local07, objptr
1ae4c     15 2D 02 F6 | 	mov	local08, local07
1ae50     12 2D 02 F1 | 	add	local08, local04
1ae54     7F 2C 06 F1 | 	add	local08, #127
1ae58     11 23 E2 F8 | 	getbyte	local03, local03, #0
1ae5c     80 22 06 FA | 	mul	local03, #128
1ae60     11 2B 02 F1 | 	add	local07, local03
1ae64     38 E4 05 F1 | 	add	objptr, #56
1ae68     F2 26 E2 FA | 	rdword	local05, objptr
1ae6c     3C E4 85 F1 | 	sub	objptr, #60
1ae70     13 2F 52 F6 | 	abs	local09, local05 wc
1ae74     01 2E 46 F0 | 	shr	local09, #1
1ae78     17 2B 82 F3 | 	sumc	local07, local09
1ae7c                 | LR__2094
1ae7c     16 31 02 F6 | 	mov	local10, local08
1ae80     01 30 86 F1 | 	sub	local10, #1
1ae84     18 13 02 F6 | 	mov	arg01, local10
1ae88     88 F4 BF FD | 	call	#_pspeek
1ae8c     FD 32 02 F6 | 	mov	local11, result1
1ae90     19 35 E2 F8 | 	getbyte	local12, local11, #0
1ae94     1A 37 02 F6 | 	mov	local13, local12
1ae98     16 13 02 F6 | 	mov	arg01, local08
1ae9c     1B 15 02 F6 | 	mov	arg02, local13
1aea0     28 F4 BF FD | 	call	#_pspoke
1aea4     01 2C 86 F1 | 	sub	local08, #1
1aea8     15 2D 52 F2 | 	cmps	local08, local07 wc
1aeac     CC FF 9F 3D |  if_ae	jmp	#LR__2094
1aeb0     7B 00 00 FF 
1aeb4     B0 E4 05 F1 | 	add	objptr, ##63152
1aeb8     F2 00 68 FC | 	wrlong	#0, objptr
1aebc     7B 00 00 FF 
1aec0     72 E4 85 F1 | 	sub	objptr, ##63090
1aec4     F2 22 C2 FA | 	rdbyte	local03, objptr
1aec8     11 25 E2 F8 | 	getbyte	local04, local03, #0
1aecc     80 24 06 FA | 	mul	local04, #128
1aed0     3A E4 85 F1 | 	sub	objptr, #58
1aed4     F2 26 02 FB | 	rdlong	local05, objptr
1aed8     13 2D 02 F6 | 	mov	local08, local05
1aedc     12 2D 02 F1 | 	add	local08, local04
1aee0     38 E4 05 F1 | 	add	objptr, #56
1aee4     F2 2E E2 FA | 	rdword	local09, objptr
1aee8     17 1F 32 F9 | 	getword	local01, local09, #0
1aeec     0F 39 52 F6 | 	abs	local14, local01 wc
1aef0     01 38 46 F0 | 	shr	local14, #1
1aef4     1C 39 82 F6 | 	negc	local14, local14
1aef8     1C 2D 02 F1 | 	add	local08, local14
1aefc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1af00     80 22 06 FA | 	mul	local03, #128
1af04     13 25 02 F6 | 	mov	local04, local05
1af08     3C E4 85 F1 | 	sub	objptr, #60
1af0c     12 3B 02 F6 | 	mov	local15, local04
1af10     11 3B 02 F1 | 	add	local15, local03
1af14     80 3A 06 F1 | 	add	local15, #128
1af18                 | LR__2095
1af18     1D 2D 52 F2 | 	cmps	local08, local15 wc
1af1c     94 00 90 3D |  if_ae	jmp	#LR__2096
1af20     3C E4 05 F1 | 	add	objptr, #60
1af24     F2 20 E2 FA | 	rdword	local02, objptr
1af28     7B 00 00 FF 
1af2c     74 E4 05 F1 | 	add	objptr, ##63092
1af30     F2 24 02 FB | 	rdlong	local04, objptr
1af34     01 24 66 F0 | 	shl	local04, #1
1af38     12 21 02 F1 | 	add	local02, local04
1af3c     7B 00 00 FF 
1af40     72 E4 85 F1 | 	sub	objptr, ##63090
1af44     F2 28 C2 FA | 	rdbyte	local06, objptr
1af48     3E E4 85 F1 | 	sub	objptr, #62
1af4c     10 28 06 FA | 	mul	local06, #16
1af50     04 28 06 F1 | 	add	local06, #4
1af54     16 13 02 F6 | 	mov	arg01, local08
1af58     B8 F3 BF FD | 	call	#_pspeek
1af5c     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1af60     41 E4 05 F1 | 	add	objptr, #65
1af64     F2 24 02 FB | 	rdlong	local04, objptr
1af68     04 E4 05 F1 | 	add	objptr, #4
1af6c     F2 1E 02 FB | 	rdlong	local01, objptr
1af70     45 E4 85 F1 | 	sub	objptr, #69
1af74     0F 27 02 F6 | 	mov	local05, local01
1af78     10 13 02 F6 | 	mov	arg01, local02
1af7c     14 15 02 F6 | 	mov	arg02, local06
1af80     11 17 02 F6 | 	mov	arg03, local03
1af84     12 19 02 F6 | 	mov	arg04, local04
1af88     13 1B 02 F6 | 	mov	arg05, local05
1af8c     A8 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1af90     7B 00 00 FF 
1af94     B0 E4 05 F1 | 	add	objptr, ##63152
1af98     F2 20 02 FB | 	rdlong	local02, objptr
1af9c     01 20 06 F1 | 	add	local02, #1
1afa0     F2 20 62 FC | 	wrlong	local02, objptr
1afa4     7B 00 00 FF 
1afa8     B0 E4 85 F1 | 	sub	objptr, ##63152
1afac     01 2C 06 F1 | 	add	local08, #1
1afb0     64 FF 9F FD | 	jmp	#LR__2095
1afb4                 | LR__2096
1afb4                 | LR__2097
1afb4     7B 00 00 FF 
1afb8     AC E4 05 F1 | 	add	objptr, ##63148
1afbc     F2 12 02 FB | 	rdlong	arg01, objptr
1afc0     7B 00 00 FF 
1afc4     AC E4 85 F1 | 	sub	objptr, ##63148
1afc8     B4 1F B0 FD | 	call	#_hg010b_spin2_putchar
1afcc                 | LR__2098
1afcc                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1afcc     7B 00 00 FF 
1afd0     AC E4 05 F1 | 	add	objptr, ##63148
1afd4     F2 20 02 FB | 	rdlong	local02, objptr
1afd8     7B 00 00 FF 
1afdc     AC E4 85 F1 | 	sub	objptr, ##63148
1afe0     01 20 56 F2 | 	cmps	local02, #1 wc
1afe4     D0 00 90 CD |  if_b	jmp	#LR__2099
1afe8     7B 00 00 FF 
1afec     AC E4 05 F1 | 	add	objptr, ##63148
1aff0     F2 24 02 FB | 	rdlong	local04, objptr
1aff4     7B 00 00 FF 
1aff8     AC E4 85 F1 | 	sub	objptr, ##63148
1affc     12 23 02 F6 | 	mov	local03, local04
1b000     7F 22 56 F2 | 	cmps	local03, #127 wc
1b004     B0 00 90 3D |  if_ae	jmp	#LR__2099
1b008     3C E4 05 F1 | 	add	objptr, #60
1b00c     F2 1E E2 FA | 	rdword	local01, objptr
1b010     3C E4 85 F1 | 	sub	objptr, #60
1b014     0F 27 32 F9 | 	getword	local05, local01, #0
1b018     FE 26 0E F2 | 	cmp	local05, #254 wz
1b01c     79 00 00 AF 
1b020     D0 E5 05 A1 |  if_e	add	objptr, ##62416
1b024     F2 38 02 AB |  if_e	rdlong	local14, objptr
1b028     79 00 00 AF 
1b02c     D0 E5 85 A1 |  if_e	sub	objptr, ##62416
1b030     1C 2F 02 A6 |  if_e	mov	local09, local14
1b034     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1b038     7C 00 90 5D |  if_ne	jmp	#LR__2099
1b03c     04 00 00 FF 
1b040     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b044     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b048     04 00 00 FF 
1b04c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b050     56 00 00 FF 
1b054     44 22 06 F6 | 	mov	local03, ##44100
1b058     0C 24 C6 F9 | 	decod	local04, #12
1b05c     00 26 06 F6 | 	mov	local05, #0
1b060     03 00 00 FF 
1b064     DE 1E 06 F6 | 	mov	local01, ##1758
1b068     07 12 06 F6 | 	mov	arg01, #7
1b06c     56 00 00 FF 
1b070     44 16 06 F6 | 	mov	arg03, ##44100
1b074     0C 18 C6 F9 | 	decod	arg04, #12
1b078     00 1A 06 F6 | 	mov	arg05, #0
1b07c     03 00 00 FF 
1b080     DE 1C 06 F6 | 	mov	arg06, ##1758
1b084     0B 00 00 FF 
1b088     CC E4 05 F1 | 	add	objptr, ##5836
1b08c     38 30 B0 FD | 	call	#_audio096_spin2_play
1b090     0B 00 00 FF 
1b094     CC E4 85 F1 | 	sub	objptr, ##5836
1b098     2C 13 06 F6 | 	mov	arg01, #300
1b09c     8C 37 B0 FD | 	call	#__system___waitms
1b0a0     07 12 06 F6 | 	mov	arg01, #7
1b0a4     0B 00 00 FF 
1b0a8     CC E4 05 F1 | 	add	objptr, ##5836
1b0ac     88 31 B0 FD | 	call	#_audio096_spin2_stop
1b0b0     0B 00 00 FF 
1b0b4     CC E4 85 F1 | 	sub	objptr, ##5836
1b0b8                 | LR__2099
1b0b8                 | '  
1b0b8                 | '   if key4=key_enter then 
1b0b8     7B 00 00 FF 
1b0bc     AC E4 05 F1 | 	add	objptr, ##63148
1b0c0     F2 20 02 FB | 	rdlong	local02, objptr
1b0c4     7B 00 00 FF 
1b0c8     AC E4 85 F1 | 	sub	objptr, ##63148
1b0cc     8D 20 0E F2 | 	cmp	local02, #141 wz
1b0d0     F0 00 90 5D |  if_ne	jmp	#LR__2102
1b0d4     74 01 00 FF 
1b0d8     51 20 06 F6 | 	mov	local02, ##@LR__5212
1b0dc     57 00 00 FF 
1b0e0     0C E4 05 F1 | 	add	objptr, ##44556
1b0e4     F2 20 62 FC | 	wrlong	local02, objptr
1b0e8                 | ' 
1b0e8                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1b0e8                 | '     line$="" : for i=editor_spaces to 127
1b0e8     18 E4 05 F1 | 	add	objptr, #24
1b0ec     F2 2C 02 FB | 	rdlong	local08, objptr
1b0f0     57 00 00 FF 
1b0f4     24 E4 85 F1 | 	sub	objptr, ##44580
1b0f8                 | LR__2100
1b0f8     80 2C 56 F2 | 	cmps	local08, #128 wc
1b0fc     8C 00 90 3D |  if_ae	jmp	#LR__2101
1b100     3E E4 05 F1 | 	add	objptr, #62
1b104     F2 1E C2 FA | 	rdbyte	local01, objptr
1b108     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1b10c     13 2F 02 F6 | 	mov	local09, local05
1b110     80 2E 06 FA | 	mul	local09, #128
1b114     3A E4 85 F1 | 	sub	objptr, #58
1b118     F2 38 02 FB | 	rdlong	local14, objptr
1b11c     04 E4 85 F1 | 	sub	objptr, #4
1b120     1C 13 02 F6 | 	mov	arg01, local14
1b124     17 13 02 F1 | 	add	arg01, local09
1b128     16 13 02 F1 | 	add	arg01, local08
1b12c     E4 F1 BF FD | 	call	#_pspeek
1b130     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b134     7B 00 00 FF 
1b138     B4 E4 05 F1 | 	add	objptr, ##63156
1b13c     F2 24 62 FC | 	wrlong	local04, objptr
1b140     24 00 00 FF 
1b144     A8 E4 85 F1 | 	sub	objptr, ##18600
1b148     F2 28 02 FB | 	rdlong	local06, objptr
1b14c     57 00 00 FF 
1b150     0C E4 85 F1 | 	sub	objptr, ##44556
1b154     12 13 02 F6 | 	mov	arg01, local04
1b158     E4 55 B0 FD | 	call	#__system__Chr_S
1b15c     FD 14 02 F6 | 	mov	arg02, result1
1b160     14 13 02 F6 | 	mov	arg01, local06
1b164     2C 34 B0 FD | 	call	#__system___string_concat
1b168     57 00 00 FF 
1b16c     0C E4 05 F1 | 	add	objptr, ##44556
1b170     F2 FA 61 FC | 	wrlong	result1, objptr
1b174     57 00 00 FF 
1b178     0C E4 85 F1 | 	sub	objptr, ##44556
1b17c     16 23 02 F6 | 	mov	local03, local08
1b180     01 22 06 F1 | 	add	local03, #1
1b184     11 2D 02 F6 | 	mov	local08, local03
1b188     6C FF 9F FD | 	jmp	#LR__2100
1b18c                 | LR__2101
1b18c     A8 23 B0 FD | 	call	#_hg010b_spin2_crlf
1b190     88 58 BE FD | 	call	#_interpret
1b194     74 01 00 FF 
1b198     52 20 06 F6 | 	mov	local02, ##@LR__5213
1b19c     57 00 00 FF 
1b1a0     0C E4 05 F1 | 	add	objptr, ##44556
1b1a4     F2 20 62 FC | 	wrlong	local02, objptr
1b1a8     24 00 00 FF 
1b1ac     94 E4 05 F1 | 	add	objptr, ##18580
1b1b0     F2 00 68 FC | 	wrlong	#0, objptr
1b1b4     08 E4 05 F1 | 	add	objptr, #8
1b1b8     F2 00 68 FC | 	wrlong	#0, objptr
1b1bc     7B 00 00 FF 
1b1c0     A8 E4 85 F1 | 	sub	objptr, ##63144
1b1c4                 | LR__2102
1b1c4     7B 00 00 FF 
1b1c8     A4 E4 05 F1 | 	add	objptr, ##63140
1b1cc     F2 20 02 FB | 	rdlong	local02, objptr
1b1d0     10 21 E2 F8 | 	getbyte	local02, local02, #0
1b1d4     08 E4 05 F1 | 	add	objptr, #8
1b1d8     F2 20 62 FC | 	wrlong	local02, objptr
1b1dc                 | '   'tab
1b1dc                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1b1dc     7B 00 00 FF 
1b1e0     AC E4 85 F1 | 	sub	objptr, ##63148
1b1e4     2B 20 0E F2 | 	cmp	local02, #43 wz
1b1e8     B4 00 90 5D |  if_ne	jmp	#LR__2103
1b1ec     3C E4 05 F1 | 	add	objptr, #60
1b1f0     F2 24 E2 FA | 	rdword	local04, objptr
1b1f4     3C E4 85 F1 | 	sub	objptr, #60
1b1f8     12 23 32 F9 | 	getword	local03, local04, #0
1b1fc     F0 22 16 F2 | 	cmp	local03, #240 wc
1b200     9C 00 90 CD |  if_b	jmp	#LR__2103
1b204     79 00 00 FF 
1b208     D0 E5 05 F1 | 	add	objptr, ##62416
1b20c     F2 1E 02 FB | 	rdlong	local01, objptr
1b210     79 00 00 FF 
1b214     D0 E5 85 F1 | 	sub	objptr, ##62416
1b218     0F 27 02 F6 | 	mov	local05, local01
1b21c     01 26 0E F2 | 	cmp	local05, #1 wz
1b220     7C 00 90 5D |  if_ne	jmp	#LR__2103
1b224     04 00 00 FF 
1b228     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b22c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b230     04 00 00 FF 
1b234     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b238     56 00 00 FF 
1b23c     44 22 06 F6 | 	mov	local03, ##44100
1b240     0E 24 C6 F9 | 	decod	local04, #14
1b244     00 26 06 F6 | 	mov	local05, #0
1b248     03 00 00 FF 
1b24c     DE 1E 06 F6 | 	mov	local01, ##1758
1b250     00 12 06 F6 | 	mov	arg01, #0
1b254     56 00 00 FF 
1b258     44 16 06 F6 | 	mov	arg03, ##44100
1b25c     0E 18 C6 F9 | 	decod	arg04, #14
1b260     00 1A 06 F6 | 	mov	arg05, #0
1b264     03 00 00 FF 
1b268     DE 1C 06 F6 | 	mov	arg06, ##1758
1b26c     0B 00 00 FF 
1b270     CC E4 05 F1 | 	add	objptr, ##5836
1b274     50 2E B0 FD | 	call	#_audio096_spin2_play
1b278     0B 00 00 FF 
1b27c     CC E4 85 F1 | 	sub	objptr, ##5836
1b280     2C 13 06 F6 | 	mov	arg01, #300
1b284     A4 35 B0 FD | 	call	#__system___waitms
1b288     00 12 06 F6 | 	mov	arg01, #0
1b28c     0B 00 00 FF 
1b290     CC E4 05 F1 | 	add	objptr, ##5836
1b294     A0 2F B0 FD | 	call	#_audio096_spin2_stop
1b298     0B 00 00 FF 
1b29c     CC E4 85 F1 | 	sub	objptr, ##5836
1b2a0                 | LR__2103
1b2a0                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1b2a0     7B 00 00 FF 
1b2a4     AC E4 05 F1 | 	add	objptr, ##63148
1b2a8     F2 20 02 FB | 	rdlong	local02, objptr
1b2ac     7B 00 00 FF 
1b2b0     AC E4 85 F1 | 	sub	objptr, ##63148
1b2b4     2B 20 0E F2 | 	cmp	local02, #43 wz
1b2b8     34 00 90 5D |  if_ne	jmp	#LR__2104
1b2bc     3C E4 05 F1 | 	add	objptr, #60
1b2c0     F2 24 E2 FA | 	rdword	local04, objptr
1b2c4     3C E4 85 F1 | 	sub	objptr, #60
1b2c8     12 23 32 F9 | 	getword	local03, local04, #0
1b2cc     F0 22 16 F2 | 	cmp	local03, #240 wc
1b2d0     1C 00 90 3D |  if_ae	jmp	#LR__2104
1b2d4     3C E4 05 F1 | 	add	objptr, #60
1b2d8     F2 22 E2 FA | 	rdword	local03, objptr
1b2dc     3C E4 85 F1 | 	sub	objptr, #60
1b2e0     11 13 32 F9 | 	getword	arg01, local03, #0
1b2e4     08 12 06 F1 | 	add	arg01, #8
1b2e8     F8 12 06 F5 | 	and	arg01, #248
1b2ec     E8 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b2f0                 | LR__2104
1b2f0                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1b2f0                 | '   if key4=77 then i=127 : do: 
1b2f0     7B 00 00 FF 
1b2f4     AC E4 05 F1 | 	add	objptr, ##63148
1b2f8     F2 20 02 FB | 	rdlong	local02, objptr
1b2fc     7B 00 00 FF 
1b300     AC E4 85 F1 | 	sub	objptr, ##63148
1b304     4D 20 0E F2 | 	cmp	local02, #77 wz
1b308     74 00 90 5D |  if_ne	jmp	#LR__2108
1b30c     7F 2C 06 F6 | 	mov	local08, #127
1b310                 | LR__2105
1b310                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then v.setcursorx(2*i) : exit loop 
1b310     3E E4 05 F1 | 	add	objptr, #62
1b314     F2 26 C2 FA | 	rdbyte	local05, objptr
1b318     13 25 E2 F8 | 	getbyte	local04, local05, #0
1b31c     12 1F 02 F6 | 	mov	local01, local04
1b320     80 1E 06 FA | 	mul	local01, #128
1b324     3A E4 85 F1 | 	sub	objptr, #58
1b328     F2 2E 02 FB | 	rdlong	local09, objptr
1b32c     04 E4 85 F1 | 	sub	objptr, #4
1b330     17 23 02 F6 | 	mov	local03, local09
1b334     0F 23 02 F1 | 	add	local03, local01
1b338     16 23 02 F1 | 	add	local03, local08
1b33c     11 13 02 F6 | 	mov	arg01, local03
1b340     D0 EF BF FD | 	call	#_pspeek
1b344     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1b348     20 20 0E F2 | 	cmp	local02, #32 wz
1b34c     10 00 90 AD |  if_e	jmp	#LR__2106
1b350     16 13 02 F6 | 	mov	arg01, local08
1b354     01 12 66 F0 | 	shl	arg01, #1
1b358     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b35c     20 00 90 FD | 	jmp	#LR__2107
1b360                 | LR__2106
1b360     01 2C 86 F1 | 	sub	local08, #1
1b364     57 00 00 FF 
1b368     24 E4 05 F1 | 	add	objptr, ##44580
1b36c     F2 20 02 FB | 	rdlong	local02, objptr
1b370     57 00 00 FF 
1b374     24 E4 85 F1 | 	sub	objptr, ##44580
1b378     10 2D 0A F2 | 	cmp	local08, local02 wz
1b37c     90 FF 9F 5D |  if_ne	jmp	#LR__2105
1b380                 | LR__2107
1b380                 | LR__2108
1b380                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1b380     57 00 00 FF 
1b384     24 E4 05 F1 | 	add	objptr, ##44580
1b388     F2 20 02 FB | 	rdlong	local02, objptr
1b38c     57 00 00 FF 
1b390     24 E4 85 F1 | 	sub	objptr, ##44580
1b394     10 2D 0A F2 | 	cmp	local08, local02 wz
1b398     24 00 90 5D |  if_ne	jmp	#LR__2109
1b39c     57 00 00 FF 
1b3a0     24 E4 05 F1 | 	add	objptr, ##44580
1b3a4     F2 24 02 FB | 	rdlong	local04, objptr
1b3a8     57 00 00 FF 
1b3ac     24 E4 85 F1 | 	sub	objptr, ##44580
1b3b0     12 23 02 F6 | 	mov	local03, local04
1b3b4     11 13 02 F6 | 	mov	arg01, local03
1b3b8     01 12 66 F0 | 	shl	arg01, #1
1b3bc     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b3c0                 | LR__2109
1b3c0                 | '   
1b3c0                 | '   
1b3c0                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1b3c0     7B 00 00 FF 
1b3c4     AC E4 05 F1 | 	add	objptr, ##63148
1b3c8     F2 20 02 FB | 	rdlong	local02, objptr
1b3cc     7B 00 00 FF 
1b3d0     AC E4 85 F1 | 	sub	objptr, ##63148
1b3d4     4A 20 0E F2 | 	cmp	local02, #74 wz
1b3d8     24 00 90 5D |  if_ne	jmp	#LR__2110
1b3dc     57 00 00 FF 
1b3e0     24 E4 05 F1 | 	add	objptr, ##44580
1b3e4     F2 24 02 FB | 	rdlong	local04, objptr
1b3e8     57 00 00 FF 
1b3ec     24 E4 85 F1 | 	sub	objptr, ##44580
1b3f0     12 23 02 F6 | 	mov	local03, local04
1b3f4     11 13 02 F6 | 	mov	arg01, local03
1b3f8     01 12 66 F0 | 	shl	arg01, #1
1b3fc     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1b400                 | LR__2110
1b400                 | '   if key4=75 then v.setcursory(0)
1b400     7B 00 00 FF 
1b404     AC E4 05 F1 | 	add	objptr, ##63148
1b408     F2 20 02 FB | 	rdlong	local02, objptr
1b40c     7B 00 00 FF 
1b410     AC E4 85 F1 | 	sub	objptr, ##63148
1b414     4B 20 0E F2 | 	cmp	local02, #75 wz
1b418     00 12 06 A6 |  if_e	mov	arg01, #0
1b41c     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1b420                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1b420     7B 00 00 FF 
1b424     AC E4 05 F1 | 	add	objptr, ##63148
1b428     F2 20 02 FB | 	rdlong	local02, objptr
1b42c     7B 00 00 FF 
1b430     AC E4 85 F1 | 	sub	objptr, ##63148
1b434     4E 20 0E F2 | 	cmp	local02, #78 wz
1b438     24 12 06 A6 |  if_e	mov	arg01, #36
1b43c     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1b440                 | '   
1b440                 | '   if key4=76 then 'del
1b440     7B 00 00 FF 
1b444     AC E4 05 F1 | 	add	objptr, ##63148
1b448     F2 20 02 FB | 	rdlong	local02, objptr
1b44c     7B 00 00 FF 
1b450     AC E4 85 F1 | 	sub	objptr, ##63148
1b454     4C 20 0E F2 | 	cmp	local02, #76 wz
1b458     9C 01 90 5D |  if_ne	jmp	#LR__2115
1b45c                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1b45c     3E E4 05 F1 | 	add	objptr, #62
1b460     F2 22 C2 FA | 	rdbyte	local03, objptr
1b464     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b468     80 24 06 FA | 	mul	local04, #128
1b46c     3A E4 85 F1 | 	sub	objptr, #58
1b470     F2 3C 02 FB | 	rdlong	local16, objptr
1b474     1E 2D 02 F6 | 	mov	local08, local16
1b478     12 2D 02 F1 | 	add	local08, local04
1b47c     38 E4 05 F1 | 	add	objptr, #56
1b480     F2 1E E2 FA | 	rdword	local01, objptr
1b484     0F 39 52 F6 | 	abs	local14, local01 wc
1b488     01 38 46 F0 | 	shr	local14, #1
1b48c     1C 2D 82 F3 | 	sumc	local08, local14
1b490     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b494     80 22 06 FA | 	mul	local03, #128
1b498     3C E4 85 F1 | 	sub	objptr, #60
1b49c     11 3D 02 F1 | 	add	local16, local03
1b4a0     80 3C 06 F1 | 	add	local16, #128
1b4a4                 | LR__2111
1b4a4     1E 2D 52 F2 | 	cmps	local08, local16 wc
1b4a8     20 00 90 3D |  if_ae	jmp	#LR__2112
1b4ac     16 13 02 F6 | 	mov	arg01, local08
1b4b0     01 12 06 F1 | 	add	arg01, #1
1b4b4     5C EE BF FD | 	call	#_pspeek
1b4b8     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1b4bc     16 13 02 F6 | 	mov	arg01, local08
1b4c0     08 EE BF FD | 	call	#_pspoke
1b4c4     01 2C 06 F1 | 	add	local08, #1
1b4c8     D8 FF 9F FD | 	jmp	#LR__2111
1b4cc                 | LR__2112
1b4cc     3E E4 05 F1 | 	add	objptr, #62
1b4d0     F2 26 C2 FA | 	rdbyte	local05, objptr
1b4d4     80 26 06 FA | 	mul	local05, #128
1b4d8     3A E4 85 F1 | 	sub	objptr, #58
1b4dc     F2 12 02 FB | 	rdlong	arg01, objptr
1b4e0     04 E4 85 F1 | 	sub	objptr, #4
1b4e4     13 13 02 F1 | 	add	arg01, local05
1b4e8     7F 12 06 F1 | 	add	arg01, #127
1b4ec     20 14 06 F6 | 	mov	arg02, #32
1b4f0     D8 ED BF FD | 	call	#_pspoke
1b4f4     7B 00 00 FF 
1b4f8     B0 E4 05 F1 | 	add	objptr, ##63152
1b4fc     F2 00 68 FC | 	wrlong	#0, objptr
1b500     7B 00 00 FF 
1b504     72 E4 85 F1 | 	sub	objptr, ##63090
1b508     F2 22 C2 FA | 	rdbyte	local03, objptr
1b50c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b510     80 24 06 FA | 	mul	local04, #128
1b514     3A E4 85 F1 | 	sub	objptr, #58
1b518     F2 26 02 FB | 	rdlong	local05, objptr
1b51c     13 2D 02 F6 | 	mov	local08, local05
1b520     12 2D 02 F1 | 	add	local08, local04
1b524     38 E4 05 F1 | 	add	objptr, #56
1b528     F2 2E E2 FA | 	rdword	local09, objptr
1b52c     17 1F 32 F9 | 	getword	local01, local09, #0
1b530     0F 39 52 F6 | 	abs	local14, local01 wc
1b534     01 38 46 F0 | 	shr	local14, #1
1b538     1C 39 82 F6 | 	negc	local14, local14
1b53c     1C 2D 02 F1 | 	add	local08, local14
1b540     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b544     80 22 06 FA | 	mul	local03, #128
1b548     13 25 02 F6 | 	mov	local04, local05
1b54c     3C E4 85 F1 | 	sub	objptr, #60
1b550     12 3F 02 F6 | 	mov	local17, local04
1b554     11 3F 02 F1 | 	add	local17, local03
1b558     80 3E 06 F1 | 	add	local17, #128
1b55c                 | LR__2113
1b55c     1F 2D 52 F2 | 	cmps	local08, local17 wc
1b560     94 00 90 3D |  if_ae	jmp	#LR__2114
1b564     3C E4 05 F1 | 	add	objptr, #60
1b568     F2 20 E2 FA | 	rdword	local02, objptr
1b56c     7B 00 00 FF 
1b570     74 E4 05 F1 | 	add	objptr, ##63092
1b574     F2 24 02 FB | 	rdlong	local04, objptr
1b578     01 24 66 F0 | 	shl	local04, #1
1b57c     12 21 02 F1 | 	add	local02, local04
1b580     7B 00 00 FF 
1b584     72 E4 85 F1 | 	sub	objptr, ##63090
1b588     F2 28 C2 FA | 	rdbyte	local06, objptr
1b58c     3E E4 85 F1 | 	sub	objptr, #62
1b590     10 28 06 FA | 	mul	local06, #16
1b594     04 28 06 F1 | 	add	local06, #4
1b598     16 13 02 F6 | 	mov	arg01, local08
1b59c     74 ED BF FD | 	call	#_pspeek
1b5a0     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1b5a4     41 E4 05 F1 | 	add	objptr, #65
1b5a8     F2 24 02 FB | 	rdlong	local04, objptr
1b5ac     04 E4 05 F1 | 	add	objptr, #4
1b5b0     F2 1E 02 FB | 	rdlong	local01, objptr
1b5b4     45 E4 85 F1 | 	sub	objptr, #69
1b5b8     0F 27 02 F6 | 	mov	local05, local01
1b5bc     10 13 02 F6 | 	mov	arg01, local02
1b5c0     14 15 02 F6 | 	mov	arg02, local06
1b5c4     11 17 02 F6 | 	mov	arg03, local03
1b5c8     12 19 02 F6 | 	mov	arg04, local04
1b5cc     13 1B 02 F6 | 	mov	arg05, local05
1b5d0     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1b5d4     7B 00 00 FF 
1b5d8     B0 E4 05 F1 | 	add	objptr, ##63152
1b5dc     F2 20 02 FB | 	rdlong	local02, objptr
1b5e0     01 20 06 F1 | 	add	local02, #1
1b5e4     F2 20 62 FC | 	wrlong	local02, objptr
1b5e8     7B 00 00 FF 
1b5ec     B0 E4 85 F1 | 	sub	objptr, ##63152
1b5f0     01 2C 06 F1 | 	add	local08, #1
1b5f4     64 FF 9F FD | 	jmp	#LR__2113
1b5f8                 | LR__2114
1b5f8                 | LR__2115
1b5f8                 | '    
1b5f8                 | '   'backspace
1b5f8                 | '   if key4 = 42 then 
1b5f8     7B 00 00 FF 
1b5fc     AC E4 05 F1 | 	add	objptr, ##63148
1b600     F2 20 02 FB | 	rdlong	local02, objptr
1b604     7B 00 00 FF 
1b608     AC E4 85 F1 | 	sub	objptr, ##63148
1b60c     2A 20 0E F2 | 	cmp	local02, #42 wz
1b610     0C 02 90 5D |  if_ne	jmp	#LR__2121
1b614                 | '       if v.cursor_x>editor_spaces*2 then 
1b614     3C E4 05 F1 | 	add	objptr, #60
1b618     F2 20 E2 FA | 	rdword	local02, objptr
1b61c     56 00 00 FF 
1b620     E8 E5 05 F1 | 	add	objptr, ##44520
1b624     F2 26 02 FB | 	rdlong	local05, objptr
1b628     57 00 00 FF 
1b62c     24 E4 85 F1 | 	sub	objptr, ##44580
1b630     13 25 02 F6 | 	mov	local04, local05
1b634     12 23 02 F6 | 	mov	local03, local04
1b638     01 22 66 F0 | 	shl	local03, #1
1b63c     11 21 5A F2 | 	cmps	local02, local03 wcz
1b640     B8 01 90 ED |  if_be	jmp	#LR__2119
1b644     3C E4 05 F1 | 	add	objptr, #60
1b648     F2 12 E2 FA | 	rdword	arg01, objptr
1b64c     02 12 86 F1 | 	sub	arg01, #2
1b650     02 E4 05 F1 | 	add	objptr, #2
1b654     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b658     3E E4 85 F1 | 	sub	objptr, #62
1b65c     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1b660                 | '          position v.cursor_x-2,v.cursor_y
1b660                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1b660     3E E4 05 F1 | 	add	objptr, #62
1b664     F2 22 C2 FA | 	rdbyte	local03, objptr
1b668     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b66c     80 24 06 FA | 	mul	local04, #128
1b670     3A E4 85 F1 | 	sub	objptr, #58
1b674     F2 40 02 FB | 	rdlong	local18, objptr
1b678     20 2D 02 F6 | 	mov	local08, local18
1b67c     12 2D 02 F1 | 	add	local08, local04
1b680     38 E4 05 F1 | 	add	objptr, #56
1b684     F2 1E E2 FA | 	rdword	local01, objptr
1b688     0F 39 52 F6 | 	abs	local14, local01 wc
1b68c     01 38 46 F0 | 	shr	local14, #1
1b690     1C 2D 82 F3 | 	sumc	local08, local14
1b694     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b698     80 22 06 FA | 	mul	local03, #128
1b69c     3C E4 85 F1 | 	sub	objptr, #60
1b6a0     11 41 02 F1 | 	add	local18, local03
1b6a4     80 40 06 F1 | 	add	local18, #128
1b6a8                 | LR__2116
1b6a8     20 2D 52 F2 | 	cmps	local08, local18 wc
1b6ac     20 00 90 3D |  if_ae	jmp	#LR__2117
1b6b0     16 13 02 F6 | 	mov	arg01, local08
1b6b4     01 12 06 F1 | 	add	arg01, #1
1b6b8     58 EC BF FD | 	call	#_pspeek
1b6bc     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1b6c0     16 13 02 F6 | 	mov	arg01, local08
1b6c4     04 EC BF FD | 	call	#_pspoke
1b6c8     01 2C 06 F1 | 	add	local08, #1
1b6cc     D8 FF 9F FD | 	jmp	#LR__2116
1b6d0                 | LR__2117
1b6d0     3E E4 05 F1 | 	add	objptr, #62
1b6d4     F2 26 C2 FA | 	rdbyte	local05, objptr
1b6d8     80 26 06 FA | 	mul	local05, #128
1b6dc     3A E4 85 F1 | 	sub	objptr, #58
1b6e0     F2 12 02 FB | 	rdlong	arg01, objptr
1b6e4     04 E4 85 F1 | 	sub	objptr, #4
1b6e8     13 13 02 F1 | 	add	arg01, local05
1b6ec     7F 12 06 F1 | 	add	arg01, #127
1b6f0     20 14 06 F6 | 	mov	arg02, #32
1b6f4     D4 EB BF FD | 	call	#_pspoke
1b6f8     7B 00 00 FF 
1b6fc     B0 E4 05 F1 | 	add	objptr, ##63152
1b700     F2 00 68 FC | 	wrlong	#0, objptr
1b704     7B 00 00 FF 
1b708     72 E4 85 F1 | 	sub	objptr, ##63090
1b70c     F2 22 C2 FA | 	rdbyte	local03, objptr
1b710     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b714     80 24 06 FA | 	mul	local04, #128
1b718     3A E4 85 F1 | 	sub	objptr, #58
1b71c     F2 26 02 FB | 	rdlong	local05, objptr
1b720     13 2D 02 F6 | 	mov	local08, local05
1b724     12 2D 02 F1 | 	add	local08, local04
1b728     38 E4 05 F1 | 	add	objptr, #56
1b72c     F2 2E E2 FA | 	rdword	local09, objptr
1b730     17 1F 32 F9 | 	getword	local01, local09, #0
1b734     0F 39 52 F6 | 	abs	local14, local01 wc
1b738     01 38 46 F0 | 	shr	local14, #1
1b73c     1C 39 82 F6 | 	negc	local14, local14
1b740     1C 2D 02 F1 | 	add	local08, local14
1b744     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b748     80 22 06 FA | 	mul	local03, #128
1b74c     13 25 02 F6 | 	mov	local04, local05
1b750     3C E4 85 F1 | 	sub	objptr, #60
1b754     12 43 02 F6 | 	mov	local19, local04
1b758     11 43 02 F1 | 	add	local19, local03
1b75c     80 42 06 F1 | 	add	local19, #128
1b760                 | LR__2118
1b760     21 2D 52 F2 | 	cmps	local08, local19 wc
1b764     B8 00 90 3D |  if_ae	jmp	#LR__2120
1b768     3C E4 05 F1 | 	add	objptr, #60
1b76c     F2 20 E2 FA | 	rdword	local02, objptr
1b770     7B 00 00 FF 
1b774     74 E4 05 F1 | 	add	objptr, ##63092
1b778     F2 24 02 FB | 	rdlong	local04, objptr
1b77c     01 24 66 F0 | 	shl	local04, #1
1b780     12 21 02 F1 | 	add	local02, local04
1b784     7B 00 00 FF 
1b788     72 E4 85 F1 | 	sub	objptr, ##63090
1b78c     F2 28 C2 FA | 	rdbyte	local06, objptr
1b790     3E E4 85 F1 | 	sub	objptr, #62
1b794     10 28 06 FA | 	mul	local06, #16
1b798     04 28 06 F1 | 	add	local06, #4
1b79c     16 13 02 F6 | 	mov	arg01, local08
1b7a0     70 EB BF FD | 	call	#_pspeek
1b7a4     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1b7a8     41 E4 05 F1 | 	add	objptr, #65
1b7ac     F2 24 02 FB | 	rdlong	local04, objptr
1b7b0     04 E4 05 F1 | 	add	objptr, #4
1b7b4     F2 1E 02 FB | 	rdlong	local01, objptr
1b7b8     45 E4 85 F1 | 	sub	objptr, #69
1b7bc     0F 27 02 F6 | 	mov	local05, local01
1b7c0     10 13 02 F6 | 	mov	arg01, local02
1b7c4     14 15 02 F6 | 	mov	arg02, local06
1b7c8     11 17 02 F6 | 	mov	arg03, local03
1b7cc     12 19 02 F6 | 	mov	arg04, local04
1b7d0     13 1B 02 F6 | 	mov	arg05, local05
1b7d4     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1b7d8     7B 00 00 FF 
1b7dc     B0 E4 05 F1 | 	add	objptr, ##63152
1b7e0     F2 20 02 FB | 	rdlong	local02, objptr
1b7e4     01 20 06 F1 | 	add	local02, #1
1b7e8     F2 20 62 FC | 	wrlong	local02, objptr
1b7ec     7B 00 00 FF 
1b7f0     B0 E4 85 F1 | 	sub	objptr, ##63152
1b7f4     01 2C 06 F1 | 	add	local08, #1
1b7f8     64 FF 9F FD | 	jmp	#LR__2118
1b7fc                 | LR__2119
1b7fc     74 01 00 FF 
1b800     53 20 06 F6 | 	mov	local02, ##@LR__5214
1b804     57 00 00 FF 
1b808     0C E4 05 F1 | 	add	objptr, ##44556
1b80c     F2 20 62 FC | 	wrlong	local02, objptr
1b810     56 00 00 FF 
1b814     D0 E5 85 F1 | 	sub	objptr, ##44496
1b818     F2 08 58 FC | 	wrword	#4, objptr
1b81c     3C E4 85 F1 | 	sub	objptr, #60
1b820                 | LR__2120
1b820                 | LR__2121
1b820                 | '      if key4= 82 then 
1b820     7B 00 00 FF 
1b824     AC E4 05 F1 | 	add	objptr, ##63148
1b828     F2 20 02 FB | 	rdlong	local02, objptr
1b82c     7B 00 00 FF 
1b830     AC E4 85 F1 | 	sub	objptr, ##63148
1b834     52 20 0E F2 | 	cmp	local02, #82 wz
1b838     50 00 90 5D |  if_ne	jmp	#LR__2122
1b83c                 | ' return cursor_y
1b83c     3E E4 05 F1 | 	add	objptr, #62
1b840     F2 20 C2 FA | 	rdbyte	local02, objptr
1b844     01 20 86 F1 | 	sub	local02, #1
1b848     7B 00 00 FF 
1b84c     7A E4 05 F1 | 	add	objptr, ##63098
1b850     F2 20 62 FC | 	wrlong	local02, objptr
1b854     7B 00 00 FF 
1b858     B8 E4 85 F1 | 	sub	objptr, ##63160
1b85c     00 20 56 F2 | 	cmps	local02, #0 wc
1b860     7B 00 00 CF 
1b864     B8 E4 05 C1 |  if_b	add	objptr, ##63160
1b868     F2 00 68 CC |  if_b	wrlong	#0, objptr
1b86c     7B 00 00 CF 
1b870     B8 E4 85 C1 |  if_b	sub	objptr, ##63160
1b874     7B 00 00 FF 
1b878     B8 E4 05 F1 | 	add	objptr, ##63160
1b87c     F2 12 02 FB | 	rdlong	arg01, objptr
1b880     7B 00 00 FF 
1b884     B8 E4 85 F1 | 	sub	objptr, ##63160
1b888     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1b88c                 | LR__2122
1b88c                 | '    if key4= 81 then
1b88c     7B 00 00 FF 
1b890     AC E4 05 F1 | 	add	objptr, ##63148
1b894     F2 20 02 FB | 	rdlong	local02, objptr
1b898     7B 00 00 FF 
1b89c     AC E4 85 F1 | 	sub	objptr, ##63148
1b8a0     51 20 0E F2 | 	cmp	local02, #81 wz
1b8a4     50 00 90 5D |  if_ne	jmp	#LR__2123
1b8a8                 | ' return cursor_y
1b8a8     3E E4 05 F1 | 	add	objptr, #62
1b8ac     F2 20 C2 FA | 	rdbyte	local02, objptr
1b8b0     01 20 06 F1 | 	add	local02, #1
1b8b4     7B 00 00 FF 
1b8b8     7A E4 05 F1 | 	add	objptr, ##63098
1b8bc     F2 20 62 FC | 	wrlong	local02, objptr
1b8c0     7B 00 00 FF 
1b8c4     B8 E4 85 F1 | 	sub	objptr, ##63160
1b8c8     25 20 56 F2 | 	cmps	local02, #37 wc
1b8cc     7B 00 00 3F 
1b8d0     B8 E4 05 31 |  if_ae	add	objptr, ##63160
1b8d4     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1b8d8     7B 00 00 3F 
1b8dc     B8 E4 85 31 |  if_ae	sub	objptr, ##63160
1b8e0     7B 00 00 FF 
1b8e4     B8 E4 05 F1 | 	add	objptr, ##63160
1b8e8     F2 12 02 FB | 	rdlong	arg01, objptr
1b8ec     7B 00 00 FF 
1b8f0     B8 E4 85 F1 | 	sub	objptr, ##63160
1b8f4     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1b8f8                 | LR__2123
1b8f8                 | '    if key4= 80 then
1b8f8     7B 00 00 FF 
1b8fc     AC E4 05 F1 | 	add	objptr, ##63148
1b900     F2 20 02 FB | 	rdlong	local02, objptr
1b904     7B 00 00 FF 
1b908     AC E4 85 F1 | 	sub	objptr, ##63148
1b90c     50 20 0E F2 | 	cmp	local02, #80 wz
1b910     6C 00 90 5D |  if_ne	jmp	#LR__2124
1b914                 | ' return cursor_x
1b914     3C E4 05 F1 | 	add	objptr, #60
1b918     F2 20 E2 FA | 	rdword	local02, objptr
1b91c     02 20 86 F1 | 	sub	local02, #2
1b920     7B 00 00 FF 
1b924     80 E4 05 F1 | 	add	objptr, ##63104
1b928     F2 20 62 FC | 	wrlong	local02, objptr
1b92c                 | '      if cx<editor_spaces then cx=editor_spaces
1b92c     24 00 00 FF 
1b930     98 E4 85 F1 | 	sub	objptr, ##18584
1b934     F2 24 02 FB | 	rdlong	local04, objptr
1b938     57 00 00 FF 
1b93c     24 E4 85 F1 | 	sub	objptr, ##44580
1b940     12 23 02 F6 | 	mov	local03, local04
1b944     11 21 52 F2 | 	cmps	local02, local03 wc
1b948     57 00 00 CF 
1b94c     24 E4 05 C1 |  if_b	add	objptr, ##44580
1b950     F2 20 02 CB |  if_b	rdlong	local02, objptr
1b954     24 00 00 CF 
1b958     98 E4 05 C1 |  if_b	add	objptr, ##18584
1b95c     F2 20 62 CC |  if_b	wrlong	local02, objptr
1b960     7B 00 00 CF 
1b964     BC E4 85 C1 |  if_b	sub	objptr, ##63164
1b968     7B 00 00 FF 
1b96c     BC E4 05 F1 | 	add	objptr, ##63164
1b970     F2 12 02 FB | 	rdlong	arg01, objptr
1b974     7B 00 00 FF 
1b978     BC E4 85 F1 | 	sub	objptr, ##63164
1b97c     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1b980                 | LR__2124
1b980                 | '    if key4= 79 then
1b980     7B 00 00 FF 
1b984     AC E4 05 F1 | 	add	objptr, ##63148
1b988     F2 20 02 FB | 	rdlong	local02, objptr
1b98c     7B 00 00 FF 
1b990     AC E4 85 F1 | 	sub	objptr, ##63148
1b994     4F 20 0E F2 | 	cmp	local02, #79 wz
1b998     50 00 90 5D |  if_ne	jmp	#LR__2125
1b99c                 | ' return cursor_x
1b99c     3C E4 05 F1 | 	add	objptr, #60
1b9a0     F2 20 E2 FA | 	rdword	local02, objptr
1b9a4     02 20 06 F1 | 	add	local02, #2
1b9a8     7B 00 00 FF 
1b9ac     80 E4 05 F1 | 	add	objptr, ##63104
1b9b0     F2 20 62 FC | 	wrlong	local02, objptr
1b9b4                 | '      if cx>254  then cx=254 
1b9b4     7B 00 00 FF 
1b9b8     BC E4 85 F1 | 	sub	objptr, ##63164
1b9bc     FF 20 56 F2 | 	cmps	local02, #255 wc
1b9c0     7B 00 00 3F 
1b9c4     BC E4 05 31 |  if_ae	add	objptr, ##63164
1b9c8     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1b9cc     7B 00 00 3F 
1b9d0     BC E4 85 31 |  if_ae	sub	objptr, ##63164
1b9d4     7B 00 00 FF 
1b9d8     BC E4 05 F1 | 	add	objptr, ##63164
1b9dc     F2 12 02 FB | 	rdlong	arg01, objptr
1b9e0     7B 00 00 FF 
1b9e4     BC E4 85 F1 | 	sub	objptr, ##63164
1b9e8     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1b9ec                 | LR__2125
1b9ec                 | '   ' print key3 and 255
1b9ec                 | '    
1b9ec                 | '    if key4=73 then ' ins
1b9ec     7B 00 00 FF 
1b9f0     AC E4 05 F1 | 	add	objptr, ##63148
1b9f4     F2 28 02 FB | 	rdlong	local06, objptr
1b9f8     7B 00 00 FF 
1b9fc     AC E4 85 F1 | 	sub	objptr, ##63148
1ba00     49 28 0E F2 | 	cmp	local06, #73 wz
1ba04     38 00 90 5D |  if_ne	jmp	#LR__2128
1ba08     7B 00 00 FF 
1ba0c     98 E4 05 F1 | 	add	objptr, ##63128
1ba10     F2 20 02 FB | 	rdlong	local02, objptr
1ba14     10 29 22 F6 | 	not	local06, local02
1ba18     F2 28 62 FC | 	wrlong	local06, objptr
1ba1c                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1ba1c     7B 00 00 FF 
1ba20     98 E4 85 F1 | 	sub	objptr, ##63128
1ba24     00 28 0E F2 | 	cmp	local06, #0 wz
1ba28     0C 00 90 AD |  if_e	jmp	#LR__2126
1ba2c     0E 12 06 F6 | 	mov	arg01, #14
1ba30     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1ba34     08 00 90 FD | 	jmp	#LR__2127
1ba38                 | LR__2126
1ba38     00 12 06 F6 | 	mov	arg01, #0
1ba3c     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1ba40                 | LR__2127
1ba40                 | LR__2128
1ba40     7B 00 00 FF 
1ba44     A4 E4 05 F1 | 	add	objptr, ##63140
1ba48     F2 00 68 FC | 	wrlong	#0, objptr
1ba4c     7B 00 00 FF 
1ba50     A4 E4 85 F1 | 	sub	objptr, ##63140
1ba54     A4 EE 9F FD | 	jmp	#LR__2080
1ba58     A7 F0 03 F6 | 	mov	ptra, fp
1ba5c     B2 00 A0 FD | 	call	#popregs_
1ba60                 | _program_ret
1ba60     2D 00 64 FD | 	ret
1ba64                 | 
1ba64                 | ' '' this is not a main program.
1ba64                 | ' 
1ba64                 | ' '****************************************************************************************************************
1ba64                 | ' '                                                                                                             	*
1ba64                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1ba64                 | ' '                                                                                                            	*
1ba64                 | ' ' base - HDMI base pin												*
1ba64                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1ba64                 | ' '														*
1ba64                 | ' '														*
1ba64                 | ' '****************************************************************************************************************
1ba64                 | ' 
1ba64                 | ' pub start(base,mb):result |i
1ba64                 | _hg010b_spin2_start
1ba64                 | ' 
1ba64                 | ' '--------------------------- initialize pointers and variables
1ba64                 | ' 
1ba64                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1ba64     34 E4 05 F1 | 	add	objptr, #52
1ba68     F2 FA 01 F6 | 	mov	result1, objptr
1ba6c     28 E4 85 F1 | 	sub	objptr, #40
1ba70     F2 FA 61 FC | 	wrlong	result1, objptr
1ba74                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1ba74                 | ' hdmibase:=base							' HDMI base pin, 8*n
1ba74     18 E4 05 F1 | 	add	objptr, #24
1ba78     F2 12 62 FC | 	wrlong	arg01, objptr
1ba7c                 | ' mailbox_ptr:=mb		
1ba7c     04 E4 05 F1 | 	add	objptr, #4
1ba80     F2 14 62 FC | 	wrlong	arg02, objptr
1ba84                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1ba84     C1 E5 05 F1 | 	add	objptr, #449
1ba88     F2 14 62 FC | 	wrlong	arg02, objptr
1ba8c                 | ' sprite_ptr:=@spr1ptr
1ba8c     D8 E4 85 F1 | 	sub	objptr, #216
1ba90     F2 FA 01 F6 | 	mov	result1, objptr
1ba94     E5 E4 85 F1 | 	sub	objptr, #229
1ba98     F2 FA 61 FC | 	wrlong	result1, objptr
1ba9c                 | ' 
1ba9c                 | ' 		'
1ba9c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1ba9c     E5 E4 05 F1 | 	add	objptr, #229
1baa0     F2 FA 01 FB | 	rdlong	result1, objptr
1baa4     D0 FA 05 F1 | 	add	result1, #208
1baa8     FD 10 58 FC | 	wrword	#8, result1
1baac                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1baac     F2 16 02 FB | 	rdlong	arg03, objptr
1bab0     D2 16 06 F1 | 	add	arg03, #210
1bab4     0B 21 58 FC | 	wrword	#16, arg03
1bab8                 | ' leading_spaces:=0				'
1bab8     A5 E5 05 F1 | 	add	objptr, #421
1babc     F2 00 68 FC | 	wrlong	#0, objptr
1bac0                 | ' 
1bac0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1bac0     99 E4 85 F1 | 	sub	objptr, #153
1bac4     00 00 A0 FF 
1bac8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1bacc                 | ' emptydl[1]:=0
1bacc     04 E4 05 F1 | 	add	objptr, #4
1bad0     F2 00 68 FC | 	wrlong	#0, objptr
1bad4                 | ' 
1bad4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1bad4                 | ' 
1bad4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1bad4     28 E5 85 F1 | 	sub	objptr, #296
1bad8     F2 02 68 FC | 	wrlong	#1, objptr
1badc                 | ' if s_debug<>0
1badc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1badc     20 00 80 FF 
1bae0     F2 00 68 FC | 	wrlong	##16384, objptr
1bae4     F9 E4 85 F1 | 	sub	objptr, #249
1bae8                 | ' setmode()							' set the mode, see below
1bae8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1baec                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1baec     49 E4 05 F1 | 	add	objptr, #73
1baf0     F2 FA 01 F6 | 	mov	result1, objptr
1baf4     35 E4 85 F1 | 	sub	objptr, #53
1baf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bafc                 | ' cursor_ptr:=@cursor_x						
1bafc     28 E4 05 F1 | 	add	objptr, #40
1bb00     F2 16 02 F6 | 	mov	arg03, objptr
1bb04     2C E4 85 F1 | 	sub	objptr, #44
1bb08     F2 16 62 FC | 	wrlong	arg03, objptr
1bb0c                 | ' fontnum:=0  							' start with a PC type font 
1bb0c     55 E4 05 F1 | 	add	objptr, #85
1bb10     F2 00 68 FC | 	wrlong	#0, objptr
1bb14                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1bb14     1C E4 05 F1 | 	add	objptr, #28
1bb18     F2 12 02 F6 | 	mov	arg01, objptr
1bb1c     81 E4 85 F1 | 	sub	objptr, #129
1bb20     10 00 00 FF 
1bb24     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1bb28     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1bb2c     10 00 00 FF 
1bb30     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1bb34     10 16 06 F6 | 	mov	arg03, #16
1bb38     1C 29 B0 FD | 	call	#__system____builtin_memmove
1bb3c                 | ' leading_spaces:=0
1bb3c     01 00 00 FF 
1bb40     B6 E4 05 F1 | 	add	objptr, ##694
1bb44     F2 00 68 FC | 	wrlong	#0, objptr
1bb48     01 00 00 FF 
1bb4c     B6 E4 85 F1 | 	sub	objptr, ##694
1bb50                 | ' '---------------------------- initialize a cursor (MSDOS type)
1bb50                 | ' 
1bb50                 | ' initcursor(154)
1bb50     9A 12 06 F6 | 	mov	arg01, #154
1bb54     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1bb58                 | ' 
1bb58                 | ' '---------------------------- start the cog
1bb58                 | ' 
1bb58                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1bb58     10 00 00 FF 
1bb5c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1bb60     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1bb64     10 00 00 FF 
1bb68     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1bb6c     14 E4 05 F1 | 	add	objptr, #20
1bb70     10 FA 05 F6 | 	mov	result1, #16
1bb74     28 E4 61 FD | 	setq	objptr
1bb78     0A FB F1 FC | 	coginit	result1, arg02 wc
1bb7c     01 FA 65 C6 |  if_b	neg	result1, #1
1bb80     1C E4 05 F1 | 	add	objptr, #28
1bb84     F2 FA 61 FC | 	wrlong	result1, objptr
1bb88     30 E4 85 F1 | 	sub	objptr, #48
1bb8c                 | ' waitms(40)							' wait for stabilize
1bb8c     28 12 06 F6 | 	mov	arg01, #40
1bb90     98 2C B0 FD | 	call	#__system___waitms
1bb94                 | ' return cog							' return the driver's cog #
1bb94     30 E4 05 F1 | 	add	objptr, #48
1bb98     F2 FA 01 FB | 	rdlong	result1, objptr
1bb9c     30 E4 85 F1 | 	sub	objptr, #48
1bba0                 | _hg010b_spin2_start_ret
1bba0     2D 00 64 FD | 	ret
1bba4                 | 
1bba4                 | ' 
1bba4                 | ' 
1bba4                 | ' '**************************************************************************************************************** 
1bba4                 | ' '                                                                                                             	*
1bba4                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1bba4                 | ' '  Mode number - see start() above or bits below								*
1bba4                 | ' '                                                                                                             	*
1bba4                 | ' '****************************************************************************************************************
1bba4                 | ' 
1bba4                 | ' '---------------------------- initialize a cursor (MSDOS type)
1bba4                 | ' pub initcursor(color) |i
1bba4                 | _hg010b_spin2_initcursor
1bba4     03 4A 05 F6 | 	mov	COUNT_, #3
1bba8     A8 00 A0 FD | 	call	#pushregs_
1bbac     09 1F 02 F6 | 	mov	local01, arg01
1bbb0                 | ' 
1bbb0                 | ' cursor_x:=0							' place the cursor at 0:0
1bbb0     3C E4 05 F1 | 	add	objptr, #60
1bbb4     F2 00 58 FC | 	wrword	#0, objptr
1bbb8                 | ' cursor_y:=0
1bbb8     02 E4 05 F1 | 	add	objptr, #2
1bbbc     F2 00 48 FC | 	wrbyte	#0, objptr
1bbc0                 | ' repeat i from 0 to 111
1bbc0     00 20 06 F6 | 	mov	local02, #0
1bbc4     F8 E5 05 F1 | 	add	objptr, #504
1bbc8     97 1A 48 FB | 	callpa	#(@LR__2132-@LR__2130)>>2,fcache_load_ptr_
1bbcc                 | LR__2130
1bbcc                 | '   cursor[i]:=0
1bbcc     10 23 02 F6 | 	mov	local03, local02
1bbd0     F2 22 02 F1 | 	add	local03, objptr
1bbd4     11 01 48 FC | 	wrbyte	#0, local03
1bbd8     01 20 06 F1 | 	add	local02, #1
1bbdc     70 20 56 F2 | 	cmps	local02, #112 wc
1bbe0     E8 FF 9F CD |  if_b	jmp	#LR__2130
1bbe4                 | ' repeat i from 112 to 127
1bbe4     70 20 06 F6 | 	mov	local02, #112
1bbe8                 | LR__2131
1bbe8                 | '   cursor[i]:=color  
1bbe8     10 23 02 F6 | 	mov	local03, local02
1bbec     F2 22 02 F1 | 	add	local03, objptr
1bbf0     11 1F 42 FC | 	wrbyte	local01, local03
1bbf4     01 20 06 F1 | 	add	local02, #1
1bbf8     80 20 16 F2 | 	cmp	local02, #128 wc
1bbfc     E8 FF 9F CD |  if_b	jmp	#LR__2131
1bc00                 | LR__2132
1bc00                 | ' 'repeat i from 0 to 127
1bc00                 | ' '  if ((i/8)//2)
1bc00                 | ' '    cursor[i]:=15
1bc00                 | ' '  else
1bc00                 | ' '    cursor[i]:=0
1bc00                 | ' '  if i>=120    
1bc00                 | ' '    cursor[i]:=40
1bc00                 | ' setspriteptr(17,@cursor)
1bc00     F2 14 02 F6 | 	mov	arg02, objptr
1bc04     01 00 00 FF 
1bc08     36 E4 85 F1 | 	sub	objptr, ##566
1bc0c     11 12 06 F6 | 	mov	arg01, #17
1bc10     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1bc14                 | ' setspritesize(17,8,16)
1bc14     11 12 06 F6 | 	mov	arg01, #17
1bc18     08 14 06 F6 | 	mov	arg02, #8
1bc1c     10 16 06 F6 | 	mov	arg03, #16
1bc20     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1bc24                 | ' setspritepos(17,0,0)
1bc24     11 12 06 F6 | 	mov	arg01, #17
1bc28     00 14 06 F6 | 	mov	arg02, #0
1bc2c     00 16 06 F6 | 	mov	arg03, #0
1bc30     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1bc34                 | ' cursorshape:=14
1bc34     0B 00 00 FF 
1bc38     C6 E4 05 F1 | 	add	objptr, ##5830
1bc3c     F2 1C 68 FC | 	wrlong	#14, objptr
1bc40                 | ' cursorcolor:=color
1bc40     04 E4 85 F1 | 	sub	objptr, #4
1bc44     F2 1E 62 FC | 	wrlong	local01, objptr
1bc48     0B 00 00 FF 
1bc4c     C2 E4 85 F1 | 	sub	objptr, ##5826
1bc50     A7 F0 03 F6 | 	mov	ptra, fp
1bc54     B2 00 A0 FD | 	call	#popregs_
1bc58                 | _hg010b_spin2_initcursor_ret
1bc58     2D 00 64 FD | 	ret
1bc5c                 | 
1bc5c                 | ' 
1bc5c                 | ' pub setcursorshape(shape) | i
1bc5c                 | _hg010b_spin2_setcursorshape
1bc5c                 | ' 
1bc5c                 | ' cursorshape:=shape
1bc5c     0B 00 00 FF 
1bc60     C6 E4 05 F1 | 	add	objptr, ##5830
1bc64     F2 12 62 FC | 	wrlong	arg01, objptr
1bc68                 | ' repeat i from 0 to (8*cursorshape)-1
1bc68     00 00 06 F6 | 	mov	_var01, #0
1bc6c     09 03 02 F6 | 	mov	_var02, arg01
1bc70     03 02 66 F0 | 	shl	_var02, #3
1bc74     01 02 86 F1 | 	sub	_var02, #1
1bc78     00 02 56 F2 | 	cmps	_var02, #0 wc
1bc7c     01 04 86 F6 | 	negc	_var03, #1
1bc80     02 07 02 F6 | 	mov	_var04, _var03
1bc84     02 03 02 F1 | 	add	_var02, _var03
1bc88     0A 00 00 FF 
1bc8c     90 E4 85 F1 | 	sub	objptr, ##5264
1bc90     97 0C 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
1bc94                 | LR__2140
1bc94                 | '   cursor[i]:=0
1bc94     00 05 02 F6 | 	mov	_var03, _var01
1bc98     F2 04 02 F1 | 	add	_var03, objptr
1bc9c     02 01 48 FC | 	wrbyte	#0, _var03
1bca0     03 01 02 F1 | 	add	_var01, _var04
1bca4     01 01 0A F2 | 	cmp	_var01, _var02 wz
1bca8     E8 FF 9F 5D |  if_ne	jmp	#LR__2140
1bcac                 | LR__2141
1bcac                 | ' repeat i from 8*cursorshape to 127
1bcac     0A 00 00 FF 
1bcb0     90 E4 05 F1 | 	add	objptr, ##5264
1bcb4     F2 06 02 FB | 	rdlong	_var04, objptr
1bcb8     03 01 02 F6 | 	mov	_var01, _var04
1bcbc     03 00 66 F0 | 	shl	_var01, #3
1bcc0     0B 00 00 FF 
1bcc4     C6 E4 85 F1 | 	sub	objptr, ##5830
1bcc8     03 06 66 F0 | 	shl	_var04, #3
1bccc     80 06 56 F2 | 	cmps	_var04, #128 wc
1bcd0     01 04 A6 F6 | 	negnc	_var03, #1
1bcd4     7F 02 06 F6 | 	mov	_var02, #127
1bcd8     02 03 02 F1 | 	add	_var02, _var03
1bcdc     97 1A 48 FB | 	callpa	#(@LR__2143-@LR__2142)>>2,fcache_load_ptr_
1bce0                 | LR__2142
1bce0                 | '   cursor[i]:=cursorcolor
1bce0     00 07 02 F6 | 	mov	_var04, _var01
1bce4     01 00 00 FF 
1bce8     36 E4 05 F1 | 	add	objptr, ##566
1bcec     F2 06 02 F1 | 	add	_var04, objptr
1bcf0     0A 00 00 FF 
1bcf4     8C E4 05 F1 | 	add	objptr, ##5260
1bcf8     F2 12 02 FB | 	rdlong	arg01, objptr
1bcfc     0B 00 00 FF 
1bd00     C2 E4 85 F1 | 	sub	objptr, ##5826
1bd04     03 13 42 FC | 	wrbyte	arg01, _var04
1bd08     02 01 02 F1 | 	add	_var01, _var03
1bd0c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1bd10     CC FF 9F 5D |  if_ne	jmp	#LR__2142
1bd14                 | LR__2143
1bd14                 | _hg010b_spin2_setcursorshape_ret
1bd14     2D 00 64 FD | 	ret
1bd18                 | 
1bd18                 | ' 
1bd18                 | ' pub setcursorcolor(color) | i
1bd18                 | _hg010b_spin2_setcursorcolor
1bd18                 | ' 
1bd18                 | ' cursorcolor:=color
1bd18     0B 00 00 FF 
1bd1c     C2 E4 05 F1 | 	add	objptr, ##5826
1bd20     F2 12 62 FC | 	wrlong	arg01, objptr
1bd24                 | ' repeat i from 0 to (8*cursorshape)-1
1bd24     00 12 06 F6 | 	mov	arg01, #0
1bd28     04 E4 05 F1 | 	add	objptr, #4
1bd2c     F2 00 02 FB | 	rdlong	_var01, objptr
1bd30     03 00 66 F0 | 	shl	_var01, #3
1bd34     01 00 86 F1 | 	sub	_var01, #1
1bd38     00 00 56 F2 | 	cmps	_var01, #0 wc
1bd3c     01 02 86 F6 | 	negc	_var02, #1
1bd40     01 05 02 F6 | 	mov	_var03, _var02
1bd44     01 01 02 F1 | 	add	_var01, _var02
1bd48     0A 00 00 FF 
1bd4c     90 E4 85 F1 | 	sub	objptr, ##5264
1bd50     97 0C 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
1bd54                 | LR__2150
1bd54                 | '   cursor[i]:=0
1bd54     09 03 02 F6 | 	mov	_var02, arg01
1bd58     F2 02 02 F1 | 	add	_var02, objptr
1bd5c     01 01 48 FC | 	wrbyte	#0, _var02
1bd60     02 13 02 F1 | 	add	arg01, _var03
1bd64     00 13 0A F2 | 	cmp	arg01, _var01 wz
1bd68     E8 FF 9F 5D |  if_ne	jmp	#LR__2150
1bd6c                 | LR__2151
1bd6c                 | ' repeat i from 8*cursorshape to 127
1bd6c     0A 00 00 FF 
1bd70     90 E4 05 F1 | 	add	objptr, ##5264
1bd74     F2 04 02 FB | 	rdlong	_var03, objptr
1bd78     02 13 02 F6 | 	mov	arg01, _var03
1bd7c     03 12 66 F0 | 	shl	arg01, #3
1bd80     0B 00 00 FF 
1bd84     C6 E4 85 F1 | 	sub	objptr, ##5830
1bd88     03 04 66 F0 | 	shl	_var03, #3
1bd8c     80 04 56 F2 | 	cmps	_var03, #128 wc
1bd90     01 02 A6 F6 | 	negnc	_var02, #1
1bd94     7F 00 06 F6 | 	mov	_var01, #127
1bd98     01 01 02 F1 | 	add	_var01, _var02
1bd9c     97 1A 48 FB | 	callpa	#(@LR__2153-@LR__2152)>>2,fcache_load_ptr_
1bda0                 | LR__2152
1bda0                 | '   cursor[i]:=cursorcolor
1bda0     09 05 02 F6 | 	mov	_var03, arg01
1bda4     01 00 00 FF 
1bda8     36 E4 05 F1 | 	add	objptr, ##566
1bdac     F2 04 02 F1 | 	add	_var03, objptr
1bdb0     0A 00 00 FF 
1bdb4     8C E4 05 F1 | 	add	objptr, ##5260
1bdb8     F2 06 02 FB | 	rdlong	_var04, objptr
1bdbc     0B 00 00 FF 
1bdc0     C2 E4 85 F1 | 	sub	objptr, ##5826
1bdc4     02 07 42 FC | 	wrbyte	_var04, _var03
1bdc8     01 13 02 F1 | 	add	arg01, _var02
1bdcc     00 13 0A F2 | 	cmp	arg01, _var01 wz
1bdd0     CC FF 9F 5D |  if_ne	jmp	#LR__2152
1bdd4                 | LR__2153
1bdd4                 | _hg010b_spin2_setcursorcolor_ret
1bdd4     2D 00 64 FD | 	ret
1bdd8                 | 
1bdd8                 | '   
1bdd8                 | '   
1bdd8                 | '   
1bdd8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1bdd8                 | _hg010b_spin2_setmode
1bdd8     02 4A 05 F6 | 	mov	COUNT_, #2
1bddc     A8 00 A0 FD | 	call	#pushregs_
1bde0                 | ' 
1bde0                 | ' 
1bde0                 | ' dl_ptr:=@emptydl[0]
1bde0     01 00 00 FF 
1bde4     1D E4 05 F1 | 	add	objptr, ##541
1bde8     F2 1A 02 F6 | 	mov	arg05, objptr
1bdec     FD E5 85 F1 | 	sub	objptr, #509
1bdf0     F2 1A 62 FC | 	wrlong	arg05, objptr
1bdf4                 | ' 
1bdf4                 | ' if cog>0 
1bdf4     10 E4 05 F1 | 	add	objptr, #16
1bdf8     F2 1A 02 FB | 	rdlong	arg05, objptr
1bdfc     30 E4 85 F1 | 	sub	objptr, #48
1be00     01 1A 56 F2 | 	cmps	arg05, #1 wc
1be04                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1be04     01 12 06 36 |  if_ae	mov	arg01, #1
1be08     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1be0c                 | ' xres:=1024
1be0c     01 00 00 FF 
1be10     26 E4 05 F1 | 	add	objptr, ##550
1be14     02 00 80 FF 
1be18     F2 00 68 FC | 	wrlong	##1024, objptr
1be1c                 | ' yres:=600
1be1c     04 E4 05 F1 | 	add	objptr, #4
1be20     01 00 80 FF 
1be24     F2 B0 68 FC | 	wrlong	##600, objptr
1be28                 | ' ppl:=(timings[3])
1be28     10 00 00 FF 
1be2c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1be30     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1be34     51 E5 85 F1 | 	sub	objptr, #337
1be38     F2 1A 62 FC | 	wrlong	arg05, objptr
1be3c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1be3c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1be40     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1be44     01 1E 66 F0 | 	shl	local01, #1
1be48     80 E4 85 F1 | 	sub	objptr, #128
1be4c     F2 1E 62 FC | 	wrlong	local01, objptr
1be50                 | ' cpl1:=cpl '' todo remove
1be50     04 E4 05 F1 | 	add	objptr, #4
1be54     F2 1E 62 FC | 	wrlong	local01, objptr
1be58                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1be58     02 00 00 FF 
1be5c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1be60     41 E4 85 F1 | 	sub	objptr, #65
1be64     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1be68                 | ' repeat i from 0 to 3
1be68     00 20 06 F6 | 	mov	local02, #0
1be6c     02 00 00 FF 
1be70     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1be74     08 E4 05 F1 | 	add	objptr, #8
1be78     97 20 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
1be7c                 | LR__2160
1be7c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1be7c     10 1F 02 F6 | 	mov	local01, local02
1be80     02 1E 66 F0 | 	shl	local01, #2
1be84     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1be88     F2 1A 02 FB | 	rdlong	arg05, objptr
1be8c     11 1A 66 F0 | 	shl	arg05, #17
1be90     0F 1F 02 FB | 	rdlong	local01, local01
1be94     0D 1F 02 F1 | 	add	local01, arg05
1be98     80 40 38 FF 
1be9c     00 1E 06 F1 | 	add	local01, ##1887502336
1bea0     10 1B 02 F6 | 	mov	arg05, local02
1bea4     02 1A 66 F0 | 	shl	arg05, #2
1bea8     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1beac     0D 1F 62 FC | 	wrlong	local01, arg05
1beb0     01 20 06 F1 | 	add	local02, #1
1beb4     04 20 56 F2 | 	cmps	local02, #4 wc
1beb8     C0 FF 9F CD |  if_b	jmp	#LR__2160
1bebc                 | LR__2161
1bebc     24 E4 85 F1 | 	sub	objptr, #36
1bec0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1bec0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1bec4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1bec8     14 1E 66 FC | 	wrlong	local01, #20
1becc                 | ' hubset(timings[10])
1becc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1bed0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1bed4     10 00 00 FF 
1bed8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1bedc     00 12 62 FD | 	hubset	arg01
1bee0                 | ' waitms(1)                                                   	' wait for stabilization
1bee0     01 12 06 F6 | 	mov	arg01, #1
1bee4     44 29 B0 FD | 	call	#__system___waitms
1bee8     10 00 00 FF 
1beec     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1bef0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1bef4     61 E4 05 F1 | 	add	objptr, #97
1bef8     F2 20 62 FC | 	wrlong	local02, objptr
1befc     10 1F 52 F6 | 	abs	local01, local02 wc
1bf00     04 1E 46 F0 | 	shr	local01, #4
1bf04     0F 1F 82 F6 | 	negc	local01, local01
1bf08     9C E4 05 F1 | 	add	objptr, #156
1bf0c     F2 1E 62 FC | 	wrlong	local01, objptr
1bf10     A4 E4 85 F1 | 	sub	objptr, #164
1bf14     F2 20 02 FB | 	rdlong	local02, objptr
1bf18     08 E4 05 F1 | 	add	objptr, #8
1bf1c     F2 1E 02 FB | 	rdlong	local01, objptr
1bf20     0F 21 02 FD | 	qmul	local02, local01
1bf24                 | ' lines:=timings[11]
1bf24                 | ' t_lines:=lines/16
1bf24                 | ' buflen:=cpl*lines						' framebuffer length in longs
1bf24     29 E4 85 F1 | 	sub	objptr, #41
1bf28     19 1E C6 F9 | 	decod	local01, #25
1bf2c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1bf30     18 20 62 FD | 	getqx	local02
1bf34     F2 20 62 FC | 	wrlong	local02, objptr
1bf38     38 E4 85 F1 | 	sub	objptr, #56
1bf3c     02 20 66 F0 | 	shl	local02, #2
1bf40     10 1F 82 F1 | 	sub	local01, local02
1bf44     F2 1E 62 FC | 	wrlong	local01, objptr
1bf48     FD E4 05 F1 | 	add	objptr, #253
1bf4c     F2 20 02 FB | 	rdlong	local02, objptr
1bf50     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1bf54     0D 21 02 FD | 	qmul	local02, arg05
1bf58                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1bf58                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1bf58     F9 E4 85 F1 | 	sub	objptr, #249
1bf5c                 | ' mode_ptr:=@timings						' set pointers to timings
1bf5c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1bf60                 | ' graphmode:=1024+512+192+48							' det global variable
1bf60                 | ' makedl(graphmode)							' make a DL for the mode
1bf60     03 00 00 FF 
1bf64     F0 12 06 F6 | 	mov	arg01, ##1776
1bf68     18 20 62 FD | 	getqx	local02
1bf6c     10 1F 82 F1 | 	sub	local01, local02
1bf70     F2 1E 62 FC | 	wrlong	local01, objptr
1bf74     14 E4 05 F1 | 	add	objptr, #20
1bf78     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1bf7c     79 E4 05 F1 | 	add	objptr, #121
1bf80     03 00 80 FF 
1bf84     F2 E0 69 FC | 	wrlong	##1776, objptr
1bf88     91 E4 85 F1 | 	sub	objptr, #145
1bf8c     10 00 00 FF 
1bf90     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1bf94     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1bf98                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1bf98     F2 1E 02 FB | 	rdlong	local01, objptr
1bf9c     DD E4 05 F1 | 	add	objptr, #221
1bfa0     F2 1E 62 FC | 	wrlong	local01, objptr
1bfa4                 | ' s_font_ptr:=font_ptr
1bfa4     D5 E4 85 F1 | 	sub	objptr, #213
1bfa8     F2 1E 02 FB | 	rdlong	local01, objptr
1bfac     D9 E4 05 F1 | 	add	objptr, #217
1bfb0     F2 1E 62 FC | 	wrlong	local01, objptr
1bfb4                 | ' s_lines:=lines
1bfb4     80 E4 85 F1 | 	sub	objptr, #128
1bfb8     F2 1E 02 FB | 	rdlong	local01, objptr
1bfbc     84 E4 05 F1 | 	add	objptr, #132
1bfc0     F2 1E 62 FC | 	wrlong	local01, objptr
1bfc4                 | ' s_buflen:=buflen
1bfc4     AD E4 85 F1 | 	sub	objptr, #173
1bfc8     F2 1E 02 FB | 	rdlong	local01, objptr
1bfcc     B5 E4 05 F1 | 	add	objptr, #181
1bfd0     F2 1E 62 FC | 	wrlong	local01, objptr
1bfd4                 | ' s_cpl:=cpl
1bfd4     94 E4 85 F1 | 	sub	objptr, #148
1bfd8     F2 1E 02 FB | 	rdlong	local01, objptr
1bfdc     90 E4 05 F1 | 	add	objptr, #144
1bfe0     F2 1E 62 FC | 	wrlong	local01, objptr
1bfe4                 | ' s_cpl1:=cpl
1bfe4     90 E4 85 F1 | 	sub	objptr, #144
1bfe8     F2 1E 02 FB | 	rdlong	local01, objptr
1bfec     98 E4 05 F1 | 	add	objptr, #152
1bff0     F2 1E 62 FC | 	wrlong	local01, objptr
1bff4                 | ' st_lines:=t_lines
1bff4     0C E4 05 F1 | 	add	objptr, #12
1bff8     F2 1E 02 FB | 	rdlong	local01, objptr
1bffc     04 E4 05 F1 | 	add	objptr, #4
1c000     F2 1E 62 FC | 	wrlong	local01, objptr
1c004                 | ' ppl:=ppl/xzoom  
1c004     28 E4 85 F1 | 	sub	objptr, #40
1c008     F2 64 02 FB | 	rdlong	muldiva_, objptr
1c00c     2C E4 05 F1 | 	add	objptr, #44
1c010     F2 66 02 FB | 	rdlong	muldivb_, objptr
1c014     05 E5 85 F1 | 	sub	objptr, #261
1c018     BA 00 A0 FD | 	call	#divide_
1c01c     D9 E4 05 F1 | 	add	objptr, #217
1c020     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c024                 | ' s_ppl:=ppl
1c024     1C E4 05 F1 | 	add	objptr, #28
1c028     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c02c     F5 E4 85 F1 | 	sub	objptr, #245
1c030                 | ' waitms(20)							' wait 
1c030     14 12 06 F6 | 	mov	arg01, #20
1c034     F4 27 B0 FD | 	call	#__system___waitms
1c038                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1c038     04 E4 05 F1 | 	add	objptr, #4
1c03c     F2 12 02 FB | 	rdlong	arg01, objptr
1c040     04 E4 85 F1 | 	sub	objptr, #4
1c044     F2 16 02 FB | 	rdlong	arg03, objptr
1c048     09 17 82 F1 | 	sub	arg03, arg01
1c04c     20 14 06 F6 | 	mov	arg02, #32
1c050     00 18 06 F6 | 	mov	arg04, #0
1c054     01 1A 06 F6 | 	mov	arg05, #1
1c058     0B 00 00 FF 
1c05c     CC E4 05 F1 | 	add	objptr, ##5836
1c060     E8 19 B0 FD | 	call	#_psram_spin2_fill
1c064     0B 00 00 FF 
1c068     CC E4 85 F1 | 	sub	objptr, ##5836
1c06c     A7 F0 03 F6 | 	mov	ptra, fp
1c070     B2 00 A0 FD | 	call	#popregs_
1c074                 | _hg010b_spin2_setmode_ret
1c074     2D 00 64 FD | 	ret
1c078                 | 
1c078                 | ' 
1c078                 | ' '****************************************************************************************************************
1c078                 | ' '                                                                                                             	*
1c078                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1c078                 | ' '                                                                                                             	*
1c078                 | ' '****************************************************************************************************************
1c078                 | ' 
1c078                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1c078                 | _hg010b_spin2_makedl
1c078                 | ' 
1c078                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1c078                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1c078                 | ' repeat i from 0 to 11                                                           ' clear DL
1c078     00 00 06 F6 | 	mov	_var01, #0
1c07c     ED E5 05 F1 | 	add	objptr, #493
1c080     97 0E 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
1c084                 | LR__2170
1c084                 | '   displaylist[i]:=0 
1c084     00 03 02 F6 | 	mov	_var02, _var01
1c088     02 02 66 F0 | 	shl	_var02, #2
1c08c     F2 02 02 F1 | 	add	_var02, objptr
1c090     01 01 68 FC | 	wrlong	#0, _var02
1c094     01 00 06 F1 | 	add	_var01, #1
1c098     0C 00 56 F2 | 	cmps	_var01, #12 wc
1c09c     E4 FF 9F CD |  if_b	jmp	#LR__2170
1c0a0                 | LR__2171
1c0a0                 | '                         ' 
1c0a0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1c0a0     8C E5 85 F1 | 	sub	objptr, #396
1c0a4     F2 02 02 FB | 	rdlong	_var02, objptr
1c0a8     14 02 66 F0 | 	shl	_var02, #20
1c0ac     01 02 06 F1 | 	add	_var02, #1
1c0b0     04 E4 85 F1 | 	sub	objptr, #4
1c0b4     F2 00 02 FB | 	rdlong	_var01, objptr
1c0b8     02 00 66 F0 | 	shl	_var01, #2
1c0bc     04 00 66 F0 | 	shl	_var01, #4
1c0c0     00 03 02 F1 | 	add	_var02, _var01
1c0c4     90 E5 05 F1 | 	add	objptr, #400
1c0c8     F2 02 62 FC | 	wrlong	_var02, objptr
1c0cc     ED E5 85 F1 | 	sub	objptr, #493
1c0d0                 | ' displaylist[1]:=buf_ptr<<4+%10  
1c0d0     F2 02 02 FB | 	rdlong	_var02, objptr
1c0d4     04 02 66 F0 | 	shl	_var02, #4
1c0d8     02 02 06 F1 | 	add	_var02, #2
1c0dc     F1 E5 05 F1 | 	add	objptr, #497
1c0e0     F2 02 62 FC | 	wrlong	_var02, objptr
1c0e4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1c0e4     04 E4 85 F1 | 	sub	objptr, #4
1c0e8     F2 02 02 F6 | 	mov	_var02, objptr
1c0ec     CD E5 85 F1 | 	sub	objptr, #461
1c0f0     F2 02 62 FC | 	wrlong	_var02, objptr
1c0f4     20 E4 85 F1 | 	sub	objptr, #32
1c0f8                 | _hg010b_spin2_makedl_ret
1c0f8     2D 00 64 FD | 	ret
1c0fc                 | 
1c0fc                 | ' 
1c0fc                 | ' 
1c0fc                 | ' '****************************************************************************************************************
1c0fc                 | ' '                                                                        					*
1c0fc                 | ' '  Graphic primitives                                                    					*
1c0fc                 | ' '                                                                        					*
1c0fc                 | ' '****************************************************************************************************************
1c0fc                 | ' 
1c0fc                 | ' pub setspriteptr(num,ptr)
1c0fc                 | _hg010b_spin2_setspriteptr
1c0fc                 | ' long[@spr1ptr+12*num]:=ptr
1c0fc     11 E5 05 F1 | 	add	objptr, #273
1c100     F2 00 02 F6 | 	mov	_var01, objptr
1c104     09 03 02 F6 | 	mov	_var02, arg01
1c108     01 02 66 F0 | 	shl	_var02, #1
1c10c     09 03 02 F1 | 	add	_var02, arg01
1c110     02 02 66 F0 | 	shl	_var02, #2
1c114     01 01 02 F1 | 	add	_var01, _var02
1c118     00 15 62 FC | 	wrlong	arg02, _var01
1c11c     11 E5 85 F1 | 	sub	objptr, #273
1c120                 | _hg010b_spin2_setspriteptr_ret
1c120     2D 00 64 FD | 	ret
1c124                 | 
1c124                 | ' 
1c124                 | ' pub setspritepos(num,x,y)
1c124                 | _hg010b_spin2_setspritepos
1c124                 | ' if y>601
1c124     01 00 00 FF 
1c128     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1c12c                 | '   y:=601
1c12c     01 00 00 3F 
1c130     59 16 06 36 |  if_ae	mov	arg03, ##601
1c134                 | ' if x>1024
1c134     02 00 00 FF 
1c138     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1c13c                 | '   x:=1024
1c13c     0A 14 C6 39 |  if_ae	decod	arg02, #10
1c140                 | ' word[@spr1ptr+12*num+4]:=x
1c140     11 E5 05 F1 | 	add	objptr, #273
1c144     F2 00 02 F6 | 	mov	_var01, objptr
1c148     09 03 02 F6 | 	mov	_var02, arg01
1c14c     01 02 66 F0 | 	shl	_var02, #1
1c150     09 03 02 F1 | 	add	_var02, arg01
1c154     02 02 66 F0 | 	shl	_var02, #2
1c158     01 01 02 F1 | 	add	_var01, _var02
1c15c     04 00 06 F1 | 	add	_var01, #4
1c160     00 15 52 FC | 	wrword	arg02, _var01
1c164                 | ' word[@spr1ptr+12*num+6]:=y
1c164     F2 00 02 F6 | 	mov	_var01, objptr
1c168     09 03 02 F6 | 	mov	_var02, arg01
1c16c     01 02 66 F0 | 	shl	_var02, #1
1c170     09 03 02 F1 | 	add	_var02, arg01
1c174     02 02 66 F0 | 	shl	_var02, #2
1c178     01 01 02 F1 | 	add	_var01, _var02
1c17c     06 00 06 F1 | 	add	_var01, #6
1c180     00 17 52 FC | 	wrword	arg03, _var01
1c184     11 E5 85 F1 | 	sub	objptr, #273
1c188                 | _hg010b_spin2_setspritepos_ret
1c188     2D 00 64 FD | 	ret
1c18c                 | 
1c18c                 | ' 
1c18c                 | ' pub setspritesize(num,w,h)
1c18c                 | _hg010b_spin2_setspritesize
1c18c                 | ' word[@spr1ptr+12*num+8]:=w
1c18c     11 E5 05 F1 | 	add	objptr, #273
1c190     F2 00 02 F6 | 	mov	_var01, objptr
1c194     09 03 02 F6 | 	mov	_var02, arg01
1c198     01 02 66 F0 | 	shl	_var02, #1
1c19c     09 03 02 F1 | 	add	_var02, arg01
1c1a0     02 02 66 F0 | 	shl	_var02, #2
1c1a4     01 01 02 F1 | 	add	_var01, _var02
1c1a8     08 00 06 F1 | 	add	_var01, #8
1c1ac     00 15 52 FC | 	wrword	arg02, _var01
1c1b0                 | ' word[@spr1ptr+12*num+10]:=h
1c1b0     F2 00 02 F6 | 	mov	_var01, objptr
1c1b4     09 03 02 F6 | 	mov	_var02, arg01
1c1b8     01 02 66 F0 | 	shl	_var02, #1
1c1bc     09 03 02 F1 | 	add	_var02, arg01
1c1c0     02 02 66 F0 | 	shl	_var02, #2
1c1c4     01 01 02 F1 | 	add	_var01, _var02
1c1c8     0A 00 06 F1 | 	add	_var01, #10
1c1cc     00 17 52 FC | 	wrword	arg03, _var01
1c1d0     11 E5 85 F1 | 	sub	objptr, #273
1c1d4                 | _hg010b_spin2_setspritesize_ret
1c1d4     2D 00 64 FD | 	ret
1c1d8                 | 
1c1d8                 | ' 
1c1d8                 | ' 
1c1d8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1c1d8                 | ' 
1c1d8                 | ' 
1c1d8                 | ' pub putpixel(x,y,c)
1c1d8                 | _hg010b_spin2_putpixel
1c1d8     04 4A 05 F6 | 	mov	COUNT_, #4
1c1dc     A8 00 A0 FD | 	call	#pushregs_
1c1e0     09 1F 02 F6 | 	mov	local01, arg01
1c1e4                 | ' 
1c1e4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1c1e4     00 20 06 F6 | 	mov	local02, #0
1c1e8     00 1E 56 F2 | 	cmps	local01, #0 wc
1c1ec     01 20 66 36 |  if_ae	neg	local02, #1
1c1f0     E9 E4 05 F1 | 	add	objptr, #233
1c1f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c1f8     02 1A 66 F0 | 	shl	arg05, #2
1c1fc     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1c200     11 23 A2 F1 | 	subx	local03, local03
1c204     11 21 02 F5 | 	and	local02, local03
1c208     00 22 06 F6 | 	mov	local03, #0
1c20c     00 14 56 F2 | 	cmps	arg02, #0 wc
1c210     01 22 66 36 |  if_ae	neg	local03, #1
1c214     11 21 02 F5 | 	and	local02, local03
1c218     04 E4 85 F1 | 	sub	objptr, #4
1c21c     F2 22 02 FB | 	rdlong	local03, objptr
1c220     E5 E4 85 F1 | 	sub	objptr, #229
1c224     11 15 52 F2 | 	cmps	arg02, local03 wc
1c228     12 25 A2 F1 | 	subx	local04, local04
1c22c     12 21 CA F7 | 	test	local02, local04 wz
1c230     48 00 90 AD |  if_e	jmp	#LR__2180
1c234     DD E4 05 F1 | 	add	objptr, #221
1c238     F2 12 02 FB | 	rdlong	arg01, objptr
1c23c     14 E4 05 F1 | 	add	objptr, #20
1c240     F2 24 02 FB | 	rdlong	local04, objptr
1c244     02 24 66 F0 | 	shl	local04, #2
1c248     0A 25 02 FD | 	qmul	local04, arg02
1c24c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c24c     0B 15 02 F6 | 	mov	arg02, arg03
1c250     01 16 06 F6 | 	mov	arg03, #1
1c254     00 18 06 F6 | 	mov	arg04, #0
1c258     01 1A 06 F6 | 	mov	arg05, #1
1c25c     0A 00 00 FF 
1c260     DB E5 05 F1 | 	add	objptr, ##5595
1c264     18 24 62 FD | 	getqx	local04
1c268     0F 25 02 F1 | 	add	local04, local01
1c26c     12 13 02 F1 | 	add	arg01, local04
1c270     D8 17 B0 FD | 	call	#_psram_spin2_fill
1c274     0B 00 00 FF 
1c278     CC E4 85 F1 | 	sub	objptr, ##5836
1c27c                 | LR__2180
1c27c     A7 F0 03 F6 | 	mov	ptra, fp
1c280     B2 00 A0 FD | 	call	#popregs_
1c284                 | _hg010b_spin2_putpixel_ret
1c284     2D 00 64 FD | 	ret
1c288                 | 
1c288                 | ' 
1c288                 | ' pub putpixel2(x,y,c)
1c288                 | _hg010b_spin2_putpixel2
1c288     02 4A 05 F6 | 	mov	COUNT_, #2
1c28c     A8 00 A0 FD | 	call	#pushregs_
1c290     DD E4 05 F1 | 	add	objptr, #221
1c294     F2 1E 02 FB | 	rdlong	local01, objptr
1c298     14 E4 05 F1 | 	add	objptr, #20
1c29c     F2 1A 02 FB | 	rdlong	arg05, objptr
1c2a0     02 1A 66 F0 | 	shl	arg05, #2
1c2a4     0A 1B 02 FD | 	qmul	arg05, arg02
1c2a8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c2a8     0B 15 02 F6 | 	mov	arg02, arg03
1c2ac     01 16 06 F6 | 	mov	arg03, #1
1c2b0     00 18 06 F6 | 	mov	arg04, #0
1c2b4     01 1A 06 F6 | 	mov	arg05, #1
1c2b8     0A 00 00 FF 
1c2bc     DB E5 05 F1 | 	add	objptr, ##5595
1c2c0     18 20 62 FD | 	getqx	local02
1c2c4     09 21 02 F1 | 	add	local02, arg01
1c2c8     10 1F 02 F1 | 	add	local01, local02
1c2cc     0F 13 02 F6 | 	mov	arg01, local01
1c2d0     78 17 B0 FD | 	call	#_psram_spin2_fill
1c2d4     0B 00 00 FF 
1c2d8     CC E4 85 F1 | 	sub	objptr, ##5836
1c2dc     A7 F0 03 F6 | 	mov	ptra, fp
1c2e0     B2 00 A0 FD | 	call	#popregs_
1c2e4                 | _hg010b_spin2_putpixel2_ret
1c2e4     2D 00 64 FD | 	ret
1c2e8                 | 
1c2e8                 | ' 
1c2e8                 | ' pub getpixel2(x,y): c 
1c2e8                 | _hg010b_spin2_getpixel2
1c2e8     02 4A 05 F6 | 	mov	COUNT_, #2
1c2ec     A8 00 A0 FD | 	call	#pushregs_
1c2f0     0C F0 07 F1 | 	add	ptra, #12
1c2f4     04 4E 05 F1 | 	add	fp, #4
1c2f8     A7 12 62 FC | 	wrlong	arg01, fp
1c2fc     04 4E 05 F1 | 	add	fp, #4
1c300     A7 14 62 FC | 	wrlong	arg02, fp
1c304     08 4E 85 F1 | 	sub	fp, #8
1c308     A7 00 68 FC | 	wrlong	#0, fp
1c30c     A7 12 02 F6 | 	mov	arg01, fp
1c310     DD E4 05 F1 | 	add	objptr, #221
1c314     F2 14 02 FB | 	rdlong	arg02, objptr
1c318     14 E4 05 F1 | 	add	objptr, #20
1c31c     F2 16 02 FB | 	rdlong	arg03, objptr
1c320     02 16 66 F0 | 	shl	arg03, #2
1c324     08 4E 05 F1 | 	add	fp, #8
1c328     A7 FA 01 FB | 	rdlong	result1, fp
1c32c     FD 16 02 FD | 	qmul	arg03, result1
1c330                 | ' 
1c330                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1c330     04 4E 85 F1 | 	sub	fp, #4
1c334     A7 1E 02 FB | 	rdlong	local01, fp
1c338     04 4E 85 F1 | 	sub	fp, #4
1c33c     01 16 06 F6 | 	mov	arg03, #1
1c340     0A 00 00 FF 
1c344     DB E5 05 F1 | 	add	objptr, ##5595
1c348     18 20 62 FD | 	getqx	local02
1c34c     0F 21 02 F1 | 	add	local02, local01
1c350     10 15 02 F1 | 	add	arg02, local02
1c354     BC 15 B0 FD | 	call	#_psram_spin2_read1
1c358     0B 00 00 FF 
1c35c     CC E4 85 F1 | 	sub	objptr, ##5836
1c360                 | ' return c
1c360     A7 FA 01 FB | 	rdlong	result1, fp
1c364     A7 F0 03 F6 | 	mov	ptra, fp
1c368     B2 00 A0 FD | 	call	#popregs_
1c36c                 | _hg010b_spin2_getpixel2_ret
1c36c     2D 00 64 FD | 	ret
1c370                 | 
1c370                 | '   
1c370                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1c370                 | ' 
1c370                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1c370                 | _hg010b_spin2_fastline
1c370     02 4A 05 F6 | 	mov	COUNT_, #2
1c374     A8 00 A0 FD | 	call	#pushregs_
1c378     09 1F 02 F6 | 	mov	local01, arg01
1c37c     0A 21 02 F6 | 	mov	local02, arg02
1c380                 | ' 
1c380                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1c380     00 16 56 F2 | 	cmps	arg03, #0 wc
1c384     F4 00 90 CD |  if_b	jmp	#LR__2190
1c388     01 00 00 FF 
1c38c     2A E4 05 F1 | 	add	objptr, ##554
1c390     F2 1A 02 FB | 	rdlong	arg05, objptr
1c394     01 00 00 FF 
1c398     2A E4 85 F1 | 	sub	objptr, ##554
1c39c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1c3a0     D8 00 90 3D |  if_ae	jmp	#LR__2190
1c3a4     00 1E 56 F2 | 	cmps	local01, #0 wc
1c3a8     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1c3ac     CC 00 90 CD |  if_b	jmp	#LR__2190
1c3b0     01 00 00 FF 
1c3b4     26 E4 05 F1 | 	add	objptr, ##550
1c3b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1c3bc     01 00 00 FF 
1c3c0     26 E4 85 F1 | 	sub	objptr, ##550
1c3c4     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1c3c8     01 00 00 1F 
1c3cc     26 E4 05 11 |  if_a	add	objptr, ##550
1c3d0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1c3d4     01 00 00 1F 
1c3d8     26 E4 85 11 |  if_a	sub	objptr, ##550
1c3dc     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1c3e0                 | '   return
1c3e0     98 00 90 1D |  if_a	jmp	#LR__2190
1c3e4     10 1F 5A F2 | 	cmps	local01, local02 wcz
1c3e8     0F 1B 02 16 |  if_a	mov	arg05, local01
1c3ec     10 1F 02 16 |  if_a	mov	local01, local02
1c3f0     0D 21 02 16 |  if_a	mov	local02, arg05
1c3f4     00 1E 56 F2 | 	cmps	local01, #0 wc
1c3f8     00 1E 06 C6 |  if_b	mov	local01, #0
1c3fc     01 00 00 FF 
1c400     26 E4 05 F1 | 	add	objptr, ##550
1c404     F2 1A 02 FB | 	rdlong	arg05, objptr
1c408     01 00 00 FF 
1c40c     26 E4 85 F1 | 	sub	objptr, ##550
1c410     0D 21 52 F2 | 	cmps	local02, arg05 wc
1c414     01 00 00 3F 
1c418     26 E4 05 31 |  if_ae	add	objptr, ##550
1c41c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1c420     01 00 00 3F 
1c424     26 E4 85 31 |  if_ae	sub	objptr, ##550
1c428     DD E4 05 F1 | 	add	objptr, #221
1c42c     F2 12 02 FB | 	rdlong	arg01, objptr
1c430     14 E4 05 F1 | 	add	objptr, #20
1c434     F2 1A 02 FB | 	rdlong	arg05, objptr
1c438     02 1A 66 F0 | 	shl	arg05, #2
1c43c     0B 1B 02 FD | 	qmul	arg05, arg03
1c440                 | ' if x1>x2
1c440                 | '   x1,x2:=x2,x1
1c440                 | ' if x1<0 
1c440                 | '   x1:=0
1c440                 | ' if x2>=xres
1c440                 | '   x2:=xres-1  
1c440     01 20 86 31 |  if_ae	sub	local02, #1
1c444                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1c444     01 16 06 F6 | 	mov	arg03, #1
1c448     10 17 02 F1 | 	add	arg03, local02
1c44c     0F 17 82 F1 | 	sub	arg03, local01
1c450     0C 15 02 F6 | 	mov	arg02, arg04
1c454     00 18 06 F6 | 	mov	arg04, #0
1c458     01 1A 06 F6 | 	mov	arg05, #1
1c45c     0A 00 00 FF 
1c460     DB E5 05 F1 | 	add	objptr, ##5595
1c464     18 20 62 FD | 	getqx	local02
1c468     0F 21 02 F1 | 	add	local02, local01
1c46c     10 13 02 F1 | 	add	arg01, local02
1c470     D8 15 B0 FD | 	call	#_psram_spin2_fill
1c474     0B 00 00 FF 
1c478     CC E4 85 F1 | 	sub	objptr, ##5836
1c47c                 | LR__2190
1c47c     A7 F0 03 F6 | 	mov	ptra, fp
1c480     B2 00 A0 FD | 	call	#popregs_
1c484                 | _hg010b_spin2_fastline_ret
1c484     2D 00 64 FD | 	ret
1c488                 | 
1c488                 | ' 
1c488                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1c488                 | _hg010b_spin2_draw
1c488     0E 4A 05 F6 | 	mov	COUNT_, #14
1c48c     A8 00 A0 FD | 	call	#pushregs_
1c490     09 1F 02 F6 | 	mov	local01, arg01
1c494     0A 21 02 F6 | 	mov	local02, arg02
1c498     0B 23 02 F6 | 	mov	local03, arg03
1c49c     0C 25 02 F6 | 	mov	local04, arg04
1c4a0     0D 27 02 F6 | 	mov	local05, arg05
1c4a4                 | ' 
1c4a4                 | ' if (y1==y2)
1c4a4     12 21 0A F2 | 	cmp	local02, local04 wz
1c4a8     18 00 90 5D |  if_ne	jmp	#LR__2200
1c4ac                 | '   fastline(x1,x2,y1,c)
1c4ac     0F 13 02 F6 | 	mov	arg01, local01
1c4b0     11 15 02 F6 | 	mov	arg02, local03
1c4b4     10 17 02 F6 | 	mov	arg03, local02
1c4b8     13 19 02 F6 | 	mov	arg04, local05
1c4bc     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1c4c0     F8 00 90 FD | 	jmp	#LR__2206
1c4c4                 | LR__2200
1c4c4                 | ' else  
1c4c4                 | '   x:=x1
1c4c4     0F 29 02 F6 | 	mov	local06, local01
1c4c8                 | '   y:=y1
1c4c8     10 2B 02 F6 | 	mov	local07, local02
1c4cc                 | ' 
1c4cc                 | '   if (x1<x2) 
1c4cc     11 1F 52 F2 | 	cmps	local01, local03 wc
1c4d0                 | '     xi:=1
1c4d0     01 2C 06 C6 |  if_b	mov	local08, #1
1c4d4                 | '     dx:=x2-x1
1c4d4     11 2F 02 C6 |  if_b	mov	local09, local03
1c4d8     0F 2F 82 C1 |  if_b	sub	local09, local01
1c4dc                 | '   else
1c4dc                 | '     xi:=-1
1c4dc     01 2C 66 36 |  if_ae	neg	local08, #1
1c4e0                 | '     dx:=x1-x2
1c4e0     11 1F 82 31 |  if_ae	sub	local01, local03
1c4e4     0F 2F 02 36 |  if_ae	mov	local09, local01
1c4e8                 | '   
1c4e8                 | '   if (y1<y2) 
1c4e8     12 21 52 F2 | 	cmps	local02, local04 wc
1c4ec                 | '     yi:=1
1c4ec     01 30 06 C6 |  if_b	mov	local10, #1
1c4f0                 | '     dy:=y2-y1
1c4f0     12 33 02 C6 |  if_b	mov	local11, local04
1c4f4     10 33 82 C1 |  if_b	sub	local11, local02
1c4f8                 | '   else
1c4f8                 | '     yi:=-1
1c4f8     01 30 66 36 |  if_ae	neg	local10, #1
1c4fc                 | '     dy:=y1-y2
1c4fc     12 21 82 31 |  if_ae	sub	local02, local04
1c500     10 33 02 36 |  if_ae	mov	local11, local02
1c504                 | ' 
1c504                 | '   putpixel(x,y,c)
1c504     13 17 02 F6 | 	mov	arg03, local05
1c508     14 13 02 F6 | 	mov	arg01, local06
1c50c     15 15 02 F6 | 	mov	arg02, local07
1c510     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1c514                 | ' 
1c514                 | '   if (dx>dy)
1c514     19 2F 5A F2 | 	cmps	local09, local11 wcz
1c518     50 00 90 ED |  if_be	jmp	#LR__2202
1c51c                 | '     ai:=(dy-dx)*2
1c51c     19 35 02 F6 | 	mov	local12, local11
1c520     17 35 82 F1 | 	sub	local12, local09
1c524     01 34 66 F0 | 	shl	local12, #1
1c528                 | '     bi:=dy*2
1c528     01 32 66 F0 | 	shl	local11, #1
1c52c     19 37 02 F6 | 	mov	local13, local11
1c530                 | '     d:= bi-dx
1c530     1B 39 02 F6 | 	mov	local14, local13
1c534     17 39 82 F1 | 	sub	local14, local09
1c538                 | '     repeat while (x<>x2) 
1c538                 | LR__2201
1c538     11 29 0A F2 | 	cmp	local06, local03 wz
1c53c     7C 00 90 AD |  if_e	jmp	#LR__2205
1c540                 | '       if (d>=0) 
1c540     00 38 56 F2 | 	cmps	local14, #0 wc
1c544                 | '         x+=xi
1c544     16 29 02 31 |  if_ae	add	local06, local08
1c548                 | '         y+=yi
1c548     18 2B 02 31 |  if_ae	add	local07, local10
1c54c                 | '         d+=ai
1c54c     1A 39 02 31 |  if_ae	add	local14, local12
1c550                 | '       else
1c550                 | '         d+=bi
1c550     1B 39 02 C1 |  if_b	add	local14, local13
1c554                 | '         x+=xi
1c554     16 29 02 C1 |  if_b	add	local06, local08
1c558                 | '       putpixel(x,y,c)
1c558     14 13 02 F6 | 	mov	arg01, local06
1c55c     15 15 02 F6 | 	mov	arg02, local07
1c560     13 17 02 F6 | 	mov	arg03, local05
1c564     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1c568     CC FF 9F FD | 	jmp	#LR__2201
1c56c                 | LR__2202
1c56c                 | '   else
1c56c                 | '     ai:=(dx-dy)*2
1c56c     17 35 02 F6 | 	mov	local12, local09
1c570     19 35 82 F1 | 	sub	local12, local11
1c574     01 34 66 F0 | 	shl	local12, #1
1c578                 | '     bi:=dx*2
1c578     01 2E 66 F0 | 	shl	local09, #1
1c57c     17 37 02 F6 | 	mov	local13, local09
1c580                 | '     d:=bi-dy
1c580     1B 39 02 F6 | 	mov	local14, local13
1c584     19 39 82 F1 | 	sub	local14, local11
1c588                 | '     repeat while (y<>y2)
1c588                 | LR__2203
1c588     12 2B 0A F2 | 	cmp	local07, local04 wz
1c58c     2C 00 90 AD |  if_e	jmp	#LR__2204
1c590                 | '       if (d>=0)
1c590     00 38 56 F2 | 	cmps	local14, #0 wc
1c594                 | '         x+=xi
1c594     16 29 02 31 |  if_ae	add	local06, local08
1c598                 | '         y+=yi
1c598     18 2B 02 31 |  if_ae	add	local07, local10
1c59c                 | '         d+=ai
1c59c     1A 39 02 31 |  if_ae	add	local14, local12
1c5a0                 | '       else
1c5a0                 | '         d+=bi
1c5a0     1B 39 02 C1 |  if_b	add	local14, local13
1c5a4                 | '         y+=yi
1c5a4     18 2B 02 C1 |  if_b	add	local07, local10
1c5a8                 | '       putpixel(x, y,c)
1c5a8     14 13 02 F6 | 	mov	arg01, local06
1c5ac     15 15 02 F6 | 	mov	arg02, local07
1c5b0     13 17 02 F6 | 	mov	arg03, local05
1c5b4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1c5b8     CC FF 9F FD | 	jmp	#LR__2203
1c5bc                 | LR__2204
1c5bc                 | LR__2205
1c5bc                 | LR__2206
1c5bc     A7 F0 03 F6 | 	mov	ptra, fp
1c5c0     B2 00 A0 FD | 	call	#popregs_
1c5c4                 | _hg010b_spin2_draw_ret
1c5c4     2D 00 64 FD | 	ret
1c5c8                 | 
1c5c8                 | '  
1c5c8                 | ' pub fillpush(val) 
1c5c8                 | _hg010b_spin2_fillpush
1c5c8                 | ' fillstack[fillptr]:=val
1c5c8     0B 00 00 FF 
1c5cc     BA E4 05 F1 | 	add	objptr, ##5818
1c5d0     F2 00 02 FB | 	rdlong	_var01, objptr
1c5d4     02 00 66 F0 | 	shl	_var01, #2
1c5d8     0A 00 00 FF 
1c5dc     00 E4 85 F1 | 	sub	objptr, ##5120
1c5e0     F2 00 02 F1 | 	add	_var01, objptr
1c5e4     00 13 62 FC | 	wrlong	arg01, _var01
1c5e8                 | ' fillptr+=1   
1c5e8     0A 00 00 FF 
1c5ec     00 E4 05 F1 | 	add	objptr, ##5120
1c5f0     F2 00 02 FB | 	rdlong	_var01, objptr
1c5f4     01 00 06 F1 | 	add	_var01, #1
1c5f8     F2 00 62 FC | 	wrlong	_var01, objptr
1c5fc     0B 00 00 FF 
1c600     BA E4 85 F1 | 	sub	objptr, ##5818
1c604                 | _hg010b_spin2_fillpush_ret
1c604     2D 00 64 FD | 	ret
1c608                 | 
1c608                 | ' 
1c608                 | '     
1c608                 | ' pub fillpop() : val
1c608                 | _hg010b_spin2_fillpop
1c608                 | ' 
1c608                 | ' fillptr-=1
1c608     0B 00 00 FF 
1c60c     BA E4 05 F1 | 	add	objptr, ##5818
1c610     F2 FA 01 FB | 	rdlong	result1, objptr
1c614     01 FA 85 F1 | 	sub	result1, #1
1c618     F2 FA 61 FC | 	wrlong	result1, objptr
1c61c                 | ' if fillptr<0
1c61c     0B 00 00 FF 
1c620     BA E4 85 F1 | 	sub	objptr, ##5818
1c624     00 FA 55 F2 | 	cmps	result1, #0 wc
1c628                 | '   fillptr:=0
1c628     0B 00 00 CF 
1c62c     BA E4 05 C1 |  if_b	add	objptr, ##5818
1c630     F2 00 68 CC |  if_b	wrlong	#0, objptr
1c634     0B 00 00 CF 
1c638     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1c63c                 | '   val:=-12345
1c63c     E7 FF 7F CF 
1c640     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1c644     28 00 90 CD |  if_b	jmp	#LR__2210
1c648                 | ' else 
1c648                 | '   val:=fillstack[fillptr]
1c648     0B 00 00 FF 
1c64c     BA E4 05 F1 | 	add	objptr, ##5818
1c650     F2 00 02 FB | 	rdlong	_var01, objptr
1c654     02 00 66 F0 | 	shl	_var01, #2
1c658     0A 00 00 FF 
1c65c     00 E4 85 F1 | 	sub	objptr, ##5120
1c660     F2 00 02 F1 | 	add	_var01, objptr
1c664     00 01 02 FB | 	rdlong	_var01, _var01
1c668     01 00 00 FF 
1c66c     BA E4 85 F1 | 	sub	objptr, ##698
1c670                 | LR__2210
1c670                 | ' return val
1c670     00 FB 01 F6 | 	mov	result1, _var01
1c674                 | _hg010b_spin2_fillpop_ret
1c674     2D 00 64 FD | 	ret
1c678                 | 
1c678                 | ' 
1c678                 | '       
1c678                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1c678                 | _hg010b_spin2_fill
1c678     0B 4A 05 F6 | 	mov	COUNT_, #11
1c67c     A8 00 A0 FD | 	call	#pushregs_
1c680                 | ' 
1c680                 | ' newcolor:=newcolor & 255
1c680     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1c684                 | ' oldcolor:=oldcolor & 255
1c684     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1c688                 | ' 
1c688                 | ' if (oldcolor == newcolor) 
1c688     0F 21 0A F2 | 	cmp	local02, local01 wz
1c68c                 | '   return
1c68c     70 02 90 AD |  if_e	jmp	#LR__2229
1c690                 | ' 
1c690                 | ' fillptr:=0
1c690     0B 00 00 FF 
1c694     BA E4 05 F1 | 	add	objptr, ##5818
1c698     F2 00 68 FC | 	wrlong	#0, objptr
1c69c                 | ' fillmax:=0
1c69c     04 E4 05 F1 | 	add	objptr, #4
1c6a0     F2 00 68 FC | 	wrlong	#0, objptr
1c6a4     0B 00 00 FF 
1c6a8     BE E4 85 F1 | 	sub	objptr, ##5822
1c6ac                 | ' fillpush(x)
1c6ac     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1c6b0                 | ' fillpush(y)
1c6b0     0A 13 02 F6 | 	mov	arg01, arg02
1c6b4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1c6b8                 | ' y:=fillpop()
1c6b8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1c6bc     FD 22 02 F6 | 	mov	local03, result1
1c6c0                 | ' x:=fillpop()
1c6c0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1c6c4     FD 24 02 F6 | 	mov	local04, result1
1c6c8                 | ' 'pinhigh(38)
1c6c8                 | ' repeat while (x>-1)       
1c6c8                 | LR__2220
1c6c8     00 24 56 F2 | 	cmps	local04, #0 wc
1c6cc     30 02 90 CD |  if_b	jmp	#LR__2228
1c6d0                 | '  ' pintoggle(39)
1c6d0                 | '   x1 := x
1c6d0     12 27 02 F6 | 	mov	local05, local04
1c6d4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1c6d4                 | LR__2221
1c6d4     00 28 06 F6 | 	mov	local06, #0
1c6d8     00 2A 06 F6 | 	mov	local07, #0
1c6dc     00 26 56 F2 | 	cmps	local05, #0 wc
1c6e0     01 2A 66 36 |  if_ae	neg	local07, #1
1c6e4     00 2A 0E F2 | 	cmp	local07, #0 wz
1c6e8     00 28 26 56 |  if_ne	not	local06, #0
1c6ec     00 2C 06 F6 | 	mov	local08, #0
1c6f0     00 2E 06 F6 | 	mov	local09, #0
1c6f4     11 15 02 F6 | 	mov	arg02, local03
1c6f8     13 13 02 F6 | 	mov	arg01, local05
1c6fc     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1c700     10 FB 09 F2 | 	cmp	result1, local02 wz
1c704     00 2E 26 A6 |  if_e	not	local09, #0
1c708     00 2E 0E F2 | 	cmp	local09, #0 wz
1c70c     00 2C 26 56 |  if_ne	not	local08, #0
1c710     16 29 CA F7 | 	test	local06, local08 wz
1c714                 | '     x1--
1c714     01 26 86 51 |  if_ne	sub	local05, #1
1c718     B8 FF 9F 5D |  if_ne	jmp	#LR__2221
1c71c                 | '   x1++
1c71c     01 26 06 F1 | 	add	local05, #1
1c720                 | '   spanabove := 0
1c720     00 30 06 F6 | 	mov	local10, #0
1c724                 | '   spanbelow := 0
1c724     00 32 06 F6 | 	mov	local11, #0
1c728                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1c728                 | LR__2222
1c728     00 28 06 F6 | 	mov	local06, #0
1c72c     02 00 00 FF 
1c730     00 26 56 F2 | 	cmps	local05, ##1024 wc
1c734     00 28 26 C6 |  if_b	not	local06, #0
1c738     00 2C 06 F6 | 	mov	local08, #0
1c73c     00 2E 06 F6 | 	mov	local09, #0
1c740     11 15 02 F6 | 	mov	arg02, local03
1c744     13 13 02 F6 | 	mov	arg01, local05
1c748     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1c74c     10 FB 09 F2 | 	cmp	result1, local02 wz
1c750     00 2E 26 A6 |  if_e	not	local09, #0
1c754     00 2E 0E F2 | 	cmp	local09, #0 wz
1c758     00 2C 26 56 |  if_ne	not	local08, #0
1c75c     16 29 CA F7 | 	test	local06, local08 wz
1c760     88 01 90 AD |  if_e	jmp	#LR__2227
1c764                 | '     putpixel2 (x1,y, newcolor & 255)
1c764     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1c768     13 13 02 F6 | 	mov	arg01, local05
1c76c     11 15 02 F6 | 	mov	arg02, local03
1c770     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1c774                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1c774     00 28 06 F6 | 	mov	local06, #0
1c778     00 2A 06 F6 | 	mov	local07, #0
1c77c     00 30 0E F2 | 	cmp	local10, #0 wz
1c780     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1c784     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1c788     00 2A 0E F2 | 	cmp	local07, #0 wz
1c78c     00 28 26 56 |  if_ne	not	local06, #0
1c790     00 2C 06 F6 | 	mov	local08, #0
1c794     00 2E 06 F6 | 	mov	local09, #0
1c798     11 15 02 F6 | 	mov	arg02, local03
1c79c     01 14 86 F1 | 	sub	arg02, #1
1c7a0     13 13 02 F6 | 	mov	arg01, local05
1c7a4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1c7a8     10 FB 09 F2 | 	cmp	result1, local02 wz
1c7ac     00 2E 26 A6 |  if_e	not	local09, #0
1c7b0     00 2E 0E F2 | 	cmp	local09, #0 wz
1c7b4     00 2C 26 56 |  if_ne	not	local08, #0
1c7b8     16 29 CA F7 | 	test	local06, local08 wz
1c7bc     1C 00 90 AD |  if_e	jmp	#LR__2223
1c7c0                 | '       fillpush(x1)
1c7c0     13 13 02 F6 | 	mov	arg01, local05
1c7c4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1c7c8                 | '       fillpush(y-1)
1c7c8     11 13 02 F6 | 	mov	arg01, local03
1c7cc     01 12 86 F1 | 	sub	arg01, #1
1c7d0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1c7d4                 | '       spanabove := 1 
1c7d4     01 30 06 F6 | 	mov	local10, #1
1c7d8     4C 00 90 FD | 	jmp	#LR__2224
1c7dc                 | LR__2223
1c7dc                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1c7dc     00 28 06 F6 | 	mov	local06, #0
1c7e0     00 2A 06 F6 | 	mov	local07, #0
1c7e4     00 30 0E F2 | 	cmp	local10, #0 wz
1c7e8     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1c7ec     01 2A 66 16 |  if_a	neg	local07, #1
1c7f0     00 2A 0E F2 | 	cmp	local07, #0 wz
1c7f4     00 28 26 56 |  if_ne	not	local06, #0
1c7f8     00 2C 06 F6 | 	mov	local08, #0
1c7fc     00 2E 06 F6 | 	mov	local09, #0
1c800     11 15 02 F6 | 	mov	arg02, local03
1c804     01 14 86 F1 | 	sub	arg02, #1
1c808     13 13 02 F6 | 	mov	arg01, local05
1c80c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1c810     10 FB 09 F2 | 	cmp	result1, local02 wz
1c814     00 2E 26 56 |  if_ne	not	local09, #0
1c818     00 2E 0E F2 | 	cmp	local09, #0 wz
1c81c     00 2C 26 56 |  if_ne	not	local08, #0
1c820     16 29 CA F7 | 	test	local06, local08 wz
1c824                 | '       spanabove := 0 
1c824     00 30 06 56 |  if_ne	mov	local10, #0
1c828                 | LR__2224
1c828                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1c828     00 28 06 F6 | 	mov	local06, #0
1c82c     00 2A 06 F6 | 	mov	local07, #0
1c830     00 32 0E F2 | 	cmp	local11, #0 wz
1c834     01 00 00 AF 
1c838     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1c83c     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1c840     00 2A 0E F2 | 	cmp	local07, #0 wz
1c844     00 28 26 56 |  if_ne	not	local06, #0
1c848     00 2C 06 F6 | 	mov	local08, #0
1c84c     00 2E 06 F6 | 	mov	local09, #0
1c850     11 15 02 F6 | 	mov	arg02, local03
1c854     01 14 06 F1 | 	add	arg02, #1
1c858     13 13 02 F6 | 	mov	arg01, local05
1c85c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1c860     10 FB 09 F2 | 	cmp	result1, local02 wz
1c864     00 2E 26 A6 |  if_e	not	local09, #0
1c868     00 2E 0E F2 | 	cmp	local09, #0 wz
1c86c     00 2C 26 56 |  if_ne	not	local08, #0
1c870     16 29 CA F7 | 	test	local06, local08 wz
1c874     1C 00 90 AD |  if_e	jmp	#LR__2225
1c878                 | '       fillpush(x1)
1c878     13 13 02 F6 | 	mov	arg01, local05
1c87c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1c880                 | '       fillpush(y + 1)
1c880     11 13 02 F6 | 	mov	arg01, local03
1c884     01 12 06 F1 | 	add	arg01, #1
1c888     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1c88c                 | '       spanBelow := 1
1c88c     01 32 06 F6 | 	mov	local11, #1
1c890     50 00 90 FD | 	jmp	#LR__2226
1c894                 | LR__2225
1c894                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1c894     00 28 06 F6 | 	mov	local06, #0
1c898     00 2A 06 F6 | 	mov	local07, #0
1c89c     00 32 0E F2 | 	cmp	local11, #0 wz
1c8a0     01 00 00 5F 
1c8a4     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1c8a8     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1c8ac     00 2A 0E F2 | 	cmp	local07, #0 wz
1c8b0     00 28 26 56 |  if_ne	not	local06, #0
1c8b4     00 2C 06 F6 | 	mov	local08, #0
1c8b8     00 2E 06 F6 | 	mov	local09, #0
1c8bc     11 15 02 F6 | 	mov	arg02, local03
1c8c0     01 14 06 F1 | 	add	arg02, #1
1c8c4     13 13 02 F6 | 	mov	arg01, local05
1c8c8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1c8cc     10 FB 09 F2 | 	cmp	result1, local02 wz
1c8d0     00 2E 26 56 |  if_ne	not	local09, #0
1c8d4     00 2E 0E F2 | 	cmp	local09, #0 wz
1c8d8     00 2C 26 56 |  if_ne	not	local08, #0
1c8dc     16 29 CA F7 | 	test	local06, local08 wz
1c8e0                 | '       spanbelow := 0
1c8e0     00 32 06 56 |  if_ne	mov	local11, #0
1c8e4                 | LR__2226
1c8e4                 | '     x1++
1c8e4     01 26 06 F1 | 	add	local05, #1
1c8e8     3C FE 9F FD | 	jmp	#LR__2222
1c8ec                 | LR__2227
1c8ec                 | '   y:=fillpop()
1c8ec     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1c8f0     FD 22 02 F6 | 	mov	local03, result1
1c8f4                 | '   x:=fillpop()
1c8f4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1c8f8     FD 24 02 F6 | 	mov	local04, result1
1c8fc     C8 FD 9F FD | 	jmp	#LR__2220
1c900                 | LR__2228
1c900                 | LR__2229
1c900     A7 F0 03 F6 | 	mov	ptra, fp
1c904     B2 00 A0 FD | 	call	#popregs_
1c908                 | _hg010b_spin2_fill_ret
1c908     2D 00 64 FD | 	ret
1c90c                 | 
1c90c                 | ' 'pinlow(38)    
1c90c                 | ' 
1c90c                 | ' '-- A filled circle -----------------------------------------------------
1c90c                 | ' 
1c90c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1c90c                 | _hg010b_spin2_fcircle
1c90c     08 4A 05 F6 | 	mov	COUNT_, #8
1c910     A8 00 A0 FD | 	call	#pushregs_
1c914     0B 1F 02 F6 | 	mov	local01, arg03
1c918     FF FF 7F FF 
1c91c     FE 1F 06 FD | 	qmul	local01, ##-2
1c920     09 21 02 F6 | 	mov	local02, arg01
1c924     0A 23 02 F6 | 	mov	local03, arg02
1c928     0C 25 02 F6 | 	mov	local04, arg04
1c92c                 | ' 
1c92c                 | ' d:=5-4*r
1c92c     0F 19 02 F6 | 	mov	arg04, local01
1c930     02 18 66 F0 | 	shl	arg04, #2
1c934     05 26 06 F6 | 	mov	local05, #5
1c938     0C 27 82 F1 | 	sub	local05, arg04
1c93c                 | ' x:=0
1c93c     00 28 06 F6 | 	mov	local06, #0
1c940                 | ' y:=r
1c940                 | ' da:=(-2*r+5)*4
1c940                 | ' db:=3*4
1c940     0C 2A 06 F6 | 	mov	local07, #12
1c944                 | ' repeat while (x<=y) 
1c944     18 2C 62 FD | 	getqx	local08
1c948     05 2C 06 F1 | 	add	local08, #5
1c94c     02 2C 66 F0 | 	shl	local08, #2
1c950                 | LR__2230
1c950     0F 29 5A F2 | 	cmps	local06, local01 wcz
1c954     B4 00 90 1D |  if_a	jmp	#LR__2232
1c958                 | '   fastline(x0-x,x0+x,y0-y,c)
1c958     10 13 02 F6 | 	mov	arg01, local02
1c95c     14 13 82 F1 | 	sub	arg01, local06
1c960     10 15 02 F6 | 	mov	arg02, local02
1c964     14 15 02 F1 | 	add	arg02, local06
1c968     11 17 02 F6 | 	mov	arg03, local03
1c96c     0F 17 82 F1 | 	sub	arg03, local01
1c970     12 19 02 F6 | 	mov	arg04, local04
1c974     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1c978                 | '   fastline(x0-x,x0+x,y0+y,c)
1c978     10 13 02 F6 | 	mov	arg01, local02
1c97c     14 13 82 F1 | 	sub	arg01, local06
1c980     10 15 02 F6 | 	mov	arg02, local02
1c984     14 15 02 F1 | 	add	arg02, local06
1c988     11 17 02 F6 | 	mov	arg03, local03
1c98c     0F 17 02 F1 | 	add	arg03, local01
1c990     12 19 02 F6 | 	mov	arg04, local04
1c994     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1c998                 | '   fastline(x0-y,x0+y,y0-x,c)
1c998     10 13 02 F6 | 	mov	arg01, local02
1c99c     0F 13 82 F1 | 	sub	arg01, local01
1c9a0     10 15 02 F6 | 	mov	arg02, local02
1c9a4     0F 15 02 F1 | 	add	arg02, local01
1c9a8     11 17 02 F6 | 	mov	arg03, local03
1c9ac     14 17 82 F1 | 	sub	arg03, local06
1c9b0     12 19 02 F6 | 	mov	arg04, local04
1c9b4     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1c9b8                 | '   fastline(x0-y,x0+y,y0+x,c)
1c9b8     10 13 02 F6 | 	mov	arg01, local02
1c9bc     0F 13 82 F1 | 	sub	arg01, local01
1c9c0     10 15 02 F6 | 	mov	arg02, local02
1c9c4     0F 15 02 F1 | 	add	arg02, local01
1c9c8     11 17 02 F6 | 	mov	arg03, local03
1c9cc     14 17 02 F1 | 	add	arg03, local06
1c9d0     12 19 02 F6 | 	mov	arg04, local04
1c9d4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1c9d8                 | '   if d>0 
1c9d8     01 26 56 F2 | 	cmps	local05, #1 wc
1c9dc     18 00 90 CD |  if_b	jmp	#LR__2231
1c9e0                 | '     d+=da
1c9e0     16 27 02 F1 | 	add	local05, local08
1c9e4                 | '     y-=1
1c9e4     01 1E 86 F1 | 	sub	local01, #1
1c9e8                 | '     x+=1
1c9e8     01 28 06 F1 | 	add	local06, #1
1c9ec                 | '     da+=4*4
1c9ec     10 2C 06 F1 | 	add	local08, #16
1c9f0                 | '     db+=2*4
1c9f0     08 2A 06 F1 | 	add	local07, #8
1c9f4     58 FF 9F FD | 	jmp	#LR__2230
1c9f8                 | LR__2231
1c9f8                 | '   else
1c9f8                 | '     d+=db
1c9f8     15 27 02 F1 | 	add	local05, local07
1c9fc                 | '     x+=1
1c9fc     01 28 06 F1 | 	add	local06, #1
1ca00                 | '     da+=2*4
1ca00     08 2C 06 F1 | 	add	local08, #8
1ca04                 | '     db+=2*4
1ca04     08 2A 06 F1 | 	add	local07, #8
1ca08     44 FF 9F FD | 	jmp	#LR__2230
1ca0c                 | LR__2232
1ca0c     A7 F0 03 F6 | 	mov	ptra, fp
1ca10     B2 00 A0 FD | 	call	#popregs_
1ca14                 | _hg010b_spin2_fcircle_ret
1ca14     2D 00 64 FD | 	ret
1ca18                 | 
1ca18                 | '  
1ca18                 | ' '-- A circle ------------------------------------------------------------ 
1ca18                 | '  
1ca18                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ca18                 | _hg010b_spin2_circle
1ca18     08 4A 05 F6 | 	mov	COUNT_, #8
1ca1c     A8 00 A0 FD | 	call	#pushregs_
1ca20     0B 1F 02 F6 | 	mov	local01, arg03
1ca24     FF FF 7F FF 
1ca28     FE 1F 06 FD | 	qmul	local01, ##-2
1ca2c     09 21 02 F6 | 	mov	local02, arg01
1ca30     0A 23 02 F6 | 	mov	local03, arg02
1ca34     0C 25 02 F6 | 	mov	local04, arg04
1ca38                 | ' 
1ca38                 | '  
1ca38                 | ' d:=5-4*r
1ca38     0F 19 02 F6 | 	mov	arg04, local01
1ca3c     02 18 66 F0 | 	shl	arg04, #2
1ca40     05 26 06 F6 | 	mov	local05, #5
1ca44     0C 27 82 F1 | 	sub	local05, arg04
1ca48                 | ' x:=0
1ca48     00 28 06 F6 | 	mov	local06, #0
1ca4c                 | ' y:=r
1ca4c                 | ' da:=(-2*r+5)*4
1ca4c                 | ' db:=3*4
1ca4c     0C 2A 06 F6 | 	mov	local07, #12
1ca50                 | ' repeat while (x<=y) 
1ca50     18 2C 62 FD | 	getqx	local08
1ca54     05 2C 06 F1 | 	add	local08, #5
1ca58     02 2C 66 F0 | 	shl	local08, #2
1ca5c                 | LR__2240
1ca5c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ca60     F4 00 90 1D |  if_a	jmp	#LR__2242
1ca64                 | '   putpixel(x0-x,y0-y,c)
1ca64     10 13 02 F6 | 	mov	arg01, local02
1ca68     14 13 82 F1 | 	sub	arg01, local06
1ca6c     11 15 02 F6 | 	mov	arg02, local03
1ca70     0F 15 82 F1 | 	sub	arg02, local01
1ca74     12 17 02 F6 | 	mov	arg03, local04
1ca78     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ca7c                 | '   putpixel(x0-x,y0+y,c)
1ca7c     10 13 02 F6 | 	mov	arg01, local02
1ca80     14 13 82 F1 | 	sub	arg01, local06
1ca84     11 15 02 F6 | 	mov	arg02, local03
1ca88     0F 15 02 F1 | 	add	arg02, local01
1ca8c     12 17 02 F6 | 	mov	arg03, local04
1ca90     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ca94                 | '   putpixel(x0+x,y0-y,c)
1ca94     10 13 02 F6 | 	mov	arg01, local02
1ca98     14 13 02 F1 | 	add	arg01, local06
1ca9c     11 15 02 F6 | 	mov	arg02, local03
1caa0     0F 15 82 F1 | 	sub	arg02, local01
1caa4     12 17 02 F6 | 	mov	arg03, local04
1caa8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1caac                 | '   putpixel(x0+x,y0+y,c)
1caac     10 13 02 F6 | 	mov	arg01, local02
1cab0     14 13 02 F1 | 	add	arg01, local06
1cab4     11 15 02 F6 | 	mov	arg02, local03
1cab8     0F 15 02 F1 | 	add	arg02, local01
1cabc     12 17 02 F6 | 	mov	arg03, local04
1cac0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1cac4                 | '   putpixel(x0-y,y0-x,c)
1cac4     10 13 02 F6 | 	mov	arg01, local02
1cac8     0F 13 82 F1 | 	sub	arg01, local01
1cacc     11 15 02 F6 | 	mov	arg02, local03
1cad0     14 15 82 F1 | 	sub	arg02, local06
1cad4     12 17 02 F6 | 	mov	arg03, local04
1cad8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1cadc                 | '   putpixel(x0-y,y0+x,c)
1cadc     10 13 02 F6 | 	mov	arg01, local02
1cae0     0F 13 82 F1 | 	sub	arg01, local01
1cae4     11 15 02 F6 | 	mov	arg02, local03
1cae8     14 15 02 F1 | 	add	arg02, local06
1caec     12 17 02 F6 | 	mov	arg03, local04
1caf0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1caf4                 | '   putpixel(x0+y,y0-x,c)
1caf4     10 13 02 F6 | 	mov	arg01, local02
1caf8     0F 13 02 F1 | 	add	arg01, local01
1cafc     11 15 02 F6 | 	mov	arg02, local03
1cb00     14 15 82 F1 | 	sub	arg02, local06
1cb04     12 17 02 F6 | 	mov	arg03, local04
1cb08     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1cb0c                 | '   putpixel(x0+y,y0+x,c)
1cb0c     10 13 02 F6 | 	mov	arg01, local02
1cb10     0F 13 02 F1 | 	add	arg01, local01
1cb14     11 15 02 F6 | 	mov	arg02, local03
1cb18     14 15 02 F1 | 	add	arg02, local06
1cb1c     12 17 02 F6 | 	mov	arg03, local04
1cb20     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1cb24                 | '   if d>0 
1cb24     01 26 56 F2 | 	cmps	local05, #1 wc
1cb28     18 00 90 CD |  if_b	jmp	#LR__2241
1cb2c                 | '     d+=da
1cb2c     16 27 02 F1 | 	add	local05, local08
1cb30                 | '     y-=1
1cb30     01 1E 86 F1 | 	sub	local01, #1
1cb34                 | '     x+=1
1cb34     01 28 06 F1 | 	add	local06, #1
1cb38                 | '     da+=4*4
1cb38     10 2C 06 F1 | 	add	local08, #16
1cb3c                 | '     db+=2*4
1cb3c     08 2A 06 F1 | 	add	local07, #8
1cb40     18 FF 9F FD | 	jmp	#LR__2240
1cb44                 | LR__2241
1cb44                 | '   else
1cb44                 | '     d+=db
1cb44     15 27 02 F1 | 	add	local05, local07
1cb48                 | '     x+=1
1cb48     01 28 06 F1 | 	add	local06, #1
1cb4c                 | '     da+=2*4
1cb4c     08 2C 06 F1 | 	add	local08, #8
1cb50                 | '     db+=2*4
1cb50     08 2A 06 F1 | 	add	local07, #8
1cb54     04 FF 9F FD | 	jmp	#LR__2240
1cb58                 | LR__2242
1cb58     A7 F0 03 F6 | 	mov	ptra, fp
1cb5c     B2 00 A0 FD | 	call	#popregs_
1cb60                 | _hg010b_spin2_circle_ret
1cb60     2D 00 64 FD | 	ret
1cb64                 | 
1cb64                 | '     
1cb64                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1cb64                 | ' 
1cb64                 | ' pub frame(x1,y1,x2,y2,c)
1cb64                 | _hg010b_spin2_frame
1cb64     05 4A 05 F6 | 	mov	COUNT_, #5
1cb68     A8 00 A0 FD | 	call	#pushregs_
1cb6c     09 1F 02 F6 | 	mov	local01, arg01
1cb70     0A 21 02 F6 | 	mov	local02, arg02
1cb74     0B 23 02 F6 | 	mov	local03, arg03
1cb78     0C 25 02 F6 | 	mov	local04, arg04
1cb7c     0D 27 02 F6 | 	mov	local05, arg05
1cb80                 | ' 
1cb80                 | ' fastline(x1,x2,y1,c)
1cb80     0F 13 02 F6 | 	mov	arg01, local01
1cb84     11 15 02 F6 | 	mov	arg02, local03
1cb88     10 17 02 F6 | 	mov	arg03, local02
1cb8c     13 19 02 F6 | 	mov	arg04, local05
1cb90     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1cb94                 | ' fastline(x1,x2,y2,c)
1cb94     0F 13 02 F6 | 	mov	arg01, local01
1cb98     11 15 02 F6 | 	mov	arg02, local03
1cb9c     12 17 02 F6 | 	mov	arg03, local04
1cba0     13 19 02 F6 | 	mov	arg04, local05
1cba4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1cba8                 | ' line(x1,y1,x1,y2,c)
1cba8     0F 13 02 F6 | 	mov	arg01, local01
1cbac     10 15 02 F6 | 	mov	arg02, local02
1cbb0     0F 17 02 F6 | 	mov	arg03, local01
1cbb4     12 19 02 F6 | 	mov	arg04, local04
1cbb8     13 1B 02 F6 | 	mov	arg05, local05
1cbbc                 | ' draw(x1,y1,x2,y2,c)
1cbbc     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1cbc0                 | ' line(x2,y1,x2,y2,c)
1cbc0     11 13 02 F6 | 	mov	arg01, local03
1cbc4     10 15 02 F6 | 	mov	arg02, local02
1cbc8     11 17 02 F6 | 	mov	arg03, local03
1cbcc     12 19 02 F6 | 	mov	arg04, local04
1cbd0     13 1B 02 F6 | 	mov	arg05, local05
1cbd4                 | ' draw(x1,y1,x2,y2,c)
1cbd4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1cbd8     A7 F0 03 F6 | 	mov	ptra, fp
1cbdc     B2 00 A0 FD | 	call	#popregs_
1cbe0                 | _hg010b_spin2_frame_ret
1cbe0     2D 00 64 FD | 	ret
1cbe4                 | 
1cbe4                 | ' 
1cbe4                 | ' '-- A box (a filled rectangle) ----------------------------------------
1cbe4                 | ' 
1cbe4                 | ' pub box(x1,y1,x2,y2,c) |yy
1cbe4                 | _hg010b_spin2_box
1cbe4     06 4A 05 F6 | 	mov	COUNT_, #6
1cbe8     A8 00 A0 FD | 	call	#pushregs_
1cbec     09 1F 02 F6 | 	mov	local01, arg01
1cbf0     0A 21 02 F6 | 	mov	local02, arg02
1cbf4     0B 23 02 F6 | 	mov	local03, arg03
1cbf8     0C 25 02 F6 | 	mov	local04, arg04
1cbfc     0D 27 02 F6 | 	mov	local05, arg05
1cc00                 | ' 
1cc00                 | ' repeat yy from y1 to y2
1cc00     10 25 52 F2 | 	cmps	local04, local02 wc
1cc04     01 28 86 F6 | 	negc	local06, #1
1cc08     14 25 02 F1 | 	add	local04, local06
1cc0c                 | LR__2250
1cc0c                 | '   fastline(x1,x2,yy,c)
1cc0c     0F 13 02 F6 | 	mov	arg01, local01
1cc10     11 15 02 F6 | 	mov	arg02, local03
1cc14     13 19 02 F6 | 	mov	arg04, local05
1cc18     10 17 02 F6 | 	mov	arg03, local02
1cc1c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1cc20     14 21 02 F1 | 	add	local02, local06
1cc24     12 21 0A F2 | 	cmp	local02, local04 wz
1cc28     E0 FF 9F 5D |  if_ne	jmp	#LR__2250
1cc2c     A7 F0 03 F6 | 	mov	ptra, fp
1cc30     B2 00 A0 FD | 	call	#popregs_
1cc34                 | _hg010b_spin2_box_ret
1cc34     2D 00 64 FD | 	ret
1cc38                 | 
1cc38                 | '       
1cc38                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1cc38                 | _hg010b_spin2_putcharxycgf
1cc38                 | ' 
1cc38                 | '  
1cc38                 | ' repeat yy from 0 to 15
1cc38     00 00 06 F6 | 	mov	_var01, #0
1cc3c     97 8C 48 FB | 	callpa	#(@LR__2262-@LR__2260)>>2,fcache_load_ptr_
1cc40                 | LR__2260
1cc40                 | ' 
1cc40                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1cc40     95 E4 05 F1 | 	add	objptr, #149
1cc44     F2 02 02 FB | 	rdlong	_var02, objptr
1cc48     0A 02 66 F0 | 	shl	_var02, #10
1cc4c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1cc50     01 05 02 F1 | 	add	_var03, _var02
1cc54     0B 03 02 F6 | 	mov	_var02, arg03
1cc58     04 02 66 F0 | 	shl	_var02, #4
1cc5c     01 05 02 F1 | 	add	_var03, _var02
1cc60     00 05 02 F1 | 	add	_var03, _var01
1cc64     02 05 C2 FA | 	rdbyte	_var03, _var03
1cc68                 | '   asm
1cc68     00 04 0E F4 | 	testb	_var03, #0 wz
1cc6c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1cc70     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1cc74     01 04 0E F4 | 	testb	_var03, #1 wz
1cc78     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1cc7c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1cc80     02 04 0E F4 | 	testb	_var03, #2 wz
1cc84     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1cc88     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1cc8c     03 04 0E F4 | 	testb	_var03, #3 wz
1cc90     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1cc94     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1cc98     04 04 0E F4 | 	testb	_var03, #4 wz
1cc9c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1cca0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1cca4     05 04 0E F4 | 	testb	_var03, #5 wz
1cca8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ccac     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ccb0     06 04 0E F4 | 	testb	_var03, #6 wz
1ccb4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ccb8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ccbc     07 04 0E F4 | 	testb	_var03, #7 wz
1ccc0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ccc4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ccc8                 | '   
1ccc8                 | '   ccc[0]:=c1
1ccc8     99 E5 05 F1 | 	add	objptr, #409
1cccc     F2 06 62 FC | 	wrlong	_var04, objptr
1ccd0                 | '   ccc[1]:=c2 
1ccd0     04 E4 05 F1 | 	add	objptr, #4
1ccd4     F2 08 62 FC | 	wrlong	_var05, objptr
1ccd8                 | '   long[mailbox0][2]:=8
1ccd8     49 E4 85 F1 | 	sub	objptr, #73
1ccdc     F2 04 02 FB | 	rdlong	_var03, objptr
1cce0     08 04 06 F1 | 	add	_var03, #8
1cce4     02 11 68 FC | 	wrlong	#8, _var03
1cce8                 | '   long[mailbox0][1]:=@ccc
1cce8     45 E4 05 F1 | 	add	objptr, #69
1ccec     F2 04 02 F6 | 	mov	_var03, objptr
1ccf0     45 E4 85 F1 | 	sub	objptr, #69
1ccf4     F2 02 02 FB | 	rdlong	_var02, objptr
1ccf8     04 02 06 F1 | 	add	_var02, #4
1ccfc     01 05 62 FC | 	wrlong	_var03, _var02
1cd00                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1cd00     0C E5 85 F1 | 	sub	objptr, #268
1cd04     F2 04 02 FB | 	rdlong	_var03, objptr
1cd08     0A 03 02 F6 | 	mov	_var02, arg02
1cd0c     00 03 02 F1 | 	add	_var02, _var01
1cd10     0A 02 66 F0 | 	shl	_var02, #10
1cd14     09 0B 02 F6 | 	mov	_var06, arg01
1cd18     02 0A 66 F0 | 	shl	_var06, #2
1cd1c     05 03 02 F1 | 	add	_var02, _var06
1cd20     01 05 02 F1 | 	add	_var03, _var02
1cd24     00 00 78 FF 
1cd28     00 04 06 F1 | 	add	_var03, ##-268435456
1cd2c     0C E5 05 F1 | 	add	objptr, #268
1cd30     F2 0A 02 FB | 	rdlong	_var06, objptr
1cd34     05 05 62 FC | 	wrlong	_var03, _var06
1cd38                 | '   repeat
1cd38                 | LR__2261
1cd38     F2 04 02 FB | 	rdlong	_var03, objptr
1cd3c     02 03 02 FB | 	rdlong	_var02, _var03
1cd40     00 02 56 F2 | 	cmps	_var02, #0 wc
1cd44     F0 FF 9F CD |  if_b	jmp	#LR__2261
1cd48     E9 E5 85 F1 | 	sub	objptr, #489
1cd4c     01 00 06 F1 | 	add	_var01, #1
1cd50     10 00 56 F2 | 	cmps	_var01, #16 wc
1cd54     E8 FE 9F CD |  if_b	jmp	#LR__2260
1cd58                 | LR__2262
1cd58                 | _hg010b_spin2_putcharxycgf_ret
1cd58     2D 00 64 FD | 	ret
1cd5c                 | 
1cd5c                 | ' 
1cd5c                 | ' 
1cd5c                 | ' '**********************************************************************r***
1cd5c                 | ' '                                                                        *
1cd5c                 | ' ' Font related functions                                                 *
1cd5c                 | ' '                                                                        *
1cd5c                 | ' '*************************************************************************
1cd5c                 | ' 
1cd5c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1cd5c                 | ' 
1cd5c                 | ' pub setfontfamily(afontnum)
1cd5c                 | _hg010b_spin2_setfontfamily
1cd5c                 | ' 
1cd5c                 | ' font_family:=afontnum
1cd5c     95 E4 05 F1 | 	add	objptr, #149
1cd60     F2 12 62 FC | 	wrlong	arg01, objptr
1cd64     95 E4 85 F1 | 	sub	objptr, #149
1cd68                 | ' 'if afontnum==8
1cd68                 | ' '  font_ptr:=@amiga_font
1cd68                 | ' 
1cd68                 | ' if afontnum==4
1cd68     04 12 0E F2 | 	cmp	arg01, #4 wz
1cd6c                 | '   font_ptr:=@st_font
1cd6c     08 00 00 AF 
1cd70     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1cd74     08 E4 05 A1 |  if_e	add	objptr, #8
1cd78     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1cd7c     08 E4 85 A1 |  if_e	sub	objptr, #8
1cd80     08 00 00 AF 
1cd84     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1cd88                 | ' if afontnum==0
1cd88     00 12 0E F2 | 	cmp	arg01, #0 wz
1cd8c                 | '   font_ptr:=@vga_font
1cd8c     08 E4 05 A1 |  if_e	add	objptr, #8
1cd90     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1cd94     08 E4 85 A1 |  if_e	sub	objptr, #8
1cd98                 | _hg010b_spin2_setfontfamily_ret
1cd98     2D 00 64 FD | 	ret
1cd9c                 | 
1cd9c                 | ' 
1cd9c                 | ' '*************************************************************************
1cd9c                 | ' '                                                                        *
1cd9c                 | ' '  Cursor functions                                                      *
1cd9c                 | ' '                                                                        *
1cd9c                 | ' '*************************************************************************
1cd9c                 | ' 
1cd9c                 | ' 
1cd9c                 | ' pub setcursorpos(x,y)
1cd9c                 | _hg010b_spin2_setcursorpos
1cd9c                 | ' 
1cd9c                 | ' ''---------- Set the (x,y) position of cursor
1cd9c                 | ' 
1cd9c                 | ' cursor_x:=x
1cd9c     3C E4 05 F1 | 	add	objptr, #60
1cda0     F2 12 52 FC | 	wrword	arg01, objptr
1cda4                 | ' cursor_y:=y
1cda4     02 E4 05 F1 | 	add	objptr, #2
1cda8     F2 14 42 FC | 	wrbyte	arg02, objptr
1cdac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1cdac     02 E4 85 F1 | 	sub	objptr, #2
1cdb0     F2 14 E2 FA | 	rdword	arg02, objptr
1cdb4     02 14 66 F0 | 	shl	arg02, #2
1cdb8     02 E4 05 F1 | 	add	objptr, #2
1cdbc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1cdc0     3E E4 85 F1 | 	sub	objptr, #62
1cdc4     04 16 66 F0 | 	shl	arg03, #4
1cdc8     04 16 06 F1 | 	add	arg03, #4
1cdcc     11 12 06 F6 | 	mov	arg01, #17
1cdd0     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1cdd4                 | _hg010b_spin2_setcursorpos_ret
1cdd4     2D 00 64 FD | 	ret
1cdd8                 | 
1cdd8                 | ' 
1cdd8                 | ' pub setcursorx(x)
1cdd8                 | _hg010b_spin2_setcursorx
1cdd8                 | ' cursor_x:=x
1cdd8     3C E4 05 F1 | 	add	objptr, #60
1cddc     F2 12 52 FC | 	wrword	arg01, objptr
1cde0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1cde0     F2 14 E2 FA | 	rdword	arg02, objptr
1cde4     02 14 66 F0 | 	shl	arg02, #2
1cde8     02 E4 05 F1 | 	add	objptr, #2
1cdec     F2 16 C2 FA | 	rdbyte	arg03, objptr
1cdf0     3E E4 85 F1 | 	sub	objptr, #62
1cdf4     04 16 66 F0 | 	shl	arg03, #4
1cdf8     04 16 06 F1 | 	add	arg03, #4
1cdfc     11 12 06 F6 | 	mov	arg01, #17
1ce00     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ce04                 | _hg010b_spin2_setcursorx_ret
1ce04     2D 00 64 FD | 	ret
1ce08                 | 
1ce08                 | ' 
1ce08                 | ' pub setcursory(y) 
1ce08                 | _hg010b_spin2_setcursory
1ce08                 | ' cursor_y:=y
1ce08     3E E4 05 F1 | 	add	objptr, #62
1ce0c     F2 12 42 FC | 	wrbyte	arg01, objptr
1ce10                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1ce10     02 E4 85 F1 | 	sub	objptr, #2
1ce14     F2 14 E2 FA | 	rdword	arg02, objptr
1ce18     02 14 66 F0 | 	shl	arg02, #2
1ce1c     02 E4 05 F1 | 	add	objptr, #2
1ce20     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ce24     3E E4 85 F1 | 	sub	objptr, #62
1ce28     04 16 66 F0 | 	shl	arg03, #4
1ce2c     04 16 06 F1 | 	add	arg03, #4
1ce30     11 12 06 F6 | 	mov	arg01, #17
1ce34     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1ce38                 | _hg010b_spin2_setcursory_ret
1ce38     2D 00 64 FD | 	ret
1ce3c                 | 
1ce3c                 | ' 
1ce3c                 | ' '*************************************************************************
1ce3c                 | ' '                                                                        *
1ce3c                 | ' '  VBlank functions                                                      *
1ce3c                 | ' '                                                                        *
1ce3c                 | ' '*************************************************************************
1ce3c                 | ' 
1ce3c                 | ' pub waitvbl(amount) | i
1ce3c                 | _hg010b_spin2_waitvbl
1ce3c     03 4A 05 F6 | 	mov	COUNT_, #3
1ce40     A8 00 A0 FD | 	call	#pushregs_
1ce44     09 1F 02 F6 | 	mov	local01, arg01
1ce48                 | ' 
1ce48                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1ce48                 | ' 
1ce48                 | ' repeat i from 1 to amount
1ce48     01 20 06 F6 | 	mov	local02, #1
1ce4c     01 1E 56 F2 | 	cmps	local01, #1 wc
1ce50     01 22 86 F6 | 	negc	local03, #1
1ce54     11 1F 02 F1 | 	add	local01, local03
1ce58                 | LR__2270
1ce58                 | '   repeat until vblank==0
1ce58                 | LR__2271
1ce58     49 E4 05 F1 | 	add	objptr, #73
1ce5c     F2 12 0A FB | 	rdlong	arg01, objptr wz
1ce60     49 E4 85 F1 | 	sub	objptr, #73
1ce64     0C 00 90 AD |  if_e	jmp	#LR__2272
1ce68                 | '     waitus(100)
1ce68     64 12 06 F6 | 	mov	arg01, #100
1ce6c     28 1A B0 FD | 	call	#__system___waitus
1ce70     E4 FF 9F FD | 	jmp	#LR__2271
1ce74                 | LR__2272
1ce74                 | '   repeat until vblank==1
1ce74                 | LR__2273
1ce74     49 E4 05 F1 | 	add	objptr, #73
1ce78     F2 12 02 FB | 	rdlong	arg01, objptr
1ce7c     49 E4 85 F1 | 	sub	objptr, #73
1ce80     01 12 0E F2 | 	cmp	arg01, #1 wz
1ce84     0C 00 90 AD |  if_e	jmp	#LR__2274
1ce88                 | '     waitus(100)
1ce88     64 12 06 F6 | 	mov	arg01, #100
1ce8c     08 1A B0 FD | 	call	#__system___waitus
1ce90     E0 FF 9F FD | 	jmp	#LR__2273
1ce94                 | LR__2274
1ce94     11 21 02 F1 | 	add	local02, local03
1ce98     0F 21 0A F2 | 	cmp	local02, local01 wz
1ce9c     B8 FF 9F 5D |  if_ne	jmp	#LR__2270
1cea0     A7 F0 03 F6 | 	mov	ptra, fp
1cea4     B2 00 A0 FD | 	call	#popregs_
1cea8                 | _hg010b_spin2_waitvbl_ret
1cea8     2D 00 64 FD | 	ret
1ceac                 | 
1ceac                 | ' 
1ceac                 | ' 
1ceac                 | ' pub cls(fc,bc)   :c,i
1ceac                 | _hg010b_spin2_cls
1ceac     02 4A 05 F6 | 	mov	COUNT_, #2
1ceb0     A8 00 A0 FD | 	call	#pushregs_
1ceb4     09 1F 02 F6 | 	mov	local01, arg01
1ceb8     0A 21 02 F6 | 	mov	local02, arg02
1cebc                 | ' 
1cebc                 | ' c:=bc
1cebc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1cebc     DD E4 05 F1 | 	add	objptr, #221
1cec0     F2 12 02 FB | 	rdlong	arg01, objptr
1cec4     A5 E4 85 F1 | 	sub	objptr, #165
1cec8     F2 16 02 FB | 	rdlong	arg03, objptr
1cecc     02 16 66 F0 | 	shl	arg03, #2
1ced0     10 15 02 F6 | 	mov	arg02, local02
1ced4     00 18 06 F6 | 	mov	arg04, #0
1ced8     01 1A 06 F6 | 	mov	arg05, #1
1cedc     0B 00 00 FF 
1cee0     94 E4 05 F1 | 	add	objptr, ##5780
1cee4     64 0B B0 FD | 	call	#_psram_spin2_fill
1cee8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1cee8     0B 00 00 FF 
1ceec     C8 E4 85 F1 | 	sub	objptr, ##5832
1cef0     F2 12 02 FB | 	rdlong	arg01, objptr
1cef4     04 E4 85 F1 | 	sub	objptr, #4
1cef8     F2 16 02 FB | 	rdlong	arg03, objptr
1cefc     09 17 82 F1 | 	sub	arg03, arg01
1cf00     20 14 06 F6 | 	mov	arg02, #32
1cf04     00 18 06 F6 | 	mov	arg04, #0
1cf08     01 1A 06 F6 | 	mov	arg05, #1
1cf0c     0B 00 00 FF 
1cf10     CC E4 05 F1 | 	add	objptr, ##5836
1cf14     34 0B B0 FD | 	call	#_psram_spin2_fill
1cf18                 | ' setwritecolors(fc,bc)
1cf18                 | ' 
1cf18                 | ' write_color:=ff
1cf18     0B 00 00 FF 
1cf1c     8B E4 85 F1 | 	sub	objptr, ##5771
1cf20     F2 1E 62 FC | 	wrlong	local01, objptr
1cf24                 | ' write_background:=bb
1cf24     04 E4 05 F1 | 	add	objptr, #4
1cf28     F2 20 62 FC | 	wrlong	local02, objptr
1cf2c                 | ' cursor_x:=0
1cf2c     09 E4 85 F1 | 	sub	objptr, #9
1cf30     F2 00 58 FC | 	wrword	#0, objptr
1cf34                 | ' cursor_y:=0
1cf34     02 E4 05 F1 | 	add	objptr, #2
1cf38     F2 00 48 FC | 	wrbyte	#0, objptr
1cf3c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1cf3c     02 E4 85 F1 | 	sub	objptr, #2
1cf40     F2 14 E2 FA | 	rdword	arg02, objptr
1cf44     02 14 66 F0 | 	shl	arg02, #2
1cf48     02 E4 05 F1 | 	add	objptr, #2
1cf4c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1cf50     3E E4 85 F1 | 	sub	objptr, #62
1cf54     04 16 66 F0 | 	shl	arg03, #4
1cf58     04 16 06 F1 | 	add	arg03, #4
1cf5c     11 12 06 F6 | 	mov	arg01, #17
1cf60     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1cf64                 | ' setcursorcolor(fc)
1cf64     0F 13 02 F6 | 	mov	arg01, local01
1cf68     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1cf6c     10 FB 01 F6 | 	mov	result1, local02
1cf70     00 FC 05 F6 | 	mov	result2, #0
1cf74     A7 F0 03 F6 | 	mov	ptra, fp
1cf78     B2 00 A0 FD | 	call	#popregs_
1cf7c                 | _hg010b_spin2_cls_ret
1cf7c     2D 00 64 FD | 	ret
1cf80                 | 
1cf80                 | ' 
1cf80                 | ' ''---------- Output a char at the cursor position, move the cursor 
1cf80                 | ' 
1cf80                 | ' pub putchar(achar) | c,x,y,l,newcpl
1cf80                 | _hg010b_spin2_putchar
1cf80     02 4A 05 F6 | 	mov	COUNT_, #2
1cf84     A8 00 A0 FD | 	call	#pushregs_
1cf88     09 1F 02 F6 | 	mov	local01, arg01
1cf8c                 | ' 
1cf8c                 | ' if achar==10
1cf8c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1cf90                 | '   crlf()
1cf90     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1cf94                 | ' if achar==9
1cf94     09 1E 0E F2 | 	cmp	local01, #9 wz
1cf98     18 00 90 5D |  if_ne	jmp	#LR__2280
1cf9c                 | '   cursor_x:=(cursor_x& %11110000)+16
1cf9c     3C E4 05 F1 | 	add	objptr, #60
1cfa0     F2 16 E2 FA | 	rdword	arg03, objptr
1cfa4     F0 16 06 F5 | 	and	arg03, #240
1cfa8     10 16 06 F1 | 	add	arg03, #16
1cfac     F2 16 52 FC | 	wrword	arg03, objptr
1cfb0     3C E4 85 F1 | 	sub	objptr, #60
1cfb4                 | LR__2280
1cfb4                 | '   
1cfb4                 | ' if (achar<>9) && (achar<>10) 
1cfb4     09 1E 0E F2 | 	cmp	local01, #9 wz
1cfb8     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1cfbc     A8 00 90 AD |  if_e	jmp	#LR__2281
1cfc0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1cfc0     3C E4 05 F1 | 	add	objptr, #60
1cfc4     F2 12 E2 FA | 	rdword	arg01, objptr
1cfc8     02 E4 05 F1 | 	add	objptr, #2
1cfcc     F2 14 C2 FA | 	rdbyte	arg02, objptr
1cfd0     04 14 66 F0 | 	shl	arg02, #4
1cfd4     04 14 06 F1 | 	add	arg02, #4
1cfd8     03 E4 05 F1 | 	add	objptr, #3
1cfdc     F2 18 02 FB | 	rdlong	arg04, objptr
1cfe0     04 E4 05 F1 | 	add	objptr, #4
1cfe4     F2 1A 02 FB | 	rdlong	arg05, objptr
1cfe8     45 E4 85 F1 | 	sub	objptr, #69
1cfec     0F 17 02 F6 | 	mov	arg03, local01
1cff0     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1cff4     04 E4 05 F1 | 	add	objptr, #4
1cff8     F2 12 02 FB | 	rdlong	arg01, objptr
1cffc     10 00 00 FF 
1d000     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d004     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d008     3A E4 05 F1 | 	add	objptr, #58
1d00c     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d010     0D 17 02 FD | 	qmul	arg03, arg05
1d014                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d014     10 00 00 FF 
1d018     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d01c     02 E4 85 F1 | 	sub	objptr, #2
1d020     F2 20 E2 FA | 	rdword	local02, objptr
1d024     01 20 46 F0 | 	shr	local02, #1
1d028     0F 15 02 F6 | 	mov	arg02, local01
1d02c     01 16 06 F6 | 	mov	arg03, #1
1d030     00 18 06 F6 | 	mov	arg04, #0
1d034     01 1A 06 F6 | 	mov	arg05, #1
1d038     0B 00 00 FF 
1d03c     90 E4 05 F1 | 	add	objptr, ##5776
1d040     18 1E 62 FD | 	getqx	local01
1d044     10 1F 02 F1 | 	add	local01, local02
1d048     0F 13 02 F1 | 	add	arg01, local01
1d04c     FC 09 B0 FD | 	call	#_psram_spin2_fill
1d050                 | '   cursor_x+=2
1d050     0B 00 00 FF 
1d054     90 E4 85 F1 | 	sub	objptr, ##5776
1d058     F2 20 E2 FA | 	rdword	local02, objptr
1d05c     02 20 06 F1 | 	add	local02, #2
1d060     F2 20 52 FC | 	wrword	local02, objptr
1d064     3C E4 85 F1 | 	sub	objptr, #60
1d068                 | LR__2281
1d068                 | ' 
1d068                 | ' if cursor_x>=256
1d068     3C E4 05 F1 | 	add	objptr, #60
1d06c     F2 20 E2 FA | 	rdword	local02, objptr
1d070     3C E4 85 F1 | 	sub	objptr, #60
1d074     00 21 56 F2 | 	cmps	local02, #256 wc
1d078     64 00 90 CD |  if_b	jmp	#LR__2283
1d07c                 | '   cursor_x:=0
1d07c     3C E4 05 F1 | 	add	objptr, #60
1d080     F2 00 58 FC | 	wrword	#0, objptr
1d084                 | '   cursor_y+=1
1d084     02 E4 05 F1 | 	add	objptr, #2
1d088     F2 20 C2 FA | 	rdbyte	local02, objptr
1d08c     01 20 06 F1 | 	add	local02, #1
1d090     F2 20 42 FC | 	wrbyte	local02, objptr
1d094                 | '   if cursor_y>st_lines-1
1d094     C3 E4 05 F1 | 	add	objptr, #195
1d098     F2 20 02 FB | 	rdlong	local02, objptr
1d09c     01 20 86 F1 | 	sub	local02, #1
1d0a0     C3 E4 85 F1 | 	sub	objptr, #195
1d0a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d0a8     3E E4 85 F1 | 	sub	objptr, #62
1d0ac     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d0b0     2C 00 90 ED |  if_be	jmp	#LR__2282
1d0b4                 | '     scrollup2()
1d0b4     00 12 06 F6 | 	mov	arg01, #0
1d0b8     01 00 00 FF 
1d0bc     58 14 06 F6 | 	mov	arg02, ##600
1d0c0     10 16 06 F6 | 	mov	arg03, #16
1d0c4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d0c8                 | '     cursor_y:=st_lines-1
1d0c8     01 E5 05 F1 | 	add	objptr, #257
1d0cc     F2 20 02 FB | 	rdlong	local02, objptr
1d0d0     01 20 86 F1 | 	sub	local02, #1
1d0d4     C3 E4 85 F1 | 	sub	objptr, #195
1d0d8     F2 20 42 FC | 	wrbyte	local02, objptr
1d0dc     3E E4 85 F1 | 	sub	objptr, #62
1d0e0                 | LR__2282
1d0e0                 | LR__2283
1d0e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d0e0     3C E4 05 F1 | 	add	objptr, #60
1d0e4     F2 14 E2 FA | 	rdword	arg02, objptr
1d0e8     02 14 66 F0 | 	shl	arg02, #2
1d0ec     02 E4 05 F1 | 	add	objptr, #2
1d0f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d0f4     3E E4 85 F1 | 	sub	objptr, #62
1d0f8     04 16 66 F0 | 	shl	arg03, #4
1d0fc     04 16 06 F1 | 	add	arg03, #4
1d100     11 12 06 F6 | 	mov	arg01, #17
1d104     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1d108     A7 F0 03 F6 | 	mov	ptra, fp
1d10c     B2 00 A0 FD | 	call	#popregs_
1d110                 | _hg010b_spin2_putchar_ret
1d110     2D 00 64 FD | 	ret
1d114                 | 
1d114                 | '     
1d114                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1d114                 | ' 
1d114                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1d114                 | _hg010b_spin2_putchar2
1d114     02 4A 05 F6 | 	mov	COUNT_, #2
1d118     A8 00 A0 FD | 	call	#pushregs_
1d11c     09 1F 02 F6 | 	mov	local01, arg01
1d120                 | ' 
1d120                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d120     3C E4 05 F1 | 	add	objptr, #60
1d124     F2 12 E2 FA | 	rdword	arg01, objptr
1d128     02 E4 05 F1 | 	add	objptr, #2
1d12c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d130     04 14 66 F0 | 	shl	arg02, #4
1d134     04 14 06 F1 | 	add	arg02, #4
1d138     03 E4 05 F1 | 	add	objptr, #3
1d13c     F2 18 02 FB | 	rdlong	arg04, objptr
1d140     04 E4 05 F1 | 	add	objptr, #4
1d144     F2 1A 02 FB | 	rdlong	arg05, objptr
1d148     45 E4 85 F1 | 	sub	objptr, #69
1d14c     0F 17 02 F6 | 	mov	arg03, local01
1d150     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d154     04 E4 05 F1 | 	add	objptr, #4
1d158     F2 12 02 FB | 	rdlong	arg01, objptr
1d15c     10 00 00 FF 
1d160     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d164     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d168     3A E4 05 F1 | 	add	objptr, #58
1d16c     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d170     0D 17 02 FD | 	qmul	arg03, arg05
1d174                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d174     10 00 00 FF 
1d178     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d17c     02 E4 85 F1 | 	sub	objptr, #2
1d180     F2 20 E2 FA | 	rdword	local02, objptr
1d184     01 20 46 F0 | 	shr	local02, #1
1d188     0F 15 02 F6 | 	mov	arg02, local01
1d18c     01 16 06 F6 | 	mov	arg03, #1
1d190     00 18 06 F6 | 	mov	arg04, #0
1d194     01 1A 06 F6 | 	mov	arg05, #1
1d198     0B 00 00 FF 
1d19c     90 E4 05 F1 | 	add	objptr, ##5776
1d1a0     18 1E 62 FD | 	getqx	local01
1d1a4     10 1F 02 F1 | 	add	local01, local02
1d1a8     0F 13 02 F1 | 	add	arg01, local01
1d1ac     9C 08 B0 FD | 	call	#_psram_spin2_fill
1d1b0                 | ' 
1d1b0                 | ' cursor_x+=2
1d1b0     0B 00 00 FF 
1d1b4     90 E4 85 F1 | 	sub	objptr, ##5776
1d1b8     F2 20 E2 FA | 	rdword	local02, objptr
1d1bc     02 20 06 F1 | 	add	local02, #2
1d1c0     F2 20 52 FC | 	wrword	local02, objptr
1d1c4                 | ' if cursor_x>=256
1d1c4     F2 20 E2 FA | 	rdword	local02, objptr
1d1c8     3C E4 85 F1 | 	sub	objptr, #60
1d1cc     00 21 56 F2 | 	cmps	local02, #256 wc
1d1d0     64 00 90 CD |  if_b	jmp	#LR__2291
1d1d4                 | '   cursor_x:=0
1d1d4     3C E4 05 F1 | 	add	objptr, #60
1d1d8     F2 00 58 FC | 	wrword	#0, objptr
1d1dc                 | '   cursor_y+=1
1d1dc     02 E4 05 F1 | 	add	objptr, #2
1d1e0     F2 20 C2 FA | 	rdbyte	local02, objptr
1d1e4     01 20 06 F1 | 	add	local02, #1
1d1e8     F2 20 42 FC | 	wrbyte	local02, objptr
1d1ec                 | '   if cursor_y>st_lines-1
1d1ec     C3 E4 05 F1 | 	add	objptr, #195
1d1f0     F2 20 02 FB | 	rdlong	local02, objptr
1d1f4     01 20 86 F1 | 	sub	local02, #1
1d1f8     C3 E4 85 F1 | 	sub	objptr, #195
1d1fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d200     3E E4 85 F1 | 	sub	objptr, #62
1d204     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d208     2C 00 90 ED |  if_be	jmp	#LR__2290
1d20c                 | '     scrollup2()
1d20c     00 12 06 F6 | 	mov	arg01, #0
1d210     01 00 00 FF 
1d214     58 14 06 F6 | 	mov	arg02, ##600
1d218     10 16 06 F6 | 	mov	arg03, #16
1d21c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d220                 | '     cursor_y:=st_lines-1
1d220     01 E5 05 F1 | 	add	objptr, #257
1d224     F2 20 02 FB | 	rdlong	local02, objptr
1d228     01 20 86 F1 | 	sub	local02, #1
1d22c     C3 E4 85 F1 | 	sub	objptr, #195
1d230     F2 20 42 FC | 	wrbyte	local02, objptr
1d234     3E E4 85 F1 | 	sub	objptr, #62
1d238                 | LR__2290
1d238                 | LR__2291
1d238                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1d238     3C E4 05 F1 | 	add	objptr, #60
1d23c     F2 14 E2 FA | 	rdword	arg02, objptr
1d240     02 14 66 F0 | 	shl	arg02, #2
1d244     02 E4 05 F1 | 	add	objptr, #2
1d248     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d24c     3E E4 85 F1 | 	sub	objptr, #62
1d250     04 16 66 F0 | 	shl	arg03, #4
1d254     04 16 06 F1 | 	add	arg03, #4
1d258     11 12 06 F6 | 	mov	arg01, #17
1d25c     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1d260     A7 F0 03 F6 | 	mov	ptra, fp
1d264     B2 00 A0 FD | 	call	#popregs_
1d268                 | _hg010b_spin2_putchar2_ret
1d268     2D 00 64 FD | 	ret
1d26c                 | 
1d26c                 | ' ''--------- Output a string at the cursor position, move the cursor  
1d26c                 | ' 
1d26c                 | ' pub write(text) | iii,c,ncx,ncy
1d26c                 | _hg010b_spin2_write
1d26c     04 4A 05 F6 | 	mov	COUNT_, #4
1d270     A8 00 A0 FD | 	call	#pushregs_
1d274     09 1F 02 F6 | 	mov	local01, arg01
1d278                 | ' 
1d278                 | ' repeat iii from 0 to strsize(text)-1
1d278     00 20 06 F6 | 	mov	local02, #0
1d27c     0F 13 02 F6 | 	mov	arg01, local01
1d280     09 23 02 F6 | 	mov	local03, arg01
1d284     97 06 48 FB | 	callpa	#(@LR__2301-@LR__2300)>>2,fcache_load_ptr_
1d288                 | LR__2300
1d288     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d28c     01 22 06 51 |  if_ne	add	local03, #1
1d290     F4 FF 9F 5D |  if_ne	jmp	#LR__2300
1d294                 | LR__2301
1d294     09 23 82 F1 | 	sub	local03, arg01
1d298     01 22 86 F1 | 	sub	local03, #1
1d29c     00 22 56 F2 | 	cmps	local03, #0 wc
1d2a0     01 24 86 F6 | 	negc	local04, #1
1d2a4     12 23 02 F1 | 	add	local03, local04
1d2a8                 | LR__2302
1d2a8                 | '   putchar2(byte[text+iii])
1d2a8     0F 13 02 F6 | 	mov	arg01, local01
1d2ac     10 13 02 F1 | 	add	arg01, local02
1d2b0     09 13 C2 FA | 	rdbyte	arg01, arg01
1d2b4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1d2b8     12 21 02 F1 | 	add	local02, local04
1d2bc     11 21 0A F2 | 	cmp	local02, local03 wz
1d2c0     E4 FF 9F 5D |  if_ne	jmp	#LR__2302
1d2c4     A7 F0 03 F6 | 	mov	ptra, fp
1d2c8     B2 00 A0 FD | 	call	#popregs_
1d2cc                 | _hg010b_spin2_write_ret
1d2cc     2D 00 64 FD | 	ret
1d2d0                 | 
1d2d0                 | '    
1d2d0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1d2d0                 | ' 
1d2d0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1d2d0                 | _hg010b_spin2_scrollup2
1d2d0     03 4A 05 F6 | 	mov	COUNT_, #3
1d2d4     A8 00 A0 FD | 	call	#pushregs_
1d2d8                 | ' 	
1d2d8                 | ' repeat i from 4 to 579 
1d2d8     04 1E 06 F6 | 	mov	local01, #4
1d2dc                 | LR__2310
1d2dc     F9 E4 05 F1 | 	add	objptr, #249
1d2e0     F2 1A 02 FB | 	rdlong	arg05, objptr
1d2e4     1C E4 85 F1 | 	sub	objptr, #28
1d2e8     F2 14 02 FB | 	rdlong	arg02, objptr
1d2ec     0F 19 02 F6 | 	mov	arg04, local01
1d2f0     10 18 06 F1 | 	add	arg04, #16
1d2f4     02 18 66 F0 | 	shl	arg04, #2
1d2f8     14 E4 05 F1 | 	add	objptr, #20
1d2fc     F2 16 02 FB | 	rdlong	arg03, objptr
1d300     0B 19 02 FD | 	qmul	arg04, arg03
1d304                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1d304     F6 03 00 FF 
1d308     00 12 06 F6 | 	mov	arg01, ##519168
1d30c     0D 13 82 F1 | 	sub	arg01, arg05
1d310     02 16 66 F0 | 	shl	arg03, #2
1d314     0A 00 00 FF 
1d318     DB E5 05 F1 | 	add	objptr, ##5595
1d31c     18 1A 62 FD | 	getqx	arg05
1d320     0D 15 02 F1 | 	add	arg02, arg05
1d324     EC 05 B0 FD | 	call	#_psram_spin2_read1
1d328     0A 00 00 FF 
1d32c     D3 E5 85 F1 | 	sub	objptr, ##5587
1d330     F2 1A 02 FB | 	rdlong	arg05, objptr
1d334     1C E4 85 F1 | 	sub	objptr, #28
1d338     F2 14 02 FB | 	rdlong	arg02, objptr
1d33c     0F 19 02 F6 | 	mov	arg04, local01
1d340     02 18 66 F0 | 	shl	arg04, #2
1d344     14 E4 05 F1 | 	add	objptr, #20
1d348     F2 16 02 FB | 	rdlong	arg03, objptr
1d34c     0B 19 02 FD | 	qmul	arg04, arg03
1d350                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1d350     F6 03 00 FF 
1d354     00 12 06 F6 | 	mov	arg01, ##519168
1d358     0D 13 82 F1 | 	sub	arg01, arg05
1d35c     02 16 66 F0 | 	shl	arg03, #2
1d360     0A 00 00 FF 
1d364     DB E5 05 F1 | 	add	objptr, ##5595
1d368     18 1A 62 FD | 	getqx	arg05
1d36c     0D 15 02 F1 | 	add	arg02, arg05
1d370     3C 06 B0 FD | 	call	#_psram_spin2_write
1d374     0B 00 00 FF 
1d378     CC E4 85 F1 | 	sub	objptr, ##5836
1d37c     01 1E 06 F1 | 	add	local01, #1
1d380     01 00 00 FF 
1d384     44 1E 16 F2 | 	cmp	local01, ##580 wc
1d388     50 FF 9F CD |  if_b	jmp	#LR__2310
1d38c                 | ' 
1d38c                 | ' repeat i from 580 to 599
1d38c     01 00 00 FF 
1d390     44 1E 06 F6 | 	mov	local01, ##580
1d394                 | LR__2311
1d394                 | '    fastline(0,1023,i,write_background)   
1d394     45 E4 05 F1 | 	add	objptr, #69
1d398     F2 18 02 FB | 	rdlong	arg04, objptr
1d39c     45 E4 85 F1 | 	sub	objptr, #69
1d3a0     00 12 06 F6 | 	mov	arg01, #0
1d3a4     09 14 CE F9 | 	bmask	arg02, #9
1d3a8     0F 17 02 F6 | 	mov	arg03, local01
1d3ac     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1d3b0     01 1E 06 F1 | 	add	local01, #1
1d3b4     01 00 00 FF 
1d3b8     58 1E 16 F2 | 	cmp	local01, ##600 wc
1d3bc     D4 FF 9F CD |  if_b	jmp	#LR__2311
1d3c0                 | ' repeat i from 0 to 3
1d3c0     00 1E 06 F6 | 	mov	local01, #0
1d3c4                 | LR__2312
1d3c4                 | '    fastline(0,1023,i,write_background)      
1d3c4     45 E4 05 F1 | 	add	objptr, #69
1d3c8     F2 18 02 FB | 	rdlong	arg04, objptr
1d3cc     45 E4 85 F1 | 	sub	objptr, #69
1d3d0     00 12 06 F6 | 	mov	arg01, #0
1d3d4     09 14 CE F9 | 	bmask	arg02, #9
1d3d8     0F 17 02 F6 | 	mov	arg03, local01
1d3dc     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1d3e0     01 1E 06 F1 | 	add	local01, #1
1d3e4     04 1E 56 F2 | 	cmps	local01, #4 wc
1d3e8     D8 FF 9F CD |  if_b	jmp	#LR__2312
1d3ec                 | ' 
1d3ec                 | ' repeat i from 0 to 35
1d3ec     00 1E 06 F6 | 	mov	local01, #0
1d3f0                 | LR__2313
1d3f0     0F 1B 02 F6 | 	mov	arg05, local01
1d3f4     01 1A 06 F1 | 	add	arg05, #1
1d3f8     10 00 00 FF 
1d3fc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d400     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d404     0B 1B 02 FD | 	qmul	arg05, arg03
1d408                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1d408     F6 03 00 FF 
1d40c     00 12 06 F6 | 	mov	arg01, ##519168
1d410     F9 E4 05 F1 | 	add	objptr, #249
1d414     F2 1A 02 FB | 	rdlong	arg05, objptr
1d418     0D 13 82 F1 | 	sub	arg01, arg05
1d41c     F5 E4 85 F1 | 	sub	objptr, #245
1d420     F2 14 02 FB | 	rdlong	arg02, objptr
1d424     10 00 00 FF 
1d428     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d42c     0B 00 00 FF 
1d430     C8 E4 05 F1 | 	add	objptr, ##5832
1d434     18 1A 62 FD | 	getqx	arg05
1d438     0D 15 02 F1 | 	add	arg02, arg05
1d43c     D4 04 B0 FD | 	call	#_psram_spin2_read1
1d440     10 00 00 FF 
1d444     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d448     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d44c     0B 1F 02 FD | 	qmul	local01, arg03
1d450                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1d450     F6 03 00 FF 
1d454     00 12 06 F6 | 	mov	arg01, ##519168
1d458     0A 00 00 FF 
1d45c     D3 E5 85 F1 | 	sub	objptr, ##5587
1d460     F2 1A 02 FB | 	rdlong	arg05, objptr
1d464     0D 13 82 F1 | 	sub	arg01, arg05
1d468     F5 E4 85 F1 | 	sub	objptr, #245
1d46c     F2 14 02 FB | 	rdlong	arg02, objptr
1d470     10 00 00 FF 
1d474     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d478     0B 00 00 FF 
1d47c     C8 E4 05 F1 | 	add	objptr, ##5832
1d480     18 1A 62 FD | 	getqx	arg05
1d484     0D 15 02 F1 | 	add	arg02, arg05
1d488     24 05 B0 FD | 	call	#_psram_spin2_write
1d48c     0B 00 00 FF 
1d490     CC E4 85 F1 | 	sub	objptr, ##5836
1d494     01 1E 06 F1 | 	add	local01, #1
1d498     24 1E 56 F2 | 	cmps	local01, #36 wc
1d49c     50 FF 9F CD |  if_b	jmp	#LR__2313
1d4a0                 | ' repeat i from 0 to timings[7]-1
1d4a0     00 1E 06 F6 | 	mov	local01, #0
1d4a4     10 00 00 FF 
1d4a8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d4ac     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1d4b0     10 00 00 FF 
1d4b4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d4b8     01 20 86 F1 | 	sub	local02, #1
1d4bc     00 20 56 F2 | 	cmps	local02, #0 wc
1d4c0     01 22 86 F6 | 	negc	local03, #1
1d4c4     11 21 02 F1 | 	add	local02, local03
1d4c8                 | LR__2314
1d4c8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1d4c8     04 E4 05 F1 | 	add	objptr, #4
1d4cc     F2 12 02 FB | 	rdlong	arg01, objptr
1d4d0     10 00 00 FF 
1d4d4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d4d8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1d4dc     10 00 00 FF 
1d4e0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d4e4     0D 19 02 F6 | 	mov	arg04, arg05
1d4e8     03 18 66 F0 | 	shl	arg04, #3
1d4ec     0D 19 02 F1 | 	add	arg04, arg05
1d4f0     02 18 66 F0 | 	shl	arg04, #2
1d4f4     0F 19 02 F1 | 	add	arg04, local01
1d4f8     0C 13 02 F1 | 	add	arg01, arg04
1d4fc     20 14 06 F6 | 	mov	arg02, #32
1d500     01 16 06 F6 | 	mov	arg03, #1
1d504     00 18 06 F6 | 	mov	arg04, #0
1d508     01 1A 06 F6 | 	mov	arg05, #1
1d50c     0B 00 00 FF 
1d510     C8 E4 05 F1 | 	add	objptr, ##5832
1d514     34 05 B0 FD | 	call	#_psram_spin2_fill
1d518     0B 00 00 FF 
1d51c     CC E4 85 F1 | 	sub	objptr, ##5836
1d520     11 1F 02 F1 | 	add	local01, local03
1d524     10 1F 0A F2 | 	cmp	local01, local02 wz
1d528     9C FF 9F 5D |  if_ne	jmp	#LR__2314
1d52c     A7 F0 03 F6 | 	mov	ptra, fp
1d530     B2 00 A0 FD | 	call	#popregs_
1d534                 | _hg010b_spin2_scrollup2_ret
1d534     2D 00 64 FD | 	ret
1d538                 | 
1d538                 | ' 
1d538                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1d538                 | ' 
1d538                 | ' pub crlf()
1d538                 | _hg010b_spin2_crlf
1d538                 | ' 
1d538                 | ' cursor_x:=leading_spaces*2
1d538     01 00 00 FF 
1d53c     B6 E4 05 F1 | 	add	objptr, ##694
1d540     F2 16 02 FB | 	rdlong	arg03, objptr
1d544     01 16 66 F0 | 	shl	arg03, #1
1d548     01 00 00 FF 
1d54c     7A E4 85 F1 | 	sub	objptr, ##634
1d550     F2 16 52 FC | 	wrword	arg03, objptr
1d554                 | ' cursor_y+=1
1d554     02 E4 05 F1 | 	add	objptr, #2
1d558     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d55c     01 16 06 F1 | 	add	arg03, #1
1d560     F2 16 42 FC | 	wrbyte	arg03, objptr
1d564                 | ' if cursor_y>st_lines-1
1d564     C3 E4 05 F1 | 	add	objptr, #195
1d568     F2 16 02 FB | 	rdlong	arg03, objptr
1d56c     01 16 86 F1 | 	sub	arg03, #1
1d570     C3 E4 85 F1 | 	sub	objptr, #195
1d574     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d578     3E E4 85 F1 | 	sub	objptr, #62
1d57c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1d580     2C 00 90 ED |  if_be	jmp	#LR__2320
1d584                 | '   scrollup2()
1d584     00 12 06 F6 | 	mov	arg01, #0
1d588     01 00 00 FF 
1d58c     58 14 06 F6 | 	mov	arg02, ##600
1d590     10 16 06 F6 | 	mov	arg03, #16
1d594     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1d598                 | '   cursor_y:=st_lines-1
1d598     01 E5 05 F1 | 	add	objptr, #257
1d59c     F2 16 02 FB | 	rdlong	arg03, objptr
1d5a0     01 16 86 F1 | 	sub	arg03, #1
1d5a4     C3 E4 85 F1 | 	sub	objptr, #195
1d5a8     F2 16 42 FC | 	wrbyte	arg03, objptr
1d5ac     3E E4 85 F1 | 	sub	objptr, #62
1d5b0                 | LR__2320
1d5b0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1d5b0     3C E4 05 F1 | 	add	objptr, #60
1d5b4     F2 14 E2 FA | 	rdword	arg02, objptr
1d5b8     02 14 66 F0 | 	shl	arg02, #2
1d5bc     02 E4 05 F1 | 	add	objptr, #2
1d5c0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d5c4     3E E4 85 F1 | 	sub	objptr, #62
1d5c8     04 16 66 F0 | 	shl	arg03, #4
1d5cc     04 16 06 F1 | 	add	arg03, #4
1d5d0     11 12 06 F6 | 	mov	arg01, #17
1d5d4     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1d5d8                 | _hg010b_spin2_crlf_ret
1d5d8     2D 00 64 FD | 	ret
1d5dc                 | 
1d5dc                 | ' 
1d5dc                 | ' 
1d5dc                 | ' '*************************************************************************
1d5dc                 | ' '                                                                        *
1d5dc                 | ' '  Conversions                                                           *
1d5dc                 | ' '                                                                        *
1d5dc                 | ' '*************************************************************************
1d5dc                 | ' 
1d5dc                 | ' ''---------- Convert a integer to dec string, return a pointer
1d5dc                 | ' 
1d5dc                 | ' pub inttostr(i):result |q,pos,k,j
1d5dc                 | _hg010b_spin2_inttostr
1d5dc     03 4A 05 F6 | 	mov	COUNT_, #3
1d5e0     A8 00 A0 FD | 	call	#pushregs_
1d5e4     09 1F 0A F6 | 	mov	local01, arg01 wz
1d5e8                 | ' 
1d5e8                 | ' j:=i
1d5e8                 | ' pos:=10
1d5e8     0A 20 06 F6 | 	mov	local02, #10
1d5ec                 | ' k:=0
1d5ec     00 22 06 F6 | 	mov	local03, #0
1d5f0                 | ' 
1d5f0                 | ' if (j==0)
1d5f0     18 00 90 5D |  if_ne	jmp	#LR__2330
1d5f4                 | '   n_string[0]:=48
1d5f4     4D E4 05 F1 | 	add	objptr, #77
1d5f8     F2 60 48 FC | 	wrbyte	#48, objptr
1d5fc                 | '   n_string[1]:=0
1d5fc     01 E4 05 F1 | 	add	objptr, #1
1d600     F2 00 48 FC | 	wrbyte	#0, objptr
1d604     4E E4 85 F1 | 	sub	objptr, #78
1d608     C4 00 90 FD | 	jmp	#LR__2337
1d60c                 | LR__2330
1d60c                 | ' 
1d60c                 | ' else
1d60c                 | '   if (j<0)
1d60c     0F 1F 52 F6 | 	abs	local01, local01 wc
1d610                 | '     j:=0-j
1d610                 | '     k:=45
1d610     2D 22 06 C6 |  if_b	mov	local03, #45
1d614                 | ' 
1d614                 | '   n_string[11]:=0
1d614     58 E4 05 F1 | 	add	objptr, #88
1d618     F2 00 48 FC | 	wrbyte	#0, objptr
1d61c     58 E4 85 F1 | 	sub	objptr, #88
1d620     97 24 48 FB | 	callpa	#(@LR__2332-@LR__2331)>>2,fcache_load_ptr_
1d624                 | '   repeat while (pos>-1)
1d624                 | LR__2331
1d624     00 20 56 F2 | 	cmps	local02, #0 wc
1d628     40 00 90 CD |  if_b	jmp	#LR__2333
1d62c     0F FB 51 F6 | 	abs	result1, local01 wc
1d630     0A FA 15 FD | 	qdiv	result1, #10
1d634                 | '     q:=j//10
1d634     19 FA 61 FD | 	getqy	result1
1d638     FD FA 81 F6 | 	negc	result1, result1
1d63c     0F 1F 52 F6 | 	abs	local01, local01 wc
1d640     0A 1E 16 FD | 	qdiv	local01, #10
1d644                 | '     q:=48+q
1d644     30 FA 05 F1 | 	add	result1, #48
1d648                 | '     n_string[pos]:=q
1d648     10 1F 02 F6 | 	mov	local01, local02
1d64c     4D E4 05 F1 | 	add	objptr, #77
1d650     F2 1E 02 F1 | 	add	local01, objptr
1d654     0F FB 41 FC | 	wrbyte	result1, local01
1d658                 | '     j:=j/10
1d658     4D E4 85 F1 | 	sub	objptr, #77
1d65c                 | '     pos-=1
1d65c     01 20 86 F1 | 	sub	local02, #1
1d660     18 1E 62 FD | 	getqx	local01
1d664     0F 1F 82 F6 | 	negc	local01, local01
1d668     B8 FF 9F FD | 	jmp	#LR__2331
1d66c                 | LR__2332
1d66c                 | LR__2333
1d66c                 | '   repeat while n_string[0]==48
1d66c                 | LR__2334
1d66c     4D E4 05 F1 | 	add	objptr, #77
1d670     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d674     4D E4 85 F1 | 	sub	objptr, #77
1d678     30 16 0E F2 | 	cmp	arg03, #48 wz
1d67c     20 00 90 5D |  if_ne	jmp	#LR__2335
1d680                 | '     bytemove(@n_string,@n_string+1,12)
1d680     4D E4 05 F1 | 	add	objptr, #77
1d684     F2 12 02 F6 | 	mov	arg01, objptr
1d688     F2 14 02 F6 | 	mov	arg02, objptr
1d68c     4D E4 85 F1 | 	sub	objptr, #77
1d690     01 14 06 F1 | 	add	arg02, #1
1d694     0C 16 06 F6 | 	mov	arg03, #12
1d698     BC 0D B0 FD | 	call	#__system____builtin_memmove
1d69c     CC FF 9F FD | 	jmp	#LR__2334
1d6a0                 | LR__2335
1d6a0                 | ' 
1d6a0                 | '   if k==45
1d6a0     2D 22 0E F2 | 	cmp	local03, #45 wz
1d6a4     28 00 90 5D |  if_ne	jmp	#LR__2336
1d6a8                 | '      bytemove(@n_string+1,@n_string,12)
1d6a8     4D E4 05 F1 | 	add	objptr, #77
1d6ac     F2 12 02 F6 | 	mov	arg01, objptr
1d6b0     01 12 06 F1 | 	add	arg01, #1
1d6b4     F2 14 02 F6 | 	mov	arg02, objptr
1d6b8     4D E4 85 F1 | 	sub	objptr, #77
1d6bc     0C 16 06 F6 | 	mov	arg03, #12
1d6c0     94 0D B0 FD | 	call	#__system____builtin_memmove
1d6c4                 | '      n_string[0]:=k
1d6c4     4D E4 05 F1 | 	add	objptr, #77
1d6c8     F2 22 42 FC | 	wrbyte	local03, objptr
1d6cc     4D E4 85 F1 | 	sub	objptr, #77
1d6d0                 | LR__2336
1d6d0                 | LR__2337
1d6d0                 | ' 
1d6d0                 | ' q:=@n_string
1d6d0     4D E4 05 F1 | 	add	objptr, #77
1d6d4     F2 FA 01 F6 | 	mov	result1, objptr
1d6d8     4D E4 85 F1 | 	sub	objptr, #77
1d6dc                 | ' return q
1d6dc     A7 F0 03 F6 | 	mov	ptra, fp
1d6e0     B2 00 A0 FD | 	call	#popregs_
1d6e4                 | _hg010b_spin2_inttostr_ret
1d6e4     2D 00 64 FD | 	ret
1d6e8                 | 
1d6e8                 | ' 
1d6e8                 | ' '..............................................................................
1d6e8                 | ' 
1d6e8                 | ' {{
1d6e8                 | ' }}
1d6e8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1d6e8                 | _psram_spin2_startx
1d6e8     04 4A 05 F6 | 	mov	COUNT_, #4
1d6ec     A8 00 A0 FD | 	call	#pushregs_
1d6f0     09 1F 02 F6 | 	mov	local01, arg01
1d6f4     0B 21 02 F6 | 	mov	local02, arg03
1d6f8     0C 23 02 F6 | 	mov	local03, arg04
1d6fc                 | '     stop() ' restart driver if required
1d6fc     54 01 B0 FD | 	call	#_psram_spin2_stop
1d700     00 1E 0E F2 | 	cmp	local01, #0 wz
1d704     14 1E 06 AB |  if_e	rdlong	local01, #20
1d708     0F 15 52 F6 | 	abs	arg02, local01 wc
1d70c     A1 07 00 FF 
1d710     40 14 16 FD | 	qdiv	arg02, ##1000000
1d714                 | ' 
1d714                 | '     ' use current frequency if none specified
1d714                 | ' 
1d714                 | '     if freq == 0 
1d714                 | '         freq := clkfreq 
1d714                 | ' 
1d714                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1d714                 | ' 
1d714                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1d714                 | '     if burst < 0
1d714                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1d714     18 14 62 FD | 	getqx	arg02
1d718     0A 19 82 F6 | 	negc	arg04, arg02
1d71c     03 18 66 F0 | 	shl	arg04, #3
1d720     84 18 86 F1 | 	sub	arg04, #132
1d724     04 18 46 F0 | 	shr	arg04, #4
1d728     04 18 66 F0 | 	shl	arg04, #4
1d72c     00 18 56 F2 | 	cmps	arg04, #0 wc
1d730     0E FA 65 C6 |  if_b	neg	result1, #14
1d734     10 01 90 CD |  if_b	jmp	#LR__2343
1d738                 | ' 
1d738                 | '     ' compute the input delay
1d738                 | ' 
1d738                 | '     if delay <= 0
1d738     01 20 56 F2 | 	cmps	local02, #1 wc
1d73c     10 00 90 3D |  if_ae	jmp	#LR__2340
1d740                 | '         delay := lookupDelay(freq)
1d740     0F 13 02 F6 | 	mov	arg01, local01
1d744     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1d748     FD 20 02 F6 | 	mov	local02, result1
1d74c     04 00 90 FD | 	jmp	#LR__2341
1d750                 | LR__2340
1d750                 | '     else
1d750                 | '         delay <#= $f ' limit to 15
1d750     0F 20 66 F3 | 	fles	local02, #15
1d754                 | LR__2341
1d754                 | ' 
1d754                 | '     ' create our lock
1d754                 | ' 
1d754                 | '     driverlock := LOCKNEW()  
1d754     00 FA 05 F6 | 	mov	result1, #0
1d758     04 FA 61 FD | 	locknew	result1
1d75c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1d760     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1d764                 | '     if driverlock == -1
1d764     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1d768     FF FF 7F FF 
1d76c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1d770                 | '         return ERR_NO_LOCK
1d770     1A FA 65 A6 |  if_e	neg	result1, #26
1d774     D0 00 90 AD |  if_e	jmp	#LR__2343
1d778                 | ' 
1d778                 | '     ' patch in the proper data and HUB addresses to the startup structure
1d778                 | ' 
1d778                 | '     long[@startupData][0]:=clkfreq
1d778     14 1E 06 FB | 	rdlong	local01, #20
1d77c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1d780     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1d784                 | ' '    long[@startupData][1]:=$1000_0000
1d784                 | '     long[@startupData][5]:=@deviceData
1d784     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1d788     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1d78c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1d790     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1d794     14 14 06 F1 | 	add	arg02, #20
1d798     0A 1F 62 FC | 	wrlong	local01, arg02
1d79c                 | '     long[@startupData][6]:=@qosData
1d79c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1d7a0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1d7a4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1d7a8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1d7ac     18 14 06 F1 | 	add	arg02, #24
1d7b0     0A 1F 62 FC | 	wrlong	local01, arg02
1d7b4                 | '     long[@startupData][7]:=$7FF00
1d7b4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1d7b8     1C 1E 06 F1 | 	add	local01, #28
1d7bc     FF 03 80 FF 
1d7c0     0F 01 6A FC | 	wrlong	##524032, local01
1d7c4                 | ' 
1d7c4                 | '     ' setup some default bank and QoS parameter values
1d7c4                 | ' 
1d7c4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1d7c4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1d7c8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1d7cc     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1d7d0     10 18 66 F0 | 	shl	arg04, #16
1d7d4     0C 20 66 F0 | 	shl	local02, #12
1d7d8     10 19 42 F5 | 	or	arg04, local02
1d7dc     18 18 46 F5 | 	or	arg04, #24
1d7e0     0C 15 02 F6 | 	mov	arg02, arg04
1d7e4     02 16 06 F6 | 	mov	arg03, #2
1d7e8     A0 00 A0 FD | 	call	#\builtin_longfill_
1d7ec                 | '     longfill(@qosData, $FFFF0000, 8)
1d7ec     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1d7f0     07 16 06 F6 | 	mov	arg03, #7
1d7f4     28 16 62 FD | 	setq	arg03
1d7f8     80 FF FF FF 
1d7fc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1d800                 | ' 
1d800                 | '     ' get the address of the PSRAM memory driver so we can start it
1d800                 | ' 
1d800                 | '     driverAddr:= driver.getDriverAddr()
1d800                 | '     return @driver_start
1d800     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1d804     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1d808     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1d80c                 | ' 
1d80c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1d80c                 | ' 
1d80c                 | '     if desiredcog < 0
1d80c     00 22 56 F2 | 	cmps	local03, #0 wc
1d810                 | '         desiredcog := NEWCOG
1d810     10 22 06 C6 |  if_b	mov	local03, #16
1d814                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1d814     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1d818     11 25 02 F6 | 	mov	local04, local03
1d81c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1d820     0A 25 F2 FC | 	coginit	local04, arg02 wc
1d824     01 24 66 C6 |  if_b	neg	local04, #1
1d828     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1d82c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1d830                 | '     repeat until long[@startupData] == 0 
1d830     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1d834                 | LR__2342
1d834     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1d838     F8 FF 9F 5D |  if_ne	jmp	#LR__2342
1d83c                 | ' 
1d83c                 | '     return drivercog
1d83c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1d840     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1d844     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1d848                 | LR__2343
1d848     A7 F0 03 F6 | 	mov	ptra, fp
1d84c     B2 00 A0 FD | 	call	#popregs_
1d850                 | _psram_spin2_startx_ret
1d850     2D 00 64 FD | 	ret
1d854                 | 
1d854                 | ' 
1d854                 | ' '..............................................................................
1d854                 | ' 
1d854                 | ' {{
1d854                 | ' }}
1d854                 | ' PUB stop() : i
1d854                 | _psram_spin2_stop
1d854     00 00 06 F6 | 	mov	_var01, #0
1d858                 | '     if drivercog <> -1
1d858     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1d85c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1d860     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1d864     FF FF 7F FF 
1d868     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1d86c     70 00 90 AD |  if_e	jmp	#LR__2353
1d870                 | '         cogstop(drivercog) ' a rather brutal stop
1d870     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1d874     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1d878     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1d87c     03 12 62 FD | 	cogstop	arg01
1d880     97 26 48 FB | 	callpa	#(@LR__2352-@LR__2350)>>2,fcache_load_ptr_
1d884                 | '         repeat i from 0 to 7
1d884                 | LR__2350
1d884                 | '             if long[$7FF00][i*3] < 0
1d884     00 FB 01 F6 | 	mov	result1, _var01
1d888     01 FA 65 F0 | 	shl	result1, #1
1d88c     00 FB 01 F1 | 	add	result1, _var01
1d890     02 FA 65 F0 | 	shl	result1, #2
1d894     FF 03 00 FF 
1d898     00 FB 05 F1 | 	add	result1, ##524032
1d89c     FD FA 01 FB | 	rdlong	result1, result1
1d8a0     00 FA 55 F2 | 	cmps	result1, #0 wc
1d8a4     1C 00 90 3D |  if_ae	jmp	#LR__2351
1d8a8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1d8a8     00 FB 01 F6 | 	mov	result1, _var01
1d8ac     01 FA 65 F0 | 	shl	result1, #1
1d8b0     00 FB 01 F1 | 	add	result1, _var01
1d8b4     02 FA 65 F0 | 	shl	result1, #2
1d8b8     FF 03 00 FF 
1d8bc     00 FB 05 F1 | 	add	result1, ##524032
1d8c0     FD 20 68 FC | 	wrlong	#16, result1
1d8c4                 | LR__2351
1d8c4     01 00 06 F1 | 	add	_var01, #1
1d8c8     08 00 56 F2 | 	cmps	_var01, #8 wc
1d8cc     B4 FF 9F CD |  if_b	jmp	#LR__2350
1d8d0                 | LR__2352
1d8d0                 | '         drivercog := -1
1d8d0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1d8d4     FF FF FF FF 
1d8d8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1d8dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1d8e0                 | LR__2353
1d8e0                 | '     if driverlock <> -1
1d8e0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1d8e4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1d8e8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1d8ec     FF FF 7F FF 
1d8f0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1d8f4                 | '         LOCKRET(driverlock)
1d8f4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1d8f8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1d8fc     05 12 62 5D |  if_ne	lockret	arg01
1d900                 | '         driverlock := -1
1d900     FF FF FF 5F 
1d904     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1d908     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1d90c     00 FB 01 F6 | 	mov	result1, _var01
1d910                 | _psram_spin2_stop_ret
1d910     2D 00 64 FD | 	ret
1d914                 | 
1d914                 | ' 
1d914                 | ' '..............................................................................
1d914                 | ' 
1d914                 | ' {{
1d914                 | ' }}
1d914                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1d914                 | _psram_spin2_read1
1d914                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1d914                 | '     if drivercog == -1 ' driver must be running
1d914     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1d918     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1d91c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1d920     FF FF 7F FF 
1d924     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1d928                 | '         return ERR_INACTIVE
1d928     0F FA 65 A6 |  if_e	neg	result1, #15
1d92c     7C 00 90 AD |  if_e	jmp	#LR__2361
1d930                 | '     if count == 0 ' don't even bother reading
1d930     00 16 0E F2 | 	cmp	arg03, #0 wz
1d934                 | '         return 0
1d934     00 FA 05 A6 |  if_e	mov	result1, #0
1d938     70 00 90 AD |  if_e	jmp	#LR__2361
1d93c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1d93c     00 FA 05 F6 | 	mov	result1, #0
1d940     01 FA 61 FD | 	cogid	result1
1d944     FD 00 02 F6 | 	mov	_var01, result1
1d948     01 00 66 F0 | 	shl	_var01, #1
1d94c     FD 00 02 F1 | 	add	_var01, result1
1d950     02 00 66 F0 | 	shl	_var01, #2
1d954     FF 03 00 FF 
1d958     00 03 06 F6 | 	mov	_var02, ##524032
1d95c     00 03 02 F1 | 	add	_var02, _var01
1d960                 | '     if long[mailbox] < 0
1d960     01 01 02 FB | 	rdlong	_var01, _var02
1d964     00 00 56 F2 | 	cmps	_var01, #0 wc
1d968                 | '         return ERR_MAILBOX_BUSY
1d968     1C FA 65 C6 |  if_b	neg	result1, #28
1d96c     3C 00 90 CD |  if_b	jmp	#LR__2361
1d970                 | '     long[mailbox][2] := count
1d970     08 02 06 F1 | 	add	_var02, #8
1d974     01 17 62 FC | 	wrlong	arg03, _var02
1d978                 | '     long[mailbox][1] := dstHubAddr
1d978     04 02 86 F1 | 	sub	_var02, #4
1d97c     01 13 62 FC | 	wrlong	arg01, _var02
1d980     04 02 86 F1 | 	sub	_var02, #4
1d984                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1d984     0A 05 02 F6 | 	mov	_var03, arg02
1d988     D9 04 06 F4 | 	bitl	_var03, #217
1d98c     00 00 58 FF 
1d990     00 00 06 F6 | 	mov	_var01, ##-1342177280
1d994     02 01 02 F1 | 	add	_var01, _var03
1d998     01 01 62 FC | 	wrlong	_var01, _var02
1d99c                 | '     repeat
1d99c                 | LR__2360
1d99c                 | '         result := long[mailbox]    
1d99c     01 05 02 FB | 	rdlong	_var03, _var02
1d9a0     00 04 56 F2 | 	cmps	_var03, #0 wc
1d9a4     F4 FF 9F CD |  if_b	jmp	#LR__2360
1d9a8                 | '     while result < 0   
1d9a8                 | '     return -result                       'return success or error
1d9a8     02 FB 61 F6 | 	neg	result1, _var03
1d9ac                 | LR__2361
1d9ac                 | _psram_spin2_read1_ret
1d9ac     2D 00 64 FD | 	ret
1d9b0                 | 
1d9b0                 | ' 
1d9b0                 | ' '..............................................................................
1d9b0                 | ' 
1d9b0                 | ' {{
1d9b0                 | ' }}
1d9b0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1d9b0                 | _psram_spin2_write
1d9b0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1d9b0                 | '     if drivercog == -1 ' driver must be running
1d9b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1d9b4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1d9b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1d9bc     FF FF 7F FF 
1d9c0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1d9c4                 | '         return ERR_INACTIVE
1d9c4     0F FA 65 A6 |  if_e	neg	result1, #15
1d9c8     7C 00 90 AD |  if_e	jmp	#LR__2371
1d9cc                 | '     if count == 0 ' don't even bother writing
1d9cc     00 16 0E F2 | 	cmp	arg03, #0 wz
1d9d0                 | '         return 0
1d9d0     00 FA 05 A6 |  if_e	mov	result1, #0
1d9d4     70 00 90 AD |  if_e	jmp	#LR__2371
1d9d8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1d9d8     00 FA 05 F6 | 	mov	result1, #0
1d9dc     01 FA 61 FD | 	cogid	result1
1d9e0     FD 00 02 F6 | 	mov	_var01, result1
1d9e4     01 00 66 F0 | 	shl	_var01, #1
1d9e8     FD 00 02 F1 | 	add	_var01, result1
1d9ec     02 00 66 F0 | 	shl	_var01, #2
1d9f0     FF 03 00 FF 
1d9f4     00 03 06 F6 | 	mov	_var02, ##524032
1d9f8     00 03 02 F1 | 	add	_var02, _var01
1d9fc                 | '     if long[mailbox] < 0
1d9fc     01 01 02 FB | 	rdlong	_var01, _var02
1da00     00 00 56 F2 | 	cmps	_var01, #0 wc
1da04                 | '         return ERR_MAILBOX_BUSY
1da04     1C FA 65 C6 |  if_b	neg	result1, #28
1da08     3C 00 90 CD |  if_b	jmp	#LR__2371
1da0c                 | '     long[mailbox][2] := count
1da0c     08 02 06 F1 | 	add	_var02, #8
1da10     01 17 62 FC | 	wrlong	arg03, _var02
1da14                 | '     long[mailbox][1] := srcHubAddr
1da14     04 02 86 F1 | 	sub	_var02, #4
1da18     01 13 62 FC | 	wrlong	arg01, _var02
1da1c     04 02 86 F1 | 	sub	_var02, #4
1da20                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1da20     0A 05 02 F6 | 	mov	_var03, arg02
1da24     D9 04 06 F4 | 	bitl	_var03, #217
1da28     00 00 78 FF 
1da2c     00 00 06 F6 | 	mov	_var01, ##-268435456
1da30     02 01 02 F1 | 	add	_var01, _var03
1da34     01 01 62 FC | 	wrlong	_var01, _var02
1da38                 | '     repeat
1da38                 | LR__2370
1da38                 | '         result := long[mailbox]    
1da38     01 05 02 FB | 	rdlong	_var03, _var02
1da3c     00 04 56 F2 | 	cmps	_var03, #0 wc
1da40     F4 FF 9F CD |  if_b	jmp	#LR__2370
1da44                 | '     while result < 0   
1da44                 | '     return -result                       'return success or error
1da44     02 FB 61 F6 | 	neg	result1, _var03
1da48                 | LR__2371
1da48                 | _psram_spin2_write_ret
1da48     2D 00 64 FD | 	ret
1da4c                 | 
1da4c                 | ' 
1da4c                 | ' ' generalized fill
1da4c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1da4c                 | _psram_spin2_fill
1da4c     09 01 02 F6 | 	mov	_var01, arg01
1da50     0A 03 02 F6 | 	mov	_var02, arg02
1da54     0B 05 02 F6 | 	mov	_var03, arg03
1da58     0D 07 02 F6 | 	mov	_var04, arg05
1da5c                 | '     case datasize 
1da5c     01 06 86 F1 | 	sub	_var04, #1
1da60     04 06 26 F3 | 	fle	_var04, #4
1da64     30 06 62 FD | 	jmprel	_var04
1da68                 | LR__2380
1da68     10 00 90 FD | 	jmp	#LR__2381
1da6c     18 00 90 FD | 	jmp	#LR__2382
1da70     2C 00 90 FD | 	jmp	#LR__2384
1da74     1C 00 90 FD | 	jmp	#LR__2383
1da78     24 00 90 FD | 	jmp	#LR__2384
1da7c                 | LR__2381
1da7c                 | '         1: req := driver.R_WRITEBYTE
1da7c     00 00 60 FF 
1da80     00 08 06 F6 | 	mov	_var05, ##-1073741824
1da84     20 00 90 FD | 	jmp	#LR__2385
1da88                 | LR__2382
1da88                 | '         2: req := driver.R_WRITEWORD
1da88     00 00 68 FF 
1da8c     00 08 06 F6 | 	mov	_var05, ##-805306368
1da90     14 00 90 FD | 	jmp	#LR__2385
1da94                 | LR__2383
1da94                 | '         4: req := driver.R_WRITELONG
1da94     00 00 70 FF 
1da98     00 08 06 F6 | 	mov	_var05, ##-536870912
1da9c     08 00 90 FD | 	jmp	#LR__2385
1daa0                 | LR__2384
1daa0                 | '         other : return ERR_INVALID
1daa0     06 FA 65 F6 | 	neg	result1, #6
1daa4     94 00 90 FD | 	jmp	#LR__2387
1daa8                 | LR__2385
1daa8                 | '     if count == 0   ' nothing to do
1daa8     00 04 0E F2 | 	cmp	_var03, #0 wz
1daac                 | '         return 0
1daac     00 FA 05 A6 |  if_e	mov	result1, #0
1dab0     88 00 90 AD |  if_e	jmp	#LR__2387
1dab4                 | '     if drivercog == -1
1dab4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1dab8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1dabc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dac0     FF FF 7F FF 
1dac4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1dac8                 | '         return ERR_INACTIVE
1dac8     0F FA 65 A6 |  if_e	neg	result1, #15
1dacc     6C 00 90 AD |  if_e	jmp	#LR__2387
1dad0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1dad0     00 FA 05 F6 | 	mov	result1, #0
1dad4     01 FA 61 FD | 	cogid	result1
1dad8     FD 06 02 F6 | 	mov	_var04, result1
1dadc     01 06 66 F0 | 	shl	_var04, #1
1dae0     FD 06 02 F1 | 	add	_var04, result1
1dae4     02 06 66 F0 | 	shl	_var04, #2
1dae8     FF 03 00 FF 
1daec     00 0B 06 F6 | 	mov	_var06, ##524032
1daf0     03 0B 02 F1 | 	add	_var06, _var04
1daf4                 | '     if long[mailbox] < 0
1daf4     05 07 02 FB | 	rdlong	_var04, _var06
1daf8     00 06 56 F2 | 	cmps	_var04, #0 wc
1dafc                 | '         return ERR_MAILBOX_BUSY
1dafc     1C FA 65 C6 |  if_b	neg	result1, #28
1db00     38 00 90 CD |  if_b	jmp	#LR__2387
1db04                 | '     long[mailbox][2] := count
1db04     08 0A 06 F1 | 	add	_var06, #8
1db08     05 05 62 FC | 	wrlong	_var03, _var06
1db0c                 | '     long[mailbox][1] := pattern
1db0c     04 0A 86 F1 | 	sub	_var06, #4
1db10     05 03 62 FC | 	wrlong	_var02, _var06
1db14     04 0A 86 F1 | 	sub	_var06, #4
1db18                 | '     long[mailbox] := req + (addr & $1ffffff)
1db18     04 0D 02 F6 | 	mov	_var07, _var05
1db1c     00 0F 02 F6 | 	mov	_var08, _var01
1db20     D9 0E 06 F4 | 	bitl	_var08, #217
1db24     07 0D 02 F1 | 	add	_var07, _var08
1db28     05 0D 62 FC | 	wrlong	_var07, _var06
1db2c                 | '     repeat
1db2c                 | LR__2386
1db2c                 | '         r := long[mailbox]
1db2c     05 0F 02 FB | 	rdlong	_var08, _var06
1db30     00 0E 56 F2 | 	cmps	_var08, #0 wc
1db34     F4 FF 9F CD |  if_b	jmp	#LR__2386
1db38                 | '     while r < 0
1db38                 | '     return -r                  ' return 0 for success or negated error code
1db38     07 FB 61 F6 | 	neg	result1, _var08
1db3c                 | LR__2387
1db3c                 | _psram_spin2_fill_ret
1db3c     2D 00 64 FD | 	ret
1db40                 | 
1db40                 | ' 
1db40                 | ' '..............................................................................
1db40                 | ' 
1db40                 | ' {{
1db40                 | ' }}
1db40                 | ' PUB setQos(cog, qos) : result | mailbox
1db40                 | _psram_spin2_setQos
1db40     09 01 02 F6 | 	mov	_var01, arg01
1db44                 | '     if drivercog == -1 ' driver must be running
1db44     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1db48     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1db4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1db50     FF FF 7F FF 
1db54     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1db58                 | '         return ERR_INACTIVE
1db58     0F FA 65 A6 |  if_e	neg	result1, #15
1db5c     9C 00 90 AD |  if_e	jmp	#LR__2394
1db60                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1db60     00 00 56 F2 | 	cmps	_var01, #0 wc
1db64     08 00 90 CD |  if_b	jmp	#LR__2390
1db68     08 00 56 F2 | 	cmps	_var01, #8 wc
1db6c     08 00 90 CD |  if_b	jmp	#LR__2391
1db70                 | LR__2390
1db70                 | '         return ERR_INVALID
1db70     06 FA 65 F6 | 	neg	result1, #6
1db74     84 00 90 FD | 	jmp	#LR__2394
1db78                 | LR__2391
1db78                 | '     long[@qosData][cog] := qos & !$1ff
1db78     FF 15 26 F5 | 	andn	arg02, #511
1db7c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1db80     02 00 66 F0 | 	shl	_var01, #2
1db84     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1db88     00 15 62 FC | 	wrlong	arg02, _var01
1db8c                 | '     mailbox := $7FF00 + drivercog*12
1db8c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1db90     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1db94     02 07 02 F6 | 	mov	_var04, _var03
1db98     01 06 66 F0 | 	shl	_var04, #1
1db9c     02 07 02 F1 | 	add	_var04, _var03
1dba0     02 06 66 F0 | 	shl	_var04, #2
1dba4     FF 03 00 FF 
1dba8     00 09 06 F6 | 	mov	_var05, ##524032
1dbac     03 09 02 F1 | 	add	_var05, _var04
1dbb0                 | '     repeat until LOCKTRY(driverlock)
1dbb0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1dbb4                 | LR__2392
1dbb4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1dbb8     06 12 72 FD | 	locktry	arg01 wc
1dbbc     F4 FF 9F 3D |  if_ae	jmp	#LR__2392
1dbc0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1dbc4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1dbc4     00 06 06 F6 | 	mov	_var04, #0
1dbc8     01 06 62 FD | 	cogid	_var04
1dbcc     00 00 78 FF 
1dbd0     00 02 06 F6 | 	mov	_var02, ##-268435456
1dbd4     03 03 02 F1 | 	add	_var02, _var04
1dbd8     04 03 62 FC | 	wrlong	_var02, _var05
1dbdc                 | '     repeat while long[mailbox] < 0
1dbdc                 | LR__2393
1dbdc     04 03 02 FB | 	rdlong	_var02, _var05
1dbe0     00 02 56 F2 | 	cmps	_var02, #0 wc
1dbe4     F4 FF 9F CD |  if_b	jmp	#LR__2393
1dbe8                 | '     LOCKREL(driverlock)
1dbe8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dbec     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1dbf0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1dbf4     07 12 72 FD | 	lockrel	arg01 wc
1dbf8     00 FA 05 F6 | 	mov	result1, #0
1dbfc                 | LR__2394
1dbfc                 | _psram_spin2_setQos_ret
1dbfc     2D 00 64 FD | 	ret
1dc00                 | 
1dc00                 | ' 
1dc00                 | ' '..............................................................................
1dc00                 | ' 
1dc00                 | ' {{
1dc00                 | ' }}
1dc00                 | ' PRI lookupDelay(freq) : delay | profile
1dc00                 | _psram_spin2_lookupDelay
1dc00                 | '     profile := @delayTable
1dc00     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1dc04     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1dc08                 | '     delay := long[profile][0]
1dc08     00 03 02 FB | 	rdlong	_var02, _var01
1dc0c                 | '     repeat while long[profile][1] 
1dc0c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1dc10     97 16 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1dc14                 | LR__2400
1dc14     04 00 06 F1 | 	add	_var01, #4
1dc18     00 FB 09 FB | 	rdlong	result1, _var01 wz
1dc1c     04 00 86 F1 | 	sub	_var01, #4
1dc20     1C 00 90 AD |  if_e	jmp	#LR__2402
1dc24                 | '         if freq +< long[profile][1] 
1dc24     04 00 06 F1 | 	add	_var01, #4
1dc28     00 FB 01 FB | 	rdlong	result1, _var01
1dc2c     04 00 86 F1 | 	sub	_var01, #4
1dc30     FD 12 12 F2 | 	cmp	arg01, result1 wc
1dc34                 | '             quit
1dc34                 | '         profile += 4
1dc34     04 00 06 31 |  if_ae	add	_var01, #4
1dc38                 | '         delay++
1dc38     01 02 06 31 |  if_ae	add	_var02, #1
1dc3c     D4 FF 9F 3D |  if_ae	jmp	#LR__2400
1dc40                 | LR__2401
1dc40                 | LR__2402
1dc40     01 FB 01 F6 | 	mov	result1, _var02
1dc44                 | _psram_spin2_lookupDelay_ret
1dc44     2D 00 64 FD | 	ret
1dc48                 | 
1dc48                 | ' 
1dc48                 | ' PUB start() : r
1dc48                 | _usbnew_spin2_start
1dc48     00 00 06 F6 | 	mov	_var01, #0
1dc4c                 | '   ifnot driver_cog
1dc4c     15 00 00 FF 
1dc50     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1dc54     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1dc58     15 00 00 FF 
1dc5c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1dc60     38 00 90 5D |  if_ne	jmp	#LR__2410
1dc64                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1dc64     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1dc68     10 00 06 F6 | 	mov	_var01, #16
1dc6c     00 16 06 F6 | 	mov	arg03, #0
1dc70     28 16 62 FD | 	setq	arg03
1dc74     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1dc78     01 00 66 C6 |  if_b	neg	_var01, #1
1dc7c                 | '     if r >= 0
1dc7c     00 00 56 F2 | 	cmps	_var01, #0 wc
1dc80                 | '       driver_cog := r+1
1dc80     00 03 02 36 |  if_ae	mov	_var02, _var01
1dc84     01 02 06 31 |  if_ae	add	_var02, #1
1dc88     15 00 00 3F 
1dc8c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1dc90     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1dc94     15 00 00 3F 
1dc98     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1dc9c                 | LR__2410
1dc9c     00 FB 01 F6 | 	mov	result1, _var01
1dca0                 | _usbnew_spin2_start_ret
1dca0     2D 00 64 FD | 	ret
1dca4                 | 
1dca4                 | '     '' (Always enabled)
1dca4                 | ' 
1dca4                 | ' '' Get current pressed state of a keyboard key
1dca4                 | ' PUB keystate(key) : r | buf[2],tmp
1dca4                 | _usbnew_spin2_keystate
1dca4     00 04 06 F6 | 	mov	_var03, #0
1dca8                 | '   if key >= $E0 && key < $E8
1dca8     E0 12 56 F2 | 	cmps	arg01, #224 wc
1dcac     34 00 90 CD |  if_b	jmp	#LR__2420
1dcb0     E8 12 56 F2 | 	cmps	arg01, #232 wc
1dcb4     2C 00 90 3D |  if_ae	jmp	#LR__2420
1dcb8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1dcb8     00 FA 05 F6 | 	mov	result1, #0
1dcbc     13 00 00 FF 
1dcc0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1dcc4     09 07 02 F6 | 	mov	_var04, arg01
1dcc8     E0 06 86 F1 | 	sub	_var04, #224
1dccc     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1dcd0     03 09 4A F0 | 	shr	_var05, _var04 wz
1dcd4     13 00 00 FF 
1dcd8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1dcdc     01 FA 65 56 |  if_ne	neg	result1, #1
1dce0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1dce4                 | LR__2420
1dce4                 | '   else
1dce4                 | '     '' Do this in inline ASM to ensure atomicity
1dce4                 | '     tmp := @hkbd_report
1dce4     13 00 00 FF 
1dce8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1dcec     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1dcf0                 | '     org
1dcf0     13 00 00 FF 
1dcf4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1dcf8     97 1E 48 FB | 	callpa	#(@LR__2422-@LR__2421)>>2,fcache_load_ptr_
1dcfc                 | LR__2421
1dcfc 000             | 	org	0
1dcfc 000 28 02 64 FD | 	setq	#1
1dd00 001 04 01 02 FB | 	rdlong	_var01, _var05
1dd04 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1dd08 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1dd0c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1dd10 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1dd14 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1dd18 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1dd1c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1dd20 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1dd24 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1dd28 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1dd2c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1dd30 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1dd34 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1dd38 00f             | LR__2422
1dd38                 | 	orgh
1dd38     02 FB 01 F6 | 	mov	result1, _var03
1dd3c                 | _usbnew_spin2_keystate_ret
1dd3c     2D 00 64 FD | 	ret
1dd40                 | 
1dd40                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1dd40                 | ' 
1dd40                 | ' '' Return key event from buffer if there is one
1dd40                 | ' PUB get_key() : r | tail
1dd40                 | _usbnew_spin2_get_key
1dd40                 | '   tail := keyq_tail
1dd40     0F 00 00 FF 
1dd44     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1dd48     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1dd4c                 | '   if keyq_head == tail
1dd4c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1dd50     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1dd54     0F 00 00 FF 
1dd58     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1dd5c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1dd60                 | '     return 0 ' No event
1dd60     00 FA 05 A6 |  if_e	mov	result1, #0
1dd64     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1dd68                 | '   r := keyq_data[tail]
1dd68     00 03 02 F6 | 	mov	_var02, _var01
1dd6c     02 02 66 F0 | 	shl	_var02, #2
1dd70     0F 00 00 FF 
1dd74     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1dd78     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1dd7c     01 FB 01 FB | 	rdlong	result1, _var02
1dd80                 | '   if ++tail == KEYQUEUE_SIZE
1dd80     01 00 06 F1 | 	add	_var01, #1
1dd84     80 00 0E F2 | 	cmp	_var01, #128 wz
1dd88                 | '     tail := 0
1dd88     00 00 06 A6 |  if_e	mov	_var01, #0
1dd8c                 | '   keyq_tail := tail
1dd8c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1dd90     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1dd94     0F 00 00 FF 
1dd98     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1dd9c                 | _usbnew_spin2_get_key_ret
1dd9c     2D 00 64 FD | 	ret
1dda0                 | 
1dda0                 | ' 
1dda0                 | ' '' Emulate mouse movement
1dda0                 | ' PUB mouse_move(x,y)
1dda0                 | _usbnew_spin2_mouse_move
1dda0     02 4A 05 F6 | 	mov	COUNT_, #2
1dda4     A8 00 A0 FD | 	call	#pushregs_
1dda8     09 1F 02 F6 | 	mov	local01, arg01
1ddac     0A 21 02 F6 | 	mov	local02, arg02
1ddb0                 | '   mouse_lock := 1
1ddb0     14 00 00 FF 
1ddb4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1ddb8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1ddbc     14 00 00 FF 
1ddc0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1ddc4                 | '   waitus(2) ' hope driver is now done
1ddc4     02 12 06 F6 | 	mov	arg01, #2
1ddc8     CC 0A B0 FD | 	call	#__system___waitus
1ddcc                 | '   mouse_xacc := x
1ddcc     14 00 00 FF 
1ddd0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1ddd4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1ddd8                 | '   mouse_yacc := y
1ddd8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1dddc     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1dde0                 | '   if mouse_outptr
1dde0     04 00 00 FF 
1dde4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1dde8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1ddec     0F 00 00 FF 
1ddf0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1ddf4     24 00 90 AD |  if_e	jmp	#LR__2430
1ddf8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1ddf8     10 20 66 F0 | 	shl	local02, #16
1ddfc     0F 1F 32 F9 | 	getword	local01, local01, #0
1de00     0F 21 42 F5 | 	or	local02, local01
1de04     0F 00 00 FF 
1de08     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1de0c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1de10     0F 00 00 FF 
1de14     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1de18     0F 21 62 FC | 	wrlong	local02, local01
1de1c                 | LR__2430
1de1c                 | '   mouse_lock := 0
1de1c     14 00 00 FF 
1de20     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1de24     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1de28     14 00 00 FF 
1de2c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1de30     A7 F0 03 F6 | 	mov	ptra, fp
1de34     B2 00 A0 FD | 	call	#popregs_
1de38                 | _usbnew_spin2_mouse_move_ret
1de38     2D 00 64 FD | 	ret
1de3c                 | 
1de3c                 | '     '' Set HAVE_HIDPAD to enable.
1de3c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1de3c                 | ' 
1de3c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1de3c                 | ' PUB hidpad_id(dev) : r
1de3c                 | _usbnew_spin2_hidpad_id
1de3c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1de3c     13 00 00 FF 
1de40     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1de44     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1de48     09 01 02 F6 | 	mov	_var01, arg01
1de4c     03 00 66 F0 | 	shl	_var01, #3
1de50     09 01 82 F1 | 	sub	_var01, arg01
1de54     02 00 66 F0 | 	shl	_var01, #2
1de58     00 FB 01 F1 | 	add	result1, _var01
1de5c     FD FA 01 FB | 	rdlong	result1, result1
1de60     13 00 00 FF 
1de64     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1de68                 | _usbnew_spin2_hidpad_id_ret
1de68     2D 00 64 FD | 	ret
1de6c                 | 
1de6c                 | ' 
1de6c                 | ' '' Get all button states for a device
1de6c                 | ' PUB hidpad_buttons(dev) : r 
1de6c                 | _usbnew_spin2_hidpad_buttons
1de6c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1de6c     13 00 00 FF 
1de70     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1de74     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1de78     09 01 02 F6 | 	mov	_var01, arg01
1de7c     03 00 66 F0 | 	shl	_var01, #3
1de80     09 01 82 F1 | 	sub	_var01, arg01
1de84     02 00 66 F0 | 	shl	_var01, #2
1de88     00 FB 01 F1 | 	add	result1, _var01
1de8c     14 FA 05 F1 | 	add	result1, #20
1de90     FD FA 01 FB | 	rdlong	result1, result1
1de94     13 00 00 FF 
1de98     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1de9c                 | _usbnew_spin2_hidpad_buttons_ret
1de9c     2D 00 64 FD | 	ret
1dea0                 | 
1dea0                 | ' 
1dea0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1dea0                 | ' PUB hidpad_axis(dev,axnum) : r
1dea0                 | _usbnew_spin2_hidpad_axis
1dea0                 | '   if axnum +>= 6
1dea0     06 14 16 F2 | 	cmp	arg02, #6 wc
1dea4                 | '     return 0
1dea4     00 FA 05 36 |  if_ae	mov	result1, #0
1dea8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1deac                 | '   else 
1deac                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1deac     13 00 00 FF 
1deb0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1deb4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1deb8     09 01 02 F6 | 	mov	_var01, arg01
1debc     03 00 66 F0 | 	shl	_var01, #3
1dec0     09 01 82 F1 | 	sub	_var01, arg01
1dec4     02 00 66 F0 | 	shl	_var01, #2
1dec8     00 FB 01 F1 | 	add	result1, _var01
1decc     04 00 06 F6 | 	mov	_var01, #4
1ded0     0A 01 02 F1 | 	add	_var01, arg02
1ded4     01 00 66 F0 | 	shl	_var01, #1
1ded8     FD 00 02 F1 | 	add	_var01, result1
1dedc     00 FB E1 FA | 	rdword	result1, _var01
1dee0     0F FA 65 F7 | 	signx	result1, #15
1dee4     13 00 00 FF 
1dee8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1deec                 | _usbnew_spin2_hidpad_axis_ret
1deec     2D 00 64 FD | 	ret
1def0                 | 
1def0                 | ' 
1def0                 | ' 
1def0                 | ' '--------------------------------------------------------------
1def0                 | ' '---------- Init the variables, start the cog. ----------------
1def0                 | ' '--------------------------------------------------------------
1def0                 | ' 
1def0                 | ' pub start(mbox,scope,cache) :cog,base | iii
1def0                 | _audio096_spin2_start
1def0     04 4A 05 F6 | 	mov	COUNT_, #4
1def4     A8 00 A0 FD | 	call	#pushregs_
1def8     09 1F 02 F6 | 	mov	local01, arg01
1defc                 | ' 
1defc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1defc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1defc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1defc                 | ' 
1defc                 | ' mailboxaddr:=mbox 
1defc     F2 1E 62 FC | 	wrlong	local01, objptr
1df00                 | ' scope_ptr:=scope
1df00     04 E4 05 F1 | 	add	objptr, #4
1df04     F2 14 62 FC | 	wrlong	arg02, objptr
1df08                 | ' cache_ptr:=cache
1df08     04 E4 05 F1 | 	add	objptr, #4
1df0c     F2 16 62 FC | 	wrlong	arg03, objptr
1df10                 | ' base:=@channel1[0]
1df10     04 E4 05 F1 | 	add	objptr, #4
1df14     F2 20 02 F6 | 	mov	local02, objptr
1df18                 | ' 
1df18                 | ' repeat iii from 0 to 7
1df18     00 22 06 F6 | 	mov	local03, #0
1df1c     02 00 00 FF 
1df20     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1df24     0C E4 85 F1 | 	sub	objptr, #12
1df28     97 B0 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1df2c                 | LR__2440
1df2c                 | '   long[base+64*iii]:=0
1df2c     10 1F 02 F6 | 	mov	local01, local02
1df30     11 FD 01 F6 | 	mov	result2, local03
1df34     06 FC 65 F0 | 	shl	result2, #6
1df38     FE 1E 02 F1 | 	add	local01, result2
1df3c     0F 01 68 FC | 	wrlong	#0, local01
1df40                 | '   long[base+64*iii+4]:=0
1df40     10 1F 02 F6 | 	mov	local01, local02
1df44     11 FD 01 F6 | 	mov	result2, local03
1df48     06 FC 65 F0 | 	shl	result2, #6
1df4c     FE 1E 02 F1 | 	add	local01, result2
1df50     04 1E 06 F1 | 	add	local01, #4
1df54     0F 01 68 FC | 	wrlong	#0, local01
1df58                 | '   long[base+64*iii+12]:=0
1df58     10 25 02 F6 | 	mov	local04, local02
1df5c     11 1F 02 F6 | 	mov	local01, local03
1df60     06 1E 66 F0 | 	shl	local01, #6
1df64     0F 25 02 F1 | 	add	local04, local01
1df68     0C 24 06 F1 | 	add	local04, #12
1df6c     12 01 68 FC | 	wrlong	#0, local04
1df70                 | '   long[base+64*iii+16]:=2 
1df70     10 25 02 F6 | 	mov	local04, local02
1df74     11 1F 02 F6 | 	mov	local01, local03
1df78     06 1E 66 F0 | 	shl	local01, #6
1df7c     0F 25 02 F1 | 	add	local04, local01
1df80     10 24 06 F1 | 	add	local04, #16
1df84     12 05 68 FC | 	wrlong	#2, local04
1df88                 | '   word[base+64*iii+20]:=0
1df88     10 25 02 F6 | 	mov	local04, local02
1df8c     11 1F 02 F6 | 	mov	local01, local03
1df90     06 1E 66 F0 | 	shl	local01, #6
1df94     0F 25 02 F1 | 	add	local04, local01
1df98     14 24 06 F1 | 	add	local04, #20
1df9c     12 01 58 FC | 	wrword	#0, local04
1dfa0                 | '   word[base+64*iii+22]:=8192
1dfa0     10 25 02 F6 | 	mov	local04, local02
1dfa4     11 1F 02 F6 | 	mov	local01, local03
1dfa8     06 1E 66 F0 | 	shl	local01, #6
1dfac     0F 25 02 F1 | 	add	local04, local01
1dfb0     16 24 06 F1 | 	add	local04, #22
1dfb4     10 00 80 FF 
1dfb8     12 01 58 FC | 	wrword	##8192, local04
1dfbc                 | '   word[base+64*iii+24]:=4000+2*iii
1dfbc     11 25 02 F6 | 	mov	local04, local03
1dfc0     01 24 66 F0 | 	shl	local04, #1
1dfc4     07 00 00 FF 
1dfc8     A0 1F 06 F6 | 	mov	local01, ##4000
1dfcc     12 1F 02 F1 | 	add	local01, local04
1dfd0     10 25 02 F6 | 	mov	local04, local02
1dfd4     11 FD 01 F6 | 	mov	result2, local03
1dfd8     06 FC 65 F0 | 	shl	result2, #6
1dfdc     FE 24 02 F1 | 	add	local04, result2
1dfe0     18 24 06 F1 | 	add	local04, #24
1dfe4     12 1F 52 FC | 	wrword	local01, local04
1dfe8                 | '   word[base+64*iii+26]:=2
1dfe8     10 25 02 F6 | 	mov	local04, local02
1dfec     11 1F 02 F6 | 	mov	local01, local03
1dff0     06 1E 66 F0 | 	shl	local01, #6
1dff4     0F 25 02 F1 | 	add	local04, local01
1dff8     1A 24 06 F1 | 	add	local04, #26
1dffc     12 05 58 FC | 	wrword	#2, local04
1e000                 | '   long [base+64*iii+8]:=@null | $C0000000
1e000     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1e004     3E 1E 26 F4 | 	bith	local01, #62
1e008     10 25 02 F6 | 	mov	local04, local02
1e00c     11 17 02 F6 | 	mov	arg03, local03
1e010     06 16 66 F0 | 	shl	arg03, #6
1e014     0B 25 02 F1 | 	add	local04, arg03
1e018     08 24 06 F1 | 	add	local04, #8
1e01c     12 1F 62 FC | 	wrlong	local01, local04
1e020                 | '   long[base+64*iii+32]:=0
1e020     10 25 02 F6 | 	mov	local04, local02
1e024     11 1F 02 F6 | 	mov	local01, local03
1e028     06 1E 66 F0 | 	shl	local01, #6
1e02c     0F 25 02 F1 | 	add	local04, local01
1e030     20 24 06 F1 | 	add	local04, #32
1e034     12 01 68 FC | 	wrlong	#0, local04
1e038                 | '   long[base+64*iii+36]:=0
1e038     10 25 02 F6 | 	mov	local04, local02
1e03c     11 1F 02 F6 | 	mov	local01, local03
1e040     06 1E 66 F0 | 	shl	local01, #6
1e044     0F 25 02 F1 | 	add	local04, local01
1e048     24 24 06 F1 | 	add	local04, #36
1e04c     12 01 68 FC | 	wrlong	#0, local04
1e050                 | '   long[base+64*iii+40]:=0
1e050     10 25 02 F6 | 	mov	local04, local02
1e054     11 1F 02 F6 | 	mov	local01, local03
1e058     06 1E 66 F0 | 	shl	local01, #6
1e05c     0F 25 02 F1 | 	add	local04, local01
1e060     28 24 06 F1 | 	add	local04, #40
1e064     12 01 68 FC | 	wrlong	#0, local04
1e068                 | '   long[base+64*iii+44]:=0
1e068     10 25 02 F6 | 	mov	local04, local02
1e06c     11 1F 02 F6 | 	mov	local01, local03
1e070     06 1E 66 F0 | 	shl	local01, #6
1e074     0F 25 02 F1 | 	add	local04, local01
1e078     2C 24 06 F1 | 	add	local04, #44
1e07c     12 01 68 FC | 	wrlong	#0, local04
1e080     01 22 06 F1 | 	add	local03, #1
1e084     08 22 56 F2 | 	cmps	local03, #8 wc
1e088     A0 FE 9F CD |  if_b	jmp	#LR__2440
1e08c                 | LR__2441
1e08c     02 00 00 FF 
1e090     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1e094                 | '   
1e094                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1e094     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1e098     F2 16 02 F6 | 	mov	arg03, objptr
1e09c     10 24 06 F6 | 	mov	local04, #16
1e0a0     28 16 62 FD | 	setq	arg03
1e0a4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1e0a8     01 24 66 C6 |  if_b	neg	local04, #1
1e0ac                 | ' waitms(100)
1e0ac     64 12 06 F6 | 	mov	arg01, #100
1e0b0     78 07 B0 FD | 	call	#__system___waitms
1e0b4                 | ' return cog,base
1e0b4     10 FD 01 F6 | 	mov	result2, local02
1e0b8     12 FB 01 F6 | 	mov	result1, local04
1e0bc     A7 F0 03 F6 | 	mov	ptra, fp
1e0c0     B2 00 A0 FD | 	call	#popregs_
1e0c4                 | _audio096_spin2_start_ret
1e0c4     2D 00 64 FD | 	ret
1e0c8                 | 
1e0c8                 | ' 
1e0c8                 | ' ' a simple play procedure to not poke everything. 
1e0c8                 | ' 
1e0c8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1e0c8                 | _audio096_spin2_play
1e0c8     0C E4 05 F1 | 	add	objptr, #12
1e0cc     F2 00 02 F6 | 	mov	_var01, objptr
1e0d0     06 12 66 F0 | 	shl	arg01, #6
1e0d4     09 01 02 F1 | 	add	_var01, arg01
1e0d8     00 13 02 F6 | 	mov	arg01, _var01
1e0dc     0C 12 06 F1 | 	add	arg01, #12
1e0e0     09 1B 62 FC | 	wrlong	arg05, arg01
1e0e4     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e0e8     00 13 02 36 |  if_ae	mov	arg01, _var01
1e0ec     10 12 06 31 |  if_ae	add	arg01, #16
1e0f0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1e0f4     02 1A 06 C1 |  if_b	add	arg05, #2
1e0f8     00 13 02 C6 |  if_b	mov	arg01, _var01
1e0fc     10 12 06 C1 |  if_b	add	arg01, #16
1e100     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1e104     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e108     0B 0A 80 FF 
1e10c     09 6D 18 FD | 	qdiv	##1316406, arg01
1e110                 | ' 
1e110                 | ' base2:=@channel1[0]+64*channel
1e110                 | ' 
1e110                 | ' 
1e110                 | ' long[base2+12]:= len
1e110                 | ' if loop >=0 
1e110                 | '   long[base2+16]:= loop
1e110     0C E4 85 F1 | 	sub	objptr, #12
1e114                 | ' else
1e114                 | '   long[base2+16]:= len+2
1e114                 | ' word[base2+20]:=vol
1e114     00 13 02 F6 | 	mov	arg01, _var01
1e118     14 12 06 F1 | 	add	arg01, #20
1e11c     09 19 52 FC | 	wrword	arg04, arg01
1e120                 | ' word[base2+24]:= 1316406/splfreq 
1e120     00 19 02 F6 | 	mov	arg04, _var01
1e124     18 18 06 F1 | 	add	arg04, #24
1e128                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e128                 | ' long[base2+32]:=0    
1e128                 | ' long[base2+36]:=0    
1e128                 | ' long[base2+40]:=0    
1e128                 | ' long[base2+44]:=0    
1e128                 | ' long[base2+8]:=sample+$C0000000     
1e128     00 00 60 FF 
1e12c     00 14 06 F1 | 	add	arg02, ##-1073741824
1e130     18 12 62 FD | 	getqx	arg01
1e134     09 13 82 F6 | 	negc	arg01, arg01
1e138     0C 13 52 FC | 	wrword	arg01, arg04
1e13c     00 13 02 F6 | 	mov	arg01, _var01
1e140     1A 12 06 F1 | 	add	arg01, #26
1e144     09 01 5A FC | 	wrword	#256, arg01
1e148     00 13 02 F6 | 	mov	arg01, _var01
1e14c     20 12 06 F1 | 	add	arg01, #32
1e150     09 01 68 FC | 	wrlong	#0, arg01
1e154     00 13 02 F6 | 	mov	arg01, _var01
1e158     24 12 06 F1 | 	add	arg01, #36
1e15c     09 01 68 FC | 	wrlong	#0, arg01
1e160     00 13 02 F6 | 	mov	arg01, _var01
1e164     28 12 06 F1 | 	add	arg01, #40
1e168     09 01 68 FC | 	wrlong	#0, arg01
1e16c     00 13 02 F6 | 	mov	arg01, _var01
1e170     2C 12 06 F1 | 	add	arg01, #44
1e174     09 01 68 FC | 	wrlong	#0, arg01
1e178     08 00 06 F1 | 	add	_var01, #8
1e17c     00 15 62 FC | 	wrlong	arg02, _var01
1e180                 | _audio096_spin2_play_ret
1e180     2D 00 64 FD | 	ret
1e184                 | 
1e184                 | ' 
1e184                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1e184                 | _audio096_spin2_play8
1e184                 | ' 
1e184                 | ' base2:=@channel1[0]+64*channel
1e184     0C E4 05 F1 | 	add	objptr, #12
1e188     F2 00 02 F6 | 	mov	_var01, objptr
1e18c     06 12 66 F0 | 	shl	arg01, #6
1e190     09 01 02 F1 | 	add	_var01, arg01
1e194                 | ' long[base2]:=0
1e194     00 01 68 FC | 	wrlong	#0, _var01
1e198                 | ' long[base2+8]:=sample+$40000000 
1e198     00 00 20 FF 
1e19c     00 14 06 F1 | 	add	arg02, ##1073741824
1e1a0     00 13 02 F6 | 	mov	arg01, _var01
1e1a4     08 12 06 F1 | 	add	arg01, #8
1e1a8     09 15 62 FC | 	wrlong	arg02, arg01
1e1ac                 | ' if loop>=0
1e1ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e1b0     0C E4 85 F1 | 	sub	objptr, #12
1e1b4     1C 00 90 CD |  if_b	jmp	#LR__2450
1e1b8                 | '   long[base2+12]:=loop
1e1b8     00 15 02 F6 | 	mov	arg02, _var01
1e1bc     0C 14 06 F1 | 	add	arg02, #12
1e1c0     0A 1D 62 FC | 	wrlong	arg06, arg02
1e1c4                 | '   long[base2+16]:= len
1e1c4     00 1D 02 F6 | 	mov	arg06, _var01
1e1c8     10 1C 06 F1 | 	add	arg06, #16
1e1cc     0E 1B 62 FC | 	wrlong	arg05, arg06
1e1d0     1C 00 90 FD | 	jmp	#LR__2451
1e1d4                 | LR__2450
1e1d4                 | ' else
1e1d4                 | '   long[base2+12]:= len
1e1d4     00 1D 02 F6 | 	mov	arg06, _var01
1e1d8     0C 1C 06 F1 | 	add	arg06, #12
1e1dc     0E 1B 62 FC | 	wrlong	arg05, arg06
1e1e0                 | '   long[base2+16]:= len+1
1e1e0     01 1A 06 F1 | 	add	arg05, #1
1e1e4     00 13 02 F6 | 	mov	arg01, _var01
1e1e8     10 12 06 F1 | 	add	arg01, #16
1e1ec     09 1B 62 FC | 	wrlong	arg05, arg01
1e1f0                 | LR__2451
1e1f0     0B 17 52 F6 | 	abs	arg03, arg03 wc
1e1f4     0B 0A 80 FF 
1e1f8     0B 6D 18 FD | 	qdiv	##1316406, arg03
1e1fc                 | ' word[base2+20]:=vol
1e1fc     00 17 02 F6 | 	mov	arg03, _var01
1e200     14 16 06 F1 | 	add	arg03, #20
1e204     0B 19 52 FC | 	wrword	arg04, arg03
1e208                 | ' word[base2+24]:= 1316406 /splfreq 
1e208     00 13 02 F6 | 	mov	arg01, _var01
1e20c     18 12 06 F1 | 	add	arg01, #24
1e210                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e210                 | ' long[base2+28]:=$40000000
1e210     18 18 62 FD | 	getqx	arg04
1e214     0C 19 82 F6 | 	negc	arg04, arg04
1e218     09 19 52 FC | 	wrword	arg04, arg01
1e21c     00 19 02 F6 | 	mov	arg04, _var01
1e220     1A 18 06 F1 | 	add	arg04, #26
1e224     0C 01 5A FC | 	wrword	#256, arg04
1e228     1C 00 06 F1 | 	add	_var01, #28
1e22c     00 00 A0 FF 
1e230     00 01 68 FC | 	wrlong	##1073741824, _var01
1e234                 | _audio096_spin2_play8_ret
1e234     2D 00 64 FD | 	ret
1e238                 | 
1e238                 | ' 
1e238                 | '     
1e238                 | ' pub stop(channel) 'silence it
1e238                 | _audio096_spin2_stop
1e238                 | ' 
1e238                 | ' word[@channel1[0]+64*channel+20]:=0
1e238     0C E4 05 F1 | 	add	objptr, #12
1e23c     F2 00 02 F6 | 	mov	_var01, objptr
1e240     09 03 02 F6 | 	mov	_var02, arg01
1e244     06 02 66 F0 | 	shl	_var02, #6
1e248     01 01 02 F1 | 	add	_var01, _var02
1e24c     14 00 06 F1 | 	add	_var01, #20
1e250     00 01 58 FC | 	wrword	#0, _var01
1e254                 | ' word[@channel1[0]+64*channel+20]:=0
1e254     F2 00 02 F6 | 	mov	_var01, objptr
1e258     06 12 66 F0 | 	shl	arg01, #6
1e25c     09 01 02 F1 | 	add	_var01, arg01
1e260     14 00 06 F1 | 	add	_var01, #20
1e264     00 01 58 FC | 	wrword	#0, _var01
1e268     0C E4 85 F1 | 	sub	objptr, #12
1e26c                 | _audio096_spin2_stop_ret
1e26c     2D 00 64 FD | 	ret
1e270                 | hubexit
1e270     81 00 80 FD | 	jmp	#cogexit
1e274                 | 
1e274                 | __system___setbaud
1e274     14 64 06 FB | 	rdlong	muldiva_, #20
1e278     09 67 02 F6 | 	mov	muldivb_, arg01
1e27c     BA 00 A0 FD | 	call	#divide_
1e280     97 06 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1e284                 | LR__2460
1e284     3E FA 9D FA | 	rdpin	result1, #62 wc
1e288     FE FC A1 F1 | 	subx	result2, result2
1e28c     F4 FF 9F CD |  if_b	jmp	#LR__2460
1e290                 | LR__2461
1e290     40 7C 64 FD | 	dirl	#62
1e294     40 7E 64 FD | 	dirl	#63
1e298     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1e29c     10 66 66 F0 | 	shl	muldivb_, #16
1e2a0     07 14 06 F6 | 	mov	arg02, #7
1e2a4     33 15 02 F1 | 	add	arg02, muldivb_
1e2a8     3E F8 0C FC | 	wrpin	#124, #62
1e2ac     3E 14 16 FC | 	wxpin	arg02, #62
1e2b0     3F 7C 0C FC | 	wrpin	#62, #63
1e2b4     14 14 06 F1 | 	add	arg02, #20
1e2b8     3F 14 16 FC | 	wxpin	arg02, #63
1e2bc     41 7C 64 FD | 	dirh	#62
1e2c0     41 7E 64 FD | 	dirh	#63
1e2c4                 | __system___setbaud_ret
1e2c4     2D 00 64 FD | 	ret
1e2c8                 | 
1e2c8                 | __system___txraw
1e2c8     01 4A 05 F6 | 	mov	COUNT_, #1
1e2cc     A8 00 A0 FD | 	call	#pushregs_
1e2d0     09 1F 02 F6 | 	mov	local01, arg01
1e2d4     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1e2d8                 | LR__2470
1e2d8     3E FA 9D FA | 	rdpin	result1, #62 wc
1e2dc     FE FC A1 F1 | 	subx	result2, result2
1e2e0     F4 FF 9F CD |  if_b	jmp	#LR__2470
1e2e4                 | LR__2471
1e2e4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1e2e8     C2 01 00 AF 
1e2ec     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e2f0     80 FF BF AD |  if_e	call	#__system___setbaud
1e2f4     58 7C 64 FD | 	drvl	#62
1e2f8     3E 1E 26 FC | 	wypin	local01, #62
1e2fc     01 FA 05 F6 | 	mov	result1, #1
1e300     A7 F0 03 F6 | 	mov	ptra, fp
1e304     B2 00 A0 FD | 	call	#popregs_
1e308                 | __system___txraw_ret
1e308     2D 00 64 FD | 	ret
1e30c                 | 
1e30c                 | __system___rxraw
1e30c     0D 4A 05 F6 | 	mov	COUNT_, #13
1e310     A8 00 A0 FD | 	call	#pushregs_
1e314     09 1F 02 F6 | 	mov	local01, arg01
1e318     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e31c     C2 01 00 AF 
1e320     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e324     4C FF BF AD |  if_e	call	#__system___setbaud
1e328     00 1E 0E F2 | 	cmp	local01, #0 wz
1e32c     20 00 90 AD |  if_e	jmp	#LR__2480
1e330     14 22 06 FB | 	rdlong	local03, #20
1e334     0A 22 46 F0 | 	shr	local03, #10
1e338     11 1F 02 FD | 	qmul	local01, local03
1e33c     1A FA 61 FD | 	getct	result1
1e340     18 24 62 FD | 	getqx	local04
1e344     12 FB 01 F1 | 	add	result1, local04
1e348     FD 26 02 F6 | 	mov	local05, result1
1e34c     04 00 90 FD | 	jmp	#LR__2481
1e350                 | LR__2480
1e350     00 26 06 F6 | 	mov	local05, #0
1e354                 | LR__2481
1e354     01 28 66 F6 | 	neg	local06, #1
1e358     3F 2A 06 F6 | 	mov	local07, #63
1e35c     00 2C 06 F6 | 	mov	local08, #0
1e360     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e364     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1e368     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e36c                 | LR__2482
1e36c     08 2E 16 F4 | 	testb	local09, #8 wc
1e370     09 2E 76 F4 | 	testbn	local09, #9 andc
1e374     0A 2E 46 F0 | 	shr	local09, #10
1e378     01 2C 06 C6 |  if_b	mov	local08, #1
1e37c     40 7E 6C 3D |  if_ae	testp	#63 wz
1e380     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1e384     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1e388     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1e38c                 | LR__2483
1e38c     00 20 06 F6 | 	mov	local02, #0
1e390     00 2C 0E F2 | 	cmp	local08, #0 wz
1e394     01 20 66 56 |  if_ne	neg	local02, #1
1e398     00 30 06 F6 | 	mov	local10, #0
1e39c     00 22 06 F6 | 	mov	local03, #0
1e3a0     00 1E 0E F2 | 	cmp	local01, #0 wz
1e3a4     01 22 66 56 |  if_ne	neg	local03, #1
1e3a8     00 24 06 F6 | 	mov	local04, #0
1e3ac     00 32 06 F6 | 	mov	local11, #0
1e3b0     1A FA 61 FD | 	getct	result1
1e3b4     FD 34 02 F6 | 	mov	local12, result1
1e3b8     1A 37 02 F6 | 	mov	local13, local12
1e3bc     13 37 82 F1 | 	sub	local13, local05
1e3c0     00 36 56 F2 | 	cmps	local13, #0 wc
1e3c4     00 32 26 C6 |  if_b	not	local11, #0
1e3c8     00 32 0E F2 | 	cmp	local11, #0 wz
1e3cc     00 24 26 56 |  if_ne	not	local04, #0
1e3d0     12 23 CA F7 | 	test	local03, local04 wz
1e3d4     00 30 26 56 |  if_ne	not	local10, #0
1e3d8     18 21 4A F5 | 	or	local02, local10 wz
1e3dc     8C FF 9F AD |  if_e	jmp	#LR__2482
1e3e0     00 2C 0E F2 | 	cmp	local08, #0 wz
1e3e4     17 29 02 56 |  if_ne	mov	local06, local09
1e3e8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1e3ec     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e3f0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1e3f4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e3f8     14 FB 01 F6 | 	mov	result1, local06
1e3fc     A7 F0 03 F6 | 	mov	ptra, fp
1e400     B2 00 A0 FD | 	call	#popregs_
1e404                 | __system___rxraw_ret
1e404     2D 00 64 FD | 	ret
1e408                 | 
1e408                 | __system___getus
1e408     1A FC 71 FD | 	getct	result2 wc
1e40c     1A 00 62 FD | 	getct	_var01
1e410     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1e414     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1e418     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1e41c     20 00 90 5D |  if_ne	jmp	#LR__2490
1e420     14 02 06 FB | 	rdlong	_var02, #20
1e424     A1 07 00 FF 
1e428     40 02 16 FD | 	qdiv	_var02, ##1000000
1e42c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1e430     18 FA 61 FD | 	getqx	result1
1e434     FD 02 02 F6 | 	mov	_var02, result1
1e438     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e43c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1e440                 | LR__2490
1e440     01 FD 11 FD | 	qdiv	result2, _var02
1e444     19 FC 61 FD | 	getqy	result2
1e448     28 FC 61 FD | 	setq	result2
1e44c     01 01 12 FD | 	qdiv	_var01, _var02
1e450     18 FA 61 FD | 	getqx	result1
1e454                 | __system___getus_ret
1e454     2D 00 64 FD | 	ret
1e458                 | 
1e458                 | __system____builtin_memmove
1e458     09 01 02 F6 | 	mov	_var01, arg01
1e45c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1e460     10 00 90 CD |  if_b	jmp	#LR__2500
1e464     0A 03 02 F6 | 	mov	_var02, arg02
1e468     0B 03 02 F1 | 	add	_var02, arg03
1e46c     01 13 52 F2 | 	cmps	arg01, _var02 wc
1e470     48 00 90 CD |  if_b	jmp	#LR__2506
1e474                 | LR__2500
1e474     0B 05 02 F6 | 	mov	_var03, arg03
1e478     02 04 4E F0 | 	shr	_var03, #2 wz
1e47c     18 00 90 AD |  if_e	jmp	#LR__2505
1e480     97 0A 48 FB | 	callpa	#(@LR__2503-@LR__2501)>>2,fcache_load_ptr_
1e484                 | LR__2501
1e484     02 09 D8 FC | 	rep	@LR__2504, _var03
1e488                 | LR__2502
1e488     0A 05 02 FB | 	rdlong	_var03, arg02
1e48c     09 05 62 FC | 	wrlong	_var03, arg01
1e490     04 12 06 F1 | 	add	arg01, #4
1e494     04 14 06 F1 | 	add	arg02, #4
1e498                 | LR__2503
1e498                 | LR__2504
1e498                 | LR__2505
1e498     02 16 CE F7 | 	test	arg03, #2 wz
1e49c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1e4a0     09 03 52 5C |  if_ne	wrword	_var02, arg01
1e4a4     02 12 06 51 |  if_ne	add	arg01, #2
1e4a8     02 14 06 51 |  if_ne	add	arg02, #2
1e4ac     01 16 CE F7 | 	test	arg03, #1 wz
1e4b0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1e4b4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1e4b8     28 00 90 FD | 	jmp	#LR__2512
1e4bc                 | LR__2506
1e4bc     0B 13 02 F1 | 	add	arg01, arg03
1e4c0     0B 15 02 F1 | 	add	arg02, arg03
1e4c4     0B 07 0A F6 | 	mov	_var04, arg03 wz
1e4c8     18 00 90 AD |  if_e	jmp	#LR__2511
1e4cc     97 0A 48 FB | 	callpa	#(@LR__2509-@LR__2507)>>2,fcache_load_ptr_
1e4d0                 | LR__2507
1e4d0     03 09 D8 FC | 	rep	@LR__2510, _var04
1e4d4                 | LR__2508
1e4d4     01 12 86 F1 | 	sub	arg01, #1
1e4d8     01 14 86 F1 | 	sub	arg02, #1
1e4dc     0A 03 C2 FA | 	rdbyte	_var02, arg02
1e4e0     09 03 42 FC | 	wrbyte	_var02, arg01
1e4e4                 | LR__2509
1e4e4                 | LR__2510
1e4e4                 | LR__2511
1e4e4                 | LR__2512
1e4e4     00 FB 01 F6 | 	mov	result1, _var01
1e4e8                 | __system____builtin_memmove_ret
1e4e8     2D 00 64 FD | 	ret
1e4ec                 | 
1e4ec                 | __system____builtin_strcpy
1e4ec     09 01 02 F6 | 	mov	_var01, arg01
1e4f0     97 0A 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1e4f4                 | LR__2520
1e4f4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1e4f8     09 FB 41 FC | 	wrbyte	result1, arg01
1e4fc     01 14 06 F1 | 	add	arg02, #1
1e500     01 12 06 F1 | 	add	arg01, #1
1e504     EC FF 9F 5D |  if_ne	jmp	#LR__2520
1e508                 | LR__2521
1e508     00 FB 01 F6 | 	mov	result1, _var01
1e50c                 | __system____builtin_strcpy_ret
1e50c     2D 00 64 FD | 	ret
1e510                 | 
1e510                 | __system____topofstack
1e510     00 4A 05 F6 | 	mov	COUNT_, #0
1e514     A8 00 A0 FD | 	call	#pushregs_
1e518     08 F0 07 F1 | 	add	ptra, #8
1e51c     04 4E 05 F1 | 	add	fp, #4
1e520     A7 12 62 FC | 	wrlong	arg01, fp
1e524     A7 FA 01 F6 | 	mov	result1, fp
1e528     04 4E 85 F1 | 	sub	fp, #4
1e52c     A7 F0 03 F6 | 	mov	ptra, fp
1e530     B2 00 A0 FD | 	call	#popregs_
1e534                 | __system____topofstack_ret
1e534     2D 00 64 FD | 	ret
1e538                 | 
1e538                 | __system___lockmem
1e538     00 FA 05 F6 | 	mov	result1, #0
1e53c     01 FA 61 FD | 	cogid	result1
1e540     00 FB 05 F1 | 	add	result1, #256
1e544                 | LR__2530
1e544     09 01 0A FB | 	rdlong	_var01, arg01 wz
1e548     09 FB 61 AC |  if_e	wrlong	result1, arg01
1e54c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1e550     09 01 02 AB |  if_e	rdlong	_var01, arg01
1e554     FD 00 0A F2 | 	cmp	_var01, result1 wz
1e558     E8 FF 9F 5D |  if_ne	jmp	#LR__2530
1e55c                 | __system___lockmem_ret
1e55c     2D 00 64 FD | 	ret
1e560                 | 
1e560                 | __system___string_cmp
1e560     97 14 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1e564                 | LR__2540
1e564     09 01 C2 FA | 	rdbyte	_var01, arg01
1e568     0A 03 C2 FA | 	rdbyte	_var02, arg02
1e56c     00 05 02 F6 | 	mov	_var03, _var01
1e570     01 05 8A F1 | 	sub	_var03, _var02 wz
1e574     01 12 06 F1 | 	add	arg01, #1
1e578     01 14 06 F1 | 	add	arg02, #1
1e57c     0C 00 90 5D |  if_ne	jmp	#LR__2542
1e580     00 00 0E F2 | 	cmp	_var01, #0 wz
1e584     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1e588     D8 FF 9F 5D |  if_ne	jmp	#LR__2540
1e58c                 | LR__2541
1e58c                 | LR__2542
1e58c     02 FB 01 F6 | 	mov	result1, _var03
1e590                 | __system___string_cmp_ret
1e590     2D 00 64 FD | 	ret
1e594                 | 
1e594                 | __system___string_concat
1e594     05 4A 05 F6 | 	mov	COUNT_, #5
1e598     A8 00 A0 FD | 	call	#pushregs_
1e59c     09 1F 02 F6 | 	mov	local01, arg01
1e5a0     0A 21 02 F6 | 	mov	local02, arg02
1e5a4     0F 13 02 F6 | 	mov	arg01, local01
1e5a8     09 23 02 F6 | 	mov	local03, arg01
1e5ac     97 06 48 FB | 	callpa	#(@LR__2551-@LR__2550)>>2,fcache_load_ptr_
1e5b0                 | LR__2550
1e5b0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e5b4     01 22 06 51 |  if_ne	add	local03, #1
1e5b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2550
1e5bc                 | LR__2551
1e5bc     09 23 82 F1 | 	sub	local03, arg01
1e5c0     11 25 02 F6 | 	mov	local04, local03
1e5c4     10 13 02 F6 | 	mov	arg01, local02
1e5c8     09 23 02 F6 | 	mov	local03, arg01
1e5cc     97 06 48 FB | 	callpa	#(@LR__2553-@LR__2552)>>2,fcache_load_ptr_
1e5d0                 | LR__2552
1e5d0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e5d4     01 22 06 51 |  if_ne	add	local03, #1
1e5d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2552
1e5dc                 | LR__2553
1e5dc     09 23 82 F1 | 	sub	local03, arg01
1e5e0     12 13 02 F6 | 	mov	arg01, local04
1e5e4     11 13 02 F1 | 	add	arg01, local03
1e5e8     01 12 06 F1 | 	add	arg01, #1
1e5ec     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1e5f0     FD 26 0A F6 | 	mov	local05, result1 wz
1e5f4     28 00 90 AD |  if_e	jmp	#LR__2554
1e5f8     13 13 02 F6 | 	mov	arg01, local05
1e5fc     0F 15 02 F6 | 	mov	arg02, local01
1e600     12 17 02 F6 | 	mov	arg03, local04
1e604     50 FE BF FD | 	call	#__system____builtin_memmove
1e608     13 13 02 F6 | 	mov	arg01, local05
1e60c     12 13 02 F1 | 	add	arg01, local04
1e610     01 22 06 F1 | 	add	local03, #1
1e614     10 15 02 F6 | 	mov	arg02, local02
1e618     11 17 02 F6 | 	mov	arg03, local03
1e61c     38 FE BF FD | 	call	#__system____builtin_memmove
1e620                 | LR__2554
1e620     13 FB 01 F6 | 	mov	result1, local05
1e624     A7 F0 03 F6 | 	mov	ptra, fp
1e628     B2 00 A0 FD | 	call	#popregs_
1e62c                 | __system___string_concat_ret
1e62c     2D 00 64 FD | 	ret
1e630                 | 
1e630                 | __system___tx
1e630     02 4A 05 F6 | 	mov	COUNT_, #2
1e634     A8 00 A0 FD | 	call	#pushregs_
1e638     09 1F 02 F6 | 	mov	local01, arg01
1e63c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1e640     18 00 90 5D |  if_ne	jmp	#LR__2560
1e644     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1e648     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1e64c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1e650     02 20 CE F7 | 	test	local02, #2 wz
1e654     0D 12 06 56 |  if_ne	mov	arg01, #13
1e658     6C FC BF 5D |  if_ne	call	#__system___txraw
1e65c                 | LR__2560
1e65c     0F 13 02 F6 | 	mov	arg01, local01
1e660     64 FC BF FD | 	call	#__system___txraw
1e664     A7 F0 03 F6 | 	mov	ptra, fp
1e668     B2 00 A0 FD | 	call	#popregs_
1e66c                 | __system___tx_ret
1e66c     2D 00 64 FD | 	ret
1e670                 | 
1e670                 | __system___rx
1e670     01 4A 05 F6 | 	mov	COUNT_, #1
1e674     A8 00 A0 FD | 	call	#pushregs_
1e678                 | LR__2570
1e678     00 12 06 F6 | 	mov	arg01, #0
1e67c     8C FC BF FD | 	call	#__system___rxraw
1e680     FD 1E 02 F6 | 	mov	local01, result1
1e684     FF FF 7F FF 
1e688     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1e68c     E8 FF 9F AD |  if_e	jmp	#LR__2570
1e690     0D 1E 0E F2 | 	cmp	local01, #13 wz
1e694     14 00 90 5D |  if_ne	jmp	#LR__2571
1e698     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1e69c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1e6a0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1e6a4     02 FA CD F7 | 	test	result1, #2 wz
1e6a8     0A 1E 06 56 |  if_ne	mov	local01, #10
1e6ac                 | LR__2571
1e6ac     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1e6b0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e6b4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1e6b8     01 12 CE F7 | 	test	arg01, #1 wz
1e6bc     1C 00 90 AD |  if_e	jmp	#LR__2574
1e6c0     7F 1E 0E F2 | 	cmp	local01, #127 wz
1e6c4     0C 00 90 5D |  if_ne	jmp	#LR__2572
1e6c8     08 12 06 F6 | 	mov	arg01, #8
1e6cc     60 FF BF FD | 	call	#__system___tx
1e6d0     08 00 90 FD | 	jmp	#LR__2573
1e6d4                 | LR__2572
1e6d4     0F 13 02 F6 | 	mov	arg01, local01
1e6d8     54 FF BF FD | 	call	#__system___tx
1e6dc                 | LR__2573
1e6dc                 | LR__2574
1e6dc     0F FB 01 F6 | 	mov	result1, local01
1e6e0     A7 F0 03 F6 | 	mov	ptra, fp
1e6e4     B2 00 A0 FD | 	call	#popregs_
1e6e8                 | __system___rx_ret
1e6e8     2D 00 64 FD | 	ret
1e6ec                 | 
1e6ec                 | __system___pinwrite
1e6ec     09 01 02 F6 | 	mov	_var01, arg01
1e6f0     1F 00 06 F5 | 	and	_var01, #31
1e6f4     20 12 CE F7 | 	test	arg01, #32 wz
1e6f8     06 12 46 F0 | 	shr	arg01, #6
1e6fc     09 13 CA F9 | 	bmask	arg01, arg01
1e700     00 13 62 F0 | 	shl	arg01, _var01
1e704     00 15 62 F0 | 	shl	arg02, _var01
1e708     1C 00 90 AD |  if_e	jmp	#LR__2580
1e70c     09 F7 43 F5 | 	or	dirb, arg01
1e710     FD 01 02 F6 | 	mov	_var01, outb
1e714     09 01 22 F5 | 	andn	_var01, arg01
1e718     09 15 02 F5 | 	and	arg02, arg01
1e71c     0A 01 42 F5 | 	or	_var01, arg02
1e720     00 FB 03 F6 | 	mov	outb, _var01
1e724     18 00 90 FD | 	jmp	#LR__2581
1e728                 | LR__2580
1e728     09 F5 43 F5 | 	or	dira, arg01
1e72c     FC 01 02 F6 | 	mov	_var01, outa
1e730     09 01 22 F5 | 	andn	_var01, arg01
1e734     09 15 02 F5 | 	and	arg02, arg01
1e738     0A 01 42 F5 | 	or	_var01, arg02
1e73c     00 F9 03 F6 | 	mov	outa, _var01
1e740                 | LR__2581
1e740                 | __system___pinwrite_ret
1e740     2D 00 64 FD | 	ret
1e744                 | 
1e744                 | __system___basic_read_line
1e744     06 4A 05 F6 | 	mov	COUNT_, #6
1e748     A8 00 A0 FD | 	call	#pushregs_
1e74c     09 1F 02 F6 | 	mov	local01, arg01
1e750     00 20 06 F6 | 	mov	local02, #0
1e754     18 22 06 F6 | 	mov	local03, #24
1e758     00 24 06 F6 | 	mov	local04, #0
1e75c     18 12 06 F6 | 	mov	arg01, #24
1e760     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1e764     FD 26 0A F6 | 	mov	local05, result1 wz
1e768     13 FB 01 A6 |  if_e	mov	result1, local05
1e76c     B0 00 90 AD |  if_e	jmp	#LR__2593
1e770                 | LR__2590
1e770     0F 13 02 F6 | 	mov	arg01, local01
1e774     88 0B B0 FD | 	call	#__system___basic_get_char
1e778     FD 28 02 F6 | 	mov	local06, result1
1e77c     01 28 56 F2 | 	cmps	local06, #1 wc
1e780     8C 00 90 CD |  if_b	jmp	#LR__2592
1e784     0A 28 0E F2 | 	cmp	local06, #10 wz
1e788     10 00 90 5D |  if_ne	jmp	#LR__2591
1e78c     00 24 0E F2 | 	cmp	local04, #0 wz
1e790     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1e794     01 20 86 11 |  if_a	sub	local02, #1
1e798     74 00 90 FD | 	jmp	#LR__2592
1e79c                 | LR__2591
1e79c     0D 28 0E F2 | 	cmp	local06, #13 wz
1e7a0     01 24 06 A6 |  if_e	mov	local04, #1
1e7a4     00 24 06 56 |  if_ne	mov	local04, #0
1e7a8     08 28 0E F2 | 	cmp	local06, #8 wz
1e7ac     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1e7b0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1e7b4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1e7b8     B4 FF 9F AD |  if_e	jmp	#LR__2590
1e7bc     13 17 02 F6 | 	mov	arg03, local05
1e7c0     10 17 02 F1 | 	add	arg03, local02
1e7c4     0B 29 42 FC | 	wrbyte	local06, arg03
1e7c8     01 20 06 F1 | 	add	local02, #1
1e7cc     11 21 0A F2 | 	cmp	local02, local03 wz
1e7d0     9C FF 9F 5D |  if_ne	jmp	#LR__2590
1e7d4     11 13 02 F6 | 	mov	arg01, local03
1e7d8     20 12 06 F1 | 	add	arg01, #32
1e7dc     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1e7e0     FD 28 0A F6 | 	mov	local06, result1 wz
1e7e4     14 FB 01 A6 |  if_e	mov	result1, local06
1e7e8     34 00 90 AD |  if_e	jmp	#LR__2593
1e7ec     14 13 02 F6 | 	mov	arg01, local06
1e7f0     13 15 02 F6 | 	mov	arg02, local05
1e7f4     11 17 02 F6 | 	mov	arg03, local03
1e7f8     5C FC BF FD | 	call	#__system____builtin_memmove
1e7fc     20 22 06 F1 | 	add	local03, #32
1e800     13 13 02 F6 | 	mov	arg01, local05
1e804     B4 3C B0 FD | 	call	#__system___gc_free
1e808     14 27 02 F6 | 	mov	local05, local06
1e80c     60 FF 9F FD | 	jmp	#LR__2590
1e810                 | LR__2592
1e810     13 29 02 F6 | 	mov	local06, local05
1e814     10 29 02 F1 | 	add	local06, local02
1e818     14 01 48 FC | 	wrbyte	#0, local06
1e81c     13 FB 01 F6 | 	mov	result1, local05
1e820                 | LR__2593
1e820     A7 F0 03 F6 | 	mov	ptra, fp
1e824     B2 00 A0 FD | 	call	#popregs_
1e828                 | __system___basic_read_line_ret
1e828     2D 00 64 FD | 	ret
1e82c                 | 
1e82c                 | __system___waitms
1e82c     09 01 02 F6 | 	mov	_var01, arg01
1e830     1A 02 62 FD | 	getct	_var02
1e834     14 04 06 FB | 	rdlong	_var03, #20
1e838     97 14 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1e83c                 | LR__2600
1e83c     01 00 00 FF 
1e840     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1e844     1C 00 90 CD |  if_b	jmp	#LR__2602
1e848     02 03 02 F1 | 	add	_var02, _var03
1e84c     01 13 02 F6 | 	mov	arg01, _var02
1e850     00 12 66 FA | 	addct1	arg01, #0
1e854     24 22 60 FD | 	waitct1
1e858     01 00 00 FF 
1e85c     E8 01 86 F1 | 	sub	_var01, ##1000
1e860     D8 FF 9F FD | 	jmp	#LR__2600
1e864                 | LR__2601
1e864                 | LR__2602
1e864     01 00 56 F2 | 	cmps	_var01, #1 wc
1e868     28 00 90 CD |  if_b	jmp	#LR__2603
1e86c     02 01 02 FD | 	qmul	_var01, _var03
1e870     01 00 00 FF 
1e874     E8 17 06 F6 | 	mov	arg03, ##1000
1e878     19 FA 61 FD | 	getqy	result1
1e87c     18 12 62 FD | 	getqx	arg01
1e880     28 FA 61 FD | 	setq	result1
1e884     0B 13 12 FD | 	qdiv	arg01, arg03
1e888     18 12 62 FD | 	getqx	arg01
1e88c     01 13 62 FA | 	addct1	arg01, _var02
1e890     24 22 60 FD | 	waitct1
1e894                 | LR__2603
1e894                 | __system___waitms_ret
1e894     2D 00 64 FD | 	ret
1e898                 | 
1e898                 | __system___waitus
1e898     09 01 02 F6 | 	mov	_var01, arg01
1e89c     1A 02 62 FD | 	getct	_var02
1e8a0     14 04 06 FB | 	rdlong	_var03, #20
1e8a4     97 14 48 FB | 	callpa	#(@LR__2611-@LR__2610)>>2,fcache_load_ptr_
1e8a8                 | LR__2610
1e8a8     A1 07 00 FF 
1e8ac     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1e8b0     1C 00 90 CD |  if_b	jmp	#LR__2612
1e8b4     02 03 02 F1 | 	add	_var02, _var03
1e8b8     01 13 02 F6 | 	mov	arg01, _var02
1e8bc     00 12 66 FA | 	addct1	arg01, #0
1e8c0     24 22 60 FD | 	waitct1
1e8c4     A1 07 00 FF 
1e8c8     40 00 86 F1 | 	sub	_var01, ##1000000
1e8cc     D8 FF 9F FD | 	jmp	#LR__2610
1e8d0                 | LR__2611
1e8d0                 | LR__2612
1e8d0     01 00 56 F2 | 	cmps	_var01, #1 wc
1e8d4     28 00 90 CD |  if_b	jmp	#LR__2613
1e8d8     02 01 02 FD | 	qmul	_var01, _var03
1e8dc     A1 07 00 FF 
1e8e0     40 16 06 F6 | 	mov	arg03, ##1000000
1e8e4     19 FA 61 FD | 	getqy	result1
1e8e8     18 12 62 FD | 	getqx	arg01
1e8ec     28 FA 61 FD | 	setq	result1
1e8f0     0B 13 12 FD | 	qdiv	arg01, arg03
1e8f4     18 FA 61 FD | 	getqx	result1
1e8f8     FD 02 62 FA | 	addct1	_var02, result1
1e8fc     24 22 60 FD | 	waitct1
1e900                 | LR__2613
1e900                 | __system___waitus_ret
1e900     2D 00 64 FD | 	ret
1e904                 | 
1e904                 | __system___mount
1e904     0B 4A 05 F6 | 	mov	COUNT_, #11
1e908     A8 00 A0 FD | 	call	#pushregs_
1e90c     09 1F 02 F6 | 	mov	local01, arg01
1e910     0A 21 0A F6 | 	mov	local02, arg02 wz
1e914     01 22 66 F6 | 	neg	local03, #1
1e918     01 FA 65 A6 |  if_e	neg	result1, #1
1e91c     98 02 90 AD |  if_e	jmp	#LR__2635
1e920     0F FB C1 FA | 	rdbyte	result1, local01
1e924     2F FA 0D F2 | 	cmp	result1, #47 wz
1e928     28 00 90 5D |  if_ne	jmp	#LR__2622
1e92c     0F 13 02 F6 | 	mov	arg01, local01
1e930     09 25 02 F6 | 	mov	local04, arg01
1e934     97 06 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
1e938                 | LR__2620
1e938     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e93c     01 24 06 51 |  if_ne	add	local04, #1
1e940     F4 FF 9F 5D |  if_ne	jmp	#LR__2620
1e944                 | LR__2621
1e944     09 25 82 F1 | 	sub	local04, arg01
1e948     12 FB 01 F6 | 	mov	result1, local04
1e94c     10 FA 55 F2 | 	cmps	result1, #16 wc
1e950     14 00 90 CD |  if_b	jmp	#LR__2623
1e954                 | LR__2622
1e954     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1e958     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1e95c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1e960     01 FA 65 F6 | 	neg	result1, #1
1e964     50 02 90 FD | 	jmp	#LR__2635
1e968                 | LR__2623
1e968     00 26 06 F6 | 	mov	local05, #0
1e96c                 | LR__2624
1e96c     04 26 56 F2 | 	cmps	local05, #4 wc
1e970     B0 00 90 3D |  if_ae	jmp	#LR__2629
1e974     13 13 02 F6 | 	mov	arg01, local05
1e978     02 12 66 F0 | 	shl	arg01, #2
1e97c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1e980     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1e984     09 FB 09 FB | 	rdlong	result1, arg01 wz
1e988     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1e98c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1e990     13 23 02 86 |  if_c_and_z	mov	local03, local05
1e994     84 00 90 8D |  if_c_and_z	jmp	#LR__2628
1e998     13 13 02 F6 | 	mov	arg01, local05
1e99c     02 12 66 F0 | 	shl	arg01, #2
1e9a0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1e9a4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1e9a8     09 13 02 FB | 	rdlong	arg01, arg01
1e9ac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1e9b0     09 25 02 F6 | 	mov	local04, arg01
1e9b4     97 06 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
1e9b8                 | LR__2625
1e9b8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e9bc     01 24 06 51 |  if_ne	add	local04, #1
1e9c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2625
1e9c4                 | LR__2626
1e9c4     09 25 82 F1 | 	sub	local04, arg01
1e9c8     12 29 02 F6 | 	mov	local06, local04
1e9cc     14 13 02 F6 | 	mov	arg01, local06
1e9d0     0F 13 02 F1 | 	add	arg01, local01
1e9d4     09 FB C1 FA | 	rdbyte	result1, arg01
1e9d8     2F FA 0D F2 | 	cmp	result1, #47 wz
1e9dc     14 2B 02 56 |  if_ne	mov	local07, local06
1e9e0     0F 2B 02 51 |  if_ne	add	local07, local01
1e9e4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1e9e8     30 00 90 5D |  if_ne	jmp	#LR__2627
1e9ec     13 17 02 F6 | 	mov	arg03, local05
1e9f0     02 16 66 F0 | 	shl	arg03, #2
1e9f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1e9f8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1e9fc     0B 15 02 FB | 	rdlong	arg02, arg03
1ea00     0F 13 02 F6 | 	mov	arg01, local01
1ea04     14 17 02 F6 | 	mov	arg03, local06
1ea08     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ea0c     B4 4D B0 FD | 	call	#__system__strncmp
1ea10     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea14     13 23 02 A6 |  if_e	mov	local03, local05
1ea18     08 00 90 AD |  if_e	jmp	#LR__2629
1ea1c                 | LR__2627
1ea1c                 | LR__2628
1ea1c     01 26 06 F1 | 	add	local05, #1
1ea20     48 FF 9F FD | 	jmp	#LR__2624
1ea24                 | LR__2629
1ea24     FF FF 7F FF 
1ea28     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1ea2c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1ea30     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1ea34     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ea38     01 FA 65 A6 |  if_e	neg	result1, #1
1ea3c     78 01 90 AD |  if_e	jmp	#LR__2635
1ea40     11 27 02 F6 | 	mov	local05, local03
1ea44     13 2B 02 F6 | 	mov	local07, local05
1ea48     02 2A 66 F0 | 	shl	local07, #2
1ea4c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1ea50     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1ea54     15 29 0A FB | 	rdlong	local06, local07 wz
1ea58     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1ea5c     58 00 90 AD |  if_e	jmp	#LR__2630
1ea60     4C 28 06 F1 | 	add	local06, #76
1ea64     14 2B 0A FB | 	rdlong	local07, local06 wz
1ea68     4C 28 86 F1 | 	sub	local06, #76
1ea6c     48 00 90 AD |  if_e	jmp	#LR__2630
1ea70     4C 28 06 F1 | 	add	local06, #76
1ea74     14 2B 02 FB | 	rdlong	local07, local06
1ea78     15 23 02 F6 | 	mov	local03, local07
1ea7c     13 2A 46 F7 | 	zerox	local07, #19
1ea80     14 22 46 F0 | 	shr	local03, #20
1ea84     02 22 66 F0 | 	shl	local03, #2
1ea88     ED 22 02 F1 | 	add	local03, __methods__
1ea8c     11 23 02 FB | 	rdlong	local03, local03
1ea90     13 29 02 F6 | 	mov	local06, local05
1ea94     02 28 66 F0 | 	shl	local06, #2
1ea98     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ea9c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1eaa0     14 13 02 FB | 	rdlong	arg01, local06
1eaa4     F2 28 02 F6 | 	mov	local06, objptr
1eaa8     15 E5 01 F6 | 	mov	objptr, local07
1eaac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1eab0     2D 22 62 FD | 	call	local03
1eab4     14 E5 01 F6 | 	mov	objptr, local06
1eab8                 | LR__2630
1eab8     13 2D 02 F6 | 	mov	local08, local05
1eabc     02 2C 66 F0 | 	shl	local08, #2
1eac0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1eac4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1eac8     16 21 62 FC | 	wrlong	local02, local08
1eacc     00 20 0E F2 | 	cmp	local02, #0 wz
1ead0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1ead4     18 00 90 5D |  if_ne	jmp	#LR__2631
1ead8     02 26 66 F0 | 	shl	local05, #2
1eadc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1eae0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1eae4     13 01 68 FC | 	wrlong	#0, local05
1eae8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1eaec     C4 00 90 FD | 	jmp	#LR__2634
1eaf0                 | LR__2631
1eaf0     13 2F 02 F6 | 	mov	local09, local05
1eaf4     04 2E 66 F0 | 	shl	local09, #4
1eaf8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1eafc     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1eb00     17 13 02 F6 | 	mov	arg01, local09
1eb04     0F 15 02 F6 | 	mov	arg02, local01
1eb08     10 16 06 F6 | 	mov	arg03, #16
1eb0c     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1eb10     04 4C B0 FD | 	call	#__system__strncpy
1eb14     48 20 06 F1 | 	add	local02, #72
1eb18     10 2D 0A FB | 	rdlong	local08, local02 wz
1eb1c     48 20 86 F1 | 	sub	local02, #72
1eb20     7C 00 90 AD |  if_e	jmp	#LR__2633
1eb24     48 20 06 F1 | 	add	local02, #72
1eb28     10 2D 02 FB | 	rdlong	local08, local02
1eb2c     16 31 02 F6 | 	mov	local10, local08
1eb30     13 2C 46 F7 | 	zerox	local08, #19
1eb34     14 30 46 F0 | 	shr	local10, #20
1eb38     02 30 66 F0 | 	shl	local10, #2
1eb3c     ED 30 02 F1 | 	add	local10, __methods__
1eb40     18 31 02 FB | 	rdlong	local10, local10
1eb44     17 13 02 F6 | 	mov	arg01, local09
1eb48     F2 32 02 F6 | 	mov	local11, objptr
1eb4c     16 E5 01 F6 | 	mov	objptr, local08
1eb50     2D 30 62 FD | 	call	local10
1eb54     19 E5 01 F6 | 	mov	objptr, local11
1eb58     FD 12 0A F6 | 	mov	arg01, result1 wz
1eb5c     40 00 90 AD |  if_e	jmp	#LR__2632
1eb60     13 2D 02 F6 | 	mov	local08, local05
1eb64     02 2C 66 F0 | 	shl	local08, #2
1eb68     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1eb6c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1eb70     16 01 68 FC | 	wrlong	#0, local08
1eb74     02 26 66 F0 | 	shl	local05, #2
1eb78     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1eb7c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1eb80     13 01 68 FC | 	wrlong	#0, local05
1eb84     09 13 6A F6 | 	neg	arg01, arg01 wz
1eb88     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1eb8c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1eb90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1eb94     01 FA 65 56 |  if_ne	neg	result1, #1
1eb98     00 FA 05 A6 |  if_e	mov	result1, #0
1eb9c     18 00 90 FD | 	jmp	#LR__2635
1eba0                 | LR__2632
1eba0                 | LR__2633
1eba0     02 26 66 F0 | 	shl	local05, #2
1eba4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1eba8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1ebac     13 2F 62 FC | 	wrlong	local09, local05
1ebb0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ebb4                 | LR__2634
1ebb4     00 FA 05 F6 | 	mov	result1, #0
1ebb8                 | LR__2635
1ebb8     A7 F0 03 F6 | 	mov	ptra, fp
1ebbc     B2 00 A0 FD | 	call	#popregs_
1ebc0                 | __system___mount_ret
1ebc0     2D 00 64 FD | 	ret
1ebc4                 | 
1ebc4                 | __system___chdir
1ebc4     00 4A 05 F6 | 	mov	COUNT_, #0
1ebc8     A8 00 A0 FD | 	call	#pushregs_
1ebcc     40 F0 07 F1 | 	add	ptra, #64
1ebd0     04 4E 05 F1 | 	add	fp, #4
1ebd4     A7 12 62 FC | 	wrlong	arg01, fp
1ebd8     04 4E 05 F1 | 	add	fp, #4
1ebdc     A7 14 02 F6 | 	mov	arg02, fp
1ebe0     08 4E 85 F1 | 	sub	fp, #8
1ebe4     10 48 B0 FD | 	call	#__system__stat
1ebe8     3C 4E 05 F1 | 	add	fp, #60
1ebec     A7 FA 61 FC | 	wrlong	result1, fp
1ebf0     3C 4E 85 F1 | 	sub	fp, #60
1ebf4     00 FA 0D F2 | 	cmp	result1, #0 wz
1ebf8     3C 4E 05 51 |  if_ne	add	fp, #60
1ebfc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1ec00     3C 4E 85 51 |  if_ne	sub	fp, #60
1ec04     BC 00 90 5D |  if_ne	jmp	#LR__2642
1ec08     10 4E 05 F1 | 	add	fp, #16
1ec0c     A7 12 02 FB | 	rdlong	arg01, fp
1ec10     10 4E 85 F1 | 	sub	fp, #16
1ec14     78 00 00 FF 
1ec18     00 12 06 F5 | 	and	arg01, ##61440
1ec1c     08 00 00 FF 
1ec20     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1ec24     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1ec28     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1ec2c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1ec30     01 FA 65 56 |  if_ne	neg	result1, #1
1ec34     8C 00 90 5D |  if_ne	jmp	#LR__2642
1ec38     04 4E 05 F1 | 	add	fp, #4
1ec3c     A7 16 02 FB | 	rdlong	arg03, fp
1ec40     04 4E 85 F1 | 	sub	fp, #4
1ec44     0B 17 C2 FA | 	rdbyte	arg03, arg03
1ec48     2F 16 0E F2 | 	cmp	arg03, #47 wz
1ec4c     24 00 90 5D |  if_ne	jmp	#LR__2640
1ec50     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ec54     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ec58     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ec5c     04 4E 05 F1 | 	add	fp, #4
1ec60     A7 14 02 FB | 	rdlong	arg02, fp
1ec64     04 4E 85 F1 | 	sub	fp, #4
1ec68     00 17 06 F6 | 	mov	arg03, #256
1ec6c     A8 4A B0 FD | 	call	#__system__strncpy
1ec70     4C 00 90 FD | 	jmp	#LR__2641
1ec74                 | LR__2640
1ec74     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1ec78     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ec7c     38 4E 05 F1 | 	add	fp, #56
1ec80     A7 12 62 FC | 	wrlong	arg01, fp
1ec84     38 4E 85 F1 | 	sub	fp, #56
1ec88     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1ec8c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1ec90     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ec94     00 17 06 F6 | 	mov	arg03, #256
1ec98     7C 4A B0 FD | 	call	#__system__strncpy
1ec9c     38 4E 05 F1 | 	add	fp, #56
1eca0     A7 12 02 FB | 	rdlong	arg01, fp
1eca4     34 4E 85 F1 | 	sub	fp, #52
1eca8     A7 14 02 FB | 	rdlong	arg02, fp
1ecac     04 4E 85 F1 | 	sub	fp, #4
1ecb0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ecb4     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1ecb8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ecbc     10 00 B0 FD | 	call	#__system____getvfsforfile
1ecc0                 | LR__2641
1ecc0     00 FA 05 F6 | 	mov	result1, #0
1ecc4                 | LR__2642
1ecc4     A7 F0 03 F6 | 	mov	ptra, fp
1ecc8     B2 00 A0 FD | 	call	#popregs_
1eccc                 | __system___chdir_ret
1eccc     2D 00 64 FD | 	ret
1ecd0                 | 
1ecd0                 | __system____getvfsforfile
1ecd0     0E 4A 05 F6 | 	mov	COUNT_, #14
1ecd4     A8 00 A0 FD | 	call	#pushregs_
1ecd8     09 1F 02 F6 | 	mov	local01, arg01
1ecdc     0A 21 02 F6 | 	mov	local02, arg02
1ece0     0B 23 02 F6 | 	mov	local03, arg03
1ece4     97 10 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1ece8                 | LR__2650
1ece8     10 FB C1 FA | 	rdbyte	result1, local02
1ecec     2F FA 0D F2 | 	cmp	result1, #47 wz
1ecf0     01 20 06 A1 |  if_e	add	local02, #1
1ecf4     10 25 C2 AA |  if_e	rdbyte	local04, local02
1ecf8     01 20 86 A1 |  if_e	sub	local02, #1
1ecfc     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1ed00     01 20 06 A1 |  if_e	add	local02, #1
1ed04     E0 FF 9F AD |  if_e	jmp	#LR__2650
1ed08                 | LR__2651
1ed08     10 25 C2 FA | 	rdbyte	local04, local02
1ed0c     2F 24 0E F2 | 	cmp	local04, #47 wz
1ed10     14 00 90 5D |  if_ne	jmp	#LR__2652
1ed14     0F 13 02 F6 | 	mov	arg01, local01
1ed18     10 15 02 F6 | 	mov	arg02, local02
1ed1c     00 17 06 F6 | 	mov	arg03, #256
1ed20     F4 49 B0 FD | 	call	#__system__strncpy
1ed24     7C 00 90 FD | 	jmp	#LR__2654
1ed28                 | LR__2652
1ed28     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ed2c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1ed30     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ed34     0F 13 02 F6 | 	mov	arg01, local01
1ed38     00 17 06 F6 | 	mov	arg03, #256
1ed3c     D8 49 B0 FD | 	call	#__system__strncpy
1ed40     10 25 CA FA | 	rdbyte	local04, local02 wz
1ed44     5C 00 90 AD |  if_e	jmp	#LR__2653
1ed48     10 25 C2 FA | 	rdbyte	local04, local02
1ed4c     2E 24 0E F2 | 	cmp	local04, #46 wz
1ed50     01 20 06 A1 |  if_e	add	local02, #1
1ed54     10 27 C2 AA |  if_e	rdbyte	local05, local02
1ed58     01 20 86 A1 |  if_e	sub	local02, #1
1ed5c     13 29 02 A6 |  if_e	mov	local06, local05
1ed60     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1ed64     3C 00 90 AD |  if_e	jmp	#LR__2653
1ed68     0F 27 C2 FA | 	rdbyte	local05, local01
1ed6c     2F 26 0E F2 | 	cmp	local05, #47 wz
1ed70     01 1E 06 A1 |  if_e	add	local01, #1
1ed74     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1ed78     01 1E 86 A1 |  if_e	sub	local01, #1
1ed7c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1ed80     6D 01 00 5F 
1ed84     E8 14 06 56 |  if_ne	mov	arg02, ##@LR__4710
1ed88     0F 13 02 56 |  if_ne	mov	arg01, local01
1ed8c     00 17 06 56 |  if_ne	mov	arg03, #256
1ed90     D0 49 B0 5D |  if_ne	call	#__system__strncat
1ed94     0F 13 02 F6 | 	mov	arg01, local01
1ed98     10 15 02 F6 | 	mov	arg02, local02
1ed9c     00 17 06 F6 | 	mov	arg03, #256
1eda0     C0 49 B0 FD | 	call	#__system__strncat
1eda4                 | LR__2653
1eda4                 | LR__2654
1eda4     0F 13 02 F6 | 	mov	arg01, local01
1eda8     78 4B B0 FD | 	call	#__system___normalizeName
1edac     0F 25 CA FA | 	rdbyte	local04, local01 wz
1edb0     1C 00 90 AD |  if_e	jmp	#LR__2655
1edb4     0F 25 C2 FA | 	rdbyte	local04, local01
1edb8     2F 24 0E F2 | 	cmp	local04, #47 wz
1edbc     01 1E 06 A1 |  if_e	add	local01, #1
1edc0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1edc4     01 1E 86 A1 |  if_e	sub	local01, #1
1edc8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1edcc     18 00 90 5D |  if_ne	jmp	#LR__2656
1edd0                 | LR__2655
1edd0     01 00 00 FF 
1edd4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1edd8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1eddc     01 00 00 FF 
1ede0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1ede4     EC 01 90 FD | 	jmp	#LR__2670
1ede8                 | LR__2656
1ede8     00 2A 06 F6 | 	mov	local07, #0
1edec                 | LR__2657
1edec     04 2A 56 F2 | 	cmps	local07, #4 wc
1edf0     CC 01 90 3D |  if_ae	jmp	#LR__2669
1edf4     15 29 02 F6 | 	mov	local06, local07
1edf8     02 28 66 F0 | 	shl	local06, #2
1edfc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ee00     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1ee04     14 29 0A FB | 	rdlong	local06, local06 wz
1ee08     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ee0c     A8 01 90 AD |  if_e	jmp	#LR__2668
1ee10     15 25 02 F6 | 	mov	local04, local07
1ee14     02 24 66 F0 | 	shl	local04, #2
1ee18     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ee1c     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1ee20     12 13 02 FB | 	rdlong	arg01, local04
1ee24     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ee28     09 2D 02 F6 | 	mov	local08, arg01
1ee2c     97 06 48 FB | 	callpa	#(@LR__2659-@LR__2658)>>2,fcache_load_ptr_
1ee30                 | LR__2658
1ee30     16 FB C9 FA | 	rdbyte	result1, local08 wz
1ee34     01 2C 06 51 |  if_ne	add	local08, #1
1ee38     F4 FF 9F 5D |  if_ne	jmp	#LR__2658
1ee3c                 | LR__2659
1ee3c     09 2D 82 F1 | 	sub	local08, arg01
1ee40     16 2F 02 F6 | 	mov	local09, local08
1ee44     17 25 02 F6 | 	mov	local04, local09
1ee48     0F 25 02 F1 | 	add	local04, local01
1ee4c     12 29 C2 FA | 	rdbyte	local06, local04
1ee50     2F 28 0E F2 | 	cmp	local06, #47 wz
1ee54     17 31 02 56 |  if_ne	mov	local10, local09
1ee58     0F 31 02 51 |  if_ne	add	local10, local01
1ee5c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1ee60     54 01 90 5D |  if_ne	jmp	#LR__2667
1ee64     15 17 02 F6 | 	mov	arg03, local07
1ee68     02 16 66 F0 | 	shl	arg03, #2
1ee6c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ee70     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1ee74     0B 15 02 FB | 	rdlong	arg02, arg03
1ee78     17 17 02 F6 | 	mov	arg03, local09
1ee7c     0F 13 02 F6 | 	mov	arg01, local01
1ee80     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ee84     3C 49 B0 FD | 	call	#__system__strncmp
1ee88     00 FA 4D F2 | 	cmps	result1, #0 wz
1ee8c     28 01 90 5D |  if_ne	jmp	#LR__2667
1ee90     15 33 02 F6 | 	mov	local11, local07
1ee94     02 32 66 F0 | 	shl	local11, #2
1ee98     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1ee9c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1eea0     19 35 02 FB | 	rdlong	local12, local11
1eea4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1eea8     97 22 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1eeac                 | LR__2660
1eeac     17 29 02 F6 | 	mov	local06, local09
1eeb0     01 28 06 F1 | 	add	local06, #1
1eeb4     0F 29 02 F1 | 	add	local06, local01
1eeb8     14 33 C2 FA | 	rdbyte	local11, local06
1eebc     2E 32 0E F2 | 	cmp	local11, #46 wz
1eec0     2C 00 90 5D |  if_ne	jmp	#LR__2662
1eec4     17 33 02 F6 | 	mov	local11, local09
1eec8     02 32 06 F1 | 	add	local11, #2
1eecc     0F 33 02 F1 | 	add	local11, local01
1eed0     19 31 C2 FA | 	rdbyte	local10, local11
1eed4     2F 30 0E F2 | 	cmp	local10, #47 wz
1eed8     17 37 02 56 |  if_ne	mov	local13, local09
1eedc     02 36 06 51 |  if_ne	add	local13, #2
1eee0     0F 37 02 51 |  if_ne	add	local13, local01
1eee4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1eee8     01 2E 06 A1 |  if_e	add	local09, #1
1eeec     BC FF 9F AD |  if_e	jmp	#LR__2660
1eef0                 | LR__2661
1eef0                 | LR__2662
1eef0     00 22 0E F2 | 	cmp	local03, #0 wz
1eef4     11 13 02 56 |  if_ne	mov	arg01, local03
1eef8     0F 15 02 56 |  if_ne	mov	arg02, local01
1eefc     00 17 06 56 |  if_ne	mov	arg03, #256
1ef00     14 48 B0 5D |  if_ne	call	#__system__strncpy
1ef04     0F 15 02 F6 | 	mov	arg02, local01
1ef08     17 15 02 F1 | 	add	arg02, local09
1ef0c     01 14 06 F1 | 	add	arg02, #1
1ef10     0F 13 02 F6 | 	mov	arg01, local01
1ef14     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1ef18     0F 13 02 F6 | 	mov	arg01, local01
1ef1c     09 2D 02 F6 | 	mov	local08, arg01
1ef20     97 06 48 FB | 	callpa	#(@LR__2664-@LR__2663)>>2,fcache_load_ptr_
1ef24                 | LR__2663
1ef24     16 FB C9 FA | 	rdbyte	result1, local08 wz
1ef28     01 2C 06 51 |  if_ne	add	local08, #1
1ef2c     F4 FF 9F 5D |  if_ne	jmp	#LR__2663
1ef30                 | LR__2664
1ef30     09 2D 82 F1 | 	sub	local08, arg01
1ef34     16 2F 02 F6 | 	mov	local09, local08
1ef38                 | LR__2665
1ef38     01 2E 56 F2 | 	cmps	local09, #1 wc
1ef3c     70 00 90 CD |  if_b	jmp	#LR__2666
1ef40     17 25 02 F6 | 	mov	local04, local09
1ef44     0F 25 02 F1 | 	add	local04, local01
1ef48     12 33 C2 FA | 	rdbyte	local11, local04
1ef4c     2F 32 0E F2 | 	cmp	local11, #47 wz
1ef50     17 33 02 A6 |  if_e	mov	local11, local09
1ef54     0F 33 02 A1 |  if_e	add	local11, local01
1ef58     19 01 48 AC |  if_e	wrbyte	#0, local11
1ef5c     01 2E 86 A1 |  if_e	sub	local09, #1
1ef60     D4 FF 9F AD |  if_e	jmp	#LR__2665
1ef64     17 25 02 F6 | 	mov	local04, local09
1ef68     0F 25 02 F1 | 	add	local04, local01
1ef6c     12 33 C2 FA | 	rdbyte	local11, local04
1ef70     2E 32 0E F2 | 	cmp	local11, #46 wz
1ef74     38 00 90 5D |  if_ne	jmp	#LR__2666
1ef78     02 2E 56 F2 | 	cmps	local09, #2 wc
1ef7c     30 00 90 CD |  if_b	jmp	#LR__2666
1ef80     17 39 02 F6 | 	mov	local14, local09
1ef84     01 38 86 F1 | 	sub	local14, #1
1ef88     0F 39 02 F1 | 	add	local14, local01
1ef8c     1C 27 C2 FA | 	rdbyte	local05, local14
1ef90     2F 26 0E F2 | 	cmp	local05, #47 wz
1ef94     18 00 90 5D |  if_ne	jmp	#LR__2666
1ef98     17 25 02 F6 | 	mov	local04, local09
1ef9c     01 24 86 F1 | 	sub	local04, #1
1efa0     0F 25 02 F1 | 	add	local04, local01
1efa4     12 01 48 FC | 	wrbyte	#0, local04
1efa8     02 2E 86 F1 | 	sub	local09, #2
1efac     88 FF 9F FD | 	jmp	#LR__2665
1efb0                 | LR__2666
1efb0     1A FB 01 F6 | 	mov	result1, local12
1efb4     1C 00 90 FD | 	jmp	#LR__2670
1efb8                 | LR__2667
1efb8                 | LR__2668
1efb8     01 2A 06 F1 | 	add	local07, #1
1efbc     2C FE 9F FD | 	jmp	#LR__2657
1efc0                 | LR__2669
1efc0     03 00 00 FF 
1efc4     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1efc8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1efcc     03 00 00 FF 
1efd0     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1efd4                 | LR__2670
1efd4     A7 F0 03 F6 | 	mov	ptra, fp
1efd8     B2 00 A0 FD | 	call	#popregs_
1efdc                 | __system____getvfsforfile_ret
1efdc     2D 00 64 FD | 	ret
1efe0                 | 
1efe0                 | __system___basic_open
1efe0     05 4A 05 F6 | 	mov	COUNT_, #5
1efe4     A8 00 A0 FD | 	call	#pushregs_
1efe8     0A 1F 02 F6 | 	mov	local01, arg02
1efec     0B 21 02 F6 | 	mov	local02, arg03
1eff0     0C 23 02 F6 | 	mov	local03, arg04
1eff4     00 24 06 F6 | 	mov	local04, #0
1eff8     F4 46 B0 FD | 	call	#__system____getftab
1effc     FD 26 0A F6 | 	mov	local05, result1 wz
1f000     18 00 90 5D |  if_ne	jmp	#LR__2680
1f004     EE 12 02 F6 | 	mov	arg01, abortchain
1f008     0C 14 06 F6 | 	mov	arg02, #12
1f00c     01 16 06 F6 | 	mov	arg03, #1
1f010     DA 00 A0 FD | 	call	#__longjmp
1f014     01 FA 65 F6 | 	neg	result1, #1
1f018     10 01 90 FD | 	jmp	#LR__2689
1f01c                 | LR__2680
1f01c     08 26 06 F1 | 	add	local05, #8
1f020     13 FB 09 FB | 	rdlong	result1, local05 wz
1f024     08 26 86 F1 | 	sub	local05, #8
1f028     13 13 02 56 |  if_ne	mov	arg01, local05
1f02c     50 3E B0 5D |  if_ne	call	#__system___closeraw
1f030     00 1E 0E F2 | 	cmp	local01, #0 wz
1f034     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1f038     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1f03c     3C 00 90 AD |  if_e	jmp	#LR__2682
1f040     0C 12 06 F6 | 	mov	arg01, #12
1f044     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1f048     FD 24 0A F6 | 	mov	local04, result1 wz
1f04c     18 00 90 5D |  if_ne	jmp	#LR__2681
1f050     EE 12 02 F6 | 	mov	arg01, abortchain
1f054     07 14 06 F6 | 	mov	arg02, #7
1f058     01 16 06 F6 | 	mov	arg03, #1
1f05c     DA 00 A0 FD | 	call	#__longjmp
1f060     01 FA 65 F6 | 	neg	result1, #1
1f064     C4 00 90 FD | 	jmp	#LR__2689
1f068                 | LR__2681
1f068     12 01 68 FC | 	wrlong	#0, local04
1f06c     04 24 06 F1 | 	add	local04, #4
1f070     12 01 68 FC | 	wrlong	#0, local04
1f074     04 24 86 F1 | 	sub	local04, #4
1f078     13 25 62 FC | 	wrlong	local04, local05
1f07c                 | LR__2682
1f07c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f080     1C 00 90 AD |  if_e	jmp	#LR__2683
1f084     12 1F 62 FC | 	wrlong	local01, local04
1f088     12 FB 01 F6 | 	mov	result1, local04
1f08c     1B FA 25 F4 | 	bith	result1, #27
1f090     1C 26 06 F1 | 	add	local05, #28
1f094     13 FB 61 FC | 	wrlong	result1, local05
1f098     1C 26 86 F1 | 	sub	local05, #28
1f09c     0C 00 90 FD | 	jmp	#LR__2684
1f0a0                 | LR__2683
1f0a0     1C 26 06 F1 | 	add	local05, #28
1f0a4     13 01 68 FC | 	wrlong	#0, local05
1f0a8     1C 26 86 F1 | 	sub	local05, #28
1f0ac                 | LR__2684
1f0ac     00 20 0E F2 | 	cmp	local02, #0 wz
1f0b0     28 00 90 AD |  if_e	jmp	#LR__2685
1f0b4     04 24 06 F1 | 	add	local04, #4
1f0b8     12 21 62 FC | 	wrlong	local02, local04
1f0bc     04 24 86 F1 | 	sub	local04, #4
1f0c0     12 FB 01 F6 | 	mov	result1, local04
1f0c4     00 08 04 FF 
1f0c8     00 FA 45 F5 | 	or	result1, ##135266304
1f0cc     20 26 06 F1 | 	add	local05, #32
1f0d0     13 FB 61 FC | 	wrlong	result1, local05
1f0d4     20 26 86 F1 | 	sub	local05, #32
1f0d8     0C 00 90 FD | 	jmp	#LR__2686
1f0dc                 | LR__2685
1f0dc     20 26 06 F1 | 	add	local05, #32
1f0e0     13 01 68 FC | 	wrlong	#0, local05
1f0e4     20 26 86 F1 | 	sub	local05, #32
1f0e8                 | LR__2686
1f0e8     00 22 0E F2 | 	cmp	local03, #0 wz
1f0ec     24 00 90 AD |  if_e	jmp	#LR__2687
1f0f0     08 24 06 F1 | 	add	local04, #8
1f0f4     12 23 62 FC | 	wrlong	local03, local04
1f0f8     08 24 86 F1 | 	sub	local04, #8
1f0fc     00 10 04 FF 
1f100     00 24 46 F5 | 	or	local04, ##136314880
1f104     24 26 06 F1 | 	add	local05, #36
1f108     13 25 62 FC | 	wrlong	local04, local05
1f10c     24 26 86 F1 | 	sub	local05, #36
1f110     0C 00 90 FD | 	jmp	#LR__2688
1f114                 | LR__2687
1f114     24 26 06 F1 | 	add	local05, #36
1f118     13 01 68 FC | 	wrlong	#0, local05
1f11c     24 26 86 F1 | 	sub	local05, #36
1f120                 | LR__2688
1f120     08 26 06 F1 | 	add	local05, #8
1f124     13 0F 68 FC | 	wrlong	#7, local05
1f128     00 FA 05 F6 | 	mov	result1, #0
1f12c                 | LR__2689
1f12c     A7 F0 03 F6 | 	mov	ptra, fp
1f130     B2 00 A0 FD | 	call	#popregs_
1f134                 | __system___basic_open_ret
1f134     2D 00 64 FD | 	ret
1f138                 | 
1f138                 | __system___basic_open_string
1f138     04 4A 05 F6 | 	mov	COUNT_, #4
1f13c     A8 00 A0 FD | 	call	#pushregs_
1f140     0A 1F 02 F6 | 	mov	local01, arg02
1f144     0B 21 02 F6 | 	mov	local02, arg03
1f148     A4 45 B0 FD | 	call	#__system____getftab
1f14c     FD 22 0A F6 | 	mov	local03, result1 wz
1f150     18 00 90 5D |  if_ne	jmp	#LR__2690
1f154     EE 12 02 F6 | 	mov	arg01, abortchain
1f158     0C 14 06 F6 | 	mov	arg02, #12
1f15c     01 16 06 F6 | 	mov	arg03, #1
1f160     DA 00 A0 FD | 	call	#__longjmp
1f164     01 FA 65 F6 | 	neg	result1, #1
1f168     58 00 90 FD | 	jmp	#LR__2692
1f16c                 | LR__2690
1f16c     08 22 06 F1 | 	add	local03, #8
1f170     11 19 0A FB | 	rdlong	arg04, local03 wz
1f174     08 22 86 F1 | 	sub	local03, #8
1f178     11 13 02 56 |  if_ne	mov	arg01, local03
1f17c     00 3D B0 5D |  if_ne	call	#__system___closeraw
1f180     0F 15 02 F6 | 	mov	arg02, local01
1f184     10 17 02 F6 | 	mov	arg03, local02
1f188     11 13 02 F6 | 	mov	arg01, local03
1f18c     B6 19 06 F6 | 	mov	arg04, #438
1f190     E8 39 B0 FD | 	call	#__system___openraw
1f194     FD 24 02 F6 | 	mov	local04, result1
1f198     00 24 56 F2 | 	cmps	local04, #0 wc
1f19c     20 00 90 3D |  if_ae	jmp	#LR__2691
1f1a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f1a4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1f1a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f1ac     EE 12 02 F6 | 	mov	arg01, abortchain
1f1b0     01 16 06 F6 | 	mov	arg03, #1
1f1b4     DA 00 A0 FD | 	call	#__longjmp
1f1b8     01 FA 65 F6 | 	neg	result1, #1
1f1bc     04 00 90 FD | 	jmp	#LR__2692
1f1c0                 | LR__2691
1f1c0     12 FB 01 F6 | 	mov	result1, local04
1f1c4                 | LR__2692
1f1c4     A7 F0 03 F6 | 	mov	ptra, fp
1f1c8     B2 00 A0 FD | 	call	#popregs_
1f1cc                 | __system___basic_open_string_ret
1f1cc     2D 00 64 FD | 	ret
1f1d0                 | 
1f1d0                 | __system___basic_print_nl
1f1d0     0A 14 06 F6 | 	mov	arg02, #10
1f1d4     00 16 06 F6 | 	mov	arg03, #0
1f1d8     08 00 B0 FD | 	call	#__system___basic_print_char
1f1dc     01 FA 05 F6 | 	mov	result1, #1
1f1e0                 | __system___basic_print_nl_ret
1f1e0     2D 00 64 FD | 	ret
1f1e4                 | 
1f1e4                 | __system___basic_print_char
1f1e4     03 4A 05 F6 | 	mov	COUNT_, #3
1f1e8     A8 00 A0 FD | 	call	#pushregs_
1f1ec     0A 1F 02 F6 | 	mov	local01, arg02
1f1f0     50 4C B0 FD | 	call	#__system___gettxfunc
1f1f4     FD 20 0A F6 | 	mov	local02, result1 wz
1f1f8     00 FA 05 A6 |  if_e	mov	result1, #0
1f1fc     30 00 90 AD |  if_e	jmp	#LR__2700
1f200     10 23 02 F6 | 	mov	local03, local02
1f204     13 20 46 F7 | 	zerox	local02, #19
1f208     14 22 46 F0 | 	shr	local03, #20
1f20c     02 22 66 F0 | 	shl	local03, #2
1f210     ED 22 02 F1 | 	add	local03, __methods__
1f214     11 23 02 FB | 	rdlong	local03, local03
1f218     0F 13 02 F6 | 	mov	arg01, local01
1f21c     F2 1E 02 F6 | 	mov	local01, objptr
1f220     10 E5 01 F6 | 	mov	objptr, local02
1f224     2D 22 62 FD | 	call	local03
1f228     0F E5 01 F6 | 	mov	objptr, local01
1f22c     01 FA 05 F6 | 	mov	result1, #1
1f230                 | LR__2700
1f230     A7 F0 03 F6 | 	mov	ptra, fp
1f234     B2 00 A0 FD | 	call	#popregs_
1f238                 | __system___basic_print_char_ret
1f238     2D 00 64 FD | 	ret
1f23c                 | 
1f23c                 | __system___basic_print_string
1f23c     03 4A 05 F6 | 	mov	COUNT_, #3
1f240     A8 00 A0 FD | 	call	#pushregs_
1f244     0A 1F 02 F6 | 	mov	local01, arg02
1f248     0B 21 02 F6 | 	mov	local02, arg03
1f24c     F4 4B B0 FD | 	call	#__system___gettxfunc
1f250     FD 22 0A F6 | 	mov	local03, result1 wz
1f254     00 FA 05 A6 |  if_e	mov	result1, #0
1f258     18 00 90 AD |  if_e	jmp	#LR__2710
1f25c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f260     00 FA 05 A6 |  if_e	mov	result1, #0
1f264     11 13 02 56 |  if_ne	mov	arg01, local03
1f268     10 15 02 56 |  if_ne	mov	arg02, local02
1f26c     0F 17 02 56 |  if_ne	mov	arg03, local01
1f270     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1f274                 | LR__2710
1f274     A7 F0 03 F6 | 	mov	ptra, fp
1f278     B2 00 A0 FD | 	call	#popregs_
1f27c                 | __system___basic_print_string_ret
1f27c     2D 00 64 FD | 	ret
1f280                 | 
1f280                 | __system___basic_print_integer
1f280     04 4A 05 F6 | 	mov	COUNT_, #4
1f284     A8 00 A0 FD | 	call	#pushregs_
1f288     0A 1F 02 F6 | 	mov	local01, arg02
1f28c     0B 21 02 F6 | 	mov	local02, arg03
1f290     0C 23 02 F6 | 	mov	local03, arg04
1f294     AC 4B B0 FD | 	call	#__system___gettxfunc
1f298     FD 24 0A F6 | 	mov	local04, result1 wz
1f29c     00 FA 05 A6 |  if_e	mov	result1, #0
1f2a0     12 13 02 56 |  if_ne	mov	arg01, local04
1f2a4     10 15 02 56 |  if_ne	mov	arg02, local02
1f2a8     0F 17 02 56 |  if_ne	mov	arg03, local01
1f2ac     11 19 02 56 |  if_ne	mov	arg04, local03
1f2b0     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f2b4     A7 F0 03 F6 | 	mov	ptra, fp
1f2b8     B2 00 A0 FD | 	call	#popregs_
1f2bc                 | __system___basic_print_integer_ret
1f2bc     2D 00 64 FD | 	ret
1f2c0                 | 
1f2c0                 | __system___basic_print_unsigned
1f2c0     03 4A 05 F6 | 	mov	COUNT_, #3
1f2c4     A8 00 A0 FD | 	call	#pushregs_
1f2c8     0A 1F 02 F6 | 	mov	local01, arg02
1f2cc     0B 21 02 F6 | 	mov	local02, arg03
1f2d0     0C 23 02 F6 | 	mov	local03, arg04
1f2d4     6C 4B B0 FD | 	call	#__system___gettxfunc
1f2d8     FD 12 0A F6 | 	mov	arg01, result1 wz
1f2dc     00 FA 05 A6 |  if_e	mov	result1, #0
1f2e0     3A 20 26 54 |  if_ne	bith	local02, #58
1f2e4     10 15 02 56 |  if_ne	mov	arg02, local02
1f2e8     0F 17 02 56 |  if_ne	mov	arg03, local01
1f2ec     11 19 02 56 |  if_ne	mov	arg04, local03
1f2f0     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f2f4     A7 F0 03 F6 | 	mov	ptra, fp
1f2f8     B2 00 A0 FD | 	call	#popregs_
1f2fc                 | __system___basic_print_unsigned_ret
1f2fc     2D 00 64 FD | 	ret
1f300                 | 
1f300                 | __system___basic_get_char
1f300     03 4A 05 F6 | 	mov	COUNT_, #3
1f304     A8 00 A0 FD | 	call	#pushregs_
1f308     7C 4B B0 FD | 	call	#__system___getrxfunc
1f30c     FD 1E 0A F6 | 	mov	local01, result1 wz
1f310     01 FA 65 A6 |  if_e	neg	result1, #1
1f314     28 00 90 AD |  if_e	jmp	#LR__2720
1f318     0F 21 02 F6 | 	mov	local02, local01
1f31c     13 1E 46 F7 | 	zerox	local01, #19
1f320     14 20 46 F0 | 	shr	local02, #20
1f324     02 20 66 F0 | 	shl	local02, #2
1f328     ED 20 02 F1 | 	add	local02, __methods__
1f32c     10 21 02 FB | 	rdlong	local02, local02
1f330     F2 22 02 F6 | 	mov	local03, objptr
1f334     0F E5 01 F6 | 	mov	objptr, local01
1f338     2D 20 62 FD | 	call	local02
1f33c     11 E5 01 F6 | 	mov	objptr, local03
1f340                 | LR__2720
1f340     A7 F0 03 F6 | 	mov	ptra, fp
1f344     B2 00 A0 FD | 	call	#popregs_
1f348                 | __system___basic_get_char_ret
1f348     2D 00 64 FD | 	ret
1f34c                 | 
1f34c                 | __system___basic_get
1f34c     04 4A 05 F6 | 	mov	COUNT_, #4
1f350     A8 00 A0 FD | 	call	#pushregs_
1f354     0D 1F 02 F6 | 	mov	local01, arg05
1f358     0F 19 02 FD | 	qmul	arg04, local01
1f35c     09 21 02 F6 | 	mov	local02, arg01
1f360     0B 23 02 F6 | 	mov	local03, arg03
1f364     00 14 0E F2 | 	cmp	arg02, #0 wz
1f368     01 14 86 51 |  if_ne	sub	arg02, #1
1f36c     10 13 02 56 |  if_ne	mov	arg01, local02
1f370     00 16 06 56 |  if_ne	mov	arg03, #0
1f374     18 24 62 FD | 	getqx	local04
1f378     BC 41 B0 5D |  if_ne	call	#__system__lseek
1f37c     11 15 02 F6 | 	mov	arg02, local03
1f380     12 17 02 F6 | 	mov	arg03, local04
1f384     10 13 02 F6 | 	mov	arg01, local02
1f388     34 41 B0 FD | 	call	#__system__read
1f38c     FD 24 02 F6 | 	mov	local04, result1
1f390     01 24 56 F2 | 	cmps	local04, #1 wc
1f394     10 00 90 CD |  if_b	jmp	#LR__2730
1f398     12 65 02 F6 | 	mov	muldiva_, local04
1f39c     0F 67 02 F6 | 	mov	muldivb_, local01
1f3a0     BA 00 A0 FD | 	call	#divide_
1f3a4     33 25 02 F6 | 	mov	local04, muldivb_
1f3a8                 | LR__2730
1f3a8     12 FB 01 F6 | 	mov	result1, local04
1f3ac     A7 F0 03 F6 | 	mov	ptra, fp
1f3b0     B2 00 A0 FD | 	call	#popregs_
1f3b4                 | __system___basic_get_ret
1f3b4     2D 00 64 FD | 	ret
1f3b8                 | 
1f3b8                 | __system____lockio
1f3b8     10 4B B0 FD | 	call	#__system___getiolock_0475
1f3bc     FD 12 02 F6 | 	mov	arg01, result1
1f3c0     74 F1 BF FD | 	call	#__system___lockmem
1f3c4     00 FA 05 F6 | 	mov	result1, #0
1f3c8                 | __system____lockio_ret
1f3c8     2D 00 64 FD | 	ret
1f3cc                 | 
1f3cc                 | __system____unlockio
1f3cc     FC 4A B0 FD | 	call	#__system___getiolock_0475
1f3d0     FD 00 68 FC | 	wrlong	#0, result1
1f3d4     00 FA 05 F6 | 	mov	result1, #0
1f3d8                 | __system____unlockio_ret
1f3d8     2D 00 64 FD | 	ret
1f3dc                 | 
1f3dc                 | __system___fmtchar
1f3dc     00 4A 05 F6 | 	mov	COUNT_, #0
1f3e0     A8 00 A0 FD | 	call	#pushregs_
1f3e4     10 F0 07 F1 | 	add	ptra, #16
1f3e8     04 4E 05 F1 | 	add	fp, #4
1f3ec     A7 12 62 FC | 	wrlong	arg01, fp
1f3f0     04 4E 05 F1 | 	add	fp, #4
1f3f4     A7 14 62 FC | 	wrlong	arg02, fp
1f3f8     04 4E 05 F1 | 	add	fp, #4
1f3fc     A7 16 62 FC | 	wrlong	arg03, fp
1f400     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1f404     A7 16 62 FC | 	wrlong	arg03, fp
1f408     08 4E 85 F1 | 	sub	fp, #8
1f40c     A7 12 02 FB | 	rdlong	arg01, fp
1f410     04 4E 05 F1 | 	add	fp, #4
1f414     A7 14 02 FB | 	rdlong	arg02, fp
1f418     04 4E 05 F1 | 	add	fp, #4
1f41c     A7 16 02 F6 | 	mov	arg03, fp
1f420     0C 4E 85 F1 | 	sub	fp, #12
1f424     0C 00 B0 FD | 	call	#__system___fmtstr
1f428     A7 F0 03 F6 | 	mov	ptra, fp
1f42c     B2 00 A0 FD | 	call	#popregs_
1f430                 | __system___fmtchar_ret
1f430     2D 00 64 FD | 	ret
1f434                 | 
1f434                 | __system___fmtstr
1f434     09 4A 05 F6 | 	mov	COUNT_, #9
1f438     A8 00 A0 FD | 	call	#pushregs_
1f43c     09 1F 02 F6 | 	mov	local01, arg01
1f440     0A 21 02 F6 | 	mov	local02, arg02
1f444     0B 23 02 F6 | 	mov	local03, arg03
1f448     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1f44c     11 13 02 F6 | 	mov	arg01, local03
1f450     09 25 02 F6 | 	mov	local04, arg01
1f454     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1f458                 | LR__2740
1f458     12 FB C9 FA | 	rdbyte	result1, local04 wz
1f45c     01 24 06 51 |  if_ne	add	local04, #1
1f460     F4 FF 9F 5D |  if_ne	jmp	#LR__2740
1f464                 | LR__2741
1f464     09 25 82 F1 | 	sub	local04, arg01
1f468     00 18 0E F2 | 	cmp	arg04, #0 wz
1f46c     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1f470     10 15 02 F6 | 	mov	arg02, local02
1f474     12 17 02 F6 | 	mov	arg03, local04
1f478     0F 13 02 F6 | 	mov	arg01, local01
1f47c     02 18 06 F6 | 	mov	arg04, #2
1f480     60 46 B0 FD | 	call	#__system___fmtpad
1f484     FD 26 02 F6 | 	mov	local05, result1
1f488     00 26 56 F2 | 	cmps	local05, #0 wc
1f48c     13 FB 01 C6 |  if_b	mov	result1, local05
1f490     80 00 90 CD |  if_b	jmp	#LR__2744
1f494     01 24 56 F2 | 	cmps	local04, #1 wc
1f498     50 00 90 CD |  if_b	jmp	#LR__2743
1f49c     12 29 02 F6 | 	mov	local06, local04
1f4a0                 | LR__2742
1f4a0     0F 2B 02 F6 | 	mov	local07, local01
1f4a4     0F 2D 02 F6 | 	mov	local08, local01
1f4a8     13 2A 46 F7 | 	zerox	local07, #19
1f4ac     14 2C 46 F0 | 	shr	local08, #20
1f4b0     02 2C 66 F0 | 	shl	local08, #2
1f4b4     ED 2C 02 F1 | 	add	local08, __methods__
1f4b8     16 2D 02 FB | 	rdlong	local08, local08
1f4bc     11 13 C2 FA | 	rdbyte	arg01, local03
1f4c0     F2 2E 02 F6 | 	mov	local09, objptr
1f4c4     15 E5 01 F6 | 	mov	objptr, local07
1f4c8     01 22 06 F1 | 	add	local03, #1
1f4cc     2D 2C 62 FD | 	call	local08
1f4d0     17 E5 01 F6 | 	mov	objptr, local09
1f4d4     FD 2E 02 F6 | 	mov	local09, result1
1f4d8     00 2E 56 F2 | 	cmps	local09, #0 wc
1f4dc     17 FB 01 C6 |  if_b	mov	result1, local09
1f4e0     30 00 90 CD |  if_b	jmp	#LR__2744
1f4e4     17 27 02 F1 | 	add	local05, local09
1f4e8     ED 29 6E FB | 	djnz	local06, #LR__2742
1f4ec                 | LR__2743
1f4ec     10 15 02 F6 | 	mov	arg02, local02
1f4f0     12 17 02 F6 | 	mov	arg03, local04
1f4f4     0F 13 02 F6 | 	mov	arg01, local01
1f4f8     01 18 06 F6 | 	mov	arg04, #1
1f4fc     E4 45 B0 FD | 	call	#__system___fmtpad
1f500     FD 2E 02 F6 | 	mov	local09, result1
1f504     00 2E 56 F2 | 	cmps	local09, #0 wc
1f508     17 FB 01 C6 |  if_b	mov	result1, local09
1f50c     17 27 02 31 |  if_ae	add	local05, local09
1f510     13 FB 01 36 |  if_ae	mov	result1, local05
1f514                 | LR__2744
1f514     A7 F0 03 F6 | 	mov	ptra, fp
1f518     B2 00 A0 FD | 	call	#popregs_
1f51c                 | __system___fmtstr_ret
1f51c     2D 00 64 FD | 	ret
1f520                 | 
1f520                 | __system___fmtnum
1f520     0B 4A 05 F6 | 	mov	COUNT_, #11
1f524     A8 00 A0 FD | 	call	#pushregs_
1f528     09 1F 02 F6 | 	mov	local01, arg01
1f52c     0A 21 02 F6 | 	mov	local02, arg02
1f530     0B 23 02 F6 | 	mov	local03, arg03
1f534     0C 25 02 F6 | 	mov	local04, arg04
1f538     F8 27 02 F6 | 	mov	local05, ptra
1f53c     13 29 02 F6 | 	mov	local06, local05
1f540     00 2A 06 F6 | 	mov	local07, #0
1f544     10 2D 02 F6 | 	mov	local08, local02
1f548     10 2C 46 F0 | 	shr	local08, #16
1f54c     3F 2C 06 F5 | 	and	local08, #63
1f550     10 2F E2 F8 | 	getbyte	local09, local02, #0
1f554     10 31 02 F6 | 	mov	local10, local02
1f558     1A 30 46 F0 | 	shr	local10, #26
1f55c     03 30 06 F5 | 	and	local10, #3
1f560     18 33 02 F6 | 	mov	local11, local10
1f564     01 2C 56 F2 | 	cmps	local08, #1 wc
1f568     44 F0 07 F1 | 	add	ptra, #68
1f56c     01 2C 86 31 |  if_ae	sub	local08, #1
1f570     41 2E 56 F2 | 	cmps	local09, #65 wc
1f574     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1f578     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1f57c     03 32 0E F2 | 	cmp	local11, #3 wz
1f580     00 32 06 A6 |  if_e	mov	local11, #0
1f584     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1f588     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1f58c     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1f590     00 32 0E F2 | 	cmp	local11, #0 wz
1f594     4C 00 90 AD |  if_e	jmp	#LR__2753
1f598     01 2A 06 F6 | 	mov	local07, #1
1f59c     17 2D 0A F2 | 	cmp	local08, local09 wz
1f5a0     18 00 90 5D |  if_ne	jmp	#LR__2751
1f5a4     05 2C 6E FB | 	djnz	local08, #LR__2750
1f5a8     0F 13 02 F6 | 	mov	arg01, local01
1f5ac     10 15 02 F6 | 	mov	arg02, local02
1f5b0     23 16 06 F6 | 	mov	arg03, #35
1f5b4     24 FE BF FD | 	call	#__system___fmtchar
1f5b8     88 00 90 FD | 	jmp	#LR__2757
1f5bc                 | LR__2750
1f5bc                 | LR__2751
1f5bc     02 32 0E F2 | 	cmp	local11, #2 wz
1f5c0     14 31 02 A6 |  if_e	mov	local10, local06
1f5c4     01 28 06 A1 |  if_e	add	local06, #1
1f5c8     18 41 48 AC |  if_e	wrbyte	#32, local10
1f5cc     14 00 90 AD |  if_e	jmp	#LR__2752
1f5d0     04 32 0E F2 | 	cmp	local11, #4 wz
1f5d4     14 5B 48 AC |  if_e	wrbyte	#45, local06
1f5d8     01 28 06 A1 |  if_e	add	local06, #1
1f5dc     14 57 48 5C |  if_ne	wrbyte	#43, local06
1f5e0     01 28 06 51 |  if_ne	add	local06, #1
1f5e4                 | LR__2752
1f5e4                 | LR__2753
1f5e4     14 13 02 F6 | 	mov	arg01, local06
1f5e8     11 15 02 F6 | 	mov	arg02, local03
1f5ec     12 17 02 F6 | 	mov	arg03, local04
1f5f0     16 19 02 F6 | 	mov	arg04, local08
1f5f4     00 1A 06 F6 | 	mov	arg05, #0
1f5f8     1D 20 2E F4 | 	testbn	local02, #29 wz
1f5fc     01 1A 06 56 |  if_ne	mov	arg05, #1
1f600     A8 45 B0 FD | 	call	#__system___uitoa
1f604     FD 2A 02 F1 | 	add	local07, result1
1f608     17 2B 5A F2 | 	cmps	local07, local09 wcz
1f60c     24 00 90 ED |  if_be	jmp	#LR__2756
1f610     97 0E 48 FB | 	callpa	#(@LR__2755-@LR__2754)>>2,fcache_load_ptr_
1f614                 | LR__2754
1f614     17 31 02 F6 | 	mov	local10, local09
1f618     01 30 56 F2 | 	cmps	local10, #1 wc
1f61c     01 2E 86 F1 | 	sub	local09, #1
1f620     14 31 02 36 |  if_ae	mov	local10, local06
1f624     01 28 06 31 |  if_ae	add	local06, #1
1f628     18 47 48 3C |  if_ae	wrbyte	#35, local10
1f62c     E4 FF 9F 3D |  if_ae	jmp	#LR__2754
1f630                 | LR__2755
1f630     14 01 48 FC | 	wrbyte	#0, local06
1f634                 | LR__2756
1f634     0F 13 02 F6 | 	mov	arg01, local01
1f638     10 15 02 F6 | 	mov	arg02, local02
1f63c     13 17 02 F6 | 	mov	arg03, local05
1f640     F0 FD BF FD | 	call	#__system___fmtstr
1f644                 | LR__2757
1f644     A7 F0 03 F6 | 	mov	ptra, fp
1f648     B2 00 A0 FD | 	call	#popregs_
1f64c                 | __system___fmtnum_ret
1f64c     2D 00 64 FD | 	ret
1f650                 | 
1f650                 | __system___fmtfloat
1f650     10 4A 05 F6 | 	mov	COUNT_, #16
1f654     A8 00 A0 FD | 	call	#pushregs_
1f658     24 F1 07 F1 | 	add	ptra, #292
1f65c     04 4E 05 F1 | 	add	fp, #4
1f660     A7 12 62 FC | 	wrlong	arg01, fp
1f664     04 4E 05 F1 | 	add	fp, #4
1f668     A7 14 62 FC | 	wrlong	arg02, fp
1f66c     04 4E 05 F1 | 	add	fp, #4
1f670     A7 16 62 FC | 	wrlong	arg03, fp
1f674     04 4E 05 F1 | 	add	fp, #4
1f678     A7 18 62 FC | 	wrlong	arg04, fp
1f67c     0C 4E 05 F1 | 	add	fp, #12
1f680     A7 14 68 FC | 	wrlong	#10, fp
1f684     08 4E 05 F1 | 	add	fp, #8
1f688     A7 00 68 FC | 	wrlong	#0, fp
1f68c     08 4E 05 F1 | 	add	fp, #8
1f690     A7 00 68 FC | 	wrlong	#0, fp
1f694     08 4E 05 F1 | 	add	fp, #8
1f698     A7 00 68 FC | 	wrlong	#0, fp
1f69c     04 4E 05 F1 | 	add	fp, #4
1f6a0     A7 04 68 FC | 	wrlong	#2, fp
1f6a4     04 4E 05 F1 | 	add	fp, #4
1f6a8     A7 00 68 FC | 	wrlong	#0, fp
1f6ac     04 4E 05 F1 | 	add	fp, #4
1f6b0     A7 00 68 FC | 	wrlong	#0, fp
1f6b4     04 4E 05 F1 | 	add	fp, #4
1f6b8     A7 00 68 FC | 	wrlong	#0, fp
1f6bc     04 4E 05 F1 | 	add	fp, #4
1f6c0     A7 00 68 FC | 	wrlong	#0, fp
1f6c4     18 4E 05 F1 | 	add	fp, #24
1f6c8     A7 00 68 FC | 	wrlong	#0, fp
1f6cc     68 4E 05 F1 | 	add	fp, #104
1f6d0     A7 1E 02 F6 | 	mov	local01, fp
1f6d4     08 4E 85 F1 | 	sub	fp, #8
1f6d8     A7 1E 62 FC | 	wrlong	local01, fp
1f6dc     04 4E 05 F1 | 	add	fp, #4
1f6e0     A7 1E 62 FC | 	wrlong	local01, fp
1f6e4     BC 4E 85 F1 | 	sub	fp, #188
1f6e8     A7 1E 02 FB | 	rdlong	local01, fp
1f6ec     10 1E 46 F0 | 	shr	local01, #16
1f6f0     3F 1E 06 F5 | 	and	local01, #63
1f6f4     B0 4E 05 F1 | 	add	fp, #176
1f6f8     A7 1E 62 FC | 	wrlong	local01, fp
1f6fc     B0 4E 85 F1 | 	sub	fp, #176
1f700     A7 1E 02 FB | 	rdlong	local01, fp
1f704     1C 1E 46 F0 | 	shr	local01, #28
1f708     01 1E 06 F5 | 	and	local01, #1
1f70c     08 4F 05 F1 | 	add	fp, #264
1f710     A7 1E 62 FC | 	wrlong	local01, fp
1f714     58 4E 85 F1 | 	sub	fp, #88
1f718     A7 1E 0A FB | 	rdlong	local01, fp wz
1f71c     B8 4E 85 F1 | 	sub	fp, #184
1f720     3C 00 90 5D |  if_ne	jmp	#LR__2761
1f724     10 4E 05 F1 | 	add	fp, #16
1f728     A7 1E 02 FB | 	rdlong	local01, fp
1f72c     10 4E 85 F1 | 	sub	fp, #16
1f730     61 1E 0E F2 | 	cmp	local01, #97 wz
1f734     18 00 90 5D |  if_ne	jmp	#LR__2760
1f738     B8 4E 05 F1 | 	add	fp, #184
1f73c     A7 1A 68 FC | 	wrlong	#13, fp
1f740     84 4E 85 F1 | 	sub	fp, #132
1f744     A7 02 68 FC | 	wrlong	#1, fp
1f748     34 4E 85 F1 | 	sub	fp, #52
1f74c     24 00 90 FD | 	jmp	#LR__2762
1f750                 | LR__2760
1f750     B8 4E 05 F1 | 	add	fp, #184
1f754     A7 0C 68 FC | 	wrlong	#6, fp
1f758     B8 4E 85 F1 | 	sub	fp, #184
1f75c     14 00 90 FD | 	jmp	#LR__2762
1f760                 | LR__2761
1f760     B8 4E 05 F1 | 	add	fp, #184
1f764     A7 1E 02 FB | 	rdlong	local01, fp
1f768     01 1E 86 F1 | 	sub	local01, #1
1f76c     A7 1E 62 FC | 	wrlong	local01, fp
1f770     B8 4E 85 F1 | 	sub	fp, #184
1f774                 | LR__2762
1f774     08 4E 05 F1 | 	add	fp, #8
1f778     A7 1E 02 FB | 	rdlong	local01, fp
1f77c     16 1E 46 F0 | 	shr	local01, #22
1f780     03 1E 06 F5 | 	and	local01, #3
1f784     04 4F 05 F1 | 	add	fp, #260
1f788     A7 1E 62 FC | 	wrlong	local01, fp
1f78c     04 4F 85 F1 | 	sub	fp, #260
1f790     A7 1E 02 FB | 	rdlong	local01, fp
1f794     1D 1E 46 F0 | 	shr	local01, #29
1f798     01 1E 06 F5 | 	and	local01, #1
1f79c     B4 4E 05 F1 | 	add	fp, #180
1f7a0     A7 1E 62 FC | 	wrlong	local01, fp
1f7a4     B4 4E 85 F1 | 	sub	fp, #180
1f7a8     A7 1E 02 FB | 	rdlong	local01, fp
1f7ac     0F 1F EA F8 | 	getbyte	local01, local01, #1
1f7b0     60 4E 05 F1 | 	add	fp, #96
1f7b4     A7 1E 62 FC | 	wrlong	local01, fp
1f7b8     60 4E 85 F1 | 	sub	fp, #96
1f7bc     A7 1E 02 FB | 	rdlong	local01, fp
1f7c0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1f7c4     64 4E 05 F1 | 	add	fp, #100
1f7c8     A7 1E 62 FC | 	wrlong	local01, fp
1f7cc     00 1E 06 F6 | 	mov	local01, #0
1f7d0     5C 4E 85 F1 | 	sub	fp, #92
1f7d4     A7 1A 02 FB | 	rdlong	arg05, fp
1f7d8     65 1A 0E F2 | 	cmp	arg05, #101 wz
1f7dc     01 1E 06 A6 |  if_e	mov	local01, #1
1f7e0     14 4E 05 F1 | 	add	fp, #20
1f7e4     A7 1E 62 FC | 	wrlong	local01, fp
1f7e8     98 4E 05 F1 | 	add	fp, #152
1f7ec     A7 20 0A FB | 	rdlong	local02, fp wz
1f7f0     45 1E 06 56 |  if_ne	mov	local01, #69
1f7f4     65 1E 06 A6 |  if_e	mov	local01, #101
1f7f8     8C 4E 85 F1 | 	sub	fp, #140
1f7fc     A7 1E 62 FC | 	wrlong	local01, fp
1f800     20 4E 85 F1 | 	sub	fp, #32
1f804     A7 1E 02 FB | 	rdlong	local01, fp
1f808     10 4E 85 F1 | 	sub	fp, #16
1f80c     61 1E 0E F2 | 	cmp	local01, #97 wz
1f810     4C 00 90 5D |  if_ne	jmp	#LR__2763
1f814     24 4E 05 F1 | 	add	fp, #36
1f818     A7 02 68 FC | 	wrlong	#1, fp
1f81c     98 4E 05 F1 | 	add	fp, #152
1f820     A7 20 0A FB | 	rdlong	local02, fp wz
1f824     50 1E 06 56 |  if_ne	mov	local01, #80
1f828     70 1E 06 A6 |  if_e	mov	local01, #112
1f82c     8C 4E 85 F1 | 	sub	fp, #140
1f830     A7 1E 62 FC | 	wrlong	local01, fp
1f834     14 4E 85 F1 | 	sub	fp, #20
1f838     A7 04 68 FC | 	wrlong	#2, fp
1f83c     1C 4E 05 F1 | 	add	fp, #28
1f840     A7 02 68 FC | 	wrlong	#1, fp
1f844     84 4E 05 F1 | 	add	fp, #132
1f848     A7 20 0A FB | 	rdlong	local02, fp wz
1f84c     58 1E 06 56 |  if_ne	mov	local01, #88
1f850     78 1E 06 A6 |  if_e	mov	local01, #120
1f854     7C 4E 85 F1 | 	sub	fp, #124
1f858     A7 1E 62 FC | 	wrlong	local01, fp
1f85c     40 4E 85 F1 | 	sub	fp, #64
1f860                 | LR__2763
1f860     10 4E 05 F1 | 	add	fp, #16
1f864     A7 1E 02 FB | 	rdlong	local01, fp
1f868     10 4E 85 F1 | 	sub	fp, #16
1f86c     23 1E 0E F2 | 	cmp	local01, #35 wz
1f870     3C 00 90 5D |  if_ne	jmp	#LR__2766
1f874     48 4E 05 F1 | 	add	fp, #72
1f878     A7 02 68 FC | 	wrlong	#1, fp
1f87c     C8 4E 05 F1 | 	add	fp, #200
1f880     A7 1E 0A FB | 	rdlong	local01, fp wz
1f884     10 4F 85 F1 | 	sub	fp, #272
1f888     18 00 90 AD |  if_e	jmp	#LR__2764
1f88c     10 4E 05 F1 | 	add	fp, #16
1f890     A7 CC 68 FC | 	wrlong	#102, fp
1f894     00 4F 05 F1 | 	add	fp, #256
1f898     A7 00 68 FC | 	wrlong	#0, fp
1f89c     10 4F 85 F1 | 	sub	fp, #272
1f8a0     0C 00 90 FD | 	jmp	#LR__2765
1f8a4                 | LR__2764
1f8a4     10 4F 05 F1 | 	add	fp, #272
1f8a8     A7 02 68 FC | 	wrlong	#1, fp
1f8ac     10 4F 85 F1 | 	sub	fp, #272
1f8b0                 | LR__2765
1f8b0                 | LR__2766
1f8b0     08 4E 05 F1 | 	add	fp, #8
1f8b4     A7 1E 02 FB | 	rdlong	local01, fp
1f8b8     1A 1E 46 F0 | 	shr	local01, #26
1f8bc     03 1E 06 F5 | 	and	local01, #3
1f8c0     5C 4E 05 F1 | 	add	fp, #92
1f8c4     A7 1E 62 FC | 	wrlong	local01, fp
1f8c8     58 4E 85 F1 | 	sub	fp, #88
1f8cc     A7 FA 01 FB | 	rdlong	result1, fp
1f8d0     0C 4E 85 F1 | 	sub	fp, #12
1f8d4     1F FA 4D F0 | 	shr	result1, #31 wz
1f8d8     20 00 90 AD |  if_e	jmp	#LR__2767
1f8dc     2C 4E 05 F1 | 	add	fp, #44
1f8e0     A7 5A 68 FC | 	wrlong	#45, fp
1f8e4     20 4E 85 F1 | 	sub	fp, #32
1f8e8     A7 FA 01 FB | 	rdlong	result1, fp
1f8ec     1F FA E5 F4 | 	bitnot	result1, #31
1f8f0     A7 FA 61 FC | 	wrlong	result1, fp
1f8f4     0C 4E 85 F1 | 	sub	fp, #12
1f8f8     3C 00 90 FD | 	jmp	#LR__2769
1f8fc                 | LR__2767
1f8fc     64 4E 05 F1 | 	add	fp, #100
1f900     A7 1E 02 FB | 	rdlong	local01, fp
1f904     64 4E 85 F1 | 	sub	fp, #100
1f908     01 1E 0E F2 | 	cmp	local01, #1 wz
1f90c     2C 4E 05 A1 |  if_e	add	fp, #44
1f910     A7 56 68 AC |  if_e	wrlong	#43, fp
1f914     2C 4E 85 A1 |  if_e	sub	fp, #44
1f918     1C 00 90 AD |  if_e	jmp	#LR__2768
1f91c     64 4E 05 F1 | 	add	fp, #100
1f920     A7 1E 02 FB | 	rdlong	local01, fp
1f924     64 4E 85 F1 | 	sub	fp, #100
1f928     02 1E 0E F2 | 	cmp	local01, #2 wz
1f92c     2C 4E 05 A1 |  if_e	add	fp, #44
1f930     A7 40 68 AC |  if_e	wrlong	#32, fp
1f934     2C 4E 85 A1 |  if_e	sub	fp, #44
1f938                 | LR__2768
1f938                 | LR__2769
1f938     08 4E 05 F1 | 	add	fp, #8
1f93c     A7 1E 02 FB | 	rdlong	local01, fp
1f940     18 1E 46 F0 | 	shr	local01, #24
1f944     03 1E 06 F5 | 	and	local01, #3
1f948     3C 4E 05 F1 | 	add	fp, #60
1f94c     A7 1E 62 FC | 	wrlong	local01, fp
1f950     00 1E 06 F6 | 	mov	local01, #0
1f954     18 4E 85 F1 | 	sub	fp, #24
1f958     A7 22 0A FB | 	rdlong	local03, fp wz
1f95c     2C 4E 85 F1 | 	sub	fp, #44
1f960     18 00 90 5D |  if_ne	jmp	#LR__2770
1f964     1C 4E 05 F1 | 	add	fp, #28
1f968     A7 24 02 FB | 	rdlong	local04, fp
1f96c     1C 4E 85 F1 | 	sub	fp, #28
1f970     12 27 02 F6 | 	mov	local05, local04
1f974     0A 26 0E F2 | 	cmp	local05, #10 wz
1f978     04 00 90 AD |  if_e	jmp	#LR__2771
1f97c                 | LR__2770
1f97c     01 1E 66 F5 | 	xor	local01, #1
1f980                 | LR__2771
1f980     3C 4E 05 F1 | 	add	fp, #60
1f984     A7 1E 62 FC | 	wrlong	local01, fp
1f988     3C 4E 85 F1 | 	sub	fp, #60
1f98c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f990     0C 01 90 AD |  if_e	jmp	#LR__2773
1f994     44 4E 05 F1 | 	add	fp, #68
1f998     A7 26 02 FB | 	rdlong	local05, fp
1f99c     44 4E 85 F1 | 	sub	fp, #68
1f9a0     13 23 02 F6 | 	mov	local03, local05
1f9a4     02 22 0E F2 | 	cmp	local03, #2 wz
1f9a8     F4 00 90 5D |  if_ne	jmp	#LR__2773
1f9ac     0C 4F 05 F1 | 	add	fp, #268
1f9b0     A7 28 02 FB | 	rdlong	local06, fp
1f9b4     0C 4F 85 F1 | 	sub	fp, #268
1f9b8     14 25 02 F6 | 	mov	local04, local06
1f9bc     02 24 0E F2 | 	cmp	local04, #2 wz
1f9c0     DC 00 90 AD |  if_e	jmp	#LR__2773
1f9c4     C0 4E 05 F1 | 	add	fp, #192
1f9c8     A7 12 02 FB | 	rdlong	arg01, fp
1f9cc     94 4E 85 F1 | 	sub	fp, #148
1f9d0     A7 14 02 FB | 	rdlong	arg02, fp
1f9d4     14 4E 05 F1 | 	add	fp, #20
1f9d8     A7 16 02 FB | 	rdlong	arg03, fp
1f9dc     40 4E 85 F1 | 	sub	fp, #64
1f9e0     30 44 B0 FD | 	call	#__system__emitsign_0435
1f9e4     14 4F 05 F1 | 	add	fp, #276
1f9e8     A7 FA 61 FC | 	wrlong	result1, fp
1f9ec     14 4F 85 F1 | 	sub	fp, #276
1f9f0     00 FA 55 F2 | 	cmps	result1, #0 wc
1f9f4     14 4F 05 C1 |  if_b	add	fp, #276
1f9f8     A7 FA 01 CB |  if_b	rdlong	result1, fp
1f9fc     14 4F 85 C1 |  if_b	sub	fp, #276
1fa00     6C 0B 90 CD |  if_b	jmp	#LR__2823
1fa04     C0 4E 05 F1 | 	add	fp, #192
1fa08     A7 1E 02 FB | 	rdlong	local01, fp
1fa0c     54 4E 05 F1 | 	add	fp, #84
1fa10     A7 26 02 FB | 	rdlong	local05, fp
1fa14     13 23 02 F6 | 	mov	local03, local05
1fa18     13 1F 02 F1 | 	add	local01, local05
1fa1c     54 4E 85 F1 | 	sub	fp, #84
1fa20     A7 1E 62 FC | 	wrlong	local01, fp
1fa24     58 4E 85 F1 | 	sub	fp, #88
1fa28     A7 1E 0A FB | 	rdlong	local01, fp wz
1fa2c     68 4E 85 F1 | 	sub	fp, #104
1fa30     60 00 90 AD |  if_e	jmp	#LR__2772
1fa34     68 4E 05 F1 | 	add	fp, #104
1fa38     A7 1E 02 FB | 	rdlong	local01, fp
1fa3c     AC 4E 05 F1 | 	add	fp, #172
1fa40     A7 22 02 FB | 	rdlong	local03, fp
1fa44     11 1F 82 F1 | 	sub	local01, local03
1fa48     AC 4E 85 F1 | 	sub	fp, #172
1fa4c     A7 1E 62 FC | 	wrlong	local01, fp
1fa50     68 4E 85 F1 | 	sub	fp, #104
1fa54     00 1E 56 F2 | 	cmps	local01, #0 wc
1fa58     68 4E 05 C1 |  if_b	add	fp, #104
1fa5c     A7 00 68 CC |  if_b	wrlong	#0, fp
1fa60     68 4E 85 C1 |  if_b	sub	fp, #104
1fa64     08 4E 05 F1 | 	add	fp, #8
1fa68     A7 1E 02 FB | 	rdlong	local01, fp
1fa6c     E8 1E 06 F4 | 	bitl	local01, #232
1fa70     A7 1E 62 FC | 	wrlong	local01, fp
1fa74     60 4E 05 F1 | 	add	fp, #96
1fa78     A7 26 02 FB | 	rdlong	local05, fp
1fa7c     13 23 02 F6 | 	mov	local03, local05
1fa80     08 22 66 F0 | 	shl	local03, #8
1fa84     11 1F 42 F5 | 	or	local01, local03
1fa88     60 4E 85 F1 | 	sub	fp, #96
1fa8c     A7 1E 62 FC | 	wrlong	local01, fp
1fa90     08 4E 85 F1 | 	sub	fp, #8
1fa94                 | LR__2772
1fa94     3C 4E 05 F1 | 	add	fp, #60
1fa98     A7 00 68 FC | 	wrlong	#0, fp
1fa9c     3C 4E 85 F1 | 	sub	fp, #60
1faa0                 | LR__2773
1faa0     0C 4E 05 F1 | 	add	fp, #12
1faa4     A7 12 02 FB | 	rdlong	arg01, fp
1faa8     0C 4E 85 F1 | 	sub	fp, #12
1faac     04 1F B0 FD | 	call	#__system____builtin_ilogb
1fab0     FF FF 3F FF 
1fab4     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1fab8     50 00 90 5D |  if_ne	jmp	#LR__2775
1fabc     2C 4E 05 F1 | 	add	fp, #44
1fac0     A7 1E 0A FB | 	rdlong	local01, fp wz
1fac4     2C 4E 85 F1 | 	sub	fp, #44
1fac8     24 00 90 AD |  if_e	jmp	#LR__2774
1facc     C0 4E 05 F1 | 	add	fp, #192
1fad0     A7 20 02 FB | 	rdlong	local02, fp
1fad4     10 23 02 F6 | 	mov	local03, local02
1fad8     01 22 06 F1 | 	add	local03, #1
1fadc     A7 22 62 FC | 	wrlong	local03, fp
1fae0     94 4E 85 F1 | 	sub	fp, #148
1fae4     A7 24 02 FB | 	rdlong	local04, fp
1fae8     2C 4E 85 F1 | 	sub	fp, #44
1faec     10 25 42 FC | 	wrbyte	local04, local02
1faf0                 | LR__2774
1faf0     C0 4E 05 F1 | 	add	fp, #192
1faf4     A7 12 02 FB | 	rdlong	arg01, fp
1faf8     C0 4E 85 F1 | 	sub	fp, #192
1fafc     6D 01 00 FF 
1fb00     EA 14 06 F6 | 	mov	arg02, ##@LR__4711
1fb04     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1fb08     A4 08 90 FD | 	jmp	#LR__2811
1fb0c                 | LR__2775
1fb0c     0C 4E 05 F1 | 	add	fp, #12
1fb10     A7 20 02 FB | 	rdlong	local02, fp
1fb14     0C 4E 85 F1 | 	sub	fp, #12
1fb18     10 13 02 F6 | 	mov	arg01, local02
1fb1c     94 1E B0 FD | 	call	#__system____builtin_ilogb
1fb20     00 00 40 FF 
1fb24     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1fb28     50 00 90 5D |  if_ne	jmp	#LR__2777
1fb2c     2C 4E 05 F1 | 	add	fp, #44
1fb30     A7 1E 0A FB | 	rdlong	local01, fp wz
1fb34     2C 4E 85 F1 | 	sub	fp, #44
1fb38     24 00 90 AD |  if_e	jmp	#LR__2776
1fb3c     C0 4E 05 F1 | 	add	fp, #192
1fb40     A7 20 02 FB | 	rdlong	local02, fp
1fb44     10 23 02 F6 | 	mov	local03, local02
1fb48     01 22 06 F1 | 	add	local03, #1
1fb4c     A7 22 62 FC | 	wrlong	local03, fp
1fb50     94 4E 85 F1 | 	sub	fp, #148
1fb54     A7 24 02 FB | 	rdlong	local04, fp
1fb58     2C 4E 85 F1 | 	sub	fp, #44
1fb5c     10 25 42 FC | 	wrbyte	local04, local02
1fb60                 | LR__2776
1fb60     C0 4E 05 F1 | 	add	fp, #192
1fb64     A7 12 02 FB | 	rdlong	arg01, fp
1fb68     C0 4E 85 F1 | 	sub	fp, #192
1fb6c     6D 01 00 FF 
1fb70     EE 14 06 F6 | 	mov	arg02, ##@LR__4712
1fb74     74 E9 BF FD | 	call	#__system____builtin_strcpy
1fb78     34 08 90 FD | 	jmp	#LR__2811
1fb7c                 | LR__2777
1fb7c     10 4E 05 F1 | 	add	fp, #16
1fb80     A7 1E 02 FB | 	rdlong	local01, fp
1fb84     10 4E 85 F1 | 	sub	fp, #16
1fb88     67 1E 0E F2 | 	cmp	local01, #103 wz
1fb8c     10 4E 05 51 |  if_ne	add	fp, #16
1fb90     A7 22 02 5B |  if_ne	rdlong	local03, fp
1fb94     10 4E 85 51 |  if_ne	sub	fp, #16
1fb98     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1fb9c     94 01 90 5D |  if_ne	jmp	#LR__2782
1fba0     0C 4E 05 F1 | 	add	fp, #12
1fba4     A7 12 02 FB | 	rdlong	arg01, fp
1fba8     08 4E 05 F1 | 	add	fp, #8
1fbac     A7 14 02 F6 | 	mov	arg02, fp
1fbb0     0C 4E 05 F1 | 	add	fp, #12
1fbb4     A7 16 02 F6 | 	mov	arg03, fp
1fbb8     98 4E 05 F1 | 	add	fp, #152
1fbbc     A7 18 02 FB | 	rdlong	arg04, fp
1fbc0     9C 4E 85 F1 | 	sub	fp, #156
1fbc4     A7 1A 02 FB | 	rdlong	arg05, fp
1fbc8     1C 4E 85 F1 | 	sub	fp, #28
1fbcc     50 40 B0 FD | 	call	#__system__disassemble_0433
1fbd0     10 4E 05 F1 | 	add	fp, #16
1fbd4     A7 1E 02 FB | 	rdlong	local01, fp
1fbd8     10 4E 85 F1 | 	sub	fp, #16
1fbdc     23 1E 0E F2 | 	cmp	local01, #35 wz
1fbe0     A0 00 90 5D |  if_ne	jmp	#LR__2779
1fbe4     20 4E 05 F1 | 	add	fp, #32
1fbe8     A7 1E 02 FB | 	rdlong	local01, fp
1fbec     98 4E 05 F1 | 	add	fp, #152
1fbf0     A7 22 02 FB | 	rdlong	local03, fp
1fbf4     B8 4E 85 F1 | 	sub	fp, #184
1fbf8     11 1F 5A F2 | 	cmps	local01, local03 wcz
1fbfc     24 4E 05 11 |  if_a	add	fp, #36
1fc00     A7 02 68 1C |  if_a	wrlong	#1, fp
1fc04     24 4E 85 11 |  if_a	sub	fp, #36
1fc08     A4 01 90 1D |  if_a	jmp	#LR__2785
1fc0c     20 4E 05 F1 | 	add	fp, #32
1fc10     A7 1E 02 FB | 	rdlong	local01, fp
1fc14     20 4E 85 F1 | 	sub	fp, #32
1fc18     00 1E 56 F2 | 	cmps	local01, #0 wc
1fc1c     2C 00 90 3D |  if_ae	jmp	#LR__2778
1fc20     B8 4E 05 F1 | 	add	fp, #184
1fc24     A7 1E 02 FB | 	rdlong	local01, fp
1fc28     0F 1F 62 F6 | 	neg	local01, local01
1fc2c     98 4E 85 F1 | 	sub	fp, #152
1fc30     A7 22 02 FB | 	rdlong	local03, fp
1fc34     20 4E 85 F1 | 	sub	fp, #32
1fc38     0F 23 5A F2 | 	cmps	local03, local01 wcz
1fc3c     24 4E 05 E1 |  if_be	add	fp, #36
1fc40     A7 02 68 EC |  if_be	wrlong	#1, fp
1fc44     24 4E 85 E1 |  if_be	sub	fp, #36
1fc48     64 01 90 FD | 	jmp	#LR__2785
1fc4c                 | LR__2778
1fc4c     20 4E 05 F1 | 	add	fp, #32
1fc50     A7 1E 02 FB | 	rdlong	local01, fp
1fc54     20 4E 85 F1 | 	sub	fp, #32
1fc58     01 1E 56 F2 | 	cmps	local01, #1 wc
1fc5c     50 01 90 CD |  if_b	jmp	#LR__2785
1fc60     B8 4E 05 F1 | 	add	fp, #184
1fc64     A7 1E 02 FB | 	rdlong	local01, fp
1fc68     98 4E 85 F1 | 	sub	fp, #152
1fc6c     A7 22 02 FB | 	rdlong	local03, fp
1fc70     11 1F 82 F1 | 	sub	local01, local03
1fc74     98 4E 05 F1 | 	add	fp, #152
1fc78     A7 1E 62 FC | 	wrlong	local01, fp
1fc7c     B8 4E 85 F1 | 	sub	fp, #184
1fc80     2C 01 90 FD | 	jmp	#LR__2785
1fc84                 | LR__2779
1fc84     00 1E 06 F6 | 	mov	local01, #0
1fc88     08 4E 05 F1 | 	add	fp, #8
1fc8c     A7 20 02 FB | 	rdlong	local02, fp
1fc90     1C 20 46 F0 | 	shr	local02, #28
1fc94     01 20 0E F5 | 	and	local02, #1 wz
1fc98     01 1E 06 A6 |  if_e	mov	local01, #1
1fc9c     2C 4E 05 F1 | 	add	fp, #44
1fca0     A7 1E 62 FC | 	wrlong	local01, fp
1fca4     14 4E 85 F1 | 	sub	fp, #20
1fca8     A7 1E 02 FB | 	rdlong	local01, fp
1fcac     98 4E 05 F1 | 	add	fp, #152
1fcb0     A7 22 02 FB | 	rdlong	local03, fp
1fcb4     B8 4E 85 F1 | 	sub	fp, #184
1fcb8     11 1F 52 F2 | 	cmps	local01, local03 wc
1fcbc     18 00 90 3D |  if_ae	jmp	#LR__2780
1fcc0     20 4E 05 F1 | 	add	fp, #32
1fcc4     A7 24 02 FB | 	rdlong	local04, fp
1fcc8     20 4E 85 F1 | 	sub	fp, #32
1fccc     FF FF 7F FF 
1fcd0     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1fcd4     10 00 90 3D |  if_ae	jmp	#LR__2781
1fcd8                 | LR__2780
1fcd8     24 4E 05 F1 | 	add	fp, #36
1fcdc     A7 02 68 FC | 	wrlong	#1, fp
1fce0     24 4E 85 F1 | 	sub	fp, #36
1fce4     C8 00 90 FD | 	jmp	#LR__2785
1fce8                 | LR__2781
1fce8     B8 4E 05 F1 | 	add	fp, #184
1fcec     A7 24 02 FB | 	rdlong	local04, fp
1fcf0     98 4E 85 F1 | 	sub	fp, #152
1fcf4     A7 22 02 FB | 	rdlong	local03, fp
1fcf8     11 25 82 F1 | 	sub	local04, local03
1fcfc     98 4E 05 F1 | 	add	fp, #152
1fd00     A7 24 62 FC | 	wrlong	local04, fp
1fd04     AC 4E 85 F1 | 	sub	fp, #172
1fd08     A7 12 02 FB | 	rdlong	arg01, fp
1fd0c     08 4E 05 F1 | 	add	fp, #8
1fd10     A7 14 02 F6 | 	mov	arg02, fp
1fd14     0C 4E 05 F1 | 	add	fp, #12
1fd18     A7 16 02 F6 | 	mov	arg03, fp
1fd1c     12 19 62 F6 | 	neg	arg04, local04
1fd20     04 4E 85 F1 | 	sub	fp, #4
1fd24     A7 1A 02 FB | 	rdlong	arg05, fp
1fd28     1C 4E 85 F1 | 	sub	fp, #28
1fd2c     F0 3E B0 FD | 	call	#__system__disassemble_0433
1fd30     7C 00 90 FD | 	jmp	#LR__2785
1fd34                 | LR__2782
1fd34     24 4E 05 F1 | 	add	fp, #36
1fd38     A7 1E 0A FB | 	rdlong	local01, fp wz
1fd3c     24 4E 85 F1 | 	sub	fp, #36
1fd40     34 00 90 AD |  if_e	jmp	#LR__2783
1fd44     0C 4E 05 F1 | 	add	fp, #12
1fd48     A7 12 02 FB | 	rdlong	arg01, fp
1fd4c     08 4E 05 F1 | 	add	fp, #8
1fd50     A7 14 02 F6 | 	mov	arg02, fp
1fd54     0C 4E 05 F1 | 	add	fp, #12
1fd58     A7 16 02 F6 | 	mov	arg03, fp
1fd5c     98 4E 05 F1 | 	add	fp, #152
1fd60     A7 18 02 FB | 	rdlong	arg04, fp
1fd64     9C 4E 85 F1 | 	sub	fp, #156
1fd68     A7 1A 02 FB | 	rdlong	arg05, fp
1fd6c     1C 4E 85 F1 | 	sub	fp, #28
1fd70     AC 3E B0 FD | 	call	#__system__disassemble_0433
1fd74     38 00 90 FD | 	jmp	#LR__2784
1fd78                 | LR__2783
1fd78     0C 4E 05 F1 | 	add	fp, #12
1fd7c     A7 12 02 FB | 	rdlong	arg01, fp
1fd80     08 4E 05 F1 | 	add	fp, #8
1fd84     A7 14 02 F6 | 	mov	arg02, fp
1fd88     0C 4E 05 F1 | 	add	fp, #12
1fd8c     A7 16 02 F6 | 	mov	arg03, fp
1fd90     98 4E 05 F1 | 	add	fp, #152
1fd94     A7 24 02 FB | 	rdlong	local04, fp
1fd98     01 24 06 F1 | 	add	local04, #1
1fd9c     12 19 62 F6 | 	neg	arg04, local04
1fda0     9C 4E 85 F1 | 	sub	fp, #156
1fda4     A7 1A 02 FB | 	rdlong	arg05, fp
1fda8     1C 4E 85 F1 | 	sub	fp, #28
1fdac     70 3E B0 FD | 	call	#__system__disassemble_0433
1fdb0                 | LR__2784
1fdb0                 | LR__2785
1fdb0     1C 4E 05 F1 | 	add	fp, #28
1fdb4     A7 1E 02 FB | 	rdlong	local01, fp
1fdb8     1C 4E 85 F1 | 	sub	fp, #28
1fdbc     02 1E 0E F2 | 	cmp	local01, #2 wz
1fdc0     4C 00 90 5D |  if_ne	jmp	#LR__2788
1fdc4     1C 4E 05 F1 | 	add	fp, #28
1fdc8     A7 20 68 FC | 	wrlong	#16, fp
1fdcc     1C 4E 85 F1 | 	sub	fp, #28
1fdd0                 | LR__2786
1fdd0     14 4E 05 F1 | 	add	fp, #20
1fdd4     A7 1E 0A FB | 	rdlong	local01, fp wz
1fdd8     14 4E 85 F1 | 	sub	fp, #20
1fddc     30 00 90 AD |  if_e	jmp	#LR__2787
1fde0     14 4E 05 F1 | 	add	fp, #20
1fde4     A7 22 02 FB | 	rdlong	local03, fp
1fde8     14 4E 85 F1 | 	sub	fp, #20
1fdec     00 80 00 FF 
1fdf0     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1fdf4     18 00 90 3D |  if_ae	jmp	#LR__2787
1fdf8     14 4E 05 F1 | 	add	fp, #20
1fdfc     A7 1E 02 FB | 	rdlong	local01, fp
1fe00     01 1E 66 F0 | 	shl	local01, #1
1fe04     A7 1E 62 FC | 	wrlong	local01, fp
1fe08     14 4E 85 F1 | 	sub	fp, #20
1fe0c     C0 FF 9F FD | 	jmp	#LR__2786
1fe10                 | LR__2787
1fe10                 | LR__2788
1fe10     70 4E 05 F1 | 	add	fp, #112
1fe14     A7 12 02 F6 | 	mov	arg01, fp
1fe18     5C 4E 85 F1 | 	sub	fp, #92
1fe1c     A7 14 02 FB | 	rdlong	arg02, fp
1fe20     08 4E 05 F1 | 	add	fp, #8
1fe24     A7 16 02 FB | 	rdlong	arg03, fp
1fe28     A0 4E 05 F1 | 	add	fp, #160
1fe2c     A7 1A 02 FB | 	rdlong	arg05, fp
1fe30     BC 4E 85 F1 | 	sub	fp, #188
1fe34     01 18 06 F6 | 	mov	arg04, #1
1fe38     70 3D B0 FD | 	call	#__system___uitoa
1fe3c     58 4E 05 F1 | 	add	fp, #88
1fe40     A7 FA 61 FC | 	wrlong	result1, fp
1fe44     38 4E 85 F1 | 	sub	fp, #56
1fe48     A7 1E 02 FB | 	rdlong	local01, fp
1fe4c     20 4E 85 F1 | 	sub	fp, #32
1fe50     00 1E 56 F2 | 	cmps	local01, #0 wc
1fe54     50 00 90 3D |  if_ae	jmp	#LR__2789
1fe58     60 4E 05 F1 | 	add	fp, #96
1fe5c     A7 5A 68 FC | 	wrlong	#45, fp
1fe60     50 4E 05 F1 | 	add	fp, #80
1fe64     A7 12 02 F6 | 	mov	arg01, fp
1fe68     90 4E 85 F1 | 	sub	fp, #144
1fe6c     A7 22 02 FB | 	rdlong	local03, fp
1fe70     11 15 62 F6 | 	neg	arg02, local03
1fe74     18 4E 05 F1 | 	add	fp, #24
1fe78     A7 18 02 FB | 	rdlong	arg04, fp
1fe7c     84 4E 05 F1 | 	add	fp, #132
1fe80     A7 28 02 FB | 	rdlong	local06, fp
1fe84     BC 4E 85 F1 | 	sub	fp, #188
1fe88     14 25 02 F6 | 	mov	local04, local06
1fe8c     0A 16 06 F6 | 	mov	arg03, #10
1fe90     12 1B 02 F6 | 	mov	arg05, local04
1fe94     14 3D B0 FD | 	call	#__system___uitoa
1fe98     5C 4E 05 F1 | 	add	fp, #92
1fe9c     A7 FA 61 FC | 	wrlong	result1, fp
1fea0     5C 4E 85 F1 | 	sub	fp, #92
1fea4     48 00 90 FD | 	jmp	#LR__2790
1fea8                 | LR__2789
1fea8     60 4E 05 F1 | 	add	fp, #96
1feac     A7 56 68 FC | 	wrlong	#43, fp
1feb0     50 4E 05 F1 | 	add	fp, #80
1feb4     A7 12 02 F6 | 	mov	arg01, fp
1feb8     90 4E 85 F1 | 	sub	fp, #144
1febc     A7 14 02 FB | 	rdlong	arg02, fp
1fec0     18 4E 05 F1 | 	add	fp, #24
1fec4     A7 18 02 FB | 	rdlong	arg04, fp
1fec8     84 4E 05 F1 | 	add	fp, #132
1fecc     A7 28 02 FB | 	rdlong	local06, fp
1fed0     BC 4E 85 F1 | 	sub	fp, #188
1fed4     14 25 02 F6 | 	mov	local04, local06
1fed8     0A 16 06 F6 | 	mov	arg03, #10
1fedc     12 1B 02 F6 | 	mov	arg05, local04
1fee0     C8 3C B0 FD | 	call	#__system___uitoa
1fee4     5C 4E 05 F1 | 	add	fp, #92
1fee8     A7 FA 61 FC | 	wrlong	result1, fp
1feec     5C 4E 85 F1 | 	sub	fp, #92
1fef0                 | LR__2790
1fef0     24 4E 05 F1 | 	add	fp, #36
1fef4     A7 1E 0A FB | 	rdlong	local01, fp wz
1fef8     24 4E 85 F1 | 	sub	fp, #36
1fefc     2C 00 90 AD |  if_e	jmp	#LR__2791
1ff00     50 4E 05 F1 | 	add	fp, #80
1ff04     A7 00 68 FC | 	wrlong	#0, fp
1ff08     04 4E 85 F1 | 	sub	fp, #4
1ff0c     A7 00 68 FC | 	wrlong	#0, fp
1ff10     6C 4E 05 F1 | 	add	fp, #108
1ff14     A7 1E 02 FB | 	rdlong	local01, fp
1ff18     01 1E 06 F1 | 	add	local01, #1
1ff1c     64 4E 85 F1 | 	sub	fp, #100
1ff20     A7 1E 62 FC | 	wrlong	local01, fp
1ff24     54 4E 85 F1 | 	sub	fp, #84
1ff28     88 00 90 FD | 	jmp	#LR__2794
1ff2c                 | LR__2791
1ff2c     20 4E 05 F1 | 	add	fp, #32
1ff30     A7 1E 02 FB | 	rdlong	local01, fp
1ff34     20 4E 85 F1 | 	sub	fp, #32
1ff38     00 1E 56 F2 | 	cmps	local01, #0 wc
1ff3c     40 00 90 3D |  if_ae	jmp	#LR__2792
1ff40     20 4E 05 F1 | 	add	fp, #32
1ff44     A7 20 02 FB | 	rdlong	local02, fp
1ff48     30 4E 05 F1 | 	add	fp, #48
1ff4c     A7 20 62 FC | 	wrlong	local02, fp
1ff50     04 4E 85 F1 | 	sub	fp, #4
1ff54     A7 20 62 FC | 	wrlong	local02, fp
1ff58     2C 4E 85 F1 | 	sub	fp, #44
1ff5c     A7 1E 02 FB | 	rdlong	local01, fp
1ff60     98 4E 05 F1 | 	add	fp, #152
1ff64     A7 22 02 FB | 	rdlong	local03, fp
1ff68     11 1F 02 F1 | 	add	local01, local03
1ff6c     01 1E 06 F1 | 	add	local01, #1
1ff70     64 4E 85 F1 | 	sub	fp, #100
1ff74     A7 1E 62 FC | 	wrlong	local01, fp
1ff78     54 4E 85 F1 | 	sub	fp, #84
1ff7c     34 00 90 FD | 	jmp	#LR__2793
1ff80                 | LR__2792
1ff80     4C 4E 05 F1 | 	add	fp, #76
1ff84     A7 00 68 FC | 	wrlong	#0, fp
1ff88     2C 4E 85 F1 | 	sub	fp, #44
1ff8c     A7 1E 02 FB | 	rdlong	local01, fp
1ff90     30 4E 05 F1 | 	add	fp, #48
1ff94     A7 1E 62 FC | 	wrlong	local01, fp
1ff98     68 4E 05 F1 | 	add	fp, #104
1ff9c     A7 22 02 FB | 	rdlong	local03, fp
1ffa0     11 1F 02 F1 | 	add	local01, local03
1ffa4     01 1E 06 F1 | 	add	local01, #1
1ffa8     64 4E 85 F1 | 	sub	fp, #100
1ffac     A7 1E 62 FC | 	wrlong	local01, fp
1ffb0     54 4E 85 F1 | 	sub	fp, #84
1ffb4                 | LR__2793
1ffb4                 | LR__2794
1ffb4     54 4E 05 F1 | 	add	fp, #84
1ffb8     A7 1E 02 FB | 	rdlong	local01, fp
1ffbc     08 4E 85 F1 | 	sub	fp, #8
1ffc0     A7 22 02 FB | 	rdlong	local03, fp
1ffc4     11 1F 82 F1 | 	sub	local01, local03
1ffc8     01 1E 06 F1 | 	add	local01, #1
1ffcc     24 4E 85 F1 | 	sub	fp, #36
1ffd0     A7 1E 62 FC | 	wrlong	local01, fp
1ffd4     04 4E 05 F1 | 	add	fp, #4
1ffd8     A7 1E 0A FB | 	rdlong	local01, fp wz
1ffdc     2C 4E 85 F1 | 	sub	fp, #44
1ffe0     28 4E 05 51 |  if_ne	add	fp, #40
1ffe4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1ffe8     01 22 06 51 |  if_ne	add	local03, #1
1ffec     A7 22 62 5C |  if_ne	wrlong	local03, fp
1fff0     28 4E 85 51 |  if_ne	sub	fp, #40
1fff4     1C 4E 05 F1 | 	add	fp, #28
1fff8     A7 1E 02 FB | 	rdlong	local01, fp
1fffc     1C 4E 85 F1 | 	sub	fp, #28
20000     10 1E 0E F2 | 	cmp	local01, #16 wz
20004     28 4E 05 A1 |  if_e	add	fp, #40
20008     A7 1E 02 AB |  if_e	rdlong	local01, fp
2000c     02 1E 06 A1 |  if_e	add	local01, #2
20010     A7 1E 62 AC |  if_e	wrlong	local01, fp
20014     28 4E 85 A1 |  if_e	sub	fp, #40
20018     24 4E 05 F1 | 	add	fp, #36
2001c     A7 1E 0A FB | 	rdlong	local01, fp wz
20020     24 4E 85 F1 | 	sub	fp, #36
20024     28 00 90 AD |  if_e	jmp	#LR__2795
20028     28 4E 05 F1 | 	add	fp, #40
2002c     A7 1E 02 FB | 	rdlong	local01, fp
20030     02 22 06 F6 | 	mov	local03, #2
20034     34 4E 05 F1 | 	add	fp, #52
20038     A7 26 02 FB | 	rdlong	local05, fp
2003c     13 23 02 F1 | 	add	local03, local05
20040     11 1F 02 F1 | 	add	local01, local03
20044     34 4E 85 F1 | 	sub	fp, #52
20048     A7 1E 62 FC | 	wrlong	local01, fp
2004c     28 4E 85 F1 | 	sub	fp, #40
20050                 | LR__2795
20050     28 4E 05 F1 | 	add	fp, #40
20054     A7 1E 02 FB | 	rdlong	local01, fp
20058     28 4E 85 F1 | 	sub	fp, #40
2005c     41 1E 56 F2 | 	cmps	local01, #65 wc
20060     01 FA 65 36 |  if_ae	neg	result1, #1
20064     08 05 90 3D |  if_ae	jmp	#LR__2823
20068     3C 4E 05 F1 | 	add	fp, #60
2006c     A7 1E 0A FB | 	rdlong	local01, fp wz
20070     3C 4E 85 F1 | 	sub	fp, #60
20074     60 00 90 AD |  if_e	jmp	#LR__2796
20078     C0 4E 05 F1 | 	add	fp, #192
2007c     A7 12 02 FB | 	rdlong	arg01, fp
20080     94 4E 85 F1 | 	sub	fp, #148
20084     A7 14 02 FB | 	rdlong	arg02, fp
20088     14 4E 05 F1 | 	add	fp, #20
2008c     A7 16 02 FB | 	rdlong	arg03, fp
20090     40 4E 85 F1 | 	sub	fp, #64
20094     7C 3D B0 FD | 	call	#__system__emitsign_0435
20098     18 4F 05 F1 | 	add	fp, #280
2009c     A7 FA 61 FC | 	wrlong	result1, fp
200a0     18 4F 85 F1 | 	sub	fp, #280
200a4     00 FA 55 F2 | 	cmps	result1, #0 wc
200a8     18 4F 05 C1 |  if_b	add	fp, #280
200ac     A7 FA 01 CB |  if_b	rdlong	result1, fp
200b0     18 4F 85 C1 |  if_b	sub	fp, #280
200b4     B8 04 90 CD |  if_b	jmp	#LR__2823
200b8     C0 4E 05 F1 | 	add	fp, #192
200bc     A7 1E 02 FB | 	rdlong	local01, fp
200c0     58 4E 05 F1 | 	add	fp, #88
200c4     A7 22 02 FB | 	rdlong	local03, fp
200c8     11 1F 02 F1 | 	add	local01, local03
200cc     58 4E 85 F1 | 	sub	fp, #88
200d0     A7 1E 62 FC | 	wrlong	local01, fp
200d4     C0 4E 85 F1 | 	sub	fp, #192
200d8                 | LR__2796
200d8     4C 4E 05 F1 | 	add	fp, #76
200dc     A7 1E 02 FB | 	rdlong	local01, fp
200e0     34 4E 85 F1 | 	sub	fp, #52
200e4     A7 1E 62 FC | 	wrlong	local01, fp
200e8     18 4E 85 F1 | 	sub	fp, #24
200ec     97 9E 48 FB | 	callpa	#(@LR__2802-@LR__2797)>>2,fcache_load_ptr_
200f0                 | LR__2797
200f0     18 4E 05 F1 | 	add	fp, #24
200f4     A7 20 02 FB | 	rdlong	local02, fp
200f8     3C 4E 05 F1 | 	add	fp, #60
200fc     A7 26 02 FB | 	rdlong	local05, fp
20100     54 4E 85 F1 | 	sub	fp, #84
20104     13 21 52 F2 | 	cmps	local02, local05 wc
20108     20 01 90 3D |  if_ae	jmp	#LR__2803
2010c     18 4E 05 F1 | 	add	fp, #24
20110     A7 28 02 FB | 	rdlong	local06, fp
20114     18 4E 85 F1 | 	sub	fp, #24
20118     00 28 56 F2 | 	cmps	local06, #0 wc
2011c     58 00 90 CD |  if_b	jmp	#LR__2798
20120     18 4E 05 F1 | 	add	fp, #24
20124     A7 28 02 FB | 	rdlong	local06, fp
20128     40 4E 05 F1 | 	add	fp, #64
2012c     A7 2A 02 FB | 	rdlong	local07, fp
20130     58 4E 85 F1 | 	sub	fp, #88
20134     15 29 52 F2 | 	cmps	local06, local07 wc
20138     3C 00 90 3D |  if_ae	jmp	#LR__2798
2013c     C0 4E 05 F1 | 	add	fp, #192
20140     A7 2C 02 FB | 	rdlong	local08, fp
20144     16 2B 02 F6 | 	mov	local07, local08
20148     01 2A 06 F1 | 	add	local07, #1
2014c     A7 2A 62 FC | 	wrlong	local07, fp
20150     A8 4E 85 F1 | 	sub	fp, #168
20154     A7 2A 02 FB | 	rdlong	local07, fp
20158     15 2F 02 F6 | 	mov	local09, local07
2015c     58 4E 05 F1 | 	add	fp, #88
20160     A7 30 02 F6 | 	mov	local10, fp
20164     A7 2E 02 F1 | 	add	local09, fp
20168     17 33 C2 FA | 	rdbyte	local11, local09
2016c     16 33 42 FC | 	wrbyte	local11, local08
20170     70 4E 85 F1 | 	sub	fp, #112
20174     20 00 90 FD | 	jmp	#LR__2799
20178                 | LR__2798
20178     C0 4E 05 F1 | 	add	fp, #192
2017c     A7 2C 02 FB | 	rdlong	local08, fp
20180     16 2F 02 F6 | 	mov	local09, local08
20184     01 2E 06 F1 | 	add	local09, #1
20188     A7 2E 62 FC | 	wrlong	local09, fp
2018c     C0 4E 85 F1 | 	sub	fp, #192
20190     30 2E 06 F6 | 	mov	local09, #48
20194     16 61 48 FC | 	wrbyte	#48, local08
20198                 | LR__2799
20198     18 4E 05 F1 | 	add	fp, #24
2019c     A7 28 02 FB | 	rdlong	local06, fp
201a0     38 4E 05 F1 | 	add	fp, #56
201a4     A7 34 02 FB | 	rdlong	local12, fp
201a8     50 4E 85 F1 | 	sub	fp, #80
201ac     1A 29 0A F2 | 	cmp	local06, local12 wz
201b0     5C 00 90 5D |  if_ne	jmp	#LR__2801
201b4     10 4F 05 F1 | 	add	fp, #272
201b8     A7 2A 02 FB | 	rdlong	local07, fp
201bc     10 4F 85 F1 | 	sub	fp, #272
201c0     15 2F 0A F6 | 	mov	local09, local07 wz
201c4     28 00 90 5D |  if_ne	jmp	#LR__2800
201c8     54 4E 05 F1 | 	add	fp, #84
201cc     A7 32 02 FB | 	rdlong	local11, fp
201d0     19 31 02 F6 | 	mov	local10, local11
201d4     01 30 86 F1 | 	sub	local10, #1
201d8     3C 4E 85 F1 | 	sub	fp, #60
201dc     A7 36 02 FB | 	rdlong	local13, fp
201e0     18 4E 85 F1 | 	sub	fp, #24
201e4     1B 39 02 F6 | 	mov	local14, local13
201e8     18 39 52 F2 | 	cmps	local14, local10 wc
201ec     20 00 90 3D |  if_ae	jmp	#LR__2801
201f0                 | LR__2800
201f0     C0 4E 05 F1 | 	add	fp, #192
201f4     A7 2C 02 FB | 	rdlong	local08, fp
201f8     16 35 02 F6 | 	mov	local12, local08
201fc     01 34 06 F1 | 	add	local12, #1
20200     A7 34 62 FC | 	wrlong	local12, fp
20204     C0 4E 85 F1 | 	sub	fp, #192
20208     2E 2E 06 F6 | 	mov	local09, #46
2020c     16 5D 48 FC | 	wrbyte	#46, local08
20210                 | LR__2801
20210     18 4E 05 F1 | 	add	fp, #24
20214     A7 3A 02 FB | 	rdlong	local15, fp
20218     1D 35 02 F6 | 	mov	local12, local15
2021c     01 34 06 F1 | 	add	local12, #1
20220     A7 34 62 FC | 	wrlong	local12, fp
20224     18 4E 85 F1 | 	sub	fp, #24
20228     C4 FE 9F FD | 	jmp	#LR__2797
2022c                 | LR__2802
2022c                 | LR__2803
2022c     34 4E 05 F1 | 	add	fp, #52
20230     A7 1E 0A FB | 	rdlong	local01, fp wz
20234     34 4E 85 F1 | 	sub	fp, #52
20238     A0 00 90 AD |  if_e	jmp	#LR__2807
2023c     C0 4E 05 F1 | 	add	fp, #192
20240     A7 1E 02 FB | 	rdlong	local01, fp
20244     01 1E 86 F1 | 	sub	local01, #1
20248     A7 1E 62 FC | 	wrlong	local01, fp
2024c     C0 4E 85 F1 | 	sub	fp, #192
20250     97 26 48 FB | 	callpa	#(@LR__2805-@LR__2804)>>2,fcache_load_ptr_
20254                 | LR__2804
20254     C0 4E 05 F1 | 	add	fp, #192
20258     A7 1E 02 FB | 	rdlong	local01, fp
2025c     04 4E 05 F1 | 	add	fp, #4
20260     A7 22 02 FB | 	rdlong	local03, fp
20264     C4 4E 85 F1 | 	sub	fp, #196
20268     11 1F 5A F2 | 	cmps	local01, local03 wcz
2026c     30 00 90 ED |  if_be	jmp	#LR__2806
20270     C0 4E 05 F1 | 	add	fp, #192
20274     A7 28 02 FB | 	rdlong	local06, fp
20278     C0 4E 85 F1 | 	sub	fp, #192
2027c     14 25 C2 FA | 	rdbyte	local04, local06
20280     30 24 0E F2 | 	cmp	local04, #48 wz
20284     18 00 90 5D |  if_ne	jmp	#LR__2806
20288     C0 4E 05 F1 | 	add	fp, #192
2028c     A7 1E 02 FB | 	rdlong	local01, fp
20290     01 1E 86 F1 | 	sub	local01, #1
20294     A7 1E 62 FC | 	wrlong	local01, fp
20298     C0 4E 85 F1 | 	sub	fp, #192
2029c     B4 FF 9F FD | 	jmp	#LR__2804
202a0                 | LR__2805
202a0                 | LR__2806
202a0     C0 4E 05 F1 | 	add	fp, #192
202a4     A7 20 02 FB | 	rdlong	local02, fp
202a8     C0 4E 85 F1 | 	sub	fp, #192
202ac     10 1F C2 FA | 	rdbyte	local01, local02
202b0     2E 1E 0E F2 | 	cmp	local01, #46 wz
202b4     C0 4E 05 A1 |  if_e	add	fp, #192
202b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
202bc     01 1E 86 A1 |  if_e	sub	local01, #1
202c0     A7 1E 62 AC |  if_e	wrlong	local01, fp
202c4     C0 4E 85 A1 |  if_e	sub	fp, #192
202c8     C0 4E 05 F1 | 	add	fp, #192
202cc     A7 22 02 FB | 	rdlong	local03, fp
202d0     01 22 06 F1 | 	add	local03, #1
202d4     A7 22 62 FC | 	wrlong	local03, fp
202d8     C0 4E 85 F1 | 	sub	fp, #192
202dc                 | LR__2807
202dc     24 4E 05 F1 | 	add	fp, #36
202e0     A7 1E 0A FB | 	rdlong	local01, fp wz
202e4     24 4E 85 F1 | 	sub	fp, #36
202e8     B4 00 90 AD |  if_e	jmp	#LR__2810
202ec     C0 4E 05 F1 | 	add	fp, #192
202f0     A7 20 02 FB | 	rdlong	local02, fp
202f4     10 23 02 F6 | 	mov	local03, local02
202f8     01 22 06 F1 | 	add	local03, #1
202fc     A7 22 62 FC | 	wrlong	local03, fp
20300     90 4E 85 F1 | 	sub	fp, #144
20304     A7 24 02 FB | 	rdlong	local04, fp
20308     10 25 42 FC | 	wrbyte	local04, local02
2030c     90 4E 05 F1 | 	add	fp, #144
20310     A7 20 02 FB | 	rdlong	local02, fp
20314     10 23 02 F6 | 	mov	local03, local02
20318     01 22 06 F1 | 	add	local03, #1
2031c     A7 22 62 FC | 	wrlong	local03, fp
20320     60 4E 85 F1 | 	sub	fp, #96
20324     A7 24 02 FB | 	rdlong	local04, fp
20328     10 25 42 FC | 	wrbyte	local04, local02
2032c     48 4E 85 F1 | 	sub	fp, #72
20330     A7 00 68 FC | 	wrlong	#0, fp
20334     18 4E 85 F1 | 	sub	fp, #24
20338                 | LR__2808
20338     18 4E 05 F1 | 	add	fp, #24
2033c     A7 20 02 FB | 	rdlong	local02, fp
20340     44 4E 05 F1 | 	add	fp, #68
20344     A7 26 02 FB | 	rdlong	local05, fp
20348     5C 4E 85 F1 | 	sub	fp, #92
2034c     13 21 52 F2 | 	cmps	local02, local05 wc
20350     4C 00 90 3D |  if_ae	jmp	#LR__2809
20354     C0 4E 05 F1 | 	add	fp, #192
20358     A7 2C 02 FB | 	rdlong	local08, fp
2035c     16 35 02 F6 | 	mov	local12, local08
20360     01 34 06 F1 | 	add	local12, #1
20364     A7 34 62 FC | 	wrlong	local12, fp
20368     A8 4E 85 F1 | 	sub	fp, #168
2036c     A7 2A 02 FB | 	rdlong	local07, fp
20370     15 2F 02 F6 | 	mov	local09, local07
20374     98 4E 05 F1 | 	add	fp, #152
20378     A7 30 02 F6 | 	mov	local10, fp
2037c     A7 2E 02 F1 | 	add	local09, fp
20380     17 33 C2 FA | 	rdbyte	local11, local09
20384     16 33 42 FC | 	wrbyte	local11, local08
20388     98 4E 85 F1 | 	sub	fp, #152
2038c     A7 34 02 FB | 	rdlong	local12, fp
20390     01 34 06 F1 | 	add	local12, #1
20394     A7 34 62 FC | 	wrlong	local12, fp
20398     18 4E 85 F1 | 	sub	fp, #24
2039c     98 FF 9F FD | 	jmp	#LR__2808
203a0                 | LR__2809
203a0                 | LR__2810
203a0     C0 4E 05 F1 | 	add	fp, #192
203a4     A7 1E 02 FB | 	rdlong	local01, fp
203a8     C0 4E 85 F1 | 	sub	fp, #192
203ac     0F 01 48 FC | 	wrbyte	#0, local01
203b0                 | LR__2811
203b0     6C 4E 05 F1 | 	add	fp, #108
203b4     A7 1E 0A FB | 	rdlong	local01, fp wz
203b8     6C 4E 85 F1 | 	sub	fp, #108
203bc     90 01 90 AD |  if_e	jmp	#LR__2822
203c0     48 4E 05 F1 | 	add	fp, #72
203c4     A7 22 0A FB | 	rdlong	local03, fp wz
203c8     48 4E 85 F1 | 	sub	fp, #72
203cc     80 01 90 AD |  if_e	jmp	#LR__2822
203d0     C4 4E 05 F1 | 	add	fp, #196
203d4     A7 12 02 FB | 	rdlong	arg01, fp
203d8     C4 4E 85 F1 | 	sub	fp, #196
203dc     09 3D 02 F6 | 	mov	local16, arg01
203e0     97 06 48 FB | 	callpa	#(@LR__2813-@LR__2812)>>2,fcache_load_ptr_
203e4                 | LR__2812
203e4     1E FB C9 FA | 	rdbyte	result1, local16 wz
203e8     01 3C 06 51 |  if_ne	add	local16, #1
203ec     F4 FF 9F 5D |  if_ne	jmp	#LR__2812
203f0                 | LR__2813
203f0     09 3D 82 F1 | 	sub	local16, arg01
203f4     1E 25 02 F6 | 	mov	local04, local16
203f8     6C 4E 05 F1 | 	add	fp, #108
203fc     A7 28 02 FB | 	rdlong	local06, fp
20400     6C 4E 85 F1 | 	sub	fp, #108
20404     14 25 5A F2 | 	cmps	local04, local06 wcz
20408     44 01 90 ED |  if_be	jmp	#LR__2822
2040c     C4 4E 05 F1 | 	add	fp, #196
20410     A7 1E 02 FB | 	rdlong	local01, fp
20414     5C 4E 05 F1 | 	add	fp, #92
20418     A7 1E 62 FC | 	wrlong	local01, fp
2041c     FC 4E 85 F1 | 	sub	fp, #252
20420     A7 1E 0A FB | 	rdlong	local01, fp wz
20424     24 4E 85 F1 | 	sub	fp, #36
20428     20 00 90 AD |  if_e	jmp	#LR__2814
2042c     B8 4E 05 F1 | 	add	fp, #184
20430     A7 00 68 FC | 	wrlong	#0, fp
20434     4C 4E 85 F1 | 	sub	fp, #76
20438     A7 1E 02 FB | 	rdlong	local01, fp
2043c     B0 4E 05 F1 | 	add	fp, #176
20440     A7 1E 62 FC | 	wrlong	local01, fp
20444     1C 4F 85 F1 | 	sub	fp, #284
20448     24 00 90 FD | 	jmp	#LR__2815
2044c                 | LR__2814
2044c     6C 4E 05 F1 | 	add	fp, #108
20450     A7 1E 02 FB | 	rdlong	local01, fp
20454     01 1E 86 F1 | 	sub	local01, #1
20458     4C 4E 05 F1 | 	add	fp, #76
2045c     A7 22 02 FB | 	rdlong	local03, fp
20460     11 1F 82 F1 | 	sub	local01, local03
20464     64 4E 05 F1 | 	add	fp, #100
20468     A7 1E 62 FC | 	wrlong	local01, fp
2046c     1C 4F 85 F1 | 	sub	fp, #284
20470                 | LR__2815
20470     97 20 48 FB | 	callpa	#(@LR__2817-@LR__2816)>>2,fcache_load_ptr_
20474                 | LR__2816
20474     1C 4F 05 F1 | 	add	fp, #284
20478     A7 1E 0A FB | 	rdlong	local01, fp wz
2047c     1C 4F 85 F1 | 	sub	fp, #284
20480     30 00 90 AD |  if_e	jmp	#LR__2818
20484     20 4F 05 F1 | 	add	fp, #288
20488     A7 20 02 FB | 	rdlong	local02, fp
2048c     10 23 02 F6 | 	mov	local03, local02
20490     01 22 06 F1 | 	add	local03, #1
20494     A7 22 62 FC | 	wrlong	local03, fp
20498     10 55 48 FC | 	wrbyte	#42, local02
2049c     04 4E 85 F1 | 	sub	fp, #4
204a0     A7 1E 02 FB | 	rdlong	local01, fp
204a4     01 1E 86 F1 | 	sub	local01, #1
204a8     A7 1E 62 FC | 	wrlong	local01, fp
204ac     1C 4F 85 F1 | 	sub	fp, #284
204b0     C0 FF 9F FD | 	jmp	#LR__2816
204b4                 | LR__2817
204b4                 | LR__2818
204b4     B8 4E 05 F1 | 	add	fp, #184
204b8     A7 1E 0A FB | 	rdlong	local01, fp wz
204bc     B8 4E 85 F1 | 	sub	fp, #184
204c0     70 00 90 AD |  if_e	jmp	#LR__2821
204c4     20 4F 05 F1 | 	add	fp, #288
204c8     A7 20 02 FB | 	rdlong	local02, fp
204cc     10 23 02 F6 | 	mov	local03, local02
204d0     01 22 06 F1 | 	add	local03, #1
204d4     A7 22 62 FC | 	wrlong	local03, fp
204d8     10 5D 48 FC | 	wrbyte	#46, local02
204dc     04 4E 85 F1 | 	sub	fp, #4
204e0     A7 00 68 FC | 	wrlong	#0, fp
204e4     1C 4F 85 F1 | 	sub	fp, #284
204e8                 | LR__2819
204e8     1C 4F 05 F1 | 	add	fp, #284
204ec     A7 20 02 FB | 	rdlong	local02, fp
204f0     64 4E 85 F1 | 	sub	fp, #100
204f4     A7 26 02 FB | 	rdlong	local05, fp
204f8     B8 4E 85 F1 | 	sub	fp, #184
204fc     13 21 52 F2 | 	cmps	local02, local05 wc
20500     30 00 90 3D |  if_ae	jmp	#LR__2820
20504     20 4F 05 F1 | 	add	fp, #288
20508     A7 2C 02 FB | 	rdlong	local08, fp
2050c     16 35 02 F6 | 	mov	local12, local08
20510     01 34 06 F1 | 	add	local12, #1
20514     A7 34 62 FC | 	wrlong	local12, fp
20518     16 55 48 FC | 	wrbyte	#42, local08
2051c     04 4E 85 F1 | 	sub	fp, #4
20520     A7 34 02 FB | 	rdlong	local12, fp
20524     01 34 06 F1 | 	add	local12, #1
20528     A7 34 62 FC | 	wrlong	local12, fp
2052c     1C 4F 85 F1 | 	sub	fp, #284
20530     B4 FF 9F FD | 	jmp	#LR__2819
20534                 | LR__2820
20534                 | LR__2821
20534     20 4F 05 F1 | 	add	fp, #288
20538     A7 20 02 FB | 	rdlong	local02, fp
2053c     10 23 02 F6 | 	mov	local03, local02
20540     01 22 06 F1 | 	add	local03, #1
20544     A7 22 62 FC | 	wrlong	local03, fp
20548     20 4F 85 F1 | 	sub	fp, #288
2054c     10 01 48 FC | 	wrbyte	#0, local02
20550                 | LR__2822
20550     04 4E 05 F1 | 	add	fp, #4
20554     A7 12 02 FB | 	rdlong	arg01, fp
20558     04 4E 05 F1 | 	add	fp, #4
2055c     A7 14 02 FB | 	rdlong	arg02, fp
20560     BC 4E 05 F1 | 	add	fp, #188
20564     A7 16 02 FB | 	rdlong	arg03, fp
20568     C4 4E 85 F1 | 	sub	fp, #196
2056c     C4 EE BF FD | 	call	#__system___fmtstr
20570                 | LR__2823
20570     A7 F0 03 F6 | 	mov	ptra, fp
20574     B2 00 A0 FD | 	call	#popregs_
20578                 | __system___fmtfloat_ret
20578     2D 00 64 FD | 	ret
2057c                 | 
2057c                 | __system__Left_S
2057c     04 4A 05 F6 | 	mov	COUNT_, #4
20580     A8 00 A0 FD | 	call	#pushregs_
20584     09 1F 02 F6 | 	mov	local01, arg01
20588     0A 21 02 F6 | 	mov	local02, arg02
2058c     01 20 56 F2 | 	cmps	local02, #1 wc
20590     6D 01 00 CF 
20594     F2 FA 05 C6 |  if_b	mov	result1, ##@LR__4713
20598     5C 00 90 CD |  if_b	jmp	#LR__2833
2059c     0F 13 02 F6 | 	mov	arg01, local01
205a0     09 23 02 F6 | 	mov	local03, arg01
205a4     97 06 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
205a8                 | LR__2830
205a8     11 FB C9 FA | 	rdbyte	result1, local03 wz
205ac     01 22 06 51 |  if_ne	add	local03, #1
205b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2830
205b4                 | LR__2831
205b4     09 23 82 F1 | 	sub	local03, arg01
205b8     11 FB 01 F6 | 	mov	result1, local03
205bc     10 FB 59 F2 | 	cmps	result1, local02 wcz
205c0     0F FB 01 E6 |  if_be	mov	result1, local01
205c4     30 00 90 ED |  if_be	jmp	#LR__2833
205c8     10 13 02 F6 | 	mov	arg01, local02
205cc     02 12 06 F1 | 	add	arg01, #2
205d0     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
205d4     FD 24 0A F6 | 	mov	local04, result1 wz
205d8     18 00 90 AD |  if_e	jmp	#LR__2832
205dc     12 13 02 F6 | 	mov	arg01, local04
205e0     0F 15 02 F6 | 	mov	arg02, local01
205e4     10 17 02 F6 | 	mov	arg03, local02
205e8     6C DE BF FD | 	call	#__system____builtin_memmove
205ec     12 21 02 F1 | 	add	local02, local04
205f0     10 01 48 FC | 	wrbyte	#0, local02
205f4                 | LR__2832
205f4     12 FB 01 F6 | 	mov	result1, local04
205f8                 | LR__2833
205f8     A7 F0 03 F6 | 	mov	ptra, fp
205fc     B2 00 A0 FD | 	call	#popregs_
20600                 | __system__Left_S_ret
20600     2D 00 64 FD | 	ret
20604                 | 
20604                 | __system__Right_S
20604     05 4A 05 F6 | 	mov	COUNT_, #5
20608     A8 00 A0 FD | 	call	#pushregs_
2060c     09 1F 02 F6 | 	mov	local01, arg01
20610     0A 21 02 F6 | 	mov	local02, arg02
20614     01 20 56 F2 | 	cmps	local02, #1 wc
20618     6D 01 00 CF 
2061c     F3 FA 05 C6 |  if_b	mov	result1, ##@LR__4714
20620     64 00 90 CD |  if_b	jmp	#LR__2843
20624     0F 13 02 F6 | 	mov	arg01, local01
20628     09 23 02 F6 | 	mov	local03, arg01
2062c     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
20630                 | LR__2840
20630     11 FB C9 FA | 	rdbyte	result1, local03 wz
20634     01 22 06 51 |  if_ne	add	local03, #1
20638     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
2063c                 | LR__2841
2063c     09 23 82 F1 | 	sub	local03, arg01
20640     11 FB 01 F6 | 	mov	result1, local03
20644     FD 24 02 F6 | 	mov	local04, result1
20648     10 25 5A F2 | 	cmps	local04, local02 wcz
2064c     0F FB 01 E6 |  if_be	mov	result1, local01
20650     34 00 90 ED |  if_be	jmp	#LR__2843
20654     10 13 02 F6 | 	mov	arg01, local02
20658     02 12 06 F1 | 	add	arg01, #2
2065c     20 1D B0 FD | 	call	#__system___gc_alloc_managed
20660     FD 26 0A F6 | 	mov	local05, result1 wz
20664     1C 00 90 AD |  if_e	jmp	#LR__2842
20668     10 25 82 F1 | 	sub	local04, local02
2066c     0F 25 02 F1 | 	add	local04, local01
20670     01 20 06 F1 | 	add	local02, #1
20674     13 13 02 F6 | 	mov	arg01, local05
20678     12 15 02 F6 | 	mov	arg02, local04
2067c     10 17 02 F6 | 	mov	arg03, local02
20680     D4 DD BF FD | 	call	#__system____builtin_memmove
20684                 | LR__2842
20684     13 FB 01 F6 | 	mov	result1, local05
20688                 | LR__2843
20688     A7 F0 03 F6 | 	mov	ptra, fp
2068c     B2 00 A0 FD | 	call	#popregs_
20690                 | __system__Right_S_ret
20690     2D 00 64 FD | 	ret
20694                 | 
20694                 | __system__Mid_S
20694     05 4A 05 F6 | 	mov	COUNT_, #5
20698     A8 00 A0 FD | 	call	#pushregs_
2069c     09 1F 02 F6 | 	mov	local01, arg01
206a0     0A 21 02 F6 | 	mov	local02, arg02
206a4     01 16 56 F2 | 	cmps	arg03, #1 wc
206a8     6D 01 00 CF 
206ac     F4 FA 05 C6 |  if_b	mov	result1, ##@LR__4715
206b0     80 00 90 CD |  if_b	jmp	#LR__2853
206b4     01 20 86 F1 | 	sub	local02, #1
206b8     00 20 56 F3 | 	fges	local02, #0 wc
206bc     0F 13 02 F6 | 	mov	arg01, local01
206c0     09 23 02 F6 | 	mov	local03, arg01
206c4     97 06 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
206c8                 | LR__2850
206c8     11 FB C9 FA | 	rdbyte	result1, local03 wz
206cc     01 22 06 51 |  if_ne	add	local03, #1
206d0     F4 FF 9F 5D |  if_ne	jmp	#LR__2850
206d4                 | LR__2851
206d4     09 23 82 F1 | 	sub	local03, arg01
206d8     11 FB 01 F6 | 	mov	result1, local03
206dc     FD 14 02 F6 | 	mov	arg02, result1
206e0     10 15 52 F2 | 	cmps	arg02, local02 wc
206e4     6D 01 00 CF 
206e8     F5 FA 05 C6 |  if_b	mov	result1, ##@LR__4716
206ec     44 00 90 CD |  if_b	jmp	#LR__2853
206f0     0A 25 02 F6 | 	mov	local04, arg02
206f4     10 25 82 F1 | 	sub	local04, local02
206f8     0B 25 5A F2 | 	cmps	local04, arg03 wcz
206fc     0B 25 02 16 |  if_a	mov	local04, arg03
20700     12 13 02 F6 | 	mov	arg01, local04
20704     02 12 06 F1 | 	add	arg01, #2
20708     74 1C B0 FD | 	call	#__system___gc_alloc_managed
2070c     FD 26 0A F6 | 	mov	local05, result1 wz
20710     1C 00 90 AD |  if_e	jmp	#LR__2852
20714     0F 21 02 F1 | 	add	local02, local01
20718     13 13 02 F6 | 	mov	arg01, local05
2071c     10 15 02 F6 | 	mov	arg02, local02
20720     12 17 02 F6 | 	mov	arg03, local04
20724     30 DD BF FD | 	call	#__system____builtin_memmove
20728     13 25 02 F1 | 	add	local04, local05
2072c     12 01 48 FC | 	wrbyte	#0, local04
20730                 | LR__2852
20730     13 FB 01 F6 | 	mov	result1, local05
20734                 | LR__2853
20734     A7 F0 03 F6 | 	mov	ptra, fp
20738     B2 00 A0 FD | 	call	#popregs_
2073c                 | __system__Mid_S_ret
2073c     2D 00 64 FD | 	ret
20740                 | 
20740                 | __system__Chr_S
20740     01 4A 05 F6 | 	mov	COUNT_, #1
20744     A8 00 A0 FD | 	call	#pushregs_
20748     09 1F 02 F6 | 	mov	local01, arg01
2074c     03 12 06 F6 | 	mov	arg01, #3
20750     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
20754     00 FA 4D F2 | 	cmps	result1, #0 wz
20758     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
2075c     01 FA 05 51 |  if_ne	add	result1, #1
20760     FD 00 48 5C |  if_ne	wrbyte	#0, result1
20764     01 FA 85 51 |  if_ne	sub	result1, #1
20768     A7 F0 03 F6 | 	mov	ptra, fp
2076c     B2 00 A0 FD | 	call	#popregs_
20770                 | __system__Chr_S_ret
20770     2D 00 64 FD | 	ret
20774                 | 
20774                 | __system__str_S
20774     02 4A 05 F6 | 	mov	COUNT_, #2
20778     A8 00 A0 FD | 	call	#pushregs_
2077c     09 1F 02 F6 | 	mov	local01, arg01
20780     10 12 06 F6 | 	mov	arg01, #16
20784     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
20788     FD 20 0A F6 | 	mov	local02, result1 wz
2078c     30 00 90 AD |  if_e	jmp	#LR__2860
20790     F8 13 02 F6 | 	mov	arg01, ptra
20794     08 F0 07 F1 | 	add	ptra, #8
20798     09 21 62 FC | 	wrlong	local02, arg01
2079c     04 12 06 F1 | 	add	arg01, #4
207a0     09 01 68 FC | 	wrlong	#0, arg01
207a4     04 12 86 F1 | 	sub	arg01, #4
207a8     00 28 04 FF 
207ac     00 12 46 F5 | 	or	arg01, ##139460608
207b0     00 14 06 F6 | 	mov	arg02, #0
207b4     0F 17 02 F6 | 	mov	arg03, local01
207b8     67 18 06 F6 | 	mov	arg04, #103
207bc     90 EE BF FD | 	call	#__system___fmtfloat
207c0                 | LR__2860
207c0     10 FB 01 F6 | 	mov	result1, local02
207c4     A7 F0 03 F6 | 	mov	ptra, fp
207c8     B2 00 A0 FD | 	call	#popregs_
207cc                 | __system__str_S_ret
207cc     2D 00 64 FD | 	ret
207d0                 | 
207d0                 | __system__Number_S
207d0     08 4A 05 F6 | 	mov	COUNT_, #8
207d4     A8 00 A0 FD | 	call	#pushregs_
207d8     09 1F 02 F6 | 	mov	local01, arg01
207dc     0A 21 0A F6 | 	mov	local02, arg02 wz
207e0     0B 23 02 F6 | 	mov	local03, arg03
207e4     3C 00 90 5D |  if_ne	jmp	#LR__2872
207e8     01 20 06 F6 | 	mov	local02, #1
207ec     11 25 02 F6 | 	mov	local04, local03
207f0     01 26 06 F6 | 	mov	local05, #1
207f4     97 16 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
207f8                 | LR__2870
207f8     00 28 06 F6 | 	mov	local06, #0
207fc     0F 25 1A F2 | 	cmp	local04, local01 wcz
20800     01 28 66 E6 |  if_be	neg	local06, #1
20804     12 27 12 F2 | 	cmp	local05, local04 wc
20808     15 2B A2 F1 | 	subx	local07, local07
2080c     15 29 CA F7 | 	test	local06, local07 wz
20810     11 25 02 5D |  if_ne	qmul	local04, local03
20814     12 27 02 56 |  if_ne	mov	local05, local04
20818     01 20 06 51 |  if_ne	add	local02, #1
2081c     18 24 62 5D |  if_ne	getqx	local04
20820     D4 FF 9F 5D |  if_ne	jmp	#LR__2870
20824                 | LR__2871
20824                 | LR__2872
20824     20 20 36 F3 | 	fle	local02, #32 wc
20828     10 13 02 F6 | 	mov	arg01, local02
2082c     02 12 06 F1 | 	add	arg01, #2
20830     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
20834     FD 28 02 F6 | 	mov	local06, result1
20838     10 2B 02 F6 | 	mov	local07, local02
2083c     14 2B 02 F1 | 	add	local07, local06
20840     15 01 48 FC | 	wrbyte	#0, local07
20844     97 1A 48 FB | 	callpa	#(@LR__2874-@LR__2873)>>2,fcache_load_ptr_
20848                 | LR__2873
20848     01 20 16 F2 | 	cmp	local02, #1 wc
2084c     2C 00 90 CD |  if_b	jmp	#LR__2875
20850     11 1F 12 FD | 	qdiv	local01, local03
20854     01 20 86 F1 | 	sub	local02, #1
20858     10 2B 02 F6 | 	mov	local07, local02
2085c     14 2B 02 F1 | 	add	local07, local06
20860     19 2C 62 FD | 	getqy	local08
20864     0A 2C 16 F2 | 	cmp	local08, #10 wc
20868     30 2C 06 C1 |  if_b	add	local08, #48
2086c     37 2C 06 31 |  if_ae	add	local08, #55
20870     15 2D 42 FC | 	wrbyte	local08, local07
20874     18 1E 62 FD | 	getqx	local01
20878     CC FF 9F FD | 	jmp	#LR__2873
2087c                 | LR__2874
2087c                 | LR__2875
2087c     14 FB 01 F6 | 	mov	result1, local06
20880     A7 F0 03 F6 | 	mov	ptra, fp
20884     B2 00 A0 FD | 	call	#popregs_
20888                 | __system__Number_S_ret
20888     2D 00 64 FD | 	ret
2088c                 | 
2088c                 | __system__LCase_S
2088c     07 4A 05 F6 | 	mov	COUNT_, #7
20890     A8 00 A0 FD | 	call	#pushregs_
20894     09 1F 02 F6 | 	mov	local01, arg01
20898     09 21 02 F6 | 	mov	local02, arg01
2089c     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
208a0                 | LR__2880
208a0     10 FB C9 FA | 	rdbyte	result1, local02 wz
208a4     01 20 06 51 |  if_ne	add	local02, #1
208a8     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
208ac                 | LR__2881
208ac     09 21 82 F1 | 	sub	local02, arg01
208b0     10 FB 01 F6 | 	mov	result1, local02
208b4     FD 20 0A F6 | 	mov	local02, result1 wz
208b8     6D 01 00 AF 
208bc     F6 FA 05 A6 |  if_e	mov	result1, ##@LR__4717
208c0     7C 00 90 AD |  if_e	jmp	#LR__2887
208c4     10 13 02 F6 | 	mov	arg01, local02
208c8     02 12 06 F1 | 	add	arg01, #2
208cc     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
208d0     FD 22 0A F6 | 	mov	local03, result1 wz
208d4     64 00 90 AD |  if_e	jmp	#LR__2886
208d8     01 24 66 F6 | 	neg	local04, #1
208dc     97 26 48 FB | 	callpa	#(@LR__2885-@LR__2882)>>2,fcache_load_ptr_
208e0                 | LR__2882
208e0     01 24 06 F1 | 	add	local04, #1
208e4     12 27 02 F6 | 	mov	local05, local04
208e8     0F 27 02 F1 | 	add	local05, local01
208ec     13 29 C2 FA | 	rdbyte	local06, local05
208f0     41 28 56 F2 | 	cmps	local06, #65 wc
208f4     18 00 90 CD |  if_b	jmp	#LR__2883
208f8     5B 28 56 F2 | 	cmps	local06, #91 wc
208fc     12 2B 02 C6 |  if_b	mov	local07, local04
20900     11 2B 02 C1 |  if_b	add	local07, local03
20904     20 28 06 C1 |  if_b	add	local06, #32
20908     15 29 42 CC |  if_b	wrbyte	local06, local07
2090c     0C 00 90 CD |  if_b	jmp	#LR__2884
20910                 | LR__2883
20910     12 2B 02 F6 | 	mov	local07, local04
20914     11 2B 02 F1 | 	add	local07, local03
20918     15 29 42 FC | 	wrbyte	local06, local07
2091c                 | LR__2884
2091c     10 29 02 F6 | 	mov	local06, local02
20920     01 28 86 F1 | 	sub	local06, #1
20924     14 25 0A F2 | 	cmp	local04, local06 wz
20928     B4 FF 9F 5D |  if_ne	jmp	#LR__2882
2092c                 | LR__2885
2092c     11 21 02 F1 | 	add	local02, local03
20930     10 01 48 FC | 	wrbyte	#0, local02
20934     11 FB 01 F6 | 	mov	result1, local03
20938     04 00 90 FD | 	jmp	#LR__2887
2093c                 | LR__2886
2093c     11 FB 01 F6 | 	mov	result1, local03
20940                 | LR__2887
20940     A7 F0 03 F6 | 	mov	ptra, fp
20944     B2 00 A0 FD | 	call	#popregs_
20948                 | __system__LCase_S_ret
20948     2D 00 64 FD | 	ret
2094c                 | 
2094c                 | __system__LTrim_S
2094c     05 4A 05 F6 | 	mov	COUNT_, #5
20950     A8 00 A0 FD | 	call	#pushregs_
20954     09 1F 02 F6 | 	mov	local01, arg01
20958     09 21 02 F6 | 	mov	local02, arg01
2095c     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20960                 | LR__2890
20960     10 FB C9 FA | 	rdbyte	result1, local02 wz
20964     01 20 06 51 |  if_ne	add	local02, #1
20968     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
2096c                 | LR__2891
2096c     09 21 82 F1 | 	sub	local02, arg01
20970     10 FB 01 F6 | 	mov	result1, local02
20974     FD 20 0A F6 | 	mov	local02, result1 wz
20978     6D 01 00 AF 
2097c     F7 FA 05 A6 |  if_e	mov	result1, ##@LR__4718
20980     7C 00 90 AD |  if_e	jmp	#LR__2896
20984     00 22 06 F6 | 	mov	local03, #0
20988     10 25 02 F6 | 	mov	local04, local02
2098c                 | LR__2892
2098c     12 23 52 F2 | 	cmps	local03, local04 wc
20990     68 00 90 3D |  if_ae	jmp	#LR__2895
20994     11 17 02 F6 | 	mov	arg03, local03
20998     0F 17 02 F1 | 	add	arg03, local01
2099c     0B 17 C2 FA | 	rdbyte	arg03, arg03
209a0     20 16 0E F2 | 	cmp	arg03, #32 wz
209a4     4C 00 90 AD |  if_e	jmp	#LR__2894
209a8     10 13 02 F6 | 	mov	arg01, local02
209ac     11 13 82 F1 | 	sub	arg01, local03
209b0     02 12 06 F1 | 	add	arg01, #2
209b4     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
209b8     FD 26 0A F6 | 	mov	local05, result1 wz
209bc     2C 00 90 AD |  if_e	jmp	#LR__2893
209c0     11 15 02 F6 | 	mov	arg02, local03
209c4     0F 15 02 F1 | 	add	arg02, local01
209c8     10 17 02 F6 | 	mov	arg03, local02
209cc     11 17 82 F1 | 	sub	arg03, local03
209d0     13 13 02 F6 | 	mov	arg01, local05
209d4     80 DA BF FD | 	call	#__system____builtin_memmove
209d8     11 21 82 F1 | 	sub	local02, local03
209dc     13 21 02 F1 | 	add	local02, local05
209e0     10 01 48 FC | 	wrbyte	#0, local02
209e4     13 FB 01 F6 | 	mov	result1, local05
209e8     14 00 90 FD | 	jmp	#LR__2896
209ec                 | LR__2893
209ec     13 FB 01 F6 | 	mov	result1, local05
209f0     0C 00 90 FD | 	jmp	#LR__2896
209f4                 | LR__2894
209f4     01 22 06 F1 | 	add	local03, #1
209f8     90 FF 9F FD | 	jmp	#LR__2892
209fc                 | LR__2895
209fc     0F FB 01 F6 | 	mov	result1, local01
20a00                 | LR__2896
20a00     A7 F0 03 F6 | 	mov	ptra, fp
20a04     B2 00 A0 FD | 	call	#popregs_
20a08                 | __system__LTrim_S_ret
20a08     2D 00 64 FD | 	ret
20a0c                 | 
20a0c                 | __system__RTrim_S
20a0c     04 4A 05 F6 | 	mov	COUNT_, #4
20a10     A8 00 A0 FD | 	call	#pushregs_
20a14     09 1F 02 F6 | 	mov	local01, arg01
20a18     09 21 02 F6 | 	mov	local02, arg01
20a1c     97 06 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
20a20                 | LR__2900
20a20     10 FB C9 FA | 	rdbyte	result1, local02 wz
20a24     01 20 06 51 |  if_ne	add	local02, #1
20a28     F4 FF 9F 5D |  if_ne	jmp	#LR__2900
20a2c                 | LR__2901
20a2c     09 21 82 F1 | 	sub	local02, arg01
20a30     10 FB 01 F6 | 	mov	result1, local02
20a34     FD 20 0A F6 | 	mov	local02, result1 wz
20a38     6D 01 00 AF 
20a3c     F8 FA 05 A6 |  if_e	mov	result1, ##@LR__4719
20a40     74 00 90 AD |  if_e	jmp	#LR__2905
20a44     10 23 02 F6 | 	mov	local03, local02
20a48     01 22 86 F1 | 	sub	local03, #1
20a4c                 | LR__2902
20a4c     11 15 02 F6 | 	mov	arg02, local03
20a50     0F 15 02 F1 | 	add	arg02, local01
20a54     0A 21 C2 FA | 	rdbyte	local02, arg02
20a58     20 20 0E F2 | 	cmp	local02, #32 wz
20a5c     44 00 90 AD |  if_e	jmp	#LR__2904
20a60     11 13 02 F6 | 	mov	arg01, local03
20a64     02 12 06 F1 | 	add	arg01, #2
20a68     14 19 B0 FD | 	call	#__system___gc_alloc_managed
20a6c     FD 24 0A F6 | 	mov	local04, result1 wz
20a70     28 00 90 AD |  if_e	jmp	#LR__2903
20a74     11 17 02 F6 | 	mov	arg03, local03
20a78     01 16 06 F1 | 	add	arg03, #1
20a7c     12 13 02 F6 | 	mov	arg01, local04
20a80     0F 15 02 F6 | 	mov	arg02, local01
20a84     D0 D9 BF FD | 	call	#__system____builtin_memmove
20a88     01 22 06 F1 | 	add	local03, #1
20a8c     12 23 02 F1 | 	add	local03, local04
20a90     11 01 48 FC | 	wrbyte	#0, local03
20a94     12 FB 01 F6 | 	mov	result1, local04
20a98     1C 00 90 FD | 	jmp	#LR__2905
20a9c                 | LR__2903
20a9c     12 FB 01 F6 | 	mov	result1, local04
20aa0     14 00 90 FD | 	jmp	#LR__2905
20aa4                 | LR__2904
20aa4     01 22 86 F1 | 	sub	local03, #1
20aa8     00 22 56 F2 | 	cmps	local03, #0 wc
20aac     9C FF 9F 3D |  if_ae	jmp	#LR__2902
20ab0     6D 01 00 FF 
20ab4     F9 FA 05 F6 | 	mov	result1, ##@LR__4720
20ab8                 | LR__2905
20ab8     A7 F0 03 F6 | 	mov	ptra, fp
20abc     B2 00 A0 FD | 	call	#popregs_
20ac0                 | __system__RTrim_S_ret
20ac0     2D 00 64 FD | 	ret
20ac4                 | 
20ac4                 | __system__Instr
20ac4     07 4A 05 F6 | 	mov	COUNT_, #7
20ac8     A8 00 A0 FD | 	call	#pushregs_
20acc     09 1F 02 F6 | 	mov	local01, arg01
20ad0     0A 21 02 F6 | 	mov	local02, arg02
20ad4     0B 23 02 F6 | 	mov	local03, arg03
20ad8     11 13 02 F6 | 	mov	arg01, local03
20adc     09 25 02 F6 | 	mov	local04, arg01
20ae0     97 06 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
20ae4                 | LR__2910
20ae4     12 FB C9 FA | 	rdbyte	result1, local04 wz
20ae8     01 24 06 51 |  if_ne	add	local04, #1
20aec     F4 FF 9F 5D |  if_ne	jmp	#LR__2910
20af0                 | LR__2911
20af0     09 25 82 F1 | 	sub	local04, arg01
20af4     12 27 02 F6 | 	mov	local05, local04
20af8     10 13 02 F6 | 	mov	arg01, local02
20afc     09 25 02 F6 | 	mov	local04, arg01
20b00     97 06 48 FB | 	callpa	#(@LR__2913-@LR__2912)>>2,fcache_load_ptr_
20b04                 | LR__2912
20b04     12 FB C9 FA | 	rdbyte	result1, local04 wz
20b08     01 24 06 51 |  if_ne	add	local04, #1
20b0c     F4 FF 9F 5D |  if_ne	jmp	#LR__2912
20b10                 | LR__2913
20b10     09 25 82 F1 | 	sub	local04, arg01
20b14     12 FB 01 F6 | 	mov	result1, local04
20b18     FD 18 0A F6 | 	mov	arg04, result1 wz
20b1c     00 FA 05 A6 |  if_e	mov	result1, #0
20b20     98 00 90 AD |  if_e	jmp	#LR__2917
20b24     00 26 0E F2 | 	cmp	local05, #0 wz
20b28     00 FA 05 A6 |  if_e	mov	result1, #0
20b2c     8C 00 90 AD |  if_e	jmp	#LR__2917
20b30     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
20b34     00 FA 05 16 |  if_a	mov	result1, #0
20b38     80 00 90 1D |  if_a	jmp	#LR__2917
20b3c     01 1E 56 F2 | 	cmps	local01, #1 wc
20b40     01 1E 06 C6 |  if_b	mov	local01, #1
20b44     11 29 C2 FA | 	rdbyte	local06, local03
20b48     01 26 0E F2 | 	cmp	local05, #1 wz
20b4c     18 00 90 5D |  if_ne	jmp	#LR__2914
20b50     10 13 02 F6 | 	mov	arg01, local02
20b54     14 15 02 F6 | 	mov	arg02, local06
20b58     0F 17 02 F6 | 	mov	arg03, local01
20b5c     00 18 06 F6 | 	mov	arg04, #0
20b60     B8 33 B0 FD | 	call	#__system____ScanForChar
20b64     54 00 90 FD | 	jmp	#LR__2917
20b68                 | LR__2914
20b68     0F 2B 02 F6 | 	mov	local07, local01
20b6c                 | LR__2915
20b6c     10 13 02 F6 | 	mov	arg01, local02
20b70     14 15 02 F6 | 	mov	arg02, local06
20b74     15 17 02 F6 | 	mov	arg03, local07
20b78     00 18 06 F6 | 	mov	arg04, #0
20b7c     9C 33 B0 FD | 	call	#__system____ScanForChar
20b80     FD 2A 0A F6 | 	mov	local07, result1 wz
20b84     30 00 90 AD |  if_e	jmp	#LR__2916
20b88     13 17 02 F6 | 	mov	arg03, local05
20b8c     10 13 02 F6 | 	mov	arg01, local02
20b90     15 15 02 F6 | 	mov	arg02, local07
20b94     FC FA BF FD | 	call	#__system__Mid_S
20b98     FD 12 02 F6 | 	mov	arg01, result1
20b9c     11 15 02 F6 | 	mov	arg02, local03
20ba0     BC D9 BF FD | 	call	#__system___string_cmp
20ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
20ba8     15 FB 01 A6 |  if_e	mov	result1, local07
20bac     0C 00 90 AD |  if_e	jmp	#LR__2917
20bb0     13 2B 02 F1 | 	add	local07, local05
20bb4     B4 FF 9F FD | 	jmp	#LR__2915
20bb8                 | LR__2916
20bb8     00 FA 05 F6 | 	mov	result1, #0
20bbc                 | LR__2917
20bbc     A7 F0 03 F6 | 	mov	ptra, fp
20bc0     B2 00 A0 FD | 	call	#popregs_
20bc4                 | __system__Instr_ret
20bc4     2D 00 64 FD | 	ret
20bc8                 | 
20bc8                 | __system___strerror
20bc8     00 12 56 F2 | 	cmps	arg01, #0 wc
20bcc     08 00 90 CD |  if_b	jmp	#LR__2920
20bd0     1A 12 56 F2 | 	cmps	arg01, #26 wc
20bd4     04 00 90 CD |  if_b	jmp	#LR__2921
20bd8                 | LR__2920
20bd8     19 12 06 F6 | 	mov	arg01, #25
20bdc                 | LR__2921
20bdc     02 12 66 F0 | 	shl	arg01, #2
20be0     01 00 00 FF 
20be4     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
20be8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20bec     09 FB 01 FB | 	rdlong	result1, arg01
20bf0     01 00 00 FF 
20bf4     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
20bf8                 | __system___strerror_ret
20bf8     2D 00 64 FD | 	ret
20bfc                 | 
20bfc                 | __system___int64_shl
20bfc     20 16 CE F7 | 	test	arg03, #32 wz
20c00     09 15 02 56 |  if_ne	mov	arg02, arg01
20c04     00 12 06 56 |  if_ne	mov	arg01, #0
20c08     1F 16 CE F7 | 	test	arg03, #31 wz
20c0c     18 00 90 AD |  if_e	jmp	#LR__2930
20c10     0B 15 62 F0 | 	shl	arg02, arg03
20c14     09 FB 01 F6 | 	mov	result1, arg01
20c18     0B FD 61 F6 | 	neg	result2, arg03
20c1c     FE FA 41 F0 | 	shr	result1, result2
20c20     FD 14 42 F5 | 	or	arg02, result1
20c24     0B 13 62 F0 | 	shl	arg01, arg03
20c28                 | LR__2930
20c28     0A FD 01 F6 | 	mov	result2, arg02
20c2c     09 FB 01 F6 | 	mov	result1, arg01
20c30                 | __system___int64_shl_ret
20c30     2D 00 64 FD | 	ret
20c34                 | 
20c34                 | __system___usepins
20c34     14 E6 05 F1 | 	add	ptr___system__dat__, #20
20c38     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
20c3c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
20c40     00 13 CA F7 | 	test	arg01, _var01 wz
20c44     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
20c48     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
20c4c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
20c50     01 15 CA A7 |  if_e	test	arg02, _var02 wz
20c54     00 FA 05 56 |  if_ne	mov	result1, #0
20c58     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
20c5c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
20c60     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
20c64     09 03 42 F5 | 	or	_var02, arg01
20c68     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
20c6c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20c70     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
20c74     0A 03 42 F5 | 	or	_var02, arg02
20c78     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
20c7c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
20c80     01 FA 65 F6 | 	neg	result1, #1
20c84                 | __system___usepins_ret
20c84     2D 00 64 FD | 	ret
20c88                 | 
20c88                 | __system___freepins
20c88     14 E6 05 F1 | 	add	ptr___system__dat__, #20
20c8c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
20c90     09 01 22 F5 | 	andn	_var01, arg01
20c94     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
20c98     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20c9c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
20ca0     0A 01 22 F5 | 	andn	_var01, arg02
20ca4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
20ca8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
20cac                 | __system___freepins_ret
20cac     2D 00 64 FD | 	ret
20cb0                 | 
20cb0                 | __system___float_fromuns
20cb0     09 17 0A F6 | 	mov	arg03, arg01 wz
20cb4     0B FB 01 A6 |  if_e	mov	result1, arg03
20cb8     24 00 90 AD |  if_e	jmp	#LR__2940
20cbc     0B 15 92 F7 | 	encod	arg02, arg03 wc
20cc0     01 14 06 C1 |  if_b	add	arg02, #1
20cc4     01 14 86 F1 | 	sub	arg02, #1
20cc8     1F 12 06 F6 | 	mov	arg01, #31
20ccc     0A 13 82 F1 | 	sub	arg01, arg02
20cd0     09 17 62 F0 | 	shl	arg03, arg01
20cd4     02 16 46 F0 | 	shr	arg03, #2
20cd8     00 12 06 F6 | 	mov	arg01, #0
20cdc     4C 09 B0 FD | 	call	#__system___float_Pack
20ce0                 | LR__2940
20ce0                 | __system___float_fromuns_ret
20ce0     2D 00 64 FD | 	ret
20ce4                 | 
20ce4                 | __system___float_add
20ce4     0F 4A 05 F6 | 	mov	COUNT_, #15
20ce8     A8 00 A0 FD | 	call	#pushregs_
20cec     09 1F 02 F6 | 	mov	local01, arg01
20cf0     0A 21 02 F6 | 	mov	local02, arg02
20cf4     00 22 06 F6 | 	mov	local03, #0
20cf8     0F 25 02 F6 | 	mov	local04, local01
20cfc     12 27 02 F6 | 	mov	local05, local04
20d00     16 26 46 F7 | 	zerox	local05, #22
20d04     12 29 02 F6 | 	mov	local06, local04
20d08     01 28 66 F0 | 	shl	local06, #1
20d0c     18 28 46 F0 | 	shr	local06, #24
20d10     1F 24 46 F0 | 	shr	local04, #31
20d14     10 13 02 F6 | 	mov	arg01, local02
20d18     09 FB 01 F6 | 	mov	result1, arg01
20d1c     FD 2A 02 F6 | 	mov	local07, result1
20d20     15 2D 02 F6 | 	mov	local08, local07
20d24     16 2C 46 F7 | 	zerox	local08, #22
20d28     15 2F 02 F6 | 	mov	local09, local07
20d2c     01 2E 66 F0 | 	shl	local09, #1
20d30     18 2E 46 F0 | 	shr	local09, #24
20d34     17 31 02 F6 | 	mov	local10, local09
20d38     1F 2A 46 F0 | 	shr	local07, #31
20d3c     00 32 06 F6 | 	mov	local11, #0
20d40     00 34 06 F6 | 	mov	local12, #0
20d44     18 29 12 F2 | 	cmp	local06, local10 wc
20d48     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
20d4c     2C 00 90 1D |  if_a	jmp	#LR__2950
20d50     16 27 12 32 |  if_ae	cmp	local05, local08 wc
20d54     24 00 90 3D |  if_ae	jmp	#LR__2950
20d58     13 37 02 F6 | 	mov	local13, local05
20d5c     16 27 02 F6 | 	mov	local05, local08
20d60     1B 2D 02 F6 | 	mov	local08, local13
20d64     14 37 02 F6 | 	mov	local13, local06
20d68     18 29 02 F6 | 	mov	local06, local10
20d6c     1B 31 02 F6 | 	mov	local10, local13
20d70     12 37 02 F6 | 	mov	local13, local04
20d74     15 25 02 F6 | 	mov	local04, local07
20d78     1B 2B 02 F6 | 	mov	local07, local13
20d7c                 | LR__2950
20d7c     FF 28 0E F2 | 	cmp	local06, #255 wz
20d80     70 01 90 AD |  if_e	jmp	#LR__2965
20d84     00 28 0E F2 | 	cmp	local06, #0 wz
20d88     AC 01 90 AD |  if_e	jmp	#LR__2967
20d8c     17 26 26 F4 | 	bith	local05, #23
20d90                 | LR__2951
20d90     00 30 0E F2 | 	cmp	local10, #0 wz
20d94     F0 01 90 AD |  if_e	jmp	#LR__2971
20d98     17 2C 26 F4 | 	bith	local08, #23
20d9c                 | LR__2952
20d9c     7F 28 86 F1 | 	sub	local06, #127
20da0     7F 30 86 F1 | 	sub	local10, #127
20da4     14 39 02 F6 | 	mov	local14, local06
20da8     18 39 82 F1 | 	sub	local14, local10
20dac     97 14 48 FB | 	callpa	#(@LR__2954-@LR__2953)>>2,fcache_load_ptr_
20db0                 | LR__2953
20db0     20 38 56 F2 | 	cmps	local14, #32 wc
20db4     20 00 90 CD |  if_b	jmp	#LR__2955
20db8     16 2F 02 F6 | 	mov	local09, local08
20dbc     00 32 0E F2 | 	cmp	local11, #0 wz
20dc0     6F 32 62 FD | 	wrnz	local11
20dc4     19 2F 42 F5 | 	or	local09, local11
20dc8     17 33 02 F6 | 	mov	local11, local09
20dcc     00 2C 06 F6 | 	mov	local08, #0
20dd0     20 38 86 F1 | 	sub	local14, #32
20dd4     D8 FF 9F FD | 	jmp	#LR__2953
20dd8                 | LR__2954
20dd8                 | LR__2955
20dd8     00 38 0E F2 | 	cmp	local14, #0 wz
20ddc     38 00 90 AD |  if_e	jmp	#LR__2956
20de0     16 37 02 F6 | 	mov	local13, local08
20de4     20 30 06 F6 | 	mov	local10, #32
20de8     1C 31 82 F1 | 	sub	local10, local14
20dec     18 37 62 F0 | 	shl	local13, local10
20df0     19 31 02 F6 | 	mov	local10, local11
20df4     20 2E 06 F6 | 	mov	local09, #32
20df8     1C 2F 82 F1 | 	sub	local09, local14
20dfc     17 31 6A F0 | 	shl	local10, local09 wz
20e00     1C 33 42 F0 | 	shr	local11, local14
20e04     1C 2D 42 F0 | 	shr	local08, local14
20e08     1B 33 42 F5 | 	or	local11, local13
20e0c     00 3A 06 F6 | 	mov	local15, #0
20e10     01 3A 06 56 |  if_ne	mov	local15, #1
20e14     1D 33 42 F5 | 	or	local11, local15
20e18                 | LR__2956
20e18     12 3B 02 F6 | 	mov	local15, local04
20e1c     15 3B 62 F5 | 	xor	local15, local07
20e20     01 3A CE F7 | 	test	local15, #1 wz
20e24     18 00 90 AD |  if_e	jmp	#LR__2957
20e28     16 2D 22 F6 | 	not	local08, local08
20e2c     19 33 22 F6 | 	not	local11, local11
20e30     01 32 0E F1 | 	add	local11, #1 wz
20e34     00 3A 06 F6 | 	mov	local15, #0
20e38     01 3A 06 A6 |  if_e	mov	local15, #1
20e3c     1D 2D 02 F1 | 	add	local08, local15
20e40                 | LR__2957
20e40     19 35 12 F1 | 	add	local12, local11 wc
20e44     16 27 22 F1 | 	addx	local05, local08
20e48     00 26 56 F2 | 	cmps	local05, #0 wc
20e4c     1C 00 90 3D |  if_ae	jmp	#LR__2958
20e50     01 24 66 F5 | 	xor	local04, #1
20e54     13 27 22 F6 | 	not	local05, local05
20e58     1A 35 22 F6 | 	not	local12, local12
20e5c     01 34 0E F1 | 	add	local12, #1 wz
20e60     00 3A 06 F6 | 	mov	local15, #0
20e64     01 3A 06 A6 |  if_e	mov	local15, #1
20e68     1D 27 02 F1 | 	add	local05, local15
20e6c                 | LR__2958
20e6c     00 80 00 FF 
20e70     00 26 16 F2 | 	cmp	local05, ##16777216 wc
20e74     28 00 90 CD |  if_b	jmp	#LR__2959
20e78     01 28 06 F1 | 	add	local06, #1
20e7c     1A 39 02 F6 | 	mov	local14, local12
20e80     01 38 06 F5 | 	and	local14, #1
20e84     01 34 46 F0 | 	shr	local12, #1
20e88     13 3B 02 F6 | 	mov	local15, local05
20e8c     1F 3A 66 F0 | 	shl	local15, #31
20e90     1D 35 42 F5 | 	or	local12, local15
20e94     1C 35 42 F5 | 	or	local12, local14
20e98     01 26 46 F0 | 	shr	local05, #1
20e9c     3C 00 90 FD | 	jmp	#LR__2964
20ea0                 | LR__2959
20ea0     00 40 00 FF 
20ea4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
20ea8     30 00 90 3D |  if_ae	jmp	#LR__2963
20eac     00 26 0E F2 | 	cmp	local05, #0 wz
20eb0     00 34 0E A2 |  if_e	cmp	local12, #0 wz
20eb4     08 24 46 A5 |  if_e	or	local04, #8
20eb8     01 24 26 A5 |  if_e	andn	local04, #1
20ebc     1C 00 90 AD |  if_e	jmp	#LR__2962
20ec0                 | LR__2960
20ec0     00 40 00 FF 
20ec4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
20ec8     10 00 90 3D |  if_ae	jmp	#LR__2961
20ecc     1A 35 12 F1 | 	add	local12, local12 wc
20ed0     13 27 22 F1 | 	addx	local05, local05
20ed4     01 28 86 F1 | 	sub	local06, #1
20ed8     E4 FF 9F FD | 	jmp	#LR__2960
20edc                 | LR__2961
20edc                 | LR__2962
20edc                 | LR__2963
20edc                 | LR__2964
20edc     13 13 02 F6 | 	mov	arg01, local05
20ee0     1A 15 02 F6 | 	mov	arg02, local12
20ee4     14 17 02 F6 | 	mov	arg03, local06
20ee8     12 19 02 F6 | 	mov	arg04, local04
20eec     70 34 B0 FD | 	call	#__system__pack_0541
20ef0     DC 00 90 FD | 	jmp	#LR__2975
20ef4                 | LR__2965
20ef4     FF 30 0E F2 | 	cmp	local10, #255 wz
20ef8     10 00 90 5D |  if_ne	jmp	#LR__2966
20efc     12 2B 0A F2 | 	cmp	local07, local04 wz
20f00     00 F8 3F 5F 
20f04     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
20f08     C4 00 90 5D |  if_ne	jmp	#LR__2975
20f0c                 | LR__2966
20f0c     00 26 0E F2 | 	cmp	local05, #0 wz
20f10     00 F8 3F 5F 
20f14     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
20f18     B4 00 90 5D |  if_ne	jmp	#LR__2975
20f1c     1A 15 02 F6 | 	mov	arg02, local12
20f20     14 17 02 F6 | 	mov	arg03, local06
20f24     12 19 02 F6 | 	mov	arg04, local04
20f28     02 18 46 F5 | 	or	arg04, #2
20f2c     13 13 02 F6 | 	mov	arg01, local05
20f30     2C 34 B0 FD | 	call	#__system__pack_0541
20f34     98 00 90 FD | 	jmp	#LR__2975
20f38                 | LR__2967
20f38     00 26 0E F2 | 	cmp	local05, #0 wz
20f3c     28 00 90 AD |  if_e	jmp	#LR__2970
20f40     01 26 66 F0 | 	shl	local05, #1
20f44     97 0E 48 FB | 	callpa	#(@LR__2969-@LR__2968)>>2,fcache_load_ptr_
20f48                 | LR__2968
20f48     00 40 00 FF 
20f4c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
20f50     14 3B 02 C6 |  if_b	mov	local15, local06
20f54     01 3A 86 C1 |  if_b	sub	local15, #1
20f58     1D 29 02 C6 |  if_b	mov	local06, local15
20f5c     01 26 66 C0 |  if_b	shl	local05, #1
20f60     E4 FF 9F CD |  if_b	jmp	#LR__2968
20f64                 | LR__2969
20f64     28 FE 9F FD | 	jmp	#LR__2951
20f68                 | LR__2970
20f68     15 25 02 F5 | 	and	local04, local07
20f6c     12 19 02 F6 | 	mov	arg04, local04
20f70     08 18 46 F5 | 	or	arg04, #8
20f74     00 12 06 F6 | 	mov	arg01, #0
20f78     00 14 06 F6 | 	mov	arg02, #0
20f7c     00 16 06 F6 | 	mov	arg03, #0
20f80     DC 33 B0 FD | 	call	#__system__pack_0541
20f84     48 00 90 FD | 	jmp	#LR__2975
20f88                 | LR__2971
20f88     00 2C 0E F2 | 	cmp	local08, #0 wz
20f8c     28 00 90 AD |  if_e	jmp	#LR__2974
20f90     01 2C 66 F0 | 	shl	local08, #1
20f94     97 0E 48 FB | 	callpa	#(@LR__2973-@LR__2972)>>2,fcache_load_ptr_
20f98                 | LR__2972
20f98     00 40 00 FF 
20f9c     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
20fa0     18 3B 02 C6 |  if_b	mov	local15, local10
20fa4     01 3A 86 C1 |  if_b	sub	local15, #1
20fa8     1D 31 02 C6 |  if_b	mov	local10, local15
20fac     01 2C 66 C0 |  if_b	shl	local08, #1
20fb0     E4 FF 9F CD |  if_b	jmp	#LR__2972
20fb4                 | LR__2973
20fb4     E4 FD 9F FD | 	jmp	#LR__2952
20fb8                 | LR__2974
20fb8     7F 28 86 F1 | 	sub	local06, #127
20fbc     13 13 02 F6 | 	mov	arg01, local05
20fc0     1A 15 02 F6 | 	mov	arg02, local12
20fc4     14 17 02 F6 | 	mov	arg03, local06
20fc8     12 19 02 F6 | 	mov	arg04, local04
20fcc     90 33 B0 FD | 	call	#__system__pack_0541
20fd0                 | LR__2975
20fd0     A7 F0 03 F6 | 	mov	ptra, fp
20fd4     B2 00 A0 FD | 	call	#popregs_
20fd8                 | __system___float_add_ret
20fd8     2D 00 64 FD | 	ret
20fdc                 | 
20fdc                 | __system___float_sqrt
20fdc     04 4A 05 F6 | 	mov	COUNT_, #4
20fe0     A8 00 A0 FD | 	call	#pushregs_
20fe4     09 1F 02 F6 | 	mov	local01, arg01
20fe8     09 FB 01 F6 | 	mov	result1, arg01
20fec     FD 20 02 F6 | 	mov	local02, result1
20ff0     10 23 02 F6 | 	mov	local03, local02
20ff4     16 22 46 F7 | 	zerox	local03, #22
20ff8     10 25 02 F6 | 	mov	local04, local02
20ffc     01 24 66 F0 | 	shl	local04, #1
21000     18 24 4E F0 | 	shr	local04, #24 wz
21004     1F 20 46 F0 | 	shr	local02, #31
21008     70 00 90 AD |  if_e	jmp	#LR__2981
2100c     17 22 26 F4 | 	bith	local03, #23
21010                 | LR__2980
21010     00 20 0E F2 | 	cmp	local02, #0 wz
21014     00 F8 3F 5F 
21018     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2101c     88 00 90 5D |  if_ne	jmp	#LR__2984
21020     FF 24 0E F2 | 	cmp	local04, #255 wz
21024     0F FB 01 A6 |  if_e	mov	result1, local01
21028     7C 00 90 AD |  if_e	jmp	#LR__2984
2102c     7F 24 86 F1 | 	sub	local04, #127
21030     01 24 CE F7 | 	test	local04, #1 wz
21034     01 22 66 50 |  if_ne	shl	local03, #1
21038     05 22 66 F0 | 	shl	local03, #5
2103c     11 01 38 FD | 	qsqrt	#0, local03
21040     01 24 86 51 |  if_ne	sub	local04, #1
21044     12 25 52 F6 | 	abs	local04, local04 wc
21048     01 24 46 F0 | 	shr	local04, #1
2104c     12 17 82 F6 | 	negc	arg03, local04
21050     10 19 02 F6 | 	mov	arg04, local02
21054     18 12 62 FD | 	getqx	arg01
21058     09 15 02 F6 | 	mov	arg02, arg01
2105c     19 14 66 F0 | 	shl	arg02, #25
21060     07 12 46 F0 | 	shr	arg01, #7
21064     00 80 00 FF 
21068     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2106c     01 16 06 31 |  if_ae	add	arg03, #1
21070     01 12 46 30 |  if_ae	shr	arg01, #1
21074     E8 32 B0 FD | 	call	#__system__pack_0541
21078     2C 00 90 FD | 	jmp	#LR__2984
2107c                 | LR__2981
2107c     00 22 0E F2 | 	cmp	local03, #0 wz
21080     0F FB 01 A6 |  if_e	mov	result1, local01
21084     20 00 90 AD |  if_e	jmp	#LR__2984
21088     01 22 66 F0 | 	shl	local03, #1
2108c     97 0A 48 FB | 	callpa	#(@LR__2983-@LR__2982)>>2,fcache_load_ptr_
21090                 | LR__2982
21090     00 40 00 FF 
21094     00 22 16 F2 | 	cmp	local03, ##8388608 wc
21098     01 24 86 C1 |  if_b	sub	local04, #1
2109c     01 22 66 C0 |  if_b	shl	local03, #1
210a0     EC FF 9F CD |  if_b	jmp	#LR__2982
210a4                 | LR__2983
210a4     68 FF 9F FD | 	jmp	#LR__2980
210a8                 | LR__2984
210a8     A7 F0 03 F6 | 	mov	ptra, fp
210ac     B2 00 A0 FD | 	call	#popregs_
210b0                 | __system___float_sqrt_ret
210b0     2D 00 64 FD | 	ret
210b4                 | 
210b4                 | __system___float_mul
210b4     0B 4A 05 F6 | 	mov	COUNT_, #11
210b8     A8 00 A0 FD | 	call	#pushregs_
210bc     09 1F 02 F6 | 	mov	local01, arg01
210c0     0A 21 02 F6 | 	mov	local02, arg02
210c4     0F 23 02 F6 | 	mov	local03, local01
210c8     11 25 02 F6 | 	mov	local04, local03
210cc     16 24 46 F7 | 	zerox	local04, #22
210d0     11 27 02 F6 | 	mov	local05, local03
210d4     01 26 66 F0 | 	shl	local05, #1
210d8     18 26 46 F0 | 	shr	local05, #24
210dc     1F 22 46 F0 | 	shr	local03, #31
210e0     10 FB 01 F6 | 	mov	result1, local02
210e4     FD 28 02 F6 | 	mov	local06, result1
210e8     14 2B 02 F6 | 	mov	local07, local06
210ec     16 2A 46 F7 | 	zerox	local07, #22
210f0     14 2D 02 F6 | 	mov	local08, local06
210f4     01 2C 66 F0 | 	shl	local08, #1
210f8     18 2C 46 F0 | 	shr	local08, #24
210fc     1F 28 46 F0 | 	shr	local06, #31
21100     14 23 62 F5 | 	xor	local03, local06
21104     FF 26 0E F2 | 	cmp	local05, #255 wz
21108     90 00 90 AD |  if_e	jmp	#LR__2993
2110c     FF 2C 0E F2 | 	cmp	local08, #255 wz
21110     D8 00 90 AD |  if_e	jmp	#LR__2995
21114     00 26 0E F2 | 	cmp	local05, #0 wz
21118     0C 01 90 AD |  if_e	jmp	#LR__2996
2111c     17 24 26 F4 | 	bith	local04, #23
21120                 | LR__2990
21120     00 2C 0E F2 | 	cmp	local08, #0 wz
21124     44 01 90 AD |  if_e	jmp	#LR__3000
21128     17 2A 26 F4 | 	bith	local07, #23
2112c                 | LR__2991
2112c     12 21 02 F6 | 	mov	local02, local04
21130     04 20 66 F0 | 	shl	local02, #4
21134     15 29 02 F6 | 	mov	local06, local07
21138     05 28 66 F0 | 	shl	local06, #5
2113c     14 21 02 FD | 	qmul	local02, local06
21140     16 27 02 F1 | 	add	local05, local08
21144     FE 26 86 F1 | 	sub	local05, #254
21148     13 2F 02 F6 | 	mov	local09, local05
2114c     04 24 66 F0 | 	shl	local04, #4
21150     05 2A 66 F0 | 	shl	local07, #5
21154     18 30 62 FD | 	getqx	local10
21158     15 25 02 FD | 	qmul	local04, local07
2115c     19 32 62 FD | 	getqy	local11
21160     00 80 00 FF 
21164     00 32 16 F2 | 	cmp	local11, ##16777216 wc
21168     18 00 90 CD |  if_b	jmp	#LR__2992
2116c     01 2E 06 F1 | 	add	local09, #1
21170     01 30 46 F0 | 	shr	local10, #1
21174     19 2D 02 F6 | 	mov	local08, local11
21178     1F 2C 66 F0 | 	shl	local08, #31
2117c     16 31 42 F5 | 	or	local10, local08
21180     01 32 46 F0 | 	shr	local11, #1
21184                 | LR__2992
21184     19 13 02 F6 | 	mov	arg01, local11
21188     18 15 02 F6 | 	mov	arg02, local10
2118c     17 17 02 F6 | 	mov	arg03, local09
21190     11 19 02 F6 | 	mov	arg04, local03
21194     C8 31 B0 FD | 	call	#__system__pack_0541
21198     10 01 90 FD | 	jmp	#LR__3004
2119c                 | LR__2993
2119c     00 24 0E F2 | 	cmp	local04, #0 wz
211a0     0F FB 01 56 |  if_ne	mov	result1, local01
211a4     04 01 90 5D |  if_ne	jmp	#LR__3004
211a8     FF 2C 56 F2 | 	cmps	local08, #255 wc
211ac     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
211b0     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
211b4     18 00 90 4D |  if_c_and_nz	jmp	#LR__2994
211b8     00 F8 3F CF 
211bc     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
211c0     E8 00 90 CD |  if_b	jmp	#LR__3004
211c4     00 2A 0E F2 | 	cmp	local07, #0 wz
211c8     10 FB 01 56 |  if_ne	mov	result1, local02
211cc     DC 00 90 5D |  if_ne	jmp	#LR__3004
211d0                 | LR__2994
211d0     02 22 46 F5 | 	or	local03, #2
211d4     00 12 06 F6 | 	mov	arg01, #0
211d8     00 14 06 F6 | 	mov	arg02, #0
211dc     13 17 02 F6 | 	mov	arg03, local05
211e0     11 19 02 F6 | 	mov	arg04, local03
211e4     78 31 B0 FD | 	call	#__system__pack_0541
211e8     C0 00 90 FD | 	jmp	#LR__3004
211ec                 | LR__2995
211ec     00 26 0E F2 | 	cmp	local05, #0 wz
211f0     00 24 0E A2 |  if_e	cmp	local04, #0 wz
211f4     00 F8 3F AF 
211f8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
211fc     AC 00 90 AD |  if_e	jmp	#LR__3004
21200     00 2A 0E F2 | 	cmp	local07, #0 wz
21204     10 FB 01 56 |  if_ne	mov	result1, local02
21208     A0 00 90 5D |  if_ne	jmp	#LR__3004
2120c     16 17 02 F6 | 	mov	arg03, local08
21210     11 19 02 F6 | 	mov	arg04, local03
21214     02 18 46 F5 | 	or	arg04, #2
21218     00 12 06 F6 | 	mov	arg01, #0
2121c     00 14 06 F6 | 	mov	arg02, #0
21220     3C 31 B0 FD | 	call	#__system__pack_0541
21224     84 00 90 FD | 	jmp	#LR__3004
21228                 | LR__2996
21228     00 24 0E F2 | 	cmp	local04, #0 wz
2122c     20 00 90 AD |  if_e	jmp	#LR__2999
21230     01 24 66 F0 | 	shl	local04, #1
21234     97 0A 48 FB | 	callpa	#(@LR__2998-@LR__2997)>>2,fcache_load_ptr_
21238                 | LR__2997
21238     00 40 00 FF 
2123c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
21240     01 26 86 C1 |  if_b	sub	local05, #1
21244     01 24 66 C0 |  if_b	shl	local04, #1
21248     EC FF 9F CD |  if_b	jmp	#LR__2997
2124c                 | LR__2998
2124c     D0 FE 9F FD | 	jmp	#LR__2990
21250                 | LR__2999
21250     08 22 46 F5 | 	or	local03, #8
21254     00 12 06 F6 | 	mov	arg01, #0
21258     00 14 06 F6 | 	mov	arg02, #0
2125c     00 16 06 F6 | 	mov	arg03, #0
21260     11 19 02 F6 | 	mov	arg04, local03
21264     F8 30 B0 FD | 	call	#__system__pack_0541
21268     40 00 90 FD | 	jmp	#LR__3004
2126c                 | LR__3000
2126c     00 2A 0E F2 | 	cmp	local07, #0 wz
21270     20 00 90 AD |  if_e	jmp	#LR__3003
21274     01 2A 66 F0 | 	shl	local07, #1
21278     97 0A 48 FB | 	callpa	#(@LR__3002-@LR__3001)>>2,fcache_load_ptr_
2127c                 | LR__3001
2127c     00 40 00 FF 
21280     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
21284     01 2C 86 C1 |  if_b	sub	local08, #1
21288     01 2A 66 C0 |  if_b	shl	local07, #1
2128c     EC FF 9F CD |  if_b	jmp	#LR__3001
21290                 | LR__3002
21290     98 FE 9F FD | 	jmp	#LR__2991
21294                 | LR__3003
21294     08 22 46 F5 | 	or	local03, #8
21298     00 12 06 F6 | 	mov	arg01, #0
2129c     00 14 06 F6 | 	mov	arg02, #0
212a0     00 16 06 F6 | 	mov	arg03, #0
212a4     11 19 02 F6 | 	mov	arg04, local03
212a8     B4 30 B0 FD | 	call	#__system__pack_0541
212ac                 | LR__3004
212ac     A7 F0 03 F6 | 	mov	ptra, fp
212b0     B2 00 A0 FD | 	call	#popregs_
212b4                 | __system___float_mul_ret
212b4     2D 00 64 FD | 	ret
212b8                 | 
212b8                 | __system___float_div
212b8     0E 4A 05 F6 | 	mov	COUNT_, #14
212bc     A8 00 A0 FD | 	call	#pushregs_
212c0     09 23 02 F6 | 	mov	local03, arg01
212c4     0A 25 02 F6 | 	mov	local04, arg02
212c8     11 27 02 F6 | 	mov	local05, local03
212cc     13 29 02 F6 | 	mov	local06, local05
212d0     16 28 46 F7 | 	zerox	local06, #22
212d4     13 2B 02 F6 | 	mov	local07, local05
212d8     01 2A 66 F0 | 	shl	local07, #1
212dc     18 2A 46 F0 | 	shr	local07, #24
212e0     1F 26 46 F0 | 	shr	local05, #31
212e4     12 FB 01 F6 | 	mov	result1, local04
212e8     FD 2C 02 F6 | 	mov	local08, result1
212ec     16 2F 02 F6 | 	mov	local09, local08
212f0     16 2E 46 F7 | 	zerox	local09, #22
212f4     16 31 02 F6 | 	mov	local10, local08
212f8     01 30 66 F0 | 	shl	local10, #1
212fc     18 30 46 F0 | 	shr	local10, #24
21300     1F 2C 46 F0 | 	shr	local08, #31
21304     16 27 62 F5 | 	xor	local05, local08
21308     FF 2A 0E F2 | 	cmp	local07, #255 wz
2130c     D4 00 90 AD |  if_e	jmp	#LR__3015
21310     FF 30 0E F2 | 	cmp	local10, #255 wz
21314     04 01 90 AD |  if_e	jmp	#LR__3016
21318     00 2A 0E F2 | 	cmp	local07, #0 wz
2131c     24 01 90 AD |  if_e	jmp	#LR__3017
21320     17 28 26 F4 | 	bith	local06, #23
21324                 | LR__3010
21324     00 30 0E F2 | 	cmp	local10, #0 wz
21328     70 01 90 AD |  if_e	jmp	#LR__3021
2132c     17 2E 26 F4 | 	bith	local09, #23
21330                 | LR__3011
21330     18 2B 82 F1 | 	sub	local07, local10
21334     15 33 02 F6 | 	mov	local11, local07
21338     14 13 02 F6 | 	mov	arg01, local06
2133c     02 12 46 F0 | 	shr	arg01, #2
21340     1E 28 66 F0 | 	shl	local06, #30
21344     14 15 02 F6 | 	mov	arg02, local06
21348     17 17 02 F6 | 	mov	arg03, local09
2134c     28 12 62 FD | 	setq	arg01
21350     0B 15 12 FD | 	qdiv	arg02, arg03
21354     00 34 06 F6 | 	mov	local12, #0
21358     18 1E 62 FD | 	getqx	local01
2135c     19 FC 61 FD | 	getqy	result2
21360     FE 20 02 F6 | 	mov	local02, result2
21364     0F 37 02 F6 | 	mov	local13, local01
21368     00 20 4E F2 | 	cmps	local02, #0 wz
2136c     1B 39 02 F6 | 	mov	local14, local13
21370     19 38 66 F0 | 	shl	local14, #25
21374     01 34 06 56 |  if_ne	mov	local12, #1
21378     1A 39 42 F5 | 	or	local14, local12
2137c     07 36 46 F0 | 	shr	local13, #7
21380     00 80 00 FF 
21384     00 36 16 F2 | 	cmp	local13, ##16777216 wc
21388     1C 00 90 CD |  if_b	jmp	#LR__3012
2138c     01 32 06 F1 | 	add	local11, #1
21390     01 38 46 F0 | 	shr	local14, #1
21394     1B 35 02 F6 | 	mov	local12, local13
21398     1F 34 66 F0 | 	shl	local12, #31
2139c     1A 39 42 F5 | 	or	local14, local12
213a0     01 36 46 F0 | 	shr	local13, #1
213a4     24 00 90 FD | 	jmp	#LR__3014
213a8                 | LR__3012
213a8     00 40 00 FF 
213ac     00 36 16 F2 | 	cmp	local13, ##8388608 wc
213b0     18 00 90 3D |  if_ae	jmp	#LR__3013
213b4     01 32 86 F1 | 	sub	local11, #1
213b8     01 36 66 F0 | 	shl	local13, #1
213bc     1C 35 02 F6 | 	mov	local12, local14
213c0     1F 34 46 F0 | 	shr	local12, #31
213c4     1A 37 42 F5 | 	or	local13, local12
213c8     01 38 66 F0 | 	shl	local14, #1
213cc                 | LR__3013
213cc                 | LR__3014
213cc     1B 13 02 F6 | 	mov	arg01, local13
213d0     1C 15 02 F6 | 	mov	arg02, local14
213d4     19 17 02 F6 | 	mov	arg03, local11
213d8     13 19 02 F6 | 	mov	arg04, local05
213dc     80 2F B0 FD | 	call	#__system__pack_0541
213e0     F8 00 90 FD | 	jmp	#LR__3025
213e4                 | LR__3015
213e4     00 28 0E F2 | 	cmp	local06, #0 wz
213e8     11 FB 01 56 |  if_ne	mov	result1, local03
213ec     EC 00 90 5D |  if_ne	jmp	#LR__3025
213f0     FF 30 0E F2 | 	cmp	local10, #255 wz
213f4     00 F8 3F AF 
213f8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
213fc     DC 00 90 AD |  if_e	jmp	#LR__3025
21400     02 26 46 F5 | 	or	local05, #2
21404     00 12 06 F6 | 	mov	arg01, #0
21408     00 14 06 F6 | 	mov	arg02, #0
2140c     15 17 02 F6 | 	mov	arg03, local07
21410     13 19 02 F6 | 	mov	arg04, local05
21414     48 2F B0 FD | 	call	#__system__pack_0541
21418     C0 00 90 FD | 	jmp	#LR__3025
2141c                 | LR__3016
2141c     00 2E 0E F2 | 	cmp	local09, #0 wz
21420     12 FB 01 56 |  if_ne	mov	result1, local04
21424     B4 00 90 5D |  if_ne	jmp	#LR__3025
21428     13 19 02 F6 | 	mov	arg04, local05
2142c     08 18 46 F5 | 	or	arg04, #8
21430     00 12 06 F6 | 	mov	arg01, #0
21434     00 14 06 F6 | 	mov	arg02, #0
21438     00 16 06 F6 | 	mov	arg03, #0
2143c     20 2F B0 FD | 	call	#__system__pack_0541
21440     98 00 90 FD | 	jmp	#LR__3025
21444                 | LR__3017
21444     00 28 0E F2 | 	cmp	local06, #0 wz
21448     20 00 90 AD |  if_e	jmp	#LR__3020
2144c     01 28 66 F0 | 	shl	local06, #1
21450     97 0A 48 FB | 	callpa	#(@LR__3019-@LR__3018)>>2,fcache_load_ptr_
21454                 | LR__3018
21454     00 40 00 FF 
21458     00 28 16 F2 | 	cmp	local06, ##8388608 wc
2145c     01 2A 86 C1 |  if_b	sub	local07, #1
21460     01 28 66 C0 |  if_b	shl	local06, #1
21464     EC FF 9F CD |  if_b	jmp	#LR__3018
21468                 | LR__3019
21468     B8 FE 9F FD | 	jmp	#LR__3010
2146c                 | LR__3020
2146c     00 30 0E F2 | 	cmp	local10, #0 wz
21470     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
21474     00 F8 3F AF 
21478     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2147c     5C 00 90 AD |  if_e	jmp	#LR__3025
21480     13 19 02 F6 | 	mov	arg04, local05
21484     08 18 46 F5 | 	or	arg04, #8
21488     00 12 06 F6 | 	mov	arg01, #0
2148c     00 14 06 F6 | 	mov	arg02, #0
21490     00 16 06 F6 | 	mov	arg03, #0
21494     C8 2E B0 FD | 	call	#__system__pack_0541
21498     40 00 90 FD | 	jmp	#LR__3025
2149c                 | LR__3021
2149c     00 2E 0E F2 | 	cmp	local09, #0 wz
214a0     20 00 90 AD |  if_e	jmp	#LR__3024
214a4     01 2E 66 F0 | 	shl	local09, #1
214a8     97 0A 48 FB | 	callpa	#(@LR__3023-@LR__3022)>>2,fcache_load_ptr_
214ac                 | LR__3022
214ac     00 40 00 FF 
214b0     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
214b4     01 30 86 C1 |  if_b	sub	local10, #1
214b8     01 2E 66 C0 |  if_b	shl	local09, #1
214bc     EC FF 9F CD |  if_b	jmp	#LR__3022
214c0                 | LR__3023
214c0     6C FE 9F FD | 	jmp	#LR__3011
214c4                 | LR__3024
214c4     02 26 46 F5 | 	or	local05, #2
214c8     00 12 06 F6 | 	mov	arg01, #0
214cc     00 14 06 F6 | 	mov	arg02, #0
214d0     00 16 06 F6 | 	mov	arg03, #0
214d4     13 19 02 F6 | 	mov	arg04, local05
214d8     84 2E B0 FD | 	call	#__system__pack_0541
214dc                 | LR__3025
214dc     A7 F0 03 F6 | 	mov	ptra, fp
214e0     B2 00 A0 FD | 	call	#popregs_
214e4                 | __system___float_div_ret
214e4     2D 00 64 FD | 	ret
214e8                 | 
214e8                 | __system___float_cmp
214e8     00 C0 3F FF 
214ec     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
214f0     00 C0 3F CF 
214f4     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
214f8     0B FB 01 36 |  if_ae	mov	result1, arg03
214fc     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21500     00 C0 7F FF 
21504     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
21508     00 C0 7F CF 
2150c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
21510     0B FB 01 36 |  if_ae	mov	result1, arg03
21514     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21518     00 12 56 F2 | 	cmps	arg01, #0 wc
2151c     2C 00 90 3D |  if_ae	jmp	#LR__3030
21520     00 14 56 F2 | 	cmps	arg02, #0 wc
21524     0A FB 01 C6 |  if_b	mov	result1, arg02
21528     09 FB 81 C1 |  if_b	sub	result1, arg01
2152c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
21530     00 14 0E F2 | 	cmp	arg02, #0 wz
21534     00 00 40 AF 
21538     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2153c     00 FA 05 A6 |  if_e	mov	result1, #0
21540     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21544     01 FA 65 F6 | 	neg	result1, #1
21548     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2154c                 | LR__3030
2154c     00 14 56 F2 | 	cmps	arg02, #0 wc
21550     1C 00 90 3D |  if_ae	jmp	#LR__3031
21554     00 12 0E F2 | 	cmp	arg01, #0 wz
21558     00 00 40 AF 
2155c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
21560     00 FA 05 A6 |  if_e	mov	result1, #0
21564     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21568     01 FA 05 F6 | 	mov	result1, #1
2156c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
21570                 | LR__3031
21570     0A 13 82 F1 | 	sub	arg01, arg02
21574     09 FB 01 F6 | 	mov	result1, arg01
21578                 | __system___float_cmp_ret
21578     2D 00 64 FD | 	ret
2157c                 | 
2157c                 | __system___float_tointeger
2157c     02 4A 05 F6 | 	mov	COUNT_, #2
21580     A8 00 A0 FD | 	call	#pushregs_
21584     50 00 B0 FD | 	call	#__system___float_Unpack
21588     FF FF 7F FF 
2158c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
21590     34 00 90 CD |  if_b	jmp	#LR__3040
21594     1F FC 55 F2 | 	cmps	result2, #31 wc
21598     2C 00 90 3D |  if_ae	jmp	#LR__3040
2159c     02 FE 65 F0 | 	shl	result3, #2
215a0     1E 1E 06 F6 | 	mov	local01, #30
215a4     FE 1E 82 F1 | 	sub	local01, result2
215a8     0F FF 41 F0 | 	shr	result3, local01
215ac     FF 20 02 F6 | 	mov	local02, result3
215b0     0A 21 02 F1 | 	add	local02, arg02
215b4     01 20 46 F0 | 	shr	local02, #1
215b8     00 FA 0D F2 | 	cmp	result1, #0 wz
215bc     10 21 62 56 |  if_ne	neg	local02, local02
215c0     10 FB 01 F6 | 	mov	result1, local02
215c4     04 00 90 FD | 	jmp	#LR__3041
215c8                 | LR__3040
215c8     00 FA 05 F6 | 	mov	result1, #0
215cc                 | LR__3041
215cc     A7 F0 03 F6 | 	mov	ptra, fp
215d0     B2 00 A0 FD | 	call	#popregs_
215d4                 | __system___float_tointeger_ret
215d4     2D 00 64 FD | 	ret
215d8                 | 
215d8                 | __system___float_Unpack
215d8     09 01 02 F6 | 	mov	_var01, arg01
215dc     1F 00 46 F0 | 	shr	_var01, #31
215e0     09 03 02 F6 | 	mov	_var02, arg01
215e4     01 02 66 F0 | 	shl	_var02, #1
215e8     18 02 4E F0 | 	shr	_var02, #24 wz
215ec     17 13 06 F4 | 	bitl	arg01, #279
215f0     06 12 66 50 |  if_ne	shl	arg01, #6
215f4     1D 12 26 54 |  if_ne	bith	arg01, #29
215f8     1C 00 90 5D |  if_ne	jmp	#LR__3050
215fc     09 05 92 F7 | 	encod	_var03, arg01 wc
21600     01 04 06 C1 |  if_b	add	_var03, #1
21604     17 04 86 F1 | 	sub	_var03, #23
21608     02 03 02 F6 | 	mov	_var02, _var03
2160c     07 FC 05 F6 | 	mov	result2, #7
21610     02 FD 81 F1 | 	sub	result2, _var03
21614     FE 12 62 F0 | 	shl	arg01, result2
21618                 | LR__3050
21618     7F 02 86 F1 | 	sub	_var02, #127
2161c     09 FF 01 F6 | 	mov	result3, arg01
21620     00 FB 01 F6 | 	mov	result1, _var01
21624     01 FD 01 F6 | 	mov	result2, _var02
21628                 | __system___float_Unpack_ret
21628     2D 00 64 FD | 	ret
2162c                 | 
2162c                 | __system___float_Pack
2162c     00 00 06 F6 | 	mov	_var01, #0
21630     00 16 0E F2 | 	cmp	arg03, #0 wz
21634     8C 00 90 AD |  if_e	jmp	#LR__3061
21638     0B 03 92 F7 | 	encod	_var02, arg03 wc
2163c     01 02 06 C1 |  if_b	add	_var02, #1
21640     21 00 06 F6 | 	mov	_var01, #33
21644     01 01 82 F1 | 	sub	_var01, _var02
21648     00 17 62 F0 | 	shl	arg03, _var01
2164c     03 02 06 F6 | 	mov	_var02, #3
21650     00 03 82 F1 | 	sub	_var02, _var01
21654     01 15 02 F1 | 	add	arg02, _var02
21658     0A 05 02 F6 | 	mov	_var03, arg02
2165c     00 17 06 F1 | 	add	arg03, #256
21660     0B 03 02 F6 | 	mov	_var02, arg03
21664     FF 02 2E F5 | 	andn	_var02, #255 wz
21668     01 04 06 A1 |  if_e	add	_var03, #1
2166c     7F 04 06 F1 | 	add	_var03, #127
21670     FF FF 7F FF 
21674     E9 05 46 F3 | 	fges	_var03, ##-23
21678     FF 04 66 F3 | 	fles	_var03, #255
2167c     01 04 56 F2 | 	cmps	_var03, #1 wc
21680     1C 00 90 3D |  if_ae	jmp	#LR__3060
21684     01 16 46 F0 | 	shr	arg03, #1
21688     1F 02 C6 F9 | 	decod	_var02, #31
2168c     0B 03 02 F1 | 	add	_var02, arg03
21690     02 05 62 F6 | 	neg	_var03, _var03
21694     02 03 42 F0 | 	shr	_var02, _var03
21698     01 17 02 F6 | 	mov	arg03, _var02
2169c     00 04 06 F6 | 	mov	_var03, #0
216a0                 | LR__3060
216a0     09 FB 01 F6 | 	mov	result1, arg01
216a4     1F FA 65 F0 | 	shl	result1, #31
216a8     02 03 02 F6 | 	mov	_var02, _var03
216ac     17 02 66 F0 | 	shl	_var02, #23
216b0     01 FB 41 F5 | 	or	result1, _var02
216b4     0B 07 02 F6 | 	mov	_var04, arg03
216b8     09 06 46 F0 | 	shr	_var04, #9
216bc     03 FB 41 F5 | 	or	result1, _var04
216c0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
216c4                 | LR__3061
216c4     00 FB 01 F6 | 	mov	result1, _var01
216c8                 | __system___float_Pack_ret
216c8     2D 00 64 FD | 	ret
216cc                 | 
216cc                 | __system___basic_print_float
216cc     05 4A 05 F6 | 	mov	COUNT_, #5
216d0     A8 00 A0 FD | 	call	#pushregs_
216d4     09 1F 02 F6 | 	mov	local01, arg01
216d8     0A 21 02 F6 | 	mov	local02, arg02
216dc     0B 23 0A F6 | 	mov	local03, arg03 wz
216e0     0C 25 02 F6 | 	mov	local04, arg04
216e4     14 00 90 5D |  if_ne	jmp	#LR__3070
216e8     23 24 0E F2 | 	cmp	local04, #35 wz
216ec     80 02 10 AF 
216f0     00 26 06 A6 |  if_e	mov	local05, ##537198592
216f4     1D 26 C6 59 |  if_ne	decod	local05, #29
216f8     13 23 02 F6 | 	mov	local03, local05
216fc                 | LR__3070
216fc     0F 13 02 F6 | 	mov	arg01, local01
21700     40 27 B0 FD | 	call	#__system___gettxfunc
21704     FD 26 0A F6 | 	mov	local05, result1 wz
21708     00 FA 05 A6 |  if_e	mov	result1, #0
2170c     13 13 02 56 |  if_ne	mov	arg01, local05
21710     11 15 02 56 |  if_ne	mov	arg02, local03
21714     10 17 02 56 |  if_ne	mov	arg03, local02
21718     12 19 02 56 |  if_ne	mov	arg04, local04
2171c     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
21720     A7 F0 03 F6 | 	mov	ptra, fp
21724     B2 00 A0 FD | 	call	#popregs_
21728                 | __system___basic_print_float_ret
21728     2D 00 64 FD | 	ret
2172c                 | 
2172c                 | __system____builtin_atoi
2172c     07 4A 05 F6 | 	mov	COUNT_, #7
21730     A8 00 A0 FD | 	call	#pushregs_
21734                 | __system____builtin_atoi_enter
21734     09 1F 02 F6 | 	mov	local01, arg01
21738     0A 21 02 F6 | 	mov	local02, arg02
2173c     00 22 06 F6 | 	mov	local03, #0
21740     00 24 06 F6 | 	mov	local04, #0
21744     00 26 06 F6 | 	mov	local05, #0
21748     97 08 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
2174c                 | LR__3080
2174c     0F 29 C2 FA | 	rdbyte	local06, local01
21750     20 28 0E F2 | 	cmp	local06, #32 wz
21754     01 1E 06 A1 |  if_e	add	local01, #1
21758     F0 FF 9F AD |  if_e	jmp	#LR__3080
2175c                 | LR__3081
2175c     0F 2B C2 FA | 	rdbyte	local07, local01
21760                 | LR__3082
21760     2D 2A 0E F2 | 	cmp	local07, #45 wz
21764     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
21768     18 00 90 5D |  if_ne	jmp	#LR__3083
2176c     01 1E 06 F1 | 	add	local01, #1
21770     2D 2A 0E F2 | 	cmp	local07, #45 wz
21774     01 28 06 A6 |  if_e	mov	local06, #1
21778     14 27 C2 A2 |  if_e	subr	local05, local06
2177c     0F 2B C2 FA | 	rdbyte	local07, local01
21780     DC FF 9F FD | 	jmp	#LR__3082
21784                 | LR__3083
21784     97 48 48 FB | 	callpa	#(@LR__3091-@LR__3084)>>2,fcache_load_ptr_
21788                 | LR__3084
21788                 | LR__3085
21788     0F 2B C2 FA | 	rdbyte	local07, local01
2178c     5F 2A 0E F2 | 	cmp	local07, #95 wz
21790     01 1E 06 F1 | 	add	local01, #1
21794     F0 FF 9F AD |  if_e	jmp	#LR__3085
21798     30 2A 0E F2 | 	cmp	local07, #48 wz
2179c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
217a0     00 24 06 A6 |  if_e	mov	local04, #0
217a4     60 00 90 AD |  if_e	jmp	#LR__3090
217a8     31 2A 56 F2 | 	cmps	local07, #49 wc
217ac     18 00 90 CD |  if_b	jmp	#LR__3086
217b0     3A 2A 56 F2 | 	cmps	local07, #58 wc
217b4     15 25 02 C6 |  if_b	mov	local04, local07
217b8     30 24 86 C1 |  if_b	sub	local04, #48
217bc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
217c0     0A 20 06 86 |  if_c_and_z	mov	local02, #10
217c4     40 00 90 CD |  if_b	jmp	#LR__3089
217c8                 | LR__3086
217c8     0B 20 56 F2 | 	cmps	local02, #11 wc
217cc     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
217d0     14 00 90 CD |  if_b	jmp	#LR__3087
217d4     67 2A 56 F2 | 	cmps	local07, #103 wc
217d8     61 2A 86 C1 |  if_b	sub	local07, #97
217dc     0A 24 06 C6 |  if_b	mov	local04, #10
217e0     15 25 02 C1 |  if_b	add	local04, local07
217e4     20 00 90 CD |  if_b	jmp	#LR__3088
217e8                 | LR__3087
217e8     0B 20 56 F2 | 	cmps	local02, #11 wc
217ec     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
217f0     24 00 90 CD |  if_b	jmp	#LR__3092
217f4     47 2A 56 F2 | 	cmps	local07, #71 wc
217f8     41 2A 86 C1 |  if_b	sub	local07, #65
217fc     0A 24 06 C6 |  if_b	mov	local04, #10
21800     15 25 02 C1 |  if_b	add	local04, local07
21804     10 00 90 3D |  if_ae	jmp	#LR__3092
21808                 | LR__3088
21808                 | LR__3089
21808                 | LR__3090
21808     11 21 02 FD | 	qmul	local02, local03
2180c     18 22 62 FD | 	getqx	local03
21810     12 23 02 F1 | 	add	local03, local04
21814     70 FF 9F FD | 	jmp	#LR__3084
21818                 | LR__3091
21818                 | LR__3092
21818     00 20 0E F2 | 	cmp	local02, #0 wz
2181c     64 00 90 5D |  if_ne	jmp	#LR__3098
21820     78 2A 0E F2 | 	cmp	local07, #120 wz
21824     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
21828     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
2182c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
21830     14 00 90 5D |  if_ne	jmp	#LR__3093
21834     0F 13 02 F6 | 	mov	arg01, local01
21838     10 14 06 F6 | 	mov	arg02, #16
2183c     EC FE BF FD | 	call	#__system____builtin_atoi
21840     FD 22 02 F6 | 	mov	local03, result1
21844     3C 00 90 FD | 	jmp	#LR__3097
21848                 | LR__3093
21848     62 2A 0E F2 | 	cmp	local07, #98 wz
2184c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
21850     14 00 90 5D |  if_ne	jmp	#LR__3094
21854     0F 13 02 F6 | 	mov	arg01, local01
21858     02 14 06 F6 | 	mov	arg02, #2
2185c     CC FE BF FD | 	call	#__system____builtin_atoi
21860     FD 22 02 F6 | 	mov	local03, result1
21864     1C 00 90 FD | 	jmp	#LR__3096
21868                 | LR__3094
21868     6F 2A 0E F2 | 	cmp	local07, #111 wz
2186c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
21870     10 00 90 5D |  if_ne	jmp	#LR__3095
21874     0F 13 02 F6 | 	mov	arg01, local01
21878     08 14 06 F6 | 	mov	arg02, #8
2187c     AC FE BF FD | 	call	#__system____builtin_atoi
21880     FD 22 02 F6 | 	mov	local03, result1
21884                 | LR__3095
21884                 | LR__3096
21884                 | LR__3097
21884                 | LR__3098
21884     00 26 0E F2 | 	cmp	local05, #0 wz
21888     11 23 62 56 |  if_ne	neg	local03, local03
2188c     11 FB 01 F6 | 	mov	result1, local03
21890     A7 F0 03 F6 | 	mov	ptra, fp
21894     B2 00 A0 FD | 	call	#popregs_
21898                 | __system____builtin_atoi_ret
21898     2D 00 64 FD | 	ret
2189c                 | 
2189c                 | __system____builtin_atof
2189c     07 4A 05 F6 | 	mov	COUNT_, #7
218a0     A8 00 A0 FD | 	call	#pushregs_
218a4     09 1F 02 F6 | 	mov	local01, arg01
218a8     00 20 06 F6 | 	mov	local02, #0
218ac     00 22 06 F6 | 	mov	local03, #0
218b0     00 24 06 F6 | 	mov	local04, #0
218b4     00 26 06 F6 | 	mov	local05, #0
218b8     97 08 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
218bc                 | LR__3100
218bc     0F 17 C2 FA | 	rdbyte	arg03, local01
218c0     20 16 0E F2 | 	cmp	arg03, #32 wz
218c4     01 1E 06 A1 |  if_e	add	local01, #1
218c8     F0 FF 9F AD |  if_e	jmp	#LR__3100
218cc                 | LR__3101
218cc     0F 29 C2 FA | 	rdbyte	local06, local01
218d0                 | LR__3102
218d0     2B 28 0E F2 | 	cmp	local06, #43 wz
218d4     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
218d8     14 00 90 5D |  if_ne	jmp	#LR__3103
218dc     2D 28 0E F2 | 	cmp	local06, #45 wz
218e0     1F 24 E6 A4 |  if_e	bitnot	local04, #31
218e4     01 1E 06 F1 | 	add	local01, #1
218e8     0F 29 C2 FA | 	rdbyte	local06, local01
218ec     E0 FF 9F FD | 	jmp	#LR__3102
218f0                 | LR__3103
218f0                 | LR__3104
218f0     97 08 48 FB | 	callpa	#(@LR__3106-@LR__3105)>>2,fcache_load_ptr_
218f4                 | LR__3105
218f4     0F 29 C2 FA | 	rdbyte	local06, local01
218f8     5F 28 0E F2 | 	cmp	local06, #95 wz
218fc     01 1E 06 F1 | 	add	local01, #1
21900     F0 FF 9F AD |  if_e	jmp	#LR__3105
21904                 | LR__3106
21904     00 28 0E F2 | 	cmp	local06, #0 wz
21908     5C 00 90 AD |  if_e	jmp	#LR__3108
2190c     30 28 56 F2 | 	cmps	local06, #48 wc
21910     44 00 90 CD |  if_b	jmp	#LR__3107
21914     3A 28 56 F2 | 	cmps	local06, #58 wc
21918     3C 00 90 3D |  if_ae	jmp	#LR__3107
2191c     10 13 02 F6 | 	mov	arg01, local02
21920     00 90 20 FF 
21924     00 14 06 F6 | 	mov	arg02, ##1092616192
21928     88 F7 BF FD | 	call	#__system___float_mul
2192c     FD 20 02 F6 | 	mov	local02, result1
21930     30 28 86 F1 | 	sub	local06, #48
21934     14 13 02 F6 | 	mov	arg01, local06
21938     74 F3 BF FD | 	call	#__system___float_fromuns
2193c     FD 14 02 F6 | 	mov	arg02, result1
21940     10 13 02 F6 | 	mov	arg01, local02
21944     9C F3 BF FD | 	call	#__system___float_add
21948     FD 20 02 F6 | 	mov	local02, result1
2194c     00 26 0E F2 | 	cmp	local05, #0 wz
21950     01 22 86 51 |  if_ne	sub	local03, #1
21954     98 FF 9F FD | 	jmp	#LR__3104
21958                 | LR__3107
21958     2E 28 0E F2 | 	cmp	local06, #46 wz
2195c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
21960     01 26 06 A6 |  if_e	mov	local05, #1
21964     88 FF 9F AD |  if_e	jmp	#LR__3104
21968                 | LR__3108
21968     45 28 0E F2 | 	cmp	local06, #69 wz
2196c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
21970     18 00 90 5D |  if_ne	jmp	#LR__3109
21974     0F 13 02 F6 | 	mov	arg01, local01
21978     00 14 06 F6 | 	mov	arg02, #0
2197c     AC FD BF FD | 	call	#__system____builtin_atoi
21980     11 FB 01 F1 | 	add	result1, local03
21984     FD 2A 02 F6 | 	mov	local07, result1
21988     04 00 90 FD | 	jmp	#LR__3110
2198c                 | LR__3109
2198c     11 2B 02 F6 | 	mov	local07, local03
21990                 | LR__3110
21990     15 17 02 F6 | 	mov	arg03, local07
21994     10 13 02 F6 | 	mov	arg01, local02
21998     00 90 20 FF 
2199c     00 14 06 F6 | 	mov	arg02, ##1092616192
219a0     BC 06 B0 FD | 	call	#__system___float_pow_n
219a4     12 FB 61 F5 | 	xor	result1, local04
219a8     A7 F0 03 F6 | 	mov	ptra, fp
219ac     B2 00 A0 FD | 	call	#popregs_
219b0                 | __system____builtin_atof_ret
219b0     2D 00 64 FD | 	ret
219b4                 | 
219b4                 | __system____builtin_ilogb
219b4     20 FC BF FD | 	call	#__system___float_Unpack
219b8     00 FE 0D F2 | 	cmp	result3, #0 wz
219bc     00 00 40 AF 
219c0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
219c4     24 00 90 AD |  if_e	jmp	#LR__3121
219c8     80 FC 0D F2 | 	cmp	result2, #128 wz
219cc     18 00 90 5D |  if_ne	jmp	#LR__3120
219d0     00 00 10 FF 
219d4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
219d8     1E FA CD A9 |  if_e	bmask	result1, #30
219dc     0C 00 90 AD |  if_e	jmp	#LR__3121
219e0     1F FA C5 F9 | 	decod	result1, #31
219e4     04 00 90 FD | 	jmp	#LR__3121
219e8                 | LR__3120
219e8     FE FA 01 F6 | 	mov	result1, result2
219ec                 | LR__3121
219ec                 | __system____builtin_ilogb_ret
219ec     2D 00 64 FD | 	ret
219f0                 | 
219f0                 | __system____builtin_sinf
219f0     03 4A 05 F6 | 	mov	COUNT_, #3
219f4     A8 00 A0 FD | 	call	#pushregs_
219f8     09 1F 02 F6 | 	mov	local01, arg01
219fc     87 64 20 FF 
21a00     DB 15 06 F6 | 	mov	arg02, ##1086918619
21a04     B0 F8 BF FD | 	call	#__system___float_div
21a08     FD 12 02 F6 | 	mov	arg01, result1
21a0c     00 14 06 F6 | 	mov	arg02, #0
21a10     68 FB BF FD | 	call	#__system___float_tointeger
21a14     FD 16 0A F6 | 	mov	arg03, result1 wz
21a18     44 00 90 AD |  if_e	jmp	#LR__3130
21a1c     0B 13 52 F6 | 	abs	arg01, arg03 wc
21a20     1F 20 C6 C9 |  if_b	decod	local02, #31
21a24     00 20 06 36 |  if_ae	mov	local02, #0
21a28     84 F2 BF FD | 	call	#__system___float_fromuns
21a2c     10 FB 61 F5 | 	xor	result1, local02
21a30     FD 12 02 F6 | 	mov	arg01, result1
21a34     1E 14 C6 F9 | 	decod	arg02, #30
21a38     78 F6 BF FD | 	call	#__system___float_mul
21a3c     FD 12 02 F6 | 	mov	arg01, result1
21a40     87 24 20 FF 
21a44     DB 15 06 F6 | 	mov	arg02, ##1078530011
21a48     68 F6 BF FD | 	call	#__system___float_mul
21a4c     FD 14 02 F6 | 	mov	arg02, result1
21a50     0F 13 02 F6 | 	mov	arg01, local01
21a54     1F 14 E6 F4 | 	bitnot	arg02, #31
21a58     88 F2 BF FD | 	call	#__system___float_add
21a5c     FD 1E 02 F6 | 	mov	local01, result1
21a60                 | LR__3130
21a60     0F 13 02 F6 | 	mov	arg01, local01
21a64     66 E6 1E FF 
21a68     CD 14 06 F6 | 	mov	arg02, ##1036831949
21a6c     01 16 06 F6 | 	mov	arg03, #1
21a70     74 FA BF FD | 	call	#__system___float_cmp
21a74     00 FA 55 F2 | 	cmps	result1, #0 wc
21a78     5C 00 90 3D |  if_ae	jmp	#LR__3131
21a7c     0F 13 02 F6 | 	mov	arg01, local01
21a80     66 E6 5E FF 
21a84     CD 14 06 F6 | 	mov	arg02, ##-1110651699
21a88     01 16 66 F6 | 	neg	arg03, #1
21a8c     58 FA BF FD | 	call	#__system___float_cmp
21a90     01 FA 55 F2 | 	cmps	result1, #1 wc
21a94     40 00 90 CD |  if_b	jmp	#LR__3131
21a98     0F 13 02 F6 | 	mov	arg01, local01
21a9c     0F 15 02 F6 | 	mov	arg02, local01
21aa0     10 F6 BF FD | 	call	#__system___float_mul
21aa4     FD 12 02 F6 | 	mov	arg01, result1
21aa8     0F 15 02 F6 | 	mov	arg02, local01
21aac     04 F6 BF FD | 	call	#__system___float_mul
21ab0     FD 12 02 F6 | 	mov	arg01, result1
21ab4     00 60 20 FF 
21ab8     00 14 06 F6 | 	mov	arg02, ##1086324736
21abc     F8 F7 BF FD | 	call	#__system___float_div
21ac0     FD 14 02 F6 | 	mov	arg02, result1
21ac4     0F 13 02 F6 | 	mov	arg01, local01
21ac8     1F 14 E6 F4 | 	bitnot	arg02, #31
21acc     14 F2 BF FD | 	call	#__system___float_add
21ad0     FD 22 02 F6 | 	mov	local03, result1
21ad4     54 00 90 FD | 	jmp	#LR__3132
21ad8                 | LR__3131
21ad8     0F 13 02 F6 | 	mov	arg01, local01
21adc     7C 91 26 FF 
21ae0     83 15 06 F6 | 	mov	arg02, ##1294137731
21ae4     CC F5 BF FD | 	call	#__system___float_mul
21ae8     FD 12 02 F6 | 	mov	arg01, result1
21aec     00 14 06 F6 | 	mov	arg02, #0
21af0     88 FA BF FD | 	call	#__system___float_tointeger
21af4     02 FA 65 F0 | 	shl	result1, #2
21af8     00 00 A0 FF 
21afc     FD 00 48 FD | 	qrotate	##1073741824, result1
21b00     19 12 62 FD | 	getqy	arg01
21b04     09 13 52 F6 | 	abs	arg01, arg01 wc
21b08     1F 20 C6 C9 |  if_b	decod	local02, #31
21b0c     00 20 06 36 |  if_ae	mov	local02, #0
21b10     9C F1 BF FD | 	call	#__system___float_fromuns
21b14     10 FB 61 F5 | 	xor	result1, local02
21b18     FD 12 02 F6 | 	mov	arg01, result1
21b1c     00 40 27 FF 
21b20     00 14 06 F6 | 	mov	arg02, ##1317011456
21b24     90 F7 BF FD | 	call	#__system___float_div
21b28     FD 22 02 F6 | 	mov	local03, result1
21b2c                 | LR__3132
21b2c     11 FB 01 F6 | 	mov	result1, local03
21b30     A7 F0 03 F6 | 	mov	ptra, fp
21b34     B2 00 A0 FD | 	call	#popregs_
21b38                 | __system____builtin_sinf_ret
21b38     2D 00 64 FD | 	ret
21b3c                 | 
21b3c                 | __system____builtin_tanf
21b3c     02 4A 05 F6 | 	mov	COUNT_, #2
21b40     A8 00 A0 FD | 	call	#pushregs_
21b44     09 1F 02 F6 | 	mov	local01, arg01
21b48     A4 FE BF FD | 	call	#__system____builtin_sinf
21b4c     FD 20 02 F6 | 	mov	local02, result1
21b50     0F 15 02 F6 | 	mov	arg02, local01
21b54     87 E4 1F FF 
21b58     DB 13 06 F6 | 	mov	arg01, ##1070141403
21b5c     1F 14 E6 F4 | 	bitnot	arg02, #31
21b60     80 F1 BF FD | 	call	#__system___float_add
21b64     FD 12 02 F6 | 	mov	arg01, result1
21b68     84 FE BF FD | 	call	#__system____builtin_sinf
21b6c     FD 14 02 F6 | 	mov	arg02, result1
21b70     10 13 02 F6 | 	mov	arg01, local02
21b74     40 F7 BF FD | 	call	#__system___float_div
21b78     A7 F0 03 F6 | 	mov	ptra, fp
21b7c     B2 00 A0 FD | 	call	#popregs_
21b80                 | __system____builtin_tanf_ret
21b80     2D 00 64 FD | 	ret
21b84                 | 
21b84                 | __system____builtin_asinf
21b84     01 4A 05 F6 | 	mov	COUNT_, #1
21b88     A8 00 A0 FD | 	call	#pushregs_
21b8c     09 1F 02 F6 | 	mov	local01, arg01
21b90     0F 15 02 F6 | 	mov	arg02, local01
21b94     0F 13 02 F6 | 	mov	arg01, local01
21b98     18 F5 BF FD | 	call	#__system___float_mul
21b9c     FD 14 02 F6 | 	mov	arg02, result1
21ba0     00 C0 1F FF 
21ba4     00 12 06 F6 | 	mov	arg01, ##1065353216
21ba8     1F 14 E6 F4 | 	bitnot	arg02, #31
21bac     34 F1 BF FD | 	call	#__system___float_add
21bb0     FD 12 02 F6 | 	mov	arg01, result1
21bb4     24 F4 BF FD | 	call	#__system___float_sqrt
21bb8     FD 14 02 F6 | 	mov	arg02, result1
21bbc     0F 13 02 F6 | 	mov	arg01, local01
21bc0     58 00 B0 FD | 	call	#__system____builtin_atan2f
21bc4     A7 F0 03 F6 | 	mov	ptra, fp
21bc8     B2 00 A0 FD | 	call	#popregs_
21bcc                 | __system____builtin_asinf_ret
21bcc     2D 00 64 FD | 	ret
21bd0                 | 
21bd0                 | __system____builtin_acosf
21bd0     01 4A 05 F6 | 	mov	COUNT_, #1
21bd4     A8 00 A0 FD | 	call	#pushregs_
21bd8     09 1F 02 F6 | 	mov	local01, arg01
21bdc     0F 15 02 F6 | 	mov	arg02, local01
21be0     0F 13 02 F6 | 	mov	arg01, local01
21be4     CC F4 BF FD | 	call	#__system___float_mul
21be8     FD 14 02 F6 | 	mov	arg02, result1
21bec     00 C0 1F FF 
21bf0     00 12 06 F6 | 	mov	arg01, ##1065353216
21bf4     1F 14 E6 F4 | 	bitnot	arg02, #31
21bf8     E8 F0 BF FD | 	call	#__system___float_add
21bfc     FD 12 02 F6 | 	mov	arg01, result1
21c00     D8 F3 BF FD | 	call	#__system___float_sqrt
21c04     FD 12 02 F6 | 	mov	arg01, result1
21c08     0F 15 02 F6 | 	mov	arg02, local01
21c0c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
21c10     A7 F0 03 F6 | 	mov	ptra, fp
21c14     B2 00 A0 FD | 	call	#popregs_
21c18                 | __system____builtin_acosf_ret
21c18     2D 00 64 FD | 	ret
21c1c                 | 
21c1c                 | __system____builtin_atan2f
21c1c     04 4A 05 F6 | 	mov	COUNT_, #4
21c20     A8 00 A0 FD | 	call	#pushregs_
21c24     09 1F 02 F6 | 	mov	local01, arg01
21c28     0A 21 02 F6 | 	mov	local02, arg02
21c2c     0F 13 02 F6 | 	mov	arg01, local01
21c30     00 14 06 F6 | 	mov	arg02, #0
21c34     01 16 06 F6 | 	mov	arg03, #1
21c38     AC F8 BF FD | 	call	#__system___float_cmp
21c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
21c40     28 00 90 5D |  if_ne	jmp	#LR__3140
21c44     10 13 02 F6 | 	mov	arg01, local02
21c48     00 14 06 F6 | 	mov	arg02, #0
21c4c     01 16 06 F6 | 	mov	arg03, #1
21c50     94 F8 BF FD | 	call	#__system___float_cmp
21c54     00 FA 55 F2 | 	cmps	result1, #0 wc
21c58     87 24 60 CF 
21c5c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
21c60     DC 00 90 CD |  if_b	jmp	#LR__3141
21c64     00 FA 05 F6 | 	mov	result1, #0
21c68     D4 00 90 FD | 	jmp	#LR__3141
21c6c                 | LR__3140
21c6c     10 13 02 F6 | 	mov	arg01, local02
21c70     10 15 02 F6 | 	mov	arg02, local02
21c74     3C F4 BF FD | 	call	#__system___float_mul
21c78     FD 22 02 F6 | 	mov	local03, result1
21c7c     0F 13 02 F6 | 	mov	arg01, local01
21c80     0F 15 02 F6 | 	mov	arg02, local01
21c84     2C F4 BF FD | 	call	#__system___float_mul
21c88     FD 14 02 F6 | 	mov	arg02, result1
21c8c     11 13 02 F6 | 	mov	arg01, local03
21c90     50 F0 BF FD | 	call	#__system___float_add
21c94     FD 12 02 F6 | 	mov	arg01, result1
21c98     40 F3 BF FD | 	call	#__system___float_sqrt
21c9c     FD 22 02 F6 | 	mov	local03, result1
21ca0     10 13 02 F6 | 	mov	arg01, local02
21ca4     11 15 02 F6 | 	mov	arg02, local03
21ca8     0C F6 BF FD | 	call	#__system___float_div
21cac     FD 20 02 F6 | 	mov	local02, result1
21cb0     0F 13 02 F6 | 	mov	arg01, local01
21cb4     11 15 02 F6 | 	mov	arg02, local03
21cb8     FC F5 BF FD | 	call	#__system___float_div
21cbc     FD 1E 02 F6 | 	mov	local01, result1
21cc0     00 40 27 FF 
21cc4     00 12 06 F6 | 	mov	arg01, ##1317011456
21cc8     10 15 02 F6 | 	mov	arg02, local02
21ccc     E4 F3 BF FD | 	call	#__system___float_mul
21cd0     FD 12 02 F6 | 	mov	arg01, result1
21cd4     00 14 06 F6 | 	mov	arg02, #0
21cd8     A0 F8 BF FD | 	call	#__system___float_tointeger
21cdc     FD 22 02 F6 | 	mov	local03, result1
21ce0     00 40 27 FF 
21ce4     00 12 06 F6 | 	mov	arg01, ##1317011456
21ce8     0F 15 02 F6 | 	mov	arg02, local01
21cec     C4 F3 BF FD | 	call	#__system___float_mul
21cf0     FD 12 02 F6 | 	mov	arg01, result1
21cf4     00 14 06 F6 | 	mov	arg02, #0
21cf8     80 F8 BF FD | 	call	#__system___float_tointeger
21cfc     FD 22 52 FD | 	qvector	local03, result1
21d00     87 24 20 FF 
21d04     DB 23 06 F6 | 	mov	local03, ##1078530011
21d08     19 12 62 FD | 	getqy	arg01
21d0c     01 12 C6 F0 | 	sar	arg01, #1
21d10     09 13 52 F6 | 	abs	arg01, arg01 wc
21d14     1F 24 C6 C9 |  if_b	decod	local04, #31
21d18     00 24 06 36 |  if_ae	mov	local04, #0
21d1c     90 EF BF FD | 	call	#__system___float_fromuns
21d20     12 FB 61 F5 | 	xor	result1, local04
21d24     FD 12 02 F6 | 	mov	arg01, result1
21d28     00 40 27 FF 
21d2c     00 14 06 F6 | 	mov	arg02, ##1317011456
21d30     84 F5 BF FD | 	call	#__system___float_div
21d34     FD 14 02 F6 | 	mov	arg02, result1
21d38     11 13 02 F6 | 	mov	arg01, local03
21d3c     74 F3 BF FD | 	call	#__system___float_mul
21d40                 | LR__3141
21d40     A7 F0 03 F6 | 	mov	ptra, fp
21d44     B2 00 A0 FD | 	call	#popregs_
21d48                 | __system____builtin_atan2f_ret
21d48     2D 00 64 FD | 	ret
21d4c                 | 
21d4c                 | __system____builtin_exp2f
21d4c     04 4A 05 F6 | 	mov	COUNT_, #4
21d50     A8 00 A0 FD | 	call	#pushregs_
21d54     09 1F 02 F6 | 	mov	local01, arg01
21d58     00 7F 21 FF 
21d5c     00 14 06 F6 | 	mov	arg02, ##1123942400
21d60     01 16 66 F6 | 	neg	arg03, #1
21d64     80 F7 BF FD | 	call	#__system___float_cmp
21d68     00 FA 55 F2 | 	cmps	result1, #0 wc
21d6c     00 C0 3F 3F 
21d70     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
21d74     DC 00 90 3D |  if_ae	jmp	#LR__3151
21d78     0F 13 02 F6 | 	mov	arg01, local01
21d7c     00 7F 61 FF 
21d80     00 14 06 F6 | 	mov	arg02, ##-1023541248
21d84     01 16 06 F6 | 	mov	arg03, #1
21d88     5C F7 BF FD | 	call	#__system___float_cmp
21d8c     00 FA 55 F2 | 	cmps	result1, #0 wc
21d90     00 FA 05 C6 |  if_b	mov	result1, #0
21d94     BC 00 90 CD |  if_b	jmp	#LR__3151
21d98     0F 13 02 F6 | 	mov	arg01, local01
21d9c     00 14 06 F6 | 	mov	arg02, #0
21da0     D8 F7 BF FD | 	call	#__system___float_tointeger
21da4     FD 20 02 F6 | 	mov	local02, result1
21da8     10 13 52 F6 | 	abs	arg01, local02 wc
21dac     1F 22 C6 C9 |  if_b	decod	local03, #31
21db0     00 22 06 36 |  if_ae	mov	local03, #0
21db4     F8 EE BF FD | 	call	#__system___float_fromuns
21db8     11 FB 61 F5 | 	xor	result1, local03
21dbc     FD 14 02 F6 | 	mov	arg02, result1
21dc0     0F 13 02 F6 | 	mov	arg01, local01
21dc4     1F 14 E6 F4 | 	bitnot	arg02, #31
21dc8     18 EF BF FD | 	call	#__system___float_add
21dcc     FD 24 02 F6 | 	mov	local04, result1
21dd0     12 13 02 F6 | 	mov	arg01, local04
21dd4     00 14 06 F6 | 	mov	arg02, #0
21dd8     01 16 06 F6 | 	mov	arg03, #1
21ddc     08 F7 BF FD | 	call	#__system___float_cmp
21de0     00 FA 55 F2 | 	cmps	result1, #0 wc
21de4     18 00 90 3D |  if_ae	jmp	#LR__3150
21de8     12 13 02 F6 | 	mov	arg01, local04
21dec     00 C0 1F FF 
21df0     00 14 06 F6 | 	mov	arg02, ##1065353216
21df4     EC EE BF FD | 	call	#__system___float_add
21df8     FD 24 02 F6 | 	mov	local04, result1
21dfc     01 20 86 F1 | 	sub	local02, #1
21e00                 | LR__3150
21e00     7F 20 06 F1 | 	add	local02, #127
21e04     17 20 66 F0 | 	shl	local02, #23
21e08     12 13 02 F6 | 	mov	arg01, local04
21e0c     00 80 26 FF 
21e10     00 14 06 F6 | 	mov	arg02, ##1291845632
21e14     9C F2 BF FD | 	call	#__system___float_mul
21e18     FD 12 02 F6 | 	mov	arg01, result1
21e1c     00 14 06 F6 | 	mov	arg02, #0
21e20     58 F7 BF FD | 	call	#__system___float_tointeger
21e24     FD 24 0A F6 | 	mov	local04, result1 wz
21e28     10 FB 01 A6 |  if_e	mov	result1, local02
21e2c     24 00 90 AD |  if_e	jmp	#LR__3151
21e30     3E 24 26 F4 | 	bith	local04, #62
21e34     0F 24 62 FD | 	qexp	local04
21e38     10 13 02 F6 | 	mov	arg01, local02
21e3c     18 14 62 FD | 	getqx	arg02
21e40     01 14 06 F1 | 	add	arg02, #1
21e44     01 14 46 F0 | 	shr	arg02, #1
21e48     00 80 1F FF 
21e4c     00 14 06 F1 | 	add	arg02, ##1056964608
21e50     60 F2 BF FD | 	call	#__system___float_mul
21e54                 | LR__3151
21e54     A7 F0 03 F6 | 	mov	ptra, fp
21e58     B2 00 A0 FD | 	call	#popregs_
21e5c                 | __system____builtin_exp2f_ret
21e5c     2D 00 64 FD | 	ret
21e60                 | 
21e60                 | __system____builtin_log2f
21e60     06 4A 05 F6 | 	mov	COUNT_, #6
21e64     A8 00 A0 FD | 	call	#pushregs_
21e68     09 1F 02 F6 | 	mov	local01, arg01
21e6c     09 21 0A F6 | 	mov	local02, arg01 wz
21e70     00 00 40 5F 
21e74     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
21e78     00 40 00 AF 
21e7c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
21e80     08 01 90 AD |  if_e	jmp	#LR__3164
21e84     00 20 56 F2 | 	cmps	local02, #0 wc
21e88     00 E0 3F CF 
21e8c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
21e90     F8 00 90 CD |  if_b	jmp	#LR__3164
21e94     0F 13 02 F6 | 	mov	arg01, local01
21e98     00 90 20 FF 
21e9c     00 14 06 F6 | 	mov	arg02, ##1092616192
21ea0     01 16 06 F6 | 	mov	arg03, #1
21ea4     40 F6 BF FD | 	call	#__system___float_cmp
21ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
21eac     4D 2A 20 AF 
21eb0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
21eb4     D4 00 90 AD |  if_e	jmp	#LR__3164
21eb8     0F 13 02 F6 | 	mov	arg01, local01
21ebc     FC 16 20 FF 
21ec0     54 14 06 F6 | 	mov	arg02, ##1076754516
21ec4     01 16 06 F6 | 	mov	arg03, #1
21ec8     1C F6 BF FD | 	call	#__system___float_cmp
21ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
21ed0     55 DC 1F AF 
21ed4     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
21ed8     B0 00 90 AD |  if_e	jmp	#LR__3164
21edc     10 23 02 F6 | 	mov	local03, local02
21ee0     17 22 46 F0 | 	shr	local03, #23
21ee4     11 23 E2 F8 | 	getbyte	local03, local03, #0
21ee8     17 21 06 F4 | 	bitl	local02, #279
21eec     10 25 02 F6 | 	mov	local04, local02
21ef0     FF 22 0E F2 | 	cmp	local03, #255 wz
21ef4     1C 00 90 5D |  if_ne	jmp	#LR__3160
21ef8     00 24 0E F2 | 	cmp	local04, #0 wz
21efc     00 C0 3F 5F 
21f00     00 26 06 56 |  if_ne	mov	local05, ##2139095040
21f04     00 E0 3F AF 
21f08     00 26 06 A6 |  if_e	mov	local05, ##2143289344
21f0c     13 FB 01 F6 | 	mov	result1, local05
21f10     78 00 90 FD | 	jmp	#LR__3164
21f14                 | LR__3160
21f14     00 22 0E F2 | 	cmp	local03, #0 wz
21f18     17 24 26 54 |  if_ne	bith	local04, #23
21f1c     7F 22 86 51 |  if_ne	sub	local03, #127
21f20     28 00 90 5D |  if_ne	jmp	#LR__3163
21f24     00 24 0E F2 | 	cmp	local04, #0 wz
21f28     00 40 00 AF 
21f2c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
21f30     58 00 90 AD |  if_e	jmp	#LR__3164
21f34     7E 22 66 F6 | 	neg	local03, #126
21f38     97 08 48 FB | 	callpa	#(@LR__3162-@LR__3161)>>2,fcache_load_ptr_
21f3c                 | LR__3161
21f3c     17 24 2E F4 | 	testbn	local04, #23 wz
21f40     01 24 66 A0 |  if_e	shl	local04, #1
21f44     01 22 06 A1 |  if_e	add	local03, #1
21f48     F0 FF 9F AD |  if_e	jmp	#LR__3161
21f4c                 | LR__3162
21f4c                 | LR__3163
21f4c     0E 24 62 FD | 	qlog	local04
21f50     01 22 86 F1 | 	sub	local03, #1
21f54     11 13 52 F6 | 	abs	arg01, local03 wc
21f58     1F 28 C6 C9 |  if_b	decod	local06, #31
21f5c     00 28 06 36 |  if_ae	mov	local06, #0
21f60     18 26 62 FD | 	getqx	local05
21f64     9B 26 06 F4 | 	bitl	local05, #155
21f68     08 26 06 F1 | 	add	local05, #8
21f6c     04 26 46 F0 | 	shr	local05, #4
21f70     00 C0 1F FF 
21f74     00 26 06 F1 | 	add	local05, ##1065353216
21f78     34 ED BF FD | 	call	#__system___float_fromuns
21f7c     14 FB 61 F5 | 	xor	result1, local06
21f80     FD 14 02 F6 | 	mov	arg02, result1
21f84     13 13 02 F6 | 	mov	arg01, local05
21f88     58 ED BF FD | 	call	#__system___float_add
21f8c                 | LR__3164
21f8c     A7 F0 03 F6 | 	mov	ptra, fp
21f90     B2 00 A0 FD | 	call	#popregs_
21f94                 | __system____builtin_log2f_ret
21f94     2D 00 64 FD | 	ret
21f98                 | 
21f98                 | __system____builtin_powf
21f98     04 4A 05 F6 | 	mov	COUNT_, #4
21f9c     A8 00 A0 FD | 	call	#pushregs_
21fa0     09 1F 02 F6 | 	mov	local01, arg01
21fa4     0A 21 02 F6 | 	mov	local02, arg02
21fa8     10 13 02 F6 | 	mov	arg01, local02
21fac     00 14 06 F6 | 	mov	arg02, #0
21fb0     C8 F5 BF FD | 	call	#__system___float_tointeger
21fb4     FD 22 02 F6 | 	mov	local03, result1
21fb8     11 13 52 F6 | 	abs	arg01, local03 wc
21fbc     1F 24 C6 C9 |  if_b	decod	local04, #31
21fc0     00 24 06 36 |  if_ae	mov	local04, #0
21fc4     E8 EC BF FD | 	call	#__system___float_fromuns
21fc8     12 FB 61 F5 | 	xor	result1, local04
21fcc     FD 12 02 F6 | 	mov	arg01, result1
21fd0     10 15 02 F6 | 	mov	arg02, local02
21fd4     01 16 06 F6 | 	mov	arg03, #1
21fd8     0C F5 BF FD | 	call	#__system___float_cmp
21fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
21fe0     18 00 90 5D |  if_ne	jmp	#LR__3170
21fe4     00 C0 1F FF 
21fe8     00 12 06 F6 | 	mov	arg01, ##1065353216
21fec     0F 15 02 F6 | 	mov	arg02, local01
21ff0     11 17 02 F6 | 	mov	arg03, local03
21ff4     68 00 B0 FD | 	call	#__system___float_pow_n
21ff8     58 00 90 FD | 	jmp	#LR__3171
21ffc                 | LR__3170
21ffc     0F 13 02 F6 | 	mov	arg01, local01
22000     00 14 06 F6 | 	mov	arg02, #0
22004     01 16 06 F6 | 	mov	arg03, #1
22008     DC F4 BF FD | 	call	#__system___float_cmp
2200c     00 FA 55 F2 | 	cmps	result1, #0 wc
22010     00 E0 3F CF 
22014     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
22018     38 00 90 CD |  if_b	jmp	#LR__3171
2201c     0F 13 02 F6 | 	mov	arg01, local01
22020     00 14 06 F6 | 	mov	arg02, #0
22024     01 16 06 F6 | 	mov	arg03, #1
22028     BC F4 BF FD | 	call	#__system___float_cmp
2202c     00 FA 0D F2 | 	cmp	result1, #0 wz
22030     00 FA 05 A6 |  if_e	mov	result1, #0
22034     1C 00 90 AD |  if_e	jmp	#LR__3171
22038     0F 13 02 F6 | 	mov	arg01, local01
2203c     20 FE BF FD | 	call	#__system____builtin_log2f
22040     FD 12 02 F6 | 	mov	arg01, result1
22044     10 15 02 F6 | 	mov	arg02, local02
22048     68 F0 BF FD | 	call	#__system___float_mul
2204c     FD 12 02 F6 | 	mov	arg01, result1
22050     F8 FC BF FD | 	call	#__system____builtin_exp2f
22054                 | LR__3171
22054     A7 F0 03 F6 | 	mov	ptra, fp
22058     B2 00 A0 FD | 	call	#popregs_
2205c                 | __system____builtin_powf_ret
2205c     2D 00 64 FD | 	ret
22060                 | 
22060                 | __system___float_pow_n
22060     05 4A 05 F6 | 	mov	COUNT_, #5
22064     A8 00 A0 FD | 	call	#pushregs_
22068     09 1F 02 F6 | 	mov	local01, arg01
2206c     0A 21 02 F6 | 	mov	local02, arg02
22070     0B 23 02 F6 | 	mov	local03, arg03
22074     00 22 56 F2 | 	cmps	local03, #0 wc
22078     18 00 90 3D |  if_ae	jmp	#LR__3180
2207c     01 24 06 F6 | 	mov	local04, #1
22080     11 23 62 F6 | 	neg	local03, local03
22084     00 22 56 F2 | 	cmps	local03, #0 wc
22088     00 FA 05 C6 |  if_b	mov	result1, #0
2208c     94 00 90 CD |  if_b	jmp	#LR__3188
22090     04 00 90 FD | 	jmp	#LR__3181
22094                 | LR__3180
22094     00 24 06 F6 | 	mov	local04, #0
22098                 | LR__3181
22098     00 C0 1F FF 
2209c     00 26 06 F6 | 	mov	local05, ##1065353216
220a0                 | LR__3182
220a0     01 22 56 F2 | 	cmps	local03, #1 wc
220a4     30 00 90 CD |  if_b	jmp	#LR__3184
220a8     01 22 CE F7 | 	test	local03, #1 wz
220ac     10 00 90 AD |  if_e	jmp	#LR__3183
220b0     13 13 02 F6 | 	mov	arg01, local05
220b4     10 15 02 F6 | 	mov	arg02, local02
220b8     F8 EF BF FD | 	call	#__system___float_mul
220bc     FD 26 02 F6 | 	mov	local05, result1
220c0                 | LR__3183
220c0     01 22 C6 F0 | 	sar	local03, #1
220c4     10 13 02 F6 | 	mov	arg01, local02
220c8     10 15 02 F6 | 	mov	arg02, local02
220cc     E4 EF BF FD | 	call	#__system___float_mul
220d0     FD 20 02 F6 | 	mov	local02, result1
220d4     C8 FF 9F FD | 	jmp	#LR__3182
220d8                 | LR__3184
220d8     00 24 0E F2 | 	cmp	local04, #0 wz
220dc     14 00 90 AD |  if_e	jmp	#LR__3185
220e0     0F 13 02 F6 | 	mov	arg01, local01
220e4     13 15 02 F6 | 	mov	arg02, local05
220e8     CC F1 BF FD | 	call	#__system___float_div
220ec     FD 26 02 F6 | 	mov	local05, result1
220f0     2C 00 90 FD | 	jmp	#LR__3187
220f4                 | LR__3185
220f4     0F 13 02 F6 | 	mov	arg01, local01
220f8     00 C0 1F FF 
220fc     00 14 06 F6 | 	mov	arg02, ##1065353216
22100     01 16 06 F6 | 	mov	arg03, #1
22104     E0 F3 BF FD | 	call	#__system___float_cmp
22108     00 FA 0D F2 | 	cmp	result1, #0 wz
2210c     10 00 90 AD |  if_e	jmp	#LR__3186
22110     0F 13 02 F6 | 	mov	arg01, local01
22114     13 15 02 F6 | 	mov	arg02, local05
22118     98 EF BF FD | 	call	#__system___float_mul
2211c     FD 26 02 F6 | 	mov	local05, result1
22120                 | LR__3186
22120                 | LR__3187
22120     13 FB 01 F6 | 	mov	result1, local05
22124                 | LR__3188
22124     A7 F0 03 F6 | 	mov	ptra, fp
22128     B2 00 A0 FD | 	call	#popregs_
2212c                 | __system___float_pow_n_ret
2212c     2D 00 64 FD | 	ret
22130                 | 
22130                 | __system___gc_ptrs
22130     EC 00 02 F6 | 	mov	_var01, __heap_ptr
22134     00 03 02 F6 | 	mov	_var02, _var01
22138     76 01 00 FF 
2213c     F8 03 06 F1 | 	add	_var02, ##191992
22140     00 FD 09 FB | 	rdlong	result2, _var01 wz
22144     74 00 90 5D |  if_ne	jmp	#LR__3190
22148     01 FD 01 F6 | 	mov	result2, _var02
2214c     00 FD 81 F1 | 	sub	result2, _var01
22150     00 03 58 FC | 	wrword	#1, _var01
22154     00 FB 01 F6 | 	mov	result1, _var01
22158     02 FA 05 F1 | 	add	result1, #2
2215c     36 00 80 FF 
22160     FD 20 59 FC | 	wrword	##27792, result1
22164     00 FB 01 F6 | 	mov	result1, _var01
22168     04 FA 05 F1 | 	add	result1, #4
2216c     FD 00 58 FC | 	wrword	#0, result1
22170     00 FB 01 F6 | 	mov	result1, _var01
22174     06 FA 05 F1 | 	add	result1, #6
22178     FD 02 58 FC | 	wrword	#1, result1
2217c     10 00 06 F1 | 	add	_var01, #16
22180     FE FC 51 F6 | 	abs	result2, result2 wc
22184     04 FC 45 F0 | 	shr	result2, #4
22188     FE FC 81 F6 | 	negc	result2, result2
2218c     00 FD 51 FC | 	wrword	result2, _var01
22190     00 FD 01 F6 | 	mov	result2, _var01
22194     02 FC 05 F1 | 	add	result2, #2
22198     36 00 80 FF 
2219c     FE 1E 59 FC | 	wrword	##27791, result2
221a0     00 FD 01 F6 | 	mov	result2, _var01
221a4     04 FC 05 F1 | 	add	result2, #4
221a8     FE 00 58 FC | 	wrword	#0, result2
221ac     00 FD 01 F6 | 	mov	result2, _var01
221b0     06 FC 05 F1 | 	add	result2, #6
221b4     FE 00 58 FC | 	wrword	#0, result2
221b8     10 00 86 F1 | 	sub	_var01, #16
221bc                 | LR__3190
221bc     00 FB 01 F6 | 	mov	result1, _var01
221c0     01 FD 01 F6 | 	mov	result2, _var02
221c4                 | __system___gc_ptrs_ret
221c4     2D 00 64 FD | 	ret
221c8                 | 
221c8                 | __system___gc_tryalloc
221c8     0B 4A 05 F6 | 	mov	COUNT_, #11
221cc     A8 00 A0 FD | 	call	#pushregs_
221d0     09 1F 02 F6 | 	mov	local01, arg01
221d4     0A 21 02 F6 | 	mov	local02, arg02
221d8     54 FF BF FD | 	call	#__system___gc_ptrs
221dc     FD 22 02 F6 | 	mov	local03, result1
221e0     FE 24 02 F6 | 	mov	local04, result2
221e4     11 27 02 F6 | 	mov	local05, local03
221e8     00 28 06 F6 | 	mov	local06, #0
221ec     97 1E 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
221f0                 | LR__3200
221f0     13 2B 02 F6 | 	mov	local07, local05
221f4     06 26 06 F1 | 	add	local05, #6
221f8     13 15 EA FA | 	rdword	arg02, local05 wz
221fc     11 13 02 F6 | 	mov	arg01, local03
22200     00 FA 05 A6 |  if_e	mov	result1, #0
22204     04 14 66 50 |  if_ne	shl	arg02, #4
22208     0A 13 02 51 |  if_ne	add	arg01, arg02
2220c     09 FB 01 56 |  if_ne	mov	result1, arg01
22210     FD 26 0A F6 | 	mov	local05, result1 wz
22214     13 29 E2 5A |  if_ne	rdword	local06, local05
22218     00 26 0E F2 | 	cmp	local05, #0 wz
2221c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
22220     08 00 90 1D |  if_a	jmp	#LR__3202
22224     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
22228     C4 FF 9F 1D |  if_a	jmp	#LR__3200
2222c                 | LR__3201
2222c                 | LR__3202
2222c     00 26 0E F2 | 	cmp	local05, #0 wz
22230     13 FB 01 A6 |  if_e	mov	result1, local05
22234     3C 01 90 AD |  if_e	jmp	#LR__3205
22238     13 FD 01 F6 | 	mov	result2, local05
2223c     06 FC 05 F1 | 	add	result2, #6
22240     FE 2C E2 FA | 	rdword	local08, result2
22244     14 1F 52 F2 | 	cmps	local01, local06 wc
22248     C0 00 90 3D |  if_ae	jmp	#LR__3204
2224c     13 1F 52 FC | 	wrword	local01, local05
22250     13 13 02 F6 | 	mov	arg01, local05
22254     0F 2D 02 F6 | 	mov	local08, local01
22258     04 2C 66 F0 | 	shl	local08, #4
2225c     16 13 02 F1 | 	add	arg01, local08
22260     0F 29 82 F1 | 	sub	local06, local01
22264     09 29 52 FC | 	wrword	local06, arg01
22268     09 2D 02 F6 | 	mov	local08, arg01
2226c     02 2C 06 F1 | 	add	local08, #2
22270     36 00 80 FF 
22274     16 1F 59 FC | 	wrword	##27791, local08
22278     13 15 0A F6 | 	mov	arg02, local05 wz
2227c     00 FA 05 A6 |  if_e	mov	result1, #0
22280     11 15 82 51 |  if_ne	sub	arg02, local03
22284     04 14 46 50 |  if_ne	shr	arg02, #4
22288     0A FB 01 56 |  if_ne	mov	result1, arg02
2228c     09 2D 02 F6 | 	mov	local08, arg01
22290     04 2C 06 F1 | 	add	local08, #4
22294     16 FB 51 FC | 	wrword	result1, local08
22298     13 2D 02 F6 | 	mov	local08, local05
2229c     06 2C 06 F1 | 	add	local08, #6
222a0     09 15 02 F6 | 	mov	arg02, arg01
222a4     16 2D E2 FA | 	rdword	local08, local08
222a8     06 14 06 F1 | 	add	arg02, #6
222ac     0A 2D 52 FC | 	wrword	local08, arg02
222b0     09 2F 02 F6 | 	mov	local09, arg01
222b4     17 15 0A F6 | 	mov	arg02, local09 wz
222b8     00 FA 05 A6 |  if_e	mov	result1, #0
222bc     11 15 82 51 |  if_ne	sub	arg02, local03
222c0     04 14 46 50 |  if_ne	shr	arg02, #4
222c4     0A FB 01 56 |  if_ne	mov	result1, arg02
222c8     FD 2C 02 F6 | 	mov	local08, result1
222cc     09 31 EA FA | 	rdword	local10, arg01 wz
222d0     00 FA 05 A6 |  if_e	mov	result1, #0
222d4     04 30 66 50 |  if_ne	shl	local10, #4
222d8     18 13 02 51 |  if_ne	add	arg01, local10
222dc     09 FB 01 56 |  if_ne	mov	result1, arg01
222e0     FD 32 0A F6 | 	mov	local11, result1 wz
222e4     24 00 90 AD |  if_e	jmp	#LR__3203
222e8     12 33 52 F2 | 	cmps	local11, local04 wc
222ec     1C 00 90 3D |  if_ae	jmp	#LR__3203
222f0     17 15 0A F6 | 	mov	arg02, local09 wz
222f4     00 FA 05 A6 |  if_e	mov	result1, #0
222f8     11 15 82 51 |  if_ne	sub	arg02, local03
222fc     04 14 46 50 |  if_ne	shr	arg02, #4
22300     0A FB 01 56 |  if_ne	mov	result1, arg02
22304     04 32 06 F1 | 	add	local11, #4
22308     19 FB 51 FC | 	wrword	result1, local11
2230c                 | LR__3203
2230c                 | LR__3204
2230c     06 2A 06 F1 | 	add	local07, #6
22310     15 2D 52 FC | 	wrword	local08, local07
22314     36 00 00 FF 
22318     80 2E 06 F6 | 	mov	local09, ##27776
2231c     10 2F 42 F5 | 	or	local09, local02
22320     00 FA 05 F6 | 	mov	result1, #0
22324     01 FA 61 FD | 	cogid	result1
22328     FD 2E 42 F5 | 	or	local09, result1
2232c     13 33 02 F6 | 	mov	local11, local05
22330     02 32 06 F1 | 	add	local11, #2
22334     19 2F 52 FC | 	wrword	local09, local11
22338     11 2F 02 F6 | 	mov	local09, local03
2233c     08 2E 06 F1 | 	add	local09, #8
22340     13 33 02 F6 | 	mov	local11, local05
22344     17 2F E2 FA | 	rdword	local09, local09
22348     06 32 06 F1 | 	add	local11, #6
2234c     19 2F 52 FC | 	wrword	local09, local11
22350     13 15 0A F6 | 	mov	arg02, local05 wz
22354     00 FA 05 A6 |  if_e	mov	result1, #0
22358     11 15 82 51 |  if_ne	sub	arg02, local03
2235c     04 14 46 50 |  if_ne	shr	arg02, #4
22360     0A FB 01 56 |  if_ne	mov	result1, arg02
22364     08 22 06 F1 | 	add	local03, #8
22368     11 FB 51 FC | 	wrword	result1, local03
2236c     08 26 06 F1 | 	add	local05, #8
22370     13 FB 01 F6 | 	mov	result1, local05
22374                 | LR__3205
22374     A7 F0 03 F6 | 	mov	ptra, fp
22378     B2 00 A0 FD | 	call	#popregs_
2237c                 | __system___gc_tryalloc_ret
2237c     2D 00 64 FD | 	ret
22380                 | 
22380                 | __system___gc_alloc_managed
22380     01 4A 05 F6 | 	mov	COUNT_, #1
22384     A8 00 A0 FD | 	call	#pushregs_
22388     09 1F 02 F6 | 	mov	local01, arg01
2238c     00 14 06 F6 | 	mov	arg02, #0
22390     1C 00 B0 FD | 	call	#__system___gc_doalloc
22394     FD 14 0A F6 | 	mov	arg02, result1 wz
22398     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
2239c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
223a0     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
223a4     A7 F0 03 F6 | 	mov	ptra, fp
223a8     B2 00 A0 FD | 	call	#popregs_
223ac                 | __system___gc_alloc_managed_ret
223ac     2D 00 64 FD | 	ret
223b0                 | 
223b0                 | __system___gc_doalloc
223b0     06 4A 05 F6 | 	mov	COUNT_, #6
223b4     A8 00 A0 FD | 	call	#pushregs_
223b8     09 1F 0A F6 | 	mov	local01, arg01 wz
223bc     0A 21 02 F6 | 	mov	local02, arg02
223c0     00 FA 05 A6 |  if_e	mov	result1, #0
223c4     8C 00 90 AD |  if_e	jmp	#LR__3217
223c8     17 1E 06 F1 | 	add	local01, #23
223cc     0F 1E 26 F5 | 	andn	local01, #15
223d0     04 1E 46 F0 | 	shr	local01, #4
223d4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
223d8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
223dc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
223e0     54 C1 BF FD | 	call	#__system___lockmem
223e4     0F 13 02 F6 | 	mov	arg01, local01
223e8     10 15 02 F6 | 	mov	arg02, local02
223ec     D8 FD BF FD | 	call	#__system___gc_tryalloc
223f0     FD 22 0A F6 | 	mov	local03, result1 wz
223f4     14 00 90 5D |  if_ne	jmp	#LR__3210
223f8     70 03 B0 FD | 	call	#__system___gc_docollect
223fc     0F 13 02 F6 | 	mov	arg01, local01
22400     10 15 02 F6 | 	mov	arg02, local02
22404     C0 FD BF FD | 	call	#__system___gc_tryalloc
22408     FD 22 02 F6 | 	mov	local03, result1
2240c                 | LR__3210
2240c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22410     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22414     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22418     09 01 68 FC | 	wrlong	#0, arg01
2241c     00 22 0E F2 | 	cmp	local03, #0 wz
22420     2C 00 90 AD |  if_e	jmp	#LR__3216
22424     04 1E 66 F0 | 	shl	local01, #4
22428     08 1E 86 F1 | 	sub	local01, #8
2242c     0F 25 52 F6 | 	abs	local04, local01 wc
22430     02 24 46 F0 | 	shr	local04, #2
22434     12 27 8A F6 | 	negc	local05, local04 wz
22438     11 29 02 F6 | 	mov	local06, local03
2243c     10 00 90 AD |  if_e	jmp	#LR__3215
22440     97 06 48 FB | 	callpa	#(@LR__3213-@LR__3211)>>2,fcache_load_ptr_
22444                 | LR__3211
22444     13 05 D8 FC | 	rep	@LR__3214, local05
22448                 | LR__3212
22448     14 01 68 FC | 	wrlong	#0, local06
2244c     04 28 06 F1 | 	add	local06, #4
22450                 | LR__3213
22450                 | LR__3214
22450                 | LR__3215
22450                 | LR__3216
22450     11 FB 01 F6 | 	mov	result1, local03
22454                 | LR__3217
22454     A7 F0 03 F6 | 	mov	ptra, fp
22458     B2 00 A0 FD | 	call	#popregs_
2245c                 | __system___gc_doalloc_ret
2245c     2D 00 64 FD | 	ret
22460                 | 
22460                 | __system___gc_isvalidptr
22460     F8 16 06 F4 | 	bitl	arg03, #248
22464     08 16 86 F1 | 	sub	arg03, #8
22468     09 17 52 F2 | 	cmps	arg03, arg01 wc
2246c     08 00 90 CD |  if_b	jmp	#LR__3220
22470     0A 17 52 F2 | 	cmps	arg03, arg02 wc
22474     08 00 90 CD |  if_b	jmp	#LR__3221
22478                 | LR__3220
22478     00 FA 05 F6 | 	mov	result1, #0
2247c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
22480                 | LR__3221
22480     0B 01 02 F6 | 	mov	_var01, arg03
22484     09 01 62 F5 | 	xor	_var01, arg01
22488     0F 00 CE F7 | 	test	_var01, #15 wz
2248c     00 FA 05 56 |  if_ne	mov	result1, #0
22490     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
22494     0B 01 02 F6 | 	mov	_var01, arg03
22498     02 00 06 F1 | 	add	_var01, #2
2249c     00 01 E2 FA | 	rdword	_var01, _var01
224a0     7F 00 00 FF 
224a4     C0 01 06 F5 | 	and	_var01, ##65472
224a8     36 00 00 FF 
224ac     80 00 0E F2 | 	cmp	_var01, ##27776 wz
224b0     00 FA 05 56 |  if_ne	mov	result1, #0
224b4     0B FB 01 A6 |  if_e	mov	result1, arg03
224b8                 | __system___gc_isvalidptr_ret
224b8     2D 00 64 FD | 	ret
224bc                 | 
224bc                 | __system___gc_free
224bc     09 17 02 F6 | 	mov	arg03, arg01
224c0     6C FC BF FD | 	call	#__system___gc_ptrs
224c4     FD 12 02 F6 | 	mov	arg01, result1
224c8     FE 14 02 F6 | 	mov	arg02, result2
224cc     90 FF BF FD | 	call	#__system___gc_isvalidptr
224d0     FD 14 0A F6 | 	mov	arg02, result1 wz
224d4     28 00 90 AD |  if_e	jmp	#LR__3230
224d8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
224dc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
224e0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
224e4     50 C0 BF FD | 	call	#__system___lockmem
224e8     0A 13 02 F6 | 	mov	arg01, arg02
224ec     14 00 B0 FD | 	call	#__system___gc_dofree
224f0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
224f4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
224f8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
224fc     09 01 68 FC | 	wrlong	#0, arg01
22500                 | LR__3230
22500                 | __system___gc_free_ret
22500     2D 00 64 FD | 	ret
22504                 | 
22504                 | __system___gc_dofree
22504     06 4A 05 F6 | 	mov	COUNT_, #6
22508     A8 00 A0 FD | 	call	#pushregs_
2250c     09 1F 02 F6 | 	mov	local01, arg01
22510     1C FC BF FD | 	call	#__system___gc_ptrs
22514     FD 20 02 F6 | 	mov	local02, result1
22518     FE 22 02 F6 | 	mov	local03, result2
2251c     0F 15 02 F6 | 	mov	arg02, local01
22520     02 14 06 F1 | 	add	arg02, #2
22524     36 00 80 FF 
22528     0A 1F 59 FC | 	wrword	##27791, arg02
2252c     0F 25 02 F6 | 	mov	local04, local01
22530     0F 13 02 F6 | 	mov	arg01, local01
22534     09 27 EA FA | 	rdword	local05, arg01 wz
22538     00 FA 05 A6 |  if_e	mov	result1, #0
2253c     04 26 66 50 |  if_ne	shl	local05, #4
22540     13 13 02 51 |  if_ne	add	arg01, local05
22544     09 FB 01 56 |  if_ne	mov	result1, arg01
22548     FD 28 02 F6 | 	mov	local06, result1
2254c     97 24 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
22550                 | LR__3240
22550     04 24 06 F1 | 	add	local04, #4
22554     12 15 EA FA | 	rdword	arg02, local04 wz
22558     10 13 02 F6 | 	mov	arg01, local02
2255c     00 FA 05 A6 |  if_e	mov	result1, #0
22560     04 14 66 50 |  if_ne	shl	arg02, #4
22564     0A 13 02 51 |  if_ne	add	arg01, arg02
22568     09 FB 01 56 |  if_ne	mov	result1, arg01
2256c     FD 24 0A F6 | 	mov	local04, result1 wz
22570     24 00 90 AD |  if_e	jmp	#LR__3242
22574     12 13 02 F6 | 	mov	arg01, local04
22578     00 FA 05 F6 | 	mov	result1, #0
2257c     02 12 06 F1 | 	add	arg01, #2
22580     09 13 E2 FA | 	rdword	arg01, arg01
22584     36 00 00 FF 
22588     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2258c     01 FA 65 A6 |  if_e	neg	result1, #1
22590     00 FA 0D F2 | 	cmp	result1, #0 wz
22594     B8 FF 9F AD |  if_e	jmp	#LR__3240
22598                 | LR__3241
22598                 | LR__3242
22598     00 24 0E F2 | 	cmp	local04, #0 wz
2259c     10 25 02 A6 |  if_e	mov	local04, local02
225a0     12 15 02 F6 | 	mov	arg02, local04
225a4     06 14 06 F1 | 	add	arg02, #6
225a8     0F 13 02 F6 | 	mov	arg01, local01
225ac     0A 15 E2 FA | 	rdword	arg02, arg02
225b0     06 12 06 F1 | 	add	arg01, #6
225b4     09 15 52 FC | 	wrword	arg02, arg01
225b8     0F 15 0A F6 | 	mov	arg02, local01 wz
225bc     00 FA 05 A6 |  if_e	mov	result1, #0
225c0     10 15 82 51 |  if_ne	sub	arg02, local02
225c4     04 14 46 50 |  if_ne	shr	arg02, #4
225c8     0A FB 01 56 |  if_ne	mov	result1, arg02
225cc     12 15 02 F6 | 	mov	arg02, local04
225d0     06 14 06 F1 | 	add	arg02, #6
225d4     0A FB 51 FC | 	wrword	result1, arg02
225d8     10 25 0A F2 | 	cmp	local04, local02 wz
225dc     A4 00 90 AD |  if_e	jmp	#LR__3245
225e0     12 13 02 F6 | 	mov	arg01, local04
225e4     09 27 EA FA | 	rdword	local05, arg01 wz
225e8     00 FA 05 A6 |  if_e	mov	result1, #0
225ec     04 26 66 50 |  if_ne	shl	local05, #4
225f0     13 13 02 51 |  if_ne	add	arg01, local05
225f4     09 FB 01 56 |  if_ne	mov	result1, arg01
225f8     0F FB 09 F2 | 	cmp	result1, local01 wz
225fc     84 00 90 5D |  if_ne	jmp	#LR__3244
22600     12 29 E2 FA | 	rdword	local06, local04
22604     0F 15 E2 FA | 	rdword	arg02, local01
22608     0A 29 02 F1 | 	add	local06, arg02
2260c     12 29 52 FC | 	wrword	local06, local04
22610     0F 29 02 F6 | 	mov	local06, local01
22614     02 28 06 F1 | 	add	local06, #2
22618     14 01 58 FC | 	wrword	#0, local06
2261c     0F 13 02 F6 | 	mov	arg01, local01
22620     09 27 EA FA | 	rdword	local05, arg01 wz
22624     00 FA 05 A6 |  if_e	mov	result1, #0
22628     04 26 66 50 |  if_ne	shl	local05, #4
2262c     13 13 02 51 |  if_ne	add	arg01, local05
22630     09 FB 01 56 |  if_ne	mov	result1, arg01
22634     FD 28 02 F6 | 	mov	local06, result1
22638     11 29 52 F2 | 	cmps	local06, local03 wc
2263c     20 00 90 3D |  if_ae	jmp	#LR__3243
22640     12 15 0A F6 | 	mov	arg02, local04 wz
22644     00 FA 05 A6 |  if_e	mov	result1, #0
22648     10 15 82 51 |  if_ne	sub	arg02, local02
2264c     04 14 46 50 |  if_ne	shr	arg02, #4
22650     0A FB 01 56 |  if_ne	mov	result1, arg02
22654     14 15 02 F6 | 	mov	arg02, local06
22658     04 14 06 F1 | 	add	arg02, #4
2265c     0A FB 51 FC | 	wrword	result1, arg02
22660                 | LR__3243
22660     0F 15 02 F6 | 	mov	arg02, local01
22664     06 14 06 F1 | 	add	arg02, #6
22668     12 FD 01 F6 | 	mov	result2, local04
2266c     0A 15 E2 FA | 	rdword	arg02, arg02
22670     06 FC 05 F1 | 	add	result2, #6
22674     FE 14 52 FC | 	wrword	arg02, result2
22678     06 1E 06 F1 | 	add	local01, #6
2267c     0F 01 58 FC | 	wrword	#0, local01
22680     12 1F 02 F6 | 	mov	local01, local04
22684                 | LR__3244
22684                 | LR__3245
22684     0F 13 02 F6 | 	mov	arg01, local01
22688     09 27 EA FA | 	rdword	local05, arg01 wz
2268c     00 FA 05 A6 |  if_e	mov	result1, #0
22690     04 26 66 50 |  if_ne	shl	local05, #4
22694     13 13 02 51 |  if_ne	add	arg01, local05
22698     09 FB 01 56 |  if_ne	mov	result1, arg01
2269c     FD 14 0A F6 | 	mov	arg02, result1 wz
226a0     B8 00 90 AD |  if_e	jmp	#LR__3247
226a4     11 15 52 F2 | 	cmps	arg02, local03 wc
226a8     B0 00 90 3D |  if_ae	jmp	#LR__3247
226ac     0A 13 02 F6 | 	mov	arg01, arg02
226b0     00 FA 05 F6 | 	mov	result1, #0
226b4     02 12 06 F1 | 	add	arg01, #2
226b8     09 13 E2 FA | 	rdword	arg01, arg01
226bc     36 00 00 FF 
226c0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
226c4     01 FA 65 A6 |  if_e	neg	result1, #1
226c8     00 FA 0D F2 | 	cmp	result1, #0 wz
226cc     8C 00 90 AD |  if_e	jmp	#LR__3247
226d0     0F 25 02 F6 | 	mov	local04, local01
226d4     12 29 E2 FA | 	rdword	local06, local04
226d8     0A 13 02 F6 | 	mov	arg01, arg02
226dc     09 1F E2 FA | 	rdword	local01, arg01
226e0     0F 29 02 F1 | 	add	local06, local01
226e4     12 29 52 FC | 	wrword	local06, local04
226e8     09 29 02 F6 | 	mov	local06, arg01
226ec     06 28 06 F1 | 	add	local06, #6
226f0     12 1F 02 F6 | 	mov	local01, local04
226f4     14 29 E2 FA | 	rdword	local06, local06
226f8     06 1E 06 F1 | 	add	local01, #6
226fc     0F 29 52 FC | 	wrword	local06, local01
22700     09 29 02 F6 | 	mov	local06, arg01
22704     02 28 06 F1 | 	add	local06, #2
22708     14 55 59 FC | 	wrword	#170, local06
2270c     09 29 02 F6 | 	mov	local06, arg01
22710     06 28 06 F1 | 	add	local06, #6
22714     14 01 58 FC | 	wrword	#0, local06
22718     09 27 EA FA | 	rdword	local05, arg01 wz
2271c     00 FA 05 A6 |  if_e	mov	result1, #0
22720     04 26 66 50 |  if_ne	shl	local05, #4
22724     13 13 02 51 |  if_ne	add	arg01, local05
22728     09 FB 01 56 |  if_ne	mov	result1, arg01
2272c     FD 28 0A F6 | 	mov	local06, result1 wz
22730     28 00 90 AD |  if_e	jmp	#LR__3246
22734     11 29 52 F2 | 	cmps	local06, local03 wc
22738     20 00 90 3D |  if_ae	jmp	#LR__3246
2273c     12 15 0A F6 | 	mov	arg02, local04 wz
22740     00 FA 05 A6 |  if_e	mov	result1, #0
22744     10 15 82 51 |  if_ne	sub	arg02, local02
22748     04 14 46 50 |  if_ne	shr	arg02, #4
2274c     0A FB 01 56 |  if_ne	mov	result1, arg02
22750     14 25 02 F6 | 	mov	local04, local06
22754     04 24 06 F1 | 	add	local04, #4
22758     12 FB 51 FC | 	wrword	result1, local04
2275c                 | LR__3246
2275c                 | LR__3247
2275c     14 FB 01 F6 | 	mov	result1, local06
22760     A7 F0 03 F6 | 	mov	ptra, fp
22764     B2 00 A0 FD | 	call	#popregs_
22768                 | __system___gc_dofree_ret
22768     2D 00 64 FD | 	ret
2276c                 | 
2276c                 | __system___gc_docollect
2276c     05 4A 05 F6 | 	mov	COUNT_, #5
22770     A8 00 A0 FD | 	call	#pushregs_
22774     B8 F9 BF FD | 	call	#__system___gc_ptrs
22778     FE 1E 02 F6 | 	mov	local01, result2
2277c     FD 20 02 F6 | 	mov	local02, result1
22780     10 13 02 F6 | 	mov	arg01, local02
22784     09 23 EA FA | 	rdword	local03, arg01 wz
22788     00 FA 05 A6 |  if_e	mov	result1, #0
2278c     04 22 66 50 |  if_ne	shl	local03, #4
22790     11 13 02 51 |  if_ne	add	arg01, local03
22794     09 FB 01 56 |  if_ne	mov	result1, arg01
22798     FD 24 0A F6 | 	mov	local04, result1 wz
2279c     00 FA 05 F6 | 	mov	result1, #0
227a0     01 FA 61 FD | 	cogid	result1
227a4     FD 26 02 F6 | 	mov	local05, result1
227a8     48 00 90 AD |  if_e	jmp	#LR__3252
227ac     97 22 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
227b0                 | LR__3250
227b0     0F 25 52 F2 | 	cmps	local04, local01 wc
227b4     3C 00 90 3D |  if_ae	jmp	#LR__3252
227b8     12 15 02 F6 | 	mov	arg02, local04
227bc     02 14 06 F1 | 	add	arg02, #2
227c0     0A 15 E2 FA | 	rdword	arg02, arg02
227c4     20 14 26 F5 | 	andn	arg02, #32
227c8     12 13 02 F6 | 	mov	arg01, local04
227cc     02 12 06 F1 | 	add	arg01, #2
227d0     09 15 52 FC | 	wrword	arg02, arg01
227d4     12 13 02 F6 | 	mov	arg01, local04
227d8     09 23 EA FA | 	rdword	local03, arg01 wz
227dc     00 FA 05 A6 |  if_e	mov	result1, #0
227e0     04 22 66 50 |  if_ne	shl	local03, #4
227e4     11 13 02 51 |  if_ne	add	arg01, local03
227e8     09 FB 01 56 |  if_ne	mov	result1, arg01
227ec     FD 24 0A F6 | 	mov	local04, result1 wz
227f0     BC FF 9F 5D |  if_ne	jmp	#LR__3250
227f4                 | LR__3251
227f4                 | LR__3252
227f4     00 22 06 F6 | 	mov	local03, #0
227f8     00 12 06 F6 | 	mov	arg01, #0
227fc     10 BD BF FD | 	call	#__system____topofstack
22800     FD 14 02 F6 | 	mov	arg02, result1
22804     11 13 02 F6 | 	mov	arg01, local03
22808     90 00 B0 FD | 	call	#__system___gc_markhub
2280c     1C 01 B0 FD | 	call	#__system___gc_markcog
22810     10 13 02 F6 | 	mov	arg01, local02
22814     09 23 EA FA | 	rdword	local03, arg01 wz
22818     00 FA 05 A6 |  if_e	mov	result1, #0
2281c     04 22 66 50 |  if_ne	shl	local03, #4
22820     11 13 02 51 |  if_ne	add	arg01, local03
22824     09 FB 01 56 |  if_ne	mov	result1, arg01
22828     FD 20 0A F6 | 	mov	local02, result1 wz
2282c     60 00 90 AD |  if_e	jmp	#LR__3256
22830                 | LR__3253
22830     10 25 02 F6 | 	mov	local04, local02
22834     12 13 02 F6 | 	mov	arg01, local04
22838     09 23 EA FA | 	rdword	local03, arg01 wz
2283c     00 FA 05 A6 |  if_e	mov	result1, #0
22840     04 22 66 50 |  if_ne	shl	local03, #4
22844     11 13 02 51 |  if_ne	add	arg01, local03
22848     09 FB 01 56 |  if_ne	mov	result1, arg01
2284c     FD 20 02 F6 | 	mov	local02, result1
22850     12 15 02 F6 | 	mov	arg02, local04
22854     02 14 06 F1 | 	add	arg02, #2
22858     0A 15 E2 FA | 	rdword	arg02, arg02
2285c     20 14 CE F7 | 	test	arg02, #32 wz
22860     10 14 CE A7 |  if_e	test	arg02, #16 wz
22864     1C 00 90 5D |  if_ne	jmp	#LR__3255
22868     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2286c     13 15 0A F2 | 	cmp	arg02, local05 wz
22870     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
22874     0C 00 90 5D |  if_ne	jmp	#LR__3254
22878     12 13 02 F6 | 	mov	arg01, local04
2287c     84 FC BF FD | 	call	#__system___gc_dofree
22880     FD 20 02 F6 | 	mov	local02, result1
22884                 | LR__3254
22884                 | LR__3255
22884     00 20 0E F2 | 	cmp	local02, #0 wz
22888     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
2288c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3253
22890                 | LR__3256
22890     A7 F0 03 F6 | 	mov	ptra, fp
22894     B2 00 A0 FD | 	call	#popregs_
22898                 | __system___gc_docollect_ret
22898     2D 00 64 FD | 	ret
2289c                 | 
2289c                 | __system___gc_markhub
2289c     04 4A 05 F6 | 	mov	COUNT_, #4
228a0     A8 00 A0 FD | 	call	#pushregs_
228a4     09 1F 02 F6 | 	mov	local01, arg01
228a8     0A 21 02 F6 | 	mov	local02, arg02
228ac     80 F8 BF FD | 	call	#__system___gc_ptrs
228b0     FD 22 02 F6 | 	mov	local03, result1
228b4     FE 24 02 F6 | 	mov	local04, result2
228b8                 | LR__3260
228b8     10 1F 52 F2 | 	cmps	local01, local02 wc
228bc     60 00 90 3D |  if_ae	jmp	#LR__3261
228c0     0F 17 02 FB | 	rdlong	arg03, local01
228c4     04 1E 06 F1 | 	add	local01, #4
228c8     12 15 02 F6 | 	mov	arg02, local04
228cc     11 13 02 F6 | 	mov	arg01, local03
228d0     8C FB BF FD | 	call	#__system___gc_isvalidptr
228d4     FD 16 0A F6 | 	mov	arg03, result1 wz
228d8     DC FF 9F AD |  if_e	jmp	#LR__3260
228dc     0B 13 02 F6 | 	mov	arg01, arg03
228e0     00 FA 05 F6 | 	mov	result1, #0
228e4     02 12 06 F1 | 	add	arg01, #2
228e8     09 13 E2 FA | 	rdword	arg01, arg01
228ec     36 00 00 FF 
228f0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
228f4     01 FA 65 A6 |  if_e	neg	result1, #1
228f8     00 FA 0D F2 | 	cmp	result1, #0 wz
228fc     B8 FF 9F 5D |  if_ne	jmp	#LR__3260
22900     0B FD 01 F6 | 	mov	result2, arg03
22904     02 FC 05 F1 | 	add	result2, #2
22908     FE FC E1 FA | 	rdword	result2, result2
2290c     0F FC 25 F5 | 	andn	result2, #15
22910     2E FC 45 F5 | 	or	result2, #46
22914     02 16 06 F1 | 	add	arg03, #2
22918     0B FD 51 FC | 	wrword	result2, arg03
2291c     98 FF 9F FD | 	jmp	#LR__3260
22920                 | LR__3261
22920     A7 F0 03 F6 | 	mov	ptra, fp
22924     B2 00 A0 FD | 	call	#popregs_
22928                 | __system___gc_markhub_ret
22928     2D 00 64 FD | 	ret
2292c                 | 
2292c                 | __system___gc_markcog
2292c     04 4A 05 F6 | 	mov	COUNT_, #4
22930     A8 00 A0 FD | 	call	#pushregs_
22934     F8 F7 BF FD | 	call	#__system___gc_ptrs
22938     FD 1E 02 F6 | 	mov	local01, result1
2293c     FE 20 02 F6 | 	mov	local02, result2
22940     EF 23 06 F6 | 	mov	local03, #495
22944                 | LR__3270
22944                 | 	'.live	local03
22944     00 22 96 F9 | 	alts	local03, #0
22948     11 25 02 F6 | 	mov	local04, local03
2294c     0F 13 02 F6 | 	mov	arg01, local01
22950     10 15 02 F6 | 	mov	arg02, local02
22954     12 17 02 F6 | 	mov	arg03, local04
22958     04 FB BF FD | 	call	#__system___gc_isvalidptr
2295c     00 FA 0D F2 | 	cmp	result1, #0 wz
22960     18 00 90 AD |  if_e	jmp	#LR__3271
22964     FD 24 02 F6 | 	mov	local04, result1
22968     02 24 06 F1 | 	add	local04, #2
2296c     12 25 E2 FA | 	rdword	local04, local04
22970     20 24 46 F5 | 	or	local04, #32
22974     02 FA 05 F1 | 	add	result1, #2
22978     FD 24 52 FC | 	wrword	local04, result1
2297c                 | LR__3271
2297c     01 22 86 F1 | 	sub	local03, #1
22980     00 22 56 F2 | 	cmps	local03, #0 wc
22984     BC FF 9F 3D |  if_ae	jmp	#LR__3270
22988     A7 F0 03 F6 | 	mov	ptra, fp
2298c     B2 00 A0 FD | 	call	#popregs_
22990                 | __system___gc_markcog_ret
22990     2D 00 64 FD | 	ret
22994                 | 
22994                 | __system__opendir
22994     06 4A 05 F6 | 	mov	COUNT_, #6
22998     A8 00 A0 FD | 	call	#pushregs_
2299c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
229a0     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
229a4     09 15 02 F6 | 	mov	arg02, arg01
229a8     0F 13 02 F6 | 	mov	arg01, local01
229ac     00 16 06 F6 | 	mov	arg03, #0
229b0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
229b4     18 C3 BF FD | 	call	#__system____getvfsforfile
229b8     FD 20 0A F6 | 	mov	local02, result1 wz
229bc     10 00 90 AD |  if_e	jmp	#LR__3280
229c0     28 20 06 F1 | 	add	local02, #40
229c4     10 17 0A FB | 	rdlong	arg03, local02 wz
229c8     28 20 86 F1 | 	sub	local02, #40
229cc     14 00 90 5D |  if_ne	jmp	#LR__3281
229d0                 | LR__3280
229d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
229d4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
229d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
229dc     00 FA 05 F6 | 	mov	result1, #0
229e0     90 00 90 FD | 	jmp	#LR__3283
229e4                 | LR__3281
229e4     5C 12 06 F6 | 	mov	arg01, #92
229e8     10 14 06 F6 | 	mov	arg02, #16
229ec     C0 F9 BF FD | 	call	#__system___gc_doalloc
229f0     FD 22 0A F6 | 	mov	local03, result1 wz
229f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
229f8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
229fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22a00     00 FA 05 A6 |  if_e	mov	result1, #0
22a04     6C 00 90 AD |  if_e	jmp	#LR__3283
22a08     28 20 06 F1 | 	add	local02, #40
22a0c     10 25 02 FB | 	rdlong	local04, local02
22a10     12 27 02 F6 | 	mov	local05, local04
22a14     28 20 86 F1 | 	sub	local02, #40
22a18     13 26 46 F7 | 	zerox	local05, #19
22a1c     14 24 46 F0 | 	shr	local04, #20
22a20     02 24 66 F0 | 	shl	local04, #2
22a24     ED 24 02 F1 | 	add	local04, __methods__
22a28     12 25 02 FB | 	rdlong	local04, local04
22a2c     11 13 02 F6 | 	mov	arg01, local03
22a30     0F 15 02 F6 | 	mov	arg02, local01
22a34     F2 28 02 F6 | 	mov	local06, objptr
22a38     13 E5 01 F6 | 	mov	objptr, local05
22a3c     2D 24 62 FD | 	call	local04
22a40     14 E5 01 F6 | 	mov	objptr, local06
22a44     FD 16 0A F6 | 	mov	arg03, result1 wz
22a48     20 00 90 AD |  if_e	jmp	#LR__3282
22a4c     00 16 4E F2 | 	cmps	arg03, #0 wz
22a50     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22a54     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
22a58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22a5c     11 13 02 F6 | 	mov	arg01, local03
22a60     58 FA BF FD | 	call	#__system___gc_free
22a64     00 FA 05 F6 | 	mov	result1, #0
22a68     08 00 90 FD | 	jmp	#LR__3283
22a6c                 | LR__3282
22a6c     11 21 62 FC | 	wrlong	local02, local03
22a70     11 FB 01 F6 | 	mov	result1, local03
22a74                 | LR__3283
22a74     A7 F0 03 F6 | 	mov	ptra, fp
22a78     B2 00 A0 FD | 	call	#popregs_
22a7c                 | __system__opendir_ret
22a7c     2D 00 64 FD | 	ret
22a80                 | 
22a80                 | __system__closedir
22a80     04 4A 05 F6 | 	mov	COUNT_, #4
22a84     A8 00 A0 FD | 	call	#pushregs_
22a88     09 1F 02 F6 | 	mov	local01, arg01
22a8c     0F 13 02 FB | 	rdlong	arg01, local01
22a90     2C 12 06 F1 | 	add	arg01, #44
22a94     09 21 02 FB | 	rdlong	local02, arg01
22a98     10 23 02 F6 | 	mov	local03, local02
22a9c     13 22 46 F7 | 	zerox	local03, #19
22aa0     14 20 46 F0 | 	shr	local02, #20
22aa4     02 20 66 F0 | 	shl	local02, #2
22aa8     ED 20 02 F1 | 	add	local02, __methods__
22aac     10 21 02 FB | 	rdlong	local02, local02
22ab0     0F 13 02 F6 | 	mov	arg01, local01
22ab4     F2 24 02 F6 | 	mov	local04, objptr
22ab8     11 E5 01 F6 | 	mov	objptr, local03
22abc     2D 20 62 FD | 	call	local02
22ac0     12 E5 01 F6 | 	mov	objptr, local04
22ac4     FD 24 02 F6 | 	mov	local04, result1
22ac8     0F 13 02 F6 | 	mov	arg01, local01
22acc     EC F9 BF FD | 	call	#__system___gc_free
22ad0     00 24 4E F2 | 	cmps	local04, #0 wz
22ad4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22ad8     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
22adc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22ae0     01 FA 65 56 |  if_ne	neg	result1, #1
22ae4     00 FA 05 A6 |  if_e	mov	result1, #0
22ae8     A7 F0 03 F6 | 	mov	ptra, fp
22aec     B2 00 A0 FD | 	call	#popregs_
22af0                 | __system__closedir_ret
22af0     2D 00 64 FD | 	ret
22af4                 | 
22af4                 | __system__readdir
22af4     04 4A 05 F6 | 	mov	COUNT_, #4
22af8     A8 00 A0 FD | 	call	#pushregs_
22afc     09 15 0A FB | 	rdlong	arg02, arg01 wz
22b00     08 12 06 F1 | 	add	arg01, #8
22b04     09 1F 02 F6 | 	mov	local01, arg01
22b08     08 12 86 F1 | 	sub	arg01, #8
22b0c     00 FA 05 A6 |  if_e	mov	result1, #0
22b10     5C 00 90 AD |  if_e	jmp	#LR__3291
22b14     30 14 06 F1 | 	add	arg02, #48
22b18     0A 21 02 FB | 	rdlong	local02, arg02
22b1c     10 23 02 F6 | 	mov	local03, local02
22b20     13 22 46 F7 | 	zerox	local03, #19
22b24     14 20 46 F0 | 	shr	local02, #20
22b28     02 20 66 F0 | 	shl	local02, #2
22b2c     ED 20 02 F1 | 	add	local02, __methods__
22b30     10 21 02 FB | 	rdlong	local02, local02
22b34     0F 15 02 F6 | 	mov	arg02, local01
22b38     F2 24 02 F6 | 	mov	local04, objptr
22b3c     11 E5 01 F6 | 	mov	objptr, local03
22b40     2D 20 62 FD | 	call	local02
22b44     12 E5 01 F6 | 	mov	objptr, local04
22b48     00 FA 4D F2 | 	cmps	result1, #0 wz
22b4c     1C 00 90 AD |  if_e	jmp	#LR__3290
22b50     01 FA 55 F2 | 	cmps	result1, #1 wc
22b54     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
22b58     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
22b5c     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
22b60     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
22b64     00 FA 05 F6 | 	mov	result1, #0
22b68     04 00 90 FD | 	jmp	#LR__3291
22b6c                 | LR__3290
22b6c     0F FB 01 F6 | 	mov	result1, local01
22b70                 | LR__3291
22b70     A7 F0 03 F6 | 	mov	ptra, fp
22b74     B2 00 A0 FD | 	call	#popregs_
22b78                 | __system__readdir_ret
22b78     2D 00 64 FD | 	ret
22b7c                 | 
22b7c                 | __system___openraw
22b7c     15 4A 05 F6 | 	mov	COUNT_, #21
22b80     A8 00 A0 FD | 	call	#pushregs_
22b84     09 1F 02 F6 | 	mov	local01, arg01
22b88     0A 21 02 F6 | 	mov	local02, arg02
22b8c     0B 23 02 F6 | 	mov	local03, arg03
22b90     0C 25 02 F6 | 	mov	local04, arg04
22b94     04 26 06 F6 | 	mov	local05, #4
22b98     0F 29 02 F6 | 	mov	local06, local01
22b9c     00 2A 06 F6 | 	mov	local07, #0
22ba0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22ba4     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
22ba8     16 13 02 F6 | 	mov	arg01, local08
22bac     10 15 02 F6 | 	mov	arg02, local02
22bb0     00 16 06 F6 | 	mov	arg03, #0
22bb4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
22bb8     14 C1 BF FD | 	call	#__system____getvfsforfile
22bbc     FD 2E 0A F6 | 	mov	local09, result1 wz
22bc0     10 00 90 AD |  if_e	jmp	#LR__3300
22bc4     20 2E 06 F1 | 	add	local09, #32
22bc8     17 FB 09 FB | 	rdlong	result1, local09 wz
22bcc     20 2E 86 F1 | 	sub	local09, #32
22bd0     14 00 90 5D |  if_ne	jmp	#LR__3301
22bd4                 | LR__3300
22bd4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22bd8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
22bdc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22be0     01 FA 65 F6 | 	neg	result1, #1
22be4     8C 02 90 FD | 	jmp	#LR__3314
22be8                 | LR__3301
22be8     14 13 02 F6 | 	mov	arg01, local06
22bec     00 14 06 F6 | 	mov	arg02, #0
22bf0     34 16 06 F6 | 	mov	arg03, #52
22bf4     09 31 02 F6 | 	mov	local10, arg01
22bf8     98 00 A0 FD | 	call	#\builtin_bytefill_
22bfc     20 2E 06 F1 | 	add	local09, #32
22c00     17 33 02 FB | 	rdlong	local11, local09
22c04     19 35 02 F6 | 	mov	local12, local11
22c08     19 37 02 F6 | 	mov	local13, local11
22c0c     20 2E 86 F1 | 	sub	local09, #32
22c10     1B 39 02 F6 | 	mov	local14, local13
22c14     13 34 46 F7 | 	zerox	local12, #19
22c18     14 38 46 F0 | 	shr	local14, #20
22c1c     02 38 66 F0 | 	shl	local14, #2
22c20     ED 38 02 F1 | 	add	local14, __methods__
22c24     1C 39 02 FB | 	rdlong	local14, local14
22c28     14 3B 02 F6 | 	mov	local15, local06
22c2c     16 3D 02 F6 | 	mov	local16, local08
22c30     11 3F 02 F6 | 	mov	local17, local03
22c34     1D 13 02 F6 | 	mov	arg01, local15
22c38     1E 15 02 F6 | 	mov	arg02, local16
22c3c     1F 17 02 F6 | 	mov	arg03, local17
22c40     F2 40 02 F6 | 	mov	local18, objptr
22c44     1A E5 01 F6 | 	mov	objptr, local12
22c48     2D 38 62 FD | 	call	local14
22c4c     20 E5 01 F6 | 	mov	objptr, local18
22c50     FD 42 0A F6 | 	mov	local19, result1 wz
22c54     04 22 CE 57 |  if_ne	test	local03, #4 wz
22c58     58 00 90 AD |  if_e	jmp	#LR__3302
22c5c     24 2E 06 F1 | 	add	local09, #36
22c60     17 33 02 FB | 	rdlong	local11, local09
22c64     19 35 02 F6 | 	mov	local12, local11
22c68     19 37 02 F6 | 	mov	local13, local11
22c6c     24 2E 86 F1 | 	sub	local09, #36
22c70     1B 39 02 F6 | 	mov	local14, local13
22c74     13 34 46 F7 | 	zerox	local12, #19
22c78     14 38 46 F0 | 	shr	local14, #20
22c7c     02 38 66 F0 | 	shl	local14, #2
22c80     ED 38 02 F1 | 	add	local14, __methods__
22c84     1C 39 02 FB | 	rdlong	local14, local14
22c88     14 3B 02 F6 | 	mov	local15, local06
22c8c     16 3D 02 F6 | 	mov	local16, local08
22c90     12 3F 02 F6 | 	mov	local17, local04
22c94     1D 13 02 F6 | 	mov	arg01, local15
22c98     1E 15 02 F6 | 	mov	arg02, local16
22c9c     1F 17 02 F6 | 	mov	arg03, local17
22ca0     F2 40 02 F6 | 	mov	local18, objptr
22ca4     1A E5 01 F6 | 	mov	objptr, local12
22ca8     2D 38 62 FD | 	call	local14
22cac     20 E5 01 F6 | 	mov	objptr, local18
22cb0     FD 42 02 F6 | 	mov	local19, result1
22cb4                 | LR__3302
22cb4     00 42 0E F2 | 	cmp	local19, #0 wz
22cb8     8C 01 90 5D |  if_ne	jmp	#LR__3312
22cbc     11 45 02 F6 | 	mov	local20, local03
22cc0     03 44 0E F5 | 	and	local20, #3 wz
22cc4     02 26 46 55 |  if_ne	or	local05, #2
22cc8     01 44 0E F2 | 	cmp	local20, #1 wz
22ccc     01 26 46 55 |  if_ne	or	local05, #1
22cd0     20 22 CE F7 | 	test	local03, #32 wz
22cd4     C0 26 46 55 |  if_ne	or	local05, #192
22cd8     08 28 06 F1 | 	add	local06, #8
22cdc     14 27 62 FC | 	wrlong	local05, local06
22ce0     0C 28 06 F1 | 	add	local06, #12
22ce4     14 47 0A FB | 	rdlong	local21, local06 wz
22ce8     14 28 86 F1 | 	sub	local06, #20
22cec     18 00 90 5D |  if_ne	jmp	#LR__3303
22cf0     04 2E 06 F1 | 	add	local09, #4
22cf4     17 47 02 FB | 	rdlong	local21, local09
22cf8     04 2E 86 F1 | 	sub	local09, #4
22cfc     14 28 06 F1 | 	add	local06, #20
22d00     14 47 62 FC | 	wrlong	local21, local06
22d04     14 28 86 F1 | 	sub	local06, #20
22d08                 | LR__3303
22d08     18 28 06 F1 | 	add	local06, #24
22d0c     14 47 0A FB | 	rdlong	local21, local06 wz
22d10     18 28 86 F1 | 	sub	local06, #24
22d14     18 00 90 5D |  if_ne	jmp	#LR__3304
22d18     08 2E 06 F1 | 	add	local09, #8
22d1c     17 47 02 FB | 	rdlong	local21, local09
22d20     08 2E 86 F1 | 	sub	local09, #8
22d24     18 28 06 F1 | 	add	local06, #24
22d28     14 47 62 FC | 	wrlong	local21, local06
22d2c     18 28 86 F1 | 	sub	local06, #24
22d30                 | LR__3304
22d30     24 28 06 F1 | 	add	local06, #36
22d34     14 47 0A FB | 	rdlong	local21, local06 wz
22d38     24 28 86 F1 | 	sub	local06, #36
22d3c     17 47 02 AB |  if_e	rdlong	local21, local09
22d40     24 28 06 A1 |  if_e	add	local06, #36
22d44     14 47 62 AC |  if_e	wrlong	local21, local06
22d48     24 28 86 A1 |  if_e	sub	local06, #36
22d4c     28 28 06 F1 | 	add	local06, #40
22d50     14 47 0A FB | 	rdlong	local21, local06 wz
22d54     28 28 86 F1 | 	sub	local06, #40
22d58     18 00 90 5D |  if_ne	jmp	#LR__3305
22d5c     10 2E 06 F1 | 	add	local09, #16
22d60     17 47 02 FB | 	rdlong	local21, local09
22d64     10 2E 86 F1 | 	sub	local09, #16
22d68     28 28 06 F1 | 	add	local06, #40
22d6c     14 47 62 FC | 	wrlong	local21, local06
22d70     28 28 86 F1 | 	sub	local06, #40
22d74                 | LR__3305
22d74     30 28 06 F1 | 	add	local06, #48
22d78     14 47 0A FB | 	rdlong	local21, local06 wz
22d7c     30 28 86 F1 | 	sub	local06, #48
22d80     18 00 90 5D |  if_ne	jmp	#LR__3306
22d84     0C 2E 06 F1 | 	add	local09, #12
22d88     17 47 02 FB | 	rdlong	local21, local09
22d8c     0C 2E 86 F1 | 	sub	local09, #12
22d90     30 28 06 F1 | 	add	local06, #48
22d94     14 47 62 FC | 	wrlong	local21, local06
22d98     30 28 86 F1 | 	sub	local06, #48
22d9c                 | LR__3306
22d9c     1C 28 06 F1 | 	add	local06, #28
22da0     14 47 0A FB | 	rdlong	local21, local06 wz
22da4     1C 28 86 F1 | 	sub	local06, #28
22da8     1C 00 90 5D |  if_ne	jmp	#LR__3307
22dac     01 2A 06 F6 | 	mov	local07, #1
22db0     F2 12 02 F6 | 	mov	arg01, objptr
22db4     00 50 04 FF 
22db8     00 12 46 F5 | 	or	arg01, ##144703488
22dbc     1C 28 06 F1 | 	add	local06, #28
22dc0     14 13 62 FC | 	wrlong	arg01, local06
22dc4     1C 28 86 F1 | 	sub	local06, #28
22dc8                 | LR__3307
22dc8     20 28 06 F1 | 	add	local06, #32
22dcc     14 47 0A FB | 	rdlong	local21, local06 wz
22dd0     20 28 86 F1 | 	sub	local06, #32
22dd4     1C 00 90 5D |  if_ne	jmp	#LR__3308
22dd8     01 2A 06 F6 | 	mov	local07, #1
22ddc     F2 12 02 F6 | 	mov	arg01, objptr
22de0     00 58 04 FF 
22de4     00 12 46 F5 | 	or	arg01, ##145752064
22de8     20 28 06 F1 | 	add	local06, #32
22dec     14 13 62 FC | 	wrlong	arg01, local06
22df0     20 28 86 F1 | 	sub	local06, #32
22df4                 | LR__3308
22df4     2C 28 06 F1 | 	add	local06, #44
22df8     14 47 0A FB | 	rdlong	local21, local06 wz
22dfc     2C 28 86 F1 | 	sub	local06, #44
22e00     44 00 90 5D |  if_ne	jmp	#LR__3311
22e04     14 2E 06 F1 | 	add	local09, #20
22e08     17 47 0A FB | 	rdlong	local21, local09 wz
22e0c     14 2E 86 F1 | 	sub	local09, #20
22e10     18 00 90 AD |  if_e	jmp	#LR__3309
22e14     14 2E 06 F1 | 	add	local09, #20
22e18     17 47 02 FB | 	rdlong	local21, local09
22e1c     2C 28 06 F1 | 	add	local06, #44
22e20     14 47 62 FC | 	wrlong	local21, local06
22e24     2C 28 86 F1 | 	sub	local06, #44
22e28     1C 00 90 FD | 	jmp	#LR__3310
22e2c                 | LR__3309
22e2c     01 2A 06 F6 | 	mov	local07, #1
22e30     F2 12 02 F6 | 	mov	arg01, objptr
22e34     00 60 04 FF 
22e38     00 12 46 F5 | 	or	arg01, ##146800640
22e3c     2C 28 06 F1 | 	add	local06, #44
22e40     14 13 62 FC | 	wrlong	arg01, local06
22e44     2C 28 86 F1 | 	sub	local06, #44
22e48                 | LR__3310
22e48                 | LR__3311
22e48                 | LR__3312
22e48     00 2A 0E F2 | 	cmp	local07, #0 wz
22e4c     14 13 02 56 |  if_ne	mov	arg01, local06
22e50     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
22e54     00 42 0E F2 | 	cmp	local19, #0 wz
22e58     00 12 06 A6 |  if_e	mov	arg01, #0
22e5c     10 00 90 5D |  if_ne	jmp	#LR__3313
22e60     00 12 4E F2 | 	cmps	arg01, #0 wz
22e64     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22e68     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22e6c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22e70                 | LR__3313
22e70     21 FB 01 F6 | 	mov	result1, local19
22e74                 | LR__3314
22e74     A7 F0 03 F6 | 	mov	ptra, fp
22e78     B2 00 A0 FD | 	call	#popregs_
22e7c                 | __system___openraw_ret
22e7c     2D 00 64 FD | 	ret
22e80                 | 
22e80                 | __system___closeraw
22e80     05 4A 05 F6 | 	mov	COUNT_, #5
22e84     A8 00 A0 FD | 	call	#pushregs_
22e88     09 1F 02 F6 | 	mov	local01, arg01
22e8c     00 20 06 F6 | 	mov	local02, #0
22e90     08 1E 06 F1 | 	add	local01, #8
22e94     0F FB 09 FB | 	rdlong	result1, local01 wz
22e98     08 1E 86 F1 | 	sub	local01, #8
22e9c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22ea0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22ea4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22ea8     01 FA 65 A6 |  if_e	neg	result1, #1
22eac     A8 00 90 AD |  if_e	jmp	#LR__3322
22eb0     2C 1E 06 F1 | 	add	local01, #44
22eb4     0F FB 09 FB | 	rdlong	result1, local01 wz
22eb8     2C 1E 86 F1 | 	sub	local01, #44
22ebc     38 00 90 AD |  if_e	jmp	#LR__3320
22ec0     2C 1E 06 F1 | 	add	local01, #44
22ec4     0F 23 02 FB | 	rdlong	local03, local01
22ec8     11 25 02 F6 | 	mov	local04, local03
22ecc     2C 1E 86 F1 | 	sub	local01, #44
22ed0     13 24 46 F7 | 	zerox	local04, #19
22ed4     14 22 46 F0 | 	shr	local03, #20
22ed8     02 22 66 F0 | 	shl	local03, #2
22edc     ED 22 02 F1 | 	add	local03, __methods__
22ee0     11 23 02 FB | 	rdlong	local03, local03
22ee4     0F 13 02 F6 | 	mov	arg01, local01
22ee8     F2 26 02 F6 | 	mov	local05, objptr
22eec     12 E5 01 F6 | 	mov	objptr, local04
22ef0     2D 22 62 FD | 	call	local03
22ef4     13 E5 01 F6 | 	mov	objptr, local05
22ef8                 | LR__3320
22ef8     24 1E 06 F1 | 	add	local01, #36
22efc     0F 27 0A FB | 	rdlong	local05, local01 wz
22f00     24 1E 86 F1 | 	sub	local01, #36
22f04     3C 00 90 AD |  if_e	jmp	#LR__3321
22f08     24 1E 06 F1 | 	add	local01, #36
22f0c     0F 23 02 FB | 	rdlong	local03, local01
22f10     11 25 02 F6 | 	mov	local04, local03
22f14     24 1E 86 F1 | 	sub	local01, #36
22f18     13 24 46 F7 | 	zerox	local04, #19
22f1c     14 22 46 F0 | 	shr	local03, #20
22f20     02 22 66 F0 | 	shl	local03, #2
22f24     ED 22 02 F1 | 	add	local03, __methods__
22f28     11 23 02 FB | 	rdlong	local03, local03
22f2c     0F 13 02 F6 | 	mov	arg01, local01
22f30     F2 26 02 F6 | 	mov	local05, objptr
22f34     12 E5 01 F6 | 	mov	objptr, local04
22f38     2D 22 62 FD | 	call	local03
22f3c     13 E5 01 F6 | 	mov	objptr, local05
22f40     FD 20 02 F6 | 	mov	local02, result1
22f44                 | LR__3321
22f44     0F 13 02 F6 | 	mov	arg01, local01
22f48     00 14 06 F6 | 	mov	arg02, #0
22f4c     34 16 06 F6 | 	mov	arg03, #52
22f50     98 00 A0 FD | 	call	#\builtin_bytefill_
22f54     10 FB 01 F6 | 	mov	result1, local02
22f58                 | LR__3322
22f58     A7 F0 03 F6 | 	mov	ptra, fp
22f5c     B2 00 A0 FD | 	call	#popregs_
22f60                 | __system___closeraw_ret
22f60     2D 00 64 FD | 	ret
22f64                 | 
22f64                 | __system___vfs_open_sdcardx
22f64     0B 4A 05 F6 | 	mov	COUNT_, #11
22f68     A8 00 A0 FD | 	call	#pushregs_
22f6c     09 23 02 F6 | 	mov	local03, arg01
22f70     0A 25 02 F6 | 	mov	local04, arg02
22f74     0B 27 02 F6 | 	mov	local05, arg03
22f78     0C 29 02 F6 | 	mov	local06, arg04
22f7c     01 00 00 FF 
22f80     24 12 06 F6 | 	mov	arg01, ##548
22f84     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
22f88     FD 2A 02 F6 | 	mov	local07, result1
22f8c     01 00 00 FF 
22f90     34 12 06 F6 | 	mov	arg01, ##564
22f94     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
22f98     FD 2C 02 F6 | 	mov	local08, result1
22f9c     11 19 02 F6 | 	mov	arg04, local03
22fa0     1F 18 C6 F0 | 	sar	arg04, #31
22fa4     11 17 02 F6 | 	mov	arg03, local03
22fa8     01 12 06 F6 | 	mov	arg01, #1
22fac     00 14 06 F6 | 	mov	arg02, #0
22fb0     48 DC BF FD | 	call	#__system___int64_shl
22fb4     FD 1E 02 F6 | 	mov	local01, result1
22fb8     FE 2E 02 F6 | 	mov	local09, result2
22fbc     12 19 02 F6 | 	mov	arg04, local04
22fc0     1F 18 C6 F0 | 	sar	arg04, #31
22fc4     12 17 02 F6 | 	mov	arg03, local04
22fc8     01 12 06 F6 | 	mov	arg01, #1
22fcc     00 14 06 F6 | 	mov	arg02, #0
22fd0     28 DC BF FD | 	call	#__system___int64_shl
22fd4     FD 1E 42 F5 | 	or	local01, result1
22fd8     FE 2E 42 F5 | 	or	local09, result2
22fdc     13 19 02 F6 | 	mov	arg04, local05
22fe0     1F 18 C6 F0 | 	sar	arg04, #31
22fe4     13 17 02 F6 | 	mov	arg03, local05
22fe8     01 12 06 F6 | 	mov	arg01, #1
22fec     00 14 06 F6 | 	mov	arg02, #0
22ff0     08 DC BF FD | 	call	#__system___int64_shl
22ff4     FD 1E 42 F5 | 	or	local01, result1
22ff8     FE 2E 42 F5 | 	or	local09, result2
22ffc     14 19 02 F6 | 	mov	arg04, local06
23000     1F 18 C6 F0 | 	sar	arg04, #31
23004     14 17 02 F6 | 	mov	arg03, local06
23008     01 12 06 F6 | 	mov	arg01, #1
2300c     00 14 06 F6 | 	mov	arg02, #0
23010     E8 DB BF FD | 	call	#__system___int64_shl
23014     17 15 02 F6 | 	mov	arg02, local09
23018     FD 1E 42 F5 | 	or	local01, result1
2301c     0A FD 41 F5 | 	or	result2, arg02
23020     FE 20 02 F6 | 	mov	local02, result2
23024     0F 13 02 F6 | 	mov	arg01, local01
23028     10 15 02 F6 | 	mov	arg02, local02
2302c     04 DC BF FD | 	call	#__system___usepins
23030     00 FA 0D F2 | 	cmp	result1, #0 wz
23034     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23038     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2303c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23040     00 FA 05 A6 |  if_e	mov	result1, #0
23044     B4 00 90 AD |  if_e	jmp	#LR__3332
23048     0F 31 02 F6 | 	mov	local10, local01
2304c     10 2F 02 F6 | 	mov	local09, local02
23050     01 00 00 FF 
23054     08 2A 06 F1 | 	add	local07, ##520
23058     15 31 62 FC | 	wrlong	local10, local07
2305c     04 2A 06 F1 | 	add	local07, #4
23060     15 2F 62 FC | 	wrlong	local09, local07
23064     01 00 00 FF 
23068     0C 2A 86 F1 | 	sub	local07, ##524
2306c     14 1B 02 F6 | 	mov	arg05, local06
23070     00 12 06 F6 | 	mov	arg01, #0
23074     11 15 02 F6 | 	mov	arg02, local03
23078     12 17 02 F6 | 	mov	arg03, local04
2307c     13 19 02 F6 | 	mov	arg04, local05
23080     F2 30 02 F6 | 	mov	local10, objptr
23084     15 E5 01 F6 | 	mov	objptr, local07
23088     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
2308c     18 E5 01 F6 | 	mov	objptr, local10
23090     FD 32 0A F6 | 	mov	local11, result1 wz
23094     24 00 90 5D |  if_ne	jmp	#LR__3330
23098     6D 01 00 FF 
2309c     52 15 06 F6 | 	mov	arg02, ##@LR__4727
230a0     16 13 02 F6 | 	mov	arg01, local08
230a4     00 16 06 F6 | 	mov	arg03, #0
230a8     F2 32 02 F6 | 	mov	local11, objptr
230ac     15 E5 01 F6 | 	mov	objptr, local07
230b0     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
230b4     19 E5 01 F6 | 	mov	objptr, local11
230b8     FD 32 02 F6 | 	mov	local11, result1
230bc                 | LR__3330
230bc     00 32 0E F2 | 	cmp	local11, #0 wz
230c0     24 00 90 AD |  if_e	jmp	#LR__3331
230c4     0F 13 02 F6 | 	mov	arg01, local01
230c8     10 15 02 F6 | 	mov	arg02, local02
230cc     B8 DB BF FD | 	call	#__system___freepins
230d0     19 13 6A F6 | 	neg	arg01, local11 wz
230d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
230d8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
230dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
230e0     00 FA 05 F6 | 	mov	result1, #0
230e4     14 00 90 FD | 	jmp	#LR__3332
230e8                 | LR__3331
230e8     15 13 02 F6 | 	mov	arg01, local07
230ec     F2 32 02 F6 | 	mov	local11, objptr
230f0     15 E5 01 F6 | 	mov	objptr, local07
230f4     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
230f8     19 E5 01 F6 | 	mov	objptr, local11
230fc                 | LR__3332
230fc     A7 F0 03 F6 | 	mov	ptra, fp
23100     B2 00 A0 FD | 	call	#popregs_
23104                 | __system___vfs_open_sdcardx_ret
23104     2D 00 64 FD | 	ret
23108                 | 
23108                 | __system____default_getc
23108     03 4A 05 F6 | 	mov	COUNT_, #3
2310c     A8 00 A0 FD | 	call	#pushregs_
23110     09 1F 02 F6 | 	mov	local01, arg01
23114     0F 21 02 FB | 	rdlong	local02, local01
23118     08 20 06 F1 | 	add	local02, #8
2311c     10 23 02 FB | 	rdlong	local03, local02
23120     02 22 CE F7 | 	test	local03, #2 wz
23124     0F 13 02 56 |  if_ne	mov	arg01, local01
23128     00 01 B0 5D |  if_ne	call	#__system____default_flush
2312c     10 23 02 FB | 	rdlong	local03, local02
23130     01 22 46 F5 | 	or	local03, #1
23134     10 23 62 FC | 	wrlong	local03, local02
23138     08 20 86 F1 | 	sub	local02, #8
2313c     10 23 0A FB | 	rdlong	local03, local02 wz
23140     0C 00 90 5D |  if_ne	jmp	#LR__3340
23144     0F 13 02 F6 | 	mov	arg01, local01
23148     64 16 B0 FD | 	call	#__system____default_filbuf
2314c     FD 22 02 F6 | 	mov	local03, result1
23150                 | LR__3340
23150     01 22 56 F2 | 	cmps	local03, #1 wc
23154     01 FA 65 C6 |  if_b	neg	result1, #1
23158     1C 00 90 CD |  if_b	jmp	#LR__3341
2315c     01 22 86 F1 | 	sub	local03, #1
23160     10 23 62 FC | 	wrlong	local03, local02
23164     04 20 06 F1 | 	add	local02, #4
23168     10 23 02 FB | 	rdlong	local03, local02
2316c     11 FB C1 FA | 	rdbyte	result1, local03
23170     01 22 06 F1 | 	add	local03, #1
23174     10 23 62 FC | 	wrlong	local03, local02
23178                 | LR__3341
23178     A7 F0 03 F6 | 	mov	ptra, fp
2317c     B2 00 A0 FD | 	call	#popregs_
23180                 | __system____default_getc_ret
23180     2D 00 64 FD | 	ret
23184                 | 
23184                 | __system____default_putc
23184     06 4A 05 F6 | 	mov	COUNT_, #6
23188     A8 00 A0 FD | 	call	#pushregs_
2318c     09 1F 02 F6 | 	mov	local01, arg01
23190     0A 21 02 F6 | 	mov	local02, arg02
23194     10 23 02 FB | 	rdlong	local03, local02
23198     08 22 06 F1 | 	add	local03, #8
2319c     11 FB 01 FB | 	rdlong	result1, local03
231a0     01 FA CD F7 | 	test	result1, #1 wz
231a4     10 13 02 56 |  if_ne	mov	arg01, local02
231a8     80 00 B0 5D |  if_ne	call	#__system____default_flush
231ac     11 25 02 FB | 	rdlong	local04, local03
231b0     02 24 46 F5 | 	or	local04, #2
231b4     11 25 62 FC | 	wrlong	local04, local03
231b8     08 22 86 F1 | 	sub	local03, #8
231bc     11 27 02 FB | 	rdlong	local05, local03
231c0     10 22 06 F1 | 	add	local03, #16
231c4     11 15 02 FB | 	rdlong	arg02, local03
231c8     10 22 86 F1 | 	sub	local03, #16
231cc     13 FB 01 F6 | 	mov	result1, local05
231d0     0A FB 01 F1 | 	add	result1, arg02
231d4     FD 1E 42 FC | 	wrbyte	local01, result1
231d8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
231dc     01 26 06 F1 | 	add	local05, #1
231e0     11 27 62 FC | 	wrlong	local05, local03
231e4     06 20 06 F1 | 	add	local02, #6
231e8     10 29 EA FA | 	rdword	local06, local02 wz
231ec     06 20 86 F1 | 	sub	local02, #6
231f0     0C 22 06 51 |  if_ne	add	local03, #12
231f4     11 25 02 5B |  if_ne	rdlong	local04, local03
231f8     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
231fc     0C 00 90 AD |  if_e	jmp	#LR__3350
23200     0A 1E 0E F2 | 	cmp	local01, #10 wz
23204     01 28 0E A2 |  if_e	cmp	local06, #1 wz
23208     10 00 90 5D |  if_ne	jmp	#LR__3351
2320c                 | LR__3350
2320c     10 13 02 F6 | 	mov	arg01, local02
23210     18 00 B0 FD | 	call	#__system____default_flush
23214     00 FA 0D F2 | 	cmp	result1, #0 wz
23218     01 1E 66 56 |  if_ne	neg	local01, #1
2321c                 | LR__3351
2321c     0F FB 01 F6 | 	mov	result1, local01
23220     A7 F0 03 F6 | 	mov	ptra, fp
23224     B2 00 A0 FD | 	call	#popregs_
23228                 | __system____default_putc_ret
23228     2D 00 64 FD | 	ret
2322c                 | 
2322c                 | __system____default_flush
2322c     06 4A 05 F6 | 	mov	COUNT_, #6
23230     A8 00 A0 FD | 	call	#pushregs_
23234     09 1F 02 F6 | 	mov	local01, arg01
23238     0F 21 02 FB | 	rdlong	local02, local01
2323c     10 23 02 FB | 	rdlong	local03, local02
23240     08 20 06 F1 | 	add	local02, #8
23244     10 FB 01 FB | 	rdlong	result1, local02
23248     08 20 86 F1 | 	sub	local02, #8
2324c     02 FA CD F7 | 	test	result1, #2 wz
23250     D0 00 90 AD |  if_e	jmp	#LR__3362
23254     01 22 56 F2 | 	cmps	local03, #1 wc
23258     20 01 90 CD |  if_b	jmp	#LR__3364
2325c     08 1E 06 F1 | 	add	local01, #8
23260     0F FB 01 FB | 	rdlong	result1, local01
23264     08 1E 86 F1 | 	sub	local01, #8
23268     40 FA CD F7 | 	test	result1, #64 wz
2326c     68 00 90 AD |  if_e	jmp	#LR__3361
23270     08 1E 06 F1 | 	add	local01, #8
23274     0F 17 02 FB | 	rdlong	arg03, local01
23278     08 1E 86 F1 | 	sub	local01, #8
2327c     80 16 CE F7 | 	test	arg03, #128 wz
23280     54 00 90 AD |  if_e	jmp	#LR__3360
23284     30 1E 06 F1 | 	add	local01, #48
23288     0F 25 02 FB | 	rdlong	local04, local01
2328c     12 27 02 F6 | 	mov	local05, local04
23290     30 1E 86 F1 | 	sub	local01, #48
23294     13 26 46 F7 | 	zerox	local05, #19
23298     14 24 46 F0 | 	shr	local04, #20
2329c     02 24 66 F0 | 	shl	local04, #2
232a0     ED 24 02 F1 | 	add	local04, __methods__
232a4     12 25 02 FB | 	rdlong	local04, local04
232a8     0F 13 02 F6 | 	mov	arg01, local01
232ac     00 14 06 F6 | 	mov	arg02, #0
232b0     02 16 06 F6 | 	mov	arg03, #2
232b4     F2 28 02 F6 | 	mov	local06, objptr
232b8     13 E5 01 F6 | 	mov	objptr, local05
232bc     2D 24 62 FD | 	call	local04
232c0     14 E5 01 F6 | 	mov	objptr, local06
232c4     08 1E 06 F1 | 	add	local01, #8
232c8     0F 29 02 FB | 	rdlong	local06, local01
232cc     80 28 26 F5 | 	andn	local06, #128
232d0     0F 29 62 FC | 	wrlong	local06, local01
232d4     08 1E 86 F1 | 	sub	local01, #8
232d8                 | LR__3360
232d8                 | LR__3361
232d8     18 1E 06 F1 | 	add	local01, #24
232dc     0F 25 02 FB | 	rdlong	local04, local01
232e0     12 27 02 F6 | 	mov	local05, local04
232e4     18 1E 86 F1 | 	sub	local01, #24
232e8     13 26 46 F7 | 	zerox	local05, #19
232ec     14 24 46 F0 | 	shr	local04, #20
232f0     02 24 66 F0 | 	shl	local04, #2
232f4     ED 24 02 F1 | 	add	local04, __methods__
232f8     12 25 02 FB | 	rdlong	local04, local04
232fc     10 20 06 F1 | 	add	local02, #16
23300     10 15 02 FB | 	rdlong	arg02, local02
23304     10 20 86 F1 | 	sub	local02, #16
23308     0F 13 02 F6 | 	mov	arg01, local01
2330c     11 17 02 F6 | 	mov	arg03, local03
23310     F2 28 02 F6 | 	mov	local06, objptr
23314     13 E5 01 F6 | 	mov	objptr, local05
23318     2D 24 62 FD | 	call	local04
2331c     14 E5 01 F6 | 	mov	objptr, local06
23320     58 00 90 FD | 	jmp	#LR__3364
23324                 | LR__3362
23324     08 20 06 F1 | 	add	local02, #8
23328     10 29 02 FB | 	rdlong	local06, local02
2332c     08 20 86 F1 | 	sub	local02, #8
23330     01 28 CE F7 | 	test	local06, #1 wz
23334     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
23338     40 00 90 AD |  if_e	jmp	#LR__3363
2333c     30 1E 06 F1 | 	add	local01, #48
23340     0F 25 02 FB | 	rdlong	local04, local01
23344     12 27 02 F6 | 	mov	local05, local04
23348     30 1E 86 F1 | 	sub	local01, #48
2334c     13 26 46 F7 | 	zerox	local05, #19
23350     14 24 46 F0 | 	shr	local04, #20
23354     02 24 66 F0 | 	shl	local04, #2
23358     ED 24 02 F1 | 	add	local04, __methods__
2335c     12 25 02 FB | 	rdlong	local04, local04
23360     0F 13 02 F6 | 	mov	arg01, local01
23364     11 15 62 F6 | 	neg	arg02, local03
23368     01 16 06 F6 | 	mov	arg03, #1
2336c     F2 28 02 F6 | 	mov	local06, objptr
23370     13 E5 01 F6 | 	mov	objptr, local05
23374     2D 24 62 FD | 	call	local04
23378     14 E5 01 F6 | 	mov	objptr, local06
2337c                 | LR__3363
2337c                 | LR__3364
2337c     10 01 68 FC | 	wrlong	#0, local02
23380     04 20 06 F1 | 	add	local02, #4
23384     10 01 68 FC | 	wrlong	#0, local02
23388     04 20 06 F1 | 	add	local02, #4
2338c     10 01 68 FC | 	wrlong	#0, local02
23390     00 FA 05 F6 | 	mov	result1, #0
23394     A7 F0 03 F6 | 	mov	ptra, fp
23398     B2 00 A0 FD | 	call	#popregs_
2339c                 | __system____default_flush_ret
2339c     2D 00 64 FD | 	ret
233a0                 | 
233a0                 | __system____default_buffer_init
233a0     02 4A 05 F6 | 	mov	COUNT_, #2
233a4     A8 00 A0 FD | 	call	#pushregs_
233a8     09 1F 02 F6 | 	mov	local01, arg01
233ac     0F 21 02 FB | 	rdlong	local02, local01
233b0     0F 13 02 F6 | 	mov	arg01, local01
233b4     F8 02 B0 FD | 	call	#__system___isatty
233b8     00 FA 0D F2 | 	cmp	result1, #0 wz
233bc     06 1E 06 51 |  if_ne	add	local01, #6
233c0     0F 0B 58 5C |  if_ne	wrword	#5, local01
233c4     06 1E 06 A1 |  if_e	add	local01, #6
233c8     0F 0D 58 AC |  if_e	wrword	#6, local01
233cc     14 20 06 F1 | 	add	local02, #20
233d0     10 1F 02 F6 | 	mov	local01, local02
233d4     04 20 86 F1 | 	sub	local02, #4
233d8     10 1F 62 FC | 	wrlong	local01, local02
233dc     04 20 86 F1 | 	sub	local02, #4
233e0     02 00 80 FF 
233e4     10 01 68 FC | 	wrlong	##1024, local02
233e8     00 FA 05 F6 | 	mov	result1, #0
233ec     A7 F0 03 F6 | 	mov	ptra, fp
233f0     B2 00 A0 FD | 	call	#popregs_
233f4                 | __system____default_buffer_init_ret
233f4     2D 00 64 FD | 	ret
233f8                 | 
233f8                 | __system__stat
233f8     04 4A 05 F6 | 	mov	COUNT_, #4
233fc     A8 00 A0 FD | 	call	#pushregs_
23400     0A 1F 02 F6 | 	mov	local01, arg02
23404     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23408     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
2340c     09 15 02 F6 | 	mov	arg02, arg01
23410     10 13 02 F6 | 	mov	arg01, local02
23414     00 16 06 F6 | 	mov	arg03, #0
23418     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2341c     B0 B8 BF FD | 	call	#__system____getvfsforfile
23420     FD 22 0A F6 | 	mov	local03, result1 wz
23424     10 00 90 AD |  if_e	jmp	#LR__3370
23428     34 22 06 F1 | 	add	local03, #52
2342c     11 17 0A FB | 	rdlong	arg03, local03 wz
23430     34 22 86 F1 | 	sub	local03, #52
23434     14 00 90 5D |  if_ne	jmp	#LR__3371
23438                 | LR__3370
23438     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2343c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23440     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23444     01 FA 65 F6 | 	neg	result1, #1
23448     68 00 90 FD | 	jmp	#LR__3372
2344c                 | LR__3371
2344c     0F 13 02 F6 | 	mov	arg01, local01
23450     00 14 06 F6 | 	mov	arg02, #0
23454     30 16 06 F6 | 	mov	arg03, #48
23458     09 25 02 F6 | 	mov	local04, arg01
2345c     98 00 A0 FD | 	call	#\builtin_bytefill_
23460     12 FB 01 F6 | 	mov	result1, local04
23464     10 13 CA FA | 	rdbyte	arg01, local02 wz
23468     08 1E 06 A1 |  if_e	add	local01, #8
2346c     08 00 80 AF 
23470     0F FF 6B AC |  if_e	wrlong	##4607, local01
23474     00 FA 05 A6 |  if_e	mov	result1, #0
23478     38 00 90 AD |  if_e	jmp	#LR__3372
2347c     34 22 06 F1 | 	add	local03, #52
23480     11 23 02 FB | 	rdlong	local03, local03
23484     11 25 02 F6 | 	mov	local04, local03
23488     13 22 46 F7 | 	zerox	local03, #19
2348c     14 24 46 F0 | 	shr	local04, #20
23490     02 24 66 F0 | 	shl	local04, #2
23494     ED 24 02 F1 | 	add	local04, __methods__
23498     12 25 02 FB | 	rdlong	local04, local04
2349c     10 13 02 F6 | 	mov	arg01, local02
234a0     0F 15 02 F6 | 	mov	arg02, local01
234a4     F2 20 02 F6 | 	mov	local02, objptr
234a8     11 E5 01 F6 | 	mov	objptr, local03
234ac     2D 24 62 FD | 	call	local04
234b0     10 E5 01 F6 | 	mov	objptr, local02
234b4                 | LR__3372
234b4     A7 F0 03 F6 | 	mov	ptra, fp
234b8     B2 00 A0 FD | 	call	#popregs_
234bc                 | __system__stat_ret
234bc     2D 00 64 FD | 	ret
234c0                 | 
234c0                 | __system__read
234c0     0A 12 16 F2 | 	cmp	arg01, #10 wc
234c4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
234c8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
234cc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
234d0     01 FA 65 36 |  if_ae	neg	result1, #1
234d4     20 00 90 3D |  if_ae	jmp	#LR__3380
234d8     34 12 06 FD | 	qmul	arg01, #52
234dc     02 00 00 FF 
234e0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
234e4     18 12 62 FD | 	getqx	arg01
234e8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
234ec     02 00 00 FF 
234f0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
234f4     D0 0F B0 FD | 	call	#__system___vfsread
234f8                 | LR__3380
234f8                 | __system__read_ret
234f8     2D 00 64 FD | 	ret
234fc                 | 
234fc                 | __system__close
234fc     0A 12 16 F2 | 	cmp	arg01, #10 wc
23500     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23504     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23508     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2350c     01 FA 65 36 |  if_ae	neg	result1, #1
23510     20 00 90 3D |  if_ae	jmp	#LR__3390
23514     34 12 06 FD | 	qmul	arg01, #52
23518     02 00 00 FF 
2351c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23520     18 12 62 FD | 	getqx	arg01
23524     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23528     02 00 00 FF 
2352c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23530     4C F9 BF FD | 	call	#__system___closeraw
23534                 | LR__3390
23534                 | __system__close_ret
23534     2D 00 64 FD | 	ret
23538                 | 
23538                 | __system__lseek
23538     06 4A 05 F6 | 	mov	COUNT_, #6
2353c     A8 00 A0 FD | 	call	#pushregs_
23540     0A 12 16 F2 | 	cmp	arg01, #10 wc
23544     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23548     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2354c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23550     01 FA 65 36 |  if_ae	neg	result1, #1
23554     C4 00 90 3D |  if_ae	jmp	#LR__3401
23558     34 12 06 FD | 	qmul	arg01, #52
2355c     02 00 00 FF 
23560     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23564     18 1E 62 FD | 	getqx	local01
23568     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
2356c     30 1E 06 F1 | 	add	local01, #48
23570     0F 13 0A FB | 	rdlong	arg01, local01 wz
23574     30 1E 86 F1 | 	sub	local01, #48
23578     02 00 00 FF 
2357c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23580     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23584     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23588     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2358c     01 FA 65 A6 |  if_e	neg	result1, #1
23590     88 00 90 AD |  if_e	jmp	#LR__3401
23594     08 1E 06 F1 | 	add	local01, #8
23598     0F 21 02 FB | 	rdlong	local02, local01
2359c     08 1E 86 F1 | 	sub	local01, #8
235a0     40 20 CE F7 | 	test	local02, #64 wz
235a4     08 1E 06 51 |  if_ne	add	local01, #8
235a8     0F 21 02 5B |  if_ne	rdlong	local02, local01
235ac     80 20 46 55 |  if_ne	or	local02, #128
235b0     0F 21 62 5C |  if_ne	wrlong	local02, local01
235b4     08 1E 86 51 |  if_ne	sub	local01, #8
235b8     30 1E 06 F1 | 	add	local01, #48
235bc     0F 23 02 FB | 	rdlong	local03, local01
235c0     11 25 02 F6 | 	mov	local04, local03
235c4     30 1E 86 F1 | 	sub	local01, #48
235c8     13 24 46 F7 | 	zerox	local04, #19
235cc     14 22 46 F0 | 	shr	local03, #20
235d0     02 22 66 F0 | 	shl	local03, #2
235d4     ED 22 02 F1 | 	add	local03, __methods__
235d8     11 23 02 FB | 	rdlong	local03, local03
235dc     0F 13 02 F6 | 	mov	arg01, local01
235e0     F2 26 02 F6 | 	mov	local05, objptr
235e4     12 E5 01 F6 | 	mov	objptr, local04
235e8     2D 22 62 FD | 	call	local03
235ec     13 E5 01 F6 | 	mov	objptr, local05
235f0     FD 28 02 F6 | 	mov	local06, result1
235f4     00 28 56 F2 | 	cmps	local06, #0 wc
235f8     1C 00 90 3D |  if_ae	jmp	#LR__3400
235fc     14 13 6A F6 | 	neg	arg01, local06 wz
23600     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23604     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23608     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2360c     01 FA 65 56 |  if_ne	neg	result1, #1
23610     00 FA 05 A6 |  if_e	mov	result1, #0
23614     04 00 90 FD | 	jmp	#LR__3401
23618                 | LR__3400
23618     14 FB 01 F6 | 	mov	result1, local06
2361c                 | LR__3401
2361c     A7 F0 03 F6 | 	mov	ptra, fp
23620     B2 00 A0 FD | 	call	#popregs_
23624                 | __system__lseek_ret
23624     2D 00 64 FD | 	ret
23628                 | 
23628                 | __system___ioctl
23628     03 4A 05 F6 | 	mov	COUNT_, #3
2362c     A8 00 A0 FD | 	call	#pushregs_
23630     00 12 4E F2 | 	cmps	arg01, #0 wz
23634     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23638     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2363c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23640     01 FA 65 A6 |  if_e	neg	result1, #1
23644     5C 00 90 AD |  if_e	jmp	#LR__3411
23648     28 12 06 F1 | 	add	arg01, #40
2364c     09 1F 02 FB | 	rdlong	local01, arg01
23650     0F 21 02 F6 | 	mov	local02, local01
23654     28 12 86 F1 | 	sub	arg01, #40
23658     13 20 46 F7 | 	zerox	local02, #19
2365c     14 1E 46 F0 | 	shr	local01, #20
23660     02 1E 66 F0 | 	shl	local01, #2
23664     ED 1E 02 F1 | 	add	local01, __methods__
23668     0F 1F 02 FB | 	rdlong	local01, local01
2366c     F2 22 02 F6 | 	mov	local03, objptr
23670     10 E5 01 F6 | 	mov	objptr, local02
23674     2D 1E 62 FD | 	call	local01
23678     11 E5 01 F6 | 	mov	objptr, local03
2367c     FD 12 0A F6 | 	mov	arg01, result1 wz
23680     1C 00 90 AD |  if_e	jmp	#LR__3410
23684     00 12 4E F2 | 	cmps	arg01, #0 wz
23688     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2368c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23690     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23694     01 FA 65 56 |  if_ne	neg	result1, #1
23698     00 FA 05 A6 |  if_e	mov	result1, #0
2369c     04 00 90 FD | 	jmp	#LR__3411
236a0                 | LR__3410
236a0     00 FA 05 F6 | 	mov	result1, #0
236a4                 | LR__3411
236a4     A7 F0 03 F6 | 	mov	ptra, fp
236a8     B2 00 A0 FD | 	call	#popregs_
236ac                 | __system___ioctl_ret
236ac     2D 00 64 FD | 	ret
236b0                 | 
236b0                 | __system___isatty
236b0     00 4A 05 F6 | 	mov	COUNT_, #0
236b4     A8 00 A0 FD | 	call	#pushregs_
236b8     0C F0 07 F1 | 	add	ptra, #12
236bc     04 4E 05 F1 | 	add	fp, #4
236c0     A7 12 62 FC | 	wrlong	arg01, fp
236c4     04 4E 05 F1 | 	add	fp, #4
236c8     A7 16 02 F6 | 	mov	arg03, fp
236cc     08 4E 85 F1 | 	sub	fp, #8
236d0     00 15 06 F6 | 	mov	arg02, #256
236d4     50 FF BF FD | 	call	#__system___ioctl
236d8     00 FA 0D F2 | 	cmp	result1, #0 wz
236dc     01 FA 05 A6 |  if_e	mov	result1, #1
236e0     00 FA 05 56 |  if_ne	mov	result1, #0
236e4     A7 F0 03 F6 | 	mov	ptra, fp
236e8     B2 00 A0 FD | 	call	#popregs_
236ec                 | __system___isatty_ret
236ec     2D 00 64 FD | 	ret
236f0                 | 
236f0                 | __system____getftab
236f0     0A 12 16 F2 | 	cmp	arg01, #10 wc
236f4     34 12 06 CD |  if_b	qmul	arg01, #52
236f8     00 FA 05 36 |  if_ae	mov	result1, #0
236fc     02 00 00 CF 
23700     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
23704     18 FA 61 CD |  if_b	getqx	result1
23708     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2370c     02 00 00 CF 
23710     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
23714                 | __system____getftab_ret
23714     2D 00 64 FD | 	ret
23718                 | 
23718                 | __system__strncpy
23718     09 01 02 F6 | 	mov	_var01, arg01
2371c                 | LR__3420
2371c     01 16 86 F1 | 	sub	arg03, #1
23720     00 16 56 F2 | 	cmps	arg03, #0 wc
23724     18 00 90 CD |  if_b	jmp	#LR__3421
23728     0A FB C1 FA | 	rdbyte	result1, arg02
2372c     00 FB 41 FC | 	wrbyte	result1, _var01
23730     01 14 06 F1 | 	add	arg02, #1
23734     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23738     01 00 06 F1 | 	add	_var01, #1
2373c     DC FF 9F 5D |  if_ne	jmp	#LR__3420
23740                 | LR__3421
23740     97 0C 48 FB | 	callpa	#(@LR__3423-@LR__3422)>>2,fcache_load_ptr_
23744                 | LR__3422
23744     01 16 86 F1 | 	sub	arg03, #1
23748     00 16 56 F2 | 	cmps	arg03, #0 wc
2374c     00 03 02 36 |  if_ae	mov	_var02, _var01
23750     01 00 06 31 |  if_ae	add	_var01, #1
23754     01 01 48 3C |  if_ae	wrbyte	#0, _var02
23758     E8 FF 9F 3D |  if_ae	jmp	#LR__3422
2375c                 | LR__3423
2375c     09 FB 01 F6 | 	mov	result1, arg01
23760                 | __system__strncpy_ret
23760     2D 00 64 FD | 	ret
23764                 | 
23764                 | __system__strncat
23764     00 14 4E F2 | 	cmps	arg02, #0 wz
23768     50 00 90 AD |  if_e	jmp	#LR__3434
2376c     01 16 16 F2 | 	cmp	arg03, #1 wc
23770     48 00 90 CD |  if_b	jmp	#LR__3434
23774     09 01 02 F6 | 	mov	_var01, arg01
23778     97 1E 48 FB | 	callpa	#(@LR__3432-@LR__3430)>>2,fcache_load_ptr_
2377c                 | LR__3430
2377c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23780     01 00 06 51 |  if_ne	add	_var01, #1
23784     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
23788     0B 03 02 F6 | 	mov	_var02, arg03
2378c                 | LR__3431
2378c     0A 05 C2 FA | 	rdbyte	_var03, arg02
23790     02 07 02 F6 | 	mov	_var04, _var03
23794     07 06 4E F7 | 	zerox	_var04, #7 wz
23798     01 14 06 F1 | 	add	arg02, #1
2379c     18 00 90 AD |  if_e	jmp	#LR__3433
237a0     01 02 86 F1 | 	sub	_var02, #1
237a4     00 02 56 F2 | 	cmps	_var02, #0 wc
237a8     00 07 02 36 |  if_ae	mov	_var04, _var01
237ac     01 00 06 31 |  if_ae	add	_var01, #1
237b0     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
237b4     D4 FF 9F 3D |  if_ae	jmp	#LR__3431
237b8                 | LR__3432
237b8                 | LR__3433
237b8     00 01 48 FC | 	wrbyte	#0, _var01
237bc                 | LR__3434
237bc     09 FB 01 F6 | 	mov	result1, arg01
237c0                 | __system__strncat_ret
237c0     2D 00 64 FD | 	ret
237c4                 | 
237c4                 | __system__strncmp
237c4     09 01 0A F6 | 	mov	_var01, arg01 wz
237c8     14 00 90 5D |  if_ne	jmp	#LR__3440
237cc     00 14 0E F2 | 	cmp	arg02, #0 wz
237d0     01 02 66 56 |  if_ne	neg	_var02, #1
237d4     00 02 06 A6 |  if_e	mov	_var02, #0
237d8     01 FB 01 F6 | 	mov	result1, _var02
237dc     74 00 90 FD | 	jmp	#__system__strncmp_ret
237e0                 | LR__3440
237e0     00 14 0E F2 | 	cmp	arg02, #0 wz
237e4     01 FA 05 A6 |  if_e	mov	result1, #1
237e8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
237ec     0B 05 02 F6 | 	mov	_var03, arg03
237f0     97 16 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
237f4                 | LR__3441
237f4     00 07 C2 FA | 	rdbyte	_var04, _var01
237f8     0A 09 02 F6 | 	mov	_var05, arg02
237fc     04 0B C2 FA | 	rdbyte	_var06, _var05
23800     01 04 86 F1 | 	sub	_var03, #1
23804     00 04 56 F2 | 	cmps	_var03, #0 wc
23808     01 00 06 F1 | 	add	_var01, #1
2380c     01 14 06 F1 | 	add	arg02, #1
23810     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
23814     08 00 90 2D |  if_nc_and_z	jmp	#LR__3443
23818     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2381c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3441
23820                 | LR__3442
23820                 | LR__3443
23820     00 04 56 F2 | 	cmps	_var03, #0 wc
23824     00 FA 05 C6 |  if_b	mov	result1, #0
23828     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2382c     05 07 0A F2 | 	cmp	_var04, _var06 wz
23830     00 FA 05 A6 |  if_e	mov	result1, #0
23834     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23838     00 06 0E F2 | 	cmp	_var04, #0 wz
2383c     01 FA 65 A6 |  if_e	neg	result1, #1
23840     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23844     00 0A 0E F2 | 	cmp	_var06, #0 wz
23848     01 FA 05 A6 |  if_e	mov	result1, #1
2384c     03 FB 01 56 |  if_ne	mov	result1, _var04
23850     05 FB 81 51 |  if_ne	sub	result1, _var06
23854                 | __system__strncmp_ret
23854     2D 00 64 FD | 	ret
23858                 | 
23858                 | __system____root_opendir
23858     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2385c     04 12 06 F1 | 	add	arg01, #4
23860     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
23864     00 FA 05 F6 | 	mov	result1, #0
23868     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2386c                 | __system____root_opendir_ret
2386c     2D 00 64 FD | 	ret
23870                 | 
23870                 | __system____root_readdir
23870     03 4A 05 F6 | 	mov	COUNT_, #3
23874     A8 00 A0 FD | 	call	#pushregs_
23878     09 1F 02 F6 | 	mov	local01, arg01
2387c     0A 21 02 F6 | 	mov	local02, arg02
23880     04 1E 06 F1 | 	add	local01, #4
23884     0F 23 02 FB | 	rdlong	local03, local01
23888     04 1E 86 F1 | 	sub	local01, #4
2388c                 | LR__3450
2388c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
23890     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
23894     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
23898     01 FA 65 A6 |  if_e	neg	result1, #1
2389c     48 00 90 AD |  if_e	jmp	#LR__3451
238a0     11 17 0A FB | 	rdlong	arg03, local03 wz
238a4     04 22 06 A1 |  if_e	add	local03, #4
238a8     E0 FF 9F AD |  if_e	jmp	#LR__3450
238ac     11 15 02 FB | 	rdlong	arg02, local03
238b0     01 14 06 F1 | 	add	arg02, #1
238b4     10 13 02 F6 | 	mov	arg01, local02
238b8     40 16 06 F6 | 	mov	arg03, #64
238bc     58 FE BF FD | 	call	#__system__strncpy
238c0     50 20 06 F1 | 	add	local02, #80
238c4     10 03 48 FC | 	wrbyte	#1, local02
238c8     08 20 86 F1 | 	sub	local02, #8
238cc     10 01 68 FC | 	wrlong	#0, local02
238d0     04 20 06 F1 | 	add	local02, #4
238d4     10 01 68 FC | 	wrlong	#0, local02
238d8     04 22 06 F1 | 	add	local03, #4
238dc     04 1E 06 F1 | 	add	local01, #4
238e0     0F 23 62 FC | 	wrlong	local03, local01
238e4     00 FA 05 F6 | 	mov	result1, #0
238e8                 | LR__3451
238e8     A7 F0 03 F6 | 	mov	ptra, fp
238ec     B2 00 A0 FD | 	call	#popregs_
238f0                 | __system____root_readdir_ret
238f0     2D 00 64 FD | 	ret
238f4                 | 
238f4                 | __system____root_closedir
238f4     00 FA 05 F6 | 	mov	result1, #0
238f8                 | __system____root_closedir_ret
238f8     2D 00 64 FD | 	ret
238fc                 | 
238fc                 | __system____root_stat
238fc     0A 01 02 F6 | 	mov	_var01, arg02
23900     00 13 02 F6 | 	mov	arg01, _var01
23904     00 14 06 F6 | 	mov	arg02, #0
23908     30 16 06 F6 | 	mov	arg03, #48
2390c     98 00 A0 FD | 	call	#\builtin_bytefill_
23910     08 00 06 F1 | 	add	_var01, #8
23914     08 00 80 FF 
23918     00 FF 6B FC | 	wrlong	##4607, _var01
2391c     00 FA 05 F6 | 	mov	result1, #0
23920                 | __system____root_stat_ret
23920     2D 00 64 FD | 	ret
23924                 | 
23924                 | __system___normalizeName
23924     00 00 06 F6 | 	mov	_var01, #0
23928     09 03 02 F6 | 	mov	_var02, arg01
2392c     01 05 02 F6 | 	mov	_var03, _var02
23930                 | LR__3460
23930     01 07 CA FA | 	rdbyte	_var04, _var02 wz
23934     5C 01 90 AD |  if_e	jmp	#LR__3479
23938     00 00 0E F2 | 	cmp	_var01, #0 wz
2393c     02 07 02 56 |  if_ne	mov	_var04, _var03
23940     01 04 06 51 |  if_ne	add	_var03, #1
23944     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
23948     00 00 06 56 |  if_ne	mov	_var01, #0
2394c     01 07 C2 FA | 	rdbyte	_var04, _var02
23950     2E 06 0E F2 | 	cmp	_var04, #46 wz
23954     D8 00 90 5D |  if_ne	jmp	#LR__3472
23958     01 02 06 F1 | 	add	_var02, #1
2395c     01 07 C2 FA | 	rdbyte	_var04, _var02
23960     01 02 86 F1 | 	sub	_var02, #1
23964     2F 06 0E F2 | 	cmp	_var04, #47 wz
23968     18 00 90 AD |  if_e	jmp	#LR__3461
2396c     01 02 06 F1 | 	add	_var02, #1
23970     01 09 C2 FA | 	rdbyte	_var05, _var02
23974     01 02 86 F1 | 	sub	_var02, #1
23978     04 0B 02 F6 | 	mov	_var06, _var05
2397c     07 0A 4E F7 | 	zerox	_var06, #7 wz
23980     10 00 90 5D |  if_ne	jmp	#LR__3462
23984                 | LR__3461
23984     01 0D 02 F6 | 	mov	_var07, _var02
23988     01 0C 06 F1 | 	add	_var07, #1
2398c     06 03 02 F6 | 	mov	_var02, _var07
23990     E0 00 90 FD | 	jmp	#LR__3476
23994                 | LR__3462
23994     01 02 06 F1 | 	add	_var02, #1
23998     01 0D C2 FA | 	rdbyte	_var07, _var02
2399c     01 02 86 F1 | 	sub	_var02, #1
239a0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
239a4     2E 06 0E F2 | 	cmp	_var04, #46 wz
239a8     84 00 90 5D |  if_ne	jmp	#LR__3471
239ac     02 02 06 F1 | 	add	_var02, #2
239b0     01 0D C2 FA | 	rdbyte	_var07, _var02
239b4     02 02 86 F1 | 	sub	_var02, #2
239b8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
239bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
239c0     18 00 90 AD |  if_e	jmp	#LR__3463
239c4     02 02 06 F1 | 	add	_var02, #2
239c8     01 09 C2 FA | 	rdbyte	_var05, _var02
239cc     02 02 86 F1 | 	sub	_var02, #2
239d0     04 0B 02 F6 | 	mov	_var06, _var05
239d4     07 0A 4E F7 | 	zerox	_var06, #7 wz
239d8     54 00 90 5D |  if_ne	jmp	#LR__3470
239dc                 | LR__3463
239dc     02 02 06 F1 | 	add	_var02, #2
239e0     09 05 5A F2 | 	cmps	_var03, arg01 wcz
239e4     40 00 90 ED |  if_be	jmp	#LR__3469
239e8     02 0F 02 F6 | 	mov	_var08, _var03
239ec     01 0E 86 F1 | 	sub	_var08, #1
239f0                 | LR__3464
239f0     07 07 C2 FA | 	rdbyte	_var04, _var08
239f4     2F 06 0E F2 | 	cmp	_var04, #47 wz
239f8     0C 00 90 5D |  if_ne	jmp	#LR__3465
239fc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
23a00     01 0E 86 11 |  if_a	sub	_var08, #1
23a04     E8 FF 9F 1D |  if_a	jmp	#LR__3464
23a08                 | LR__3465
23a08     97 0C 48 FB | 	callpa	#(@LR__3467-@LR__3466)>>2,fcache_load_ptr_
23a0c                 | LR__3466
23a0c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
23a10     10 00 90 ED |  if_be	jmp	#LR__3468
23a14     07 07 C2 FA | 	rdbyte	_var04, _var08
23a18     2F 06 0E F2 | 	cmp	_var04, #47 wz
23a1c     01 0E 86 51 |  if_ne	sub	_var08, #1
23a20     E8 FF 9F 5D |  if_ne	jmp	#LR__3466
23a24                 | LR__3467
23a24                 | LR__3468
23a24     07 05 02 F6 | 	mov	_var03, _var08
23a28                 | LR__3469
23a28     01 00 06 F6 | 	mov	_var01, #1
23a2c     44 00 90 FD | 	jmp	#LR__3476
23a30                 | LR__3470
23a30                 | LR__3471
23a30                 | LR__3472
23a30     97 18 48 FB | 	callpa	#(@LR__3474-@LR__3473)>>2,fcache_load_ptr_
23a34                 | LR__3473
23a34     01 07 CA FA | 	rdbyte	_var04, _var02 wz
23a38     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
23a3c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
23a40     20 00 90 AD |  if_e	jmp	#LR__3475
23a44     01 0B 02 F6 | 	mov	_var06, _var02
23a48     01 09 02 F6 | 	mov	_var05, _var02
23a4c     01 08 06 F1 | 	add	_var05, #1
23a50     05 11 C2 FA | 	rdbyte	_var09, _var06
23a54     04 03 02 F6 | 	mov	_var02, _var05
23a58     02 11 42 FC | 	wrbyte	_var09, _var03
23a5c     01 04 06 F1 | 	add	_var03, #1
23a60     D0 FF 9F FD | 	jmp	#LR__3473
23a64                 | LR__3474
23a64                 | LR__3475
23a64     01 07 C2 FA | 	rdbyte	_var04, _var02
23a68     2F 06 0E F2 | 	cmp	_var04, #47 wz
23a6c     C0 FE 9F 5D |  if_ne	jmp	#LR__3460
23a70     01 00 06 F6 | 	mov	_var01, #1
23a74                 | LR__3476
23a74     97 0C 48 FB | 	callpa	#(@LR__3478-@LR__3477)>>2,fcache_load_ptr_
23a78                 | LR__3477
23a78     01 07 C2 FA | 	rdbyte	_var04, _var02
23a7c     2F 06 0E F2 | 	cmp	_var04, #47 wz
23a80     01 0D 02 A6 |  if_e	mov	_var07, _var02
23a84     01 0C 06 A1 |  if_e	add	_var07, #1
23a88     06 03 02 A6 |  if_e	mov	_var02, _var07
23a8c     E8 FF 9F AD |  if_e	jmp	#LR__3477
23a90                 | LR__3478
23a90     9C FE 9F FD | 	jmp	#LR__3460
23a94                 | LR__3479
23a94     02 01 48 FC | 	wrbyte	#0, _var03
23a98                 | __system___normalizeName_ret
23a98     2D 00 64 FD | 	ret
23a9c                 | 
23a9c                 | __system___strrev
23a9c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
23aa0     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
23aa4     09 03 02 F6 | 	mov	_var02, arg01
23aa8     97 1A 48 FB | 	callpa	#(@LR__3482-@LR__3480)>>2,fcache_load_ptr_
23aac                 | LR__3480
23aac     01 01 CA FA | 	rdbyte	_var01, _var02 wz
23ab0     01 02 06 51 |  if_ne	add	_var02, #1
23ab4     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
23ab8     01 02 86 F1 | 	sub	_var02, #1
23abc                 | LR__3481
23abc     09 03 5A F2 | 	cmps	_var02, arg01 wcz
23ac0     1C 00 90 ED |  if_be	jmp	#LR__3483
23ac4     09 01 C2 FA | 	rdbyte	_var01, arg01
23ac8     01 05 C2 FA | 	rdbyte	_var03, _var02
23acc     09 05 42 FC | 	wrbyte	_var03, arg01
23ad0     01 01 42 FC | 	wrbyte	_var01, _var02
23ad4     01 12 06 F1 | 	add	arg01, #1
23ad8     01 02 86 F1 | 	sub	_var02, #1
23adc     DC FF 9F FD | 	jmp	#LR__3481
23ae0                 | LR__3482
23ae0                 | LR__3483
23ae0                 | __system___strrev_ret
23ae0     2D 00 64 FD | 	ret
23ae4                 | 
23ae4                 | __system___fmtpad
23ae4     06 4A 05 F6 | 	mov	COUNT_, #6
23ae8     A8 00 A0 FD | 	call	#pushregs_
23aec     09 1F 02 F6 | 	mov	local01, arg01
23af0     0A 21 02 F6 | 	mov	local02, arg02
23af4     0B 23 02 F6 | 	mov	local03, arg03
23af8     10 13 EA F8 | 	getbyte	arg01, local02, #1
23afc     16 20 46 F0 | 	shr	local02, #22
23b00     03 20 0E F5 | 	and	local02, #3 wz
23b04     00 24 06 F6 | 	mov	local04, #0
23b08     01 20 06 A6 |  if_e	mov	local02, #1
23b0c     0C 21 CA F7 | 	test	local02, arg04 wz
23b10     00 FA 05 A6 |  if_e	mov	result1, #0
23b14     88 00 90 AD |  if_e	jmp	#LR__3493
23b18     09 23 C2 F2 | 	subr	local03, arg01
23b1c     01 22 56 F2 | 	cmps	local03, #1 wc
23b20     00 FA 05 C6 |  if_b	mov	result1, #0
23b24     78 00 90 CD |  if_b	jmp	#LR__3493
23b28     03 20 0E F2 | 	cmp	local02, #3 wz
23b2c     18 00 90 5D |  if_ne	jmp	#LR__3490
23b30     01 18 0E F2 | 	cmp	arg04, #1 wz
23b34     6E 20 62 FD | 	wrz	local02
23b38     10 23 02 F1 | 	add	local03, local02
23b3c     11 23 52 F6 | 	abs	local03, local03 wc
23b40     01 22 46 F0 | 	shr	local03, #1
23b44     11 23 82 F6 | 	negc	local03, local03
23b48                 | LR__3490
23b48     01 22 56 F2 | 	cmps	local03, #1 wc
23b4c     4C 00 90 CD |  if_b	jmp	#LR__3492
23b50     11 27 02 F6 | 	mov	local05, local03
23b54                 | LR__3491
23b54     0F 21 02 F6 | 	mov	local02, local01
23b58     0F 29 02 F6 | 	mov	local06, local01
23b5c     13 20 46 F7 | 	zerox	local02, #19
23b60     14 28 46 F0 | 	shr	local06, #20
23b64     02 28 66 F0 | 	shl	local06, #2
23b68     ED 28 02 F1 | 	add	local06, __methods__
23b6c     14 29 02 FB | 	rdlong	local06, local06
23b70     20 12 06 F6 | 	mov	arg01, #32
23b74     F2 22 02 F6 | 	mov	local03, objptr
23b78     10 E5 01 F6 | 	mov	objptr, local02
23b7c     2D 28 62 FD | 	call	local06
23b80     11 E5 01 F6 | 	mov	objptr, local03
23b84     FD 28 02 F6 | 	mov	local06, result1
23b88     00 28 56 F2 | 	cmps	local06, #0 wc
23b8c     14 FB 01 C6 |  if_b	mov	result1, local06
23b90     0C 00 90 CD |  if_b	jmp	#LR__3493
23b94     14 25 02 F1 | 	add	local04, local06
23b98     EE 27 6E FB | 	djnz	local05, #LR__3491
23b9c                 | LR__3492
23b9c     12 FB 01 F6 | 	mov	result1, local04
23ba0                 | LR__3493
23ba0     A7 F0 03 F6 | 	mov	ptra, fp
23ba4     B2 00 A0 FD | 	call	#popregs_
23ba8                 | __system___fmtpad_ret
23ba8     2D 00 64 FD | 	ret
23bac                 | 
23bac                 | __system___uitoa
23bac     04 4A 05 F6 | 	mov	COUNT_, #4
23bb0     A8 00 A0 FD | 	call	#pushregs_
23bb4     09 1F 02 F6 | 	mov	local01, arg01
23bb8     00 1A 4E F2 | 	cmps	arg05, #0 wz
23bbc     0F 1B 02 F6 | 	mov	arg05, local01
23bc0     00 20 06 F6 | 	mov	local02, #0
23bc4     37 22 06 56 |  if_ne	mov	local03, #55
23bc8     57 22 06 A6 |  if_e	mov	local03, #87
23bcc                 | LR__3500
23bcc     0B 15 12 FD | 	qdiv	arg02, arg03
23bd0     19 24 62 FD | 	getqy	local04
23bd4     0B 15 12 FD | 	qdiv	arg02, arg03
23bd8     0A 24 16 F2 | 	cmp	local04, #10 wc
23bdc     30 24 06 C1 |  if_b	add	local04, #48
23be0     11 25 02 31 |  if_ae	add	local04, local03
23be4     0D 25 42 FC | 	wrbyte	local04, arg05
23be8     01 1A 06 F1 | 	add	arg05, #1
23bec     01 20 06 F1 | 	add	local02, #1
23bf0     18 14 62 FD | 	getqx	arg02
23bf4     00 14 0E F2 | 	cmp	arg02, #0 wz
23bf8     D0 FF 9F 5D |  if_ne	jmp	#LR__3500
23bfc     0C 21 12 F2 | 	cmp	local02, arg04 wc
23c00     C8 FF 9F CD |  if_b	jmp	#LR__3500
23c04     0D 01 48 FC | 	wrbyte	#0, arg05
23c08     0F 13 02 F6 | 	mov	arg01, local01
23c0c     8C FE BF FD | 	call	#__system___strrev
23c10     10 FB 01 F6 | 	mov	result1, local02
23c14     A7 F0 03 F6 | 	mov	ptra, fp
23c18     B2 00 A0 FD | 	call	#popregs_
23c1c                 | __system___uitoa_ret
23c1c     2D 00 64 FD | 	ret
23c20                 | 
23c20                 | __system__disassemble_0433
23c20     10 4A 05 F6 | 	mov	COUNT_, #16
23c24     A8 00 A0 FD | 	call	#pushregs_
23c28     09 1F 02 F6 | 	mov	local01, arg01
23c2c     0A 21 02 F6 | 	mov	local02, arg02
23c30     0B 23 02 F6 | 	mov	local03, arg03
23c34     0C 25 02 F6 | 	mov	local04, arg04
23c38     0D 27 02 F6 | 	mov	local05, arg05
23c3c     13 13 52 F6 | 	abs	arg01, local05 wc
23c40     1F 28 C6 C9 |  if_b	decod	local06, #31
23c44     00 28 06 36 |  if_ae	mov	local06, #0
23c48     64 D0 BF FD | 	call	#__system___float_fromuns
23c4c     14 FB 61 F5 | 	xor	result1, local06
23c50     FD 2A 02 F6 | 	mov	local07, result1
23c54     00 2C 06 F6 | 	mov	local08, #0
23c58     0F 13 02 F6 | 	mov	arg01, local01
23c5c     00 14 06 F6 | 	mov	arg02, #0
23c60     01 16 06 F6 | 	mov	arg03, #1
23c64     80 D8 BF FD | 	call	#__system___float_cmp
23c68     00 FA 0D F2 | 	cmp	result1, #0 wz
23c6c     00 2E 06 A6 |  if_e	mov	local09, #0
23c70     10 01 68 AC |  if_e	wrlong	#0, local02
23c74     11 2F 62 AC |  if_e	wrlong	local09, local03
23c78     8C 01 90 AD |  if_e	jmp	#LR__3522
23c7c     0F 13 02 F6 | 	mov	arg01, local01
23c80     30 DD BF FD | 	call	#__system____builtin_ilogb
23c84     FD 30 02 F6 | 	mov	local10, result1
23c88     0A 26 0E F2 | 	cmp	local05, #10 wz
23c8c     24 00 90 5D |  if_ne	jmp	#LR__3510
23c90     18 2F 02 F6 | 	mov	local09, local10
23c94     01 2E 66 F0 | 	shl	local09, #1
23c98     18 2F 02 F1 | 	add	local09, local10
23c9c     17 31 52 F6 | 	abs	local10, local09 wc
23ca0     0A 30 16 FD | 	qdiv	local10, #10
23ca4     09 32 06 F6 | 	mov	local11, #9
23ca8     18 30 62 FD | 	getqx	local10
23cac     18 31 82 F6 | 	negc	local10, local10
23cb0     04 00 90 FD | 	jmp	#LR__3511
23cb4                 | LR__3510
23cb4     18 32 06 F6 | 	mov	local11, #24
23cb8                 | LR__3511
23cb8                 | LR__3512
23cb8     08 2C 56 F2 | 	cmps	local08, #8 wc
23cbc     01 2C 06 F1 | 	add	local08, #1
23cc0     60 00 90 3D |  if_ae	jmp	#LR__3513
23cc4     00 C0 1F FF 
23cc8     00 12 06 F6 | 	mov	arg01, ##1065353216
23ccc     15 15 02 F6 | 	mov	arg02, local07
23cd0     18 17 02 F6 | 	mov	arg03, local10
23cd4     88 E3 BF FD | 	call	#__system___float_pow_n
23cd8     FD 14 02 F6 | 	mov	arg02, result1
23cdc     0F 13 02 F6 | 	mov	arg01, local01
23ce0     D4 D5 BF FD | 	call	#__system___float_div
23ce4     FD 34 02 F6 | 	mov	local12, result1
23ce8     1A 13 02 F6 | 	mov	arg01, local12
23cec     00 C0 1F FF 
23cf0     00 14 06 F6 | 	mov	arg02, ##1065353216
23cf4     01 16 06 F6 | 	mov	arg03, #1
23cf8     EC D7 BF FD | 	call	#__system___float_cmp
23cfc     00 FA 55 F2 | 	cmps	result1, #0 wc
23d00     01 30 86 C1 |  if_b	sub	local10, #1
23d04     B0 FF 9F CD |  if_b	jmp	#LR__3512
23d08     15 15 02 F6 | 	mov	arg02, local07
23d0c     1A 13 02 F6 | 	mov	arg01, local12
23d10     01 16 66 F6 | 	neg	arg03, #1
23d14     D0 D7 BF FD | 	call	#__system___float_cmp
23d18     00 FA 55 F2 | 	cmps	result1, #0 wc
23d1c     01 30 06 31 |  if_ae	add	local10, #1
23d20     94 FF 9F 3D |  if_ae	jmp	#LR__3512
23d24                 | LR__3513
23d24     1A 13 02 F6 | 	mov	arg01, local12
23d28     88 DC BF FD | 	call	#__system____builtin_ilogb
23d2c     FD 36 02 F6 | 	mov	local13, result1
23d30     1A 39 02 F6 | 	mov	local14, local12
23d34     17 39 06 F4 | 	bitl	local14, #279
23d38     17 38 26 F4 | 	bith	local14, #23
23d3c     1B 39 62 F0 | 	shl	local14, local13
23d40     02 26 0E F2 | 	cmp	local05, #2 wz
23d44     02 24 66 A0 |  if_e	shl	local04, #2
23d48     00 3A 06 F6 | 	mov	local15, #0
23d4c     00 24 56 F2 | 	cmps	local04, #0 wc
23d50     10 00 90 3D |  if_ae	jmp	#LR__3514
23d54     18 25 C2 F2 | 	subr	local04, local10
23d58     00 24 56 F2 | 	cmps	local04, #0 wc
23d5c     A0 00 90 CD |  if_b	jmp	#LR__3521
23d60     04 00 90 FD | 	jmp	#LR__3515
23d64                 | LR__3514
23d64     01 24 06 F1 | 	add	local04, #1
23d68                 | LR__3515
23d68     19 25 7A F3 | 	fles	local04, local11 wcz
23d6c     01 3C 06 F6 | 	mov	local16, #1
23d70     97 22 48 FB | 	callpa	#(@LR__3517-@LR__3516)>>2,fcache_load_ptr_
23d74                 | LR__3516
23d74     00 40 00 FF 
23d78     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
23d7c     38 00 90 3D |  if_ae	jmp	#LR__3518
23d80     01 24 56 F2 | 	cmps	local04, #1 wc
23d84     01 24 86 F1 | 	sub	local04, #1
23d88     2C 00 90 CD |  if_b	jmp	#LR__3518
23d8c     13 3B 02 FD | 	qmul	local15, local05
23d90     1C 37 02 F6 | 	mov	local13, local14
23d94     17 36 46 F0 | 	shr	local13, #23
23d98     17 39 06 F4 | 	bitl	local14, #279
23d9c     18 3A 62 FD | 	getqx	local15
23da0     13 3D 02 FD | 	qmul	local16, local05
23da4     18 3C 62 FD | 	getqx	local16
23da8     13 39 02 FD | 	qmul	local14, local05
23dac     1B 3B 02 F1 | 	add	local15, local13
23db0     18 38 62 FD | 	getqx	local14
23db4     BC FF 9F FD | 	jmp	#LR__3516
23db8                 | LR__3517
23db8                 | LR__3518
23db8     13 2F 02 F6 | 	mov	local09, local05
23dbc     17 2E 66 F0 | 	shl	local09, #23
23dc0     17 37 52 F6 | 	abs	local13, local09 wc
23dc4     01 36 46 F0 | 	shr	local13, #1
23dc8     1B 37 82 F6 | 	negc	local13, local13
23dcc     1B 39 1A F2 | 	cmp	local14, local13 wcz
23dd0     20 00 90 1D |  if_a	jmp	#LR__3519
23dd4     17 26 66 F0 | 	shl	local05, #23
23dd8     13 37 52 F6 | 	abs	local13, local05 wc
23ddc     01 36 46 F0 | 	shr	local13, #1
23de0     1B 37 82 F6 | 	negc	local13, local13
23de4     1B 39 0A F2 | 	cmp	local14, local13 wz
23de8     14 00 90 5D |  if_ne	jmp	#LR__3520
23dec     01 3A CE F7 | 	test	local15, #1 wz
23df0     0C 00 90 AD |  if_e	jmp	#LR__3520
23df4                 | LR__3519
23df4     01 3A 06 F1 | 	add	local15, #1
23df8     1E 3B 0A F2 | 	cmp	local15, local16 wz
23dfc     01 30 06 A1 |  if_e	add	local10, #1
23e00                 | LR__3520
23e00                 | LR__3521
23e00     10 3B 62 FC | 	wrlong	local15, local02
23e04     11 31 62 FC | 	wrlong	local10, local03
23e08                 | LR__3522
23e08     A7 F0 03 F6 | 	mov	ptra, fp
23e0c     B2 00 A0 FD | 	call	#popregs_
23e10                 | __system__disassemble_0433_ret
23e10     2D 00 64 FD | 	ret
23e14                 | 
23e14                 | __system__emitsign_0435
23e14     00 FA 05 F6 | 	mov	result1, #0
23e18     00 14 0E F2 | 	cmp	arg02, #0 wz
23e1c     09 01 02 56 |  if_ne	mov	_var01, arg01
23e20     01 12 06 51 |  if_ne	add	arg01, #1
23e24     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
23e28     01 FA 05 56 |  if_ne	mov	result1, #1
23e2c     00 16 0E F2 | 	cmp	arg03, #0 wz
23e30     09 61 48 5C |  if_ne	wrbyte	#48, arg01
23e34     01 12 06 51 |  if_ne	add	arg01, #1
23e38     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
23e3c     02 FA 05 51 |  if_ne	add	result1, #2
23e40                 | __system__emitsign_0435_ret
23e40     2D 00 64 FD | 	ret
23e44                 | 
23e44                 | __system___gettxfunc
23e44     01 4A 05 F6 | 	mov	COUNT_, #1
23e48     A8 00 A0 FD | 	call	#pushregs_
23e4c     A0 F8 BF FD | 	call	#__system____getftab
23e50     FD 1E 0A F6 | 	mov	local01, result1 wz
23e54     10 00 90 AD |  if_e	jmp	#LR__3530
23e58     08 1E 06 F1 | 	add	local01, #8
23e5c     0F 15 0A FB | 	rdlong	arg02, local01 wz
23e60     08 1E 86 F1 | 	sub	local01, #8
23e64     08 00 90 5D |  if_ne	jmp	#LR__3531
23e68                 | LR__3530
23e68     00 FA 05 F6 | 	mov	result1, #0
23e6c     0C 00 90 FD | 	jmp	#LR__3532
23e70                 | LR__3531
23e70     00 18 04 FF 
23e74     00 1E 46 F5 | 	or	local01, ##137363456
23e78     0F FB 01 F6 | 	mov	result1, local01
23e7c                 | LR__3532
23e7c     A7 F0 03 F6 | 	mov	ptra, fp
23e80     B2 00 A0 FD | 	call	#popregs_
23e84                 | __system___gettxfunc_ret
23e84     2D 00 64 FD | 	ret
23e88                 | 
23e88                 | __system___getrxfunc
23e88     01 4A 05 F6 | 	mov	COUNT_, #1
23e8c     A8 00 A0 FD | 	call	#pushregs_
23e90     5C F8 BF FD | 	call	#__system____getftab
23e94     FD 1E 0A F6 | 	mov	local01, result1 wz
23e98     10 00 90 AD |  if_e	jmp	#LR__3540
23e9c     08 1E 06 F1 | 	add	local01, #8
23ea0     0F 15 0A FB | 	rdlong	arg02, local01 wz
23ea4     08 1E 86 F1 | 	sub	local01, #8
23ea8     08 00 90 5D |  if_ne	jmp	#LR__3541
23eac                 | LR__3540
23eac     00 FA 05 F6 | 	mov	result1, #0
23eb0     0C 00 90 FD | 	jmp	#LR__3542
23eb4                 | LR__3541
23eb4     00 20 04 FF 
23eb8     00 1E 46 F5 | 	or	local01, ##138412032
23ebc     0F FB 01 F6 | 	mov	result1, local01
23ec0                 | LR__3542
23ec0     A7 F0 03 F6 | 	mov	ptra, fp
23ec4     B2 00 A0 FD | 	call	#popregs_
23ec8                 | __system___getrxfunc_ret
23ec8     2D 00 64 FD | 	ret
23ecc                 | 
23ecc                 | __system___getiolock_0475
23ecc     01 4A 05 F6 | 	mov	COUNT_, #1
23ed0     A8 00 A0 FD | 	call	#pushregs_
23ed4     18 F8 BF FD | 	call	#__system____getftab
23ed8     FD 1E 0A F6 | 	mov	local01, result1 wz
23edc     10 00 90 AD |  if_e	jmp	#LR__3550
23ee0     08 1E 06 F1 | 	add	local01, #8
23ee4     0F FB 09 FB | 	rdlong	result1, local01 wz
23ee8     08 1E 86 F1 | 	sub	local01, #8
23eec     18 00 90 5D |  if_ne	jmp	#LR__3551
23ef0                 | LR__3550
23ef0     01 00 00 FF 
23ef4     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
23ef8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
23efc     01 00 00 FF 
23f00     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
23f04     08 00 90 FD | 	jmp	#LR__3552
23f08                 | LR__3551
23f08     0C 1E 06 F1 | 	add	local01, #12
23f0c     0F FB 01 F6 | 	mov	result1, local01
23f10                 | LR__3552
23f10     A7 F0 03 F6 | 	mov	ptra, fp
23f14     B2 00 A0 FD | 	call	#popregs_
23f18                 | __system___getiolock_0475_ret
23f18     2D 00 64 FD | 	ret
23f1c                 | 
23f1c                 | __system____ScanForChar
23f1c     09 01 02 F6 | 	mov	_var01, arg01
23f20     09 03 02 F6 | 	mov	_var02, arg01
23f24     97 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
23f28                 | LR__3560
23f28     01 FB C9 FA | 	rdbyte	result1, _var02 wz
23f2c     01 02 06 51 |  if_ne	add	_var02, #1
23f30     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
23f34                 | LR__3561
23f34     09 03 82 F1 | 	sub	_var02, arg01
23f38     01 FB 01 F6 | 	mov	result1, _var02
23f3c     FD 12 0A F6 | 	mov	arg01, result1 wz
23f40     00 FA 05 A6 |  if_e	mov	result1, #0
23f44     B8 00 90 AD |  if_e	jmp	#LR__3568
23f48     0A 05 02 F6 | 	mov	_var03, arg02
23f4c     07 04 4E F7 | 	zerox	_var03, #7 wz
23f50     00 FA 05 A6 |  if_e	mov	result1, #0
23f54     A8 00 90 AD |  if_e	jmp	#LR__3568
23f58     01 16 16 F2 | 	cmp	arg03, #1 wc
23f5c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
23f60     01 16 06 86 |  if_c_and_z	mov	arg03, #1
23f64     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
23f68     94 00 90 4D |  if_c_and_nz	jmp	#LR__3568
23f6c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
23f70     10 00 90 ED |  if_be	jmp	#LR__3562
23f74     00 18 0E F2 | 	cmp	arg04, #0 wz
23f78     00 FA 05 A6 |  if_e	mov	result1, #0
23f7c     80 00 90 AD |  if_e	jmp	#LR__3568
23f80     09 17 02 F6 | 	mov	arg03, arg01
23f84                 | LR__3562
23f84     01 16 86 F1 | 	sub	arg03, #1
23f88     00 18 0E F2 | 	cmp	arg04, #0 wz
23f8c     38 00 90 5D |  if_ne	jmp	#LR__3564
23f90     0B 07 02 F6 | 	mov	_var04, arg03
23f94     09 09 02 F6 | 	mov	_var05, arg01
23f98                 | LR__3563
23f98     04 07 12 F2 | 	cmp	_var04, _var05 wc
23f9c     5C 00 90 3D |  if_ae	jmp	#LR__3567
23fa0     03 05 02 F6 | 	mov	_var03, _var04
23fa4     00 05 02 F1 | 	add	_var03, _var01
23fa8     02 05 C2 FA | 	rdbyte	_var03, _var03
23fac     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
23fb0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
23fb4     01 06 06 A1 |  if_e	add	_var04, #1
23fb8     03 FB 01 A6 |  if_e	mov	result1, _var04
23fbc     40 00 90 AD |  if_e	jmp	#LR__3568
23fc0     01 06 06 F1 | 	add	_var04, #1
23fc4     D0 FF 9F FD | 	jmp	#LR__3563
23fc8                 | LR__3564
23fc8     0B 07 02 F6 | 	mov	_var04, arg03
23fcc                 | LR__3565
23fcc     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
23fd0     28 00 90 1D |  if_a	jmp	#LR__3566
23fd4     03 09 02 F6 | 	mov	_var05, _var04
23fd8     00 09 02 F1 | 	add	_var05, _var01
23fdc     04 05 C2 FA | 	rdbyte	_var03, _var05
23fe0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
23fe4     04 05 0A F2 | 	cmp	_var03, _var05 wz
23fe8     01 06 06 A1 |  if_e	add	_var04, #1
23fec     03 FB 01 A6 |  if_e	mov	result1, _var04
23ff0     0C 00 90 AD |  if_e	jmp	#LR__3568
23ff4     01 06 86 F1 | 	sub	_var04, #1
23ff8     D0 FF 9F FD | 	jmp	#LR__3565
23ffc                 | LR__3566
23ffc                 | LR__3567
23ffc     00 FA 05 F6 | 	mov	result1, #0
24000                 | LR__3568
24000                 | __system____ScanForChar_ret
24000     2D 00 64 FD | 	ret
24004                 | 
24004                 | __system___basic_dir
24004     05 4A 05 F6 | 	mov	COUNT_, #5
24008     A8 00 A0 FD | 	call	#pushregs_
2400c     4C F0 07 F1 | 	add	ptra, #76
24010     04 4E 05 F1 | 	add	fp, #4
24014     A7 12 62 FC | 	wrlong	arg01, fp
24018     04 4E 05 F1 | 	add	fp, #4
2401c     A7 14 62 FC | 	wrlong	arg02, fp
24020     04 4E 85 F1 | 	sub	fp, #4
24024     A7 14 0A FB | 	rdlong	arg02, fp wz
24028     04 4E 85 F1 | 	sub	fp, #4
2402c     04 4E 05 51 |  if_ne	add	fp, #4
24030     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24034     04 4E 85 51 |  if_ne	sub	fp, #4
24038     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
2403c     70 00 90 AD |  if_e	jmp	#LR__3570
24040     03 00 00 FF 
24044     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24048     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2404c     03 00 00 FF 
24050     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24054     03 00 00 5F 
24058     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
2405c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
24060     03 00 00 5F 
24064     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
24068     14 EA BF 5D |  if_ne	call	#__system__closedir
2406c     6D 01 00 FF 
24070     54 13 06 F6 | 	mov	arg01, ##@LR__4728
24074     1C E9 BF FD | 	call	#__system__opendir
24078     03 00 00 FF 
2407c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24080     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
24084     08 4E 05 F1 | 	add	fp, #8
24088     A7 20 02 FB | 	rdlong	local02, fp
2408c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24090     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
24094     04 4E 85 F1 | 	sub	fp, #4
24098     A7 20 02 FB | 	rdlong	local02, fp
2409c     04 4E 85 F1 | 	sub	fp, #4
240a0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
240a4     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
240a8     03 00 00 FF 
240ac     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
240b0                 | LR__3570
240b0     03 00 00 FF 
240b4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
240b8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
240bc     03 00 00 FF 
240c0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
240c4     6D 01 00 AF 
240c8     56 FB 05 A6 |  if_e	mov	result1, ##@LR__4729
240cc     84 02 90 AD |  if_e	jmp	#LR__3583
240d0                 | LR__3571
240d0     03 00 00 FF 
240d4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
240d8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
240dc     03 00 00 FF 
240e0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
240e4     0C EA BF FD | 	call	#__system__readdir
240e8     0C 4E 05 F1 | 	add	fp, #12
240ec     A7 FA 61 FC | 	wrlong	result1, fp
240f0     0C 4E 85 F1 | 	sub	fp, #12
240f4     00 FA 0D F2 | 	cmp	result1, #0 wz
240f8     38 00 90 5D |  if_ne	jmp	#LR__3572
240fc     03 00 00 FF 
24100     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24104     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
24108     03 00 00 FF 
2410c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24110     6C E9 BF FD | 	call	#__system__closedir
24114     03 00 00 FF 
24118     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2411c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24120     03 00 00 FF 
24124     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24128     6D 01 00 FF 
2412c     58 FB 05 F6 | 	mov	result1, ##@LR__4730
24130     20 02 90 FD | 	jmp	#LR__3583
24134                 | LR__3572
24134     0C 4E 05 F1 | 	add	fp, #12
24138     A7 12 02 FB | 	rdlong	arg01, fp
2413c     0C 4E 85 F1 | 	sub	fp, #12
24140     03 00 00 FF 
24144     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
24148     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2414c     03 00 00 FF 
24150     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
24154     48 07 B0 FD | 	call	#__system___pat_match
24158     00 FA 0D F2 | 	cmp	result1, #0 wz
2415c     70 FF 9F AD |  if_e	jmp	#LR__3571
24160     03 00 00 FF 
24164     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
24168     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2416c     03 00 00 FF 
24170     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
24174     78 01 90 AD |  if_e	jmp	#LR__3579
24178     0C 4E 05 F1 | 	add	fp, #12
2417c     A7 12 02 FB | 	rdlong	arg01, fp
24180     04 4E 05 F1 | 	add	fp, #4
24184     A7 14 02 F6 | 	mov	arg02, fp
24188     10 4E 85 F1 | 	sub	fp, #16
2418c     68 F2 BF FD | 	call	#__system__stat
24190     40 4E 05 F1 | 	add	fp, #64
24194     A7 FA 61 FC | 	wrlong	result1, fp
24198     40 4E 85 F1 | 	sub	fp, #64
2419c     00 FA 0D F2 | 	cmp	result1, #0 wz
241a0     6D 01 00 5F 
241a4     5A FB 05 56 |  if_ne	mov	result1, ##@LR__4731
241a8     A8 01 90 5D |  if_ne	jmp	#LR__3583
241ac     18 4E 05 F1 | 	add	fp, #24
241b0     A7 20 02 FB | 	rdlong	local02, fp
241b4     78 00 00 FF 
241b8     00 20 06 F5 | 	and	local02, ##61440
241bc     2C 4E 05 F1 | 	add	fp, #44
241c0     A7 20 62 FC | 	wrlong	local02, fp
241c4     38 4E 85 F1 | 	sub	fp, #56
241c8     A7 20 02 FB | 	rdlong	local02, fp
241cc     0C 4E 85 F1 | 	sub	fp, #12
241d0     10 21 C2 FA | 	rdbyte	local02, local02
241d4     2E 20 0E F2 | 	cmp	local02, #46 wz
241d8     08 4E 05 A1 |  if_e	add	fp, #8
241dc     A7 04 68 AC |  if_e	wrlong	#2, fp
241e0     08 4E C5 F3 | 	sumz	fp, #8
241e4     A7 00 68 5C |  if_ne	wrlong	#0, fp
241e8     08 4E 85 51 |  if_ne	sub	fp, #8
241ec     44 4E 05 F1 | 	add	fp, #68
241f0     A7 20 02 FB | 	rdlong	local02, fp
241f4     44 4E 85 F1 | 	sub	fp, #68
241f8     08 00 00 FF 
241fc     00 20 0E F2 | 	cmp	local02, ##4096 wz
24200     18 00 90 5D |  if_ne	jmp	#LR__3573
24204     08 4E 05 F1 | 	add	fp, #8
24208     A7 20 02 FB | 	rdlong	local02, fp
2420c     10 20 46 F5 | 	or	local02, #16
24210     A7 20 62 FC | 	wrlong	local02, fp
24214     08 4E 85 F1 | 	sub	fp, #8
24218     AC 00 90 FD | 	jmp	#LR__3578
2421c                 | LR__3573
2421c     44 4E 05 F1 | 	add	fp, #68
24220     A7 20 02 FB | 	rdlong	local02, fp
24224     44 4E 85 F1 | 	sub	fp, #68
24228     10 00 00 FF 
2422c     00 20 0E F2 | 	cmp	local02, ##8192 wz
24230     44 4E 05 51 |  if_ne	add	fp, #68
24234     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24238     44 4E 85 51 |  if_ne	sub	fp, #68
2423c     18 00 00 5F 
24240     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
24244     44 4E 05 51 |  if_ne	add	fp, #68
24248     0F 23 02 56 |  if_ne	mov	local03, local01
2424c     44 4E 85 51 |  if_ne	sub	fp, #68
24250     20 00 00 5F 
24254     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
24258     18 00 90 5D |  if_ne	jmp	#LR__3574
2425c     08 4E 05 F1 | 	add	fp, #8
24260     A7 20 02 FB | 	rdlong	local02, fp
24264     04 20 46 F5 | 	or	local02, #4
24268     A7 20 62 FC | 	wrlong	local02, fp
2426c     08 4E 85 F1 | 	sub	fp, #8
24270     54 00 90 FD | 	jmp	#LR__3577
24274                 | LR__3574
24274     18 4E 05 F1 | 	add	fp, #24
24278     A7 20 02 FB | 	rdlong	local02, fp
2427c     18 4E 85 F1 | 	sub	fp, #24
24280     92 20 CE F7 | 	test	local02, #146 wz
24284     18 00 90 5D |  if_ne	jmp	#LR__3575
24288     08 4E 05 F1 | 	add	fp, #8
2428c     A7 20 02 FB | 	rdlong	local02, fp
24290     01 20 46 F5 | 	or	local02, #1
24294     A7 20 62 FC | 	wrlong	local02, fp
24298     08 4E 85 F1 | 	sub	fp, #8
2429c     28 00 90 FD | 	jmp	#LR__3576
242a0                 | LR__3575
242a0     44 4E 05 F1 | 	add	fp, #68
242a4     A7 24 02 FB | 	rdlong	local04, fp
242a8     44 4E 85 F1 | 	sub	fp, #68
242ac     08 00 00 FF 
242b0     00 24 0E F2 | 	cmp	local04, ##4096 wz
242b4     08 4E 05 51 |  if_ne	add	fp, #8
242b8     A7 24 02 5B |  if_ne	rdlong	local04, fp
242bc     20 24 46 55 |  if_ne	or	local04, #32
242c0     A7 24 62 5C |  if_ne	wrlong	local04, fp
242c4     08 4E 85 51 |  if_ne	sub	fp, #8
242c8                 | LR__3576
242c8                 | LR__3577
242c8                 | LR__3578
242c8     08 4E 05 F1 | 	add	fp, #8
242cc     A7 24 02 FB | 	rdlong	local04, fp
242d0     08 4E 85 F1 | 	sub	fp, #8
242d4     03 00 00 FF 
242d8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
242dc     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
242e0     03 00 00 FF 
242e4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
242e8     0F 25 CA F7 | 	test	local04, local01 wz
242ec     E0 FD 9F AD |  if_e	jmp	#LR__3571
242f0                 | LR__3579
242f0     0C 4E 05 F1 | 	add	fp, #12
242f4     A7 12 02 FB | 	rdlong	arg01, fp
242f8     0C 4E 85 F1 | 	sub	fp, #12
242fc     09 27 02 F6 | 	mov	local05, arg01
24300     97 06 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
24304                 | LR__3580
24304     13 FB C9 FA | 	rdbyte	result1, local05 wz
24308     01 26 06 51 |  if_ne	add	local05, #1
2430c     F4 FF 9F 5D |  if_ne	jmp	#LR__3580
24310                 | LR__3581
24310     13 13 C2 F2 | 	subr	arg01, local05
24314     01 12 06 F1 | 	add	arg01, #1
24318     64 E0 BF FD | 	call	#__system___gc_alloc_managed
2431c     48 4E 05 F1 | 	add	fp, #72
24320     A7 FA 61 FC | 	wrlong	result1, fp
24324     48 4E 85 F1 | 	sub	fp, #72
24328     00 FA 0D F2 | 	cmp	result1, #0 wz
2432c     18 00 90 AD |  if_e	jmp	#LR__3582
24330     48 4E 05 F1 | 	add	fp, #72
24334     A7 12 02 FB | 	rdlong	arg01, fp
24338     3C 4E 85 F1 | 	sub	fp, #60
2433c     A7 14 02 FB | 	rdlong	arg02, fp
24340     0C 4E 85 F1 | 	sub	fp, #12
24344     A4 A1 BF FD | 	call	#__system____builtin_strcpy
24348                 | LR__3582
24348     48 4E 05 F1 | 	add	fp, #72
2434c     A7 FA 01 FB | 	rdlong	result1, fp
24350     48 4E 85 F1 | 	sub	fp, #72
24354                 | LR__3583
24354     A7 F0 03 F6 | 	mov	ptra, fp
24358     B2 00 A0 FD | 	call	#popregs_
2435c                 | __system___basic_dir_ret
2435c     2D 00 64 FD | 	ret
24360                 | 
24360                 | __system__pack_0541
24360     09 01 02 F6 | 	mov	_var01, arg01
24364     7F 16 06 F1 | 	add	arg03, #127
24368     04 18 CE F7 | 	test	arg04, #4 wz
2436c     10 00 90 AD |  if_e	jmp	#LR__3590
24370     00 00 0E F2 | 	cmp	_var01, #0 wz
24374     16 00 C6 A9 |  if_e	decod	_var01, #22
24378     F7 00 26 F4 | 	bith	_var01, #247
2437c     B4 00 90 FD | 	jmp	#LR__3599
24380                 | LR__3590
24380     02 18 CE F7 | 	test	arg04, #2 wz
24384     00 C0 3F 5F 
24388     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2438c     00 14 06 56 |  if_ne	mov	arg02, #0
24390     A0 00 90 5D |  if_ne	jmp	#LR__3598
24394     08 18 CE F7 | 	test	arg04, #8 wz
24398     00 00 06 56 |  if_ne	mov	_var01, #0
2439c     94 00 90 5D |  if_ne	jmp	#LR__3597
243a0     FF 16 56 F2 | 	cmps	arg03, #255 wc
243a4     00 C0 3F 3F 
243a8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
243ac     00 14 06 36 |  if_ae	mov	arg02, #0
243b0     80 00 90 3D |  if_ae	jmp	#LR__3596
243b4     01 16 56 F2 | 	cmps	arg03, #1 wc
243b8     6C 00 90 3D |  if_ae	jmp	#LR__3594
243bc     01 14 46 F0 | 	shr	arg02, #1
243c0     00 03 02 F6 | 	mov	_var02, _var01
243c4     01 02 06 F5 | 	and	_var02, #1
243c8     1F 02 66 F0 | 	shl	_var02, #31
243cc     01 15 42 F5 | 	or	arg02, _var02
243d0     01 00 46 F0 | 	shr	_var01, #1
243d4     97 1E 48 FB | 	callpa	#(@LR__3592-@LR__3591)>>2,fcache_load_ptr_
243d8                 | LR__3591
243d8     00 16 56 F2 | 	cmps	arg03, #0 wc
243dc     34 00 90 3D |  if_ae	jmp	#LR__3593
243e0     00 00 0E F2 | 	cmp	_var01, #0 wz
243e4     2C 00 90 AD |  if_e	jmp	#LR__3593
243e8     0A 13 02 F6 | 	mov	arg01, arg02
243ec     01 12 06 F5 | 	and	arg01, #1
243f0     01 16 06 F1 | 	add	arg03, #1
243f4     01 14 46 F0 | 	shr	arg02, #1
243f8     00 03 02 F6 | 	mov	_var02, _var01
243fc     01 02 06 F5 | 	and	_var02, #1
24400     1F 02 66 F0 | 	shl	_var02, #31
24404     01 15 42 F5 | 	or	arg02, _var02
24408     09 15 42 F5 | 	or	arg02, arg01
2440c     01 00 46 F0 | 	shr	_var01, #1
24410     C4 FF 9F FD | 	jmp	#LR__3591
24414                 | LR__3592
24414                 | LR__3593
24414     00 16 56 F2 | 	cmps	arg03, #0 wc
24418     18 00 90 3D |  if_ae	jmp	#LR__3595
2441c     00 14 0E F2 | 	cmp	arg02, #0 wz
24420     6F 14 62 FD | 	wrnz	arg02
24424     0C 00 90 FD | 	jmp	#LR__3595
24428                 | LR__3594
24428     17 01 06 F4 | 	bitl	_var01, #279
2442c     17 16 66 F0 | 	shl	arg03, #23
24430     0B 01 42 F5 | 	or	_var01, arg03
24434                 | LR__3595
24434                 | LR__3596
24434                 | LR__3597
24434                 | LR__3598
24434                 | LR__3599
24434     01 00 CE F7 | 	test	_var01, #1 wz
24438     01 14 46 55 |  if_ne	or	arg02, #1
2443c     0A 17 02 F6 | 	mov	arg03, arg02
24440     00 02 06 F6 | 	mov	_var02, #0
24444     FF FF 3F FF 
24448     FF 15 06 F1 | 	add	arg02, ##2147483647
2444c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
24450     01 02 06 C6 |  if_b	mov	_var02, #1
24454     01 01 02 F1 | 	add	_var01, _var02
24458     01 18 CE F7 | 	test	arg04, #1 wz
2445c     1F 00 26 54 |  if_ne	bith	_var01, #31
24460     00 FB 01 F6 | 	mov	result1, _var01
24464                 | __system__pack_0541_ret
24464     2D 00 64 FD | 	ret
24468                 | 
24468                 | __system___rxtxioctl_0631
24468     00 15 0E F2 | 	cmp	arg02, #256 wz
2446c     0C 00 90 AD |  if_e	jmp	#LR__3600
24470     01 15 0E F2 | 	cmp	arg02, #257 wz
24474     1C 00 90 AD |  if_e	jmp	#LR__3601
24478     30 00 90 FD | 	jmp	#LR__3602
2447c                 | LR__3600
2447c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24480     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24484     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24488     0B FB 61 FC | 	wrlong	result1, arg03
2448c     00 FA 05 F6 | 	mov	result1, #0
24490     28 00 90 FD | 	jmp	#LR__3603
24494                 | LR__3601
24494     0B 13 02 FB | 	rdlong	arg01, arg03
24498     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2449c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
244a0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
244a4     00 FA 05 F6 | 	mov	result1, #0
244a8     10 00 90 FD | 	jmp	#LR__3603
244ac                 | LR__3602
244ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
244b0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
244b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
244b8     01 FA 65 F6 | 	neg	result1, #1
244bc                 | LR__3603
244bc                 | __system___rxtxioctl_0631_ret
244bc     2D 00 64 FD | 	ret
244c0                 | 
244c0                 | __system____dummy_flush_0632
244c0     00 FA 05 F6 | 	mov	result1, #0
244c4                 | __system____dummy_flush_0632_ret
244c4     2D 00 64 FD | 	ret
244c8                 | 
244c8                 | __system___vfsread
244c8     03 4A 05 F6 | 	mov	COUNT_, #3
244cc     A8 00 A0 FD | 	call	#pushregs_
244d0     28 F0 07 F1 | 	add	ptra, #40
244d4     04 4E 05 F1 | 	add	fp, #4
244d8     A7 12 62 FC | 	wrlong	arg01, fp
244dc     04 4E 05 F1 | 	add	fp, #4
244e0     A7 14 62 FC | 	wrlong	arg02, fp
244e4     04 4E 05 F1 | 	add	fp, #4
244e8     A7 16 62 FC | 	wrlong	arg03, fp
244ec     04 4E 85 F1 | 	sub	fp, #4
244f0     A7 FA 01 FB | 	rdlong	result1, fp
244f4     14 4E 05 F1 | 	add	fp, #20
244f8     A7 FA 61 FC | 	wrlong	result1, fp
244fc     04 4E 05 F1 | 	add	fp, #4
24500     A7 00 68 FC | 	wrlong	#0, fp
24504     1C 4E 85 F1 | 	sub	fp, #28
24508     A7 12 02 FB | 	rdlong	arg01, fp
2450c     04 4E 85 F1 | 	sub	fp, #4
24510     08 12 06 F1 | 	add	arg01, #8
24514     09 FB 01 FB | 	rdlong	result1, arg01
24518     01 FA CD F7 | 	test	result1, #1 wz
2451c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24520     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24524     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24528     01 FA 65 A6 |  if_e	neg	result1, #1
2452c     74 02 90 AD |  if_e	jmp	#LR__3616
24530     04 4E 05 F1 | 	add	fp, #4
24534     A7 12 02 FB | 	rdlong	arg01, fp
24538     04 4E 85 F1 | 	sub	fp, #4
2453c     14 12 06 F1 | 	add	arg01, #20
24540     09 FB 09 FB | 	rdlong	result1, arg01 wz
24544     B8 00 90 AD |  if_e	jmp	#LR__3611
24548     04 4E 05 F1 | 	add	fp, #4
2454c     A7 12 02 FB | 	rdlong	arg01, fp
24550     09 17 02 F6 | 	mov	arg03, arg01
24554     14 16 06 F1 | 	add	arg03, #20
24558     0B 1F 02 FB | 	rdlong	local01, arg03
2455c     0F 21 02 F6 | 	mov	local02, local01
24560     13 1E 46 F7 | 	zerox	local01, #19
24564     14 20 46 F0 | 	shr	local02, #20
24568     02 20 66 F0 | 	shl	local02, #2
2456c     ED 20 02 F1 | 	add	local02, __methods__
24570     10 21 02 FB | 	rdlong	local02, local02
24574     04 4E 05 F1 | 	add	fp, #4
24578     A7 14 02 FB | 	rdlong	arg02, fp
2457c     04 4E 05 F1 | 	add	fp, #4
24580     A7 16 02 FB | 	rdlong	arg03, fp
24584     0C 4E 85 F1 | 	sub	fp, #12
24588     F2 22 02 F6 | 	mov	local03, objptr
2458c     0F E5 01 F6 | 	mov	objptr, local01
24590     2D 20 62 FD | 	call	local02
24594     11 E5 01 F6 | 	mov	objptr, local03
24598     10 4E 05 F1 | 	add	fp, #16
2459c     A7 FA 61 FC | 	wrlong	result1, fp
245a0     10 4E 85 F1 | 	sub	fp, #16
245a4     00 FA 55 F2 | 	cmps	result1, #0 wc
245a8     44 00 90 3D |  if_ae	jmp	#LR__3610
245ac     04 4E 05 F1 | 	add	fp, #4
245b0     A7 22 02 FB | 	rdlong	local03, fp
245b4     11 1F 02 F6 | 	mov	local01, local03
245b8     08 22 06 F1 | 	add	local03, #8
245bc     11 21 02 FB | 	rdlong	local02, local03
245c0     20 20 46 F5 | 	or	local02, #32
245c4     08 1E 06 F1 | 	add	local01, #8
245c8     0F 21 62 FC | 	wrlong	local02, local01
245cc     0C 4E 05 F1 | 	add	fp, #12
245d0     A7 12 0A FB | 	rdlong	arg01, fp wz
245d4     10 4E 85 F1 | 	sub	fp, #16
245d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
245dc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
245e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
245e4     01 FA 65 56 |  if_ne	neg	result1, #1
245e8     00 FA 05 A6 |  if_e	mov	result1, #0
245ec     B4 01 90 FD | 	jmp	#LR__3616
245f0                 | LR__3610
245f0     10 4E 05 F1 | 	add	fp, #16
245f4     A7 FA 01 FB | 	rdlong	result1, fp
245f8     10 4E 85 F1 | 	sub	fp, #16
245fc     A4 01 90 FD | 	jmp	#LR__3616
24600                 | LR__3611
24600     04 4E 05 F1 | 	add	fp, #4
24604     A7 12 02 FB | 	rdlong	arg01, fp
24608     20 12 06 F1 | 	add	arg01, #32
2460c     09 13 0A FB | 	rdlong	arg01, arg01 wz
24610     14 4E 05 F1 | 	add	fp, #20
24614     A7 12 62 FC | 	wrlong	arg01, fp
24618     18 4E 85 F1 | 	sub	fp, #24
2461c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24620     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24624     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24628     01 FA 65 A6 |  if_e	neg	result1, #1
2462c     74 01 90 AD |  if_e	jmp	#LR__3616
24630     04 4E 05 F1 | 	add	fp, #4
24634     A7 22 02 FB | 	rdlong	local03, fp
24638     04 4E 85 F1 | 	sub	fp, #4
2463c     28 22 06 F1 | 	add	local03, #40
24640     11 21 0A FB | 	rdlong	local02, local03 wz
24644     7C 00 90 AD |  if_e	jmp	#LR__3613
24648     04 4E 05 F1 | 	add	fp, #4
2464c     A7 12 02 FB | 	rdlong	arg01, fp
24650     09 23 02 F6 | 	mov	local03, arg01
24654     28 22 06 F1 | 	add	local03, #40
24658     11 1F 02 FB | 	rdlong	local01, local03
2465c     0F 21 02 F6 | 	mov	local02, local01
24660     13 1E 46 F7 | 	zerox	local01, #19
24664     14 20 46 F0 | 	shr	local02, #20
24668     02 20 66 F0 | 	shl	local02, #2
2466c     ED 20 02 F1 | 	add	local02, __methods__
24670     10 21 02 FB | 	rdlong	local02, local02
24674     20 4E 05 F1 | 	add	fp, #32
24678     A7 16 02 F6 | 	mov	arg03, fp
2467c     24 4E 85 F1 | 	sub	fp, #36
24680     00 15 06 F6 | 	mov	arg02, #256
24684     F2 22 02 F6 | 	mov	local03, objptr
24688     0F E5 01 F6 | 	mov	objptr, local01
2468c     2D 20 62 FD | 	call	local02
24690     11 E5 01 F6 | 	mov	objptr, local03
24694     10 4E 05 F1 | 	add	fp, #16
24698     A7 FA 61 FC | 	wrlong	result1, fp
2469c     00 FA 4D F2 | 	cmps	result1, #0 wz
246a0     10 4E 85 F1 | 	sub	fp, #16
246a4     1C 00 90 5D |  if_ne	jmp	#LR__3612
246a8     24 4E 05 F1 | 	add	fp, #36
246ac     A7 20 02 FB | 	rdlong	local02, fp
246b0     24 4E 85 F1 | 	sub	fp, #36
246b4     02 20 CE F7 | 	test	local02, #2 wz
246b8     20 4E 05 51 |  if_ne	add	fp, #32
246bc     A7 02 68 5C |  if_ne	wrlong	#1, fp
246c0     20 4E 85 51 |  if_ne	sub	fp, #32
246c4                 | LR__3612
246c4                 | LR__3613
246c4     10 4E 05 F1 | 	add	fp, #16
246c8     A7 00 68 FC | 	wrlong	#0, fp
246cc     10 4E 85 F1 | 	sub	fp, #16
246d0                 | LR__3614
246d0     0C 4E 05 F1 | 	add	fp, #12
246d4     A7 22 02 FB | 	rdlong	local03, fp
246d8     0C 4E 85 F1 | 	sub	fp, #12
246dc     01 22 16 F2 | 	cmp	local03, #1 wc
246e0     B4 00 90 CD |  if_b	jmp	#LR__3615
246e4     18 4E 05 F1 | 	add	fp, #24
246e8     A7 20 02 FB | 	rdlong	local02, fp
246ec     10 23 02 F6 | 	mov	local03, local02
246f0     13 22 46 F7 | 	zerox	local03, #19
246f4     14 20 46 F0 | 	shr	local02, #20
246f8     02 20 66 F0 | 	shl	local02, #2
246fc     ED 20 02 F1 | 	add	local02, __methods__
24700     10 21 02 FB | 	rdlong	local02, local02
24704     14 4E 85 F1 | 	sub	fp, #20
24708     A7 12 02 FB | 	rdlong	arg01, fp
2470c     04 4E 85 F1 | 	sub	fp, #4
24710     F2 1E 02 F6 | 	mov	local01, objptr
24714     11 E5 01 F6 | 	mov	objptr, local03
24718     2D 20 62 FD | 	call	local02
2471c     0F E5 01 F6 | 	mov	objptr, local01
24720     14 4E 05 F1 | 	add	fp, #20
24724     A7 FA 61 FC | 	wrlong	result1, fp
24728     14 4E 85 F1 | 	sub	fp, #20
2472c     00 FA 55 F2 | 	cmps	result1, #0 wc
24730     64 00 90 CD |  if_b	jmp	#LR__3615
24734     1C 4E 05 F1 | 	add	fp, #28
24738     A7 22 02 FB | 	rdlong	local03, fp
2473c     11 21 02 F6 | 	mov	local02, local03
24740     01 20 06 F1 | 	add	local02, #1
24744     A7 20 62 FC | 	wrlong	local02, fp
24748     08 4E 85 F1 | 	sub	fp, #8
2474c     A7 20 02 FB | 	rdlong	local02, fp
24750     11 21 42 FC | 	wrbyte	local02, local03
24754     04 4E 85 F1 | 	sub	fp, #4
24758     A7 22 02 FB | 	rdlong	local03, fp
2475c     01 22 06 F1 | 	add	local03, #1
24760     A7 22 62 FC | 	wrlong	local03, fp
24764     04 4E 85 F1 | 	sub	fp, #4
24768     A7 22 02 FB | 	rdlong	local03, fp
2476c     01 22 86 F1 | 	sub	local03, #1
24770     A7 22 62 FC | 	wrlong	local03, fp
24774     14 4E 05 F1 | 	add	fp, #20
24778     A7 22 0A FB | 	rdlong	local03, fp wz
2477c     20 4E 85 F1 | 	sub	fp, #32
24780     4C FF 9F AD |  if_e	jmp	#LR__3614
24784     14 4E 05 F1 | 	add	fp, #20
24788     A7 20 02 FB | 	rdlong	local02, fp
2478c     14 4E 85 F1 | 	sub	fp, #20
24790     0A 20 0E F2 | 	cmp	local02, #10 wz
24794     38 FF 9F 5D |  if_ne	jmp	#LR__3614
24798                 | LR__3615
24798     10 4E 05 F1 | 	add	fp, #16
2479c     A7 FA 01 FB | 	rdlong	result1, fp
247a0     10 4E 85 F1 | 	sub	fp, #16
247a4                 | LR__3616
247a4     A7 F0 03 F6 | 	mov	ptra, fp
247a8     B2 00 A0 FD | 	call	#popregs_
247ac                 | __system___vfsread_ret
247ac     2D 00 64 FD | 	ret
247b0                 | 
247b0                 | __system____default_filbuf
247b0     04 4A 05 F6 | 	mov	COUNT_, #4
247b4     A8 00 A0 FD | 	call	#pushregs_
247b8     09 1F 02 F6 | 	mov	local01, arg01
247bc     0F 21 02 FB | 	rdlong	local02, local01
247c0     0C 20 06 F1 | 	add	local02, #12
247c4     10 FB 09 FB | 	rdlong	result1, local02 wz
247c8     0C 20 86 F1 | 	sub	local02, #12
247cc     20 00 90 5D |  if_ne	jmp	#LR__3620
247d0     14 20 06 F1 | 	add	local02, #20
247d4     10 FB 01 F6 | 	mov	result1, local02
247d8     04 20 86 F1 | 	sub	local02, #4
247dc     10 FB 61 FC | 	wrlong	result1, local02
247e0     04 20 86 F1 | 	sub	local02, #4
247e4     02 00 80 FF 
247e8     10 01 68 FC | 	wrlong	##1024, local02
247ec     0C 20 86 F1 | 	sub	local02, #12
247f0                 | LR__3620
247f0     14 1E 06 F1 | 	add	local01, #20
247f4     0F 23 02 FB | 	rdlong	local03, local01
247f8     11 25 02 F6 | 	mov	local04, local03
247fc     14 1E 86 F1 | 	sub	local01, #20
24800     13 24 46 F7 | 	zerox	local04, #19
24804     14 22 46 F0 | 	shr	local03, #20
24808     02 22 66 F0 | 	shl	local03, #2
2480c     ED 22 02 F1 | 	add	local03, __methods__
24810     11 23 02 FB | 	rdlong	local03, local03
24814     10 20 06 F1 | 	add	local02, #16
24818     10 15 02 FB | 	rdlong	arg02, local02
2481c     04 20 86 F1 | 	sub	local02, #4
24820     10 17 02 FB | 	rdlong	arg03, local02
24824     0C 20 86 F1 | 	sub	local02, #12
24828     0F 13 02 F6 | 	mov	arg01, local01
2482c     F2 1E 02 F6 | 	mov	local01, objptr
24830     12 E5 01 F6 | 	mov	objptr, local04
24834     2D 22 62 FD | 	call	local03
24838     0F E5 01 F6 | 	mov	objptr, local01
2483c     FD 24 02 F6 | 	mov	local04, result1
24840     00 24 56 F2 | 	cmps	local04, #0 wc
24844     01 FA 65 C6 |  if_b	neg	result1, #1
24848     28 00 90 CD |  if_b	jmp	#LR__3621
2484c     10 25 62 FC | 	wrlong	local04, local02
24850     10 20 06 F1 | 	add	local02, #16
24854     10 23 02 FB | 	rdlong	local03, local02
24858     0C 20 86 F1 | 	sub	local02, #12
2485c     10 23 62 FC | 	wrlong	local03, local02
24860     04 20 06 F1 | 	add	local02, #4
24864     10 23 02 FB | 	rdlong	local03, local02
24868     01 22 46 F5 | 	or	local03, #1
2486c     10 23 62 FC | 	wrlong	local03, local02
24870     12 FB 01 F6 | 	mov	result1, local04
24874                 | LR__3621
24874     A7 F0 03 F6 | 	mov	ptra, fp
24878     B2 00 A0 FD | 	call	#popregs_
2487c                 | __system____default_filbuf_ret
2487c     2D 00 64 FD | 	ret
24880                 | 
24880                 | __system__getlower_1017
24880     41 12 56 F2 | 	cmps	arg01, #65 wc
24884     10 00 90 CD |  if_b	jmp	#LR__3630
24888     5B 12 56 F2 | 	cmps	arg01, #91 wc
2488c     09 FB 01 C6 |  if_b	mov	result1, arg01
24890     20 FA 05 C1 |  if_b	add	result1, #32
24894     04 00 90 CD |  if_b	jmp	#__system__getlower_1017_ret
24898                 | LR__3630
24898     09 FB 01 F6 | 	mov	result1, arg01
2489c                 | __system__getlower_1017_ret
2489c     2D 00 64 FD | 	ret
248a0                 | 
248a0                 | __system___pat_match
248a0     08 4A 05 F6 | 	mov	COUNT_, #8
248a4     A8 00 A0 FD | 	call	#pushregs_
248a8     09 1F 02 F6 | 	mov	local01, arg01
248ac                 | LR__3640
248ac     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
248b0     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
248b4     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
248b8     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
248bc     2C 00 90 AD |  if_e	jmp	#LR__3641
248c0     0A 13 C2 FA | 	rdbyte	arg01, arg02
248c4     B8 FF BF FD | 	call	#__system__getlower_1017
248c8     FD 22 02 F6 | 	mov	local03, result1
248cc     0F 13 C2 FA | 	rdbyte	arg01, local01
248d0     AC FF BF FD | 	call	#__system__getlower_1017
248d4     11 FB 09 F2 | 	cmp	result1, local03 wz
248d8     00 FA 05 56 |  if_ne	mov	result1, #0
248dc     FC 00 90 5D |  if_ne	jmp	#LR__3649
248e0     01 1E 06 F1 | 	add	local01, #1
248e4     01 14 06 F1 | 	add	arg02, #1
248e8     C0 FF 9F FD | 	jmp	#LR__3640
248ec                 | LR__3641
248ec     0A 23 C2 FA | 	rdbyte	local03, arg02
248f0     2A 22 0E F2 | 	cmp	local03, #42 wz
248f4     D4 00 90 5D |  if_ne	jmp	#LR__3648
248f8     01 14 06 F1 | 	add	arg02, #1
248fc     0A 21 C2 FA | 	rdbyte	local02, arg02
24900     01 14 86 F1 | 	sub	arg02, #1
24904     2E 20 0E F2 | 	cmp	local02, #46 wz
24908     28 00 90 5D |  if_ne	jmp	#LR__3642
2490c     02 14 06 F1 | 	add	arg02, #2
24910     0A 21 C2 FA | 	rdbyte	local02, arg02
24914     02 14 86 F1 | 	sub	arg02, #2
24918     2A 20 0E F2 | 	cmp	local02, #42 wz
2491c     03 14 06 A1 |  if_e	add	arg02, #3
24920     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
24924     03 14 86 A1 |  if_e	sub	arg02, #3
24928     12 27 0A A6 |  if_e	mov	local05, local04 wz
2492c     01 FA 05 A6 |  if_e	mov	result1, #1
24930     A8 00 90 AD |  if_e	jmp	#LR__3649
24934                 | LR__3642
24934     01 14 06 F1 | 	add	arg02, #1
24938     00 28 06 F6 | 	mov	local06, #0
2493c     97 1E 48 FB | 	callpa	#(@LR__3645-@LR__3643)>>2,fcache_load_ptr_
24940                 | LR__3643
24940     14 2B 02 F6 | 	mov	local07, local06
24944     0A 2B 02 F1 | 	add	local07, arg02
24948     15 2B CA FA | 	rdbyte	local07, local07 wz
2494c     14 27 02 56 |  if_ne	mov	local05, local06
24950     01 26 06 51 |  if_ne	add	local05, #1
24954     13 29 02 56 |  if_ne	mov	local06, local05
24958     E4 FF 9F 5D |  if_ne	jmp	#LR__3643
2495c     00 2C 06 F6 | 	mov	local08, #0
24960                 | LR__3644
24960     16 2B 02 F6 | 	mov	local07, local08
24964     0F 2B 02 F1 | 	add	local07, local01
24968     15 2B CA FA | 	rdbyte	local07, local07 wz
2496c     16 27 02 56 |  if_ne	mov	local05, local08
24970     01 26 06 51 |  if_ne	add	local05, #1
24974     13 2D 02 56 |  if_ne	mov	local08, local05
24978     E4 FF 9F 5D |  if_ne	jmp	#LR__3644
2497c                 | LR__3645
2497c     14 2D 52 F2 | 	cmps	local08, local06 wc
24980     00 FA 05 C6 |  if_b	mov	result1, #0
24984     54 00 90 CD |  if_b	jmp	#LR__3649
24988     16 21 02 F6 | 	mov	local02, local08
2498c     14 21 82 F1 | 	sub	local02, local06
24990     10 1F 02 F1 | 	add	local01, local02
24994                 | LR__3646
24994     01 28 56 F2 | 	cmps	local06, #1 wc
24998     30 00 90 CD |  if_b	jmp	#LR__3647
2499c     0F 13 C2 FA | 	rdbyte	arg01, local01
249a0     DC FE BF FD | 	call	#__system__getlower_1017
249a4     FD 2C 02 F6 | 	mov	local08, result1
249a8     0A 13 C2 FA | 	rdbyte	arg01, arg02
249ac     D0 FE BF FD | 	call	#__system__getlower_1017
249b0     FD 2C 0A F2 | 	cmp	local08, result1 wz
249b4     00 FA 05 56 |  if_ne	mov	result1, #0
249b8     20 00 90 5D |  if_ne	jmp	#LR__3649
249bc     01 1E 06 F1 | 	add	local01, #1
249c0     01 14 06 F1 | 	add	arg02, #1
249c4     01 28 86 F1 | 	sub	local06, #1
249c8     C8 FF 9F FD | 	jmp	#LR__3646
249cc                 | LR__3647
249cc                 | LR__3648
249cc     0A 2D CA FA | 	rdbyte	local08, arg02 wz
249d0     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
249d4     01 FA 05 A6 |  if_e	mov	result1, #1
249d8     00 FA 05 56 |  if_ne	mov	result1, #0
249dc                 | LR__3649
249dc     A7 F0 03 F6 | 	mov	ptra, fp
249e0     B2 00 A0 FD | 	call	#popregs_
249e4                 | __system___pat_match_ret
249e4     2D 00 64 FD | 	ret
249e8                 | 
249e8                 | _fatfs_cc_ff_uni2oem
249e8     00 00 06 F6 | 	mov	_var01, #0
249ec     80 12 16 F2 | 	cmp	arg01, #128 wc
249f0     09 01 02 C6 |  if_b	mov	_var01, arg01
249f4     58 00 90 CD |  if_b	jmp	#LR__3654
249f8     80 00 00 FF 
249fc     00 12 16 F2 | 	cmp	arg01, ##65536 wc
24a00     4C 00 90 3D |  if_ae	jmp	#LR__3653
24a04     0A FB 31 F9 | 	getword	result1, arg02, #0
24a08     01 00 00 FF 
24a0c     52 FB 0D F2 | 	cmp	result1, ##850 wz
24a10     3C 00 90 5D |  if_ne	jmp	#LR__3653
24a14                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
24a14     00 00 06 F6 | 	mov	_var01, #0
24a18     97 14 48 FB | 	callpa	#(@LR__3651-@LR__3650)>>2,fcache_load_ptr_
24a1c                 | LR__3650
24a1c     00 FB 31 F9 | 	getword	result1, _var01, #0
24a20     80 FA 15 F2 | 	cmp	result1, #128 wc
24a24     1C 00 90 3D |  if_ae	jmp	#LR__3652
24a28     00 FB 31 F9 | 	getword	result1, _var01, #0
24a2c     01 FA 65 F0 | 	shl	result1, #1
24a30     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
24a34     FD FA E1 FA | 	rdword	result1, result1
24a38     FD 12 0A F2 | 	cmp	arg01, result1 wz
24a3c     01 00 06 51 |  if_ne	add	_var01, #1
24a40     D8 FF 9F 5D |  if_ne	jmp	#LR__3650
24a44                 | LR__3651
24a44                 | LR__3652
24a44     00 01 32 F9 | 	getword	_var01, _var01, #0
24a48     80 00 06 F1 | 	add	_var01, #128
24a4c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
24a50                 | LR__3653
24a50                 | LR__3654
24a50                 | ' 			c = (c + 0x80) & 0xFF;
24a50                 | ' 		}
24a50                 | ' 	}
24a50                 | ' 
24a50                 | ' 	return c;
24a50     00 FB 01 F6 | 	mov	result1, _var01
24a54                 | _fatfs_cc_ff_uni2oem_ret
24a54     2D 00 64 FD | 	ret
24a58                 | 
24a58                 | _fatfs_cc_ff_oem2uni
24a58     00 00 06 F6 | 	mov	_var01, #0
24a5c     09 FB 31 F9 | 	getword	result1, arg01, #0
24a60     80 FA 15 F2 | 	cmp	result1, #128 wc
24a64     09 01 02 C6 |  if_b	mov	_var01, arg01
24a68     2C 00 90 CD |  if_b	jmp	#LR__3661
24a6c     0A 15 32 F9 | 	getword	arg02, arg02, #0
24a70     01 00 00 FF 
24a74     52 15 0E F2 | 	cmp	arg02, ##850 wz
24a78     1C 00 90 5D |  if_ne	jmp	#LR__3660
24a7c     09 FB 31 F9 | 	getword	result1, arg01, #0
24a80     00 FB 15 F2 | 	cmp	result1, #256 wc
24a84     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
24a88     80 12 86 C1 |  if_b	sub	arg01, #128
24a8c     01 12 66 C0 |  if_b	shl	arg01, #1
24a90     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
24a94     09 01 E2 CA |  if_b	rdword	_var01, arg01
24a98                 | LR__3660
24a98                 | LR__3661
24a98                 | ' 		}
24a98                 | ' 	}
24a98                 | ' 
24a98                 | ' 	return c;
24a98     00 FB 01 F6 | 	mov	result1, _var01
24a9c                 | _fatfs_cc_ff_oem2uni_ret
24a9c     2D 00 64 FD | 	ret
24aa0                 | 
24aa0                 | _fatfs_cc_ff_wtoupper
24aa0     09 01 02 F6 | 	mov	_var01, arg01
24aa4     80 00 00 FF 
24aa8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
24aac     60 01 90 3D |  if_ae	jmp	#LR__3683
24ab0     00 03 02 F6 | 	mov	_var02, _var01
24ab4     01 01 32 F9 | 	getword	_var01, _var02, #0
24ab8     08 00 00 FF 
24abc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
24ac0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
24ac4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
24ac8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
24acc     01 00 00 3F 
24ad0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
24ad4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
24ad8     01 00 00 3F 
24adc     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
24ae0     02 07 02 F6 | 	mov	_var04, _var03
24ae4                 | ' 		uc = (WORD)uni;
24ae4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
24ae4                 | ' 		for (;;) {
24ae4                 | LR__3670
24ae4     03 09 E2 FA | 	rdword	_var05, _var04
24ae8     04 05 02 F6 | 	mov	_var03, _var05
24aec     0F 04 4E F7 | 	zerox	_var03, #15 wz
24af0     02 06 06 F1 | 	add	_var04, #2
24af4     14 01 90 AD |  if_e	jmp	#LR__3682
24af8     01 05 32 F9 | 	getword	_var03, _var02, #0
24afc     04 01 32 F9 | 	getword	_var01, _var05, #0
24b00     00 05 12 F2 | 	cmp	_var03, _var01 wc
24b04     04 01 90 CD |  if_b	jmp	#LR__3682
24b08     03 0B E2 FA | 	rdword	_var06, _var04
24b0c     05 0D 32 F9 | 	getword	_var07, _var06, #0
24b10     08 0C 46 F0 | 	shr	_var07, #8
24b14     05 0B 32 F9 | 	getword	_var06, _var06, #0
24b18     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
24b1c     01 05 32 F9 | 	getword	_var03, _var02, #0
24b20     04 0F 32 F9 | 	getword	_var08, _var05, #0
24b24     05 01 32 F9 | 	getword	_var01, _var06, #0
24b28     00 0F 02 F1 | 	add	_var08, _var01
24b2c     07 05 52 F2 | 	cmps	_var03, _var08 wc
24b30     02 06 06 F1 | 	add	_var04, #2
24b34     C4 00 90 3D |  if_ae	jmp	#LR__3681
24b38                 | ' 				switch (cmd) {
24b38     06 11 32 F9 | 	getword	_var09, _var07, #0
24b3c     09 10 26 F3 | 	fle	_var09, #9
24b40     30 10 62 FD | 	jmprel	_var09
24b44                 | LR__3671
24b44     24 00 90 FD | 	jmp	#LR__3672
24b48     3C 00 90 FD | 	jmp	#LR__3673
24b4c     54 00 90 FD | 	jmp	#LR__3674
24b50     5C 00 90 FD | 	jmp	#LR__3675
24b54     64 00 90 FD | 	jmp	#LR__3676
24b58     6C 00 90 FD | 	jmp	#LR__3677
24b5c     74 00 90 FD | 	jmp	#LR__3678
24b60     7C 00 90 FD | 	jmp	#LR__3679
24b64     84 00 90 FD | 	jmp	#LR__3680
24b68     A0 00 90 FD | 	jmp	#LR__3682
24b6c                 | LR__3672
24b6c     01 03 32 F9 | 	getword	_var02, _var02, #0
24b70     04 09 32 F9 | 	getword	_var05, _var05, #0
24b74     04 03 82 F1 | 	sub	_var02, _var05
24b78     01 02 66 F0 | 	shl	_var02, #1
24b7c     03 03 02 F1 | 	add	_var02, _var04
24b80     01 03 E2 FA | 	rdword	_var02, _var02
24b84     84 00 90 FD | 	jmp	#LR__3682
24b88                 | LR__3673
24b88     01 05 32 F9 | 	getword	_var03, _var02, #0
24b8c     01 03 32 F9 | 	getword	_var02, _var02, #0
24b90     04 09 32 F9 | 	getword	_var05, _var05, #0
24b94     04 03 82 F1 | 	sub	_var02, _var05
24b98     01 02 06 F5 | 	and	_var02, #1
24b9c     02 03 C2 F2 | 	subr	_var02, _var03
24ba0     68 00 90 FD | 	jmp	#LR__3682
24ba4                 | LR__3674
24ba4     01 03 32 F9 | 	getword	_var02, _var02, #0
24ba8     10 02 86 F1 | 	sub	_var02, #16
24bac     5C 00 90 FD | 	jmp	#LR__3682
24bb0                 | LR__3675
24bb0     01 03 32 F9 | 	getword	_var02, _var02, #0
24bb4     20 02 86 F1 | 	sub	_var02, #32
24bb8     50 00 90 FD | 	jmp	#LR__3682
24bbc                 | LR__3676
24bbc     01 03 32 F9 | 	getword	_var02, _var02, #0
24bc0     30 02 86 F1 | 	sub	_var02, #48
24bc4     44 00 90 FD | 	jmp	#LR__3682
24bc8                 | LR__3677
24bc8     01 03 32 F9 | 	getword	_var02, _var02, #0
24bcc     1A 02 86 F1 | 	sub	_var02, #26
24bd0     38 00 90 FD | 	jmp	#LR__3682
24bd4                 | LR__3678
24bd4     01 03 32 F9 | 	getword	_var02, _var02, #0
24bd8     08 02 06 F1 | 	add	_var02, #8
24bdc     2C 00 90 FD | 	jmp	#LR__3682
24be0                 | LR__3679
24be0     01 03 32 F9 | 	getword	_var02, _var02, #0
24be4     50 02 86 F1 | 	sub	_var02, #80
24be8     20 00 90 FD | 	jmp	#LR__3682
24bec                 | LR__3680
24bec     01 03 32 F9 | 	getword	_var02, _var02, #0
24bf0     0E 00 00 FF 
24bf4     60 02 86 F1 | 	sub	_var02, ##7264
24bf8                 | ' 				}
24bf8                 | ' 				break;
24bf8     10 00 90 FD | 	jmp	#LR__3682
24bfc                 | LR__3681
24bfc     0F 0C 4E F7 | 	zerox	_var07, #15 wz
24c00     02 0A 06 AA |  if_e	mul	_var06, #2
24c04     05 07 02 A1 |  if_e	add	_var04, _var06
24c08     D8 FE 9F FD | 	jmp	#LR__3670
24c0c                 | LR__3682
24c0c     01 01 32 F9 | 	getword	_var01, _var02, #0
24c10                 | LR__3683
24c10                 | ' 		}
24c10                 | ' 		uni = uc;
24c10                 | ' 	}
24c10                 | ' 
24c10                 | ' 	return uni;
24c10     00 FB 01 F6 | 	mov	result1, _var01
24c14                 | _fatfs_cc_ff_wtoupper_ret
24c14     2D 00 64 FD | 	ret
24c18                 | 
24c18                 | _fatfs_cc_strncpy
24c18     09 01 02 F6 | 	mov	_var01, arg01
24c1c     97 12 48 FB | 	callpa	#(@LR__3691-@LR__3690)>>2,fcache_load_ptr_
24c20                 | ' 
24c20                 | ' 	dscan = dst;
24c20                 | ' 	sscan = src;
24c20                 | ' 	count = n;
24c20                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
24c20                 | LR__3690
24c20     01 16 86 F1 | 	sub	arg03, #1
24c24     00 16 56 F2 | 	cmps	arg03, #0 wc
24c28     18 00 90 CD |  if_b	jmp	#LR__3692
24c2c     0A FB C1 FA | 	rdbyte	result1, arg02
24c30     00 FB 41 FC | 	wrbyte	result1, _var01
24c34     01 14 06 F1 | 	add	arg02, #1
24c38     00 FB C9 FA | 	rdbyte	result1, _var01 wz
24c3c                 | ' 		continue;
24c3c     01 00 06 F1 | 	add	_var01, #1
24c40     DC FF 9F 5D |  if_ne	jmp	#LR__3690
24c44                 | LR__3691
24c44                 | LR__3692
24c44     97 0C 48 FB | 	callpa	#(@LR__3694-@LR__3693)>>2,fcache_load_ptr_
24c48                 | ' 	while (--count >= 0)
24c48                 | LR__3693
24c48     01 16 86 F1 | 	sub	arg03, #1
24c4c     00 16 56 F2 | 	cmps	arg03, #0 wc
24c50     00 03 02 36 |  if_ae	mov	_var02, _var01
24c54     01 00 06 31 |  if_ae	add	_var01, #1
24c58     01 01 48 3C |  if_ae	wrbyte	#0, _var02
24c5c     E8 FF 9F 3D |  if_ae	jmp	#LR__3693
24c60                 | LR__3694
24c60                 | ' 		*dscan++ = '\0';
24c60                 | ' 	return(dst);
24c60     09 FB 01 F6 | 	mov	result1, arg01
24c64                 | _fatfs_cc_strncpy_ret
24c64     2D 00 64 FD | 	ret
24c68                 | 
24c68                 | _fatfs_cc_memcmp
24c68                 | ' 	for (n = size; n > 0; n--)
24c68     00 16 0E F2 | 	cmp	arg03, #0 wz
24c6c     28 00 90 AD |  if_e	jmp	#LR__3701
24c70                 | LR__3700
24c70     09 01 C2 FA | 	rdbyte	_var01, arg01
24c74     0A 03 C2 FA | 	rdbyte	_var02, arg02
24c78     01 01 0A F2 | 	cmp	_var01, _var02 wz
24c7c     01 12 06 A1 |  if_e	add	arg01, #1
24c80     01 14 06 A1 |  if_e	add	arg02, #1
24c84                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
24c84     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
24c88     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
24c8c     01 FB 81 51 |  if_ne	sub	result1, _var02
24c90     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
24c94     F6 17 6E FB | 	djnz	arg03, #LR__3700
24c98                 | LR__3701
24c98                 | ' 
24c98                 | ' 	return(0);
24c98     00 FA 05 F6 | 	mov	result1, #0
24c9c                 | _fatfs_cc_memcmp_ret
24c9c     2D 00 64 FD | 	ret
24ca0                 | 
24ca0                 | _fatfs_cc_strncmp
24ca0     09 01 0A F6 | 	mov	_var01, arg01 wz
24ca4     14 00 90 5D |  if_ne	jmp	#LR__3710
24ca8                 | ' 		return scan2 ? -1 : 0;
24ca8     00 14 0E F2 | 	cmp	arg02, #0 wz
24cac     01 02 66 56 |  if_ne	neg	_var02, #1
24cb0     00 02 06 A6 |  if_e	mov	_var02, #0
24cb4     01 FB 01 F6 | 	mov	result1, _var02
24cb8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
24cbc                 | LR__3710
24cbc     00 14 0E F2 | 	cmp	arg02, #0 wz
24cc0     01 FA 05 A6 |  if_e	mov	result1, #1
24cc4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
24cc8     0B 05 02 F6 | 	mov	_var03, arg03
24ccc     97 16 48 FB | 	callpa	#(@LR__3712-@LR__3711)>>2,fcache_load_ptr_
24cd0                 | ' 	count = n;
24cd0                 | ' 	do {
24cd0                 | LR__3711
24cd0     00 07 C2 FA | 	rdbyte	_var04, _var01
24cd4     0A 09 02 F6 | 	mov	_var05, arg02
24cd8     04 0B C2 FA | 	rdbyte	_var06, _var05
24cdc     01 04 86 F1 | 	sub	_var03, #1
24ce0     00 04 56 F2 | 	cmps	_var03, #0 wc
24ce4     01 00 06 F1 | 	add	_var01, #1
24ce8     01 14 06 F1 | 	add	arg02, #1
24cec     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
24cf0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3713
24cf4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
24cf8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3711
24cfc                 | LR__3712
24cfc                 | LR__3713
24cfc     00 04 56 F2 | 	cmps	_var03, #0 wc
24d00                 | ' 		return(0);
24d00     00 FA 05 C6 |  if_b	mov	result1, #0
24d04     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
24d08     05 07 0A F2 | 	cmp	_var04, _var06 wz
24d0c                 | ' 		return(0);
24d0c     00 FA 05 A6 |  if_e	mov	result1, #0
24d10     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
24d14     00 06 0E F2 | 	cmp	_var04, #0 wz
24d18                 | ' 		return(-1);
24d18     01 FA 65 A6 |  if_e	neg	result1, #1
24d1c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
24d20     00 0A 0E F2 | 	cmp	_var06, #0 wz
24d24                 | ' 		return(1);
24d24     01 FA 05 A6 |  if_e	mov	result1, #1
24d28                 | ' 		return(c1 - c2);
24d28     03 FB 01 56 |  if_ne	mov	result1, _var04
24d2c     05 FB 81 51 |  if_ne	sub	result1, _var06
24d30                 | _fatfs_cc_strncmp_ret
24d30     2D 00 64 FD | 	ret
24d34                 | 
24d34                 | _fatfs_cc_strchr
24d34                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
24d34                 | ' 	while ((c = *s++) != (char) charwanted)
24d34                 | LR__3720
24d34     09 01 02 F6 | 	mov	_var01, arg01
24d38     00 03 C2 FA | 	rdbyte	_var02, _var01
24d3c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
24d40     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
24d44     03 05 0A F2 | 	cmp	_var03, _var04 wz
24d48     01 12 06 F1 | 	add	arg01, #1
24d4c     14 00 90 AD |  if_e	jmp	#LR__3721
24d50     01 05 02 F6 | 	mov	_var03, _var02
24d54     07 04 4E F7 | 	zerox	_var03, #7 wz
24d58     00 FA 05 A6 |  if_e	mov	result1, #0
24d5c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
24d60     D0 FF 9F FD | 	jmp	#LR__3720
24d64                 | LR__3721
24d64                 | ' 	return((char *)--s);
24d64     01 12 86 F1 | 	sub	arg01, #1
24d68     09 FB 01 F6 | 	mov	result1, arg01
24d6c                 | _fatfs_cc_strchr_ret
24d6c     2D 00 64 FD | 	ret
24d70                 | 
24d70                 | _fatfs_cc_disk_initialize
24d70     04 4A 05 F6 | 	mov	COUNT_, #4
24d74     A8 00 A0 FD | 	call	#pushregs_
24d78     40 F0 07 F1 | 	add	ptra, #64
24d7c     04 4E 05 F1 | 	add	fp, #4
24d80     A7 12 42 FC | 	wrbyte	arg01, fp
24d84     01 00 00 FF 
24d88     14 E4 05 F1 | 	add	objptr, ##532
24d8c     F2 18 02 FB | 	rdlong	arg04, objptr
24d90     2C 4E 05 F1 | 	add	fp, #44
24d94     A7 18 62 FC | 	wrlong	arg04, fp
24d98     04 E4 85 F1 | 	sub	objptr, #4
24d9c     F2 18 02 FB | 	rdlong	arg04, objptr
24da0     04 4E 05 F1 | 	add	fp, #4
24da4     A7 18 62 FC | 	wrlong	arg04, fp
24da8     08 E4 05 F1 | 	add	objptr, #8
24dac     F2 18 02 FB | 	rdlong	arg04, objptr
24db0     04 4E 05 F1 | 	add	fp, #4
24db4     A7 18 62 FC | 	wrlong	arg04, fp
24db8     04 E4 05 F1 | 	add	objptr, #4
24dbc     F2 18 02 FB | 	rdlong	arg04, objptr
24dc0     04 4E 05 F1 | 	add	fp, #4
24dc4     A7 18 62 FC | 	wrlong	arg04, fp
24dc8     04 E4 05 F1 | 	add	objptr, #4
24dcc     F2 02 48 FC | 	wrbyte	#1, objptr
24dd0     01 00 00 FF 
24dd4     20 E4 85 F1 | 	sub	objptr, ##544
24dd8     38 4E 85 F1 | 	sub	fp, #56
24ddc     A7 18 CA FA | 	rdbyte	arg04, fp wz
24de0     04 4E 85 F1 | 	sub	fp, #4
24de4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
24de4                 | '             return RES_NOTRDY;
24de4     03 FA 05 56 |  if_ne	mov	result1, #3
24de8     D8 05 90 5D |  if_ne	jmp	#LR__3748
24dec     13 00 00 FF 
24df0     10 13 06 F6 | 	mov	arg01, ##10000
24df4     A0 9A BF FD | 	call	#__system___waitus
24df8     30 4E 05 F1 | 	add	fp, #48
24dfc     A7 12 02 FB | 	rdlong	arg01, fp
24e00     09 01 08 FC | 	wrpin	#0, arg01
24e04     04 4E 05 F1 | 	add	fp, #4
24e08     A7 12 02 FB | 	rdlong	arg01, fp
24e0c     09 01 08 FC | 	wrpin	#0, arg01
24e10     04 4E 05 F1 | 	add	fp, #4
24e14     A7 12 02 FB | 	rdlong	arg01, fp
24e18     09 01 08 FC | 	wrpin	#0, arg01
24e1c     04 4E 05 F1 | 	add	fp, #4
24e20     A7 12 02 FB | 	rdlong	arg01, fp
24e24     09 00 80 FF 
24e28     09 01 08 FC | 	wrpin	##4608, arg01
24e2c     0C 4E 85 F1 | 	sub	fp, #12
24e30     A7 12 02 FB | 	rdlong	arg01, fp
24e34     59 12 62 FD | 	drvh	arg01
24e38     04 4E 05 F1 | 	add	fp, #4
24e3c     A7 12 02 FB | 	rdlong	arg01, fp
24e40     59 12 62 FD | 	drvh	arg01
24e44     04 4E 05 F1 | 	add	fp, #4
24e48     A7 12 02 FB | 	rdlong	arg01, fp
24e4c     59 12 62 FD | 	drvh	arg01
24e50     04 4E 05 F1 | 	add	fp, #4
24e54     A7 12 02 FB | 	rdlong	arg01, fp
24e58     59 12 62 FD | 	drvh	arg01
24e5c     20 4E 85 F1 | 	sub	fp, #32
24e60     00 04 80 FF 
24e64     A7 20 68 FC | 	wrlong	##524304, fp
24e68     04 4E 05 F1 | 	add	fp, #4
24e6c     20 03 80 FF 
24e70     A7 90 68 FC | 	wrlong	##409672, fp
24e74     14 4E 05 F1 | 	add	fp, #20
24e78     A7 1E 02 FB | 	rdlong	local01, fp
24e7c     18 4E 85 F1 | 	sub	fp, #24
24e80     A7 16 02 FB | 	rdlong	arg03, fp
24e84     40 1E 62 FD | 	dirl	local01
24e88     A0 03 80 FF 
24e8c     0F 91 08 FC | 	wrpin	##475208, local01
24e90     0F 17 12 FC | 	wxpin	arg03, local01
24e94     0F 01 28 FC | 	wypin	#0, local01
24e98     41 1E 62 FD | 	dirh	local01
24e9c     1C 4E 05 F1 | 	add	fp, #28
24ea0     A7 20 02 FB | 	rdlong	local02, fp
24ea4     10 1F 82 F1 | 	sub	local01, local02
24ea8     07 1E 06 F5 | 	and	local01, #7
24eac     18 1E 66 F0 | 	shl	local01, #24
24eb0     78 14 06 F6 | 	mov	arg02, #120
24eb4     0F 15 42 F5 | 	or	arg02, local01
24eb8     14 4E 85 F1 | 	sub	fp, #20
24ebc     A7 14 62 FC | 	wrlong	arg02, fp
24ec0     14 4E 05 F1 | 	add	fp, #20
24ec4     A7 12 02 FB | 	rdlong	arg01, fp
24ec8     10 14 26 F4 | 	bith	arg02, #16
24ecc     40 12 62 FD | 	dirl	arg01
24ed0     09 15 02 FC | 	wrpin	arg02, arg01
24ed4     09 3F 18 FC | 	wxpin	#31, arg01
24ed8     FF FF FF FF 
24edc     09 FF 2B FC | 	wypin	##-1, arg01
24ee0     41 12 62 FD | 	dirh	arg01
24ee4     04 4E 85 F1 | 	sub	fp, #4
24ee8     A7 14 02 FB | 	rdlong	arg02, fp
24eec     08 4E 05 F1 | 	add	fp, #8
24ef0     A7 22 02 FB | 	rdlong	local03, fp
24ef4     11 15 82 F1 | 	sub	arg02, local03
24ef8     07 14 06 F5 | 	and	arg02, #7
24efc     18 14 66 F0 | 	shl	arg02, #24
24f00     14 4E 85 F1 | 	sub	fp, #20
24f04     A7 14 62 FC | 	wrlong	arg02, fp
24f08     29 00 00 FF 
24f0c     7A 14 46 F5 | 	or	arg02, ##21114
24f10     A7 14 62 FC | 	wrlong	arg02, fp
24f14     14 4E 05 F1 | 	add	fp, #20
24f18     A7 12 02 FB | 	rdlong	arg01, fp
24f1c     40 12 62 FD | 	dirl	arg01
24f20     09 15 02 FC | 	wrpin	arg02, arg01
24f24     09 4F 18 FC | 	wxpin	#39, arg01
24f28     09 01 28 FC | 	wypin	#0, arg01
24f2c     41 12 62 FD | 	dirh	arg01
24f30     28 4E 85 F1 | 	sub	fp, #40
24f34     A7 12 02 F6 | 	mov	arg01, fp
24f38     14 4E 85 F1 | 	sub	fp, #20
24f3c     0A 14 06 F6 | 	mov	arg02, #10
24f40     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1051
24f44     00 12 06 F6 | 	mov	arg01, #0
24f48     00 14 06 F6 | 	mov	arg02, #0
24f4c     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
24f50     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1061
24f54     64 12 06 F6 | 	mov	arg01, #100
24f58     3C 99 BF FD | 	call	#__system___waitus
24f5c     14 4E 05 F1 | 	add	fp, #20
24f60     A7 12 02 F6 | 	mov	arg01, fp
24f64     14 4E 85 F1 | 	sub	fp, #20
24f68     0A 14 06 F6 | 	mov	arg02, #10
24f6c     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1051
24f70     0C 4E 05 F1 | 	add	fp, #12
24f74     A7 00 48 FC | 	wrbyte	#0, fp
24f78     0C 4E 85 F1 | 	sub	fp, #12
24f7c     00 12 06 F6 | 	mov	arg01, #0
24f80     00 14 06 F6 | 	mov	arg02, #0
24f84     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
24f88     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
24f8c     01 18 0E F2 | 	cmp	arg04, #1 wz
24f90     B8 03 90 5D |  if_ne	jmp	#LR__3747
24f94     08 12 06 F6 | 	mov	arg01, #8
24f98     AA 15 06 F6 | 	mov	arg02, #426
24f9c     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
24fa0     FD FA E1 F8 | 	getbyte	result1, result1, #0
24fa4     01 FA 0D F2 | 	cmp	result1, #1 wz
24fa8     98 01 90 5D |  if_ne	jmp	#LR__3733
24fac     14 4E 05 F1 | 	add	fp, #20
24fb0     A7 12 02 F6 | 	mov	arg01, fp
24fb4     14 4E 85 F1 | 	sub	fp, #20
24fb8     04 14 06 F6 | 	mov	arg02, #4
24fbc     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1051
24fc0     16 4E 05 F1 | 	add	fp, #22
24fc4     A7 24 C2 FA | 	rdbyte	local04, fp
24fc8     16 4E 85 F1 | 	sub	fp, #22
24fcc     01 24 0E F2 | 	cmp	local04, #1 wz
24fd0     17 4E 05 A1 |  if_e	add	fp, #23
24fd4     A7 22 C2 AA |  if_e	rdbyte	local03, fp
24fd8     17 4E 85 A1 |  if_e	sub	fp, #23
24fdc     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
24fe0     68 03 90 5D |  if_ne	jmp	#LR__3746
24fe4                 | ' 				for (tmr = 1000; tmr; tmr--) {
24fe4     18 4E 05 F1 | 	add	fp, #24
24fe8     01 00 80 FF 
24fec     A7 D0 6B FC | 	wrlong	##1000, fp
24ff0     18 4E 85 F1 | 	sub	fp, #24
24ff4                 | LR__3730
24ff4     18 4E 05 F1 | 	add	fp, #24
24ff8     A7 1E 0A FB | 	rdlong	local01, fp wz
24ffc     18 4E 85 F1 | 	sub	fp, #24
25000     3C 00 90 AD |  if_e	jmp	#LR__3731
25004     A9 12 06 F6 | 	mov	arg01, #169
25008     1E 14 C6 F9 | 	decod	arg02, #30
2500c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
25010     FD 24 02 F6 | 	mov	local04, result1
25014     07 24 4E F7 | 	zerox	local04, #7 wz
25018     24 00 90 AD |  if_e	jmp	#LR__3731
2501c     01 00 00 FF 
25020     E8 13 06 F6 | 	mov	arg01, ##1000
25024     70 98 BF FD | 	call	#__system___waitus
25028     18 4E 05 F1 | 	add	fp, #24
2502c     A7 24 02 FB | 	rdlong	local04, fp
25030     01 24 86 F1 | 	sub	local04, #1
25034     A7 24 62 FC | 	wrlong	local04, fp
25038     18 4E 85 F1 | 	sub	fp, #24
2503c     B4 FF 9F FD | 	jmp	#LR__3730
25040                 | LR__3731
25040     18 4E 05 F1 | 	add	fp, #24
25044     A7 24 0A FB | 	rdlong	local04, fp wz
25048     18 4E 85 F1 | 	sub	fp, #24
2504c     4C 00 90 AD |  if_e	jmp	#LR__3732
25050     3A 12 06 F6 | 	mov	arg01, #58
25054     00 14 06 F6 | 	mov	arg02, #0
25058     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
2505c     FD 22 02 F6 | 	mov	local03, result1
25060     07 22 4E F7 | 	zerox	local03, #7 wz
25064     34 00 90 5D |  if_ne	jmp	#LR__3732
25068     14 4E 05 F1 | 	add	fp, #20
2506c     A7 12 02 F6 | 	mov	arg01, fp
25070     14 4E 85 F1 | 	sub	fp, #20
25074     04 14 06 F6 | 	mov	arg02, #4
25078     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2507c     14 4E 05 F1 | 	add	fp, #20
25080     A7 1E C2 FA | 	rdbyte	local01, fp
25084     40 1E CE F7 | 	test	local01, #64 wz
25088     0C 24 06 56 |  if_ne	mov	local04, #12
2508c     04 24 06 A6 |  if_e	mov	local04, #4
25090     08 4E 85 F1 | 	sub	fp, #8
25094     A7 24 42 FC | 	wrbyte	local04, fp
25098     0C 4E 85 F1 | 	sub	fp, #12
2509c                 | LR__3732
2509c     14 24 06 FB | 	rdlong	local04, #20
250a0     18 4E 05 F1 | 	add	fp, #24
250a4     A7 24 62 FC | 	wrlong	local04, fp
250a8     0C 4E 05 F1 | 	add	fp, #12
250ac     A7 24 02 FB | 	rdlong	local04, fp
250b0     1B 24 26 F4 | 	bith	local04, #27
250b4     A7 24 62 FC | 	wrlong	local04, fp
250b8     0C 4E 85 F1 | 	sub	fp, #12
250bc     A7 24 02 FB | 	rdlong	local04, fp
250c0     18 4E 85 F1 | 	sub	fp, #24
250c4     68 78 04 FF 
250c8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
250cc     1C 4E 05 C1 |  if_b	add	fp, #28
250d0     00 01 80 CF 
250d4     A7 08 68 CC |  if_b	wrlong	##131076, fp
250d8     1C 4E 85 C1 |  if_b	sub	fp, #28
250dc     6C 02 90 CD |  if_b	jmp	#LR__3746
250e0     18 4E 05 F1 | 	add	fp, #24
250e4     A7 24 02 FB | 	rdlong	local04, fp
250e8     18 4E 85 F1 | 	sub	fp, #24
250ec     E1 F5 05 FF 
250f0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
250f4     1C 4E 05 C1 |  if_b	add	fp, #28
250f8     00 01 80 CF 
250fc     A7 0A 68 CC |  if_b	wrlong	##131077, fp
25100     1C 4E 85 C1 |  if_b	sub	fp, #28
25104     44 02 90 CD |  if_b	jmp	#LR__3746
25108     18 4E 05 F1 | 	add	fp, #24
2510c     A7 24 02 FB | 	rdlong	local04, fp
25110     18 4E 85 F1 | 	sub	fp, #24
25114     3B 58 08 FF 
25118     01 24 16 F2 | 	cmp	local04, ##280000001 wc
2511c     1C 4E 05 C1 |  if_b	add	fp, #28
25120     00 01 80 CF 
25124     A7 0C 68 CC |  if_b	wrlong	##131078, fp
25128     1C 4E 85 C1 |  if_b	sub	fp, #28
2512c     1C 02 90 CD |  if_b	jmp	#LR__3746
25130     1C 4E 05 F1 | 	add	fp, #28
25134     80 01 80 FF 
25138     A7 10 68 FC | 	wrlong	##196616, fp
2513c     1C 4E 85 F1 | 	sub	fp, #28
25140     08 02 90 FD | 	jmp	#LR__3746
25144                 | LR__3733
25144     A9 12 06 F6 | 	mov	arg01, #169
25148     00 14 06 F6 | 	mov	arg02, #0
2514c     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
25150     FD 24 E2 F8 | 	getbyte	local04, result1, #0
25154     02 24 16 F2 | 	cmp	local04, #2 wc
25158     18 00 90 3D |  if_ae	jmp	#LR__3734
2515c     0C 4E 05 F1 | 	add	fp, #12
25160     A7 04 48 FC | 	wrbyte	#2, fp
25164     04 4E 05 F1 | 	add	fp, #4
25168     A7 52 49 FC | 	wrbyte	#169, fp
2516c     10 4E 85 F1 | 	sub	fp, #16
25170     14 00 90 FD | 	jmp	#LR__3735
25174                 | LR__3734
25174     0C 4E 05 F1 | 	add	fp, #12
25178     A7 02 48 FC | 	wrbyte	#1, fp
2517c     04 4E 05 F1 | 	add	fp, #4
25180     A7 02 48 FC | 	wrbyte	#1, fp
25184     10 4E 85 F1 | 	sub	fp, #16
25188                 | LR__3735
25188                 | ' 				ty =  0x01 ; cmd =  (1) ;
25188                 | ' 			}
25188                 | ' 			for (tmr = 1000; tmr; tmr--) {
25188     18 4E 05 F1 | 	add	fp, #24
2518c     01 00 80 FF 
25190     A7 D0 6B FC | 	wrlong	##1000, fp
25194     18 4E 85 F1 | 	sub	fp, #24
25198                 | LR__3736
25198     18 4E 05 F1 | 	add	fp, #24
2519c     A7 22 0A FB | 	rdlong	local03, fp wz
251a0     18 4E 85 F1 | 	sub	fp, #24
251a4     44 00 90 AD |  if_e	jmp	#LR__3737
251a8     10 4E 05 F1 | 	add	fp, #16
251ac     A7 12 C2 FA | 	rdbyte	arg01, fp
251b0     10 4E 85 F1 | 	sub	fp, #16
251b4     00 14 06 F6 | 	mov	arg02, #0
251b8     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
251bc     FD 24 02 F6 | 	mov	local04, result1
251c0     07 24 4E F7 | 	zerox	local04, #7 wz
251c4     24 00 90 AD |  if_e	jmp	#LR__3737
251c8     01 00 00 FF 
251cc     E8 13 06 F6 | 	mov	arg01, ##1000
251d0     C4 96 BF FD | 	call	#__system___waitus
251d4     18 4E 05 F1 | 	add	fp, #24
251d8     A7 24 02 FB | 	rdlong	local04, fp
251dc     01 24 86 F1 | 	sub	local04, #1
251e0     A7 24 62 FC | 	wrlong	local04, fp
251e4     18 4E 85 F1 | 	sub	fp, #24
251e8     AC FF 9F FD | 	jmp	#LR__3736
251ec                 | LR__3737
251ec     18 4E 05 F1 | 	add	fp, #24
251f0     A7 24 0A FB | 	rdlong	local04, fp wz
251f4     18 4E 85 F1 | 	sub	fp, #24
251f8     14 00 90 AD |  if_e	jmp	#LR__3738
251fc     10 12 06 F6 | 	mov	arg01, #16
25200     09 14 C6 F9 | 	decod	arg02, #9
25204     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1075
25208     07 FA 4D F7 | 	zerox	result1, #7 wz
2520c     0C 00 90 AD |  if_e	jmp	#LR__3739
25210                 | LR__3738
25210     0C 4E 05 F1 | 	add	fp, #12
25214     A7 00 48 FC | 	wrbyte	#0, fp
25218     0C 4E 85 F1 | 	sub	fp, #12
2521c                 | LR__3739
2521c     14 24 06 FB | 	rdlong	local04, #20
25220     18 4E 05 F1 | 	add	fp, #24
25224     A7 24 62 FC | 	wrlong	local04, fp
25228     18 4E 85 F1 | 	sub	fp, #24
2522c     F0 FA 02 FF 
25230     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25234     18 00 90 3D |  if_ae	jmp	#LR__3740
25238     24 4E 05 F1 | 	add	fp, #36
2523c     A7 24 02 FB | 	rdlong	local04, fp
25240     1B 24 26 F4 | 	bith	local04, #27
25244     A7 24 62 FC | 	wrlong	local04, fp
25248     24 4E 85 F1 | 	sub	fp, #36
2524c     2C 00 90 FD | 	jmp	#LR__3741
25250                 | LR__3740
25250     18 4E 05 F1 | 	add	fp, #24
25254     A7 24 02 FB | 	rdlong	local04, fp
25258     18 4E 85 F1 | 	sub	fp, #24
2525c     E1 F5 05 FF 
25260     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25264     24 4E 05 C1 |  if_b	add	fp, #36
25268     A7 24 02 CB |  if_b	rdlong	local04, fp
2526c     80 00 04 CF 
25270     00 24 46 C5 |  if_b	or	local04, ##134283264
25274     A7 24 62 CC |  if_b	wrlong	local04, fp
25278     24 4E 85 C1 |  if_b	sub	fp, #36
2527c                 | LR__3741
2527c     18 4E 05 F1 | 	add	fp, #24
25280     A7 24 02 FB | 	rdlong	local04, fp
25284     18 4E 85 F1 | 	sub	fp, #24
25288     F0 FA 02 FF 
2528c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25290     1C 4E 05 C1 |  if_b	add	fp, #28
25294     00 01 80 CF 
25298     A7 08 68 CC |  if_b	wrlong	##131076, fp
2529c     1C 4E 85 C1 |  if_b	sub	fp, #28
252a0     A8 00 90 CD |  if_b	jmp	#LR__3745
252a4     18 4E 05 F1 | 	add	fp, #24
252a8     A7 24 02 FB | 	rdlong	local04, fp
252ac     18 4E 85 F1 | 	sub	fp, #24
252b0     68 78 04 FF 
252b4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
252b8     1C 4E 05 C1 |  if_b	add	fp, #28
252bc     80 01 80 CF 
252c0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
252c4     1C 4E 85 C1 |  if_b	sub	fp, #28
252c8     80 00 90 CD |  if_b	jmp	#LR__3744
252cc     18 4E 05 F1 | 	add	fp, #24
252d0     A7 24 02 FB | 	rdlong	local04, fp
252d4     18 4E 85 F1 | 	sub	fp, #24
252d8     E1 F5 05 FF 
252dc     01 24 16 F2 | 	cmp	local04, ##200000001 wc
252e0     1C 4E 05 C1 |  if_b	add	fp, #28
252e4     00 02 80 CF 
252e8     A7 10 68 CC |  if_b	wrlong	##262152, fp
252ec     1C 4E 85 C1 |  if_b	sub	fp, #28
252f0     58 00 90 CD |  if_b	jmp	#LR__3743
252f4     18 4E 05 F1 | 	add	fp, #24
252f8     A7 24 02 FB | 	rdlong	local04, fp
252fc     18 4E 85 F1 | 	sub	fp, #24
25300     59 73 07 FF 
25304     81 24 16 F2 | 	cmp	local04, ##250000001 wc
25308     1C 4E 05 C1 |  if_b	add	fp, #28
2530c     80 02 80 CF 
25310     A7 14 68 CC |  if_b	wrlong	##327690, fp
25314     1C 4E 85 C1 |  if_b	sub	fp, #28
25318     30 00 90 CD |  if_b	jmp	#LR__3742
2531c     18 4E 05 F1 | 	add	fp, #24
25320     A7 24 02 FB | 	rdlong	local04, fp
25324     18 4E 85 F1 | 	sub	fp, #24
25328     D1 F0 08 FF 
2532c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
25330     1C 4E 05 C1 |  if_b	add	fp, #28
25334     00 03 80 CF 
25338     A7 18 68 CC |  if_b	wrlong	##393228, fp
2533c     1C 4E 85 F3 | 	sumc	fp, #28
25340     80 03 80 3F 
25344     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
25348     1C 4E 85 31 |  if_ae	sub	fp, #28
2534c                 | LR__3742
2534c                 | LR__3743
2534c                 | LR__3744
2534c                 | LR__3745
2534c                 | LR__3746
2534c                 | LR__3747
2534c     0C 4E 05 F1 | 	add	fp, #12
25350     A7 24 C2 FA | 	rdbyte	local04, fp
25354     01 00 00 FF 
25358     21 E4 05 F1 | 	add	objptr, ##545
2535c     F2 24 42 FC | 	wrbyte	local04, objptr
25360     A7 1E CA FA | 	rdbyte	local01, fp wz
25364     00 24 06 56 |  if_ne	mov	local04, #0
25368     01 24 06 A6 |  if_e	mov	local04, #1
2536c     20 4E 05 F1 | 	add	fp, #32
25370     A7 24 42 FC | 	wrbyte	local04, fp
25374     A7 24 C2 FA | 	rdbyte	local04, fp
25378     2C 4E 85 F1 | 	sub	fp, #44
2537c     01 E4 85 F1 | 	sub	objptr, #1
25380     F2 24 42 FC | 	wrbyte	local04, objptr
25384     01 00 00 FF 
25388     20 E4 85 F1 | 	sub	objptr, ##544
2538c     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1061
25390     34 4E 05 F1 | 	add	fp, #52
25394     A7 12 02 FB | 	rdlong	arg01, fp
25398     18 4E 85 F1 | 	sub	fp, #24
2539c     A7 14 02 FB | 	rdlong	arg02, fp
253a0     09 15 12 FC | 	wxpin	arg02, arg01
253a4     1C 4E 05 F1 | 	add	fp, #28
253a8     A7 12 02 FB | 	rdlong	arg01, fp
253ac     14 4E 85 F1 | 	sub	fp, #20
253b0     A7 14 02 FB | 	rdlong	arg02, fp
253b4     09 15 02 FC | 	wrpin	arg02, arg01
253b8                 | ' 
253b8                 | ' 		}
253b8                 | ' 	}
253b8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
253b8                 | ' 	CardType = ty;
253b8                 | ' 	s = ty ? 0 :  0x01 ;
253b8                 | ' 	Stat = s;
253b8                 | ' 
253b8                 | ' 	deselect();
253b8                 | ' 
253b8                 | ' 
253b8                 | ' 	_wxpin( PIN_CLK, ck_div );
253b8                 | ' 	_wrpin( PIN_DI, spm_tx );
253b8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
253b8                 | ' 	return s;
253b8     08 4E 05 F1 | 	add	fp, #8
253bc     A7 FA C1 FA | 	rdbyte	result1, fp
253c0     2C 4E 85 F1 | 	sub	fp, #44
253c4                 | LR__3748
253c4     A7 F0 03 F6 | 	mov	ptra, fp
253c8     B2 00 A0 FD | 	call	#popregs_
253cc                 | _fatfs_cc_disk_initialize_ret
253cc     2D 00 64 FD | 	ret
253d0                 | 
253d0                 | _fatfs_cc_disk_read
253d0     05 4A 05 F6 | 	mov	COUNT_, #5
253d4     A8 00 A0 FD | 	call	#pushregs_
253d8     0A 1F 02 F6 | 	mov	local01, arg02
253dc     0B 21 02 F6 | 	mov	local02, arg03
253e0     0C 23 02 F6 | 	mov	local03, arg04
253e4     00 12 0E F2 | 	cmp	arg01, #0 wz
253e8     01 FA 05 56 |  if_ne	mov	result1, #1
253ec                 | ' 
253ec                 | ' 	return Stat;
253ec     01 00 00 AF 
253f0     20 E4 05 A1 |  if_e	add	objptr, ##544
253f4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
253f8     01 00 00 AF 
253fc     20 E4 85 A1 |  if_e	sub	objptr, ##544
25400     FD FA E1 F8 | 	getbyte	result1, result1, #0
25404     01 FA CD F7 | 	test	result1, #1 wz
25408     03 FA 05 56 |  if_ne	mov	result1, #3
2540c     84 00 90 5D |  if_ne	jmp	#LR__3752
25410     01 00 00 FF 
25414     21 E4 05 F1 | 	add	objptr, ##545
25418     F2 24 C2 FA | 	rdbyte	local04, objptr
2541c     01 00 00 FF 
25420     21 E4 85 F1 | 	sub	objptr, ##545
25424     08 24 CE F7 | 	test	local04, #8 wz
25428     09 20 66 A0 |  if_e	shl	local02, #9
2542c     02 22 16 F2 | 	cmp	local03, #2 wc
25430     12 24 06 36 |  if_ae	mov	local04, #18
25434     11 24 06 C6 |  if_b	mov	local04, #17
25438     10 15 02 F6 | 	mov	arg02, local02
2543c     12 13 02 F6 | 	mov	arg01, local04
25440     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1075
25444     FD 26 02 F6 | 	mov	local05, result1
25448     07 26 4E F7 | 	zerox	local05, #7 wz
2544c     30 00 90 5D |  if_ne	jmp	#LR__3751
25450                 | ' 		do {
25450                 | LR__3750
25450     0F 13 02 F6 | 	mov	arg01, local01
25454     09 14 C6 F9 | 	decod	arg02, #9
25458     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1069
2545c     00 FA 0D F2 | 	cmp	result1, #0 wz
25460     01 00 00 5F 
25464     00 1E 06 51 |  if_ne	add	local01, ##512
25468     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3750
2546c     12 25 E2 F8 | 	getbyte	local04, local04, #0
25470     12 24 0E F2 | 	cmp	local04, #18 wz
25474     0C 12 06 A6 |  if_e	mov	arg01, #12
25478     00 14 06 A6 |  if_e	mov	arg02, #0
2547c     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1075
25480                 | LR__3751
25480     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1061
25484                 | ' 	}
25484                 | ' 	deselect();
25484                 | ' 
25484                 | ' 	return count ? RES_ERROR : RES_OK;
25484     00 22 0E F2 | 	cmp	local03, #0 wz
25488     01 26 06 56 |  if_ne	mov	local05, #1
2548c     00 26 06 A6 |  if_e	mov	local05, #0
25490     13 FB 01 F6 | 	mov	result1, local05
25494                 | LR__3752
25494     A7 F0 03 F6 | 	mov	ptra, fp
25498     B2 00 A0 FD | 	call	#popregs_
2549c                 | _fatfs_cc_disk_read_ret
2549c     2D 00 64 FD | 	ret
254a0                 | 
254a0                 | _fatfs_cc_disk_write
254a0     04 4A 05 F6 | 	mov	COUNT_, #4
254a4     A8 00 A0 FD | 	call	#pushregs_
254a8     0A 1F 02 F6 | 	mov	local01, arg02
254ac     0C 21 02 F6 | 	mov	local02, arg04
254b0     0B 23 02 F6 | 	mov	local03, arg03
254b4     00 12 0E F2 | 	cmp	arg01, #0 wz
254b8     01 FA 05 56 |  if_ne	mov	result1, #1
254bc                 | ' 
254bc                 | ' 	return Stat;
254bc     01 00 00 AF 
254c0     20 E4 05 A1 |  if_e	add	objptr, ##544
254c4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
254c8     01 00 00 AF 
254cc     20 E4 85 A1 |  if_e	sub	objptr, ##544
254d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
254d4     01 FA CD F7 | 	test	result1, #1 wz
254d8     03 FA 05 56 |  if_ne	mov	result1, #3
254dc     D4 00 90 5D |  if_ne	jmp	#LR__3764
254e0     01 00 00 FF 
254e4     21 E4 05 F1 | 	add	objptr, ##545
254e8     F2 16 C2 FA | 	rdbyte	arg03, objptr
254ec     01 00 00 FF 
254f0     21 E4 85 F1 | 	sub	objptr, ##545
254f4     08 16 CE F7 | 	test	arg03, #8 wz
254f8     09 22 66 A0 |  if_e	shl	local03, #9
254fc     01 20 0E F2 | 	cmp	local02, #1 wz
25500     30 00 90 5D |  if_ne	jmp	#LR__3760
25504     18 12 06 F6 | 	mov	arg01, #24
25508     11 15 02 F6 | 	mov	arg02, local03
2550c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1075
25510     FD 24 02 F6 | 	mov	local04, result1
25514     07 24 4E F7 | 	zerox	local04, #7 wz
25518     84 00 90 5D |  if_ne	jmp	#LR__3763
2551c     0F 13 02 F6 | 	mov	arg01, local01
25520     FE 14 06 F6 | 	mov	arg02, #254
25524     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1071
25528     00 FA 0D F2 | 	cmp	result1, #0 wz
2552c     00 20 06 56 |  if_ne	mov	local02, #0
25530     6C 00 90 FD | 	jmp	#LR__3763
25534                 | LR__3760
25534     01 00 00 FF 
25538     21 E4 05 F1 | 	add	objptr, ##545
2553c     F2 24 C2 FA | 	rdbyte	local04, objptr
25540     01 00 00 FF 
25544     21 E4 85 F1 | 	sub	objptr, ##545
25548     06 24 CE F7 | 	test	local04, #6 wz
2554c     97 12 06 56 |  if_ne	mov	arg01, #151
25550     10 15 02 56 |  if_ne	mov	arg02, local02
25554     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1075
25558     11 15 02 F6 | 	mov	arg02, local03
2555c     19 12 06 F6 | 	mov	arg01, #25
25560     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1075
25564     FD 24 02 F6 | 	mov	local04, result1
25568     07 24 4E F7 | 	zerox	local04, #7 wz
2556c     30 00 90 5D |  if_ne	jmp	#LR__3762
25570                 | ' 			do {
25570                 | LR__3761
25570     0F 13 02 F6 | 	mov	arg01, local01
25574     FC 14 06 F6 | 	mov	arg02, #252
25578     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1071
2557c     00 FA 0D F2 | 	cmp	result1, #0 wz
25580     01 00 00 5F 
25584     00 1E 06 51 |  if_ne	add	local01, ##512
25588     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3761
2558c     00 12 06 F6 | 	mov	arg01, #0
25590     FD 14 06 F6 | 	mov	arg02, #253
25594     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1071
25598     00 FA 0D F2 | 	cmp	result1, #0 wz
2559c     01 20 06 A6 |  if_e	mov	local02, #1
255a0                 | LR__3762
255a0                 | LR__3763
255a0     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1061
255a4                 | ' 				count = 1;
255a4                 | ' 		}
255a4                 | ' 	}
255a4                 | ' 	deselect();
255a4                 | ' 
255a4                 | ' 	return count ? RES_ERROR : RES_OK;
255a4     00 20 0E F2 | 	cmp	local02, #0 wz
255a8     01 24 06 56 |  if_ne	mov	local04, #1
255ac     00 24 06 A6 |  if_e	mov	local04, #0
255b0     12 FB 01 F6 | 	mov	result1, local04
255b4                 | LR__3764
255b4     A7 F0 03 F6 | 	mov	ptra, fp
255b8     B2 00 A0 FD | 	call	#popregs_
255bc                 | _fatfs_cc_disk_write_ret
255bc     2D 00 64 FD | 	ret
255c0                 | 
255c0                 | _fatfs_cc_disk_ioctl
255c0     01 4A 05 F6 | 	mov	COUNT_, #1
255c4     A8 00 A0 FD | 	call	#pushregs_
255c8     30 F0 07 F1 | 	add	ptra, #48
255cc     04 4E 05 F1 | 	add	fp, #4
255d0     A7 12 42 FC | 	wrbyte	arg01, fp
255d4     04 4E 05 F1 | 	add	fp, #4
255d8     A7 14 42 FC | 	wrbyte	arg02, fp
255dc     04 4E 05 F1 | 	add	fp, #4
255e0     A7 16 62 FC | 	wrlong	arg03, fp
255e4     08 4E 85 F1 | 	sub	fp, #8
255e8     A7 12 CA FA | 	rdbyte	arg01, fp wz
255ec     04 4E 85 F1 | 	sub	fp, #4
255f0     01 FA 05 56 |  if_ne	mov	result1, #1
255f4                 | ' 
255f4                 | ' 	return Stat;
255f4     01 00 00 AF 
255f8     20 E4 05 A1 |  if_e	add	objptr, ##544
255fc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25600     01 00 00 AF 
25604     20 E4 85 A1 |  if_e	sub	objptr, ##544
25608     FD FA E1 F8 | 	getbyte	result1, result1, #0
2560c     01 FA CD F7 | 	test	result1, #1 wz
25610     03 FA 05 56 |  if_ne	mov	result1, #3
25614     E4 01 90 5D |  if_ne	jmp	#LR__3778
25618     10 4E 05 F1 | 	add	fp, #16
2561c     A7 02 68 FC | 	wrlong	#1, fp
25620                 | ' 
25620                 | ' 	res = RES_ERROR;
25620                 | ' 	switch (ctrl) {
25620     08 4E 85 F1 | 	sub	fp, #8
25624     A7 1E C2 FA | 	rdbyte	local01, fp
25628     08 4E 85 F1 | 	sub	fp, #8
2562c     04 1E 26 F3 | 	fle	local01, #4
25630     30 1E 62 FD | 	jmprel	local01
25634                 | LR__3770
25634     10 00 90 FD | 	jmp	#LR__3771
25638     24 00 90 FD | 	jmp	#LR__3772
2563c     A0 01 90 FD | 	jmp	#LR__3776
25640     80 01 90 FD | 	jmp	#LR__3775
25644     98 01 90 FD | 	jmp	#LR__3776
25648                 | LR__3771
25648     B4 79 B0 FD | 	call	#_fatfs_cc_select_1065
2564c     00 FA 0D F2 | 	cmp	result1, #0 wz
25650     10 4E 05 51 |  if_ne	add	fp, #16
25654     A7 00 68 5C |  if_ne	wrlong	#0, fp
25658     10 4E 85 51 |  if_ne	sub	fp, #16
2565c                 | ' 			break;
2565c     8C 01 90 FD | 	jmp	#LR__3777
25660                 | LR__3772
25660     09 12 06 F6 | 	mov	arg01, #9
25664     00 14 06 F6 | 	mov	arg02, #0
25668     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1075
2566c     FD 1E 02 F6 | 	mov	local01, result1
25670     07 1E 4E F7 | 	zerox	local01, #7 wz
25674     74 01 90 5D |  if_ne	jmp	#LR__3777
25678     18 4E 05 F1 | 	add	fp, #24
2567c     A7 12 02 F6 | 	mov	arg01, fp
25680     18 4E 85 F1 | 	sub	fp, #24
25684     10 14 06 F6 | 	mov	arg02, #16
25688     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1069
2568c     00 FA 0D F2 | 	cmp	result1, #0 wz
25690     58 01 90 AD |  if_e	jmp	#LR__3777
25694     18 4E 05 F1 | 	add	fp, #24
25698     A7 1E C2 FA | 	rdbyte	local01, fp
2569c     18 4E 85 F1 | 	sub	fp, #24
256a0     06 1E 46 F0 | 	shr	local01, #6
256a4     01 1E 0E F2 | 	cmp	local01, #1 wz
256a8     5C 00 90 5D |  if_ne	jmp	#LR__3773
256ac     21 4E 05 F1 | 	add	fp, #33
256b0     A7 1E C2 FA | 	rdbyte	local01, fp
256b4     01 4E 85 F1 | 	sub	fp, #1
256b8     A7 FA C1 FA | 	rdbyte	result1, fp
256bc     FD FA 31 F9 | 	getword	result1, result1, #0
256c0     08 FA 65 F0 | 	shl	result1, #8
256c4     FD 1E 02 F1 | 	add	local01, result1
256c8     01 4E 85 F1 | 	sub	fp, #1
256cc     A7 FA C1 FA | 	rdbyte	result1, fp
256d0     3F FA 05 F5 | 	and	result1, #63
256d4     10 FA 65 F0 | 	shl	result1, #16
256d8     FD 1E 02 F1 | 	add	local01, result1
256dc     01 1E 06 F1 | 	add	local01, #1
256e0     09 4E 05 F1 | 	add	fp, #9
256e4     A7 1E 62 FC | 	wrlong	local01, fp
256e8     1C 4E 85 F1 | 	sub	fp, #28
256ec     A7 1E 02 FB | 	rdlong	local01, fp
256f0     1C 4E 05 F1 | 	add	fp, #28
256f4     A7 FA 01 FB | 	rdlong	result1, fp
256f8     28 4E 85 F1 | 	sub	fp, #40
256fc     0A FA 65 F0 | 	shl	result1, #10
25700     0F FB 61 FC | 	wrlong	result1, local01
25704     AC 00 90 FD | 	jmp	#LR__3774
25708                 | LR__3773
25708     1D 4E 05 F1 | 	add	fp, #29
2570c     A7 1E C2 FA | 	rdbyte	local01, fp
25710     0F 1F 42 F8 | 	getnib	local01, local01, #0
25714     05 4E 05 F1 | 	add	fp, #5
25718     A7 FA C1 FA | 	rdbyte	result1, fp
2571c     80 FA 05 F5 | 	and	result1, #128
25720     07 FA C5 F0 | 	sar	result1, #7
25724     FD 1E 02 F1 | 	add	local01, result1
25728     01 4E 85 F1 | 	sub	fp, #1
2572c     A7 FA C1 FA | 	rdbyte	result1, fp
25730     03 FA 05 F5 | 	and	result1, #3
25734     01 FA 65 F0 | 	shl	result1, #1
25738     FD 1E 02 F1 | 	add	local01, result1
2573c     02 1E 06 F1 | 	add	local01, #2
25740     0D 4E 85 F1 | 	sub	fp, #13
25744     A7 1E 42 FC | 	wrbyte	local01, fp
25748     0C 4E 05 F1 | 	add	fp, #12
2574c     A7 1E C2 FA | 	rdbyte	local01, fp
25750     06 1E 46 F0 | 	shr	local01, #6
25754     01 4E 85 F1 | 	sub	fp, #1
25758     A7 FA C1 FA | 	rdbyte	result1, fp
2575c     FD FA 31 F9 | 	getword	result1, result1, #0
25760     02 FA 65 F0 | 	shl	result1, #2
25764     FD 1E 02 F1 | 	add	local01, result1
25768     01 4E 85 F1 | 	sub	fp, #1
2576c     A7 FA C1 FA | 	rdbyte	result1, fp
25770     03 FA 05 F5 | 	and	result1, #3
25774     FD FA 31 F9 | 	getword	result1, result1, #0
25778     0A FA 65 F0 | 	shl	result1, #10
2577c     FD 1E 02 F1 | 	add	local01, result1
25780     01 1E 06 F1 | 	add	local01, #1
25784     0A 4E 05 F1 | 	add	fp, #10
25788     A7 1E 62 FC | 	wrlong	local01, fp
2578c     1C 4E 85 F1 | 	sub	fp, #28
25790     A7 1E 02 FB | 	rdlong	local01, fp
25794     1C 4E 05 F1 | 	add	fp, #28
25798     A7 FA 01 FB | 	rdlong	result1, fp
2579c     14 4E 85 F1 | 	sub	fp, #20
257a0     A7 16 C2 FA | 	rdbyte	arg03, fp
257a4     14 4E 85 F1 | 	sub	fp, #20
257a8     09 16 86 F1 | 	sub	arg03, #9
257ac     0B FB 61 F0 | 	shl	result1, arg03
257b0     0F FB 61 FC | 	wrlong	result1, local01
257b4                 | LR__3774
257b4     10 4E 05 F1 | 	add	fp, #16
257b8     A7 00 68 FC | 	wrlong	#0, fp
257bc     10 4E 85 F1 | 	sub	fp, #16
257c0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
257c0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
257c0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
257c0                 | ' 				}
257c0                 | ' 				res = RES_OK;
257c0                 | ' 			}
257c0                 | ' 			break;
257c0     28 00 90 FD | 	jmp	#LR__3777
257c4                 | LR__3775
257c4     0C 4E 05 F1 | 	add	fp, #12
257c8     A7 1E 02 FB | 	rdlong	local01, fp
257cc     0F 01 69 FC | 	wrlong	#128, local01
257d0     04 4E 05 F1 | 	add	fp, #4
257d4     A7 00 68 FC | 	wrlong	#0, fp
257d8     10 4E 85 F1 | 	sub	fp, #16
257dc                 | ' 			*(DWORD*)buff = 128;
257dc                 | ' 			res = RES_OK;
257dc                 | ' 			break;
257dc     0C 00 90 FD | 	jmp	#LR__3777
257e0                 | LR__3776
257e0     10 4E 05 F1 | 	add	fp, #16
257e4     A7 08 68 FC | 	wrlong	#4, fp
257e8     10 4E 85 F1 | 	sub	fp, #16
257ec                 | LR__3777
257ec     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1061
257f0                 | ' 			res = RES_PARERR;
257f0                 | ' 	}
257f0                 | ' 
257f0                 | ' 	deselect();
257f0                 | ' 
257f0                 | ' 	return res;
257f0     10 4E 05 F1 | 	add	fp, #16
257f4     A7 FA 01 FB | 	rdlong	result1, fp
257f8     10 4E 85 F1 | 	sub	fp, #16
257fc                 | LR__3778
257fc     A7 F0 03 F6 | 	mov	ptra, fp
25800     B2 00 A0 FD | 	call	#popregs_
25804                 | _fatfs_cc_disk_ioctl_ret
25804     2D 00 64 FD | 	ret
25808                 | 
25808                 | _fatfs_cc_disk_setpins
25808     00 12 0E F2 | 	cmp	arg01, #0 wz
2580c     01 FA 65 56 |  if_ne	neg	result1, #1
25810     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
25814     01 00 00 FF 
25818     10 E4 05 F1 | 	add	objptr, ##528
2581c     F2 14 62 FC | 	wrlong	arg02, objptr
25820     04 E4 05 F1 | 	add	objptr, #4
25824     F2 16 62 FC | 	wrlong	arg03, objptr
25828     04 E4 05 F1 | 	add	objptr, #4
2582c     F2 18 62 FC | 	wrlong	arg04, objptr
25830     04 E4 05 F1 | 	add	objptr, #4
25834     F2 1A 62 FC | 	wrlong	arg05, objptr
25838     01 00 00 FF 
2583c     1C E4 85 F1 | 	sub	objptr, ##540
25840     00 FA 05 F6 | 	mov	result1, #0
25844                 | _fatfs_cc_disk_setpins_ret
25844     2D 00 64 FD | 	ret
25848                 | 
25848                 | _fatfs_cc_tchar2uni
25848     09 01 02 FB | 	rdlong	_var01, arg01
2584c     00 03 02 F6 | 	mov	_var02, _var01
25850     01 00 06 F1 | 	add	_var01, #1
25854     00 05 02 F6 | 	mov	_var03, _var01
25858     01 07 C2 FA | 	rdbyte	_var04, _var02
2585c     80 06 CE F7 | 	test	_var04, #128 wz
25860     E8 00 90 AD |  if_e	jmp	#LR__3787
25864     03 09 02 F6 | 	mov	_var05, _var04
25868     E0 08 06 F5 | 	and	_var05, #224
2586c     C0 08 0E F2 | 	cmp	_var05, #192 wz
25870     1F 06 06 A5 |  if_e	and	_var04, #31
25874     01 0A 06 A6 |  if_e	mov	_var06, #1
25878     34 00 90 AD |  if_e	jmp	#LR__3781
2587c     03 09 02 F6 | 	mov	_var05, _var04
25880     F0 08 06 F5 | 	and	_var05, #240
25884     E0 08 0E F2 | 	cmp	_var05, #224 wz
25888     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2588c     02 0A 06 A6 |  if_e	mov	_var06, #2
25890     1C 00 90 AD |  if_e	jmp	#LR__3780
25894     03 09 02 F6 | 	mov	_var05, _var04
25898     F8 08 06 F5 | 	and	_var05, #248
2589c     F0 08 0E F2 | 	cmp	_var05, #240 wz
258a0     07 06 06 A5 |  if_e	and	_var04, #7
258a4     03 0A 06 A6 |  if_e	mov	_var06, #3
258a8                 | ' 			return 0xFFFFFFFF;
258a8     01 FA 65 56 |  if_ne	neg	result1, #1
258ac     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
258b0                 | LR__3780
258b0                 | LR__3781
258b0                 | ' 		}
258b0                 | ' 		do {
258b0                 | LR__3782
258b0     02 0D C2 FA | 	rdbyte	_var07, _var03
258b4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
258b8     C0 08 06 F5 | 	and	_var05, #192
258bc     80 08 0E F2 | 	cmp	_var05, #128 wz
258c0     01 04 06 F1 | 	add	_var03, #1
258c4     01 FA 65 56 |  if_ne	neg	result1, #1
258c8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
258cc     06 06 66 F0 | 	shl	_var04, #6
258d0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
258d4     3F 02 06 F5 | 	and	_var02, #63
258d8     01 07 42 F5 | 	or	_var04, _var02
258dc     F4 0B 6E FB | 	djnz	_var06, #LR__3782
258e0     80 06 16 F2 | 	cmp	_var04, #128 wc
258e4     24 00 90 CD |  if_b	jmp	#LR__3784
258e8     6C 00 00 FF 
258ec     00 06 16 F2 | 	cmp	_var04, ##55296 wc
258f0     0C 00 90 CD |  if_b	jmp	#LR__3783
258f4     70 00 00 FF 
258f8     00 06 16 F2 | 	cmp	_var04, ##57344 wc
258fc     0C 00 90 CD |  if_b	jmp	#LR__3784
25900                 | LR__3783
25900     80 08 00 FF 
25904     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
25908     08 00 90 CD |  if_b	jmp	#LR__3785
2590c                 | LR__3784
2590c     01 FA 65 F6 | 	neg	result1, #1
25910     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
25914                 | LR__3785
25914     80 00 00 FF 
25918     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2591c     2C 00 90 CD |  if_b	jmp	#LR__3786
25920     03 03 02 F6 | 	mov	_var02, _var04
25924     80 00 00 FF 
25928     00 02 86 F1 | 	sub	_var02, ##65536
2592c     06 02 66 F0 | 	shl	_var02, #6
25930     80 FF 01 FF 
25934     00 02 06 F5 | 	and	_var02, ##67043328
25938     6E 00 6C FF 
2593c     00 08 06 F6 | 	mov	_var05, ##-671032320
25940     01 09 42 F5 | 	or	_var05, _var02
25944     09 06 46 F7 | 	zerox	_var04, #9
25948     04 07 42 F5 | 	or	_var04, _var05
2594c                 | LR__3786
2594c                 | LR__3787
2594c     09 05 62 FC | 	wrlong	_var03, arg01
25950                 | ' 	}
25950                 | ' #line 811 "ff.c"
25950                 | ' 	*str = p;
25950                 | ' 	return uc;
25950     03 FB 01 F6 | 	mov	result1, _var04
25954                 | _fatfs_cc_tchar2uni_ret
25954     2D 00 64 FD | 	ret
25958                 | 
25958                 | _fatfs_cc_put_utf
25958     80 12 16 F2 | 	cmp	arg01, #128 wc
2595c     18 00 90 3D |  if_ae	jmp	#LR__3790
25960     01 16 16 F2 | 	cmp	arg03, #1 wc
25964     00 FA 05 C6 |  if_b	mov	result1, #0
25968     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2596c     0A 13 42 FC | 	wrbyte	arg01, arg02
25970                 | ' 		*buf = (TCHAR)chr;
25970                 | ' 		return 1;
25970     01 FA 05 F6 | 	mov	result1, #1
25974     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25978                 | LR__3790
25978     04 00 00 FF 
2597c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
25980     40 00 90 3D |  if_ae	jmp	#LR__3791
25984     02 16 16 F2 | 	cmp	arg03, #2 wc
25988     00 FA 05 C6 |  if_b	mov	result1, #0
2598c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25990     09 FB 01 F6 | 	mov	result1, arg01
25994     06 FA 45 F0 | 	shr	result1, #6
25998     1F FA 05 F5 | 	and	result1, #31
2599c     C0 16 06 F6 | 	mov	arg03, #192
259a0     FD 16 42 F5 | 	or	arg03, result1
259a4     0A 17 42 FC | 	wrbyte	arg03, arg02
259a8     01 14 06 F1 | 	add	arg02, #1
259ac     3F 12 06 F5 | 	and	arg01, #63
259b0     80 FA 05 F6 | 	mov	result1, #128
259b4     09 FB 41 F5 | 	or	result1, arg01
259b8     0A FB 41 FC | 	wrbyte	result1, arg02
259bc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
259bc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
259bc                 | ' 		return 2;
259bc     02 FA 05 F6 | 	mov	result1, #2
259c0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
259c4                 | LR__3791
259c4     80 00 00 FF 
259c8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
259cc     70 00 90 3D |  if_ae	jmp	#LR__3794
259d0     03 16 16 F2 | 	cmp	arg03, #3 wc
259d4     18 00 90 CD |  if_b	jmp	#LR__3792
259d8     6C 00 00 FF 
259dc     00 12 16 F2 | 	cmp	arg01, ##55296 wc
259e0     14 00 90 CD |  if_b	jmp	#LR__3793
259e4     70 00 00 FF 
259e8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
259ec     08 00 90 3D |  if_ae	jmp	#LR__3793
259f0                 | LR__3792
259f0     00 FA 05 F6 | 	mov	result1, #0
259f4     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
259f8                 | LR__3793
259f8     09 FB 59 F8 | 	getnib	result1, arg01, #3
259fc     E0 16 06 F6 | 	mov	arg03, #224
25a00     FD 16 42 F5 | 	or	arg03, result1
25a04     0A 17 42 FC | 	wrbyte	arg03, arg02
25a08     01 14 06 F1 | 	add	arg02, #1
25a0c     09 FB 01 F6 | 	mov	result1, arg01
25a10     06 FA 45 F0 | 	shr	result1, #6
25a14     3F FA 05 F5 | 	and	result1, #63
25a18     80 16 06 F6 | 	mov	arg03, #128
25a1c     FD 16 42 F5 | 	or	arg03, result1
25a20     0A 17 42 FC | 	wrbyte	arg03, arg02
25a24     01 14 06 F1 | 	add	arg02, #1
25a28     3F 12 06 F5 | 	and	arg01, #63
25a2c     80 FA 05 F6 | 	mov	result1, #128
25a30     09 FB 41 F5 | 	or	result1, arg01
25a34     0A FB 41 FC | 	wrbyte	result1, arg02
25a38                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
25a38                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
25a38                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
25a38                 | ' 		return 3;
25a38     03 FA 05 F6 | 	mov	result1, #3
25a3c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25a40                 | LR__3794
25a40     04 16 16 F2 | 	cmp	arg03, #4 wc
25a44     00 FA 05 C6 |  if_b	mov	result1, #0
25a48     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25a4c     09 01 02 F6 | 	mov	_var01, arg01
25a50     E0 01 06 F4 | 	bitl	_var01, #480
25a54     00 00 6C FF 
25a58     00 00 86 F1 | 	sub	_var01, ##-671088640
25a5c     06 00 46 F0 | 	shr	_var01, #6
25a60     09 13 32 F9 | 	getword	arg01, arg01, #0
25a64     6E 00 00 FF 
25a68     00 12 86 F1 | 	sub	arg01, ##56320
25a6c     00 08 00 FF 
25a70     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
25a74     02 00 00 CF 
25a78     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
25a7c     00 FA 05 36 |  if_ae	mov	result1, #0
25a80     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
25a84     09 01 42 F5 | 	or	_var01, arg01
25a88     80 00 00 FF 
25a8c     00 00 06 F1 | 	add	_var01, ##65536
25a90     00 FB 01 F6 | 	mov	result1, _var01
25a94     12 FA 45 F0 | 	shr	result1, #18
25a98     07 FA 05 F5 | 	and	result1, #7
25a9c     F0 16 06 F6 | 	mov	arg03, #240
25aa0     FD 16 42 F5 | 	or	arg03, result1
25aa4     0A 17 42 FC | 	wrbyte	arg03, arg02
25aa8     01 14 06 F1 | 	add	arg02, #1
25aac     00 FB 01 F6 | 	mov	result1, _var01
25ab0     0C FA 45 F0 | 	shr	result1, #12
25ab4     3F FA 05 F5 | 	and	result1, #63
25ab8     80 16 06 F6 | 	mov	arg03, #128
25abc     FD 16 42 F5 | 	or	arg03, result1
25ac0     0A 17 42 FC | 	wrbyte	arg03, arg02
25ac4     01 14 06 F1 | 	add	arg02, #1
25ac8     00 FB 01 F6 | 	mov	result1, _var01
25acc     06 FA 45 F0 | 	shr	result1, #6
25ad0     3F FA 05 F5 | 	and	result1, #63
25ad4     80 16 06 F6 | 	mov	arg03, #128
25ad8     FD 16 42 F5 | 	or	arg03, result1
25adc     0A 17 42 FC | 	wrbyte	arg03, arg02
25ae0     01 14 06 F1 | 	add	arg02, #1
25ae4     3F 00 06 F5 | 	and	_var01, #63
25ae8     80 FA 05 F6 | 	mov	result1, #128
25aec     00 FB 41 F5 | 	or	result1, _var01
25af0     0A FB 41 FC | 	wrbyte	result1, arg02
25af4                 | ' 	chr = (hc | chr) + 0x10000;
25af4                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
25af4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
25af4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
25af4                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
25af4                 | ' 	return 4;
25af4     04 FA 05 F6 | 	mov	result1, #4
25af8                 | _fatfs_cc_put_utf_ret
25af8     2D 00 64 FD | 	ret
25afc                 | 
25afc                 | _fatfs_cc_sync_window
25afc     02 4A 05 F6 | 	mov	COUNT_, #2
25b00     A8 00 A0 FD | 	call	#pushregs_
25b04     09 1F 02 F6 | 	mov	local01, arg01
25b08     00 20 06 F6 | 	mov	local02, #0
25b0c     03 1E 06 F1 | 	add	local01, #3
25b10     0F FB C9 FA | 	rdbyte	result1, local01 wz
25b14     03 1E 86 F1 | 	sub	local01, #3
25b18     A4 00 90 AD |  if_e	jmp	#LR__3802
25b1c     01 1E 06 F1 | 	add	local01, #1
25b20     0F 13 C2 FA | 	rdbyte	arg01, local01
25b24     33 1E 06 F1 | 	add	local01, #51
25b28     0F 15 02 F6 | 	mov	arg02, local01
25b2c     04 1E 86 F1 | 	sub	local01, #4
25b30     0F 17 02 FB | 	rdlong	arg03, local01
25b34     30 1E 86 F1 | 	sub	local01, #48
25b38     01 18 06 F6 | 	mov	arg04, #1
25b3c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
25b40     00 FA 0D F2 | 	cmp	result1, #0 wz
25b44     74 00 90 5D |  if_ne	jmp	#LR__3800
25b48     03 1E 06 F1 | 	add	local01, #3
25b4c     0F 01 48 FC | 	wrbyte	#0, local01
25b50     2D 1E 06 F1 | 	add	local01, #45
25b54     0F FB 01 FB | 	rdlong	result1, local01
25b58     0C 1E 86 F1 | 	sub	local01, #12
25b5c     0F 19 02 FB | 	rdlong	arg04, local01
25b60     0C FB 81 F1 | 	sub	result1, arg04
25b64     08 1E 86 F1 | 	sub	local01, #8
25b68     0F 19 02 FB | 	rdlong	arg04, local01
25b6c     1C 1E 86 F1 | 	sub	local01, #28
25b70     0C FB 11 F2 | 	cmp	result1, arg04 wc
25b74     48 00 90 3D |  if_ae	jmp	#LR__3801
25b78     02 1E 06 F1 | 	add	local01, #2
25b7c     0F 19 C2 FA | 	rdbyte	arg04, local01
25b80     02 1E 86 F1 | 	sub	local01, #2
25b84     02 18 0E F2 | 	cmp	arg04, #2 wz
25b88     34 00 90 5D |  if_ne	jmp	#LR__3801
25b8c     01 1E 06 F1 | 	add	local01, #1
25b90     0F 13 C2 FA | 	rdbyte	arg01, local01
25b94     33 1E 06 F1 | 	add	local01, #51
25b98     0F 15 02 F6 | 	mov	arg02, local01
25b9c     04 1E 86 F1 | 	sub	local01, #4
25ba0     0F 17 02 FB | 	rdlong	arg03, local01
25ba4     14 1E 86 F1 | 	sub	local01, #20
25ba8     0F 1F 02 FB | 	rdlong	local01, local01
25bac     0F 17 02 F1 | 	add	arg03, local01
25bb0     01 18 06 F6 | 	mov	arg04, #1
25bb4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
25bb8     04 00 90 FD | 	jmp	#LR__3801
25bbc                 | LR__3800
25bbc     01 20 06 F6 | 	mov	local02, #1
25bc0                 | LR__3801
25bc0                 | LR__3802
25bc0                 | ' 			res = FR_DISK_ERR;
25bc0                 | ' 		}
25bc0                 | ' 	}
25bc0                 | ' 	return res;
25bc0     10 FB 01 F6 | 	mov	result1, local02
25bc4     A7 F0 03 F6 | 	mov	ptra, fp
25bc8     B2 00 A0 FD | 	call	#popregs_
25bcc                 | _fatfs_cc_sync_window_ret
25bcc     2D 00 64 FD | 	ret
25bd0                 | 
25bd0                 | _fatfs_cc_move_window
25bd0     03 4A 05 F6 | 	mov	COUNT_, #3
25bd4     A8 00 A0 FD | 	call	#pushregs_
25bd8     09 1F 02 F6 | 	mov	local01, arg01
25bdc     0A 21 02 F6 | 	mov	local02, arg02
25be0     00 22 06 F6 | 	mov	local03, #0
25be4     30 1E 06 F1 | 	add	local01, #48
25be8     0F 19 02 FB | 	rdlong	arg04, local01
25bec     30 1E 86 F1 | 	sub	local01, #48
25bf0     0C 21 0A F2 | 	cmp	local02, arg04 wz
25bf4     40 00 90 AD |  if_e	jmp	#LR__3811
25bf8     0F 13 02 F6 | 	mov	arg01, local01
25bfc     FC FE BF FD | 	call	#_fatfs_cc_sync_window
25c00     FD 22 0A F6 | 	mov	local03, result1 wz
25c04     30 00 90 5D |  if_ne	jmp	#LR__3810
25c08     01 1E 06 F1 | 	add	local01, #1
25c0c     0F 13 C2 FA | 	rdbyte	arg01, local01
25c10     33 1E 06 F1 | 	add	local01, #51
25c14     0F 15 02 F6 | 	mov	arg02, local01
25c18     10 17 02 F6 | 	mov	arg03, local02
25c1c     01 18 06 F6 | 	mov	arg04, #1
25c20     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
25c24     00 FA 0D F2 | 	cmp	result1, #0 wz
25c28     01 20 66 56 |  if_ne	neg	local02, #1
25c2c     01 22 06 56 |  if_ne	mov	local03, #1
25c30     04 1E 86 F1 | 	sub	local01, #4
25c34     0F 21 62 FC | 	wrlong	local02, local01
25c38                 | LR__3810
25c38                 | LR__3811
25c38                 | ' 				sect = (LBA_t)0 - 1;
25c38                 | ' 				res = FR_DISK_ERR;
25c38                 | ' 			}
25c38                 | ' 			fs->winsect = sect;
25c38                 | ' 		}
25c38                 | ' 	}
25c38                 | ' 	return res;
25c38     11 FB 01 F6 | 	mov	result1, local03
25c3c     A7 F0 03 F6 | 	mov	ptra, fp
25c40     B2 00 A0 FD | 	call	#popregs_
25c44                 | _fatfs_cc_move_window_ret
25c44     2D 00 64 FD | 	ret
25c48                 | 
25c48                 | _fatfs_cc_sync_fs
25c48     02 4A 05 F6 | 	mov	COUNT_, #2
25c4c     A8 00 A0 FD | 	call	#pushregs_
25c50     09 1F 02 F6 | 	mov	local01, arg01
25c54     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
25c58     FD 20 0A F6 | 	mov	local02, result1 wz
25c5c     D8 00 90 5D |  if_ne	jmp	#LR__3821
25c60     0F 19 C2 FA | 	rdbyte	arg04, local01
25c64     03 18 0E F2 | 	cmp	arg04, #3 wz
25c68     04 1E 06 A1 |  if_e	add	local01, #4
25c6c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
25c70     04 1E 86 A1 |  if_e	sub	local01, #4
25c74     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
25c78     A0 00 90 5D |  if_ne	jmp	#LR__3820
25c7c     34 1E 06 F1 | 	add	local01, #52
25c80     0F 13 02 F6 | 	mov	arg01, local01
25c84     00 14 06 F6 | 	mov	arg02, #0
25c88     09 16 C6 F9 | 	decod	arg03, #9
25c8c     98 00 A0 FD | 	call	#\builtin_bytefill_
25c90     0F 13 02 F6 | 	mov	arg01, local01
25c94     FE 13 06 F1 | 	add	arg01, #510
25c98     55 00 80 FF 
25c9c     09 AB 58 FC | 	wrword	##43605, arg01
25ca0     A9 B0 A0 FF 
25ca4     0F A5 68 FC | 	wrlong	##1096897106, local01
25ca8     0F 13 02 F6 | 	mov	arg01, local01
25cac     E4 13 06 F1 | 	add	arg01, #484
25cb0     B9 A0 B0 FF 
25cb4     09 E5 68 FC | 	wrlong	##1631679090, arg01
25cb8     0F 13 02 F6 | 	mov	arg01, local01
25cbc     E8 13 06 F1 | 	add	arg01, #488
25cc0     20 1E 86 F1 | 	sub	local01, #32
25cc4     0F 15 02 FB | 	rdlong	arg02, local01
25cc8     09 15 62 FC | 	wrlong	arg02, arg01
25ccc     20 1E 06 F1 | 	add	local01, #32
25cd0     0F 13 02 F6 | 	mov	arg01, local01
25cd4     EC 13 06 F1 | 	add	arg01, #492
25cd8     24 1E 86 F1 | 	sub	local01, #36
25cdc     0F 15 02 FB | 	rdlong	arg02, local01
25ce0     09 15 62 FC | 	wrlong	arg02, arg01
25ce4     10 1E 06 F1 | 	add	local01, #16
25ce8     0F 17 02 FB | 	rdlong	arg03, local01
25cec     01 16 06 F1 | 	add	arg03, #1
25cf0     10 1E 06 F1 | 	add	local01, #16
25cf4     0F 17 62 FC | 	wrlong	arg03, local01
25cf8     2F 1E 86 F1 | 	sub	local01, #47
25cfc     0F 13 C2 FA | 	rdbyte	arg01, local01
25d00     33 1E 06 F1 | 	add	local01, #51
25d04     0F 15 02 F6 | 	mov	arg02, local01
25d08     01 18 06 F6 | 	mov	arg04, #1
25d0c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
25d10     30 1E 86 F1 | 	sub	local01, #48
25d14     0F 01 48 FC | 	wrbyte	#0, local01
25d18     04 1E 86 F1 | 	sub	local01, #4
25d1c                 | LR__3820
25d1c     01 1E 06 F1 | 	add	local01, #1
25d20     0F 13 C2 FA | 	rdbyte	arg01, local01
25d24     00 14 06 F6 | 	mov	arg02, #0
25d28     00 16 06 F6 | 	mov	arg03, #0
25d2c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
25d30     00 FA 0D F2 | 	cmp	result1, #0 wz
25d34     01 20 06 56 |  if_ne	mov	local02, #1
25d38                 | LR__3821
25d38                 | ' 	}
25d38                 | ' 
25d38                 | ' 	return res;
25d38     10 FB 01 F6 | 	mov	result1, local02
25d3c     A7 F0 03 F6 | 	mov	ptra, fp
25d40     B2 00 A0 FD | 	call	#popregs_
25d44                 | _fatfs_cc_sync_fs_ret
25d44     2D 00 64 FD | 	ret
25d48                 | 
25d48                 | _fatfs_cc_clst2sect
25d48     02 14 86 F1 | 	sub	arg02, #2
25d4c     18 12 06 F1 | 	add	arg01, #24
25d50     09 01 02 FB | 	rdlong	_var01, arg01
25d54     18 12 86 F1 | 	sub	arg01, #24
25d58     02 00 86 F1 | 	sub	_var01, #2
25d5c     00 15 12 F2 | 	cmp	arg02, _var01 wc
25d60     00 FA 05 36 |  if_ae	mov	result1, #0
25d64     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
25d68     0A 12 06 F1 | 	add	arg01, #10
25d6c     09 01 E2 FA | 	rdword	_var01, arg01
25d70     0A 01 02 FD | 	qmul	_var01, arg02
25d74                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
25d74     22 12 06 F1 | 	add	arg01, #34
25d78     09 FB 01 FB | 	rdlong	result1, arg01
25d7c     18 00 62 FD | 	getqx	_var01
25d80     00 FB 01 F1 | 	add	result1, _var01
25d84                 | _fatfs_cc_clst2sect_ret
25d84     2D 00 64 FD | 	ret
25d88                 | 
25d88                 | _fatfs_cc_get_fat
25d88     07 4A 05 F6 | 	mov	COUNT_, #7
25d8c     A8 00 A0 FD | 	call	#pushregs_
25d90     0A 1F 02 F6 | 	mov	local01, arg02
25d94     09 21 02 FB | 	rdlong	local02, arg01
25d98     02 1E 16 F2 | 	cmp	local01, #2 wc
25d9c     14 00 90 CD |  if_b	jmp	#LR__3830
25da0     18 20 06 F1 | 	add	local02, #24
25da4     10 23 02 FB | 	rdlong	local03, local02
25da8     18 20 86 F1 | 	sub	local02, #24
25dac     11 1F 12 F2 | 	cmp	local01, local03 wc
25db0     08 00 90 CD |  if_b	jmp	#LR__3831
25db4                 | LR__3830
25db4     01 24 06 F6 | 	mov	local04, #1
25db8     60 01 90 FD | 	jmp	#LR__3838
25dbc                 | LR__3831
25dbc     01 24 66 F6 | 	neg	local04, #1
25dc0                 | ' 		val = 0xFFFFFFFF;
25dc0                 | ' 
25dc0                 | ' 		switch (fs->fs_type) {
25dc0     10 27 C2 FA | 	rdbyte	local05, local02
25dc4     01 26 86 F1 | 	sub	local05, #1
25dc8     03 26 26 F3 | 	fle	local05, #3
25dcc     30 26 62 FD | 	jmprel	local05
25dd0                 | LR__3832
25dd0     0C 00 90 FD | 	jmp	#LR__3833
25dd4     B8 00 90 FD | 	jmp	#LR__3834
25dd8     F8 00 90 FD | 	jmp	#LR__3835
25ddc     38 01 90 FD | 	jmp	#LR__3836
25de0                 | LR__3833
25de0     0F 27 02 F6 | 	mov	local05, local01
25de4     0F 13 02 F6 | 	mov	arg01, local01
25de8     01 12 46 F0 | 	shr	arg01, #1
25dec     09 27 02 F1 | 	add	local05, arg01
25df0     10 13 02 F6 | 	mov	arg01, local02
25df4     13 29 02 F6 | 	mov	local06, local05
25df8     09 28 46 F0 | 	shr	local06, #9
25dfc     24 20 06 F1 | 	add	local02, #36
25e00     10 15 02 FB | 	rdlong	arg02, local02
25e04     24 20 86 F1 | 	sub	local02, #36
25e08     14 15 02 F1 | 	add	arg02, local06
25e0c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
25e10     00 FA 0D F2 | 	cmp	result1, #0 wz
25e14     04 01 90 5D |  if_ne	jmp	#LR__3837
25e18     13 29 02 F6 | 	mov	local06, local05
25e1c     FF 29 06 F5 | 	and	local06, #511
25e20     34 20 06 F1 | 	add	local02, #52
25e24     10 29 02 F1 | 	add	local06, local02
25e28     14 2B C2 FA | 	rdbyte	local07, local06
25e2c     34 20 86 F1 | 	sub	local02, #52
25e30     10 13 02 F6 | 	mov	arg01, local02
25e34     01 26 06 F1 | 	add	local05, #1
25e38     13 29 02 F6 | 	mov	local06, local05
25e3c     09 28 46 F0 | 	shr	local06, #9
25e40     24 20 06 F1 | 	add	local02, #36
25e44     10 15 02 FB | 	rdlong	arg02, local02
25e48     24 20 86 F1 | 	sub	local02, #36
25e4c     14 15 02 F1 | 	add	arg02, local06
25e50     7C FD BF FD | 	call	#_fatfs_cc_move_window
25e54     00 FA 0D F2 | 	cmp	result1, #0 wz
25e58     C0 00 90 5D |  if_ne	jmp	#LR__3837
25e5c     FF 27 06 F5 | 	and	local05, #511
25e60     34 20 06 F1 | 	add	local02, #52
25e64     10 27 02 F1 | 	add	local05, local02
25e68     13 29 C2 FA | 	rdbyte	local06, local05
25e6c     08 28 66 F0 | 	shl	local06, #8
25e70     14 2B 42 F5 | 	or	local07, local06
25e74     01 1E CE F7 | 	test	local01, #1 wz
25e78     04 2A 46 50 |  if_ne	shr	local07, #4
25e7c     15 23 02 56 |  if_ne	mov	local03, local07
25e80     0B 2A 46 A7 |  if_e	zerox	local07, #11
25e84     15 23 02 A6 |  if_e	mov	local03, local07
25e88     11 25 02 F6 | 	mov	local04, local03
25e8c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
25e8c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
25e8c                 | ' 			break;
25e8c     8C 00 90 FD | 	jmp	#LR__3837
25e90                 | LR__3834
25e90     10 13 02 F6 | 	mov	arg01, local02
25e94     0F 29 02 F6 | 	mov	local06, local01
25e98     08 28 46 F0 | 	shr	local06, #8
25e9c     24 20 06 F1 | 	add	local02, #36
25ea0     10 15 02 FB | 	rdlong	arg02, local02
25ea4     24 20 86 F1 | 	sub	local02, #36
25ea8     14 15 02 F1 | 	add	arg02, local06
25eac     20 FD BF FD | 	call	#_fatfs_cc_move_window
25eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
25eb4     64 00 90 5D |  if_ne	jmp	#LR__3837
25eb8     34 20 06 F1 | 	add	local02, #52
25ebc     01 1E 66 F0 | 	shl	local01, #1
25ec0     FF 1F 06 F5 | 	and	local01, #511
25ec4     0F 21 02 F1 | 	add	local02, local01
25ec8                 | ' {
25ec8                 | ' 
25ec8                 | ' 	return *((WORD*)ptr);
25ec8     10 FB E1 FA | 	rdword	result1, local02
25ecc     FD 24 32 F9 | 	getword	local04, result1, #0
25ed0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
25ed0                 | ' 			break;
25ed0     48 00 90 FD | 	jmp	#LR__3837
25ed4                 | LR__3835
25ed4     10 13 02 F6 | 	mov	arg01, local02
25ed8     0F 29 02 F6 | 	mov	local06, local01
25edc     07 28 46 F0 | 	shr	local06, #7
25ee0     24 20 06 F1 | 	add	local02, #36
25ee4     10 15 02 FB | 	rdlong	arg02, local02
25ee8     24 20 86 F1 | 	sub	local02, #36
25eec     14 15 02 F1 | 	add	arg02, local06
25ef0     DC FC BF FD | 	call	#_fatfs_cc_move_window
25ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
25ef8     20 00 90 5D |  if_ne	jmp	#LR__3837
25efc     34 20 06 F1 | 	add	local02, #52
25f00     02 1E 66 F0 | 	shl	local01, #2
25f04     FF 1F 06 F5 | 	and	local01, #511
25f08     0F 21 02 F1 | 	add	local02, local01
25f0c                 | ' {
25f0c                 | ' 
25f0c                 | ' 	return *((DWORD*)ptr);
25f0c     10 25 02 FB | 	rdlong	local04, local02
25f10     7C 24 06 F4 | 	bitl	local04, #124
25f14                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
25f14                 | ' 			break;
25f14     04 00 90 FD | 	jmp	#LR__3837
25f18                 | LR__3836
25f18     01 24 06 F6 | 	mov	local04, #1
25f1c                 | LR__3837
25f1c                 | LR__3838
25f1c                 | ' 			val = 1;
25f1c                 | ' 		}
25f1c                 | ' 	}
25f1c                 | ' 
25f1c                 | ' 	return val;
25f1c     12 FB 01 F6 | 	mov	result1, local04
25f20     A7 F0 03 F6 | 	mov	ptra, fp
25f24     B2 00 A0 FD | 	call	#popregs_
25f28                 | _fatfs_cc_get_fat_ret
25f28     2D 00 64 FD | 	ret
25f2c                 | 
25f2c                 | _fatfs_cc_put_fat
25f2c     08 4A 05 F6 | 	mov	COUNT_, #8
25f30     A8 00 A0 FD | 	call	#pushregs_
25f34     09 1F 02 F6 | 	mov	local01, arg01
25f38     0A 21 02 F6 | 	mov	local02, arg02
25f3c     0B 23 02 F6 | 	mov	local03, arg03
25f40     02 24 06 F6 | 	mov	local04, #2
25f44     02 20 16 F2 | 	cmp	local02, #2 wc
25f48     E0 01 90 CD |  if_b	jmp	#LR__3847
25f4c     18 1E 06 F1 | 	add	local01, #24
25f50     0F 27 02 FB | 	rdlong	local05, local01
25f54     18 1E 86 F1 | 	sub	local01, #24
25f58     13 21 12 F2 | 	cmp	local02, local05 wc
25f5c     CC 01 90 3D |  if_ae	jmp	#LR__3847
25f60                 | ' 		switch (fs->fs_type) {
25f60     0F 29 C2 FA | 	rdbyte	local06, local01
25f64     01 28 86 F1 | 	sub	local06, #1
25f68     03 28 26 F3 | 	fle	local06, #3
25f6c     30 28 62 FD | 	jmprel	local06
25f70                 | LR__3840
25f70     0C 00 90 FD | 	jmp	#LR__3841
25f74     F8 00 90 FD | 	jmp	#LR__3844
25f78     40 01 90 FD | 	jmp	#LR__3845
25f7c     AC 01 90 FD | 	jmp	#LR__3846
25f80                 | LR__3841
25f80     10 2B 02 F6 | 	mov	local07, local02
25f84     10 27 02 F6 | 	mov	local05, local02
25f88     01 26 46 F0 | 	shr	local05, #1
25f8c     13 2B 02 F1 | 	add	local07, local05
25f90     0F 13 02 F6 | 	mov	arg01, local01
25f94     15 29 02 F6 | 	mov	local06, local07
25f98     09 28 46 F0 | 	shr	local06, #9
25f9c     24 1E 06 F1 | 	add	local01, #36
25fa0     0F 15 02 FB | 	rdlong	arg02, local01
25fa4     24 1E 86 F1 | 	sub	local01, #36
25fa8     14 15 02 F1 | 	add	arg02, local06
25fac     20 FC BF FD | 	call	#_fatfs_cc_move_window
25fb0     FD 24 0A F6 | 	mov	local04, result1 wz
25fb4     74 01 90 5D |  if_ne	jmp	#LR__3846
25fb8     34 1E 06 F1 | 	add	local01, #52
25fbc     0F 2D 02 F6 | 	mov	local08, local01
25fc0     15 27 02 F6 | 	mov	local05, local07
25fc4     FF 27 06 F5 | 	and	local05, #511
25fc8     13 2D 02 F1 | 	add	local08, local05
25fcc     01 20 CE F7 | 	test	local02, #1 wz
25fd0     34 1E 86 F1 | 	sub	local01, #52
25fd4     01 2A 06 F1 | 	add	local07, #1
25fd8     18 00 90 AD |  if_e	jmp	#LR__3842
25fdc     16 27 C2 FA | 	rdbyte	local05, local08
25fe0     13 27 42 F8 | 	getnib	local05, local05, #0
25fe4     11 29 E2 F8 | 	getbyte	local06, local03, #0
25fe8     04 28 66 F0 | 	shl	local06, #4
25fec     14 27 42 F5 | 	or	local05, local06
25ff0     04 00 90 FD | 	jmp	#LR__3843
25ff4                 | LR__3842
25ff4     11 27 02 F6 | 	mov	local05, local03
25ff8                 | LR__3843
25ff8     16 27 42 FC | 	wrbyte	local05, local08
25ffc     03 1E 06 F1 | 	add	local01, #3
26000     0F 03 48 FC | 	wrbyte	#1, local01
26004     03 1E 86 F1 | 	sub	local01, #3
26008     0F 13 02 F6 | 	mov	arg01, local01
2600c     15 2D 02 F6 | 	mov	local08, local07
26010     09 2C 46 F0 | 	shr	local08, #9
26014     24 1E 06 F1 | 	add	local01, #36
26018     0F 15 02 FB | 	rdlong	arg02, local01
2601c     24 1E 86 F1 | 	sub	local01, #36
26020     16 15 02 F1 | 	add	arg02, local08
26024     A8 FB BF FD | 	call	#_fatfs_cc_move_window
26028     FD 24 0A F6 | 	mov	local04, result1 wz
2602c     FC 00 90 5D |  if_ne	jmp	#LR__3846
26030     34 1E 06 F1 | 	add	local01, #52
26034     0F 2D 02 F6 | 	mov	local08, local01
26038     FF 2B 06 F5 | 	and	local07, #511
2603c     15 2D 02 F1 | 	add	local08, local07
26040     01 20 CE F7 | 	test	local02, #1 wz
26044     04 22 46 50 |  if_ne	shr	local03, #4
26048     11 27 02 56 |  if_ne	mov	local05, local03
2604c     16 27 C2 AA |  if_e	rdbyte	local05, local08
26050     F0 26 06 A5 |  if_e	and	local05, #240
26054     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
26058     11 23 42 A8 |  if_e	getnib	local03, local03, #0
2605c     11 27 42 A5 |  if_e	or	local05, local03
26060     16 27 42 FC | 	wrbyte	local05, local08
26064     31 1E 86 F1 | 	sub	local01, #49
26068     0F 03 48 FC | 	wrbyte	#1, local01
2606c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2606c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2606c                 | ' 			fs->wflag = 1;
2606c                 | ' 			break;
2606c     BC 00 90 FD | 	jmp	#LR__3846
26070                 | LR__3844
26070     0F 13 02 F6 | 	mov	arg01, local01
26074     10 2D 02 F6 | 	mov	local08, local02
26078     08 2C 46 F0 | 	shr	local08, #8
2607c     24 1E 06 F1 | 	add	local01, #36
26080     0F 15 02 FB | 	rdlong	arg02, local01
26084     24 1E 86 F1 | 	sub	local01, #36
26088     16 15 02 F1 | 	add	arg02, local08
2608c     40 FB BF FD | 	call	#_fatfs_cc_move_window
26090     FD 24 0A F6 | 	mov	local04, result1 wz
26094     94 00 90 5D |  if_ne	jmp	#LR__3846
26098     34 1E 06 F1 | 	add	local01, #52
2609c     0F 13 02 F6 | 	mov	arg01, local01
260a0     01 20 66 F0 | 	shl	local02, #1
260a4     FF 21 06 F5 | 	and	local02, #511
260a8     10 13 02 F1 | 	add	arg01, local02
260ac     09 23 52 FC | 	wrword	local03, arg01
260b0     31 1E 86 F1 | 	sub	local01, #49
260b4     0F 03 48 FC | 	wrbyte	#1, local01
260b8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
260b8                 | ' 			fs->wflag = 1;
260b8                 | ' 			break;
260b8     70 00 90 FD | 	jmp	#LR__3846
260bc                 | LR__3845
260bc     0F 13 02 F6 | 	mov	arg01, local01
260c0     10 2D 02 F6 | 	mov	local08, local02
260c4     07 2C 46 F0 | 	shr	local08, #7
260c8     24 1E 06 F1 | 	add	local01, #36
260cc     0F 15 02 FB | 	rdlong	arg02, local01
260d0     24 1E 86 F1 | 	sub	local01, #36
260d4     16 15 02 F1 | 	add	arg02, local08
260d8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
260dc     FD 24 0A F6 | 	mov	local04, result1 wz
260e0     48 00 90 5D |  if_ne	jmp	#LR__3846
260e4     7C 22 06 F4 | 	bitl	local03, #124
260e8     34 1E 06 F1 | 	add	local01, #52
260ec     10 2D 02 F6 | 	mov	local08, local02
260f0     02 2C 66 F0 | 	shl	local08, #2
260f4     FF 2D 06 F5 | 	and	local08, #511
260f8     0F 13 02 F6 | 	mov	arg01, local01
260fc     16 13 02 F1 | 	add	arg01, local08
26100                 | ' {
26100                 | ' 
26100                 | ' 	return *((DWORD*)ptr);
26100     09 2D 02 FB | 	rdlong	local08, arg01
26104     00 00 78 FF 
26108     00 2C 06 F5 | 	and	local08, ##-268435456
2610c     16 23 42 F5 | 	or	local03, local08
26110     0F 13 02 F6 | 	mov	arg01, local01
26114     02 20 66 F0 | 	shl	local02, #2
26118     FF 21 06 F5 | 	and	local02, #511
2611c     10 13 02 F1 | 	add	arg01, local02
26120     09 23 62 FC | 	wrlong	local03, arg01
26124     31 1E 86 F1 | 	sub	local01, #49
26128     0F 03 48 FC | 	wrbyte	#1, local01
2612c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2612c                 | ' 			}
2612c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2612c                 | ' 			fs->wflag = 1;
2612c                 | ' 			break;
2612c                 | LR__3846
2612c                 | LR__3847
2612c                 | ' 		}
2612c                 | ' 	}
2612c                 | ' 	return res;
2612c     12 FB 01 F6 | 	mov	result1, local04
26130     A7 F0 03 F6 | 	mov	ptra, fp
26134     B2 00 A0 FD | 	call	#popregs_
26138                 | _fatfs_cc_put_fat_ret
26138     2D 00 64 FD | 	ret
2613c                 | 
2613c                 | _fatfs_cc_remove_chain
2613c     05 4A 05 F6 | 	mov	COUNT_, #5
26140     A8 00 A0 FD | 	call	#pushregs_
26144     09 1F 02 F6 | 	mov	local01, arg01
26148     0A 21 02 F6 | 	mov	local02, arg02
2614c     0B 23 02 F6 | 	mov	local03, arg03
26150     0F 25 02 FB | 	rdlong	local04, local01
26154     02 20 16 F2 | 	cmp	local02, #2 wc
26158     14 00 90 CD |  if_b	jmp	#LR__3850
2615c     18 24 06 F1 | 	add	local04, #24
26160     12 FB 01 FB | 	rdlong	result1, local04
26164     18 24 86 F1 | 	sub	local04, #24
26168     FD 20 12 F2 | 	cmp	local02, result1 wc
2616c     08 00 90 CD |  if_b	jmp	#LR__3851
26170                 | LR__3850
26170     02 FA 05 F6 | 	mov	result1, #2
26174     CC 00 90 FD | 	jmp	#LR__3856
26178                 | LR__3851
26178     00 22 0E F2 | 	cmp	local03, #0 wz
2617c     18 00 90 AD |  if_e	jmp	#LR__3852
26180     11 15 02 F6 | 	mov	arg02, local03
26184     12 13 02 F6 | 	mov	arg01, local04
26188     01 16 66 F6 | 	neg	arg03, #1
2618c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
26190     00 FA 0D F2 | 	cmp	result1, #0 wz
26194     AC 00 90 5D |  if_ne	jmp	#LR__3856
26198                 | LR__3852
26198                 | ' 	}
26198                 | ' 
26198                 | ' 
26198                 | ' 	do {
26198                 | LR__3853
26198     10 15 02 F6 | 	mov	arg02, local02
2619c     0F 13 02 F6 | 	mov	arg01, local01
261a0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
261a4     FD 26 0A F6 | 	mov	local05, result1 wz
261a8     94 00 90 AD |  if_e	jmp	#LR__3855
261ac     01 26 0E F2 | 	cmp	local05, #1 wz
261b0     02 FA 05 A6 |  if_e	mov	result1, #2
261b4     8C 00 90 AD |  if_e	jmp	#LR__3856
261b8     FF FF 7F FF 
261bc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
261c0     01 FA 05 A6 |  if_e	mov	result1, #1
261c4     7C 00 90 AD |  if_e	jmp	#LR__3856
261c8     10 15 02 F6 | 	mov	arg02, local02
261cc     12 13 02 F6 | 	mov	arg01, local04
261d0     00 16 06 F6 | 	mov	arg03, #0
261d4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
261d8     FD 22 0A F6 | 	mov	local03, result1 wz
261dc     11 FB 01 56 |  if_ne	mov	result1, local03
261e0     60 00 90 5D |  if_ne	jmp	#LR__3856
261e4     18 24 06 F1 | 	add	local04, #24
261e8     12 23 02 FB | 	rdlong	local03, local04
261ec     02 22 86 F1 | 	sub	local03, #2
261f0     04 24 86 F1 | 	sub	local04, #4
261f4     12 21 02 FB | 	rdlong	local02, local04
261f8     14 24 86 F1 | 	sub	local04, #20
261fc     11 21 12 F2 | 	cmp	local02, local03 wc
26200     24 00 90 3D |  if_ae	jmp	#LR__3854
26204     14 24 06 F1 | 	add	local04, #20
26208     12 23 02 FB | 	rdlong	local03, local04
2620c     01 22 06 F1 | 	add	local03, #1
26210     12 23 62 FC | 	wrlong	local03, local04
26214     10 24 86 F1 | 	sub	local04, #16
26218     12 23 C2 FA | 	rdbyte	local03, local04
2621c     01 22 46 F5 | 	or	local03, #1
26220     12 23 42 FC | 	wrbyte	local03, local04
26224     04 24 86 F1 | 	sub	local04, #4
26228                 | LR__3854
26228     13 21 02 F6 | 	mov	local02, local05
2622c     18 24 06 F1 | 	add	local04, #24
26230     12 27 02 FB | 	rdlong	local05, local04
26234     18 24 86 F1 | 	sub	local04, #24
26238     13 21 12 F2 | 	cmp	local02, local05 wc
2623c     58 FF 9F CD |  if_b	jmp	#LR__3853
26240                 | LR__3855
26240                 | ' #line 1500 "ff.c"
26240                 | ' 	return FR_OK;
26240     00 FA 05 F6 | 	mov	result1, #0
26244                 | LR__3856
26244     A7 F0 03 F6 | 	mov	ptra, fp
26248     B2 00 A0 FD | 	call	#popregs_
2624c                 | _fatfs_cc_remove_chain_ret
2624c     2D 00 64 FD | 	ret
26250                 | 
26250                 | _fatfs_cc_create_chain
26250     09 4A 05 F6 | 	mov	COUNT_, #9
26254     A8 00 A0 FD | 	call	#pushregs_
26258     09 1F 02 F6 | 	mov	local01, arg01
2625c     0A 21 0A F6 | 	mov	local02, arg02 wz
26260     0F 23 02 FB | 	rdlong	local03, local01
26264     28 00 90 5D |  if_ne	jmp	#LR__3860
26268     10 22 06 F1 | 	add	local03, #16
2626c     11 25 0A FB | 	rdlong	local04, local03 wz
26270     10 22 86 F1 | 	sub	local03, #16
26274     18 22 06 51 |  if_ne	add	local03, #24
26278     11 27 02 5B |  if_ne	rdlong	local05, local03
2627c     18 22 86 51 |  if_ne	sub	local03, #24
26280     13 25 12 52 |  if_ne	cmp	local04, local05 wc
26284     50 00 90 4D |  if_c_and_nz	jmp	#LR__3861
26288     01 24 06 F6 | 	mov	local04, #1
2628c     48 00 90 FD | 	jmp	#LR__3861
26290                 | LR__3860
26290     10 15 02 F6 | 	mov	arg02, local02
26294     0F 13 02 F6 | 	mov	arg01, local01
26298     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2629c     FD 24 02 F6 | 	mov	local04, result1
262a0     02 24 16 F2 | 	cmp	local04, #2 wc
262a4     01 FA 05 C6 |  if_b	mov	result1, #1
262a8     BC 01 90 CD |  if_b	jmp	#LR__3871
262ac     FF FF 7F FF 
262b0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
262b4     12 FB 01 A6 |  if_e	mov	result1, local04
262b8     AC 01 90 AD |  if_e	jmp	#LR__3871
262bc     18 22 06 F1 | 	add	local03, #24
262c0     11 27 02 FB | 	rdlong	local05, local03
262c4     18 22 86 F1 | 	sub	local03, #24
262c8     13 25 12 F2 | 	cmp	local04, local05 wc
262cc     12 FB 01 C6 |  if_b	mov	result1, local04
262d0     94 01 90 CD |  if_b	jmp	#LR__3871
262d4     10 25 02 F6 | 	mov	local04, local02
262d8                 | LR__3861
262d8     14 22 06 F1 | 	add	local03, #20
262dc     11 27 0A FB | 	rdlong	local05, local03 wz
262e0     14 22 86 F1 | 	sub	local03, #20
262e4     00 FA 05 A6 |  if_e	mov	result1, #0
262e8     7C 01 90 AD |  if_e	jmp	#LR__3871
262ec     00 28 06 F6 | 	mov	local06, #0
262f0     10 25 0A F2 | 	cmp	local04, local02 wz
262f4     74 00 90 5D |  if_ne	jmp	#LR__3864
262f8     12 29 02 F6 | 	mov	local06, local04
262fc     01 28 06 F1 | 	add	local06, #1
26300     18 22 06 F1 | 	add	local03, #24
26304     11 27 02 FB | 	rdlong	local05, local03
26308     18 22 86 F1 | 	sub	local03, #24
2630c     13 29 12 F2 | 	cmp	local06, local05 wc
26310     02 28 06 36 |  if_ae	mov	local06, #2
26314     14 15 02 F6 | 	mov	arg02, local06
26318     0F 13 02 F6 | 	mov	arg01, local01
2631c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
26320     FD 26 02 F6 | 	mov	local05, result1
26324     01 26 0E F2 | 	cmp	local05, #1 wz
26328     FF FF 7F 5F 
2632c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
26330     13 FB 01 A6 |  if_e	mov	result1, local05
26334     30 01 90 AD |  if_e	jmp	#LR__3871
26338     00 26 0E F2 | 	cmp	local05, #0 wz
2633c     2C 00 90 AD |  if_e	jmp	#LR__3863
26340     10 22 06 F1 | 	add	local03, #16
26344     11 2B 02 FB | 	rdlong	local07, local03
26348     10 22 86 F1 | 	sub	local03, #16
2634c     02 2A 16 F2 | 	cmp	local07, #2 wc
26350     14 00 90 CD |  if_b	jmp	#LR__3862
26354     18 22 06 F1 | 	add	local03, #24
26358     11 27 02 FB | 	rdlong	local05, local03
2635c     18 22 86 F1 | 	sub	local03, #24
26360     13 2B 12 F2 | 	cmp	local07, local05 wc
26364     15 25 02 C6 |  if_b	mov	local04, local07
26368                 | LR__3862
26368     00 28 06 F6 | 	mov	local06, #0
2636c                 | LR__3863
2636c                 | LR__3864
2636c     00 28 0E F2 | 	cmp	local06, #0 wz
26370     60 00 90 5D |  if_ne	jmp	#LR__3867
26374     12 29 02 F6 | 	mov	local06, local04
26378                 | ' 			ncl = scl;
26378                 | ' 			for (;;) {
26378                 | LR__3865
26378     01 28 06 F1 | 	add	local06, #1
2637c     18 22 06 F1 | 	add	local03, #24
26380     11 27 02 FB | 	rdlong	local05, local03
26384     18 22 86 F1 | 	sub	local03, #24
26388     13 29 12 F2 | 	cmp	local06, local05 wc
2638c     02 28 06 36 |  if_ae	mov	local06, #2
26390     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
26394     00 FA 05 16 |  if_a	mov	result1, #0
26398     CC 00 90 1D |  if_a	jmp	#LR__3871
2639c     14 15 02 F6 | 	mov	arg02, local06
263a0     0F 13 02 F6 | 	mov	arg01, local01
263a4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
263a8     FD 2A 0A F6 | 	mov	local07, result1 wz
263ac     24 00 90 AD |  if_e	jmp	#LR__3866
263b0     01 2A 0E F2 | 	cmp	local07, #1 wz
263b4     FF FF 7F 5F 
263b8     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
263bc     15 FB 01 A6 |  if_e	mov	result1, local07
263c0     A4 00 90 AD |  if_e	jmp	#LR__3871
263c4     12 29 0A F2 | 	cmp	local06, local04 wz
263c8     00 FA 05 A6 |  if_e	mov	result1, #0
263cc     98 00 90 AD |  if_e	jmp	#LR__3871
263d0     A4 FF 9F FD | 	jmp	#LR__3865
263d4                 | LR__3866
263d4                 | LR__3867
263d4     11 13 02 F6 | 	mov	arg01, local03
263d8     14 15 02 F6 | 	mov	arg02, local06
263dc     01 16 66 F6 | 	neg	arg03, #1
263e0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
263e4     FD 2C 0A F6 | 	mov	local08, result1 wz
263e8     1C 00 90 5D |  if_ne	jmp	#LR__3868
263ec     00 20 0E F2 | 	cmp	local02, #0 wz
263f0     14 00 90 AD |  if_e	jmp	#LR__3868
263f4     11 13 02 F6 | 	mov	arg01, local03
263f8     10 15 02 F6 | 	mov	arg02, local02
263fc     14 17 02 F6 | 	mov	arg03, local06
26400     28 FB BF FD | 	call	#_fatfs_cc_put_fat
26404     FD 2C 02 F6 | 	mov	local08, result1
26408                 | LR__3868
26408     00 2C 0E F2 | 	cmp	local08, #0 wz
2640c     4C 00 90 5D |  if_ne	jmp	#LR__3869
26410     10 22 06 F1 | 	add	local03, #16
26414     11 29 62 FC | 	wrlong	local06, local03
26418     08 22 06 F1 | 	add	local03, #8
2641c     11 27 02 FB | 	rdlong	local05, local03
26420     02 26 86 F1 | 	sub	local05, #2
26424     04 22 86 F1 | 	sub	local03, #4
26428     11 2F 02 FB | 	rdlong	local09, local03
2642c     14 22 86 F1 | 	sub	local03, #20
26430     13 2F 1A F2 | 	cmp	local09, local05 wcz
26434     14 22 06 E1 |  if_be	add	local03, #20
26438     11 2F 02 EB |  if_be	rdlong	local09, local03
2643c     01 2E 86 E1 |  if_be	sub	local09, #1
26440     11 2F 62 EC |  if_be	wrlong	local09, local03
26444     14 22 86 E1 |  if_be	sub	local03, #20
26448     04 22 06 F1 | 	add	local03, #4
2644c     11 27 C2 FA | 	rdbyte	local05, local03
26450     01 26 46 F5 | 	or	local05, #1
26454     11 27 42 FC | 	wrbyte	local05, local03
26458     08 00 90 FD | 	jmp	#LR__3870
2645c                 | LR__3869
2645c     01 2C 0E F2 | 	cmp	local08, #1 wz
26460     01 28 C6 F6 | 	negz	local06, #1
26464                 | LR__3870
26464                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
26464                 | ' 	}
26464                 | ' 
26464                 | ' 	return ncl;
26464     14 FB 01 F6 | 	mov	result1, local06
26468                 | LR__3871
26468     A7 F0 03 F6 | 	mov	ptra, fp
2646c     B2 00 A0 FD | 	call	#popregs_
26470                 | _fatfs_cc_create_chain_ret
26470     2D 00 64 FD | 	ret
26474                 | 
26474                 | _fatfs_cc_dir_clear
26474     06 4A 05 F6 | 	mov	COUNT_, #6
26478     A8 00 A0 FD | 	call	#pushregs_
2647c     09 1F 02 F6 | 	mov	local01, arg01
26480     0A 21 02 F6 | 	mov	local02, arg02
26484     0F 13 02 F6 | 	mov	arg01, local01
26488     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2648c     00 FA 0D F2 | 	cmp	result1, #0 wz
26490     01 FA 05 56 |  if_ne	mov	result1, #1
26494     90 00 90 5D |  if_ne	jmp	#LR__3882
26498     0F 13 02 F6 | 	mov	arg01, local01
2649c     10 15 02 F6 | 	mov	arg02, local02
264a0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
264a4     FD 22 02 F6 | 	mov	local03, result1
264a8     30 1E 06 F1 | 	add	local01, #48
264ac     0F 23 62 FC | 	wrlong	local03, local01
264b0     04 1E 06 F1 | 	add	local01, #4
264b4     0F 13 02 F6 | 	mov	arg01, local01
264b8     00 14 06 F6 | 	mov	arg02, #0
264bc     09 16 C6 F9 | 	decod	arg03, #9
264c0     98 00 A0 FD | 	call	#\builtin_bytefill_
264c4     0F 25 02 F6 | 	mov	local04, local01
264c8                 | ' #line 1667 "ff.c"
264c8                 | ' 	{
264c8                 | ' 		ibuf = fs->win; szb = 1;
264c8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
264c8     00 26 06 F6 | 	mov	local05, #0
264cc     34 1E 86 F1 | 	sub	local01, #52
264d0                 | LR__3880
264d0     0A 1E 06 F1 | 	add	local01, #10
264d4     0F 29 E2 FA | 	rdword	local06, local01
264d8     0A 1E 86 F1 | 	sub	local01, #10
264dc     14 27 12 F2 | 	cmp	local05, local06 wc
264e0     2C 00 90 3D |  if_ae	jmp	#LR__3881
264e4     01 1E 06 F1 | 	add	local01, #1
264e8     0F 13 C2 FA | 	rdbyte	arg01, local01
264ec     01 1E 86 F1 | 	sub	local01, #1
264f0     12 15 02 F6 | 	mov	arg02, local04
264f4     11 17 02 F6 | 	mov	arg03, local03
264f8     13 17 02 F1 | 	add	arg03, local05
264fc     01 18 06 F6 | 	mov	arg04, #1
26500     9C EF BF FD | 	call	#_fatfs_cc_disk_write
26504     00 FA 0D F2 | 	cmp	result1, #0 wz
26508     01 26 06 A1 |  if_e	add	local05, #1
2650c     C0 FF 9F AD |  if_e	jmp	#LR__3880
26510                 | LR__3881
26510                 | ' 	}
26510                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
26510     0A 1E 06 F1 | 	add	local01, #10
26514     0F 25 E2 FA | 	rdword	local04, local01
26518     12 27 0A F2 | 	cmp	local05, local04 wz
2651c     00 28 06 A6 |  if_e	mov	local06, #0
26520     01 28 06 56 |  if_ne	mov	local06, #1
26524     14 FB 01 F6 | 	mov	result1, local06
26528                 | LR__3882
26528     A7 F0 03 F6 | 	mov	ptra, fp
2652c     B2 00 A0 FD | 	call	#popregs_
26530                 | _fatfs_cc_dir_clear_ret
26530     2D 00 64 FD | 	ret
26534                 | 
26534                 | _fatfs_cc_dir_sdi
26534     06 4A 05 F6 | 	mov	COUNT_, #6
26538     A8 00 A0 FD | 	call	#pushregs_
2653c     09 1F 02 F6 | 	mov	local01, arg01
26540     0A 21 02 F6 | 	mov	local02, arg02
26544     0F 23 02 FB | 	rdlong	local03, local01
26548     00 10 00 FF 
2654c     00 20 16 F2 | 	cmp	local02, ##2097152 wc
26550     1F 20 CE C7 |  if_b	test	local02, #31 wz
26554                 | ' 		return FR_INT_ERR;
26554     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
26558     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3896
2655c     10 1E 06 F1 | 	add	local01, #16
26560     0F 21 62 FC | 	wrlong	local02, local01
26564     08 1E 86 F1 | 	sub	local01, #8
26568     0F 25 0A FB | 	rdlong	local04, local01 wz
2656c     08 1E 86 F1 | 	sub	local01, #8
26570     11 27 C2 AA |  if_e	rdbyte	local05, local03
26574     03 26 16 A2 |  if_e	cmp	local05, #3 wc
26578     28 22 06 21 |  if_nc_and_z	add	local03, #40
2657c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
26580     28 22 86 21 |  if_nc_and_z	sub	local03, #40
26584     00 24 0E F2 | 	cmp	local04, #0 wz
26588     3C 00 90 5D |  if_ne	jmp	#LR__3890
2658c     10 27 02 F6 | 	mov	local05, local02
26590     05 26 46 F0 | 	shr	local05, #5
26594     08 22 06 F1 | 	add	local03, #8
26598     11 15 E2 FA | 	rdword	arg02, local03
2659c     08 22 86 F1 | 	sub	local03, #8
265a0     0A 27 12 F2 | 	cmp	local05, arg02 wc
265a4     02 FA 05 36 |  if_ae	mov	result1, #2
265a8     E4 00 90 3D |  if_ae	jmp	#LR__3896
265ac     28 22 06 F1 | 	add	local03, #40
265b0     11 27 02 FB | 	rdlong	local05, local03
265b4     28 22 86 F1 | 	sub	local03, #40
265b8     18 1E 06 F1 | 	add	local01, #24
265bc     0F 27 62 FC | 	wrlong	local05, local01
265c0     18 1E 86 F1 | 	sub	local01, #24
265c4     7C 00 90 FD | 	jmp	#LR__3895
265c8                 | LR__3890
265c8     0A 22 06 F1 | 	add	local03, #10
265cc     11 29 E2 FA | 	rdword	local06, local03
265d0     0A 22 86 F1 | 	sub	local03, #10
265d4     09 28 66 F0 | 	shl	local06, #9
265d8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
265d8                 | ' 		while (ofs >= csz) {
265d8                 | LR__3891
265d8     14 21 12 F2 | 	cmp	local02, local06 wc
265dc     4C 00 90 CD |  if_b	jmp	#LR__3894
265e0     0F 13 02 F6 | 	mov	arg01, local01
265e4     12 15 02 F6 | 	mov	arg02, local04
265e8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
265ec     FD 24 02 F6 | 	mov	local04, result1
265f0     FF FF 7F FF 
265f4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
265f8     01 FA 05 A6 |  if_e	mov	result1, #1
265fc     90 00 90 AD |  if_e	jmp	#LR__3896
26600     02 24 16 F2 | 	cmp	local04, #2 wc
26604     14 00 90 CD |  if_b	jmp	#LR__3892
26608     18 22 06 F1 | 	add	local03, #24
2660c     11 27 02 FB | 	rdlong	local05, local03
26610     18 22 86 F1 | 	sub	local03, #24
26614     13 25 12 F2 | 	cmp	local04, local05 wc
26618     08 00 90 CD |  if_b	jmp	#LR__3893
2661c                 | LR__3892
2661c     02 FA 05 F6 | 	mov	result1, #2
26620     6C 00 90 FD | 	jmp	#LR__3896
26624                 | LR__3893
26624     14 21 82 F1 | 	sub	local02, local06
26628     AC FF 9F FD | 	jmp	#LR__3891
2662c                 | LR__3894
2662c     11 13 02 F6 | 	mov	arg01, local03
26630     12 15 02 F6 | 	mov	arg02, local04
26634     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
26638     18 1E 06 F1 | 	add	local01, #24
2663c     0F FB 61 FC | 	wrlong	result1, local01
26640     18 1E 86 F1 | 	sub	local01, #24
26644                 | LR__3895
26644     14 1E 06 F1 | 	add	local01, #20
26648     0F 25 62 FC | 	wrlong	local04, local01
2664c     04 1E 06 F1 | 	add	local01, #4
26650     0F 27 0A FB | 	rdlong	local05, local01 wz
26654     18 1E 86 F1 | 	sub	local01, #24
26658     02 FA 05 A6 |  if_e	mov	result1, #2
2665c     30 00 90 AD |  if_e	jmp	#LR__3896
26660     10 29 02 F6 | 	mov	local06, local02
26664     09 28 46 F0 | 	shr	local06, #9
26668     18 1E 06 F1 | 	add	local01, #24
2666c     0F 27 02 FB | 	rdlong	local05, local01
26670     14 27 02 F1 | 	add	local05, local06
26674     0F 27 62 FC | 	wrlong	local05, local01
26678     34 22 06 F1 | 	add	local03, #52
2667c     FF 21 06 F5 | 	and	local02, #511
26680     10 23 02 F1 | 	add	local03, local02
26684     04 1E 06 F1 | 	add	local01, #4
26688     0F 23 62 FC | 	wrlong	local03, local01
2668c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2668c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2668c                 | ' 
2668c                 | ' 	return FR_OK;
2668c     00 FA 05 F6 | 	mov	result1, #0
26690                 | LR__3896
26690     A7 F0 03 F6 | 	mov	ptra, fp
26694     B2 00 A0 FD | 	call	#popregs_
26698                 | _fatfs_cc_dir_sdi_ret
26698     2D 00 64 FD | 	ret
2669c                 | 
2669c                 | _fatfs_cc_dir_next
2669c     05 4A 05 F6 | 	mov	COUNT_, #5
266a0     A8 00 A0 FD | 	call	#pushregs_
266a4     09 1F 02 F6 | 	mov	local01, arg01
266a8     0A 21 02 F6 | 	mov	local02, arg02
266ac     0F 23 02 FB | 	rdlong	local03, local01
266b0     10 1E 06 F1 | 	add	local01, #16
266b4     0F 25 02 FB | 	rdlong	local04, local01
266b8     10 1E 86 F1 | 	sub	local01, #16
266bc     20 24 06 F1 | 	add	local04, #32
266c0     00 10 00 FF 
266c4     00 24 16 F2 | 	cmp	local04, ##2097152 wc
266c8     18 1E 06 31 |  if_ae	add	local01, #24
266cc     0F 01 68 3C |  if_ae	wrlong	#0, local01
266d0     18 1E 86 31 |  if_ae	sub	local01, #24
266d4     18 1E 06 F1 | 	add	local01, #24
266d8     0F 15 0A FB | 	rdlong	arg02, local01 wz
266dc     18 1E 86 F1 | 	sub	local01, #24
266e0     04 FA 05 A6 |  if_e	mov	result1, #4
266e4     64 01 90 AD |  if_e	jmp	#LR__3905
266e8     FF 25 CE F7 | 	test	local04, #511 wz
266ec     3C 01 90 5D |  if_ne	jmp	#LR__3904
266f0     18 1E 06 F1 | 	add	local01, #24
266f4     0F 15 02 FB | 	rdlong	arg02, local01
266f8     01 14 06 F1 | 	add	arg02, #1
266fc     0F 15 62 FC | 	wrlong	arg02, local01
26700     04 1E 86 F1 | 	sub	local01, #4
26704     0F 15 0A FB | 	rdlong	arg02, local01 wz
26708     14 1E 86 F1 | 	sub	local01, #20
2670c     2C 00 90 5D |  if_ne	jmp	#LR__3900
26710     12 15 02 F6 | 	mov	arg02, local04
26714     05 14 46 F0 | 	shr	arg02, #5
26718     08 22 06 F1 | 	add	local03, #8
2671c     11 21 E2 FA | 	rdword	local02, local03
26720     08 22 86 F1 | 	sub	local03, #8
26724     10 15 12 F2 | 	cmp	arg02, local02 wc
26728     18 1E 06 31 |  if_ae	add	local01, #24
2672c     0F 01 68 3C |  if_ae	wrlong	#0, local01
26730                 | ' 				dp->sect = 0; return FR_NO_FILE;
26730     04 FA 05 36 |  if_ae	mov	result1, #4
26734     14 01 90 3D |  if_ae	jmp	#LR__3905
26738     F0 00 90 FD | 	jmp	#LR__3903
2673c                 | LR__3900
2673c     12 13 02 F6 | 	mov	arg01, local04
26740     09 12 46 F0 | 	shr	arg01, #9
26744     0A 22 06 F1 | 	add	local03, #10
26748     11 15 E2 FA | 	rdword	arg02, local03
2674c     0A 22 86 F1 | 	sub	local03, #10
26750     01 14 86 F1 | 	sub	arg02, #1
26754     0A 13 CA F7 | 	test	arg01, arg02 wz
26758     D0 00 90 5D |  if_ne	jmp	#LR__3902
2675c     0F 13 02 F6 | 	mov	arg01, local01
26760     14 1E 06 F1 | 	add	local01, #20
26764     0F 15 02 FB | 	rdlong	arg02, local01
26768     14 1E 86 F1 | 	sub	local01, #20
2676c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
26770     FD 26 02 F6 | 	mov	local05, result1
26774     02 26 16 F2 | 	cmp	local05, #2 wc
26778     02 FA 05 C6 |  if_b	mov	result1, #2
2677c     CC 00 90 CD |  if_b	jmp	#LR__3905
26780     FF FF 7F FF 
26784     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26788     01 FA 05 A6 |  if_e	mov	result1, #1
2678c     BC 00 90 AD |  if_e	jmp	#LR__3905
26790     18 22 06 F1 | 	add	local03, #24
26794     11 15 02 FB | 	rdlong	arg02, local03
26798     18 22 86 F1 | 	sub	local03, #24
2679c     0A 27 12 F2 | 	cmp	local05, arg02 wc
267a0     68 00 90 CD |  if_b	jmp	#LR__3901
267a4     00 20 0E F2 | 	cmp	local02, #0 wz
267a8     18 1E 06 A1 |  if_e	add	local01, #24
267ac     0F 01 68 AC |  if_e	wrlong	#0, local01
267b0                 | ' 						dp->sect = 0; return FR_NO_FILE;
267b0     04 FA 05 A6 |  if_e	mov	result1, #4
267b4     94 00 90 AD |  if_e	jmp	#LR__3905
267b8     0F 13 02 F6 | 	mov	arg01, local01
267bc     14 1E 06 F1 | 	add	local01, #20
267c0     0F 15 02 FB | 	rdlong	arg02, local01
267c4     14 1E 86 F1 | 	sub	local01, #20
267c8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
267cc     FD 26 0A F6 | 	mov	local05, result1 wz
267d0     07 FA 05 A6 |  if_e	mov	result1, #7
267d4     74 00 90 AD |  if_e	jmp	#LR__3905
267d8     01 26 0E F2 | 	cmp	local05, #1 wz
267dc     02 FA 05 A6 |  if_e	mov	result1, #2
267e0     68 00 90 AD |  if_e	jmp	#LR__3905
267e4     FF FF 7F FF 
267e8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
267ec     01 FA 05 A6 |  if_e	mov	result1, #1
267f0     58 00 90 AD |  if_e	jmp	#LR__3905
267f4     13 15 02 F6 | 	mov	arg02, local05
267f8     11 13 02 F6 | 	mov	arg01, local03
267fc     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
26800     00 FA 0D F2 | 	cmp	result1, #0 wz
26804     01 FA 05 56 |  if_ne	mov	result1, #1
26808     40 00 90 5D |  if_ne	jmp	#LR__3905
2680c                 | LR__3901
2680c     14 1E 06 F1 | 	add	local01, #20
26810     0F 27 62 FC | 	wrlong	local05, local01
26814     11 13 02 F6 | 	mov	arg01, local03
26818     13 15 02 F6 | 	mov	arg02, local05
2681c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
26820     04 1E 06 F1 | 	add	local01, #4
26824     0F FB 61 FC | 	wrlong	result1, local01
26828     18 1E 86 F1 | 	sub	local01, #24
2682c                 | LR__3902
2682c                 | LR__3903
2682c                 | LR__3904
2682c     10 1E 06 F1 | 	add	local01, #16
26830     0F 25 62 FC | 	wrlong	local04, local01
26834     34 22 06 F1 | 	add	local03, #52
26838     FF 25 06 F5 | 	and	local04, #511
2683c     12 23 02 F1 | 	add	local03, local04
26840     0C 1E 06 F1 | 	add	local01, #12
26844     0F 23 62 FC | 	wrlong	local03, local01
26848                 | ' #line 1771 "ff.c"
26848                 | ' 				}
26848                 | ' 				dp->clust = clst;
26848                 | ' 				dp->sect = clst2sect(fs, clst);
26848                 | ' 			}
26848                 | ' 		}
26848                 | ' 	}
26848                 | ' 	dp->dptr = ofs;
26848                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
26848                 | ' 
26848                 | ' 	return FR_OK;
26848     00 FA 05 F6 | 	mov	result1, #0
2684c                 | LR__3905
2684c     A7 F0 03 F6 | 	mov	ptra, fp
26850     B2 00 A0 FD | 	call	#popregs_
26854                 | _fatfs_cc_dir_next_ret
26854     2D 00 64 FD | 	ret
26858                 | 
26858                 | _fatfs_cc_dir_alloc
26858     08 4A 05 F6 | 	mov	COUNT_, #8
2685c     A8 00 A0 FD | 	call	#pushregs_
26860     09 1F 02 F6 | 	mov	local01, arg01
26864     0A 21 02 F6 | 	mov	local02, arg02
26868     0F 23 02 FB | 	rdlong	local03, local01
2686c     0F 13 02 F6 | 	mov	arg01, local01
26870     00 14 06 F6 | 	mov	arg02, #0
26874     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
26878     FD 24 0A F6 | 	mov	local04, result1 wz
2687c     70 00 90 5D |  if_ne	jmp	#LR__3914
26880     00 26 06 F6 | 	mov	local05, #0
26884                 | ' 		n = 0;
26884                 | ' 		do {
26884                 | LR__3910
26884     18 1E 06 F1 | 	add	local01, #24
26888     0F 15 02 FB | 	rdlong	arg02, local01
2688c     18 1E 86 F1 | 	sub	local01, #24
26890     11 13 02 F6 | 	mov	arg01, local03
26894     38 F3 BF FD | 	call	#_fatfs_cc_move_window
26898     FD 24 0A F6 | 	mov	local04, result1 wz
2689c     50 00 90 5D |  if_ne	jmp	#LR__3913
268a0     1C 1E 06 F1 | 	add	local01, #28
268a4     0F 29 02 FB | 	rdlong	local06, local01
268a8     1C 1E 86 F1 | 	sub	local01, #28
268ac     14 29 C2 FA | 	rdbyte	local06, local06
268b0     E5 28 0E F2 | 	cmp	local06, #229 wz
268b4     1C 1E 06 51 |  if_ne	add	local01, #28
268b8     0F 2B 02 5B |  if_ne	rdlong	local07, local01
268bc     1C 1E 86 51 |  if_ne	sub	local01, #28
268c0     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
268c4     10 00 90 5D |  if_ne	jmp	#LR__3911
268c8     01 26 06 F1 | 	add	local05, #1
268cc     10 27 0A F2 | 	cmp	local05, local02 wz
268d0     1C 00 90 AD |  if_e	jmp	#LR__3913
268d4     04 00 90 FD | 	jmp	#LR__3912
268d8                 | LR__3911
268d8     00 26 06 F6 | 	mov	local05, #0
268dc                 | LR__3912
268dc     0F 13 02 F6 | 	mov	arg01, local01
268e0     01 14 06 F6 | 	mov	arg02, #1
268e4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
268e8     FD 24 0A F6 | 	mov	local04, result1 wz
268ec     94 FF 9F AD |  if_e	jmp	#LR__3910
268f0                 | LR__3913
268f0                 | LR__3914
268f0     04 24 0E F2 | 	cmp	local04, #4 wz
268f4     07 24 06 A6 |  if_e	mov	local04, #7
268f8                 | ' 	return res;
268f8     12 FB 01 F6 | 	mov	result1, local04
268fc     A7 F0 03 F6 | 	mov	ptra, fp
26900     B2 00 A0 FD | 	call	#popregs_
26904                 | _fatfs_cc_dir_alloc_ret
26904     2D 00 64 FD | 	ret
26908                 | 
26908                 | _fatfs_cc_ld_clust
26908     09 01 02 F6 | 	mov	_var01, arg01
2690c     0A 13 02 F6 | 	mov	arg01, arg02
26910     1A 12 06 F1 | 	add	arg01, #26
26914                 | ' {
26914                 | ' 
26914                 | ' 	return *((WORD*)ptr);
26914     09 FB E1 FA | 	rdword	result1, arg01
26918     FD 12 32 F9 | 	getword	arg01, result1, #0
2691c     00 01 C2 FA | 	rdbyte	_var01, _var01
26920     03 00 0E F2 | 	cmp	_var01, #3 wz
26924     14 14 06 A1 |  if_e	add	arg02, #20
26928                 | ' {
26928                 | ' 
26928                 | ' 	return *((WORD*)ptr);
26928     0A FB E1 AA |  if_e	rdword	result1, arg02
2692c     10 FA 65 A0 |  if_e	shl	result1, #16
26930     FD 12 42 A5 |  if_e	or	arg01, result1
26934                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
26934                 | ' 	}
26934                 | ' 
26934                 | ' 	return cl;
26934     09 FB 01 F6 | 	mov	result1, arg01
26938                 | _fatfs_cc_ld_clust_ret
26938     2D 00 64 FD | 	ret
2693c                 | 
2693c                 | _fatfs_cc_st_clust
2693c     09 01 02 F6 | 	mov	_var01, arg01
26940     0A 13 02 F6 | 	mov	arg01, arg02
26944     1A 12 06 F1 | 	add	arg01, #26
26948     09 17 52 FC | 	wrword	arg03, arg01
2694c     00 01 C2 FA | 	rdbyte	_var01, _var01
26950     03 00 0E F2 | 	cmp	_var01, #3 wz
26954     14 14 06 A1 |  if_e	add	arg02, #20
26958     10 16 46 A0 |  if_e	shr	arg03, #16
2695c     0A 17 52 AC |  if_e	wrword	arg03, arg02
26960                 | _fatfs_cc_st_clust_ret
26960     2D 00 64 FD | 	ret
26964                 | 
26964                 | _fatfs_cc_cmp_lfn
26964     07 4A 05 F6 | 	mov	COUNT_, #7
26968     A8 00 A0 FD | 	call	#pushregs_
2696c     09 1F 02 F6 | 	mov	local01, arg01
26970     0A 13 02 F6 | 	mov	arg01, arg02
26974     1A 12 06 F1 | 	add	arg01, #26
26978                 | ' {
26978                 | ' 
26978                 | ' 	return *((WORD*)ptr);
26978     09 FB E9 FA | 	rdword	result1, arg01 wz
2697c     00 FA 05 56 |  if_ne	mov	result1, #0
26980     E0 00 90 5D |  if_ne	jmp	#LR__3926
26984     0A 21 C2 FA | 	rdbyte	local02, arg02
26988     3F 20 06 F5 | 	and	local02, #63
2698c     01 20 86 F1 | 	sub	local02, #1
26990     0D 20 06 FD | 	qmul	local02, #13
26994                 | ' 
26994                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
26994                 | ' 
26994                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
26994     01 22 06 F6 | 	mov	local03, #1
26998     00 24 06 F6 | 	mov	local04, #0
2699c     18 26 62 FD | 	getqx	local05
269a0                 | LR__3920
269a0     0D 24 16 F2 | 	cmp	local04, #13 wc
269a4     9C 00 90 3D |  if_ae	jmp	#LR__3925
269a8     0A 13 02 F6 | 	mov	arg01, arg02
269ac     12 21 02 F6 | 	mov	local02, local04
269b0     01 00 00 FF 
269b4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
269b8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
269bc     10 21 C2 FA | 	rdbyte	local02, local02
269c0     01 20 06 FA | 	mul	local02, #1
269c4     10 13 02 F1 | 	add	arg01, local02
269c8     01 00 00 FF 
269cc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
269d0                 | ' {
269d0                 | ' 
269d0                 | ' 	return *((WORD*)ptr);
269d0     09 FB E1 FA | 	rdword	result1, arg01
269d4     FD 28 02 F6 | 	mov	local06, result1
269d8     11 21 02 F6 | 	mov	local02, local03
269dc     0F 20 4E F7 | 	zerox	local02, #15 wz
269e0     44 00 90 AD |  if_e	jmp	#LR__3923
269e4     00 27 16 F2 | 	cmp	local05, #256 wc
269e8     2C 00 90 3D |  if_ae	jmp	#LR__3921
269ec     14 13 32 F9 | 	getword	arg01, local06, #0
269f0     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
269f4     FD 20 02 F6 | 	mov	local02, result1
269f8     13 23 02 F6 | 	mov	local03, local05
269fc     01 22 66 F0 | 	shl	local03, #1
26a00     0F 23 02 F1 | 	add	local03, local01
26a04     11 13 E2 FA | 	rdword	arg01, local03
26a08     01 26 06 F1 | 	add	local05, #1
26a0c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
26a10     FD 20 0A F2 | 	cmp	local02, result1 wz
26a14     08 00 90 AD |  if_e	jmp	#LR__3922
26a18                 | LR__3921
26a18                 | ' 				return 0;
26a18     00 FA 05 F6 | 	mov	result1, #0
26a1c     44 00 90 FD | 	jmp	#LR__3926
26a20                 | LR__3922
26a20     14 23 02 F6 | 	mov	local03, local06
26a24     14 00 90 FD | 	jmp	#LR__3924
26a28                 | LR__3923
26a28     14 29 32 F9 | 	getword	local06, local06, #0
26a2c     7F 00 00 FF 
26a30     FF 29 0E F2 | 	cmp	local06, ##65535 wz
26a34     00 FA 05 56 |  if_ne	mov	result1, #0
26a38     28 00 90 5D |  if_ne	jmp	#LR__3926
26a3c                 | LR__3924
26a3c     01 24 06 F1 | 	add	local04, #1
26a40     5C FF 9F FD | 	jmp	#LR__3920
26a44                 | LR__3925
26a44     0A 21 C2 FA | 	rdbyte	local02, arg02
26a48     40 20 CE F7 | 	test	local02, #64 wz
26a4c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
26a50     01 26 66 50 |  if_ne	shl	local05, #1
26a54     0F 27 02 51 |  if_ne	add	local05, local01
26a58     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
26a5c     00 FA 05 56 |  if_ne	mov	result1, #0
26a60                 | ' 
26a60                 | ' 	return 1;
26a60     01 FA 05 A6 |  if_e	mov	result1, #1
26a64                 | LR__3926
26a64     A7 F0 03 F6 | 	mov	ptra, fp
26a68     B2 00 A0 FD | 	call	#popregs_
26a6c                 | _fatfs_cc_cmp_lfn_ret
26a6c     2D 00 64 FD | 	ret
26a70                 | 
26a70                 | _fatfs_cc_pick_lfn
26a70     09 01 02 F6 | 	mov	_var01, arg01
26a74     0A 13 02 F6 | 	mov	arg01, arg02
26a78     1A 12 06 F1 | 	add	arg01, #26
26a7c                 | ' {
26a7c                 | ' 
26a7c                 | ' 	return *((WORD*)ptr);
26a7c     09 FB E9 FA | 	rdword	result1, arg01 wz
26a80     00 FA 05 56 |  if_ne	mov	result1, #0
26a84     D4 00 90 5D |  if_ne	jmp	#LR__3935
26a88     0A 03 C2 FA | 	rdbyte	_var02, arg02
26a8c     40 02 26 F5 | 	andn	_var02, #64
26a90     01 02 86 F1 | 	sub	_var02, #1
26a94     0D 02 06 FD | 	qmul	_var02, #13
26a98                 | ' 
26a98                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
26a98                 | ' 
26a98                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
26a98     01 04 06 F6 | 	mov	_var03, #1
26a9c     00 06 06 F6 | 	mov	_var04, #0
26aa0     18 08 62 FD | 	getqx	_var05
26aa4                 | LR__3930
26aa4     0D 06 16 F2 | 	cmp	_var04, #13 wc
26aa8     80 00 90 3D |  if_ae	jmp	#LR__3933
26aac     0A 13 02 F6 | 	mov	arg01, arg02
26ab0     03 03 02 F6 | 	mov	_var02, _var04
26ab4     01 00 00 FF 
26ab8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
26abc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
26ac0     01 03 C2 FA | 	rdbyte	_var02, _var02
26ac4     01 02 06 FA | 	mul	_var02, #1
26ac8     01 13 02 F1 | 	add	arg01, _var02
26acc     01 00 00 FF 
26ad0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
26ad4                 | ' {
26ad4                 | ' 
26ad4                 | ' 	return *((WORD*)ptr);
26ad4     09 FB E1 FA | 	rdword	result1, arg01
26ad8     FD 0A 02 F6 | 	mov	_var06, result1
26adc     02 03 02 F6 | 	mov	_var02, _var03
26ae0     0F 02 4E F7 | 	zerox	_var02, #15 wz
26ae4     28 00 90 AD |  if_e	jmp	#LR__3931
26ae8     00 09 16 F2 | 	cmp	_var05, #256 wc
26aec     00 FA 05 36 |  if_ae	mov	result1, #0
26af0     68 00 90 3D |  if_ae	jmp	#LR__3935
26af4     04 03 02 F6 | 	mov	_var02, _var05
26af8     01 02 66 F0 | 	shl	_var02, #1
26afc     00 03 02 F1 | 	add	_var02, _var01
26b00     05 05 02 F6 | 	mov	_var03, _var06
26b04     01 05 52 FC | 	wrword	_var03, _var02
26b08     01 08 06 F1 | 	add	_var05, #1
26b0c     14 00 90 FD | 	jmp	#LR__3932
26b10                 | LR__3931
26b10     05 0B 32 F9 | 	getword	_var06, _var06, #0
26b14     7F 00 00 FF 
26b18     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
26b1c     00 FA 05 56 |  if_ne	mov	result1, #0
26b20     38 00 90 5D |  if_ne	jmp	#LR__3935
26b24                 | LR__3932
26b24     01 06 06 F1 | 	add	_var04, #1
26b28     78 FF 9F FD | 	jmp	#LR__3930
26b2c                 | LR__3933
26b2c     0A 03 C2 FA | 	rdbyte	_var02, arg02
26b30     40 02 CE F7 | 	test	_var02, #64 wz
26b34     02 0D 02 56 |  if_ne	mov	_var07, _var03
26b38     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
26b3c     18 00 90 AD |  if_e	jmp	#LR__3934
26b40     00 09 16 F2 | 	cmp	_var05, #256 wc
26b44     00 FA 05 36 |  if_ae	mov	result1, #0
26b48     10 00 90 3D |  if_ae	jmp	#LR__3935
26b4c     01 08 66 F0 | 	shl	_var05, #1
26b50     00 09 02 F1 | 	add	_var05, _var01
26b54     04 01 58 FC | 	wrword	#0, _var05
26b58                 | LR__3934
26b58                 | ' 		lfnbuf[i] = 0;
26b58                 | ' 	}
26b58                 | ' 
26b58                 | ' 	return 1;
26b58     01 FA 05 F6 | 	mov	result1, #1
26b5c                 | LR__3935
26b5c                 | _fatfs_cc_pick_lfn_ret
26b5c     2D 00 64 FD | 	ret
26b60                 | 
26b60                 | _fatfs_cc_put_lfn
26b60     0D 14 06 F1 | 	add	arg02, #13
26b64     0A 19 42 FC | 	wrbyte	arg04, arg02
26b68     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
26b6c     01 18 86 F1 | 	sub	arg04, #1
26b70     0D 18 06 FD | 	qmul	arg04, #13
26b74     09 01 02 F6 | 	mov	_var01, arg01
26b78     02 14 86 F1 | 	sub	arg02, #2
26b7c     0A 1F 48 FC | 	wrbyte	#15, arg02
26b80     01 14 06 F1 | 	add	arg02, #1
26b84     0A 01 48 FC | 	wrbyte	#0, arg02
26b88     0C 14 86 F1 | 	sub	arg02, #12
26b8c     0A 13 02 F6 | 	mov	arg01, arg02
26b90     1A 12 06 F1 | 	add	arg01, #26
26b94     09 01 58 FC | 	wrword	#0, arg01
26b98     00 02 06 F6 | 	mov	_var02, #0
26b9c     00 04 06 F6 | 	mov	_var03, #0
26ba0                 | ' 	BYTE* dir,
26ba0                 | ' 	BYTE ord,
26ba0                 | ' 	BYTE sum
26ba0                 | ' )
26ba0                 | ' {
26ba0                 | ' 	UINT i, s;
26ba0                 | ' 	WCHAR wc;
26ba0                 | ' 
26ba0                 | ' 
26ba0                 | ' 	dir[ 13 ] = sum;
26ba0                 | ' 	dir[ 11 ] =  0x0F ;
26ba0                 | ' 	dir[ 12 ] = 0;
26ba0                 | ' 	st_word(dir +  26 , 0);
26ba0                 | ' 
26ba0                 | ' 	i = (ord - 1) * 13;
26ba0                 | ' 	s = wc = 0;
26ba0                 | ' 	do {
26ba0     01 00 00 FF 
26ba4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
26ba8     18 06 62 FD | 	getqx	_var04
26bac     97 2A 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
26bb0                 | LR__3940
26bb0     01 19 32 F9 | 	getword	arg04, _var02, #0
26bb4     7F 00 00 FF 
26bb8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
26bbc     03 13 02 56 |  if_ne	mov	arg01, _var04
26bc0     01 06 06 51 |  if_ne	add	_var04, #1
26bc4     01 12 66 50 |  if_ne	shl	arg01, #1
26bc8     00 13 02 51 |  if_ne	add	arg01, _var01
26bcc     09 03 E2 5A |  if_ne	rdword	_var02, arg01
26bd0     0A 13 02 F6 | 	mov	arg01, arg02
26bd4     02 19 02 F6 | 	mov	arg04, _var03
26bd8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
26bdc     0C 19 C2 FA | 	rdbyte	arg04, arg04
26be0     01 18 06 FA | 	mul	arg04, #1
26be4     0C 13 02 F1 | 	add	arg01, arg04
26be8     09 03 52 FC | 	wrword	_var02, arg01
26bec     01 19 02 F6 | 	mov	arg04, _var02
26bf0     0F 18 4E F7 | 	zerox	arg04, #15 wz
26bf4     0F 02 CE A9 |  if_e	bmask	_var02, #15
26bf8     01 04 06 F1 | 	add	_var03, #1
26bfc     0D 04 16 F2 | 	cmp	_var03, #13 wc
26c00     AC FF 9F CD |  if_b	jmp	#LR__3940
26c04                 | LR__3941
26c04     01 00 00 FF 
26c08     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
26c0c     01 03 32 F9 | 	getword	_var02, _var02, #0
26c10     7F 00 00 FF 
26c14     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
26c18     01 06 66 50 |  if_ne	shl	_var04, #1
26c1c     00 07 02 51 |  if_ne	add	_var04, _var01
26c20     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
26c24     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
26c28     40 16 46 A5 |  if_e	or	arg03, #64
26c2c     0A 17 42 FC | 	wrbyte	arg03, arg02
26c30                 | _fatfs_cc_put_lfn_ret
26c30     2D 00 64 FD | 	ret
26c34                 | 
26c34                 | _fatfs_cc_gen_numname
26c34     08 4A 05 F6 | 	mov	COUNT_, #8
26c38     A8 00 A0 FD | 	call	#pushregs_
26c3c     2C F0 07 F1 | 	add	ptra, #44
26c40     09 1F 02 F6 | 	mov	local01, arg01
26c44     0A 21 02 F6 | 	mov	local02, arg02
26c48     0B 23 02 F6 | 	mov	local03, arg03
26c4c     0C 25 02 F6 | 	mov	local04, arg04
26c50     0F 13 02 F6 | 	mov	arg01, local01
26c54     10 15 02 F6 | 	mov	arg02, local02
26c58     0B 16 06 F6 | 	mov	arg03, #11
26c5c     F8 77 BF FD | 	call	#__system____builtin_memmove
26c60     06 24 16 F2 | 	cmp	local04, #6 wc
26c64     48 00 90 CD |  if_b	jmp	#LR__3955
26c68     12 27 02 F6 | 	mov	local05, local04
26c6c     97 1E 48 FB | 	callpa	#(@LR__3953-@LR__3950)>>2,fcache_load_ptr_
26c70                 | ' 		sreg = seq;
26c70                 | ' 		while (*lfn) {
26c70                 | LR__3950
26c70     11 29 EA FA | 	rdword	local06, local03 wz
26c74     34 00 90 AD |  if_e	jmp	#LR__3954
26c78     11 2B E2 FA | 	rdword	local07, local03
26c7c                 | ' 			wc = *lfn++;
26c7c                 | ' 			for (i = 0; i < 16; i++) {
26c7c     02 22 06 F1 | 	add	local03, #2
26c80     10 12 DC FC | 	rep	@LR__3952, #16
26c84                 | LR__3951
26c84     01 26 66 F0 | 	shl	local05, #1
26c88     15 29 32 F9 | 	getword	local06, local07, #0
26c8c     01 28 06 F5 | 	and	local06, #1
26c90     14 27 02 F1 | 	add	local05, local06
26c94     15 2B 32 F9 | 	getword	local07, local07, #0
26c98     01 2A 46 F0 | 	shr	local07, #1
26c9c     10 26 2E F4 | 	testbn	local05, #16 wz
26ca0     88 00 00 5F 
26ca4     21 26 66 55 |  if_ne	xor	local05, ##69665
26ca8                 | LR__3952
26ca8     C4 FF 9F FD | 	jmp	#LR__3950
26cac                 | LR__3953
26cac                 | LR__3954
26cac     13 25 02 F6 | 	mov	local04, local05
26cb0                 | LR__3955
26cb0     07 2A 06 F6 | 	mov	local07, #7
26cb4                 | ' 			}
26cb4                 | ' 		}
26cb4                 | ' 		seq = (UINT)sreg;
26cb4                 | ' 	}
26cb4                 | ' 
26cb4                 | ' 
26cb4                 | ' 	i = 7;
26cb4                 | ' 	do {
26cb4     10 4E 05 F1 | 	add	fp, #16
26cb8     97 1A 48 FB | 	callpa	#(@LR__3957-@LR__3956)>>2,fcache_load_ptr_
26cbc                 | LR__3956
26cbc     12 27 42 F8 | 	getnib	local05, local04, #0
26cc0     30 26 06 F1 | 	add	local05, #48
26cc4     04 24 46 F0 | 	shr	local04, #4
26cc8     13 29 E2 F8 | 	getbyte	local06, local05, #0
26ccc     3A 28 16 F2 | 	cmp	local06, #58 wc
26cd0     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
26cd4     07 26 06 31 |  if_ae	add	local05, #7
26cd8     15 29 02 F6 | 	mov	local06, local07
26cdc     01 2A 8E F1 | 	sub	local07, #1 wz
26ce0     A7 28 02 F1 | 	add	local06, fp
26ce4     14 27 42 FC | 	wrbyte	local05, local06
26ce8     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
26cec     CC FF 9F 5D |  if_ne	jmp	#LR__3956
26cf0                 | LR__3957
26cf0     15 29 02 F6 | 	mov	local06, local07
26cf4     A7 28 02 F1 | 	add	local06, fp
26cf8     14 FD 48 FC | 	wrbyte	#126, local06
26cfc                 | ' 	ns[i] = '~';
26cfc                 | ' 
26cfc                 | ' 
26cfc                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
26cfc     00 26 06 F6 | 	mov	local05, #0
26d00     10 4E 85 F1 | 	sub	fp, #16
26d04     97 2A 48 FB | 	callpa	#(@LR__3960-@LR__3958)>>2,fcache_load_ptr_
26d08                 | LR__3958
26d08     15 27 12 F2 | 	cmp	local05, local07 wc
26d0c     4C 00 90 3D |  if_ae	jmp	#LR__3961
26d10     13 29 02 F6 | 	mov	local06, local05
26d14     0F 29 02 F1 | 	add	local06, local01
26d18     14 29 C2 FA | 	rdbyte	local06, local06
26d1c     20 28 0E F2 | 	cmp	local06, #32 wz
26d20     38 00 90 AD |  if_e	jmp	#LR__3961
26d24     13 13 02 F6 | 	mov	arg01, local05
26d28     0F 13 02 F1 | 	add	arg01, local01
26d2c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
26d30     00 FA 05 56 |  if_ne	mov	result1, #0
26d34                 | ' 
26d34                 | ' 	return 0;
26d34     00 FA 05 A6 |  if_e	mov	result1, #0
26d38     00 FA 0D F2 | 	cmp	result1, #0 wz
26d3c     14 00 90 AD |  if_e	jmp	#LR__3959
26d40     15 29 02 F6 | 	mov	local06, local07
26d44     01 28 86 F1 | 	sub	local06, #1
26d48     14 27 0A F2 | 	cmp	local05, local06 wz
26d4c     0C 00 90 AD |  if_e	jmp	#LR__3961
26d50     01 26 06 F1 | 	add	local05, #1
26d54                 | LR__3959
26d54     01 26 06 F1 | 	add	local05, #1
26d58     AC FF 9F FD | 	jmp	#LR__3958
26d5c                 | LR__3960
26d5c                 | LR__3961
26d5c     97 20 48 FB | 	callpa	#(@LR__3965-@LR__3962)>>2,fcache_load_ptr_
26d60                 | ' 			j++;
26d60                 | ' 		}
26d60                 | ' 	}
26d60                 | ' 	do {
26d60                 | LR__3962
26d60     13 29 02 F6 | 	mov	local06, local05
26d64     0F 29 02 F1 | 	add	local06, local01
26d68     08 2A 16 F2 | 	cmp	local07, #8 wc
26d6c     01 26 06 F1 | 	add	local05, #1
26d70     1C 00 90 3D |  if_ae	jmp	#LR__3963
26d74     15 25 02 F6 | 	mov	local04, local07
26d78     10 4E 05 F1 | 	add	fp, #16
26d7c     A7 24 02 F1 | 	add	local04, fp
26d80     12 2D C2 FA | 	rdbyte	local08, local04
26d84     01 2A 06 F1 | 	add	local07, #1
26d88     10 4E 85 F1 | 	sub	fp, #16
26d8c     04 00 90 FD | 	jmp	#LR__3964
26d90                 | LR__3963
26d90     20 2C 06 F6 | 	mov	local08, #32
26d94                 | LR__3964
26d94     14 2D 42 FC | 	wrbyte	local08, local06
26d98     08 26 16 F2 | 	cmp	local05, #8 wc
26d9c     C0 FF 9F CD |  if_b	jmp	#LR__3962
26da0                 | LR__3965
26da0     A7 F0 03 F6 | 	mov	ptra, fp
26da4     B2 00 A0 FD | 	call	#popregs_
26da8                 | _fatfs_cc_gen_numname_ret
26da8     2D 00 64 FD | 	ret
26dac                 | 
26dac                 | _fatfs_cc_sum_sfn
26dac     00 00 06 F6 | 	mov	_var01, #0
26db0                 | ' )
26db0                 | ' {
26db0                 | ' 	BYTE sum = 0;
26db0                 | ' 	UINT n = 11;
26db0                 | ' 
26db0                 | ' 	do {
26db0     97 12 48 FB | 	callpa	#(@LR__3972-@LR__3970)>>2,fcache_load_ptr_
26db4                 | LR__3970
26db4     0B 10 DC FC | 	rep	@LR__3973, #11
26db8                 | LR__3971
26db8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
26dbc     01 FA 45 F0 | 	shr	result1, #1
26dc0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
26dc4     07 00 66 F0 | 	shl	_var01, #7
26dc8     00 FB 01 F1 | 	add	result1, _var01
26dcc     09 01 C2 FA | 	rdbyte	_var01, arg01
26dd0     FD 00 02 F1 | 	add	_var01, result1
26dd4     01 12 06 F1 | 	add	arg01, #1
26dd8                 | LR__3972
26dd8                 | LR__3973
26dd8                 | ' 	return sum;
26dd8     00 FB 01 F6 | 	mov	result1, _var01
26ddc                 | _fatfs_cc_sum_sfn_ret
26ddc     2D 00 64 FD | 	ret
26de0                 | 
26de0                 | _fatfs_cc_dir_read
26de0     0C 4A 05 F6 | 	mov	COUNT_, #12
26de4     A8 00 A0 FD | 	call	#pushregs_
26de8     09 1F 02 F6 | 	mov	local01, arg01
26dec     0A 21 02 F6 | 	mov	local02, arg02
26df0     04 22 06 F6 | 	mov	local03, #4
26df4     0F 25 02 FB | 	rdlong	local04, local01
26df8     FF 26 06 F6 | 	mov	local05, #255
26dfc     FF 28 06 F6 | 	mov	local06, #255
26e00                 | ' )
26e00                 | ' {
26e00                 | ' 	FRESULT res = FR_NO_FILE;
26e00                 | ' 	FATFS *fs = dp->obj.fs;
26e00                 | ' 	BYTE attr, b;
26e00                 | ' 
26e00                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
26e00                 | ' 
26e00                 | ' 
26e00                 | ' 	while (dp->sect) {
26e00                 | LR__3980
26e00     18 1E 06 F1 | 	add	local01, #24
26e04     0F FB 09 FB | 	rdlong	result1, local01 wz
26e08     18 1E 86 F1 | 	sub	local01, #24
26e0c     AC 01 90 AD |  if_e	jmp	#LR__3990
26e10     18 1E 06 F1 | 	add	local01, #24
26e14     0F 15 02 FB | 	rdlong	arg02, local01
26e18     18 1E 86 F1 | 	sub	local01, #24
26e1c     12 13 02 F6 | 	mov	arg01, local04
26e20     AC ED BF FD | 	call	#_fatfs_cc_move_window
26e24     FD 22 0A F6 | 	mov	local03, result1 wz
26e28     90 01 90 5D |  if_ne	jmp	#LR__3990
26e2c     1C 1E 06 F1 | 	add	local01, #28
26e30     0F FB 01 FB | 	rdlong	result1, local01
26e34     1C 1E 86 F1 | 	sub	local01, #28
26e38     FD 2A C2 FA | 	rdbyte	local07, result1
26e3c     15 FB 01 F6 | 	mov	result1, local07
26e40     07 FA 4D F7 | 	zerox	result1, #7 wz
26e44     04 22 06 A6 |  if_e	mov	local03, #4
26e48                 | ' 			res = FR_NO_FILE; break;
26e48     70 01 90 AD |  if_e	jmp	#LR__3990
26e4c     1C 1E 06 F1 | 	add	local01, #28
26e50     0F 2D 02 FB | 	rdlong	local08, local01
26e54     0B 2C 06 F1 | 	add	local08, #11
26e58     16 2F C2 FA | 	rdbyte	local09, local08
26e5c     3F 2E 06 F5 | 	and	local09, #63
26e60     16 1E 86 F1 | 	sub	local01, #22
26e64     0F 2F 42 FC | 	wrbyte	local09, local01
26e68     06 1E 86 F1 | 	sub	local01, #6
26e6c     15 FB E1 F8 | 	getbyte	result1, local07, #0
26e70     E5 FA 0D F2 | 	cmp	result1, #229 wz
26e74     15 2D 02 56 |  if_ne	mov	local08, local07
26e78     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
26e7c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
26e80     1C 00 90 AD |  if_e	jmp	#LR__3981
26e84     00 30 06 F6 | 	mov	local10, #0
26e88     17 2D E2 F8 | 	getbyte	local08, local09, #0
26e8c     20 2C 26 F5 | 	andn	local08, #32
26e90     08 2C 0E F2 | 	cmp	local08, #8 wz
26e94     01 30 06 A6 |  if_e	mov	local10, #1
26e98     10 31 0A F2 | 	cmp	local10, local02 wz
26e9c     08 00 90 AD |  if_e	jmp	#LR__3982
26ea0                 | LR__3981
26ea0     FF 26 06 F6 | 	mov	local05, #255
26ea4     00 01 90 FD | 	jmp	#LR__3989
26ea8                 | LR__3982
26ea8     17 2F E2 F8 | 	getbyte	local09, local09, #0
26eac     0F 2E 0E F2 | 	cmp	local09, #15 wz
26eb0     B4 00 90 5D |  if_ne	jmp	#LR__3986
26eb4     15 33 E2 F8 | 	getbyte	local11, local07, #0
26eb8     40 32 CE F7 | 	test	local11, #64 wz
26ebc     30 00 90 AD |  if_e	jmp	#LR__3983
26ec0     1C 1E 06 F1 | 	add	local01, #28
26ec4     0F 33 02 FB | 	rdlong	local11, local01
26ec8     0D 32 06 F1 | 	add	local11, #13
26ecc     19 29 C2 FA | 	rdbyte	local06, local11
26ed0     15 2B E2 F8 | 	getbyte	local07, local07, #0
26ed4     BF 2A 06 F5 | 	and	local07, #191
26ed8     15 27 02 F6 | 	mov	local05, local07
26edc     0C 1E 86 F1 | 	sub	local01, #12
26ee0     0F 33 02 FB | 	rdlong	local11, local01
26ee4     1C 1E 06 F1 | 	add	local01, #28
26ee8     0F 33 62 FC | 	wrlong	local11, local01
26eec     2C 1E 86 F1 | 	sub	local01, #44
26ef0                 | LR__3983
26ef0     15 2D E2 F8 | 	getbyte	local08, local07, #0
26ef4     13 31 E2 F8 | 	getbyte	local10, local05, #0
26ef8     18 2D 0A F2 | 	cmp	local08, local10 wz
26efc     5C 00 90 5D |  if_ne	jmp	#LR__3984
26f00     14 31 E2 F8 | 	getbyte	local10, local06, #0
26f04     1C 1E 06 F1 | 	add	local01, #28
26f08     0F 2F 02 FB | 	rdlong	local09, local01
26f0c     1C 1E 86 F1 | 	sub	local01, #28
26f10     0D 2E 06 F1 | 	add	local09, #13
26f14     17 2D C2 FA | 	rdbyte	local08, local09
26f18     16 2F E2 F8 | 	getbyte	local09, local08, #0
26f1c     17 31 0A F2 | 	cmp	local10, local09 wz
26f20     38 00 90 5D |  if_ne	jmp	#LR__3984
26f24     0C 24 06 F1 | 	add	local04, #12
26f28     12 13 02 FB | 	rdlong	arg01, local04
26f2c     0C 24 86 F1 | 	sub	local04, #12
26f30     1C 1E 06 F1 | 	add	local01, #28
26f34     0F 35 02 FB | 	rdlong	local12, local01
26f38     1C 1E 86 F1 | 	sub	local01, #28
26f3c     1A 15 02 F6 | 	mov	arg02, local12
26f40     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
26f44     00 FA 4D F2 | 	cmps	result1, #0 wz
26f48     13 35 02 56 |  if_ne	mov	local12, local05
26f4c     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
26f50     01 34 86 51 |  if_ne	sub	local12, #1
26f54     1A 33 02 56 |  if_ne	mov	local11, local12
26f58     04 00 90 5D |  if_ne	jmp	#LR__3985
26f5c                 | LR__3984
26f5c     FF 32 06 F6 | 	mov	local11, #255
26f60                 | LR__3985
26f60     19 27 02 F6 | 	mov	local05, local11
26f64     40 00 90 FD | 	jmp	#LR__3988
26f68                 | LR__3986
26f68     13 33 02 F6 | 	mov	local11, local05
26f6c     07 32 4E F7 | 	zerox	local11, #7 wz
26f70     20 00 90 5D |  if_ne	jmp	#LR__3987
26f74     14 29 E2 F8 | 	getbyte	local06, local06, #0
26f78     1C 1E 06 F1 | 	add	local01, #28
26f7c     0F 13 02 FB | 	rdlong	arg01, local01
26f80     1C 1E 86 F1 | 	sub	local01, #28
26f84     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
26f88     FD FA E1 F8 | 	getbyte	result1, result1, #0
26f8c     FD 28 0A F2 | 	cmp	local06, result1 wz
26f90     28 00 90 AD |  if_e	jmp	#LR__3990
26f94                 | LR__3987
26f94     2C 1E 06 F1 | 	add	local01, #44
26f98     FF FF FF FF 
26f9c     0F FF 6B FC | 	wrlong	##-1, local01
26fa0     2C 1E 86 F1 | 	sub	local01, #44
26fa4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
26fa4                 | ' 					}
26fa4                 | ' 					break;
26fa4     14 00 90 FD | 	jmp	#LR__3990
26fa8                 | LR__3988
26fa8                 | LR__3989
26fa8     0F 13 02 F6 | 	mov	arg01, local01
26fac     00 14 06 F6 | 	mov	arg02, #0
26fb0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
26fb4     FD 22 0A F6 | 	mov	local03, result1 wz
26fb8     44 FE 9F AD |  if_e	jmp	#LR__3980
26fbc                 | LR__3990
26fbc     00 22 0E F2 | 	cmp	local03, #0 wz
26fc0     18 1E 06 51 |  if_ne	add	local01, #24
26fc4     0F 01 68 5C |  if_ne	wrlong	#0, local01
26fc8                 | ' 	return res;
26fc8     11 FB 01 F6 | 	mov	result1, local03
26fcc     A7 F0 03 F6 | 	mov	ptra, fp
26fd0     B2 00 A0 FD | 	call	#popregs_
26fd4                 | _fatfs_cc_dir_read_ret
26fd4     2D 00 64 FD | 	ret
26fd8                 | 
26fd8                 | _fatfs_cc_dir_find
26fd8     0B 4A 05 F6 | 	mov	COUNT_, #11
26fdc     A8 00 A0 FD | 	call	#pushregs_
26fe0     09 1F 02 F6 | 	mov	local01, arg01
26fe4     0F 21 02 FB | 	rdlong	local02, local01
26fe8     0F 13 02 F6 | 	mov	arg01, local01
26fec     00 14 06 F6 | 	mov	arg02, #0
26ff0     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
26ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
26ff8     18 02 90 5D |  if_ne	jmp	#LR__4012
26ffc     FF 22 06 F6 | 	mov	local03, #255
27000     FF 24 06 F6 | 	mov	local04, #255
27004     2C 1E 06 F1 | 	add	local01, #44
27008     FF FF FF FF 
2700c     0F FF 6B FC | 	wrlong	##-1, local01
27010     2C 1E 86 F1 | 	sub	local01, #44
27014                 | ' #line 2404 "ff.c"
27014                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
27014                 | ' 
27014                 | ' 	do {
27014                 | LR__4000
27014     18 1E 06 F1 | 	add	local01, #24
27018     0F 15 02 FB | 	rdlong	arg02, local01
2701c     18 1E 86 F1 | 	sub	local01, #24
27020     10 13 02 F6 | 	mov	arg01, local02
27024     A8 EB BF FD | 	call	#_fatfs_cc_move_window
27028     FD 26 0A F6 | 	mov	local05, result1 wz
2702c     E0 01 90 5D |  if_ne	jmp	#LR__4011
27030     1C 1E 06 F1 | 	add	local01, #28
27034     0F 17 02 FB | 	rdlong	arg03, local01
27038     1C 1E 86 F1 | 	sub	local01, #28
2703c     0B 29 C2 FA | 	rdbyte	local06, arg03
27040     14 17 02 F6 | 	mov	arg03, local06
27044     07 16 4E F7 | 	zerox	arg03, #7 wz
27048     04 26 06 A6 |  if_e	mov	local05, #4
2704c     C0 01 90 AD |  if_e	jmp	#LR__4011
27050     1C 1E 06 F1 | 	add	local01, #28
27054     0F 2B 02 FB | 	rdlong	local07, local01
27058     15 17 02 F6 | 	mov	arg03, local07
2705c     0B 16 06 F1 | 	add	arg03, #11
27060     0B 2D C2 FA | 	rdbyte	local08, arg03
27064     3F 2C 06 F5 | 	and	local08, #63
27068     16 1E 86 F1 | 	sub	local01, #22
2706c     0F 2D 42 FC | 	wrbyte	local08, local01
27070     06 1E 86 F1 | 	sub	local01, #6
27074     14 17 E2 F8 | 	getbyte	arg03, local06, #0
27078     E5 16 0E F2 | 	cmp	arg03, #229 wz
2707c     18 00 90 AD |  if_e	jmp	#LR__4001
27080     16 17 E2 F8 | 	getbyte	arg03, local08, #0
27084     08 16 CE F7 | 	test	arg03, #8 wz
27088     16 2B 02 56 |  if_ne	mov	local07, local08
2708c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
27090     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
27094     18 00 90 AD |  if_e	jmp	#LR__4002
27098                 | LR__4001
27098     FF 24 06 F6 | 	mov	local04, #255
2709c     2C 1E 06 F1 | 	add	local01, #44
270a0     FF FF FF FF 
270a4     0F FF 6B FC | 	wrlong	##-1, local01
270a8     2C 1E 86 F1 | 	sub	local01, #44
270ac     4C 01 90 FD | 	jmp	#LR__4010
270b0                 | LR__4002
270b0     16 2D E2 F8 | 	getbyte	local08, local08, #0
270b4     0F 2C 0E F2 | 	cmp	local08, #15 wz
270b8     C8 00 90 5D |  if_ne	jmp	#LR__4006
270bc     2B 1E 06 F1 | 	add	local01, #43
270c0     0F 2D C2 FA | 	rdbyte	local08, local01
270c4     2B 1E 86 F1 | 	sub	local01, #43
270c8     40 2C CE F7 | 	test	local08, #64 wz
270cc     2C 01 90 5D |  if_ne	jmp	#LR__4009
270d0     14 2F E2 F8 | 	getbyte	local09, local06, #0
270d4     40 2E CE F7 | 	test	local09, #64 wz
270d8     30 00 90 AD |  if_e	jmp	#LR__4003
270dc     1C 1E 06 F1 | 	add	local01, #28
270e0     0F 2F 02 FB | 	rdlong	local09, local01
270e4     0D 2E 06 F1 | 	add	local09, #13
270e8     17 23 C2 FA | 	rdbyte	local03, local09
270ec     14 29 E2 F8 | 	getbyte	local06, local06, #0
270f0     BF 28 06 F5 | 	and	local06, #191
270f4     14 25 02 F6 | 	mov	local04, local06
270f8     0C 1E 86 F1 | 	sub	local01, #12
270fc     0F 2F 02 FB | 	rdlong	local09, local01
27100     1C 1E 06 F1 | 	add	local01, #28
27104     0F 2F 62 FC | 	wrlong	local09, local01
27108     2C 1E 86 F1 | 	sub	local01, #44
2710c                 | LR__4003
2710c     14 31 E2 F8 | 	getbyte	local10, local06, #0
27110     12 2B E2 F8 | 	getbyte	local07, local04, #0
27114     15 31 0A F2 | 	cmp	local10, local07 wz
27118     5C 00 90 5D |  if_ne	jmp	#LR__4004
2711c     11 2D E2 F8 | 	getbyte	local08, local03, #0
27120     1C 1E 06 F1 | 	add	local01, #28
27124     0F 2B 02 FB | 	rdlong	local07, local01
27128     1C 1E 86 F1 | 	sub	local01, #28
2712c     0D 2A 06 F1 | 	add	local07, #13
27130     15 29 C2 FA | 	rdbyte	local06, local07
27134     14 2B E2 F8 | 	getbyte	local07, local06, #0
27138     15 2D 0A F2 | 	cmp	local08, local07 wz
2713c     38 00 90 5D |  if_ne	jmp	#LR__4004
27140     0C 20 06 F1 | 	add	local02, #12
27144     10 13 02 FB | 	rdlong	arg01, local02
27148     0C 20 86 F1 | 	sub	local02, #12
2714c     1C 1E 06 F1 | 	add	local01, #28
27150     0F 33 02 FB | 	rdlong	local11, local01
27154     1C 1E 86 F1 | 	sub	local01, #28
27158     19 15 02 F6 | 	mov	arg02, local11
2715c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
27160     00 FA 4D F2 | 	cmps	result1, #0 wz
27164     12 33 02 56 |  if_ne	mov	local11, local04
27168     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2716c     01 32 86 51 |  if_ne	sub	local11, #1
27170     19 2F 02 56 |  if_ne	mov	local09, local11
27174     04 00 90 5D |  if_ne	jmp	#LR__4005
27178                 | LR__4004
27178     FF 2E 06 F6 | 	mov	local09, #255
2717c                 | LR__4005
2717c     17 25 02 F6 | 	mov	local04, local09
27180     78 00 90 FD | 	jmp	#LR__4009
27184                 | LR__4006
27184     12 2F 02 F6 | 	mov	local09, local04
27188     07 2E 4E F7 | 	zerox	local09, #7 wz
2718c     20 00 90 5D |  if_ne	jmp	#LR__4007
27190     11 31 E2 F8 | 	getbyte	local10, local03, #0
27194     1C 1E 06 F1 | 	add	local01, #28
27198     0F 13 02 FB | 	rdlong	arg01, local01
2719c     1C 1E 86 F1 | 	sub	local01, #28
271a0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
271a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
271a8     FD 30 0A F2 | 	cmp	local10, result1 wz
271ac     60 00 90 AD |  if_e	jmp	#LR__4011
271b0                 | LR__4007
271b0     2B 1E 06 F1 | 	add	local01, #43
271b4     0F 2F C2 FA | 	rdbyte	local09, local01
271b8     2B 1E 86 F1 | 	sub	local01, #43
271bc     01 2E CE F7 | 	test	local09, #1 wz
271c0     24 00 90 5D |  if_ne	jmp	#LR__4008
271c4     1C 1E 06 F1 | 	add	local01, #28
271c8     0F 13 02 FB | 	rdlong	arg01, local01
271cc     04 1E 06 F1 | 	add	local01, #4
271d0     0F 15 02 F6 | 	mov	arg02, local01
271d4     20 1E 86 F1 | 	sub	local01, #32
271d8     0B 16 06 F6 | 	mov	arg03, #11
271dc     88 DA BF FD | 	call	#_fatfs_cc_memcmp
271e0     00 FA 0D F2 | 	cmp	result1, #0 wz
271e4     28 00 90 AD |  if_e	jmp	#LR__4011
271e8                 | LR__4008
271e8     FF 24 06 F6 | 	mov	local04, #255
271ec     2C 1E 06 F1 | 	add	local01, #44
271f0     FF FF FF FF 
271f4     0F FF 6B FC | 	wrlong	##-1, local01
271f8     2C 1E 86 F1 | 	sub	local01, #44
271fc                 | LR__4009
271fc                 | LR__4010
271fc     0F 13 02 F6 | 	mov	arg01, local01
27200     00 14 06 F6 | 	mov	arg02, #0
27204     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
27208     FD 26 0A F6 | 	mov	local05, result1 wz
2720c     04 FE 9F AD |  if_e	jmp	#LR__4000
27210                 | LR__4011
27210                 | ' 
27210                 | ' 	return res;
27210     13 FB 01 F6 | 	mov	result1, local05
27214                 | LR__4012
27214     A7 F0 03 F6 | 	mov	ptra, fp
27218     B2 00 A0 FD | 	call	#popregs_
2721c                 | _fatfs_cc_dir_find_ret
2721c     2D 00 64 FD | 	ret
27220                 | 
27220                 | _fatfs_cc_dir_register
27220     0A 4A 05 F6 | 	mov	COUNT_, #10
27224     A8 00 A0 FD | 	call	#pushregs_
27228     2C F0 07 F1 | 	add	ptra, #44
2722c     04 4E 05 F1 | 	add	fp, #4
27230     A7 12 62 FC | 	wrlong	arg01, fp
27234     09 1F 02 FB | 	rdlong	local01, arg01
27238     08 4E 05 F1 | 	add	fp, #8
2723c     A7 1E 62 FC | 	wrlong	local01, fp
27240     08 4E 85 F1 | 	sub	fp, #8
27244     A7 20 02 FB | 	rdlong	local02, fp
27248     04 4E 85 F1 | 	sub	fp, #4
2724c     2B 20 06 F1 | 	add	local02, #43
27250     10 21 C2 FA | 	rdbyte	local02, local02
27254     A0 20 CE F7 | 	test	local02, #160 wz
27258     06 FA 05 56 |  if_ne	mov	result1, #6
2725c     F8 03 90 5D |  if_ne	jmp	#LR__4035
27260                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
27260     14 4E 05 F1 | 	add	fp, #20
27264     A7 00 68 FC | 	wrlong	#0, fp
27268     14 4E 85 F1 | 	sub	fp, #20
2726c     97 28 48 FB | 	callpa	#(@LR__4021-@LR__4020)>>2,fcache_load_ptr_
27270                 | LR__4020
27270     0C 4E 05 F1 | 	add	fp, #12
27274     A7 20 02 FB | 	rdlong	local02, fp
27278     0C 20 06 F1 | 	add	local02, #12
2727c     10 23 02 FB | 	rdlong	local03, local02
27280     08 4E 05 F1 | 	add	fp, #8
27284     A7 24 02 FB | 	rdlong	local04, fp
27288     14 4E 85 F1 | 	sub	fp, #20
2728c     01 24 66 F0 | 	shl	local04, #1
27290     11 25 02 F1 | 	add	local04, local03
27294     12 21 EA FA | 	rdword	local02, local04 wz
27298     24 00 90 AD |  if_e	jmp	#LR__4022
2729c     14 4E 05 F1 | 	add	fp, #20
272a0     A7 26 02 FB | 	rdlong	local05, fp
272a4     13 29 02 F6 | 	mov	local06, local05
272a8     13 2B 02 F6 | 	mov	local07, local05
272ac     15 2D 02 F6 | 	mov	local08, local07
272b0     01 2C 06 F1 | 	add	local08, #1
272b4     A7 2C 62 FC | 	wrlong	local08, fp
272b8     14 4E 85 F1 | 	sub	fp, #20
272bc     B0 FF 9F FD | 	jmp	#LR__4020
272c0                 | LR__4021
272c0                 | LR__4022
272c0     1C 4E 05 F1 | 	add	fp, #28
272c4     A7 12 02 F6 | 	mov	arg01, fp
272c8     18 4E 85 F1 | 	sub	fp, #24
272cc     A7 14 02 FB | 	rdlong	arg02, fp
272d0     04 4E 85 F1 | 	sub	fp, #4
272d4     20 14 06 F1 | 	add	arg02, #32
272d8     0C 16 06 F6 | 	mov	arg03, #12
272dc     78 71 BF FD | 	call	#__system____builtin_memmove
272e0     27 4E 05 F1 | 	add	fp, #39
272e4     A7 2E C2 FA | 	rdbyte	local09, fp
272e8     27 4E 85 F1 | 	sub	fp, #39
272ec     01 2E CE F7 | 	test	local09, #1 wz
272f0     F4 00 90 AD |  if_e	jmp	#LR__4025
272f4     04 4E 05 F1 | 	add	fp, #4
272f8     A7 30 02 FB | 	rdlong	local10, fp
272fc     2B 30 06 F1 | 	add	local10, #43
27300     18 81 48 FC | 	wrbyte	#64, local10
27304                 | ' 		dp->fn[ 11 ] =  0x40 ;
27304                 | ' 		for (n = 1; n < 100; n++) {
27304     0C 4E 05 F1 | 	add	fp, #12
27308     A7 02 68 FC | 	wrlong	#1, fp
2730c     10 4E 85 F1 | 	sub	fp, #16
27310                 | LR__4023
27310     10 4E 05 F1 | 	add	fp, #16
27314     A7 20 02 FB | 	rdlong	local02, fp
27318     10 4E 85 F1 | 	sub	fp, #16
2731c     64 20 16 F2 | 	cmp	local02, #100 wc
27320     70 00 90 3D |  if_ae	jmp	#LR__4024
27324     04 4E 05 F1 | 	add	fp, #4
27328     A7 12 02 FB | 	rdlong	arg01, fp
2732c     20 12 06 F1 | 	add	arg01, #32
27330     18 4E 05 F1 | 	add	fp, #24
27334     A7 14 02 F6 | 	mov	arg02, fp
27338     10 4E 85 F1 | 	sub	fp, #16
2733c     A7 30 02 FB | 	rdlong	local10, fp
27340     0C 30 06 F1 | 	add	local10, #12
27344     18 17 02 FB | 	rdlong	arg03, local10
27348     04 4E 05 F1 | 	add	fp, #4
2734c     A7 18 02 FB | 	rdlong	arg04, fp
27350     10 4E 85 F1 | 	sub	fp, #16
27354     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
27358     04 4E 05 F1 | 	add	fp, #4
2735c     A7 12 02 FB | 	rdlong	arg01, fp
27360     04 4E 85 F1 | 	sub	fp, #4
27364     70 FC BF FD | 	call	#_fatfs_cc_dir_find
27368     08 4E 05 F1 | 	add	fp, #8
2736c     A7 FA 61 FC | 	wrlong	result1, fp
27370     00 FA 4D F2 | 	cmps	result1, #0 wz
27374     08 4E 85 F1 | 	sub	fp, #8
27378     18 00 90 5D |  if_ne	jmp	#LR__4024
2737c     10 4E 05 F1 | 	add	fp, #16
27380     A7 30 02 FB | 	rdlong	local10, fp
27384     01 30 06 F1 | 	add	local10, #1
27388     A7 30 62 FC | 	wrlong	local10, fp
2738c     10 4E 85 F1 | 	sub	fp, #16
27390     7C FF 9F FD | 	jmp	#LR__4023
27394                 | LR__4024
27394     10 4E 05 F1 | 	add	fp, #16
27398     A7 30 02 FB | 	rdlong	local10, fp
2739c     10 4E 85 F1 | 	sub	fp, #16
273a0     64 30 0E F2 | 	cmp	local10, #100 wz
273a4     07 FA 05 A6 |  if_e	mov	result1, #7
273a8     AC 02 90 AD |  if_e	jmp	#LR__4035
273ac     08 4E 05 F1 | 	add	fp, #8
273b0     A7 30 02 FB | 	rdlong	local10, fp
273b4     08 4E 85 F1 | 	sub	fp, #8
273b8     04 30 0E F2 | 	cmp	local10, #4 wz
273bc     08 4E 05 51 |  if_ne	add	fp, #8
273c0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
273c4     08 4E 85 51 |  if_ne	sub	fp, #8
273c8     8C 02 90 5D |  if_ne	jmp	#LR__4035
273cc     04 4E 05 F1 | 	add	fp, #4
273d0     A7 30 02 FB | 	rdlong	local10, fp
273d4     23 4E 05 F1 | 	add	fp, #35
273d8     A7 1E C2 FA | 	rdbyte	local01, fp
273dc     27 4E 85 F1 | 	sub	fp, #39
273e0     2B 30 06 F1 | 	add	local10, #43
273e4     18 1F 42 FC | 	wrbyte	local01, local10
273e8                 | LR__4025
273e8     27 4E 05 F1 | 	add	fp, #39
273ec     A7 20 C2 FA | 	rdbyte	local02, fp
273f0     27 4E 85 F1 | 	sub	fp, #39
273f4     02 20 CE F7 | 	test	local02, #2 wz
273f8     20 00 90 AD |  if_e	jmp	#LR__4026
273fc     14 4E 05 F1 | 	add	fp, #20
27400     A7 30 02 FB | 	rdlong	local10, fp
27404     0C 30 06 F1 | 	add	local10, #12
27408     0D 30 16 FD | 	qdiv	local10, #13
2740c     14 4E 85 F1 | 	sub	fp, #20
27410     18 30 62 FD | 	getqx	local10
27414     01 30 06 F1 | 	add	local10, #1
27418     04 00 90 FD | 	jmp	#LR__4027
2741c                 | LR__4026
2741c     01 30 06 F6 | 	mov	local10, #1
27420                 | LR__4027
27420     18 4E 05 F1 | 	add	fp, #24
27424     A7 30 62 FC | 	wrlong	local10, fp
27428     14 4E 85 F1 | 	sub	fp, #20
2742c     A7 12 02 FB | 	rdlong	arg01, fp
27430     18 15 02 F6 | 	mov	arg02, local10
27434     04 4E 85 F1 | 	sub	fp, #4
27438     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2743c     08 4E 05 F1 | 	add	fp, #8
27440     A7 FA 61 FC | 	wrlong	result1, fp
27444     08 4E 85 F1 | 	sub	fp, #8
27448     00 FA 0D F2 | 	cmp	result1, #0 wz
2744c     38 01 90 5D |  if_ne	jmp	#LR__4032
27450     18 4E 05 F1 | 	add	fp, #24
27454     A7 30 02 FB | 	rdlong	local10, fp
27458     01 30 8E F1 | 	sub	local10, #1 wz
2745c     A7 30 62 FC | 	wrlong	local10, fp
27460     18 4E 85 F1 | 	sub	fp, #24
27464     20 01 90 AD |  if_e	jmp	#LR__4032
27468     04 4E 05 F1 | 	add	fp, #4
2746c     A7 30 02 FB | 	rdlong	local10, fp
27470     18 13 02 F6 | 	mov	arg01, local10
27474     14 4E 05 F1 | 	add	fp, #20
27478     A7 18 02 FB | 	rdlong	arg04, fp
2747c     18 4E 85 F1 | 	sub	fp, #24
27480     05 18 66 F0 | 	shl	arg04, #5
27484     10 30 06 F1 | 	add	local10, #16
27488     18 15 02 FB | 	rdlong	arg02, local10
2748c     0C 15 82 F1 | 	sub	arg02, arg04
27490     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
27494     08 4E 05 F1 | 	add	fp, #8
27498     A7 FA 61 FC | 	wrlong	result1, fp
2749c     08 4E 85 F1 | 	sub	fp, #8
274a0     00 FA 0D F2 | 	cmp	result1, #0 wz
274a4     E0 00 90 5D |  if_ne	jmp	#LR__4031
274a8     04 4E 05 F1 | 	add	fp, #4
274ac     A7 12 02 FB | 	rdlong	arg01, fp
274b0     04 4E 85 F1 | 	sub	fp, #4
274b4     20 12 06 F1 | 	add	arg01, #32
274b8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
274bc     FD 30 02 F6 | 	mov	local10, result1
274c0     28 4E 05 F1 | 	add	fp, #40
274c4     A7 30 42 FC | 	wrbyte	local10, fp
274c8     28 4E 85 F1 | 	sub	fp, #40
274cc                 | ' 			sum = sum_sfn(dp->fn);
274cc                 | ' 			do {
274cc                 | LR__4028
274cc     0C 4E 05 F1 | 	add	fp, #12
274d0     A7 12 02 FB | 	rdlong	arg01, fp
274d4     08 4E 85 F1 | 	sub	fp, #8
274d8     A7 1E 02 FB | 	rdlong	local01, fp
274dc     04 4E 85 F1 | 	sub	fp, #4
274e0     18 1E 06 F1 | 	add	local01, #24
274e4     0F 15 02 FB | 	rdlong	arg02, local01
274e8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
274ec     08 4E 05 F1 | 	add	fp, #8
274f0     A7 FA 61 FC | 	wrlong	result1, fp
274f4     00 FA 4D F2 | 	cmps	result1, #0 wz
274f8     08 4E 85 F1 | 	sub	fp, #8
274fc     88 00 90 5D |  if_ne	jmp	#LR__4030
27500     0C 4E 05 F1 | 	add	fp, #12
27504     A7 20 02 FB | 	rdlong	local02, fp
27508     0C 20 06 F1 | 	add	local02, #12
2750c     10 13 02 FB | 	rdlong	arg01, local02
27510     08 4E 85 F1 | 	sub	fp, #8
27514     A7 1E 02 FB | 	rdlong	local01, fp
27518     1C 1E 06 F1 | 	add	local01, #28
2751c     0F 15 02 FB | 	rdlong	arg02, local01
27520     14 4E 05 F1 | 	add	fp, #20
27524     A7 16 02 FB | 	rdlong	arg03, fp
27528     10 4E 05 F1 | 	add	fp, #16
2752c     A7 18 C2 FA | 	rdbyte	arg04, fp
27530     28 4E 85 F1 | 	sub	fp, #40
27534     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
27538     0C 4E 05 F1 | 	add	fp, #12
2753c     A7 30 02 FB | 	rdlong	local10, fp
27540     03 30 06 F1 | 	add	local10, #3
27544     18 03 48 FC | 	wrbyte	#1, local10
27548     08 4E 85 F1 | 	sub	fp, #8
2754c     A7 12 02 FB | 	rdlong	arg01, fp
27550     04 4E 85 F1 | 	sub	fp, #4
27554     00 14 06 F6 | 	mov	arg02, #0
27558     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2755c     08 4E 05 F1 | 	add	fp, #8
27560     A7 FA 61 FC | 	wrlong	result1, fp
27564     00 FA 4D F2 | 	cmps	result1, #0 wz
27568     08 4E 85 F1 | 	sub	fp, #8
2756c     18 00 90 5D |  if_ne	jmp	#LR__4029
27570     18 4E 05 F1 | 	add	fp, #24
27574     A7 30 02 FB | 	rdlong	local10, fp
27578     01 30 8E F1 | 	sub	local10, #1 wz
2757c     A7 30 62 FC | 	wrlong	local10, fp
27580     18 4E 85 F1 | 	sub	fp, #24
27584     44 FF 9F 5D |  if_ne	jmp	#LR__4028
27588                 | LR__4029
27588                 | LR__4030
27588                 | LR__4031
27588                 | LR__4032
27588     08 4E 05 F1 | 	add	fp, #8
2758c     A7 30 0A FB | 	rdlong	local10, fp wz
27590     08 4E 85 F1 | 	sub	fp, #8
27594     B4 00 90 5D |  if_ne	jmp	#LR__4034
27598     0C 4E 05 F1 | 	add	fp, #12
2759c     A7 12 02 FB | 	rdlong	arg01, fp
275a0     08 4E 85 F1 | 	sub	fp, #8
275a4     A7 1E 02 FB | 	rdlong	local01, fp
275a8     04 4E 85 F1 | 	sub	fp, #4
275ac     18 1E 06 F1 | 	add	local01, #24
275b0     0F 15 02 FB | 	rdlong	arg02, local01
275b4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
275b8     08 4E 05 F1 | 	add	fp, #8
275bc     A7 FA 61 FC | 	wrlong	result1, fp
275c0     08 4E 85 F1 | 	sub	fp, #8
275c4     00 FA 0D F2 | 	cmp	result1, #0 wz
275c8     80 00 90 5D |  if_ne	jmp	#LR__4033
275cc     04 4E 05 F1 | 	add	fp, #4
275d0     A7 20 02 FB | 	rdlong	local02, fp
275d4     04 4E 85 F1 | 	sub	fp, #4
275d8     1C 20 06 F1 | 	add	local02, #28
275dc     10 13 02 FB | 	rdlong	arg01, local02
275e0     00 14 06 F6 | 	mov	arg02, #0
275e4     20 16 06 F6 | 	mov	arg03, #32
275e8     98 00 A0 FD | 	call	#\builtin_bytefill_
275ec     04 4E 05 F1 | 	add	fp, #4
275f0     A7 14 02 FB | 	rdlong	arg02, fp
275f4     0A 1F 02 F6 | 	mov	local01, arg02
275f8     1C 1E 06 F1 | 	add	local01, #28
275fc     0F 13 02 FB | 	rdlong	arg01, local01
27600     04 4E 85 F1 | 	sub	fp, #4
27604     20 14 06 F1 | 	add	arg02, #32
27608     0B 16 06 F6 | 	mov	arg03, #11
2760c     48 6E BF FD | 	call	#__system____builtin_memmove
27610     04 4E 05 F1 | 	add	fp, #4
27614     A7 2E 02 FB | 	rdlong	local09, fp
27618     17 31 02 F6 | 	mov	local10, local09
2761c     1C 30 06 F1 | 	add	local10, #28
27620     18 1F 02 FB | 	rdlong	local01, local10
27624     2B 2E 06 F1 | 	add	local09, #43
27628     17 31 C2 FA | 	rdbyte	local10, local09
2762c     18 30 06 F5 | 	and	local10, #24
27630     0C 1E 06 F1 | 	add	local01, #12
27634     0F 31 42 FC | 	wrbyte	local10, local01
27638     08 4E 05 F1 | 	add	fp, #8
2763c     A7 30 02 FB | 	rdlong	local10, fp
27640     0C 4E 85 F1 | 	sub	fp, #12
27644     03 30 06 F1 | 	add	local10, #3
27648     18 03 48 FC | 	wrbyte	#1, local10
2764c                 | LR__4033
2764c                 | LR__4034
2764c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2764c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2764c                 | ' 
2764c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2764c                 | ' 
2764c                 | ' 			fs->wflag = 1;
2764c                 | ' 		}
2764c                 | ' 	}
2764c                 | ' 
2764c                 | ' 	return res;
2764c     08 4E 05 F1 | 	add	fp, #8
27650     A7 FA 01 FB | 	rdlong	result1, fp
27654     08 4E 85 F1 | 	sub	fp, #8
27658                 | LR__4035
27658     A7 F0 03 F6 | 	mov	ptra, fp
2765c     B2 00 A0 FD | 	call	#popregs_
27660                 | _fatfs_cc_dir_register_ret
27660     2D 00 64 FD | 	ret
27664                 | 
27664                 | _fatfs_cc_dir_remove
27664     05 4A 05 F6 | 	mov	COUNT_, #5
27668     A8 00 A0 FD | 	call	#pushregs_
2766c     09 1F 02 F6 | 	mov	local01, arg01
27670     0F 21 02 FB | 	rdlong	local02, local01
27674     10 1E 06 F1 | 	add	local01, #16
27678     0F 23 02 FB | 	rdlong	local03, local01
2767c     1C 1E 06 F1 | 	add	local01, #28
27680     0F 15 02 FB | 	rdlong	arg02, local01
27684     2C 1E 86 F1 | 	sub	local01, #44
27688     FF FF 7F FF 
2768c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
27690     00 24 06 A6 |  if_e	mov	local04, #0
27694     18 00 90 AD |  if_e	jmp	#LR__4040
27698     0F 13 02 F6 | 	mov	arg01, local01
2769c     2C 1E 06 F1 | 	add	local01, #44
276a0     0F 15 02 FB | 	rdlong	arg02, local01
276a4     2C 1E 86 F1 | 	sub	local01, #44
276a8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
276ac     FD 24 02 F6 | 	mov	local04, result1
276b0                 | LR__4040
276b0     12 27 0A F6 | 	mov	local05, local04 wz
276b4     64 00 90 5D |  if_ne	jmp	#LR__4043
276b8                 | ' 		do {
276b8                 | LR__4041
276b8     18 1E 06 F1 | 	add	local01, #24
276bc     0F 15 02 FB | 	rdlong	arg02, local01
276c0     18 1E 86 F1 | 	sub	local01, #24
276c4     10 13 02 F6 | 	mov	arg01, local02
276c8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
276cc     FD 26 0A F6 | 	mov	local05, result1 wz
276d0     40 00 90 5D |  if_ne	jmp	#LR__4042
276d4     1C 1E 06 F1 | 	add	local01, #28
276d8     0F 25 02 FB | 	rdlong	local04, local01
276dc     12 CB 49 FC | 	wrbyte	#229, local04
276e0     03 20 06 F1 | 	add	local02, #3
276e4     10 03 48 FC | 	wrbyte	#1, local02
276e8     03 20 86 F1 | 	sub	local02, #3
276ec     0C 1E 86 F1 | 	sub	local01, #12
276f0     0F 25 02 FB | 	rdlong	local04, local01
276f4     10 1E 86 F1 | 	sub	local01, #16
276f8     11 25 12 F2 | 	cmp	local04, local03 wc
276fc     14 00 90 3D |  if_ae	jmp	#LR__4042
27700     0F 13 02 F6 | 	mov	arg01, local01
27704     00 14 06 F6 | 	mov	arg02, #0
27708     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2770c     FD 26 0A F6 | 	mov	local05, result1 wz
27710     A4 FF 9F AD |  if_e	jmp	#LR__4041
27714                 | LR__4042
27714     04 26 0E F2 | 	cmp	local05, #4 wz
27718     02 26 06 A6 |  if_e	mov	local05, #2
2771c                 | LR__4043
2771c                 | ' 	}
2771c                 | ' #line 2590 "ff.c"
2771c                 | ' 	return res;
2771c     13 FB 01 F6 | 	mov	result1, local05
27720     A7 F0 03 F6 | 	mov	ptra, fp
27724     B2 00 A0 FD | 	call	#popregs_
27728                 | _fatfs_cc_dir_remove_ret
27728     2D 00 64 FD | 	ret
2772c                 | 
2772c                 | _fatfs_cc_get_fileinfo
2772c     0F 4A 05 F6 | 	mov	COUNT_, #15
27730     A8 00 A0 FD | 	call	#pushregs_
27734     09 1F 02 F6 | 	mov	local01, arg01
27738     0A 21 02 F6 | 	mov	local02, arg02
2773c     0F 23 02 FB | 	rdlong	local03, local01
27740     1C 20 06 F1 | 	add	local02, #28
27744     10 01 48 FC | 	wrbyte	#0, local02
27748     1C 20 86 F1 | 	sub	local02, #28
2774c     18 1E 06 F1 | 	add	local01, #24
27750     0F 25 0A FB | 	rdlong	local04, local01 wz
27754     18 1E 86 F1 | 	sub	local01, #24
27758     90 03 90 AD |  if_e	jmp	#LR__4064
2775c     2C 1E 06 F1 | 	add	local01, #44
27760     0F 25 02 FB | 	rdlong	local04, local01
27764     2C 1E 86 F1 | 	sub	local01, #44
27768     FF FF 7F FF 
2776c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
27770     D8 00 90 AD |  if_e	jmp	#LR__4053
27774     00 26 06 F6 | 	mov	local05, #0
27778     00 28 06 F6 | 	mov	local06, #0
2777c     00 2A 06 F6 | 	mov	local07, #0
27780                 | ' 			si = di = 0;
27780                 | ' 			hs = 0;
27780                 | ' 			while (fs->lfnbuf[si] != 0) {
27780                 | LR__4050
27780     0C 22 06 F1 | 	add	local03, #12
27784     11 25 02 FB | 	rdlong	local04, local03
27788     0C 22 86 F1 | 	sub	local03, #12
2778c     14 2D 02 F6 | 	mov	local08, local06
27790     01 2C 66 F0 | 	shl	local08, #1
27794     12 2D 02 F1 | 	add	local08, local04
27798     16 25 EA FA | 	rdword	local04, local08 wz
2779c     90 00 90 AD |  if_e	jmp	#LR__4052
277a0     0C 22 06 F1 | 	add	local03, #12
277a4     11 2F 02 FB | 	rdlong	local09, local03
277a8     0C 22 86 F1 | 	sub	local03, #12
277ac     14 31 02 F6 | 	mov	local10, local06
277b0     01 30 66 F0 | 	shl	local10, #1
277b4     17 31 02 F1 | 	add	local10, local09
277b8     18 33 E2 FA | 	rdword	local11, local10
277bc     15 25 02 F6 | 	mov	local04, local07
277c0     0F 24 4E F7 | 	zerox	local04, #15 wz
277c4     01 28 06 F1 | 	add	local06, #1
277c8     24 00 90 5D |  if_ne	jmp	#LR__4051
277cc     19 35 32 F9 | 	getword	local12, local11, #0
277d0     6C 00 00 FF 
277d4     00 34 16 F2 | 	cmp	local12, ##55296 wc
277d8     14 00 90 CD |  if_b	jmp	#LR__4051
277dc     19 37 32 F9 | 	getword	local13, local11, #0
277e0     70 00 00 FF 
277e4     00 36 16 F2 | 	cmp	local13, ##57344 wc
277e8     19 2B 02 C6 |  if_b	mov	local07, local11
277ec                 | ' 					hs = wc; continue;
277ec     90 FF 9F CD |  if_b	jmp	#LR__4050
277f0                 | LR__4051
277f0     15 13 32 F9 | 	getword	arg01, local07, #0
277f4     10 12 66 F0 | 	shl	arg01, #16
277f8     19 33 32 F9 | 	getword	local11, local11, #0
277fc     19 13 42 F5 | 	or	arg01, local11
27800     13 15 02 F6 | 	mov	arg02, local05
27804     1C 20 06 F1 | 	add	local02, #28
27808     10 15 02 F1 | 	add	arg02, local02
2780c     FF 16 06 F6 | 	mov	arg03, #255
27810     13 17 82 F1 | 	sub	arg03, local05
27814     1C 20 86 F1 | 	sub	local02, #28
27818     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2781c     FD 38 0A F6 | 	mov	local14, result1 wz
27820     00 26 06 A6 |  if_e	mov	local05, #0
27824     1C 27 02 51 |  if_ne	add	local05, local14
27828     00 2A 06 56 |  if_ne	mov	local07, #0
2782c     50 FF 9F 5D |  if_ne	jmp	#LR__4050
27830                 | LR__4052
27830     15 25 02 F6 | 	mov	local04, local07
27834     0F 24 4E F7 | 	zerox	local04, #15 wz
27838     00 26 06 56 |  if_ne	mov	local05, #0
2783c     1C 20 06 F1 | 	add	local02, #28
27840     10 27 02 F1 | 	add	local05, local02
27844     13 01 48 FC | 	wrbyte	#0, local05
27848     1C 20 86 F1 | 	sub	local02, #28
2784c                 | LR__4053
2784c     00 26 06 F6 | 	mov	local05, #0
27850     00 28 06 F6 | 	mov	local06, #0
27854                 | ' 			fno->fname[di] = 0;
27854                 | ' 		}
27854                 | ' 	}
27854                 | ' 
27854                 | ' 	si = di = 0;
27854                 | ' 	while (si < 11) {
27854                 | LR__4054
27854     0B 28 16 F2 | 	cmp	local06, #11 wc
27858     20 01 90 3D |  if_ae	jmp	#LR__4057
2785c     1C 1E 06 F1 | 	add	local01, #28
27860     0F 2F 02 FB | 	rdlong	local09, local01
27864     1C 1E 86 F1 | 	sub	local01, #28
27868     14 31 02 F6 | 	mov	local10, local06
2786c     17 31 02 F1 | 	add	local10, local09
27870     18 33 C2 FA | 	rdbyte	local11, local10
27874     19 25 32 F9 | 	getword	local04, local11, #0
27878     20 24 0E F2 | 	cmp	local04, #32 wz
2787c     01 28 06 F1 | 	add	local06, #1
27880     D0 FF 9F AD |  if_e	jmp	#LR__4054
27884     19 25 32 F9 | 	getword	local04, local11, #0
27888     05 24 0E F2 | 	cmp	local04, #5 wz
2788c     E5 32 06 A6 |  if_e	mov	local11, #229
27890     09 28 0E F2 | 	cmp	local06, #9 wz
27894     20 00 90 5D |  if_ne	jmp	#LR__4055
27898     0C 26 16 F2 | 	cmp	local05, #12 wc
2789c     18 00 90 3D |  if_ae	jmp	#LR__4055
278a0     13 37 02 F6 | 	mov	local13, local05
278a4     0C 20 06 F1 | 	add	local02, #12
278a8     10 37 02 F1 | 	add	local13, local02
278ac     1B 5D 48 FC | 	wrbyte	#46, local13
278b0     01 26 06 F1 | 	add	local05, #1
278b4     0C 20 86 F1 | 	sub	local02, #12
278b8                 | LR__4055
278b8     19 13 32 F9 | 	getword	arg01, local11, #0
278bc     07 12 4E F7 | 	zerox	arg01, #7 wz
278c0     00 FA 05 56 |  if_ne	mov	result1, #0
278c4                 | ' 
278c4                 | ' 	return 0;
278c4     00 FA 05 A6 |  if_e	mov	result1, #0
278c8     00 FA 0D F2 | 	cmp	result1, #0 wz
278cc     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
278d0     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
278d4     50 00 90 AD |  if_e	jmp	#LR__4056
278d8     1C 1E 06 F1 | 	add	local01, #28
278dc     0F 31 02 FB | 	rdlong	local10, local01
278e0     1C 1E 86 F1 | 	sub	local01, #28
278e4     14 2D 02 F6 | 	mov	local08, local06
278e8     18 2D 02 F1 | 	add	local08, local10
278ec     16 13 CA FA | 	rdbyte	arg01, local08 wz
278f0     00 FA 05 56 |  if_ne	mov	result1, #0
278f4                 | ' 
278f4                 | ' 	return 0;
278f4     00 FA 05 A6 |  if_e	mov	result1, #0
278f8     00 FA 0D F2 | 	cmp	result1, #0 wz
278fc     28 00 90 AD |  if_e	jmp	#LR__4056
27900     19 33 32 F9 | 	getword	local11, local11, #0
27904     08 32 66 F0 | 	shl	local11, #8
27908     1C 1E 06 F1 | 	add	local01, #28
2790c     0F 39 02 FB | 	rdlong	local14, local01
27910     1C 1E 86 F1 | 	sub	local01, #28
27914     14 2F 02 F6 | 	mov	local09, local06
27918     1C 2F 02 F1 | 	add	local09, local14
2791c     17 35 C2 FA | 	rdbyte	local12, local09
27920     1A 33 42 F5 | 	or	local11, local12
27924     01 28 06 F1 | 	add	local06, #1
27928                 | LR__4056
27928     19 13 02 F6 | 	mov	arg01, local11
2792c     01 00 00 FF 
27930     52 15 06 F6 | 	mov	arg02, ##850
27934     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
27938     FD 32 02 F6 | 	mov	local11, result1
2793c     19 25 02 F6 | 	mov	local04, local11
27940     0F 24 4E F7 | 	zerox	local04, #15 wz
27944     00 26 06 A6 |  if_e	mov	local05, #0
27948     30 00 90 AD |  if_e	jmp	#LR__4057
2794c     19 13 32 F9 | 	getword	arg01, local11, #0
27950     13 15 02 F6 | 	mov	arg02, local05
27954     0C 20 06 F1 | 	add	local02, #12
27958     10 15 02 F1 | 	add	arg02, local02
2795c     0C 16 06 F6 | 	mov	arg03, #12
27960     13 17 82 F1 | 	sub	arg03, local05
27964     0C 20 86 F1 | 	sub	local02, #12
27968     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2796c     FD 38 0A F6 | 	mov	local14, result1 wz
27970     00 26 06 A6 |  if_e	mov	local05, #0
27974     1C 27 02 51 |  if_ne	add	local05, local14
27978     D8 FE 9F 5D |  if_ne	jmp	#LR__4054
2797c                 | LR__4057
2797c     13 25 02 F6 | 	mov	local04, local05
27980     0C 20 06 F1 | 	add	local02, #12
27984     10 25 02 F1 | 	add	local04, local02
27988     12 01 48 FC | 	wrbyte	#0, local04
2798c     10 20 06 F1 | 	add	local02, #16
27990     10 25 CA FA | 	rdbyte	local04, local02 wz
27994     1C 20 86 F1 | 	sub	local02, #28
27998     F8 00 90 5D |  if_ne	jmp	#LR__4063
2799c     00 26 0E F2 | 	cmp	local05, #0 wz
279a0     1C 00 90 5D |  if_ne	jmp	#LR__4058
279a4     13 37 02 F6 | 	mov	local13, local05
279a8     1C 20 06 F1 | 	add	local02, #28
279ac     10 37 02 F1 | 	add	local13, local02
279b0     1B 7F 48 FC | 	wrbyte	#63, local13
279b4     01 26 06 F1 | 	add	local05, #1
279b8     1C 20 86 F1 | 	sub	local02, #28
279bc     A4 00 90 FD | 	jmp	#LR__4062
279c0                 | LR__4058
279c0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
279c0     00 26 06 F6 | 	mov	local05, #0
279c4     00 28 06 F6 | 	mov	local06, #0
279c8     08 3A 06 F6 | 	mov	local15, #8
279cc                 | LR__4059
279cc     14 25 02 F6 | 	mov	local04, local06
279d0     0C 20 06 F1 | 	add	local02, #12
279d4     10 25 02 F1 | 	add	local04, local02
279d8     12 37 CA FA | 	rdbyte	local13, local04 wz
279dc     0C 20 86 F1 | 	sub	local02, #12
279e0     80 00 90 AD |  if_e	jmp	#LR__4061
279e4     14 2D 02 F6 | 	mov	local08, local06
279e8     0C 20 06 F1 | 	add	local02, #12
279ec     10 2D 02 F1 | 	add	local08, local02
279f0     16 33 C2 FA | 	rdbyte	local11, local08
279f4     19 39 32 F9 | 	getword	local14, local11, #0
279f8     2E 38 0E F2 | 	cmp	local14, #46 wz
279fc     0C 20 86 F1 | 	sub	local02, #12
27a00     10 3A 06 A6 |  if_e	mov	local15, #16
27a04     19 39 32 F9 | 	getword	local14, local11, #0
27a08     41 38 16 F2 | 	cmp	local14, #65 wc
27a0c     30 00 90 CD |  if_b	jmp	#LR__4060
27a10     19 2D 32 F9 | 	getword	local08, local11, #0
27a14     5B 2C 16 F2 | 	cmp	local08, #91 wc
27a18     24 00 90 3D |  if_ae	jmp	#LR__4060
27a1c     1C 1E 06 F1 | 	add	local01, #28
27a20     0F 2F 02 FB | 	rdlong	local09, local01
27a24     1C 1E 86 F1 | 	sub	local01, #28
27a28     0C 2E 06 F1 | 	add	local09, #12
27a2c     17 31 C2 FA | 	rdbyte	local10, local09
27a30     1D 39 E2 F8 | 	getbyte	local14, local15, #0
27a34     1C 31 CA F7 | 	test	local10, local14 wz
27a38     19 33 32 59 |  if_ne	getword	local11, local11, #0
27a3c     20 32 06 51 |  if_ne	add	local11, #32
27a40                 | LR__4060
27a40     13 39 02 F6 | 	mov	local14, local05
27a44     1C 20 06 F1 | 	add	local02, #28
27a48     10 39 02 F1 | 	add	local14, local02
27a4c     19 33 32 F9 | 	getword	local11, local11, #0
27a50     1C 33 42 FC | 	wrbyte	local11, local14
27a54     01 28 06 F1 | 	add	local06, #1
27a58     01 26 06 F1 | 	add	local05, #1
27a5c     1C 20 86 F1 | 	sub	local02, #28
27a60     68 FF 9F FD | 	jmp	#LR__4059
27a64                 | LR__4061
27a64                 | LR__4062
27a64     1C 20 06 F1 | 	add	local02, #28
27a68     10 27 02 F1 | 	add	local05, local02
27a6c     13 01 48 FC | 	wrbyte	#0, local05
27a70     1C 1E 06 F1 | 	add	local01, #28
27a74     0F 25 02 FB | 	rdlong	local04, local01
27a78     1C 1E 86 F1 | 	sub	local01, #28
27a7c     0C 24 06 F1 | 	add	local04, #12
27a80     12 37 CA FA | 	rdbyte	local13, local04 wz
27a84     1C 20 86 F1 | 	sub	local02, #28
27a88     0C 20 06 A1 |  if_e	add	local02, #12
27a8c     10 01 48 AC |  if_e	wrbyte	#0, local02
27a90     0C 20 86 A1 |  if_e	sub	local02, #12
27a94                 | LR__4063
27a94     1C 1E 06 F1 | 	add	local01, #28
27a98     0F 35 02 FB | 	rdlong	local12, local01
27a9c     0B 34 06 F1 | 	add	local12, #11
27aa0     1A 25 C2 FA | 	rdbyte	local04, local12
27aa4     3F 24 06 F5 | 	and	local04, #63
27aa8     08 20 06 F1 | 	add	local02, #8
27aac     10 25 42 FC | 	wrbyte	local04, local02
27ab0     08 20 86 F1 | 	sub	local02, #8
27ab4     0F 13 02 FB | 	rdlong	arg01, local01
27ab8     1C 12 06 F1 | 	add	arg01, #28
27abc                 | ' {
27abc                 | ' 
27abc                 | ' 	return *((DWORD*)ptr);
27abc     09 FB 01 FB | 	rdlong	result1, arg01
27ac0     10 FB 61 FC | 	wrlong	result1, local02
27ac4     0F 13 02 FB | 	rdlong	arg01, local01
27ac8     16 12 06 F1 | 	add	arg01, #22
27acc                 | ' {
27acc                 | ' 
27acc                 | ' 	return *((WORD*)ptr);
27acc     09 FB E1 FA | 	rdword	result1, arg01
27ad0     06 20 06 F1 | 	add	local02, #6
27ad4     10 FB 51 FC | 	wrword	result1, local02
27ad8     0F 13 02 FB | 	rdlong	arg01, local01
27adc     18 12 06 F1 | 	add	arg01, #24
27ae0                 | ' {
27ae0                 | ' 
27ae0                 | ' 	return *((WORD*)ptr);
27ae0     09 FB E1 FA | 	rdword	result1, arg01
27ae4     02 20 86 F1 | 	sub	local02, #2
27ae8     10 FB 51 FC | 	wrword	result1, local02
27aec                 | LR__4064
27aec     A7 F0 03 F6 | 	mov	ptra, fp
27af0     B2 00 A0 FD | 	call	#popregs_
27af4                 | _fatfs_cc_get_fileinfo_ret
27af4     2D 00 64 FD | 	ret
27af8                 | 
27af8                 | _fatfs_cc_create_name
27af8     0D 4A 05 F6 | 	mov	COUNT_, #13
27afc     A8 00 A0 FD | 	call	#pushregs_
27b00     34 F0 07 F1 | 	add	ptra, #52
27b04     04 4E 05 F1 | 	add	fp, #4
27b08     A7 12 62 FC | 	wrlong	arg01, fp
27b0c     04 4E 05 F1 | 	add	fp, #4
27b10     A7 14 62 FC | 	wrlong	arg02, fp
27b14     0A FB 01 FB | 	rdlong	result1, arg02
27b18     28 4E 05 F1 | 	add	fp, #40
27b1c     A7 FA 61 FC | 	wrlong	result1, fp
27b20     2C 4E 85 F1 | 	sub	fp, #44
27b24     A7 FA 01 FB | 	rdlong	result1, fp
27b28     FD 1E 02 FB | 	rdlong	local01, result1
27b2c     0C 1E 06 F1 | 	add	local01, #12
27b30     0F 21 02 FB | 	rdlong	local02, local01
27b34     14 4E 05 F1 | 	add	fp, #20
27b38     A7 20 62 FC | 	wrlong	local02, fp
27b3c     14 4E 05 F1 | 	add	fp, #20
27b40     A7 00 68 FC | 	wrlong	#0, fp
27b44     2C 4E 85 F1 | 	sub	fp, #44
27b48                 | ' 
27b48                 | ' 
27b48                 | ' 
27b48                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
27b48                 | ' 	for (;;) {
27b48                 | LR__4070
27b48     30 4E 05 F1 | 	add	fp, #48
27b4c     A7 12 02 F6 | 	mov	arg01, fp
27b50     30 4E 85 F1 | 	sub	fp, #48
27b54     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
27b58     1C 4E 05 F1 | 	add	fp, #28
27b5c     A7 FA 61 FC | 	wrlong	result1, fp
27b60     1C 4E 85 F1 | 	sub	fp, #28
27b64     FF FF 7F FF 
27b68     FF FB 0D F2 | 	cmp	result1, ##-1 wz
27b6c     06 FA 05 A6 |  if_e	mov	result1, #6
27b70     74 08 90 AD |  if_e	jmp	#LR__4110
27b74     1C 4E 05 F1 | 	add	fp, #28
27b78     A7 1E 02 FB | 	rdlong	local01, fp
27b7c     1C 4E 85 F1 | 	sub	fp, #28
27b80     80 00 00 FF 
27b84     00 1E 16 F2 | 	cmp	local01, ##65536 wc
27b88     3C 00 90 CD |  if_b	jmp	#LR__4071
27b8c     18 4E 05 F1 | 	add	fp, #24
27b90     A7 22 02 FB | 	rdlong	local03, fp
27b94     14 4E 05 F1 | 	add	fp, #20
27b98     A7 1E 02 FB | 	rdlong	local01, fp
27b9c     0F 25 02 F6 | 	mov	local04, local01
27ba0     01 24 06 F1 | 	add	local04, #1
27ba4     A7 24 62 FC | 	wrlong	local04, fp
27ba8     01 1E 66 F0 | 	shl	local01, #1
27bac     11 1F 02 F1 | 	add	local01, local03
27bb0     10 4E 85 F1 | 	sub	fp, #16
27bb4     A7 26 02 FB | 	rdlong	local05, fp
27bb8     1C 4E 85 F1 | 	sub	fp, #28
27bbc     13 29 02 F6 | 	mov	local06, local05
27bc0     10 28 46 F0 | 	shr	local06, #16
27bc4     0F 29 52 FC | 	wrword	local06, local01
27bc8                 | LR__4071
27bc8     1C 4E 05 F1 | 	add	fp, #28
27bcc     A7 1E 02 FB | 	rdlong	local01, fp
27bd0     08 4E 85 F1 | 	sub	fp, #8
27bd4     A7 1E 52 FC | 	wrword	local01, fp
27bd8     A7 1E E2 FA | 	rdword	local01, fp
27bdc     14 4E 85 F1 | 	sub	fp, #20
27be0     20 1E 16 F2 | 	cmp	local01, #32 wc
27be4     B0 00 90 CD |  if_b	jmp	#LR__4073
27be8     14 4E 05 F1 | 	add	fp, #20
27bec     A7 1E E2 FA | 	rdword	local01, fp
27bf0     14 4E 85 F1 | 	sub	fp, #20
27bf4     2F 1E 0E F2 | 	cmp	local01, #47 wz
27bf8     14 4E 05 51 |  if_ne	add	fp, #20
27bfc     A7 24 E2 5A |  if_ne	rdword	local04, fp
27c00     14 4E 85 51 |  if_ne	sub	fp, #20
27c04     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
27c08     8C 00 90 AD |  if_e	jmp	#LR__4073
27c0c     14 4E 05 F1 | 	add	fp, #20
27c10     A7 12 E2 FA | 	rdword	arg01, fp
27c14     14 4E 85 F1 | 	sub	fp, #20
27c18     80 12 16 F2 | 	cmp	arg01, #128 wc
27c1c     24 00 90 3D |  if_ae	jmp	#LR__4072
27c20     6D 01 00 FF 
27c24     5C 13 06 F6 | 	mov	arg01, ##@LR__4732
27c28     14 4E 05 F1 | 	add	fp, #20
27c2c     A7 14 E2 FA | 	rdword	arg02, fp
27c30     14 4E 85 F1 | 	sub	fp, #20
27c34     FC D0 BF FD | 	call	#_fatfs_cc_strchr
27c38     00 FA 0D F2 | 	cmp	result1, #0 wz
27c3c     06 FA 05 56 |  if_ne	mov	result1, #6
27c40     A4 07 90 5D |  if_ne	jmp	#LR__4110
27c44                 | LR__4072
27c44     2C 4E 05 F1 | 	add	fp, #44
27c48     A7 28 02 FB | 	rdlong	local06, fp
27c4c     2C 4E 85 F1 | 	sub	fp, #44
27c50     FF 28 16 F2 | 	cmp	local06, #255 wc
27c54     06 FA 05 36 |  if_ae	mov	result1, #6
27c58     8C 07 90 3D |  if_ae	jmp	#LR__4110
27c5c     18 4E 05 F1 | 	add	fp, #24
27c60     A7 22 02 FB | 	rdlong	local03, fp
27c64     14 4E 05 F1 | 	add	fp, #20
27c68     A7 20 02 FB | 	rdlong	local02, fp
27c6c     10 25 02 F6 | 	mov	local04, local02
27c70     01 24 06 F1 | 	add	local04, #1
27c74     A7 24 62 FC | 	wrlong	local04, fp
27c78     10 1F 02 F6 | 	mov	local01, local02
27c7c     01 1E 66 F0 | 	shl	local01, #1
27c80     11 1F 02 F1 | 	add	local01, local03
27c84     18 4E 85 F1 | 	sub	fp, #24
27c88     A7 28 E2 FA | 	rdword	local06, fp
27c8c     14 4E 85 F1 | 	sub	fp, #20
27c90     0F 29 52 FC | 	wrword	local06, local01
27c94     B0 FE 9F FD | 	jmp	#LR__4070
27c98                 | LR__4073
27c98     14 4E 05 F1 | 	add	fp, #20
27c9c     A7 2A E2 FA | 	rdword	local07, fp
27ca0     14 4E 85 F1 | 	sub	fp, #20
27ca4     20 2A 16 F2 | 	cmp	local07, #32 wc
27ca8     10 4E 05 C1 |  if_b	add	fp, #16
27cac     A7 08 48 CC |  if_b	wrbyte	#4, fp
27cb0     10 4E 85 C1 |  if_b	sub	fp, #16
27cb4     74 00 90 CD |  if_b	jmp	#LR__4078
27cb8     97 24 48 FB | 	callpa	#(@LR__4076-@LR__4074)>>2,fcache_load_ptr_
27cbc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
27cbc                 | LR__4074
27cbc     30 4E 05 F1 | 	add	fp, #48
27cc0     A7 24 02 FB | 	rdlong	local04, fp
27cc4     30 4E 85 F1 | 	sub	fp, #48
27cc8     12 2B C2 FA | 	rdbyte	local07, local04
27ccc     2F 2A 0E F2 | 	cmp	local07, #47 wz
27cd0     18 00 90 AD |  if_e	jmp	#LR__4075
27cd4     30 4E 05 F1 | 	add	fp, #48
27cd8     A7 24 02 FB | 	rdlong	local04, fp
27cdc     30 4E 85 F1 | 	sub	fp, #48
27ce0     12 21 C2 FA | 	rdbyte	local02, local04
27ce4     5C 20 0E F2 | 	cmp	local02, #92 wz
27ce8     18 00 90 5D |  if_ne	jmp	#LR__4077
27cec                 | LR__4075
27cec     30 4E 05 F1 | 	add	fp, #48
27cf0     A7 1E 02 FB | 	rdlong	local01, fp
27cf4     01 1E 06 F1 | 	add	local01, #1
27cf8     A7 1E 62 FC | 	wrlong	local01, fp
27cfc     30 4E 85 F1 | 	sub	fp, #48
27d00     B8 FF 9F FD | 	jmp	#LR__4074
27d04                 | LR__4076
27d04                 | LR__4077
27d04     10 4E 05 F1 | 	add	fp, #16
27d08     A7 00 48 FC | 	wrbyte	#0, fp
27d0c     20 4E 05 F1 | 	add	fp, #32
27d10     A7 28 02 FB | 	rdlong	local06, fp
27d14     30 4E 85 F1 | 	sub	fp, #48
27d18     14 2B C2 FA | 	rdbyte	local07, local06
27d1c     20 2A 16 F2 | 	cmp	local07, #32 wc
27d20     10 4E 05 C1 |  if_b	add	fp, #16
27d24     A7 08 48 CC |  if_b	wrbyte	#4, fp
27d28     10 4E 85 C1 |  if_b	sub	fp, #16
27d2c                 | LR__4078
27d2c     08 4E 05 F1 | 	add	fp, #8
27d30     A7 2A 02 FB | 	rdlong	local07, fp
27d34     28 4E 05 F1 | 	add	fp, #40
27d38     A7 1E 02 FB | 	rdlong	local01, fp
27d3c     30 4E 85 F1 | 	sub	fp, #48
27d40     15 1F 62 FC | 	wrlong	local01, local07
27d44     97 38 48 FB | 	callpa	#(@LR__4080-@LR__4079)>>2,fcache_load_ptr_
27d48                 | ' 	}
27d48                 | ' 	*path = p;
27d48                 | ' #line 2862 "ff.c"
27d48                 | ' 	while (di) {
27d48                 | LR__4079
27d48     2C 4E 05 F1 | 	add	fp, #44
27d4c     A7 2A 0A FB | 	rdlong	local07, fp wz
27d50     2C 4E 85 F1 | 	sub	fp, #44
27d54     60 00 90 AD |  if_e	jmp	#LR__4081
27d58     18 4E 05 F1 | 	add	fp, #24
27d5c     A7 28 02 FB | 	rdlong	local06, fp
27d60     14 4E 05 F1 | 	add	fp, #20
27d64     A7 24 02 FB | 	rdlong	local04, fp
27d68     01 24 86 F1 | 	sub	local04, #1
27d6c     01 24 66 F0 | 	shl	local04, #1
27d70     14 25 02 F1 | 	add	local04, local06
27d74     12 29 E2 FA | 	rdword	local06, local04
27d78     18 4E 85 F1 | 	sub	fp, #24
27d7c     A7 28 52 FC | 	wrword	local06, fp
27d80     A7 2A E2 FA | 	rdword	local07, fp
27d84     14 4E 85 F1 | 	sub	fp, #20
27d88     20 2A 0E F2 | 	cmp	local07, #32 wz
27d8c     14 4E 05 51 |  if_ne	add	fp, #20
27d90     A7 1E E2 5A |  if_ne	rdword	local01, fp
27d94     14 4E 85 51 |  if_ne	sub	fp, #20
27d98     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
27d9c     18 00 90 5D |  if_ne	jmp	#LR__4081
27da0     2C 4E 05 F1 | 	add	fp, #44
27da4     A7 1E 02 FB | 	rdlong	local01, fp
27da8     01 1E 86 F1 | 	sub	local01, #1
27dac     A7 1E 62 FC | 	wrlong	local01, fp
27db0     2C 4E 85 F1 | 	sub	fp, #44
27db4     90 FF 9F FD | 	jmp	#LR__4079
27db8                 | LR__4080
27db8                 | LR__4081
27db8     18 4E 05 F1 | 	add	fp, #24
27dbc     A7 2C 02 FB | 	rdlong	local08, fp
27dc0     14 4E 05 F1 | 	add	fp, #20
27dc4     A7 24 02 FB | 	rdlong	local04, fp
27dc8     01 24 66 F0 | 	shl	local04, #1
27dcc     16 25 02 F1 | 	add	local04, local08
27dd0     12 01 58 FC | 	wrword	#0, local04
27dd4     A7 2A 0A FB | 	rdlong	local07, fp wz
27dd8     2C 4E 85 F1 | 	sub	fp, #44
27ddc     06 FA 05 A6 |  if_e	mov	result1, #6
27de0     04 06 90 AD |  if_e	jmp	#LR__4110
27de4                 | ' 
27de4                 | ' 
27de4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
27de4     28 4E 05 F1 | 	add	fp, #40
27de8     A7 00 68 FC | 	wrlong	#0, fp
27dec     28 4E 85 F1 | 	sub	fp, #40
27df0     97 22 48 FB | 	callpa	#(@LR__4083-@LR__4082)>>2,fcache_load_ptr_
27df4                 | LR__4082
27df4     18 4E 05 F1 | 	add	fp, #24
27df8     A7 2E 02 FB | 	rdlong	local09, fp
27dfc     10 4E 05 F1 | 	add	fp, #16
27e00     A7 30 02 FB | 	rdlong	local10, fp
27e04     28 4E 85 F1 | 	sub	fp, #40
27e08     01 30 66 F0 | 	shl	local10, #1
27e0c     17 31 02 F1 | 	add	local10, local09
27e10     18 33 E2 FA | 	rdword	local11, local10
27e14     20 32 0E F2 | 	cmp	local11, #32 wz
27e18     1C 00 90 5D |  if_ne	jmp	#LR__4084
27e1c     28 4E 05 F1 | 	add	fp, #40
27e20     A7 34 02 FB | 	rdlong	local12, fp
27e24     1A 27 02 F6 | 	mov	local05, local12
27e28     01 26 06 F1 | 	add	local05, #1
27e2c     A7 26 62 FC | 	wrlong	local05, fp
27e30     28 4E 85 F1 | 	sub	fp, #40
27e34     BC FF 9F FD | 	jmp	#LR__4082
27e38                 | LR__4083
27e38                 | LR__4084
27e38     28 4E 05 F1 | 	add	fp, #40
27e3c     A7 2A 02 FB | 	rdlong	local07, fp
27e40     28 4E 85 F1 | 	sub	fp, #40
27e44     01 2A 16 F2 | 	cmp	local07, #1 wc
27e48     28 00 90 3D |  if_ae	jmp	#LR__4085
27e4c     18 4E 05 F1 | 	add	fp, #24
27e50     A7 22 02 FB | 	rdlong	local03, fp
27e54     10 4E 05 F1 | 	add	fp, #16
27e58     A7 2E 02 FB | 	rdlong	local09, fp
27e5c     28 4E 85 F1 | 	sub	fp, #40
27e60     01 2E 66 F0 | 	shl	local09, #1
27e64     11 2F 02 F1 | 	add	local09, local03
27e68     17 1F E2 FA | 	rdword	local01, local09
27e6c     2E 1E 0E F2 | 	cmp	local01, #46 wz
27e70     14 00 90 5D |  if_ne	jmp	#LR__4086
27e74                 | LR__4085
27e74     10 4E 05 F1 | 	add	fp, #16
27e78     A7 2A C2 FA | 	rdbyte	local07, fp
27e7c     03 2A 46 F5 | 	or	local07, #3
27e80     A7 2A 42 FC | 	wrbyte	local07, fp
27e84     10 4E 85 F1 | 	sub	fp, #16
27e88                 | LR__4086
27e88     97 2C 48 FB | 	callpa	#(@LR__4088-@LR__4087)>>2,fcache_load_ptr_
27e8c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
27e8c                 | LR__4087
27e8c     2C 4E 05 F1 | 	add	fp, #44
27e90     A7 2A 02 FB | 	rdlong	local07, fp
27e94     2C 4E 85 F1 | 	sub	fp, #44
27e98     01 2A 16 F2 | 	cmp	local07, #1 wc
27e9c     44 00 90 CD |  if_b	jmp	#LR__4089
27ea0     18 4E 05 F1 | 	add	fp, #24
27ea4     A7 28 02 FB | 	rdlong	local06, fp
27ea8     14 4E 05 F1 | 	add	fp, #20
27eac     A7 22 02 FB | 	rdlong	local03, fp
27eb0     2C 4E 85 F1 | 	sub	fp, #44
27eb4     01 22 86 F1 | 	sub	local03, #1
27eb8     01 22 66 F0 | 	shl	local03, #1
27ebc     14 23 02 F1 | 	add	local03, local06
27ec0     11 1F E2 FA | 	rdword	local01, local03
27ec4     2E 1E 0E F2 | 	cmp	local01, #46 wz
27ec8     18 00 90 AD |  if_e	jmp	#LR__4089
27ecc     2C 4E 05 F1 | 	add	fp, #44
27ed0     A7 1E 02 FB | 	rdlong	local01, fp
27ed4     01 1E 86 F1 | 	sub	local01, #1
27ed8     A7 1E 62 FC | 	wrlong	local01, fp
27edc     2C 4E 85 F1 | 	sub	fp, #44
27ee0     A8 FF 9F FD | 	jmp	#LR__4087
27ee4                 | LR__4088
27ee4                 | LR__4089
27ee4     04 4E 05 F1 | 	add	fp, #4
27ee8     A7 12 02 FB | 	rdlong	arg01, fp
27eec     04 4E 85 F1 | 	sub	fp, #4
27ef0     20 12 06 F1 | 	add	arg01, #32
27ef4     20 14 06 F6 | 	mov	arg02, #32
27ef8     0B 16 06 F6 | 	mov	arg03, #11
27efc     09 37 02 F6 | 	mov	local13, arg01
27f00     98 00 A0 FD | 	call	#\builtin_bytefill_
27f04     1B FB 01 F6 | 	mov	result1, local13
27f08     0C 4E 05 F1 | 	add	fp, #12
27f0c     A7 00 48 FC | 	wrbyte	#0, fp
27f10     A7 2A C2 FA | 	rdbyte	local07, fp
27f14     14 4E 05 F1 | 	add	fp, #20
27f18     A7 2A 62 FC | 	wrlong	local07, fp
27f1c     04 4E 05 F1 | 	add	fp, #4
27f20     A7 10 68 FC | 	wrlong	#8, fp
27f24     24 4E 85 F1 | 	sub	fp, #36
27f28                 | ' 
27f28                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
27f28                 | ' 	i = b = 0; ni = 8;
27f28                 | ' 	for (;;) {
27f28                 | LR__4090
27f28     18 4E 05 F1 | 	add	fp, #24
27f2c     A7 22 02 FB | 	rdlong	local03, fp
27f30     10 4E 05 F1 | 	add	fp, #16
27f34     A7 2E 02 FB | 	rdlong	local09, fp
27f38     17 25 02 F6 | 	mov	local04, local09
27f3c     01 24 06 F1 | 	add	local04, #1
27f40     A7 24 62 FC | 	wrlong	local04, fp
27f44     01 2E 66 F0 | 	shl	local09, #1
27f48     11 2F 02 F1 | 	add	local09, local03
27f4c     17 29 E2 FA | 	rdword	local06, local09
27f50     14 4E 85 F1 | 	sub	fp, #20
27f54     A7 28 52 FC | 	wrword	local06, fp
27f58     A7 2A EA FA | 	rdword	local07, fp wz
27f5c     14 4E 85 F1 | 	sub	fp, #20
27f60     74 03 90 AD |  if_e	jmp	#LR__4106
27f64     14 4E 05 F1 | 	add	fp, #20
27f68     A7 2A E2 FA | 	rdword	local07, fp
27f6c     14 4E 85 F1 | 	sub	fp, #20
27f70     20 2A 0E F2 | 	cmp	local07, #32 wz
27f74     30 00 90 AD |  if_e	jmp	#LR__4091
27f78     14 4E 05 F1 | 	add	fp, #20
27f7c     A7 1E E2 FA | 	rdword	local01, fp
27f80     14 4E 85 F1 | 	sub	fp, #20
27f84     2E 1E 0E F2 | 	cmp	local01, #46 wz
27f88     34 00 90 5D |  if_ne	jmp	#LR__4092
27f8c     28 4E 05 F1 | 	add	fp, #40
27f90     A7 24 02 FB | 	rdlong	local04, fp
27f94     04 4E 05 F1 | 	add	fp, #4
27f98     A7 30 02 FB | 	rdlong	local10, fp
27f9c     2C 4E 85 F1 | 	sub	fp, #44
27fa0     18 25 0A F2 | 	cmp	local04, local10 wz
27fa4     18 00 90 AD |  if_e	jmp	#LR__4092
27fa8                 | LR__4091
27fa8     10 4E 05 F1 | 	add	fp, #16
27fac     A7 2A C2 FA | 	rdbyte	local07, fp
27fb0     03 2A 46 F5 | 	or	local07, #3
27fb4     A7 2A 42 FC | 	wrbyte	local07, fp
27fb8     10 4E 85 F1 | 	sub	fp, #16
27fbc                 | ' 			cf |=  0x01  |  0x02 ;
27fbc                 | ' 			continue;
27fbc     68 FF 9F FD | 	jmp	#LR__4090
27fc0                 | LR__4092
27fc0     20 4E 05 F1 | 	add	fp, #32
27fc4     A7 2A 02 FB | 	rdlong	local07, fp
27fc8     04 4E 05 F1 | 	add	fp, #4
27fcc     A7 1E 02 FB | 	rdlong	local01, fp
27fd0     24 4E 85 F1 | 	sub	fp, #36
27fd4     0F 2B 12 F2 | 	cmp	local07, local01 wc
27fd8     1C 00 90 3D |  if_ae	jmp	#LR__4093
27fdc     28 4E 05 F1 | 	add	fp, #40
27fe0     A7 2C 02 FB | 	rdlong	local08, fp
27fe4     04 4E 05 F1 | 	add	fp, #4
27fe8     A7 30 02 FB | 	rdlong	local10, fp
27fec     2C 4E 85 F1 | 	sub	fp, #44
27ff0     18 2D 0A F2 | 	cmp	local08, local10 wz
27ff4     B0 00 90 5D |  if_ne	jmp	#LR__4095
27ff8                 | LR__4093
27ff8     24 4E 05 F1 | 	add	fp, #36
27ffc     A7 2A 02 FB | 	rdlong	local07, fp
28000     24 4E 85 F1 | 	sub	fp, #36
28004     0B 2A 0E F2 | 	cmp	local07, #11 wz
28008     18 00 90 5D |  if_ne	jmp	#LR__4094
2800c     10 4E 05 F1 | 	add	fp, #16
28010     A7 2A C2 FA | 	rdbyte	local07, fp
28014     03 2A 46 F5 | 	or	local07, #3
28018     A7 2A 42 FC | 	wrbyte	local07, fp
2801c     10 4E 85 F1 | 	sub	fp, #16
28020                 | ' 				cf |=  0x01  |  0x02 ;
28020                 | ' 				break;
28020     B4 02 90 FD | 	jmp	#LR__4106
28024                 | LR__4094
28024     28 4E 05 F1 | 	add	fp, #40
28028     A7 2A 02 FB | 	rdlong	local07, fp
2802c     04 4E 05 F1 | 	add	fp, #4
28030     A7 1E 02 FB | 	rdlong	local01, fp
28034     2C 4E 85 F1 | 	sub	fp, #44
28038     0F 2B 0A F2 | 	cmp	local07, local01 wz
2803c     10 4E 05 51 |  if_ne	add	fp, #16
28040     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28044     03 2A 46 55 |  if_ne	or	local07, #3
28048     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2804c     10 4E 85 51 |  if_ne	sub	fp, #16
28050     28 4E 05 F1 | 	add	fp, #40
28054     A7 2A 02 FB | 	rdlong	local07, fp
28058     04 4E 05 F1 | 	add	fp, #4
2805c     A7 20 02 FB | 	rdlong	local02, fp
28060     2C 4E 85 F1 | 	sub	fp, #44
28064     10 2B 1A F2 | 	cmp	local07, local02 wcz
28068     6C 02 90 1D |  if_a	jmp	#LR__4106
2806c     2C 4E 05 F1 | 	add	fp, #44
28070     A7 2A 02 FB | 	rdlong	local07, fp
28074     04 4E 85 F1 | 	sub	fp, #4
28078     A7 2A 62 FC | 	wrlong	local07, fp
2807c     08 4E 85 F1 | 	sub	fp, #8
28080     A7 10 68 FC | 	wrlong	#8, fp
28084     04 4E 05 F1 | 	add	fp, #4
28088     A7 16 68 FC | 	wrlong	#11, fp
2808c     18 4E 85 F1 | 	sub	fp, #24
28090     A7 32 C2 FA | 	rdbyte	local11, fp
28094     19 2B E2 F8 | 	getbyte	local07, local11, #0
28098     02 2A 66 F0 | 	shl	local07, #2
2809c     A7 2A 42 FC | 	wrbyte	local07, fp
280a0     0C 4E 85 F1 | 	sub	fp, #12
280a4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
280a4                 | ' 			continue;
280a4     80 FE 9F FD | 	jmp	#LR__4090
280a8                 | LR__4095
280a8     14 4E 05 F1 | 	add	fp, #20
280ac     A7 2A E2 FA | 	rdword	local07, fp
280b0     14 4E 85 F1 | 	sub	fp, #20
280b4     80 2A 16 F2 | 	cmp	local07, #128 wc
280b8     6C 00 90 CD |  if_b	jmp	#LR__4097
280bc     10 4E 05 F1 | 	add	fp, #16
280c0     A7 2A C2 FA | 	rdbyte	local07, fp
280c4     02 2A 46 F5 | 	or	local07, #2
280c8     A7 2A 42 FC | 	wrbyte	local07, fp
280cc     04 4E 05 F1 | 	add	fp, #4
280d0     A7 12 E2 FA | 	rdword	arg01, fp
280d4     14 4E 85 F1 | 	sub	fp, #20
280d8     01 00 00 FF 
280dc     52 15 06 F6 | 	mov	arg02, ##850
280e0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
280e4     14 4E 05 F1 | 	add	fp, #20
280e8     A7 FA 51 FC | 	wrword	result1, fp
280ec     A7 2A E2 FA | 	rdword	local07, fp
280f0     14 4E 85 F1 | 	sub	fp, #20
280f4     80 2A CE F7 | 	test	local07, #128 wz
280f8     2C 00 90 AD |  if_e	jmp	#LR__4096
280fc     14 4E 05 F1 | 	add	fp, #20
28100     A7 20 E2 FA | 	rdword	local02, fp
28104     7F 20 06 F5 | 	and	local02, #127
28108     01 00 00 FF 
2810c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
28110     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
28114     10 2B C2 FA | 	rdbyte	local07, local02
28118     A7 2A 52 FC | 	wrword	local07, fp
2811c     14 4E 85 F1 | 	sub	fp, #20
28120     01 00 00 FF 
28124     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
28128                 | LR__4096
28128                 | LR__4097
28128     14 4E 05 F1 | 	add	fp, #20
2812c     A7 2A E2 FA | 	rdword	local07, fp
28130     14 4E 85 F1 | 	sub	fp, #20
28134     00 2B 16 F2 | 	cmp	local07, #256 wc
28138     88 00 90 CD |  if_b	jmp	#LR__4099
2813c     24 4E 05 F1 | 	add	fp, #36
28140     A7 2A 02 FB | 	rdlong	local07, fp
28144     01 2A 86 F1 | 	sub	local07, #1
28148     04 4E 85 F1 | 	sub	fp, #4
2814c     A7 20 02 FB | 	rdlong	local02, fp
28150     20 4E 85 F1 | 	sub	fp, #32
28154     15 21 12 F2 | 	cmp	local02, local07 wc
28158     2C 00 90 CD |  if_b	jmp	#LR__4098
2815c     10 4E 05 F1 | 	add	fp, #16
28160     A7 32 C2 FA | 	rdbyte	local11, fp
28164     19 2B E2 F8 | 	getbyte	local07, local11, #0
28168     03 2A 46 F5 | 	or	local07, #3
2816c     A7 2A 42 FC | 	wrbyte	local07, fp
28170     14 4E 05 F1 | 	add	fp, #20
28174     A7 2A 02 FB | 	rdlong	local07, fp
28178     04 4E 85 F1 | 	sub	fp, #4
2817c     A7 2A 62 FC | 	wrlong	local07, fp
28180     20 4E 85 F1 | 	sub	fp, #32
28184                 | ' 				cf |=  0x01  |  0x02 ;
28184                 | ' 				i = ni; continue;
28184     A0 FD 9F FD | 	jmp	#LR__4090
28188                 | LR__4098
28188     04 4E 05 F1 | 	add	fp, #4
2818c     A7 2E 02 FB | 	rdlong	local09, fp
28190     1C 4E 05 F1 | 	add	fp, #28
28194     A7 30 02 FB | 	rdlong	local10, fp
28198     18 25 02 F6 | 	mov	local04, local10
2819c     01 24 06 F1 | 	add	local04, #1
281a0     A7 24 62 FC | 	wrlong	local04, fp
281a4     20 2E 06 F1 | 	add	local09, #32
281a8     17 31 02 F1 | 	add	local10, local09
281ac     0C 4E 85 F1 | 	sub	fp, #12
281b0     A7 22 E2 FA | 	rdword	local03, fp
281b4     14 4E 85 F1 | 	sub	fp, #20
281b8     08 22 46 F0 | 	shr	local03, #8
281bc     18 23 42 FC | 	wrbyte	local03, local10
281c0     D4 00 90 FD | 	jmp	#LR__4105
281c4                 | LR__4099
281c4     14 4E 05 F1 | 	add	fp, #20
281c8     A7 2A EA FA | 	rdword	local07, fp wz
281cc     14 4E 85 F1 | 	sub	fp, #20
281d0     20 00 90 AD |  if_e	jmp	#LR__4100
281d4     6D 01 00 FF 
281d8     65 13 06 F6 | 	mov	arg01, ##@LR__4733
281dc     14 4E 05 F1 | 	add	fp, #20
281e0     A7 14 E2 FA | 	rdword	arg02, fp
281e4     14 4E 85 F1 | 	sub	fp, #20
281e8     48 CB BF FD | 	call	#_fatfs_cc_strchr
281ec     00 FA 0D F2 | 	cmp	result1, #0 wz
281f0     20 00 90 AD |  if_e	jmp	#LR__4101
281f4                 | LR__4100
281f4     14 4E 05 F1 | 	add	fp, #20
281f8     A7 BE 58 FC | 	wrword	#95, fp
281fc     04 4E 85 F1 | 	sub	fp, #4
28200     A7 2A C2 FA | 	rdbyte	local07, fp
28204     03 2A 46 F5 | 	or	local07, #3
28208     A7 2A 42 FC | 	wrbyte	local07, fp
2820c     10 4E 85 F1 | 	sub	fp, #16
28210     84 00 90 FD | 	jmp	#LR__4104
28214                 | LR__4101
28214     14 4E 05 F1 | 	add	fp, #20
28218     A7 2A E2 FA | 	rdword	local07, fp
2821c     14 4E 85 F1 | 	sub	fp, #20
28220     41 2A 16 F2 | 	cmp	local07, #65 wc
28224     24 00 90 CD |  if_b	jmp	#LR__4102
28228     14 4E 05 F1 | 	add	fp, #20
2822c     A7 1E E2 FA | 	rdword	local01, fp
28230     14 4E 85 F1 | 	sub	fp, #20
28234     5B 1E 16 F2 | 	cmp	local01, #91 wc
28238     0C 4E 05 C1 |  if_b	add	fp, #12
2823c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
28240     02 2A 46 C5 |  if_b	or	local07, #2
28244     A7 2A 42 CC |  if_b	wrbyte	local07, fp
28248     0C 4E 85 C1 |  if_b	sub	fp, #12
2824c                 | LR__4102
2824c     14 4E 05 F1 | 	add	fp, #20
28250     A7 2A E2 FA | 	rdword	local07, fp
28254     14 4E 85 F1 | 	sub	fp, #20
28258     61 2A 16 F2 | 	cmp	local07, #97 wc
2825c     38 00 90 CD |  if_b	jmp	#LR__4103
28260     14 4E 05 F1 | 	add	fp, #20
28264     A7 1E E2 FA | 	rdword	local01, fp
28268     14 4E 85 F1 | 	sub	fp, #20
2826c     7B 1E 16 F2 | 	cmp	local01, #123 wc
28270     24 00 90 3D |  if_ae	jmp	#LR__4103
28274     0C 4E 05 F1 | 	add	fp, #12
28278     A7 2A C2 FA | 	rdbyte	local07, fp
2827c     01 2A 46 F5 | 	or	local07, #1
28280     A7 2A 42 FC | 	wrbyte	local07, fp
28284     08 4E 05 F1 | 	add	fp, #8
28288     A7 2A E2 FA | 	rdword	local07, fp
2828c     20 2A 86 F1 | 	sub	local07, #32
28290     A7 2A 52 FC | 	wrword	local07, fp
28294     14 4E 85 F1 | 	sub	fp, #20
28298                 | LR__4103
28298                 | LR__4104
28298                 | LR__4105
28298     04 4E 05 F1 | 	add	fp, #4
2829c     A7 32 02 FB | 	rdlong	local11, fp
282a0     19 2F 02 F6 | 	mov	local09, local11
282a4     1C 4E 05 F1 | 	add	fp, #28
282a8     A7 20 02 FB | 	rdlong	local02, fp
282ac     10 25 02 F6 | 	mov	local04, local02
282b0     01 24 06 F1 | 	add	local04, #1
282b4     A7 24 62 FC | 	wrlong	local04, fp
282b8     10 31 02 F6 | 	mov	local10, local02
282bc     20 2E 06 F1 | 	add	local09, #32
282c0     17 31 02 F1 | 	add	local10, local09
282c4     0C 4E 85 F1 | 	sub	fp, #12
282c8     A7 22 E2 FA | 	rdword	local03, fp
282cc     14 4E 85 F1 | 	sub	fp, #20
282d0     18 23 42 FC | 	wrbyte	local03, local10
282d4     50 FC 9F FD | 	jmp	#LR__4090
282d8                 | LR__4106
282d8     04 4E 05 F1 | 	add	fp, #4
282dc     A7 32 02 FB | 	rdlong	local11, fp
282e0     04 4E 85 F1 | 	sub	fp, #4
282e4     20 32 06 F1 | 	add	local11, #32
282e8     19 2B C2 FA | 	rdbyte	local07, local11
282ec     E5 2A 0E F2 | 	cmp	local07, #229 wz
282f0     04 4E 05 A1 |  if_e	add	fp, #4
282f4     A7 2A 02 AB |  if_e	rdlong	local07, fp
282f8     04 4E 85 A1 |  if_e	sub	fp, #4
282fc     20 2A 06 A1 |  if_e	add	local07, #32
28300     15 0B 48 AC |  if_e	wrbyte	#5, local07
28304     24 4E 05 F1 | 	add	fp, #36
28308     A7 2A 02 FB | 	rdlong	local07, fp
2830c     24 4E 85 F1 | 	sub	fp, #36
28310     08 2A 0E F2 | 	cmp	local07, #8 wz
28314     0C 4E 05 A1 |  if_e	add	fp, #12
28318     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2831c     02 2A 66 A0 |  if_e	shl	local07, #2
28320     A7 2A 42 AC |  if_e	wrbyte	local07, fp
28324     0C 4E 85 A1 |  if_e	sub	fp, #12
28328     0C 4E 05 F1 | 	add	fp, #12
2832c     A7 2A C2 FA | 	rdbyte	local07, fp
28330     0C 4E 85 F1 | 	sub	fp, #12
28334     0C 2A 06 F5 | 	and	local07, #12
28338     0C 2A 0E F2 | 	cmp	local07, #12 wz
2833c     18 00 90 AD |  if_e	jmp	#LR__4107
28340     0C 4E 05 F1 | 	add	fp, #12
28344     A7 1E C2 FA | 	rdbyte	local01, fp
28348     0C 4E 85 F1 | 	sub	fp, #12
2834c     03 1E 06 F5 | 	and	local01, #3
28350     03 1E 0E F2 | 	cmp	local01, #3 wz
28354     14 00 90 5D |  if_ne	jmp	#LR__4108
28358                 | LR__4107
28358     10 4E 05 F1 | 	add	fp, #16
2835c     A7 2A C2 FA | 	rdbyte	local07, fp
28360     02 2A 46 F5 | 	or	local07, #2
28364     A7 2A 42 FC | 	wrbyte	local07, fp
28368     10 4E 85 F1 | 	sub	fp, #16
2836c                 | LR__4108
2836c     10 4E 05 F1 | 	add	fp, #16
28370     A7 2A C2 FA | 	rdbyte	local07, fp
28374     10 4E 85 F1 | 	sub	fp, #16
28378     02 2A CE F7 | 	test	local07, #2 wz
2837c     48 00 90 5D |  if_ne	jmp	#LR__4109
28380     0C 4E 05 F1 | 	add	fp, #12
28384     A7 2A C2 FA | 	rdbyte	local07, fp
28388     0C 4E 85 F1 | 	sub	fp, #12
2838c     01 2A CE F7 | 	test	local07, #1 wz
28390     10 4E 05 51 |  if_ne	add	fp, #16
28394     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28398     10 2A 46 55 |  if_ne	or	local07, #16
2839c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
283a0     10 4E 85 51 |  if_ne	sub	fp, #16
283a4     0C 4E 05 F1 | 	add	fp, #12
283a8     A7 2A C2 FA | 	rdbyte	local07, fp
283ac     0C 4E 85 F1 | 	sub	fp, #12
283b0     04 2A CE F7 | 	test	local07, #4 wz
283b4     10 4E 05 51 |  if_ne	add	fp, #16
283b8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
283bc     08 2A 46 55 |  if_ne	or	local07, #8
283c0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
283c4     10 4E 85 51 |  if_ne	sub	fp, #16
283c8                 | LR__4109
283c8     04 4E 05 F1 | 	add	fp, #4
283cc     A7 2A 02 FB | 	rdlong	local07, fp
283d0     0C 4E 05 F1 | 	add	fp, #12
283d4     A7 1E C2 FA | 	rdbyte	local01, fp
283d8     10 4E 85 F1 | 	sub	fp, #16
283dc     2B 2A 06 F1 | 	add	local07, #43
283e0     15 1F 42 FC | 	wrbyte	local01, local07
283e4                 | ' 	}
283e4                 | ' 
283e4                 | ' 	dp->fn[ 11 ] = cf;
283e4                 | ' 
283e4                 | ' 	return FR_OK;
283e4     00 FA 05 F6 | 	mov	result1, #0
283e8                 | LR__4110
283e8     A7 F0 03 F6 | 	mov	ptra, fp
283ec     B2 00 A0 FD | 	call	#popregs_
283f0                 | _fatfs_cc_create_name_ret
283f0     2D 00 64 FD | 	ret
283f4                 | 
283f4                 | _fatfs_cc_follow_path
283f4     02 4A 05 F6 | 	mov	COUNT_, #2
283f8     A8 00 A0 FD | 	call	#pushregs_
283fc     18 F0 07 F1 | 	add	ptra, #24
28400     04 4E 05 F1 | 	add	fp, #4
28404     A7 12 62 FC | 	wrlong	arg01, fp
28408     04 4E 05 F1 | 	add	fp, #4
2840c     A7 14 62 FC | 	wrlong	arg02, fp
28410     04 4E 85 F1 | 	sub	fp, #4
28414     A7 FA 01 FB | 	rdlong	result1, fp
28418     FD 1E 02 FB | 	rdlong	local01, result1
2841c     10 4E 05 F1 | 	add	fp, #16
28420     A7 1E 62 FC | 	wrlong	local01, fp
28424     14 4E 85 F1 | 	sub	fp, #20
28428     97 24 48 FB | 	callpa	#(@LR__4122-@LR__4120)>>2,fcache_load_ptr_
2842c                 | ' )
2842c                 | ' {
2842c                 | ' 	FRESULT res;
2842c                 | ' 	BYTE ns;
2842c                 | ' 	FATFS *fs = dp->obj.fs;
2842c                 | ' #line 3034 "ff.c"
2842c                 | ' 	{
2842c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2842c                 | LR__4120
2842c     08 4E 05 F1 | 	add	fp, #8
28430     A7 1E 02 FB | 	rdlong	local01, fp
28434     08 4E 85 F1 | 	sub	fp, #8
28438     0F 1F C2 FA | 	rdbyte	local01, local01
2843c     2F 1E 0E F2 | 	cmp	local01, #47 wz
28440     18 00 90 AD |  if_e	jmp	#LR__4121
28444     08 4E 05 F1 | 	add	fp, #8
28448     A7 1E 02 FB | 	rdlong	local01, fp
2844c     08 4E 85 F1 | 	sub	fp, #8
28450     0F 1F C2 FA | 	rdbyte	local01, local01
28454     5C 1E 0E F2 | 	cmp	local01, #92 wz
28458     18 00 90 5D |  if_ne	jmp	#LR__4123
2845c                 | LR__4121
2845c     08 4E 05 F1 | 	add	fp, #8
28460     A7 1E 02 FB | 	rdlong	local01, fp
28464     01 1E 06 F1 | 	add	local01, #1
28468     A7 1E 62 FC | 	wrlong	local01, fp
2846c     08 4E 85 F1 | 	sub	fp, #8
28470     B8 FF 9F FD | 	jmp	#LR__4120
28474                 | LR__4122
28474                 | LR__4123
28474     04 4E 05 F1 | 	add	fp, #4
28478     A7 1E 02 FB | 	rdlong	local01, fp
2847c     08 1E 06 F1 | 	add	local01, #8
28480     0F 01 68 FC | 	wrlong	#0, local01
28484     04 4E 05 F1 | 	add	fp, #4
28488     A7 1E 02 FB | 	rdlong	local01, fp
2848c     08 4E 85 F1 | 	sub	fp, #8
28490     0F 1F C2 FA | 	rdbyte	local01, local01
28494     20 1E 16 F2 | 	cmp	local01, #32 wc
28498     30 00 90 3D |  if_ae	jmp	#LR__4124
2849c     04 4E 05 F1 | 	add	fp, #4
284a0     A7 1E 02 FB | 	rdlong	local01, fp
284a4     2B 1E 06 F1 | 	add	local01, #43
284a8     0F 01 49 FC | 	wrbyte	#128, local01
284ac     A7 12 02 FB | 	rdlong	arg01, fp
284b0     04 4E 85 F1 | 	sub	fp, #4
284b4     00 14 06 F6 | 	mov	arg02, #0
284b8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
284bc     0C 4E 05 F1 | 	add	fp, #12
284c0     A7 FA 61 FC | 	wrlong	result1, fp
284c4     0C 4E 85 F1 | 	sub	fp, #12
284c8     1C 01 90 FD | 	jmp	#LR__4128
284cc                 | LR__4124
284cc                 | ' 		for (;;) {
284cc                 | LR__4125
284cc     04 4E 05 F1 | 	add	fp, #4
284d0     A7 12 02 FB | 	rdlong	arg01, fp
284d4     04 4E 05 F1 | 	add	fp, #4
284d8     A7 14 02 F6 | 	mov	arg02, fp
284dc     08 4E 85 F1 | 	sub	fp, #8
284e0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
284e4     0C 4E 05 F1 | 	add	fp, #12
284e8     A7 FA 61 FC | 	wrlong	result1, fp
284ec     00 FA 4D F2 | 	cmps	result1, #0 wz
284f0     0C 4E 85 F1 | 	sub	fp, #12
284f4     F0 00 90 5D |  if_ne	jmp	#LR__4127
284f8     04 4E 05 F1 | 	add	fp, #4
284fc     A7 12 02 FB | 	rdlong	arg01, fp
28500     04 4E 85 F1 | 	sub	fp, #4
28504     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
28508     0C 4E 05 F1 | 	add	fp, #12
2850c     A7 FA 61 FC | 	wrlong	result1, fp
28510     08 4E 85 F1 | 	sub	fp, #8
28514     A7 1E 02 FB | 	rdlong	local01, fp
28518     2B 1E 06 F1 | 	add	local01, #43
2851c     0F 1F C2 FA | 	rdbyte	local01, local01
28520     0C 4E 05 F1 | 	add	fp, #12
28524     A7 1E 42 FC | 	wrbyte	local01, fp
28528     04 4E 85 F1 | 	sub	fp, #4
2852c     A7 1E 0A FB | 	rdlong	local01, fp wz
28530     0C 4E 85 F1 | 	sub	fp, #12
28534     34 00 90 AD |  if_e	jmp	#LR__4126
28538     0C 4E 05 F1 | 	add	fp, #12
2853c     A7 1E 02 FB | 	rdlong	local01, fp
28540     0C 4E 85 F1 | 	sub	fp, #12
28544     04 1E 0E F2 | 	cmp	local01, #4 wz
28548     9C 00 90 5D |  if_ne	jmp	#LR__4127
2854c     10 4E 05 F1 | 	add	fp, #16
28550     A7 1E C2 FA | 	rdbyte	local01, fp
28554     10 4E 85 F1 | 	sub	fp, #16
28558     04 1E CE F7 | 	test	local01, #4 wz
2855c     0C 4E 05 A1 |  if_e	add	fp, #12
28560     A7 0A 68 AC |  if_e	wrlong	#5, fp
28564     0C 4E 85 A1 |  if_e	sub	fp, #12
28568                 | ' 					}
28568                 | ' 				}
28568                 | ' 				break;
28568     7C 00 90 FD | 	jmp	#LR__4127
2856c                 | LR__4126
2856c     10 4E 05 F1 | 	add	fp, #16
28570     A7 1E C2 FA | 	rdbyte	local01, fp
28574     10 4E 85 F1 | 	sub	fp, #16
28578     04 1E CE F7 | 	test	local01, #4 wz
2857c     68 00 90 5D |  if_ne	jmp	#LR__4127
28580     04 4E 05 F1 | 	add	fp, #4
28584     A7 1E 02 FB | 	rdlong	local01, fp
28588     04 4E 85 F1 | 	sub	fp, #4
2858c     06 1E 06 F1 | 	add	local01, #6
28590     0F 1F C2 FA | 	rdbyte	local01, local01
28594     10 1E CE F7 | 	test	local01, #16 wz
28598     0C 4E 05 A1 |  if_e	add	fp, #12
2859c     A7 0A 68 AC |  if_e	wrlong	#5, fp
285a0     0C 4E 85 A1 |  if_e	sub	fp, #12
285a4                 | ' 				res = FR_NO_PATH; break;
285a4     40 00 90 AD |  if_e	jmp	#LR__4127
285a8     04 4E 05 F1 | 	add	fp, #4
285ac     A7 20 02 FB | 	rdlong	local02, fp
285b0     10 1F 02 F6 | 	mov	local01, local02
285b4     10 4E 05 F1 | 	add	fp, #16
285b8     A7 14 02 FB | 	rdlong	arg02, fp
285bc     0A 13 02 F6 | 	mov	arg01, arg02
285c0     34 14 06 F1 | 	add	arg02, #52
285c4     14 4E 85 F1 | 	sub	fp, #20
285c8     10 20 06 F1 | 	add	local02, #16
285cc     10 21 02 FB | 	rdlong	local02, local02
285d0     FF 21 06 F5 | 	and	local02, #511
285d4     10 15 02 F1 | 	add	arg02, local02
285d8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
285dc     08 1E 06 F1 | 	add	local01, #8
285e0     0F FB 61 FC | 	wrlong	result1, local01
285e4     E4 FE 9F FD | 	jmp	#LR__4125
285e8                 | LR__4127
285e8                 | LR__4128
285e8                 | ' 			}
285e8                 | ' #line 3090 "ff.c"
285e8                 | ' 			{
285e8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
285e8                 | ' 			}
285e8                 | ' 		}
285e8                 | ' 	}
285e8                 | ' 
285e8                 | ' 	return res;
285e8     0C 4E 05 F1 | 	add	fp, #12
285ec     A7 FA 01 FB | 	rdlong	result1, fp
285f0     0C 4E 85 F1 | 	sub	fp, #12
285f4     A7 F0 03 F6 | 	mov	ptra, fp
285f8     B2 00 A0 FD | 	call	#popregs_
285fc                 | _fatfs_cc_follow_path_ret
285fc     2D 00 64 FD | 	ret
28600                 | 
28600                 | _fatfs_cc_get_ldnumber
28600     01 00 66 F6 | 	neg	_var01, #1
28604     09 03 0A FB | 	rdlong	_var02, arg01 wz
28608     01 05 02 F6 | 	mov	_var03, _var02
2860c     01 FA 65 A6 |  if_e	neg	result1, #1
28610     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
28614     97 10 48 FB | 	callpa	#(@LR__4131-@LR__4130)>>2,fcache_load_ptr_
28618                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
28618                 | LR__4130
28618     02 07 C2 FA | 	rdbyte	_var04, _var03
2861c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
28620     20 FA 15 F2 | 	cmp	result1, #32 wc
28624     01 04 06 F1 | 	add	_var03, #1
28628     03 09 02 36 |  if_ae	mov	_var05, _var04
2862c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
28630     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
28634     E0 FF 9F 1D |  if_a	jmp	#LR__4130
28638                 | LR__4131
28638     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2863c     3A 06 0E F2 | 	cmp	_var04, #58 wz
28640     40 00 90 5D |  if_ne	jmp	#LR__4133
28644     01 0A 06 F6 | 	mov	_var06, #1
28648     01 09 C2 FA | 	rdbyte	_var05, _var02
2864c     30 08 16 F2 | 	cmp	_var05, #48 wc
28650     1C 00 90 CD |  if_b	jmp	#LR__4132
28654     01 09 C2 FA | 	rdbyte	_var05, _var02
28658     3A 08 16 F2 | 	cmp	_var05, #58 wc
2865c     01 0D 02 C6 |  if_b	mov	_var07, _var02
28660     02 0C 06 C1 |  if_b	add	_var07, #2
28664     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
28668     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2866c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
28670                 | LR__4132
28670     01 0A 56 F2 | 	cmps	_var06, #1 wc
28674     05 01 02 C6 |  if_b	mov	_var01, _var06
28678     09 05 62 CC |  if_b	wrlong	_var03, arg01
2867c                 | ' 			vol = i;
2867c                 | ' 			*path = tt;
2867c                 | ' 		}
2867c                 | ' 		return vol;
2867c     00 FB 01 F6 | 	mov	result1, _var01
28680     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
28684                 | LR__4133
28684                 | ' 	}
28684                 | ' #line 3170 "ff.c"
28684                 | ' 	vol = 0;
28684                 | ' 
28684                 | ' 	return vol;
28684     00 FA 05 F6 | 	mov	result1, #0
28688                 | _fatfs_cc_get_ldnumber_ret
28688     2D 00 64 FD | 	ret
2868c                 | 
2868c                 | _fatfs_cc_check_fs
2868c     04 4A 05 F6 | 	mov	COUNT_, #4
28690     A8 00 A0 FD | 	call	#pushregs_
28694     09 1F 02 F6 | 	mov	local01, arg01
28698     03 1E 06 F1 | 	add	local01, #3
2869c     0F 01 48 FC | 	wrbyte	#0, local01
286a0     2D 1E 06 F1 | 	add	local01, #45
286a4     FF FF FF FF 
286a8     0F FF 6B FC | 	wrlong	##-1, local01
286ac     30 1E 86 F1 | 	sub	local01, #48
286b0     0F 13 02 F6 | 	mov	arg01, local01
286b4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
286b8     00 FA 0D F2 | 	cmp	result1, #0 wz
286bc     04 FA 05 56 |  if_ne	mov	result1, #4
286c0     94 01 90 5D |  if_ne	jmp	#LR__4144
286c4     34 1E 06 F1 | 	add	local01, #52
286c8     0F 13 02 F6 | 	mov	arg01, local01
286cc     FE 13 06 F1 | 	add	arg01, #510
286d0                 | ' {
286d0                 | ' 
286d0                 | ' 	return *((WORD*)ptr);
286d0     09 21 E2 FA | 	rdword	local02, arg01
286d4     0F 23 C2 FA | 	rdbyte	local03, local01
286d8     34 1E 86 F1 | 	sub	local01, #52
286dc     11 25 E2 F8 | 	getbyte	local04, local03, #0
286e0     EB 24 0E F2 | 	cmp	local04, #235 wz
286e4     11 17 02 56 |  if_ne	mov	arg03, local03
286e8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
286ec     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
286f0     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
286f4     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
286f8     44 01 90 5D |  if_ne	jmp	#LR__4143
286fc     10 25 32 F9 | 	getword	local04, local02, #0
28700     55 00 00 FF 
28704     55 24 0E F2 | 	cmp	local04, ##43605 wz
28708     2C 00 90 5D |  if_ne	jmp	#LR__4140
2870c     34 1E 06 F1 | 	add	local01, #52
28710     0F 13 02 F6 | 	mov	arg01, local01
28714     34 1E 86 F1 | 	sub	local01, #52
28718     52 12 06 F1 | 	add	arg01, #82
2871c     6D 01 00 FF 
28720     6C 15 06 F6 | 	mov	arg02, ##@LR__4734
28724     08 16 06 F6 | 	mov	arg03, #8
28728     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2872c     00 FA 0D F2 | 	cmp	result1, #0 wz
28730                 | ' 			return 0;
28730     00 FA 05 A6 |  if_e	mov	result1, #0
28734     20 01 90 AD |  if_e	jmp	#LR__4144
28738                 | LR__4140
28738     34 1E 06 F1 | 	add	local01, #52
2873c     0F 13 02 F6 | 	mov	arg01, local01
28740     0B 12 06 F1 | 	add	arg01, #11
28744                 | ' {
28744                 | ' 
28744                 | ' 	return *((WORD*)ptr);
28744     09 FB E1 FA | 	rdword	result1, arg01
28748     0D 1E 06 F1 | 	add	local01, #13
2874c     0F 23 C2 FA | 	rdbyte	local03, local01
28750     41 1E 86 F1 | 	sub	local01, #65
28754     FD 24 32 F9 | 	getword	local04, result1, #0
28758     FD 14 32 F9 | 	getword	arg02, result1, #0
2875c     01 14 86 F1 | 	sub	arg02, #1
28760     0A 25 CA F7 | 	test	local04, arg02 wz
28764     D8 00 90 5D |  if_ne	jmp	#LR__4142
28768     FD 14 32 F9 | 	getword	arg02, result1, #0
2876c     01 00 00 FF 
28770     00 14 16 F2 | 	cmp	arg02, ##512 wc
28774     C8 00 90 CD |  if_b	jmp	#LR__4142
28778     FD 14 32 F9 | 	getword	arg02, result1, #0
2877c     01 00 00 FF 
28780     01 14 16 F2 | 	cmp	arg02, ##513 wc
28784     B8 00 90 3D |  if_ae	jmp	#LR__4142
28788     11 13 02 F6 | 	mov	arg01, local03
2878c     07 12 4E F7 | 	zerox	arg01, #7 wz
28790     AC 00 90 AD |  if_e	jmp	#LR__4142
28794     11 13 E2 F8 | 	getbyte	arg01, local03, #0
28798     11 23 E2 F8 | 	getbyte	local03, local03, #0
2879c     01 22 86 F1 | 	sub	local03, #1
287a0     11 13 CA F7 | 	test	arg01, local03 wz
287a4     98 00 90 5D |  if_ne	jmp	#LR__4142
287a8     34 1E 06 F1 | 	add	local01, #52
287ac     0F 13 02 F6 | 	mov	arg01, local01
287b0     34 1E 86 F1 | 	sub	local01, #52
287b4     0E 12 06 F1 | 	add	arg01, #14
287b8                 | ' {
287b8                 | ' 
287b8                 | ' 	return *((WORD*)ptr);
287b8     09 FB E9 FA | 	rdword	result1, arg01 wz
287bc     80 00 90 AD |  if_e	jmp	#LR__4142
287c0     44 1E 06 F1 | 	add	local01, #68
287c4     0F 13 C2 FA | 	rdbyte	arg01, local01
287c8     44 1E 86 F1 | 	sub	local01, #68
287cc     01 12 86 F1 | 	sub	arg01, #1
287d0     02 12 16 F2 | 	cmp	arg01, #2 wc
287d4     68 00 90 3D |  if_ae	jmp	#LR__4142
287d8     34 1E 06 F1 | 	add	local01, #52
287dc     0F 13 02 F6 | 	mov	arg01, local01
287e0     34 1E 86 F1 | 	sub	local01, #52
287e4     11 12 06 F1 | 	add	arg01, #17
287e8                 | ' {
287e8                 | ' 
287e8                 | ' 	return *((WORD*)ptr);
287e8     09 FB E9 FA | 	rdword	result1, arg01 wz
287ec     50 00 90 AD |  if_e	jmp	#LR__4142
287f0     34 1E 06 F1 | 	add	local01, #52
287f4     0F 13 02 F6 | 	mov	arg01, local01
287f8     34 1E 86 F1 | 	sub	local01, #52
287fc     13 12 06 F1 | 	add	arg01, #19
28800                 | ' {
28800                 | ' 
28800                 | ' 	return *((WORD*)ptr);
28800     09 FB E1 FA | 	rdword	result1, arg01
28804     FD 22 32 F9 | 	getword	local03, result1, #0
28808     80 22 16 F2 | 	cmp	local03, #128 wc
2880c     20 00 90 3D |  if_ae	jmp	#LR__4141
28810     34 1E 06 F1 | 	add	local01, #52
28814     0F 13 02 F6 | 	mov	arg01, local01
28818     34 1E 86 F1 | 	sub	local01, #52
2881c     20 12 06 F1 | 	add	arg01, #32
28820                 | ' {
28820                 | ' 
28820                 | ' 	return *((DWORD*)ptr);
28820     09 FB 01 FB | 	rdlong	result1, arg01
28824     80 00 00 FF 
28828     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2882c     10 00 90 CD |  if_b	jmp	#LR__4142
28830                 | LR__4141
28830     4A 1E 06 F1 | 	add	local01, #74
28834                 | ' {
28834                 | ' 
28834                 | ' 	return *((WORD*)ptr);
28834     0F FB E9 FA | 	rdword	result1, local01 wz
28838                 | ' 			&& b != 0 && (b & (b - 1)) == 0
28838                 | ' 			&& ld_word(fs->win +  14 ) != 0
28838                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
28838                 | ' 			&& ld_word(fs->win +  17 ) != 0
28838                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
28838                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
28838                 | ' 				return 0;
28838     00 FA 05 56 |  if_ne	mov	result1, #0
2883c     18 00 90 5D |  if_ne	jmp	#LR__4144
28840                 | LR__4142
28840                 | LR__4143
28840                 | ' 		}
28840                 | ' 	}
28840                 | ' 	return sign == 0xAA55 ? 2 : 3;
28840     10 23 32 F9 | 	getword	local03, local02, #0
28844     55 00 00 FF 
28848     55 22 0E F2 | 	cmp	local03, ##43605 wz
2884c     02 24 06 A6 |  if_e	mov	local04, #2
28850     03 24 06 56 |  if_ne	mov	local04, #3
28854     12 FB 01 F6 | 	mov	result1, local04
28858                 | LR__4144
28858     A7 F0 03 F6 | 	mov	ptra, fp
2885c     B2 00 A0 FD | 	call	#popregs_
28860                 | _fatfs_cc_check_fs_ret
28860     2D 00 64 FD | 	ret
28864                 | 
28864                 | _fatfs_cc_find_volume
28864     05 4A 05 F6 | 	mov	COUNT_, #5
28868     A8 00 A0 FD | 	call	#pushregs_
2886c     24 F0 07 F1 | 	add	ptra, #36
28870     09 1F 02 F6 | 	mov	local01, arg01
28874     0A 21 02 F6 | 	mov	local02, arg02
28878     0F 13 02 F6 | 	mov	arg01, local01
2887c     00 14 06 F6 | 	mov	arg02, #0
28880     08 FE BF FD | 	call	#_fatfs_cc_check_fs
28884     02 FA 0D F2 | 	cmp	result1, #2 wz
28888     0C 00 90 AD |  if_e	jmp	#LR__4150
2888c     03 FA 15 F2 | 	cmp	result1, #3 wc
28890     00 20 0E C2 |  if_b	cmp	local02, #0 wz
28894     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4158
28898                 | LR__4150
28898                 | ' 	for (i = 0; i < 4; i++) {
28898     00 22 06 F6 | 	mov	local03, #0
2889c     97 26 48 FB | 	callpa	#(@LR__4152-@LR__4151)>>2,fcache_load_ptr_
288a0                 | LR__4151
288a0     04 22 16 F2 | 	cmp	local03, #4 wc
288a4     44 00 90 3D |  if_ae	jmp	#LR__4153
288a8     11 25 02 F6 | 	mov	local04, local03
288ac     02 24 66 F0 | 	shl	local04, #2
288b0     14 4E 05 F1 | 	add	fp, #20
288b4     A7 24 02 F1 | 	add	local04, fp
288b8     34 1E 06 F1 | 	add	local01, #52
288bc     0F 13 02 F6 | 	mov	arg01, local01
288c0     34 1E 86 F1 | 	sub	local01, #52
288c4     BE 13 06 F1 | 	add	arg01, #446
288c8     11 15 02 F6 | 	mov	arg02, local03
288cc     04 14 66 F0 | 	shl	arg02, #4
288d0     0A 13 02 F1 | 	add	arg01, arg02
288d4     08 12 06 F1 | 	add	arg01, #8
288d8                 | ' {
288d8                 | ' 
288d8                 | ' 	return *((DWORD*)ptr);
288d8     09 FB 01 FB | 	rdlong	result1, arg01
288dc     14 4E 85 F1 | 	sub	fp, #20
288e0     12 FB 61 FC | 	wrlong	result1, local04
288e4     01 22 06 F1 | 	add	local03, #1
288e8     B4 FF 9F FD | 	jmp	#LR__4151
288ec                 | LR__4152
288ec                 | LR__4153
288ec     00 20 0E F2 | 	cmp	local02, #0 wz
288f0     10 25 02 56 |  if_ne	mov	local04, local02
288f4     01 24 86 51 |  if_ne	sub	local04, #1
288f8     00 24 06 A6 |  if_e	mov	local04, #0
288fc     12 23 02 F6 | 	mov	local03, local04
28900                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
28900                 | ' 	}
28900                 | ' 	i = part ? part - 1 : 0;
28900                 | ' 	do {
28900                 | LR__4154
28900     11 25 02 F6 | 	mov	local04, local03
28904     02 24 66 F0 | 	shl	local04, #2
28908     14 4E 05 F1 | 	add	fp, #20
2890c     A7 24 02 F1 | 	add	local04, fp
28910     12 25 0A FB | 	rdlong	local04, local04 wz
28914     14 4E 85 F1 | 	sub	fp, #20
28918     28 00 90 AD |  if_e	jmp	#LR__4155
2891c     11 25 02 F6 | 	mov	local04, local03
28920     02 24 66 F0 | 	shl	local04, #2
28924     14 4E 05 F1 | 	add	fp, #20
28928     A7 24 02 F1 | 	add	local04, fp
2892c     12 15 02 FB | 	rdlong	arg02, local04
28930     0F 13 02 F6 | 	mov	arg01, local01
28934     14 4E 85 F1 | 	sub	fp, #20
28938     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2893c     FD 24 02 F6 | 	mov	local04, result1
28940     04 00 90 FD | 	jmp	#LR__4156
28944                 | LR__4155
28944     03 24 06 F6 | 	mov	local04, #3
28948                 | LR__4156
28948     12 27 02 F6 | 	mov	local05, local04
2894c     00 20 0E F2 | 	cmp	local02, #0 wz
28950     02 26 16 A2 |  if_e	cmp	local05, #2 wc
28954     0C 00 90 8D |  if_c_and_z	jmp	#LR__4157
28958     01 22 06 A1 |  if_e	add	local03, #1
2895c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
28960     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4154
28964                 | LR__4157
28964                 | ' 	return fmt;
28964     13 FB 01 F6 | 	mov	result1, local05
28968                 | LR__4158
28968     A7 F0 03 F6 | 	mov	ptra, fp
2896c     B2 00 A0 FD | 	call	#popregs_
28970                 | _fatfs_cc_find_volume_ret
28970     2D 00 64 FD | 	ret
28974                 | 
28974                 | _fatfs_cc_mount_volume
28974     0B 4A 05 F6 | 	mov	COUNT_, #11
28978     A8 00 A0 FD | 	call	#pushregs_
2897c     0A 1F 02 F6 | 	mov	local01, arg02
28980     0B 21 02 F6 | 	mov	local02, arg03
28984     0F 01 68 FC | 	wrlong	#0, local01
28988     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2898c     FD 22 02 F6 | 	mov	local03, result1
28990     00 22 56 F2 | 	cmps	local03, #0 wc
28994     0B FA 05 C6 |  if_b	mov	result1, #11
28998     3C 05 90 CD |  if_b	jmp	#LR__4170
2899c     11 17 02 F6 | 	mov	arg03, local03
289a0     02 16 66 F0 | 	shl	arg03, #2
289a4     F2 16 02 F1 | 	add	arg03, objptr
289a8     0B 25 0A FB | 	rdlong	local04, arg03 wz
289ac     0C FA 05 A6 |  if_e	mov	result1, #12
289b0     24 05 90 AD |  if_e	jmp	#LR__4170
289b4     0F 25 62 FC | 	wrlong	local04, local01
289b8     10 21 E2 F8 | 	getbyte	local02, local02, #0
289bc     FE 20 06 F5 | 	and	local02, #254
289c0     12 17 CA FA | 	rdbyte	arg03, local04 wz
289c4     4C 00 90 AD |  if_e	jmp	#LR__4161
289c8     01 24 06 F1 | 	add	local04, #1
289cc     12 13 CA FA | 	rdbyte	arg01, local04 wz
289d0     01 24 86 F1 | 	sub	local04, #1
289d4     01 FA 05 56 |  if_ne	mov	result1, #1
289d8                 | ' 
289d8                 | ' 	return Stat;
289d8     01 00 00 AF 
289dc     20 E4 05 A1 |  if_e	add	objptr, ##544
289e0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
289e4     01 00 00 AF 
289e8     20 E4 85 A1 |  if_e	sub	objptr, ##544
289ec     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
289f0     01 16 CE F7 | 	test	arg03, #1 wz
289f4     1C 00 90 5D |  if_ne	jmp	#LR__4160
289f8     00 20 0E F2 | 	cmp	local02, #0 wz
289fc     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
28a00     04 FA CD 57 |  if_ne	test	result1, #4 wz
28a04                 | ' 				return FR_WRITE_PROTECTED;
28a04     0A FA 05 56 |  if_ne	mov	result1, #10
28a08     CC 04 90 5D |  if_ne	jmp	#LR__4170
28a0c                 | ' 			}
28a0c                 | ' 			return FR_OK;
28a0c     00 FA 05 F6 | 	mov	result1, #0
28a10     C4 04 90 FD | 	jmp	#LR__4170
28a14                 | LR__4160
28a14                 | LR__4161
28a14     12 01 48 FC | 	wrbyte	#0, local04
28a18     01 24 06 F1 | 	add	local04, #1
28a1c     12 23 42 FC | 	wrbyte	local03, local04
28a20     12 13 C2 FA | 	rdbyte	arg01, local04
28a24     01 24 86 F1 | 	sub	local04, #1
28a28     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
28a2c     FD 16 02 F6 | 	mov	arg03, result1
28a30     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
28a34     01 26 CE F7 | 	test	local05, #1 wz
28a38                 | ' 		return FR_NOT_READY;
28a38     03 FA 05 56 |  if_ne	mov	result1, #3
28a3c     98 04 90 5D |  if_ne	jmp	#LR__4170
28a40     00 20 0E F2 | 	cmp	local02, #0 wz
28a44     0B 27 02 56 |  if_ne	mov	local05, arg03
28a48     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
28a4c     04 26 CE 57 |  if_ne	test	local05, #4 wz
28a50                 | ' 		return FR_WRITE_PROTECTED;
28a50     0A FA 05 56 |  if_ne	mov	result1, #10
28a54     80 04 90 5D |  if_ne	jmp	#LR__4170
28a58     12 13 02 F6 | 	mov	arg01, local04
28a5c     00 14 06 F6 | 	mov	arg02, #0
28a60     00 FE BF FD | 	call	#_fatfs_cc_find_volume
28a64     FD 12 02 F6 | 	mov	arg01, result1
28a68     04 12 0E F2 | 	cmp	arg01, #4 wz
28a6c     01 FA 05 A6 |  if_e	mov	result1, #1
28a70     64 04 90 AD |  if_e	jmp	#LR__4170
28a74     02 12 16 F2 | 	cmp	arg01, #2 wc
28a78     0D FA 05 36 |  if_ae	mov	result1, #13
28a7c     58 04 90 3D |  if_ae	jmp	#LR__4170
28a80     30 24 06 F1 | 	add	local04, #48
28a84     12 29 02 FB | 	rdlong	local06, local04
28a88     04 24 06 F1 | 	add	local04, #4
28a8c     12 13 02 F6 | 	mov	arg01, local04
28a90     34 24 86 F1 | 	sub	local04, #52
28a94     0B 12 06 F1 | 	add	arg01, #11
28a98                 | ' {
28a98                 | ' 
28a98                 | ' 	return *((WORD*)ptr);
28a98     09 FB E1 FA | 	rdword	result1, arg01
28a9c     01 00 00 FF 
28aa0     00 FA 0D F2 | 	cmp	result1, ##512 wz
28aa4     0D FA 05 56 |  if_ne	mov	result1, #13
28aa8     2C 04 90 5D |  if_ne	jmp	#LR__4170
28aac     34 24 06 F1 | 	add	local04, #52
28ab0     12 13 02 F6 | 	mov	arg01, local04
28ab4     34 24 86 F1 | 	sub	local04, #52
28ab8     16 12 06 F1 | 	add	arg01, #22
28abc                 | ' {
28abc                 | ' 
28abc                 | ' 	return *((WORD*)ptr);
28abc     09 FB E1 FA | 	rdword	result1, arg01
28ac0     FD 2A 0A F6 | 	mov	local07, result1 wz
28ac4     18 00 90 5D |  if_ne	jmp	#LR__4162
28ac8     34 24 06 F1 | 	add	local04, #52
28acc     12 13 02 F6 | 	mov	arg01, local04
28ad0     34 24 86 F1 | 	sub	local04, #52
28ad4     24 12 06 F1 | 	add	arg01, #36
28ad8                 | ' {
28ad8                 | ' 
28ad8                 | ' 	return *((DWORD*)ptr);
28ad8     09 FB 01 FB | 	rdlong	result1, arg01
28adc     FD 2A 02 F6 | 	mov	local07, result1
28ae0                 | LR__4162
28ae0     1C 24 06 F1 | 	add	local04, #28
28ae4     12 2B 62 FC | 	wrlong	local07, local04
28ae8     28 24 06 F1 | 	add	local04, #40
28aec     12 27 C2 FA | 	rdbyte	local05, local04
28af0     42 24 86 F1 | 	sub	local04, #66
28af4     12 27 42 FC | 	wrbyte	local05, local04
28af8     12 27 C2 FA | 	rdbyte	local05, local04
28afc     02 24 86 F1 | 	sub	local04, #2
28b00     01 26 0E F2 | 	cmp	local05, #1 wz
28b04     02 24 06 51 |  if_ne	add	local04, #2
28b08     12 27 C2 5A |  if_ne	rdbyte	local05, local04
28b0c     02 24 86 51 |  if_ne	sub	local04, #2
28b10     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
28b14     0D FA 05 56 |  if_ne	mov	result1, #13
28b18     BC 03 90 5D |  if_ne	jmp	#LR__4170
28b1c     02 24 06 F1 | 	add	local04, #2
28b20     12 27 C2 FA | 	rdbyte	local05, local04
28b24     13 2B 02 FD | 	qmul	local07, local05
28b28     3F 24 06 F1 | 	add	local04, #63
28b2c     12 27 C2 FA | 	rdbyte	local05, local04
28b30     37 24 86 F1 | 	sub	local04, #55
28b34     12 27 52 FC | 	wrword	local05, local04
28b38     12 27 EA FA | 	rdword	local05, local04 wz
28b3c     0A 24 86 F1 | 	sub	local04, #10
28b40     18 2A 62 FD | 	getqx	local07
28b44     20 00 90 AD |  if_e	jmp	#LR__4163
28b48     0A 24 06 F1 | 	add	local04, #10
28b4c     12 27 E2 FA | 	rdword	local05, local04
28b50     13 23 32 F9 | 	getword	local03, local05, #0
28b54     0A 24 86 F1 | 	sub	local04, #10
28b58     13 27 32 F9 | 	getword	local05, local05, #0
28b5c     01 26 86 F1 | 	sub	local05, #1
28b60     13 23 CA F7 | 	test	local03, local05 wz
28b64     08 00 90 AD |  if_e	jmp	#LR__4164
28b68                 | LR__4163
28b68     0D FA 05 F6 | 	mov	result1, #13
28b6c     68 03 90 FD | 	jmp	#LR__4170
28b70                 | LR__4164
28b70     34 24 06 F1 | 	add	local04, #52
28b74     12 13 02 F6 | 	mov	arg01, local04
28b78     11 12 06 F1 | 	add	arg01, #17
28b7c                 | ' {
28b7c                 | ' 
28b7c                 | ' 	return *((WORD*)ptr);
28b7c     09 FB E1 FA | 	rdword	result1, arg01
28b80     2C 24 86 F1 | 	sub	local04, #44
28b84     12 FB 51 FC | 	wrword	result1, local04
28b88     12 27 E2 FA | 	rdword	local05, local04
28b8c     08 24 86 F1 | 	sub	local04, #8
28b90     13 13 52 F6 | 	abs	arg01, local05 wc
28b94     09 13 42 F8 | 	getnib	arg01, arg01, #0
28b98     09 13 8A F6 | 	negc	arg01, arg01 wz
28b9c     0D FA 05 56 |  if_ne	mov	result1, #13
28ba0     34 03 90 5D |  if_ne	jmp	#LR__4170
28ba4     34 24 06 F1 | 	add	local04, #52
28ba8     12 13 02 F6 | 	mov	arg01, local04
28bac     34 24 86 F1 | 	sub	local04, #52
28bb0     13 12 06 F1 | 	add	arg01, #19
28bb4                 | ' {
28bb4                 | ' 
28bb4                 | ' 	return *((WORD*)ptr);
28bb4     09 FB E1 FA | 	rdword	result1, arg01
28bb8     FD 2C 0A F6 | 	mov	local08, result1 wz
28bbc     34 24 06 A1 |  if_e	add	local04, #52
28bc0     12 13 02 A6 |  if_e	mov	arg01, local04
28bc4     34 24 86 A1 |  if_e	sub	local04, #52
28bc8     20 12 06 A1 |  if_e	add	arg01, #32
28bcc                 | ' {
28bcc                 | ' 
28bcc                 | ' 	return *((DWORD*)ptr);
28bcc     09 2D 02 AB |  if_e	rdlong	local08, arg01
28bd0     34 24 06 F1 | 	add	local04, #52
28bd4     12 13 02 F6 | 	mov	arg01, local04
28bd8     34 24 86 F1 | 	sub	local04, #52
28bdc     0E 12 06 F1 | 	add	arg01, #14
28be0                 | ' {
28be0                 | ' 
28be0                 | ' 	return *((WORD*)ptr);
28be0     09 FB E1 FA | 	rdword	result1, arg01
28be4     FD 12 02 F6 | 	mov	arg01, result1
28be8     09 27 02 F6 | 	mov	local05, arg01
28bec     0F 26 4E F7 | 	zerox	local05, #15 wz
28bf0     0D FA 05 A6 |  if_e	mov	result1, #13
28bf4     E0 02 90 AD |  if_e	jmp	#LR__4170
28bf8     09 2F 32 F9 | 	getword	local09, arg01, #0
28bfc     15 2F 02 F1 | 	add	local09, local07
28c00     08 24 06 F1 | 	add	local04, #8
28c04     12 27 E2 FA | 	rdword	local05, local04
28c08     08 24 86 F1 | 	sub	local04, #8
28c0c     13 27 52 F6 | 	abs	local05, local05 wc
28c10     04 26 46 F0 | 	shr	local05, #4
28c14     13 2F 82 F3 | 	sumc	local09, local05
28c18     17 2D 12 F2 | 	cmp	local08, local09 wc
28c1c     0D FA 05 C6 |  if_b	mov	result1, #13
28c20     B4 02 90 CD |  if_b	jmp	#LR__4170
28c24     17 2D 82 F1 | 	sub	local08, local09
28c28     0A 24 06 F1 | 	add	local04, #10
28c2c     12 27 E2 FA | 	rdword	local05, local04
28c30     13 2D 12 FD | 	qdiv	local08, local05
28c34     0A 24 86 F1 | 	sub	local04, #10
28c38     18 26 62 FD | 	getqx	local05
28c3c     00 26 0E F2 | 	cmp	local05, #0 wz
28c40     0D FA 05 A6 |  if_e	mov	result1, #13
28c44     90 02 90 AD |  if_e	jmp	#LR__4170
28c48     00 30 06 F6 | 	mov	local10, #0
28c4c     FF FF 07 FF 
28c50     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
28c54     03 30 06 C6 |  if_b	mov	local10, #3
28c58     7F 00 00 FF 
28c5c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
28c60     02 30 06 C6 |  if_b	mov	local10, #2
28c64     07 00 00 FF 
28c68     F6 27 16 F2 | 	cmp	local05, ##4086 wc
28c6c     01 30 06 C6 |  if_b	mov	local10, #1
28c70     00 30 0E F2 | 	cmp	local10, #0 wz
28c74     0D FA 05 A6 |  if_e	mov	result1, #13
28c78     5C 02 90 AD |  if_e	jmp	#LR__4170
28c7c     02 26 06 F1 | 	add	local05, #2
28c80     18 24 06 F1 | 	add	local04, #24
28c84     12 27 62 FC | 	wrlong	local05, local04
28c88     08 24 06 F1 | 	add	local04, #8
28c8c     12 29 62 FC | 	wrlong	local06, local04
28c90     14 27 02 F6 | 	mov	local05, local06
28c94     09 13 32 F9 | 	getword	arg01, arg01, #0
28c98     09 27 02 F1 | 	add	local05, arg01
28c9c     04 24 06 F1 | 	add	local04, #4
28ca0     12 27 62 FC | 	wrlong	local05, local04
28ca4     14 27 02 F6 | 	mov	local05, local06
28ca8     17 27 02 F1 | 	add	local05, local09
28cac     08 24 06 F1 | 	add	local04, #8
28cb0     12 27 62 FC | 	wrlong	local05, local04
28cb4     2C 24 86 F1 | 	sub	local04, #44
28cb8     03 30 0E F2 | 	cmp	local10, #3 wz
28cbc     5C 00 90 5D |  if_ne	jmp	#LR__4165
28cc0     34 24 06 F1 | 	add	local04, #52
28cc4     12 13 02 F6 | 	mov	arg01, local04
28cc8     34 24 86 F1 | 	sub	local04, #52
28ccc     2A 12 06 F1 | 	add	arg01, #42
28cd0                 | ' {
28cd0                 | ' 
28cd0                 | ' 	return *((WORD*)ptr);
28cd0     09 FB E9 FA | 	rdword	result1, arg01 wz
28cd4     0D FA 05 56 |  if_ne	mov	result1, #13
28cd8     FC 01 90 5D |  if_ne	jmp	#LR__4170
28cdc     08 24 06 F1 | 	add	local04, #8
28ce0     12 27 EA FA | 	rdword	local05, local04 wz
28ce4     08 24 86 F1 | 	sub	local04, #8
28ce8     0D FA 05 56 |  if_ne	mov	result1, #13
28cec     E8 01 90 5D |  if_ne	jmp	#LR__4170
28cf0     34 24 06 F1 | 	add	local04, #52
28cf4     12 13 02 F6 | 	mov	arg01, local04
28cf8     2C 12 06 F1 | 	add	arg01, #44
28cfc                 | ' {
28cfc                 | ' 
28cfc                 | ' 	return *((DWORD*)ptr);
28cfc     09 FB 01 FB | 	rdlong	result1, arg01
28d00     0C 24 86 F1 | 	sub	local04, #12
28d04     12 FB 61 FC | 	wrlong	result1, local04
28d08     10 24 86 F1 | 	sub	local04, #16
28d0c     12 33 02 FB | 	rdlong	local11, local04
28d10     18 24 86 F1 | 	sub	local04, #24
28d14     02 32 66 F0 | 	shl	local11, #2
28d18     6C 00 90 FD | 	jmp	#LR__4167
28d1c                 | LR__4165
28d1c     08 24 06 F1 | 	add	local04, #8
28d20     12 27 EA FA | 	rdword	local05, local04 wz
28d24     08 24 86 F1 | 	sub	local04, #8
28d28     0D FA 05 A6 |  if_e	mov	result1, #13
28d2c     A8 01 90 AD |  if_e	jmp	#LR__4170
28d30     24 24 06 F1 | 	add	local04, #36
28d34     12 27 02 FB | 	rdlong	local05, local04
28d38     15 27 02 F1 | 	add	local05, local07
28d3c     04 24 06 F1 | 	add	local04, #4
28d40     12 27 62 FC | 	wrlong	local05, local04
28d44     28 24 86 F1 | 	sub	local04, #40
28d48     02 30 0E F2 | 	cmp	local10, #2 wz
28d4c     18 24 06 A1 |  if_e	add	local04, #24
28d50     12 27 02 AB |  if_e	rdlong	local05, local04
28d54     18 24 86 A1 |  if_e	sub	local04, #24
28d58     01 26 66 A0 |  if_e	shl	local05, #1
28d5c     24 00 90 AD |  if_e	jmp	#LR__4166
28d60     18 24 06 F1 | 	add	local04, #24
28d64     12 33 02 FB | 	rdlong	local11, local04
28d68     19 27 02 F6 | 	mov	local05, local11
28d6c     01 26 66 F0 | 	shl	local05, #1
28d70     19 27 02 F1 | 	add	local05, local11
28d74     01 26 46 F0 | 	shr	local05, #1
28d78     18 24 86 F1 | 	sub	local04, #24
28d7c     01 32 06 F5 | 	and	local11, #1
28d80     19 27 02 F1 | 	add	local05, local11
28d84                 | LR__4166
28d84     13 33 02 F6 | 	mov	local11, local05
28d88                 | LR__4167
28d88     FF 33 06 F1 | 	add	local11, #511
28d8c     09 32 46 F0 | 	shr	local11, #9
28d90     1C 24 06 F1 | 	add	local04, #28
28d94     12 17 02 FB | 	rdlong	arg03, local04
28d98     1C 24 86 F1 | 	sub	local04, #28
28d9c     19 17 12 F2 | 	cmp	arg03, local11 wc
28da0     0D FA 05 C6 |  if_b	mov	result1, #13
28da4     30 01 90 CD |  if_b	jmp	#LR__4170
28da8     14 24 06 F1 | 	add	local04, #20
28dac     FF FF FF FF 
28db0     12 FF 6B FC | 	wrlong	##-1, local04
28db4     04 24 86 F1 | 	sub	local04, #4
28db8     FF FF FF FF 
28dbc     12 FF 6B FC | 	wrlong	##-1, local04
28dc0     0C 24 86 F1 | 	sub	local04, #12
28dc4     12 01 49 FC | 	wrbyte	#128, local04
28dc8     04 24 86 F1 | 	sub	local04, #4
28dcc     03 30 0E F2 | 	cmp	local10, #3 wz
28dd0     D0 00 90 5D |  if_ne	jmp	#LR__4169
28dd4     34 24 06 F1 | 	add	local04, #52
28dd8     12 13 02 F6 | 	mov	arg01, local04
28ddc     34 24 86 F1 | 	sub	local04, #52
28de0     30 12 06 F1 | 	add	arg01, #48
28de4                 | ' {
28de4                 | ' 
28de4                 | ' 	return *((WORD*)ptr);
28de4     09 FB E1 FA | 	rdword	result1, arg01
28de8     FD 26 32 F9 | 	getword	local05, result1, #0
28dec     01 26 0E F2 | 	cmp	local05, #1 wz
28df0     B0 00 90 5D |  if_ne	jmp	#LR__4169
28df4     01 28 06 F1 | 	add	local06, #1
28df8     12 13 02 F6 | 	mov	arg01, local04
28dfc     14 15 02 F6 | 	mov	arg02, local06
28e00     CC CD BF FD | 	call	#_fatfs_cc_move_window
28e04     00 FA 0D F2 | 	cmp	result1, #0 wz
28e08     98 00 90 5D |  if_ne	jmp	#LR__4169
28e0c     04 24 06 F1 | 	add	local04, #4
28e10     12 01 48 FC | 	wrbyte	#0, local04
28e14     30 24 06 F1 | 	add	local04, #48
28e18     12 13 02 F6 | 	mov	arg01, local04
28e1c     34 24 86 F1 | 	sub	local04, #52
28e20     FE 13 06 F1 | 	add	arg01, #510
28e24                 | ' {
28e24                 | ' 
28e24                 | ' 	return *((WORD*)ptr);
28e24     09 FB E1 FA | 	rdword	result1, arg01
28e28     FD 26 32 F9 | 	getword	local05, result1, #0
28e2c     55 00 00 FF 
28e30     55 26 0E F2 | 	cmp	local05, ##43605 wz
28e34     34 24 06 A1 |  if_e	add	local04, #52
28e38     12 13 02 A6 |  if_e	mov	arg01, local04
28e3c     34 24 86 A1 |  if_e	sub	local04, #52
28e40                 | ' {
28e40                 | ' 
28e40                 | ' 	return *((DWORD*)ptr);
28e40     09 FB 01 AB |  if_e	rdlong	result1, arg01
28e44     A9 B0 20 AF 
28e48     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
28e4c     54 00 90 5D |  if_ne	jmp	#LR__4168
28e50     34 24 06 F1 | 	add	local04, #52
28e54     12 13 02 F6 | 	mov	arg01, local04
28e58     34 24 86 F1 | 	sub	local04, #52
28e5c     E4 13 06 F1 | 	add	arg01, #484
28e60                 | ' {
28e60                 | ' 
28e60                 | ' 	return *((DWORD*)ptr);
28e60     09 FB 01 FB | 	rdlong	result1, arg01
28e64     B9 A0 30 FF 
28e68     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
28e6c     34 00 90 5D |  if_ne	jmp	#LR__4168
28e70     34 24 06 F1 | 	add	local04, #52
28e74     12 13 02 F6 | 	mov	arg01, local04
28e78     E8 13 06 F1 | 	add	arg01, #488
28e7c                 | ' {
28e7c                 | ' 
28e7c                 | ' 	return *((DWORD*)ptr);
28e7c     09 FB 01 FB | 	rdlong	result1, arg01
28e80     20 24 86 F1 | 	sub	local04, #32
28e84     12 FB 61 FC | 	wrlong	result1, local04
28e88     20 24 06 F1 | 	add	local04, #32
28e8c     12 13 02 F6 | 	mov	arg01, local04
28e90     EC 13 06 F1 | 	add	arg01, #492
28e94                 | ' {
28e94                 | ' 
28e94                 | ' 	return *((DWORD*)ptr);
28e94     09 FB 01 FB | 	rdlong	result1, arg01
28e98     24 24 86 F1 | 	sub	local04, #36
28e9c     12 FB 61 FC | 	wrlong	result1, local04
28ea0     10 24 86 F1 | 	sub	local04, #16
28ea4                 | LR__4168
28ea4                 | LR__4169
28ea4     12 31 42 FC | 	wrbyte	local10, local04
28ea8     04 E4 05 F1 | 	add	objptr, #4
28eac     F2 26 E2 FA | 	rdword	local05, objptr
28eb0     01 26 06 F1 | 	add	local05, #1
28eb4     F2 26 52 FC | 	wrword	local05, objptr
28eb8     F2 32 E2 FA | 	rdword	local11, objptr
28ebc     06 24 06 F1 | 	add	local04, #6
28ec0     12 33 52 FC | 	wrword	local11, local04
28ec4     04 E4 05 F1 | 	add	objptr, #4
28ec8     06 24 06 F1 | 	add	local04, #6
28ecc     12 E5 61 FC | 	wrlong	objptr, local04
28ed0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
28ed0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
28ed0                 | ' 			{
28ed0                 | ' 
28ed0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
28ed0                 | ' 
28ed0                 | ' 
28ed0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
28ed0                 | ' 
28ed0                 | ' 			}
28ed0                 | ' 		}
28ed0                 | ' 
28ed0                 | ' 
28ed0                 | ' 	}
28ed0                 | ' 
28ed0                 | ' 	fs->fs_type = (BYTE)fmt;
28ed0                 | ' 	fs->id = ++Fsid;
28ed0                 | ' 
28ed0                 | ' 	fs->lfnbuf = LfnBuf;
28ed0                 | ' #line 3567 "ff.c"
28ed0                 | ' 	return FR_OK;
28ed0     00 FA 05 F6 | 	mov	result1, #0
28ed4     08 E4 85 F1 | 	sub	objptr, #8
28ed8                 | LR__4170
28ed8     A7 F0 03 F6 | 	mov	ptra, fp
28edc     B2 00 A0 FD | 	call	#popregs_
28ee0                 | _fatfs_cc_mount_volume_ret
28ee0     2D 00 64 FD | 	ret
28ee4                 | 
28ee4                 | _fatfs_cc_validate
28ee4     09 01 0A F6 | 	mov	_var01, arg01 wz
28ee8     09 02 06 F6 | 	mov	_var02, #9
28eec     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
28ef0     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
28ef4     50 00 90 AD |  if_e	jmp	#LR__4180
28ef8     04 00 06 F1 | 	add	_var01, #4
28efc     00 07 E2 FA | 	rdword	_var04, _var01
28f00     04 00 86 F1 | 	sub	_var01, #4
28f04     00 13 02 FB | 	rdlong	arg01, _var01
28f08     06 12 06 F1 | 	add	arg01, #6
28f0c     09 FB E1 FA | 	rdword	result1, arg01
28f10     FD 06 0A F2 | 	cmp	_var04, result1 wz
28f14     30 00 90 5D |  if_ne	jmp	#LR__4180
28f18     00 07 02 FB | 	rdlong	_var04, _var01
28f1c     01 06 06 F1 | 	add	_var04, #1
28f20     03 13 CA FA | 	rdbyte	arg01, _var04 wz
28f24     01 FA 05 56 |  if_ne	mov	result1, #1
28f28                 | ' 
28f28                 | ' 	return Stat;
28f28     01 00 00 AF 
28f2c     20 E4 05 A1 |  if_e	add	objptr, ##544
28f30     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28f34     01 00 00 AF 
28f38     20 E4 85 A1 |  if_e	sub	objptr, ##544
28f3c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
28f40     01 04 CE F7 | 	test	_var03, #1 wz
28f44     00 02 06 A6 |  if_e	mov	_var02, #0
28f48                 | LR__4180
28f48     00 02 0E F2 | 	cmp	_var02, #0 wz
28f4c     00 05 02 AB |  if_e	rdlong	_var03, _var01
28f50     00 04 06 56 |  if_ne	mov	_var03, #0
28f54     0A 05 62 FC | 	wrlong	_var03, arg02
28f58                 | ' 			res = FR_OK;
28f58                 | ' 		}
28f58                 | ' 
28f58                 | ' 	}
28f58                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
28f58                 | ' 	return res;
28f58     01 FB 01 F6 | 	mov	result1, _var02
28f5c                 | _fatfs_cc_validate_ret
28f5c     2D 00 64 FD | 	ret
28f60                 | 
28f60                 | _fatfs_cc_f_mount
28f60     01 4A 05 F6 | 	mov	COUNT_, #1
28f64     A8 00 A0 FD | 	call	#pushregs_
28f68     20 F0 07 F1 | 	add	ptra, #32
28f6c     04 4E 05 F1 | 	add	fp, #4
28f70     A7 12 62 FC | 	wrlong	arg01, fp
28f74     04 4E 05 F1 | 	add	fp, #4
28f78     A7 14 62 FC | 	wrlong	arg02, fp
28f7c     04 4E 05 F1 | 	add	fp, #4
28f80     A7 16 42 FC | 	wrbyte	arg03, fp
28f84     04 4E 85 F1 | 	sub	fp, #4
28f88     A7 16 02 FB | 	rdlong	arg03, fp
28f8c     14 4E 05 F1 | 	add	fp, #20
28f90     A7 16 62 FC | 	wrlong	arg03, fp
28f94     A7 12 02 F6 | 	mov	arg01, fp
28f98     1C 4E 85 F1 | 	sub	fp, #28
28f9c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
28fa0     14 4E 05 F1 | 	add	fp, #20
28fa4     A7 FA 61 FC | 	wrlong	result1, fp
28fa8     14 4E 85 F1 | 	sub	fp, #20
28fac     00 FA 55 F2 | 	cmps	result1, #0 wc
28fb0     0B FA 05 C6 |  if_b	mov	result1, #11
28fb4     C0 00 90 CD |  if_b	jmp	#LR__4191
28fb8     14 4E 05 F1 | 	add	fp, #20
28fbc     A7 16 02 FB | 	rdlong	arg03, fp
28fc0     02 16 66 F0 | 	shl	arg03, #2
28fc4     F2 16 02 F1 | 	add	arg03, objptr
28fc8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
28fcc     04 4E 85 F1 | 	sub	fp, #4
28fd0     A7 16 62 FC | 	wrlong	arg03, fp
28fd4     10 4E 85 F1 | 	sub	fp, #16
28fd8     28 00 90 AD |  if_e	jmp	#LR__4190
28fdc     10 4E 05 F1 | 	add	fp, #16
28fe0     A7 16 02 FB | 	rdlong	arg03, fp
28fe4     10 4E 85 F1 | 	sub	fp, #16
28fe8     01 16 06 F1 | 	add	arg03, #1
28fec     0B 13 C2 FA | 	rdbyte	arg01, arg03
28ff0     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
28ff4     10 4E 05 F1 | 	add	fp, #16
28ff8     A7 16 02 FB | 	rdlong	arg03, fp
28ffc     10 4E 85 F1 | 	sub	fp, #16
29000     0B 01 48 FC | 	wrbyte	#0, arg03
29004                 | LR__4190
29004     04 4E 05 F1 | 	add	fp, #4
29008     A7 1E 0A FB | 	rdlong	local01, fp wz
2900c     04 4E 85 F1 | 	sub	fp, #4
29010     04 4E 05 51 |  if_ne	add	fp, #4
29014     A7 1E 02 5B |  if_ne	rdlong	local01, fp
29018     04 4E 85 51 |  if_ne	sub	fp, #4
2901c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
29020     14 4E 05 F1 | 	add	fp, #20
29024     A7 1E 02 FB | 	rdlong	local01, fp
29028     02 1E 66 F0 | 	shl	local01, #2
2902c     F2 1E 02 F1 | 	add	local01, objptr
29030     10 4E 85 F1 | 	sub	fp, #16
29034     A7 16 02 FB | 	rdlong	arg03, fp
29038     0F 17 62 FC | 	wrlong	arg03, local01
2903c     08 4E 05 F1 | 	add	fp, #8
29040     A7 1E CA FA | 	rdbyte	local01, fp wz
29044     0C 4E 85 F1 | 	sub	fp, #12
29048     00 FA 05 A6 |  if_e	mov	result1, #0
2904c     28 00 90 AD |  if_e	jmp	#LR__4191
29050     08 4E 05 F1 | 	add	fp, #8
29054     A7 12 02 F6 | 	mov	arg01, fp
29058     04 4E 85 F1 | 	sub	fp, #4
2905c     A7 14 02 F6 | 	mov	arg02, fp
29060     04 4E 85 F1 | 	sub	fp, #4
29064     00 16 06 F6 | 	mov	arg03, #0
29068     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2906c     18 4E 05 F1 | 	add	fp, #24
29070     A7 FA 61 FC | 	wrlong	result1, fp
29074                 | ' 
29074                 | ' 	res = mount_volume(&path, &fs, 0);
29074                 | ' 	return res ;
29074     18 4E 85 F1 | 	sub	fp, #24
29078                 | LR__4191
29078     A7 F0 03 F6 | 	mov	ptra, fp
2907c     B2 00 A0 FD | 	call	#popregs_
29080                 | _fatfs_cc_f_mount_ret
29080     2D 00 64 FD | 	ret
29084                 | 
29084                 | _fatfs_cc_f_open
29084     02 4A 05 F6 | 	mov	COUNT_, #2
29088     A8 00 A0 FD | 	call	#pushregs_
2908c     60 F0 07 F1 | 	add	ptra, #96
29090     04 4E 05 F1 | 	add	fp, #4
29094     A7 12 62 FC | 	wrlong	arg01, fp
29098     04 4E 05 F1 | 	add	fp, #4
2909c     A7 14 62 FC | 	wrlong	arg02, fp
290a0     04 4E 05 F1 | 	add	fp, #4
290a4     A7 16 42 FC | 	wrbyte	arg03, fp
290a8     08 4E 85 F1 | 	sub	fp, #8
290ac     A7 18 0A FB | 	rdlong	arg04, fp wz
290b0     04 4E 85 F1 | 	sub	fp, #4
290b4     09 FA 05 A6 |  if_e	mov	result1, #9
290b8     98 06 90 AD |  if_e	jmp	#LR__4217
290bc     0C 4E 05 F1 | 	add	fp, #12
290c0     A7 18 C2 FA | 	rdbyte	arg04, fp
290c4     3F 18 06 F5 | 	and	arg04, #63
290c8     A7 18 42 FC | 	wrbyte	arg04, fp
290cc     04 4E 85 F1 | 	sub	fp, #4
290d0     A7 12 02 F6 | 	mov	arg01, fp
290d4     3C 4E 05 F1 | 	add	fp, #60
290d8     A7 14 02 F6 | 	mov	arg02, fp
290dc     38 4E 85 F1 | 	sub	fp, #56
290e0     A7 16 C2 FA | 	rdbyte	arg03, fp
290e4     0C 4E 85 F1 | 	sub	fp, #12
290e8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
290ec     10 4E 05 F1 | 	add	fp, #16
290f0     A7 FA 61 FC | 	wrlong	result1, fp
290f4     10 4E 85 F1 | 	sub	fp, #16
290f8     00 FA 0D F2 | 	cmp	result1, #0 wz
290fc     2C 06 90 5D |  if_ne	jmp	#LR__4216
29100     44 4E 05 F1 | 	add	fp, #68
29104     A7 18 02 FB | 	rdlong	arg04, fp
29108     30 4E 85 F1 | 	sub	fp, #48
2910c     A7 18 62 FC | 	wrlong	arg04, fp
29110     A7 12 02 F6 | 	mov	arg01, fp
29114     0C 4E 85 F1 | 	sub	fp, #12
29118     A7 1E 02 FB | 	rdlong	local01, fp
2911c     08 4E 85 F1 | 	sub	fp, #8
29120     0F 15 02 F6 | 	mov	arg02, local01
29124     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
29128     10 4E 05 F1 | 	add	fp, #16
2912c     A7 FA 61 FC | 	wrlong	result1, fp
29130     10 4E 85 F1 | 	sub	fp, #16
29134     00 FA 0D F2 | 	cmp	result1, #0 wz
29138     1C 00 90 5D |  if_ne	jmp	#LR__4200
2913c     3F 4E 05 F1 | 	add	fp, #63
29140     A7 18 C2 FA | 	rdbyte	arg04, fp
29144     3F 4E 85 F1 | 	sub	fp, #63
29148     80 18 CE F7 | 	test	arg04, #128 wz
2914c     10 4E 05 51 |  if_ne	add	fp, #16
29150     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29154     10 4E 85 51 |  if_ne	sub	fp, #16
29158                 | LR__4200
29158     0C 4E 05 F1 | 	add	fp, #12
2915c     A7 18 C2 FA | 	rdbyte	arg04, fp
29160     0C 4E 85 F1 | 	sub	fp, #12
29164     1C 18 CE F7 | 	test	arg04, #28 wz
29168     F0 01 90 AD |  if_e	jmp	#LR__4205
2916c     10 4E 05 F1 | 	add	fp, #16
29170     A7 1E 0A FB | 	rdlong	local01, fp wz
29174     10 4E 85 F1 | 	sub	fp, #16
29178     48 00 90 AD |  if_e	jmp	#LR__4202
2917c     10 4E 05 F1 | 	add	fp, #16
29180     A7 18 02 FB | 	rdlong	arg04, fp
29184     10 4E 85 F1 | 	sub	fp, #16
29188     04 18 0E F2 | 	cmp	arg04, #4 wz
2918c     1C 00 90 5D |  if_ne	jmp	#LR__4201
29190     14 4E 05 F1 | 	add	fp, #20
29194     A7 12 02 F6 | 	mov	arg01, fp
29198     14 4E 85 F1 | 	sub	fp, #20
2919c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
291a0     10 4E 05 F1 | 	add	fp, #16
291a4     A7 FA 61 FC | 	wrlong	result1, fp
291a8     10 4E 85 F1 | 	sub	fp, #16
291ac                 | LR__4201
291ac     0C 4E 05 F1 | 	add	fp, #12
291b0     A7 1E C2 FA | 	rdbyte	local01, fp
291b4     08 1E 46 F5 | 	or	local01, #8
291b8     A7 1E 42 FC | 	wrbyte	local01, fp
291bc     0C 4E 85 F1 | 	sub	fp, #12
291c0     3C 00 90 FD | 	jmp	#LR__4204
291c4                 | LR__4202
291c4     1A 4E 05 F1 | 	add	fp, #26
291c8     A7 1E C2 FA | 	rdbyte	local01, fp
291cc     1A 4E 85 F1 | 	sub	fp, #26
291d0     11 1E CE F7 | 	test	local01, #17 wz
291d4     10 4E 05 51 |  if_ne	add	fp, #16
291d8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
291dc     10 4E 85 51 |  if_ne	sub	fp, #16
291e0     1C 00 90 5D |  if_ne	jmp	#LR__4203
291e4     0C 4E 05 F1 | 	add	fp, #12
291e8     A7 1E C2 FA | 	rdbyte	local01, fp
291ec     0C 4E 85 F1 | 	sub	fp, #12
291f0     04 1E CE F7 | 	test	local01, #4 wz
291f4     10 4E 05 51 |  if_ne	add	fp, #16
291f8     A7 10 68 5C |  if_ne	wrlong	#8, fp
291fc     10 4E 85 51 |  if_ne	sub	fp, #16
29200                 | LR__4203
29200                 | LR__4204
29200     10 4E 05 F1 | 	add	fp, #16
29204     A7 1E 0A FB | 	rdlong	local01, fp wz
29208     10 4E 85 F1 | 	sub	fp, #16
2920c     A8 01 90 5D |  if_ne	jmp	#LR__4208
29210     0C 4E 05 F1 | 	add	fp, #12
29214     A7 1E C2 FA | 	rdbyte	local01, fp
29218     0C 4E 85 F1 | 	sub	fp, #12
2921c     08 1E CE F7 | 	test	local01, #8 wz
29220     94 01 90 AD |  if_e	jmp	#LR__4208
29224     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
29228     54 4E 05 F1 | 	add	fp, #84
2922c     A7 FA 61 FC | 	wrlong	result1, fp
29230     24 4E 85 F1 | 	sub	fp, #36
29234     A7 12 02 FB | 	rdlong	arg01, fp
29238     0E 12 06 F1 | 	add	arg01, #14
2923c     09 FB 61 FC | 	wrlong	result1, arg01
29240     A7 12 02 FB | 	rdlong	arg01, fp
29244     16 12 06 F1 | 	add	arg01, #22
29248     24 4E 05 F1 | 	add	fp, #36
2924c     A7 14 02 FB | 	rdlong	arg02, fp
29250     09 15 62 FC | 	wrlong	arg02, arg01
29254     10 4E 85 F1 | 	sub	fp, #16
29258     A7 12 02 FB | 	rdlong	arg01, fp
2925c     14 4E 85 F1 | 	sub	fp, #20
29260     A7 14 02 FB | 	rdlong	arg02, fp
29264     30 4E 85 F1 | 	sub	fp, #48
29268     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2926c     48 4E 05 F1 | 	add	fp, #72
29270     A7 FA 61 FC | 	wrlong	result1, fp
29274     18 4E 85 F1 | 	sub	fp, #24
29278     A7 1E 02 FB | 	rdlong	local01, fp
2927c     0B 1E 06 F1 | 	add	local01, #11
29280     0F 41 48 FC | 	wrbyte	#32, local01
29284     14 4E 05 F1 | 	add	fp, #20
29288     A7 12 02 FB | 	rdlong	arg01, fp
2928c     14 4E 85 F1 | 	sub	fp, #20
29290     A7 14 02 FB | 	rdlong	arg02, fp
29294     30 4E 85 F1 | 	sub	fp, #48
29298     00 16 06 F6 | 	mov	arg03, #0
2929c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
292a0     30 4E 05 F1 | 	add	fp, #48
292a4     A7 12 02 FB | 	rdlong	arg01, fp
292a8     1C 12 06 F1 | 	add	arg01, #28
292ac     09 01 68 FC | 	wrlong	#0, arg01
292b0     14 4E 05 F1 | 	add	fp, #20
292b4     A7 1E 02 FB | 	rdlong	local01, fp
292b8     03 1E 06 F1 | 	add	local01, #3
292bc     0F 03 48 FC | 	wrbyte	#1, local01
292c0     04 4E 05 F1 | 	add	fp, #4
292c4     A7 1E 0A FB | 	rdlong	local01, fp wz
292c8     48 4E 85 F1 | 	sub	fp, #72
292cc     E8 00 90 AD |  if_e	jmp	#LR__4208
292d0     44 4E 05 F1 | 	add	fp, #68
292d4     A7 1E 02 FB | 	rdlong	local01, fp
292d8     30 1E 06 F1 | 	add	local01, #48
292dc     0F 1F 02 FB | 	rdlong	local01, local01
292e0     14 4E 05 F1 | 	add	fp, #20
292e4     A7 1E 62 FC | 	wrlong	local01, fp
292e8     44 4E 85 F1 | 	sub	fp, #68
292ec     A7 12 02 F6 | 	mov	arg01, fp
292f0     34 4E 05 F1 | 	add	fp, #52
292f4     A7 14 02 FB | 	rdlong	arg02, fp
292f8     48 4E 85 F1 | 	sub	fp, #72
292fc     00 16 06 F6 | 	mov	arg03, #0
29300     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
29304     10 4E 05 F1 | 	add	fp, #16
29308     A7 FA 61 FC | 	wrlong	result1, fp
2930c     10 4E 85 F1 | 	sub	fp, #16
29310     00 FA 0D F2 | 	cmp	result1, #0 wz
29314     A0 00 90 5D |  if_ne	jmp	#LR__4208
29318     44 4E 05 F1 | 	add	fp, #68
2931c     A7 12 02 FB | 	rdlong	arg01, fp
29320     14 4E 05 F1 | 	add	fp, #20
29324     A7 14 02 FB | 	rdlong	arg02, fp
29328     58 4E 85 F1 | 	sub	fp, #88
2932c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
29330     10 4E 05 F1 | 	add	fp, #16
29334     A7 FA 61 FC | 	wrlong	result1, fp
29338     34 4E 05 F1 | 	add	fp, #52
2933c     A7 18 02 FB | 	rdlong	arg04, fp
29340     04 4E 05 F1 | 	add	fp, #4
29344     A7 1E 02 FB | 	rdlong	local01, fp
29348     48 4E 85 F1 | 	sub	fp, #72
2934c     01 1E 86 F1 | 	sub	local01, #1
29350     10 18 06 F1 | 	add	arg04, #16
29354     0C 1F 62 FC | 	wrlong	local01, arg04
29358     5C 00 90 FD | 	jmp	#LR__4208
2935c                 | LR__4205
2935c     10 4E 05 F1 | 	add	fp, #16
29360     A7 18 0A FB | 	rdlong	arg04, fp wz
29364     10 4E 85 F1 | 	sub	fp, #16
29368     4C 00 90 5D |  if_ne	jmp	#LR__4207
2936c     1A 4E 05 F1 | 	add	fp, #26
29370     A7 18 C2 FA | 	rdbyte	arg04, fp
29374     1A 4E 85 F1 | 	sub	fp, #26
29378     10 18 CE F7 | 	test	arg04, #16 wz
2937c     10 4E 05 51 |  if_ne	add	fp, #16
29380     A7 08 68 5C |  if_ne	wrlong	#4, fp
29384     10 4E 85 51 |  if_ne	sub	fp, #16
29388     2C 00 90 5D |  if_ne	jmp	#LR__4206
2938c     0C 4E 05 F1 | 	add	fp, #12
29390     A7 18 C2 FA | 	rdbyte	arg04, fp
29394     0C 4E 85 F1 | 	sub	fp, #12
29398     02 18 CE F7 | 	test	arg04, #2 wz
2939c     1A 4E 05 51 |  if_ne	add	fp, #26
293a0     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
293a4     1A 4E 85 51 |  if_ne	sub	fp, #26
293a8     01 1E CE 57 |  if_ne	test	local01, #1 wz
293ac     10 4E 05 51 |  if_ne	add	fp, #16
293b0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
293b4     10 4E 85 51 |  if_ne	sub	fp, #16
293b8                 | LR__4206
293b8                 | LR__4207
293b8                 | LR__4208
293b8     10 4E 05 F1 | 	add	fp, #16
293bc     A7 1E 0A FB | 	rdlong	local01, fp wz
293c0     10 4E 85 F1 | 	sub	fp, #16
293c4     60 00 90 5D |  if_ne	jmp	#LR__4209
293c8     0C 4E 05 F1 | 	add	fp, #12
293cc     A7 20 C2 FA | 	rdbyte	local02, fp
293d0     0C 4E 85 F1 | 	sub	fp, #12
293d4     08 20 CE F7 | 	test	local02, #8 wz
293d8     0C 4E 05 51 |  if_ne	add	fp, #12
293dc     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
293e0     40 20 46 55 |  if_ne	or	local02, #64
293e4     A7 20 42 5C |  if_ne	wrbyte	local02, fp
293e8     0C 4E 85 51 |  if_ne	sub	fp, #12
293ec     04 4E 05 F1 | 	add	fp, #4
293f0     A7 20 02 FB | 	rdlong	local02, fp
293f4     40 4E 05 F1 | 	add	fp, #64
293f8     A7 1E 02 FB | 	rdlong	local01, fp
293fc     30 1E 06 F1 | 	add	local01, #48
29400     0F 1F 02 FB | 	rdlong	local01, local01
29404     20 20 06 F1 | 	add	local02, #32
29408     10 1F 62 FC | 	wrlong	local01, local02
2940c     40 4E 85 F1 | 	sub	fp, #64
29410     A7 20 02 FB | 	rdlong	local02, fp
29414     2C 4E 05 F1 | 	add	fp, #44
29418     A7 1E 02 FB | 	rdlong	local01, fp
2941c     30 4E 85 F1 | 	sub	fp, #48
29420     24 20 06 F1 | 	add	local02, #36
29424     10 1F 62 FC | 	wrlong	local01, local02
29428                 | LR__4209
29428     10 4E 05 F1 | 	add	fp, #16
2942c     A7 20 0A FB | 	rdlong	local02, fp wz
29430     10 4E 85 F1 | 	sub	fp, #16
29434     F4 02 90 5D |  if_ne	jmp	#LR__4215
29438     04 4E 05 F1 | 	add	fp, #4
2943c     A7 20 02 FB | 	rdlong	local02, fp
29440     40 4E 05 F1 | 	add	fp, #64
29444     A7 12 02 FB | 	rdlong	arg01, fp
29448     14 4E 85 F1 | 	sub	fp, #20
2944c     A7 14 02 FB | 	rdlong	arg02, fp
29450     30 4E 85 F1 | 	sub	fp, #48
29454     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
29458     08 20 06 F1 | 	add	local02, #8
2945c     10 FB 61 FC | 	wrlong	result1, local02
29460     04 4E 05 F1 | 	add	fp, #4
29464     A7 20 02 FB | 	rdlong	local02, fp
29468     2C 4E 05 F1 | 	add	fp, #44
2946c     A7 12 02 FB | 	rdlong	arg01, fp
29470     1C 12 06 F1 | 	add	arg01, #28
29474                 | ' {
29474                 | ' 
29474                 | ' 	return *((DWORD*)ptr);
29474     09 FB 01 FB | 	rdlong	result1, arg01
29478     0C 20 06 F1 | 	add	local02, #12
2947c     10 FB 61 FC | 	wrlong	result1, local02
29480     2C 4E 85 F1 | 	sub	fp, #44
29484     A7 20 02 FB | 	rdlong	local02, fp
29488     40 4E 05 F1 | 	add	fp, #64
2948c     A7 1E 02 FB | 	rdlong	local01, fp
29490     10 1F 62 FC | 	wrlong	local01, local02
29494     40 4E 85 F1 | 	sub	fp, #64
29498     A7 20 02 FB | 	rdlong	local02, fp
2949c     40 4E 05 F1 | 	add	fp, #64
294a0     A7 1E 02 FB | 	rdlong	local01, fp
294a4     06 1E 06 F1 | 	add	local01, #6
294a8     0F 1F E2 FA | 	rdword	local01, local01
294ac     04 20 06 F1 | 	add	local02, #4
294b0     10 1F 52 FC | 	wrword	local01, local02
294b4     40 4E 85 F1 | 	sub	fp, #64
294b8     A7 20 02 FB | 	rdlong	local02, fp
294bc     08 4E 05 F1 | 	add	fp, #8
294c0     A7 1E C2 FA | 	rdbyte	local01, fp
294c4     10 20 06 F1 | 	add	local02, #16
294c8     10 1F 42 FC | 	wrbyte	local01, local02
294cc     08 4E 85 F1 | 	sub	fp, #8
294d0     A7 20 02 FB | 	rdlong	local02, fp
294d4     11 20 06 F1 | 	add	local02, #17
294d8     10 01 48 FC | 	wrbyte	#0, local02
294dc     A7 20 02 FB | 	rdlong	local02, fp
294e0     1C 20 06 F1 | 	add	local02, #28
294e4     10 01 68 FC | 	wrlong	#0, local02
294e8     A7 20 02 FB | 	rdlong	local02, fp
294ec     14 20 06 F1 | 	add	local02, #20
294f0     10 01 68 FC | 	wrlong	#0, local02
294f4     A7 12 02 FB | 	rdlong	arg01, fp
294f8     04 4E 85 F1 | 	sub	fp, #4
294fc     28 12 06 F1 | 	add	arg01, #40
29500     00 14 06 F6 | 	mov	arg02, #0
29504     09 16 C6 F9 | 	decod	arg03, #9
29508     98 00 A0 FD | 	call	#\builtin_bytefill_
2950c     0C 4E 05 F1 | 	add	fp, #12
29510     A7 20 C2 FA | 	rdbyte	local02, fp
29514     0C 4E 85 F1 | 	sub	fp, #12
29518     20 20 CE F7 | 	test	local02, #32 wz
2951c     0C 02 90 AD |  if_e	jmp	#LR__4214
29520     04 4E 05 F1 | 	add	fp, #4
29524     A7 1E 02 FB | 	rdlong	local01, fp
29528     04 4E 85 F1 | 	sub	fp, #4
2952c     0C 1E 06 F1 | 	add	local01, #12
29530     0F 21 02 FB | 	rdlong	local02, local01
29534     01 20 16 F2 | 	cmp	local02, #1 wc
29538     F0 01 90 CD |  if_b	jmp	#LR__4214
2953c     04 4E 05 F1 | 	add	fp, #4
29540     A7 1E 02 FB | 	rdlong	local01, fp
29544     0F 21 02 F6 | 	mov	local02, local01
29548     0C 1E 06 F1 | 	add	local01, #12
2954c     0F 1F 02 FB | 	rdlong	local01, local01
29550     14 20 06 F1 | 	add	local02, #20
29554     10 1F 62 FC | 	wrlong	local01, local02
29558     40 4E 05 F1 | 	add	fp, #64
2955c     A7 20 02 FB | 	rdlong	local02, fp
29560     0A 20 06 F1 | 	add	local02, #10
29564     10 21 E2 FA | 	rdword	local02, local02
29568     09 20 66 F0 | 	shl	local02, #9
2956c     08 4E 05 F1 | 	add	fp, #8
29570     A7 20 62 FC | 	wrlong	local02, fp
29574     48 4E 85 F1 | 	sub	fp, #72
29578     A7 20 02 FB | 	rdlong	local02, fp
2957c     08 20 06 F1 | 	add	local02, #8
29580     10 1F 02 FB | 	rdlong	local01, local02
29584     4C 4E 05 F1 | 	add	fp, #76
29588     A7 1E 62 FC | 	wrlong	local01, fp
2958c                 | ' 				fp->fptr = fp->obj.objsize;
2958c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2958c                 | ' 				clst = fp->obj.sclust;
2958c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2958c     4C 4E 85 F1 | 	sub	fp, #76
29590     A7 20 02 FB | 	rdlong	local02, fp
29594     0C 20 06 F1 | 	add	local02, #12
29598     10 1F 02 FB | 	rdlong	local01, local02
2959c     58 4E 05 F1 | 	add	fp, #88
295a0     A7 1E 62 FC | 	wrlong	local01, fp
295a4     5C 4E 85 F1 | 	sub	fp, #92
295a8                 | LR__4210
295a8     10 4E 05 F1 | 	add	fp, #16
295ac     A7 20 0A FB | 	rdlong	local02, fp wz
295b0     10 4E 85 F1 | 	sub	fp, #16
295b4     94 00 90 5D |  if_ne	jmp	#LR__4211
295b8     5C 4E 05 F1 | 	add	fp, #92
295bc     A7 20 02 FB | 	rdlong	local02, fp
295c0     10 4E 85 F1 | 	sub	fp, #16
295c4     A7 1E 02 FB | 	rdlong	local01, fp
295c8     4C 4E 85 F1 | 	sub	fp, #76
295cc     0F 21 1A F2 | 	cmp	local02, local01 wcz
295d0     78 00 90 ED |  if_be	jmp	#LR__4211
295d4     04 4E 05 F1 | 	add	fp, #4
295d8     A7 12 02 FB | 	rdlong	arg01, fp
295dc     4C 4E 05 F1 | 	add	fp, #76
295e0     A7 14 02 FB | 	rdlong	arg02, fp
295e4     50 4E 85 F1 | 	sub	fp, #80
295e8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
295ec     50 4E 05 F1 | 	add	fp, #80
295f0     A7 FA 61 FC | 	wrlong	result1, fp
295f4     50 4E 85 F1 | 	sub	fp, #80
295f8     02 FA 15 F2 | 	cmp	result1, #2 wc
295fc     10 4E 05 C1 |  if_b	add	fp, #16
29600     A7 04 68 CC |  if_b	wrlong	#2, fp
29604     10 4E 85 C1 |  if_b	sub	fp, #16
29608     50 4E 05 F1 | 	add	fp, #80
2960c     A7 20 02 FB | 	rdlong	local02, fp
29610     50 4E 85 F1 | 	sub	fp, #80
29614     FF FF 7F FF 
29618     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2961c     10 4E 05 A1 |  if_e	add	fp, #16
29620     A7 02 68 AC |  if_e	wrlong	#1, fp
29624     10 4E 85 A1 |  if_e	sub	fp, #16
29628     5C 4E 05 F1 | 	add	fp, #92
2962c     A7 20 02 FB | 	rdlong	local02, fp
29630     10 4E 85 F1 | 	sub	fp, #16
29634     A7 1E 02 FB | 	rdlong	local01, fp
29638     0F 21 82 F1 | 	sub	local02, local01
2963c     10 4E 05 F1 | 	add	fp, #16
29640     A7 20 62 FC | 	wrlong	local02, fp
29644     5C 4E 85 F1 | 	sub	fp, #92
29648     5C FF 9F FD | 	jmp	#LR__4210
2964c                 | LR__4211
2964c     04 4E 05 F1 | 	add	fp, #4
29650     A7 20 02 FB | 	rdlong	local02, fp
29654     4C 4E 05 F1 | 	add	fp, #76
29658     A7 1E 02 FB | 	rdlong	local01, fp
2965c     18 20 06 F1 | 	add	local02, #24
29660     10 1F 62 FC | 	wrlong	local01, local02
29664     40 4E 85 F1 | 	sub	fp, #64
29668     A7 20 0A FB | 	rdlong	local02, fp wz
2966c     10 4E 85 F1 | 	sub	fp, #16
29670     B8 00 90 5D |  if_ne	jmp	#LR__4213
29674     5C 4E 05 F1 | 	add	fp, #92
29678     A7 1E 02 FB | 	rdlong	local01, fp
2967c     5C 4E 85 F1 | 	sub	fp, #92
29680     FF 1F CE F7 | 	test	local01, #511 wz
29684     A4 00 90 AD |  if_e	jmp	#LR__4213
29688     44 4E 05 F1 | 	add	fp, #68
2968c     A7 12 02 FB | 	rdlong	arg01, fp
29690     0C 4E 05 F1 | 	add	fp, #12
29694     A7 14 02 FB | 	rdlong	arg02, fp
29698     50 4E 85 F1 | 	sub	fp, #80
2969c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
296a0     58 4E 05 F1 | 	add	fp, #88
296a4     A7 FA 61 FC | 	wrlong	result1, fp
296a8     00 FA 4D F2 | 	cmps	result1, #0 wz
296ac     58 4E 85 F1 | 	sub	fp, #88
296b0     10 4E 05 A1 |  if_e	add	fp, #16
296b4     A7 04 68 AC |  if_e	wrlong	#2, fp
296b8     10 4E 85 A1 |  if_e	sub	fp, #16
296bc     6C 00 90 AD |  if_e	jmp	#LR__4212
296c0     04 4E 05 F1 | 	add	fp, #4
296c4     A7 20 02 FB | 	rdlong	local02, fp
296c8     54 4E 05 F1 | 	add	fp, #84
296cc     A7 1E 02 FB | 	rdlong	local01, fp
296d0     04 4E 05 F1 | 	add	fp, #4
296d4     A7 18 02 FB | 	rdlong	arg04, fp
296d8     09 18 46 F0 | 	shr	arg04, #9
296dc     0C 1F 02 F1 | 	add	local01, arg04
296e0     1C 20 06 F1 | 	add	local02, #28
296e4     10 1F 62 FC | 	wrlong	local01, local02
296e8     18 4E 85 F1 | 	sub	fp, #24
296ec     A7 20 02 FB | 	rdlong	local02, fp
296f0     01 20 06 F1 | 	add	local02, #1
296f4     10 13 C2 FA | 	rdbyte	arg01, local02
296f8     40 4E 85 F1 | 	sub	fp, #64
296fc     A7 20 02 FB | 	rdlong	local02, fp
29700     10 15 02 F6 | 	mov	arg02, local02
29704     28 14 06 F1 | 	add	arg02, #40
29708     04 4E 85 F1 | 	sub	fp, #4
2970c     1C 20 06 F1 | 	add	local02, #28
29710     10 17 02 FB | 	rdlong	arg03, local02
29714     01 18 06 F6 | 	mov	arg04, #1
29718     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2971c     00 FA 0D F2 | 	cmp	result1, #0 wz
29720     10 4E 05 51 |  if_ne	add	fp, #16
29724     A7 02 68 5C |  if_ne	wrlong	#1, fp
29728     10 4E 85 51 |  if_ne	sub	fp, #16
2972c                 | LR__4212
2972c                 | LR__4213
2972c                 | LR__4214
2972c                 | LR__4215
2972c                 | LR__4216
2972c     10 4E 05 F1 | 	add	fp, #16
29730     A7 20 0A FB | 	rdlong	local02, fp wz
29734     10 4E 85 F1 | 	sub	fp, #16
29738     04 4E 05 51 |  if_ne	add	fp, #4
2973c     A7 20 02 5B |  if_ne	rdlong	local02, fp
29740     04 4E 85 51 |  if_ne	sub	fp, #4
29744     10 01 68 5C |  if_ne	wrlong	#0, local02
29748                 | ' 
29748                 | ' 	return res ;
29748     10 4E 05 F1 | 	add	fp, #16
2974c     A7 FA 01 FB | 	rdlong	result1, fp
29750     10 4E 85 F1 | 	sub	fp, #16
29754                 | LR__4217
29754     A7 F0 03 F6 | 	mov	ptra, fp
29758     B2 00 A0 FD | 	call	#popregs_
2975c                 | _fatfs_cc_f_open_ret
2975c     2D 00 64 FD | 	ret
29760                 | 
29760                 | _fatfs_cc_f_read
29760     0E 4A 05 F6 | 	mov	COUNT_, #14
29764     A8 00 A0 FD | 	call	#pushregs_
29768     38 F0 07 F1 | 	add	ptra, #56
2976c     04 4E 05 F1 | 	add	fp, #4
29770     A7 12 62 FC | 	wrlong	arg01, fp
29774     04 4E 05 F1 | 	add	fp, #4
29778     A7 14 62 FC | 	wrlong	arg02, fp
2977c     04 4E 05 F1 | 	add	fp, #4
29780     A7 16 62 FC | 	wrlong	arg03, fp
29784     04 4E 05 F1 | 	add	fp, #4
29788     A7 18 62 FC | 	wrlong	arg04, fp
2978c     08 4E 85 F1 | 	sub	fp, #8
29790     A7 FA 01 FB | 	rdlong	result1, fp
29794     2C 4E 05 F1 | 	add	fp, #44
29798     A7 FA 61 FC | 	wrlong	result1, fp
2979c     24 4E 85 F1 | 	sub	fp, #36
297a0     A7 FA 01 FB | 	rdlong	result1, fp
297a4     FD 00 68 FC | 	wrlong	#0, result1
297a8     0C 4E 85 F1 | 	sub	fp, #12
297ac     A7 12 02 FB | 	rdlong	arg01, fp
297b0     14 4E 05 F1 | 	add	fp, #20
297b4     A7 14 02 F6 | 	mov	arg02, fp
297b8     18 4E 85 F1 | 	sub	fp, #24
297bc     24 F7 BF FD | 	call	#_fatfs_cc_validate
297c0     14 4E 05 F1 | 	add	fp, #20
297c4     A7 FA 61 FC | 	wrlong	result1, fp
297c8     00 FA 4D F2 | 	cmps	result1, #0 wz
297cc     14 4E 85 F1 | 	sub	fp, #20
297d0     20 00 90 5D |  if_ne	jmp	#LR__4220
297d4     04 4E 05 F1 | 	add	fp, #4
297d8     A7 14 02 FB | 	rdlong	arg02, fp
297dc     11 14 06 F1 | 	add	arg02, #17
297e0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
297e4     10 4E 05 F1 | 	add	fp, #16
297e8     A7 14 62 FC | 	wrlong	arg02, fp
297ec     14 4E 85 F1 | 	sub	fp, #20
297f0     10 00 90 AD |  if_e	jmp	#LR__4221
297f4                 | LR__4220
297f4     14 4E 05 F1 | 	add	fp, #20
297f8     A7 FA 01 FB | 	rdlong	result1, fp
297fc     14 4E 85 F1 | 	sub	fp, #20
29800     EC 05 90 FD | 	jmp	#LR__4240
29804                 | LR__4221
29804     04 4E 05 F1 | 	add	fp, #4
29808     A7 18 02 FB | 	rdlong	arg04, fp
2980c     04 4E 85 F1 | 	sub	fp, #4
29810     10 18 06 F1 | 	add	arg04, #16
29814     0C 19 C2 FA | 	rdbyte	arg04, arg04
29818     01 18 CE F7 | 	test	arg04, #1 wz
2981c     07 FA 05 A6 |  if_e	mov	result1, #7
29820     CC 05 90 AD |  if_e	jmp	#LR__4240
29824     04 4E 05 F1 | 	add	fp, #4
29828     A7 1E 02 FB | 	rdlong	local01, fp
2982c     0F 21 02 F6 | 	mov	local02, local01
29830     0C 20 06 F1 | 	add	local02, #12
29834     10 23 02 FB | 	rdlong	local03, local02
29838     14 1E 06 F1 | 	add	local01, #20
2983c     0F 1F 02 FB | 	rdlong	local01, local01
29840     0F 23 82 F1 | 	sub	local03, local01
29844     20 4E 05 F1 | 	add	fp, #32
29848     A7 22 62 FC | 	wrlong	local03, fp
2984c     18 4E 85 F1 | 	sub	fp, #24
29850     A7 24 02 FB | 	rdlong	local04, fp
29854     0C 4E 85 F1 | 	sub	fp, #12
29858     11 25 1A F2 | 	cmp	local04, local03 wcz
2985c     24 4E 05 11 |  if_a	add	fp, #36
29860     A7 24 02 1B |  if_a	rdlong	local04, fp
29864     18 4E 85 11 |  if_a	sub	fp, #24
29868     A7 24 62 1C |  if_a	wrlong	local04, fp
2986c     0C 4E 85 11 |  if_a	sub	fp, #12
29870                 | ' 
29870                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
29870                 | LR__4222
29870     0C 4E 05 F1 | 	add	fp, #12
29874     A7 20 02 FB | 	rdlong	local02, fp
29878     0C 4E 85 F1 | 	sub	fp, #12
2987c     10 25 02 F6 | 	mov	local04, local02
29880     01 24 16 F2 | 	cmp	local04, #1 wc
29884     64 05 90 CD |  if_b	jmp	#LR__4239
29888     04 4E 05 F1 | 	add	fp, #4
2988c     A7 22 02 FB | 	rdlong	local03, fp
29890     04 4E 85 F1 | 	sub	fp, #4
29894     14 22 06 F1 | 	add	local03, #20
29898     11 23 02 FB | 	rdlong	local03, local03
2989c     FF 23 CE F7 | 	test	local03, #511 wz
298a0     3C 04 90 5D |  if_ne	jmp	#LR__4237
298a4     04 4E 05 F1 | 	add	fp, #4
298a8     A7 1E 02 FB | 	rdlong	local01, fp
298ac     14 1E 06 F1 | 	add	local01, #20
298b0     0F 23 02 FB | 	rdlong	local03, local01
298b4     09 22 46 F0 | 	shr	local03, #9
298b8     14 4E 05 F1 | 	add	fp, #20
298bc     A7 26 02 FB | 	rdlong	local05, fp
298c0     13 29 02 F6 | 	mov	local06, local05
298c4     0A 28 06 F1 | 	add	local06, #10
298c8     14 2B E2 FA | 	rdword	local07, local06
298cc     0A 28 86 F1 | 	sub	local06, #10
298d0     15 2D 32 F9 | 	getword	local08, local07, #0
298d4     01 2C 86 F1 | 	sub	local08, #1
298d8     16 23 0A F5 | 	and	local03, local08 wz
298dc     18 4E 05 F1 | 	add	fp, #24
298e0     A7 22 62 FC | 	wrlong	local03, fp
298e4     30 4E 85 F1 | 	sub	fp, #48
298e8     E0 00 90 5D |  if_ne	jmp	#LR__4227
298ec     04 4E 05 F1 | 	add	fp, #4
298f0     A7 22 02 FB | 	rdlong	local03, fp
298f4     04 4E 85 F1 | 	sub	fp, #4
298f8     14 22 06 F1 | 	add	local03, #20
298fc     11 23 0A FB | 	rdlong	local03, local03 wz
29900     20 00 90 5D |  if_ne	jmp	#LR__4223
29904     04 4E 05 F1 | 	add	fp, #4
29908     A7 22 02 FB | 	rdlong	local03, fp
2990c     08 22 06 F1 | 	add	local03, #8
29910     11 23 02 FB | 	rdlong	local03, local03
29914     18 4E 05 F1 | 	add	fp, #24
29918     A7 22 62 FC | 	wrlong	local03, fp
2991c     1C 4E 85 F1 | 	sub	fp, #28
29920     28 00 90 FD | 	jmp	#LR__4224
29924                 | LR__4223
29924     04 4E 05 F1 | 	add	fp, #4
29928     A7 2C 02 FB | 	rdlong	local08, fp
2992c     16 13 02 F6 | 	mov	arg01, local08
29930     04 4E 85 F1 | 	sub	fp, #4
29934     18 2C 06 F1 | 	add	local08, #24
29938     16 15 02 FB | 	rdlong	arg02, local08
2993c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
29940     1C 4E 05 F1 | 	add	fp, #28
29944     A7 FA 61 FC | 	wrlong	result1, fp
29948     1C 4E 85 F1 | 	sub	fp, #28
2994c                 | LR__4224
2994c     1C 4E 05 F1 | 	add	fp, #28
29950     A7 22 02 FB | 	rdlong	local03, fp
29954     1C 4E 85 F1 | 	sub	fp, #28
29958     02 22 16 F2 | 	cmp	local03, #2 wc
2995c     1C 00 90 3D |  if_ae	jmp	#LR__4225
29960     04 4E 05 F1 | 	add	fp, #4
29964     A7 22 02 FB | 	rdlong	local03, fp
29968     04 4E 85 F1 | 	sub	fp, #4
2996c     11 22 06 F1 | 	add	local03, #17
29970     11 05 48 FC | 	wrbyte	#2, local03
29974     02 FA 05 F6 | 	mov	result1, #2
29978     74 04 90 FD | 	jmp	#LR__4240
2997c                 | LR__4225
2997c     1C 4E 05 F1 | 	add	fp, #28
29980     A7 22 02 FB | 	rdlong	local03, fp
29984     1C 4E 85 F1 | 	sub	fp, #28
29988     FF FF 7F FF 
2998c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
29990     1C 00 90 5D |  if_ne	jmp	#LR__4226
29994     04 4E 05 F1 | 	add	fp, #4
29998     A7 22 02 FB | 	rdlong	local03, fp
2999c     04 4E 85 F1 | 	sub	fp, #4
299a0     11 22 06 F1 | 	add	local03, #17
299a4     11 03 48 FC | 	wrbyte	#1, local03
299a8     01 FA 05 F6 | 	mov	result1, #1
299ac     40 04 90 FD | 	jmp	#LR__4240
299b0                 | LR__4226
299b0     04 4E 05 F1 | 	add	fp, #4
299b4     A7 22 02 FB | 	rdlong	local03, fp
299b8     18 4E 05 F1 | 	add	fp, #24
299bc     A7 2C 02 FB | 	rdlong	local08, fp
299c0     1C 4E 85 F1 | 	sub	fp, #28
299c4     18 22 06 F1 | 	add	local03, #24
299c8     11 2D 62 FC | 	wrlong	local08, local03
299cc                 | LR__4227
299cc     18 4E 05 F1 | 	add	fp, #24
299d0     A7 12 02 FB | 	rdlong	arg01, fp
299d4     14 4E 85 F1 | 	sub	fp, #20
299d8     A7 22 02 FB | 	rdlong	local03, fp
299dc     04 4E 85 F1 | 	sub	fp, #4
299e0     18 22 06 F1 | 	add	local03, #24
299e4     11 15 02 FB | 	rdlong	arg02, local03
299e8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
299ec     20 4E 05 F1 | 	add	fp, #32
299f0     A7 FA 61 FC | 	wrlong	result1, fp
299f4     20 4E 85 F1 | 	sub	fp, #32
299f8     00 FA 0D F2 | 	cmp	result1, #0 wz
299fc     1C 00 90 5D |  if_ne	jmp	#LR__4228
29a00     04 4E 05 F1 | 	add	fp, #4
29a04     A7 22 02 FB | 	rdlong	local03, fp
29a08     04 4E 85 F1 | 	sub	fp, #4
29a0c     11 22 06 F1 | 	add	local03, #17
29a10     11 05 48 FC | 	wrbyte	#2, local03
29a14     02 FA 05 F6 | 	mov	result1, #2
29a18     D4 03 90 FD | 	jmp	#LR__4240
29a1c                 | LR__4228
29a1c     20 4E 05 F1 | 	add	fp, #32
29a20     A7 22 02 FB | 	rdlong	local03, fp
29a24     10 4E 05 F1 | 	add	fp, #16
29a28     A7 2C 02 FB | 	rdlong	local08, fp
29a2c     16 23 02 F1 | 	add	local03, local08
29a30     10 4E 85 F1 | 	sub	fp, #16
29a34     A7 22 62 FC | 	wrlong	local03, fp
29a38     14 4E 85 F1 | 	sub	fp, #20
29a3c     A7 22 02 FB | 	rdlong	local03, fp
29a40     09 22 46 F0 | 	shr	local03, #9
29a44     20 4E 05 F1 | 	add	fp, #32
29a48     A7 22 62 FC | 	wrlong	local03, fp
29a4c     2C 4E 85 F1 | 	sub	fp, #44
29a50     01 22 16 F2 | 	cmp	local03, #1 wc
29a54     5C 01 90 CD |  if_b	jmp	#LR__4232
29a58     30 4E 05 F1 | 	add	fp, #48
29a5c     A7 22 02 FB | 	rdlong	local03, fp
29a60     04 4E 85 F1 | 	sub	fp, #4
29a64     A7 2C 02 FB | 	rdlong	local08, fp
29a68     16 23 02 F1 | 	add	local03, local08
29a6c     14 4E 85 F1 | 	sub	fp, #20
29a70     A7 2C 02 FB | 	rdlong	local08, fp
29a74     18 4E 85 F1 | 	sub	fp, #24
29a78     0A 2C 06 F1 | 	add	local08, #10
29a7c     16 2D E2 FA | 	rdword	local08, local08
29a80     16 23 1A F2 | 	cmp	local03, local08 wcz
29a84     28 00 90 ED |  if_be	jmp	#LR__4229
29a88     18 4E 05 F1 | 	add	fp, #24
29a8c     A7 1E 02 FB | 	rdlong	local01, fp
29a90     0A 1E 06 F1 | 	add	local01, #10
29a94     0F 23 E2 FA | 	rdword	local03, local01
29a98     18 4E 05 F1 | 	add	fp, #24
29a9c     A7 2C 02 FB | 	rdlong	local08, fp
29aa0     16 23 82 F1 | 	sub	local03, local08
29aa4     04 4E 85 F1 | 	sub	fp, #4
29aa8     A7 22 62 FC | 	wrlong	local03, fp
29aac     2C 4E 85 F1 | 	sub	fp, #44
29ab0                 | LR__4229
29ab0     18 4E 05 F1 | 	add	fp, #24
29ab4     A7 1E 02 FB | 	rdlong	local01, fp
29ab8     01 1E 06 F1 | 	add	local01, #1
29abc     0F 13 C2 FA | 	rdbyte	arg01, local01
29ac0     1C 4E 05 F1 | 	add	fp, #28
29ac4     A7 14 02 FB | 	rdlong	arg02, fp
29ac8     14 4E 85 F1 | 	sub	fp, #20
29acc     A7 16 02 FB | 	rdlong	arg03, fp
29ad0     0C 4E 05 F1 | 	add	fp, #12
29ad4     A7 18 02 FB | 	rdlong	arg04, fp
29ad8     2C 4E 85 F1 | 	sub	fp, #44
29adc     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
29ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ae4     1C 00 90 AD |  if_e	jmp	#LR__4230
29ae8     04 4E 05 F1 | 	add	fp, #4
29aec     A7 22 02 FB | 	rdlong	local03, fp
29af0     04 4E 85 F1 | 	sub	fp, #4
29af4     11 22 06 F1 | 	add	local03, #17
29af8     11 03 48 FC | 	wrbyte	#1, local03
29afc     01 FA 05 F6 | 	mov	result1, #1
29b00     EC 02 90 FD | 	jmp	#LR__4240
29b04                 | LR__4230
29b04     04 4E 05 F1 | 	add	fp, #4
29b08     A7 1E 02 FB | 	rdlong	local01, fp
29b0c     04 4E 85 F1 | 	sub	fp, #4
29b10     10 1E 06 F1 | 	add	local01, #16
29b14     0F 23 C2 FA | 	rdbyte	local03, local01
29b18     80 22 CE F7 | 	test	local03, #128 wz
29b1c     78 00 90 AD |  if_e	jmp	#LR__4231
29b20     04 4E 05 F1 | 	add	fp, #4
29b24     A7 2C 02 FB | 	rdlong	local08, fp
29b28     1C 2C 06 F1 | 	add	local08, #28
29b2c     16 2D 02 FB | 	rdlong	local08, local08
29b30     1C 4E 05 F1 | 	add	fp, #28
29b34     A7 2E 02 FB | 	rdlong	local09, fp
29b38     17 2D 82 F1 | 	sub	local08, local09
29b3c     0C 4E 05 F1 | 	add	fp, #12
29b40     A7 30 02 FB | 	rdlong	local10, fp
29b44     2C 4E 85 F1 | 	sub	fp, #44
29b48     18 33 02 F6 | 	mov	local11, local10
29b4c     19 2D 12 F2 | 	cmp	local08, local11 wc
29b50     44 00 90 3D |  if_ae	jmp	#LR__4231
29b54     34 4E 05 F1 | 	add	fp, #52
29b58     A7 12 02 FB | 	rdlong	arg01, fp
29b5c     30 4E 85 F1 | 	sub	fp, #48
29b60     A7 14 02 FB | 	rdlong	arg02, fp
29b64     0A 33 02 F6 | 	mov	local11, arg02
29b68     1C 32 06 F1 | 	add	local11, #28
29b6c     19 2F 02 FB | 	rdlong	local09, local11
29b70     1C 4E 05 F1 | 	add	fp, #28
29b74     A7 26 02 FB | 	rdlong	local05, fp
29b78     13 2F 82 F1 | 	sub	local09, local05
29b7c     09 2E 66 F0 | 	shl	local09, #9
29b80     17 33 02 F6 | 	mov	local11, local09
29b84     17 13 02 F1 | 	add	arg01, local09
29b88     20 4E 85 F1 | 	sub	fp, #32
29b8c     28 14 06 F1 | 	add	arg02, #40
29b90     09 16 C6 F9 | 	decod	arg03, #9
29b94     C0 48 BF FD | 	call	#__system____builtin_memmove
29b98                 | LR__4231
29b98     2C 4E 05 F1 | 	add	fp, #44
29b9c     A7 22 02 FB | 	rdlong	local03, fp
29ba0     09 22 66 F0 | 	shl	local03, #9
29ba4     04 4E 85 F1 | 	sub	fp, #4
29ba8     A7 22 62 FC | 	wrlong	local03, fp
29bac     28 4E 85 F1 | 	sub	fp, #40
29bb0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
29bb0                 | ' 				}
29bb0                 | ' 
29bb0                 | ' 
29bb0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
29bb0                 | ' 				continue;
29bb0     B4 01 90 FD | 	jmp	#LR__4238
29bb4                 | LR__4232
29bb4     04 4E 05 F1 | 	add	fp, #4
29bb8     A7 22 02 FB | 	rdlong	local03, fp
29bbc     1C 22 06 F1 | 	add	local03, #28
29bc0     11 23 02 FB | 	rdlong	local03, local03
29bc4     1C 4E 05 F1 | 	add	fp, #28
29bc8     A7 1E 02 FB | 	rdlong	local01, fp
29bcc     20 4E 85 F1 | 	sub	fp, #32
29bd0     0F 23 0A F2 | 	cmp	local03, local01 wz
29bd4     EC 00 90 AD |  if_e	jmp	#LR__4236
29bd8     04 4E 05 F1 | 	add	fp, #4
29bdc     A7 1E 02 FB | 	rdlong	local01, fp
29be0     04 4E 85 F1 | 	sub	fp, #4
29be4     10 1E 06 F1 | 	add	local01, #16
29be8     0F 23 C2 FA | 	rdbyte	local03, local01
29bec     80 22 CE F7 | 	test	local03, #128 wz
29bf0     7C 00 90 AD |  if_e	jmp	#LR__4234
29bf4     18 4E 05 F1 | 	add	fp, #24
29bf8     A7 1E 02 FB | 	rdlong	local01, fp
29bfc     01 1E 06 F1 | 	add	local01, #1
29c00     0F 13 C2 FA | 	rdbyte	arg01, local01
29c04     14 4E 85 F1 | 	sub	fp, #20
29c08     A7 22 02 FB | 	rdlong	local03, fp
29c0c     11 15 02 F6 | 	mov	arg02, local03
29c10     28 14 06 F1 | 	add	arg02, #40
29c14     04 4E 85 F1 | 	sub	fp, #4
29c18     1C 22 06 F1 | 	add	local03, #28
29c1c     11 17 02 FB | 	rdlong	arg03, local03
29c20     01 18 06 F6 | 	mov	arg04, #1
29c24     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
29c28     00 FA 0D F2 | 	cmp	result1, #0 wz
29c2c     1C 00 90 AD |  if_e	jmp	#LR__4233
29c30     04 4E 05 F1 | 	add	fp, #4
29c34     A7 22 02 FB | 	rdlong	local03, fp
29c38     04 4E 85 F1 | 	sub	fp, #4
29c3c     11 22 06 F1 | 	add	local03, #17
29c40     11 03 48 FC | 	wrbyte	#1, local03
29c44     01 FA 05 F6 | 	mov	result1, #1
29c48     A4 01 90 FD | 	jmp	#LR__4240
29c4c                 | LR__4233
29c4c     04 4E 05 F1 | 	add	fp, #4
29c50     A7 32 02 FB | 	rdlong	local11, fp
29c54     19 23 02 F6 | 	mov	local03, local11
29c58     04 4E 85 F1 | 	sub	fp, #4
29c5c     10 32 06 F1 | 	add	local11, #16
29c60     19 33 C2 FA | 	rdbyte	local11, local11
29c64     7F 32 06 F5 | 	and	local11, #127
29c68     10 22 06 F1 | 	add	local03, #16
29c6c     11 33 42 FC | 	wrbyte	local11, local03
29c70                 | LR__4234
29c70     18 4E 05 F1 | 	add	fp, #24
29c74     A7 1E 02 FB | 	rdlong	local01, fp
29c78     01 1E 06 F1 | 	add	local01, #1
29c7c     0F 13 C2 FA | 	rdbyte	arg01, local01
29c80     14 4E 85 F1 | 	sub	fp, #20
29c84     A7 14 02 FB | 	rdlong	arg02, fp
29c88     28 14 06 F1 | 	add	arg02, #40
29c8c     1C 4E 05 F1 | 	add	fp, #28
29c90     A7 16 02 FB | 	rdlong	arg03, fp
29c94     20 4E 85 F1 | 	sub	fp, #32
29c98     01 18 06 F6 | 	mov	arg04, #1
29c9c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
29ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ca4     1C 00 90 AD |  if_e	jmp	#LR__4235
29ca8     04 4E 05 F1 | 	add	fp, #4
29cac     A7 22 02 FB | 	rdlong	local03, fp
29cb0     04 4E 85 F1 | 	sub	fp, #4
29cb4     11 22 06 F1 | 	add	local03, #17
29cb8     11 03 48 FC | 	wrbyte	#1, local03
29cbc     01 FA 05 F6 | 	mov	result1, #1
29cc0     2C 01 90 FD | 	jmp	#LR__4240
29cc4                 | LR__4235
29cc4                 | LR__4236
29cc4     04 4E 05 F1 | 	add	fp, #4
29cc8     A7 22 02 FB | 	rdlong	local03, fp
29ccc     1C 4E 05 F1 | 	add	fp, #28
29cd0     A7 32 02 FB | 	rdlong	local11, fp
29cd4     20 4E 85 F1 | 	sub	fp, #32
29cd8     1C 22 06 F1 | 	add	local03, #28
29cdc     11 33 62 FC | 	wrlong	local11, local03
29ce0                 | LR__4237
29ce0     04 4E 05 F1 | 	add	fp, #4
29ce4     A7 1E 02 FB | 	rdlong	local01, fp
29ce8     14 1E 06 F1 | 	add	local01, #20
29cec     0F 33 02 FB | 	rdlong	local11, local01
29cf0     FF 33 06 F5 | 	and	local11, #511
29cf4     09 22 C6 F9 | 	decod	local03, #9
29cf8     19 23 82 F1 | 	sub	local03, local11
29cfc     24 4E 05 F1 | 	add	fp, #36
29d00     A7 22 62 FC | 	wrlong	local03, fp
29d04     1C 4E 85 F1 | 	sub	fp, #28
29d08     A7 32 02 FB | 	rdlong	local11, fp
29d0c     0C 4E 85 F1 | 	sub	fp, #12
29d10     19 23 1A F2 | 	cmp	local03, local11 wcz
29d14     0C 4E 05 11 |  if_a	add	fp, #12
29d18     A7 22 02 1B |  if_a	rdlong	local03, fp
29d1c     1C 4E 05 11 |  if_a	add	fp, #28
29d20     A7 22 62 1C |  if_a	wrlong	local03, fp
29d24     28 4E 85 11 |  if_a	sub	fp, #40
29d28     34 4E 05 F1 | 	add	fp, #52
29d2c     A7 12 02 FB | 	rdlong	arg01, fp
29d30     30 4E 85 F1 | 	sub	fp, #48
29d34     A7 28 02 FB | 	rdlong	local06, fp
29d38     14 15 02 F6 | 	mov	arg02, local06
29d3c     28 14 06 F1 | 	add	arg02, #40
29d40     14 28 06 F1 | 	add	local06, #20
29d44     14 33 02 FB | 	rdlong	local11, local06
29d48     19 2F 02 F6 | 	mov	local09, local11
29d4c     17 31 02 F6 | 	mov	local10, local09
29d50     FF 31 06 F5 | 	and	local10, #511
29d54     18 15 02 F1 | 	add	arg02, local10
29d58     24 4E 05 F1 | 	add	fp, #36
29d5c     A7 16 02 FB | 	rdlong	arg03, fp
29d60     28 4E 85 F1 | 	sub	fp, #40
29d64     F0 46 BF FD | 	call	#__system____builtin_memmove
29d68                 | LR__4238
29d68     0C 4E 05 F1 | 	add	fp, #12
29d6c     A7 22 02 FB | 	rdlong	local03, fp
29d70     1C 4E 05 F1 | 	add	fp, #28
29d74     A7 2C 02 FB | 	rdlong	local08, fp
29d78     16 23 82 F1 | 	sub	local03, local08
29d7c     1C 4E 85 F1 | 	sub	fp, #28
29d80     A7 22 62 FC | 	wrlong	local03, fp
29d84     04 4E 05 F1 | 	add	fp, #4
29d88     A7 1E 02 FB | 	rdlong	local01, fp
29d8c     0F 2B 02 FB | 	rdlong	local07, local01
29d90     18 4E 05 F1 | 	add	fp, #24
29d94     A7 2C 02 FB | 	rdlong	local08, fp
29d98     16 2B 02 F1 | 	add	local07, local08
29d9c     0F 2B 62 FC | 	wrlong	local07, local01
29da0     0C 4E 05 F1 | 	add	fp, #12
29da4     A7 22 02 FB | 	rdlong	local03, fp
29da8     0C 4E 85 F1 | 	sub	fp, #12
29dac     A7 34 02 FB | 	rdlong	local12, fp
29db0     1A 23 02 F1 | 	add	local03, local12
29db4     0C 4E 05 F1 | 	add	fp, #12
29db8     A7 22 62 FC | 	wrlong	local03, fp
29dbc     30 4E 85 F1 | 	sub	fp, #48
29dc0     A7 36 02 FB | 	rdlong	local13, fp
29dc4     1B 23 02 F6 | 	mov	local03, local13
29dc8     14 36 06 F1 | 	add	local13, #20
29dcc     1B 39 02 FB | 	rdlong	local14, local13
29dd0     24 4E 05 F1 | 	add	fp, #36
29dd4     A7 28 02 FB | 	rdlong	local06, fp
29dd8     28 4E 85 F1 | 	sub	fp, #40
29ddc     14 39 02 F1 | 	add	local14, local06
29de0     14 22 06 F1 | 	add	local03, #20
29de4     11 39 62 FC | 	wrlong	local14, local03
29de8     84 FA 9F FD | 	jmp	#LR__4222
29dec                 | LR__4239
29dec                 | ' 
29dec                 | ' 
29dec                 | ' 
29dec                 | ' 
29dec                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
29dec                 | ' 
29dec                 | ' 	}
29dec                 | ' 
29dec                 | ' 	return FR_OK ;
29dec     00 FA 05 F6 | 	mov	result1, #0
29df0                 | LR__4240
29df0     A7 F0 03 F6 | 	mov	ptra, fp
29df4     B2 00 A0 FD | 	call	#popregs_
29df8                 | _fatfs_cc_f_read_ret
29df8     2D 00 64 FD | 	ret
29dfc                 | 
29dfc                 | _fatfs_cc_f_write
29dfc     15 4A 05 F6 | 	mov	COUNT_, #21
29e00     A8 00 A0 FD | 	call	#pushregs_
29e04     34 F0 07 F1 | 	add	ptra, #52
29e08     04 4E 05 F1 | 	add	fp, #4
29e0c     A7 12 62 FC | 	wrlong	arg01, fp
29e10     04 4E 05 F1 | 	add	fp, #4
29e14     A7 14 62 FC | 	wrlong	arg02, fp
29e18     04 4E 05 F1 | 	add	fp, #4
29e1c     A7 16 62 FC | 	wrlong	arg03, fp
29e20     04 4E 05 F1 | 	add	fp, #4
29e24     A7 18 62 FC | 	wrlong	arg04, fp
29e28     08 4E 85 F1 | 	sub	fp, #8
29e2c     A7 FA 01 FB | 	rdlong	result1, fp
29e30     28 4E 05 F1 | 	add	fp, #40
29e34     A7 FA 61 FC | 	wrlong	result1, fp
29e38     20 4E 85 F1 | 	sub	fp, #32
29e3c     A7 FA 01 FB | 	rdlong	result1, fp
29e40     FD 00 68 FC | 	wrlong	#0, result1
29e44     0C 4E 85 F1 | 	sub	fp, #12
29e48     A7 12 02 FB | 	rdlong	arg01, fp
29e4c     14 4E 05 F1 | 	add	fp, #20
29e50     A7 14 02 F6 | 	mov	arg02, fp
29e54     18 4E 85 F1 | 	sub	fp, #24
29e58     88 F0 BF FD | 	call	#_fatfs_cc_validate
29e5c     14 4E 05 F1 | 	add	fp, #20
29e60     A7 FA 61 FC | 	wrlong	result1, fp
29e64     00 FA 4D F2 | 	cmps	result1, #0 wz
29e68     14 4E 85 F1 | 	sub	fp, #20
29e6c     20 00 90 5D |  if_ne	jmp	#LR__4250
29e70     04 4E 05 F1 | 	add	fp, #4
29e74     A7 14 02 FB | 	rdlong	arg02, fp
29e78     11 14 06 F1 | 	add	arg02, #17
29e7c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
29e80     10 4E 05 F1 | 	add	fp, #16
29e84     A7 14 62 FC | 	wrlong	arg02, fp
29e88     14 4E 85 F1 | 	sub	fp, #20
29e8c     10 00 90 AD |  if_e	jmp	#LR__4251
29e90                 | LR__4250
29e90     14 4E 05 F1 | 	add	fp, #20
29e94     A7 FA 01 FB | 	rdlong	result1, fp
29e98     14 4E 85 F1 | 	sub	fp, #20
29e9c     44 07 90 FD | 	jmp	#LR__4273
29ea0                 | LR__4251
29ea0     04 4E 05 F1 | 	add	fp, #4
29ea4     A7 14 02 FB | 	rdlong	arg02, fp
29ea8     04 4E 85 F1 | 	sub	fp, #4
29eac     10 14 06 F1 | 	add	arg02, #16
29eb0     0A 15 C2 FA | 	rdbyte	arg02, arg02
29eb4     02 14 CE F7 | 	test	arg02, #2 wz
29eb8     07 FA 05 A6 |  if_e	mov	result1, #7
29ebc     24 07 90 AD |  if_e	jmp	#LR__4273
29ec0     04 4E 05 F1 | 	add	fp, #4
29ec4     A7 14 02 FB | 	rdlong	arg02, fp
29ec8     0A 13 02 F6 | 	mov	arg01, arg02
29ecc     14 12 06 F1 | 	add	arg01, #20
29ed0     09 13 02 FB | 	rdlong	arg01, arg01
29ed4     08 4E 05 F1 | 	add	fp, #8
29ed8     A7 FA 01 FB | 	rdlong	result1, fp
29edc     FD 12 02 F1 | 	add	arg01, result1
29ee0     0C 4E 85 F1 | 	sub	fp, #12
29ee4     14 14 06 F1 | 	add	arg02, #20
29ee8     0A FB 01 FB | 	rdlong	result1, arg02
29eec     FD 12 12 F2 | 	cmp	arg01, result1 wc
29ef0     24 00 90 3D |  if_ae	jmp	#LR__4252
29ef4     04 4E 05 F1 | 	add	fp, #4
29ef8     A7 14 02 FB | 	rdlong	arg02, fp
29efc     01 FA 65 F6 | 	neg	result1, #1
29f00     14 14 06 F1 | 	add	arg02, #20
29f04     0A 15 02 FB | 	rdlong	arg02, arg02
29f08     0A FB 81 F1 | 	sub	result1, arg02
29f0c     08 4E 05 F1 | 	add	fp, #8
29f10     A7 FA 61 FC | 	wrlong	result1, fp
29f14     0C 4E 85 F1 | 	sub	fp, #12
29f18                 | LR__4252
29f18                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
29f18                 | ' 	}
29f18                 | ' 
29f18                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
29f18                 | LR__4253
29f18     0C 4E 05 F1 | 	add	fp, #12
29f1c     A7 FA 01 FB | 	rdlong	result1, fp
29f20     0C 4E 85 F1 | 	sub	fp, #12
29f24     01 FA 15 F2 | 	cmp	result1, #1 wc
29f28     90 06 90 CD |  if_b	jmp	#LR__4272
29f2c     04 4E 05 F1 | 	add	fp, #4
29f30     A7 FA 01 FB | 	rdlong	result1, fp
29f34     04 4E 85 F1 | 	sub	fp, #4
29f38     14 FA 05 F1 | 	add	result1, #20
29f3c     FD FA 01 FB | 	rdlong	result1, result1
29f40     FF FB CD F7 | 	test	result1, #511 wz
29f44     D8 04 90 5D |  if_ne	jmp	#LR__4268
29f48     04 4E 05 F1 | 	add	fp, #4
29f4c     A7 FA 01 FB | 	rdlong	result1, fp
29f50     14 FA 05 F1 | 	add	result1, #20
29f54     FD FA 01 FB | 	rdlong	result1, result1
29f58     09 FA 45 F0 | 	shr	result1, #9
29f5c     14 4E 05 F1 | 	add	fp, #20
29f60     A7 14 02 FB | 	rdlong	arg02, fp
29f64     0A 14 06 F1 | 	add	arg02, #10
29f68     0A 19 E2 FA | 	rdword	arg04, arg02
29f6c     0C 15 32 F9 | 	getword	arg02, arg04, #0
29f70     01 14 86 F1 | 	sub	arg02, #1
29f74     0A FB 09 F5 | 	and	result1, arg02 wz
29f78     14 4E 05 F1 | 	add	fp, #20
29f7c     A7 FA 61 FC | 	wrlong	result1, fp
29f80     2C 4E 85 F1 | 	sub	fp, #44
29f84     44 01 90 5D |  if_ne	jmp	#LR__4259
29f88     04 4E 05 F1 | 	add	fp, #4
29f8c     A7 FA 01 FB | 	rdlong	result1, fp
29f90     04 4E 85 F1 | 	sub	fp, #4
29f94     14 FA 05 F1 | 	add	result1, #20
29f98     FD 14 0A FB | 	rdlong	arg02, result1 wz
29f9c     44 00 90 5D |  if_ne	jmp	#LR__4254
29fa0     04 4E 05 F1 | 	add	fp, #4
29fa4     A7 14 02 FB | 	rdlong	arg02, fp
29fa8     08 14 06 F1 | 	add	arg02, #8
29fac     0A 15 0A FB | 	rdlong	arg02, arg02 wz
29fb0     18 4E 05 F1 | 	add	fp, #24
29fb4     A7 14 62 FC | 	wrlong	arg02, fp
29fb8     1C 4E 85 F1 | 	sub	fp, #28
29fbc     4C 00 90 5D |  if_ne	jmp	#LR__4255
29fc0     04 4E 05 F1 | 	add	fp, #4
29fc4     A7 12 02 FB | 	rdlong	arg01, fp
29fc8     04 4E 85 F1 | 	sub	fp, #4
29fcc     00 14 06 F6 | 	mov	arg02, #0
29fd0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
29fd4     1C 4E 05 F1 | 	add	fp, #28
29fd8     A7 FA 61 FC | 	wrlong	result1, fp
29fdc     1C 4E 85 F1 | 	sub	fp, #28
29fe0     28 00 90 FD | 	jmp	#LR__4255
29fe4                 | LR__4254
29fe4     04 4E 05 F1 | 	add	fp, #4
29fe8     A7 18 02 FB | 	rdlong	arg04, fp
29fec     0C 13 02 F6 | 	mov	arg01, arg04
29ff0     04 4E 85 F1 | 	sub	fp, #4
29ff4     18 18 06 F1 | 	add	arg04, #24
29ff8     0C 15 02 FB | 	rdlong	arg02, arg04
29ffc     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2a000     1C 4E 05 F1 | 	add	fp, #28
2a004     A7 FA 61 FC | 	wrlong	result1, fp
2a008     1C 4E 85 F1 | 	sub	fp, #28
2a00c                 | LR__4255
2a00c     1C 4E 05 F1 | 	add	fp, #28
2a010     A7 FA 09 FB | 	rdlong	result1, fp wz
2a014     1C 4E 85 F1 | 	sub	fp, #28
2a018     A0 05 90 AD |  if_e	jmp	#LR__4272
2a01c     1C 4E 05 F1 | 	add	fp, #28
2a020     A7 FA 01 FB | 	rdlong	result1, fp
2a024     1C 4E 85 F1 | 	sub	fp, #28
2a028     01 FA 0D F2 | 	cmp	result1, #1 wz
2a02c     1C 00 90 5D |  if_ne	jmp	#LR__4256
2a030     04 4E 05 F1 | 	add	fp, #4
2a034     A7 FA 01 FB | 	rdlong	result1, fp
2a038     04 4E 85 F1 | 	sub	fp, #4
2a03c     11 FA 05 F1 | 	add	result1, #17
2a040     FD 04 48 FC | 	wrbyte	#2, result1
2a044     02 FA 05 F6 | 	mov	result1, #2
2a048     98 05 90 FD | 	jmp	#LR__4273
2a04c                 | LR__4256
2a04c     1C 4E 05 F1 | 	add	fp, #28
2a050     A7 FA 01 FB | 	rdlong	result1, fp
2a054     1C 4E 85 F1 | 	sub	fp, #28
2a058     FF FF 7F FF 
2a05c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a060     1C 00 90 5D |  if_ne	jmp	#LR__4257
2a064     04 4E 05 F1 | 	add	fp, #4
2a068     A7 FA 01 FB | 	rdlong	result1, fp
2a06c     04 4E 85 F1 | 	sub	fp, #4
2a070     11 FA 05 F1 | 	add	result1, #17
2a074     FD 02 48 FC | 	wrbyte	#1, result1
2a078     01 FA 05 F6 | 	mov	result1, #1
2a07c     64 05 90 FD | 	jmp	#LR__4273
2a080                 | LR__4257
2a080     04 4E 05 F1 | 	add	fp, #4
2a084     A7 FA 01 FB | 	rdlong	result1, fp
2a088     18 4E 05 F1 | 	add	fp, #24
2a08c     A7 18 02 FB | 	rdlong	arg04, fp
2a090     18 FA 05 F1 | 	add	result1, #24
2a094     FD 18 62 FC | 	wrlong	arg04, result1
2a098     18 4E 85 F1 | 	sub	fp, #24
2a09c     A7 FA 01 FB | 	rdlong	result1, fp
2a0a0     04 4E 85 F1 | 	sub	fp, #4
2a0a4     08 FA 05 F1 | 	add	result1, #8
2a0a8     FD FA 09 FB | 	rdlong	result1, result1 wz
2a0ac     1C 00 90 5D |  if_ne	jmp	#LR__4258
2a0b0     04 4E 05 F1 | 	add	fp, #4
2a0b4     A7 18 02 FB | 	rdlong	arg04, fp
2a0b8     18 4E 05 F1 | 	add	fp, #24
2a0bc     A7 FA 01 FB | 	rdlong	result1, fp
2a0c0     1C 4E 85 F1 | 	sub	fp, #28
2a0c4     08 18 06 F1 | 	add	arg04, #8
2a0c8     0C FB 61 FC | 	wrlong	result1, arg04
2a0cc                 | LR__4258
2a0cc                 | LR__4259
2a0cc     04 4E 05 F1 | 	add	fp, #4
2a0d0     A7 18 02 FB | 	rdlong	arg04, fp
2a0d4     04 4E 85 F1 | 	sub	fp, #4
2a0d8     10 18 06 F1 | 	add	arg04, #16
2a0dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a0e0     80 18 CE F7 | 	test	arg04, #128 wz
2a0e4     7C 00 90 AD |  if_e	jmp	#LR__4261
2a0e8     18 4E 05 F1 | 	add	fp, #24
2a0ec     A7 18 02 FB | 	rdlong	arg04, fp
2a0f0     01 18 06 F1 | 	add	arg04, #1
2a0f4     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a0f8     14 4E 85 F1 | 	sub	fp, #20
2a0fc     A7 18 02 FB | 	rdlong	arg04, fp
2a100     0C 15 02 F6 | 	mov	arg02, arg04
2a104     28 14 06 F1 | 	add	arg02, #40
2a108     04 4E 85 F1 | 	sub	fp, #4
2a10c     1C 18 06 F1 | 	add	arg04, #28
2a110     0C 17 02 FB | 	rdlong	arg03, arg04
2a114     01 18 06 F6 | 	mov	arg04, #1
2a118     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2a11c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a120     1C 00 90 AD |  if_e	jmp	#LR__4260
2a124     04 4E 05 F1 | 	add	fp, #4
2a128     A7 FA 01 FB | 	rdlong	result1, fp
2a12c     04 4E 85 F1 | 	sub	fp, #4
2a130     11 FA 05 F1 | 	add	result1, #17
2a134     FD 02 48 FC | 	wrbyte	#1, result1
2a138     01 FA 05 F6 | 	mov	result1, #1
2a13c     A4 04 90 FD | 	jmp	#LR__4273
2a140                 | LR__4260
2a140     04 4E 05 F1 | 	add	fp, #4
2a144     A7 18 02 FB | 	rdlong	arg04, fp
2a148     0C FB 01 F6 | 	mov	result1, arg04
2a14c     04 4E 85 F1 | 	sub	fp, #4
2a150     10 18 06 F1 | 	add	arg04, #16
2a154     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a158     7F 18 06 F5 | 	and	arg04, #127
2a15c     10 FA 05 F1 | 	add	result1, #16
2a160     FD 18 42 FC | 	wrbyte	arg04, result1
2a164                 | LR__4261
2a164     18 4E 05 F1 | 	add	fp, #24
2a168     A7 12 02 FB | 	rdlong	arg01, fp
2a16c     14 4E 85 F1 | 	sub	fp, #20
2a170     A7 14 02 FB | 	rdlong	arg02, fp
2a174     04 4E 85 F1 | 	sub	fp, #4
2a178     18 14 06 F1 | 	add	arg02, #24
2a17c     0A 15 02 FB | 	rdlong	arg02, arg02
2a180     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2a184     20 4E 05 F1 | 	add	fp, #32
2a188     A7 FA 61 FC | 	wrlong	result1, fp
2a18c     20 4E 85 F1 | 	sub	fp, #32
2a190     00 FA 0D F2 | 	cmp	result1, #0 wz
2a194     1C 00 90 5D |  if_ne	jmp	#LR__4262
2a198     04 4E 05 F1 | 	add	fp, #4
2a19c     A7 FA 01 FB | 	rdlong	result1, fp
2a1a0     04 4E 85 F1 | 	sub	fp, #4
2a1a4     11 FA 05 F1 | 	add	result1, #17
2a1a8     FD 04 48 FC | 	wrbyte	#2, result1
2a1ac     02 FA 05 F6 | 	mov	result1, #2
2a1b0     30 04 90 FD | 	jmp	#LR__4273
2a1b4                 | LR__4262
2a1b4     20 4E 05 F1 | 	add	fp, #32
2a1b8     A7 FA 01 FB | 	rdlong	result1, fp
2a1bc     0C 4E 05 F1 | 	add	fp, #12
2a1c0     A7 1E 02 FB | 	rdlong	local01, fp
2a1c4     0F FB 01 F1 | 	add	result1, local01
2a1c8     0C 4E 85 F1 | 	sub	fp, #12
2a1cc     A7 FA 61 FC | 	wrlong	result1, fp
2a1d0     14 4E 85 F1 | 	sub	fp, #20
2a1d4     A7 FA 01 FB | 	rdlong	result1, fp
2a1d8     09 FA 45 F0 | 	shr	result1, #9
2a1dc     1C 4E 05 F1 | 	add	fp, #28
2a1e0     A7 FA 61 FC | 	wrlong	result1, fp
2a1e4     28 4E 85 F1 | 	sub	fp, #40
2a1e8     01 FA 15 F2 | 	cmp	result1, #1 wc
2a1ec     60 01 90 CD |  if_b	jmp	#LR__4266
2a1f0     2C 4E 05 F1 | 	add	fp, #44
2a1f4     A7 FA 01 FB | 	rdlong	result1, fp
2a1f8     04 4E 85 F1 | 	sub	fp, #4
2a1fc     A7 18 02 FB | 	rdlong	arg04, fp
2a200     0C FB 01 F1 | 	add	result1, arg04
2a204     10 4E 85 F1 | 	sub	fp, #16
2a208     A7 18 02 FB | 	rdlong	arg04, fp
2a20c     18 4E 85 F1 | 	sub	fp, #24
2a210     0A 18 06 F1 | 	add	arg04, #10
2a214     0C 19 E2 FA | 	rdword	arg04, arg04
2a218     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2a21c     28 00 90 ED |  if_be	jmp	#LR__4263
2a220     18 4E 05 F1 | 	add	fp, #24
2a224     A7 FA 01 FB | 	rdlong	result1, fp
2a228     0A FA 05 F1 | 	add	result1, #10
2a22c     FD FA E1 FA | 	rdword	result1, result1
2a230     14 4E 05 F1 | 	add	fp, #20
2a234     A7 18 02 FB | 	rdlong	arg04, fp
2a238     0C FB 81 F1 | 	sub	result1, arg04
2a23c     04 4E 85 F1 | 	sub	fp, #4
2a240     A7 FA 61 FC | 	wrlong	result1, fp
2a244     28 4E 85 F1 | 	sub	fp, #40
2a248                 | LR__4263
2a248     18 4E 05 F1 | 	add	fp, #24
2a24c     A7 18 02 FB | 	rdlong	arg04, fp
2a250     01 18 06 F1 | 	add	arg04, #1
2a254     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a258     18 4E 05 F1 | 	add	fp, #24
2a25c     A7 14 02 FB | 	rdlong	arg02, fp
2a260     10 4E 85 F1 | 	sub	fp, #16
2a264     A7 16 02 FB | 	rdlong	arg03, fp
2a268     08 4E 05 F1 | 	add	fp, #8
2a26c     A7 18 02 FB | 	rdlong	arg04, fp
2a270     28 4E 85 F1 | 	sub	fp, #40
2a274     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2a278     00 FA 0D F2 | 	cmp	result1, #0 wz
2a27c     1C 00 90 AD |  if_e	jmp	#LR__4264
2a280     04 4E 05 F1 | 	add	fp, #4
2a284     A7 1E 02 FB | 	rdlong	local01, fp
2a288     04 4E 85 F1 | 	sub	fp, #4
2a28c     11 1E 06 F1 | 	add	local01, #17
2a290     0F 03 48 FC | 	wrbyte	#1, local01
2a294     01 FA 05 F6 | 	mov	result1, #1
2a298     48 03 90 FD | 	jmp	#LR__4273
2a29c                 | LR__4264
2a29c     04 4E 05 F1 | 	add	fp, #4
2a2a0     A7 FA 01 FB | 	rdlong	result1, fp
2a2a4     1C FA 05 F1 | 	add	result1, #28
2a2a8     FD FA 01 FB | 	rdlong	result1, result1
2a2ac     1C 4E 05 F1 | 	add	fp, #28
2a2b0     A7 20 02 FB | 	rdlong	local02, fp
2a2b4     10 FB 81 F1 | 	sub	result1, local02
2a2b8     08 4E 05 F1 | 	add	fp, #8
2a2bc     A7 18 02 FB | 	rdlong	arg04, fp
2a2c0     28 4E 85 F1 | 	sub	fp, #40
2a2c4     0C FB 11 F2 | 	cmp	result1, arg04 wc
2a2c8     68 00 90 3D |  if_ae	jmp	#LR__4265
2a2cc     04 4E 05 F1 | 	add	fp, #4
2a2d0     A7 12 02 FB | 	rdlong	arg01, fp
2a2d4     28 12 06 F1 | 	add	arg01, #40
2a2d8     2C 4E 05 F1 | 	add	fp, #44
2a2dc     A7 14 02 FB | 	rdlong	arg02, fp
2a2e0     2C 4E 85 F1 | 	sub	fp, #44
2a2e4     A7 FA 01 FB | 	rdlong	result1, fp
2a2e8     1C FA 05 F1 | 	add	result1, #28
2a2ec     FD 22 02 FB | 	rdlong	local03, result1
2a2f0     1C 4E 05 F1 | 	add	fp, #28
2a2f4     A7 18 02 FB | 	rdlong	arg04, fp
2a2f8     20 4E 85 F1 | 	sub	fp, #32
2a2fc     0C 23 82 F1 | 	sub	local03, arg04
2a300     09 22 66 F0 | 	shl	local03, #9
2a304     11 15 02 F1 | 	add	arg02, local03
2a308     09 16 C6 F9 | 	decod	arg03, #9
2a30c     48 41 BF FD | 	call	#__system____builtin_memmove
2a310     04 4E 05 F1 | 	add	fp, #4
2a314     A7 18 02 FB | 	rdlong	arg04, fp
2a318     0C FB 01 F6 | 	mov	result1, arg04
2a31c     04 4E 85 F1 | 	sub	fp, #4
2a320     10 18 06 F1 | 	add	arg04, #16
2a324     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a328     7F 18 06 F5 | 	and	arg04, #127
2a32c     10 FA 05 F1 | 	add	result1, #16
2a330     FD 18 42 FC | 	wrbyte	arg04, result1
2a334                 | LR__4265
2a334     28 4E 05 F1 | 	add	fp, #40
2a338     A7 FA 01 FB | 	rdlong	result1, fp
2a33c     09 FA 65 F0 | 	shl	result1, #9
2a340     04 4E 85 F1 | 	sub	fp, #4
2a344     A7 FA 61 FC | 	wrlong	result1, fp
2a348     24 4E 85 F1 | 	sub	fp, #36
2a34c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2a34c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2a34c                 | ' 				}
2a34c                 | ' 
2a34c                 | ' 
2a34c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2a34c                 | ' 				continue;
2a34c     74 01 90 FD | 	jmp	#LR__4269
2a350                 | LR__4266
2a350     04 4E 05 F1 | 	add	fp, #4
2a354     A7 20 02 FB | 	rdlong	local02, fp
2a358     1C 20 06 F1 | 	add	local02, #28
2a35c     10 FB 01 FB | 	rdlong	result1, local02
2a360     1C 4E 05 F1 | 	add	fp, #28
2a364     A7 20 02 FB | 	rdlong	local02, fp
2a368     20 4E 85 F1 | 	sub	fp, #32
2a36c     10 FB 09 F2 | 	cmp	result1, local02 wz
2a370     90 00 90 AD |  if_e	jmp	#LR__4267
2a374     04 4E 05 F1 | 	add	fp, #4
2a378     A7 FA 01 FB | 	rdlong	result1, fp
2a37c     FD 22 02 F6 | 	mov	local03, result1
2a380     04 4E 85 F1 | 	sub	fp, #4
2a384     14 22 06 F1 | 	add	local03, #20
2a388     11 23 02 FB | 	rdlong	local03, local03
2a38c     0C FA 05 F1 | 	add	result1, #12
2a390     FD 24 02 FB | 	rdlong	local04, result1
2a394     12 27 02 F6 | 	mov	local05, local04
2a398     13 23 12 F2 | 	cmp	local03, local05 wc
2a39c     64 00 90 3D |  if_ae	jmp	#LR__4267
2a3a0     18 4E 05 F1 | 	add	fp, #24
2a3a4     A7 18 02 FB | 	rdlong	arg04, fp
2a3a8     01 18 06 F1 | 	add	arg04, #1
2a3ac     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a3b0     14 4E 85 F1 | 	sub	fp, #20
2a3b4     A7 28 02 FB | 	rdlong	local06, fp
2a3b8     28 28 06 F1 | 	add	local06, #40
2a3bc     14 2B 02 F6 | 	mov	local07, local06
2a3c0     1C 4E 05 F1 | 	add	fp, #28
2a3c4     A7 2C 02 FB | 	rdlong	local08, fp
2a3c8     20 4E 85 F1 | 	sub	fp, #32
2a3cc     01 2E 06 F6 | 	mov	local09, #1
2a3d0     15 15 02 F6 | 	mov	arg02, local07
2a3d4     16 17 02 F6 | 	mov	arg03, local08
2a3d8     01 18 06 F6 | 	mov	arg04, #1
2a3dc     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2a3e0     FD 30 0A F6 | 	mov	local10, result1 wz
2a3e4     1C 00 90 AD |  if_e	jmp	#LR__4267
2a3e8     04 4E 05 F1 | 	add	fp, #4
2a3ec     A7 30 02 FB | 	rdlong	local10, fp
2a3f0     04 4E 85 F1 | 	sub	fp, #4
2a3f4     11 30 06 F1 | 	add	local10, #17
2a3f8     18 03 48 FC | 	wrbyte	#1, local10
2a3fc                 | ' 				fp->fptr < fp->obj.objsize &&
2a3fc                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2a3fc                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2a3fc     01 FA 05 F6 | 	mov	result1, #1
2a400     E0 01 90 FD | 	jmp	#LR__4273
2a404                 | LR__4267
2a404     04 4E 05 F1 | 	add	fp, #4
2a408     A7 18 02 FB | 	rdlong	arg04, fp
2a40c     1C 4E 05 F1 | 	add	fp, #28
2a410     A7 FA 01 FB | 	rdlong	result1, fp
2a414     20 4E 85 F1 | 	sub	fp, #32
2a418     1C 18 06 F1 | 	add	arg04, #28
2a41c     0C FB 61 FC | 	wrlong	result1, arg04
2a420                 | LR__4268
2a420     04 4E 05 F1 | 	add	fp, #4
2a424     A7 FA 01 FB | 	rdlong	result1, fp
2a428     14 FA 05 F1 | 	add	result1, #20
2a42c     FD FA 01 FB | 	rdlong	result1, result1
2a430     FF FB 05 F5 | 	and	result1, #511
2a434     09 32 C6 F9 | 	decod	local11, #9
2a438     FD 32 82 F1 | 	sub	local11, result1
2a43c     20 4E 05 F1 | 	add	fp, #32
2a440     A7 32 62 FC | 	wrlong	local11, fp
2a444     18 4E 85 F1 | 	sub	fp, #24
2a448     A7 FA 01 FB | 	rdlong	result1, fp
2a44c     0C 4E 85 F1 | 	sub	fp, #12
2a450     FD 32 1A F2 | 	cmp	local11, result1 wcz
2a454     0C 4E 05 11 |  if_a	add	fp, #12
2a458     A7 32 02 1B |  if_a	rdlong	local11, fp
2a45c     18 4E 05 11 |  if_a	add	fp, #24
2a460     A7 32 62 1C |  if_a	wrlong	local11, fp
2a464     24 4E 85 11 |  if_a	sub	fp, #36
2a468     04 4E 05 F1 | 	add	fp, #4
2a46c     A7 32 02 FB | 	rdlong	local11, fp
2a470     19 13 02 F6 | 	mov	arg01, local11
2a474     28 12 06 F1 | 	add	arg01, #40
2a478     14 32 06 F1 | 	add	local11, #20
2a47c     19 33 02 FB | 	rdlong	local11, local11
2a480     FF 33 06 F5 | 	and	local11, #511
2a484     19 13 02 F1 | 	add	arg01, local11
2a488     2C 4E 05 F1 | 	add	fp, #44
2a48c     A7 14 02 FB | 	rdlong	arg02, fp
2a490     0C 4E 85 F1 | 	sub	fp, #12
2a494     A7 16 02 FB | 	rdlong	arg03, fp
2a498     24 4E 85 F1 | 	sub	fp, #36
2a49c     B8 3F BF FD | 	call	#__system____builtin_memmove
2a4a0     04 4E 05 F1 | 	add	fp, #4
2a4a4     A7 FA 01 FB | 	rdlong	result1, fp
2a4a8     FD 32 02 F6 | 	mov	local11, result1
2a4ac     04 4E 85 F1 | 	sub	fp, #4
2a4b0     10 FA 05 F1 | 	add	result1, #16
2a4b4     FD FA C1 FA | 	rdbyte	result1, result1
2a4b8     80 FA 45 F5 | 	or	result1, #128
2a4bc     10 32 06 F1 | 	add	local11, #16
2a4c0     19 FB 41 FC | 	wrbyte	result1, local11
2a4c4                 | LR__4269
2a4c4     0C 4E 05 F1 | 	add	fp, #12
2a4c8     A7 32 02 FB | 	rdlong	local11, fp
2a4cc     18 4E 05 F1 | 	add	fp, #24
2a4d0     A7 FA 01 FB | 	rdlong	result1, fp
2a4d4     FD 32 82 F1 | 	sub	local11, result1
2a4d8     18 4E 85 F1 | 	sub	fp, #24
2a4dc     A7 32 62 FC | 	wrlong	local11, fp
2a4e0     04 4E 05 F1 | 	add	fp, #4
2a4e4     A7 34 02 FB | 	rdlong	local12, fp
2a4e8     1A 33 02 FB | 	rdlong	local11, local12
2a4ec     14 4E 05 F1 | 	add	fp, #20
2a4f0     A7 36 02 FB | 	rdlong	local13, fp
2a4f4     1B 33 02 F1 | 	add	local11, local13
2a4f8     1A 33 62 FC | 	wrlong	local11, local12
2a4fc     0C 4E 05 F1 | 	add	fp, #12
2a500     A7 32 02 FB | 	rdlong	local11, fp
2a504     0C 4E 85 F1 | 	sub	fp, #12
2a508     A7 38 02 FB | 	rdlong	local14, fp
2a50c     1C 33 02 F1 | 	add	local11, local14
2a510     0C 4E 05 F1 | 	add	fp, #12
2a514     A7 32 62 FC | 	wrlong	local11, fp
2a518     2C 4E 85 F1 | 	sub	fp, #44
2a51c     A7 3A 02 FB | 	rdlong	local15, fp
2a520     1D 33 02 F6 | 	mov	local11, local15
2a524     14 3A 06 F1 | 	add	local15, #20
2a528     1D 3B 02 FB | 	rdlong	local15, local15
2a52c     20 4E 05 F1 | 	add	fp, #32
2a530     A7 3C 02 FB | 	rdlong	local16, fp
2a534     1E 3B 02 F1 | 	add	local15, local16
2a538     14 32 06 F1 | 	add	local11, #20
2a53c     19 3B 62 FC | 	wrlong	local15, local11
2a540     20 4E 85 F1 | 	sub	fp, #32
2a544     A7 3E 02 FB | 	rdlong	local17, fp
2a548     1F 33 02 F6 | 	mov	local11, local17
2a54c     1F 41 02 F6 | 	mov	local18, local17
2a550     04 4E 85 F1 | 	sub	fp, #4
2a554     14 3E 06 F1 | 	add	local17, #20
2a558     1F 43 02 FB | 	rdlong	local19, local17
2a55c     0C 40 06 F1 | 	add	local18, #12
2a560     20 45 02 FB | 	rdlong	local20, local18
2a564     22 43 1A F2 | 	cmp	local19, local20 wcz
2a568     24 00 90 ED |  if_be	jmp	#LR__4270
2a56c     04 4E 05 F1 | 	add	fp, #4
2a570     A7 26 02 FB | 	rdlong	local05, fp
2a574     04 4E 85 F1 | 	sub	fp, #4
2a578     13 23 02 F6 | 	mov	local03, local05
2a57c     14 22 06 F1 | 	add	local03, #20
2a580     11 25 02 FB | 	rdlong	local04, local03
2a584     14 22 86 F1 | 	sub	local03, #20
2a588     12 47 02 F6 | 	mov	local21, local04
2a58c     20 00 90 FD | 	jmp	#LR__4271
2a590                 | LR__4270
2a590     04 4E 05 F1 | 	add	fp, #4
2a594     A7 2A 02 FB | 	rdlong	local07, fp
2a598     04 4E 85 F1 | 	sub	fp, #4
2a59c     15 31 02 F6 | 	mov	local10, local07
2a5a0     0C 30 06 F1 | 	add	local10, #12
2a5a4     18 2D 02 FB | 	rdlong	local08, local10
2a5a8     0C 30 86 F1 | 	sub	local10, #12
2a5ac     16 47 02 F6 | 	mov	local21, local08
2a5b0                 | LR__4271
2a5b0     0C 32 06 F1 | 	add	local11, #12
2a5b4     19 47 62 FC | 	wrlong	local21, local11
2a5b8     5C F9 9F FD | 	jmp	#LR__4253
2a5bc                 | LR__4272
2a5bc     04 4E 05 F1 | 	add	fp, #4
2a5c0     A7 34 02 FB | 	rdlong	local12, fp
2a5c4     1A 1F 02 F6 | 	mov	local01, local12
2a5c8     04 4E 85 F1 | 	sub	fp, #4
2a5cc     10 34 06 F1 | 	add	local12, #16
2a5d0     1A 33 C2 FA | 	rdbyte	local11, local12
2a5d4     40 32 46 F5 | 	or	local11, #64
2a5d8     10 1E 06 F1 | 	add	local01, #16
2a5dc     0F 33 42 FC | 	wrbyte	local11, local01
2a5e0                 | ' 
2a5e0                 | ' 
2a5e0                 | ' 
2a5e0                 | ' 
2a5e0                 | ' 
2a5e0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2a5e0                 | ' 		fp->flag |=  0x80 ;
2a5e0                 | ' 
2a5e0                 | ' 	}
2a5e0                 | ' 
2a5e0                 | ' 	fp->flag |=  0x40 ;
2a5e0                 | ' 
2a5e0                 | ' 	return FR_OK ;
2a5e0     00 FA 05 F6 | 	mov	result1, #0
2a5e4                 | LR__4273
2a5e4     A7 F0 03 F6 | 	mov	ptra, fp
2a5e8     B2 00 A0 FD | 	call	#popregs_
2a5ec                 | _fatfs_cc_f_write_ret
2a5ec     2D 00 64 FD | 	ret
2a5f0                 | 
2a5f0                 | _fatfs_cc_f_sync
2a5f0     00 4A 05 F6 | 	mov	COUNT_, #0
2a5f4     A8 00 A0 FD | 	call	#pushregs_
2a5f8     18 F0 07 F1 | 	add	ptra, #24
2a5fc     04 4E 05 F1 | 	add	fp, #4
2a600     A7 12 62 FC | 	wrlong	arg01, fp
2a604     08 4E 05 F1 | 	add	fp, #8
2a608     A7 14 02 F6 | 	mov	arg02, fp
2a60c     0C 4E 85 F1 | 	sub	fp, #12
2a610     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2a614     08 4E 05 F1 | 	add	fp, #8
2a618     A7 FA 61 FC | 	wrlong	result1, fp
2a61c     08 4E 85 F1 | 	sub	fp, #8
2a620     00 FA 0D F2 | 	cmp	result1, #0 wz
2a624     C0 01 90 5D |  if_ne	jmp	#LR__4283
2a628     04 4E 05 F1 | 	add	fp, #4
2a62c     A7 18 02 FB | 	rdlong	arg04, fp
2a630     04 4E 85 F1 | 	sub	fp, #4
2a634     10 18 06 F1 | 	add	arg04, #16
2a638     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a63c     40 18 CE F7 | 	test	arg04, #64 wz
2a640     A4 01 90 AD |  if_e	jmp	#LR__4282
2a644     04 4E 05 F1 | 	add	fp, #4
2a648     A7 18 02 FB | 	rdlong	arg04, fp
2a64c     04 4E 85 F1 | 	sub	fp, #4
2a650     10 18 06 F1 | 	add	arg04, #16
2a654     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a658     80 18 CE F7 | 	test	arg04, #128 wz
2a65c     64 00 90 AD |  if_e	jmp	#LR__4280
2a660     0C 4E 05 F1 | 	add	fp, #12
2a664     A7 18 02 FB | 	rdlong	arg04, fp
2a668     01 18 06 F1 | 	add	arg04, #1
2a66c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a670     08 4E 85 F1 | 	sub	fp, #8
2a674     A7 18 02 FB | 	rdlong	arg04, fp
2a678     0C 15 02 F6 | 	mov	arg02, arg04
2a67c     28 14 06 F1 | 	add	arg02, #40
2a680     04 4E 85 F1 | 	sub	fp, #4
2a684     1C 18 06 F1 | 	add	arg04, #28
2a688     0C 17 02 FB | 	rdlong	arg03, arg04
2a68c     01 18 06 F6 | 	mov	arg04, #1
2a690     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2a694     00 FA 0D F2 | 	cmp	result1, #0 wz
2a698     01 FA 05 56 |  if_ne	mov	result1, #1
2a69c     54 01 90 5D |  if_ne	jmp	#LR__4284
2a6a0     04 4E 05 F1 | 	add	fp, #4
2a6a4     A7 18 02 FB | 	rdlong	arg04, fp
2a6a8     0C 17 02 F6 | 	mov	arg03, arg04
2a6ac     04 4E 85 F1 | 	sub	fp, #4
2a6b0     10 18 06 F1 | 	add	arg04, #16
2a6b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a6b8     7F 18 06 F5 | 	and	arg04, #127
2a6bc     10 16 06 F1 | 	add	arg03, #16
2a6c0     0B 19 42 FC | 	wrbyte	arg04, arg03
2a6c4                 | LR__4280
2a6c4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2a6c8     10 4E 05 F1 | 	add	fp, #16
2a6cc     A7 FA 61 FC | 	wrlong	result1, fp
2a6d0     04 4E 85 F1 | 	sub	fp, #4
2a6d4     A7 12 02 FB | 	rdlong	arg01, fp
2a6d8     08 4E 85 F1 | 	sub	fp, #8
2a6dc     A7 18 02 FB | 	rdlong	arg04, fp
2a6e0     04 4E 85 F1 | 	sub	fp, #4
2a6e4     20 18 06 F1 | 	add	arg04, #32
2a6e8     0C 15 02 FB | 	rdlong	arg02, arg04
2a6ec     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2a6f0     08 4E 05 F1 | 	add	fp, #8
2a6f4     A7 FA 61 FC | 	wrlong	result1, fp
2a6f8     08 4E 85 F1 | 	sub	fp, #8
2a6fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a700     E4 00 90 5D |  if_ne	jmp	#LR__4281
2a704     04 4E 05 F1 | 	add	fp, #4
2a708     A7 18 02 FB | 	rdlong	arg04, fp
2a70c     24 18 06 F1 | 	add	arg04, #36
2a710     0C 19 02 FB | 	rdlong	arg04, arg04
2a714     10 4E 05 F1 | 	add	fp, #16
2a718     A7 18 62 FC | 	wrlong	arg04, fp
2a71c     0C 17 02 F6 | 	mov	arg03, arg04
2a720     0B 16 06 F1 | 	add	arg03, #11
2a724     0B 17 C2 FA | 	rdbyte	arg03, arg03
2a728     20 16 46 F5 | 	or	arg03, #32
2a72c     0B 18 06 F1 | 	add	arg04, #11
2a730     0C 17 42 FC | 	wrbyte	arg03, arg04
2a734     10 4E 85 F1 | 	sub	fp, #16
2a738     A7 18 02 FB | 	rdlong	arg04, fp
2a73c     0C 13 02 FB | 	rdlong	arg01, arg04
2a740     10 4E 05 F1 | 	add	fp, #16
2a744     A7 14 02 FB | 	rdlong	arg02, fp
2a748     14 4E 85 F1 | 	sub	fp, #20
2a74c     08 18 06 F1 | 	add	arg04, #8
2a750     0C 17 02 FB | 	rdlong	arg03, arg04
2a754     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2a758     14 4E 05 F1 | 	add	fp, #20
2a75c     A7 12 02 FB | 	rdlong	arg01, fp
2a760     1C 12 06 F1 | 	add	arg01, #28
2a764     10 4E 85 F1 | 	sub	fp, #16
2a768     A7 18 02 FB | 	rdlong	arg04, fp
2a76c     0C 18 06 F1 | 	add	arg04, #12
2a770     0C 15 02 FB | 	rdlong	arg02, arg04
2a774     09 15 62 FC | 	wrlong	arg02, arg01
2a778     10 4E 05 F1 | 	add	fp, #16
2a77c     A7 12 02 FB | 	rdlong	arg01, fp
2a780     16 12 06 F1 | 	add	arg01, #22
2a784     04 4E 85 F1 | 	sub	fp, #4
2a788     A7 14 02 FB | 	rdlong	arg02, fp
2a78c     09 15 62 FC | 	wrlong	arg02, arg01
2a790     04 4E 05 F1 | 	add	fp, #4
2a794     A7 12 02 FB | 	rdlong	arg01, fp
2a798     12 12 06 F1 | 	add	arg01, #18
2a79c     09 01 58 FC | 	wrword	#0, arg01
2a7a0     08 4E 85 F1 | 	sub	fp, #8
2a7a4     A7 18 02 FB | 	rdlong	arg04, fp
2a7a8     03 18 06 F1 | 	add	arg04, #3
2a7ac     0C 03 48 FC | 	wrbyte	#1, arg04
2a7b0     A7 12 02 FB | 	rdlong	arg01, fp
2a7b4     0C 4E 85 F1 | 	sub	fp, #12
2a7b8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2a7bc     08 4E 05 F1 | 	add	fp, #8
2a7c0     A7 FA 61 FC | 	wrlong	result1, fp
2a7c4     04 4E 85 F1 | 	sub	fp, #4
2a7c8     A7 18 02 FB | 	rdlong	arg04, fp
2a7cc     0C 17 02 F6 | 	mov	arg03, arg04
2a7d0     04 4E 85 F1 | 	sub	fp, #4
2a7d4     10 18 06 F1 | 	add	arg04, #16
2a7d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a7dc     BF 18 06 F5 | 	and	arg04, #191
2a7e0     10 16 06 F1 | 	add	arg03, #16
2a7e4     0B 19 42 FC | 	wrbyte	arg04, arg03
2a7e8                 | LR__4281
2a7e8                 | LR__4282
2a7e8                 | LR__4283
2a7e8                 | ' 					dir = fp->dir_ptr;
2a7e8                 | ' 					dir[ 11 ] |=  0x20 ;
2a7e8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2a7e8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2a7e8                 | ' 					st_dword(dir +  22 , tm);
2a7e8                 | ' 					st_word(dir +  18 , 0);
2a7e8                 | ' 					fs->wflag = 1;
2a7e8                 | ' 					res = sync_fs(fs);
2a7e8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2a7e8                 | ' 				}
2a7e8                 | ' 			}
2a7e8                 | ' 		}
2a7e8                 | ' 	}
2a7e8                 | ' 
2a7e8                 | ' 	return res ;
2a7e8     08 4E 05 F1 | 	add	fp, #8
2a7ec     A7 FA 01 FB | 	rdlong	result1, fp
2a7f0     08 4E 85 F1 | 	sub	fp, #8
2a7f4                 | LR__4284
2a7f4     A7 F0 03 F6 | 	mov	ptra, fp
2a7f8     B2 00 A0 FD | 	call	#popregs_
2a7fc                 | _fatfs_cc_f_sync_ret
2a7fc     2D 00 64 FD | 	ret
2a800                 | 
2a800                 | _fatfs_cc_f_close
2a800     01 4A 05 F6 | 	mov	COUNT_, #1
2a804     A8 00 A0 FD | 	call	#pushregs_
2a808     10 F0 07 F1 | 	add	ptra, #16
2a80c     04 4E 05 F1 | 	add	fp, #4
2a810     A7 12 62 FC | 	wrlong	arg01, fp
2a814     04 4E 85 F1 | 	sub	fp, #4
2a818     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2a81c     08 4E 05 F1 | 	add	fp, #8
2a820     A7 FA 61 FC | 	wrlong	result1, fp
2a824     08 4E 85 F1 | 	sub	fp, #8
2a828     00 FA 0D F2 | 	cmp	result1, #0 wz
2a82c     38 00 90 5D |  if_ne	jmp	#LR__4290
2a830     04 4E 05 F1 | 	add	fp, #4
2a834     A7 12 02 FB | 	rdlong	arg01, fp
2a838     08 4E 05 F1 | 	add	fp, #8
2a83c     A7 14 02 F6 | 	mov	arg02, fp
2a840     0C 4E 85 F1 | 	sub	fp, #12
2a844     9C E6 BF FD | 	call	#_fatfs_cc_validate
2a848     08 4E 05 F1 | 	add	fp, #8
2a84c     A7 FA 61 FC | 	wrlong	result1, fp
2a850     08 4E 85 F1 | 	sub	fp, #8
2a854     00 FA 0D F2 | 	cmp	result1, #0 wz
2a858     04 4E 05 A1 |  if_e	add	fp, #4
2a85c     A7 1E 02 AB |  if_e	rdlong	local01, fp
2a860     04 4E 85 A1 |  if_e	sub	fp, #4
2a864     0F 01 68 AC |  if_e	wrlong	#0, local01
2a868                 | LR__4290
2a868                 | ' 
2a868                 | ' 
2a868                 | ' 
2a868                 | ' 
2a868                 | ' 			fp->obj.fs = 0;
2a868                 | ' #line 4192 "ff.c"
2a868                 | ' 		}
2a868                 | ' 	}
2a868                 | ' 	return res;
2a868     08 4E 05 F1 | 	add	fp, #8
2a86c     A7 FA 01 FB | 	rdlong	result1, fp
2a870     08 4E 85 F1 | 	sub	fp, #8
2a874     A7 F0 03 F6 | 	mov	ptra, fp
2a878     B2 00 A0 FD | 	call	#popregs_
2a87c                 | _fatfs_cc_f_close_ret
2a87c     2D 00 64 FD | 	ret
2a880                 | 
2a880                 | _fatfs_cc_f_lseek
2a880     00 4A 05 F6 | 	mov	COUNT_, #0
2a884     A8 00 A0 FD | 	call	#pushregs_
2a888     24 F0 07 F1 | 	add	ptra, #36
2a88c     04 4E 05 F1 | 	add	fp, #4
2a890     A7 12 62 FC | 	wrlong	arg01, fp
2a894     04 4E 05 F1 | 	add	fp, #4
2a898     A7 14 62 FC | 	wrlong	arg02, fp
2a89c     04 4E 85 F1 | 	sub	fp, #4
2a8a0     A7 12 02 FB | 	rdlong	arg01, fp
2a8a4     0C 4E 05 F1 | 	add	fp, #12
2a8a8     A7 14 02 F6 | 	mov	arg02, fp
2a8ac     10 4E 85 F1 | 	sub	fp, #16
2a8b0     30 E6 BF FD | 	call	#_fatfs_cc_validate
2a8b4     0C 4E 05 F1 | 	add	fp, #12
2a8b8     A7 FA 61 FC | 	wrlong	result1, fp
2a8bc     0C 4E 85 F1 | 	sub	fp, #12
2a8c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8c4     1C 00 90 5D |  if_ne	jmp	#LR__4300
2a8c8     04 4E 05 F1 | 	add	fp, #4
2a8cc     A7 18 02 FB | 	rdlong	arg04, fp
2a8d0     11 18 06 F1 | 	add	arg04, #17
2a8d4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a8d8     08 4E 05 F1 | 	add	fp, #8
2a8dc     A7 18 62 FC | 	wrlong	arg04, fp
2a8e0     0C 4E 85 F1 | 	sub	fp, #12
2a8e4                 | LR__4300
2a8e4     0C 4E 05 F1 | 	add	fp, #12
2a8e8     A7 18 0A FB | 	rdlong	arg04, fp wz
2a8ec     0C 4E 85 F1 | 	sub	fp, #12
2a8f0     0C 4E 05 51 |  if_ne	add	fp, #12
2a8f4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2a8f8     0C 4E 85 51 |  if_ne	sub	fp, #12
2a8fc     40 06 90 5D |  if_ne	jmp	#LR__4323
2a900     04 4E 05 F1 | 	add	fp, #4
2a904     A7 18 02 FB | 	rdlong	arg04, fp
2a908     04 4E 05 F1 | 	add	fp, #4
2a90c     A7 16 02 FB | 	rdlong	arg03, fp
2a910     08 4E 85 F1 | 	sub	fp, #8
2a914     0C 18 06 F1 | 	add	arg04, #12
2a918     0C 19 02 FB | 	rdlong	arg04, arg04
2a91c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2a920     3C 00 90 ED |  if_be	jmp	#LR__4301
2a924     04 4E 05 F1 | 	add	fp, #4
2a928     A7 16 02 FB | 	rdlong	arg03, fp
2a92c     04 4E 85 F1 | 	sub	fp, #4
2a930     10 16 06 F1 | 	add	arg03, #16
2a934     0B 17 C2 FA | 	rdbyte	arg03, arg03
2a938     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2a93c     02 16 CE F7 | 	test	arg03, #2 wz
2a940     1C 00 90 5D |  if_ne	jmp	#LR__4301
2a944     04 4E 05 F1 | 	add	fp, #4
2a948     A7 16 02 FB | 	rdlong	arg03, fp
2a94c     0C 16 06 F1 | 	add	arg03, #12
2a950     0B 17 02 FB | 	rdlong	arg03, arg03
2a954     04 4E 05 F1 | 	add	fp, #4
2a958     A7 16 62 FC | 	wrlong	arg03, fp
2a95c     08 4E 85 F1 | 	sub	fp, #8
2a960                 | LR__4301
2a960     04 4E 05 F1 | 	add	fp, #4
2a964     A7 16 02 FB | 	rdlong	arg03, fp
2a968     14 16 06 F1 | 	add	arg03, #20
2a96c     0B 17 02 FB | 	rdlong	arg03, arg03
2a970     1C 4E 05 F1 | 	add	fp, #28
2a974     A7 16 62 FC | 	wrlong	arg03, fp
2a978     1C 4E 85 F1 | 	sub	fp, #28
2a97c     A7 16 02 FB | 	rdlong	arg03, fp
2a980     18 4E 05 F1 | 	add	fp, #24
2a984     A7 00 68 FC | 	wrlong	#0, fp
2a988     14 16 06 F1 | 	add	arg03, #20
2a98c     0B 01 68 FC | 	wrlong	#0, arg03
2a990     14 4E 85 F1 | 	sub	fp, #20
2a994     A7 16 02 FB | 	rdlong	arg03, fp
2a998     08 4E 85 F1 | 	sub	fp, #8
2a99c     01 16 16 F2 | 	cmp	arg03, #1 wc
2a9a0     E4 03 90 CD |  if_b	jmp	#LR__4317
2a9a4     10 4E 05 F1 | 	add	fp, #16
2a9a8     A7 16 02 FB | 	rdlong	arg03, fp
2a9ac     0A 16 06 F1 | 	add	arg03, #10
2a9b0     0B 19 E2 FA | 	rdword	arg04, arg03
2a9b4     09 18 66 F0 | 	shl	arg04, #9
2a9b8     08 4E 05 F1 | 	add	fp, #8
2a9bc     A7 18 62 FC | 	wrlong	arg04, fp
2a9c0     08 4E 05 F1 | 	add	fp, #8
2a9c4     A7 18 02 FB | 	rdlong	arg04, fp
2a9c8     20 4E 85 F1 | 	sub	fp, #32
2a9cc     01 18 16 F2 | 	cmp	arg04, #1 wc
2a9d0     AC 00 90 CD |  if_b	jmp	#LR__4302
2a9d4     08 4E 05 F1 | 	add	fp, #8
2a9d8     A7 18 02 FB | 	rdlong	arg04, fp
2a9dc     01 18 86 F1 | 	sub	arg04, #1
2a9e0     10 4E 05 F1 | 	add	fp, #16
2a9e4     A7 16 02 FB | 	rdlong	arg03, fp
2a9e8     0B 19 12 FD | 	qdiv	arg04, arg03
2a9ec     08 4E 05 F1 | 	add	fp, #8
2a9f0     A7 FA 01 FB | 	rdlong	result1, fp
2a9f4     01 FA 85 F1 | 	sub	result1, #1
2a9f8     18 18 62 FD | 	getqx	arg04
2a9fc     0B FB 11 FD | 	qdiv	result1, arg03
2aa00     20 4E 85 F1 | 	sub	fp, #32
2aa04     18 16 62 FD | 	getqx	arg03
2aa08     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2aa0c     70 00 90 CD |  if_b	jmp	#LR__4302
2aa10     04 4E 05 F1 | 	add	fp, #4
2aa14     A7 16 02 FB | 	rdlong	arg03, fp
2aa18     1C 4E 05 F1 | 	add	fp, #28
2aa1c     A7 FA 01 FB | 	rdlong	result1, fp
2aa20     01 FA 85 F1 | 	sub	result1, #1
2aa24     08 4E 85 F1 | 	sub	fp, #8
2aa28     A7 18 02 FB | 	rdlong	arg04, fp
2aa2c     01 18 86 F1 | 	sub	arg04, #1
2aa30     0C FB 21 F5 | 	andn	result1, arg04
2aa34     14 16 06 F1 | 	add	arg03, #20
2aa38     0B FB 61 FC | 	wrlong	result1, arg03
2aa3c     10 4E 85 F1 | 	sub	fp, #16
2aa40     A7 16 02 FB | 	rdlong	arg03, fp
2aa44     04 4E 85 F1 | 	sub	fp, #4
2aa48     A7 18 02 FB | 	rdlong	arg04, fp
2aa4c     14 18 06 F1 | 	add	arg04, #20
2aa50     0C 19 02 FB | 	rdlong	arg04, arg04
2aa54     0C 17 82 F1 | 	sub	arg03, arg04
2aa58     04 4E 05 F1 | 	add	fp, #4
2aa5c     A7 16 62 FC | 	wrlong	arg03, fp
2aa60     04 4E 85 F1 | 	sub	fp, #4
2aa64     A7 16 02 FB | 	rdlong	arg03, fp
2aa68     18 16 06 F1 | 	add	arg03, #24
2aa6c     0B 17 02 FB | 	rdlong	arg03, arg03
2aa70     10 4E 05 F1 | 	add	fp, #16
2aa74     A7 16 62 FC | 	wrlong	arg03, fp
2aa78     14 4E 85 F1 | 	sub	fp, #20
2aa7c     D0 00 90 FD | 	jmp	#LR__4306
2aa80                 | LR__4302
2aa80     04 4E 05 F1 | 	add	fp, #4
2aa84     A7 16 02 FB | 	rdlong	arg03, fp
2aa88     08 16 06 F1 | 	add	arg03, #8
2aa8c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2aa90     10 4E 05 F1 | 	add	fp, #16
2aa94     A7 16 62 FC | 	wrlong	arg03, fp
2aa98     14 4E 85 F1 | 	sub	fp, #20
2aa9c     94 00 90 5D |  if_ne	jmp	#LR__4305
2aaa0     04 4E 05 F1 | 	add	fp, #4
2aaa4     A7 12 02 FB | 	rdlong	arg01, fp
2aaa8     04 4E 85 F1 | 	sub	fp, #4
2aaac     00 14 06 F6 | 	mov	arg02, #0
2aab0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2aab4     14 4E 05 F1 | 	add	fp, #20
2aab8     A7 FA 61 FC | 	wrlong	result1, fp
2aabc     14 4E 85 F1 | 	sub	fp, #20
2aac0     01 FA 0D F2 | 	cmp	result1, #1 wz
2aac4     1C 00 90 5D |  if_ne	jmp	#LR__4303
2aac8     04 4E 05 F1 | 	add	fp, #4
2aacc     A7 16 02 FB | 	rdlong	arg03, fp
2aad0     04 4E 85 F1 | 	sub	fp, #4
2aad4     11 16 06 F1 | 	add	arg03, #17
2aad8     0B 05 48 FC | 	wrbyte	#2, arg03
2aadc     02 FA 05 F6 | 	mov	result1, #2
2aae0     5C 04 90 FD | 	jmp	#LR__4323
2aae4                 | LR__4303
2aae4     14 4E 05 F1 | 	add	fp, #20
2aae8     A7 FA 01 FB | 	rdlong	result1, fp
2aaec     14 4E 85 F1 | 	sub	fp, #20
2aaf0     FF FF 7F FF 
2aaf4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2aaf8     1C 00 90 5D |  if_ne	jmp	#LR__4304
2aafc     04 4E 05 F1 | 	add	fp, #4
2ab00     A7 16 02 FB | 	rdlong	arg03, fp
2ab04     04 4E 85 F1 | 	sub	fp, #4
2ab08     11 16 06 F1 | 	add	arg03, #17
2ab0c     0B 03 48 FC | 	wrbyte	#1, arg03
2ab10     01 FA 05 F6 | 	mov	result1, #1
2ab14     28 04 90 FD | 	jmp	#LR__4323
2ab18                 | LR__4304
2ab18     04 4E 05 F1 | 	add	fp, #4
2ab1c     A7 16 02 FB | 	rdlong	arg03, fp
2ab20     10 4E 05 F1 | 	add	fp, #16
2ab24     A7 18 02 FB | 	rdlong	arg04, fp
2ab28     14 4E 85 F1 | 	sub	fp, #20
2ab2c     08 16 06 F1 | 	add	arg03, #8
2ab30     0B 19 62 FC | 	wrlong	arg04, arg03
2ab34                 | LR__4305
2ab34     04 4E 05 F1 | 	add	fp, #4
2ab38     A7 16 02 FB | 	rdlong	arg03, fp
2ab3c     10 4E 05 F1 | 	add	fp, #16
2ab40     A7 18 02 FB | 	rdlong	arg04, fp
2ab44     14 4E 85 F1 | 	sub	fp, #20
2ab48     18 16 06 F1 | 	add	arg03, #24
2ab4c     0B 19 62 FC | 	wrlong	arg04, arg03
2ab50                 | LR__4306
2ab50     14 4E 05 F1 | 	add	fp, #20
2ab54     A7 16 0A FB | 	rdlong	arg03, fp wz
2ab58     14 4E 85 F1 | 	sub	fp, #20
2ab5c     28 02 90 AD |  if_e	jmp	#LR__4316
2ab60                 | ' 				while (ofs > bcs) {
2ab60                 | LR__4307
2ab60     08 4E 05 F1 | 	add	fp, #8
2ab64     A7 18 02 FB | 	rdlong	arg04, fp
2ab68     10 4E 05 F1 | 	add	fp, #16
2ab6c     A7 16 02 FB | 	rdlong	arg03, fp
2ab70     18 4E 85 F1 | 	sub	fp, #24
2ab74     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2ab78     68 01 90 ED |  if_be	jmp	#LR__4313
2ab7c     08 4E 05 F1 | 	add	fp, #8
2ab80     A7 18 02 FB | 	rdlong	arg04, fp
2ab84     10 4E 05 F1 | 	add	fp, #16
2ab88     A7 16 02 FB | 	rdlong	arg03, fp
2ab8c     0B 19 82 F1 | 	sub	arg04, arg03
2ab90     10 4E 85 F1 | 	sub	fp, #16
2ab94     A7 18 62 FC | 	wrlong	arg04, fp
2ab98     04 4E 85 F1 | 	sub	fp, #4
2ab9c     A7 18 02 FB | 	rdlong	arg04, fp
2aba0     0C FB 01 F6 | 	mov	result1, arg04
2aba4     14 18 06 F1 | 	add	arg04, #20
2aba8     0C 19 02 FB | 	rdlong	arg04, arg04
2abac     14 4E 05 F1 | 	add	fp, #20
2abb0     A7 16 02 FB | 	rdlong	arg03, fp
2abb4     0B 19 02 F1 | 	add	arg04, arg03
2abb8     14 FA 05 F1 | 	add	result1, #20
2abbc     FD 18 62 FC | 	wrlong	arg04, result1
2abc0     14 4E 85 F1 | 	sub	fp, #20
2abc4     A7 16 02 FB | 	rdlong	arg03, fp
2abc8     04 4E 85 F1 | 	sub	fp, #4
2abcc     10 16 06 F1 | 	add	arg03, #16
2abd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2abd4     02 16 CE F7 | 	test	arg03, #2 wz
2abd8     3C 00 90 AD |  if_e	jmp	#LR__4308
2abdc     04 4E 05 F1 | 	add	fp, #4
2abe0     A7 12 02 FB | 	rdlong	arg01, fp
2abe4     10 4E 05 F1 | 	add	fp, #16
2abe8     A7 14 02 FB | 	rdlong	arg02, fp
2abec     14 4E 85 F1 | 	sub	fp, #20
2abf0     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2abf4     14 4E 05 F1 | 	add	fp, #20
2abf8     A7 FA 61 FC | 	wrlong	result1, fp
2abfc     00 FA 4D F2 | 	cmps	result1, #0 wz
2ac00     14 4E 85 F1 | 	sub	fp, #20
2ac04     08 4E 05 A1 |  if_e	add	fp, #8
2ac08     A7 00 68 AC |  if_e	wrlong	#0, fp
2ac0c     08 4E 85 A1 |  if_e	sub	fp, #8
2ac10                 | ' 							ofs = 0; break;
2ac10     D0 00 90 AD |  if_e	jmp	#LR__4313
2ac14     24 00 90 FD | 	jmp	#LR__4309
2ac18                 | LR__4308
2ac18     04 4E 05 F1 | 	add	fp, #4
2ac1c     A7 12 02 FB | 	rdlong	arg01, fp
2ac20     10 4E 05 F1 | 	add	fp, #16
2ac24     A7 14 02 FB | 	rdlong	arg02, fp
2ac28     14 4E 85 F1 | 	sub	fp, #20
2ac2c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2ac30     14 4E 05 F1 | 	add	fp, #20
2ac34     A7 FA 61 FC | 	wrlong	result1, fp
2ac38     14 4E 85 F1 | 	sub	fp, #20
2ac3c                 | LR__4309
2ac3c     14 4E 05 F1 | 	add	fp, #20
2ac40     A7 16 02 FB | 	rdlong	arg03, fp
2ac44     14 4E 85 F1 | 	sub	fp, #20
2ac48     FF FF 7F FF 
2ac4c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2ac50     1C 00 90 5D |  if_ne	jmp	#LR__4310
2ac54     04 4E 05 F1 | 	add	fp, #4
2ac58     A7 16 02 FB | 	rdlong	arg03, fp
2ac5c     04 4E 85 F1 | 	sub	fp, #4
2ac60     11 16 06 F1 | 	add	arg03, #17
2ac64     0B 03 48 FC | 	wrbyte	#1, arg03
2ac68     01 FA 05 F6 | 	mov	result1, #1
2ac6c     D0 02 90 FD | 	jmp	#LR__4323
2ac70                 | LR__4310
2ac70     14 4E 05 F1 | 	add	fp, #20
2ac74     A7 16 02 FB | 	rdlong	arg03, fp
2ac78     14 4E 85 F1 | 	sub	fp, #20
2ac7c     02 16 16 F2 | 	cmp	arg03, #2 wc
2ac80     24 00 90 CD |  if_b	jmp	#LR__4311
2ac84     10 4E 05 F1 | 	add	fp, #16
2ac88     A7 18 02 FB | 	rdlong	arg04, fp
2ac8c     04 4E 05 F1 | 	add	fp, #4
2ac90     A7 16 02 FB | 	rdlong	arg03, fp
2ac94     14 4E 85 F1 | 	sub	fp, #20
2ac98     18 18 06 F1 | 	add	arg04, #24
2ac9c     0C 19 02 FB | 	rdlong	arg04, arg04
2aca0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2aca4     1C 00 90 CD |  if_b	jmp	#LR__4312
2aca8                 | LR__4311
2aca8     04 4E 05 F1 | 	add	fp, #4
2acac     A7 16 02 FB | 	rdlong	arg03, fp
2acb0     04 4E 85 F1 | 	sub	fp, #4
2acb4     11 16 06 F1 | 	add	arg03, #17
2acb8     0B 05 48 FC | 	wrbyte	#2, arg03
2acbc     02 FA 05 F6 | 	mov	result1, #2
2acc0     7C 02 90 FD | 	jmp	#LR__4323
2acc4                 | LR__4312
2acc4     04 4E 05 F1 | 	add	fp, #4
2acc8     A7 18 02 FB | 	rdlong	arg04, fp
2accc     10 4E 05 F1 | 	add	fp, #16
2acd0     A7 16 02 FB | 	rdlong	arg03, fp
2acd4     14 4E 85 F1 | 	sub	fp, #20
2acd8     18 18 06 F1 | 	add	arg04, #24
2acdc     0C 17 62 FC | 	wrlong	arg03, arg04
2ace0     7C FE 9F FD | 	jmp	#LR__4307
2ace4                 | LR__4313
2ace4     04 4E 05 F1 | 	add	fp, #4
2ace8     A7 16 02 FB | 	rdlong	arg03, fp
2acec     0B 13 02 F6 | 	mov	arg01, arg03
2acf0     14 16 06 F1 | 	add	arg03, #20
2acf4     0B 15 02 FB | 	rdlong	arg02, arg03
2acf8     04 4E 05 F1 | 	add	fp, #4
2acfc     A7 16 02 FB | 	rdlong	arg03, fp
2ad00     0B 15 02 F1 | 	add	arg02, arg03
2ad04     14 12 06 F1 | 	add	arg01, #20
2ad08     09 15 62 FC | 	wrlong	arg02, arg01
2ad0c     A7 16 02 FB | 	rdlong	arg03, fp
2ad10     08 4E 85 F1 | 	sub	fp, #8
2ad14     FF 17 CE F7 | 	test	arg03, #511 wz
2ad18     6C 00 90 AD |  if_e	jmp	#LR__4315
2ad1c     10 4E 05 F1 | 	add	fp, #16
2ad20     A7 12 02 FB | 	rdlong	arg01, fp
2ad24     04 4E 05 F1 | 	add	fp, #4
2ad28     A7 14 02 FB | 	rdlong	arg02, fp
2ad2c     14 4E 85 F1 | 	sub	fp, #20
2ad30     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2ad34     1C 4E 05 F1 | 	add	fp, #28
2ad38     A7 FA 61 FC | 	wrlong	result1, fp
2ad3c     1C 4E 85 F1 | 	sub	fp, #28
2ad40     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad44     1C 00 90 5D |  if_ne	jmp	#LR__4314
2ad48     04 4E 05 F1 | 	add	fp, #4
2ad4c     A7 16 02 FB | 	rdlong	arg03, fp
2ad50     04 4E 85 F1 | 	sub	fp, #4
2ad54     11 16 06 F1 | 	add	arg03, #17
2ad58     0B 05 48 FC | 	wrbyte	#2, arg03
2ad5c     02 FA 05 F6 | 	mov	result1, #2
2ad60     DC 01 90 FD | 	jmp	#LR__4323
2ad64                 | LR__4314
2ad64     1C 4E 05 F1 | 	add	fp, #28
2ad68     A7 18 02 FB | 	rdlong	arg04, fp
2ad6c     14 4E 85 F1 | 	sub	fp, #20
2ad70     A7 16 02 FB | 	rdlong	arg03, fp
2ad74     09 16 46 F0 | 	shr	arg03, #9
2ad78     0B 19 02 F1 | 	add	arg04, arg03
2ad7c     14 4E 05 F1 | 	add	fp, #20
2ad80     A7 18 62 FC | 	wrlong	arg04, fp
2ad84     1C 4E 85 F1 | 	sub	fp, #28
2ad88                 | LR__4315
2ad88                 | LR__4316
2ad88                 | LR__4317
2ad88     04 4E 05 F1 | 	add	fp, #4
2ad8c     A7 18 02 FB | 	rdlong	arg04, fp
2ad90     0C 17 02 F6 | 	mov	arg03, arg04
2ad94     04 4E 85 F1 | 	sub	fp, #4
2ad98     14 16 06 F1 | 	add	arg03, #20
2ad9c     0B 17 02 FB | 	rdlong	arg03, arg03
2ada0     0C 18 06 F1 | 	add	arg04, #12
2ada4     0C 19 02 FB | 	rdlong	arg04, arg04
2ada8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2adac     3C 00 90 ED |  if_be	jmp	#LR__4318
2adb0     04 4E 05 F1 | 	add	fp, #4
2adb4     A7 18 02 FB | 	rdlong	arg04, fp
2adb8     0C 17 02 F6 | 	mov	arg03, arg04
2adbc     14 18 06 F1 | 	add	arg04, #20
2adc0     0C 19 02 FB | 	rdlong	arg04, arg04
2adc4     0C 16 06 F1 | 	add	arg03, #12
2adc8     0B 19 62 FC | 	wrlong	arg04, arg03
2adcc     A7 18 02 FB | 	rdlong	arg04, fp
2add0     0C 17 02 F6 | 	mov	arg03, arg04
2add4     04 4E 85 F1 | 	sub	fp, #4
2add8     10 18 06 F1 | 	add	arg04, #16
2addc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ade0     40 18 46 F5 | 	or	arg04, #64
2ade4     10 16 06 F1 | 	add	arg03, #16
2ade8     0B 19 42 FC | 	wrbyte	arg04, arg03
2adec                 | LR__4318
2adec     04 4E 05 F1 | 	add	fp, #4
2adf0     A7 16 02 FB | 	rdlong	arg03, fp
2adf4     04 4E 85 F1 | 	sub	fp, #4
2adf8     14 16 06 F1 | 	add	arg03, #20
2adfc     0B 17 02 FB | 	rdlong	arg03, arg03
2ae00     FF 17 CE F7 | 	test	arg03, #511 wz
2ae04     2C 01 90 AD |  if_e	jmp	#LR__4322
2ae08     04 4E 05 F1 | 	add	fp, #4
2ae0c     A7 18 02 FB | 	rdlong	arg04, fp
2ae10     18 4E 05 F1 | 	add	fp, #24
2ae14     A7 16 02 FB | 	rdlong	arg03, fp
2ae18     1C 4E 85 F1 | 	sub	fp, #28
2ae1c     1C 18 06 F1 | 	add	arg04, #28
2ae20     0C 19 02 FB | 	rdlong	arg04, arg04
2ae24     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2ae28     08 01 90 AD |  if_e	jmp	#LR__4322
2ae2c     04 4E 05 F1 | 	add	fp, #4
2ae30     A7 16 02 FB | 	rdlong	arg03, fp
2ae34     04 4E 85 F1 | 	sub	fp, #4
2ae38     10 16 06 F1 | 	add	arg03, #16
2ae3c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ae40     80 16 CE F7 | 	test	arg03, #128 wz
2ae44     7C 00 90 AD |  if_e	jmp	#LR__4320
2ae48     10 4E 05 F1 | 	add	fp, #16
2ae4c     A7 16 02 FB | 	rdlong	arg03, fp
2ae50     01 16 06 F1 | 	add	arg03, #1
2ae54     0B 13 C2 FA | 	rdbyte	arg01, arg03
2ae58     0C 4E 85 F1 | 	sub	fp, #12
2ae5c     A7 16 02 FB | 	rdlong	arg03, fp
2ae60     0B 15 02 F6 | 	mov	arg02, arg03
2ae64     28 14 06 F1 | 	add	arg02, #40
2ae68     04 4E 85 F1 | 	sub	fp, #4
2ae6c     1C 16 06 F1 | 	add	arg03, #28
2ae70     0B 17 02 FB | 	rdlong	arg03, arg03
2ae74     01 18 06 F6 | 	mov	arg04, #1
2ae78     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2ae7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae80     1C 00 90 AD |  if_e	jmp	#LR__4319
2ae84     04 4E 05 F1 | 	add	fp, #4
2ae88     A7 16 02 FB | 	rdlong	arg03, fp
2ae8c     04 4E 85 F1 | 	sub	fp, #4
2ae90     11 16 06 F1 | 	add	arg03, #17
2ae94     0B 03 48 FC | 	wrbyte	#1, arg03
2ae98     01 FA 05 F6 | 	mov	result1, #1
2ae9c     A0 00 90 FD | 	jmp	#LR__4323
2aea0                 | LR__4319
2aea0     04 4E 05 F1 | 	add	fp, #4
2aea4     A7 18 02 FB | 	rdlong	arg04, fp
2aea8     0C 17 02 F6 | 	mov	arg03, arg04
2aeac     04 4E 85 F1 | 	sub	fp, #4
2aeb0     10 18 06 F1 | 	add	arg04, #16
2aeb4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2aeb8     7F 18 06 F5 | 	and	arg04, #127
2aebc     10 16 06 F1 | 	add	arg03, #16
2aec0     0B 19 42 FC | 	wrbyte	arg04, arg03
2aec4                 | LR__4320
2aec4     10 4E 05 F1 | 	add	fp, #16
2aec8     A7 16 02 FB | 	rdlong	arg03, fp
2aecc     01 16 06 F1 | 	add	arg03, #1
2aed0     0B 13 C2 FA | 	rdbyte	arg01, arg03
2aed4     0C 4E 85 F1 | 	sub	fp, #12
2aed8     A7 14 02 FB | 	rdlong	arg02, fp
2aedc     28 14 06 F1 | 	add	arg02, #40
2aee0     18 4E 05 F1 | 	add	fp, #24
2aee4     A7 16 02 FB | 	rdlong	arg03, fp
2aee8     1C 4E 85 F1 | 	sub	fp, #28
2aeec     01 18 06 F6 | 	mov	arg04, #1
2aef0     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2aef4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aef8     1C 00 90 AD |  if_e	jmp	#LR__4321
2aefc     04 4E 05 F1 | 	add	fp, #4
2af00     A7 16 02 FB | 	rdlong	arg03, fp
2af04     04 4E 85 F1 | 	sub	fp, #4
2af08     11 16 06 F1 | 	add	arg03, #17
2af0c     0B 03 48 FC | 	wrbyte	#1, arg03
2af10     01 FA 05 F6 | 	mov	result1, #1
2af14     28 00 90 FD | 	jmp	#LR__4323
2af18                 | LR__4321
2af18     04 4E 05 F1 | 	add	fp, #4
2af1c     A7 18 02 FB | 	rdlong	arg04, fp
2af20     18 4E 05 F1 | 	add	fp, #24
2af24     A7 16 02 FB | 	rdlong	arg03, fp
2af28     1C 4E 85 F1 | 	sub	fp, #28
2af2c     1C 18 06 F1 | 	add	arg04, #28
2af30     0C 17 62 FC | 	wrlong	arg03, arg04
2af34                 | LR__4322
2af34                 | ' 
2af34                 | ' 			fp->sect = nsect;
2af34                 | ' 		}
2af34                 | ' 	}
2af34                 | ' 
2af34                 | ' 	return res ;
2af34     0C 4E 05 F1 | 	add	fp, #12
2af38     A7 FA 01 FB | 	rdlong	result1, fp
2af3c     0C 4E 85 F1 | 	sub	fp, #12
2af40                 | LR__4323
2af40     A7 F0 03 F6 | 	mov	ptra, fp
2af44     B2 00 A0 FD | 	call	#popregs_
2af48                 | _fatfs_cc_f_lseek_ret
2af48     2D 00 64 FD | 	ret
2af4c                 | 
2af4c                 | _fatfs_cc_f_opendir
2af4c     01 4A 05 F6 | 	mov	COUNT_, #1
2af50     A8 00 A0 FD | 	call	#pushregs_
2af54     14 F0 07 F1 | 	add	ptra, #20
2af58     04 4E 05 F1 | 	add	fp, #4
2af5c     A7 12 62 FC | 	wrlong	arg01, fp
2af60     04 4E 05 F1 | 	add	fp, #4
2af64     A7 14 62 FC | 	wrlong	arg02, fp
2af68     04 4E 85 F1 | 	sub	fp, #4
2af6c     A7 16 0A FB | 	rdlong	arg03, fp wz
2af70     04 4E 85 F1 | 	sub	fp, #4
2af74     09 FA 05 A6 |  if_e	mov	result1, #9
2af78     78 01 90 AD |  if_e	jmp	#LR__4336
2af7c     08 4E 05 F1 | 	add	fp, #8
2af80     A7 12 02 F6 | 	mov	arg01, fp
2af84     08 4E 05 F1 | 	add	fp, #8
2af88     A7 14 02 F6 | 	mov	arg02, fp
2af8c     10 4E 85 F1 | 	sub	fp, #16
2af90     00 16 06 F6 | 	mov	arg03, #0
2af94     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2af98     0C 4E 05 F1 | 	add	fp, #12
2af9c     A7 FA 61 FC | 	wrlong	result1, fp
2afa0     0C 4E 85 F1 | 	sub	fp, #12
2afa4     00 FA 0D F2 | 	cmp	result1, #0 wz
2afa8     20 01 90 5D |  if_ne	jmp	#LR__4335
2afac     04 4E 05 F1 | 	add	fp, #4
2afb0     A7 16 02 FB | 	rdlong	arg03, fp
2afb4     0C 4E 05 F1 | 	add	fp, #12
2afb8     A7 FA 01 FB | 	rdlong	result1, fp
2afbc     0B FB 61 FC | 	wrlong	result1, arg03
2afc0     0C 4E 85 F1 | 	sub	fp, #12
2afc4     A7 12 02 FB | 	rdlong	arg01, fp
2afc8     04 4E 05 F1 | 	add	fp, #4
2afcc     A7 14 02 FB | 	rdlong	arg02, fp
2afd0     08 4E 85 F1 | 	sub	fp, #8
2afd4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2afd8     0C 4E 05 F1 | 	add	fp, #12
2afdc     A7 FA 61 FC | 	wrlong	result1, fp
2afe0     0C 4E 85 F1 | 	sub	fp, #12
2afe4     00 FA 0D F2 | 	cmp	result1, #0 wz
2afe8     C4 00 90 5D |  if_ne	jmp	#LR__4334
2afec     04 4E 05 F1 | 	add	fp, #4
2aff0     A7 16 02 FB | 	rdlong	arg03, fp
2aff4     04 4E 85 F1 | 	sub	fp, #4
2aff8     2B 16 06 F1 | 	add	arg03, #43
2affc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b000     80 16 CE F7 | 	test	arg03, #128 wz
2b004     58 00 90 5D |  if_ne	jmp	#LR__4332
2b008     04 4E 05 F1 | 	add	fp, #4
2b00c     A7 16 02 FB | 	rdlong	arg03, fp
2b010     04 4E 85 F1 | 	sub	fp, #4
2b014     06 16 06 F1 | 	add	arg03, #6
2b018     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b01c     10 16 CE F7 | 	test	arg03, #16 wz
2b020     30 00 90 AD |  if_e	jmp	#LR__4330
2b024     04 4E 05 F1 | 	add	fp, #4
2b028     A7 16 02 FB | 	rdlong	arg03, fp
2b02c     0B 1F 02 F6 | 	mov	local01, arg03
2b030     0C 4E 05 F1 | 	add	fp, #12
2b034     A7 12 02 FB | 	rdlong	arg01, fp
2b038     10 4E 85 F1 | 	sub	fp, #16
2b03c     1C 16 06 F1 | 	add	arg03, #28
2b040     0B 15 02 FB | 	rdlong	arg02, arg03
2b044     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2b048     08 1E 06 F1 | 	add	local01, #8
2b04c     0F FB 61 FC | 	wrlong	result1, local01
2b050     0C 00 90 FD | 	jmp	#LR__4331
2b054                 | LR__4330
2b054     0C 4E 05 F1 | 	add	fp, #12
2b058     A7 0A 68 FC | 	wrlong	#5, fp
2b05c     0C 4E 85 F1 | 	sub	fp, #12
2b060                 | LR__4331
2b060                 | LR__4332
2b060     0C 4E 05 F1 | 	add	fp, #12
2b064     A7 1E 0A FB | 	rdlong	local01, fp wz
2b068     0C 4E 85 F1 | 	sub	fp, #12
2b06c     40 00 90 5D |  if_ne	jmp	#LR__4333
2b070     04 4E 05 F1 | 	add	fp, #4
2b074     A7 1E 02 FB | 	rdlong	local01, fp
2b078     0C 4E 05 F1 | 	add	fp, #12
2b07c     A7 16 02 FB | 	rdlong	arg03, fp
2b080     06 16 06 F1 | 	add	arg03, #6
2b084     0B 17 E2 FA | 	rdword	arg03, arg03
2b088     04 1E 06 F1 | 	add	local01, #4
2b08c     0F 17 52 FC | 	wrword	arg03, local01
2b090     0C 4E 85 F1 | 	sub	fp, #12
2b094     A7 12 02 FB | 	rdlong	arg01, fp
2b098     04 4E 85 F1 | 	sub	fp, #4
2b09c     00 14 06 F6 | 	mov	arg02, #0
2b0a0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2b0a4     0C 4E 05 F1 | 	add	fp, #12
2b0a8     A7 FA 61 FC | 	wrlong	result1, fp
2b0ac     0C 4E 85 F1 | 	sub	fp, #12
2b0b0                 | LR__4333
2b0b0                 | LR__4334
2b0b0     0C 4E 05 F1 | 	add	fp, #12
2b0b4     A7 1E 02 FB | 	rdlong	local01, fp
2b0b8     0C 4E 85 F1 | 	sub	fp, #12
2b0bc     04 1E 0E F2 | 	cmp	local01, #4 wz
2b0c0     0C 4E 05 A1 |  if_e	add	fp, #12
2b0c4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b0c8     0C 4E 85 A1 |  if_e	sub	fp, #12
2b0cc                 | LR__4335
2b0cc     0C 4E 05 F1 | 	add	fp, #12
2b0d0     A7 1E 0A FB | 	rdlong	local01, fp wz
2b0d4     0C 4E 85 F1 | 	sub	fp, #12
2b0d8     04 4E 05 51 |  if_ne	add	fp, #4
2b0dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b0e0     04 4E 85 51 |  if_ne	sub	fp, #4
2b0e4     0F 01 68 5C |  if_ne	wrlong	#0, local01
2b0e8                 | ' 
2b0e8                 | ' 	return res ;
2b0e8     0C 4E 05 F1 | 	add	fp, #12
2b0ec     A7 FA 01 FB | 	rdlong	result1, fp
2b0f0     0C 4E 85 F1 | 	sub	fp, #12
2b0f4                 | LR__4336
2b0f4     A7 F0 03 F6 | 	mov	ptra, fp
2b0f8     B2 00 A0 FD | 	call	#popregs_
2b0fc                 | _fatfs_cc_f_opendir_ret
2b0fc     2D 00 64 FD | 	ret
2b100                 | 
2b100                 | _fatfs_cc_f_closedir
2b100     00 4A 05 F6 | 	mov	COUNT_, #0
2b104     A8 00 A0 FD | 	call	#pushregs_
2b108     10 F0 07 F1 | 	add	ptra, #16
2b10c     04 4E 05 F1 | 	add	fp, #4
2b110     A7 12 62 FC | 	wrlong	arg01, fp
2b114     08 4E 05 F1 | 	add	fp, #8
2b118     A7 14 02 F6 | 	mov	arg02, fp
2b11c     0C 4E 85 F1 | 	sub	fp, #12
2b120     C0 DD BF FD | 	call	#_fatfs_cc_validate
2b124     08 4E 05 F1 | 	add	fp, #8
2b128     A7 FA 61 FC | 	wrlong	result1, fp
2b12c     08 4E 85 F1 | 	sub	fp, #8
2b130     00 FA 0D F2 | 	cmp	result1, #0 wz
2b134     04 4E 05 A1 |  if_e	add	fp, #4
2b138     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b13c     04 4E 85 A1 |  if_e	sub	fp, #4
2b140     FD 00 68 AC |  if_e	wrlong	#0, result1
2b144                 | ' 
2b144                 | ' 
2b144                 | ' 
2b144                 | ' 
2b144                 | ' 		dp->obj.fs = 0;
2b144                 | ' #line 4633 "ff.c"
2b144                 | ' 	}
2b144                 | ' 	return res;
2b144     08 4E 05 F1 | 	add	fp, #8
2b148     A7 FA 01 FB | 	rdlong	result1, fp
2b14c     08 4E 85 F1 | 	sub	fp, #8
2b150     A7 F0 03 F6 | 	mov	ptra, fp
2b154     B2 00 A0 FD | 	call	#popregs_
2b158                 | _fatfs_cc_f_closedir_ret
2b158     2D 00 64 FD | 	ret
2b15c                 | 
2b15c                 | _fatfs_cc_f_readdir
2b15c     00 4A 05 F6 | 	mov	COUNT_, #0
2b160     A8 00 A0 FD | 	call	#pushregs_
2b164     14 F0 07 F1 | 	add	ptra, #20
2b168     04 4E 05 F1 | 	add	fp, #4
2b16c     A7 12 62 FC | 	wrlong	arg01, fp
2b170     04 4E 05 F1 | 	add	fp, #4
2b174     A7 14 62 FC | 	wrlong	arg02, fp
2b178     04 4E 85 F1 | 	sub	fp, #4
2b17c     A7 12 02 FB | 	rdlong	arg01, fp
2b180     0C 4E 05 F1 | 	add	fp, #12
2b184     A7 14 02 F6 | 	mov	arg02, fp
2b188     10 4E 85 F1 | 	sub	fp, #16
2b18c     54 DD BF FD | 	call	#_fatfs_cc_validate
2b190     0C 4E 05 F1 | 	add	fp, #12
2b194     A7 FA 61 FC | 	wrlong	result1, fp
2b198     0C 4E 85 F1 | 	sub	fp, #12
2b19c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b1a0     BC 00 90 5D |  if_ne	jmp	#LR__4343
2b1a4     08 4E 05 F1 | 	add	fp, #8
2b1a8     A7 FA 09 FB | 	rdlong	result1, fp wz
2b1ac     08 4E 85 F1 | 	sub	fp, #8
2b1b0     24 00 90 5D |  if_ne	jmp	#LR__4340
2b1b4     04 4E 05 F1 | 	add	fp, #4
2b1b8     A7 12 02 FB | 	rdlong	arg01, fp
2b1bc     04 4E 85 F1 | 	sub	fp, #4
2b1c0     00 14 06 F6 | 	mov	arg02, #0
2b1c4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2b1c8     0C 4E 05 F1 | 	add	fp, #12
2b1cc     A7 FA 61 FC | 	wrlong	result1, fp
2b1d0     0C 4E 85 F1 | 	sub	fp, #12
2b1d4     88 00 90 FD | 	jmp	#LR__4342
2b1d8                 | LR__4340
2b1d8     04 4E 05 F1 | 	add	fp, #4
2b1dc     A7 12 02 FB | 	rdlong	arg01, fp
2b1e0     04 4E 85 F1 | 	sub	fp, #4
2b1e4     00 14 06 F6 | 	mov	arg02, #0
2b1e8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2b1ec     0C 4E 05 F1 | 	add	fp, #12
2b1f0     A7 FA 61 FC | 	wrlong	result1, fp
2b1f4     0C 4E 85 F1 | 	sub	fp, #12
2b1f8     04 FA 0D F2 | 	cmp	result1, #4 wz
2b1fc     0C 4E 05 A1 |  if_e	add	fp, #12
2b200     A7 00 68 AC |  if_e	wrlong	#0, fp
2b204     0C 4E 85 A1 |  if_e	sub	fp, #12
2b208     0C 4E 05 F1 | 	add	fp, #12
2b20c     A7 FA 09 FB | 	rdlong	result1, fp wz
2b210     0C 4E 85 F1 | 	sub	fp, #12
2b214     48 00 90 5D |  if_ne	jmp	#LR__4341
2b218     04 4E 05 F1 | 	add	fp, #4
2b21c     A7 12 02 FB | 	rdlong	arg01, fp
2b220     04 4E 05 F1 | 	add	fp, #4
2b224     A7 14 02 FB | 	rdlong	arg02, fp
2b228     08 4E 85 F1 | 	sub	fp, #8
2b22c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b230     04 4E 05 F1 | 	add	fp, #4
2b234     A7 12 02 FB | 	rdlong	arg01, fp
2b238     04 4E 85 F1 | 	sub	fp, #4
2b23c     00 14 06 F6 | 	mov	arg02, #0
2b240     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2b244     0C 4E 05 F1 | 	add	fp, #12
2b248     A7 FA 61 FC | 	wrlong	result1, fp
2b24c     0C 4E 85 F1 | 	sub	fp, #12
2b250     04 FA 0D F2 | 	cmp	result1, #4 wz
2b254     0C 4E 05 A1 |  if_e	add	fp, #12
2b258     A7 00 68 AC |  if_e	wrlong	#0, fp
2b25c     0C 4E 85 A1 |  if_e	sub	fp, #12
2b260                 | LR__4341
2b260                 | LR__4342
2b260                 | LR__4343
2b260                 | ' 			}
2b260                 | ' 			;
2b260                 | ' 		}
2b260                 | ' 	}
2b260                 | ' 	return res ;
2b260     0C 4E 05 F1 | 	add	fp, #12
2b264     A7 FA 01 FB | 	rdlong	result1, fp
2b268     0C 4E 85 F1 | 	sub	fp, #12
2b26c     A7 F0 03 F6 | 	mov	ptra, fp
2b270     B2 00 A0 FD | 	call	#popregs_
2b274                 | _fatfs_cc_f_readdir_ret
2b274     2D 00 64 FD | 	ret
2b278                 | 
2b278                 | _fatfs_cc_f_stat
2b278     00 4A 05 F6 | 	mov	COUNT_, #0
2b27c     A8 00 A0 FD | 	call	#pushregs_
2b280     40 F0 07 F1 | 	add	ptra, #64
2b284     04 4E 05 F1 | 	add	fp, #4
2b288     A7 12 62 FC | 	wrlong	arg01, fp
2b28c     04 4E 05 F1 | 	add	fp, #4
2b290     A7 14 62 FC | 	wrlong	arg02, fp
2b294     04 4E 85 F1 | 	sub	fp, #4
2b298     A7 12 02 F6 | 	mov	arg01, fp
2b29c     0C 4E 05 F1 | 	add	fp, #12
2b2a0     A7 14 02 F6 | 	mov	arg02, fp
2b2a4     10 4E 85 F1 | 	sub	fp, #16
2b2a8     00 16 06 F6 | 	mov	arg03, #0
2b2ac     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2b2b0     0C 4E 05 F1 | 	add	fp, #12
2b2b4     A7 FA 61 FC | 	wrlong	result1, fp
2b2b8     0C 4E 85 F1 | 	sub	fp, #12
2b2bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2c0     74 00 90 5D |  if_ne	jmp	#LR__4353
2b2c4     10 4E 05 F1 | 	add	fp, #16
2b2c8     A7 12 02 F6 | 	mov	arg01, fp
2b2cc     0C 4E 85 F1 | 	sub	fp, #12
2b2d0     A7 14 02 FB | 	rdlong	arg02, fp
2b2d4     04 4E 85 F1 | 	sub	fp, #4
2b2d8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2b2dc     0C 4E 05 F1 | 	add	fp, #12
2b2e0     A7 FA 61 FC | 	wrlong	result1, fp
2b2e4     0C 4E 85 F1 | 	sub	fp, #12
2b2e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2ec     48 00 90 5D |  if_ne	jmp	#LR__4352
2b2f0     3B 4E 05 F1 | 	add	fp, #59
2b2f4     A7 FA C1 FA | 	rdbyte	result1, fp
2b2f8     3B 4E 85 F1 | 	sub	fp, #59
2b2fc     80 FA CD F7 | 	test	result1, #128 wz
2b300     0C 4E 05 51 |  if_ne	add	fp, #12
2b304     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b308     0C 4E 85 51 |  if_ne	sub	fp, #12
2b30c     28 00 90 5D |  if_ne	jmp	#LR__4351
2b310     08 4E 05 F1 | 	add	fp, #8
2b314     A7 FA 09 FB | 	rdlong	result1, fp wz
2b318     08 4E 85 F1 | 	sub	fp, #8
2b31c     18 00 90 AD |  if_e	jmp	#LR__4350
2b320     10 4E 05 F1 | 	add	fp, #16
2b324     A7 12 02 F6 | 	mov	arg01, fp
2b328     08 4E 85 F1 | 	sub	fp, #8
2b32c     A7 14 02 FB | 	rdlong	arg02, fp
2b330     08 4E 85 F1 | 	sub	fp, #8
2b334     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b338                 | LR__4350
2b338                 | LR__4351
2b338                 | LR__4352
2b338                 | LR__4353
2b338                 | ' 			}
2b338                 | ' 		}
2b338                 | ' 		;
2b338                 | ' 	}
2b338                 | ' 
2b338                 | ' 	return res ;
2b338     0C 4E 05 F1 | 	add	fp, #12
2b33c     A7 FA 01 FB | 	rdlong	result1, fp
2b340     0C 4E 85 F1 | 	sub	fp, #12
2b344     A7 F0 03 F6 | 	mov	ptra, fp
2b348     B2 00 A0 FD | 	call	#popregs_
2b34c                 | _fatfs_cc_f_stat_ret
2b34c     2D 00 64 FD | 	ret
2b350                 | 
2b350                 | _fatfs_cc_f_unlink
2b350     00 4A 05 F6 | 	mov	COUNT_, #0
2b354     A8 00 A0 FD | 	call	#pushregs_
2b358     74 F0 07 F1 | 	add	ptra, #116
2b35c     04 4E 05 F1 | 	add	fp, #4
2b360     A7 12 62 FC | 	wrlong	arg01, fp
2b364     68 4E 05 F1 | 	add	fp, #104
2b368     A7 00 68 FC | 	wrlong	#0, fp
2b36c     68 4E 85 F1 | 	sub	fp, #104
2b370     A7 12 02 F6 | 	mov	arg01, fp
2b374     6C 4E 05 F1 | 	add	fp, #108
2b378     A7 14 02 F6 | 	mov	arg02, fp
2b37c     70 4E 85 F1 | 	sub	fp, #112
2b380     02 16 06 F6 | 	mov	arg03, #2
2b384     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2b388     08 4E 05 F1 | 	add	fp, #8
2b38c     A7 FA 61 FC | 	wrlong	result1, fp
2b390     08 4E 85 F1 | 	sub	fp, #8
2b394     00 FA 0D F2 | 	cmp	result1, #0 wz
2b398     E4 01 90 5D |  if_ne	jmp	#LR__4368
2b39c     70 4E 05 F1 | 	add	fp, #112
2b3a0     A7 16 02 FB | 	rdlong	arg03, fp
2b3a4     64 4E 85 F1 | 	sub	fp, #100
2b3a8     A7 16 62 FC | 	wrlong	arg03, fp
2b3ac     A7 12 02 F6 | 	mov	arg01, fp
2b3b0     08 4E 85 F1 | 	sub	fp, #8
2b3b4     A7 14 02 FB | 	rdlong	arg02, fp
2b3b8     04 4E 85 F1 | 	sub	fp, #4
2b3bc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2b3c0     08 4E 05 F1 | 	add	fp, #8
2b3c4     A7 FA 61 FC | 	wrlong	result1, fp
2b3c8     00 FA 4D F2 | 	cmps	result1, #0 wz
2b3cc     08 4E 85 F1 | 	sub	fp, #8
2b3d0     AC 01 90 5D |  if_ne	jmp	#LR__4367
2b3d4     37 4E 05 F1 | 	add	fp, #55
2b3d8     A7 FA C1 FA | 	rdbyte	result1, fp
2b3dc     37 4E 85 F1 | 	sub	fp, #55
2b3e0     80 FA CD F7 | 	test	result1, #128 wz
2b3e4     08 4E 05 51 |  if_ne	add	fp, #8
2b3e8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b3ec     08 4E 85 51 |  if_ne	sub	fp, #8
2b3f0     1C 00 90 5D |  if_ne	jmp	#LR__4360
2b3f4     12 4E 05 F1 | 	add	fp, #18
2b3f8     A7 FA C1 FA | 	rdbyte	result1, fp
2b3fc     12 4E 85 F1 | 	sub	fp, #18
2b400     01 FA CD F7 | 	test	result1, #1 wz
2b404     08 4E 05 51 |  if_ne	add	fp, #8
2b408     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b40c     08 4E 85 51 |  if_ne	sub	fp, #8
2b410                 | LR__4360
2b410     08 4E 05 F1 | 	add	fp, #8
2b414     A7 FA 09 FB | 	rdlong	result1, fp wz
2b418     08 4E 85 F1 | 	sub	fp, #8
2b41c     C8 00 90 5D |  if_ne	jmp	#LR__4363
2b420     70 4E 05 F1 | 	add	fp, #112
2b424     A7 12 02 FB | 	rdlong	arg01, fp
2b428     48 4E 85 F1 | 	sub	fp, #72
2b42c     A7 14 02 FB | 	rdlong	arg02, fp
2b430     28 4E 85 F1 | 	sub	fp, #40
2b434     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2b438     6C 4E 05 F1 | 	add	fp, #108
2b43c     A7 FA 61 FC | 	wrlong	result1, fp
2b440     5A 4E 85 F1 | 	sub	fp, #90
2b444     A7 FA C1 FA | 	rdbyte	result1, fp
2b448     12 4E 85 F1 | 	sub	fp, #18
2b44c     10 FA CD F7 | 	test	result1, #16 wz
2b450     94 00 90 AD |  if_e	jmp	#LR__4362
2b454     70 4E 05 F1 | 	add	fp, #112
2b458     A7 FA 01 FB | 	rdlong	result1, fp
2b45c     34 4E 85 F1 | 	sub	fp, #52
2b460     A7 FA 61 FC | 	wrlong	result1, fp
2b464     30 4E 05 F1 | 	add	fp, #48
2b468     A7 16 02 FB | 	rdlong	arg03, fp
2b46c     28 4E 85 F1 | 	sub	fp, #40
2b470     A7 16 62 FC | 	wrlong	arg03, fp
2b474     08 4E 85 F1 | 	sub	fp, #8
2b478     A7 12 02 F6 | 	mov	arg01, fp
2b47c     3C 4E 85 F1 | 	sub	fp, #60
2b480     00 14 06 F6 | 	mov	arg02, #0
2b484     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2b488     08 4E 05 F1 | 	add	fp, #8
2b48c     A7 FA 61 FC | 	wrlong	result1, fp
2b490     08 4E 85 F1 | 	sub	fp, #8
2b494     00 FA 0D F2 | 	cmp	result1, #0 wz
2b498     4C 00 90 5D |  if_ne	jmp	#LR__4361
2b49c     3C 4E 05 F1 | 	add	fp, #60
2b4a0     A7 12 02 F6 | 	mov	arg01, fp
2b4a4     3C 4E 85 F1 | 	sub	fp, #60
2b4a8     00 14 06 F6 | 	mov	arg02, #0
2b4ac     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2b4b0     08 4E 05 F1 | 	add	fp, #8
2b4b4     A7 FA 61 FC | 	wrlong	result1, fp
2b4b8     00 FA 4D F2 | 	cmps	result1, #0 wz
2b4bc     08 4E 85 F1 | 	sub	fp, #8
2b4c0     08 4E 05 A1 |  if_e	add	fp, #8
2b4c4     A7 0E 68 AC |  if_e	wrlong	#7, fp
2b4c8     08 4E 85 A1 |  if_e	sub	fp, #8
2b4cc     08 4E 05 F1 | 	add	fp, #8
2b4d0     A7 FA 01 FB | 	rdlong	result1, fp
2b4d4     08 4E 85 F1 | 	sub	fp, #8
2b4d8     04 FA 0D F2 | 	cmp	result1, #4 wz
2b4dc     08 4E 05 A1 |  if_e	add	fp, #8
2b4e0     A7 00 68 AC |  if_e	wrlong	#0, fp
2b4e4     08 4E 85 A1 |  if_e	sub	fp, #8
2b4e8                 | LR__4361
2b4e8                 | LR__4362
2b4e8                 | LR__4363
2b4e8     08 4E 05 F1 | 	add	fp, #8
2b4ec     A7 FA 09 FB | 	rdlong	result1, fp wz
2b4f0     08 4E 85 F1 | 	sub	fp, #8
2b4f4     88 00 90 5D |  if_ne	jmp	#LR__4366
2b4f8     0C 4E 05 F1 | 	add	fp, #12
2b4fc     A7 12 02 F6 | 	mov	arg01, fp
2b500     0C 4E 85 F1 | 	sub	fp, #12
2b504     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2b508     08 4E 05 F1 | 	add	fp, #8
2b50c     A7 FA 61 FC | 	wrlong	result1, fp
2b510     08 4E 85 F1 | 	sub	fp, #8
2b514     00 FA 0D F2 | 	cmp	result1, #0 wz
2b518     38 00 90 5D |  if_ne	jmp	#LR__4364
2b51c     6C 4E 05 F1 | 	add	fp, #108
2b520     A7 FA 09 FB | 	rdlong	result1, fp wz
2b524     6C 4E 85 F1 | 	sub	fp, #108
2b528     28 00 90 AD |  if_e	jmp	#LR__4364
2b52c     0C 4E 05 F1 | 	add	fp, #12
2b530     A7 12 02 F6 | 	mov	arg01, fp
2b534     60 4E 05 F1 | 	add	fp, #96
2b538     A7 14 02 FB | 	rdlong	arg02, fp
2b53c     6C 4E 85 F1 | 	sub	fp, #108
2b540     00 16 06 F6 | 	mov	arg03, #0
2b544     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2b548     08 4E 05 F1 | 	add	fp, #8
2b54c     A7 FA 61 FC | 	wrlong	result1, fp
2b550     08 4E 85 F1 | 	sub	fp, #8
2b554                 | LR__4364
2b554     08 4E 05 F1 | 	add	fp, #8
2b558     A7 FA 09 FB | 	rdlong	result1, fp wz
2b55c     08 4E 85 F1 | 	sub	fp, #8
2b560     1C 00 90 5D |  if_ne	jmp	#LR__4365
2b564     70 4E 05 F1 | 	add	fp, #112
2b568     A7 12 02 FB | 	rdlong	arg01, fp
2b56c     70 4E 85 F1 | 	sub	fp, #112
2b570     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2b574     08 4E 05 F1 | 	add	fp, #8
2b578     A7 FA 61 FC | 	wrlong	result1, fp
2b57c     08 4E 85 F1 | 	sub	fp, #8
2b580                 | LR__4365
2b580                 | LR__4366
2b580                 | LR__4367
2b580                 | LR__4368
2b580                 | ' 			}
2b580                 | ' 		}
2b580                 | ' 		;
2b580                 | ' 	}
2b580                 | ' 
2b580                 | ' 	return res ;
2b580     08 4E 05 F1 | 	add	fp, #8
2b584     A7 FA 01 FB | 	rdlong	result1, fp
2b588     08 4E 85 F1 | 	sub	fp, #8
2b58c     A7 F0 03 F6 | 	mov	ptra, fp
2b590     B2 00 A0 FD | 	call	#popregs_
2b594                 | _fatfs_cc_f_unlink_ret
2b594     2D 00 64 FD | 	ret
2b598                 | 
2b598                 | _fatfs_cc_f_mkdir
2b598     00 4A 05 F6 | 	mov	COUNT_, #0
2b59c     A8 00 A0 FD | 	call	#pushregs_
2b5a0     5C F0 07 F1 | 	add	ptra, #92
2b5a4     04 4E 05 F1 | 	add	fp, #4
2b5a8     A7 12 62 FC | 	wrlong	arg01, fp
2b5ac     A7 12 02 F6 | 	mov	arg01, fp
2b5b0     48 4E 05 F1 | 	add	fp, #72
2b5b4     A7 14 02 F6 | 	mov	arg02, fp
2b5b8     4C 4E 85 F1 | 	sub	fp, #76
2b5bc     02 16 06 F6 | 	mov	arg03, #2
2b5c0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2b5c4     08 4E 05 F1 | 	add	fp, #8
2b5c8     A7 FA 61 FC | 	wrlong	result1, fp
2b5cc     08 4E 85 F1 | 	sub	fp, #8
2b5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5d4     C4 02 90 5D |  if_ne	jmp	#LR__4375
2b5d8     4C 4E 05 F1 | 	add	fp, #76
2b5dc     A7 16 02 FB | 	rdlong	arg03, fp
2b5e0     40 4E 85 F1 | 	sub	fp, #64
2b5e4     A7 16 62 FC | 	wrlong	arg03, fp
2b5e8     A7 12 02 F6 | 	mov	arg01, fp
2b5ec     08 4E 85 F1 | 	sub	fp, #8
2b5f0     A7 14 02 FB | 	rdlong	arg02, fp
2b5f4     04 4E 85 F1 | 	sub	fp, #4
2b5f8     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2b5fc     08 4E 05 F1 | 	add	fp, #8
2b600     A7 FA 61 FC | 	wrlong	result1, fp
2b604     00 FA 4D F2 | 	cmps	result1, #0 wz
2b608     08 4E 85 F1 | 	sub	fp, #8
2b60c     08 4E 05 A1 |  if_e	add	fp, #8
2b610     A7 10 68 AC |  if_e	wrlong	#8, fp
2b614     08 4E 85 A1 |  if_e	sub	fp, #8
2b618     08 4E 05 F1 | 	add	fp, #8
2b61c     A7 FA 01 FB | 	rdlong	result1, fp
2b620     08 4E 85 F1 | 	sub	fp, #8
2b624     04 FA 0D F2 | 	cmp	result1, #4 wz
2b628     70 02 90 5D |  if_ne	jmp	#LR__4374
2b62c     4C 4E 05 F1 | 	add	fp, #76
2b630     A7 16 02 FB | 	rdlong	arg03, fp
2b634     10 4E 85 F1 | 	sub	fp, #16
2b638     A7 16 62 FC | 	wrlong	arg03, fp
2b63c     A7 12 02 F6 | 	mov	arg01, fp
2b640     3C 4E 85 F1 | 	sub	fp, #60
2b644     00 14 06 F6 | 	mov	arg02, #0
2b648     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2b64c     50 4E 05 F1 | 	add	fp, #80
2b650     A7 FA 61 FC | 	wrlong	result1, fp
2b654     48 4E 85 F1 | 	sub	fp, #72
2b658     A7 00 68 FC | 	wrlong	#0, fp
2b65c     48 4E 05 F1 | 	add	fp, #72
2b660     A7 FA 09 FB | 	rdlong	result1, fp wz
2b664     50 4E 85 F1 | 	sub	fp, #80
2b668     08 4E 05 A1 |  if_e	add	fp, #8
2b66c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2b670     08 4E 85 A1 |  if_e	sub	fp, #8
2b674     50 4E 05 F1 | 	add	fp, #80
2b678     A7 FA 01 FB | 	rdlong	result1, fp
2b67c     50 4E 85 F1 | 	sub	fp, #80
2b680     01 FA 0D F2 | 	cmp	result1, #1 wz
2b684     08 4E 05 A1 |  if_e	add	fp, #8
2b688     A7 04 68 AC |  if_e	wrlong	#2, fp
2b68c     08 4E 85 A1 |  if_e	sub	fp, #8
2b690     50 4E 05 F1 | 	add	fp, #80
2b694     A7 16 02 FB | 	rdlong	arg03, fp
2b698     50 4E 85 F1 | 	sub	fp, #80
2b69c     FF FF 7F FF 
2b6a0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2b6a4     08 4E 05 A1 |  if_e	add	fp, #8
2b6a8     A7 02 68 AC |  if_e	wrlong	#1, fp
2b6ac     08 4E 85 A1 |  if_e	sub	fp, #8
2b6b0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2b6b4     58 4E 05 F1 | 	add	fp, #88
2b6b8     A7 FA 61 FC | 	wrlong	result1, fp
2b6bc     50 4E 85 F1 | 	sub	fp, #80
2b6c0     A7 FA 09 FB | 	rdlong	result1, fp wz
2b6c4     08 4E 85 F1 | 	sub	fp, #8
2b6c8     1C 01 90 5D |  if_ne	jmp	#LR__4371
2b6cc     4C 4E 05 F1 | 	add	fp, #76
2b6d0     A7 12 02 FB | 	rdlong	arg01, fp
2b6d4     04 4E 05 F1 | 	add	fp, #4
2b6d8     A7 14 02 FB | 	rdlong	arg02, fp
2b6dc     50 4E 85 F1 | 	sub	fp, #80
2b6e0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2b6e4     08 4E 05 F1 | 	add	fp, #8
2b6e8     A7 FA 61 FC | 	wrlong	result1, fp
2b6ec     00 FA 4D F2 | 	cmps	result1, #0 wz
2b6f0     08 4E 85 F1 | 	sub	fp, #8
2b6f4     F0 00 90 5D |  if_ne	jmp	#LR__4370
2b6f8     4C 4E 05 F1 | 	add	fp, #76
2b6fc     A7 12 02 FB | 	rdlong	arg01, fp
2b700     4C 4E 85 F1 | 	sub	fp, #76
2b704     34 12 06 F1 | 	add	arg01, #52
2b708     20 14 06 F6 | 	mov	arg02, #32
2b70c     0B 16 06 F6 | 	mov	arg03, #11
2b710     98 00 A0 FD | 	call	#\builtin_bytefill_
2b714     4C 4E 05 F1 | 	add	fp, #76
2b718     A7 FA 01 FB | 	rdlong	result1, fp
2b71c     34 FA 05 F1 | 	add	result1, #52
2b720     FD 5C 48 FC | 	wrbyte	#46, result1
2b724     A7 16 02 FB | 	rdlong	arg03, fp
2b728     3F 16 06 F1 | 	add	arg03, #63
2b72c     0B 21 48 FC | 	wrbyte	#16, arg03
2b730     A7 12 02 FB | 	rdlong	arg01, fp
2b734     4A 12 06 F1 | 	add	arg01, #74
2b738     0C 4E 05 F1 | 	add	fp, #12
2b73c     A7 14 02 FB | 	rdlong	arg02, fp
2b740     09 15 62 FC | 	wrlong	arg02, arg01
2b744     0C 4E 85 F1 | 	sub	fp, #12
2b748     A7 14 02 FB | 	rdlong	arg02, fp
2b74c     0A 13 02 F6 | 	mov	arg01, arg02
2b750     34 14 06 F1 | 	add	arg02, #52
2b754     04 4E 05 F1 | 	add	fp, #4
2b758     A7 16 02 FB | 	rdlong	arg03, fp
2b75c     50 4E 85 F1 | 	sub	fp, #80
2b760     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2b764     4C 4E 05 F1 | 	add	fp, #76
2b768     A7 14 02 FB | 	rdlong	arg02, fp
2b76c     0A 13 02 F6 | 	mov	arg01, arg02
2b770     54 12 06 F1 | 	add	arg01, #84
2b774     4C 4E 85 F1 | 	sub	fp, #76
2b778     34 14 06 F1 | 	add	arg02, #52
2b77c     20 16 06 F6 | 	mov	arg03, #32
2b780     D4 2C BF FD | 	call	#__system____builtin_memmove
2b784     4C 4E 05 F1 | 	add	fp, #76
2b788     A7 16 02 FB | 	rdlong	arg03, fp
2b78c     55 16 06 F1 | 	add	arg03, #85
2b790     0B 5D 48 FC | 	wrbyte	#46, arg03
2b794     38 4E 85 F1 | 	sub	fp, #56
2b798     A7 16 02 FB | 	rdlong	arg03, fp
2b79c     40 4E 05 F1 | 	add	fp, #64
2b7a0     A7 16 62 FC | 	wrlong	arg03, fp
2b7a4     08 4E 85 F1 | 	sub	fp, #8
2b7a8     A7 14 02 FB | 	rdlong	arg02, fp
2b7ac     0A 13 02 F6 | 	mov	arg01, arg02
2b7b0     54 14 06 F1 | 	add	arg02, #84
2b7b4     4C 4E 85 F1 | 	sub	fp, #76
2b7b8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2b7bc     4C 4E 05 F1 | 	add	fp, #76
2b7c0     A7 16 02 FB | 	rdlong	arg03, fp
2b7c4     03 16 06 F1 | 	add	arg03, #3
2b7c8     0B 03 48 FC | 	wrbyte	#1, arg03
2b7cc     40 4E 85 F1 | 	sub	fp, #64
2b7d0     A7 12 02 F6 | 	mov	arg01, fp
2b7d4     0C 4E 85 F1 | 	sub	fp, #12
2b7d8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2b7dc     08 4E 05 F1 | 	add	fp, #8
2b7e0     A7 FA 61 FC | 	wrlong	result1, fp
2b7e4     08 4E 85 F1 | 	sub	fp, #8
2b7e8                 | LR__4370
2b7e8                 | LR__4371
2b7e8     08 4E 05 F1 | 	add	fp, #8
2b7ec     A7 FA 09 FB | 	rdlong	result1, fp wz
2b7f0     08 4E 85 F1 | 	sub	fp, #8
2b7f4     88 00 90 5D |  if_ne	jmp	#LR__4372
2b7f8     28 4E 05 F1 | 	add	fp, #40
2b7fc     A7 12 02 FB | 	rdlong	arg01, fp
2b800     16 12 06 F1 | 	add	arg01, #22
2b804     30 4E 05 F1 | 	add	fp, #48
2b808     A7 14 02 FB | 	rdlong	arg02, fp
2b80c     09 15 62 FC | 	wrlong	arg02, arg01
2b810     0C 4E 85 F1 | 	sub	fp, #12
2b814     A7 12 02 FB | 	rdlong	arg01, fp
2b818     24 4E 85 F1 | 	sub	fp, #36
2b81c     A7 14 02 FB | 	rdlong	arg02, fp
2b820     28 4E 05 F1 | 	add	fp, #40
2b824     A7 16 02 FB | 	rdlong	arg03, fp
2b828     50 4E 85 F1 | 	sub	fp, #80
2b82c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2b830     28 4E 05 F1 | 	add	fp, #40
2b834     A7 FA 01 FB | 	rdlong	result1, fp
2b838     0B FA 05 F1 | 	add	result1, #11
2b83c     FD 20 48 FC | 	wrbyte	#16, result1
2b840     24 4E 05 F1 | 	add	fp, #36
2b844     A7 FA 01 FB | 	rdlong	result1, fp
2b848     03 FA 05 F1 | 	add	result1, #3
2b84c     FD 02 48 FC | 	wrbyte	#1, result1
2b850     44 4E 85 F1 | 	sub	fp, #68
2b854     A7 FA 09 FB | 	rdlong	result1, fp wz
2b858     08 4E 85 F1 | 	sub	fp, #8
2b85c     3C 00 90 5D |  if_ne	jmp	#LR__4373
2b860     4C 4E 05 F1 | 	add	fp, #76
2b864     A7 12 02 FB | 	rdlong	arg01, fp
2b868     4C 4E 85 F1 | 	sub	fp, #76
2b86c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2b870     08 4E 05 F1 | 	add	fp, #8
2b874     A7 FA 61 FC | 	wrlong	result1, fp
2b878     08 4E 85 F1 | 	sub	fp, #8
2b87c     1C 00 90 FD | 	jmp	#LR__4373
2b880                 | LR__4372
2b880     3C 4E 05 F1 | 	add	fp, #60
2b884     A7 12 02 F6 | 	mov	arg01, fp
2b888     14 4E 05 F1 | 	add	fp, #20
2b88c     A7 14 02 FB | 	rdlong	arg02, fp
2b890     50 4E 85 F1 | 	sub	fp, #80
2b894     00 16 06 F6 | 	mov	arg03, #0
2b898     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2b89c                 | LR__4373
2b89c                 | LR__4374
2b89c                 | LR__4375
2b89c                 | ' 				remove_chain(&sobj, dcl, 0);
2b89c                 | ' 			}
2b89c                 | ' 		}
2b89c                 | ' 		;
2b89c                 | ' 	}
2b89c                 | ' 
2b89c                 | ' 	return res ;
2b89c     08 4E 05 F1 | 	add	fp, #8
2b8a0     A7 FA 01 FB | 	rdlong	result1, fp
2b8a4     08 4E 85 F1 | 	sub	fp, #8
2b8a8     A7 F0 03 F6 | 	mov	ptra, fp
2b8ac     B2 00 A0 FD | 	call	#popregs_
2b8b0                 | _fatfs_cc_f_mkdir_ret
2b8b0     2D 00 64 FD | 	ret
2b8b4                 | 
2b8b4                 | _fatfs_cc_f_rename
2b8b4     01 4A 05 F6 | 	mov	COUNT_, #1
2b8b8     A8 00 A0 FD | 	call	#pushregs_
2b8bc     9C F0 07 F1 | 	add	ptra, #156
2b8c0     04 4E 05 F1 | 	add	fp, #4
2b8c4     A7 12 62 FC | 	wrlong	arg01, fp
2b8c8     04 4E 05 F1 | 	add	fp, #4
2b8cc     A7 14 62 FC | 	wrlong	arg02, fp
2b8d0     A7 12 02 F6 | 	mov	arg01, fp
2b8d4     08 4E 85 F1 | 	sub	fp, #8
2b8d8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2b8dc     04 4E 05 F1 | 	add	fp, #4
2b8e0     A7 12 02 F6 | 	mov	arg01, fp
2b8e4     6C 4E 05 F1 | 	add	fp, #108
2b8e8     A7 14 02 F6 | 	mov	arg02, fp
2b8ec     70 4E 85 F1 | 	sub	fp, #112
2b8f0     02 16 06 F6 | 	mov	arg03, #2
2b8f4     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2b8f8     0C 4E 05 F1 | 	add	fp, #12
2b8fc     A7 FA 61 FC | 	wrlong	result1, fp
2b900     0C 4E 85 F1 | 	sub	fp, #12
2b904     00 FA 0D F2 | 	cmp	result1, #0 wz
2b908     44 03 90 5D |  if_ne	jmp	#LR__4393
2b90c     70 4E 05 F1 | 	add	fp, #112
2b910     A7 16 02 FB | 	rdlong	arg03, fp
2b914     60 4E 85 F1 | 	sub	fp, #96
2b918     A7 16 62 FC | 	wrlong	arg03, fp
2b91c     A7 12 02 F6 | 	mov	arg01, fp
2b920     0C 4E 85 F1 | 	sub	fp, #12
2b924     A7 14 02 FB | 	rdlong	arg02, fp
2b928     04 4E 85 F1 | 	sub	fp, #4
2b92c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2b930     0C 4E 05 F1 | 	add	fp, #12
2b934     A7 FA 61 FC | 	wrlong	result1, fp
2b938     00 FA 4D F2 | 	cmps	result1, #0 wz
2b93c     0C 4E 85 F1 | 	sub	fp, #12
2b940     1C 00 90 5D |  if_ne	jmp	#LR__4380
2b944     3B 4E 05 F1 | 	add	fp, #59
2b948     A7 FA C1 FA | 	rdbyte	result1, fp
2b94c     3B 4E 85 F1 | 	sub	fp, #59
2b950     A0 FA CD F7 | 	test	result1, #160 wz
2b954     0C 4E 05 51 |  if_ne	add	fp, #12
2b958     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b95c     0C 4E 85 51 |  if_ne	sub	fp, #12
2b960                 | LR__4380
2b960     0C 4E 05 F1 | 	add	fp, #12
2b964     A7 1E 0A FB | 	rdlong	local01, fp wz
2b968     0C 4E 85 F1 | 	sub	fp, #12
2b96c     E0 02 90 5D |  if_ne	jmp	#LR__4392
2b970     74 4E 05 F1 | 	add	fp, #116
2b974     A7 12 02 F6 | 	mov	arg01, fp
2b978     48 4E 85 F1 | 	sub	fp, #72
2b97c     A7 14 02 FB | 	rdlong	arg02, fp
2b980     2C 4E 85 F1 | 	sub	fp, #44
2b984     20 16 06 F6 | 	mov	arg03, #32
2b988     CC 2A BF FD | 	call	#__system____builtin_memmove
2b98c     40 4E 05 F1 | 	add	fp, #64
2b990     A7 12 02 F6 | 	mov	arg01, fp
2b994     30 4E 85 F1 | 	sub	fp, #48
2b998     A7 14 02 F6 | 	mov	arg02, fp
2b99c     10 4E 85 F1 | 	sub	fp, #16
2b9a0     30 16 06 F6 | 	mov	arg03, #48
2b9a4     B0 2A BF FD | 	call	#__system____builtin_memmove
2b9a8     40 4E 05 F1 | 	add	fp, #64
2b9ac     A7 12 02 F6 | 	mov	arg01, fp
2b9b0     38 4E 85 F1 | 	sub	fp, #56
2b9b4     A7 14 02 FB | 	rdlong	arg02, fp
2b9b8     08 4E 85 F1 | 	sub	fp, #8
2b9bc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2b9c0     0C 4E 05 F1 | 	add	fp, #12
2b9c4     A7 FA 61 FC | 	wrlong	result1, fp
2b9c8     0C 4E 85 F1 | 	sub	fp, #12
2b9cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9d0     4C 00 90 5D |  if_ne	jmp	#LR__4383
2b9d4     48 4E 05 F1 | 	add	fp, #72
2b9d8     A7 FA 01 FB | 	rdlong	result1, fp
2b9dc     30 4E 85 F1 | 	sub	fp, #48
2b9e0     A7 16 02 FB | 	rdlong	arg03, fp
2b9e4     18 4E 85 F1 | 	sub	fp, #24
2b9e8     0B FB 09 F2 | 	cmp	result1, arg03 wz
2b9ec     20 00 90 5D |  if_ne	jmp	#LR__4381
2b9f0     50 4E 05 F1 | 	add	fp, #80
2b9f4     A7 FA 01 FB | 	rdlong	result1, fp
2b9f8     30 4E 85 F1 | 	sub	fp, #48
2b9fc     A7 16 02 FB | 	rdlong	arg03, fp
2ba00     20 4E 85 F1 | 	sub	fp, #32
2ba04     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ba08     04 1E 06 A6 |  if_e	mov	local01, #4
2ba0c     04 00 90 AD |  if_e	jmp	#LR__4382
2ba10                 | LR__4381
2ba10     08 1E 06 F6 | 	mov	local01, #8
2ba14                 | LR__4382
2ba14     0C 4E 05 F1 | 	add	fp, #12
2ba18     A7 1E 62 FC | 	wrlong	local01, fp
2ba1c     0C 4E 85 F1 | 	sub	fp, #12
2ba20                 | LR__4383
2ba20     0C 4E 05 F1 | 	add	fp, #12
2ba24     A7 1E 02 FB | 	rdlong	local01, fp
2ba28     0C 4E 85 F1 | 	sub	fp, #12
2ba2c     04 1E 0E F2 | 	cmp	local01, #4 wz
2ba30     CC 01 90 5D |  if_ne	jmp	#LR__4389
2ba34     40 4E 05 F1 | 	add	fp, #64
2ba38     A7 12 02 F6 | 	mov	arg01, fp
2ba3c     40 4E 85 F1 | 	sub	fp, #64
2ba40     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2ba44     0C 4E 05 F1 | 	add	fp, #12
2ba48     A7 FA 61 FC | 	wrlong	result1, fp
2ba4c     0C 4E 85 F1 | 	sub	fp, #12
2ba50     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba54     A8 01 90 5D |  if_ne	jmp	#LR__4388
2ba58     5C 4E 05 F1 | 	add	fp, #92
2ba5c     A7 12 02 FB | 	rdlong	arg01, fp
2ba60     38 4E 05 F1 | 	add	fp, #56
2ba64     A7 12 62 FC | 	wrlong	arg01, fp
2ba68     0D 12 06 F1 | 	add	arg01, #13
2ba6c     20 4E 85 F1 | 	sub	fp, #32
2ba70     A7 14 02 F6 | 	mov	arg02, fp
2ba74     74 4E 85 F1 | 	sub	fp, #116
2ba78     0D 14 06 F1 | 	add	arg02, #13
2ba7c     13 16 06 F6 | 	mov	arg03, #19
2ba80     D4 29 BF FD | 	call	#__system____builtin_memmove
2ba84     94 4E 05 F1 | 	add	fp, #148
2ba88     A7 1E 02 FB | 	rdlong	local01, fp
2ba8c     15 4E 85 F1 | 	sub	fp, #21
2ba90     A7 FA C1 FA | 	rdbyte	result1, fp
2ba94     0B 1E 06 F1 | 	add	local01, #11
2ba98     0F FB 41 FC | 	wrbyte	result1, local01
2ba9c     15 4E 05 F1 | 	add	fp, #21
2baa0     A7 1E 02 FB | 	rdlong	local01, fp
2baa4     94 4E 85 F1 | 	sub	fp, #148
2baa8     0B 1E 06 F1 | 	add	local01, #11
2baac     0F 1F C2 FA | 	rdbyte	local01, local01
2bab0     10 1E CE F7 | 	test	local01, #16 wz
2bab4     24 00 90 5D |  if_ne	jmp	#LR__4384
2bab8     94 4E 05 F1 | 	add	fp, #148
2babc     A7 FA 01 FB | 	rdlong	result1, fp
2bac0     FD 1E 02 F6 | 	mov	local01, result1
2bac4     94 4E 85 F1 | 	sub	fp, #148
2bac8     0B FA 05 F1 | 	add	result1, #11
2bacc     FD FA C1 FA | 	rdbyte	result1, result1
2bad0     20 FA 45 F5 | 	or	result1, #32
2bad4     0B 1E 06 F1 | 	add	local01, #11
2bad8     0F FB 41 FC | 	wrbyte	result1, local01
2badc                 | LR__4384
2badc     70 4E 05 F1 | 	add	fp, #112
2bae0     A7 1E 02 FB | 	rdlong	local01, fp
2bae4     03 1E 06 F1 | 	add	local01, #3
2bae8     0F 03 48 FC | 	wrbyte	#1, local01
2baec     24 4E 05 F1 | 	add	fp, #36
2baf0     A7 1E 02 FB | 	rdlong	local01, fp
2baf4     94 4E 85 F1 | 	sub	fp, #148
2baf8     0B 1E 06 F1 | 	add	local01, #11
2bafc     0F 1F C2 FA | 	rdbyte	local01, local01
2bb00     10 1E CE F7 | 	test	local01, #16 wz
2bb04     F8 00 90 AD |  if_e	jmp	#LR__4387
2bb08     18 4E 05 F1 | 	add	fp, #24
2bb0c     A7 16 02 FB | 	rdlong	arg03, fp
2bb10     30 4E 05 F1 | 	add	fp, #48
2bb14     A7 1E 02 FB | 	rdlong	local01, fp
2bb18     48 4E 85 F1 | 	sub	fp, #72
2bb1c     0F 17 0A F2 | 	cmp	arg03, local01 wz
2bb20     DC 00 90 AD |  if_e	jmp	#LR__4387
2bb24     70 4E 05 F1 | 	add	fp, #112
2bb28     A7 12 02 FB | 	rdlong	arg01, fp
2bb2c     09 1F 02 F6 | 	mov	local01, arg01
2bb30     24 4E 05 F1 | 	add	fp, #36
2bb34     A7 14 02 FB | 	rdlong	arg02, fp
2bb38     94 4E 85 F1 | 	sub	fp, #148
2bb3c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2bb40     FD 14 02 F6 | 	mov	arg02, result1
2bb44     0F 13 02 F6 | 	mov	arg01, local01
2bb48     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2bb4c     98 4E 05 F1 | 	add	fp, #152
2bb50     A7 FA 61 FC | 	wrlong	result1, fp
2bb54     00 FA 4D F2 | 	cmps	result1, #0 wz
2bb58     98 4E 85 F1 | 	sub	fp, #152
2bb5c     0C 4E 05 A1 |  if_e	add	fp, #12
2bb60     A7 04 68 AC |  if_e	wrlong	#2, fp
2bb64     0C 4E 85 A1 |  if_e	sub	fp, #12
2bb68     94 00 90 AD |  if_e	jmp	#LR__4386
2bb6c     70 4E 05 F1 | 	add	fp, #112
2bb70     A7 12 02 FB | 	rdlong	arg01, fp
2bb74     28 4E 05 F1 | 	add	fp, #40
2bb78     A7 14 02 FB | 	rdlong	arg02, fp
2bb7c     98 4E 85 F1 | 	sub	fp, #152
2bb80     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2bb84     0C 4E 05 F1 | 	add	fp, #12
2bb88     A7 FA 61 FC | 	wrlong	result1, fp
2bb8c     64 4E 05 F1 | 	add	fp, #100
2bb90     A7 1E 02 FB | 	rdlong	local01, fp
2bb94     54 1E 06 F1 | 	add	local01, #84
2bb98     24 4E 05 F1 | 	add	fp, #36
2bb9c     A7 1E 62 FC | 	wrlong	local01, fp
2bba0     88 4E 85 F1 | 	sub	fp, #136
2bba4     A7 1E 0A FB | 	rdlong	local01, fp wz
2bba8     0C 4E 85 F1 | 	sub	fp, #12
2bbac     50 00 90 5D |  if_ne	jmp	#LR__4385
2bbb0     94 4E 05 F1 | 	add	fp, #148
2bbb4     A7 1E 02 FB | 	rdlong	local01, fp
2bbb8     94 4E 85 F1 | 	sub	fp, #148
2bbbc     01 1E 06 F1 | 	add	local01, #1
2bbc0     0F 1F C2 FA | 	rdbyte	local01, local01
2bbc4     2E 1E 0E F2 | 	cmp	local01, #46 wz
2bbc8     34 00 90 5D |  if_ne	jmp	#LR__4385
2bbcc     70 4E 05 F1 | 	add	fp, #112
2bbd0     A7 12 02 FB | 	rdlong	arg01, fp
2bbd4     24 4E 05 F1 | 	add	fp, #36
2bbd8     A7 14 02 FB | 	rdlong	arg02, fp
2bbdc     4C 4E 85 F1 | 	sub	fp, #76
2bbe0     A7 16 02 FB | 	rdlong	arg03, fp
2bbe4     48 4E 85 F1 | 	sub	fp, #72
2bbe8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2bbec     70 4E 05 F1 | 	add	fp, #112
2bbf0     A7 1E 02 FB | 	rdlong	local01, fp
2bbf4     70 4E 85 F1 | 	sub	fp, #112
2bbf8     03 1E 06 F1 | 	add	local01, #3
2bbfc     0F 03 48 FC | 	wrbyte	#1, local01
2bc00                 | LR__4385
2bc00                 | LR__4386
2bc00                 | LR__4387
2bc00                 | LR__4388
2bc00                 | LR__4389
2bc00     0C 4E 05 F1 | 	add	fp, #12
2bc04     A7 1E 0A FB | 	rdlong	local01, fp wz
2bc08     0C 4E 85 F1 | 	sub	fp, #12
2bc0c     40 00 90 5D |  if_ne	jmp	#LR__4391
2bc10     10 4E 05 F1 | 	add	fp, #16
2bc14     A7 12 02 F6 | 	mov	arg01, fp
2bc18     10 4E 85 F1 | 	sub	fp, #16
2bc1c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2bc20     0C 4E 05 F1 | 	add	fp, #12
2bc24     A7 FA 61 FC | 	wrlong	result1, fp
2bc28     0C 4E 85 F1 | 	sub	fp, #12
2bc2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc30     1C 00 90 5D |  if_ne	jmp	#LR__4390
2bc34     70 4E 05 F1 | 	add	fp, #112
2bc38     A7 12 02 FB | 	rdlong	arg01, fp
2bc3c     70 4E 85 F1 | 	sub	fp, #112
2bc40     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2bc44     0C 4E 05 F1 | 	add	fp, #12
2bc48     A7 FA 61 FC | 	wrlong	result1, fp
2bc4c     0C 4E 85 F1 | 	sub	fp, #12
2bc50                 | LR__4390
2bc50                 | LR__4391
2bc50                 | LR__4392
2bc50                 | LR__4393
2bc50                 | ' 					res = sync_fs(fs);
2bc50                 | ' 				}
2bc50                 | ' 			}
2bc50                 | ' 
2bc50                 | ' 		}
2bc50                 | ' 		;
2bc50                 | ' 	}
2bc50                 | ' 
2bc50                 | ' 	return res ;
2bc50     0C 4E 05 F1 | 	add	fp, #12
2bc54     A7 FA 01 FB | 	rdlong	result1, fp
2bc58     0C 4E 85 F1 | 	sub	fp, #12
2bc5c     A7 F0 03 F6 | 	mov	ptra, fp
2bc60     B2 00 A0 FD | 	call	#popregs_
2bc64                 | _fatfs_cc_f_rename_ret
2bc64     2D 00 64 FD | 	ret
2bc68                 | 
2bc68                 | _fatfs_cc_time
2bc68     00 4A 05 F6 | 	mov	COUNT_, #0
2bc6c     A8 00 A0 FD | 	call	#pushregs_
2bc70     14 F0 07 F1 | 	add	ptra, #20
2bc74     04 4E 05 F1 | 	add	fp, #4
2bc78     A7 12 62 FC | 	wrlong	arg01, fp
2bc7c     04 4E 05 F1 | 	add	fp, #4
2bc80     A7 12 02 F6 | 	mov	arg01, fp
2bc84     08 4E 85 F1 | 	sub	fp, #8
2bc88     00 14 06 F6 | 	mov	arg02, #0
2bc8c     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2bc90     08 4E 05 F1 | 	add	fp, #8
2bc94     A7 FA 01 FB | 	rdlong	result1, fp
2bc98     08 4E 05 F1 | 	add	fp, #8
2bc9c     A7 FA 61 FC | 	wrlong	result1, fp
2bca0     0C 4E 85 F1 | 	sub	fp, #12
2bca4     A7 FA 09 FB | 	rdlong	result1, fp wz
2bca8     04 4E 85 F1 | 	sub	fp, #4
2bcac     18 00 90 AD |  if_e	jmp	#LR__4400
2bcb0     04 4E 05 F1 | 	add	fp, #4
2bcb4     A7 FA 01 FB | 	rdlong	result1, fp
2bcb8     0C 4E 05 F1 | 	add	fp, #12
2bcbc     A7 14 02 FB | 	rdlong	arg02, fp
2bcc0     10 4E 85 F1 | 	sub	fp, #16
2bcc4     FD 14 62 FC | 	wrlong	arg02, result1
2bcc8                 | LR__4400
2bcc8                 | '         *tp = now;
2bcc8                 | '     return now;
2bcc8     10 4E 05 F1 | 	add	fp, #16
2bccc     A7 FA 01 FB | 	rdlong	result1, fp
2bcd0     10 4E 85 F1 | 	sub	fp, #16
2bcd4     A7 F0 03 F6 | 	mov	ptra, fp
2bcd8     B2 00 A0 FD | 	call	#popregs_
2bcdc                 | _fatfs_cc_time_ret
2bcdc     2D 00 64 FD | 	ret
2bce0                 | 
2bce0                 | _fatfs_cc_mktime
2bce0     06 4A 05 F6 | 	mov	COUNT_, #6
2bce4     A8 00 A0 FD | 	call	#pushregs_
2bce8     09 1F 02 F6 | 	mov	local01, arg01
2bcec     14 1E 06 F1 | 	add	local01, #20
2bcf0     0F 13 02 FB | 	rdlong	arg01, local01
2bcf4     14 1E 86 F1 | 	sub	local01, #20
2bcf8     46 12 56 F2 | 	cmps	arg01, #70 wc
2bcfc                 | '                 return (time_t) -1;
2bcfc     01 FA 65 C6 |  if_b	neg	result1, #1
2bd00     7C 01 90 CD |  if_b	jmp	#LR__4414
2bd04     03 00 00 FF 
2bd08     6C 21 06 F6 | 	mov	local02, ##1900
2bd0c     14 1E 06 F1 | 	add	local01, #20
2bd10     0F FB 01 FB | 	rdlong	result1, local01
2bd14     FD 20 02 F1 | 	add	local02, result1
2bd18     08 1E 86 F1 | 	sub	local01, #8
2bd1c     0F 23 02 FB | 	rdlong	local03, local01
2bd20     01 22 86 F1 | 	sub	local03, #1
2bd24     04 1E 06 F1 | 	add	local01, #4
2bd28     0F 13 02 FB | 	rdlong	arg01, local01
2bd2c     10 1E 86 F1 | 	sub	local01, #16
2bd30     02 12 66 F0 | 	shl	arg01, #2
2bd34     02 00 00 FF 
2bd38     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2bd3c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2bd40     09 FB 01 FB | 	rdlong	result1, arg01
2bd44     FD 22 02 F1 | 	add	local03, result1
2bd48     10 13 02 F6 | 	mov	arg01, local02
2bd4c     02 00 00 FF 
2bd50     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2bd54     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2bd58     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd5c     1C 00 90 AD |  if_e	jmp	#LR__4410
2bd60     00 24 06 F6 | 	mov	local04, #0
2bd64     10 1E 06 F1 | 	add	local01, #16
2bd68     0F FB 01 FB | 	rdlong	result1, local01
2bd6c     10 1E 86 F1 | 	sub	local01, #16
2bd70     02 FA 55 F2 | 	cmps	result1, #2 wc
2bd74     01 24 06 36 |  if_ae	mov	local04, #1
2bd78     04 00 90 FD | 	jmp	#LR__4411
2bd7c                 | LR__4410
2bd7c     00 24 06 F6 | 	mov	local04, #0
2bd80                 | LR__4411
2bd80     04 1E 06 F1 | 	add	local01, #4
2bd84     0F FB 01 FB | 	rdlong	result1, local01
2bd88     04 1E 86 F1 | 	sub	local01, #4
2bd8c     0F 27 02 FB | 	rdlong	local05, local01
2bd90     08 1E 06 F1 | 	add	local01, #8
2bd94     0F 13 02 FB | 	rdlong	arg01, local01
2bd98     07 00 00 FF 
2bd9c     10 12 06 FD | 	qmul	arg01, ##3600
2bda0     12 23 02 F1 | 	add	local03, local04
2bda4     FD 24 02 F6 | 	mov	local04, result1
2bda8     04 24 66 F0 | 	shl	local04, #4
2bdac     FD 24 82 F1 | 	sub	local04, result1
2bdb0     02 24 66 F0 | 	shl	local04, #2
2bdb4     12 27 02 F1 | 	add	local05, local04
2bdb8     08 1E 86 F1 | 	sub	local01, #8
2bdbc     18 24 62 FD | 	getqx	local04
2bdc0     A8 00 00 FF 
2bdc4     80 23 06 FD | 	qmul	local03, ##86400
2bdc8     12 27 02 F1 | 	add	local05, local04
2bdcc     10 23 02 F6 | 	mov	local03, local02
2bdd0     03 00 00 FF 
2bdd4     B2 23 86 F1 | 	sub	local03, ##1970
2bdd8     18 24 62 FD | 	getqx	local04
2bddc     99 F0 00 FF 
2bde0     80 23 06 FD | 	qmul	local03, ##31536000
2bde4     12 27 02 F1 | 	add	local05, local04
2bde8     10 23 02 F6 | 	mov	local03, local02
2bdec     03 00 00 FF 
2bdf0     B1 23 86 F1 | 	sub	local03, ##1969
2bdf4     11 29 52 F6 | 	abs	local06, local03 wc
2bdf8     02 28 46 F0 | 	shr	local06, #2
2bdfc     14 29 82 F6 | 	negc	local06, local06
2be00     03 00 00 FF 
2be04     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2be08     18 24 62 FD | 	getqx	local04
2be0c     12 27 02 F1 | 	add	local05, local04
2be10     18 00 90 CD |  if_b	jmp	#LR__4412
2be14     03 00 00 FF 
2be18     D0 21 86 F1 | 	sub	local02, ##2000
2be1c     10 25 52 F6 | 	abs	local04, local02 wc
2be20     64 24 16 FD | 	qdiv	local04, #100
2be24     18 24 62 FD | 	getqx	local04
2be28     12 29 A2 F3 | 	sumnc	local06, local04
2be2c                 | LR__4412
2be2c     A8 00 00 FF 
2be30     80 29 06 FD | 	qmul	local06, ##86400
2be34     18 28 62 FD | 	getqx	local06
2be38     14 27 02 F1 | 	add	local05, local06
2be3c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2be40     02 00 00 FF 
2be44     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2be48     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2be4c     14 27 02 F1 | 	add	local05, local06
2be50     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2be54     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2be58     02 00 00 FF 
2be5c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2be60     01 22 0E F2 | 	cmp	local03, #1 wz
2be64     14 00 90 5D |  if_ne	jmp	#LR__4413
2be68     0F 13 02 F6 | 	mov	arg01, local01
2be6c     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2be70     00 FA 0D F2 | 	cmp	result1, #0 wz
2be74     07 00 00 5F 
2be78     10 26 86 51 |  if_ne	sub	local05, ##3600
2be7c                 | LR__4413
2be7c                 | '                 s -=  (3600L) ;
2be7c                 | ' 
2be7c                 | '         return s;
2be7c     13 FB 01 F6 | 	mov	result1, local05
2be80                 | LR__4414
2be80     A7 F0 03 F6 | 	mov	ptra, fp
2be84     B2 00 A0 FD | 	call	#popregs_
2be88                 | _fatfs_cc_mktime_ret
2be88     2D 00 64 FD | 	ret
2be8c                 | 
2be8c                 | _fatfs_cc__gmtime_r
2be8c     03 4A 05 F6 | 	mov	COUNT_, #3
2be90     A8 00 A0 FD | 	call	#pushregs_
2be94     09 1F 02 FB | 	rdlong	local01, arg01
2be98     A8 00 00 FF 
2be9c     80 1F 16 FD | 	qdiv	local01, ##86400
2bea0     18 FA 61 FD | 	getqx	result1
2bea4     04 FA 05 F1 | 	add	result1, #4
2bea8     07 FA 15 FD | 	qdiv	result1, #7
2beac     18 14 06 F1 | 	add	arg02, #24
2beb0     D1 7F 27 FF 
2beb4     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2beb8     D1 7F 27 3F 
2bebc     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2bec0     03 00 00 3F 
2bec4     DC 21 06 36 |  if_ae	mov	local02, ##2012
2bec8     03 00 00 CF 
2becc     B2 21 06 C6 |  if_b	mov	local02, ##1970
2bed0                 | ' 	  year = 1970;
2bed0                 | ' 	}
2bed0                 | ' 
2bed0                 | ' 	for(;;) {
2bed0     19 FA 61 FD | 	getqy	result1
2bed4     0A FB 61 FC | 	wrlong	result1, arg02
2bed8     18 14 86 F1 | 	sub	arg02, #24
2bedc                 | LR__4420
2bedc     10 13 02 F6 | 	mov	arg01, local02
2bee0     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2bee4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bee8     42 F1 00 5F 
2beec     00 23 06 56 |  if_ne	mov	local03, ##31622400
2bef0     99 F0 00 AF 
2bef4     80 23 06 A6 |  if_e	mov	local03, ##31536000
2bef8     11 1F 12 F2 | 	cmp	local01, local03 wc
2befc                 | ' 	    break;
2befc     01 20 06 31 |  if_ae	add	local02, #1
2bf00     11 1F 82 31 |  if_ae	sub	local01, local03
2bf04     D4 FF 9F 3D |  if_ae	jmp	#LR__4420
2bf08     A8 00 00 FF 
2bf0c     80 1F 16 FD | 	qdiv	local01, ##86400
2bf10     10 23 02 F6 | 	mov	local03, local02
2bf14     03 00 00 FF 
2bf18     6C 23 86 F1 | 	sub	local03, ##1900
2bf1c     14 14 06 F1 | 	add	arg02, #20
2bf20     0A 23 62 FC | 	wrlong	local03, arg02
2bf24     08 14 06 F1 | 	add	arg02, #8
2bf28     10 13 02 F6 | 	mov	arg01, local02
2bf2c     18 20 62 FD | 	getqx	local02
2bf30     0A 21 62 FC | 	wrlong	local02, arg02
2bf34     1C 14 86 F1 | 	sub	arg02, #28
2bf38     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2bf3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf40     1D 22 06 56 |  if_ne	mov	local03, #29
2bf44     1C 22 06 A6 |  if_e	mov	local03, #28
2bf48     02 00 00 FF 
2bf4c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2bf50     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2bf54     02 00 00 FF 
2bf58     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2bf5c                 | ' 
2bf5c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2bf5c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2bf5c     00 12 06 F6 | 	mov	arg01, #0
2bf60     97 2A 48 FB | 	callpa	#(@LR__4422-@LR__4421)>>2,fcache_load_ptr_
2bf64                 | LR__4421
2bf64     09 23 02 F6 | 	mov	local03, arg01
2bf68     02 22 66 F0 | 	shl	local03, #2
2bf6c     02 00 00 FF 
2bf70     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2bf74     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2bf78     11 23 02 FB | 	rdlong	local03, local03
2bf7c     11 21 52 F2 | 	cmps	local02, local03 wc
2bf80     02 00 00 FF 
2bf84     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2bf88     2C 00 90 CD |  if_b	jmp	#LR__4423
2bf8c     09 23 02 F6 | 	mov	local03, arg01
2bf90     02 22 66 F0 | 	shl	local03, #2
2bf94     02 00 00 FF 
2bf98     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2bf9c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2bfa0     11 23 02 FB | 	rdlong	local03, local03
2bfa4     11 21 82 F1 | 	sub	local02, local03
2bfa8     01 12 06 F1 | 	add	arg01, #1
2bfac     02 00 00 FF 
2bfb0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2bfb4     AC FF 9F FD | 	jmp	#LR__4421
2bfb8                 | LR__4422
2bfb8                 | LR__4423
2bfb8     A8 00 00 FF 
2bfbc     80 1F 16 FD | 	qdiv	local01, ##86400
2bfc0     10 14 06 F1 | 	add	arg02, #16
2bfc4     0A 13 62 FC | 	wrlong	arg01, arg02
2bfc8     01 20 06 F1 | 	add	local02, #1
2bfcc     04 14 86 F1 | 	sub	arg02, #4
2bfd0     0A 21 62 FC | 	wrlong	local02, arg02
2bfd4     19 1E 62 FD | 	getqy	local01
2bfd8     07 00 00 FF 
2bfdc     10 1E 16 FD | 	qdiv	local01, ##3600
2bfe0     18 22 62 FD | 	getqx	local03
2bfe4     07 00 00 FF 
2bfe8     10 1E 16 FD | 	qdiv	local01, ##3600
2bfec     04 14 86 F1 | 	sub	arg02, #4
2bff0     0A 23 62 FC | 	wrlong	local03, arg02
2bff4     19 1E 62 FD | 	getqy	local01
2bff8     3C 1E 16 FD | 	qdiv	local01, #60
2bffc     18 22 62 FD | 	getqx	local03
2c000     3C 1E 16 FD | 	qdiv	local01, #60
2c004     04 14 86 F1 | 	sub	arg02, #4
2c008     0A 23 62 FC | 	wrlong	local03, arg02
2c00c     04 14 86 F1 | 	sub	arg02, #4
2c010                 | '         stm->tm_isdst = 0;
2c010                 | ' 
2c010                 | ' ;
2c010                 | '         return stm;
2c010     0A FB 01 F6 | 	mov	result1, arg02
2c014     19 22 62 FD | 	getqy	local03
2c018     0A 23 62 FC | 	wrlong	local03, arg02
2c01c     20 14 06 F1 | 	add	arg02, #32
2c020     0A 01 68 FC | 	wrlong	#0, arg02
2c024     A7 F0 03 F6 | 	mov	ptra, fp
2c028     B2 00 A0 FD | 	call	#popregs_
2c02c                 | _fatfs_cc__gmtime_r_ret
2c02c     2D 00 64 FD | 	ret
2c030                 | 
2c030                 | _fatfs_cc__tzset
2c030     6D 01 00 FF 
2c034     75 13 06 F6 | 	mov	arg01, ##@LR__4735
2c038     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2c03c     FD 12 02 F6 | 	mov	arg01, result1
2c040     02 00 00 FF 
2c044     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2c048     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c04c     02 00 00 FF 
2c050     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c054     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2c058     02 00 00 FF 
2c05c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c060     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c064     02 00 00 FF 
2c068     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2c06c                 | _fatfs_cc__tzset_ret
2c06c     2D 00 64 FD | 	ret
2c070                 | 
2c070                 | _fatfs_cc_getenv
2c070     06 4A 05 F6 | 	mov	COUNT_, #6
2c074     A8 00 A0 FD | 	call	#pushregs_
2c078     09 1F 02 F6 | 	mov	local01, arg01
2c07c     09 21 02 F6 | 	mov	local02, arg01
2c080     97 06 48 FB | 	callpa	#(@LR__4431-@LR__4430)>>2,fcache_load_ptr_
2c084                 | LR__4430
2c084     10 FB C9 FA | 	rdbyte	result1, local02 wz
2c088     01 20 06 51 |  if_ne	add	local02, #1
2c08c     F4 FF 9F 5D |  if_ne	jmp	#LR__4430
2c090                 | LR__4431
2c090     09 21 82 F1 | 	sub	local02, arg01
2c094     10 FB 01 F6 | 	mov	result1, local02
2c098     02 00 00 FF 
2c09c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c0a0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2c0a4     02 00 00 FF 
2c0a8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c0ac                 | '             return 0;
2c0ac     00 FA 05 A6 |  if_e	mov	result1, #0
2c0b0     5C 00 90 AD |  if_e	jmp	#LR__4434
2c0b4                 | ' 
2c0b4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2c0b4     02 00 00 FF 
2c0b8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c0bc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c0c0     02 00 00 FF 
2c0c4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c0c8                 | LR__4432
2c0c8     11 25 0A FB | 	rdlong	local04, local03 wz
2c0cc     3C 00 90 AD |  if_e	jmp	#LR__4433
2c0d0     12 13 02 F6 | 	mov	arg01, local04
2c0d4     0F 15 02 F6 | 	mov	arg02, local01
2c0d8     10 17 02 F6 | 	mov	arg03, local02
2c0dc     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2c0e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0e4     10 27 02 A6 |  if_e	mov	local05, local02
2c0e8     12 27 02 A1 |  if_e	add	local05, local04
2c0ec     13 29 C2 AA |  if_e	rdbyte	local06, local05
2c0f0     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2c0f4                 | ' 			return name+len+1;
2c0f4     10 25 02 A1 |  if_e	add	local04, local02
2c0f8     01 24 06 A1 |  if_e	add	local04, #1
2c0fc     12 FB 01 A6 |  if_e	mov	result1, local04
2c100     0C 00 90 AD |  if_e	jmp	#LR__4434
2c104     04 22 06 F1 | 	add	local03, #4
2c108     BC FF 9F FD | 	jmp	#LR__4432
2c10c                 | LR__4433
2c10c                 | ' 	}
2c10c                 | ' 	return 0;
2c10c     00 FA 05 F6 | 	mov	result1, #0
2c110                 | LR__4434
2c110     A7 F0 03 F6 | 	mov	ptra, fp
2c114     B2 00 A0 FD | 	call	#popregs_
2c118                 | _fatfs_cc_getenv_ret
2c118     2D 00 64 FD | 	ret
2c11c                 | 
2c11c                 | _fatfs_cc__get_fattime
2c11c     00 4A 05 F6 | 	mov	COUNT_, #0
2c120     A8 00 A0 FD | 	call	#pushregs_
2c124     34 F0 07 F1 | 	add	ptra, #52
2c128     00 12 06 F6 | 	mov	arg01, #0
2c12c     38 FB BF FD | 	call	#_fatfs_cc_time
2c130     04 4E 05 F1 | 	add	fp, #4
2c134     A7 FA 61 FC | 	wrlong	result1, fp
2c138     A7 12 02 F6 | 	mov	arg01, fp
2c13c     0C 4E 05 F1 | 	add	fp, #12
2c140     A7 14 02 F6 | 	mov	arg02, fp
2c144     10 4E 85 F1 | 	sub	fp, #16
2c148     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2c14c     24 4E 05 F1 | 	add	fp, #36
2c150     A7 14 02 FB | 	rdlong	arg02, fp
2c154     50 14 86 F1 | 	sub	arg02, #80
2c158     09 14 66 F0 | 	shl	arg02, #9
2c15c     04 4E 85 F1 | 	sub	fp, #4
2c160     A7 FA 01 FB | 	rdlong	result1, fp
2c164     01 FA 05 F1 | 	add	result1, #1
2c168     05 FA 65 F0 | 	shl	result1, #5
2c16c     FD 14 42 F5 | 	or	arg02, result1
2c170     04 4E 85 F1 | 	sub	fp, #4
2c174     A7 FA 01 FB | 	rdlong	result1, fp
2c178     FD 14 42 F5 | 	or	arg02, result1
2c17c     14 4E 85 F1 | 	sub	fp, #20
2c180     A7 14 62 FC | 	wrlong	arg02, fp
2c184     10 4E 05 F1 | 	add	fp, #16
2c188     A7 14 02 FB | 	rdlong	arg02, fp
2c18c     0B 14 66 F0 | 	shl	arg02, #11
2c190     04 4E 85 F1 | 	sub	fp, #4
2c194     A7 FA 01 FB | 	rdlong	result1, fp
2c198     05 FA 65 F0 | 	shl	result1, #5
2c19c     FD 14 42 F5 | 	or	arg02, result1
2c1a0     04 4E 85 F1 | 	sub	fp, #4
2c1a4     A7 FA 01 FB | 	rdlong	result1, fp
2c1a8     FD 14 42 F5 | 	or	arg02, result1
2c1ac     04 4E 85 F1 | 	sub	fp, #4
2c1b0     A7 14 62 FC | 	wrlong	arg02, fp
2c1b4                 | ' 
2c1b4                 | '     now = time(0);
2c1b4                 | '     _gmtime_r (&now, &date);
2c1b4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2c1b4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2c1b4                 | '     return (ffdate << 16) | fftime;
2c1b4     04 4E 85 F1 | 	sub	fp, #4
2c1b8     A7 FA 01 FB | 	rdlong	result1, fp
2c1bc     10 FA 65 F0 | 	shl	result1, #16
2c1c0     08 4E 85 F1 | 	sub	fp, #8
2c1c4     0A FB 41 F5 | 	or	result1, arg02
2c1c8     A7 F0 03 F6 | 	mov	ptra, fp
2c1cc     B2 00 A0 FD | 	call	#popregs_
2c1d0                 | _fatfs_cc__get_fattime_ret
2c1d0     2D 00 64 FD | 	ret
2c1d4                 | 
2c1d4                 | _fatfs_cc_unixtime_0895
2c1d4     00 4A 05 F6 | 	mov	COUNT_, #0
2c1d8     A8 00 A0 FD | 	call	#pushregs_
2c1dc     34 F0 07 F1 | 	add	ptra, #52
2c1e0     04 4E 05 F1 | 	add	fp, #4
2c1e4     A7 12 62 FC | 	wrlong	arg01, fp
2c1e8     04 4E 05 F1 | 	add	fp, #4
2c1ec     A7 14 62 FC | 	wrlong	arg02, fp
2c1f0     04 4E 85 F1 | 	sub	fp, #4
2c1f4     A7 14 02 FB | 	rdlong	arg02, fp
2c1f8     09 14 46 F0 | 	shr	arg02, #9
2c1fc     7F 14 06 F5 | 	and	arg02, #127
2c200     50 FA 05 F6 | 	mov	result1, #80
2c204     0A FB 01 F1 | 	add	result1, arg02
2c208     20 4E 05 F1 | 	add	fp, #32
2c20c     A7 FA 61 FC | 	wrlong	result1, fp
2c210     20 4E 85 F1 | 	sub	fp, #32
2c214     A7 FA 01 FB | 	rdlong	result1, fp
2c218     05 FA 45 F0 | 	shr	result1, #5
2c21c     FD FA 41 F8 | 	getnib	result1, result1, #0
2c220     01 FA 85 F1 | 	sub	result1, #1
2c224     1C 4E 05 F1 | 	add	fp, #28
2c228     A7 FA 61 FC | 	wrlong	result1, fp
2c22c     1C 4E 85 F1 | 	sub	fp, #28
2c230     A7 FA 01 FB | 	rdlong	result1, fp
2c234     1F FA 05 F5 | 	and	result1, #31
2c238     18 4E 05 F1 | 	add	fp, #24
2c23c     A7 FA 61 FC | 	wrlong	result1, fp
2c240     14 4E 85 F1 | 	sub	fp, #20
2c244     A7 FA 01 FB | 	rdlong	result1, fp
2c248     0B FA 45 F0 | 	shr	result1, #11
2c24c     1F FA 05 F5 | 	and	result1, #31
2c250     10 4E 05 F1 | 	add	fp, #16
2c254     A7 FA 61 FC | 	wrlong	result1, fp
2c258     10 4E 85 F1 | 	sub	fp, #16
2c25c     A7 FA 01 FB | 	rdlong	result1, fp
2c260     05 FA 45 F0 | 	shr	result1, #5
2c264     3F FA 05 F5 | 	and	result1, #63
2c268     0C 4E 05 F1 | 	add	fp, #12
2c26c     A7 FA 61 FC | 	wrlong	result1, fp
2c270     0C 4E 85 F1 | 	sub	fp, #12
2c274     A7 14 02 FB | 	rdlong	arg02, fp
2c278     1F 14 06 F5 | 	and	arg02, #31
2c27c     01 14 66 F0 | 	shl	arg02, #1
2c280     08 4E 05 F1 | 	add	fp, #8
2c284     A7 14 62 FC | 	wrlong	arg02, fp
2c288     A7 12 02 F6 | 	mov	arg01, fp
2c28c     10 4E 85 F1 | 	sub	fp, #16
2c290     4C FA BF FD | 	call	#_fatfs_cc_mktime
2c294     0C 4E 05 F1 | 	add	fp, #12
2c298     A7 FA 61 FC | 	wrlong	result1, fp
2c29c                 | ' 
2c29c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2c29c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2c29c                 | '     date.tm_mday = (dosdate & 0x1f);
2c29c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2c29c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2c29c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2c29c                 | ' 
2c29c                 | '     t = mktime(&date);
2c29c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c29c                 | '     return t;
2c29c     0C 4E 85 F1 | 	sub	fp, #12
2c2a0     A7 F0 03 F6 | 	mov	ptra, fp
2c2a4     B2 00 A0 FD | 	call	#popregs_
2c2a8                 | _fatfs_cc_unixtime_0895_ret
2c2a8     2D 00 64 FD | 	ret
2c2ac                 | 
2c2ac                 | _fatfs_cc__set_dos_error_0897
2c2ac     09 01 02 F6 | 	mov	_var01, arg01
2c2b0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c2b0                 | '     switch (derr) {
2c2b0     14 00 26 F3 | 	fle	_var01, #20
2c2b4     30 00 62 FD | 	jmprel	_var01
2c2b8                 | LR__4440
2c2b8     50 00 90 FD | 	jmp	#LR__4441
2c2bc     84 00 90 FD | 	jmp	#LR__4455
2c2c0     80 00 90 FD | 	jmp	#LR__4456
2c2c4     7C 00 90 FD | 	jmp	#LR__4457
2c2c8     48 00 90 FD | 	jmp	#LR__4442
2c2cc     44 00 90 FD | 	jmp	#LR__4443
2c2d0     40 00 90 FD | 	jmp	#LR__4444
2c2d4     44 00 90 FD | 	jmp	#LR__4445
2c2d8     48 00 90 FD | 	jmp	#LR__4447
2c2dc     54 00 90 FD | 	jmp	#LR__4450
2c2e0     38 00 90 FD | 	jmp	#LR__4446
2c2e4     4C 00 90 FD | 	jmp	#LR__4451
2c2e8     48 00 90 FD | 	jmp	#LR__4452
2c2ec     44 00 90 FD | 	jmp	#LR__4453
2c2f0     50 00 90 FD | 	jmp	#LR__4458
2c2f4     4C 00 90 FD | 	jmp	#LR__4458
2c2f8     48 00 90 FD | 	jmp	#LR__4458
2c2fc     2C 00 90 FD | 	jmp	#LR__4448
2c300     38 00 90 FD | 	jmp	#LR__4454
2c304     2C 00 90 FD | 	jmp	#LR__4449
2c308     38 00 90 FD | 	jmp	#LR__4458
2c30c                 | LR__4441
2c30c     00 02 06 F6 | 	mov	_var02, #0
2c310                 | '         r = 0;
2c310                 | '         break;
2c310     34 00 90 FD | 	jmp	#LR__4459
2c314                 | LR__4442
2c314                 | LR__4443
2c314                 | LR__4444
2c314     04 02 06 F6 | 	mov	_var02, #4
2c318                 | '         r =  4 ;
2c318                 | '         break;
2c318     2C 00 90 FD | 	jmp	#LR__4459
2c31c                 | LR__4445
2c31c                 | LR__4446
2c31c     06 02 06 F6 | 	mov	_var02, #6
2c320                 | '         r =  6 ;
2c320                 | '         break;
2c320     24 00 90 FD | 	jmp	#LR__4459
2c324                 | LR__4447
2c324     09 02 06 F6 | 	mov	_var02, #9
2c328                 | '         r =  9 ;
2c328                 | '         break;
2c328     1C 00 90 FD | 	jmp	#LR__4459
2c32c                 | LR__4448
2c32c     07 02 06 F6 | 	mov	_var02, #7
2c330                 | '         r =  7 ;
2c330                 | '         break;
2c330     14 00 90 FD | 	jmp	#LR__4459
2c334                 | LR__4449
2c334                 | LR__4450
2c334                 | LR__4451
2c334                 | LR__4452
2c334                 | LR__4453
2c334     0A 02 06 F6 | 	mov	_var02, #10
2c338                 | '         r =  10 ;
2c338                 | '         break;
2c338     0C 00 90 FD | 	jmp	#LR__4459
2c33c                 | LR__4454
2c33c     0B 02 06 F6 | 	mov	_var02, #11
2c340                 | '         r =  11 ;
2c340                 | '         break;
2c340     04 00 90 FD | 	jmp	#LR__4459
2c344                 | LR__4455
2c344                 | LR__4456
2c344                 | LR__4457
2c344                 | LR__4458
2c344     0C 02 06 F6 | 	mov	_var02, #12
2c348                 | '         r =  12 ;
2c348                 | '         break;
2c348                 | LR__4459
2c348                 | '     }
2c348                 | '     return _seterror(r);
2c348     00 02 4E F2 | 	cmps	_var02, #0 wz
2c34c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c350     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2c354     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c358     01 FA 65 56 |  if_ne	neg	result1, #1
2c35c     00 FA 05 A6 |  if_e	mov	result1, #0
2c360                 | _fatfs_cc__set_dos_error_0897_ret
2c360     2D 00 64 FD | 	ret
2c364                 | 
2c364                 | _fatfs_cc_v_creat
2c364     04 4A 05 F6 | 	mov	COUNT_, #4
2c368     A8 00 A0 FD | 	call	#pushregs_
2c36c     09 1F 02 F6 | 	mov	local01, arg01
2c370     0A 21 02 F6 | 	mov	local02, arg02
2c374     03 00 00 FF 
2c378     3C 12 06 F6 | 	mov	arg01, ##1596
2c37c                 | '     return _gc_alloc(size);
2c37c     10 14 06 F6 | 	mov	arg02, #16
2c380     2C 60 BF FD | 	call	#__system___gc_doalloc
2c384     FD 22 0A F6 | 	mov	local03, result1 wz
2c388                 | '       return _seterror( 7 );
2c388     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c38c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c390     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c394     01 FA 65 A6 |  if_e	neg	result1, #1
2c398     58 00 90 AD |  if_e	jmp	#LR__4461
2c39c     11 13 02 F6 | 	mov	arg01, local03
2c3a0     00 14 06 F6 | 	mov	arg02, #0
2c3a4     03 00 00 FF 
2c3a8     3C 16 06 F6 | 	mov	arg03, ##1596
2c3ac     98 00 A0 FD | 	call	#\builtin_bytefill_
2c3b0     02 00 00 FF 
2c3b4     14 22 06 F1 | 	add	local03, ##1044
2c3b8     11 13 02 F6 | 	mov	arg01, local03
2c3bc     02 00 00 FF 
2c3c0     14 22 86 F1 | 	sub	local03, ##1044
2c3c4     10 15 02 F6 | 	mov	arg02, local02
2c3c8     07 16 06 F6 | 	mov	arg03, #7
2c3cc     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2c3d0     FD 24 0A F6 | 	mov	local04, result1 wz
2c3d4     14 00 90 AD |  if_e	jmp	#LR__4460
2c3d8     11 13 02 F6 | 	mov	arg01, local03
2c3dc                 | '     return _gc_free(ptr);
2c3dc     DC 60 BF FD | 	call	#__system___gc_free
2c3e0                 | '     free(f);
2c3e0                 | '     return _set_dos_error(r);
2c3e0     12 13 02 F6 | 	mov	arg01, local04
2c3e4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2c3e8     08 00 90 FD | 	jmp	#LR__4461
2c3ec                 | LR__4460
2c3ec     0F 23 62 FC | 	wrlong	local03, local01
2c3f0                 | '   }
2c3f0                 | '   fil->vfsdata = f;
2c3f0                 | '   return 0;
2c3f0     00 FA 05 F6 | 	mov	result1, #0
2c3f4                 | LR__4461
2c3f4     A7 F0 03 F6 | 	mov	ptra, fp
2c3f8     B2 00 A0 FD | 	call	#popregs_
2c3fc                 | _fatfs_cc_v_creat_ret
2c3fc     2D 00 64 FD | 	ret
2c400                 | 
2c400                 | _fatfs_cc_v_close
2c400     02 4A 05 F6 | 	mov	COUNT_, #2
2c404     A8 00 A0 FD | 	call	#pushregs_
2c408     09 1F 02 FB | 	rdlong	local01, arg01
2c40c     02 00 00 FF 
2c410     14 1E 06 F1 | 	add	local01, ##1044
2c414     0F 13 02 F6 | 	mov	arg01, local01
2c418     02 00 00 FF 
2c41c     14 1E 86 F1 | 	sub	local01, ##1044
2c420     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2c424     FD 20 02 F6 | 	mov	local02, result1
2c428     0F 13 02 F6 | 	mov	arg01, local01
2c42c                 | '     return _gc_free(ptr);
2c42c     8C 60 BF FD | 	call	#__system___gc_free
2c430                 | '     FAT_FIL *f = fil->vfsdata;
2c430                 | '     r=f_close(&f->fil);
2c430                 | '     free(f);
2c430                 | '     return _set_dos_error(r);
2c430     10 13 02 F6 | 	mov	arg01, local02
2c434     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2c438     A7 F0 03 F6 | 	mov	ptra, fp
2c43c     B2 00 A0 FD | 	call	#popregs_
2c440                 | _fatfs_cc_v_close_ret
2c440     2D 00 64 FD | 	ret
2c444                 | 
2c444                 | _fatfs_cc_v_opendir
2c444     04 4A 05 F6 | 	mov	COUNT_, #4
2c448     A8 00 A0 FD | 	call	#pushregs_
2c44c     09 1F 02 F6 | 	mov	local01, arg01
2c450     0A 21 02 F6 | 	mov	local02, arg02
2c454     30 12 06 F6 | 	mov	arg01, #48
2c458                 | '     return _gc_alloc(size);
2c458     10 14 06 F6 | 	mov	arg02, #16
2c45c     50 5F BF FD | 	call	#__system___gc_doalloc
2c460     FD 22 0A F6 | 	mov	local03, result1 wz
2c464                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c464                 | '       return _seterror( 7 );
2c464     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c468     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c46c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c470     01 FA 65 A6 |  if_e	neg	result1, #1
2c474     34 00 90 AD |  if_e	jmp	#LR__4471
2c478     10 15 02 F6 | 	mov	arg02, local02
2c47c     11 13 02 F6 | 	mov	arg01, local03
2c480     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2c484     FD 24 0A F6 | 	mov	local04, result1 wz
2c488     14 00 90 AD |  if_e	jmp	#LR__4470
2c48c     11 13 02 F6 | 	mov	arg01, local03
2c490                 | '     return _gc_free(ptr);
2c490     28 60 BF FD | 	call	#__system___gc_free
2c494                 | '         free(f);
2c494                 | '         return _set_dos_error(r);
2c494     12 13 02 F6 | 	mov	arg01, local04
2c498     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2c49c     0C 00 90 FD | 	jmp	#LR__4471
2c4a0                 | LR__4470
2c4a0     04 1E 06 F1 | 	add	local01, #4
2c4a4     0F 23 62 FC | 	wrlong	local03, local01
2c4a8                 | '     }
2c4a8                 | '     dir->vfsdata = f;
2c4a8                 | '     return 0;
2c4a8     00 FA 05 F6 | 	mov	result1, #0
2c4ac                 | LR__4471
2c4ac     A7 F0 03 F6 | 	mov	ptra, fp
2c4b0     B2 00 A0 FD | 	call	#popregs_
2c4b4                 | _fatfs_cc_v_opendir_ret
2c4b4     2D 00 64 FD | 	ret
2c4b8                 | 
2c4b8                 | _fatfs_cc_v_closedir
2c4b8     02 4A 05 F6 | 	mov	COUNT_, #2
2c4bc     A8 00 A0 FD | 	call	#pushregs_
2c4c0     04 12 06 F1 | 	add	arg01, #4
2c4c4     09 1F 02 FB | 	rdlong	local01, arg01
2c4c8     0F 13 02 F6 | 	mov	arg01, local01
2c4cc     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2c4d0     FD 20 02 F6 | 	mov	local02, result1
2c4d4     0F 13 02 F6 | 	mov	arg01, local01
2c4d8                 | '     return _gc_free(ptr);
2c4d8     E0 5F BF FD | 	call	#__system___gc_free
2c4dc     00 20 0E F2 | 	cmp	local02, #0 wz
2c4e0     10 13 02 56 |  if_ne	mov	arg01, local02
2c4e4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0897
2c4e8                 | '     return r;
2c4e8     10 FB 01 F6 | 	mov	result1, local02
2c4ec     A7 F0 03 F6 | 	mov	ptra, fp
2c4f0     B2 00 A0 FD | 	call	#popregs_
2c4f4                 | _fatfs_cc_v_closedir_ret
2c4f4     2D 00 64 FD | 	ret
2c4f8                 | 
2c4f8                 | _fatfs_cc_v_readdir
2c4f8     01 4A 05 F6 | 	mov	COUNT_, #1
2c4fc     A8 00 A0 FD | 	call	#pushregs_
2c500     2C F1 07 F1 | 	add	ptra, #300
2c504     04 4E 05 F1 | 	add	fp, #4
2c508     A7 12 62 FC | 	wrlong	arg01, fp
2c50c     04 4E 05 F1 | 	add	fp, #4
2c510     A7 14 62 FC | 	wrlong	arg02, fp
2c514     04 4E 85 F1 | 	sub	fp, #4
2c518     A7 16 02 FB | 	rdlong	arg03, fp
2c51c     04 16 06 F1 | 	add	arg03, #4
2c520     0B 13 02 FB | 	rdlong	arg01, arg03
2c524     08 4E 05 F1 | 	add	fp, #8
2c528     A7 14 02 F6 | 	mov	arg02, fp
2c52c     0C 4E 85 F1 | 	sub	fp, #12
2c530     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2c534     28 4F 05 F1 | 	add	fp, #296
2c538     A7 FA 61 FC | 	wrlong	result1, fp
2c53c     28 4F 85 F1 | 	sub	fp, #296
2c540     00 FA 0D F2 | 	cmp	result1, #0 wz
2c544     14 00 90 AD |  if_e	jmp	#LR__4480
2c548                 | '         return _set_dos_error(r);
2c548     28 4F 05 F1 | 	add	fp, #296
2c54c     A7 12 02 FB | 	rdlong	arg01, fp
2c550     28 4F 85 F1 | 	sub	fp, #296
2c554     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2c558     C4 00 90 FD | 	jmp	#LR__4483
2c55c                 | LR__4480
2c55c     28 4E 05 F1 | 	add	fp, #40
2c560     A7 16 CA FA | 	rdbyte	arg03, fp wz
2c564     28 4E 85 F1 | 	sub	fp, #40
2c568                 | '         return -1;
2c568     01 FA 65 A6 |  if_e	neg	result1, #1
2c56c     B0 00 90 AD |  if_e	jmp	#LR__4483
2c570     08 4E 05 F1 | 	add	fp, #8
2c574     A7 12 02 FB | 	rdlong	arg01, fp
2c578     20 4E 05 F1 | 	add	fp, #32
2c57c     A7 14 02 F6 | 	mov	arg02, fp
2c580     28 4E 85 F1 | 	sub	fp, #40
2c584     3F 16 06 F6 | 	mov	arg03, #63
2c588     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2c58c     08 4E 05 F1 | 	add	fp, #8
2c590     A7 16 02 FB | 	rdlong	arg03, fp
2c594     3F 16 06 F1 | 	add	arg03, #63
2c598     0B 01 48 FC | 	wrbyte	#0, arg03
2c59c     0C 4E 05 F1 | 	add	fp, #12
2c5a0     A7 16 C2 FA | 	rdbyte	arg03, fp
2c5a4     14 4E 85 F1 | 	sub	fp, #20
2c5a8     10 16 CE F7 | 	test	arg03, #16 wz
2c5ac     18 00 90 AD |  if_e	jmp	#LR__4481
2c5b0     08 4E 05 F1 | 	add	fp, #8
2c5b4     A7 16 02 FB | 	rdlong	arg03, fp
2c5b8     08 4E 85 F1 | 	sub	fp, #8
2c5bc     50 16 06 F1 | 	add	arg03, #80
2c5c0     0B 03 48 FC | 	wrbyte	#1, arg03
2c5c4     14 00 90 FD | 	jmp	#LR__4482
2c5c8                 | LR__4481
2c5c8     08 4E 05 F1 | 	add	fp, #8
2c5cc     A7 16 02 FB | 	rdlong	arg03, fp
2c5d0     08 4E 85 F1 | 	sub	fp, #8
2c5d4     50 16 06 F1 | 	add	arg03, #80
2c5d8     0B 01 48 FC | 	wrbyte	#0, arg03
2c5dc                 | LR__4482
2c5dc     08 4E 05 F1 | 	add	fp, #8
2c5e0     A7 16 02 FB | 	rdlong	arg03, fp
2c5e4     04 4E 05 F1 | 	add	fp, #4
2c5e8     A7 14 02 FB | 	rdlong	arg02, fp
2c5ec     48 16 06 F1 | 	add	arg03, #72
2c5f0     0B 15 62 FC | 	wrlong	arg02, arg03
2c5f4     04 4E 85 F1 | 	sub	fp, #4
2c5f8     A7 1E 02 FB | 	rdlong	local01, fp
2c5fc     08 4E 05 F1 | 	add	fp, #8
2c600     A7 12 E2 FA | 	rdword	arg01, fp
2c604     02 4E 05 F1 | 	add	fp, #2
2c608     A7 14 E2 FA | 	rdword	arg02, fp
2c60c     12 4E 85 F1 | 	sub	fp, #18
2c610     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0895
2c614     4C 1E 06 F1 | 	add	local01, #76
2c618     0F FB 61 FC | 	wrlong	result1, local01
2c61c                 | '         ent->d_type =  (0) ;
2c61c                 | '     }
2c61c                 | '     ent->d_size = finfo.fsize;
2c61c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2c61c                 | '     return 0;
2c61c     00 FA 05 F6 | 	mov	result1, #0
2c620                 | LR__4483
2c620     A7 F0 03 F6 | 	mov	ptra, fp
2c624     B2 00 A0 FD | 	call	#popregs_
2c628                 | _fatfs_cc_v_readdir_ret
2c628     2D 00 64 FD | 	ret
2c62c                 | 
2c62c                 | _fatfs_cc_v_stat
2c62c     03 4A 05 F6 | 	mov	COUNT_, #3
2c630     A8 00 A0 FD | 	call	#pushregs_
2c634     30 F1 07 F1 | 	add	ptra, #304
2c638     04 4E 05 F1 | 	add	fp, #4
2c63c     A7 12 62 FC | 	wrlong	arg01, fp
2c640     04 4E 05 F1 | 	add	fp, #4
2c644     A7 14 62 FC | 	wrlong	arg02, fp
2c648     08 4E 85 F1 | 	sub	fp, #8
2c64c     0A 13 02 F6 | 	mov	arg01, arg02
2c650     00 14 06 F6 | 	mov	arg02, #0
2c654     30 16 06 F6 | 	mov	arg03, #48
2c658     98 00 A0 FD | 	call	#\builtin_bytefill_
2c65c     04 4E 05 F1 | 	add	fp, #4
2c660     A7 FA 01 FB | 	rdlong	result1, fp
2c664     04 4E 85 F1 | 	sub	fp, #4
2c668     FD FA C9 FA | 	rdbyte	result1, result1 wz
2c66c     2C 00 90 AD |  if_e	jmp	#LR__4490
2c670     04 4E 05 F1 | 	add	fp, #4
2c674     A7 FA 01 FB | 	rdlong	result1, fp
2c678     04 4E 85 F1 | 	sub	fp, #4
2c67c     FD FA C1 FA | 	rdbyte	result1, result1
2c680     2E FA 0D F2 | 	cmp	result1, #46 wz
2c684     04 4E 05 A1 |  if_e	add	fp, #4
2c688     A7 1E 02 AB |  if_e	rdlong	local01, fp
2c68c     04 4E 85 A1 |  if_e	sub	fp, #4
2c690     01 1E 06 A1 |  if_e	add	local01, #1
2c694     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2c698     18 00 90 5D |  if_ne	jmp	#LR__4491
2c69c                 | LR__4490
2c69c     18 4E 05 F1 | 	add	fp, #24
2c6a0     A7 20 48 FC | 	wrbyte	#16, fp
2c6a4     0C 4E 85 F1 | 	sub	fp, #12
2c6a8     A7 00 68 FC | 	wrlong	#0, fp
2c6ac     0C 4E 85 F1 | 	sub	fp, #12
2c6b0     24 00 90 FD | 	jmp	#LR__4492
2c6b4                 | LR__4491
2c6b4     04 4E 05 F1 | 	add	fp, #4
2c6b8     A7 12 02 FB | 	rdlong	arg01, fp
2c6bc     0C 4E 05 F1 | 	add	fp, #12
2c6c0     A7 14 02 F6 | 	mov	arg02, fp
2c6c4     10 4E 85 F1 | 	sub	fp, #16
2c6c8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2c6cc     0C 4E 05 F1 | 	add	fp, #12
2c6d0     A7 FA 61 FC | 	wrlong	result1, fp
2c6d4     0C 4E 85 F1 | 	sub	fp, #12
2c6d8                 | LR__4492
2c6d8     0C 4E 05 F1 | 	add	fp, #12
2c6dc     A7 20 0A FB | 	rdlong	local02, fp wz
2c6e0     0C 4E 85 F1 | 	sub	fp, #12
2c6e4     14 00 90 AD |  if_e	jmp	#LR__4493
2c6e8                 | '         return _set_dos_error(r);
2c6e8     0C 4E 05 F1 | 	add	fp, #12
2c6ec     A7 12 02 FB | 	rdlong	arg01, fp
2c6f0     0C 4E 85 F1 | 	sub	fp, #12
2c6f4     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2c6f8     14 01 90 FD | 	jmp	#LR__4494
2c6fc                 | LR__4493
2c6fc     2C 4F 05 F1 | 	add	fp, #300
2c700     A7 48 6A FC | 	wrlong	#292, fp
2c704     14 4F 85 F1 | 	sub	fp, #276
2c708     A7 22 C2 FA | 	rdbyte	local03, fp
2c70c     18 4E 85 F1 | 	sub	fp, #24
2c710     01 22 CE F7 | 	test	local03, #1 wz
2c714     2C 4F 05 A1 |  if_e	add	fp, #300
2c718     A7 22 02 AB |  if_e	rdlong	local03, fp
2c71c     92 22 46 A5 |  if_e	or	local03, #146
2c720     A7 22 62 AC |  if_e	wrlong	local03, fp
2c724     2C 4F 85 A1 |  if_e	sub	fp, #300
2c728     18 4E 05 F1 | 	add	fp, #24
2c72c     A7 22 C2 FA | 	rdbyte	local03, fp
2c730     18 4E 85 F1 | 	sub	fp, #24
2c734     10 22 CE F7 | 	test	local03, #16 wz
2c738     2C 4F 05 51 |  if_ne	add	fp, #300
2c73c     A7 22 02 5B |  if_ne	rdlong	local03, fp
2c740     08 00 00 5F 
2c744     49 22 46 55 |  if_ne	or	local03, ##4169
2c748     A7 22 62 5C |  if_ne	wrlong	local03, fp
2c74c     2C 4F 85 51 |  if_ne	sub	fp, #300
2c750     08 4E 05 F1 | 	add	fp, #8
2c754     A7 22 02 FB | 	rdlong	local03, fp
2c758     24 4F 05 F1 | 	add	fp, #292
2c75c     A7 20 02 FB | 	rdlong	local02, fp
2c760     08 22 06 F1 | 	add	local03, #8
2c764     11 21 62 FC | 	wrlong	local02, local03
2c768     24 4F 85 F1 | 	sub	fp, #292
2c76c     A7 22 02 FB | 	rdlong	local03, fp
2c770     0C 22 06 F1 | 	add	local03, #12
2c774     11 03 68 FC | 	wrlong	#1, local03
2c778     A7 22 02 FB | 	rdlong	local03, fp
2c77c     08 4E 05 F1 | 	add	fp, #8
2c780     A7 20 02 FB | 	rdlong	local02, fp
2c784     18 22 06 F1 | 	add	local03, #24
2c788     11 21 62 FC | 	wrlong	local02, local03
2c78c     08 4E 85 F1 | 	sub	fp, #8
2c790     A7 22 02 FB | 	rdlong	local03, fp
2c794     1C 22 06 F1 | 	add	local03, #28
2c798     01 00 80 FF 
2c79c     11 01 68 FC | 	wrlong	##512, local03
2c7a0     A7 20 02 FB | 	rdlong	local02, fp
2c7a4     10 23 02 F6 | 	mov	local03, local02
2c7a8     18 20 06 F1 | 	add	local02, #24
2c7ac     10 21 02 FB | 	rdlong	local02, local02
2c7b0     FF 21 06 F1 | 	add	local02, #511
2c7b4     10 21 52 F6 | 	abs	local02, local02 wc
2c7b8     09 20 46 F0 | 	shr	local02, #9
2c7bc     10 21 82 F6 | 	negc	local02, local02
2c7c0     20 22 06 F1 | 	add	local03, #32
2c7c4     11 21 62 FC | 	wrlong	local02, local03
2c7c8     A7 20 02 FB | 	rdlong	local02, fp
2c7cc     10 23 02 F6 | 	mov	local03, local02
2c7d0     10 1F 02 F6 | 	mov	local01, local02
2c7d4     0C 4E 05 F1 | 	add	fp, #12
2c7d8     A7 12 E2 FA | 	rdword	arg01, fp
2c7dc     02 4E 05 F1 | 	add	fp, #2
2c7e0     A7 14 E2 FA | 	rdword	arg02, fp
2c7e4     16 4E 85 F1 | 	sub	fp, #22
2c7e8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0895
2c7ec     2C 1E 06 F1 | 	add	local01, #44
2c7f0     0F FB 61 FC | 	wrlong	result1, local01
2c7f4     28 20 06 F1 | 	add	local02, #40
2c7f8     10 FB 61 FC | 	wrlong	result1, local02
2c7fc     24 22 06 F1 | 	add	local03, #36
2c800     11 FB 61 FC | 	wrlong	result1, local03
2c804                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2c804                 | '     }
2c804                 | '     buf->st_mode = mode;
2c804                 | '     buf->st_nlink = 1;
2c804                 | '     buf->st_size = finfo.fsize;
2c804                 | '     buf->st_blksize = 512;
2c804                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2c804                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2c804                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c804                 | '     return r;
2c804     0C 4E 05 F1 | 	add	fp, #12
2c808     A7 FA 01 FB | 	rdlong	result1, fp
2c80c     0C 4E 85 F1 | 	sub	fp, #12
2c810                 | LR__4494
2c810     A7 F0 03 F6 | 	mov	ptra, fp
2c814     B2 00 A0 FD | 	call	#popregs_
2c818                 | _fatfs_cc_v_stat_ret
2c818     2D 00 64 FD | 	ret
2c81c                 | 
2c81c                 | _fatfs_cc_v_read
2c81c     00 4A 05 F6 | 	mov	COUNT_, #0
2c820     A8 00 A0 FD | 	call	#pushregs_
2c824     1C F0 07 F1 | 	add	ptra, #28
2c828     04 4E 05 F1 | 	add	fp, #4
2c82c     A7 12 62 FC | 	wrlong	arg01, fp
2c830     04 4E 05 F1 | 	add	fp, #4
2c834     A7 14 62 FC | 	wrlong	arg02, fp
2c838     04 4E 05 F1 | 	add	fp, #4
2c83c     A7 16 62 FC | 	wrlong	arg03, fp
2c840     08 4E 85 F1 | 	sub	fp, #8
2c844     A7 12 02 FB | 	rdlong	arg01, fp
2c848     09 13 0A FB | 	rdlong	arg01, arg01 wz
2c84c     0C 4E 05 F1 | 	add	fp, #12
2c850     A7 12 62 FC | 	wrlong	arg01, fp
2c854     10 4E 85 F1 | 	sub	fp, #16
2c858                 | '         return _seterror( 5 );
2c858     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c85c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c860     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c864     01 FA 65 A6 |  if_e	neg	result1, #1
2c868     B8 00 90 AD |  if_e	jmp	#LR__4502
2c86c     10 4E 05 F1 | 	add	fp, #16
2c870     A7 12 02 FB | 	rdlong	arg01, fp
2c874     02 00 00 FF 
2c878     14 12 06 F1 | 	add	arg01, ##1044
2c87c     08 4E 85 F1 | 	sub	fp, #8
2c880     A7 14 02 FB | 	rdlong	arg02, fp
2c884     04 4E 05 F1 | 	add	fp, #4
2c888     A7 16 02 FB | 	rdlong	arg03, fp
2c88c     0C 4E 05 F1 | 	add	fp, #12
2c890     A7 18 02 F6 | 	mov	arg04, fp
2c894     18 4E 85 F1 | 	sub	fp, #24
2c898     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2c89c     14 4E 05 F1 | 	add	fp, #20
2c8a0     A7 FA 61 FC | 	wrlong	result1, fp
2c8a4     14 4E 85 F1 | 	sub	fp, #20
2c8a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8ac     34 00 90 AD |  if_e	jmp	#LR__4500
2c8b0     04 4E 05 F1 | 	add	fp, #4
2c8b4     A7 18 02 FB | 	rdlong	arg04, fp
2c8b8     0C 17 02 F6 | 	mov	arg03, arg04
2c8bc     08 18 06 F1 | 	add	arg04, #8
2c8c0     0C 19 02 FB | 	rdlong	arg04, arg04
2c8c4     20 18 46 F5 | 	or	arg04, #32
2c8c8     08 16 06 F1 | 	add	arg03, #8
2c8cc     0B 19 62 FC | 	wrlong	arg04, arg03
2c8d0                 | '         fil->state |=  (0x20) ;
2c8d0                 | '         return _set_dos_error(r);
2c8d0     10 4E 05 F1 | 	add	fp, #16
2c8d4     A7 12 02 FB | 	rdlong	arg01, fp
2c8d8     14 4E 85 F1 | 	sub	fp, #20
2c8dc     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2c8e0     40 00 90 FD | 	jmp	#LR__4502
2c8e4                 | LR__4500
2c8e4     18 4E 05 F1 | 	add	fp, #24
2c8e8     A7 FA 09 FB | 	rdlong	result1, fp wz
2c8ec     18 4E 85 F1 | 	sub	fp, #24
2c8f0     24 00 90 5D |  if_ne	jmp	#LR__4501
2c8f4     04 4E 05 F1 | 	add	fp, #4
2c8f8     A7 FA 01 FB | 	rdlong	result1, fp
2c8fc     FD 18 02 F6 | 	mov	arg04, result1
2c900     04 4E 85 F1 | 	sub	fp, #4
2c904     08 FA 05 F1 | 	add	result1, #8
2c908     FD FA 01 FB | 	rdlong	result1, result1
2c90c     10 FA 45 F5 | 	or	result1, #16
2c910     08 18 06 F1 | 	add	arg04, #8
2c914     0C FB 61 FC | 	wrlong	result1, arg04
2c918                 | LR__4501
2c918                 | '         fil->state |=  (0x10) ;
2c918                 | '     }
2c918                 | '     return x;
2c918     18 4E 05 F1 | 	add	fp, #24
2c91c     A7 FA 01 FB | 	rdlong	result1, fp
2c920     18 4E 85 F1 | 	sub	fp, #24
2c924                 | LR__4502
2c924     A7 F0 03 F6 | 	mov	ptra, fp
2c928     B2 00 A0 FD | 	call	#popregs_
2c92c                 | _fatfs_cc_v_read_ret
2c92c     2D 00 64 FD | 	ret
2c930                 | 
2c930                 | _fatfs_cc_v_write
2c930     00 4A 05 F6 | 	mov	COUNT_, #0
2c934     A8 00 A0 FD | 	call	#pushregs_
2c938     1C F0 07 F1 | 	add	ptra, #28
2c93c     04 4E 05 F1 | 	add	fp, #4
2c940     A7 12 62 FC | 	wrlong	arg01, fp
2c944     04 4E 05 F1 | 	add	fp, #4
2c948     A7 14 62 FC | 	wrlong	arg02, fp
2c94c     04 4E 05 F1 | 	add	fp, #4
2c950     A7 16 62 FC | 	wrlong	arg03, fp
2c954     08 4E 85 F1 | 	sub	fp, #8
2c958     A7 12 02 FB | 	rdlong	arg01, fp
2c95c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2c960     0C 4E 05 F1 | 	add	fp, #12
2c964     A7 12 62 FC | 	wrlong	arg01, fp
2c968     10 4E 85 F1 | 	sub	fp, #16
2c96c                 | '         return _seterror( 5 );
2c96c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c970     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c974     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c978     01 FA 65 A6 |  if_e	neg	result1, #1
2c97c     84 00 90 AD |  if_e	jmp	#LR__4511
2c980     10 4E 05 F1 | 	add	fp, #16
2c984     A7 12 02 FB | 	rdlong	arg01, fp
2c988     02 00 00 FF 
2c98c     14 12 06 F1 | 	add	arg01, ##1044
2c990     08 4E 85 F1 | 	sub	fp, #8
2c994     A7 14 02 FB | 	rdlong	arg02, fp
2c998     04 4E 05 F1 | 	add	fp, #4
2c99c     A7 16 02 FB | 	rdlong	arg03, fp
2c9a0     0C 4E 05 F1 | 	add	fp, #12
2c9a4     A7 18 02 F6 | 	mov	arg04, fp
2c9a8     18 4E 85 F1 | 	sub	fp, #24
2c9ac     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2c9b0     14 4E 05 F1 | 	add	fp, #20
2c9b4     A7 FA 61 FC | 	wrlong	result1, fp
2c9b8     14 4E 85 F1 | 	sub	fp, #20
2c9bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9c0     34 00 90 AD |  if_e	jmp	#LR__4510
2c9c4     04 4E 05 F1 | 	add	fp, #4
2c9c8     A7 18 02 FB | 	rdlong	arg04, fp
2c9cc     0C 17 02 F6 | 	mov	arg03, arg04
2c9d0     08 18 06 F1 | 	add	arg04, #8
2c9d4     0C 19 02 FB | 	rdlong	arg04, arg04
2c9d8     20 18 46 F5 | 	or	arg04, #32
2c9dc     08 16 06 F1 | 	add	arg03, #8
2c9e0     0B 19 62 FC | 	wrlong	arg04, arg03
2c9e4                 | '         fil->state |=  (0x20) ;
2c9e4                 | '         return _set_dos_error(r);
2c9e4     10 4E 05 F1 | 	add	fp, #16
2c9e8     A7 12 02 FB | 	rdlong	arg01, fp
2c9ec     14 4E 85 F1 | 	sub	fp, #20
2c9f0     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2c9f4     0C 00 90 FD | 	jmp	#LR__4511
2c9f8                 | LR__4510
2c9f8                 | '     }
2c9f8                 | '     return x;
2c9f8     18 4E 05 F1 | 	add	fp, #24
2c9fc     A7 FA 01 FB | 	rdlong	result1, fp
2ca00     18 4E 85 F1 | 	sub	fp, #24
2ca04                 | LR__4511
2ca04     A7 F0 03 F6 | 	mov	ptra, fp
2ca08     B2 00 A0 FD | 	call	#popregs_
2ca0c                 | _fatfs_cc_v_write_ret
2ca0c     2D 00 64 FD | 	ret
2ca10                 | 
2ca10                 | _fatfs_cc_v_lseek
2ca10     04 4A 05 F6 | 	mov	COUNT_, #4
2ca14     A8 00 A0 FD | 	call	#pushregs_
2ca18     0A 1F 02 F6 | 	mov	local01, arg02
2ca1c     0B 21 02 F6 | 	mov	local02, arg03
2ca20     09 23 02 FB | 	rdlong	local03, arg01
2ca24     02 00 00 FF 
2ca28     14 22 0E F1 | 	add	local03, ##1044 wz
2ca2c                 | '         return _seterror( 5 );
2ca2c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ca30     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ca34     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ca38     01 FA 65 A6 |  if_e	neg	result1, #1
2ca3c     4C 00 90 AD |  if_e	jmp	#LR__4522
2ca40     00 20 0E F2 | 	cmp	local02, #0 wz
2ca44     24 00 90 AD |  if_e	jmp	#LR__4520
2ca48     01 20 0E F2 | 	cmp	local02, #1 wz
2ca4c     14 22 06 A1 |  if_e	add	local03, #20
2ca50     11 25 02 AB |  if_e	rdlong	local04, local03
2ca54     14 22 86 A1 |  if_e	sub	local03, #20
2ca58     12 1F 02 A1 |  if_e	add	local01, local04
2ca5c     0C 22 06 51 |  if_ne	add	local03, #12
2ca60     11 25 02 5B |  if_ne	rdlong	local04, local03
2ca64     0C 22 86 51 |  if_ne	sub	local03, #12
2ca68     12 1F 02 51 |  if_ne	add	local01, local04
2ca6c                 | LR__4520
2ca6c     0F 15 02 F6 | 	mov	arg02, local01
2ca70     11 13 02 F6 | 	mov	arg01, local03
2ca74     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2ca78     FD 12 0A F6 | 	mov	arg01, result1 wz
2ca7c     08 00 90 AD |  if_e	jmp	#LR__4521
2ca80                 | '         return _set_dos_error(result);
2ca80     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2ca84     04 00 90 FD | 	jmp	#LR__4522
2ca88                 | LR__4521
2ca88                 | '     }
2ca88                 | '     return offset;
2ca88     0F FB 01 F6 | 	mov	result1, local01
2ca8c                 | LR__4522
2ca8c     A7 F0 03 F6 | 	mov	ptra, fp
2ca90     B2 00 A0 FD | 	call	#popregs_
2ca94                 | _fatfs_cc_v_lseek_ret
2ca94     2D 00 64 FD | 	ret
2ca98                 | 
2ca98                 | _fatfs_cc_v_ioctl
2ca98                 | ' {
2ca98                 | '     return _seterror( 10 );
2ca98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ca9c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2caa0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2caa4     01 FA 65 F6 | 	neg	result1, #1
2caa8                 | _fatfs_cc_v_ioctl_ret
2caa8     2D 00 64 FD | 	ret
2caac                 | 
2caac                 | _fatfs_cc_v_mkdir
2caac     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2cab0     FD 12 02 F6 | 	mov	arg01, result1
2cab4                 | ' 
2cab4                 | '     r = f_mkdir(name);
2cab4                 | '     return _set_dos_error(r);
2cab4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2cab8                 | _fatfs_cc_v_mkdir_ret
2cab8     2D 00 64 FD | 	ret
2cabc                 | 
2cabc                 | _fatfs_cc_v_remove
2cabc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2cac0     FD 12 02 F6 | 	mov	arg01, result1
2cac4                 | ' 
2cac4                 | '     r = f_unlink(name);
2cac4                 | '     return _set_dos_error(r);
2cac4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2cac8                 | _fatfs_cc_v_remove_ret
2cac8     2D 00 64 FD | 	ret
2cacc                 | 
2cacc                 | _fatfs_cc_v_rmdir
2cacc     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2cad0     FD 12 02 F6 | 	mov	arg01, result1
2cad4                 | ' 
2cad4                 | '     r = f_unlink(name);
2cad4                 | '     return _set_dos_error(r);
2cad4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2cad8                 | _fatfs_cc_v_rmdir_ret
2cad8     2D 00 64 FD | 	ret
2cadc                 | 
2cadc                 | _fatfs_cc_v_rename
2cadc     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2cae0     FD 12 02 F6 | 	mov	arg01, result1
2cae4                 | '     return _set_dos_error(r);
2cae4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2cae8                 | _fatfs_cc_v_rename_ret
2cae8     2D 00 64 FD | 	ret
2caec                 | 
2caec                 | _fatfs_cc_v_open
2caec     07 4A 05 F6 | 	mov	COUNT_, #7
2caf0     A8 00 A0 FD | 	call	#pushregs_
2caf4     09 1F 02 F6 | 	mov	local01, arg01
2caf8     0A 21 02 F6 | 	mov	local02, arg02
2cafc     0B 23 02 F6 | 	mov	local03, arg03
2cb00     03 00 00 FF 
2cb04     3C 12 06 F6 | 	mov	arg01, ##1596
2cb08                 | '     return _gc_alloc(size);
2cb08     10 14 06 F6 | 	mov	arg02, #16
2cb0c     A0 58 BF FD | 	call	#__system___gc_doalloc
2cb10     FD 24 0A F6 | 	mov	local04, result1 wz
2cb14                 | '       return _seterror( 7 );
2cb14     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cb18     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2cb1c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cb20     01 FA 65 A6 |  if_e	neg	result1, #1
2cb24     98 00 90 AD |  if_e	jmp	#LR__4536
2cb28     12 13 02 F6 | 	mov	arg01, local04
2cb2c     00 14 06 F6 | 	mov	arg02, #0
2cb30     03 00 00 FF 
2cb34     3C 16 06 F6 | 	mov	arg03, ##1596
2cb38     98 00 A0 FD | 	call	#\builtin_bytefill_
2cb3c                 | '   switch (flags & 3) {
2cb3c     11 27 02 F6 | 	mov	local05, local03
2cb40     03 26 0E F5 | 	and	local05, #3 wz
2cb44     0C 00 90 AD |  if_e	jmp	#LR__4530
2cb48     01 26 0E F2 | 	cmp	local05, #1 wz
2cb4c     0C 00 90 AD |  if_e	jmp	#LR__4531
2cb50     10 00 90 FD | 	jmp	#LR__4532
2cb54                 | LR__4530
2cb54     01 28 06 F6 | 	mov	local06, #1
2cb58                 | '       fs_flags =  0x01 ;
2cb58                 | '       break;
2cb58     0C 00 90 FD | 	jmp	#LR__4533
2cb5c                 | LR__4531
2cb5c     02 28 06 F6 | 	mov	local06, #2
2cb60                 | '       fs_flags =  0x02 ;
2cb60                 | '       break;
2cb60     04 00 90 FD | 	jmp	#LR__4533
2cb64                 | LR__4532
2cb64     03 28 06 F6 | 	mov	local06, #3
2cb68                 | '       fs_flags =  0x01  |  0x02 ;
2cb68                 | '       break;
2cb68                 | LR__4533
2cb68     08 22 CE F7 | 	test	local03, #8 wz
2cb6c     18 28 46 55 |  if_ne	or	local06, #24
2cb70     08 00 90 5D |  if_ne	jmp	#LR__4534
2cb74     20 22 CE F7 | 	test	local03, #32 wz
2cb78     30 28 46 55 |  if_ne	or	local06, #48
2cb7c                 | LR__4534
2cb7c     02 00 00 FF 
2cb80     14 24 06 F1 | 	add	local04, ##1044
2cb84     12 13 02 F6 | 	mov	arg01, local04
2cb88     02 00 00 FF 
2cb8c     14 24 86 F1 | 	sub	local04, ##1044
2cb90     10 15 02 F6 | 	mov	arg02, local02
2cb94     14 17 02 F6 | 	mov	arg03, local06
2cb98     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2cb9c     FD 2A 0A F6 | 	mov	local07, result1 wz
2cba0     14 00 90 AD |  if_e	jmp	#LR__4535
2cba4     12 13 02 F6 | 	mov	arg01, local04
2cba8                 | '     return _gc_free(ptr);
2cba8     10 59 BF FD | 	call	#__system___gc_free
2cbac                 | '     free(f);
2cbac                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cbac                 | '     return _set_dos_error(r);
2cbac     15 13 02 F6 | 	mov	arg01, local07
2cbb0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2cbb4     08 00 90 FD | 	jmp	#LR__4536
2cbb8                 | LR__4535
2cbb8     0F 25 62 FC | 	wrlong	local04, local01
2cbbc                 | '   }
2cbbc                 | '   fil->vfsdata = f;
2cbbc                 | '   return 0;
2cbbc     00 FA 05 F6 | 	mov	result1, #0
2cbc0                 | LR__4536
2cbc0     A7 F0 03 F6 | 	mov	ptra, fp
2cbc4     B2 00 A0 FD | 	call	#popregs_
2cbc8                 | _fatfs_cc_v_open_ret
2cbc8     2D 00 64 FD | 	ret
2cbcc                 | 
2cbcc                 | _fatfs_cc_v_flush
2cbcc     09 13 02 FB | 	rdlong	arg01, arg01
2cbd0     02 00 00 FF 
2cbd4     14 12 0E F1 | 	add	arg01, ##1044 wz
2cbd8                 | '         return _seterror( 5 );
2cbd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cbdc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cbe0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cbe4     01 FA 65 A6 |  if_e	neg	result1, #1
2cbe8     0C 00 90 AD |  if_e	jmp	#LR__4540
2cbec     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2cbf0     FD 12 02 F6 | 	mov	arg01, result1
2cbf4                 | '     }
2cbf4                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cbf4                 | '     result = f_sync(f);
2cbf4                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cbf4                 | '     return _set_dos_error(result);
2cbf4     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0897
2cbf8                 | LR__4540
2cbf8                 | _fatfs_cc_v_flush_ret
2cbf8     2D 00 64 FD | 	ret
2cbfc                 | 
2cbfc                 | _fatfs_cc_v_init
2cbfc                 | ' {
2cbfc                 | '     return 0;
2cbfc     00 FA 05 F6 | 	mov	result1, #0
2cc00                 | _fatfs_cc_v_init_ret
2cc00     2D 00 64 FD | 	ret
2cc04                 | 
2cc04                 | _fatfs_cc_v_deinit
2cc04     6D 01 00 FF 
2cc08     78 15 06 F6 | 	mov	arg02, ##@LR__4736
2cc0c     00 12 06 F6 | 	mov	arg01, #0
2cc10     00 16 06 F6 | 	mov	arg03, #0
2cc14     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2cc18     01 00 00 FF 
2cc1c     08 E4 05 F1 | 	add	objptr, ##520
2cc20     F2 12 02 FB | 	rdlong	arg01, objptr
2cc24     04 E4 05 F1 | 	add	objptr, #4
2cc28     F2 14 02 FB | 	rdlong	arg02, objptr
2cc2c     01 00 00 FF 
2cc30     0C E4 85 F1 | 	sub	objptr, ##524
2cc34     50 40 BF FD | 	call	#__system___freepins
2cc38                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cc38                 | '     _freepins(f_pinmask);
2cc38                 | '     return 0;
2cc38     00 FA 05 F6 | 	mov	result1, #0
2cc3c                 | _fatfs_cc_v_deinit_ret
2cc3c     2D 00 64 FD | 	ret
2cc40                 | 
2cc40                 | _fatfs_cc_get_vfs
2cc40     01 4A 05 F6 | 	mov	COUNT_, #1
2cc44     A8 00 A0 FD | 	call	#pushregs_
2cc48     09 1F 02 F6 | 	mov	local01, arg01
2cc4c     50 12 06 F6 | 	mov	arg01, #80
2cc50     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2cc54     FD 12 02 F6 | 	mov	arg01, result1
2cc58     F2 FA 01 F6 | 	mov	result1, objptr
2cc5c     00 68 04 FF 
2cc60     00 FA 45 F5 | 	or	result1, ##147849216
2cc64     09 FB 61 FC | 	wrlong	result1, arg01
2cc68     F2 FA 01 F6 | 	mov	result1, objptr
2cc6c     00 70 04 FF 
2cc70     00 FA 45 F5 | 	or	result1, ##148897792
2cc74     04 12 06 F1 | 	add	arg01, #4
2cc78     09 FB 61 FC | 	wrlong	result1, arg01
2cc7c     F2 FA 01 F6 | 	mov	result1, objptr
2cc80     00 78 04 FF 
2cc84     00 FA 45 F5 | 	or	result1, ##149946368
2cc88     04 12 06 F1 | 	add	arg01, #4
2cc8c     09 FB 61 FC | 	wrlong	result1, arg01
2cc90     F2 FA 01 F6 | 	mov	result1, objptr
2cc94     00 80 04 FF 
2cc98     00 FA 45 F5 | 	or	result1, ##150994944
2cc9c     04 12 06 F1 | 	add	arg01, #4
2cca0     09 FB 61 FC | 	wrlong	result1, arg01
2cca4     F2 FA 01 F6 | 	mov	result1, objptr
2cca8     00 88 04 FF 
2ccac     00 FA 45 F5 | 	or	result1, ##152043520
2ccb0     04 12 06 F1 | 	add	arg01, #4
2ccb4     09 FB 61 FC | 	wrlong	result1, arg01
2ccb8     04 12 06 F1 | 	add	arg01, #4
2ccbc     09 01 68 FC | 	wrlong	#0, arg01
2ccc0     04 12 06 F1 | 	add	arg01, #4
2ccc4     09 1F 62 FC | 	wrlong	local01, arg01
2ccc8     04 12 06 F1 | 	add	arg01, #4
2cccc     09 01 68 FC | 	wrlong	#0, arg01
2ccd0     F2 FA 01 F6 | 	mov	result1, objptr
2ccd4     00 90 04 FF 
2ccd8     00 FA 45 F5 | 	or	result1, ##153092096
2ccdc     04 12 06 F1 | 	add	arg01, #4
2cce0     09 FB 61 FC | 	wrlong	result1, arg01
2cce4     F2 FA 01 F6 | 	mov	result1, objptr
2cce8     00 98 04 FF 
2ccec     00 FA 45 F5 | 	or	result1, ##154140672
2ccf0     04 12 06 F1 | 	add	arg01, #4
2ccf4     09 FB 61 FC | 	wrlong	result1, arg01
2ccf8     F2 FA 01 F6 | 	mov	result1, objptr
2ccfc     00 A0 04 FF 
2cd00     00 FA 45 F5 | 	or	result1, ##155189248
2cd04     04 12 06 F1 | 	add	arg01, #4
2cd08     09 FB 61 FC | 	wrlong	result1, arg01
2cd0c     F2 FA 01 F6 | 	mov	result1, objptr
2cd10     00 A8 04 FF 
2cd14     00 FA 45 F5 | 	or	result1, ##156237824
2cd18     04 12 06 F1 | 	add	arg01, #4
2cd1c     09 FB 61 FC | 	wrlong	result1, arg01
2cd20     F2 FA 01 F6 | 	mov	result1, objptr
2cd24     00 B0 04 FF 
2cd28     00 FA 45 F5 | 	or	result1, ##157286400
2cd2c     04 12 06 F1 | 	add	arg01, #4
2cd30     09 FB 61 FC | 	wrlong	result1, arg01
2cd34     F2 FA 01 F6 | 	mov	result1, objptr
2cd38     00 B8 04 FF 
2cd3c     00 FA 45 F5 | 	or	result1, ##158334976
2cd40     04 12 06 F1 | 	add	arg01, #4
2cd44     09 FB 61 FC | 	wrlong	result1, arg01
2cd48     F2 FA 01 F6 | 	mov	result1, objptr
2cd4c     00 C0 04 FF 
2cd50     00 FA 45 F5 | 	or	result1, ##159383552
2cd54     04 12 06 F1 | 	add	arg01, #4
2cd58     09 FB 61 FC | 	wrlong	result1, arg01
2cd5c     F2 FA 01 F6 | 	mov	result1, objptr
2cd60     00 C8 04 FF 
2cd64     00 FA 45 F5 | 	or	result1, ##160432128
2cd68     04 12 06 F1 | 	add	arg01, #4
2cd6c     09 FB 61 FC | 	wrlong	result1, arg01
2cd70     F2 FA 01 F6 | 	mov	result1, objptr
2cd74     00 D0 04 FF 
2cd78     00 FA 45 F5 | 	or	result1, ##161480704
2cd7c     04 12 06 F1 | 	add	arg01, #4
2cd80     09 FB 61 FC | 	wrlong	result1, arg01
2cd84     F2 FA 01 F6 | 	mov	result1, objptr
2cd88     00 D8 04 FF 
2cd8c     00 FA 45 F5 | 	or	result1, ##162529280
2cd90     04 12 06 F1 | 	add	arg01, #4
2cd94     09 FB 61 FC | 	wrlong	result1, arg01
2cd98     F2 FA 01 F6 | 	mov	result1, objptr
2cd9c     00 E0 04 FF 
2cda0     00 FA 45 F5 | 	or	result1, ##163577856
2cda4     04 12 06 F1 | 	add	arg01, #4
2cda8     09 FB 61 FC | 	wrlong	result1, arg01
2cdac     F2 FA 01 F6 | 	mov	result1, objptr
2cdb0     00 E8 04 FF 
2cdb4     00 FA 45 F5 | 	or	result1, ##164626432
2cdb8     04 12 06 F1 | 	add	arg01, #4
2cdbc     09 FB 61 FC | 	wrlong	result1, arg01
2cdc0     4C 12 86 F1 | 	sub	arg01, #76
2cdc4                 | ' 
2cdc4                 | '     v->close = &v_close;
2cdc4                 | '     v->read = &v_read;
2cdc4                 | '     v->write = &v_write;
2cdc4                 | '     v->lseek = &v_lseek;
2cdc4                 | '     v->ioctl = &v_ioctl;
2cdc4                 | '     v->flush = 0;
2cdc4                 | '     v->vfs_data = ptr;
2cdc4                 | '     v->reserved = 0;
2cdc4                 | ' 
2cdc4                 | '     v->open = &v_open;
2cdc4                 | '     v->creat = &v_creat;
2cdc4                 | '     v->opendir = &v_opendir;
2cdc4                 | '     v->closedir = &v_closedir;
2cdc4                 | '     v->readdir = &v_readdir;
2cdc4                 | '     v->stat = &v_stat;
2cdc4                 | ' 
2cdc4                 | '     v->mkdir = &v_mkdir;
2cdc4                 | '     v->rmdir = &v_rmdir;
2cdc4                 | ' 
2cdc4                 | '     v->remove = &v_remove;
2cdc4                 | '     v->rename = &v_rename;
2cdc4                 | ' 
2cdc4                 | '     v->init = &v_init;
2cdc4                 | '     v->deinit = &v_deinit;
2cdc4                 | ' 
2cdc4                 | '     return v;
2cdc4     09 FB 01 F6 | 	mov	result1, arg01
2cdc8     A7 F0 03 F6 | 	mov	ptra, fp
2cdcc     B2 00 A0 FD | 	call	#popregs_
2cdd0                 | _fatfs_cc_get_vfs_ret
2cdd0     2D 00 64 FD | 	ret
2cdd4                 | 
2cdd4                 | _fatfs_cc_xmit_mmc_1044
2cdd4     01 00 00 FF 
2cdd8     10 E4 05 F1 | 	add	objptr, ##528
2cddc     F2 00 02 FB | 	rdlong	_var01, objptr
2cde0     08 E4 05 F1 | 	add	objptr, #8
2cde4     F2 02 02 FB | 	rdlong	_var02, objptr
2cde8     01 00 00 FF 
2cdec     18 E4 85 F1 | 	sub	objptr, ##536
2cdf0     40 02 62 FD | 	dirl	_var02
2cdf4     28 02 64 FD | 	setq	#1
2cdf8     09 05 02 FB | 	rdlong	_var03, arg01
2cdfc     69 04 62 FD | 	rev	_var03
2ce00     1B 04 FE F9 | 	movbyts	_var03, #27
2ce04     01 05 22 FC | 	wypin	_var03, _var02
2ce08     0A 05 02 F6 | 	mov	_var03, arg02
2ce0c     02 14 4E F0 | 	shr	arg02, #2 wz
2ce10     03 04 66 F0 | 	shl	_var03, #3
2ce14     00 05 22 FC | 	wypin	_var03, _var01
2ce18     41 02 62 FD | 	dirh	_var02
2ce1c     08 12 06 F1 | 	add	arg01, #8
2ce20     69 06 62 FD | 	rev	_var04
2ce24     1B 06 FE F9 | 	movbyts	_var04, #27
2ce28                 | LR__4550
2ce28     01 07 22 5C |  if_ne	wypin	_var04, _var02
2ce2c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2ce30     04 12 06 51 |  if_ne	add	arg01, #4
2ce34     69 06 62 5D |  if_ne	rev	_var04
2ce38     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2ce3c                 | LR__4551
2ce3c     40 02 72 5D |  if_ne	testp	_var02 wc
2ce40     F8 FF 9F 1D |  if_a	jmp	#LR__4551
2ce44     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4550
2ce48                 | LR__4552
2ce48     40 00 72 FD | 	testp	_var01 wc
2ce4c     F8 FF 9F 3D |  if_ae	jmp	#LR__4552
2ce50     40 02 62 FD | 	dirl	_var02
2ce54     FF FF FF FF 
2ce58     01 FF 2B FC | 	wypin	##-1, _var02
2ce5c     41 02 62 FD | 	dirh	_var02
2ce60                 | _fatfs_cc_xmit_mmc_1044_ret
2ce60     2D 00 64 FD | 	ret
2ce64                 | 
2ce64                 | _fatfs_cc_rcvr_mmc_1051
2ce64     01 00 00 FF 
2ce68     10 E4 05 F1 | 	add	objptr, ##528
2ce6c     F2 00 02 FB | 	rdlong	_var01, objptr
2ce70     0C E4 05 F1 | 	add	objptr, #12
2ce74     F2 02 02 FB | 	rdlong	_var02, objptr
2ce78     01 00 00 FF 
2ce7c     1C E4 85 F1 | 	sub	objptr, ##540
2ce80     01 03 08 FC | 	akpin	_var02
2ce84     0A 05 0A F6 | 	mov	_var03, arg02 wz
2ce88     02 04 4E F0 | 	shr	_var03, #2 wz
2ce8c     30 00 90 AD |  if_e	jmp	#LR__4562
2ce90     02 07 02 F6 | 	mov	_var04, _var03
2ce94     05 06 66 F0 | 	shl	_var04, #5
2ce98     00 07 22 FC | 	wypin	_var04, _var01
2ce9c     01 7F 18 FC | 	wxpin	#63, _var02
2cea0                 | LR__4560
2cea0                 | LR__4561
2cea0     40 02 72 FD | 	testp	_var02 wc
2cea4     F8 FF 9F 3D |  if_ae	jmp	#LR__4561
2cea8     01 07 8A FA | 	rdpin	_var04, _var02
2ceac     69 06 62 FD | 	rev	_var04
2ceb0     1B 06 FE F9 | 	movbyts	_var04, #27
2ceb4     09 07 62 FC | 	wrlong	_var04, arg01
2ceb8     04 12 06 F1 | 	add	arg01, #4
2cebc     F8 05 6E FB | 	djnz	_var03, #LR__4560
2cec0                 | LR__4562
2cec0     03 14 0E F5 | 	and	arg02, #3 wz
2cec4     24 00 90 AD |  if_e	jmp	#LR__4565
2cec8     01 4F 18 FC | 	wxpin	#39, _var02
2cecc                 | LR__4563
2cecc     00 11 28 FC | 	wypin	#8, _var01
2ced0                 | LR__4564
2ced0     40 02 72 FD | 	testp	_var02 wc
2ced4     F8 FF 9F 3D |  if_ae	jmp	#LR__4564
2ced8     01 07 8A FA | 	rdpin	_var04, _var02
2cedc     69 06 62 FD | 	rev	_var04
2cee0     09 07 42 FC | 	wrbyte	_var04, arg01
2cee4     01 12 06 F1 | 	add	arg01, #1
2cee8     F8 15 6E FB | 	djnz	arg02, #LR__4563
2ceec                 | LR__4565
2ceec                 | _fatfs_cc_rcvr_mmc_1051_ret
2ceec     2D 00 64 FD | 	ret
2cef0                 | 
2cef0                 | _fatfs_cc_wait_ready_1055
2cef0     01 4A 05 F6 | 	mov	COUNT_, #1
2cef4     A8 00 A0 FD | 	call	#pushregs_
2cef8     10 F0 07 F1 | 	add	ptra, #16
2cefc     1A FA 61 FD | 	getct	result1
2cf00     08 4E 05 F1 | 	add	fp, #8
2cf04     A7 FA 61 FC | 	wrlong	result1, fp
2cf08     14 1E 06 FB | 	rdlong	local01, #20
2cf0c     01 1E 46 F0 | 	shr	local01, #1
2cf10     04 4E 05 F1 | 	add	fp, #4
2cf14     A7 1E 62 FC | 	wrlong	local01, fp
2cf18     0C 4E 85 F1 | 	sub	fp, #12
2cf1c                 | ' {
2cf1c                 | ' 	BYTE d;
2cf1c                 | ' 	UINT tmr, tmout;
2cf1c                 | ' 
2cf1c                 | ' 	tmr = _cnt();
2cf1c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2cf1c                 | ' 	for(;;) {
2cf1c                 | LR__4570
2cf1c     04 4E 05 F1 | 	add	fp, #4
2cf20     A7 12 02 F6 | 	mov	arg01, fp
2cf24     04 4E 85 F1 | 	sub	fp, #4
2cf28     01 14 06 F6 | 	mov	arg02, #1
2cf2c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2cf30     04 4E 05 F1 | 	add	fp, #4
2cf34     A7 1E C2 FA | 	rdbyte	local01, fp
2cf38     04 4E 85 F1 | 	sub	fp, #4
2cf3c     FF 1E 0E F2 | 	cmp	local01, #255 wz
2cf40     01 FA 05 A6 |  if_e	mov	result1, #1
2cf44     28 00 90 AD |  if_e	jmp	#LR__4571
2cf48     1A FA 61 FD | 	getct	result1
2cf4c     08 4E 05 F1 | 	add	fp, #8
2cf50     A7 1E 02 FB | 	rdlong	local01, fp
2cf54     0F FB 81 F1 | 	sub	result1, local01
2cf58     04 4E 05 F1 | 	add	fp, #4
2cf5c     A7 1E 02 FB | 	rdlong	local01, fp
2cf60     0C 4E 85 F1 | 	sub	fp, #12
2cf64     0F FB 11 F2 | 	cmp	result1, local01 wc
2cf68     00 FA 05 36 |  if_ae	mov	result1, #0
2cf6c     AC FF 9F CD |  if_b	jmp	#LR__4570
2cf70                 | LR__4571
2cf70     A7 F0 03 F6 | 	mov	ptra, fp
2cf74     B2 00 A0 FD | 	call	#popregs_
2cf78                 | _fatfs_cc_wait_ready_1055_ret
2cf78     2D 00 64 FD | 	ret
2cf7c                 | 
2cf7c                 | _fatfs_cc_deselect_1061
2cf7c     00 4A 05 F6 | 	mov	COUNT_, #0
2cf80     A8 00 A0 FD | 	call	#pushregs_
2cf84     14 F0 07 F1 | 	add	ptra, #20
2cf88     01 00 00 FF 
2cf8c     14 E4 05 F1 | 	add	objptr, ##532
2cf90     F2 14 02 FB | 	rdlong	arg02, objptr
2cf94     04 4E 05 F1 | 	add	fp, #4
2cf98     A7 14 62 FC | 	wrlong	arg02, fp
2cf9c     04 E4 85 F1 | 	sub	objptr, #4
2cfa0     F2 14 02 FB | 	rdlong	arg02, objptr
2cfa4     04 4E 05 F1 | 	add	fp, #4
2cfa8     A7 14 62 FC | 	wrlong	arg02, fp
2cfac     08 E4 05 F1 | 	add	objptr, #8
2cfb0     F2 14 02 FB | 	rdlong	arg02, objptr
2cfb4     04 4E 05 F1 | 	add	fp, #4
2cfb8     A7 14 62 FC | 	wrlong	arg02, fp
2cfbc     04 E4 05 F1 | 	add	objptr, #4
2cfc0     F2 14 02 FB | 	rdlong	arg02, objptr
2cfc4     01 00 00 FF 
2cfc8     1C E4 85 F1 | 	sub	objptr, ##540
2cfcc     04 4E 05 F1 | 	add	fp, #4
2cfd0     A7 14 62 FC | 	wrlong	arg02, fp
2cfd4     0C 4E 85 F1 | 	sub	fp, #12
2cfd8     A7 12 02 FB | 	rdlong	arg01, fp
2cfdc     04 4E 85 F1 | 	sub	fp, #4
2cfe0     59 12 62 FD | 	drvh	arg01
2cfe4     1F 20 64 FD | 	waitx	#16
2cfe8     A7 12 02 F6 | 	mov	arg01, fp
2cfec     01 14 06 F6 | 	mov	arg02, #1
2cff0     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2cff4     A7 F0 03 F6 | 	mov	ptra, fp
2cff8     B2 00 A0 FD | 	call	#popregs_
2cffc                 | _fatfs_cc_deselect_1061_ret
2cffc     2D 00 64 FD | 	ret
2d000                 | 
2d000                 | _fatfs_cc_select_1065
2d000     00 4A 05 F6 | 	mov	COUNT_, #0
2d004     A8 00 A0 FD | 	call	#pushregs_
2d008     10 F0 07 F1 | 	add	ptra, #16
2d00c     01 00 00 FF 
2d010     14 E4 05 F1 | 	add	objptr, ##532
2d014     F2 14 02 FB | 	rdlong	arg02, objptr
2d018     08 4E 05 F1 | 	add	fp, #8
2d01c     A7 14 62 FC | 	wrlong	arg02, fp
2d020     08 E4 05 F1 | 	add	objptr, #8
2d024     F2 12 02 FB | 	rdlong	arg01, objptr
2d028     01 00 00 FF 
2d02c     1C E4 85 F1 | 	sub	objptr, ##540
2d030     04 4E 05 F1 | 	add	fp, #4
2d034     A7 12 62 FC | 	wrlong	arg01, fp
2d038     50 12 62 FD | 	fltl	arg01
2d03c     04 4E 85 F1 | 	sub	fp, #4
2d040     A7 12 02 FB | 	rdlong	arg01, fp
2d044     58 12 62 FD | 	drvl	arg01
2d048     1F 20 64 FD | 	waitx	#16
2d04c     04 4E 05 F1 | 	add	fp, #4
2d050     A7 12 02 FB | 	rdlong	arg01, fp
2d054     41 12 62 FD | 	dirh	arg01
2d058     08 4E 85 F1 | 	sub	fp, #8
2d05c     A7 12 02 F6 | 	mov	arg01, fp
2d060     04 4E 85 F1 | 	sub	fp, #4
2d064     01 14 06 F6 | 	mov	arg02, #1
2d068     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2d06c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1055
2d070     00 FA 0D F2 | 	cmp	result1, #0 wz
2d074     01 FA 05 56 |  if_ne	mov	result1, #1
2d078     08 00 90 5D |  if_ne	jmp	#LR__4580
2d07c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1061
2d080                 | ' 
2d080                 | ' 	deselect();
2d080                 | ' 	return 0;
2d080     00 FA 05 F6 | 	mov	result1, #0
2d084                 | LR__4580
2d084     A7 F0 03 F6 | 	mov	ptra, fp
2d088     B2 00 A0 FD | 	call	#popregs_
2d08c                 | _fatfs_cc_select_1065_ret
2d08c     2D 00 64 FD | 	ret
2d090                 | 
2d090                 | _fatfs_cc_rcvr_datablock_1069
2d090     01 4A 05 F6 | 	mov	COUNT_, #1
2d094     A8 00 A0 FD | 	call	#pushregs_
2d098     18 F0 07 F1 | 	add	ptra, #24
2d09c     04 4E 05 F1 | 	add	fp, #4
2d0a0     A7 12 62 FC | 	wrlong	arg01, fp
2d0a4     04 4E 05 F1 | 	add	fp, #4
2d0a8     A7 14 62 FC | 	wrlong	arg02, fp
2d0ac     1A FA 61 FD | 	getct	result1
2d0b0     08 4E 05 F1 | 	add	fp, #8
2d0b4     A7 FA 61 FC | 	wrlong	result1, fp
2d0b8     14 1E 06 FB | 	rdlong	local01, #20
2d0bc     03 1E 46 F0 | 	shr	local01, #3
2d0c0     04 4E 05 F1 | 	add	fp, #4
2d0c4     A7 1E 62 FC | 	wrlong	local01, fp
2d0c8     14 4E 85 F1 | 	sub	fp, #20
2d0cc                 | ' 	BYTE *buff,
2d0cc                 | ' 	UINT btr
2d0cc                 | ' )
2d0cc                 | ' {
2d0cc                 | ' 	BYTE d[2];
2d0cc                 | ' 	UINT tmr, tmout;
2d0cc                 | ' 
2d0cc                 | ' 	tmr = _cnt();
2d0cc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2d0cc                 | ' 	for(;;) {
2d0cc                 | LR__4590
2d0cc     0C 4E 05 F1 | 	add	fp, #12
2d0d0     A7 12 02 F6 | 	mov	arg01, fp
2d0d4     0C 4E 85 F1 | 	sub	fp, #12
2d0d8     01 14 06 F6 | 	mov	arg02, #1
2d0dc     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2d0e0     0C 4E 05 F1 | 	add	fp, #12
2d0e4     A7 1E C2 FA | 	rdbyte	local01, fp
2d0e8     0C 4E 85 F1 | 	sub	fp, #12
2d0ec     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d0f0     28 00 90 5D |  if_ne	jmp	#LR__4591
2d0f4     1A FA 61 FD | 	getct	result1
2d0f8     FD 1E 02 F6 | 	mov	local01, result1
2d0fc     10 4E 05 F1 | 	add	fp, #16
2d100     A7 14 02 FB | 	rdlong	arg02, fp
2d104     0A 1F 82 F1 | 	sub	local01, arg02
2d108     04 4E 05 F1 | 	add	fp, #4
2d10c     A7 14 02 FB | 	rdlong	arg02, fp
2d110     14 4E 85 F1 | 	sub	fp, #20
2d114     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2d118     B0 FF 9F CD |  if_b	jmp	#LR__4590
2d11c                 | LR__4591
2d11c     0C 4E 05 F1 | 	add	fp, #12
2d120     A7 1E C2 FA | 	rdbyte	local01, fp
2d124     0C 4E 85 F1 | 	sub	fp, #12
2d128     FE 1E 0E F2 | 	cmp	local01, #254 wz
2d12c     00 FA 05 56 |  if_ne	mov	result1, #0
2d130     30 00 90 5D |  if_ne	jmp	#LR__4592
2d134     04 4E 05 F1 | 	add	fp, #4
2d138     A7 12 02 FB | 	rdlong	arg01, fp
2d13c     04 4E 05 F1 | 	add	fp, #4
2d140     A7 14 02 FB | 	rdlong	arg02, fp
2d144     08 4E 85 F1 | 	sub	fp, #8
2d148     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2d14c     0C 4E 05 F1 | 	add	fp, #12
2d150     A7 12 02 F6 | 	mov	arg01, fp
2d154     0C 4E 85 F1 | 	sub	fp, #12
2d158     02 14 06 F6 | 	mov	arg02, #2
2d15c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2d160                 | ' 
2d160                 | ' 	rcvr_mmc(buff, btr);
2d160                 | ' 	rcvr_mmc(d, 2);
2d160                 | ' 
2d160                 | ' 	return 1;
2d160     01 FA 05 F6 | 	mov	result1, #1
2d164                 | LR__4592
2d164     A7 F0 03 F6 | 	mov	ptra, fp
2d168     B2 00 A0 FD | 	call	#popregs_
2d16c                 | _fatfs_cc_rcvr_datablock_1069_ret
2d16c     2D 00 64 FD | 	ret
2d170                 | 
2d170                 | _fatfs_cc_xmit_datablock_1071
2d170     00 4A 05 F6 | 	mov	COUNT_, #0
2d174     A8 00 A0 FD | 	call	#pushregs_
2d178     10 F0 07 F1 | 	add	ptra, #16
2d17c     04 4E 05 F1 | 	add	fp, #4
2d180     A7 12 62 FC | 	wrlong	arg01, fp
2d184     04 4E 05 F1 | 	add	fp, #4
2d188     A7 14 42 FC | 	wrbyte	arg02, fp
2d18c     08 4E 85 F1 | 	sub	fp, #8
2d190     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1055
2d194     00 FA 0D F2 | 	cmp	result1, #0 wz
2d198     00 FA 05 A6 |  if_e	mov	result1, #0
2d19c     90 00 90 AD |  if_e	jmp	#LR__4601
2d1a0     08 4E 05 F1 | 	add	fp, #8
2d1a4     A7 14 C2 FA | 	rdbyte	arg02, fp
2d1a8     04 4E 05 F1 | 	add	fp, #4
2d1ac     A7 14 42 FC | 	wrbyte	arg02, fp
2d1b0     A7 12 02 F6 | 	mov	arg01, fp
2d1b4     0C 4E 85 F1 | 	sub	fp, #12
2d1b8     01 14 06 F6 | 	mov	arg02, #1
2d1bc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1044
2d1c0     08 4E 05 F1 | 	add	fp, #8
2d1c4     A7 14 C2 FA | 	rdbyte	arg02, fp
2d1c8     08 4E 85 F1 | 	sub	fp, #8
2d1cc     FD 14 0E F2 | 	cmp	arg02, #253 wz
2d1d0     58 00 90 AD |  if_e	jmp	#LR__4600
2d1d4     04 4E 05 F1 | 	add	fp, #4
2d1d8     A7 12 02 FB | 	rdlong	arg01, fp
2d1dc     04 4E 85 F1 | 	sub	fp, #4
2d1e0     09 14 C6 F9 | 	decod	arg02, #9
2d1e4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1044
2d1e8     0C 4E 05 F1 | 	add	fp, #12
2d1ec     A7 12 02 F6 | 	mov	arg01, fp
2d1f0     0C 4E 85 F1 | 	sub	fp, #12
2d1f4     02 14 06 F6 | 	mov	arg02, #2
2d1f8     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2d1fc     0C 4E 05 F1 | 	add	fp, #12
2d200     A7 12 02 F6 | 	mov	arg01, fp
2d204     0C 4E 85 F1 | 	sub	fp, #12
2d208     01 14 06 F6 | 	mov	arg02, #1
2d20c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2d210     0C 4E 05 F1 | 	add	fp, #12
2d214     A7 14 C2 FA | 	rdbyte	arg02, fp
2d218     0C 4E 85 F1 | 	sub	fp, #12
2d21c     1F 14 06 F5 | 	and	arg02, #31
2d220     05 14 0E F2 | 	cmp	arg02, #5 wz
2d224                 | ' 			return 0;
2d224     00 FA 05 56 |  if_ne	mov	result1, #0
2d228     04 00 90 5D |  if_ne	jmp	#LR__4601
2d22c                 | LR__4600
2d22c                 | ' 	}
2d22c                 | ' 
2d22c                 | ' 	return 1;
2d22c     01 FA 05 F6 | 	mov	result1, #1
2d230                 | LR__4601
2d230     A7 F0 03 F6 | 	mov	ptra, fp
2d234     B2 00 A0 FD | 	call	#popregs_
2d238                 | _fatfs_cc_xmit_datablock_1071_ret
2d238     2D 00 64 FD | 	ret
2d23c                 | 
2d23c                 | _fatfs_cc_send_cmd_1075
2d23c     01 4A 05 F6 | 	mov	COUNT_, #1
2d240     A8 00 A0 FD | 	call	#pushregs_
2d244     1C F0 07 F1 | 	add	ptra, #28
2d248                 | _fatfs_cc_send_cmd_1075_enter
2d248     04 4E 05 F1 | 	add	fp, #4
2d24c     A7 12 42 FC | 	wrbyte	arg01, fp
2d250     04 4E 05 F1 | 	add	fp, #4
2d254     A7 14 62 FC | 	wrlong	arg02, fp
2d258     04 4E 85 F1 | 	sub	fp, #4
2d25c     A7 FA C1 FA | 	rdbyte	result1, fp
2d260     04 4E 85 F1 | 	sub	fp, #4
2d264     80 FA CD F7 | 	test	result1, #128 wz
2d268     44 00 90 AD |  if_e	jmp	#LR__4610
2d26c     04 4E 05 F1 | 	add	fp, #4
2d270     A7 14 C2 FA | 	rdbyte	arg02, fp
2d274     7F 14 06 F5 | 	and	arg02, #127
2d278     A7 14 42 FC | 	wrbyte	arg02, fp
2d27c     04 4E 85 F1 | 	sub	fp, #4
2d280     37 12 06 F6 | 	mov	arg01, #55
2d284     00 14 06 F6 | 	mov	arg02, #0
2d288     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1075
2d28c     0C 4E 05 F1 | 	add	fp, #12
2d290     A7 FA 41 FC | 	wrbyte	result1, fp
2d294     A7 14 C2 FA | 	rdbyte	arg02, fp
2d298     0C 4E 85 F1 | 	sub	fp, #12
2d29c     02 14 16 F2 | 	cmp	arg02, #2 wc
2d2a0     0C 4E 05 31 |  if_ae	add	fp, #12
2d2a4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2d2a8     0C 4E 85 31 |  if_ae	sub	fp, #12
2d2ac     6C 01 90 3D |  if_ae	jmp	#LR__4614
2d2b0                 | LR__4610
2d2b0     04 4E 05 F1 | 	add	fp, #4
2d2b4     A7 14 C2 FA | 	rdbyte	arg02, fp
2d2b8     04 4E 85 F1 | 	sub	fp, #4
2d2bc     0C 14 0E F2 | 	cmp	arg02, #12 wz
2d2c0     14 00 90 AD |  if_e	jmp	#LR__4611
2d2c4     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1061
2d2c8     34 FD BF FD | 	call	#_fatfs_cc_select_1065
2d2cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2d0     FF FA 05 A6 |  if_e	mov	result1, #255
2d2d4     44 01 90 AD |  if_e	jmp	#LR__4614
2d2d8                 | LR__4611
2d2d8     04 4E 05 F1 | 	add	fp, #4
2d2dc     A7 14 C2 FA | 	rdbyte	arg02, fp
2d2e0     40 FA 05 F6 | 	mov	result1, #64
2d2e4     0A FB 41 F5 | 	or	result1, arg02
2d2e8     10 4E 05 F1 | 	add	fp, #16
2d2ec     A7 FA 41 FC | 	wrbyte	result1, fp
2d2f0     0C 4E 85 F1 | 	sub	fp, #12
2d2f4     A7 FA 01 FB | 	rdlong	result1, fp
2d2f8     18 FA 45 F0 | 	shr	result1, #24
2d2fc     0D 4E 05 F1 | 	add	fp, #13
2d300     A7 FA 41 FC | 	wrbyte	result1, fp
2d304     0D 4E 85 F1 | 	sub	fp, #13
2d308     A7 FA 01 FB | 	rdlong	result1, fp
2d30c     10 FA 45 F0 | 	shr	result1, #16
2d310     0E 4E 05 F1 | 	add	fp, #14
2d314     A7 FA 41 FC | 	wrbyte	result1, fp
2d318     0E 4E 85 F1 | 	sub	fp, #14
2d31c     A7 FA 01 FB | 	rdlong	result1, fp
2d320     08 FA 45 F0 | 	shr	result1, #8
2d324     0F 4E 05 F1 | 	add	fp, #15
2d328     A7 FA 41 FC | 	wrbyte	result1, fp
2d32c     0F 4E 85 F1 | 	sub	fp, #15
2d330     A7 FA 01 FB | 	rdlong	result1, fp
2d334     10 4E 05 F1 | 	add	fp, #16
2d338     A7 FA 41 FC | 	wrbyte	result1, fp
2d33c     0C 4E 85 F1 | 	sub	fp, #12
2d340     A7 02 48 FC | 	wrbyte	#1, fp
2d344     08 4E 85 F1 | 	sub	fp, #8
2d348     A7 FA C9 FA | 	rdbyte	result1, fp wz
2d34c     04 4E 85 F1 | 	sub	fp, #4
2d350     0C 4E 05 A1 |  if_e	add	fp, #12
2d354     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2d358     0C 4E 85 A1 |  if_e	sub	fp, #12
2d35c     04 4E 05 F1 | 	add	fp, #4
2d360     A7 FA C1 FA | 	rdbyte	result1, fp
2d364     04 4E 85 F1 | 	sub	fp, #4
2d368     08 FA 0D F2 | 	cmp	result1, #8 wz
2d36c     0C 4E 05 A1 |  if_e	add	fp, #12
2d370     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2d374     0C 4E 85 A1 |  if_e	sub	fp, #12
2d378     0C 4E 05 F1 | 	add	fp, #12
2d37c     A7 14 C2 FA | 	rdbyte	arg02, fp
2d380     0D 4E 05 F1 | 	add	fp, #13
2d384     A7 14 42 FC | 	wrbyte	arg02, fp
2d388     05 4E 85 F1 | 	sub	fp, #5
2d38c     A7 12 02 F6 | 	mov	arg01, fp
2d390     14 4E 85 F1 | 	sub	fp, #20
2d394     06 14 06 F6 | 	mov	arg02, #6
2d398     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1044
2d39c     04 4E 05 F1 | 	add	fp, #4
2d3a0     A7 1E C2 FA | 	rdbyte	local01, fp
2d3a4     04 4E 85 F1 | 	sub	fp, #4
2d3a8     0C 1E 0E F2 | 	cmp	local01, #12 wz
2d3ac     10 4E 05 A1 |  if_e	add	fp, #16
2d3b0     A7 12 02 A6 |  if_e	mov	arg01, fp
2d3b4     10 4E 85 A1 |  if_e	sub	fp, #16
2d3b8     01 14 06 A6 |  if_e	mov	arg02, #1
2d3bc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1051
2d3c0     0C 4E 05 F1 | 	add	fp, #12
2d3c4     A7 14 48 FC | 	wrbyte	#10, fp
2d3c8     0C 4E 85 F1 | 	sub	fp, #12
2d3cc                 | ' 	n = 10;
2d3cc                 | ' 	do
2d3cc                 | LR__4612
2d3cc     10 4E 05 F1 | 	add	fp, #16
2d3d0     A7 12 02 F6 | 	mov	arg01, fp
2d3d4     10 4E 85 F1 | 	sub	fp, #16
2d3d8     01 14 06 F6 | 	mov	arg02, #1
2d3dc     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1051
2d3e0     10 4E 05 F1 | 	add	fp, #16
2d3e4     A7 1E C2 FA | 	rdbyte	local01, fp
2d3e8     10 4E 85 F1 | 	sub	fp, #16
2d3ec     80 1E CE F7 | 	test	local01, #128 wz
2d3f0     1C 00 90 AD |  if_e	jmp	#LR__4613
2d3f4     0C 4E 05 F1 | 	add	fp, #12
2d3f8     A7 1E C2 FA | 	rdbyte	local01, fp
2d3fc     01 1E 86 F1 | 	sub	local01, #1
2d400     A7 1E 42 FC | 	wrbyte	local01, fp
2d404     A7 1E CA FA | 	rdbyte	local01, fp wz
2d408     0C 4E 85 F1 | 	sub	fp, #12
2d40c     BC FF 9F 5D |  if_ne	jmp	#LR__4612
2d410                 | LR__4613
2d410                 | ' 
2d410                 | ' 	return d;
2d410     10 4E 05 F1 | 	add	fp, #16
2d414     A7 FA C1 FA | 	rdbyte	result1, fp
2d418     10 4E 85 F1 | 	sub	fp, #16
2d41c                 | LR__4614
2d41c     A7 F0 03 F6 | 	mov	ptra, fp
2d420     B2 00 A0 FD | 	call	#popregs_
2d424                 | _fatfs_cc_send_cmd_1075_ret
2d424     2D 00 64 FD | 	ret
2d428                 | 
2d428                 | _fatfs_cc_disk_deinitialize
2d428     03 4A 05 F6 | 	mov	COUNT_, #3
2d42c     A8 00 A0 FD | 	call	#pushregs_
2d430     00 12 4E F2 | 	cmps	arg01, #0 wz
2d434     01 00 00 FF 
2d438     14 E4 05 F1 | 	add	objptr, ##532
2d43c     F2 12 02 FB | 	rdlong	arg01, objptr
2d440     04 E4 85 F1 | 	sub	objptr, #4
2d444     F2 1E 02 FB | 	rdlong	local01, objptr
2d448     08 E4 05 F1 | 	add	objptr, #8
2d44c     F2 20 02 FB | 	rdlong	local02, objptr
2d450     04 E4 05 F1 | 	add	objptr, #4
2d454     F2 22 02 FB | 	rdlong	local03, objptr
2d458     01 00 00 FF 
2d45c     1C E4 85 F1 | 	sub	objptr, ##540
2d460                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d460                 | '         return RES_NOTRDY;
2d460     03 FA 05 56 |  if_ne	mov	result1, #3
2d464     2C 00 90 5D |  if_ne	jmp	#LR__4620
2d468     50 12 62 FD | 	fltl	arg01
2d46c     09 01 08 FC | 	wrpin	#0, arg01
2d470     50 1E 62 FD | 	fltl	local01
2d474     0F 01 08 FC | 	wrpin	#0, local01
2d478     50 20 62 FD | 	fltl	local02
2d47c     10 01 08 FC | 	wrpin	#0, local02
2d480     50 22 62 FD | 	fltl	local03
2d484     11 01 08 FC | 	wrpin	#0, local03
2d488     0A 12 06 F6 | 	mov	arg01, #10
2d48c     9C 13 BF FD | 	call	#__system___waitms
2d490                 | '     }
2d490                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d490                 | '     _pinclear(PIN_SS);
2d490                 | '     _pinclear(PIN_CLK);
2d490                 | '     _pinclear(PIN_DI);
2d490                 | '     _pinclear(PIN_DO);
2d490                 | ' 
2d490                 | '     _waitms(10);
2d490                 | ' 
2d490                 | '     return 0;
2d490     00 FA 05 F6 | 	mov	result1, #0
2d494                 | LR__4620
2d494     A7 F0 03 F6 | 	mov	ptra, fp
2d498     B2 00 A0 FD | 	call	#popregs_
2d49c                 | _fatfs_cc_disk_deinitialize_ret
2d49c     2D 00 64 FD | 	ret
2d4a0                 | 
2d4a0                 | _fatfs_cc_gettimeofday
2d4a0     04 4A 05 F6 | 	mov	COUNT_, #4
2d4a4     A8 00 A0 FD | 	call	#pushregs_
2d4a8     09 1F 02 F6 | 	mov	local01, arg01
2d4ac     58 0F BF FD | 	call	#__system___getus
2d4b0     FD 12 02 F6 | 	mov	arg01, result1
2d4b4     02 00 00 FF 
2d4b8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2d4bc     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2d4c0     09 FB 01 F6 | 	mov	result1, arg01
2d4c4     10 FB 81 F1 | 	sub	result1, local02
2d4c8     A1 07 00 FF 
2d4cc     40 FA 15 FD | 	qdiv	result1, ##1000000
2d4d0     02 00 00 FF 
2d4d4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2d4d8     18 20 62 FD | 	getqx	local02
2d4dc     A1 07 00 FF 
2d4e0     40 FA 15 FD | 	qdiv	result1, ##1000000
2d4e4     00 20 0E F2 | 	cmp	local02, #0 wz
2d4e8     19 22 62 FD | 	getqy	local03
2d4ec     28 00 90 AD |  if_e	jmp	#LR__4630
2d4f0     02 00 00 FF 
2d4f4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2d4f8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2d4fc     10 25 02 F1 | 	add	local04, local02
2d500     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2d504     11 13 82 F1 | 	sub	arg01, local03
2d508     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2d50c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2d510     02 00 00 FF 
2d514     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2d518                 | LR__4630
2d518     02 00 00 FF 
2d51c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2d520     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2d524     02 00 00 FF 
2d528     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2d52c     0F 25 62 FC | 	wrlong	local04, local01
2d530     04 1E 06 F1 | 	add	local01, #4
2d534     0F 23 62 FC | 	wrlong	local03, local01
2d538                 | '         lastsec += secs;
2d538                 | '         lastus = now - leftover;
2d538                 | '     }
2d538                 | '     tv->tv_sec = lastsec;
2d538                 | '     tv->tv_usec = leftover;
2d538                 | '     return 0;
2d538     00 FA 05 F6 | 	mov	result1, #0
2d53c     A7 F0 03 F6 | 	mov	ptra, fp
2d540     B2 00 A0 FD | 	call	#popregs_
2d544                 | _fatfs_cc_gettimeofday_ret
2d544     2D 00 64 FD | 	ret
2d548                 | 
2d548                 | _fatfs_cc__is_leap_year
2d548     09 FB 51 F6 | 	abs	result1, arg01 wc
2d54c     03 FA 05 F5 | 	and	result1, #3
2d550     FD FA 89 F6 | 	negc	result1, result1 wz
2d554     38 00 90 5D |  if_ne	jmp	#LR__4641
2d558     09 FB 51 F6 | 	abs	result1, arg01 wc
2d55c     64 FA 15 FD | 	qdiv	result1, #100
2d560     19 FA 61 FD | 	getqy	result1
2d564     FD FA 89 F6 | 	negc	result1, result1 wz
2d568     1C 00 90 5D |  if_ne	jmp	#LR__4640
2d56c     09 FB 51 F6 | 	abs	result1, arg01 wc
2d570     90 FB 15 FD | 	qdiv	result1, #400
2d574                 | '       return (0 == y % 400);
2d574     00 FA 05 F6 | 	mov	result1, #0
2d578     19 00 62 FD | 	getqy	_var01
2d57c     00 01 8A F6 | 	negc	_var01, _var01 wz
2d580     01 FA 05 A6 |  if_e	mov	result1, #1
2d584     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2d588                 | LR__4640
2d588                 | '     return 1;
2d588     01 FA 05 F6 | 	mov	result1, #1
2d58c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2d590                 | LR__4641
2d590                 | '   }
2d590                 | '   return 0;
2d590     00 FA 05 F6 | 	mov	result1, #0
2d594                 | _fatfs_cc__is_leap_year_ret
2d594     2D 00 64 FD | 	ret
2d598                 | 
2d598                 | _fatfs_cc___tzoffset
2d598     09 01 0A F6 | 	mov	_var01, arg01 wz
2d59c     FF FF FF FF 
2d5a0     0A FF 6B FC | 	wrlong	##-1, arg02
2d5a4     01 02 06 F6 | 	mov	_var02, #1
2d5a8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2d5ac                 | '                 return 0;
2d5ac     00 FA 05 A6 |  if_e	mov	result1, #0
2d5b0     94 02 90 AD |  if_e	jmp	#LR__4667
2d5b4     0A 01 68 FC | 	wrlong	#0, arg02
2d5b8     02 00 00 FF 
2d5bc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2d5c0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2d5c4                 | ' 
2d5c4                 | '        *hasdst = 0;
2d5c4                 | ' 
2d5c4                 | ' 	n = stdname;
2d5c4                 | '         while (*s && isalpha(*s)) {
2d5c4     02 00 00 FF 
2d5c8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2d5cc     97 28 48 FB | 	callpa	#(@LR__4651-@LR__4650)>>2,fcache_load_ptr_
2d5d0                 | LR__4650
2d5d0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2d5d4     48 00 90 AD |  if_e	jmp	#LR__4652
2d5d8     00 13 C2 FA | 	rdbyte	arg01, _var01
2d5dc                 | ' {
2d5dc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2d5dc     80 12 36 F3 | 	fle	arg01, #128 wc
2d5e0                 | '     return __ctype[c];
2d5e0     02 00 00 FF 
2d5e4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2d5e8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2d5ec     09 FB C1 FA | 	rdbyte	result1, arg01
2d5f0     02 00 00 FF 
2d5f4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2d5f8     0C FA CD F7 | 	test	result1, #12 wz
2d5fc     20 00 90 AD |  if_e	jmp	#LR__4652
2d600     00 09 02 F6 | 	mov	_var05, _var01
2d604     00 0B 02 F6 | 	mov	_var06, _var01
2d608     01 0A 06 F1 | 	add	_var06, #1
2d60c     04 0D C2 FA | 	rdbyte	_var07, _var05
2d610     05 01 02 F6 | 	mov	_var01, _var06
2d614     03 0D 42 FC | 	wrbyte	_var07, _var04
2d618     01 06 06 F1 | 	add	_var04, #1
2d61c     B0 FF 9F FD | 	jmp	#LR__4650
2d620                 | LR__4651
2d620                 | LR__4652
2d620     03 01 48 FC | 	wrbyte	#0, _var04
2d624     00 0E 06 F6 | 	mov	_var08, #0
2d628     00 05 C2 FA | 	rdbyte	_var03, _var01
2d62c     2D 04 0E F2 | 	cmp	_var03, #45 wz
2d630     01 02 66 A6 |  if_e	neg	_var02, #1
2d634     01 00 06 A1 |  if_e	add	_var01, #1
2d638     97 28 48 FB | 	callpa	#(@LR__4654-@LR__4653)>>2,fcache_load_ptr_
2d63c                 | '                 sgn = -1;
2d63c                 | '                 s++;
2d63c                 | '         }
2d63c                 | '         while (isdigit(*s)) {
2d63c                 | LR__4653
2d63c     00 13 C2 FA | 	rdbyte	arg01, _var01
2d640                 | ' {
2d640                 | '   return  (__ctype_get(c) & 0x02 ) ;
2d640     80 12 36 F3 | 	fle	arg01, #128 wc
2d644                 | '     return __ctype[c];
2d644     02 00 00 FF 
2d648     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2d64c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2d650     09 FB C1 FA | 	rdbyte	result1, arg01
2d654     02 00 00 FF 
2d658     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2d65c     02 FA CD F7 | 	test	result1, #2 wz
2d660     28 00 90 AD |  if_e	jmp	#LR__4655
2d664     07 05 02 F6 | 	mov	_var03, _var08
2d668     02 04 66 F0 | 	shl	_var03, #2
2d66c     07 05 02 F1 | 	add	_var03, _var08
2d670     01 04 66 F0 | 	shl	_var03, #1
2d674     00 09 C2 FA | 	rdbyte	_var05, _var01
2d678     30 08 86 F1 | 	sub	_var05, #48
2d67c     04 05 02 F1 | 	add	_var03, _var05
2d680     02 0F 02 F6 | 	mov	_var08, _var03
2d684     01 00 06 F1 | 	add	_var01, #1
2d688     B0 FF 9F FD | 	jmp	#LR__4653
2d68c                 | LR__4654
2d68c                 | LR__4655
2d68c     07 00 00 FF 
2d690     10 0E 06 FD | 	qmul	_var08, ##3600
2d694     00 05 C2 FA | 	rdbyte	_var03, _var01
2d698     3A 04 0E F2 | 	cmp	_var03, #58 wz
2d69c     18 10 62 FD | 	getqx	_var09
2d6a0     70 00 90 5D |  if_ne	jmp	#LR__4659
2d6a4     00 0E 06 F6 | 	mov	_var08, #0
2d6a8     01 00 06 F1 | 	add	_var01, #1
2d6ac     97 28 48 FB | 	callpa	#(@LR__4657-@LR__4656)>>2,fcache_load_ptr_
2d6b0                 | '                 x = 0;
2d6b0                 | '                 s++;
2d6b0                 | '                 while (isdigit(*s)) {
2d6b0                 | LR__4656
2d6b0     00 13 C2 FA | 	rdbyte	arg01, _var01
2d6b4                 | ' {
2d6b4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2d6b4     80 12 36 F3 | 	fle	arg01, #128 wc
2d6b8                 | '     return __ctype[c];
2d6b8     02 00 00 FF 
2d6bc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2d6c0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2d6c4     09 FB C1 FA | 	rdbyte	result1, arg01
2d6c8     02 00 00 FF 
2d6cc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2d6d0     02 FA CD F7 | 	test	result1, #2 wz
2d6d4     28 00 90 AD |  if_e	jmp	#LR__4658
2d6d8     07 05 02 F6 | 	mov	_var03, _var08
2d6dc     02 04 66 F0 | 	shl	_var03, #2
2d6e0     07 05 02 F1 | 	add	_var03, _var08
2d6e4     01 04 66 F0 | 	shl	_var03, #1
2d6e8     00 09 C2 FA | 	rdbyte	_var05, _var01
2d6ec     30 08 86 F1 | 	sub	_var05, #48
2d6f0     04 05 02 F1 | 	add	_var03, _var05
2d6f4     02 0F 02 F6 | 	mov	_var08, _var03
2d6f8     01 00 06 F1 | 	add	_var01, #1
2d6fc     B0 FF 9F FD | 	jmp	#LR__4656
2d700                 | LR__4657
2d700                 | LR__4658
2d700     07 0D 02 F6 | 	mov	_var07, _var08
2d704     04 0C 66 F0 | 	shl	_var07, #4
2d708     07 0D 82 F1 | 	sub	_var07, _var08
2d70c     02 0C 66 F0 | 	shl	_var07, #2
2d710     06 11 02 F1 | 	add	_var09, _var07
2d714                 | LR__4659
2d714     02 00 00 FF 
2d718     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2d71c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2d720     00 13 C2 FA | 	rdbyte	arg01, _var01
2d724                 | ' {
2d724                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2d724     80 12 36 F3 | 	fle	arg01, #128 wc
2d728                 | '     return __ctype[c];
2d728     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2d72c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2d730     09 FB C1 FA | 	rdbyte	result1, arg01
2d734     02 00 00 FF 
2d738     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2d73c     0C FA CD F7 | 	test	result1, #12 wz
2d740     50 00 90 AD |  if_e	jmp	#LR__4662
2d744     0A 03 68 FC | 	wrlong	#1, arg02
2d748                 | '                 *hasdst = 1;
2d748                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2d748                 | LR__4660
2d748     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2d74c     44 00 90 AD |  if_e	jmp	#LR__4661
2d750     00 13 C2 FA | 	rdbyte	arg01, _var01
2d754                 | ' {
2d754                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2d754     80 12 36 F3 | 	fle	arg01, #128 wc
2d758                 | '     return __ctype[c];
2d758     02 00 00 FF 
2d75c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2d760     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2d764     09 FB C1 FA | 	rdbyte	result1, arg01
2d768     02 00 00 FF 
2d76c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2d770     0C FA CD F7 | 	test	result1, #12 wz
2d774     1C 00 90 AD |  if_e	jmp	#LR__4661
2d778     00 0B 02 F6 | 	mov	_var06, _var01
2d77c     01 0A 06 F1 | 	add	_var06, #1
2d780     00 0D C2 FA | 	rdbyte	_var07, _var01
2d784     05 01 02 F6 | 	mov	_var01, _var06
2d788     03 0D 42 FC | 	wrbyte	_var07, _var04
2d78c     01 06 06 F1 | 	add	_var04, #1
2d790     B4 FF 9F FD | 	jmp	#LR__4660
2d794                 | LR__4661
2d794                 | LR__4662
2d794     03 01 48 FC | 	wrbyte	#0, _var04
2d798     02 00 00 FF 
2d79c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2d7a0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2d7a4     02 00 00 FF 
2d7a8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2d7ac     20 00 90 AD |  if_e	jmp	#LR__4663
2d7b0     02 00 00 FF 
2d7b4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2d7b8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2d7bc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2d7c0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2d7c4     02 00 00 FF 
2d7c8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2d7cc     1C 00 90 FD | 	jmp	#LR__4664
2d7d0                 | LR__4663
2d7d0     02 00 00 FF 
2d7d4     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2d7d8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2d7dc     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2d7e0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2d7e4     02 00 00 FF 
2d7e8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2d7ec                 | LR__4664
2d7ec     02 00 00 FF 
2d7f0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2d7f4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2d7f8     02 00 00 FF 
2d7fc     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2d800     20 00 90 AD |  if_e	jmp	#LR__4665
2d804     02 00 00 FF 
2d808     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2d80c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2d810     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2d814     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2d818     02 00 00 FF 
2d81c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2d820     1C 00 90 FD | 	jmp	#LR__4666
2d824                 | LR__4665
2d824     02 00 00 FF 
2d828     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2d82c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2d830     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2d834     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2d838     02 00 00 FF 
2d83c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2d840                 | LR__4666
2d840     08 03 02 FD | 	qmul	_var02, _var09
2d844                 | ' 		_tzname[1] = stdname;
2d844                 | ' 
2d844                 | '         return sgn * off;
2d844     18 FA 61 FD | 	getqx	result1
2d848                 | LR__4667
2d848                 | _fatfs_cc___tzoffset_ret
2d848     2D 00 64 FD | 	ret
2d84c                 | 
2d84c                 | _fatfs_cc___indst
2d84c     10 12 06 F1 | 	add	arg01, #16
2d850     09 01 02 FB | 	rdlong	_var01, arg01
2d854     10 12 86 F1 | 	sub	arg01, #16
2d858     02 00 0E F2 | 	cmp	_var01, #2 wz
2d85c     30 00 90 5D |  if_ne	jmp	#LR__4670
2d860     07 00 06 F6 | 	mov	_var01, #7
2d864     18 12 06 F1 | 	add	arg01, #24
2d868     09 03 02 FB | 	rdlong	_var02, arg01
2d86c     01 01 02 F1 | 	add	_var01, _var02
2d870     0C 12 86 F1 | 	sub	arg01, #12
2d874     09 05 02 FB | 	rdlong	_var03, arg01
2d878     02 01 82 F1 | 	sub	_var01, _var03
2d87c     00 00 56 F2 | 	cmps	_var01, #0 wc
2d880                 | '                         return 1;
2d880     01 FA 05 C6 |  if_b	mov	result1, #1
2d884     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2d888                 | '                 return 0;
2d888     00 FA 05 F6 | 	mov	result1, #0
2d88c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2d890                 | LR__4670
2d890     10 12 06 F1 | 	add	arg01, #16
2d894     09 01 02 FB | 	rdlong	_var01, arg01
2d898     10 12 86 F1 | 	sub	arg01, #16
2d89c     0A 00 0E F2 | 	cmp	_var01, #10 wz
2d8a0     28 00 90 5D |  if_ne	jmp	#LR__4671
2d8a4     18 12 06 F1 | 	add	arg01, #24
2d8a8     09 01 02 FB | 	rdlong	_var01, arg01
2d8ac     0C 12 86 F1 | 	sub	arg01, #12
2d8b0     09 07 02 FB | 	rdlong	_var04, arg01
2d8b4     03 01 82 F1 | 	sub	_var01, _var04
2d8b8     00 00 56 F2 | 	cmps	_var01, #0 wc
2d8bc                 | '                         return 0;
2d8bc     00 FA 05 C6 |  if_b	mov	result1, #0
2d8c0     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2d8c4                 | '                 return 1;
2d8c4     01 FA 05 F6 | 	mov	result1, #1
2d8c8     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2d8cc                 | LR__4671
2d8cc                 | '         }
2d8cc                 | ' 
2d8cc                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2d8cc     00 00 06 F6 | 	mov	_var01, #0
2d8d0     10 12 06 F1 | 	add	arg01, #16
2d8d4     09 03 02 FB | 	rdlong	_var02, arg01
2d8d8     10 12 86 F1 | 	sub	arg01, #16
2d8dc     03 02 56 F2 | 	cmps	_var02, #3 wc
2d8e0     10 00 90 CD |  if_b	jmp	#LR__4672
2d8e4     10 12 06 F1 | 	add	arg01, #16
2d8e8     09 05 02 FB | 	rdlong	_var03, arg01
2d8ec     0A 04 56 F2 | 	cmps	_var03, #10 wc
2d8f0     01 00 06 C6 |  if_b	mov	_var01, #1
2d8f4                 | LR__4672
2d8f4     00 FB 01 F6 | 	mov	result1, _var01
2d8f8                 | _fatfs_cc___indst_ret
2d8f8     2D 00 64 FD | 	ret
2d8fc                 | 
2d8fc                 | ' 	
2d8fc                 | ' 	FUNCTION pfunc(c as integer) as integer
2d8fc                 | ___strs_cl_pfunc
2d8fc                 | ' 		if (i < 16) then
2d8fc     04 E4 05 F1 | 	add	objptr, #4
2d900     F2 FA 01 FB | 	rdlong	result1, objptr
2d904     04 E4 85 F1 | 	sub	objptr, #4
2d908     10 FA 55 F2 | 	cmps	result1, #16 wc
2d90c     2C 00 90 3D |  if_ae	jmp	#LR__4680
2d910     F2 FA 01 FB | 	rdlong	result1, objptr
2d914     04 E4 05 F1 | 	add	objptr, #4
2d918     F2 00 02 FB | 	rdlong	_var01, objptr
2d91c     FD 00 02 F1 | 	add	_var01, result1
2d920     00 13 42 FC | 	wrbyte	arg01, _var01
2d924     F2 FA 01 FB | 	rdlong	result1, objptr
2d928     01 FA 05 F1 | 	add	result1, #1
2d92c     F2 FA 61 FC | 	wrlong	result1, objptr
2d930     04 E4 85 F1 | 	sub	objptr, #4
2d934                 | ' 			p(i) = c
2d934                 | ' 			i = i+1
2d934                 | ' 			return 1
2d934     01 FA 05 F6 | 	mov	result1, #1
2d938     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2d93c                 | LR__4680
2d93c                 | ' 			return -1
2d93c     01 FA 65 F6 | 	neg	result1, #1
2d940                 | ___strs_cl_pfunc_ret
2d940     2D 00 64 FD | 	ret
2d944                 | 
2d944                 | __struct__s_vfs_file_t_putchar
2d944     04 4A 05 F6 | 	mov	COUNT_, #4
2d948     A8 00 A0 FD | 	call	#pushregs_
2d94c     1C E4 05 F1 | 	add	objptr, #28
2d950     F2 1E 0A FB | 	rdlong	local01, objptr wz
2d954     1C E4 85 F1 | 	sub	objptr, #28
2d958     00 FA 05 A6 |  if_e	mov	result1, #0
2d95c     48 00 90 AD |  if_e	jmp	#LR__4690
2d960     1C E4 05 F1 | 	add	objptr, #28
2d964     F2 20 02 FB | 	rdlong	local02, objptr
2d968     10 23 02 F6 | 	mov	local03, local02
2d96c     1C E4 85 F1 | 	sub	objptr, #28
2d970     13 22 46 F7 | 	zerox	local03, #19
2d974     14 20 46 F0 | 	shr	local02, #20
2d978     02 20 66 F0 | 	shl	local02, #2
2d97c     ED 20 02 F1 | 	add	local02, __methods__
2d980     10 21 02 FB | 	rdlong	local02, local02
2d984     F2 14 02 F6 | 	mov	arg02, objptr
2d988     F2 24 02 F6 | 	mov	local04, objptr
2d98c     11 E5 01 F6 | 	mov	objptr, local03
2d990     2D 20 62 FD | 	call	local02
2d994     12 E5 01 F6 | 	mov	objptr, local04
2d998                 | '     return (i < 0) ? 0 : 1;
2d998     00 FA 55 F2 | 	cmps	result1, #0 wc
2d99c     00 1E 06 C6 |  if_b	mov	local01, #0
2d9a0     01 1E 06 36 |  if_ae	mov	local01, #1
2d9a4     0F FB 01 F6 | 	mov	result1, local01
2d9a8                 | LR__4690
2d9a8     A7 F0 03 F6 | 	mov	ptra, fp
2d9ac     B2 00 A0 FD | 	call	#popregs_
2d9b0                 | __struct__s_vfs_file_t_putchar_ret
2d9b0     2D 00 64 FD | 	ret
2d9b4                 | 
2d9b4                 | __struct__s_vfs_file_t_getchar
2d9b4     03 4A 05 F6 | 	mov	COUNT_, #3
2d9b8     A8 00 A0 FD | 	call	#pushregs_
2d9bc     20 E4 05 F1 | 	add	objptr, #32
2d9c0     F2 12 0A FB | 	rdlong	arg01, objptr wz
2d9c4     20 E4 85 F1 | 	sub	objptr, #32
2d9c8     01 FA 65 A6 |  if_e	neg	result1, #1
2d9cc     38 00 90 AD |  if_e	jmp	#LR__4700
2d9d0                 | '     return getcf(__this);
2d9d0     20 E4 05 F1 | 	add	objptr, #32
2d9d4     F2 1E 02 FB | 	rdlong	local01, objptr
2d9d8     0F 21 02 F6 | 	mov	local02, local01
2d9dc     20 E4 85 F1 | 	sub	objptr, #32
2d9e0     13 20 46 F7 | 	zerox	local02, #19
2d9e4     14 1E 46 F0 | 	shr	local01, #20
2d9e8     02 1E 66 F0 | 	shl	local01, #2
2d9ec     ED 1E 02 F1 | 	add	local01, __methods__
2d9f0     0F 1F 02 FB | 	rdlong	local01, local01
2d9f4     F2 12 02 F6 | 	mov	arg01, objptr
2d9f8     F2 22 02 F6 | 	mov	local03, objptr
2d9fc     10 E5 01 F6 | 	mov	objptr, local02
2da00     2D 1E 62 FD | 	call	local01
2da04     11 E5 01 F6 | 	mov	objptr, local03
2da08                 | LR__4700
2da08     A7 F0 03 F6 | 	mov	ptra, fp
2da0c     B2 00 A0 FD | 	call	#popregs_
2da10                 | __struct__s_vfs_file_t_getchar_ret
2da10     2D 00 64 FD | 	ret
2da14                 | 
2da14                 | __struct___bas_wrap_sender_tx
2da14     03 4A 05 F6 | 	mov	COUNT_, #3
2da18     A8 00 A0 FD | 	call	#pushregs_
2da1c     F2 1E 02 FB | 	rdlong	local01, objptr
2da20     0F 21 02 F6 | 	mov	local02, local01
2da24     13 1E 46 F7 | 	zerox	local01, #19
2da28     14 20 46 F0 | 	shr	local02, #20
2da2c     02 20 66 F0 | 	shl	local02, #2
2da30     ED 20 02 F1 | 	add	local02, __methods__
2da34     10 21 02 FB | 	rdlong	local02, local02
2da38     F2 22 02 F6 | 	mov	local03, objptr
2da3c     0F E5 01 F6 | 	mov	objptr, local01
2da40     2D 20 62 FD | 	call	local02
2da44     11 E5 01 F6 | 	mov	objptr, local03
2da48     01 FA 05 F6 | 	mov	result1, #1
2da4c     A7 F0 03 F6 | 	mov	ptra, fp
2da50     B2 00 A0 FD | 	call	#popregs_
2da54                 | __struct___bas_wrap_sender_tx_ret
2da54     2D 00 64 FD | 	ret
2da58                 | 
2da58                 | __struct___bas_wrap_sender_rx
2da58     03 4A 05 F6 | 	mov	COUNT_, #3
2da5c     A8 00 A0 FD | 	call	#pushregs_
2da60     04 E4 05 F1 | 	add	objptr, #4
2da64     F2 1E 02 FB | 	rdlong	local01, objptr
2da68     0F 21 02 F6 | 	mov	local02, local01
2da6c     04 E4 85 F1 | 	sub	objptr, #4
2da70     13 20 46 F7 | 	zerox	local02, #19
2da74     14 1E 46 F0 | 	shr	local01, #20
2da78     02 1E 66 F0 | 	shl	local01, #2
2da7c     ED 1E 02 F1 | 	add	local01, __methods__
2da80     0F 1F 02 FB | 	rdlong	local01, local01
2da84     F2 22 02 F6 | 	mov	local03, objptr
2da88     10 E5 01 F6 | 	mov	objptr, local02
2da8c     2D 1E 62 FD | 	call	local01
2da90     11 E5 01 F6 | 	mov	objptr, local03
2da94     A7 F0 03 F6 | 	mov	ptra, fp
2da98     B2 00 A0 FD | 	call	#popregs_
2da9c                 | __struct___bas_wrap_sender_rx_ret
2da9c     2D 00 64 FD | 	ret
2daa0                 | 
2daa0                 | __struct___bas_wrap_sender_close
2daa0     03 4A 05 F6 | 	mov	COUNT_, #3
2daa4     A8 00 A0 FD | 	call	#pushregs_
2daa8     08 E4 05 F1 | 	add	objptr, #8
2daac     F2 1E 02 FB | 	rdlong	local01, objptr
2dab0     0F 21 02 F6 | 	mov	local02, local01
2dab4     08 E4 85 F1 | 	sub	objptr, #8
2dab8     13 20 46 F7 | 	zerox	local02, #19
2dabc     14 1E 46 F0 | 	shr	local01, #20
2dac0     02 1E 66 F0 | 	shl	local01, #2
2dac4     ED 1E 02 F1 | 	add	local01, __methods__
2dac8     0F 1F 02 FB | 	rdlong	local01, local01
2dacc     F2 22 02 F6 | 	mov	local03, objptr
2dad0     10 E5 01 F6 | 	mov	objptr, local02
2dad4     2D 1E 62 FD | 	call	local01
2dad8     11 E5 01 F6 | 	mov	objptr, local03
2dadc     A7 F0 03 F6 | 	mov	ptra, fp
2dae0     B2 00 A0 FD | 	call	#popregs_
2dae4                 | __struct___bas_wrap_sender_close_ret
2dae4     2D 00 64 FD | 	ret
2dae8                 | 
2dae8                 | LR__4710
2dae8     2F          | 	byte	"/"
2dae9     00          | 	byte	0
2daea                 | LR__4711
2daea     69 6E 66    | 	byte	"inf"
2daed     00          | 	byte	0
2daee                 | LR__4712
2daee     6E 61 6E    | 	byte	"nan"
2daf1     00          | 	byte	0
2daf2                 | LR__4713
2daf2                 | 	byte	
2daf2     00          | 	byte	0
2daf3                 | LR__4714
2daf3                 | 	byte	
2daf3     00          | 	byte	0
2daf4                 | LR__4715
2daf4                 | 	byte	
2daf4     00          | 	byte	0
2daf5                 | LR__4716
2daf5                 | 	byte	
2daf5     00          | 	byte	0
2daf6                 | LR__4717
2daf6                 | 	byte	
2daf6     00          | 	byte	0
2daf7                 | LR__4718
2daf7                 | 	byte	
2daf7     00          | 	byte	0
2daf8                 | LR__4719
2daf8                 | 	byte	
2daf8     00          | 	byte	0
2daf9                 | LR__4720
2daf9                 | 	byte	
2daf9     00          | 	byte	0
2dafa                 | LR__4721
2dafa     00          | 	byte	0
2dafb     00          | 	byte	0
2dafc                 | LR__4722
2dafc     00          | 	byte	0
2dafd     00          | 	byte	0
2dafe                 | LR__4723
2dafe     00          | 	byte	0
2daff     00          | 	byte	0
2db00                 | LR__4724
2db00     20 21 21 21 
2db04     20 63 6F 72 
2db08     72 75 70 74 
2db0c     65 64 20 68 
2db10     65 61 70 3F 
2db14     3F 3F 20 21 
2db18     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2db1b     00          | 	byte	0
2db1c                 | LR__4725
2db1c     20 21 21 21 
2db20     20 6F 75 74 
2db24     20 6F 66 20 
2db28     68 65 61 70 
2db2c     20 6D 65 6D 
2db30     6F 72 79 20 
2db34     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2db38     00          | 	byte	0
2db39                 | LR__4726
2db39     20 21 21 21 
2db3d     20 63 6F 72 
2db41     72 75 70 74 
2db45     65 64 20 68 
2db49     65 61 70 20 
2db4d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2db51     00          | 	byte	0
2db52                 | LR__4727
2db52     00          | 	byte	0
2db53     00          | 	byte	0
2db54                 | LR__4728
2db54     2E          | 	byte	"."
2db55     00          | 	byte	0
2db56                 | LR__4729
2db56     00          | 	byte	0
2db57     00          | 	byte	0
2db58                 | LR__4730
2db58     00          | 	byte	0
2db59     00          | 	byte	0
2db5a                 | LR__4731
2db5a     00          | 	byte	0
2db5b     00          | 	byte	0
2db5c                 | LR__4732
2db5c     2A 3A 3C 3E 
2db60     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2db64     00          | 	byte	0
2db65                 | LR__4733
2db65     2B 2C 3B 3D 
2db69     5B 5D       | 	byte	"+,;=[]"
2db6b     00          | 	byte	0
2db6c                 | LR__4734
2db6c     46 41 54 33 
2db70     32 20 20 20 | 	byte	"FAT32   "
2db74     00          | 	byte	0
2db75                 | LR__4735
2db75     54 5A       | 	byte	"TZ"
2db77     00          | 	byte	0
2db78                 | LR__4736
2db78     00          | 	byte	0
2db79     00          | 	byte	0
2db7a                 | LR__4737
2db7a                 | 	byte	
2db7a     00          | 	byte	0
2db7b                 | LR__4738
2db7b                 | 	byte	
2db7b     00          | 	byte	0
2db7c                 | LR__4739
2db7c     22          | 	byte	34
2db7d     00          | 	byte	0
2db7e                 | LR__4740
2db7e     22          | 	byte	34
2db7f     00          | 	byte	0
2db80                 | LR__4741
2db80     3A          | 	byte	":"
2db81     00          | 	byte	0
2db82                 | LR__4742
2db82                 | 	byte	
2db82     00          | 	byte	0
2db83                 | LR__4743
2db83                 | 	byte	
2db83     00          | 	byte	0
2db84                 | LR__4744
2db84                 | 	byte	
2db84     00          | 	byte	0
2db85                 | LR__4745
2db85                 | 	byte	
2db85     00          | 	byte	0
2db86                 | LR__4746
2db86                 | 	byte	
2db86     00          | 	byte	0
2db87                 | LR__4747
2db87                 | 	byte	
2db87     00          | 	byte	0
2db88                 | LR__4748
2db88                 | 	byte	
2db88     00          | 	byte	0
2db89                 | LR__4749
2db89     22          | 	byte	34
2db8a     00          | 	byte	0
2db8b                 | LR__4750
2db8b     22          | 	byte	34
2db8c     00          | 	byte	0
2db8d                 | LR__4751
2db8d     22          | 	byte	34
2db8e     00          | 	byte	0
2db8f                 | LR__4752
2db8f     22          | 	byte	34
2db90     00          | 	byte	0
2db91                 | LR__4753
2db91     22          | 	byte	34
2db92     00          | 	byte	0
2db93                 | LR__4754
2db93     3E          | 	byte	">"
2db94     00          | 	byte	0
2db95                 | LR__4755
2db95     3C          | 	byte	"<"
2db96     00          | 	byte	0
2db97                 | LR__4756
2db97     2B          | 	byte	"+"
2db98     00          | 	byte	0
2db99                 | LR__4757
2db99     2D          | 	byte	"-"
2db9a     00          | 	byte	0
2db9b                 | LR__4758
2db9b     2A          | 	byte	"*"
2db9c     00          | 	byte	0
2db9d                 | LR__4759
2db9d     2F          | 	byte	"/"
2db9e     00          | 	byte	0
2db9f                 | LR__4760
2db9f     5E          | 	byte	"^"
2dba0     00          | 	byte	0
2dba1                 | LR__4761
2dba1     3D          | 	byte	"="
2dba2     00          | 	byte	0
2dba3                 | LR__4762
2dba3     2B          | 	byte	"+"
2dba4     00          | 	byte	0
2dba5                 | LR__4763
2dba5     2B          | 	byte	"+"
2dba6     00          | 	byte	0
2dba7                 | LR__4764
2dba7     2D          | 	byte	"-"
2dba8     00          | 	byte	0
2dba9                 | LR__4765
2dba9     2D          | 	byte	"-"
2dbaa     00          | 	byte	0
2dbab                 | LR__4766
2dbab     3C          | 	byte	"<"
2dbac     00          | 	byte	0
2dbad                 | LR__4767
2dbad     3E          | 	byte	">"
2dbae     00          | 	byte	0
2dbaf                 | LR__4768
2dbaf     22          | 	byte	34
2dbb0     00          | 	byte	0
2dbb1                 | LR__4769
2dbb1     22          | 	byte	34
2dbb2     00          | 	byte	0
2dbb3                 | LR__4770
2dbb3     2E          | 	byte	"."
2dbb4     00          | 	byte	0
2dbb5                 | LR__4771
2dbb5     3F          | 	byte	"?"
2dbb6     00          | 	byte	0
2dbb7                 | LR__4772
2dbb7     3F          | 	byte	"?"
2dbb8     00          | 	byte	0
2dbb9                 | LR__4773
2dbb9     6D 6F 75 73 
2dbbd     65          | 	byte	"mouse"
2dbbe     00          | 	byte	0
2dbbf                 | LR__4774
2dbbf     63 75 72 73 
2dbc3     6F 72       | 	byte	"cursor"
2dbc5     00          | 	byte	0
2dbc6                 | LR__4775
2dbc6     63 6C 69 63 
2dbca     6B          | 	byte	"click"
2dbcb     00          | 	byte	0
2dbcc                 | LR__4776
2dbcc     6F 6E       | 	byte	"on"
2dbce     00          | 	byte	0
2dbcf                 | LR__4777
2dbcf     31          | 	byte	"1"
2dbd0     00          | 	byte	0
2dbd1                 | LR__4778
2dbd1     6F 66 66    | 	byte	"off"
2dbd4     00          | 	byte	0
2dbd5                 | LR__4779
2dbd5     30          | 	byte	"0"
2dbd6     00          | 	byte	0
2dbd7                 | LR__4780
2dbd7     6D 6F 64 65 | 	byte	"mode"
2dbdb     00          | 	byte	0
2dbdc                 | LR__4781
2dbdc     6D 2E       | 	byte	"m."
2dbde     00          | 	byte	0
2dbdf                 | LR__4782
2dbdf     61 74 61 72 
2dbe3     69          | 	byte	"atari"
2dbe4     00          | 	byte	0
2dbe5                 | LR__4783
2dbe5     30          | 	byte	"0"
2dbe6     00          | 	byte	0
2dbe7                 | LR__4784
2dbe7     70 63 5F 61 
2dbeb     6D 62 65 72 | 	byte	"pc_amber"
2dbef     00          | 	byte	0
2dbf0                 | LR__4785
2dbf0     31          | 	byte	"1"
2dbf1     00          | 	byte	0
2dbf2                 | LR__4786
2dbf2     70 63 5F 67 
2dbf6     72 65 65 6E | 	byte	"pc_green"
2dbfa     00          | 	byte	0
2dbfb                 | LR__4787
2dbfb     32          | 	byte	"2"
2dbfc     00          | 	byte	0
2dbfd                 | LR__4788
2dbfd     70 63 5F 77 
2dc01     68 69 74 65 | 	byte	"pc_white"
2dc05     00          | 	byte	0
2dc06                 | LR__4789
2dc06     33          | 	byte	"3"
2dc07     00          | 	byte	0
2dc08                 | LR__4790
2dc08     73 74       | 	byte	"st"
2dc0a     00          | 	byte	0
2dc0b                 | LR__4791
2dc0b     34          | 	byte	"4"
2dc0c     00          | 	byte	0
2dc0d                 | LR__4792
2dc0d                 | 	byte	
2dc0d     00          | 	byte	0
2dc0e                 | LR__4793
2dc0e     6C 6F 61 64 | 	byte	"load"
2dc12     00          | 	byte	0
2dc13                 | LR__4794
2dc13     73 61 76 65 | 	byte	"save"
2dc17     00          | 	byte	0
2dc18                 | LR__4795
2dc18     62 72 75 6E | 	byte	"brun"
2dc1c     00          | 	byte	0
2dc1d                 | LR__4796
2dc1d     72 75 6E    | 	byte	"run"
2dc20     00          | 	byte	0
2dc21                 | LR__4797
2dc21     6C 6F 2E    | 	byte	"lo."
2dc24     00          | 	byte	0
2dc25                 | LR__4798
2dc25     73 2E       | 	byte	"s."
2dc27     00          | 	byte	0
2dc28                 | LR__4799
2dc28     62 72 2E    | 	byte	"br."
2dc2b     00          | 	byte	0
2dc2c                 | LR__4800
2dc2c                 | 	byte	
2dc2c     00          | 	byte	0
2dc2d                 | LR__4801
2dc2d                 | 	byte	
2dc2d     00          | 	byte	0
2dc2e                 | LR__4802
2dc2e                 | 	byte	
2dc2e     00          | 	byte	0
2dc2f                 | LR__4803
2dc2f                 | 	byte	
2dc2f     00          | 	byte	0
2dc30                 | LR__4804
2dc30     20 55 73 65 
2dc34     72 20 66 75 
2dc38     6E 63 74 69 
2dc3c     6F 6E 73 20 
2dc40     61 6E 64 20 
2dc44     61 72 72 61 
2dc48     79 73 20 6E 
2dc4c     6F 74 20 79 
2dc50     65 74 20 69 
2dc54     6D 70 6C 65 
2dc58     6D 65 6E 74 
2dc5c     65 64       | 	byte	" User functions and arrays not yet implemented"
2dc5e     00          | 	byte	0
2dc5f                 | LR__4805
2dc5f                 | 	byte	
2dc5f     00          | 	byte	0
2dc60                 | LR__4806
2dc60                 | 	byte	
2dc60     00          | 	byte	0
2dc61                 | LR__4807
2dc61     52 65 61 64 
2dc65     79          | 	byte	"Ready"
2dc66     00          | 	byte	0
2dc67                 | LR__4808
2dc67     2B          | 	byte	"+"
2dc68     00          | 	byte	0
2dc69                 | LR__4809
2dc69     2D          | 	byte	"-"
2dc6a     00          | 	byte	0
2dc6b                 | LR__4810
2dc6b     6F 72       | 	byte	"or"
2dc6d     00          | 	byte	0
2dc6e                 | LR__4811
2dc6e     78 6F 72    | 	byte	"xor"
2dc71     00          | 	byte	0
2dc72                 | LR__4812
2dc72     2A          | 	byte	"*"
2dc73     00          | 	byte	0
2dc74                 | LR__4813
2dc74     2F          | 	byte	"/"
2dc75     00          | 	byte	0
2dc76                 | LR__4814
2dc76     61 6E 64    | 	byte	"and"
2dc79     00          | 	byte	0
2dc7a                 | LR__4815
2dc7a     64 69 76    | 	byte	"div"
2dc7d     00          | 	byte	0
2dc7e                 | LR__4816
2dc7e     6D 6F 64    | 	byte	"mod"
2dc81     00          | 	byte	0
2dc82                 | LR__4817
2dc82     73 68 6C    | 	byte	"shl"
2dc85     00          | 	byte	0
2dc86                 | LR__4818
2dc86     73 68 72    | 	byte	"shr"
2dc89     00          | 	byte	0
2dc8a                 | LR__4819
2dc8a     5E          | 	byte	"^"
2dc8b     00          | 	byte	0
2dc8c                 | LR__4820
2dc8c     6E 6F 74    | 	byte	"not"
2dc8f     00          | 	byte	0
2dc90                 | LR__4821
2dc90     40          | 	byte	"@"
2dc91     00          | 	byte	0
2dc92                 | LR__4822
2dc92     3D          | 	byte	"="
2dc93     00          | 	byte	0
2dc94                 | LR__4823
2dc94     3E 3D       | 	byte	">="
2dc96     00          | 	byte	0
2dc97                 | LR__4824
2dc97     3C 3D       | 	byte	"<="
2dc99     00          | 	byte	0
2dc9a                 | LR__4825
2dc9a     3C          | 	byte	"<"
2dc9b     00          | 	byte	0
2dc9c                 | LR__4826
2dc9c     3E          | 	byte	">"
2dc9d     00          | 	byte	0
2dc9e                 | LR__4827
2dc9e     3C 3E       | 	byte	"<>"
2dca0     00          | 	byte	0
2dca1                 | LR__4828
2dca1     2B 2B       | 	byte	"++"
2dca3     00          | 	byte	0
2dca4                 | LR__4829
2dca4     2D 2D       | 	byte	"--"
2dca6     00          | 	byte	0
2dca7                 | LR__4830
2dca7     23          | 	byte	"#"
2dca8     00          | 	byte	0
2dca9                 | LR__4831
2dca9     23          | 	byte	"#"
2dcaa     00          | 	byte	0
2dcab                 | LR__4832
2dcab     2D          | 	byte	"-"
2dcac     00          | 	byte	0
2dcad                 | LR__4833
2dcad     30          | 	byte	"0"
2dcae     00          | 	byte	0
2dcaf                 | LR__4834
2dcaf     63          | 	byte	"c"
2dcb0     00          | 	byte	0
2dcb1                 | LR__4835
2dcb1     63 23       | 	byte	"c#"
2dcb3     00          | 	byte	0
2dcb4                 | LR__4836
2dcb4     64          | 	byte	"d"
2dcb5     00          | 	byte	0
2dcb6                 | LR__4837
2dcb6     64 23       | 	byte	"d#"
2dcb8     00          | 	byte	0
2dcb9                 | LR__4838
2dcb9     65          | 	byte	"e"
2dcba     00          | 	byte	0
2dcbb                 | LR__4839
2dcbb     66          | 	byte	"f"
2dcbc     00          | 	byte	0
2dcbd                 | LR__4840
2dcbd     66 23       | 	byte	"f#"
2dcbf     00          | 	byte	0
2dcc0                 | LR__4841
2dcc0     67          | 	byte	"g"
2dcc1     00          | 	byte	0
2dcc2                 | LR__4842
2dcc2     67 23       | 	byte	"g#"
2dcc4     00          | 	byte	0
2dcc5                 | LR__4843
2dcc5     61          | 	byte	"a"
2dcc6     00          | 	byte	0
2dcc7                 | LR__4844
2dcc7     61 23       | 	byte	"a#"
2dcc9     00          | 	byte	0
2dcca                 | LR__4845
2dcca     68          | 	byte	"h"
2dccb     00          | 	byte	0
2dccc                 | LR__4846
2dccc     62          | 	byte	"b"
2dccd     00          | 	byte	0
2dcce                 | LR__4847
2dcce     2B          | 	byte	"+"
2dccf     00          | 	byte	0
2dcd0                 | LR__4848
2dcd0     2D          | 	byte	"-"
2dcd1     00          | 	byte	0
2dcd2                 | LR__4849
2dcd2     3D          | 	byte	"="
2dcd3     00          | 	byte	0
2dcd4                 | LR__4850
2dcd4     2C          | 	byte	","
2dcd5     00          | 	byte	0
2dcd6                 | LR__4851
2dcd6     2A          | 	byte	"*"
2dcd7     00          | 	byte	0
2dcd8                 | LR__4852
2dcd8     2F          | 	byte	"/"
2dcd9     00          | 	byte	0
2dcda                 | LR__4853
2dcda     3B          | 	byte	";"
2dcdb     00          | 	byte	0
2dcdc                 | LR__4854
2dcdc     22          | 	byte	34
2dcdd     00          | 	byte	0
2dcde                 | LR__4855
2dcde     5E          | 	byte	"^"
2dcdf     00          | 	byte	0
2dce0                 | LR__4856
2dce0     29          | 	byte	")"
2dce1     00          | 	byte	0
2dce2                 | LR__4857
2dce2     28          | 	byte	"("
2dce3     00          | 	byte	0
2dce4                 | LR__4858
2dce4     3A          | 	byte	":"
2dce5     00          | 	byte	0
2dce6                 | LR__4859
2dce6     20          | 	byte	" "
2dce7     00          | 	byte	0
2dce8                 | LR__4860
2dce8     3E          | 	byte	">"
2dce9     00          | 	byte	0
2dcea                 | LR__4861
2dcea     3C          | 	byte	"<"
2dceb     00          | 	byte	0
2dcec                 | LR__4862
2dcec     3D          | 	byte	"="
2dced     00          | 	byte	0
2dcee                 | LR__4863
2dcee     62 65 65 70 | 	byte	"beep"
2dcf2     00          | 	byte	0
2dcf3                 | LR__4864
2dcf3     62 2E       | 	byte	"b."
2dcf5     00          | 	byte	0
2dcf6                 | LR__4865
2dcf6     62 6F 78    | 	byte	"box"
2dcf9     00          | 	byte	0
2dcfa                 | LR__4866
2dcfa     62 72 75 6E | 	byte	"brun"
2dcfe     00          | 	byte	0
2dcff                 | LR__4867
2dcff     62 72 2E    | 	byte	"br."
2dd02     00          | 	byte	0
2dd03                 | LR__4868
2dd03     63 69 72 63 
2dd07     6C 65       | 	byte	"circle"
2dd09     00          | 	byte	0
2dd0a                 | LR__4869
2dd0a     63 69 2E    | 	byte	"ci."
2dd0d     00          | 	byte	0
2dd0e                 | LR__4870
2dd0e     63 6C 69 63 
2dd12     6B          | 	byte	"click"
2dd13     00          | 	byte	0
2dd14                 | LR__4871
2dd14     63 6C 73    | 	byte	"cls"
2dd17     00          | 	byte	0
2dd18                 | LR__4872
2dd18     63 6F 6C 6F 
2dd1c     72          | 	byte	"color"
2dd1d     00          | 	byte	0
2dd1e                 | LR__4873
2dd1e     63 2E       | 	byte	"c."
2dd20     00          | 	byte	0
2dd21                 | LR__4874
2dd21     63 73 61 76 
2dd25     65          | 	byte	"csave"
2dd26     00          | 	byte	0
2dd27                 | LR__4875
2dd27     63 73 2E    | 	byte	"cs."
2dd2a     00          | 	byte	0
2dd2b                 | LR__4876
2dd2b     63 75 72 73 
2dd2f     6F 72       | 	byte	"cursor"
2dd31     00          | 	byte	0
2dd32                 | LR__4877
2dd32     64 65 66 73 
2dd36     6E 64       | 	byte	"defsnd"
2dd38     00          | 	byte	0
2dd39                 | LR__4878
2dd39     64 65 66 65 
2dd3d     6E 76       | 	byte	"defenv"
2dd3f     00          | 	byte	0
2dd40                 | LR__4879
2dd40     64 65 66 73 
2dd44     70 72 69 74 
2dd48     65          | 	byte	"defsprite"
2dd49     00          | 	byte	0
2dd4a                 | LR__4880
2dd4a     64 73 2E    | 	byte	"ds."
2dd4d     00          | 	byte	0
2dd4e                 | LR__4881
2dd4e     64 65 67    | 	byte	"deg"
2dd51     00          | 	byte	0
2dd52                 | LR__4882
2dd52     64 69 6D    | 	byte	"dim"
2dd55     00          | 	byte	0
2dd56                 | LR__4883
2dd56     64 69 72    | 	byte	"dir"
2dd59     00          | 	byte	0
2dd5a                 | LR__4884
2dd5a     64 70 6F 6B 
2dd5e     65          | 	byte	"dpoke"
2dd5f     00          | 	byte	0
2dd60                 | LR__4885
2dd60     64 72 61 77 | 	byte	"draw"
2dd64     00          | 	byte	0
2dd65                 | LR__4886
2dd65     64 72 2E    | 	byte	"dr."
2dd68     00          | 	byte	0
2dd69                 | LR__4887
2dd69     65 6C 73 65 | 	byte	"else"
2dd6d     00          | 	byte	0
2dd6e                 | LR__4888
2dd6e     66 63 69 72 
2dd72     63 6C 65    | 	byte	"fcircle"
2dd75     00          | 	byte	0
2dd76                 | LR__4889
2dd76     66 63 2E    | 	byte	"fc."
2dd79     00          | 	byte	0
2dd7a                 | LR__4890
2dd7a     66 69 6C 6C | 	byte	"fill"
2dd7e     00          | 	byte	0
2dd7f                 | LR__4891
2dd7f     66 69 2E    | 	byte	"fi."
2dd82     00          | 	byte	0
2dd83                 | LR__4892
2dd83     66 6F 6E 74 | 	byte	"font"
2dd87     00          | 	byte	0
2dd88                 | LR__4893
2dd88     66 6F 72    | 	byte	"for"
2dd8b     00          | 	byte	0
2dd8c                 | LR__4894
2dd8c     66 2E       | 	byte	"f."
2dd8e     00          | 	byte	0
2dd8f                 | LR__4895
2dd8f     66 72 61 6D 
2dd93     65          | 	byte	"frame"
2dd94     00          | 	byte	0
2dd95                 | LR__4896
2dd95     66 72 2E    | 	byte	"fr."
2dd98     00          | 	byte	0
2dd99                 | LR__4897
2dd99     67 6F 74 6F | 	byte	"goto"
2dd9d     00          | 	byte	0
2dd9e                 | LR__4898
2dd9e     67 2E       | 	byte	"g."
2dda0     00          | 	byte	0
2dda1                 | LR__4899
2dda1     69 66       | 	byte	"if"
2dda3     00          | 	byte	0
2dda4                 | LR__4900
2dda4     69 6E 6B    | 	byte	"ink"
2dda7     00          | 	byte	0
2dda8                 | LR__4901
2dda8     69 2E       | 	byte	"i."
2ddaa     00          | 	byte	0
2ddab                 | LR__4902
2ddab     69 6E 74    | 	byte	"int"
2ddae     00          | 	byte	0
2ddaf                 | LR__4903
2ddaf     6C 69 73 74 | 	byte	"list"
2ddb3     00          | 	byte	0
2ddb4                 | LR__4904
2ddb4     6C 2E       | 	byte	"l."
2ddb6     00          | 	byte	0
2ddb7                 | LR__4905
2ddb7     6C 6F 61 64 | 	byte	"load"
2ddbb     00          | 	byte	0
2ddbc                 | LR__4906
2ddbc     6C 6F 2E    | 	byte	"lo."
2ddbf     00          | 	byte	0
2ddc0                 | LR__4907
2ddc0     6C 70 6F 6B 
2ddc4     65          | 	byte	"lpoke"
2ddc5     00          | 	byte	0
2ddc6                 | LR__4908
2ddc6     6D 6F 64 65 | 	byte	"mode"
2ddca     00          | 	byte	0
2ddcb                 | LR__4909
2ddcb     6D 2E       | 	byte	"m."
2ddcd     00          | 	byte	0
2ddce                 | LR__4910
2ddce     6D 6F 75 73 
2ddd2     65          | 	byte	"mouse"
2ddd3     00          | 	byte	0
2ddd4                 | LR__4911
2ddd4     6E 65 77    | 	byte	"new"
2ddd7     00          | 	byte	0
2ddd8                 | LR__4912
2ddd8     6E 65 78 74 | 	byte	"next"
2dddc     00          | 	byte	0
2dddd                 | LR__4913
2dddd     6E 2E       | 	byte	"n."
2dddf     00          | 	byte	0
2dde0                 | LR__4914
2dde0     70 61 70 65 
2dde4     72          | 	byte	"paper"
2dde5     00          | 	byte	0
2dde6                 | LR__4915
2dde6     70 2E       | 	byte	"p."
2dde8     00          | 	byte	0
2dde9                 | LR__4916
2dde9     70 69 6E 66 
2dded     6C 6F 61 74 | 	byte	"pinfloat"
2ddf1     00          | 	byte	0
2ddf2                 | LR__4917
2ddf2     70 69 6E 68 
2ddf6     69          | 	byte	"pinhi"
2ddf7     00          | 	byte	0
2ddf8                 | LR__4918
2ddf8     70 69 6E 6C 
2ddfc     6F          | 	byte	"pinlo"
2ddfd     00          | 	byte	0
2ddfe                 | LR__4919
2ddfe     70 69 6E 73 
2de02     74 61 72 74 | 	byte	"pinstart"
2de06     00          | 	byte	0
2de07                 | LR__4920
2de07     70 69 6E 74 
2de0b     6F 67 67 6C 
2de0f     65          | 	byte	"pintoggle"
2de10     00          | 	byte	0
2de11                 | LR__4921
2de11     70 69 6E 77 
2de15     72 69 74 65 | 	byte	"pinwrite"
2de19     00          | 	byte	0
2de1a                 | LR__4922
2de1a     70 6C 61 79 | 	byte	"play"
2de1e     00          | 	byte	0
2de1f                 | LR__4923
2de1f     70 6C 6F 74 | 	byte	"plot"
2de23     00          | 	byte	0
2de24                 | LR__4924
2de24     70 6C 2E    | 	byte	"pl."
2de27     00          | 	byte	0
2de28                 | LR__4925
2de28     70 6F 6B 65 | 	byte	"poke"
2de2c     00          | 	byte	0
2de2d                 | LR__4926
2de2d     70 6F 73 69 
2de31     74 69 6F 6E | 	byte	"position"
2de35     00          | 	byte	0
2de36                 | LR__4927
2de36     70 6F 73 2E | 	byte	"pos."
2de3a     00          | 	byte	0
2de3b                 | LR__4928
2de3b     70 72 69 6E 
2de3f     74          | 	byte	"print"
2de40     00          | 	byte	0
2de41                 | LR__4929
2de41     3F          | 	byte	"?"
2de42     00          | 	byte	0
2de43                 | LR__4930
2de43     72 61 64    | 	byte	"rad"
2de46     00          | 	byte	0
2de47                 | LR__4931
2de47     72 65 6C 65 
2de4b     61 73 65    | 	byte	"release"
2de4e     00          | 	byte	0
2de4f                 | LR__4932
2de4f     72 75 6E    | 	byte	"run"
2de52     00          | 	byte	0
2de53                 | LR__4933
2de53     73 61 76 65 | 	byte	"save"
2de57     00          | 	byte	0
2de58                 | LR__4934
2de58     73 2E       | 	byte	"s."
2de5a     00          | 	byte	0
2de5b                 | LR__4935
2de5b     73 65 74 64 
2de5f     65 6C 61 79 | 	byte	"setdelay"
2de63     00          | 	byte	0
2de64                 | LR__4936
2de64     73 65 74 65 
2de68     6E 76       | 	byte	"setenv"
2de6a     00          | 	byte	0
2de6b                 | LR__4937
2de6b     73 65 74 6C 
2de6f     65 6E       | 	byte	"setlen"
2de71     00          | 	byte	0
2de72                 | LR__4938
2de72     73 65 74 70 
2de76     61 6E       | 	byte	"setpan"
2de78     00          | 	byte	0
2de79                 | LR__4939
2de79     73 65 74 73 
2de7d     75 73 74 61 
2de81     69 6E       | 	byte	"setsustain"
2de83     00          | 	byte	0
2de84                 | LR__4940
2de84     73 65 74 76 
2de88     6F 6C       | 	byte	"setvol"
2de8a     00          | 	byte	0
2de8b                 | LR__4941
2de8b     73 65 74 77 
2de8f     61 76 65    | 	byte	"setwave"
2de92     00          | 	byte	0
2de93                 | LR__4942
2de93     73 6F 75 6E 
2de97     64          | 	byte	"sound"
2de98     00          | 	byte	0
2de99                 | LR__4943
2de99     73 6F 2E    | 	byte	"so."
2de9c     00          | 	byte	0
2de9d                 | LR__4944
2de9d     73 70 72 69 
2dea1     74 65       | 	byte	"sprite"
2dea3     00          | 	byte	0
2dea4                 | LR__4945
2dea4     73 70 2E    | 	byte	"sp."
2dea7     00          | 	byte	0
2dea8                 | LR__4946
2dea8     74 68 65 6E | 	byte	"then"
2deac     00          | 	byte	0
2dead                 | LR__4947
2dead     77 61 69 74 
2deb1     6D 73       | 	byte	"waitms"
2deb3     00          | 	byte	0
2deb4                 | LR__4948
2deb4     77 61 69 74 
2deb8     63 6C 6F 63 
2debc     6B          | 	byte	"waitclock"
2debd     00          | 	byte	0
2debe                 | LR__4949
2debe     77 63 2E    | 	byte	"wc."
2dec1     00          | 	byte	0
2dec2                 | LR__4950
2dec2     77 61 69 74 
2dec6     76 62 6C    | 	byte	"waitvbl"
2dec9     00          | 	byte	0
2deca                 | LR__4951
2deca     77 76 2E    | 	byte	"wv."
2decd     00          | 	byte	0
2dece                 | LR__4952
2dece     77 78 70 69 
2ded2     6E          | 	byte	"wxpin"
2ded3     00          | 	byte	0
2ded4                 | LR__4953
2ded4     77 79 70 69 
2ded8     6E          | 	byte	"wypin"
2ded9     00          | 	byte	0
2deda                 | LR__4954
2deda     61 62 73    | 	byte	"abs"
2dedd     00          | 	byte	0
2dede                 | LR__4955
2dede     61 63 6F 73 | 	byte	"acos"
2dee2     00          | 	byte	0
2dee3                 | LR__4956
2dee3     61 64 72    | 	byte	"adr"
2dee6     00          | 	byte	0
2dee7                 | LR__4957
2dee7     61 64 64 72 | 	byte	"addr"
2deeb     00          | 	byte	0
2deec                 | LR__4958
2deec     61 73 63    | 	byte	"asc"
2deef     00          | 	byte	0
2def0                 | LR__4959
2def0     61 73 69 6E | 	byte	"asin"
2def4     00          | 	byte	0
2def5                 | LR__4960
2def5     61 74 6E    | 	byte	"atn"
2def8     00          | 	byte	0
2def9                 | LR__4961
2def9     62 69 6E 24 | 	byte	"bin$"
2defd     00          | 	byte	0
2defe                 | LR__4962
2defe     63 68 72 24 | 	byte	"chr$"
2df02     00          | 	byte	0
2df03                 | LR__4963
2df03     63 6F 73    | 	byte	"cos"
2df06     00          | 	byte	0
2df07                 | LR__4964
2df07     64 70 65 65 
2df0b     6B          | 	byte	"dpeek"
2df0c     00          | 	byte	0
2df0d                 | LR__4965
2df0d     66 72 65    | 	byte	"fre"
2df10     00          | 	byte	0
2df11                 | LR__4966
2df11     67 65 74 70 
2df15     69 78 65 6C | 	byte	"getpixel"
2df19     00          | 	byte	0
2df1a                 | LR__4967
2df1a     67 65 2E    | 	byte	"ge."
2df1d     00          | 	byte	0
2df1e                 | LR__4968
2df1e     67 65 74 65 
2df22     6E 76 73 75 
2df26     73 74 61 69 
2df2a     6E          | 	byte	"getenvsustain"
2df2b     00          | 	byte	0
2df2c                 | LR__4969
2df2c     67 65 74 6E 
2df30     6F 74 65 76 
2df34     61 6C 75 65 | 	byte	"getnotevalue"
2df38     00          | 	byte	0
2df39                 | LR__4970
2df39     67 65 74 74 
2df3d     69 6D 65    | 	byte	"gettime"
2df40     00          | 	byte	0
2df41                 | LR__4971
2df41     68 65 78 24 | 	byte	"hex$"
2df45     00          | 	byte	0
2df46                 | LR__4972
2df46     69 6E 6B 65 
2df4a     79 24       | 	byte	"inkey$"
2df4c     00          | 	byte	0
2df4d                 | LR__4973
2df4d     6C 65 66 74 
2df51     24          | 	byte	"left$"
2df52     00          | 	byte	0
2df53                 | LR__4974
2df53     6C 65 6E    | 	byte	"len"
2df56     00          | 	byte	0
2df57                 | LR__4975
2df57     6C 70 65 65 
2df5b     6B          | 	byte	"lpeek"
2df5c     00          | 	byte	0
2df5d                 | LR__4976
2df5d     6D 69 64 24 | 	byte	"mid$"
2df61     00          | 	byte	0
2df62                 | LR__4977
2df62     6D 6F 75 73 
2df66     65 6B       | 	byte	"mousek"
2df68     00          | 	byte	0
2df69                 | LR__4978
2df69     6D 6F 75 73 
2df6d     65 77       | 	byte	"mousew"
2df6f     00          | 	byte	0
2df70                 | LR__4979
2df70     6D 6F 75 73 
2df74     65 78       | 	byte	"mousex"
2df76     00          | 	byte	0
2df77                 | LR__4980
2df77     6D 6F 75 73 
2df7b     65 79       | 	byte	"mousey"
2df7d     00          | 	byte	0
2df7e                 | LR__4981
2df7e     70 65 65 6B | 	byte	"peek"
2df82     00          | 	byte	0
2df83                 | LR__4982
2df83     70 69 6E 72 
2df87     65 61 64    | 	byte	"pinread"
2df8a     00          | 	byte	0
2df8b                 | LR__4983
2df8b     72 64 70 69 
2df8f     6E          | 	byte	"rdpin"
2df90     00          | 	byte	0
2df91                 | LR__4984
2df91     72 69 67 68 
2df95     74 24       | 	byte	"right$"
2df97     00          | 	byte	0
2df98                 | LR__4985
2df98     72 71 70 69 
2df9c     6E          | 	byte	"rqpin"
2df9d     00          | 	byte	0
2df9e                 | LR__4986
2df9e     72 6E 64    | 	byte	"rnd"
2dfa1     00          | 	byte	0
2dfa2                 | LR__4987
2dfa2     73 69 6E    | 	byte	"sin"
2dfa5     00          | 	byte	0
2dfa6                 | LR__4988
2dfa6     73 71 72    | 	byte	"sqr"
2dfa9     00          | 	byte	0
2dfaa                 | LR__4989
2dfaa     73 74 69 63 
2dfae     6B          | 	byte	"stick"
2dfaf     00          | 	byte	0
2dfb0                 | LR__4990
2dfb0     73 74 72 69 
2dfb4     67          | 	byte	"strig"
2dfb5     00          | 	byte	0
2dfb6                 | LR__4991
2dfb6     73 74 72 24 | 	byte	"str$"
2dfba     00          | 	byte	0
2dfbb                 | LR__4992
2dfbb     74 61 6E    | 	byte	"tan"
2dfbe     00          | 	byte	0
2dfbf                 | LR__4993
2dfbf     76 61 6C    | 	byte	"val"
2dfc2     00          | 	byte	0
2dfc3                 | LR__4994
2dfc3     76 61 72 70 
2dfc7     74 72       | 	byte	"varptr"
2dfc9     00          | 	byte	0
2dfca                 | LR__4995
2dfca     61          | 	byte	"a"
2dfcb     00          | 	byte	0
2dfcc                 | LR__4996
2dfcc     7A          | 	byte	"z"
2dfcd     00          | 	byte	0
2dfce                 | LR__4997
2dfce     5F          | 	byte	"_"
2dfcf     00          | 	byte	0
2dfd0                 | LR__4998
2dfd0     61          | 	byte	"a"
2dfd1     00          | 	byte	0
2dfd2                 | LR__4999
2dfd2     7A          | 	byte	"z"
2dfd3     00          | 	byte	0
2dfd4                 | LR__5000
2dfd4     30          | 	byte	"0"
2dfd5     00          | 	byte	0
2dfd6                 | LR__5001
2dfd6     39          | 	byte	"9"
2dfd7     00          | 	byte	0
2dfd8                 | LR__5002
2dfd8     5F          | 	byte	"_"
2dfd9     00          | 	byte	0
2dfda                 | LR__5003
2dfda     2E          | 	byte	"."
2dfdb     00          | 	byte	0
2dfdc                 | LR__5004
2dfdc     61          | 	byte	"a"
2dfdd     00          | 	byte	0
2dfde                 | LR__5005
2dfde     7A          | 	byte	"z"
2dfdf     00          | 	byte	0
2dfe0                 | LR__5006
2dfe0     30          | 	byte	"0"
2dfe1     00          | 	byte	0
2dfe2                 | LR__5007
2dfe2     39          | 	byte	"9"
2dfe3     00          | 	byte	0
2dfe4                 | LR__5008
2dfe4     5F          | 	byte	"_"
2dfe5     00          | 	byte	0
2dfe6                 | LR__5009
2dfe6     24          | 	byte	"$"
2dfe7     00          | 	byte	0
2dfe8                 | LR__5010
2dfe8     25          | 	byte	"%"
2dfe9     00          | 	byte	0
2dfea                 | LR__5011
2dfea     21          | 	byte	"!"
2dfeb     00          | 	byte	0
2dfec                 | LR__5012
2dfec     30          | 	byte	"0"
2dfed     00          | 	byte	0
2dfee                 | LR__5013
2dfee     39          | 	byte	"9"
2dfef     00          | 	byte	0
2dff0                 | LR__5014
2dff0     2E          | 	byte	"."
2dff1     00          | 	byte	0
2dff2                 | LR__5015
2dff2     24          | 	byte	"$"
2dff3     00          | 	byte	0
2dff4                 | LR__5016
2dff4     25          | 	byte	"%"
2dff5     00          | 	byte	0
2dff6                 | LR__5017
2dff6     2D          | 	byte	"-"
2dff7     00          | 	byte	0
2dff8                 | LR__5018
2dff8     2E          | 	byte	"."
2dff9     00          | 	byte	0
2dffa                 | LR__5019
2dffa     30          | 	byte	"0"
2dffb     00          | 	byte	0
2dffc                 | LR__5020
2dffc     39          | 	byte	"9"
2dffd     00          | 	byte	0
2dffe                 | LR__5021
2dffe     5F          | 	byte	"_"
2dfff     00          | 	byte	0
2e000                 | LR__5022
2e000     2E          | 	byte	"."
2e001     00          | 	byte	0
2e002                 | LR__5023
2e002     45          | 	byte	"E"
2e003     00          | 	byte	0
2e004                 | LR__5024
2e004     65          | 	byte	"e"
2e005     00          | 	byte	0
2e006                 | LR__5025
2e006     2D          | 	byte	"-"
2e007     00          | 	byte	0
2e008                 | LR__5026
2e008     2D          | 	byte	"-"
2e009     00          | 	byte	0
2e00a                 | LR__5027
2e00a     65          | 	byte	"e"
2e00b     00          | 	byte	0
2e00c                 | LR__5028
2e00c     2E          | 	byte	"."
2e00d     00          | 	byte	0
2e00e                 | LR__5029
2e00e     45          | 	byte	"E"
2e00f     00          | 	byte	0
2e010                 | LR__5030
2e010     65          | 	byte	"e"
2e011     00          | 	byte	0
2e012                 | LR__5031
2e012     30          | 	byte	"0"
2e013     00          | 	byte	0
2e014                 | LR__5032
2e014     39          | 	byte	"9"
2e015     00          | 	byte	0
2e016                 | LR__5033
2e016     24          | 	byte	"$"
2e017     00          | 	byte	0
2e018                 | LR__5034
2e018     25          | 	byte	"%"
2e019     00          | 	byte	0
2e01a                 | LR__5035
2e01a     2D          | 	byte	"-"
2e01b     00          | 	byte	0
2e01c                 | LR__5036
2e01c     30          | 	byte	"0"
2e01d     00          | 	byte	0
2e01e                 | LR__5037
2e01e     39          | 	byte	"9"
2e01f     00          | 	byte	0
2e020                 | LR__5038
2e020     5F          | 	byte	"_"
2e021     00          | 	byte	0
2e022                 | LR__5039
2e022     30          | 	byte	"0"
2e023     00          | 	byte	0
2e024                 | LR__5040
2e024     39          | 	byte	"9"
2e025     00          | 	byte	0
2e026                 | LR__5041
2e026     5F          | 	byte	"_"
2e027     00          | 	byte	0
2e028                 | LR__5042
2e028     22          | 	byte	34
2e029     00          | 	byte	0
2e02a                 | LR__5043
2e02a     22          | 	byte	34
2e02b     00          | 	byte	0
2e02c                 | LR__5044
2e02c     44 69 6D 3A 
2e030     20 61 74 20 
2e034     6C 69 6E 65 
2e038     20          | 	byte	"Dim: at line "
2e039     00          | 	byte	0
2e03a                 | LR__5045
2e03a     3A 20 77 61 
2e03e     72 6E 69 6E 
2e042     67 3A 20 74 
2e046     68 65 20 76 
2e04a     61 72 69 61 
2e04e     62 6C 65 20 
2e052     65 78 69 73 
2e056     74 65 64 2E | 	byte	": warning: the variable existed."
2e05a     00          | 	byte	0
2e05b                 | LR__5046
2e05b     28          | 	byte	"("
2e05c     00          | 	byte	0
2e05d                 | LR__5047
2e05d     61 73       | 	byte	"as"
2e05f     00          | 	byte	0
2e060                 | LR__5048
2e060     61 73       | 	byte	"as"
2e062     00          | 	byte	0
2e063                 | LR__5049
2e063     2C          | 	byte	","
2e064     00          | 	byte	0
2e065                 | LR__5050
2e065     29          | 	byte	")"
2e066     00          | 	byte	0
2e067                 | LR__5051
2e067     29          | 	byte	")"
2e068     00          | 	byte	0
2e069                 | LR__5052
2e069     61 73       | 	byte	"as"
2e06b     00          | 	byte	0
2e06c                 | LR__5053
2e06c     62 79 74 65 | 	byte	"byte"
2e070     00          | 	byte	0
2e071                 | LR__5054
2e071     75 62 79 74 
2e075     65          | 	byte	"ubyte"
2e076     00          | 	byte	0
2e077                 | LR__5055
2e077     73 68 6F 72 
2e07b     74          | 	byte	"short"
2e07c     00          | 	byte	0
2e07d                 | LR__5056
2e07d     75 73 68 6F 
2e081     72 74       | 	byte	"ushort"
2e083     00          | 	byte	0
2e084                 | LR__5057
2e084     6C 6F 6E 67 | 	byte	"long"
2e088     00          | 	byte	0
2e089                 | LR__5058
2e089     69 6E 74 65 
2e08d     67 65 72    | 	byte	"integer"
2e090     00          | 	byte	0
2e091                 | LR__5059
2e091     75 6C 6F 6E 
2e095     67          | 	byte	"ulong"
2e096     00          | 	byte	0
2e097                 | LR__5060
2e097     69 6E 74 36 
2e09b     34          | 	byte	"int64"
2e09c     00          | 	byte	0
2e09d                 | LR__5061
2e09d     75 69 6E 74 
2e0a1     36 34       | 	byte	"uint64"
2e0a3     00          | 	byte	0
2e0a4                 | LR__5062
2e0a4     73 69 6E 67 
2e0a8     6C 65       | 	byte	"single"
2e0aa     00          | 	byte	0
2e0ab                 | LR__5063
2e0ab     64 6F 75 62 
2e0af     6C 65       | 	byte	"double"
2e0b1     00          | 	byte	0
2e0b2                 | LR__5064
2e0b2     73 74 72 69 
2e0b6     6E 67       | 	byte	"string"
2e0b8     00          | 	byte	0
2e0b9                 | LR__5065
2e0b9     74 6F       | 	byte	"to"
2e0bb     00          | 	byte	0
2e0bc                 | LR__5066
2e0bc     73 74 65 70 | 	byte	"step"
2e0c0     00          | 	byte	0
2e0c1                 | LR__5067
2e0c1     73 2E       | 	byte	"s."
2e0c3     00          | 	byte	0
2e0c4                 | LR__5068
2e0c4     57 65 20 68 
2e0c8     61 76 65 20 
2e0cc     61 20 73 6C 
2e0d0     6F 77 20 67 
2e0d4     6F 74 6F 2C 
2e0d8     20 74 6F 64 
2e0dc     6F 20 20    | 	byte	"We have a slow goto, todo  "
2e0df     00          | 	byte	0
2e0e0                 | LR__5069
2e0e0     24          | 	byte	"$"
2e0e1     00          | 	byte	0
2e0e2                 | LR__5070
2e0e2     26 68       | 	byte	"&h"
2e0e4     00          | 	byte	0
2e0e5                 | LR__5071
2e0e5     25          | 	byte	"%"
2e0e6     00          | 	byte	0
2e0e7                 | LR__5072
2e0e7     26 62       | 	byte	"&b"
2e0e9     00          | 	byte	0
2e0ea                 | LR__5073
2e0ea                 | 	byte	
2e0ea     00          | 	byte	0
2e0eb                 | LR__5074
2e0eb     2F          | 	byte	"/"
2e0ec     00          | 	byte	0
2e0ed                 | LR__5075
2e0ed                 | 	byte	
2e0ed     00          | 	byte	0
2e0ee                 | LR__5076
2e0ee     53 61 76 65 
2e0f2     64 20 61 73 
2e0f6     20          | 	byte	"Saved as "
2e0f7     00          | 	byte	0
2e0f8                 | LR__5077
2e0f8     2F          | 	byte	"/"
2e0f9     00          | 	byte	0
2e0fa                 | LR__5078
2e0fa                 | 	byte	
2e0fa     00          | 	byte	0
2e0fb                 | LR__5079
2e0fb     2F          | 	byte	"/"
2e0fc     00          | 	byte	0
2e0fd                 | LR__5080
2e0fd     2F          | 	byte	"/"
2e0fe     00          | 	byte	0
2e0ff                 | LR__5081
2e0ff     2E 62 61 73 | 	byte	".bas"
2e103     00          | 	byte	0
2e104                 | LR__5082
2e104     53 79 73 74 
2e108     65 6D 20 65 
2e10c     72 72 6F 72 
2e110     20          | 	byte	"System error "
2e111     00          | 	byte	0
2e112                 | LR__5083
2e112     3A 20       | 	byte	": "
2e114     00          | 	byte	0
2e115                 | LR__5084
2e115     2E 62 61 73 | 	byte	".bas"
2e119     00          | 	byte	0
2e11a                 | LR__5085
2e11a     2F          | 	byte	"/"
2e11b     00          | 	byte	0
2e11c                 | LR__5086
2e11c     30          | 	byte	"0"
2e11d     00          | 	byte	0
2e11e                 | LR__5087
2e11e     39          | 	byte	"9"
2e11f     00          | 	byte	0
2e120                 | LR__5088
2e120                 | 	byte	
2e120     00          | 	byte	0
2e121                 | LR__5089
2e121     4C 6F 61 64 
2e125     65 64 20    | 	byte	"Loaded "
2e128     00          | 	byte	0
2e129                 | LR__5090
2e129     2F          | 	byte	"/"
2e12a     00          | 	byte	0
2e12b                 | LR__5091
2e12b     53 74 6F 70 
2e12f     70 65 64 20 
2e133     61 74 20 6C 
2e137     69 6E 65 20 | 	byte	"Stopped at line "
2e13b     00          | 	byte	0
2e13c                 | LR__5092
2e13c                 | 	byte	
2e13c     00          | 	byte	0
2e13d                 | LR__5093
2e13d                 | 	byte	
2e13d     00          | 	byte	0
2e13e                 | LR__5094
2e13e     2F 73 64 2F 
2e142     6D 65 64 69 
2e146     61 2F 68 2F | 	byte	"/sd/media/h/"
2e14a     00          | 	byte	0
2e14b                 | LR__5095
2e14b     53 79 73 74 
2e14f     65 6D 20 65 
2e153     72 72 6F 72 
2e157     20          | 	byte	"System error "
2e158     00          | 	byte	0
2e159                 | LR__5096
2e159     3A 20       | 	byte	": "
2e15b     00          | 	byte	0
2e15c                 | LR__5097
2e15c                 | 	byte	
2e15c     00          | 	byte	0
2e15d                 | LR__5098
2e15d                 | 	byte	
2e15d     00          | 	byte	0
2e15e                 | LR__5099
2e15e     2F 73 64 2F 
2e162     6D 65 64 69 
2e166     61 2F 73 2F | 	byte	"/sd/media/s/"
2e16a     00          | 	byte	0
2e16b                 | LR__5100
2e16b     53 79 73 74 
2e16f     65 6D 20 65 
2e173     72 72 6F 72 
2e177     20          | 	byte	"System error "
2e178     00          | 	byte	0
2e179                 | LR__5101
2e179     3A 20       | 	byte	": "
2e17b     00          | 	byte	0
2e17c                 | LR__5102
2e17c     6E 6F 6E 61 
2e180     6D 65 2E 62 
2e184     61 73       | 	byte	"noname.bas"
2e186     00          | 	byte	0
2e187                 | LR__5103
2e187     45 72 72 6F 
2e18b     72 20       | 	byte	"Error "
2e18d     00          | 	byte	0
2e18e                 | LR__5104
2e18e     3A 20       | 	byte	": "
2e190     00          | 	byte	0
2e191                 | LR__5105
2e191                 | 	byte	
2e191     00          | 	byte	0
2e192                 | LR__5106
2e192                 | 	byte	
2e192     00          | 	byte	0
2e193                 | LR__5107
2e193     72 6E 64 3A 
2e197     20          | 	byte	"rnd: "
2e198     00          | 	byte	0
2e199                 | LR__5108
2e199     72 6E 64 3A 
2e19d     20          | 	byte	"rnd: "
2e19e     00          | 	byte	0
2e19f                 | LR__5109
2e19f     67 65 74 65 
2e1a3     6E 76 73 75 
2e1a7     73 74 61 69 
2e1ab     6E 3A 20    | 	byte	"getenvsustain: "
2e1ae     00          | 	byte	0
2e1af                 | LR__5110
2e1af     73 69 6E 3A 
2e1b3     20          | 	byte	"sin: "
2e1b4     00          | 	byte	0
2e1b5                 | LR__5111
2e1b5     6D 69 64 24 
2e1b9     3A 20       | 	byte	"mid$: "
2e1bb     00          | 	byte	0
2e1bc                 | LR__5112
2e1bc     6D 69 64 24 
2e1c0     3A 20       | 	byte	"mid$: "
2e1c2     00          | 	byte	0
2e1c3                 | LR__5113
2e1c3     72 69 67 68 
2e1c7     74 24 3A 20 | 	byte	"right$: "
2e1cb     00          | 	byte	0
2e1cc                 | LR__5114
2e1cc     72 69 67 68 
2e1d0     74 24 3A 20 | 	byte	"right$: "
2e1d4     00          | 	byte	0
2e1d5                 | LR__5115
2e1d5     6C 65 66 74 
2e1d9     24 3A 20    | 	byte	"left$: "
2e1dc     00          | 	byte	0
2e1dd                 | LR__5116
2e1dd     6C 65 66 74 
2e1e1     24 3A 20    | 	byte	"left$: "
2e1e4     00          | 	byte	0
2e1e5                 | LR__5117
2e1e5     61 73 63 3A 
2e1e9     20          | 	byte	"asc: "
2e1ea     00          | 	byte	0
2e1eb                 | LR__5118
2e1eb     61 73 63 3A 
2e1ef     20          | 	byte	"asc: "
2e1f0     00          | 	byte	0
2e1f1                 | LR__5119
2e1f1     6C 65 6E 3A 
2e1f5     20          | 	byte	"len: "
2e1f6     00          | 	byte	0
2e1f7                 | LR__5120
2e1f7     6C 65 6E 3A 
2e1fb     20          | 	byte	"len: "
2e1fc     00          | 	byte	0
2e1fd                 | LR__5121
2e1fd     63 68 72 24 
2e201     3A 20       | 	byte	"chr$: "
2e203     00          | 	byte	0
2e204                 | LR__5122
2e204     76 61 6C 3A 
2e208     20          | 	byte	"val: "
2e209     00          | 	byte	0
2e20a                 | LR__5123
2e20a     76 61 6C 3A 
2e20e     20          | 	byte	"val: "
2e20f     00          | 	byte	0
2e210                 | LR__5124
2e210     24          | 	byte	"$"
2e211     00          | 	byte	0
2e212                 | LR__5125
2e212     26 68       | 	byte	"&h"
2e214     00          | 	byte	0
2e215                 | LR__5126
2e215     25          | 	byte	"%"
2e216     00          | 	byte	0
2e217                 | LR__5127
2e217     26 62       | 	byte	"&b"
2e219     00          | 	byte	0
2e21a                 | LR__5128
2e21a     68 65 78 24 
2e21e     3A 20       | 	byte	"hex$: "
2e220     00          | 	byte	0
2e221                 | LR__5129
2e221     62 69 6E 24 
2e225     3A 20       | 	byte	"bin$: "
2e227     00          | 	byte	0
2e228                 | LR__5130
2e228     63 6F 73 3A 
2e22c     20          | 	byte	"cos: "
2e22d     00          | 	byte	0
2e22e                 | LR__5131
2e22e     74 61 6E 3A 
2e232     20          | 	byte	"tan: "
2e233     00          | 	byte	0
2e234                 | LR__5132
2e234     61 73 69 6E 
2e238     3A 20       | 	byte	"asin: "
2e23a     00          | 	byte	0
2e23b                 | LR__5133
2e23b     61 63 6F 73 
2e23f     3A 20       | 	byte	"acos: "
2e241     00          | 	byte	0
2e242                 | LR__5134
2e242     61 74 6E 3A 
2e246     20          | 	byte	"atn: "
2e247     00          | 	byte	0
2e248                 | LR__5135
2e248     73 71 72 3A 
2e24c     20          | 	byte	"sqr: "
2e24d     00          | 	byte	0
2e24e                 | LR__5136
2e24e     73 74 69 63 
2e252     6B 3A 20    | 	byte	"stick: "
2e255     00          | 	byte	0
2e256                 | LR__5137
2e256     73 74 72 69 
2e25a     67 3A 20    | 	byte	"strig: "
2e25d     00          | 	byte	0
2e25e                 | LR__5138
2e25e     67 65 74 70 
2e262     69 78 65 6C 
2e266     3A 20       | 	byte	"getpixel: "
2e268     00          | 	byte	0
2e269                 | LR__5139
2e269     20 42 41 53 
2e26d     49 43 20 62 
2e271     79 74 65 73 
2e275     20 66 72 65 
2e279     65          | 	byte	" BASIC bytes free"
2e27a     00          | 	byte	0
2e27b                 | LR__5140
2e27b                 | 	byte	
2e27b     00          | 	byte	0
2e27c                 | LR__5141
2e27c     2F 73 64 2F 
2e280     62 61 73    | 	byte	"/sd/bas"
2e283     00          | 	byte	0
2e284                 | LR__5142
2e284     57 6F 72 6B 
2e288     69 6E 67 20 
2e28c     64 69 72 65 
2e290     63 74 6F 72 
2e294     79 3A 20    | 	byte	"Working directory: "
2e297     00          | 	byte	0
2e298                 | LR__5143
2e298     2A          | 	byte	"*"
2e299     00          | 	byte	0
2e29a                 | LR__5144
2e29a                 | 	byte	
2e29a     00          | 	byte	0
2e29b                 | LR__5145
2e29b     5B 64 69 72 
2e29f     5D 20       | 	byte	"[dir] "
2e2a1     00          | 	byte	0
2e2a2                 | LR__5146
2e2a2     2A          | 	byte	"*"
2e2a3     00          | 	byte	0
2e2a4                 | LR__5147
2e2a4                 | 	byte	
2e2a4     00          | 	byte	0
2e2a5                 | LR__5148
2e2a5     2D 2D 2D 2D 
2e2a9     2D 6D 6F 72 
2e2ad     65 2C 20 70 
2e2b1     72 65 73 73 
2e2b5     20 61 6E 79 
2e2b9     20 6B 65 79 | 	byte	"-----more, press any key"
2e2bd     00          | 	byte	0
2e2be                 | LR__5149
2e2be     20 20 20 20 
      ...             
2e2d6     20 20 20 20 
2e2da     20          | 	byte	"                             "
2e2db     00          | 	byte	0
2e2dc                 | LR__5150
2e2dc     2F          | 	byte	"/"
2e2dd     00          | 	byte	0
2e2de                 | LR__5151
2e2de     2F 73 64 2F 
2e2e2     62 69 6E 2F | 	byte	"/sd/bin/"
2e2e6     00          | 	byte	0
2e2e7                 | LR__5152
2e2e7     53 79 73 74 
2e2eb     65 6D 20 65 
2e2ef     72 72 6F 72 
2e2f3     20          | 	byte	"System error "
2e2f4     00          | 	byte	0
2e2f5                 | LR__5153
2e2f5     3A 20       | 	byte	": "
2e2f7     00          | 	byte	0
2e2f8                 | LR__5154
2e2f8                 | 	byte	
2e2f8     00          | 	byte	0
2e2f9                 | LR__5155
2e2f9     45 78 70 65 
2e2fd     63 74 65 64 
2e301     20 6E 75 6D 
2e305     62 65 72 2C 
2e309     20 67 6F 74 
2e30d     20 73 6F 6D 
2e311     65 74 68 69 
2e315     6E 67 20 65 
2e319     6C 73 65 2E | 	byte	"Expected number, got something else."
2e31d     00          | 	byte	0
2e31e                 | LR__5156
2e31e     43 61 6E 6E 
2e322     6F 74 20 61 
2e326     64 64 20 61 
2e32a     20 6E 75 6D 
2e32e     62 65 72 20 
2e332     74 6F 20 61 
2e336     20 73 74 72 
2e33a     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2e33e     00          | 	byte	0
2e33f                 | LR__5157
2e33f     43 61 6E 6E 
2e343     6F 74 20 73 
2e347     75 62 73 74 
2e34b     72 61 63 74 
2e34f     20 73 74 72 
2e353     69 6E 67 73 
2e357     2E          | 	byte	"Cannot substract strings."
2e358     00          | 	byte	0
2e359                 | LR__5158
2e359     55 6E 6B 6E 
2e35d     6F 77 6E 20 
2e361     65 72 72 6F 
2e365     72 20 77 68 
2e369     69 6C 65 20 
2e36d     61 64 64 69 
2e371     6E 67 2E    | 	byte	"Unknown error while adding."
2e374     00          | 	byte	0
2e375                 | LR__5159
2e375     55 6E 6B 6E 
2e379     6F 77 6E 20 
2e37d     65 72 72 6F 
2e381     72 20 77 68 
2e385     69 6C 65 20 
2e389     73 75 62 73 
2e38d     74 72 61 63 
2e391     74 69 6E 67 
2e395     2E          | 	byte	"Unknown error while substracting."
2e396     00          | 	byte	0
2e397                 | LR__5160
2e397     43 61 6E 6E 
2e39b     6F 74 20 64 
2e39f     6F 20 6C 6F 
2e3a3     67 69 63 20 
2e3a7     6F 70 65 72 
2e3ab     61 74 69 6F 
2e3af     6E 20 6F 6E 
2e3b3     20 73 74 72 
2e3b7     69 6E 67 20 
2e3bb     6F 72 20 66 
2e3bf     6C 6F 61 74 
2e3c3     2E          | 	byte	"Cannot do logic operation on string or float."
2e3c4     00          | 	byte	0
2e3c5                 | LR__5161
2e3c5     55 6E 6B 6E 
2e3c9     6F 77 6E 20 
2e3cd     65 72 72 6F 
2e3d1     72 20 77 68 
2e3d5     69 6C 65 20 
2e3d9     64 6F 69 6E 
2e3dd     67 20 6C 6F 
2e3e1     67 69 63 20 
2e3e5     6F 70 65 72 
2e3e9     61 74 69 6F 
2e3ed     6E 2E       | 	byte	"Unknown error while doing logic operation."
2e3ef     00          | 	byte	0
2e3f0                 | LR__5162
2e3f0     43 61 6E 6E 
2e3f4     6F 74 20 6D 
2e3f8     75 6C 74 69 
2e3fc     70 6C 79 20 
2e400     73 74 72 69 
2e404     6E 67 73 2E | 	byte	"Cannot multiply strings."
2e408     00          | 	byte	0
2e409                 | LR__5163
2e409     55 6E 6B 6E 
2e40d     6F 77 6E 20 
2e411     65 72 72 6F 
2e415     72 20 77 68 
2e419     69 6C 65 20 
2e41d     6D 75 6C 74 
2e421     69 70 6C 79 
2e425     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2e429     00          | 	byte	0
2e42a                 | LR__5164
2e42a     43 61 6E 6E 
2e42e     6F 74 20 64 
2e432     69 76 69 64 
2e436     65 20 73 74 
2e43a     72 69 6E 67 
2e43e     73 2E       | 	byte	"Cannot divide strings."
2e440     00          | 	byte	0
2e441                 | LR__5165
2e441     55 6E 6B 6E 
2e445     6F 77 6E 20 
2e449     65 72 72 6F 
2e44d     72 20 77 68 
2e451     69 6C 65 20 
2e455     64 69 76 69 
2e459     64 69 6E 67 
2e45d     2E          | 	byte	"Unknown error while dividing."
2e45e     00          | 	byte	0
2e45f                 | LR__5166
2e45f     43 61 6E 6E 
2e463     6F 74 20 63 
2e467     6F 6D 70 75 
2e46b     74 65 20 61 
2e46f     20 70 6F 77 
2e473     65 72 20 6F 
2e477     66 20 61 20 
2e47b     73 74 72 69 
2e47f     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2e482     00          | 	byte	0
2e483                 | LR__5167
2e483     55 6E 6B 6E 
2e487     6F 77 6E 20 
2e48b     65 72 72 6F 
2e48f     72 20 77 68 
2e493     69 6C 65 20 
2e497     63 6F 6D 70 
2e49b     75 74 69 6E 
2e49f     67 20 61 20 
2e4a3     70 6F 77 65 
2e4a7     72 2E       | 	byte	"Unknown error while computing a power."
2e4a9     00          | 	byte	0
2e4aa                 | LR__5168
2e4aa     52 69 67 68 
2e4ae     74 20 70 61 
2e4b2     72 65 6E 74 
2e4b6     68 65 73 69 
2e4ba     73 20 65 78 
2e4be     70 65 63 74 
2e4c2     65 64 2E    | 	byte	"Right parenthesis expected."
2e4c5     00          | 	byte	0
2e4c6                 | LR__5169
2e4c6     45 78 70 65 
2e4ca     63 74 65 64 
2e4ce     20 73 74 72 
2e4d2     69 6E 67 2E | 	byte	"Expected string."
2e4d6     00          | 	byte	0
2e4d7                 | LR__5170
2e4d7     45 78 70 65 
2e4db     63 74 65 64 
2e4df     20 66 6C 6F 
2e4e3     61 74 2E    | 	byte	"Expected float."
2e4e6     00          | 	byte	0
2e4e7                 | LR__5171
2e4e7     45 78 70 65 
2e4eb     63 74 65 64 
2e4ef     20 75 6E 73 
2e4f3     69 67 6E 65 
2e4f7     64 20 69 6E 
2e4fb     74 65 67 65 
2e4ff     72 2E       | 	byte	"Expected unsigned integer."
2e501     00          | 	byte	0
2e502                 | LR__5172
2e502     45 78 70 65 
2e506     63 74 65 64 
2e50a     20 69 6E 74 
2e50e     65 67 65 72 
2e512     2E          | 	byte	"Expected integer."
2e513     00          | 	byte	0
2e514                 | LR__5173
2e514     4E 6F 20 6D 
2e518     6F 72 65 20 
2e51c     76 61 72 69 
2e520     61 62 6C 65 
2e524     20 73 6C 6F 
2e528     74 73 2E    | 	byte	"No more variable slots."
2e52b     00          | 	byte	0
2e52c                 | LR__5174
2e52c     56 61 72 69 
2e530     61 62 6C 65 
2e534     20 6E 6F 74 
2e538     20 66 6F 75 
2e53c     6E 64 2E    | 	byte	"Variable not found."
2e53f     00          | 	byte	0
2e540                 | LR__5175
2e540     43 6F 6D 6D 
2e544     61 20 65 78 
2e548     70 65 63 74 
2e54c     65 64 2E    | 	byte	"Comma expected."
2e54f     00          | 	byte	0
2e550                 | LR__5176
2e550     43 6F 6D 6D 
2e554     61 20 6F 72 
2e558     20 73 65 6D 
2e55c     69 63 6F 6C 
2e560     6F 6E 20 65 
2e564     78 70 65 63 
2e568     74 65 64 2E | 	byte	"Comma or semicolon expected."
2e56c     00          | 	byte	0
2e56d                 | LR__5177
2e56d     55 6E 6B 6E 
2e571     6F 77 6E 20 
2e575     63 6F 6D 6D 
2e579     61 6E 64 2E | 	byte	"Unknown command."
2e57d     00          | 	byte	0
2e57e                 | LR__5178
2e57e     53 74 61 63 
2e582     6B 20 75 6E 
2e586     64 65 72 66 
2e58a     6C 6F 77 2E | 	byte	"Stack underflow."
2e58e     00          | 	byte	0
2e58f                 | LR__5179
2e58f     43 61 6E 6E 
2e593     6F 74 20 65 
2e597     78 65 63 75 
2e59b     74 65 20 67 
2e59f     6F 74 6F 20 
2e5a3     69 6E 20 74 
2e5a7     68 65 20 69 
2e5ab     6D 6D 65 64 
2e5af     69 61 74 65 
2e5b3     20 6D 6F 64 
2e5b7     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2e5b9     00          | 	byte	0
2e5ba                 | LR__5180
2e5ba     43 61 6E 6E 
2e5be     6F 74 20 6C 
2e5c2     6F 61 64 20 
2e5c6     66 72 6F 6D 
2e5ca     20 74 68 69 
2e5ce     73 20 66 69 
2e5d2     6C 65 2E    | 	byte	"Cannot load from this file."
2e5d5     00          | 	byte	0
2e5d6                 | LR__5181
2e5d6     54 68 65 20 
2e5da     70 72 6F 67 
2e5de     72 61 6D 20 
2e5e2     69 73 20 65 
2e5e6     6D 70 74 79 
2e5ea     2E          | 	byte	"The program is empty."
2e5eb     00          | 	byte	0
2e5ec                 | LR__5182
2e5ec     49 66 20 61 
2e5f0     66 74 65 72 
2e5f4     20 69 66 2E | 	byte	"If after if."
2e5f8     00          | 	byte	0
2e5f9                 | LR__5183
2e5f9     45 6D 70 74 
2e5fd     79 20 65 78 
2e601     70 72 65 73 
2e605     73 69 6F 6E 
2e609     2E          | 	byte	"Empty expression."
2e60a     00          | 	byte	0
2e60b                 | LR__5184
2e60b     53 74 72 69 
2e60f     6E 67 20 65 
2e613     78 70 65 63 
2e617     74 65 64 2E | 	byte	"String expected."
2e61b     00          | 	byte	0
2e61c                 | LR__5185
2e61c     49 6E 74 65 
2e620     72 70 72 65 
2e624     74 65 72 20 
2e628     69 6E 74 65 
2e62c     72 6E 61 6C 
2e630     20 65 72 72 
2e634     6F 72 2E    | 	byte	"Interpreter internal error."
2e637     00          | 	byte	0
2e638                 | LR__5186
2e638     45 78 70 65 
2e63c     63 74 65 64 
2e640     20 61 73 73 
2e644     69 67 6E 2E | 	byte	"Expected assign."
2e648     00          | 	byte	0
2e649                 | LR__5187
2e649     45 78 70 65 
2e64d     63 74 65 64 
2e651     20 27 74 6F 
2e655     27 2E       | 	byte	"Expected 'to'."
2e657     00          | 	byte	0
2e658                 | LR__5188
2e658     45 78 70 65 
2e65c     63 74 65 64 
2e660     20 69 6E 74 
2e664     65 67 65 72 
2e668     20 76 61 72 
2e66c     69 61 62 6C 
2e670     65 2E       | 	byte	"Expected integer variable."
2e672     00          | 	byte	0
2e673                 | LR__5189
2e673     55 6E 69 6E 
2e677     69 74 69 61 
2e67b     6C 69 7A 65 
2e67f     64 20 76 61 
2e683     72 69 61 62 
2e687     6C 65 20 69 
2e68b     6E 20 27 6E 
2e68f     65 78 74 27 
2e693     2C 20 75 73 
2e697     65 20 27 66 
2e69b     6F 72 27 20 
2e69f     62 65 66 6F 
2e6a3     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2e6a6     00          | 	byte	0
2e6a7                 | LR__5190
2e6a7     4E 6F 20 6D 
2e6ab     6F 72 65 20 
2e6af     73 6C 6F 74 
2e6b3     73 20 66 6F 
2e6b7     72 20 27 66 
2e6bb     6F 72 27 2E | 	byte	"No more slots for 'for'."
2e6bf     00          | 	byte	0
2e6c0                 | LR__5191
2e6c0     27 4E 65 78 
2e6c4     74 27 20 64 
2e6c8     6F 65 73 6E 
2e6cc     27 74 20 6D 
2e6d0     61 74 63 68 
2e6d4     20 27 66 6F 
2e6d8     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2e6db     00          | 	byte	0
2e6dc                 | LR__5192
2e6dc     27 47 6F 74 
2e6e0     6F 27 20 74 
2e6e4     61 72 67 65 
2e6e8     74 20 6C 69 
2e6ec     6E 65 20 6E 
2e6f0     6F 74 20 66 
2e6f4     6F 75 6E 64 
2e6f8     2E          | 	byte	"'Goto' target line not found."
2e6f9     00          | 	byte	0
2e6fa                 | LR__5193
2e6fa     42 61 64 20 
2e6fe     6E 75 6D 62 
2e702     65 72 20 6F 
2e706     66 20 70 61 
2e70a     72 61 6D 65 
2e70e     74 65 72 73 | 	byte	"Bad number of parameters"
2e712     00          | 	byte	0
2e713                 | LR__5194
2e713     46 75 6E 63 
2e717     74 69 6F 6E 
2e71b     20 75 6E 64 
2e71f     65 66 69 6E 
2e723     65 64 20 66 
2e727     6F 72 20 73 
2e72b     74 72 69 6E 
2e72f     67 73       | 	byte	"Function undefined for strings"
2e731     00          | 	byte	0
2e732                 | LR__5195
2e732     42 61 64 20 
2e736     70 61 72 61 
2e73a     6D 65 74 65 
2e73e     72 2E       | 	byte	"Bad parameter."
2e740     00          | 	byte	0
2e741                 | LR__5196
2e741     43 61 6E 6E 
2e745     6F 74 20 64 
2e749     65 63 6C 61 
2e74d     72 65 20 61 
2e751     6E 20 61 72 
2e755     72 61 79 3A 
2e759     20 74 68 65 
2e75d     20 76 61 72 
2e761     69 61 62 6C 
2e765     65 20 65 78 
2e769     69 73 74 73 
2e76d     2E          | 	byte	"Cannot declare an array: the variable exists."
2e76e     00          | 	byte	0
2e76f                 | LR__5197
2e76f     45 78 70 65 
2e773     63 74 65 64 
2e777     20 27 28 27 
2e77b     2E          | 	byte	"Expected '('."
2e77c     00          | 	byte	0
2e77d                 | LR__5198
2e77d     45 78 70 65 
2e781     63 74 65 64 
2e785     20 27 29 27 
2e789     20 6F 72 20 
2e78d     27 2C 27 2E | 	byte	"Expected ')' or ','."
2e791     00          | 	byte	0
2e792                 | LR__5199
2e792     4E 6F 20 6D 
2e796     6F 72 65 20 
2e79a     74 68 61 6E 
2e79e     20 33 20 64 
2e7a2     69 6D 65 6E 
2e7a6     73 69 6F 6E 
2e7aa     73 20 73 75 
2e7ae     70 70 6F 72 
2e7b2     74 65 64    | 	byte	"No more than 3 dimensions supported"
2e7b5     00          | 	byte	0
2e7b6                 | LR__5200
2e7b6     56 61 72 69 
2e7ba     61 62 6C 65 
2e7be     20 6E 61 6D 
2e7c2     65 20 65 78 
2e7c6     70 65 63 74 
2e7ca     65 64       | 	byte	"Variable name expected"
2e7cc     00          | 	byte	0
2e7cd                 | LR__5201
2e7cd     54 79 70 65 
2e7d1     20 6E 61 6D 
2e7d5     65 20 65 78 
2e7d9     70 65 63 74 
2e7dd     65 64       | 	byte	"Type name expected"
2e7df     00          | 	byte	0
2e7e0                 | LR__5202
2e7e0     54 79 70 65 
2e7e4     20 6E 6F 74 
2e7e8     20 73 75 70 
2e7ec     70 6F 72 74 
2e7f0     65 64 20 79 
2e7f4     65 74       | 	byte	"Type not supported yet"
2e7f6     00          | 	byte	0
2e7f7                 | LR__5203
2e7f7     41 72 72 61 
2e7fb     79 20 69 6E 
2e7ff     64 65 78 20 
2e803     6F 75 74 20 
2e807     6F 66 20 72 
2e80b     61 6E 67 65 | 	byte	"Array index out of range"
2e80f     00          | 	byte	0
2e810                 | LR__5204
2e810     45 72 72 6F 
2e814     72 20       | 	byte	"Error "
2e816     00          | 	byte	0
2e817                 | LR__5205
2e817     3A 20       | 	byte	": "
2e819     00          | 	byte	0
2e81a                 | LR__5206
2e81a     2F 73 64    | 	byte	"/sd"
2e81d     00          | 	byte	0
2e81e                 | LR__5207
2e81e     2F 73 64 2F 
2e822     62 61 73    | 	byte	"/sd/bas"
2e825     00          | 	byte	0
2e826                 | LR__5208
2e826     2F 73 64 2F 
2e82a     62 61 73    | 	byte	"/sd/bas"
2e82d     00          | 	byte	0
2e82e                 | LR__5209
2e82e     20 42 41 53 
2e832     49 43 20 62 
2e836     79 74 65 73 
2e83a     20 66 72 65 
2e83e     65          | 	byte	" BASIC bytes free"
2e83f     00          | 	byte	0
2e840                 | LR__5210
2e840     52 65 61 64 
2e844     79          | 	byte	"Ready"
2e845     00          | 	byte	0
2e846                 | LR__5211
2e846     6E 6F 6E 61 
2e84a     6D 65 2E 62 
2e84e     61 73       | 	byte	"noname.bas"
2e850     00          | 	byte	0
2e851                 | LR__5212
2e851                 | 	byte	
2e851     00          | 	byte	0
2e852                 | LR__5213
2e852                 | 	byte	
2e852     00          | 	byte	0
2e853                 | LR__5214
2e853                 | 	byte	
2e853     00          | 	byte	0
2e854                 | 	alignl
2e854                 | _dat_
2e854     00 00 00 00 
2e858     00 00 00 00 
2e85c     00 00 00 00 
2e860     00 00 00 00 | 	byte	$00[16]
2e864     61 41 17 0E 
2e868     62 42 00 00 
2e86c     63 43 19 10 
2e870     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2e874     65 45 18 0F 
2e878     66 46 00 00 
2e87c     67 47 00 00 
2e880     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2e884     69 49 00 00 
2e888     6A 4A 00 00 
2e88c     6B 4B 00 00 
2e890     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2e894     6D 4D 00 00 
2e898     6E 4E 1A 11 
2e89c     6F 4F 1E 15 
2e8a0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2e8a4     71 51 00 00 
2e8a8     72 52 00 00 
2e8ac     73 53 1B 12 
2e8b0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2e8b4     75 55 00 00 
2e8b8     76 56 00 00 
2e8bc     77 57 00 00 
2e8c0     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2e8c4     79 59 00 00 
2e8c8     7A 5A 1D 14 
2e8cc     31 21 04 00 
2e8d0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2e8d4     33 23 06 00 
2e8d8     34 24 07 00 
2e8dc     35 25 08 00 
2e8e0     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2e8e4     37 26 0A 00 
2e8e8     38 2A 0B 00 
2e8ec     39 28 0C 00 
2e8f0     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2e8f4     8D 8D 00 00 
2e8f8     9B 9B 00 00 
2e8fc     88 88 00 00 
2e900     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2e904     20 20 00 00 
2e908     2D 5F 00 00 
2e90c     3D 2B 00 00 
2e910     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2e914     5D 7D 00 00 
2e918     5C 7C 00 00 
2e91c     23 7E 00 00 
2e920     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2e924     27 22 00 00 
2e928     60 7E 03 00 
2e92c     2C 3C 00 00 
2e930     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2e934     2F 3F 00 00 
2e938     B9 B9 00 00 
2e93c     BA 00 00 00 
2e940     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2e944     BC 00 00 00 
2e948     BD 00 00 00 
2e94c     BE 00 00 00 
2e950     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2e954     C0 00 00 00 
2e958     C1 00 00 00 
2e95c     C2 00 00 00 
2e960     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2e964     C4 00 00 00 
2e968     C5 00 00 00 
2e96c     C6 00 00 00 
2e970     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2e974     C8 00 00 00 
2e978     C9 00 00 00 
2e97c     CA 00 00 00 
2e980     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2e984     7F 7F 00 00 
2e988     CC 00 00 00 
2e98c     CD 00 00 00 
2e990     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2e994     CF 00 00 00 
2e998     D0 00 00 00 
2e99c     D1 00 00 00 
2e9a0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2e9a4     2F 2F 00 00 
2e9a8     2A 2A 00 00 
2e9ac     2D 2D 00 00 
2e9b0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2e9b4     8D 8D 00 00 
2e9b8     31 31 00 00 
2e9bc     32 32 00 00 
2e9c0     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2e9c4     34 34 00 00 
2e9c8     35 35 00 00 
2e9cc     36 36 00 00 
2e9d0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2e9d4     38 38 00 00 
2e9d8     39 39 00 00 
2e9dc     30 30 00 00 
2e9e0     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2e9e4     5C 7C 00 00 
2e9e8     00 00 00 00 
2e9ec     00 00 00 00 
2e9f0     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2e9f4     00 00 00 00 
      ...             
2ea4c     00 00 00 00 
2ea50     00 00 00 00 | 	byte	$00[96]
2ea54     2B 00 A6 F2 
2ea58     24 A7 09 80 
2ea5c     5B 88 4D 89 
2ea60     80 88 A5 88 | atari_spl file "atari.spl"
2ea64     6D 88 B8 88 
2ea68     80 88 CB 88 
2ea6c     92 88 A5 88 
2ea70     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2ea74     A5 88 CA 88 
2ea78     A6 88 DD 88 
2ea7c     B8 88 AB 89 
2ea80     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2ea84     C8 AD C6 F1 
2ea88     91 06 B6 FF 
2ea8c     13 00 4A 00 
2ea90     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2ea94     5D 00 5E 00 
2ea98     5D 00 5E 00 
2ea9c     5E 00 5D 00 
2eaa0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2eaa4     38 00 83 00 
2eaa8     25 00 83 00 
2eaac     C3 FE D1 04 
2eab0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2eab4     48 88 38 85 
2eab8     41 8A CB 88 
2eabc     28 89 B8 88 
2eac0     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2eac4     15 89 03 89 
2eac8     02 89 15 89 
2eacc     16 89 15 89 
2ead0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2ead4     15 89 3A 89 
2ead8     72 89 E3 89 
2eadc     52 83 AD 97 
2eae0     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2eae4     0C 02 B6 FF 
2eae8     E1 00 A8 00 
2eaec     F3 00 A8 00 
2eaf0     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2eaf4     CE 00 CD 00 
2eaf8     CD 00 BA 00 
2eafc     E1 00 BB 00 
2eb00     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2eb04     DF 00 C9 FF 
2eb08     E6 01 B6 06 
2eb0c     EE DD 8D 98 
2eb10     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2eb14     97 89 73 89 
2eb18     3B 89 60 89 
2eb1c     60 89 60 89 
2eb20     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2eb24     73 89 72 89 
2eb28     85 89 73 89 
2eb2c     AA 89 60 89 
2eb30     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2eb34     E8 8A 18 86 
2eb38     92 88 A5 C2 
2eb3c     E0 00 C3 05 
2eb40     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2eb44     F2 00 64 01 
2eb48     06 01 3E 01 
2eb4c     2B 01 2B 01 
2eb50     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2eb54     2B 01 2A 01 
2eb58     2B 01 2B 01 
2eb5c     2B 01 18 01 
2eb60     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2eb64     39 07 61 F3 
2eb68     C0 AF 37 85 
2eb6c     0F 88 8B 8A 
2eb70     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2eb74     AB 89 D0 89 
2eb78     AB 89 D0 89 
2eb7c     D0 89 CF 89 
2eb80     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2eb84     D0 89 F5 89 
2eb88     BD 89 08 8A 
2eb8c     CF 89 E8 8A 
2eb90     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2eb94     53 B3 0D F8 
2eb98     F4 07 38 00 
2eb9c     63 01 63 01 
2eba0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2eba4     88 01 88 01 
2eba8     76 01 88 01 
2ebac     88 01 89 01 
2ebb0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2ebb4     75 01 AE 01 
2ebb8     76 01 88 01 
2ebbc     4A 00 46 06 
2ebc0     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2ebc4     08 8A 9A 86 
2ebc8     33 8B 08 8A 
2ebcc     2D 8A F5 89 
2ebd0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2ebd4     2D 8A 2D 8A 
2ebd8     2E 8A 1B 8A 
2ebdc     40 8A 2D 8A 
2ebe0     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2ebe4     2E 8A 79 8A 
2ebe8     66 8A C8 8B 
2ebec     72 82 2B 97 
2ebf0     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2ebf4     1D 02 05 01 
2ebf8     F8 01 C0 01 
2ebfc     0B 02 C0 01 
2ec00     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2ec04     F9 01 D3 01 
2ec08     F8 01 D3 01 
2ec0c     F8 01 D2 01 
2ec10     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2ec14     E6 01 2B 01 
2ec18     8E 02 5F 07 
2ec1c     F7 E2 ED 9C 
2ec20     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2ec24     E8 8A 78 8A 
2ec28     78 8A 65 8A 
2ec2c     8B 8A 78 8A 
2ec30     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2ec34     8B 8A 9D 8A 
2ec38     9D 8A 8B 8A 
2ec3c     C2 8A 78 8A 
2ec40     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2ec44     70 8C 18 86 
2ec48     8B 8A 23 C9 
2ec4c     CB 03 C4 05 
2ec50     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2ec54     0B 02 7B 02 
2ec58     1E 02 55 02 
2ec5c     30 02 43 02 
2ec60     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2ec64     43 02 44 02 
2ec68     43 02 30 02 
2ec6c     68 02 31 02 
2ec70     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2ec74     07 08 3F F7 
2ec78     73 B2 13 85 
2ec7c     15 89 ED 8B 
2ec80     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2ec84     B0 8A FB 8A 
2ec88     D5 8A FA 8A 
2ec8c     E8 8A FB 8A 
2ec90     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2ec94     E8 8A 21 8B 
2ec98     E7 8A 33 8B 
2ec9c     E8 8A 26 8C 
2eca0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2eca4     8D B0 27 F6 
2eca8     9C 08 AD 01 
2ecac     7B 02 8D 02 
2ecb0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2ecb4     A1 02 A0 02 
2ecb8     A1 02 A0 02 
2ecbc     A0 02 A0 02 
2ecc0     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2ecc4     7B 02 D8 02 
2ecc8     7B 02 C6 02 
2eccc     3E 01 C3 05 
2ecd0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2ecd4     00 8C 2A 86 
2ecd8     E0 8C FA 8A 
2ecdc     6A 8B FB 8A 
2ece0     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2ece4     45 8B 45 8B 
2ece8     45 8B 6B 8B 
2ecec     46 8B 59 8B 
2ecf0     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2ecf4     6B 8B 6B 8B 
2ecf8     6B 8B 6B 8B 
2ecfc     7D 8B 7D 8B 
2ed00     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2ed04     90 8B 91 8B 
2ed08     90 8B 90 8B 
2ed0c     A3 8B A3 8B 
2ed10     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2ed14     B5 8B B6 8B 
2ed18     B5 8B B5 8B 
2ed1c     B6 8B C8 8B 
2ed20     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2ed24     C8 8B DA 8B 
2ed28     DB 8B DB 8B 
2ed2c     DB 8B DC 8B 
2ed30     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2ed34     EE 8B EE 8B 
2ed38     00 8C 01 8C 
2ed3c     00 8C 01 8C 
2ed40     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2ed44     12 8C 13 8C 
2ed48     13 8C 26 8C 
2ed4c     26 8C 26 8C 
2ed50     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2ed54     38 8C 38 8C 
2ed58     38 8C 38 8C 
2ed5c     4B 8C 4B 8C 
2ed60     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2ed64     5E 8C 5E 8C 
2ed68     5E 8C 5E 8C 
2ed6c     70 8C 70 8C 
2ed70     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2ed74     70 8C 83 8C 
2ed78     83 8C 83 8C 
2ed7c     83 8C 96 8C 
2ed80     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2ed84     95 8C A9 8C 
2ed88     A9 8C A8 8C 
2ed8c     A8 8C A8 8C 
2ed90     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2ed94     BB 8C BB 8C 
2ed98     BB 8C CE 8C 
2ed9c     CE 8C CE 8C 
2eda0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2eda4     E0 8C E1 8C 
2eda8     E1 8C E0 8C 
2edac     F4 8C F2 8C 
2edb0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2edb4     05 8D 05 8D 
2edb8     06 8D 06 8D 
2edbc     19 8D 19 8D 
2edc0     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2edc4     18 8D 2B 8D 
2edc8     2B 8D 2B 8D 
2edcc     2A 8D 3E 8D 
2edd0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2edd4     3E 8D 51 8D 
2edd8     50 8D 50 8D 
2eddc     50 8D 51 8D 
2ede0     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2ede4     63 8D 64 8D 
2ede8     76 8D 75 8D 
2edec     75 8D 76 8D 
2edf0     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2edf4     88 8D 88 8D 
2edf8     89 8D 9B 8D 
2edfc     9A 8D 9B 8D 
2ee00     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2ee04     AD 8D AE 8D 
2ee08     AD 8D AE 8D 
2ee0c     C1 8D C1 8D 
2ee10     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2ee14     D3 8D D3 8D 
2ee18     D3 8D D3 8D 
2ee1c     D3 8D E6 8D 
2ee20     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2ee24     E6 8D E6 8D 
2ee28     F9 8D F9 8D 
2ee2c     F9 8D F8 8D 
2ee30     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2ee34     0B 8E 0B 8E 
2ee38     1D 8E 1D 8E 
2ee3c     1E 8E 1E 8E 
2ee40     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2ee44     31 8E 31 8E 
2ee48     31 8E 42 8E 
2ee4c     43 8E 43 8E 
2ee50     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2ee54     56 8E 56 8E 
2ee58     55 8E 56 8E 
2ee5c     68 8E 69 8E 
2ee60     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2ee64     69 8E 7B 8E 
2ee68     7C 8E 7B 8E 
2ee6c     7B 8E 8D 8E 
2ee70     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2ee74     8D 8E A1 8E 
2ee78     A0 8E A1 8E 
2ee7c     A1 8E A0 8E 
2ee80     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2ee84     B3 8E B3 8E 
2ee88     C6 8E C5 8E 
2ee8c     C6 8E C6 8E 
2ee90     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2ee94     D8 8E D9 8E 
2ee98     D8 8E EC 8E 
2ee9c     EB 8E EC 8E 
2eea0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2eea4     FE 8E FE 8E 
2eea8     FE 8E FE 8E 
2eeac     10 8F 10 8F 
2eeb0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2eeb4     11 8F 23 8F 
2eeb8     24 8F 23 8F 
2eebc     24 8F 37 8F 
2eec0     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2eec4     36 8F 36 8F 
2eec8     48 8F 49 8F 
2eecc     49 8F 49 8F 
2eed0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2eed4     5B 8F 5C 8F 
2eed8     5B 8F 6E 8F 
2eedc     6E 8F 6E 8F 
2eee0     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2eee4     81 8F 81 8F 
2eee8     81 8F 81 8F 
2eeec     93 8F 93 8F 
2eef0     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2eef4     93 8F A6 8F 
2eef8     A6 8F A6 8F 
2eefc     A6 8F B9 8F 
2ef00     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2ef04     B9 8F B9 8F 
2ef08     CC 8F CB 8F 
2ef0c     CB 8F CC 8F 
2ef10     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2ef14     DF 8F DE 8F 
2ef18     DE 8F F1 8F 
2ef1c     F1 8F F1 8F 
2ef20     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2ef24     03 90 04 90 
2ef28     04 90 04 90 
2ef2c     16 90 17 90 
2ef30     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2ef34     29 90 28 90 
2ef38     29 90 28 90 
2ef3c     29 90 3C 90 
2ef40     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2ef44     3C 90 4F 90 
2ef48     4E 90 4E 90 
2ef4c     4E 90 4E 90 
2ef50     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2ef54     61 90 61 90 
2ef58     73 90 74 90 
2ef5c     74 90 74 90 
2ef60     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2ef64     87 90 86 90 
2ef68     87 90 86 90 
2ef6c     99 90 99 90 
2ef70     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2ef74     AB 90 AB 90 
2ef78     AC 90 AB 90 
2ef7c     AB 90 BF 90 
2ef80     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2ef84     BE 90 D1 90 
2ef88     D0 90 D1 90 
2ef8c     D1 90 D1 90 
2ef90     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2ef94     E3 90 E4 90 
2ef98     F6 90 F6 90 
2ef9c     F6 90 F6 90 
2efa0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2efa4     09 91 0A 91 
2efa8     0A 91 1C 91 
2efac     1C 91 1C 91 
2efb0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2efb4     2F 91 2E 91 
2efb8     2F 91 2F 91 
2efbc     2E 91 41 91 
2efc0     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2efc4     41 91 53 91 
2efc8     54 91 54 91 
2efcc     53 91 54 91 
2efd0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2efd4     67 91 67 91 
2efd8     79 91 7A 91 
2efdc     79 91 78 91 
2efe0     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2efe4     8C 91 8B 91 
2efe8     8C 91 8C 91 
2efec     9E 91 9E 91 
2eff0     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2eff4     B1 91 B1 91 
2eff8     B2 91 B1 91 
2effc     B1 91 C4 91 
2f000     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2f004     C4 91 D6 91 
2f008     D7 91 D7 91 
2f00c     D7 91 D6 91 
2f010     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2f014     EA 91 EA 91 
2f018     EA 91 FC 91 
2f01c     FC 91 FB 91 
2f020     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2f024     0E 92 0F 92 
2f028     0F 92 0E 92 
2f02c     21 92 21 92 
2f030     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2f034     21 92 34 92 
2f038     33 92 34 92 
2f03c     34 92 47 92 
2f040     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2f044     46 92 47 92 
2f048     59 92 59 92 
2f04c     59 92 59 92 
2f050     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2f054     6C 92 6C 92 
2f058     6B 92 7E 92 
2f05c     7E 92 7E 92 
2f060     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2f064     92 92 91 92 
2f068     91 92 90 92 
2f06c     91 92 A4 92 
2f070     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2f074     A3 92 B6 92 
2f078     B6 92 B7 92 
2f07c     B7 92 B6 92 
2f080     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2f084     CA 92 C9 92 
2f088     CA 92 DC 92 
2f08c     DC 92 DC 92 
2f090     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2f094     EF 92 EF 92 
2f098     EF 92 EF 92 
2f09c     01 93 01 93 
2f0a0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2f0a4     15 93 14 93 
2f0a8     14 93 14 93 
2f0ac     14 93 27 93 
2f0b0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2f0b4     27 93 39 93 
2f0b8     3A 93 39 93 
2f0bc     39 93 39 93 
2f0c0     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2f0c4     4B 93 4C 93 
2f0c8     5F 93 5F 93 
2f0cc     5F 93 5E 93 
2f0d0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2f0d4     5F 93 84 93 
2f0d8     4C 93 96 93 
2f0dc     5F 93 AE 94 
2f0e0     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2f0e4     7B C1 00 00 
2f0e8     00 00 00 00 
2f0ec     00 00 00 00 
2f0f0     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f0f4     00 00 00 00 | 	byte	$00, $00, $00, $00
2f0f8     00 00 00 00 | zero long 0
2f0fc     7A D7 00 80 
2f100     87 8A 48 8F 
2f104     EC 8C 76 8D 
2f108     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2f10c     3C 8D 82 8D 
2f110     42 8D 88 8D 
2f114     8C 8D 8E 8D 
2f118     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2f11c     97 8D DE 8D 
2f120     E1 8D F1 8E 
2f124     D8 8C A3 83 
2f128     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2f12c     65 71 C9 65 
2f130     FC 64 C4 65 
2f134     C1 65 BF 65 
2f138     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2f13c     B6 65 B4 65 
2f140     B2 65 AE 65 
2f144     AC 65 ED 65 
2f148     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2f14c     5E 65 25 66 
2f150     FA 62 23 6B 
2f154     B5 6C 61 0A 
2f158     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2f15c     5D 90 BE 8D 
2f160     47 8E C3 8D 
2f164     09 8E C9 8D 
2f168     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2f16c     15 8E 19 8E 
2f170     1B 8E 62 8E 
2f174     64 8E 68 8E 
2f178     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2f17c     B5 8E 4C 90 
2f180     FA 84 3C 9D 
2f184     98 13 79 6D 
2f188     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2f18c     D9 66 50 66 
2f190     D4 66 4B 66 
2f194     8C 66 46 66 
2f198     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2f19c     81 66 3A 66 
2f1a0     7C 66 36 66 
2f1a4     76 66 30 66 
2f1a8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2f1ac     6B 66 88 72 
2f1b0     BF 37 E7 B7 
2f1b4     75 83 8B 8E 
2f1b8     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2f1bc     94 8E 96 8E 
2f1c0     DD 8E 9C 8E 
2f1c4     E2 8E A2 8E 
2f1c8     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2f1cc     EE 8E AE 8E 
2f1d0     38 8F B5 8E 
2f1d4     3F 8F FD 8E 
2f1d8     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2f1dc     A5 87 1E E3 
2f1e0     6D 5D FA 71 
2f1e4     41 64 25 67 
2f1e8     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2f1ec     D9 66 1A 67 
2f1f0     18 67 15 67 
2f1f4     12 67 0F 67 
2f1f8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2f1fc     07 67 C0 66 
2f200     01 67 BC 66 
2f204     B8 66 DE 64 
2f208     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2f20c     43 E5 1F 8B 
2f210     14 8A F1 90 
2f214     1C 8F 63 8F 
2f218     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2f21c     29 8F 6E 8F 
2f220     72 8F 75 8F 
2f224     34 8F BE 8F 
2f228     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2f22c     84 8F 87 8F 
2f230     CC 8F 56 90 
2f234     67 91 49 80 
2f238     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2f23c     46 77 A6 66 
2f240     E8 66 B0 67 
2f244     AD 67 ED 67 
2f248     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2f24c     A2 67 E3 67 
2f250     9D 67 9A 67 
2f254     98 67 94 67 
2f258     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2f25c     49 67 CD 67 
2f260     28 65 5F 6E 
2f264     82 67 3A 01 
2f268     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2f26c     C2 91 A9 8F 
2f270     EF 8F AE 8F 
2f274     F4 8F B5 8F 
2f278     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2f27c     01 90 03 90 
2f280     07 90 09 90 
2f284     0C 90 53 90 
2f288     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2f28c     18 90 44 93 
2f290     85 84 D6 9D 
2f294     87 1F 2F 75 
2f298     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2f29c     C4 68 F6 67 
2f2a0     BE 68 F1 67 
2f2a4     76 68 2E 68 
2f2a8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2f2ac     27 68 24 68 
2f2b0     64 68 1E 68 
2f2b4     5F 68 19 68 
2f2b8     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2f2bc     DC 68 56 72 
2f2c0     7E 36 C2 B8 
2f2c4     D7 84 73 90 
2f2c8     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2f2cc     7B 90 7F 90 
2f2d0     82 90 84 90 
2f2d4     CB 90 8B 90 
2f2d8     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2f2dc     D7 90 96 90 
2f2e0     20 91 59 90 
2f2e4     25 91 A2 90 
2f2e8     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2f2ec     D0 89 40 EE 
2f2f0     12 64 C4 71 
2f2f4     29 66 0C 69 
2f2f8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2f2fc     C0 68 02 69 
2f300     FE 68 FB 68 
2f304     F9 68 F6 68 
2f308     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2f30c     EE 68 A8 68 
2f310     2C 69 5F 68 
2f314     E2 68 81 66 
2f318     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2f31c     1E EB A6 8A 
2f320     73 8B 5E 93 
2f324     7B 90 48 91 
2f328     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2f32c     0D 91 11 91 
2f330     14 91 16 91 
2f334     5C 91 1C 91 
2f338     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2f33c     68 91 AF 91 
2f340     2A 91 B5 91 
2f344     75 91 1A 94 
2f348     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2f34c     70 0E CB 6C 
2f350     5D 6E C4 67 
2f354     99 69 54 69 
2f358     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2f35c     D2 69 49 69 
2f360     89 69 86 69 
2f364     40 69 C4 69 
2f368     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2f36c     35 69 76 69 
2f370     58 67 EB 6D 
2f374     E9 6D 89 0F 
2f378     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2f37c     33 94 94 91 
2f380     D9 91 56 91 
2f384     E0 91 9F 91 
2f388     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2f38c     EC 91 EE 91 
2f390     F1 91 F4 91 
2f394     F7 91 3D 92 
2f398     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2f39c     46 92 21 94 
2f3a0     11 89 A4 9D 
2f3a4     FD 0E 8F 6C 
2f3a8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2f3ac     28 6A E1 69 
2f3b0     65 6A 1F 6A 
2f3b4     5F 6A 1A 6A 
2f3b8     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2f3bc     54 6A 0F 6A 
2f3c0     4F 6A 09 6A 
2f3c4     06 6A 03 6A 
2f3c8     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2f3cc     23 68 69 77 
2f3d0     3A 4D 38 CA 
2f3d4     38 86 4E 91 
2f3d8     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2f3dc     64 92 24 92 
2f3e0     6A 92 2A 92 
2f3e4     70 92 30 92 
2f3e8     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2f3ec     7B 92 7E 92 
2f3f0     C5 92 84 92 
2f3f4     CB 92 8A 92 
2f3f8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2f3fc     4D 8D F9 E2 
2f400     97 59 FE 74 
2f404     DB 68 6D 6A 
2f408     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2f40c     A8 6A A5 6A 
2f410     A3 6A 9F 6A 
2f414     9D 6A 9B 6A 
2f418     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2f41c     D6 6A 8F 6A 
2f420     CF 6A 46 6A 
2f424     CA 6A E1 67 
2f428     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2f42c     D3 F7 15 92 
2f430     90 8C BF 94 
2f434     A6 92 EB 92 
2f438     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2f43c     B1 92 F7 92 
2f440     FA 92 FD 92 
2f444     00 93 02 93 
2f448     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2f44c     4F 93 52 93 
2f450     54 93 22 94 
2f454     5A 93 8F 88 
2f458     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2f45c     1C 77 07 6C 
2f460     E8 69 7A 6B 
2f464     34 6B 75 6B 
2f468     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2f46c     29 6B 26 6B 
2f470     24 6B 21 6B 
2f474     1D 6B 5E 6B 
2f478     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2f47c     12 6B 52 6B 
2f480     34 69 34 6E 
2f484     BA 73 A4 24 
2f488     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2f48c     7A 94 B3 93 
2f490     72 93 31 93 
2f494     78 93 7A 93 
2f498     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2f49c     83 93 86 93 
2f4a0     89 93 D0 93 
2f4a4     D2 93 D5 93 
2f4a8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2f4ac     DD 93 40 96 
2f4b0     30 8B 99 9C 
2f4b4     52 10 94 71 
2f4b8     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2f4bc     46 6C 79 6B 
2f4c0     40 6C B7 6B 
2f4c4     F7 6B B1 6B 
2f4c8     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2f4cc     EC 6B A5 6B 
2f4d0     A2 6B 9F 6B 
2f4d4     9D 6B 9A 6B 
2f4d8     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2f4dc     C8 6A E4 76 
2f4e0     20 4B F9 CE 
2f4e4     2E 8A 1A 92 
2f4e8     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2f4ec     FB 93 BA 93 
2f4f0     01 94 03 94 
2f4f4     4A 94 09 94 
2f4f8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2f4fc     55 94 14 94 
2f500     9E 94 1A 94 
2f504     61 94 20 94 
2f508     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2f50c     3E 87 E5 CD 
2f510     5F 50 6C 78 
2f514     B5 6A 04 6C 
2f518     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2f51c     83 6C 7F 6C 
2f520     7C 6C 36 6C 
2f524     76 6C 74 6C 
2f528     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2f52c     6B 6C 25 6C 
2f530     66 6C 1F 6C 
2f534     1D 6C 41 6A 
2f538     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2f53c     BA FA FC 94 
2f540     5B 8D 97 96 
2f544     3B 94 C5 94 
2f548     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2f54c     89 94 8C 94 
2f550     8F 94 92 94 
2f554     94 94 DB 94 
2f558     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2f55c     E4 94 E7 94 
2f560     2D 95 74 95 
2f564     C8 96 15 89 
2f568     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2f56c     CB 75 31 6F 
2f570     7E 6B 10 6D 
2f574     C9 6C 0A 6D 
2f578     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2f57c     BD 6C FF 6C 
2f580     FB 6C F9 6C 
2f584     B2 6C F3 6C 
2f588     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2f58c     A7 6C E8 6C 
2f590     0D 6B 85 6F 
2f594     C7 74 10 28 
2f598     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2f59c     96 96 47 95 
2f5a0     06 95 0A 95 
2f5a4     0C 95 0F 95 
2f5a8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2f5ac     17 95 5E 95 
2f5b0     61 95 63 95 
2f5b4     22 95 AC 95 
2f5b8     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2f5bc     72 95 17 98 
2f5c0     59 8E 01 96 
2f5c4     CF FC 5A 68 
2f5c8     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2f5cc     96 6D 50 6D 
2f5d0     D5 6D 4A 6D 
2f5d4     8C 6D 89 6D 
2f5d8     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2f5dc     80 6D 3A 6D 
2f5e0     7A 6D 77 6D 
2f5e4     75 6D 71 6D 
2f5e8     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2f5ec     18 6C BC 78 
2f5f0     9A 4F 7E CF 
2f5f4     1F 89 F1 93 
2f5f8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2f5fc     D2 95 4E 95 
2f600     D7 95 53 95 
2f604     DD 95 E0 95 
2f608     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2f60c     A5 95 EB 95 
2f610     EE 95 F0 95 
2f614     37 96 B3 95 
2f618     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2f61c     1A 98 D5 8D 
2f620     C5 9F CD 0F 
2f624     0F 71 F3 73 
2f628     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2f62c     D9 6D 5E 6E 
2f630     D3 6D 58 6E 
2f634     12 6E 0F 6E 
2f638     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2f63c     49 6E BF 6D 
2f640     87 6E 76 6D 
2f644     81 6E 11 6B 
2f648     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2f64c     3F 09 44 95 
2f650     E5 8D 3F 99 
2f654     D4 95 A2 96 
2f658     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2f65c     23 96 69 96 
2f660     6B 96 6E 96 
2f664     71 96 74 96 
2f668     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2f66c     BF 96 3C 96 
2f670     C6 96 C8 96 
2f674     A3 98 51 8D 
2f678     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2f67c     CF 75 29 73 
2f680     90 6C EC 6E 
2f684     62 6E E7 6E 
2f688     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2f68c     9A 6E 98 6E 
2f690     95 6E 91 6E 
2f694     8E 6E CF 6E 
2f698     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2f69c     40 6E C3 6E 
2f6a0     E8 6C 45 6F 
2f6a4     A5 7B C9 35 
2f6a8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2f6ac     2D 98 23 97 
2f6b0     E1 96 A0 96 
2f6b4     A4 96 EA 96 
2f6b8     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2f6bc     AF 96 F4 96 
2f6c0     F8 96 3E 97 
2f6c4     FD 96 43 97 
2f6c8     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2f6cc     08 97 6B 99 
2f6d0     D6 92 88 91 
2f6d4     D8 EE 84 66 
2f6d8     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2f6dc     2E 6F E7 6E 
2f6e0     6C 6F 24 6F 
2f6e4     21 6F 1F 6F 
2f6e8     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2f6ec     17 6F 13 6F 
2f6f0     54 6F 0E 6F 
2f6f4     0B 6F 4B 6F 
2f6f8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2f6fc     27 6D 1C 7B 
2f700     19 59 9F DB 
2f704     66 8E BC 94 
2f708     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2f70c     67 97 26 97 
2f710     6D 97 2B 97 
2f714     72 97 32 97 
2f718     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2f71c     C1 97 7F 97 
2f720     C6 97 85 97 
2f724     CB 97 CE 97 
2f728     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2f72c     EC 8A C4 C6 
2f730     68 4C F4 7D 
2f734     63 6E E8 6E 
2f738     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2f73c     ED 6F A7 6F 
2f740     E7 6F A0 6F 
2f744     E1 6F 9B 6F 
2f748     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2f74c     D5 6F 8F 6F 
2f750     CE 6F 45 6F 
2f754     86 6F 68 6D 
2f758     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2f75c     C0 13 AD A2 
2f760     A7 8E 79 99 
2f764     E6 97 E8 97 
2f768     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2f76c     F1 97 F3 97 
2f770     F6 97 F9 97 
2f774     FB 97 FE 97 
2f778     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2f77c     4A 98 0A 98 
2f780     93 98 0F 98 
2f784     7F 9B BF 8C 
2f788     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2f78c     91 7B 62 73 
2f790     1A 6E B9 70 
2f794     EB 6F B3 70 
2f798     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2f79c     25 70 20 70 
2f7a0     1E 70 1B 70 
2f7a4     18 70 15 70 
2f7a8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2f7ac     0D 70 09 70 
2f7b0     07 70 03 70 
2f7b4     01 70 FD 6F 
2f7b8     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2f7bc     F6 6F F2 6F 
2f7c0     EF 6F EC 6F 
2f7c4     2C 70 E6 6F 
2f7c8     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2f7cc     DD 6F 97 6F 
2f7d0     D7 6F 84 6E 
2f7d4     8F 6F 3F 7D 
2f7d8     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2f7da     00 00 00 00 | zero1 long 0
2f7de     FF FF FF FF 
2f7e2     FF FF       | atarist_spl file "atarist.spl" '512
2f7e4     00 00 00 00 
2f7e8     00 00 00 00 
2f7ec     00 00       | 	byte	$00[10]
2f7ee     17 7F F2 7F 
2f7f2     B2 7F 72 7F 
2f7f6     33 7F F4 7E 
2f7fa     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2f7fe     36 7E F5 7D 
2f802     E9 51 F2 0D 
2f806     8E 00 F3 FD 
2f80a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2f80e     57 FD 58 FD 
2f812     5B FD 5C FD 
2f816     5C FD 60 7D 
2f81a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2f81e     D6 7C 98 7C 
2f822     59 7C 1A 7C 
2f826     DC 7B 9E 7B 
2f82a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2f82e     F3 05 00 FD 
2f832     41 FB EA FA 
2f836     D9 FA DB FA 
2f83a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2f83e     E4 FA 9B 36 
2f842     F8 7A C0 7A 
2f846     84 7A 45 7A 
2f84a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2f84e     8E 79 51 79 
2f852     15 79 D7 78 
2f856     3C 1F EB FF 
2f85a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2f85e     6D F8 65 F8 
2f862     68 F8 6D F8 
2f866     70 F8 74 F8 
2f86a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2f86e     AB 60 79 60 
2f872     4B 60 1A 60 
2f876     E9 5F B9 5F 
2f87a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2f87e     FB 59 B2 0B 
2f882     92 FA 3A F7 
2f886     96 F6 79 F6 
2f88a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2f88e     82 F6 86 F6 
2f892     8C F6 DB 5D 
2f896     F1 5E C1 5E 
2f89a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2f89e     34 5E 04 5E 
2f8a2     D6 5D A6 5D 
2f8a6     78 5D D4 3E 
2f8aa     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2f8ae     27 F5 BA F4 
2f8b2     AB F4 AD F4 
2f8b6     B2 F4 B8 F4 
2f8ba     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2f8be     26 5D 2B 5D 
2f8c2     FC 5C CD 5C 
2f8c6     9F 5C 70 5C 
2f8ca     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2f8ce     E5 5B B8 5B 
2f8d2     DB 24 A7 FC 
2f8d6     D1 F4 4D F3 
2f8da     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2f8de     04 F3 0B F3 
2f8e2     11 F3 16 F3 
2f8e6     DE 18 98 5B 
2f8ea     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2f8ee     4E 4A 29 48 
2f8f2     A0 47 6A 47 
2f8f6     43 47 20 47 
2f8fa     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2f8fe     E2 F6 98 F2 
2f902     C5 F1 A3 F1 
2f906     A3 F1 A8 F1 
2f90a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2f90e     BF F1 00 3D 
2f912     EF 46 CD 46 
2f916     AA 46 86 46 
2f91a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2f91e     1C 46 F9 45 
2f922     D7 45 EE 43 
2f926     DE 02 E8 F3 
2f92a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2f92e     61 F0 65 F0 
2f932     6D F0 74 F0 
2f936     7C F0 84 F0 
2f93a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2f93e     8E 45 6D 45 
2f942     49 45 27 45 
2f946     05 45 E1 44 
2f94a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2f94e     F1 2F A9 FB 
2f952     8B F1 9B EF 
2f956     40 EF 36 EF 
2f95a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2f95e     4D EF 56 EF 
2f962     5E EF 7B 44 
2f966     8C 44 69 44 
2f96a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2f96e     03 44 E1 43 
2f972     C0 43 F5 37 
2f976     69 33 0F 11 
2f97a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2f97e     66 EE 37 EE 
2f982     38 EE 40 EE 
2f986     48 EE 51 EE 
2f98a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2f98e     7D 32 6A 32 
2f992     51 32 37 32 
2f996     1F 32 05 32 
2f99a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2f99e     B9 31 A1 31 
2f9a2     F1 04 F4 F1 
2f9a6     50 EE A0 ED 
2f9aa     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2f9ae     93 ED 9A ED 
2f9b2     A4 ED AD ED 
2f9b6     F4 27 C1 31 
2f9ba     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2f9be     78 31 5F 31 
2f9c2     46 31 2E 31 
2f9c6     15 31 FC 30 
2f9ca     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2f9ce     C4 EF 4A ED 
2f9d2     DC EC CB EC 
2f9d6     D2 EC DA EC 
2f9da     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2f9de     F9 EC 64 2F 
2f9e2     0A 31 F1 30 
2f9e6     D9 30 C0 30 
2f9ea     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2f9ee     78 30 5F 30 
2f9f2     46 30 38 23 
2f9f6     A6 F6 19 EE 
2f9fa     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2f9fe     20 EC 28 EC 
2fa02     32 EC 3C EC 
2fa06     47 EC 51 EC 
2fa0a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2fa0e     A3 22 93 22 
2fa12     7F 22 6E 22 
2fa16     5D 22 4C 22 
2fa1a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2fa1e     77 09 76 F1 
2fa22     CC EC F0 EB 
2fa26     CD EB CE EB 
2fa2a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2fa2e     ED EB F5 EB 
2fa32     3E F6 6B 22 
2fa36     5F 22 4E 22 
2fa3a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2fa3e     1B 22 0B 22 
2fa42     FA 21 E9 21 
2fa46     D8 21 4D FF 
2fa4a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2fa4e     92 EB 7B EB 
2fa52     82 EB 8C EB 
2fa56     97 EB A1 EB 
2fa5a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2fa5e     15 22 04 22 
2fa62     F3 21 E3 21 
2fa66     D2 21 C0 21 
2fa6a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2fa6e     8E 21 7D 21 
2fa72     9A F8 A4 ED 
2fa76     8E EB 2F EB 
2fa7a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2fa7e     37 EB 42 EB 
2fa82     4C EB 57 EB 
2fa86     B2 17 22 19 
2fa8a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2fa8e     FD 18 EF 18 
2fa92     E3 18 D6 18 
2fa96     CA 18 BD 18 
2fa9a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2fa9e     60 EC 35 EB 
2faa2     01 EB 01 EB 
2faa6     0C EB 16 EB 
2faaa     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2faae     34 EB D0 18 
2fab2     00 19 F4 18 
2fab6     E8 18 DA 18 
2faba     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2fabe     B6 18 A9 18 
2fac2     9D 18 91 05 
2fac6     F0 EF CA EB 
2faca     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2face     E8 EA F2 EA 
2fad2     FE EA 07 EB 
2fad6     12 EB C2 EF 
2fada     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2fade     D9 18 CD 18 
2fae2     C0 18 B3 18 
2fae6     A7 18 9B 18 
2faea     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2faee     B8 FC 30 EE 
2faf2     61 EB DC EA 
2faf6     CD EA D2 EA 
2fafa     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2fafe     F3 EA FE EA 
2fb02     D2 09 D1 18 
2fb06     C3 18 17 18 
2fb0a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2fb0e     66 11 52 11 
2fb12     49 11 41 11 
2fb16     38 11 E0 F4 
2fb1a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2fb1e     C9 EA C5 EA 
2fb22     CF EA DB EA 
2fb26     E6 EA EF EA 
2fb2a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2fb2e     89 11 80 11 
2fb32     78 11 6E 11 
2fb36     67 11 5D 11 
2fb3a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2fb3e     43 11 32 0D 
2fb42     9C F1 07 EC 
2fb46     F8 EA CD EA 
2fb4a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2fb4e     E4 EA ED EA 
2fb52     F8 EA 02 EB 
2fb56     55 11 91 11 
2fb5a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2fb5e     75 11 6E 11 
2fb62     64 11 5E 11 
2fb66     54 11 4A 11 
2fb6a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2fb6e     A8 EB F1 EA 
2fb72     D9 EA DC EA 
2fb76     E8 EA F1 EA 
2fb7a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2fb7e     A6 EB 9E 11 
2fb82     A0 11 96 11 
2fb86     8D 11 85 11 
2fb8a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2fb8e     6A 11 CA 0D 
2fb92     36 0B 57 F8 
2fb96     6C ED 57 EB 
2fb9a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2fb9e     F4 EA FF EA 
2fba2     09 EB 15 EB 
2fba6     1E EB 1A FD 
2fbaa     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2fbae     ED 0A E8 0A 
2fbb2     E2 0A DC 0A 
2fbb6     D6 0A D1 0A 
2fbba     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2fbbe     F8 F3 BC EC 
2fbc2     57 EB 1E EB 
2fbc6     18 EB 24 EB 
2fbca     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2fbce     42 EB 4D EB 
2fbd2     08 09 20 0B 
2fbd6     1A 0B 14 0B 
2fbda     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2fbde     04 0B FE 0A 
2fbe2     F9 0A F2 0A 
2fbe6     84 08 3A F1 
2fbea     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2fbee     42 EB 42 EB 
2fbf2     4E EB 57 EB 
2fbf6     62 EB 6B EB 
2fbfa     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2fbfe     48 0B 43 0B 
2fc02     3C 0B 36 0B 
2fc06     31 0B 2C 0B 
2fc0a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2fc0e     1B 0B 5C 00 
2fc12     6A EF 1B EC 
2fc16     81 EB 6A EB 
2fc1a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2fc1e     85 EB 8E EB 
2fc22     99 EB A3 EB 
2fc26     DD 05 E5 05 
2fc2a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2fc2e     DB 05 D8 05 
2fc32     D5 05 D1 05 
2fc36     D0 05 CB 05 
2fc3a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2fc3e     0C EC BB EB 
2fc42     B3 EB BB EB 
2fc46     C5 EB D0 EB 
2fc4a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2fc4e     E4 F7 2C 06 
2fc52     28 06 24 06 
2fc56     22 06 1F 06 
2fc5a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2fc5e     16 06 14 06 
2fc62     0F 06 D0 F3 
2fc66     65 ED 2D EC 
2fc6a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2fc6e     01 EC 0A EC 
2fc72     14 EC 1E EC 
2fc76     29 EC FB 03 
2fc7a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2fc7e     63 06 60 06 
2fc82     5E 06 59 06 
2fc86     58 06 54 06 
2fc8a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2fc8e     69 F1 21 ED 
2fc92     55 EC 33 EC 
2fc96     36 EC 40 EC 
2fc9a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2fc9e     5C EC 68 EC 
2fca2     92 02 D9 02 
2fca6     D7 02 D7 02 
2fcaa     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2fcae     D1 02 D1 02 
2fcb2     CE 02 CD 02 
2fcb6     5D FC 80 EF 
2fcba     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2fcbe     83 EC 8A EC 
2fcc2     93 EC 9C EC 
2fcc6     A5 EC B1 EC 
2fcca     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2fcce     2B 03 2A 03 
2fcd2     29 03 26 03 
2fcd6     25 03 24 03 
2fcda     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2fcde     1F 03 70 F7 
2fce2     D0 EE 27 ED 
2fce6     DB EC D4 EC 
2fcea     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2fcee     F0 EC FA EC 
2fcf2     02 ED F9 F4 
2fcf6     7B 03 7C 03 
2fcfa     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2fcfe     75 03 73 03 
2fd02     72 03 70 03 
2fd06     6D 03 6C 03 
2fd0a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2fd0e     54 ED 22 ED 
2fd12     22 ED 2C ED 
2fd16     35 ED 3F ED 
2fd1a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2fd1e     14 01 C3 03 
2fd22     C1 03 C0 03 
2fd26     5F 01 A5 00 
2fd2a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2fd2e     7B 00 7C 00 
2fd32     20 00 85 F1 
2fd36     2A EE 89 ED 
2fd3a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2fd3e     80 ED 87 ED 
2fd42     90 ED 9A ED 
2fd46     A3 ED 73 00 
2fd4a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2fd4e     D0 00 D0 00 
2fd52     D0 00 D0 00 
2fd56     D0 00 CF 00 
2fd5a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2fd5e     80 F0 3D EE 
2fd62     D5 ED C7 ED 
2fd66     CD ED D6 ED 
2fd6a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2fd6e     F2 ED FA ED 
2fd72     1D 01 29 01 
2fd76     27 01 27 01 
2fd7a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2fd7e     25 01 26 01 
2fd82     26 01 23 01 
2fd86     D0 F7 EC EF 
2fd8a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2fd8e     1C EE 24 EE 
2fd92     2D EE 37 EE 
2fd96     40 EE 47 EE 
2fd9a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2fd9e     7D 01 7B 01 
2fda2     7A 01 7A 01 
2fda6     79 01 78 01 
2fdaa     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2fdae     84 FE DE F3 
2fdb2     6C EF 93 EE 
2fdb6     72 EE 72 EE 
2fdba     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2fdbe     8B EE 95 EE 
2fdc2     9E EE 15 FC 
2fdc6     67 FE 67 FE 
2fdca     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2fdce     6B FE 6B FE 
2fdd2     6D FE 6D FE 
2fdd6     6D FE 6F FE 
2fdda     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2fdde     DF EE CC EE 
2fde2     CF EE D9 EE 
2fde6     E1 EE EA EE 
2fdea     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2fdee     5A FE C4 FE 
2fdf2     C3 FE C5 FE 
2fdf6     C6 FE C6 FE 
2fdfa     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2fdfe     C8 FE C7 FE 
2fe02     DA FB 85 F1 
2fe06     8D EF 31 EF 
2fe0a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2fe0e     34 EF 3E EF 
2fe12     46 EF 4F EF 
2fe16     57 EF 0D FF 
2fe1a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2fe1e     1F FF 1F FF 
2fe22     21 FF 21 FF 
2fe26     21 FF 21 FF 
2fe2a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2fe2e     15 F1 BE EF 
2fe32     84 EF 7E EF 
2fe36     88 EF 8F EF 
2fe3a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2fe3e     A9 EF 06 F2 
2fe42     A6 FC AB FC 
2fe46     AD FC AE FC 
2fe4a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2fe4e     B2 FC B4 FC 
2fe52     B6 FC B7 FC 
2fe56     8B F4 BD F0 
2fe5a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2fe5e     E4 EF EE EF 
2fe62     F6 EF FD EF 
2fe66     04 F0 0E F0 
2fe6a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2fe6e     0B FD 0D FD 
2fe72     0F FD 11 FD 
2fe76     11 FD 13 FD 
2fe7a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2fe7e     17 FD 64 F3 
2fe82     CD F0 52 F0 
2fe86     41 F0 45 F0 
2fe8a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2fe8e     5B F0 64 F0 
2fe92     6D F0 FB FC 
2fe96     65 FD 68 FD 
2fe9a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2fe9e     6C FD 6D FD 
2fea2     6F FD 70 FD 
2fea6     72 FD B3 FB 
2feaa     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2feae     A4 F0 99 F0 
2feb2     A0 F0 A8 F0 
2feb6     AE F0 B9 F0 
2feba     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2febe     CB FB DD FB 
2fec2     DE FB E0 FB 
2fec6     E3 FB E3 FB 
2feca     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2fece     E9 FB EC FB 
2fed2     62 F7 27 F2 
2fed6     2A F1 FF F0 
2feda     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2fede     0C F1 13 F1 
2fee2     1B F1 23 F1 
2fee6     33 F2 3C FC 
2feea     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2feee     42 FC 45 FC 
2fef2     47 FC 48 FC 
2fef6     4A FC 4C FC 
2fefa     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2fefe     20 F2 77 F1 
2ff02     5C F1 5F F1 
2ff06     64 F1 6C F1 
2ff0a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2ff0e     83 F1 DC F8 
2ff12     9A FC 9A FC 
2ff16     9B FC 9E FC 
2ff1a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2ff1e     A3 FC A4 FC 
2ff22     A6 FC A9 FC 
2ff26     90 F4 33 F2 
2ff2a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2ff2e     BA F1 BF F1 
2ff32     C7 F1 CE F1 
2ff36     D6 F1 DC F1 
2ff3a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2ff3e     F3 FC F5 FC 
2ff42     FE FB 79 FB 
2ff46     62 FB 5F FB 
2ff4a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2ff4e     6F FA AF F3 
2ff52     53 F2 12 F2 
2ff56     0F F2 15 F2 
2ff5a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2ff5e     2A F2 32 F2 
2ff62     38 F2 9A FB 
2ff66     AF FB B1 FB 
2ff6a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2ff6e     B7 FB B8 FB 
2ff72     BA FB BC FB 
2ff76     C1 FB 3B F8 
2ff7a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2ff7e     6E F2 6C F2 
2ff82     74 F2 7A F2 
2ff86     81 F2 87 F2 
2ff8a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2ff8e     06 FC 09 FC 
2ff92     0C FC 0E FC 
2ff96     0F FC 12 FC 
2ff9a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2ff9e     17 FC 1A FC 
2ffa2     B2 F6 7B F3 
2ffa6     DD F2 C5 F2 
2ffaa     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2ffae     D4 F2 DB F2 
2ffb2     E0 F2 E8 F2 
2ffb6     28 F8 60 FC 
2ffba     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2ffbe     64 FC 66 FC 
2ffc2     68 FC 6A FC 
2ffc6     6D FC 52 FC 
2ffca     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2ffce     78 F3 24 F3 
2ffd2     1A F3 1E F3 
2ffd6     24 F3 2A F3 
2ffda     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2ffde     3D F3 80 FA 
2ffe2     0C FB 0F FB 
2ffe6     10 FB 14 FB 
2ffea     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2ffee     1B FB 1D FB 
2fff2     1F FB 92 FA 
2fff6     DE F4 AE F3 
2fffa     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2fffe     79 F3 7E F3 
30002     84 F3 8C F3 
30006     92 F3 97 F3 
3000a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3000e     67 FB 69 FB 
30012     6B FB 6F FB 
30016     71 FB 72 FB 
3001a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3001e     E3 F8 BA F4 
30022     EE F3 CC F3 
30026     CA F3 CF F3 
3002a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3002e     E2 F3 E8 F3 
30032     ED F3 B7 FB 
30036     BC FB BE FB 
3003a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3003e     C4 FB C6 FB 
30042     C8 FB C9 FB 
30046     CC FB 8F F7 
3004a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3004e     1E F4 1E F4 
30052     24 F4 2A F4 
30056     30 F4 38 F4 
3005a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3005e     AD FA B1 FA 
30062     B4 FA B6 FA 
30066     BA FA BB FA 
3006a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3006e     C2 FA C6 FA 
30072     55 F6 C6 F4 
30076     7D F4 72 F4 
3007a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3007e     83 F4 89 F4 
30082     8F F4 94 F4 
30086     66 FA 03 FB 
3008a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3008e     0A FB 0E FB 
30092     10 FB 11 FB 
30096     16 FB 18 FB 
3009a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3009e     F9 F4 CA F4 
300a2     C5 F4 CB F4 
300a6     D1 F4 D7 F4 
300aa     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
300ae     E8 F4 3F FB 
300b2     56 FB 58 FB 
300b6     5A FB 5E FB 
300ba     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
300be     64 FB 64 FB 
300c2     69 FB 99 F9 
300c6     E9 F5 33 F5 
300ca     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
300ce     1D F5 22 F5 
300d2     27 F5 2E F5 
300d6     32 F5 37 F5 
300da     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
300de     BC FA BC FA 
300e2     C1 FA C2 FA 
300e6     C4 FA C8 FA 
300ea     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
300ee     F9 F7 DB F5 
300f2     78 F5 69 F5 
300f6     6A F5 70 F5 
300fa     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
300fe     7F F5 85 F5 
30102     6E F7 06 FB 
30106     0A FB 0B FB 
3010a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3010e     14 FB 15 FB 
30112     18 FB 1B FB 
30116     1D FB 70 F7 
3011a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3011e     B6 F5 BB F5 
30122     C0 F5 C6 F5 
30126     CA F5 CF F5 
3012a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3012e     54 FB 56 FB 
30132     5A FB 5B FB 
30136     5E FB 5F FB 
3013a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3013e     67 FB 52 FB 
30142     29 F7 33 F6 
30146     06 F6 02 F6 
3014a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3014e     10 F6 16 F6 
30152     1A F6 1F F6 
30156     81 FB 9F FB 
3015a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3015e     51 FB F2 FA 
30162     E3 FA E3 FA 
30166     E5 FA E9 FA 
3016a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3016e     64 F6 4D F6 
30172     4D F6 53 F6 
30176     57 F6 5C F6 
3017a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3017e     6A F6 19 FB 
30182     1E FB 22 FB 
30186     23 FB 24 FB 
3018a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3018e     2C FB 2E FB 
30192     32 FB F0 F8 
30196     01 F7 A5 F6 
3019a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3019e     9F F6 A3 F6 
301a2     A6 F6 AC F6 
301a6     B0 F6 EB F7 
301aa     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
301ae     68 FB 6C FB 
301b2     6E FB 71 FB 
301b6     72 FB 74 FB 
301ba     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
301be     71 F8 21 F7 
301c2     E5 F6 DD F6 
301c6     E1 F6 E6 F6 
301ca     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
301ce     F5 F6 F7 F6 
301d2     F7 FA AB FB 
301d6     AD FB AF FB 
301da     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
301de     B6 FB B9 FB 
301e2     BB FB BC FB 
301e6     21 FB 07 F8 
301ea     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
301ee     22 F7 26 F7 
301f2     2B F7 2E F7 
301f6     34 F7 38 F7 
301fa     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
301fe     13 FB 16 FB 
30202     17 FB 1B FB 
30206     1E FB 20 FB 
3020a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3020e     26 FB 77 FA 
30212     F3 F7 7C F7 
30216     67 F7 6A F7 
3021a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3021e     74 F7 7A F7 
30222     7E F7 82 F7 
30226     53 FB 5A FB 
3022a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3022e     5F FB 63 FB 
30232     65 FB 67 FB 
30236     69 FB 6A FB 
3023a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3023e     B5 F7 A9 F7 
30242     AD F7 B0 F7 
30246     B5 F7 B8 F7 
3024a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3024e     6E F8 99 FB 
30252     9C FB 9D FB 
30256     9F FB A4 FB 
3025a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3025e     A9 FB AB FB 
30262     AD FB 46 F9 
30266     26 F8 F0 F7 
3026a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3026e     F4 F7 F8 F7 
30272     FB F7 FF F7 
30276     03 F8 65 FA 
3027a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3027e     2B FB 2F FB 
30282     30 FB 32 FB 
30286     34 FB 38 FB 
3028a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3028e     E9 F8 4A F8 
30292     2E F8 2C F8 
30296     2F F8 36 F8 
3029a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3029e     41 F8 44 F8 
302a2     4A FB 67 FB 
302a6     68 FB 6B FB 
302aa     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
302ae     73 FB 74 FB 
302b2     78 FB 7A FB 
302b6     14 FB E7 F8 
302ba     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
302be     6D F8 70 F8 
302c2     73 F8 78 F8 
302c6     7C F8 80 F8 
302ca     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
302ce     A6 FB A7 FB 
302d2     A9 FB AC FB 
302d6     AF FB B1 FB 
302da     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
302de     B7 FB 73 FA 
302e2     F8 F8 B4 F8 
302e6     A9 F8 AB F8 
302ea     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
302ee     B4 F8 B8 F8 
302f2     BB F8 FA F8 
302f6     64 FB 65 FB 
302fa     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
302fe     6D FB 6F FB 
30302     70 FB 74 FB 
30306     77 FB 77 FB 
3030a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3030e     E9 F8 E4 F8 
30312     E8 F8 EB F8 
30316     EE F8 F2 F8 
3031a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3031e     B5 FA 9F FB 
30322     A1 FB A4 FB 
30326     A5 FB A9 FB 
3032a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3032e     AE FB B1 FB 
30332     B2 FB C7 F9 
30336     39 F9 22 F9 
3033a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3033e     26 F9 2A F9 
30342     2E F9 32 F9 
30346     33 F9 BA FB 
3034a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3034e     DE FB E1 FB 
30352     E2 FB E4 FB 
30356     E5 FB E7 FB 
3035a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3035e     C5 F9 67 F9 
30362     57 F9 56 F9 
30366     5B F9 5F F9 
3036a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3036e     68 F9 6C F9 
30372     0B FC 11 FC 
30376     14 FC 15 FC 
3037a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3037e     B5 FB B5 FB 
30382     B6 FB B8 FB 
30386     E9 FA C8 F9 
3038a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3038e     90 F9 94 F9 
30392     95 F9 99 F9 
30396     9D F9 9F F9 
3039a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3039e     DE FB DF FB 
303a2     E2 FB E4 FB 
303a6     E6 FB E8 FB 
303aa     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
303ae     EF FB AC FA 
303b2     E9 F9 C7 F9 
303b6     C3 F9 C8 F9 
303ba     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
303be     D0 F9 D4 F9 
303c2     D6 F9 0E FB 
303c6     11 FC 13 FC 
303ca     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
303ce     19 FC 1B FC 
303d2     1D FC 1E FC 
303d6     21 FC 22 FC 
303da     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
303de     F7 F9 F7 F9 
303e2     FB F9 FE F9 
303e6     00 FA 03 FA 
303ea     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
303ee     1B FC 45 FC 
303f2     46 FC 48 FC 
303f6     4A FC 4B FC 
303fa     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
303fe     52 FC 54 FC 
30402     F3 FB 82 FA 
30406     35 FA 28 FA 
3040a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3040e     31 FA 32 FA 
30412     37 FA 37 FA 
30416     3C FA 00 FC 
3041a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3041e     09 FC 0B FC 
30422     0F FC 12 FC 
30426     12 FC 15 FC 
3042a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3042e     8D FA 60 FA 
30432     5B FA 5C FA 
30436     60 FA 61 FA 
3043a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3043e     6C FA 6D FA 
30442     37 FC 3A FC 
30446     3B FC 3D FC 
3044a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3044e     43 FC 44 FC 
30452     45 FC 47 FC 
30456     51 FB AB FA 
3045a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3045e     8E FA 91 FA 
30462     93 FA 95 FA 
30466     98 FA 9B FA 
3046a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3046e     68 FC 6A FC 
30472     6C FC 6E FC 
30476     70 FC 72 FC 
3047a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3047e     76 FC 3B FB 
30482     D0 FA BB FA 
30486     B9 FA BD FA 
3048a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3048e     C4 FA C6 FA 
30492     CA FA 13 FC 
30496     3A FC 3A FC 
3049a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3049e     41 FC 43 FC 
304a2     44 FC 47 FC 
304a6     48 FC 3C FC 
304aa     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
304ae     E6 FA E8 FA 
304b2     EB FA EE FA 
304b6     F0 FA F2 FA 
304ba     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
304be     61 FC 66 FC 
304c2     68 FC 6B FC 
304c6     6C FC 6E FC 
304ca     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
304ce     73 FC 75 FC 
304d2     13 FC 3F FB 
304d6     17 FB 12 FB 
304da     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
304de     1A FB 1D FB 
304e2     1F FB 20 FB 
304e6     23 FB 92 FC 
304ea     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
304ee     96 FC 97 FC 
304f2     9A FC 9C FC 
304f6     9E FC 9F FC 
304fa     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
304fe     5A FB 41 FB 
30502     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
30506     00 00 00 00 | zero2 long 0
3050a     01 00 00 00 
3050e     00 00 00 00 
30512     00 00 00 00 
30516     00 00 00 00 | mouse  file "mouse2.def"
3051a     00 00 00 00 
3051e     00 00 00 00 
30522     00 00 00 00 
30526     00 00 00 00 | 	byte	$00[16]
3052a     01 01 00 00 
3052e     00 00 00 00 
30532     00 00 00 00 
30536     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3053a     00 00 00 00 
3053e     00 00 00 00 
30542     00 00 00 00 
30546     00 00 00 00 | 	byte	$00[16]
3054a     01 0D 01 00 
3054e     00 00 00 00 
30552     00 00 00 00 
30556     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3055a     00 00 00 00 
3055e     00 00 00 00 
30562     00 00 00 00 
30566     00 00 00 00 | 	byte	$00[16]
3056a     01 0D 0D 01 
3056e     00 00 00 00 
30572     00 00 00 00 
30576     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3057a     00 00 00 00 
3057e     00 00 00 00 
30582     00 00 00 00 
30586     00 00 00 00 | 	byte	$00[16]
3058a     01 0D 0D 0D 
3058e     01 00 00 00 
30592     00 00 00 00 
30596     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3059a     00 00 00 00 
3059e     00 00 00 00 
305a2     00 00 00 00 
305a6     00 00 00 00 | 	byte	$00[16]
305aa     01 0D 0D 0D 
305ae     0D 01 00 00 
305b2     00 00 00 00 
305b6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
305ba     00 00 00 00 
305be     00 00 00 00 
305c2     00 00 00 00 
305c6     00 00 00 00 | 	byte	$00[16]
305ca     01 0D 0D 0D 
305ce     0D 0D 01 00 
305d2     00 00 00 00 
305d6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
305da     00 00 00 00 
305de     00 00 00 00 
305e2     00 00 00 00 
305e6     00 00 00 00 | 	byte	$00[16]
305ea     01 0D 0D 0D 
305ee     0D 0D 0D 01 
305f2     00 00 00 00 
305f6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
305fa     00 00 00 00 
305fe     00 00 00 00 
30602     00 00 00 00 
30606     00 00 00 00 | 	byte	$00[16]
3060a     01 0D 0D 0D 
3060e     0D 0D 0D 0C 
30612     01 00 00 00 
30616     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3061a     00 00 00 00 
3061e     00 00 00 00 
30622     00 00 00 00 
30626     00 00 00 00 | 	byte	$00[16]
3062a     01 0D 0D 0D 
3062e     0D 0D 0D 0D 
30632     0C 01 00 00 
30636     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3063a     00 00 00 00 
3063e     00 00 00 00 
30642     00 00 00 00 
30646     00 00 00 00 | 	byte	$00[16]
3064a     01 0D 0D 0D 
3064e     0D 0D 0D 0D 
30652     0D 0C 01 00 
30656     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3065a     00 00 00 00 
3065e     00 00 00 00 
30662     00 00 00 00 
30666     00 00 00 00 | 	byte	$00[16]
3066a     01 0D 0D 0D 
3066e     0D 0D 0D 0D 
30672     0D 0D 0B 01 
30676     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3067a     00 00 00 00 
3067e     00 00 00 00 
30682     00 00 00 00 
30686     00 00 00 00 | 	byte	$00[16]
3068a     01 0D 0D 0D 
3068e     0C 0D 0D 03 
30692     01 01 01 01 
30696     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3069a     00 00 00 00 
3069e     00 00 00 00 
306a2     00 00 00 00 
306a6     00 00 00 00 | 	byte	$00[16]
306aa     01 0D 0D 0C 
306ae     01 09 0D 03 
306b2     00 00 00 00 
306b6     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
306ba     00 00 00 00 
306be     00 00 00 00 
306c2     00 00 00 00 
306c6     00 00 00 00 | 	byte	$00[16]
306ca     01 0D 0C 01 
306ce     00 01 0D 0B 
306d2     01 00 00 00 
306d6     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
306da     00 00 00 00 
306de     00 00 00 00 
306e2     00 00 00 00 
306e6     00 00 00 00 | 	byte	$00[16]
306ea     01 0C 01 00 
306ee     00 01 0A 0D 
306f2     01 00 00 00 
306f6     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
306fa     00 00 00 00 
306fe     00 00 00 00 
30702     00 00 00 00 
30706     00 00 00 00 | 	byte	$00[16]
3070a     01 01 00 00 
3070e     00 00 01 0D 
30712     0B 01 00 00 
30716     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3071a     00 00 00 00 
3071e     00 00 00 00 
30722     00 00 00 00 
30726     00 00 00 00 
3072a     00 00 00 00 
3072e     00 00       | 	byte	$00[22]
30730     01 0B 0D 01 
30734     00 00 00 00 
30738     00 00 00 00 
3073c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30740     00 00 00 00 
30744     00 00 00 00 
30748     00 00 00 00 
3074c     00 00 00 00 
30750     00          | 	byte	$00[17]
30751     01 01 00 00 
30755     00 00 00 00 
30759     00 00 00 00 
3075d     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30761     00 00 00 00 
      ...             
30905     00 00 00 00 
30909     00          | 	byte	$00[425]
3090a     73 32 00 04 
3090e     00 00 10 00 
30912     00 00 00 00 
30916     00 00 00 00 | atari2 file "atari2.s2"
3091a     43 87 43 87 
3091e     43 87 44 87 
30922     43 87 44 87 
30926     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3092a     43 87 43 87 
3092e     43 87 44 87 
30932     43 87 43 87 
30936     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3093a     44 87 43 87 
3093e     44 87 43 87 
30942     43 87 43 87 
30946     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3094a     43 87 43 87 
3094e     44 87 43 87 
30952     44 87 44 87 
30956     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3095a     43 87 43 87 
3095e     44 87 43 87 
30962     43 87 42 87 
30966     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3096a     43 87 43 87 
3096e     43 87 43 87 
30972     44 87 43 87 
30976     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3097a     44 87 44 87 
3097e     43 87 44 87 
30982     43 87 44 87 
30986     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3098a     44 87 43 87 
3098e     44 87 44 87 
30992     43 87 43 87 
30996     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3099a     43 87 44 87 
3099e     44 87 43 87 
309a2     43 87 44 87 
309a6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
309aa     43 87 43 87 
309ae     43 87 43 87 
309b2     43 87 43 87 
309b6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
309ba     42 87 43 87 
309be     44 87 42 87 
309c2     43 87 43 87 
309c6     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
309ca     43 87 44 87 
309ce     44 87 43 87 
309d2     43 87 43 87 
309d6     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
309da     43 87 5C 87 
309de     EE 86 AC 87 
309e2     4C 7C A3 78 
309e6     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
309ea     BC 78 BB 78 
309ee     BD 78 BC 78 
309f2     BB 78 BD 78 
309f6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
309fa     BB 78 BB 78 
309fe     BC 78 BC 78 
30a02     BC 78 BB 78 
30a06     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
30a0a     BC 78 BC 78 
30a0e     BC 78 BC 78 
30a12     BC 78 BC 78 
30a16     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
30a1a     BB 78 BC 78 
30a1e     A0 78 4C 7C 
30a22     11 7A 29 89 
30a26     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
30a2a     44 87 43 87 
30a2e     44 87 43 87 
30a32     43 87 42 87 
30a36     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
30a3a     43 87 43 87 
30a3e     44 87 ED 85 
30a42     71 85 52 79 
30a46     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
30a4a     BC 78 BC 78 
30a4e     BC 78 BC 78 
30a52     BC 78 BC 78 
30a56     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
30a5a     BC 78 BC 78 
30a5e     BC 78 A0 78 
30a62     CF 7A B9 81 
30a66     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
30a6a     44 87 43 87 
30a6e     43 87 44 87 
30a72     43 87 44 87 
30a76     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
30a7a     43 87 43 87 
30a7e     43 87 43 87 
30a82     44 87 43 87 
30a86     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
30a8a     43 87 43 87 
30a8e     44 87 43 87 
30a92     44 87 43 87 
30a96     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
30a9a     44 87 43 87 
30a9e     43 87 43 87 
30aa2     5A 87 39 81 
30aa6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
30aaa     A5 78 BC 78 
30aae     BB 78 BC 78 
30ab2     BB 78 BC 78 
30ab6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
30aba     BC 78 BC 78 
30abe     BC 78 BC 78 
30ac2     BC 78 8F 79 
30ac6     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
30aca     09 85 47 87 
30ace     43 87 43 87 
30ad2     42 87 42 87 
30ad6     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
30ada     43 87 43 87 
30ade     43 87 43 87 
30ae2     43 87 44 87 
30ae6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
30aea     43 87 43 87 
30aee     44 87 43 87 
30af2     42 87 43 87 
30af6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
30afa     44 87 43 87 
30afe     43 87 43 87 
30b02     44 87 44 87 
30b06     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
30b0a     94 78 55 7A 
30b0e     B9 78 BC 78 
30b12     BC 78 BC 78 
30b16     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
30b1a     BC 78 BB 78 
30b1e     BC 78 BC 78 
30b22     BC 78 BC 78 
30b26     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
30b2a     BB 78 BC 78 
30b2e     BC 78 BC 78 
30b32     BB 78 BC 78 
30b36     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
30b3a     BC 78 BC 78 
30b3e     BD 78 BC 78 
30b42     BC 78 BB 78 
30b46     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
30b4a     94 78 B3 84 
30b4e     36 84 4A 87 
30b52     43 87 43 87 
30b56     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
30b5a     43 87 44 87 
30b5e     43 87 43 87 
30b62     43 87 43 87 
30b66     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30b6a     43 87 44 87 
30b6e     43 87 44 87 
30b72     43 87 43 87 
30b76     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
30b7a     43 87 43 87 
30b7e     43 87 45 87 
30b82     43 87 43 87 
30b86     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
30b8a     43 87 44 87 
30b8e     44 87 44 87 
30b92     43 87 43 87 
30b96     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
30b9a     43 87 42 87 
30b9e     43 87 43 87 
30ba2     44 87 43 87 
30ba6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
30baa     54 87 3C 82 
30bae     36 83 52 79 
30bb2     C6 78 BC 78 
30bb6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
30bba     BB 78 BB 78 
30bbe     BC 78 BC 78 
30bc2     BC 78 BC 78 
30bc6     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
30bca     BD 78 ED 78 
30bce     1B 79 F4 83 
30bd2     4D 83 4E 87 
30bd6     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
30bda     44 87 43 87 
30bde     42 87 44 87 
30be2     43 87 42 87 
30be6     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
30bea     43 87 54 87 
30bee     26 82 B3 84 
30bf2     D6 77 BB 78 
30bf6     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
30bfa     BC 78 BB 78 
30bfe     BB 78 BB 78 
30c02     BB 78 BB 78 
30c06     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
30c0a     BC 78 BC 78 
30c0e     26 79 18 75 
30c12     36 83 1F 84 
30c16     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
30c1a     43 87 43 87 
30c1e     43 87 43 87 
30c22     43 87 44 87 
30c26     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
30c2a     43 87 44 87 
30c2e     44 87 43 87 
30c32     43 87 43 87 
30c36     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
30c3a     43 87 43 87 
30c3e     43 87 43 87 
30c42     44 87 44 87 
30c46     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
30c4a     44 87 43 87 
30c4e     43 87 43 87 
30c52     43 87 44 87 
30c56     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
30c5a     44 87 44 87 
30c5e     44 87 43 87 
30c62     44 87 43 87 
30c66     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
30c6a     43 87 43 87 
30c6e     43 87 44 87 
30c72     44 87 43 87 
30c76     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
30c7a     43 87 43 87 
30c7e     43 87 43 87 
30c82     43 87 44 87 
30c86     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
30c8a     43 87 44 87 
30c8e     43 87 44 87 
30c92     19 87 7D 86 
30c96     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
30c9a     B1 78 BC 78 
30c9e     BC 78 BC 78 
30ca2     BC 78 BC 78 
30ca6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
30caa     BC 78 BC 78 
30cae     BD 78 BC 78 
30cb2     B7 78 3B 7B 
30cb6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
30cba     96 86 44 87 
30cbe     43 87 43 87 
30cc2     43 87 43 87 
30cc6     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
30cca     44 87 44 87 
30cce     43 87 44 87 
30cd2     43 87 44 87 
30cd6     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
30cda     43 87 44 87 
30cde     43 87 44 87 
30ce2     43 87 44 87 
30ce6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
30cea     43 87 44 87 
30cee     43 87 43 87 
30cf2     44 87 43 87 
30cf6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
30cfa     44 87 44 87 
30cfe     43 87 43 87 
30d02     43 87 44 87 
30d06     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
30d0a     43 87 43 87 
30d0e     43 87 43 87 
30d12     44 87 44 87 
30d16     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
30d1a     36 83 CF 7A 
30d1e     AB 78 BB 78 
30d22     BC 78 BC 78 
30d26     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
30d2a     BB 78 BC 78 
30d2e     BC 78 BC 78 
30d32     BC 78 BC 78 
30d36     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
30d3a     BC 78 BC 78 
30d3e     BC 78 BB 78 
30d42     BC 78 BC 78 
30d46     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
30d4a     BB 78 BC 78 
30d4e     BB 78 BC 78 
30d52     BC 78 BD 78 
30d56     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
30d5a     BC 78 BC 78 
30d5e     BC 78 BC 78 
30d62     BC 78 BD 78 
30d66     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
30d6a     BC 78 BB 78 
30d6e     BC 78 BB 78 
30d72     BB 78 BC 78 
30d76     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
30d7a     BC 78 BC 78 
30d7e     BC 78 BC 78 
30d82     BC 78 BB 78 
30d86     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
30d8a     BC 78 BC 78 
30d8e     BC 78 BD 78 
30d92     BB 78 BC 78 
30d96     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
30d9a     BC 78 BC 78 
30d9e     BC 78 BB 78 
30da2     BC 78 BB 78 
30da6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
30daa     BB 78 BC 78 
30dae     BC 78 BC 78 
30db2     BC 78 BB 78 
30db6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
30dba     BC 78 BC 78 
30dbe     BC 78 BB 78 
30dc2     BC 78 BB 78 
30dc6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
30dca     BC 78 BC 78 
30dce     BC 78 BC 78 
30dd2     BB 78 BC 78 
30dd6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
30dda     BC 78 9F 78 
30dde     52 79 B3 84 
30de2     2F 86 60 87 
30de6     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
30dea     44 87 43 87 
30dee     43 87 43 87 
30df2     43 87 43 87 
30df6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30dfa     43 87 43 87 
30dfe     43 87 44 87 
30e02     43 87 43 87 
30e06     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30e0a     43 87 43 87 
30e0e     43 87 43 87 
30e12     43 87 44 87 
30e16     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
30e1a     44 87 44 87 
30e1e     5E 87 BC 80 
30e22     FB 80 94 78 
30e26     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
30e2a     BD 78 BC 78 
30e2e     BB 78 BC 78 
30e32     BB 78 BB 78 
30e36     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
30e3a     BC 78 BB 78 
30e3e     BB 78 6B 79 
30e42     D6 77 AC 87 
30e46     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
30e4a     43 87 44 87 
30e4e     43 87 43 87 
30e52     44 87 43 87 
30e56     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
30e5a     43 87 44 87 
30e5e     43 87 5C 87 
30e62     E7 80 00 80 
30e66     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
30e6a     BC 78 BD 78 
30e6e     BC 78 BC 78 
30e72     BC 78 BB 78 
30e76     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
30e7a     BC 78 BC 78 
30e7e     BB 78 BC 78 
30e82     BB 78 BC 78 
30e86     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
30e8a     BB 78 BC 78 
30e8e     BC 78 BC 78 
30e92     BC 78 BC 78 
30e96     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
30e9a     BC 78 BC 78 
30e9e     BC 78 BC 78 
30ea2     A0 78 8D 7B 
30ea6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
30eaa     60 87 43 87 
30eae     44 87 44 87 
30eb2     43 87 43 87 
30eb6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
30eba     44 87 43 87 
30ebe     43 87 43 87 
30ec2     44 87 73 86 
30ec6     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
30eca     51 7B B6 78 
30ece     BC 78 BD 78 
30ed2     BC 78 BC 78 
30ed6     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
30eda     BB 78 BC 78 
30ede     BD 78 BB 78 
30ee2     BC 78 BB 78 
30ee6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
30eea     BC 78 BC 78 
30eee     BC 78 BC 78 
30ef2     BB 78 BC 78 
30ef6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
30efa     BC 78 BB 78 
30efe     BB 78 BC 78 
30f02     BC 78 BB 78 
30f06     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
30f0a     22 8C AF 84 
30f0e     48 87 43 87 
30f12     44 87 43 87 
30f16     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
30f1a     43 87 42 87 
30f1e     43 87 43 87 
30f22     44 87 43 87 
30f26     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
30f2a     43 87 43 87 
30f2e     44 87 44 87 
30f32     43 87 43 87 
30f36     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30f3a     43 87 43 87 
30f3e     43 87 43 87 
30f42     44 87 43 87 
30f46     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
30f4a     9F 8B D6 77 
30f4e     16 7C B3 78 
30f52     BC 78 BB 78 
30f56     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
30f5a     BB 78 BC 78 
30f5e     BB 78 BC 78 
30f62     BC 78 BC 78 
30f66     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
30f6a     BC 78 BB 78 
30f6e     BB 78 BC 78 
30f72     BB 78 BC 78 
30f76     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
30f7a     BB 78 BB 78 
30f7e     BC 78 BC 78 
30f82     BC 78 BB 78 
30f86     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
30f8a     BC 78 BC 78 
30f8e     BC 78 BD 78 
30f92     BB 78 BC 78 
30f96     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
30f9a     BC 78 BC 78 
30f9e     BC 78 BB 78 
30fa2     BC 78 BC 78 
30fa6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
30faa     A8 78 54 7E 
30fae     F4 83 17 82 
30fb2     50 87 43 87 
30fb6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
30fba     44 87 43 87 
30fbe     44 87 43 87 
30fc2     43 87 44 87 
30fc6     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
30fca     43 87 28 87 
30fce     20 85 CF 7A 
30fd2     70 7D AD 78 
30fd6     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
30fda     BB 78 BC 78 
30fde     BC 78 BC 78 
30fe2     BB 78 BB 78 
30fe6     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
30fea     BB 78 B2 78 
30fee     9A 7C CF 7A 
30ff2     4A 87 0D 87 
30ff6     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
30ffa     43 87 44 87 
30ffe     43 87 44 87 
31002     43 87 43 87 
31006     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3100a     44 87 43 87 
3100e     28 87 51 85 
31012     11 7A 1E 7D 
31016     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3101a     BC 78 BB 78 
3101e     BC 78 BC 78 
31022     BC 78 BC 78 
31026     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3102a     BB 78 BC 78 
3102e     BB 78 BC 78 
31032     BC 78 BC 78 
31036     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3103a     BB 78 BC 78 
3103e     BC 78 BC 78 
31042     BD 78 BB 78 
31046     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3104a     BC 78 BB 78 
3104e     BC 78 BC 78 
31052     BC 78 BB 78 
31056     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3105a     BC 78 BC 78 
3105e     BC 78 BC 78 
31062     BB 78 BC 78 
31066     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3106a     BC 78 BD 78 
3106e     BC 78 BC 78 
31072     BC 78 BB 78 
31076     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3107a     BC 78 BB 78 
3107e     BB 78 BC 78 
31082     BC 78 BB 78 
31086     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3108a     BB 78 BB 78 
3108e     BB 78 BC 78 
31092     B6 78 48 7D 
31096     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3109a     56 87 43 87 
3109e     42 87 44 87 
310a2     44 87 43 87 
310a6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
310aa     43 87 44 87 
310ae     43 87 44 87 
310b2     4C 87 7E 83 
310b6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
310ba     F7 78 BC 78 
310be     BC 78 BB 78 
310c2     BB 78 BC 78 
310c6     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
310ca     BC 78 BB 78 
310ce     BC 78 BC 78 
310d2     BB 78 BC 78 
310d6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
310da     BB 78 BC 78 
310de     BC 78 BC 78 
310e2     BC 78 BB 78 
310e6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
310ea     BC 78 BC 78 
310ee     BC 78 BC 78 
310f2     BC 78 BB 78 
310f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
310fa     BC 78 BB 78 
310fe     BB 78 BC 78 
31102     BC 78 BB 78 
31106     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3110a     BC 78 BC 78 
3110e     BB 78 BC 78 
31112     BC 78 BC 78 
31116     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3111a     73 32 00 04 
3111e     00 00 10 00 
31122     00 00 00 00 
31126     00 00 00 00 | atari12 file "atari12.s2"
3112a     00 6D 00 6D 
3112e     00 6D 00 6D 
31132     00 6D 00 6D 
31136     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3113a     00 6D 00 6D 
3113e     00 6D 00 6D 
31142     00 6D 00 6D 
31146     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3114a     00 6D 00 6D 
3114e     00 6D 00 6D 
31152     00 6D 00 6D 
31156     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3115a     00 6D 00 6D 
3115e     00 6D 00 6D 
31162     00 6D 00 6D 
31166     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3116a     00 6D 00 6D 
3116e     00 6D 00 6D 
31172     00 6D 00 6D 
31176     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3117a     00 6C 00 6C 
3117e     00 6C 00 6C 
31182     00 6C 00 6C 
31186     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3118a     00 6C 00 6C 
3118e     00 6C 00 6C 
31192     00 6C 00 6C 
31196     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3119a     00 6C 00 6C 
3119e     00 6C 00 6C 
311a2     00 6C 00 6C 
311a6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
311aa     00 6C 00 6C 
311ae     00 6C 00 6C 
311b2     00 6C 00 6C 
311b6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
311ba     00 6C 00 6C 
311be     00 6C 00 6C 
311c2     00 6C 00 6C 
311c6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
311ca     00 6C 00 6C 
311ce     00 6C 00 6C 
311d2     00 6C 00 6C 
311d6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
311da     00 6C 00 6C 
311de     00 6C 00 6C 
311e2     00 6C 00 6C 
311e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
311ea     00 6C 00 6C 
311ee     00 6C 00 6C 
311f2     00 6C 00 6C 
311f6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
311fa     00 6C 00 6C 
311fe     00 6C 00 6C 
31202     00 6C 00 6C 
31206     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3120a     00 6C 00 6C 
3120e     00 6C 00 6C 
31212     00 6C 00 6C 
31216     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3121a     00 6C 00 6C 
3121e     00 6C 00 6C 
31222     00 6C 00 6C 
31226     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3122a     00 6C 00 6B 
3122e     00 6B 00 6B 
31232     00 6B 00 6B 
31236     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3123a     00 6B 00 6B 
3123e     00 6B 00 6B 
31242     00 6B 00 6B 
31246     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3124a     00 6B 00 6B 
3124e     00 6B 00 6B 
31252     00 6B 00 6B 
31256     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3125a     00 6B 00 6B 
3125e     00 6B 00 6B 
31262     00 6B 00 6B 
31266     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3126a     00 6B 00 6B 
3126e     00 6B 00 6B 
31272     00 6B 00 6B 
31276     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3127a     00 6B 00 6B 
3127e     00 6B 00 6B 
31282     00 6B 00 6B 
31286     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3128a     00 6B 00 6B 
3128e     00 6B 00 6B 
31292     00 6B 00 6B 
31296     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3129a     00 6B 00 6B 
3129e     00 6B 00 6B 
312a2     00 6B 00 6B 
312a6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
312aa     00 6B 00 6B 
312ae     00 6B 00 6B 
312b2     00 6B 00 6B 
312b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
312ba     00 6B 00 6B 
312be     00 6B 00 6B 
312c2     00 6A 00 9D 
312c6     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
312ca     00 9E 00 9E 
312ce     00 9E 00 9E 
312d2     00 9E 00 9E 
312d6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
312da     00 9E 00 9E 
312de     00 9E 00 9E 
312e2     00 9E 00 9E 
312e6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
312ea     00 9E 00 9E 
312ee     00 9E 00 9E 
312f2     00 9E 00 9E 
312f6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
312fa     00 9E 00 9E 
312fe     00 9E 00 9E 
31302     00 9E 00 9E 
31306     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3130a     00 9E 00 9E 
3130e     00 9E 00 9E 
31312     00 9E 00 9E 
31316     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3131a     00 9E 00 9E 
3131e     00 9E 00 9E 
31322     00 9E 00 9E 
31326     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3132a     00 9E 00 9E 
3132e     00 9E 00 9E 
31332     00 9E 00 9E 
31336     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3133a     00 9E 00 9E 
3133e     00 9E 00 9E 
31342     00 9E 00 9E 
31346     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3134a     00 9E 00 9E 
3134e     00 9E 00 9E 
31352     00 9E 00 9E 
31356     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3135a     00 9F 00 9F 
3135e     00 9F 00 9F 
31362     00 9F 00 9F 
31366     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3136a     00 9F 00 9F 
3136e     00 9F 00 9F 
31372     00 9F 00 9F 
31376     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3137a     00 9F 00 9F 
3137e     00 9F 00 9F 
31382     00 9F 00 9F 
31386     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3138a     00 9F 00 9F 
3138e     00 9F 00 9F 
31392     00 9F 00 9F 
31396     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3139a     00 9F 00 9F 
3139e     00 9F 00 9F 
313a2     00 9F 00 9F 
313a6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
313aa     00 9F 00 9F 
313ae     00 9F 00 9F 
313b2     00 9F 00 9F 
313b6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
313ba     00 9F 00 9F 
313be     00 9F 00 9F 
313c2     00 9F 00 9F 
313c6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
313ca     00 9F 00 9F 
313ce     00 9F 00 9F 
313d2     00 9F 00 9F 
313d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
313da     00 9F 00 9F 
313de     00 9F 00 9F 
313e2     00 9F 00 9F 
313e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
313ea     00 9F 00 9F 
313ee     00 9F 00 9F 
313f2     00 9F 00 9F 
313f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
313fa     00 9F 00 9F 
313fe     00 9F 00 9F 
31402     00 9F 00 9F 
31406     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3140a     00 9F 00 9F 
3140e     00 9F 00 9F 
31412     00 9F 00 9F 
31416     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3141a     00 9F 00 9F 
3141e     00 9F 00 A0 
31422     00 A0 00 A0 
31426     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3142a     00 A0 00 A0 
3142e     00 A0 00 A0 
31432     00 A0 00 A0 
31436     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3143a     00 A0 00 A0 
3143e     00 A0 00 A0 
31442     00 A0 00 A0 
31446     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3144a     00 A0 00 A0 
3144e     00 A0 00 A0 
31452     00 A0 00 A0 
31456     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3145a     00 A0 00 A0 
3145e     00 A0 00 A0 
31462     00 A0 00 A0 
31466     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3146a     00 A0 00 A0 
3146e     00 A0 00 A0 
31472     00 A0 00 A0 
31476     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3147a     00 A0 00 A0 
3147e     00 A0 00 A0 
31482     00 A0 00 A0 
31486     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3148a     00 A0 00 A0 
3148e     00 A0 00 A0 
31492     00 A0 00 A0 
31496     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3149a     00 A0 00 A0 
3149e     00 A0 00 A0 
314a2     00 A0 00 A0 
314a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
314aa     00 A0 00 A0 
314ae     00 A0 00 A0 
314b2     00 A0 00 A0 
314b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
314ba     00 A0 00 A0 
314be     00 A0 00 A0 
314c2     00 A0 00 A0 
314c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
314ca     00 A0 00 A0 
314ce     00 A0 00 A0 
314d2     00 A0 00 A0 
314d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
314da     00 A0 00 A0 
314de     00 A0 00 A0 
314e2     00 A0 00 A0 
314e6     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
314ea     00 6D 00 6D 
314ee     00 6D 00 6D 
314f2     00 6D 00 6D 
314f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
314fa     00 6D 00 6D 
314fe     00 6D 00 6D 
31502     00 6D 00 6D 
31506     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3150a     00 6D 00 6D 
3150e     00 6D 00 6D 
31512     00 6D 00 6D 
31516     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3151a     00 6D 00 6D 
3151e     00 6D 00 6D 
31522     00 6D 00 6D 
31526     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3152a     00 6D 00 6D 
3152e     00 6D 00 6D 
31532     00 6D 00 6D 
31536     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3153a     00 6D 00 6D 
3153e     00 6D 00 6D 
31542     00 6D 00 6D 
31546     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3154a     00 6D 00 6D 
3154e     00 6D 00 6D 
31552     00 6D 00 6D 
31556     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3155a     00 6D 00 6D 
3155e     00 6D 00 6D 
31562     00 6D 00 6D 
31566     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3156a     00 6D 00 6D 
3156e     00 A0 00 A0 
31572     00 A0 00 A0 
31576     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3157a     00 A0 00 A0 
3157e     00 A0 00 A0 
31582     00 A0 00 A0 
31586     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3158a     00 A0 00 A0 
3158e     00 A0 00 A0 
31592     00 A0 00 A0 
31596     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3159a     00 A0 00 A0 
3159e     00 A0 00 A0 
315a2     00 A0 00 A0 
315a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
315aa     00 A0 00 A0 
315ae     00 A0 00 A0 
315b2     00 A0 00 A0 
315b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
315ba     00 A0 00 A0 
315be     00 A0 00 A0 
315c2     00 A0 00 A0 
315c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
315ca     00 A0 00 A0 
315ce     00 A0 00 A0 
315d2     00 A0 00 A0 
315d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
315da     00 A0 00 A0 
315de     00 A0 00 A0 
315e2     00 A0 00 A0 
315e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
315ea     00 A0 00 A0 
315ee     00 A0 00 A0 
315f2     00 A0 00 A0 
315f6     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
315fa     00 6D 00 6D 
315fe     00 6D 00 6D 
31602     00 6D 00 6D 
31606     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3160a     00 6D 00 6D 
3160e     00 6D 00 6D 
31612     00 6D 00 6D 
31616     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3161a     00 6D 00 6D 
3161e     00 6D 00 6D 
31622     00 6D 00 6D 
31626     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3162a     00 6D 00 6D 
3162e     00 6D 00 6D 
31632     00 6D 00 6D 
31636     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3163a     00 6D 00 6D 
3163e     00 6D 00 6D 
31642     00 6D 00 6D 
31646     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3164a     00 6D 00 6D 
3164e     00 6D 00 6D 
31652     00 6D 00 6D 
31656     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3165a     00 6D 00 6D 
3165e     00 6D 00 6D 
31662     00 6D 00 6D 
31666     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3166a     00 6D 00 6D 
3166e     00 6D 00 6D 
31672     00 6D 00 6D 
31676     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3167a     00 6D 00 6D 
3167e     00 6C 00 A0 
31682     00 9F 00 A0 
31686     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3168a     00 A0 00 A0 
3168e     00 A0 00 A0 
31692     00 A0 00 A0 
31696     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3169a     00 A0 00 A0 
3169e     00 A0 00 A0 
316a2     00 A0 00 A0 
316a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
316aa     00 A0 00 A0 
316ae     00 A0 00 A0 
316b2     00 A0 00 A0 
316b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
316ba     00 A0 00 A0 
316be     00 A0 00 A0 
316c2     00 A0 00 A0 
316c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
316ca     00 A0 00 A0 
316ce     00 A0 00 A0 
316d2     00 A0 00 A0 
316d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
316da     00 A0 00 A0 
316de     00 A0 00 A0 
316e2     00 A0 00 A0 
316e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
316ea     00 A0 00 A0 
316ee     00 A0 00 A0 
316f2     00 A0 00 A0 
316f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
316fa     00 A0 00 A0 
316fe     00 A0 00 A0 
31702     00 A0 00 A0 
31706     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3170a     00 A0 00 A0 
3170e     00 A0 00 A0 
31712     00 A0 00 A0 
31716     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3171a     00 A0 00 A0 
3171e     00 A0 00 A0 
31722     00 A0 00 A0 
31726     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3172a     00 A0 00 A0 
3172e     00 A0 00 A0 
31732     00 A0 00 A0 
31736     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3173a     00 A1 00 A1 
3173e     00 A1 00 A1 
31742     00 A1 00 A1 
31746     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3174a     00 A1 00 A1 
3174e     00 A1 00 A1 
31752     00 A1 00 A1 
31756     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3175a     00 A1 00 A1 
3175e     00 A1 00 A1 
31762     00 A1 00 A1 
31766     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3176a     00 A1 00 A1 
3176e     00 A1 00 A1 
31772     00 A1 00 A1 
31776     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3177a     00 A1 00 A1 
3177e     00 A1 00 A1 
31782     00 A1 00 A1 
31786     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3178a     00 A1 00 A1 
3178e     00 A1 00 A1 
31792     00 6E 00 6E 
31796     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3179a     00 6E 00 6E 
3179e     00 6E 00 6E 
317a2     00 6E 00 6E 
317a6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
317aa     00 6E 00 6E 
317ae     00 6E 00 6E 
317b2     00 6E 00 6E 
317b6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
317ba     00 6E 00 6E 
317be     00 6E 00 6E 
317c2     00 6E 00 6E 
317c6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
317ca     00 6E 00 6D 
317ce     00 6D 00 6D 
317d2     00 6D 00 6D 
317d6     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
317da     00 6D 00 6D 
317de     00 6D 00 6D 
317e2     00 6D 00 6D 
317e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
317ea     00 6D 00 6D 
317ee     00 6D 00 6D 
317f2     00 6D 00 6D 
317f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
317fa     00 6D 00 6D 
317fe     00 6D 00 6D 
31802     00 6D 00 6D 
31806     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3180a     00 6D 00 6D 
3180e     00 6D 00 6D 
31812     00 6D 00 6D 
31816     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3181a     00 6D 00 6D 
3181e     00 6D 00 6D 
31822     00 6D 00 6D 
31826     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3182a     00 6D 00 6D 
3182e     00 6D 00 6D 
31832     00 6D 00 6D 
31836     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3183a     00 6D 00 6D 
3183e     00 6D 00 6D 
31842     00 6D 00 6D 
31846     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3184a     00 6D 00 6D 
3184e     00 6D 00 6D 
31852     00 6D 00 6D 
31856     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3185a     00 6D 00 6D 
3185e     00 6D 00 6D 
31862     00 6D 00 6D 
31866     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3186a     00 6D 00 6D 
3186e     00 6D 00 6D 
31872     00 6D 00 6D 
31876     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3187a     00 6D 00 6D 
3187e     00 6C 00 6C 
31882     00 6C 00 6C 
31886     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3188a     00 6C 00 6C 
3188e     00 6C 00 6C 
31892     00 6C 00 6C 
31896     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3189a     00 6C 00 6C 
3189e     00 6C 00 6C 
318a2     00 9D 00 9F 
318a6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
318aa     00 9F 00 9F 
318ae     00 9F 00 9F 
318b2     00 A0 00 A0 
318b6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
318ba     00 A0 00 A0 
318be     00 A0 00 A0 
318c2     00 A0 00 A0 
318c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
318ca     00 A0 00 A0 
318ce     00 A0 00 A0 
318d2     00 A0 00 A0 
318d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
318da     00 A0 00 A0 
318de     00 A0 00 A0 
318e2     00 A0 00 A0 
318e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
318ea     00 A0 00 A0 
318ee     00 A0 00 A0 
318f2     00 A0 00 A0 
318f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
318fa     00 A0 00 A0 
318fe     00 A0 00 A0 
31902     00 A0 00 A0 
31906     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3190a     00 A0 00 A0 
3190e     00 A0 00 A0 
31912     00 A0 00 A0 
31916     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3191a     00 A0 00 A0 
3191e     00 A0 00 A0 
31922     00 A0 00 A0 
31926     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3192a                 | 
3192a     00 00       |              	org
3192c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
31930 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
31934 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
31938 003             | 
31938 003 00 30 04 F6 |                 mov     psramaddr,#0
3193c 004             | 
3193c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
31940 005 20 00 00 FF 
31944 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
31948 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3194c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
31950 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
31954 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
31958 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3195c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
31960 00d             | 
31960 00d 20 00 00 FF 
31964 00e 00 30 04 F1 |                 add 	psramaddr,##16384
31968 00f E0 03 00 FF 
3196c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
31970 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
31974 012             | 
31974 012             |                 
31974 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
31978 013             |     
31978 013 01 2C 60 FD |                 cogid 	t11				' get id
3197c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
31980 015 03 2C 60 FD |                 cogstop t11				' stop the loader
31984 016             | 
31984 016 00 00 00 00 | t11 		long 	0
31988 017 00 FF 07 00 | mailbox 	long 	$7FF00
3198c 018 00 00 00 00 | psramaddr 	long 	0
31990 019 00 00 00 00 | pslockval	long 	0
31994 01a 00 00 00 00 | cmd             long    0
31998 01b 00 00 00 00 | buf1            long    0
3199c 01c 00 40 00 00 | buf2            long    16384
319a0 01d A4 19 03 00 | 	long	@@@_dat_ + 12624
319a4 01e 50 32 20 52 
319a8 01f 65 74 72 6F 
319ac 020 6D 61 63 68 
319b0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
319b4 022 42 41 53 49 
319b8 023 43 20 76 65 
319bc 024 72 73 69 6F 
319c0 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
319c4 026 32 38 00 00 | 	byte	$32, $38, $00, $00
319c8 027             | 	alignl
319c8 027             | _hg010b_spin2_dat_
319c8 027             | 
319c8 027 00 00 00 00 
319cc 028 00 00 00 00 
319d0 029 00 00 00 00 
319d4 02a 00 00 00 00 
319d8 02b 00 00 00    | vga_font       file "vgafont.def"
319db 02b 7E 81 A5 81 
319df 02c 81 BD 99 81 
319e3 02d 81 7E 00 00 
319e7 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
319eb 02f 7E FF DB FF 
319ef 030 FF C3 E7 FF 
319f3 031 FF 7E 00 00 
319f7 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
319fb 033 00 36 7F 7F 
319ff 034 7F 7F 3E 1C 
31a03 035 08 00 00 00 
31a07 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
31a0b 037 00 08 1C 3E 
31a0f 038 7F 3E 1C 08 
31a13 039 00 00 00 00 
31a17 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
31a1b 03b 18 3C 3C E7 
31a1f 03c E7 E7 18 18 
31a23 03d 3C 00 00 00 
31a27 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
31a2b 03f 18 3C 7E FF 
31a2f 040 FF 7E 18 18 
31a33 041 3C 00 00 00 
31a37 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
31a3b 043 00 00 00 18 
31a3f 044 3C 3C 18 00 
31a43 045 00 00 00 00 
31a47 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
31a4b 047 FF FF FF E7 
31a4f 048 C3 C3 E7 FF 
31a53 049 FF FF FF FF 
31a57 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
31a5b 04b 00 00 3C 66 
31a5f 04c 42 42 66 3C 
31a63 04d 00 00 00 00 
31a67 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
31a6b 04f FF FF C3 99 
31a6f 050 BD BD 99 C3 
31a73 051 FF FF FF FF 
31a77 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
31a7b 053 78 70 58 4C 
31a7f 054 1E 33 33 33 
31a83 055 33 1E 00 00 
31a87 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
31a8b 057 3C 66 66 66 
31a8f 058 66 3C 18 7E 
31a93 059 18 18 00 00 
31a97 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
31a9b 05b FC CC FC 0C 
31a9f 05c 0C 0C 0C 0E 
31aa3 05d 0F 07 00 00 
31aa7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
31aab 05f FE C6 FE C6 
31aaf 060 C6 C6 C6 E6 
31ab3 061 E7 67 03 00 
31ab7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
31abb 063 18 18 DB 3C 
31abf 064 E7 3C DB 18 
31ac3 065 18 00 00 00 
31ac7 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
31acb 067 03 07 0F 1F 
31acf 068 7F 1F 0F 07 
31ad3 069 03 01 00 00 
31ad7 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
31adb 06b 60 70 78 7C 
31adf 06c 7F 7C 78 70 
31ae3 06d 60 40 00 00 
31ae7 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
31aeb 06f 18 3C 7E 18 
31aef 070 18 18 7E 3C 
31af3 071 18 00 00 00 
31af7 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
31afb 073 66 66 66 66 
31aff 074 66 66 66    | 	byte	$66[7]
31b02 075 00 66 66 00 
31b06 076 00 00 00 00 
31b0a 077 00 FE DB DB 
31b0e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
31b12 079 D8 D8 D8 00 
31b16 07a 00 00 00 3E 
31b1a 07b 63 06 1C 36 
31b1e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
31b22 07d 30 63 3E 00 
31b26 07e 00 00 00 00 
31b2a 07f 00 00 00 00 
31b2e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
31b32 081 7F 7F 7F 00 
31b36 082 00 00 00 00 
31b3a 083 00 18 3C 7E 
31b3e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
31b42 085 3C 18 7E 00 
31b46 086 00 00 00 00 
31b4a 087 00 18 3C 7E 
31b4e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
31b52 089 18 18 18 00 
31b56 08a 00 00 00 00 
31b5a 08b 00 18 18 18 
31b5e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
31b62 08d 7E 3C 18 00 
31b66 08e 00 00 00 00 
31b6a 08f 00 00 00 18 
31b6e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
31b72 091 00 00 00 00 
31b76 092 00 00 00 00 
31b7a 093 00 00 00    | 	byte	$00[11]
31b7d 094 0C 06 7F 06 
31b81 095 0C 00 00 00 
31b85 096 00 00 00 00 
31b89 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b8d 098 00 03 03 03 
31b91 099 7F 00 00 00 
31b95 09a 00 00 00 00 
31b99 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b9d 09c 14 36 7F 36 
31ba1 09d 14 00 00 00 
31ba5 09e 00 00 00 00 
31ba9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
31bad 0a0 1C 1C 3E 3E 
31bb1 0a1 7F 7F 00 00 
31bb5 0a2 00 00 00 00 
31bb9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
31bbd 0a4 7F 3E 3E 1C 
31bc1 0a5 1C 08 00 00 
31bc5 0a6 00 00 00 00 
31bc9 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31bcd 0a8 00 00 00 00 
31bd1 0a9 00 00 00 00 
31bd5 0aa 00 00 00 00 
31bd9 0ab 00 00       | 	byte	$00[14]
31bdb 0ab 18 3C 3C 3C 
31bdf 0ac 18 18 18 00 
31be3 0ad 18 18 00 00 
31be7 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
31beb 0af 66 24 00 00 
31bef 0b0 00 00 00 00 
31bf3 0b1 00 00 00 00 
31bf7 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31bfb 0b3 00 36 36 7F 
31bff 0b4 36 36 36 7F 
31c03 0b5 36 36 00 00 
31c07 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
31c0b 0b7 3E 63 43 03 
31c0f 0b8 3E 60 60 61 
31c13 0b9 63 3E 18 18 
31c17 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
31c1b 0bb 00 00 43 63 
31c1f 0bc 30 18 0C 06 
31c23 0bd 63 61 00 00 
31c27 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
31c2b 0bf 1C 36 36 1C 
31c2f 0c0 6E 3B 33 33 
31c33 0c1 33 6E 00 00 
31c37 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
31c3b 0c3 0C 0C 0C 06 
31c3f 0c4 00 00 00 00 
31c43 0c5 00 00 00 00 
31c47 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31c4b 0c7 30 18 0C 0C 
31c4f 0c8 0C 0C 0C 0C 
31c53 0c9 18 30 00 00 
31c57 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
31c5b 0cb 0C 18 30 30 
31c5f 0cc 30 30 30 30 
31c63 0cd 18 0C 00 00 
31c67 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
31c6b 0cf 00 00 00 66 
31c6f 0d0 3C FF 3C 66 
31c73 0d1 00 00 00 00 
31c77 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
31c7b 0d3 00 00 00 18 
31c7f 0d4 18 7E 18 18 
31c83 0d5 00 00 00 00 
31c87 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
31c8b 0d7 00 00 00 00 
31c8f 0d8 00 00 00 00 | 	byte	$00[8]
31c93 0d9 18 18 18 0C 
31c97 0da 00 00 00 00 
31c9b 0db 00 00 00 00 
31c9f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
31ca3 0dd 00 00 00 00 
31ca7 0de 00 00 00 00 
31cab 0df 00 00 00 00 
31caf 0e0 00 00 00 00 | 	byte	$00[16]
31cb3 0e1 18 18 00 00 
31cb7 0e2 00 00 00 00 
31cbb 0e3 00 00 40 60 
31cbf 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
31cc3 0e5 03 01 00 00 
31cc7 0e6 00 00 00 00 
31ccb 0e7 1C 36 63 63 
31ccf 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
31cd3 0e9 36 1C 00 00 
31cd7 0ea 00 00 00 00 
31cdb 0eb 18 1C 1E 18 
31cdf 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
31ce3 0ed 18 7E 00 00 
31ce7 0ee 00 00 00 00 
31ceb 0ef 3E 63 60 30 
31cef 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
31cf3 0f1 63 7F 00 00 
31cf7 0f2 00 00 00 00 
31cfb 0f3 3E 63 60 60 
31cff 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
31d03 0f5 63 3E 00 00 
31d07 0f6 00 00 00 00 
31d0b 0f7 30 38 3C 36 
31d0f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
31d13 0f9 30 78 00 00 
31d17 0fa 00 00 00 00 
31d1b 0fb 7F 03 03 03 
31d1f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
31d23 0fd 63 3E 00 00 
31d27 0fe 00 00 00 00 
31d2b 0ff 1C 06 03 03 
31d2f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
31d33 101 63 3E 00 00 
31d37 102 00 00 00 00 
31d3b 103 7F 63 60 60 
31d3f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
31d43 105 0C 0C 00 00 
31d47 106 00 00 00 00 
31d4b 107 3E 63 63 63 
31d4f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
31d53 109 63 3E 00 00 
31d57 10a 00 00 00 00 
31d5b 10b 3E 63 63 63 
31d5f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
31d63 10d 30 1E 00 00 
31d67 10e 00 00 00 00 
31d6b 10f 00 00 00 18 
31d6f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
31d73 111 18 18 00 00 
31d77 112 00 00 00 00 
31d7b 113 00 00 00 18 
31d7f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
31d83 115 18 18 0C 00 
31d87 116 00 00 00 00 
31d8b 117 00 60 30 18 
31d8f 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
31d93 119 30 60 00 00 
31d97 11a 00 00 00 00 
31d9b 11b 00 00 00 7E 
31d9f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
31da3 11d 00 00 00 00 
31da7 11e 00 00 00 00 
31dab 11f 00          | 	byte	$00[9]
31dac 120 06 0C 18 30 
31db0 121 60 30 18 0C 
31db4 122 06 00 00 00 
31db8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
31dbc 124 63 63 30 18 
31dc0 125 18 18 00 18 
31dc4 126 18 00 00 00 
31dc8 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
31dcc 128 3E 63 63 7B 
31dd0 129 7B 7B 3B 03 
31dd4 12a 3E 00 00 00 
31dd8 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
31ddc 12c 1C 36 63 63 
31de0 12d 7F 63 63 63 
31de4 12e 63 00 00 00 
31de8 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
31dec 130 66 66 66 3E 
31df0 131 66 66 66 66 
31df4 132 3F 00 00 00 
31df8 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
31dfc 134 66 43 03 03 
31e00 135 03 03 43 66 
31e04 136 3C 00 00 00 
31e08 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
31e0c 138 36 66 66 66 
31e10 139 66 66 66 36 
31e14 13a 1F 00 00 00 
31e18 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
31e1c 13c 66 46 16 1E 
31e20 13d 16 06 46 66 
31e24 13e 7F 00 00 00 
31e28 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
31e2c 140 66 46 16 1E 
31e30 141 16 06 06 06 
31e34 142 0F 00 00 00 
31e38 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
31e3c 144 66 43 03 03 
31e40 145 7B 63 63 66 
31e44 146 5C 00 00 00 
31e48 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
31e4c 148 63 63 63 7F 
31e50 149 63 63 63 63 
31e54 14a 63 00 00 00 
31e58 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
31e5c 14c 18 18 18 18 
31e60 14d 18 18 18 18 | 	byte	$18[8]
31e64 14e 3C 00 00 00 
31e68 14f 00 00 00 78 
31e6c 150 30 30 30 30 
31e70 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
31e74 152 1E 00 00 00 
31e78 153 00 00 00 67 
31e7c 154 66 66 36 1E 
31e80 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
31e84 156 67 00 00 00 
31e88 157 00 00 00 0F 
31e8c 158 06 06 06 06 
31e90 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
31e94 15a 7F 00 00 00 
31e98 15b 00 00 00 63 
31e9c 15c 77 7F 7F 6B 
31ea0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
31ea4 15e 63 00 00 00 
31ea8 15f 00 00 00 63 
31eac 160 67 6F 7F 7B 
31eb0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
31eb4 162 63 00 00 00 
31eb8 163 00 00 00 3E 
31ebc 164 63 63 63 63 
31ec0 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
31ec4 166 3E 00 00 00 
31ec8 167 00 00 00 3F 
31ecc 168 66 66 66 3E 
31ed0 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
31ed4 16a 0F 00 00 00 
31ed8 16b 00 00 00 3E 
31edc 16c 63 63 63 63 
31ee0 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
31ee4 16e 3E 30 70 00 
31ee8 16f 00 00 00 3F 
31eec 170 66 66 66 3E 
31ef0 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
31ef4 172 67 00 00 00 
31ef8 173 00 00 00 3E 
31efc 174 63 63 06 1C 
31f00 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
31f04 176 3E 00 00 00 
31f08 177 00 00 00 7E 
31f0c 178 7E 5A 18 18 
31f10 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
31f14 17a 3C 00 00 00 
31f18 17b 00 00 00 63 
31f1c 17c 63 63 63 63 
31f20 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
31f24 17e 3E 00 00 00 
31f28 17f 00 00 00 63 
31f2c 180 63 63 63 63 
31f30 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
31f34 182 08 00 00 00 
31f38 183 00 00 00 63 
31f3c 184 63 63 63 6B 
31f40 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
31f44 186 36 00 00 00 
31f48 187 00 00 00 63 
31f4c 188 63 36 3E 1C 
31f50 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
31f54 18a 63 00 00 00 
31f58 18b 00 00 00 66 
31f5c 18c 66 66 66 3C 
31f60 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
31f64 18e 3C 00 00 00 
31f68 18f 00 00 00 7F 
31f6c 190 63 61 30 18 
31f70 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
31f74 192 7F 00 00 00 
31f78 193 00 00 00 3C 
31f7c 194 0C 0C 0C 0C 
31f80 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
31f84 196 3C 00 00 00 
31f88 197 00 00 00 00 
31f8c 198 01 03 07 0E 
31f90 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
31f94 19a 40 00 00 00 
31f98 19b 00 00 00 3C 
31f9c 19c 30 30 30 30 
31fa0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
31fa4 19e 3C 00 00 00 
31fa8 19f 1C 36 00 00 
31fac 1a0 00 00 00 00 
31fb0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31fb4 1a2 00 00 00 00 
31fb8 1a3 00 00 00 00 
31fbc 1a4 00 00 00 00 
31fc0 1a5 00 00 00 00 
31fc4 1a6 00          | 	byte	$00[17]
31fc5 1a6 FF 00 00 0C 
31fc9 1a7 18 00 00 00 
31fcd 1a8 00 00 00 00 
31fd1 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31fd5 1aa 00 00 00 00 
31fd9 1ab 00 00 00 00 
31fdd 1ac 00          | 	byte	$00[9]
31fde 1ac 1E 30 3E 33 
31fe2 1ad 33 33 6E 00 
31fe6 1ae 00 00 00 00 
31fea 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
31fee 1b0 1E 36 66 66 
31ff2 1b1 66 66 3E 00 
31ff6 1b2 00 00 00 00 
31ffa 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
31ffe 1b4 3E 63 03 03 
32002 1b5 03 63 3E 00 
32006 1b6 00 00 00 00 
3200a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3200e 1b8 3C 36 33 33 
32012 1b9 33 33 6E 00 
32016 1ba 00 00 00 00 
3201a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3201e 1bc 3E 63 7F 03 
32022 1bd 03 63 3E 00 
32026 1be 00 00 00 00 
3202a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3202e 1c0 0C 1E 0C 0C 
32032 1c1 0C 0C 1E 00 
32036 1c2 00 00 00 00 
3203a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3203e 1c4 6E 33 33 33 
32042 1c5 33 33 3E 30 
32046 1c6 33 1E 00 00 
3204a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3204e 1c8 36 6E 66 66 
32052 1c9 66 66 67 00 
32056 1ca 00 00 00 00 
3205a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3205e 1cc 1C 18 18 18 
32062 1cd 18 18 3C 00 
32066 1ce 00 00 00 00 
3206a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3206e 1d0 70 60 60 60 
32072 1d1 60 60 60 66 
32076 1d2 66 3C 00 00 
3207a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3207e 1d4 66 36 1E 1E 
32082 1d5 36 66 67 00 
32086 1d6 00 00 00 00 
3208a 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3208e 1d8 18 18 18 18 
32092 1d9 18 18       | 	byte	$18[6]
32094 1da 3C 00 00 00 
32098 1db 00 00 00 00 
3209c 1dc 00 00 37 7F 
320a0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
320a4 1de 63 00 00 00 
320a8 1df 00 00 00 00 
320ac 1e0 00 00 3B 66 
320b0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
320b4 1e2 66 00 00 00 
320b8 1e3 00 00 00 00 
320bc 1e4 00 00 3E 63 
320c0 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
320c4 1e6 3E 00 00 00 
320c8 1e7 00 00 00 00 
320cc 1e8 00 00 3B 66 
320d0 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
320d4 1ea 3E 06 06 0F 
320d8 1eb 00 00 00 00 
320dc 1ec 00 00 6E 33 
320e0 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
320e4 1ee 3E 30 30 78 
320e8 1ef 00 00 00 00 
320ec 1f0 00 00 3B 6E 
320f0 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
320f4 1f2 0F 00 00 00 
320f8 1f3 00 00 00 00 
320fc 1f4 00 00 3E 63 
32100 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
32104 1f6 3E 00 00 00 
32108 1f7 00 00 00 08 
3210c 1f8 0C 0C 3F 0C 
32110 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
32114 1fa 38 00 00 00 
32118 1fb 00 00 00 00 
3211c 1fc 00 00 33 33 
32120 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
32124 1fe 6E 00 00 00 
32128 1ff 00 00 00 00 
3212c 200 00 00 63 63 
32130 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
32134 202 1C 00 00 00 
32138 203 00 00 00 00 
3213c 204 00 00 63 63 
32140 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
32144 206 36 00 00 00 
32148 207 00 00 00 00 
3214c 208 00 00 63 36 
32150 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
32154 20a 63 00 00 00 
32158 20b 00 00 00 00 
3215c 20c 00 00 63 63 
32160 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
32164 20e 7E 60 30 1F 
32168 20f 00 00 00 00 
3216c 210 00 00 7F 33 
32170 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
32174 212 7F 00 00 00 
32178 213 00 00 00 70 
3217c 214 18 18 18 0E 
32180 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
32184 216 70 00 00 00 
32188 217 00 00 00 18 
3218c 218 18 18 18 18 
32190 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
32194 21a 18 00 00 00 
32198 21b 00 00 00 0E 
3219c 21c 18 18 18 70 
321a0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
321a4 21e 0E 00 00 00 
321a8 21f 6E 3B 00 00 
321ac 220 00 00 00 00 
321b0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321b4 222 00 00 00 00 
321b8 223 00 00 00 00 
321bc 224 00 00       | 	byte	$00[10]
321be 224 08 1C 36 63 
321c2 225 63 63 7F 00 
321c6 226 00 00 00 00 
321ca 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
321ce 228 03 03 03 03 
321d2 229 43 66 3C 18 
321d6 22a 30 1E 00 00 
321da 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
321de 22c 33 33 33 33 
321e2 22d 33 33       | 	byte	$33[6]
321e4 22e 6E 00 00 00 
321e8 22f 00 00 60 30 
321ec 230 18 00 3E 63 
321f0 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
321f4 232 3E 00 00 00 
321f8 233 00 00 08 1C 
321fc 234 36 00 1E 30 
32200 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
32204 236 6E 00 00 00 
32208 237 00 00 00 00 
3220c 238 33 00 1E 30 
32210 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
32214 23a 6E 00 00 00 
32218 23b 00 00 1C 36 
3221c 23c 1C 00 33 33 
32220 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
32224 23e 6E 00 00 00 
32228 23f 00 00 60 30 
3222c 240 18 00 3E 63 
32230 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
32234 242 3E 00 00 00 
32238 243 00 00 00 00 
3223c 244 00 00 3E 63 
32240 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
32244 246 3E 18 30 1E 
32248 247 00 00 00 1C 
3224c 248 58 78 38 18 
32250 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
32254 24a 3C 00 00 00 
32258 24b 00 00 00 00 
3225c 24c 63 00 3E 63 
32260 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
32264 24e 3E 00 00 00 
32268 24f 66 33 00 3E 
3226c 250 63 63 63 63 
32270 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32274 252 3E 00 00 00 
32278 253 00 00 CC 66 
3227c 254 33 00 3E 63 
32280 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
32284 256 3E 00 00 00 
32288 257 00 00 18 3C 
3228c 258 66 00 1C 18 
32290 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
32294 25a 3C 00 00 00 
32298 25b 30 18 00 7F 
3229c 25c 63 61 30 18 
322a0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
322a4 25e 7F 00 00 00 
322a8 25f 00 63 00 08 
322ac 260 1C 36 63 63 
322b0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
322b4 262 63 00 00 00 
322b8 263 30 18 00 3C 
322bc 264 66 43 03 03 
322c0 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
322c4 266 3C 00 00 00 
322c8 267 30 18 00 7F 
322cc 268 66 46 16 1E 
322d0 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
322d4 26a 7F 00 00 00 
322d8 26b 0C 06 00 0F 
322dc 26c 06 06 06 06 
322e0 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
322e4 26e 7F 00 00 00 
322e8 26f 30 18 00 1C 
322ec 270 18 18 18 18 
322f0 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
322f4 272 3C 00 00 00 
322f8 273 00 00 08 1C 
322fc 274 36 00 3E 63 
32300 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
32304 276 3E 00 00 00 
32308 277 00 00 00 00 
3230c 278 63 00 3E 63 
32310 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
32314 27a 3E 00 00 00 
32318 27b 00 00 00 6F 
3231c 27c 46 26 06 06 
32320 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
32324 27e 7F 00 00 00 
32328 27f 00 00 00 6E 
3232c 280 4C 2C 0C 0C 
32330 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
32334 282 1E 00 00 00 
32338 283 30 18 00 3E 
3233c 284 63 63 06 1C 
32340 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
32344 286 3E 00 00 00 
32348 287 00 00 60 30 
3234c 288 18 00 3E 63 
32350 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
32354 28a 3E 00 00 00 
32358 28b 00 63 00 3E 
3235c 28c 63 63 63 63 
32360 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32364 28e 3E 00 00 00 
32368 28f 00 63 00 63 
3236c 290 63 63 63 63 
32370 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
32374 292 3E 00 00 00 
32378 293 6C 38 00 7E 
3237c 294 7E 5A 18 18 
32380 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
32384 296 3C 00 00 00 
32388 297 00 00 60 48 
3238c 298 2C 0C 3F 0C 
32390 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
32394 29a 38 00 00 00 
32398 29b 00 00 00 0F 
3239c 29c 26 36 1E 0E 
323a0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
323a4 29e 7F 00 00 00 
323a8 29f 00 00 00 00 
323ac 2a0 00 63 36 1C 
323b0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
323b4 2a2 00 00 00 00 
323b8 2a3 00 00       | 	byte	$00[6]
323ba 2a3 36 1C 08 00 
323be 2a4 3E 63 03 03 
323c2 2a5 03 63 3E 00 
323c6 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
323ca 2a7 30 18 0C 00 
323ce 2a8 1E 30 3E 33 
323d2 2a9 33 33 6E 00 
323d6 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
323da 2ab 60 30 18 00 
323de 2ac 1C 18 18 18 
323e2 2ad 18 18 3C 00 
323e6 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
323ea 2af 60 30 18 00 
323ee 2b0 3E 63 63 63 
323f2 2b1 63 63 3E 00 
323f6 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
323fa 2b3 30 18 0C 00 
323fe 2b4 33 33 33 33 
32402 2b5 33 33 6E 00 
32406 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3240a 2b7 00 08 1C 36 
3240e 2b8 63 63 7F 63 
32412 2b9 63 63 63 18 
32416 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3241a 2bb 00 00 00 00 
3241e 2bc 1E 30 3E 33 
32422 2bd 33 33 6E 18 
32426 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3242a 2bf 00 7F 63 61 
3242e 2c0 30 18 0C 06 
32432 2c1 43 63 7F 00 
32436 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3243a 2c3 36 1C 08 00 
3243e 2c4 7F 33 18 0C 
32442 2c5 06 63 7F 00 
32446 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3244a 2c7 00 7F 66 46 
3244e 2c8 16 1E 16 06 
32452 2c9 46 66 7F 18 
32456 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3245a 2cb 00 00 00 00 
3245e 2cc 3E 63 7F 03 
32462 2cd 03 63 3E 18 
32466 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3246a 2cf 00 3C 66 03 
3246e 2d0 1F 03 0F 03 
32472 2d1 03 66 3C 00 
32476 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3247a 2d3 60 30 18 00 
3247e 2d4 7F 33 18 0C 
32482 2d5 06 63 7F 00 
32486 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3248a 2d7 00 3C 66 43 
3248e 2d8 03 03 03 03 
32492 2d9 43 66 3C 00 
32496 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3249a 2db 00 00 00 00 
3249e 2dc 3E 63 06 1C 
324a2 2dd 30 63 3E 18 
324a6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
324aa 2df 00 00 00 00 
324ae 2e0 00 00       | 	byte	$00[6]
324b0 2e1 6C 36 1B 36 
324b4 2e2 6C 00 00 00 
324b8 2e3 00 00 00 00 
324bc 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
324c0 2e5 1B 36 6C 36 
324c4 2e6 1B 00 00 00 
324c8 2e7 88 22 88 22 
324cc 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
324d0 2e9 88 22 88 22 
324d4 2ea 88 22 88 22 
324d8 2eb AA 55 AA 55 
324dc 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
324e0 2ed AA 55 AA 55 
324e4 2ee AA 55 AA 55 
324e8 2ef BB EE BB EE 
324ec 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
324f0 2f1 BB EE BB EE 
324f4 2f2 BB EE BB EE 
324f8 2f3 18 18 18 18 
324fc 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
32500 2f5 18 18 18 18 
32504 2f6 18 18 18 18 
32508 2f7 18 18 18 18 
3250c 2f8 18 18 18    | 	byte	$18[15]
3250f 2f8 1F 18 18 18 
32513 2f9 18 18 18 18 
32517 2fa 18 30 18 00 
3251b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3251f 2fc 63 7F 63 63 
32523 2fd 63 63 00 00 
32527 2fe 00 1C 36 00 
3252b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3252f 300 63 7F 63 63 
32533 301 63 63 00 00 
32537 302 00 36 1C 00 
3253b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3253f 304 1E 16 06 46 
32543 305 66 7F 00 00 
32547 306 00 00 00 00 
3254b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3254f 308 1C 30 60 63 
32553 309 63 3E 18 30 
32557 30a 1E 6C 6C 6C 
3255b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3255f 30c 6F 6C 6C 6C 
32563 30d 6C 6C 6C 6C 
32567 30e 6C 6C 6C 6C 
3256b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3256f 310 6C 6C 6C 6C 
32573 311 6C 6C 6C 6C 
32577 312 6C          | 	byte	$6c[9]
32578 313 00 00 00 00 
3257c 314 00          | 	byte	$00[5]
3257d 314 7F 60 6F 6C 
32581 315 6C 6C 6C 6C 
32585 316 6C 6C 6C 6C 
32589 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3258d 318 6F 60 7F 00 
32591 319 00 00 00 00 
32595 31a 00 00 00 18 
32599 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3259d 31c 61 30 18 0C 
325a1 31d 06 43 63 7F 
325a5 31e 00 00 00 00 
325a9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
325ad 320 00 7F 33 18 
325b1 321 0C 06 63 7F 
325b5 322 00 00 00 00 
325b9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
325bd 324 00 00 1F 18 
325c1 325 18 18 18 18 
325c5 326 18 18 18 18 
325c9 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
325cd 328 18 18 F8 00 
325d1 329 00 00 00 00 
325d5 32a 00 00 00 18 
325d9 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
325dd 32c 18 18 FF 00 
325e1 32d 00 00 00 00 
325e5 32e 00 00 00 00 
325e9 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
325ed 330 00 00 FF 18 
325f1 331 18 18 18 18 
325f5 332 18 18 18 18 
325f9 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
325fd 334 18 18 F8 18 
32601 335 18 18 18 18 
32605 336 18 18 18 00 
32609 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3260d 338 00 00 FF 00 
32611 339 00 00 00 00 
32615 33a 00 00 00 18 
32619 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3261d 33c 18 18 FF 18 
32621 33d 18 18 18 18 
32625 33e 18 18 18 63 
32629 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3262d 340 36 63 63 7F 
32631 341 63 63 63 63 
32635 342 00 00 00 00 
32639 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3263d 344 00 1E 30 3E 
32641 345 33 33 33 6E 
32645 346 00 00 00 6C 
32649 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3264d 348 EC 0C FC 00 
32651 349 00 00 00 00 
32655 34a 00 00 00 00 
32659 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3265d 34c FC 0C EC 6C 
32661 34d 6C 6C 6C 6C 
32665 34e 6C 6C 6C 6C 
32669 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3266d 350 EF 00 FF 00 
32671 351 00 00 00 00 
32675 352 00 00 00 00 
32679 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3267d 354 FF 00 EF 6C 
32681 355 6C 6C 6C 6C 
32685 356 6C 6C 6C 6C 
32689 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3268d 358 EC 0C EC 6C 
32691 359 6C 6C 6C 6C 
32695 35a 6C 6C 6C 00 
32699 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3269d 35c FF 00 FF 00 
326a1 35d 00 00 00 00 
326a5 35e 00 00 00 6C 
326a9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
326ad 360 EF 00 EF 6C 
326b1 361 6C 6C 6C 6C 
326b5 362 6C 6C 6C 00 
326b9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
326bd 364 63 3E 63 63 
326c1 365 63 63 3E 63 
326c5 366 00 00 00 00 
326c9 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
326cd 368 30 3C 36 33 
326d1 369 33 33 33 6E 
326d5 36a 00 00 00 00 
326d9 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
326dd 36c 66 66 6F 66 
326e1 36d 66 66 36 1F 
326e5 36e 00 00 00 36 
326e9 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
326ed 370 66 66 66 66 
326f1 371 66 66       | 	byte	$66[6]
326f3 371 36 1F 00 00 
326f7 372 00 00 63 00 
326fb 373 7F 66 46 16 
326ff 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
32703 375 66 7F 00 00 
32707 376 00 6C 38 00 
3270b 377 38 30 30 3C 
3270f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
32713 379 33 6E 00 00 
32717 37a 00 36 1C 00 
3271b 37b 63 67 6F 7F 
3271f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
32723 37d 63 63 00 00 
32727 37e 00 30 18 00 
3272b 37f 3C 18 18 18 
3272f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32733 381 18 3C 00 00 
32737 382 00 3C 66 00 
3273b 383 3C 18 18 18 
3273f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32743 385 18 3C 00 00 
32747 386 00 00 00 36 
3274b 387 1C 08 00 3E 
3274f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
32753 389 63 3E 00 00 
32757 38a 00 18 18 18 
3275b 38b 18 18 18 18 
3275f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
32763 38d 00 00 00 00 
32767 38e 00 00 00 00 
3276b 38f 00 00 00 00 | 	byte	$00[12]
3276f 390 F8 18 18 18 
32773 391 18 18 18 18 
32777 392 18 FF FF FF 
3277b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3277f 394 FF FF FF FF 
32783 395 FF FF FF FF 
32787 396 FF          | 	byte	$ff[9]
32788 397 00 00 00 00 
3278c 398 00 00 00    | 	byte	$00[7]
3278f 398 FF FF FF FF 
32793 399 FF FF FF FF 
32797 39a FF          | 	byte	$ff[9]
32798 39b 00 00 00 7E 
3279c 39c 7E 5A 18 18 
327a0 39d 18 18 18 18 
327a4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
327a8 39f 1C 36 1C 63 
327ac 3a0 63 63 63 63 
327b0 3a1 63 63 63 63 
327b4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
327b8 3a3 FF FF FF FF 
327bc 3a4 FF FF FF    | 	byte	$ff[7]
327bf 3a4 00 00 00 00 
327c3 3a5 00 00 00 00 
327c7 3a6 00          | 	byte	$00[9]
327c8 3a7 30 18 00 3E 
327cc 3a8 63 63 63 63 
327d0 3a9 63 63 63 63 
327d4 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
327d8 3ab 00 00 00 1E 
327dc 3ac 33 33 33 1B 
327e0 3ad 33 63 63 63 
327e4 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
327e8 3af 1C 36 00 3E 
327ec 3b0 63 63 63 63 
327f0 3b1 63 63 63 63 
327f4 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
327f8 3b3 30 18 00 63 
327fc 3b4 67 6F 7F 7B 
32800 3b5 73 63 63 63 
32804 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
32808 3b7 00 00 60 30 
3280c 3b8 18 00 3B 66 
32810 3b9 66 66 66 66 
32814 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32818 3bb 00 00 36 1C 
3281c 3bc 08 00 3B 66 
32820 3bd 66 66 66 66 
32824 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32828 3bf 36 1C 00 3E 
3282c 3c0 63 63 06 1C 
32830 3c1 30 60 63 63 
32834 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
32838 3c3 00 00 36 1C 
3283c 3c4 08 00 3E 63 
32840 3c5 06 1C 30 63 
32844 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
32848 3c7 30 18 00 3F 
3284c 3c8 66 66 66 3E 
32850 3c9 36 66 66 66 
32854 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
32858 3cb 30 18 00 63 
3285c 3cc 63 63 63 63 
32860 3cd 63 63 63 63 
32864 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32868 3cf 00 00 60 30 
3286c 3d0 18 00 3B 6E 
32870 3d1 66 06 06 06 
32874 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
32878 3d3 66 33 00 63 
3287c 3d4 63 63 63 63 
32880 3d5 63 63 63 63 
32884 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32888 3d7 00 00 60 30 
3288c 3d8 18 00 63 63 
32890 3d9 63 63 63 63 
32894 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
32898 3db 30 18 00 66 
3289c 3dc 66 66 66 3C 
328a0 3dd 18 18 18 18 
328a4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
328a8 3df 00 00 00 08 
328ac 3e0 0C 0C 3F 0C 
328b0 3e1 0C 0C 0C 6C 
328b4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
328b8 3e3 30 18 00 00 
328bc 3e4 00 00 00 00 
328c0 3e5 00 00 00 00 
328c4 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
328c8 3e7 00 00 00 00 
328cc 3e8 00 00 00 00 | 	byte	$00[8]
328d0 3e9 7F 00 00 00 
328d4 3ea 00 00 00 00 
328d8 3eb 66 33 00 00 
328dc 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
328e0 3ed 00 00 00 00 
328e4 3ee 00 00 00 00 
328e8 3ef 00 00 00 00 
328ec 3f0 00 00 00 00 
328f0 3f1 00 00 00 00 
328f4 3f2 00          | 	byte	$00[21]
328f5 3f2 0C 06 3C 36 
328f9 3f3 1C 00 00 00 
328fd 3f4 00 00 00 00 
32901 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32905 3f6 00 00 00 63 
32909 3f7 3E 00 00 00 
3290d 3f8 00 00 00 00 
32911 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32915 3fa 00 00 00 00 
32919 3fb 3E 63 06 1C 
3291d 3fc 36 63 63 36 
32921 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
32925 3fe 00 00 00 00 
32929 3ff 00 00 00 00 | 	byte	$00[8]
3292d 400 18 00 7E 00 
32931 401 18 00 00 00 
32935 402 00 00 00 00 
32939 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3293d 404 00 00 00 00 
32941 405 00 00 00 00 | 	byte	$00[8]
32945 406 18 30 1E 00 
32949 407 00 00 1C 36 
3294d 408 36 1C 00 00 
32951 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
32955 40a 00 00 00 00 
32959 40b 63 00 00 00 
3295d 40c 00 00 00 00 
32961 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32965 40e 00 00 00 18 
32969 40f 18 00 00 00 
3296d 410 00 00 00 00 
32971 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32975 412 00 00 00 00 
32979 413 00          | 	byte	$00[5]
3297a 413 CC 66 33 00 
3297e 414 33 33 33 33 
32982 415 33 33 6E 00 
32986 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3298a 417 00 3F 66 66 
3298e 418 66 3E 36 66 
32992 419 66 66 6F 00 
32996 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3299a 41b 36 1C 08 00 
3299e 41c 3B 6E 66 06 
329a2 41d 06 06 0F 00 
329a6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
329aa 41f 00 00 00 7E 
329ae 420 7E 7E 7E 7E 
329b2 421 7E 7E 00 00 
329b6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
329ba 423 00 00 00 00 
329be 424 00 00 00 00 
329c2 425 00 00 00 00 
329c6 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
329c8 427             | 'vga_font       file "vgafont.def"
329c8 427 00 00 00 00 
      ...             
329f8 433 00 00 00 00 
329fc 434 00 00 00    | st_font        file "st4font.def"
329ff 434 FF FF 00 00 
32a03 435 00 00 00 00 
32a07 436 00 18 18 18 
32a0b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32a0f 438 18 18 18 18 
32a13 439 18 18 18 18 
32a17 43a 18          | 	byte	$18[9]
32a18 43b 00 00 00 00 
32a1c 43c 00 00 00    | 	byte	$00[7]
32a1f 43c FF FF 18 18 
32a23 43d 18 18 18 18 
32a27 43e 18 18 18 18 
32a2b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32a2f 440 FF FF 00 00 
32a33 441 00 00 00 00 
32a37 442 00 18 18 18 
32a3b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32a3f 444 1F 1F 18 18 
32a43 445 18 18 18 18 
32a47 446 18 18 18 18 
32a4b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32a4f 448 F8 F8 18 18 
32a53 449 18 18 18 18 
32a57 44a 18 00 00 00 
32a5b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
32a5f 44c 1F 1F 18 18 
32a63 44d 18 18 18 18 
32a67 44e 18 00 00 00 
32a6b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
32a6f 450 F8 F8 18 18 
32a73 451 18 18 18 18 
32a77 452 18 18 18 18 
32a7b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32a7f 454 1F 1F 00 00 
32a83 455 00 00 00 00 
32a87 456 00 18 18 18 
32a8b 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32a8f 458 F8 F8 00 00 
32a93 459 00 00 00 00 
32a97 45a 00 18 18 18 
32a9b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32a9f 45c FF FF 18 18 
32aa3 45d 18 18 18 18 
32aa7 45e 18 00 00 18 
32aab 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
32aaf 460 66 7E 7E 66 
32ab3 461 66 66 66 30 
32ab7 462 18 00 00 7E 
32abb 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
32abf 464 3E 06 06 06 
32ac3 465 06 7E 7E 18 
32ac7 466 0C 30 18 3C 
32acb 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
32acf 468 06 06 06 66 
32ad3 469 66 7E 3C 00 
32ad7 46a 00 30 18 66 
32adb 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
32adf 46c 7E 7E 76 76 
32ae3 46d 66 66 66 00 
32ae7 46e 00 30 18 7C 
32aeb 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
32aef 470 1C 38 70 60 
32af3 471 60 7E 3E 00 
32af7 472 00 30 18 7E 
32afb 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
32aff 474 18 0C 0C 06 
32b03 475 06 7E 7E 00 
32b07 476 00 18 18 00 
32b0b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
32b0f 478 18 18 0C 0C 
32b13 479 06 7E 7E 00 
32b17 47a 00 30 18 3C 
32b1b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
32b1f 47c 66 66 66 66 
32b23 47d 66          | 	byte	$66[5]
32b24 47e 7E 3C 00 00 
32b28 47f 00 00 06 06 
32b2c 480 06 06 16 1E 
32b30 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
32b34 482 7E 7E 00 00 
32b38 483 00 00 00 00 
32b3c 484 00 3C 7C 60 
32b40 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
32b44 486 7E 7C 30 18 
32b48 487 00 00 00 00 
32b4c 488 00 3C 7E 66 
32b50 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
32b54 48a 7E 7C 18 0C 
32b58 48b 00 00 30 18 
32b5c 48c 00 3C 3E 06 
32b60 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
32b64 48e 7E 7C 00 00 
32b68 48f 00 00 30 18 
32b6c 490 00 3E 7E 66 
32b70 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
32b74 492 66 66 00 00 
32b78 493 00 00 30 18 
32b7c 494 00 7C 7E 06 
32b80 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
32b84 496 7E 3E 00 00 
32b88 497 00 00 30 18 
32b8c 498 00 7E 7E 30 
32b90 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
32b94 49a 7E 7E 00 00 
32b98 49b 00 00 18 18 
32b9c 49c 00 7E 7E 30 
32ba0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
32ba4 49e 7E 7E 00 00 
32ba8 49f 00 00 30 18 
32bac 4a0 00 3C 7E 66 
32bb0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
32bb4 4a2 7E 3C 00 00 
32bb8 4a3 00 00 1C 1C 
32bbc 4a4 18 18 38 3C 
32bc0 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
32bc4 4a6 3C 3C 00 00 
32bc8 4a7 00 00 00 00 
32bcc 4a8 00 00 00 00 
32bd0 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32bd4 4aa 00 00 00 00 
32bd8 4ab 00 00       | 	byte	$00[6]
32bda 4ab 18 18 18 18 
32bde 4ac 18 18 18 18 | 	byte	$18[8]
32be2 4ad 00 00 18 18 
32be6 4ae 00 00 00 00 
32bea 4af 66 66 66 66 
32bee 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
32bf2 4b1 00 00 00 00 
32bf6 4b2 00 00 00 00 
32bfa 4b3 00          | 	byte	$00[9]
32bfb 4b3 66 66 FF FF 
32bff 4b4 66 66 FF FF 
32c03 4b5 66 66 00 00 
32c07 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
32c0b 4b7 7C 7E 06 06 
32c0f 4b8 3E 7C 60 60 
32c13 4b9 7E 3E 18 18 
32c17 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
32c1b 4bb 66 30 30 18 
32c1f 4bc 18 0C 0C 66 
32c23 4bd 66 00 00 00 
32c27 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
32c2b 4bf 66 66 3C 1C 
32c2f 4c0 1C FC FE 66 
32c33 4c1 66 FE FC 00 
32c37 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
32c3b 4c3 18 18 18 18 
32c3f 4c4 00 00 00 00 
32c43 4c5 00 00 00 00 
32c47 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
32c4b 4c7 18 1C 0C 0C 
32c4f 4c8 0C 0C 0C 0C 
32c53 4c9 1C 18 30 00 
32c57 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
32c5b 4cb 18 38 30 30 
32c5f 4cc 30 30 30 30 
32c63 4cd 38 18 0C 00 
32c67 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
32c6b 4cf 66 66 3C 3C 
32c6f 4d0 FF FF 3C 3C 
32c73 4d1 66 66 00 00 
32c77 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
32c7b 4d3 00 18 18 18 
32c7f 4d4 7E 7E 18 18 
32c83 4d5 18 00 00 00 
32c87 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
32c8b 4d7 00 00 00 00 
32c8f 4d8 00 00       | 	byte	$00[6]
32c91 4d9 18 18 18 18 
32c95 4da 18          | 	byte	$18[5]
32c96 4da 0C 04 00 00 
32c9a 4db 00 00 00 00 
32c9e 4dc 7E 7E 00 00 
32ca2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
32ca6 4de 00 00 00 00 
32caa 4df 00 00 00 00 
32cae 4e0 00 00 00 00 
32cb2 4e1 00          | 	byte	$00[13]
32cb3 4e1 18 18 18 00 
32cb7 4e2 00 00 00 60 
32cbb 4e3 60 60 30 30 
32cbf 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
32cc3 4e5 06 06 06 00 
32cc7 4e6 00 00 00 3C 
32ccb 4e7 7E 66 66 66 
32ccf 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
32cd3 4e9 66 7E 3C 00 
32cd7 4ea 00 00 00 18 
32cdb 4eb 18 1C 1C 18 
32cdf 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
32ce3 4ed 18 7E 7E 00 
32ce7 4ee 00 00 00 3C 
32ceb 4ef 7E 66 66 30 
32cef 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
32cf3 4f1 0C 7E 7E 00 
32cf7 4f2 00 00 00 7E 
32cfb 4f3 7E 30 30 18 
32cff 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
32d03 4f5 66 7E 3C 00 
32d07 4f6 00 00 00 30 
32d0b 4f7 30 38 38 3C 
32d0f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
32d13 4f9 7E 30 30 00 
32d17 4fa 00 00 00 7E 
32d1b 4fb 7E 06 06 3E 
32d1f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
32d23 4fd 66 7E 3C 00 
32d27 4fe 00 00 00 38 
32d2b 4ff 3C 0E 06 06 
32d2f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
32d33 501 66 7E 3C 00 
32d37 502 00 00 00 7E 
32d3b 503 7E 60 60 30 
32d3f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
32d43 505 0C 0C 0C 00 
32d47 506 00 00 00 3C 
32d4b 507 7E 66 66 3C 
32d4f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
32d53 509 66 7E 3C 00 
32d57 50a 00 00 00 3C 
32d5b 50b 7E 66 66 7E 
32d5f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
32d63 50d 70 3C 1C 00 
32d67 50e 00 00 00 00 
32d6b 50f 00 00 18 18 
32d6f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
32d73 511 18 18 18 00 
32d77 512 00 00 00 00 
32d7b 513 00 00 18 18 
32d7f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
32d83 515 18 18 18 0C 
32d87 516 04 00 00 00 
32d8b 517 70 38 1C 0E 
32d8f 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
32d93 519 70 00 00 00 
32d97 51a 00 00 00 00 
32d9b 51b 00 00 7E 7E 
32d9f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
32da3 51d 00 00 00 00 
32da7 51e 00 00 00 00 | 	byte	$00[8]
32dab 51f 0E 1C 38 70 
32daf 520 E0 70 38 1C 
32db3 521 0E 00 00 00 
32db7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
32dbb 523 7E 66 66 30 
32dbf 524 30 18 18 18 
32dc3 525 00 18 18 00 
32dc7 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
32dcb 527 7E 66 66 66 
32dcf 528 66 36 06 66 
32dd3 529 66 7E 3C 00 
32dd7 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
32ddb 52b 3C 7E 66 66 
32ddf 52c 66 7E 7E 66 
32de3 52d 66 66 66 00 
32de7 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
32deb 52f 7E 66 66 7E 
32def 530 3E 66 66 66 
32df3 531 66 7E 3E 00 
32df7 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
32dfb 533 7E 66 66 06 
32dff 534 06 06 06 66 
32e03 535 66 7E 3C 00 
32e07 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
32e0b 537 7E 66 66 66 
32e0f 538 66 66 66 66 
32e13 539 66 7E 3E 00 
32e17 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
32e1b 53b 7E 06 06 3E 
32e1f 53c 3E 06 06 06 
32e23 53d 06 7E 7E 00 
32e27 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
32e2b 53f 7E 06 06 3E 
32e2f 540 3E 06 06 06 
32e33 541 06 06 06 00 
32e37 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
32e3b 543 7E 06 06 76 
32e3f 544 76 66 66 66 
32e43 545 66 7E 3C 00 
32e47 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
32e4b 547 66 66 66 7E 
32e4f 548 7E 66 66 66 
32e53 549 66 66 66 00 
32e57 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
32e5b 54b 7E 18 18 18 
32e5f 54c 18 18 18 18 
32e63 54d 18 7E 7E 00 
32e67 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
32e6b 54f 60 60 60 60 
32e6f 550 60 60 60    | 	byte	$60[7]
32e72 551 66 66 7E 3C 
32e76 552 00 00 00 00 
32e7a 553 66 66 36 36 
32e7e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
32e82 555 66 66 C6 C6 
32e86 556 00 00 00 00 
32e8a 557 06 06 06 06 
32e8e 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
32e92 559 06 06 7E 7E 
32e96 55a 00 00 00 00 
32e9a 55b C6 C6 EE EE 
32e9e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
32ea2 55d C6 C6 C6 C6 
32ea6 55e 00 00 00 00 
32eaa 55f 66 66 66 6E 
32eae 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
32eb2 561 76 66 66 66 
32eb6 562 00 00 00 00 
32eba 563 3C 7E 66 66 
32ebe 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
32ec2 565 66 66 7E 3C 
32ec6 566 00 00 00 00 
32eca 567 3E 7E 66 66 
32ece 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
32ed2 569 06 06 06 06 
32ed6 56a 00 00 00 00 
32eda 56b 3C 7E 66 66 
32ede 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
32ee2 56d 66 56 3E 6C 
32ee6 56e 00 00 00 00 
32eea 56f 3E 7E 66 66 
32eee 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
32ef2 571 66 66 C6 C6 
32ef6 572 00 00 00 00 
32efa 573 7C 7E 06 06 
32efe 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
32f02 575 60 60 7E 3E 
32f06 576 00 00 00 00 
32f0a 577 7E 7E 18 18 
32f0e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
32f12 579 18 18 18 18 
32f16 57a 00 00 00 00 
32f1a 57b 66 66 66 66 
32f1e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
32f22 57d 66 66 7E 3C 
32f26 57e 00 00 00 00 
32f2a 57f 66 66 66 66 
32f2e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
32f32 581 3C 3C 18 18 
32f36 582 00 00 00 00 
32f3a 583 C6 C6 C6 C6 
32f3e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
32f42 585 FE EE C6 82 
32f46 586 00 00 00 00 
32f4a 587 66 66 66 3C 
32f4e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
32f52 589 3C 66 66 66 
32f56 58a 00 00 00 00 
32f5a 58b 66 66 66 66 
32f5e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
32f62 58d 18 18 18 18 
32f66 58e 00 00 00 00 
32f6a 58f 7E 7E 30 30 
32f6e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
32f72 591 06 06 7E 7E 
32f76 592 00 00 00 00 
32f7a 593 3C 3C 0C 0C 
32f7e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
32f82 595 0C 0C 3C 3C 
32f86 596 00 00 00 00 
32f8a 597 06 06 0C 0C 
32f8e 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
32f92 599 60 60 C0 C0 
32f96 59a 00 00 00 00 
32f9a 59b 3C 3C 30 30 
32f9e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
32fa2 59d 30 30 3C 3C 
32fa6 59e 00 00 00 00 
32faa 59f 18 18 3C 3C 
32fae 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
32fb2 5a1 00 00 00 00 
32fb6 5a2 00 00 00 00 
32fba 5a3 00 00 00 00 
32fbe 5a4 00 00 00 00 
32fc2 5a5 00 00       | 	byte	$00[18]
32fc4 5a6 FE FE 00 00 
32fc8 5a7 00 00 0C 0C 
32fcc 5a8 18 18 00 00 
32fd0 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
32fd4 5aa 00 00 00 00 
32fd8 5ab 00 00 00 00 
32fdc 5ac 00          | 	byte	$00[9]
32fdd 5ac 3C 7C 60 7C 
32fe1 5ad 7E 66 66 7E 
32fe5 5ae 7C 00 00 00 
32fe9 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
32fed 5b0 3E 7E 66 66 
32ff1 5b1 66 66 66 7E 
32ff5 5b2 3E 00 00 00 
32ff9 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
32ffd 5b4 3C 3E 06 06 
33001 5b5 06 06 06 7E 
33005 5b6 7C 00 00 00 
33009 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3300d 5b8 7C 7E 66 66 
33011 5b9 66 66 66 7E 
33015 5ba 7C 00 00 00 
33019 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3301d 5bc 3C 7E 66 66 
33021 5bd 7E 06 06 7E 
33025 5be 7C 00 00 00 
33029 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3302d 5c0 18 7E 7E 18 
33031 5c1 18 18 18 18 
33035 5c2 18 00 00 00 
33039 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3303d 5c4 7C 7E 66 66 
33041 5c5 66 66 7E 7C 
33045 5c6 60 7E 3E 00 
33049 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3304d 5c8 3E 7E 66 66 
33051 5c9 66 66 66 66 
33055 5ca 66 00 00 00 
33059 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3305d 5cc 1C 1C 18 18 
33061 5cd 18 18 18 3C 
33065 5ce 3C 00 00 00 
33069 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3306d 5d0 30 30 30 30 
33071 5d1 30 30 30 30 
33075 5d2 30          | 	byte	$30[9]
33076 5d2 3E 1E 00 00 
3307a 5d3 06 06 06 36 
3307e 5d4 36 1E 1E 1E 
33082 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
33086 5d6 00 00 00 00 
3308a 5d7 1C 1C 18 18 
3308e 5d8 18 18 18 18 
33092 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
33096 5da 00 00 00 00 
3309a 5db 00 00 00    | 	byte	$00[7]
3309d 5dc 6C FE FE D6 
330a1 5dd D6 C6 C6 C6 
330a5 5de C6 00 00 00 
330a9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
330ad 5e0 3E 7E 66 66 
330b1 5e1 66 66 66 66 
330b5 5e2 66 00 00 00 
330b9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
330bd 5e4 3C 7E 66 66 
330c1 5e5 66 66 66 7E 
330c5 5e6 3C 00 00 00 
330c9 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
330cd 5e8 3E 7E 66 66 
330d1 5e9 66 66 66 7E 
330d5 5ea 3E 06 06 00 
330d9 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
330dd 5ec 7C 7E 66 66 
330e1 5ed 66 66 66 7E 
330e5 5ee 7C 60 60 00 
330e9 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
330ed 5f0 3E 7E 66 06 
330f1 5f1 06 06 06 06 
330f5 5f2 06 00 00 00 
330f9 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
330fd 5f4 7C 7E 06 0E 
33101 5f5 3C 70 60 7E 
33105 5f6 3E 00 00 00 
33109 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3310d 5f8 7E 7E 18 18 
33111 5f9 18 18 18 78 
33115 5fa 70 00 00 00 
33119 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3311d 5fc 66 66 66 66 
33121 5fd 66 66 66    | 	byte	$66[7]
33124 5fe 7E 7C 00 00 
33128 5ff 00 00 00 00 
3312c 600 00 66 66 66 
33130 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
33134 602 18 18 00 00 
33138 603 00 00 00 00 
3313c 604 00 C6 C6 D6 
33140 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
33144 606 C6 82 00 00 
33148 607 00 00 00 00 
3314c 608 00 66 66 3C 
33150 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
33154 60a 66 66 00 00 
33158 60b 00 00 00 00 
3315c 60c 00 66 66 66 
33160 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
33164 60e 7C 60 7E 3E 
33168 60f 00 00 00 00 
3316c 610 00 7E 7E 30 
33170 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33174 612 7E 7E 00 00 
33178 613 00 00 30 18 
3317c 614 18 18 18 0C 
33180 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
33184 616 18 30 00 00 
33188 617 00 00 18 18 
3318c 618 18 18 18 18 
33190 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33194 61a 18 18 00 00 
33198 61b 00 00 0C 18 
3319c 61c 18 18 18 30 
331a0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
331a4 61e 18 0C 00 00 
331a8 61f 00 00 6C 7E 
331ac 620 36 00 00 00 
331b0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
331b4 622 00 00 00 00 
331b8 623 00 00 00 00 
331bc 624 00          | 	byte	$00[9]
331bd 624 18 18 18 18 
331c1 625 18 18 00 00 
331c5 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
331c8 627             | 'amiga_font     file "amigafont.def"
331c8 627 00 6C FE FE 
331cc 628 7C 38 10 00 
331d0 629 18 18 18 F8 
331d4 62a F8 18 18 18 | a8_font        file "atari8.fnt"
331d8 62b C0 C0 C0 C0 
331dc 62c C0 C0 C0 C0 | 	byte	$c0[8]
331e0 62d 18 18 18 1F 
331e4 62e 1F 00 00 00 
331e8 62f 18 18 18 1F 
331ec 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
331f0 631 00 00 00 1F 
331f4 632 1F 18 18 18 
331f8 633 C0 E0 70 38 
331fc 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
33200 635 03 07 0E 1C 
33204 636 38 70 E0 C0 
33208 637 80 C0 E0 F0 
3320c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
33210 639 00 00 00 00 
33214 63a F0 F0 F0 F0 
33218 63b 01 03 07 0F 
3321c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
33220 63d F0 F0 F0 F0 
33224 63e 00 00 00 00 
33228 63f 0F 0F 0F 0F 
3322c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
33230 641 FF FF 00 00 
33234 642 00 00 00 00 
33238 643 00 00 00 00 
3323c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
33240 645 00 00 00 00 
33244 646 0F 0F 0F 0F 
33248 647 00 38 38 EE 
3324c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
33250 649 00 00 00 F8 
33254 64a F8 18 18 18 
33258 64b 00 00 00 FF 
3325c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
33260 64d 18 18 18 FF 
33264 64e FF 18 18 18 
33268 64f 00 00 3C 7E 
3326c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
33270 651 00 00 00 00 
33274 652 FF FF FF FF 
33278 653 03 03 03 03 
3327c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
33280 655 00 00 00 FF 
33284 656 FF 18 18 18 
33288 657 18 18 18 FF 
3328c 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
33290 659 0F 0F 0F 0F 
33294 65a 0F 0F 0F 0F | 	byte	$0f[8]
33298 65b 18 18 18 F8 
3329c 65c F8 00 00 00 
332a0 65d 1E 06 1E 06 
332a4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
332a8 65f 00 18 3C 7E 
332ac 660 18 18 18 00 
332b0 661 00 18 18 18 
332b4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
332b8 663 00 18 0C 7E 
332bc 664 0C 18 00 00 
332c0 665 00 18 30 7E 
332c4 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
332c8 667 00 00 00 00 
332cc 668 00 00 00 00 
332d0 669 00          | 	byte	$00[9]
332d1 669 18 18 18 18 
332d5 66a 00 18 00 00 
332d9 66b 66 66 66 00 
332dd 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
332e1 66d 66 FF 66 66 
332e5 66e FF 66 00 18 
332e9 66f 7C 06 3C 60 
332ed 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
332f1 671 66 36 18 0C 
332f5 672 66 62 00 38 
332f9 673 6C 38 1C F6 
332fd 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
33301 675 18 18 18 00 
33305 676 00 00 00 00 
33309 677 70 38 18 18 
3330d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
33311 679 0E 1C 18 18 
33315 67a 1C 0E 00 00 
33319 67b 66 3C FF 3C 
3331d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
33321 67d 18 18 7E 18 
33325 67e 18 00 00 00 
33329 67f 00 00 00 00 
3332d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
33331 681 00 00 7E 00 
33335 682 00 00 00 00 
33339 683 00 00 00 00 
3333d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
33341 685 60 30 18 0C 
33345 686 06 02 00 00 
33349 687 3C 66 76 6E 
3334d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
33351 689 18 1C 18 18 
33355 68a 18 7E 00 00 
33359 68b 3C 66 30 18 
3335d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
33361 68d 7E 30 18 30 
33365 68e 66 3C 00 00 
33369 68f 30 38 3C 36 
3336d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
33371 691 7E 06 3E 60 
33375 692 66 3C 00 00 
33379 693 3C 06 3E 66 
3337d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
33381 695 7E 60 30 18 
33385 696 0C 0C 00 00 
33389 697 3C 66 3C 66 
3338d 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
33391 699 3C 66 7C 60 
33395 69a 30 1C 00 00 
33399 69b 00 18 18 00 
3339d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
333a1 69d 00 18 18 00 
333a5 69e 18 18 0C 60 
333a9 69f 30 18 0C 18 
333ad 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
333b1 6a1 00 7E 00 00 
333b5 6a2 7E 00 00 06 
333b9 6a3 0C 18 30 18 
333bd 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
333c1 6a5 3C 66 30 18 
333c5 6a6 00 18 00 00 
333c9 6a7 3C 66 76 76 
333cd 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
333d1 6a9 18 3C 66 66 
333d5 6aa 7E 66 00 00 
333d9 6ab 3E 66 3E 66 
333dd 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
333e1 6ad 3C 66 06 06 
333e5 6ae 66 3C 00 00 
333e9 6af 1E 36 66 66 
333ed 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
333f1 6b1 7E 06 3E 06 
333f5 6b2 06 7E 00 00 
333f9 6b3 7E 06 3E 06 
333fd 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
33401 6b5 7C 06 06 76 
33405 6b6 66 7C 00 00 
33409 6b7 66 66 7E 66 
3340d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
33411 6b9 7E 18 18 18 
33415 6ba 18 7E 00 00 
33419 6bb 60 60 60 60 
3341d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
33421 6bd 66 36 1E 1E 
33425 6be 36 66 00 00 
33429 6bf 06 06 06 06 
3342d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
33431 6c1 C6 EE FE D6 
33435 6c2 C6 C6 00 00 
33439 6c3 66 6E 7E 7E 
3343d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
33441 6c5 3C 66 66 66 
33445 6c6 66 3C 00 00 
33449 6c7 3E 66 66 3E 
3344d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
33451 6c9 3C 66 66 66 
33455 6ca 36 6C 00 00 
33459 6cb 3E 66 66 3E 
3345d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
33461 6cd 3C 06 3C 60 
33465 6ce 60 3C 00 00 
33469 6cf 7E 18 18 18 
3346d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
33471 6d1 66 66 66 66 
33475 6d2 66          | 	byte	$66[5]
33476 6d2 7E 00 00 66 
3347a 6d3 66 66 66 3C 
3347e 6d4 18 00 00 C6 
33482 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
33486 6d6 C6 00 00 66 
3348a 6d7 66 3C 3C 66 
3348e 6d8 66 00 00 66 
33492 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
33496 6da 18 00 00 7E 
3349a 6db 30 18 0C 06 
3349e 6dc 7E 00 00 78 
334a2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
334a6 6de 78 00 00 02 
334aa 6df 06 0C 18 30 
334ae 6e0 60 00 00 1E 
334b2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
334b6 6e2 1E 00 00 10 
334ba 6e3 38 6C C6 00 
334be 6e4 00 00 00 00 
334c2 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
334c6 6e6 FF 00 00 18 
334ca 6e7 3C 7E 7E 3C 
334ce 6e8 18 00 00 00 
334d2 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
334d6 6ea 7C 00 00 06 
334da 6eb 06 3E 66 66 
334de 6ec 3E 00 00 00 
334e2 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
334e6 6ee 3C 00 00 60 
334ea 6ef 60 7C 66 66 
334ee 6f0 7C 00 00 00 
334f2 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
334f6 6f2 3C 00 00 70 
334fa 6f3 18 7C 18 18 
334fe 6f4 18 00 00 00 
33502 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
33506 6f6 60 3E 00 06 
3350a 6f7 06 3E 66 66 
3350e 6f8 66 00 00 18 
33512 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
33516 6fa 3C 00 00 60 
3351a 6fb 00 60 60 60 
3351e 6fc 60 3C 00 06 
33522 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
33526 6fe 66 00 00 1C 
3352a 6ff 18 18 18 18 
3352e 700 3C 00 00 00 
33532 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
33536 702 C6 00 00 00 
3353a 703 3E 66 66 66 
3353e 704 66 00 00 00 
33542 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
33546 706 3C 00 00 00 
3354a 707 3E 66 66 3E 
3354e 708 06 06 00 00 
33552 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
33556 70a 60 60 00 00 
3355a 70b 3E 66 06 06 
3355e 70c 06 00 00 00 
33562 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
33566 70e 3E 00 00 18 
3356a 70f 7E 18 18 18 
3356e 710 70 00 00 00 
33572 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
33576 712 7C 00 00 00 
3357a 713 66 66 66 3C 
3357e 714 18 00 00 00 
33582 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
33586 716 6C 00 00 00 
3358a 717 66 3C 18 3C 
3358e 718 66 00 00 00 
33592 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
33596 71a 30 1E 00 00 
3359a 71b 7E 30 18 0C 
3359e 71c 7E 00 00 18 
335a2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
335a6 71e 3C 00 18 18 
335aa 71f 18 18 18 18 
335ae 720 18 18 00 7E 
335b2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
335b6 722 60 00 10 18 
335ba 723 1C 1E 1C 18 
335be 724 10 00 08 18 
335c2 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
335c6 726 08 00       | 	byte	$08, $00
335c8 727 00 00 00 00 
335cc 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
335cd 728 80 00 00 00 
335d1 729 00 80 00 00 
335d5 72a 80 80 00 00 
335d9 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
335dd 72c 80 00 80 00 
335e1 72d 00 40 80 00 
335e5 72e AA AA AA 00 
335e9 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
335ed 730 FF 00 00 00 
335f1 731 00 FF 00 00 
335f5 732 FF FF 00 00 
335f9 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
335fd 734 FF 00 FF 00 
33601 735 00 FF FF 00 
33605 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
33608 737 00 00 00 00 
3360c 738 00          | ataripalette   file "ataripalettep2.def"
3360d 738 11 11 11 00 
33611 739 22 22 22 00 
33615 73a 33 33 33 00 
33619 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3361d 73c 55 55 55 00 
33621 73d 66 66 66 00 
33625 73e 77 77 77 00 
33629 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3362d 740 99 99 99 00 
33631 741 AA AA AA 00 
33635 742 BB BB BB 00 
33639 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3363d 744 DD DD DD 00 
33641 745 EE EE EE 00 
33645 746 FF FF FF 00 
33649 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3364d 748 00 14 40 00 
33651 749 00 1E 60 00 
33655 74a 00 28 80 00 
33659 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3365d 74c 00 3C BF 00 
33661 74d 00 46 DF 00 
33665 74e 00 50 FF 00 
33669 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3366d 750 39 77 FF 00 
33671 751 55 8A FF 00 
33675 752 71 9E FF 00 
33679 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3367d 754 AA C5 FF 00 
33681 755 C6 D8 FF 00 
33685 756 E3 EC FF 00 
33689 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3368d 758 00 00 40 00 
33691 759 00 00 60 00 
33695 75a 00 00 80 00 
33699 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3369d 75c 00 00 BF 00 
336a1 75d 00 00 DF 00 
336a5 75e 00 00 FF 00 
336a9 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
336ad 760 39 39 FF 00 
336b1 761 55 55 FF 00 
336b5 762 71 71 FF 00 
336b9 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
336bd 764 AA AA FF 00 
336c1 765 C6 C6 FF 00 
336c5 766 E3 E3 FF 00 
336c9 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
336cd 768 20 00 40 00 
336d1 769 30 00 60 00 
336d5 76a 40 00 80 00 
336d9 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
336dd 76c 60 00 BF 00 
336e1 76d 70 00 DF 00 
336e5 76e 80 00 FF 00 
336e9 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
336ed 770 9C 39 FF 00 
336f1 771 AA 55 FF 00 
336f5 772 B8 71 FF 00 
336f9 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
336fd 774 D5 AA FF 00 
33701 775 E3 C6 FF 00 
33705 776 F1 E3 FF 00 
33709 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3370d 778 40 00 40 00 
33711 779 60 00 60 00 
33715 77a 80 00 80 00 
33719 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3371d 77c BF 00 BF 00 
33721 77d DF 00 DF 00 
33725 77e FF 00 FF 00 
33729 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3372d 780 FF 39 FF 00 
33731 781 FF 55 FF 00 
33735 782 FF 71 FF 00 
33739 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3373d 784 FF AA FF 00 
33741 785 FF C6 FF 00 
33745 786 FF E3 FF 00 
33749 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3374d 788 40 00 20 00 
33751 789 60 00 30 00 
33755 78a 80 00 40 00 
33759 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3375d 78c BF 00 60 00 
33761 78d DF 00 70 00 
33765 78e FF 00 80 00 
33769 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3376d 790 FF 39 9C 00 
33771 791 FF 55 AA 00 
33775 792 FF 71 B8 00 
33779 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3377d 794 FF AA D5 00 
33781 795 FF C6 E3 00 
33785 796 FF E3 F1 00 
33789 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3378d 798 40 00 00 00 
33791 799 60 00 00 00 
33795 79a 80 00 00 00 
33799 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3379d 79c BF 00 00 00 
337a1 79d DF 00 00 00 
337a5 79e FF 00 00 00 
337a9 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
337ad 7a0 FF 39 39 00 
337b1 7a1 FF 55 55 00 
337b5 7a2 FF 71 71 00 
337b9 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
337bd 7a4 FF AA AA 00 
337c1 7a5 FF C6 C6 00 
337c5 7a6 FF E3 E3 00 
337c9 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
337cd 7a8 40 10 00 00 
337d1 7a9 60 18 00 00 
337d5 7aa 80 20 00 00 
337d9 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
337dd 7ac BF 30 00 00 
337e1 7ad DF 38 00 00 
337e5 7ae FF 40 00 00 
337e9 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
337ed 7b0 FF 6A 39 00 
337f1 7b1 FF 80 55 00 
337f5 7b2 FF 95 71 00 
337f9 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
337fd 7b4 FF BF AA 00 
33801 7b5 FF D5 C6 00 
33805 7b6 FF EA E3 00 
33809 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3380d 7b8 40 20 00 00 
33811 7b9 60 30 00 00 
33815 7ba 80 40 00 00 
33819 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3381d 7bc BF 60 00 00 
33821 7bd DF 70 00 00 
33825 7be FF 80 00 00 
33829 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3382d 7c0 FF 9C 39 00 
33831 7c1 FF AA 55 00 
33835 7c2 FF B8 71 00 
33839 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3383d 7c4 FF D5 AA 00 
33841 7c5 FF E3 C6 00 
33845 7c6 FF F1 E3 00 
33849 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3384d 7c8 40 30 00 00 
33851 7c9 60 48 00 00 
33855 7ca 80 60 00 00 
33859 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3385d 7cc BF 90 00 00 
33861 7cd DF A8 00 00 
33865 7ce FF C0 00 00 
33869 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3386d 7d0 FF CE 39 00 
33871 7d1 FF D5 55 00 
33875 7d2 FF DC 71 00 
33879 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3387d 7d4 FF EA AA 00 
33881 7d5 FF F1 C6 00 
33885 7d6 FF F8 E3 00 
33889 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3388d 7d8 30 40 00 00 
33891 7d9 48 60 00 00 
33895 7da 60 80 00 00 
33899 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3389d 7dc 90 BF 00 00 
338a1 7dd A8 DF 00 00 
338a5 7de C0 FF 00 00 
338a9 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
338ad 7e0 CE FF 39 00 
338b1 7e1 D5 FF 55 00 
338b5 7e2 DC FF 71 00 
338b9 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
338bd 7e4 EA FF AA 00 
338c1 7e5 F1 FF C6 00 
338c5 7e6 F8 FF E3 00 
338c9 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
338cd 7e8 00 40 00 00 
338d1 7e9 00 60 00 00 
338d5 7ea 00 80 00 00 
338d9 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
338dd 7ec 00 BF 00 00 
338e1 7ed 00 DF 00 00 
338e5 7ee 00 FF 00 00 
338e9 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
338ed 7f0 39 FF 39 00 
338f1 7f1 55 FF 55 00 
338f5 7f2 71 FF 71 00 
338f9 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
338fd 7f4 AA FF AA 00 
33901 7f5 C6 FF C6 00 
33905 7f6 E3 FF E3 00 
33909 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3390d 7f8 00 40 14 00 
33911 7f9 00 60 1E 00 
33915 7fa 00 80 28 00 
33919 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3391d 7fc 00 BF 3C 00 
33921 7fd 00 DF 46 00 
33925 7fe 00 FF 50 00 
33929 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3392d 800 39 FF 77 00 
33931 801 55 FF 8A 00 
33935 802 71 FF 9E 00 
33939 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3393d 804 AA FF C5 00 
33941 805 C6 FF D8 00 
33945 806 E3 FF EC 00 
33949 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3394d 808 00 40 28 00 
33951 809 00 60 3C 00 
33955 80a 00 80 50 00 
33959 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3395d 80c 00 BF 78 00 
33961 80d 00 DF 8C 00 
33965 80e 00 FF A0 00 
33969 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3396d 810 39 FF B5 00 
33971 811 55 FF C0 00 
33975 812 71 FF CA 00 
33979 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3397d 814 AA FF DF 00 
33981 815 C6 FF EA 00 
33985 816 E3 FF F4 00 
33989 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3398d 818 00 40 40 00 
33991 819 00 60 60 00 
33995 81a 00 80 80 00 
33999 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3399d 81c 00 BF BF 00 
339a1 81d 00 DF DF 00 
339a5 81e 00 FF FF 00 
339a9 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
339ad 820 39 FF FF 00 
339b1 821 55 FF FF 00 
339b5 822 71 FF FF 00 
339b9 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
339bd 824 AA FF FF 00 
339c1 825 C6 FF FF 00 
339c5 826 E3 FF FF 00 
339c9 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
339cd 828 00 28 40 00 
339d1 829 00 3C 60 00 
339d5 82a 00 50 80 00 
339d9 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
339dd 82c 00 78 BF 00 
339e1 82d 00 8C DF 00 
339e5 82e 00 A0 FF 00 
339e9 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
339ed 830 39 B5 FF 00 
339f1 831 55 C0 FF 00 
339f5 832 71 CA FF 00 
339f9 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
339fd 834 AA DF FF 00 
33a01 835 C6 EA FF 00 
33a05 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
33a08 837             | 
33a08 837             | '**********************************************************************************
33a08 837             | '
33a08 837             | '        Timings and colors definitions
33a08 837             | '
33a08 837             | '**********************************************************************************
33a08 837             | 
33a08 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
33a08 837 08 00 00 00 
33a0c 838 3C 00 00 00 
33a10 839 08 00 00 00 
33a14 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
33a18 83b 07 00 00 00 
33a1c 83c 04 00 00 00 
33a20 83d 01 00 00 00 
33a24 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
33a28 83f 58 02 00 00 
33a2c 840 6A 8C 15 14 
33a30 841 FB 06 B7 01 
33a34 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
33a38 843 00 00 00 00 
33a3c 844 C0 00 00 00 
33a40 845 00 00 00 00 
33a44 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33a48 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
33a48 847 00 75 C7 97 
33a4c 848 27 47 F6 0A 
33a50 849 05 79 CB 9B 
33a54 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
33a58 84b             | 
33a58 84b             | ''--------  Initialization  ----------------------------------------------------------------
33a58 84b             | 
33a58 84b 28 0C 64 FD | hdmi            setq    #6
33a5c 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
33a60 84d 28 10 64 FD |                 setq    #8
33a64 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
33a68 84f             | 
33a68 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
33a6c 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
33a70 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
33a74 852 D6 C6 01 F1 |                 add     t1,hbase
33a78 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
33a7c 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
33a80 855 7B 0B 80 5F 
33a84 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
33a88 857 66 66 86 FF 
33a8c 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
33a90 859             | '
33a90 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
33a94 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
33a98 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
33a9c 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
33aa0 85d             | 
33aa0 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
33aa4 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
33aa8 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
33aac 860             | 
33aac 860             | ''--------  frame rendering main loop  ---------------------------------------------------
33aac 860             | 
33aac 860 28 06 64 FD | p101            setq 	#3
33ab0 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
33ab4 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
33ab8 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
33abc 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
33ac0 865 00 A0 05 F6 |                 mov     dlinum, #0
33ac4 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
33ac8 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
33acc 868             | 
33acc 868             | 
33acc 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
33ad0 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
33ad4 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
33ad8 86b             |                 
33ad8 86b             | 
33ad8 86b             | 
33ad8 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
33ad8 86b             |   
33ad8 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
33adc 86c 29 FE 65 3D |          if_nc  setq2   #255
33ae0 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
33ae4 86e             | 
33ae4 86e             | '' -----   up porch (before the picture)
33ae4 86e             | 
33ae4 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
33ae8 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
33aec 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
33af0 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
33af4 872             |  
33af4 872             |    
33af4 872             |  
33af4 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
33af8 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
33afc 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
33b00 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
33b04 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
33b08 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
33b0c 878             | 
33b0c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
33b10 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
33b14 87a 48 00 B0 FD | 		call    #dli
33b18 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
33b1c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
33b20 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
33b24 87e             |                 	
33b24 87e             |                 
33b24 87e             | 
33b24 87e             |  
33b24 87e             | '' ------- the main screen drawing starts here
33b24 87e             | 
33b24 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
33b28 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
33b2c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
33b30 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
33b34 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
33b38 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
33b3c 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
33b40 885             |               
33b40 885             | 
33b40 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
33b44 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
33b48 887             | 
33b48 887             | ' ---------------- All visible lines displayed now, start vblank  
33b48 887             | 
33b48 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
33b4c 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
33b50 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
33b54 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
33b58 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
33b5c 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
33b60 88d             | 
33b60 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
33b60 88d             | 
33b60 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
33b60 88d             | 
33b60 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
33b64 88e             | 
33b64 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
33b68 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
33b6c 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
33b70 891             | 
33b70 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
33b74 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
33b78 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
33b7c 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
33b80 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
33b84 896             | 
33b84 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
33b88 897 DD C6 41 F8 |                 getnib  t1,dl,#0
33b8c 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
33b90 899 70 00 90 AD |     if_z        jmp     #preload
33b94 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
33b98 89b 94 00 90 AD |     if_z        jmp     #preload2
33b9c 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
33ba0 89d 0C 00 90 AD |     if_z        jmp     #p390
33ba4 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
33ba8 89f 28 00 90 AD |     if_z        jmp     #p391  
33bac 8a0             | 
33bac 8a0 2D 00 64 FD | p308            ret
33bb0 8a1             |    
33bb0 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
33bb4 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
33bb8 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
33bbc 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
33bc0 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
33bc4 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
33bc8 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
33bcc 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
33bd0 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
33bd4 8aa             |  
33bd4 8aa             | '' --------  Reload palette. To do 
33bd4 8aa             | 
33bd4 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
33bd8 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
33bdc 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
33be0 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
33be4 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
33be8 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
33bec 8b0 70 FF 9F FD |         	jmp     #dli                
33bf0 8b1             |       
33bf0 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
33bf0 8b1             | 
33bf0 8b1             | 
33bf0 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
33bf0 8b1             | 
33bf0 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
33bf4 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
33bf8 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
33bfc 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
33c00 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
33c04 8b6             |         
33c04 8b6             | '' -------------- Preload a line from PSRAM        
33c04 8b6             |         
33c04 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
33c08 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
33c0c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
33c10 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
33c14 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
33c18 8bb             | 
33c18 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
33c1c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
33c20 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
33c24 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
33c28 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
33c2c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
33c30 8c1             |  
33c30 8c1             |  
33c30 8c1             | preload2      '  incmod  dlinum,#3
33c30 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
33c34 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
33c38 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
33c3c 8c4 28 02 64 FD |                 setq	#1
33c40 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
33c44 8c6             |                 
33c44 8c6             | 
33c44 8c6             | '' -------------- Draw sprites
33c44 8c6             | 
33c44 8c6 CF 5C 02 F6 | sprite          mov t8,frames
33c48 8c7 10 5C 0E F5 | 		and t8,#16 wz
33c4c 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
33c50 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
33c54 8ca             | 		
33c54 8ca             | 
33c54 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
33c58 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
33c5c 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
33c60 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
33c64 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
33c68 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
33c6c 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
33c70 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
33c74 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
33c78 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
33c7c 8d4 01 52 86 F1 |                 sub     sprite_h,#1
33c80 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
33c84 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
33c88 8d7             | 
33c88 8d7             | 
33c88 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
33c8c 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
33c90 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
33c94 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
33c98 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
33c9c 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
33ca0 8dd 00 5E 06 F6 |                 mov 	t9,#0
33ca4 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
33ca8 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
33cac 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
33cb0 8e1             |      
33cb0 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
33cb4 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
33cb8 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
33cbc 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
33cc0 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
33cc4 8e6             |                 
33cc4 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
33cc8 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
33ccc 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
33cd0 8e9             |   		
33cd0 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
33cd4 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
33cd8 8eb             | 
33cd8 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
33cdc 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
33ce0 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
33ce4 8ee             |  
33ce4 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
33ce8 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
33cec 8f0 10 00 90 CD |      if_c 	jmp     #p899		
33cf0 8f1             | 	
33cf0 8f1             | 	
33cf0 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
33cf4 8f2 28 CD 01 F1 | 		add	t4,sprite_w
33cf8 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
33cfc 8f4             | 
33cfc 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
33d00 8f5             | 
33d00 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
33d04 8f6 01 58 86 F1 | 	 	sub     t6,#1
33d08 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
33d0c 8f8             | 
33d0c 8f8 28 58 62 FD |                 setq   	t6
33d10 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
33d14 8fa 28 5D 02 F6 |                 mov t8,sprite_w
33d18 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
33d1c 8fc 24 00 90 AD |         if_z    jmp #p898
33d20 8fd             |          
33d20 8fd             |         
33d20 8fd 70 5F 06 F6 |                 mov  t9,#368
33d24 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
33d28 8ff             | 
33d28 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
33d2c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
33d30 901 FF FF 7F FF 
33d34 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
33d38 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
33d3c 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
33d40 905 2D 01 00 F5 |                 and 0-0, t7
33d44 906             |                
33d44 906             | 
33d44 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
33d48 907 E5 E0 7A FA |                 wmlong 368,t3				
33d4c 908             |                 
33d4c 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
33d50 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
33d54 90a 2D 00 64 FD |                 ret
33d58 90b             | 	
33d58 90b             | 	
33d58 90b             |                
33d58 90b             |  
33d58 90b             | '' -------------- Graphics line ------------------------------------------------------------
33d58 90b             |  
33d58 90b             | 
33d58 90b             | '' consts and vars
33d58 90b             | 
33d58 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
33d5c 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
33d60 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
33d64 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
33d68 90f             | 
33d68 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
33d6c 910             | 
33d6c 910             | '------ these longs will be set by setmode function
33d6c 910             | 
33d6c 910 00 00 00 00 | m_bs            long    0        'blanks before sync
33d70 911 00 00 00 00 | m_sn            long    0        'sync
33d74 912 00 00 00 00 | m_bv            long    0        'blanks before visible
33d78 913 00 00 00 00 | m_vi            long    0        'visible pixels #
33d7c 914             | 'm_border        long    0        'left/right borders
33d7c 914 00 00 00 00 | i_upporch       long    0        'up porch lines
33d80 915 00 00 00 00 | i_vsync         long    0        'vsync lines
33d84 916 00 00 00 00 | i_downporch     long    0        'down porch lines
33d88 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
33d8c 918 00 00 00 00 | i_totalvis      long    0
33d90 919             | 
33d90 919             | '-------------------------------------
33d90 919             |  
33d90 919 00 00 00 00 | linenum         long    0
33d94 91a 00 00 00 00 | frames          long    0
33d98 91b 00 00 00 00 | dlinum long 0
33d9c 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
33da0 91d             | 
33da0 91d 00 00 00 00 | vblankptr       long    0
33da4 91e 00 00 00 00 | modeptr         long    0
33da8 91f 00 00 00 00 | paletteptr      long    0
33dac 920 00 00 00 00 | dlptr           long    0
33db0 921 01 00 00 00 | hbase           long    1
33db4 922 00 00 00 00 | mailbox         long    0
33db8 923 00 00 00 00 | spriteptr          long 0
33dbc 924             | 
33dbc 924 00 00 00 00 | cmd             long    0
33dc0 925 00 B0 07 00 | buf1            long    $80000-16384-4096
33dc4 926 00 04 00 00 | buf2            long    1024
33dc8 927 01 00 00 00 | dlptr2          long    1
33dcc 928 01 00 00 00 | dl              long    1
33dd0 929             | 
33dd0 929 00 00 00 00 | buf1c long 0
33dd4 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
33dd8 92b 01 00 00 00 | framebuf2       long    1
33ddc 92c 01 00 00 00 | hsync0          long    1
33de0 92d 01 00 00 00 | hsync1          long    1
33de4 92e             | 
33de4 92e 01 00 00 00 | t1              long    1
33de8 92f 00 00 00 00 | t2 long 0
33dec 930 00 00 00 00 | t3 long 0
33df0 931 00 00 00 00 | t4 long 0
33df4 932             | 
33df4 932 00 00 00 00 | rcnt            long    0  'dl repeat count
33df8 933 00 00 00 00 | rcnt2           long    0
33dfc 934 00 00 00 00 | rcnt2a          long    0
33e00 935 00 00 00 00 | roffset         long    0
33e04 936 00 00 00 00 | rdl             long    0  'dl repeat line
33e08 937 00 00 00 00 | dlc             long    0  'dl command
33e0c 938             | 
33e0c 938 FF FF FF FF | affffffff       long    $ffffffff
33e10 939 00 00 00 00 | sprite1pointer long 0
33e14 93a 00 00 00 00 | sprite1xy      long 0
33e18 93b 00 00 00 00 | sprite1wh      long 0
33e1c 93c 00 00 00 00 | sprite2pointer long 0
33e20 93d 00 00 00 00 | sprite2xy      long 0
33e24 93e 00 00 00 00 | sprite2wh      long 0
33e28 93f 00 00 00 00 | sprite3pointer long 0
33e2c 940 00 00 00 00 | sprite3xy      long 0
33e30 941 00 00 00 00 | sprite3wh      long 0
33e34 942 00 00 00 00 | sprite4pointer long 0
33e38 943 00 00 00 00 | sprite4xy      long 0
33e3c 944 00 00 00 00 | sprite4wh      long 0
33e40 945 00 00 00 00 | sprite5pointer long 0
33e44 946 00 00 00 00 | sprite5xy      long 0
33e48 947 00 00 00 00 | sprite5wh      long 0
33e4c 948 00 00 00 00 | sprite6pointer long 0
33e50 949 00 00 00 00 | sprite6xy      long 0
33e54 94a 00 00 00 00 | sprite6wh      long 0
33e58 94b 00 00 00 00 | sprite7pointer long 0
33e5c 94c 00 00 00 00 | sprite7xy      long 0
33e60 94d 00 00 00 00 | sprite7wh      long 0
33e64 94e 00 00 00 00 | sprite8pointer long 0
33e68 94f 00 00 00 00 | sprite8xy      long 0
33e6c 950 00 00 00 00 | sprite8wh      long 0
33e70 951 00 00 00 00 | sprite9pointer long 0
33e74 952 00 00 00 00 | sprite9xy      long 0
33e78 953 00 00 00 00 | sprite9wh      long 0
33e7c 954 00 00 00 00 | sprite10pointer long 0
33e80 955 00 00 00 00 | sprite10xy      long 0
33e84 956 00 00 00 00 | sprite10wh      long 0
33e88 957 00 00 00 00 | sprite11pointer long 0
33e8c 958 00 00 00 00 | sprite11xy      long 0
33e90 959 00 00 00 00 | sprite11wh      long 0
33e94 95a 00 00 00 00 | sprite12pointer long 0
33e98 95b 00 00 00 00 | sprite12xy      long 0
33e9c 95c 00 00 00 00 | sprite12wh      long 0
33ea0 95d 00 00 00 00 | sprite13pointer long 0
33ea4 95e 00 00 00 00 | sprite13xy      long 0
33ea8 95f 00 00 00 00 | sprite13wh      long 0
33eac 960 00 00 00 00 | sprite14pointer long 0
33eb0 961 00 00 00 00 | sprite14xy      long 0
33eb4 962 00 00 00 00 | sprite14wh      long 0
33eb8 963 00 00 00 00 | sprite15pointer long 0
33ebc 964 00 00 00 00 | sprite15xy      long 0
33ec0 965 00 00 00 00 | sprite15wh      long 0
33ec4 966 00 00 00 00 | sprite16pointer long 0
33ec8 967 00 00 00 00 | sprite16xy      long 0
33ecc 968 00 00 00 00 | sprite16wh      long 0
33ed0 969 00 00 00 00 | sprite17pointer long 0
33ed4 96a 00 00 00 00 | sprite17xy      long 0
33ed8 96b 00 00 00 00 | sprite17wh      long 0
33edc 96c 00 00 00 00 | sprite18pointer long 0
33ee0 96d 00 00 00 00 | sprite18xy      long 0
33ee4 96e 00 00 00 00 | sprite18wh      long 0
33ee8 96f 00 00 00 00 | spritenum long 0
33eec 970             | 
33eec 970 00 00 00 00 | spriteline long 0
33ef0 971 84 03 00 00 | sprite_x long 900
33ef4 972 00 00 00 00 | sprite_y long 0
33ef8 973 10 00 00 00 | sprite_w long 16
33efc 974 40 00 00 00 | sprite_h long 64
33f00 975 00 00 00 00 | l2 long 0
33f04 976 00 00 00 00 | t5 long 0
33f08 977 00 00 00 00 | t6 long 0
33f0c 978 00 00 00 00 | t7 long 0
33f10 979 00 00 00 00 | t8 long 0
33f14 97a 00 00 00 00 | t9 long 0
33f18 97b 00 00 00 00 | preloadaddr long 0
33f1c 97c 00 00 00 00 | preloadlineaddr long 0
33f20 97d 00 04 00 00 | a1024 long 1024
33f24 97e             | 
33f24 97e E0 03 00 00 | aa long 992
33f28 97f FF 03 00 00 | a1023 long 1023
33f2c 980 00 10 00 00 | a4096 long 4096
33f30 981             |  fit 368
33f30 981             | _psram_spin2_dat_
33f30 981 00 00 00 00 
      ...             
34028 9bf 00 00 00 00 
3402c 9c0 00 00 00 00 |     listdata long 0[8*8]
34030 9c1             |             orgh
34030                 | 
34030                 | ' driver state
34030     FF FF FF FF | drivercog   long    -1  ' COG id of driver
34034     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
34038                 | 
34038                 | ' delay profile
34038     07 00 00 00 
3403c     00 CF 7B 05 
34040     80 D1 F0 08 
34044     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
34048     80 C4 60 0F 
3404c     80 39 7A 12 
34050     40 2D D9 13 
34054     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
34058                 | 
34058                 | ' data to be passed to driver when starting it
34058                 | startupData
34058     00 00 00 00 |     long    0           ' current frequency
3405c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
34060     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
34064     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
34068     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3406c     78 40 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
34070     F8 40 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
34074     18 41 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
34078                 | 
34078                 | ' data for memory
34078                 | deviceData
34078                 |     ' 16 bank parameters follow (16MB per bank)
34078     00 00 00 00 
      ...             
340b0     00 00 00 00 
340b4     00 00 00 00 |     long    0[16]                               ' banks 0-15
340b8                 |     ' 16 banks of pin parameters follow
340b8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
340bc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
340c0     FF FF FF FF 
      ...             
340f0     FF FF FF FF 
340f4     FF FF FF FF |     long    -1[14]                              ' banks 2-15
340f8                 | 
340f8                 | ' data for COG polling
340f8                 | qosData 
340f8     00 00 FF FF 
340fc     00 00 FF FF 
34100     00 00 FF FF 
34104     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
34108     00 00 FF FF 
3410c     00 00 FF FF 
34110     00 00 FF FF 
34114     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
34118                 |     
34118                 | ' mailbox storage
34118                 | 
34118                 | mailboxes
34118     00 00 00 00 
      ...             
34170     00 00 00 00 
34174     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
34178                 | 	alignl
34178                 | _psram16drv_spin2_dat_
34178                 |                             orgh
34178     00 00 00 00 
      ...             
34190     00 00 00 00 
34194     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
34198                 | 
34198                 | driver_start
34198                 |                             org
34198 000             | '..................................................................................................
34198 000             | ' Memory layout for COG RAM once operational:
34198 000             | '
34198 000             | '  COG RAM address      Usage
34198 000             | '  ---------------      ----
34198 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
34198 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
34198 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
34198 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
34198 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
34198 000             | '  ~$198-$1F3           State and register variables
34198 000             | '
34198 000             | ' Also during driver COG startup:
34198 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
34198 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
34198 000             | '..................................................................................................
34198 000             |                             
34198 000             | ' Mailbox storage after vector initialization
34198 000             | 
34198 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3419c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
341a0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
341a4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
341a8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
341ac 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
341b0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
341b4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
341b8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
341bc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
341c0 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
341c4 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
341c8 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
341cc 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
341d0 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
341d4 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
341d8 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
341dc 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
341e0 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
341e4 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
341e8 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
341ec 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
341f0 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
341f4 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
341f8 018             | 
341f8 018             | ' Mailbox parameter addresses per COG once patched
341f8 018             |                             
341f8 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
341fc 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
34200 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
34204 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
34208 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3420c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
34210 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
34214 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
34218 020             | 
34218 020             | '..................................................................................................
34218 020             | ' Per COG request and state setup and service branching
34218 020             |         
34218 020             | cog0                 
34218 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3421c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
34220 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
34224 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
34228 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3422c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34230 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
34234 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
34238 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3423c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34240 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34244 02b 33 CA 63 FD |                             execf   request-0               'jump to service
34248 02c             | cog1                        
34248 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3424c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
34250 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
34254 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
34258 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3425c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34260 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
34264 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
34268 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3426c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34270 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34274 037 33 CA 63 FD |                             execf   request-0               'jump to service
34278 038             | cog2                         
34278 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3427c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
34280 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
34284 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
34288 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3428c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34290 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
34294 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
34298 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3429c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
342a0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
342a4 043 33 CA 63 FD |                             execf   request-0               'jump to service
342a8 044             | cog3                        
342a8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
342ac 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
342b0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
342b4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
342b8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
342bc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
342c0 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
342c4 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
342c8 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
342cc 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
342d0 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
342d4 04f 33 CA 63 FD |                             execf   request-0               'jump to service
342d8 050             | cog4                        
342d8 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
342dc 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
342e0 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
342e4 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
342e8 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
342ec 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
342f0 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
342f4 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
342f8 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
342fc 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34300 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34304 05b 33 CA 63 FD |                             execf   request-0               'jump to service
34308 05c             | cog5                        
34308 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3430c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
34310 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
34314 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
34318 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3431c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34320 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
34324 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
34328 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3432c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34330 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34334 067 33 CA 63 FD |                             execf   request-0               'jump to service
34338 068             | cog6                        
34338 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3433c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
34340 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
34344 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
34348 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3434c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34350 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
34354 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
34358 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3435c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34360 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34364 073 33 CA 63 FD |                             execf   request-0               'jump to service
34368 074             | cog7                        
34368 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3436c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
34370 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
34374 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
34378 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3437c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34380 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
34384 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
34388 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3438c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34390 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34394 07f 33 CA 63 FD |                             execf   request-0               'jump to service
34398 080             |                             fit     128
34398 080             | 
34398 080             |                             fit     128
34398 080             | pad                         long    0[128-$]                'align init code to $80
34398 080             | 
34398 080             | '..................................................................................................
34398 080             | 
34398 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
34398 080             | 
34398 080             | init                        
34398 080             |                             ' get driver scratch long address in hub
34398 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3439c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
343a0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
343a4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
343a8 084             |                     
343a8 084             |                             ' read in the additional LUT RAM code
343a8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
343ac 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
343b0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
343b4 087             | 
343b4 087             |                             ' read the startup parameters
343b4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
343b8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
343bc 089             | 
343bc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
343bc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
343c0 08a             | 
343c0 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
343c4 08b 01 00 00 5F 
343c8 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
343cc 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
343d0 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
343d4 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
343d8 090             | 
343d8 090             |                             ' setup data pin modes and data bus pin group in streamer commands
343d8 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
343dc 091 01 00 00 FF 
343e0 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
343e4 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
343e8 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
343ec 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
343f0 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
343f4 097 08 DE 47 F5 |                             or      a, #8
343f8 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
343fc 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
34400 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
34404 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
34408 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3440c 09d 01 DE 07 F1 |                             add     a, #1
34410 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
34414 09f             |  
34414 09f             |                             ' setup device control pin states
34414 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
34418 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3441c 0a1 01 00 00 FF 
34420 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
34424 0a3             | 
34424 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
34428 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3442c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
34430 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
34434 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
34438 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3443c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
34440 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
34444 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
34448 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3444c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
34450 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
34454 0af             | pinloop
34454 0af             |                             ' generate minimum CE high time before access
34454 0af A1 07 00 FF 
34458 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3445c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
34460 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
34464 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
34468 0b4 1F DE 63 FD |                             waitx   a                       'delay
3446c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
34470 0b6             | 
34470 0b6             |                             ' setup the COG mailboxes and addresses 
34470 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
34474 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
34478 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3447c 0b9             | 
3447c 0b9 28 2E 64 FD |                             setq    #24-1
34480 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
34484 0bb             | 
34484 0bb             |                             ' setup the polling loop for active COGs 
34484 0bb 01 C2 63 FD |                             cogid   id
34488 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3448c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
34490 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
34494 0bf 0A F0 07 F6 |                             mov     ptra, #10
34498 0c0 E1 F1 03 FA |                             mul     ptra, id
3449c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
344a0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
344a4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
344a8 0c4 03 C2 07 FA |                             mul     id, #3
344ac 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
344b0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
344b4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
344b8 0c8 D8 01 B0 FD |                             call    #reloadcogs
344bc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
344c0 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
344c4 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
344c4 0cb D8 E5 B7 F9 |                             setd    d, #addr1
344c8 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
344cc 0cd 08 04 DC FC |                             rep     #2, #8
344d0 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
344d4 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
344d8 0d0             | 
344d8 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
344d8 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
344d8 0d0 01 C2 63 FD |                             cogid   id
344dc 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
344e0 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
344e4 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
344e8 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
344ec 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
344f0 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
344f4 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
344f8 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
344fc 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
34500 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34504 0db 3F E4 A7 F9 |                             alti    d, #%111_111
34508 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3450c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
34510 0de A5 E5 03 F1 |                             add     d, const512
34514 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34518 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3451c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
34520 0e2             |                             
34520 0e2             |                             ' setup register values for control vector loop setup after we return
34520 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
34524 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
34528 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3452c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
34530 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
34534 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
34538 0e8 D0 C3 8F F9 |                             altd    id, #id0
3453c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
34540 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
34544 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
34548 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3454c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
34550 0ee             |  
34550 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
34554 0ef 07 CA 07 F5 |                             and     request, #7
34558 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3455c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
34560 0f2             |                             fit     $100                    'ensure all init code fits this space
34560 0f2             | 
34560 0f2             |                             fit     $100                    'ensure all init code fits this space
34560 0f2             | 
34560 0f2 00 00 00 00 
      ...             
34590 0fe 00 00 00 00 
34594 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
34598 100             | 
34598 100             | '..................................................................................................
34598 100             | ' Error result handling and COG notification of request completion
34598 100             | 
34598 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3459c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
345a0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
345a4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
345a8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
345ac 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
345b0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
345b4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
345b8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
345bc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
345c0 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
345c4 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
345c8 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
345cc 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
345d0 10e             | ' Poller re-starts here after a COG is serviced
345d0 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
345d4 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
345d8 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
345dc 111             | ' Main dynamic polling loop repeats until a request arrives
345dc 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
345e0 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
345e4 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
345e8 114             | 
345e8 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
345ec 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
345f0 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
345f4 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
345f8 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
345fc 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
34600 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
34604 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
34608 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3460c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
34610 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
34614 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
34618 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3461c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
34620 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
34624 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
34628 124             | 
34628 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3462c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
34630 126             |  
34630 126             | '..................................................................................................
34630 126             | ' List handler                               
34630 126             | 
34630 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
34634 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
34638 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3463c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
34640 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
34644 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
34648 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3464c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
34650 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
34654 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
34658 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3465c 131 33 00 60 FD |                             execf   0-0                     'process the request 
34660 132             | 
34660 132             | '..................................................................................................
34660 132             | ' Restoring per COG state and resuming where we left off
34660 132             | 
34660 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
34664 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
34668 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3466c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
34670 136 D8 CB FB F8 |                             getbyte request, addr1, #3
34674 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
34678 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3467c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
34680 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
34684 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
34688 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3468c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
34690 13e             |                    
34690 13e             | '..................................................................................................
34690 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
34690 13e             | 
34690 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
34694 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
34698 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3469c 141 D0 DF B7 F9 |                             setd    a, #id0
346a0 142 D8 DF BF F9 |                             sets    a, #addr1
346a4 143 FE FF FF FF 
346a8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
346ac 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
346b0 146 3F DE A7 F9 |                             alti    a, #%111_111 
346b4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
346b8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
346bc 149 01 E2 63 FD |                             cogid   c
346c0 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
346c4 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
346c8 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
346cc 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
346d0 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
346d4 14f 00 E0 03 F6 |                             mov     b, 0-0
346d8 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
346dc 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
346e0 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
346e4 153 0C 00 90 AD |             if_z            jmp     #excluded               
346e8 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
346ec 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
346f0 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
346f4 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
346f8 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
346fc 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
34700 15a             | 
34700 15a             | 'determine priority cogs and build instructions for the polling sequence
34700 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
34704 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
34708 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3470c 15d             | 
3470c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
34710 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
34714 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
34718 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3471c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
34720 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
34724 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
34728 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3472c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
34730 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
34734 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
34738 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3473c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
34740 16a             | endprioloop
34740 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
34744 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
34748 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3474c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
34750 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
34754 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
34758 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3475c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
34760 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
34764 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
34768 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3476c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
34770 176             | 
34770 176             | ' populate the round robin COG polling instructions
34770 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
34774 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
34778 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3477c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
34780 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
34784 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
34788 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3478c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
34790 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
34794 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
34798 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3479c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
347a0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
347a4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
347a8 184             | '..................................................................................................
347a8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
347a8 184             | 
347a8 184             | set_latency                                                 '            (a) set latency
347a8 184             | get_latency                                                 '            (b) get latency
347a8 184             | set_burst                                                   '            (c) set burst size of bank
347a8 184             | get_burst                                                   '            (d) get burst size of bank
347a8 184             |                                                             '            (e) dump state
347a8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
347ac 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
347b0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
347b4 187             |                                                             ' | | | | e  account for following AUGS
347b4 187 04 00 00 FF 
347b8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
347bc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
347c0 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
347c4 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
347c8 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
347cc 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
347d0 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
347d4 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
347d8 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
347dc 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
347e0 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
347e4 193             | 
347e4 193             | '..................................................................................................
347e4 193             | ' Misc EXECF code
347e4 193             | 
347e4 193 33 72 63 FD | start_read_exec             execf   newburstr
347e8 194 33 7C 63 FD | start_write_exec            execf   resumewrites
347ec 195 33 78 63 FD | continue_read_exec          execf   lockedreads
347f0 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
347f4 197             | 
347f4 197             | '..................................................................................................
347f4 197             | ' Variables
347f4 197             | 
347f4 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
347f8 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
347fc 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
34800 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
34804 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
34808 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3480c 19d             | 
3480c 19d 00 00 00 80 | xfreq1          long    $80000000
34810 19e 00 00 00 40 | xfreq2          long    $40000000
34814 19f 03 00 00 00 | delay           long    3
34818 1a0             | 
34818 1a0             | lutcodeaddr                 
34818 1a0             | startupparams
34818 1a0             | excludedcogs                                    'careful: shared register use!
34818 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3481c 1a1 00 00 00 00 | flags           long    0
34820 1a2             | mask                                            'careful: shared register use!
34820 1a2 00 00 00 00 | resetmaskA      long    0
34824 1a3             | limit                                           'careful: shared register use!
34824 1a3 00 00 00 00 | resetmaskB      long    0
34828 1a4 00 00 00 00 | datapins        long    0
3482c 1a5             | const512                                        'careful: shared register use!
3482c 1a5 00 00 00 00 | devicelist      long    0
34830 1a6 00 00 00 00 | coglist         long    0
34834 1a7 00 00 00 00 | mbox            long    0 
34838 1a8             | 
34838 1a8             | clkpin                                          'shared with code patched during init
34838 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3483c 1a9             | cspin                                           'shared with code patched during init
3483c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
34840 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
34844 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
34848 1ac 01 00 00 00 | clkdelay        long    1
3484c 1ad 00 00 00 00 | regdatabus      long    0
34850 1ae             | 
34850 1ae 10 00 00 00 | deviceaddr      long    $10
34854 1af             | rrcounter
34854 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
34858 1b0             | 
34858 1b0             | ' jump addresses for the per COG handlers
34858 1b0 20 00 00 00 | cog0_handler    long    cog0
3485c 1b1 2C 00 00 00 | cog1_handler    long    cog1
34860 1b2 38 00 00 00 | cog2_handler    long    cog2
34864 1b3 44 00 00 00 | cog3_handler    long    cog3
34868 1b4 50 00 00 00 | cog4_handler    long    cog4
3486c 1b5 5C 00 00 00 | cog5_handler    long    cog5
34870 1b6 68 00 00 00 | cog6_handler    long    cog6
34874 1b7 74 00 00 00 | cog7_handler    long    cog7
34878 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3487c 1b9             | 
3487c 1b9             | ' EXECF sequences
3487c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
34880 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
34884 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
34888 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3488c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
34890 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
34894 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
34898 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
34898 1c0             | 
34898 1c0             | 
34898 1c0             | ' SKIPF sequences
34898 1c0             | skiptable
34898 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3489c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
348a0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
348a4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
348a8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
348ac 1c5 00 00 00 00 | pattern2        long    0
348b0 1c6 00 00 00 00 | pattern3        long    0
348b4 1c7 77 02 00 00 | singlelong      long    %1001110111  
348b8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
348bc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
348c0 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
348c4 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
348c8 1cc             | 
348c8 1cc             | ' LUT RAM address values
348c8 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
348cc 1cd DD 02 00 00 | continue_read   long    continue_read_lut
348d0 1ce DB 02 00 00 | continue_write  long    continue_write_lut
348d4 1cf F6 02 00 00 | noread          long    noread_lut
348d8 1d0             | 
348d8 1d0 00 00 00 00 | id0             long    0
348dc 1d1 01 00 00 00 | id1             long    1
348e0 1d2 02 00 00 00 | id2             long    2
348e4 1d3 03 00 00 00 | id3             long    3
348e8 1d4 04 00 00 00 | id4             long    4
348ec 1d5 05 00 00 00 | id5             long    5
348f0 1d6 06 00 00 00 | id6             long    6
348f4 1d7 07 00 00 00 | id7             long    7
348f8 1d8             | 
348f8 1d8             | 'These next 10 request registers below are also temporarily reused during init 
348f8 1d8             | 'and COG updates and need to follow immediately after id0-id7
348f8 1d8 00 00 00 00 | addr1           long    0
348fc 1d9 00 00 00 00 | hubdata         long    0
34900 1da 00 00 00 00 | count           long    0
34904 1db 00 00 00 00 | addr2           long    0
34908 1dc 00 00 00 00 | total           long    0
3490c 1dd 00 00 00 00 | offset1         long    0
34910 1de 00 00 00 00 | offset2         long    0
34914 1df 00 00 00 00 | link            long    0
34918 1e0             | 
34918 1e0             | burstwrite                                      'note shared register use during init
34918 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3491c 1e1 00 00 00 00 | id              long    0
34920 1e2             | 
34920 1e2 00 00 00 00 | header          long    0
34924 1e3 00 00 00 00 | trailer         long    0
34928 1e4 00 00 00 00 | cmdaddr         long    0
3492c 1e5 00 00 00 00 | request         long    0
34930 1e6 00 00 00 00 | rrlimit         long    0
34934 1e7 00 00 00 00 | pinconfig       long    0
34938 1e8 00 00 00 00 | clks            long    0
3493c 1e9 00 00 00 00 | resume          long    0
34940 1ea 00 00 00 00 | orighubsize     long    0
34944 1eb 00 00 00 00 | wrclks          long    0
34948 1ec             | 
34948 1ec 00 00 00 00 | pattern         long    0
3494c 1ed 00 00 00 00 | hubscratch      long    0
34950 1ee 00 10 00 00 | val4k           long    4096
34954 1ef             | 
34954 1ef             | ' temporary general purpose regs
34954 1ef 00 00 00 00 | a               long    0
34958 1f0 00 00 00 00 | b               long    0
3495c 1f1 00 00 00 00 | c               long    0
34960 1f2 00 00 00 00 | d               long    0
34964 1f3             |                 fit     502
34964 1f3             | 
34964 1f3             |                 fit     502
34964 1f3             | 
34964 1f3             | '..................................................................................................
34964 1f3             | 
34964 1f3             |             orgh
34964                 | 
34964                 | lut_code
34964                 | 'HW init code up to 80 longs
34964                 | 
34964                 | '..................................................................................................
34964                 | ' Memory layout for LUT RAM once operational:
34964                 | '
34964                 | '  LUT RAM address      Usage
34964                 | '  ---------------      ----
34964                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
34964                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
34964                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
34964                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
34964                 | '
34964                 | ' Also during driver COG startup:
34964                 | ' $230-$24F is used for HW init setup
34964                 | ' $250-$26F is used as temporary vector storage 
34964                 | '..................................................................................................
34964                 | 
34964                 |                 org $230    
34964 230             | 
34964 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
34964 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
34968 231 24 16 60 FD |                             pollxfi
3496c 232 FF AA 2A FF 
34970 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
34974 234 28 00 B0 FD |                             call    #sendqspi
34978 235 07 F8 07 FF 
3497c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
34980 237 28 00 B0 FD |                             call    #sendspi
34984 238 F8 07 78 FF 
34988 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3498c 23a 1C 00 B0 FD |                             call    #sendspi
34990 23b 7F 78 78 FF 
34994 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
34998 23d 10 00 B0 FD |                             call    #sendspi 
3499c 23e 2D 00 64 FD |                             ret
349a0 23f             | 
349a0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
349a4 240 32 0C 64 FD |                             skipf   #%110
349a8 241 9C EF 03 F6 |                             mov     pb, xsendimm
349ac 242             | 
349ac 242 10 D0 07 F6 | sendspi                     mov     clks, #16
349b0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
349b4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
349b8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
349bc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
349c0 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
349c4 248 24 36 60 FD |                             waitxfi                         'wait for the completion
349c8 249 50 48 63 FD |                             fltl    datapins                'float data bus
349cc 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
349d0 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
349d4 24c             | 
349d4 24c 00 00 00 00 
349d8 24d 00 00 00 00 
349dc 24e 00 00 00 00 
349e0 24f 00 00 00 00 |                 long    0[$270-32-$]
349e4 250             |                 fit     $270-32  ' keep room for 32 vector longs
349e4 250             |     
349e4 250             |                 fit     $270-32  ' keep room for 32 vector longs
349e4 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
349e4 250             | rw_vect ' PSRAM jump vectors
349e4 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
349e8 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
349ec 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
349f0 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
349f4 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
349f8 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
349fc 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
34a00 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
34a04 258             | ro_vect ' R/O PSRAM jump vectors
34a04 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34a08 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34a0c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
34a10 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
34a14 25c 00 01 00 00 |                 long    unsupported
34a18 25d 00 01 00 00 |                 long    unsupported
34a1c 25e 00 01 00 00 |                 long    unsupported
34a20 25f 00 01 00 00 |                 long    unsupported
34a24 260             | ctrl_vect ' Control jump vectors
34a24 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
34a28 261 00 01 00 00 |                 long    unsupported
34a2c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
34a30 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
34a34 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
34a38 265 00 01 00 00 |                 long    unsupported
34a3c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
34a40 267 3E 01 00 00 |                 long    reconfig 
34a44 268             | no_vect ' Invalid bank jump vectors
34a44 268 01 01 00 00 |                 long    invalidbank
34a48 269 01 01 00 00 |                 long    invalidbank
34a4c 26a 01 01 00 00 |                 long    invalidbank
34a50 26b 01 01 00 00 |                 long    invalidbank
34a54 26c 01 01 00 00 |                 long    invalidbank
34a58 26d 01 01 00 00 |                 long    invalidbank
34a5c 26e 01 01 00 00 |                 long    invalidbank
34a60 26f 01 01 00 00 |                 long    invalidbank
34a64 270             |                 fit     $270
34a64 270             | 
34a64 270             |                 fit     $270
34a64 270             | '..................................................................................................
34a64 270             | ' PSRAM READS
34a64 270             |                                                             ' a b c d e f
34a64 270             |                                                             ' B W L B R L  (a) byte read
34a64 270             |                                                             ' Y O O U E O  (b) word read
34a64 270             |                                                             ' T R N R S C  (c) long read
34a64 270             |                                                             ' E D G S U K  (d) new burst read
34a64 270             |                                                             '       T M E  (e) resumed sub-burst
34a64 270             |                                                             '         E D  (f) locked sub-burst
34a64 270             | 
34a64 270             | 
34a64 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
34a68 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
34a6c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
34a70 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
34a74 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
34a78 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
34a7c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
34a80 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
34a84 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
34a88 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
34a8c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
34a90 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
34a94 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
34a98 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
34a9c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
34aa0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
34aa4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
34aa8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
34aac 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
34ab0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
34ab4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
34ab8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
34abc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
34ac0 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
34ac4 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
34ac8 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
34acc 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
34ad0 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
34ad4 28c             | 
34ad4 28c             |                             ' fall through to read bursts
34ad4 28c             |                         
34ad4 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
34ad4 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
34ad8 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
34adc 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
34ae0 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
34ae4 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
34ae8 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
34aec 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
34af0 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
34af4 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
34af8 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
34afc 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
34b00 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
34b04 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
34b08 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
34b0c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
34b10 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
34b14 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
34b18 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
34b1c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
34b20 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
34b24 2a0 E8 D1 03 F1 |                             add     clks, clks
34b28 2a1             | readcommon
34b28 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
34b2c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
34b30 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
34b34 2a4             | 
34b34 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
34b38 2a5 69 C8 63 FD |                             rev     cmdaddr
34b3c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
34b40 2a7 61 C8 63 FD |                             mergeb  cmdaddr
34b44 2a8             | 
34b44 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
34b48 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
34b4c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
34b4c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
34b50 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
34b54 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
34b58 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
34b5c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
34b5c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
34b60 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
34b64 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
34b68 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
34b6c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
34b70 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
34b74 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
34b74 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
34b78 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
34b7c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
34b80 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
34b84 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
34b88 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
34b8c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
34b90 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
34b94 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
34b98 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
34b9c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
34ba0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
34ba4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
34ba8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
34bac 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
34bac 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
34bb0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
34bb4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
34bb8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
34bbc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
34bc0 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
34bc4 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
34bc8 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
34bcc 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
34bd0 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
34bd4 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
34bd8 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
34bdc 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
34be0 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
34be4 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
34be8 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
34bec 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
34bf0 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
34bf4 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
34bf8 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
34bfc 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
34c00 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
34c04 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
34c08 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
34c0c 2da 10 03 90 FD |                             jmp     #writecommon
34c10 2db             | 
34c10 2db             | '..................................................................................................
34c10 2db             | ' Burst continuation testing
34c10 2db             | 
34c10 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
34c14 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
34c18 2dd             | continue_read_lut          
34c18 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
34c1c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
34c20 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
34c24 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
34c28 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
34c2c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
34c30 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
34c34 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
34c38 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
34c3c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
34c40 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
34c44 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
34c48 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
34c4c 2ea             | 
34c4c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
34c50 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
34c54 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
34c58 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
34c5c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
34c60 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
34c64 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
34c68 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
34c6c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
34c70 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
34c74 2f4 2A 1C 66 0D |             _ret_           push    #poller
34c78 2f5             | 
34c78 2f5             | 
34c78 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
34c7c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
34c7c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
34c80 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
34c84 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
34c88 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
34c8c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
34c90 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
34c94 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
34c98 2fd 2D 00 64 FD |                             ret                             ' | continue processing
34c9c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
34ca0 2ff             | '..................................................................................................
34ca0 2ff             | ' Completion of requests
34ca0 2ff             | 
34ca0 2ff             | complete_rw_lut             
34ca0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
34ca4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
34ca8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
34cac 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
34cb0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
34cb4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
34cb8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
34cbc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
34cc0 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
34cc4 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
34cc8 309 32 62 64 AD |             if_z            skipf   #%110001
34ccc 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
34cd0 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
34cd4 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
34cd8 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
34cdc 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
34ce0 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
34ce4 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
34ce8 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
34cec 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
34cf0 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
34cf4 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
34cf8 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
34cfc 316             |                                                             ' skipcase (a) gfx copy to/from hub
34cfc 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
34cfc 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
34cfc 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
34d00 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
34d04 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
34d08 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
34d0c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
34d10 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
34d14 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
34d18 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
34d1c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
34d20 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
34d24 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
34d28 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
34d2c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
34d30 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
34d34 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
34d38 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
34d3c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
34d40 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
34d44 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
34d48 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
34d4c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
34d50 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
34d54 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
34d58 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
34d5c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
34d60 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
34d64 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
34d68 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
34d6c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
34d70 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
34d74 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
34d78 335 DF B7 03 A6 |             if_z            mov     addr2, link
34d7c 336 34 FF 9F AD |             if_z            jmp     #checknext
34d80 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
34d84 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
34d88 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
34d8c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
34d90 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
34d94 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
34d98 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
34d9c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
34da0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
34da4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
34da8 341             | 
34da8 341             | '..................................................................................................
34da8 341             | ' PSRAM WRITES
34da8 341             |                                                             '  a b c d e f g h
34da8 341             | 
34da8 341             |                                                             '  B W L F B R L L (a) byte write(s)
34da8 341             |                                                             '  Y O O I U E O O (b) word write(s)
34da8 341             |                                                             '  T R N L R S C C (c) long write(s)
34da8 341             |                                                             '  E D G L S U K K (d) resumed fill
34da8 341             |                                                             '          T M E E (e) new burst write
34da8 341             |                                                             '            E D D (f) resumed burst
34da8 341             |                                                             '              F B (g) locked fill
34da8 341             |                                                             '              I U (h) locked burst write
34da8 341             |                                                             '              L R 
34da8 341             |                                                             '              L S 
34da8 341             |                                                             '                T 
34da8 341             | 
34da8 341             | w_single                   
34da8 341             | w_fill_cont           
34da8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
34dac 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
34db0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
34db4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
34db8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
34dbc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
34dc0 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
34dc4 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
34dc8 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
34dcc 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
34dd0 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
34dd4 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
34dd8 34d             |                ' disable call to r_resume_burst for single longs when z=0
34dd8 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
34ddc 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
34de0 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
34de4 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
34de8 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
34dec 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
34df0 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
34df4 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
34df8 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
34dfc 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
34e00 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
34e04 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
34e08 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
34e0c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
34e10 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
34e14 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
34e18 35d             |         
34e18 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
34e18 35d             |             '
34e18 35d             |             '  At least one of these 3 optional components will be sent
34e18 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
34e18 35d             |             '     body - N x full longs of data
34e18 35d             |             '     trailer - last partial long of data
34e18 35d             |             '
34e18 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
34e18 35d             |             '
34e18 35d             |             'Case    Type                           Sends
34e18 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
34e18 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
34e18 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
34e18 35d             |             ' 4)     Multiple long fill             body only
34e18 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
34e18 35d             | 
34e18 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
34e18 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
34e1c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
34e20 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
34e24 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
34e28 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
34e2c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
34e30 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
34e34 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
34e38 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
34e3c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
34e40 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
34e44 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
34e48 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
34e4c 36a             |                             
34e4c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
34e50 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
34e54 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
34e58 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
34e5c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
34e60 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
34e64 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
34e68 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
34e6c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
34e70 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
34e74 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
34e78 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
34e7c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
34e80 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
34e84 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
34e88 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
34e8c 37a             | 
34e8c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
34e90 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
34e94 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
34e98 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
34e9c 37e             |                  
34e9c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
34ea0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
34ea4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
34ea8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
34eac 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
34eb0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
34eb4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
34eb8 385             | 
34eb8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
34ebc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
34ec0 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
34ec4 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
34ec8 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
34ecc 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
34ed0 38b             | 
34ed0 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
34ed0 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
34ed4 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
34ed8 38d 2A B0 63 FD |                             push    addr1                   'save address
34edc 38e             | 
34edc 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
34edc 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
34ee0 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
34ee4 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
34ee8 391             |             
34ee8 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
34eec 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
34ef0 393 2B B0 63 FD |                             pop     addr1                   'restore address
34ef4 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
34ef8 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
34efc 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
34f00 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
34f04 398             | 
34f04 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
34f08 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
34f0c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
34f10 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
34f14 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
34f18 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
34f1c 39e             | 
34f1c 39e             |                             'trailer is done
34f1c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
34f20 39f             | 
34f20 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
34f24 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
34f28 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
34f2c 3a2             | 
34f2c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
34f30 3a3 69 C8 63 FD |                             rev     cmdaddr                 
34f34 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
34f38 3a5 61 C8 63 FD |                             mergeb  cmdaddr
34f3c 3a6             |                             
34f3c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
34f40 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
34f44 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
34f48 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
34f4c 3aa             |                                                          
34f4c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
34f50 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
34f54 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
34f58 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
34f5c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
34f60 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
34f64 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
34f68 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
34f6c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
34f70 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
34f74 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
34f78 3b5             |  
34f78 3b5 59 52 63 FD |                             drvh    cspin
34f7c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
34f80 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
34f84 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
34f88 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
34f8c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
34f90 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
34f94 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
34f98 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
34f9c 3be EA E5 03 F6 |                             mov     d, orighubsize
34fa0 3bf EF E5 63 F0 |                             shl     d, a
34fa4 3c0 F2 E3 83 F1 |                             sub     c, d
34fa8 3c1 DD E3 03 F1 |                             add     c, offset1
34fac 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
34fb0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
34fb4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
34fb8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
34fbc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
34fc0 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
34fc4 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
34fc8 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
34fcc 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
34fd0 3cb BB D3 03 F6 |                             mov     resume, restorefill
34fd4 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
34fd8 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
34fdc 3ce 6C FC BF CD |             if_c            call    #yield
34fe0 3cf 2D 00 64 FD |                             ret
34fe4 3d0             |                            
34fe4 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
34fe4 3d0             |                       '     rczl    pa                      'rotate left into address offset
34fe4 3d0             |                       '     rczl    c wcz                   'restore count and flags
34fe4 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
34fe8 3d1 02 EC 67 F0 |                             shl     pa, #2
34fec 3d2 28 06 64 AD |             if_z            setq    #3
34ff0 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
34ff4 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
34ff8 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
34ffc 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
35000 3d7             | 
35000 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
35004 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
35008 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3500c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
35010 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
35014 3dc             |                 fit 1024-32
35014 3dc             |         
35014 3dc             | 
35014 3dc             | '..................................................................................................
35014 3dc             | 
35014 3dc             |                 fit 1024-32
35014 3dc 00 00 00 00 
35018 3dd 00 00 00 00 
3501c 3de 00 00 00 00 
35020 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
35024 3e0             |                 org 1024-32
35024 000             | 
35024 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
35024 000 00 00 00 00 |                 long $0000
35028 001 11 11 00 00 |                 long $1111
3502c 002 22 22 00 00 |                 long $2222
35030 003 33 33 00 00 |                 long $3333
35034 004 44 44 00 00 |                 long $4444
35038 005 55 55 00 00 |                 long $5555
3503c 006 66 66 00 00 |                 long $6666
35040 007 77 77 00 00 |                 long $7777
35044 008 88 88 00 00 |                 long $8888
35048 009 99 99 00 00 |                 long $9999
3504c 00a AA AA 00 00 |                 long $aaaa
35050 00b BB BB 00 00 |                 long $bbbb
35054 00c CC CC 00 00 |                 long $cccc
35058 00d DD DD 00 00 |                 long $dddd
3505c 00e EE EE 00 00 |                 long $eeee
35060 00f FF FF 00 00 |                 long $ffff
35064 010             | 
35064 010             | 'masks
35064 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
35068 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3506c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
35070 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
35074 014             | 
35074 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
35078 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3507c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
35080 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
35084 018             | 
35084 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
35088 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3508c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
35090 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
35094 01c             | 
35094 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
35098 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3509c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
350a0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
350a4 020             |         fit 1024
350a4 020             | 
350a4 020             |         fit 1024
350a4 020             | 
350a4 020             | '--------------------------------------------------------------------------------------------------
350a4 020             |         orgh
350a4                 | 
350a4                 | gfxexpansion
350a4                 |                             'simple line drawing graphics expansion of memory driver
350a4                 |                             'jmp     #donerepeats                'just return for now
350a4                 | 
350a4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
350a8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
350ac     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
350b0     DD E1 03 F6 |                             mov     b, offset1              'get error term
350b4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
350b8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
350bc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
350c0     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
350c4     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
350c8     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
350cc     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
350d0     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
350d4     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
350d8     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
350dc     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
350e0     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
350e4     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
350e8     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
350ec     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
350f0     DC E5 33 F9 |                             getword d, total, #0            'get line width
350f4     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
350f8     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
350fc     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
35100     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
35104     C3 03 80 FD |                             jmp     #readmask               'continue filling
35108                 | 	alignl
35108                 | _usbnew_spin2_dat_
35108                 |                 org     $000
35108 000             | 
35108 000             | usb_host_start
35108 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3510c 001             | 
3510c 001 03 00 00 FF 
35110 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
35114 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
35118 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3511c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
35120 006 29 70 63 FD |                 setq2   htmp
35124 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
35128 008             | 
35128 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3512c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
35130 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
35134 00b             | 
35134 00b             | '------------------------------------------------------------------------------
35134 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
35134 00b             | ' special because the receiving function must not respond with either STALL or
35134 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
35134 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
35134 00b             | ' corrupt packet, it must ignore the transaction
35134 00b             | '------------------------------------------------------------------------------
35134 00b             | ' On entry:
35134 00b             | '   PTRA - start address of the SETUP data struct.
35134 00b             | ' On exit:
35134 00b             | '   retval - PID_ACK on success, otherwise error code.
35134 00b             | '------------------------------------------------------------------------------
35134 00b             | txn_setup
35134 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
35138 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3513c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
35140 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
35144 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
35148 010             | .setup
35148 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3514c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35150 012 2D 00 64 AD |         if_z    ret
35154 013 7C 0B B0 FD |                 call    #retry_wait
35158 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3515c 015 2D 00 64 AD |         if_z    ret
35160 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
35164 017 E0 FF 9F FD |                 jmp     #.setup
35168 018             | 
35168 018             | '------------------------------------------------------------------------------
35168 018             | ' IN/INTERRUPT transaction.
35168 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
35168 018             | '------------------------------------------------------------------------------
35168 018             | ' On entry:
35168 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
35168 018             | '     CRC(b19..23).
35168 018             | ' On exit:
35168 018             | '------------------------------------------------------------------------------
35168 018             | txn_in
35168 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3516c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
35170 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
35174 01b             | 
35174 01b             |                 ' Fall through to urx_packet
35174 01b             | 
35174 01b             | '------------------------------------------------------------------------------
35174 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
35174 01b             | ' received are handshakes and IN DATAx.
35174 01b             | '------------------------------------------------------------------------------
35174 01b             | ' On entry:
35174 01b             | ' On exit:
35174 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
35174 01b             | '     returned.
35174 01b             | '------------------------------------------------------------------------------
35174 01b             | urx_packet
35174 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
35178 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3517c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
35180 01e 1A 92 63 FD |                 getct   hct2
35184 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
35188 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3518c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
35190 022             | .wait_sop
35190 022 22 A7 8A FA |                 rdpin   urx, dm
35194 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35198 024 08 00 90 CD |         if_c    jmp     #.get_pid
3519c 025 FC 25 CC FB |                 jnct2   #.wait_sop
351a0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
351a4 027             | .get_pid
351a4 027 28 02 B0 FD |                 call    #urx_next
351a8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
351ac 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
351b0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
351b4 02b             | .chk_pid
351b4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
351b8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
351bc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
351c0 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
351c4 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
351c8 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
351cc 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
351d0 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
351d4 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
351d8 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
351dc 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
351e0 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
351e4 037             | .ack_resend
351e4 037 22 A7 82 FA |                 rqpin   urx, dm
351e8 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
351ec 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
351f0 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
351f4 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
351f8 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
351fc 03d             | .chk_eop
351fc 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35200 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
35204 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
35208 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3520c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
35210 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
35214 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
35218 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3521c 045 2D 00 64 FD |                 ret
35220 046             | .idle
35220 046 22 A7 82 FA |                 rqpin   urx, dm
35224 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35228 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3522c 049 2D 00 64 FD |                 ret
35230 04a             | 
35230 04a             | '------------------------------------------------------------------------------
35230 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
35230 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
35230 04a             | ' if one is required.
35230 04a             | '------------------------------------------------------------------------------
35230 04a             | ' On entry:
35230 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
35230 04a             | ' On exit:
35230 04a             | '------------------------------------------------------------------------------
35230 04a             | utx_token
35230 04a 22 A7 82 FA |                 rqpin   urx, dm
35234 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35238 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3523c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35240 04e 34 0D B0 CD |         if_c    call    #utx_pre
35244 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35248 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3524c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
35250 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
35254 053             | .next_byte
35254 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
35258 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3525c 055             | .wait
3525c 055 40 46 72 FD |                 testp   dp                      wc
35260 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
35264 057 23 03 08 FC |                 akpin   dp
35268 058 22 A5 22 FC |                 wypin   utx, dm
3526c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
35270 05a             | 
35270 05a             | '------------------------------------------------------------------------------
35270 05a             | ' SETUP/OUT/INTERRUPT transaction.
35270 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
35270 05a             | '------------------------------------------------------------------------------
35270 05a             | ' On entry:
35270 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
35270 05a             | '     CRC(b19..23).
35270 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
35270 05a             | '   pkt_data - count of DATAx payload bytes to send.
35270 05a             | ' On exit:
35270 05a             | '------------------------------------------------------------------------------
35270 05a             | txn_out
35270 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35274 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
35278 05c 00 00 C0 FF 
3527c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
35280 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
35284 05f             | 
35284 05f             |                 ' Fall through to utx_data
35284 05f             | 
35284 05f             | '------------------------------------------------------------------------------
35284 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
35284 05f             | ' calculated while the data byte is being shifted out. Since data stage
35284 05f             | ' success/fail is not determined until the status stage of the transaction,
35284 05f             | ' this routine is only concerned about the current DATAx packet.
35284 05f             | '------------------------------------------------------------------------------
35284 05f             | ' On entry:
35284 05f             | '   PTRA - hub start address of the data to read.
35284 05f             | '   pkt_cnt - data payload size.
35284 05f             | ' On exit:
35284 05f             | '------------------------------------------------------------------------------
35284 05f             | utx_data
35284 05f 22 A7 82 FA |                 rqpin   urx, dm
35288 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3528c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
35290 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
35294 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
35298 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3529c 065 D8 0C B0 CD |         if_c    call    #utx_pre
352a0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
352a4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
352a8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
352ac 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
352b0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
352b4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
352b8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
352bc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
352c0 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
352c4 06f             | .read_byte
352c4 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
352c8 070 F0 00 B0 FD |                 call    #utx_byte
352cc 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
352d0 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
352d4 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
352d8 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
352dc 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
352e0 076             | .send_crc
352e0 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
352e4 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
352e8 078 D0 00 B0 FD |                 call    #utx_byte
352ec 079 5D A5 EA F8 |                 getbyte utx, crc, #1
352f0 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
352f4 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
352f8 07c             | 
352f8 07c             | '------------------------------------------------------------------------------
352f8 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
352f8 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
352f8 07c             | ' expects that the packet includes at least the CRC word.
352f8 07c             | '
352f8 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
352f8 07c             | ' was requested, which makes it difficult to determine where the data stops
352f8 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
352f8 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
352f8 07c             | ' USB-16 expected residual value of 0xB001.
352f8 07c             | '
352f8 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
352f8 07c             | ' so the caller can verify IN success before writing the data to its final
352f8 07c             | ' destination.
352f8 07c             | '------------------------------------------------------------------------------
352f8 07c             | ' On entry:
352f8 07c             | '   pkt_data - max byte count expected to be in the packet.
352f8 07c             | '   newb_flg - signals new byte ready when toggled.
352f8 07c             | ' On exit:
352f8 07c             | '   pkt_cnt - actual number of bytes read.
352f8 07c             | '------------------------------------------------------------------------------
352f8 07c             | urx_data
352f8 07c F7 75 03 F6 |                 mov     htmp2, pb
352fc 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
35300 07e 00 00 C0 FF 
35304 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
35308 080 BA EF 03 F6 |                 mov     pb, htmp2
3530c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
35310 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
35314 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
35318 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3531c 085             | .wait_byte
3531c 085             | ' In-line rx for max speed
3531c 085 22 A7 82 FA |                 rqpin   urx, dm
35320 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35324 087 53 A5 02 F5 |                 and     utx, urx
35328 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3532c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
35330 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
35334 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
35338 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3533c 08d DC FF 9F FD |                 jmp     #.wait_byte
35340 08e             | .get_byte
35340 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
35344 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
35348 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3534c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
35350 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35354 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
35358 094             | .end_crc
35358 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3535c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
35360 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
35364 097 2D 00 64 1D |         if_a    ret
35368 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
35368 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
35368 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
35368 098             | ' to miss it, so cheat a bit and look for SOP clear here.
35368 098 22 A7 82 FA |                 rqpin   urx, dm
3536c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
35370 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
35374 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
35374 09b             | .chk_crc
35374 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
35378 09c 58 00 00 FF 
3537c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
35380 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
35384 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
35388 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3538c 0a1 34 09 B0 FD |                 call    #poll_waitx
35390 0a2             | 
35390 0a2             |                 ' Fall through to utx_handshake
35390 0a2             | 
35390 0a2             | '------------------------------------------------------------------------------
35390 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
35390 0a2             | ' the appropriate IP delay has been inserted.
35390 0a2             | '------------------------------------------------------------------------------
35390 0a2             | ' On entry:
35390 0a2             | '   retval - handshake PID to send.
35390 0a2             | ' On exit:
35390 0a2             | '   retval unchanged.
35390 0a2             | '------------------------------------------------------------------------------
35390 0a2             | utx_handshake
35390 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35394 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
35398 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3539c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
353a0 0a6 5F A5 02 F6 |                 mov     utx, retval
353a4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
353a8 0a8             | .idle
353a8 0a8 22 A7 82 FA |                 rqpin   urx, dm
353ac 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
353b0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
353b4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
353b8 0ac 08 09 90 FD |                 jmp     #poll_waitx
353bc 0ad             | 
353bc 0ad             | '------------------------------------------------------------------------------
353bc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
353bc 0ad             | '------------------------------------------------------------------------------
353bc 0ad             | ' On entry:
353bc 0ad             | '   utx - byte to transmit.
353bc 0ad             | ' On exit:
353bc 0ad             | '------------------------------------------------------------------------------
353bc 0ad             | utx_byte
353bc 0ad 40 46 72 FD |                 testp   dp                      wc
353c0 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
353c4 0af 23 03 08 FC |                 akpin   dp
353c8 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
353cc 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
353d0 0b2             | 
353d0 0b2             | '------------------------------------------------------------------------------
353d0 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
353d0 0b2             | '------------------------------------------------------------------------------
353d0 0b2             | ' On entry:
353d0 0b2             | ' On exit:
353d0 0b2             | '   retval - the byte read.
353d0 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
353d0 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
353d0 0b2             | '     received.
353d0 0b2             | '------------------------------------------------------------------------------
353d0 0b2             | urx_next
353d0 0b2 22 A7 8A FA |                 rdpin   urx, dm
353d4 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
353d8 0b4 53 A5 02 F5 |                 and     utx, urx
353dc 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
353e0 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
353e4 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
353e8 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
353ec 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
353f0 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
353f4 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
353f8 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
353fc 0bd 2D 00 64 FD |                 ret
35400 0be             | 
35400 0be             | '------------------------------------------------------------------------------
35400 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
35400 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
35400 0be             | ' length, and the PID is not included in the CRC calculation:
35400 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
35400 0be             | '  CRC5  ENDP ADDRESS PID
35400 0be             | ' %00000_1111_1111111_xxxxxxxx
35400 0be             | '------------------------------------------------------------------------------
35400 0be             | ' On entry:
35400 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
35400 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
35400 0be             | ' On exit:
35400 0be             | '   ep_addr_pid - CRC value appended to the packet.
35400 0be             | '------------------------------------------------------------------------------
35400 0be             | calc_crc5
35400 0be FF 03 00 FF 
35404 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
35408 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3540c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
35410 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
35414 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
35418 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3541c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
35420 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
35424 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
35428 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3542c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
35430 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35434 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
35438 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3543c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
35440 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
35444 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
35448 0d0             | 
35448 0d0             | '------------------------------------------------------------------------------
35448 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
35448 0d0             | '------------------------------------------------------------------------------
35448 0d0             | isr1_fsframe
35448 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3544c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35450 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35454 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35458 0d4             | .wait
35458 0d4 40 46 72 FD |                 testp   dp                      wc
3545c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
35460 0d6 23 03 08 FC |                 akpin   dp
35464 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
35468 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3546c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
35470 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
35474 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
35478 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3547c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
35480 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
35484 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
35488 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3548c 0e1 2C FF BF FD |                 call    #utx_byte
35490 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
35494 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
35498 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3549c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
354a0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
354a4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
354a8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
354ac 0e9 5B A5 42 F5 |                 or      utx, icrc
354b0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
354b4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
354b8 0ec 20 00 90 FD |                 jmp     #isr1_wait
354bc 0ed             | isr1_lsframe
354bc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
354c0 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
354c4 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
354c8 0f0             | .wait
354c8 0f0 40 46 72 FD |                 testp   dp                      wc
354cc 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
354d0 0f2 23 03 08 FC |                 akpin   dp
354d4 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
354d8 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
354dc 0f5             | isr1_wait
354dc 0f5 22 A5 82 FA |                 rqpin   utx, dm
354e0 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
354e4 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
354e8 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
354ec 0f9 03 00 00 FF 
354f0 0fa FF B3 06 F5 |                 and     frame, ##$7ff
354f4 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
354f8 0fc F5 FF 3B FB |                 reti1
354fc 0fd             | 
354fc 0fd             | '------------------------------------------------------------------------------
354fc 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
354fc 0fd             | ' transaction will complete before the next frame is triggered.
354fc 0fd             | '------------------------------------------------------------------------------
354fc 0fd             | ' On entry:
354fc 0fd             | ' On exit:
354fc 0fd             | '------------------------------------------------------------------------------
354fc 0fd             | wait_txn_ok
354fc 0fd 1A 74 63 FD |                 getct   htmp2
35500 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
35504 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35508 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3550c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
35510 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
35514 103 2D 00 64 FD |                 ret
35518 104             | 
35518 104             | '------------------------------------------------------------------------------
35518 104             | ' A device connection was detected, or a bus reset was requested by the USB
35518 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
35518 104             | ' and perform a reset sequence prior to device enumeration.
35518 104             | '------------------------------------------------------------------------------
35518 104             | dev_reset
35518 104 22 A7 82 FA |                 rqpin   urx, dm
3551c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
35520 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
35524 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
35528 108             | reset
35528 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3552c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
35530 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
35534 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35538 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3553c 10d 1A 92 62 FD |                 getct   iframe_ct_base
35540 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35544 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35548 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3554c 111 24 70 07 F1 |                 add     htmp, #36
35550 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
35554 113             | .framewait
35554 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
35558 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3555c 115 2D 00 64 FD |                 ret
35560 116             | 
35560 116             | '------------------------------------------------------------------------------
35560 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
35560 116             | '------------------------------------------------------------------------------
35560 116             | ' On entry:
35560 116             | '   PTRA - source address.
35560 116             | '   PB - destination address.
35560 116             | '   hr0 - length of copy, in bytes.
35560 116             | ' On exit:
35560 116             | '------------------------------------------------------------------------------
35560 116             | hmemcpy
35560 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
35564 117 F7 71 43 FC |                 wrbyte  htmp, pb
35568 118 01 EE 07 F1 |                 add     pb, #1
3556c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
35570 11a             | 
35570 11a             | '------------------------------------------------------------------------------
35570 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
35570 11a             | ' loop until the errant device is disconnected.
35570 11a             | '------------------------------------------------------------------------------
35570 11a             | ' On entry:
35570 11a             | ' On exit:
35570 11a             | '------------------------------------------------------------------------------
35570 11a             | host_error
35570 11a             |           if ERROR_LED >= 0
35570 11a             |           end
35570 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
35574 11b             | 
35574 11b             | '------------------------------------------------------------------------------
35574 11b             | ' Get HID descriptor buffer for current port
35574 11b             | '------------------------------------------------------------------------------
35574 11b             | ' On entry:
35574 11b             | ' On exit:
35574 11b             | '   PB - HID descriptor buffer pointer
35574 11b             | '------------------------------------------------------------------------------
35574 11b             | get_hid_descr_buffer
35574 11b 2D EF 03 F6 |                 mov     pb, hdev_port
35578 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3557c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
35580 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
35584 11f             | 
35584 11f             | 
35584 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
35588 120             | 
35588 120             | ' USB commands and error codes
35588 120 00 00 00 00 | cmd_data        long    0
3558c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
35590 122             | 
35590 122             | ' Parameters block assigned at cog startup
35590 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
35594 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
35598 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3559c 125             | if ACTIVITY_LED >= 0
3559c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3559c 125             | end
3559c 125             | if ERROR_LED >= 0
3559c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3559c 125             | end
3559c 125 00 00 00 00 | hid_descr_p     long    0
355a0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
355a0 126             | 'hkbd_report_p   long    0
355a0 126 00 00 00 00 | hub_descr_p     long    0
355a4 127 00 00 00 00 | urx_buff_p      long    0
355a8 128 00 00 00 00 | dev_desc_buff_p long    0
355ac 129 00 00 00 00 | con_desc_buff_p long    0
355b0 12a 00 00 00 00 | cache_start_p   long    0
355b4 12b 00 00 00 00 | cache_end_p     long    0
355b8 12c             | if EMUPAD_MAX_PLAYER > 0
355b8 12c             | emupad_out_ptr  long    0
355b8 12c             | end
355b8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
355bc 12d             | 
355bc 12d             | hdev_init_start
355bc 12d             | hdev_port       res     1
355bc 12d             | hdev_port       res     1
355bc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
355bc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
355bc 12d             | kbm_next_datax  res     1
355bc 12d             | kbm_next_datax  res     1
355bc 12d             | hub_intf_num    res     1
355bc 12d             | hub_intf_num    res     1
355bc 12d             | hub_next_datax  res     1
355bc 12d             | hub_next_datax  res     1
355bc 12d             | hub_status_chg  res     1
355bc 12d             | hub_status_chg  res     1
355bc 12d             | hub_port_status res     1
355bc 12d             | hub_port_status res     1
355bc 12d             | if HAVE_MOUSE
355bc 12d             | ms_intf_num     res     1
355bc 12d             | ms_intf_num     res     1
355bc 12d             | ms_in_max_pkt   res     1
355bc 12d             | ms_in_max_pkt   res     1
355bc 12d             | end
355bc 12d             | kb_intf_num     res     1
355bc 12d             | kb_intf_num     res     1
355bc 12d             | kb_interval     res     1
355bc 12d             | kb_interval     res     1
355bc 12d             | kb_in_max_pkt   res     1
355bc 12d             | kb_in_max_pkt   res     1
355bc 12d             | kb_max_index    res     1
355bc 12d             | kb_max_index    res     1
355bc 12d             | kb_led_states   res     1
355bc 12d             | kb_led_states   res     1
355bc 12d             | gp_intf_num     res     1
355bc 12d             | gp_intf_num     res     1
355bc 12d             | gp_interval     res     1
355bc 12d             | gp_interval     res     1
355bc 12d             | gp_max_index    res     1
355bc 12d             | gp_max_index    res     1
355bc 12d             | gp_descr_len    res     1+MAX_DEVICES
355bc 12d             | gp_descr_len    res     1+MAX_DEVICES
355bc 12d             | hdev_init_end
355bc 12d             | 
355bc 12d             | ' Initialized at cog startup:
355bc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
355bc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
355bc 12d             | iframe_ct_new   res     1
355bc 12d             | iframe_ct_new   res     1
355bc 12d             | iframe_ct_base  res     1
355bc 12d             | iframe_ct_base  res     1
355bc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
355bc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
355bc 12d             | 
355bc 12d             | ' This register block is reset to zero when a USB device connects
355bc 12d             | hreg_init_start
355bc 12d             | hstatus         res     1         ' Host status flags
355bc 12d             | hstatus         res     1         ' Host status flags
355bc 12d             | hctwait         res     1         ' Poll-based wait clocks
355bc 12d             | hctwait         res     1         ' Poll-based wait clocks
355bc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
355bc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
355bc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
355bc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
355bc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
355bc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
355bc 12d             | xfer_retry      res     1         ' Control transfer retry count
355bc 12d             | xfer_retry      res     1         ' Control transfer retry count
355bc 12d             | retry           res     1         ' Transaction retry count
355bc 12d             | retry           res     1         ' Transaction retry count
355bc 12d             | utx             res     1         ' Byte to transmit on USB
355bc 12d             | utx             res     1         ' Byte to transmit on USB
355bc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
355bc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
355bc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
355bc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
355bc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
355bc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
355bc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
355bc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
355bc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
355bc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
355bc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
355bc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
355bc 12d             | frame           res     1         ' USB 1ms frame counter value
355bc 12d             | frame           res     1         ' USB 1ms frame counter value
355bc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
355bc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
355bc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
355bc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
355bc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
355bc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
355bc 12d             | crc             res     1         ' Used for CRC16 calculation
355bc 12d             | crc             res     1         ' Used for CRC16 calculation
355bc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
355bc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
355bc 12d             | retval          res     1         ' Global success/fail return parameter
355bc 12d             | retval          res     1         ' Global success/fail return parameter
355bc 12d             | context_retval  res     1         ' Operation contextual return parameter
355bc 12d             | context_retval  res     1         ' Operation contextual return parameter
355bc 12d             | ' Device stuff
355bc 12d             | hdev_id         res     1+MAX_DEVICES
355bc 12d             | hdev_id         res     1+MAX_DEVICES
355bc 12d             | hdev_bcd        res     1
355bc 12d             | hdev_bcd        res     1
355bc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
355bc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
355bc 12d             | ' Keyboard/mouse stuff
355bc 12d             | hctrl_ep_addr   res     1
355bc 12d             | hctrl_ep_addr   res     1
355bc 12d             | hctrl_max_pkt   res     1
355bc 12d             | hctrl_max_pkt   res     1
355bc 12d             | hconfig_base    res     1
355bc 12d             | hconfig_base    res     1
355bc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
355bc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
355bc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
355bc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
355bc 12d             | hdev_class      res     1
355bc 12d             | hdev_class      res     1
355bc 12d             | hdev_subclass   res     1
355bc 12d             | hdev_subclass   res     1
355bc 12d             | hdev_protocol   res     1
355bc 12d             | hdev_protocol   res     1
355bc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
355bc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
355bc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
355bc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
355bc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
355bc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
355bc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
355bc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
355bc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
355bc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
355bc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
355bc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
355bc 12d             | if HAVE_MOUSE
355bc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
355bc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
355bc 12d             | end
355bc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
355bc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
355bc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
355bc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
355bc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
355bc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
355bc 12d             | hdev_out_addr   res     1
355bc 12d             | hdev_out_addr   res     1
355bc 12d             | 
355bc 12d             | if EMUPAD_MAX_PLAYER > 0
355bc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
355bc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
355bc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
355bc 12d             | end
355bc 12d             | 
355bc 12d             | hreg_init_end
355bc 12d             | 
355bc 12d             | hidr_start
355bc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
355bc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
355bc 12d             | hidr_flags      res     1
355bc 12d             | hidr_flags      res     1
355bc 12d             | hidr_axis       res     3
355bc 12d             | hidr_axis       res     3
355bc 12d             | hidr_buttons    res     1
355bc 12d             | hidr_buttons    res     1
355bc 12d             | hidr_hats       res     1
355bc 12d             | hidr_hats       res     1
355bc 12d             | '' Above are actually useful values, 6 longs
355bc 12d             | hidr_id         res     1
355bc 12d             | hidr_id         res     1
355bc 12d             | hidr_state      res     1
355bc 12d             | hidr_state      res     1
355bc 12d             | hidr_size       res     1
355bc 12d             | hidr_size       res     1
355bc 12d             | hidr_count      res     1
355bc 12d             | hidr_count      res     1
355bc 12d             | hidr_offset     res     1
355bc 12d             | hidr_offset     res     1
355bc 12d             | hidr_usage_idx  res     1
355bc 12d             | hidr_usage_idx  res     1
355bc 12d             | hidr_lminmax    res     1
355bc 12d             | hidr_lminmax    res     1
355bc 12d             | hidr_pminmax    res     1
355bc 12d             | hidr_pminmax    res     1
355bc 12d             | hidr_type       res     1
355bc 12d             | hidr_type       res     1
355bc 12d             | hidr_end
355bc 12d             | 
355bc 12d             | ' Variables dependent on the system freqency
355bc 12d             | _var_64_lower_  res     1
355bc 12d             | _var_64_lower_  res     1
355bc 12d             | _var_64_upper_  res     1
355bc 12d             | _var_64_upper_  res     1
355bc 12d             | _12Mbps_        res     1
355bc 12d             | _12Mbps_        res     1
355bc 12d             | _1_5Mbps_       res     1
355bc 12d             | _1_5Mbps_       res     1
355bc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
355bc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
355bc 12d             | _1us_           res     1         ' 1us
355bc 12d             | _1us_           res     1         ' 1us
355bc 12d             | _10us_          res     1         ' 10us
355bc 12d             | _10us_          res     1         ' 10us
355bc 12d             | _33us_          res     1         ' 33us
355bc 12d             | _33us_          res     1         ' 33us
355bc 12d             | _txn_err_       res     1         ' 250us
355bc 12d             | _txn_err_       res     1         ' 250us
355bc 12d             | _500us_         res     1         ' 500us
355bc 12d             | _500us_         res     1         ' 500us
355bc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
355bc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
355bc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
355bc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
355bc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
355bc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
355bc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
355bc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
355bc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
355bc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
355bc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
355bc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
355bc 12d             | _preamble_wait_ res     1
355bc 12d             | _preamble_wait_ res     1
355bc 12d             | _1ms_           res     1         ' 1ms
355bc 12d             | _1ms_           res     1         ' 1ms
355bc 12d             | _2ms_           res     1         ' 2ms
355bc 12d             | _2ms_           res     1         ' 2ms
355bc 12d             | _suspend_wait_  res     1         ' 3ms
355bc 12d             | _suspend_wait_  res     1         ' 3ms
355bc 12d             | _4ms_           res     1         ' 4ms
355bc 12d             | _4ms_           res     1         ' 4ms
355bc 12d             | _xfer_wait_     res     1         ' 5ms
355bc 12d             | _xfer_wait_     res     1         ' 5ms
355bc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
355bc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
355bc 12d             | _reset_hold_    res     1         ' 15ms
355bc 12d             | _reset_hold_    res     1         ' 15ms
355bc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
355bc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
355bc 12d             | _21ms_          res     1         ' 21ms
355bc 12d             | _21ms_          res     1         ' 21ms
355bc 12d             | _100ms_         res     1         ' 100ms
355bc 12d             | _100ms_         res     1         ' 100ms
355bc 12d             | _500ms_         res     1         ' 500ms
355bc 12d             | _500ms_         res     1         ' 500ms
355bc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
355bc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
355bc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
355bc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
355bc 12d             | '------------------------------------------------------------------------------
355bc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
355bc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
355bc 12d             | _usb_d_ls_nco_  res     1
355bc 12d             | _usb_d_ls_nco_  res     1
355bc 12d             | _usb_h_fs_nco_  res     1
355bc 12d             | _usb_h_fs_nco_  res     1
355bc 12d             | _usb_d_fs_nco_  res     1
355bc 12d             | _usb_d_fs_nco_  res     1
355bc 12d             | '------------------------------------------------------------------------------
355bc 12d             | ' Scratch registers
355bc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
355bc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
355bc 12d             | htmp1           res     1
355bc 12d             | htmp1           res     1
355bc 12d             | htmp2           res     1
355bc 12d             | htmp2           res     1
355bc 12d             | htmp3           res     1
355bc 12d             | htmp3           res     1
355bc 12d             | hrep            res     1         ' Repeat count
355bc 12d             | hrep            res     1         ' Repeat count
355bc 12d             | hsave0          res     1         ' Subroutine parameter saves
355bc 12d             | hsave0          res     1         ' Subroutine parameter saves
355bc 12d             | hsave1          res     1
355bc 12d             | hsave1          res     1
355bc 12d             | hsave2          res     1
355bc 12d             | hsave2          res     1
355bc 12d             | isrtmp1         res     1
355bc 12d             | isrtmp1         res     1
355bc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
355bc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
355bc 12d             | hr0             res     1         ' Multi-purpose registers
355bc 12d             | hr0             res     1         ' Multi-purpose registers
355bc 12d             | hr1             res     1
355bc 12d             | hr1             res     1
355bc 12d             | hr2             res     1
355bc 12d             | hr2             res     1
355bc 12d             | hr3             res     1
355bc 12d             | hr3             res     1
355bc 12d             | hpar1           res     1         ' Routine entry/exit parameters
355bc 12d             | hpar1           res     1         ' Routine entry/exit parameters
355bc 12d             | hpar2           res     1
355bc 12d             | hpar2           res     1
355bc 12d             | hpar3           res     1
355bc 12d             | hpar3           res     1
355bc 12d             | hct2            res     1         ' Function response bus turn-around timer
355bc 12d             | hct2            res     1         ' Function response bus turn-around timer
355bc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
355bc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
355bc 12d             | mod_cnt         res     1         ' Used in idle loops
355bc 12d             | mod_cnt         res     1         ' Used in idle loops
355bc 12d             |                 fit     $1F0
355bc 12d             |                 org     $200
355bc 200             | hlut_start
355bc 200             | 
355bc 200             | '------------------------------------------------------------------------------
355bc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
355bc 200             | ' settings to startup defaults.
355bc 200             | '------------------------------------------------------------------------------
355bc 200             | ' On entry:
355bc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
355bc 200             | '------------------------------------------------------------------------------
355bc 200             | set_speed_full
355bc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
355c0 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
355c4 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
355c8 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
355cc 204             | '                ret                             wcz     ' Restore caller flags on exit
355cc 204             | 
355cc 204             | '------------------------------------------------------------------------------
355cc 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
355cc 204             | ' is a downstream hub connected (not yet implemented), the baud generator
355cc 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
355cc 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
355cc 204             | ' putting the smart pins into reset.
355cc 204             | '------------------------------------------------------------------------------
355cc 204             | ' On entry:
355cc 204             | ' On exit: CZ flags restored to caller states
355cc 204             | '------------------------------------------------------------------------------
355cc 204             | set_speed_low
355cc 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
355d0 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
355d4 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
355d8 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
355dc 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
355e0 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
355e4 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
355e8 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
355ec 20c             | 
355ec 20c             | '------------------------------------------------------------------------------
355ec 20c             | ' Perform configuration stuff required when a device intitially connects.
355ec 20c             | '------------------------------------------------------------------------------
355ec 20c             | ' On entry:
355ec 20c             | ' On exit:
355ec 20c             | '------------------------------------------------------------------------------
355ec 20c             | on_connect
355ec 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
355f0 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
355f4 20e             | .retry
355f4 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
355f8 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
355fc 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
35600 211 00 08 00 FF 
35604 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35608 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3560c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35610 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
35614 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35618 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3561c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35620 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
35624 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
35628 21b 4C 03 B0 FD |                 call    #poll_waitx
3562c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
35630 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
35634 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
35638 21f B8 FF 9F FD |                 jmp     #.retry
3563c 220             | .get_dev_desc
3563c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35640 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35644 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35648 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3564c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
35650 225 88 FB BF FD |                 call    #reset
35654 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
35658 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3565c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
35660 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
35664 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35668 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3566c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
35670 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35674 22e 04 00 00 FF 
35678 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3567c 230 34 FA BF FD |                 call    #calc_crc5
35680 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
35684 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35688 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3568c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
35690 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35694 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35698 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3569c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
356a0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
356a4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
356a8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
356ac 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
356b0 23d C4 02 B0 FD |                 call    #poll_waitx
356b4 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
356b8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
356bc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
356c0 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
356c4 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
356c8 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
356cc 244 2D 00 64 5D |         if_nz   ret
356d0 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
356d4 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
356d8 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
356dc 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
356e0 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
356e4 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
356e8 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
356ec 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
356f0 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
356f4 24e 2C FB 9F CD |         if_b    jmp     #host_error
356f8 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
356fc 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
35700 251 2D EC 63 FD |                 call    pa
35704 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
35708 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3570c 254 2C EC 63 FD |                 jmp     pa
35710 255             | 
35710 255             | '------------------------------------------------------------------------------
35710 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
35710 255             | ' Status reporting is always in the function-to-host direction.
35710 255             | '------------------------------------------------------------------------------
35710 255             | ' On entry:
35710 255             | '   PTRA - start address of the SETUP data in hub.
35710 255             | '   PB - start address of the buffer/struct to be written to during the IN data
35710 255             | '     stage.
35710 255             | '   ep_addr_pid - device address, endpoint and CRC5.
35710 255             | ' On exit:
35710 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
35710 255             | '     contains the count of data stage bytes actually received, which must
35710 255             | '     always be <= the count requested.
35710 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35710 255             | '     more specific USB operation error code.
35710 255             | '------------------------------------------------------------------------------
35710 255             | control_read
35710 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35714 256 F8 8F 03 F6 |                 mov     hpar2, ptra
35718 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3571c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35720 259             | .xfer_start
35720 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35724 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35728 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3572c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
35730 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
35734 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35738 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3573c 260 61 00 00 FF 
35740 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
35744 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35748 263             | .data
35748 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3574c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
35750 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35754 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
35758 267             | .nak_retry
35758 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3575c 268             | .in_retry
3575c 268 BC F6 BF FD |                 call    #txn_in
35760 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
35764 26a 28 00 90 AD |         if_z    jmp     #.commit
35768 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3576c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35770 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35774 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35778 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3577c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35780 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35784 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35788 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3578c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
35790 275             | .commit
35790 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
35794 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
35798 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3579c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
357a0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
357a4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
357a8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
357ac 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
357b0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
357b4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
357b8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
357bc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
357c0 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
357c4 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
357c8 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
357cc 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
357d0 285             | .pre_status
357d0 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
357d4 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
357d8 287 00 B0 06 F6 |                 mov     pkt_data, #0
357dc 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
357e0 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
357e4 28a 61 00 00 FF 
357e8 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
357ec 28c             | .out_retry
357ec 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
357f0 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
357f4 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
357f8 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
357fc 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35800 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35804 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35808 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3580c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35810 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
35814 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
35818 297             | ' I've encountered transfer STALL, even though the data looks correct, and
35818 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
35818 297             | ' ControlRead() transfer gets things unstuck most of the time...
35818 297             | .xfer_retry
35818 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3581c 298 58 01 B0 FD |                 call    #poll_waitx
35820 299 8C F9 BF FD |                 call    #wait_txn_ok
35824 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
35828 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3582c 29c C8 EF 03 F6 |                 mov     pb, hpar3
35830 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
35834 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
35838 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3583c 2a0             | 
3583c 2a0             | '------------------------------------------------------------------------------
3583c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3583c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3583c 2a0             | ' the SETUP data struct is filled with the required values.
3583c 2a0             | '------------------------------------------------------------------------------
3583c 2a0             | ' On entry:
3583c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3583c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3583c 2a0             | '     stage.
3583c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3583c 2a0             | ' On exit:
3583c 2a0             | '   retval - used to convey the success/failure of each stage.
3583c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3583c 2a0             | '     more specific USB operation error code.
3583c 2a0             | '------------------------------------------------------------------------------
3583c 2a0             | control_write
3583c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35840 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35844 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35848 2a3             | 
35848 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3584c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
35850 2a5 F7 91 03 F6 |                 mov     hpar3, pb
35854 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35858 2a7             | .xfer_start
35858 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3585c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35860 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35864 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35868 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3586c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
35870 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35874 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35878 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3587c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35880 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35884 2b2             | .data
35884 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
35888 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3588c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35890 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
35894 2b6             | .out_retry
35894 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
35898 2b7 88 F6 BF FD |                 call    #txn_out
3589c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
358a0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
358a4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
358a8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
358ac 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
358b0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
358b4 2be             | .commit
358b4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
358b8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
358bc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
358c0 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
358c4 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
358c8 2c3             | pre_status_in
358c8 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
358cc 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
358d0 2c5             | .status_retry
358d0 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
358d4 2c6 44 F5 BF FD |                 call    #txn_in
358d8 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
358dc 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
358e0 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
358e4 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
358e8 2cb 2D 00 64 AD |         if_z    ret
358ec 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
358f0 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
358f4 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
358f8 2cf             | '               ret                                     ' Caller must handle transfer retirement
358f8 2cf             | 
358f8 2cf             | '------------------------------------------------------------------------------
358f8 2cf             | ' Execute an IN interrupt transaction.
358f8 2cf             | '------------------------------------------------------------------------------
358f8 2cf             | ' On entry:
358f8 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
358f8 2cf             | '   hpar2 - Address of the IN data buffer
358f8 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
358f8 2cf             | ' On exit:
358f8 2cf             | '   retval - the result of the operation.
358f8 2cf             | '   hpar3 - the count of IN data bytes actually received.
358f8 2cf             | '------------------------------------------------------------------------------
358f8 2cf             | do_int_in
358f8 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
358fc 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35900 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35904 2d2             | 
35904 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
35908 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3590c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
35910 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
35914 2d6             | .retry
35914 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
35918 2d7 00 F5 BF FD |                 call    #txn_in
3591c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
35920 2d9 1C 00 90 AD |         if_z    jmp     #.commit
35924 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
35928 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3592c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
35930 2dd 54 00 B0 FD |                 call    #retry_wait
35934 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35938 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3593c 2e0 D4 FF 9F FD |                 jmp     #.retry
35940 2e1             | .commit
35940 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
35944 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
35948 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3594c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
35950 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35954 2e6             | .post_ret
35954 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
35958 2e7             | 
35958 2e7             | 
35958 2e7             | '------------------------------------------------------------------------------
35958 2e7             | ' Resets the downstream hub port to FS
35958 2e7             | '------------------------------------------------------------------------------
35958 2e7             | dwnstream_reset
35958 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3595c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
35960 2e9             | 
35960 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
35964 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
35968 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3596c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35970 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
35974 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
35978 2ef             | 
35978 2ef             | '------------------------------------------------------------------------------
35978 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
35978 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
35978 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
35978 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
35978 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
35978 2ef             | '------------------------------------------------------------------------------
35978 2ef             | ' On entry:
35978 2ef             | '   hctwait - wait interval in sysclocks.
35978 2ef             | ' On exit:
35978 2ef             | '------------------------------------------------------------------------------
35978 2ef             | poll_waitx
35978 2ef 1A 92 63 FD |                 getct   hct2
3597c 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
35980 2f1             | .wait
35980 2f1 FF 25 CC FB |                 jnct2   #.wait
35984 2f2 2D 00 64 FD |                 ret
35988 2f3             | 
35988 2f3             | '------------------------------------------------------------------------------
35988 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
35988 2f3             | '------------------------------------------------------------------------------
35988 2f3             | ' On entry:
35988 2f3             | '   retval - transaction response PID or error code.
35988 2f3             | ' On exit:
35988 2f3             | '------------------------------------------------------------------------------
35988 2f3             | retry_wait
35988 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3598c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
35990 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35994 2f6 14 00 90 AD |         if_z    jmp     #.nak
35998 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3599c 2f8 D8 FF BF FD |                 call    #poll_waitx
359a0 2f9             | .dec
359a0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
359a4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
359a8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
359ac 2fc             | .nak
359ac 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
359b0 2fd C4 FF BF FD |                 call    #poll_waitx
359b4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
359b8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
359bc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
359c0 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
359c4 302 2D 00 64 FD |                 ret
359c8 303             | 
359c8 303             | host_reset
359c8 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
359cc 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
359d0 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
359d0 305 BD 01 05 FF 
359d4 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
359d8 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
359dc 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
359e0 309             | ' Check to see if the system clock has been changed.
359e0 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
359e4 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
359e8 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
359ec 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
359f0 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
359f4 30e 40 46 62 FD |                 dirl    dp
359f8 30f             | 
359f8 30f 28 02 64 FD |                 setq    #1
359fc 310 80 00 80 FF 
35a00 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
35a04 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
35a08 313             | .enable
35a08 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
35a0c 314 41 46 62 FD |                 dirh    dp
35a10 315 1F 36 63 FD |                 waitx   _1us_
35a14 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35a18 317             | 
35a18 317             |                 ' Handle Port protection enable and startup delay
35a18 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
35a1c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
35a20 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
35a24 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
35a28 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
35a2c 31c             | 
35a2c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
35a30 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
35a34 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
35a38 31f 00 00 04 F6 |                 mov     0-0, #0
35a3c 320             | .regloop
35a3c 320             | 
35a3c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
35a3c 320             | 
35a3c 320             | discon_entry
35a3c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
35a40 321             | 
35a40 321             |               
35a40 321             |         if HAVE_HIDPAD
35a40 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
35a44 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
35a48 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
35a4c 324 F7 01 68 FC |                 wrlong  #0,pb
35a50 325             |         end
35a50 325             |         if EMUPAD_MAX_PLAYER > 0
35a50 325             |         end
35a50 325             | 
35a50 325             |                 ' Fall through to disconnected loop
35a50 325             | 
35a50 325             | '-----------------------------------------------------------------------------------------------------------------
35a50 325             | ' Device connect handling (Section 7.1.7.3).
35a50 325             | '-----------------------------------------------------------------------------------------------------------------
35a50 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
35a50 325             | ' device to connect (Section 7.1.7.3).
35a50 325             | '-----------------------------------------------------------------------------------------------------------------
35a50 325             | disconnected
35a50 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
35a54 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
35a58 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
35a5c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
35a60 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
35a64 32a             |         if ACTIVITY_LED >= 0
35a64 32a             |         end
35a64 32a 22 A7 82 FA |                 rqpin   urx, dm
35a68 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
35a6c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
35a70 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
35a74 32e             | .se1_test
35a74 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
35a78 32f FC FE BF FD |                 call    #poll_waitx
35a7c 330 22 A7 82 FA |                 rqpin   urx, dm
35a80 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
35a84 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
35a88 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
35a8c 334             | .se1            'SE1 is a fatal error condition
35a8c 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
35a90 335 E4 FE BF FD |                 call    #poll_waitx
35a94 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
35a98 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
35a9c 338             | .connect_test                                           ' Test lines until stable J/K state seen
35a9c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
35aa0 339 22 A7 82 FA |                 rqpin   urx, dm
35aa4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
35aa8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
35aac 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
35ab0 33d             | connected
35ab0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
35ab4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
35ab8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
35abc 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
35ac0 341             | .set_pulse
35ac0 341 1A 64 63 FD |                 getct   _pulse_time_
35ac4 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
35ac8 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
35ac8 343             | ' of 1ms and make a correction, if necessary.
35ac8 343             | '                mov     htmp, _1ms_
35ac8 343             | '                subs    htmp, iframe_delta
35ac8 343             | '                adds    _frame1ms_clks_, htmp
35ac8 343             | '                debug(udec(_frame1ms_clks_))
35ac8 343             | 
35ac8 343             |                 ' Fall through to idle/processing loop
35ac8 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
35acc 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
35ad0 345             | 
35ad0 345             | hidle
35ad0 345 22 A7 82 FA |                 rqpin   urx, dm
35ad4 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
35ad8 347 98 00 90 CD |         if_c    jmp     #.se0_test
35adc 348 24 06 70 FD |                 pollct3                         wc
35ae0 349 68 00 90 3D |         if_nc   jmp     #.nopoll
35ae4 34a 1A 94 63 FD |                 getct   hct3
35ae8 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
35aec 34c             | 
35aec 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
35af0 34d 00 70 E3 F8 |                 getbyte htmp
35af4 34e             | 
35af4 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
35af8 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
35afc 350 40 00 90 AD |         if_z    jmp     #.poll
35b00 351             | 
35b00 351             |         if _HAVE_GAMEPAD
35b00 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
35b04 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
35b08 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
35b0c 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
35b10 355 2C 00 90 AD |         if_z    jmp     #.poll
35b14 356             |         end
35b14 356             | 
35b14 356             |         if HAVE_MOUSE
35b14 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
35b18 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
35b1c 358 20 00 90 AD |         if_z    jmp     #.poll
35b20 359             |         end
35b20 359             | 
35b20 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
35b24 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
35b28 35b 14 00 90 AD |         if_z    jmp     #.poll
35b2c 35c             | 
35b2c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
35b30 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
35b34 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
35b38 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
35b3c 360             |         if HAVE_MOUSE
35b3c 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
35b40 361             |         else
35b40 361             |         end
35b40 361             | 
35b40 361             | .poll
35b40 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
35b44 362 2D EC 63 FD |                 call    pa
35b48 363             | .skip_poll
35b48 363             | 
35b48 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
35b4c 364             | 
35b4c 364             | .nopoll
35b4c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
35b50 365 44 00 90 AD |         if_z    jmp     #hsuspend
35b54 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
35b58 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
35b5c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
35b60 369 1A 84 63 FD |                 getct   hr0
35b64 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
35b68 36b             |         if ACTIVITY_LED >= 0
35b68 36b             |         end
35b68 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
35b6c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
35b70 36d 5C FF 9F FD |                 jmp     #hidle
35b74 36e             | ' Check for extended SE0 state on the bus
35b74 36e             | .se0_test
35b74 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
35b78 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
35b7c 370 22 A7 82 FA |                 rqpin   urx, dm
35b80 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
35b84 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
35b88 373 24 F6 BF FD |                 call    #wait_txn_ok
35b8c 374 00 00 80 FF 
35b90 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
35b94 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
35b94 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
35b98 377             | 
35b98 377             | hsuspend
35b98 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
35b9c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
35ba0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
35ba4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
35ba8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
35bac 37c 00 96 07 F6 |                 mov     mod_cnt, #0
35bb0 37d             | 
35bb0 37d             |                 ' Fall through to resume wait loop
35bb0 37d             | 
35bb0 37d             | hwait_resume
35bb0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
35bb4 37e 02 86 47 F0 |                 shr     hr1, #2
35bb8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
35bbc 380             |         if ACTIVITY_LED >= 0
35bbc 380             |         end
35bbc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
35bc0 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
35bc4 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
35bc8 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
35bcc 384 18 00 90 AD |         if_z    jmp     #.resume
35bd0 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
35bd4 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
35bd8 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
35bdc 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35be0 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
35be4 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
35be8 38b             | .resume
35be8 38b 22 05 28 FC |                 wypin   #OUT_K, dm
35bec 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
35bf0 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
35bf4 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
35bf8 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
35bfc 390 1F 70 63 FD |                 waitx   htmp
35c00 391 22 07 28 FC |                 wypin   #OUT_J, dm
35c04 392 01 70 47 F0 |                 shr     htmp, #1
35c08 393 1F 70 63 FD |                 waitx   htmp
35c0c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35c10 395 1A 92 62 FD |                 getct   iframe_ct_base
35c14 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35c18 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35c1c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
35c20 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
35c24 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
35c28 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
35c2c 39c             | 
35c2c 39c             | '------------------------------------------------------------------------------
35c2c 39c             | ' Send preamble to enable low-speed HUB ports
35c2c 39c             | '------------------------------------------------------------------------------
35c2c 39c             | ' On entry:
35c2c 39c             | ' On exit:
35c2c 39c             | '   USB baud rate set to low-speed
35c2c 39c             | '------------------------------------------------------------------------------
35c2c 39c             | utx_pre
35c2c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
35c30 39d 40 46 62 FD |                 dirl    dp
35c34 39e 28 02 64 FD |                 setq    #1
35c38 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
35c3c 3a0 58 44 62 FD |                 drvl    dm
35c40 3a1 59 46 62 FD |                 drvh    dp
35c44 3a2             | 
35c44 3a2 1E 00 00 FF 
35c48 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
35c4c 3a4             | 
35c4c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
35c50 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
35c54 3a6 28 02 64 3D |         if_nc   setq    #1
35c58 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
35c5c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
35c60 3a9             | .l1
35c60 3a9             | 
35c60 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
35c64 3aa 40 46 62 FD |                 dirl    dp
35c68 3ab 28 02 64 FD |                 setq    #1
35c6c 3ac 80 00 80 FF 
35c70 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
35c74 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
35c78 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
35c7c 3b0 41 46 62 FD |                 dirh    dp
35c80 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35c84 3b2             | 
35c84 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
35c88 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
35c8c 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
35c90 3b5             | 
35c90 3b5             | hlut_end
35c90 3b5             |                 fit     $400
35c90 3b5             |                 orgh
35c90                 | if OVERLAP_MEMORY
35c90                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
35c90                 | end
35c90                 | '------------------------------------------------------------------------------
35c90                 | ' Routines called from cog space.
35c90                 | '------------------------------------------------------------------------------
35c90                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
35c90                 | '------------------------------------------------------------------------------
35c90                 | 
35c90                 | '------------------------------------------------------------------------------
35c90                 | ' USB host cog initialization.
35c90                 | '------------------------------------------------------------------------------
35c90                 | usb_host_init
35c90                 |                 ' Initialize buffer pointers
35c90                 |         if OVERLAP_MEMORY
35c90                 |         else
35c90     40 15 B0 FE |                 loc     pb, #hid_descr
35c94                 |         end
35c94     F7 4B 02 F6 |                 mov     hid_descr_p, pb
35c98                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
35c98                 |                 {
35c98                 |                 }
35c98                 |         
35c98                 |                 {
35c98                 |                 }
35c98                 |                 'loc     pb,#hkbd_report
35c98                 |                 'mov     hkbd_report_p,pb
35c98                 | 
35c98     08 1D B0 FE |                 loc     pb, #hub_descr
35c9c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
35ca0     1D 1D B0 FE |                 loc     pb, #urx_buff
35ca4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
35ca8     95 1D B0 FE |                 loc     pb, #dev_desc_buff
35cac     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
35cb0     9F 1D B0 FE |                 loc     pb, #con_desc_buff
35cb4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
35cb8     18 15 B0 FE |                 loc     pb, #usb_cache_start
35cbc     F7 55 02 F6 |                 mov     cache_start_p, pb
35cc0     E9 1C B0 FE |                 loc     pb, #usb_cache_end
35cc4     F7 57 02 F6 |                 mov     cache_end_p, pb
35cc8                 | 
35cc8                 |         if ERROR_LED >= 0
35cc8                 |         end
35cc8                 | 
35cc8                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
35cc8                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
35cc8                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
35cc8                 | ' Configure and enable the Serial Host USB port.
35cc8     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
35ccc                 | 
35ccc                 | '------------------------------------------------------------------------------
35ccc                 | ' Timing calculations happen before any interrupt(s) are enabled.
35ccc                 | '------------------------------------------------------------------------------
35ccc                 | ' On entry:
35ccc                 | '   htmp - current CLKFREQ value.
35ccc                 | '------------------------------------------------------------------------------
35ccc                 | hinit_usb_timings
35ccc                 | '                getct   htmp2
35ccc     B8 59 02 F6 |                 mov     save_sysclk, htmp
35cd0     8D 5B 80 FF 
35cd4     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
35cd8     18 30 63 FD |                 getqx   _12Mbps_
35cdc     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
35ce0     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
35ce4     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
35ce8     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
35cec     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
35cf0     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
35cf4     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
35cf8     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
35cfc     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
35d00     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
35d04     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
35d08     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
35d0c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
35d10     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
35d14     80 00 00 FF 
35d18     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
35d1c     18 2C 63 FD |                 getqx   _var_64_lower_
35d20     19 2E 63 FD |                 getqy   _var_64_upper_
35d24     28 2C 63 FD |                 setq    _var_64_lower_
35d28     65 CD 1D FF 
35d2c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
35d30     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
35d34     01 00 00 FF 
35d38     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
35d3c     18 2C 63 FD |                 getqx   _var_64_lower_
35d40     19 2E 63 FD |                 getqy   _var_64_upper_
35d44     28 2C 63 FD |                 setq    _var_64_lower_
35d48     A1 07 00 FF 
35d4c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
35d50     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
35d54     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
35d58     09 36 57 F0 |                 shr     _1us_, #9               wc
35d5c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
35d60     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
35d64     18 38 63 FD |                 getqx   _10us_
35d68     09 38 57 F0 |                 shr     _10us_, #9              wc
35d6c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
35d70     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
35d74     18 3A 63 FD |                 getqx   _33us_
35d78     09 3A 57 F0 |                 shr     _33us_, #9              wc
35d7c     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
35d80     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
35d84     18 3C 63 FD |                 getqx   _txn_err_
35d88     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
35d8c     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
35d90     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
35d94     18 3E 63 FD |                 getqx   _500us_
35d98     09 3E 57 F0 |                 shr     _500us_, #9             wc
35d9c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
35da0     01 00 00 FF 
35da4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
35da8     18 40 63 FD |                 getqx   _txn_ok_ls_
35dac     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
35db0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
35db4     01 00 00 FF 
35db8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
35dbc     18 42 63 FD |                 getqx   _txn_ok_fs_
35dc0     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
35dc4     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
35dc8     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
35dcc     05 00 00 FF 
35dd0     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
35dd4     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
35dd8     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
35ddc     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
35de0     1C 00 00 FF 
35de4     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
35de8     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
35dec     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
35df0     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
35df4     00 00 00 FF 
35df8     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
35dfc     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
35e00     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
35e04     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
35e08     04 00 00 FF 
35e0c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
35e10     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
35e14     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
35e18     8D 5B 00 FF 
35e1c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
35e20     18 4C 63 FD |                 getqx   _preamble_wait_
35e24     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
35e28     01 00 00 FF 
35e2c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
35e30     18 2C 63 FD |                 getqx   _var_64_lower_
35e34     19 2E 63 FD |                 getqy   _var_64_upper_
35e38     28 2C 63 FD |                 setq    _var_64_lower_
35e3c     01 00 00 FF 
35e40     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
35e44     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
35e48     09 4E 57 F0 |                 shr     _1ms_, #9               wc
35e4c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
35e50     FF FF 7F FF 
35e54     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
35e58     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
35e5c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
35e60     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
35e64     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
35e68     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
35e6c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
35e70     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
35e74     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
35e78     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
35e7c     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
35e80     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
35e84     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
35e88     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
35e8c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
35e90     A7 59 03 F6 |                 mov     _8ms_, _1ms_
35e94     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
35e98     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
35e9c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
35ea0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
35ea4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
35ea8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
35eac     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
35eb0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
35eb4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
35eb8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
35ebc     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
35ec0                 | '        _ret_   mov     _1sec_, save_sysclk
35ec0                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
35ec0                 | '                ret
35ec0                 | {
35ec0                 | }
35ec0                 | 
35ec0                 | '------------------------------------------------------------------------------
35ec0                 | ' Parse a configuration descriptor chain to see if the device is a recognized
35ec0                 | ' one. If it is, start the task progression that will configure the device for
35ec0                 | ' use.
35ec0                 | '------------------------------------------------------------------------------
35ec0                 | ' On entry:
35ec0                 | '   hconfig_base - start address of the cached config descriptor chain.
35ec0                 | ' On exit:
35ec0                 | '------------------------------------------------------------------------------
35ec0                 | hparse_con_desc
35ec0     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
35ec4     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
35ec8     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
35ecc     4E 70 FF F9 |                 movbyts htmp,#%%1032
35ed0     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
35ed4                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
35ed4                 | 
35ed4     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
35ed8     6E ED 03 F1 |                 add     pa, hconfig_base
35edc     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
35ee0                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
35ee0                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
35ee0                 | ' that defines a keyboard and/or mouse.
35ee0     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
35ee4                 | .next_intf
35ee4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
35ee8     BC 01 90 3D |         if_ae   jmp     #hset_config
35eec     6E F3 03 F6 |                 mov     ptrb, hconfig_base
35ef0     75 F3 03 F1 |                 add     ptrb, hnext_desc
35ef4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
35ef8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
35efc     0C 00 90 AD |         if_z    jmp     #.intf
35f00     80 71 C7 FA |                 rdbyte  htmp, ptrb
35f04     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
35f08     D8 FF 9F FD |                 jmp     #.next_intf
35f0c                 | .intf
35f0c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
35f10     00 90 07 F6 |                 mov     hpar3, #0
35f14     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
35f18     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
35f1c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
35f20     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
35f24                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
35f24                 | 
35f24                 | .endp
35f24     80 71 C7 FA |                 rdbyte  htmp, ptrb
35f28     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
35f2c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
35f30     78 00 90 3D |         if_ae   jmp     #.get_device
35f34     6E F3 03 F6 |                 mov     ptrb, hconfig_base
35f38     75 F3 03 F1 |                 add     ptrb, hnext_desc
35f3c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
35f40     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
35f44     64 00 90 AD |         if_z    jmp     #.get_device
35f48     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
35f4c     04 00 90 AD |         if_z    jmp     #.get_ep
35f50     D0 FF 9F FD |                 jmp     #.endp
35f54                 | .get_ep
35f54     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
35f58     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
35f5c     0F 86 67 F0 |                 shl     hr1, #8 + 7
35f60     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
35f64     3F 00 00 FF 
35f68     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
35f6c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
35f70     00 8E 0F F2 |                 cmp     hpar2, #0               wz
35f74     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
35f78     00 90 0F F2 |                 cmp     hpar3, #0               wz
35f7c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
35f80     A0 FF 9F FD |                 jmp     #.endp
35f84                 | .in_ep
35f84     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
35f88     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
35f8c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
35f8c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
35f90     C2 89 DB F8 |                 setbyte hr2, hr0, #3
35f94     8C FF 9F FD |                 jmp     #.endp
35f98                 | .out_ep
35f98     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
35f9c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
35fa0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
35fa0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
35fa4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
35fa8     78 FF 9F FD |                 jmp     #.endp
35fac                 | 
35fac                 | .get_device
35fac     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
35fb0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
35fb4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
35fb8     68 00 90 AD |         if_z    jmp     #.gamepad
35fbc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
35fc0     AC 00 90 AD |         if_z    jmp     #.hub
35fc4     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
35fc8     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
35fcc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
35fd0     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
35fd4     4C 00 90 AD |         if_z    jmp     #.gamepad
35fd8     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
35fdc     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
35fe0                 | .keyboard
35fe0     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
35fe4                 |         if HAVE_MOUSE
35fe4     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
35fe8                 |         else
35fe8                 |         end
35fe8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
35fec     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
35ff0     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
35ff4     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
35ff8     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
35ffc     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
36000                 |                 'debug(udec(kb_intf_num))
36000                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
36000     E0 FE 9F FD |                 jmp     #.next_intf
36004                 | if HAVE_MOUSE
36004                 | .mouse
36004     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
36008     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3600c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
36010     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
36014     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
36018                 |                 'getbyte ms_interval, hr2, #3
36018     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3601c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
36020                 |                 'debug(udec(kb_intf_num))
36020                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
36020     C0 FE 9F FD |                 jmp     #.next_intf
36024                 | end
36024                 | .gamepad
36024     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
36028     C7 71 63 F5 |                 xor     htmp, hpar2
3602c     3F 00 00 FF 
36030     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36034     AC FE 9F AD |         if_z    jmp     #.next_intf
36038                 |         if HAVE_MOUSE
36038     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3603c     C7 71 63 F5 |                 xor     htmp, hpar2
36040     3F 00 00 FF 
36044     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36048     98 FE 9F AD |         if_z    jmp     #.next_intf
3604c                 |         end
3604c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
36050     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
36054     8C FE 9F 5D |         if_nz   jmp     #.next_intf
36058                 | 
36058     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3605c     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
36060     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36064     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
36068     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3606c                 |                 'debug(udec(gp_intf_num))
3606c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3606c     74 FE 9F FD |                 jmp     #.next_intf
36070                 | .hub
36070     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
36074     6C FE 9F 5D |         if_nz   jmp     #.next_intf
36078     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3607c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
36080     60 FE 9F 5D |         if_nz   jmp     #.next_intf
36084     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
36088     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3608c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
36090     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
36094     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
36098     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3609c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
360a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
360a4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
360a4     3C FE 9F FD |                 jmp     #.next_intf
360a8                 | 
360a8                 | '------------------------------------------------------------------------------
360a8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
360a8                 | ' it according to its function, or functions. In the case of this boot protocol
360a8                 | ' keyboard/mouse class driver:
360a8                 | ' - SetConfiguration(config_num)
360a8                 | ' - SetProtocol(boot)
360a8                 | ' - SetIdle(indefinite)
360a8                 | ' - Enter the device interrupt IN polling task stage.
360a8                 | '------------------------------------------------------------------------------
360a8                 | ' On entry:
360a8                 | ' On exit:
360a8                 | '------------------------------------------------------------------------------
360a8                 | hset_config
360a8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
360a8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
360a8     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
360ac     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
360b0     00 00 0C F2 |                 cmp     0-0, #0                 wz
360b4     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
360b8                 |         if HAVE_MOUSE
360b8     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
360bc                 |         end
360bc     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
360c0     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
360c4                 | .set_config
360c4     6C 0E D0 FE |                 loc     ptra, #set_config
360c8     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
360cc     6E ED 03 F1 |                 add     pa, hconfig_base
360d0     F6 8D C3 FA |                 rdbyte  hpar1, pa
360d4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
360d8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
360dc     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
360e0     A0 02 A0 FD |                 call    #control_write
360e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
360e8     2D 00 64 5D |         if_nz   ret
360ec                 | .kbd_config
360ec     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
360f0     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
360f4                 | 
360f4     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
360f8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
360fc     3F 00 00 FF 
36100     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36104     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
36108                 | 
36108     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3610c     34 0E D0 FE |                 loc     ptra, #set_protocol
36110     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
36114     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36118     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3611c     A0 02 A0 FD |                 call    #control_write
36120     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36124     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
36128     E4 02 90 5D |         if_nz   jmp     #.notify_client
3612c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36130     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
36134     30 03 B0 FD |                 call    #hset_idle
36138                 |                 'cmp     retval, #PID_ACK        wz
36138                 |         'if_nz   mov     hkbd_ep_addr, #0
36138                 |         'if_nz   jmp     #.notify_client
36138     A8 99 02 F6 |                 mov     hctwait, _2ms_
3613c     EF 02 A0 FD |                 call    #poll_waitx
36140     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
36144     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
36148     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3614c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
36150     2C 03 B0 FD |                 call    #hset_kbdled_report
36154     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36158     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3615c     B0 02 90 5D |         if_nz   jmp     #.notify_client
36160     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36164     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36168     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3616c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36170     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
36174     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
36178     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3617c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36180     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
36184     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
36188     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3618c                 |         if !!HAVE_MOUSE
3618c                 |         end
3618c                 | 
3618c                 | .mouse_config
3618c                 | if HAVE_MOUSE
3618c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
36190     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
36194     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
36198     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3619c     3F 00 00 FF 
361a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
361a4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
361a8                 | 
361a8                 |                 debug("mouse passed addr check")
361a8                 | 
361a8     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
361ac     00 00 80 FF 
361b0     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
361b4     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
361b8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
361bc     55 02 A0 FD |                 call    #control_read
361c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
361c4     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
361c8     44 02 90 5D |         if_nz   jmp     #.notify_client
361cc     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
361d0     56 01 00 F6 |                 mov     0-0, total_data
361d4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
361d8                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
361d8                 | 
361d8     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
361dc     64 0D D0 FE |                 loc     ptra, #set_protocol
361e0     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
361e4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
361e8     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
361ec     A0 02 A0 FD |                 call    #control_write
361f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
361f4     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
361f8     14 02 90 5D |         if_nz   jmp     #.notify_client
361fc                 |                 debug("mouse passed SetProtocol")
361fc     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36200     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
36204     60 02 B0 FD |                 call    #hset_idle
36208                 |                 'cmp     retval, #PID_ACK        wz
36208                 |         'if_nz   mov     hmouse_ep_addr, #0
36208                 |         'if_nz   jmp     #.notify_client
36208                 |                 debug("mouse passed SetIdle")
36208     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3620c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36210     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36214     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36218     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3621c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36220     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
36224     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
36228     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3622c     3F 00 00 FF 
36230     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
36234     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
36238     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3623c     D0 01 90 FD |                 jmp     #.notify_client
36240                 | end
36240                 | .gamepad_config
36240                 | if _HAVE_GAMEPAD
36240     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36244     00 00 0C F2 |                 cmp     0-0, #0                 wz
36248     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3624c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36250     00 70 03 F6 |                 mov     htmp, 0-0
36254     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36258     3F 00 00 FF 
3625c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36260     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
36264                 | 
36264     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36268     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3626c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36270     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36274     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36278     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3627c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
36280     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
36284     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
36288     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3628c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36290     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
36294     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
36298     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3629c                 | 
3629c                 |                 if EMUPAD_MAX_PLAYER > 0
3629c                 |                 
3629c                 | .rule_loop           
3629c                 |                 end
3629c                 | 
3629c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
362a0     5C 00 90 AD |         if_e    jmp     #.xinput
362a4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
362a8     00 70 03 F6 |                 mov     htmp,0-0
362ac     01 A6 02 FF 
362b0     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
362b4     7C 00 90 AD |         if_e    jmp     #.ps3
362b8                 | 
362b8     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
362bc     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
362c0     00 00 80 5F 
362c4     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
362c8     03 00 80 AF 
362cc     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
362d0     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
362d4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
362d8     55 02 A0 FD |                 call    #control_read
362dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
362e0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
362e4     00 00 04 56 |         if_nz   mov     0-0, #0
362e8     24 01 90 5D |         if_nz   jmp     #.notify_client
362ec     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
362f0     56 01 00 F6 |                 mov     0-0, total_data
362f4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
362f8                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
362f8                 | 
362f8     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
362fc     10 01 90 FD |                 jmp     #.notify_client
36300                 | .xinput
36300     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
36304     2D EF 03 F6 |                 mov     pb,hdev_port
36308     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3630c     03 EE 27 F3 |                 fle     pb,#3
36310     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
36314     02 EF 47 FC |                 wrbyte  pb, ptra[2]
36318                 | 
36318     03 B0 06 F6 |                 mov     pkt_data, #3
3631c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
36320     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
36324     5A 00 A0 FD |                 call    #txn_out
36328     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3632c                 | 
3632c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
36330     DC 00 90 FD |                 jmp     #.notify_client
36334                 | .ps3
36334     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
36338     2D EF 03 F6 |                 mov     pb,hdev_port
3633c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
36340     04 EE 27 F3 |                 fle     pb,#4
36344     F7 EF C3 F9 |                 decod   pb
36348     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3634c                 | 
3634c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36350     00 0C D0 FE |                 loc     ptra, #set_report
36354     01 00 80 FF 
36358     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3635c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36360     03 61 5C FC |                 wrword  #48, ptra[wLength]
36364     20 0C B0 FE |                 loc     pb, #ps3_command_buff
36368     A0 02 A0 FD |                 call    #control_write
3636c                 | 
3636c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36370     E0 0B D0 FE |                 loc     ptra, #set_report
36374     01 00 80 FF 
36378     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3637c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36380     03 09 5C FC |                 wrword  #4, ptra[wLength]
36384     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
36388     A0 02 A0 FD |                 call    #control_write
3638c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
36390     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
36394     00 00 04 56 |         if_nz   mov     0-0, #0
36398     74 00 90 5D |         if_nz   jmp     #.notify_client
3639c                 | 
3639c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
363a0     6C 00 90 FD |                 jmp     #.notify_client
363a4                 | end
363a4                 | 
363a4                 | .hub_config
363a4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
363a8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
363ac     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
363b0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
363b4     3F 00 00 FF 
363b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
363bc     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
363c0                 | 
363c0     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
363c4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
363c8     26 EF 03 F6 |                 mov     pb, hub_descr_p
363cc     55 02 A0 FD |                 call    #control_read
363d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
363d4     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
363d8     34 00 90 5D |         if_nz   jmp     #.notify_client
363dc                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
363dc                 | 
363dc     26 F1 03 F6 |                 mov     ptra, hub_descr_p
363e0     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
363e4     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
363e8                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
363e8                 | .pwr_loop
363e8     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
363ec     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
363f0     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
363f4     A0 02 A0 FD |                 call    #control_write
363f8     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
363fc                 | 
363fc     B1 99 02 F6 |                 mov     hctwait, _500ms_
36400     B0 99 02 F1 |                 add     hctwait, _100ms_
36404     EF 02 A0 FD |                 call    #poll_waitx
36408                 | 
36408     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3640c     00 00 90 FD |                 jmp     #.notify_client
36410                 | 
36410                 | .notify_client
36410     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
36414     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
36418                 |                 debug(uhex_long(hdev_type,hdev_type+1))
36418                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
36418     2D 00 64 FD |                 ret
3641c                 | 
3641c                 | '------------------------------------------------------------------------------
3641c                 | ' Initialize the keyboard/mouse data area to start-up values.
3641c                 | '------------------------------------------------------------------------------
3641c                 | ' On entry:
3641c                 | ' On exit:
3641c                 | '------------------------------------------------------------------------------
3641c                 | init_kbdm_data
3641c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
36420     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
36424                 | 
36424     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
36428     2B ED 03 F6 |                 mov     pa, cache_end_p
3642c                 | .loop
3642c     61 01 4C FC |                 wrbyte  #0, ptra++
36430     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
36434     F4 FF 9F CD |         if_b    jmp     #.loop
36438                 |         
36438                 |         if EMUPAD_MAX_PLAYER > 0
36438                 |         end
36438                 | 
36438                 | 
36438     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3643c                 | .regloop
3643c     00 EC 8F F9 |                 altd    pa
36440     00 00 04 F6 |                 mov     0-0, #0
36444     01 EC 07 F1 |                 add     pa, #1
36448     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3644c     EC FF 9F 5D |         if_nz   jmp     #.regloop
36450                 | 
36450     E1 E1 61 FF 
36454     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
36458     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3645c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
36460     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
36464                 | 
36464     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
36468                 | 
36468                 | '------------------------------------------------------------------------------
36468                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
36468                 | ' function.
36468                 | '------------------------------------------------------------------------------
36468                 | ' On entry:
36468                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
36468                 | '   hpar2 - index number of the target interface.
36468                 | ' On exit:
36468                 | '------------------------------------------------------------------------------
36468                 | hset_idle
36468     A8 99 02 F6 |                 mov     hctwait, _2ms_
3646c     EF 02 A0 FD |                 call    #poll_waitx
36470     D8 0A D0 FE |                 loc     ptra, #set_idle
36474     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
36478     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3647c     A0 02 80 FD |                 jmp     #control_write
36480                 | 
36480                 | '------------------------------------------------------------------------------
36480                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
36480                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
36480                 | '------------------------------------------------------------------------------
36480                 | ' On entry:
36480                 | '   ep_addr_pid - device address and enpoint for the request.
36480                 | ' On exit:
36480                 | '   retval - transaction result.
36480                 | '------------------------------------------------------------------------------
36480                 | hset_kbdled_report
36480     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
36484     CC 0A D0 FE |                 loc     ptra, #set_report
36488     01 00 80 FF 
3648c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
36490     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36494     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
36498     27 EF 03 F6 |                 mov     pb, urx_buff_p
3649c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
364a0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
364a4                 | 
364a4                 | '------------------------------------------------------------------------------
364a4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
364a4                 | '------------------------------------------------------------------------------
364a4                 | ' On entry:
364a4                 | ' On exit:
364a4                 | '------------------------------------------------------------------------------
364a4                 | hget_kbd_in_report
364a4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
364a8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
364ac     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
364b0     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
364b4     CF 02 A0 FD |                 call    #do_int_in
364b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
364bc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
364c0                 | 
364c0     00 90 0F F2 |                 cmp     hpar3, #0               wz
364c4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
364c8                 | 
364c8     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
364cc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
364d0     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
364d4     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
364d8                 | 
364d8     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
364dc     18 00 B0 FD |                 call    #hkbd_compare
364e0                 |         if EMUPAD_MAX_PLAYER > 0
364e0                 |         end
364e0                 | 
364e0                 | .led_check
364e0     3B 71 03 F6 |                 mov     htmp, kb_led_states
364e4     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
364e8     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
364ec     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
364f0     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
364f4     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
364f8                 | 
364f8                 | '------------------------------------------------------------------------------
364f8                 | ' Compare current and previous keyboard data buffers for keypress changes.
364f8                 | '------------------------------------------------------------------------------
364f8                 | hkbd_compare
364f8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
364fc     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
36500     61 73 07 FB |                 rdlong  htmp1, ptra++
36504     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36508     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3650c     61 73 07 FB |                 rdlong  htmp1, ptra++
36510     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36514     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
36518     2D 00 64 AD |         if_z    ret
3651c                 | 
3651c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
36520                 | 
36520                 |                 ' Handle modifiers
36520     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
36524     00 87 C7 FA |                 rdbyte  hr1, ptra
36528     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3652c     63 86 63 FD |                 mergew  hr1
36530     08 EC 07 F6 |                 mov     pa,#8
36534                 | .modloop
36534     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
36538     E8 8C 07 F6 |                 mov     hpar1,#$E8
3653c     F6 8D 83 F1 |                 sub     hpar1,pa
36540     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
36544     FB ED 6F FB |                 djnz    pa,#.modloop
36548                 | 
36548     6F E0 75 FD | .release        modc    _set    wc
3654c                 |                 'alts    hdev_port, #hid_report_p
3654c                 |                 'mov     ptra, hid_report_p
3654c     02 F0 07 F1 |                 add     ptra, #2
36550     06 EC 07 F6 |                 mov     pa, #6
36554     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
36558     20 00 90 AD |         if_z    jmp     #.rl3
3655c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36560     02 F2 07 F1 |                 add     ptrb, #2
36564     06 EE 07 F6 |                 mov     pb, #6
36568     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3656c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36570     08 00 90 AD |         if_z    jmp     #.rl3
36574     FC EF 6F FB |                 djnz    pb, #.rl2
36578     68 00 B0 FD |                 call    #hkbd_translate
3657c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
36580                 | 
36580     00 90 07 F6 |                 mov     hpar3, #0
36584     1F 90 27 F4 |                 bith    hpar3, #31
36588                 | 
36588     6F 00 74 FD | .press          modc    _clr    wc
3658c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36590     02 F0 07 F1 |                 add     ptra, #2
36594     06 EC 07 F6 |                 mov     pa, #6
36598     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3659c     20 00 90 AD |         if_z    jmp     #.pl3
365a0     30 13 F0 FE |                 loc     ptrb, #hkbd_report
365a4     02 F2 07 F1 |                 add     ptrb, #2
365a8     06 EE 07 F6 |                 mov     pb, #6
365ac     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
365b0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
365b4     08 00 90 AD |         if_z    jmp     #.pl3
365b8     FC EF 6F FB |                 djnz    pb, #.pl2
365bc     24 00 B0 FD |                 call    #hkbd_translate
365c0     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
365c4                 | 
365c4     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
365c8     08 13 F0 FE |                 loc     ptrb, #hkbd_report
365cc     28 02 64 FD |                 setq #1
365d0     61 73 07 FB |                 rdlong  htmp1, ptra++
365d4     28 02 64 FD |                 setq #1
365d8     E1 73 67 FC |                 wrlong  htmp1, ptrb++
365dc     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
365e0                 | 
365e0     2D 00 64 FD |                 ret
365e4                 | 
365e4                 | '------------------------------------------------------------------------------
365e4                 | ' Translate keyboard scancode to ASCII
365e4                 | '------------------------------------------------------------------------------
365e4                 | ' On entry:
365e4                 | '   hpar1 - scancode
365e4                 | '   hpar2 - key modifiers state
365e4                 | '       c - pressed (0) or released (1) flag
365e4                 | ' On exit:
365e4                 | '   hpar1 - bit     31 = 0 pressed, 1 released
365e4                 | '               30..17 = unused
365e4                 | '                   18 = scroll-lock state 
365e4                 | '                   17 = caps-lock state
365e4                 | '                   16 = num-lock state 
365e4                 | '                15..8 = key modifiers state
365e4                 | '                 7..0 = scancode
365e4                 | '------------------------------------------------------------------------------
365e4                 | hkbd_translate
365e4     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
365e8     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
365ec     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
365f0     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
365f4     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
365f8     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
365fc                 | 
365fc                 |         if EMUPAD_MAX_PLAYER > 0
365fc                 | 
365fc                 |         if EMUPAD_BT0_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT1_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT2_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT3_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT4_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT5_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT6_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT7_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT8_BIT >= 0
365fc                 |         end
365fc                 |         if EMUPAD_BT9_BIT >= 0
365fc                 |         end
365fc                 | 
365fc                 |         end
365fc     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
36600     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
36604     1F 8C 47 F4 |                 bitc    hpar1, #31
36608                 |         if KEYQUEUE_SIZE > 0
36608     C4 09 B0 FE |                 loc pb,#keyq_head
3660c     F7 71 E3 FA |                 rdword htmp,pb
36610     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
36614     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
36618     B8 75 03 F6 |                 mov htmp2,htmp
3661c     04 74 07 FA |                 mul htmp2,#4
36620     F7 75 03 F1 |                 add htmp2,pb
36624     02 74 07 F1 |                 add htmp2,#2
36628     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3662c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
36630     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
36634     F7 71 43 5C |         if_nz   wrbyte htmp,pb
36638                 |         end
36638     2D 00 7C FD |                 ret wcz
3663c                 | 
3663c                 | if HAVE_MOUSE
3663c                 | '------------------------------------------------------------------------------
3663c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3663c                 | '------------------------------------------------------------------------------
3663c                 | ' On entry:
3663c                 | ' On exit:
3663c                 | '------------------------------------------------------------------------------
3663c                 | hget_mouse_in_report
3663c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36640     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36644     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
36648     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3664c     CF 02 A0 FD |                 call    #do_int_in
36650     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36654     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36658                 | 
36658     00 90 0F F2 |                 cmp     hpar3, #0               wz
3665c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36660                 | 
36660     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
36664     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36668     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3666c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
36670                 | 
36670     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36674     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
36678     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3667c     01 90 87 31 |         if_ae   sub     hpar3, #1
36680                 | 
36680     40 09 90 FE |                 loc     pa, #mouse_limits
36684     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
36688                 | 
36688                 |                 ' load xacc,yacc,zacc
36688     28 04 64 FD |                 setq    #3-1
3668c     80 87 07 FB |                 rdlong  hr1,ptrb
36690                 |                 ' load limits and outptr
36690     28 04 64 FD |                 setq    #3-1
36694     F6 73 03 FB |                 rdlong  htmp1,pa
36698                 | 
36698     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3669c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
366a0     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
366a4     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
366a8     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
366ac     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
366b0     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
366b4     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
366b8                 |               
366b8                 | 
366b8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
366bc     07 70 67 F7 |                 signx   htmp, #7
366c0     B8 87 03 F1 |                 add     hr1,htmp
366c4     00 72 0F F2 |                 cmp     htmp1,#0 wz
366c8     B9 87 63 53 |         if_ne   fles    hr1,htmp1
366cc     00 86 47 53 |         if_ne   fges    hr1,#0
366d0                 | 
366d0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
366d4     07 70 67 F7 |                 signx   htmp, #7
366d8     B8 89 03 F1 |                 add     hr2,htmp
366dc     00 74 0F F2 |                 cmp     htmp2,#0 wz
366e0     BA 89 63 53 |         if_ne   fles    hr2,htmp2
366e4     00 88 47 53 |         if_ne   fges    hr2,#0
366e8                 |                 
366e8                 | 
366e8     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
366ec     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
366f0     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
366f4     B8 8B 03 A1 |         if_z    add     hr3,htmp
366f8                 | 
366f8     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
366fc     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
36700                 | 
36700                 |                 ' write back accumulators
36700     28 04 64 FD |                 setq    #3-1
36704     80 87 67 FC |                 wrlong  hr1,ptrb
36708                 |                 ' if outptr set, write X/Y words
36708     00 76 0F F2 |                 cmp htmp3,#0                    wz
3670c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
36710     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
36714     2D 00 64 FD |                 ret
36718                 | end
36718                 | 
36718                 | '------------------------------------------------------------------------------
36718                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
36718                 | '------------------------------------------------------------------------------
36718                 | ' On entry:
36718                 | ' On exit:
36718                 | '------------------------------------------------------------------------------
36718                 | if _HAVE_GAMEPAD
36718                 | hget_gp_in_report
36718     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3671c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36720                 | 
36720     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36724     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
36728     00 90 E3 F8 |                 getbyte hpar3
3672c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
36730     CF 02 A0 FD |                 call    #do_int_in
36734     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36738     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3673c                 | 
3673c     00 90 0F F2 |                 cmp     hpar3, #0               wz
36740     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36744                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
36744                 | 
36744     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
36748     00 70 E3 F8 |                 getbyte htmp                            ' |
3674c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36750     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
36754     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
36758     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3675c     B8 01 C0 F8 |                 setbyte htmp                            ' |
36760                 | 
36760                 | ' Note: the following code compares the current and previous reports
36760                 | ' and process the data if there are changes to ease the debug output.
36760                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
36760                 | ' gpPreReport buffer.
36760                 | 
36760                 |                 ' ----- start of block to remove
36760                 |                 {
36760                 |                 }
36760                 |                 ' ----- end of block to remove
36760     F4 04 90 FE |                 loc pa,#hpad_translate
36764     2A EC 63 FD |                 push pa
36768                 | 
36768                 |                 ' FALL THROUGH !!!!
36768                 | 
36768                 | '------------------------------------------------------------------------------
36768                 | ' Decode controller report
36768                 | '------------------------------------------------------------------------------
36768                 | hid_decode
36768                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
36768     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3676c     00 04 00 FF 
36770     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
36774                 | 
36774     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36778                 | 
36778     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3677c     00 2A E3 F8 |                 getbyte hidr_type
36780     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
36784     34 02 90 AD |         if_z    jmp     #hpad_xinput
36788     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3678c     1C 03 90 AD |         if_z    jmp     #hpad_ps3
36790     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
36794     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
36798     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3679c                 |                 
3679c                 | 
3679c                 | '------------------------------------------------------------------------------
3679c                 | ' Handle HID controller (or mouse now
3679c                 | ' On entry:
3679c                 | '   ptrb - controller report
3679c                 | '------------------------------------------------------------------------------
3679c                 | hpad_hid
3679c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
367a0     F7 F1 03 F6 |                 mov     ptra, pb
367a4     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
367a8     00 EC 03 F6 |                 mov     pa, 0-0
367ac                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
367ac     19 2A 3B FF 
367b0     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
367b4                 | 
367b4                 | .next
367b4     00 EC 5F F2 |                 cmps    pa, #0      wcz
367b8     2D 00 7C ED |         if_be   ret     wcz
367bc                 | 
367bc     61 8D C7 FA |                 rdbyte  hpar1, ptra++
367c0     01 EC 87 F1 |                 sub     pa, #1
367c4     00 8E 07 F6 |                 mov     hpar2, #0
367c8                 | 
367c8     C6 71 03 F6 |                 mov     htmp, hpar1
367cc     03 70 07 F5 |                 and     htmp, #$03
367d0     01 70 0F F2 |                 cmp     htmp, #1    wz
367d4     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
367d8     07 8E 67 A7 |         if_z    signx   hpar2,#7
367dc     01 EC 87 A1 |         if_z    sub     pa, #1
367e0     02 70 0F F2 |                 cmp     htmp, #2    wz
367e4     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
367e8     0F 8E 67 A7 |         if_z    signx   hpar2,#15
367ec     02 EC 87 A1 |         if_z    sub     pa, #2
367f0     03 70 0F F2 |                 cmp     htmp, #3    wz
367f4     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
367f8     04 EC 87 A1 |         if_z    sub     pa, #4
367fc                 | 
367fc     FC 8C 07 F5 |                 and     hpar1, #$FC
36800                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
36800                 | 
36800     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
36804     0C 01 90 AD |         if_z    jmp     #.report_id
36808     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3680c     24 01 90 AD |         if_z    jmp     #.usage_page
36810     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
36814     2C 01 90 AD |         if_z    jmp     #.usage
36818     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3681c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
36820     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
36824     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
36828     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3682c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
36830     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
36834     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
36838     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3683c     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
36840     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
36844     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
36848     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3684c     64 FF 9F 5D |         if_nz   jmp     #.next
36850                 | 
36850     D8 1D A7 FB |                 tjf     hidr_state,#.next
36854                 | 
36854     03 8E 07 F5 |                 and     hpar2, #$03
36858     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3685c     18 00 90 5D |         if_nz   jmp     #.skip
36860                 | 
36860     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
36864     20 00 90 AD |         if_z    jmp     #.axes
36868     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3686c     5C 00 90 AD |         if_z    jmp     #.hats
36870     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
36874     70 00 90 AD |         if_z    jmp     #.buttons
36878                 | .skip
36878     8F 71 03 F6 |                 mov     htmp, hidr_size
3687c     90 71 03 FA |                 mul     htmp, hidr_count
36880     B8 23 03 F1 |                 add     hidr_offset, htmp
36884     2C FF 9F FD |                 jmp     #.next
36888                 | .axes
36888                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
36888     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3688c     90 87 03 F6 |                 mov     hr1, hidr_count
36890                 | .l1
36890     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36894     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36898     04 03 B0 FD |                 call    #hpad_getbits
3689c     64 03 B0 FD |                 call    #hpad_normalize
368a0     06 84 1F F2 |                 cmp     hr0, #6         wcz
368a4     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
368a8     00 88 43 C8 |         if_b    getnib  hr2
368ac     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
368b0     5F 01 20 C9 |         if_b    setword retval
368b4     01 84 07 C1 |         if_b    add     hr0, #1
368b8     8F 23 03 F1 |                 add     hidr_offset, hidr_size
368bc     F4 87 6F FB |                 djnz    hr1, #.l1
368c0                 | 
368c0     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
368c4     01 1C 07 F6 |                 mov     hidr_state, #1
368c8     E8 FE 9F FD |                 jmp     #.next
368cc                 | .hats
368cc                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
368cc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
368d0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
368d4     C8 02 B0 FD |                 call    #hpad_getbits
368d8     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
368dc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
368e0     01 1C 07 F6 |                 mov     hidr_state, #1
368e4     90 FF 9F FD |                 jmp     #.skip
368e8                 | .buttons
368e8                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
368e8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
368ec     8F 8F 03 F6 |                 mov     hpar2, hidr_size
368f0     90 8F 03 FA |                 mul     hpar2, hidr_count
368f4     A8 02 B0 FD |                 call    #hpad_getbits
368f8     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
368fc     B8 BF 62 F0 |                 shl     retval, htmp
36900     5F 17 43 F5 |                 or      hidr_buttons, retval
36904     90 71 03 F1 |                 add     htmp, hidr_count
36908     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3690c     01 1C 07 F6 |                 mov     hidr_state, #1
36910     64 FF 9F FD |                 jmp     #.skip
36914                 | .report_id
36914     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
36918     2D 00 7C 5D |         if_nz   ret     wcz
3691c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
36920     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
36924     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
36928     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3692c     01 F2 87 51 |         if_nz   sub     ptrb,#1
36930     80 FE 9F FD |                 jmp     #.next
36934                 | .usage_page
36934     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
36938     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3693c     04 1C 07 A6 |         if_z    mov     hidr_state, #4
36940     70 FE 9F FD |                 jmp     #.next
36944                 | .usage
36944     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
36948     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3694c     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
36950     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36954     5C FE 9F AD |         if_z    jmp     #.next
36958     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3695c     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
36960     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36964     4C FE 9F AD |         if_z    jmp     #.next
36968     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3696c     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
36970     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
36974     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
36978     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3697c     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
36980     10 00 90 AD |         if_z    jmp     #.usage_axis
36984     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
36988     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3698c     03 1C 07 A6 |         if_z    mov     hidr_state, #3
36990     20 FE 9F FD |                 jmp     #.next
36994                 | .usage_axis
36994     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
36998     18 FE 9F CD |         if_b    jmp     #.next
3699c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
369a0     C7 01 00 F8 |                 setnib  hpar2
369a4                 | 
369a4     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
369a8     C7 8F C3 F9 |                 decod   hpar2
369ac     C7 0F 43 F5 |                 or      hidr_flags, hpar2
369b0                 | 
369b0     01 24 07 F1 |                 add     hidr_usage_idx, #1
369b4     02 1C 07 F6 |                 mov     hidr_state, #2
369b8     F8 FD 9F FD |                 jmp     #.next
369bc                 | 
369bc                 | '------------------------------------------------------------------------------
369bc                 | ' Handle XInput controller
369bc                 | ' On entry:
369bc                 | '   ptrb - controller report
369bc                 | '------------------------------------------------------------------------------
369bc                 | '   Default implementation translates the report to a pseudo-defacto hid
369bc                 | '   standard and jumps to hpad_translate for actions.
369bc                 | '   Implementors may take specific actions for this kind of controller.
369bc                 | '------------------------------------------------------------------------------
369bc                 | hpad_xinput
369bc     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
369c0     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
369c4     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
369c8     14 70 0F F2 |                 cmp     htmp, #$14      wz
369cc     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
369d0                 | 
369d0                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
369d0                 | 
369d0     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
369d4     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
369d8                 | 
369d8     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
369dc     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
369e0     5F BF 22 F6 |                 not     retval
369e4     5F 11 2B F9 |                 setword hidr_axis, retval, #1
369e8     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
369ec     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
369f0     5F BF 22 F6 |                 not     retval
369f4     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
369f8                 | 
369f8     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
369fc     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
36a00     C0 BE 1E F2 |                 cmp     retval, #192    wcz
36a04     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
36a08     F8 01 B0 FD |                 call    #hpad_normalize
36a0c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
36a10     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
36a14     C0 BE 1E F2 |                 cmp     retval, #192    wcz
36a18     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
36a1c     E4 01 B0 FD |                 call    #hpad_normalize
36a20     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
36a24                 | 
36a24     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
36a28     81 BF E6 FA |                 rdword  retval, ptrb[1]
36a2c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
36a30     00 16 47 F4 |                 bitc    hidr_buttons, #0
36a34     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
36a38     01 16 47 F4 |                 bitc    hidr_buttons, #1
36a3c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
36a40     02 16 47 F4 |                 bitc    hidr_buttons, #2
36a44     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
36a48     03 16 47 F4 |                 bitc    hidr_buttons, #3
36a4c     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
36a50     04 16 47 F4 |                 bitc    hidr_buttons, #4
36a54     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
36a58     05 16 47 F4 |                 bitc    hidr_buttons, #5
36a5c     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
36a60     08 16 47 F4 |                 bitc    hidr_buttons, #8
36a64     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
36a68     09 16 47 F4 |                 bitc    hidr_buttons, #9
36a6c     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
36a70     0A 16 47 F4 |                 bitc    hidr_buttons, #10
36a74     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
36a78     0B 16 47 F4 |                 bitc    hidr_buttons, #11
36a7c     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
36a80     0C 16 47 F4 |                 bitc    hidr_buttons, #12
36a84                 | 
36a84     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
36a88     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
36a8c     7A BB 7A FF 
36a90     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
36a94     F9 FF 7F FF 
36a98     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
36a9c     B9 71 5F F9 |                 altgn   htmp, #htmp1
36aa0     00 70 43 F8 |                 getnib  htmp
36aa4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
36aa8                 | 
36aa8     AC 01 90 FD |                 jmp     #hpad_translate
36aac                 | 
36aac                 | '------------------------------------------------------------------------------
36aac                 | ' Handle PS3 controller
36aac                 | ' On entry:
36aac                 | '   ptrb - controller report
36aac                 | '------------------------------------------------------------------------------
36aac                 | '   Default implementation translates the report to a pseudo-defacto hid
36aac                 | '   standard and jumps to hpad_translate for actions.
36aac                 | '   Implementors may take specific actions for this kind of controller.
36aac                 | '------------------------------------------------------------------------------
36aac                 | hpad_ps3
36aac     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
36ab0     01 70 0F F2 |                 cmp     htmp, #$01      wz
36ab4     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
36ab8                 | 
36ab8                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
36ab8                 | 
36ab8     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
36abc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
36ac0     40 01 B0 FD |                 call    #hpad_normalize
36ac4     5F 11 23 F9 |                 setword hidr_axis, retval, #0
36ac8     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
36acc     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
36ad0     30 01 B0 FD |                 call    #hpad_normalize
36ad4     5F 11 2B F9 |                 setword hidr_axis, retval, #1
36ad8     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
36adc     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
36ae0     20 01 B0 FD |                 call    #hpad_normalize
36ae4     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
36ae8     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
36aec     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
36af0     10 01 B0 FD |                 call    #hpad_normalize
36af4     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
36af8     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
36afc     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
36b00                 | 
36b00     08 8C 07 F6 |                 mov     hpar1, #8
36b04     13 8E 07 F6 |                 mov     hpar2, #19
36b08     94 00 B0 FD |                 call    #hpad_getbits
36b0c                 | 
36b0c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
36b10     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
36b14     00 16 47 F4 |                 bitc    hidr_buttons, #0
36b18     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
36b1c     01 16 47 F4 |                 bitc    hidr_buttons, #1
36b20     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
36b24     02 16 47 F4 |                 bitc    hidr_buttons, #2
36b28     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
36b2c     03 16 47 F4 |                 bitc    hidr_buttons, #3
36b30     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
36b34     04 16 47 F4 |                 bitc    hidr_buttons, #4
36b38     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
36b3c     05 16 47 F4 |                 bitc    hidr_buttons, #5
36b40     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
36b44     06 16 47 F4 |                 bitc    hidr_buttons, #6
36b48     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
36b4c     07 16 47 F4 |                 bitc    hidr_buttons, #7
36b50     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
36b54     08 16 47 F4 |                 bitc    hidr_buttons, #8
36b58     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
36b5c     09 16 47 F4 |                 bitc    hidr_buttons, #9
36b60     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
36b64     0A 16 47 F4 |                 bitc    hidr_buttons, #10
36b68     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
36b6c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
36b70     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
36b74     0C 16 47 F4 |                 bitc    hidr_buttons, #12
36b78                 | 
36b78     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
36b7c     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
36b80     09 FA 79 FF 
36b84     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
36b88     FF FA 7F FF 
36b8c     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
36b90     B9 71 5F F9 |                 altgn   htmp, #htmp1
36b94     00 70 43 F8 |                 getnib  htmp
36b98     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
36b9c                 | 
36b9c     B8 00 90 FD |                 jmp     #hpad_translate
36ba0                 | 
36ba0                 | '------------------------------------------------------------------------------
36ba0                 | ' Read bits from report data buffer
36ba0                 | '------------------------------------------------------------------------------
36ba0                 | ' On entry:
36ba0                 | '   PTRB - report buffer
36ba0                 | '   hpar1 - start bit
36ba0                 | '   hpar2 - number of bits
36ba0                 | ' On exit:
36ba0                 | '   retval - bits
36ba0                 | '------------------------------------------------------------------------------
36ba0                 | hpad_getbits
36ba0     C6 71 03 F6 |                 mov     htmp, hpar1
36ba4     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
36ba8     F9 71 03 F1 |                 add     htmp, ptrb
36bac     B8 BF 02 FB |                 rdlong  retval, htmp
36bb0                 | 
36bb0     C6 73 03 F6 |                 mov     htmp1, hpar1
36bb4     07 72 07 F5 |                 and     htmp1, #$07     ' shift
36bb8     B9 BF 42 F0 |                 shr     retval, htmp1
36bbc                 | 
36bbc     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
36bc0     10 00 90 1D |         if_a    jmp     #.l1
36bc4                 | 
36bc4     C7 8F C3 F9 |                 decod   hpar2
36bc8     01 8E 87 F1 |                 sub     hpar2, #1
36bcc     C7 BF 02 F5 |                 and     retval, hpar2
36bd0     2D 00 64 FD |                 ret
36bd4                 | .l1
36bd4     FF 7F 00 FF 
36bd8     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
36bdc     03 70 07 F1 |                 add     htmp, #3
36be0     B8 75 03 FB |                 rdlong  htmp2, htmp
36be4     18 8E 87 F1 |                 sub     hpar2, #24
36be8     C7 8F C3 F9 |                 decod   hpar2
36bec     01 8E 87 F1 |                 sub     hpar2, #1
36bf0     B9 75 43 F0 |                 shr     htmp2, htmp1
36bf4     C7 75 03 F5 |                 and     htmp2, hpar2
36bf8     18 74 67 F0 |                 shl     htmp2, #24
36bfc     BA BF 42 F5 |                 or      retval, htmp2
36c00     2D 00 64 FD |                 ret
36c04                 | 
36c04                 | '------------------------------------------------------------------------------
36c04                 | ' Normalize value to signed word (-32768 / 32767)
36c04                 | '------------------------------------------------------------------------------
36c04                 | ' On entry:
36c04                 | '   retval - value to normalize
36c04                 | '   hidr_lminmax - min (word 1) max (word 0) value range
36c04                 | '   - or -
36c04                 | '   hidr_pminmax - min (word 1) max (word 0) value range
36c04                 | '   hidr_size - value bits length
36c04                 | ' On exit:
36c04                 | '   retval - normalized value
36c04                 | '------------------------------------------------------------------------------
36c04                 | hpad_normalize
36c04     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
36c08     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
36c0c     2D 00 64 AD |         if_z    ret
36c10     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
36c14     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
36c18     0F 72 77 F7 |                 signx   htmp1, #15      wc
36c1c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
36c20     00 BE 66 C7 |         if_c    signx   retval, #0-0
36c24     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
36c28     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
36c2c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
36c30     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
36c34     B8 71 53 F6 |                 abs     htmp            wc
36c38     1F BE 0E F4 |                 testb   retval, #31     wz
36c3c     5F BF 42 F6 |                 abs     retval
36c40     B8 BF 12 FD |                 qdiv    retval, htmp
36c44     18 BE 62 FD |                 getqx   retval
36c48     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
36c4c     C0 FF 7F FF 
36c50     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
36c54     2D 00 64 FD |                 ret
36c58                 | 
36c58                 | '------------------------------------------------------------------------------
36c58                 | ' Perform controller actions
36c58                 | ' On entry:
36c58                 | '    hidr_id        report id
36c58                 | '    hidr_axis      axis value (signed word, 2 axes per long)
36c58                 | '                      X = hidr_axis+0, #0
36c58                 | '                      Y = hidr_axis+0, #1
36c58                 | '                      Z = hidr_axis+1, #0
36c58                 | '                     RX = hidr_axis+1, #1
36c58                 | '                     RY = hidr_axis+2, #0
36c58                 | '                     RZ = hidr_axis+2, #1
36c58                 | '    hidr_buttons   buttons state (bits 0 to 31)
36c58                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
36c58                 | '
36c58                 | '                     -------3 -------2 -------1 -------0 byte
36c58                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
36c58                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
36c58                 | '                                zyx||| |||||||| ++++++++ n. buttons
36c58                 | '                                |||||| ||||++++--------- n. axes
36c58                 | '                                |||||| ++++------------- n. hats
36c58                 | '                                ++++++------------------ valid axes
36c58                 | '------------------------------------------------------------------------------
36c58                 | hpad_translate
36c58                 | 
36c58                 | 
36c58                 |         if HAVE_HIDPAD
36c58     84 0C F0 FE |                 loc     ptrb,#hidpad_report
36c5c     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
36c60     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
36c64     01 70 E7 F2 |                 cmpsub  htmp,#1
36c68     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
36c6c     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
36c70     2D 00 7C 3D |         if_ae   ret     wcz
36c74     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
36c78     B8 F3 03 F1 |                 add     ptrb,htmp
36c7c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
36c80     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
36c84     28 0C 64 FD |                 setq    #7-1
36c88     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
36c8c                 |         end
36c8c                 | 
36c8c                 | 
36c8c                 |         if EMUPAD_MAX_PLAYER > 0
36c8c                 | .emupad_no_hat
36c8c                 |         if EMUPAD_BT0_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT1_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT2_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT3_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT4_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT5_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT6_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT7_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT8_BIT >= 0
36c8c                 |         end
36c8c                 |         if EMUPAD_BT9_BIT >= 0
36c8c                 |         end
36c8c                 | .emupad_slot_over
36c8c                 |         end
36c8c                 | 
36c8c                 |         if 0
36c8c                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
36c8c                 | 
36c8c                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
36c8c                 | 
36c8c                 |         end
36c8c     2D 00 64 FD |                 ret
36c90                 | end
36c90                 | 
36c90                 | if EMUPAD_MAX_PLAYER > 0
36c90                 | '------------------------------------------------------------------------------
36c90                 | ' Clear EmuPad state
36c90                 | '------------------------------------------------------------------------------
36c90                 | emupad_reset
36c90                 | 
36c90                 | '------------------------------------------------------------------------------
36c90                 | ' Get EmuPad Player number for current device (into retval)
36c90                 | ' Z flag is also set if current device is valid
36c90                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
36c90                 | '------------------------------------------------------------------------------
36c90                 | emupad_getnum
36c90                 | .loop
36c90                 | '------------------------------------------------------------------------------
36c90                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
36c90                 | '------------------------------------------------------------------------------
36c90                 | emupad_discon
36c90                 | .loop         
36c90                 |         
36c90                 |         ' FALL THROUGH!!!
36c90                 | 
36c90                 | '------------------------------------------------------------------------------
36c90                 | ' Update EmuPad reports (all of them...)
36c90                 | '------------------------------------------------------------------------------
36c90                 | emupad_write_reports
36c90                 | .devloop
36c90                 | 
36c90                 | end
36c90                 | 
36c90                 | 
36c90                 | '------------------------------------------------------------------------------
36c90                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
36c90                 | '------------------------------------------------------------------------------
36c90                 | ' On entry:
36c90                 | ' On exit:
36c90                 | '------------------------------------------------------------------------------
36c90                 | hget_hub_status
36c90     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
36c94     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36c98     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
36c9c     01 90 2F F9 |                 setword hpar3, #1, #1
36ca0     CF 02 A0 FD |                 call    #do_int_in
36ca4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36ca8     0C 00 90 AD |         if_z    jmp     #.data
36cac     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
36cb0     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
36cb4     2D 00 64 FD |                 ret
36cb8                 | .data
36cb8     00 90 0F F2 |                 cmp     hpar3, #0               wz
36cbc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36cc0                 | 
36cc0     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
36cc4     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
36cc8     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
36ccc     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
36cd0                 |                 debug(ubin_long(hub_status_chg))
36cd0                 | 
36cd0     01 5A 06 F6 |                 mov     hdev_port, #1
36cd4                 | .loop
36cd4     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
36cd8     0C 00 B0 AD |         if_x1   call    #hub_port_handler
36cdc     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
36ce0     F0 FF 9F 3D |         if_nc   jmp     #.loop
36ce4     2D 00 64 FD |                 ret
36ce8                 | 
36ce8                 | hub_port_handler
36ce8     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
36cec     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
36cf0     27 EF 03 F6 |                 mov     pb, urx_buff_p
36cf4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
36cf8     55 02 A0 FD |                 call    #control_read
36cfc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
36d00                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
36d00                 | 
36d00     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
36d04     50 01 90 5D |         if_x0   jmp     #.other
36d08     68 02 D0 FE |                 loc     ptra, #clr_port_feat
36d0c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
36d10     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
36d14     A0 02 A0 FD |                 call    #control_write
36d18     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
36d1c     7C 01 90 5D |         if_x0   jmp     #.disconnect
36d20     B0 99 02 F6 |                 mov     hctwait, _100ms_
36d24     EF 02 A0 FD |                 call    #poll_waitx
36d28                 | 
36d28     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
36d2c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
36d30     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
36d34     A0 02 A0 FD |                 call    #control_write
36d38                 | 
36d38     02 76 07 F6 |                 mov     htmp3, #2
36d3c                 | .wait_reset
36d3c     AC 99 02 F6 |                 mov     hctwait, _8ms_
36d40     EF 02 A0 FD |                 call    #poll_waitx
36d44     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
36d48     27 EF 03 F6 |                 mov     pb, urx_buff_p
36d4c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
36d50     55 02 A0 FD |                 call    #control_read
36d54     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
36d58     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
36d5c     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
36d60                 | 
36d60     10 02 D0 FE |                 loc     ptra, #clr_port_feat
36d64     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
36d68     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
36d6c     A0 02 A0 FD |                 call    #control_write
36d70                 | 
36d70     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
36d74                 | .wait_recover
36d74     A7 99 02 F6 |                 mov     hctwait, _1ms_
36d78     EF 02 A0 FD |                 call    #poll_waitx
36d7c     FD 71 6F FB |                 djnz    htmp,#.wait_recover
36d80                 | 
36d80     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36d84     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
36d88     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
36d8c                 | 
36d8c     00 08 00 FF 
36d90     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
36d94     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
36d98     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
36d9c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
36da0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
36da4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36da8     48 01 90 5D |         if_nz   jmp     #.done
36dac                 | .get_dev_desc
36dac     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
36db0     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
36db4     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
36db8     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
36dbc     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
36dc0     01 71 57 FC |                 wrword  htmp, ptra[wValue]
36dc4     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
36dc8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36dcc     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
36dd0     AC 99 02 F6 |                 mov     hctwait, _8ms_
36dd4     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
36dd8     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
36ddc     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
36de0     BE 00 A0 FD |                 call    #calc_crc5
36de4     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
36de8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
36dec     F7 AD C2 FA |                 rdbyte  total_data, pb
36df0     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
36df4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
36df8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36dfc     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
36e00     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
36e04     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
36e08                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
36e08     9F 99 02 F6 |                 mov     hctwait, _500us_
36e0c     EF 02 A0 FD |                 call    #poll_waitx
36e10     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
36e14     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
36e18     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
36e1c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
36e20     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36e24     CC 00 90 5D |         if_nz   jmp     #.done
36e28     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
36e2c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
36e30     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
36e34     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
36e38     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
36e3c     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
36e40     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
36e44     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
36e48     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
36e4c     A4 00 90 CD |         if_b    jmp     #.done
36e50     6C F0 BF FD |                 call    #hparse_con_desc
36e54     9C 00 90 FD |                 jmp     #.done
36e58                 | 
36e58                 | .other
36e58     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
36e5c     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
36e60     28 00 90 AD |         if_x1   jmp     #.reset_feature
36e64     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
36e68     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
36e6c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
36e70     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
36e74     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
36e78     10 00 90 AD |         if_x1   jmp     #.reset_feature
36e7c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
36e80     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
36e84     04 00 90 AD |         if_x1   jmp     #.reset_feature
36e88     68 00 90 FD |                 jmp     #.done
36e8c                 | .reset_feature
36e8c     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
36e90     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
36e94     A0 02 A0 FD |                 call    #control_write
36e98     58 00 90 FD |                 jmp     #.done
36e9c                 | .disconnect
36e9c                 | 
36e9c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36ea0     00 70 E3 F8 |                 getbyte htmp
36ea4     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
36ea8     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
36eac     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
36eb0     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
36eb4     00 76 06 A6 |         if_z    mov     kb_led_states, #0
36eb8     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
36ebc                 |         if EMUPAD_MAX_PLAYER > 0
36ebc                 |         end
36ebc                 |         if HAVE_MOUSE
36ebc     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
36ec0     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
36ec4     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
36ec8                 |         end
36ec8                 |         if HAVE_HIDPAD
36ec8     14 0A F0 FE |                 loc ptrb,#hidpad_report
36ecc     2D 71 03 F6 |                 mov htmp,hdev_port
36ed0     01 70 E7 F2 |                 cmpsub htmp,#1
36ed4     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
36ed8     B8 F3 03 F1 |                 add ptrb,htmp
36edc     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
36ee0     80 01 6C FC |                 wrlong #0,ptrb
36ee4                 |         end
36ee4                 | 
36ee4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
36ee8     00 00 C4 F8 |                 setbyte #0
36eec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36ef0     00 00 04 F6 |                 mov     0-0, #0
36ef4                 | 
36ef4                 | .done
36ef4     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
36ef8     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
36efc     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
36f00     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
36f04     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
36f08     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
36f0c                 | 
36f0c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
36f10     27 EF 03 F6 |                 mov     pb, urx_buff_p
36f14     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
36f18     55 02 A0 FD |                 call    #control_read
36f1c     00 69 06 FB |                 rdlong  hub_port_status, ptra
36f20                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
36f20     2D 00 64 FD |                 ret
36f24                 | 
36f24                 | '------------------------------------------------------------------------------
36f24                 | ' Partially populated SETUP packets
36f24                 | '------------------------------------------------------------------------------
36f24     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
36f25     06          |                 byte    REQ_GET_DESC
36f26     00 01       |                 word    TYPE_DEVICE << 8
36f28     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
36f2a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
36f2c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
36f2d     06          |                 byte    REQ_GET_DESC
36f2e     00 02       |                 word    TYPE_CONFIG << 8
36f30     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
36f32     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
36f34     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
36f35     09          |                 byte    REQ_SET_CONFIG
36f36     00 00       |                 word    0       ' Configuration value
36f38     00 00       |                 word    0       ' Zero
36f3a     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
36f3c     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
36f3d     05          |                 byte    REQ_SET_ADDR
36f3e     00 00       |                 word    0       ' Zero
36f40     00 00       |                 word    0       ' Zero
36f42     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
36f44                 | '------------------------------------------------------------------------------
36f44                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
36f44                 | ' wValue field dictates which protocol should be used.
36f44                 | '
36f44                 | ' When initialized, all devices default to report protocol. However the host
36f44                 | ' should not make any assumptions about the device state and should set the
36f44                 | ' desired protocol whenever initializing a device.
36f44                 | '------------------------------------------------------------------------------
36f44     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
36f45     0B          |                 byte    HID_SET_PROTO
36f46     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
36f48                 |                                                 ' (HID 1.11 Section 7.2.6).
36f48     00 00       |                 word    0               ' Interface index number.
36f4a     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
36f4c                 | '------------------------------------------------------------------------------
36f4c     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
36f4d     0A          |                 byte    HID_SET_IDLE
36f4e     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
36f50                 |                                         ' reporting until a change is detected in the report data
36f50                 | 
36f50                 |                                         ' (HID 1.11 Section 7.2.4).
36f50     00 00       |                 word    0       ' Interface index number.
36f52     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
36f54     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
36f55     09          |                 byte    HID_SET_REPORT
36f56     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
36f58                 |                                         ' (HID 1.11 Section 7.2.2).
36f58     00 00       |                 word    0       ' Interface index number.
36f5a     00 00       |                 word    0       ' Size of the report, in bytes.
36f5c     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
36f5d     06          |                 byte    REQ_GET_DESC
36f5e     00 22       |                 word    TYPE_REPORT << 8
36f60     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
36f62     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
36f64                 | '------------------------------------------------------------------------------
36f64     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
36f65     06          |                 byte    REQ_GET_DESC
36f66     00 29       |                 word    TYPE_HUB << 8
36f68     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
36f6a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
36f6c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
36f6d     03          |                 byte    REQ_SET_FEATURE
36f6e     00 00       |                 word    0       ' port power
36f70     01 00       |                 word    1       ' Port index number (1+)
36f72     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
36f74     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
36f75     01          |                 byte    REQ_CLEAR_FEATURE
36f76     00 00       |                 word    0       ' port power
36f78     01 00       |                 word    1       ' Port index number (1+)
36f7a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
36f7c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
36f7d     00          |                 byte    REQ_GET_STATUS
36f7e     00 00       |                 word    0
36f80     01 00       |                 word    1       ' Port index number (1+)
36f82     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
36f84                 | '------------------------------------------------------------------------------
36f84                 | if _HAVE_GAMEPAD
36f84     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
36f88                 | ps3_command_buff
36f88     00 00 00 00 
36f8c     00          |                 byte    $00, $00, $00, $00, $00
36f8d     00 00 00 00 
36f91     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
36f92     FF 27 10 00 
36f96     32          |                 byte    $FF, $27, $10, $00, $32
36f97     FF 27 10 00 
36f9b     32          |                 byte    $FF, $27, $10, $00, $32
36f9c     FF 27 10 00 
36fa0     32          |                 byte    $FF, $27, $10, $00, $32
36fa1     FF 27 10 00 
36fa5     32          |                 byte    $FF, $27, $10, $00, $32
36fa6     00 00 00 00 
36faa     00          |                 byte    $00, $00, $00, $00, $00
36fab     00 00 00 00 
36faf     00          |                 byte    $00, $00, $00, $00, $00
36fb0     00 00 00 00 
36fb4     00          |                 byte    $00, $00, $00, $00, $00
36fb5     00 00 00    |                 byte    $00, $00, $00
36fb8                 | '------------------------------------------------------------------------------
36fb8     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
36fbb                 |                                         ' 0x01 All blinking
36fbb                 |                                         ' 0x02 1 flashes, then on
36fbb                 |                                         ' 0x03 2 flashes, then on
36fbb                 |                                         ' 0x04 3 flashes, then on
36fbb                 |                                         ' 0x05 4 flashes, then on
36fbb                 |                                         ' 0x06 1 on
36fbb                 |                                         ' 0x07 2 on
36fbb                 |                                         ' 0x08 3 on
36fbb                 |                                         ' 0x09 4 on
36fbb                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
36fbb                 |                                         ' 0x0B Blinking*
36fbb                 |                                         ' 0x0C Slow blinking*
36fbb                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
36fbb     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
36fbe     00          |                 byte    $00             ' Left rumble
36fbf     00          |                 byte    $00             ' Right rumble
36fc0     00 00 00    |                 byte    $00, $00, $00
36fc3     00          | end
36fc4                 | alignl
36fc4                 | 
36fc4                 | if HAVE_MOUSE
36fc4     00 00 00 00 
36fc8     00 00 00 00 | mouse_limits long 0[2]
36fcc     00 00 00 00 | mouse_outptr long 0
36fd0                 | end
36fd0                 | 
36fd0                 | if KEYQUEUE_SIZE > 0
36fd0     00          | keyq_head byte 0
36fd1     00          | keyq_tail byte 0
36fd2     00 00 00 00 
      ...             
371ce     00 00 00 00 
371d2     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
371d4                 | alignl
371d4                 | end
371d4                 | 
371d4                 | if EMUPAD_MAX_PLAYER > 0
371d4                 | emupad_rule_buffer
371d4                 | if EMUPAD_BUILTIN_RULES
371d4                 | file "padmap_builtin.dat"
371d4                 | end
371d4                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
371d4                 | '' Default rule directly follows!
371d4                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
371d4                 | end
371d4                 | 
371d4                 | '------------------------------------------------------------------------------
371d4                 | ' The USB data cache area gets zero-filled at every device disconnect
371d4                 | '------------------------------------------------------------------------------
371d4                 | usb_cache_start
371d4                 | 
371d4                 | ' HID descriptor and report buffers
371d4                 | if !!OVERLAP_MEMORY
371d4     00 00 00 00 
      ...             
378cc     00 00 00 00 
378d0     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
378d4                 | end
378d4     00 00 00 00 
378d8     00 00 00 00 | hkbd_report     byte    0[8]
378dc     00 00 00 00 | hkbd_led_rep    byte    0
378e0                 | alignl
378e0                 | 
378e0                 | if HAVE_HIDPAD
378e0     00 00 00 00 
      ...             
3799c     00 00 00 00 
379a0     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
379a4                 | end
379a4                 | 
379a4                 | ' HUB descriptor
379a4     00          | hub_descr       byte    0   ' bDescLength
379a5     00          |                 byte    0   ' bDescriptorType
379a6     00          |                 byte    0   ' bNbrPorts
379a7     00 00       |                 word    0   ' wHubCharacteristics
379a9     00          |                 byte    0   ' bPwrOn2PwrGood
379aa     00          |                 byte    0   ' bHubContrCurrent
379ab     00          |                 byte    0   ' DeviceRemoveable
379ac     00          |                 byte    0   ' PortPwrCtrlMask
379ad                 | 
379ad                 | usb_cache_end
379ad                 | 
379ad                 | if HAVE_MOUSE
379ad     00 00 00 00 | mouse_xacc      long 0
379b1     00 00 00 00 | mouse_yacc      long 0
379b5     00 00 00 00 | mouse_zacc      long 0
379b9     00          | mouse_bstate    byte 0
379ba     00          | mouse_lpending  byte 0
379bb     00          | mouse_rpending  byte 0
379bc     00          | mouse_mpending  byte 0
379bd     00          | mouse_lock      byte 0
379be     00 00 00    |                 byte 0[3] ' padding
379c1                 | end
379c1                 | 
379c1     00 00 00 00 
      ...             
37a39     00 00 00 00 
37a3d     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
37a41     00 00 00 00 
37a45     00 00 00 00 
37a49     00 00 00 00 
37a4d     00 00 00 00 
37a51     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
37a53     00 00 00 00 
      ...             
37b4b     00 00 00 00 
37b4f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
37b53                 | 
37b53     00          | driver_cog      byte    0                       ' Current driver cog + 1
37b54                 | 	alignl
37b54                 | _audio096_spin2_dat_
37b54                 | 
37b54                 | audio       org     0
37b54                 | 
37b54     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
37b58     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
37b5c     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
37b60                 | 
37b60     01 EC 63 FD |             cogid   pa                   ' compute cogid
37b64     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
37b68     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
37b6c     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
37b70                 | 
37b70     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
37b74     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
37b78     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
37b7c     0F 20 06 FC |             wrpin   dac2,#right
37b80     0F 00 1E FC |             wxpin   #256,#right    
37b84     41 9C 64 FD |             dirh    #left addpins 1
37b88     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
37b8c     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
37b90     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
37b94                 |             
37b94                 | '---------------------------------------------------------------------------------        
37b94                 | '----------------- The main loop -------------------------------------------------
37b94                 | '---------------------------------------------------------------------------------
37b94                 | 
37b94     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
37b98     10 00 90 CD |       if_c  jmp     #loop1
37b9c                 |   
37b9c     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
37ba0     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
37ba4     D3 00 80 F1 |             sub     0-0,a40000000
37ba8     FD FD 6D FB |             djnz    cn,#p402
37bac                 |     
37bac     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
37bb0     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
37bb4     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
37bb8     01 FC 05 C6 |     if_c    mov     cn,#1
37bbc     D8 FE 39 F3 |             fle     ct,time3 wcz
37bc0     02 FC 05 C6 |     if_c    mov     cn,#2     
37bc4     D9 FE 39 F3 |             fle     ct,time4 wcz
37bc8     03 FC 05 C6 |     if_c    mov     cn,#3
37bcc     DA FE 39 F3 |             fle     ct,time5 wcz
37bd0     04 FC 05 C6 |     if_c    mov     cn,#4
37bd4     DB FE 39 F3 |             fle     ct,time6 wcz
37bd8     05 FC 05 C6 |     if_c    mov     cn,#5
37bdc     DC FE 39 F3 |             fle     ct,time7 wcz
37be0     06 FC 05 C6 |     if_c    mov     cn,#6
37be4     DD FE 39 F3 |             fle     ct,time8 wcz
37be8     07 FC 05 C6 |     if_c    mov     cn,#7
37bec                 | 
37bec                 | 
37bec                 | '----------------------------------------------------------------------------------
37bec                 | '------------- Compute channel samples --------------------------------------------
37bec                 | '----------------------------------------------------------------------------------
37bec                 | 
37bec                 | 
37bec     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
37bf0     06 BC 65 F0 |             shl     channeladd,#6
37bf4     DE F0 03 F1 |             add     ptra,channeladd
37bf8                 | 
37bf8     28 16 64 FD |             setq    #11                        	' read parameters
37bfc     00 D3 05 FB |             rdlong  pointer0,ptra
37c00                 |     	    
37c00     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
37c04     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
37c08     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
37c0c     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
37c10     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
37c14     00 C0 0D F2 |             cmp     qq,#0 wz                         
37c18     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
37c1c     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
37c20                 |             
37c20     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
37c24     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
37c28     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
37c2c                 | 
37c2c     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
37c30     EA 04 3A F9 |             getword oldrs,sample0,#1
37c34     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
37c38     EE F6 31 F9 |     	    getword avol0,volpan0,#0
37c3c     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
37c40     EF F2 31 F9 |             getword afreq0,freqskip0,#0
37c44                 | 
37c44     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
37c48     00 00 02 F6 |             mov     dt0,0-0    
37c4c     D5 00 82 F1 |             sub     dt0,time0
37c50                 |             
37c50     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
37c54     F9 00 00 F1 |             add     0-0,afreq0  	
37c58                 |             
37c58                 | '---- envelopes
37c58                 |             
37c58     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
37c5c     20 00 00 AF 
37c60     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
37c64     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
37c68                 | 
37c68     F9 44 02 F6 |             mov     envs1,afreq0
37c6c     F3 44 02 FA |             mul     envs1,envspd0
37c70     22 E3 01 F1 |             add     envph0,envs1 
37c74                 | 
37c74     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
37c78     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
37c7c     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
37c80     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
37c84     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
37c88     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
37c8c     00 42 06 36 |     if_ge   mov     envlo,#0
37c90     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
37c94     16 E2 65 30 |     if_ge   shl     envph0,#22
37c98                 | 
37c98     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
37c9c     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
37ca0     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
37ca4     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
37ca8     22 47 3A F9 |             getword envs2,envs1,#1		' next value
37cac     22 45 32 F9 |             getword envs1,envs1,#0		' current value
37cb0     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
37cb4     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
37cb8     21 45 02 FA |             mul     envs1,envlo
37cbc     23 45 02 F1 |             add     envs1,envs2
37cc0     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
37cc4                 |             
37cc4     1B D6 0D F4 | p410        testb   sstart0, #27 wz
37cc8     1B C2 61 AD |     if_z    getrnd  spl
37ccc     58 00 90 AD |     if_z    jmp     #p406
37cd0                 |  
37cd0     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
37cd4     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
37cd8     08 D2 45 F0 |             shr     pointer0,#8
37cdc                 |          
37cdc     1F D6 0D F4 |             testb   sstart0,#31 wz            
37ce0     01 D2 65 A0 |     if_z    shl     pointer0,#1        
37ce4     1C D6 0D F4 |             testb   sstart0,#28 wz            
37ce8     01 D2 65 A0 |     if_z    shl     pointer0,#1        
37cec                 |         
37cec     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
37cf0     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
37cf4     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
37cf8                 |             
37cf8     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
37cfc     EB C0 01 F1 |             add     qq,sstart0            
37d00                 | 
37d00     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
37d04     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
37d08     14 01 B0 1D |     if_gt   call    #cache_read
37d0c                 |          
37d0c     1F D6 0D F4 |             testb   sstart0,#31 wz 
37d10     08 C2 65 50 |     if_nz   shl     spl,#8
37d14     08 D2 65 50 |     if_nz   shl     pointer0,#8
37d18     07 D2 65 A0 |     if_z    shl     pointer0,#7
37d1c     1C D6 0D F4 |             testb   sstart0,#28 wz            
37d20     01 D2 45 A0 |     if_z    shr     pointer0,#1    
37d24     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
37d28                 | 
37d28                 | 
37d28     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
37d2c     00 C2 01 F6 |             mov     spl,0-0
37d30     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
37d34     00 C2 01 F6 |             mov     spl,0-0
37d38                 | 
37d38     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
37d3c     00 06 02 F6 |             mov     ls0,0-0
37d40     20 00 00 FF 
37d44     00 C0 05 F6 |             mov     qq,##16384
37d48     FC C0 81 F1 |             sub     qq,apan0
37d4c     E0 C2 31 FA |             scas    spl,qq
37d50     00 08 02 F6 |             mov     rs0, 0-0
37d54                 | 
37d54     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
37d58     04 0D 02 F1 |             add     rs,rs0
37d5c     01 0B 82 F1 |             sub     ls,oldls
37d60     03 0B 02 F1 |             add     ls,ls0
37d64                 |    
37d64     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
37d68     03 D5 21 F9 |             setword sample0,ls0,#0
37d6c                 |             
37d6c     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
37d70     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
37d74     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
37d78                 |   '  if_z    mov     sample0,#0
37d78     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
37d7c     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
37d80     04 00 00 AF 
37d84     00 AC 05 A1 |     if_z    add     time1,##2048
37d88     D6 AE 01 A6 |     if_z    mov     time2,time1
37d8c     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
37d90                 | 
37d90     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
37d94     00 D3 65 FC |             wrlong  pointer0,ptra
37d98     08 E3 65 FC |             wrlong  envph0,ptra[8]
37d9c     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
37da0                 |                       
37da0     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
37da4     FF BF 25 A7 |     if_z    decmod  front, #511          
37da8                 |          
37da8     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
37dac     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
37db0     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
37db4     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
37db8                 | 	    
37db8                 | 		    
37db8     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
37dbc     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
37dc0     02 11 02 F6 |             mov     newsample, oldrs       
37dc4                 | 
37dc4     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
37dc8     00 AB 01 F1 |             add     time0,dt0    
37dcc                 |                                      
37dcc     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
37dd0     D8 FD 9F AD |     if_z    jmp     #loop1
37dd4     00 C1 01 F6 |             mov     qq,dt0
37dd8                 |   
37dd8     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
37ddc     00 BE 9D F2 |             cmpr    front, #0-0 wcz
37de0     F4 FF 9F AD |     if_e    jmp     #p301    
37de4                 | 		
37de4     00 16 0E F2 | 	    cmp     scbase,#0 wz
37de8     20 00 90 AD |     if_z    jmp     #p302	   
37dec                 |   
37dec     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
37df0     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
37df4     02 1A 66 C0 |     if_c    shl     scptr2,#2
37df8     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
37dfc     60 1A 66 FC |             wrlong  scptr2,#$60
37e00     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
37e04     01 00 00 CF 
37e08     7F 18 06 C7 |     if_c    incmod  scptr,##639
37e0c                 | 			    
37e0c     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
37e10     00 00 00 FF 
37e14     FF BF 05 F7 |             incmod  front, ##511
37e18     EF C1 6D FB |             djnz    qq,#p301
37e1c                 |             
37e1c     74 FD 9F FD |             jmp     #loop            'loop
37e20                 | 
37e20                 | '----------------------------------------------------------------------------------
37e20                 | '------------- This is the end of the main loop -----------------------------------
37e20                 | '----------------------------------------------------------------------------------
37e20                 | 
37e20                 | '----------------------------------------------------------------------------------
37e20                 | '------------- PSRAM cache ----------- --------------------------------------------
37e20                 | '----------------------------------------------------------------------------------
37e20                 | 
37e20                 | ' There are 8 cache pointers for 8 channels
37e20                 | ' if 24 higher bits of address=cache, then get a word from the cache
37e20                 | ' else load the cache from PSRAM, update the pointer, then read a sample
37e20                 | 
37e20                 | 
37e20     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
37e24                 |             
37e24     E0 3C 02 F6 | 	    mov     addrhi,qq		
37e28     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
37e2c     12 FD 95 F9 | 	    alts    cn,#cache1            
37e30     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
37e34     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
37e38                 | 	
37e38     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
37e3c     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
37e40     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
37e44     08 34 66 F0 | 	    shl     cmd,#8
37e48     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
37e4c     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
37e50     08 36 66 F0 |             shl     hubaddr,#8                  '
37e54     11 37 02 F1 |             add     hubaddr,hubptr 
37e58     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
37e5c     28 04 64 FD |             setq    #2                          ' write 3 longs
37e60     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
37e64     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
37e68     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
37e6c                 |             
37e6c                 | 	
37e6c     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
37e70     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
37e74     11 C1 01 F1 | 	    add     qq,hubptr
37e78     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
37e7c     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
37e80                 |           
37e80                 | 
37e80                 | '--------------------------------------------------------------------------
37e80                 | '------ Interrupt service -------------------------------------------------
37e80                 | '------ Output the sample, get the next one if exists ---------------------
37e80                 | '--------------------------------------------------------------------------
37e80                 | 
37e80     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
37e84     0F CC 25 FC |             wypin   rsample,#right       '4
37e88     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
37e8c     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
37e90     FF F3 07 57 |     if_ne   incmod  ptrb,#511
37e94     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
37e98     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
37e9c                 |     
37e9c     F5 FF 3B FB |             reti1                        '17/19 
37ea0                 |           
37ea0                 | '---------------------------------------------------------------------------
37ea0                 | '-------- End of interrupt -------------------------------------------------
37ea0                 | '---------------------------------------------------------------------------    
37ea0                 | 
37ea0                 | 
37ea0                 | '---------------------------------------------------------------------------
37ea0                 | '------- Variables ---------------------------------------------------------
37ea0                 | '---------------------------------------------------------------------------
37ea0                 | 
37ea0                 | ' constants
37ea0                 | 
37ea0     00 00 00 40 | a40000000   long $40000000
37ea4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
37ea8                 | 
37ea8                 | ' Time variables
37ea8                 | 
37ea8     00 00 00 00 | time0       long 0    ' Global sample computing time
37eac     01 00 00 00 | time1       long 1    ' Local channels time
37eb0     02 00 00 00 | time2       long 2
37eb4     03 00 00 00 | time3       long 3
37eb8     04 00 00 00 | time4       long 4
37ebc     05 00 00 00 | time5       long 5
37ec0     06 00 00 00 | time6       long 6
37ec4     07 00 00 00 | time7       long 7
37ec8     08 00 00 00 | time8       long 8
37ecc                 | 
37ecc     00 00 00 00 | channeladd long 0
37ed0                 | 
37ed0     00 00 00 00 | front       long 0
37ed4                 | 
37ed4                 | ' temporary variables 
37ed4     00 00 00 00 | qq          long 0
37ed8     00 00 00 00 | spl         long 0
37edc     00 00 00 00 | zero        long 0
37ee0     00 00 00 00 | mailbox     long 0
37ee4     00 00 00 00 | mailbox2 long 0
37ee8                 | 
37ee8                 | ' Interrupt ISR variables
37ee8                 | 
37ee8     00 00 00 00 | lsample     long 0
37eec     00 00 00 00 | rsample     long 0
37ef0     00 00 00 00 | lsnext      long 0
37ef4     00 00 00 00 | rsnext      long 0 
37ef8                 | 
37ef8                 | ' channel parameter block
37ef8                 | 
37ef8     00 00 00 00 | pointer0    long 0     
37efc     00 00 00 00 | sample0     long 0
37f00     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
37f04     00 00 00 00 | lstart0     long 0
37f08     00 00 00 00 | lend0       long 0
37f0c     00 00 00 00 | volpan0     long 0
37f10     00 00 00 00 | freqskip0   long 0
37f14     00 00 00 00 | command0    long 0
37f18     00 00 00 00 | envph0	    long 0
37f1c     00 00 00 00 | envptr0	    long 0
37f20     00 00 00 00 | envspd0	    long 0
37f24     00 00 00 00 | envlen0	    long 0
37f28     00 00 00 00 | res5	    long 0
37f2c     00 00 00 00 | res6	    long 0
37f30     00 00 00 00 | res7	    long 0
37f34     00 00 00 00 | res8	    long 0
37f38                 | 
37f38     00 00 00 00 | afreq0      long 0
37f3c     00 00 00 00 | askip0      long 0
37f40     00 00 00 00 | avol0       long 0
37f44     00 00 00 00 | apan0       long 0
37f48                 | 
37f48     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
37f4c     00 00 00 00 | cn          long 0
37f50     00 00 00 00 | ct          long 0
37f54     00 00 00 00 | dt0         long 0
37f58                 | 
37f58                 | ' Samples
37f58     00 00 00 00 | oldls       long 0
37f5c     00 00 00 00 | oldrs       long 0
37f60                 | 
37f60     00 00 00 00 | ls0         long 0
37f64     00 00 00 00 | rs0         long 0
37f68                 | 
37f68     00 00 00 00 | ls          long 0    
37f6c     00 00 00 00 | rs          long 0
37f70                 | 
37f70     00 00 00 00 | oldsample   long 0
37f74     00 00 00 00 | newsample   long 0
37f78                 | 
37f78     00 00 00 00 | nrsample    long 0
37f7c     00 00 00 00 | nlsample    long 0
37f80                 | 
37f80     00 00 00 00 | scbase long 0
37f84     00 00 00 00 | scptr long 0
37f88     00 00 00 00 | scptr2 long 0
37f8c     00 00 00 00 | scope long 0
37f90                 | 
37f90     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
37f94     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
37f98                 | 
37f98     00 18 07 00 | hubptr      long $71800
37f9c     00 00 00 00 | cache1      long 0
37fa0     00 00 00 00 | cache2      long 0
37fa4     00 00 00 00 | cache3      long 0
37fa8     00 00 00 00 | cache4      long 0
37fac     00 00 00 00 | cache5      long 0
37fb0     00 00 00 00 | cache6      long 0
37fb4     00 00 00 00 | cache7      long 0
37fb8     00 00 00 00 | cache8      long 0
37fbc                 | 
37fbc                 | 
37fbc     00 00 00 00 | cmd         long 0
37fc0     00 00 00 00 | hubaddr     long 0
37fc4     00 01 00 00 | count       long 256
37fc8     00 00 00 00 | addrlo long 0
37fcc     00 00 00 00 | addrhi long 0
37fd0     00 00 00 00 | pointer00 long 0
37fd4     00 00 00 00 | envhi long 0
37fd8     00 00 00 00 | envlo long 0
37fdc     00 00 00 00 | envs1 long 0
37fe0     00 00 00 00 | envs2 long 0
37fe4     00 00 00 00 | noise0 long 0
37fe8     00 00 00 00 
37fec     00 00 00 00 | null  			long 	0,0           ' for channel reset
37ff0                 | 	alignl
37ff0                 | __system__dat_
37ff0     00 00 00 00 
37ff4     00 00 00 00 | 	byte	$00[8]
37ff8     03 00 00 00 
37ffc     00 00 00 00 
38000     00 00 00 00 
38004     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38008     00 00 00 00 
      ...             
38294     00 00 00 00 
38298     00 00 00 00 | 	byte	$00[660]
3829c     00 00 60 08 | 	long	(134 {__system____root_opendir})<<20
382a0     00 00 70 08 | 	long	(135 {__system____root_closedir})<<20
382a4     00 00 80 08 | 	long	(136 {__system____root_readdir})<<20
382a8     00 00 90 08 | 	long	(137 {__system____root_stat})<<20
382ac     00 00 00 00 
382b0     00 00 00 00 
382b4     00 00 00 00 
382b8     00 00 00 00 
382bc     00 00 00 00 
382c0     00 00 00 00 
382c4     00 00 00 00 | 	byte	$00[28]
382c8     30 83 03 00 | 	long	@@@__system__dat_ + 832
382cc     33 83 03 00 | 	long	@@@__system__dat_ + 835
382d0     54 83 03 00 | 	long	@@@__system__dat_ + 868
382d4     6D 83 03 00 | 	long	@@@__system__dat_ + 893
382d8     88 83 03 00 | 	long	@@@__system__dat_ + 920
382dc     A2 83 03 00 | 	long	@@@__system__dat_ + 946
382e0     B2 83 03 00 | 	long	@@@__system__dat_ + 962
382e4     C4 83 03 00 | 	long	@@@__system__dat_ + 980
382e8     D6 83 03 00 | 	long	@@@__system__dat_ + 998
382ec     E8 83 03 00 | 	long	@@@__system__dat_ + 1016
382f0     F4 83 03 00 | 	long	@@@__system__dat_ + 1028
382f4     05 84 03 00 | 	long	@@@__system__dat_ + 1045
382f8     19 84 03 00 | 	long	@@@__system__dat_ + 1065
382fc     23 84 03 00 | 	long	@@@__system__dat_ + 1075
38300     33 84 03 00 | 	long	@@@__system__dat_ + 1091
38304     42 84 03 00 | 	long	@@@__system__dat_ + 1106
38308     58 84 03 00 | 	long	@@@__system__dat_ + 1128
3830c     71 84 03 00 | 	long	@@@__system__dat_ + 1153
38310     85 84 03 00 | 	long	@@@__system__dat_ + 1173
38314     93 84 03 00 | 	long	@@@__system__dat_ + 1187
38318     A7 84 03 00 | 	long	@@@__system__dat_ + 1207
3831c     B3 84 03 00 | 	long	@@@__system__dat_ + 1219
38320     C5 84 03 00 | 	long	@@@__system__dat_ + 1237
38324     DD 84 03 00 | 	long	@@@__system__dat_ + 1261
38328     EF 84 03 00 | 	long	@@@__system__dat_ + 1279
3832c     02 85 03 00 | 	long	@@@__system__dat_ + 1298
38330     4F 4B 00 4E 
38334     75 6D 65 72 
38338     69 63 61 6C 
3833c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
38340     75 6D 65 6E 
38344     74 20 6F 75 
38348     74 20 6F 66 
3834c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
38350     61 69 6E 00 
38354     52 65 73 75 
38358     6C 74 20 6E 
3835c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
38360     65 70 72 65 
38364     73 65 6E 74 
38368     61 62 6C 65 
3836c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
38370     65 67 61 6C 
38374     20 6D 75 6C 
38378     74 69 62 79 
3837c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
38380     65 71 75 65 
38384     6E 63 65 00 
38388     4E 6F 20 73 
3838c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
38390     66 69 6C 65 
38394     20 6F 72 20 
38398     64 69 72 65 
3839c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
383a0     79 00 42 61 
383a4     64 20 66 69 
383a8     6C 65 20 6E 
383ac     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
383b0     72 00 50 65 
383b4     72 6D 69 73 
383b8     73 69 6F 6E 
383bc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
383c0     69 65 64 00 
383c4     4E 6F 74 20 
383c8     65 6E 6F 75 
383cc     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
383d0     65 6D 6F 72 
383d4     79 00 54 65 
383d8     6D 70 6F 72 
383dc     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
383e0     66 61 69 6C 
383e4     75 72 65 00 
383e8     46 69 6C 65 
383ec     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
383f0     73 74 73 00 
383f4     49 6E 76 61 
383f8     6C 69 64 20 
383fc     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
38400     6D 65 6E 74 
38404     00 54 6F 6F 
38408     20 6D 61 6E 
3840c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
38410     65 6E 20 66 
38414     69 6C 65 73 
38418     00 49 2F 4F 
3841c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
38420     6F 72 00 4E 
38424     6F 74 20 61 
38428     20 64 69 72 
3842c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
38430     72 79 00 49 
38434     73 20 61 20 
38438     64 69 72 65 
3843c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
38440     79 00 52 65 
38444     61 64 20 6F 
38448     6E 6C 79 20 
3844c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
38450     20 73 79 73 
38454     74 65 6D 00 
38458     46 75 6E 63 
3845c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
38460     20 6E 6F 74 
38464     20 69 6D 70 
38468     6C 65 6D 65 
3846c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
38470     00 44 69 72 
38474     65 63 74 6F 
38478     72 79 20 6E 
3847c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
38480     6D 70 74 79 
38484     00 4E 61 6D 
38488     65 20 74 6F 
3848c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
38490     6E 67 00 44 
38494     65 76 69 63 
38498     65 20 6E 6F 
3849c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
384a0     65 6B 61 62 
384a4     6C 65 00 42 
384a8     61 64 20 61 
384ac     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
384b0     73 73 00 42 
384b4     72 6F 6B 65 
384b8     6E 20 63 6F 
384bc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
384c0     74 69 6F 6E 
384c4     00 44 65 76 
384c8     69 63 65 20 
384cc     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
384d0     65 73 6F 75 
384d4     72 63 65 20 
384d8     62 75 73 79 
384dc     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
384e0     73 73 20 64 
384e4     65 76 69 63 
384e8     65 20 6C 69 
384ec     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
384f0     6F 20 73 70 
384f4     61 63 65 20 
384f8     6F 6E 20 64 
384fc     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
38500     65 00 55 6E 
38504     6B 6E 6F 77 
38508     6E 20 65 72 
3850c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
38510     00 00 00 00 
38514     00 00 00 00 | 	byte	$00[8]
38518     05 00 00 00 
3851c     00 00 00 00 
38520     00 00 00 00 
38524     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38528     00 00 00 00 | 	byte	$00, $00, $00, $00
3852c     00 00 E0 09 | 	long	(158 {__system___tx})<<20
38530     00 00 F0 09 | 	long	(159 {__system___rx})<<20
38534     00 00 00 00 | 	byte	$00, $00, $00, $00
38538     00 00 00 0A | 	long	(160 {__system___rxtxioctl_0631})<<20
3853c     00 00 10 0A | 	long	(161 {__system____dummy_flush_0632})<<20
38540     00 00 00 00 
38544     00 00 00 00 | 	byte	$00[8]
38548     01 00 00 00 
3854c     06 00 00 00 
38550     00 00 00 00 
38554     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38558     00 00 00 00 
3855c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38560     00 00 E0 09 | 	long	(158 {__system___tx})<<20
38564     00 00 F0 09 | 	long	(159 {__system___rx})<<20
38568     00 00 00 00 | 	byte	$00, $00, $00, $00
3856c     00 00 00 0A | 	long	(160 {__system___rxtxioctl_0631})<<20
38570     00 00 10 0A | 	long	(161 {__system____dummy_flush_0632})<<20
38574     00 00 00 00 
38578     00 00 00 00 | 	byte	$00[8]
3857c     01 00 00 00 
38580     06 00 00 00 
38584     00 00 00 00 
38588     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3858c     00 00 00 00 
38590     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38594     00 00 E0 09 | 	long	(158 {__system___tx})<<20
38598     00 00 F0 09 | 	long	(159 {__system___rx})<<20
3859c     00 00 00 00 | 	byte	$00, $00, $00, $00
385a0     00 00 00 0A | 	long	(160 {__system___rxtxioctl_0631})<<20
385a4     00 00 10 0A | 	long	(161 {__system____dummy_flush_0632})<<20
385a8     00 00 00 00 
      ...             
38718     00 00 00 00 
3871c     00 00 00 00 | 	byte	$00[376]
38720     24 87 03 00 | 	long	@@@__system__dat_ + 1844
38724     00 00 00 00 
38728     00 00 00 00 
3872c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38730                 | 	alignl
38730                 | _fatfs_cc_dat_
38730     C7 00 FC 00 
38734     E9 00 E2 00 
38738     E4 00 E0 00 
3873c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
38740     EA 00 EB 00 
38744     E8 00 EF 00 
38748     EE 00 EC 00 
3874c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
38750     C9 00 E6 00 
38754     C6 00 F4 00 
38758     F6 00 F2 00 
3875c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
38760     FF 00 D6 00 
38764     DC 00 F8 00 
38768     A3 00 D8 00 
3876c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
38770     E1 00 ED 00 
38774     F3 00 FA 00 
38778     F1 00 D1 00 
3877c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
38780     BF 00 AE 00 
38784     AC 00 BD 00 
38788     BC 00 A1 00 
3878c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
38790     91 25 92 25 
38794     93 25 02 25 
38798     24 25 C1 00 
3879c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
387a0     A9 00 63 25 
387a4     51 25 57 25 
387a8     5D 25 A2 00 
387ac     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
387b0     14 25 34 25 
387b4     2C 25 1C 25 
387b8     00 25 3C 25 
387bc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
387c0     5A 25 54 25 
387c4     69 25 66 25 
387c8     60 25 50 25 
387cc     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
387d0     F0 00 D0 00 
387d4     CA 00 CB 00 
387d8     C8 00 31 01 
387dc     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
387e0     CF 00 18 25 
387e4     0C 25 88 25 
387e8     84 25 A6 00 
387ec     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
387f0     D3 00 DF 00 
387f4     D4 00 D2 00 
387f8     F5 00 D5 00 
387fc     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
38800     DE 00 DA 00 
38804     DB 00 D9 00 
38808     FD 00 DD 00 
3880c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
38810     AD 00 B1 00 
38814     17 20 BE 00 
38818     B6 00 A7 00 
3881c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
38820     B0 00 A8 00 
38824     B7 00 B9 00 
38828     B3 00 B2 00 
3882c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
38830     61 00 1A 03 
38834     E0 00 17 03 
38838     F8 00 07 03 
3883c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
38840     78 01 00 01 
38844     30 01 32 01 
38848     06 01 39 01 
3884c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
38850     2E 01 79 01 
38854     06 01 80 01 
38858     4D 00 43 02 
3885c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
38860     82 01 84 01 
38864     84 01 86 01 
38868     87 01 87 01 
3886c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
38870     8B 01 8B 01 
38874     8D 01 8E 01 
38878     8F 01 90 01 
3887c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
38880     93 01 94 01 
38884     F6 01 96 01 
38888     97 01 98 01 
3888c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
38890     9B 01 9C 01 
38894     9D 01 20 02 
38898     9F 01 A0 01 
3889c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
388a0     A2 01 A4 01 
388a4     A4 01 A6 01 
388a8     A7 01 A7 01 
388ac     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
388b0     AB 01 AC 01 
388b4     AC 01 AE 01 
388b8     AF 01 AF 01 
388bc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
388c0     B3 01 B3 01 
388c4     B5 01 B5 01 
388c8     B7 01 B8 01 
388cc     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
388d0     BB 01 BC 01 
388d4     BC 01 BE 01 
388d8     F7 01 C0 01 
388dc     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
388e0     C3 01 C4 01 
388e4     C5 01 C4 01 
388e8     C7 01 C8 01 
388ec     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
388f0     CB 01 CA 01 
388f4     CD 01 10 01 
388f8     DD 01 01 00 
388fc     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
38900     12 01 F3 01 
38904     03 00 F1 01 
38908     F4 01 F4 01 
3890c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
38910     22 02 12 01 
38914     3A 02 09 00 
38918     65 2C 3B 02 
3891c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
38920     66 2C 3F 02 
38924     40 02 41 02 
38928     41 02 46 02 
3892c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
38930     40 00 81 01 
38934     86 01 55 02 
38938     89 01 8A 01 
3893c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
38940     5A 02 90 01 
38944     5C 02 5D 02 
38948     5E 02 5F 02 
3894c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
38950     62 02 94 01 
38954     64 02 65 02 
38958     66 02 67 02 
3895c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
38960     6A 02 62 2C 
38964     6C 02 6D 02 
38968     6E 02 9C 01 
3896c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
38970     9D 01 73 02 
38974     74 02 9F 01 
38978     76 02 77 02 
3897c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
38980     7A 02 7B 02 
38984     7C 02 64 2C 
38988     7E 02 7F 02 
3898c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
38990     82 02 A9 01 
38994     84 02 85 02 
38998     86 02 87 02 
3899c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
389a0     B1 01 B2 01 
389a4     45 02 8D 02 
389a8     8E 02 8F 02 
389ac     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
389b0     B7 01 7B 03 
389b4     03 00 FD 03 
389b8     FE 03 FF 03 
389bc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
389c0     86 03 88 03 
389c4     89 03 8A 03 
389c8     B1 03 11 03 
389cc     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
389d0     A3 03 A3 03 
389d4     C4 03 08 03 
389d8     CC 03 03 00 
389dc     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
389e0     8F 03 D8 03 
389e4     18 01 F2 03 
389e8     0A 00 F9 03 
389ec     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
389f0     F5 03 F6 03 
389f4     F7 03 F7 03 
389f8     F9 03 FA 03 
389fc     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
38a00     20 03 50 04 
38a04     10 07 60 04 
38a08     22 01 8A 04 
38a0c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
38a10     0E 01 CF 04 
38a14     01 00 C0 04 
38a18     D0 04 44 01 
38a1c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
38a20     00 00 7D 1D 
38a24     01 00 63 2C 
38a28     00 1E 96 01 
38a2c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
38a30     00 1F 08 06 
38a34     10 1F 06 06 
38a38     20 1F 08 06 
38a3c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
38a40     40 1F 06 06 
38a44     51 1F 07 00 
38a48     59 1F 52 1F 
38a4c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
38a50     5D 1F 56 1F 
38a54     5F 1F 60 1F 
38a58     08 06 70 1F 
38a5c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
38a60     BB 1F C8 1F 
38a64     C9 1F CA 1F 
38a68     CB 1F DA 1F 
38a6c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
38a70     F9 1F EA 1F 
38a74     EB 1F FA 1F 
38a78     FB 1F 80 1F 
38a7c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
38a80     08 06 A0 1F 
38a84     08 06 B0 1F 
38a88     04 00 B8 1F 
38a8c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
38a90     BC 1F CC 1F 
38a94     01 00 C3 1F 
38a98     D0 1F 02 06 
38a9c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
38aa0     E5 1F 01 00 
38aa4     EC 1F F3 1F 
38aa8     01 00 FC 1F 
38aac     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
38ab0     32 21 70 21 
38ab4     10 02 84 21 
38ab8     01 00 83 21 
38abc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
38ac0     30 2C 2F 04 
38ac4     60 2C 02 01 
38ac8     67 2C 06 01 
38acc     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
38ad0     80 2C 64 01 
38ad4     00 2D 26 08 
38ad8     41 FF 1A 03 
38adc     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
38ae0     05 07 09 0E 
38ae4     10 12 14 16 
38ae8     18 1C 1E 43 
38aec     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
38af0     41 41 43 45 
38af4     45 45 49 49 
38af8     49 41 41 45 
38afc     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
38b00     4F 55 55 59 
38b04     4F 55 4F 9C 
38b08     4F 9E 9F 41 
38b0c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
38b10     A5 A6 A7 A8 
38b14     A9 AA AB AC 
38b18     AD AE AF B0 
38b1c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
38b20     41 41 41 B8 
38b24     B9 BA BB BC 
38b28     BD BE BF C0 
38b2c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
38b30     C5 41 41 C8 
38b34     C9 CA CB CC 
38b38     CD CE CF D1 
38b3c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
38b40     49 49 49 49 
38b44     D9 DA DB DC 
38b48     DD 49 DF 4F 
38b4c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
38b50     4F E6 E8 E8 
38b54     55 55 55 59 
38b58     59 EE EF F0 
38b5c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
38b60     F5 F6 F7 F8 
38b64     F9 FA FB FC 
38b68     FD FE FF 00 
38b6c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
38b70     00 00 00 00 | 	byte	$00, $00, $00, $00
38b74     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_close})<<20
38b78     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_read})<<20
38b7c     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_write})<<20
38b80     00 00 00 09 | 	long	(144 {_fatfs_cc_v_lseek})<<20
38b84     00 00 10 09 | 	long	(145 {_fatfs_cc_v_ioctl})<<20
38b88     00 00 20 0A | 	long	(162 {_fatfs_cc_v_flush})<<20
38b8c     00 00 00 00 
38b90     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38b94     00 00 20 09 | 	long	(146 {_fatfs_cc_v_open})<<20
38b98     00 00 30 09 | 	long	(147 {_fatfs_cc_v_creat})<<20
38b9c     00 00 40 09 | 	long	(148 {_fatfs_cc_v_opendir})<<20
38ba0     00 00 50 09 | 	long	(149 {_fatfs_cc_v_closedir})<<20
38ba4     00 00 60 09 | 	long	(150 {_fatfs_cc_v_readdir})<<20
38ba8     00 00 70 09 | 	long	(151 {_fatfs_cc_v_stat})<<20
38bac     00 00 80 09 | 	long	(152 {_fatfs_cc_v_mkdir})<<20
38bb0     00 00 90 09 | 	long	(153 {_fatfs_cc_v_rmdir})<<20
38bb4     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_remove})<<20
38bb8     00 00 B0 09 | 	long	(155 {_fatfs_cc_v_rename})<<20
38bbc     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_init})<<20
38bc0     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_deinit})<<20
38bc4     FF FF FF FF 
38bc8     1F 00 00 00 
38bcc     1C 00 00 00 
38bd0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
38bd4     1E 00 00 00 
38bd8     1F 00 00 00 
38bdc     1E 00 00 00 
38be0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
38be4     1F 00 00 00 
38be8     1E 00 00 00 
38bec     1F 00 00 00 
38bf0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
38bf4     1F 00 00 00 
38bf8     00 00 00 00 
38bfc     1F 00 00 00 
38c00     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
38c04     5A 00 00 00 
38c08     78 00 00 00 
38c0c     97 00 00 00 
38c10     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
38c14     D4 00 00 00 
38c18     F3 00 00 00 
38c1c     11 01 00 00 
38c20     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
38c24     4E 01 00 00 
38c28     6D 01 00 00 
38c2c     FF FF FF FF 
38c30     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
38c34     00 00 00 00 
      ...             
38c4c     00 00 00 00 
38c50     00 00 00 00 | 	byte	$00[32]
38c54     72 8C 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
38c58     76 8C 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
38c5c     00 00 00 00 
38c60     00 00 00 00 
38c64     00 00 00 00 
38c68     00 00 00 00 
38c6c     00 00       | 	byte	$00[18]
38c6e     3F 3F 3F 00 
38c72     55 43 54 00 
38c76     55 43 54 00 
38c7a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
38c7e     00 00 00 00 
38c82     00 00 00    | 	byte	$00[7]
38c85     CA 9A 3B 00 
38c89     00 00 00 01 
38c8d     01 01 01 01 
38c91     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
38c95     91 11 11 11 
38c99     11 01 01 01 
38c9d     01 01 01 01 
38ca1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
38ca5     01 01 01 01 
38ca9     01 01 01    | 	byte	$01[7]
38cac     90 20 20 20 
38cb0     20 20 20 20 
38cb4     20 20 20 20 
38cb8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
38cbc     42 42 42 42 
38cc0     42 42 42 42 
38cc4     42 42       | 	byte	$42[10]
38cc6     20 20 20 20 
38cca     20 20 20    | 	byte	$20[7]
38ccd     44 44 44 44 
38cd1     44 44       | 	byte	$44[6]
38cd3     04 04 04 04 
38cd7     04 04 04 04 
38cdb     04 04 04 04 
38cdf     04 04 04 04 
38ce3     04 04 04 04 | 	byte	$04[20]
38ce7     20 20 20 20 
38ceb     20 20       | 	byte	$20[6]
38ced     48 48 48 48 
38cf1     48 48       | 	byte	$48[6]
38cf3     08 08 08 08 
38cf7     08 08 08 08 
38cfb     08 08 08 08 
38cff     08 08 08 08 
38d03     08 08 08 08 | 	byte	$08[20]
38d07     20 20 20 20 
38d0b     01 00 00 00 
38d0f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
38d10                 | __methodtable__
38d10     68 83 01 00 | 	long	@_do_no_command
38d14     38 FA 00 00 | 	long	@_do_plus
38d18     24 FF 00 00 | 	long	@_do_minus
38d1c     EC 03 01 00 | 	long	@_do_or
38d20     04 05 01 00 | 	long	@_do_mul
38d24     90 0A 01 00 | 	long	@_do_fdiv
38d28     D4 02 01 00 | 	long	@_do_and
38d2c     70 08 01 00 | 	long	@_do_div
38d30     58 0C 01 00 | 	long	@_do_mod
38d34     78 0E 01 00 | 	long	@_do_shl
38d38     90 0F 01 00 | 	long	@_do_shr
38d3c     A8 10 01 00 | 	long	@_do_power
38d40     B8 ED 00 00 | 	long	@_do_getvar
38d44     1C A6 00 00 | 	long	@_do_push
38d48     B8 E7 00 00 | 	long	@_do_assign
38d4c     CC 54 01 00 | 	long	@_do_cls
38d50     A8 E1 00 00 | 	long	@_do_new
38d54     70 55 01 00 | 	long	@_do_plot
38d58     40 56 01 00 | 	long	@_do_draw
38d5c     B4 5F 01 00 | 	long	@_do_print
38d60     AC 58 01 00 | 	long	@_do_circle
38d64     34 57 01 00 | 	long	@_do_fcircle
38d68     24 5A 01 00 | 	long	@_do_box
38d6c     CC 5D 01 00 | 	long	@_do_frame
38d70     38 55 01 00 | 	long	@_do_color
38d74     C8 83 00 00 | 	long	@_do_for
38d78     3C 86 00 00 | 	long	@_do_next
38d7c     0C DF 00 00 | 	long	@_do_list
38d80     74 B9 00 00 | 	long	@_do_run
38d84     74 E6 00 00 | 	long	@_do_error
38d88     70 E3 00 00 | 	long	@_do_fast_goto
38d8c     60 E4 00 00 | 	long	@_do_find_goto
38d90     70 E6 00 00 | 	long	@_do_slow_goto
38d94     84 7F 01 00 | 	long	@_do_nothing
38d98     60 AC 00 00 | 	long	@_test_csave
38d9c     C4 AF 00 00 | 	long	@_do_save
38da0     C0 B3 00 00 | 	long	@_do_load
38da4     60 6E 01 00 | 	long	@_do_pinwrite
38da8     FC 78 01 00 | 	long	@_do_waitms
38dac     38 7A 01 00 | 	long	@_do_waitvbl
38db0     D8 7D 01 00 | 	long	@_do_if
38db4     BC 7E 01 00 | 	long	@_do_else
38db8     70 12 01 00 | 	long	@_do_eq
38dbc     E8 20 01 00 | 	long	@_do_ge
38dc0     C0 25 01 00 | 	long	@_do_le
38dc4     48 17 01 00 | 	long	@_do_gt
38dc8     20 1C 01 00 | 	long	@_do_lt
38dcc     98 2A 01 00 | 	long	@_do_ne
38dd0     C0 30 01 00 | 	long	@_do_rnd
38dd4     88 7F 01 00 | 	long	@_do_brun
38dd8     54 82 01 00 | 	long	@_do_beep
38ddc     68 7A 01 00 | 	long	@_do_dir
38de0     7C 64 01 00 | 	long	@_do_paper
38de4     04 65 01 00 | 	long	@_do_ink
38de8     A0 65 01 00 | 	long	@_do_font
38dec     1C 66 01 00 | 	long	@_do_mode
38df0     C0 81 01 00 | 	long	@_do_mouse
38df4     64 54 01 00 | 	long	@_do_gettime
38df8     F4 81 01 00 | 	long	@_do_cursor
38dfc     28 82 01 00 | 	long	@_do_click
38e00     F0 51 01 00 | 	long	@_do_mousex
38e04     34 52 01 00 | 	long	@_do_mousey
38e08     BC 52 01 00 | 	long	@_do_mousek
38e0c     78 52 01 00 | 	long	@_do_mousew
38e10     94 33 01 00 | 	long	@_do_sin
38e14     38 49 01 00 | 	long	@_do_stick
38e18     BC 4A 01 00 | 	long	@_do_strig
38e1c     04 51 01 00 | 	long	@_do_sprite
38e20     90 4D 01 00 | 	long	@_do_defsprite
38e24     40 4C 01 00 | 	long	@_do_getpixel
38e28     44 7A 01 00 | 	long	@_do_waitclock
38e2c     74 83 01 00 | 	long	@_do_negative
38e30     00 53 01 00 | 	long	@_do_rdpin
38e34     6C 53 01 00 | 	long	@_do_rqpin
38e38     E0 53 01 00 | 	long	@_do_pinread
38e3c     F8 70 01 00 | 	long	@_do_wrpin
38e40     78 71 01 00 | 	long	@_do_wxpin
38e44     F8 71 01 00 | 	long	@_do_wypin
38e48     E8 6E 01 00 | 	long	@_do_pinfloat
38e4c     28 6F 01 00 | 	long	@_do_pinlo
38e50     68 6F 01 00 | 	long	@_do_pinhi
38e54     E8 6F 01 00 | 	long	@_do_pinstart
38e58     A8 6F 01 00 | 	long	@_do_pintoggle
38e5c     78 72 01 00 | 	long	@_do_position
38e60     F0 42 01 00 | 	long	@_do_cos
38e64     10 44 01 00 | 	long	@_do_tan
38e68     34 47 01 00 | 	long	@_do_atn
38e6c     1C 45 01 00 | 	long	@_do_asin
38e70     28 46 01 00 | 	long	@_do_acos
38e74     48 48 01 00 | 	long	@_do_sqr
38e78     0C 5C 01 00 | 	long	@_do_fill
38e7c     14 D5 00 00 | 	long	@_do_defsnd
38e80     FC BC 00 00 | 	long	@_do_defenv
38e84     E0 7E 01 00 | 	long	@_do_rad
38e88     08 7F 01 00 | 	long	@_do_deg
38e8c     30 7F 01 00 | 	long	@_do_int
38e90     A4 C9 00 00 | 	long	@_do_play
38e94     C0 6B 01 00 | 	long	@_do_setdelay
38e98     18 6B 01 00 | 	long	@_do_setenv
38e9c     68 6C 01 00 | 	long	@_do_setlen
38ea0     B8 6D 01 00 | 	long	@_do_setpan
38ea4     10 6D 01 00 | 	long	@_do_setvol
38ea8     C8 69 01 00 | 	long	@_do_setwave
38eac     70 6A 01 00 | 	long	@_do_setsustain
38eb0     7C D4 00 00 | 	long	@_do_release
38eb4     88 32 01 00 | 	long	@_do_getenvsustain
38eb8     00 73 01 00 | 	long	@_do_poke
38ebc     D8 73 01 00 | 	long	@_do_dpoke
38ec0     B0 74 01 00 | 	long	@_do_lpoke
38ec4     88 75 01 00 | 	long	@_do_peek
38ec8     38 76 01 00 | 	long	@_do_dpeek
38ecc     E4 76 01 00 | 	long	@_do_lpeek
38ed0     F4 77 01 00 | 	long	@_do_adr
38ed4     90 77 01 00 | 	long	@_do_fre
38ed8     F8 77 01 00 | 	long	@_do_getnotevalue
38edc     70 F3 00 00 | 	long	@_do_getaddr
38ee0     60 F7 00 00 | 	long	@_do_inkey
38ee4     24 84 01 00 | 	long	@_do_abs
38ee8     30 40 01 00 | 	long	@_do_hex
38eec     90 41 01 00 | 	long	@_do_bin
38ef0     2C 3D 01 00 | 	long	@_do_val
38ef4     30 3C 01 00 | 	long	@_do_chr
38ef8     6C 39 01 00 | 	long	@_do_asc
38efc     E8 37 01 00 | 	long	@_do_left
38f00     64 36 01 00 | 	long	@_do_right
38f04     A0 34 01 00 | 	long	@_do_mid
38f08     C4 3A 01 00 | 	long	@_do_len
38f0c     80 CF 01 00 | 	long	@_hg010b_spin2_putchar
38f10     14 DA 02 00 | 	long	@__struct___bas_wrap_sender_tx
38f14     58 DA 02 00 | 	long	@__struct___bas_wrap_sender_rx
38f18     A0 DA 02 00 | 	long	@__struct___bas_wrap_sender_close
38f1c     44 D9 02 00 | 	long	@__struct__s_vfs_file_t_putchar
38f20     B4 D9 02 00 | 	long	@__struct__s_vfs_file_t_getchar
38f24     FC D8 02 00 | 	long	@___strs_cl_pfunc
38f28     58 38 02 00 | 	long	@__system____root_opendir
38f2c     F4 38 02 00 | 	long	@__system____root_closedir
38f30     70 38 02 00 | 	long	@__system____root_readdir
38f34     FC 38 02 00 | 	long	@__system____root_stat
38f38     84 31 02 00 | 	long	@__system____default_putc
38f3c     08 31 02 00 | 	long	@__system____default_getc
38f40     2C 32 02 00 | 	long	@__system____default_flush
38f44     00 C4 02 00 | 	long	@_fatfs_cc_v_close
38f48     1C C8 02 00 | 	long	@_fatfs_cc_v_read
38f4c     30 C9 02 00 | 	long	@_fatfs_cc_v_write
38f50     10 CA 02 00 | 	long	@_fatfs_cc_v_lseek
38f54     98 CA 02 00 | 	long	@_fatfs_cc_v_ioctl
38f58     EC CA 02 00 | 	long	@_fatfs_cc_v_open
38f5c     64 C3 02 00 | 	long	@_fatfs_cc_v_creat
38f60     44 C4 02 00 | 	long	@_fatfs_cc_v_opendir
38f64     B8 C4 02 00 | 	long	@_fatfs_cc_v_closedir
38f68     F8 C4 02 00 | 	long	@_fatfs_cc_v_readdir
38f6c     2C C6 02 00 | 	long	@_fatfs_cc_v_stat
38f70     AC CA 02 00 | 	long	@_fatfs_cc_v_mkdir
38f74     CC CA 02 00 | 	long	@_fatfs_cc_v_rmdir
38f78     BC CA 02 00 | 	long	@_fatfs_cc_v_remove
38f7c     DC CA 02 00 | 	long	@_fatfs_cc_v_rename
38f80     FC CB 02 00 | 	long	@_fatfs_cc_v_init
38f84     04 CC 02 00 | 	long	@_fatfs_cc_v_deinit
38f88     30 E6 01 00 | 	long	@__system___tx
38f8c     70 E6 01 00 | 	long	@__system___rx
38f90     68 44 02 00 | 	long	@__system___rxtxioctl_0631
38f94     C0 44 02 00 | 	long	@__system____dummy_flush_0632
38f98     CC CB 02 00 | 	long	@_fatfs_cc_v_flush
38f9c                 | __heap_base
38f9c     00 00 00 00 
      ...             
67d9c     00 00 00 00 
67da0     00 00 00 00 | 	long	0[48002]
67da4                 | objmem
67da4     00 00 00 00 
      ...             
774b8     00 00 00 00 
774bc     00 00 00 00 | 	long	0[15815]
774c0                 | stackspace
774c0     00 00 00 00 | 	long	0[1]
774c4 100             | 	org	COG_BSS_START
774c4 100             | _var01
774c4 100             | 	res	1
774c4 101             | _var02
774c4 101             | 	res	1
774c4 102             | _var03
774c4 102             | 	res	1
774c4 103             | _var04
774c4 103             | 	res	1
774c4 104             | _var05
774c4 104             | 	res	1
774c4 105             | _var06
774c4 105             | 	res	1
774c4 106             | _var07
774c4 106             | 	res	1
774c4 107             | _var08
774c4 107             | 	res	1
774c4 108             | _var09
774c4 108             | 	res	1
774c4 109             | arg01
774c4 109             | 	res	1
774c4 10a             | arg02
774c4 10a             | 	res	1
774c4 10b             | arg03
774c4 10b             | 	res	1
774c4 10c             | arg04
774c4 10c             | 	res	1
774c4 10d             | arg05
774c4 10d             | 	res	1
774c4 10e             | arg06
774c4 10e             | 	res	1
774c4 10f             | local01
774c4 10f             | 	res	1
774c4 110             | local02
774c4 110             | 	res	1
774c4 111             | local03
774c4 111             | 	res	1
774c4 112             | local04
774c4 112             | 	res	1
774c4 113             | local05
774c4 113             | 	res	1
774c4 114             | local06
774c4 114             | 	res	1
774c4 115             | local07
774c4 115             | 	res	1
774c4 116             | local08
774c4 116             | 	res	1
774c4 117             | local09
774c4 117             | 	res	1
774c4 118             | local10
774c4 118             | 	res	1
774c4 119             | local11
774c4 119             | 	res	1
774c4 11a             | local12
774c4 11a             | 	res	1
774c4 11b             | local13
774c4 11b             | 	res	1
774c4 11c             | local14
774c4 11c             | 	res	1
774c4 11d             | local15
774c4 11d             | 	res	1
774c4 11e             | local16
774c4 11e             | 	res	1
774c4 11f             | local17
774c4 11f             | 	res	1
774c4 120             | local18
774c4 120             | 	res	1
774c4 121             | local19
774c4 121             | 	res	1
774c4 122             | local20
774c4 122             | 	res	1
774c4 123             | local21
774c4 123             | 	res	1
774c4 124             | local22
774c4 124             | 	res	1
774c4 125             | local23
774c4 125             | 	res	1
774c4 126             | local24
774c4 126             | 	res	1
774c4 127             | local25
774c4 127             | 	res	1
774c4 128             | local26
774c4 128             | 	res	1
774c4 129             | local27
774c4 129             | 	res	1
774c4 12a             | local28
774c4 12a             | 	res	1
774c4 12b             | local29
774c4 12b             | 	res	1
774c4 12c             | local30
774c4 12c             | 	res	1
774c4 12d             | local31
774c4 12d             | 	res	1
774c4 12e             | local32
774c4 12e             | 	res	1
774c4 12f             | local33
774c4 12f             | 	res	1
774c4 130             | local34
774c4 130             | 	res	1
774c4 131             | local35
774c4 131             | 	res	1
774c4 132             | muldiva_
774c4 132             | 	res	1
774c4 133             | muldivb_
774c4 133             | 	res	1
774c4 134             | 	fit	480
774c4 134             | 
