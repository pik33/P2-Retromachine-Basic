00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic051.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 7A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3C F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 C4 10 A2 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 92 62 FD | 	cogid	arg01
00714 0c4 03 92 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 65 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 7B 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 93 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 7A 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 96 56 F0 |         shr	arg03, #1 wc
00768 0d9 49 95 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 92 06 C1 |  if_c   add	arg01, #1
00770 0db 00 94 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 96 56 F0 |         shr	arg03, #1 wc
00778 0dd 49 95 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 92 06 C1 |  if_c   add	arg01, #2
00780 0df 4A 95 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 49 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 96 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 4B 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 94 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 A7 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F A7 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 88 11 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 62 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 87 0F 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 88 0F 13 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 62 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 10 63 FD |        getqx   muldivb_                       'get quotient
00804 100 19 0E 63 FD |        getqy   muldiva_                       'get remainder
00808 101 87 0F 83 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 62 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 88 11 83 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 7A 06 F6 |     mov result1, #0
00820 107 00 7C 06 F6 |     mov result2, #0
00824 108 49 5D 02 F6 |     mov abortchain, arg01
00828 109 49 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 92 06 F1 |     add arg01, #4
00830 10b 49 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 92 06 F1 |     add arg01, #4
00838 10d 49 65 62 FC |     wrlong objptr, arg01
0083c 10e 04 92 06 F1 |     add arg01, #4
00840 10f 49 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 4A 93 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 49 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 92 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 92 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 4A 7B 02 F6 |     mov result1, arg02
0087c 11e 01 7C 06 F6 |     mov result2, #1
00880 11f 49 95 02 FB |     rdlong arg02, arg01
00884 120 04 92 06 F1 |     add arg01, #4
00888 121 49 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 92 06 F1 |     add arg01, #4
00890 123 49 65 02 FB |     rdlong objptr, arg01
00894 124 04 92 06 F1 |     add arg01, #4
00898 125 49 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 92 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 96 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c E0 F6 03 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d 7C F3 03 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | entryptr__
008c0 12f 04 04 00 00 | 	long	@entry
008c4 130             | itmp1_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp2_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | objptr
008cc 132 E8 6D 05 00 | 	long	@objmem
008d0 133             | ptr__Audio2_004_spin2_dat__
008d0 133 C4 E2 03 00 | 	long	@_Audio2_004_spin2_dat_
008d4 134             | ptr___system__dat__
008d4 134 A4 E6 03 00 | 	long	@__system__dat_
008d8 135             | ptr__dat__
008d8 135 94 37 03 00 | 	long	@_dat_
008dc 136             | ptr__fatfs_cc_dat__
008dc 136 EC ED 03 00 | 	long	@_fatfs_cc_dat_
008e0 137             | ptr__hg010b_spin2_dat__
008e0 137 FC 68 03 00 | 	long	@_hg010b_spin2_dat_
008e4 138             | ptr__housekeeper_
008e4 138 E4 15 00 00 | 	long	@_housekeeper
008e8 139             | ptr__psram16drv_spin2_dat__
008e8 139 AC A8 03 00 | 	long	@_psram16drv_spin2_dat_
008ec 13a             | ptr__psram_spin2_dat__
008ec 13a 64 A6 03 00 | 	long	@_psram_spin2_dat_
008f0 13b             | ptr__usbnew_spin2_dat__
008f0 13b 3C B8 03 00 | 	long	@_usbnew_spin2_dat_
008f4 13c             | ptr_stackspace_
008f4 13c E4 16 06 00 | 	long	@stackspace
008f8 13d             | result1
008f8 13d 00 00 00 00 | 	long	0
008fc 13e             | result2
008fc 13e 01 00 00 00 | 	long	1
00900 13f             | result3
00900 13f 02 00 00 00 | 	long	2
00904 140             | COG_BSS_START
00904 140             | 	fit	480
00904                 | 	orgh
00904                 | hubentry
00904                 | 
00904                 | ' 
00904                 | ' '-------------------------------------------------------------------------------------------------------- 
00904                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00904                 | ' '--------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' '                     A full screen editor for programming and entering data
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' function edit() as string
00904                 | _edit
00904     1B CA 05 F6 | 	mov	COUNT_, #27
00908     E8 00 A0 FD | 	call	#pushregs_
0090c     00 A6 06 F6 | 	mov	local01, #0
00910     00 A8 06 F6 | 	mov	local02, #0
00914     00 AA 06 F6 | 	mov	local03, #0
00918     00 AC 06 F6 | 	mov	local04, #0
0091c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0091c                 | ' do
0091c                 | LR__0001
0091c     01 92 06 F6 | 	mov	arg01, #1
00920     14 21 B2 FD | 	call	#_hg010b_spin2_waitvbl
00924     7C 35 B2 FD | 	call	#_usbnew_spin2_get_key
00928     3D AF 02 F6 | 	mov	local05, result1
0092c                 | '   return hkbd_led_rep
0092c     13 00 00 FF 
00930     E0 77 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00934     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00938     13 00 00 FF 
0093c     E0 77 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00940     54 00 00 FF 
00944     BC 64 06 F1 | 	add	objptr, ##43196
00948     32 7B 62 FC | 	wrlong	result1, objptr
0094c     54 00 00 FF 
00950     BC 64 86 F1 | 	sub	objptr, ##43196
00954                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)
00954     01 AE 16 F2 | 	cmp	local05, #1 wc
00958     88 00 90 CD |  if_b	jmp	#LR__0002
0095c     04 AE 16 F2 | 	cmp	local05, #4 wc
00960     80 00 90 3D |  if_ae	jmp	#LR__0002
00964     52 00 00 FF 
00968     E0 64 06 F1 | 	add	objptr, ##42208
0096c     32 B1 02 FB | 	rdlong	local06, objptr
00970     52 00 00 FF 
00974     E0 64 86 F1 | 	sub	objptr, ##42208
00978     01 B0 0E F2 | 	cmp	local06, #1 wz
0097c     64 00 90 5D |  if_ne	jmp	#LR__0002
00980     35 95 02 F6 | 	mov	arg02, ptr__dat__
00984     04 00 00 FF 
00988     A4 94 06 F1 | 	add	arg02, ##2212
0098c     2B B2 06 F6 | 	mov	local07, #43
00990     0C B4 C6 F9 | 	decod	local08, #12
00994     03 00 00 FF 
00998     DE B6 06 F6 | 	mov	local09, ##1758
0099c     00 B8 06 F6 | 	mov	local10, #0
009a0     2C BB 06 F6 | 	mov	local11, #300
009a4     07 92 06 F6 | 	mov	arg01, #7
009a8     2B 96 06 F6 | 	mov	arg03, #43
009ac     0C 98 C6 F9 | 	decod	arg04, #12
009b0     03 00 00 FF 
009b4     DE 9A 06 F6 | 	mov	arg05, ##1758
009b8     00 9C 06 F6 | 	mov	arg06, #0
009bc     2C 9F 06 F6 | 	mov	arg07, #300
009c0     0B 00 00 FF 
009c4     CC 64 06 F1 | 	add	objptr, ##5836
009c8     28 3C B2 FD | 	call	#_Audio2_004_spin2_play16
009cc     07 B0 06 F6 | 	mov	local06, #7
009d0                 | ' 
009d0                 | ' base2:=@channel0[0]+64*channel
009d0     32 BD 02 F6 | 	mov	local12, objptr
009d4                 | ' word[base2+32]:=0
009d4     EC BD 06 F1 | 	add	local12, #492
009d8     5E 01 58 FC | 	wrword	#0, local12
009dc     0B 00 00 FF 
009e0     CC 64 86 F1 | 	sub	objptr, ##5836
009e4                 | LR__0002
009e4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
009e4     04 AE 16 F2 | 	cmp	local05, #4 wc
009e8     20 00 90 CD |  if_b	jmp	#LR__0003
009ec     00 00 40 FF 
009f0     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
009f4     57 B1 02 C6 |  if_b	mov	local06, local05
009f8     58 B1 E2 C8 |  if_b	getbyte	local06, local06, #0
009fc     E0 B0 16 C2 |  if_b	cmp	local06, #224 wc
00a00     57 AB 02 C6 |  if_b	mov	local03, local05
00a04     01 A6 06 C6 |  if_b	mov	local01, #1
00a08     55 AD 02 C6 |  if_b	mov	local04, local03
00a0c                 | LR__0003
00a0c                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00a0c     00 00 40 FF 
00a10     01 AE 16 F2 | 	cmp	local05, ##-2147483647 wc
00a14     00 A8 06 36 |  if_ae	mov	local02, #0
00a18     00 A6 06 36 |  if_ae	mov	local01, #0
00a1c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00a1c     00 AE 0E F2 | 	cmp	local05, #0 wz
00a20     01 A6 0E A2 |  if_e	cmp	local01, #1 wz
00a24     01 A8 06 A1 |  if_e	add	local02, #1
00a28                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00a28     00 00 40 FF 
00a2c     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
00a30     19 A8 0E C2 |  if_b	cmp	local02, #25 wz
00a34     55 AD 02 86 |  if_c_and_z	mov	local04, local03
00a38     15 A8 06 86 |  if_c_and_z	mov	local02, #21
00a3c                 | ' 
00a3c                 | ' '' there is a key pressed and it needs to be processed
00a3c                 | ' 
00a3c                 | ' if key3<>0 then
00a3c     00 AC 0E F2 | 	cmp	local04, #0 wz
00a40     D8 FE 9F AD |  if_e	jmp	#LR__0001
00a44                 | '   if keyclick=1 then audio.play16(7,keyclick_spl,43,4096,spl_len,spl_len,0) ' make a click
00a44     52 00 00 FF 
00a48     E0 64 06 F1 | 	add	objptr, ##42208
00a4c     32 B1 02 FB | 	rdlong	local06, objptr
00a50     52 00 00 FF 
00a54     E0 64 86 F1 | 	sub	objptr, ##42208
00a58     01 B0 0E F2 | 	cmp	local06, #1 wz
00a5c     50 00 90 5D |  if_ne	jmp	#LR__0004
00a60     54 00 00 FF 
00a64     80 64 06 F1 | 	add	objptr, ##43136
00a68     32 95 02 FB | 	rdlong	arg02, objptr
00a6c     2B B2 06 F6 | 	mov	local07, #43
00a70     0C B4 C6 F9 | 	decod	local08, #12
00a74     04 64 86 F1 | 	sub	objptr, #4
00a78     32 B9 02 FB | 	rdlong	local10, objptr
00a7c     5C B7 02 F6 | 	mov	local09, local10
00a80     00 BA 06 F6 | 	mov	local11, #0
00a84     07 92 06 F6 | 	mov	arg01, #7
00a88     2B 96 06 F6 | 	mov	arg03, #43
00a8c     0C 98 C6 F9 | 	decod	arg04, #12
00a90     5B 9B 02 F6 | 	mov	arg05, local09
00a94     5C 9D 02 F6 | 	mov	arg06, local10
00a98     00 9E 06 F6 | 	mov	arg07, #0
00a9c     48 00 00 FF 
00aa0     B0 65 86 F1 | 	sub	objptr, ##37296
00aa4     4C 3B B2 FD | 	call	#_Audio2_004_spin2_play16
00aa8     0B 00 00 FF 
00aac     CC 64 86 F1 | 	sub	objptr, ##5836
00ab0                 | LR__0004
00ab0     56 93 02 F6 | 	mov	arg01, local04
00ab4     68 05 B2 FD | 	call	#_scantochar
00ab8     3D BF 02 F6 | 	mov	local13, result1
00abc                 | '   if leds and 2 = 2 then 						' caps lock
00abc     54 00 00 FF 
00ac0     BC 64 06 F1 | 	add	objptr, ##43196
00ac4     32 C1 02 FB | 	rdlong	local14, objptr
00ac8     54 00 00 FF 
00acc     BC 64 86 F1 | 	sub	objptr, ##43196
00ad0     60 B1 0A F6 | 	mov	local06, local14 wz
00ad4     4C 00 90 AD |  if_e	jmp	#LR__0012
00ad8                 | '     if key4>96 andalso key4<123 then                 
00ad8     61 BE 16 F2 | 	cmp	local13, #97 wc
00adc     0C 00 90 CD |  if_b	jmp	#LR__0005
00ae0     7B BE 16 F2 | 	cmp	local13, #123 wc
00ae4     20 BE 86 C1 |  if_b	sub	local13, #32
00ae8     38 00 90 CD |  if_b	jmp	#LR__0011
00aec                 | LR__0005
00aec     41 BE 16 F2 | 	cmp	local13, #65 wc
00af0     0C 00 90 CD |  if_b	jmp	#LR__0006
00af4     5B BE 16 F2 | 	cmp	local13, #91 wc
00af8     20 BE 06 C1 |  if_b	add	local13, #32
00afc     24 00 90 CD |  if_b	jmp	#LR__0010
00b00                 | LR__0006
00b00     17 BE 16 F2 | 	cmp	local13, #23 wc
00b04     0C 00 90 CD |  if_b	jmp	#LR__0007
00b08     20 BE 16 F2 | 	cmp	local13, #32 wc
00b0c     09 BE 86 C1 |  if_b	sub	local13, #9
00b10     10 00 90 CD |  if_b	jmp	#LR__0009
00b14                 | LR__0007
00b14     0E BE 16 F2 | 	cmp	local13, #14 wc
00b18     08 00 90 CD |  if_b	jmp	#LR__0008
00b1c     17 BE 16 F2 | 	cmp	local13, #23 wc
00b20     27 BE 06 C1 |  if_b	add	local13, #39
00b24                 | LR__0008
00b24                 | LR__0009
00b24                 | LR__0010
00b24                 | LR__0011
00b24                 | LR__0012
00b24                 | '  
00b24                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00b24     01 BE 16 F2 | 	cmp	local13, #1 wc
00b28     BC 01 90 CD |  if_b	jmp	#LR__0017
00b2c     7F BE 16 F2 | 	cmp	local13, #127 wc
00b30     3C 64 06 C1 |  if_b	add	objptr, #60
00b34     32 B1 E2 CA |  if_b	rdword	local06, objptr
00b38     3C 64 86 C1 |  if_b	sub	objptr, #60
00b3c     FE B0 16 C2 |  if_b	cmp	local06, #254 wc
00b40     A4 01 90 3D |  if_ae	jmp	#LR__0017
00b44                 | '     if do_insert then							' move the characters right
00b44     54 00 00 FF 
00b48     A4 64 06 F1 | 	add	objptr, ##43172
00b4c     32 B1 0A FB | 	rdlong	local06, objptr wz
00b50     54 00 00 FF 
00b54     A4 64 86 F1 | 	sub	objptr, ##43172
00b58     84 01 90 AD |  if_e	jmp	#LR__0016
00b5c                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00b5c     3E 64 06 F1 | 	add	objptr, #62
00b60     32 B3 C2 FA | 	rdbyte	local07, objptr
00b64     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00b68     07 B4 66 F0 | 	shl	local08, #7
00b6c     3A 64 86 F1 | 	sub	objptr, #58
00b70     32 C3 02 FB | 	rdlong	local15, objptr
00b74     61 C5 02 F6 | 	mov	local16, local15
00b78     5A C5 02 F1 | 	add	local16, local08
00b7c     7F C4 06 F1 | 	add	local16, #127
00b80     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00b84     07 B2 66 F0 | 	shl	local07, #7
00b88     59 C3 02 F1 | 	add	local15, local07
00b8c     38 64 06 F1 | 	add	objptr, #56
00b90     32 B7 E2 FA | 	rdword	local09, objptr
00b94     3C 64 86 F1 | 	sub	objptr, #60
00b98     5B BB 52 F6 | 	abs	local11, local09 wc
00b9c     01 BA 46 F0 | 	shr	local11, #1
00ba0     5D C3 82 F3 | 	sumc	local15, local11
00ba4     01 C2 06 F1 | 	add	local15, #1
00ba8                 | LR__0013
00ba8     62 C7 02 F6 | 	mov	local17, local16
00bac     01 C6 86 F1 | 	sub	local17, #1
00bb0     63 93 02 F6 | 	mov	arg01, local17
00bb4     90 03 B2 FD | 	call	#_pspeek
00bb8     3D C9 02 F6 | 	mov	local18, result1
00bbc     64 CB E2 F8 | 	getbyte	local19, local18, #0
00bc0     65 CD 02 F6 | 	mov	local20, local19
00bc4     62 93 02 F6 | 	mov	arg01, local16
00bc8     66 95 02 F6 | 	mov	arg02, local20
00bcc     30 03 B2 FD | 	call	#_pspoke
00bd0     01 C4 86 F1 | 	sub	local16, #1
00bd4     61 C5 52 F2 | 	cmps	local16, local15 wc
00bd8     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00bdc     54 00 00 FF 
00be0     C4 64 06 F1 | 	add	objptr, ##43204
00be4     32 01 68 FC | 	wrlong	#0, objptr
00be8     54 00 00 FF 
00bec     86 64 86 F1 | 	sub	objptr, ##43142
00bf0     32 B3 C2 FA | 	rdbyte	local07, objptr
00bf4     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00bf8     07 B4 66 F0 | 	shl	local08, #7
00bfc     3A 64 86 F1 | 	sub	objptr, #58
00c00     32 B7 02 FB | 	rdlong	local09, objptr
00c04     5B C5 02 F6 | 	mov	local16, local09
00c08     5A C5 02 F1 | 	add	local16, local08
00c0c     38 64 06 F1 | 	add	objptr, #56
00c10     32 BB E2 FA | 	rdword	local11, objptr
00c14     5D B9 32 F9 | 	getword	local10, local11, #0
00c18     5C CF 52 F6 | 	abs	local21, local10 wc
00c1c     01 CE 46 F0 | 	shr	local21, #1
00c20     67 CF 82 F6 | 	negc	local21, local21
00c24     67 C5 02 F1 | 	add	local16, local21
00c28     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00c2c     07 B2 66 F0 | 	shl	local07, #7
00c30     5B B5 02 F6 | 	mov	local08, local09
00c34     3C 64 86 F1 | 	sub	objptr, #60
00c38     5A D1 02 F6 | 	mov	local22, local08
00c3c     59 D1 02 F1 | 	add	local22, local07
00c40     80 D0 06 F1 | 	add	local22, #128
00c44                 | LR__0014
00c44     68 C5 52 F2 | 	cmps	local16, local22 wc
00c48     94 00 90 3D |  if_ae	jmp	#LR__0015
00c4c     3C 64 06 F1 | 	add	objptr, #60
00c50     32 B1 E2 FA | 	rdword	local06, objptr
00c54     54 00 00 FF 
00c58     88 64 06 F1 | 	add	objptr, ##43144
00c5c     32 B5 02 FB | 	rdlong	local08, objptr
00c60     01 B4 66 F0 | 	shl	local08, #1
00c64     5A B1 02 F1 | 	add	local06, local08
00c68     54 00 00 FF 
00c6c     86 64 86 F1 | 	sub	objptr, ##43142
00c70     32 C1 C2 FA | 	rdbyte	local14, objptr
00c74     3E 64 86 F1 | 	sub	objptr, #62
00c78     04 C0 66 F0 | 	shl	local14, #4
00c7c     04 C0 06 F1 | 	add	local14, #4
00c80     62 93 02 F6 | 	mov	arg01, local16
00c84     C0 02 B2 FD | 	call	#_pspeek
00c88     3D B3 E2 F8 | 	getbyte	local07, result1, #0
00c8c     41 64 06 F1 | 	add	objptr, #65
00c90     32 B5 02 FB | 	rdlong	local08, objptr
00c94     04 64 06 F1 | 	add	objptr, #4
00c98     32 B9 02 FB | 	rdlong	local10, objptr
00c9c     45 64 86 F1 | 	sub	objptr, #69
00ca0     5C B7 02 F6 | 	mov	local09, local10
00ca4     58 93 02 F6 | 	mov	arg01, local06
00ca8     60 95 02 F6 | 	mov	arg02, local14
00cac     59 97 02 F6 | 	mov	arg03, local07
00cb0     5A 99 02 F6 | 	mov	arg04, local08
00cb4     5B 9B 02 F6 | 	mov	arg05, local09
00cb8     30 1B B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00cbc     54 00 00 FF 
00cc0     C4 64 06 F1 | 	add	objptr, ##43204
00cc4     32 B1 02 FB | 	rdlong	local06, objptr
00cc8     01 B0 06 F1 | 	add	local06, #1
00ccc     32 B1 62 FC | 	wrlong	local06, objptr
00cd0     54 00 00 FF 
00cd4     C4 64 86 F1 | 	sub	objptr, ##43204
00cd8     01 C4 06 F1 | 	add	local16, #1
00cdc     64 FF 9F FD | 	jmp	#LR__0014
00ce0                 | LR__0015
00ce0                 | LR__0016
00ce0     5F 93 02 F6 | 	mov	arg01, local13
00ce4     B8 1E B2 FD | 	call	#_hg010b_spin2_putchar
00ce8                 | LR__0017
00ce8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then
00ce8     01 BE 16 F2 | 	cmp	local13, #1 wc
00cec     9C 00 90 CD |  if_b	jmp	#LR__0018
00cf0     7F BE 16 F2 | 	cmp	local13, #127 wc
00cf4     94 00 90 3D |  if_ae	jmp	#LR__0018
00cf8     3C 64 06 F1 | 	add	objptr, #60
00cfc     32 B1 E2 FA | 	rdword	local06, objptr
00d00     3C 64 86 F1 | 	sub	objptr, #60
00d04     FE B0 0E F2 | 	cmp	local06, #254 wz
00d08     52 00 00 AF 
00d0c     E0 64 06 A1 |  if_e	add	objptr, ##42208
00d10     32 B5 02 AB |  if_e	rdlong	local08, objptr
00d14     52 00 00 AF 
00d18     E0 64 86 A1 |  if_e	sub	objptr, ##42208
00d1c     5A B3 02 A6 |  if_e	mov	local07, local08
00d20     01 B2 0E A2 |  if_e	cmp	local07, #1 wz
00d24     64 00 90 5D |  if_ne	jmp	#LR__0018
00d28     35 95 02 F6 | 	mov	arg02, ptr__dat__
00d2c     04 00 00 FF 
00d30     A4 94 06 F1 | 	add	arg02, ##2212
00d34     2B B2 06 F6 | 	mov	local07, #43
00d38     0C B4 C6 F9 | 	decod	local08, #12
00d3c     03 00 00 FF 
00d40     DE B6 06 F6 | 	mov	local09, ##1758
00d44     00 B8 06 F6 | 	mov	local10, #0
00d48     2C BB 06 F6 | 	mov	local11, #300
00d4c     07 92 06 F6 | 	mov	arg01, #7
00d50     2B 96 06 F6 | 	mov	arg03, #43
00d54     0C 98 C6 F9 | 	decod	arg04, #12
00d58     03 00 00 FF 
00d5c     DE 9A 06 F6 | 	mov	arg05, ##1758
00d60     00 9C 06 F6 | 	mov	arg06, #0
00d64     2C 9F 06 F6 | 	mov	arg07, #300
00d68     0B 00 00 FF 
00d6c     CC 64 06 F1 | 	add	objptr, ##5836
00d70     80 38 B2 FD | 	call	#_Audio2_004_spin2_play16
00d74                 | ' 
00d74                 | ' base2:=@channel0[0]+64*channel
00d74     32 BD 02 F6 | 	mov	local12, objptr
00d78     C0 93 06 F6 | 	mov	arg01, #448
00d7c                 | ' word[base2+32]:=0
00d7c     EC BD 06 F1 | 	add	local12, #492
00d80     5E 01 58 FC | 	wrword	#0, local12
00d84     0B 00 00 FF 
00d88     CC 64 86 F1 | 	sub	objptr, ##5836
00d8c                 | LR__0018
00d8c                 | '     
00d8c                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00d8c     8D BE 0E F2 | 	cmp	local13, #141 wz
00d90     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d94     92 01 00 FF 
00d98     66 D3 06 F6 | 	mov	local23, ##@LR__5487
00d9c                 | '     line$="" 
00d9c                 | '     for i=editor_spaces to 127
00d9c     38 00 00 FF 
00da0     D8 65 06 F1 | 	add	objptr, ##29144
00da4     32 C5 02 FB | 	rdlong	local16, objptr
00da8     38 00 00 FF 
00dac     D8 65 86 F1 | 	sub	objptr, ##29144
00db0                 | LR__0019
00db0     80 C4 56 F2 | 	cmps	local16, #128 wc
00db4     44 00 90 3D |  if_ae	jmp	#LR__0020
00db8     3E 64 06 F1 | 	add	objptr, #62
00dbc     32 BB C2 FA | 	rdbyte	local11, objptr
00dc0     07 BA 66 F0 | 	shl	local11, #7
00dc4     3A 64 86 F1 | 	sub	objptr, #58
00dc8     32 93 02 FB | 	rdlong	arg01, objptr
00dcc     04 64 86 F1 | 	sub	objptr, #4
00dd0     5D 93 02 F1 | 	add	arg01, local11
00dd4     62 93 02 F1 | 	add	arg01, local16
00dd8     6C 01 B2 FD | 	call	#_pspeek
00ddc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
00de0     84 56 B2 FD | 	call	#__system__Chr_S
00de4     3D 95 02 F6 | 	mov	arg02, result1
00de8     69 93 02 F6 | 	mov	arg01, local23
00dec     68 3C B2 FD | 	call	#__system___string_concat
00df0     3D D3 02 F6 | 	mov	local23, result1
00df4     01 C4 06 F1 | 	add	local16, #1
00df8     B4 FF 9F FD | 	jmp	#LR__0019
00dfc                 | LR__0020
00dfc                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00dfc     54 00 00 FF 
00e00     A4 64 06 F1 | 	add	objptr, ##43172
00e04     32 B1 0A FB | 	rdlong	local06, objptr wz
00e08     54 00 00 FF 
00e0c     A4 64 86 F1 | 	sub	objptr, ##43172
00e10     24 00 90 AD |  if_e	jmp	#LR__0021
00e14     3E 64 06 F1 | 	add	objptr, #62
00e18     32 B3 C2 FA | 	rdbyte	local07, objptr
00e1c     3E 64 86 F1 | 	sub	objptr, #62
00e20     23 B2 16 F2 | 	cmp	local07, #35 wc
00e24     3E 64 06 C1 |  if_b	add	objptr, #62
00e28     32 93 C2 CA |  if_b	rdbyte	arg01, objptr
00e2c     3E 64 86 C1 |  if_b	sub	objptr, #62
00e30     01 92 06 C1 |  if_b	add	arg01, #1
00e34     F0 22 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00e38                 | LR__0021
00e38     F0 24 B2 FD | 	call	#_hg010b_spin2_crlf
00e3c                 | '     v.crlf() 
00e3c                 | '     return  line$
00e3c     69 7B 02 F6 | 	mov	result1, local23
00e40     94 07 90 FD | 	jmp	#LR__0049
00e44                 | LR__0022
00e44     56 BF E2 F8 | 	getbyte	local13, local04, #0
00e48                 | '   
00e48                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)  			' tab
00e48     2B BE 0E F2 | 	cmp	local13, #43 wz
00e4c     98 00 90 5D |  if_ne	jmp	#LR__0023
00e50     3C 64 06 F1 | 	add	objptr, #60
00e54     32 B1 E2 FA | 	rdword	local06, objptr
00e58     3C 64 86 F1 | 	sub	objptr, #60
00e5c     F0 B0 16 F2 | 	cmp	local06, #240 wc
00e60     84 00 90 CD |  if_b	jmp	#LR__0023
00e64     52 00 00 FF 
00e68     E0 64 06 F1 | 	add	objptr, ##42208
00e6c     32 B5 02 FB | 	rdlong	local08, objptr
00e70     52 00 00 FF 
00e74     E0 64 86 F1 | 	sub	objptr, ##42208
00e78     5A B3 02 F6 | 	mov	local07, local08
00e7c     01 B2 0E F2 | 	cmp	local07, #1 wz
00e80     64 00 90 5D |  if_ne	jmp	#LR__0023
00e84     35 95 02 F6 | 	mov	arg02, ptr__dat__
00e88     04 00 00 FF 
00e8c     A4 94 06 F1 | 	add	arg02, ##2212
00e90     2B B2 06 F6 | 	mov	local07, #43
00e94     0C B4 C6 F9 | 	decod	local08, #12
00e98     03 00 00 FF 
00e9c     DE B6 06 F6 | 	mov	local09, ##1758
00ea0     00 B8 06 F6 | 	mov	local10, #0
00ea4     2C BB 06 F6 | 	mov	local11, #300
00ea8     07 92 06 F6 | 	mov	arg01, #7
00eac     2B 96 06 F6 | 	mov	arg03, #43
00eb0     0C 98 C6 F9 | 	decod	arg04, #12
00eb4     03 00 00 FF 
00eb8     DE 9A 06 F6 | 	mov	arg05, ##1758
00ebc     00 9C 06 F6 | 	mov	arg06, #0
00ec0     2C 9F 06 F6 | 	mov	arg07, #300
00ec4     0B 00 00 FF 
00ec8     CC 64 06 F1 | 	add	objptr, ##5836
00ecc     24 37 B2 FD | 	call	#_Audio2_004_spin2_play16
00ed0                 | ' 
00ed0                 | ' base2:=@channel0[0]+64*channel
00ed0     32 BD 02 F6 | 	mov	local12, objptr
00ed4     C0 93 06 F6 | 	mov	arg01, #448
00ed8                 | ' word[base2+32]:=0
00ed8     EC BD 06 F1 | 	add	local12, #492
00edc     5E 01 58 FC | 	wrword	#0, local12
00ee0     0B 00 00 FF 
00ee4     CC 64 86 F1 | 	sub	objptr, ##5836
00ee8                 | LR__0023
00ee8                 | '   if key4=77 then i=127 : do: 															' end
00ee8     4D BE 0E F2 | 	cmp	local13, #77 wz
00eec     90 00 90 5D |  if_ne	jmp	#LR__0028
00ef0     7F C4 06 F6 | 	mov	local16, #127
00ef4                 | LR__0024
00ef4                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00ef4     3E 64 06 F1 | 	add	objptr, #62
00ef8     32 B7 C2 FA | 	rdbyte	local09, objptr
00efc     5B B5 E2 F8 | 	getbyte	local08, local09, #0
00f00     5A B9 02 F6 | 	mov	local10, local08
00f04     07 B8 66 F0 | 	shl	local10, #7
00f08     3A 64 86 F1 | 	sub	objptr, #58
00f0c     32 BB 02 FB | 	rdlong	local11, objptr
00f10     04 64 86 F1 | 	sub	objptr, #4
00f14     5D B3 02 F6 | 	mov	local07, local11
00f18     5C B3 02 F1 | 	add	local07, local10
00f1c     62 B3 02 F1 | 	add	local07, local16
00f20     59 93 02 F6 | 	mov	arg01, local07
00f24     20 00 B2 FD | 	call	#_pspeek
00f28     3D B1 E2 F8 | 	getbyte	local06, result1, #0
00f2c     20 B0 0E F2 | 	cmp	local06, #32 wz
00f30     2C 00 90 AD |  if_e	jmp	#LR__0026
00f34                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00f34     7F C4 56 F2 | 	cmps	local16, #127 wc
00f38     18 00 90 3D |  if_ae	jmp	#LR__0025
00f3c     62 B3 02 F6 | 	mov	local07, local16
00f40     01 B2 66 F0 | 	shl	local07, #1
00f44     59 93 02 F6 | 	mov	arg01, local07
00f48     02 92 06 F1 | 	add	arg01, #2
00f4c     88 1A B2 FD | 	call	#_hg010b_spin2_setcursorx
00f50     2C 00 90 FD | 	jmp	#LR__0027
00f54                 | LR__0025
00f54     FE 92 06 F6 | 	mov	arg01, #254
00f58     7C 1A B2 FD | 	call	#_hg010b_spin2_setcursorx
00f5c     20 00 90 FD | 	jmp	#LR__0027
00f60                 | LR__0026
00f60     01 C4 86 F1 | 	sub	local16, #1
00f64     38 00 00 FF 
00f68     D8 65 06 F1 | 	add	objptr, ##29144
00f6c     32 B1 02 FB | 	rdlong	local06, objptr
00f70     38 00 00 FF 
00f74     D8 65 86 F1 | 	sub	objptr, ##29144
00f78     58 C5 0A F2 | 	cmp	local16, local06 wz
00f7c     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00f80                 | LR__0027
00f80                 | LR__0028
00f80                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00f80     38 00 00 FF 
00f84     D8 65 06 F1 | 	add	objptr, ##29144
00f88     32 C1 02 FB | 	rdlong	local14, objptr
00f8c     38 00 00 FF 
00f90     D8 65 86 F1 | 	sub	objptr, ##29144
00f94     60 B1 02 F6 | 	mov	local06, local14
00f98     58 C5 0A F2 | 	cmp	local16, local06 wz
00f9c     2C 00 90 5D |  if_ne	jmp	#LR__0029
00fa0     38 00 00 FF 
00fa4     D8 65 06 F1 | 	add	objptr, ##29144
00fa8     32 B5 02 FB | 	rdlong	local08, objptr
00fac     38 00 00 FF 
00fb0     D8 65 86 F1 | 	sub	objptr, ##29144
00fb4     5A B3 02 F6 | 	mov	local07, local08
00fb8     59 C1 02 F6 | 	mov	local14, local07
00fbc     01 C0 66 F0 | 	shl	local14, #1
00fc0     60 B1 02 F6 | 	mov	local06, local14
00fc4     58 93 02 F6 | 	mov	arg01, local06
00fc8     0C 1A B2 FD | 	call	#_hg010b_spin2_setcursorx
00fcc                 | LR__0029
00fcc                 | '     
00fcc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00fcc     4A BE 0E F2 | 	cmp	local13, #74 wz
00fd0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00fd4     38 00 00 FF 
00fd8     D8 65 06 F1 | 	add	objptr, ##29144
00fdc     32 B5 02 FB | 	rdlong	local08, objptr
00fe0     38 00 00 FF 
00fe4     D8 65 86 F1 | 	sub	objptr, ##29144
00fe8     5A B3 02 F6 | 	mov	local07, local08
00fec     59 C1 02 F6 | 	mov	local14, local07
00ff0     01 C0 66 F0 | 	shl	local14, #1
00ff4     60 B1 02 F6 | 	mov	local06, local14
00ff8     58 93 02 F6 | 	mov	arg01, local06
00ffc     D8 19 B2 FD | 	call	#_hg010b_spin2_setcursorx
01000                 | LR__0030
01000                 | '   if key4=75 then v.setcursory(0)														' pgup
01000     4B BE 0E F2 | 	cmp	local13, #75 wz
01004     00 B0 06 A6 |  if_e	mov	local06, #0
01008     00 92 06 A6 |  if_e	mov	arg01, #0
0100c     F8 19 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01010                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
01010     4E BE 0E F2 | 	cmp	local13, #78 wz
01014     24 B0 06 A6 |  if_e	mov	local06, #36
01018     24 92 06 A6 |  if_e	mov	arg01, #36
0101c     E8 19 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01020                 | '   if key4=76 then 																' del
01020     4C BE 0E F2 | 	cmp	local13, #76 wz
01024     AC 01 90 5D |  if_ne	jmp	#LR__0035
01028                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01028     3E 64 06 F1 | 	add	objptr, #62
0102c     32 B3 C2 FA | 	rdbyte	local07, objptr
01030     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01034     07 B4 66 F0 | 	shl	local08, #7
01038     3A 64 86 F1 | 	sub	objptr, #58
0103c     32 D5 02 FB | 	rdlong	local24, objptr
01040     6A C5 02 F6 | 	mov	local16, local24
01044     5A C5 02 F1 | 	add	local16, local08
01048     38 64 06 F1 | 	add	objptr, #56
0104c     32 B9 E2 FA | 	rdword	local10, objptr
01050     5C CF 52 F6 | 	abs	local21, local10 wc
01054     01 CE 46 F0 | 	shr	local21, #1
01058     67 C5 82 F3 | 	sumc	local16, local21
0105c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01060     07 B2 66 F0 | 	shl	local07, #7
01064     3C 64 86 F1 | 	sub	objptr, #60
01068     59 D5 02 F1 | 	add	local24, local07
0106c     80 D4 06 F1 | 	add	local24, #128
01070                 | LR__0031
01070     6A C5 52 F2 | 	cmps	local16, local24 wc
01074     20 00 90 3D |  if_ae	jmp	#LR__0032
01078     62 93 02 F6 | 	mov	arg01, local16
0107c     01 92 06 F1 | 	add	arg01, #1
01080     C4 FE B1 FD | 	call	#_pspeek
01084     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
01088     62 93 02 F6 | 	mov	arg01, local16
0108c     70 FE B1 FD | 	call	#_pspoke
01090     01 C4 06 F1 | 	add	local16, #1
01094     D8 FF 9F FD | 	jmp	#LR__0031
01098                 | LR__0032
01098     3E 64 06 F1 | 	add	objptr, #62
0109c     32 B7 C2 FA | 	rdbyte	local09, objptr
010a0     07 B6 66 F0 | 	shl	local09, #7
010a4     3A 64 86 F1 | 	sub	objptr, #58
010a8     32 93 02 FB | 	rdlong	arg01, objptr
010ac     04 64 86 F1 | 	sub	objptr, #4
010b0     5B 93 02 F1 | 	add	arg01, local09
010b4     7F 92 06 F1 | 	add	arg01, #127
010b8     20 94 06 F6 | 	mov	arg02, #32
010bc     40 FE B1 FD | 	call	#_pspoke
010c0     54 00 00 FF 
010c4     C4 64 06 F1 | 	add	objptr, ##43204
010c8     32 01 68 FC | 	wrlong	#0, objptr
010cc     54 00 00 FF 
010d0     86 64 86 F1 | 	sub	objptr, ##43142
010d4     32 C1 C2 FA | 	rdbyte	local14, objptr
010d8     60 B5 E2 F8 | 	getbyte	local08, local14, #0
010dc     07 B4 66 F0 | 	shl	local08, #7
010e0     3A 64 86 F1 | 	sub	objptr, #58
010e4     32 B7 02 FB | 	rdlong	local09, objptr
010e8     5B C5 02 F6 | 	mov	local16, local09
010ec     5A C5 02 F1 | 	add	local16, local08
010f0     38 64 06 F1 | 	add	objptr, #56
010f4     32 BB E2 FA | 	rdword	local11, objptr
010f8     5D B9 32 F9 | 	getword	local10, local11, #0
010fc     5C CF 52 F6 | 	abs	local21, local10 wc
01100     01 CE 46 F0 | 	shr	local21, #1
01104     67 CF 82 F6 | 	negc	local21, local21
01108     67 C5 02 F1 | 	add	local16, local21
0110c     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01110     58 B3 02 F6 | 	mov	local07, local06
01114     07 B2 66 F0 | 	shl	local07, #7
01118     5B B5 02 F6 | 	mov	local08, local09
0111c     3C 64 86 F1 | 	sub	objptr, #60
01120     5A D7 02 F6 | 	mov	local25, local08
01124     59 D7 02 F1 | 	add	local25, local07
01128     80 D6 06 F1 | 	add	local25, #128
0112c                 | LR__0033
0112c     6B C5 52 F2 | 	cmps	local16, local25 wc
01130     A0 00 90 3D |  if_ae	jmp	#LR__0034
01134     3C 64 06 F1 | 	add	objptr, #60
01138     32 B1 E2 FA | 	rdword	local06, objptr
0113c     54 00 00 FF 
01140     88 64 06 F1 | 	add	objptr, ##43144
01144     32 B5 02 FB | 	rdlong	local08, objptr
01148     01 B4 66 F0 | 	shl	local08, #1
0114c     5A B1 02 F1 | 	add	local06, local08
01150     54 00 00 FF 
01154     86 64 86 F1 | 	sub	objptr, ##43142
01158     32 C1 C2 FA | 	rdbyte	local14, objptr
0115c     3E 64 86 F1 | 	sub	objptr, #62
01160     04 C0 66 F0 | 	shl	local14, #4
01164     04 C0 06 F1 | 	add	local14, #4
01168     62 93 02 F6 | 	mov	arg01, local16
0116c     D8 FD B1 FD | 	call	#_pspeek
01170     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01174     41 64 06 F1 | 	add	objptr, #65
01178     32 B5 02 FB | 	rdlong	local08, objptr
0117c     04 64 06 F1 | 	add	objptr, #4
01180     32 B9 02 FB | 	rdlong	local10, objptr
01184     45 64 86 F1 | 	sub	objptr, #69
01188     5C B7 02 F6 | 	mov	local09, local10
0118c     58 93 02 F6 | 	mov	arg01, local06
01190     60 95 02 F6 | 	mov	arg02, local14
01194     59 97 02 F6 | 	mov	arg03, local07
01198     5A 99 02 F6 | 	mov	arg04, local08
0119c     5B 9B 02 F6 | 	mov	arg05, local09
011a0     48 16 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
011a4     54 00 00 FF 
011a8     C4 64 06 F1 | 	add	objptr, ##43204
011ac     32 B1 02 FB | 	rdlong	local06, objptr
011b0     01 B0 06 F1 | 	add	local06, #1
011b4     32 B1 62 FC | 	wrlong	local06, objptr
011b8     54 00 00 FF 
011bc     C4 64 86 F1 | 	sub	objptr, ##43204
011c0     62 B1 02 F6 | 	mov	local06, local16
011c4     62 C1 02 F6 | 	mov	local14, local16
011c8     01 C0 06 F1 | 	add	local14, #1
011cc     60 C5 02 F6 | 	mov	local16, local14
011d0     58 FF 9F FD | 	jmp	#LR__0033
011d4                 | LR__0034
011d4                 | LR__0035
011d4                 | ' 
011d4                 | '   if key4 = 42 then  'backspace
011d4     2A BE 0E F2 | 	cmp	local13, #42 wz
011d8     14 02 90 5D |  if_ne	jmp	#LR__0041
011dc                 | '     if v.cursor_x>editor_spaces*2 then 
011dc     3C 64 06 F1 | 	add	objptr, #60
011e0     32 C1 E2 FA | 	rdword	local14, objptr
011e4     60 B1 32 F9 | 	getword	local06, local14, #0
011e8     38 00 00 FF 
011ec     9C 65 06 F1 | 	add	objptr, ##29084
011f0     32 B7 02 FB | 	rdlong	local09, objptr
011f4     38 00 00 FF 
011f8     D8 65 86 F1 | 	sub	objptr, ##29144
011fc     5B B5 02 F6 | 	mov	local08, local09
01200     5A B3 02 F6 | 	mov	local07, local08
01204     01 B2 66 F0 | 	shl	local07, #1
01208     59 B1 5A F2 | 	cmps	local06, local07 wcz
0120c     C8 01 90 ED |  if_be	jmp	#LR__0039
01210     3C 64 06 F1 | 	add	objptr, #60
01214     32 93 E2 FA | 	rdword	arg01, objptr
01218     02 92 86 F1 | 	sub	arg01, #2
0121c     02 64 06 F1 | 	add	objptr, #2
01220     32 95 C2 FA | 	rdbyte	arg02, objptr
01224     3E 64 86 F1 | 	sub	objptr, #62
01228     60 17 B2 FD | 	call	#_hg010b_spin2_setcursorpos
0122c                 | '       position v.cursor_x-2,v.cursor_y
0122c                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
0122c     3E 64 06 F1 | 	add	objptr, #62
01230     32 B3 C2 FA | 	rdbyte	local07, objptr
01234     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01238     07 B4 66 F0 | 	shl	local08, #7
0123c     3A 64 86 F1 | 	sub	objptr, #58
01240     32 D9 02 FB | 	rdlong	local26, objptr
01244     6C C5 02 F6 | 	mov	local16, local26
01248     5A C5 02 F1 | 	add	local16, local08
0124c     38 64 06 F1 | 	add	objptr, #56
01250     32 B9 E2 FA | 	rdword	local10, objptr
01254     5C CF 52 F6 | 	abs	local21, local10 wc
01258     01 CE 46 F0 | 	shr	local21, #1
0125c     67 C5 82 F3 | 	sumc	local16, local21
01260     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01264     07 B2 66 F0 | 	shl	local07, #7
01268     3C 64 86 F1 | 	sub	objptr, #60
0126c     59 D9 02 F1 | 	add	local26, local07
01270     80 D8 06 F1 | 	add	local26, #128
01274                 | LR__0036
01274     6C C5 52 F2 | 	cmps	local16, local26 wc
01278     20 00 90 3D |  if_ae	jmp	#LR__0037
0127c     62 93 02 F6 | 	mov	arg01, local16
01280     01 92 06 F1 | 	add	arg01, #1
01284     C0 FC B1 FD | 	call	#_pspeek
01288     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
0128c     62 93 02 F6 | 	mov	arg01, local16
01290     6C FC B1 FD | 	call	#_pspoke
01294     01 C4 06 F1 | 	add	local16, #1
01298     D8 FF 9F FD | 	jmp	#LR__0036
0129c                 | LR__0037
0129c     3E 64 06 F1 | 	add	objptr, #62
012a0     32 B7 C2 FA | 	rdbyte	local09, objptr
012a4     07 B6 66 F0 | 	shl	local09, #7
012a8     3A 64 86 F1 | 	sub	objptr, #58
012ac     32 93 02 FB | 	rdlong	arg01, objptr
012b0     04 64 86 F1 | 	sub	objptr, #4
012b4     5B 93 02 F1 | 	add	arg01, local09
012b8     7F 92 06 F1 | 	add	arg01, #127
012bc     20 94 06 F6 | 	mov	arg02, #32
012c0     3C FC B1 FD | 	call	#_pspoke
012c4     54 00 00 FF 
012c8     C4 64 06 F1 | 	add	objptr, ##43204
012cc     32 01 68 FC | 	wrlong	#0, objptr
012d0     54 00 00 FF 
012d4     86 64 86 F1 | 	sub	objptr, ##43142
012d8     32 C1 C2 FA | 	rdbyte	local14, objptr
012dc     60 B5 E2 F8 | 	getbyte	local08, local14, #0
012e0     07 B4 66 F0 | 	shl	local08, #7
012e4     3A 64 86 F1 | 	sub	objptr, #58
012e8     32 B7 02 FB | 	rdlong	local09, objptr
012ec     5B C5 02 F6 | 	mov	local16, local09
012f0     5A C5 02 F1 | 	add	local16, local08
012f4     38 64 06 F1 | 	add	objptr, #56
012f8     32 BB E2 FA | 	rdword	local11, objptr
012fc     5D B9 32 F9 | 	getword	local10, local11, #0
01300     5C CF 52 F6 | 	abs	local21, local10 wc
01304     01 CE 46 F0 | 	shr	local21, #1
01308     67 CF 82 F6 | 	negc	local21, local21
0130c     67 C5 02 F1 | 	add	local16, local21
01310     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01314     58 B3 02 F6 | 	mov	local07, local06
01318     07 B2 66 F0 | 	shl	local07, #7
0131c     5B B5 02 F6 | 	mov	local08, local09
01320     3C 64 86 F1 | 	sub	objptr, #60
01324     5A DB 02 F6 | 	mov	local27, local08
01328     59 DB 02 F1 | 	add	local27, local07
0132c     80 DA 06 F1 | 	add	local27, #128
01330                 | LR__0038
01330     6D C5 52 F2 | 	cmps	local16, local27 wc
01334     B8 00 90 3D |  if_ae	jmp	#LR__0040
01338     3C 64 06 F1 | 	add	objptr, #60
0133c     32 B1 E2 FA | 	rdword	local06, objptr
01340     54 00 00 FF 
01344     88 64 06 F1 | 	add	objptr, ##43144
01348     32 B5 02 FB | 	rdlong	local08, objptr
0134c     01 B4 66 F0 | 	shl	local08, #1
01350     5A B1 02 F1 | 	add	local06, local08
01354     54 00 00 FF 
01358     86 64 86 F1 | 	sub	objptr, ##43142
0135c     32 C1 C2 FA | 	rdbyte	local14, objptr
01360     3E 64 86 F1 | 	sub	objptr, #62
01364     04 C0 66 F0 | 	shl	local14, #4
01368     04 C0 06 F1 | 	add	local14, #4
0136c     62 93 02 F6 | 	mov	arg01, local16
01370     D4 FB B1 FD | 	call	#_pspeek
01374     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01378     41 64 06 F1 | 	add	objptr, #65
0137c     32 B5 02 FB | 	rdlong	local08, objptr
01380     04 64 06 F1 | 	add	objptr, #4
01384     32 B9 02 FB | 	rdlong	local10, objptr
01388     45 64 86 F1 | 	sub	objptr, #69
0138c     5C B7 02 F6 | 	mov	local09, local10
01390     58 93 02 F6 | 	mov	arg01, local06
01394     60 95 02 F6 | 	mov	arg02, local14
01398     59 97 02 F6 | 	mov	arg03, local07
0139c     5A 99 02 F6 | 	mov	arg04, local08
013a0     5B 9B 02 F6 | 	mov	arg05, local09
013a4     44 14 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
013a8     54 00 00 FF 
013ac     C4 64 06 F1 | 	add	objptr, ##43204
013b0     32 B1 02 FB | 	rdlong	local06, objptr
013b4     01 B0 06 F1 | 	add	local06, #1
013b8     32 B1 62 FC | 	wrlong	local06, objptr
013bc     54 00 00 FF 
013c0     C4 64 86 F1 | 	sub	objptr, ##43204
013c4     62 B1 02 F6 | 	mov	local06, local16
013c8     62 C1 02 F6 | 	mov	local14, local16
013cc     01 C0 06 F1 | 	add	local14, #1
013d0     60 C5 02 F6 | 	mov	local16, local14
013d4     58 FF 9F FD | 	jmp	#LR__0038
013d8                 | LR__0039
013d8     92 01 00 FF 
013dc     67 D3 06 F6 | 	mov	local23, ##@LR__5488
013e0     04 B0 06 F6 | 	mov	local06, #4
013e4     3C 64 06 F1 | 	add	objptr, #60
013e8     32 09 58 FC | 	wrword	#4, objptr
013ec     3C 64 86 F1 | 	sub	objptr, #60
013f0                 | LR__0040
013f0                 | LR__0041
013f0                 | ' 
013f0                 | '   if key4=82 then 						' arrow up
013f0     52 BE 0E F2 | 	cmp	local13, #82 wz
013f4     58 00 90 5D |  if_ne	jmp	#LR__0042
013f8                 | ' return cursor_y
013f8     3E 64 06 F1 | 	add	objptr, #62
013fc     32 7B C2 FA | 	rdbyte	result1, objptr
01400     01 7A 86 F1 | 	sub	result1, #1
01404     54 00 00 FF 
01408     6A 64 06 F1 | 	add	objptr, ##43114
0140c     32 7B 62 FC | 	wrlong	result1, objptr
01410                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01410     54 00 00 FF 
01414     A8 64 86 F1 | 	sub	objptr, ##43176
01418     00 7A 56 F2 | 	cmps	result1, #0 wc
0141c     54 00 00 CF 
01420     A8 64 06 C1 |  if_b	add	objptr, ##43176
01424     32 01 68 CC |  if_b	wrlong	#0, objptr
01428     54 00 00 CF 
0142c     A8 64 86 C1 |  if_b	sub	objptr, ##43176
01430     54 00 00 FF 
01434     A8 64 06 F1 | 	add	objptr, ##43176
01438     32 C1 02 FB | 	rdlong	local14, objptr
0143c     54 00 00 FF 
01440     A8 64 86 F1 | 	sub	objptr, ##43176
01444     60 B1 02 F6 | 	mov	local06, local14
01448     58 93 02 F6 | 	mov	arg01, local06
0144c     B8 15 B2 FD | 	call	#_hg010b_spin2_setcursory
01450                 | LR__0042
01450                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01450     51 BE 0E F2 | 	cmp	local13, #81 wz
01454     58 00 90 5D |  if_ne	jmp	#LR__0043
01458                 | ' return cursor_y
01458     3E 64 06 F1 | 	add	objptr, #62
0145c     32 7B C2 FA | 	rdbyte	result1, objptr
01460     01 7A 06 F1 | 	add	result1, #1
01464     54 00 00 FF 
01468     6A 64 06 F1 | 	add	objptr, ##43114
0146c     32 7B 62 FC | 	wrlong	result1, objptr
01470                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
01470     54 00 00 FF 
01474     A8 64 86 F1 | 	sub	objptr, ##43176
01478     25 7A 56 F2 | 	cmps	result1, #37 wc
0147c     54 00 00 3F 
01480     A8 64 06 31 |  if_ae	add	objptr, ##43176
01484     32 49 68 3C |  if_ae	wrlong	#36, objptr
01488     54 00 00 3F 
0148c     A8 64 86 31 |  if_ae	sub	objptr, ##43176
01490     54 00 00 FF 
01494     A8 64 06 F1 | 	add	objptr, ##43176
01498     32 C1 02 FB | 	rdlong	local14, objptr
0149c     54 00 00 FF 
014a0     A8 64 86 F1 | 	sub	objptr, ##43176
014a4     60 B1 02 F6 | 	mov	local06, local14
014a8     58 93 02 F6 | 	mov	arg01, local06
014ac     58 15 B2 FD | 	call	#_hg010b_spin2_setcursory
014b0                 | LR__0043
014b0                 | '   if key4=80 then
014b0     50 BE 0E F2 | 	cmp	local13, #80 wz
014b4     74 00 90 5D |  if_ne	jmp	#LR__0044
014b8                 | ' return cursor_x
014b8     3C 64 06 F1 | 	add	objptr, #60
014bc     32 B1 E2 FA | 	rdword	local06, objptr
014c0     02 B0 86 F1 | 	sub	local06, #2
014c4     54 00 00 FF 
014c8     70 64 06 F1 | 	add	objptr, ##43120
014cc     32 B1 62 FC | 	wrlong	local06, objptr
014d0                 | '     cx=v.getcursorx()-2 					' arrow left
014d0                 | '     if cx<editor_spaces then cx=editor_spaces			
014d0     1B 00 00 FF 
014d4     D4 64 86 F1 | 	sub	objptr, ##14036
014d8     32 B5 02 FB | 	rdlong	local08, objptr
014dc     38 00 00 FF 
014e0     D8 65 86 F1 | 	sub	objptr, ##29144
014e4     5A B3 02 F6 | 	mov	local07, local08
014e8     59 B1 52 F2 | 	cmps	local06, local07 wc
014ec     38 00 00 CF 
014f0     D8 65 06 C1 |  if_b	add	objptr, ##29144
014f4     32 B1 02 CB |  if_b	rdlong	local06, objptr
014f8     1B 00 00 CF 
014fc     D4 64 06 C1 |  if_b	add	objptr, ##14036
01500     32 B1 62 CC |  if_b	wrlong	local06, objptr
01504     54 00 00 CF 
01508     AC 64 86 C1 |  if_b	sub	objptr, ##43180
0150c     54 00 00 FF 
01510     AC 64 06 F1 | 	add	objptr, ##43180
01514     32 C1 02 FB | 	rdlong	local14, objptr
01518     54 00 00 FF 
0151c     AC 64 86 F1 | 	sub	objptr, ##43180
01520     60 B1 02 F6 | 	mov	local06, local14
01524     58 93 02 F6 | 	mov	arg01, local06
01528     AC 14 B2 FD | 	call	#_hg010b_spin2_setcursorx
0152c                 | LR__0044
0152c                 | '   if key4=79 then						' arrow right
0152c     4F BE 0E F2 | 	cmp	local13, #79 wz
01530     54 00 90 5D |  if_ne	jmp	#LR__0045
01534                 | ' return cursor_x
01534     3C 64 06 F1 | 	add	objptr, #60
01538     32 7B E2 FA | 	rdword	result1, objptr
0153c     02 7A 06 F1 | 	add	result1, #2
01540     54 00 00 FF 
01544     70 64 06 F1 | 	add	objptr, ##43120
01548     32 7B 62 FC | 	wrlong	result1, objptr
0154c                 | '     cx=v.getcursorx()+2 
0154c                 | '     if cx>254  then cx=254 
0154c     54 00 00 FF 
01550     AC 64 86 F1 | 	sub	objptr, ##43180
01554     FF 7A 56 F2 | 	cmps	result1, #255 wc
01558     54 00 00 3F 
0155c     AC 64 06 31 |  if_ae	add	objptr, ##43180
01560     32 FD 69 3C |  if_ae	wrlong	#254, objptr
01564     54 00 00 3F 
01568     AC 64 86 31 |  if_ae	sub	objptr, ##43180
0156c     54 00 00 FF 
01570     AC 64 06 F1 | 	add	objptr, ##43180
01574     32 B1 02 FB | 	rdlong	local06, objptr
01578     54 00 00 FF 
0157c     AC 64 86 F1 | 	sub	objptr, ##43180
01580     58 93 02 F6 | 	mov	arg01, local06
01584     50 14 B2 FD | 	call	#_hg010b_spin2_setcursorx
01588                 | LR__0045
01588                 | ' 
01588                 | '   if key4=73 then 						' ins
01588     49 BE 0E F2 | 	cmp	local13, #73 wz
0158c     40 00 90 5D |  if_ne	jmp	#LR__0048
01590     54 00 00 FF 
01594     A4 64 06 F1 | 	add	objptr, ##43172
01598     32 B1 02 FB | 	rdlong	local06, objptr
0159c     58 C1 22 F6 | 	not	local14, local06
015a0     32 C1 62 FC | 	wrlong	local14, objptr
015a4                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
015a4     54 00 00 FF 
015a8     A4 64 86 F1 | 	sub	objptr, ##43172
015ac     00 C0 0E F2 | 	cmp	local14, #0 wz
015b0     10 00 90 AD |  if_e	jmp	#LR__0046
015b4     0E B0 06 F6 | 	mov	local06, #14
015b8     0E 92 06 F6 | 	mov	arg01, #14
015bc     70 02 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015c0     0C 00 90 FD | 	jmp	#LR__0047
015c4                 | LR__0046
015c4     00 B0 06 F6 | 	mov	local06, #0
015c8     00 92 06 F6 | 	mov	arg01, #0
015cc     60 02 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015d0                 | LR__0047
015d0                 | LR__0048
015d0     00 AC 06 F6 | 	mov	local04, #0
015d4     44 F3 9F FD | 	jmp	#LR__0001
015d8                 | LR__0049
015d8     E7 F0 03 F6 | 	mov	ptra, fp
015dc     F2 00 A0 FD | 	call	#popregs_
015e0                 | _edit_ret
015e0     2D 00 64 FD | 	ret
015e4                 | 
015e4                 | ' 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' ' 					A housekeepeer.
015e4                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
015e4                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
015e4                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' 
015e4                 | ' sub housekeeper
015e4                 | _housekeeper
015e4                 | ' 
015e4                 | ' do
015e4                 | LR__0050
015e4                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
015e4     49 64 06 F1 | 	add	objptr, #73
015e8                 | LR__0051
015e8     32 93 02 FB | 	rdlong	arg01, objptr
015ec     01 92 0E F2 | 	cmp	arg01, #1 wz
015f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
015f4     54 00 00 FF 
015f8     27 64 06 F1 | 	add	objptr, ##43047
015fc     32 93 02 FB | 	rdlong	arg01, objptr
01600     01 92 06 F1 | 	add	arg01, #1
01604     32 93 62 FC | 	wrlong	arg01, objptr
01608     54 00 00 FF 
0160c     70 64 86 F1 | 	sub	objptr, ##43120
01610     80 00 B0 FD | 	call	#_gethdi
01614     05 92 06 F6 | 	mov	arg01, #5
01618     D4 36 B2 FD | 	call	#__system___waitms
0161c     54 00 00 FF 
01620     70 64 06 F1 | 	add	objptr, ##43120
01624     32 93 02 FB | 	rdlong	arg01, objptr
01628     01 92 06 F1 | 	add	arg01, #1
0162c     32 93 62 FC | 	wrlong	arg01, objptr
01630     54 00 00 FF 
01634     70 64 86 F1 | 	sub	objptr, ##43120
01638     58 00 B0 FD | 	call	#_gethdi
0163c     05 92 06 F6 | 	mov	arg01, #5
01640     AC 36 B2 FD | 	call	#__system___waitms
01644     54 00 00 FF 
01648     70 64 06 F1 | 	add	objptr, ##43120
0164c     32 93 02 FB | 	rdlong	arg01, objptr
01650     01 92 06 F1 | 	add	arg01, #1
01654     32 93 62 FC | 	wrlong	arg01, objptr
01658     54 00 00 FF 
0165c     70 64 86 F1 | 	sub	objptr, ##43120
01660     30 00 B0 FD | 	call	#_gethdi
01664     05 92 06 F6 | 	mov	arg01, #5
01668     84 36 B2 FD | 	call	#__system___waitms
0166c     54 00 00 FF 
01670     70 64 06 F1 | 	add	objptr, ##43120
01674     32 93 02 FB | 	rdlong	arg01, objptr
01678     01 92 06 F1 | 	add	arg01, #1
0167c     32 93 62 FC | 	wrlong	arg01, objptr
01680     54 00 00 FF 
01684     70 64 86 F1 | 	sub	objptr, ##43120
01688     08 00 B0 FD | 	call	#_gethdi
0168c     54 FF 9F FD | 	jmp	#LR__0050
01690                 | _housekeeper_ret
01690     2D 00 64 FD | 	ret
01694                 | 
01694                 | ' 
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' 
01694                 | ' sub gethdi
01694                 | _gethdi
01694     0A CA 05 F6 | 	mov	COUNT_, #10
01698     E8 00 A0 FD | 	call	#pushregs_
0169c                 | '   x := mouse_xacc
0169c     14 00 00 FF 
016a0     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
016a4     3B 95 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
016a8                 | '   y := mouse_yacc
016a8     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016ac     3B 93 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
016b0     53 00 00 FF 
016b4     EC 64 06 F1 | 	add	objptr, ##42732
016b8     32 95 62 FC | 	wrlong	arg02, objptr
016bc     04 64 06 F1 | 	add	objptr, #4
016c0     32 93 62 FC | 	wrlong	arg01, objptr
016c4                 | '   x := 0
016c4                 | '   y := mouse_zacc
016c4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016c8     3B 7B 02 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
016cc     08 64 06 F1 | 	add	objptr, #8
016d0     32 7B 62 FC | 	wrlong	result1, objptr
016d4                 | '   return mouse_bstate
016d4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016d8     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
016dc     14 00 00 FF 
016e0     ED 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
016e4     04 64 86 F1 | 	sub	objptr, #4
016e8     32 7B 62 FC | 	wrlong	result1, objptr
016ec     53 00 00 FF 
016f0     F4 64 86 F1 | 	sub	objptr, ##42740
016f4     00 A6 06 F6 | 	mov	local01, #0
016f8                 | ' 
016f8                 | ' mousex,mousey=kbm.mouse_xy()
016f8                 | ' dummy,mousew=kbm.mouse_scroll()
016f8                 | ' mousek=kbm.mouse_buttons()
016f8                 | ' i=0
016f8                 | ' for j=0 to 6
016f8     00 A8 06 F6 | 	mov	local02, #0
016fc                 | LR__0060
016fc                 | '   if kbm.hidpad_id(j)>0 then
016fc     54 93 02 F6 | 	mov	arg01, local02
01700                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01700     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
01704     13 00 00 FF 
01708     F8 7B 06 F1 | 	add	result1, ##10232
0170c     05 92 66 F0 | 	shl	arg01, #5
01710     49 7B 02 F1 | 	add	result1, arg01
01714     3D 7B 02 FB | 	rdlong	result1, result1
01718     01 7A 56 F2 | 	cmps	result1, #1 wc
0171c     C8 01 90 CD |  if_b	jmp	#LR__0061
01720     54 93 02 F6 | 	mov	arg01, local02
01724     00 94 06 F6 | 	mov	arg02, #0
01728     7C 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0172c     3D AB 02 F6 | 	mov	local03, result1
01730     54 93 02 F6 | 	mov	arg01, local02
01734     01 94 06 F6 | 	mov	arg02, #1
01738     6C 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0173c     3D AD 02 F6 | 	mov	local04, result1
01740     54 93 02 F6 | 	mov	arg01, local02
01744     02 94 06 F6 | 	mov	arg02, #2
01748     5C 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0174c     3D AF 02 F6 | 	mov	local05, result1
01750     54 93 02 F6 | 	mov	arg01, local02
01754     00 94 06 F6 | 	mov	arg02, #0
01758     88 28 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
0175c     3D B1 02 F6 | 	mov	local06, result1
01760     54 93 02 F6 | 	mov	arg01, local02
01764     03 94 06 F6 | 	mov	arg02, #3
01768     3C 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0176c     3D B3 02 F6 | 	mov	local07, result1
01770     54 93 02 F6 | 	mov	arg01, local02
01774     04 94 06 F6 | 	mov	arg02, #4
01778     2C 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0177c     3D B5 02 F6 | 	mov	local08, result1
01780     54 93 02 F6 | 	mov	arg01, local02
01784     05 94 06 F6 | 	mov	arg02, #5
01788     1C 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0178c     3D B7 02 F6 | 	mov	local09, result1
01790     54 93 02 F6 | 	mov	arg01, local02
01794     06 94 06 F6 | 	mov	arg02, #6
01798     0C 28 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0179c     3D B9 02 F6 | 	mov	local10, result1
017a0     54 93 02 F6 | 	mov	arg01, local02
017a4     07 94 06 F6 | 	mov	arg02, #7
017a8     FC 27 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017ac     53 93 02 F6 | 	mov	arg01, local01
017b0     02 92 66 F0 | 	shl	arg01, #2
017b4     53 00 00 FF 
017b8     FC 64 06 F1 | 	add	objptr, ##42748
017bc     32 93 02 F1 | 	add	arg01, objptr
017c0     49 AB 62 FC | 	wrlong	local03, arg01
017c4     53 93 02 F6 | 	mov	arg01, local01
017c8     02 92 66 F0 | 	shl	arg01, #2
017cc     1C 64 06 F1 | 	add	objptr, #28
017d0     32 93 02 F1 | 	add	arg01, objptr
017d4     49 AD 62 FC | 	wrlong	local04, arg01
017d8     53 93 02 F6 | 	mov	arg01, local01
017dc     02 92 66 F0 | 	shl	arg01, #2
017e0     1C 64 06 F1 | 	add	objptr, #28
017e4     32 93 02 F1 | 	add	arg01, objptr
017e8     49 AF 62 FC | 	wrlong	local05, arg01
017ec     53 AF 02 F6 | 	mov	local05, local01
017f0     02 AE 66 F0 | 	shl	local05, #2
017f4     1C 64 06 F1 | 	add	objptr, #28
017f8     32 AF 02 F1 | 	add	local05, objptr
017fc     57 B1 62 FC | 	wrlong	local06, local05
01800     53 B1 02 F6 | 	mov	local06, local01
01804     02 B0 66 F0 | 	shl	local06, #2
01808     1C 64 06 F1 | 	add	objptr, #28
0180c     32 B1 02 F1 | 	add	local06, objptr
01810     58 B3 62 FC | 	wrlong	local07, local06
01814     53 B3 02 F6 | 	mov	local07, local01
01818     02 B2 66 F0 | 	shl	local07, #2
0181c     1C 64 06 F1 | 	add	objptr, #28
01820     32 B3 02 F1 | 	add	local07, objptr
01824     59 B5 62 FC | 	wrlong	local08, local07
01828     53 B5 02 F6 | 	mov	local08, local01
0182c     02 B4 66 F0 | 	shl	local08, #2
01830     1C 64 06 F1 | 	add	objptr, #28
01834     32 B5 02 F1 | 	add	local08, objptr
01838     5A B7 62 FC | 	wrlong	local09, local08
0183c     53 B7 02 F6 | 	mov	local09, local01
01840     02 B6 66 F0 | 	shl	local09, #2
01844     1C 64 06 F1 | 	add	objptr, #28
01848     32 B7 02 F1 | 	add	local09, objptr
0184c     5B B9 62 FC | 	wrlong	local10, local09
01850     53 B9 02 F6 | 	mov	local10, local01
01854     02 B8 66 F0 | 	shl	local10, #2
01858     1C 64 06 F1 | 	add	objptr, #28
0185c     32 B9 02 F1 | 	add	local10, objptr
01860     5C 7B 62 FC | 	wrlong	result1, local10
01864     60 00 00 FF 
01868     00 AA 06 F1 | 	add	local03, ##49152
0186c     0F AA 46 F0 | 	shr	local03, #15
01870     01 B8 06 F6 | 	mov	local10, #1
01874     55 B9 02 F1 | 	add	local10, local03
01878     60 00 00 FF 
0187c     00 AC 06 F1 | 	add	local04, ##49152
01880     0F AC 46 F0 | 	shr	local04, #15
01884     01 B6 06 F6 | 	mov	local09, #1
01888     56 B7 02 F1 | 	add	local09, local04
0188c     53 B5 02 F6 | 	mov	local08, local01
01890     02 B4 66 F0 | 	shl	local08, #2
01894     1C 64 06 F1 | 	add	objptr, #28
01898     32 B5 02 F1 | 	add	local08, objptr
0189c     02 B6 66 F0 | 	shl	local09, #2
018a0     5B B9 02 F1 | 	add	local10, local09
018a4     5A B9 62 FC | 	wrlong	local10, local08
018a8     53 B9 02 F6 | 	mov	local10, local01
018ac     02 B8 66 F0 | 	shl	local10, #2
018b0     1C 64 06 F1 | 	add	objptr, #28
018b4     32 B9 02 F1 | 	add	local10, objptr
018b8     54 93 02 F6 | 	mov	arg01, local02
018bc     54 00 00 FF 
018c0     14 64 86 F1 | 	sub	objptr, ##43028
018c4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
018c4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
018c8     13 00 00 FF 
018cc     F8 7B 06 F1 | 	add	result1, ##10232
018d0     05 92 66 F0 | 	shl	arg01, #5
018d4     49 7B 02 F1 | 	add	result1, arg01
018d8     18 7A 06 F1 | 	add	result1, #24
018dc     3D 7B 02 FB | 	rdlong	result1, result1
018e0     5C 7B 62 FC | 	wrlong	result1, local10
018e4     01 A6 06 F1 | 	add	local01, #1
018e8                 | LR__0061
018e8     01 A8 06 F1 | 	add	local02, #1
018ec     07 A8 16 F2 | 	cmp	local02, #7 wc
018f0     08 FE 9F CD |  if_b	jmp	#LR__0060
018f4     D7 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
018f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
018f8                 | LR__0062
018f8     07 A6 16 F2 | 	cmp	local01, #7 wc
018fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01900     53 B9 02 F6 | 	mov	local10, local01
01904     02 B8 66 F0 | 	shl	local10, #2
01908     53 00 00 FF 
0190c     F8 65 06 F1 | 	add	objptr, ##43000
01910     32 B9 02 F1 | 	add	local10, objptr
01914     5C 01 68 FC | 	wrlong	#0, local10
01918     53 B9 02 F6 | 	mov	local10, local01
0191c     02 B8 66 F0 | 	shl	local10, #2
01920     1C 64 06 F1 | 	add	objptr, #28
01924     32 B9 02 F1 | 	add	local10, objptr
01928     5C 01 68 FC | 	wrlong	#0, local10
0192c     01 A6 06 F1 | 	add	local01, #1
01930     54 00 00 FF 
01934     14 64 86 F1 | 	sub	objptr, ##43028
01938     BC FF 9F FD | 	jmp	#LR__0062
0193c                 | LR__0063
0193c                 | LR__0064
0193c     E7 F0 03 F6 | 	mov	ptra, fp
01940     F2 00 A0 FD | 	call	#popregs_
01944                 | _gethdi_ret
01944     2D 00 64 FD | 	ret
01948                 | 
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '
01948                 | ' '                                     LINE INTERPRETER/TOKENIZER
01948                 | ' '
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' 
01948                 | ' sub interpret
01948                 | _interpret
01948     34 CA 05 F6 | 	mov	COUNT_, #52
0194c     E8 00 A0 FD | 	call	#pushregs_
01950     01 00 00 FF 
01954     80 F0 07 F1 | 	add	ptra, ##640
01958     38 00 00 FF 
0195c     C0 65 06 F1 | 	add	objptr, ##29120
01960     32 93 02 FB | 	rdlong	arg01, objptr
01964     38 00 00 FF 
01968     C0 65 86 F1 | 	sub	objptr, ##29120
0196c     C4 4D B2 FD | 	call	#__system__RTrim_S
01970     3D 93 02 F6 | 	mov	arg01, result1
01974     FC 4C B2 FD | 	call	#__system__LTrim_S
01978     38 00 00 FF 
0197c     C4 65 06 F1 | 	add	objptr, ##29124
01980     32 7B 62 FC | 	wrlong	result1, objptr
01984     04 64 06 F1 | 	add	objptr, #4
01988     FF FF FF FF 
0198c     32 FF 6B FC | 	wrlong	##-1, objptr
01990     1B 00 00 FF 
01994     C4 64 06 F1 | 	add	objptr, ##14020
01998     32 01 68 FC | 	wrlong	#0, objptr
0199c     08 00 00 FF 
019a0     6C 64 86 F1 | 	sub	objptr, ##4204
019a4     32 01 68 FC | 	wrlong	#0, objptr
019a8     4C 00 00 FF 
019ac     20 64 86 F1 | 	sub	objptr, ##38944
019b0     00 A6 06 F6 | 	mov	local01, #0
019b4                 | LR__0070
019b4                 | ' 
019b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
019b4                 | ' 
019b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
019b4                 | ' 
019b4                 | ' 108 
019b4                 | ' for i=0 to 125: separators(i)=0 :next i
019b4     00 A8 06 F6 | 	mov	local02, #0
019b8     38 CE 05 F1 | 	add	fp, #56
019bc     D7 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
019c0                 | LR__0071
019c0     54 AB 02 F6 | 	mov	local03, local02
019c4     02 AA 66 F0 | 	shl	local03, #2
019c8     E7 AA 02 F1 | 	add	local03, fp
019cc     55 01 68 FC | 	wrlong	#0, local03
019d0     01 A8 06 F1 | 	add	local02, #1
019d4     7E A8 56 F2 | 	cmps	local02, #126 wc
019d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
019dc                 | LR__0072
019dc     38 CE 85 F1 | 	sub	fp, #56
019e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
019e0     00 A8 06 F6 | 	mov	local02, #0
019e4     36 00 00 FF 
019e8     B0 65 06 F1 | 	add	objptr, ##28080
019ec     D7 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
019f0                 | LR__0073
019f0     54 AD 02 F6 | 	mov	local04, local02
019f4     03 AC 66 F0 | 	shl	local04, #3
019f8     32 AD 02 F1 | 	add	local04, objptr
019fc     92 01 00 FF 
01a00     68 97 06 F6 | 	mov	arg03, ##@LR__5489
01a04     56 97 62 FC | 	wrlong	arg03, local04
01a08     54 AD 02 F6 | 	mov	local04, local02
01a0c     03 AC 66 F0 | 	shl	local04, #3
01a10     32 AF 02 F6 | 	mov	local05, objptr
01a14     32 AD 02 F1 | 	add	local04, objptr
01a18     00 B0 06 F6 | 	mov	local06, #0
01a1c     04 AC 06 F1 | 	add	local04, #4
01a20     56 01 68 FC | 	wrlong	#0, local04
01a24     01 A8 06 F1 | 	add	local02, #1
01a28     7E A8 56 F2 | 	cmps	local02, #126 wc
01a2c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01a30                 | LR__0074
01a30     02 00 00 FF 
01a34     10 64 06 F1 | 	add	objptr, ##1040
01a38     32 93 02 FB | 	rdlong	arg01, objptr
01a3c     38 00 00 FF 
01a40     C0 65 86 F1 | 	sub	objptr, ##29120
01a44     EC 4C B2 FD | 	call	#__system__RTrim_S
01a48     3D 93 02 F6 | 	mov	arg01, result1
01a4c     24 4C B2 FD | 	call	#__system__LTrim_S
01a50     38 00 00 FF 
01a54     C0 65 06 F1 | 	add	objptr, ##29120
01a58     32 7B 62 FC | 	wrlong	result1, objptr
01a5c     92 01 00 FF 
01a60     69 AD 06 F6 | 	mov	local04, ##@LR__5490
01a64     1B 00 00 FF 
01a68     08 65 06 F1 | 	add	objptr, ##14088
01a6c     32 AD 62 FC | 	wrlong	local04, objptr
01a70     1B 00 00 FF 
01a74     08 65 86 F1 | 	sub	objptr, ##14088
01a78     32 93 02 FB | 	rdlong	arg01, objptr
01a7c     38 00 00 FF 
01a80     C0 65 86 F1 | 	sub	objptr, ##29120
01a84     49 B3 02 F6 | 	mov	local07, arg01
01a88     D7 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01a8c                 | LR__0075
01a8c     59 7B CA FA | 	rdbyte	result1, local07 wz
01a90     01 B2 06 51 |  if_ne	add	local07, #1
01a94     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01a98                 | LR__0076
01a98     49 B3 8A F1 | 	sub	local07, arg01 wz
01a9c     54 00 00 FF 
01aa0     CC 64 06 F1 | 	add	objptr, ##43212
01aa4     32 B3 62 FC | 	wrlong	local07, objptr
01aa8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01aa8     54 00 00 FF 
01aac     CC 64 86 F1 | 	sub	objptr, ##43212
01ab0     E4 28 90 AD |  if_e	jmp	#LR__0210
01ab4     00 B4 06 F6 | 	mov	local08, #0
01ab8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01ab8                 | ' for i=1 to len(line$)
01ab8     01 A8 06 F6 | 	mov	local02, #1
01abc     38 00 00 FF 
01ac0     C0 65 06 F1 | 	add	objptr, ##29120
01ac4     32 93 02 FB | 	rdlong	arg01, objptr
01ac8     38 00 00 FF 
01acc     C0 65 86 F1 | 	sub	objptr, ##29120
01ad0     49 B3 02 F6 | 	mov	local07, arg01
01ad4     D7 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01ad8                 | LR__0077
01ad8     59 7B CA FA | 	rdbyte	result1, local07 wz
01adc     01 B2 06 51 |  if_ne	add	local07, #1
01ae0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01ae4                 | LR__0078
01ae4     49 B3 82 F1 | 	sub	local07, arg01
01ae8     59 B7 02 F6 | 	mov	local09, local07
01aec     01 B6 06 F1 | 	add	local09, #1
01af0                 | LR__0079
01af0     5B A9 52 F2 | 	cmps	local02, local09 wc
01af4     A4 00 90 3D |  if_ae	jmp	#LR__0081
01af8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01af8     38 00 00 FF 
01afc     C0 65 06 F1 | 	add	objptr, ##29120
01b00     32 93 02 FB | 	rdlong	arg01, objptr
01b04     38 00 00 FF 
01b08     C0 65 86 F1 | 	sub	objptr, ##29120
01b0c     54 95 02 F6 | 	mov	arg02, local02
01b10     01 96 06 F6 | 	mov	arg03, #1
01b14     A4 48 B2 FD | 	call	#__system__Mid_S
01b18     3D 93 02 F6 | 	mov	arg01, result1
01b1c     92 01 00 FF 
01b20     6A 95 06 F6 | 	mov	arg02, ##@LR__5491
01b24     FC 2E B2 FD | 	call	#__system___string_cmp
01b28     00 7A 0E F2 | 	cmp	result1, #0 wz
01b2c     00 B4 0E A2 |  if_e	cmp	local08, #0 wz
01b30     01 B4 06 A6 |  if_e	mov	local08, #1
01b34     3C 00 90 AD |  if_e	jmp	#LR__0080
01b38     38 00 00 FF 
01b3c     C0 65 06 F1 | 	add	objptr, ##29120
01b40     32 93 02 FB | 	rdlong	arg01, objptr
01b44     38 00 00 FF 
01b48     C0 65 86 F1 | 	sub	objptr, ##29120
01b4c     54 95 02 F6 | 	mov	arg02, local02
01b50     01 96 06 F6 | 	mov	arg03, #1
01b54     64 48 B2 FD | 	call	#__system__Mid_S
01b58     3D 93 02 F6 | 	mov	arg01, result1
01b5c     92 01 00 FF 
01b60     6C 95 06 F6 | 	mov	arg02, ##@LR__5492
01b64     BC 2E B2 FD | 	call	#__system___string_cmp
01b68     00 7A 0E F2 | 	cmp	result1, #0 wz
01b6c     01 B4 0E A2 |  if_e	cmp	local08, #1 wz
01b70     00 B4 06 A6 |  if_e	mov	local08, #0
01b74                 | LR__0080
01b74     54 AD 02 F6 | 	mov	local04, local02
01b78     03 AC 66 F0 | 	shl	local04, #3
01b7c     32 AF 02 F6 | 	mov	local05, objptr
01b80     36 00 00 FF 
01b84     B0 AF 06 F1 | 	add	local05, ##28080
01b88     57 AD 02 F1 | 	add	local04, local05
01b8c     04 AC 06 F1 | 	add	local04, #4
01b90     56 B5 62 FC | 	wrlong	local08, local04
01b94     01 A8 06 F1 | 	add	local02, #1
01b98     54 FF 9F FD | 	jmp	#LR__0079
01b9c                 | LR__0081
01b9c     01 A8 06 F6 | 	mov	local02, #1
01ba0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01ba0                 | LR__0082
01ba0     38 00 00 FF 
01ba4     C0 65 06 F1 | 	add	objptr, ##29120
01ba8     32 93 02 FB | 	rdlong	arg01, objptr
01bac     38 00 00 FF 
01bb0     C0 65 86 F1 | 	sub	objptr, ##29120
01bb4     54 95 02 F6 | 	mov	arg02, local02
01bb8     01 96 06 F6 | 	mov	arg03, #1
01bbc     FC 47 B2 FD | 	call	#__system__Mid_S
01bc0     3D 93 02 F6 | 	mov	arg01, result1
01bc4     92 01 00 FF 
01bc8     6E B9 06 F6 | 	mov	local10, ##@LR__5493
01bcc     5C 95 02 F6 | 	mov	arg02, local10
01bd0     50 2E B2 FD | 	call	#__system___string_cmp
01bd4     00 7A 0E F2 | 	cmp	result1, #0 wz
01bd8     2C 00 90 5D |  if_ne	jmp	#LR__0083
01bdc     54 AF 02 F6 | 	mov	local05, local02
01be0     03 AE 66 F0 | 	shl	local05, #3
01be4     32 B1 02 F6 | 	mov	local06, objptr
01be8     36 00 00 FF 
01bec     B0 B1 06 F1 | 	add	local06, ##28080
01bf0     58 AF 02 F1 | 	add	local05, local06
01bf4     04 AE 06 F1 | 	add	local05, #4
01bf8     57 BB 02 FB | 	rdlong	local11, local05
01bfc     04 AE 86 F1 | 	sub	local05, #4
01c00     5D BD 0A F6 | 	mov	local12, local11 wz
01c04     24 00 90 AD |  if_e	jmp	#LR__0084
01c08                 | LR__0083
01c08     54 00 00 FF 
01c0c     CC 64 06 F1 | 	add	objptr, ##43212
01c10     32 BF 02 FB | 	rdlong	local13, objptr
01c14     54 00 00 FF 
01c18     CC 64 86 F1 | 	sub	objptr, ##43212
01c1c     5F C1 02 F6 | 	mov	local14, local13
01c20     60 A9 52 F2 | 	cmps	local02, local14 wc
01c24     01 A8 06 C1 |  if_b	add	local02, #1
01c28     74 FF 9F CD |  if_b	jmp	#LR__0082
01c2c                 | LR__0084
01c2c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01c2c     54 00 00 FF 
01c30     CC 64 06 F1 | 	add	objptr, ##43212
01c34     32 AD 02 FB | 	rdlong	local04, objptr
01c38     54 00 00 FF 
01c3c     CC 64 86 F1 | 	sub	objptr, ##43212
01c40     56 A9 52 F2 | 	cmps	local02, local04 wc
01c44     A8 00 90 3D |  if_ae	jmp	#LR__0087
01c48     38 00 00 FF 
01c4c     C0 65 06 F1 | 	add	objptr, ##29120
01c50     32 B1 02 FB | 	rdlong	local06, objptr
01c54     38 00 00 FF 
01c58     C0 65 86 F1 | 	sub	objptr, ##29120
01c5c     58 93 02 F6 | 	mov	arg01, local06
01c60     49 B3 02 F6 | 	mov	local07, arg01
01c64     D7 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01c68                 | LR__0085
01c68     59 7B CA FA | 	rdbyte	result1, local07 wz
01c6c     01 B2 06 51 |  if_ne	add	local07, #1
01c70     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01c74                 | LR__0086
01c74     49 B3 82 F1 | 	sub	local07, arg01
01c78     59 AF 02 F6 | 	mov	local05, local07
01c7c     57 95 02 F6 | 	mov	arg02, local05
01c80     54 95 82 F1 | 	sub	arg02, local02
01c84     58 93 02 F6 | 	mov	arg01, local06
01c88     A0 46 B2 FD | 	call	#__system__Right_S
01c8c     3D 93 02 F6 | 	mov	arg01, result1
01c90     A0 4A B2 FD | 	call	#__system__RTrim_S
01c94     3D 93 02 F6 | 	mov	arg01, result1
01c98     D8 49 B2 FD | 	call	#__system__LTrim_S
01c9c     54 00 00 FF 
01ca0     D0 64 06 F1 | 	add	objptr, ##43216
01ca4     32 7B 62 FC | 	wrlong	result1, objptr
01ca8     1B 00 00 FF 
01cac     10 65 86 F1 | 	sub	objptr, ##14096
01cb0     32 93 02 FB | 	rdlong	arg01, objptr
01cb4     38 00 00 FF 
01cb8     C0 65 86 F1 | 	sub	objptr, ##29120
01cbc     01 A8 86 F1 | 	sub	local02, #1
01cc0     54 95 02 F6 | 	mov	arg02, local02
01cc4     DC 45 B2 FD | 	call	#__system__Left_S
01cc8     3D 93 02 F6 | 	mov	arg01, result1
01ccc     64 4A B2 FD | 	call	#__system__RTrim_S
01cd0     3D 93 02 F6 | 	mov	arg01, result1
01cd4     9C 49 B2 FD | 	call	#__system__LTrim_S
01cd8     38 00 00 FF 
01cdc     C0 65 06 F1 | 	add	objptr, ##29120
01ce0     32 7B 62 FC | 	wrlong	result1, objptr
01ce4     38 00 00 FF 
01ce8     C0 65 86 F1 | 	sub	objptr, ##29120
01cec     1C 00 90 FD | 	jmp	#LR__0088
01cf0                 | LR__0087
01cf0     92 01 00 FF 
01cf4     70 AD 06 F6 | 	mov	local04, ##@LR__5494
01cf8     54 00 00 FF 
01cfc     D0 64 06 F1 | 	add	objptr, ##43216
01d00     32 AD 62 FC | 	wrlong	local04, objptr
01d04     54 00 00 FF 
01d08     D0 64 86 F1 | 	sub	objptr, ##43216
01d0c                 | LR__0088
01d0c                 | ' 
01d0c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01d0c     38 00 00 FF 
01d10     C8 65 06 F1 | 	add	objptr, ##29128
01d14     32 AD 02 FB | 	rdlong	local04, objptr
01d18     38 00 00 FF 
01d1c     C8 65 86 F1 | 	sub	objptr, ##29128
01d20     FF FF 7F FF 
01d24     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d28     40 00 90 5D |  if_ne	jmp	#LR__0089
01d2c     54 00 00 FF 
01d30     D0 64 06 F1 | 	add	objptr, ##43216
01d34     32 93 02 FB | 	rdlong	arg01, objptr
01d38     54 00 00 FF 
01d3c     D0 64 86 F1 | 	sub	objptr, ##43216
01d40     92 01 00 FF 
01d44     71 B1 06 F6 | 	mov	local06, ##@LR__5495
01d48     58 95 02 F6 | 	mov	arg02, local06
01d4c     D4 2C B2 FD | 	call	#__system___string_cmp
01d50     00 7A 0E F2 | 	cmp	result1, #0 wz
01d54     38 00 00 5F 
01d58     C8 65 06 51 |  if_ne	add	objptr, ##29128
01d5c     32 01 68 5C |  if_ne	wrlong	#0, objptr
01d60     38 00 00 5F 
01d64     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01d68     08 01 90 5D |  if_ne	jmp	#LR__0093
01d6c                 | LR__0089
01d6c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01d6c     38 00 00 FF 
01d70     C8 65 06 F1 | 	add	objptr, ##29128
01d74     32 AD 02 FB | 	rdlong	local04, objptr
01d78     38 00 00 FF 
01d7c     C8 65 86 F1 | 	sub	objptr, ##29128
01d80     FF FF 7F FF 
01d84     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d88     3C 00 90 5D |  if_ne	jmp	#LR__0090
01d8c     54 00 00 FF 
01d90     D0 64 06 F1 | 	add	objptr, ##43216
01d94     32 93 02 FB | 	rdlong	arg01, objptr
01d98     54 00 00 FF 
01d9c     D0 64 86 F1 | 	sub	objptr, ##43216
01da0     92 01 00 FF 
01da4     72 95 06 F6 | 	mov	arg02, ##@LR__5496
01da8     78 2C B2 FD | 	call	#__system___string_cmp
01dac     00 7A 0E F2 | 	cmp	result1, #0 wz
01db0     38 00 00 AF 
01db4     C8 65 06 A1 |  if_e	add	objptr, ##29128
01db8     32 07 68 AC |  if_e	wrlong	#3, objptr
01dbc     38 00 00 AF 
01dc0     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01dc4     AC 00 90 AD |  if_e	jmp	#LR__0093
01dc8                 | LR__0090
01dc8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01dc8     38 00 00 FF 
01dcc     C8 65 06 F1 | 	add	objptr, ##29128
01dd0     32 AD 02 FB | 	rdlong	local04, objptr
01dd4     38 00 00 FF 
01dd8     C8 65 86 F1 | 	sub	objptr, ##29128
01ddc     04 AC 0E F2 | 	cmp	local04, #4 wz
01de0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01de4     54 00 00 FF 
01de8     D0 64 06 F1 | 	add	objptr, ##43216
01dec     32 93 02 FB | 	rdlong	arg01, objptr
01df0     54 00 00 FF 
01df4     D0 64 86 F1 | 	sub	objptr, ##43216
01df8     92 01 00 FF 
01dfc     73 95 06 F6 | 	mov	arg02, ##@LR__5497
01e00     20 2C B2 FD | 	call	#__system___string_cmp
01e04     00 7A 0E F2 | 	cmp	result1, #0 wz
01e08     38 00 00 5F 
01e0c     C8 65 06 51 |  if_ne	add	objptr, ##29128
01e10     32 03 68 5C |  if_ne	wrlong	#1, objptr
01e14     38 00 00 5F 
01e18     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01e1c     54 00 90 5D |  if_ne	jmp	#LR__0093
01e20                 | LR__0091
01e20                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01e20     38 00 00 FF 
01e24     C8 65 06 F1 | 	add	objptr, ##29128
01e28     32 AD 02 FB | 	rdlong	local04, objptr
01e2c     38 00 00 FF 
01e30     C8 65 86 F1 | 	sub	objptr, ##29128
01e34     04 AC 0E F2 | 	cmp	local04, #4 wz
01e38     38 00 90 5D |  if_ne	jmp	#LR__0092
01e3c     54 00 00 FF 
01e40     D0 64 06 F1 | 	add	objptr, ##43216
01e44     32 93 02 FB | 	rdlong	arg01, objptr
01e48     54 00 00 FF 
01e4c     D0 64 86 F1 | 	sub	objptr, ##43216
01e50     92 01 00 FF 
01e54     74 95 06 F6 | 	mov	arg02, ##@LR__5498
01e58     C8 2B B2 FD | 	call	#__system___string_cmp
01e5c     00 7A 0E F2 | 	cmp	result1, #0 wz
01e60     38 00 00 AF 
01e64     C8 65 06 A1 |  if_e	add	objptr, ##29128
01e68     32 05 68 AC |  if_e	wrlong	#2, objptr
01e6c     38 00 00 AF 
01e70     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01e74                 | LR__0092
01e74                 | LR__0093
01e74     38 CE 05 F1 | 	add	fp, #56
01e78     E7 00 68 FC | 	wrlong	#0, fp
01e7c     38 CE 85 F1 | 	sub	fp, #56
01e80     00 A8 06 F6 | 	mov	local02, #0
01e84     01 C2 06 F6 | 	mov	local15, #1
01e88                 | ' 
01e88                 | ' ' 1b: find separators
01e88                 | ' 
01e88                 | ' 107
01e88                 | ' separators(0)=0
01e88                 | ' i=0: j=1
01e88                 | ' do: 
01e88                 | LR__0094
01e88     01 A8 06 F1 | 	add	local02, #1
01e8c     38 00 00 FF 
01e90     C0 65 06 F1 | 	add	objptr, ##29120
01e94     32 93 02 FB | 	rdlong	arg01, objptr
01e98     38 00 00 FF 
01e9c     C0 65 86 F1 | 	sub	objptr, ##29120
01ea0     54 95 02 F6 | 	mov	arg02, local02
01ea4     01 96 06 F6 | 	mov	arg03, #1
01ea8     10 45 B2 FD | 	call	#__system__Mid_S
01eac     3D C5 02 F6 | 	mov	local16, result1
01eb0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01eb0     62 93 02 F6 | 	mov	arg01, local16
01eb4     48 2D B0 FD | 	call	#_isseparator
01eb8     00 7A 0E F2 | 	cmp	result1, #0 wz
01ebc     1C 00 90 AD |  if_e	jmp	#LR__0095
01ec0     61 AB 02 F6 | 	mov	local03, local15
01ec4     02 AA 66 F0 | 	shl	local03, #2
01ec8     E7 B8 02 F6 | 	mov	local10, fp
01ecc     38 B8 06 F1 | 	add	local10, #56
01ed0     5C AB 02 F1 | 	add	local03, local10
01ed4     55 A9 62 FC | 	wrlong	local02, local03
01ed8     01 C2 06 F1 | 	add	local15, #1
01edc                 | LR__0095
01edc     54 00 00 FF 
01ee0     CC 64 06 F1 | 	add	objptr, ##43212
01ee4     32 AD 02 FB | 	rdlong	local04, objptr
01ee8     54 00 00 FF 
01eec     CC 64 86 F1 | 	sub	objptr, ##43212
01ef0     56 A9 5A F2 | 	cmps	local02, local04 wcz
01ef4     90 FF 9F ED |  if_be	jmp	#LR__0094
01ef8     61 AB 02 F6 | 	mov	local03, local15
01efc     02 AA 66 F0 | 	shl	local03, #2
01f00     E7 B8 02 F6 | 	mov	local10, fp
01f04     38 B8 06 F1 | 	add	local10, #56
01f08     5C AB 02 F1 | 	add	local03, local10
01f0c     55 A9 62 FC | 	wrlong	local02, local03
01f10     00 C6 06 F6 | 	mov	local17, #0
01f14                 | ' for i=0 to j-1 
01f14     00 A8 06 F6 | 	mov	local02, #0
01f18     61 C9 02 F6 | 	mov	local18, local15
01f1c                 | LR__0096
01f1c     64 A9 52 F2 | 	cmps	local02, local18 wc
01f20     48 01 90 3D |  if_ae	jmp	#LR__0100
01f24     54 AB 02 F6 | 	mov	local03, local02
01f28     02 AA 66 F0 | 	shl	local03, #2
01f2c     38 CE 05 F1 | 	add	fp, #56
01f30     E7 AA 02 F1 | 	add	local03, fp
01f34     55 AF 02 FB | 	rdlong	local05, local03
01f38     54 00 00 FF 
01f3c     D8 64 06 F1 | 	add	objptr, ##43224
01f40     32 AF 62 FC | 	wrlong	local05, objptr
01f44     54 AB 02 F6 | 	mov	local03, local02
01f48     01 AA 06 F1 | 	add	local03, #1
01f4c     02 AA 66 F0 | 	shl	local03, #2
01f50     E7 B8 02 F6 | 	mov	local10, fp
01f54     E7 AA 02 F1 | 	add	local03, fp
01f58     55 AF 02 FB | 	rdlong	local05, local03
01f5c     04 64 06 F1 | 	add	objptr, #4
01f60     32 AF 62 FC | 	wrlong	local05, objptr
01f64                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f64     04 64 86 F1 | 	sub	objptr, #4
01f68     32 AD 02 FB | 	rdlong	local04, objptr
01f6c     54 00 00 FF 
01f70     D8 64 86 F1 | 	sub	objptr, ##43224
01f74     01 AC 56 F2 | 	cmps	local04, #1 wc
01f78     38 CE 85 F1 | 	sub	fp, #56
01f7c     64 00 90 CD |  if_b	jmp	#LR__0098
01f80     38 00 00 FF 
01f84     C0 65 06 F1 | 	add	objptr, ##29120
01f88     32 93 02 FB | 	rdlong	arg01, objptr
01f8c     1B 00 00 FF 
01f90     18 65 06 F1 | 	add	objptr, ##14104
01f94     32 95 02 FB | 	rdlong	arg02, objptr
01f98     54 00 00 FF 
01f9c     D8 64 86 F1 | 	sub	objptr, ##43224
01fa0     01 96 06 F6 | 	mov	arg03, #1
01fa4     14 44 B2 FD | 	call	#__system__Mid_S
01fa8     3D CB 02 F6 | 	mov	local19, result1
01fac     92 01 00 FF 
01fb0     75 95 06 F6 | 	mov	arg02, ##@LR__5499
01fb4     65 93 02 F6 | 	mov	arg01, local19
01fb8     68 2A B2 FD | 	call	#__system___string_cmp
01fbc     00 7A 0E F2 | 	cmp	result1, #0 wz
01fc0     20 00 90 AD |  if_e	jmp	#LR__0097
01fc4     63 B9 02 F6 | 	mov	local10, local17
01fc8     03 B8 66 F0 | 	shl	local10, #3
01fcc     32 AF 02 F6 | 	mov	local05, objptr
01fd0     36 00 00 FF 
01fd4     B0 AF 06 F1 | 	add	local05, ##28080
01fd8     57 B9 02 F1 | 	add	local10, local05
01fdc     5C CB 62 FC | 	wrlong	local19, local10
01fe0     01 C6 06 F1 | 	add	local17, #1
01fe4                 | LR__0097
01fe4                 | LR__0098
01fe4     38 00 00 FF 
01fe8     C0 65 06 F1 | 	add	objptr, ##29120
01fec     32 93 02 FB | 	rdlong	arg01, objptr
01ff0     1B 00 00 FF 
01ff4     18 65 06 F1 | 	add	objptr, ##14104
01ff8     32 95 02 FB | 	rdlong	arg02, objptr
01ffc     01 94 06 F1 | 	add	arg02, #1
02000     04 64 06 F1 | 	add	objptr, #4
02004     32 97 02 FB | 	rdlong	arg03, objptr
02008     04 64 86 F1 | 	sub	objptr, #4
0200c     32 BB 02 FB | 	rdlong	local11, objptr
02010     54 00 00 FF 
02014     D8 64 86 F1 | 	sub	objptr, ##43224
02018     5D BD 02 F6 | 	mov	local12, local11
0201c     5E 97 82 F1 | 	sub	arg03, local12
02020     01 96 86 F1 | 	sub	arg03, #1
02024     94 43 B2 FD | 	call	#__system__Mid_S
02028     3D CB 02 F6 | 	mov	local19, result1
0202c                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
0202c     92 01 00 FF 
02030     76 95 06 F6 | 	mov	arg02, ##@LR__5500
02034     65 93 02 F6 | 	mov	arg01, local19
02038     E8 29 B2 FD | 	call	#__system___string_cmp
0203c     00 7A 0E F2 | 	cmp	result1, #0 wz
02040     20 00 90 AD |  if_e	jmp	#LR__0099
02044     63 B9 02 F6 | 	mov	local10, local17
02048     03 B8 66 F0 | 	shl	local10, #3
0204c     32 AF 02 F6 | 	mov	local05, objptr
02050     36 00 00 FF 
02054     B0 AF 06 F1 | 	add	local05, ##28080
02058     57 B9 02 F1 | 	add	local10, local05
0205c     5C CB 62 FC | 	wrlong	local19, local10
02060     01 C6 06 F1 | 	add	local17, #1
02064                 | LR__0099
02064     01 A8 06 F1 | 	add	local02, #1
02068     B0 FE 9F FD | 	jmp	#LR__0096
0206c                 | LR__0100
0206c                 | ' 
0206c                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
0206c                 | ' 
0206c                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
0206c     38 00 00 FF 
02070     C8 65 06 F1 | 	add	objptr, ##29128
02074     32 AD 0A FB | 	rdlong	local04, objptr wz
02078     38 00 00 FF 
0207c     C8 65 86 F1 | 	sub	objptr, ##29128
02080     38 00 00 5F 
02084     C8 65 06 51 |  if_ne	add	objptr, ##29128
02088     32 B9 02 5B |  if_ne	rdlong	local10, objptr
0208c     38 00 00 5F 
02090     C8 65 86 51 |  if_ne	sub	objptr, ##29128
02094     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
02098     C0 00 90 5D |  if_ne	jmp	#LR__0103
0209c     36 00 00 FF 
020a0     B0 65 06 F1 | 	add	objptr, ##28080
020a4     32 BB 02 FB | 	rdlong	local11, objptr
020a8     36 00 00 FF 
020ac     B0 65 86 F1 | 	sub	objptr, ##28080
020b0     5D 93 02 F6 | 	mov	arg01, local11
020b4     2C 50 B0 FD | 	call	#_isdec
020b8     3D BD 02 F6 | 	mov	local12, result1
020bc     5E B1 02 F6 | 	mov	local06, local12
020c0     07 B0 66 F7 | 	signx	local06, #7
020c4     58 B1 22 F6 | 	not	local06, local06
020c8     00 B0 0E F2 | 	cmp	local06, #0 wz
020cc     8C 00 90 AD |  if_e	jmp	#LR__0103
020d0     63 A9 02 F6 | 	mov	local02, local17
020d4     36 00 00 FF 
020d8     B0 65 06 F1 | 	add	objptr, ##28080
020dc     D7 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
020e0                 | LR__0101
020e0     54 AF 02 F6 | 	mov	local05, local02
020e4     01 AE 86 F1 | 	sub	local05, #1
020e8     03 AE 66 F0 | 	shl	local05, #3
020ec     32 AF 02 F1 | 	add	local05, objptr
020f0     57 AD 02 FB | 	rdlong	local04, local05
020f4     54 B1 02 F6 | 	mov	local06, local02
020f8     01 B0 86 F1 | 	sub	local06, #1
020fc     03 B0 66 F0 | 	shl	local06, #3
02100     32 B1 02 F1 | 	add	local06, objptr
02104     04 B0 06 F1 | 	add	local06, #4
02108     58 AB 02 FB | 	rdlong	local03, local06
0210c     54 B1 02 F6 | 	mov	local06, local02
02110     03 B0 66 F0 | 	shl	local06, #3
02114     32 BD 02 F6 | 	mov	local12, objptr
02118     32 B1 02 F1 | 	add	local06, objptr
0211c     58 AD 62 FC | 	wrlong	local04, local06
02120     54 BB 02 F6 | 	mov	local11, local02
02124     5D BF 02 F6 | 	mov	local13, local11
02128     03 BE 66 F0 | 	shl	local13, #3
0212c     32 BF 02 F1 | 	add	local13, objptr
02130     04 BE 06 F1 | 	add	local13, #4
02134     5F AB 62 FC | 	wrlong	local03, local13
02138     01 A8 86 F1 | 	sub	local02, #1
0213c     01 A8 56 F2 | 	cmps	local02, #1 wc
02140     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02144                 | LR__0102
02144     92 01 00 FF 
02148     77 AD 06 F6 | 	mov	local04, ##@LR__5501
0214c     32 AD 62 FC | 	wrlong	local04, objptr
02150     36 00 00 FF 
02154     B0 65 86 F1 | 	sub	objptr, ##28080
02158     01 C6 06 F1 | 	add	local17, #1
0215c                 | LR__0103
0215c     00 A8 06 F6 | 	mov	local02, #0
02160                 | ' 
02160                 | ' ' 1e : find strings
02160                 | ' 
02160                 | ' i=0
02160                 | ' do
02160                 | LR__0104
02160                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02160     54 AF 02 F6 | 	mov	local05, local02
02164     03 AE 66 F0 | 	shl	local05, #3
02168     32 B1 02 F6 | 	mov	local06, objptr
0216c     36 00 00 FF 
02170     B0 B1 06 F1 | 	add	local06, ##28080
02174     58 AF 02 F1 | 	add	local05, local06
02178     57 93 02 FB | 	rdlong	arg01, local05
0217c     92 01 00 FF 
02180     79 95 06 F6 | 	mov	arg02, ##@LR__5502
02184     9C 28 B2 FD | 	call	#__system___string_cmp
02188     00 7A 0E F2 | 	cmp	result1, #0 wz
0218c     01 A8 06 51 |  if_ne	add	local02, #1
02190     20 01 90 5D |  if_ne	jmp	#LR__0109
02194     54 CD 02 F6 | 	mov	local20, local02
02198                 | LR__0105
02198     54 B9 02 F6 | 	mov	local10, local02
0219c     01 B8 06 F1 | 	add	local10, #1
021a0     03 B8 66 F0 | 	shl	local10, #3
021a4     36 00 00 FF 
021a8     B0 65 06 F1 | 	add	objptr, ##28080
021ac     32 B9 02 F1 | 	add	local10, objptr
021b0     5C CB 02 FB | 	rdlong	local19, local10
021b4     66 B9 02 F6 | 	mov	local10, local20
021b8     03 B8 66 F0 | 	shl	local10, #3
021bc     32 B9 02 F1 | 	add	local10, objptr
021c0     66 BB 02 F6 | 	mov	local11, local20
021c4     5D C1 02 F6 | 	mov	local14, local11
021c8     03 C0 66 F0 | 	shl	local14, #3
021cc     32 C1 02 F1 | 	add	local14, objptr
021d0     60 93 02 FB | 	rdlong	arg01, local14
021d4     65 BD 02 F6 | 	mov	local12, local19
021d8     5E 95 02 F6 | 	mov	arg02, local12
021dc     36 00 00 FF 
021e0     B0 65 86 F1 | 	sub	objptr, ##28080
021e4     70 28 B2 FD | 	call	#__system___string_concat
021e8     5C 7B 62 FC | 	wrlong	result1, local10
021ec     54 C3 02 F6 | 	mov	local15, local02
021f0     01 C2 06 F1 | 	add	local15, #1
021f4     63 CF 02 F6 | 	mov	local21, local17
021f8     01 CE 06 F1 | 	add	local21, #1
021fc     D7 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02200                 | LR__0106
02200     67 C3 52 F2 | 	cmps	local15, local21 wc
02204     70 00 90 3D |  if_ae	jmp	#LR__0108
02208     61 AF 02 F6 | 	mov	local05, local15
0220c     01 AE 06 F1 | 	add	local05, #1
02210     03 AE 66 F0 | 	shl	local05, #3
02214     36 00 00 FF 
02218     B0 65 06 F1 | 	add	objptr, ##28080
0221c     32 AF 02 F1 | 	add	local05, objptr
02220     57 AD 02 FB | 	rdlong	local04, local05
02224     61 B1 02 F6 | 	mov	local06, local15
02228     01 B0 06 F1 | 	add	local06, #1
0222c     03 B0 66 F0 | 	shl	local06, #3
02230     32 B1 02 F1 | 	add	local06, objptr
02234     04 B0 06 F1 | 	add	local06, #4
02238     58 AB 02 FB | 	rdlong	local03, local06
0223c     61 B1 02 F6 | 	mov	local06, local15
02240     03 B0 66 F0 | 	shl	local06, #3
02244     32 BD 02 F6 | 	mov	local12, objptr
02248     32 B1 02 F1 | 	add	local06, objptr
0224c     58 AD 62 FC | 	wrlong	local04, local06
02250     61 BB 02 F6 | 	mov	local11, local15
02254     5D BF 02 F6 | 	mov	local13, local11
02258     03 BE 66 F0 | 	shl	local13, #3
0225c     32 BF 02 F1 | 	add	local13, objptr
02260     04 BE 06 F1 | 	add	local13, #4
02264     5F AB 62 FC | 	wrlong	local03, local13
02268     01 C2 06 F1 | 	add	local15, #1
0226c     36 00 00 FF 
02270     B0 65 86 F1 | 	sub	objptr, ##28080
02274     88 FF 9F FD | 	jmp	#LR__0106
02278                 | LR__0107
02278                 | LR__0108
02278     01 C6 86 F1 | 	sub	local17, #1
0227c     92 01 00 FF 
02280     7B 95 06 F6 | 	mov	arg02, ##@LR__5503
02284     65 93 02 F6 | 	mov	arg01, local19
02288     98 27 B2 FD | 	call	#__system___string_cmp
0228c     00 7A 0E F2 | 	cmp	result1, #0 wz
02290     63 A9 52 52 |  if_ne	cmps	local02, local17 wc
02294     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02298                 | '   if p$<>"""" then k+=1:i+=1
02298     92 01 00 FF 
0229c     7D 95 06 F6 | 	mov	arg02, ##@LR__5504
022a0     65 93 02 F6 | 	mov	arg01, local19
022a4     7C 27 B2 FD | 	call	#__system___string_cmp
022a8     00 7A 0E F2 | 	cmp	result1, #0 wz
022ac     01 C6 06 51 |  if_ne	add	local17, #1
022b0     01 A8 06 51 |  if_ne	add	local02, #1
022b4                 | LR__0109
022b4     63 A9 52 F2 | 	cmps	local02, local17 wc
022b8     A4 FE 9F CD |  if_b	jmp	#LR__0104
022bc     00 A8 06 F6 | 	mov	local02, #0
022c0                 | ' 
022c0                 | ' ' 1f : concatenate strings if "" detected between
022c0                 | '  
022c0                 | ' i=0
022c0                 | ' do
022c0                 | LR__0110
022c0                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
022c0     54 AF 02 F6 | 	mov	local05, local02
022c4     03 AE 66 F0 | 	shl	local05, #3
022c8     32 B1 02 F6 | 	mov	local06, objptr
022cc     36 00 00 FF 
022d0     B0 B1 06 F1 | 	add	local06, ##28080
022d4     58 AF 02 F1 | 	add	local05, local06
022d8     57 93 02 FB | 	rdlong	arg01, local05
022dc     01 94 06 F6 | 	mov	arg02, #1
022e0     48 40 B2 FD | 	call	#__system__Right_S
022e4     3D 93 02 F6 | 	mov	arg01, result1
022e8     92 01 00 FF 
022ec     7F 95 06 F6 | 	mov	arg02, ##@LR__5505
022f0     30 27 B2 FD | 	call	#__system___string_cmp
022f4     00 7A 0E F2 | 	cmp	result1, #0 wz
022f8     74 01 90 5D |  if_ne	jmp	#LR__0116
022fc     54 B1 02 F6 | 	mov	local06, local02
02300     01 B0 06 F1 | 	add	local06, #1
02304     03 B0 66 F0 | 	shl	local06, #3
02308     32 BD 02 F6 | 	mov	local12, objptr
0230c     36 00 00 FF 
02310     B0 BD 06 F1 | 	add	local12, ##28080
02314     5E B1 02 F1 | 	add	local06, local12
02318     58 93 02 FB | 	rdlong	arg01, local06
0231c     01 94 06 F6 | 	mov	arg02, #1
02320     80 3F B2 FD | 	call	#__system__Left_S
02324     3D 93 02 F6 | 	mov	arg01, result1
02328     92 01 00 FF 
0232c     81 95 06 F6 | 	mov	arg02, ##@LR__5506
02330     F0 26 B2 FD | 	call	#__system___string_cmp
02334     00 7A 0E F2 | 	cmp	result1, #0 wz
02338     34 01 90 5D |  if_ne	jmp	#LR__0116
0233c     54 B9 02 F6 | 	mov	local10, local02
02340     03 B8 66 F0 | 	shl	local10, #3
02344     36 00 00 FF 
02348     B0 65 06 F1 | 	add	objptr, ##28080
0234c     32 B9 02 F1 | 	add	local10, objptr
02350     54 C1 02 F6 | 	mov	local14, local02
02354     03 C0 66 F0 | 	shl	local14, #3
02358     32 C1 02 F1 | 	add	local14, objptr
0235c     60 B1 02 FB | 	rdlong	local06, local14
02360     54 BF 02 F6 | 	mov	local13, local02
02364     01 BE 06 F1 | 	add	local13, #1
02368     03 BE 66 F0 | 	shl	local13, #3
0236c     32 BF 02 F1 | 	add	local13, objptr
02370     5F BD 02 FB | 	rdlong	local12, local13
02374     54 D1 02 F6 | 	mov	local22, local02
02378     01 D0 06 F1 | 	add	local22, #1
0237c     68 D3 02 F6 | 	mov	local23, local22
02380     03 D2 66 F0 | 	shl	local23, #3
02384     32 D5 02 F6 | 	mov	local24, objptr
02388     32 D3 02 F1 | 	add	local23, objptr
0238c     69 93 02 FB | 	rdlong	arg01, local23
02390     36 00 00 FF 
02394     B0 65 86 F1 | 	sub	objptr, ##28080
02398     49 B3 02 F6 | 	mov	local07, arg01
0239c     D7 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
023a0                 | LR__0111
023a0     59 7B CA FA | 	rdbyte	result1, local07 wz
023a4     01 B2 06 51 |  if_ne	add	local07, #1
023a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
023ac                 | LR__0112
023ac     49 B3 82 F1 | 	sub	local07, arg01
023b0     59 BB 02 F6 | 	mov	local11, local07
023b4     01 BA 86 F1 | 	sub	local11, #1
023b8     5E 93 02 F6 | 	mov	arg01, local12
023bc     5D 95 02 F6 | 	mov	arg02, local11
023c0     68 3F B2 FD | 	call	#__system__Right_S
023c4     3D BD 02 F6 | 	mov	local12, result1
023c8     58 93 02 F6 | 	mov	arg01, local06
023cc     5E 95 02 F6 | 	mov	arg02, local12
023d0     84 26 B2 FD | 	call	#__system___string_concat
023d4     3D B1 02 F6 | 	mov	local06, result1
023d8     5C B1 62 FC | 	wrlong	local06, local10
023dc                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
023dc     54 C3 02 F6 | 	mov	local15, local02
023e0     01 C2 06 F1 | 	add	local15, #1
023e4     63 D7 02 F6 | 	mov	local25, local17
023e8     01 D6 06 F1 | 	add	local25, #1
023ec     D7 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
023f0                 | LR__0113
023f0     6B C3 52 F2 | 	cmps	local15, local25 wc
023f4     70 00 90 3D |  if_ae	jmp	#LR__0115
023f8     61 AF 02 F6 | 	mov	local05, local15
023fc     01 AE 06 F1 | 	add	local05, #1
02400     03 AE 66 F0 | 	shl	local05, #3
02404     36 00 00 FF 
02408     B0 65 06 F1 | 	add	objptr, ##28080
0240c     32 AF 02 F1 | 	add	local05, objptr
02410     57 AD 02 FB | 	rdlong	local04, local05
02414     61 B1 02 F6 | 	mov	local06, local15
02418     01 B0 06 F1 | 	add	local06, #1
0241c     03 B0 66 F0 | 	shl	local06, #3
02420     32 B1 02 F1 | 	add	local06, objptr
02424     04 B0 06 F1 | 	add	local06, #4
02428     58 AB 02 FB | 	rdlong	local03, local06
0242c     61 B1 02 F6 | 	mov	local06, local15
02430     03 B0 66 F0 | 	shl	local06, #3
02434     32 BD 02 F6 | 	mov	local12, objptr
02438     32 B1 02 F1 | 	add	local06, objptr
0243c     58 AD 62 FC | 	wrlong	local04, local06
02440     61 BB 02 F6 | 	mov	local11, local15
02444     5D BF 02 F6 | 	mov	local13, local11
02448     03 BE 66 F0 | 	shl	local13, #3
0244c     32 BF 02 F1 | 	add	local13, objptr
02450     04 BE 06 F1 | 	add	local13, #4
02454     5F AB 62 FC | 	wrlong	local03, local13
02458     01 C2 06 F1 | 	add	local15, #1
0245c     36 00 00 FF 
02460     B0 65 86 F1 | 	sub	objptr, ##28080
02464     88 FF 9F FD | 	jmp	#LR__0113
02468                 | LR__0114
02468                 | LR__0115
02468     01 A8 86 F1 | 	sub	local02, #1
0246c     01 C6 86 F1 | 	sub	local17, #1
02470                 | LR__0116
02470     01 A8 06 F1 | 	add	local02, #1
02474     63 A9 52 F2 | 	cmps	local02, local17 wc
02478     44 FE 9F CD |  if_b	jmp	#LR__0110
0247c     00 A8 06 F6 | 	mov	local02, #0
02480                 | '  
02480                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02480                 | '  
02480                 | ' i=0 
02480                 | ' do
02480                 | LR__0117
02480     54 B9 02 F6 | 	mov	local10, local02
02484     03 B8 66 F0 | 	shl	local10, #3
02488     36 00 00 FF 
0248c     B0 65 06 F1 | 	add	objptr, ##28080
02490     32 B9 02 F1 | 	add	local10, objptr
02494     5C D9 02 FB | 	rdlong	local26, local10
02498     54 B9 02 F6 | 	mov	local10, local02
0249c     01 B8 06 F1 | 	add	local10, #1
024a0     03 B8 66 F0 | 	shl	local10, #3
024a4     32 B9 02 F1 | 	add	local10, objptr
024a8     5C DB 02 FB | 	rdlong	local27, local10
024ac                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
024ac                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
024ac     92 01 00 FF 
024b0     83 95 06 F6 | 	mov	arg02, ##@LR__5507
024b4     6C 93 02 F6 | 	mov	arg01, local26
024b8     36 00 00 FF 
024bc     B0 65 86 F1 | 	sub	objptr, ##28080
024c0     60 25 B2 FD | 	call	#__system___string_cmp
024c4     00 7A 0E F2 | 	cmp	result1, #0 wz
024c8     A8 00 90 AD |  if_e	jmp	#LR__0118
024cc     92 01 00 FF 
024d0     85 95 06 F6 | 	mov	arg02, ##@LR__5508
024d4     6C 93 02 F6 | 	mov	arg01, local26
024d8     48 25 B2 FD | 	call	#__system___string_cmp
024dc     3D AB 0A F6 | 	mov	local03, result1 wz
024e0     90 00 90 AD |  if_e	jmp	#LR__0118
024e4     92 01 00 FF 
024e8     87 B1 06 F6 | 	mov	local06, ##@LR__5509
024ec     6C 93 02 F6 | 	mov	arg01, local26
024f0     58 95 02 F6 | 	mov	arg02, local06
024f4     2C 25 B2 FD | 	call	#__system___string_cmp
024f8     00 7A 0E F2 | 	cmp	result1, #0 wz
024fc     74 00 90 AD |  if_e	jmp	#LR__0118
02500     92 01 00 FF 
02504     89 BD 06 F6 | 	mov	local12, ##@LR__5510
02508     6C 93 02 F6 | 	mov	arg01, local26
0250c     5E 95 02 F6 | 	mov	arg02, local12
02510     10 25 B2 FD | 	call	#__system___string_cmp
02514     00 7A 0E F2 | 	cmp	result1, #0 wz
02518     58 00 90 AD |  if_e	jmp	#LR__0118
0251c     92 01 00 FF 
02520     8B BB 06 F6 | 	mov	local11, ##@LR__5511
02524     5D BD 02 F6 | 	mov	local12, local11
02528     6C 93 02 F6 | 	mov	arg01, local26
0252c     5E 95 02 F6 | 	mov	arg02, local12
02530     F0 24 B2 FD | 	call	#__system___string_cmp
02534     3D B1 0A F6 | 	mov	local06, result1 wz
02538     38 00 90 AD |  if_e	jmp	#LR__0118
0253c     92 01 00 FF 
02540     8D BB 06 F6 | 	mov	local11, ##@LR__5512
02544     6C 93 02 F6 | 	mov	arg01, local26
02548     5D 95 02 F6 | 	mov	arg02, local11
0254c     D4 24 B2 FD | 	call	#__system___string_cmp
02550     3D BD 0A F6 | 	mov	local12, result1 wz
02554     1C 00 90 AD |  if_e	jmp	#LR__0118
02558     92 01 00 FF 
0255c     8F C1 06 F6 | 	mov	local14, ##@LR__5513
02560     6C 93 02 F6 | 	mov	arg01, local26
02564     60 95 02 F6 | 	mov	arg02, local14
02568     B8 24 B2 FD | 	call	#__system___string_cmp
0256c     3D BB 0A F6 | 	mov	local11, result1 wz
02570     20 00 90 5D |  if_ne	jmp	#LR__0119
02574                 | LR__0118
02574     92 01 00 FF 
02578     91 DD 06 F6 | 	mov	local28, ##@LR__5514
0257c     6E BF 02 F6 | 	mov	local13, local28
02580     6D 93 02 F6 | 	mov	arg01, local27
02584     5F 95 02 F6 | 	mov	arg02, local13
02588     98 24 B2 FD | 	call	#__system___string_cmp
0258c     3D C1 0A F6 | 	mov	local14, result1 wz
02590     B8 00 90 AD |  if_e	jmp	#LR__0122
02594                 | LR__0119
02594     92 01 00 FF 
02598     93 DD 06 F6 | 	mov	local28, ##@LR__5515
0259c     6C 93 02 F6 | 	mov	arg01, local26
025a0     6E 95 02 F6 | 	mov	arg02, local28
025a4     7C 24 B2 FD | 	call	#__system___string_cmp
025a8     3D BF 0A F6 | 	mov	local13, result1 wz
025ac     20 00 90 5D |  if_ne	jmp	#LR__0120
025b0     92 01 00 FF 
025b4     95 D3 06 F6 | 	mov	local23, ##@LR__5516
025b8     69 D1 02 F6 | 	mov	local22, local23
025bc     6D 93 02 F6 | 	mov	arg01, local27
025c0     68 95 02 F6 | 	mov	arg02, local22
025c4     5C 24 B2 FD | 	call	#__system___string_cmp
025c8     3D DD 0A F6 | 	mov	local28, result1 wz
025cc     7C 00 90 AD |  if_e	jmp	#LR__0122
025d0                 | LR__0120
025d0     92 01 00 FF 
025d4     97 D3 06 F6 | 	mov	local23, ##@LR__5517
025d8     6C 93 02 F6 | 	mov	arg01, local26
025dc     69 95 02 F6 | 	mov	arg02, local23
025e0     40 24 B2 FD | 	call	#__system___string_cmp
025e4     3D D1 0A F6 | 	mov	local22, result1 wz
025e8     20 00 90 5D |  if_ne	jmp	#LR__0121
025ec     92 01 00 FF 
025f0     99 DF 06 F6 | 	mov	local29, ##@LR__5518
025f4     6F D5 02 F6 | 	mov	local24, local29
025f8     6D 93 02 F6 | 	mov	arg01, local27
025fc     6A 95 02 F6 | 	mov	arg02, local24
02600     20 24 B2 FD | 	call	#__system___string_cmp
02604     3D D3 0A F6 | 	mov	local23, result1 wz
02608     40 00 90 AD |  if_e	jmp	#LR__0122
0260c                 | LR__0121
0260c     92 01 00 FF 
02610     9B E1 06 F6 | 	mov	local30, ##@LR__5519
02614     70 DF 02 F6 | 	mov	local29, local30
02618     6C 93 02 F6 | 	mov	arg01, local26
0261c     6F 95 02 F6 | 	mov	arg02, local29
02620     00 24 B2 FD | 	call	#__system___string_cmp
02624     3D D5 0A F6 | 	mov	local24, result1 wz
02628     EC 00 90 5D |  if_ne	jmp	#LR__0126
0262c     92 01 00 FF 
02630     9D E3 06 F6 | 	mov	local31, ##@LR__5520
02634     71 E1 02 F6 | 	mov	local30, local31
02638     6D 93 02 F6 | 	mov	arg01, local27
0263c     70 95 02 F6 | 	mov	arg02, local30
02640     E0 23 B2 FD | 	call	#__system___string_cmp
02644     3D DF 0A F6 | 	mov	local29, result1 wz
02648     CC 00 90 5D |  if_ne	jmp	#LR__0126
0264c                 | LR__0122
0264c     54 B9 02 F6 | 	mov	local10, local02
02650     03 B8 66 F0 | 	shl	local10, #3
02654     32 AF 02 F6 | 	mov	local05, objptr
02658     36 00 00 FF 
0265c     B0 AF 06 F1 | 	add	local05, ##28080
02660     57 B9 02 F1 | 	add	local10, local05
02664     6D BD 02 F6 | 	mov	local12, local27
02668     6C 93 02 F6 | 	mov	arg01, local26
0266c     5E 95 02 F6 | 	mov	arg02, local12
02670     E4 23 B2 FD | 	call	#__system___string_concat
02674     5C 7B 62 FC | 	wrlong	result1, local10
02678                 | '     lparts(i).part$=s1$+s2$
02678                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02678     54 C3 02 F6 | 	mov	local15, local02
0267c     01 C2 06 F1 | 	add	local15, #1
02680     63 E5 02 F6 | 	mov	local32, local17
02684     01 E4 06 F1 | 	add	local32, #1
02688     D7 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
0268c                 | LR__0123
0268c     72 C3 52 F2 | 	cmps	local15, local32 wc
02690     7C 00 90 3D |  if_ae	jmp	#LR__0125
02694     61 AF 02 F6 | 	mov	local05, local15
02698     01 AE 06 F1 | 	add	local05, #1
0269c     03 AE 66 F0 | 	shl	local05, #3
026a0     36 00 00 FF 
026a4     B0 65 06 F1 | 	add	objptr, ##28080
026a8     32 AF 02 F1 | 	add	local05, objptr
026ac     57 AD 02 FB | 	rdlong	local04, local05
026b0     61 B1 02 F6 | 	mov	local06, local15
026b4     01 B0 06 F1 | 	add	local06, #1
026b8     03 B0 66 F0 | 	shl	local06, #3
026bc     32 B1 02 F1 | 	add	local06, objptr
026c0     04 B0 06 F1 | 	add	local06, #4
026c4     58 AB 02 FB | 	rdlong	local03, local06
026c8     61 B1 02 F6 | 	mov	local06, local15
026cc     03 B0 66 F0 | 	shl	local06, #3
026d0     32 BD 02 F6 | 	mov	local12, objptr
026d4     32 B1 02 F1 | 	add	local06, objptr
026d8     58 AD 62 FC | 	wrlong	local04, local06
026dc     61 BB 02 F6 | 	mov	local11, local15
026e0     5D C1 02 F6 | 	mov	local14, local11
026e4     60 BF 02 F6 | 	mov	local13, local14
026e8     03 BE 66 F0 | 	shl	local13, #3
026ec     32 DD 02 F6 | 	mov	local28, objptr
026f0     32 BF 02 F1 | 	add	local13, objptr
026f4     04 BE 06 F1 | 	add	local13, #4
026f8     5F AB 62 FC | 	wrlong	local03, local13
026fc     04 BE 86 F1 | 	sub	local13, #4
02700     01 C2 06 F1 | 	add	local15, #1
02704     36 00 00 FF 
02708     B0 65 86 F1 | 	sub	objptr, ##28080
0270c     7C FF 9F FD | 	jmp	#LR__0123
02710                 | LR__0124
02710                 | LR__0125
02710     01 A8 86 F1 | 	sub	local02, #1
02714     01 C6 86 F1 | 	sub	local17, #1
02718                 | LR__0126
02718     01 A8 06 F1 | 	add	local02, #1
0271c     63 A9 52 F2 | 	cmps	local02, local17 wc
02720     5C FD 9F CD |  if_b	jmp	#LR__0117
02724                 | '  
02724                 | ' ' 1h : now remove parts that are spaces
02724                 | ' 
02724                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02724     00 A8 06 F6 | 	mov	local02, #0
02728     63 E7 02 F6 | 	mov	local33, local17
0272c     01 E6 06 F1 | 	add	local33, #1
02730                 | LR__0127
02730     73 A9 52 F2 | 	cmps	local02, local33 wc
02734     50 00 90 3D |  if_ae	jmp	#LR__0128
02738     54 B9 02 F6 | 	mov	local10, local02
0273c     03 B8 66 F0 | 	shl	local10, #3
02740     36 00 00 FF 
02744     B0 65 06 F1 | 	add	objptr, ##28080
02748     32 B9 02 F1 | 	add	local10, objptr
0274c     54 BD 02 F6 | 	mov	local12, local02
02750     5E BB 02 F6 | 	mov	local11, local12
02754     5D C1 02 F6 | 	mov	local14, local11
02758     03 C0 66 F0 | 	shl	local14, #3
0275c     32 BF 02 F6 | 	mov	local13, objptr
02760     32 C1 02 F1 | 	add	local14, objptr
02764     60 93 02 FB | 	rdlong	arg01, local14
02768     36 00 00 FF 
0276c     B0 65 86 F1 | 	sub	objptr, ##28080
02770     C0 3F B2 FD | 	call	#__system__RTrim_S
02774     3D 93 02 F6 | 	mov	arg01, result1
02778     F8 3E B2 FD | 	call	#__system__LTrim_S
0277c     5C 7B 62 FC | 	wrlong	result1, local10
02780     01 A8 06 F1 | 	add	local02, #1
02784     A8 FF 9F FD | 	jmp	#LR__0127
02788                 | LR__0128
02788     00 A8 06 F6 | 	mov	local02, #0
0278c     D7 86 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02790                 | ' i=0
02790                 | ' do 
02790                 | LR__0129
02790                 | '   if len(lparts(i).part$)=0 then 
02790     54 AF 02 F6 | 	mov	local05, local02
02794     03 AE 66 F0 | 	shl	local05, #3
02798     32 B1 02 F6 | 	mov	local06, objptr
0279c     36 00 00 FF 
027a0     B0 B1 06 F1 | 	add	local06, ##28080
027a4     58 AF 02 F1 | 	add	local05, local06
027a8     57 93 02 FB | 	rdlong	arg01, local05
027ac     49 B3 02 F6 | 	mov	local07, arg01
027b0                 | LR__0130
027b0     59 7B CA FA | 	rdbyte	result1, local07 wz
027b4     01 B2 06 51 |  if_ne	add	local07, #1
027b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
027bc     49 B3 8A F1 | 	sub	local07, arg01 wz
027c0     C4 00 90 5D |  if_ne	jmp	#LR__0134
027c4                 | '     if i=k-1 then k-=1  :  exit
027c4     63 AD 02 F6 | 	mov	local04, local17
027c8     01 AC 86 F1 | 	sub	local04, #1
027cc     56 A9 0A F2 | 	cmp	local02, local04 wz
027d0     01 C6 86 A1 |  if_e	sub	local17, #1
027d4     C4 00 90 AD |  if_e	jmp	#LR__0136
027d8                 | '     if i<k-1 then 
027d8     63 AD 02 F6 | 	mov	local04, local17
027dc     01 AC 86 F1 | 	sub	local04, #1
027e0     56 A9 52 F2 | 	cmps	local02, local04 wc
027e4     A0 00 90 3D |  if_ae	jmp	#LR__0133
027e8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
027e8     54 C3 02 F6 | 	mov	local15, local02
027ec     63 E9 02 F6 | 	mov	local34, local17
027f0     01 E8 86 F1 | 	sub	local34, #1
027f4                 | LR__0131
027f4     74 C3 52 F2 | 	cmps	local15, local34 wc
027f8     80 00 90 3D |  if_ae	jmp	#LR__0132
027fc     61 AF 02 F6 | 	mov	local05, local15
02800     01 AE 06 F1 | 	add	local05, #1
02804     03 AE 66 F0 | 	shl	local05, #3
02808     36 00 00 FF 
0280c     B0 65 06 F1 | 	add	objptr, ##28080
02810     32 AF 02 F1 | 	add	local05, objptr
02814     57 AD 02 FB | 	rdlong	local04, local05
02818     61 B1 02 F6 | 	mov	local06, local15
0281c     01 B0 06 F1 | 	add	local06, #1
02820     03 B0 66 F0 | 	shl	local06, #3
02824     32 B1 02 F1 | 	add	local06, objptr
02828     04 B0 06 F1 | 	add	local06, #4
0282c     58 AB 02 FB | 	rdlong	local03, local06
02830     61 B9 02 F6 | 	mov	local10, local15
02834     5C B1 02 F6 | 	mov	local06, local10
02838     03 B0 66 F0 | 	shl	local06, #3
0283c     32 BD 02 F6 | 	mov	local12, objptr
02840     32 B1 02 F1 | 	add	local06, objptr
02844     58 AD 62 FC | 	wrlong	local04, local06
02848     61 BB 02 F6 | 	mov	local11, local15
0284c     5D C1 02 F6 | 	mov	local14, local11
02850     60 BF 02 F6 | 	mov	local13, local14
02854     03 BE 66 F0 | 	shl	local13, #3
02858     32 DD 02 F6 | 	mov	local28, objptr
0285c     32 BF 02 F1 | 	add	local13, objptr
02860     04 BE 06 F1 | 	add	local13, #4
02864     5F AB 62 FC | 	wrlong	local03, local13
02868     04 BE 86 F1 | 	sub	local13, #4
0286c     01 C2 06 F1 | 	add	local15, #1
02870     36 00 00 FF 
02874     B0 65 86 F1 | 	sub	objptr, ##28080
02878     78 FF 9F FD | 	jmp	#LR__0131
0287c                 | LR__0132
0287c     01 C6 86 F1 | 	sub	local17, #1
02880                 | '       if i>0 then i-=1 
02880     01 A8 56 F2 | 	cmps	local02, #1 wc
02884     01 A8 86 31 |  if_ae	sub	local02, #1
02888                 | LR__0133
02888                 | LR__0134
02888     01 A8 06 F1 | 	add	local02, #1
0288c     63 AD 02 F6 | 	mov	local04, local17
02890     01 AC 86 F1 | 	sub	local04, #1
02894     56 A9 5A F2 | 	cmps	local02, local04 wcz
02898     F4 FE 9F ED |  if_be	jmp	#LR__0129
0289c                 | LR__0135
0289c                 | LR__0136
0289c                 | ' 
0289c                 | ' ' 1i: lowercase all that is not a string
0289c                 | ' 
0289c                 | ' for j=0 to k-1
0289c     00 C2 06 F6 | 	mov	local15, #0
028a0     63 EB 02 F6 | 	mov	local35, local17
028a4                 | LR__0137
028a4     75 C3 52 F2 | 	cmps	local15, local35 wc
028a8     C0 00 90 3D |  if_ae	jmp	#LR__0140
028ac                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
028ac     61 AF 02 F6 | 	mov	local05, local15
028b0     03 AE 66 F0 | 	shl	local05, #3
028b4     32 B1 02 F6 | 	mov	local06, objptr
028b8     36 00 00 FF 
028bc     B0 B1 06 F1 | 	add	local06, ##28080
028c0     58 AF 02 F1 | 	add	local05, local06
028c4     57 93 02 FB | 	rdlong	arg01, local05
028c8     01 94 06 F6 | 	mov	arg02, #1
028cc     D4 39 B2 FD | 	call	#__system__Left_S
028d0     3D 93 02 F6 | 	mov	arg01, result1
028d4     92 01 00 FF 
028d8     9F 95 06 F6 | 	mov	arg02, ##@LR__5521
028dc     44 21 B2 FD | 	call	#__system___string_cmp
028e0     00 7A 0E F2 | 	cmp	result1, #0 wz
028e4     3C 00 90 5D |  if_ne	jmp	#LR__0138
028e8     61 B1 02 F6 | 	mov	local06, local15
028ec     03 B0 66 F0 | 	shl	local06, #3
028f0     32 BD 02 F6 | 	mov	local12, objptr
028f4     36 00 00 FF 
028f8     B0 BD 06 F1 | 	add	local12, ##28080
028fc     5E B1 02 F1 | 	add	local06, local12
02900     58 93 02 FB | 	rdlong	arg01, local06
02904     01 94 06 F6 | 	mov	arg02, #1
02908     20 3A B2 FD | 	call	#__system__Right_S
0290c     3D 93 02 F6 | 	mov	arg01, result1
02910     92 01 00 FF 
02914     A1 95 06 F6 | 	mov	arg02, ##@LR__5522
02918     08 21 B2 FD | 	call	#__system___string_cmp
0291c     00 7A 0E F2 | 	cmp	result1, #0 wz
02920     40 00 90 AD |  if_e	jmp	#LR__0139
02924                 | LR__0138
02924     61 B9 02 F6 | 	mov	local10, local15
02928     03 B8 66 F0 | 	shl	local10, #3
0292c     36 00 00 FF 
02930     B0 65 06 F1 | 	add	objptr, ##28080
02934     32 B9 02 F1 | 	add	local10, objptr
02938     61 BD 02 F6 | 	mov	local12, local15
0293c     5E BB 02 F6 | 	mov	local11, local12
02940     5D C1 02 F6 | 	mov	local14, local11
02944     03 C0 66 F0 | 	shl	local14, #3
02948     32 BF 02 F6 | 	mov	local13, objptr
0294c     32 C1 02 F1 | 	add	local14, objptr
02950     60 93 02 FB | 	rdlong	arg01, local14
02954     36 00 00 FF 
02958     B0 65 86 F1 | 	sub	objptr, ##28080
0295c     54 3C B2 FD | 	call	#__system__LCase_S
02960     5C 7B 62 FC | 	wrlong	result1, local10
02964                 | LR__0139
02964     01 C2 06 F1 | 	add	local15, #1
02968     38 FF 9F FD | 	jmp	#LR__0137
0296c                 | LR__0140
0296c                 | ' 
0296c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
0296c                 | ' 
0296c                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
0296c     00 A8 06 F6 | 	mov	local02, #0
02970     63 ED 02 F6 | 	mov	local36, local17
02974     01 EC 06 F1 | 	add	local36, #1
02978     D7 1A 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
0297c                 | LR__0141
0297c     76 A9 52 F2 | 	cmps	local02, local36 wc
02980     2C 00 90 3D |  if_ae	jmp	#LR__0143
02984     54 B9 02 F6 | 	mov	local10, local02
02988     03 B8 66 F0 | 	shl	local10, #3
0298c     32 AF 02 F6 | 	mov	local05, objptr
02990     36 00 00 FF 
02994     B0 AF 06 F1 | 	add	local05, ##28080
02998     57 B9 02 F1 | 	add	local10, local05
0299c     04 B8 06 F1 | 	add	local10, #4
029a0     FF FF FF FF 
029a4     5C FF 6B FC | 	wrlong	##-1, local10
029a8     01 A8 06 F1 | 	add	local02, #1
029ac     CC FF 9F FD | 	jmp	#LR__0141
029b0                 | LR__0142
029b0                 | LR__0143
029b0                 | ' 
029b0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
029b0     36 00 00 FF 
029b4     B0 65 06 F1 | 	add	objptr, ##28080
029b8     32 93 02 FB | 	rdlong	arg01, objptr
029bc     36 00 00 FF 
029c0     B0 65 86 F1 | 	sub	objptr, ##28080
029c4     1C 47 B0 FD | 	call	#_isdec
029c8     00 7A 0E F2 | 	cmp	result1, #0 wz
029cc     01 EE 06 56 |  if_ne	mov	local37, #1
029d0     00 EE 06 A6 |  if_e	mov	local37, #0
029d4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
029d4     36 00 00 FF 
029d8     B0 65 06 F1 | 	add	objptr, ##28080
029dc     32 93 02 FB | 	rdlong	arg01, objptr
029e0     36 00 00 FF 
029e4     B0 65 86 F1 | 	sub	objptr, ##28080
029e8     92 01 00 FF 
029ec     A3 95 06 F6 | 	mov	arg02, ##@LR__5523
029f0     30 20 B2 FD | 	call	#__system___string_cmp
029f4     00 7A 0E F2 | 	cmp	result1, #0 wz
029f8     01 EE 06 A6 |  if_e	mov	local37, #1
029fc     00 A8 06 F6 | 	mov	local02, #0
02a00                 | ' i=0 : do 
02a00                 | LR__0144
02a00                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02a00     54 AF 02 F6 | 	mov	local05, local02
02a04     03 AE 66 F0 | 	shl	local05, #3
02a08     32 B1 02 F6 | 	mov	local06, objptr
02a0c     36 00 00 FF 
02a10     B0 B1 06 F1 | 	add	local06, ##28080
02a14     58 AF 02 F1 | 	add	local05, local06
02a18     57 93 02 FB | 	rdlong	arg01, local05
02a1c     92 01 00 FF 
02a20     A8 95 06 F6 | 	mov	arg02, ##@LR__5524
02a24     FC 1F B2 FD | 	call	#__system___string_cmp
02a28     00 7A 0E F2 | 	cmp	result1, #0 wz
02a2c     0C 00 90 AD |  if_e	jmp	#LR__0145
02a30     01 A8 06 F1 | 	add	local02, #1
02a34     63 A9 5A F2 | 	cmps	local02, local17 wcz
02a38     C4 FF 9F ED |  if_be	jmp	#LR__0144
02a3c                 | LR__0145
02a3c                 | ' if i<k then addptr=i+1	 							' then found
02a3c     63 A9 52 F2 | 	cmps	local02, local17 wc
02a40     54 EF 02 C6 |  if_b	mov	local37, local02
02a44     01 EE 06 C1 |  if_b	add	local37, #1
02a48     36 00 00 FF 
02a4c     B0 65 06 F1 | 	add	objptr, ##28080
02a50                 | ' lp$=lparts(addptr).part$ 
02a50                 | ' 
02a50                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a50     77 AF 02 F6 | 	mov	local05, local37
02a54     03 AE 66 F0 | 	shl	local05, #3
02a58     32 AF 02 F1 | 	add	local05, objptr
02a5c     57 93 02 FB | 	rdlong	arg01, local05
02a60     01 94 06 F6 | 	mov	arg02, #1
02a64     36 00 00 FF 
02a68     B0 65 86 F1 | 	sub	objptr, ##28080
02a6c     34 38 B2 FD | 	call	#__system__Left_S
02a70     3D 93 02 F6 | 	mov	arg01, result1
02a74     92 01 00 FF 
02a78     AD 95 06 F6 | 	mov	arg02, ##@LR__5525
02a7c     A4 1F B2 FD | 	call	#__system___string_cmp
02a80     00 7A 0E F2 | 	cmp	result1, #0 wz
02a84     58 01 90 5D |  if_ne	jmp	#LR__0152
02a88     77 B1 02 F6 | 	mov	local06, local37
02a8c     03 B0 66 F0 | 	shl	local06, #3
02a90     32 BD 02 F6 | 	mov	local12, objptr
02a94     36 00 00 FF 
02a98     B0 BD 06 F1 | 	add	local12, ##28080
02a9c     5E B1 02 F1 | 	add	local06, local12
02aa0     58 93 02 FB | 	rdlong	arg01, local06
02aa4     49 B3 02 F6 | 	mov	local07, arg01
02aa8     D7 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02aac                 | LR__0146
02aac     59 7B CA FA | 	rdbyte	result1, local07 wz
02ab0     01 B2 06 51 |  if_ne	add	local07, #1
02ab4     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02ab8                 | LR__0147
02ab8     49 B3 82 F1 | 	sub	local07, arg01
02abc     02 B2 56 F2 | 	cmps	local07, #2 wc
02ac0     1C 01 90 CD |  if_b	jmp	#LR__0152
02ac4     01 C6 06 F1 | 	add	local17, #1
02ac8                 | '   k+=1
02ac8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ac8     63 A9 02 F6 | 	mov	local02, local17
02acc     77 F1 02 F6 | 	mov	local38, local37
02ad0     01 F0 06 F1 | 	add	local38, #1
02ad4     36 00 00 FF 
02ad8     B0 65 06 F1 | 	add	objptr, ##28080
02adc     D7 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02ae0                 | LR__0148
02ae0     54 AF 02 F6 | 	mov	local05, local02
02ae4     01 AE 86 F1 | 	sub	local05, #1
02ae8     03 AE 66 F0 | 	shl	local05, #3
02aec     32 AF 02 F1 | 	add	local05, objptr
02af0     57 AD 02 FB | 	rdlong	local04, local05
02af4     54 B1 02 F6 | 	mov	local06, local02
02af8     01 B0 86 F1 | 	sub	local06, #1
02afc     03 B0 66 F0 | 	shl	local06, #3
02b00     32 B1 02 F1 | 	add	local06, objptr
02b04     04 B0 06 F1 | 	add	local06, #4
02b08     58 AB 02 FB | 	rdlong	local03, local06
02b0c     54 B1 02 F6 | 	mov	local06, local02
02b10     03 B0 66 F0 | 	shl	local06, #3
02b14     32 B1 02 F1 | 	add	local06, objptr
02b18     58 AD 62 FC | 	wrlong	local04, local06
02b1c     54 BF 02 F6 | 	mov	local13, local02
02b20     03 BE 66 F0 | 	shl	local13, #3
02b24     32 BF 02 F1 | 	add	local13, objptr
02b28     04 BE 06 F1 | 	add	local13, #4
02b2c     5F AB 62 FC | 	wrlong	local03, local13
02b30     01 A8 86 F1 | 	sub	local02, #1
02b34     78 A9 52 F2 | 	cmps	local02, local38 wc
02b38     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02b3c                 | LR__0149
02b3c     77 B9 02 F6 | 	mov	local10, local37
02b40     01 B8 06 F1 | 	add	local10, #1
02b44     03 B8 66 F0 | 	shl	local10, #3
02b48     32 B9 02 F1 | 	add	local10, objptr
02b4c     77 C1 02 F6 | 	mov	local14, local37
02b50     03 C0 66 F0 | 	shl	local14, #3
02b54     32 C1 02 F1 | 	add	local14, objptr
02b58     60 B1 02 FB | 	rdlong	local06, local14
02b5c     77 BF 02 F6 | 	mov	local13, local37
02b60     5F DD 02 F6 | 	mov	local28, local13
02b64     6E D1 02 F6 | 	mov	local22, local28
02b68     03 D0 66 F0 | 	shl	local22, #3
02b6c     32 D3 02 F6 | 	mov	local23, objptr
02b70     32 D1 02 F1 | 	add	local22, objptr
02b74     68 93 02 FB | 	rdlong	arg01, local22
02b78     36 00 00 FF 
02b7c     B0 65 86 F1 | 	sub	objptr, ##28080
02b80     49 B3 02 F6 | 	mov	local07, arg01
02b84     D7 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b88                 | LR__0150
02b88     59 7B CA FA | 	rdbyte	result1, local07 wz
02b8c     01 B2 06 51 |  if_ne	add	local07, #1
02b90     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b94                 | LR__0151
02b94     49 B3 82 F1 | 	sub	local07, arg01
02b98     59 C1 02 F6 | 	mov	local14, local07
02b9c     60 BB 02 F6 | 	mov	local11, local14
02ba0     01 BA 86 F1 | 	sub	local11, #1
02ba4     5D BD 02 F6 | 	mov	local12, local11
02ba8     58 93 02 F6 | 	mov	arg01, local06
02bac     5E 95 02 F6 | 	mov	arg02, local12
02bb0     78 37 B2 FD | 	call	#__system__Right_S
02bb4     5C 7B 62 FC | 	wrlong	result1, local10
02bb8     77 B9 02 F6 | 	mov	local10, local37
02bbc     03 B8 66 F0 | 	shl	local10, #3
02bc0     32 AF 02 F6 | 	mov	local05, objptr
02bc4     36 00 00 FF 
02bc8     B0 AF 06 F1 | 	add	local05, ##28080
02bcc     57 B9 02 F1 | 	add	local10, local05
02bd0     92 01 00 FF 
02bd4     AF B1 06 F6 | 	mov	local06, ##@LR__5526
02bd8     5C B1 62 FC | 	wrlong	local06, local10
02bdc     9C 01 90 FD | 	jmp	#LR__0160
02be0                 | LR__0152
02be0     77 B1 02 F6 | 	mov	local06, local37
02be4     03 B0 66 F0 | 	shl	local06, #3
02be8     32 BD 02 F6 | 	mov	local12, objptr
02bec     36 00 00 FF 
02bf0     B0 BD 06 F1 | 	add	local12, ##28080
02bf4     5E B1 02 F1 | 	add	local06, local12
02bf8     58 95 02 FB | 	rdlong	arg02, local06
02bfc     92 01 00 FF 
02c00     B1 97 06 F6 | 	mov	arg03, ##@LR__5527
02c04     01 92 06 F6 | 	mov	arg01, #1
02c08     E0 3B B2 FD | 	call	#__system__Instr
02c0c     3D F3 02 F6 | 	mov	local39, result1
02c10                 | ' 
02c10                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02c10                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02c10     01 F2 56 F2 | 	cmps	local39, #1 wc
02c14     64 01 90 CD |  if_b	jmp	#LR__0159
02c18     77 AF 02 F6 | 	mov	local05, local37
02c1c     03 AE 66 F0 | 	shl	local05, #3
02c20     32 B1 02 F6 | 	mov	local06, objptr
02c24     36 00 00 FF 
02c28     B0 B1 06 F1 | 	add	local06, ##28080
02c2c     58 AF 02 F1 | 	add	local05, local06
02c30     57 93 02 FB | 	rdlong	arg01, local05
02c34     49 B3 02 F6 | 	mov	local07, arg01
02c38     D7 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02c3c                 | LR__0153
02c3c     59 7B CA FA | 	rdbyte	result1, local07 wz
02c40     01 B2 06 51 |  if_ne	add	local07, #1
02c44     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02c48                 | LR__0154
02c48     49 B3 82 F1 | 	sub	local07, arg01
02c4c     59 F3 52 F2 | 	cmps	local39, local07 wc
02c50     28 01 90 3D |  if_ae	jmp	#LR__0159
02c54     01 C6 06 F1 | 	add	local17, #1
02c58                 | '   k+=1
02c58                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c58     63 A9 02 F6 | 	mov	local02, local17
02c5c     77 F5 02 F6 | 	mov	local40, local37
02c60     01 F4 06 F1 | 	add	local40, #1
02c64     36 00 00 FF 
02c68     B0 65 06 F1 | 	add	objptr, ##28080
02c6c     D7 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c70                 | LR__0155
02c70     54 AF 02 F6 | 	mov	local05, local02
02c74     01 AE 86 F1 | 	sub	local05, #1
02c78     03 AE 66 F0 | 	shl	local05, #3
02c7c     32 AF 02 F1 | 	add	local05, objptr
02c80     57 AD 02 FB | 	rdlong	local04, local05
02c84     54 B1 02 F6 | 	mov	local06, local02
02c88     01 B0 86 F1 | 	sub	local06, #1
02c8c     03 B0 66 F0 | 	shl	local06, #3
02c90     32 B1 02 F1 | 	add	local06, objptr
02c94     04 B0 06 F1 | 	add	local06, #4
02c98     58 AB 02 FB | 	rdlong	local03, local06
02c9c     54 B1 02 F6 | 	mov	local06, local02
02ca0     03 B0 66 F0 | 	shl	local06, #3
02ca4     32 B1 02 F1 | 	add	local06, objptr
02ca8     58 AD 62 FC | 	wrlong	local04, local06
02cac     54 BF 02 F6 | 	mov	local13, local02
02cb0     03 BE 66 F0 | 	shl	local13, #3
02cb4     32 BF 02 F1 | 	add	local13, objptr
02cb8     04 BE 06 F1 | 	add	local13, #4
02cbc     5F AB 62 FC | 	wrlong	local03, local13
02cc0     01 A8 86 F1 | 	sub	local02, #1
02cc4     7A A9 52 F2 | 	cmps	local02, local40 wc
02cc8     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ccc                 | LR__0156
02ccc     77 B9 02 F6 | 	mov	local10, local37
02cd0     01 B8 06 F1 | 	add	local10, #1
02cd4     03 B8 66 F0 | 	shl	local10, #3
02cd8     32 B9 02 F1 | 	add	local10, objptr
02cdc     77 C1 02 F6 | 	mov	local14, local37
02ce0     03 C0 66 F0 | 	shl	local14, #3
02ce4     32 C1 02 F1 | 	add	local14, objptr
02ce8     60 B1 02 FB | 	rdlong	local06, local14
02cec     77 DD 02 F6 | 	mov	local28, local37
02cf0     6E D1 02 F6 | 	mov	local22, local28
02cf4     03 D0 66 F0 | 	shl	local22, #3
02cf8     32 D3 02 F6 | 	mov	local23, objptr
02cfc     32 D1 02 F1 | 	add	local22, objptr
02d00     68 93 02 FB | 	rdlong	arg01, local22
02d04     36 00 00 FF 
02d08     B0 65 86 F1 | 	sub	objptr, ##28080
02d0c     49 B3 02 F6 | 	mov	local07, arg01
02d10     D7 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02d14                 | LR__0157
02d14     59 7B CA FA | 	rdbyte	result1, local07 wz
02d18     01 B2 06 51 |  if_ne	add	local07, #1
02d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02d20                 | LR__0158
02d20     49 B3 82 F1 | 	sub	local07, arg01
02d24     59 95 02 F6 | 	mov	arg02, local07
02d28     79 95 82 F1 | 	sub	arg02, local39
02d2c     58 93 02 F6 | 	mov	arg01, local06
02d30     F8 35 B2 FD | 	call	#__system__Right_S
02d34     5C 7B 62 FC | 	wrlong	result1, local10
02d38     77 B9 02 F6 | 	mov	local10, local37
02d3c     03 B8 66 F0 | 	shl	local10, #3
02d40     36 00 00 FF 
02d44     B0 65 06 F1 | 	add	objptr, ##28080
02d48     32 B9 02 F1 | 	add	local10, objptr
02d4c     77 BB 02 F6 | 	mov	local11, local37
02d50     5D C1 02 F6 | 	mov	local14, local11
02d54     03 C0 66 F0 | 	shl	local14, #3
02d58     32 BF 02 F6 | 	mov	local13, objptr
02d5c     32 C1 02 F1 | 	add	local14, objptr
02d60     60 93 02 FB | 	rdlong	arg01, local14
02d64     79 BD 02 F6 | 	mov	local12, local39
02d68     5E 95 02 F6 | 	mov	arg02, local12
02d6c     36 00 00 FF 
02d70     B0 65 86 F1 | 	sub	objptr, ##28080
02d74     2C 35 B2 FD | 	call	#__system__Left_S
02d78     5C 7B 62 FC | 	wrlong	result1, local10
02d7c                 | LR__0159
02d7c                 | LR__0160
02d7c     77 B9 02 F6 | 	mov	local10, local37
02d80     03 B8 66 F0 | 	shl	local10, #3
02d84     32 AF 02 F6 | 	mov	local05, objptr
02d88     36 00 00 FF 
02d8c     B0 AF 06 F1 | 	add	local05, ##28080
02d90     57 B9 02 F1 | 	add	local10, local05
02d94     5C F7 02 FB | 	rdlong	local41, local10
02d98                 | ' 
02d98                 | ' 825
02d98                 | ' lp$=lparts(addptr).part$ 
02d98                 | ' 
02d98                 | ' ' process mouse/cursor/click on/off
02d98                 | ' 
02d98                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d98     92 01 00 FF 
02d9c     B3 95 06 F6 | 	mov	arg02, ##@LR__5528
02da0     7B 93 02 F6 | 	mov	arg01, local41
02da4     7C 1C B2 FD | 	call	#__system___string_cmp
02da8     00 7A 0E F2 | 	cmp	result1, #0 wz
02dac     30 00 90 AD |  if_e	jmp	#LR__0161
02db0     92 01 00 FF 
02db4     B9 95 06 F6 | 	mov	arg02, ##@LR__5529
02db8     7B 93 02 F6 | 	mov	arg01, local41
02dbc     64 1C B2 FD | 	call	#__system___string_cmp
02dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
02dc4     18 00 90 AD |  if_e	jmp	#LR__0161
02dc8     92 01 00 FF 
02dcc     C0 95 06 F6 | 	mov	arg02, ##@LR__5530
02dd0     7B 93 02 F6 | 	mov	arg01, local41
02dd4     4C 1C B2 FD | 	call	#__system___string_cmp
02dd8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ddc     D8 00 90 5D |  if_ne	jmp	#LR__0164
02de0                 | LR__0161
02de0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02de0     77 AF 02 F6 | 	mov	local05, local37
02de4     01 AE 06 F1 | 	add	local05, #1
02de8     03 AE 66 F0 | 	shl	local05, #3
02dec     32 B1 02 F6 | 	mov	local06, objptr
02df0     36 00 00 FF 
02df4     B0 B1 06 F1 | 	add	local06, ##28080
02df8     58 AF 02 F1 | 	add	local05, local06
02dfc     57 93 02 FB | 	rdlong	arg01, local05
02e00     92 01 00 FF 
02e04     C6 95 06 F6 | 	mov	arg02, ##@LR__5531
02e08     18 1C B2 FD | 	call	#__system___string_cmp
02e0c     00 7A 0E F2 | 	cmp	result1, #0 wz
02e10     38 00 90 5D |  if_ne	jmp	#LR__0162
02e14     77 B9 02 F6 | 	mov	local10, local37
02e18     01 B8 06 F1 | 	add	local10, #1
02e1c     03 B8 66 F0 | 	shl	local10, #3
02e20     36 00 00 FF 
02e24     B0 65 06 F1 | 	add	objptr, ##28080
02e28     32 B9 02 F1 | 	add	local10, objptr
02e2c     92 01 00 FF 
02e30     C9 B1 06 F6 | 	mov	local06, ##@LR__5532
02e34     5C B1 62 FC | 	wrlong	local06, local10
02e38     14 64 06 F1 | 	add	objptr, #20
02e3c     01 00 80 FF 
02e40     32 01 68 FC | 	wrlong	##512, objptr
02e44     36 00 00 FF 
02e48     C4 65 86 F1 | 	sub	objptr, ##28100
02e4c                 | LR__0162
02e4c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02e4c     77 AF 02 F6 | 	mov	local05, local37
02e50     01 AE 06 F1 | 	add	local05, #1
02e54     03 AE 66 F0 | 	shl	local05, #3
02e58     32 B1 02 F6 | 	mov	local06, objptr
02e5c     36 00 00 FF 
02e60     B0 B1 06 F1 | 	add	local06, ##28080
02e64     58 AF 02 F1 | 	add	local05, local06
02e68     57 93 02 FB | 	rdlong	arg01, local05
02e6c     92 01 00 FF 
02e70     CB 95 06 F6 | 	mov	arg02, ##@LR__5533
02e74     AC 1B B2 FD | 	call	#__system___string_cmp
02e78     00 7A 0E F2 | 	cmp	result1, #0 wz
02e7c     38 00 90 5D |  if_ne	jmp	#LR__0163
02e80     77 B9 02 F6 | 	mov	local10, local37
02e84     01 B8 06 F1 | 	add	local10, #1
02e88     03 B8 66 F0 | 	shl	local10, #3
02e8c     36 00 00 FF 
02e90     B0 65 06 F1 | 	add	objptr, ##28080
02e94     32 B9 02 F1 | 	add	local10, objptr
02e98     92 01 00 FF 
02e9c     CF B1 06 F6 | 	mov	local06, ##@LR__5534
02ea0     5C B1 62 FC | 	wrlong	local06, local10
02ea4     14 64 06 F1 | 	add	objptr, #20
02ea8     01 00 80 FF 
02eac     32 01 68 FC | 	wrlong	##512, objptr
02eb0     36 00 00 FF 
02eb4     C4 65 86 F1 | 	sub	objptr, ##28100
02eb8                 | LR__0163
02eb8                 | LR__0164
02eb8                 | ' 		
02eb8                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02eb8                 | ' 
02eb8                 | ' if (lp$="mode" orelse lp$="m.") then 
02eb8     92 01 00 FF 
02ebc     D1 95 06 F6 | 	mov	arg02, ##@LR__5535
02ec0     7B 93 02 F6 | 	mov	arg01, local41
02ec4     5C 1B B2 FD | 	call	#__system___string_cmp
02ec8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ecc     18 00 90 AD |  if_e	jmp	#LR__0165
02ed0     92 01 00 FF 
02ed4     D6 95 06 F6 | 	mov	arg02, ##@LR__5536
02ed8     7B 93 02 F6 | 	mov	arg01, local41
02edc     44 1B B2 FD | 	call	#__system___string_cmp
02ee0     00 7A 0E F2 | 	cmp	result1, #0 wz
02ee4     28 02 90 5D |  if_ne	jmp	#LR__0172
02ee8                 | LR__0165
02ee8                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02ee8     77 AF 02 F6 | 	mov	local05, local37
02eec     01 AE 06 F1 | 	add	local05, #1
02ef0     03 AE 66 F0 | 	shl	local05, #3
02ef4     32 B1 02 F6 | 	mov	local06, objptr
02ef8     36 00 00 FF 
02efc     B0 B1 06 F1 | 	add	local06, ##28080
02f00     58 AF 02 F1 | 	add	local05, local06
02f04     57 93 02 FB | 	rdlong	arg01, local05
02f08     92 01 00 FF 
02f0c     D9 95 06 F6 | 	mov	arg02, ##@LR__5537
02f10     10 1B B2 FD | 	call	#__system___string_cmp
02f14     00 7A 0E F2 | 	cmp	result1, #0 wz
02f18     28 00 90 5D |  if_ne	jmp	#LR__0166
02f1c     77 B9 02 F6 | 	mov	local10, local37
02f20     01 B8 06 F1 | 	add	local10, #1
02f24     03 B8 66 F0 | 	shl	local10, #3
02f28     32 AF 02 F6 | 	mov	local05, objptr
02f2c     36 00 00 FF 
02f30     B0 AF 06 F1 | 	add	local05, ##28080
02f34     57 B9 02 F1 | 	add	local10, local05
02f38     92 01 00 FF 
02f3c     DF B1 06 F6 | 	mov	local06, ##@LR__5538
02f40     5C B1 62 FC | 	wrlong	local06, local10
02f44                 | LR__0166
02f44                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02f44     77 AF 02 F6 | 	mov	local05, local37
02f48     01 AE 06 F1 | 	add	local05, #1
02f4c     03 AE 66 F0 | 	shl	local05, #3
02f50     32 B1 02 F6 | 	mov	local06, objptr
02f54     36 00 00 FF 
02f58     B0 B1 06 F1 | 	add	local06, ##28080
02f5c     58 AF 02 F1 | 	add	local05, local06
02f60     57 93 02 FB | 	rdlong	arg01, local05
02f64     92 01 00 FF 
02f68     E1 95 06 F6 | 	mov	arg02, ##@LR__5539
02f6c     B4 1A B2 FD | 	call	#__system___string_cmp
02f70     00 7A 0E F2 | 	cmp	result1, #0 wz
02f74     28 00 90 5D |  if_ne	jmp	#LR__0167
02f78     77 B9 02 F6 | 	mov	local10, local37
02f7c     01 B8 06 F1 | 	add	local10, #1
02f80     03 B8 66 F0 | 	shl	local10, #3
02f84     32 AF 02 F6 | 	mov	local05, objptr
02f88     36 00 00 FF 
02f8c     B0 AF 06 F1 | 	add	local05, ##28080
02f90     57 B9 02 F1 | 	add	local10, local05
02f94     92 01 00 FF 
02f98     EA B1 06 F6 | 	mov	local06, ##@LR__5540
02f9c     5C B1 62 FC | 	wrlong	local06, local10
02fa0                 | LR__0167
02fa0                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02fa0     77 AF 02 F6 | 	mov	local05, local37
02fa4     01 AE 06 F1 | 	add	local05, #1
02fa8     03 AE 66 F0 | 	shl	local05, #3
02fac     32 B1 02 F6 | 	mov	local06, objptr
02fb0     36 00 00 FF 
02fb4     B0 B1 06 F1 | 	add	local06, ##28080
02fb8     58 AF 02 F1 | 	add	local05, local06
02fbc     57 93 02 FB | 	rdlong	arg01, local05
02fc0     92 01 00 FF 
02fc4     EC 95 06 F6 | 	mov	arg02, ##@LR__5541
02fc8     58 1A B2 FD | 	call	#__system___string_cmp
02fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
02fd0     28 00 90 5D |  if_ne	jmp	#LR__0168
02fd4     77 B9 02 F6 | 	mov	local10, local37
02fd8     01 B8 06 F1 | 	add	local10, #1
02fdc     03 B8 66 F0 | 	shl	local10, #3
02fe0     32 AF 02 F6 | 	mov	local05, objptr
02fe4     36 00 00 FF 
02fe8     B0 AF 06 F1 | 	add	local05, ##28080
02fec     57 B9 02 F1 | 	add	local10, local05
02ff0     92 01 00 FF 
02ff4     F5 B1 06 F6 | 	mov	local06, ##@LR__5542
02ff8     5C B1 62 FC | 	wrlong	local06, local10
02ffc                 | LR__0168
02ffc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ffc     77 AF 02 F6 | 	mov	local05, local37
03000     01 AE 06 F1 | 	add	local05, #1
03004     03 AE 66 F0 | 	shl	local05, #3
03008     32 B1 02 F6 | 	mov	local06, objptr
0300c     36 00 00 FF 
03010     B0 B1 06 F1 | 	add	local06, ##28080
03014     58 AF 02 F1 | 	add	local05, local06
03018     57 93 02 FB | 	rdlong	arg01, local05
0301c     92 01 00 FF 
03020     F7 95 06 F6 | 	mov	arg02, ##@LR__5543
03024     FC 19 B2 FD | 	call	#__system___string_cmp
03028     00 7A 0E F2 | 	cmp	result1, #0 wz
0302c     28 00 90 5D |  if_ne	jmp	#LR__0169
03030     77 B9 02 F6 | 	mov	local10, local37
03034     01 B8 06 F1 | 	add	local10, #1
03038     03 B8 66 F0 | 	shl	local10, #3
0303c     32 AF 02 F6 | 	mov	local05, objptr
03040     36 00 00 FF 
03044     B0 AF 06 F1 | 	add	local05, ##28080
03048     57 B9 02 F1 | 	add	local10, local05
0304c     93 01 00 FF 
03050     00 B0 06 F6 | 	mov	local06, ##@LR__5544
03054     5C B1 62 FC | 	wrlong	local06, local10
03058                 | LR__0169
03058                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03058     77 AF 02 F6 | 	mov	local05, local37
0305c     01 AE 06 F1 | 	add	local05, #1
03060     03 AE 66 F0 | 	shl	local05, #3
03064     32 B1 02 F6 | 	mov	local06, objptr
03068     36 00 00 FF 
0306c     B0 B1 06 F1 | 	add	local06, ##28080
03070     58 AF 02 F1 | 	add	local05, local06
03074     57 93 02 FB | 	rdlong	arg01, local05
03078     93 01 00 FF 
0307c     02 94 06 F6 | 	mov	arg02, ##@LR__5545
03080     A0 19 B2 FD | 	call	#__system___string_cmp
03084     00 7A 0E F2 | 	cmp	result1, #0 wz
03088     28 00 90 5D |  if_ne	jmp	#LR__0170
0308c     77 B9 02 F6 | 	mov	local10, local37
03090     01 B8 06 F1 | 	add	local10, #1
03094     03 B8 66 F0 | 	shl	local10, #3
03098     32 AF 02 F6 | 	mov	local05, objptr
0309c     36 00 00 FF 
030a0     B0 AF 06 F1 | 	add	local05, ##28080
030a4     57 B9 02 F1 | 	add	local10, local05
030a8     93 01 00 FF 
030ac     05 B0 06 F6 | 	mov	local06, ##@LR__5546
030b0     5C B1 62 FC | 	wrlong	local06, local10
030b4                 | LR__0170
030b4                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
030b4     77 AF 02 F6 | 	mov	local05, local37
030b8     01 AE 06 F1 | 	add	local05, #1
030bc     03 AE 66 F0 | 	shl	local05, #3
030c0     32 B1 02 F6 | 	mov	local06, objptr
030c4     36 00 00 FF 
030c8     B0 B1 06 F1 | 	add	local06, ##28080
030cc     58 AF 02 F1 | 	add	local05, local06
030d0     57 93 02 FB | 	rdlong	arg01, local05
030d4     93 01 00 FF 
030d8     07 94 06 F6 | 	mov	arg02, ##@LR__5547
030dc     44 19 B2 FD | 	call	#__system___string_cmp
030e0     00 7A 0E F2 | 	cmp	result1, #0 wz
030e4     28 00 90 5D |  if_ne	jmp	#LR__0171
030e8     77 B9 02 F6 | 	mov	local10, local37
030ec     01 B8 06 F1 | 	add	local10, #1
030f0     03 B8 66 F0 | 	shl	local10, #3
030f4     32 AF 02 F6 | 	mov	local05, objptr
030f8     36 00 00 FF 
030fc     B0 AF 06 F1 | 	add	local05, ##28080
03100     57 B9 02 F1 | 	add	local10, local05
03104     93 01 00 FF 
03108     0D B0 06 F6 | 	mov	local06, ##@LR__5548
0310c     5C B1 62 FC | 	wrlong	local06, local10
03110                 | LR__0171
03110                 | LR__0172
03110                 | ' 
03110                 | ' ' find part types 
03110                 | ' 
03110                 | ' for i=0 to k-1
03110     00 A8 06 F6 | 	mov	local02, #0
03114     63 F9 02 F6 | 	mov	local42, local17
03118                 | LR__0173
03118     7C A9 52 F2 | 	cmps	local02, local42 wc
0311c     58 07 90 3D |  if_ae	jmp	#LR__0185
03120     54 B9 02 F6 | 	mov	local10, local02
03124     03 B8 66 F0 | 	shl	local10, #3
03128     36 00 00 FF 
0312c     B0 65 06 F1 | 	add	objptr, ##28080
03130     32 B9 02 F1 | 	add	local10, objptr
03134     54 BB 02 F6 | 	mov	local11, local02
03138     5D C1 02 F6 | 	mov	local14, local11
0313c     60 BF 02 F6 | 	mov	local13, local14
03140     03 BE 66 F0 | 	shl	local13, #3
03144     32 BF 02 F1 | 	add	local13, objptr
03148     5F 93 02 FB | 	rdlong	arg01, local13
0314c     36 00 00 FF 
03150     B0 65 86 F1 | 	sub	objptr, ##28080
03154     A8 1A B0 FD | 	call	#_isseparator
03158     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0315c     04 B8 06 F1 | 	add	local10, #4
03160     5C 7B 62 FC | 	wrlong	result1, local10
03164                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03164     54 B9 02 F6 | 	mov	local10, local02
03168     03 B8 66 F0 | 	shl	local10, #3
0316c     32 AF 02 F6 | 	mov	local05, objptr
03170     36 00 00 FF 
03174     B0 AF 06 F1 | 	add	local05, ##28080
03178     57 B9 02 F1 | 	add	local10, local05
0317c     04 B8 06 F1 | 	add	local10, #4
03180     5C BD 02 FB | 	rdlong	local12, local10
03184     01 BC 56 F2 | 	cmps	local12, #1 wc
03188     E4 06 90 3D |  if_ae	jmp	#LR__0184
0318c     54 B9 02 F6 | 	mov	local10, local02
03190     03 B8 66 F0 | 	shl	local10, #3
03194     36 00 00 FF 
03198     B0 65 06 F1 | 	add	objptr, ##28080
0319c     32 B9 02 F1 | 	add	local10, objptr
031a0     54 BB 02 F6 | 	mov	local11, local02
031a4     5D C1 02 F6 | 	mov	local14, local11
031a8     60 BF 02 F6 | 	mov	local13, local14
031ac     03 BE 66 F0 | 	shl	local13, #3
031b0     32 BF 02 F1 | 	add	local13, objptr
031b4     5F 93 02 FB | 	rdlong	arg01, local13
031b8     36 00 00 FF 
031bc     B0 65 86 F1 | 	sub	objptr, ##28080
031c0     88 12 B0 FD | 	call	#_isoperator
031c4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
031c8     04 B8 06 F1 | 	add	local10, #4
031cc     5C 7B 62 FC | 	wrlong	result1, local10
031d0                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d0     54 B9 02 F6 | 	mov	local10, local02
031d4     03 B8 66 F0 | 	shl	local10, #3
031d8     32 AF 02 F6 | 	mov	local05, objptr
031dc     36 00 00 FF 
031e0     B0 AF 06 F1 | 	add	local05, ##28080
031e4     57 B9 02 F1 | 	add	local10, local05
031e8     04 B8 06 F1 | 	add	local10, #4
031ec     5C BD 02 FB | 	rdlong	local12, local10
031f0     01 BC 56 F2 | 	cmps	local12, #1 wc
031f4     78 06 90 3D |  if_ae	jmp	#LR__0184
031f8     54 B9 02 F6 | 	mov	local10, local02
031fc     03 B8 66 F0 | 	shl	local10, #3
03200     36 00 00 FF 
03204     B0 65 06 F1 | 	add	objptr, ##28080
03208     32 B9 02 F1 | 	add	local10, objptr
0320c     54 BB 02 F6 | 	mov	local11, local02
03210     5D C1 02 F6 | 	mov	local14, local11
03214     60 BF 02 F6 | 	mov	local13, local14
03218     03 BE 66 F0 | 	shl	local13, #3
0321c     32 BF 02 F1 | 	add	local13, objptr
03220     5F 93 02 FB | 	rdlong	arg01, local13
03224     36 00 00 FF 
03228     B0 65 86 F1 | 	sub	objptr, ##28080
0322c                 | ' 
0322c                 | ' select case s
0322c     93 01 00 FF 
03230     12 95 06 F6 | 	mov	arg02, ##@LR__5639
03234     EC 17 B2 FD | 	call	#__system___string_cmp
03238     00 7A 0E F2 | 	cmp	result1, #0 wz
0323c     1B 7A 06 A6 |  if_e	mov	result1, #27
03240     00 7A 06 56 |  if_ne	mov	result1, #0
03244     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03248     04 B8 06 F1 | 	add	local10, #4
0324c     5C 7B 62 FC | 	wrlong	result1, local10
03250                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03250     54 B9 02 F6 | 	mov	local10, local02
03254     03 B8 66 F0 | 	shl	local10, #3
03258     32 AF 02 F6 | 	mov	local05, objptr
0325c     36 00 00 FF 
03260     B0 AF 06 F1 | 	add	local05, ##28080
03264     57 B9 02 F1 | 	add	local10, local05
03268     04 B8 06 F1 | 	add	local10, #4
0326c     5C BD 02 FB | 	rdlong	local12, local10
03270     01 BC 56 F2 | 	cmps	local12, #1 wc
03274     F8 05 90 3D |  if_ae	jmp	#LR__0184
03278     54 B9 02 F6 | 	mov	local10, local02
0327c     03 B8 66 F0 | 	shl	local10, #3
03280     36 00 00 FF 
03284     B0 65 06 F1 | 	add	objptr, ##28080
03288     32 B9 02 F1 | 	add	local10, objptr
0328c     54 BB 02 F6 | 	mov	local11, local02
03290     5D C1 02 F6 | 	mov	local14, local11
03294     60 BF 02 F6 | 	mov	local13, local14
03298     03 BE 66 F0 | 	shl	local13, #3
0329c     32 BF 02 F1 | 	add	local13, objptr
032a0     5F 93 02 FB | 	rdlong	arg01, local13
032a4     36 00 00 FF 
032a8     B0 65 86 F1 | 	sub	objptr, ##28080
032ac     50 1B B0 FD | 	call	#_iscommand
032b0     3D 7B E2 F8 | 	getbyte	result1, result1, #0
032b4     04 B8 06 F1 | 	add	local10, #4
032b8     5C 7B 62 FC | 	wrlong	result1, local10
032bc                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032bc     54 B9 02 F6 | 	mov	local10, local02
032c0     03 B8 66 F0 | 	shl	local10, #3
032c4     32 AF 02 F6 | 	mov	local05, objptr
032c8     36 00 00 FF 
032cc     B0 AF 06 F1 | 	add	local05, ##28080
032d0     57 B9 02 F1 | 	add	local10, local05
032d4     04 B8 06 F1 | 	add	local10, #4
032d8     5C BD 02 FB | 	rdlong	local12, local10
032dc     01 BC 56 F2 | 	cmps	local12, #1 wc
032e0     8C 05 90 3D |  if_ae	jmp	#LR__0184
032e4     54 B9 02 F6 | 	mov	local10, local02
032e8     03 B8 66 F0 | 	shl	local10, #3
032ec     36 00 00 FF 
032f0     B0 65 06 F1 | 	add	objptr, ##28080
032f4     32 B9 02 F1 | 	add	local10, objptr
032f8     54 BB 02 F6 | 	mov	local11, local02
032fc     5D C1 02 F6 | 	mov	local14, local11
03300     60 BF 02 F6 | 	mov	local13, local14
03304     03 BE 66 F0 | 	shl	local13, #3
03308     32 DD 02 F6 | 	mov	local28, objptr
0330c     32 BF 02 F1 | 	add	local13, objptr
03310     5F 93 02 FB | 	rdlong	arg01, local13
03314     36 00 00 FF 
03318     B0 65 86 F1 | 	sub	objptr, ##28080
0331c     A0 2C B0 FD | 	call	#_isfunction
03320     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03324     04 B8 06 F1 | 	add	local10, #4
03328     5C 7B 62 FC | 	wrlong	result1, local10
0332c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0332c     54 B9 02 F6 | 	mov	local10, local02
03330     03 B8 66 F0 | 	shl	local10, #3
03334     32 AF 02 F6 | 	mov	local05, objptr
03338     36 00 00 FF 
0333c     B0 AF 06 F1 | 	add	local05, ##28080
03340     57 B9 02 F1 | 	add	local10, local05
03344     04 B8 06 F1 | 	add	local10, #4
03348     5C BD 02 FB | 	rdlong	local12, local10
0334c     01 BC 56 F2 | 	cmps	local12, #1 wc
03350     1C 05 90 3D |  if_ae	jmp	#LR__0184
03354     54 B9 02 F6 | 	mov	local10, local02
03358     03 B8 66 F0 | 	shl	local10, #3
0335c     36 00 00 FF 
03360     B0 65 06 F1 | 	add	objptr, ##28080
03364     32 B9 02 F1 | 	add	local10, objptr
03368     54 BB 02 F6 | 	mov	local11, local02
0336c     5D C1 02 F6 | 	mov	local14, local11
03370     03 C0 66 F0 | 	shl	local14, #3
03374     32 BF 02 F6 | 	mov	local13, objptr
03378     32 C1 02 F1 | 	add	local14, objptr
0337c     60 93 02 FB | 	rdlong	arg01, local14
03380     36 00 00 FF 
03384     B0 65 86 F1 | 	sub	objptr, ##28080
03388     08 15 B0 FD | 	call	#_isnotename
0338c     04 B8 06 F1 | 	add	local10, #4
03390     5C 7B 62 FC | 	wrlong	result1, local10
03394                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03394                 | ' if lparts(i).token>0 then 
03394     54 B9 02 F6 | 	mov	local10, local02
03398     03 B8 66 F0 | 	shl	local10, #3
0339c     32 AF 02 F6 | 	mov	local05, objptr
033a0     36 00 00 FF 
033a4     B0 AF 06 F1 | 	add	local05, ##28080
033a8     57 B9 02 F1 | 	add	local10, local05
033ac     04 B8 06 F1 | 	add	local10, #4
033b0     5C B1 02 FB | 	rdlong	local06, local10
033b4     01 B0 56 F2 | 	cmps	local06, #1 wc
033b8     80 00 90 CD |  if_b	jmp	#LR__0174
033bc     54 AF 02 F6 | 	mov	local05, local02
033c0     03 AE 66 F0 | 	shl	local05, #3
033c4     32 B1 02 F6 | 	mov	local06, objptr
033c8     36 00 00 FF 
033cc     B0 B1 06 F1 | 	add	local06, ##28080
033d0     58 AF 02 F1 | 	add	local05, local06
033d4     04 AE 06 F1 | 	add	local05, #4
033d8     57 BD 02 FB | 	rdlong	local12, local05
033dc     5E 93 02 F6 | 	mov	arg01, local12
033e0     24 3E B0 FD | 	call	#_getnoteval
033e4     3D FB 02 F6 | 	mov	local43, result1
033e8     54 B9 02 F6 | 	mov	local10, local02
033ec     03 B8 66 F0 | 	shl	local10, #3
033f0     32 AF 02 F6 | 	mov	local05, objptr
033f4     36 00 00 FF 
033f8     B0 AF 06 F1 | 	add	local05, ##28080
033fc     57 B9 02 F1 | 	add	local10, local05
03400     7D 93 02 F6 | 	mov	arg01, local43
03404     94 30 B2 FD | 	call	#__system__str_S
03408     5C 7B 62 FC | 	wrlong	result1, local10
0340c     54 AD 02 F6 | 	mov	local04, local02
03410     56 AB 02 F6 | 	mov	local03, local04
03414     55 B9 02 F6 | 	mov	local10, local03
03418     03 B8 66 F0 | 	shl	local10, #3
0341c     32 AF 02 F6 | 	mov	local05, objptr
03420     36 00 00 FF 
03424     B0 AF 06 F1 | 	add	local05, ##28080
03428     57 B9 02 F1 | 	add	local10, local05
0342c     04 B8 06 F1 | 	add	local10, #4
03430     01 00 80 FF 
03434     5C 05 68 FC | 	wrlong	##514, local10
03438     34 04 90 FD | 	jmp	#LR__0184
0343c                 | LR__0174
0343c     54 B9 02 F6 | 	mov	local10, local02
03440     03 B8 66 F0 | 	shl	local10, #3
03444     36 00 00 FF 
03448     B0 65 06 F1 | 	add	objptr, ##28080
0344c     32 B9 02 F1 | 	add	local10, objptr
03450     54 C1 02 F6 | 	mov	local14, local02
03454     03 C0 66 F0 | 	shl	local14, #3
03458     32 C1 02 F1 | 	add	local14, objptr
0345c     60 93 02 FB | 	rdlong	arg01, local14
03460     36 00 00 FF 
03464     B0 65 86 F1 | 	sub	objptr, ##28080
03468     C0 12 B0 FD | 	call	#_ischannel
0346c     04 B8 06 F1 | 	add	local10, #4
03470     5C 7B 62 FC | 	wrlong	result1, local10
03474                 | ' 
03474                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03474                 | ' 
03474                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03474     54 B9 02 F6 | 	mov	local10, local02
03478     03 B8 66 F0 | 	shl	local10, #3
0347c     32 AF 02 F6 | 	mov	local05, objptr
03480     36 00 00 FF 
03484     B0 AF 06 F1 | 	add	local05, ##28080
03488     57 B9 02 F1 | 	add	local10, local05
0348c     04 B8 06 F1 | 	add	local10, #4
03490     5C B1 02 FB | 	rdlong	local06, local10
03494     01 B0 56 F2 | 	cmps	local06, #1 wc
03498     70 00 90 CD |  if_b	jmp	#LR__0175
0349c     54 B9 02 F6 | 	mov	local10, local02
034a0     03 B8 66 F0 | 	shl	local10, #3
034a4     36 00 00 FF 
034a8     B0 65 06 F1 | 	add	objptr, ##28080
034ac     32 B9 02 F1 | 	add	local10, objptr
034b0     54 BB 02 F6 | 	mov	local11, local02
034b4     5D C1 02 F6 | 	mov	local14, local11
034b8     03 C0 66 F0 | 	shl	local14, #3
034bc     32 BF 02 F6 | 	mov	local13, objptr
034c0     32 C1 02 F1 | 	add	local14, objptr
034c4     60 93 02 FB | 	rdlong	arg01, local14
034c8     01 BC 06 F6 | 	mov	local12, #1
034cc     01 94 06 F6 | 	mov	arg02, #1
034d0     36 00 00 FF 
034d4     B0 65 86 F1 | 	sub	objptr, ##28080
034d8     50 2E B2 FD | 	call	#__system__Right_S
034dc     5C 7B 62 FC | 	wrlong	result1, local10
034e0     54 AD 02 F6 | 	mov	local04, local02
034e4     56 AB 02 F6 | 	mov	local03, local04
034e8     55 B9 02 F6 | 	mov	local10, local03
034ec     03 B8 66 F0 | 	shl	local10, #3
034f0     32 AF 02 F6 | 	mov	local05, objptr
034f4     36 00 00 FF 
034f8     B0 AF 06 F1 | 	add	local05, ##28080
034fc     57 B9 02 F1 | 	add	local10, local05
03500     04 B8 06 F1 | 	add	local10, #4
03504     5C 59 68 FC | 	wrlong	#44, local10
03508     64 03 90 FD | 	jmp	#LR__0184
0350c                 | LR__0175
0350c     54 B9 02 F6 | 	mov	local10, local02
03510     03 B8 66 F0 | 	shl	local10, #3
03514     36 00 00 FF 
03518     B0 65 06 F1 | 	add	objptr, ##28080
0351c     32 B9 02 F1 | 	add	local10, objptr
03520     54 BB 02 F6 | 	mov	local11, local02
03524     5D C1 02 F6 | 	mov	local14, local11
03528     03 C0 66 F0 | 	shl	local14, #3
0352c     32 BF 02 F6 | 	mov	local13, objptr
03530     32 C1 02 F1 | 	add	local14, objptr
03534     60 93 02 FB | 	rdlong	arg01, local14
03538     36 00 00 FF 
0353c     B0 65 86 F1 | 	sub	objptr, ##28080
03540     D0 12 B0 FD | 	call	#_isconstant
03544     04 B8 06 F1 | 	add	local10, #4
03548     5C 7B 62 FC | 	wrlong	result1, local10
0354c                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
0354c     54 B9 02 F6 | 	mov	local10, local02
03550     03 B8 66 F0 | 	shl	local10, #3
03554     32 AF 02 F6 | 	mov	local05, objptr
03558     36 00 00 FF 
0355c     B0 AF 06 F1 | 	add	local05, ##28080
03560     57 B9 02 F1 | 	add	local10, local05
03564     04 B8 06 F1 | 	add	local10, #4
03568     5C B1 02 FB | 	rdlong	local06, local10
0356c     01 B0 56 F2 | 	cmps	local06, #1 wc
03570     90 00 90 CD |  if_b	jmp	#LR__0176
03574     54 B9 02 F6 | 	mov	local10, local02
03578     03 B8 66 F0 | 	shl	local10, #3
0357c     36 00 00 FF 
03580     B0 65 06 F1 | 	add	objptr, ##28080
03584     32 B9 02 F1 | 	add	local10, objptr
03588     54 BD 02 F6 | 	mov	local12, local02
0358c     5E BB 02 F6 | 	mov	local11, local12
03590     5D C1 02 F6 | 	mov	local14, local11
03594     03 C0 66 F0 | 	shl	local14, #3
03598     32 BF 02 F6 | 	mov	local13, objptr
0359c     32 C1 02 F1 | 	add	local14, objptr
035a0     04 C0 06 F1 | 	add	local14, #4
035a4     60 93 02 FB | 	rdlong	arg01, local14
035a8     04 C0 86 F1 | 	sub	local14, #4
035ac     36 00 00 FF 
035b0     B0 65 86 F1 | 	sub	objptr, ##28080
035b4     49 93 52 F6 | 	abs	arg01, arg01 wc
035b8     1F FC C6 C9 |  if_b	decod	local44, #31
035bc     00 FC 06 36 |  if_ae	mov	local44, #0
035c0     04 37 B2 FD | 	call	#__system___float_fromuns
035c4     7E 7B 62 F5 | 	xor	result1, local44
035c8     3D 93 02 F6 | 	mov	arg01, result1
035cc     CC 2E B2 FD | 	call	#__system__str_S
035d0     5C 7B 62 FC | 	wrlong	result1, local10
035d4     54 AD 02 F6 | 	mov	local04, local02
035d8     56 AB 02 F6 | 	mov	local03, local04
035dc     55 B9 02 F6 | 	mov	local10, local03
035e0     03 B8 66 F0 | 	shl	local10, #3
035e4     32 AF 02 F6 | 	mov	local05, objptr
035e8     36 00 00 FF 
035ec     B0 AF 06 F1 | 	add	local05, ##28080
035f0     57 B9 02 F1 | 	add	local10, local05
035f4     04 B8 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     5C 03 68 FC | 	wrlong	##513, local10
03600     6C 02 90 FD | 	jmp	#LR__0184
03604                 | LR__0176
03604     54 B1 02 F6 | 	mov	local06, local02
03608     03 B0 66 F0 | 	shl	local06, #3
0360c     32 BD 02 F6 | 	mov	local12, objptr
03610     36 00 00 FF 
03614     B0 BD 06 F1 | 	add	local12, ##28080
03618     5E B1 02 F1 | 	add	local06, local12
0361c     58 93 02 FB | 	rdlong	arg01, local06
03620     30 34 B0 FD | 	call	#_isnum
03624     3D FF 02 F6 | 	mov	local45, result1
03628     07 FE 66 F7 | 	signx	local45, #7
0362c     54 B1 02 F6 | 	mov	local06, local02
03630     03 B0 66 F0 | 	shl	local06, #3
03634     32 BD 02 F6 | 	mov	local12, objptr
03638     36 00 00 FF 
0363c     B0 BD 06 F1 | 	add	local12, ##28080
03640     5E B1 02 F1 | 	add	local06, local12
03644     58 93 02 FB | 	rdlong	arg01, local06
03648     F4 37 B0 FD | 	call	#_isint
0364c     3D 01 03 F6 | 	mov	local46, result1
03650     07 00 67 F7 | 	signx	local46, #7
03654     54 B1 02 F6 | 	mov	local06, local02
03658     03 B0 66 F0 | 	shl	local06, #3
0365c     32 BD 02 F6 | 	mov	local12, objptr
03660     36 00 00 FF 
03664     B0 BD 06 F1 | 	add	local12, ##28080
03668     5E B1 02 F1 | 	add	local06, local12
0366c     58 93 02 FB | 	rdlong	arg01, local06
03670     70 3A B0 FD | 	call	#_isdec
03674     07 7A 66 F7 | 	signx	result1, #7
03678     3D 03 03 F6 | 	mov	local47, result1
0367c                 | ' 
0367c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0367c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0367c     00 FE 0E F2 | 	cmp	local45, #0 wz
03680     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
03684     00 02 0F 52 |  if_ne	cmp	local47, #0 wz
03688     30 00 90 AD |  if_e	jmp	#LR__0177
0368c     54 AD 02 F6 | 	mov	local04, local02
03690     56 AB 02 F6 | 	mov	local03, local04
03694     55 B9 02 F6 | 	mov	local10, local03
03698     03 B8 66 F0 | 	shl	local10, #3
0369c     32 AF 02 F6 | 	mov	local05, objptr
036a0     36 00 00 FF 
036a4     B0 AF 06 F1 | 	add	local05, ##28080
036a8     57 B9 02 F1 | 	add	local10, local05
036ac     04 B8 06 F1 | 	add	local10, #4
036b0     01 00 80 FF 
036b4     5C 01 68 FC | 	wrlong	##512, local10
036b8     B4 01 90 FD | 	jmp	#LR__0184
036bc                 | LR__0177
036bc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036bc     00 FE 0E F2 | 	cmp	local45, #0 wz
036c0     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036c4     81 AD 22 56 |  if_ne	not	local04, local47
036c8     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
036cc     30 00 90 AD |  if_e	jmp	#LR__0178
036d0     54 AD 02 F6 | 	mov	local04, local02
036d4     56 AB 02 F6 | 	mov	local03, local04
036d8     55 B9 02 F6 | 	mov	local10, local03
036dc     03 B8 66 F0 | 	shl	local10, #3
036e0     32 AF 02 F6 | 	mov	local05, objptr
036e4     36 00 00 FF 
036e8     B0 AF 06 F1 | 	add	local05, ##28080
036ec     57 B9 02 F1 | 	add	local10, local05
036f0     04 B8 06 F1 | 	add	local10, #4
036f4     01 00 80 FF 
036f8     5C 03 68 FC | 	wrlong	##513, local10
036fc     70 01 90 FD | 	jmp	#LR__0184
03700                 | LR__0178
03700                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03700     00 FE 0E F2 | 	cmp	local45, #0 wz
03704     80 AD 22 56 |  if_ne	not	local04, local46
03708     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
0370c     81 AB 22 56 |  if_ne	not	local03, local47
03710     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
03714     30 00 90 AD |  if_e	jmp	#LR__0179
03718     54 AD 02 F6 | 	mov	local04, local02
0371c     56 AB 02 F6 | 	mov	local03, local04
03720     55 B9 02 F6 | 	mov	local10, local03
03724     03 B8 66 F0 | 	shl	local10, #3
03728     32 AF 02 F6 | 	mov	local05, objptr
0372c     36 00 00 FF 
03730     B0 AF 06 F1 | 	add	local05, ##28080
03734     57 B9 02 F1 | 	add	local10, local05
03738     04 B8 06 F1 | 	add	local10, #4
0373c     01 00 80 FF 
03740     5C 05 68 FC | 	wrlong	##514, local10
03744     28 01 90 FD | 	jmp	#LR__0184
03748                 | LR__0179
03748                 | ' 
03748                 | ' if isstring(lparts(i).part$) then 
03748     54 AF 02 F6 | 	mov	local05, local02
0374c     03 AE 66 F0 | 	shl	local05, #3
03750     32 B1 02 F6 | 	mov	local06, objptr
03754     36 00 00 FF 
03758     B0 B1 06 F1 | 	add	local06, ##28080
0375c     58 AF 02 F1 | 	add	local05, local06
03760     57 93 02 FB | 	rdlong	arg01, local05
03764     3C 3A B0 FD | 	call	#_isstring
03768     00 7A 0E F2 | 	cmp	result1, #0 wz
0376c     A8 00 90 AD |  if_e	jmp	#LR__0182
03770     54 B9 02 F6 | 	mov	local10, local02
03774     03 B8 66 F0 | 	shl	local10, #3
03778     36 00 00 FF 
0377c     B0 65 06 F1 | 	add	objptr, ##28080
03780     32 B9 02 F1 | 	add	local10, objptr
03784     04 B8 06 F1 | 	add	local10, #4
03788     01 00 80 FF 
0378c     5C 07 68 FC | 	wrlong	##515, local10
03790     54 AD 02 F6 | 	mov	local04, local02
03794     56 AB 02 F6 | 	mov	local03, local04
03798     55 B9 02 F6 | 	mov	local10, local03
0379c     03 B8 66 F0 | 	shl	local10, #3
037a0     32 B9 02 F1 | 	add	local10, objptr
037a4     54 C1 02 F6 | 	mov	local14, local02
037a8     03 C0 66 F0 | 	shl	local14, #3
037ac     32 C1 02 F1 | 	add	local14, objptr
037b0     60 B1 02 FB | 	rdlong	local06, local14
037b4     02 BC 06 F6 | 	mov	local12, #2
037b8     54 D1 02 F6 | 	mov	local22, local02
037bc     68 D3 02 F6 | 	mov	local23, local22
037c0     03 D2 66 F0 | 	shl	local23, #3
037c4     32 D5 02 F6 | 	mov	local24, objptr
037c8     32 D3 02 F1 | 	add	local23, objptr
037cc     69 93 02 FB | 	rdlong	arg01, local23
037d0     36 00 00 FF 
037d4     B0 65 86 F1 | 	sub	objptr, ##28080
037d8     49 B3 02 F6 | 	mov	local07, arg01
037dc     D7 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037e0                 | LR__0180
037e0     59 7B CA FA | 	rdbyte	result1, local07 wz
037e4     01 B2 06 51 |  if_ne	add	local07, #1
037e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037ec                 | LR__0181
037ec     49 B3 82 F1 | 	sub	local07, arg01
037f0     59 BF 02 F6 | 	mov	local13, local07
037f4     5F C1 02 F6 | 	mov	local14, local13
037f8     02 C0 86 F1 | 	sub	local14, #2
037fc     60 BB 02 F6 | 	mov	local11, local14
03800     58 93 02 F6 | 	mov	arg01, local06
03804     5E 95 02 F6 | 	mov	arg02, local12
03808     5D 97 02 F6 | 	mov	arg03, local11
0380c     AC 2B B2 FD | 	call	#__system__Mid_S
03810     5C 7B 62 FC | 	wrlong	result1, local10
03814     58 00 90 FD | 	jmp	#LR__0184
03818                 | LR__0182
03818                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03818     54 AB 02 F6 | 	mov	local03, local02
0381c     55 AF 02 F6 | 	mov	local05, local03
03820     03 AE 66 F0 | 	shl	local05, #3
03824     32 B1 02 F6 | 	mov	local06, objptr
03828     36 00 00 FF 
0382c     B0 B1 06 F1 | 	add	local06, ##28080
03830     58 AF 02 F1 | 	add	local05, local06
03834     57 93 02 FB | 	rdlong	arg01, local05
03838     A4 2F B0 FD | 	call	#_isname
0383c     3D AD 0A F6 | 	mov	local04, result1 wz
03840     2C 00 90 AD |  if_e	jmp	#LR__0183
03844     54 AD 02 F6 | 	mov	local04, local02
03848     56 AB 02 F6 | 	mov	local03, local04
0384c     55 B9 02 F6 | 	mov	local10, local03
03850     03 B8 66 F0 | 	shl	local10, #3
03854     32 AF 02 F6 | 	mov	local05, objptr
03858     36 00 00 FF 
0385c     B0 AF 06 F1 | 	add	local05, ##28080
03860     57 B9 02 F1 | 	add	local10, local05
03864     04 B8 06 F1 | 	add	local10, #4
03868     01 00 80 FF 
0386c     5C 09 68 FC | 	wrlong	##516, local10
03870                 | LR__0183
03870                 | LR__0184
03870     01 A8 06 F1 | 	add	local02, #1
03874     A0 F8 9F FD | 	jmp	#LR__0173
03878                 | LR__0185
03878     63 B9 02 F6 | 	mov	local10, local17
0387c     03 B8 66 F0 | 	shl	local10, #3
03880     36 00 00 FF 
03884     B0 65 06 F1 | 	add	objptr, ##28080
03888     32 B9 02 F1 | 	add	local10, objptr
0388c     04 B8 06 F1 | 	add	local10, #4
03890     5C FD 6B FC | 	wrlong	#510, local10
03894     63 B9 02 F6 | 	mov	local10, local17
03898     03 B8 66 F0 | 	shl	local10, #3
0389c     32 B9 02 F1 | 	add	local10, objptr
038a0     93 01 00 FF 
038a4     0F B0 06 F6 | 	mov	local06, ##@LR__5549
038a8     5C B1 62 FC | 	wrlong	local06, local10
038ac     10 00 00 FF 
038b0     54 64 06 F1 | 	add	objptr, ##8276
038b4     32 C7 62 FC | 	wrlong	local17, objptr
038b8     47 00 00 FF 
038bc     04 64 86 F1 | 	sub	objptr, ##36356
038c0                 | ' 
038c0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038c0                 | ' 
038c0                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038c0                 | '  
038c0                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038c0     93 01 00 FF 
038c4     10 94 06 F6 | 	mov	arg02, ##@LR__5550
038c8     7B 93 02 F6 | 	mov	arg01, local41
038cc     54 11 B2 FD | 	call	#__system___string_cmp
038d0     00 7A 0E F2 | 	cmp	result1, #0 wz
038d4     F0 00 90 AD |  if_e	jmp	#LR__0186
038d8     93 01 00 FF 
038dc     15 94 06 F6 | 	mov	arg02, ##@LR__5551
038e0     7B 93 02 F6 | 	mov	arg01, local41
038e4     3C 11 B2 FD | 	call	#__system___string_cmp
038e8     00 7A 0E F2 | 	cmp	result1, #0 wz
038ec     D8 00 90 AD |  if_e	jmp	#LR__0186
038f0     93 01 00 FF 
038f4     1A B0 06 F6 | 	mov	local06, ##@LR__5552
038f8     7B 93 02 F6 | 	mov	arg01, local41
038fc     58 95 02 F6 | 	mov	arg02, local06
03900     20 11 B2 FD | 	call	#__system___string_cmp
03904     00 7A 0E F2 | 	cmp	result1, #0 wz
03908     BC 00 90 AD |  if_e	jmp	#LR__0186
0390c     93 01 00 FF 
03910     1F BC 06 F6 | 	mov	local12, ##@LR__5553
03914     5E B1 02 F6 | 	mov	local06, local12
03918     7B 93 02 F6 | 	mov	arg01, local41
0391c     58 95 02 F6 | 	mov	arg02, local06
03920     00 11 B2 FD | 	call	#__system___string_cmp
03924     00 7A 0E F2 | 	cmp	result1, #0 wz
03928     9C 00 90 AD |  if_e	jmp	#LR__0186
0392c     93 01 00 FF 
03930     23 BA 06 F6 | 	mov	local11, ##@LR__5554
03934     5D BD 02 F6 | 	mov	local12, local11
03938     7B 93 02 F6 | 	mov	arg01, local41
0393c     5E 95 02 F6 | 	mov	arg02, local12
03940     E0 10 B2 FD | 	call	#__system___string_cmp
03944     3D B1 0A F6 | 	mov	local06, result1 wz
03948     7C 00 90 AD |  if_e	jmp	#LR__0186
0394c     93 01 00 FF 
03950     27 C0 06 F6 | 	mov	local14, ##@LR__5555
03954     60 BB 02 F6 | 	mov	local11, local14
03958     7B 93 02 F6 | 	mov	arg01, local41
0395c     5D 95 02 F6 | 	mov	arg02, local11
03960     C0 10 B2 FD | 	call	#__system___string_cmp
03964     3D BD 0A F6 | 	mov	local12, result1 wz
03968     5C 00 90 AD |  if_e	jmp	#LR__0186
0396c     93 01 00 FF 
03970     2A BE 06 F6 | 	mov	local13, ##@LR__5556
03974     5F C1 02 F6 | 	mov	local14, local13
03978     7B 93 02 F6 | 	mov	arg01, local41
0397c     60 95 02 F6 | 	mov	arg02, local14
03980     A0 10 B2 FD | 	call	#__system___string_cmp
03984     3D BB 0A F6 | 	mov	local11, result1 wz
03988     3C 00 90 AD |  if_e	jmp	#LR__0186
0398c     93 01 00 FF 
03990     2E BE 06 F6 | 	mov	local13, ##@LR__5557
03994     7B 93 02 F6 | 	mov	arg01, local41
03998     5F 95 02 F6 | 	mov	arg02, local13
0399c     84 10 B2 FD | 	call	#__system___string_cmp
039a0     3D C1 0A F6 | 	mov	local14, result1 wz
039a4     20 00 90 AD |  if_e	jmp	#LR__0186
039a8     93 01 00 FF 
039ac     34 D0 06 F6 | 	mov	local22, ##@LR__5558
039b0     68 DD 02 F6 | 	mov	local28, local22
039b4     7B 93 02 F6 | 	mov	arg01, local41
039b8     6E 95 02 F6 | 	mov	arg02, local28
039bc     64 10 B2 FD | 	call	#__system___string_cmp
039c0     3D BF 0A F6 | 	mov	local13, result1 wz
039c4     B8 00 90 5D |  if_ne	jmp	#LR__0187
039c8                 | LR__0186
039c8     77 DD 02 F6 | 	mov	local28, local37
039cc     01 DC 06 F1 | 	add	local28, #1
039d0     6E D1 02 F6 | 	mov	local22, local28
039d4     68 D3 02 F6 | 	mov	local23, local22
039d8     03 D2 66 F0 | 	shl	local23, #3
039dc     32 D5 02 F6 | 	mov	local24, objptr
039e0     36 00 00 FF 
039e4     B0 D5 06 F1 | 	add	local24, ##28080
039e8     6A D3 02 F1 | 	add	local23, local24
039ec     04 D2 06 F1 | 	add	local23, #4
039f0     69 E1 02 FB | 	rdlong	local30, local23
039f4     04 D2 86 F1 | 	sub	local23, #4
039f8     70 DF 02 F6 | 	mov	local29, local30
039fc     01 00 00 FF 
03a00     04 DE 0E F2 | 	cmp	local29, ##516 wz
03a04     78 00 90 5D |  if_ne	jmp	#LR__0187
03a08     77 05 03 F6 | 	mov	local48, local37
03a0c     01 04 07 F1 | 	add	local48, #1
03a10     03 04 67 F0 | 	shl	local48, #3
03a14     32 07 03 F6 | 	mov	local49, objptr
03a18     36 00 00 FF 
03a1c     B0 07 07 F1 | 	add	local49, ##28080
03a20     83 05 03 F1 | 	add	local48, local49
03a24     82 93 02 FB | 	rdlong	arg01, local48
03a28     01 94 06 F6 | 	mov	arg02, #1
03a2c     FC 28 B2 FD | 	call	#__system__Right_S
03a30     3D 93 02 F6 | 	mov	arg01, result1
03a34     93 01 00 FF 
03a38     37 08 07 F6 | 	mov	local50, ##@LR__5559
03a3c     84 0B 03 F6 | 	mov	local51, local50
03a40     85 95 02 F6 | 	mov	arg02, local51
03a44     DC 0F B2 FD | 	call	#__system___string_cmp
03a48     3D E3 0A F6 | 	mov	local31, result1 wz
03a4c     30 00 90 AD |  if_e	jmp	#LR__0187
03a50     77 B9 02 F6 | 	mov	local10, local37
03a54     01 B8 06 F1 | 	add	local10, #1
03a58     03 B8 66 F0 | 	shl	local10, #3
03a5c     32 AF 02 F6 | 	mov	local05, objptr
03a60     36 00 00 FF 
03a64     B0 AF 06 F1 | 	add	local05, ##28080
03a68     57 B9 02 F1 | 	add	local10, local05
03a6c     01 00 00 FF 
03a70     03 B0 06 F6 | 	mov	local06, ##515
03a74     04 B8 06 F1 | 	add	local10, #4
03a78     01 00 80 FF 
03a7c     5C 07 68 FC | 	wrlong	##515, local10
03a80                 | LR__0187
03a80                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a80     93 01 00 FF 
03a84     39 94 06 F6 | 	mov	arg02, ##@LR__5560
03a88     7B 93 02 F6 | 	mov	arg01, local41
03a8c     94 0F B2 FD | 	call	#__system___string_cmp
03a90     00 7A 0E F2 | 	cmp	result1, #0 wz
03a94     1C 00 90 AD |  if_e	jmp	#LR__0188
03a98     93 01 00 FF 
03a9c     40 AE 06 F6 | 	mov	local05, ##@LR__5561
03aa0     7B 93 02 F6 | 	mov	arg01, local41
03aa4     57 95 02 F6 | 	mov	arg02, local05
03aa8     78 0F B2 FD | 	call	#__system___string_cmp
03aac     00 7A 0E F2 | 	cmp	result1, #0 wz
03ab0     B4 00 90 5D |  if_ne	jmp	#LR__0189
03ab4                 | LR__0188
03ab4     77 AF 02 F6 | 	mov	local05, local37
03ab8     01 AE 06 F1 | 	add	local05, #1
03abc     57 B1 02 F6 | 	mov	local06, local05
03ac0     03 B0 66 F0 | 	shl	local06, #3
03ac4     32 BD 02 F6 | 	mov	local12, objptr
03ac8     36 00 00 FF 
03acc     B0 BD 06 F1 | 	add	local12, ##28080
03ad0     5E B1 02 F1 | 	add	local06, local12
03ad4     04 B0 06 F1 | 	add	local06, #4
03ad8     58 C1 02 FB | 	rdlong	local14, local06
03adc     04 B0 86 F1 | 	sub	local06, #4
03ae0     60 BB 02 F6 | 	mov	local11, local14
03ae4     01 00 00 FF 
03ae8     04 BA 0E F2 | 	cmp	local11, ##516 wz
03aec     78 00 90 5D |  if_ne	jmp	#LR__0189
03af0     77 D3 02 F6 | 	mov	local23, local37
03af4     01 D2 06 F1 | 	add	local23, #1
03af8     03 D2 66 F0 | 	shl	local23, #3
03afc     32 D5 02 F6 | 	mov	local24, objptr
03b00     36 00 00 FF 
03b04     B0 D5 06 F1 | 	add	local24, ##28080
03b08     6A D3 02 F1 | 	add	local23, local24
03b0c     69 93 02 FB | 	rdlong	arg01, local23
03b10     01 94 06 F6 | 	mov	arg02, #1
03b14     14 28 B2 FD | 	call	#__system__Right_S
03b18     3D 93 02 F6 | 	mov	arg01, result1
03b1c     93 01 00 FF 
03b20     46 D0 06 F6 | 	mov	local22, ##@LR__5562
03b24     68 DD 02 F6 | 	mov	local28, local22
03b28     6E 95 02 F6 | 	mov	arg02, local28
03b2c     F4 0E B2 FD | 	call	#__system___string_cmp
03b30     3D BF 0A F6 | 	mov	local13, result1 wz
03b34     30 00 90 AD |  if_e	jmp	#LR__0189
03b38     77 B9 02 F6 | 	mov	local10, local37
03b3c     01 B8 06 F1 | 	add	local10, #1
03b40     03 B8 66 F0 | 	shl	local10, #3
03b44     32 AF 02 F6 | 	mov	local05, objptr
03b48     36 00 00 FF 
03b4c     B0 AF 06 F1 | 	add	local05, ##28080
03b50     57 B9 02 F1 | 	add	local10, local05
03b54     01 00 00 FF 
03b58     03 B0 06 F6 | 	mov	local06, ##515
03b5c     04 B8 06 F1 | 	add	local10, #4
03b60     01 00 80 FF 
03b64     5C 07 68 FC | 	wrlong	##515, local10
03b68                 | LR__0189
03b68                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b68     93 01 00 FF 
03b6c     48 94 06 F6 | 	mov	arg02, ##@LR__5563
03b70     7B 93 02 F6 | 	mov	arg01, local41
03b74     AC 0E B2 FD | 	call	#__system___string_cmp
03b78     00 7A 0E F2 | 	cmp	result1, #0 wz
03b7c     B0 00 90 5D |  if_ne	jmp	#LR__0190
03b80     77 AF 02 F6 | 	mov	local05, local37
03b84     01 AE 06 F1 | 	add	local05, #1
03b88     03 AE 66 F0 | 	shl	local05, #3
03b8c     32 B1 02 F6 | 	mov	local06, objptr
03b90     36 00 00 FF 
03b94     B0 B1 06 F1 | 	add	local06, ##28080
03b98     58 AF 02 F1 | 	add	local05, local06
03b9c     04 AE 06 F1 | 	add	local05, #4
03ba0     57 BB 02 FB | 	rdlong	local11, local05
03ba4     04 AE 86 F1 | 	sub	local05, #4
03ba8     5D BD 02 F6 | 	mov	local12, local11
03bac     01 00 00 FF 
03bb0     04 BC 0E F2 | 	cmp	local12, ##516 wz
03bb4     78 00 90 5D |  if_ne	jmp	#LR__0190
03bb8     77 D1 02 F6 | 	mov	local22, local37
03bbc     01 D0 06 F1 | 	add	local22, #1
03bc0     03 D0 66 F0 | 	shl	local22, #3
03bc4     32 D3 02 F6 | 	mov	local23, objptr
03bc8     36 00 00 FF 
03bcc     B0 D3 06 F1 | 	add	local23, ##28080
03bd0     69 D1 02 F1 | 	add	local22, local23
03bd4     68 93 02 FB | 	rdlong	arg01, local22
03bd8     01 94 06 F6 | 	mov	arg02, #1
03bdc     4C 27 B2 FD | 	call	#__system__Right_S
03be0     3D 93 02 F6 | 	mov	arg01, result1
03be4     93 01 00 FF 
03be8     4D DC 06 F6 | 	mov	local28, ##@LR__5564
03bec     6E BF 02 F6 | 	mov	local13, local28
03bf0     5F 95 02 F6 | 	mov	arg02, local13
03bf4     2C 0E B2 FD | 	call	#__system___string_cmp
03bf8     3D C1 0A F6 | 	mov	local14, result1 wz
03bfc     30 00 90 AD |  if_e	jmp	#LR__0190
03c00     77 B9 02 F6 | 	mov	local10, local37
03c04     01 B8 06 F1 | 	add	local10, #1
03c08     03 B8 66 F0 | 	shl	local10, #3
03c0c     32 AF 02 F6 | 	mov	local05, objptr
03c10     36 00 00 FF 
03c14     B0 AF 06 F1 | 	add	local05, ##28080
03c18     57 B9 02 F1 | 	add	local10, local05
03c1c     01 00 00 FF 
03c20     03 B0 06 F6 | 	mov	local06, ##515
03c24     04 B8 06 F1 | 	add	local10, #4
03c28     01 00 80 FF 
03c2c     5C 07 68 FC | 	wrlong	##515, local10
03c30                 | LR__0190
03c30                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c30     93 01 00 FF 
03c34     4F 94 06 F6 | 	mov	arg02, ##@LR__5565
03c38     7B 93 02 F6 | 	mov	arg01, local41
03c3c     E4 0D B2 FD | 	call	#__system___string_cmp
03c40     00 7A 0E F2 | 	cmp	result1, #0 wz
03c44     B0 00 90 5D |  if_ne	jmp	#LR__0191
03c48     77 AF 02 F6 | 	mov	local05, local37
03c4c     03 AE 06 F1 | 	add	local05, #3
03c50     03 AE 66 F0 | 	shl	local05, #3
03c54     32 B1 02 F6 | 	mov	local06, objptr
03c58     36 00 00 FF 
03c5c     B0 B1 06 F1 | 	add	local06, ##28080
03c60     58 AF 02 F1 | 	add	local05, local06
03c64     04 AE 06 F1 | 	add	local05, #4
03c68     57 BB 02 FB | 	rdlong	local11, local05
03c6c     04 AE 86 F1 | 	sub	local05, #4
03c70     5D BD 02 F6 | 	mov	local12, local11
03c74     01 00 00 FF 
03c78     04 BC 0E F2 | 	cmp	local12, ##516 wz
03c7c     78 00 90 5D |  if_ne	jmp	#LR__0191
03c80     77 D1 02 F6 | 	mov	local22, local37
03c84     03 D0 06 F1 | 	add	local22, #3
03c88     03 D0 66 F0 | 	shl	local22, #3
03c8c     32 D3 02 F6 | 	mov	local23, objptr
03c90     36 00 00 FF 
03c94     B0 D3 06 F1 | 	add	local23, ##28080
03c98     69 D1 02 F1 | 	add	local22, local23
03c9c     68 93 02 FB | 	rdlong	arg01, local22
03ca0     01 94 06 F6 | 	mov	arg02, #1
03ca4     84 26 B2 FD | 	call	#__system__Right_S
03ca8     3D 93 02 F6 | 	mov	arg01, result1
03cac     93 01 00 FF 
03cb0     54 DC 06 F6 | 	mov	local28, ##@LR__5566
03cb4     6E BF 02 F6 | 	mov	local13, local28
03cb8     5F 95 02 F6 | 	mov	arg02, local13
03cbc     64 0D B2 FD | 	call	#__system___string_cmp
03cc0     3D C1 0A F6 | 	mov	local14, result1 wz
03cc4     30 00 90 AD |  if_e	jmp	#LR__0191
03cc8     77 B9 02 F6 | 	mov	local10, local37
03ccc     03 B8 06 F1 | 	add	local10, #3
03cd0     03 B8 66 F0 | 	shl	local10, #3
03cd4     32 AF 02 F6 | 	mov	local05, objptr
03cd8     36 00 00 FF 
03cdc     B0 AF 06 F1 | 	add	local05, ##28080
03ce0     57 B9 02 F1 | 	add	local10, local05
03ce4     01 00 00 FF 
03ce8     03 B0 06 F6 | 	mov	local06, ##515
03cec     04 B8 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     5C 07 68 FC | 	wrlong	##515, local10
03cf8                 | LR__0191
03cf8                 | ' 
03cf8                 | ' ' cd needs special treatment..
03cf8                 | ' 
03cf8                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cf8     93 01 00 FF 
03cfc     56 94 06 F6 | 	mov	arg02, ##@LR__5567
03d00     7B 93 02 F6 | 	mov	arg01, local41
03d04     1C 0D B2 FD | 	call	#__system___string_cmp
03d08     00 7A 0E F2 | 	cmp	result1, #0 wz
03d0c     30 00 90 5D |  if_ne	jmp	#LR__0192
03d10     77 B9 02 F6 | 	mov	local10, local37
03d14     01 B8 06 F1 | 	add	local10, #1
03d18     03 B8 66 F0 | 	shl	local10, #3
03d1c     32 AF 02 F6 | 	mov	local05, objptr
03d20     36 00 00 FF 
03d24     B0 AF 06 F1 | 	add	local05, ##28080
03d28     57 B9 02 F1 | 	add	local10, local05
03d2c     01 00 00 FF 
03d30     03 B0 06 F6 | 	mov	local06, ##515
03d34     04 B8 06 F1 | 	add	local10, #4
03d38     01 00 80 FF 
03d3c     5C 07 68 FC | 	wrlong	##515, local10
03d40                 | LR__0192
03d40                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d40     93 01 00 FF 
03d44     59 94 06 F6 | 	mov	arg02, ##@LR__5568
03d48     7B 93 02 F6 | 	mov	arg01, local41
03d4c     D4 0C B2 FD | 	call	#__system___string_cmp
03d50     00 7A 0E F2 | 	cmp	result1, #0 wz
03d54     9C 00 90 5D |  if_ne	jmp	#LR__0193
03d58     77 B1 02 F6 | 	mov	local06, local37
03d5c     01 B0 06 F1 | 	add	local06, #1
03d60     03 B0 66 F0 | 	shl	local06, #3
03d64     32 BD 02 F6 | 	mov	local12, objptr
03d68     36 00 00 FF 
03d6c     B0 BD 06 F1 | 	add	local12, ##28080
03d70     5E B1 02 F1 | 	add	local06, local12
03d74     58 93 02 FB | 	rdlong	arg01, local06
03d78     93 01 00 FF 
03d7c     5D AE 06 F6 | 	mov	local05, ##@LR__5569
03d80     57 95 02 F6 | 	mov	arg02, local05
03d84     9C 0C B2 FD | 	call	#__system___string_cmp
03d88     00 7A 0E F2 | 	cmp	result1, #0 wz
03d8c     64 00 90 5D |  if_ne	jmp	#LR__0193
03d90     77 B9 02 F6 | 	mov	local10, local37
03d94     01 B8 06 F1 | 	add	local10, #1
03d98     03 B8 66 F0 | 	shl	local10, #3
03d9c     36 00 00 FF 
03da0     B0 65 06 F1 | 	add	objptr, ##28080
03da4     32 B9 02 F1 | 	add	local10, objptr
03da8     04 B8 06 F1 | 	add	local10, #4
03dac     01 00 80 FF 
03db0     5C 07 68 FC | 	wrlong	##515, local10
03db4     77 B9 02 F6 | 	mov	local10, local37
03db8     01 B8 06 F1 | 	add	local10, #1
03dbc     03 B8 66 F0 | 	shl	local10, #3
03dc0     32 B9 02 F1 | 	add	local10, objptr
03dc4     93 01 00 FF 
03dc8     5F B0 06 F6 | 	mov	local06, ##@LR__5570
03dcc     5C B1 62 FC | 	wrlong	local06, local10
03dd0     77 B9 02 F6 | 	mov	local10, local37
03dd4     03 B8 66 F0 | 	shl	local10, #3
03dd8     32 AF 02 F6 | 	mov	local05, objptr
03ddc     32 B9 02 F1 | 	add	local10, objptr
03de0     C3 B0 06 F6 | 	mov	local06, #195
03de4     04 B8 06 F1 | 	add	local10, #4
03de8     5C 87 69 FC | 	wrlong	#195, local10
03dec     36 00 00 FF 
03df0     B0 65 86 F1 | 	sub	objptr, ##28080
03df4                 | LR__0193
03df4                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03df4     93 01 00 FF 
03df8     62 B8 06 F6 | 	mov	local10, ##@LR__5571
03dfc     7B 93 02 F6 | 	mov	arg01, local41
03e00     5C 95 02 F6 | 	mov	arg02, local10
03e04     1C 0C B2 FD | 	call	#__system___string_cmp
03e08     00 7A 0E F2 | 	cmp	result1, #0 wz
03e0c     F4 00 90 5D |  if_ne	jmp	#LR__0196
03e10     77 B1 02 F6 | 	mov	local06, local37
03e14     01 B0 06 F1 | 	add	local06, #1
03e18     03 B0 66 F0 | 	shl	local06, #3
03e1c     32 BD 02 F6 | 	mov	local12, objptr
03e20     36 00 00 FF 
03e24     B0 BD 06 F1 | 	add	local12, ##28080
03e28     5E B1 02 F1 | 	add	local06, local12
03e2c     58 93 02 FB | 	rdlong	arg01, local06
03e30     93 01 00 FF 
03e34     65 AE 06 F6 | 	mov	local05, ##@LR__5572
03e38     57 B9 02 F6 | 	mov	local10, local05
03e3c     5C 95 02 F6 | 	mov	arg02, local10
03e40     E0 0B B2 FD | 	call	#__system___string_cmp
03e44     00 7A 0E F2 | 	cmp	result1, #0 wz
03e48     B8 00 90 5D |  if_ne	jmp	#LR__0196
03e4c     77 B9 02 F6 | 	mov	local10, local37
03e50     01 B8 06 F1 | 	add	local10, #1
03e54     03 B8 66 F0 | 	shl	local10, #3
03e58     32 AF 02 F6 | 	mov	local05, objptr
03e5c     36 00 00 FF 
03e60     B0 AF 06 F1 | 	add	local05, ##28080
03e64     57 B9 02 F1 | 	add	local10, local05
03e68     01 00 00 FF 
03e6c     03 B0 06 F6 | 	mov	local06, ##515
03e70     04 B8 06 F1 | 	add	local10, #4
03e74     01 00 80 FF 
03e78     5C 07 68 FC | 	wrlong	##515, local10
03e7c     04 B8 86 F1 | 	sub	local10, #4
03e80     77 A9 02 F6 | 	mov	local02, local37
03e84     02 A8 06 F1 | 	add	local02, #2
03e88     63 0D 03 F6 | 	mov	local52, local17
03e8c     01 0C 07 F1 | 	add	local52, #1
03e90                 | LR__0194
03e90     86 A9 52 F2 | 	cmps	local02, local52 wc
03e94     6C 00 90 3D |  if_ae	jmp	#LR__0195
03e98     77 B9 02 F6 | 	mov	local10, local37
03e9c     01 B8 06 F1 | 	add	local10, #1
03ea0     03 B8 66 F0 | 	shl	local10, #3
03ea4     36 00 00 FF 
03ea8     B0 65 06 F1 | 	add	objptr, ##28080
03eac     32 AF 02 F6 | 	mov	local05, objptr
03eb0     32 B9 02 F1 | 	add	local10, objptr
03eb4     77 C1 02 F6 | 	mov	local14, local37
03eb8     01 C0 06 F1 | 	add	local14, #1
03ebc     03 C0 66 F0 | 	shl	local14, #3
03ec0     32 C1 02 F1 | 	add	local14, objptr
03ec4     60 93 02 FB | 	rdlong	arg01, local14
03ec8     54 BB 02 F6 | 	mov	local11, local02
03ecc     5D C1 02 F6 | 	mov	local14, local11
03ed0     60 BF 02 F6 | 	mov	local13, local14
03ed4     03 BE 66 F0 | 	shl	local13, #3
03ed8     32 DD 02 F6 | 	mov	local28, objptr
03edc     32 BF 02 F1 | 	add	local13, objptr
03ee0     5F BD 02 FB | 	rdlong	local12, local13
03ee4     5E 95 02 F6 | 	mov	arg02, local12
03ee8     36 00 00 FF 
03eec     B0 65 86 F1 | 	sub	objptr, ##28080
03ef0     64 0B B2 FD | 	call	#__system___string_concat
03ef4     3D B1 02 F6 | 	mov	local06, result1
03ef8     5C B1 62 FC | 	wrlong	local06, local10
03efc     01 A8 06 F1 | 	add	local02, #1
03f00     8C FF 9F FD | 	jmp	#LR__0194
03f04                 | LR__0195
03f04                 | LR__0196
03f04                 | ' 
03f04                 | ' ' determine a type of the line and compile it
03f04                 | ' 
03f04                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f04     36 00 00 FF 
03f08     B0 65 06 F1 | 	add	objptr, ##28080
03f0c     32 93 02 FB | 	rdlong	arg01, objptr
03f10     36 00 00 FF 
03f14     B0 65 86 F1 | 	sub	objptr, ##28080
03f18     C8 31 B0 FD | 	call	#_isdec
03f1c     00 7A 0E F2 | 	cmp	result1, #0 wz
03f20     30 00 90 AD |  if_e	jmp	#LR__0197
03f24     36 00 00 FF 
03f28     B0 65 06 F1 | 	add	objptr, ##28080
03f2c     32 93 02 FB | 	rdlong	arg01, objptr
03f30     36 00 00 FF 
03f34     B0 65 86 F1 | 	sub	objptr, ##28080
03f38     00 94 06 F6 | 	mov	arg02, #0
03f3c     10 38 B2 FD | 	call	#__system____builtin_atoi
03f40     54 00 00 FF 
03f44     8C 64 06 F1 | 	add	objptr, ##43148
03f48     32 7B 62 FC | 	wrlong	result1, objptr
03f4c     54 00 00 FF 
03f50     8C 64 86 F1 | 	sub	objptr, ##43148
03f54                 | LR__0197
03f54                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f54     54 00 00 FF 
03f58     8C 64 06 F1 | 	add	objptr, ##43148
03f5c     32 AD 02 FB | 	rdlong	local04, objptr
03f60     54 00 00 FF 
03f64     8C 64 86 F1 | 	sub	objptr, ##43148
03f68     01 AC 16 F2 | 	cmp	local04, #1 wc
03f6c     40 00 90 CD |  if_b	jmp	#LR__0198
03f70     01 C6 0E F2 | 	cmp	local17, #1 wz
03f74     38 00 00 AF 
03f78     C8 65 06 A1 |  if_e	add	objptr, ##29128
03f7c     32 AF 02 AB |  if_e	rdlong	local05, objptr
03f80     38 00 00 AF 
03f84     C8 65 86 A1 |  if_e	sub	objptr, ##29128
03f88     57 B9 02 A6 |  if_e	mov	local10, local05
03f8c     03 B8 0E A2 |  if_e	cmp	local10, #3 wz
03f90     1C 00 90 5D |  if_ne	jmp	#LR__0198
03f94     54 00 00 FF 
03f98     8C 64 06 F1 | 	add	objptr, ##43148
03f9c     32 93 02 FB | 	rdlong	arg01, objptr
03fa0     54 00 00 FF 
03fa4     8C 64 86 F1 | 	sub	objptr, ##43148
03fa8     E0 32 B0 FD | 	call	#_deleteline
03fac     C8 03 90 FD | 	jmp	#LR__0209
03fb0                 | LR__0198
03fb0                 | ' 
03fb0                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fb0     38 00 00 FF 
03fb4     C8 65 06 F1 | 	add	objptr, ##29128
03fb8     32 AD 0A FB | 	rdlong	local04, objptr wz
03fbc     38 00 00 FF 
03fc0     C8 65 86 F1 | 	sub	objptr, ##29128
03fc4     20 00 90 AD |  if_e	jmp	#LR__0199
03fc8     38 00 00 FF 
03fcc     C8 65 06 F1 | 	add	objptr, ##29128
03fd0     32 AF 02 FB | 	rdlong	local05, objptr
03fd4     38 00 00 FF 
03fd8     C8 65 86 F1 | 	sub	objptr, ##29128
03fdc     57 B9 02 F6 | 	mov	local10, local05
03fe0     03 B8 0E F2 | 	cmp	local10, #3 wz
03fe4     C0 00 90 5D |  if_ne	jmp	#LR__0201
03fe8                 | LR__0199
03fe8     36 00 00 FF 
03fec     C4 65 06 F1 | 	add	objptr, ##28100
03ff0     32 BD 02 FB | 	rdlong	local12, objptr
03ff4     36 00 00 FF 
03ff8     C4 65 86 F1 | 	sub	objptr, ##28100
03ffc     1B BC 0E F2 | 	cmp	local12, #27 wz
04000     A4 00 90 AD |  if_e	jmp	#LR__0201
04004     54 00 00 FF 
04008     8C 64 06 F1 | 	add	objptr, ##43148
0400c     32 93 02 FB | 	rdlong	arg01, objptr
04010     1B 00 00 FF 
04014     C4 64 86 F1 | 	sub	objptr, ##14020
04018     32 97 02 FB | 	rdlong	arg03, objptr
0401c     38 00 00 FF 
04020     C8 65 86 F1 | 	sub	objptr, ##29128
04024     00 94 06 F6 | 	mov	arg02, #0
04028     38 46 B0 FD | 	call	#_compile
0402c     3D A7 0A F6 | 	mov	local01, result1 wz
04030                 | '   err=compile(linenum,0,cont) 
04030                 | '   if err<>0 then printerror(err,linenum): goto 101
04030     20 00 90 AD |  if_e	jmp	#LR__0200
04034     54 00 00 FF 
04038     8C 64 06 F1 | 	add	objptr, ##43148
0403c     32 95 02 FB | 	rdlong	arg02, objptr
04040     54 00 00 FF 
04044     8C 64 86 F1 | 	sub	objptr, ##43148
04048     53 93 02 F6 | 	mov	arg01, local01
0404c     84 CC B1 FD | 	call	#_printerror
04050     44 03 90 FD | 	jmp	#LR__0210
04054                 | LR__0200
04054                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04054     54 00 00 FF 
04058     D0 64 06 F1 | 	add	objptr, ##43216
0405c     32 93 02 FB | 	rdlong	arg01, objptr
04060     54 00 00 FF 
04064     D0 64 86 F1 | 	sub	objptr, ##43216
04068     93 01 00 FF 
0406c     67 94 06 F6 | 	mov	arg02, ##@LR__5573
04070     B0 09 B2 FD | 	call	#__system___string_cmp
04074     00 7A 0E F2 | 	cmp	result1, #0 wz
04078     FC 02 90 AD |  if_e	jmp	#LR__0209
0407c     54 00 00 FF 
04080     D0 64 06 F1 | 	add	objptr, ##43216
04084     32 AD 02 FB | 	rdlong	local04, objptr
04088     1B 00 00 FF 
0408c     10 65 86 F1 | 	sub	objptr, ##14096
04090     32 AD 62 FC | 	wrlong	local04, objptr
04094     08 64 06 F1 | 	add	objptr, #8
04098     32 09 68 FC | 	wrlong	#4, objptr
0409c     38 00 00 FF 
040a0     C8 65 86 F1 | 	sub	objptr, ##29128
040a4     0C D9 9F FD | 	jmp	#LR__0070
040a8                 | LR__0201
040a8                 | '       							
040a8                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040a8     38 00 00 FF 
040ac     C8 65 06 F1 | 	add	objptr, ##29128
040b0     32 AD 02 FB | 	rdlong	local04, objptr
040b4     38 00 00 FF 
040b8     C8 65 86 F1 | 	sub	objptr, ##29128
040bc     01 AC 0E F2 | 	cmp	local04, #1 wz
040c0     38 00 00 5F 
040c4     C8 65 06 51 |  if_ne	add	objptr, ##29128
040c8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
040cc     38 00 00 5F 
040d0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
040d4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
040d8     C0 00 90 5D |  if_ne	jmp	#LR__0203
040dc     36 00 00 FF 
040e0     BC 65 06 F1 | 	add	objptr, ##28092
040e4     32 BD 02 FB | 	rdlong	local12, objptr
040e8     36 00 00 FF 
040ec     BC 65 86 F1 | 	sub	objptr, ##28092
040f0     1B BC 0E F2 | 	cmp	local12, #27 wz
040f4     A4 00 90 AD |  if_e	jmp	#LR__0203
040f8     54 00 00 FF 
040fc     8C 64 06 F1 | 	add	objptr, ##43148
04100     32 93 02 FB | 	rdlong	arg01, objptr
04104     1B 00 00 FF 
04108     C4 64 86 F1 | 	sub	objptr, ##14020
0410c     32 97 02 FB | 	rdlong	arg03, objptr
04110     38 00 00 FF 
04114     C8 65 86 F1 | 	sub	objptr, ##29128
04118     00 94 06 F6 | 	mov	arg02, #0
0411c     44 45 B0 FD | 	call	#_compile
04120     3D A7 0A F6 | 	mov	local01, result1 wz
04124                 | '   err=compile(linenum,0,cont) 
04124                 | '   if err<>0 then printerror(err,linenum): goto 101
04124     20 00 90 AD |  if_e	jmp	#LR__0202
04128     54 00 00 FF 
0412c     8C 64 06 F1 | 	add	objptr, ##43148
04130     32 95 02 FB | 	rdlong	arg02, objptr
04134     54 00 00 FF 
04138     8C 64 86 F1 | 	sub	objptr, ##43148
0413c     53 93 02 F6 | 	mov	arg01, local01
04140     90 CB B1 FD | 	call	#_printerror
04144     50 02 90 FD | 	jmp	#LR__0210
04148                 | LR__0202
04148                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04148     54 00 00 FF 
0414c     D0 64 06 F1 | 	add	objptr, ##43216
04150     32 93 02 FB | 	rdlong	arg01, objptr
04154     54 00 00 FF 
04158     D0 64 86 F1 | 	sub	objptr, ##43216
0415c     93 01 00 FF 
04160     68 94 06 F6 | 	mov	arg02, ##@LR__5574
04164     BC 08 B2 FD | 	call	#__system___string_cmp
04168     00 7A 0E F2 | 	cmp	result1, #0 wz
0416c     08 02 90 AD |  if_e	jmp	#LR__0209
04170     54 00 00 FF 
04174     D0 64 06 F1 | 	add	objptr, ##43216
04178     32 AD 02 FB | 	rdlong	local04, objptr
0417c     1B 00 00 FF 
04180     10 65 86 F1 | 	sub	objptr, ##14096
04184     32 AD 62 FC | 	wrlong	local04, objptr
04188     08 64 06 F1 | 	add	objptr, #8
0418c     32 09 68 FC | 	wrlong	#4, objptr
04190     38 00 00 FF 
04194     C8 65 86 F1 | 	sub	objptr, ##29128
04198     18 D8 9F FD | 	jmp	#LR__0070
0419c                 | LR__0203
0419c                 | ' 							 
0419c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0419c     38 00 00 FF 
041a0     C8 65 06 F1 | 	add	objptr, ##29128
041a4     32 AD 0A FB | 	rdlong	local04, objptr wz
041a8     38 00 00 FF 
041ac     C8 65 86 F1 | 	sub	objptr, ##29128
041b0     38 00 00 5F 
041b4     C8 65 06 51 |  if_ne	add	objptr, ##29128
041b8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
041bc     38 00 00 5F 
041c0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
041c4     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
041c8     36 00 00 AF 
041cc     C4 65 06 A1 |  if_e	add	objptr, ##28100
041d0     32 BD 02 AB |  if_e	rdlong	local12, objptr
041d4     36 00 00 AF 
041d8     C4 65 86 A1 |  if_e	sub	objptr, ##28100
041dc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
041e0     A4 00 90 5D |  if_ne	jmp	#LR__0205
041e4     54 00 00 FF 
041e8     8C 64 06 F1 | 	add	objptr, ##43148
041ec     32 93 02 FB | 	rdlong	arg01, objptr
041f0     1B 00 00 FF 
041f4     C4 64 86 F1 | 	sub	objptr, ##14020
041f8     32 97 02 FB | 	rdlong	arg03, objptr
041fc     38 00 00 FF 
04200     C8 65 86 F1 | 	sub	objptr, ##29128
04204     00 94 06 F6 | 	mov	arg02, #0
04208     20 45 B0 FD | 	call	#_compile_assign
0420c     3D A7 0A F6 | 	mov	local01, result1 wz
04210                 | '   err=compile_assign(linenum,0,cont)
04210                 | '   if err<>0 then printerror(err,linenum): goto 101
04210     20 00 90 AD |  if_e	jmp	#LR__0204
04214     54 00 00 FF 
04218     8C 64 06 F1 | 	add	objptr, ##43148
0421c     32 95 02 FB | 	rdlong	arg02, objptr
04220     54 00 00 FF 
04224     8C 64 86 F1 | 	sub	objptr, ##43148
04228     53 93 02 F6 | 	mov	arg01, local01
0422c     A4 CA B1 FD | 	call	#_printerror
04230     64 01 90 FD | 	jmp	#LR__0210
04234                 | LR__0204
04234                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04234     54 00 00 FF 
04238     D0 64 06 F1 | 	add	objptr, ##43216
0423c     32 93 02 FB | 	rdlong	arg01, objptr
04240     54 00 00 FF 
04244     D0 64 86 F1 | 	sub	objptr, ##43216
04248     93 01 00 FF 
0424c     69 94 06 F6 | 	mov	arg02, ##@LR__5575
04250     D0 07 B2 FD | 	call	#__system___string_cmp
04254     00 7A 0E F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0209
0425c     54 00 00 FF 
04260     D0 64 06 F1 | 	add	objptr, ##43216
04264     32 AD 02 FB | 	rdlong	local04, objptr
04268     1B 00 00 FF 
0426c     10 65 86 F1 | 	sub	objptr, ##14096
04270     32 AD 62 FC | 	wrlong	local04, objptr
04274     08 64 06 F1 | 	add	objptr, #8
04278     32 09 68 FC | 	wrlong	#4, objptr
0427c     38 00 00 FF 
04280     C8 65 86 F1 | 	sub	objptr, ##29128
04284     2C D7 9F FD | 	jmp	#LR__0070
04288                 | LR__0205
04288                 | '     							 
04288                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04288     38 00 00 FF 
0428c     C8 65 06 F1 | 	add	objptr, ##29128
04290     32 AD 02 FB | 	rdlong	local04, objptr
04294     38 00 00 FF 
04298     C8 65 86 F1 | 	sub	objptr, ##29128
0429c     01 AC 0E F2 | 	cmp	local04, #1 wz
042a0     38 00 00 5F 
042a4     C8 65 06 51 |  if_ne	add	objptr, ##29128
042a8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
042ac     38 00 00 5F 
042b0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
042b4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
042b8     36 00 00 AF 
042bc     BC 65 06 A1 |  if_e	add	objptr, ##28092
042c0     32 BD 02 AB |  if_e	rdlong	local12, objptr
042c4     36 00 00 AF 
042c8     BC 65 86 A1 |  if_e	sub	objptr, ##28092
042cc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
042d0     A4 00 90 5D |  if_ne	jmp	#LR__0208
042d4     54 00 00 FF 
042d8     8C 64 06 F1 | 	add	objptr, ##43148
042dc     32 93 02 FB | 	rdlong	arg01, objptr
042e0     1B 00 00 FF 
042e4     C4 64 86 F1 | 	sub	objptr, ##14020
042e8     32 97 02 FB | 	rdlong	arg03, objptr
042ec     38 00 00 FF 
042f0     C8 65 86 F1 | 	sub	objptr, ##29128
042f4     00 94 06 F6 | 	mov	arg02, #0
042f8     30 44 B0 FD | 	call	#_compile_assign
042fc     3D A7 0A F6 | 	mov	local01, result1 wz
04300                 | '   err=compile_assign(linenum,0,cont) 
04300                 | '   if err<>0 then printerror(err,linenum): goto 101
04300     20 00 90 AD |  if_e	jmp	#LR__0206
04304     54 00 00 FF 
04308     8C 64 06 F1 | 	add	objptr, ##43148
0430c     32 95 02 FB | 	rdlong	arg02, objptr
04310     54 00 00 FF 
04314     8C 64 86 F1 | 	sub	objptr, ##43148
04318     53 93 02 F6 | 	mov	arg01, local01
0431c     B4 C9 B1 FD | 	call	#_printerror
04320     74 00 90 FD | 	jmp	#LR__0210
04324                 | LR__0206
04324                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04324     54 00 00 FF 
04328     D0 64 06 F1 | 	add	objptr, ##43216
0432c     32 93 02 FB | 	rdlong	arg01, objptr
04330     54 00 00 FF 
04334     D0 64 86 F1 | 	sub	objptr, ##43216
04338     93 01 00 FF 
0433c     6A 94 06 F6 | 	mov	arg02, ##@LR__5576
04340     E0 06 B2 FD | 	call	#__system___string_cmp
04344     00 7A 4E F2 | 	cmps	result1, #0 wz
04348     2C 00 90 AD |  if_e	jmp	#LR__0207
0434c     54 00 00 FF 
04350     D0 64 06 F1 | 	add	objptr, ##43216
04354     32 AD 02 FB | 	rdlong	local04, objptr
04358     1B 00 00 FF 
0435c     10 65 86 F1 | 	sub	objptr, ##14096
04360     32 AD 62 FC | 	wrlong	local04, objptr
04364     08 64 06 F1 | 	add	objptr, #8
04368     32 09 68 FC | 	wrlong	#4, objptr
0436c     38 00 00 FF 
04370     C8 65 86 F1 | 	sub	objptr, ##29128
04374     3C D6 9F FD | 	jmp	#LR__0070
04378                 | LR__0207
04378                 | LR__0208
04378                 | LR__0209
04378                 | ' 
04378                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04378     54 00 00 FF 
0437c     8C 64 06 F1 | 	add	objptr, ##43148
04380     32 AD 0A FB | 	rdlong	local04, objptr wz
04384     54 00 00 FF 
04388     8C 64 86 F1 | 	sub	objptr, ##43148
0438c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04390     02 92 06 F6 | 	mov	arg01, #2
04394     D4 91 B0 FD | 	call	#_execute_line
04398                 | LR__0210
04398                 | '   execute_line(2)
04398                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04398     54 00 00 FF 
0439c     B0 64 06 F1 | 	add	objptr, ##43184
043a0     32 AD 0A FB | 	rdlong	local04, objptr wz
043a4     54 00 00 FF 
043a8     B0 64 86 F1 | 	sub	objptr, ##43184
043ac     20 00 90 5D |  if_ne	jmp	#LR__0211
043b0     93 01 00 FF 
043b4     6B 92 06 F6 | 	mov	arg01, ##@LR__5577
043b8                 | ' 
043b8                 | ' write(text)
043b8     D0 EA B1 FD | 	call	#_hg010b_spin2_write
043bc                 | ' crlf
043bc     6C EF B1 FD | 	call	#_hg010b_spin2_crlf
043c0     93 01 00 FF 
043c4     6C 92 06 F6 | 	mov	arg01, ##@LR__5578
043c8                 | ' 
043c8                 | ' write(text)
043c8     C0 EA B1 FD | 	call	#_hg010b_spin2_write
043cc                 | ' crlf
043cc     5C EF B1 FD | 	call	#_hg010b_spin2_crlf
043d0                 | LR__0211
043d0                 | '     if inload=1 andalso err>0 then print fullline$
043d0     54 00 00 FF 
043d4     B0 64 06 F1 | 	add	objptr, ##43184
043d8     32 AD 02 FB | 	rdlong	local04, objptr
043dc     54 00 00 FF 
043e0     B0 64 86 F1 | 	sub	objptr, ##43184
043e4     01 AC 0E F2 | 	cmp	local04, #1 wz
043e8     54 00 90 5D |  if_ne	jmp	#LR__0212
043ec     01 A6 56 F2 | 	cmps	local01, #1 wc
043f0     4C 00 90 CD |  if_b	jmp	#LR__0212
043f4     00 92 06 F6 | 	mov	arg01, #0
043f8     84 5B B2 FD | 	call	#__system___getiolock_0622
043fc     3D 93 02 F6 | 	mov	arg01, result1
04400     F8 05 B2 FD | 	call	#__system___lockmem
04404     38 00 00 FF 
04408     C4 65 06 F1 | 	add	objptr, ##29124
0440c     32 95 02 FB | 	rdlong	arg02, objptr
04410     38 00 00 FF 
04414     C4 65 86 F1 | 	sub	objptr, ##29124
04418     00 92 06 F6 | 	mov	arg01, #0
0441c     00 96 06 F6 | 	mov	arg03, #0
04420     CC 12 B2 FD | 	call	#__system___basic_print_string
04424     00 92 06 F6 | 	mov	arg01, #0
04428     0A 94 06 F6 | 	mov	arg02, #10
0442c     00 96 06 F6 | 	mov	arg03, #0
04430     64 12 B2 FD | 	call	#__system___basic_print_char
04434     00 92 06 F6 | 	mov	arg01, #0
04438     44 5B B2 FD | 	call	#__system___getiolock_0622
0443c     3D 01 68 FC | 	wrlong	#0, result1
04440                 | LR__0212
04440                 | LR__0213
04440     E7 F0 03 F6 | 	mov	ptra, fp
04444     F2 00 A0 FD | 	call	#popregs_
04448                 | _interpret_ret
04448     2D 00 64 FD | 	ret
0444c                 | 
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '
0444c                 | ' '                          END OF TOKENIZER MAIN CODE
0444c                 | ' '
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' ' Check if the part is an operator, return a token or 0 if not found
0444c                 | ' 
0444c                 | ' function isoperator(s as string) as ubyte
0444c                 | _isoperator
0444c     01 CA 05 F6 | 	mov	COUNT_, #1
04450     E8 00 A0 FD | 	call	#pushregs_
04454                 | ' 
04454                 | ' select case s
04454     49 A7 02 F6 | 	mov	local01, arg01
04458     93 01 00 FF 
0445c     72 94 06 F6 | 	mov	arg02, ##@LR__5579
04460     53 93 02 F6 | 	mov	arg01, local01
04464     BC 05 B2 FD | 	call	#__system___string_cmp
04468     00 7A 0E F2 | 	cmp	result1, #0 wz
0446c     FC 01 90 AD |  if_e	jmp	#LR__0220
04470     93 01 00 FF 
04474     74 94 06 F6 | 	mov	arg02, ##@LR__5580
04478     53 93 02 F6 | 	mov	arg01, local01
0447c     A4 05 B2 FD | 	call	#__system___string_cmp
04480     00 7A 0E F2 | 	cmp	result1, #0 wz
04484     EC 01 90 AD |  if_e	jmp	#LR__0221
04488     93 01 00 FF 
0448c     76 94 06 F6 | 	mov	arg02, ##@LR__5581
04490     53 93 02 F6 | 	mov	arg01, local01
04494     8C 05 B2 FD | 	call	#__system___string_cmp
04498     00 7A 0E F2 | 	cmp	result1, #0 wz
0449c     DC 01 90 AD |  if_e	jmp	#LR__0222
044a0     93 01 00 FF 
044a4     79 94 06 F6 | 	mov	arg02, ##@LR__5582
044a8     53 93 02 F6 | 	mov	arg01, local01
044ac     74 05 B2 FD | 	call	#__system___string_cmp
044b0     00 7A 0E F2 | 	cmp	result1, #0 wz
044b4     CC 01 90 AD |  if_e	jmp	#LR__0223
044b8     93 01 00 FF 
044bc     7D 94 06 F6 | 	mov	arg02, ##@LR__5583
044c0     53 93 02 F6 | 	mov	arg01, local01
044c4     5C 05 B2 FD | 	call	#__system___string_cmp
044c8     00 7A 0E F2 | 	cmp	result1, #0 wz
044cc     BC 01 90 AD |  if_e	jmp	#LR__0224
044d0     93 01 00 FF 
044d4     7F 94 06 F6 | 	mov	arg02, ##@LR__5584
044d8     53 93 02 F6 | 	mov	arg01, local01
044dc     44 05 B2 FD | 	call	#__system___string_cmp
044e0     00 7A 0E F2 | 	cmp	result1, #0 wz
044e4     AC 01 90 AD |  if_e	jmp	#LR__0225
044e8     93 01 00 FF 
044ec     81 94 06 F6 | 	mov	arg02, ##@LR__5585
044f0     53 93 02 F6 | 	mov	arg01, local01
044f4     2C 05 B2 FD | 	call	#__system___string_cmp
044f8     00 7A 0E F2 | 	cmp	result1, #0 wz
044fc     9C 01 90 AD |  if_e	jmp	#LR__0226
04500     93 01 00 FF 
04504     85 94 06 F6 | 	mov	arg02, ##@LR__5586
04508     53 93 02 F6 | 	mov	arg01, local01
0450c     14 05 B2 FD | 	call	#__system___string_cmp
04510     00 7A 0E F2 | 	cmp	result1, #0 wz
04514     8C 01 90 AD |  if_e	jmp	#LR__0227
04518     93 01 00 FF 
0451c     89 94 06 F6 | 	mov	arg02, ##@LR__5587
04520     53 93 02 F6 | 	mov	arg01, local01
04524     FC 04 B2 FD | 	call	#__system___string_cmp
04528     00 7A 0E F2 | 	cmp	result1, #0 wz
0452c     7C 01 90 AD |  if_e	jmp	#LR__0228
04530     93 01 00 FF 
04534     8D 94 06 F6 | 	mov	arg02, ##@LR__5588
04538     53 93 02 F6 | 	mov	arg01, local01
0453c     E4 04 B2 FD | 	call	#__system___string_cmp
04540     00 7A 0E F2 | 	cmp	result1, #0 wz
04544     6C 01 90 AD |  if_e	jmp	#LR__0229
04548     93 01 00 FF 
0454c     91 94 06 F6 | 	mov	arg02, ##@LR__5589
04550     53 93 02 F6 | 	mov	arg01, local01
04554     CC 04 B2 FD | 	call	#__system___string_cmp
04558     00 7A 0E F2 | 	cmp	result1, #0 wz
0455c     5C 01 90 AD |  if_e	jmp	#LR__0230
04560     93 01 00 FF 
04564     95 94 06 F6 | 	mov	arg02, ##@LR__5590
04568     53 93 02 F6 | 	mov	arg01, local01
0456c     B4 04 B2 FD | 	call	#__system___string_cmp
04570     00 7A 0E F2 | 	cmp	result1, #0 wz
04574     4C 01 90 AD |  if_e	jmp	#LR__0231
04578     93 01 00 FF 
0457c     97 94 06 F6 | 	mov	arg02, ##@LR__5591
04580     53 93 02 F6 | 	mov	arg01, local01
04584     9C 04 B2 FD | 	call	#__system___string_cmp
04588     00 7A 0E F2 | 	cmp	result1, #0 wz
0458c     3C 01 90 AD |  if_e	jmp	#LR__0232
04590     93 01 00 FF 
04594     9B 94 06 F6 | 	mov	arg02, ##@LR__5592
04598     53 93 02 F6 | 	mov	arg01, local01
0459c     84 04 B2 FD | 	call	#__system___string_cmp
045a0     00 7A 0E F2 | 	cmp	result1, #0 wz
045a4     2C 01 90 AD |  if_e	jmp	#LR__0233
045a8     93 01 00 FF 
045ac     9D 94 06 F6 | 	mov	arg02, ##@LR__5593
045b0     53 93 02 F6 | 	mov	arg01, local01
045b4     6C 04 B2 FD | 	call	#__system___string_cmp
045b8     00 7A 0E F2 | 	cmp	result1, #0 wz
045bc     1C 01 90 AD |  if_e	jmp	#LR__0234
045c0     93 01 00 FF 
045c4     9F 94 06 F6 | 	mov	arg02, ##@LR__5594
045c8     53 93 02 F6 | 	mov	arg01, local01
045cc     54 04 B2 FD | 	call	#__system___string_cmp
045d0     00 7A 0E F2 | 	cmp	result1, #0 wz
045d4     0C 01 90 AD |  if_e	jmp	#LR__0235
045d8     93 01 00 FF 
045dc     A2 94 06 F6 | 	mov	arg02, ##@LR__5595
045e0     53 93 02 F6 | 	mov	arg01, local01
045e4     3C 04 B2 FD | 	call	#__system___string_cmp
045e8     00 7A 0E F2 | 	cmp	result1, #0 wz
045ec     FC 00 90 AD |  if_e	jmp	#LR__0236
045f0     93 01 00 FF 
045f4     A5 94 06 F6 | 	mov	arg02, ##@LR__5596
045f8     53 93 02 F6 | 	mov	arg01, local01
045fc     24 04 B2 FD | 	call	#__system___string_cmp
04600     00 7A 0E F2 | 	cmp	result1, #0 wz
04604     EC 00 90 AD |  if_e	jmp	#LR__0237
04608     93 01 00 FF 
0460c     A7 94 06 F6 | 	mov	arg02, ##@LR__5597
04610     53 93 02 F6 | 	mov	arg01, local01
04614     0C 04 B2 FD | 	call	#__system___string_cmp
04618     00 7A 0E F2 | 	cmp	result1, #0 wz
0461c     DC 00 90 AD |  if_e	jmp	#LR__0238
04620     93 01 00 FF 
04624     A9 94 06 F6 | 	mov	arg02, ##@LR__5598
04628     53 93 02 F6 | 	mov	arg01, local01
0462c     F4 03 B2 FD | 	call	#__system___string_cmp
04630     00 7A 0E F2 | 	cmp	result1, #0 wz
04634     CC 00 90 AD |  if_e	jmp	#LR__0239
04638     93 01 00 FF 
0463c     AC 94 06 F6 | 	mov	arg02, ##@LR__5599
04640     53 93 02 F6 | 	mov	arg01, local01
04644     DC 03 B2 FD | 	call	#__system___string_cmp
04648     00 7A 0E F2 | 	cmp	result1, #0 wz
0464c     BC 00 90 AD |  if_e	jmp	#LR__0240
04650     93 01 00 FF 
04654     AF 94 06 F6 | 	mov	arg02, ##@LR__5600
04658     53 93 02 F6 | 	mov	arg01, local01
0465c     C4 03 B2 FD | 	call	#__system___string_cmp
04660     00 7A 0E F2 | 	cmp	result1, #0 wz
04664     AC 00 90 AD |  if_e	jmp	#LR__0241
04668     B0 00 90 FD | 	jmp	#LR__0242
0466c                 | LR__0220
0466c     01 7A 06 F6 | 	mov	result1, #1
04670     AC 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0221
04674     02 7A 06 F6 | 	mov	result1, #2
04678     A4 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0222
0467c     03 7A 06 F6 | 	mov	result1, #3
04680     9C 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0223
04684     04 7A 06 F6 | 	mov	result1, #4
04688     94 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0224
0468c     05 7A 06 F6 | 	mov	result1, #5
04690     8C 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0225
04694     06 7A 06 F6 | 	mov	result1, #6
04698     84 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0226
0469c     07 7A 06 F6 | 	mov	result1, #7
046a0     7C 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0227
046a4     08 7A 06 F6 | 	mov	result1, #8
046a8     74 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0228
046ac     09 7A 06 F6 | 	mov	result1, #9
046b0     6C 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0229
046b4     0A 7A 06 F6 | 	mov	result1, #10
046b8     64 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0230
046bc     0B 7A 06 F6 | 	mov	result1, #11
046c0     5C 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0231
046c4     0C 7A 06 F6 | 	mov	result1, #12
046c8     54 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0232
046cc     0D 7A 06 F6 | 	mov	result1, #13
046d0     4C 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0233
046d4     0E 7A 06 F6 | 	mov	result1, #14
046d8     44 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0234
046dc     1B 7A 06 F6 | 	mov	result1, #27
046e0     3C 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0235
046e4     27 7A 06 F6 | 	mov	result1, #39
046e8     34 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0236
046ec     26 7A 06 F6 | 	mov	result1, #38
046f0     2C 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0237
046f4     10 7A 06 F6 | 	mov	result1, #16
046f8     24 00 90 FD | 	jmp	#LR__0243
046fc                 | LR__0238
046fc     0F 7A 06 F6 | 	mov	result1, #15
04700     1C 00 90 FD | 	jmp	#LR__0243
04704                 | LR__0239
04704     2A 7A 06 F6 | 	mov	result1, #42
04708     14 00 90 FD | 	jmp	#LR__0243
0470c                 | LR__0240
0470c     28 7A 06 F6 | 	mov	result1, #40
04710     0C 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0241
04714     29 7A 06 F6 | 	mov	result1, #41
04718     04 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0242
0471c     00 7A 06 F6 | 	mov	result1, #0
04720                 | LR__0243
04720     E7 F0 03 F6 | 	mov	ptra, fp
04724     F2 00 A0 FD | 	call	#popregs_
04728                 | _isoperator_ret
04728     2D 00 64 FD | 	ret
0472c                 | 
0472c                 | ' 
0472c                 | ' ' Check if the part is a channel#, return a token or 0 if not found
0472c                 | ' 
0472c                 | ' function ischannel(s as string) as ulong
0472c                 | _ischannel
0472c     02 CA 05 F6 | 	mov	COUNT_, #2
04730     E8 00 A0 FD | 	call	#pushregs_
04734                 | ' if left$(s,1)<>"#" then return 0
04734     49 A7 02 F6 | 	mov	local01, arg01
04738     01 94 06 F6 | 	mov	arg02, #1
0473c     64 1B B2 FD | 	call	#__system__Left_S
04740     3D 93 02 F6 | 	mov	arg01, result1
04744     93 01 00 FF 
04748     B2 94 06 F6 | 	mov	arg02, ##@LR__5601
0474c     D4 02 B2 FD | 	call	#__system___string_cmp
04750     00 7A 0E F2 | 	cmp	result1, #0 wz
04754     00 7A 06 56 |  if_ne	mov	result1, #0
04758     AC 00 90 5D |  if_ne	jmp	#LR__0254
0475c                 | ' if len(s)<>2 then return 0
0475c     53 93 02 F6 | 	mov	arg01, local01
04760     49 A9 02 F6 | 	mov	local02, arg01
04764     D7 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04768                 | LR__0250
04768     54 7B CA FA | 	rdbyte	result1, local02 wz
0476c     01 A8 06 51 |  if_ne	add	local02, #1
04770     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04774                 | LR__0251
04774     49 A9 82 F1 | 	sub	local02, arg01
04778     54 7B 02 F6 | 	mov	result1, local02
0477c     02 7A 0E F2 | 	cmp	result1, #2 wz
04780     00 7A 06 56 |  if_ne	mov	result1, #0
04784     80 00 90 5D |  if_ne	jmp	#LR__0254
04788                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04788     53 93 02 F6 | 	mov	arg01, local01
0478c     01 94 06 F6 | 	mov	arg02, #1
04790     98 1B B2 FD | 	call	#__system__Right_S
04794     3D 93 02 F6 | 	mov	arg01, result1
04798     93 01 00 FF 
0479c     B4 94 06 F6 | 	mov	arg02, ##@LR__5602
047a0     80 02 B2 FD | 	call	#__system___string_cmp
047a4     00 7A 56 F2 | 	cmps	result1, #0 wc
047a8     24 00 90 CD |  if_b	jmp	#LR__0252
047ac     53 93 02 F6 | 	mov	arg01, local01
047b0     01 94 06 F6 | 	mov	arg02, #1
047b4     74 1B B2 FD | 	call	#__system__Right_S
047b8     3D 93 02 F6 | 	mov	arg01, result1
047bc     93 01 00 FF 
047c0     B6 94 06 F6 | 	mov	arg02, ##@LR__5603
047c4     5C 02 B2 FD | 	call	#__system___string_cmp
047c8     01 7A 56 F2 | 	cmps	result1, #1 wc
047cc     08 00 90 CD |  if_b	jmp	#LR__0253
047d0                 | LR__0252
047d0     00 7A 06 F6 | 	mov	result1, #0
047d4     30 00 90 FD | 	jmp	#LR__0254
047d8                 | LR__0253
047d8                 | ' return token_channel+val(right$(s,1))
047d8     53 93 02 F6 | 	mov	arg01, local01
047dc     01 94 06 F6 | 	mov	arg02, #1
047e0     48 1B B2 FD | 	call	#__system__Right_S
047e4     3D 93 02 F6 | 	mov	arg01, result1
047e8     FC 30 B2 FD | 	call	#__system____builtin_atof
047ec     3D 95 02 F6 | 	mov	arg02, result1
047f0     00 18 21 FF 
047f4     00 92 06 F6 | 	mov	arg01, ##1110441984
047f8     00 25 B2 FD | 	call	#__system___float_add
047fc     3D 93 02 F6 | 	mov	arg01, result1
04800     00 94 06 F6 | 	mov	arg02, #0
04804     8C 2D B2 FD | 	call	#__system___float_tointeger
04808                 | LR__0254
04808     E7 F0 03 F6 | 	mov	ptra, fp
0480c     F2 00 A0 FD | 	call	#popregs_
04810                 | _ischannel_ret
04810     2D 00 64 FD | 	ret
04814                 | 
04814                 | ' 
04814                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04814                 | ' ' todo: add spin2/pasm constants for pin control
04814                 | ' 
04814                 | ' function isconstant(s as string) as integer
04814                 | _isconstant
04814     01 CA 05 F6 | 	mov	COUNT_, #1
04818     E8 00 A0 FD | 	call	#pushregs_
0481c                 | ' 
0481c                 | ' select case s
0481c     49 A7 02 F6 | 	mov	local01, arg01
04820     93 01 00 FF 
04824     B8 94 06 F6 | 	mov	arg02, ##@LR__5604
04828     53 93 02 F6 | 	mov	arg01, local01
0482c     F4 01 B2 FD | 	call	#__system___string_cmp
04830     00 7A 0E F2 | 	cmp	result1, #0 wz
04834     34 00 90 AD |  if_e	jmp	#LR__0260
04838     93 01 00 FF 
0483c     BE 94 06 F6 | 	mov	arg02, ##@LR__5605
04840     53 93 02 F6 | 	mov	arg01, local01
04844     DC 01 B2 FD | 	call	#__system___string_cmp
04848     00 7A 0E F2 | 	cmp	result1, #0 wz
0484c     24 00 90 AD |  if_e	jmp	#LR__0261
04850     93 01 00 FF 
04854     C5 94 06 F6 | 	mov	arg02, ##@LR__5606
04858     53 93 02 F6 | 	mov	arg01, local01
0485c     C4 01 B2 FD | 	call	#__system___string_cmp
04860     00 7A 0E F2 | 	cmp	result1, #0 wz
04864     14 00 90 AD |  if_e	jmp	#LR__0262
04868     18 00 90 FD | 	jmp	#LR__0263
0486c                 | LR__0260
0486c     01 7A 06 F6 | 	mov	result1, #1
04870     14 00 90 FD | 	jmp	#LR__0264
04874                 | LR__0261
04874     02 7A 06 F6 | 	mov	result1, #2
04878     0C 00 90 FD | 	jmp	#LR__0264
0487c                 | LR__0262
0487c     04 7A 06 F6 | 	mov	result1, #4
04880     04 00 90 FD | 	jmp	#LR__0264
04884                 | LR__0263
04884     00 7A 06 F6 | 	mov	result1, #0
04888                 | LR__0264
04888     E7 F0 03 F6 | 	mov	ptra, fp
0488c     F2 00 A0 FD | 	call	#popregs_
04890                 | _isconstant_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isnotename(s as string) as ulong
04894                 | _isnotename
04894     07 CA 05 F6 | 	mov	COUNT_, #7
04898     E8 00 A0 FD | 	call	#pushregs_
0489c                 | ' if left$(s,1)<>"#" then return 0
0489c     49 A7 02 F6 | 	mov	local01, arg01
048a0     01 94 06 F6 | 	mov	arg02, #1
048a4     FC 19 B2 FD | 	call	#__system__Left_S
048a8     3D 93 02 F6 | 	mov	arg01, result1
048ac     93 01 00 FF 
048b0     CD 94 06 F6 | 	mov	arg02, ##@LR__5607
048b4     6C 01 B2 FD | 	call	#__system___string_cmp
048b8     00 7A 0E F2 | 	cmp	result1, #0 wz
048bc     00 7A 06 56 |  if_ne	mov	result1, #0
048c0     30 03 90 5D |  if_ne	jmp	#LR__0293
048c4                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
048c4     53 93 02 F6 | 	mov	arg01, local01
048c8     03 94 06 F6 | 	mov	arg02, #3
048cc     01 96 06 F6 | 	mov	arg03, #1
048d0     E8 1A B2 FD | 	call	#__system__Mid_S
048d4     3D 93 02 F6 | 	mov	arg01, result1
048d8     93 01 00 FF 
048dc     CF 94 06 F6 | 	mov	arg02, ##@LR__5608
048e0     40 01 B2 FD | 	call	#__system___string_cmp
048e4     00 7A 0E F2 | 	cmp	result1, #0 wz
048e8     18 00 90 5D |  if_ne	jmp	#LR__0270
048ec     53 93 02 F6 | 	mov	arg01, local01
048f0     02 94 06 F6 | 	mov	arg02, #2
048f4     02 96 06 F6 | 	mov	arg03, #2
048f8     C0 1A B2 FD | 	call	#__system__Mid_S
048fc     3D A9 02 F6 | 	mov	local02, result1
04900     14 00 90 FD | 	jmp	#LR__0271
04904                 | LR__0270
04904     53 93 02 F6 | 	mov	arg01, local01
04908     02 94 06 F6 | 	mov	arg02, #2
0490c     01 96 06 F6 | 	mov	arg03, #1
04910     A8 1A B2 FD | 	call	#__system__Mid_S
04914     3D A9 02 F6 | 	mov	local02, result1
04918                 | LR__0271
04918                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04918     53 93 02 F6 | 	mov	arg01, local01
0491c     49 AB 02 F6 | 	mov	local03, arg01
04920     D7 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04924                 | LR__0272
04924     55 7B CA FA | 	rdbyte	result1, local03 wz
04928     01 AA 06 51 |  if_ne	add	local03, #1
0492c     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04930                 | LR__0273
04930     49 AB 82 F1 | 	sub	local03, arg01
04934     55 95 02 F6 | 	mov	arg02, local03
04938     01 94 86 F1 | 	sub	arg02, #1
0493c     53 93 02 F6 | 	mov	arg01, local01
04940     01 96 06 F6 | 	mov	arg03, #1
04944     74 1A B2 FD | 	call	#__system__Mid_S
04948     3D 93 02 F6 | 	mov	arg01, result1
0494c     93 01 00 FF 
04950     D1 94 06 F6 | 	mov	arg02, ##@LR__5609
04954     CC 00 B2 FD | 	call	#__system___string_cmp
04958     00 7A 0E F2 | 	cmp	result1, #0 wz
0495c     28 00 90 AD |  if_e	jmp	#LR__0274
04960     53 93 02 F6 | 	mov	arg01, local01
04964     01 94 06 F6 | 	mov	arg02, #1
04968     C0 19 B2 FD | 	call	#__system__Right_S
0496c     3D 93 02 F6 | 	mov	arg01, result1
04970     74 2F B2 FD | 	call	#__system____builtin_atof
04974     3D 93 02 F6 | 	mov	arg01, result1
04978     00 94 06 F6 | 	mov	arg02, #0
0497c     14 2C B2 FD | 	call	#__system___float_tointeger
04980     3D AD 02 F6 | 	mov	local04, result1
04984     34 00 90 FD | 	jmp	#LR__0275
04988                 | LR__0274
04988     53 93 02 F6 | 	mov	arg01, local01
0498c     01 94 06 F6 | 	mov	arg02, #1
04990     98 19 B2 FD | 	call	#__system__Right_S
04994     3D 93 02 F6 | 	mov	arg01, result1
04998     4C 2F B2 FD | 	call	#__system____builtin_atof
0499c     3D 95 02 F6 | 	mov	arg02, result1
049a0     00 C0 5F FF 
049a4     00 92 06 F6 | 	mov	arg01, ##-1082130432
049a8     20 27 B2 FD | 	call	#__system___float_mul
049ac     3D 93 02 F6 | 	mov	arg01, result1
049b0     00 94 06 F6 | 	mov	arg02, #0
049b4     DC 2B B2 FD | 	call	#__system___float_tointeger
049b8     3D AD 02 F6 | 	mov	local04, result1
049bc                 | LR__0275
049bc                 | ' 
049bc                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049bc     00 AC 0E F2 | 	cmp	local04, #0 wz
049c0     24 00 90 5D |  if_ne	jmp	#LR__0276
049c4     53 93 02 F6 | 	mov	arg01, local01
049c8     01 94 06 F6 | 	mov	arg02, #1
049cc     5C 19 B2 FD | 	call	#__system__Right_S
049d0     3D 93 02 F6 | 	mov	arg01, result1
049d4     93 01 00 FF 
049d8     D3 94 06 F6 | 	mov	arg02, ##@LR__5610
049dc     44 00 B2 FD | 	call	#__system___string_cmp
049e0     00 7A 0E F2 | 	cmp	result1, #0 wz
049e4     04 AC 06 56 |  if_ne	mov	local04, #4
049e8                 | LR__0276
049e8                 | ' 
049e8                 | ' select case s1
049e8     54 AF 02 F6 | 	mov	local05, local02
049ec     93 01 00 FF 
049f0     D5 94 06 F6 | 	mov	arg02, ##@LR__5611
049f4     57 93 02 F6 | 	mov	arg01, local05
049f8     28 00 B2 FD | 	call	#__system___string_cmp
049fc     00 7A 0E F2 | 	cmp	result1, #0 wz
04a00     24 01 90 AD |  if_e	jmp	#LR__0277
04a04     93 01 00 FF 
04a08     D7 94 06 F6 | 	mov	arg02, ##@LR__5612
04a0c     57 93 02 F6 | 	mov	arg01, local05
04a10     10 00 B2 FD | 	call	#__system___string_cmp
04a14     00 7A 0E F2 | 	cmp	result1, #0 wz
04a18     18 01 90 AD |  if_e	jmp	#LR__0278
04a1c     93 01 00 FF 
04a20     DA 94 06 F6 | 	mov	arg02, ##@LR__5613
04a24     57 93 02 F6 | 	mov	arg01, local05
04a28     F8 FF B1 FD | 	call	#__system___string_cmp
04a2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a30     0C 01 90 AD |  if_e	jmp	#LR__0279
04a34     93 01 00 FF 
04a38     DC 94 06 F6 | 	mov	arg02, ##@LR__5614
04a3c     57 93 02 F6 | 	mov	arg01, local05
04a40     E0 FF B1 FD | 	call	#__system___string_cmp
04a44     00 7A 0E F2 | 	cmp	result1, #0 wz
04a48     00 01 90 AD |  if_e	jmp	#LR__0280
04a4c     93 01 00 FF 
04a50     DF 94 06 F6 | 	mov	arg02, ##@LR__5615
04a54     57 93 02 F6 | 	mov	arg01, local05
04a58     C8 FF B1 FD | 	call	#__system___string_cmp
04a5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a60     F4 00 90 AD |  if_e	jmp	#LR__0281
04a64     93 01 00 FF 
04a68     E1 94 06 F6 | 	mov	arg02, ##@LR__5616
04a6c     57 93 02 F6 | 	mov	arg01, local05
04a70     B0 FF B1 FD | 	call	#__system___string_cmp
04a74     00 7A 0E F2 | 	cmp	result1, #0 wz
04a78     E8 00 90 AD |  if_e	jmp	#LR__0282
04a7c     93 01 00 FF 
04a80     E3 94 06 F6 | 	mov	arg02, ##@LR__5617
04a84     57 93 02 F6 | 	mov	arg01, local05
04a88     98 FF B1 FD | 	call	#__system___string_cmp
04a8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a90     DC 00 90 AD |  if_e	jmp	#LR__0283
04a94     93 01 00 FF 
04a98     E6 94 06 F6 | 	mov	arg02, ##@LR__5618
04a9c     57 93 02 F6 | 	mov	arg01, local05
04aa0     80 FF B1 FD | 	call	#__system___string_cmp
04aa4     00 7A 0E F2 | 	cmp	result1, #0 wz
04aa8     D0 00 90 AD |  if_e	jmp	#LR__0284
04aac     93 01 00 FF 
04ab0     E8 94 06 F6 | 	mov	arg02, ##@LR__5619
04ab4     57 93 02 F6 | 	mov	arg01, local05
04ab8     68 FF B1 FD | 	call	#__system___string_cmp
04abc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ac0     C4 00 90 AD |  if_e	jmp	#LR__0285
04ac4     93 01 00 FF 
04ac8     EB 94 06 F6 | 	mov	arg02, ##@LR__5620
04acc     57 93 02 F6 | 	mov	arg01, local05
04ad0     50 FF B1 FD | 	call	#__system___string_cmp
04ad4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ad8     B8 00 90 AD |  if_e	jmp	#LR__0286
04adc     93 01 00 FF 
04ae0     ED 94 06 F6 | 	mov	arg02, ##@LR__5621
04ae4     57 93 02 F6 | 	mov	arg01, local05
04ae8     38 FF B1 FD | 	call	#__system___string_cmp
04aec     00 7A 0E F2 | 	cmp	result1, #0 wz
04af0     AC 00 90 AD |  if_e	jmp	#LR__0287
04af4     93 01 00 FF 
04af8     F0 94 06 F6 | 	mov	arg02, ##@LR__5622
04afc     57 93 02 F6 | 	mov	arg01, local05
04b00     20 FF B1 FD | 	call	#__system___string_cmp
04b04     00 7A 0E F2 | 	cmp	result1, #0 wz
04b08     A0 00 90 AD |  if_e	jmp	#LR__0288
04b0c     93 01 00 FF 
04b10     F2 94 06 F6 | 	mov	arg02, ##@LR__5623
04b14     57 93 02 F6 | 	mov	arg01, local05
04b18     08 FF B1 FD | 	call	#__system___string_cmp
04b1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b20     94 00 90 AD |  if_e	jmp	#LR__0289
04b24     9C 00 90 FD | 	jmp	#LR__0290
04b28                 | LR__0277
04b28     01 00 00 FF 
04b2c     00 B1 06 F6 | 	mov	local06, ##768
04b30     98 00 90 FD | 	jmp	#LR__0291
04b34                 | LR__0278
04b34     01 00 00 FF 
04b38     01 B1 06 F6 | 	mov	local06, ##769
04b3c     8C 00 90 FD | 	jmp	#LR__0291
04b40                 | LR__0279
04b40     01 00 00 FF 
04b44     02 B1 06 F6 | 	mov	local06, ##770
04b48     80 00 90 FD | 	jmp	#LR__0291
04b4c                 | LR__0280
04b4c     01 00 00 FF 
04b50     03 B1 06 F6 | 	mov	local06, ##771
04b54     74 00 90 FD | 	jmp	#LR__0291
04b58                 | LR__0281
04b58     01 00 00 FF 
04b5c     04 B1 06 F6 | 	mov	local06, ##772
04b60     68 00 90 FD | 	jmp	#LR__0291
04b64                 | LR__0282
04b64     01 00 00 FF 
04b68     05 B1 06 F6 | 	mov	local06, ##773
04b6c     5C 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0283
04b70     01 00 00 FF 
04b74     06 B1 06 F6 | 	mov	local06, ##774
04b78     50 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0284
04b7c     01 00 00 FF 
04b80     07 B1 06 F6 | 	mov	local06, ##775
04b84     44 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0285
04b88     01 00 00 FF 
04b8c     08 B1 06 F6 | 	mov	local06, ##776
04b90     38 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0286
04b94     01 00 00 FF 
04b98     09 B1 06 F6 | 	mov	local06, ##777
04b9c     2C 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0287
04ba0     01 00 00 FF 
04ba4     0A B1 06 F6 | 	mov	local06, ##778
04ba8     20 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0288
04bac     01 00 00 FF 
04bb0     0B B1 06 F6 | 	mov	local06, ##779
04bb4     14 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0289
04bb8     01 00 00 FF 
04bbc     0B B1 06 F6 | 	mov	local06, ##779
04bc0     08 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0290
04bc4     00 7A 06 F6 | 	mov	result1, #0
04bc8     28 00 90 FD | 	jmp	#LR__0293
04bcc                 | LR__0291
04bcc                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04bcc     FF FF 7F FF 
04bd0     FF AD 56 F2 | 	cmps	local04, ##-1 wc
04bd4     18 00 90 CD |  if_b	jmp	#LR__0292
04bd8     0A AC 56 F2 | 	cmps	local04, #10 wc
04bdc     56 B3 02 C6 |  if_b	mov	local07, local04
04be0     01 B2 66 C0 |  if_b	shl	local07, #1
04be4     56 B3 02 C1 |  if_b	add	local07, local04
04be8     02 B2 66 C0 |  if_b	shl	local07, #2
04bec     59 B1 02 C1 |  if_b	add	local06, local07
04bf0                 | LR__0292
04bf0                 | ' return token
04bf0     58 7B 02 F6 | 	mov	result1, local06
04bf4                 | LR__0293
04bf4     E7 F0 03 F6 | 	mov	ptra, fp
04bf8     F2 00 A0 FD | 	call	#popregs_
04bfc                 | _isnotename_ret
04bfc     2D 00 64 FD | 	ret
04c00                 | 
04c00                 | ' 
04c00                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c00                 | ' 
04c00                 | ' function isseparator(s as string) as ubyte
04c00                 | _isseparator
04c00     01 CA 05 F6 | 	mov	COUNT_, #1
04c04     E8 00 A0 FD | 	call	#pushregs_
04c08                 | ' 
04c08                 | ' select case s
04c08     49 A7 02 F6 | 	mov	local01, arg01
04c0c     93 01 00 FF 
04c10     F4 94 06 F6 | 	mov	arg02, ##@LR__5624
04c14     53 93 02 F6 | 	mov	arg01, local01
04c18     08 FE B1 FD | 	call	#__system___string_cmp
04c1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c20     54 01 90 AD |  if_e	jmp	#LR__0300
04c24     93 01 00 FF 
04c28     F6 94 06 F6 | 	mov	arg02, ##@LR__5625
04c2c     53 93 02 F6 | 	mov	arg01, local01
04c30     F0 FD B1 FD | 	call	#__system___string_cmp
04c34     00 7A 0E F2 | 	cmp	result1, #0 wz
04c38     44 01 90 AD |  if_e	jmp	#LR__0301
04c3c     93 01 00 FF 
04c40     F8 94 06 F6 | 	mov	arg02, ##@LR__5626
04c44     53 93 02 F6 | 	mov	arg01, local01
04c48     D8 FD B1 FD | 	call	#__system___string_cmp
04c4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c50     34 01 90 AD |  if_e	jmp	#LR__0302
04c54     93 01 00 FF 
04c58     FA 94 06 F6 | 	mov	arg02, ##@LR__5627
04c5c     53 93 02 F6 | 	mov	arg01, local01
04c60     C0 FD B1 FD | 	call	#__system___string_cmp
04c64     00 7A 0E F2 | 	cmp	result1, #0 wz
04c68     24 01 90 AD |  if_e	jmp	#LR__0303
04c6c     93 01 00 FF 
04c70     FC 94 06 F6 | 	mov	arg02, ##@LR__5628
04c74     53 93 02 F6 | 	mov	arg01, local01
04c78     A8 FD B1 FD | 	call	#__system___string_cmp
04c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c80     14 01 90 AD |  if_e	jmp	#LR__0304
04c84     93 01 00 FF 
04c88     FE 94 06 F6 | 	mov	arg02, ##@LR__5629
04c8c     53 93 02 F6 | 	mov	arg01, local01
04c90     90 FD B1 FD | 	call	#__system___string_cmp
04c94     00 7A 0E F2 | 	cmp	result1, #0 wz
04c98     04 01 90 AD |  if_e	jmp	#LR__0305
04c9c     93 01 00 FF 
04ca0     00 95 06 F6 | 	mov	arg02, ##@LR__5630
04ca4     53 93 02 F6 | 	mov	arg01, local01
04ca8     78 FD B1 FD | 	call	#__system___string_cmp
04cac     00 7A 0E F2 | 	cmp	result1, #0 wz
04cb0     F4 00 90 AD |  if_e	jmp	#LR__0306
04cb4     93 01 00 FF 
04cb8     02 95 06 F6 | 	mov	arg02, ##@LR__5631
04cbc     53 93 02 F6 | 	mov	arg01, local01
04cc0     60 FD B1 FD | 	call	#__system___string_cmp
04cc4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cc8     E4 00 90 AD |  if_e	jmp	#LR__0307
04ccc     93 01 00 FF 
04cd0     04 95 06 F6 | 	mov	arg02, ##@LR__5632
04cd4     53 93 02 F6 | 	mov	arg01, local01
04cd8     48 FD B1 FD | 	call	#__system___string_cmp
04cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ce0     D4 00 90 AD |  if_e	jmp	#LR__0308
04ce4     93 01 00 FF 
04ce8     06 95 06 F6 | 	mov	arg02, ##@LR__5633
04cec     53 93 02 F6 | 	mov	arg01, local01
04cf0     30 FD B1 FD | 	call	#__system___string_cmp
04cf4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cf8     C4 00 90 AD |  if_e	jmp	#LR__0309
04cfc     93 01 00 FF 
04d00     08 95 06 F6 | 	mov	arg02, ##@LR__5634
04d04     53 93 02 F6 | 	mov	arg01, local01
04d08     18 FD B1 FD | 	call	#__system___string_cmp
04d0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d10     B4 00 90 AD |  if_e	jmp	#LR__0310
04d14     93 01 00 FF 
04d18     0A 95 06 F6 | 	mov	arg02, ##@LR__5635
04d1c     53 93 02 F6 | 	mov	arg01, local01
04d20     00 FD B1 FD | 	call	#__system___string_cmp
04d24     00 7A 0E F2 | 	cmp	result1, #0 wz
04d28     A4 00 90 AD |  if_e	jmp	#LR__0311
04d2c     93 01 00 FF 
04d30     0C 95 06 F6 | 	mov	arg02, ##@LR__5636
04d34     53 93 02 F6 | 	mov	arg01, local01
04d38     E8 FC B1 FD | 	call	#__system___string_cmp
04d3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d40     94 00 90 AD |  if_e	jmp	#LR__0312
04d44     93 01 00 FF 
04d48     0E 95 06 F6 | 	mov	arg02, ##@LR__5637
04d4c     53 93 02 F6 | 	mov	arg01, local01
04d50     D0 FC B1 FD | 	call	#__system___string_cmp
04d54     00 7A 0E F2 | 	cmp	result1, #0 wz
04d58     84 00 90 AD |  if_e	jmp	#LR__0313
04d5c     93 01 00 FF 
04d60     10 95 06 F6 | 	mov	arg02, ##@LR__5638
04d64     53 93 02 F6 | 	mov	arg01, local01
04d68     B8 FC B1 FD | 	call	#__system___string_cmp
04d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d70     74 00 90 AD |  if_e	jmp	#LR__0314
04d74     78 00 90 FD | 	jmp	#LR__0315
04d78                 | LR__0300
04d78     01 7A 06 F6 | 	mov	result1, #1
04d7c     74 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0301
04d80     02 7A 06 F6 | 	mov	result1, #2
04d84     6C 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0302
04d88     1B 7A 06 F6 | 	mov	result1, #27
04d8c     64 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0303
04d90     11 7A 06 F6 | 	mov	result1, #17
04d94     5C 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0304
04d98     05 7A 06 F6 | 	mov	result1, #5
04d9c     54 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0305
04da0     06 7A 06 F6 | 	mov	result1, #6
04da4     4C 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0306
04da8     12 7A 06 F6 | 	mov	result1, #18
04dac     44 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0307
04db0     13 7A 06 F6 | 	mov	result1, #19
04db4     3C 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0308
04db8     0C 7A 06 F6 | 	mov	result1, #12
04dbc     34 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0309
04dc0     14 7A 06 F6 | 	mov	result1, #20
04dc4     2C 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0310
04dc8     15 7A 06 F6 | 	mov	result1, #21
04dcc     24 00 90 FD | 	jmp	#LR__0316
04dd0                 | LR__0311
04dd0     16 7A 06 F6 | 	mov	result1, #22
04dd4     1C 00 90 FD | 	jmp	#LR__0316
04dd8                 | LR__0312
04dd8     FF 7B 06 F6 | 	mov	result1, #511
04ddc     14 00 90 FD | 	jmp	#LR__0316
04de0                 | LR__0313
04de0     0F 7A 06 F6 | 	mov	result1, #15
04de4     0C 00 90 FD | 	jmp	#LR__0316
04de8                 | LR__0314
04de8     10 7A 06 F6 | 	mov	result1, #16
04dec     04 00 90 FD | 	jmp	#LR__0316
04df0                 | LR__0315
04df0     00 7A 06 F6 | 	mov	result1, #0
04df4                 | LR__0316
04df4     E7 F0 03 F6 | 	mov	ptra, fp
04df8     F2 00 A0 FD | 	call	#popregs_
04dfc                 | _isseparator_ret
04dfc     2D 00 64 FD | 	ret
04e00                 | 
04e00                 | ' 
04e00                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e00                 | ' 
04e00                 | ' function iscommand(s as string) as ubyte
04e00                 | _iscommand
04e00     01 CA 05 F6 | 	mov	COUNT_, #1
04e04     E8 00 A0 FD | 	call	#pushregs_
04e08                 | ' 
04e08                 | ' select case s
04e08     49 A7 02 F6 | 	mov	local01, arg01
04e0c     93 01 00 FF 
04e10     14 95 06 F6 | 	mov	arg02, ##@LR__5640
04e14     53 93 02 F6 | 	mov	arg01, local01
04e18     08 FC B1 FD | 	call	#__system___string_cmp
04e1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e20     24 0D 90 AD |  if_e	jmp	#LR__0320
04e24     93 01 00 FF 
04e28     19 95 06 F6 | 	mov	arg02, ##@LR__5641
04e2c     53 93 02 F6 | 	mov	arg01, local01
04e30     F0 FB B1 FD | 	call	#__system___string_cmp
04e34     00 7A 0E F2 | 	cmp	result1, #0 wz
04e38     14 0D 90 AD |  if_e	jmp	#LR__0321
04e3c     93 01 00 FF 
04e40     1C 95 06 F6 | 	mov	arg02, ##@LR__5642
04e44     53 93 02 F6 | 	mov	arg01, local01
04e48     D8 FB B1 FD | 	call	#__system___string_cmp
04e4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e50     04 0D 90 AD |  if_e	jmp	#LR__0322
04e54     93 01 00 FF 
04e58     21 95 06 F6 | 	mov	arg02, ##@LR__5643
04e5c     53 93 02 F6 | 	mov	arg01, local01
04e60     C0 FB B1 FD | 	call	#__system___string_cmp
04e64     00 7A 0E F2 | 	cmp	result1, #0 wz
04e68     F4 0C 90 AD |  if_e	jmp	#LR__0323
04e6c     93 01 00 FF 
04e70     25 95 06 F6 | 	mov	arg02, ##@LR__5644
04e74     53 93 02 F6 | 	mov	arg01, local01
04e78     A8 FB B1 FD | 	call	#__system___string_cmp
04e7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e80     E4 0C 90 AD |  if_e	jmp	#LR__0324
04e84     93 01 00 FF 
04e88     2A 95 06 F6 | 	mov	arg02, ##@LR__5645
04e8c     53 93 02 F6 | 	mov	arg01, local01
04e90     90 FB B1 FD | 	call	#__system___string_cmp
04e94     00 7A 0E F2 | 	cmp	result1, #0 wz
04e98     D4 0C 90 AD |  if_e	jmp	#LR__0325
04e9c     93 01 00 FF 
04ea0     2E 95 06 F6 | 	mov	arg02, ##@LR__5646
04ea4     53 93 02 F6 | 	mov	arg01, local01
04ea8     78 FB B1 FD | 	call	#__system___string_cmp
04eac     00 7A 0E F2 | 	cmp	result1, #0 wz
04eb0     C4 0C 90 AD |  if_e	jmp	#LR__0326
04eb4     93 01 00 FF 
04eb8     31 95 06 F6 | 	mov	arg02, ##@LR__5647
04ebc     53 93 02 F6 | 	mov	arg01, local01
04ec0     60 FB B1 FD | 	call	#__system___string_cmp
04ec4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ec8     B4 0C 90 AD |  if_e	jmp	#LR__0327
04ecc     93 01 00 FF 
04ed0     3C 95 06 F6 | 	mov	arg02, ##@LR__5648
04ed4     53 93 02 F6 | 	mov	arg01, local01
04ed8     48 FB B1 FD | 	call	#__system___string_cmp
04edc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ee0     A4 0C 90 AD |  if_e	jmp	#LR__0328
04ee4     93 01 00 FF 
04ee8     40 95 06 F6 | 	mov	arg02, ##@LR__5649
04eec     53 93 02 F6 | 	mov	arg01, local01
04ef0     30 FB B1 FD | 	call	#__system___string_cmp
04ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ef8     94 0C 90 AD |  if_e	jmp	#LR__0329
04efc     93 01 00 FF 
04f00     4A 95 06 F6 | 	mov	arg02, ##@LR__5650
04f04     53 93 02 F6 | 	mov	arg01, local01
04f08     18 FB B1 FD | 	call	#__system___string_cmp
04f0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f10     84 0C 90 AD |  if_e	jmp	#LR__0330
04f14     93 01 00 FF 
04f18     4E 95 06 F6 | 	mov	arg02, ##@LR__5651
04f1c     53 93 02 F6 | 	mov	arg01, local01
04f20     00 FB B1 FD | 	call	#__system___string_cmp
04f24     00 7A 0E F2 | 	cmp	result1, #0 wz
04f28     74 0C 90 AD |  if_e	jmp	#LR__0331
04f2c     93 01 00 FF 
04f30     58 95 06 F6 | 	mov	arg02, ##@LR__5652
04f34     53 93 02 F6 | 	mov	arg01, local01
04f38     E8 FA B1 FD | 	call	#__system___string_cmp
04f3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f40     64 0C 90 AD |  if_e	jmp	#LR__0332
04f44     93 01 00 FF 
04f48     5C 95 06 F6 | 	mov	arg02, ##@LR__5653
04f4c     53 93 02 F6 | 	mov	arg01, local01
04f50     D0 FA B1 FD | 	call	#__system___string_cmp
04f54     00 7A 0E F2 | 	cmp	result1, #0 wz
04f58     54 0C 90 AD |  if_e	jmp	#LR__0333
04f5c     93 01 00 FF 
04f60     67 95 06 F6 | 	mov	arg02, ##@LR__5654
04f64     53 93 02 F6 | 	mov	arg01, local01
04f68     B8 FA B1 FD | 	call	#__system___string_cmp
04f6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f70     44 0C 90 AD |  if_e	jmp	#LR__0334
04f74     93 01 00 FF 
04f78     6B 95 06 F6 | 	mov	arg02, ##@LR__5655
04f7c     53 93 02 F6 | 	mov	arg01, local01
04f80     A0 FA B1 FD | 	call	#__system___string_cmp
04f84     00 7A 0E F2 | 	cmp	result1, #0 wz
04f88     34 0C 90 AD |  if_e	jmp	#LR__0335
04f8c     93 01 00 FF 
04f90     72 95 06 F6 | 	mov	arg02, ##@LR__5656
04f94     53 93 02 F6 | 	mov	arg01, local01
04f98     88 FA B1 FD | 	call	#__system___string_cmp
04f9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04fa0     24 0C 90 AD |  if_e	jmp	#LR__0336
04fa4     93 01 00 FF 
04fa8     76 95 06 F6 | 	mov	arg02, ##@LR__5657
04fac     53 93 02 F6 | 	mov	arg01, local01
04fb0     70 FA B1 FD | 	call	#__system___string_cmp
04fb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fb8     14 0C 90 AD |  if_e	jmp	#LR__0337
04fbc     93 01 00 FF 
04fc0     7C 95 06 F6 | 	mov	arg02, ##@LR__5658
04fc4     53 93 02 F6 | 	mov	arg01, local01
04fc8     58 FA B1 FD | 	call	#__system___string_cmp
04fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
04fd0     04 0C 90 AD |  if_e	jmp	#LR__0338
04fd4     93 01 00 FF 
04fd8     82 95 06 F6 | 	mov	arg02, ##@LR__5659
04fdc     53 93 02 F6 | 	mov	arg01, local01
04fe0     40 FA B1 FD | 	call	#__system___string_cmp
04fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fe8     F4 0B 90 AD |  if_e	jmp	#LR__0339
04fec     93 01 00 FF 
04ff0     86 95 06 F6 | 	mov	arg02, ##@LR__5660
04ff4     53 93 02 F6 | 	mov	arg01, local01
04ff8     28 FA B1 FD | 	call	#__system___string_cmp
04ffc     00 7A 0E F2 | 	cmp	result1, #0 wz
05000     E4 0B 90 AD |  if_e	jmp	#LR__0340
05004     93 01 00 FF 
05008     8E 95 06 F6 | 	mov	arg02, ##@LR__5661
0500c     53 93 02 F6 | 	mov	arg01, local01
05010     10 FA B1 FD | 	call	#__system___string_cmp
05014     00 7A 0E F2 | 	cmp	result1, #0 wz
05018     D4 0B 90 AD |  if_e	jmp	#LR__0341
0501c     93 01 00 FF 
05020     94 95 06 F6 | 	mov	arg02, ##@LR__5662
05024     53 93 02 F6 | 	mov	arg01, local01
05028     F8 F9 B1 FD | 	call	#__system___string_cmp
0502c     00 7A 0E F2 | 	cmp	result1, #0 wz
05030     C4 0B 90 AD |  if_e	jmp	#LR__0342
05034     93 01 00 FF 
05038     97 95 06 F6 | 	mov	arg02, ##@LR__5663
0503c     53 93 02 F6 | 	mov	arg01, local01
05040     E0 F9 B1 FD | 	call	#__system___string_cmp
05044     00 7A 0E F2 | 	cmp	result1, #0 wz
05048     B4 0B 90 AD |  if_e	jmp	#LR__0343
0504c     93 01 00 FF 
05050     9C 95 06 F6 | 	mov	arg02, ##@LR__5664
05054     53 93 02 F6 | 	mov	arg01, local01
05058     C8 F9 B1 FD | 	call	#__system___string_cmp
0505c     00 7A 0E F2 | 	cmp	result1, #0 wz
05060     A4 0B 90 AD |  if_e	jmp	#LR__0344
05064     93 01 00 FF 
05068     A3 95 06 F6 | 	mov	arg02, ##@LR__5665
0506c     53 93 02 F6 | 	mov	arg01, local01
05070     B0 F9 B1 FD | 	call	#__system___string_cmp
05074     00 7A 0E F2 | 	cmp	result1, #0 wz
05078     94 0B 90 AD |  if_e	jmp	#LR__0345
0507c     93 01 00 FF 
05080     A8 95 06 F6 | 	mov	arg02, ##@LR__5666
05084     53 93 02 F6 | 	mov	arg01, local01
05088     98 F9 B1 FD | 	call	#__system___string_cmp
0508c     00 7A 0E F2 | 	cmp	result1, #0 wz
05090     84 0B 90 AD |  if_e	jmp	#LR__0346
05094     93 01 00 FF 
05098     B0 95 06 F6 | 	mov	arg02, ##@LR__5667
0509c     53 93 02 F6 | 	mov	arg01, local01
050a0     80 F9 B1 FD | 	call	#__system___string_cmp
050a4     00 7A 0E F2 | 	cmp	result1, #0 wz
050a8     74 0B 90 AD |  if_e	jmp	#LR__0347
050ac     93 01 00 FF 
050b0     B7 95 06 F6 | 	mov	arg02, ##@LR__5668
050b4     53 93 02 F6 | 	mov	arg01, local01
050b8     68 F9 B1 FD | 	call	#__system___string_cmp
050bc     00 7A 0E F2 | 	cmp	result1, #0 wz
050c0     64 0B 90 AD |  if_e	jmp	#LR__0348
050c4     93 01 00 FF 
050c8     BE 95 06 F6 | 	mov	arg02, ##@LR__5669
050cc     53 93 02 F6 | 	mov	arg01, local01
050d0     50 F9 B1 FD | 	call	#__system___string_cmp
050d4     00 7A 0E F2 | 	cmp	result1, #0 wz
050d8     54 0B 90 AD |  if_e	jmp	#LR__0349
050dc     93 01 00 FF 
050e0     C8 95 06 F6 | 	mov	arg02, ##@LR__5670
050e4     53 93 02 F6 | 	mov	arg01, local01
050e8     38 F9 B1 FD | 	call	#__system___string_cmp
050ec     00 7A 0E F2 | 	cmp	result1, #0 wz
050f0     44 0B 90 AD |  if_e	jmp	#LR__0350
050f4     93 01 00 FF 
050f8     CC 95 06 F6 | 	mov	arg02, ##@LR__5671
050fc     53 93 02 F6 | 	mov	arg01, local01
05100     20 F9 B1 FD | 	call	#__system___string_cmp
05104     00 7A 0E F2 | 	cmp	result1, #0 wz
05108     34 0B 90 AD |  if_e	jmp	#LR__0351
0510c     93 01 00 FF 
05110     D0 95 06 F6 | 	mov	arg02, ##@LR__5672
05114     53 93 02 F6 | 	mov	arg01, local01
05118     08 F9 B1 FD | 	call	#__system___string_cmp
0511c     00 7A 0E F2 | 	cmp	result1, #0 wz
05120     24 0B 90 AD |  if_e	jmp	#LR__0352
05124     93 01 00 FF 
05128     D7 95 06 F6 | 	mov	arg02, ##@LR__5673
0512c     53 93 02 F6 | 	mov	arg01, local01
05130     F0 F8 B1 FD | 	call	#__system___string_cmp
05134     00 7A 0E F2 | 	cmp	result1, #0 wz
05138     14 0B 90 AD |  if_e	jmp	#LR__0353
0513c     93 01 00 FF 
05140     DB 95 06 F6 | 	mov	arg02, ##@LR__5674
05144     53 93 02 F6 | 	mov	arg01, local01
05148     D8 F8 B1 FD | 	call	#__system___string_cmp
0514c     00 7A 0E F2 | 	cmp	result1, #0 wz
05150     04 0B 90 AD |  if_e	jmp	#LR__0354
05154     93 01 00 FF 
05158     DF 95 06 F6 | 	mov	arg02, ##@LR__5675
0515c     53 93 02 F6 | 	mov	arg01, local01
05160     C0 F8 B1 FD | 	call	#__system___string_cmp
05164     00 7A 0E F2 | 	cmp	result1, #0 wz
05168     F4 0A 90 AD |  if_e	jmp	#LR__0355
0516c     93 01 00 FF 
05170     E5 95 06 F6 | 	mov	arg02, ##@LR__5676
05174     53 93 02 F6 | 	mov	arg01, local01
05178     A8 F8 B1 FD | 	call	#__system___string_cmp
0517c     00 7A 0E F2 | 	cmp	result1, #0 wz
05180     E4 0A 90 AD |  if_e	jmp	#LR__0356
05184     93 01 00 FF 
05188     EA 95 06 F6 | 	mov	arg02, ##@LR__5677
0518c     53 93 02 F6 | 	mov	arg01, local01
05190     90 F8 B1 FD | 	call	#__system___string_cmp
05194     00 7A 0E F2 | 	cmp	result1, #0 wz
05198     D4 0A 90 AD |  if_e	jmp	#LR__0357
0519c     93 01 00 FF 
051a0     F1 95 06 F6 | 	mov	arg02, ##@LR__5678
051a4     53 93 02 F6 | 	mov	arg01, local01
051a8     78 F8 B1 FD | 	call	#__system___string_cmp
051ac     00 7A 0E F2 | 	cmp	result1, #0 wz
051b0     C4 0A 90 AD |  if_e	jmp	#LR__0358
051b4     93 01 00 FF 
051b8     F5 95 06 F6 | 	mov	arg02, ##@LR__5679
051bc     53 93 02 F6 | 	mov	arg01, local01
051c0     60 F8 B1 FD | 	call	#__system___string_cmp
051c4     00 7A 0E F2 | 	cmp	result1, #0 wz
051c8     B4 0A 90 AD |  if_e	jmp	#LR__0359
051cc     93 01 00 FF 
051d0     FA 95 06 F6 | 	mov	arg02, ##@LR__5680
051d4     53 93 02 F6 | 	mov	arg01, local01
051d8     48 F8 B1 FD | 	call	#__system___string_cmp
051dc     00 7A 0E F2 | 	cmp	result1, #0 wz
051e0     A4 0A 90 AD |  if_e	jmp	#LR__0360
051e4     93 01 00 FF 
051e8     FE 95 06 F6 | 	mov	arg02, ##@LR__5681
051ec     53 93 02 F6 | 	mov	arg01, local01
051f0     30 F8 B1 FD | 	call	#__system___string_cmp
051f4     00 7A 0E F2 | 	cmp	result1, #0 wz
051f8     94 0A 90 AD |  if_e	jmp	#LR__0361
051fc     94 01 00 FF 
05200     04 94 06 F6 | 	mov	arg02, ##@LR__5682
05204     53 93 02 F6 | 	mov	arg01, local01
05208     18 F8 B1 FD | 	call	#__system___string_cmp
0520c     00 7A 0E F2 | 	cmp	result1, #0 wz
05210     84 0A 90 AD |  if_e	jmp	#LR__0362
05214     94 01 00 FF 
05218     07 94 06 F6 | 	mov	arg02, ##@LR__5683
0521c     53 93 02 F6 | 	mov	arg01, local01
05220     00 F8 B1 FD | 	call	#__system___string_cmp
05224     00 7A 0E F2 | 	cmp	result1, #0 wz
05228     74 0A 90 AD |  if_e	jmp	#LR__0363
0522c     94 01 00 FF 
05230     0F 94 06 F6 | 	mov	arg02, ##@LR__5684
05234     53 93 02 F6 | 	mov	arg01, local01
05238     E8 F7 B1 FD | 	call	#__system___string_cmp
0523c     00 7A 0E F2 | 	cmp	result1, #0 wz
05240     64 0A 90 AD |  if_e	jmp	#LR__0364
05244     94 01 00 FF 
05248     13 94 06 F6 | 	mov	arg02, ##@LR__5685
0524c     53 93 02 F6 | 	mov	arg01, local01
05250     D0 F7 B1 FD | 	call	#__system___string_cmp
05254     00 7A 0E F2 | 	cmp	result1, #0 wz
05258     54 0A 90 AD |  if_e	jmp	#LR__0365
0525c     94 01 00 FF 
05260     18 94 06 F6 | 	mov	arg02, ##@LR__5686
05264     53 93 02 F6 | 	mov	arg01, local01
05268     B8 F7 B1 FD | 	call	#__system___string_cmp
0526c     00 7A 0E F2 | 	cmp	result1, #0 wz
05270     44 0A 90 AD |  if_e	jmp	#LR__0366
05274     94 01 00 FF 
05278     1C 94 06 F6 | 	mov	arg02, ##@LR__5687
0527c     53 93 02 F6 | 	mov	arg01, local01
05280     A0 F7 B1 FD | 	call	#__system___string_cmp
05284     00 7A 0E F2 | 	cmp	result1, #0 wz
05288     34 0A 90 AD |  if_e	jmp	#LR__0367
0528c     94 01 00 FF 
05290     21 94 06 F6 | 	mov	arg02, ##@LR__5688
05294     53 93 02 F6 | 	mov	arg01, local01
05298     88 F7 B1 FD | 	call	#__system___string_cmp
0529c     00 7A 0E F2 | 	cmp	result1, #0 wz
052a0     24 0A 90 AD |  if_e	jmp	#LR__0368
052a4     94 01 00 FF 
052a8     25 94 06 F6 | 	mov	arg02, ##@LR__5689
052ac     53 93 02 F6 | 	mov	arg01, local01
052b0     70 F7 B1 FD | 	call	#__system___string_cmp
052b4     00 7A 0E F2 | 	cmp	result1, #0 wz
052b8     14 0A 90 AD |  if_e	jmp	#LR__0369
052bc     94 01 00 FF 
052c0     28 94 06 F6 | 	mov	arg02, ##@LR__5690
052c4     53 93 02 F6 | 	mov	arg01, local01
052c8     58 F7 B1 FD | 	call	#__system___string_cmp
052cc     00 7A 0E F2 | 	cmp	result1, #0 wz
052d0     04 0A 90 AD |  if_e	jmp	#LR__0370
052d4     94 01 00 FF 
052d8     2E 94 06 F6 | 	mov	arg02, ##@LR__5691
052dc     53 93 02 F6 | 	mov	arg01, local01
052e0     40 F7 B1 FD | 	call	#__system___string_cmp
052e4     00 7A 0E F2 | 	cmp	result1, #0 wz
052e8     F4 09 90 AD |  if_e	jmp	#LR__0371
052ec     94 01 00 FF 
052f0     32 94 06 F6 | 	mov	arg02, ##@LR__5692
052f4     53 93 02 F6 | 	mov	arg01, local01
052f8     28 F7 B1 FD | 	call	#__system___string_cmp
052fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05300     E4 09 90 AD |  if_e	jmp	#LR__0372
05304     94 01 00 FF 
05308     36 94 06 F6 | 	mov	arg02, ##@LR__5693
0530c     53 93 02 F6 | 	mov	arg01, local01
05310     10 F7 B1 FD | 	call	#__system___string_cmp
05314     00 7A 0E F2 | 	cmp	result1, #0 wz
05318     D4 09 90 AD |  if_e	jmp	#LR__0373
0531c     94 01 00 FF 
05320     3C 94 06 F6 | 	mov	arg02, ##@LR__5694
05324     53 93 02 F6 | 	mov	arg01, local01
05328     F8 F6 B1 FD | 	call	#__system___string_cmp
0532c     00 7A 0E F2 | 	cmp	result1, #0 wz
05330     C4 09 90 AD |  if_e	jmp	#LR__0374
05334     94 01 00 FF 
05338     41 94 06 F6 | 	mov	arg02, ##@LR__5695
0533c     53 93 02 F6 | 	mov	arg01, local01
05340     E0 F6 B1 FD | 	call	#__system___string_cmp
05344     00 7A 0E F2 | 	cmp	result1, #0 wz
05348     B4 09 90 AD |  if_e	jmp	#LR__0375
0534c     94 01 00 FF 
05350     44 94 06 F6 | 	mov	arg02, ##@LR__5696
05354     53 93 02 F6 | 	mov	arg01, local01
05358     C8 F6 B1 FD | 	call	#__system___string_cmp
0535c     00 7A 0E F2 | 	cmp	result1, #0 wz
05360     A4 09 90 AD |  if_e	jmp	#LR__0376
05364     94 01 00 FF 
05368     47 94 06 F6 | 	mov	arg02, ##@LR__5697
0536c     53 93 02 F6 | 	mov	arg01, local01
05370     B0 F6 B1 FD | 	call	#__system___string_cmp
05374     00 7A 0E F2 | 	cmp	result1, #0 wz
05378     94 09 90 AD |  if_e	jmp	#LR__0377
0537c     94 01 00 FF 
05380     4B 94 06 F6 | 	mov	arg02, ##@LR__5698
05384     53 93 02 F6 | 	mov	arg01, local01
05388     98 F6 B1 FD | 	call	#__system___string_cmp
0538c     00 7A 0E F2 | 	cmp	result1, #0 wz
05390     84 09 90 AD |  if_e	jmp	#LR__0378
05394     94 01 00 FF 
05398     4E 94 06 F6 | 	mov	arg02, ##@LR__5699
0539c     53 93 02 F6 | 	mov	arg01, local01
053a0     80 F6 B1 FD | 	call	#__system___string_cmp
053a4     00 7A 0E F2 | 	cmp	result1, #0 wz
053a8     74 09 90 AD |  if_e	jmp	#LR__0379
053ac     94 01 00 FF 
053b0     54 94 06 F6 | 	mov	arg02, ##@LR__5700
053b4     53 93 02 F6 | 	mov	arg01, local01
053b8     68 F6 B1 FD | 	call	#__system___string_cmp
053bc     00 7A 0E F2 | 	cmp	result1, #0 wz
053c0     64 09 90 AD |  if_e	jmp	#LR__0380
053c4     94 01 00 FF 
053c8     59 94 06 F6 | 	mov	arg02, ##@LR__5701
053cc     53 93 02 F6 | 	mov	arg01, local01
053d0     50 F6 B1 FD | 	call	#__system___string_cmp
053d4     00 7A 0E F2 | 	cmp	result1, #0 wz
053d8     54 09 90 AD |  if_e	jmp	#LR__0381
053dc     94 01 00 FF 
053e0     5C 94 06 F6 | 	mov	arg02, ##@LR__5702
053e4     53 93 02 F6 | 	mov	arg01, local01
053e8     38 F6 B1 FD | 	call	#__system___string_cmp
053ec     00 7A 0E F2 | 	cmp	result1, #0 wz
053f0     44 09 90 AD |  if_e	jmp	#LR__0382
053f4     94 01 00 FF 
053f8     61 94 06 F6 | 	mov	arg02, ##@LR__5703
053fc     53 93 02 F6 | 	mov	arg01, local01
05400     20 F6 B1 FD | 	call	#__system___string_cmp
05404     00 7A 0E F2 | 	cmp	result1, #0 wz
05408     34 09 90 AD |  if_e	jmp	#LR__0383
0540c     94 01 00 FF 
05410     65 94 06 F6 | 	mov	arg02, ##@LR__5704
05414     53 93 02 F6 | 	mov	arg01, local01
05418     08 F6 B1 FD | 	call	#__system___string_cmp
0541c     00 7A 0E F2 | 	cmp	result1, #0 wz
05420     24 09 90 AD |  if_e	jmp	#LR__0384
05424     94 01 00 FF 
05428     6B 94 06 F6 | 	mov	arg02, ##@LR__5705
0542c     53 93 02 F6 | 	mov	arg01, local01
05430     F0 F5 B1 FD | 	call	#__system___string_cmp
05434     00 7A 0E F2 | 	cmp	result1, #0 wz
05438     14 09 90 AD |  if_e	jmp	#LR__0385
0543c     94 01 00 FF 
05440     71 94 06 F6 | 	mov	arg02, ##@LR__5706
05444     53 93 02 F6 | 	mov	arg01, local01
05448     D8 F5 B1 FD | 	call	#__system___string_cmp
0544c     00 7A 0E F2 | 	cmp	result1, #0 wz
05450     04 09 90 AD |  if_e	jmp	#LR__0386
05454     94 01 00 FF 
05458     76 94 06 F6 | 	mov	arg02, ##@LR__5707
0545c     53 93 02 F6 | 	mov	arg01, local01
05460     C0 F5 B1 FD | 	call	#__system___string_cmp
05464     00 7A 0E F2 | 	cmp	result1, #0 wz
05468     F4 08 90 AD |  if_e	jmp	#LR__0387
0546c     94 01 00 FF 
05470     79 94 06 F6 | 	mov	arg02, ##@LR__5708
05474     53 93 02 F6 | 	mov	arg01, local01
05478     A8 F5 B1 FD | 	call	#__system___string_cmp
0547c     00 7A 0E F2 | 	cmp	result1, #0 wz
05480     E4 08 90 AD |  if_e	jmp	#LR__0388
05484     94 01 00 FF 
05488     7F 94 06 F6 | 	mov	arg02, ##@LR__5709
0548c     53 93 02 F6 | 	mov	arg01, local01
05490     90 F5 B1 FD | 	call	#__system___string_cmp
05494     00 7A 0E F2 | 	cmp	result1, #0 wz
05498     D4 08 90 AD |  if_e	jmp	#LR__0389
0549c     94 01 00 FF 
054a0     83 94 06 F6 | 	mov	arg02, ##@LR__5710
054a4     53 93 02 F6 | 	mov	arg01, local01
054a8     78 F5 B1 FD | 	call	#__system___string_cmp
054ac     00 7A 0E F2 | 	cmp	result1, #0 wz
054b0     C4 08 90 AD |  if_e	jmp	#LR__0390
054b4     94 01 00 FF 
054b8     88 94 06 F6 | 	mov	arg02, ##@LR__5711
054bc     53 93 02 F6 | 	mov	arg01, local01
054c0     60 F5 B1 FD | 	call	#__system___string_cmp
054c4     00 7A 0E F2 | 	cmp	result1, #0 wz
054c8     B4 08 90 AD |  if_e	jmp	#LR__0391
054cc     94 01 00 FF 
054d0     8B 94 06 F6 | 	mov	arg02, ##@LR__5712
054d4     53 93 02 F6 | 	mov	arg01, local01
054d8     48 F5 B1 FD | 	call	#__system___string_cmp
054dc     00 7A 0E F2 | 	cmp	result1, #0 wz
054e0     A4 08 90 AD |  if_e	jmp	#LR__0392
054e4     94 01 00 FF 
054e8     8E 94 06 F6 | 	mov	arg02, ##@LR__5713
054ec     53 93 02 F6 | 	mov	arg01, local01
054f0     30 F5 B1 FD | 	call	#__system___string_cmp
054f4     00 7A 0E F2 | 	cmp	result1, #0 wz
054f8     94 08 90 AD |  if_e	jmp	#LR__0393
054fc     94 01 00 FF 
05500     93 94 06 F6 | 	mov	arg02, ##@LR__5714
05504     53 93 02 F6 | 	mov	arg01, local01
05508     18 F5 B1 FD | 	call	#__system___string_cmp
0550c     00 7A 0E F2 | 	cmp	result1, #0 wz
05510     84 08 90 AD |  if_e	jmp	#LR__0394
05514     94 01 00 FF 
05518     99 94 06 F6 | 	mov	arg02, ##@LR__5715
0551c     53 93 02 F6 | 	mov	arg01, local01
05520     00 F5 B1 FD | 	call	#__system___string_cmp
05524     00 7A 0E F2 | 	cmp	result1, #0 wz
05528     74 08 90 AD |  if_e	jmp	#LR__0395
0552c     94 01 00 FF 
05530     9D 94 06 F6 | 	mov	arg02, ##@LR__5716
05534     53 93 02 F6 | 	mov	arg01, local01
05538     E8 F4 B1 FD | 	call	#__system___string_cmp
0553c     00 7A 0E F2 | 	cmp	result1, #0 wz
05540     64 08 90 AD |  if_e	jmp	#LR__0396
05544     94 01 00 FF 
05548     A6 94 06 F6 | 	mov	arg02, ##@LR__5717
0554c     53 93 02 F6 | 	mov	arg01, local01
05550     D0 F4 B1 FD | 	call	#__system___string_cmp
05554     00 7A 0E F2 | 	cmp	result1, #0 wz
05558     54 08 90 AD |  if_e	jmp	#LR__0397
0555c     94 01 00 FF 
05560     AC 94 06 F6 | 	mov	arg02, ##@LR__5718
05564     53 93 02 F6 | 	mov	arg01, local01
05568     B8 F4 B1 FD | 	call	#__system___string_cmp
0556c     00 7A 0E F2 | 	cmp	result1, #0 wz
05570     44 08 90 AD |  if_e	jmp	#LR__0398
05574     94 01 00 FF 
05578     B2 94 06 F6 | 	mov	arg02, ##@LR__5719
0557c     53 93 02 F6 | 	mov	arg01, local01
05580     A0 F4 B1 FD | 	call	#__system___string_cmp
05584     00 7A 0E F2 | 	cmp	result1, #0 wz
05588     34 08 90 AD |  if_e	jmp	#LR__0399
0558c     94 01 00 FF 
05590     BB 94 06 F6 | 	mov	arg02, ##@LR__5720
05594     53 93 02 F6 | 	mov	arg01, local01
05598     88 F4 B1 FD | 	call	#__system___string_cmp
0559c     00 7A 0E F2 | 	cmp	result1, #0 wz
055a0     24 08 90 AD |  if_e	jmp	#LR__0400
055a4     94 01 00 FF 
055a8     C5 94 06 F6 | 	mov	arg02, ##@LR__5721
055ac     53 93 02 F6 | 	mov	arg01, local01
055b0     70 F4 B1 FD | 	call	#__system___string_cmp
055b4     00 7A 0E F2 | 	cmp	result1, #0 wz
055b8     14 08 90 AD |  if_e	jmp	#LR__0401
055bc     94 01 00 FF 
055c0     CE 94 06 F6 | 	mov	arg02, ##@LR__5722
055c4     53 93 02 F6 | 	mov	arg01, local01
055c8     58 F4 B1 FD | 	call	#__system___string_cmp
055cc     00 7A 0E F2 | 	cmp	result1, #0 wz
055d0     04 08 90 AD |  if_e	jmp	#LR__0402
055d4     94 01 00 FF 
055d8     D3 94 06 F6 | 	mov	arg02, ##@LR__5723
055dc     53 93 02 F6 | 	mov	arg01, local01
055e0     40 F4 B1 FD | 	call	#__system___string_cmp
055e4     00 7A 0E F2 | 	cmp	result1, #0 wz
055e8     F4 07 90 AD |  if_e	jmp	#LR__0403
055ec     94 01 00 FF 
055f0     D6 94 06 F6 | 	mov	arg02, ##@LR__5724
055f4     53 93 02 F6 | 	mov	arg01, local01
055f8     28 F4 B1 FD | 	call	#__system___string_cmp
055fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05600     E4 07 90 AD |  if_e	jmp	#LR__0404
05604     94 01 00 FF 
05608     DB 94 06 F6 | 	mov	arg02, ##@LR__5725
0560c     53 93 02 F6 | 	mov	arg01, local01
05610     10 F4 B1 FD | 	call	#__system___string_cmp
05614     00 7A 0E F2 | 	cmp	result1, #0 wz
05618     D4 07 90 AD |  if_e	jmp	#LR__0405
0561c     94 01 00 FF 
05620     DF 94 06 F6 | 	mov	arg02, ##@LR__5726
05624     53 93 02 F6 | 	mov	arg01, local01
05628     F8 F3 B1 FD | 	call	#__system___string_cmp
0562c     00 7A 0E F2 | 	cmp	result1, #0 wz
05630     C4 07 90 AD |  if_e	jmp	#LR__0406
05634     94 01 00 FF 
05638     E4 94 06 F6 | 	mov	arg02, ##@LR__5727
0563c     53 93 02 F6 | 	mov	arg01, local01
05640     E0 F3 B1 FD | 	call	#__system___string_cmp
05644     00 7A 0E F2 | 	cmp	result1, #0 wz
05648     B4 07 90 AD |  if_e	jmp	#LR__0407
0564c     94 01 00 FF 
05650     E8 94 06 F6 | 	mov	arg02, ##@LR__5728
05654     53 93 02 F6 | 	mov	arg01, local01
05658     C8 F3 B1 FD | 	call	#__system___string_cmp
0565c     00 7A 0E F2 | 	cmp	result1, #0 wz
05660     A4 07 90 AD |  if_e	jmp	#LR__0408
05664     94 01 00 FF 
05668     F1 94 06 F6 | 	mov	arg02, ##@LR__5729
0566c     53 93 02 F6 | 	mov	arg01, local01
05670     B0 F3 B1 FD | 	call	#__system___string_cmp
05674     00 7A 0E F2 | 	cmp	result1, #0 wz
05678     94 07 90 AD |  if_e	jmp	#LR__0409
0567c     94 01 00 FF 
05680     F6 94 06 F6 | 	mov	arg02, ##@LR__5730
05684     53 93 02 F6 | 	mov	arg01, local01
05688     98 F3 B1 FD | 	call	#__system___string_cmp
0568c     00 7A 0E F2 | 	cmp	result1, #0 wz
05690     84 07 90 AD |  if_e	jmp	#LR__0410
05694     94 01 00 FF 
05698     FC 94 06 F6 | 	mov	arg02, ##@LR__5731
0569c     53 93 02 F6 | 	mov	arg01, local01
056a0     80 F3 B1 FD | 	call	#__system___string_cmp
056a4     00 7A 0E F2 | 	cmp	result1, #0 wz
056a8     74 07 90 AD |  if_e	jmp	#LR__0411
056ac     94 01 00 FF 
056b0     FE 94 06 F6 | 	mov	arg02, ##@LR__5732
056b4     53 93 02 F6 | 	mov	arg01, local01
056b8     68 F3 B1 FD | 	call	#__system___string_cmp
056bc     00 7A 0E F2 | 	cmp	result1, #0 wz
056c0     64 07 90 AD |  if_e	jmp	#LR__0412
056c4     94 01 00 FF 
056c8     02 95 06 F6 | 	mov	arg02, ##@LR__5733
056cc     53 93 02 F6 | 	mov	arg01, local01
056d0     50 F3 B1 FD | 	call	#__system___string_cmp
056d4     00 7A 0E F2 | 	cmp	result1, #0 wz
056d8     54 07 90 AD |  if_e	jmp	#LR__0413
056dc     94 01 00 FF 
056e0     06 95 06 F6 | 	mov	arg02, ##@LR__5734
056e4     53 93 02 F6 | 	mov	arg01, local01
056e8     38 F3 B1 FD | 	call	#__system___string_cmp
056ec     00 7A 0E F2 | 	cmp	result1, #0 wz
056f0     44 07 90 AD |  if_e	jmp	#LR__0414
056f4     94 01 00 FF 
056f8     0B 95 06 F6 | 	mov	arg02, ##@LR__5735
056fc     53 93 02 F6 | 	mov	arg01, local01
05700     20 F3 B1 FD | 	call	#__system___string_cmp
05704     00 7A 0E F2 | 	cmp	result1, #0 wz
05708     34 07 90 AD |  if_e	jmp	#LR__0415
0570c     94 01 00 FF 
05710     13 95 06 F6 | 	mov	arg02, ##@LR__5736
05714     53 93 02 F6 | 	mov	arg01, local01
05718     08 F3 B1 FD | 	call	#__system___string_cmp
0571c     00 7A 0E F2 | 	cmp	result1, #0 wz
05720     24 07 90 AD |  if_e	jmp	#LR__0416
05724     94 01 00 FF 
05728     17 95 06 F6 | 	mov	arg02, ##@LR__5737
0572c     53 93 02 F6 | 	mov	arg01, local01
05730     F0 F2 B1 FD | 	call	#__system___string_cmp
05734     00 7A 0E F2 | 	cmp	result1, #0 wz
05738     14 07 90 AD |  if_e	jmp	#LR__0417
0573c     94 01 00 FF 
05740     19 95 06 F6 | 	mov	arg02, ##@LR__5738
05744     53 93 02 F6 | 	mov	arg01, local01
05748     D8 F2 B1 FD | 	call	#__system___string_cmp
0574c     00 7A 0E F2 | 	cmp	result1, #0 wz
05750     04 07 90 AD |  if_e	jmp	#LR__0418
05754     94 01 00 FF 
05758     21 95 06 F6 | 	mov	arg02, ##@LR__5739
0575c     53 93 02 F6 | 	mov	arg01, local01
05760     C0 F2 B1 FD | 	call	#__system___string_cmp
05764     00 7A 0E F2 | 	cmp	result1, #0 wz
05768     F4 06 90 AD |  if_e	jmp	#LR__0419
0576c     94 01 00 FF 
05770     30 95 06 F6 | 	mov	arg02, ##@LR__5740
05774     53 93 02 F6 | 	mov	arg01, local01
05778     A8 F2 B1 FD | 	call	#__system___string_cmp
0577c     00 7A 0E F2 | 	cmp	result1, #0 wz
05780     E4 06 90 AD |  if_e	jmp	#LR__0420
05784     94 01 00 FF 
05788     34 95 06 F6 | 	mov	arg02, ##@LR__5741
0578c     53 93 02 F6 | 	mov	arg01, local01
05790     90 F2 B1 FD | 	call	#__system___string_cmp
05794     00 7A 0E F2 | 	cmp	result1, #0 wz
05798     D4 06 90 AD |  if_e	jmp	#LR__0421
0579c     94 01 00 FF 
057a0     3B 95 06 F6 | 	mov	arg02, ##@LR__5742
057a4     53 93 02 F6 | 	mov	arg01, local01
057a8     78 F2 B1 FD | 	call	#__system___string_cmp
057ac     00 7A 0E F2 | 	cmp	result1, #0 wz
057b0     C4 06 90 AD |  if_e	jmp	#LR__0422
057b4     94 01 00 FF 
057b8     3F 95 06 F6 | 	mov	arg02, ##@LR__5743
057bc     53 93 02 F6 | 	mov	arg01, local01
057c0     60 F2 B1 FD | 	call	#__system___string_cmp
057c4     00 7A 0E F2 | 	cmp	result1, #0 wz
057c8     B4 06 90 AD |  if_e	jmp	#LR__0423
057cc     94 01 00 FF 
057d0     42 95 06 F6 | 	mov	arg02, ##@LR__5744
057d4     53 93 02 F6 | 	mov	arg01, local01
057d8     48 F2 B1 FD | 	call	#__system___string_cmp
057dc     00 7A 0E F2 | 	cmp	result1, #0 wz
057e0     A4 06 90 AD |  if_e	jmp	#LR__0424
057e4     94 01 00 FF 
057e8     47 95 06 F6 | 	mov	arg02, ##@LR__5745
057ec     53 93 02 F6 | 	mov	arg01, local01
057f0     30 F2 B1 FD | 	call	#__system___string_cmp
057f4     00 7A 0E F2 | 	cmp	result1, #0 wz
057f8     94 06 90 AD |  if_e	jmp	#LR__0425
057fc     94 01 00 FF 
05800     4A 95 06 F6 | 	mov	arg02, ##@LR__5746
05804     53 93 02 F6 | 	mov	arg01, local01
05808     18 F2 B1 FD | 	call	#__system___string_cmp
0580c     00 7A 0E F2 | 	cmp	result1, #0 wz
05810     84 06 90 AD |  if_e	jmp	#LR__0426
05814     94 01 00 FF 
05818     53 95 06 F6 | 	mov	arg02, ##@LR__5747
0581c     53 93 02 F6 | 	mov	arg01, local01
05820     00 F2 B1 FD | 	call	#__system___string_cmp
05824     00 7A 0E F2 | 	cmp	result1, #0 wz
05828     74 06 90 AD |  if_e	jmp	#LR__0427
0582c     94 01 00 FF 
05830     57 95 06 F6 | 	mov	arg02, ##@LR__5748
05834     53 93 02 F6 | 	mov	arg01, local01
05838     E8 F1 B1 FD | 	call	#__system___string_cmp
0583c     00 7A 0E F2 | 	cmp	result1, #0 wz
05840     64 06 90 AD |  if_e	jmp	#LR__0428
05844     94 01 00 FF 
05848     60 95 06 F6 | 	mov	arg02, ##@LR__5749
0584c     53 93 02 F6 | 	mov	arg01, local01
05850     D0 F1 B1 FD | 	call	#__system___string_cmp
05854     00 7A 0E F2 | 	cmp	result1, #0 wz
05858     54 06 90 AD |  if_e	jmp	#LR__0429
0585c     94 01 00 FF 
05860     64 95 06 F6 | 	mov	arg02, ##@LR__5750
05864     53 93 02 F6 | 	mov	arg01, local01
05868     B8 F1 B1 FD | 	call	#__system___string_cmp
0586c     00 7A 0E F2 | 	cmp	result1, #0 wz
05870     44 06 90 AD |  if_e	jmp	#LR__0430
05874     94 01 00 FF 
05878     6D 95 06 F6 | 	mov	arg02, ##@LR__5751
0587c     53 93 02 F6 | 	mov	arg01, local01
05880     A0 F1 B1 FD | 	call	#__system___string_cmp
05884     00 7A 0E F2 | 	cmp	result1, #0 wz
05888     34 06 90 AD |  if_e	jmp	#LR__0431
0588c     94 01 00 FF 
05890     71 95 06 F6 | 	mov	arg02, ##@LR__5752
05894     53 93 02 F6 | 	mov	arg01, local01
05898     88 F1 B1 FD | 	call	#__system___string_cmp
0589c     00 7A 0E F2 | 	cmp	result1, #0 wz
058a0     24 06 90 AD |  if_e	jmp	#LR__0432
058a4     94 01 00 FF 
058a8     78 95 06 F6 | 	mov	arg02, ##@LR__5753
058ac     53 93 02 F6 | 	mov	arg01, local01
058b0     70 F1 B1 FD | 	call	#__system___string_cmp
058b4     00 7A 0E F2 | 	cmp	result1, #0 wz
058b8     14 06 90 AD |  if_e	jmp	#LR__0433
058bc     94 01 00 FF 
058c0     7C 95 06 F6 | 	mov	arg02, ##@LR__5754
058c4     53 93 02 F6 | 	mov	arg01, local01
058c8     58 F1 B1 FD | 	call	#__system___string_cmp
058cc     00 7A 0E F2 | 	cmp	result1, #0 wz
058d0     04 06 90 AD |  if_e	jmp	#LR__0434
058d4     94 01 00 FF 
058d8     83 95 06 F6 | 	mov	arg02, ##@LR__5755
058dc     53 93 02 F6 | 	mov	arg01, local01
058e0     40 F1 B1 FD | 	call	#__system___string_cmp
058e4     00 7A 0E F2 | 	cmp	result1, #0 wz
058e8     F4 05 90 AD |  if_e	jmp	#LR__0435
058ec     94 01 00 FF 
058f0     87 95 06 F6 | 	mov	arg02, ##@LR__5756
058f4     53 93 02 F6 | 	mov	arg01, local01
058f8     28 F1 B1 FD | 	call	#__system___string_cmp
058fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05900     E4 05 90 AD |  if_e	jmp	#LR__0436
05904     94 01 00 FF 
05908     8E 95 06 F6 | 	mov	arg02, ##@LR__5757
0590c     53 93 02 F6 | 	mov	arg01, local01
05910     10 F1 B1 FD | 	call	#__system___string_cmp
05914     00 7A 0E F2 | 	cmp	result1, #0 wz
05918     D4 05 90 AD |  if_e	jmp	#LR__0437
0591c     94 01 00 FF 
05920     92 95 06 F6 | 	mov	arg02, ##@LR__5758
05924     53 93 02 F6 | 	mov	arg01, local01
05928     F8 F0 B1 FD | 	call	#__system___string_cmp
0592c     00 7A 0E F2 | 	cmp	result1, #0 wz
05930     C4 05 90 AD |  if_e	jmp	#LR__0438
05934     94 01 00 FF 
05938     9D 95 06 F6 | 	mov	arg02, ##@LR__5759
0593c     53 93 02 F6 | 	mov	arg01, local01
05940     E0 F0 B1 FD | 	call	#__system___string_cmp
05944     00 7A 0E F2 | 	cmp	result1, #0 wz
05948     B4 05 90 AD |  if_e	jmp	#LR__0439
0594c     94 01 00 FF 
05950     A1 95 06 F6 | 	mov	arg02, ##@LR__5760
05954     53 93 02 F6 | 	mov	arg01, local01
05958     C8 F0 B1 FD | 	call	#__system___string_cmp
0595c     00 7A 0E F2 | 	cmp	result1, #0 wz
05960     A4 05 90 AD |  if_e	jmp	#LR__0440
05964     94 01 00 FF 
05968     A8 95 06 F6 | 	mov	arg02, ##@LR__5761
0596c     53 93 02 F6 | 	mov	arg01, local01
05970     B0 F0 B1 FD | 	call	#__system___string_cmp
05974     00 7A 0E F2 | 	cmp	result1, #0 wz
05978     94 05 90 AD |  if_e	jmp	#LR__0441
0597c     94 01 00 FF 
05980     AC 95 06 F6 | 	mov	arg02, ##@LR__5762
05984     53 93 02 F6 | 	mov	arg01, local01
05988     98 F0 B1 FD | 	call	#__system___string_cmp
0598c     00 7A 0E F2 | 	cmp	result1, #0 wz
05990     84 05 90 AD |  if_e	jmp	#LR__0442
05994     94 01 00 FF 
05998     B4 95 06 F6 | 	mov	arg02, ##@LR__5763
0599c     53 93 02 F6 | 	mov	arg01, local01
059a0     80 F0 B1 FD | 	call	#__system___string_cmp
059a4     00 7A 0E F2 | 	cmp	result1, #0 wz
059a8     74 05 90 AD |  if_e	jmp	#LR__0443
059ac     94 01 00 FF 
059b0     B8 95 06 F6 | 	mov	arg02, ##@LR__5764
059b4     53 93 02 F6 | 	mov	arg01, local01
059b8     68 F0 B1 FD | 	call	#__system___string_cmp
059bc     00 7A 0E F2 | 	cmp	result1, #0 wz
059c0     64 05 90 AD |  if_e	jmp	#LR__0444
059c4     94 01 00 FF 
059c8     BF 95 06 F6 | 	mov	arg02, ##@LR__5765
059cc     53 93 02 F6 | 	mov	arg01, local01
059d0     50 F0 B1 FD | 	call	#__system___string_cmp
059d4     00 7A 0E F2 | 	cmp	result1, #0 wz
059d8     54 05 90 AD |  if_e	jmp	#LR__0445
059dc     94 01 00 FF 
059e0     C6 95 06 F6 | 	mov	arg02, ##@LR__5766
059e4     53 93 02 F6 | 	mov	arg01, local01
059e8     38 F0 B1 FD | 	call	#__system___string_cmp
059ec     00 7A 0E F2 | 	cmp	result1, #0 wz
059f0     44 05 90 AD |  if_e	jmp	#LR__0446
059f4     94 01 00 FF 
059f8     CA 95 06 F6 | 	mov	arg02, ##@LR__5767
059fc     53 93 02 F6 | 	mov	arg01, local01
05a00     20 F0 B1 FD | 	call	#__system___string_cmp
05a04     00 7A 0E F2 | 	cmp	result1, #0 wz
05a08     34 05 90 AD |  if_e	jmp	#LR__0447
05a0c     94 01 00 FF 
05a10     D0 95 06 F6 | 	mov	arg02, ##@LR__5768
05a14     53 93 02 F6 | 	mov	arg01, local01
05a18     08 F0 B1 FD | 	call	#__system___string_cmp
05a1c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a20     24 05 90 AD |  if_e	jmp	#LR__0448
05a24     94 01 00 FF 
05a28     D4 95 06 F6 | 	mov	arg02, ##@LR__5769
05a2c     53 93 02 F6 | 	mov	arg01, local01
05a30     F0 EF B1 FD | 	call	#__system___string_cmp
05a34     00 7A 0E F2 | 	cmp	result1, #0 wz
05a38     14 05 90 AD |  if_e	jmp	#LR__0449
05a3c     94 01 00 FF 
05a40     DB 95 06 F6 | 	mov	arg02, ##@LR__5770
05a44     53 93 02 F6 | 	mov	arg01, local01
05a48     D8 EF B1 FD | 	call	#__system___string_cmp
05a4c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a50     04 05 90 AD |  if_e	jmp	#LR__0450
05a54     94 01 00 FF 
05a58     E0 95 06 F6 | 	mov	arg02, ##@LR__5771
05a5c     53 93 02 F6 | 	mov	arg01, local01
05a60     C0 EF B1 FD | 	call	#__system___string_cmp
05a64     00 7A 0E F2 | 	cmp	result1, #0 wz
05a68     F4 04 90 AD |  if_e	jmp	#LR__0451
05a6c     94 01 00 FF 
05a70     E5 95 06 F6 | 	mov	arg02, ##@LR__5772
05a74     53 93 02 F6 | 	mov	arg01, local01
05a78     A8 EF B1 FD | 	call	#__system___string_cmp
05a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a80     E4 04 90 AD |  if_e	jmp	#LR__0452
05a84     94 01 00 FF 
05a88     EC 95 06 F6 | 	mov	arg02, ##@LR__5773
05a8c     53 93 02 F6 | 	mov	arg01, local01
05a90     90 EF B1 FD | 	call	#__system___string_cmp
05a94     00 7A 0E F2 | 	cmp	result1, #0 wz
05a98     D4 04 90 AD |  if_e	jmp	#LR__0453
05a9c     94 01 00 FF 
05aa0     EF 95 06 F6 | 	mov	arg02, ##@LR__5774
05aa4     53 93 02 F6 | 	mov	arg01, local01
05aa8     78 EF B1 FD | 	call	#__system___string_cmp
05aac     00 7A 0E F2 | 	cmp	result1, #0 wz
05ab0     C4 04 90 AD |  if_e	jmp	#LR__0454
05ab4     94 01 00 FF 
05ab8     F9 95 06 F6 | 	mov	arg02, ##@LR__5775
05abc     53 93 02 F6 | 	mov	arg01, local01
05ac0     60 EF B1 FD | 	call	#__system___string_cmp
05ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ac8     B4 04 90 AD |  if_e	jmp	#LR__0455
05acc     94 01 00 FF 
05ad0     FD 95 06 F6 | 	mov	arg02, ##@LR__5776
05ad4     53 93 02 F6 | 	mov	arg01, local01
05ad8     48 EF B1 FD | 	call	#__system___string_cmp
05adc     00 7A 0E F2 | 	cmp	result1, #0 wz
05ae0     A4 04 90 AD |  if_e	jmp	#LR__0456
05ae4     95 01 00 FF 
05ae8     05 94 06 F6 | 	mov	arg02, ##@LR__5777
05aec     53 93 02 F6 | 	mov	arg01, local01
05af0     30 EF B1 FD | 	call	#__system___string_cmp
05af4     00 7A 0E F2 | 	cmp	result1, #0 wz
05af8     94 04 90 AD |  if_e	jmp	#LR__0457
05afc     95 01 00 FF 
05b00     09 94 06 F6 | 	mov	arg02, ##@LR__5778
05b04     53 93 02 F6 | 	mov	arg01, local01
05b08     18 EF B1 FD | 	call	#__system___string_cmp
05b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b10     84 04 90 AD |  if_e	jmp	#LR__0458
05b14     95 01 00 FF 
05b18     0F 94 06 F6 | 	mov	arg02, ##@LR__5779
05b1c     53 93 02 F6 | 	mov	arg01, local01
05b20     00 EF B1 FD | 	call	#__system___string_cmp
05b24     00 7A 0E F2 | 	cmp	result1, #0 wz
05b28     74 04 90 AD |  if_e	jmp	#LR__0459
05b2c     95 01 00 FF 
05b30     15 94 06 F6 | 	mov	arg02, ##@LR__5780
05b34     53 93 02 F6 | 	mov	arg01, local01
05b38     E8 EE B1 FD | 	call	#__system___string_cmp
05b3c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b40     64 04 90 AD |  if_e	jmp	#LR__0460
05b44     68 04 90 FD | 	jmp	#LR__0461
05b48                 | LR__0320
05b48     5C 7A 06 F6 | 	mov	result1, #92
05b4c     64 04 90 FD | 	jmp	#LR__0462
05b50                 | LR__0321
05b50     5C 7A 06 F6 | 	mov	result1, #92
05b54     5C 04 90 FD | 	jmp	#LR__0462
05b58                 | LR__0322
05b58     B9 7A 06 F6 | 	mov	result1, #185
05b5c     54 04 90 FD | 	jmp	#LR__0462
05b60                 | LR__0323
05b60     47 7A 06 F6 | 	mov	result1, #71
05b64     4C 04 90 FD | 	jmp	#LR__0462
05b68                 | LR__0324
05b68     59 7A 06 F6 | 	mov	result1, #89
05b6c     44 04 90 FD | 	jmp	#LR__0462
05b70                 | LR__0325
05b70     59 7A 06 F6 | 	mov	result1, #89
05b74     3C 04 90 FD | 	jmp	#LR__0462
05b78                 | LR__0326
05b78     C3 7A 06 F6 | 	mov	result1, #195
05b7c     34 04 90 FD | 	jmp	#LR__0462
05b80                 | LR__0327
05b80     AE 7A 06 F6 | 	mov	result1, #174
05b84     2C 04 90 FD | 	jmp	#LR__0462
05b88                 | LR__0328
05b88     AE 7A 06 F6 | 	mov	result1, #174
05b8c     24 04 90 FD | 	jmp	#LR__0462
05b90                 | LR__0329
05b90     B1 7A 06 F6 | 	mov	result1, #177
05b94     1C 04 90 FD | 	jmp	#LR__0462
05b98                 | LR__0330
05b98     B1 7A 06 F6 | 	mov	result1, #177
05b9c     14 04 90 FD | 	jmp	#LR__0462
05ba0                 | LR__0331
05ba0     AF 7A 06 F6 | 	mov	result1, #175
05ba4     0C 04 90 FD | 	jmp	#LR__0462
05ba8                 | LR__0332
05ba8     AF 7A 06 F6 | 	mov	result1, #175
05bac     04 04 90 FD | 	jmp	#LR__0462
05bb0                 | LR__0333
05bb0     B0 7A 06 F6 | 	mov	result1, #176
05bb4     FC 03 90 FD | 	jmp	#LR__0462
05bb8                 | LR__0334
05bb8     B0 7A 06 F6 | 	mov	result1, #176
05bbc     F4 03 90 FD | 	jmp	#LR__0462
05bc0                 | LR__0335
05bc0     45 7A 06 F6 | 	mov	result1, #69
05bc4     EC 03 90 FD | 	jmp	#LR__0462
05bc8                 | LR__0336
05bc8     45 7A 06 F6 | 	mov	result1, #69
05bcc     E4 03 90 FD | 	jmp	#LR__0462
05bd0                 | LR__0337
05bd0     69 7A 06 F6 | 	mov	result1, #105
05bd4     DC 03 90 FD | 	jmp	#LR__0462
05bd8                 | LR__0338
05bd8     B4 7A 06 F6 | 	mov	result1, #180
05bdc     D4 03 90 FD | 	jmp	#LR__0462
05be0                 | LR__0339
05be0     40 7A 06 F6 | 	mov	result1, #64
05be4     CC 03 90 FD | 	jmp	#LR__0462
05be8                 | LR__0340
05be8     CF 7A 06 F6 | 	mov	result1, #207
05bec     C4 03 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0341
05bf0     49 7A 06 F6 | 	mov	result1, #73
05bf4     BC 03 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0342
05bf8     49 7A 06 F6 | 	mov	result1, #73
05bfc     B4 03 90 FD | 	jmp	#LR__0462
05c00                 | LR__0343
05c00     C4 7A 06 F6 | 	mov	result1, #196
05c04     AC 03 90 FD | 	jmp	#LR__0462
05c08                 | LR__0344
05c08     68 7A 06 F6 | 	mov	result1, #104
05c0c     A4 03 90 FD | 	jmp	#LR__0462
05c10                 | LR__0345
05c10     B7 7A 06 F6 | 	mov	result1, #183
05c14     9C 03 90 FD | 	jmp	#LR__0462
05c18                 | LR__0346
05c18     D9 7A 06 F6 | 	mov	result1, #217
05c1c     94 03 90 FD | 	jmp	#LR__0462
05c20                 | LR__0347
05c20     73 7A 06 F6 | 	mov	result1, #115
05c24     8C 03 90 FD | 	jmp	#LR__0462
05c28                 | LR__0348
05c28     74 7A 06 F6 | 	mov	result1, #116
05c2c     84 03 90 FD | 	jmp	#LR__0462
05c30                 | LR__0349
05c30     6C 7A 06 F6 | 	mov	result1, #108
05c34     7C 03 90 FD | 	jmp	#LR__0462
05c38                 | LR__0350
05c38     6C 7A 06 F6 | 	mov	result1, #108
05c3c     74 03 90 FD | 	jmp	#LR__0462
05c40                 | LR__0351
05c40     89 7A 06 F6 | 	mov	result1, #137
05c44     6C 03 90 FD | 	jmp	#LR__0462
05c48                 | LR__0352
05c48     C2 7A 06 F6 | 	mov	result1, #194
05c4c     64 03 90 FD | 	jmp	#LR__0462
05c50                 | LR__0353
05c50     72 7A 06 F6 | 	mov	result1, #114
05c54     5C 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0354
05c58     5D 7A 06 F6 | 	mov	result1, #93
05c5c     54 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0355
05c60     96 7A 06 F6 | 	mov	result1, #150
05c64     4C 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0356
05c68     43 7A 06 F6 | 	mov	result1, #67
05c6c     44 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0357
05c70     43 7A 06 F6 | 	mov	result1, #67
05c74     3C 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0358
05c78     43 7A 06 F6 | 	mov	result1, #67
05c7c     34 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0359
05c80     5A 7A 06 F6 | 	mov	result1, #90
05c84     2C 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0360
05c88     AB 7A 06 F6 | 	mov	result1, #171
05c8c     24 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0361
05c90     BD 7A 06 F6 | 	mov	result1, #189
05c94     1C 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0362
05c98     BD 7A 06 F6 | 	mov	result1, #189
05c9c     14 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0363
05ca0     46 7A 06 F6 | 	mov	result1, #70
05ca4     0C 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0364
05ca8     46 7A 06 F6 | 	mov	result1, #70
05cac     04 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0365
05cb0     71 7A 06 F6 | 	mov	result1, #113
05cb4     FC 02 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0366
05cb8     71 7A 06 F6 | 	mov	result1, #113
05cbc     F4 02 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0367
05cc0     60 7A 06 F6 | 	mov	result1, #96
05cc4     EC 02 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0368
05cc8     4A 7A 06 F6 | 	mov	result1, #74
05ccc     E4 02 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0369
05cd0     4A 7A 06 F6 | 	mov	result1, #74
05cd4     DC 02 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0370
05cd8     48 7A 06 F6 | 	mov	result1, #72
05cdc     D4 02 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0371
05ce0     48 7A 06 F6 | 	mov	result1, #72
05ce4     CC 02 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0372
05ce8     BB 7A 06 F6 | 	mov	result1, #187
05cec     C4 02 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0373
05cf0     A9 7A 06 F6 | 	mov	result1, #169
05cf4     BC 02 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0374
05cf8     4E 7A 06 F6 | 	mov	result1, #78
05cfc     B4 02 90 FD | 	jmp	#LR__0462
05d00                 | LR__0375
05d00     4E 7A 06 F6 | 	mov	result1, #78
05d04     AC 02 90 FD | 	jmp	#LR__0462
05d08                 | LR__0376
05d08     58 7A 06 F6 | 	mov	result1, #88
05d0c     A4 02 90 FD | 	jmp	#LR__0462
05d10                 | LR__0377
05d10     5F 7A 06 F6 | 	mov	result1, #95
05d14     9C 02 90 FD | 	jmp	#LR__0462
05d18                 | LR__0378
05d18     5F 7A 06 F6 | 	mov	result1, #95
05d1c     94 02 90 FD | 	jmp	#LR__0462
05d20                 | LR__0379
05d20     B5 7A 06 F6 | 	mov	result1, #181
05d24     8C 02 90 FD | 	jmp	#LR__0462
05d28                 | LR__0380
05d28     4C 7A 06 F6 | 	mov	result1, #76
05d2c     84 02 90 FD | 	jmp	#LR__0462
05d30                 | LR__0381
05d30     4C 7A 06 F6 | 	mov	result1, #76
05d34     7C 02 90 FD | 	jmp	#LR__0462
05d38                 | LR__0382
05d38     52 7A 06 F6 | 	mov	result1, #82
05d3c     74 02 90 FD | 	jmp	#LR__0462
05d40                 | LR__0383
05d40     52 7A 06 F6 | 	mov	result1, #82
05d44     6C 02 90 FD | 	jmp	#LR__0462
05d48                 | LR__0384
05d48     97 7A 06 F6 | 	mov	result1, #151
05d4c     64 02 90 FD | 	jmp	#LR__0462
05d50                 | LR__0385
05d50     C6 7A 06 F6 | 	mov	result1, #198
05d54     5C 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0386
05d58     61 7A 06 F6 | 	mov	result1, #97
05d5c     54 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0387
05d60     61 7A 06 F6 | 	mov	result1, #97
05d64     4C 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0388
05d68     63 7A 06 F6 | 	mov	result1, #99
05d6c     44 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0389
05d70     41 7A 06 F6 | 	mov	result1, #65
05d74     3C 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0390
05d78     4B 7A 06 F6 | 	mov	result1, #75
05d7c     34 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0391
05d80     4B 7A 06 F6 | 	mov	result1, #75
05d84     2C 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0392
05d88     C1 7A 06 F6 | 	mov	result1, #193
05d8c     24 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0393
05d90     B3 7A 06 F6 | 	mov	result1, #179
05d94     1C 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0394
05d98     5E 7A 06 F6 | 	mov	result1, #94
05d9c     14 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0395
05da0     5E 7A 06 F6 | 	mov	result1, #94
05da4     0C 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0396
05da8     7C 7A 06 F6 | 	mov	result1, #124
05dac     04 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0397
05db0     7E 7A 06 F6 | 	mov	result1, #126
05db4     FC 01 90 FD | 	jmp	#LR__0462
05db8                 | LR__0398
05db8     7D 7A 06 F6 | 	mov	result1, #125
05dbc     F4 01 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0399
05dc0     7F 7A 06 F6 | 	mov	result1, #127
05dc4     EC 01 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0400
05dc8     80 7A 06 F6 | 	mov	result1, #128
05dcc     E4 01 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0401
05dd0     55 7A 06 F6 | 	mov	result1, #85
05dd4     DC 01 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0402
05dd8     75 7A 06 F6 | 	mov	result1, #117
05ddc     D4 01 90 FD | 	jmp	#LR__0462
05de0                 | LR__0403
05de0     75 7A 06 F6 | 	mov	result1, #117
05de4     CC 01 90 FD | 	jmp	#LR__0462
05de8                 | LR__0404
05de8     42 7A 06 F6 | 	mov	result1, #66
05dec     C4 01 90 FD | 	jmp	#LR__0462
05df0                 | LR__0405
05df0     42 7A 06 F6 | 	mov	result1, #66
05df4     BC 01 90 FD | 	jmp	#LR__0462
05df8                 | LR__0406
05df8     95 7A 06 F6 | 	mov	result1, #149
05dfc     B4 01 90 FD | 	jmp	#LR__0462
05e00                 | LR__0407
05e00     AC 7A 06 F6 | 	mov	result1, #172
05e04     AC 01 90 FD | 	jmp	#LR__0462
05e08                 | LR__0408
05e08     81 7A 06 F6 | 	mov	result1, #129
05e0c     A4 01 90 FD | 	jmp	#LR__0462
05e10                 | LR__0409
05e10     81 7A 06 F6 | 	mov	result1, #129
05e14     9C 01 90 FD | 	jmp	#LR__0462
05e18                 | LR__0410
05e18     44 7A 06 F6 | 	mov	result1, #68
05e1c     94 01 90 FD | 	jmp	#LR__0462
05e20                 | LR__0411
05e20     44 7A 06 F6 | 	mov	result1, #68
05e24     8C 01 90 FD | 	jmp	#LR__0462
05e28                 | LR__0412
05e28     BC 7A 06 F6 | 	mov	result1, #188
05e2c     84 01 90 FD | 	jmp	#LR__0462
05e30                 | LR__0413
05e30     88 7A 06 F6 | 	mov	result1, #136
05e34     7C 01 90 FD | 	jmp	#LR__0462
05e38                 | LR__0414
05e38     B6 7A 06 F6 | 	mov	result1, #182
05e3c     74 01 90 FD | 	jmp	#LR__0462
05e40                 | LR__0415
05e40     92 7A 06 F6 | 	mov	result1, #146
05e44     6C 01 90 FD | 	jmp	#LR__0462
05e48                 | LR__0416
05e48     BE 7A 06 F6 | 	mov	result1, #190
05e4c     64 01 90 FD | 	jmp	#LR__0462
05e50                 | LR__0417
05e50     BE 7A 06 F6 | 	mov	result1, #190
05e54     5C 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0418
05e58     C7 7A 06 F6 | 	mov	result1, #199
05e5c     54 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0419
05e60     D4 7A 06 F6 | 	mov	result1, #212
05e64     4C 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0420
05e68     D4 7A 06 F6 | 	mov	result1, #212
05e6c     44 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0421
05e70     AA 7A 06 F6 | 	mov	result1, #170
05e74     3C 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0422
05e78     4D 7A 06 F6 | 	mov	result1, #77
05e7c     34 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0423
05e80     4D 7A 06 F6 | 	mov	result1, #77
05e84     2C 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0424
05e88     51 7A 06 F6 | 	mov	result1, #81
05e8c     24 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0425
05e90     51 7A 06 F6 | 	mov	result1, #81
05e94     1C 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0426
05e98     D2 7A 06 F6 | 	mov	result1, #210
05e9c     14 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0427
05ea0     D2 7A 06 F6 | 	mov	result1, #210
05ea4     0C 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0428
05ea8     DA 7A 06 F6 | 	mov	result1, #218
05eac     04 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0429
05eb0     DA 7A 06 F6 | 	mov	result1, #218
05eb4     FC 00 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0430
05eb8     8E 7A 06 F6 | 	mov	result1, #142
05ebc     F4 00 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0431
05ec0     8E 7A 06 F6 | 	mov	result1, #142
05ec4     EC 00 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0432
05ec8     90 7A 06 F6 | 	mov	result1, #144
05ecc     E4 00 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0433
05ed0     90 7A 06 F6 | 	mov	result1, #144
05ed4     DC 00 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0434
05ed8     8D 7A 06 F6 | 	mov	result1, #141
05edc     D4 00 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0435
05ee0     8D 7A 06 F6 | 	mov	result1, #141
05ee4     CC 00 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0436
05ee8     8C 7A 06 F6 | 	mov	result1, #140
05eec     C4 00 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0437
05ef0     8C 7A 06 F6 | 	mov	result1, #140
05ef4     BC 00 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0438
05ef8     91 7A 06 F6 | 	mov	result1, #145
05efc     B4 00 90 FD | 	jmp	#LR__0462
05f00                 | LR__0439
05f00     91 7A 06 F6 | 	mov	result1, #145
05f04     AC 00 90 FD | 	jmp	#LR__0462
05f08                 | LR__0440
05f08     8B 7A 06 F6 | 	mov	result1, #139
05f0c     A4 00 90 FD | 	jmp	#LR__0462
05f10                 | LR__0441
05f10     8B 7A 06 F6 | 	mov	result1, #139
05f14     9C 00 90 FD | 	jmp	#LR__0462
05f18                 | LR__0442
05f18     8F 7A 06 F6 | 	mov	result1, #143
05f1c     94 00 90 FD | 	jmp	#LR__0462
05f20                 | LR__0443
05f20     8F 7A 06 F6 | 	mov	result1, #143
05f24     8C 00 90 FD | 	jmp	#LR__0462
05f28                 | LR__0444
05f28     8F 7A 06 F6 | 	mov	result1, #143
05f2c     84 00 90 FD | 	jmp	#LR__0462
05f30                 | LR__0445
05f30     B2 7A 06 F6 | 	mov	result1, #178
05f34     7C 00 90 FD | 	jmp	#LR__0462
05f38                 | LR__0446
05f38     B2 7A 06 F6 | 	mov	result1, #178
05f3c     74 00 90 FD | 	jmp	#LR__0462
05f40                 | LR__0447
05f40     75 7A 06 F6 | 	mov	result1, #117
05f44     6C 00 90 FD | 	jmp	#LR__0462
05f48                 | LR__0448
05f48     75 7A 06 F6 | 	mov	result1, #117
05f4c     64 00 90 FD | 	jmp	#LR__0462
05f50                 | LR__0449
05f50     6D 7A 06 F6 | 	mov	result1, #109
05f54     5C 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0450
05f58     6D 7A 06 F6 | 	mov	result1, #109
05f5c     54 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0451
05f60     5B 7A 06 F6 | 	mov	result1, #91
05f64     4C 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0452
05f68     56 7A 06 F6 | 	mov	result1, #86
05f6c     44 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0453
05f70     56 7A 06 F6 | 	mov	result1, #86
05f74     3C 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0454
05f78     70 7A 06 F6 | 	mov	result1, #112
05f7c     34 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0455
05f80     70 7A 06 F6 | 	mov	result1, #112
05f84     2C 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0456
05f88     57 7A 06 F6 | 	mov	result1, #87
05f8c     24 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0457
05f90     57 7A 06 F6 | 	mov	result1, #87
05f94     1C 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0458
05f98     79 7A 06 F6 | 	mov	result1, #121
05f9c     14 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0459
05fa0     77 7A 06 F6 | 	mov	result1, #119
05fa4     0C 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0460
05fa8     78 7A 06 F6 | 	mov	result1, #120
05fac     04 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0461
05fb0     00 7A 06 F6 | 	mov	result1, #0
05fb4                 | LR__0462
05fb4     E7 F0 03 F6 | 	mov	ptra, fp
05fb8     F2 00 A0 FD | 	call	#popregs_
05fbc                 | _iscommand_ret
05fbc     2D 00 64 FD | 	ret
05fc0                 | 
05fc0                 | ' 
05fc0                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05fc0                 | ' 
05fc0                 | ' function isfunction(s as string) as ubyte
05fc0                 | _isfunction
05fc0     01 CA 05 F6 | 	mov	COUNT_, #1
05fc4     E8 00 A0 FD | 	call	#pushregs_
05fc8                 | ' 
05fc8                 | ' select case s
05fc8     49 A7 02 F6 | 	mov	local01, arg01
05fcc     95 01 00 FF 
05fd0     1B 94 06 F6 | 	mov	arg02, ##@LR__5781
05fd4     53 93 02 F6 | 	mov	arg01, local01
05fd8     48 EA B1 FD | 	call	#__system___string_cmp
05fdc     00 7A 0E F2 | 	cmp	result1, #0 wz
05fe0     EC 05 90 AD |  if_e	jmp	#LR__0470
05fe4     95 01 00 FF 
05fe8     1F 94 06 F6 | 	mov	arg02, ##@LR__5782
05fec     53 93 02 F6 | 	mov	arg01, local01
05ff0     30 EA B1 FD | 	call	#__system___string_cmp
05ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ff8     DC 05 90 AD |  if_e	jmp	#LR__0471
05ffc     95 01 00 FF 
06000     24 94 06 F6 | 	mov	arg02, ##@LR__5783
06004     53 93 02 F6 | 	mov	arg01, local01
06008     18 EA B1 FD | 	call	#__system___string_cmp
0600c     00 7A 0E F2 | 	cmp	result1, #0 wz
06010     CC 05 90 AD |  if_e	jmp	#LR__0472
06014     95 01 00 FF 
06018     28 94 06 F6 | 	mov	arg02, ##@LR__5784
0601c     53 93 02 F6 | 	mov	arg01, local01
06020     00 EA B1 FD | 	call	#__system___string_cmp
06024     00 7A 0E F2 | 	cmp	result1, #0 wz
06028     BC 05 90 AD |  if_e	jmp	#LR__0473
0602c     95 01 00 FF 
06030     2D 94 06 F6 | 	mov	arg02, ##@LR__5785
06034     53 93 02 F6 | 	mov	arg01, local01
06038     E8 E9 B1 FD | 	call	#__system___string_cmp
0603c     00 7A 0E F2 | 	cmp	result1, #0 wz
06040     AC 05 90 AD |  if_e	jmp	#LR__0474
06044     95 01 00 FF 
06048     31 94 06 F6 | 	mov	arg02, ##@LR__5786
0604c     53 93 02 F6 | 	mov	arg01, local01
06050     D0 E9 B1 FD | 	call	#__system___string_cmp
06054     00 7A 0E F2 | 	cmp	result1, #0 wz
06058     9C 05 90 AD |  if_e	jmp	#LR__0475
0605c     95 01 00 FF 
06060     36 94 06 F6 | 	mov	arg02, ##@LR__5787
06064     53 93 02 F6 | 	mov	arg01, local01
06068     B8 E9 B1 FD | 	call	#__system___string_cmp
0606c     00 7A 0E F2 | 	cmp	result1, #0 wz
06070     8C 05 90 AD |  if_e	jmp	#LR__0476
06074     95 01 00 FF 
06078     3A 94 06 F6 | 	mov	arg02, ##@LR__5788
0607c     53 93 02 F6 | 	mov	arg01, local01
06080     A0 E9 B1 FD | 	call	#__system___string_cmp
06084     00 7A 0E F2 | 	cmp	result1, #0 wz
06088     7C 05 90 AD |  if_e	jmp	#LR__0477
0608c     95 01 00 FF 
06090     3F 94 06 F6 | 	mov	arg02, ##@LR__5789
06094     53 93 02 F6 | 	mov	arg01, local01
06098     88 E9 B1 FD | 	call	#__system___string_cmp
0609c     00 7A 0E F2 | 	cmp	result1, #0 wz
060a0     6C 05 90 AD |  if_e	jmp	#LR__0478
060a4     95 01 00 FF 
060a8     44 94 06 F6 | 	mov	arg02, ##@LR__5790
060ac     53 93 02 F6 | 	mov	arg01, local01
060b0     70 E9 B1 FD | 	call	#__system___string_cmp
060b4     00 7A 0E F2 | 	cmp	result1, #0 wz
060b8     5C 05 90 AD |  if_e	jmp	#LR__0479
060bc     95 01 00 FF 
060c0     4C 94 06 F6 | 	mov	arg02, ##@LR__5791
060c4     53 93 02 F6 | 	mov	arg01, local01
060c8     58 E9 B1 FD | 	call	#__system___string_cmp
060cc     00 7A 0E F2 | 	cmp	result1, #0 wz
060d0     4C 05 90 AD |  if_e	jmp	#LR__0480
060d4     95 01 00 FF 
060d8     50 94 06 F6 | 	mov	arg02, ##@LR__5792
060dc     53 93 02 F6 | 	mov	arg01, local01
060e0     40 E9 B1 FD | 	call	#__system___string_cmp
060e4     00 7A 0E F2 | 	cmp	result1, #0 wz
060e8     3C 05 90 AD |  if_e	jmp	#LR__0481
060ec     95 01 00 FF 
060f0     56 94 06 F6 | 	mov	arg02, ##@LR__5793
060f4     53 93 02 F6 | 	mov	arg01, local01
060f8     28 E9 B1 FD | 	call	#__system___string_cmp
060fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06100     2C 05 90 AD |  if_e	jmp	#LR__0482
06104     95 01 00 FF 
06108     60 94 06 F6 | 	mov	arg02, ##@LR__5794
0610c     53 93 02 F6 | 	mov	arg01, local01
06110     10 E9 B1 FD | 	call	#__system___string_cmp
06114     00 7A 0E F2 | 	cmp	result1, #0 wz
06118     1C 05 90 AD |  if_e	jmp	#LR__0483
0611c     95 01 00 FF 
06120     69 94 06 F6 | 	mov	arg02, ##@LR__5795
06124     53 93 02 F6 | 	mov	arg01, local01
06128     F8 E8 B1 FD | 	call	#__system___string_cmp
0612c     00 7A 0E F2 | 	cmp	result1, #0 wz
06130     0C 05 90 AD |  if_e	jmp	#LR__0484
06134     95 01 00 FF 
06138     72 94 06 F6 | 	mov	arg02, ##@LR__5796
0613c     53 93 02 F6 | 	mov	arg01, local01
06140     E0 E8 B1 FD | 	call	#__system___string_cmp
06144     00 7A 0E F2 | 	cmp	result1, #0 wz
06148     FC 04 90 AD |  if_e	jmp	#LR__0485
0614c     95 01 00 FF 
06150     76 94 06 F6 | 	mov	arg02, ##@LR__5797
06154     53 93 02 F6 | 	mov	arg01, local01
06158     C8 E8 B1 FD | 	call	#__system___string_cmp
0615c     00 7A 0E F2 | 	cmp	result1, #0 wz
06160     EC 04 90 AD |  if_e	jmp	#LR__0486
06164     95 01 00 FF 
06168     7A 94 06 F6 | 	mov	arg02, ##@LR__5798
0616c     53 93 02 F6 | 	mov	arg01, local01
06170     B0 E8 B1 FD | 	call	#__system___string_cmp
06174     00 7A 0E F2 | 	cmp	result1, #0 wz
06178     DC 04 90 AD |  if_e	jmp	#LR__0487
0617c     95 01 00 FF 
06180     7E 94 06 F6 | 	mov	arg02, ##@LR__5799
06184     53 93 02 F6 | 	mov	arg01, local01
06188     98 E8 B1 FD | 	call	#__system___string_cmp
0618c     00 7A 0E F2 | 	cmp	result1, #0 wz
06190     CC 04 90 AD |  if_e	jmp	#LR__0488
06194     95 01 00 FF 
06198     87 94 06 F6 | 	mov	arg02, ##@LR__5800
0619c     53 93 02 F6 | 	mov	arg01, local01
061a0     80 E8 B1 FD | 	call	#__system___string_cmp
061a4     00 7A 0E F2 | 	cmp	result1, #0 wz
061a8     BC 04 90 AD |  if_e	jmp	#LR__0489
061ac     95 01 00 FF 
061b0     90 94 06 F6 | 	mov	arg02, ##@LR__5801
061b4     53 93 02 F6 | 	mov	arg01, local01
061b8     68 E8 B1 FD | 	call	#__system___string_cmp
061bc     00 7A 0E F2 | 	cmp	result1, #0 wz
061c0     AC 04 90 AD |  if_e	jmp	#LR__0490
061c4     95 01 00 FF 
061c8     94 94 06 F6 | 	mov	arg02, ##@LR__5802
061cc     53 93 02 F6 | 	mov	arg01, local01
061d0     50 E8 B1 FD | 	call	#__system___string_cmp
061d4     00 7A 0E F2 | 	cmp	result1, #0 wz
061d8     9C 04 90 AD |  if_e	jmp	#LR__0491
061dc     95 01 00 FF 
061e0     A2 94 06 F6 | 	mov	arg02, ##@LR__5803
061e4     53 93 02 F6 | 	mov	arg01, local01
061e8     38 E8 B1 FD | 	call	#__system___string_cmp
061ec     00 7A 0E F2 | 	cmp	result1, #0 wz
061f0     8C 04 90 AD |  if_e	jmp	#LR__0492
061f4     95 01 00 FF 
061f8     AF 94 06 F6 | 	mov	arg02, ##@LR__5804
061fc     53 93 02 F6 | 	mov	arg01, local01
06200     20 E8 B1 FD | 	call	#__system___string_cmp
06204     00 7A 0E F2 | 	cmp	result1, #0 wz
06208     7C 04 90 AD |  if_e	jmp	#LR__0493
0620c     95 01 00 FF 
06210     BB 94 06 F6 | 	mov	arg02, ##@LR__5805
06214     53 93 02 F6 | 	mov	arg01, local01
06218     08 E8 B1 FD | 	call	#__system___string_cmp
0621c     00 7A 0E F2 | 	cmp	result1, #0 wz
06220     6C 04 90 AD |  if_e	jmp	#LR__0494
06224     95 01 00 FF 
06228     C3 94 06 F6 | 	mov	arg02, ##@LR__5806
0622c     53 93 02 F6 | 	mov	arg01, local01
06230     F0 E7 B1 FD | 	call	#__system___string_cmp
06234     00 7A 0E F2 | 	cmp	result1, #0 wz
06238     5C 04 90 AD |  if_e	jmp	#LR__0495
0623c     95 01 00 FF 
06240     C7 94 06 F6 | 	mov	arg02, ##@LR__5807
06244     53 93 02 F6 | 	mov	arg01, local01
06248     D8 E7 B1 FD | 	call	#__system___string_cmp
0624c     00 7A 0E F2 | 	cmp	result1, #0 wz
06250     4C 04 90 AD |  if_e	jmp	#LR__0496
06254     95 01 00 FF 
06258     CC 94 06 F6 | 	mov	arg02, ##@LR__5808
0625c     53 93 02 F6 | 	mov	arg01, local01
06260     C0 E7 B1 FD | 	call	#__system___string_cmp
06264     00 7A 0E F2 | 	cmp	result1, #0 wz
06268     3C 04 90 AD |  if_e	jmp	#LR__0497
0626c     95 01 00 FF 
06270     D3 94 06 F6 | 	mov	arg02, ##@LR__5809
06274     53 93 02 F6 | 	mov	arg01, local01
06278     A8 E7 B1 FD | 	call	#__system___string_cmp
0627c     00 7A 0E F2 | 	cmp	result1, #0 wz
06280     2C 04 90 AD |  if_e	jmp	#LR__0498
06284     95 01 00 FF 
06288     D7 94 06 F6 | 	mov	arg02, ##@LR__5810
0628c     53 93 02 F6 | 	mov	arg01, local01
06290     90 E7 B1 FD | 	call	#__system___string_cmp
06294     00 7A 0E F2 | 	cmp	result1, #0 wz
06298     1C 04 90 AD |  if_e	jmp	#LR__0499
0629c     95 01 00 FF 
062a0     DD 94 06 F6 | 	mov	arg02, ##@LR__5811
062a4     53 93 02 F6 | 	mov	arg01, local01
062a8     78 E7 B1 FD | 	call	#__system___string_cmp
062ac     00 7A 0E F2 | 	cmp	result1, #0 wz
062b0     0C 04 90 AD |  if_e	jmp	#LR__0500
062b4     95 01 00 FF 
062b8     E1 94 06 F6 | 	mov	arg02, ##@LR__5812
062bc     53 93 02 F6 | 	mov	arg01, local01
062c0     60 E7 B1 FD | 	call	#__system___string_cmp
062c4     00 7A 0E F2 | 	cmp	result1, #0 wz
062c8     FC 03 90 AD |  if_e	jmp	#LR__0501
062cc     95 01 00 FF 
062d0     E5 94 06 F6 | 	mov	arg02, ##@LR__5813
062d4     53 93 02 F6 | 	mov	arg01, local01
062d8     48 E7 B1 FD | 	call	#__system___string_cmp
062dc     00 7A 0E F2 | 	cmp	result1, #0 wz
062e0     EC 03 90 AD |  if_e	jmp	#LR__0502
062e4     95 01 00 FF 
062e8     EB 94 06 F6 | 	mov	arg02, ##@LR__5814
062ec     53 93 02 F6 | 	mov	arg01, local01
062f0     30 E7 B1 FD | 	call	#__system___string_cmp
062f4     00 7A 0E F2 | 	cmp	result1, #0 wz
062f8     DC 03 90 AD |  if_e	jmp	#LR__0503
062fc     95 01 00 FF 
06300     F2 94 06 F6 | 	mov	arg02, ##@LR__5815
06304     53 93 02 F6 | 	mov	arg01, local01
06308     18 E7 B1 FD | 	call	#__system___string_cmp
0630c     00 7A 0E F2 | 	cmp	result1, #0 wz
06310     CC 03 90 AD |  if_e	jmp	#LR__0504
06314     95 01 00 FF 
06318     F8 94 06 F6 | 	mov	arg02, ##@LR__5816
0631c     53 93 02 F6 | 	mov	arg01, local01
06320     00 E7 B1 FD | 	call	#__system___string_cmp
06324     00 7A 0E F2 | 	cmp	result1, #0 wz
06328     BC 03 90 AD |  if_e	jmp	#LR__0505
0632c     95 01 00 FF 
06330     FD 94 06 F6 | 	mov	arg02, ##@LR__5817
06334     53 93 02 F6 | 	mov	arg01, local01
06338     E8 E6 B1 FD | 	call	#__system___string_cmp
0633c     00 7A 0E F2 | 	cmp	result1, #0 wz
06340     AC 03 90 AD |  if_e	jmp	#LR__0506
06344     95 01 00 FF 
06348     04 95 06 F6 | 	mov	arg02, ##@LR__5818
0634c     53 93 02 F6 | 	mov	arg01, local01
06350     D0 E6 B1 FD | 	call	#__system___string_cmp
06354     00 7A 0E F2 | 	cmp	result1, #0 wz
06358     9C 03 90 AD |  if_e	jmp	#LR__0507
0635c     95 01 00 FF 
06360     0B 95 06 F6 | 	mov	arg02, ##@LR__5819
06364     53 93 02 F6 | 	mov	arg01, local01
06368     B8 E6 B1 FD | 	call	#__system___string_cmp
0636c     00 7A 0E F2 | 	cmp	result1, #0 wz
06370     8C 03 90 AD |  if_e	jmp	#LR__0508
06374     95 01 00 FF 
06378     12 95 06 F6 | 	mov	arg02, ##@LR__5820
0637c     53 93 02 F6 | 	mov	arg01, local01
06380     A0 E6 B1 FD | 	call	#__system___string_cmp
06384     00 7A 0E F2 | 	cmp	result1, #0 wz
06388     7C 03 90 AD |  if_e	jmp	#LR__0509
0638c     95 01 00 FF 
06390     19 95 06 F6 | 	mov	arg02, ##@LR__5821
06394     53 93 02 F6 | 	mov	arg01, local01
06398     88 E6 B1 FD | 	call	#__system___string_cmp
0639c     00 7A 0E F2 | 	cmp	result1, #0 wz
063a0     6C 03 90 AD |  if_e	jmp	#LR__0510
063a4     95 01 00 FF 
063a8     1E 95 06 F6 | 	mov	arg02, ##@LR__5822
063ac     53 93 02 F6 | 	mov	arg01, local01
063b0     70 E6 B1 FD | 	call	#__system___string_cmp
063b4     00 7A 0E F2 | 	cmp	result1, #0 wz
063b8     5C 03 90 AD |  if_e	jmp	#LR__0511
063bc     95 01 00 FF 
063c0     23 95 06 F6 | 	mov	arg02, ##@LR__5823
063c4     53 93 02 F6 | 	mov	arg01, local01
063c8     58 E6 B1 FD | 	call	#__system___string_cmp
063cc     00 7A 0E F2 | 	cmp	result1, #0 wz
063d0     4C 03 90 AD |  if_e	jmp	#LR__0512
063d4     95 01 00 FF 
063d8     28 95 06 F6 | 	mov	arg02, ##@LR__5824
063dc     53 93 02 F6 | 	mov	arg01, local01
063e0     40 E6 B1 FD | 	call	#__system___string_cmp
063e4     00 7A 0E F2 | 	cmp	result1, #0 wz
063e8     3C 03 90 AD |  if_e	jmp	#LR__0513
063ec     95 01 00 FF 
063f0     2D 95 06 F6 | 	mov	arg02, ##@LR__5825
063f4     53 93 02 F6 | 	mov	arg01, local01
063f8     28 E6 B1 FD | 	call	#__system___string_cmp
063fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06400     2C 03 90 AD |  if_e	jmp	#LR__0514
06404     95 01 00 FF 
06408     32 95 06 F6 | 	mov	arg02, ##@LR__5826
0640c     53 93 02 F6 | 	mov	arg01, local01
06410     10 E6 B1 FD | 	call	#__system___string_cmp
06414     00 7A 0E F2 | 	cmp	result1, #0 wz
06418     1C 03 90 AD |  if_e	jmp	#LR__0515
0641c     95 01 00 FF 
06420     38 95 06 F6 | 	mov	arg02, ##@LR__5827
06424     53 93 02 F6 | 	mov	arg01, local01
06428     F8 E5 B1 FD | 	call	#__system___string_cmp
0642c     00 7A 0E F2 | 	cmp	result1, #0 wz
06430     0C 03 90 AD |  if_e	jmp	#LR__0516
06434     95 01 00 FF 
06438     3E 95 06 F6 | 	mov	arg02, ##@LR__5828
0643c     53 93 02 F6 | 	mov	arg01, local01
06440     E0 E5 B1 FD | 	call	#__system___string_cmp
06444     00 7A 0E F2 | 	cmp	result1, #0 wz
06448     FC 02 90 AD |  if_e	jmp	#LR__0517
0644c     95 01 00 FF 
06450     44 95 06 F6 | 	mov	arg02, ##@LR__5829
06454     53 93 02 F6 | 	mov	arg01, local01
06458     C8 E5 B1 FD | 	call	#__system___string_cmp
0645c     00 7A 0E F2 | 	cmp	result1, #0 wz
06460     EC 02 90 AD |  if_e	jmp	#LR__0518
06464     95 01 00 FF 
06468     49 95 06 F6 | 	mov	arg02, ##@LR__5830
0646c     53 93 02 F6 | 	mov	arg01, local01
06470     B0 E5 B1 FD | 	call	#__system___string_cmp
06474     00 7A 0E F2 | 	cmp	result1, #0 wz
06478     DC 02 90 AD |  if_e	jmp	#LR__0519
0647c     95 01 00 FF 
06480     4E 95 06 F6 | 	mov	arg02, ##@LR__5831
06484     53 93 02 F6 | 	mov	arg01, local01
06488     98 E5 B1 FD | 	call	#__system___string_cmp
0648c     00 7A 0E F2 | 	cmp	result1, #0 wz
06490     CC 02 90 AD |  if_e	jmp	#LR__0520
06494     95 01 00 FF 
06498     56 95 06 F6 | 	mov	arg02, ##@LR__5832
0649c     53 93 02 F6 | 	mov	arg01, local01
064a0     80 E5 B1 FD | 	call	#__system___string_cmp
064a4     00 7A 0E F2 | 	cmp	result1, #0 wz
064a8     BC 02 90 AD |  if_e	jmp	#LR__0521
064ac     95 01 00 FF 
064b0     5C 95 06 F6 | 	mov	arg02, ##@LR__5833
064b4     53 93 02 F6 | 	mov	arg01, local01
064b8     68 E5 B1 FD | 	call	#__system___string_cmp
064bc     00 7A 0E F2 | 	cmp	result1, #0 wz
064c0     AC 02 90 AD |  if_e	jmp	#LR__0522
064c4     95 01 00 FF 
064c8     63 95 06 F6 | 	mov	arg02, ##@LR__5834
064cc     53 93 02 F6 | 	mov	arg01, local01
064d0     50 E5 B1 FD | 	call	#__system___string_cmp
064d4     00 7A 0E F2 | 	cmp	result1, #0 wz
064d8     9C 02 90 AD |  if_e	jmp	#LR__0523
064dc     95 01 00 FF 
064e0     69 95 06 F6 | 	mov	arg02, ##@LR__5835
064e4     53 93 02 F6 | 	mov	arg01, local01
064e8     38 E5 B1 FD | 	call	#__system___string_cmp
064ec     00 7A 0E F2 | 	cmp	result1, #0 wz
064f0     8C 02 90 AD |  if_e	jmp	#LR__0524
064f4     95 01 00 FF 
064f8     6F 95 06 F6 | 	mov	arg02, ##@LR__5836
064fc     53 93 02 F6 | 	mov	arg01, local01
06500     20 E5 B1 FD | 	call	#__system___string_cmp
06504     00 7A 0E F2 | 	cmp	result1, #0 wz
06508     7C 02 90 AD |  if_e	jmp	#LR__0525
0650c     95 01 00 FF 
06510     73 95 06 F6 | 	mov	arg02, ##@LR__5837
06514     53 93 02 F6 | 	mov	arg01, local01
06518     08 E5 B1 FD | 	call	#__system___string_cmp
0651c     00 7A 0E F2 | 	cmp	result1, #0 wz
06520     6C 02 90 AD |  if_e	jmp	#LR__0526
06524     95 01 00 FF 
06528     77 95 06 F6 | 	mov	arg02, ##@LR__5838
0652c     53 93 02 F6 | 	mov	arg01, local01
06530     F0 E4 B1 FD | 	call	#__system___string_cmp
06534     00 7A 0E F2 | 	cmp	result1, #0 wz
06538     5C 02 90 AD |  if_e	jmp	#LR__0527
0653c     95 01 00 FF 
06540     7B 95 06 F6 | 	mov	arg02, ##@LR__5839
06544     53 93 02 F6 | 	mov	arg01, local01
06548     D8 E4 B1 FD | 	call	#__system___string_cmp
0654c     00 7A 0E F2 | 	cmp	result1, #0 wz
06550     4C 02 90 AD |  if_e	jmp	#LR__0528
06554     95 01 00 FF 
06558     81 95 06 F6 | 	mov	arg02, ##@LR__5840
0655c     53 93 02 F6 | 	mov	arg01, local01
06560     C0 E4 B1 FD | 	call	#__system___string_cmp
06564     00 7A 0E F2 | 	cmp	result1, #0 wz
06568     3C 02 90 AD |  if_e	jmp	#LR__0529
0656c     95 01 00 FF 
06570     87 95 06 F6 | 	mov	arg02, ##@LR__5841
06574     53 93 02 F6 | 	mov	arg01, local01
06578     A8 E4 B1 FD | 	call	#__system___string_cmp
0657c     00 7A 0E F2 | 	cmp	result1, #0 wz
06580     2C 02 90 AD |  if_e	jmp	#LR__0530
06584     95 01 00 FF 
06588     8C 95 06 F6 | 	mov	arg02, ##@LR__5842
0658c     53 93 02 F6 | 	mov	arg01, local01
06590     90 E4 B1 FD | 	call	#__system___string_cmp
06594     00 7A 0E F2 | 	cmp	result1, #0 wz
06598     1C 02 90 AD |  if_e	jmp	#LR__0531
0659c     95 01 00 FF 
065a0     90 95 06 F6 | 	mov	arg02, ##@LR__5843
065a4     53 93 02 F6 | 	mov	arg01, local01
065a8     78 E4 B1 FD | 	call	#__system___string_cmp
065ac     00 7A 0E F2 | 	cmp	result1, #0 wz
065b0     0C 02 90 AD |  if_e	jmp	#LR__0532
065b4     95 01 00 FF 
065b8     94 95 06 F6 | 	mov	arg02, ##@LR__5844
065bc     53 93 02 F6 | 	mov	arg01, local01
065c0     60 E4 B1 FD | 	call	#__system___string_cmp
065c4     00 7A 0E F2 | 	cmp	result1, #0 wz
065c8     FC 01 90 AD |  if_e	jmp	#LR__0533
065cc     00 02 90 FD | 	jmp	#LR__0534
065d0                 | LR__0470
065d0     9E 7A 06 F6 | 	mov	result1, #158
065d4     FC 01 90 FD | 	jmp	#LR__0535
065d8                 | LR__0471
065d8     85 7A 06 F6 | 	mov	result1, #133
065dc     F4 01 90 FD | 	jmp	#LR__0535
065e0                 | LR__0472
065e0     9B 7A 06 F6 | 	mov	result1, #155
065e4     EC 01 90 FD | 	jmp	#LR__0535
065e8                 | LR__0473
065e8     9B 7A 06 F6 | 	mov	result1, #155
065ec     E4 01 90 FD | 	jmp	#LR__0535
065f0                 | LR__0474
065f0     A7 7A 06 F6 | 	mov	result1, #167
065f4     DC 01 90 FD | 	jmp	#LR__0535
065f8                 | LR__0475
065f8     84 7A 06 F6 | 	mov	result1, #132
065fc     D4 01 90 FD | 	jmp	#LR__0535
06600                 | LR__0476
06600     86 7A 06 F6 | 	mov	result1, #134
06604     CC 01 90 FD | 	jmp	#LR__0535
06608                 | LR__0477
06608     A2 7A 06 F6 | 	mov	result1, #162
0660c     C4 01 90 FD | 	jmp	#LR__0535
06610                 | LR__0478
06610     9F 7A 06 F6 | 	mov	result1, #159
06614     BC 01 90 FD | 	jmp	#LR__0535
06618                 | LR__0479
06618     C0 7A 06 F6 | 	mov	result1, #192
0661c     B4 01 90 FD | 	jmp	#LR__0535
06620                 | LR__0480
06620     82 7A 06 F6 | 	mov	result1, #130
06624     AC 01 90 FD | 	jmp	#LR__0535
06628                 | LR__0481
06628     99 7A 06 F6 | 	mov	result1, #153
0662c     A4 01 90 FD | 	jmp	#LR__0535
06630                 | LR__0482
06630     D7 7A 06 F6 | 	mov	result1, #215
06634     9C 01 90 FD | 	jmp	#LR__0535
06638                 | LR__0483
06638     D8 7A 06 F6 | 	mov	result1, #216
0663c     94 01 90 FD | 	jmp	#LR__0535
06640                 | LR__0484
06640     C5 7A 06 F6 | 	mov	result1, #197
06644     8C 01 90 FD | 	jmp	#LR__0535
06648                 | LR__0485
06648     C5 7A 06 F6 | 	mov	result1, #197
0664c     84 01 90 FD | 	jmp	#LR__0535
06650                 | LR__0486
06650     9C 7A 06 F6 | 	mov	result1, #156
06654     7C 01 90 FD | 	jmp	#LR__0535
06658                 | LR__0487
06658     D3 7A 06 F6 | 	mov	result1, #211
0665c     74 01 90 FD | 	jmp	#LR__0535
06660                 | LR__0488
06660     D3 7A 06 F6 | 	mov	result1, #211
06664     6C 01 90 FD | 	jmp	#LR__0535
06668                 | LR__0489
06668     6F 7A 06 F6 | 	mov	result1, #111
0666c     64 01 90 FD | 	jmp	#LR__0535
06670                 | LR__0490
06670     6F 7A 06 F6 | 	mov	result1, #111
06674     5C 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0491
06678     93 7A 06 F6 | 	mov	result1, #147
0667c     54 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0492
06680     94 7A 06 F6 | 	mov	result1, #148
06684     4C 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0493
06688     DB 7A 06 F6 | 	mov	result1, #219
0668c     44 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0494
06690     62 7A 06 F6 | 	mov	result1, #98
06694     3C 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0495
06698     62 7A 06 F6 | 	mov	result1, #98
0669c     34 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0496
066a0     A3 7A 06 F6 | 	mov	result1, #163
066a4     2C 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0497
066a8     9D 7A 06 F6 | 	mov	result1, #157
066ac     24 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0498
066b0     8A 7A 06 F6 | 	mov	result1, #138
066b4     1C 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0499
066b8     A4 7A 06 F6 | 	mov	result1, #164
066bc     14 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0500
066c0     A8 7A 06 F6 | 	mov	result1, #168
066c4     0C 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0501
066c8     AD 7A 06 F6 | 	mov	result1, #173
066cc     04 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0502
066d0     9A 7A 06 F6 | 	mov	result1, #154
066d4     FC 00 90 FD | 	jmp	#LR__0535
066d8                 | LR__0503
066d8     D1 7A 06 F6 | 	mov	result1, #209
066dc     F4 00 90 FD | 	jmp	#LR__0535
066e0                 | LR__0504
066e0     D0 7A 06 F6 | 	mov	result1, #208
066e4     EC 00 90 FD | 	jmp	#LR__0535
066e8                 | LR__0505
066e8     A6 7A 06 F6 | 	mov	result1, #166
066ec     E4 00 90 FD | 	jmp	#LR__0535
066f0                 | LR__0506
066f0     66 7A 06 F6 | 	mov	result1, #102
066f4     DC 00 90 FD | 	jmp	#LR__0535
066f8                 | LR__0507
066f8     67 7A 06 F6 | 	mov	result1, #103
066fc     D4 00 90 FD | 	jmp	#LR__0535
06700                 | LR__0508
06700     64 7A 06 F6 | 	mov	result1, #100
06704     CC 00 90 FD | 	jmp	#LR__0535
06708                 | LR__0509
06708     65 7A 06 F6 | 	mov	result1, #101
0670c     C4 00 90 FD | 	jmp	#LR__0535
06710                 | LR__0510
06710     D5 7A 06 F6 | 	mov	result1, #213
06714     BC 00 90 FD | 	jmp	#LR__0535
06718                 | LR__0511
06718     D6 7A 06 F6 | 	mov	result1, #214
0671c     B4 00 90 FD | 	jmp	#LR__0535
06720                 | LR__0512
06720     C8 7A 06 F6 | 	mov	result1, #200
06724     AC 00 90 FD | 	jmp	#LR__0535
06728                 | LR__0513
06728     C9 7A 06 F6 | 	mov	result1, #201
0672c     A4 00 90 FD | 	jmp	#LR__0535
06730                 | LR__0514
06730     CA 7A 06 F6 | 	mov	result1, #202
06734     9C 00 90 FD | 	jmp	#LR__0535
06738                 | LR__0515
06738     CC 7A 06 F6 | 	mov	result1, #204
0673c     94 00 90 FD | 	jmp	#LR__0535
06740                 | LR__0516
06740     CD 7A 06 F6 | 	mov	result1, #205
06744     8C 00 90 FD | 	jmp	#LR__0535
06748                 | LR__0517
06748     CE 7A 06 F6 | 	mov	result1, #206
0674c     84 00 90 FD | 	jmp	#LR__0535
06750                 | LR__0518
06750     CB 7A 06 F6 | 	mov	result1, #203
06754     7C 00 90 FD | 	jmp	#LR__0535
06758                 | LR__0519
06758     98 7A 06 F6 | 	mov	result1, #152
0675c     74 00 90 FD | 	jmp	#LR__0535
06760                 | LR__0520
06760     7B 7A 06 F6 | 	mov	result1, #123
06764     6C 00 90 FD | 	jmp	#LR__0535
06768                 | LR__0521
06768     76 7A 06 F6 | 	mov	result1, #118
0676c     64 00 90 FD | 	jmp	#LR__0535
06770                 | LR__0522
06770     A5 7A 06 F6 | 	mov	result1, #165
06774     5C 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0523
06778     7A 7A 06 F6 | 	mov	result1, #122
0677c     54 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0524
06780     BF 7A 06 F6 | 	mov	result1, #191
06784     4C 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0525
06788     54 7A 06 F6 | 	mov	result1, #84
0678c     44 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0526
06790     6B 7A 06 F6 | 	mov	result1, #107
06794     3C 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0527
06798     87 7A 06 F6 | 	mov	result1, #135
0679c     34 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0528
067a0     6A 7A 06 F6 | 	mov	result1, #106
067a4     2C 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0529
067a8     6E 7A 06 F6 | 	mov	result1, #110
067ac     24 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0530
067b0     A1 7A 06 F6 | 	mov	result1, #161
067b4     1C 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0531
067b8     83 7A 06 F6 | 	mov	result1, #131
067bc     14 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0532
067c0     A0 7A 06 F6 | 	mov	result1, #160
067c4     0C 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0533
067c8     9B 7A 06 F6 | 	mov	result1, #155
067cc     04 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0534
067d0     00 7A 06 F6 | 	mov	result1, #0
067d4                 | LR__0535
067d4     E7 F0 03 F6 | 	mov	ptra, fp
067d8     F2 00 A0 FD | 	call	#popregs_
067dc                 | _isfunction_ret
067dc     2D 00 64 FD | 	ret
067e0                 | 
067e0                 | ' 
067e0                 | ' ' Check if the part is a name
067e0                 | ' 
067e0                 | ' function isname(s as string) as boolean
067e0                 | _isname
067e0     0D CA 05 F6 | 	mov	COUNT_, #13
067e4     E8 00 A0 FD | 	call	#pushregs_
067e8     49 A7 02 F6 | 	mov	local01, arg01
067ec     49 A9 02 F6 | 	mov	local02, arg01
067f0     D7 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067f4                 | LR__0540
067f4     54 7B CA FA | 	rdbyte	result1, local02 wz
067f8     01 A8 06 51 |  if_ne	add	local02, #1
067fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06800                 | LR__0541
06800     49 A9 82 F1 | 	sub	local02, arg01
06804     54 7B 02 F6 | 	mov	result1, local02
06808     3D AB 0A F6 | 	mov	local03, result1 wz
0680c     00 7A 06 A6 |  if_e	mov	result1, #0
06810     34 02 90 AD |  if_e	jmp	#LR__0553
06814     53 93 02 F6 | 	mov	arg01, local01
06818     01 94 06 F6 | 	mov	arg02, #1
0681c     01 96 06 F6 | 	mov	arg03, #1
06820     98 FB B1 FD | 	call	#__system__Mid_S
06824     3D AD 02 F6 | 	mov	local04, result1
06828                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06828     95 01 00 FF 
0682c     9B 95 06 F6 | 	mov	arg02, ##@LR__5845
06830     56 93 02 F6 | 	mov	arg01, local04
06834     EC E1 B1 FD | 	call	#__system___string_cmp
06838     00 7A 56 F2 | 	cmps	result1, #0 wc
0683c     18 00 90 CD |  if_b	jmp	#LR__0542
06840     95 01 00 FF 
06844     9D 95 06 F6 | 	mov	arg02, ##@LR__5846
06848     56 93 02 F6 | 	mov	arg01, local04
0684c     D4 E1 B1 FD | 	call	#__system___string_cmp
06850     01 7A 56 F2 | 	cmps	result1, #1 wc
06854     1C 00 90 CD |  if_b	jmp	#LR__0543
06858                 | LR__0542
06858     95 01 00 FF 
0685c     9F 95 06 F6 | 	mov	arg02, ##@LR__5847
06860     56 93 02 F6 | 	mov	arg01, local04
06864     BC E1 B1 FD | 	call	#__system___string_cmp
06868     00 7A 0E F2 | 	cmp	result1, #0 wz
0686c     00 7A 06 56 |  if_ne	mov	result1, #0
06870     D4 01 90 5D |  if_ne	jmp	#LR__0553
06874                 | LR__0543
06874                 | ' if l>2 then 
06874     03 AA 56 F2 | 	cmps	local03, #3 wc
06878     C8 01 90 CD |  if_b	jmp	#LR__0552
0687c                 | '   for i=2 to l
0687c     02 AE 06 F6 | 	mov	local05, #2
06880     55 B1 02 F6 | 	mov	local06, local03
06884     01 B0 06 F1 | 	add	local06, #1
06888                 | LR__0544
06888     58 AF 52 F2 | 	cmps	local05, local06 wc
0688c     B4 01 90 3D |  if_ae	jmp	#LR__0551
06890     53 93 02 F6 | 	mov	arg01, local01
06894     57 95 02 F6 | 	mov	arg02, local05
06898     01 96 06 F6 | 	mov	arg03, #1
0689c     1C FB B1 FD | 	call	#__system__Mid_S
068a0     3D AD 02 F6 | 	mov	local04, result1
068a4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068a4     55 AF 52 F2 | 	cmps	local05, local03 wc
068a8     9C 00 90 3D |  if_ae	jmp	#LR__0547
068ac     95 01 00 FF 
068b0     A1 95 06 F6 | 	mov	arg02, ##@LR__5848
068b4     56 93 02 F6 | 	mov	arg01, local04
068b8     68 E1 B1 FD | 	call	#__system___string_cmp
068bc     00 7A 56 F2 | 	cmps	result1, #0 wc
068c0     18 00 90 CD |  if_b	jmp	#LR__0545
068c4     95 01 00 FF 
068c8     A3 95 06 F6 | 	mov	arg02, ##@LR__5849
068cc     56 93 02 F6 | 	mov	arg01, local04
068d0     50 E1 B1 FD | 	call	#__system___string_cmp
068d4     01 7A 56 F2 | 	cmps	result1, #1 wc
068d8     6C 00 90 CD |  if_b	jmp	#LR__0547
068dc                 | LR__0545
068dc     95 01 00 FF 
068e0     A5 95 06 F6 | 	mov	arg02, ##@LR__5850
068e4     56 93 02 F6 | 	mov	arg01, local04
068e8     38 E1 B1 FD | 	call	#__system___string_cmp
068ec     00 7A 56 F2 | 	cmps	result1, #0 wc
068f0     18 00 90 CD |  if_b	jmp	#LR__0546
068f4     95 01 00 FF 
068f8     A7 95 06 F6 | 	mov	arg02, ##@LR__5851
068fc     56 93 02 F6 | 	mov	arg01, local04
06900     20 E1 B1 FD | 	call	#__system___string_cmp
06904     01 7A 56 F2 | 	cmps	result1, #1 wc
06908     3C 00 90 CD |  if_b	jmp	#LR__0547
0690c                 | LR__0546
0690c     95 01 00 FF 
06910     A9 B3 06 F6 | 	mov	local07, ##@LR__5852
06914     56 93 02 F6 | 	mov	arg01, local04
06918     59 95 02 F6 | 	mov	arg02, local07
0691c     04 E1 B1 FD | 	call	#__system___string_cmp
06920     00 7A 0E F2 | 	cmp	result1, #0 wz
06924     20 00 90 AD |  if_e	jmp	#LR__0547
06928     95 01 00 FF 
0692c     AB B5 06 F6 | 	mov	local08, ##@LR__5853
06930     56 93 02 F6 | 	mov	arg01, local04
06934     5A 95 02 F6 | 	mov	arg02, local08
06938     E8 E0 B1 FD | 	call	#__system___string_cmp
0693c     3D B7 0A F6 | 	mov	local09, result1 wz
06940     00 7A 06 56 |  if_ne	mov	result1, #0
06944     00 01 90 5D |  if_ne	jmp	#LR__0553
06948                 | LR__0547
06948                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06948     55 AF 0A F2 | 	cmp	local05, local03 wz
0694c     EC 00 90 5D |  if_ne	jmp	#LR__0550
06950     95 01 00 FF 
06954     AD B9 06 F6 | 	mov	local10, ##@LR__5854
06958     56 93 02 F6 | 	mov	arg01, local04
0695c     5C 95 02 F6 | 	mov	arg02, local10
06960     C0 E0 B1 FD | 	call	#__system___string_cmp
06964     3D BB 02 F6 | 	mov	local11, result1
06968     00 BA 56 F2 | 	cmps	local11, #0 wc
0696c     1C 00 90 CD |  if_b	jmp	#LR__0548
06970     95 01 00 FF 
06974     AF 95 06 F6 | 	mov	arg02, ##@LR__5855
06978     56 93 02 F6 | 	mov	arg01, local04
0697c     A4 E0 B1 FD | 	call	#__system___string_cmp
06980     3D B9 02 F6 | 	mov	local10, result1
06984     01 B8 56 F2 | 	cmps	local10, #1 wc
06988     B0 00 90 CD |  if_b	jmp	#LR__0550
0698c                 | LR__0548
0698c     95 01 00 FF 
06990     B1 95 06 F6 | 	mov	arg02, ##@LR__5856
06994     56 93 02 F6 | 	mov	arg01, local04
06998     88 E0 B1 FD | 	call	#__system___string_cmp
0699c     00 7A 56 F2 | 	cmps	result1, #0 wc
069a0     1C 00 90 CD |  if_b	jmp	#LR__0549
069a4     95 01 00 FF 
069a8     B3 B7 06 F6 | 	mov	local09, ##@LR__5857
069ac     56 93 02 F6 | 	mov	arg01, local04
069b0     5B 95 02 F6 | 	mov	arg02, local09
069b4     6C E0 B1 FD | 	call	#__system___string_cmp
069b8     01 7A 56 F2 | 	cmps	result1, #1 wc
069bc     7C 00 90 CD |  if_b	jmp	#LR__0550
069c0                 | LR__0549
069c0     95 01 00 FF 
069c4     B5 B7 06 F6 | 	mov	local09, ##@LR__5858
069c8     56 93 02 F6 | 	mov	arg01, local04
069cc     5B 95 02 F6 | 	mov	arg02, local09
069d0     50 E0 B1 FD | 	call	#__system___string_cmp
069d4     00 7A 4E F2 | 	cmps	result1, #0 wz
069d8     60 00 90 AD |  if_e	jmp	#LR__0550
069dc     95 01 00 FF 
069e0     B7 B5 06 F6 | 	mov	local08, ##@LR__5859
069e4     56 93 02 F6 | 	mov	arg01, local04
069e8     5A 95 02 F6 | 	mov	arg02, local08
069ec     34 E0 B1 FD | 	call	#__system___string_cmp
069f0     3D B7 0A F6 | 	mov	local09, result1 wz
069f4     44 00 90 AD |  if_e	jmp	#LR__0550
069f8     95 01 00 FF 
069fc     B9 BD 06 F6 | 	mov	local12, ##@LR__5860
06a00     5E B5 02 F6 | 	mov	local08, local12
06a04     56 93 02 F6 | 	mov	arg01, local04
06a08     5A 95 02 F6 | 	mov	arg02, local08
06a0c     14 E0 B1 FD | 	call	#__system___string_cmp
06a10     3D B3 0A F6 | 	mov	local07, result1 wz
06a14     24 00 90 AD |  if_e	jmp	#LR__0550
06a18     95 01 00 FF 
06a1c     BB BF 06 F6 | 	mov	local13, ##@LR__5861
06a20     5F BD 02 F6 | 	mov	local12, local13
06a24     56 93 02 F6 | 	mov	arg01, local04
06a28     5E 95 02 F6 | 	mov	arg02, local12
06a2c     F4 DF B1 FD | 	call	#__system___string_cmp
06a30     3D B5 0A F6 | 	mov	local08, result1 wz
06a34     00 7A 06 56 |  if_ne	mov	result1, #0
06a38     0C 00 90 5D |  if_ne	jmp	#LR__0553
06a3c                 | LR__0550
06a3c     01 AE 06 F1 | 	add	local05, #1
06a40     44 FE 9F FD | 	jmp	#LR__0544
06a44                 | LR__0551
06a44                 | LR__0552
06a44                 | ' return true
06a44     01 7A 66 F6 | 	neg	result1, #1
06a48                 | LR__0553
06a48     E7 F0 03 F6 | 	mov	ptra, fp
06a4c     F2 00 A0 FD | 	call	#popregs_
06a50                 | _isname_ret
06a50     2D 00 64 FD | 	ret
06a54                 | 
06a54                 | ' 
06a54                 | ' ' Check if the part is a number.  
06a54                 | ' 
06a54                 | ' function isnum(s as string) as boolean 
06a54                 | _isnum
06a54     13 CA 05 F6 | 	mov	COUNT_, #19
06a58     E8 00 A0 FD | 	call	#pushregs_
06a5c     49 A7 02 F6 | 	mov	local01, arg01
06a60     00 A8 06 F6 | 	mov	local02, #0
06a64     00 AA 06 F6 | 	mov	local03, #0
06a68     53 93 02 F6 | 	mov	arg01, local01
06a6c     49 AD 02 F6 | 	mov	local04, arg01
06a70     D7 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a74                 | LR__0560
06a74     56 7B CA FA | 	rdbyte	result1, local04 wz
06a78     01 AC 06 51 |  if_ne	add	local04, #1
06a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a80                 | LR__0561
06a80     49 AD 82 F1 | 	sub	local04, arg01
06a84     56 7B 02 F6 | 	mov	result1, local04
06a88     3D AF 0A F6 | 	mov	local05, result1 wz
06a8c     00 7A 06 A6 |  if_e	mov	result1, #0
06a90     A0 03 90 AD |  if_e	jmp	#LR__0576
06a94     53 93 02 F6 | 	mov	arg01, local01
06a98     01 94 06 F6 | 	mov	arg02, #1
06a9c     01 96 06 F6 | 	mov	arg03, #1
06aa0     18 F9 B1 FD | 	call	#__system__Mid_S
06aa4     3D B1 02 F6 | 	mov	local06, result1
06aa8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06aa8     95 01 00 FF 
06aac     BD 95 06 F6 | 	mov	arg02, ##@LR__5862
06ab0     58 93 02 F6 | 	mov	arg01, local06
06ab4     6C DF B1 FD | 	call	#__system___string_cmp
06ab8     00 7A 56 F2 | 	cmps	result1, #0 wc
06abc     1C 00 90 CD |  if_b	jmp	#LR__0562
06ac0     95 01 00 FF 
06ac4     BF B3 06 F6 | 	mov	local07, ##@LR__5863
06ac8     58 93 02 F6 | 	mov	arg01, local06
06acc     59 95 02 F6 | 	mov	arg02, local07
06ad0     50 DF B1 FD | 	call	#__system___string_cmp
06ad4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ad8     84 00 90 CD |  if_b	jmp	#LR__0563
06adc                 | LR__0562
06adc     95 01 00 FF 
06ae0     C1 B5 06 F6 | 	mov	local08, ##@LR__5864
06ae4     5A B3 02 F6 | 	mov	local07, local08
06ae8     58 93 02 F6 | 	mov	arg01, local06
06aec     59 95 02 F6 | 	mov	arg02, local07
06af0     30 DF B1 FD | 	call	#__system___string_cmp
06af4     00 7A 0E F2 | 	cmp	result1, #0 wz
06af8     64 00 90 AD |  if_e	jmp	#LR__0563
06afc     95 01 00 FF 
06b00     C3 B7 06 F6 | 	mov	local09, ##@LR__5865
06b04     5B B5 02 F6 | 	mov	local08, local09
06b08     58 93 02 F6 | 	mov	arg01, local06
06b0c     5A 95 02 F6 | 	mov	arg02, local08
06b10     10 DF B1 FD | 	call	#__system___string_cmp
06b14     3D B3 0A F6 | 	mov	local07, result1 wz
06b18     44 00 90 AD |  if_e	jmp	#LR__0563
06b1c     95 01 00 FF 
06b20     C5 B9 06 F6 | 	mov	local10, ##@LR__5866
06b24     5C B7 02 F6 | 	mov	local09, local10
06b28     58 93 02 F6 | 	mov	arg01, local06
06b2c     5B 95 02 F6 | 	mov	arg02, local09
06b30     F0 DE B1 FD | 	call	#__system___string_cmp
06b34     3D B5 0A F6 | 	mov	local08, result1 wz
06b38     24 00 90 AD |  if_e	jmp	#LR__0563
06b3c     95 01 00 FF 
06b40     C7 BB 06 F6 | 	mov	local11, ##@LR__5867
06b44     5D B9 02 F6 | 	mov	local10, local11
06b48     58 93 02 F6 | 	mov	arg01, local06
06b4c     5C 95 02 F6 | 	mov	arg02, local10
06b50     D0 DE B1 FD | 	call	#__system___string_cmp
06b54     3D B7 0A F6 | 	mov	local09, result1 wz
06b58     00 7A 06 56 |  if_ne	mov	result1, #0
06b5c     D4 02 90 5D |  if_ne	jmp	#LR__0576
06b60                 | LR__0563
06b60                 | ' if m$="." then ds=1
06b60     95 01 00 FF 
06b64     C9 95 06 F6 | 	mov	arg02, ##@LR__5868
06b68     58 93 02 F6 | 	mov	arg01, local06
06b6c     B4 DE B1 FD | 	call	#__system___string_cmp
06b70     00 7A 0E F2 | 	cmp	result1, #0 wz
06b74     01 A8 06 A6 |  if_e	mov	local02, #1
06b78                 | ' if m$="$" then hex=1 else hex=0
06b78     95 01 00 FF 
06b7c     CB 95 06 F6 | 	mov	arg02, ##@LR__5869
06b80     58 93 02 F6 | 	mov	arg01, local06
06b84     9C DE B1 FD | 	call	#__system___string_cmp
06b88     00 7A 0E F2 | 	cmp	result1, #0 wz
06b8c     01 BC 06 A6 |  if_e	mov	local12, #1
06b90     00 BC 06 56 |  if_ne	mov	local12, #0
06b94                 | ' if m$="%" then bin=1 else bin=0
06b94     95 01 00 FF 
06b98     CD 95 06 F6 | 	mov	arg02, ##@LR__5870
06b9c     58 93 02 F6 | 	mov	arg01, local06
06ba0     80 DE B1 FD | 	call	#__system___string_cmp
06ba4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ba8     01 BE 06 A6 |  if_e	mov	local13, #1
06bac     00 BE 06 56 |  if_ne	mov	local13, #0
06bb0                 | ' if l>1 then 
06bb0     02 AE 56 F2 | 	cmps	local05, #2 wc
06bb4     78 02 90 CD |  if_b	jmp	#LR__0575
06bb8                 | '   for i=2 to l
06bb8     02 C0 06 F6 | 	mov	local14, #2
06bbc     57 C3 02 F6 | 	mov	local15, local05
06bc0     01 C2 06 F1 | 	add	local15, #1
06bc4                 | LR__0564
06bc4     61 C1 52 F2 | 	cmps	local14, local15 wc
06bc8     64 02 90 3D |  if_ae	jmp	#LR__0574
06bcc     53 93 02 F6 | 	mov	arg01, local01
06bd0     60 95 02 F6 | 	mov	arg02, local14
06bd4     01 96 06 F6 | 	mov	arg03, #1
06bd8     E0 F7 B1 FD | 	call	#__system__Mid_S
06bdc     3D B1 02 F6 | 	mov	local06, result1
06be0     00 C4 06 F6 | 	mov	local16, #0
06be4                 | '     m$=mid$(s,i,1) : b=false
06be4                 | '     if m$>="0" andalso m$<="9" then b=true  
06be4     95 01 00 FF 
06be8     CF 95 06 F6 | 	mov	arg02, ##@LR__5871
06bec     58 93 02 F6 | 	mov	arg01, local06
06bf0     30 DE B1 FD | 	call	#__system___string_cmp
06bf4     00 7A 56 F2 | 	cmps	result1, #0 wc
06bf8     1C 00 90 CD |  if_b	jmp	#LR__0565
06bfc     95 01 00 FF 
06c00     D1 B3 06 F6 | 	mov	local07, ##@LR__5872
06c04     58 93 02 F6 | 	mov	arg01, local06
06c08     59 95 02 F6 | 	mov	arg02, local07
06c0c     14 DE B1 FD | 	call	#__system___string_cmp
06c10     01 7A 56 F2 | 	cmps	result1, #1 wc
06c14     01 C4 66 C6 |  if_b	neg	local16, #1
06c18                 | LR__0565
06c18                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c18     95 01 00 FF 
06c1c     D3 95 06 F6 | 	mov	arg02, ##@LR__5873
06c20     58 93 02 F6 | 	mov	arg01, local06
06c24     FC DD B1 FD | 	call	#__system___string_cmp
06c28     00 7A 0E F2 | 	cmp	result1, #0 wz
06c2c     7C 00 90 AD |  if_e	jmp	#LR__0566
06c30     95 01 00 FF 
06c34     D5 B3 06 F6 | 	mov	local07, ##@LR__5874
06c38     58 93 02 F6 | 	mov	arg01, local06
06c3c     59 95 02 F6 | 	mov	arg02, local07
06c40     E0 DD B1 FD | 	call	#__system___string_cmp
06c44     00 7A 0E F2 | 	cmp	result1, #0 wz
06c48     60 00 90 AD |  if_e	jmp	#LR__0566
06c4c     95 01 00 FF 
06c50     D7 B5 06 F6 | 	mov	local08, ##@LR__5875
06c54     5A B3 02 F6 | 	mov	local07, local08
06c58     58 93 02 F6 | 	mov	arg01, local06
06c5c     59 95 02 F6 | 	mov	arg02, local07
06c60     C0 DD B1 FD | 	call	#__system___string_cmp
06c64     00 7A 0E F2 | 	cmp	result1, #0 wz
06c68     40 00 90 AD |  if_e	jmp	#LR__0566
06c6c     95 01 00 FF 
06c70     D9 B7 06 F6 | 	mov	local09, ##@LR__5876
06c74     5B B5 02 F6 | 	mov	local08, local09
06c78     58 93 02 F6 | 	mov	arg01, local06
06c7c     5A 95 02 F6 | 	mov	arg02, local08
06c80     A0 DD B1 FD | 	call	#__system___string_cmp
06c84     3D B3 0A F6 | 	mov	local07, result1 wz
06c88     20 00 90 AD |  if_e	jmp	#LR__0566
06c8c     95 01 00 FF 
06c90     DB B9 06 F6 | 	mov	local10, ##@LR__5877
06c94     5C B7 02 F6 | 	mov	local09, local10
06c98     58 93 02 F6 | 	mov	arg01, local06
06c9c     5B 95 02 F6 | 	mov	arg02, local09
06ca0     80 DD B1 FD | 	call	#__system___string_cmp
06ca4     3D B5 0A F6 | 	mov	local08, result1 wz
06ca8     04 00 90 5D |  if_ne	jmp	#LR__0567
06cac                 | LR__0566
06cac     01 C4 66 F6 | 	neg	local16, #1
06cb0                 | LR__0567
06cb0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cb0     01 BC 0E F2 | 	cmp	local12, #1 wz
06cb4     34 00 90 5D |  if_ne	jmp	#LR__0568
06cb8     95 01 00 FF 
06cbc     DD 95 06 F6 | 	mov	arg02, ##@LR__5878
06cc0     58 93 02 F6 | 	mov	arg01, local06
06cc4     5C DD B1 FD | 	call	#__system___string_cmp
06cc8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ccc     1C 00 90 CD |  if_b	jmp	#LR__0568
06cd0     95 01 00 FF 
06cd4     DF B3 06 F6 | 	mov	local07, ##@LR__5879
06cd8     58 93 02 F6 | 	mov	arg01, local06
06cdc     59 95 02 F6 | 	mov	arg02, local07
06ce0     40 DD B1 FD | 	call	#__system___string_cmp
06ce4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ce8     01 C4 66 C6 |  if_b	neg	local16, #1
06cec                 | LR__0568
06cec                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06cec     01 BE 0E F2 | 	cmp	local13, #1 wz
06cf0     58 00 90 5D |  if_ne	jmp	#LR__0570
06cf4     95 01 00 FF 
06cf8     E1 95 06 F6 | 	mov	arg02, ##@LR__5880
06cfc     58 93 02 F6 | 	mov	arg01, local06
06d00     20 DD B1 FD | 	call	#__system___string_cmp
06d04     00 7A 56 F2 | 	cmps	result1, #0 wc
06d08     1C 00 90 CD |  if_b	jmp	#LR__0569
06d0c     95 01 00 FF 
06d10     E3 B3 06 F6 | 	mov	local07, ##@LR__5881
06d14     58 93 02 F6 | 	mov	arg01, local06
06d18     59 95 02 F6 | 	mov	arg02, local07
06d1c     04 DD B1 FD | 	call	#__system___string_cmp
06d20     01 7A 56 F2 | 	cmps	result1, #1 wc
06d24     24 00 90 CD |  if_b	jmp	#LR__0570
06d28                 | LR__0569
06d28     95 01 00 FF 
06d2c     E5 B5 06 F6 | 	mov	local08, ##@LR__5882
06d30     5A B3 02 F6 | 	mov	local07, local08
06d34     58 93 02 F6 | 	mov	arg01, local06
06d38     59 95 02 F6 | 	mov	arg02, local07
06d3c     E4 DC B1 FD | 	call	#__system___string_cmp
06d40     00 7A 0E F2 | 	cmp	result1, #0 wz
06d44     00 7A 06 56 |  if_ne	mov	result1, #0
06d48     E8 00 90 5D |  if_ne	jmp	#LR__0576
06d4c                 | LR__0570
06d4c                 | '     if not b then return false
06d4c     62 C5 22 F6 | 	not	local16, local16
06d50     00 C4 0E F2 | 	cmp	local16, #0 wz
06d54     00 7A 06 56 |  if_ne	mov	result1, #0
06d58     D8 00 90 5D |  if_ne	jmp	#LR__0576
06d5c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d5c     95 01 00 FF 
06d60     E7 95 06 F6 | 	mov	arg02, ##@LR__5883
06d64     58 93 02 F6 | 	mov	arg01, local06
06d68     B8 DC B1 FD | 	call	#__system___string_cmp
06d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
06d70     3C 00 90 5D |  if_ne	jmp	#LR__0571
06d74     60 95 02 F6 | 	mov	arg02, local14
06d78     01 94 86 F1 | 	sub	arg02, #1
06d7c     53 93 02 F6 | 	mov	arg01, local01
06d80     01 96 06 F6 | 	mov	arg03, #1
06d84     34 F6 B1 FD | 	call	#__system__Mid_S
06d88     3D 93 02 F6 | 	mov	arg01, result1
06d8c     24 F8 B1 FD | 	call	#__system__LCase_S
06d90     3D 93 02 F6 | 	mov	arg01, result1
06d94     95 01 00 FF 
06d98     E9 B3 06 F6 | 	mov	local07, ##@LR__5884
06d9c     59 95 02 F6 | 	mov	arg02, local07
06da0     80 DC B1 FD | 	call	#__system___string_cmp
06da4     00 7A 0E F2 | 	cmp	result1, #0 wz
06da8     00 7A 06 56 |  if_ne	mov	result1, #0
06dac     84 00 90 5D |  if_ne	jmp	#LR__0576
06db0                 | LR__0571
06db0                 | '     if m$="." then ds+=1: if ds>1 then return false
06db0     95 01 00 FF 
06db4     EB 95 06 F6 | 	mov	arg02, ##@LR__5885
06db8     58 93 02 F6 | 	mov	arg01, local06
06dbc     64 DC B1 FD | 	call	#__system___string_cmp
06dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
06dc4     01 A8 06 A1 |  if_e	add	local02, #1
06dc8     02 A8 56 A2 |  if_e	cmps	local02, #2 wc
06dcc     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06dd0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06dd4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06dd4     95 01 00 FF 
06dd8     ED C7 06 F6 | 	mov	local17, ##@LR__5886
06ddc     63 C9 02 F6 | 	mov	local18, local17
06de0     58 93 02 F6 | 	mov	arg01, local06
06de4     64 95 02 F6 | 	mov	arg02, local18
06de8     38 DC B1 FD | 	call	#__system___string_cmp
06dec     3D CB 0A F6 | 	mov	local19, result1 wz
06df0     20 00 90 AD |  if_e	jmp	#LR__0572
06df4     95 01 00 FF 
06df8     EF B3 06 F6 | 	mov	local07, ##@LR__5887
06dfc     59 C7 02 F6 | 	mov	local17, local07
06e00     58 93 02 F6 | 	mov	arg01, local06
06e04     63 95 02 F6 | 	mov	arg02, local17
06e08     18 DC B1 FD | 	call	#__system___string_cmp
06e0c     3D C9 0A F6 | 	mov	local18, result1 wz
06e10     14 00 90 5D |  if_ne	jmp	#LR__0573
06e14                 | LR__0572
06e14     01 AA 06 F1 | 	add	local03, #1
06e18     00 BC 0E F2 | 	cmp	local12, #0 wz
06e1c     02 AA 56 A2 |  if_e	cmps	local03, #2 wc
06e20     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e24     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e28                 | LR__0573
06e28     01 C0 06 F1 | 	add	local14, #1
06e2c     94 FD 9F FD | 	jmp	#LR__0564
06e30                 | LR__0574
06e30                 | LR__0575
06e30                 | ' return true
06e30     01 7A 66 F6 | 	neg	result1, #1
06e34                 | LR__0576
06e34     E7 F0 03 F6 | 	mov	ptra, fp
06e38     F2 00 A0 FD | 	call	#popregs_
06e3c                 | _isnum_ret
06e3c     2D 00 64 FD | 	ret
06e40                 | 
06e40                 | '   
06e40                 | ' ' Check if the part is an integer number.    
06e40                 | '   
06e40                 | ' function isint(s as string) as boolean
06e40                 | _isint
06e40     0E CA 05 F6 | 	mov	COUNT_, #14
06e44     E8 00 A0 FD | 	call	#pushregs_
06e48     49 A7 02 F6 | 	mov	local01, arg01
06e4c     49 A9 02 F6 | 	mov	local02, arg01
06e50     D7 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e54                 | LR__0580
06e54     54 7B CA FA | 	rdbyte	result1, local02 wz
06e58     01 A8 06 51 |  if_ne	add	local02, #1
06e5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e60                 | LR__0581
06e60     49 A9 82 F1 | 	sub	local02, arg01
06e64     54 7B 02 F6 | 	mov	result1, local02
06e68     3D AB 0A F6 | 	mov	local03, result1 wz
06e6c     00 7A 06 A6 |  if_e	mov	result1, #0
06e70     64 02 90 AD |  if_e	jmp	#LR__0594
06e74     53 93 02 F6 | 	mov	arg01, local01
06e78     01 94 06 F6 | 	mov	arg02, #1
06e7c     01 96 06 F6 | 	mov	arg03, #1
06e80     38 F5 B1 FD | 	call	#__system__Mid_S
06e84     3D AD 02 F6 | 	mov	local04, result1
06e88                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06e88     95 01 00 FF 
06e8c     F1 95 06 F6 | 	mov	arg02, ##@LR__5888
06e90     56 93 02 F6 | 	mov	arg01, local04
06e94     8C DB B1 FD | 	call	#__system___string_cmp
06e98     00 7A 56 F2 | 	cmps	result1, #0 wc
06e9c     1C 00 90 CD |  if_b	jmp	#LR__0582
06ea0     95 01 00 FF 
06ea4     F3 AF 06 F6 | 	mov	local05, ##@LR__5889
06ea8     56 93 02 F6 | 	mov	arg01, local04
06eac     57 95 02 F6 | 	mov	arg02, local05
06eb0     70 DB B1 FD | 	call	#__system___string_cmp
06eb4     01 7A 56 F2 | 	cmps	result1, #1 wc
06eb8     64 00 90 CD |  if_b	jmp	#LR__0583
06ebc                 | LR__0582
06ebc     95 01 00 FF 
06ec0     F5 B1 06 F6 | 	mov	local06, ##@LR__5890
06ec4     58 AF 02 F6 | 	mov	local05, local06
06ec8     56 93 02 F6 | 	mov	arg01, local04
06ecc     57 95 02 F6 | 	mov	arg02, local05
06ed0     50 DB B1 FD | 	call	#__system___string_cmp
06ed4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ed8     44 00 90 AD |  if_e	jmp	#LR__0583
06edc     95 01 00 FF 
06ee0     F7 B3 06 F6 | 	mov	local07, ##@LR__5891
06ee4     59 B1 02 F6 | 	mov	local06, local07
06ee8     56 93 02 F6 | 	mov	arg01, local04
06eec     58 95 02 F6 | 	mov	arg02, local06
06ef0     30 DB B1 FD | 	call	#__system___string_cmp
06ef4     3D AF 0A F6 | 	mov	local05, result1 wz
06ef8     24 00 90 AD |  if_e	jmp	#LR__0583
06efc     95 01 00 FF 
06f00     F9 B5 06 F6 | 	mov	local08, ##@LR__5892
06f04     5A B3 02 F6 | 	mov	local07, local08
06f08     56 93 02 F6 | 	mov	arg01, local04
06f0c     59 95 02 F6 | 	mov	arg02, local07
06f10     10 DB B1 FD | 	call	#__system___string_cmp
06f14     3D B1 0A F6 | 	mov	local06, result1 wz
06f18     00 7A 06 56 |  if_ne	mov	result1, #0
06f1c     B8 01 90 5D |  if_ne	jmp	#LR__0594
06f20                 | LR__0583
06f20                 | ' if m$="$" then hex=1 else hex=0
06f20     95 01 00 FF 
06f24     FB 95 06 F6 | 	mov	arg02, ##@LR__5893
06f28     56 93 02 F6 | 	mov	arg01, local04
06f2c     F4 DA B1 FD | 	call	#__system___string_cmp
06f30     00 7A 0E F2 | 	cmp	result1, #0 wz
06f34     01 B6 06 A6 |  if_e	mov	local09, #1
06f38     00 B6 06 56 |  if_ne	mov	local09, #0
06f3c                 | ' if m$="%" then bin=1 else bin=0
06f3c     95 01 00 FF 
06f40     FD 95 06 F6 | 	mov	arg02, ##@LR__5894
06f44     56 93 02 F6 | 	mov	arg01, local04
06f48     D8 DA B1 FD | 	call	#__system___string_cmp
06f4c     00 7A 0E F2 | 	cmp	result1, #0 wz
06f50     01 B8 06 A6 |  if_e	mov	local10, #1
06f54     00 B8 06 56 |  if_ne	mov	local10, #0
06f58                 | ' if l>1 then 
06f58     02 AA 56 F2 | 	cmps	local03, #2 wc
06f5c     74 01 90 CD |  if_b	jmp	#LR__0593
06f60                 | '   for i=2 to l
06f60     02 BA 06 F6 | 	mov	local11, #2
06f64     55 BD 02 F6 | 	mov	local12, local03
06f68     01 BC 06 F1 | 	add	local12, #1
06f6c                 | LR__0584
06f6c     5E BB 52 F2 | 	cmps	local11, local12 wc
06f70     60 01 90 3D |  if_ae	jmp	#LR__0592
06f74     53 93 02 F6 | 	mov	arg01, local01
06f78     5D 95 02 F6 | 	mov	arg02, local11
06f7c     01 96 06 F6 | 	mov	arg03, #1
06f80     38 F4 B1 FD | 	call	#__system__Mid_S
06f84     3D AD 02 F6 | 	mov	local04, result1
06f88                 | '     m$=mid$(s,i,1) 
06f88                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f88     00 B6 0E F2 | 	cmp	local09, #0 wz
06f8c     50 00 90 5D |  if_ne	jmp	#LR__0586
06f90     95 01 00 FF 
06f94     FF 95 06 F6 | 	mov	arg02, ##@LR__5895
06f98     56 93 02 F6 | 	mov	arg01, local04
06f9c     84 DA B1 FD | 	call	#__system___string_cmp
06fa0     00 7A 56 F2 | 	cmps	result1, #0 wc
06fa4     18 00 90 CD |  if_b	jmp	#LR__0585
06fa8     96 01 00 FF 
06fac     01 94 06 F6 | 	mov	arg02, ##@LR__5896
06fb0     56 93 02 F6 | 	mov	arg01, local04
06fb4     6C DA B1 FD | 	call	#__system___string_cmp
06fb8     01 7A 56 F2 | 	cmps	result1, #1 wc
06fbc     20 00 90 CD |  if_b	jmp	#LR__0586
06fc0                 | LR__0585
06fc0     96 01 00 FF 
06fc4     03 B0 06 F6 | 	mov	local06, ##@LR__5897
06fc8     56 93 02 F6 | 	mov	arg01, local04
06fcc     58 95 02 F6 | 	mov	arg02, local06
06fd0     50 DA B1 FD | 	call	#__system___string_cmp
06fd4     00 7A 0E F2 | 	cmp	result1, #0 wz
06fd8     00 7A 06 56 |  if_ne	mov	result1, #0
06fdc     F8 00 90 5D |  if_ne	jmp	#LR__0594
06fe0                 | LR__0586
06fe0                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06fe0     01 B6 0E F2 | 	cmp	local09, #1 wz
06fe4     90 00 90 5D |  if_ne	jmp	#LR__0589
06fe8     96 01 00 FF 
06fec     05 94 06 F6 | 	mov	arg02, ##@LR__5898
06ff0     56 93 02 F6 | 	mov	arg01, local04
06ff4     2C DA B1 FD | 	call	#__system___string_cmp
06ff8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ffc     1C 00 90 CD |  if_b	jmp	#LR__0587
07000     96 01 00 FF 
07004     07 94 06 F6 | 	mov	arg02, ##@LR__5899
07008     56 93 02 F6 | 	mov	arg01, local04
0700c     14 DA B1 FD | 	call	#__system___string_cmp
07010     3D BF 02 F6 | 	mov	local13, result1
07014     01 BE 56 F2 | 	cmps	local13, #1 wc
07018     5C 00 90 CD |  if_b	jmp	#LR__0589
0701c                 | LR__0587
0701c     96 01 00 FF 
07020     09 AE 06 F6 | 	mov	local05, ##@LR__5900
07024     56 93 02 F6 | 	mov	arg01, local04
07028     57 95 02 F6 | 	mov	arg02, local05
0702c     F4 D9 B1 FD | 	call	#__system___string_cmp
07030     3D C1 02 F6 | 	mov	local14, result1
07034     00 C0 56 F2 | 	cmps	local14, #0 wc
07038     1C 00 90 CD |  if_b	jmp	#LR__0588
0703c     96 01 00 FF 
07040     0B B2 06 F6 | 	mov	local07, ##@LR__5901
07044     56 93 02 F6 | 	mov	arg01, local04
07048     59 95 02 F6 | 	mov	arg02, local07
0704c     D4 D9 B1 FD | 	call	#__system___string_cmp
07050     01 7A 56 F2 | 	cmps	result1, #1 wc
07054     20 00 90 CD |  if_b	jmp	#LR__0589
07058                 | LR__0588
07058     96 01 00 FF 
0705c     0D B4 06 F6 | 	mov	local08, ##@LR__5902
07060     56 93 02 F6 | 	mov	arg01, local04
07064     5A 95 02 F6 | 	mov	arg02, local08
07068     B8 D9 B1 FD | 	call	#__system___string_cmp
0706c     00 7A 0E F2 | 	cmp	result1, #0 wz
07070     00 7A 06 56 |  if_ne	mov	result1, #0
07074     60 00 90 5D |  if_ne	jmp	#LR__0594
07078                 | LR__0589
07078                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07078     01 B8 0E F2 | 	cmp	local10, #1 wz
0707c     4C 00 90 5D |  if_ne	jmp	#LR__0591
07080     96 01 00 FF 
07084     0F 94 06 F6 | 	mov	arg02, ##@LR__5903
07088     56 93 02 F6 | 	mov	arg01, local04
0708c     94 D9 B1 FD | 	call	#__system___string_cmp
07090     00 7A 56 F2 | 	cmps	result1, #0 wc
07094     18 00 90 CD |  if_b	jmp	#LR__0590
07098     96 01 00 FF 
0709c     11 94 06 F6 | 	mov	arg02, ##@LR__5904
070a0     56 93 02 F6 | 	mov	arg01, local04
070a4     7C D9 B1 FD | 	call	#__system___string_cmp
070a8     01 7A 56 F2 | 	cmps	result1, #1 wc
070ac     1C 00 90 CD |  if_b	jmp	#LR__0591
070b0                 | LR__0590
070b0     96 01 00 FF 
070b4     13 94 06 F6 | 	mov	arg02, ##@LR__5905
070b8     56 93 02 F6 | 	mov	arg01, local04
070bc     64 D9 B1 FD | 	call	#__system___string_cmp
070c0     00 7A 0E F2 | 	cmp	result1, #0 wz
070c4     00 7A 06 56 |  if_ne	mov	result1, #0
070c8     0C 00 90 5D |  if_ne	jmp	#LR__0594
070cc                 | LR__0591
070cc     01 BA 06 F1 | 	add	local11, #1
070d0     98 FE 9F FD | 	jmp	#LR__0584
070d4                 | LR__0592
070d4                 | LR__0593
070d4                 | ' return true
070d4     01 7A 66 F6 | 	neg	result1, #1
070d8                 | LR__0594
070d8     E7 F0 03 F6 | 	mov	ptra, fp
070dc     F2 00 A0 FD | 	call	#popregs_
070e0                 | _isint_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | ' 
070e4                 | ' ' Check if the part is a positive decimal number.  
070e4                 | ' 
070e4                 | ' function isdec(s as string) as boolean
070e4                 | _isdec
070e4     05 CA 05 F6 | 	mov	COUNT_, #5
070e8     E8 00 A0 FD | 	call	#pushregs_
070ec     49 A7 02 F6 | 	mov	local01, arg01
070f0     49 A9 02 F6 | 	mov	local02, arg01
070f4     D7 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
070f8                 | LR__0600
070f8     54 7B CA FA | 	rdbyte	result1, local02 wz
070fc     01 A8 06 51 |  if_ne	add	local02, #1
07100     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
07104                 | LR__0601
07104     49 A9 82 F1 | 	sub	local02, arg01
07108     54 7B 02 F6 | 	mov	result1, local02
0710c     3D A9 0A F6 | 	mov	local02, result1 wz
07110     00 7A 06 A6 |  if_e	mov	result1, #0
07114     80 00 90 AD |  if_e	jmp	#LR__0606
07118                 | ' for i=1 to l
07118     01 AA 06 F6 | 	mov	local03, #1
0711c     54 AD 02 F6 | 	mov	local04, local02
07120     01 AC 06 F1 | 	add	local04, #1
07124                 | LR__0602
07124     56 AB 52 F2 | 	cmps	local03, local04 wc
07128     68 00 90 3D |  if_ae	jmp	#LR__0605
0712c     53 93 02 F6 | 	mov	arg01, local01
07130     55 95 02 F6 | 	mov	arg02, local03
07134     01 96 06 F6 | 	mov	arg03, #1
07138     80 F2 B1 FD | 	call	#__system__Mid_S
0713c     3D AF 02 F6 | 	mov	local05, result1
07140                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07140     96 01 00 FF 
07144     15 94 06 F6 | 	mov	arg02, ##@LR__5906
07148     57 93 02 F6 | 	mov	arg01, local05
0714c     D4 D8 B1 FD | 	call	#__system___string_cmp
07150     00 7A 56 F2 | 	cmps	result1, #0 wc
07154     18 00 90 CD |  if_b	jmp	#LR__0603
07158     96 01 00 FF 
0715c     17 94 06 F6 | 	mov	arg02, ##@LR__5907
07160     57 93 02 F6 | 	mov	arg01, local05
07164     BC D8 B1 FD | 	call	#__system___string_cmp
07168     01 7A 56 F2 | 	cmps	result1, #1 wc
0716c     1C 00 90 CD |  if_b	jmp	#LR__0604
07170                 | LR__0603
07170     96 01 00 FF 
07174     19 94 06 F6 | 	mov	arg02, ##@LR__5908
07178     57 93 02 F6 | 	mov	arg01, local05
0717c     A4 D8 B1 FD | 	call	#__system___string_cmp
07180     00 7A 0E F2 | 	cmp	result1, #0 wz
07184     00 7A 06 56 |  if_ne	mov	result1, #0
07188     0C 00 90 5D |  if_ne	jmp	#LR__0606
0718c                 | LR__0604
0718c     01 AA 06 F1 | 	add	local03, #1
07190     90 FF 9F FD | 	jmp	#LR__0602
07194                 | LR__0605
07194                 | ' return true
07194     01 7A 66 F6 | 	neg	result1, #1
07198                 | LR__0606
07198     E7 F0 03 F6 | 	mov	ptra, fp
0719c     F2 00 A0 FD | 	call	#popregs_
071a0                 | _isdec_ret
071a0     2D 00 64 FD | 	ret
071a4                 | 
071a4                 | ' 
071a4                 | ' ' Check if the part is a string.  
071a4                 | ' 
071a4                 | ' function isstring(s as string) as boolean
071a4                 | _isstring
071a4     01 CA 05 F6 | 	mov	COUNT_, #1
071a8     E8 00 A0 FD | 	call	#pushregs_
071ac                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071ac     49 A7 02 F6 | 	mov	local01, arg01
071b0     01 94 06 F6 | 	mov	arg02, #1
071b4     EC F0 B1 FD | 	call	#__system__Left_S
071b8     3D 93 02 F6 | 	mov	arg01, result1
071bc     96 01 00 FF 
071c0     1B 94 06 F6 | 	mov	arg02, ##@LR__5909
071c4     5C D8 B1 FD | 	call	#__system___string_cmp
071c8     00 7A 4E F2 | 	cmps	result1, #0 wz
071cc     28 00 90 5D |  if_ne	jmp	#LR__0610
071d0     53 93 02 F6 | 	mov	arg01, local01
071d4     01 94 06 F6 | 	mov	arg02, #1
071d8     50 F1 B1 FD | 	call	#__system__Right_S
071dc     3D 93 02 F6 | 	mov	arg01, result1
071e0     96 01 00 FF 
071e4     1D 94 06 F6 | 	mov	arg02, ##@LR__5910
071e8     38 D8 B1 FD | 	call	#__system___string_cmp
071ec     00 7A 4E F2 | 	cmps	result1, #0 wz
071f0     01 7A 66 A6 |  if_e	neg	result1, #1
071f4     04 00 90 AD |  if_e	jmp	#LR__0611
071f8                 | LR__0610
071f8     00 7A 06 F6 | 	mov	result1, #0
071fc                 | LR__0611
071fc     E7 F0 03 F6 | 	mov	ptra, fp
07200     F2 00 A0 FD | 	call	#popregs_
07204                 | _isstring_ret
07204     2D 00 64 FD | 	ret
07208                 | 
07208                 | ' 
07208                 | ' ' getnoteval. Returns the frequency of note token
07208                 | ' 
07208                 | ' function getnoteval(token) as single
07208                 | _getnoteval
07208     02 CA 05 F6 | 	mov	COUNT_, #2
0720c     E8 00 A0 FD | 	call	#pushregs_
07210     01 00 00 FF 
07214     00 93 86 F1 | 	sub	arg01, ##768
07218     49 95 52 F6 | 	abs	arg02, arg01 wc
0721c     0C 94 16 FD | 	qdiv	arg02, #12
07220     32 95 02 F6 | 	mov	arg02, objptr
07224     16 00 00 FF 
07228     38 94 06 F1 | 	add	arg02, ##11320
0722c     19 7A 62 FD | 	getqy	result1
07230     3D 7B 82 F6 | 	negc	result1, result1
07234     02 7A 66 F0 | 	shl	result1, #2
07238     4A 7B 02 F1 | 	add	result1, arg02
0723c     49 95 52 F6 | 	abs	arg02, arg01 wc
07240     0C 94 16 FD | 	qdiv	arg02, #12
07244     3D A7 02 FB | 	rdlong	local01, result1
07248     01 92 06 F6 | 	mov	arg01, #1
0724c                 | ' noteexp=1+(note/12) 
0724c                 | ' return (2.0^noteexp)*notebase
0724c     18 94 62 FD | 	getqx	arg02
07250     4A 93 82 F3 | 	sumc	arg01, arg02
07254     49 93 52 F6 | 	abs	arg01, arg01 wc
07258     1F A8 C6 C9 |  if_b	decod	local02, #31
0725c     00 A8 06 36 |  if_ae	mov	local02, #0
07260     64 FA B1 FD | 	call	#__system___float_fromuns
07264     54 7B 62 F5 | 	xor	result1, local02
07268     3D 95 02 F6 | 	mov	arg02, result1
0726c     1E 92 C6 F9 | 	decod	arg01, #30
07270     70 0D B2 FD | 	call	#__system____builtin_powf
07274     3D 93 02 F6 | 	mov	arg01, result1
07278     53 95 02 F6 | 	mov	arg02, local01
0727c     4C FE B1 FD | 	call	#__system___float_mul
07280     E7 F0 03 F6 | 	mov	ptra, fp
07284     F2 00 A0 FD | 	call	#popregs_
07288                 | _getnoteval_ret
07288     2D 00 64 FD | 	ret
0728c                 | 
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '
0728c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0728c                 | ' '
0728c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0728c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0728c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0728c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0728c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0728c                 | ' ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' ' Helper functions to manage program lines
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '----- delete a line from a program
0728c                 | ' 
0728c                 | ' function deleteline(aline as ulong) as integer
0728c                 | _deleteline
0728c     05 CA 05 F6 | 	mov	COUNT_, #5
07290     E8 00 A0 FD | 	call	#pushregs_
07294     2C F0 07 F1 | 	add	ptra, #44
07298     49 A7 02 F6 | 	mov	local01, arg01
0729c     4C 00 00 FF 
072a0     2C 64 06 F1 | 	add	objptr, ##38956
072a4     32 A9 02 FB | 	rdlong	local02, objptr
072a8                 | ' 
072a8                 | ' searchptr=programstart
072a8                 | ' do
072a8     40 00 00 FF 
072ac     60 65 86 F1 | 	sub	objptr, ##33120
072b0                 | LR__0620
072b0     E7 92 02 F6 | 	mov	arg01, fp
072b4     14 92 06 F1 | 	add	arg01, #20
072b8     54 95 02 F6 | 	mov	arg02, local02
072bc     18 96 06 F6 | 	mov	arg03, #24
072c0     C4 C7 B1 FD | 	call	#_psram_spin2_read1
072c4     54 97 02 F6 | 	mov	arg03, local02
072c8     28 CE 05 F1 | 	add	fp, #40
072cc     E7 A8 02 FB | 	rdlong	local02, fp
072d0     14 CE 85 F1 | 	sub	fp, #20
072d4     E7 94 02 FB | 	rdlong	arg02, fp
072d8     14 CE 85 F1 | 	sub	fp, #20
072dc     53 95 12 F2 | 	cmp	arg02, local01 wc
072e0     28 CE 05 C1 |  if_b	add	fp, #40
072e4     E7 AA 02 CB |  if_b	rdlong	local03, fp
072e8     28 CE 85 C1 |  if_b	sub	fp, #40
072ec     FF FF 3F CF 
072f0     FF AB 0E C2 |  if_b	cmp	local03, ##2147483647 wz
072f4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
072f8     0B 00 00 FF 
072fc     CC 64 86 F1 | 	sub	objptr, ##5836
07300                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07300     14 CE 05 F1 | 	add	fp, #20
07304     E7 AA 02 FB | 	rdlong	local03, fp
07308     14 CE 85 F1 | 	sub	fp, #20
0730c     53 AB 0A F2 | 	cmp	local03, local01 wz
07310     01 7A 66 56 |  if_ne	neg	result1, #1
07314     2C 02 90 5D |  if_ne	jmp	#LR__0625
07318     4B 93 02 F6 | 	mov	arg01, arg03
0731c     01 94 66 F6 | 	neg	arg02, #1
07320     4C 9B B1 FD | 	call	#_pslpoke
07324                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07324                 | ' 
07324                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07324     28 CE 05 F1 | 	add	fp, #40
07328     E7 96 02 FB | 	rdlong	arg03, fp
0732c     28 CE 85 F1 | 	sub	fp, #40
07330     FF FF 3F FF 
07334     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
07338     24 CE 05 A1 |  if_e	add	fp, #36
0733c     E7 AC 02 AB |  if_e	rdlong	local04, fp
07340     24 CE 85 A1 |  if_e	sub	fp, #36
07344     FF FF 7F AF 
07348     FF AD 0E A2 |  if_e	cmp	local04, ##-1 wz
0734c     88 00 90 5D |  if_ne	jmp	#LR__0621
07350     4C 00 00 FF 
07354     2C 64 06 F1 | 	add	objptr, ##38956
07358     00 04 80 FF 
0735c     32 01 68 FC | 	wrlong	##524288, objptr
07360     07 00 00 FF 
07364     2C 64 86 F1 | 	sub	objptr, ##3628
07368     00 04 80 FF 
0736c     32 01 68 FC | 	wrlong	##524288, objptr
07370     07 00 00 FF 
07374     30 64 06 F1 | 	add	objptr, ##3632
07378     32 01 68 FC | 	wrlong	#0, objptr
0737c     04 64 06 F1 | 	add	objptr, #4
07380     FF FF FF FF 
07384     32 FF 6B FC | 	wrlong	##-1, objptr
07388     4C 00 00 FF 
0738c     34 64 86 F1 | 	sub	objptr, ##38964
07390     00 92 06 F6 | 	mov	arg01, #0
07394     01 94 66 F6 | 	neg	arg02, #1
07398     D4 9A B1 FD | 	call	#_pslpoke
0739c     10 92 06 F6 | 	mov	arg01, #16
073a0     01 94 66 F6 | 	neg	arg02, #1
073a4     C8 9A B1 FD | 	call	#_pslpoke
073a8     14 92 06 F6 | 	mov	arg01, #20
073ac     1E 94 CE F9 | 	bmask	arg02, #30
073b0     BC 9A B1 FD | 	call	#_pslpoke
073b4     52 00 00 FF 
073b8     5C 64 06 F1 | 	add	objptr, ##42076
073bc     00 04 80 FF 
073c0     32 01 68 FC | 	wrlong	##524288, objptr
073c4     04 64 06 F1 | 	add	objptr, #4
073c8     00 04 80 FF 
073cc     32 01 68 FC | 	wrlong	##524288, objptr
073d0     52 00 00 FF 
073d4     60 64 86 F1 | 	sub	objptr, ##42080
073d8                 | LR__0621
073d8                 | ' 
073d8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
073d8     28 CE 05 F1 | 	add	fp, #40
073dc     E7 AE 02 FB | 	rdlong	local05, fp
073e0     28 CE 85 F1 | 	sub	fp, #40
073e4     FF FF 3F FF 
073e8     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
073ec     74 00 90 5D |  if_ne	jmp	#LR__0622
073f0     24 CE 05 F1 | 	add	fp, #36
073f4     E7 AC 02 FB | 	rdlong	local04, fp
073f8     24 CE 85 F1 | 	sub	fp, #36
073fc     FF FF 7F FF 
07400     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07404     5C 00 90 AD |  if_e	jmp	#LR__0622
07408     24 CE 05 F1 | 	add	fp, #36
0740c     E7 92 02 FB | 	rdlong	arg01, fp
07410     24 CE 85 F1 | 	sub	fp, #36
07414     14 92 06 F1 | 	add	arg01, #20
07418     1E 94 CE F9 | 	bmask	arg02, #30
0741c     50 9A B1 FD | 	call	#_pslpoke
07420     24 CE 05 F1 | 	add	fp, #36
07424     E7 AE 02 FB | 	rdlong	local05, fp
07428     4C 00 00 FF 
0742c     34 64 06 F1 | 	add	objptr, ##38964
07430     32 AF 62 FC | 	wrlong	local05, objptr
07434     4C 00 00 FF 
07438     34 64 86 F1 | 	sub	objptr, ##38964
0743c     E7 92 02 FB | 	rdlong	arg01, fp
07440     24 CE 85 F1 | 	sub	fp, #36
07444     48 9B B1 FD | 	call	#_pslpeek
07448     4C 00 00 FF 
0744c     30 64 06 F1 | 	add	objptr, ##38960
07450     32 7B 62 FC | 	wrlong	result1, objptr
07454     4C 00 00 FF 
07458     30 64 86 F1 | 	sub	objptr, ##38960
0745c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0745c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0745c                 | '   lastline=pslpeek(header(4))
0745c                 | '   return 0
0745c     00 7A 06 F6 | 	mov	result1, #0
07460     E0 00 90 FD | 	jmp	#LR__0625
07464                 | LR__0622
07464                 | ' 
07464                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07464     28 CE 05 F1 | 	add	fp, #40
07468     E7 AE 02 FB | 	rdlong	local05, fp
0746c     28 CE 85 F1 | 	sub	fp, #40
07470     FF FF 3F FF 
07474     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07478     58 00 90 AD |  if_e	jmp	#LR__0623
0747c     24 CE 05 F1 | 	add	fp, #36
07480     E7 AC 02 FB | 	rdlong	local04, fp
07484     24 CE 85 F1 | 	sub	fp, #36
07488     FF FF 7F FF 
0748c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07490     40 00 90 5D |  if_ne	jmp	#LR__0623
07494     28 CE 05 F1 | 	add	fp, #40
07498     E7 92 02 FB | 	rdlong	arg01, fp
0749c     28 CE 85 F1 | 	sub	fp, #40
074a0     10 92 06 F1 | 	add	arg01, #16
074a4     01 94 66 F6 | 	neg	arg02, #1
074a8     C4 99 B1 FD | 	call	#_pslpoke
074ac     28 CE 05 F1 | 	add	fp, #40
074b0     E7 AE 02 FB | 	rdlong	local05, fp
074b4     28 CE 85 F1 | 	sub	fp, #40
074b8     4C 00 00 FF 
074bc     2C 64 06 F1 | 	add	objptr, ##38956
074c0     32 AF 62 FC | 	wrlong	local05, objptr
074c4     4C 00 00 FF 
074c8     2C 64 86 F1 | 	sub	objptr, ##38956
074cc                 | ' '   print "deleted first line"
074cc                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
074cc                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
074cc                 | '   return 0
074cc     00 7A 06 F6 | 	mov	result1, #0
074d0     70 00 90 FD | 	jmp	#LR__0625
074d4                 | LR__0623
074d4                 | ' 
074d4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
074d4     28 CE 05 F1 | 	add	fp, #40
074d8     E7 AE 02 FB | 	rdlong	local05, fp
074dc     28 CE 85 F1 | 	sub	fp, #40
074e0     FF FF 3F FF 
074e4     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
074e8     24 CE 05 51 |  if_ne	add	fp, #36
074ec     E7 AC 02 5B |  if_ne	rdlong	local04, fp
074f0     24 CE 85 51 |  if_ne	sub	fp, #36
074f4     FF FF 7F 5F 
074f8     FF AD 0E 52 |  if_ne	cmp	local04, ##-1 wz
074fc     40 00 90 AD |  if_e	jmp	#LR__0624
07500     28 CE 05 F1 | 	add	fp, #40
07504     E7 92 02 FB | 	rdlong	arg01, fp
07508     10 92 06 F1 | 	add	arg01, #16
0750c     04 CE 85 F1 | 	sub	fp, #4
07510     E7 94 02 FB | 	rdlong	arg02, fp
07514     24 CE 85 F1 | 	sub	fp, #36
07518     54 99 B1 FD | 	call	#_pslpoke
0751c     24 CE 05 F1 | 	add	fp, #36
07520     E7 92 02 FB | 	rdlong	arg01, fp
07524     14 92 06 F1 | 	add	arg01, #20
07528     04 CE 05 F1 | 	add	fp, #4
0752c     E7 94 02 FB | 	rdlong	arg02, fp
07530     28 CE 85 F1 | 	sub	fp, #40
07534     38 99 B1 FD | 	call	#_pslpoke
07538                 | '    pslpoke(header(5)+16,header(4))  
07538                 | '    pslpoke(header(4)+20, header(5))
07538                 | '    return 0
07538     00 7A 06 F6 | 	mov	result1, #0
0753c     04 00 90 FD | 	jmp	#LR__0625
07540                 | LR__0624
07540     00 7A 06 F6 | 	mov	result1, #0
07544                 | LR__0625
07544     E7 F0 03 F6 | 	mov	ptra, fp
07548     F2 00 A0 FD | 	call	#popregs_
0754c                 | _deleteline_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | ' 
07550                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07550                 | ' 
07550                 | ' sub save_line
07550                 | _save_line
07550     03 CA 05 F6 | 	mov	COUNT_, #3
07554     E8 00 A0 FD | 	call	#pushregs_
07558     4C 00 00 FF 
0755c     20 64 06 F1 | 	add	objptr, ##38944
07560     32 97 02 FB | 	rdlong	arg03, objptr
07564     01 96 06 F1 | 	add	arg03, #1
07568     05 00 00 FF 
0756c     18 64 86 F1 | 	sub	objptr, ##2584
07570     32 95 02 FB | 	rdlong	arg02, objptr
07574     4B 95 02 FD | 	qmul	arg02, arg03
07578     0E 00 00 FF 
0757c     44 64 86 F1 | 	sub	objptr, ##7236
07580     32 93 02 FB | 	rdlong	arg01, objptr
07584     38 00 00 FF 
07588     C4 65 86 F1 | 	sub	objptr, ##29124
0758c     49 A7 02 F6 | 	mov	local01, arg01
07590     18 A8 62 FD | 	getqx	local02
07594     D7 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
07598                 | LR__0630
07598     53 7B CA FA | 	rdbyte	result1, local01 wz
0759c     01 A6 06 51 |  if_ne	add	local01, #1
075a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
075a4                 | LR__0631
075a4     49 A7 82 F1 | 	sub	local01, arg01
075a8     03 A6 CE F7 | 	test	local01, #3 wz
075ac     02 A6 46 50 |  if_ne	shr	local01, #2
075b0     01 A6 06 51 |  if_ne	add	local01, #1
075b4     02 A6 66 50 |  if_ne	shl	local01, #2
075b8     54 AB 02 F6 | 	mov	local03, local02
075bc     53 AB 02 F1 | 	add	local03, local01
075c0     45 00 00 FF 
075c4     00 64 06 F1 | 	add	objptr, ##35328
075c8     32 97 02 FB | 	rdlong	arg03, objptr
075cc     54 97 02 F1 | 	add	arg03, local02
075d0     04 00 00 FF 
075d4     28 64 06 F1 | 	add	objptr, ##2088
075d8     32 97 62 FC | 	wrlong	arg03, objptr
075dc     04 64 06 F1 | 	add	objptr, #4
075e0     32 A7 62 FC | 	wrlong	local01, objptr
075e4     0C 64 86 F1 | 	sub	objptr, #12
075e8     32 93 02 F6 | 	mov	arg01, objptr
075ec     04 00 00 FF 
075f0     20 64 86 F1 | 	sub	objptr, ##2080
075f4     32 95 02 FB | 	rdlong	arg02, objptr
075f8     54 97 02 F6 | 	mov	arg03, local02
075fc     39 00 00 FF 
07600     34 65 86 F1 | 	sub	objptr, ##29492
07604     1C C5 B1 FD | 	call	#_psram_spin2_write
07608     2D 00 00 FF 
0760c     F8 64 06 F1 | 	add	objptr, ##23288
07610     32 93 02 FB | 	rdlong	arg01, objptr
07614     0C 00 00 FF 
07618     3C 64 06 F1 | 	add	objptr, ##6204
0761c     32 95 02 FB | 	rdlong	arg02, objptr
07620     54 95 02 F1 | 	add	arg02, local02
07624     53 97 02 F6 | 	mov	arg03, local01
07628     39 00 00 FF 
0762c     34 65 86 F1 | 	sub	objptr, ##29492
07630     F0 C4 B1 FD | 	call	#_psram_spin2_write
07634     39 00 00 FF 
07638     34 65 06 F1 | 	add	objptr, ##29492
0763c     32 A7 02 FB | 	rdlong	local01, objptr
07640     55 A7 02 F1 | 	add	local01, local03
07644     32 A7 62 FC | 	wrlong	local01, objptr
07648     45 00 00 FF 
0764c     00 64 86 F1 | 	sub	objptr, ##35328
07650     E7 F0 03 F6 | 	mov	ptra, fp
07654     F2 00 A0 FD | 	call	#popregs_
07658                 | _save_line_ret
07658     2D 00 64 FD | 	ret
0765c                 | 
0765c                 | ' 
0765c                 | ' '----- Insert a new line into the middle of the program
0765c                 | ' 
0765c                 | ' function insertline(aline as ulong) as integer
0765c                 | _insertline
0765c     04 CA 05 F6 | 	mov	COUNT_, #4
07660     E8 00 A0 FD | 	call	#pushregs_
07664     28 F0 07 F1 | 	add	ptra, #40
07668     49 A7 02 F6 | 	mov	local01, arg01
0766c     4C 00 00 FF 
07670     2C 64 06 F1 | 	add	objptr, ##38956
07674     32 A9 02 FB | 	rdlong	local02, objptr
07678                 | ' 
07678                 | ' do
07678     40 00 00 FF 
0767c     60 65 86 F1 | 	sub	objptr, ##33120
07680                 | LR__0640
07680     E7 92 02 F6 | 	mov	arg01, fp
07684     10 92 06 F1 | 	add	arg01, #16
07688     54 95 02 F6 | 	mov	arg02, local02
0768c     18 96 06 F6 | 	mov	arg03, #24
07690     F4 C3 B1 FD | 	call	#_psram_spin2_read1
07694     54 AB 02 F6 | 	mov	local03, local02
07698     24 CE 05 F1 | 	add	fp, #36
0769c     E7 A8 02 FB | 	rdlong	local02, fp
076a0     14 CE 85 F1 | 	sub	fp, #20
076a4     E7 96 02 FB | 	rdlong	arg03, fp
076a8     10 CE 85 F1 | 	sub	fp, #16
076ac     53 97 12 F2 | 	cmp	arg03, local01 wc
076b0     24 CE 05 C1 |  if_b	add	fp, #36
076b4     E7 AC 02 CB |  if_b	rdlong	local04, fp
076b8     24 CE 85 C1 |  if_b	sub	fp, #36
076bc     FF FF 3F CF 
076c0     FF AD 0E C2 |  if_b	cmp	local04, ##2147483647 wz
076c4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
076c8     0B 00 00 FF 
076cc     CC 64 86 F1 | 	sub	objptr, ##5836
076d0                 | ' 
076d0                 | ' if header(0)=aline then return -1 				' delete it first
076d0     10 CE 05 F1 | 	add	fp, #16
076d4     E7 AC 02 FB | 	rdlong	local04, fp
076d8     10 CE 85 F1 | 	sub	fp, #16
076dc     53 AD 0A F2 | 	cmp	local04, local01 wz
076e0     01 7A 66 A6 |  if_e	neg	result1, #1
076e4     24 01 90 AD |  if_e	jmp	#LR__0643
076e8                 | ' if header(0)<aline then return -2 				' end of program reached
076e8     10 CE 05 F1 | 	add	fp, #16
076ec     E7 AC 02 FB | 	rdlong	local04, fp
076f0     10 CE 85 F1 | 	sub	fp, #16
076f4     53 AD 12 F2 | 	cmp	local04, local01 wc
076f8     02 7A 66 C6 |  if_b	neg	result1, #2
076fc     0C 01 90 CD |  if_b	jmp	#LR__0643
07700                 | ' 
07700                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07700     20 CE 05 F1 | 	add	fp, #32
07704     E7 AC 02 FB | 	rdlong	local04, fp
07708     20 CE 85 F1 | 	sub	fp, #32
0770c     FF FF 7F FF 
07710     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07714     64 00 90 5D |  if_ne	jmp	#LR__0641
07718     45 00 00 FF 
0771c     00 64 06 F1 | 	add	objptr, ##35328
07720     32 AD 02 FB | 	rdlong	local04, objptr
07724     07 00 00 FF 
07728     2C 64 06 F1 | 	add	objptr, ##3628
0772c     32 AD 62 FC | 	wrlong	local04, objptr
07730     55 93 02 F6 | 	mov	arg01, local03
07734     10 92 06 F1 | 	add	arg01, #16
07738     07 00 00 FF 
0773c     2C 64 86 F1 | 	sub	objptr, ##3628
07740     32 95 02 FB | 	rdlong	arg02, objptr
07744     45 00 00 FF 
07748     00 64 86 F1 | 	sub	objptr, ##35328
0774c     20 97 B1 FD | 	call	#_pslpoke
07750     49 00 00 FF 
07754     30 64 06 F1 | 	add	objptr, ##37424
07758     FF FF FF FF 
0775c     32 FF 6B FC | 	wrlong	##-1, objptr
07760     04 64 06 F1 | 	add	objptr, #4
07764     32 AB 62 FC | 	wrlong	local03, objptr
07768     49 00 00 FF 
0776c     34 64 86 F1 | 	sub	objptr, ##37428
07770     DC FD BF FD | 	call	#_save_line
07774                 | '   programstart=programptr
07774                 | '   pslpoke(lineptr2+16,programptr)
07774                 | '   ucompiledline(4)=$FFFF_FFFF
07774                 | '   ucompiledline(5)=lineptr2
07774                 | '   save_line
07774                 | '   return 0
07774     00 7A 06 F6 | 	mov	result1, #0
07778     90 00 90 FD | 	jmp	#LR__0643
0777c                 | LR__0641
0777c                 | ' 
0777c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0777c     20 CE 05 F1 | 	add	fp, #32
07780     E7 AC 02 FB | 	rdlong	local04, fp
07784     20 CE 85 F1 | 	sub	fp, #32
07788     FF FF 7F FF 
0778c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07790     74 00 90 AD |  if_e	jmp	#LR__0642
07794     20 CE 05 F1 | 	add	fp, #32
07798     E7 AC 02 FB | 	rdlong	local04, fp
0779c     20 CE 85 F1 | 	sub	fp, #32
077a0     49 00 00 FF 
077a4     30 64 06 F1 | 	add	objptr, ##37424
077a8     32 AD 62 FC | 	wrlong	local04, objptr
077ac     04 64 06 F1 | 	add	objptr, #4
077b0     32 AB 62 FC | 	wrlong	local03, objptr
077b4     10 AA 06 F1 | 	add	local03, #16
077b8     04 00 00 FF 
077bc     34 64 86 F1 | 	sub	objptr, ##2100
077c0     32 95 02 FB | 	rdlong	arg02, objptr
077c4     45 00 00 FF 
077c8     00 64 86 F1 | 	sub	objptr, ##35328
077cc     55 93 02 F6 | 	mov	arg01, local03
077d0     9C 96 B1 FD | 	call	#_pslpoke
077d4     20 CE 05 F1 | 	add	fp, #32
077d8     E7 92 02 FB | 	rdlong	arg01, fp
077dc     20 CE 85 F1 | 	sub	fp, #32
077e0     14 92 06 F1 | 	add	arg01, #20
077e4     45 00 00 FF 
077e8     00 64 06 F1 | 	add	objptr, ##35328
077ec     32 95 02 FB | 	rdlong	arg02, objptr
077f0     45 00 00 FF 
077f4     00 64 86 F1 | 	sub	objptr, ##35328
077f8     74 96 B1 FD | 	call	#_pslpoke
077fc     50 FD BF FD | 	call	#_save_line
07800                 | '   ucompiledline(4)=header(4)
07800                 | '   ucompiledline(5)=lineptr2
07800                 | '   pslpoke(lineptr2+16,programptr)
07800                 | '   pslpoke(header(4)+20,programptr)
07800                 | '   save_line
07800                 | '   return 0
07800     00 7A 06 F6 | 	mov	result1, #0
07804     04 00 90 FD | 	jmp	#LR__0643
07808                 | LR__0642
07808     00 7A 06 F6 | 	mov	result1, #0
0780c                 | LR__0643
0780c     E7 F0 03 F6 | 	mov	ptra, fp
07810     F2 00 A0 FD | 	call	#popregs_
07814                 | _insertline_ret
07814     2D 00 64 FD | 	ret
07818                 | 
07818                 | ' 
07818                 | ' '----- Adds a new line at the end of the program
07818                 | ' 
07818                 | ' sub add_line_at_end(aline) 
07818                 | _add_line_at_end
07818     4C 00 00 FF 
0781c     30 64 06 F1 | 	add	objptr, ##38960
07820     32 93 62 FC | 	wrlong	arg01, objptr
07824     04 64 06 F1 | 	add	objptr, #4
07828     32 95 02 FB | 	rdlong	arg02, objptr
0782c     03 00 00 FF 
07830     04 64 86 F1 | 	sub	objptr, ##1540
07834     32 95 62 FC | 	wrlong	arg02, objptr
07838     03 00 00 FF 
0783c     04 64 06 F1 | 	add	objptr, ##1540
07840     32 93 02 FB | 	rdlong	arg01, objptr
07844     14 92 06 F1 | 	add	arg01, #20
07848     07 00 00 FF 
0784c     34 64 86 F1 | 	sub	objptr, ##3636
07850     32 95 02 FB | 	rdlong	arg02, objptr
07854     45 00 00 FF 
07858     00 64 86 F1 | 	sub	objptr, ##35328
0785c     10 96 B1 FD | 	call	#_pslpoke
07860     45 00 00 FF 
07864     00 64 06 F1 | 	add	objptr, ##35328
07868     32 95 02 FB | 	rdlong	arg02, objptr
0786c     07 00 00 FF 
07870     34 64 06 F1 | 	add	objptr, ##3636
07874     32 95 62 FC | 	wrlong	arg02, objptr
07878     03 00 00 FF 
0787c     00 64 86 F1 | 	sub	objptr, ##1536
07880     FF FF BF FF 
07884     32 FF 6B FC | 	wrlong	##2147483647, objptr
07888                 | ' 
07888                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07888                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07888     04 00 00 FF 
0788c     34 64 86 F1 | 	sub	objptr, ##2100
07890     32 95 02 FB | 	rdlong	arg02, objptr
07894     45 00 00 FF 
07898     00 64 86 F1 | 	sub	objptr, ##35328
0789c     00 04 00 FF 
078a0     00 94 0E F2 | 	cmp	arg02, ##524288 wz
078a4     49 00 00 AF 
078a8     30 64 06 A1 |  if_e	add	objptr, ##37424
078ac     FF FF FF AF 
078b0     32 FF 6B AC |  if_e	wrlong	##-1, objptr
078b4     49 00 00 AF 
078b8     30 64 86 A1 |  if_e	sub	objptr, ##37424
078bc     90 FC BF FD | 	call	#_save_line
078c0     45 00 00 FF 
078c4     00 64 06 F1 | 	add	objptr, ##35328
078c8     32 93 02 FB | 	rdlong	arg01, objptr
078cc     45 00 00 FF 
078d0     00 64 86 F1 | 	sub	objptr, ##35328
078d4     01 94 66 F6 | 	neg	arg02, #1
078d8     94 95 B1 FD | 	call	#_pslpoke
078dc                 | _add_line_at_end_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078e0                 | ' 
078e0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078e0                 | _compile_immediate
078e0     0A CA 05 F6 | 	mov	COUNT_, #10
078e4     E8 00 A0 FD | 	call	#pushregs_
078e8                 | _compile_immediate_enter
078e8     49 AD 02 F6 | 	mov	local04, arg01
078ec     4A AF 02 F6 | 	mov	local05, arg02
078f0     00 B0 06 F6 | 	mov	local06, #0
078f4     00 B2 06 F6 | 	mov	local07, #0
078f8     00 B4 06 F6 | 	mov	local08, #0
078fc                 | ' 
078fc                 | ' ' linetype=cont+1
078fc                 | ' ' 1 : this is the first part of the line that will continue
078fc                 | ' ' 2 - this is the continuation of the line
078fc                 | ' ' 3 - this is the last continued line
078fc                 | ' ' 4 - this is the one and only part
078fc                 | ' ' 5 - continued after if/else
078fc                 | ' 
078fc                 | ' err=0
078fc                 | ' cmd=0
078fc                 | ' vars=0
078fc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
078fc     02 AC 0E F2 | 	cmp	local04, #2 wz
07900     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
07904     36 00 00 AF 
07908     B4 65 06 A1 |  if_e	add	objptr, ##28084
0790c     32 B3 02 AB |  if_e	rdlong	local07, objptr
07910     02 00 00 AF 
07914     34 64 06 A1 |  if_e	add	objptr, ##1076
07918     32 03 68 AC |  if_e	wrlong	#1, objptr
0791c     38 00 00 AF 
07920     E8 65 86 A1 |  if_e	sub	objptr, ##29160
07924                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07924     04 AC 0E F2 | 	cmp	local04, #4 wz
07928     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
0792c     2C 00 90 5D |  if_ne	jmp	#LR__0650
07930     36 00 00 FF 
07934     BC 65 06 F1 | 	add	objptr, ##28092
07938     32 B3 02 FB | 	rdlong	local07, objptr
0793c     02 00 00 FF 
07940     2C 64 06 F1 | 	add	objptr, ##1068
07944     32 05 68 FC | 	wrlong	#2, objptr
07948     13 00 00 FF 
0794c     38 64 06 F1 | 	add	objptr, ##9784
07950     32 05 68 FC | 	wrlong	#2, objptr
07954     4C 00 00 FF 
07958     20 64 86 F1 | 	sub	objptr, ##38944
0795c                 | LR__0650
0795c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
0795c     05 AC 0E F2 | 	cmp	local04, #5 wz
07960     40 00 90 5D |  if_ne	jmp	#LR__0651
07964     38 00 00 FF 
07968     E8 65 06 F1 | 	add	objptr, ##29160
0796c     32 7D 02 FB | 	rdlong	result2, objptr
07970     3E B7 02 F6 | 	mov	local09, result2
07974     03 B6 66 F0 | 	shl	local09, #3
07978     02 00 00 FF 
0797c     38 64 86 F1 | 	sub	objptr, ##1080
07980     32 B7 02 F1 | 	add	local09, objptr
07984     04 B6 06 F1 | 	add	local09, #4
07988     5B B3 02 FB | 	rdlong	local07, local09
0798c     01 7C 06 F1 | 	add	result2, #1
07990     02 00 00 FF 
07994     38 64 06 F1 | 	add	objptr, ##1080
07998     32 7D 62 FC | 	wrlong	result2, objptr
0799c     38 00 00 FF 
079a0     E8 65 86 F1 | 	sub	objptr, ##29160
079a4                 | LR__0651
079a4                 | ' 
079a4                 | ' 'print  "In compile_immediate cmd=:", cmd
079a4                 | ' 451 select case cmd
079a4     5C B2 0E F2 | 	cmp	local07, #92 wz
079a8     E8 02 90 AD |  if_e	jmp	#LR__0652
079ac     B9 B2 0E F2 | 	cmp	local07, #185 wz
079b0     EC 02 90 AD |  if_e	jmp	#LR__0653
079b4     47 B2 0E F2 | 	cmp	local07, #71 wz
079b8     F4 02 90 AD |  if_e	jmp	#LR__0654
079bc     59 B2 0E F2 | 	cmp	local07, #89 wz
079c0     FC 02 90 AD |  if_e	jmp	#LR__0655
079c4     C3 B2 0E F2 | 	cmp	local07, #195 wz
079c8     04 03 90 AD |  if_e	jmp	#LR__0656
079cc     45 B2 0E F2 | 	cmp	local07, #69 wz
079d0     08 03 90 AD |  if_e	jmp	#LR__0657
079d4     69 B2 0E F2 | 	cmp	local07, #105 wz
079d8     10 03 90 AD |  if_e	jmp	#LR__0658
079dc     40 B2 0E F2 | 	cmp	local07, #64 wz
079e0     18 07 90 AD |  if_e	jmp	#LR__0735
079e4     B4 B2 0E F2 | 	cmp	local07, #180 wz
079e8     0C 03 90 AD |  if_e	jmp	#LR__0659
079ec     49 B2 0E F2 | 	cmp	local07, #73 wz
079f0     10 03 90 AD |  if_e	jmp	#LR__0660
079f4     C4 B2 0E F2 | 	cmp	local07, #196 wz
079f8     14 03 90 AD |  if_e	jmp	#LR__0661
079fc     AE B2 0E F2 | 	cmp	local07, #174 wz
07a00     18 03 90 AD |  if_e	jmp	#LR__0662
07a04     B0 B2 0E F2 | 	cmp	local07, #176 wz
07a08     1C 03 90 AD |  if_e	jmp	#LR__0663
07a0c     AF B2 0E F2 | 	cmp	local07, #175 wz
07a10     20 03 90 AD |  if_e	jmp	#LR__0664
07a14     B1 B2 0E F2 | 	cmp	local07, #177 wz
07a18     24 03 90 AD |  if_e	jmp	#LR__0665
07a1c     CF B2 0E F2 | 	cmp	local07, #207 wz
07a20     28 03 90 AD |  if_e	jmp	#LR__0666
07a24     68 B2 0E F2 | 	cmp	local07, #104 wz
07a28     2C 03 90 AD |  if_e	jmp	#LR__0667
07a2c     B7 B2 0E F2 | 	cmp	local07, #183 wz
07a30     C8 06 90 AD |  if_e	jmp	#LR__0735
07a34     D9 B2 0E F2 | 	cmp	local07, #217 wz
07a38     28 03 90 AD |  if_e	jmp	#LR__0668
07a3c     74 B2 0E F2 | 	cmp	local07, #116 wz
07a40     2C 03 90 AD |  if_e	jmp	#LR__0669
07a44     73 B2 0E F2 | 	cmp	local07, #115 wz
07a48     34 03 90 AD |  if_e	jmp	#LR__0670
07a4c     6C B2 0E F2 | 	cmp	local07, #108 wz
07a50     3C 03 90 AD |  if_e	jmp	#LR__0671
07a54     89 B2 0E F2 | 	cmp	local07, #137 wz
07a58     A0 06 90 AD |  if_e	jmp	#LR__0735
07a5c     C2 B2 0E F2 | 	cmp	local07, #194 wz
07a60     3C 03 90 AD |  if_e	jmp	#LR__0672
07a64     72 B2 0E F2 | 	cmp	local07, #114 wz
07a68     40 03 90 AD |  if_e	jmp	#LR__0673
07a6c     5D B2 0E F2 | 	cmp	local07, #93 wz
07a70     44 03 90 AD |  if_e	jmp	#LR__0674
07a74     96 B2 0E F2 | 	cmp	local07, #150 wz
07a78     4C 03 90 AD |  if_e	jmp	#LR__0675
07a7c     43 B2 0E F2 | 	cmp	local07, #67 wz
07a80     50 03 90 AD |  if_e	jmp	#LR__0676
07a84     5A B2 0E F2 | 	cmp	local07, #90 wz
07a88     58 03 90 AD |  if_e	jmp	#LR__0677
07a8c     AB B2 0E F2 | 	cmp	local07, #171 wz
07a90     68 06 90 AD |  if_e	jmp	#LR__0735
07a94     BD B2 0E F2 | 	cmp	local07, #189 wz
07a98     58 03 90 AD |  if_e	jmp	#LR__0678
07a9c     BB B2 0E F2 | 	cmp	local07, #187 wz
07aa0     60 03 90 AD |  if_e	jmp	#LR__0679
07aa4     4E B2 0E F2 | 	cmp	local07, #78 wz
07aa8     68 03 90 AD |  if_e	jmp	#LR__0680
07aac     A9 B2 0E F2 | 	cmp	local07, #169 wz
07ab0     80 03 90 AD |  if_e	jmp	#LR__0682
07ab4     46 B2 0E F2 | 	cmp	local07, #70 wz
07ab8     98 03 90 AD |  if_e	jmp	#LR__0684
07abc     71 B2 0E F2 | 	cmp	local07, #113 wz
07ac0     A0 03 90 AD |  if_e	jmp	#LR__0685
07ac4     60 B2 0E F2 | 	cmp	local07, #96 wz
07ac8     A4 03 90 AD |  if_e	jmp	#LR__0686
07acc     4A B2 0E F2 | 	cmp	local07, #74 wz
07ad0     A8 03 90 AD |  if_e	jmp	#LR__0687
07ad4     48 B2 0E F2 | 	cmp	local07, #72 wz
07ad8     AC 03 90 AD |  if_e	jmp	#LR__0688
07adc     58 B2 0E F2 | 	cmp	local07, #88 wz
07ae0     B4 03 90 AD |  if_e	jmp	#LR__0689
07ae4     5F B2 0E F2 | 	cmp	local07, #95 wz
07ae8     BC 03 90 AD |  if_e	jmp	#LR__0690
07aec     B5 B2 0E F2 | 	cmp	local07, #181 wz
07af0     C0 03 90 AD |  if_e	jmp	#LR__0691
07af4     8A B2 0E F2 | 	cmp	local07, #138 wz
07af8     C8 03 90 AD |  if_e	jmp	#LR__0692
07afc     4C B2 0E F2 | 	cmp	local07, #76 wz
07b00     CC 03 90 AD |  if_e	jmp	#LR__0693
07b04     52 B2 0E F2 | 	cmp	local07, #82 wz
07b08     D4 03 90 AD |  if_e	jmp	#LR__0694
07b0c     97 B2 0E F2 | 	cmp	local07, #151 wz
07b10     DC 03 90 AD |  if_e	jmp	#LR__0695
07b14     C6 B2 0E F2 | 	cmp	local07, #198 wz
07b18     E0 03 90 AD |  if_e	jmp	#LR__0696
07b1c     61 B2 0E F2 | 	cmp	local07, #97 wz
07b20     E4 03 90 AD |  if_e	jmp	#LR__0697
07b24     63 B2 0E F2 | 	cmp	local07, #99 wz
07b28     E8 03 90 AD |  if_e	jmp	#LR__0698
07b2c     41 B2 0E F2 | 	cmp	local07, #65 wz
07b30     C8 05 90 AD |  if_e	jmp	#LR__0735
07b34     4B B2 0E F2 | 	cmp	local07, #75 wz
07b38     E4 03 90 AD |  if_e	jmp	#LR__0699
07b3c     C1 B2 0E F2 | 	cmp	local07, #193 wz
07b40     E8 03 90 AD |  if_e	jmp	#LR__0700
07b44     B3 B2 0E F2 | 	cmp	local07, #179 wz
07b48     EC 03 90 AD |  if_e	jmp	#LR__0701
07b4c     5E B2 0E F2 | 	cmp	local07, #94 wz
07b50     F0 03 90 AD |  if_e	jmp	#LR__0702
07b54     7C B2 0E F2 | 	cmp	local07, #124 wz
07b58     F4 03 90 AD |  if_e	jmp	#LR__0703
07b5c     7D B2 0E F2 | 	cmp	local07, #125 wz
07b60     F8 03 90 AD |  if_e	jmp	#LR__0704
07b64     7E B2 0E F2 | 	cmp	local07, #126 wz
07b68     FC 03 90 AD |  if_e	jmp	#LR__0705
07b6c     7F B2 0E F2 | 	cmp	local07, #127 wz
07b70     00 04 90 AD |  if_e	jmp	#LR__0706
07b74     80 B2 0E F2 | 	cmp	local07, #128 wz
07b78     04 04 90 AD |  if_e	jmp	#LR__0707
07b7c     55 B2 0E F2 | 	cmp	local07, #85 wz
07b80     08 04 90 AD |  if_e	jmp	#LR__0708
07b84     75 B2 0E F2 | 	cmp	local07, #117 wz
07b88     0C 04 90 AD |  if_e	jmp	#LR__0709
07b8c     42 B2 0E F2 | 	cmp	local07, #66 wz
07b90     14 04 90 AD |  if_e	jmp	#LR__0710
07b94     95 B2 0E F2 | 	cmp	local07, #149 wz
07b98     1C 04 90 AD |  if_e	jmp	#LR__0711
07b9c     AC B2 0E F2 | 	cmp	local07, #172 wz
07ba0     58 05 90 AD |  if_e	jmp	#LR__0735
07ba4     81 B2 0E F2 | 	cmp	local07, #129 wz
07ba8     18 04 90 AD |  if_e	jmp	#LR__0712
07bac     44 B2 0E F2 | 	cmp	local07, #68 wz
07bb0     1C 04 90 AD |  if_e	jmp	#LR__0713
07bb4     BC B2 0E F2 | 	cmp	local07, #188 wz
07bb8     20 04 90 AD |  if_e	jmp	#LR__0714
07bbc     88 B2 0E F2 | 	cmp	local07, #136 wz
07bc0     38 05 90 AD |  if_e	jmp	#LR__0735
07bc4     B6 B2 0E F2 | 	cmp	local07, #182 wz
07bc8     20 04 90 AD |  if_e	jmp	#LR__0715
07bcc     92 B2 0E F2 | 	cmp	local07, #146 wz
07bd0     28 04 90 AD |  if_e	jmp	#LR__0716
07bd4     BE B2 0E F2 | 	cmp	local07, #190 wz
07bd8     DC 05 90 AD |  if_e	jmp	#LR__0736
07bdc     C7 B2 0E F2 | 	cmp	local07, #199 wz
07be0     D4 B2 0E 52 |  if_ne	cmp	local07, #212 wz
07be4     AA B2 0E 52 |  if_ne	cmp	local07, #170 wz
07be8     10 05 90 AD |  if_e	jmp	#LR__0735
07bec     4D B2 0E F2 | 	cmp	local07, #77 wz
07bf0     14 04 90 AD |  if_e	jmp	#LR__0717
07bf4     51 B2 0E F2 | 	cmp	local07, #81 wz
07bf8     1C 04 90 AD |  if_e	jmp	#LR__0718
07bfc     DA B2 0E F2 | 	cmp	local07, #218 wz
07c00     24 04 90 AD |  if_e	jmp	#LR__0719
07c04     D2 B2 0E F2 | 	cmp	local07, #210 wz
07c08     28 04 90 AD |  if_e	jmp	#LR__0720
07c0c     8E B2 0E F2 | 	cmp	local07, #142 wz
07c10     30 04 90 AD |  if_e	jmp	#LR__0721
07c14     90 B2 0E F2 | 	cmp	local07, #144 wz
07c18     34 04 90 AD |  if_e	jmp	#LR__0722
07c1c     8D B2 0E F2 | 	cmp	local07, #141 wz
07c20     38 04 90 AD |  if_e	jmp	#LR__0723
07c24     8C B2 0E F2 | 	cmp	local07, #140 wz
07c28     3C 04 90 AD |  if_e	jmp	#LR__0724
07c2c     91 B2 0E F2 | 	cmp	local07, #145 wz
07c30     40 04 90 AD |  if_e	jmp	#LR__0725
07c34     8B B2 0E F2 | 	cmp	local07, #139 wz
07c38     44 04 90 AD |  if_e	jmp	#LR__0726
07c3c     8F B2 0E F2 | 	cmp	local07, #143 wz
07c40     48 04 90 AD |  if_e	jmp	#LR__0727
07c44     B2 B2 0E F2 | 	cmp	local07, #178 wz
07c48     4C 04 90 AD |  if_e	jmp	#LR__0728
07c4c     6D B2 0E F2 | 	cmp	local07, #109 wz
07c50     54 04 90 AD |  if_e	jmp	#LR__0729
07c54     70 B2 0E F2 | 	cmp	local07, #112 wz
07c58     A0 04 90 AD |  if_e	jmp	#LR__0735
07c5c     56 B2 0E F2 | 	cmp	local07, #86 wz
07c60     50 04 90 AD |  if_e	jmp	#LR__0730
07c64     57 B2 0E F2 | 	cmp	local07, #87 wz
07c68     90 04 90 AD |  if_e	jmp	#LR__0735
07c6c     79 B2 0E F2 | 	cmp	local07, #121 wz
07c70     4C 04 90 AD |  if_e	jmp	#LR__0731
07c74     77 B2 0E F2 | 	cmp	local07, #119 wz
07c78     50 04 90 AD |  if_e	jmp	#LR__0732
07c7c     78 B2 0E F2 | 	cmp	local07, #120 wz
07c80     54 04 90 AD |  if_e	jmp	#LR__0733
07c84     01 00 00 FF 
07c88     04 B2 0E F2 | 	cmp	local07, ##516 wz
07c8c     54 04 90 AD |  if_e	jmp	#LR__0734
07c90     24 05 90 FD | 	jmp	#LR__0736
07c94                 | LR__0652
07c94     54 0B B0 FD | 	call	#_compile_fun_2p
07c98     3D B1 02 F6 | 	mov	local06, result1
07c9c     5C 04 90 FD | 	jmp	#LR__0735
07ca0                 | LR__0653
07ca0     18 0E B0 FD | 	call	#_compile_fun_varp
07ca4     3D B5 02 F6 | 	mov	local08, result1
07ca8     3E B1 02 F6 | 	mov	local06, result2
07cac     4C 04 90 FD | 	jmp	#LR__0735
07cb0                 | LR__0654
07cb0     08 0E B0 FD | 	call	#_compile_fun_varp
07cb4     3D B5 02 F6 | 	mov	local08, result1
07cb8     3E B1 02 F6 | 	mov	local06, result2
07cbc     3C 04 90 FD | 	jmp	#LR__0735
07cc0                 | LR__0655
07cc0     F8 0D B0 FD | 	call	#_compile_fun_varp
07cc4     3D B5 02 F6 | 	mov	local08, result1
07cc8     3E B1 02 F6 | 	mov	local06, result2
07ccc     2C 04 90 FD | 	jmp	#LR__0735
07cd0                 | LR__0656
07cd0                 | ' return expr()
07cd0     84 41 B0 FD | 	call	#_expr
07cd4     3D B1 02 F6 | 	mov	local06, result1
07cd8     20 04 90 FD | 	jmp	#LR__0735
07cdc                 | LR__0657
07cdc     DC 0D B0 FD | 	call	#_compile_fun_varp
07ce0     3D B5 02 F6 | 	mov	local08, result1
07ce4     3E B1 02 F6 | 	mov	local06, result2
07ce8     10 04 90 FD | 	jmp	#LR__0735
07cec                 | LR__0658
07cec                 | ' return expr()
07cec     68 41 B0 FD | 	call	#_expr
07cf0     3D B1 02 F6 | 	mov	local06, result1
07cf4     04 04 90 FD | 	jmp	#LR__0735
07cf8                 | LR__0659
07cf8                 | ' return expr()
07cf8     5C 41 B0 FD | 	call	#_expr
07cfc     3D B1 02 F6 | 	mov	local06, result1
07d00     F8 03 90 FD | 	jmp	#LR__0735
07d04                 | LR__0660
07d04                 | ' return expr()
07d04     50 41 B0 FD | 	call	#_expr
07d08     3D B1 02 F6 | 	mov	local06, result1
07d0c     EC 03 90 FD | 	jmp	#LR__0735
07d10                 | LR__0661
07d10     D8 0A B0 FD | 	call	#_compile_fun_2p
07d14     3D B1 02 F6 | 	mov	local06, result1
07d18     E0 03 90 FD | 	jmp	#LR__0735
07d1c                 | LR__0662
07d1c     CC 0A B0 FD | 	call	#_compile_fun_2p
07d20     3D B1 02 F6 | 	mov	local06, result1
07d24     D4 03 90 FD | 	jmp	#LR__0735
07d28                 | LR__0663
07d28     C0 0A B0 FD | 	call	#_compile_fun_2p
07d2c     3D B1 02 F6 | 	mov	local06, result1
07d30     C8 03 90 FD | 	jmp	#LR__0735
07d34                 | LR__0664
07d34     B4 0A B0 FD | 	call	#_compile_fun_2p
07d38     3D B1 02 F6 | 	mov	local06, result1
07d3c     BC 03 90 FD | 	jmp	#LR__0735
07d40                 | LR__0665
07d40     A8 0A B0 FD | 	call	#_compile_fun_2p
07d44     3D B1 02 F6 | 	mov	local06, result1
07d48     B0 03 90 FD | 	jmp	#LR__0735
07d4c                 | LR__0666
07d4c                 | ' return expr()
07d4c     08 41 B0 FD | 	call	#_expr
07d50     3D B1 02 F6 | 	mov	local06, result1
07d54     A4 03 90 FD | 	jmp	#LR__0735
07d58                 | LR__0667
07d58                 | ' return expr()
07d58     FC 40 B0 FD | 	call	#_expr
07d5c     3D B1 02 F6 | 	mov	local06, result1
07d60     98 03 90 FD | 	jmp	#LR__0735
07d64                 | LR__0668
07d64     84 0A B0 FD | 	call	#_compile_fun_2p
07d68     3D B1 02 F6 | 	mov	local06, result1
07d6c     8C 03 90 FD | 	jmp	#LR__0735
07d70                 | LR__0669
07d70     48 0D B0 FD | 	call	#_compile_fun_varp
07d74     3D B5 02 F6 | 	mov	local08, result1
07d78     3E B1 02 F6 | 	mov	local06, result2
07d7c     7C 03 90 FD | 	jmp	#LR__0735
07d80                 | LR__0670
07d80     38 0D B0 FD | 	call	#_compile_fun_varp
07d84     3D B5 02 F6 | 	mov	local08, result1
07d88     3E B1 02 F6 | 	mov	local06, result2
07d8c     6C 03 90 FD | 	jmp	#LR__0735
07d90                 | LR__0671
07d90     28 0D B0 FD | 	call	#_compile_fun_varp
07d94     3D B5 02 F6 | 	mov	local08, result1
07d98     3E B1 02 F6 | 	mov	local06, result2
07d9c     5C 03 90 FD | 	jmp	#LR__0735
07da0                 | LR__0672
07da0                 | ' return expr()
07da0     B4 40 B0 FD | 	call	#_expr
07da4     3D B1 02 F6 | 	mov	local06, result1
07da8     50 03 90 FD | 	jmp	#LR__0735
07dac                 | LR__0673
07dac     2C 22 B0 FD | 	call	#_compile_dim
07db0     3D B1 02 F6 | 	mov	local06, result1
07db4     00 04 90 FD | 	jmp	#LR__0736
07db8                 | LR__0674
07db8     00 0D B0 FD | 	call	#_compile_fun_varp
07dbc     3D B5 02 F6 | 	mov	local08, result1
07dc0     3E B1 02 F6 | 	mov	local06, result2
07dc4     34 03 90 FD | 	jmp	#LR__0735
07dc8                 | LR__0675
07dc8     20 0A B0 FD | 	call	#_compile_fun_2p
07dcc     3D B1 02 F6 | 	mov	local06, result1
07dd0     28 03 90 FD | 	jmp	#LR__0735
07dd4                 | LR__0676
07dd4     E4 0C B0 FD | 	call	#_compile_fun_varp
07dd8     3D B5 02 F6 | 	mov	local08, result1
07ddc     3E B1 02 F6 | 	mov	local06, result2
07de0     18 03 90 FD | 	jmp	#LR__0735
07de4                 | LR__0677
07de4     57 93 02 F6 | 	mov	arg01, local05
07de8     B8 20 B0 FD | 	call	#_compile_else
07dec     3D B1 02 F6 | 	mov	local06, result1
07df0     C4 03 90 FD | 	jmp	#LR__0736
07df4                 | LR__0678
07df4     C4 0C B0 FD | 	call	#_compile_fun_varp
07df8     3D B5 02 F6 | 	mov	local08, result1
07dfc     3E B1 02 F6 | 	mov	local06, result2
07e00     F8 02 90 FD | 	jmp	#LR__0735
07e04                 | LR__0679
07e04     B4 0C B0 FD | 	call	#_compile_fun_varp
07e08     3D B5 02 F6 | 	mov	local08, result1
07e0c     3E B1 02 F6 | 	mov	local06, result2
07e10     E8 02 90 FD | 	jmp	#LR__0735
07e14                 | LR__0680
07e14     01 AE 16 F2 | 	cmp	local05, #1 wc
07e18     08 00 90 CD |  if_b	jmp	#LR__0681
07e1c     40 33 B0 FD | 	call	#_compile_goto
07e20     94 03 90 FD | 	jmp	#LR__0736
07e24                 | LR__0681
07e24     19 92 06 F6 | 	mov	arg01, #25
07e28     00 94 06 F6 | 	mov	arg02, #0
07e2c     A4 8E B1 FD | 	call	#_printerror
07e30     84 03 90 FD | 	jmp	#LR__0736
07e34                 | LR__0682
07e34     01 AE 16 F2 | 	cmp	local05, #1 wc
07e38     08 00 90 CD |  if_b	jmp	#LR__0683
07e3c     BC 32 B0 FD | 	call	#_compile_gosub
07e40     74 03 90 FD | 	jmp	#LR__0736
07e44                 | LR__0683
07e44     19 92 06 F6 | 	mov	arg01, #25
07e48     00 94 06 F6 | 	mov	arg02, #0
07e4c     84 8E B1 FD | 	call	#_printerror
07e50     64 03 90 FD | 	jmp	#LR__0736
07e54                 | LR__0684
07e54     64 0C B0 FD | 	call	#_compile_fun_varp
07e58     3D B5 02 F6 | 	mov	local08, result1
07e5c     3E B1 02 F6 | 	mov	local06, result2
07e60     98 02 90 FD | 	jmp	#LR__0735
07e64                 | LR__0685
07e64     FC 0A B0 FD | 	call	#_compile_fun_4p
07e68     3D B1 02 F6 | 	mov	local06, result1
07e6c     8C 02 90 FD | 	jmp	#LR__0735
07e70                 | LR__0686
07e70                 | ' return expr()
07e70     E4 3F B0 FD | 	call	#_expr
07e74     3D B1 02 F6 | 	mov	local06, result1
07e78     80 02 90 FD | 	jmp	#LR__0735
07e7c                 | LR__0687
07e7c     10 28 B0 FD | 	call	#_compile_for
07e80     3D B1 02 F6 | 	mov	local06, result1
07e84     30 03 90 FD | 	jmp	#LR__0736
07e88                 | LR__0688
07e88     30 0C B0 FD | 	call	#_compile_fun_varp
07e8c     3D B5 02 F6 | 	mov	local08, result1
07e90     3E B1 02 F6 | 	mov	local06, result2
07e94     64 02 90 FD | 	jmp	#LR__0735
07e98                 | LR__0689
07e98     57 93 02 F6 | 	mov	arg01, local05
07e9c     7C 1E B0 FD | 	call	#_compile_if
07ea0     3D B1 02 F6 | 	mov	local06, result1
07ea4     10 03 90 FD | 	jmp	#LR__0736
07ea8                 | LR__0690
07ea8                 | ' return expr()
07ea8     AC 3F B0 FD | 	call	#_expr
07eac     3D B1 02 F6 | 	mov	local06, result1
07eb0     48 02 90 FD | 	jmp	#LR__0735
07eb4                 | LR__0691
07eb4     D0 0D B0 FD | 	call	#_compile_input
07eb8     3D B5 02 F6 | 	mov	local08, result1
07ebc     3E B1 02 F6 | 	mov	local06, result2
07ec0     38 02 90 FD | 	jmp	#LR__0735
07ec4                 | LR__0692
07ec4                 | ' return expr()
07ec4     90 3F B0 FD | 	call	#_expr
07ec8     3D B1 02 F6 | 	mov	local06, result1
07ecc     2C 02 90 FD | 	jmp	#LR__0735
07ed0                 | LR__0693
07ed0     E8 0B B0 FD | 	call	#_compile_fun_varp
07ed4     3D B5 02 F6 | 	mov	local08, result1
07ed8     3E B1 02 F6 | 	mov	local06, result2
07edc     1C 02 90 FD | 	jmp	#LR__0735
07ee0                 | LR__0694
07ee0     D8 0B B0 FD | 	call	#_compile_fun_varp
07ee4     3D B5 02 F6 | 	mov	local08, result1
07ee8     3E B1 02 F6 | 	mov	local06, result2
07eec     0C 02 90 FD | 	jmp	#LR__0735
07ef0                 | LR__0695
07ef0     F8 08 B0 FD | 	call	#_compile_fun_2p
07ef4     3D B1 02 F6 | 	mov	local06, result1
07ef8     00 02 90 FD | 	jmp	#LR__0735
07efc                 | LR__0696
07efc                 | ' return expr()
07efc     58 3F B0 FD | 	call	#_expr
07f00     3D B1 02 F6 | 	mov	local06, result1
07f04     F4 01 90 FD | 	jmp	#LR__0735
07f08                 | LR__0697
07f08                 | ' return expr()
07f08     4C 3F B0 FD | 	call	#_expr
07f0c     3D B1 02 F6 | 	mov	local06, result1
07f10     E8 01 90 FD | 	jmp	#LR__0735
07f14                 | LR__0698
07f14                 | ' return expr()
07f14     40 3F B0 FD | 	call	#_expr
07f18     3D B1 02 F6 | 	mov	local06, result1
07f1c     DC 01 90 FD | 	jmp	#LR__0735
07f20                 | LR__0699
07f20     44 30 B0 FD | 	call	#_compile_next
07f24     3D B1 02 F6 | 	mov	local06, result1
07f28     8C 02 90 FD | 	jmp	#LR__0736
07f2c                 | LR__0700
07f2c     A4 35 B0 FD | 	call	#_compile_on
07f30     3D B1 02 F6 | 	mov	local06, result1
07f34     80 02 90 FD | 	jmp	#LR__0736
07f38                 | LR__0701
07f38     38 09 B0 FD | 	call	#_compile_fun_3p
07f3c     3D B1 02 F6 | 	mov	local06, result1
07f40     B8 01 90 FD | 	jmp	#LR__0735
07f44                 | LR__0702
07f44                 | ' return expr()
07f44     10 3F B0 FD | 	call	#_expr
07f48     3D B1 02 F6 | 	mov	local06, result1
07f4c     AC 01 90 FD | 	jmp	#LR__0735
07f50                 | LR__0703
07f50                 | ' return expr()
07f50     04 3F B0 FD | 	call	#_expr
07f54     3D B1 02 F6 | 	mov	local06, result1
07f58     A0 01 90 FD | 	jmp	#LR__0735
07f5c                 | LR__0704
07f5c                 | ' return expr()
07f5c     F8 3E B0 FD | 	call	#_expr
07f60     3D B1 02 F6 | 	mov	local06, result1
07f64     94 01 90 FD | 	jmp	#LR__0735
07f68                 | LR__0705
07f68                 | ' return expr()
07f68     EC 3E B0 FD | 	call	#_expr
07f6c     3D B1 02 F6 | 	mov	local06, result1
07f70     88 01 90 FD | 	jmp	#LR__0735
07f74                 | LR__0706
07f74     EC 09 B0 FD | 	call	#_compile_fun_4p
07f78     3D B1 02 F6 | 	mov	local06, result1
07f7c     7C 01 90 FD | 	jmp	#LR__0735
07f80                 | LR__0707
07f80                 | ' return expr()
07f80     D4 3E B0 FD | 	call	#_expr
07f84     3D B1 02 F6 | 	mov	local06, result1
07f88     70 01 90 FD | 	jmp	#LR__0735
07f8c                 | LR__0708
07f8c     5C 08 B0 FD | 	call	#_compile_fun_2p
07f90     3D B1 02 F6 | 	mov	local06, result1
07f94     64 01 90 FD | 	jmp	#LR__0735
07f98                 | LR__0709
07f98     20 0B B0 FD | 	call	#_compile_fun_varp
07f9c     3D B5 02 F6 | 	mov	local08, result1
07fa0     3E B1 02 F6 | 	mov	local06, result2
07fa4     54 01 90 FD | 	jmp	#LR__0735
07fa8                 | LR__0710
07fa8     10 0B B0 FD | 	call	#_compile_fun_varp
07fac     3D B5 02 F6 | 	mov	local08, result1
07fb0     3E B1 02 F6 | 	mov	local06, result2
07fb4     44 01 90 FD | 	jmp	#LR__0735
07fb8                 | LR__0711
07fb8     30 08 B0 FD | 	call	#_compile_fun_2p
07fbc     3D B1 02 F6 | 	mov	local06, result1
07fc0     38 01 90 FD | 	jmp	#LR__0735
07fc4                 | LR__0712
07fc4     24 08 B0 FD | 	call	#_compile_fun_2p
07fc8     3D B1 02 F6 | 	mov	local06, result1
07fcc     2C 01 90 FD | 	jmp	#LR__0735
07fd0                 | LR__0713
07fd0     70 16 B0 FD | 	call	#_compile_print
07fd4     3D B1 02 F6 | 	mov	local06, result1
07fd8     DC 01 90 FD | 	jmp	#LR__0736
07fdc                 | LR__0714
07fdc     DC 0A B0 FD | 	call	#_compile_fun_varp
07fe0     3D B5 02 F6 | 	mov	local08, result1
07fe4     3E B1 02 F6 | 	mov	local06, result2
07fe8     10 01 90 FD | 	jmp	#LR__0735
07fec                 | LR__0715
07fec     A8 0B B0 FD | 	call	#_compile_read
07ff0     3D B5 02 F6 | 	mov	local08, result1
07ff4     3E B1 02 F6 | 	mov	local06, result2
07ff8     00 01 90 FD | 	jmp	#LR__0735
07ffc                 | LR__0716
07ffc                 | ' return expr()
07ffc     58 3E B0 FD | 	call	#_expr
08000     3D B1 02 F6 | 	mov	local06, result1
08004     F4 00 90 FD | 	jmp	#LR__0735
08008                 | LR__0717
08008     B0 0A B0 FD | 	call	#_compile_fun_varp
0800c     3D B5 02 F6 | 	mov	local08, result1
08010     3E B1 02 F6 | 	mov	local06, result2
08014     E4 00 90 FD | 	jmp	#LR__0735
08018                 | LR__0718
08018     A0 0A B0 FD | 	call	#_compile_fun_varp
0801c     3D B5 02 F6 | 	mov	local08, result1
08020     3E B1 02 F6 | 	mov	local06, result2
08024     D4 00 90 FD | 	jmp	#LR__0735
08028                 | LR__0719
08028     C0 07 B0 FD | 	call	#_compile_fun_2p
0802c     3D B1 02 F6 | 	mov	local06, result1
08030     C8 00 90 FD | 	jmp	#LR__0735
08034                 | LR__0720
08034     84 0A B0 FD | 	call	#_compile_fun_varp
08038     3D B5 02 F6 | 	mov	local08, result1
0803c     3E B1 02 F6 | 	mov	local06, result2
08040     B8 00 90 FD | 	jmp	#LR__0735
08044                 | LR__0721
08044     A4 07 B0 FD | 	call	#_compile_fun_2p
08048     3D B1 02 F6 | 	mov	local06, result1
0804c     AC 00 90 FD | 	jmp	#LR__0735
08050                 | LR__0722
08050     98 07 B0 FD | 	call	#_compile_fun_2p
08054     3D B1 02 F6 | 	mov	local06, result1
08058     A0 00 90 FD | 	jmp	#LR__0735
0805c                 | LR__0723
0805c     8C 07 B0 FD | 	call	#_compile_fun_2p
08060     3D B1 02 F6 | 	mov	local06, result1
08064     94 00 90 FD | 	jmp	#LR__0735
08068                 | LR__0724
08068     80 07 B0 FD | 	call	#_compile_fun_2p
0806c     3D B1 02 F6 | 	mov	local06, result1
08070     88 00 90 FD | 	jmp	#LR__0735
08074                 | LR__0725
08074     74 07 B0 FD | 	call	#_compile_fun_2p
08078     3D B1 02 F6 | 	mov	local06, result1
0807c     7C 00 90 FD | 	jmp	#LR__0735
08080                 | LR__0726
08080     68 07 B0 FD | 	call	#_compile_fun_2p
08084     3D B1 02 F6 | 	mov	local06, result1
08088     70 00 90 FD | 	jmp	#LR__0735
0808c                 | LR__0727
0808c     5C 07 B0 FD | 	call	#_compile_fun_2p
08090     3D B1 02 F6 | 	mov	local06, result1
08094     64 00 90 FD | 	jmp	#LR__0735
08098                 | LR__0728
08098     20 0A B0 FD | 	call	#_compile_fun_varp
0809c     3D B5 02 F6 | 	mov	local08, result1
080a0     3E B1 02 F6 | 	mov	local06, result2
080a4     54 00 90 FD | 	jmp	#LR__0735
080a8                 | LR__0729
080a8     C8 07 B0 FD | 	call	#_compile_fun_3p
080ac     3D B1 02 F6 | 	mov	local06, result1
080b0     48 00 90 FD | 	jmp	#LR__0735
080b4                 | LR__0730
080b4                 | ' return expr()
080b4     A0 3D B0 FD | 	call	#_expr
080b8     3D B1 02 F6 | 	mov	local06, result1
080bc     3C 00 90 FD | 	jmp	#LR__0735
080c0                 | LR__0731
080c0     28 07 B0 FD | 	call	#_compile_fun_2p
080c4     3D B1 02 F6 | 	mov	local06, result1
080c8     30 00 90 FD | 	jmp	#LR__0735
080cc                 | LR__0732
080cc     1C 07 B0 FD | 	call	#_compile_fun_2p
080d0     3D B1 02 F6 | 	mov	local06, result1
080d4     24 00 90 FD | 	jmp	#LR__0735
080d8                 | LR__0733
080d8     10 07 B0 FD | 	call	#_compile_fun_2p
080dc     3D B1 02 F6 | 	mov	local06, result1
080e0     18 00 90 FD | 	jmp	#LR__0735
080e4                 | LR__0734
080e4     00 13 B0 FD | 	call	#_compile_array_assign
080e8     3D B1 02 F6 | 	mov	local06, result1
080ec     0E B0 0E F2 | 	cmp	local06, #14 wz
080f0     C4 00 90 5D |  if_ne	jmp	#LR__0736
080f4                 | ' return 23
080f4     17 B0 06 F6 | 	mov	local06, #23
080f8     BC 00 90 FD | 	jmp	#LR__0736
080fc                 | ' return 23
080fc                 | LR__0735
080fc     59 AB 02 F6 | 	mov	local03, local07
08100     5A A7 02 F6 | 	mov	local01, local08
08104     53 B7 02 F6 | 	mov	local09, local01
08108     54 B9 02 F6 | 	mov	local10, local02
0810c     55 B3 02 F6 | 	mov	local07, local03
08110     4C 00 00 FF 
08114     20 64 06 F1 | 	add	objptr, ##38944
08118     32 A7 02 FB | 	rdlong	local01, objptr
0811c     53 B5 02 F6 | 	mov	local08, local01
08120     01 B4 66 F0 | 	shl	local08, #1
08124     53 B5 02 F1 | 	add	local08, local01
08128     02 B4 66 F0 | 	shl	local08, #2
0812c     03 00 00 FF 
08130     00 64 86 F1 | 	sub	objptr, ##1536
08134     32 B5 02 F1 | 	add	local08, objptr
08138     5A B7 62 FC | 	wrlong	local09, local08
0813c     03 00 00 FF 
08140     00 64 06 F1 | 	add	objptr, ##1536
08144     32 A7 02 FB | 	rdlong	local01, objptr
08148     53 B7 02 F6 | 	mov	local09, local01
0814c     01 B6 66 F0 | 	shl	local09, #1
08150     53 B7 02 F1 | 	add	local09, local01
08154     02 B6 66 F0 | 	shl	local09, #2
08158     03 00 00 FF 
0815c     00 64 86 F1 | 	sub	objptr, ##1536
08160     32 B7 02 F1 | 	add	local09, objptr
08164     04 B6 06 F1 | 	add	local09, #4
08168     5B B9 62 FC | 	wrlong	local10, local09
0816c     03 00 00 FF 
08170     00 64 06 F1 | 	add	objptr, ##1536
08174     32 A7 02 FB | 	rdlong	local01, objptr
08178     53 B9 02 F6 | 	mov	local10, local01
0817c     01 B8 66 F0 | 	shl	local10, #1
08180     53 B9 02 F1 | 	add	local10, local01
08184     02 B8 66 F0 | 	shl	local10, #2
08188     03 00 00 FF 
0818c     00 64 86 F1 | 	sub	objptr, ##1536
08190     32 B9 02 F1 | 	add	local10, objptr
08194     08 B8 06 F1 | 	add	local10, #8
08198     5C B3 62 FC | 	wrlong	local07, local10
0819c     03 00 00 FF 
081a0     00 64 06 F1 | 	add	objptr, ##1536
081a4     32 B7 02 FB | 	rdlong	local09, objptr
081a8     01 B6 06 F1 | 	add	local09, #1
081ac     32 B7 62 FC | 	wrlong	local09, objptr
081b0     4C 00 00 FF 
081b4     20 64 86 F1 | 	sub	objptr, ##38944
081b8                 | LR__0736
081b8                 | ' 
081b8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
081b8                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
081b8     03 AC 0E F2 | 	cmp	local04, #3 wz
081bc     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
081c0     38 00 90 5D |  if_ne	jmp	#LR__0737
081c4     4C 00 00 FF 
081c8     20 64 06 F1 | 	add	objptr, ##38944
081cc     32 B9 02 FB | 	rdlong	local10, objptr
081d0     5C A7 02 F6 | 	mov	local01, local10
081d4     01 A6 66 F0 | 	shl	local01, #1
081d8     5C A7 02 F1 | 	add	local01, local10
081dc     02 A6 66 F0 | 	shl	local01, #2
081e0     03 00 00 FF 
081e4     00 64 86 F1 | 	sub	objptr, ##1536
081e8     32 A7 02 F1 | 	add	local01, objptr
081ec     08 A6 06 F1 | 	add	local01, #8
081f0     53 FD 6B FC | 	wrlong	#510, local01
081f4     49 00 00 FF 
081f8     20 64 86 F1 | 	sub	objptr, ##37408
081fc                 | LR__0737
081fc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
081fc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
081fc     4C 00 00 FF 
08200     20 64 06 F1 | 	add	objptr, ##38944
08204     32 A7 02 FB | 	rdlong	local01, objptr
08208     4C 00 00 FF 
0820c     20 64 86 F1 | 	sub	objptr, ##38944
08210     D7 52 48 FB | 	callpa	#(@LR__0740-@LR__0738)>>2,fcache_load_ptr_
08214                 | LR__0738
08214     53 B7 02 F6 | 	mov	local09, local01
08218     01 B6 66 F0 | 	shl	local09, #1
0821c     53 B7 02 F1 | 	add	local09, local01
08220     02 B6 66 F0 | 	shl	local09, #2
08224     32 B9 02 F6 | 	mov	local10, objptr
08228     49 00 00 FF 
0822c     20 B8 06 F1 | 	add	local10, ##37408
08230     5C B7 02 F1 | 	add	local09, local10
08234     08 B6 06 F1 | 	add	local09, #8
08238     5B B7 02 FB | 	rdlong	local09, local09
0823c     9B B6 0E F2 | 	cmp	local09, #155 wz
08240     68 00 90 5D |  if_ne	jmp	#LR__0739
08244     53 B7 02 F6 | 	mov	local09, local01
08248     01 B6 86 F1 | 	sub	local09, #1
0824c     5B B9 02 F6 | 	mov	local10, local09
08250     01 B8 66 F0 | 	shl	local10, #1
08254     5B B9 02 F1 | 	add	local10, local09
08258     02 B8 66 F0 | 	shl	local10, #2
0825c     32 B7 02 F6 | 	mov	local09, objptr
08260     49 00 00 FF 
08264     20 B6 06 F1 | 	add	local09, ##37408
08268     5B B9 02 F1 | 	add	local10, local09
0826c     08 B8 06 F1 | 	add	local10, #8
08270     5C B9 02 FB | 	rdlong	local10, local10
08274     11 B8 0E F2 | 	cmp	local10, #17 wz
08278     30 00 90 5D |  if_ne	jmp	#LR__0739
0827c     53 B7 02 F6 | 	mov	local09, local01
08280     01 B6 86 F1 | 	sub	local09, #1
08284     5B B9 02 F6 | 	mov	local10, local09
08288     01 B8 66 F0 | 	shl	local10, #1
0828c     5B B9 02 F1 | 	add	local10, local09
08290     02 B8 66 F0 | 	shl	local10, #2
08294     32 B7 02 F6 | 	mov	local09, objptr
08298     49 00 00 FF 
0829c     20 B6 06 F1 | 	add	local09, ##37408
082a0     5B B9 02 F1 | 	add	local10, local09
082a4     08 B8 06 F1 | 	add	local10, #8
082a8     5C 25 68 FC | 	wrlong	#18, local10
082ac                 | LR__0739
082ac     01 A6 86 F1 | 	sub	local01, #1
082b0     01 A6 56 F2 | 	cmps	local01, #1 wc
082b4     5C FF 9F 3D |  if_ae	jmp	#LR__0738
082b8                 | LR__0740
082b8                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
082b8                 | ' return err
082b8     58 7B 02 F6 | 	mov	result1, local06
082bc     E7 F0 03 F6 | 	mov	ptra, fp
082c0     F2 00 A0 FD | 	call	#popregs_
082c4                 | _compile_immediate_ret
082c4     2D 00 64 FD | 	ret
082c8                 | 
082c8                 | ' 
082c8                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
082c8                 | ' 
082c8                 | ' function compile_immediate_assign(linetype as ulong) as ulong
082c8                 | _compile_immediate_assign
082c8     0C CA 05 F6 | 	mov	COUNT_, #12
082cc     E8 00 A0 FD | 	call	#pushregs_
082d0     49 AD 02 F6 | 	mov	local04, arg01
082d4     FF AA 06 F6 | 	mov	local03, #255
082d8     01 AE 66 F6 | 	neg	local05, #1
082dc     00 B0 06 F6 | 	mov	local06, #0
082e0                 | ' 
082e0                 | ' t1.result_type=result_error : t1.result.uresult=0
082e0                 | ' i=-1: j=-1 : err=0
082e0                 | ' 
082e0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
082e0     02 AC 0E F2 | 	cmp	local04, #2 wz
082e4     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
082e8     36 00 00 AF 
082ec     B0 65 06 A1 |  if_e	add	objptr, ##28080
082f0     32 B3 02 AB |  if_e	rdlong	local07, objptr
082f4     02 00 00 AF 
082f8     38 64 06 A1 |  if_e	add	objptr, ##1080
082fc     32 05 68 AC |  if_e	wrlong	#2, objptr
08300     38 00 00 AF 
08304     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08308                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08308     04 AC 0E F2 | 	cmp	local04, #4 wz
0830c     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
08310     2C 00 90 5D |  if_ne	jmp	#LR__0750
08314     36 00 00 FF 
08318     B8 65 06 F1 | 	add	objptr, ##28088
0831c     32 B3 02 FB | 	rdlong	local07, objptr
08320     02 00 00 FF 
08324     30 64 06 F1 | 	add	objptr, ##1072
08328     32 07 68 FC | 	wrlong	#3, objptr
0832c     13 00 00 FF 
08330     38 64 06 F1 | 	add	objptr, ##9784
08334     32 05 68 FC | 	wrlong	#2, objptr
08338     4C 00 00 FF 
0833c     20 64 86 F1 | 	sub	objptr, ##38944
08340                 | LR__0750
08340                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08340     05 AC 0E F2 | 	cmp	local04, #5 wz
08344     3C 00 90 5D |  if_ne	jmp	#LR__0751
08348     38 00 00 FF 
0834c     E8 65 06 F1 | 	add	objptr, ##29160
08350     32 7B 02 FB | 	rdlong	result1, objptr
08354     3D B3 02 F6 | 	mov	local07, result1
08358     03 B2 66 F0 | 	shl	local07, #3
0835c     02 00 00 FF 
08360     38 64 86 F1 | 	sub	objptr, ##1080
08364     32 B3 02 F1 | 	add	local07, objptr
08368     59 B3 02 FB | 	rdlong	local07, local07
0836c     02 7A 06 F1 | 	add	result1, #2
08370     02 00 00 FF 
08374     38 64 06 F1 | 	add	objptr, ##1080
08378     32 7B 62 FC | 	wrlong	result1, objptr
0837c     38 00 00 FF 
08380     E8 65 86 F1 | 	sub	objptr, ##29160
08384                 | LR__0751
08384     59 93 02 F6 | 	mov	arg01, local07
08388     01 94 06 F6 | 	mov	arg02, #1
0838c     9C DF B1 FD | 	call	#__system__Right_S
08390     3D B5 02 F6 | 	mov	local08, result1
08394     C0 3A B0 FD | 	call	#_expr
08398                 | ' 
08398                 | ' suffix2$=right$(varname2$,1)
08398                 | ' expr()
08398                 | ' if varnum>0 then					' try to find a variable
08398     36 00 00 FF 
0839c     AC 65 06 F1 | 	add	objptr, ##28076
083a0     32 B7 02 FB | 	rdlong	local09, objptr
083a4     36 00 00 FF 
083a8     AC 65 86 F1 | 	sub	objptr, ##28076
083ac     01 B6 56 F2 | 	cmps	local09, #1 wc
083b0     54 00 90 CD |  if_b	jmp	#LR__0754
083b4                 | '   for i=0 to varnum-1
083b4     00 B8 06 F6 | 	mov	local10, #0
083b8     36 00 00 FF 
083bc     AC 65 06 F1 | 	add	objptr, ##28076
083c0     32 BB 02 FB | 	rdlong	local11, objptr
083c4     36 00 00 FF 
083c8     AC 65 86 F1 | 	sub	objptr, ##28076
083cc                 | LR__0752
083cc     5D B9 52 F2 | 	cmps	local10, local11 wc
083d0     34 00 90 3D |  if_ae	jmp	#LR__0753
083d4                 | '     if variables(i).name=varname2$ then j=i : exit
083d4     5C B7 02 F6 | 	mov	local09, local10
083d8     04 B6 66 F0 | 	shl	local09, #4
083dc     32 95 02 F6 | 	mov	arg02, objptr
083e0     16 00 00 FF 
083e4     9C 95 06 F1 | 	add	arg02, ##11676
083e8     4A B7 02 F1 | 	add	local09, arg02
083ec     5B 93 02 FB | 	rdlong	arg01, local09
083f0     59 95 02 F6 | 	mov	arg02, local07
083f4     2C C6 B1 FD | 	call	#__system___string_cmp
083f8     00 7A 0E F2 | 	cmp	result1, #0 wz
083fc     5C AF 02 A6 |  if_e	mov	local05, local10
08400     01 B8 06 51 |  if_ne	add	local10, #1
08404     C4 FF 9F 5D |  if_ne	jmp	#LR__0752
08408                 | LR__0753
08408                 | LR__0754
08408                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08408     FF FF 7F FF 
0840c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
08410     60 00 90 5D |  if_ne	jmp	#LR__0755
08414     36 00 00 FF 
08418     AC 65 06 F1 | 	add	objptr, ##28076
0841c     32 B7 02 FB | 	rdlong	local09, objptr
08420     36 00 00 FF 
08424     AC 65 86 F1 | 	sub	objptr, ##28076
08428     02 00 00 FF 
0842c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08430     40 00 90 3D |  if_ae	jmp	#LR__0755
08434     36 00 00 FF 
08438     AC 65 06 F1 | 	add	objptr, ##28076
0843c     32 BB 02 FB | 	rdlong	local11, objptr
08440     04 BA 66 F0 | 	shl	local11, #4
08444     20 00 00 FF 
08448     10 64 86 F1 | 	sub	objptr, ##16400
0844c     32 BB 02 F1 | 	add	local11, objptr
08450     5D B3 62 FC | 	wrlong	local07, local11
08454     20 00 00 FF 
08458     10 64 06 F1 | 	add	objptr, ##16400
0845c     32 B7 02 FB | 	rdlong	local09, objptr
08460     5B AF 02 F6 | 	mov	local05, local09
08464     01 B6 06 F1 | 	add	local09, #1
08468     32 B7 62 FC | 	wrlong	local09, objptr
0846c     36 00 00 FF 
08470     AC 65 86 F1 | 	sub	objptr, ##28076
08474                 | LR__0755
08474                 | ' if varnum>=maxvars then
08474     36 00 00 FF 
08478     AC 65 06 F1 | 	add	objptr, ##28076
0847c     32 B7 02 FB | 	rdlong	local09, objptr
08480     36 00 00 FF 
08484     AC 65 86 F1 | 	sub	objptr, ##28076
08488     02 00 00 FF 
0848c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08490     2D B0 06 36 |  if_ae	mov	local06, #45
08494     BC 01 90 3D |  if_ae	jmp	#LR__0760
08498     57 A7 02 F6 | 	mov	local01, local05
0849c     17 AA 06 F6 | 	mov	local03, #23
084a0     53 B7 02 F6 | 	mov	local09, local01
084a4     54 BD 02 F6 | 	mov	local12, local02
084a8     55 A7 02 F6 | 	mov	local01, local03
084ac     4C 00 00 FF 
084b0     20 64 06 F1 | 	add	objptr, ##38944
084b4     32 BB 02 FB | 	rdlong	local11, objptr
084b8     5D B9 02 F6 | 	mov	local10, local11
084bc     01 B8 66 F0 | 	shl	local10, #1
084c0     5D B9 02 F1 | 	add	local10, local11
084c4     02 B8 66 F0 | 	shl	local10, #2
084c8     03 00 00 FF 
084cc     00 64 86 F1 | 	sub	objptr, ##1536
084d0     32 B9 02 F1 | 	add	local10, objptr
084d4     5C B7 62 FC | 	wrlong	local09, local10
084d8     03 00 00 FF 
084dc     00 64 06 F1 | 	add	objptr, ##1536
084e0     32 B7 02 FB | 	rdlong	local09, objptr
084e4     5B BB 02 F6 | 	mov	local11, local09
084e8     01 BA 66 F0 | 	shl	local11, #1
084ec     5B BB 02 F1 | 	add	local11, local09
084f0     02 BA 66 F0 | 	shl	local11, #2
084f4     03 00 00 FF 
084f8     00 64 86 F1 | 	sub	objptr, ##1536
084fc     32 BB 02 F1 | 	add	local11, objptr
08500     04 BA 06 F1 | 	add	local11, #4
08504     5D BD 62 FC | 	wrlong	local12, local11
08508     03 00 00 FF 
0850c     00 64 06 F1 | 	add	objptr, ##1536
08510     32 B7 02 FB | 	rdlong	local09, objptr
08514     5B BD 02 F6 | 	mov	local12, local09
08518     01 BC 66 F0 | 	shl	local12, #1
0851c     5B BD 02 F1 | 	add	local12, local09
08520     02 BC 66 F0 | 	shl	local12, #2
08524     03 00 00 FF 
08528     00 64 86 F1 | 	sub	objptr, ##1536
0852c     32 BD 02 F1 | 	add	local12, objptr
08530     08 BC 06 F1 | 	add	local12, #8
08534     5E A7 62 FC | 	wrlong	local01, local12
08538     03 00 00 FF 
0853c     00 64 06 F1 | 	add	objptr, ##1536
08540     32 B7 02 FB | 	rdlong	local09, objptr
08544     01 B6 06 F1 | 	add	local09, #1
08548     32 B7 62 FC | 	wrlong	local09, objptr
0854c     4C 00 00 FF 
08550     20 64 86 F1 | 	sub	objptr, ##38944
08554                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08554                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08554                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08554     03 AC 0E F2 | 	cmp	local04, #3 wz
08558     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
0855c     38 00 90 5D |  if_ne	jmp	#LR__0756
08560     4C 00 00 FF 
08564     20 64 06 F1 | 	add	objptr, ##38944
08568     32 BD 02 FB | 	rdlong	local12, objptr
0856c     5E A7 02 F6 | 	mov	local01, local12
08570     01 A6 66 F0 | 	shl	local01, #1
08574     5E A7 02 F1 | 	add	local01, local12
08578     02 A6 66 F0 | 	shl	local01, #2
0857c     03 00 00 FF 
08580     00 64 86 F1 | 	sub	objptr, ##1536
08584     32 A7 02 F1 | 	add	local01, objptr
08588     08 A6 06 F1 | 	add	local01, #8
0858c     53 FD 6B FC | 	wrlong	#510, local01
08590     49 00 00 FF 
08594     20 64 86 F1 | 	sub	objptr, ##37408
08598                 | LR__0756
08598                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08598     4C 00 00 FF 
0859c     20 64 06 F1 | 	add	objptr, ##38944
085a0     32 B9 02 FB | 	rdlong	local10, objptr
085a4     4C 00 00 FF 
085a8     20 64 86 F1 | 	sub	objptr, ##38944
085ac     D7 52 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
085b0                 | LR__0757
085b0     5C BD 02 F6 | 	mov	local12, local10
085b4     01 BC 66 F0 | 	shl	local12, #1
085b8     5C BD 02 F1 | 	add	local12, local10
085bc     02 BC 66 F0 | 	shl	local12, #2
085c0     32 A7 02 F6 | 	mov	local01, objptr
085c4     49 00 00 FF 
085c8     20 A6 06 F1 | 	add	local01, ##37408
085cc     53 BD 02 F1 | 	add	local12, local01
085d0     08 BC 06 F1 | 	add	local12, #8
085d4     5E BD 02 FB | 	rdlong	local12, local12
085d8     9B BC 0E F2 | 	cmp	local12, #155 wz
085dc     68 00 90 5D |  if_ne	jmp	#LR__0758
085e0     5C BD 02 F6 | 	mov	local12, local10
085e4     01 BC 86 F1 | 	sub	local12, #1
085e8     5E A7 02 F6 | 	mov	local01, local12
085ec     01 A6 66 F0 | 	shl	local01, #1
085f0     5E A7 02 F1 | 	add	local01, local12
085f4     02 A6 66 F0 | 	shl	local01, #2
085f8     32 BD 02 F6 | 	mov	local12, objptr
085fc     49 00 00 FF 
08600     20 BC 06 F1 | 	add	local12, ##37408
08604     5E A7 02 F1 | 	add	local01, local12
08608     08 A6 06 F1 | 	add	local01, #8
0860c     53 A7 02 FB | 	rdlong	local01, local01
08610     11 A6 0E F2 | 	cmp	local01, #17 wz
08614     30 00 90 5D |  if_ne	jmp	#LR__0758
08618     5C BD 02 F6 | 	mov	local12, local10
0861c     01 BC 86 F1 | 	sub	local12, #1
08620     5E A7 02 F6 | 	mov	local01, local12
08624     01 A6 66 F0 | 	shl	local01, #1
08628     5E A7 02 F1 | 	add	local01, local12
0862c     02 A6 66 F0 | 	shl	local01, #2
08630     32 BD 02 F6 | 	mov	local12, objptr
08634     49 00 00 FF 
08638     20 BC 06 F1 | 	add	local12, ##37408
0863c     5E A7 02 F1 | 	add	local01, local12
08640     08 A6 06 F1 | 	add	local01, #8
08644     53 25 68 FC | 	wrlong	#18, local01
08648                 | LR__0758
08648     01 B8 86 F1 | 	sub	local10, #1
0864c     01 B8 56 F2 | 	cmps	local10, #1 wc
08650     5C FF 9F 3D |  if_ae	jmp	#LR__0757
08654                 | LR__0759
08654                 | LR__0760
08654                 | ' return err
08654     58 7B 02 F6 | 	mov	result1, local06
08658     E7 F0 03 F6 | 	mov	ptra, fp
0865c     F2 00 A0 FD | 	call	#popregs_
08660                 | _compile_immediate_assign_ret
08660     2D 00 64 FD | 	ret
08664                 | 
08664                 | ' 
08664                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08664                 | ' 
08664                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08664                 | _compile
08664     03 CA 05 F6 | 	mov	COUNT_, #3
08668     E8 00 A0 FD | 	call	#pushregs_
0866c     49 A7 02 F6 | 	mov	local01, arg01
08670     4B A9 02 F6 | 	mov	local02, arg03
08674     49 00 00 FF 
08678     20 64 06 F1 | 	add	objptr, ##37408
0867c     32 A7 62 FC | 	wrlong	local01, objptr
08680     04 64 06 F1 | 	add	objptr, #4
08684     32 95 62 FC | 	wrlong	arg02, objptr
08688     49 00 00 FF 
0868c     24 64 86 F1 | 	sub	objptr, ##37412
08690     54 93 02 F6 | 	mov	arg01, local02
08694     01 92 06 F1 | 	add	arg01, #1
08698     53 95 02 F6 | 	mov	arg02, local01
0869c     40 F2 BF FD | 	call	#_compile_immediate
086a0     3D AB 0A F6 | 	mov	local03, result1 wz
086a4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
086a4                 | ' ucompiledline(0)=alinemajor
086a4                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
086a4                 | ' 
086a4                 | ' ' cont: 
086a4                 | ' ' 0 - this is the first part of the line that will continue
086a4                 | ' ' 1 - this is the continuation of the line
086a4                 | ' ' 2 - this is the last continued line
086a4                 | ' ' 3 - this is the one and only part
086a4                 | ' 
086a4                 | ' err=compile_immediate(cont+1,alinemajor) 
086a4                 | ' if err=0 andalso alinemajor>0 then
086a4     74 00 90 5D |  if_ne	jmp	#LR__0775
086a8     01 A6 16 F2 | 	cmp	local01, #1 wc
086ac     6C 00 90 CD |  if_b	jmp	#LR__0775
086b0                 | '   if cont=3 orelse cont=2 then 
086b0     03 A8 0E F2 | 	cmp	local02, #3 wz
086b4     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
086b8     60 00 90 5D |  if_ne	jmp	#LR__0774
086bc                 | '     if alinemajor >lastline then 
086bc     4C 00 00 FF 
086c0     30 64 06 F1 | 	add	objptr, ##38960
086c4     32 95 02 FB | 	rdlong	arg02, objptr
086c8     4C 00 00 FF 
086cc     30 64 86 F1 | 	sub	objptr, ##38960
086d0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
086d4     0C 00 90 ED |  if_be	jmp	#LR__0770
086d8     53 93 02 F6 | 	mov	arg01, local01
086dc     38 F1 BF FD | 	call	#_add_line_at_end
086e0     38 00 90 FD | 	jmp	#LR__0773
086e4                 | LR__0770
086e4     53 93 02 F6 | 	mov	arg01, local01
086e8     A0 EB BF FD | 	call	#_deleteline
086ec                 | '       deleteline(alinemajor)  
086ec                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
086ec     4C 00 00 FF 
086f0     30 64 06 F1 | 	add	objptr, ##38960
086f4     32 95 02 FB | 	rdlong	arg02, objptr
086f8     4C 00 00 FF 
086fc     30 64 86 F1 | 	sub	objptr, ##38960
08700     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08704     0C 00 90 ED |  if_be	jmp	#LR__0771
08708     53 93 02 F6 | 	mov	arg01, local01
0870c     08 F1 BF FD | 	call	#_add_line_at_end
08710     08 00 90 FD | 	jmp	#LR__0772
08714                 | LR__0771
08714     53 93 02 F6 | 	mov	arg01, local01
08718     40 EF BF FD | 	call	#_insertline
0871c                 | LR__0772
0871c                 | LR__0773
0871c                 | LR__0774
0871c                 | LR__0775
0871c                 | ' return err
0871c     55 7B 02 F6 | 	mov	result1, local03
08720     E7 F0 03 F6 | 	mov	ptra, fp
08724     F2 00 A0 FD | 	call	#popregs_
08728                 | _compile_ret
08728     2D 00 64 FD | 	ret
0872c                 | 
0872c                 | ' 
0872c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0872c                 | ' 
0872c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0872c                 | _compile_assign
0872c     03 CA 05 F6 | 	mov	COUNT_, #3
08730     E8 00 A0 FD | 	call	#pushregs_
08734     49 A7 02 F6 | 	mov	local01, arg01
08738     4B A9 02 F6 | 	mov	local02, arg03
0873c     49 00 00 FF 
08740     20 64 06 F1 | 	add	objptr, ##37408
08744     32 A7 62 FC | 	wrlong	local01, objptr
08748     04 64 06 F1 | 	add	objptr, #4
0874c     32 95 62 FC | 	wrlong	arg02, objptr
08750     49 00 00 FF 
08754     24 64 86 F1 | 	sub	objptr, ##37412
08758     54 93 02 F6 | 	mov	arg01, local02
0875c     01 92 06 F1 | 	add	arg01, #1
08760     64 FB BF FD | 	call	#_compile_immediate_assign
08764     3D AB 02 F6 | 	mov	local03, result1
08768                 | ' 
08768                 | ' ucompiledline(0)=alinemajor
08768                 | ' ucompiledline(1)=alineminor
08768                 | ' 
08768                 | ' err=compile_immediate_assign(cont+1) 
08768                 | ' if alinemajor>0 then
08768     01 A6 16 F2 | 	cmp	local01, #1 wc
0876c     6C 00 90 CD |  if_b	jmp	#LR__0785
08770                 | '   if cont=3 orelse cont=2 then 
08770     03 A8 0E F2 | 	cmp	local02, #3 wz
08774     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
08778     60 00 90 5D |  if_ne	jmp	#LR__0784
0877c                 | '     if alinemajor >lastline then 
0877c     4C 00 00 FF 
08780     30 64 06 F1 | 	add	objptr, ##38960
08784     32 95 02 FB | 	rdlong	arg02, objptr
08788     4C 00 00 FF 
0878c     30 64 86 F1 | 	sub	objptr, ##38960
08790     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08794     0C 00 90 ED |  if_be	jmp	#LR__0780
08798     53 93 02 F6 | 	mov	arg01, local01
0879c     78 F0 BF FD | 	call	#_add_line_at_end
087a0     38 00 90 FD | 	jmp	#LR__0783
087a4                 | LR__0780
087a4     53 93 02 F6 | 	mov	arg01, local01
087a8     E0 EA BF FD | 	call	#_deleteline
087ac                 | '       deleteline(alinemajor)  
087ac                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
087ac     4C 00 00 FF 
087b0     30 64 06 F1 | 	add	objptr, ##38960
087b4     32 95 02 FB | 	rdlong	arg02, objptr
087b8     4C 00 00 FF 
087bc     30 64 86 F1 | 	sub	objptr, ##38960
087c0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087c4     0C 00 90 ED |  if_be	jmp	#LR__0781
087c8     53 93 02 F6 | 	mov	arg01, local01
087cc     48 F0 BF FD | 	call	#_add_line_at_end
087d0     08 00 90 FD | 	jmp	#LR__0782
087d4                 | LR__0781
087d4     53 93 02 F6 | 	mov	arg01, local01
087d8     80 EE BF FD | 	call	#_insertline
087dc                 | LR__0782
087dc                 | LR__0783
087dc                 | LR__0784
087dc                 | LR__0785
087dc                 | ' return err
087dc     55 7B 02 F6 | 	mov	result1, local03
087e0     E7 F0 03 F6 | 	mov	ptra, fp
087e4     F2 00 A0 FD | 	call	#popregs_
087e8                 | _compile_assign_ret
087e8     2D 00 64 FD | 	ret
087ec                 | 
087ec                 | ' 
087ec                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
087ec                 | ' 
087ec                 | ' function compile_fun_2p() as ulong
087ec                 | _compile_fun_2p
087ec     01 CA 05 F6 | 	mov	COUNT_, #1
087f0     E8 00 A0 FD | 	call	#pushregs_
087f4     60 36 B0 FD | 	call	#_expr
087f8     3D A7 02 F6 | 	mov	local01, result1
087fc                 | ' err=expr() : if err>0 then return err
087fc     01 A6 16 F2 | 	cmp	local01, #1 wc
08800     53 7B 02 36 |  if_ae	mov	result1, local01
08804     60 00 90 3D |  if_ae	jmp	#LR__0790
08808                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08808     38 00 00 FF 
0880c     E8 65 06 F1 | 	add	objptr, ##29160
08810     32 A7 02 FB | 	rdlong	local01, objptr
08814     03 A6 66 F0 | 	shl	local01, #3
08818     02 00 00 FF 
0881c     38 64 86 F1 | 	sub	objptr, ##1080
08820     32 A7 02 F1 | 	add	local01, objptr
08824     04 A6 06 F1 | 	add	local01, #4
08828     53 A7 02 FB | 	rdlong	local01, local01
0882c     11 A6 0E F2 | 	cmp	local01, #17 wz
08830     36 00 00 FF 
08834     B0 65 86 F1 | 	sub	objptr, ##28080
08838     15 7A 06 56 |  if_ne	mov	result1, #21
0883c     28 00 90 5D |  if_ne	jmp	#LR__0790
08840     38 00 00 FF 
08844     E8 65 06 F1 | 	add	objptr, ##29160
08848     32 A7 02 FB | 	rdlong	local01, objptr
0884c     01 A6 06 F1 | 	add	local01, #1
08850     32 A7 62 FC | 	wrlong	local01, objptr
08854     38 00 00 FF 
08858     E8 65 86 F1 | 	sub	objptr, ##29160
0885c     F8 35 B0 FD | 	call	#_expr
08860                 | ' err=expr() : if err>0 then return err
08860     01 7A 16 F2 | 	cmp	result1, #1 wc
08864                 | ' return 0
08864     00 7A 06 C6 |  if_b	mov	result1, #0
08868                 | LR__0790
08868     E7 F0 03 F6 | 	mov	ptra, fp
0886c     F2 00 A0 FD | 	call	#popregs_
08870                 | _compile_fun_2p_ret
08870     2D 00 64 FD | 	ret
08874                 | 
08874                 | ' 
08874                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08874                 | ' 
08874                 | ' function compile_fun_3p() as ulong
08874                 | _compile_fun_3p
08874     01 CA 05 F6 | 	mov	COUNT_, #1
08878     E8 00 A0 FD | 	call	#pushregs_
0887c     D8 35 B0 FD | 	call	#_expr
08880     3D A7 02 F6 | 	mov	local01, result1
08884                 | ' err=expr() : if err>0 then return err
08884     01 A6 16 F2 | 	cmp	local01, #1 wc
08888     53 7B 02 36 |  if_ae	mov	result1, local01
0888c     C8 00 90 3D |  if_ae	jmp	#LR__0800
08890                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08890     38 00 00 FF 
08894     E8 65 06 F1 | 	add	objptr, ##29160
08898     32 A7 02 FB | 	rdlong	local01, objptr
0889c     03 A6 66 F0 | 	shl	local01, #3
088a0     02 00 00 FF 
088a4     38 64 86 F1 | 	sub	objptr, ##1080
088a8     32 A7 02 F1 | 	add	local01, objptr
088ac     04 A6 06 F1 | 	add	local01, #4
088b0     53 A7 02 FB | 	rdlong	local01, local01
088b4     11 A6 0E F2 | 	cmp	local01, #17 wz
088b8     36 00 00 FF 
088bc     B0 65 86 F1 | 	sub	objptr, ##28080
088c0     15 7A 06 56 |  if_ne	mov	result1, #21
088c4     90 00 90 5D |  if_ne	jmp	#LR__0800
088c8     38 00 00 FF 
088cc     E8 65 06 F1 | 	add	objptr, ##29160
088d0     32 A7 02 FB | 	rdlong	local01, objptr
088d4     01 A6 06 F1 | 	add	local01, #1
088d8     32 A7 62 FC | 	wrlong	local01, objptr
088dc     38 00 00 FF 
088e0     E8 65 86 F1 | 	sub	objptr, ##29160
088e4     70 35 B0 FD | 	call	#_expr
088e8     3D A7 02 F6 | 	mov	local01, result1
088ec                 | ' err=expr() : if err>0 then return err
088ec     01 A6 16 F2 | 	cmp	local01, #1 wc
088f0     53 7B 02 36 |  if_ae	mov	result1, local01
088f4     60 00 90 3D |  if_ae	jmp	#LR__0800
088f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088f8     38 00 00 FF 
088fc     E8 65 06 F1 | 	add	objptr, ##29160
08900     32 A7 02 FB | 	rdlong	local01, objptr
08904     03 A6 66 F0 | 	shl	local01, #3
08908     02 00 00 FF 
0890c     38 64 86 F1 | 	sub	objptr, ##1080
08910     32 A7 02 F1 | 	add	local01, objptr
08914     04 A6 06 F1 | 	add	local01, #4
08918     53 A7 02 FB | 	rdlong	local01, local01
0891c     11 A6 0E F2 | 	cmp	local01, #17 wz
08920     36 00 00 FF 
08924     B0 65 86 F1 | 	sub	objptr, ##28080
08928     15 7A 06 56 |  if_ne	mov	result1, #21
0892c     28 00 90 5D |  if_ne	jmp	#LR__0800
08930     38 00 00 FF 
08934     E8 65 06 F1 | 	add	objptr, ##29160
08938     32 A7 02 FB | 	rdlong	local01, objptr
0893c     01 A6 06 F1 | 	add	local01, #1
08940     32 A7 62 FC | 	wrlong	local01, objptr
08944     38 00 00 FF 
08948     E8 65 86 F1 | 	sub	objptr, ##29160
0894c     08 35 B0 FD | 	call	#_expr
08950                 | ' err=expr() : if err>0 then return err
08950     01 7A 16 F2 | 	cmp	result1, #1 wc
08954                 | ' return 0
08954     00 7A 06 C6 |  if_b	mov	result1, #0
08958                 | LR__0800
08958     E7 F0 03 F6 | 	mov	ptra, fp
0895c     F2 00 A0 FD | 	call	#popregs_
08960                 | _compile_fun_3p_ret
08960     2D 00 64 FD | 	ret
08964                 | 
08964                 | ' 
08964                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08964                 | ' 
08964                 | ' function compile_fun_4p() as ulong
08964                 | _compile_fun_4p
08964     01 CA 05 F6 | 	mov	COUNT_, #1
08968     E8 00 A0 FD | 	call	#pushregs_
0896c     E8 34 B0 FD | 	call	#_expr
08970     3D A7 02 F6 | 	mov	local01, result1
08974                 | ' err=expr() : if err>0 then return err
08974     01 A6 16 F2 | 	cmp	local01, #1 wc
08978     53 7B 02 36 |  if_ae	mov	result1, local01
0897c     30 01 90 3D |  if_ae	jmp	#LR__0810
08980                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08980     38 00 00 FF 
08984     E8 65 06 F1 | 	add	objptr, ##29160
08988     32 A7 02 FB | 	rdlong	local01, objptr
0898c     03 A6 66 F0 | 	shl	local01, #3
08990     02 00 00 FF 
08994     38 64 86 F1 | 	sub	objptr, ##1080
08998     32 A7 02 F1 | 	add	local01, objptr
0899c     04 A6 06 F1 | 	add	local01, #4
089a0     53 A7 02 FB | 	rdlong	local01, local01
089a4     11 A6 0E F2 | 	cmp	local01, #17 wz
089a8     36 00 00 FF 
089ac     B0 65 86 F1 | 	sub	objptr, ##28080
089b0     15 7A 06 56 |  if_ne	mov	result1, #21
089b4     F8 00 90 5D |  if_ne	jmp	#LR__0810
089b8     38 00 00 FF 
089bc     E8 65 06 F1 | 	add	objptr, ##29160
089c0     32 A7 02 FB | 	rdlong	local01, objptr
089c4     01 A6 06 F1 | 	add	local01, #1
089c8     32 A7 62 FC | 	wrlong	local01, objptr
089cc     38 00 00 FF 
089d0     E8 65 86 F1 | 	sub	objptr, ##29160
089d4     80 34 B0 FD | 	call	#_expr
089d8     3D A7 02 F6 | 	mov	local01, result1
089dc                 | ' err=expr() : if err>0 then return err
089dc     01 A6 16 F2 | 	cmp	local01, #1 wc
089e0     53 7B 02 36 |  if_ae	mov	result1, local01
089e4     C8 00 90 3D |  if_ae	jmp	#LR__0810
089e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089e8     38 00 00 FF 
089ec     E8 65 06 F1 | 	add	objptr, ##29160
089f0     32 A7 02 FB | 	rdlong	local01, objptr
089f4     03 A6 66 F0 | 	shl	local01, #3
089f8     02 00 00 FF 
089fc     38 64 86 F1 | 	sub	objptr, ##1080
08a00     32 A7 02 F1 | 	add	local01, objptr
08a04     04 A6 06 F1 | 	add	local01, #4
08a08     53 A7 02 FB | 	rdlong	local01, local01
08a0c     11 A6 0E F2 | 	cmp	local01, #17 wz
08a10     36 00 00 FF 
08a14     B0 65 86 F1 | 	sub	objptr, ##28080
08a18     15 7A 06 56 |  if_ne	mov	result1, #21
08a1c     90 00 90 5D |  if_ne	jmp	#LR__0810
08a20     38 00 00 FF 
08a24     E8 65 06 F1 | 	add	objptr, ##29160
08a28     32 A7 02 FB | 	rdlong	local01, objptr
08a2c     01 A6 06 F1 | 	add	local01, #1
08a30     32 A7 62 FC | 	wrlong	local01, objptr
08a34     38 00 00 FF 
08a38     E8 65 86 F1 | 	sub	objptr, ##29160
08a3c     18 34 B0 FD | 	call	#_expr
08a40     3D A7 02 F6 | 	mov	local01, result1
08a44                 | ' err=expr() : if err>0 then return err
08a44     01 A6 16 F2 | 	cmp	local01, #1 wc
08a48     53 7B 02 36 |  if_ae	mov	result1, local01
08a4c     60 00 90 3D |  if_ae	jmp	#LR__0810
08a50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a50     38 00 00 FF 
08a54     E8 65 06 F1 | 	add	objptr, ##29160
08a58     32 A7 02 FB | 	rdlong	local01, objptr
08a5c     03 A6 66 F0 | 	shl	local01, #3
08a60     02 00 00 FF 
08a64     38 64 86 F1 | 	sub	objptr, ##1080
08a68     32 A7 02 F1 | 	add	local01, objptr
08a6c     04 A6 06 F1 | 	add	local01, #4
08a70     53 A7 02 FB | 	rdlong	local01, local01
08a74     11 A6 0E F2 | 	cmp	local01, #17 wz
08a78     36 00 00 FF 
08a7c     B0 65 86 F1 | 	sub	objptr, ##28080
08a80     15 7A 06 56 |  if_ne	mov	result1, #21
08a84     28 00 90 5D |  if_ne	jmp	#LR__0810
08a88     38 00 00 FF 
08a8c     E8 65 06 F1 | 	add	objptr, ##29160
08a90     32 A7 02 FB | 	rdlong	local01, objptr
08a94     01 A6 06 F1 | 	add	local01, #1
08a98     32 A7 62 FC | 	wrlong	local01, objptr
08a9c     38 00 00 FF 
08aa0     E8 65 86 F1 | 	sub	objptr, ##29160
08aa4     B0 33 B0 FD | 	call	#_expr
08aa8                 | ' err=expr() : if err>0 then return err
08aa8     01 7A 16 F2 | 	cmp	result1, #1 wc
08aac                 | ' return 0
08aac     00 7A 06 C6 |  if_b	mov	result1, #0
08ab0                 | LR__0810
08ab0     E7 F0 03 F6 | 	mov	ptra, fp
08ab4     F2 00 A0 FD | 	call	#popregs_
08ab8                 | _compile_fun_4p_ret
08ab8     2D 00 64 FD | 	ret
08abc                 | 
08abc                 | ' 
08abc                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08abc                 | ' 
08abc                 | ' function compile_fun_varp() as ulong,ulong 
08abc                 | _compile_fun_varp
08abc     03 CA 05 F6 | 	mov	COUNT_, #3
08ac0     E8 00 A0 FD | 	call	#pushregs_
08ac4     00 A6 06 F6 | 	mov	local01, #0
08ac8                 | ' 
08ac8                 | ' i=0 : err=0
08ac8                 | ' if lparts(ct).token<>token_end then
08ac8     38 00 00 FF 
08acc     E8 65 06 F1 | 	add	objptr, ##29160
08ad0     32 A9 02 FB | 	rdlong	local02, objptr
08ad4     03 A8 66 F0 | 	shl	local02, #3
08ad8     02 00 00 FF 
08adc     38 64 86 F1 | 	sub	objptr, ##1080
08ae0     32 A9 02 F1 | 	add	local02, objptr
08ae4     04 A8 06 F1 | 	add	local02, #4
08ae8     54 A9 02 FB | 	rdlong	local02, local02
08aec     FE A9 0E F2 | 	cmp	local02, #510 wz
08af0     36 00 00 FF 
08af4     B0 65 86 F1 | 	sub	objptr, ##28080
08af8     88 00 90 AD |  if_e	jmp	#LR__0821
08afc                 | '   do
08afc                 | LR__0820
08afc     58 33 B0 FD | 	call	#_expr
08b00     01 A6 06 F1 | 	add	local01, #1
08b04                 | '     expr()
08b04                 | '     i+=1
08b04                 | '     if lparts(ct).token=token_comma then ct+=1
08b04     38 00 00 FF 
08b08     E8 65 06 F1 | 	add	objptr, ##29160
08b0c     32 A9 02 FB | 	rdlong	local02, objptr
08b10     03 A8 66 F0 | 	shl	local02, #3
08b14     02 00 00 FF 
08b18     38 64 86 F1 | 	sub	objptr, ##1080
08b1c     32 A9 02 F1 | 	add	local02, objptr
08b20     04 A8 06 F1 | 	add	local02, #4
08b24     54 A9 02 FB | 	rdlong	local02, local02
08b28     11 A8 0E F2 | 	cmp	local02, #17 wz
08b2c     36 00 00 FF 
08b30     B0 65 86 F1 | 	sub	objptr, ##28080
08b34     38 00 00 AF 
08b38     E8 65 06 A1 |  if_e	add	objptr, ##29160
08b3c     32 AB 02 AB |  if_e	rdlong	local03, objptr
08b40     01 AA 06 A1 |  if_e	add	local03, #1
08b44     32 AB 62 AC |  if_e	wrlong	local03, objptr
08b48     38 00 00 AF 
08b4c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08b50                 | '     if lparts(ct).token=token_end then exit loop
08b50     38 00 00 FF 
08b54     E8 65 06 F1 | 	add	objptr, ##29160
08b58     32 A9 02 FB | 	rdlong	local02, objptr
08b5c     03 A8 66 F0 | 	shl	local02, #3
08b60     02 00 00 FF 
08b64     38 64 86 F1 | 	sub	objptr, ##1080
08b68     32 A9 02 F1 | 	add	local02, objptr
08b6c     04 A8 06 F1 | 	add	local02, #4
08b70     54 A9 02 FB | 	rdlong	local02, local02
08b74     FE A9 0E F2 | 	cmp	local02, #510 wz
08b78     36 00 00 FF 
08b7c     B0 65 86 F1 | 	sub	objptr, ##28080
08b80     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08b84                 | LR__0821
08b84                 | ' return i,err
08b84     53 7B 02 F6 | 	mov	result1, local01
08b88     00 7C 06 F6 | 	mov	result2, #0
08b8c     E7 F0 03 F6 | 	mov	ptra, fp
08b90     F2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_varp_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b98                 | ' 
08b98                 | ' function compile_read() as ulong,ulong 
08b98                 | _compile_read
08b98     04 CA 05 F6 | 	mov	COUNT_, #4
08b9c     E8 00 A0 FD | 	call	#pushregs_
08ba0     00 A6 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     38 00 00 FF 
08ba8     E8 65 06 F1 | 	add	objptr, ##29160
08bac     32 A9 02 FB | 	rdlong	local02, objptr
08bb0     03 A8 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 64 86 F1 | 	sub	objptr, ##1080
08bbc     32 A9 02 F1 | 	add	local02, objptr
08bc0     04 A8 06 F1 | 	add	local02, #4
08bc4     54 A9 02 FB | 	rdlong	local02, local02
08bc8     FE A9 0E F2 | 	cmp	local02, #510 wz
08bcc     36 00 00 FF 
08bd0     B0 65 86 F1 | 	sub	objptr, ##28080
08bd4     98 00 90 AD |  if_e	jmp	#LR__0831
08bd8                 | '   do
08bd8                 | LR__0830
08bd8     EC 2E B0 FD | 	call	#_getaddr
08bdc     3D AB 02 F6 | 	mov	local03, result1
08be0     38 00 00 FF 
08be4     E8 65 06 F1 | 	add	objptr, ##29160
08be8     32 A9 02 FB | 	rdlong	local02, objptr
08bec     01 A8 06 F1 | 	add	local02, #1
08bf0     32 A9 62 FC | 	wrlong	local02, objptr
08bf4     01 A6 06 F1 | 	add	local01, #1
08bf8                 | '     err=getaddr() :ct+=1
08bf8                 | '     i+=1 
08bf8                 | '     if lparts(ct).token=token_comma then ct+=1 
08bf8     03 A8 66 F0 | 	shl	local02, #3
08bfc     02 00 00 FF 
08c00     38 64 86 F1 | 	sub	objptr, ##1080
08c04     32 A9 02 F1 | 	add	local02, objptr
08c08     04 A8 06 F1 | 	add	local02, #4
08c0c     54 A9 02 FB | 	rdlong	local02, local02
08c10     11 A8 0E F2 | 	cmp	local02, #17 wz
08c14     36 00 00 FF 
08c18     B0 65 86 F1 | 	sub	objptr, ##28080
08c1c     38 00 00 AF 
08c20     E8 65 06 A1 |  if_e	add	objptr, ##29160
08c24     32 AD 02 AB |  if_e	rdlong	local04, objptr
08c28     01 AC 06 A1 |  if_e	add	local04, #1
08c2c     32 AD 62 AC |  if_e	wrlong	local04, objptr
08c30     38 00 00 AF 
08c34     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08c38                 | '     if lparts(ct).token=token_end then exit loop
08c38     38 00 00 FF 
08c3c     E8 65 06 F1 | 	add	objptr, ##29160
08c40     32 A9 02 FB | 	rdlong	local02, objptr
08c44     03 A8 66 F0 | 	shl	local02, #3
08c48     02 00 00 FF 
08c4c     38 64 86 F1 | 	sub	objptr, ##1080
08c50     32 A9 02 F1 | 	add	local02, objptr
08c54     04 A8 06 F1 | 	add	local02, #4
08c58     54 A9 02 FB | 	rdlong	local02, local02
08c5c     FE A9 0E F2 | 	cmp	local02, #510 wz
08c60     36 00 00 FF 
08c64     B0 65 86 F1 | 	sub	objptr, ##28080
08c68     08 00 90 AD |  if_e	jmp	#LR__0832
08c6c     68 FF 9F FD | 	jmp	#LR__0830
08c70                 | LR__0831
08c70     36 AA 06 F6 | 	mov	local03, #54
08c74                 | LR__0832
08c74                 | ' return i,err
08c74     53 7B 02 F6 | 	mov	result1, local01
08c78     55 7D 02 F6 | 	mov	result2, local03
08c7c     E7 F0 03 F6 | 	mov	ptra, fp
08c80     F2 00 A0 FD | 	call	#popregs_
08c84                 | _compile_read_ret
08c84     2D 00 64 FD | 	ret
08c88                 | 
08c88                 | ' 
08c88                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c88                 | ' 
08c88                 | ' function compile_input() as ulong,ulong 
08c88                 | _compile_input
08c88     0F CA 05 F6 | 	mov	COUNT_, #15
08c8c     E8 00 A0 FD | 	call	#pushregs_
08c90                 | ' 
08c90                 | ' if lparts(ct).token=token_string then
08c90     38 00 00 FF 
08c94     E8 65 06 F1 | 	add	objptr, ##29160
08c98     32 97 02 FB | 	rdlong	arg03, objptr
08c9c     03 96 66 F0 | 	shl	arg03, #3
08ca0     02 00 00 FF 
08ca4     38 64 86 F1 | 	sub	objptr, ##1080
08ca8     32 97 02 F1 | 	add	arg03, objptr
08cac     04 96 06 F1 | 	add	arg03, #4
08cb0     4B 7D 02 FB | 	rdlong	result2, arg03
08cb4     01 00 00 FF 
08cb8     03 7C 0E F2 | 	cmp	result2, ##515 wz
08cbc     36 00 00 FF 
08cc0     B0 65 86 F1 | 	sub	objptr, ##28080
08cc4     38 06 90 5D |  if_ne	jmp	#LR__0847
08cc8     38 00 00 FF 
08ccc     E8 65 06 F1 | 	add	objptr, ##29160
08cd0     32 95 02 FB | 	rdlong	arg02, objptr
08cd4     03 94 66 F0 | 	shl	arg02, #3
08cd8     02 00 00 FF 
08cdc     38 64 86 F1 | 	sub	objptr, ##1080
08ce0     32 95 02 F1 | 	add	arg02, objptr
08ce4     4A 93 02 FB | 	rdlong	arg01, arg02
08ce8     36 00 00 FF 
08cec     B0 65 86 F1 | 	sub	objptr, ##28080
08cf0     49 AD 02 F6 | 	mov	local04, arg01
08cf4     D7 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08cf8                 | LR__0840
08cf8     56 7B CA FA | 	rdbyte	result1, local04 wz
08cfc     01 AC 06 51 |  if_ne	add	local04, #1
08d00     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08d04                 | LR__0841
08d04     49 AD 82 F1 | 	sub	local04, arg01
08d08     56 7B 02 F6 | 	mov	result1, local04
08d0c     54 00 00 FF 
08d10     CC 64 06 F1 | 	add	objptr, ##43212
08d14     32 7B 62 FC | 	wrlong	result1, objptr
08d18     58 64 86 F1 | 	sub	objptr, #88
08d1c     32 93 02 FB | 	rdlong	arg01, objptr
08d20     3D 93 82 F1 | 	sub	arg01, result1
08d24     04 92 86 F1 | 	sub	arg01, #4
08d28     03 92 26 F5 | 	andn	arg01, #3
08d2c     32 93 62 FC | 	wrlong	arg01, objptr
08d30     58 64 06 F1 | 	add	objptr, #88
08d34     32 95 02 FB | 	rdlong	arg02, objptr
08d38     54 00 00 FF 
08d3c     CC 64 86 F1 | 	sub	objptr, ##43212
08d40     2C 81 B1 FD | 	call	#_pslpoke
08d44                 | '   pslpoke memtop,l
08d44                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d44     01 AE 06 F6 | 	mov	local05, #1
08d48     54 00 00 FF 
08d4c     CC 64 06 F1 | 	add	objptr, ##43212
08d50     32 B1 02 FB | 	rdlong	local06, objptr
08d54     54 00 00 FF 
08d58     CC 64 86 F1 | 	sub	objptr, ##43212
08d5c     01 B0 06 F1 | 	add	local06, #1
08d60                 | LR__0842
08d60     58 AF 52 F2 | 	cmps	local05, local06 wc
08d64     5C 00 90 3D |  if_ae	jmp	#LR__0843
08d68     54 00 00 FF 
08d6c     74 64 06 F1 | 	add	objptr, ##43124
08d70     32 B3 02 FB | 	rdlong	local07, objptr
08d74     03 B2 06 F1 | 	add	local07, #3
08d78     57 B3 02 F1 | 	add	local07, local05
08d7c     1B 00 00 FF 
08d80     8C 64 86 F1 | 	sub	objptr, ##13964
08d84     32 95 02 FB | 	rdlong	arg02, objptr
08d88     03 94 66 F0 | 	shl	arg02, #3
08d8c     02 00 00 FF 
08d90     38 64 86 F1 | 	sub	objptr, ##1080
08d94     32 95 02 F1 | 	add	arg02, objptr
08d98     4A 93 02 FB | 	rdlong	arg01, arg02
08d9c     57 95 02 F6 | 	mov	arg02, local05
08da0     01 96 06 F6 | 	mov	arg03, #1
08da4     36 00 00 FF 
08da8     B0 65 86 F1 | 	sub	objptr, ##28080
08dac     0C D6 B1 FD | 	call	#__system__Mid_S
08db0     3D 95 C2 FA | 	rdbyte	arg02, result1
08db4     59 93 02 F6 | 	mov	arg01, local07
08db8     44 81 B1 FD | 	call	#_pspoke
08dbc     01 AE 06 F1 | 	add	local05, #1
08dc0     9C FF 9F FD | 	jmp	#LR__0842
08dc4                 | LR__0843
08dc4     54 00 00 FF 
08dc8     74 64 06 F1 | 	add	objptr, ##43124
08dcc     32 A7 02 FB | 	rdlong	local01, objptr
08dd0     2B AA 06 F6 | 	mov	local03, #43
08dd4     53 B5 02 F6 | 	mov	local08, local01
08dd8     54 B3 02 F6 | 	mov	local07, local02
08ddc     55 B7 02 F6 | 	mov	local09, local03
08de0     08 00 00 FF 
08de4     54 64 86 F1 | 	sub	objptr, ##4180
08de8     32 B1 02 FB | 	rdlong	local06, objptr
08dec     58 AF 02 F6 | 	mov	local05, local06
08df0     01 AE 66 F0 | 	shl	local05, #1
08df4     58 AF 02 F1 | 	add	local05, local06
08df8     02 AE 66 F0 | 	shl	local05, #2
08dfc     03 00 00 FF 
08e00     00 64 86 F1 | 	sub	objptr, ##1536
08e04     32 AF 02 F1 | 	add	local05, objptr
08e08     57 B5 62 FC | 	wrlong	local08, local05
08e0c     03 00 00 FF 
08e10     00 64 06 F1 | 	add	objptr, ##1536
08e14     32 B5 02 FB | 	rdlong	local08, objptr
08e18     5A B1 02 F6 | 	mov	local06, local08
08e1c     01 B0 66 F0 | 	shl	local06, #1
08e20     5A B1 02 F1 | 	add	local06, local08
08e24     02 B0 66 F0 | 	shl	local06, #2
08e28     03 00 00 FF 
08e2c     00 64 86 F1 | 	sub	objptr, ##1536
08e30     32 B1 02 F1 | 	add	local06, objptr
08e34     04 B0 06 F1 | 	add	local06, #4
08e38     58 B3 62 FC | 	wrlong	local07, local06
08e3c     03 00 00 FF 
08e40     00 64 06 F1 | 	add	objptr, ##1536
08e44     32 B5 02 FB | 	rdlong	local08, objptr
08e48     5A B3 02 F6 | 	mov	local07, local08
08e4c     01 B2 66 F0 | 	shl	local07, #1
08e50     5A B3 02 F1 | 	add	local07, local08
08e54     02 B2 66 F0 | 	shl	local07, #2
08e58     03 00 00 FF 
08e5c     00 64 86 F1 | 	sub	objptr, ##1536
08e60     32 B3 02 F1 | 	add	local07, objptr
08e64     08 B2 06 F1 | 	add	local07, #8
08e68     59 B7 62 FC | 	wrlong	local09, local07
08e6c     03 00 00 FF 
08e70     00 64 06 F1 | 	add	objptr, ##1536
08e74     32 B5 02 FB | 	rdlong	local08, objptr
08e78     01 B4 06 F1 | 	add	local08, #1
08e7c     32 B5 62 FC | 	wrlong	local08, objptr
08e80     13 00 00 FF 
08e84     38 64 86 F1 | 	sub	objptr, ##9784
08e88     32 B5 02 FB | 	rdlong	local08, objptr
08e8c     01 B4 06 F1 | 	add	local08, #1
08e90     32 B5 62 FC | 	wrlong	local08, objptr
08e94                 | '   t1.result.uresult=memtop
08e94                 | '   t1.result_type=result_string2  
08e94                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e94                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e94     03 B4 66 F0 | 	shl	local08, #3
08e98     02 00 00 FF 
08e9c     38 64 86 F1 | 	sub	objptr, ##1080
08ea0     32 B5 02 F1 | 	add	local08, objptr
08ea4     04 B4 06 F1 | 	add	local08, #4
08ea8     5A B5 02 FB | 	rdlong	local08, local08
08eac     11 B4 0E F2 | 	cmp	local08, #17 wz
08eb0     36 00 00 FF 
08eb4     B0 65 86 F1 | 	sub	objptr, ##28080
08eb8     60 01 90 5D |  if_ne	jmp	#LR__0844
08ebc     21 AA 06 F6 | 	mov	local03, #33
08ec0     53 B5 02 F6 | 	mov	local08, local01
08ec4     54 B3 02 F6 | 	mov	local07, local02
08ec8     55 B9 02 F6 | 	mov	local10, local03
08ecc     4C 00 00 FF 
08ed0     20 64 06 F1 | 	add	objptr, ##38944
08ed4     32 BB 02 FB | 	rdlong	local11, objptr
08ed8     5D BD 02 F6 | 	mov	local12, local11
08edc     01 BC 66 F0 | 	shl	local12, #1
08ee0     5D BD 02 F1 | 	add	local12, local11
08ee4     02 BC 66 F0 | 	shl	local12, #2
08ee8     03 00 00 FF 
08eec     00 64 86 F1 | 	sub	objptr, ##1536
08ef0     32 BD 02 F1 | 	add	local12, objptr
08ef4     5E B5 62 FC | 	wrlong	local08, local12
08ef8     03 00 00 FF 
08efc     00 64 06 F1 | 	add	objptr, ##1536
08f00     32 BF 02 FB | 	rdlong	local13, objptr
08f04     5F B5 02 F6 | 	mov	local08, local13
08f08     01 B4 66 F0 | 	shl	local08, #1
08f0c     5F B5 02 F1 | 	add	local08, local13
08f10     02 B4 66 F0 | 	shl	local08, #2
08f14     03 00 00 FF 
08f18     00 64 86 F1 | 	sub	objptr, ##1536
08f1c     32 B5 02 F1 | 	add	local08, objptr
08f20     04 B4 06 F1 | 	add	local08, #4
08f24     5A B3 62 FC | 	wrlong	local07, local08
08f28     03 00 00 FF 
08f2c     00 64 06 F1 | 	add	objptr, ##1536
08f30     32 B5 02 FB | 	rdlong	local08, objptr
08f34     5A C1 02 F6 | 	mov	local14, local08
08f38     01 C0 66 F0 | 	shl	local14, #1
08f3c     5A C1 02 F1 | 	add	local14, local08
08f40     02 C0 66 F0 | 	shl	local14, #2
08f44     03 00 00 FF 
08f48     00 64 86 F1 | 	sub	objptr, ##1536
08f4c     32 C1 02 F1 | 	add	local14, objptr
08f50     08 C0 06 F1 | 	add	local14, #8
08f54     60 B9 62 FC | 	wrlong	local10, local14
08f58     03 00 00 FF 
08f5c     00 64 06 F1 | 	add	objptr, ##1536
08f60     32 B5 02 FB | 	rdlong	local08, objptr
08f64     01 B4 06 F1 | 	add	local08, #1
08f68     32 B5 62 FC | 	wrlong	local08, objptr
08f6c     44 AA 06 F6 | 	mov	local03, #68
08f70     53 B5 02 F6 | 	mov	local08, local01
08f74     54 B3 02 F6 | 	mov	local07, local02
08f78     55 B9 02 F6 | 	mov	local10, local03
08f7c     32 C1 02 FB | 	rdlong	local14, objptr
08f80     60 BF 02 F6 | 	mov	local13, local14
08f84     01 BE 66 F0 | 	shl	local13, #1
08f88     60 BF 02 F1 | 	add	local13, local14
08f8c     02 BE 66 F0 | 	shl	local13, #2
08f90     03 00 00 FF 
08f94     00 64 86 F1 | 	sub	objptr, ##1536
08f98     32 BF 02 F1 | 	add	local13, objptr
08f9c     5F B5 62 FC | 	wrlong	local08, local13
08fa0     03 00 00 FF 
08fa4     00 64 06 F1 | 	add	objptr, ##1536
08fa8     32 C1 02 FB | 	rdlong	local14, objptr
08fac     60 BF 02 F6 | 	mov	local13, local14
08fb0     01 BE 66 F0 | 	shl	local13, #1
08fb4     60 BF 02 F1 | 	add	local13, local14
08fb8     02 BE 66 F0 | 	shl	local13, #2
08fbc     03 00 00 FF 
08fc0     00 64 86 F1 | 	sub	objptr, ##1536
08fc4     32 BF 02 F1 | 	add	local13, objptr
08fc8     04 BE 06 F1 | 	add	local13, #4
08fcc     5F B3 62 FC | 	wrlong	local07, local13
08fd0     03 00 00 FF 
08fd4     00 64 06 F1 | 	add	objptr, ##1536
08fd8     32 BF 02 FB | 	rdlong	local13, objptr
08fdc     5F C1 02 F6 | 	mov	local14, local13
08fe0     01 C0 66 F0 | 	shl	local14, #1
08fe4     5F C1 02 F1 | 	add	local14, local13
08fe8     02 C0 66 F0 | 	shl	local14, #2
08fec     03 00 00 FF 
08ff0     00 64 86 F1 | 	sub	objptr, ##1536
08ff4     32 C1 02 F1 | 	add	local14, objptr
08ff8     08 C0 06 F1 | 	add	local14, #8
08ffc     60 B9 62 FC | 	wrlong	local10, local14
09000     03 00 00 FF 
09004     00 64 06 F1 | 	add	objptr, ##1536
09008     32 B5 02 FB | 	rdlong	local08, objptr
0900c     01 B4 06 F1 | 	add	local08, #1
09010     32 B5 62 FC | 	wrlong	local08, objptr
09014     4C 00 00 FF 
09018     20 64 86 F1 | 	sub	objptr, ##38944
0901c                 | LR__0844
0901c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0901c     38 00 00 FF 
09020     E8 65 06 F1 | 	add	objptr, ##29160
09024     32 B5 02 FB | 	rdlong	local08, objptr
09028     03 B4 66 F0 | 	shl	local08, #3
0902c     02 00 00 FF 
09030     38 64 86 F1 | 	sub	objptr, ##1080
09034     32 B5 02 F1 | 	add	local08, objptr
09038     04 B4 06 F1 | 	add	local08, #4
0903c     5A C1 02 FB | 	rdlong	local14, local08
09040     12 C0 0E F2 | 	cmp	local14, #18 wz
09044     36 00 00 FF 
09048     B0 65 86 F1 | 	sub	objptr, ##28080
0904c     60 01 90 5D |  if_ne	jmp	#LR__0845
09050     22 AA 06 F6 | 	mov	local03, #34
09054     53 B5 02 F6 | 	mov	local08, local01
09058     54 B3 02 F6 | 	mov	local07, local02
0905c     55 B9 02 F6 | 	mov	local10, local03
09060     4C 00 00 FF 
09064     20 64 06 F1 | 	add	objptr, ##38944
09068     32 C1 02 FB | 	rdlong	local14, objptr
0906c     60 BF 02 F6 | 	mov	local13, local14
09070     01 BE 66 F0 | 	shl	local13, #1
09074     60 BF 02 F1 | 	add	local13, local14
09078     02 BE 66 F0 | 	shl	local13, #2
0907c     03 00 00 FF 
09080     00 64 86 F1 | 	sub	objptr, ##1536
09084     32 BF 02 F1 | 	add	local13, objptr
09088     5F B5 62 FC | 	wrlong	local08, local13
0908c     03 00 00 FF 
09090     00 64 06 F1 | 	add	objptr, ##1536
09094     32 C1 02 FB | 	rdlong	local14, objptr
09098     60 B5 02 F6 | 	mov	local08, local14
0909c     01 B4 66 F0 | 	shl	local08, #1
090a0     60 B5 02 F1 | 	add	local08, local14
090a4     02 B4 66 F0 | 	shl	local08, #2
090a8     03 00 00 FF 
090ac     00 64 86 F1 | 	sub	objptr, ##1536
090b0     32 B5 02 F1 | 	add	local08, objptr
090b4     04 B4 06 F1 | 	add	local08, #4
090b8     5A B3 62 FC | 	wrlong	local07, local08
090bc     03 00 00 FF 
090c0     00 64 06 F1 | 	add	objptr, ##1536
090c4     32 B5 02 FB | 	rdlong	local08, objptr
090c8     5A C1 02 F6 | 	mov	local14, local08
090cc     01 C0 66 F0 | 	shl	local14, #1
090d0     5A C1 02 F1 | 	add	local14, local08
090d4     02 C0 66 F0 | 	shl	local14, #2
090d8     03 00 00 FF 
090dc     00 64 86 F1 | 	sub	objptr, ##1536
090e0     32 C1 02 F1 | 	add	local14, objptr
090e4     08 C0 06 F1 | 	add	local14, #8
090e8     60 B9 62 FC | 	wrlong	local10, local14
090ec     03 00 00 FF 
090f0     00 64 06 F1 | 	add	objptr, ##1536
090f4     32 B5 02 FB | 	rdlong	local08, objptr
090f8     01 B4 06 F1 | 	add	local08, #1
090fc     32 B5 62 FC | 	wrlong	local08, objptr
09100     44 AA 06 F6 | 	mov	local03, #68
09104     53 B5 02 F6 | 	mov	local08, local01
09108     54 B3 02 F6 | 	mov	local07, local02
0910c     55 B9 02 F6 | 	mov	local10, local03
09110     32 C1 02 FB | 	rdlong	local14, objptr
09114     60 BF 02 F6 | 	mov	local13, local14
09118     01 BE 66 F0 | 	shl	local13, #1
0911c     60 BF 02 F1 | 	add	local13, local14
09120     02 BE 66 F0 | 	shl	local13, #2
09124     03 00 00 FF 
09128     00 64 86 F1 | 	sub	objptr, ##1536
0912c     32 BF 02 F1 | 	add	local13, objptr
09130     5F B5 62 FC | 	wrlong	local08, local13
09134     03 00 00 FF 
09138     00 64 06 F1 | 	add	objptr, ##1536
0913c     32 C1 02 FB | 	rdlong	local14, objptr
09140     60 BF 02 F6 | 	mov	local13, local14
09144     01 BE 66 F0 | 	shl	local13, #1
09148     60 BF 02 F1 | 	add	local13, local14
0914c     02 BE 66 F0 | 	shl	local13, #2
09150     03 00 00 FF 
09154     00 64 86 F1 | 	sub	objptr, ##1536
09158     32 BF 02 F1 | 	add	local13, objptr
0915c     04 BE 06 F1 | 	add	local13, #4
09160     5F B3 62 FC | 	wrlong	local07, local13
09164     03 00 00 FF 
09168     00 64 06 F1 | 	add	objptr, ##1536
0916c     32 BF 02 FB | 	rdlong	local13, objptr
09170     5F C1 02 F6 | 	mov	local14, local13
09174     01 C0 66 F0 | 	shl	local14, #1
09178     5F C1 02 F1 | 	add	local14, local13
0917c     02 C0 66 F0 | 	shl	local14, #2
09180     03 00 00 FF 
09184     00 64 86 F1 | 	sub	objptr, ##1536
09188     32 C1 02 F1 | 	add	local14, objptr
0918c     08 C0 06 F1 | 	add	local14, #8
09190     60 B9 62 FC | 	wrlong	local10, local14
09194     03 00 00 FF 
09198     00 64 06 F1 | 	add	objptr, ##1536
0919c     32 B5 02 FB | 	rdlong	local08, objptr
091a0     01 B4 06 F1 | 	add	local08, #1
091a4     32 B5 62 FC | 	wrlong	local08, objptr
091a8     4C 00 00 FF 
091ac     20 64 86 F1 | 	sub	objptr, ##38944
091b0                 | LR__0845
091b0                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
091b0     38 00 00 FF 
091b4     E8 65 06 F1 | 	add	objptr, ##29160
091b8     32 B5 02 FB | 	rdlong	local08, objptr
091bc     03 B4 66 F0 | 	shl	local08, #3
091c0     02 00 00 FF 
091c4     38 64 86 F1 | 	sub	objptr, ##1080
091c8     32 B5 02 F1 | 	add	local08, objptr
091cc     04 B4 06 F1 | 	add	local08, #4
091d0     5A C1 02 FB | 	rdlong	local14, local08
091d4     12 C0 0E F2 | 	cmp	local14, #18 wz
091d8     36 00 00 FF 
091dc     B0 65 86 F1 | 	sub	objptr, ##28080
091e0     00 01 90 AD |  if_e	jmp	#LR__0846
091e4     38 00 00 FF 
091e8     E8 65 06 F1 | 	add	objptr, ##29160
091ec     32 B5 02 FB | 	rdlong	local08, objptr
091f0     03 B4 66 F0 | 	shl	local08, #3
091f4     02 00 00 FF 
091f8     38 64 86 F1 | 	sub	objptr, ##1080
091fc     32 B5 02 F1 | 	add	local08, objptr
09200     04 B4 06 F1 | 	add	local08, #4
09204     5A C1 02 FB | 	rdlong	local14, local08
09208     11 C0 0E F2 | 	cmp	local14, #17 wz
0920c     36 00 00 FF 
09210     B0 65 86 F1 | 	sub	objptr, ##28080
09214     CC 00 90 AD |  if_e	jmp	#LR__0846
09218     44 AA 06 F6 | 	mov	local03, #68
0921c     53 B5 02 F6 | 	mov	local08, local01
09220     54 B3 02 F6 | 	mov	local07, local02
09224     55 B9 02 F6 | 	mov	local10, local03
09228     4C 00 00 FF 
0922c     20 64 06 F1 | 	add	objptr, ##38944
09230     32 C1 02 FB | 	rdlong	local14, objptr
09234     60 BF 02 F6 | 	mov	local13, local14
09238     01 BE 66 F0 | 	shl	local13, #1
0923c     60 BF 02 F1 | 	add	local13, local14
09240     02 BE 66 F0 | 	shl	local13, #2
09244     03 00 00 FF 
09248     00 64 86 F1 | 	sub	objptr, ##1536
0924c     32 BF 02 F1 | 	add	local13, objptr
09250     5F B5 62 FC | 	wrlong	local08, local13
09254     03 00 00 FF 
09258     00 64 06 F1 | 	add	objptr, ##1536
0925c     32 C1 02 FB | 	rdlong	local14, objptr
09260     60 BF 02 F6 | 	mov	local13, local14
09264     01 BE 66 F0 | 	shl	local13, #1
09268     60 BF 02 F1 | 	add	local13, local14
0926c     02 BE 66 F0 | 	shl	local13, #2
09270     03 00 00 FF 
09274     00 64 86 F1 | 	sub	objptr, ##1536
09278     32 BF 02 F1 | 	add	local13, objptr
0927c     04 BE 06 F1 | 	add	local13, #4
09280     5F B3 62 FC | 	wrlong	local07, local13
09284     03 00 00 FF 
09288     00 64 06 F1 | 	add	objptr, ##1536
0928c     32 BF 02 FB | 	rdlong	local13, objptr
09290     5F C1 02 F6 | 	mov	local14, local13
09294     01 C0 66 F0 | 	shl	local14, #1
09298     5F C1 02 F1 | 	add	local14, local13
0929c     02 C0 66 F0 | 	shl	local14, #2
092a0     03 00 00 FF 
092a4     00 64 86 F1 | 	sub	objptr, ##1536
092a8     32 C1 02 F1 | 	add	local14, objptr
092ac     08 C0 06 F1 | 	add	local14, #8
092b0     60 B9 62 FC | 	wrlong	local10, local14
092b4     03 00 00 FF 
092b8     00 64 06 F1 | 	add	objptr, ##1536
092bc     32 B5 02 FB | 	rdlong	local08, objptr
092c0     01 B4 06 F1 | 	add	local08, #1
092c4     32 B5 62 FC | 	wrlong	local08, objptr
092c8     13 00 00 FF 
092cc     38 64 86 F1 | 	sub	objptr, ##9784
092d0     32 B5 02 FB | 	rdlong	local08, objptr
092d4     01 B4 86 F1 | 	sub	local08, #1
092d8     32 B5 62 FC | 	wrlong	local08, objptr
092dc     38 00 00 FF 
092e0     E8 65 86 F1 | 	sub	objptr, ##29160
092e4                 | LR__0846
092e4     38 00 00 FF 
092e8     E8 65 06 F1 | 	add	objptr, ##29160
092ec     32 B5 02 FB | 	rdlong	local08, objptr
092f0     01 B4 06 F1 | 	add	local08, #1
092f4     32 B5 62 FC | 	wrlong	local08, objptr
092f8     38 00 00 FF 
092fc     E8 65 86 F1 | 	sub	objptr, ##29160
09300                 | LR__0847
09300     00 AE 06 F6 | 	mov	local05, #0
09304                 | ' i=0 : err=0
09304                 | ' if lparts(ct).token<>token_end then
09304     38 00 00 FF 
09308     E8 65 06 F1 | 	add	objptr, ##29160
0930c     32 C1 02 FB | 	rdlong	local14, objptr
09310     03 C0 66 F0 | 	shl	local14, #3
09314     02 00 00 FF 
09318     38 64 86 F1 | 	sub	objptr, ##1080
0931c     32 C1 02 F1 | 	add	local14, objptr
09320     04 C0 06 F1 | 	add	local14, #4
09324     60 C1 02 FB | 	rdlong	local14, local14
09328     FE C1 0E F2 | 	cmp	local14, #510 wz
0932c     36 00 00 FF 
09330     B0 65 86 F1 | 	sub	objptr, ##28080
09334     98 00 90 AD |  if_e	jmp	#LR__0849
09338                 | '   do
09338                 | LR__0848
09338     8C 27 B0 FD | 	call	#_getaddr
0933c     3D C3 02 F6 | 	mov	local15, result1
09340     38 00 00 FF 
09344     E8 65 06 F1 | 	add	objptr, ##29160
09348     32 C1 02 FB | 	rdlong	local14, objptr
0934c     01 C0 06 F1 | 	add	local14, #1
09350     32 C1 62 FC | 	wrlong	local14, objptr
09354     01 AE 06 F1 | 	add	local05, #1
09358                 | '     err=getaddr() :ct+=1
09358                 | '     i+=1 
09358                 | '     if lparts(ct).token=token_comma then ct+=1 
09358     03 C0 66 F0 | 	shl	local14, #3
0935c     02 00 00 FF 
09360     38 64 86 F1 | 	sub	objptr, ##1080
09364     32 C1 02 F1 | 	add	local14, objptr
09368     04 C0 06 F1 | 	add	local14, #4
0936c     60 C1 02 FB | 	rdlong	local14, local14
09370     11 C0 0E F2 | 	cmp	local14, #17 wz
09374     36 00 00 FF 
09378     B0 65 86 F1 | 	sub	objptr, ##28080
0937c     38 00 00 AF 
09380     E8 65 06 A1 |  if_e	add	objptr, ##29160
09384     32 B5 02 AB |  if_e	rdlong	local08, objptr
09388     01 B4 06 A1 |  if_e	add	local08, #1
0938c     32 B5 62 AC |  if_e	wrlong	local08, objptr
09390     38 00 00 AF 
09394     E8 65 86 A1 |  if_e	sub	objptr, ##29160
09398                 | '     if lparts(ct).token=token_end then exit loop
09398     38 00 00 FF 
0939c     E8 65 06 F1 | 	add	objptr, ##29160
093a0     32 C1 02 FB | 	rdlong	local14, objptr
093a4     03 C0 66 F0 | 	shl	local14, #3
093a8     02 00 00 FF 
093ac     38 64 86 F1 | 	sub	objptr, ##1080
093b0     32 C1 02 F1 | 	add	local14, objptr
093b4     04 C0 06 F1 | 	add	local14, #4
093b8     60 C1 02 FB | 	rdlong	local14, local14
093bc     FE C1 0E F2 | 	cmp	local14, #510 wz
093c0     36 00 00 FF 
093c4     B0 65 86 F1 | 	sub	objptr, ##28080
093c8     08 00 90 AD |  if_e	jmp	#LR__0850
093cc     68 FF 9F FD | 	jmp	#LR__0848
093d0                 | LR__0849
093d0     36 C2 06 F6 | 	mov	local15, #54
093d4                 | LR__0850
093d4                 | ' return i,err
093d4     57 7B 02 F6 | 	mov	result1, local05
093d8     61 7D 02 F6 | 	mov	result2, local15
093dc     E7 F0 03 F6 | 	mov	ptra, fp
093e0     F2 00 A0 FD | 	call	#popregs_
093e4                 | _compile_input_ret
093e4     2D 00 64 FD | 	ret
093e8                 | 
093e8                 | ' 
093e8                 | ' '----- compile assign to an array element
093e8                 | ' 
093e8                 | ' function compile_array_assign() as ulong 
093e8                 | _compile_array_assign
093e8     0B CA 05 F6 | 	mov	COUNT_, #11
093ec     E8 00 A0 FD | 	call	#pushregs_
093f0     00 AC 06 F6 | 	mov	local04, #0
093f4     00 AE 06 F6 | 	mov	local05, #0
093f8     38 00 00 FF 
093fc     E8 65 06 F1 | 	add	objptr, ##29160
09400     32 B1 02 FB | 	rdlong	local06, objptr
09404     58 7B 02 F6 | 	mov	result1, local06
09408     01 7A 86 F1 | 	sub	result1, #1
0940c     03 7A 66 F0 | 	shl	result1, #3
09410     02 00 00 FF 
09414     38 64 86 F1 | 	sub	objptr, ##1080
09418     32 7B 02 F1 | 	add	result1, objptr
0941c     3D B3 02 FB | 	rdlong	local07, result1
09420                 | ' numpar=0 : err=0
09420                 | ' varname$=lparts(ct-1).part$
09420                 | ' if lparts(ct).token=token_lpar then
09420     03 B0 66 F0 | 	shl	local06, #3
09424     32 B1 02 F1 | 	add	local06, objptr
09428     04 B0 06 F1 | 	add	local06, #4
0942c     58 B1 02 FB | 	rdlong	local06, local06
09430     15 B0 0E F2 | 	cmp	local06, #21 wz
09434     36 00 00 FF 
09438     B0 65 86 F1 | 	sub	objptr, ##28080
0943c     F0 01 90 5D |  if_ne	jmp	#LR__0864
09440     38 00 00 FF 
09444     E8 65 06 F1 | 	add	objptr, ##29160
09448     32 B5 02 FB | 	rdlong	local08, objptr
0944c     01 B4 06 F1 | 	add	local08, #1
09450     32 B5 62 FC | 	wrlong	local08, objptr
09454     38 00 00 FF 
09458     E8 65 86 F1 | 	sub	objptr, ##29160
0945c                 | '   ct+=1 											' omit this lpar, this is for expr list
0945c                 | '   do
0945c                 | LR__0860
0945c     F8 29 B0 FD | 	call	#_expr
09460     38 00 00 FF 
09464     E8 65 06 F1 | 	add	objptr, ##29160
09468     32 B1 02 FB | 	rdlong	local06, objptr
0946c     01 B0 06 F1 | 	add	local06, #1
09470     32 B1 62 FC | 	wrlong	local06, objptr
09474     01 AC 06 F1 | 	add	local04, #1
09478     01 B0 86 F1 | 	sub	local06, #1
0947c     03 B0 66 F0 | 	shl	local06, #3
09480     02 00 00 FF 
09484     38 64 86 F1 | 	sub	objptr, ##1080
09488     32 B1 02 F1 | 	add	local06, objptr
0948c     04 B0 06 F1 | 	add	local06, #4
09490     58 B5 02 FB | 	rdlong	local08, local06
09494     14 B4 0E F2 | 	cmp	local08, #20 wz
09498     36 00 00 FF 
0949c     B0 65 86 F1 | 	sub	objptr, ##28080
094a0     34 00 90 AD |  if_e	jmp	#LR__0861
094a4     38 00 00 FF 
094a8     E8 65 06 F1 | 	add	objptr, ##29160
094ac     32 B5 02 FB | 	rdlong	local08, objptr
094b0     03 B4 66 F0 | 	shl	local08, #3
094b4     02 00 00 FF 
094b8     38 64 86 F1 | 	sub	objptr, ##1080
094bc     32 B5 02 F1 | 	add	local08, objptr
094c0     04 B4 06 F1 | 	add	local08, #4
094c4     5A B5 02 FB | 	rdlong	local08, local08
094c8     FE B5 0E F2 | 	cmp	local08, #510 wz
094cc     36 00 00 FF 
094d0     B0 65 86 F1 | 	sub	objptr, ##28080
094d4     84 FF 9F 5D |  if_ne	jmp	#LR__0860
094d8                 | LR__0861
094d8     38 00 00 FF 
094dc     E8 65 06 F1 | 	add	objptr, ##29160
094e0     32 B5 02 FB | 	rdlong	local08, objptr
094e4     01 B4 06 F1 | 	add	local08, #1
094e8     32 B5 62 FC | 	wrlong	local08, objptr
094ec     38 00 00 FF 
094f0     E8 65 86 F1 | 	sub	objptr, ##29160
094f4     60 29 B0 FD | 	call	#_expr
094f8     01 B6 66 F6 | 	neg	local09, #1
094fc     00 B8 06 F6 | 	mov	local10, #0
09500                 | '   ct+=1 : expr()
09500                 | '   j=-1 : i=0 
09500                 | '   do 
09500                 | LR__0862
09500                 | '     if variables(i).name=varname$ then j=i: exit loop
09500     5C B1 02 F6 | 	mov	local06, local10
09504     04 B0 66 F0 | 	shl	local06, #4
09508     32 B5 02 F6 | 	mov	local08, objptr
0950c     16 00 00 FF 
09510     9C B5 06 F1 | 	add	local08, ##11676
09514     5A B1 02 F1 | 	add	local06, local08
09518     58 93 02 FB | 	rdlong	arg01, local06
0951c     59 95 02 F6 | 	mov	arg02, local07
09520     00 B5 B1 FD | 	call	#__system___string_cmp
09524     00 7A 0E F2 | 	cmp	result1, #0 wz
09528     5C B7 02 A6 |  if_e	mov	local09, local10
0952c     20 00 90 AD |  if_e	jmp	#LR__0863
09530     01 B8 06 F1 | 	add	local10, #1
09534     36 00 00 FF 
09538     AC 65 06 F1 | 	add	objptr, ##28076
0953c     32 B5 02 FB | 	rdlong	local08, objptr
09540     36 00 00 FF 
09544     AC 65 86 F1 | 	sub	objptr, ##28076
09548     5A B9 5A F2 | 	cmps	local10, local08 wcz
0954c     B0 FF 9F ED |  if_be	jmp	#LR__0862
09550                 | LR__0863
09550     5B A7 02 F6 | 	mov	local01, local09
09554     56 A9 02 F6 | 	mov	local02, local04
09558     17 AA 06 F6 | 	mov	local03, #23
0955c     53 B5 02 F6 | 	mov	local08, local01
09560     54 BB 02 F6 | 	mov	local11, local02
09564     55 B3 02 F6 | 	mov	local07, local03
09568     4C 00 00 FF 
0956c     20 64 06 F1 | 	add	objptr, ##38944
09570     32 A7 02 FB | 	rdlong	local01, objptr
09574     53 B7 02 F6 | 	mov	local09, local01
09578     01 B6 66 F0 | 	shl	local09, #1
0957c     53 B7 02 F1 | 	add	local09, local01
09580     02 B6 66 F0 | 	shl	local09, #2
09584     03 00 00 FF 
09588     00 64 86 F1 | 	sub	objptr, ##1536
0958c     32 B7 02 F1 | 	add	local09, objptr
09590     5B B5 62 FC | 	wrlong	local08, local09
09594     03 00 00 FF 
09598     00 64 06 F1 | 	add	objptr, ##1536
0959c     32 A7 02 FB | 	rdlong	local01, objptr
095a0     53 B7 02 F6 | 	mov	local09, local01
095a4     01 B6 66 F0 | 	shl	local09, #1
095a8     53 B7 02 F1 | 	add	local09, local01
095ac     02 B6 66 F0 | 	shl	local09, #2
095b0     03 00 00 FF 
095b4     00 64 86 F1 | 	sub	objptr, ##1536
095b8     32 B7 02 F1 | 	add	local09, objptr
095bc     04 B6 06 F1 | 	add	local09, #4
095c0     5B BB 62 FC | 	wrlong	local11, local09
095c4     03 00 00 FF 
095c8     00 64 06 F1 | 	add	objptr, ##1536
095cc     32 BB 02 FB | 	rdlong	local11, objptr
095d0     5D A7 02 F6 | 	mov	local01, local11
095d4     01 A6 66 F0 | 	shl	local01, #1
095d8     5D A7 02 F1 | 	add	local01, local11
095dc     02 A6 66 F0 | 	shl	local01, #2
095e0     03 00 00 FF 
095e4     00 64 86 F1 | 	sub	objptr, ##1536
095e8     32 A7 02 F1 | 	add	local01, objptr
095ec     08 A6 06 F1 | 	add	local01, #8
095f0     53 B3 62 FC | 	wrlong	local07, local01
095f4     03 00 00 FF 
095f8     00 64 06 F1 | 	add	objptr, ##1536
095fc     32 B5 02 FB | 	rdlong	local08, objptr
09600     01 B4 06 F1 | 	add	local08, #1
09604     32 B5 62 FC | 	wrlong	local08, objptr
09608                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09608                 | '   if numpar>3 then err=45
09608     04 AC 16 F2 | 	cmp	local04, #4 wc
0960c     2D AE 06 36 |  if_ae	mov	local05, #45
09610                 | '   if i>varnum then err=20
09610     15 00 00 FF 
09614     74 64 86 F1 | 	sub	objptr, ##10868
09618     32 B5 02 FB | 	rdlong	local08, objptr
0961c     36 00 00 FF 
09620     AC 65 86 F1 | 	sub	objptr, ##28076
09624     5A B9 5A F2 | 	cmps	local10, local08 wcz
09628     14 AE 06 16 |  if_a	mov	local05, #20
0962c     04 00 90 FD | 	jmp	#LR__0865
09630                 | LR__0864
09630     0E AE 06 F6 | 	mov	local05, #14
09634                 | LR__0865
09634                 | ' return err
09634     57 7B 02 F6 | 	mov	result1, local05
09638     E7 F0 03 F6 | 	mov	ptra, fp
0963c     F2 00 A0 FD | 	call	#popregs_
09640                 | _compile_array_assign_ret
09640     2D 00 64 FD | 	ret
09644                 | 
09644                 | ' 
09644                 | ' '----- compile print command with its ";" and "," modifiers
09644                 | ' 
09644                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09644                 | _compile_print
09644     0B CA 05 F6 | 	mov	COUNT_, #11
09648     E8 00 A0 FD | 	call	#pushregs_
0964c     00 A6 06 F6 | 	mov	local01, #0
09650     1D AA 06 F6 | 	mov	local03, #29
09654                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09654                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09654     38 00 00 FF 
09658     E8 65 06 F1 | 	add	objptr, ##29160
0965c     32 AD 02 FB | 	rdlong	local04, objptr
09660     03 AC 66 F0 | 	shl	local04, #3
09664     02 00 00 FF 
09668     38 64 86 F1 | 	sub	objptr, ##1080
0966c     32 AD 02 F1 | 	add	local04, objptr
09670     04 AC 06 F1 | 	add	local04, #4
09674     56 AD 02 FB | 	rdlong	local04, local04
09678     FE AD 0E F2 | 	cmp	local04, #510 wz
0967c     36 00 00 FF 
09680     B0 65 86 F1 | 	sub	objptr, ##28080
09684     68 01 90 5D |  if_ne	jmp	#LR__0870
09688     20 AA 06 F6 | 	mov	local03, #32
0968c     53 AF 02 F6 | 	mov	local05, local01
09690     54 B1 02 F6 | 	mov	local06, local02
09694     55 B3 02 F6 | 	mov	local07, local03
09698     4C 00 00 FF 
0969c     20 64 06 F1 | 	add	objptr, ##38944
096a0     32 B5 02 FB | 	rdlong	local08, objptr
096a4     5A B7 02 F6 | 	mov	local09, local08
096a8     01 B6 66 F0 | 	shl	local09, #1
096ac     5A B7 02 F1 | 	add	local09, local08
096b0     02 B6 66 F0 | 	shl	local09, #2
096b4     03 00 00 FF 
096b8     00 64 86 F1 | 	sub	objptr, ##1536
096bc     32 B7 02 F1 | 	add	local09, objptr
096c0     5B AF 62 FC | 	wrlong	local05, local09
096c4     03 00 00 FF 
096c8     00 64 06 F1 | 	add	objptr, ##1536
096cc     32 AF 02 FB | 	rdlong	local05, objptr
096d0     57 B9 02 F6 | 	mov	local10, local05
096d4     01 B8 66 F0 | 	shl	local10, #1
096d8     57 B9 02 F1 | 	add	local10, local05
096dc     02 B8 66 F0 | 	shl	local10, #2
096e0     03 00 00 FF 
096e4     00 64 86 F1 | 	sub	objptr, ##1536
096e8     32 B9 02 F1 | 	add	local10, objptr
096ec     04 B8 06 F1 | 	add	local10, #4
096f0     5C B1 62 FC | 	wrlong	local06, local10
096f4     03 00 00 FF 
096f8     00 64 06 F1 | 	add	objptr, ##1536
096fc     32 AF 02 FB | 	rdlong	local05, objptr
09700     57 BB 02 F6 | 	mov	local11, local05
09704     01 BA 66 F0 | 	shl	local11, #1
09708     57 BB 02 F1 | 	add	local11, local05
0970c     02 BA 66 F0 | 	shl	local11, #2
09710     03 00 00 FF 
09714     00 64 86 F1 | 	sub	objptr, ##1536
09718     32 BB 02 F1 | 	add	local11, objptr
0971c     08 BA 06 F1 | 	add	local11, #8
09720     5D B3 62 FC | 	wrlong	local07, local11
09724     03 00 00 FF 
09728     00 64 06 F1 | 	add	objptr, ##1536
0972c     32 AF 02 FB | 	rdlong	local05, objptr
09730     01 AE 06 F1 | 	add	local05, #1
09734     32 AF 62 FC | 	wrlong	local05, objptr
09738     44 AA 06 F6 | 	mov	local03, #68
0973c     53 AF 02 F6 | 	mov	local05, local01
09740     54 B1 02 F6 | 	mov	local06, local02
09744     55 B3 02 F6 | 	mov	local07, local03
09748     32 B5 02 FB | 	rdlong	local08, objptr
0974c     5A B7 02 F6 | 	mov	local09, local08
09750     01 B6 66 F0 | 	shl	local09, #1
09754     5A B7 02 F1 | 	add	local09, local08
09758     02 B6 66 F0 | 	shl	local09, #2
0975c     03 00 00 FF 
09760     00 64 86 F1 | 	sub	objptr, ##1536
09764     32 B7 02 F1 | 	add	local09, objptr
09768     5B AF 62 FC | 	wrlong	local05, local09
0976c     03 00 00 FF 
09770     00 64 06 F1 | 	add	objptr, ##1536
09774     32 BB 02 FB | 	rdlong	local11, objptr
09778     5D B9 02 F6 | 	mov	local10, local11
0977c     01 B8 66 F0 | 	shl	local10, #1
09780     5D B9 02 F1 | 	add	local10, local11
09784     02 B8 66 F0 | 	shl	local10, #2
09788     03 00 00 FF 
0978c     00 64 86 F1 | 	sub	objptr, ##1536
09790     32 B9 02 F1 | 	add	local10, objptr
09794     04 B8 06 F1 | 	add	local10, #4
09798     5C B1 62 FC | 	wrlong	local06, local10
0979c     03 00 00 FF 
097a0     00 64 06 F1 | 	add	objptr, ##1536
097a4     32 B9 02 FB | 	rdlong	local10, objptr
097a8     5C BB 02 F6 | 	mov	local11, local10
097ac     01 BA 66 F0 | 	shl	local11, #1
097b0     5C BB 02 F1 | 	add	local11, local10
097b4     02 BA 66 F0 | 	shl	local11, #2
097b8     03 00 00 FF 
097bc     00 64 86 F1 | 	sub	objptr, ##1536
097c0     32 BB 02 F1 | 	add	local11, objptr
097c4     08 BA 06 F1 | 	add	local11, #8
097c8     5D B3 62 FC | 	wrlong	local07, local11
097cc     03 00 00 FF 
097d0     00 64 06 F1 | 	add	objptr, ##1536
097d4     32 AF 02 FB | 	rdlong	local05, objptr
097d8     01 AE 06 F1 | 	add	local05, #1
097dc     32 AF 62 FC | 	wrlong	local05, objptr
097e0     4C 00 00 FF 
097e4     20 64 86 F1 | 	sub	objptr, ##38944
097e8     00 7A 06 F6 | 	mov	result1, #0
097ec     20 05 90 FD | 	jmp	#LR__0877
097f0                 | LR__0870
097f0                 | ' do
097f0                 | LR__0871
097f0     64 26 B0 FD | 	call	#_expr
097f4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
097f4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097f4     38 00 00 FF 
097f8     E8 65 06 F1 | 	add	objptr, ##29160
097fc     32 AD 02 FB | 	rdlong	local04, objptr
09800     03 AC 66 F0 | 	shl	local04, #3
09804     02 00 00 FF 
09808     38 64 86 F1 | 	sub	objptr, ##1080
0980c     32 AD 02 F1 | 	add	local04, objptr
09810     04 AC 06 F1 | 	add	local04, #4
09814     56 B5 02 FB | 	rdlong	local08, local04
09818     11 B4 0E F2 | 	cmp	local08, #17 wz
0981c     36 00 00 FF 
09820     B0 65 86 F1 | 	sub	objptr, ##28080
09824     60 01 90 5D |  if_ne	jmp	#LR__0872
09828     21 AA 06 F6 | 	mov	local03, #33
0982c     53 AF 02 F6 | 	mov	local05, local01
09830     54 B1 02 F6 | 	mov	local06, local02
09834     55 B3 02 F6 | 	mov	local07, local03
09838     4C 00 00 FF 
0983c     20 64 06 F1 | 	add	objptr, ##38944
09840     32 B5 02 FB | 	rdlong	local08, objptr
09844     5A B7 02 F6 | 	mov	local09, local08
09848     01 B6 66 F0 | 	shl	local09, #1
0984c     5A B7 02 F1 | 	add	local09, local08
09850     02 B6 66 F0 | 	shl	local09, #2
09854     03 00 00 FF 
09858     00 64 86 F1 | 	sub	objptr, ##1536
0985c     32 B7 02 F1 | 	add	local09, objptr
09860     5B AF 62 FC | 	wrlong	local05, local09
09864     03 00 00 FF 
09868     00 64 06 F1 | 	add	objptr, ##1536
0986c     32 BB 02 FB | 	rdlong	local11, objptr
09870     5D B9 02 F6 | 	mov	local10, local11
09874     01 B8 66 F0 | 	shl	local10, #1
09878     5D B9 02 F1 | 	add	local10, local11
0987c     02 B8 66 F0 | 	shl	local10, #2
09880     03 00 00 FF 
09884     00 64 86 F1 | 	sub	objptr, ##1536
09888     32 B9 02 F1 | 	add	local10, objptr
0988c     04 B8 06 F1 | 	add	local10, #4
09890     5C B1 62 FC | 	wrlong	local06, local10
09894     03 00 00 FF 
09898     00 64 06 F1 | 	add	objptr, ##1536
0989c     32 AF 02 FB | 	rdlong	local05, objptr
098a0     57 BB 02 F6 | 	mov	local11, local05
098a4     01 BA 66 F0 | 	shl	local11, #1
098a8     57 BB 02 F1 | 	add	local11, local05
098ac     02 BA 66 F0 | 	shl	local11, #2
098b0     03 00 00 FF 
098b4     00 64 86 F1 | 	sub	objptr, ##1536
098b8     32 BB 02 F1 | 	add	local11, objptr
098bc     08 BA 06 F1 | 	add	local11, #8
098c0     5D B3 62 FC | 	wrlong	local07, local11
098c4     03 00 00 FF 
098c8     00 64 06 F1 | 	add	objptr, ##1536
098cc     32 AF 02 FB | 	rdlong	local05, objptr
098d0     01 AE 06 F1 | 	add	local05, #1
098d4     32 AF 62 FC | 	wrlong	local05, objptr
098d8     44 AA 06 F6 | 	mov	local03, #68
098dc     53 AF 02 F6 | 	mov	local05, local01
098e0     54 B1 02 F6 | 	mov	local06, local02
098e4     55 B3 02 F6 | 	mov	local07, local03
098e8     32 B5 02 FB | 	rdlong	local08, objptr
098ec     5A B7 02 F6 | 	mov	local09, local08
098f0     01 B6 66 F0 | 	shl	local09, #1
098f4     5A B7 02 F1 | 	add	local09, local08
098f8     02 B6 66 F0 | 	shl	local09, #2
098fc     03 00 00 FF 
09900     00 64 86 F1 | 	sub	objptr, ##1536
09904     32 B7 02 F1 | 	add	local09, objptr
09908     5B AF 62 FC | 	wrlong	local05, local09
0990c     03 00 00 FF 
09910     00 64 06 F1 | 	add	objptr, ##1536
09914     32 BB 02 FB | 	rdlong	local11, objptr
09918     5D B9 02 F6 | 	mov	local10, local11
0991c     01 B8 66 F0 | 	shl	local10, #1
09920     5D B9 02 F1 | 	add	local10, local11
09924     02 B8 66 F0 | 	shl	local10, #2
09928     03 00 00 FF 
0992c     00 64 86 F1 | 	sub	objptr, ##1536
09930     32 B9 02 F1 | 	add	local10, objptr
09934     04 B8 06 F1 | 	add	local10, #4
09938     5C B1 62 FC | 	wrlong	local06, local10
0993c     03 00 00 FF 
09940     00 64 06 F1 | 	add	objptr, ##1536
09944     32 B9 02 FB | 	rdlong	local10, objptr
09948     5C BB 02 F6 | 	mov	local11, local10
0994c     01 BA 66 F0 | 	shl	local11, #1
09950     5C BB 02 F1 | 	add	local11, local10
09954     02 BA 66 F0 | 	shl	local11, #2
09958     03 00 00 FF 
0995c     00 64 86 F1 | 	sub	objptr, ##1536
09960     32 BB 02 F1 | 	add	local11, objptr
09964     08 BA 06 F1 | 	add	local11, #8
09968     5D B3 62 FC | 	wrlong	local07, local11
0996c     03 00 00 FF 
09970     00 64 06 F1 | 	add	objptr, ##1536
09974     32 AF 02 FB | 	rdlong	local05, objptr
09978     01 AE 06 F1 | 	add	local05, #1
0997c     32 AF 62 FC | 	wrlong	local05, objptr
09980     4C 00 00 FF 
09984     20 64 86 F1 | 	sub	objptr, ##38944
09988                 | LR__0872
09988                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09988     38 00 00 FF 
0998c     E8 65 06 F1 | 	add	objptr, ##29160
09990     32 AD 02 FB | 	rdlong	local04, objptr
09994     03 AC 66 F0 | 	shl	local04, #3
09998     02 00 00 FF 
0999c     38 64 86 F1 | 	sub	objptr, ##1080
099a0     32 AD 02 F1 | 	add	local04, objptr
099a4     04 AC 06 F1 | 	add	local04, #4
099a8     56 B5 02 FB | 	rdlong	local08, local04
099ac     12 B4 0E F2 | 	cmp	local08, #18 wz
099b0     36 00 00 FF 
099b4     B0 65 86 F1 | 	sub	objptr, ##28080
099b8     60 01 90 5D |  if_ne	jmp	#LR__0873
099bc     22 AA 06 F6 | 	mov	local03, #34
099c0     53 AF 02 F6 | 	mov	local05, local01
099c4     54 B1 02 F6 | 	mov	local06, local02
099c8     55 B3 02 F6 | 	mov	local07, local03
099cc     4C 00 00 FF 
099d0     20 64 06 F1 | 	add	objptr, ##38944
099d4     32 B5 02 FB | 	rdlong	local08, objptr
099d8     5A B7 02 F6 | 	mov	local09, local08
099dc     01 B6 66 F0 | 	shl	local09, #1
099e0     5A B7 02 F1 | 	add	local09, local08
099e4     02 B6 66 F0 | 	shl	local09, #2
099e8     03 00 00 FF 
099ec     00 64 86 F1 | 	sub	objptr, ##1536
099f0     32 B7 02 F1 | 	add	local09, objptr
099f4     5B AF 62 FC | 	wrlong	local05, local09
099f8     03 00 00 FF 
099fc     00 64 06 F1 | 	add	objptr, ##1536
09a00     32 BB 02 FB | 	rdlong	local11, objptr
09a04     5D B9 02 F6 | 	mov	local10, local11
09a08     01 B8 66 F0 | 	shl	local10, #1
09a0c     5D B9 02 F1 | 	add	local10, local11
09a10     02 B8 66 F0 | 	shl	local10, #2
09a14     03 00 00 FF 
09a18     00 64 86 F1 | 	sub	objptr, ##1536
09a1c     32 B9 02 F1 | 	add	local10, objptr
09a20     04 B8 06 F1 | 	add	local10, #4
09a24     5C B1 62 FC | 	wrlong	local06, local10
09a28     03 00 00 FF 
09a2c     00 64 06 F1 | 	add	objptr, ##1536
09a30     32 AF 02 FB | 	rdlong	local05, objptr
09a34     57 BB 02 F6 | 	mov	local11, local05
09a38     01 BA 66 F0 | 	shl	local11, #1
09a3c     57 BB 02 F1 | 	add	local11, local05
09a40     02 BA 66 F0 | 	shl	local11, #2
09a44     03 00 00 FF 
09a48     00 64 86 F1 | 	sub	objptr, ##1536
09a4c     32 BB 02 F1 | 	add	local11, objptr
09a50     08 BA 06 F1 | 	add	local11, #8
09a54     5D B3 62 FC | 	wrlong	local07, local11
09a58     03 00 00 FF 
09a5c     00 64 06 F1 | 	add	objptr, ##1536
09a60     32 AF 02 FB | 	rdlong	local05, objptr
09a64     01 AE 06 F1 | 	add	local05, #1
09a68     32 AF 62 FC | 	wrlong	local05, objptr
09a6c     44 AA 06 F6 | 	mov	local03, #68
09a70     53 AF 02 F6 | 	mov	local05, local01
09a74     54 B1 02 F6 | 	mov	local06, local02
09a78     55 B3 02 F6 | 	mov	local07, local03
09a7c     32 B5 02 FB | 	rdlong	local08, objptr
09a80     5A B7 02 F6 | 	mov	local09, local08
09a84     01 B6 66 F0 | 	shl	local09, #1
09a88     5A B7 02 F1 | 	add	local09, local08
09a8c     02 B6 66 F0 | 	shl	local09, #2
09a90     03 00 00 FF 
09a94     00 64 86 F1 | 	sub	objptr, ##1536
09a98     32 B7 02 F1 | 	add	local09, objptr
09a9c     5B AF 62 FC | 	wrlong	local05, local09
09aa0     03 00 00 FF 
09aa4     00 64 06 F1 | 	add	objptr, ##1536
09aa8     32 BB 02 FB | 	rdlong	local11, objptr
09aac     5D B9 02 F6 | 	mov	local10, local11
09ab0     01 B8 66 F0 | 	shl	local10, #1
09ab4     5D B9 02 F1 | 	add	local10, local11
09ab8     02 B8 66 F0 | 	shl	local10, #2
09abc     03 00 00 FF 
09ac0     00 64 86 F1 | 	sub	objptr, ##1536
09ac4     32 B9 02 F1 | 	add	local10, objptr
09ac8     04 B8 06 F1 | 	add	local10, #4
09acc     5C B1 62 FC | 	wrlong	local06, local10
09ad0     03 00 00 FF 
09ad4     00 64 06 F1 | 	add	objptr, ##1536
09ad8     32 B9 02 FB | 	rdlong	local10, objptr
09adc     5C BB 02 F6 | 	mov	local11, local10
09ae0     01 BA 66 F0 | 	shl	local11, #1
09ae4     5C BB 02 F1 | 	add	local11, local10
09ae8     02 BA 66 F0 | 	shl	local11, #2
09aec     03 00 00 FF 
09af0     00 64 86 F1 | 	sub	objptr, ##1536
09af4     32 BB 02 F1 | 	add	local11, objptr
09af8     08 BA 06 F1 | 	add	local11, #8
09afc     5D B3 62 FC | 	wrlong	local07, local11
09b00     03 00 00 FF 
09b04     00 64 06 F1 | 	add	objptr, ##1536
09b08     32 AF 02 FB | 	rdlong	local05, objptr
09b0c     01 AE 06 F1 | 	add	local05, #1
09b10     32 AF 62 FC | 	wrlong	local05, objptr
09b14     4C 00 00 FF 
09b18     20 64 86 F1 | 	sub	objptr, ##38944
09b1c                 | LR__0873
09b1c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b1c     38 00 00 FF 
09b20     E8 65 06 F1 | 	add	objptr, ##29160
09b24     32 AD 02 FB | 	rdlong	local04, objptr
09b28     03 AC 66 F0 | 	shl	local04, #3
09b2c     02 00 00 FF 
09b30     38 64 86 F1 | 	sub	objptr, ##1080
09b34     32 AD 02 F1 | 	add	local04, objptr
09b38     04 AC 06 F1 | 	add	local04, #4
09b3c     56 B5 02 FB | 	rdlong	local08, local04
09b40     FE B5 0E F2 | 	cmp	local08, #510 wz
09b44     36 00 00 FF 
09b48     B0 65 86 F1 | 	sub	objptr, ##28080
09b4c     B8 00 90 5D |  if_ne	jmp	#LR__0874
09b50     44 AA 06 F6 | 	mov	local03, #68
09b54     53 AF 02 F6 | 	mov	local05, local01
09b58     54 B1 02 F6 | 	mov	local06, local02
09b5c     55 B3 02 F6 | 	mov	local07, local03
09b60     4C 00 00 FF 
09b64     20 64 06 F1 | 	add	objptr, ##38944
09b68     32 B5 02 FB | 	rdlong	local08, objptr
09b6c     5A B7 02 F6 | 	mov	local09, local08
09b70     01 B6 66 F0 | 	shl	local09, #1
09b74     5A B7 02 F1 | 	add	local09, local08
09b78     02 B6 66 F0 | 	shl	local09, #2
09b7c     03 00 00 FF 
09b80     00 64 86 F1 | 	sub	objptr, ##1536
09b84     32 B7 02 F1 | 	add	local09, objptr
09b88     5B AF 62 FC | 	wrlong	local05, local09
09b8c     03 00 00 FF 
09b90     00 64 06 F1 | 	add	objptr, ##1536
09b94     32 BB 02 FB | 	rdlong	local11, objptr
09b98     5D B9 02 F6 | 	mov	local10, local11
09b9c     01 B8 66 F0 | 	shl	local10, #1
09ba0     5D B9 02 F1 | 	add	local10, local11
09ba4     02 B8 66 F0 | 	shl	local10, #2
09ba8     03 00 00 FF 
09bac     00 64 86 F1 | 	sub	objptr, ##1536
09bb0     32 B9 02 F1 | 	add	local10, objptr
09bb4     04 B8 06 F1 | 	add	local10, #4
09bb8     5C B1 62 FC | 	wrlong	local06, local10
09bbc     03 00 00 FF 
09bc0     00 64 06 F1 | 	add	objptr, ##1536
09bc4     32 B9 02 FB | 	rdlong	local10, objptr
09bc8     5C BB 02 F6 | 	mov	local11, local10
09bcc     01 BA 66 F0 | 	shl	local11, #1
09bd0     5C BB 02 F1 | 	add	local11, local10
09bd4     02 BA 66 F0 | 	shl	local11, #2
09bd8     03 00 00 FF 
09bdc     00 64 86 F1 | 	sub	objptr, ##1536
09be0     32 BB 02 F1 | 	add	local11, objptr
09be4     08 BA 06 F1 | 	add	local11, #8
09be8     5D B3 62 FC | 	wrlong	local07, local11
09bec     03 00 00 FF 
09bf0     00 64 06 F1 | 	add	objptr, ##1536
09bf4     32 AF 02 FB | 	rdlong	local05, objptr
09bf8     01 AE 06 F1 | 	add	local05, #1
09bfc     32 AF 62 FC | 	wrlong	local05, objptr
09c00     4C 00 00 FF 
09c04     20 64 86 F1 | 	sub	objptr, ##38944
09c08                 | LR__0874
09c08                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c08     38 00 00 FF 
09c0c     E8 65 06 F1 | 	add	objptr, ##29160
09c10     32 AD 02 FB | 	rdlong	local04, objptr
09c14     03 AC 66 F0 | 	shl	local04, #3
09c18     02 00 00 FF 
09c1c     38 64 86 F1 | 	sub	objptr, ##1080
09c20     32 AD 02 F1 | 	add	local04, objptr
09c24     04 AC 06 F1 | 	add	local04, #4
09c28     56 B5 02 FB | 	rdlong	local08, local04
09c2c     11 B4 0E F2 | 	cmp	local08, #17 wz
09c30     36 00 00 FF 
09c34     B0 65 86 F1 | 	sub	objptr, ##28080
09c38     6C 00 90 AD |  if_e	jmp	#LR__0875
09c3c     38 00 00 FF 
09c40     E8 65 06 F1 | 	add	objptr, ##29160
09c44     32 B5 02 FB | 	rdlong	local08, objptr
09c48     03 B4 66 F0 | 	shl	local08, #3
09c4c     02 00 00 FF 
09c50     38 64 86 F1 | 	sub	objptr, ##1080
09c54     32 B5 02 F1 | 	add	local08, objptr
09c58     04 B4 06 F1 | 	add	local08, #4
09c5c     5A B5 02 FB | 	rdlong	local08, local08
09c60     12 B4 0E F2 | 	cmp	local08, #18 wz
09c64     36 00 00 FF 
09c68     B0 65 86 F1 | 	sub	objptr, ##28080
09c6c     38 00 90 AD |  if_e	jmp	#LR__0875
09c70     38 00 00 FF 
09c74     E8 65 06 F1 | 	add	objptr, ##29160
09c78     32 BB 02 FB | 	rdlong	local11, objptr
09c7c     03 BA 66 F0 | 	shl	local11, #3
09c80     02 00 00 FF 
09c84     38 64 86 F1 | 	sub	objptr, ##1080
09c88     32 BB 02 F1 | 	add	local11, objptr
09c8c     04 BA 06 F1 | 	add	local11, #4
09c90     5D BB 02 FB | 	rdlong	local11, local11
09c94     FE BB 0E F2 | 	cmp	local11, #510 wz
09c98     36 00 00 FF 
09c9c     B0 65 86 F1 | 	sub	objptr, ##28080
09ca0     16 7A 06 56 |  if_ne	mov	result1, #22
09ca4     68 00 90 5D |  if_ne	jmp	#LR__0877
09ca8                 | LR__0875
09ca8     38 00 00 FF 
09cac     E8 65 06 F1 | 	add	objptr, ##29160
09cb0     32 AD 02 FB | 	rdlong	local04, objptr
09cb4     01 AC 06 F1 | 	add	local04, #1
09cb8     32 AD 62 FC | 	wrlong	local04, objptr
09cbc     03 AC 66 F0 | 	shl	local04, #3
09cc0     02 00 00 FF 
09cc4     38 64 86 F1 | 	sub	objptr, ##1080
09cc8     32 AD 02 F1 | 	add	local04, objptr
09ccc     04 AC 06 F1 | 	add	local04, #4
09cd0     56 B5 02 FB | 	rdlong	local08, local04
09cd4     FE B5 0E F2 | 	cmp	local08, #510 wz
09cd8     36 00 00 FF 
09cdc     B0 65 86 F1 | 	sub	objptr, ##28080
09ce0     28 00 90 AD |  if_e	jmp	#LR__0876
09ce4     38 00 00 FF 
09ce8     E8 65 06 F1 | 	add	objptr, ##29160
09cec     32 BB 02 FB | 	rdlong	local11, objptr
09cf0     0E 00 00 FF 
09cf4     1C 64 06 F1 | 	add	objptr, ##7196
09cf8     32 B9 02 FB | 	rdlong	local10, objptr
09cfc     47 00 00 FF 
09d00     04 64 86 F1 | 	sub	objptr, ##36356
09d04     5C BB 52 F2 | 	cmps	local11, local10 wc
09d08     E4 FA 9F CD |  if_b	jmp	#LR__0871
09d0c                 | LR__0876
09d0c                 | ' return 0
09d0c     00 7A 06 F6 | 	mov	result1, #0
09d10                 | LR__0877
09d10     E7 F0 03 F6 | 	mov	ptra, fp
09d14     F2 00 A0 FD | 	call	#popregs_
09d18                 | _compile_print_ret
09d18     2D 00 64 FD | 	ret
09d1c                 | 
09d1c                 | ' 
09d1c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d1c                 | ' 
09d1c                 | ' function compile_if(aline as ulong) as ulong  
09d1c                 | _compile_if
09d1c     09 CA 05 F6 | 	mov	COUNT_, #9
09d20     E8 00 A0 FD | 	call	#pushregs_
09d24                 | _compile_if_enter
09d24     49 AD 02 F6 | 	mov	local04, arg01
09d28                 | ' return expr()
09d28     2C 21 B0 FD | 	call	#_expr
09d2c     38 00 00 FF 
09d30     E8 65 06 F1 | 	add	objptr, ##29160
09d34     32 95 02 FB | 	rdlong	arg02, objptr
09d38     4A AF 02 F6 | 	mov	local05, arg02
09d3c     03 AE 66 F0 | 	shl	local05, #3
09d40     02 00 00 FF 
09d44     38 64 86 F1 | 	sub	objptr, ##1080
09d48     32 AF 02 F1 | 	add	local05, objptr
09d4c     04 AE 06 F1 | 	add	local05, #4
09d50     57 AF 02 FB | 	rdlong	local05, local05
09d54     01 94 06 F1 | 	add	arg02, #1
09d58     02 00 00 FF 
09d5c     38 64 06 F1 | 	add	objptr, ##1080
09d60     32 95 62 FC | 	wrlong	arg02, objptr
09d64     38 00 00 FF 
09d68     E8 65 86 F1 | 	sub	objptr, ##29160
09d6c                 | ' 
09d6c                 | ' err=compile_fun_1p()
09d6c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d6c     5B AE 0E F2 | 	cmp	local05, #91 wz
09d70     34 7A 06 56 |  if_ne	mov	result1, #52
09d74     20 01 90 5D |  if_ne	jmp	#LR__0882
09d78     58 AA 06 F6 | 	mov	local03, #88
09d7c     53 B1 02 F6 | 	mov	local06, local01
09d80     54 B3 02 F6 | 	mov	local07, local02
09d84     55 95 02 F6 | 	mov	arg02, local03
09d88     4C 00 00 FF 
09d8c     20 64 06 F1 | 	add	objptr, ##38944
09d90     32 93 02 FB | 	rdlong	arg01, objptr
09d94     49 B5 02 F6 | 	mov	local08, arg01
09d98     01 B4 66 F0 | 	shl	local08, #1
09d9c     49 B5 02 F1 | 	add	local08, arg01
09da0     02 B4 66 F0 | 	shl	local08, #2
09da4     03 00 00 FF 
09da8     00 64 86 F1 | 	sub	objptr, ##1536
09dac     32 B5 02 F1 | 	add	local08, objptr
09db0     5A B1 62 FC | 	wrlong	local06, local08
09db4     03 00 00 FF 
09db8     00 64 06 F1 | 	add	objptr, ##1536
09dbc     32 B1 02 FB | 	rdlong	local06, objptr
09dc0     58 93 02 F6 | 	mov	arg01, local06
09dc4     01 92 66 F0 | 	shl	arg01, #1
09dc8     58 93 02 F1 | 	add	arg01, local06
09dcc     02 92 66 F0 | 	shl	arg01, #2
09dd0     03 00 00 FF 
09dd4     00 64 86 F1 | 	sub	objptr, ##1536
09dd8     32 93 02 F1 | 	add	arg01, objptr
09ddc     04 92 06 F1 | 	add	arg01, #4
09de0     49 B3 62 FC | 	wrlong	local07, arg01
09de4     03 00 00 FF 
09de8     00 64 06 F1 | 	add	objptr, ##1536
09dec     32 B1 02 FB | 	rdlong	local06, objptr
09df0     58 93 02 F6 | 	mov	arg01, local06
09df4     01 92 66 F0 | 	shl	arg01, #1
09df8     58 93 02 F1 | 	add	arg01, local06
09dfc     02 92 66 F0 | 	shl	arg01, #2
09e00     03 00 00 FF 
09e04     00 64 86 F1 | 	sub	objptr, ##1536
09e08     32 93 02 F1 | 	add	arg01, objptr
09e0c     08 92 06 F1 | 	add	arg01, #8
09e10     49 95 62 FC | 	wrlong	arg02, arg01
09e14     03 00 00 FF 
09e18     00 64 06 F1 | 	add	objptr, ##1536
09e1c     32 B1 02 FB | 	rdlong	local06, objptr
09e20     01 B0 06 F1 | 	add	local06, #1
09e24     32 B1 62 FC | 	wrlong	local06, objptr
09e28                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e28     13 00 00 FF 
09e2c     38 64 86 F1 | 	sub	objptr, ##9784
09e30     32 95 02 FB | 	rdlong	arg02, objptr
09e34     01 94 06 F1 | 	add	arg02, #1
09e38     03 94 66 F0 | 	shl	arg02, #3
09e3c     02 00 00 FF 
09e40     38 64 86 F1 | 	sub	objptr, ##1080
09e44     32 95 02 F1 | 	add	arg02, objptr
09e48     4A 93 02 FB | 	rdlong	arg01, arg02
09e4c     36 00 00 FF 
09e50     B0 65 86 F1 | 	sub	objptr, ##28080
09e54                 | ' 
09e54                 | ' select case s
09e54     93 01 00 FF 
09e58     12 95 06 F6 | 	mov	arg02, ##@LR__5639
09e5c     C4 AB B1 FD | 	call	#__system___string_cmp
09e60     00 7A 0E F2 | 	cmp	result1, #0 wz
09e64     1B 7A 06 A6 |  if_e	mov	result1, #27
09e68     00 7A 06 56 |  if_ne	mov	result1, #0
09e6c     00 7A 0E F2 | 	cmp	result1, #0 wz
09e70     10 00 90 AD |  if_e	jmp	#LR__0880
09e74     05 92 06 F6 | 	mov	arg01, #5
09e78     4C E4 BF FD | 	call	#_compile_immediate_assign
09e7c     3D B7 02 F6 | 	mov	local09, result1
09e80     10 00 90 FD | 	jmp	#LR__0881
09e84                 | LR__0880
09e84     05 92 06 F6 | 	mov	arg01, #5
09e88     56 95 02 F6 | 	mov	arg02, local04
09e8c     50 DA BF FD | 	call	#_compile_immediate
09e90     3D B7 02 F6 | 	mov	local09, result1
09e94                 | LR__0881
09e94                 | ' return err
09e94     5B 7B 02 F6 | 	mov	result1, local09
09e98                 | LR__0882
09e98     E7 F0 03 F6 | 	mov	ptra, fp
09e9c     F2 00 A0 FD | 	call	#popregs_
09ea0                 | _compile_if_ret
09ea0     2D 00 64 FD | 	ret
09ea4                 | 
09ea4                 | ' 
09ea4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ea4                 | ' 
09ea4                 | ' function compile_else(aline as ulong) as ulong  
09ea4                 | _compile_else
09ea4     07 CA 05 F6 | 	mov	COUNT_, #7
09ea8     E8 00 A0 FD | 	call	#pushregs_
09eac                 | _compile_else_enter
09eac     49 AD 02 F6 | 	mov	local04, arg01
09eb0     5A AA 06 F6 | 	mov	local03, #90
09eb4     53 AF 02 F6 | 	mov	local05, local01
09eb8     54 B1 02 F6 | 	mov	local06, local02
09ebc     55 A7 02 F6 | 	mov	local01, local03
09ec0     4C 00 00 FF 
09ec4     20 64 06 F1 | 	add	objptr, ##38944
09ec8     32 95 02 FB | 	rdlong	arg02, objptr
09ecc     4A 93 02 F6 | 	mov	arg01, arg02
09ed0     01 92 66 F0 | 	shl	arg01, #1
09ed4     4A 93 02 F1 | 	add	arg01, arg02
09ed8     02 92 66 F0 | 	shl	arg01, #2
09edc     03 00 00 FF 
09ee0     00 64 86 F1 | 	sub	objptr, ##1536
09ee4     32 93 02 F1 | 	add	arg01, objptr
09ee8     49 AF 62 FC | 	wrlong	local05, arg01
09eec     03 00 00 FF 
09ef0     00 64 06 F1 | 	add	objptr, ##1536
09ef4     32 AF 02 FB | 	rdlong	local05, objptr
09ef8     57 95 02 F6 | 	mov	arg02, local05
09efc     01 94 66 F0 | 	shl	arg02, #1
09f00     57 95 02 F1 | 	add	arg02, local05
09f04     02 94 66 F0 | 	shl	arg02, #2
09f08     03 00 00 FF 
09f0c     00 64 86 F1 | 	sub	objptr, ##1536
09f10     32 95 02 F1 | 	add	arg02, objptr
09f14     04 94 06 F1 | 	add	arg02, #4
09f18     4A B1 62 FC | 	wrlong	local06, arg02
09f1c     03 00 00 FF 
09f20     00 64 06 F1 | 	add	objptr, ##1536
09f24     32 B1 02 FB | 	rdlong	local06, objptr
09f28     58 AF 02 F6 | 	mov	local05, local06
09f2c     01 AE 66 F0 | 	shl	local05, #1
09f30     58 AF 02 F1 | 	add	local05, local06
09f34     02 AE 66 F0 | 	shl	local05, #2
09f38     03 00 00 FF 
09f3c     00 64 86 F1 | 	sub	objptr, ##1536
09f40     32 AF 02 F1 | 	add	local05, objptr
09f44     08 AE 06 F1 | 	add	local05, #8
09f48     57 A7 62 FC | 	wrlong	local01, local05
09f4c     03 00 00 FF 
09f50     00 64 06 F1 | 	add	objptr, ##1536
09f54     32 AF 02 FB | 	rdlong	local05, objptr
09f58     01 AE 06 F1 | 	add	local05, #1
09f5c     32 AF 62 FC | 	wrlong	local05, objptr
09f60                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f60                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f60     13 00 00 FF 
09f64     38 64 86 F1 | 	sub	objptr, ##9784
09f68     32 B1 02 FB | 	rdlong	local06, objptr
09f6c     01 B0 06 F1 | 	add	local06, #1
09f70     03 B0 66 F0 | 	shl	local06, #3
09f74     02 00 00 FF 
09f78     38 64 86 F1 | 	sub	objptr, ##1080
09f7c     32 B1 02 F1 | 	add	local06, objptr
09f80     58 93 02 FB | 	rdlong	arg01, local06
09f84     36 00 00 FF 
09f88     B0 65 86 F1 | 	sub	objptr, ##28080
09f8c                 | ' 
09f8c                 | ' select case s
09f8c     93 01 00 FF 
09f90     12 95 06 F6 | 	mov	arg02, ##@LR__5639
09f94     8C AA B1 FD | 	call	#__system___string_cmp
09f98     00 7A 0E F2 | 	cmp	result1, #0 wz
09f9c     1B 7A 06 A6 |  if_e	mov	result1, #27
09fa0     00 7A 06 56 |  if_ne	mov	result1, #0
09fa4     00 7A 0E F2 | 	cmp	result1, #0 wz
09fa8     10 00 90 AD |  if_e	jmp	#LR__0890
09fac     05 92 06 F6 | 	mov	arg01, #5
09fb0     14 E3 BF FD | 	call	#_compile_immediate_assign
09fb4     3D B3 02 F6 | 	mov	local07, result1
09fb8     10 00 90 FD | 	jmp	#LR__0891
09fbc                 | LR__0890
09fbc     05 92 06 F6 | 	mov	arg01, #5
09fc0     56 95 02 F6 | 	mov	arg02, local04
09fc4     18 D9 BF FD | 	call	#_compile_immediate
09fc8     3D B3 02 F6 | 	mov	local07, result1
09fcc                 | LR__0891
09fcc                 | ' return err
09fcc     59 7B 02 F6 | 	mov	result1, local07
09fd0     E7 F0 03 F6 | 	mov	ptra, fp
09fd4     F2 00 A0 FD | 	call	#popregs_
09fd8                 | _compile_else_ret
09fd8     2D 00 64 FD | 	ret
09fdc                 | 
09fdc                 | ' 
09fdc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09fdc                 | ' 
09fdc                 | ' function compile_dim() as ulong  
09fdc                 | _compile_dim
09fdc     11 CA 05 F6 | 	mov	COUNT_, #17
09fe0     E8 00 A0 FD | 	call	#pushregs_
09fe4     01 A6 06 F6 | 	mov	local01, #1
09fe8     01 A8 06 F6 | 	mov	local02, #1
09fec     01 AA 06 F6 | 	mov	local03, #1
09ff0                 | ' 
09ff0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ff0                 | ' if isname(lparts(ct).part$) then 
09ff0     38 00 00 FF 
09ff4     E8 65 06 F1 | 	add	objptr, ##29160
09ff8     32 99 02 FB | 	rdlong	arg04, objptr
09ffc     03 98 66 F0 | 	shl	arg04, #3
0a000     02 00 00 FF 
0a004     38 64 86 F1 | 	sub	objptr, ##1080
0a008     32 99 02 F1 | 	add	arg04, objptr
0a00c     4C 93 02 FB | 	rdlong	arg01, arg04
0a010     36 00 00 FF 
0a014     B0 65 86 F1 | 	sub	objptr, ##28080
0a018     C4 C7 BF FD | 	call	#_isname
0a01c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a020     58 05 90 AD |  if_e	jmp	#LR__0923
0a024     38 00 00 FF 
0a028     E8 65 06 F1 | 	add	objptr, ##29160
0a02c     32 AD 02 FB | 	rdlong	local04, objptr
0a030     03 AC 66 F0 | 	shl	local04, #3
0a034     02 00 00 FF 
0a038     38 64 86 F1 | 	sub	objptr, ##1080
0a03c     32 AD 02 F1 | 	add	local04, objptr
0a040     56 AF 02 FB | 	rdlong	local05, local04
0a044     01 B0 66 F6 | 	neg	local06, #1
0a048                 | '   varname2$=lparts(ct).part$ 
0a048                 | '   j=-1
0a048                 | '   if varnum>0 then
0a048     04 64 86 F1 | 	sub	objptr, #4
0a04c     32 B3 02 FB | 	rdlong	local07, objptr
0a050     36 00 00 FF 
0a054     AC 65 86 F1 | 	sub	objptr, ##28076
0a058     01 B2 56 F2 | 	cmps	local07, #1 wc
0a05c     54 00 90 CD |  if_b	jmp	#LR__0902
0a060                 | '     for i=0 to varnum-1
0a060     00 B4 06 F6 | 	mov	local08, #0
0a064     36 00 00 FF 
0a068     AC 65 06 F1 | 	add	objptr, ##28076
0a06c     32 B7 02 FB | 	rdlong	local09, objptr
0a070     36 00 00 FF 
0a074     AC 65 86 F1 | 	sub	objptr, ##28076
0a078                 | LR__0900
0a078     5B B5 52 F2 | 	cmps	local08, local09 wc
0a07c     34 00 90 3D |  if_ae	jmp	#LR__0901
0a080                 | '       if variables(i).name=varname2$ then j=i : exit
0a080     5A AD 02 F6 | 	mov	local04, local08
0a084     04 AC 66 F0 | 	shl	local04, #4
0a088     32 95 02 F6 | 	mov	arg02, objptr
0a08c     16 00 00 FF 
0a090     9C 95 06 F1 | 	add	arg02, ##11676
0a094     4A AD 02 F1 | 	add	local04, arg02
0a098     56 93 02 FB | 	rdlong	arg01, local04
0a09c     57 95 02 F6 | 	mov	arg02, local05
0a0a0     80 A9 B1 FD | 	call	#__system___string_cmp
0a0a4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a0a8     5A B1 02 A6 |  if_e	mov	local06, local08
0a0ac     01 B4 06 51 |  if_ne	add	local08, #1
0a0b0     C4 FF 9F 5D |  if_ne	jmp	#LR__0900
0a0b4                 | LR__0901
0a0b4                 | LR__0902
0a0b4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a0b4     FF FF 7F FF 
0a0b8     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0a0bc     36 00 00 AF 
0a0c0     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a0c4     32 B1 02 AB |  if_e	rdlong	local06, objptr
0a0c8     36 00 00 AF 
0a0cc     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a0d0     78 00 90 AD |  if_e	jmp	#LR__0903
0a0d4     00 92 06 F6 | 	mov	arg01, #0
0a0d8     A4 FE B1 FD | 	call	#__system___getiolock_0622
0a0dc     3D 93 02 F6 | 	mov	arg01, result1
0a0e0     18 A9 B1 FD | 	call	#__system___lockmem
0a0e4     96 01 00 FF 
0a0e8     1F 94 06 F6 | 	mov	arg02, ##@LR__5911
0a0ec     00 92 06 F6 | 	mov	arg01, #0
0a0f0     00 96 06 F6 | 	mov	arg03, #0
0a0f4     F8 B5 B1 FD | 	call	#__system___basic_print_string
0a0f8     54 00 00 FF 
0a0fc     8C 64 06 F1 | 	add	objptr, ##43148
0a100     32 95 02 FB | 	rdlong	arg02, objptr
0a104     54 00 00 FF 
0a108     8C 64 86 F1 | 	sub	objptr, ##43148
0a10c     00 92 06 F6 | 	mov	arg01, #0
0a110     00 96 06 F6 | 	mov	arg03, #0
0a114     0A 98 06 F6 | 	mov	arg04, #10
0a118     58 B6 B1 FD | 	call	#__system___basic_print_unsigned
0a11c     96 01 00 FF 
0a120     2D 94 06 F6 | 	mov	arg02, ##@LR__5912
0a124     00 92 06 F6 | 	mov	arg01, #0
0a128     00 96 06 F6 | 	mov	arg03, #0
0a12c     C0 B5 B1 FD | 	call	#__system___basic_print_string
0a130     00 92 06 F6 | 	mov	arg01, #0
0a134     0A 94 06 F6 | 	mov	arg02, #10
0a138     00 96 06 F6 | 	mov	arg03, #0
0a13c     58 B5 B1 FD | 	call	#__system___basic_print_char
0a140     00 92 06 F6 | 	mov	arg01, #0
0a144     38 FE B1 FD | 	call	#__system___getiolock_0622
0a148     3D 01 68 FC | 	wrlong	#0, result1
0a14c                 | LR__0903
0a14c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a14c     38 00 00 FF 
0a150     E8 65 06 F1 | 	add	objptr, ##29160
0a154     32 95 02 FB | 	rdlong	arg02, objptr
0a158     01 94 06 F1 | 	add	arg02, #1
0a15c     03 94 66 F0 | 	shl	arg02, #3
0a160     02 00 00 FF 
0a164     38 64 86 F1 | 	sub	objptr, ##1080
0a168     32 95 02 F1 | 	add	arg02, objptr
0a16c     4A 93 02 FB | 	rdlong	arg01, arg02
0a170     96 01 00 FF 
0a174     4E 94 06 F6 | 	mov	arg02, ##@LR__5913
0a178     36 00 00 FF 
0a17c     B0 65 86 F1 | 	sub	objptr, ##28080
0a180     A0 A8 B1 FD | 	call	#__system___string_cmp
0a184     00 7A 0E F2 | 	cmp	result1, #0 wz
0a188     44 00 90 AD |  if_e	jmp	#LR__0904
0a18c     38 00 00 FF 
0a190     E8 65 06 F1 | 	add	objptr, ##29160
0a194     32 B7 02 FB | 	rdlong	local09, objptr
0a198     01 B6 06 F1 | 	add	local09, #1
0a19c     03 B6 66 F0 | 	shl	local09, #3
0a1a0     02 00 00 FF 
0a1a4     38 64 86 F1 | 	sub	objptr, ##1080
0a1a8     32 B7 02 F1 | 	add	local09, objptr
0a1ac     5B 93 02 FB | 	rdlong	arg01, local09
0a1b0     96 01 00 FF 
0a1b4     50 94 06 F6 | 	mov	arg02, ##@LR__5914
0a1b8     36 00 00 FF 
0a1bc     B0 65 86 F1 | 	sub	objptr, ##28080
0a1c0     60 A8 B1 FD | 	call	#__system___string_cmp
0a1c4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1c8     2B 7A 06 56 |  if_ne	mov	result1, #43
0a1cc     B4 04 90 5D |  if_ne	jmp	#LR__0925
0a1d0                 | LR__0904
0a1d0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a1d0     38 00 00 FF 
0a1d4     E8 65 06 F1 | 	add	objptr, ##29160
0a1d8     32 95 02 FB | 	rdlong	arg02, objptr
0a1dc     01 94 06 F1 | 	add	arg02, #1
0a1e0     03 94 66 F0 | 	shl	arg02, #3
0a1e4     02 00 00 FF 
0a1e8     38 64 86 F1 | 	sub	objptr, ##1080
0a1ec     32 95 02 F1 | 	add	arg02, objptr
0a1f0     4A 93 02 FB | 	rdlong	arg01, arg02
0a1f4     96 01 00 FF 
0a1f8     53 94 06 F6 | 	mov	arg02, ##@LR__5915
0a1fc     36 00 00 FF 
0a200     B0 65 86 F1 | 	sub	objptr, ##28080
0a204     1C A8 B1 FD | 	call	#__system___string_cmp
0a208     00 7A 0E F2 | 	cmp	result1, #0 wz
0a20c     38 00 00 AF 
0a210     E8 65 06 A1 |  if_e	add	objptr, ##29160
0a214     32 B9 02 AB |  if_e	rdlong	local10, objptr
0a218     38 00 00 AF 
0a21c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
0a220     01 B8 06 A1 |  if_e	add	local10, #1
0a224     48 01 90 AD |  if_e	jmp	#LR__0909
0a228     38 00 00 FF 
0a22c     E8 65 06 F1 | 	add	objptr, ##29160
0a230     32 B9 02 FB | 	rdlong	local10, objptr
0a234     38 00 00 FF 
0a238     E8 65 86 F1 | 	sub	objptr, ##29160
0a23c     02 B8 06 F1 | 	add	local10, #2
0a240     00 BA 06 F6 | 	mov	local11, #0
0a244                 | '   l=ct+2 : m=0 : do
0a244                 | LR__0905
0a244                 | '   if isdec(lparts(l).part$) then 
0a244     5C AD 02 F6 | 	mov	local04, local10
0a248     03 AC 66 F0 | 	shl	local04, #3
0a24c     32 B7 02 F6 | 	mov	local09, objptr
0a250     36 00 00 FF 
0a254     B0 B7 06 F1 | 	add	local09, ##28080
0a258     5B AD 02 F1 | 	add	local04, local09
0a25c     56 93 02 FB | 	rdlong	arg01, local04
0a260     80 CE BF FD | 	call	#_isdec
0a264     00 7A 0E F2 | 	cmp	result1, #0 wz
0a268     40 00 90 AD |  if_e	jmp	#LR__0906
0a26c     5D BD 02 F6 | 	mov	local12, local11
0a270     53 BD 06 F1 | 	add	local12, #local01
0a274     5C B7 02 F6 | 	mov	local09, local10
0a278     03 B6 66 F0 | 	shl	local09, #3
0a27c     32 B5 02 F6 | 	mov	local08, objptr
0a280     36 00 00 FF 
0a284     B0 B5 06 F1 | 	add	local08, ##28080
0a288     5A B7 02 F1 | 	add	local09, local08
0a28c     5B 93 02 FB | 	rdlong	arg01, local09
0a290     00 94 06 F6 | 	mov	arg02, #0
0a294     B8 D4 B1 FD | 	call	#__system____builtin_atoi
0a298     3D BF 02 F6 | 	mov	local13, result1
0a29c                 | 	'.live	local13
0a29c                 | 	'.live	local12
0a29c     00 BC 8E F9 | 	altd	local12, #0
0a2a0     5F BD 02 F6 | 	mov	local12, local13
0a2a4     01 BA 06 F1 | 	add	local11, #1
0a2a8     08 00 90 FD | 	jmp	#LR__0907
0a2ac                 | LR__0906
0a2ac                 | '     return(17)
0a2ac     11 7A 06 F6 | 	mov	result1, #17
0a2b0     D0 03 90 FD | 	jmp	#LR__0925
0a2b4                 | LR__0907
0a2b4                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a2b4     5C AD 02 F6 | 	mov	local04, local10
0a2b8     01 AC 06 F1 | 	add	local04, #1
0a2bc     03 AC 66 F0 | 	shl	local04, #3
0a2c0     32 BF 02 F6 | 	mov	local13, objptr
0a2c4     36 00 00 FF 
0a2c8     B0 BF 06 F1 | 	add	local13, ##28080
0a2cc     5F AD 02 F1 | 	add	local04, local13
0a2d0     56 93 02 FB | 	rdlong	arg01, local04
0a2d4     96 01 00 FF 
0a2d8     56 94 06 F6 | 	mov	arg02, ##@LR__5916
0a2dc     44 A7 B1 FD | 	call	#__system___string_cmp
0a2e0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a2e4     38 00 90 AD |  if_e	jmp	#LR__0908
0a2e8     5C BF 02 F6 | 	mov	local13, local10
0a2ec     01 BE 06 F1 | 	add	local13, #1
0a2f0     03 BE 66 F0 | 	shl	local13, #3
0a2f4     32 BD 02 F6 | 	mov	local12, objptr
0a2f8     36 00 00 FF 
0a2fc     B0 BD 06 F1 | 	add	local12, ##28080
0a300     5E BF 02 F1 | 	add	local13, local12
0a304     5F 93 02 FB | 	rdlong	arg01, local13
0a308     96 01 00 FF 
0a30c     58 94 06 F6 | 	mov	arg02, ##@LR__5917
0a310     10 A7 B1 FD | 	call	#__system___string_cmp
0a314     00 7A 0E F2 | 	cmp	result1, #0 wz
0a318     2C 7A 06 56 |  if_ne	mov	result1, #44
0a31c     64 03 90 5D |  if_ne	jmp	#LR__0925
0a320                 | LR__0908
0a320     02 B8 06 F1 | 	add	local10, #2
0a324     5C AD 02 F6 | 	mov	local04, local10
0a328     01 AC 86 F1 | 	sub	local04, #1
0a32c     03 AC 66 F0 | 	shl	local04, #3
0a330     32 BF 02 F6 | 	mov	local13, objptr
0a334     36 00 00 FF 
0a338     B0 BF 06 F1 | 	add	local13, ##28080
0a33c     5F AD 02 F1 | 	add	local04, local13
0a340     56 93 02 FB | 	rdlong	arg01, local04
0a344     96 01 00 FF 
0a348     5A 94 06 F6 | 	mov	arg02, ##@LR__5918
0a34c     D4 A6 B1 FD | 	call	#__system___string_cmp
0a350     00 7A 0E F2 | 	cmp	result1, #0 wz
0a354     03 BA 56 52 |  if_ne	cmps	local11, #3 wc
0a358     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a35c                 | '   if m>3 then return 45
0a35c     04 BA 56 F2 | 	cmps	local11, #4 wc
0a360     2D 7A 06 36 |  if_ae	mov	result1, #45
0a364     1C 03 90 3D |  if_ae	jmp	#LR__0925
0a368     00 C1 06 F6 | 	mov	local14, #256
0a36c     0C C2 06 F6 | 	mov	local15, #12
0a370                 | LR__0909
0a370                 | '   arraytype=array_no_type : esize=12
0a370                 | ' 1350 
0a370                 | '   if lparts(l).part$="as" then
0a370     5C AD 02 F6 | 	mov	local04, local10
0a374     03 AC 66 F0 | 	shl	local04, #3
0a378     32 BF 02 F6 | 	mov	local13, objptr
0a37c     36 00 00 FF 
0a380     B0 BF 06 F1 | 	add	local13, ##28080
0a384     5F AD 02 F1 | 	add	local04, local13
0a388     56 93 02 FB | 	rdlong	arg01, local04
0a38c     96 01 00 FF 
0a390     5C 94 06 F6 | 	mov	arg02, ##@LR__5919
0a394     8C A6 B1 FD | 	call	#__system___string_cmp
0a398     00 7A 0E F2 | 	cmp	result1, #0 wz
0a39c     E4 01 90 5D |  if_ne	jmp	#LR__0924
0a3a0                 | '     select case lparts(l+1).part$
0a3a0     5C BD 02 F6 | 	mov	local12, local10
0a3a4     01 BC 06 F1 | 	add	local12, #1
0a3a8     03 BC 66 F0 | 	shl	local12, #3
0a3ac     32 AD 02 F6 | 	mov	local04, objptr
0a3b0     36 00 00 FF 
0a3b4     B0 AD 06 F1 | 	add	local04, ##28080
0a3b8     56 BD 02 F1 | 	add	local12, local04
0a3bc     5E C5 02 FB | 	rdlong	local16, local12
0a3c0     96 01 00 FF 
0a3c4     5F 94 06 F6 | 	mov	arg02, ##@LR__5920
0a3c8     62 93 02 F6 | 	mov	arg01, local16
0a3cc     54 A6 B1 FD | 	call	#__system___string_cmp
0a3d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3d4     0C 01 90 AD |  if_e	jmp	#LR__0910
0a3d8     96 01 00 FF 
0a3dc     64 94 06 F6 | 	mov	arg02, ##@LR__5921
0a3e0     62 93 02 F6 | 	mov	arg01, local16
0a3e4     3C A6 B1 FD | 	call	#__system___string_cmp
0a3e8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3ec     00 01 90 AD |  if_e	jmp	#LR__0911
0a3f0     96 01 00 FF 
0a3f4     6A 94 06 F6 | 	mov	arg02, ##@LR__5922
0a3f8     62 93 02 F6 | 	mov	arg01, local16
0a3fc     24 A6 B1 FD | 	call	#__system___string_cmp
0a400     00 7A 0E F2 | 	cmp	result1, #0 wz
0a404     F4 00 90 AD |  if_e	jmp	#LR__0912
0a408     96 01 00 FF 
0a40c     70 94 06 F6 | 	mov	arg02, ##@LR__5923
0a410     62 93 02 F6 | 	mov	arg01, local16
0a414     0C A6 B1 FD | 	call	#__system___string_cmp
0a418     00 7A 0E F2 | 	cmp	result1, #0 wz
0a41c     E8 00 90 AD |  if_e	jmp	#LR__0913
0a420     96 01 00 FF 
0a424     77 94 06 F6 | 	mov	arg02, ##@LR__5924
0a428     62 93 02 F6 | 	mov	arg01, local16
0a42c     F4 A5 B1 FD | 	call	#__system___string_cmp
0a430     00 7A 0E F2 | 	cmp	result1, #0 wz
0a434     DC 00 90 AD |  if_e	jmp	#LR__0914
0a438     96 01 00 FF 
0a43c     7C 94 06 F6 | 	mov	arg02, ##@LR__5925
0a440     62 93 02 F6 | 	mov	arg01, local16
0a444     DC A5 B1 FD | 	call	#__system___string_cmp
0a448     00 7A 0E F2 | 	cmp	result1, #0 wz
0a44c     D0 00 90 AD |  if_e	jmp	#LR__0915
0a450     96 01 00 FF 
0a454     84 94 06 F6 | 	mov	arg02, ##@LR__5926
0a458     62 93 02 F6 | 	mov	arg01, local16
0a45c     C4 A5 B1 FD | 	call	#__system___string_cmp
0a460     00 7A 0E F2 | 	cmp	result1, #0 wz
0a464     C4 00 90 AD |  if_e	jmp	#LR__0916
0a468     96 01 00 FF 
0a46c     8A 94 06 F6 | 	mov	arg02, ##@LR__5927
0a470     62 93 02 F6 | 	mov	arg01, local16
0a474     AC A5 B1 FD | 	call	#__system___string_cmp
0a478     00 7A 0E F2 | 	cmp	result1, #0 wz
0a47c     B8 00 90 AD |  if_e	jmp	#LR__0917
0a480     96 01 00 FF 
0a484     90 94 06 F6 | 	mov	arg02, ##@LR__5928
0a488     62 93 02 F6 | 	mov	arg01, local16
0a48c     94 A5 B1 FD | 	call	#__system___string_cmp
0a490     00 7A 0E F2 | 	cmp	result1, #0 wz
0a494     AC 00 90 AD |  if_e	jmp	#LR__0918
0a498     96 01 00 FF 
0a49c     97 94 06 F6 | 	mov	arg02, ##@LR__5929
0a4a0     62 93 02 F6 | 	mov	arg01, local16
0a4a4     7C A5 B1 FD | 	call	#__system___string_cmp
0a4a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4ac     A0 00 90 AD |  if_e	jmp	#LR__0919
0a4b0     96 01 00 FF 
0a4b4     9E 94 06 F6 | 	mov	arg02, ##@LR__5930
0a4b8     62 93 02 F6 | 	mov	arg01, local16
0a4bc     64 A5 B1 FD | 	call	#__system___string_cmp
0a4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4c4     94 00 90 AD |  if_e	jmp	#LR__0920
0a4c8     96 01 00 FF 
0a4cc     A5 94 06 F6 | 	mov	arg02, ##@LR__5931
0a4d0     62 93 02 F6 | 	mov	arg01, local16
0a4d4     4C A5 B1 FD | 	call	#__system___string_cmp
0a4d8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4dc     88 00 90 AD |  if_e	jmp	#LR__0921
0a4e0     90 00 90 FD | 	jmp	#LR__0922
0a4e4                 | LR__0910
0a4e4     01 C1 06 F6 | 	mov	local14, #257
0a4e8     01 C2 06 F6 | 	mov	local15, #1
0a4ec     94 00 90 FD | 	jmp	#LR__0924
0a4f0                 | LR__0911
0a4f0     02 C1 06 F6 | 	mov	local14, #258
0a4f4     01 C2 06 F6 | 	mov	local15, #1
0a4f8     88 00 90 FD | 	jmp	#LR__0924
0a4fc                 | LR__0912
0a4fc     03 C1 06 F6 | 	mov	local14, #259
0a500     02 C2 06 F6 | 	mov	local15, #2
0a504     7C 00 90 FD | 	jmp	#LR__0924
0a508                 | LR__0913
0a508     04 C1 06 F6 | 	mov	local14, #260
0a50c     02 C2 06 F6 | 	mov	local15, #2
0a510     70 00 90 FD | 	jmp	#LR__0924
0a514                 | LR__0914
0a514     05 C1 06 F6 | 	mov	local14, #261
0a518     04 C2 06 F6 | 	mov	local15, #4
0a51c     64 00 90 FD | 	jmp	#LR__0924
0a520                 | LR__0915
0a520     05 C1 06 F6 | 	mov	local14, #261
0a524     04 C2 06 F6 | 	mov	local15, #4
0a528     58 00 90 FD | 	jmp	#LR__0924
0a52c                 | LR__0916
0a52c     06 C1 06 F6 | 	mov	local14, #262
0a530     04 C2 06 F6 | 	mov	local15, #4
0a534     4C 00 90 FD | 	jmp	#LR__0924
0a538                 | LR__0917
0a538     07 C1 06 F6 | 	mov	local14, #263
0a53c     08 C2 06 F6 | 	mov	local15, #8
0a540     40 00 90 FD | 	jmp	#LR__0924
0a544                 | LR__0918
0a544     08 C1 06 F6 | 	mov	local14, #264
0a548     08 C2 06 F6 | 	mov	local15, #8
0a54c     34 00 90 FD | 	jmp	#LR__0924
0a550                 | LR__0919
0a550     09 C1 06 F6 | 	mov	local14, #265
0a554     04 C2 06 F6 | 	mov	local15, #4
0a558     28 00 90 FD | 	jmp	#LR__0924
0a55c                 | LR__0920
0a55c     0A C1 06 F6 | 	mov	local14, #266
0a560     08 C2 06 F6 | 	mov	local15, #8
0a564     1C 00 90 FD | 	jmp	#LR__0924
0a568                 | LR__0921
0a568     0B C1 06 F6 | 	mov	local14, #267
0a56c     04 C2 06 F6 | 	mov	local15, #4
0a570     10 00 90 FD | 	jmp	#LR__0924
0a574                 | LR__0922
0a574     2F 7A 06 F6 | 	mov	result1, #47
0a578     08 01 90 FD | 	jmp	#LR__0925
0a57c                 | LR__0923
0a57c                 | '   return 46
0a57c     2E 7A 06 F6 | 	mov	result1, #46
0a580     00 01 90 FD | 	jmp	#LR__0925
0a584                 | LR__0924
0a584     53 C3 02 FD | 	qmul	local15, local01
0a588     18 B2 62 FD | 	getqx	local07
0a58c     54 B3 02 FD | 	qmul	local07, local02
0a590     18 C4 62 FD | 	getqx	local16
0a594     55 C5 02 FD | 	qmul	local16, local03
0a598     54 00 00 FF 
0a59c     74 64 06 F1 | 	add	objptr, ##43124
0a5a0     32 C7 02 FB | 	rdlong	local17, objptr
0a5a4     60 95 02 F6 | 	mov	arg02, local14
0a5a8     18 C4 62 FD | 	getqx	local16
0a5ac     62 C7 82 F1 | 	sub	local17, local16
0a5b0     10 C6 86 F1 | 	sub	local17, #16
0a5b4     0F C6 26 F5 | 	andn	local17, #15
0a5b8     32 C7 62 FC | 	wrlong	local17, objptr
0a5bc     54 00 00 FF 
0a5c0     74 64 86 F1 | 	sub	objptr, ##43124
0a5c4     63 93 02 F6 | 	mov	arg01, local17
0a5c8     EC 68 B1 FD | 	call	#_psdpoke
0a5cc     63 93 02 F6 | 	mov	arg01, local17
0a5d0     02 92 06 F1 | 	add	arg01, #2
0a5d4     61 95 02 F6 | 	mov	arg02, local15
0a5d8     DC 68 B1 FD | 	call	#_psdpoke
0a5dc     63 93 02 F6 | 	mov	arg01, local17
0a5e0     04 92 06 F1 | 	add	arg01, #4
0a5e4     53 95 02 F6 | 	mov	arg02, local01
0a5e8     84 68 B1 FD | 	call	#_pslpoke
0a5ec     63 93 02 F6 | 	mov	arg01, local17
0a5f0     08 92 06 F1 | 	add	arg01, #8
0a5f4     54 95 02 F6 | 	mov	arg02, local02
0a5f8     74 68 B1 FD | 	call	#_pslpoke
0a5fc     63 93 02 F6 | 	mov	arg01, local17
0a600     0C 92 06 F1 | 	add	arg01, #12
0a604     55 95 02 F6 | 	mov	arg02, local03
0a608     64 68 B1 FD | 	call	#_pslpoke
0a60c     58 BD 02 F6 | 	mov	local12, local06
0a610     04 BC 66 F0 | 	shl	local12, #4
0a614     16 00 00 FF 
0a618     9C 65 06 F1 | 	add	objptr, ##11676
0a61c     32 BD 02 F1 | 	add	local12, objptr
0a620     5E AF 62 FC | 	wrlong	local05, local12
0a624     58 BD 02 F6 | 	mov	local12, local06
0a628     04 BC 66 F0 | 	shl	local12, #4
0a62c     32 BD 02 F1 | 	add	local12, objptr
0a630     04 BC 06 F1 | 	add	local12, #4
0a634     5E C7 62 FC | 	wrlong	local17, local12
0a638     58 BD 02 F6 | 	mov	local12, local06
0a63c     04 BC 66 F0 | 	shl	local12, #4
0a640     32 BD 02 F1 | 	add	local12, objptr
0a644     0C BC 06 F1 | 	add	local12, #12
0a648     5E C1 62 FC | 	wrlong	local14, local12
0a64c                 | ' memtop=arrayptr
0a64c                 | ' psdpoke arrayptr,arraytype 
0a64c                 | ' psdpoke arrayptr+2,esize 
0a64c                 | ' pslpoke arrayptr+4,dims(0)
0a64c                 | ' pslpoke arrayptr+8,dims(1)
0a64c                 | ' pslpoke arrayptr+12,dims(2)
0a64c                 | ' variables(j).name=varname2$
0a64c                 | ' variables(j).value.uresult=arrayptr
0a64c                 | ' variables(j).vartype=arraytype
0a64c                 | ' if j=varnum then varnum+=1
0a64c     20 00 00 FF 
0a650     10 64 06 F1 | 	add	objptr, ##16400
0a654     32 B3 02 FB | 	rdlong	local07, objptr
0a658     36 00 00 FF 
0a65c     AC 65 86 F1 | 	sub	objptr, ##28076
0a660     59 B1 0A F2 | 	cmp	local06, local07 wz
0a664     36 00 00 AF 
0a668     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a66c     32 B3 02 AB |  if_e	rdlong	local07, objptr
0a670     01 B2 06 A1 |  if_e	add	local07, #1
0a674     32 B3 62 AC |  if_e	wrlong	local07, objptr
0a678     36 00 00 AF 
0a67c     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a680                 | ' return 0
0a680     00 7A 06 F6 | 	mov	result1, #0
0a684                 | LR__0925
0a684     E7 F0 03 F6 | 	mov	ptra, fp
0a688     F2 00 A0 FD | 	call	#popregs_
0a68c                 | _compile_dim_ret
0a68c     2D 00 64 FD | 	ret
0a690                 | 
0a690                 | ' 
0a690                 | ' '----- compile 'for' command. 
0a690                 | ' 
0a690                 | ' function compile_for() as ulong  
0a690                 | _compile_for
0a690     0F CA 05 F6 | 	mov	COUNT_, #15
0a694     E8 00 A0 FD | 	call	#pushregs_
0a698                 | ' 
0a698                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a698     38 00 00 FF 
0a69c     E8 65 06 F1 | 	add	objptr, ##29160
0a6a0     32 95 02 FB | 	rdlong	arg02, objptr
0a6a4     01 94 06 F1 | 	add	arg02, #1
0a6a8     03 94 66 F0 | 	shl	arg02, #3
0a6ac     02 00 00 FF 
0a6b0     38 64 86 F1 | 	sub	objptr, ##1080
0a6b4     32 95 02 F1 | 	add	arg02, objptr
0a6b8     4A 93 02 FB | 	rdlong	arg01, arg02
0a6bc     36 00 00 FF 
0a6c0     B0 65 86 F1 | 	sub	objptr, ##28080
0a6c4                 | ' 
0a6c4                 | ' select case s
0a6c4     93 01 00 FF 
0a6c8     12 95 06 F6 | 	mov	arg02, ##@LR__5639
0a6cc     54 A3 B1 FD | 	call	#__system___string_cmp
0a6d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6d4     1B 7A 06 A6 |  if_e	mov	result1, #27
0a6d8     00 7A 06 56 |  if_ne	mov	result1, #0
0a6dc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6e0     0C 00 90 AD |  if_e	jmp	#LR__0930
0a6e4     05 92 06 F6 | 	mov	arg01, #5
0a6e8     DC DB BF FD | 	call	#_compile_immediate_assign
0a6ec     08 00 90 FD | 	jmp	#LR__0931
0a6f0                 | LR__0930
0a6f0     20 7A 06 F6 | 	mov	result1, #32
0a6f4     64 08 90 FD | 	jmp	#LR__0947
0a6f8                 | LR__0931
0a6f8     4C 00 00 FF 
0a6fc     20 64 06 F1 | 	add	objptr, ##38944
0a700     32 95 02 FB | 	rdlong	arg02, objptr
0a704     4A 93 02 F6 | 	mov	arg01, arg02
0a708     01 92 86 F1 | 	sub	arg01, #1
0a70c     49 AD 02 F6 | 	mov	local04, arg01
0a710     01 AC 66 F0 | 	shl	local04, #1
0a714     49 AD 02 F1 | 	add	local04, arg01
0a718     02 AC 66 F0 | 	shl	local04, #2
0a71c     03 00 00 FF 
0a720     00 64 86 F1 | 	sub	objptr, ##1536
0a724     32 AD 02 F1 | 	add	local04, objptr
0a728     56 A7 02 FB | 	rdlong	local01, local04
0a72c     04 AC 06 F1 | 	add	local04, #4
0a730     56 AF 02 FB | 	rdlong	local05, local04
0a734     01 94 86 F1 | 	sub	arg02, #1
0a738     4A B1 02 F6 | 	mov	local06, arg02
0a73c     01 B0 66 F0 | 	shl	local06, #1
0a740     4A B1 02 F1 | 	add	local06, arg02
0a744     02 B0 66 F0 | 	shl	local06, #2
0a748     32 B3 02 F6 | 	mov	local07, objptr
0a74c     32 B1 02 F1 | 	add	local06, objptr
0a750     08 B0 06 F1 | 	add	local06, #8
0a754     58 AD 02 FB | 	rdlong	local04, local06
0a758     57 A9 02 F6 | 	mov	local02, local05
0a75c     56 AB 02 F6 | 	mov	local03, local04
0a760                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a760     17 AA 0E F2 | 	cmp	local03, #23 wz
0a764     49 00 00 FF 
0a768     20 64 86 F1 | 	sub	objptr, ##37408
0a76c     22 7A 06 56 |  if_ne	mov	result1, #34
0a770     E8 07 90 5D |  if_ne	jmp	#LR__0947
0a774     53 B5 02 F6 | 	mov	local08, local01
0a778                 | ' varnum=t1.result.uresult
0a778                 | ' if lparts(ct).part$<>"to" then return 33
0a778     38 00 00 FF 
0a77c     E8 65 06 F1 | 	add	objptr, ##29160
0a780     32 AD 02 FB | 	rdlong	local04, objptr
0a784     03 AC 66 F0 | 	shl	local04, #3
0a788     02 00 00 FF 
0a78c     38 64 86 F1 | 	sub	objptr, ##1080
0a790     32 AD 02 F1 | 	add	local04, objptr
0a794     56 93 02 FB | 	rdlong	arg01, local04
0a798     96 01 00 FF 
0a79c     AC 94 06 F6 | 	mov	arg02, ##@LR__5932
0a7a0     36 00 00 FF 
0a7a4     B0 65 86 F1 | 	sub	objptr, ##28080
0a7a8     78 A2 B1 FD | 	call	#__system___string_cmp
0a7ac     00 7A 0E F2 | 	cmp	result1, #0 wz
0a7b0     21 7A 06 56 |  if_ne	mov	result1, #33
0a7b4     A4 07 90 5D |  if_ne	jmp	#LR__0947
0a7b8     38 00 00 FF 
0a7bc     E8 65 06 F1 | 	add	objptr, ##29160
0a7c0     32 B7 02 FB | 	rdlong	local09, objptr
0a7c4     01 B6 06 F1 | 	add	local09, #1
0a7c8     32 B7 62 FC | 	wrlong	local09, objptr
0a7cc     38 00 00 FF 
0a7d0     E8 65 86 F1 | 	sub	objptr, ##29160
0a7d4     80 16 B0 FD | 	call	#_expr
0a7d8                 | ' ct+=1
0a7d8                 | ' expr()  										' there is "to" value pushed on the stack
0a7d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7d8     38 00 00 FF 
0a7dc     E8 65 06 F1 | 	add	objptr, ##29160
0a7e0     32 AD 02 FB | 	rdlong	local04, objptr
0a7e4     03 AC 66 F0 | 	shl	local04, #3
0a7e8     02 00 00 FF 
0a7ec     38 64 86 F1 | 	sub	objptr, ##1080
0a7f0     32 AD 02 F1 | 	add	local04, objptr
0a7f4     56 93 02 FB | 	rdlong	arg01, local04
0a7f8     96 01 00 FF 
0a7fc     AF 94 06 F6 | 	mov	arg02, ##@LR__5933
0a800     36 00 00 FF 
0a804     B0 65 86 F1 | 	sub	objptr, ##28080
0a808     18 A2 B1 FD | 	call	#__system___string_cmp
0a80c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a810     48 00 90 AD |  if_e	jmp	#LR__0932
0a814     38 00 00 FF 
0a818     E8 65 06 F1 | 	add	objptr, ##29160
0a81c     32 AD 02 FB | 	rdlong	local04, objptr
0a820     03 AC 66 F0 | 	shl	local04, #3
0a824     02 00 00 FF 
0a828     38 64 86 F1 | 	sub	objptr, ##1080
0a82c     32 AD 02 F1 | 	add	local04, objptr
0a830     56 93 02 FB | 	rdlong	arg01, local04
0a834     02 94 06 F6 | 	mov	arg02, #2
0a838     36 00 00 FF 
0a83c     B0 65 86 F1 | 	sub	objptr, ##28080
0a840     60 BA B1 FD | 	call	#__system__Left_S
0a844     3D 93 02 F6 | 	mov	arg01, result1
0a848     96 01 00 FF 
0a84c     B4 94 06 F6 | 	mov	arg02, ##@LR__5934
0a850     D0 A1 B1 FD | 	call	#__system___string_cmp
0a854     00 7A 0E F2 | 	cmp	result1, #0 wz
0a858     A8 05 90 5D |  if_ne	jmp	#LR__0945
0a85c                 | LR__0932
0a85c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a85c     38 00 00 FF 
0a860     E8 65 06 F1 | 	add	objptr, ##29160
0a864     32 AD 02 FB | 	rdlong	local04, objptr
0a868     03 AC 66 F0 | 	shl	local04, #3
0a86c     02 00 00 FF 
0a870     38 64 86 F1 | 	sub	objptr, ##1080
0a874     32 AD 02 F1 | 	add	local04, objptr
0a878     56 93 02 FB | 	rdlong	arg01, local04
0a87c     02 94 06 F6 | 	mov	arg02, #2
0a880     36 00 00 FF 
0a884     B0 65 86 F1 | 	sub	objptr, ##28080
0a888     18 BA B1 FD | 	call	#__system__Left_S
0a88c     3D 93 02 F6 | 	mov	arg01, result1
0a890     96 01 00 FF 
0a894     B7 94 06 F6 | 	mov	arg02, ##@LR__5935
0a898     88 A1 B1 FD | 	call	#__system___string_cmp
0a89c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a8a0     3C 05 90 5D |  if_ne	jmp	#LR__0944
0a8a4     38 00 00 FF 
0a8a8     E8 65 06 F1 | 	add	objptr, ##29160
0a8ac     32 AD 02 FB | 	rdlong	local04, objptr
0a8b0     03 AC 66 F0 | 	shl	local04, #3
0a8b4     02 00 00 FF 
0a8b8     38 64 86 F1 | 	sub	objptr, ##1080
0a8bc     32 AD 02 F1 | 	add	local04, objptr
0a8c0     56 93 02 FB | 	rdlong	arg01, local04
0a8c4     36 00 00 FF 
0a8c8     B0 65 86 F1 | 	sub	objptr, ##28080
0a8cc     49 B9 02 F6 | 	mov	local10, arg01
0a8d0     D7 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0a8d4                 | LR__0933
0a8d4     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a8d8     01 B8 06 51 |  if_ne	add	local10, #1
0a8dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0a8e0                 | LR__0934
0a8e0     49 B9 82 F1 | 	sub	local10, arg01
0a8e4     03 B8 56 F2 | 	cmps	local10, #3 wc
0a8e8     F4 04 90 CD |  if_b	jmp	#LR__0944
0a8ec     38 00 00 FF 
0a8f0     E8 65 06 F1 | 	add	objptr, ##29160
0a8f4     32 AD 02 FB | 	rdlong	local04, objptr
0a8f8     56 BB 02 F6 | 	mov	local11, local04
0a8fc     03 BA 66 F0 | 	shl	local11, #3
0a900     02 00 00 FF 
0a904     38 64 86 F1 | 	sub	objptr, ##1080
0a908     32 BB 02 F1 | 	add	local11, objptr
0a90c     03 AC 66 F0 | 	shl	local04, #3
0a910     32 AD 02 F1 | 	add	local04, objptr
0a914     56 AD 02 FB | 	rdlong	local04, local04
0a918     02 00 00 FF 
0a91c     38 64 06 F1 | 	add	objptr, ##1080
0a920     32 93 02 FB | 	rdlong	arg01, objptr
0a924     03 92 66 F0 | 	shl	arg01, #3
0a928     02 00 00 FF 
0a92c     38 64 86 F1 | 	sub	objptr, ##1080
0a930     32 93 02 F1 | 	add	arg01, objptr
0a934     49 93 02 FB | 	rdlong	arg01, arg01
0a938     36 00 00 FF 
0a93c     B0 65 86 F1 | 	sub	objptr, ##28080
0a940     49 B9 02 F6 | 	mov	local10, arg01
0a944     D7 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0a948                 | LR__0935
0a948     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a94c     01 B8 06 51 |  if_ne	add	local10, #1
0a950     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0a954                 | LR__0936
0a954     49 B9 82 F1 | 	sub	local10, arg01
0a958     5C 95 02 F6 | 	mov	arg02, local10
0a95c     02 94 86 F1 | 	sub	arg02, #2
0a960     56 93 02 F6 | 	mov	arg01, local04
0a964     C4 B9 B1 FD | 	call	#__system__Right_S
0a968     5D 7B 62 FC | 	wrlong	result1, local11
0a96c     38 00 00 FF 
0a970     E8 65 06 F1 | 	add	objptr, ##29160
0a974     32 AD 02 FB | 	rdlong	local04, objptr
0a978     56 BB 02 F6 | 	mov	local11, local04
0a97c     03 BA 66 F0 | 	shl	local11, #3
0a980     02 00 00 FF 
0a984     38 64 86 F1 | 	sub	objptr, ##1080
0a988     32 BB 02 F1 | 	add	local11, objptr
0a98c     03 AC 66 F0 | 	shl	local04, #3
0a990     32 AD 02 F1 | 	add	local04, objptr
0a994     56 93 02 FB | 	rdlong	arg01, local04
0a998     36 00 00 FF 
0a99c     B0 65 86 F1 | 	sub	objptr, ##28080
0a9a0     1C B6 BF FD | 	call	#_isfunction
0a9a4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0a9a8     04 BA 06 F1 | 	add	local11, #4
0a9ac     5D 7B 62 FC | 	wrlong	result1, local11
0a9b0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a9b0     38 00 00 FF 
0a9b4     E8 65 06 F1 | 	add	objptr, ##29160
0a9b8     32 BB 02 FB | 	rdlong	local11, objptr
0a9bc     03 BA 66 F0 | 	shl	local11, #3
0a9c0     02 00 00 FF 
0a9c4     38 64 86 F1 | 	sub	objptr, ##1080
0a9c8     32 BB 02 F1 | 	add	local11, objptr
0a9cc     04 BA 06 F1 | 	add	local11, #4
0a9d0     5D AD 02 FB | 	rdlong	local04, local11
0a9d4     01 AC 56 F2 | 	cmps	local04, #1 wc
0a9d8     36 00 00 FF 
0a9dc     B0 65 86 F1 | 	sub	objptr, ##28080
0a9e0     E0 03 90 3D |  if_ae	jmp	#LR__0943
0a9e4     38 00 00 FF 
0a9e8     E8 65 06 F1 | 	add	objptr, ##29160
0a9ec     32 AD 02 FB | 	rdlong	local04, objptr
0a9f0     56 BB 02 F6 | 	mov	local11, local04
0a9f4     03 BA 66 F0 | 	shl	local11, #3
0a9f8     02 00 00 FF 
0a9fc     38 64 86 F1 | 	sub	objptr, ##1080
0aa00     32 BB 02 F1 | 	add	local11, objptr
0aa04     03 AC 66 F0 | 	shl	local04, #3
0aa08     32 AD 02 F1 | 	add	local04, objptr
0aa0c     56 93 02 FB | 	rdlong	arg01, local04
0aa10     36 00 00 FF 
0aa14     B0 65 86 F1 | 	sub	objptr, ##28080
0aa18     78 9E BF FD | 	call	#_isnotename
0aa1c     04 BA 06 F1 | 	add	local11, #4
0aa20     5D 7B 62 FC | 	wrlong	result1, local11
0aa24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa24                 | '     if lparts(ct).token>0 then 
0aa24     38 00 00 FF 
0aa28     E8 65 06 F1 | 	add	objptr, ##29160
0aa2c     32 BB 02 FB | 	rdlong	local11, objptr
0aa30     03 BA 66 F0 | 	shl	local11, #3
0aa34     02 00 00 FF 
0aa38     38 64 86 F1 | 	sub	objptr, ##1080
0aa3c     32 BB 02 F1 | 	add	local11, objptr
0aa40     04 BA 06 F1 | 	add	local11, #4
0aa44     5D AD 02 FB | 	rdlong	local04, local11
0aa48     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa4c     36 00 00 FF 
0aa50     B0 65 86 F1 | 	sub	objptr, ##28080
0aa54     94 00 90 CD |  if_b	jmp	#LR__0937
0aa58     38 00 00 FF 
0aa5c     E8 65 06 F1 | 	add	objptr, ##29160
0aa60     32 BB 02 FB | 	rdlong	local11, objptr
0aa64     03 BA 66 F0 | 	shl	local11, #3
0aa68     02 00 00 FF 
0aa6c     38 64 86 F1 | 	sub	objptr, ##1080
0aa70     32 BB 02 F1 | 	add	local11, objptr
0aa74     04 BA 06 F1 | 	add	local11, #4
0aa78     5D 93 02 FB | 	rdlong	arg01, local11
0aa7c     36 00 00 FF 
0aa80     B0 65 86 F1 | 	sub	objptr, ##28080
0aa84     80 C7 BF FD | 	call	#_getnoteval
0aa88     3D 93 02 F6 | 	mov	arg01, result1
0aa8c     38 00 00 FF 
0aa90     E8 65 06 F1 | 	add	objptr, ##29160
0aa94     32 BB 02 FB | 	rdlong	local11, objptr
0aa98     03 BA 66 F0 | 	shl	local11, #3
0aa9c     02 00 00 FF 
0aaa0     38 64 86 F1 | 	sub	objptr, ##1080
0aaa4     32 BB 02 F1 | 	add	local11, objptr
0aaa8     36 00 00 FF 
0aaac     B0 65 86 F1 | 	sub	objptr, ##28080
0aab0     E8 B9 B1 FD | 	call	#__system__str_S
0aab4     5D 7B 62 FC | 	wrlong	result1, local11
0aab8     38 00 00 FF 
0aabc     E8 65 06 F1 | 	add	objptr, ##29160
0aac0     32 BB 02 FB | 	rdlong	local11, objptr
0aac4     03 BA 66 F0 | 	shl	local11, #3
0aac8     02 00 00 FF 
0aacc     38 64 86 F1 | 	sub	objptr, ##1080
0aad0     32 BB 02 F1 | 	add	local11, objptr
0aad4     04 BA 06 F1 | 	add	local11, #4
0aad8     01 00 80 FF 
0aadc     5D 05 68 FC | 	wrlong	##514, local11
0aae0     36 00 00 FF 
0aae4     B0 65 86 F1 | 	sub	objptr, ##28080
0aae8     D8 02 90 FD | 	jmp	#LR__0943
0aaec                 | LR__0937
0aaec     38 00 00 FF 
0aaf0     E8 65 06 F1 | 	add	objptr, ##29160
0aaf4     32 AD 02 FB | 	rdlong	local04, objptr
0aaf8     56 BB 02 F6 | 	mov	local11, local04
0aafc     03 BA 66 F0 | 	shl	local11, #3
0ab00     02 00 00 FF 
0ab04     38 64 86 F1 | 	sub	objptr, ##1080
0ab08     32 BB 02 F1 | 	add	local11, objptr
0ab0c     03 AC 66 F0 | 	shl	local04, #3
0ab10     32 AD 02 F1 | 	add	local04, objptr
0ab14     56 93 02 FB | 	rdlong	arg01, local04
0ab18     36 00 00 FF 
0ab1c     B0 65 86 F1 | 	sub	objptr, ##28080
0ab20     F0 9C BF FD | 	call	#_isconstant
0ab24     04 BA 06 F1 | 	add	local11, #4
0ab28     5D 7B 62 FC | 	wrlong	result1, local11
0ab2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab2c     38 00 00 FF 
0ab30     E8 65 06 F1 | 	add	objptr, ##29160
0ab34     32 BB 02 FB | 	rdlong	local11, objptr
0ab38     03 BA 66 F0 | 	shl	local11, #3
0ab3c     02 00 00 FF 
0ab40     38 64 86 F1 | 	sub	objptr, ##1080
0ab44     32 BB 02 F1 | 	add	local11, objptr
0ab48     04 BA 06 F1 | 	add	local11, #4
0ab4c     5D AD 02 FB | 	rdlong	local04, local11
0ab50     01 AC 56 F2 | 	cmps	local04, #1 wc
0ab54     36 00 00 FF 
0ab58     B0 65 86 F1 | 	sub	objptr, ##28080
0ab5c     8C 00 90 CD |  if_b	jmp	#LR__0938
0ab60     38 00 00 FF 
0ab64     E8 65 06 F1 | 	add	objptr, ##29160
0ab68     32 B7 02 FB | 	rdlong	local09, objptr
0ab6c     5B BB 02 F6 | 	mov	local11, local09
0ab70     03 BA 66 F0 | 	shl	local11, #3
0ab74     02 00 00 FF 
0ab78     38 64 86 F1 | 	sub	objptr, ##1080
0ab7c     32 BB 02 F1 | 	add	local11, objptr
0ab80     03 B6 66 F0 | 	shl	local09, #3
0ab84     32 B7 02 F1 | 	add	local09, objptr
0ab88     04 B6 06 F1 | 	add	local09, #4
0ab8c     5B 93 02 FB | 	rdlong	arg01, local09
0ab90     36 00 00 FF 
0ab94     B0 65 86 F1 | 	sub	objptr, ##28080
0ab98     49 93 52 F6 | 	abs	arg01, arg01 wc
0ab9c     1F BC C6 C9 |  if_b	decod	local12, #31
0aba0     00 BC 06 36 |  if_ae	mov	local12, #0
0aba4     20 C1 B1 FD | 	call	#__system___float_fromuns
0aba8     5E 7B 62 F5 | 	xor	result1, local12
0abac     3D 93 02 F6 | 	mov	arg01, result1
0abb0     E8 B8 B1 FD | 	call	#__system__str_S
0abb4     5D 7B 62 FC | 	wrlong	result1, local11
0abb8     38 00 00 FF 
0abbc     E8 65 06 F1 | 	add	objptr, ##29160
0abc0     32 BB 02 FB | 	rdlong	local11, objptr
0abc4     03 BA 66 F0 | 	shl	local11, #3
0abc8     02 00 00 FF 
0abcc     38 64 86 F1 | 	sub	objptr, ##1080
0abd0     32 BB 02 F1 | 	add	local11, objptr
0abd4     04 BA 06 F1 | 	add	local11, #4
0abd8     01 00 80 FF 
0abdc     5D 03 68 FC | 	wrlong	##513, local11
0abe0     36 00 00 FF 
0abe4     B0 65 86 F1 | 	sub	objptr, ##28080
0abe8     D8 01 90 FD | 	jmp	#LR__0943
0abec                 | LR__0938
0abec     38 00 00 FF 
0abf0     E8 65 06 F1 | 	add	objptr, ##29160
0abf4     32 AD 02 FB | 	rdlong	local04, objptr
0abf8     03 AC 66 F0 | 	shl	local04, #3
0abfc     02 00 00 FF 
0ac00     38 64 86 F1 | 	sub	objptr, ##1080
0ac04     32 AD 02 F1 | 	add	local04, objptr
0ac08     56 93 02 FB | 	rdlong	arg01, local04
0ac0c     36 00 00 FF 
0ac10     B0 65 86 F1 | 	sub	objptr, ##28080
0ac14     3C BE BF FD | 	call	#_isnum
0ac18     3D BF 02 F6 | 	mov	local13, result1
0ac1c     07 BE 66 F7 | 	signx	local13, #7
0ac20     38 00 00 FF 
0ac24     E8 65 06 F1 | 	add	objptr, ##29160
0ac28     32 AD 02 FB | 	rdlong	local04, objptr
0ac2c     03 AC 66 F0 | 	shl	local04, #3
0ac30     02 00 00 FF 
0ac34     38 64 86 F1 | 	sub	objptr, ##1080
0ac38     32 AD 02 F1 | 	add	local04, objptr
0ac3c     56 93 02 FB | 	rdlong	arg01, local04
0ac40     36 00 00 FF 
0ac44     B0 65 86 F1 | 	sub	objptr, ##28080
0ac48     F4 C1 BF FD | 	call	#_isint
0ac4c     3D C1 02 F6 | 	mov	local14, result1
0ac50     07 C0 66 F7 | 	signx	local14, #7
0ac54     38 00 00 FF 
0ac58     E8 65 06 F1 | 	add	objptr, ##29160
0ac5c     32 AD 02 FB | 	rdlong	local04, objptr
0ac60     03 AC 66 F0 | 	shl	local04, #3
0ac64     02 00 00 FF 
0ac68     38 64 86 F1 | 	sub	objptr, ##1080
0ac6c     32 AD 02 F1 | 	add	local04, objptr
0ac70     56 93 02 FB | 	rdlong	arg01, local04
0ac74     36 00 00 FF 
0ac78     B0 65 86 F1 | 	sub	objptr, ##28080
0ac7c     64 C4 BF FD | 	call	#_isdec
0ac80     07 7A 66 F7 | 	signx	result1, #7
0ac84     3D C3 02 F6 | 	mov	local15, result1
0ac88                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac88                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac88     00 BE 0E F2 | 	cmp	local13, #0 wz
0ac8c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ac90     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ac94     34 00 90 AD |  if_e	jmp	#LR__0939
0ac98     38 00 00 FF 
0ac9c     E8 65 06 F1 | 	add	objptr, ##29160
0aca0     32 BB 02 FB | 	rdlong	local11, objptr
0aca4     03 BA 66 F0 | 	shl	local11, #3
0aca8     02 00 00 FF 
0acac     38 64 86 F1 | 	sub	objptr, ##1080
0acb0     32 BB 02 F1 | 	add	local11, objptr
0acb4     04 BA 06 F1 | 	add	local11, #4
0acb8     01 00 80 FF 
0acbc     5D 01 68 FC | 	wrlong	##512, local11
0acc0     36 00 00 FF 
0acc4     B0 65 86 F1 | 	sub	objptr, ##28080
0acc8     F8 00 90 FD | 	jmp	#LR__0943
0accc                 | LR__0939
0accc                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0accc     00 BE 0E F2 | 	cmp	local13, #0 wz
0acd0     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0acd4     61 B7 22 56 |  if_ne	not	local09, local15
0acd8     00 B6 0E 52 |  if_ne	cmp	local09, #0 wz
0acdc     34 00 90 AD |  if_e	jmp	#LR__0940
0ace0     38 00 00 FF 
0ace4     E8 65 06 F1 | 	add	objptr, ##29160
0ace8     32 BB 02 FB | 	rdlong	local11, objptr
0acec     03 BA 66 F0 | 	shl	local11, #3
0acf0     02 00 00 FF 
0acf4     38 64 86 F1 | 	sub	objptr, ##1080
0acf8     32 BB 02 F1 | 	add	local11, objptr
0acfc     04 BA 06 F1 | 	add	local11, #4
0ad00     01 00 80 FF 
0ad04     5D 03 68 FC | 	wrlong	##513, local11
0ad08     36 00 00 FF 
0ad0c     B0 65 86 F1 | 	sub	objptr, ##28080
0ad10     B0 00 90 FD | 	jmp	#LR__0943
0ad14                 | LR__0940
0ad14                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad14     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad18     60 C1 22 56 |  if_ne	not	local14, local14
0ad1c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad20     61 C3 22 56 |  if_ne	not	local15, local15
0ad24     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ad28     34 00 90 AD |  if_e	jmp	#LR__0941
0ad2c     38 00 00 FF 
0ad30     E8 65 06 F1 | 	add	objptr, ##29160
0ad34     32 BB 02 FB | 	rdlong	local11, objptr
0ad38     03 BA 66 F0 | 	shl	local11, #3
0ad3c     02 00 00 FF 
0ad40     38 64 86 F1 | 	sub	objptr, ##1080
0ad44     32 BB 02 F1 | 	add	local11, objptr
0ad48     04 BA 06 F1 | 	add	local11, #4
0ad4c     01 00 80 FF 
0ad50     5D 05 68 FC | 	wrlong	##514, local11
0ad54     36 00 00 FF 
0ad58     B0 65 86 F1 | 	sub	objptr, ##28080
0ad5c     64 00 90 FD | 	jmp	#LR__0943
0ad60                 | LR__0941
0ad60                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad60     38 00 00 FF 
0ad64     E8 65 06 F1 | 	add	objptr, ##29160
0ad68     32 BB 02 FB | 	rdlong	local11, objptr
0ad6c     03 BA 66 F0 | 	shl	local11, #3
0ad70     02 00 00 FF 
0ad74     38 64 86 F1 | 	sub	objptr, ##1080
0ad78     32 BB 02 F1 | 	add	local11, objptr
0ad7c     5D 93 02 FB | 	rdlong	arg01, local11
0ad80     36 00 00 FF 
0ad84     B0 65 86 F1 | 	sub	objptr, ##28080
0ad88     54 BA BF FD | 	call	#_isname
0ad8c     00 7A 0E F2 | 	cmp	result1, #0 wz
0ad90     30 00 90 AD |  if_e	jmp	#LR__0942
0ad94     38 00 00 FF 
0ad98     E8 65 06 F1 | 	add	objptr, ##29160
0ad9c     32 BB 02 FB | 	rdlong	local11, objptr
0ada0     03 BA 66 F0 | 	shl	local11, #3
0ada4     02 00 00 FF 
0ada8     38 64 86 F1 | 	sub	objptr, ##1080
0adac     32 BB 02 F1 | 	add	local11, objptr
0adb0     04 BA 06 F1 | 	add	local11, #4
0adb4     01 00 80 FF 
0adb8     5D 09 68 FC | 	wrlong	##516, local11
0adbc     36 00 00 FF 
0adc0     B0 65 86 F1 | 	sub	objptr, ##28080
0adc4                 | LR__0942
0adc4                 | LR__0943
0adc4     38 00 00 FF 
0adc8     E8 65 06 F1 | 	add	objptr, ##29160
0adcc     32 B7 02 FB | 	rdlong	local09, objptr
0add0     01 B6 86 F1 | 	sub	local09, #1
0add4     32 B7 62 FC | 	wrlong	local09, objptr
0add8     38 00 00 FF 
0addc     E8 65 86 F1 | 	sub	objptr, ##29160
0ade0                 | LR__0944
0ade0     38 00 00 FF 
0ade4     E8 65 06 F1 | 	add	objptr, ##29160
0ade8     32 B7 02 FB | 	rdlong	local09, objptr
0adec     01 B6 06 F1 | 	add	local09, #1
0adf0     32 B7 62 FC | 	wrlong	local09, objptr
0adf4     38 00 00 FF 
0adf8     E8 65 86 F1 | 	sub	objptr, ##29160
0adfc     58 10 B0 FD | 	call	#_expr
0ae00     78 00 90 FD | 	jmp	#LR__0946
0ae04                 | LR__0945
0ae04     4C 00 00 FF 
0ae08     20 64 06 F1 | 	add	objptr, ##38944
0ae0c     32 C3 02 FB | 	rdlong	local15, objptr
0ae10     61 BB 02 F6 | 	mov	local11, local15
0ae14     01 BA 66 F0 | 	shl	local11, #1
0ae18     61 BB 02 F1 | 	add	local11, local15
0ae1c     02 BA 66 F0 | 	shl	local11, #2
0ae20     03 00 00 FF 
0ae24     00 64 86 F1 | 	sub	objptr, ##1536
0ae28     32 BB 02 F1 | 	add	local11, objptr
0ae2c     08 BA 06 F1 | 	add	local11, #8
0ae30     5D 39 68 FC | 	wrlong	#28, local11
0ae34     03 00 00 FF 
0ae38     00 64 06 F1 | 	add	objptr, ##1536
0ae3c     32 C3 02 FB | 	rdlong	local15, objptr
0ae40     61 BB 02 F6 | 	mov	local11, local15
0ae44     01 BA 66 F0 | 	shl	local11, #1
0ae48     61 BB 02 F1 | 	add	local11, local15
0ae4c     02 BA 66 F0 | 	shl	local11, #2
0ae50     03 00 00 FF 
0ae54     00 64 86 F1 | 	sub	objptr, ##1536
0ae58     32 BB 02 F1 | 	add	local11, objptr
0ae5c     5D 03 68 FC | 	wrlong	#1, local11
0ae60     03 00 00 FF 
0ae64     00 64 06 F1 | 	add	objptr, ##1536
0ae68     32 B7 02 FB | 	rdlong	local09, objptr
0ae6c     01 B6 06 F1 | 	add	local09, #1
0ae70     32 B7 62 FC | 	wrlong	local09, objptr
0ae74     4C 00 00 FF 
0ae78     20 64 86 F1 | 	sub	objptr, ##38944
0ae7c                 | LR__0946
0ae7c     4C 00 00 FF 
0ae80     20 64 06 F1 | 	add	objptr, ##38944
0ae84     32 C3 02 FB | 	rdlong	local15, objptr
0ae88     61 BB 02 F6 | 	mov	local11, local15
0ae8c     01 BA 66 F0 | 	shl	local11, #1
0ae90     61 BB 02 F1 | 	add	local11, local15
0ae94     02 BA 66 F0 | 	shl	local11, #2
0ae98     03 00 00 FF 
0ae9c     00 64 86 F1 | 	sub	objptr, ##1536
0aea0     32 BB 02 F1 | 	add	local11, objptr
0aea4     08 BA 06 F1 | 	add	local11, #8
0aea8     5D 39 68 FC | 	wrlong	#28, local11
0aeac     03 00 00 FF 
0aeb0     00 64 06 F1 | 	add	objptr, ##1536
0aeb4     32 C3 02 FB | 	rdlong	local15, objptr
0aeb8     61 BB 02 F6 | 	mov	local11, local15
0aebc     01 BA 66 F0 | 	shl	local11, #1
0aec0     61 BB 02 F1 | 	add	local11, local15
0aec4     02 BA 66 F0 | 	shl	local11, #2
0aec8     03 00 00 FF 
0aecc     00 64 86 F1 | 	sub	objptr, ##1536
0aed0     32 BB 02 F1 | 	add	local11, objptr
0aed4     5D B5 62 FC | 	wrlong	local08, local11
0aed8     03 00 00 FF 
0aedc     00 64 06 F1 | 	add	objptr, ##1536
0aee0     32 C3 02 FB | 	rdlong	local15, objptr
0aee4     01 C2 06 F1 | 	add	local15, #1
0aee8     32 C3 62 FC | 	wrlong	local15, objptr
0aeec     61 BB 02 F6 | 	mov	local11, local15
0aef0     01 BA 66 F0 | 	shl	local11, #1
0aef4     61 BB 02 F1 | 	add	local11, local15
0aef8     02 BA 66 F0 | 	shl	local11, #2
0aefc     03 00 00 FF 
0af00     00 64 86 F1 | 	sub	objptr, ##1536
0af04     32 BB 02 F1 | 	add	local11, objptr
0af08     08 BA 06 F1 | 	add	local11, #8
0af0c     5D 95 68 FC | 	wrlong	#74, local11
0af10     03 00 00 FF 
0af14     00 64 06 F1 | 	add	objptr, ##1536
0af18     32 C3 02 FB | 	rdlong	local15, objptr
0af1c     61 BB 02 F6 | 	mov	local11, local15
0af20     01 BA 66 F0 | 	shl	local11, #1
0af24     61 BB 02 F1 | 	add	local11, local15
0af28     02 BA 66 F0 | 	shl	local11, #2
0af2c     03 00 00 FF 
0af30     00 64 86 F1 | 	sub	objptr, ##1536
0af34     32 BB 02 F1 | 	add	local11, objptr
0af38     5D 01 68 FC | 	wrlong	#0, local11
0af3c     03 00 00 FF 
0af40     00 64 06 F1 | 	add	objptr, ##1536
0af44     32 B7 02 FB | 	rdlong	local09, objptr
0af48     01 B6 06 F1 | 	add	local09, #1
0af4c     32 B7 62 FC | 	wrlong	local09, objptr
0af50     4C 00 00 FF 
0af54     20 64 86 F1 | 	sub	objptr, ##38944
0af58                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af58                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af58                 | ' return 0
0af58     00 7A 06 F6 | 	mov	result1, #0
0af5c                 | LR__0947
0af5c     E7 F0 03 F6 | 	mov	ptra, fp
0af60     F2 00 A0 FD | 	call	#popregs_
0af64                 | _compile_for_ret
0af64     2D 00 64 FD | 	ret
0af68                 | 
0af68                 | ' 
0af68                 | ' '----- compile 'next' command. 
0af68                 | ' 
0af68                 | ' function compile_next() as ulong
0af68                 | _compile_next
0af68     04 CA 05 F6 | 	mov	COUNT_, #4
0af6c     E8 00 A0 FD | 	call	#pushregs_
0af70     38 00 00 FF 
0af74     E8 65 06 F1 | 	add	objptr, ##29160
0af78     32 93 02 FB | 	rdlong	arg01, objptr
0af7c     03 92 66 F0 | 	shl	arg01, #3
0af80     02 00 00 FF 
0af84     38 64 86 F1 | 	sub	objptr, ##1080
0af88     32 93 02 F1 | 	add	arg01, objptr
0af8c     49 A7 02 FB | 	rdlong	local01, arg01
0af90                 | ' 
0af90                 | ' varname$=lparts(ct).part$ 
0af90                 | ' if varnum=0 then return 35
0af90     04 64 86 F1 | 	sub	objptr, #4
0af94     32 93 0A FB | 	rdlong	arg01, objptr wz
0af98     36 00 00 FF 
0af9c     AC 65 86 F1 | 	sub	objptr, ##28076
0afa0     23 7A 06 A6 |  if_e	mov	result1, #35
0afa4     48 01 90 AD |  if_e	jmp	#LR__0952
0afa8     01 A8 66 F6 | 	neg	local02, #1
0afac                 | ' j=-1
0afac                 | ' for i=0 to varnum-1
0afac     00 AA 06 F6 | 	mov	local03, #0
0afb0     36 00 00 FF 
0afb4     AC 65 06 F1 | 	add	objptr, ##28076
0afb8     32 AD 02 FB | 	rdlong	local04, objptr
0afbc     36 00 00 FF 
0afc0     AC 65 86 F1 | 	sub	objptr, ##28076
0afc4                 | LR__0950
0afc4     56 AB 12 F2 | 	cmp	local03, local04 wc
0afc8     34 00 90 3D |  if_ae	jmp	#LR__0951
0afcc                 | '   if variables(i).name=varname$ then j=i : exit
0afcc     55 93 02 F6 | 	mov	arg01, local03
0afd0     04 92 66 F0 | 	shl	arg01, #4
0afd4     32 95 02 F6 | 	mov	arg02, objptr
0afd8     16 00 00 FF 
0afdc     9C 95 06 F1 | 	add	arg02, ##11676
0afe0     4A 93 02 F1 | 	add	arg01, arg02
0afe4     49 93 02 FB | 	rdlong	arg01, arg01
0afe8     53 95 02 F6 | 	mov	arg02, local01
0afec     34 9A B1 FD | 	call	#__system___string_cmp
0aff0     00 7A 0E F2 | 	cmp	result1, #0 wz
0aff4     55 A9 02 A6 |  if_e	mov	local02, local03
0aff8     01 AA 06 51 |  if_ne	add	local03, #1
0affc     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0b000                 | LR__0951
0b000                 | ' if j=-1 then return 35
0b000     FF FF 7F FF 
0b004     FF A9 0E F2 | 	cmp	local02, ##-1 wz
0b008     23 7A 06 A6 |  if_e	mov	result1, #35
0b00c     E0 00 90 AD |  if_e	jmp	#LR__0952
0b010     4C 00 00 FF 
0b014     20 64 06 F1 | 	add	objptr, ##38944
0b018     32 AD 02 FB | 	rdlong	local04, objptr
0b01c     56 AB 02 F6 | 	mov	local03, local04
0b020     01 AA 66 F0 | 	shl	local03, #1
0b024     56 AB 02 F1 | 	add	local03, local04
0b028     02 AA 66 F0 | 	shl	local03, #2
0b02c     03 00 00 FF 
0b030     00 64 86 F1 | 	sub	objptr, ##1536
0b034     32 AB 02 F1 | 	add	local03, objptr
0b038     08 AA 06 F1 | 	add	local03, #8
0b03c     55 39 68 FC | 	wrlong	#28, local03
0b040     03 00 00 FF 
0b044     00 64 06 F1 | 	add	objptr, ##1536
0b048     32 AD 02 FB | 	rdlong	local04, objptr
0b04c     56 AB 02 F6 | 	mov	local03, local04
0b050     01 AA 66 F0 | 	shl	local03, #1
0b054     56 AB 02 F1 | 	add	local03, local04
0b058     02 AA 66 F0 | 	shl	local03, #2
0b05c     03 00 00 FF 
0b060     00 64 86 F1 | 	sub	objptr, ##1536
0b064     32 AB 02 F1 | 	add	local03, objptr
0b068     55 A9 62 FC | 	wrlong	local02, local03
0b06c     03 00 00 FF 
0b070     00 64 06 F1 | 	add	objptr, ##1536
0b074     32 AD 02 FB | 	rdlong	local04, objptr
0b078     01 AC 06 F1 | 	add	local04, #1
0b07c     32 AD 62 FC | 	wrlong	local04, objptr
0b080     56 AB 02 F6 | 	mov	local03, local04
0b084     01 AA 66 F0 | 	shl	local03, #1
0b088     56 AB 02 F1 | 	add	local03, local04
0b08c     02 AA 66 F0 | 	shl	local03, #2
0b090     03 00 00 FF 
0b094     00 64 86 F1 | 	sub	objptr, ##1536
0b098     32 AB 02 F1 | 	add	local03, objptr
0b09c     08 AA 06 F1 | 	add	local03, #8
0b0a0     55 97 68 FC | 	wrlong	#75, local03
0b0a4     03 00 00 FF 
0b0a8     00 64 06 F1 | 	add	objptr, ##1536
0b0ac     32 AD 02 FB | 	rdlong	local04, objptr
0b0b0     56 AB 02 F6 | 	mov	local03, local04
0b0b4     01 AA 66 F0 | 	shl	local03, #1
0b0b8     56 AB 02 F1 | 	add	local03, local04
0b0bc     02 AA 66 F0 | 	shl	local03, #2
0b0c0     03 00 00 FF 
0b0c4     00 64 86 F1 | 	sub	objptr, ##1536
0b0c8     32 AB 02 F1 | 	add	local03, objptr
0b0cc     55 01 68 FC | 	wrlong	#0, local03
0b0d0     03 00 00 FF 
0b0d4     00 64 06 F1 | 	add	objptr, ##1536
0b0d8     32 AD 02 FB | 	rdlong	local04, objptr
0b0dc     01 AC 06 F1 | 	add	local04, #1
0b0e0     32 AD 62 FC | 	wrlong	local04, objptr
0b0e4     4C 00 00 FF 
0b0e8     20 64 86 F1 | 	sub	objptr, ##38944
0b0ec                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b0ec                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0ec                 | ' return 0
0b0ec     00 7A 06 F6 | 	mov	result1, #0
0b0f0                 | LR__0952
0b0f0     E7 F0 03 F6 | 	mov	ptra, fp
0b0f4     F2 00 A0 FD | 	call	#popregs_
0b0f8                 | _compile_next_ret
0b0f8     2D 00 64 FD | 	ret
0b0fc                 | 
0b0fc                 | ' 
0b0fc                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b0fc                 | ' 
0b0fc                 | ' function compile_gosub() as ulong
0b0fc                 | _compile_gosub
0b0fc     02 CA 05 F6 | 	mov	COUNT_, #2
0b100     E8 00 A0 FD | 	call	#pushregs_
0b104     4C 00 00 FF 
0b108     20 64 06 F1 | 	add	objptr, ##38944
0b10c     32 A7 02 FB | 	rdlong	local01, objptr
0b110     53 A9 02 F6 | 	mov	local02, local01
0b114     01 A8 66 F0 | 	shl	local02, #1
0b118     53 A9 02 F1 | 	add	local02, local01
0b11c     02 A8 66 F0 | 	shl	local02, #2
0b120     03 00 00 FF 
0b124     00 64 86 F1 | 	sub	objptr, ##1536
0b128     32 A9 02 F1 | 	add	local02, objptr
0b12c     08 A8 06 F1 | 	add	local02, #8
0b130     54 53 69 FC | 	wrlong	#169, local02
0b134     03 00 00 FF 
0b138     00 64 06 F1 | 	add	objptr, ##1536
0b13c     32 A9 02 FB | 	rdlong	local02, objptr
0b140     01 A8 06 F1 | 	add	local02, #1
0b144     32 A9 62 FC | 	wrlong	local02, objptr
0b148     4C 00 00 FF 
0b14c     20 64 86 F1 | 	sub	objptr, ##38944
0b150     0C 00 B0 FD | 	call	#_compile_goto
0b154                 | ' compiledline(lineptr).result_type=token_gosub
0b154                 | ' lineptr+=1
0b154                 | ' err=compile_goto()
0b154                 | ' return err
0b154     E7 F0 03 F6 | 	mov	ptra, fp
0b158     F2 00 A0 FD | 	call	#popregs_
0b15c                 | _compile_gosub_ret
0b15c     2D 00 64 FD | 	ret
0b160                 | 
0b160                 | ' 
0b160                 | ' '----- compile 'goto' 
0b160                 | ' 
0b160                 | ' function compile_goto() as ulong
0b160                 | _compile_goto
0b160     0A CA 05 F6 | 	mov	COUNT_, #10
0b164     E8 00 A0 FD | 	call	#pushregs_
0b168     34 F0 07 F1 | 	add	ptra, #52
0b16c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b16c     38 00 00 FF 
0b170     E8 65 06 F1 | 	add	objptr, ##29160
0b174     32 97 02 FB | 	rdlong	arg03, objptr
0b178     03 96 66 F0 | 	shl	arg03, #3
0b17c     02 00 00 FF 
0b180     38 64 86 F1 | 	sub	objptr, ##1080
0b184     32 97 02 F1 | 	add	arg03, objptr
0b188     04 96 06 F1 | 	add	arg03, #4
0b18c     4B 97 02 FB | 	rdlong	arg03, arg03
0b190     01 00 00 FF 
0b194     00 96 0E F2 | 	cmp	arg03, ##512 wz
0b198     36 00 00 FF 
0b19c     B0 65 86 F1 | 	sub	objptr, ##28080
0b1a0     64 02 90 5D |  if_ne	jmp	#LR__0963
0b1a4     38 00 00 FF 
0b1a8     E8 65 06 F1 | 	add	objptr, ##29160
0b1ac     32 97 02 FB | 	rdlong	arg03, objptr
0b1b0     01 96 06 F1 | 	add	arg03, #1
0b1b4     03 96 66 F0 | 	shl	arg03, #3
0b1b8     02 00 00 FF 
0b1bc     38 64 86 F1 | 	sub	objptr, ##1080
0b1c0     32 97 02 F1 | 	add	arg03, objptr
0b1c4     04 96 06 F1 | 	add	arg03, #4
0b1c8     4B 97 02 FB | 	rdlong	arg03, arg03
0b1cc     FE 97 0E F2 | 	cmp	arg03, #510 wz
0b1d0     36 00 00 FF 
0b1d4     B0 65 86 F1 | 	sub	objptr, ##28080
0b1d8     2C 02 90 5D |  if_ne	jmp	#LR__0963
0b1dc     38 00 00 FF 
0b1e0     E8 65 06 F1 | 	add	objptr, ##29160
0b1e4     32 97 02 FB | 	rdlong	arg03, objptr
0b1e8     03 96 66 F0 | 	shl	arg03, #3
0b1ec     02 00 00 FF 
0b1f0     38 64 86 F1 | 	sub	objptr, ##1080
0b1f4     32 97 02 F1 | 	add	arg03, objptr
0b1f8     4B 93 02 FB | 	rdlong	arg01, arg03
0b1fc     00 94 06 F6 | 	mov	arg02, #0
0b200     36 00 00 FF 
0b204     B0 65 86 F1 | 	sub	objptr, ##28080
0b208     44 C5 B1 FD | 	call	#__system____builtin_atoi
0b20c     3D AD 02 F6 | 	mov	local04, result1
0b210     4C 00 00 FF 
0b214     20 64 06 F1 | 	add	objptr, ##38944
0b218     32 AF 02 FB | 	rdlong	local05, objptr
0b21c     57 B1 02 F6 | 	mov	local06, local05
0b220     01 B0 66 F0 | 	shl	local06, #1
0b224     57 B1 02 F1 | 	add	local06, local05
0b228     02 B0 66 F0 | 	shl	local06, #2
0b22c     03 00 00 FF 
0b230     00 64 86 F1 | 	sub	objptr, ##1536
0b234     32 B3 02 F6 | 	mov	local07, objptr
0b238     32 B1 02 F1 | 	add	local06, objptr
0b23c     08 B0 06 F1 | 	add	local06, #8
0b240     58 9D 68 FC | 	wrlong	#78, local06
0b244     03 00 00 FF 
0b248     0C 64 06 F1 | 	add	objptr, ##1548
0b24c     32 B5 02 FB | 	rdlong	local08, objptr
0b250                 | '   gotoline=val%(lparts(ct).part$) 
0b250                 | '   compiledline(lineptr).result_type=token_fast_goto
0b250                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b250                 | '   do
0b250     40 00 00 FF 
0b254     60 65 86 F1 | 	sub	objptr, ##33120
0b258                 | LR__0960
0b258     E7 92 02 F6 | 	mov	arg01, fp
0b25c     10 92 06 F1 | 	add	arg01, #16
0b260     5A 95 02 F6 | 	mov	arg02, local08
0b264     18 96 06 F6 | 	mov	arg03, #24
0b268     1C 88 B1 FD | 	call	#_psram_spin2_read1
0b26c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b26c                 | '     if gotoheader(0)<>$FFFFFFFF then
0b26c     10 CE 05 F1 | 	add	fp, #16
0b270     E7 B0 02 FB | 	rdlong	local06, fp
0b274     10 CE 85 F1 | 	sub	fp, #16
0b278     FF FF 7F FF 
0b27c     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0b280     5A B7 02 56 |  if_ne	mov	local09, local08
0b284     24 CE 05 51 |  if_ne	add	fp, #36
0b288     E7 B4 02 5B |  if_ne	rdlong	local08, fp
0b28c     24 CE 85 51 |  if_ne	sub	fp, #36
0b290     24 CE 05 F1 | 	add	fp, #36
0b294     E7 B0 02 FB | 	rdlong	local06, fp
0b298     24 CE 85 F1 | 	sub	fp, #36
0b29c     FF FF 3F FF 
0b2a0     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
0b2a4     10 CE 05 51 |  if_ne	add	fp, #16
0b2a8     E7 AE 02 5B |  if_ne	rdlong	local05, fp
0b2ac     10 CE 85 51 |  if_ne	sub	fp, #16
0b2b0     FF FF 7F 5F 
0b2b4     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b2b8     10 CE 05 51 |  if_ne	add	fp, #16
0b2bc     57 B3 02 56 |  if_ne	mov	local07, local05
0b2c0     10 CE 85 51 |  if_ne	sub	fp, #16
0b2c4     56 B3 0A 52 |  if_ne	cmp	local07, local04 wz
0b2c8     8C FF 9F 5D |  if_ne	jmp	#LR__0960
0b2cc     0B 00 00 FF 
0b2d0     CC 64 86 F1 | 	sub	objptr, ##5836
0b2d4                 | '   if gotoheader(0)=gotoline then
0b2d4     10 CE 05 F1 | 	add	fp, #16
0b2d8     E7 B0 02 FB | 	rdlong	local06, fp
0b2dc     10 CE 85 F1 | 	sub	fp, #16
0b2e0     56 B1 0A F2 | 	cmp	local06, local04 wz
0b2e4     68 00 90 5D |  if_ne	jmp	#LR__0961
0b2e8     4C 00 00 FF 
0b2ec     20 64 06 F1 | 	add	objptr, ##38944
0b2f0     32 AF 02 FB | 	rdlong	local05, objptr
0b2f4     57 B1 02 F6 | 	mov	local06, local05
0b2f8     01 B0 66 F0 | 	shl	local06, #1
0b2fc     57 B1 02 F1 | 	add	local06, local05
0b300     02 B0 66 F0 | 	shl	local06, #2
0b304     03 00 00 FF 
0b308     00 64 86 F1 | 	sub	objptr, ##1536
0b30c     32 B1 02 F1 | 	add	local06, objptr
0b310     58 B7 62 FC | 	wrlong	local09, local06
0b314     03 00 00 FF 
0b318     00 64 06 F1 | 	add	objptr, ##1536
0b31c     32 AF 02 FB | 	rdlong	local05, objptr
0b320     57 B1 02 F6 | 	mov	local06, local05
0b324     01 B0 66 F0 | 	shl	local06, #1
0b328     57 B1 02 F1 | 	add	local06, local05
0b32c     02 B0 66 F0 | 	shl	local06, #2
0b330     03 00 00 FF 
0b334     00 64 86 F1 | 	sub	objptr, ##1536
0b338     32 B1 02 F1 | 	add	local06, objptr
0b33c     04 B0 06 F1 | 	add	local06, #4
0b340     58 AD 62 FC | 	wrlong	local04, local06
0b344     49 00 00 FF 
0b348     20 64 86 F1 | 	sub	objptr, ##37408
0b34c     98 00 90 FD | 	jmp	#LR__0962
0b350                 | LR__0961
0b350     4C 00 00 FF 
0b354     20 64 06 F1 | 	add	objptr, ##38944
0b358     32 AF 02 FB | 	rdlong	local05, objptr
0b35c     57 B1 02 F6 | 	mov	local06, local05
0b360     01 B0 66 F0 | 	shl	local06, #1
0b364     57 B1 02 F1 | 	add	local06, local05
0b368     02 B0 66 F0 | 	shl	local06, #2
0b36c     03 00 00 FF 
0b370     00 64 86 F1 | 	sub	objptr, ##1536
0b374     32 B1 02 F1 | 	add	local06, objptr
0b378     00 00 C0 FF 
0b37c     58 01 68 FC | 	wrlong	##-2147483648, local06
0b380     03 00 00 FF 
0b384     00 64 06 F1 | 	add	objptr, ##1536
0b388     32 AF 02 FB | 	rdlong	local05, objptr
0b38c     57 B1 02 F6 | 	mov	local06, local05
0b390     01 B0 66 F0 | 	shl	local06, #1
0b394     57 B1 02 F1 | 	add	local06, local05
0b398     02 B0 66 F0 | 	shl	local06, #2
0b39c     03 00 00 FF 
0b3a0     00 64 86 F1 | 	sub	objptr, ##1536
0b3a4     32 B1 02 F1 | 	add	local06, objptr
0b3a8     04 B0 06 F1 | 	add	local06, #4
0b3ac     58 AD 62 FC | 	wrlong	local04, local06
0b3b0     03 00 00 FF 
0b3b4     00 64 06 F1 | 	add	objptr, ##1536
0b3b8     32 AF 02 FB | 	rdlong	local05, objptr
0b3bc     57 B1 02 F6 | 	mov	local06, local05
0b3c0     01 B0 66 F0 | 	shl	local06, #1
0b3c4     57 B1 02 F1 | 	add	local06, local05
0b3c8     02 B0 66 F0 | 	shl	local06, #2
0b3cc     03 00 00 FF 
0b3d0     00 64 86 F1 | 	sub	objptr, ##1536
0b3d4     32 B1 02 F1 | 	add	local06, objptr
0b3d8     08 B0 06 F1 | 	add	local06, #8
0b3dc     58 A7 68 FC | 	wrlong	#83, local06
0b3e0     49 00 00 FF 
0b3e4     20 64 86 F1 | 	sub	objptr, ##37408
0b3e8                 | LR__0962
0b3e8     4C 00 00 FF 
0b3ec     20 64 06 F1 | 	add	objptr, ##38944
0b3f0     32 B7 02 FB | 	rdlong	local09, objptr
0b3f4     01 B6 06 F1 | 	add	local09, #1
0b3f8     32 B7 62 FC | 	wrlong	local09, objptr
0b3fc     4C 00 00 FF 
0b400     20 64 86 F1 | 	sub	objptr, ##38944
0b404     BC 00 90 FD | 	jmp	#LR__0964
0b408                 | LR__0963
0b408     4C 0A B0 FD | 	call	#_expr
0b40c     4F AA 06 F6 | 	mov	local03, #79
0b410     00 A6 06 F6 | 	mov	local01, #0
0b414     54 B9 02 F6 | 	mov	local10, local02
0b418     55 AF 02 F6 | 	mov	local05, local03
0b41c     4C 00 00 FF 
0b420     20 64 06 F1 | 	add	objptr, ##38944
0b424     32 A7 02 FB | 	rdlong	local01, objptr
0b428     53 B7 02 F6 | 	mov	local09, local01
0b42c     01 B6 66 F0 | 	shl	local09, #1
0b430     53 B7 02 F1 | 	add	local09, local01
0b434     02 B6 66 F0 | 	shl	local09, #2
0b438     03 00 00 FF 
0b43c     00 64 86 F1 | 	sub	objptr, ##1536
0b440     32 B7 02 F1 | 	add	local09, objptr
0b444     5B 01 68 FC | 	wrlong	#0, local09
0b448     03 00 00 FF 
0b44c     00 64 06 F1 | 	add	objptr, ##1536
0b450     32 A7 02 FB | 	rdlong	local01, objptr
0b454     53 B7 02 F6 | 	mov	local09, local01
0b458     01 B6 66 F0 | 	shl	local09, #1
0b45c     53 B7 02 F1 | 	add	local09, local01
0b460     02 B6 66 F0 | 	shl	local09, #2
0b464     03 00 00 FF 
0b468     00 64 86 F1 | 	sub	objptr, ##1536
0b46c     32 B7 02 F1 | 	add	local09, objptr
0b470     04 B6 06 F1 | 	add	local09, #4
0b474     5B B9 62 FC | 	wrlong	local10, local09
0b478     03 00 00 FF 
0b47c     00 64 06 F1 | 	add	objptr, ##1536
0b480     32 B9 02 FB | 	rdlong	local10, objptr
0b484     5C A7 02 F6 | 	mov	local01, local10
0b488     01 A6 66 F0 | 	shl	local01, #1
0b48c     5C A7 02 F1 | 	add	local01, local10
0b490     02 A6 66 F0 | 	shl	local01, #2
0b494     03 00 00 FF 
0b498     00 64 86 F1 | 	sub	objptr, ##1536
0b49c     32 A7 02 F1 | 	add	local01, objptr
0b4a0     08 A6 06 F1 | 	add	local01, #8
0b4a4     53 AF 62 FC | 	wrlong	local05, local01
0b4a8     03 00 00 FF 
0b4ac     00 64 06 F1 | 	add	objptr, ##1536
0b4b0     32 B9 02 FB | 	rdlong	local10, objptr
0b4b4     01 B8 06 F1 | 	add	local10, #1
0b4b8     32 B9 62 FC | 	wrlong	local10, objptr
0b4bc     4C 00 00 FF 
0b4c0     20 64 86 F1 | 	sub	objptr, ##38944
0b4c4                 | LR__0964
0b4c4                 | ' return 0
0b4c4     00 7A 06 F6 | 	mov	result1, #0
0b4c8     E7 F0 03 F6 | 	mov	ptra, fp
0b4cc     F2 00 A0 FD | 	call	#popregs_
0b4d0                 | _compile_goto_ret
0b4d0     2D 00 64 FD | 	ret
0b4d4                 | 
0b4d4                 | ' 
0b4d4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b4d4                 | ' 
0b4d4                 | ' function compile_on() as ulong
0b4d4                 | _compile_on
0b4d4     04 CA 05 F6 | 	mov	COUNT_, #4
0b4d8     E8 00 A0 FD | 	call	#pushregs_
0b4dc     78 09 B0 FD | 	call	#_expr
0b4e0     00 A6 06 F6 | 	mov	local01, #0
0b4e4     4C 00 00 FF 
0b4e8     20 64 06 F1 | 	add	objptr, ##38944
0b4ec     32 95 02 FB | 	rdlong	arg02, objptr
0b4f0     4A 93 02 F6 | 	mov	arg01, arg02
0b4f4     01 92 66 F0 | 	shl	arg01, #1
0b4f8     4A 93 02 F1 | 	add	arg01, arg02
0b4fc     02 92 66 F0 | 	shl	arg01, #2
0b500     03 00 00 FF 
0b504     00 64 86 F1 | 	sub	objptr, ##1536
0b508     32 93 02 F1 | 	add	arg01, objptr
0b50c     08 92 06 F1 | 	add	arg01, #8
0b510     49 83 69 FC | 	wrlong	#193, arg01
0b514     03 00 00 FF 
0b518     00 64 06 F1 | 	add	objptr, ##1536
0b51c     32 95 02 FB | 	rdlong	arg02, objptr
0b520     4A A9 02 F6 | 	mov	local02, arg02
0b524     01 94 06 F1 | 	add	arg02, #1
0b528     32 95 62 FC | 	wrlong	arg02, objptr
0b52c                 | ' expr()
0b52c                 | ' 'print lparts(ct).part$ 'ok
0b52c                 | ' numpar=0
0b52c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b52c                 | ' if lparts(ct).part$="goto" then
0b52c     13 00 00 FF 
0b530     38 64 86 F1 | 	sub	objptr, ##9784
0b534     32 95 02 FB | 	rdlong	arg02, objptr
0b538     03 94 66 F0 | 	shl	arg02, #3
0b53c     02 00 00 FF 
0b540     38 64 86 F1 | 	sub	objptr, ##1080
0b544     32 95 02 F1 | 	add	arg02, objptr
0b548     4A 93 02 FB | 	rdlong	arg01, arg02
0b54c     96 01 00 FF 
0b550     BA 94 06 F6 | 	mov	arg02, ##@LR__5936
0b554     36 00 00 FF 
0b558     B0 65 86 F1 | 	sub	objptr, ##28080
0b55c     C4 94 B1 FD | 	call	#__system___string_cmp
0b560     00 7A 0E F2 | 	cmp	result1, #0 wz
0b564     FC 01 90 5D |  if_ne	jmp	#LR__0975
0b568     38 00 00 FF 
0b56c     E8 65 06 F1 | 	add	objptr, ##29160
0b570     32 AB 02 FB | 	rdlong	local03, objptr
0b574     38 00 00 FF 
0b578     E8 65 86 F1 | 	sub	objptr, ##29160
0b57c     01 AA 06 F1 | 	add	local03, #1
0b580                 | '   i=ct+1
0b580                 | '   do
0b580                 | LR__0970
0b580                 | '     if lparts(i).token=token_decimal then
0b580     55 7B 02 F6 | 	mov	result1, local03
0b584     03 7A 66 F0 | 	shl	result1, #3
0b588     32 95 02 F6 | 	mov	arg02, objptr
0b58c     36 00 00 FF 
0b590     B0 95 06 F1 | 	add	arg02, ##28080
0b594     4A 7B 02 F1 | 	add	result1, arg02
0b598     04 7A 06 F1 | 	add	result1, #4
0b59c     3D 7B 02 FB | 	rdlong	result1, result1
0b5a0     01 00 00 FF 
0b5a4     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b5a8     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b5ac     4C 00 00 FF 
0b5b0     20 64 06 F1 | 	add	objptr, ##38944
0b5b4     32 7B 02 FB | 	rdlong	result1, objptr
0b5b8     3D 95 02 F6 | 	mov	arg02, result1
0b5bc     01 94 66 F0 | 	shl	arg02, #1
0b5c0     3D 95 02 F1 | 	add	arg02, result1
0b5c4     02 94 66 F0 | 	shl	arg02, #2
0b5c8     03 00 00 FF 
0b5cc     00 64 86 F1 | 	sub	objptr, ##1536
0b5d0     32 95 02 F1 | 	add	arg02, objptr
0b5d4     00 00 C0 FF 
0b5d8     4A 01 68 FC | 	wrlong	##-2147483648, arg02
0b5dc     03 00 00 FF 
0b5e0     00 64 06 F1 | 	add	objptr, ##1536
0b5e4     32 95 02 FB | 	rdlong	arg02, objptr
0b5e8     4A AD 02 F6 | 	mov	local04, arg02
0b5ec     01 AC 66 F0 | 	shl	local04, #1
0b5f0     4A AD 02 F1 | 	add	local04, arg02
0b5f4     02 AC 66 F0 | 	shl	local04, #2
0b5f8     03 00 00 FF 
0b5fc     00 64 86 F1 | 	sub	objptr, ##1536
0b600     32 AD 02 F1 | 	add	local04, objptr
0b604     55 95 02 F6 | 	mov	arg02, local03
0b608     03 94 66 F0 | 	shl	arg02, #3
0b60c     12 00 00 FF 
0b610     70 64 86 F1 | 	sub	objptr, ##9328
0b614     32 95 02 F1 | 	add	arg02, objptr
0b618     4A 93 02 FB | 	rdlong	arg01, arg02
0b61c     00 94 06 F6 | 	mov	arg02, #0
0b620     36 00 00 FF 
0b624     B0 65 86 F1 | 	sub	objptr, ##28080
0b628     24 C1 B1 FD | 	call	#__system____builtin_atoi
0b62c     04 AC 06 F1 | 	add	local04, #4
0b630     56 7B 62 FC | 	wrlong	result1, local04
0b634     4C 00 00 FF 
0b638     20 64 06 F1 | 	add	objptr, ##38944
0b63c     32 95 02 FB | 	rdlong	arg02, objptr
0b640     4A AD 02 F6 | 	mov	local04, arg02
0b644     01 AC 66 F0 | 	shl	local04, #1
0b648     4A AD 02 F1 | 	add	local04, arg02
0b64c     02 AC 66 F0 | 	shl	local04, #2
0b650     03 00 00 FF 
0b654     00 64 86 F1 | 	sub	objptr, ##1536
0b658     32 AD 02 F1 | 	add	local04, objptr
0b65c     08 AC 06 F1 | 	add	local04, #8
0b660     56 A7 68 FC | 	wrlong	#83, local04
0b664     03 00 00 FF 
0b668     00 64 06 F1 | 	add	objptr, ##1536
0b66c     32 AD 02 FB | 	rdlong	local04, objptr
0b670     01 AC 06 F1 | 	add	local04, #1
0b674     32 AD 62 FC | 	wrlong	local04, objptr
0b678     4C 00 00 FF 
0b67c     20 64 86 F1 | 	sub	objptr, ##38944
0b680     01 A6 06 F1 | 	add	local01, #1
0b684     08 00 90 FD | 	jmp	#LR__0972
0b688                 | LR__0971
0b688                 | '       return 17
0b688     11 7A 06 F6 | 	mov	result1, #17
0b68c     2C 04 90 FD | 	jmp	#LR__0985
0b690                 | LR__0972
0b690     01 AA 06 F1 | 	add	local03, #1
0b694                 | '     i+=1
0b694                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b694     55 93 02 F6 | 	mov	arg01, local03
0b698     03 92 66 F0 | 	shl	arg01, #3
0b69c     32 AD 02 F6 | 	mov	local04, objptr
0b6a0     36 00 00 FF 
0b6a4     B0 AD 06 F1 | 	add	local04, ##28080
0b6a8     56 93 02 F1 | 	add	arg01, local04
0b6ac     04 92 06 F1 | 	add	arg01, #4
0b6b0     49 93 02 FB | 	rdlong	arg01, arg01
0b6b4     11 92 0E F2 | 	cmp	arg01, #17 wz
0b6b8     2C 00 90 AD |  if_e	jmp	#LR__0973
0b6bc     55 93 02 F6 | 	mov	arg01, local03
0b6c0     03 92 66 F0 | 	shl	arg01, #3
0b6c4     32 AD 02 F6 | 	mov	local04, objptr
0b6c8     36 00 00 FF 
0b6cc     B0 AD 06 F1 | 	add	local04, ##28080
0b6d0     56 93 02 F1 | 	add	arg01, local04
0b6d4     04 92 06 F1 | 	add	arg01, #4
0b6d8     49 AD 02 FB | 	rdlong	local04, arg01
0b6dc     FE AD 0E F2 | 	cmp	local04, #510 wz
0b6e0     15 7A 06 56 |  if_ne	mov	result1, #21
0b6e4     D4 03 90 5D |  if_ne	jmp	#LR__0985
0b6e8                 | LR__0973
0b6e8                 | '     if lparts(i).token=token_end then exit loop
0b6e8     55 7B 02 F6 | 	mov	result1, local03
0b6ec     03 7A 66 F0 | 	shl	result1, #3
0b6f0     32 AD 02 F6 | 	mov	local04, objptr
0b6f4     36 00 00 FF 
0b6f8     B0 AD 06 F1 | 	add	local04, ##28080
0b6fc     56 7B 02 F1 | 	add	result1, local04
0b700     04 7A 06 F1 | 	add	result1, #4
0b704     3D 7B 02 FB | 	rdlong	result1, result1
0b708     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b70c     2C 00 90 AD |  if_e	jmp	#LR__0974
0b710     01 AA 06 F1 | 	add	local03, #1
0b714     55 7B 02 F6 | 	mov	result1, local03
0b718     03 7A 66 F0 | 	shl	result1, #3
0b71c     32 AD 02 F6 | 	mov	local04, objptr
0b720     36 00 00 FF 
0b724     B0 AD 06 F1 | 	add	local04, ##28080
0b728     56 7B 02 F1 | 	add	result1, local04
0b72c     04 7A 06 F1 | 	add	result1, #4
0b730     3D 7B 02 FB | 	rdlong	result1, result1
0b734     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b738     44 FE 9F 5D |  if_ne	jmp	#LR__0970
0b73c                 | LR__0974
0b73c     54 AB 02 F6 | 	mov	local03, local02
0b740     01 AA 66 F0 | 	shl	local03, #1
0b744     54 AB 02 F1 | 	add	local03, local02
0b748     02 AA 66 F0 | 	shl	local03, #2
0b74c     32 AD 02 F6 | 	mov	local04, objptr
0b750     49 00 00 FF 
0b754     20 AC 06 F1 | 	add	local04, ##37408
0b758     56 AB 02 F1 | 	add	local03, local04
0b75c     04 AA 06 F1 | 	add	local03, #4
0b760     55 03 68 FC | 	wrlong	#1, local03
0b764                 | LR__0975
0b764                 | ' 
0b764                 | ' if lparts(ct).part$="gosub" then
0b764     38 00 00 FF 
0b768     E8 65 06 F1 | 	add	objptr, ##29160
0b76c     32 AB 02 FB | 	rdlong	local03, objptr
0b770     03 AA 66 F0 | 	shl	local03, #3
0b774     02 00 00 FF 
0b778     38 64 86 F1 | 	sub	objptr, ##1080
0b77c     32 AB 02 F1 | 	add	local03, objptr
0b780     55 93 02 FB | 	rdlong	arg01, local03
0b784     96 01 00 FF 
0b788     BF 94 06 F6 | 	mov	arg02, ##@LR__5937
0b78c     36 00 00 FF 
0b790     B0 65 86 F1 | 	sub	objptr, ##28080
0b794     8C 92 B1 FD | 	call	#__system___string_cmp
0b798     00 7A 0E F2 | 	cmp	result1, #0 wz
0b79c     6C 02 90 5D |  if_ne	jmp	#LR__0981
0b7a0     38 00 00 FF 
0b7a4     E8 65 06 F1 | 	add	objptr, ##29160
0b7a8     32 AB 02 FB | 	rdlong	local03, objptr
0b7ac     38 00 00 FF 
0b7b0     E8 65 86 F1 | 	sub	objptr, ##29160
0b7b4     01 AA 06 F1 | 	add	local03, #1
0b7b8                 | '   i=ct+1
0b7b8                 | '   do
0b7b8                 | LR__0976
0b7b8                 | '     if lparts(i).token=token_decimal then
0b7b8     55 7B 02 F6 | 	mov	result1, local03
0b7bc     03 7A 66 F0 | 	shl	result1, #3
0b7c0     32 AD 02 F6 | 	mov	local04, objptr
0b7c4     36 00 00 FF 
0b7c8     B0 AD 06 F1 | 	add	local04, ##28080
0b7cc     56 7B 02 F1 | 	add	result1, local04
0b7d0     04 7A 06 F1 | 	add	result1, #4
0b7d4     3D 7B 02 FB | 	rdlong	result1, result1
0b7d8     01 00 00 FF 
0b7dc     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b7e0     4C 01 90 5D |  if_ne	jmp	#LR__0977
0b7e4     4C 00 00 FF 
0b7e8     20 64 06 F1 | 	add	objptr, ##38944
0b7ec     32 7B 02 FB | 	rdlong	result1, objptr
0b7f0     3D AD 02 F6 | 	mov	local04, result1
0b7f4     01 AC 66 F0 | 	shl	local04, #1
0b7f8     3D AD 02 F1 | 	add	local04, result1
0b7fc     02 AC 66 F0 | 	shl	local04, #2
0b800     03 00 00 FF 
0b804     00 64 86 F1 | 	sub	objptr, ##1536
0b808     32 AD 02 F1 | 	add	local04, objptr
0b80c     08 AC 06 F1 | 	add	local04, #8
0b810     56 53 69 FC | 	wrlong	#169, local04
0b814     03 00 00 FF 
0b818     00 64 06 F1 | 	add	objptr, ##1536
0b81c     32 7B 02 FB | 	rdlong	result1, objptr
0b820     01 7A 06 F1 | 	add	result1, #1
0b824     32 7B 62 FC | 	wrlong	result1, objptr
0b828     3D AD 02 F6 | 	mov	local04, result1
0b82c     01 AC 66 F0 | 	shl	local04, #1
0b830     3D AD 02 F1 | 	add	local04, result1
0b834     02 AC 66 F0 | 	shl	local04, #2
0b838     03 00 00 FF 
0b83c     00 64 86 F1 | 	sub	objptr, ##1536
0b840     32 AD 02 F1 | 	add	local04, objptr
0b844     00 00 C0 FF 
0b848     56 01 68 FC | 	wrlong	##-2147483648, local04
0b84c     03 00 00 FF 
0b850     00 64 06 F1 | 	add	objptr, ##1536
0b854     32 7B 02 FB | 	rdlong	result1, objptr
0b858     3D AD 02 F6 | 	mov	local04, result1
0b85c     01 AC 66 F0 | 	shl	local04, #1
0b860     3D AD 02 F1 | 	add	local04, result1
0b864     02 AC 66 F0 | 	shl	local04, #2
0b868     03 00 00 FF 
0b86c     00 64 86 F1 | 	sub	objptr, ##1536
0b870     32 AD 02 F1 | 	add	local04, objptr
0b874     55 93 02 F6 | 	mov	arg01, local03
0b878     03 92 66 F0 | 	shl	arg01, #3
0b87c     12 00 00 FF 
0b880     70 64 86 F1 | 	sub	objptr, ##9328
0b884     32 93 02 F1 | 	add	arg01, objptr
0b888     49 93 02 FB | 	rdlong	arg01, arg01
0b88c     00 94 06 F6 | 	mov	arg02, #0
0b890     36 00 00 FF 
0b894     B0 65 86 F1 | 	sub	objptr, ##28080
0b898     B4 BE B1 FD | 	call	#__system____builtin_atoi
0b89c     04 AC 06 F1 | 	add	local04, #4
0b8a0     56 7B 62 FC | 	wrlong	result1, local04
0b8a4     4C 00 00 FF 
0b8a8     20 64 06 F1 | 	add	objptr, ##38944
0b8ac     32 93 02 FB | 	rdlong	arg01, objptr
0b8b0     49 AD 02 F6 | 	mov	local04, arg01
0b8b4     01 AC 66 F0 | 	shl	local04, #1
0b8b8     49 AD 02 F1 | 	add	local04, arg01
0b8bc     02 AC 66 F0 | 	shl	local04, #2
0b8c0     03 00 00 FF 
0b8c4     00 64 86 F1 | 	sub	objptr, ##1536
0b8c8     32 AD 02 F1 | 	add	local04, objptr
0b8cc     08 AC 06 F1 | 	add	local04, #8
0b8d0     56 A7 68 FC | 	wrlong	#83, local04
0b8d4     03 00 00 FF 
0b8d8     00 64 06 F1 | 	add	objptr, ##1536
0b8dc     32 93 02 FB | 	rdlong	arg01, objptr
0b8e0     01 92 06 F1 | 	add	arg01, #1
0b8e4     32 93 62 FC | 	wrlong	arg01, objptr
0b8e8     01 A6 06 F1 | 	add	local01, #1
0b8ec     49 AD 02 F6 | 	mov	local04, arg01
0b8f0     01 AC 66 F0 | 	shl	local04, #1
0b8f4     49 AD 02 F1 | 	add	local04, arg01
0b8f8     02 AC 66 F0 | 	shl	local04, #2
0b8fc     03 00 00 FF 
0b900     00 64 86 F1 | 	sub	objptr, ##1536
0b904     32 AD 02 F1 | 	add	local04, objptr
0b908     08 AC 06 F1 | 	add	local04, #8
0b90c     56 5B 68 FC | 	wrlong	#45, local04
0b910     03 00 00 FF 
0b914     00 64 06 F1 | 	add	objptr, ##1536
0b918     32 AD 02 FB | 	rdlong	local04, objptr
0b91c     01 AC 06 F1 | 	add	local04, #1
0b920     32 AD 62 FC | 	wrlong	local04, objptr
0b924     4C 00 00 FF 
0b928     20 64 86 F1 | 	sub	objptr, ##38944
0b92c     08 00 90 FD | 	jmp	#LR__0978
0b930                 | LR__0977
0b930                 | '       return 17
0b930     11 7A 06 F6 | 	mov	result1, #17
0b934     84 01 90 FD | 	jmp	#LR__0985
0b938                 | LR__0978
0b938     01 AA 06 F1 | 	add	local03, #1
0b93c                 | '     i+=1
0b93c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b93c     55 93 02 F6 | 	mov	arg01, local03
0b940     03 92 66 F0 | 	shl	arg01, #3
0b944     32 AD 02 F6 | 	mov	local04, objptr
0b948     36 00 00 FF 
0b94c     B0 AD 06 F1 | 	add	local04, ##28080
0b950     56 93 02 F1 | 	add	arg01, local04
0b954     04 92 06 F1 | 	add	arg01, #4
0b958     49 93 02 FB | 	rdlong	arg01, arg01
0b95c     11 92 0E F2 | 	cmp	arg01, #17 wz
0b960     2C 00 90 AD |  if_e	jmp	#LR__0979
0b964     55 93 02 F6 | 	mov	arg01, local03
0b968     03 92 66 F0 | 	shl	arg01, #3
0b96c     32 AD 02 F6 | 	mov	local04, objptr
0b970     36 00 00 FF 
0b974     B0 AD 06 F1 | 	add	local04, ##28080
0b978     56 93 02 F1 | 	add	arg01, local04
0b97c     04 92 06 F1 | 	add	arg01, #4
0b980     49 93 02 FB | 	rdlong	arg01, arg01
0b984     FE 93 0E F2 | 	cmp	arg01, #510 wz
0b988     15 7A 06 56 |  if_ne	mov	result1, #21
0b98c     2C 01 90 5D |  if_ne	jmp	#LR__0985
0b990                 | LR__0979
0b990                 | '     if lparts(i).token=token_end then exit loop
0b990     55 7B 02 F6 | 	mov	result1, local03
0b994     03 7A 66 F0 | 	shl	result1, #3
0b998     32 AD 02 F6 | 	mov	local04, objptr
0b99c     36 00 00 FF 
0b9a0     B0 AD 06 F1 | 	add	local04, ##28080
0b9a4     56 7B 02 F1 | 	add	result1, local04
0b9a8     04 7A 06 F1 | 	add	result1, #4
0b9ac     3D 7B 02 FB | 	rdlong	result1, result1
0b9b0     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9b4     2C 00 90 AD |  if_e	jmp	#LR__0980
0b9b8     01 AA 06 F1 | 	add	local03, #1
0b9bc     55 7B 02 F6 | 	mov	result1, local03
0b9c0     03 7A 66 F0 | 	shl	result1, #3
0b9c4     32 AD 02 F6 | 	mov	local04, objptr
0b9c8     36 00 00 FF 
0b9cc     B0 AD 06 F1 | 	add	local04, ##28080
0b9d0     56 7B 02 F1 | 	add	result1, local04
0b9d4     04 7A 06 F1 | 	add	result1, #4
0b9d8     3D 7B 02 FB | 	rdlong	result1, result1
0b9dc     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9e0     D4 FD 9F 5D |  if_ne	jmp	#LR__0976
0b9e4                 | LR__0980
0b9e4     54 AB 02 F6 | 	mov	local03, local02
0b9e8     01 AA 66 F0 | 	shl	local03, #1
0b9ec     54 AB 02 F1 | 	add	local03, local02
0b9f0     02 AA 66 F0 | 	shl	local03, #2
0b9f4     32 AD 02 F6 | 	mov	local04, objptr
0b9f8     49 00 00 FF 
0b9fc     20 AC 06 F1 | 	add	local04, ##37408
0ba00     56 AB 02 F1 | 	add	local03, local04
0ba04     04 AA 06 F1 | 	add	local03, #4
0ba08     55 07 68 FC | 	wrlong	#3, local03
0ba0c                 | LR__0981
0ba0c     54 AB 02 F6 | 	mov	local03, local02
0ba10     01 AA 66 F0 | 	shl	local03, #1
0ba14     54 AB 02 F1 | 	add	local03, local02
0ba18     02 AA 66 F0 | 	shl	local03, #2
0ba1c     49 00 00 FF 
0ba20     20 64 06 F1 | 	add	objptr, ##37408
0ba24     32 AB 02 F1 | 	add	local03, objptr
0ba28     55 A7 62 FC | 	wrlong	local01, local03
0ba2c                 | ' compiledline(onlineptr).result.uresult=numpar
0ba2c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba2c     03 00 00 FF 
0ba30     00 64 06 F1 | 	add	objptr, ##1536
0ba34     32 AB 02 FB | 	rdlong	local03, objptr
0ba38     4C 00 00 FF 
0ba3c     20 64 86 F1 | 	sub	objptr, ##38944
0ba40     D7 3A 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0ba44                 | LR__0982
0ba44     55 AD 02 F6 | 	mov	local04, local03
0ba48     01 AC 66 F0 | 	shl	local04, #1
0ba4c     55 AD 02 F1 | 	add	local04, local03
0ba50     02 AC 66 F0 | 	shl	local04, #2
0ba54     32 A7 02 F6 | 	mov	local01, objptr
0ba58     49 00 00 FF 
0ba5c     20 A6 06 F1 | 	add	local01, ##37408
0ba60     53 AD 02 F1 | 	add	local04, local01
0ba64     08 AC 06 F1 | 	add	local04, #8
0ba68     56 AD 02 FB | 	rdlong	local04, local04
0ba6c     2D AC 0E F2 | 	cmp	local04, #45 wz
0ba70     38 00 90 5D |  if_ne	jmp	#LR__0983
0ba74     55 AD 02 F6 | 	mov	local04, local03
0ba78     01 AC 66 F0 | 	shl	local04, #1
0ba7c     55 AD 02 F1 | 	add	local04, local03
0ba80     02 AC 66 F0 | 	shl	local04, #2
0ba84     49 00 00 FF 
0ba88     20 64 06 F1 | 	add	objptr, ##37408
0ba8c     32 AD 02 F1 | 	add	local04, objptr
0ba90     03 00 00 FF 
0ba94     00 64 06 F1 | 	add	objptr, ##1536
0ba98     32 A7 02 FB | 	rdlong	local01, objptr
0ba9c     4C 00 00 FF 
0baa0     20 64 86 F1 | 	sub	objptr, ##38944
0baa4     02 A6 86 F1 | 	sub	local01, #2
0baa8     56 A7 62 FC | 	wrlong	local01, local04
0baac                 | LR__0983
0baac     01 AA 86 F1 | 	sub	local03, #1
0bab0     54 AB 52 F2 | 	cmps	local03, local02 wc
0bab4     8C FF 9F 3D |  if_ae	jmp	#LR__0982
0bab8                 | LR__0984
0bab8                 | ' return 0
0bab8     00 7A 06 F6 | 	mov	result1, #0
0babc                 | LR__0985
0babc     E7 F0 03 F6 | 	mov	ptra, fp
0bac0     F2 00 A0 FD | 	call	#popregs_
0bac4                 | _compile_on_ret
0bac4     2D 00 64 FD | 	ret
0bac8                 | 
0bac8                 | ' 
0bac8                 | ' '----- A helper for compile_input and compile_read
0bac8                 | '  
0bac8                 | ' function getaddr() as ulong
0bac8                 | _getaddr
0bac8     0B CA 05 F6 | 	mov	COUNT_, #11
0bacc     E8 00 A0 FD | 	call	#pushregs_
0bad0     38 00 00 FF 
0bad4     E8 65 06 F1 | 	add	objptr, ##29160
0bad8     32 AD 02 FB | 	rdlong	local04, objptr
0badc     03 AC 66 F0 | 	shl	local04, #3
0bae0     02 00 00 FF 
0bae4     38 64 86 F1 | 	sub	objptr, ##1080
0bae8     32 AD 02 F1 | 	add	local04, objptr
0baec     56 AF 02 FB | 	rdlong	local05, local04
0baf0     01 B0 66 F6 | 	neg	local06, #1
0baf4                 | ' 
0baf4                 | ' varname$=lparts(ct).part$
0baf4                 | ' j=-1
0baf4                 | ' 
0baf4                 | ' for i=0 to varnum-1
0baf4     00 B2 06 F6 | 	mov	local07, #0
0baf8     04 64 86 F1 | 	sub	objptr, #4
0bafc     32 B5 02 FB | 	rdlong	local08, objptr
0bb00     36 00 00 FF 
0bb04     AC 65 86 F1 | 	sub	objptr, ##28076
0bb08                 | LR__0990
0bb08     5A B3 52 F2 | 	cmps	local07, local08 wc
0bb0c     34 00 90 3D |  if_ae	jmp	#LR__0991
0bb10                 | '   if variables(i).name=varname$ then j=i : exit
0bb10     59 AD 02 F6 | 	mov	local04, local07
0bb14     04 AC 66 F0 | 	shl	local04, #4
0bb18     32 95 02 F6 | 	mov	arg02, objptr
0bb1c     16 00 00 FF 
0bb20     9C 95 06 F1 | 	add	arg02, ##11676
0bb24     4A AD 02 F1 | 	add	local04, arg02
0bb28     56 93 02 FB | 	rdlong	arg01, local04
0bb2c     57 95 02 F6 | 	mov	arg02, local05
0bb30     F0 8E B1 FD | 	call	#__system___string_cmp
0bb34     00 7A 0E F2 | 	cmp	result1, #0 wz
0bb38     59 B1 02 A6 |  if_e	mov	local06, local07
0bb3c     01 B2 06 51 |  if_ne	add	local07, #1
0bb40     C4 FF 9F 5D |  if_ne	jmp	#LR__0990
0bb44                 | LR__0991
0bb44                 | ' if  j=-1 andalso varnum<maxvars then   
0bb44     FF FF 7F FF 
0bb48     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0bb4c     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bb50     36 00 00 FF 
0bb54     AC 65 06 F1 | 	add	objptr, ##28076
0bb58     32 B5 02 FB | 	rdlong	local08, objptr
0bb5c     36 00 00 FF 
0bb60     AC 65 86 F1 | 	sub	objptr, ##28076
0bb64     02 00 00 FF 
0bb68     00 B4 56 F2 | 	cmps	local08, ##1024 wc
0bb6c     88 00 90 3D |  if_ae	jmp	#LR__0992
0bb70     36 00 00 FF 
0bb74     AC 65 06 F1 | 	add	objptr, ##28076
0bb78     32 AD 02 FB | 	rdlong	local04, objptr
0bb7c     04 AC 66 F0 | 	shl	local04, #4
0bb80     20 00 00 FF 
0bb84     10 64 86 F1 | 	sub	objptr, ##16400
0bb88     32 AD 02 F1 | 	add	local04, objptr
0bb8c     56 AF 62 FC | 	wrlong	local05, local04
0bb90     20 00 00 FF 
0bb94     10 64 06 F1 | 	add	objptr, ##16400
0bb98     32 AD 02 FB | 	rdlong	local04, objptr
0bb9c     04 AC 66 F0 | 	shl	local04, #4
0bba0     20 00 00 FF 
0bba4     10 64 86 F1 | 	sub	objptr, ##16400
0bba8     32 AD 02 F1 | 	add	local04, objptr
0bbac     04 AC 06 F1 | 	add	local04, #4
0bbb0     56 01 68 FC | 	wrlong	#0, local04
0bbb4     20 00 00 FF 
0bbb8     10 64 06 F1 | 	add	objptr, ##16400
0bbbc     32 AD 02 FB | 	rdlong	local04, objptr
0bbc0     04 AC 66 F0 | 	shl	local04, #4
0bbc4     20 00 00 FF 
0bbc8     10 64 86 F1 | 	sub	objptr, ##16400
0bbcc     32 AD 02 F1 | 	add	local04, objptr
0bbd0     0C AC 06 F1 | 	add	local04, #12
0bbd4     56 39 68 FC | 	wrlong	#28, local04
0bbd8     20 00 00 FF 
0bbdc     10 64 06 F1 | 	add	objptr, ##16400
0bbe0     32 B5 02 FB | 	rdlong	local08, objptr
0bbe4     5A B1 02 F6 | 	mov	local06, local08
0bbe8     01 B4 06 F1 | 	add	local08, #1
0bbec     32 B5 62 FC | 	wrlong	local08, objptr
0bbf0     36 00 00 FF 
0bbf4     AC 65 86 F1 | 	sub	objptr, ##28076
0bbf8                 | LR__0992
0bbf8     00 B2 06 F6 | 	mov	local07, #0
0bbfc                 | ' numpar=0
0bbfc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bbfc     38 00 00 FF 
0bc00     E8 65 06 F1 | 	add	objptr, ##29160
0bc04     32 AD 02 FB | 	rdlong	local04, objptr
0bc08     01 AC 06 F1 | 	add	local04, #1
0bc0c     03 AC 66 F0 | 	shl	local04, #3
0bc10     02 00 00 FF 
0bc14     38 64 86 F1 | 	sub	objptr, ##1080
0bc18     32 AD 02 F1 | 	add	local04, objptr
0bc1c     04 AC 06 F1 | 	add	local04, #4
0bc20     56 B5 02 FB | 	rdlong	local08, local04
0bc24     15 B4 0E F2 | 	cmp	local08, #21 wz
0bc28     36 00 00 FF 
0bc2c     B0 65 86 F1 | 	sub	objptr, ##28080
0bc30     54 01 90 5D |  if_ne	jmp	#LR__0997
0bc34     38 00 00 FF 
0bc38     E8 65 06 F1 | 	add	objptr, ##29160
0bc3c     32 B7 02 FB | 	rdlong	local09, objptr
0bc40     01 B6 06 F1 | 	add	local09, #1
0bc44     32 B7 62 FC | 	wrlong	local09, objptr
0bc48     38 00 00 FF 
0bc4c     E8 65 86 F1 | 	sub	objptr, ##29160
0bc50                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc50                 | '   do
0bc50                 | LR__0993
0bc50     38 00 00 FF 
0bc54     E8 65 06 F1 | 	add	objptr, ##29160
0bc58     32 AD 02 FB | 	rdlong	local04, objptr
0bc5c     01 AC 06 F1 | 	add	local04, #1
0bc60     32 AD 62 FC | 	wrlong	local04, objptr
0bc64                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc64                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc64     03 AC 66 F0 | 	shl	local04, #3
0bc68     02 00 00 FF 
0bc6c     38 64 86 F1 | 	sub	objptr, ##1080
0bc70     32 AD 02 F1 | 	add	local04, objptr
0bc74     04 AC 06 F1 | 	add	local04, #4
0bc78     56 B7 02 FB | 	rdlong	local09, local04
0bc7c     15 B6 0E F2 | 	cmp	local09, #21 wz
0bc80     36 00 00 FF 
0bc84     B0 65 86 F1 | 	sub	objptr, ##28080
0bc88     44 00 90 5D |  if_ne	jmp	#LR__0994
0bc8c     38 00 00 FF 
0bc90     E8 65 06 F1 | 	add	objptr, ##29160
0bc94     32 B7 02 FB | 	rdlong	local09, objptr
0bc98     01 B6 06 F1 | 	add	local09, #1
0bc9c     32 B7 62 FC | 	wrlong	local09, objptr
0bca0     38 00 00 FF 
0bca4     E8 65 86 F1 | 	sub	objptr, ##29160
0bca8     AC 01 B0 FD | 	call	#_expr
0bcac     3D B9 02 F6 | 	mov	local10, result1
0bcb0     38 00 00 FF 
0bcb4     E8 65 06 F1 | 	add	objptr, ##29160
0bcb8     32 B7 02 FB | 	rdlong	local09, objptr
0bcbc     01 B6 06 F1 | 	add	local09, #1
0bcc0     32 B7 62 FC | 	wrlong	local09, objptr
0bcc4     38 00 00 FF 
0bcc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bccc     08 00 90 FD | 	jmp	#LR__0995
0bcd0                 | LR__0994
0bcd0     84 01 B0 FD | 	call	#_expr
0bcd4     3D B9 02 F6 | 	mov	local10, result1
0bcd8                 | LR__0995
0bcd8                 | '     if err>0 then return err
0bcd8     01 B8 56 F2 | 	cmps	local10, #1 wc
0bcdc     5C 7B 02 36 |  if_ae	mov	result1, local10
0bce0     68 01 90 3D |  if_ae	jmp	#LR__0998
0bce4     01 B2 06 F1 | 	add	local07, #1
0bce8     38 00 00 FF 
0bcec     E8 65 06 F1 | 	add	objptr, ##29160
0bcf0     32 AD 02 FB | 	rdlong	local04, objptr
0bcf4     03 AC 66 F0 | 	shl	local04, #3
0bcf8     02 00 00 FF 
0bcfc     38 64 86 F1 | 	sub	objptr, ##1080
0bd00     32 AD 02 F1 | 	add	local04, objptr
0bd04     04 AC 06 F1 | 	add	local04, #4
0bd08     56 B9 02 FB | 	rdlong	local10, local04
0bd0c     14 B8 0E F2 | 	cmp	local10, #20 wz
0bd10     36 00 00 FF 
0bd14     B0 65 86 F1 | 	sub	objptr, ##28080
0bd18     34 00 90 AD |  if_e	jmp	#LR__0996
0bd1c     38 00 00 FF 
0bd20     E8 65 06 F1 | 	add	objptr, ##29160
0bd24     32 B9 02 FB | 	rdlong	local10, objptr
0bd28     03 B8 66 F0 | 	shl	local10, #3
0bd2c     02 00 00 FF 
0bd30     38 64 86 F1 | 	sub	objptr, ##1080
0bd34     32 B9 02 F1 | 	add	local10, objptr
0bd38     04 B8 06 F1 | 	add	local10, #4
0bd3c     5C B9 02 FB | 	rdlong	local10, local10
0bd40     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd44     36 00 00 FF 
0bd48     B0 65 86 F1 | 	sub	objptr, ##28080
0bd4c     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bd50                 | LR__0996
0bd50                 | '     if lparts(ct).token=token_end then return 14
0bd50     38 00 00 FF 
0bd54     E8 65 06 F1 | 	add	objptr, ##29160
0bd58     32 AD 02 FB | 	rdlong	local04, objptr
0bd5c     03 AC 66 F0 | 	shl	local04, #3
0bd60     02 00 00 FF 
0bd64     38 64 86 F1 | 	sub	objptr, ##1080
0bd68     32 AD 02 F1 | 	add	local04, objptr
0bd6c     04 AC 06 F1 | 	add	local04, #4
0bd70     56 B9 02 FB | 	rdlong	local10, local04
0bd74     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd78     36 00 00 FF 
0bd7c     B0 65 86 F1 | 	sub	objptr, ##28080
0bd80     0E 7A 06 A6 |  if_e	mov	result1, #14
0bd84     C4 00 90 AD |  if_e	jmp	#LR__0998
0bd88                 | LR__0997
0bd88     59 A9 02 F6 | 	mov	local02, local07
0bd8c     12 AA 06 F6 | 	mov	local03, #18
0bd90     58 A7 02 F6 | 	mov	local01, local06
0bd94     53 B7 02 F6 | 	mov	local09, local01
0bd98     54 BB 02 F6 | 	mov	local11, local02
0bd9c     55 A7 02 F6 | 	mov	local01, local03
0bda0     4C 00 00 FF 
0bda4     20 64 06 F1 | 	add	objptr, ##38944
0bda8     32 B9 02 FB | 	rdlong	local10, objptr
0bdac     5C B3 02 F6 | 	mov	local07, local10
0bdb0     01 B2 66 F0 | 	shl	local07, #1
0bdb4     5C B3 02 F1 | 	add	local07, local10
0bdb8     02 B2 66 F0 | 	shl	local07, #2
0bdbc     03 00 00 FF 
0bdc0     00 64 86 F1 | 	sub	objptr, ##1536
0bdc4     32 B3 02 F1 | 	add	local07, objptr
0bdc8     59 B7 62 FC | 	wrlong	local09, local07
0bdcc     03 00 00 FF 
0bdd0     00 64 06 F1 | 	add	objptr, ##1536
0bdd4     32 B9 02 FB | 	rdlong	local10, objptr
0bdd8     5C B7 02 F6 | 	mov	local09, local10
0bddc     01 B6 66 F0 | 	shl	local09, #1
0bde0     5C B7 02 F1 | 	add	local09, local10
0bde4     02 B6 66 F0 | 	shl	local09, #2
0bde8     03 00 00 FF 
0bdec     00 64 86 F1 | 	sub	objptr, ##1536
0bdf0     32 B7 02 F1 | 	add	local09, objptr
0bdf4     04 B6 06 F1 | 	add	local09, #4
0bdf8     5B BB 62 FC | 	wrlong	local11, local09
0bdfc     03 00 00 FF 
0be00     00 64 06 F1 | 	add	objptr, ##1536
0be04     32 BB 02 FB | 	rdlong	local11, objptr
0be08     5D B9 02 F6 | 	mov	local10, local11
0be0c     01 B8 66 F0 | 	shl	local10, #1
0be10     5D B9 02 F1 | 	add	local10, local11
0be14     02 B8 66 F0 | 	shl	local10, #2
0be18     03 00 00 FF 
0be1c     00 64 86 F1 | 	sub	objptr, ##1536
0be20     32 B9 02 F1 | 	add	local10, objptr
0be24     08 B8 06 F1 | 	add	local10, #8
0be28     5C A7 62 FC | 	wrlong	local01, local10
0be2c     03 00 00 FF 
0be30     00 64 06 F1 | 	add	objptr, ##1536
0be34     32 B7 02 FB | 	rdlong	local09, objptr
0be38     01 B6 06 F1 | 	add	local09, #1
0be3c     32 B7 62 FC | 	wrlong	local09, objptr
0be40     4C 00 00 FF 
0be44     20 64 86 F1 | 	sub	objptr, ##38944
0be48                 | ' t2.result.twowords(1)=numpar
0be48                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be48                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be48                 | ' return 0
0be48     00 7A 06 F6 | 	mov	result1, #0
0be4c                 | LR__0998
0be4c     E7 F0 03 F6 | 	mov	ptra, fp
0be50     F2 00 A0 FD | 	call	#popregs_
0be54                 | _getaddr_ret
0be54     2D 00 64 FD | 	ret
0be58                 | 
0be58                 | ' 
0be58                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '--------------------------------------------- 
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '
0be58                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be58                 | ' '
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' function expr() as ulong 
0be58                 | _expr
0be58     07 CA 05 F6 | 	mov	COUNT_, #7
0be5c     E8 00 A0 FD | 	call	#pushregs_
0be60                 | _expr_enter
0be60     38 00 00 FF 
0be64     E8 65 06 F1 | 	add	objptr, ##29160
0be68     32 AD 02 FB | 	rdlong	local04, objptr
0be6c     03 AC 66 F0 | 	shl	local04, #3
0be70     02 00 00 FF 
0be74     38 64 86 F1 | 	sub	objptr, ##1080
0be78     32 AD 02 F1 | 	add	local04, objptr
0be7c     04 AC 06 F1 | 	add	local04, #4
0be80     56 AF 02 FB | 	rdlong	local05, local04
0be84                 | ' 
0be84                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0be84     FE AF 0E F2 | 	cmp	local05, #510 wz
0be88     36 00 00 FF 
0be8c     B0 65 86 F1 | 	sub	objptr, ##28080
0be90     C4 00 90 5D |  if_ne	jmp	#LR__1000
0be94     1D A6 06 F6 | 	mov	local01, #29
0be98     FF AA 06 F6 | 	mov	local03, #255
0be9c     53 B1 02 F6 | 	mov	local06, local01
0bea0     54 B3 02 F6 | 	mov	local07, local02
0bea4     55 A7 02 F6 | 	mov	local01, local03
0bea8     4C 00 00 FF 
0beac     20 64 06 F1 | 	add	objptr, ##38944
0beb0     32 AF 02 FB | 	rdlong	local05, objptr
0beb4     57 AD 02 F6 | 	mov	local04, local05
0beb8     01 AC 66 F0 | 	shl	local04, #1
0bebc     57 AD 02 F1 | 	add	local04, local05
0bec0     02 AC 66 F0 | 	shl	local04, #2
0bec4     03 00 00 FF 
0bec8     00 64 86 F1 | 	sub	objptr, ##1536
0becc     32 AD 02 F1 | 	add	local04, objptr
0bed0     56 B1 62 FC | 	wrlong	local06, local04
0bed4     03 00 00 FF 
0bed8     00 64 06 F1 | 	add	objptr, ##1536
0bedc     32 B1 02 FB | 	rdlong	local06, objptr
0bee0     58 AF 02 F6 | 	mov	local05, local06
0bee4     01 AE 66 F0 | 	shl	local05, #1
0bee8     58 AF 02 F1 | 	add	local05, local06
0beec     02 AE 66 F0 | 	shl	local05, #2
0bef0     03 00 00 FF 
0bef4     00 64 86 F1 | 	sub	objptr, ##1536
0bef8     32 AF 02 F1 | 	add	local05, objptr
0befc     04 AE 06 F1 | 	add	local05, #4
0bf00     57 B3 62 FC | 	wrlong	local07, local05
0bf04     03 00 00 FF 
0bf08     00 64 06 F1 | 	add	objptr, ##1536
0bf0c     32 B3 02 FB | 	rdlong	local07, objptr
0bf10     59 B1 02 F6 | 	mov	local06, local07
0bf14     01 B0 66 F0 | 	shl	local06, #1
0bf18     59 B1 02 F1 | 	add	local06, local07
0bf1c     02 B0 66 F0 | 	shl	local06, #2
0bf20     03 00 00 FF 
0bf24     00 64 86 F1 | 	sub	objptr, ##1536
0bf28     32 B1 02 F1 | 	add	local06, objptr
0bf2c     08 B0 06 F1 | 	add	local06, #8
0bf30     58 A7 62 FC | 	wrlong	local01, local06
0bf34     03 00 00 FF 
0bf38     00 64 06 F1 | 	add	objptr, ##1536
0bf3c     32 B1 02 FB | 	rdlong	local06, objptr
0bf40     01 B0 06 F1 | 	add	local06, #1
0bf44     32 B1 62 FC | 	wrlong	local06, objptr
0bf48     4C 00 00 FF 
0bf4c     20 64 86 F1 | 	sub	objptr, ##38944
0bf50     1D 7A 06 F6 | 	mov	result1, #29
0bf54     64 01 90 FD | 	jmp	#LR__1003
0bf58                 | LR__1000
0bf58     00 A6 06 F6 | 	mov	local01, #0
0bf5c     68 01 B0 FD | 	call	#_addsub
0bf60                 | ' t3.result.uresult=0
0bf60                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf60                 | ' if err>0 then return err
0bf60     01 7A 16 F2 | 	cmp	result1, #1 wc
0bf64     54 01 90 3D |  if_ae	jmp	#LR__1003
0bf68     38 00 00 FF 
0bf6c     E8 65 06 F1 | 	add	objptr, ##29160
0bf70     32 AD 02 FB | 	rdlong	local04, objptr
0bf74     03 AC 66 F0 | 	shl	local04, #3
0bf78     02 00 00 FF 
0bf7c     38 64 86 F1 | 	sub	objptr, ##1080
0bf80     32 AD 02 F1 | 	add	local04, objptr
0bf84     04 AC 06 F1 | 	add	local04, #4
0bf88     56 AF 02 FB | 	rdlong	local05, local04
0bf8c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bf8c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bf8c     36 00 00 FF 
0bf90     B0 65 86 F1 | 	sub	objptr, ##28080
0bf94                 | LR__1001
0bf94     1B AE 0E F2 | 	cmp	local05, #27 wz
0bf98     0F AE 0E 52 |  if_ne	cmp	local05, #15 wz
0bf9c     10 AE 0E 52 |  if_ne	cmp	local05, #16 wz
0bfa0     27 AE 0E 52 |  if_ne	cmp	local05, #39 wz
0bfa4     26 AE 0E 52 |  if_ne	cmp	local05, #38 wz
0bfa8     2A AE 0E 52 |  if_ne	cmp	local05, #42 wz
0bfac     08 01 90 5D |  if_ne	jmp	#LR__1002
0bfb0     38 00 00 FF 
0bfb4     E8 65 06 F1 | 	add	objptr, ##29160
0bfb8     32 B1 02 FB | 	rdlong	local06, objptr
0bfbc     01 B0 06 F1 | 	add	local06, #1
0bfc0     32 B1 62 FC | 	wrlong	local06, objptr
0bfc4     38 00 00 FF 
0bfc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bfcc     F8 00 B0 FD | 	call	#_addsub
0bfd0                 | '   ct+=1
0bfd0                 | '   err=addsub() : if err>0 then return err
0bfd0     01 7A 16 F2 | 	cmp	result1, #1 wc
0bfd4     E4 00 90 3D |  if_ae	jmp	#LR__1003
0bfd8     57 AB 02 F6 | 	mov	local03, local05
0bfdc     53 B1 02 F6 | 	mov	local06, local01
0bfe0     54 B3 02 F6 | 	mov	local07, local02
0bfe4     55 AF 02 F6 | 	mov	local05, local03
0bfe8     4C 00 00 FF 
0bfec     20 64 06 F1 | 	add	objptr, ##38944
0bff0     32 AD 02 FB | 	rdlong	local04, objptr
0bff4     56 7B 02 F6 | 	mov	result1, local04
0bff8     01 7A 66 F0 | 	shl	result1, #1
0bffc     56 7B 02 F1 | 	add	result1, local04
0c000     02 7A 66 F0 | 	shl	result1, #2
0c004     03 00 00 FF 
0c008     00 64 86 F1 | 	sub	objptr, ##1536
0c00c     32 7B 02 F1 | 	add	result1, objptr
0c010     3D B1 62 FC | 	wrlong	local06, result1
0c014     03 00 00 FF 
0c018     00 64 06 F1 | 	add	objptr, ##1536
0c01c     32 B1 02 FB | 	rdlong	local06, objptr
0c020     58 AD 02 F6 | 	mov	local04, local06
0c024     01 AC 66 F0 | 	shl	local04, #1
0c028     58 AD 02 F1 | 	add	local04, local06
0c02c     02 AC 66 F0 | 	shl	local04, #2
0c030     03 00 00 FF 
0c034     00 64 86 F1 | 	sub	objptr, ##1536
0c038     32 AD 02 F1 | 	add	local04, objptr
0c03c     04 AC 06 F1 | 	add	local04, #4
0c040     56 B3 62 FC | 	wrlong	local07, local04
0c044     03 00 00 FF 
0c048     00 64 06 F1 | 	add	objptr, ##1536
0c04c     32 B3 02 FB | 	rdlong	local07, objptr
0c050     59 B1 02 F6 | 	mov	local06, local07
0c054     01 B0 66 F0 | 	shl	local06, #1
0c058     59 B1 02 F1 | 	add	local06, local07
0c05c     02 B0 66 F0 | 	shl	local06, #2
0c060     03 00 00 FF 
0c064     00 64 86 F1 | 	sub	objptr, ##1536
0c068     32 B1 02 F1 | 	add	local06, objptr
0c06c     08 B0 06 F1 | 	add	local06, #8
0c070     58 AF 62 FC | 	wrlong	local05, local06
0c074     03 00 00 FF 
0c078     00 64 06 F1 | 	add	objptr, ##1536
0c07c     32 B1 02 FB | 	rdlong	local06, objptr
0c080     01 B0 06 F1 | 	add	local06, #1
0c084     32 B1 62 FC | 	wrlong	local06, objptr
0c088     13 00 00 FF 
0c08c     38 64 86 F1 | 	sub	objptr, ##9784
0c090     32 AD 02 FB | 	rdlong	local04, objptr
0c094     03 AC 66 F0 | 	shl	local04, #3
0c098     02 00 00 FF 
0c09c     38 64 86 F1 | 	sub	objptr, ##1080
0c0a0     32 AD 02 F1 | 	add	local04, objptr
0c0a4     04 AC 06 F1 | 	add	local04, #4
0c0a8     56 AF 02 FB | 	rdlong	local05, local04
0c0ac     36 00 00 FF 
0c0b0     B0 65 86 F1 | 	sub	objptr, ##28080
0c0b4     DC FE 9F FD | 	jmp	#LR__1001
0c0b8                 | LR__1002
0c0b8                 | ' return 0  
0c0b8     00 7A 06 F6 | 	mov	result1, #0
0c0bc                 | LR__1003
0c0bc     E7 F0 03 F6 | 	mov	ptra, fp
0c0c0     F2 00 A0 FD | 	call	#popregs_
0c0c4                 | _expr_ret
0c0c4     2D 00 64 FD | 	ret
0c0c8                 | 
0c0c8                 | ' 
0c0c8                 | ' ' Second level operators : add, sub, logic
0c0c8                 | ' 
0c0c8                 | ' function addsub() as ulong
0c0c8                 | _addsub
0c0c8     07 CA 05 F6 | 	mov	COUNT_, #7
0c0cc     E8 00 A0 FD | 	call	#pushregs_
0c0d0                 | _addsub_enter
0c0d0     00 A6 06 F6 | 	mov	local01, #0
0c0d4     60 01 B0 FD | 	call	#_muldiv
0c0d8                 | ' 
0c0d8                 | ' t3.result.uresult=0
0c0d8                 | ' err=muldiv() : if err>0 then return err           			 
0c0d8     01 7A 16 F2 | 	cmp	result1, #1 wc
0c0dc     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c0e0     38 00 00 FF 
0c0e4     E8 65 06 F1 | 	add	objptr, ##29160
0c0e8     32 AD 02 FB | 	rdlong	local04, objptr
0c0ec     03 AC 66 F0 | 	shl	local04, #3
0c0f0     02 00 00 FF 
0c0f4     38 64 86 F1 | 	sub	objptr, ##1080
0c0f8     32 AD 02 F1 | 	add	local04, objptr
0c0fc     04 AC 06 F1 | 	add	local04, #4
0c100     56 AF 02 FB | 	rdlong	local05, local04
0c104                 | ' op = lparts(ct).token				 
0c104                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c104     36 00 00 FF 
0c108     B0 65 86 F1 | 	sub	objptr, ##28080
0c10c                 | LR__1010
0c10c     01 AE 0E F2 | 	cmp	local05, #1 wz
0c110     02 AE 0E 52 |  if_ne	cmp	local05, #2 wz
0c114     07 AE 0E 52 |  if_ne	cmp	local05, #7 wz
0c118     03 AE 0E 52 |  if_ne	cmp	local05, #3 wz
0c11c     08 01 90 5D |  if_ne	jmp	#LR__1011
0c120     38 00 00 FF 
0c124     E8 65 06 F1 | 	add	objptr, ##29160
0c128     32 AD 02 FB | 	rdlong	local04, objptr
0c12c     01 AC 06 F1 | 	add	local04, #1
0c130     32 AD 62 FC | 	wrlong	local04, objptr
0c134     38 00 00 FF 
0c138     E8 65 86 F1 | 	sub	objptr, ##29160
0c13c     F8 00 B0 FD | 	call	#_muldiv
0c140                 | '   ct+=1
0c140                 | '   err=muldiv() : if err>0 then return err   
0c140     01 7A 16 F2 | 	cmp	result1, #1 wc
0c144     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c148     57 AB 02 F6 | 	mov	local03, local05
0c14c     53 B1 02 F6 | 	mov	local06, local01
0c150     54 B3 02 F6 | 	mov	local07, local02
0c154     55 AF 02 F6 | 	mov	local05, local03
0c158     4C 00 00 FF 
0c15c     20 64 06 F1 | 	add	objptr, ##38944
0c160     32 AD 02 FB | 	rdlong	local04, objptr
0c164     56 7B 02 F6 | 	mov	result1, local04
0c168     01 7A 66 F0 | 	shl	result1, #1
0c16c     56 7B 02 F1 | 	add	result1, local04
0c170     02 7A 66 F0 | 	shl	result1, #2
0c174     03 00 00 FF 
0c178     00 64 86 F1 | 	sub	objptr, ##1536
0c17c     32 7B 02 F1 | 	add	result1, objptr
0c180     3D B1 62 FC | 	wrlong	local06, result1
0c184     03 00 00 FF 
0c188     00 64 06 F1 | 	add	objptr, ##1536
0c18c     32 B1 02 FB | 	rdlong	local06, objptr
0c190     58 AD 02 F6 | 	mov	local04, local06
0c194     01 AC 66 F0 | 	shl	local04, #1
0c198     58 AD 02 F1 | 	add	local04, local06
0c19c     02 AC 66 F0 | 	shl	local04, #2
0c1a0     03 00 00 FF 
0c1a4     00 64 86 F1 | 	sub	objptr, ##1536
0c1a8     32 AD 02 F1 | 	add	local04, objptr
0c1ac     04 AC 06 F1 | 	add	local04, #4
0c1b0     56 B3 62 FC | 	wrlong	local07, local04
0c1b4     03 00 00 FF 
0c1b8     00 64 06 F1 | 	add	objptr, ##1536
0c1bc     32 B3 02 FB | 	rdlong	local07, objptr
0c1c0     59 B1 02 F6 | 	mov	local06, local07
0c1c4     01 B0 66 F0 | 	shl	local06, #1
0c1c8     59 B1 02 F1 | 	add	local06, local07
0c1cc     02 B0 66 F0 | 	shl	local06, #2
0c1d0     03 00 00 FF 
0c1d4     00 64 86 F1 | 	sub	objptr, ##1536
0c1d8     32 B1 02 F1 | 	add	local06, objptr
0c1dc     08 B0 06 F1 | 	add	local06, #8
0c1e0     58 AF 62 FC | 	wrlong	local05, local06
0c1e4     03 00 00 FF 
0c1e8     00 64 06 F1 | 	add	objptr, ##1536
0c1ec     32 B1 02 FB | 	rdlong	local06, objptr
0c1f0     01 B0 06 F1 | 	add	local06, #1
0c1f4     32 B1 62 FC | 	wrlong	local06, objptr
0c1f8     13 00 00 FF 
0c1fc     38 64 86 F1 | 	sub	objptr, ##9784
0c200     32 AD 02 FB | 	rdlong	local04, objptr
0c204     03 AC 66 F0 | 	shl	local04, #3
0c208     02 00 00 FF 
0c20c     38 64 86 F1 | 	sub	objptr, ##1080
0c210     32 AD 02 F1 | 	add	local04, objptr
0c214     04 AC 06 F1 | 	add	local04, #4
0c218     56 AF 02 FB | 	rdlong	local05, local04
0c21c     36 00 00 FF 
0c220     B0 65 86 F1 | 	sub	objptr, ##28080
0c224     E4 FE 9F FD | 	jmp	#LR__1010
0c228                 | LR__1011
0c228                 | ' return 0
0c228     00 7A 06 F6 | 	mov	result1, #0
0c22c                 | LR__1012
0c22c     E7 F0 03 F6 | 	mov	ptra, fp
0c230     F2 00 A0 FD | 	call	#popregs_
0c234                 | _addsub_ret
0c234     2D 00 64 FD | 	ret
0c238                 | 
0c238                 | ' 
0c238                 | ' ' Third level operators : mul,div,shift,power
0c238                 | ' 
0c238                 | ' function muldiv() as ulong
0c238                 | _muldiv
0c238     07 CA 05 F6 | 	mov	COUNT_, #7
0c23c     E8 00 A0 FD | 	call	#pushregs_
0c240                 | _muldiv_enter
0c240     00 A6 06 F6 | 	mov	local01, #0
0c244     6C 01 B0 FD | 	call	#_getvalue
0c248                 | ' 
0c248                 | ' t3.result.uresult=0
0c248                 | ' err=getvalue() : if err>0 then return err     
0c248     01 7A 16 F2 | 	cmp	result1, #1 wc
0c24c     58 01 90 3D |  if_ae	jmp	#LR__1022
0c250     38 00 00 FF 
0c254     E8 65 06 F1 | 	add	objptr, ##29160
0c258     32 AD 02 FB | 	rdlong	local04, objptr
0c25c     03 AC 66 F0 | 	shl	local04, #3
0c260     02 00 00 FF 
0c264     38 64 86 F1 | 	sub	objptr, ##1080
0c268     32 AD 02 F1 | 	add	local04, objptr
0c26c     04 AC 06 F1 | 	add	local04, #4
0c270     56 AF 02 FB | 	rdlong	local05, local04
0c274                 | ' op = lparts(ct).token
0c274                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c274     36 00 00 FF 
0c278     B0 65 86 F1 | 	sub	objptr, ##28080
0c27c                 | LR__1020
0c27c     05 AE 0E F2 | 	cmp	local05, #5 wz
0c280     08 AE 0E 52 |  if_ne	cmp	local05, #8 wz
0c284     06 AE 0E 52 |  if_ne	cmp	local05, #6 wz
0c288     09 AE 0E 52 |  if_ne	cmp	local05, #9 wz
0c28c     0A AE 0E 52 |  if_ne	cmp	local05, #10 wz
0c290     0B AE 0E 52 |  if_ne	cmp	local05, #11 wz
0c294     0C AE 0E 52 |  if_ne	cmp	local05, #12 wz
0c298     08 01 90 5D |  if_ne	jmp	#LR__1021
0c29c     38 00 00 FF 
0c2a0     E8 65 06 F1 | 	add	objptr, ##29160
0c2a4     32 AD 02 FB | 	rdlong	local04, objptr
0c2a8     01 AC 06 F1 | 	add	local04, #1
0c2ac     32 AD 62 FC | 	wrlong	local04, objptr
0c2b0     38 00 00 FF 
0c2b4     E8 65 86 F1 | 	sub	objptr, ##29160
0c2b8     F8 00 B0 FD | 	call	#_getvalue
0c2bc                 | '   ct+=1
0c2bc                 | '   err=getvalue() :if err>0 then return err   
0c2bc     01 7A 16 F2 | 	cmp	result1, #1 wc
0c2c0     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c2c4     57 AB 02 F6 | 	mov	local03, local05
0c2c8     53 B1 02 F6 | 	mov	local06, local01
0c2cc     54 B3 02 F6 | 	mov	local07, local02
0c2d0     55 AF 02 F6 | 	mov	local05, local03
0c2d4     4C 00 00 FF 
0c2d8     20 64 06 F1 | 	add	objptr, ##38944
0c2dc     32 AD 02 FB | 	rdlong	local04, objptr
0c2e0     56 7B 02 F6 | 	mov	result1, local04
0c2e4     01 7A 66 F0 | 	shl	result1, #1
0c2e8     56 7B 02 F1 | 	add	result1, local04
0c2ec     02 7A 66 F0 | 	shl	result1, #2
0c2f0     03 00 00 FF 
0c2f4     00 64 86 F1 | 	sub	objptr, ##1536
0c2f8     32 7B 02 F1 | 	add	result1, objptr
0c2fc     3D B1 62 FC | 	wrlong	local06, result1
0c300     03 00 00 FF 
0c304     00 64 06 F1 | 	add	objptr, ##1536
0c308     32 B1 02 FB | 	rdlong	local06, objptr
0c30c     58 AD 02 F6 | 	mov	local04, local06
0c310     01 AC 66 F0 | 	shl	local04, #1
0c314     58 AD 02 F1 | 	add	local04, local06
0c318     02 AC 66 F0 | 	shl	local04, #2
0c31c     03 00 00 FF 
0c320     00 64 86 F1 | 	sub	objptr, ##1536
0c324     32 AD 02 F1 | 	add	local04, objptr
0c328     04 AC 06 F1 | 	add	local04, #4
0c32c     56 B3 62 FC | 	wrlong	local07, local04
0c330     03 00 00 FF 
0c334     00 64 06 F1 | 	add	objptr, ##1536
0c338     32 B3 02 FB | 	rdlong	local07, objptr
0c33c     59 B1 02 F6 | 	mov	local06, local07
0c340     01 B0 66 F0 | 	shl	local06, #1
0c344     59 B1 02 F1 | 	add	local06, local07
0c348     02 B0 66 F0 | 	shl	local06, #2
0c34c     03 00 00 FF 
0c350     00 64 86 F1 | 	sub	objptr, ##1536
0c354     32 B1 02 F1 | 	add	local06, objptr
0c358     08 B0 06 F1 | 	add	local06, #8
0c35c     58 AF 62 FC | 	wrlong	local05, local06
0c360     03 00 00 FF 
0c364     00 64 06 F1 | 	add	objptr, ##1536
0c368     32 B1 02 FB | 	rdlong	local06, objptr
0c36c     01 B0 06 F1 | 	add	local06, #1
0c370     32 B1 62 FC | 	wrlong	local06, objptr
0c374     13 00 00 FF 
0c378     38 64 86 F1 | 	sub	objptr, ##9784
0c37c     32 AD 02 FB | 	rdlong	local04, objptr
0c380     03 AC 66 F0 | 	shl	local04, #3
0c384     02 00 00 FF 
0c388     38 64 86 F1 | 	sub	objptr, ##1080
0c38c     32 AD 02 F1 | 	add	local04, objptr
0c390     04 AC 06 F1 | 	add	local04, #4
0c394     56 AF 02 FB | 	rdlong	local05, local04
0c398     36 00 00 FF 
0c39c     B0 65 86 F1 | 	sub	objptr, ##28080
0c3a0     D8 FE 9F FD | 	jmp	#LR__1020
0c3a4                 | LR__1021
0c3a4                 | ' return 0
0c3a4     00 7A 06 F6 | 	mov	result1, #0
0c3a8                 | LR__1022
0c3a8     E7 F0 03 F6 | 	mov	ptra, fp
0c3ac     F2 00 A0 FD | 	call	#popregs_
0c3b0                 | _muldiv_ret
0c3b0     2D 00 64 FD | 	ret
0c3b4                 | 
0c3b4                 | ' 
0c3b4                 | ' ' Get a value for operations
0c3b4                 | ' 
0c3b4                 | ' function getvalue()  as ulong
0c3b4                 | _getvalue
0c3b4     0B CA 05 F6 | 	mov	COUNT_, #11
0c3b8     E8 00 A0 FD | 	call	#pushregs_
0c3bc                 | _getvalue_enter
0c3bc     01 AC 06 F6 | 	mov	local04, #1
0c3c0     00 A6 06 F6 | 	mov	local01, #0
0c3c4     1D AA 06 F6 | 	mov	local03, #29
0c3c8     38 00 00 FF 
0c3cc     E8 65 06 F1 | 	add	objptr, ##29160
0c3d0     32 97 02 FB | 	rdlong	arg03, objptr
0c3d4     03 96 66 F0 | 	shl	arg03, #3
0c3d8     02 00 00 FF 
0c3dc     38 64 86 F1 | 	sub	objptr, ##1080
0c3e0     32 97 02 F1 | 	add	arg03, objptr
0c3e4     04 96 06 F1 | 	add	arg03, #4
0c3e8     4B AF 02 FB | 	rdlong	local05, arg03
0c3ec                 | ' 
0c3ec                 | ' m=1											' for negative numbers
0c3ec                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c3ec                 | ' op=lparts(ct).token
0c3ec                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c3ec     02 AE 0E F2 | 	cmp	local05, #2 wz
0c3f0     36 00 00 FF 
0c3f4     B0 65 86 F1 | 	sub	objptr, ##28080
0c3f8     38 00 90 5D |  if_ne	jmp	#LR__1030
0c3fc     01 AC 66 F6 | 	neg	local04, #1
0c400     38 00 00 FF 
0c404     E8 65 06 F1 | 	add	objptr, ##29160
0c408     32 AF 02 FB | 	rdlong	local05, objptr
0c40c     01 AE 06 F1 | 	add	local05, #1
0c410     32 AF 62 FC | 	wrlong	local05, objptr
0c414     03 AE 66 F0 | 	shl	local05, #3
0c418     02 00 00 FF 
0c41c     38 64 86 F1 | 	sub	objptr, ##1080
0c420     32 AF 02 F1 | 	add	local05, objptr
0c424     04 AE 06 F1 | 	add	local05, #4
0c428     57 AF 02 FB | 	rdlong	local05, local05
0c42c     36 00 00 FF 
0c430     B0 65 86 F1 | 	sub	objptr, ##28080
0c434                 | LR__1030
0c434                 | ' select case op
0c434     01 00 00 FF 
0c438     00 AE 0E F2 | 	cmp	local05, ##512 wz
0c43c     44 00 90 AD |  if_e	jmp	#LR__1031
0c440     01 00 00 FF 
0c444     01 AE 0E F2 | 	cmp	local05, ##513 wz
0c448     90 01 90 AD |  if_e	jmp	#LR__1034
0c44c     01 00 00 FF 
0c450     02 AE 0E F2 | 	cmp	local05, ##514 wz
0c454     44 04 90 AD |  if_e	jmp	#LR__1041
0c458     01 00 00 FF 
0c45c     03 AE 0E F2 | 	cmp	local05, ##515 wz
0c460     A8 05 90 AD |  if_e	jmp	#LR__1044
0c464     2C AE 0E F2 | 	cmp	local05, #44 wz
0c468     78 07 90 AD |  if_e	jmp	#LR__1049
0c46c     01 00 00 FF 
0c470     04 AE 0E F2 | 	cmp	local05, ##516 wz
0c474     70 08 90 AD |  if_e	jmp	#LR__1050
0c478     15 AE 0E F2 | 	cmp	local05, #21 wz
0c47c     98 08 90 AD |  if_e	jmp	#LR__1051
0c480     10 09 90 FD | 	jmp	#LR__1052
0c484                 | LR__1031
0c484                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c484     01 AC 0E F2 | 	cmp	local04, #1 wz
0c488     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c48c     38 00 00 FF 
0c490     E8 65 06 F1 | 	add	objptr, ##29160
0c494     32 AF 02 FB | 	rdlong	local05, objptr
0c498     03 AE 66 F0 | 	shl	local05, #3
0c49c     02 00 00 FF 
0c4a0     38 64 86 F1 | 	sub	objptr, ##1080
0c4a4     32 AF 02 F1 | 	add	local05, objptr
0c4a8     57 93 02 FB | 	rdlong	arg01, local05
0c4ac     00 94 06 F6 | 	mov	arg02, #0
0c4b0     36 00 00 FF 
0c4b4     B0 65 86 F1 | 	sub	objptr, ##28080
0c4b8     94 B2 B1 FD | 	call	#__system____builtin_atoi
0c4bc     3D AD 02 FD | 	qmul	local04, result1
0c4c0     18 A6 62 FD | 	getqx	local01
0c4c4     1C AA 06 F6 | 	mov	local03, #28
0c4c8                 | LR__1032
0c4c8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c4c8     FF FF 7F FF 
0c4cc     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c4d0     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c4d4     38 00 00 FF 
0c4d8     E8 65 06 F1 | 	add	objptr, ##29160
0c4dc     32 AF 02 FB | 	rdlong	local05, objptr
0c4e0     03 AE 66 F0 | 	shl	local05, #3
0c4e4     02 00 00 FF 
0c4e8     38 64 86 F1 | 	sub	objptr, ##1080
0c4ec     32 AF 02 F1 | 	add	local05, objptr
0c4f0     57 93 02 FB | 	rdlong	arg01, local05
0c4f4     00 94 06 F6 | 	mov	arg02, #0
0c4f8     36 00 00 FF 
0c4fc     B0 65 86 F1 | 	sub	objptr, ##28080
0c500     4C B2 B1 FD | 	call	#__system____builtin_atoi
0c504     3D AD 02 FD | 	qmul	local04, result1
0c508     18 A6 62 FD | 	getqx	local01
0c50c     1C AA 06 F6 | 	mov	local03, #28
0c510                 | LR__1033
0c510     53 B1 02 F6 | 	mov	local06, local01
0c514     54 B3 02 F6 | 	mov	local07, local02
0c518     55 AF 02 F6 | 	mov	local05, local03
0c51c     4C 00 00 FF 
0c520     20 64 06 F1 | 	add	objptr, ##38944
0c524     32 A7 02 FB | 	rdlong	local01, objptr
0c528     53 AD 02 F6 | 	mov	local04, local01
0c52c     01 AC 66 F0 | 	shl	local04, #1
0c530     53 AD 02 F1 | 	add	local04, local01
0c534     02 AC 66 F0 | 	shl	local04, #2
0c538     03 00 00 FF 
0c53c     00 64 86 F1 | 	sub	objptr, ##1536
0c540     32 AD 02 F1 | 	add	local04, objptr
0c544     56 B1 62 FC | 	wrlong	local06, local04
0c548     03 00 00 FF 
0c54c     00 64 06 F1 | 	add	objptr, ##1536
0c550     32 B1 02 FB | 	rdlong	local06, objptr
0c554     58 A7 02 F6 | 	mov	local01, local06
0c558     01 A6 66 F0 | 	shl	local01, #1
0c55c     58 A7 02 F1 | 	add	local01, local06
0c560     02 A6 66 F0 | 	shl	local01, #2
0c564     03 00 00 FF 
0c568     00 64 86 F1 | 	sub	objptr, ##1536
0c56c     32 A7 02 F1 | 	add	local01, objptr
0c570     04 A6 06 F1 | 	add	local01, #4
0c574     53 B3 62 FC | 	wrlong	local07, local01
0c578     03 00 00 FF 
0c57c     00 64 06 F1 | 	add	objptr, ##1536
0c580     32 B3 02 FB | 	rdlong	local07, objptr
0c584     59 B1 02 F6 | 	mov	local06, local07
0c588     01 B0 66 F0 | 	shl	local06, #1
0c58c     59 B1 02 F1 | 	add	local06, local07
0c590     02 B0 66 F0 | 	shl	local06, #2
0c594     03 00 00 FF 
0c598     00 64 86 F1 | 	sub	objptr, ##1536
0c59c     32 B1 02 F1 | 	add	local06, objptr
0c5a0     08 B0 06 F1 | 	add	local06, #8
0c5a4     58 AF 62 FC | 	wrlong	local05, local06
0c5a8     03 00 00 FF 
0c5ac     00 64 06 F1 | 	add	objptr, ##1536
0c5b0     32 B1 02 FB | 	rdlong	local06, objptr
0c5b4     01 B0 06 F1 | 	add	local06, #1
0c5b8     32 B1 62 FC | 	wrlong	local06, objptr
0c5bc     13 00 00 FF 
0c5c0     38 64 86 F1 | 	sub	objptr, ##9784
0c5c4     32 B1 02 FB | 	rdlong	local06, objptr
0c5c8     01 B0 06 F1 | 	add	local06, #1
0c5cc     32 B1 62 FC | 	wrlong	local06, objptr
0c5d0     38 00 00 FF 
0c5d4     E8 65 86 F1 | 	sub	objptr, ##29160
0c5d8     E4 07 90 FD | 	jmp	#LR__1053
0c5dc                 | LR__1034
0c5dc                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5dc     38 00 00 FF 
0c5e0     E8 65 06 F1 | 	add	objptr, ##29160
0c5e4     32 97 02 FB | 	rdlong	arg03, objptr
0c5e8     03 96 66 F0 | 	shl	arg03, #3
0c5ec     02 00 00 FF 
0c5f0     38 64 86 F1 | 	sub	objptr, ##1080
0c5f4     32 97 02 F1 | 	add	arg03, objptr
0c5f8     4B 93 02 FB | 	rdlong	arg01, arg03
0c5fc     01 94 06 F6 | 	mov	arg02, #1
0c600     36 00 00 FF 
0c604     B0 65 86 F1 | 	sub	objptr, ##28080
0c608     98 9C B1 FD | 	call	#__system__Left_S
0c60c     3D 93 02 F6 | 	mov	arg01, result1
0c610     96 01 00 FF 
0c614     C5 94 06 F6 | 	mov	arg02, ##@LR__5938
0c618     08 84 B1 FD | 	call	#__system___string_cmp
0c61c     00 7A 0E F2 | 	cmp	result1, #0 wz
0c620     94 00 90 5D |  if_ne	jmp	#LR__1037
0c624     38 00 00 FF 
0c628     E8 65 06 F1 | 	add	objptr, ##29160
0c62c     32 B3 02 FB | 	rdlong	local07, objptr
0c630     59 B1 02 F6 | 	mov	local06, local07
0c634     03 B0 66 F0 | 	shl	local06, #3
0c638     02 00 00 FF 
0c63c     38 64 86 F1 | 	sub	objptr, ##1080
0c640     32 B1 02 F1 | 	add	local06, objptr
0c644     96 01 00 FF 
0c648     C7 AE 06 F6 | 	mov	local05, ##@LR__5939
0c64c     03 B2 66 F0 | 	shl	local07, #3
0c650     32 B3 02 F1 | 	add	local07, objptr
0c654     59 B3 02 FB | 	rdlong	local07, local07
0c658     02 00 00 FF 
0c65c     38 64 06 F1 | 	add	objptr, ##1080
0c660     32 A7 02 FB | 	rdlong	local01, objptr
0c664     03 A6 66 F0 | 	shl	local01, #3
0c668     02 00 00 FF 
0c66c     38 64 86 F1 | 	sub	objptr, ##1080
0c670     32 A7 02 F1 | 	add	local01, objptr
0c674     53 93 02 FB | 	rdlong	arg01, local01
0c678     36 00 00 FF 
0c67c     B0 65 86 F1 | 	sub	objptr, ##28080
0c680     49 B5 02 F6 | 	mov	local08, arg01
0c684     D7 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c688                 | LR__1035
0c688     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c68c     01 B4 06 51 |  if_ne	add	local08, #1
0c690     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c694                 | LR__1036
0c694     49 B5 82 F1 | 	sub	local08, arg01
0c698     5A 95 02 F6 | 	mov	arg02, local08
0c69c     01 94 86 F1 | 	sub	arg02, #1
0c6a0     59 93 02 F6 | 	mov	arg01, local07
0c6a4     84 9C B1 FD | 	call	#__system__Right_S
0c6a8     3D 95 02 F6 | 	mov	arg02, result1
0c6ac     57 93 02 F6 | 	mov	arg01, local05
0c6b0     A4 83 B1 FD | 	call	#__system___string_concat
0c6b4     58 7B 62 FC | 	wrlong	result1, local06
0c6b8                 | LR__1037
0c6b8                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c6b8     38 00 00 FF 
0c6bc     E8 65 06 F1 | 	add	objptr, ##29160
0c6c0     32 97 02 FB | 	rdlong	arg03, objptr
0c6c4     03 96 66 F0 | 	shl	arg03, #3
0c6c8     02 00 00 FF 
0c6cc     38 64 86 F1 | 	sub	objptr, ##1080
0c6d0     32 97 02 F1 | 	add	arg03, objptr
0c6d4     4B 93 02 FB | 	rdlong	arg01, arg03
0c6d8     01 94 06 F6 | 	mov	arg02, #1
0c6dc     36 00 00 FF 
0c6e0     B0 65 86 F1 | 	sub	objptr, ##28080
0c6e4     BC 9B B1 FD | 	call	#__system__Left_S
0c6e8     3D 93 02 F6 | 	mov	arg01, result1
0c6ec     96 01 00 FF 
0c6f0     CA 94 06 F6 | 	mov	arg02, ##@LR__5940
0c6f4     2C 83 B1 FD | 	call	#__system___string_cmp
0c6f8     00 7A 0E F2 | 	cmp	result1, #0 wz
0c6fc     94 00 90 5D |  if_ne	jmp	#LR__1040
0c700     38 00 00 FF 
0c704     E8 65 06 F1 | 	add	objptr, ##29160
0c708     32 B3 02 FB | 	rdlong	local07, objptr
0c70c     59 B1 02 F6 | 	mov	local06, local07
0c710     03 B0 66 F0 | 	shl	local06, #3
0c714     02 00 00 FF 
0c718     38 64 86 F1 | 	sub	objptr, ##1080
0c71c     32 B1 02 F1 | 	add	local06, objptr
0c720     96 01 00 FF 
0c724     CC AE 06 F6 | 	mov	local05, ##@LR__5941
0c728     03 B2 66 F0 | 	shl	local07, #3
0c72c     32 B3 02 F1 | 	add	local07, objptr
0c730     59 B3 02 FB | 	rdlong	local07, local07
0c734     02 00 00 FF 
0c738     38 64 06 F1 | 	add	objptr, ##1080
0c73c     32 A7 02 FB | 	rdlong	local01, objptr
0c740     03 A6 66 F0 | 	shl	local01, #3
0c744     02 00 00 FF 
0c748     38 64 86 F1 | 	sub	objptr, ##1080
0c74c     32 A7 02 F1 | 	add	local01, objptr
0c750     53 93 02 FB | 	rdlong	arg01, local01
0c754     36 00 00 FF 
0c758     B0 65 86 F1 | 	sub	objptr, ##28080
0c75c     49 B5 02 F6 | 	mov	local08, arg01
0c760     D7 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c764                 | LR__1038
0c764     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c768     01 B4 06 51 |  if_ne	add	local08, #1
0c76c     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c770                 | LR__1039
0c770     49 B5 82 F1 | 	sub	local08, arg01
0c774     5A 95 02 F6 | 	mov	arg02, local08
0c778     01 94 86 F1 | 	sub	arg02, #1
0c77c     59 93 02 F6 | 	mov	arg01, local07
0c780     A8 9B B1 FD | 	call	#__system__Right_S
0c784     3D 95 02 F6 | 	mov	arg02, result1
0c788     57 93 02 F6 | 	mov	arg01, local05
0c78c     C8 82 B1 FD | 	call	#__system___string_concat
0c790     58 7B 62 FC | 	wrlong	result1, local06
0c794                 | LR__1040
0c794     38 00 00 FF 
0c798     E8 65 06 F1 | 	add	objptr, ##29160
0c79c     32 B1 02 FB | 	rdlong	local06, objptr
0c7a0     03 B0 66 F0 | 	shl	local06, #3
0c7a4     02 00 00 FF 
0c7a8     38 64 86 F1 | 	sub	objptr, ##1080
0c7ac     32 B1 02 F1 | 	add	local06, objptr
0c7b0     58 93 02 FB | 	rdlong	arg01, local06
0c7b4     00 94 06 F6 | 	mov	arg02, #0
0c7b8     36 00 00 FF 
0c7bc     B0 65 86 F1 | 	sub	objptr, ##28080
0c7c0     8C AF B1 FD | 	call	#__system____builtin_atoi
0c7c4     3D AD 02 FD | 	qmul	local04, result1
0c7c8     4C 00 00 FF 
0c7cc     20 64 06 F1 | 	add	objptr, ##38944
0c7d0     32 B1 02 FB | 	rdlong	local06, objptr
0c7d4     58 B7 02 F6 | 	mov	local09, local06
0c7d8     01 B6 66 F0 | 	shl	local09, #1
0c7dc     58 B7 02 F1 | 	add	local09, local06
0c7e0     02 B6 66 F0 | 	shl	local09, #2
0c7e4     03 00 00 FF 
0c7e8     00 64 86 F1 | 	sub	objptr, ##1536
0c7ec     32 B7 02 F1 | 	add	local09, objptr
0c7f0     03 00 00 FF 
0c7f4     00 64 06 F1 | 	add	objptr, ##1536
0c7f8     18 A6 62 FD | 	getqx	local01
0c7fc     1C AA 06 F6 | 	mov	local03, #28
0c800     53 B1 02 F6 | 	mov	local06, local01
0c804     54 B3 02 F6 | 	mov	local07, local02
0c808     5B B1 62 FC | 	wrlong	local06, local09
0c80c     55 B7 02 F6 | 	mov	local09, local03
0c810     32 B1 02 FB | 	rdlong	local06, objptr
0c814     58 AF 02 F6 | 	mov	local05, local06
0c818     01 AE 66 F0 | 	shl	local05, #1
0c81c     58 AF 02 F1 | 	add	local05, local06
0c820     02 AE 66 F0 | 	shl	local05, #2
0c824     03 00 00 FF 
0c828     00 64 86 F1 | 	sub	objptr, ##1536
0c82c     32 AF 02 F1 | 	add	local05, objptr
0c830     04 AE 06 F1 | 	add	local05, #4
0c834     57 B3 62 FC | 	wrlong	local07, local05
0c838     03 00 00 FF 
0c83c     00 64 06 F1 | 	add	objptr, ##1536
0c840     32 B3 02 FB | 	rdlong	local07, objptr
0c844     59 B1 02 F6 | 	mov	local06, local07
0c848     01 B0 66 F0 | 	shl	local06, #1
0c84c     59 B1 02 F1 | 	add	local06, local07
0c850     02 B0 66 F0 | 	shl	local06, #2
0c854     03 00 00 FF 
0c858     00 64 86 F1 | 	sub	objptr, ##1536
0c85c     32 B1 02 F1 | 	add	local06, objptr
0c860     08 B0 06 F1 | 	add	local06, #8
0c864     58 B7 62 FC | 	wrlong	local09, local06
0c868     03 00 00 FF 
0c86c     00 64 06 F1 | 	add	objptr, ##1536
0c870     32 B1 02 FB | 	rdlong	local06, objptr
0c874     01 B0 06 F1 | 	add	local06, #1
0c878     32 B1 62 FC | 	wrlong	local06, objptr
0c87c     13 00 00 FF 
0c880     38 64 86 F1 | 	sub	objptr, ##9784
0c884     32 B1 02 FB | 	rdlong	local06, objptr
0c888     01 B0 06 F1 | 	add	local06, #1
0c88c     32 B1 62 FC | 	wrlong	local06, objptr
0c890     38 00 00 FF 
0c894     E8 65 86 F1 | 	sub	objptr, ##29160
0c898     24 05 90 FD | 	jmp	#LR__1053
0c89c                 | LR__1041
0c89c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c89c     01 AC 0E F2 | 	cmp	local04, #1 wz
0c8a0     48 00 90 5D |  if_ne	jmp	#LR__1042
0c8a4     00 C0 1F FF 
0c8a8     00 B0 06 F6 | 	mov	local06, ##1065353216
0c8ac     38 00 00 FF 
0c8b0     E8 65 06 F1 | 	add	objptr, ##29160
0c8b4     32 B7 02 FB | 	rdlong	local09, objptr
0c8b8     03 B6 66 F0 | 	shl	local09, #3
0c8bc     02 00 00 FF 
0c8c0     38 64 86 F1 | 	sub	objptr, ##1080
0c8c4     32 B7 02 F1 | 	add	local09, objptr
0c8c8     5B 93 02 FB | 	rdlong	arg01, local09
0c8cc     36 00 00 FF 
0c8d0     B0 65 86 F1 | 	sub	objptr, ##28080
0c8d4     10 B0 B1 FD | 	call	#__system____builtin_atof
0c8d8     3D 95 02 F6 | 	mov	arg02, result1
0c8dc     58 93 02 F6 | 	mov	arg01, local06
0c8e0     E8 A7 B1 FD | 	call	#__system___float_mul
0c8e4     3D A7 02 F6 | 	mov	local01, result1
0c8e8     1E AA 06 F6 | 	mov	local03, #30
0c8ec                 | LR__1042
0c8ec                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c8ec     FF FF 7F FF 
0c8f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c8f4     48 00 90 5D |  if_ne	jmp	#LR__1043
0c8f8     00 C0 5F FF 
0c8fc     00 B0 06 F6 | 	mov	local06, ##-1082130432
0c900     38 00 00 FF 
0c904     E8 65 06 F1 | 	add	objptr, ##29160
0c908     32 B7 02 FB | 	rdlong	local09, objptr
0c90c     03 B6 66 F0 | 	shl	local09, #3
0c910     02 00 00 FF 
0c914     38 64 86 F1 | 	sub	objptr, ##1080
0c918     32 B7 02 F1 | 	add	local09, objptr
0c91c     5B 93 02 FB | 	rdlong	arg01, local09
0c920     36 00 00 FF 
0c924     B0 65 86 F1 | 	sub	objptr, ##28080
0c928     BC AF B1 FD | 	call	#__system____builtin_atof
0c92c     3D 95 02 F6 | 	mov	arg02, result1
0c930     58 93 02 F6 | 	mov	arg01, local06
0c934     94 A7 B1 FD | 	call	#__system___float_mul
0c938     3D A7 02 F6 | 	mov	local01, result1
0c93c     1E AA 06 F6 | 	mov	local03, #30
0c940                 | LR__1043
0c940     53 B1 02 F6 | 	mov	local06, local01
0c944     54 B3 02 F6 | 	mov	local07, local02
0c948     55 AF 02 F6 | 	mov	local05, local03
0c94c     4C 00 00 FF 
0c950     20 64 06 F1 | 	add	objptr, ##38944
0c954     32 A7 02 FB | 	rdlong	local01, objptr
0c958     53 B7 02 F6 | 	mov	local09, local01
0c95c     01 B6 66 F0 | 	shl	local09, #1
0c960     53 B7 02 F1 | 	add	local09, local01
0c964     02 B6 66 F0 | 	shl	local09, #2
0c968     03 00 00 FF 
0c96c     00 64 86 F1 | 	sub	objptr, ##1536
0c970     32 B7 02 F1 | 	add	local09, objptr
0c974     5B B1 62 FC | 	wrlong	local06, local09
0c978     03 00 00 FF 
0c97c     00 64 06 F1 | 	add	objptr, ##1536
0c980     32 B7 02 FB | 	rdlong	local09, objptr
0c984     5B B1 02 F6 | 	mov	local06, local09
0c988     01 B0 66 F0 | 	shl	local06, #1
0c98c     5B B1 02 F1 | 	add	local06, local09
0c990     02 B0 66 F0 | 	shl	local06, #2
0c994     03 00 00 FF 
0c998     00 64 86 F1 | 	sub	objptr, ##1536
0c99c     32 B1 02 F1 | 	add	local06, objptr
0c9a0     04 B0 06 F1 | 	add	local06, #4
0c9a4     58 B3 62 FC | 	wrlong	local07, local06
0c9a8     03 00 00 FF 
0c9ac     00 64 06 F1 | 	add	objptr, ##1536
0c9b0     32 B7 02 FB | 	rdlong	local09, objptr
0c9b4     5B B3 02 F6 | 	mov	local07, local09
0c9b8     01 B2 66 F0 | 	shl	local07, #1
0c9bc     5B B3 02 F1 | 	add	local07, local09
0c9c0     02 B2 66 F0 | 	shl	local07, #2
0c9c4     03 00 00 FF 
0c9c8     00 64 86 F1 | 	sub	objptr, ##1536
0c9cc     32 B3 02 F1 | 	add	local07, objptr
0c9d0     08 B2 06 F1 | 	add	local07, #8
0c9d4     59 AF 62 FC | 	wrlong	local05, local07
0c9d8     03 00 00 FF 
0c9dc     00 64 06 F1 | 	add	objptr, ##1536
0c9e0     32 B1 02 FB | 	rdlong	local06, objptr
0c9e4     01 B0 06 F1 | 	add	local06, #1
0c9e8     32 B1 62 FC | 	wrlong	local06, objptr
0c9ec     13 00 00 FF 
0c9f0     38 64 86 F1 | 	sub	objptr, ##9784
0c9f4     32 B1 02 FB | 	rdlong	local06, objptr
0c9f8     01 B0 06 F1 | 	add	local06, #1
0c9fc     32 B1 62 FC | 	wrlong	local06, objptr
0ca00     38 00 00 FF 
0ca04     E8 65 86 F1 | 	sub	objptr, ##29160
0ca08     B4 03 90 FD | 	jmp	#LR__1053
0ca0c                 | LR__1044
0ca0c     38 00 00 FF 
0ca10     E8 65 06 F1 | 	add	objptr, ##29160
0ca14     32 97 02 FB | 	rdlong	arg03, objptr
0ca18     03 96 66 F0 | 	shl	arg03, #3
0ca1c     02 00 00 FF 
0ca20     38 64 86 F1 | 	sub	objptr, ##1080
0ca24     32 97 02 F1 | 	add	arg03, objptr
0ca28     4B 93 02 FB | 	rdlong	arg01, arg03
0ca2c     36 00 00 FF 
0ca30     B0 65 86 F1 | 	sub	objptr, ##28080
0ca34     49 B5 02 F6 | 	mov	local08, arg01
0ca38     D7 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0ca3c                 | LR__1045
0ca3c     5A 7B CA FA | 	rdbyte	result1, local08 wz
0ca40     01 B4 06 51 |  if_ne	add	local08, #1
0ca44     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0ca48                 | LR__1046
0ca48     49 B5 82 F1 | 	sub	local08, arg01
0ca4c     5A 7B 02 F6 | 	mov	result1, local08
0ca50     54 00 00 FF 
0ca54     CC 64 06 F1 | 	add	objptr, ##43212
0ca58     32 7B 62 FC | 	wrlong	result1, objptr
0ca5c     58 64 86 F1 | 	sub	objptr, #88
0ca60     32 93 02 FB | 	rdlong	arg01, objptr
0ca64     3D 93 82 F1 | 	sub	arg01, result1
0ca68     04 92 86 F1 | 	sub	arg01, #4
0ca6c     03 92 26 F5 | 	andn	arg01, #3
0ca70     32 93 62 FC | 	wrlong	arg01, objptr
0ca74     58 64 06 F1 | 	add	objptr, #88
0ca78     32 95 02 FB | 	rdlong	arg02, objptr
0ca7c     54 00 00 FF 
0ca80     CC 64 86 F1 | 	sub	objptr, ##43212
0ca84     E8 43 B1 FD | 	call	#_pslpoke
0ca88                 | '     pslpoke memtop,l
0ca88                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ca88     01 B8 06 F6 | 	mov	local10, #1
0ca8c     54 00 00 FF 
0ca90     CC 64 06 F1 | 	add	objptr, ##43212
0ca94     32 BB 02 FB | 	rdlong	local11, objptr
0ca98     54 00 00 FF 
0ca9c     CC 64 86 F1 | 	sub	objptr, ##43212
0caa0     01 BA 06 F1 | 	add	local11, #1
0caa4                 | LR__1047
0caa4     5D B9 52 F2 | 	cmps	local10, local11 wc
0caa8     5C 00 90 3D |  if_ae	jmp	#LR__1048
0caac     54 00 00 FF 
0cab0     74 64 06 F1 | 	add	objptr, ##43124
0cab4     32 B3 02 FB | 	rdlong	local07, objptr
0cab8     03 B2 06 F1 | 	add	local07, #3
0cabc     5C B3 02 F1 | 	add	local07, local10
0cac0     1B 00 00 FF 
0cac4     8C 64 86 F1 | 	sub	objptr, ##13964
0cac8     32 B7 02 FB | 	rdlong	local09, objptr
0cacc     03 B6 66 F0 | 	shl	local09, #3
0cad0     02 00 00 FF 
0cad4     38 64 86 F1 | 	sub	objptr, ##1080
0cad8     32 B7 02 F1 | 	add	local09, objptr
0cadc     5B 93 02 FB | 	rdlong	arg01, local09
0cae0     5C 95 02 F6 | 	mov	arg02, local10
0cae4     01 96 06 F6 | 	mov	arg03, #1
0cae8     36 00 00 FF 
0caec     B0 65 86 F1 | 	sub	objptr, ##28080
0caf0     C8 98 B1 FD | 	call	#__system__Mid_S
0caf4     3D 95 C2 FA | 	rdbyte	arg02, result1
0caf8     59 93 02 F6 | 	mov	arg01, local07
0cafc     00 44 B1 FD | 	call	#_pspoke
0cb00     01 B8 06 F1 | 	add	local10, #1
0cb04     9C FF 9F FD | 	jmp	#LR__1047
0cb08                 | LR__1048
0cb08     54 00 00 FF 
0cb0c     74 64 06 F1 | 	add	objptr, ##43124
0cb10     32 A7 02 FB | 	rdlong	local01, objptr
0cb14     2B AA 06 F6 | 	mov	local03, #43
0cb18     53 B1 02 F6 | 	mov	local06, local01
0cb1c     54 B3 02 F6 | 	mov	local07, local02
0cb20     55 BB 02 F6 | 	mov	local11, local03
0cb24     08 00 00 FF 
0cb28     54 64 86 F1 | 	sub	objptr, ##4180
0cb2c     32 B9 02 FB | 	rdlong	local10, objptr
0cb30     5C B7 02 F6 | 	mov	local09, local10
0cb34     01 B6 66 F0 | 	shl	local09, #1
0cb38     5C B7 02 F1 | 	add	local09, local10
0cb3c     02 B6 66 F0 | 	shl	local09, #2
0cb40     03 00 00 FF 
0cb44     00 64 86 F1 | 	sub	objptr, ##1536
0cb48     32 B7 02 F1 | 	add	local09, objptr
0cb4c     5B B1 62 FC | 	wrlong	local06, local09
0cb50     03 00 00 FF 
0cb54     00 64 06 F1 | 	add	objptr, ##1536
0cb58     32 B9 02 FB | 	rdlong	local10, objptr
0cb5c     5C B7 02 F6 | 	mov	local09, local10
0cb60     01 B6 66 F0 | 	shl	local09, #1
0cb64     5C B7 02 F1 | 	add	local09, local10
0cb68     02 B6 66 F0 | 	shl	local09, #2
0cb6c     03 00 00 FF 
0cb70     00 64 86 F1 | 	sub	objptr, ##1536
0cb74     32 B7 02 F1 | 	add	local09, objptr
0cb78     04 B6 06 F1 | 	add	local09, #4
0cb7c     5B B3 62 FC | 	wrlong	local07, local09
0cb80     03 00 00 FF 
0cb84     00 64 06 F1 | 	add	objptr, ##1536
0cb88     32 B9 02 FB | 	rdlong	local10, objptr
0cb8c     5C B7 02 F6 | 	mov	local09, local10
0cb90     01 B6 66 F0 | 	shl	local09, #1
0cb94     5C B7 02 F1 | 	add	local09, local10
0cb98     02 B6 66 F0 | 	shl	local09, #2
0cb9c     03 00 00 FF 
0cba0     00 64 86 F1 | 	sub	objptr, ##1536
0cba4     32 B7 02 F1 | 	add	local09, objptr
0cba8     08 B6 06 F1 | 	add	local09, #8
0cbac     5B BB 62 FC | 	wrlong	local11, local09
0cbb0     03 00 00 FF 
0cbb4     00 64 06 F1 | 	add	objptr, ##1536
0cbb8     32 B1 02 FB | 	rdlong	local06, objptr
0cbbc     01 B0 06 F1 | 	add	local06, #1
0cbc0     32 B1 62 FC | 	wrlong	local06, objptr
0cbc4     13 00 00 FF 
0cbc8     38 64 86 F1 | 	sub	objptr, ##9784
0cbcc     32 B1 02 FB | 	rdlong	local06, objptr
0cbd0     01 B0 06 F1 | 	add	local06, #1
0cbd4     32 B1 62 FC | 	wrlong	local06, objptr
0cbd8     38 00 00 FF 
0cbdc     E8 65 86 F1 | 	sub	objptr, ##29160
0cbe0     DC 01 90 FD | 	jmp	#LR__1053
0cbe4                 | LR__1049
0cbe4     2C AA 06 F6 | 	mov	local03, #44
0cbe8     38 00 00 FF 
0cbec     E8 65 06 F1 | 	add	objptr, ##29160
0cbf0     32 B1 02 FB | 	rdlong	local06, objptr
0cbf4     03 B0 66 F0 | 	shl	local06, #3
0cbf8     02 00 00 FF 
0cbfc     38 64 86 F1 | 	sub	objptr, ##1080
0cc00     32 B1 02 F1 | 	add	local06, objptr
0cc04     58 93 02 FB | 	rdlong	arg01, local06
0cc08     00 94 06 F6 | 	mov	arg02, #0
0cc0c     36 00 00 FF 
0cc10     B0 65 86 F1 | 	sub	objptr, ##28080
0cc14     38 AB B1 FD | 	call	#__system____builtin_atoi
0cc18     3D A7 02 F6 | 	mov	local01, result1
0cc1c     53 B1 02 F6 | 	mov	local06, local01
0cc20     54 B3 02 F6 | 	mov	local07, local02
0cc24     55 BB 02 F6 | 	mov	local11, local03
0cc28     4C 00 00 FF 
0cc2c     20 64 06 F1 | 	add	objptr, ##38944
0cc30     32 B9 02 FB | 	rdlong	local10, objptr
0cc34     5C B7 02 F6 | 	mov	local09, local10
0cc38     01 B6 66 F0 | 	shl	local09, #1
0cc3c     5C B7 02 F1 | 	add	local09, local10
0cc40     02 B6 66 F0 | 	shl	local09, #2
0cc44     03 00 00 FF 
0cc48     00 64 86 F1 | 	sub	objptr, ##1536
0cc4c     32 B7 02 F1 | 	add	local09, objptr
0cc50     5B B1 62 FC | 	wrlong	local06, local09
0cc54     03 00 00 FF 
0cc58     00 64 06 F1 | 	add	objptr, ##1536
0cc5c     32 B9 02 FB | 	rdlong	local10, objptr
0cc60     5C B7 02 F6 | 	mov	local09, local10
0cc64     01 B6 66 F0 | 	shl	local09, #1
0cc68     5C B7 02 F1 | 	add	local09, local10
0cc6c     02 B6 66 F0 | 	shl	local09, #2
0cc70     03 00 00 FF 
0cc74     00 64 86 F1 | 	sub	objptr, ##1536
0cc78     32 B7 02 F1 | 	add	local09, objptr
0cc7c     04 B6 06 F1 | 	add	local09, #4
0cc80     5B B3 62 FC | 	wrlong	local07, local09
0cc84     03 00 00 FF 
0cc88     00 64 06 F1 | 	add	objptr, ##1536
0cc8c     32 B9 02 FB | 	rdlong	local10, objptr
0cc90     5C B7 02 F6 | 	mov	local09, local10
0cc94     01 B6 66 F0 | 	shl	local09, #1
0cc98     5C B7 02 F1 | 	add	local09, local10
0cc9c     02 B6 66 F0 | 	shl	local09, #2
0cca0     03 00 00 FF 
0cca4     00 64 86 F1 | 	sub	objptr, ##1536
0cca8     32 B7 02 F1 | 	add	local09, objptr
0ccac     08 B6 06 F1 | 	add	local09, #8
0ccb0     5B BB 62 FC | 	wrlong	local11, local09
0ccb4     03 00 00 FF 
0ccb8     00 64 06 F1 | 	add	objptr, ##1536
0ccbc     32 B1 02 FB | 	rdlong	local06, objptr
0ccc0     01 B0 06 F1 | 	add	local06, #1
0ccc4     32 B1 62 FC | 	wrlong	local06, objptr
0ccc8     13 00 00 FF 
0cccc     38 64 86 F1 | 	sub	objptr, ##9784
0ccd0     32 B1 02 FB | 	rdlong	local06, objptr
0ccd4     01 B0 06 F1 | 	add	local06, #1
0ccd8     32 B1 62 FC | 	wrlong	local06, objptr
0ccdc     38 00 00 FF 
0cce0     E8 65 86 F1 | 	sub	objptr, ##29160
0cce4     D8 00 90 FD | 	jmp	#LR__1053
0cce8                 | LR__1050
0cce8     56 93 02 F6 | 	mov	arg01, local04
0ccec     24 04 B0 FD | 	call	#_getvar
0ccf0     38 00 00 FF 
0ccf4     E8 65 06 F1 | 	add	objptr, ##29160
0ccf8     32 B1 02 FB | 	rdlong	local06, objptr
0ccfc     01 B0 06 F1 | 	add	local06, #1
0cd00     32 B1 62 FC | 	wrlong	local06, objptr
0cd04     38 00 00 FF 
0cd08     E8 65 86 F1 | 	sub	objptr, ##29160
0cd0c                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd0c     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd10     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cd14     A8 00 90 FD | 	jmp	#LR__1053
0cd18                 | LR__1051
0cd18     38 00 00 FF 
0cd1c     E8 65 06 F1 | 	add	objptr, ##29160
0cd20     32 B1 02 FB | 	rdlong	local06, objptr
0cd24     01 B0 06 F1 | 	add	local06, #1
0cd28     32 B1 62 FC | 	wrlong	local06, objptr
0cd2c     38 00 00 FF 
0cd30     E8 65 86 F1 | 	sub	objptr, ##29160
0cd34     20 F1 BF FD | 	call	#_expr
0cd38                 | '     ct+=1
0cd38                 | '     err=expr() : if err>0 then return err 
0cd38     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd3c     84 00 90 3D |  if_ae	jmp	#LR__1054
0cd40                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd40     38 00 00 FF 
0cd44     E8 65 06 F1 | 	add	objptr, ##29160
0cd48     32 BB 02 FB | 	rdlong	local11, objptr
0cd4c     03 BA 66 F0 | 	shl	local11, #3
0cd50     02 00 00 FF 
0cd54     38 64 86 F1 | 	sub	objptr, ##1080
0cd58     32 BB 02 F1 | 	add	local11, objptr
0cd5c     04 BA 06 F1 | 	add	local11, #4
0cd60     5D BB 02 FB | 	rdlong	local11, local11
0cd64     14 BA 0E F2 | 	cmp	local11, #20 wz
0cd68     36 00 00 FF 
0cd6c     B0 65 86 F1 | 	sub	objptr, ##28080
0cd70     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cd74     38 00 00 FF 
0cd78     E8 65 06 F1 | 	add	objptr, ##29160
0cd7c     32 B1 02 FB | 	rdlong	local06, objptr
0cd80     01 B0 06 F1 | 	add	local06, #1
0cd84     32 B1 62 FC | 	wrlong	local06, objptr
0cd88     38 00 00 FF 
0cd8c     E8 65 86 F1 | 	sub	objptr, ##29160
0cd90     2C 00 90 FD | 	jmp	#LR__1053
0cd94                 | LR__1052
0cd94     56 93 02 F6 | 	mov	arg01, local04
0cd98     34 00 B0 FD | 	call	#_getfun
0cd9c     38 00 00 FF 
0cda0     E8 65 06 F1 | 	add	objptr, ##29160
0cda4     32 B1 02 FB | 	rdlong	local06, objptr
0cda8     01 B0 06 F1 | 	add	local06, #1
0cdac     32 B1 62 FC | 	wrlong	local06, objptr
0cdb0     38 00 00 FF 
0cdb4     E8 65 86 F1 | 	sub	objptr, ##29160
0cdb8                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cdb8     01 7A 56 F2 | 	cmps	result1, #1 wc
0cdbc     04 00 90 3D |  if_ae	jmp	#LR__1054
0cdc0                 | LR__1053
0cdc0                 | ' return 0  
0cdc0     00 7A 06 F6 | 	mov	result1, #0
0cdc4                 | LR__1054
0cdc4     E7 F0 03 F6 | 	mov	ptra, fp
0cdc8     F2 00 A0 FD | 	call	#popregs_
0cdcc                 | _getvalue_ret
0cdcc     2D 00 64 FD | 	ret
0cdd0                 | 
0cdd0                 | ' 
0cdd0                 | ' ' Get a function result 
0cdd0                 | ' 
0cdd0                 | ' function getfun(m as integer) as ulong
0cdd0                 | _getfun
0cdd0     0F CA 05 F6 | 	mov	COUNT_, #15
0cdd4     E8 00 A0 FD | 	call	#pushregs_
0cdd8                 | _getfun_enter
0cdd8     49 AD 02 F6 | 	mov	local04, arg01
0cddc     38 00 00 FF 
0cde0     E8 65 06 F1 | 	add	objptr, ##29160
0cde4     32 AF 02 FB | 	rdlong	local05, objptr
0cde8     57 B1 02 F6 | 	mov	local06, local05
0cdec     00 B2 06 F6 | 	mov	local07, #0
0cdf0                 | ' oldct=ct
0cdf0                 | ' numpar=0
0cdf0                 | ' if lparts(ct+1).token=token_lpar then
0cdf0     01 AE 06 F1 | 	add	local05, #1
0cdf4     03 AE 66 F0 | 	shl	local05, #3
0cdf8     02 00 00 FF 
0cdfc     38 64 86 F1 | 	sub	objptr, ##1080
0ce00     32 AF 02 F1 | 	add	local05, objptr
0ce04     04 AE 06 F1 | 	add	local05, #4
0ce08     57 AF 02 FB | 	rdlong	local05, local05
0ce0c     15 AE 0E F2 | 	cmp	local05, #21 wz
0ce10     36 00 00 FF 
0ce14     B0 65 86 F1 | 	sub	objptr, ##28080
0ce18     54 01 90 5D |  if_ne	jmp	#LR__1064
0ce1c     38 00 00 FF 
0ce20     E8 65 06 F1 | 	add	objptr, ##29160
0ce24     32 B5 02 FB | 	rdlong	local08, objptr
0ce28     01 B4 06 F1 | 	add	local08, #1
0ce2c     32 B5 62 FC | 	wrlong	local08, objptr
0ce30     38 00 00 FF 
0ce34     E8 65 86 F1 | 	sub	objptr, ##29160
0ce38                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce38                 | '   do
0ce38                 | LR__1060
0ce38     38 00 00 FF 
0ce3c     E8 65 06 F1 | 	add	objptr, ##29160
0ce40     32 AF 02 FB | 	rdlong	local05, objptr
0ce44     01 AE 06 F1 | 	add	local05, #1
0ce48     32 AF 62 FC | 	wrlong	local05, objptr
0ce4c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce4c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce4c     03 AE 66 F0 | 	shl	local05, #3
0ce50     02 00 00 FF 
0ce54     38 64 86 F1 | 	sub	objptr, ##1080
0ce58     32 AF 02 F1 | 	add	local05, objptr
0ce5c     04 AE 06 F1 | 	add	local05, #4
0ce60     57 B5 02 FB | 	rdlong	local08, local05
0ce64     15 B4 0E F2 | 	cmp	local08, #21 wz
0ce68     36 00 00 FF 
0ce6c     B0 65 86 F1 | 	sub	objptr, ##28080
0ce70     44 00 90 5D |  if_ne	jmp	#LR__1061
0ce74     38 00 00 FF 
0ce78     E8 65 06 F1 | 	add	objptr, ##29160
0ce7c     32 B5 02 FB | 	rdlong	local08, objptr
0ce80     01 B4 06 F1 | 	add	local08, #1
0ce84     32 B5 62 FC | 	wrlong	local08, objptr
0ce88     38 00 00 FF 
0ce8c     E8 65 86 F1 | 	sub	objptr, ##29160
0ce90     C4 EF BF FD | 	call	#_expr
0ce94     3D B7 02 F6 | 	mov	local09, result1
0ce98     38 00 00 FF 
0ce9c     E8 65 06 F1 | 	add	objptr, ##29160
0cea0     32 B5 02 FB | 	rdlong	local08, objptr
0cea4     01 B4 06 F1 | 	add	local08, #1
0cea8     32 B5 62 FC | 	wrlong	local08, objptr
0ceac     38 00 00 FF 
0ceb0     E8 65 86 F1 | 	sub	objptr, ##29160
0ceb4     08 00 90 FD | 	jmp	#LR__1062
0ceb8                 | LR__1061
0ceb8     9C EF BF FD | 	call	#_expr
0cebc     3D B7 02 F6 | 	mov	local09, result1
0cec0                 | LR__1062
0cec0                 | '     if err>0 then return err
0cec0     01 B6 16 F2 | 	cmp	local09, #1 wc
0cec4     5B 7B 02 36 |  if_ae	mov	result1, local09
0cec8     3C 02 90 3D |  if_ae	jmp	#LR__1066
0cecc     01 B2 06 F1 | 	add	local07, #1
0ced0     38 00 00 FF 
0ced4     E8 65 06 F1 | 	add	objptr, ##29160
0ced8     32 AF 02 FB | 	rdlong	local05, objptr
0cedc     03 AE 66 F0 | 	shl	local05, #3
0cee0     02 00 00 FF 
0cee4     38 64 86 F1 | 	sub	objptr, ##1080
0cee8     32 AF 02 F1 | 	add	local05, objptr
0ceec     04 AE 06 F1 | 	add	local05, #4
0cef0     57 B7 02 FB | 	rdlong	local09, local05
0cef4     14 B6 0E F2 | 	cmp	local09, #20 wz
0cef8     36 00 00 FF 
0cefc     B0 65 86 F1 | 	sub	objptr, ##28080
0cf00     34 00 90 AD |  if_e	jmp	#LR__1063
0cf04     38 00 00 FF 
0cf08     E8 65 06 F1 | 	add	objptr, ##29160
0cf0c     32 B7 02 FB | 	rdlong	local09, objptr
0cf10     03 B6 66 F0 | 	shl	local09, #3
0cf14     02 00 00 FF 
0cf18     38 64 86 F1 | 	sub	objptr, ##1080
0cf1c     32 B7 02 F1 | 	add	local09, objptr
0cf20     04 B6 06 F1 | 	add	local09, #4
0cf24     5B B7 02 FB | 	rdlong	local09, local09
0cf28     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf2c     36 00 00 FF 
0cf30     B0 65 86 F1 | 	sub	objptr, ##28080
0cf34     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0cf38                 | LR__1063
0cf38                 | '   if lparts(ct).token=token_end then return 14
0cf38     38 00 00 FF 
0cf3c     E8 65 06 F1 | 	add	objptr, ##29160
0cf40     32 AF 02 FB | 	rdlong	local05, objptr
0cf44     03 AE 66 F0 | 	shl	local05, #3
0cf48     02 00 00 FF 
0cf4c     38 64 86 F1 | 	sub	objptr, ##1080
0cf50     32 AF 02 F1 | 	add	local05, objptr
0cf54     04 AE 06 F1 | 	add	local05, #4
0cf58     57 B7 02 FB | 	rdlong	local09, local05
0cf5c     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf60     36 00 00 FF 
0cf64     B0 65 86 F1 | 	sub	objptr, ##28080
0cf68     0E 7A 06 A6 |  if_e	mov	result1, #14
0cf6c     98 01 90 AD |  if_e	jmp	#LR__1066
0cf70                 | LR__1064
0cf70     59 A7 02 F6 | 	mov	local01, local07
0cf74     03 B0 66 F0 | 	shl	local06, #3
0cf78     36 00 00 FF 
0cf7c     B0 65 06 F1 | 	add	objptr, ##28080
0cf80     32 B1 02 F1 | 	add	local06, objptr
0cf84     04 B0 06 F1 | 	add	local06, #4
0cf88     58 AB 02 FB | 	rdlong	local03, local06
0cf8c     53 B5 02 F6 | 	mov	local08, local01
0cf90     54 B9 02 F6 | 	mov	local10, local02
0cf94     55 BB 02 F6 | 	mov	local11, local03
0cf98     15 00 00 FF 
0cf9c     70 64 06 F1 | 	add	objptr, ##10864
0cfa0     32 BD 02 FB | 	rdlong	local12, objptr
0cfa4     5E BF 02 F6 | 	mov	local13, local12
0cfa8     01 BE 66 F0 | 	shl	local13, #1
0cfac     5E BF 02 F1 | 	add	local13, local12
0cfb0     02 BE 66 F0 | 	shl	local13, #2
0cfb4     03 00 00 FF 
0cfb8     00 64 86 F1 | 	sub	objptr, ##1536
0cfbc     32 BF 02 F1 | 	add	local13, objptr
0cfc0     5F B5 62 FC | 	wrlong	local08, local13
0cfc4     03 00 00 FF 
0cfc8     00 64 06 F1 | 	add	objptr, ##1536
0cfcc     32 B5 02 FB | 	rdlong	local08, objptr
0cfd0     5A C1 02 F6 | 	mov	local14, local08
0cfd4     01 C0 66 F0 | 	shl	local14, #1
0cfd8     5A C1 02 F1 | 	add	local14, local08
0cfdc     02 C0 66 F0 | 	shl	local14, #2
0cfe0     03 00 00 FF 
0cfe4     00 64 86 F1 | 	sub	objptr, ##1536
0cfe8     32 C1 02 F1 | 	add	local14, objptr
0cfec     04 C0 06 F1 | 	add	local14, #4
0cff0     60 B9 62 FC | 	wrlong	local10, local14
0cff4     03 00 00 FF 
0cff8     00 64 06 F1 | 	add	objptr, ##1536
0cffc     32 B5 02 FB | 	rdlong	local08, objptr
0d000     5A C3 02 F6 | 	mov	local15, local08
0d004     01 C2 66 F0 | 	shl	local15, #1
0d008     5A C3 02 F1 | 	add	local15, local08
0d00c     02 C2 66 F0 | 	shl	local15, #2
0d010     03 00 00 FF 
0d014     00 64 86 F1 | 	sub	objptr, ##1536
0d018     32 C3 02 F1 | 	add	local15, objptr
0d01c     08 C2 06 F1 | 	add	local15, #8
0d020     61 BB 62 FC | 	wrlong	local11, local15
0d024     03 00 00 FF 
0d028     00 64 06 F1 | 	add	objptr, ##1536
0d02c     32 B5 02 FB | 	rdlong	local08, objptr
0d030     01 B4 06 F1 | 	add	local08, #1
0d034     32 B5 62 FC | 	wrlong	local08, objptr
0d038     4C 00 00 FF 
0d03c     20 64 86 F1 | 	sub	objptr, ##38944
0d040                 | ' t2.result.uresult=numpar
0d040                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d040                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d040                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d040     FF FF 7F FF 
0d044     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d048     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d04c     15 AA 06 F6 | 	mov	local03, #21
0d050     53 B5 02 F6 | 	mov	local08, local01
0d054     54 B9 02 F6 | 	mov	local10, local02
0d058     55 BB 02 F6 | 	mov	local11, local03
0d05c     4C 00 00 FF 
0d060     20 64 06 F1 | 	add	objptr, ##38944
0d064     32 BD 02 FB | 	rdlong	local12, objptr
0d068     5E BF 02 F6 | 	mov	local13, local12
0d06c     01 BE 66 F0 | 	shl	local13, #1
0d070     5E BF 02 F1 | 	add	local13, local12
0d074     02 BE 66 F0 | 	shl	local13, #2
0d078     03 00 00 FF 
0d07c     00 64 86 F1 | 	sub	objptr, ##1536
0d080     32 BF 02 F1 | 	add	local13, objptr
0d084     5F B5 62 FC | 	wrlong	local08, local13
0d088     03 00 00 FF 
0d08c     00 64 06 F1 | 	add	objptr, ##1536
0d090     32 C3 02 FB | 	rdlong	local15, objptr
0d094     61 C1 02 F6 | 	mov	local14, local15
0d098     01 C0 66 F0 | 	shl	local14, #1
0d09c     61 C1 02 F1 | 	add	local14, local15
0d0a0     02 C0 66 F0 | 	shl	local14, #2
0d0a4     03 00 00 FF 
0d0a8     00 64 86 F1 | 	sub	objptr, ##1536
0d0ac     32 C1 02 F1 | 	add	local14, objptr
0d0b0     04 C0 06 F1 | 	add	local14, #4
0d0b4     60 B9 62 FC | 	wrlong	local10, local14
0d0b8     03 00 00 FF 
0d0bc     00 64 06 F1 | 	add	objptr, ##1536
0d0c0     32 C1 02 FB | 	rdlong	local14, objptr
0d0c4     60 C3 02 F6 | 	mov	local15, local14
0d0c8     01 C2 66 F0 | 	shl	local15, #1
0d0cc     60 C3 02 F1 | 	add	local15, local14
0d0d0     02 C2 66 F0 | 	shl	local15, #2
0d0d4     03 00 00 FF 
0d0d8     00 64 86 F1 | 	sub	objptr, ##1536
0d0dc     32 C3 02 F1 | 	add	local15, objptr
0d0e0     08 C2 06 F1 | 	add	local15, #8
0d0e4     61 BB 62 FC | 	wrlong	local11, local15
0d0e8     03 00 00 FF 
0d0ec     00 64 06 F1 | 	add	objptr, ##1536
0d0f0     32 B5 02 FB | 	rdlong	local08, objptr
0d0f4     01 B4 06 F1 | 	add	local08, #1
0d0f8     32 B5 62 FC | 	wrlong	local08, objptr
0d0fc     4C 00 00 FF 
0d100     20 64 86 F1 | 	sub	objptr, ##38944
0d104                 | LR__1065
0d104                 | ' return 0
0d104     00 7A 06 F6 | 	mov	result1, #0
0d108                 | LR__1066
0d108     E7 F0 03 F6 | 	mov	ptra, fp
0d10c     F2 00 A0 FD | 	call	#popregs_
0d110                 | _getfun_ret
0d110     2D 00 64 FD | 	ret
0d114                 | 
0d114                 | '   
0d114                 | '   
0d114                 | ' function getvar(m as integer) as ulong
0d114                 | _getvar
0d114     11 CA 05 F6 | 	mov	COUNT_, #17
0d118     E8 00 A0 FD | 	call	#pushregs_
0d11c                 | _getvar_enter
0d11c     49 AD 02 F6 | 	mov	local04, arg01
0d120     38 00 00 FF 
0d124     E8 65 06 F1 | 	add	objptr, ##29160
0d128     32 AF 02 FB | 	rdlong	local05, objptr
0d12c     03 AE 66 F0 | 	shl	local05, #3
0d130     02 00 00 FF 
0d134     38 64 86 F1 | 	sub	objptr, ##1080
0d138     32 AF 02 F1 | 	add	local05, objptr
0d13c     57 B1 02 FB | 	rdlong	local06, local05
0d140     01 B2 66 F6 | 	neg	local07, #1
0d144                 | ' 
0d144                 | ' varname$=lparts(ct).part$
0d144                 | ' j=-1
0d144                 | ' 
0d144                 | ' for i=0 to varnum-1
0d144     00 B4 06 F6 | 	mov	local08, #0
0d148     04 64 86 F1 | 	sub	objptr, #4
0d14c     32 B7 02 FB | 	rdlong	local09, objptr
0d150     36 00 00 FF 
0d154     AC 65 86 F1 | 	sub	objptr, ##28076
0d158                 | LR__1070
0d158     5B B5 52 F2 | 	cmps	local08, local09 wc
0d15c     34 00 90 3D |  if_ae	jmp	#LR__1071
0d160                 | '   if variables(i).name=varname$ then j=i : exit
0d160     5A AF 02 F6 | 	mov	local05, local08
0d164     04 AE 66 F0 | 	shl	local05, #4
0d168     32 95 02 F6 | 	mov	arg02, objptr
0d16c     16 00 00 FF 
0d170     9C 95 06 F1 | 	add	arg02, ##11676
0d174     4A AF 02 F1 | 	add	local05, arg02
0d178     57 93 02 FB | 	rdlong	arg01, local05
0d17c     58 95 02 F6 | 	mov	arg02, local06
0d180     A0 78 B1 FD | 	call	#__system___string_cmp
0d184     00 7A 0E F2 | 	cmp	result1, #0 wz
0d188     5A B3 02 A6 |  if_e	mov	local07, local08
0d18c     01 B4 06 51 |  if_ne	add	local08, #1
0d190     C4 FF 9F 5D |  if_ne	jmp	#LR__1070
0d194                 | LR__1071
0d194                 | ' if  j=-1 andalso varnum<maxvars then   
0d194     FF FF 7F FF 
0d198     FF B3 0E F2 | 	cmp	local07, ##-1 wz
0d19c     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d1a0     36 00 00 FF 
0d1a4     AC 65 06 F1 | 	add	objptr, ##28076
0d1a8     32 B7 02 FB | 	rdlong	local09, objptr
0d1ac     36 00 00 FF 
0d1b0     AC 65 86 F1 | 	sub	objptr, ##28076
0d1b4     02 00 00 FF 
0d1b8     00 B6 56 F2 | 	cmps	local09, ##1024 wc
0d1bc     88 00 90 3D |  if_ae	jmp	#LR__1072
0d1c0     36 00 00 FF 
0d1c4     AC 65 06 F1 | 	add	objptr, ##28076
0d1c8     32 AF 02 FB | 	rdlong	local05, objptr
0d1cc     04 AE 66 F0 | 	shl	local05, #4
0d1d0     20 00 00 FF 
0d1d4     10 64 86 F1 | 	sub	objptr, ##16400
0d1d8     32 AF 02 F1 | 	add	local05, objptr
0d1dc     57 B1 62 FC | 	wrlong	local06, local05
0d1e0     20 00 00 FF 
0d1e4     10 64 06 F1 | 	add	objptr, ##16400
0d1e8     32 AF 02 FB | 	rdlong	local05, objptr
0d1ec     04 AE 66 F0 | 	shl	local05, #4
0d1f0     20 00 00 FF 
0d1f4     10 64 86 F1 | 	sub	objptr, ##16400
0d1f8     32 AF 02 F1 | 	add	local05, objptr
0d1fc     04 AE 06 F1 | 	add	local05, #4
0d200     57 01 68 FC | 	wrlong	#0, local05
0d204     20 00 00 FF 
0d208     10 64 06 F1 | 	add	objptr, ##16400
0d20c     32 AF 02 FB | 	rdlong	local05, objptr
0d210     04 AE 66 F0 | 	shl	local05, #4
0d214     20 00 00 FF 
0d218     10 64 86 F1 | 	sub	objptr, ##16400
0d21c     32 AF 02 F1 | 	add	local05, objptr
0d220     0C AE 06 F1 | 	add	local05, #12
0d224     57 39 68 FC | 	wrlong	#28, local05
0d228     20 00 00 FF 
0d22c     10 64 06 F1 | 	add	objptr, ##16400
0d230     32 B7 02 FB | 	rdlong	local09, objptr
0d234     5B B3 02 F6 | 	mov	local07, local09
0d238     01 B6 06 F1 | 	add	local09, #1
0d23c     32 B7 62 FC | 	wrlong	local09, objptr
0d240     36 00 00 FF 
0d244     AC 65 86 F1 | 	sub	objptr, ##28076
0d248                 | LR__1072
0d248     00 B4 06 F6 | 	mov	local08, #0
0d24c                 | ' numpar=0
0d24c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d24c     38 00 00 FF 
0d250     E8 65 06 F1 | 	add	objptr, ##29160
0d254     32 AF 02 FB | 	rdlong	local05, objptr
0d258     01 AE 06 F1 | 	add	local05, #1
0d25c     03 AE 66 F0 | 	shl	local05, #3
0d260     02 00 00 FF 
0d264     38 64 86 F1 | 	sub	objptr, ##1080
0d268     32 AF 02 F1 | 	add	local05, objptr
0d26c     04 AE 06 F1 | 	add	local05, #4
0d270     57 B7 02 FB | 	rdlong	local09, local05
0d274     15 B6 0E F2 | 	cmp	local09, #21 wz
0d278     36 00 00 FF 
0d27c     B0 65 86 F1 | 	sub	objptr, ##28080
0d280     54 01 90 5D |  if_ne	jmp	#LR__1077
0d284     38 00 00 FF 
0d288     E8 65 06 F1 | 	add	objptr, ##29160
0d28c     32 B9 02 FB | 	rdlong	local10, objptr
0d290     01 B8 06 F1 | 	add	local10, #1
0d294     32 B9 62 FC | 	wrlong	local10, objptr
0d298     38 00 00 FF 
0d29c     E8 65 86 F1 | 	sub	objptr, ##29160
0d2a0                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2a0                 | '   do
0d2a0                 | LR__1073
0d2a0     38 00 00 FF 
0d2a4     E8 65 06 F1 | 	add	objptr, ##29160
0d2a8     32 AF 02 FB | 	rdlong	local05, objptr
0d2ac     01 AE 06 F1 | 	add	local05, #1
0d2b0     32 AF 62 FC | 	wrlong	local05, objptr
0d2b4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d2b4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d2b4     03 AE 66 F0 | 	shl	local05, #3
0d2b8     02 00 00 FF 
0d2bc     38 64 86 F1 | 	sub	objptr, ##1080
0d2c0     32 AF 02 F1 | 	add	local05, objptr
0d2c4     04 AE 06 F1 | 	add	local05, #4
0d2c8     57 B9 02 FB | 	rdlong	local10, local05
0d2cc     15 B8 0E F2 | 	cmp	local10, #21 wz
0d2d0     36 00 00 FF 
0d2d4     B0 65 86 F1 | 	sub	objptr, ##28080
0d2d8     44 00 90 5D |  if_ne	jmp	#LR__1074
0d2dc     38 00 00 FF 
0d2e0     E8 65 06 F1 | 	add	objptr, ##29160
0d2e4     32 B9 02 FB | 	rdlong	local10, objptr
0d2e8     01 B8 06 F1 | 	add	local10, #1
0d2ec     32 B9 62 FC | 	wrlong	local10, objptr
0d2f0     38 00 00 FF 
0d2f4     E8 65 86 F1 | 	sub	objptr, ##29160
0d2f8     5C EB BF FD | 	call	#_expr
0d2fc     3D BB 02 F6 | 	mov	local11, result1
0d300     38 00 00 FF 
0d304     E8 65 06 F1 | 	add	objptr, ##29160
0d308     32 B9 02 FB | 	rdlong	local10, objptr
0d30c     01 B8 06 F1 | 	add	local10, #1
0d310     32 B9 62 FC | 	wrlong	local10, objptr
0d314     38 00 00 FF 
0d318     E8 65 86 F1 | 	sub	objptr, ##29160
0d31c     08 00 90 FD | 	jmp	#LR__1075
0d320                 | LR__1074
0d320     34 EB BF FD | 	call	#_expr
0d324     3D BB 02 F6 | 	mov	local11, result1
0d328                 | LR__1075
0d328                 | '     if err>0 then return err
0d328     01 BA 56 F2 | 	cmps	local11, #1 wc
0d32c     5D 7B 02 36 |  if_ae	mov	result1, local11
0d330     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d334     01 B4 06 F1 | 	add	local08, #1
0d338     38 00 00 FF 
0d33c     E8 65 06 F1 | 	add	objptr, ##29160
0d340     32 AF 02 FB | 	rdlong	local05, objptr
0d344     03 AE 66 F0 | 	shl	local05, #3
0d348     02 00 00 FF 
0d34c     38 64 86 F1 | 	sub	objptr, ##1080
0d350     32 AF 02 F1 | 	add	local05, objptr
0d354     04 AE 06 F1 | 	add	local05, #4
0d358     57 BB 02 FB | 	rdlong	local11, local05
0d35c     14 BA 0E F2 | 	cmp	local11, #20 wz
0d360     36 00 00 FF 
0d364     B0 65 86 F1 | 	sub	objptr, ##28080
0d368     34 00 90 AD |  if_e	jmp	#LR__1076
0d36c     38 00 00 FF 
0d370     E8 65 06 F1 | 	add	objptr, ##29160
0d374     32 BB 02 FB | 	rdlong	local11, objptr
0d378     03 BA 66 F0 | 	shl	local11, #3
0d37c     02 00 00 FF 
0d380     38 64 86 F1 | 	sub	objptr, ##1080
0d384     32 BB 02 F1 | 	add	local11, objptr
0d388     04 BA 06 F1 | 	add	local11, #4
0d38c     5D BB 02 FB | 	rdlong	local11, local11
0d390     FE BB 0E F2 | 	cmp	local11, #510 wz
0d394     36 00 00 FF 
0d398     B0 65 86 F1 | 	sub	objptr, ##28080
0d39c     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d3a0                 | LR__1076
0d3a0                 | '     if lparts(ct).token=token_end then return 14
0d3a0     38 00 00 FF 
0d3a4     E8 65 06 F1 | 	add	objptr, ##29160
0d3a8     32 AF 02 FB | 	rdlong	local05, objptr
0d3ac     03 AE 66 F0 | 	shl	local05, #3
0d3b0     02 00 00 FF 
0d3b4     38 64 86 F1 | 	sub	objptr, ##1080
0d3b8     32 AF 02 F1 | 	add	local05, objptr
0d3bc     04 AE 06 F1 | 	add	local05, #4
0d3c0     57 BB 02 FB | 	rdlong	local11, local05
0d3c4     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3c8     36 00 00 FF 
0d3cc     B0 65 86 F1 | 	sub	objptr, ##28080
0d3d0     0E 7A 06 A6 |  if_e	mov	result1, #14
0d3d4     88 01 90 AD |  if_e	jmp	#LR__1079
0d3d8                 | LR__1077
0d3d8     5A A9 02 F6 | 	mov	local02, local08
0d3dc     11 AA 06 F6 | 	mov	local03, #17
0d3e0     59 A7 02 F6 | 	mov	local01, local07
0d3e4     53 B9 02 F6 | 	mov	local10, local01
0d3e8     54 BD 02 F6 | 	mov	local12, local02
0d3ec     55 BF 02 F6 | 	mov	local13, local03
0d3f0     4C 00 00 FF 
0d3f4     20 64 06 F1 | 	add	objptr, ##38944
0d3f8     32 C1 02 FB | 	rdlong	local14, objptr
0d3fc     60 C3 02 F6 | 	mov	local15, local14
0d400     01 C2 66 F0 | 	shl	local15, #1
0d404     60 C3 02 F1 | 	add	local15, local14
0d408     02 C2 66 F0 | 	shl	local15, #2
0d40c     03 00 00 FF 
0d410     00 64 86 F1 | 	sub	objptr, ##1536
0d414     32 C3 02 F1 | 	add	local15, objptr
0d418     61 B9 62 FC | 	wrlong	local10, local15
0d41c     03 00 00 FF 
0d420     00 64 06 F1 | 	add	objptr, ##1536
0d424     32 B9 02 FB | 	rdlong	local10, objptr
0d428     5C C5 02 F6 | 	mov	local16, local10
0d42c     01 C4 66 F0 | 	shl	local16, #1
0d430     5C C5 02 F1 | 	add	local16, local10
0d434     02 C4 66 F0 | 	shl	local16, #2
0d438     03 00 00 FF 
0d43c     00 64 86 F1 | 	sub	objptr, ##1536
0d440     32 C5 02 F1 | 	add	local16, objptr
0d444     04 C4 06 F1 | 	add	local16, #4
0d448     62 BD 62 FC | 	wrlong	local12, local16
0d44c     03 00 00 FF 
0d450     00 64 06 F1 | 	add	objptr, ##1536
0d454     32 B9 02 FB | 	rdlong	local10, objptr
0d458     5C C7 02 F6 | 	mov	local17, local10
0d45c     01 C6 66 F0 | 	shl	local17, #1
0d460     5C C7 02 F1 | 	add	local17, local10
0d464     02 C6 66 F0 | 	shl	local17, #2
0d468     03 00 00 FF 
0d46c     00 64 86 F1 | 	sub	objptr, ##1536
0d470     32 C7 02 F1 | 	add	local17, objptr
0d474     08 C6 06 F1 | 	add	local17, #8
0d478     63 BF 62 FC | 	wrlong	local13, local17
0d47c     03 00 00 FF 
0d480     00 64 06 F1 | 	add	objptr, ##1536
0d484     32 B9 02 FB | 	rdlong	local10, objptr
0d488     01 B8 06 F1 | 	add	local10, #1
0d48c     32 B9 62 FC | 	wrlong	local10, objptr
0d490     4C 00 00 FF 
0d494     20 64 86 F1 | 	sub	objptr, ##38944
0d498                 | ' t2.result.twowords(1)=numpar
0d498                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d498                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d498                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d498     FF FF 7F FF 
0d49c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d4a0     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d4a4     15 AA 06 F6 | 	mov	local03, #21
0d4a8     53 B9 02 F6 | 	mov	local10, local01
0d4ac     54 BD 02 F6 | 	mov	local12, local02
0d4b0     55 BF 02 F6 | 	mov	local13, local03
0d4b4     4C 00 00 FF 
0d4b8     20 64 06 F1 | 	add	objptr, ##38944
0d4bc     32 C1 02 FB | 	rdlong	local14, objptr
0d4c0     60 C3 02 F6 | 	mov	local15, local14
0d4c4     01 C2 66 F0 | 	shl	local15, #1
0d4c8     60 C3 02 F1 | 	add	local15, local14
0d4cc     02 C2 66 F0 | 	shl	local15, #2
0d4d0     03 00 00 FF 
0d4d4     00 64 86 F1 | 	sub	objptr, ##1536
0d4d8     32 C3 02 F1 | 	add	local15, objptr
0d4dc     61 B9 62 FC | 	wrlong	local10, local15
0d4e0     03 00 00 FF 
0d4e4     00 64 06 F1 | 	add	objptr, ##1536
0d4e8     32 C7 02 FB | 	rdlong	local17, objptr
0d4ec     63 C5 02 F6 | 	mov	local16, local17
0d4f0     01 C4 66 F0 | 	shl	local16, #1
0d4f4     63 C5 02 F1 | 	add	local16, local17
0d4f8     02 C4 66 F0 | 	shl	local16, #2
0d4fc     03 00 00 FF 
0d500     00 64 86 F1 | 	sub	objptr, ##1536
0d504     32 C5 02 F1 | 	add	local16, objptr
0d508     04 C4 06 F1 | 	add	local16, #4
0d50c     62 BD 62 FC | 	wrlong	local12, local16
0d510     03 00 00 FF 
0d514     00 64 06 F1 | 	add	objptr, ##1536
0d518     32 C5 02 FB | 	rdlong	local16, objptr
0d51c     62 C7 02 F6 | 	mov	local17, local16
0d520     01 C6 66 F0 | 	shl	local17, #1
0d524     62 C7 02 F1 | 	add	local17, local16
0d528     02 C6 66 F0 | 	shl	local17, #2
0d52c     03 00 00 FF 
0d530     00 64 86 F1 | 	sub	objptr, ##1536
0d534     32 C7 02 F1 | 	add	local17, objptr
0d538     08 C6 06 F1 | 	add	local17, #8
0d53c     63 BF 62 FC | 	wrlong	local13, local17
0d540     03 00 00 FF 
0d544     00 64 06 F1 | 	add	objptr, ##1536
0d548     32 B9 02 FB | 	rdlong	local10, objptr
0d54c     01 B8 06 F1 | 	add	local10, #1
0d550     32 B9 62 FC | 	wrlong	local10, objptr
0d554     4C 00 00 FF 
0d558     20 64 86 F1 | 	sub	objptr, ##38944
0d55c                 | LR__1078
0d55c                 | ' return 0
0d55c     00 7A 06 F6 | 	mov	result1, #0
0d560                 | LR__1079
0d560     E7 F0 03 F6 | 	mov	ptra, fp
0d564     F2 00 A0 FD | 	call	#popregs_
0d568                 | _getvar_ret
0d568     2D 00 64 FD | 	ret
0d56c                 | 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' function execute_line (astart=0 as integer) as integer
0d56c                 | _execute_line
0d56c     04 CA 05 F6 | 	mov	COUNT_, #4
0d570     E8 00 A0 FD | 	call	#pushregs_
0d574     52 00 00 FF 
0d578     60 64 06 F1 | 	add	objptr, ##42080
0d57c     32 01 68 FC | 	wrlong	#0, objptr
0d580                 | ' 
0d580                 | ' runptr2=0
0d580                 | ' for lineptr_e=astart to lineptr-1
0d580     06 00 00 FF 
0d584     3C 64 86 F1 | 	sub	objptr, ##3132
0d588     32 93 62 FC | 	wrlong	arg01, objptr
0d58c     04 64 86 F1 | 	sub	objptr, #4
0d590     32 A7 02 FB | 	rdlong	local01, objptr
0d594     4C 00 00 FF 
0d598     20 64 86 F1 | 	sub	objptr, ##38944
0d59c                 | LR__1080
0d59c     4C 00 00 FF 
0d5a0     24 64 06 F1 | 	add	objptr, ##38948
0d5a4     32 7B 02 FB | 	rdlong	result1, objptr
0d5a8     4C 00 00 FF 
0d5ac     24 64 86 F1 | 	sub	objptr, ##38948
0d5b0     53 7B 52 F2 | 	cmps	result1, local01 wc
0d5b4     98 00 90 3D |  if_ae	jmp	#LR__1081
0d5b8     4C 00 00 FF 
0d5bc     24 64 06 F1 | 	add	objptr, ##38948
0d5c0     32 7B 02 FB | 	rdlong	result1, objptr
0d5c4     3D A9 02 F6 | 	mov	local02, result1
0d5c8     01 A8 66 F0 | 	shl	local02, #1
0d5cc     3D A9 02 F1 | 	add	local02, result1
0d5d0     02 A8 66 F0 | 	shl	local02, #2
0d5d4     03 00 00 FF 
0d5d8     04 64 86 F1 | 	sub	objptr, ##1540
0d5dc     32 A9 02 F1 | 	add	local02, objptr
0d5e0     08 A8 06 F1 | 	add	local02, #8
0d5e4     54 A9 02 FB | 	rdlong	local02, local02
0d5e8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
0d5ec     02 A8 66 F0 | 	shl	local02, #2
0d5f0     04 00 00 FF 
0d5f4     1C 64 86 F1 | 	sub	objptr, ##2076
0d5f8     32 A9 02 F1 | 	add	local02, objptr
0d5fc     54 A9 02 FB | 	rdlong	local02, local02
0d600     54 AB 02 F6 | 	mov	local03, local02
0d604     13 A8 46 F7 | 	zerox	local02, #19
0d608     14 AA 46 F0 | 	shr	local03, #20
0d60c     02 AA 66 F0 | 	shl	local03, #2
0d610     2D AB 02 F1 | 	add	local03, __methods__
0d614     55 AB 02 FB | 	rdlong	local03, local03
0d618     45 00 00 FF 
0d61c     04 64 86 F1 | 	sub	objptr, ##35332
0d620     32 AD 02 F6 | 	mov	local04, objptr
0d624     54 65 02 F6 | 	mov	objptr, local02
0d628     2D AA 62 FD | 	call	local03
0d62c     56 65 02 F6 | 	mov	objptr, local04
0d630     4C 00 00 FF 
0d634     24 64 06 F1 | 	add	objptr, ##38948
0d638     32 AD 02 FB | 	rdlong	local04, objptr
0d63c     01 AC 06 F1 | 	add	local04, #1
0d640     32 AD 62 FC | 	wrlong	local04, objptr
0d644     4C 00 00 FF 
0d648     24 64 86 F1 | 	sub	objptr, ##38948
0d64c     4C FF 9F FD | 	jmp	#LR__1080
0d650                 | LR__1081
0d650                 | ' return runptr2
0d650     52 00 00 FF 
0d654     60 64 06 F1 | 	add	objptr, ##42080
0d658     32 7B 02 FB | 	rdlong	result1, objptr
0d65c     52 00 00 FF 
0d660     60 64 86 F1 | 	sub	objptr, ##42080
0d664     E7 F0 03 F6 | 	mov	ptra, fp
0d668     F2 00 A0 FD | 	call	#popregs_
0d66c                 | _execute_line_ret
0d66c     2D 00 64 FD | 	ret
0d670                 | 
0d670                 | ' 
0d670                 | ' 
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' 
0d670                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d670                 | ' 
0d670                 | ' function pop() as expr_result
0d670                 | _pop
0d670                 | ' if stackpointer=0 then
0d670     44 00 00 FF 
0d674     FC 65 06 F1 | 	add	objptr, ##35324
0d678     32 7B 0A FB | 	rdlong	result1, objptr wz
0d67c     44 00 00 FF 
0d680     FC 65 86 F1 | 	sub	objptr, ##35324
0d684     FF 84 06 A6 |  if_e	mov	_var03, #255
0d688     18 80 06 A6 |  if_e	mov	_var01, #24
0d68c     60 00 90 AD |  if_e	jmp	#LR__1090
0d690     44 00 00 FF 
0d694     FC 65 06 F1 | 	add	objptr, ##35324
0d698     32 7B 02 FB | 	rdlong	result1, objptr
0d69c     01 7A 86 F1 | 	sub	result1, #1
0d6a0     32 7B 62 FC | 	wrlong	result1, objptr
0d6a4     3D 7F 02 F6 | 	mov	result3, result1
0d6a8     01 7E 66 F0 | 	shl	result3, #1
0d6ac     3D 7F 02 F1 | 	add	result3, result1
0d6b0     02 7E 66 F0 | 	shl	result3, #2
0d6b4     0C 00 00 FF 
0d6b8     0C 64 86 F1 | 	sub	objptr, ##6156
0d6bc     32 7F 02 F1 | 	add	result3, objptr
0d6c0     3F 81 02 FB | 	rdlong	_var01, result3
0d6c4     04 7E 06 F1 | 	add	result3, #4
0d6c8     3F 83 02 FB | 	rdlong	_var02, result3
0d6cc     3D 7D 02 F6 | 	mov	result2, result1
0d6d0     01 7C 66 F0 | 	shl	result2, #1
0d6d4     3D 7D 02 F1 | 	add	result2, result1
0d6d8     02 7C 66 F0 | 	shl	result2, #2
0d6dc     32 7D 02 F1 | 	add	result2, objptr
0d6e0     08 7C 06 F1 | 	add	result2, #8
0d6e4     3E 85 02 FB | 	rdlong	_var03, result2
0d6e8     38 00 00 FF 
0d6ec     F0 65 86 F1 | 	sub	objptr, ##29168
0d6f0                 | LR__1090
0d6f0                 | ' return t1
0d6f0     41 7D 02 F6 | 	mov	result2, _var02
0d6f4     42 7F 02 F6 | 	mov	result3, _var03
0d6f8     40 7B 02 F6 | 	mov	result1, _var01
0d6fc                 | _pop_ret
0d6fc     2D 00 64 FD | 	ret
0d700                 | 
0d700                 | ' 
0d700                 | ' sub push(t1 as expr_result )
0d700                 | _push
0d700                 | ' if stackpointer<maxstack then 
0d700     44 00 00 FF 
0d704     FC 65 06 F1 | 	add	objptr, ##35324
0d708     32 81 02 FB | 	rdlong	_var01, objptr
0d70c     44 00 00 FF 
0d710     FC 65 86 F1 | 	sub	objptr, ##35324
0d714     01 00 00 FF 
0d718     00 80 56 F2 | 	cmps	_var01, ##512 wc
0d71c     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d720     49 81 02 FB | 	rdlong	_var01, arg01
0d724     04 92 06 F1 | 	add	arg01, #4
0d728     49 83 02 FB | 	rdlong	_var02, arg01
0d72c     04 92 06 F1 | 	add	arg01, #4
0d730     49 93 02 FB | 	rdlong	arg01, arg01
0d734     44 00 00 FF 
0d738     FC 65 06 F1 | 	add	objptr, ##35324
0d73c     32 85 02 FB | 	rdlong	_var03, objptr
0d740     42 87 02 F6 | 	mov	_var04, _var03
0d744     01 86 66 F0 | 	shl	_var04, #1
0d748     42 87 02 F1 | 	add	_var04, _var03
0d74c     02 86 66 F0 | 	shl	_var04, #2
0d750     0C 00 00 FF 
0d754     0C 64 86 F1 | 	sub	objptr, ##6156
0d758     32 87 02 F1 | 	add	_var04, objptr
0d75c     43 81 62 FC | 	wrlong	_var01, _var04
0d760     0C 00 00 FF 
0d764     0C 64 06 F1 | 	add	objptr, ##6156
0d768     32 87 02 FB | 	rdlong	_var04, objptr
0d76c     43 85 02 F6 | 	mov	_var03, _var04
0d770     01 84 66 F0 | 	shl	_var03, #1
0d774     43 85 02 F1 | 	add	_var03, _var04
0d778     02 84 66 F0 | 	shl	_var03, #2
0d77c     0C 00 00 FF 
0d780     0C 64 86 F1 | 	sub	objptr, ##6156
0d784     32 85 02 F1 | 	add	_var03, objptr
0d788     04 84 06 F1 | 	add	_var03, #4
0d78c     42 83 62 FC | 	wrlong	_var02, _var03
0d790     0C 00 00 FF 
0d794     0C 64 06 F1 | 	add	objptr, ##6156
0d798     32 87 02 FB | 	rdlong	_var04, objptr
0d79c     43 85 02 F6 | 	mov	_var03, _var04
0d7a0     01 84 66 F0 | 	shl	_var03, #1
0d7a4     43 85 02 F1 | 	add	_var03, _var04
0d7a8     02 84 66 F0 | 	shl	_var03, #2
0d7ac     0C 00 00 FF 
0d7b0     0C 64 86 F1 | 	sub	objptr, ##6156
0d7b4     32 85 02 F1 | 	add	_var03, objptr
0d7b8     08 84 06 F1 | 	add	_var03, #8
0d7bc     42 93 62 FC | 	wrlong	arg01, _var03
0d7c0     0C 00 00 FF 
0d7c4     0C 64 06 F1 | 	add	objptr, ##6156
0d7c8     32 81 02 FB | 	rdlong	_var01, objptr
0d7cc     01 80 06 F1 | 	add	_var01, #1
0d7d0     32 81 62 FC | 	wrlong	_var01, objptr
0d7d4     44 00 00 FF 
0d7d8     FC 65 86 F1 | 	sub	objptr, ##35324
0d7dc                 | LR__1100
0d7dc                 | _push_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' ' -------------------------------- Runtime converting functions
0d7e0                 | ' 
0d7e0                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d7e0                 | ' 
0d7e0                 | ' function  convertstring(psaddr as ulong) as string
0d7e0                 | _convertstring
0d7e0     04 CA 05 F6 | 	mov	COUNT_, #4
0d7e4     E8 00 A0 FD | 	call	#pushregs_
0d7e8     49 A7 02 F6 | 	mov	local01, arg01
0d7ec     A0 37 B1 FD | 	call	#_pslpeek
0d7f0     3D A9 02 F6 | 	mov	local02, result1
0d7f4     96 01 00 FF 
0d7f8     CF AA 06 F6 | 	mov	local03, ##@LR__5942
0d7fc                 | ' l=pslpeek(psaddr) 
0d7fc                 | ' s="" 
0d7fc                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d7fc     01 AC 06 F6 | 	mov	local04, #1
0d800     01 A8 06 F1 | 	add	local02, #1
0d804                 | LR__1110
0d804     54 AD 52 F2 | 	cmps	local04, local02 wc
0d808     30 00 90 3D |  if_ae	jmp	#LR__1111
0d80c     53 93 02 F6 | 	mov	arg01, local01
0d810     03 92 06 F1 | 	add	arg01, #3
0d814     56 93 02 F1 | 	add	arg01, local04
0d818     2C 37 B1 FD | 	call	#_pspeek
0d81c     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
0d820     44 8C B1 FD | 	call	#__system__Chr_S
0d824     3D 95 02 F6 | 	mov	arg02, result1
0d828     55 93 02 F6 | 	mov	arg01, local03
0d82c     28 72 B1 FD | 	call	#__system___string_concat
0d830     3D AB 02 F6 | 	mov	local03, result1
0d834     01 AC 06 F1 | 	add	local04, #1
0d838     C8 FF 9F FD | 	jmp	#LR__1110
0d83c                 | LR__1111
0d83c                 | ' return s
0d83c     55 7B 02 F6 | 	mov	result1, local03
0d840     E7 F0 03 F6 | 	mov	ptra, fp
0d844     F2 00 A0 FD | 	call	#popregs_
0d848                 | _convertstring_ret
0d848     2D 00 64 FD | 	ret
0d84c                 | 
0d84c                 | ' 
0d84c                 | ' ' converts a variable to an integer
0d84c                 | ' 
0d84c                 | ' function converttoint (t1 as expr_result) as integer 
0d84c                 | _converttoint
0d84c     02 CA 05 F6 | 	mov	COUNT_, #2
0d850     E8 00 A0 FD | 	call	#pushregs_
0d854     49 A7 02 F6 | 	mov	local01, arg01
0d858                 | ' 
0d858                 | ' select case t1.result_type
0d858     08 A6 06 F1 | 	add	local01, #8
0d85c     53 A9 02 FB | 	rdlong	local02, local01
0d860     08 A6 86 F1 | 	sub	local01, #8
0d864     1C A8 0E F2 | 	cmp	local02, #28 wz
0d868     2C 00 90 AD |  if_e	jmp	#LR__1120
0d86c     1D A8 0E F2 | 	cmp	local02, #29 wz
0d870     2C 00 90 AD |  if_e	jmp	#LR__1121
0d874     1E A8 0E F2 | 	cmp	local02, #30 wz
0d878     2C 00 90 AD |  if_e	jmp	#LR__1122
0d87c     1F A8 0E F2 | 	cmp	local02, #31 wz
0d880     34 00 90 AD |  if_e	jmp	#LR__1123
0d884     2B A8 0E F2 | 	cmp	local02, #43 wz
0d888     44 00 90 AD |  if_e	jmp	#LR__1124
0d88c     2C A8 0E F2 | 	cmp	local02, #44 wz
0d890     5C 00 90 AD |  if_e	jmp	#LR__1125
0d894     60 00 90 FD | 	jmp	#LR__1126
0d898                 | LR__1120
0d898     53 7B 02 FB | 	rdlong	result1, local01
0d89c     5C 00 90 FD | 	jmp	#LR__1127
0d8a0                 | LR__1121
0d8a0     53 7B 02 FB | 	rdlong	result1, local01
0d8a4     54 00 90 FD | 	jmp	#LR__1127
0d8a8                 | LR__1122
0d8a8     53 93 02 FB | 	rdlong	arg01, local01
0d8ac     01 94 06 F6 | 	mov	arg02, #1
0d8b0     E0 9C B1 FD | 	call	#__system___float_tointeger
0d8b4     44 00 90 FD | 	jmp	#LR__1127
0d8b8                 | LR__1123
0d8b8     53 93 02 FB | 	rdlong	arg01, local01
0d8bc     28 A0 B1 FD | 	call	#__system____builtin_atof
0d8c0     3D 93 02 F6 | 	mov	arg01, result1
0d8c4     01 94 06 F6 | 	mov	arg02, #1
0d8c8     C8 9C B1 FD | 	call	#__system___float_tointeger
0d8cc     2C 00 90 FD | 	jmp	#LR__1127
0d8d0                 | LR__1124
0d8d0     53 93 02 FB | 	rdlong	arg01, local01
0d8d4     08 FF BF FD | 	call	#_convertstring
0d8d8     3D 93 02 F6 | 	mov	arg01, result1
0d8dc     08 A0 B1 FD | 	call	#__system____builtin_atof
0d8e0     3D 93 02 F6 | 	mov	arg01, result1
0d8e4     01 94 06 F6 | 	mov	arg02, #1
0d8e8     A8 9C B1 FD | 	call	#__system___float_tointeger
0d8ec     0C 00 90 FD | 	jmp	#LR__1127
0d8f0                 | LR__1125
0d8f0     53 7B 02 FB | 	rdlong	result1, local01
0d8f4     04 00 90 FD | 	jmp	#LR__1127
0d8f8                 | LR__1126
0d8f8     00 7A 06 F6 | 	mov	result1, #0
0d8fc                 | LR__1127
0d8fc     E7 F0 03 F6 | 	mov	ptra, fp
0d900     F2 00 A0 FD | 	call	#popregs_
0d904                 | _converttoint_ret
0d904     2D 00 64 FD | 	ret
0d908                 | 
0d908                 | ' 
0d908                 | ' ' converts a variable to float
0d908                 | ' 
0d908                 | ' function converttofloat (t1 as expr_result) as single
0d908                 | _converttofloat
0d908     03 CA 05 F6 | 	mov	COUNT_, #3
0d90c     E8 00 A0 FD | 	call	#pushregs_
0d910     49 A7 02 F6 | 	mov	local01, arg01
0d914                 | ' 
0d914                 | ' select case t1.result_type
0d914     08 A6 06 F1 | 	add	local01, #8
0d918     53 A9 02 FB | 	rdlong	local02, local01
0d91c     08 A6 86 F1 | 	sub	local01, #8
0d920     1C A8 0E F2 | 	cmp	local02, #28 wz
0d924     24 00 90 AD |  if_e	jmp	#LR__1130
0d928     1D A8 0E F2 | 	cmp	local02, #29 wz
0d92c     38 00 90 AD |  if_e	jmp	#LR__1131
0d930     1E A8 0E F2 | 	cmp	local02, #30 wz
0d934     3C 00 90 AD |  if_e	jmp	#LR__1132
0d938     1F A8 0E F2 | 	cmp	local02, #31 wz
0d93c     3C 00 90 AD |  if_e	jmp	#LR__1133
0d940     2B A8 0E F2 | 	cmp	local02, #43 wz
0d944     40 00 90 AD |  if_e	jmp	#LR__1134
0d948     50 00 90 FD | 	jmp	#LR__1135
0d94c                 | LR__1130
0d94c     53 93 02 FB | 	rdlong	arg01, local01
0d950     49 93 52 F6 | 	abs	arg01, arg01 wc
0d954     1F AA C6 C9 |  if_b	decod	local03, #31
0d958     00 AA 06 36 |  if_ae	mov	local03, #0
0d95c     68 93 B1 FD | 	call	#__system___float_fromuns
0d960     55 7B 62 F5 | 	xor	result1, local03
0d964     38 00 90 FD | 	jmp	#LR__1136
0d968                 | LR__1131
0d968     53 93 02 FB | 	rdlong	arg01, local01
0d96c     58 93 B1 FD | 	call	#__system___float_fromuns
0d970     2C 00 90 FD | 	jmp	#LR__1136
0d974                 | LR__1132
0d974     53 7B 02 FB | 	rdlong	result1, local01
0d978     24 00 90 FD | 	jmp	#LR__1136
0d97c                 | LR__1133
0d97c     53 93 02 FB | 	rdlong	arg01, local01
0d980     64 9F B1 FD | 	call	#__system____builtin_atof
0d984     18 00 90 FD | 	jmp	#LR__1136
0d988                 | LR__1134
0d988     53 93 02 FB | 	rdlong	arg01, local01
0d98c     50 FE BF FD | 	call	#_convertstring
0d990     3D 93 02 F6 | 	mov	arg01, result1
0d994     50 9F B1 FD | 	call	#__system____builtin_atof
0d998     04 00 90 FD | 	jmp	#LR__1136
0d99c                 | LR__1135
0d99c     00 7A 06 F6 | 	mov	result1, #0
0d9a0                 | LR__1136
0d9a0     E7 F0 03 F6 | 	mov	ptra, fp
0d9a4     F2 00 A0 FD | 	call	#popregs_
0d9a8                 | _converttofloat_ret
0d9a8     2D 00 64 FD | 	ret
0d9ac                 | 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' '-------------------- abs
0d9ac                 | ' 
0d9ac                 | ' sub do_abs
0d9ac                 | _do_abs
0d9ac     01 CA 05 F6 | 	mov	COUNT_, #1
0d9b0     E8 00 A0 FD | 	call	#pushregs_
0d9b4     0C F0 07 F1 | 	add	ptra, #12
0d9b8     B4 FC BF FD | 	call	#_pop
0d9bc     3F A7 02 F6 | 	mov	local01, result3
0d9c0     E7 7A 62 FC | 	wrlong	result1, fp
0d9c4     04 CE 05 F1 | 	add	fp, #4
0d9c8     E7 7C 62 FC | 	wrlong	result2, fp
0d9cc     04 CE 05 F1 | 	add	fp, #4
0d9d0     E7 A6 62 FC | 	wrlong	local01, fp
0d9d4                 | ' 
0d9d4                 | ' t1=pop()
0d9d4                 | ' if t1.result_type=result_int then 
0d9d4     08 CE 85 F1 | 	sub	fp, #8
0d9d8     1C A6 0E F2 | 	cmp	local01, #28 wz
0d9dc     E7 92 02 AB |  if_e	rdlong	arg01, fp
0d9e0     49 A7 42 A6 |  if_e	abs	local01, arg01
0d9e4     E7 A6 62 AC |  if_e	wrlong	local01, fp
0d9e8     2C 00 90 AD |  if_e	jmp	#LR__1140
0d9ec     08 CE 05 F1 | 	add	fp, #8
0d9f0     E7 A6 02 FB | 	rdlong	local01, fp
0d9f4     08 CE 85 F1 | 	sub	fp, #8
0d9f8     1E A6 0E F2 | 	cmp	local01, #30 wz
0d9fc     E7 7A 02 AB |  if_e	rdlong	result1, fp
0da00     1F 7A 06 A4 |  if_e	bitl	result1, #31
0da04     E7 7A 62 AC |  if_e	wrlong	result1, fp
0da08     08 CE 05 51 |  if_ne	add	fp, #8
0da0c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
0da10     08 CE 85 51 |  if_ne	sub	fp, #8
0da14     E7 50 68 5C |  if_ne	wrlong	#40, fp
0da18                 | LR__1140
0da18     E7 92 02 F6 | 	mov	arg01, fp
0da1c     E0 FC BF FD | 	call	#_push
0da20     E7 F0 03 F6 | 	mov	ptra, fp
0da24     F2 00 A0 FD | 	call	#popregs_
0da28                 | _do_abs_ret
0da28     2D 00 64 FD | 	ret
0da2c                 | 
0da2c                 | ' 
0da2c                 | ' '-------------------- acos
0da2c                 | ' 
0da2c                 | ' sub do_acos
0da2c                 | _do_acos
0da2c     00 CA 05 F6 | 	mov	COUNT_, #0
0da30     E8 00 A0 FD | 	call	#pushregs_
0da34     10 F0 07 F1 | 	add	ptra, #16
0da38     4C 00 00 FF 
0da3c     24 64 06 F1 | 	add	objptr, ##38948
0da40     32 97 02 FB | 	rdlong	arg03, objptr
0da44     4B 95 02 F6 | 	mov	arg02, arg03
0da48     01 94 66 F0 | 	shl	arg02, #1
0da4c     4B 95 02 F1 | 	add	arg02, arg03
0da50     02 94 66 F0 | 	shl	arg02, #2
0da54     03 00 00 FF 
0da58     04 64 86 F1 | 	sub	objptr, ##1540
0da5c     32 95 02 F1 | 	add	arg02, objptr
0da60     4A 97 02 FB | 	rdlong	arg03, arg02
0da64                 | ' 
0da64                 | ' numpar=compiledline(lineptr_e).result.uresult
0da64                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da64     02 96 16 F2 | 	cmp	arg03, #2 wc
0da68     49 00 00 FF 
0da6c     20 64 86 F1 | 	sub	objptr, ##37408
0da70     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0da74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da78     00 92 06 F6 | 	mov	arg01, #0
0da7c     00 C5 B1 FD | 	call	#__system___getiolock_0622
0da80     3D 93 02 F6 | 	mov	arg01, result1
0da84     74 6F B1 FD | 	call	#__system___lockmem
0da88     96 01 00 FF 
0da8c     D0 94 06 F6 | 	mov	arg02, ##@LR__5943
0da90     00 92 06 F6 | 	mov	arg01, #0
0da94     00 96 06 F6 | 	mov	arg03, #0
0da98     54 7C B1 FD | 	call	#__system___basic_print_string
0da9c     00 92 06 F6 | 	mov	arg01, #0
0daa0     DC C4 B1 FD | 	call	#__system___getiolock_0622
0daa4     3D 01 68 FC | 	wrlong	#0, result1
0daa8     27 92 06 F6 | 	mov	arg01, #39
0daac     00 94 06 F6 | 	mov	arg02, #0
0dab0     20 32 B1 FD | 	call	#_printerror
0dab4     64 00 90 FD | 	jmp	#LR__1151
0dab8                 | LR__1150
0dab8     B4 FB BF FD | 	call	#_pop
0dabc     3F 97 02 F6 | 	mov	arg03, result3
0dac0     E7 7A 62 FC | 	wrlong	result1, fp
0dac4     04 CE 05 F1 | 	add	fp, #4
0dac8     E7 7C 62 FC | 	wrlong	result2, fp
0dacc     04 CE 05 F1 | 	add	fp, #4
0dad0     E7 96 62 FC | 	wrlong	arg03, fp
0dad4     08 CE 85 F1 | 	sub	fp, #8
0dad8     E7 92 02 F6 | 	mov	arg01, fp
0dadc     28 FE BF FD | 	call	#_converttofloat
0dae0     3D 93 02 F6 | 	mov	arg01, result1
0dae4     34 A1 B1 FD | 	call	#__system____builtin_acosf
0dae8     3D 93 02 F6 | 	mov	arg01, result1
0daec     54 00 00 FF 
0daf0     88 64 06 F1 | 	add	objptr, ##43144
0daf4     32 95 02 FB | 	rdlong	arg02, objptr
0daf8     54 00 00 FF 
0dafc     88 64 86 F1 | 	sub	objptr, ##43144
0db00     C8 95 B1 FD | 	call	#__system___float_mul
0db04     E7 7A 62 FC | 	wrlong	result1, fp
0db08     08 CE 05 F1 | 	add	fp, #8
0db0c     E7 3C 68 FC | 	wrlong	#30, fp
0db10     08 CE 85 F1 | 	sub	fp, #8
0db14     E7 92 02 F6 | 	mov	arg01, fp
0db18     E4 FB BF FD | 	call	#_push
0db1c                 | LR__1151
0db1c     E7 F0 03 F6 | 	mov	ptra, fp
0db20     F2 00 A0 FD | 	call	#popregs_
0db24                 | _do_acos_ret
0db24     2D 00 64 FD | 	ret
0db28                 | 
0db28                 | ' 
0db28                 | ' '-------------------- asc
0db28                 | ' 
0db28                 | ' sub do_asc
0db28                 | _do_asc
0db28     00 CA 05 F6 | 	mov	COUNT_, #0
0db2c     E8 00 A0 FD | 	call	#pushregs_
0db30     14 F0 07 F1 | 	add	ptra, #20
0db34     4C 00 00 FF 
0db38     24 64 06 F1 | 	add	objptr, ##38948
0db3c     32 97 02 FB | 	rdlong	arg03, objptr
0db40     4B 95 02 F6 | 	mov	arg02, arg03
0db44     01 94 66 F0 | 	shl	arg02, #1
0db48     4B 95 02 F1 | 	add	arg02, arg03
0db4c     02 94 66 F0 | 	shl	arg02, #2
0db50     03 00 00 FF 
0db54     04 64 86 F1 | 	sub	objptr, ##1540
0db58     32 95 02 F1 | 	add	arg02, objptr
0db5c     4A 97 02 FB | 	rdlong	arg03, arg02
0db60                 | ' 
0db60                 | ' numpar=compiledline(lineptr_e).result.uresult
0db60                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db60     02 96 16 F2 | 	cmp	arg03, #2 wc
0db64     49 00 00 FF 
0db68     20 64 86 F1 | 	sub	objptr, ##37408
0db6c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0db70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0db74     00 92 06 F6 | 	mov	arg01, #0
0db78     04 C4 B1 FD | 	call	#__system___getiolock_0622
0db7c     3D 93 02 F6 | 	mov	arg01, result1
0db80     78 6E B1 FD | 	call	#__system___lockmem
0db84     96 01 00 FF 
0db88     D7 94 06 F6 | 	mov	arg02, ##@LR__5944
0db8c     00 92 06 F6 | 	mov	arg01, #0
0db90     00 96 06 F6 | 	mov	arg03, #0
0db94     58 7B B1 FD | 	call	#__system___basic_print_string
0db98     00 92 06 F6 | 	mov	arg01, #0
0db9c     E0 C3 B1 FD | 	call	#__system___getiolock_0622
0dba0     3D 01 68 FC | 	wrlong	#0, result1
0dba4     27 92 06 F6 | 	mov	arg01, #39
0dba8     00 94 06 F6 | 	mov	arg02, #0
0dbac     24 31 B1 FD | 	call	#_printerror
0dbb0     B4 00 90 FD | 	jmp	#LR__1163
0dbb4                 | LR__1160
0dbb4     B8 FA BF FD | 	call	#_pop
0dbb8     3F 97 02 F6 | 	mov	arg03, result3
0dbbc     E7 7A 62 FC | 	wrlong	result1, fp
0dbc0     04 CE 05 F1 | 	add	fp, #4
0dbc4     E7 7C 62 FC | 	wrlong	result2, fp
0dbc8     04 CE 05 F1 | 	add	fp, #4
0dbcc     E7 96 62 FC | 	wrlong	arg03, fp
0dbd0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dbd0     08 CE 85 F1 | 	sub	fp, #8
0dbd4     2B 96 0E F2 | 	cmp	arg03, #43 wz
0dbd8     18 00 90 5D |  if_ne	jmp	#LR__1161
0dbdc     E7 92 02 FB | 	rdlong	arg01, fp
0dbe0     FC FB BF FD | 	call	#_convertstring
0dbe4     E7 7A 62 FC | 	wrlong	result1, fp
0dbe8     08 CE 05 F1 | 	add	fp, #8
0dbec     E7 3E 68 FC | 	wrlong	#31, fp
0dbf0     08 CE 85 F1 | 	sub	fp, #8
0dbf4                 | LR__1161
0dbf4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dbf4     08 CE 05 F1 | 	add	fp, #8
0dbf8     E7 96 02 FB | 	rdlong	arg03, fp
0dbfc     08 CE 85 F1 | 	sub	fp, #8
0dc00     1F 96 0E F2 | 	cmp	arg03, #31 wz
0dc04     40 00 90 AD |  if_e	jmp	#LR__1162
0dc08     00 92 06 F6 | 	mov	arg01, #0
0dc0c     70 C3 B1 FD | 	call	#__system___getiolock_0622
0dc10     3D 93 02 F6 | 	mov	arg01, result1
0dc14     E4 6D B1 FD | 	call	#__system___lockmem
0dc18     96 01 00 FF 
0dc1c     DD 94 06 F6 | 	mov	arg02, ##@LR__5945
0dc20     00 92 06 F6 | 	mov	arg01, #0
0dc24     00 96 06 F6 | 	mov	arg03, #0
0dc28     C4 7A B1 FD | 	call	#__system___basic_print_string
0dc2c     00 92 06 F6 | 	mov	arg01, #0
0dc30     4C C3 B1 FD | 	call	#__system___getiolock_0622
0dc34     3D 01 68 FC | 	wrlong	#0, result1
0dc38     0F 92 06 F6 | 	mov	arg01, #15
0dc3c     00 94 06 F6 | 	mov	arg02, #0
0dc40     90 30 B1 FD | 	call	#_printerror
0dc44     20 00 90 FD | 	jmp	#LR__1163
0dc48                 | LR__1162
0dc48     E7 7C 02 FB | 	rdlong	result2, fp
0dc4c     3E 7D C2 FA | 	rdbyte	result2, result2
0dc50     E7 7C 62 FC | 	wrlong	result2, fp
0dc54     08 CE 05 F1 | 	add	fp, #8
0dc58     E7 38 68 FC | 	wrlong	#28, fp
0dc5c     08 CE 85 F1 | 	sub	fp, #8
0dc60     E7 92 02 F6 | 	mov	arg01, fp
0dc64     98 FA BF FD | 	call	#_push
0dc68                 | LR__1163
0dc68     E7 F0 03 F6 | 	mov	ptra, fp
0dc6c     F2 00 A0 FD | 	call	#popregs_
0dc70                 | _do_asc_ret
0dc70     2D 00 64 FD | 	ret
0dc74                 | 
0dc74                 | ' 
0dc74                 | ' '-------------------- asin
0dc74                 | ' 
0dc74                 | ' sub do_asin
0dc74                 | _do_asin
0dc74     00 CA 05 F6 | 	mov	COUNT_, #0
0dc78     E8 00 A0 FD | 	call	#pushregs_
0dc7c     10 F0 07 F1 | 	add	ptra, #16
0dc80     4C 00 00 FF 
0dc84     24 64 06 F1 | 	add	objptr, ##38948
0dc88     32 97 02 FB | 	rdlong	arg03, objptr
0dc8c     4B 95 02 F6 | 	mov	arg02, arg03
0dc90     01 94 66 F0 | 	shl	arg02, #1
0dc94     4B 95 02 F1 | 	add	arg02, arg03
0dc98     02 94 66 F0 | 	shl	arg02, #2
0dc9c     03 00 00 FF 
0dca0     04 64 86 F1 | 	sub	objptr, ##1540
0dca4     32 95 02 F1 | 	add	arg02, objptr
0dca8     4A 97 02 FB | 	rdlong	arg03, arg02
0dcac                 | ' 
0dcac                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcac                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dcac     02 96 16 F2 | 	cmp	arg03, #2 wc
0dcb0     49 00 00 FF 
0dcb4     20 64 86 F1 | 	sub	objptr, ##37408
0dcb8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dcbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dcc0     00 92 06 F6 | 	mov	arg01, #0
0dcc4     B8 C2 B1 FD | 	call	#__system___getiolock_0622
0dcc8     3D 93 02 F6 | 	mov	arg01, result1
0dccc     2C 6D B1 FD | 	call	#__system___lockmem
0dcd0     96 01 00 FF 
0dcd4     E3 94 06 F6 | 	mov	arg02, ##@LR__5946
0dcd8     00 92 06 F6 | 	mov	arg01, #0
0dcdc     00 96 06 F6 | 	mov	arg03, #0
0dce0     0C 7A B1 FD | 	call	#__system___basic_print_string
0dce4     00 92 06 F6 | 	mov	arg01, #0
0dce8     94 C2 B1 FD | 	call	#__system___getiolock_0622
0dcec     3D 01 68 FC | 	wrlong	#0, result1
0dcf0     27 92 06 F6 | 	mov	arg01, #39
0dcf4     00 94 06 F6 | 	mov	arg02, #0
0dcf8     D8 2F B1 FD | 	call	#_printerror
0dcfc     64 00 90 FD | 	jmp	#LR__1171
0dd00                 | LR__1170
0dd00     6C F9 BF FD | 	call	#_pop
0dd04     3F 97 02 F6 | 	mov	arg03, result3
0dd08     E7 7A 62 FC | 	wrlong	result1, fp
0dd0c     04 CE 05 F1 | 	add	fp, #4
0dd10     E7 7C 62 FC | 	wrlong	result2, fp
0dd14     04 CE 05 F1 | 	add	fp, #4
0dd18     E7 96 62 FC | 	wrlong	arg03, fp
0dd1c     08 CE 85 F1 | 	sub	fp, #8
0dd20     E7 92 02 F6 | 	mov	arg01, fp
0dd24     E0 FB BF FD | 	call	#_converttofloat
0dd28     3D 93 02 F6 | 	mov	arg01, result1
0dd2c     A0 9E B1 FD | 	call	#__system____builtin_asinf
0dd30     3D 93 02 F6 | 	mov	arg01, result1
0dd34     54 00 00 FF 
0dd38     88 64 06 F1 | 	add	objptr, ##43144
0dd3c     32 95 02 FB | 	rdlong	arg02, objptr
0dd40     54 00 00 FF 
0dd44     88 64 86 F1 | 	sub	objptr, ##43144
0dd48     80 93 B1 FD | 	call	#__system___float_mul
0dd4c     E7 7A 62 FC | 	wrlong	result1, fp
0dd50     08 CE 05 F1 | 	add	fp, #8
0dd54     E7 3C 68 FC | 	wrlong	#30, fp
0dd58     08 CE 85 F1 | 	sub	fp, #8
0dd5c     E7 92 02 F6 | 	mov	arg01, fp
0dd60     9C F9 BF FD | 	call	#_push
0dd64                 | LR__1171
0dd64     E7 F0 03 F6 | 	mov	ptra, fp
0dd68     F2 00 A0 FD | 	call	#popregs_
0dd6c                 | _do_asin_ret
0dd6c     2D 00 64 FD | 	ret
0dd70                 | 
0dd70                 | ' 
0dd70                 | ' '-------------------- atn
0dd70                 | ' 
0dd70                 | ' sub do_atn
0dd70                 | _do_atn
0dd70     00 CA 05 F6 | 	mov	COUNT_, #0
0dd74     E8 00 A0 FD | 	call	#pushregs_
0dd78     10 F0 07 F1 | 	add	ptra, #16
0dd7c     4C 00 00 FF 
0dd80     24 64 06 F1 | 	add	objptr, ##38948
0dd84     32 97 02 FB | 	rdlong	arg03, objptr
0dd88     4B 95 02 F6 | 	mov	arg02, arg03
0dd8c     01 94 66 F0 | 	shl	arg02, #1
0dd90     4B 95 02 F1 | 	add	arg02, arg03
0dd94     02 94 66 F0 | 	shl	arg02, #2
0dd98     03 00 00 FF 
0dd9c     04 64 86 F1 | 	sub	objptr, ##1540
0dda0     32 95 02 F1 | 	add	arg02, objptr
0dda4     4A 97 02 FB | 	rdlong	arg03, arg02
0dda8                 | ' 
0dda8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dda8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dda8     02 96 16 F2 | 	cmp	arg03, #2 wc
0ddac     49 00 00 FF 
0ddb0     20 64 86 F1 | 	sub	objptr, ##37408
0ddb4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ddb8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0ddbc     00 92 06 F6 | 	mov	arg01, #0
0ddc0     BC C1 B1 FD | 	call	#__system___getiolock_0622
0ddc4     3D 93 02 F6 | 	mov	arg01, result1
0ddc8     30 6C B1 FD | 	call	#__system___lockmem
0ddcc     96 01 00 FF 
0ddd0     EA 94 06 F6 | 	mov	arg02, ##@LR__5947
0ddd4     00 92 06 F6 | 	mov	arg01, #0
0ddd8     00 96 06 F6 | 	mov	arg03, #0
0dddc     10 79 B1 FD | 	call	#__system___basic_print_string
0dde0     00 92 06 F6 | 	mov	arg01, #0
0dde4     98 C1 B1 FD | 	call	#__system___getiolock_0622
0dde8     3D 01 68 FC | 	wrlong	#0, result1
0ddec     27 92 06 F6 | 	mov	arg01, #39
0ddf0     00 94 06 F6 | 	mov	arg02, #0
0ddf4     DC 2E B1 FD | 	call	#_printerror
0ddf8     6C 00 90 FD | 	jmp	#LR__1181
0ddfc                 | LR__1180
0ddfc     70 F8 BF FD | 	call	#_pop
0de00     3F 97 02 F6 | 	mov	arg03, result3
0de04     E7 7A 62 FC | 	wrlong	result1, fp
0de08     04 CE 05 F1 | 	add	fp, #4
0de0c     E7 7C 62 FC | 	wrlong	result2, fp
0de10     04 CE 05 F1 | 	add	fp, #4
0de14     E7 96 62 FC | 	wrlong	arg03, fp
0de18     08 CE 85 F1 | 	sub	fp, #8
0de1c     E7 92 02 F6 | 	mov	arg01, fp
0de20     E4 FA BF FD | 	call	#_converttofloat
0de24     3D 93 02 F6 | 	mov	arg01, result1
0de28     00 C0 1F FF 
0de2c     00 94 06 F6 | 	mov	arg02, ##1065353216
0de30     34 9E B1 FD | 	call	#__system____builtin_atan2f
0de34     3D 93 02 F6 | 	mov	arg01, result1
0de38     54 00 00 FF 
0de3c     88 64 06 F1 | 	add	objptr, ##43144
0de40     32 95 02 FB | 	rdlong	arg02, objptr
0de44     54 00 00 FF 
0de48     88 64 86 F1 | 	sub	objptr, ##43144
0de4c     7C 92 B1 FD | 	call	#__system___float_mul
0de50     E7 7A 62 FC | 	wrlong	result1, fp
0de54     08 CE 05 F1 | 	add	fp, #8
0de58     E7 3C 68 FC | 	wrlong	#30, fp
0de5c     08 CE 85 F1 | 	sub	fp, #8
0de60     E7 92 02 F6 | 	mov	arg01, fp
0de64     98 F8 BF FD | 	call	#_push
0de68                 | LR__1181
0de68     E7 F0 03 F6 | 	mov	ptra, fp
0de6c     F2 00 A0 FD | 	call	#popregs_
0de70                 | _do_atn_ret
0de70     2D 00 64 FD | 	ret
0de74                 | 
0de74                 | ' 
0de74                 | ' '-------------------- beep
0de74                 | ' 
0de74                 | ' sub do_beep
0de74                 | _do_beep
0de74     02 CA 05 F6 | 	mov	COUNT_, #2
0de78     E8 00 A0 FD | 	call	#pushregs_
0de7c     1C F0 07 F1 | 	add	ptra, #28
0de80     EC F7 BF FD | 	call	#_pop
0de84     3D 9F 02 F6 | 	mov	arg07, result1
0de88     3E 9D 02 F6 | 	mov	arg06, result2
0de8c     3F A7 02 F6 | 	mov	local01, result3
0de90     0C CE 05 F1 | 	add	fp, #12
0de94     E7 9E 62 FC | 	wrlong	arg07, fp
0de98     04 CE 05 F1 | 	add	fp, #4
0de9c     E7 9C 62 FC | 	wrlong	arg06, fp
0dea0     04 CE 05 F1 | 	add	fp, #4
0dea4     E7 A6 62 FC | 	wrlong	local01, fp
0dea8     14 CE 85 F1 | 	sub	fp, #20
0deac     C0 F7 BF FD | 	call	#_pop
0deb0     E7 7A 62 FC | 	wrlong	result1, fp
0deb4     04 CE 05 F1 | 	add	fp, #4
0deb8     E7 7C 62 FC | 	wrlong	result2, fp
0debc     04 CE 05 F1 | 	add	fp, #4
0dec0     E7 7E 62 FC | 	wrlong	result3, fp
0dec4                 | ' 
0dec4                 | ' 
0dec4                 | ' t2=pop()
0dec4                 | ' t1=pop()
0dec4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dec4     3F 9F 02 F6 | 	mov	arg07, result3
0dec8     08 CE 85 F1 | 	sub	fp, #8
0decc     1C 9E 0E F2 | 	cmp	arg07, #28 wz
0ded0     08 CE 05 51 |  if_ne	add	fp, #8
0ded4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0ded8     08 CE 85 51 |  if_ne	sub	fp, #8
0dedc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0dee0     E7 A8 02 AB |  if_e	rdlong	local02, fp
0dee4     0C 00 90 AD |  if_e	jmp	#LR__1190
0dee8     E7 92 02 F6 | 	mov	arg01, fp
0deec     5C F9 BF FD | 	call	#_converttoint
0def0     3D A9 02 F6 | 	mov	local02, result1
0def4                 | LR__1190
0def4     32 95 02 F6 | 	mov	arg02, objptr
0def8     16 00 00 FF 
0defc     98 94 06 F1 | 	add	arg02, ##11416
0df00     07 92 06 F6 | 	mov	arg01, #7
0df04     54 97 02 F6 | 	mov	arg03, local02
0df08     0C 98 C6 F9 | 	decod	arg04, #12
0df0c     08 9A 06 F6 | 	mov	arg05, #8
0df10     00 9C 06 F6 | 	mov	arg06, #0
0df14     00 9E 06 F6 | 	mov	arg07, #0
0df18     0B 00 00 FF 
0df1c     CC 64 06 F1 | 	add	objptr, ##5836
0df20     38 67 B1 FD | 	call	#_Audio2_004_spin2_beep
0df24     0B 00 00 FF 
0df28     CC 64 86 F1 | 	sub	objptr, ##5836
0df2c     E7 92 02 F6 | 	mov	arg01, fp
0df30     0C 92 06 F1 | 	add	arg01, #12
0df34     C8 F7 BF FD | 	call	#_push
0df38     7C D4 B0 FD | 	call	#_do_waitms
0df3c     0B 00 00 FF 
0df40     CC 64 06 F1 | 	add	objptr, ##5836
0df44                 | ' 
0df44                 | ' base2:=@channel0[0]+64*channel
0df44     32 A9 02 F6 | 	mov	local02, objptr
0df48                 | ' word[base2+32]:=0
0df48     EC A9 06 F1 | 	add	local02, #492
0df4c     54 01 58 FC | 	wrword	#0, local02
0df50     0B 00 00 FF 
0df54     CC 64 86 F1 | 	sub	objptr, ##5836
0df58     E7 F0 03 F6 | 	mov	ptra, fp
0df5c     F2 00 A0 FD | 	call	#popregs_
0df60                 | _do_beep_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- blit
0df64                 | ' 
0df64                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0df64                 | ' sub do_blit
0df64                 | _do_blit
0df64     03 CA 05 F6 | 	mov	COUNT_, #3
0df68     E8 00 A0 FD | 	call	#pushregs_
0df6c     3C F0 07 F1 | 	add	ptra, #60
0df70     4C 00 00 FF 
0df74     24 64 06 F1 | 	add	objptr, ##38948
0df78     32 A5 02 FB | 	rdlong	arg10, objptr
0df7c     52 A3 02 F6 | 	mov	arg09, arg10
0df80     01 A2 66 F0 | 	shl	arg09, #1
0df84     52 A3 02 F1 | 	add	arg09, arg10
0df88     02 A2 66 F0 | 	shl	arg09, #2
0df8c     03 00 00 FF 
0df90     04 64 86 F1 | 	sub	objptr, ##1540
0df94     32 A3 02 F1 | 	add	arg09, objptr
0df98     51 A7 02 FB | 	rdlong	local01, arg09
0df9c                 | ' 
0df9c                 | ' numpar=compiledline(lineptr_e).result.uresult
0df9c                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df9c     0A A6 0E F2 | 	cmp	local01, #10 wz
0dfa0     49 00 00 FF 
0dfa4     20 64 86 F1 | 	sub	objptr, ##37408
0dfa8     06 A6 0E 52 |  if_ne	cmp	local01, #6 wz
0dfac     50 00 90 AD |  if_e	jmp	#LR__1200
0dfb0     00 92 06 F6 | 	mov	arg01, #0
0dfb4     C8 BF B1 FD | 	call	#__system___getiolock_0622
0dfb8     3D 93 02 F6 | 	mov	arg01, result1
0dfbc     3C 6A B1 FD | 	call	#__system___lockmem
0dfc0     96 01 00 FF 
0dfc4     F0 94 06 F6 | 	mov	arg02, ##@LR__5948
0dfc8     00 92 06 F6 | 	mov	arg01, #0
0dfcc     00 96 06 F6 | 	mov	arg03, #0
0dfd0     1C 77 B1 FD | 	call	#__system___basic_print_string
0dfd4     00 92 06 F6 | 	mov	arg01, #0
0dfd8     A4 BF B1 FD | 	call	#__system___getiolock_0622
0dfdc     3D 01 68 FC | 	wrlong	#0, result1
0dfe0     52 00 00 FF 
0dfe4     94 64 06 F1 | 	add	objptr, ##42132
0dfe8     32 95 02 FB | 	rdlong	arg02, objptr
0dfec     52 00 00 FF 
0dff0     94 64 86 F1 | 	sub	objptr, ##42132
0dff4     27 92 06 F6 | 	mov	arg01, #39
0dff8     D8 2C B1 FD | 	call	#_printerror
0dffc     04 01 90 FD | 	jmp	#LR__1205
0e000                 | LR__1200
0e000                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e000     53 A9 02 F6 | 	mov	local02, local01
0e004     01 A8 86 F1 | 	sub	local02, #1
0e008                 | LR__1201
0e008     53 A5 02 F6 | 	mov	arg10, local01
0e00c     01 A4 86 F1 | 	sub	arg10, #1
0e010     52 A9 1A F2 | 	cmp	local02, arg10 wcz
0e014     40 00 90 1D |  if_a	jmp	#LR__1202
0e018     54 F6 BF FD | 	call	#_pop
0e01c     E7 7A 62 FC | 	wrlong	result1, fp
0e020     04 CE 05 F1 | 	add	fp, #4
0e024     E7 7C 62 FC | 	wrlong	result2, fp
0e028     04 CE 05 F1 | 	add	fp, #4
0e02c     E7 7E 62 FC | 	wrlong	result3, fp
0e030     54 AB 02 F6 | 	mov	local03, local02
0e034     02 AA 66 F0 | 	shl	local03, #2
0e038     04 CE 05 F1 | 	add	fp, #4
0e03c     E7 AA 02 F1 | 	add	local03, fp
0e040     0C CE 85 F1 | 	sub	fp, #12
0e044     E7 92 02 F6 | 	mov	arg01, fp
0e048     00 F8 BF FD | 	call	#_converttoint
0e04c     55 7B 62 FC | 	wrlong	result1, local03
0e050     01 A8 86 F1 | 	sub	local02, #1
0e054     B0 FF 9F FD | 	jmp	#LR__1201
0e058                 | LR__1202
0e058                 | ' if numpar=10 then 
0e058     0A A6 0E F2 | 	cmp	local01, #10 wz
0e05c     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e060     0C CE 05 F1 | 	add	fp, #12
0e064     E7 92 02 FB | 	rdlong	arg01, fp
0e068     04 CE 05 F1 | 	add	fp, #4
0e06c     E7 94 02 FB | 	rdlong	arg02, fp
0e070     04 CE 05 F1 | 	add	fp, #4
0e074     E7 96 02 FB | 	rdlong	arg03, fp
0e078     04 CE 05 F1 | 	add	fp, #4
0e07c     E7 98 02 FB | 	rdlong	arg04, fp
0e080     04 CE 05 F1 | 	add	fp, #4
0e084     E7 9A 02 FB | 	rdlong	arg05, fp
0e088     04 CE 05 F1 | 	add	fp, #4
0e08c     E7 9C 02 FB | 	rdlong	arg06, fp
0e090     04 CE 05 F1 | 	add	fp, #4
0e094     E7 9E 02 FB | 	rdlong	arg07, fp
0e098     04 CE 05 F1 | 	add	fp, #4
0e09c     E7 A0 02 FB | 	rdlong	arg08, fp
0e0a0     04 CE 05 F1 | 	add	fp, #4
0e0a4     E7 A2 02 FB | 	rdlong	arg09, fp
0e0a8     04 CE 05 F1 | 	add	fp, #4
0e0ac     E7 A4 02 FB | 	rdlong	arg10, fp
0e0b0     30 CE 85 F1 | 	sub	fp, #48
0e0b4     20 54 B1 FD | 	call	#_hg010b_spin2_blit
0e0b8     48 00 90 FD | 	jmp	#LR__1204
0e0bc                 | LR__1203
0e0bc     32 9F 02 FB | 	rdlong	arg07, objptr
0e0c0     0C CE 05 F1 | 	add	fp, #12
0e0c4     E7 94 02 FB | 	rdlong	arg02, fp
0e0c8     04 CE 05 F1 | 	add	fp, #4
0e0cc     E7 96 02 FB | 	rdlong	arg03, fp
0e0d0     04 CE 05 F1 | 	add	fp, #4
0e0d4     E7 98 02 FB | 	rdlong	arg04, fp
0e0d8     04 CE 05 F1 | 	add	fp, #4
0e0dc     E7 9A 02 FB | 	rdlong	arg05, fp
0e0e0     04 CE 05 F1 | 	add	fp, #4
0e0e4     E7 A0 02 FB | 	rdlong	arg08, fp
0e0e8     04 CE 05 F1 | 	add	fp, #4
0e0ec     E7 A2 02 FB | 	rdlong	arg09, fp
0e0f0     20 CE 85 F1 | 	sub	fp, #32
0e0f4     4F 93 02 F6 | 	mov	arg01, arg07
0e0f8     0A 9C C6 F9 | 	decod	arg06, #10
0e0fc     0A A4 C6 F9 | 	decod	arg10, #10
0e100     D4 53 B1 FD | 	call	#_hg010b_spin2_blit
0e104                 | LR__1204
0e104                 | LR__1205
0e104     E7 F0 03 F6 | 	mov	ptra, fp
0e108     F2 00 A0 FD | 	call	#popregs_
0e10c                 | _do_blit_ret
0e10c     2D 00 64 FD | 	ret
0e110                 | 
0e110                 | ' 
0e110                 | ' 
0e110                 | ' '-------------------- bin$
0e110                 | ' 
0e110                 | ' sub do_bin
0e110                 | _do_bin
0e110     02 CA 05 F6 | 	mov	COUNT_, #2
0e114     E8 00 A0 FD | 	call	#pushregs_
0e118     18 F0 07 F1 | 	add	ptra, #24
0e11c     4C 00 00 FF 
0e120     24 64 06 F1 | 	add	objptr, ##38948
0e124     32 97 02 FB | 	rdlong	arg03, objptr
0e128     4B 95 02 F6 | 	mov	arg02, arg03
0e12c     01 94 66 F0 | 	shl	arg02, #1
0e130     4B 95 02 F1 | 	add	arg02, arg03
0e134     02 94 66 F0 | 	shl	arg02, #2
0e138     03 00 00 FF 
0e13c     04 64 86 F1 | 	sub	objptr, ##1540
0e140     32 95 02 F1 | 	add	arg02, objptr
0e144     4A A7 02 FB | 	rdlong	local01, arg02
0e148                 | ' 
0e148                 | ' numpar=compiledline(lineptr_e).result.uresult
0e148                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e148     03 A6 16 F2 | 	cmp	local01, #3 wc
0e14c     49 00 00 FF 
0e150     20 64 86 F1 | 	sub	objptr, ##37408
0e154     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
0e158     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e15c     00 92 06 F6 | 	mov	arg01, #0
0e160     1C BE B1 FD | 	call	#__system___getiolock_0622
0e164     3D 93 02 F6 | 	mov	arg01, result1
0e168     90 68 B1 FD | 	call	#__system___lockmem
0e16c     96 01 00 FF 
0e170     F7 94 06 F6 | 	mov	arg02, ##@LR__5949
0e174     00 92 06 F6 | 	mov	arg01, #0
0e178     00 96 06 F6 | 	mov	arg03, #0
0e17c     70 75 B1 FD | 	call	#__system___basic_print_string
0e180     00 92 06 F6 | 	mov	arg01, #0
0e184     F8 BD B1 FD | 	call	#__system___getiolock_0622
0e188     3D 01 68 FC | 	wrlong	#0, result1
0e18c     27 92 06 F6 | 	mov	arg01, #39
0e190     00 94 06 F6 | 	mov	arg02, #0
0e194     3C 2B B1 FD | 	call	#_printerror
0e198     8C 00 90 FD | 	jmp	#LR__1213
0e19c                 | LR__1210
0e19c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e19c     02 A6 0E F2 | 	cmp	local01, #2 wz
0e1a0     30 00 90 5D |  if_ne	jmp	#LR__1211
0e1a4     C8 F4 BF FD | 	call	#_pop
0e1a8     3F A7 02 F6 | 	mov	local01, result3
0e1ac     E7 7A 62 FC | 	wrlong	result1, fp
0e1b0     04 CE 05 F1 | 	add	fp, #4
0e1b4     E7 7C 62 FC | 	wrlong	result2, fp
0e1b8     04 CE 05 F1 | 	add	fp, #4
0e1bc     E7 A6 62 FC | 	wrlong	local01, fp
0e1c0     08 CE 85 F1 | 	sub	fp, #8
0e1c4     E7 92 02 F6 | 	mov	arg01, fp
0e1c8     80 F6 BF FD | 	call	#_converttoint
0e1cc     3D A9 02 F6 | 	mov	local02, result1
0e1d0     04 00 90 FD | 	jmp	#LR__1212
0e1d4                 | LR__1211
0e1d4     00 A8 06 F6 | 	mov	local02, #0
0e1d8                 | LR__1212
0e1d8     94 F4 BF FD | 	call	#_pop
0e1dc     3F A7 02 F6 | 	mov	local01, result3
0e1e0     E7 7A 62 FC | 	wrlong	result1, fp
0e1e4     04 CE 05 F1 | 	add	fp, #4
0e1e8     E7 7C 62 FC | 	wrlong	result2, fp
0e1ec     04 CE 05 F1 | 	add	fp, #4
0e1f0     E7 A6 62 FC | 	wrlong	local01, fp
0e1f4     08 CE 85 F1 | 	sub	fp, #8
0e1f8     E7 92 02 F6 | 	mov	arg01, fp
0e1fc     4C F6 BF FD | 	call	#_converttoint
0e200     3D 93 02 F6 | 	mov	arg01, result1
0e204     54 95 02 F6 | 	mov	arg02, local02
0e208     02 96 06 F6 | 	mov	arg03, #2
0e20c     E8 82 B1 FD | 	call	#__system__Number_S
0e210     E7 7A 62 FC | 	wrlong	result1, fp
0e214     08 CE 05 F1 | 	add	fp, #8
0e218     E7 3E 68 FC | 	wrlong	#31, fp
0e21c     08 CE 85 F1 | 	sub	fp, #8
0e220     E7 92 02 F6 | 	mov	arg01, fp
0e224     D8 F4 BF FD | 	call	#_push
0e228                 | LR__1213
0e228     E7 F0 03 F6 | 	mov	ptra, fp
0e22c     F2 00 A0 FD | 	call	#popregs_
0e230                 | _do_bin_ret
0e230     2D 00 64 FD | 	ret
0e234                 | 
0e234                 | ' 
0e234                 | ' '-------------------- box
0e234                 | ' 
0e234                 | ' sub do_box
0e234                 | _do_box
0e234     03 CA 05 F6 | 	mov	COUNT_, #3
0e238     E8 00 A0 FD | 	call	#pushregs_
0e23c     30 F0 07 F1 | 	add	ptra, #48
0e240     2C F4 BF FD | 	call	#_pop
0e244     3D 9B 02 F6 | 	mov	arg05, result1
0e248     3E 99 02 F6 | 	mov	arg04, result2
0e24c     3F 97 02 F6 | 	mov	arg03, result3
0e250     24 CE 05 F1 | 	add	fp, #36
0e254     E7 9A 62 FC | 	wrlong	arg05, fp
0e258     04 CE 05 F1 | 	add	fp, #4
0e25c     E7 98 62 FC | 	wrlong	arg04, fp
0e260     04 CE 05 F1 | 	add	fp, #4
0e264     E7 96 62 FC | 	wrlong	arg03, fp
0e268     2C CE 85 F1 | 	sub	fp, #44
0e26c     00 F4 BF FD | 	call	#_pop
0e270     3D 9B 02 F6 | 	mov	arg05, result1
0e274     3E 99 02 F6 | 	mov	arg04, result2
0e278     3F 97 02 F6 | 	mov	arg03, result3
0e27c     18 CE 05 F1 | 	add	fp, #24
0e280     E7 9A 62 FC | 	wrlong	arg05, fp
0e284     04 CE 05 F1 | 	add	fp, #4
0e288     E7 98 62 FC | 	wrlong	arg04, fp
0e28c     04 CE 05 F1 | 	add	fp, #4
0e290     E7 96 62 FC | 	wrlong	arg03, fp
0e294     20 CE 85 F1 | 	sub	fp, #32
0e298     D4 F3 BF FD | 	call	#_pop
0e29c     3D 9B 02 F6 | 	mov	arg05, result1
0e2a0     3E 99 02 F6 | 	mov	arg04, result2
0e2a4     3F A7 02 F6 | 	mov	local01, result3
0e2a8     0C CE 05 F1 | 	add	fp, #12
0e2ac     E7 9A 62 FC | 	wrlong	arg05, fp
0e2b0     04 CE 05 F1 | 	add	fp, #4
0e2b4     E7 98 62 FC | 	wrlong	arg04, fp
0e2b8     04 CE 05 F1 | 	add	fp, #4
0e2bc     E7 A6 62 FC | 	wrlong	local01, fp
0e2c0     14 CE 85 F1 | 	sub	fp, #20
0e2c4     A8 F3 BF FD | 	call	#_pop
0e2c8     E7 7A 62 FC | 	wrlong	result1, fp
0e2cc     04 CE 05 F1 | 	add	fp, #4
0e2d0     E7 7C 62 FC | 	wrlong	result2, fp
0e2d4     04 CE 05 F1 | 	add	fp, #4
0e2d8     E7 7E 62 FC | 	wrlong	result3, fp
0e2dc                 | ' 
0e2dc                 | ' t4=pop()
0e2dc                 | ' t3=pop()
0e2dc                 | ' t2=pop()
0e2dc                 | ' t1=pop()
0e2dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e2dc     3F 9B 02 F6 | 	mov	arg05, result3
0e2e0     08 CE 85 F1 | 	sub	fp, #8
0e2e4     1C 9A 0E F2 | 	cmp	arg05, #28 wz
0e2e8     08 CE 05 51 |  if_ne	add	fp, #8
0e2ec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0e2f0     08 CE 85 51 |  if_ne	sub	fp, #8
0e2f4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0e2f8     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e2fc     14 CE 05 F1 | 	add	fp, #20
0e300     E7 A6 02 FB | 	rdlong	local01, fp
0e304     14 CE 85 F1 | 	sub	fp, #20
0e308     1C A6 0E F2 | 	cmp	local01, #28 wz
0e30c     14 CE 05 51 |  if_ne	add	fp, #20
0e310     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e314     14 CE 85 51 |  if_ne	sub	fp, #20
0e318     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e31c     84 00 90 5D |  if_ne	jmp	#LR__1220
0e320     20 CE 05 F1 | 	add	fp, #32
0e324     E7 A6 02 FB | 	rdlong	local01, fp
0e328     20 CE 85 F1 | 	sub	fp, #32
0e32c     1C A6 0E F2 | 	cmp	local01, #28 wz
0e330     20 CE 05 51 |  if_ne	add	fp, #32
0e334     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e338     20 CE 85 51 |  if_ne	sub	fp, #32
0e33c     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e340     60 00 90 5D |  if_ne	jmp	#LR__1220
0e344     2C CE 05 F1 | 	add	fp, #44
0e348     E7 A6 02 FB | 	rdlong	local01, fp
0e34c     2C CE 85 F1 | 	sub	fp, #44
0e350     1C A6 0E F2 | 	cmp	local01, #28 wz
0e354     2C CE 05 51 |  if_ne	add	fp, #44
0e358     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e35c     2C CE 85 51 |  if_ne	sub	fp, #44
0e360     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e364     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e368     E7 92 02 FB | 	rdlong	arg01, fp
0e36c     0C CE 05 F1 | 	add	fp, #12
0e370     E7 94 02 FB | 	rdlong	arg02, fp
0e374     0C CE 05 F1 | 	add	fp, #12
0e378     E7 96 02 FB | 	rdlong	arg03, fp
0e37c     0C CE 05 F1 | 	add	fp, #12
0e380     E7 98 02 FB | 	rdlong	arg04, fp
0e384     24 CE 85 F1 | 	sub	fp, #36
0e388     38 00 00 FF 
0e38c     CC 65 06 F1 | 	add	objptr, ##29132
0e390     32 9B 02 FB | 	rdlong	arg05, objptr
0e394     38 00 00 FF 
0e398     CC 65 86 F1 | 	sub	objptr, ##29132
0e39c     F8 43 B1 FD | 	call	#_hg010b_spin2_box
0e3a0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3a0     60 00 90 FD | 	jmp	#LR__1221
0e3a4                 | LR__1220
0e3a4     E7 92 02 F6 | 	mov	arg01, fp
0e3a8     A0 F4 BF FD | 	call	#_converttoint
0e3ac     3D A9 02 F6 | 	mov	local02, result1
0e3b0     E7 92 02 F6 | 	mov	arg01, fp
0e3b4     0C 92 06 F1 | 	add	arg01, #12
0e3b8     90 F4 BF FD | 	call	#_converttoint
0e3bc     3D AB 02 F6 | 	mov	local03, result1
0e3c0     E7 92 02 F6 | 	mov	arg01, fp
0e3c4     18 92 06 F1 | 	add	arg01, #24
0e3c8     80 F4 BF FD | 	call	#_converttoint
0e3cc     3D A7 02 F6 | 	mov	local01, result1
0e3d0     E7 92 02 F6 | 	mov	arg01, fp
0e3d4     24 92 06 F1 | 	add	arg01, #36
0e3d8     70 F4 BF FD | 	call	#_converttoint
0e3dc     3D 99 02 F6 | 	mov	arg04, result1
0e3e0     38 00 00 FF 
0e3e4     CC 65 06 F1 | 	add	objptr, ##29132
0e3e8     32 9B 02 FB | 	rdlong	arg05, objptr
0e3ec     38 00 00 FF 
0e3f0     CC 65 86 F1 | 	sub	objptr, ##29132
0e3f4     54 93 02 F6 | 	mov	arg01, local02
0e3f8     55 95 02 F6 | 	mov	arg02, local03
0e3fc     53 97 02 F6 | 	mov	arg03, local01
0e400     94 43 B1 FD | 	call	#_hg010b_spin2_box
0e404                 | LR__1221
0e404     E7 F0 03 F6 | 	mov	ptra, fp
0e408     F2 00 A0 FD | 	call	#popregs_
0e40c                 | _do_box_ret
0e40c     2D 00 64 FD | 	ret
0e410                 | 
0e410                 | ' 
0e410                 | ' '-------------------- brun
0e410                 | ' 
0e410                 | ' sub do_brun
0e410                 | _do_brun
0e410     08 CA 05 F6 | 	mov	COUNT_, #8
0e414     E8 00 A0 FD | 	call	#pushregs_
0e418     54 F2 BF FD | 	call	#_pop
0e41c     3E 9B 02 F6 | 	mov	arg05, result2
0e420     3F 99 02 F6 | 	mov	arg04, result3
0e424     3D A7 02 F6 | 	mov	local01, result1
0e428     4D A9 02 F6 | 	mov	local02, arg05
0e42c     4C AB 02 F6 | 	mov	local03, arg04
0e430                 | ' 
0e430                 | ' t1=pop() 
0e430                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e430     2B AA 0E F2 | 	cmp	local03, #43 wz
0e434     10 00 90 5D |  if_ne	jmp	#LR__1230
0e438     53 93 02 F6 | 	mov	arg01, local01
0e43c     A0 F3 BF FD | 	call	#_convertstring
0e440     3D A7 02 F6 | 	mov	local01, result1
0e444     1F AA 06 F6 | 	mov	local03, #31
0e448                 | LR__1230
0e448                 | ' if t1.result_type=result_string then
0e448     1F AA 0E F2 | 	cmp	local03, #31 wz
0e44c     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e450     53 AD 02 F6 | 	mov	local04, local01
0e454                 | '   filename=t1.result.sresult
0e454                 | '   if left$(filename,1)="/" then 
0e454     56 93 02 F6 | 	mov	arg01, local04
0e458     01 94 06 F6 | 	mov	arg02, #1
0e45c     44 7E B1 FD | 	call	#__system__Left_S
0e460     3D 93 02 F6 | 	mov	arg01, result1
0e464     96 01 00 FF 
0e468     FE 94 06 F6 | 	mov	arg02, ##@LR__5950
0e46c     B4 65 B1 FD | 	call	#__system___string_cmp
0e470     00 7A 0E F2 | 	cmp	result1, #0 wz
0e474     56 AF 02 A6 |  if_e	mov	local05, local04
0e478     14 00 90 AD |  if_e	jmp	#LR__1231
0e47c     96 01 00 FF 
0e480     00 93 06 F6 | 	mov	arg01, ##@LR__5951
0e484     56 95 02 F6 | 	mov	arg02, local04
0e488     CC 65 B1 FD | 	call	#__system___string_concat
0e48c     3D AF 02 F6 | 	mov	local05, result1
0e490                 | LR__1231
0e490                 | '   open fullfilename for input as #9
0e490     09 92 06 F6 | 	mov	arg01, #9
0e494     57 95 02 F6 | 	mov	arg02, local05
0e498     00 96 06 F6 | 	mov	arg03, #0
0e49c     0C 71 B1 FD | 	call	#__system___basic_open_string
0e4a0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e4a4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e4a8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e4ac     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e4b0     3D B1 0A F6 | 	mov	local06, result1 wz
0e4b4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4b4     8C 00 90 AD |  if_e	jmp	#LR__1232
0e4b8     00 92 06 F6 | 	mov	arg01, #0
0e4bc     C0 BA B1 FD | 	call	#__system___getiolock_0622
0e4c0     3D 93 02 F6 | 	mov	arg01, result1
0e4c4     34 65 B1 FD | 	call	#__system___lockmem
0e4c8     96 01 00 FF 
0e4cc     09 95 06 F6 | 	mov	arg02, ##@LR__5952
0e4d0     00 92 06 F6 | 	mov	arg01, #0
0e4d4     00 96 06 F6 | 	mov	arg03, #0
0e4d8     14 72 B1 FD | 	call	#__system___basic_print_string
0e4dc     00 92 06 F6 | 	mov	arg01, #0
0e4e0     58 95 02 F6 | 	mov	arg02, local06
0e4e4     00 96 06 F6 | 	mov	arg03, #0
0e4e8     0A 98 06 F6 | 	mov	arg04, #10
0e4ec     44 72 B1 FD | 	call	#__system___basic_print_integer
0e4f0     96 01 00 FF 
0e4f4     17 95 06 F6 | 	mov	arg02, ##@LR__5953
0e4f8     00 92 06 F6 | 	mov	arg01, #0
0e4fc     00 96 06 F6 | 	mov	arg03, #0
0e500     EC 71 B1 FD | 	call	#__system___basic_print_string
0e504     58 93 02 F6 | 	mov	arg01, local06
0e508     A0 86 B1 FD | 	call	#__system___strerror
0e50c     3D 95 02 F6 | 	mov	arg02, result1
0e510     00 92 06 F6 | 	mov	arg01, #0
0e514     00 96 06 F6 | 	mov	arg03, #0
0e518     D4 71 B1 FD | 	call	#__system___basic_print_string
0e51c     00 92 06 F6 | 	mov	arg01, #0
0e520     0A 94 06 F6 | 	mov	arg02, #10
0e524     00 96 06 F6 | 	mov	arg03, #0
0e528     6C 71 B1 FD | 	call	#__system___basic_print_char
0e52c     00 92 06 F6 | 	mov	arg01, #0
0e530     4C BA B1 FD | 	call	#__system___getiolock_0622
0e534     3D 01 68 FC | 	wrlong	#0, result1
0e538     09 92 06 F6 | 	mov	arg01, #9
0e53c     98 B0 B1 FD | 	call	#__system__close
0e540     F8 00 90 FD | 	jmp	#LR__1235
0e544                 | LR__1232
0e544     01 B2 06 F6 | 	mov	local07, #1
0e548     00 B4 06 F6 | 	mov	local08, #0
0e54c                 | '   do
0e54c                 | LR__1233
0e54c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e54c     32 97 02 F6 | 	mov	arg03, objptr
0e550     50 00 00 FF 
0e554     58 96 06 F1 | 	add	arg03, ##41048
0e558     09 92 06 F6 | 	mov	arg01, #9
0e55c     59 95 02 F6 | 	mov	arg02, local07
0e560     0A 98 C6 F9 | 	decod	arg04, #10
0e564     01 9A 06 F6 | 	mov	arg05, #1
0e568     0C 73 B1 FD | 	call	#__system___basic_get
0e56c     3D B1 02 F6 | 	mov	local06, result1
0e570     3D B3 02 F1 | 	add	local07, result1
0e574     32 93 02 F6 | 	mov	arg01, objptr
0e578     50 00 00 FF 
0e57c     58 92 06 F1 | 	add	arg01, ##41048
0e580     5A 95 02 F6 | 	mov	arg02, local08
0e584     0A 96 C6 F9 | 	decod	arg03, #10
0e588     0B 00 00 FF 
0e58c     CC 64 06 F1 | 	add	objptr, ##5836
0e590     90 55 B1 FD | 	call	#_psram_spin2_write
0e594     0B 00 00 FF 
0e598     CC 64 86 F1 | 	sub	objptr, ##5836
0e59c     58 B5 02 F1 | 	add	local08, local06
0e5a0     02 00 00 FF 
0e5a4     00 B0 0E F2 | 	cmp	local06, ##1024 wz
0e5a8     E0 03 00 AF 
0e5ac     00 B4 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5b0     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e5b4     38 00 00 FF 
0e5b8     A0 65 06 F1 | 	add	objptr, ##29088
0e5bc     32 93 02 FB | 	rdlong	arg01, objptr
0e5c0     03 92 62 FD | 	cogstop	arg01
0e5c4     04 64 06 F1 | 	add	objptr, #4
0e5c8     32 93 02 FB | 	rdlong	arg01, objptr
0e5cc     03 92 62 FD | 	cogstop	arg01
0e5d0     04 64 06 F1 | 	add	objptr, #4
0e5d4     32 93 02 FB | 	rdlong	arg01, objptr
0e5d8     03 92 62 FD | 	cogstop	arg01
0e5dc     19 00 00 FF 
0e5e0     3C 65 06 F1 | 	add	objptr, ##13116
0e5e4     32 93 02 FB | 	rdlong	arg01, objptr
0e5e8     52 00 00 FF 
0e5ec     E4 64 86 F1 | 	sub	objptr, ##42212
0e5f0     03 92 62 FD | 	cogstop	arg01
0e5f4     35 95 02 F6 | 	mov	arg02, ptr__dat__
0e5f8     18 00 00 FF 
0e5fc     CC 94 06 F1 | 	add	arg02, ##12492
0e600     32 97 02 F6 | 	mov	arg03, objptr
0e604     38 00 00 FF 
0e608     B0 97 06 F1 | 	add	arg03, ##29104
0e60c     1E B4 06 F6 | 	mov	local08, #30
0e610     28 96 62 FD | 	setq	arg03
0e614     4A B5 F2 FC | 	coginit	local08, arg02 wc
0e618     01 B4 66 C6 |  if_b	neg	local08, #1
0e61c     54 00 00 FF 
0e620     F4 64 06 F1 | 	add	objptr, ##43252
0e624     32 B5 62 FC | 	wrlong	local08, objptr
0e628     54 00 00 FF 
0e62c     F4 64 86 F1 | 	sub	objptr, ##43252
0e630     00 92 06 F6 | 	mov	arg01, #0
0e634     01 92 62 FD | 	cogid	arg01
0e638     03 92 62 FD | 	cogstop	arg01
0e63c                 | LR__1234
0e63c                 | LR__1235
0e63c     E7 F0 03 F6 | 	mov	ptra, fp
0e640     F2 00 A0 FD | 	call	#popregs_
0e644                 | _do_brun_ret
0e644     2D 00 64 FD | 	ret
0e648                 | 
0e648                 | ' 
0e648                 | ' '-------------------- cd
0e648                 | ' 
0e648                 | ' sub do_cd
0e648                 | _do_cd
0e648     06 CA 05 F6 | 	mov	COUNT_, #6
0e64c     E8 00 A0 FD | 	call	#pushregs_
0e650     96 01 00 FF 
0e654     1A 93 06 F6 | 	mov	arg01, ##@LR__5954
0e658     31 94 06 F6 | 	mov	arg02, #49
0e65c     D8 BA B1 FD | 	call	#__system___basic_dir
0e660     0C F0 BF FD | 	call	#_pop
0e664     3E 99 02 F6 | 	mov	arg04, result2
0e668     3F 97 02 F6 | 	mov	arg03, result3
0e66c     3D A7 02 F6 | 	mov	local01, result1
0e670     4C A9 02 F6 | 	mov	local02, arg04
0e674     4B AB 02 F6 | 	mov	local03, arg03
0e678                 | ' t1=pop()
0e678                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e678     2B AA 0E F2 | 	cmp	local03, #43 wz
0e67c     10 00 90 5D |  if_ne	jmp	#LR__1240
0e680     53 93 02 F6 | 	mov	arg01, local01
0e684     58 F1 BF FD | 	call	#_convertstring
0e688     3D A7 02 F6 | 	mov	local01, result1
0e68c     1F AA 06 F6 | 	mov	local03, #31
0e690                 | LR__1240
0e690                 | ' if t1.result_type<>result_string then printerror(15): return
0e690     1F AA 0E F2 | 	cmp	local03, #31 wz
0e694     10 00 90 AD |  if_e	jmp	#LR__1241
0e698     0F 92 06 F6 | 	mov	arg01, #15
0e69c     00 94 06 F6 | 	mov	arg02, #0
0e6a0     30 26 B1 FD | 	call	#_printerror
0e6a4     54 05 90 FD | 	jmp	#LR__1259
0e6a8                 | LR__1241
0e6a8     53 AD 02 F6 | 	mov	local04, local01
0e6ac                 | ' newdir$=t1.result.sresult
0e6ac                 | ' if newdir$=".." then 
0e6ac     96 01 00 FF 
0e6b0     1C 95 06 F6 | 	mov	arg02, ##@LR__5955
0e6b4     56 93 02 F6 | 	mov	arg01, local04
0e6b8     68 63 B1 FD | 	call	#__system___string_cmp
0e6bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0e6c0     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e6c4     4C 00 00 FF 
0e6c8     38 64 06 F1 | 	add	objptr, ##38968
0e6cc     32 93 02 FB | 	rdlong	arg01, objptr
0e6d0     4C 00 00 FF 
0e6d4     38 64 86 F1 | 	sub	objptr, ##38968
0e6d8     49 AF 02 F6 | 	mov	local05, arg01
0e6dc     D7 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e6e0                 | LR__1242
0e6e0     57 7B CA FA | 	rdbyte	result1, local05 wz
0e6e4     01 AE 06 51 |  if_ne	add	local05, #1
0e6e8     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e6ec                 | LR__1243
0e6ec     57 93 C2 F2 | 	subr	arg01, local05
0e6f0     4C 00 00 FF 
0e6f4     38 64 06 F1 | 	add	objptr, ##38968
0e6f8     32 95 02 FB | 	rdlong	arg02, objptr
0e6fc     4C 00 00 FF 
0e700     38 64 86 F1 | 	sub	objptr, ##38968
0e704     96 01 00 FF 
0e708     1F 97 06 F6 | 	mov	arg03, ##@LR__5956
0e70c     E0 81 B1 FD | 	call	#__system__InstrRev
0e710     3D AD 02 F6 | 	mov	local04, result1
0e714                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e714     02 AC 56 F2 | 	cmps	local04, #2 wc
0e718     28 00 90 CD |  if_b	jmp	#LR__1244
0e71c     4C 00 00 FF 
0e720     38 64 06 F1 | 	add	objptr, ##38968
0e724     32 93 02 FB | 	rdlong	arg01, objptr
0e728     4C 00 00 FF 
0e72c     38 64 86 F1 | 	sub	objptr, ##38968
0e730     01 AC 86 F1 | 	sub	local04, #1
0e734     56 95 02 F6 | 	mov	arg02, local04
0e738     68 7B B1 FD | 	call	#__system__Left_S
0e73c     3D AD 02 F6 | 	mov	local04, result1
0e740     08 00 90 FD | 	jmp	#LR__1245
0e744                 | LR__1244
0e744     96 01 00 FF 
0e748     21 AD 06 F6 | 	mov	local04, ##@LR__5957
0e74c                 | LR__1245
0e74c     56 93 02 F6 | 	mov	arg01, local04
0e750     38 69 B1 FD | 	call	#__system___chdir
0e754     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e758     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e75c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e760     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e764     3D B1 0A F6 | 	mov	local06, result1 wz
0e768                 | '   chdir newdir$
0e768                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e768     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e76c     A4 00 90 AD |  if_e	jmp	#LR__1246
0e770     00 92 06 F6 | 	mov	arg01, #0
0e774     08 B8 B1 FD | 	call	#__system___getiolock_0622
0e778     3D 93 02 F6 | 	mov	arg01, result1
0e77c     7C 62 B1 FD | 	call	#__system___lockmem
0e780     96 01 00 FF 
0e784     23 95 06 F6 | 	mov	arg02, ##@LR__5958
0e788     00 92 06 F6 | 	mov	arg01, #0
0e78c     00 96 06 F6 | 	mov	arg03, #0
0e790     5C 6F B1 FD | 	call	#__system___basic_print_string
0e794     00 92 06 F6 | 	mov	arg01, #0
0e798     58 95 02 F6 | 	mov	arg02, local06
0e79c     00 96 06 F6 | 	mov	arg03, #0
0e7a0     0A 98 06 F6 | 	mov	arg04, #10
0e7a4     8C 6F B1 FD | 	call	#__system___basic_print_integer
0e7a8     96 01 00 FF 
0e7ac     31 95 06 F6 | 	mov	arg02, ##@LR__5959
0e7b0     00 92 06 F6 | 	mov	arg01, #0
0e7b4     00 96 06 F6 | 	mov	arg03, #0
0e7b8     34 6F B1 FD | 	call	#__system___basic_print_string
0e7bc     47 00 00 FF 
0e7c0     F4 64 06 F1 | 	add	objptr, ##36596
0e7c4     32 95 02 FB | 	rdlong	arg02, objptr
0e7c8     47 00 00 FF 
0e7cc     F4 64 86 F1 | 	sub	objptr, ##36596
0e7d0     00 92 06 F6 | 	mov	arg01, #0
0e7d4     00 96 06 F6 | 	mov	arg03, #0
0e7d8     14 6F B1 FD | 	call	#__system___basic_print_string
0e7dc     00 92 06 F6 | 	mov	arg01, #0
0e7e0     0A 94 06 F6 | 	mov	arg02, #10
0e7e4     00 96 06 F6 | 	mov	arg03, #0
0e7e8     AC 6E B1 FD | 	call	#__system___basic_print_char
0e7ec     00 92 06 F6 | 	mov	arg01, #0
0e7f0     8C B7 B1 FD | 	call	#__system___getiolock_0622
0e7f4     3D 01 68 FC | 	wrlong	#0, result1
0e7f8     4C 00 00 FF 
0e7fc     38 64 06 F1 | 	add	objptr, ##38968
0e800     32 93 02 FB | 	rdlong	arg01, objptr
0e804     4C 00 00 FF 
0e808     38 64 86 F1 | 	sub	objptr, ##38968
0e80c     7C 68 B1 FD | 	call	#__system___chdir
0e810     14 00 90 FD | 	jmp	#LR__1247
0e814                 | LR__1246
0e814     4C 00 00 FF 
0e818     38 64 06 F1 | 	add	objptr, ##38968
0e81c     32 AD 62 FC | 	wrlong	local04, objptr
0e820     4C 00 00 FF 
0e824     38 64 86 F1 | 	sub	objptr, ##38968
0e828                 | LR__1247
0e828                 | '   print "Current directory: ";currentdir$
0e828     00 92 06 F6 | 	mov	arg01, #0
0e82c     50 B7 B1 FD | 	call	#__system___getiolock_0622
0e830     3D 93 02 F6 | 	mov	arg01, result1
0e834     C4 61 B1 FD | 	call	#__system___lockmem
0e838     96 01 00 FF 
0e83c     34 95 06 F6 | 	mov	arg02, ##@LR__5960
0e840     00 92 06 F6 | 	mov	arg01, #0
0e844     00 96 06 F6 | 	mov	arg03, #0
0e848     A4 6E B1 FD | 	call	#__system___basic_print_string
0e84c     4C 00 00 FF 
0e850     38 64 06 F1 | 	add	objptr, ##38968
0e854     32 95 02 FB | 	rdlong	arg02, objptr
0e858     4C 00 00 FF 
0e85c     38 64 86 F1 | 	sub	objptr, ##38968
0e860     00 92 06 F6 | 	mov	arg01, #0
0e864     00 96 06 F6 | 	mov	arg03, #0
0e868     84 6E B1 FD | 	call	#__system___basic_print_string
0e86c     00 92 06 F6 | 	mov	arg01, #0
0e870     0A 94 06 F6 | 	mov	arg02, #10
0e874     00 96 06 F6 | 	mov	arg03, #0
0e878     1C 6E B1 FD | 	call	#__system___basic_print_char
0e87c     00 92 06 F6 | 	mov	arg01, #0
0e880     FC B6 B1 FD | 	call	#__system___getiolock_0622
0e884     3D 01 68 FC | 	wrlong	#0, result1
0e888                 | '   return
0e888     70 03 90 FD | 	jmp	#LR__1259
0e88c                 | LR__1248
0e88c                 | ' if left$(newdir$,1)="/" then 
0e88c     56 93 02 F6 | 	mov	arg01, local04
0e890     01 94 06 F6 | 	mov	arg02, #1
0e894     0C 7A B1 FD | 	call	#__system__Left_S
0e898     3D 93 02 F6 | 	mov	arg01, result1
0e89c     96 01 00 FF 
0e8a0     48 95 06 F6 | 	mov	arg02, ##@LR__5961
0e8a4     7C 61 B1 FD | 	call	#__system___string_cmp
0e8a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0e8ac     40 01 90 5D |  if_ne	jmp	#LR__1251
0e8b0     56 93 02 F6 | 	mov	arg01, local04
0e8b4     D4 67 B1 FD | 	call	#__system___chdir
0e8b8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e8bc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e8c0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e8c4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e8c8     3D B1 0A F6 | 	mov	local06, result1 wz
0e8cc                 | '   chdir(newdir$)
0e8cc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8cc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e8d0     A4 00 90 AD |  if_e	jmp	#LR__1249
0e8d4     00 92 06 F6 | 	mov	arg01, #0
0e8d8     A4 B6 B1 FD | 	call	#__system___getiolock_0622
0e8dc     3D 93 02 F6 | 	mov	arg01, result1
0e8e0     18 61 B1 FD | 	call	#__system___lockmem
0e8e4     96 01 00 FF 
0e8e8     4A 95 06 F6 | 	mov	arg02, ##@LR__5962
0e8ec     00 92 06 F6 | 	mov	arg01, #0
0e8f0     00 96 06 F6 | 	mov	arg03, #0
0e8f4     F8 6D B1 FD | 	call	#__system___basic_print_string
0e8f8     00 92 06 F6 | 	mov	arg01, #0
0e8fc     58 95 02 F6 | 	mov	arg02, local06
0e900     00 96 06 F6 | 	mov	arg03, #0
0e904     0A 98 06 F6 | 	mov	arg04, #10
0e908     28 6E B1 FD | 	call	#__system___basic_print_integer
0e90c     96 01 00 FF 
0e910     58 95 06 F6 | 	mov	arg02, ##@LR__5963
0e914     00 92 06 F6 | 	mov	arg01, #0
0e918     00 96 06 F6 | 	mov	arg03, #0
0e91c     D0 6D B1 FD | 	call	#__system___basic_print_string
0e920     47 00 00 FF 
0e924     F4 64 06 F1 | 	add	objptr, ##36596
0e928     32 95 02 FB | 	rdlong	arg02, objptr
0e92c     47 00 00 FF 
0e930     F4 64 86 F1 | 	sub	objptr, ##36596
0e934     00 92 06 F6 | 	mov	arg01, #0
0e938     00 96 06 F6 | 	mov	arg03, #0
0e93c     B0 6D B1 FD | 	call	#__system___basic_print_string
0e940     00 92 06 F6 | 	mov	arg01, #0
0e944     0A 94 06 F6 | 	mov	arg02, #10
0e948     00 96 06 F6 | 	mov	arg03, #0
0e94c     48 6D B1 FD | 	call	#__system___basic_print_char
0e950     00 92 06 F6 | 	mov	arg01, #0
0e954     28 B6 B1 FD | 	call	#__system___getiolock_0622
0e958     3D 01 68 FC | 	wrlong	#0, result1
0e95c     4C 00 00 FF 
0e960     38 64 06 F1 | 	add	objptr, ##38968
0e964     32 93 02 FB | 	rdlong	arg01, objptr
0e968     4C 00 00 FF 
0e96c     38 64 86 F1 | 	sub	objptr, ##38968
0e970     18 67 B1 FD | 	call	#__system___chdir
0e974     14 00 90 FD | 	jmp	#LR__1250
0e978                 | LR__1249
0e978     4C 00 00 FF 
0e97c     38 64 06 F1 | 	add	objptr, ##38968
0e980     32 AD 62 FC | 	wrlong	local04, objptr
0e984     4C 00 00 FF 
0e988     38 64 86 F1 | 	sub	objptr, ##38968
0e98c                 | LR__1250
0e98c                 | '   print "Current directory: ";currentdir$
0e98c     00 92 06 F6 | 	mov	arg01, #0
0e990     EC B5 B1 FD | 	call	#__system___getiolock_0622
0e994     3D 93 02 F6 | 	mov	arg01, result1
0e998     60 60 B1 FD | 	call	#__system___lockmem
0e99c     96 01 00 FF 
0e9a0     5B 95 06 F6 | 	mov	arg02, ##@LR__5964
0e9a4     00 92 06 F6 | 	mov	arg01, #0
0e9a8     00 96 06 F6 | 	mov	arg03, #0
0e9ac     40 6D B1 FD | 	call	#__system___basic_print_string
0e9b0     4C 00 00 FF 
0e9b4     38 64 06 F1 | 	add	objptr, ##38968
0e9b8     32 95 02 FB | 	rdlong	arg02, objptr
0e9bc     4C 00 00 FF 
0e9c0     38 64 86 F1 | 	sub	objptr, ##38968
0e9c4     00 92 06 F6 | 	mov	arg01, #0
0e9c8     00 96 06 F6 | 	mov	arg03, #0
0e9cc     20 6D B1 FD | 	call	#__system___basic_print_string
0e9d0     00 92 06 F6 | 	mov	arg01, #0
0e9d4     0A 94 06 F6 | 	mov	arg02, #10
0e9d8     00 96 06 F6 | 	mov	arg03, #0
0e9dc     B8 6C B1 FD | 	call	#__system___basic_print_char
0e9e0     00 92 06 F6 | 	mov	arg01, #0
0e9e4     98 B5 B1 FD | 	call	#__system___getiolock_0622
0e9e8     3D 01 68 FC | 	wrlong	#0, result1
0e9ec                 | '   return
0e9ec     0C 02 90 FD | 	jmp	#LR__1259
0e9f0                 | LR__1251
0e9f0                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e9f0     4C 00 00 FF 
0e9f4     38 64 06 F1 | 	add	objptr, ##38968
0e9f8     32 93 02 FB | 	rdlong	arg01, objptr
0e9fc     4C 00 00 FF 
0ea00     38 64 86 F1 | 	sub	objptr, ##38968
0ea04     96 01 00 FF 
0ea08     6F 95 06 F6 | 	mov	arg02, ##@LR__5965
0ea0c     14 60 B1 FD | 	call	#__system___string_cmp
0ea10     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea14     34 00 90 AD |  if_e	jmp	#LR__1252
0ea18     4C 00 00 FF 
0ea1c     38 64 06 F1 | 	add	objptr, ##38968
0ea20     32 93 02 FB | 	rdlong	arg01, objptr
0ea24     4C 00 00 FF 
0ea28     38 64 86 F1 | 	sub	objptr, ##38968
0ea2c     96 01 00 FF 
0ea30     71 95 06 F6 | 	mov	arg02, ##@LR__5966
0ea34     20 60 B1 FD | 	call	#__system___string_concat
0ea38     3D 93 02 F6 | 	mov	arg01, result1
0ea3c     56 95 02 F6 | 	mov	arg02, local04
0ea40     14 60 B1 FD | 	call	#__system___string_concat
0ea44     3D AD 02 F6 | 	mov	local04, result1
0ea48     20 00 90 FD | 	jmp	#LR__1253
0ea4c                 | LR__1252
0ea4c     4C 00 00 FF 
0ea50     38 64 06 F1 | 	add	objptr, ##38968
0ea54     32 93 02 FB | 	rdlong	arg01, objptr
0ea58     4C 00 00 FF 
0ea5c     38 64 86 F1 | 	sub	objptr, ##38968
0ea60     56 95 02 F6 | 	mov	arg02, local04
0ea64     F0 5F B1 FD | 	call	#__system___string_concat
0ea68     3D AD 02 F6 | 	mov	local04, result1
0ea6c                 | LR__1253
0ea6c                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea6c     56 93 02 F6 | 	mov	arg01, local04
0ea70     01 94 06 F6 | 	mov	arg02, #1
0ea74     B4 78 B1 FD | 	call	#__system__Right_S
0ea78     3D 93 02 F6 | 	mov	arg01, result1
0ea7c     96 01 00 FF 
0ea80     73 95 06 F6 | 	mov	arg02, ##@LR__5967
0ea84     9C 5F B1 FD | 	call	#__system___string_cmp
0ea88     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea8c     30 00 90 5D |  if_ne	jmp	#LR__1256
0ea90     56 93 02 F6 | 	mov	arg01, local04
0ea94     49 AF 02 F6 | 	mov	local05, arg01
0ea98     D7 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0ea9c                 | LR__1254
0ea9c     57 7B CA FA | 	rdbyte	result1, local05 wz
0eaa0     01 AE 06 51 |  if_ne	add	local05, #1
0eaa4     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0eaa8                 | LR__1255
0eaa8     49 AF 82 F1 | 	sub	local05, arg01
0eaac     57 95 02 F6 | 	mov	arg02, local05
0eab0     01 94 86 F1 | 	sub	arg02, #1
0eab4     56 93 02 F6 | 	mov	arg01, local04
0eab8     E8 77 B1 FD | 	call	#__system__Left_S
0eabc     3D AD 02 F6 | 	mov	local04, result1
0eac0                 | LR__1256
0eac0     56 93 02 F6 | 	mov	arg01, local04
0eac4     C4 65 B1 FD | 	call	#__system___chdir
0eac8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0eacc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ead0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ead4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ead8     3D B1 0A F6 | 	mov	local06, result1 wz
0eadc                 | '   chdir(newdir$)
0eadc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eadc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0eae0     A4 00 90 AD |  if_e	jmp	#LR__1257
0eae4     00 92 06 F6 | 	mov	arg01, #0
0eae8     94 B4 B1 FD | 	call	#__system___getiolock_0622
0eaec     3D 93 02 F6 | 	mov	arg01, result1
0eaf0     08 5F B1 FD | 	call	#__system___lockmem
0eaf4     96 01 00 FF 
0eaf8     75 95 06 F6 | 	mov	arg02, ##@LR__5968
0eafc     00 92 06 F6 | 	mov	arg01, #0
0eb00     00 96 06 F6 | 	mov	arg03, #0
0eb04     E8 6B B1 FD | 	call	#__system___basic_print_string
0eb08     00 92 06 F6 | 	mov	arg01, #0
0eb0c     58 95 02 F6 | 	mov	arg02, local06
0eb10     00 96 06 F6 | 	mov	arg03, #0
0eb14     0A 98 06 F6 | 	mov	arg04, #10
0eb18     18 6C B1 FD | 	call	#__system___basic_print_integer
0eb1c     96 01 00 FF 
0eb20     83 95 06 F6 | 	mov	arg02, ##@LR__5969
0eb24     00 92 06 F6 | 	mov	arg01, #0
0eb28     00 96 06 F6 | 	mov	arg03, #0
0eb2c     C0 6B B1 FD | 	call	#__system___basic_print_string
0eb30     47 00 00 FF 
0eb34     F4 64 06 F1 | 	add	objptr, ##36596
0eb38     32 95 02 FB | 	rdlong	arg02, objptr
0eb3c     47 00 00 FF 
0eb40     F4 64 86 F1 | 	sub	objptr, ##36596
0eb44     00 92 06 F6 | 	mov	arg01, #0
0eb48     00 96 06 F6 | 	mov	arg03, #0
0eb4c     A0 6B B1 FD | 	call	#__system___basic_print_string
0eb50     00 92 06 F6 | 	mov	arg01, #0
0eb54     0A 94 06 F6 | 	mov	arg02, #10
0eb58     00 96 06 F6 | 	mov	arg03, #0
0eb5c     38 6B B1 FD | 	call	#__system___basic_print_char
0eb60     00 92 06 F6 | 	mov	arg01, #0
0eb64     18 B4 B1 FD | 	call	#__system___getiolock_0622
0eb68     3D 01 68 FC | 	wrlong	#0, result1
0eb6c     4C 00 00 FF 
0eb70     38 64 06 F1 | 	add	objptr, ##38968
0eb74     32 93 02 FB | 	rdlong	arg01, objptr
0eb78     4C 00 00 FF 
0eb7c     38 64 86 F1 | 	sub	objptr, ##38968
0eb80     08 65 B1 FD | 	call	#__system___chdir
0eb84     14 00 90 FD | 	jmp	#LR__1258
0eb88                 | LR__1257
0eb88     4C 00 00 FF 
0eb8c     38 64 06 F1 | 	add	objptr, ##38968
0eb90     32 AD 62 FC | 	wrlong	local04, objptr
0eb94     4C 00 00 FF 
0eb98     38 64 86 F1 | 	sub	objptr, ##38968
0eb9c                 | LR__1258
0eb9c                 | '   print "Current directory: ";currentdir$
0eb9c     00 92 06 F6 | 	mov	arg01, #0
0eba0     DC B3 B1 FD | 	call	#__system___getiolock_0622
0eba4     3D 93 02 F6 | 	mov	arg01, result1
0eba8     50 5E B1 FD | 	call	#__system___lockmem
0ebac     96 01 00 FF 
0ebb0     86 95 06 F6 | 	mov	arg02, ##@LR__5970
0ebb4     00 92 06 F6 | 	mov	arg01, #0
0ebb8     00 96 06 F6 | 	mov	arg03, #0
0ebbc     30 6B B1 FD | 	call	#__system___basic_print_string
0ebc0     4C 00 00 FF 
0ebc4     38 64 06 F1 | 	add	objptr, ##38968
0ebc8     32 95 02 FB | 	rdlong	arg02, objptr
0ebcc     4C 00 00 FF 
0ebd0     38 64 86 F1 | 	sub	objptr, ##38968
0ebd4     00 92 06 F6 | 	mov	arg01, #0
0ebd8     00 96 06 F6 | 	mov	arg03, #0
0ebdc     10 6B B1 FD | 	call	#__system___basic_print_string
0ebe0     00 92 06 F6 | 	mov	arg01, #0
0ebe4     0A 94 06 F6 | 	mov	arg02, #10
0ebe8     00 96 06 F6 | 	mov	arg03, #0
0ebec     A8 6A B1 FD | 	call	#__system___basic_print_char
0ebf0     00 92 06 F6 | 	mov	arg01, #0
0ebf4     88 B3 B1 FD | 	call	#__system___getiolock_0622
0ebf8     3D 01 68 FC | 	wrlong	#0, result1
0ebfc                 | LR__1259
0ebfc     E7 F0 03 F6 | 	mov	ptra, fp
0ec00     F2 00 A0 FD | 	call	#popregs_
0ec04                 | _do_cd_ret
0ec04     2D 00 64 FD | 	ret
0ec08                 | 
0ec08                 | ' 
0ec08                 | ' '-------------------- changefreq
0ec08                 | ' 
0ec08                 | ' sub do_changefreq
0ec08                 | _do_changefreq
0ec08     0A CA 05 F6 | 	mov	COUNT_, #10
0ec0c     E8 00 A0 FD | 	call	#pushregs_
0ec10     2C F0 07 F1 | 	add	ptra, #44
0ec14     58 EA BF FD | 	call	#_pop
0ec18     3F 95 02 F6 | 	mov	arg02, result3
0ec1c     E7 7A 62 FC | 	wrlong	result1, fp
0ec20     04 CE 05 F1 | 	add	fp, #4
0ec24     E7 7C 62 FC | 	wrlong	result2, fp
0ec28     04 CE 05 F1 | 	add	fp, #4
0ec2c     E7 94 62 FC | 	wrlong	arg02, fp
0ec30     08 CE 85 F1 | 	sub	fp, #8
0ec34     E7 92 02 F6 | 	mov	arg01, fp
0ec38     CC EC BF FD | 	call	#_converttofloat
0ec3c     3D A7 02 F6 | 	mov	local01, result1
0ec40     2C EA BF FD | 	call	#_pop
0ec44     3F 95 02 F6 | 	mov	arg02, result3
0ec48     E7 7A 62 FC | 	wrlong	result1, fp
0ec4c     04 CE 05 F1 | 	add	fp, #4
0ec50     E7 7C 62 FC | 	wrlong	result2, fp
0ec54     04 CE 05 F1 | 	add	fp, #4
0ec58     E7 94 62 FC | 	wrlong	arg02, fp
0ec5c     08 CE 85 F1 | 	sub	fp, #8
0ec60     E7 92 02 F6 | 	mov	arg01, fp
0ec64     E4 EB BF FD | 	call	#_converttoint
0ec68     3D A9 52 F6 | 	abs	local02, result1 wc
0ec6c     07 A8 06 F5 | 	and	local02, #7
0ec70     54 A9 82 F6 | 	negc	local02, local02
0ec74     54 95 02 F6 | 	mov	arg02, local02
0ec78     03 94 66 F0 | 	shl	arg02, #3
0ec7c     54 95 82 F1 | 	sub	arg02, local02
0ec80     02 94 66 F0 | 	shl	arg02, #2
0ec84     32 93 02 F6 | 	mov	arg01, objptr
0ec88     16 00 00 FF 
0ec8c     BC 92 06 F1 | 	add	arg01, ##11452
0ec90     49 95 02 F1 | 	add	arg02, arg01
0ec94     16 94 06 F1 | 	add	arg02, #22
0ec98     4A AB E2 FA | 	rdword	local03, arg02
0ec9c                 | ' amode=channels(channel).amode
0ec9c                 | ' if amode>0 then
0ec9c     01 AA 56 F2 | 	cmps	local03, #1 wc
0eca0     AC 01 90 CD |  if_b	jmp	#LR__1262
0eca4     53 95 02 F6 | 	mov	arg02, local01
0eca8     FC 16 20 FF 
0ecac     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecb0     F8 93 B1 FD | 	call	#__system____builtin_logbase
0ecb4     3D AD 02 F6 | 	mov	local04, result1
0ecb8     1E 94 C6 F9 | 	decod	arg02, #30
0ecbc     FC 16 20 FF 
0ecc0     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecc4     E4 93 B1 FD | 	call	#__system____builtin_logbase
0ecc8     3D 95 02 F6 | 	mov	arg02, result1
0eccc     56 93 02 F6 | 	mov	arg01, local04
0ecd0     FC 85 B1 FD | 	call	#__system___float_div
0ecd4     3D 93 02 F6 | 	mov	arg01, result1
0ecd8     00 94 06 F6 | 	mov	arg02, #0
0ecdc     B4 88 B1 FD | 	call	#__system___float_tointeger
0ece0     3D AF 02 F6 | 	mov	local05, result1
0ece4     1E AC C6 F9 | 	decod	local04, #30
0ece8     57 93 02 F6 | 	mov	arg01, local05
0ecec     55 93 02 F1 | 	add	arg01, local03
0ecf0     49 93 52 F6 | 	abs	arg01, arg01 wc
0ecf4     1F B0 C6 C9 |  if_b	decod	local06, #31
0ecf8     00 B0 06 36 |  if_ae	mov	local06, #0
0ecfc     C8 7F B1 FD | 	call	#__system___float_fromuns
0ed00     58 7B 62 F5 | 	xor	result1, local06
0ed04     3D 95 02 F6 | 	mov	arg02, result1
0ed08     56 93 02 F6 | 	mov	arg01, local04
0ed0c     D4 92 B1 FD | 	call	#__system____builtin_powf
0ed10     3D 93 02 F6 | 	mov	arg01, result1
0ed14     01 94 06 F6 | 	mov	arg02, #1
0ed18     78 88 B1 FD | 	call	#__system___float_tointeger
0ed1c     3D B3 02 F6 | 	mov	local07, result1
0ed20                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0ed20                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed20     40 00 00 FF 
0ed24     01 B2 56 F2 | 	cmps	local07, ##32769 wc
0ed28     14 00 90 CD |  if_b	jmp	#LR__1260
0ed2c     59 B5 52 F6 | 	abs	local08, local07 wc
0ed30     0F B4 46 F0 | 	shr	local08, #15
0ed34     5A B5 82 F6 | 	negc	local08, local08
0ed38     0F B2 C6 F9 | 	decod	local07, #15
0ed3c     04 00 90 FD | 	jmp	#LR__1261
0ed40                 | LR__1260
0ed40     01 B4 06 F6 | 	mov	local08, #1
0ed44                 | LR__1261
0ed44     AA 2B 25 FF 
0ed48     00 93 06 F6 | 	mov	arg01, ##1247237376
0ed4c     53 95 02 F6 | 	mov	arg02, local01
0ed50     7C 85 B1 FD | 	call	#__system___float_div
0ed54     3D AD 02 F6 | 	mov	local04, result1
0ed58     5A 93 52 F6 | 	abs	arg01, local08 wc
0ed5c     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed60     00 B0 06 36 |  if_ae	mov	local06, #0
0ed64     60 7F B1 FD | 	call	#__system___float_fromuns
0ed68     58 7B 62 F5 | 	xor	result1, local06
0ed6c     3D B5 02 F6 | 	mov	local08, result1
0ed70     1E B6 C6 F9 | 	decod	local09, #30
0ed74     12 92 06 F6 | 	mov	arg01, #18
0ed78     55 93 82 F1 | 	sub	arg01, local03
0ed7c     57 93 82 F1 | 	sub	arg01, local05
0ed80     49 93 52 F6 | 	abs	arg01, arg01 wc
0ed84     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed88     00 B0 06 36 |  if_ae	mov	local06, #0
0ed8c     38 7F B1 FD | 	call	#__system___float_fromuns
0ed90     58 7B 62 F5 | 	xor	result1, local06
0ed94     3D 95 02 F6 | 	mov	arg02, result1
0ed98     5B 93 02 F6 | 	mov	arg01, local09
0ed9c     44 92 B1 FD | 	call	#__system____builtin_powf
0eda0     3D 95 02 F6 | 	mov	arg02, result1
0eda4     5A 93 02 F6 | 	mov	arg01, local08
0eda8     20 83 B1 FD | 	call	#__system___float_mul
0edac     3D 95 02 F6 | 	mov	arg02, result1
0edb0     56 93 02 F6 | 	mov	arg01, local04
0edb4     18 85 B1 FD | 	call	#__system___float_div
0edb8     3D 93 02 F6 | 	mov	arg01, result1
0edbc     01 94 06 F6 | 	mov	arg02, #1
0edc0     D0 87 B1 FD | 	call	#__system___float_tointeger
0edc4     3D B9 02 F6 | 	mov	local10, result1
0edc8     54 B7 02 F6 | 	mov	local09, local02
0edcc     03 B6 66 F0 | 	shl	local09, #3
0edd0     54 B7 82 F1 | 	sub	local09, local02
0edd4     02 B6 66 F0 | 	shl	local09, #2
0edd8     32 B5 02 F6 | 	mov	local08, objptr
0eddc     16 00 00 FF 
0ede0     BC B4 06 F1 | 	add	local08, ##11452
0ede4     5A B7 02 F1 | 	add	local09, local08
0ede8     AA 2B 25 FF 
0edec     00 B5 06 F6 | 	mov	local08, ##1247237376
0edf0     5C 93 52 F6 | 	abs	arg01, local10 wc
0edf4     1F B0 C6 C9 |  if_b	decod	local06, #31
0edf8     00 B0 06 36 |  if_ae	mov	local06, #0
0edfc     C8 7E B1 FD | 	call	#__system___float_fromuns
0ee00     58 7B 62 F5 | 	xor	result1, local06
0ee04     3D 95 02 F6 | 	mov	arg02, result1
0ee08     5A 93 02 F6 | 	mov	arg01, local08
0ee0c     C0 84 B1 FD | 	call	#__system___float_div
0ee10     3D B5 02 F6 | 	mov	local08, result1
0ee14     59 93 52 F6 | 	abs	arg01, local07 wc
0ee18     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee1c     00 B0 06 36 |  if_ae	mov	local06, #0
0ee20     A4 7E B1 FD | 	call	#__system___float_fromuns
0ee24     58 7B 62 F5 | 	xor	result1, local06
0ee28     3D 93 02 F6 | 	mov	arg01, result1
0ee2c     00 40 24 FF 
0ee30     00 94 06 F6 | 	mov	arg02, ##1216348160
0ee34     98 84 B1 FD | 	call	#__system___float_div
0ee38     3D 95 02 F6 | 	mov	arg02, result1
0ee3c     5A 93 02 F6 | 	mov	arg01, local08
0ee40     88 82 B1 FD | 	call	#__system___float_mul
0ee44     18 B6 06 F1 | 	add	local09, #24
0ee48     5B 7B 62 FC | 	wrlong	result1, local09
0ee4c     BC 00 90 FD | 	jmp	#LR__1263
0ee50                 | LR__1262
0ee50     18 B8 06 F6 | 	mov	local10, #24
0ee54     00 40 24 FF 
0ee58     00 AC 06 F6 | 	mov	local04, ##1216348160
0ee5c     53 93 02 F6 | 	mov	arg01, local01
0ee60     C7 07 24 FF 
0ee64     00 94 06 F6 | 	mov	arg02, ##1208978944
0ee68     64 84 B1 FD | 	call	#__system___float_div
0ee6c     3D 95 02 F6 | 	mov	arg02, result1
0ee70     56 93 02 F6 | 	mov	arg01, local04
0ee74     54 82 B1 FD | 	call	#__system___float_mul
0ee78     3D 93 02 F6 | 	mov	arg01, result1
0ee7c     01 94 06 F6 | 	mov	arg02, #1
0ee80     10 87 B1 FD | 	call	#__system___float_tointeger
0ee84     3D B3 02 F6 | 	mov	local07, result1
0ee88     54 B7 02 F6 | 	mov	local09, local02
0ee8c     03 B6 66 F0 | 	shl	local09, #3
0ee90     54 B7 82 F1 | 	sub	local09, local02
0ee94     02 B6 66 F0 | 	shl	local09, #2
0ee98     32 B5 02 F6 | 	mov	local08, objptr
0ee9c     16 00 00 FF 
0eea0     BC B4 06 F1 | 	add	local08, ##11452
0eea4     5A B7 02 F1 | 	add	local09, local08
0eea8     AA 2B 25 FF 
0eeac     00 B5 06 F6 | 	mov	local08, ##1247237376
0eeb0     5C 93 52 F6 | 	abs	arg01, local10 wc
0eeb4     1F B0 C6 C9 |  if_b	decod	local06, #31
0eeb8     00 B0 06 36 |  if_ae	mov	local06, #0
0eebc     08 7E B1 FD | 	call	#__system___float_fromuns
0eec0     58 7B 62 F5 | 	xor	result1, local06
0eec4     3D 95 02 F6 | 	mov	arg02, result1
0eec8     5A 93 02 F6 | 	mov	arg01, local08
0eecc     00 84 B1 FD | 	call	#__system___float_div
0eed0     3D B5 02 F6 | 	mov	local08, result1
0eed4     59 93 52 F6 | 	abs	arg01, local07 wc
0eed8     1F B0 C6 C9 |  if_b	decod	local06, #31
0eedc     00 B0 06 36 |  if_ae	mov	local06, #0
0eee0     E4 7D B1 FD | 	call	#__system___float_fromuns
0eee4     58 7B 62 F5 | 	xor	result1, local06
0eee8     3D 93 02 F6 | 	mov	arg01, result1
0eeec     00 40 24 FF 
0eef0     00 94 06 F6 | 	mov	arg02, ##1216348160
0eef4     D8 83 B1 FD | 	call	#__system___float_div
0eef8     3D 95 02 F6 | 	mov	arg02, result1
0eefc     5A 93 02 F6 | 	mov	arg01, local08
0ef00     C8 81 B1 FD | 	call	#__system___float_mul
0ef04     18 B6 06 F1 | 	add	local09, #24
0ef08     5B 7B 62 FC | 	wrlong	result1, local09
0ef0c                 | LR__1263
0ef0c     10 B2 66 F0 | 	shl	local07, #16
0ef10     5C B3 02 F1 | 	add	local07, local10
0ef14                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef14     38 00 00 FF 
0ef18     B4 65 06 F1 | 	add	objptr, ##29108
0ef1c     32 93 02 FB | 	rdlong	arg01, objptr
0ef20     38 00 00 FF 
0ef24     B4 65 86 F1 | 	sub	objptr, ##29108
0ef28     54 B9 02 F6 | 	mov	local10, local02
0ef2c     06 B8 66 F0 | 	shl	local10, #6
0ef30     5C 93 02 F1 | 	add	arg01, local10
0ef34     08 92 06 F1 | 	add	arg01, #8
0ef38     49 7B 02 FB | 	rdlong	result1, arg01
0ef3c     1B 7A 2E F4 | 	testbn	result1, #27 wz
0ef40     28 00 90 5D |  if_ne	jmp	#LR__1264
0ef44     38 00 00 FF 
0ef48     B4 65 06 F1 | 	add	objptr, ##29108
0ef4c     32 93 02 FB | 	rdlong	arg01, objptr
0ef50     38 00 00 FF 
0ef54     B4 65 86 F1 | 	sub	objptr, ##29108
0ef58     06 A8 66 F0 | 	shl	local02, #6
0ef5c     54 93 02 F1 | 	add	arg01, local02
0ef60     18 92 06 F1 | 	add	arg01, #24
0ef64     49 B3 62 FC | 	wrlong	local07, arg01
0ef68     68 00 90 FD | 	jmp	#LR__1265
0ef6c                 | LR__1264
0ef6c     38 00 00 FF 
0ef70     B4 65 06 F1 | 	add	objptr, ##29108
0ef74     32 AD 02 FB | 	rdlong	local04, objptr
0ef78     38 00 00 FF 
0ef7c     B4 65 86 F1 | 	sub	objptr, ##29108
0ef80     54 B9 02 F6 | 	mov	local10, local02
0ef84     06 B8 66 F0 | 	shl	local10, #6
0ef88     5C AD 02 F1 | 	add	local04, local10
0ef8c     18 AC 06 F1 | 	add	local04, #24
0ef90     3E 2C 25 FF 
0ef94     3C 92 06 F6 | 	mov	arg01, ##1247312956
0ef98     53 95 02 F6 | 	mov	arg02, local01
0ef9c     30 83 B1 FD | 	call	#__system___float_div
0efa0     3D 93 02 F6 | 	mov	arg01, result1
0efa4     01 94 06 F6 | 	mov	arg02, #1
0efa8     E8 85 B1 FD | 	call	#__system___float_tointeger
0efac     56 7B 52 FC | 	wrword	result1, local04
0efb0     38 00 00 FF 
0efb4     B4 65 06 F1 | 	add	objptr, ##29108
0efb8     32 93 02 FB | 	rdlong	arg01, objptr
0efbc     38 00 00 FF 
0efc0     B4 65 86 F1 | 	sub	objptr, ##29108
0efc4     06 A8 66 F0 | 	shl	local02, #6
0efc8     54 93 02 F1 | 	add	arg01, local02
0efcc     1A 92 06 F1 | 	add	arg01, #26
0efd0     49 01 5A FC | 	wrword	#256, arg01
0efd4                 | LR__1265
0efd4     E7 F0 03 F6 | 	mov	ptra, fp
0efd8     F2 00 A0 FD | 	call	#popregs_
0efdc                 | _do_changefreq_ret
0efdc     2D 00 64 FD | 	ret
0efe0                 | 
0efe0                 | ' 
0efe0                 | ' '-------------------- changepan
0efe0                 | ' 
0efe0                 | ' sub do_changepan
0efe0                 | _do_changepan
0efe0     02 CA 05 F6 | 	mov	COUNT_, #2
0efe4     E8 00 A0 FD | 	call	#pushregs_
0efe8     14 F0 07 F1 | 	add	ptra, #20
0efec     80 E6 BF FD | 	call	#_pop
0eff0     E7 7A 62 FC | 	wrlong	result1, fp
0eff4     04 CE 05 F1 | 	add	fp, #4
0eff8     E7 7C 62 FC | 	wrlong	result2, fp
0effc     04 CE 05 F1 | 	add	fp, #4
0f000     E7 7E 62 FC | 	wrlong	result3, fp
0f004     08 CE 85 F1 | 	sub	fp, #8
0f008     00 00 23 FF 
0f00c     00 A6 06 F6 | 	mov	local01, ##1174405120
0f010     E7 92 02 F6 | 	mov	arg01, fp
0f014     F0 E8 BF FD | 	call	#_converttofloat
0f018     3D 95 02 F6 | 	mov	arg02, result1
0f01c     53 93 02 F6 | 	mov	arg01, local01
0f020     A8 80 B1 FD | 	call	#__system___float_mul
0f024     3D 93 02 F6 | 	mov	arg01, result1
0f028     01 94 06 F6 | 	mov	arg02, #1
0f02c     64 85 B1 FD | 	call	#__system___float_tointeger
0f030     3D A7 02 F6 | 	mov	local01, result1
0f034     0D A8 C6 F9 | 	decod	local02, #13
0f038     53 A9 02 F1 | 	add	local02, local01
0f03c                 | ' 
0f03c                 | ' t1=pop()
0f03c                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f03c                 | ' if pan<0 then pan=0
0f03c     00 A8 56 F2 | 	cmps	local02, #0 wc
0f040     00 A8 06 C6 |  if_b	mov	local02, #0
0f044                 | ' if pan>16384 then pan=16384
0f044     20 00 00 FF 
0f048     01 A8 56 F2 | 	cmps	local02, ##16385 wc
0f04c     0E A8 C6 39 |  if_ae	decod	local02, #14
0f050     1C E6 BF FD | 	call	#_pop
0f054     3F A7 02 F6 | 	mov	local01, result3
0f058     E7 7A 62 FC | 	wrlong	result1, fp
0f05c     04 CE 05 F1 | 	add	fp, #4
0f060     E7 7C 62 FC | 	wrlong	result2, fp
0f064     04 CE 05 F1 | 	add	fp, #4
0f068     E7 A6 62 FC | 	wrlong	local01, fp
0f06c     08 CE 85 F1 | 	sub	fp, #8
0f070     E7 92 02 F6 | 	mov	arg01, fp
0f074     D4 E7 BF FD | 	call	#_converttoint
0f078     3D A7 52 F6 | 	abs	local01, result1 wc
0f07c     07 A6 06 F5 | 	and	local01, #7
0f080     53 A7 82 F6 | 	negc	local01, local01
0f084     38 00 00 FF 
0f088     B4 65 06 F1 | 	add	objptr, ##29108
0f08c     32 93 02 FB | 	rdlong	arg01, objptr
0f090     38 00 00 FF 
0f094     B4 65 86 F1 | 	sub	objptr, ##29108
0f098     06 A6 66 F0 | 	shl	local01, #6
0f09c     53 93 02 F1 | 	add	arg01, local01
0f0a0     16 92 06 F1 | 	add	arg01, #22
0f0a4     49 A9 52 FC | 	wrword	local02, arg01
0f0a8     E7 F0 03 F6 | 	mov	ptra, fp
0f0ac     F2 00 A0 FD | 	call	#popregs_
0f0b0                 | _do_changepan_ret
0f0b0     2D 00 64 FD | 	ret
0f0b4                 | 
0f0b4                 | ' 
0f0b4                 | ' '-------------------- changevol
0f0b4                 | ' 
0f0b4                 | ' sub do_changevol
0f0b4                 | _do_changevol
0f0b4     01 CA 05 F6 | 	mov	COUNT_, #1
0f0b8     E8 00 A0 FD | 	call	#pushregs_
0f0bc     14 F0 07 F1 | 	add	ptra, #20
0f0c0     AC E5 BF FD | 	call	#_pop
0f0c4     3F 95 02 F6 | 	mov	arg02, result3
0f0c8     E7 7A 62 FC | 	wrlong	result1, fp
0f0cc     04 CE 05 F1 | 	add	fp, #4
0f0d0     E7 7C 62 FC | 	wrlong	result2, fp
0f0d4     04 CE 05 F1 | 	add	fp, #4
0f0d8     E7 94 62 FC | 	wrlong	arg02, fp
0f0dc     08 CE 85 F1 | 	sub	fp, #8
0f0e0     E7 92 02 F6 | 	mov	arg01, fp
0f0e4     20 E8 BF FD | 	call	#_converttofloat
0f0e8     3D 93 02 F6 | 	mov	arg01, result1
0f0ec     00 3D 22 FF 
0f0f0     00 94 06 F6 | 	mov	arg02, ##1148846080
0f0f4     D4 7F B1 FD | 	call	#__system___float_mul
0f0f8     3D 93 02 F6 | 	mov	arg01, result1
0f0fc     01 94 06 F6 | 	mov	arg02, #1
0f100     90 84 B1 FD | 	call	#__system___float_tointeger
0f104     3D 95 52 F6 | 	abs	arg02, result1 wc
0f108     0D 94 46 F7 | 	zerox	arg02, #13
0f10c     4A A7 82 F6 | 	negc	local01, arg02
0f110     5C E5 BF FD | 	call	#_pop
0f114     3F 95 02 F6 | 	mov	arg02, result3
0f118     E7 7A 62 FC | 	wrlong	result1, fp
0f11c     04 CE 05 F1 | 	add	fp, #4
0f120     E7 7C 62 FC | 	wrlong	result2, fp
0f124     04 CE 05 F1 | 	add	fp, #4
0f128     E7 94 62 FC | 	wrlong	arg02, fp
0f12c     08 CE 85 F1 | 	sub	fp, #8
0f130     E7 92 02 F6 | 	mov	arg01, fp
0f134     14 E7 BF FD | 	call	#_converttoint
0f138     3D 95 52 F6 | 	abs	arg02, result1 wc
0f13c     07 94 06 F5 | 	and	arg02, #7
0f140     4A 95 82 F6 | 	negc	arg02, arg02
0f144     38 00 00 FF 
0f148     B4 65 06 F1 | 	add	objptr, ##29108
0f14c     32 93 02 FB | 	rdlong	arg01, objptr
0f150     38 00 00 FF 
0f154     B4 65 86 F1 | 	sub	objptr, ##29108
0f158     06 94 66 F0 | 	shl	arg02, #6
0f15c     4A 93 02 F1 | 	add	arg01, arg02
0f160     14 92 06 F1 | 	add	arg01, #20
0f164     49 A7 52 FC | 	wrword	local01, arg01
0f168     E7 F0 03 F6 | 	mov	ptra, fp
0f16c     F2 00 A0 FD | 	call	#popregs_
0f170                 | _do_changevol_ret
0f170     2D 00 64 FD | 	ret
0f174                 | 
0f174                 | ' 
0f174                 | ' '-------------------- changewav
0f174                 | ' 
0f174                 | ' sub do_changewav
0f174                 | _do_changewav
0f174     01 CA 05 F6 | 	mov	COUNT_, #1
0f178     E8 00 A0 FD | 	call	#pushregs_
0f17c     14 F0 07 F1 | 	add	ptra, #20
0f180     EC E4 BF FD | 	call	#_pop
0f184     3F 95 02 F6 | 	mov	arg02, result3
0f188     E7 7A 62 FC | 	wrlong	result1, fp
0f18c     04 CE 05 F1 | 	add	fp, #4
0f190     E7 7C 62 FC | 	wrlong	result2, fp
0f194     04 CE 05 F1 | 	add	fp, #4
0f198     E7 94 62 FC | 	wrlong	arg02, fp
0f19c     08 CE 85 F1 | 	sub	fp, #8
0f1a0     E7 92 02 F6 | 	mov	arg01, fp
0f1a4     A4 E6 BF FD | 	call	#_converttoint
0f1a8     3D A7 02 F6 | 	mov	local01, result1
0f1ac                 | ' 
0f1ac                 | ' t1=pop()
0f1ac                 | ' wave=converttoint(t1)
0f1ac                 | ' if wave<0 then wave=0
0f1ac     00 A6 56 F2 | 	cmps	local01, #0 wc
0f1b0     00 A6 06 C6 |  if_b	mov	local01, #0
0f1b4     B8 E4 BF FD | 	call	#_pop
0f1b8     3F 95 02 F6 | 	mov	arg02, result3
0f1bc     E7 7A 62 FC | 	wrlong	result1, fp
0f1c0     04 CE 05 F1 | 	add	fp, #4
0f1c4     E7 7C 62 FC | 	wrlong	result2, fp
0f1c8     04 CE 05 F1 | 	add	fp, #4
0f1cc     E7 94 62 FC | 	wrlong	arg02, fp
0f1d0     08 CE 85 F1 | 	sub	fp, #8
0f1d4     E7 92 02 F6 | 	mov	arg01, fp
0f1d8     70 E6 BF FD | 	call	#_converttoint
0f1dc     3D 7D 52 F6 | 	abs	result2, result1 wc
0f1e0     07 7C 06 F5 | 	and	result2, #7
0f1e4     3E 7D 82 F6 | 	negc	result2, result2
0f1e8                 | ' if wave <32 then 
0f1e8     20 A6 56 F2 | 	cmps	local01, #32 wc
0f1ec     34 00 90 3D |  if_ae	jmp	#LR__1270
0f1f0     38 00 00 FF 
0f1f4     B4 65 06 F1 | 	add	objptr, ##29108
0f1f8     32 93 02 FB | 	rdlong	arg01, objptr
0f1fc     38 00 00 FF 
0f200     B4 65 86 F1 | 	sub	objptr, ##29108
0f204     06 7C 66 F0 | 	shl	result2, #6
0f208     3E 93 02 F1 | 	add	arg01, result2
0f20c     08 92 06 F1 | 	add	arg01, #8
0f210     0B A6 66 F0 | 	shl	local01, #11
0f214     00 00 40 FF 
0f218     00 A6 06 F1 | 	add	local01, ##-2147483648
0f21c     49 A7 62 FC | 	wrlong	local01, arg01
0f220     28 00 90 FD | 	jmp	#LR__1271
0f224                 | LR__1270
0f224     38 00 00 FF 
0f228     B4 65 06 F1 | 	add	objptr, ##29108
0f22c     32 93 02 FB | 	rdlong	arg01, objptr
0f230     38 00 00 FF 
0f234     B4 65 86 F1 | 	sub	objptr, ##29108
0f238     06 7C 66 F0 | 	shl	result2, #6
0f23c     3E 93 02 F1 | 	add	arg01, result2
0f240     08 92 06 F1 | 	add	arg01, #8
0f244     00 00 C4 FF 
0f248     49 01 68 FC | 	wrlong	##-2013265920, arg01
0f24c                 | LR__1271
0f24c     E7 F0 03 F6 | 	mov	ptra, fp
0f250     F2 00 A0 FD | 	call	#popregs_
0f254                 | _do_changewav_ret
0f254     2D 00 64 FD | 	ret
0f258                 | 
0f258                 | ' 
0f258                 | ' '-------------------- chr$
0f258                 | ' 
0f258                 | ' sub do_chr
0f258                 | _do_chr
0f258     00 CA 05 F6 | 	mov	COUNT_, #0
0f25c     E8 00 A0 FD | 	call	#pushregs_
0f260     14 F0 07 F1 | 	add	ptra, #20
0f264     4C 00 00 FF 
0f268     24 64 06 F1 | 	add	objptr, ##38948
0f26c     32 97 02 FB | 	rdlong	arg03, objptr
0f270     4B 95 02 F6 | 	mov	arg02, arg03
0f274     01 94 66 F0 | 	shl	arg02, #1
0f278     4B 95 02 F1 | 	add	arg02, arg03
0f27c     02 94 66 F0 | 	shl	arg02, #2
0f280     03 00 00 FF 
0f284     04 64 86 F1 | 	sub	objptr, ##1540
0f288     32 95 02 F1 | 	add	arg02, objptr
0f28c     4A 97 02 FB | 	rdlong	arg03, arg02
0f290                 | ' 
0f290                 | ' numpar=compiledline(lineptr_e).result.uresult
0f290                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f290     02 96 16 F2 | 	cmp	arg03, #2 wc
0f294     49 00 00 FF 
0f298     20 64 86 F1 | 	sub	objptr, ##37408
0f29c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0f2a0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f2a4     00 92 06 F6 | 	mov	arg01, #0
0f2a8     D4 AC B1 FD | 	call	#__system___getiolock_0622
0f2ac     3D 93 02 F6 | 	mov	arg01, result1
0f2b0     48 57 B1 FD | 	call	#__system___lockmem
0f2b4     96 01 00 FF 
0f2b8     9A 95 06 F6 | 	mov	arg02, ##@LR__5971
0f2bc     00 92 06 F6 | 	mov	arg01, #0
0f2c0     00 96 06 F6 | 	mov	arg03, #0
0f2c4     28 64 B1 FD | 	call	#__system___basic_print_string
0f2c8     00 92 06 F6 | 	mov	arg01, #0
0f2cc     B0 AC B1 FD | 	call	#__system___getiolock_0622
0f2d0     3D 01 68 FC | 	wrlong	#0, result1
0f2d4     27 92 06 F6 | 	mov	arg01, #39
0f2d8     00 94 06 F6 | 	mov	arg02, #0
0f2dc     F4 19 B1 FD | 	call	#_printerror
0f2e0     48 00 90 FD | 	jmp	#LR__1281
0f2e4                 | LR__1280
0f2e4     88 E3 BF FD | 	call	#_pop
0f2e8     3F 97 02 F6 | 	mov	arg03, result3
0f2ec     E7 7A 62 FC | 	wrlong	result1, fp
0f2f0     04 CE 05 F1 | 	add	fp, #4
0f2f4     E7 7C 62 FC | 	wrlong	result2, fp
0f2f8     04 CE 05 F1 | 	add	fp, #4
0f2fc     E7 96 62 FC | 	wrlong	arg03, fp
0f300     08 CE 85 F1 | 	sub	fp, #8
0f304     E7 92 02 F6 | 	mov	arg01, fp
0f308     40 E5 BF FD | 	call	#_converttoint
0f30c     3D 93 02 F6 | 	mov	arg01, result1
0f310     54 71 B1 FD | 	call	#__system__Chr_S
0f314     E7 7A 62 FC | 	wrlong	result1, fp
0f318     08 CE 05 F1 | 	add	fp, #8
0f31c     E7 3E 68 FC | 	wrlong	#31, fp
0f320     08 CE 85 F1 | 	sub	fp, #8
0f324     E7 92 02 F6 | 	mov	arg01, fp
0f328     D4 E3 BF FD | 	call	#_push
0f32c                 | LR__1281
0f32c     E7 F0 03 F6 | 	mov	ptra, fp
0f330     F2 00 A0 FD | 	call	#popregs_
0f334                 | _do_chr_ret
0f334     2D 00 64 FD | 	ret
0f338                 | 
0f338                 | ' 
0f338                 | ' '-------------------- circle
0f338                 | ' 
0f338                 | ' sub do_circle
0f338                 | _do_circle
0f338     02 CA 05 F6 | 	mov	COUNT_, #2
0f33c     E8 00 A0 FD | 	call	#pushregs_
0f340     24 F0 07 F1 | 	add	ptra, #36
0f344     28 E3 BF FD | 	call	#_pop
0f348     3D 99 02 F6 | 	mov	arg04, result1
0f34c     3E 97 02 F6 | 	mov	arg03, result2
0f350     3F 95 02 F6 | 	mov	arg02, result3
0f354     18 CE 05 F1 | 	add	fp, #24
0f358     E7 98 62 FC | 	wrlong	arg04, fp
0f35c     04 CE 05 F1 | 	add	fp, #4
0f360     E7 96 62 FC | 	wrlong	arg03, fp
0f364     04 CE 05 F1 | 	add	fp, #4
0f368     E7 94 62 FC | 	wrlong	arg02, fp
0f36c     20 CE 85 F1 | 	sub	fp, #32
0f370     FC E2 BF FD | 	call	#_pop
0f374     3D 99 02 F6 | 	mov	arg04, result1
0f378     3E 97 02 F6 | 	mov	arg03, result2
0f37c     3F A7 02 F6 | 	mov	local01, result3
0f380     0C CE 05 F1 | 	add	fp, #12
0f384     E7 98 62 FC | 	wrlong	arg04, fp
0f388     04 CE 05 F1 | 	add	fp, #4
0f38c     E7 96 62 FC | 	wrlong	arg03, fp
0f390     04 CE 05 F1 | 	add	fp, #4
0f394     E7 A6 62 FC | 	wrlong	local01, fp
0f398     14 CE 85 F1 | 	sub	fp, #20
0f39c     D0 E2 BF FD | 	call	#_pop
0f3a0     E7 7A 62 FC | 	wrlong	result1, fp
0f3a4     04 CE 05 F1 | 	add	fp, #4
0f3a8     E7 7C 62 FC | 	wrlong	result2, fp
0f3ac     04 CE 05 F1 | 	add	fp, #4
0f3b0     E7 7E 62 FC | 	wrlong	result3, fp
0f3b4                 | ' 
0f3b4                 | ' t3=pop()
0f3b4                 | ' t2=pop()
0f3b4                 | ' t1=pop()
0f3b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3b4     3F 99 02 F6 | 	mov	arg04, result3
0f3b8     08 CE 85 F1 | 	sub	fp, #8
0f3bc     1C 98 0E F2 | 	cmp	arg04, #28 wz
0f3c0     08 CE 05 51 |  if_ne	add	fp, #8
0f3c4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0f3c8     08 CE 85 51 |  if_ne	sub	fp, #8
0f3cc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0f3d0     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f3d4     14 CE 05 F1 | 	add	fp, #20
0f3d8     E7 A6 02 FB | 	rdlong	local01, fp
0f3dc     14 CE 85 F1 | 	sub	fp, #20
0f3e0     1C A6 0E F2 | 	cmp	local01, #28 wz
0f3e4     14 CE 05 51 |  if_ne	add	fp, #20
0f3e8     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f3ec     14 CE 85 51 |  if_ne	sub	fp, #20
0f3f0     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3f4     58 00 90 5D |  if_ne	jmp	#LR__1290
0f3f8     20 CE 05 F1 | 	add	fp, #32
0f3fc     E7 A6 02 FB | 	rdlong	local01, fp
0f400     20 CE 85 F1 | 	sub	fp, #32
0f404     1C A6 0E F2 | 	cmp	local01, #28 wz
0f408     20 CE 05 51 |  if_ne	add	fp, #32
0f40c     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f410     20 CE 85 51 |  if_ne	sub	fp, #32
0f414     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f418     34 00 90 5D |  if_ne	jmp	#LR__1290
0f41c     E7 92 02 FB | 	rdlong	arg01, fp
0f420     0C CE 05 F1 | 	add	fp, #12
0f424     E7 94 02 FB | 	rdlong	arg02, fp
0f428     0C CE 05 F1 | 	add	fp, #12
0f42c     E7 96 02 FB | 	rdlong	arg03, fp
0f430     18 CE 85 F1 | 	sub	fp, #24
0f434     38 00 00 FF 
0f438     CC 65 06 F1 | 	add	objptr, ##29132
0f43c     32 99 02 FB | 	rdlong	arg04, objptr
0f440     38 00 00 FF 
0f444     CC 65 86 F1 | 	sub	objptr, ##29132
0f448     80 31 B1 FD | 	call	#_hg010b_spin2_circle
0f44c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f44c     4C 00 90 FD | 	jmp	#LR__1291
0f450                 | LR__1290
0f450     E7 92 02 F6 | 	mov	arg01, fp
0f454     F4 E3 BF FD | 	call	#_converttoint
0f458     3D A7 02 F6 | 	mov	local01, result1
0f45c     E7 92 02 F6 | 	mov	arg01, fp
0f460     0C 92 06 F1 | 	add	arg01, #12
0f464     E4 E3 BF FD | 	call	#_converttoint
0f468     3D A9 02 F6 | 	mov	local02, result1
0f46c     E7 92 02 F6 | 	mov	arg01, fp
0f470     18 92 06 F1 | 	add	arg01, #24
0f474     D4 E3 BF FD | 	call	#_converttoint
0f478     3D 97 02 F6 | 	mov	arg03, result1
0f47c     38 00 00 FF 
0f480     CC 65 06 F1 | 	add	objptr, ##29132
0f484     32 99 02 FB | 	rdlong	arg04, objptr
0f488     38 00 00 FF 
0f48c     CC 65 86 F1 | 	sub	objptr, ##29132
0f490     53 93 02 F6 | 	mov	arg01, local01
0f494     54 95 02 F6 | 	mov	arg02, local02
0f498     30 31 B1 FD | 	call	#_hg010b_spin2_circle
0f49c                 | LR__1291
0f49c     E7 F0 03 F6 | 	mov	ptra, fp
0f4a0     F2 00 A0 FD | 	call	#popregs_
0f4a4                 | _do_circle_ret
0f4a4     2D 00 64 FD | 	ret
0f4a8                 | 
0f4a8                 | ' 
0f4a8                 | ' '-------------------- click
0f4a8                 | ' 
0f4a8                 | ' sub do_click
0f4a8                 | _do_click
0f4a8     C4 E1 BF FD | 	call	#_pop
0f4ac     00 7A 4E F2 | 	cmps	result1, #0 wz
0f4b0                 | ' 
0f4b0                 | ' t1=pop()
0f4b0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4b0     52 00 00 AF 
0f4b4     E0 64 06 A1 |  if_e	add	objptr, ##42208
0f4b8     32 01 68 AC |  if_e	wrlong	#0, objptr
0f4bc     52 00 00 FF 
0f4c0     E0 64 C6 F3 | 	sumz	objptr, ##42208
0f4c4     32 03 68 5C |  if_ne	wrlong	#1, objptr
0f4c8     52 00 00 5F 
0f4cc     E0 64 86 51 |  if_ne	sub	objptr, ##42208
0f4d0                 | _do_click_ret
0f4d0     2D 00 64 FD | 	ret
0f4d4                 | 
0f4d4                 | ' 
0f4d4                 | ' '-------------------- close
0f4d4                 | ' 
0f4d4                 | ' sub do_close
0f4d4                 | _do_close
0f4d4     03 CA 05 F6 | 	mov	COUNT_, #3
0f4d8     E8 00 A0 FD | 	call	#pushregs_
0f4dc     90 E1 BF FD | 	call	#_pop
0f4e0     3D A7 02 F6 | 	mov	local01, result1
0f4e4     3F 97 02 F6 | 	mov	arg03, result3
0f4e8     3E A9 02 F6 | 	mov	local02, result2
0f4ec     4B AB 02 F6 | 	mov	local03, arg03
0f4f0                 | ' 
0f4f0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4f0                 | ' t1=pop()
0f4f0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f4f0     2C AA 0E F2 | 	cmp	local03, #44 wz
0f4f4     44 00 90 AD |  if_e	jmp	#LR__1300
0f4f8     00 92 06 F6 | 	mov	arg01, #0
0f4fc     80 AA B1 FD | 	call	#__system___getiolock_0622
0f500     3D 93 02 F6 | 	mov	arg01, result1
0f504     F4 54 B1 FD | 	call	#__system___lockmem
0f508     96 01 00 FF 
0f50c     A1 95 06 F6 | 	mov	arg02, ##@LR__5972
0f510     00 92 06 F6 | 	mov	arg01, #0
0f514     00 96 06 F6 | 	mov	arg03, #0
0f518     D4 61 B1 FD | 	call	#__system___basic_print_string
0f51c     00 92 06 F6 | 	mov	arg01, #0
0f520     0A 94 06 F6 | 	mov	arg02, #10
0f524     00 96 06 F6 | 	mov	arg03, #0
0f528     6C 61 B1 FD | 	call	#__system___basic_print_char
0f52c     00 92 06 F6 | 	mov	arg01, #0
0f530     4C AA B1 FD | 	call	#__system___getiolock_0622
0f534     3D 01 68 FC | 	wrlong	#0, result1
0f538     08 00 90 FD | 	jmp	#LR__1301
0f53c                 | LR__1300
0f53c                 | ' channel  = t1.result.iresult
0f53c                 | ' close #channel
0f53c     53 93 02 F6 | 	mov	arg01, local01
0f540     94 A0 B1 FD | 	call	#__system__close
0f544                 | LR__1301
0f544     E7 F0 03 F6 | 	mov	ptra, fp
0f548     F2 00 A0 FD | 	call	#popregs_
0f54c                 | _do_close_ret
0f54c     2D 00 64 FD | 	ret
0f550                 | 
0f550                 | ' 
0f550                 | ' '-------------------- cls
0f550                 | ' 
0f550                 | ' sub do_cls
0f550                 | _do_cls
0f550     38 00 00 FF 
0f554     E0 65 06 F1 | 	add	objptr, ##29152
0f558     32 93 02 FB | 	rdlong	arg01, objptr
0f55c     04 64 86 F1 | 	sub	objptr, #4
0f560     32 95 02 FB | 	rdlong	arg02, objptr
0f564     38 00 00 FF 
0f568     DC 65 86 F1 | 	sub	objptr, ##29148
0f56c     68 35 B1 FD | 	call	#_hg010b_spin2_cls
0f570     38 00 00 FF 
0f574     E0 65 06 F1 | 	add	objptr, ##29152
0f578     32 95 02 FB | 	rdlong	arg02, objptr
0f57c     14 64 86 F1 | 	sub	objptr, #20
0f580     32 95 62 FC | 	wrlong	arg02, objptr
0f584     38 00 00 FF 
0f588     CC 65 86 F1 | 	sub	objptr, ##29132
0f58c                 | _do_cls_ret
0f58c     2D 00 64 FD | 	ret
0f590                 | 
0f590                 | ' 
0f590                 | ' sub do_coginit
0f590                 | _do_coginit
0f590     05 CA 05 F6 | 	mov	COUNT_, #5
0f594     E8 00 A0 FD | 	call	#pushregs_
0f598     08 00 00 FF 
0f59c     1C F0 07 F1 | 	add	ptra, ##4124
0f5a0     4C 00 00 FF 
0f5a4     24 64 06 F1 | 	add	objptr, ##38948
0f5a8     32 A7 02 FB | 	rdlong	local01, objptr
0f5ac     53 A9 02 F6 | 	mov	local02, local01
0f5b0     01 A8 66 F0 | 	shl	local02, #1
0f5b4     53 A9 02 F1 | 	add	local02, local01
0f5b8     02 A8 66 F0 | 	shl	local02, #2
0f5bc     03 00 00 FF 
0f5c0     04 64 86 F1 | 	sub	objptr, ##1540
0f5c4     32 A9 02 F1 | 	add	local02, objptr
0f5c8     54 A9 02 FB | 	rdlong	local02, local02
0f5cc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5cc                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f5cc     02 A8 56 F2 | 	cmps	local02, #2 wc
0f5d0     49 00 00 FF 
0f5d4     20 64 86 F1 | 	sub	objptr, ##37408
0f5d8     08 00 90 CD |  if_b	jmp	#LR__1310
0f5dc     04 A8 56 F2 | 	cmps	local02, #4 wc
0f5e0     40 00 90 CD |  if_b	jmp	#LR__1311
0f5e4                 | LR__1310
0f5e4     00 92 06 F6 | 	mov	arg01, #0
0f5e8     94 A9 B1 FD | 	call	#__system___getiolock_0622
0f5ec     3D 93 02 F6 | 	mov	arg01, result1
0f5f0     08 54 B1 FD | 	call	#__system___lockmem
0f5f4     96 01 00 FF 
0f5f8     B3 95 06 F6 | 	mov	arg02, ##@LR__5973
0f5fc     00 92 06 F6 | 	mov	arg01, #0
0f600     00 96 06 F6 | 	mov	arg03, #0
0f604     E8 60 B1 FD | 	call	#__system___basic_print_string
0f608     00 92 06 F6 | 	mov	arg01, #0
0f60c     70 A9 B1 FD | 	call	#__system___getiolock_0622
0f610     3D 01 68 FC | 	wrlong	#0, result1
0f614     27 92 06 F6 | 	mov	arg01, #39
0f618     00 94 06 F6 | 	mov	arg02, #0
0f61c     B4 16 B1 FD | 	call	#_printerror
0f620     2C 01 90 FD | 	jmp	#LR__1315
0f624                 | LR__1311
0f624     48 E0 BF FD | 	call	#_pop
0f628     3F A7 02 F6 | 	mov	local01, result3
0f62c     08 00 00 FF 
0f630     10 CE 05 F1 | 	add	fp, ##4112
0f634     E7 7A 62 FC | 	wrlong	result1, fp
0f638     04 CE 05 F1 | 	add	fp, #4
0f63c     E7 7C 62 FC | 	wrlong	result2, fp
0f640     04 CE 05 F1 | 	add	fp, #4
0f644     E7 A6 62 FC | 	wrlong	local01, fp
0f648     08 CE 85 F1 | 	sub	fp, #8
0f64c     E7 92 02 F6 | 	mov	arg01, fp
0f650     08 00 00 FF 
0f654     10 CE 85 F1 | 	sub	fp, ##4112
0f658     F0 E1 BF FD | 	call	#_converttoint
0f65c     3D AB 02 F6 | 	mov	local03, result1
0f660     0C E0 BF FD | 	call	#_pop
0f664     3F A7 02 F6 | 	mov	local01, result3
0f668     08 00 00 FF 
0f66c     10 CE 05 F1 | 	add	fp, ##4112
0f670     E7 7A 62 FC | 	wrlong	result1, fp
0f674     04 CE 05 F1 | 	add	fp, #4
0f678     E7 7C 62 FC | 	wrlong	result2, fp
0f67c     04 CE 05 F1 | 	add	fp, #4
0f680     E7 A6 62 FC | 	wrlong	local01, fp
0f684     08 CE 85 F1 | 	sub	fp, #8
0f688     E7 92 02 F6 | 	mov	arg01, fp
0f68c     08 00 00 FF 
0f690     10 CE 85 F1 | 	sub	fp, ##4112
0f694     B4 E1 BF FD | 	call	#_converttoint
0f698     3D AD 02 F6 | 	mov	local04, result1
0f69c                 | ' t1=pop()
0f69c                 | ' ptra_val=converttoint(t1)
0f69c                 | ' t1=pop()
0f69c                 | ' addrval=converttoint(t1)
0f69c                 | ' if numpar=3 then 
0f69c     03 A8 0E F2 | 	cmp	local02, #3 wz
0f6a0     40 00 90 5D |  if_ne	jmp	#LR__1312
0f6a4     C8 DF BF FD | 	call	#_pop
0f6a8     3F A7 02 F6 | 	mov	local01, result3
0f6ac     08 00 00 FF 
0f6b0     10 CE 05 F1 | 	add	fp, ##4112
0f6b4     E7 7A 62 FC | 	wrlong	result1, fp
0f6b8     04 CE 05 F1 | 	add	fp, #4
0f6bc     E7 7C 62 FC | 	wrlong	result2, fp
0f6c0     04 CE 05 F1 | 	add	fp, #4
0f6c4     E7 A6 62 FC | 	wrlong	local01, fp
0f6c8     08 CE 85 F1 | 	sub	fp, #8
0f6cc     E7 92 02 F6 | 	mov	arg01, fp
0f6d0     08 00 00 FF 
0f6d4     10 CE 85 F1 | 	sub	fp, ##4112
0f6d8     70 E1 BF FD | 	call	#_converttoint
0f6dc     3D AF 02 F6 | 	mov	local05, result1
0f6e0     04 00 90 FD | 	jmp	#LR__1313
0f6e4                 | LR__1312
0f6e4     10 AE 06 F6 | 	mov	local05, #16
0f6e8                 | LR__1313
0f6e8                 | '     
0f6e8                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f6e8     00 04 00 FF 
0f6ec     01 AC 56 F2 | 	cmps	local04, ##524289 wc
0f6f0     2C 00 90 CD |  if_b	jmp	#LR__1314
0f6f4     E7 92 02 F6 | 	mov	arg01, fp
0f6f8     10 92 06 F1 | 	add	arg01, #16
0f6fc     56 95 02 F6 | 	mov	arg02, local04
0f700     0C 96 C6 F9 | 	decod	arg03, #12
0f704     0B 00 00 FF 
0f708     CC 64 06 F1 | 	add	objptr, ##5836
0f70c     78 43 B1 FD | 	call	#_psram_spin2_read1
0f710     0B 00 00 FF 
0f714     CC 64 86 F1 | 	sub	objptr, ##5836
0f718     E7 AC 02 F6 | 	mov	local04, fp
0f71c     10 AC 06 F1 | 	add	local04, #16
0f720                 | LR__1314
0f720                 | ' 
0f720                 | '  asm
0f720     28 AA 62 FD | 	setq	local03
0f724     56 AF F2 FC | 	coginit	local05, local04 wc
0f728                 | '  
0f728                 | ' return cog 
0f728     08 00 00 FF 
0f72c     10 CE 05 F1 | 	add	fp, ##4112
0f730     E7 AE 62 FC | 	wrlong	local05, fp
0f734     08 CE 05 F1 | 	add	fp, #8
0f738     E7 38 68 FC | 	wrlong	#28, fp
0f73c     08 CE 85 F1 | 	sub	fp, #8
0f740     E7 92 02 F6 | 	mov	arg01, fp
0f744     08 00 00 FF 
0f748     10 CE 85 F1 | 	sub	fp, ##4112
0f74c     B0 DF BF FD | 	call	#_push
0f750                 | LR__1315
0f750     E7 F0 03 F6 | 	mov	ptra, fp
0f754     F2 00 A0 FD | 	call	#popregs_
0f758                 | _do_coginit_ret
0f758     2D 00 64 FD | 	ret
0f75c                 | 
0f75c                 | ' 
0f75c                 | ' '-------------------- cogstop
0f75c                 | ' 
0f75c                 | ' sub do_cogstop
0f75c                 | _do_cogstop
0f75c     00 CA 05 F6 | 	mov	COUNT_, #0
0f760     E8 00 A0 FD | 	call	#pushregs_
0f764     0C F0 07 F1 | 	add	ptra, #12
0f768     04 DF BF FD | 	call	#_pop
0f76c     E7 7A 62 FC | 	wrlong	result1, fp
0f770     04 CE 05 F1 | 	add	fp, #4
0f774     E7 7C 62 FC | 	wrlong	result2, fp
0f778     04 CE 05 F1 | 	add	fp, #4
0f77c     E7 7E 62 FC | 	wrlong	result3, fp
0f780     08 CE 85 F1 | 	sub	fp, #8
0f784     E7 92 02 F6 | 	mov	arg01, fp
0f788     C0 E0 BF FD | 	call	#_converttoint
0f78c     03 7A 62 FD | 	cogstop	result1
0f790     E7 F0 03 F6 | 	mov	ptra, fp
0f794     F2 00 A0 FD | 	call	#popregs_
0f798                 | _do_cogstop_ret
0f798     2D 00 64 FD | 	ret
0f79c                 | 
0f79c                 | ' 
0f79c                 | ' '-------------------- color
0f79c                 | ' 
0f79c                 | ' sub do_color
0f79c                 | _do_color
0f79c     03 CA 05 F6 | 	mov	COUNT_, #3
0f7a0     E8 00 A0 FD | 	call	#pushregs_
0f7a4     C8 DE BF FD | 	call	#_pop
0f7a8     3D A7 02 F6 | 	mov	local01, result1
0f7ac     3E A9 02 F6 | 	mov	local02, result2
0f7b0     3F AB 02 F6 | 	mov	local03, result3
0f7b4     38 00 00 FF 
0f7b8     CC 65 06 F1 | 	add	objptr, ##29132
0f7bc     32 A7 62 FC | 	wrlong	local01, objptr
0f7c0     38 00 00 FF 
0f7c4     CC 65 86 F1 | 	sub	objptr, ##29132
0f7c8     E7 F0 03 F6 | 	mov	ptra, fp
0f7cc     F2 00 A0 FD | 	call	#popregs_
0f7d0                 | _do_color_ret
0f7d0     2D 00 64 FD | 	ret
0f7d4                 | 
0f7d4                 | ' 
0f7d4                 | ' '-------------------- copy
0f7d4                 | ' 
0f7d4                 | ' sub do_copy
0f7d4                 | _do_copy
0f7d4     08 CA 05 F6 | 	mov	COUNT_, #8
0f7d8     E8 00 A0 FD | 	call	#pushregs_
0f7dc     90 DE BF FD | 	call	#_pop
0f7e0     3D A7 02 F6 | 	mov	local01, result1
0f7e4     3E 9B 02 F6 | 	mov	arg05, result2
0f7e8     3F 99 02 F6 | 	mov	arg04, result3
0f7ec     4D A9 02 F6 | 	mov	local02, arg05
0f7f0     4C AB 02 F6 | 	mov	local03, arg04
0f7f4     78 DE BF FD | 	call	#_pop
0f7f8     3E 9B 02 F6 | 	mov	arg05, result2
0f7fc     3F 99 02 F6 | 	mov	arg04, result3
0f800     3D AD 02 F6 | 	mov	local04, result1
0f804     4D AF 02 F6 | 	mov	local05, arg05
0f808     4C B1 02 F6 | 	mov	local06, arg04
0f80c                 | ' 
0f80c                 | ' t1=pop()
0f80c                 | ' t2=pop()
0f80c                 | ' if t2.result_type=result_string2 then 
0f80c     2B B0 0E F2 | 	cmp	local06, #43 wz
0f810     10 00 90 5D |  if_ne	jmp	#LR__1320
0f814     56 93 02 F6 | 	mov	arg01, local04
0f818     C4 DF BF FD | 	call	#_convertstring
0f81c     3D B3 02 F6 | 	mov	local07, result1
0f820     2C 00 90 FD | 	jmp	#LR__1322
0f824                 | LR__1320
0f824     1F B0 0E F2 | 	cmp	local06, #31 wz
0f828     56 B3 02 A6 |  if_e	mov	local07, local04
0f82c     20 00 90 AD |  if_e	jmp	#LR__1321
0f830     52 00 00 FF 
0f834     94 64 06 F1 | 	add	objptr, ##42132
0f838     32 95 02 FB | 	rdlong	arg02, objptr
0f83c     52 00 00 FF 
0f840     94 64 86 F1 | 	sub	objptr, ##42132
0f844     0F 92 06 F6 | 	mov	arg01, #15
0f848     88 14 B1 FD | 	call	#_printerror
0f84c                 | '   printerror(15,runheader(0)) : return
0f84c     50 03 90 FD | 	jmp	#LR__1329
0f850                 | LR__1321
0f850                 | LR__1322
0f850                 | ' if t1.result_type=result_string2 then 
0f850     2B AA 0E F2 | 	cmp	local03, #43 wz
0f854     10 00 90 5D |  if_ne	jmp	#LR__1323
0f858     53 93 02 F6 | 	mov	arg01, local01
0f85c     80 DF BF FD | 	call	#_convertstring
0f860     3D B5 02 F6 | 	mov	local08, result1
0f864     2C 00 90 FD | 	jmp	#LR__1325
0f868                 | LR__1323
0f868     1F AA 0E F2 | 	cmp	local03, #31 wz
0f86c     53 B5 02 A6 |  if_e	mov	local08, local01
0f870     20 00 90 AD |  if_e	jmp	#LR__1324
0f874     52 00 00 FF 
0f878     94 64 06 F1 | 	add	objptr, ##42132
0f87c     32 95 02 FB | 	rdlong	arg02, objptr
0f880     52 00 00 FF 
0f884     94 64 86 F1 | 	sub	objptr, ##42132
0f888     0F 92 06 F6 | 	mov	arg01, #15
0f88c     44 14 B1 FD | 	call	#_printerror
0f890                 | '   printerror(15,runheader(0)) : return
0f890     0C 03 90 FD | 	jmp	#LR__1329
0f894                 | LR__1324
0f894                 | LR__1325
0f894                 | ' 
0f894                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f894     09 92 06 F6 | 	mov	arg01, #9
0f898     59 95 02 F6 | 	mov	arg02, local07
0f89c     00 96 06 F6 | 	mov	arg03, #0
0f8a0     08 5D B1 FD | 	call	#__system___basic_open_string
0f8a4     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f8a8     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f8ac     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f8b0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f8b4     54 00 00 FF 
0f8b8     B4 64 06 F1 | 	add	objptr, ##43188
0f8bc     32 7B 62 FC | 	wrlong	result1, objptr
0f8c0     54 00 00 FF 
0f8c4     B4 64 86 F1 | 	sub	objptr, ##43188
0f8c8     0C 01 90 AD |  if_e	jmp	#LR__1326
0f8cc     00 92 06 F6 | 	mov	arg01, #0
0f8d0     AC A6 B1 FD | 	call	#__system___getiolock_0622
0f8d4     3D 93 02 F6 | 	mov	arg01, result1
0f8d8     20 51 B1 FD | 	call	#__system___lockmem
0f8dc     96 01 00 FF 
0f8e0     BD 95 06 F6 | 	mov	arg02, ##@LR__5974
0f8e4     00 92 06 F6 | 	mov	arg01, #0
0f8e8     00 96 06 F6 | 	mov	arg03, #0
0f8ec     00 5E B1 FD | 	call	#__system___basic_print_string
0f8f0     54 00 00 FF 
0f8f4     B4 64 06 F1 | 	add	objptr, ##43188
0f8f8     32 95 02 FB | 	rdlong	arg02, objptr
0f8fc     54 00 00 FF 
0f900     B4 64 86 F1 | 	sub	objptr, ##43188
0f904     00 92 06 F6 | 	mov	arg01, #0
0f908     00 96 06 F6 | 	mov	arg03, #0
0f90c     0A 98 06 F6 | 	mov	arg04, #10
0f910     20 5E B1 FD | 	call	#__system___basic_print_integer
0f914     96 01 00 FF 
0f918     CD 95 06 F6 | 	mov	arg02, ##@LR__5975
0f91c     00 92 06 F6 | 	mov	arg01, #0
0f920     00 96 06 F6 | 	mov	arg03, #0
0f924     C8 5D B1 FD | 	call	#__system___basic_print_string
0f928     52 00 00 FF 
0f92c     94 64 06 F1 | 	add	objptr, ##42132
0f930     32 95 02 FB | 	rdlong	arg02, objptr
0f934     52 00 00 FF 
0f938     94 64 86 F1 | 	sub	objptr, ##42132
0f93c     00 92 06 F6 | 	mov	arg01, #0
0f940     00 96 06 F6 | 	mov	arg03, #0
0f944     0A 98 06 F6 | 	mov	arg04, #10
0f948     28 5E B1 FD | 	call	#__system___basic_print_unsigned
0f94c     96 01 00 FF 
0f950     D7 95 06 F6 | 	mov	arg02, ##@LR__5976
0f954     00 92 06 F6 | 	mov	arg01, #0
0f958     00 96 06 F6 | 	mov	arg03, #0
0f95c     90 5D B1 FD | 	call	#__system___basic_print_string
0f960     00 B4 06 F6 | 	mov	local08, #0
0f964     54 00 00 FF 
0f968     B4 64 06 F1 | 	add	objptr, ##43188
0f96c     32 93 02 FB | 	rdlong	arg01, objptr
0f970     54 00 00 FF 
0f974     B4 64 86 F1 | 	sub	objptr, ##43188
0f978     30 72 B1 FD | 	call	#__system___strerror
0f97c     3D 95 02 F6 | 	mov	arg02, result1
0f980     5A 93 02 F6 | 	mov	arg01, local08
0f984     00 96 06 F6 | 	mov	arg03, #0
0f988     64 5D B1 FD | 	call	#__system___basic_print_string
0f98c     96 01 00 FF 
0f990     DA 95 06 F6 | 	mov	arg02, ##@LR__5977
0f994     00 92 06 F6 | 	mov	arg01, #0
0f998     00 96 06 F6 | 	mov	arg03, #0
0f99c     50 5D B1 FD | 	call	#__system___basic_print_string
0f9a0     00 92 06 F6 | 	mov	arg01, #0
0f9a4     59 95 02 F6 | 	mov	arg02, local07
0f9a8     00 96 06 F6 | 	mov	arg03, #0
0f9ac     40 5D B1 FD | 	call	#__system___basic_print_string
0f9b0     00 92 06 F6 | 	mov	arg01, #0
0f9b4     0A 94 06 F6 | 	mov	arg02, #10
0f9b8     00 96 06 F6 | 	mov	arg03, #0
0f9bc     D8 5C B1 FD | 	call	#__system___basic_print_char
0f9c0     00 92 06 F6 | 	mov	arg01, #0
0f9c4     B8 A5 B1 FD | 	call	#__system___getiolock_0622
0f9c8     3D 01 68 FC | 	wrlong	#0, result1
0f9cc     09 92 06 F6 | 	mov	arg01, #9
0f9d0     04 9C B1 FD | 	call	#__system__close
0f9d4     C8 01 90 FD | 	jmp	#LR__1329
0f9d8                 | LR__1326
0f9d8                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0f9d8     08 92 06 F6 | 	mov	arg01, #8
0f9dc     5A 95 02 F6 | 	mov	arg02, local08
0f9e0     0D 96 06 F6 | 	mov	arg03, #13
0f9e4     C4 5B B1 FD | 	call	#__system___basic_open_string
0f9e8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f9ec     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f9f0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f9f4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f9f8     54 00 00 FF 
0f9fc     B4 64 06 F1 | 	add	objptr, ##43188
0fa00     32 7B 62 FC | 	wrlong	result1, objptr
0fa04     54 00 00 FF 
0fa08     B4 64 86 F1 | 	sub	objptr, ##43188
0fa0c     0C 01 90 AD |  if_e	jmp	#LR__1327
0fa10     00 92 06 F6 | 	mov	arg01, #0
0fa14     68 A5 B1 FD | 	call	#__system___getiolock_0622
0fa18     3D 93 02 F6 | 	mov	arg01, result1
0fa1c     DC 4F B1 FD | 	call	#__system___lockmem
0fa20     96 01 00 FF 
0fa24     E8 95 06 F6 | 	mov	arg02, ##@LR__5978
0fa28     00 92 06 F6 | 	mov	arg01, #0
0fa2c     00 96 06 F6 | 	mov	arg03, #0
0fa30     BC 5C B1 FD | 	call	#__system___basic_print_string
0fa34     54 00 00 FF 
0fa38     B4 64 06 F1 | 	add	objptr, ##43188
0fa3c     32 95 02 FB | 	rdlong	arg02, objptr
0fa40     54 00 00 FF 
0fa44     B4 64 86 F1 | 	sub	objptr, ##43188
0fa48     00 92 06 F6 | 	mov	arg01, #0
0fa4c     00 96 06 F6 | 	mov	arg03, #0
0fa50     0A 98 06 F6 | 	mov	arg04, #10
0fa54     DC 5C B1 FD | 	call	#__system___basic_print_integer
0fa58     96 01 00 FF 
0fa5c     F8 95 06 F6 | 	mov	arg02, ##@LR__5979
0fa60     00 92 06 F6 | 	mov	arg01, #0
0fa64     00 96 06 F6 | 	mov	arg03, #0
0fa68     84 5C B1 FD | 	call	#__system___basic_print_string
0fa6c     52 00 00 FF 
0fa70     94 64 06 F1 | 	add	objptr, ##42132
0fa74     32 95 02 FB | 	rdlong	arg02, objptr
0fa78     52 00 00 FF 
0fa7c     94 64 86 F1 | 	sub	objptr, ##42132
0fa80     00 92 06 F6 | 	mov	arg01, #0
0fa84     00 96 06 F6 | 	mov	arg03, #0
0fa88     0A 98 06 F6 | 	mov	arg04, #10
0fa8c     E4 5C B1 FD | 	call	#__system___basic_print_unsigned
0fa90     97 01 00 FF 
0fa94     02 94 06 F6 | 	mov	arg02, ##@LR__5980
0fa98     00 92 06 F6 | 	mov	arg01, #0
0fa9c     00 96 06 F6 | 	mov	arg03, #0
0faa0     4C 5C B1 FD | 	call	#__system___basic_print_string
0faa4     00 B2 06 F6 | 	mov	local07, #0
0faa8     54 00 00 FF 
0faac     B4 64 06 F1 | 	add	objptr, ##43188
0fab0     32 93 02 FB | 	rdlong	arg01, objptr
0fab4     54 00 00 FF 
0fab8     B4 64 86 F1 | 	sub	objptr, ##43188
0fabc     EC 70 B1 FD | 	call	#__system___strerror
0fac0     3D 95 02 F6 | 	mov	arg02, result1
0fac4     59 93 02 F6 | 	mov	arg01, local07
0fac8     00 96 06 F6 | 	mov	arg03, #0
0facc     20 5C B1 FD | 	call	#__system___basic_print_string
0fad0     97 01 00 FF 
0fad4     05 94 06 F6 | 	mov	arg02, ##@LR__5981
0fad8     00 92 06 F6 | 	mov	arg01, #0
0fadc     00 96 06 F6 | 	mov	arg03, #0
0fae0     0C 5C B1 FD | 	call	#__system___basic_print_string
0fae4     00 92 06 F6 | 	mov	arg01, #0
0fae8     5A 95 02 F6 | 	mov	arg02, local08
0faec     00 96 06 F6 | 	mov	arg03, #0
0faf0     FC 5B B1 FD | 	call	#__system___basic_print_string
0faf4     00 92 06 F6 | 	mov	arg01, #0
0faf8     0A 94 06 F6 | 	mov	arg02, #10
0fafc     00 96 06 F6 | 	mov	arg03, #0
0fb00     94 5B B1 FD | 	call	#__system___basic_print_char
0fb04     00 92 06 F6 | 	mov	arg01, #0
0fb08     74 A4 B1 FD | 	call	#__system___getiolock_0622
0fb0c     3D 01 68 FC | 	wrlong	#0, result1
0fb10     08 92 06 F6 | 	mov	arg01, #8
0fb14     C0 9A B1 FD | 	call	#__system__close
0fb18     84 00 90 FD | 	jmp	#LR__1329
0fb1c                 | LR__1327
0fb1c                 | ' 
0fb1c                 | ' do
0fb1c                 | LR__1328
0fb1c                 | '   get #9,,block(0),1024,r
0fb1c     32 97 02 F6 | 	mov	arg03, objptr
0fb20     50 00 00 FF 
0fb24     58 96 06 F1 | 	add	arg03, ##41048
0fb28     09 92 06 F6 | 	mov	arg01, #9
0fb2c     00 94 06 F6 | 	mov	arg02, #0
0fb30     0A 98 C6 F9 | 	decod	arg04, #10
0fb34     01 9A 06 F6 | 	mov	arg05, #1
0fb38     3C 5D B1 FD | 	call	#__system___basic_get
0fb3c     54 00 00 FF 
0fb40     EC 64 06 F1 | 	add	objptr, ##43244
0fb44     32 7B 62 FC | 	wrlong	result1, objptr
0fb48                 | '   put #8,,block(0),r
0fb48     04 00 00 FF 
0fb4c     94 64 86 F1 | 	sub	objptr, ##2196
0fb50     32 97 02 F6 | 	mov	arg03, objptr
0fb54     3D 99 02 F6 | 	mov	arg04, result1
0fb58     50 00 00 FF 
0fb5c     58 64 86 F1 | 	sub	objptr, ##41048
0fb60     08 92 06 F6 | 	mov	arg01, #8
0fb64     00 94 06 F6 | 	mov	arg02, #0
0fb68     01 9A 06 F6 | 	mov	arg05, #1
0fb6c     90 5C B1 FD | 	call	#__system___basic_put
0fb70     54 00 00 FF 
0fb74     EC 64 06 F1 | 	add	objptr, ##43244
0fb78     32 B5 02 FB | 	rdlong	local08, objptr
0fb7c     54 00 00 FF 
0fb80     EC 64 86 F1 | 	sub	objptr, ##43244
0fb84     02 00 00 FF 
0fb88     00 B4 0E F2 | 	cmp	local08, ##1024 wz
0fb8c     8C FF 9F AD |  if_e	jmp	#LR__1328
0fb90                 | ' close #8
0fb90     08 92 06 F6 | 	mov	arg01, #8
0fb94     40 9A B1 FD | 	call	#__system__close
0fb98                 | ' close #9
0fb98     09 92 06 F6 | 	mov	arg01, #9
0fb9c     38 9A B1 FD | 	call	#__system__close
0fba0                 | LR__1329
0fba0     E7 F0 03 F6 | 	mov	ptra, fp
0fba4     F2 00 A0 FD | 	call	#popregs_
0fba8                 | _do_copy_ret
0fba8     2D 00 64 FD | 	ret
0fbac                 | 
0fbac                 | ' 
0fbac                 | ' '-------------------- cos
0fbac                 | ' 
0fbac                 | ' sub do_cos
0fbac                 | _do_cos
0fbac     01 CA 05 F6 | 	mov	COUNT_, #1
0fbb0     E8 00 A0 FD | 	call	#pushregs_
0fbb4     10 F0 07 F1 | 	add	ptra, #16
0fbb8     4C 00 00 FF 
0fbbc     24 64 06 F1 | 	add	objptr, ##38948
0fbc0     32 97 02 FB | 	rdlong	arg03, objptr
0fbc4     4B 95 02 F6 | 	mov	arg02, arg03
0fbc8     01 94 66 F0 | 	shl	arg02, #1
0fbcc     4B 95 02 F1 | 	add	arg02, arg03
0fbd0     02 94 66 F0 | 	shl	arg02, #2
0fbd4     03 00 00 FF 
0fbd8     04 64 86 F1 | 	sub	objptr, ##1540
0fbdc     32 95 02 F1 | 	add	arg02, objptr
0fbe0     4A 97 02 FB | 	rdlong	arg03, arg02
0fbe4                 | ' 
0fbe4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fbe4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fbe4     02 96 16 F2 | 	cmp	arg03, #2 wc
0fbe8     49 00 00 FF 
0fbec     20 64 86 F1 | 	sub	objptr, ##37408
0fbf0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0fbf4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1330
0fbf8     00 92 06 F6 | 	mov	arg01, #0
0fbfc     80 A3 B1 FD | 	call	#__system___getiolock_0622
0fc00     3D 93 02 F6 | 	mov	arg01, result1
0fc04     F4 4D B1 FD | 	call	#__system___lockmem
0fc08     97 01 00 FF 
0fc0c     13 94 06 F6 | 	mov	arg02, ##@LR__5982
0fc10     00 92 06 F6 | 	mov	arg01, #0
0fc14     00 96 06 F6 | 	mov	arg03, #0
0fc18     D4 5A B1 FD | 	call	#__system___basic_print_string
0fc1c     00 92 06 F6 | 	mov	arg01, #0
0fc20     5C A3 B1 FD | 	call	#__system___getiolock_0622
0fc24     3D 01 68 FC | 	wrlong	#0, result1
0fc28     27 92 06 F6 | 	mov	arg01, #39
0fc2c     00 94 06 F6 | 	mov	arg02, #0
0fc30     A0 10 B1 FD | 	call	#_printerror
0fc34     78 00 90 FD | 	jmp	#LR__1331
0fc38                 | LR__1330
0fc38     34 DA BF FD | 	call	#_pop
0fc3c     E7 7A 62 FC | 	wrlong	result1, fp
0fc40     04 CE 05 F1 | 	add	fp, #4
0fc44     E7 7C 62 FC | 	wrlong	result2, fp
0fc48     04 CE 05 F1 | 	add	fp, #4
0fc4c     E7 7E 62 FC | 	wrlong	result3, fp
0fc50     08 CE 85 F1 | 	sub	fp, #8
0fc54     54 00 00 FF 
0fc58     84 64 06 F1 | 	add	objptr, ##43140
0fc5c     32 A7 02 FB | 	rdlong	local01, objptr
0fc60     54 00 00 FF 
0fc64     84 64 86 F1 | 	sub	objptr, ##43140
0fc68     E7 92 02 F6 | 	mov	arg01, fp
0fc6c     98 DC BF FD | 	call	#_converttofloat
0fc70     3D 95 02 F6 | 	mov	arg02, result1
0fc74     53 93 02 F6 | 	mov	arg01, local01
0fc78     50 74 B1 FD | 	call	#__system___float_mul
0fc7c     3D 95 02 F6 | 	mov	arg02, result1
0fc80     87 E4 1F FF 
0fc84     DB 93 06 F6 | 	mov	arg01, ##1070141403
0fc88     1F 94 E6 F4 | 	bitnot	arg02, #31
0fc8c     6C 70 B1 FD | 	call	#__system___float_add
0fc90     3D 93 02 F6 | 	mov	arg01, result1
0fc94     A4 7D B1 FD | 	call	#__system____builtin_sinf
0fc98     E7 7A 62 FC | 	wrlong	result1, fp
0fc9c     08 CE 05 F1 | 	add	fp, #8
0fca0     E7 3C 68 FC | 	wrlong	#30, fp
0fca4     08 CE 85 F1 | 	sub	fp, #8
0fca8     E7 92 02 F6 | 	mov	arg01, fp
0fcac     50 DA BF FD | 	call	#_push
0fcb0                 | LR__1331
0fcb0     E7 F0 03 F6 | 	mov	ptra, fp
0fcb4     F2 00 A0 FD | 	call	#popregs_
0fcb8                 | _do_cos_ret
0fcb8     2D 00 64 FD | 	ret
0fcbc                 | 
0fcbc                 | ' 
0fcbc                 | ' '-------------------- cursor
0fcbc                 | ' 
0fcbc                 | ' sub do_cursor
0fcbc                 | _do_cursor
0fcbc     B0 D9 BF FD | 	call	#_pop
0fcc0     00 7A 4E F2 | 	cmps	result1, #0 wz
0fcc4                 | ' t1=pop()
0fcc4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fcc4     14 00 90 5D |  if_ne	jmp	#LR__1340
0fcc8     11 92 06 F6 | 	mov	arg01, #17
0fccc     00 94 06 F6 | 	mov	arg02, #0
0fcd0     00 96 06 F6 | 	mov	arg03, #0
0fcd4     68 20 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fcd8     10 00 90 FD | 	jmp	#LR__1341
0fcdc                 | LR__1340
0fcdc     11 92 06 F6 | 	mov	arg01, #17
0fce0     08 94 06 F6 | 	mov	arg02, #8
0fce4     10 96 06 F6 | 	mov	arg03, #16
0fce8     54 20 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fcec                 | LR__1341
0fcec                 | _do_cursor_ret
0fcec     2D 00 64 FD | 	ret
0fcf0                 | 
0fcf0                 | ' 
0fcf0                 | ' '-------------------- defchar
0fcf0                 | ' 
0fcf0                 | ' sub do_defchar
0fcf0                 | _do_defchar
0fcf0     04 CA 05 F6 | 	mov	COUNT_, #4
0fcf4     E8 00 A0 FD | 	call	#pushregs_
0fcf8     28 F0 07 F1 | 	add	ptra, #40
0fcfc     70 D9 BF FD | 	call	#_pop
0fd00     3F 95 02 F6 | 	mov	arg02, result3
0fd04     E7 7A 62 FC | 	wrlong	result1, fp
0fd08     04 CE 05 F1 | 	add	fp, #4
0fd0c     E7 7C 62 FC | 	wrlong	result2, fp
0fd10     04 CE 05 F1 | 	add	fp, #4
0fd14     E7 94 62 FC | 	wrlong	arg02, fp
0fd18     08 CE 85 F1 | 	sub	fp, #8
0fd1c     E7 92 02 F6 | 	mov	arg01, fp
0fd20     28 DB BF FD | 	call	#_converttoint
0fd24     3D A7 02 F6 | 	mov	local01, result1
0fd28     44 D9 BF FD | 	call	#_pop
0fd2c     3F 95 02 F6 | 	mov	arg02, result3
0fd30     E7 7A 62 FC | 	wrlong	result1, fp
0fd34     04 CE 05 F1 | 	add	fp, #4
0fd38     E7 7C 62 FC | 	wrlong	result2, fp
0fd3c     04 CE 05 F1 | 	add	fp, #4
0fd40     E7 94 62 FC | 	wrlong	arg02, fp
0fd44     08 CE 85 F1 | 	sub	fp, #8
0fd48     E7 92 02 F6 | 	mov	arg01, fp
0fd4c     FC DA BF FD | 	call	#_converttoint
0fd50     3D A9 02 F6 | 	mov	local02, result1
0fd54                 | ' 
0fd54                 | ' t1=pop() : cptr=converttoint(t1)
0fd54                 | ' t1=pop() : c=converttoint(t1)
0fd54                 | ' if cptr<$80000 then 
0fd54     00 04 00 FF 
0fd58     00 A6 16 F2 | 	cmp	local01, ##524288 wc
0fd5c     10 00 90 3D |  if_ae	jmp	#LR__1350
0fd60     54 93 02 F6 | 	mov	arg01, local02
0fd64     53 95 02 F6 | 	mov	arg02, local01
0fd68     DC 2B B1 FD | 	call	#_hg010b_spin2_defchar
0fd6c     40 00 90 FD | 	jmp	#LR__1352
0fd70                 | LR__1350
0fd70                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fd70     00 AA 06 F6 | 	mov	local03, #0
0fd74                 | LR__1351
0fd74     55 AD 02 F6 | 	mov	local04, local03
0fd78     E7 94 02 F6 | 	mov	arg02, fp
0fd7c     14 94 06 F1 | 	add	arg02, #20
0fd80     4A AD 02 F1 | 	add	local04, arg02
0fd84     53 93 02 F6 | 	mov	arg01, local01
0fd88     55 93 02 F1 | 	add	arg01, local03
0fd8c     B8 11 B1 FD | 	call	#_pspeek
0fd90     56 7B 42 FC | 	wrbyte	result1, local04
0fd94     01 AA 06 F1 | 	add	local03, #1
0fd98     10 AA 56 F2 | 	cmps	local03, #16 wc
0fd9c     D4 FF 9F CD |  if_b	jmp	#LR__1351
0fda0     E7 94 02 F6 | 	mov	arg02, fp
0fda4     14 94 06 F1 | 	add	arg02, #20
0fda8     54 93 02 F6 | 	mov	arg01, local02
0fdac     98 2B B1 FD | 	call	#_hg010b_spin2_defchar
0fdb0                 | LR__1352
0fdb0     E7 F0 03 F6 | 	mov	ptra, fp
0fdb4     F2 00 A0 FD | 	call	#popregs_
0fdb8                 | _do_defchar_ret
0fdb8     2D 00 64 FD | 	ret
0fdbc                 | 
0fdbc                 | ' 
0fdbc                 | ' '-------------------- defenv
0fdbc                 | ' 
0fdbc                 | ' sub do_defenv
0fdbc                 | _do_defenv
0fdbc     14 CA 05 F6 | 	mov	COUNT_, #20
0fdc0     E8 00 A0 FD | 	call	#pushregs_
0fdc4     58 F0 07 F1 | 	add	ptra, #88
0fdc8     4C 00 00 FF 
0fdcc     24 64 06 F1 | 	add	objptr, ##38948
0fdd0     32 9B 02 FB | 	rdlong	arg05, objptr
0fdd4     4D 99 02 F6 | 	mov	arg04, arg05
0fdd8     01 98 66 F0 | 	shl	arg04, #1
0fddc     4D 99 02 F1 | 	add	arg04, arg05
0fde0     02 98 66 F0 | 	shl	arg04, #2
0fde4     03 00 00 FF 
0fde8     04 64 86 F1 | 	sub	objptr, ##1540
0fdec     32 99 02 F1 | 	add	arg04, objptr
0fdf0     4C A7 02 FB | 	rdlong	local01, arg04
0fdf4                 | ' 
0fdf4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fdf4                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fdf4     02 A6 0E F2 | 	cmp	local01, #2 wz
0fdf8     49 00 00 FF 
0fdfc     20 64 86 F1 | 	sub	objptr, ##37408
0fe00     05 A6 0E 52 |  if_ne	cmp	local01, #5 wz
0fe04     50 07 90 5D |  if_ne	jmp	#LR__1380
0fe08                 | ' 
0fe08                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe08     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe0c     1C 03 90 5D |  if_ne	jmp	#LR__1372
0fe10     5C D8 BF FD | 	call	#_pop
0fe14     3F 9B 02 F6 | 	mov	arg05, result3
0fe18     40 CE 05 F1 | 	add	fp, #64
0fe1c     E7 7A 62 FC | 	wrlong	result1, fp
0fe20     04 CE 05 F1 | 	add	fp, #4
0fe24     E7 7C 62 FC | 	wrlong	result2, fp
0fe28     04 CE 05 F1 | 	add	fp, #4
0fe2c     E7 9A 62 FC | 	wrlong	arg05, fp
0fe30                 | '   t1=pop()
0fe30                 | '   if t1.result_type=result_string2 then 
0fe30     48 CE 85 F1 | 	sub	fp, #72
0fe34     2B 9A 0E F2 | 	cmp	arg05, #43 wz
0fe38     18 00 90 5D |  if_ne	jmp	#LR__1360
0fe3c     40 CE 05 F1 | 	add	fp, #64
0fe40     E7 92 02 FB | 	rdlong	arg01, fp
0fe44     40 CE 85 F1 | 	sub	fp, #64
0fe48     94 D9 BF FD | 	call	#_convertstring
0fe4c     3D A9 02 F6 | 	mov	local02, result1
0fe50     38 00 90 FD | 	jmp	#LR__1362
0fe54                 | LR__1360
0fe54     48 CE 05 F1 | 	add	fp, #72
0fe58     E7 9A 02 FB | 	rdlong	arg05, fp
0fe5c     48 CE 85 F1 | 	sub	fp, #72
0fe60     1F 9A 0E F2 | 	cmp	arg05, #31 wz
0fe64     40 CE 05 A1 |  if_e	add	fp, #64
0fe68     E7 A8 02 AB |  if_e	rdlong	local02, fp
0fe6c     40 CE 85 A1 |  if_e	sub	fp, #64
0fe70     18 00 90 AD |  if_e	jmp	#LR__1361
0fe74     97 01 00 FF 
0fe78     19 A8 06 F6 | 	mov	local02, ##@LR__5983
0fe7c     E7 92 02 F6 | 	mov	arg01, fp
0fe80     40 92 06 F1 | 	add	arg01, #64
0fe84     C4 D9 BF FD | 	call	#_converttoint
0fe88     3D AB 02 F6 | 	mov	local03, result1
0fe8c                 | LR__1361
0fe8c                 | LR__1362
0fe8c                 | '   if s1<>"" then 
0fe8c     97 01 00 FF 
0fe90     1A 94 06 F6 | 	mov	arg02, ##@LR__5984
0fe94     54 93 02 F6 | 	mov	arg01, local02
0fe98     88 4B B1 FD | 	call	#__system___string_cmp
0fe9c     00 7A 0E F2 | 	cmp	result1, #0 wz
0fea0     BC 01 90 AD |  if_e	jmp	#LR__1366
0fea4     C8 D7 BF FD | 	call	#_pop
0fea8     3F 9B 02 F6 | 	mov	arg05, result3
0feac     40 CE 05 F1 | 	add	fp, #64
0feb0     E7 7A 62 FC | 	wrlong	result1, fp
0feb4     04 CE 05 F1 | 	add	fp, #4
0feb8     E7 7C 62 FC | 	wrlong	result2, fp
0febc     04 CE 05 F1 | 	add	fp, #4
0fec0     E7 9A 62 FC | 	wrlong	arg05, fp
0fec4     08 CE 85 F1 | 	sub	fp, #8
0fec8     E7 92 02 F6 | 	mov	arg01, fp
0fecc     40 CE 85 F1 | 	sub	fp, #64
0fed0     78 D9 BF FD | 	call	#_converttoint
0fed4     3D AD 02 F6 | 	mov	local04, result1
0fed8                 | '     t1=pop()
0fed8                 | '     channel=converttoint(t1) 
0fed8                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0fed8     09 92 06 F6 | 	mov	arg01, #9
0fedc     F8 96 B1 FD | 	call	#__system__close
0fee0     09 AE 06 F6 | 	mov	local05, #9
0fee4     97 01 00 FF 
0fee8     1B 92 06 F6 | 	mov	arg01, ##@LR__5985
0feec     54 95 02 F6 | 	mov	arg02, local02
0fef0     64 4B B1 FD | 	call	#__system___string_concat
0fef4     3D 95 02 F6 | 	mov	arg02, result1
0fef8     57 93 02 F6 | 	mov	arg01, local05
0fefc     00 96 06 F6 | 	mov	arg03, #0
0ff00     A8 56 B1 FD | 	call	#__system___basic_open_string
0ff04     20 68 06 F1 | 	add	ptr___system__dat__, #32
0ff08     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ff0c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ff10     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ff14     3D B1 0A F6 | 	mov	local06, result1 wz
0ff18                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff18     8C 00 90 AD |  if_e	jmp	#LR__1363
0ff1c     00 92 06 F6 | 	mov	arg01, #0
0ff20     5C A0 B1 FD | 	call	#__system___getiolock_0622
0ff24     3D 93 02 F6 | 	mov	arg01, result1
0ff28     D0 4A B1 FD | 	call	#__system___lockmem
0ff2c     97 01 00 FF 
0ff30     28 94 06 F6 | 	mov	arg02, ##@LR__5986
0ff34     00 92 06 F6 | 	mov	arg01, #0
0ff38     00 96 06 F6 | 	mov	arg03, #0
0ff3c     B0 57 B1 FD | 	call	#__system___basic_print_string
0ff40     00 92 06 F6 | 	mov	arg01, #0
0ff44     58 95 02 F6 | 	mov	arg02, local06
0ff48     00 96 06 F6 | 	mov	arg03, #0
0ff4c     0A 98 06 F6 | 	mov	arg04, #10
0ff50     E0 57 B1 FD | 	call	#__system___basic_print_integer
0ff54     97 01 00 FF 
0ff58     36 94 06 F6 | 	mov	arg02, ##@LR__5987
0ff5c     00 92 06 F6 | 	mov	arg01, #0
0ff60     00 96 06 F6 | 	mov	arg03, #0
0ff64     88 57 B1 FD | 	call	#__system___basic_print_string
0ff68     58 93 02 F6 | 	mov	arg01, local06
0ff6c     3C 6C B1 FD | 	call	#__system___strerror
0ff70     3D 95 02 F6 | 	mov	arg02, result1
0ff74     00 92 06 F6 | 	mov	arg01, #0
0ff78     00 96 06 F6 | 	mov	arg03, #0
0ff7c     70 57 B1 FD | 	call	#__system___basic_print_string
0ff80     00 92 06 F6 | 	mov	arg01, #0
0ff84     0A 94 06 F6 | 	mov	arg02, #10
0ff88     00 96 06 F6 | 	mov	arg03, #0
0ff8c     08 57 B1 FD | 	call	#__system___basic_print_char
0ff90     00 92 06 F6 | 	mov	arg01, #0
0ff94     E8 9F B1 FD | 	call	#__system___getiolock_0622
0ff98     3D 01 68 FC | 	wrlong	#0, result1
0ff9c     09 92 06 F6 | 	mov	arg01, #9
0ffa0     34 96 B1 FD | 	call	#__system__close
0ffa4     B0 05 90 FD | 	jmp	#LR__1380
0ffa8                 | LR__1363
0ffa8                 | '     get #9,17,envbuf8(channel,0),256
0ffa8     56 97 02 F6 | 	mov	arg03, local04
0ffac     09 96 66 F0 | 	shl	arg03, #9
0ffb0     56 97 02 F1 | 	add	arg03, local04
0ffb4     32 9B 02 F6 | 	mov	arg05, objptr
0ffb8     0E 00 00 FF 
0ffbc     38 9A 06 F1 | 	add	arg05, ##7224
0ffc0     4D 97 02 F1 | 	add	arg03, arg05
0ffc4     09 92 06 F6 | 	mov	arg01, #9
0ffc8     11 94 06 F6 | 	mov	arg02, #17
0ffcc     00 99 06 F6 | 	mov	arg04, #256
0ffd0     01 9A 06 F6 | 	mov	arg05, #1
0ffd4     A0 58 B1 FD | 	call	#__system___basic_get
0ffd8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0ffd8     FF B2 06 F6 | 	mov	local07, #255
0ffdc     0E 00 00 FF 
0ffe0     38 64 06 F1 | 	add	objptr, ##7224
0ffe4     D7 24 48 FB | 	callpa	#(@LR__1365-@LR__1364)>>2,fcache_load_ptr_
0ffe8                 | LR__1364
0ffe8     56 B1 02 F6 | 	mov	local06, local04
0ffec     09 B0 66 F0 | 	shl	local06, #9
0fff0     32 B1 02 F1 | 	add	local06, objptr
0fff4     59 AF 02 F6 | 	mov	local05, local07
0fff8     01 AE 66 F0 | 	shl	local05, #1
0fffc     58 AF 02 F1 | 	add	local05, local06
10000     56 AB 02 F6 | 	mov	local03, local04
10004     09 AA 66 F0 | 	shl	local03, #9
10008     56 AB 02 F1 | 	add	local03, local04
1000c     32 AB 02 F1 | 	add	local03, objptr
10010     59 B1 02 F6 | 	mov	local06, local07
10014     55 B1 02 F1 | 	add	local06, local03
10018     58 B1 C2 FA | 	rdbyte	local06, local06
1001c     08 B0 66 F0 | 	shl	local06, #8
10020     57 B1 52 FC | 	wrword	local06, local05
10024     01 B2 86 F1 | 	sub	local07, #1
10028     00 B2 56 F2 | 	cmps	local07, #0 wc
1002c     B8 FF 9F 3D |  if_ae	jmp	#LR__1364
10030                 | LR__1365
10030     0E 00 00 FF 
10034     38 64 86 F1 | 	sub	objptr, ##7224
10038                 | '     close #9
10038     09 92 06 F6 | 	mov	arg01, #9
1003c     98 95 B1 FD | 	call	#__system__close
10040     09 AC 66 F0 | 	shl	local04, #9
10044     32 B3 02 F6 | 	mov	local07, objptr
10048     0E 00 00 FF 
1004c     38 B2 06 F1 | 	add	local07, ##7224
10050     59 AD 02 F1 | 	add	local04, local07
10054     FE AD 06 F1 | 	add	local04, #510
10058     56 01 58 FC | 	wrword	#0, local04
1005c                 | '     envbuf(channel,255)=0                                                              
1005c                 | '     return
1005c     F8 04 90 FD | 	jmp	#LR__1380
10060                 | LR__1366
10060                 | '     if wptr < $80000 then 
10060     00 04 00 FF 
10064     00 AA 56 F2 | 	cmps	local03, ##524288 wc
10068     54 00 90 3D |  if_ae	jmp	#LR__1369
1006c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
1006c     00 B2 06 F6 | 	mov	local07, #0
10070     D7 24 48 FB | 	callpa	#(@LR__1368-@LR__1367)>>2,fcache_load_ptr_
10074                 | LR__1367
10074     56 B1 02 F6 | 	mov	local06, local04
10078     09 B0 66 F0 | 	shl	local06, #9
1007c     32 AF 02 F6 | 	mov	local05, objptr
10080     0E 00 00 FF 
10084     38 AE 06 F1 | 	add	local05, ##7224
10088     57 B1 02 F1 | 	add	local06, local05
1008c     59 AF 02 F6 | 	mov	local05, local07
10090     01 AE 66 F0 | 	shl	local05, #1
10094     58 AF 02 F1 | 	add	local05, local06
10098     55 93 02 F6 | 	mov	arg01, local03
1009c     59 B1 02 F6 | 	mov	local06, local07
100a0     01 B0 66 F0 | 	shl	local06, #1
100a4     58 93 02 F1 | 	add	arg01, local06
100a8     49 7B E2 FA | 	rdword	result1, arg01
100ac     57 7B 52 FC | 	wrword	result1, local05
100b0     01 B2 06 F1 | 	add	local07, #1
100b4     00 B3 56 F2 | 	cmps	local07, #256 wc
100b8     B8 FF 9F CD |  if_b	jmp	#LR__1367
100bc                 | LR__1368
100bc     4C 00 90 FD | 	jmp	#LR__1371
100c0                 | LR__1369
100c0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
100c0     00 B2 06 F6 | 	mov	local07, #0
100c4                 | LR__1370
100c4     56 B1 02 F6 | 	mov	local06, local04
100c8     09 B0 66 F0 | 	shl	local06, #9
100cc     32 AF 02 F6 | 	mov	local05, objptr
100d0     0E 00 00 FF 
100d4     38 AE 06 F1 | 	add	local05, ##7224
100d8     57 B1 02 F1 | 	add	local06, local05
100dc     59 AF 02 F6 | 	mov	local05, local07
100e0     01 AE 66 F0 | 	shl	local05, #1
100e4     58 AF 02 F1 | 	add	local05, local06
100e8     55 93 02 F6 | 	mov	arg01, local03
100ec     59 B1 02 F6 | 	mov	local06, local07
100f0     01 B0 66 F0 | 	shl	local06, #1
100f4     58 93 02 F1 | 	add	arg01, local06
100f8     DC 0E B1 FD | 	call	#_psdpeek
100fc     57 7B 52 FC | 	wrword	result1, local05
10100     01 B2 06 F1 | 	add	local07, #1
10104     00 B3 56 F2 | 	cmps	local07, #256 wc
10108     B8 FF 9F CD |  if_b	jmp	#LR__1370
1010c                 | LR__1371
1010c     09 AC 66 F0 | 	shl	local04, #9
10110     32 B3 02 F6 | 	mov	local07, objptr
10114     0E 00 00 FF 
10118     38 B2 06 F1 | 	add	local07, ##7224
1011c     59 AD 02 F1 | 	add	local04, local07
10120     FE AD 06 F1 | 	add	local04, #510
10124     56 01 58 FC | 	wrword	#0, local04
10128                 | '     envbuf(channel,255)=0
10128                 | '     return   
10128     2C 04 90 FD | 	jmp	#LR__1380
1012c                 | LR__1372
1012c                 | ' 
1012c                 | ' if numpar=5 then   						 'simple adsr
1012c     05 A6 0E F2 | 	cmp	local01, #5 wz
10130     08 04 90 5D |  if_ne	jmp	#LR__1379
10134     38 D5 BF FD | 	call	#_pop
10138     3F B3 02 F6 | 	mov	local07, result3
1013c     40 CE 05 F1 | 	add	fp, #64
10140     E7 7A 62 FC | 	wrlong	result1, fp
10144     04 CE 05 F1 | 	add	fp, #4
10148     E7 7C 62 FC | 	wrlong	result2, fp
1014c     04 CE 05 F1 | 	add	fp, #4
10150     E7 B2 62 FC | 	wrlong	local07, fp
10154     08 CE 85 F1 | 	sub	fp, #8
10158     E7 92 02 F6 | 	mov	arg01, fp
1015c     40 CE 85 F1 | 	sub	fp, #64
10160     A4 D7 BF FD | 	call	#_converttofloat
10164     3D B3 02 F6 | 	mov	local07, result1
10168     04 D5 BF FD | 	call	#_pop
1016c     3F B1 02 F6 | 	mov	local06, result3
10170     40 CE 05 F1 | 	add	fp, #64
10174     E7 7A 62 FC | 	wrlong	result1, fp
10178     04 CE 05 F1 | 	add	fp, #4
1017c     E7 7C 62 FC | 	wrlong	result2, fp
10180     04 CE 05 F1 | 	add	fp, #4
10184     E7 B0 62 FC | 	wrlong	local06, fp
10188     08 CE 85 F1 | 	sub	fp, #8
1018c     E7 92 02 F6 | 	mov	arg01, fp
10190     40 CE 85 F1 | 	sub	fp, #64
10194     70 D7 BF FD | 	call	#_converttofloat
10198     3D B5 02 F6 | 	mov	local08, result1
1019c     D0 D4 BF FD | 	call	#_pop
101a0     3F B1 02 F6 | 	mov	local06, result3
101a4     40 CE 05 F1 | 	add	fp, #64
101a8     E7 7A 62 FC | 	wrlong	result1, fp
101ac     04 CE 05 F1 | 	add	fp, #4
101b0     E7 7C 62 FC | 	wrlong	result2, fp
101b4     04 CE 05 F1 | 	add	fp, #4
101b8     E7 B0 62 FC | 	wrlong	local06, fp
101bc     08 CE 85 F1 | 	sub	fp, #8
101c0     E7 92 02 F6 | 	mov	arg01, fp
101c4     40 CE 85 F1 | 	sub	fp, #64
101c8     3C D7 BF FD | 	call	#_converttofloat
101cc     3D B1 02 F6 | 	mov	local06, result1
101d0     9C D4 BF FD | 	call	#_pop
101d4     3F AF 02 F6 | 	mov	local05, result3
101d8     40 CE 05 F1 | 	add	fp, #64
101dc     E7 7A 62 FC | 	wrlong	result1, fp
101e0     04 CE 05 F1 | 	add	fp, #4
101e4     E7 7C 62 FC | 	wrlong	result2, fp
101e8     04 CE 05 F1 | 	add	fp, #4
101ec     E7 AE 62 FC | 	wrlong	local05, fp
101f0     08 CE 85 F1 | 	sub	fp, #8
101f4     E7 92 02 F6 | 	mov	arg01, fp
101f8     40 CE 85 F1 | 	sub	fp, #64
101fc     08 D7 BF FD | 	call	#_converttofloat
10200     3D AF 02 F6 | 	mov	local05, result1
10204     68 D4 BF FD | 	call	#_pop
10208     3F AD 02 F6 | 	mov	local04, result3
1020c     40 CE 05 F1 | 	add	fp, #64
10210     E7 7A 62 FC | 	wrlong	result1, fp
10214     04 CE 05 F1 | 	add	fp, #4
10218     E7 7C 62 FC | 	wrlong	result2, fp
1021c     04 CE 05 F1 | 	add	fp, #4
10220     E7 AC 62 FC | 	wrlong	local04, fp
10224     08 CE 85 F1 | 	sub	fp, #8
10228     E7 92 02 F6 | 	mov	arg01, fp
1022c     40 CE 85 F1 | 	sub	fp, #64
10230     18 D6 BF FD | 	call	#_converttoint
10234     3D AD 02 F6 | 	mov	local04, result1
10238                 | '   t1=pop() : rr=converttofloat(t1)
10238                 | '   t1=pop() : ss=converttofloat(t1) 
10238                 | '   t1=pop() : dd=converttofloat(t1)
10238                 | '   t1=pop() : aa=converttofloat(t1)
10238                 | '   t1=pop() : channel=converttoint(t1)
10238                 | '   if ss<0.0 then ss=0.0 
10238     5A 93 02 F6 | 	mov	arg01, local08
1023c     00 94 06 F6 | 	mov	arg02, #0
10240     01 96 06 F6 | 	mov	arg03, #1
10244     B8 72 B1 FD | 	call	#__system___float_cmp
10248     00 7A 56 F2 | 	cmps	result1, #0 wc
1024c     00 B4 06 C6 |  if_b	mov	local08, #0
10250                 | '   if ss>1.0 then ss=1.0
10250     5A 93 02 F6 | 	mov	arg01, local08
10254     00 C0 1F FF 
10258     00 94 06 F6 | 	mov	arg02, ##1065353216
1025c     01 96 66 F6 | 	neg	arg03, #1
10260     9C 72 B1 FD | 	call	#__system___float_cmp
10264     01 7A 56 F2 | 	cmps	result1, #1 wc
10268     00 C0 1F 3F 
1026c     00 B4 06 36 |  if_ae	mov	local08, ##1065353216
10270     57 93 02 F6 | 	mov	arg01, local05
10274     58 95 02 F6 | 	mov	arg02, local06
10278     80 6A B1 FD | 	call	#__system___float_add
1027c     3D 93 02 F6 | 	mov	arg01, result1
10280     59 95 02 F6 | 	mov	arg02, local07
10284     74 6A B1 FD | 	call	#__system___float_add
10288     3D 95 02 F6 | 	mov	arg02, result1
1028c     00 C0 21 FF 
10290     00 92 06 F6 | 	mov	arg01, ##1132462080
10294     38 70 B1 FD | 	call	#__system___float_div
10298     3D B7 02 F6 | 	mov	local09, result1
1029c     57 93 02 F6 | 	mov	arg01, local05
102a0     5B 95 02 F6 | 	mov	arg02, local09
102a4     24 6E B1 FD | 	call	#__system___float_mul
102a8     3D 93 02 F6 | 	mov	arg01, result1
102ac     01 94 06 F6 | 	mov	arg02, #1
102b0     E0 72 B1 FD | 	call	#__system___float_tointeger
102b4     3D B9 02 F6 | 	mov	local10, result1
102b8     58 93 02 F6 | 	mov	arg01, local06
102bc     5B 95 02 F6 | 	mov	arg02, local09
102c0     08 6E B1 FD | 	call	#__system___float_mul
102c4     3D 93 02 F6 | 	mov	arg01, result1
102c8     01 94 06 F6 | 	mov	arg02, #1
102cc     C4 72 B1 FD | 	call	#__system___float_tointeger
102d0     3D BB 02 F6 | 	mov	local11, result1
102d4     59 93 02 F6 | 	mov	arg01, local07
102d8     5B 95 02 F6 | 	mov	arg02, local09
102dc     EC 6D B1 FD | 	call	#__system___float_mul
102e0     3D 93 02 F6 | 	mov	arg01, result1
102e4     01 94 06 F6 | 	mov	arg02, #1
102e8     A8 72 B1 FD | 	call	#__system___float_tointeger
102ec     3D B1 02 F6 | 	mov	local06, result1
102f0     F8 BF 23 FF 
102f4     00 AE 06 F6 | 	mov	local05, ##1199566848
102f8     5C 93 52 F6 | 	abs	arg01, local10 wc
102fc     1F BC C6 C9 |  if_b	decod	local12, #31
10300     00 BC 06 36 |  if_ae	mov	local12, #0
10304     C0 69 B1 FD | 	call	#__system___float_fromuns
10308     5E 7B 62 F5 | 	xor	result1, local12
1030c     3D 95 02 F6 | 	mov	arg02, result1
10310     57 93 02 F6 | 	mov	arg01, local05
10314     B8 6F B1 FD | 	call	#__system___float_div
10318     3D BF 02 F6 | 	mov	local13, result1
1031c     F8 BF 23 FF 
10320     00 AE 06 F6 | 	mov	local05, ##1199566848
10324     F8 BF 23 FF 
10328     00 92 06 F6 | 	mov	arg01, ##1199566848
1032c     5A 95 02 F6 | 	mov	arg02, local08
10330     98 6D B1 FD | 	call	#__system___float_mul
10334     3D 95 02 F6 | 	mov	arg02, result1
10338     57 93 02 F6 | 	mov	arg01, local05
1033c     1F 94 E6 F4 | 	bitnot	arg02, #31
10340     B8 69 B1 FD | 	call	#__system___float_add
10344     3D AF 02 F6 | 	mov	local05, result1
10348     5D 93 52 F6 | 	abs	arg01, local11 wc
1034c     1F BC C6 C9 |  if_b	decod	local12, #31
10350     00 BC 06 36 |  if_ae	mov	local12, #0
10354     70 69 B1 FD | 	call	#__system___float_fromuns
10358     5E 7B 62 F5 | 	xor	result1, local12
1035c     3D 95 02 F6 | 	mov	arg02, result1
10360     57 93 02 F6 | 	mov	arg01, local05
10364     68 6F B1 FD | 	call	#__system___float_div
10368     3D C1 02 F6 | 	mov	local14, result1
1036c     F8 BF 23 FF 
10370     00 92 06 F6 | 	mov	arg01, ##1199566848
10374     5A 95 02 F6 | 	mov	arg02, local08
10378     50 6D B1 FD | 	call	#__system___float_mul
1037c     3D AF 02 F6 | 	mov	local05, result1
10380     58 93 52 F6 | 	abs	arg01, local06 wc
10384     1F BC C6 C9 |  if_b	decod	local12, #31
10388     00 BC 06 36 |  if_ae	mov	local12, #0
1038c     38 69 B1 FD | 	call	#__system___float_fromuns
10390     5E 7B 62 F5 | 	xor	result1, local12
10394     3D 95 02 F6 | 	mov	arg02, result1
10398     57 93 02 F6 | 	mov	arg01, local05
1039c     30 6F B1 FD | 	call	#__system___float_div
103a0     3D C3 02 F6 | 	mov	local15, result1
103a4     56 B3 02 F6 | 	mov	local07, local04
103a8     01 B2 66 F0 | 	shl	local07, #1
103ac     32 C5 02 F6 | 	mov	local16, objptr
103b0     54 00 00 FF 
103b4     90 C4 06 F1 | 	add	local16, ##43152
103b8     62 B3 02 F1 | 	add	local07, local16
103bc     5C C7 02 F6 | 	mov	local17, local10
103c0     5D C7 02 F1 | 	add	local17, local11
103c4     59 C7 52 FC | 	wrword	local17, local07
103c8     00 C8 06 F6 | 	mov	local18, #0
103cc                 | '   fulltime=aa+dd+rr
103cc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
103cc                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
103cc                 | '   suspoints(channel)=a+d
103cc                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
103cc     00 B2 06 F6 | 	mov	local07, #0
103d0     5C CB 02 F6 | 	mov	local19, local10
103d4                 | LR__1373
103d4     65 B3 52 F2 | 	cmps	local07, local19 wc
103d8     4C 00 90 3D |  if_ae	jmp	#LR__1374
103dc     56 C7 02 F6 | 	mov	local17, local04
103e0     09 C6 66 F0 | 	shl	local17, #9
103e4     32 C5 02 F6 | 	mov	local16, objptr
103e8     0E 00 00 FF 
103ec     38 C4 06 F1 | 	add	local16, ##7224
103f0     62 C7 02 F1 | 	add	local17, local16
103f4     59 C5 02 F6 | 	mov	local16, local07
103f8     01 C4 66 F0 | 	shl	local16, #1
103fc     63 C5 02 F1 | 	add	local16, local17
10400     64 93 02 F6 | 	mov	arg01, local18
10404     01 94 06 F6 | 	mov	arg02, #1
10408     88 71 B1 FD | 	call	#__system___float_tointeger
1040c     62 7B 52 FC | 	wrword	result1, local16
10410     5F 95 02 F6 | 	mov	arg02, local13
10414     64 93 02 F6 | 	mov	arg01, local18
10418     E0 68 B1 FD | 	call	#__system___float_add
1041c     3D C9 02 F6 | 	mov	local18, result1
10420     01 B2 06 F1 | 	add	local07, #1
10424     AC FF 9F FD | 	jmp	#LR__1373
10428                 | LR__1374
10428                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10428     5C B3 02 F6 | 	mov	local07, local10
1042c     5C CD 02 F6 | 	mov	local20, local10
10430     5D CD 02 F1 | 	add	local20, local11
10434                 | LR__1375
10434     66 B3 52 F2 | 	cmps	local07, local20 wc
10438     68 00 90 3D |  if_ae	jmp	#LR__1376
1043c     56 CB 02 F6 | 	mov	local19, local04
10440     09 CA 66 F0 | 	shl	local19, #9
10444     32 C5 02 F6 | 	mov	local16, objptr
10448     0E 00 00 FF 
1044c     38 C4 06 F1 | 	add	local16, ##7224
10450     62 CB 02 F1 | 	add	local19, local16
10454     59 C7 02 F6 | 	mov	local17, local07
10458     01 C6 66 F0 | 	shl	local17, #1
1045c     65 C7 02 F1 | 	add	local17, local19
10460     64 93 02 F6 | 	mov	arg01, local18
10464     01 94 06 F6 | 	mov	arg02, #1
10468     28 71 B1 FD | 	call	#__system___float_tointeger
1046c     63 7B 52 FC | 	wrword	result1, local17
10470     64 93 02 F6 | 	mov	arg01, local18
10474     60 95 02 F6 | 	mov	arg02, local14
10478     1F 94 E6 F4 | 	bitnot	arg02, #31
1047c     7C 68 B1 FD | 	call	#__system___float_add
10480     3D C9 02 F6 | 	mov	local18, result1
10484     64 93 02 F6 | 	mov	arg01, local18
10488     00 94 06 F6 | 	mov	arg02, #0
1048c     01 96 06 F6 | 	mov	arg03, #1
10490     6C 70 B1 FD | 	call	#__system___float_cmp
10494     00 7A 56 F2 | 	cmps	result1, #0 wc
10498     00 C8 06 C6 |  if_b	mov	local18, #0
1049c     01 B2 06 F1 | 	add	local07, #1
104a0     90 FF 9F FD | 	jmp	#LR__1375
104a4                 | LR__1376
104a4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
104a4     5C B3 02 F6 | 	mov	local07, local10
104a8     5D B3 02 F1 | 	add	local07, local11
104ac                 | LR__1377
104ac     00 B3 56 F2 | 	cmps	local07, #256 wc
104b0     68 00 90 3D |  if_ae	jmp	#LR__1378
104b4     56 CD 02 F6 | 	mov	local20, local04
104b8     09 CC 66 F0 | 	shl	local20, #9
104bc     32 C7 02 F6 | 	mov	local17, objptr
104c0     0E 00 00 FF 
104c4     38 C6 06 F1 | 	add	local17, ##7224
104c8     63 CD 02 F1 | 	add	local20, local17
104cc     59 CB 02 F6 | 	mov	local19, local07
104d0     01 CA 66 F0 | 	shl	local19, #1
104d4     66 CB 02 F1 | 	add	local19, local20
104d8     64 93 02 F6 | 	mov	arg01, local18
104dc     01 94 06 F6 | 	mov	arg02, #1
104e0     B0 70 B1 FD | 	call	#__system___float_tointeger
104e4     65 7B 52 FC | 	wrword	result1, local19
104e8     64 93 02 F6 | 	mov	arg01, local18
104ec     61 95 02 F6 | 	mov	arg02, local15
104f0     1F 94 E6 F4 | 	bitnot	arg02, #31
104f4     04 68 B1 FD | 	call	#__system___float_add
104f8     3D C9 02 F6 | 	mov	local18, result1
104fc     64 93 02 F6 | 	mov	arg01, local18
10500     00 94 06 F6 | 	mov	arg02, #0
10504     01 96 06 F6 | 	mov	arg03, #1
10508     F4 6F B1 FD | 	call	#__system___float_cmp
1050c     00 7A 56 F2 | 	cmps	result1, #0 wc
10510     00 C8 06 C6 |  if_b	mov	local18, #0
10514     01 B2 06 F1 | 	add	local07, #1
10518     90 FF 9F FD | 	jmp	#LR__1377
1051c                 | LR__1378
1051c     56 CD 02 F6 | 	mov	local20, local04
10520     09 CC 66 F0 | 	shl	local20, #9
10524     32 C5 02 F6 | 	mov	local16, objptr
10528     0E 00 00 FF 
1052c     38 C4 06 F1 | 	add	local16, ##7224
10530     62 CD 02 F1 | 	add	local20, local16
10534     FE CD 06 F1 | 	add	local20, #510
10538     66 01 58 FC | 	wrword	#0, local20
1053c                 | LR__1379
1053c     09 AC 66 F0 | 	shl	local04, #9
10540     32 C5 02 F6 | 	mov	local16, objptr
10544     0E 00 00 FF 
10548     38 C4 06 F1 | 	add	local16, ##7224
1054c     62 AD 02 F1 | 	add	local04, local16
10550     FE AD 06 F1 | 	add	local04, #510
10554     56 01 58 FC | 	wrword	#0, local04
10558                 | LR__1380
10558     E7 F0 03 F6 | 	mov	ptra, fp
1055c     F2 00 A0 FD | 	call	#popregs_
10560                 | _do_defenv_ret
10560     2D 00 64 FD | 	ret
10564                 | 
10564                 | ' 
10564                 | ' '-------------------- defsnd
10564                 | ' 
10564                 | ' sub do_defsnd
10564                 | _do_defsnd
10564     0D CA 05 F6 | 	mov	COUNT_, #13
10568     E8 00 A0 FD | 	call	#pushregs_
1056c     80 F0 07 F1 | 	add	ptra, #128
10570     4C 00 00 FF 
10574     24 64 06 F1 | 	add	objptr, ##38948
10578     32 9B 02 FB | 	rdlong	arg05, objptr
1057c     4D 99 02 F6 | 	mov	arg04, arg05
10580     01 98 66 F0 | 	shl	arg04, #1
10584     4D 99 02 F1 | 	add	arg04, arg05
10588     02 98 66 F0 | 	shl	arg04, #2
1058c     03 00 00 FF 
10590     04 64 86 F1 | 	sub	objptr, ##1540
10594     32 99 02 F1 | 	add	arg04, objptr
10598     4C A7 02 FB | 	rdlong	local01, arg04
1059c                 | ' 
1059c                 | ' numpar=compiledline(lineptr_e).result.uresult
1059c                 | ' 
1059c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
1059c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
1059c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
1059c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
1059c                 | ' 
1059c                 | ' if numpar<2 then return
1059c     02 A6 56 F2 | 	cmps	local01, #2 wc
105a0     49 00 00 FF 
105a4     20 64 86 F1 | 	sub	objptr, ##37408
105a8     88 06 90 CD |  if_b	jmp	#LR__1411
105ac                 | '  
105ac                 | ' if numpar=2 then
105ac     02 A6 0E F2 | 	cmp	local01, #2 wz
105b0     E4 02 90 5D |  if_ne	jmp	#LR__1399
105b4     B8 D0 BF FD | 	call	#_pop
105b8     3F 9B 02 F6 | 	mov	arg05, result3
105bc     2C CE 05 F1 | 	add	fp, #44
105c0     E7 7A 62 FC | 	wrlong	result1, fp
105c4     04 CE 05 F1 | 	add	fp, #4
105c8     E7 7C 62 FC | 	wrlong	result2, fp
105cc     04 CE 05 F1 | 	add	fp, #4
105d0     E7 9A 62 FC | 	wrlong	arg05, fp
105d4                 | '   t1=pop()
105d4                 | '   if t1.result_type=result_string2 then 
105d4     34 CE 85 F1 | 	sub	fp, #52
105d8     2B 9A 0E F2 | 	cmp	arg05, #43 wz
105dc     18 00 90 5D |  if_ne	jmp	#LR__1390
105e0     2C CE 05 F1 | 	add	fp, #44
105e4     E7 92 02 FB | 	rdlong	arg01, fp
105e8     2C CE 85 F1 | 	sub	fp, #44
105ec     F0 D1 BF FD | 	call	#_convertstring
105f0     3D A9 02 F6 | 	mov	local02, result1
105f4     38 00 90 FD | 	jmp	#LR__1392
105f8                 | LR__1390
105f8     34 CE 05 F1 | 	add	fp, #52
105fc     E7 9A 02 FB | 	rdlong	arg05, fp
10600     34 CE 85 F1 | 	sub	fp, #52
10604     1F 9A 0E F2 | 	cmp	arg05, #31 wz
10608     2C CE 05 A1 |  if_e	add	fp, #44
1060c     E7 A8 02 AB |  if_e	rdlong	local02, fp
10610     2C CE 85 A1 |  if_e	sub	fp, #44
10614     18 00 90 AD |  if_e	jmp	#LR__1391
10618     97 01 00 FF 
1061c     39 A8 06 F6 | 	mov	local02, ##@LR__5988
10620     E7 92 02 F6 | 	mov	arg01, fp
10624     2C 92 06 F1 | 	add	arg01, #44
10628     20 D2 BF FD | 	call	#_converttoint
1062c     3D AB 02 F6 | 	mov	local03, result1
10630                 | LR__1391
10630                 | LR__1392
10630                 | '   if s<>"" then 
10630     97 01 00 FF 
10634     3A 94 06 F6 | 	mov	arg02, ##@LR__5989
10638     54 93 02 F6 | 	mov	arg01, local02
1063c     E4 43 B1 FD | 	call	#__system___string_cmp
10640     00 7A 0E F2 | 	cmp	result1, #0 wz
10644     B0 01 90 AD |  if_e	jmp	#LR__1395
10648     24 D0 BF FD | 	call	#_pop
1064c     3F 9B 02 F6 | 	mov	arg05, result3
10650     2C CE 05 F1 | 	add	fp, #44
10654     E7 7A 62 FC | 	wrlong	result1, fp
10658     04 CE 05 F1 | 	add	fp, #4
1065c     E7 7C 62 FC | 	wrlong	result2, fp
10660     04 CE 05 F1 | 	add	fp, #4
10664     E7 9A 62 FC | 	wrlong	arg05, fp
10668     08 CE 85 F1 | 	sub	fp, #8
1066c     E7 92 02 F6 | 	mov	arg01, fp
10670     2C CE 85 F1 | 	sub	fp, #44
10674     D4 D1 BF FD | 	call	#_converttoint
10678     3D AD 02 F6 | 	mov	local04, result1
1067c                 | '     t1=pop()
1067c                 | '     channel=converttoint(t1) : if channel>31 then return
1067c     20 AC 56 F2 | 	cmps	local04, #32 wc
10680     B0 05 90 3D |  if_ae	jmp	#LR__1411
10684                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10684     09 92 06 F6 | 	mov	arg01, #9
10688     4C 8F B1 FD | 	call	#__system__close
1068c     09 AA 06 F6 | 	mov	local03, #9
10690     97 01 00 FF 
10694     3B 92 06 F6 | 	mov	arg01, ##@LR__5990
10698     54 95 02 F6 | 	mov	arg02, local02
1069c     B8 43 B1 FD | 	call	#__system___string_concat
106a0     3D 95 02 F6 | 	mov	arg02, result1
106a4     55 93 02 F6 | 	mov	arg01, local03
106a8     00 96 06 F6 | 	mov	arg03, #0
106ac     FC 4E B1 FD | 	call	#__system___basic_open_string
106b0     20 68 06 F1 | 	add	ptr___system__dat__, #32
106b4     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
106b8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
106bc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
106c0     54 00 00 FF 
106c4     EC 64 06 F1 | 	add	objptr, ##43244
106c8     32 7B 62 FC | 	wrlong	result1, objptr
106cc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
106cc     54 00 00 FF 
106d0     EC 64 86 F1 | 	sub	objptr, ##43244
106d4     B0 00 90 AD |  if_e	jmp	#LR__1393
106d8     00 92 06 F6 | 	mov	arg01, #0
106dc     A0 98 B1 FD | 	call	#__system___getiolock_0622
106e0     3D 93 02 F6 | 	mov	arg01, result1
106e4     14 43 B1 FD | 	call	#__system___lockmem
106e8     97 01 00 FF 
106ec     48 94 06 F6 | 	mov	arg02, ##@LR__5991
106f0     00 92 06 F6 | 	mov	arg01, #0
106f4     00 96 06 F6 | 	mov	arg03, #0
106f8     F4 4F B1 FD | 	call	#__system___basic_print_string
106fc     54 00 00 FF 
10700     EC 64 06 F1 | 	add	objptr, ##43244
10704     32 95 02 FB | 	rdlong	arg02, objptr
10708     54 00 00 FF 
1070c     EC 64 86 F1 | 	sub	objptr, ##43244
10710     00 92 06 F6 | 	mov	arg01, #0
10714     00 96 06 F6 | 	mov	arg03, #0
10718     0A 98 06 F6 | 	mov	arg04, #10
1071c     14 50 B1 FD | 	call	#__system___basic_print_integer
10720     97 01 00 FF 
10724     56 94 06 F6 | 	mov	arg02, ##@LR__5992
10728     00 92 06 F6 | 	mov	arg01, #0
1072c     00 96 06 F6 | 	mov	arg03, #0
10730     BC 4F B1 FD | 	call	#__system___basic_print_string
10734     00 AC 06 F6 | 	mov	local04, #0
10738     54 00 00 FF 
1073c     EC 64 06 F1 | 	add	objptr, ##43244
10740     32 93 02 FB | 	rdlong	arg01, objptr
10744     54 00 00 FF 
10748     EC 64 86 F1 | 	sub	objptr, ##43244
1074c     5C 64 B1 FD | 	call	#__system___strerror
10750     3D 95 02 F6 | 	mov	arg02, result1
10754     56 93 02 F6 | 	mov	arg01, local04
10758     00 96 06 F6 | 	mov	arg03, #0
1075c     90 4F B1 FD | 	call	#__system___basic_print_string
10760     00 92 06 F6 | 	mov	arg01, #0
10764     0A 94 06 F6 | 	mov	arg02, #10
10768     00 96 06 F6 | 	mov	arg03, #0
1076c     28 4F B1 FD | 	call	#__system___basic_print_char
10770     00 92 06 F6 | 	mov	arg01, #0
10774     08 98 B1 FD | 	call	#__system___getiolock_0622
10778     3D 01 68 FC | 	wrlong	#0, result1
1077c     09 92 06 F6 | 	mov	arg01, #9
10780     54 8E B1 FD | 	call	#__system__close
10784     AC 04 90 FD | 	jmp	#LR__1411
10788                 | LR__1393
10788                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10788     00 AE 06 F6 | 	mov	local05, #0
1078c                 | LR__1394
1078c     57 AB 02 F6 | 	mov	local03, local05
10790     01 AA 66 F0 | 	shl	local03, #1
10794     11 94 06 F6 | 	mov	arg02, #17
10798     55 95 02 F1 | 	add	arg02, local03
1079c     E7 96 02 F6 | 	mov	arg03, fp
107a0     7C 96 06 F1 | 	add	arg03, #124
107a4     09 92 06 F6 | 	mov	arg01, #9
107a8     01 98 06 F6 | 	mov	arg04, #1
107ac     02 9A 06 F6 | 	mov	arg05, #2
107b0     C4 50 B1 FD | 	call	#__system___basic_get
107b4     56 93 02 F6 | 	mov	arg01, local04
107b8     0B 92 66 F0 | 	shl	arg01, #11
107bc     57 AB 02 F6 | 	mov	local03, local05
107c0     01 AA 66 F0 | 	shl	local03, #1
107c4     55 93 02 F1 | 	add	arg01, local03
107c8     7C CE 05 F1 | 	add	fp, #124
107cc     E7 94 E2 FA | 	rdword	arg02, fp
107d0     7C CE 85 F1 | 	sub	fp, #124
107d4     0F 94 66 F7 | 	signx	arg02, #15
107d8     DC 06 B1 FD | 	call	#_psdpoke
107dc     01 AE 06 F1 | 	add	local05, #1
107e0     02 00 00 FF 
107e4     01 AE 56 F2 | 	cmps	local05, ##1025 wc
107e8     A0 FF 9F CD |  if_b	jmp	#LR__1394
107ec                 | '     close #9
107ec     09 92 06 F6 | 	mov	arg01, #9
107f0     E4 8D B1 FD | 	call	#__system__close
107f4                 | '     return
107f4     3C 04 90 FD | 	jmp	#LR__1411
107f8                 | LR__1395
107f8                 | '     if wptr < ($80000 - 2048) then 
107f8     FC 03 00 FF 
107fc     00 AA 56 F2 | 	cmps	local03, ##522240 wc
10800     48 00 90 3D |  if_ae	jmp	#LR__1397
10804                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10804     00 AE 06 F6 | 	mov	local05, #0
10808                 | LR__1396
10808     56 A7 02 F6 | 	mov	local01, local04
1080c     0B A6 66 F0 | 	shl	local01, #11
10810     57 A9 02 F6 | 	mov	local02, local05
10814     01 A8 66 F0 | 	shl	local02, #1
10818     54 A7 02 F1 | 	add	local01, local02
1081c     55 93 02 F6 | 	mov	arg01, local03
10820     57 A9 02 F6 | 	mov	local02, local05
10824     01 A8 66 F0 | 	shl	local02, #1
10828     54 93 02 F1 | 	add	arg01, local02
1082c     49 95 E2 FA | 	rdword	arg02, arg01
10830     53 93 02 F6 | 	mov	arg01, local01
10834     80 06 B1 FD | 	call	#_psdpoke
10838     01 AE 06 F1 | 	add	local05, #1
1083c     02 00 00 FF 
10840     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10844     C0 FF 9F CD |  if_b	jmp	#LR__1396
10848     E8 03 90 FD | 	jmp	#LR__1411
1084c                 | LR__1397
1084c                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
1084c     00 AE 06 F6 | 	mov	local05, #0
10850                 | LR__1398
10850     56 A7 02 F6 | 	mov	local01, local04
10854     0B A6 66 F0 | 	shl	local01, #11
10858     57 A9 02 F6 | 	mov	local02, local05
1085c     01 A8 66 F0 | 	shl	local02, #1
10860     54 A7 02 F1 | 	add	local01, local02
10864     55 93 02 F6 | 	mov	arg01, local03
10868     57 A9 02 F6 | 	mov	local02, local05
1086c     01 A8 66 F0 | 	shl	local02, #1
10870     54 93 02 F1 | 	add	arg01, local02
10874     60 07 B1 FD | 	call	#_psdpeek
10878     3D 95 02 F6 | 	mov	arg02, result1
1087c     53 93 02 F6 | 	mov	arg01, local01
10880     34 06 B1 FD | 	call	#_psdpoke
10884     01 AE 06 F1 | 	add	local05, #1
10888     02 00 00 FF 
1088c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10890     BC FF 9F CD |  if_b	jmp	#LR__1398
10894                 | '     return 
10894     9C 03 90 FD | 	jmp	#LR__1411
10898                 | '   return
10898                 | LR__1399
10898                 | ' for i=0 to 15 : harm(i)=0: next i  
10898     00 AE 06 F6 | 	mov	local05, #0
1089c     3C CE 05 F1 | 	add	fp, #60
108a0     D7 0E 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
108a4                 | LR__1400
108a4     57 B1 02 F6 | 	mov	local06, local05
108a8     02 B0 66 F0 | 	shl	local06, #2
108ac     E7 B0 02 F1 | 	add	local06, fp
108b0     58 01 68 FC | 	wrlong	#0, local06
108b4     01 AE 06 F1 | 	add	local05, #1
108b8     10 AE 56 F2 | 	cmps	local05, #16 wc
108bc     E4 FF 9F CD |  if_b	jmp	#LR__1400
108c0                 | LR__1401
108c0     3C CE 85 F1 | 	sub	fp, #60
108c4                 | ' for i=numpar to 2 step -1 
108c4     53 AF 02 F6 | 	mov	local05, local01
108c8                 | LR__1402
108c8     A4 CD BF FD | 	call	#_pop
108cc     2C CE 05 F1 | 	add	fp, #44
108d0     E7 7A 62 FC | 	wrlong	result1, fp
108d4     04 CE 05 F1 | 	add	fp, #4
108d8     E7 7C 62 FC | 	wrlong	result2, fp
108dc     04 CE 05 F1 | 	add	fp, #4
108e0     E7 7E 62 FC | 	wrlong	result3, fp
108e4     57 B1 02 F6 | 	mov	local06, local05
108e8     02 B0 86 F1 | 	sub	local06, #2
108ec     02 B0 66 F0 | 	shl	local06, #2
108f0     08 CE 05 F1 | 	add	fp, #8
108f4     E7 B0 02 F1 | 	add	local06, fp
108f8     10 CE 85 F1 | 	sub	fp, #16
108fc     E7 92 02 F6 | 	mov	arg01, fp
10900     2C CE 85 F1 | 	sub	fp, #44
10904     00 D0 BF FD | 	call	#_converttofloat
10908     58 7B 62 FC | 	wrlong	result1, local06
1090c     01 AE 86 F1 | 	sub	local05, #1
10910     02 AE 56 F2 | 	cmps	local05, #2 wc
10914     B0 FF 9F 3D |  if_ae	jmp	#LR__1402
10918     54 CD BF FD | 	call	#_pop
1091c     3F AF 02 F6 | 	mov	local05, result3
10920     2C CE 05 F1 | 	add	fp, #44
10924     E7 7A 62 FC | 	wrlong	result1, fp
10928     04 CE 05 F1 | 	add	fp, #4
1092c     E7 7C 62 FC | 	wrlong	result2, fp
10930     04 CE 05 F1 | 	add	fp, #4
10934     E7 AE 62 FC | 	wrlong	local05, fp
10938     08 CE 85 F1 | 	sub	fp, #8
1093c     E7 92 02 F6 | 	mov	arg01, fp
10940     2C CE 85 F1 | 	sub	fp, #44
10944     04 CF BF FD | 	call	#_converttoint
10948     3D AD 02 F6 | 	mov	local04, result1
1094c                 | ' t1=pop()
1094c                 | ' channel=converttoint(t1) : : if channel>31 then return
1094c     20 AC 56 F2 | 	cmps	local04, #32 wc
10950     E0 02 90 3D |  if_ae	jmp	#LR__1411
10954     00 B2 06 F6 | 	mov	local07, #0
10958                 | ' max=0
10958                 | ' if harm(0)<0 then
10958     3C CE 05 F1 | 	add	fp, #60
1095c     E7 92 02 FB | 	rdlong	arg01, fp
10960     3C CE 85 F1 | 	sub	fp, #60
10964     00 94 06 F6 | 	mov	arg02, #0
10968     01 96 06 F6 | 	mov	arg03, #1
1096c     90 6B B1 FD | 	call	#__system___float_cmp
10970     00 7A 56 F2 | 	cmps	result1, #0 wc
10974     C0 00 90 3D |  if_ae	jmp	#LR__1405
10978     3C CE 05 F1 | 	add	fp, #60
1097c     E7 B4 02 FB | 	rdlong	local08, fp
10980     1F B4 06 F4 | 	bitl	local08, #31
10984     04 CE 05 F1 | 	add	fp, #4
10988     E7 B6 02 FB | 	rdlong	local09, fp
1098c     1F B6 06 F4 | 	bitl	local09, #31
10990     04 CE 85 F1 | 	sub	fp, #4
10994     00 C0 9F FF 
10998     E7 00 68 FC | 	wrlong	##1065353216, fp
1099c     04 CE 05 F1 | 	add	fp, #4
109a0     E7 B4 62 FC | 	wrlong	local08, fp
109a4     04 CE 05 F1 | 	add	fp, #4
109a8     E7 B6 62 FC | 	wrlong	local09, fp
109ac     44 CE 85 F1 | 	sub	fp, #68
109b0                 | '   harm(0)=1
109b0                 | '   harm(1)=even
109b0                 | '   harm(2)=odd
109b0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
109b0     03 AE 06 F6 | 	mov	local05, #3
109b4                 | LR__1403
109b4     57 B1 02 F6 | 	mov	local06, local05
109b8     02 B0 66 F0 | 	shl	local06, #2
109bc     3C CE 05 F1 | 	add	fp, #60
109c0     E7 B0 02 F1 | 	add	local06, fp
109c4     57 9B 02 F6 | 	mov	arg05, local05
109c8     02 9A 86 F1 | 	sub	arg05, #2
109cc     02 9A 66 F0 | 	shl	arg05, #2
109d0     E7 9A 02 F1 | 	add	arg05, fp
109d4     4D 93 02 FB | 	rdlong	arg01, arg05
109d8     5A 95 02 F6 | 	mov	arg02, local08
109dc     3C CE 85 F1 | 	sub	fp, #60
109e0     E8 66 B1 FD | 	call	#__system___float_mul
109e4     58 7B 62 FC | 	wrlong	result1, local06
109e8     02 AE 06 F1 | 	add	local05, #2
109ec     10 AE 56 F2 | 	cmps	local05, #16 wc
109f0     C0 FF 9F CD |  if_b	jmp	#LR__1403
109f4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
109f4     04 AE 06 F6 | 	mov	local05, #4
109f8                 | LR__1404
109f8     57 B1 02 F6 | 	mov	local06, local05
109fc     02 B0 66 F0 | 	shl	local06, #2
10a00     3C CE 05 F1 | 	add	fp, #60
10a04     E7 B0 02 F1 | 	add	local06, fp
10a08     57 B5 02 F6 | 	mov	local08, local05
10a0c     02 B4 86 F1 | 	sub	local08, #2
10a10     02 B4 66 F0 | 	shl	local08, #2
10a14     E7 B4 02 F1 | 	add	local08, fp
10a18     5A 93 02 FB | 	rdlong	arg01, local08
10a1c     5B 95 02 F6 | 	mov	arg02, local09
10a20     3C CE 85 F1 | 	sub	fp, #60
10a24     A4 66 B1 FD | 	call	#__system___float_mul
10a28     58 7B 62 FC | 	wrlong	result1, local06
10a2c     02 AE 06 F1 | 	add	local05, #2
10a30     0F AE 56 F2 | 	cmps	local05, #15 wc
10a34     C0 FF 9F CD |  if_b	jmp	#LR__1404
10a38                 | LR__1405
10a38                 | ' if harm(0)>=0 then ' synthesize with harmonics
10a38     3C CE 05 F1 | 	add	fp, #60
10a3c     E7 92 02 FB | 	rdlong	arg01, fp
10a40     3C CE 85 F1 | 	sub	fp, #60
10a44     00 94 06 F6 | 	mov	arg02, #0
10a48     01 96 66 F6 | 	neg	arg03, #1
10a4c     B0 6A B1 FD | 	call	#__system___float_cmp
10a50     00 7A 56 F2 | 	cmps	result1, #0 wc
10a54     DC 01 90 CD |  if_b	jmp	#LR__1410
10a58                 | '   for i=0 to 1023
10a58     00 AE 06 F6 | 	mov	local05, #0
10a5c                 | LR__1406
10a5c     00 B8 06 F6 | 	mov	local10, #0
10a60                 | '     spl=0
10a60                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10a60     00 BA 06 F6 | 	mov	local11, #0
10a64                 | LR__1407
10a64     5D B1 02 F6 | 	mov	local06, local11
10a68     02 B0 66 F0 | 	shl	local06, #2
10a6c     E7 9A 02 F6 | 	mov	arg05, fp
10a70     3C 9A 06 F1 | 	add	arg05, #60
10a74     4D B1 02 F1 | 	add	local06, arg05
10a78     58 B1 02 FB | 	rdlong	local06, local06
10a7c     87 E4 1D FF 
10a80     DB B7 06 F6 | 	mov	local09, ##1003032539
10a84     57 93 52 F6 | 	abs	arg01, local05 wc
10a88     1F BC C6 C9 |  if_b	decod	local12, #31
10a8c     00 BC 06 36 |  if_ae	mov	local12, #0
10a90     34 62 B1 FD | 	call	#__system___float_fromuns
10a94     5E 7B 62 F5 | 	xor	result1, local12
10a98     3D 95 02 F6 | 	mov	arg02, result1
10a9c     5B 93 02 F6 | 	mov	arg01, local09
10aa0     28 66 B1 FD | 	call	#__system___float_mul
10aa4     3D BF 02 F6 | 	mov	local13, result1
10aa8     5D 93 02 F6 | 	mov	arg01, local11
10aac     01 92 06 F1 | 	add	arg01, #1
10ab0     49 93 52 F6 | 	abs	arg01, arg01 wc
10ab4     1F BC C6 C9 |  if_b	decod	local12, #31
10ab8     00 BC 06 36 |  if_ae	mov	local12, #0
10abc     08 62 B1 FD | 	call	#__system___float_fromuns
10ac0     5E 7B 62 F5 | 	xor	result1, local12
10ac4     3D 95 02 F6 | 	mov	arg02, result1
10ac8     5F 93 02 F6 | 	mov	arg01, local13
10acc     FC 65 B1 FD | 	call	#__system___float_mul
10ad0     3D 93 02 F6 | 	mov	arg01, result1
10ad4     64 6F B1 FD | 	call	#__system____builtin_sinf
10ad8     3D 95 02 F6 | 	mov	arg02, result1
10adc     58 93 02 F6 | 	mov	arg01, local06
10ae0     E8 65 B1 FD | 	call	#__system___float_mul
10ae4     3D 95 02 F6 | 	mov	arg02, result1
10ae8     5C 93 02 F6 | 	mov	arg01, local10
10aec     0C 62 B1 FD | 	call	#__system___float_add
10af0     3D B9 02 F6 | 	mov	local10, result1
10af4     01 BA 06 F1 | 	add	local11, #1
10af8     10 BA 56 F2 | 	cmps	local11, #16 wc
10afc     64 FF 9F CD |  if_b	jmp	#LR__1407
10b00                 | '     if abs(spl)>max then max=abs(spl)  
10b00     5C 93 02 F6 | 	mov	arg01, local10
10b04     1F 92 06 F4 | 	bitl	arg01, #31
10b08     59 95 02 F6 | 	mov	arg02, local07
10b0c     01 96 66 F6 | 	neg	arg03, #1
10b10     EC 69 B1 FD | 	call	#__system___float_cmp
10b14     01 7A 56 F2 | 	cmps	result1, #1 wc
10b18     1F B8 06 34 |  if_ae	bitl	local10, #31
10b1c     5C B3 02 36 |  if_ae	mov	local07, local10
10b20     01 AE 06 F1 | 	add	local05, #1
10b24     02 00 00 FF 
10b28     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10b2c     2C FF 9F CD |  if_b	jmp	#LR__1406
10b30                 | '   for i=0 to 1023
10b30     00 AE 06 F6 | 	mov	local05, #0
10b34                 | LR__1408
10b34     00 B8 06 F6 | 	mov	local10, #0
10b38                 | '     spl=0
10b38                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10b38     00 BA 06 F6 | 	mov	local11, #0
10b3c                 | LR__1409
10b3c     5D BF 02 F6 | 	mov	local13, local11
10b40     02 BE 66 F0 | 	shl	local13, #2
10b44     E7 B6 02 F6 | 	mov	local09, fp
10b48     3C B6 06 F1 | 	add	local09, #60
10b4c     5B BF 02 F1 | 	add	local13, local09
10b50     5F B1 02 FB | 	rdlong	local06, local13
10b54     58 7F 23 FF 
10b58     00 92 06 F6 | 	mov	arg01, ##1191096320
10b5c     59 95 02 F6 | 	mov	arg02, local07
10b60     6C 67 B1 FD | 	call	#__system___float_div
10b64     3D 95 02 F6 | 	mov	arg02, result1
10b68     58 93 02 F6 | 	mov	arg01, local06
10b6c     5C 65 B1 FD | 	call	#__system___float_mul
10b70     3D B1 02 F6 | 	mov	local06, result1
10b74     87 E4 1D FF 
10b78     DB BF 06 F6 | 	mov	local13, ##1003032539
10b7c     57 93 52 F6 | 	abs	arg01, local05 wc
10b80     1F BC C6 C9 |  if_b	decod	local12, #31
10b84     00 BC 06 36 |  if_ae	mov	local12, #0
10b88     3C 61 B1 FD | 	call	#__system___float_fromuns
10b8c     5E 7B 62 F5 | 	xor	result1, local12
10b90     3D 95 02 F6 | 	mov	arg02, result1
10b94     5F 93 02 F6 | 	mov	arg01, local13
10b98     30 65 B1 FD | 	call	#__system___float_mul
10b9c     3D BF 02 F6 | 	mov	local13, result1
10ba0     5D 93 02 F6 | 	mov	arg01, local11
10ba4     01 92 06 F1 | 	add	arg01, #1
10ba8     49 93 52 F6 | 	abs	arg01, arg01 wc
10bac     1F BC C6 C9 |  if_b	decod	local12, #31
10bb0     00 BC 06 36 |  if_ae	mov	local12, #0
10bb4     10 61 B1 FD | 	call	#__system___float_fromuns
10bb8     5E 7B 62 F5 | 	xor	result1, local12
10bbc     3D 95 02 F6 | 	mov	arg02, result1
10bc0     5F 93 02 F6 | 	mov	arg01, local13
10bc4     04 65 B1 FD | 	call	#__system___float_mul
10bc8     3D 93 02 F6 | 	mov	arg01, result1
10bcc     6C 6E B1 FD | 	call	#__system____builtin_sinf
10bd0     3D 95 02 F6 | 	mov	arg02, result1
10bd4     58 93 02 F6 | 	mov	arg01, local06
10bd8     F0 64 B1 FD | 	call	#__system___float_mul
10bdc     3D 95 02 F6 | 	mov	arg02, result1
10be0     5C 93 02 F6 | 	mov	arg01, local10
10be4     14 61 B1 FD | 	call	#__system___float_add
10be8     3D B9 02 F6 | 	mov	local10, result1
10bec     01 BA 06 F1 | 	add	local11, #1
10bf0     10 BA 56 F2 | 	cmps	local11, #16 wc
10bf4     44 FF 9F CD |  if_b	jmp	#LR__1409
10bf8     56 BB 02 F6 | 	mov	local11, local04
10bfc     0B BA 66 F0 | 	shl	local11, #11
10c00     57 BF 02 F6 | 	mov	local13, local05
10c04     01 BE 66 F0 | 	shl	local13, #1
10c08     5F BB 02 F1 | 	add	local11, local13
10c0c     5C 93 02 F6 | 	mov	arg01, local10
10c10     01 94 06 F6 | 	mov	arg02, #1
10c14     7C 69 B1 FD | 	call	#__system___float_tointeger
10c18     3D 95 02 F6 | 	mov	arg02, result1
10c1c     5D 93 02 F6 | 	mov	arg01, local11
10c20     94 02 B1 FD | 	call	#_psdpoke
10c24     01 AE 06 F1 | 	add	local05, #1
10c28     02 00 00 FF 
10c2c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10c30     00 FF 9F CD |  if_b	jmp	#LR__1408
10c34                 | LR__1410
10c34                 | LR__1411
10c34     E7 F0 03 F6 | 	mov	ptra, fp
10c38     F2 00 A0 FD | 	call	#popregs_
10c3c                 | _do_defsnd_ret
10c3c     2D 00 64 FD | 	ret
10c40                 | 
10c40                 | ' 
10c40                 | ' '-------------------- defsprite
10c40                 | ' 
10c40                 | ' sub do_defsprite
10c40                 | _do_defsprite
10c40     0B CA 05 F6 | 	mov	COUNT_, #11
10c44     E8 00 A0 FD | 	call	#pushregs_
10c48     60 F0 07 F1 | 	add	ptra, #96
10c4c     20 CA BF FD | 	call	#_pop
10c50     3D 97 02 F6 | 	mov	arg03, result1
10c54     3E 95 02 F6 | 	mov	arg02, result2
10c58     3F 93 02 F6 | 	mov	arg01, result3
10c5c     30 CE 05 F1 | 	add	fp, #48
10c60     E7 96 62 FC | 	wrlong	arg03, fp
10c64     04 CE 05 F1 | 	add	fp, #4
10c68     E7 94 62 FC | 	wrlong	arg02, fp
10c6c     04 CE 05 F1 | 	add	fp, #4
10c70     E7 92 62 FC | 	wrlong	arg01, fp
10c74     38 CE 85 F1 | 	sub	fp, #56
10c78     F4 C9 BF FD | 	call	#_pop
10c7c     3D 97 02 F6 | 	mov	arg03, result1
10c80     3E 95 02 F6 | 	mov	arg02, result2
10c84     3F 93 02 F6 | 	mov	arg01, result3
10c88     24 CE 05 F1 | 	add	fp, #36
10c8c     E7 96 62 FC | 	wrlong	arg03, fp
10c90     04 CE 05 F1 | 	add	fp, #4
10c94     E7 94 62 FC | 	wrlong	arg02, fp
10c98     04 CE 05 F1 | 	add	fp, #4
10c9c     E7 92 62 FC | 	wrlong	arg01, fp
10ca0     2C CE 85 F1 | 	sub	fp, #44
10ca4     C8 C9 BF FD | 	call	#_pop
10ca8     3D 97 02 F6 | 	mov	arg03, result1
10cac     3E 95 02 F6 | 	mov	arg02, result2
10cb0     3F 93 02 F6 | 	mov	arg01, result3
10cb4     18 CE 05 F1 | 	add	fp, #24
10cb8     E7 96 62 FC | 	wrlong	arg03, fp
10cbc     04 CE 05 F1 | 	add	fp, #4
10cc0     E7 94 62 FC | 	wrlong	arg02, fp
10cc4     04 CE 05 F1 | 	add	fp, #4
10cc8     E7 92 62 FC | 	wrlong	arg01, fp
10ccc     20 CE 85 F1 | 	sub	fp, #32
10cd0     9C C9 BF FD | 	call	#_pop
10cd4     3D 97 02 F6 | 	mov	arg03, result1
10cd8     3E 95 02 F6 | 	mov	arg02, result2
10cdc     3F 93 02 F6 | 	mov	arg01, result3
10ce0     0C CE 05 F1 | 	add	fp, #12
10ce4     E7 96 62 FC | 	wrlong	arg03, fp
10ce8     04 CE 05 F1 | 	add	fp, #4
10cec     E7 94 62 FC | 	wrlong	arg02, fp
10cf0     04 CE 05 F1 | 	add	fp, #4
10cf4     E7 92 62 FC | 	wrlong	arg01, fp
10cf8     14 CE 85 F1 | 	sub	fp, #20
10cfc     70 C9 BF FD | 	call	#_pop
10d00     3F 97 02 F6 | 	mov	arg03, result3
10d04     E7 7A 62 FC | 	wrlong	result1, fp
10d08     04 CE 05 F1 | 	add	fp, #4
10d0c     E7 7C 62 FC | 	wrlong	result2, fp
10d10     04 CE 05 F1 | 	add	fp, #4
10d14     E7 96 62 FC | 	wrlong	arg03, fp
10d18     08 CE 85 F1 | 	sub	fp, #8
10d1c     E7 92 02 F6 | 	mov	arg01, fp
10d20     28 CB BF FD | 	call	#_converttoint
10d24     3D A7 02 F6 | 	mov	local01, result1
10d28     E7 92 02 F6 | 	mov	arg01, fp
10d2c     0C 92 06 F1 | 	add	arg01, #12
10d30     18 CB BF FD | 	call	#_converttoint
10d34     3D A9 02 F6 | 	mov	local02, result1
10d38     E7 92 02 F6 | 	mov	arg01, fp
10d3c     18 92 06 F1 | 	add	arg01, #24
10d40     08 CB BF FD | 	call	#_converttoint
10d44     3D AB 02 F6 | 	mov	local03, result1
10d48     E7 92 02 F6 | 	mov	arg01, fp
10d4c     24 92 06 F1 | 	add	arg01, #36
10d50     F8 CA BF FD | 	call	#_converttoint
10d54     3D AD 02 F6 | 	mov	local04, result1
10d58     E7 92 02 F6 | 	mov	arg01, fp
10d5c     30 92 06 F1 | 	add	arg01, #48
10d60     E8 CA BF FD | 	call	#_converttoint
10d64     3D AF 02 F6 | 	mov	local05, result1
10d68                 | ' 
10d68                 | ' t5=pop()
10d68                 | ' t4=pop()
10d68                 | ' t3=pop()
10d68                 | ' t2=pop()
10d68                 | ' t1=pop()
10d68                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10d68                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10d68     53 97 02 F6 | 	mov	arg03, local01
10d6c     02 96 66 F0 | 	shl	arg03, #2
10d70     32 95 02 F6 | 	mov	arg02, objptr
10d74     54 00 00 FF 
10d78     30 94 06 F1 | 	add	arg02, ##43056
10d7c     4A 97 02 F1 | 	add	arg03, arg02
10d80     4B 97 0A FB | 	rdlong	arg03, arg03 wz
10d84     20 00 90 AD |  if_e	jmp	#LR__1420
10d88     53 97 02 F6 | 	mov	arg03, local01
10d8c     02 96 66 F0 | 	shl	arg03, #2
10d90     32 95 02 F6 | 	mov	arg02, objptr
10d94     54 00 00 FF 
10d98     30 94 06 F1 | 	add	arg02, ##43056
10d9c     4A 97 02 F1 | 	add	arg03, arg02
10da0     4B 93 02 FB | 	rdlong	arg01, arg03
10da4     90 77 B1 FD | 	call	#__system___gc_free
10da8                 | LR__1420
10da8     57 AD 02 FD | 	qmul	local04, local05
10dac     53 B1 02 F6 | 	mov	local06, local01
10db0     02 B0 66 F0 | 	shl	local06, #2
10db4     32 97 02 F6 | 	mov	arg03, objptr
10db8     54 00 00 FF 
10dbc     30 96 06 F1 | 	add	arg03, ##43056
10dc0     4B B1 02 F1 | 	add	local06, arg03
10dc4     18 92 62 FD | 	getqx	arg01
10dc8     38 76 B1 FD | 	call	#__system___gc_alloc_managed
10dcc     58 7B 62 FC | 	wrlong	result1, local06
10dd0                 | ' for y=a3 to a3+a5-1
10dd0     55 B3 02 F6 | 	mov	local07, local03
10dd4     55 B5 02 F6 | 	mov	local08, local03
10dd8     57 B5 02 F1 | 	add	local08, local05
10ddc                 | LR__1421
10ddc     5A B3 52 F2 | 	cmps	local07, local08 wc
10de0     7C 00 90 3D |  if_ae	jmp	#LR__1424
10de4                 | '   for x=a2 to a4+a2-1
10de4     54 B7 02 F6 | 	mov	local09, local02
10de8     56 B9 02 F6 | 	mov	local10, local04
10dec     54 B9 02 F1 | 	add	local10, local02
10df0                 | LR__1422
10df0     5C B7 52 F2 | 	cmps	local09, local10 wc
10df4     60 00 90 3D |  if_ae	jmp	#LR__1423
10df8     59 B1 02 F6 | 	mov	local06, local07
10dfc     55 B1 82 F1 | 	sub	local06, local03
10e00     56 B1 02 FD | 	qmul	local06, local04
10e04     53 B1 02 F6 | 	mov	local06, local01
10e08     02 B0 66 F0 | 	shl	local06, #2
10e0c     32 97 02 F6 | 	mov	arg03, objptr
10e10     54 00 00 FF 
10e14     30 96 06 F1 | 	add	arg03, ##43056
10e18     4B B1 02 F1 | 	add	local06, arg03
10e1c     58 B1 02 FB | 	rdlong	local06, local06
10e20     5B BB 02 F6 | 	mov	local11, local09
10e24     54 BB 82 F1 | 	sub	local11, local02
10e28     32 93 02 FB | 	rdlong	arg01, objptr
10e2c     5B 93 02 F1 | 	add	arg01, local09
10e30     59 97 02 F6 | 	mov	arg03, local07
10e34     0A 96 66 F0 | 	shl	arg03, #10
10e38     4B 93 02 F1 | 	add	arg01, arg03
10e3c     18 96 62 FD | 	getqx	arg03
10e40     4B BB 02 F1 | 	add	local11, arg03
10e44     58 BB 02 F1 | 	add	local11, local06
10e48     FC 00 B1 FD | 	call	#_pspeek
10e4c     5D 7B 42 FC | 	wrbyte	result1, local11
10e50     01 B6 06 F1 | 	add	local09, #1
10e54     98 FF 9F FD | 	jmp	#LR__1422
10e58                 | LR__1423
10e58     01 B2 06 F1 | 	add	local07, #1
10e5c     7C FF 9F FD | 	jmp	#LR__1421
10e60                 | LR__1424
10e60     53 BB 02 F6 | 	mov	local11, local01
10e64     02 BA 66 F0 | 	shl	local11, #2
10e68     32 B9 02 F6 | 	mov	local10, objptr
10e6c     54 00 00 FF 
10e70     30 B8 06 F1 | 	add	local10, ##43056
10e74     5C BB 02 F1 | 	add	local11, local10
10e78     5D 95 02 FB | 	rdlong	arg02, local11
10e7c     53 93 02 F6 | 	mov	arg01, local01
10e80     30 0E B1 FD | 	call	#_hg010b_spin2_setspriteptr
10e84     53 93 02 F6 | 	mov	arg01, local01
10e88     56 95 02 F6 | 	mov	arg02, local04
10e8c     57 97 02 F6 | 	mov	arg03, local05
10e90     AC 0E B1 FD | 	call	#_hg010b_spin2_setspritesize
10e94     E7 F0 03 F6 | 	mov	ptra, fp
10e98     F2 00 A0 FD | 	call	#popregs_
10e9c                 | _do_defsprite_ret
10e9c     2D 00 64 FD | 	ret
10ea0                 | 
10ea0                 | ' 
10ea0                 | ' '-------------------- deg
10ea0                 | ' 
10ea0                 | ' sub do_deg
10ea0                 | _do_deg
10ea0     54 00 00 FF 
10ea4     84 64 06 F1 | 	add	objptr, ##43140
10ea8     7D 47 9E FF 
10eac     32 6B 68 FC | 	wrlong	##1016003125, objptr
10eb0     04 64 06 F1 | 	add	objptr, #4
10eb4     97 32 A1 FF 
10eb8     32 C3 69 FC | 	wrlong	##1113927393, objptr
10ebc     54 00 00 FF 
10ec0     88 64 86 F1 | 	sub	objptr, ##43144
10ec4                 | _do_deg_ret
10ec4     2D 00 64 FD | 	ret
10ec8                 | 
10ec8                 | ' 
10ec8                 | ' '-------------------- delete
10ec8                 | ' 
10ec8                 | ' sub do_delete
10ec8                 | _do_delete
10ec8     05 CA 05 F6 | 	mov	COUNT_, #5
10ecc     E8 00 A0 FD | 	call	#pushregs_
10ed0     9C C7 BF FD | 	call	#_pop
10ed4     3E 99 02 F6 | 	mov	arg04, result2
10ed8     3F 97 02 F6 | 	mov	arg03, result3
10edc     3D A7 02 F6 | 	mov	local01, result1
10ee0     4C A9 02 F6 | 	mov	local02, arg04
10ee4     4B AB 02 F6 | 	mov	local03, arg03
10ee8                 | ' 
10ee8                 | ' t1=pop()
10ee8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10ee8     2B AA 0E F2 | 	cmp	local03, #43 wz
10eec     10 00 90 5D |  if_ne	jmp	#LR__1430
10ef0     53 93 02 F6 | 	mov	arg01, local01
10ef4     E8 C8 BF FD | 	call	#_convertstring
10ef8     3D A7 02 F6 | 	mov	local01, result1
10efc     1F AA 06 F6 | 	mov	local03, #31
10f00                 | LR__1430
10f00                 | ' if t1.result_type<>result_string then printerror(15): return
10f00     1F AA 0E F2 | 	cmp	local03, #31 wz
10f04     10 00 90 AD |  if_e	jmp	#LR__1431
10f08     0F 92 06 F6 | 	mov	arg01, #15
10f0c     00 94 06 F6 | 	mov	arg02, #0
10f10     C0 FD B0 FD | 	call	#_printerror
10f14     E4 00 90 FD | 	jmp	#LR__1435
10f18                 | LR__1431
10f18                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10f18     4C 00 00 FF 
10f1c     38 64 06 F1 | 	add	objptr, ##38968
10f20     32 93 02 FB | 	rdlong	arg01, objptr
10f24     4C 00 00 FF 
10f28     38 64 86 F1 | 	sub	objptr, ##38968
10f2c     97 01 00 FF 
10f30     59 94 06 F6 | 	mov	arg02, ##@LR__5993
10f34     EC 3A B1 FD | 	call	#__system___string_cmp
10f38     00 7A 0E F2 | 	cmp	result1, #0 wz
10f3c     34 00 90 AD |  if_e	jmp	#LR__1432
10f40     4C 00 00 FF 
10f44     38 64 06 F1 | 	add	objptr, ##38968
10f48     32 93 02 FB | 	rdlong	arg01, objptr
10f4c     4C 00 00 FF 
10f50     38 64 86 F1 | 	sub	objptr, ##38968
10f54     97 01 00 FF 
10f58     5B 94 06 F6 | 	mov	arg02, ##@LR__5994
10f5c     F8 3A B1 FD | 	call	#__system___string_concat
10f60     3D 93 02 F6 | 	mov	arg01, result1
10f64     53 95 02 F6 | 	mov	arg02, local01
10f68     EC 3A B1 FD | 	call	#__system___string_concat
10f6c     3D AD 02 F6 | 	mov	local04, result1
10f70     14 00 90 FD | 	jmp	#LR__1433
10f74                 | LR__1432
10f74     97 01 00 FF 
10f78     5D 92 06 F6 | 	mov	arg01, ##@LR__5995
10f7c     53 95 02 F6 | 	mov	arg02, local01
10f80     D4 3A B1 FD | 	call	#__system___string_concat
10f84     3D AD 02 F6 | 	mov	local04, result1
10f88                 | LR__1433
10f88     56 93 02 F6 | 	mov	arg01, local04
10f8c     64 5A B1 FD | 	call	#__system___remove
10f90     20 68 06 F1 | 	add	ptr___system__dat__, #32
10f94     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
10f98     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
10f9c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
10fa0     3D AF 0A F6 | 	mov	local05, result1 wz
10fa4                 | ' kill filename$
10fa4                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10fa4     54 00 90 AD |  if_e	jmp	#LR__1434
10fa8     00 92 06 F6 | 	mov	arg01, #0
10fac     D0 8F B1 FD | 	call	#__system___getiolock_0622
10fb0     3D 93 02 F6 | 	mov	arg01, result1
10fb4     44 3A B1 FD | 	call	#__system___lockmem
10fb8     97 01 00 FF 
10fbc     5F 94 06 F6 | 	mov	arg02, ##@LR__5996
10fc0     00 92 06 F6 | 	mov	arg01, #0
10fc4     00 96 06 F6 | 	mov	arg03, #0
10fc8     24 47 B1 FD | 	call	#__system___basic_print_string
10fcc     00 92 06 F6 | 	mov	arg01, #0
10fd0     57 95 02 F6 | 	mov	arg02, local05
10fd4     00 96 06 F6 | 	mov	arg03, #0
10fd8     0A 98 06 F6 | 	mov	arg04, #10
10fdc     54 47 B1 FD | 	call	#__system___basic_print_integer
10fe0     00 92 06 F6 | 	mov	arg01, #0
10fe4     0A 94 06 F6 | 	mov	arg02, #10
10fe8     00 96 06 F6 | 	mov	arg03, #0
10fec     A8 46 B1 FD | 	call	#__system___basic_print_char
10ff0     00 92 06 F6 | 	mov	arg01, #0
10ff4     88 8F B1 FD | 	call	#__system___getiolock_0622
10ff8     3D 01 68 FC | 	wrlong	#0, result1
10ffc                 | LR__1434
10ffc                 | LR__1435
10ffc     E7 F0 03 F6 | 	mov	ptra, fp
11000     F2 00 A0 FD | 	call	#popregs_
11004                 | _do_delete_ret
11004     2D 00 64 FD | 	ret
11008                 | 
11008                 | ' 
11008                 | ' '-------------------- dir
11008                 | ' 
11008                 | ' sub do_dir
11008                 | _do_dir
11008     13 CA 05 F6 | 	mov	COUNT_, #19
1100c     E8 00 A0 FD | 	call	#pushregs_
11010     01 00 00 FF 
11014     38 F0 07 F1 | 	add	ptra, ##568
11018                 | ' 
11018                 | ' print "Current directory: "; currentdir$ 
11018     00 92 06 F6 | 	mov	arg01, #0
1101c     60 8F B1 FD | 	call	#__system___getiolock_0622
11020     3D 93 02 F6 | 	mov	arg01, result1
11024     D4 39 B1 FD | 	call	#__system___lockmem
11028     97 01 00 FF 
1102c     97 94 06 F6 | 	mov	arg02, ##@LR__5997
11030     00 92 06 F6 | 	mov	arg01, #0
11034     00 96 06 F6 | 	mov	arg03, #0
11038     B4 46 B1 FD | 	call	#__system___basic_print_string
1103c     4C 00 00 FF 
11040     38 64 06 F1 | 	add	objptr, ##38968
11044     32 95 02 FB | 	rdlong	arg02, objptr
11048     4C 00 00 FF 
1104c     38 64 86 F1 | 	sub	objptr, ##38968
11050     00 92 06 F6 | 	mov	arg01, #0
11054     00 96 06 F6 | 	mov	arg03, #0
11058     94 46 B1 FD | 	call	#__system___basic_print_string
1105c     00 92 06 F6 | 	mov	arg01, #0
11060     0A 94 06 F6 | 	mov	arg02, #10
11064     00 96 06 F6 | 	mov	arg03, #0
11068     2C 46 B1 FD | 	call	#__system___basic_print_char
1106c     01 A6 06 F6 | 	mov	local01, #1
11070     00 92 06 F6 | 	mov	arg01, #0
11074     08 8F B1 FD | 	call	#__system___getiolock_0622
11078     3D 01 68 FC | 	wrlong	#0, result1
1107c     00 A8 06 F6 | 	mov	local02, #0
11080     00 AA 06 F6 | 	mov	local03, #0
11084                 | ' px=0
11084                 | ' for i=0 to 127: filelist(i)="" : next i
11084     00 AC 06 F6 | 	mov	local04, #0
11088     1C CE 05 F1 | 	add	fp, #28
1108c     D7 12 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
11090                 | LR__1440
11090     56 AF 02 F6 | 	mov	local05, local04
11094     02 AE 66 F0 | 	shl	local05, #2
11098     E7 AE 02 F1 | 	add	local05, fp
1109c     97 01 00 FF 
110a0     AB B0 06 F6 | 	mov	local06, ##@LR__5998
110a4     57 B1 62 FC | 	wrlong	local06, local05
110a8     01 AC 06 F1 | 	add	local04, #1
110ac     80 AC 56 F2 | 	cmps	local04, #128 wc
110b0     DC FF 9F CD |  if_b	jmp	#LR__1440
110b4                 | LR__1441
110b4     1C CE 85 F1 | 	sub	fp, #28
110b8     97 01 00 FF 
110bc     AC 92 06 F6 | 	mov	arg01, ##@LR__5999
110c0     10 94 06 F6 | 	mov	arg02, #16
110c4     70 90 B1 FD | 	call	#__system___basic_dir
110c8     3D B3 02 F6 | 	mov	local07, result1
110cc     00 B4 06 F6 | 	mov	local08, #0
110d0                 | ' filename=dir$("*", fbDirectory)
110d0                 | ' n=0
110d0                 | ' while filename <> "" andalso filename <> nil andalso n<128
110d0                 | LR__1442
110d0     97 01 00 FF 
110d4     AE B6 06 F6 | 	mov	local09, ##@LR__6000
110d8     59 93 02 F6 | 	mov	arg01, local07
110dc     5B 95 02 F6 | 	mov	arg02, local09
110e0     40 39 B1 FD | 	call	#__system___string_cmp
110e4     00 7A 0E F2 | 	cmp	result1, #0 wz
110e8     68 00 90 AD |  if_e	jmp	#LR__1443
110ec     00 B6 06 F6 | 	mov	local09, #0
110f0     59 93 02 F6 | 	mov	arg01, local07
110f4     00 94 06 F6 | 	mov	arg02, #0
110f8     28 39 B1 FD | 	call	#__system___string_cmp
110fc     00 7A 0E F2 | 	cmp	result1, #0 wz
11100     50 00 90 AD |  if_e	jmp	#LR__1443
11104     80 B4 56 F2 | 	cmps	local08, #128 wc
11108     48 00 90 3D |  if_ae	jmp	#LR__1443
1110c     97 01 00 FF 
11110     AF 92 06 F6 | 	mov	arg01, ##@LR__6001
11114     59 95 02 F6 | 	mov	arg02, local07
11118     3C 39 B1 FD | 	call	#__system___string_concat
1111c     3D B3 02 F6 | 	mov	local07, result1
11120     5A AF 02 F6 | 	mov	local05, local08
11124     02 AE 66 F0 | 	shl	local05, #2
11128     E7 B6 02 F6 | 	mov	local09, fp
1112c     1C B6 06 F1 | 	add	local09, #28
11130     5B AF 02 F1 | 	add	local05, local09
11134     57 B3 62 FC | 	wrlong	local07, local05
11138     01 B4 06 F1 | 	add	local08, #1
1113c     00 AE 06 F6 | 	mov	local05, #0
11140     00 92 06 F6 | 	mov	arg01, #0
11144     00 94 06 F6 | 	mov	arg02, #0
11148     EC 8F B1 FD | 	call	#__system___basic_dir
1114c     3D B3 02 F6 | 	mov	local07, result1
11150     7C FF 9F FD | 	jmp	#LR__1442
11154                 | LR__1443
11154                 | ' for i=0 to n-1			' now sort this
11154     00 AC 06 F6 | 	mov	local04, #0
11158     5A B9 02 F6 | 	mov	local10, local08
1115c                 | LR__1444
1115c     5C AD 52 F2 | 	cmps	local04, local10 wc
11160     DC 00 90 3D |  if_ae	jmp	#LR__1448
11164     00 BA 06 F6 | 	mov	local11, #0
11168                 | '   swapped=false
11168                 | '   for j=0 to n-i-2
11168     00 BC 06 F6 | 	mov	local12, #0
1116c     5A BF 02 F6 | 	mov	local13, local08
11170     56 BF 82 F1 | 	sub	local13, local04
11174     01 BE 86 F1 | 	sub	local13, #1
11178                 | LR__1445
11178     5F BD 52 F2 | 	cmps	local12, local13 wc
1117c     B0 00 90 3D |  if_ae	jmp	#LR__1447
11180                 | '     if filelist(j) > filelist(j+1) then
11180     5E B7 02 F6 | 	mov	local09, local12
11184     02 B6 66 F0 | 	shl	local09, #2
11188     1C CE 05 F1 | 	add	fp, #28
1118c     E7 B6 02 F1 | 	add	local09, fp
11190     5B 93 02 FB | 	rdlong	arg01, local09
11194     5E B7 02 F6 | 	mov	local09, local12
11198     01 B6 06 F1 | 	add	local09, #1
1119c     5B B1 02 F6 | 	mov	local06, local09
111a0     02 B0 66 F0 | 	shl	local06, #2
111a4     E7 A6 02 F6 | 	mov	local01, fp
111a8     E7 B0 02 F1 | 	add	local06, fp
111ac     58 AF 02 FB | 	rdlong	local05, local06
111b0     57 95 02 F6 | 	mov	arg02, local05
111b4     1C CE 85 F1 | 	sub	fp, #28
111b8     68 38 B1 FD | 	call	#__system___string_cmp
111bc     01 7A 56 F2 | 	cmps	result1, #1 wc
111c0     64 00 90 CD |  if_b	jmp	#LR__1446
111c4     5E B7 02 F6 | 	mov	local09, local12
111c8     01 B6 06 F1 | 	add	local09, #1
111cc     02 B6 66 F0 | 	shl	local09, #2
111d0     1C CE 05 F1 | 	add	fp, #28
111d4     E7 B6 02 F1 | 	add	local09, fp
111d8     5B BB 02 FB | 	rdlong	local11, local09
111dc     5E B1 02 F6 | 	mov	local06, local12
111e0     02 B0 66 F0 | 	shl	local06, #2
111e4     E7 B0 02 F1 | 	add	local06, fp
111e8     58 AF 02 FB | 	rdlong	local05, local06
111ec     5E B7 02 F6 | 	mov	local09, local12
111f0     5B B1 02 F6 | 	mov	local06, local09
111f4     02 B0 66 F0 | 	shl	local06, #2
111f8     E7 A6 02 F6 | 	mov	local01, fp
111fc     E7 B0 02 F1 | 	add	local06, fp
11200     58 BB 62 FC | 	wrlong	local11, local06
11204     5E A9 02 F6 | 	mov	local02, local12
11208     01 A8 06 F1 | 	add	local02, #1
1120c     54 C1 02 F6 | 	mov	local14, local02
11210     02 C0 66 F0 | 	shl	local14, #2
11214     E7 C2 02 F6 | 	mov	local15, fp
11218     E7 C0 02 F1 | 	add	local14, fp
1121c     60 AF 62 FC | 	wrlong	local05, local14
11220     01 BA 66 F6 | 	neg	local11, #1
11224     1C CE 85 F1 | 	sub	fp, #28
11228                 | LR__1446
11228     01 BC 06 F1 | 	add	local12, #1
1122c     48 FF 9F FD | 	jmp	#LR__1445
11230                 | LR__1447
11230                 | ' if not swapped then exit for
11230     5D C5 22 F6 | 	not	local16, local11
11234     00 C4 0E F2 | 	cmp	local16, #0 wz
11238     01 AC 06 A1 |  if_e	add	local04, #1
1123c     1C FF 9F AD |  if_e	jmp	#LR__1444
11240                 | LR__1448
11240                 | ' for i=0 to n-1
11240     00 AC 06 F6 | 	mov	local04, #0
11244     5A C7 02 F6 | 	mov	local17, local08
11248                 | LR__1449
11248     63 AD 52 F2 | 	cmps	local04, local17 wc
1124c     90 00 90 3D |  if_ae	jmp	#LR__1451
11250                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11250     00 92 06 F6 | 	mov	arg01, #0
11254     28 8D B1 FD | 	call	#__system___getiolock_0622
11258     3D 93 02 F6 | 	mov	arg01, result1
1125c     9C 37 B1 FD | 	call	#__system___lockmem
11260     56 A9 02 F6 | 	mov	local02, local04
11264     02 A8 66 F0 | 	shl	local02, #2
11268     E7 C0 02 F6 | 	mov	local14, fp
1126c     1C C0 06 F1 | 	add	local14, #28
11270     60 A9 02 F1 | 	add	local02, local14
11274     54 95 02 FB | 	rdlong	arg02, local02
11278     00 A6 06 F6 | 	mov	local01, #0
1127c     00 92 06 F6 | 	mov	arg01, #0
11280     00 96 06 F6 | 	mov	arg03, #0
11284     68 44 B1 FD | 	call	#__system___basic_print_string
11288     00 92 06 F6 | 	mov	arg01, #0
1128c     F0 8C B1 FD | 	call	#__system___getiolock_0622
11290     3D 01 68 FC | 	wrlong	#0, result1
11294     40 AA 06 F1 | 	add	local03, #64
11298     55 93 02 F6 | 	mov	arg01, local03
1129c     38 17 B1 FD | 	call	#_hg010b_spin2_setcursorx
112a0     00 AB 56 F2 | 	cmps	local03, #256 wc
112a4     30 00 90 CD |  if_b	jmp	#LR__1450
112a8     00 AA 06 F6 | 	mov	local03, #0
112ac     00 92 06 F6 | 	mov	arg01, #0
112b0     CC 8C B1 FD | 	call	#__system___getiolock_0622
112b4     3D 93 02 F6 | 	mov	arg01, result1
112b8     40 37 B1 FD | 	call	#__system___lockmem
112bc     00 92 06 F6 | 	mov	arg01, #0
112c0     0A 94 06 F6 | 	mov	arg02, #10
112c4     00 96 06 F6 | 	mov	arg03, #0
112c8     CC 43 B1 FD | 	call	#__system___basic_print_char
112cc     00 92 06 F6 | 	mov	arg01, #0
112d0     AC 8C B1 FD | 	call	#__system___getiolock_0622
112d4     3D 01 68 FC | 	wrlong	#0, result1
112d8                 | LR__1450
112d8     01 AC 06 F1 | 	add	local04, #1
112dc     68 FF 9F FD | 	jmp	#LR__1449
112e0                 | LR__1451
112e0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
112e0     80 B4 56 F2 | 	cmps	local08, #128 wc
112e4     44 00 90 CD |  if_b	jmp	#LR__1452
112e8     00 92 06 F6 | 	mov	arg01, #0
112ec     90 8C B1 FD | 	call	#__system___getiolock_0622
112f0     3D 93 02 F6 | 	mov	arg01, result1
112f4     04 37 B1 FD | 	call	#__system___lockmem
112f8     97 01 00 FF 
112fc     B6 94 06 F6 | 	mov	arg02, ##@LR__6002
11300     00 92 06 F6 | 	mov	arg01, #0
11304     00 96 06 F6 | 	mov	arg03, #0
11308     E4 43 B1 FD | 	call	#__system___basic_print_string
1130c     00 92 06 F6 | 	mov	arg01, #0
11310     0A 94 06 F6 | 	mov	arg02, #10
11314     00 96 06 F6 | 	mov	arg03, #0
11318     7C 43 B1 FD | 	call	#__system___basic_print_char
1131c     00 92 06 F6 | 	mov	arg01, #0
11320     5C 8C B1 FD | 	call	#__system___getiolock_0622
11324     3D 01 68 FC | 	wrlong	#0, result1
11328     00 A6 06 F6 | 	mov	local01, #0
1132c                 | LR__1452
1132c                 | ' print
1132c     00 92 06 F6 | 	mov	arg01, #0
11330     4C 8C B1 FD | 	call	#__system___getiolock_0622
11334     3D 93 02 F6 | 	mov	arg01, result1
11338     C0 36 B1 FD | 	call	#__system___lockmem
1133c     00 92 06 F6 | 	mov	arg01, #0
11340     0A 94 06 F6 | 	mov	arg02, #10
11344     00 96 06 F6 | 	mov	arg03, #0
11348     4C 43 B1 FD | 	call	#__system___basic_print_char
1134c     00 92 06 F6 | 	mov	arg01, #0
11350     2C 8C B1 FD | 	call	#__system___getiolock_0622
11354     3D 01 68 FC | 	wrlong	#0, result1
11358     00 B0 06 F6 | 	mov	local06, #0
1135c     00 B4 06 F6 | 	mov	local08, #0
11360     00 AA 06 F6 | 	mov	local03, #0
11364                 | ' return cursor_y
11364     3E 64 06 F1 | 	add	objptr, #62
11368     32 C9 C2 FA | 	rdbyte	local18, objptr
1136c     3E 64 86 F1 | 	sub	objptr, #62
11370     97 01 00 FF 
11374     E8 92 06 F6 | 	mov	arg01, ##@LR__6003
11378     21 94 06 F6 | 	mov	arg02, #33
1137c     B8 8D B1 FD | 	call	#__system___basic_dir
11380     3D B3 02 F6 | 	mov	local07, result1
11384                 | ' n=0
11384                 | ' px=0: py=v.getcursory()
11384                 | ' filename = dir$("*", fbNormal )   
11384                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11384                 | LR__1453
11384     97 01 00 FF 
11388     EA B6 06 F6 | 	mov	local09, ##@LR__6004
1138c     59 93 02 F6 | 	mov	arg01, local07
11390     5B 95 02 F6 | 	mov	arg02, local09
11394     8C 36 B1 FD | 	call	#__system___string_cmp
11398     00 7A 0E F2 | 	cmp	result1, #0 wz
1139c     54 00 90 AD |  if_e	jmp	#LR__1454
113a0     00 B6 06 F6 | 	mov	local09, #0
113a4     59 93 02 F6 | 	mov	arg01, local07
113a8     00 94 06 F6 | 	mov	arg02, #0
113ac     74 36 B1 FD | 	call	#__system___string_cmp
113b0     00 7A 0E F2 | 	cmp	result1, #0 wz
113b4     3C 00 90 AD |  if_e	jmp	#LR__1454
113b8     80 B4 56 F2 | 	cmps	local08, #128 wc
113bc     34 00 90 3D |  if_ae	jmp	#LR__1454
113c0     5A AF 02 F6 | 	mov	local05, local08
113c4     02 AE 66 F0 | 	shl	local05, #2
113c8     E7 B6 02 F6 | 	mov	local09, fp
113cc     1C B6 06 F1 | 	add	local09, #28
113d0     5B AF 02 F1 | 	add	local05, local09
113d4     57 B3 62 FC | 	wrlong	local07, local05
113d8     01 B4 06 F1 | 	add	local08, #1
113dc     00 AE 06 F6 | 	mov	local05, #0
113e0     00 92 06 F6 | 	mov	arg01, #0
113e4     00 94 06 F6 | 	mov	arg02, #0
113e8     4C 8D B1 FD | 	call	#__system___basic_dir
113ec     3D B3 02 F6 | 	mov	local07, result1
113f0     90 FF 9F FD | 	jmp	#LR__1453
113f4                 | LR__1454
113f4                 | ' for i =0 to n-1
113f4     00 AC 06 F6 | 	mov	local04, #0
113f8                 | LR__1455
113f8     5A AD 52 F2 | 	cmps	local04, local08 wc
113fc     D8 00 90 3D |  if_ae	jmp	#LR__1459
11400     00 BA 06 F6 | 	mov	local11, #0
11404                 | '   swapped=false
11404                 | '   for j=0 to n-i-2
11404     00 BC 06 F6 | 	mov	local12, #0
11408     5A CB 02 F6 | 	mov	local19, local08
1140c     56 CB 82 F1 | 	sub	local19, local04
11410     01 CA 86 F1 | 	sub	local19, #1
11414                 | LR__1456
11414     65 BD 52 F2 | 	cmps	local12, local19 wc
11418     AC 00 90 3D |  if_ae	jmp	#LR__1458
1141c                 | '     if filelist(j) > filelist(j+1) then
1141c     5E B7 02 F6 | 	mov	local09, local12
11420     02 B6 66 F0 | 	shl	local09, #2
11424     1C CE 05 F1 | 	add	fp, #28
11428     E7 B6 02 F1 | 	add	local09, fp
1142c     5B 93 02 FB | 	rdlong	arg01, local09
11430     5E B7 02 F6 | 	mov	local09, local12
11434     01 B6 06 F1 | 	add	local09, #1
11438     5B B1 02 F6 | 	mov	local06, local09
1143c     02 B0 66 F0 | 	shl	local06, #2
11440     E7 A6 02 F6 | 	mov	local01, fp
11444     E7 B0 02 F1 | 	add	local06, fp
11448     58 AF 02 FB | 	rdlong	local05, local06
1144c     57 95 02 F6 | 	mov	arg02, local05
11450     1C CE 85 F1 | 	sub	fp, #28
11454     CC 35 B1 FD | 	call	#__system___string_cmp
11458     01 7A 56 F2 | 	cmps	result1, #1 wc
1145c     60 00 90 CD |  if_b	jmp	#LR__1457
11460     5E B7 02 F6 | 	mov	local09, local12
11464     01 B6 06 F1 | 	add	local09, #1
11468     02 B6 66 F0 | 	shl	local09, #2
1146c     1C CE 05 F1 | 	add	fp, #28
11470     E7 B6 02 F1 | 	add	local09, fp
11474     5B C5 02 FB | 	rdlong	local16, local09
11478     5E B1 02 F6 | 	mov	local06, local12
1147c     02 B0 66 F0 | 	shl	local06, #2
11480     E7 B0 02 F1 | 	add	local06, fp
11484     58 AF 02 FB | 	rdlong	local05, local06
11488     5E B7 02 F6 | 	mov	local09, local12
1148c     5B B1 02 F6 | 	mov	local06, local09
11490     02 B0 66 F0 | 	shl	local06, #2
11494     E7 A6 02 F6 | 	mov	local01, fp
11498     E7 B0 02 F1 | 	add	local06, fp
1149c     58 C5 62 FC | 	wrlong	local16, local06
114a0     5E C1 02 F6 | 	mov	local14, local12
114a4     01 C0 06 F1 | 	add	local14, #1
114a8     02 C0 66 F0 | 	shl	local14, #2
114ac     E7 C2 02 F6 | 	mov	local15, fp
114b0     E7 C0 02 F1 | 	add	local14, fp
114b4     60 AF 62 FC | 	wrlong	local05, local14
114b8     01 BA 66 F6 | 	neg	local11, #1
114bc     1C CE 85 F1 | 	sub	fp, #28
114c0                 | LR__1457
114c0     01 BC 06 F1 | 	add	local12, #1
114c4     4C FF 9F FD | 	jmp	#LR__1456
114c8                 | LR__1458
114c8                 | ' if not swapped then exit for
114c8     5D C5 22 F6 | 	not	local16, local11
114cc     00 C4 0E F2 | 	cmp	local16, #0 wz
114d0     01 AC 06 A1 |  if_e	add	local04, #1
114d4     20 FF 9F AD |  if_e	jmp	#LR__1455
114d8                 | LR__1459
114d8                 | ' for i=0 to n-1
114d8     00 AC 06 F6 | 	mov	local04, #0
114dc                 | LR__1460
114dc     5A AD 52 F2 | 	cmps	local04, local08 wc
114e0     8C 00 90 3D |  if_ae	jmp	#LR__1462
114e4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
114e4     00 92 06 F6 | 	mov	arg01, #0
114e8     94 8A B1 FD | 	call	#__system___getiolock_0622
114ec     3D 93 02 F6 | 	mov	arg01, result1
114f0     08 35 B1 FD | 	call	#__system___lockmem
114f4     56 A9 02 F6 | 	mov	local02, local04
114f8     02 A8 66 F0 | 	shl	local02, #2
114fc     E7 C0 02 F6 | 	mov	local14, fp
11500     1C C0 06 F1 | 	add	local14, #28
11504     60 A9 02 F1 | 	add	local02, local14
11508     54 95 02 FB | 	rdlong	arg02, local02
1150c     00 92 06 F6 | 	mov	arg01, #0
11510     00 96 06 F6 | 	mov	arg03, #0
11514     D8 41 B1 FD | 	call	#__system___basic_print_string
11518     00 92 06 F6 | 	mov	arg01, #0
1151c     60 8A B1 FD | 	call	#__system___getiolock_0622
11520     3D 01 68 FC | 	wrlong	#0, result1
11524     40 AA 06 F1 | 	add	local03, #64
11528     55 93 02 F6 | 	mov	arg01, local03
1152c     A8 14 B1 FD | 	call	#_hg010b_spin2_setcursorx
11530     00 AB 56 F2 | 	cmps	local03, #256 wc
11534     30 00 90 CD |  if_b	jmp	#LR__1461
11538     00 AA 06 F6 | 	mov	local03, #0
1153c     00 92 06 F6 | 	mov	arg01, #0
11540     3C 8A B1 FD | 	call	#__system___getiolock_0622
11544     3D 93 02 F6 | 	mov	arg01, result1
11548     B0 34 B1 FD | 	call	#__system___lockmem
1154c     00 92 06 F6 | 	mov	arg01, #0
11550     0A 94 06 F6 | 	mov	arg02, #10
11554     00 96 06 F6 | 	mov	arg03, #0
11558     3C 41 B1 FD | 	call	#__system___basic_print_char
1155c     00 92 06 F6 | 	mov	arg01, #0
11560     1C 8A B1 FD | 	call	#__system___getiolock_0622
11564     3D 01 68 FC | 	wrlong	#0, result1
11568                 | LR__1461
11568     01 AC 06 F1 | 	add	local04, #1
1156c     6C FF 9F FD | 	jmp	#LR__1460
11570                 | LR__1462
11570                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11570     80 B4 56 F2 | 	cmps	local08, #128 wc
11574     40 00 90 CD |  if_b	jmp	#LR__1463
11578     00 92 06 F6 | 	mov	arg01, #0
1157c     00 8A B1 FD | 	call	#__system___getiolock_0622
11580     3D 93 02 F6 | 	mov	arg01, result1
11584     74 34 B1 FD | 	call	#__system___lockmem
11588     97 01 00 FF 
1158c     EB 94 06 F6 | 	mov	arg02, ##@LR__6005
11590     00 92 06 F6 | 	mov	arg01, #0
11594     00 96 06 F6 | 	mov	arg03, #0
11598     54 41 B1 FD | 	call	#__system___basic_print_string
1159c     00 92 06 F6 | 	mov	arg01, #0
115a0     0A 94 06 F6 | 	mov	arg02, #10
115a4     00 96 06 F6 | 	mov	arg03, #0
115a8     EC 40 B1 FD | 	call	#__system___basic_print_char
115ac     00 92 06 F6 | 	mov	arg01, #0
115b0     CC 89 B1 FD | 	call	#__system___getiolock_0622
115b4     3D 01 68 FC | 	wrlong	#0, result1
115b8                 | LR__1463
115b8                 | ' print
115b8     00 92 06 F6 | 	mov	arg01, #0
115bc     C0 89 B1 FD | 	call	#__system___getiolock_0622
115c0     3D 93 02 F6 | 	mov	arg01, result1
115c4     34 34 B1 FD | 	call	#__system___lockmem
115c8     00 92 06 F6 | 	mov	arg01, #0
115cc     0A 94 06 F6 | 	mov	arg02, #10
115d0     00 96 06 F6 | 	mov	arg03, #0
115d4     C0 40 B1 FD | 	call	#__system___basic_print_char
115d8     00 92 06 F6 | 	mov	arg01, #0
115dc     A0 89 B1 FD | 	call	#__system___getiolock_0622
115e0     3D 01 68 FC | 	wrlong	#0, result1
115e4     E7 F0 03 F6 | 	mov	ptra, fp
115e8     F2 00 A0 FD | 	call	#popregs_
115ec                 | _do_dir_ret
115ec     2D 00 64 FD | 	ret
115f0                 | 
115f0                 | ' 
115f0                 | ' '-------------------- dpeek
115f0                 | ' 
115f0                 | ' sub do_dpeek
115f0                 | _do_dpeek
115f0     01 CA 05 F6 | 	mov	COUNT_, #1
115f4     E8 00 A0 FD | 	call	#pushregs_
115f8     14 F0 07 F1 | 	add	ptra, #20
115fc     70 C0 BF FD | 	call	#_pop
11600     E7 7A 62 FC | 	wrlong	result1, fp
11604     04 CE 05 F1 | 	add	fp, #4
11608     E7 7C 62 FC | 	wrlong	result2, fp
1160c     04 CE 05 F1 | 	add	fp, #4
11610     E7 7E 62 FC | 	wrlong	result3, fp
11614     08 CE 85 F1 | 	sub	fp, #8
11618     E7 92 02 F6 | 	mov	arg01, fp
1161c     2C C2 BF FD | 	call	#_converttoint
11620     3D 93 02 F6 | 	mov	arg01, result1
11624                 | ' 
11624                 | ' t1=pop()
11624                 | ' a=converttoint(t1)
11624                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11624     00 04 00 FF 
11628     00 92 16 F2 | 	cmp	arg01, ##524288 wc
1162c     49 A7 E2 CA |  if_b	rdword	local01, arg01
11630     08 00 90 CD |  if_b	jmp	#LR__1470
11634     A0 F9 B0 FD | 	call	#_psdpeek
11638     3D A7 02 F6 | 	mov	local01, result1
1163c                 | LR__1470
1163c     08 CE 05 F1 | 	add	fp, #8
11640     E7 3A 68 FC | 	wrlong	#29, fp
11644     08 CE 85 F1 | 	sub	fp, #8
11648     E7 A6 62 FC | 	wrlong	local01, fp
1164c     E7 92 02 F6 | 	mov	arg01, fp
11650     AC C0 BF FD | 	call	#_push
11654     E7 F0 03 F6 | 	mov	ptra, fp
11658     F2 00 A0 FD | 	call	#popregs_
1165c                 | _do_dpeek_ret
1165c     2D 00 64 FD | 	ret
11660                 | 
11660                 | ' 
11660                 | ' '-------------------- dpoke
11660                 | ' 
11660                 | ' sub do_dpoke
11660                 | _do_dpoke
11660     02 CA 05 F6 | 	mov	COUNT_, #2
11664     E8 00 A0 FD | 	call	#pushregs_
11668     20 F0 07 F1 | 	add	ptra, #32
1166c     00 C0 BF FD | 	call	#_pop
11670     3D 95 02 F6 | 	mov	arg02, result1
11674     3E 93 02 F6 | 	mov	arg01, result2
11678     3F A7 02 F6 | 	mov	local01, result3
1167c     E7 94 62 FC | 	wrlong	arg02, fp
11680     04 CE 05 F1 | 	add	fp, #4
11684     E7 92 62 FC | 	wrlong	arg01, fp
11688     04 CE 05 F1 | 	add	fp, #4
1168c     E7 A6 62 FC | 	wrlong	local01, fp
11690     08 CE 85 F1 | 	sub	fp, #8
11694     D8 BF BF FD | 	call	#_pop
11698     3F A7 02 F6 | 	mov	local01, result3
1169c     0C CE 05 F1 | 	add	fp, #12
116a0     E7 7A 62 FC | 	wrlong	result1, fp
116a4     04 CE 05 F1 | 	add	fp, #4
116a8     E7 7C 62 FC | 	wrlong	result2, fp
116ac     04 CE 05 F1 | 	add	fp, #4
116b0     E7 A6 62 FC | 	wrlong	local01, fp
116b4     08 CE 85 F1 | 	sub	fp, #8
116b8     E7 92 02 F6 | 	mov	arg01, fp
116bc     0C CE 85 F1 | 	sub	fp, #12
116c0     88 C1 BF FD | 	call	#_converttoint
116c4     3D A7 02 F6 | 	mov	local01, result1
116c8     E7 92 02 F6 | 	mov	arg01, fp
116cc     7C C1 BF FD | 	call	#_converttoint
116d0     3D A9 02 F6 | 	mov	local02, result1
116d4                 | ' 
116d4                 | ' t1=pop() 'value
116d4                 | ' t2=pop() 
116d4                 | ' a=converttoint(t2) : v=converttoint(t1)
116d4                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
116d4     00 04 00 FF 
116d8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
116dc     53 A9 52 CC |  if_b	wrword	local02, local01
116e0     53 93 02 36 |  if_ae	mov	arg01, local01
116e4     54 95 02 36 |  if_ae	mov	arg02, local02
116e8     CC F7 B0 3D |  if_ae	call	#_psdpoke
116ec     E7 F0 03 F6 | 	mov	ptra, fp
116f0     F2 00 A0 FD | 	call	#popregs_
116f4                 | _do_dpoke_ret
116f4     2D 00 64 FD | 	ret
116f8                 | 
116f8                 | ' '-------------------- draw
116f8                 | ' 
116f8                 | ' sub do_draw
116f8                 | _do_draw
116f8     02 CA 05 F6 | 	mov	COUNT_, #2
116fc     E8 00 A0 FD | 	call	#pushregs_
11700     20 F0 07 F1 | 	add	ptra, #32
11704     68 BF BF FD | 	call	#_pop
11708     3D 99 02 F6 | 	mov	arg04, result1
1170c     3E 97 02 F6 | 	mov	arg03, result2
11710     3F 9B 02 F6 | 	mov	arg05, result3
11714     0C CE 05 F1 | 	add	fp, #12
11718     E7 98 62 FC | 	wrlong	arg04, fp
1171c     04 CE 05 F1 | 	add	fp, #4
11720     E7 96 62 FC | 	wrlong	arg03, fp
11724     04 CE 05 F1 | 	add	fp, #4
11728     E7 9A 62 FC | 	wrlong	arg05, fp
1172c     14 CE 85 F1 | 	sub	fp, #20
11730     3C BF BF FD | 	call	#_pop
11734     3F 99 02 F6 | 	mov	arg04, result3
11738     E7 7A 62 FC | 	wrlong	result1, fp
1173c     04 CE 05 F1 | 	add	fp, #4
11740     E7 7C 62 FC | 	wrlong	result2, fp
11744     04 CE 05 F1 | 	add	fp, #4
11748     E7 98 62 FC | 	wrlong	arg04, fp
1174c     08 CE 85 F1 | 	sub	fp, #8
11750     E7 92 02 F6 | 	mov	arg01, fp
11754     F4 C0 BF FD | 	call	#_converttoint
11758     3D A7 02 F6 | 	mov	local01, result1
1175c     E7 92 02 F6 | 	mov	arg01, fp
11760     0C 92 06 F1 | 	add	arg01, #12
11764     E4 C0 BF FD | 	call	#_converttoint
11768     3D A9 02 F6 | 	mov	local02, result1
1176c     38 00 00 FF 
11770     D0 65 06 F1 | 	add	objptr, ##29136
11774     32 93 02 FB | 	rdlong	arg01, objptr
11778     04 64 06 F1 | 	add	objptr, #4
1177c     32 95 02 FB | 	rdlong	arg02, objptr
11780     08 64 86 F1 | 	sub	objptr, #8
11784     32 9B 02 FB | 	rdlong	arg05, objptr
11788     38 00 00 FF 
1178c     CC 65 86 F1 | 	sub	objptr, ##29132
11790     53 97 02 F6 | 	mov	arg03, local01
11794     54 99 02 F6 | 	mov	arg04, local02
11798     A0 08 B1 FD | 	call	#_hg010b_spin2_draw
1179c     38 00 00 FF 
117a0     D0 65 06 F1 | 	add	objptr, ##29136
117a4     32 A7 62 FC | 	wrlong	local01, objptr
117a8     04 64 06 F1 | 	add	objptr, #4
117ac     32 A9 62 FC | 	wrlong	local02, objptr
117b0     38 00 00 FF 
117b4     D4 65 86 F1 | 	sub	objptr, ##29140
117b8     E7 F0 03 F6 | 	mov	ptra, fp
117bc     F2 00 A0 FD | 	call	#popregs_
117c0                 | _do_draw_ret
117c0     2D 00 64 FD | 	ret
117c4                 | 
117c4                 | ' 
117c4                 | ' '-------------------- else
117c4                 | ' 
117c4                 | ' sub do_else
117c4                 | _do_else
117c4     4C 00 00 FF 
117c8     20 64 06 F1 | 	add	objptr, ##38944
117cc     32 81 02 FB | 	rdlong	_var01, objptr
117d0     01 80 86 F1 | 	sub	_var01, #1
117d4     04 64 06 F1 | 	add	objptr, #4
117d8     32 81 62 FC | 	wrlong	_var01, objptr
117dc     4C 00 00 FF 
117e0     24 64 86 F1 | 	sub	objptr, ##38948
117e4                 | _do_else_ret
117e4     2D 00 64 FD | 	ret
117e8                 | 
117e8                 | ' 
117e8                 | ' '-------------------- end
117e8                 | ' 
117e8                 | ' sub do_end
117e8                 | _do_end
117e8     4C 00 00 FF 
117ec     20 64 06 F1 | 	add	objptr, ##38944
117f0     32 81 02 FB | 	rdlong	_var01, objptr
117f4     01 80 86 F1 | 	sub	_var01, #1
117f8     04 64 06 F1 | 	add	objptr, #4
117fc     32 81 62 FC | 	wrlong	_var01, objptr
11800     06 00 00 FF 
11804     38 64 06 F1 | 	add	objptr, ##3128
11808     FF FF BF FF 
1180c     32 FF 6B FC | 	wrlong	##2147483647, objptr
11810     52 00 00 FF 
11814     5C 64 86 F1 | 	sub	objptr, ##42076
11818                 | _do_end_ret
11818     2D 00 64 FD | 	ret
1181c                 | 
1181c                 | ' 
1181c                 | ' '-------------------- enter
1181c                 | ' 
1181c                 | ' sub do_enter
1181c                 | _do_enter
1181c     02 00 00 FF 
11820     D2 92 06 F6 | 	mov	arg01, ##1234
11824     A4 2D B0 FD | 	call	#_do_load
11828                 | _do_enter_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' '------------------- error processing
1182c                 | ' 
1182c                 | ' sub do_error
1182c                 | _do_error
1182c     01 CA 05 F6 | 	mov	COUNT_, #1
11830     E8 00 A0 FD | 	call	#pushregs_
11834     4C 00 00 FF 
11838     24 64 06 F1 | 	add	objptr, ##38948
1183c     32 99 02 FB | 	rdlong	arg04, objptr
11840     4C 97 02 F6 | 	mov	arg03, arg04
11844     01 96 66 F0 | 	shl	arg03, #1
11848     4C 97 02 F1 | 	add	arg03, arg04
1184c     02 96 66 F0 | 	shl	arg03, #2
11850     03 00 00 FF 
11854     04 64 86 F1 | 	sub	objptr, ##1540
11858     32 97 02 F1 | 	add	arg03, objptr
1185c     4B A7 02 FB | 	rdlong	local01, arg03
11860                 | ' r=compiledline(lineptr_e).result.uresult
11860                 | ' print "Error ";r;": ";errors$(r)
11860     00 92 06 F6 | 	mov	arg01, #0
11864     49 00 00 FF 
11868     20 64 86 F1 | 	sub	objptr, ##37408
1186c     10 87 B1 FD | 	call	#__system___getiolock_0622
11870     3D 93 02 F6 | 	mov	arg01, result1
11874     84 31 B1 FD | 	call	#__system___lockmem
11878     97 01 00 FF 
1187c     1D 95 06 F6 | 	mov	arg02, ##@LR__6006
11880     00 92 06 F6 | 	mov	arg01, #0
11884     00 96 06 F6 | 	mov	arg03, #0
11888     64 3E B1 FD | 	call	#__system___basic_print_string
1188c     00 92 06 F6 | 	mov	arg01, #0
11890     53 95 02 F6 | 	mov	arg02, local01
11894     00 96 06 F6 | 	mov	arg03, #0
11898     0A 98 06 F6 | 	mov	arg04, #10
1189c     D4 3E B1 FD | 	call	#__system___basic_print_unsigned
118a0     97 01 00 FF 
118a4     24 95 06 F6 | 	mov	arg02, ##@LR__6007
118a8     00 92 06 F6 | 	mov	arg01, #0
118ac     00 96 06 F6 | 	mov	arg03, #0
118b0     3C 3E B1 FD | 	call	#__system___basic_print_string
118b4     02 A6 66 F0 | 	shl	local01, #2
118b8     32 99 02 F6 | 	mov	arg04, objptr
118bc     47 00 00 FF 
118c0     20 98 06 F1 | 	add	arg04, ##36384
118c4     4C A7 02 F1 | 	add	local01, arg04
118c8     53 95 02 FB | 	rdlong	arg02, local01
118cc     00 92 06 F6 | 	mov	arg01, #0
118d0     00 96 06 F6 | 	mov	arg03, #0
118d4     18 3E B1 FD | 	call	#__system___basic_print_string
118d8     00 92 06 F6 | 	mov	arg01, #0
118dc     0A 94 06 F6 | 	mov	arg02, #10
118e0     00 96 06 F6 | 	mov	arg03, #0
118e4     B0 3D B1 FD | 	call	#__system___basic_print_char
118e8     00 92 06 F6 | 	mov	arg01, #0
118ec     90 86 B1 FD | 	call	#__system___getiolock_0622
118f0     3D 01 68 FC | 	wrlong	#0, result1
118f4     E7 F0 03 F6 | 	mov	ptra, fp
118f8     F2 00 A0 FD | 	call	#popregs_
118fc                 | _do_error_ret
118fc     2D 00 64 FD | 	ret
11900                 | 
11900                 | ' 
11900                 | ' '-------------------- fcircle
11900                 | ' 
11900                 | ' sub do_fcircle
11900                 | _do_fcircle
11900     02 CA 05 F6 | 	mov	COUNT_, #2
11904     E8 00 A0 FD | 	call	#pushregs_
11908     24 F0 07 F1 | 	add	ptra, #36
1190c     60 BD BF FD | 	call	#_pop
11910     3D 95 02 F6 | 	mov	arg02, result1
11914     3E 99 02 F6 | 	mov	arg04, result2
11918     3F 97 02 F6 | 	mov	arg03, result3
1191c     18 CE 05 F1 | 	add	fp, #24
11920     E7 94 62 FC | 	wrlong	arg02, fp
11924     04 CE 05 F1 | 	add	fp, #4
11928     E7 98 62 FC | 	wrlong	arg04, fp
1192c     04 CE 05 F1 | 	add	fp, #4
11930     E7 96 62 FC | 	wrlong	arg03, fp
11934     20 CE 85 F1 | 	sub	fp, #32
11938     34 BD BF FD | 	call	#_pop
1193c     3D 95 02 F6 | 	mov	arg02, result1
11940     3E 99 02 F6 | 	mov	arg04, result2
11944     3F 97 02 F6 | 	mov	arg03, result3
11948     0C CE 05 F1 | 	add	fp, #12
1194c     E7 94 62 FC | 	wrlong	arg02, fp
11950     04 CE 05 F1 | 	add	fp, #4
11954     E7 98 62 FC | 	wrlong	arg04, fp
11958     04 CE 05 F1 | 	add	fp, #4
1195c     E7 96 62 FC | 	wrlong	arg03, fp
11960     14 CE 85 F1 | 	sub	fp, #20
11964     08 BD BF FD | 	call	#_pop
11968     3F 95 02 F6 | 	mov	arg02, result3
1196c     E7 7A 62 FC | 	wrlong	result1, fp
11970     04 CE 05 F1 | 	add	fp, #4
11974     E7 7C 62 FC | 	wrlong	result2, fp
11978     04 CE 05 F1 | 	add	fp, #4
1197c     E7 94 62 FC | 	wrlong	arg02, fp
11980     08 CE 85 F1 | 	sub	fp, #8
11984     E7 92 02 F6 | 	mov	arg01, fp
11988     C0 BE BF FD | 	call	#_converttoint
1198c     3D A7 02 F6 | 	mov	local01, result1
11990     E7 92 02 F6 | 	mov	arg01, fp
11994     0C 92 06 F1 | 	add	arg01, #12
11998     B0 BE BF FD | 	call	#_converttoint
1199c     3D A9 02 F6 | 	mov	local02, result1
119a0     E7 92 02 F6 | 	mov	arg01, fp
119a4     18 92 06 F1 | 	add	arg01, #24
119a8     A0 BE BF FD | 	call	#_converttoint
119ac     3D 97 02 F6 | 	mov	arg03, result1
119b0     38 00 00 FF 
119b4     CC 65 06 F1 | 	add	objptr, ##29132
119b8     32 99 02 FB | 	rdlong	arg04, objptr
119bc     38 00 00 FF 
119c0     CC 65 86 F1 | 	sub	objptr, ##29132
119c4     53 93 02 F6 | 	mov	arg01, local01
119c8     54 95 02 F6 | 	mov	arg02, local02
119cc     F0 0A B1 FD | 	call	#_hg010b_spin2_fcircle
119d0     E7 F0 03 F6 | 	mov	ptra, fp
119d4     F2 00 A0 FD | 	call	#popregs_
119d8                 | _do_fcircle_ret
119d8     2D 00 64 FD | 	ret
119dc                 | 
119dc                 | ' 
119dc                 | ' '-------------------- fill
119dc                 | ' 
119dc                 | ' sub do_fill
119dc                 | _do_fill
119dc     03 CA 05 F6 | 	mov	COUNT_, #3
119e0     E8 00 A0 FD | 	call	#pushregs_
119e4     30 F0 07 F1 | 	add	ptra, #48
119e8     84 BC BF FD | 	call	#_pop
119ec     3D 97 02 F6 | 	mov	arg03, result1
119f0     3E 95 02 F6 | 	mov	arg02, result2
119f4     3F 99 02 F6 | 	mov	arg04, result3
119f8     24 CE 05 F1 | 	add	fp, #36
119fc     E7 96 62 FC | 	wrlong	arg03, fp
11a00     04 CE 05 F1 | 	add	fp, #4
11a04     E7 94 62 FC | 	wrlong	arg02, fp
11a08     04 CE 05 F1 | 	add	fp, #4
11a0c     E7 98 62 FC | 	wrlong	arg04, fp
11a10     2C CE 85 F1 | 	sub	fp, #44
11a14     58 BC BF FD | 	call	#_pop
11a18     3D 97 02 F6 | 	mov	arg03, result1
11a1c     3E 95 02 F6 | 	mov	arg02, result2
11a20     3F 99 02 F6 | 	mov	arg04, result3
11a24     18 CE 05 F1 | 	add	fp, #24
11a28     E7 96 62 FC | 	wrlong	arg03, fp
11a2c     04 CE 05 F1 | 	add	fp, #4
11a30     E7 94 62 FC | 	wrlong	arg02, fp
11a34     04 CE 05 F1 | 	add	fp, #4
11a38     E7 98 62 FC | 	wrlong	arg04, fp
11a3c     20 CE 85 F1 | 	sub	fp, #32
11a40     2C BC BF FD | 	call	#_pop
11a44     3D 97 02 F6 | 	mov	arg03, result1
11a48     3E 95 02 F6 | 	mov	arg02, result2
11a4c     3F 99 02 F6 | 	mov	arg04, result3
11a50     0C CE 05 F1 | 	add	fp, #12
11a54     E7 96 62 FC | 	wrlong	arg03, fp
11a58     04 CE 05 F1 | 	add	fp, #4
11a5c     E7 94 62 FC | 	wrlong	arg02, fp
11a60     04 CE 05 F1 | 	add	fp, #4
11a64     E7 98 62 FC | 	wrlong	arg04, fp
11a68     14 CE 85 F1 | 	sub	fp, #20
11a6c     00 BC BF FD | 	call	#_pop
11a70     3F 97 02 F6 | 	mov	arg03, result3
11a74     E7 7A 62 FC | 	wrlong	result1, fp
11a78     04 CE 05 F1 | 	add	fp, #4
11a7c     E7 7C 62 FC | 	wrlong	result2, fp
11a80     04 CE 05 F1 | 	add	fp, #4
11a84     E7 96 62 FC | 	wrlong	arg03, fp
11a88     08 CE 85 F1 | 	sub	fp, #8
11a8c     E7 92 02 F6 | 	mov	arg01, fp
11a90     B8 BD BF FD | 	call	#_converttoint
11a94     3D A7 02 F6 | 	mov	local01, result1
11a98     E7 92 02 F6 | 	mov	arg01, fp
11a9c     0C 92 06 F1 | 	add	arg01, #12
11aa0     A8 BD BF FD | 	call	#_converttoint
11aa4     3D A9 02 F6 | 	mov	local02, result1
11aa8     E7 92 02 F6 | 	mov	arg01, fp
11aac     18 92 06 F1 | 	add	arg01, #24
11ab0     98 BD BF FD | 	call	#_converttoint
11ab4     3D AB 02 F6 | 	mov	local03, result1
11ab8     E7 92 02 F6 | 	mov	arg01, fp
11abc     24 92 06 F1 | 	add	arg01, #36
11ac0     88 BD BF FD | 	call	#_converttoint
11ac4     3D 99 02 F6 | 	mov	arg04, result1
11ac8     53 93 02 F6 | 	mov	arg01, local01
11acc     54 95 02 F6 | 	mov	arg02, local02
11ad0     55 97 02 F6 | 	mov	arg03, local03
11ad4     54 07 B1 FD | 	call	#_hg010b_spin2_fill
11ad8     E7 F0 03 F6 | 	mov	ptra, fp
11adc     F2 00 A0 FD | 	call	#popregs_
11ae0                 | _do_fill_ret
11ae0     2D 00 64 FD | 	ret
11ae4                 | 
11ae4                 | ' 
11ae4                 | ' '-------------------- findfirst
11ae4                 | ' 
11ae4                 | ' sub do_findfirst
11ae4                 | _do_findfirst
11ae4     04 CA 05 F6 | 	mov	COUNT_, #4
11ae8     E8 00 A0 FD | 	call	#pushregs_
11aec     1C F0 07 F1 | 	add	ptra, #28
11af0     4C 00 00 FF 
11af4     24 64 06 F1 | 	add	objptr, ##38948
11af8     32 97 02 FB | 	rdlong	arg03, objptr
11afc     4B 95 02 F6 | 	mov	arg02, arg03
11b00     01 94 66 F0 | 	shl	arg02, #1
11b04     4B 95 02 F1 | 	add	arg02, arg03
11b08     02 94 66 F0 | 	shl	arg02, #2
11b0c     03 00 00 FF 
11b10     04 64 86 F1 | 	sub	objptr, ##1540
11b14     32 95 02 F1 | 	add	arg02, objptr
11b18     4A A7 02 FB | 	rdlong	local01, arg02
11b1c                 | ' 
11b1c                 | ' numpar=compiledline(lineptr_e).result.uresult
11b1c                 | ' if numpar=2 then
11b1c     02 A6 0E F2 | 	cmp	local01, #2 wz
11b20     49 00 00 FF 
11b24     20 64 86 F1 | 	sub	objptr, ##37408
11b28     48 01 90 5D |  if_ne	jmp	#LR__1484
11b2c     40 BB BF FD | 	call	#_pop
11b30     3F 97 02 F6 | 	mov	arg03, result3
11b34     08 CE 05 F1 | 	add	fp, #8
11b38     E7 7A 62 FC | 	wrlong	result1, fp
11b3c     04 CE 05 F1 | 	add	fp, #4
11b40     E7 7C 62 FC | 	wrlong	result2, fp
11b44     04 CE 05 F1 | 	add	fp, #4
11b48     E7 96 62 FC | 	wrlong	arg03, fp
11b4c                 | '   t1=pop()
11b4c                 | '   if t1.result_type=result_string2 then 
11b4c     10 CE 85 F1 | 	sub	fp, #16
11b50     2B 96 0E F2 | 	cmp	arg03, #43 wz
11b54     18 00 90 5D |  if_ne	jmp	#LR__1480
11b58     08 CE 05 F1 | 	add	fp, #8
11b5c     E7 92 02 FB | 	rdlong	arg01, fp
11b60     08 CE 85 F1 | 	sub	fp, #8
11b64     78 BC BF FD | 	call	#_convertstring
11b68     3D A9 02 F6 | 	mov	local02, result1
11b6c     60 00 90 FD | 	jmp	#LR__1482
11b70                 | LR__1480
11b70     10 CE 05 F1 | 	add	fp, #16
11b74     E7 96 02 FB | 	rdlong	arg03, fp
11b78     10 CE 85 F1 | 	sub	fp, #16
11b7c     1F 96 0E F2 | 	cmp	arg03, #31 wz
11b80     08 CE 05 A1 |  if_e	add	fp, #8
11b84     E7 A8 02 AB |  if_e	rdlong	local02, fp
11b88     08 CE 85 A1 |  if_e	sub	fp, #8
11b8c     40 00 90 AD |  if_e	jmp	#LR__1481
11b90                 | '     print "findfirst: "; : printerror(30) : return  
11b90     00 92 06 F6 | 	mov	arg01, #0
11b94     E8 83 B1 FD | 	call	#__system___getiolock_0622
11b98     3D 93 02 F6 | 	mov	arg01, result1
11b9c     5C 2E B1 FD | 	call	#__system___lockmem
11ba0     97 01 00 FF 
11ba4     27 95 06 F6 | 	mov	arg02, ##@LR__6008
11ba8     00 92 06 F6 | 	mov	arg01, #0
11bac     00 96 06 F6 | 	mov	arg03, #0
11bb0     3C 3B B1 FD | 	call	#__system___basic_print_string
11bb4     00 92 06 F6 | 	mov	arg01, #0
11bb8     C4 83 B1 FD | 	call	#__system___getiolock_0622
11bbc     3D 01 68 FC | 	wrlong	#0, result1
11bc0     1E 92 06 F6 | 	mov	arg01, #30
11bc4     00 94 06 F6 | 	mov	arg02, #0
11bc8     08 F1 B0 FD | 	call	#_printerror
11bcc     08 02 90 FD | 	jmp	#LR__1492
11bd0                 | LR__1481
11bd0                 | LR__1482
11bd0     9C BA BF FD | 	call	#_pop
11bd4     3F 97 02 F6 | 	mov	arg03, result3
11bd8     08 CE 05 F1 | 	add	fp, #8
11bdc     E7 7A 62 FC | 	wrlong	result1, fp
11be0     04 CE 05 F1 | 	add	fp, #4
11be4     E7 7C 62 FC | 	wrlong	result2, fp
11be8     04 CE 05 F1 | 	add	fp, #4
11bec     E7 96 62 FC | 	wrlong	arg03, fp
11bf0                 | '   t1=pop()
11bf0                 | '   if t1.result_type=result_string2 then 
11bf0     10 CE 85 F1 | 	sub	fp, #16
11bf4     2B 96 0E F2 | 	cmp	arg03, #43 wz
11bf8     18 00 90 5D |  if_ne	jmp	#LR__1483
11bfc     08 CE 05 F1 | 	add	fp, #8
11c00     E7 92 02 FB | 	rdlong	arg01, fp
11c04     08 CE 85 F1 | 	sub	fp, #8
11c08     D4 BB BF FD | 	call	#_convertstring
11c0c     3D AB 02 F6 | 	mov	local03, result1
11c10     58 01 90 FD | 	jmp	#LR__1490
11c14                 | LR__1483
11c14     10 CE 05 F1 | 	add	fp, #16
11c18     E7 A6 02 FB | 	rdlong	local01, fp
11c1c     10 CE 85 F1 | 	sub	fp, #16
11c20     1F A6 0E F2 | 	cmp	local01, #31 wz
11c24     08 CE 05 A1 |  if_e	add	fp, #8
11c28     E7 AA 02 AB |  if_e	rdlong	local03, fp
11c2c     08 CE 85 A1 |  if_e	sub	fp, #8
11c30     38 01 90 AD |  if_e	jmp	#LR__1490
11c34                 | '     print "findfirst: "; : printerror(30) : return  
11c34     00 92 06 F6 | 	mov	arg01, #0
11c38     44 83 B1 FD | 	call	#__system___getiolock_0622
11c3c     3D 93 02 F6 | 	mov	arg01, result1
11c40     B8 2D B1 FD | 	call	#__system___lockmem
11c44     97 01 00 FF 
11c48     33 95 06 F6 | 	mov	arg02, ##@LR__6009
11c4c     00 92 06 F6 | 	mov	arg01, #0
11c50     00 96 06 F6 | 	mov	arg03, #0
11c54     98 3A B1 FD | 	call	#__system___basic_print_string
11c58     00 92 06 F6 | 	mov	arg01, #0
11c5c     20 83 B1 FD | 	call	#__system___getiolock_0622
11c60     3D 01 68 FC | 	wrlong	#0, result1
11c64     1E 92 06 F6 | 	mov	arg01, #30
11c68     00 94 06 F6 | 	mov	arg02, #0
11c6c     64 F0 B0 FD | 	call	#_printerror
11c70     64 01 90 FD | 	jmp	#LR__1492
11c74                 | LR__1484
11c74     01 A6 0E F2 | 	cmp	local01, #1 wz
11c78     B0 00 90 5D |  if_ne	jmp	#LR__1488
11c7c     F0 B9 BF FD | 	call	#_pop
11c80     3F 97 02 F6 | 	mov	arg03, result3
11c84     08 CE 05 F1 | 	add	fp, #8
11c88     E7 7A 62 FC | 	wrlong	result1, fp
11c8c     04 CE 05 F1 | 	add	fp, #4
11c90     E7 7C 62 FC | 	wrlong	result2, fp
11c94     04 CE 05 F1 | 	add	fp, #4
11c98     E7 96 62 FC | 	wrlong	arg03, fp
11c9c                 | '   t1=pop()
11c9c                 | '   if t1.result_type=result_string2 then 
11c9c     10 CE 85 F1 | 	sub	fp, #16
11ca0     2B 96 0E F2 | 	cmp	arg03, #43 wz
11ca4     18 00 90 5D |  if_ne	jmp	#LR__1485
11ca8     08 CE 05 F1 | 	add	fp, #8
11cac     E7 92 02 FB | 	rdlong	arg01, fp
11cb0     08 CE 85 F1 | 	sub	fp, #8
11cb4     28 BB BF FD | 	call	#_convertstring
11cb8     3D AB 02 F6 | 	mov	local03, result1
11cbc     60 00 90 FD | 	jmp	#LR__1487
11cc0                 | LR__1485
11cc0     10 CE 05 F1 | 	add	fp, #16
11cc4     E7 96 02 FB | 	rdlong	arg03, fp
11cc8     10 CE 85 F1 | 	sub	fp, #16
11ccc     1F 96 0E F2 | 	cmp	arg03, #31 wz
11cd0     08 CE 05 A1 |  if_e	add	fp, #8
11cd4     E7 AA 02 AB |  if_e	rdlong	local03, fp
11cd8     08 CE 85 A1 |  if_e	sub	fp, #8
11cdc     40 00 90 AD |  if_e	jmp	#LR__1486
11ce0                 | '     print "findfirst: "; : printerror(30) : return  
11ce0     00 92 06 F6 | 	mov	arg01, #0
11ce4     98 82 B1 FD | 	call	#__system___getiolock_0622
11ce8     3D 93 02 F6 | 	mov	arg01, result1
11cec     0C 2D B1 FD | 	call	#__system___lockmem
11cf0     97 01 00 FF 
11cf4     3F 95 06 F6 | 	mov	arg02, ##@LR__6010
11cf8     00 92 06 F6 | 	mov	arg01, #0
11cfc     00 96 06 F6 | 	mov	arg03, #0
11d00     EC 39 B1 FD | 	call	#__system___basic_print_string
11d04     00 92 06 F6 | 	mov	arg01, #0
11d08     74 82 B1 FD | 	call	#__system___getiolock_0622
11d0c     3D 01 68 FC | 	wrlong	#0, result1
11d10     1E 92 06 F6 | 	mov	arg01, #30
11d14     00 94 06 F6 | 	mov	arg02, #0
11d18     B8 EF B0 FD | 	call	#_printerror
11d1c     B8 00 90 FD | 	jmp	#LR__1492
11d20                 | LR__1486
11d20                 | LR__1487
11d20     97 01 00 FF 
11d24     4B A9 06 F6 | 	mov	local02, ##@LR__6011
11d28     40 00 90 FD | 	jmp	#LR__1489
11d2c                 | LR__1488
11d2c                 | '   print "findfirst: "; : printerror(39) : return     
11d2c     00 92 06 F6 | 	mov	arg01, #0
11d30     4C 82 B1 FD | 	call	#__system___getiolock_0622
11d34     3D 93 02 F6 | 	mov	arg01, result1
11d38     C0 2C B1 FD | 	call	#__system___lockmem
11d3c     97 01 00 FF 
11d40     4C 95 06 F6 | 	mov	arg02, ##@LR__6012
11d44     00 92 06 F6 | 	mov	arg01, #0
11d48     00 96 06 F6 | 	mov	arg03, #0
11d4c     A0 39 B1 FD | 	call	#__system___basic_print_string
11d50     00 92 06 F6 | 	mov	arg01, #0
11d54     28 82 B1 FD | 	call	#__system___getiolock_0622
11d58     3D 01 68 FC | 	wrlong	#0, result1
11d5c     27 92 06 F6 | 	mov	arg01, #39
11d60     00 94 06 F6 | 	mov	arg02, #0
11d64     6C EF B0 FD | 	call	#_printerror
11d68     6C 00 90 FD | 	jmp	#LR__1492
11d6c                 | LR__1489
11d6c                 | LR__1490
11d6c                 | ' 
11d6c                 | ' if s2="" then
11d6c     97 01 00 FF 
11d70     58 95 06 F6 | 	mov	arg02, ##@LR__6013
11d74     54 93 02 F6 | 	mov	arg01, local02
11d78     A8 2C B1 FD | 	call	#__system___string_cmp
11d7c     00 7A 0E F2 | 	cmp	result1, #0 wz
11d80     31 AC 06 A6 |  if_e	mov	local04, #49
11d84     24 00 90 AD |  if_e	jmp	#LR__1491
11d88     54 93 02 F6 | 	mov	arg01, local02
11d8c     24 48 B1 FD | 	call	#__system__LCase_S
11d90     3D 93 02 F6 | 	mov	arg01, result1
11d94     97 01 00 FF 
11d98     59 95 06 F6 | 	mov	arg02, ##@LR__6014
11d9c     84 2C B1 FD | 	call	#__system___string_cmp
11da0     00 7A 0E F2 | 	cmp	result1, #0 wz
11da4     10 AC 06 A6 |  if_e	mov	local04, #16
11da8     21 AC 06 56 |  if_ne	mov	local04, #33
11dac                 | LR__1491
11dac     55 93 02 F6 | 	mov	arg01, local03
11db0     56 95 02 F6 | 	mov	arg02, local04
11db4     80 83 B1 FD | 	call	#__system___basic_dir
11db8     3D A9 02 F6 | 	mov	local02, result1
11dbc     10 CE 05 F1 | 	add	fp, #16
11dc0     E7 3E 68 FC | 	wrlong	#31, fp
11dc4     08 CE 85 F1 | 	sub	fp, #8
11dc8     E7 A8 62 FC | 	wrlong	local02, fp
11dcc     E7 92 02 F6 | 	mov	arg01, fp
11dd0     08 CE 85 F1 | 	sub	fp, #8
11dd4     28 B9 BF FD | 	call	#_push
11dd8                 | LR__1492
11dd8     E7 F0 03 F6 | 	mov	ptra, fp
11ddc     F2 00 A0 FD | 	call	#popregs_
11de0                 | _do_findfirst_ret
11de0     2D 00 64 FD | 	ret
11de4                 | 
11de4                 | ' 
11de4                 | ' '-------------------- findnext
11de4                 | ' 
11de4                 | ' sub do_findnext
11de4                 | _do_findnext
11de4     00 CA 05 F6 | 	mov	COUNT_, #0
11de8     E8 00 A0 FD | 	call	#pushregs_
11dec     10 F0 07 F1 | 	add	ptra, #16
11df0                 | ' 
11df0                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
11df0     4C 00 00 FF 
11df4     24 64 06 F1 | 	add	objptr, ##38948
11df8     32 97 02 FB | 	rdlong	arg03, objptr
11dfc     4B 95 02 F6 | 	mov	arg02, arg03
11e00     01 94 66 F0 | 	shl	arg02, #1
11e04     4B 95 02 F1 | 	add	arg02, arg03
11e08     02 94 66 F0 | 	shl	arg02, #2
11e0c     03 00 00 FF 
11e10     04 64 86 F1 | 	sub	objptr, ##1540
11e14     32 95 02 F1 | 	add	arg02, objptr
11e18     4A 7B 02 FB | 	rdlong	result1, arg02
11e1c     01 7A 16 F2 | 	cmp	result1, #1 wc
11e20     49 00 00 FF 
11e24     20 64 86 F1 | 	sub	objptr, ##37408
11e28     40 00 90 CD |  if_b	jmp	#LR__1500
11e2c     00 92 06 F6 | 	mov	arg01, #0
11e30     4C 81 B1 FD | 	call	#__system___getiolock_0622
11e34     3D 93 02 F6 | 	mov	arg01, result1
11e38     C0 2B B1 FD | 	call	#__system___lockmem
11e3c     97 01 00 FF 
11e40     5D 95 06 F6 | 	mov	arg02, ##@LR__6015
11e44     00 92 06 F6 | 	mov	arg01, #0
11e48     00 96 06 F6 | 	mov	arg03, #0
11e4c     A0 38 B1 FD | 	call	#__system___basic_print_string
11e50     00 92 06 F6 | 	mov	arg01, #0
11e54     28 81 B1 FD | 	call	#__system___getiolock_0622
11e58     3D 01 68 FC | 	wrlong	#0, result1
11e5c     27 92 06 F6 | 	mov	arg01, #39
11e60     00 94 06 F6 | 	mov	arg02, #0
11e64     6C EE B0 FD | 	call	#_printerror
11e68     28 00 90 FD | 	jmp	#LR__1501
11e6c                 | LR__1500
11e6c     00 92 06 F6 | 	mov	arg01, #0
11e70     00 94 06 F6 | 	mov	arg02, #0
11e74     C0 82 B1 FD | 	call	#__system___basic_dir
11e78     3D 97 02 F6 | 	mov	arg03, result1
11e7c     08 CE 05 F1 | 	add	fp, #8
11e80     E7 3E 68 FC | 	wrlong	#31, fp
11e84     08 CE 85 F1 | 	sub	fp, #8
11e88     E7 96 62 FC | 	wrlong	arg03, fp
11e8c     E7 92 02 F6 | 	mov	arg01, fp
11e90     6C B8 BF FD | 	call	#_push
11e94                 | LR__1501
11e94     E7 F0 03 F6 | 	mov	ptra, fp
11e98     F2 00 A0 FD | 	call	#popregs_
11e9c                 | _do_findnext_ret
11e9c     2D 00 64 FD | 	ret
11ea0                 | 
11ea0                 | ' 
11ea0                 | ' '-------------------- font
11ea0                 | ' 
11ea0                 | ' sub do_font
11ea0                 | _do_font
11ea0     03 CA 05 F6 | 	mov	COUNT_, #3
11ea4     E8 00 A0 FD | 	call	#pushregs_
11ea8     C4 B7 BF FD | 	call	#_pop
11eac     3D A7 02 F6 | 	mov	local01, result1
11eb0     3E A9 02 F6 | 	mov	local02, result2
11eb4     3F AB 02 F6 | 	mov	local03, result3
11eb8                 | ' 
11eb8                 | ' t1=pop() 
11eb8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11eb8     1E AA 0E F2 | 	cmp	local03, #30 wz
11ebc     10 00 90 5D |  if_ne	jmp	#LR__1510
11ec0     53 93 02 F6 | 	mov	arg01, local01
11ec4     00 94 06 F6 | 	mov	arg02, #0
11ec8     C8 56 B1 FD | 	call	#__system___float_tointeger
11ecc     3D A7 02 F6 | 	mov	local01, result1
11ed0                 | LR__1510
11ed0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11ed0     1F AA 0E F2 | 	cmp	local03, #31 wz
11ed4     18 00 90 5D |  if_ne	jmp	#LR__1511
11ed8     53 93 02 F6 | 	mov	arg01, local01
11edc     08 5A B1 FD | 	call	#__system____builtin_atof
11ee0     3D 93 02 F6 | 	mov	arg01, result1
11ee4     00 94 06 F6 | 	mov	arg02, #0
11ee8     A8 56 B1 FD | 	call	#__system___float_tointeger
11eec     3D A7 02 F6 | 	mov	local01, result1
11ef0                 | LR__1511
11ef0     38 00 00 FF 
11ef4     E4 65 06 F1 | 	add	objptr, ##29156
11ef8     32 A7 62 FC | 	wrlong	local01, objptr
11efc     38 00 00 FF 
11f00     E4 65 86 F1 | 	sub	objptr, ##29156
11f04     02 A6 66 F0 | 	shl	local01, #2
11f08     53 93 02 F6 | 	mov	arg01, local01
11f0c     FC 09 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11f10     E7 F0 03 F6 | 	mov	ptra, fp
11f14     F2 00 A0 FD | 	call	#popregs_
11f18                 | _do_font_ret
11f18     2D 00 64 FD | 	ret
11f1c                 | 
11f1c                 | ' 
11f1c                 | ' '-------------------- for
11f1c                 | ' 
11f1c                 | ' sub do_for()
11f1c                 | _do_for
11f1c     01 CA 05 F6 | 	mov	COUNT_, #1
11f20     E8 00 A0 FD | 	call	#pushregs_
11f24     10 F0 07 F1 | 	add	ptra, #16
11f28     52 00 00 FF 
11f2c     D4 64 06 F1 | 	add	objptr, ##42196
11f30     32 93 02 FB | 	rdlong	arg01, objptr
11f34     01 92 06 F1 | 	add	arg01, #1
11f38     32 93 62 FC | 	wrlong	arg01, objptr
11f3c     52 00 00 FF 
11f40     D4 64 86 F1 | 	sub	objptr, ##42196
11f44     28 B7 BF FD | 	call	#_pop
11f48     E7 7A 62 FC | 	wrlong	result1, fp
11f4c     04 CE 05 F1 | 	add	fp, #4
11f50     E7 7C 62 FC | 	wrlong	result2, fp
11f54     04 CE 05 F1 | 	add	fp, #4
11f58     E7 7E 62 FC | 	wrlong	result3, fp
11f5c     08 CE 85 F1 | 	sub	fp, #8
11f60     52 00 00 FF 
11f64     D4 64 06 F1 | 	add	objptr, ##42196
11f68     32 93 02 FB | 	rdlong	arg01, objptr
11f6c     49 A7 02 F6 | 	mov	local01, arg01
11f70     02 A6 66 F0 | 	shl	local01, #2
11f74     49 A7 02 F1 | 	add	local01, arg01
11f78     02 A6 66 F0 | 	shl	local01, #2
11f7c     06 00 00 FF 
11f80     98 64 86 F1 | 	sub	objptr, ##3224
11f84     32 A7 02 F1 | 	add	local01, objptr
11f88     E7 92 02 FB | 	rdlong	arg01, fp
11f8c     08 A6 06 F1 | 	add	local01, #8
11f90     53 93 62 FC | 	wrlong	arg01, local01
11f94     4C 00 00 FF 
11f98     3C 64 86 F1 | 	sub	objptr, ##38972
11f9c     D0 B6 BF FD | 	call	#_pop
11fa0     E7 7A 62 FC | 	wrlong	result1, fp
11fa4     04 CE 05 F1 | 	add	fp, #4
11fa8     E7 7C 62 FC | 	wrlong	result2, fp
11fac     04 CE 05 F1 | 	add	fp, #4
11fb0     E7 7E 62 FC | 	wrlong	result3, fp
11fb4     08 CE 85 F1 | 	sub	fp, #8
11fb8     52 00 00 FF 
11fbc     D4 64 06 F1 | 	add	objptr, ##42196
11fc0     32 93 02 FB | 	rdlong	arg01, objptr
11fc4     49 A7 02 F6 | 	mov	local01, arg01
11fc8     02 A6 66 F0 | 	shl	local01, #2
11fcc     49 A7 02 F1 | 	add	local01, arg01
11fd0     02 A6 66 F0 | 	shl	local01, #2
11fd4     06 00 00 FF 
11fd8     98 64 86 F1 | 	sub	objptr, ##3224
11fdc     32 A7 02 F1 | 	add	local01, objptr
11fe0     E7 92 02 F6 | 	mov	arg01, fp
11fe4     4C 00 00 FF 
11fe8     3C 64 86 F1 | 	sub	objptr, ##38972
11fec     5C B8 BF FD | 	call	#_converttoint
11ff0     3D 93 02 F6 | 	mov	arg01, result1
11ff4     0C A6 06 F1 | 	add	local01, #12
11ff8     53 93 62 FC | 	wrlong	arg01, local01
11ffc     70 B6 BF FD | 	call	#_pop
12000     E7 7A 62 FC | 	wrlong	result1, fp
12004     04 CE 05 F1 | 	add	fp, #4
12008     E7 7C 62 FC | 	wrlong	result2, fp
1200c     04 CE 05 F1 | 	add	fp, #4
12010     E7 7E 62 FC | 	wrlong	result3, fp
12014     08 CE 85 F1 | 	sub	fp, #8
12018     52 00 00 FF 
1201c     D4 64 06 F1 | 	add	objptr, ##42196
12020     32 93 02 FB | 	rdlong	arg01, objptr
12024     49 A7 02 F6 | 	mov	local01, arg01
12028     02 A6 66 F0 | 	shl	local01, #2
1202c     49 A7 02 F1 | 	add	local01, arg01
12030     02 A6 66 F0 | 	shl	local01, #2
12034     06 00 00 FF 
12038     98 64 86 F1 | 	sub	objptr, ##3224
1203c     32 A7 02 F1 | 	add	local01, objptr
12040     E7 92 02 F6 | 	mov	arg01, fp
12044     4C 00 00 FF 
12048     3C 64 86 F1 | 	sub	objptr, ##38972
1204c     FC B7 BF FD | 	call	#_converttoint
12050     10 A6 06 F1 | 	add	local01, #16
12054     53 7B 62 FC | 	wrlong	result1, local01
12058                 | ' fortop+=1
12058                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12058                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12058                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12058                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12058     4C 00 00 FF 
1205c     24 64 06 F1 | 	add	objptr, ##38948
12060     32 93 02 FB | 	rdlong	arg01, objptr
12064     49 A7 02 F6 | 	mov	local01, arg01
12068     01 A6 66 F0 | 	shl	local01, #1
1206c     49 A7 02 F1 | 	add	local01, arg01
12070     02 A6 66 F0 | 	shl	local01, #2
12074     03 00 00 FF 
12078     04 64 86 F1 | 	sub	objptr, ##1540
1207c     32 A7 02 F1 | 	add	local01, objptr
12080     08 A6 06 F1 | 	add	local01, #8
12084     53 A7 02 FB | 	rdlong	local01, local01
12088     FE A7 0E F2 | 	cmp	local01, #510 wz
1208c     49 00 00 FF 
12090     20 64 86 F1 | 	sub	objptr, ##37408
12094     70 00 90 5D |  if_ne	jmp	#LR__1520
12098     52 00 00 FF 
1209c     D4 64 06 F1 | 	add	objptr, ##42196
120a0     32 93 02 FB | 	rdlong	arg01, objptr
120a4     49 A7 02 F6 | 	mov	local01, arg01
120a8     02 A6 66 F0 | 	shl	local01, #2
120ac     49 A7 02 F1 | 	add	local01, arg01
120b0     02 A6 66 F0 | 	shl	local01, #2
120b4     06 00 00 FF 
120b8     98 64 86 F1 | 	sub	objptr, ##3224
120bc     32 A7 02 F1 | 	add	local01, objptr
120c0     06 00 00 FF 
120c4     20 64 06 F1 | 	add	objptr, ##3104
120c8     32 93 02 FB | 	rdlong	arg01, objptr
120cc     53 93 62 FC | 	wrlong	arg01, local01
120d0     78 64 06 F1 | 	add	objptr, #120
120d4     32 93 02 FB | 	rdlong	arg01, objptr
120d8     49 A7 02 F6 | 	mov	local01, arg01
120dc     02 A6 66 F0 | 	shl	local01, #2
120e0     49 A7 02 F1 | 	add	local01, arg01
120e4     02 A6 66 F0 | 	shl	local01, #2
120e8     06 00 00 FF 
120ec     98 64 86 F1 | 	sub	objptr, ##3224
120f0     32 A7 02 F1 | 	add	local01, objptr
120f4     04 A6 06 F1 | 	add	local01, #4
120f8     53 01 68 FC | 	wrlong	#0, local01
120fc     4C 00 00 FF 
12100     3C 64 86 F1 | 	sub	objptr, ##38972
12104     78 00 90 FD | 	jmp	#LR__1521
12108                 | LR__1520
12108     52 00 00 FF 
1210c     D4 64 06 F1 | 	add	objptr, ##42196
12110     32 93 02 FB | 	rdlong	arg01, objptr
12114     49 A7 02 F6 | 	mov	local01, arg01
12118     02 A6 66 F0 | 	shl	local01, #2
1211c     49 A7 02 F1 | 	add	local01, arg01
12120     02 A6 66 F0 | 	shl	local01, #2
12124     06 00 00 FF 
12128     98 64 86 F1 | 	sub	objptr, ##3224
1212c     32 A7 02 F1 | 	add	local01, objptr
12130     06 00 00 FF 
12134     28 64 06 F1 | 	add	objptr, ##3112
12138     32 93 02 FB | 	rdlong	arg01, objptr
1213c     53 93 62 FC | 	wrlong	arg01, local01
12140     70 64 06 F1 | 	add	objptr, #112
12144     32 93 02 FB | 	rdlong	arg01, objptr
12148     49 A7 02 F6 | 	mov	local01, arg01
1214c     02 A6 66 F0 | 	shl	local01, #2
12150     49 A7 02 F1 | 	add	local01, arg01
12154     02 A6 66 F0 | 	shl	local01, #2
12158     06 00 00 FF 
1215c     98 64 86 F1 | 	sub	objptr, ##3224
12160     32 A7 02 F1 | 	add	local01, objptr
12164     18 64 86 F1 | 	sub	objptr, #24
12168     32 93 02 FB | 	rdlong	arg01, objptr
1216c     4C 00 00 FF 
12170     24 64 86 F1 | 	sub	objptr, ##38948
12174     01 92 06 F1 | 	add	arg01, #1
12178     04 A6 06 F1 | 	add	local01, #4
1217c     53 93 62 FC | 	wrlong	arg01, local01
12180                 | LR__1521
12180     E7 F0 03 F6 | 	mov	ptra, fp
12184     F2 00 A0 FD | 	call	#popregs_
12188                 | _do_for_ret
12188     2D 00 64 FD | 	ret
1218c                 | 
1218c                 | ' 
1218c                 | ' '-------------------- frame
1218c                 | ' 
1218c                 | ' sub do_frame
1218c                 | _do_frame
1218c     03 CA 05 F6 | 	mov	COUNT_, #3
12190     E8 00 A0 FD | 	call	#pushregs_
12194     30 F0 07 F1 | 	add	ptra, #48
12198     D4 B4 BF FD | 	call	#_pop
1219c     3D 97 02 F6 | 	mov	arg03, result1
121a0     3E 95 02 F6 | 	mov	arg02, result2
121a4     3F 9B 02 F6 | 	mov	arg05, result3
121a8     24 CE 05 F1 | 	add	fp, #36
121ac     E7 96 62 FC | 	wrlong	arg03, fp
121b0     04 CE 05 F1 | 	add	fp, #4
121b4     E7 94 62 FC | 	wrlong	arg02, fp
121b8     04 CE 05 F1 | 	add	fp, #4
121bc     E7 9A 62 FC | 	wrlong	arg05, fp
121c0     2C CE 85 F1 | 	sub	fp, #44
121c4     A8 B4 BF FD | 	call	#_pop
121c8     3D 97 02 F6 | 	mov	arg03, result1
121cc     3E 95 02 F6 | 	mov	arg02, result2
121d0     3F 9B 02 F6 | 	mov	arg05, result3
121d4     18 CE 05 F1 | 	add	fp, #24
121d8     E7 96 62 FC | 	wrlong	arg03, fp
121dc     04 CE 05 F1 | 	add	fp, #4
121e0     E7 94 62 FC | 	wrlong	arg02, fp
121e4     04 CE 05 F1 | 	add	fp, #4
121e8     E7 9A 62 FC | 	wrlong	arg05, fp
121ec     20 CE 85 F1 | 	sub	fp, #32
121f0     7C B4 BF FD | 	call	#_pop
121f4     3D 97 02 F6 | 	mov	arg03, result1
121f8     3E 95 02 F6 | 	mov	arg02, result2
121fc     3F 9B 02 F6 | 	mov	arg05, result3
12200     0C CE 05 F1 | 	add	fp, #12
12204     E7 96 62 FC | 	wrlong	arg03, fp
12208     04 CE 05 F1 | 	add	fp, #4
1220c     E7 94 62 FC | 	wrlong	arg02, fp
12210     04 CE 05 F1 | 	add	fp, #4
12214     E7 9A 62 FC | 	wrlong	arg05, fp
12218     14 CE 85 F1 | 	sub	fp, #20
1221c     50 B4 BF FD | 	call	#_pop
12220     3F 97 02 F6 | 	mov	arg03, result3
12224     E7 7A 62 FC | 	wrlong	result1, fp
12228     04 CE 05 F1 | 	add	fp, #4
1222c     E7 7C 62 FC | 	wrlong	result2, fp
12230     04 CE 05 F1 | 	add	fp, #4
12234     E7 96 62 FC | 	wrlong	arg03, fp
12238     08 CE 85 F1 | 	sub	fp, #8
1223c     E7 92 02 F6 | 	mov	arg01, fp
12240     08 B6 BF FD | 	call	#_converttoint
12244     3D A7 02 F6 | 	mov	local01, result1
12248     E7 92 02 F6 | 	mov	arg01, fp
1224c     0C 92 06 F1 | 	add	arg01, #12
12250     F8 B5 BF FD | 	call	#_converttoint
12254     3D A9 02 F6 | 	mov	local02, result1
12258     E7 92 02 F6 | 	mov	arg01, fp
1225c     18 92 06 F1 | 	add	arg01, #24
12260     E8 B5 BF FD | 	call	#_converttoint
12264     3D AB 02 F6 | 	mov	local03, result1
12268     E7 92 02 F6 | 	mov	arg01, fp
1226c     24 92 06 F1 | 	add	arg01, #36
12270     D8 B5 BF FD | 	call	#_converttoint
12274     3D 99 02 F6 | 	mov	arg04, result1
12278     38 00 00 FF 
1227c     CC 65 06 F1 | 	add	objptr, ##29132
12280     32 9B 02 FB | 	rdlong	arg05, objptr
12284     38 00 00 FF 
12288     CC 65 86 F1 | 	sub	objptr, ##29132
1228c     53 93 02 F6 | 	mov	arg01, local01
12290     54 95 02 F6 | 	mov	arg02, local02
12294     55 97 02 F6 | 	mov	arg03, local03
12298     7C 04 B1 FD | 	call	#_hg010b_spin2_frame
1229c     E7 F0 03 F6 | 	mov	ptra, fp
122a0     F2 00 A0 FD | 	call	#popregs_
122a4                 | _do_frame_ret
122a4     2D 00 64 FD | 	ret
122a8                 | 
122a8                 | ' 
122a8                 | ' '-------------------- framebuf
122a8                 | ' 
122a8                 | ' sub do_framebuf
122a8                 | _do_framebuf
122a8     00 CA 05 F6 | 	mov	COUNT_, #0
122ac     E8 00 A0 FD | 	call	#pushregs_
122b0     0C F0 07 F1 | 	add	ptra, #12
122b4     08 CE 05 F1 | 	add	fp, #8
122b8     E7 3A 68 FC | 	wrlong	#29, fp
122bc     32 93 02 FB | 	rdlong	arg01, objptr
122c0     08 CE 85 F1 | 	sub	fp, #8
122c4     E7 92 62 FC | 	wrlong	arg01, fp
122c8     E7 92 02 F6 | 	mov	arg01, fp
122cc     30 B4 BF FD | 	call	#_push
122d0     E7 F0 03 F6 | 	mov	ptra, fp
122d4     F2 00 A0 FD | 	call	#popregs_
122d8                 | _do_framebuf_ret
122d8     2D 00 64 FD | 	ret
122dc                 | 
122dc                 | ' '-------------------- fre
122dc                 | ' 
122dc                 | ' sub do_fre
122dc                 | _do_fre
122dc     01 CA 05 F6 | 	mov	COUNT_, #1
122e0     E8 00 A0 FD | 	call	#pushregs_
122e4     0C F0 07 F1 | 	add	ptra, #12
122e8     54 00 00 FF 
122ec     74 64 06 F1 | 	add	objptr, ##43124
122f0     32 93 02 FB | 	rdlong	arg01, objptr
122f4     0F 00 00 FF 
122f8     74 64 86 F1 | 	sub	objptr, ##7796
122fc     32 A7 02 FB | 	rdlong	local01, objptr
12300     53 93 82 F1 | 	sub	arg01, local01
12304     0F 00 00 FF 
12308     EC 64 06 F1 | 	add	objptr, ##7916
1230c     32 93 62 FC | 	wrlong	arg01, objptr
12310     08 CE 05 F1 | 	add	fp, #8
12314     E7 3A 68 FC | 	wrlong	#29, fp
12318     08 CE 85 F1 | 	sub	fp, #8
1231c     32 A7 02 FB | 	rdlong	local01, objptr
12320     54 00 00 FF 
12324     EC 64 86 F1 | 	sub	objptr, ##43244
12328     E7 A6 62 FC | 	wrlong	local01, fp
1232c     E7 92 02 F6 | 	mov	arg01, fp
12330     CC B3 BF FD | 	call	#_push
12334     E7 F0 03 F6 | 	mov	ptra, fp
12338     F2 00 A0 FD | 	call	#popregs_
1233c                 | _do_fre_ret
1233c     2D 00 64 FD | 	ret
12340                 | 
12340                 | ' 
12340                 | ' '-------------------- get
12340                 | ' 
12340                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12340                 | _do_get
12340     10 CA 05 F6 | 	mov	COUNT_, #16
12344     E8 00 A0 FD | 	call	#pushregs_
12348     40 F0 07 F1 | 	add	ptra, #64
1234c     4C 00 00 FF 
12350     24 64 06 F1 | 	add	objptr, ##38948
12354     32 9B 02 FB | 	rdlong	arg05, objptr
12358     4D A7 02 F6 | 	mov	local01, arg05
1235c     01 A6 66 F0 | 	shl	local01, #1
12360     4D A7 02 F1 | 	add	local01, arg05
12364     02 A6 66 F0 | 	shl	local01, #2
12368     03 00 00 FF 
1236c     04 64 86 F1 | 	sub	objptr, ##1540
12370     32 A9 02 F6 | 	mov	local02, objptr
12374     32 A7 02 F1 | 	add	local01, objptr
12378     53 AB 02 FB | 	rdlong	local03, local01
1237c                 | ' 
1237c                 | ' numpar=compiledline(lineptr_e).result.uresult
1237c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1237c     04 AA 0E F2 | 	cmp	local03, #4 wz
12380     49 00 00 FF 
12384     20 64 86 F1 | 	sub	objptr, ##37408
12388     48 00 90 5D |  if_ne	jmp	#LR__1530
1238c     E0 B2 BF FD | 	call	#_pop
12390     3F 9B 02 F6 | 	mov	arg05, result3
12394     1C CE 05 F1 | 	add	fp, #28
12398     E7 7A 62 FC | 	wrlong	result1, fp
1239c     04 CE 05 F1 | 	add	fp, #4
123a0     E7 7C 62 FC | 	wrlong	result2, fp
123a4     04 CE 05 F1 | 	add	fp, #4
123a8     E7 9A 62 FC | 	wrlong	arg05, fp
123ac     08 CE 85 F1 | 	sub	fp, #8
123b0     E7 92 02 F6 | 	mov	arg01, fp
123b4     1C CE 85 F1 | 	sub	fp, #28
123b8     90 B4 BF FD | 	call	#_converttoint
123bc     54 00 00 FF 
123c0     E8 64 06 F1 | 	add	objptr, ##43240
123c4     32 7B 62 FC | 	wrlong	result1, objptr
123c8     54 00 00 FF 
123cc     E8 64 86 F1 | 	sub	objptr, ##43240
123d0     18 00 90 FD | 	jmp	#LR__1531
123d4                 | LR__1530
123d4     54 00 00 FF 
123d8     E8 64 06 F1 | 	add	objptr, ##43240
123dc     FF FF FF FF 
123e0     32 FF 6B FC | 	wrlong	##-1, objptr
123e4     54 00 00 FF 
123e8     E8 64 86 F1 | 	sub	objptr, ##43240
123ec                 | LR__1531
123ec                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
123ec     03 AA 56 F2 | 	cmps	local03, #3 wc
123f0     38 00 90 CD |  if_b	jmp	#LR__1532
123f4     78 B2 BF FD | 	call	#_pop
123f8     3F A7 02 F6 | 	mov	local01, result3
123fc     1C CE 05 F1 | 	add	fp, #28
12400     E7 7A 62 FC | 	wrlong	result1, fp
12404     04 CE 05 F1 | 	add	fp, #4
12408     E7 7C 62 FC | 	wrlong	result2, fp
1240c     04 CE 05 F1 | 	add	fp, #4
12410     E7 A6 62 FC | 	wrlong	local01, fp
12414     08 CE 85 F1 | 	sub	fp, #8
12418     E7 92 02 F6 | 	mov	arg01, fp
1241c     1C CE 85 F1 | 	sub	fp, #28
12420     28 B4 BF FD | 	call	#_converttoint
12424     3D AD 02 F6 | 	mov	local04, result1
12428     04 00 90 FD | 	jmp	#LR__1533
1242c                 | LR__1532
1242c     01 AC 06 F6 | 	mov	local04, #1
12430                 | LR__1533
12430                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12430     02 AA 56 F2 | 	cmps	local03, #2 wc
12434     34 00 90 CD |  if_b	jmp	#LR__1534
12438     34 B2 BF FD | 	call	#_pop
1243c     3F A9 02 F6 | 	mov	local02, result3
12440     1C CE 05 F1 | 	add	fp, #28
12444     E7 7A 62 FC | 	wrlong	result1, fp
12448     04 CE 05 F1 | 	add	fp, #4
1244c     E7 7C 62 FC | 	wrlong	result2, fp
12450     04 CE 05 F1 | 	add	fp, #4
12454     E7 A8 62 FC | 	wrlong	local02, fp
12458     08 CE 85 F1 | 	sub	fp, #8
1245c     E7 92 02 F6 | 	mov	arg01, fp
12460     1C CE 85 F1 | 	sub	fp, #28
12464     E4 B3 BF FD | 	call	#_converttoint
12468     3D AF 02 F6 | 	mov	local05, result1
1246c                 | LR__1534
1246c     00 B2 BF FD | 	call	#_pop
12470     3F 9B 02 F6 | 	mov	arg05, result3
12474     1C CE 05 F1 | 	add	fp, #28
12478     E7 7A 62 FC | 	wrlong	result1, fp
1247c     04 CE 05 F1 | 	add	fp, #4
12480     E7 7C 62 FC | 	wrlong	result2, fp
12484     04 CE 05 F1 | 	add	fp, #4
12488     E7 9A 62 FC | 	wrlong	arg05, fp
1248c     08 CE 85 F1 | 	sub	fp, #8
12490     E7 92 02 F6 | 	mov	arg01, fp
12494     1C CE 85 F1 | 	sub	fp, #28
12498     B0 B3 BF FD | 	call	#_converttoint
1249c     3D B1 02 F6 | 	mov	local06, result1
124a0     02 B2 66 F0 | 	shl	local07, #2
124a4     52 00 00 FF 
124a8     68 64 06 F1 | 	add	objptr, ##42088
124ac     32 B3 02 F1 | 	add	local07, objptr
124b0     59 01 68 FC | 	wrlong	#0, local07
124b4                 | ' t1=pop() : channel=converttoint(t1)
124b4                 | ' getres(j)=0
124b4                 | ' if pos>=0 then
124b4     02 00 00 FF 
124b8     80 64 06 F1 | 	add	objptr, ##1152
124bc     32 B5 02 FB | 	rdlong	local08, objptr
124c0     54 00 00 FF 
124c4     E8 64 86 F1 | 	sub	objptr, ##43240
124c8     00 B4 56 F2 | 	cmps	local08, #0 wc
124cc     28 01 90 CD |  if_b	jmp	#LR__1541
124d0                 | '   for i=0 to  amount/1024
124d0     00 B6 06 F6 | 	mov	local09, #0
124d4     56 B9 52 F6 | 	abs	local10, local04 wc
124d8     0A B8 46 F0 | 	shr	local10, #10
124dc     5C B9 82 F6 | 	negc	local10, local10
124e0     01 B8 06 F1 | 	add	local10, #1
124e4                 | LR__1535
124e4     5C B7 52 F2 | 	cmps	local09, local10 wc
124e8     20 02 90 3D |  if_ae	jmp	#LR__1549
124ec                 | '     get #channel,pos+1,block(0),amount,r
124ec     54 00 00 FF 
124f0     E8 64 06 F1 | 	add	objptr, ##43240
124f4     32 95 02 FB | 	rdlong	arg02, objptr
124f8     01 94 06 F1 | 	add	arg02, #1
124fc     04 00 00 FF 
12500     90 64 86 F1 | 	sub	objptr, ##2192
12504     32 97 02 F6 | 	mov	arg03, objptr
12508     50 00 00 FF 
1250c     58 64 86 F1 | 	sub	objptr, ##41048
12510     56 99 02 F6 | 	mov	arg04, local04
12514     58 93 02 F6 | 	mov	arg01, local06
12518     01 9A 06 F6 | 	mov	arg05, #1
1251c     58 33 B1 FD | 	call	#__system___basic_get
12520     3D BB 02 F6 | 	mov	local11, result1
12524                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12524     00 04 00 FF 
12528     00 AE 56 F2 | 	cmps	local05, ##524288 wc
1252c     48 00 90 3D |  if_ae	jmp	#LR__1537
12530     00 B2 06 F6 | 	mov	local07, #0
12534     5D BD 02 F6 | 	mov	local12, local11
12538                 | LR__1536
12538     5E B3 52 F2 | 	cmps	local07, local12 wc
1253c     80 00 90 3D |  if_ae	jmp	#LR__1540
12540     57 93 02 F6 | 	mov	arg01, local05
12544     5B B5 02 F6 | 	mov	local08, local09
12548     0A B4 66 F0 | 	shl	local08, #10
1254c     5A 93 02 F1 | 	add	arg01, local08
12550     59 93 02 F1 | 	add	arg01, local07
12554     59 A9 02 F6 | 	mov	local02, local07
12558     32 B5 02 F6 | 	mov	local08, objptr
1255c     50 00 00 FF 
12560     58 B4 06 F1 | 	add	local08, ##41048
12564     5A A9 02 F1 | 	add	local02, local08
12568     54 95 C2 FA | 	rdbyte	arg02, local02
1256c     49 95 42 FC | 	wrbyte	arg02, arg01
12570     01 B2 06 F1 | 	add	local07, #1
12574     C0 FF 9F FD | 	jmp	#LR__1536
12578                 | LR__1537
12578     00 B2 06 F6 | 	mov	local07, #0
1257c     5D BF 02 F6 | 	mov	local13, local11
12580                 | LR__1538
12580     5F B3 52 F2 | 	cmps	local07, local13 wc
12584     38 00 90 3D |  if_ae	jmp	#LR__1539
12588     57 93 02 F6 | 	mov	arg01, local05
1258c     5B BD 02 F6 | 	mov	local12, local09
12590     0A BC 66 F0 | 	shl	local12, #10
12594     5E 93 02 F1 | 	add	arg01, local12
12598     59 93 02 F1 | 	add	arg01, local07
1259c     59 A9 02 F6 | 	mov	local02, local07
125a0     32 BD 02 F6 | 	mov	local12, objptr
125a4     50 00 00 FF 
125a8     58 BC 06 F1 | 	add	local12, ##41048
125ac     5E A9 02 F1 | 	add	local02, local12
125b0     54 95 C2 FA | 	rdbyte	arg02, local02
125b4     48 E9 B0 FD | 	call	#_pspoke
125b8     01 B2 06 F1 | 	add	local07, #1
125bc     C0 FF 9F FD | 	jmp	#LR__1538
125c0                 | LR__1539
125c0                 | LR__1540
125c0     59 BF 02 F6 | 	mov	local13, local07
125c4     02 BE 66 F0 | 	shl	local13, #2
125c8     52 00 00 FF 
125cc     68 64 06 F1 | 	add	objptr, ##42088
125d0     32 BF 02 F1 | 	add	local13, objptr
125d4     02 B2 66 F0 | 	shl	local07, #2
125d8     32 B3 02 F1 | 	add	local07, objptr
125dc     59 A7 02 FB | 	rdlong	local01, local07
125e0     5D A7 02 F1 | 	add	local01, local11
125e4     5F A7 62 FC | 	wrlong	local01, local13
125e8     01 B6 06 F1 | 	add	local09, #1
125ec     52 00 00 FF 
125f0     68 64 86 F1 | 	sub	objptr, ##42088
125f4     EC FE 9F FD | 	jmp	#LR__1535
125f8                 | LR__1541
125f8                 | '   for i=0 to  amount/1024
125f8     00 B6 06 F6 | 	mov	local09, #0
125fc     56 C1 52 F6 | 	abs	local14, local04 wc
12600     0A C0 46 F0 | 	shr	local14, #10
12604     60 C1 82 F6 | 	negc	local14, local14
12608     01 C0 06 F1 | 	add	local14, #1
1260c                 | LR__1542
1260c     60 B7 52 F2 | 	cmps	local09, local14 wc
12610     F8 00 90 3D |  if_ae	jmp	#LR__1548
12614                 | '     get #channel,,block(0),amount,r
12614     32 97 02 F6 | 	mov	arg03, objptr
12618     50 00 00 FF 
1261c     58 96 06 F1 | 	add	arg03, ##41048
12620     56 99 02 F6 | 	mov	arg04, local04
12624     58 93 02 F6 | 	mov	arg01, local06
12628     00 94 06 F6 | 	mov	arg02, #0
1262c     01 9A 06 F6 | 	mov	arg05, #1
12630     44 32 B1 FD | 	call	#__system___basic_get
12634     3D BB 02 F6 | 	mov	local11, result1
12638                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12638     00 04 00 FF 
1263c     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12640     48 00 90 3D |  if_ae	jmp	#LR__1544
12644     00 B2 06 F6 | 	mov	local07, #0
12648     5D C3 02 F6 | 	mov	local15, local11
1264c                 | LR__1543
1264c     61 B3 52 F2 | 	cmps	local07, local15 wc
12650     80 00 90 3D |  if_ae	jmp	#LR__1547
12654     57 93 02 F6 | 	mov	arg01, local05
12658     5B BF 02 F6 | 	mov	local13, local09
1265c     0A BE 66 F0 | 	shl	local13, #10
12660     5F 93 02 F1 | 	add	arg01, local13
12664     59 93 02 F1 | 	add	arg01, local07
12668     59 A9 02 F6 | 	mov	local02, local07
1266c     32 BF 02 F6 | 	mov	local13, objptr
12670     50 00 00 FF 
12674     58 BE 06 F1 | 	add	local13, ##41048
12678     5F A9 02 F1 | 	add	local02, local13
1267c     54 95 C2 FA | 	rdbyte	arg02, local02
12680     49 95 42 FC | 	wrbyte	arg02, arg01
12684     01 B2 06 F1 | 	add	local07, #1
12688     C0 FF 9F FD | 	jmp	#LR__1543
1268c                 | LR__1544
1268c     00 B2 06 F6 | 	mov	local07, #0
12690     5D C5 02 F6 | 	mov	local16, local11
12694                 | LR__1545
12694     62 B3 52 F2 | 	cmps	local07, local16 wc
12698     38 00 90 3D |  if_ae	jmp	#LR__1546
1269c     57 93 02 F6 | 	mov	arg01, local05
126a0     5B C3 02 F6 | 	mov	local15, local09
126a4     0A C2 66 F0 | 	shl	local15, #10
126a8     61 93 02 F1 | 	add	arg01, local15
126ac     59 93 02 F1 | 	add	arg01, local07
126b0     59 A9 02 F6 | 	mov	local02, local07
126b4     32 C3 02 F6 | 	mov	local15, objptr
126b8     50 00 00 FF 
126bc     58 C2 06 F1 | 	add	local15, ##41048
126c0     61 A9 02 F1 | 	add	local02, local15
126c4     54 95 C2 FA | 	rdbyte	arg02, local02
126c8     34 E8 B0 FD | 	call	#_pspoke
126cc     01 B2 06 F1 | 	add	local07, #1
126d0     C0 FF 9F FD | 	jmp	#LR__1545
126d4                 | LR__1546
126d4                 | LR__1547
126d4     59 C5 02 F6 | 	mov	local16, local07
126d8     02 C4 66 F0 | 	shl	local16, #2
126dc     52 00 00 FF 
126e0     68 64 06 F1 | 	add	objptr, ##42088
126e4     32 C5 02 F1 | 	add	local16, objptr
126e8     02 B2 66 F0 | 	shl	local07, #2
126ec     32 B3 02 F1 | 	add	local07, objptr
126f0     59 A7 02 FB | 	rdlong	local01, local07
126f4     5D A7 02 F1 | 	add	local01, local11
126f8     62 A7 62 FC | 	wrlong	local01, local16
126fc     01 B6 06 F1 | 	add	local09, #1
12700     52 00 00 FF 
12704     68 64 86 F1 | 	sub	objptr, ##42088
12708     00 FF 9F FD | 	jmp	#LR__1542
1270c                 | LR__1548
1270c                 | LR__1549
1270c     E7 F0 03 F6 | 	mov	ptra, fp
12710     F2 00 A0 FD | 	call	#popregs_
12714                 | _do_get_ret
12714     2D 00 64 FD | 	ret
12718                 | 
12718                 | ' 
12718                 | ' '-------------------- getcolor
12718                 | ' 
12718                 | ' sub do_getcolor
12718                 | _do_getcolor
12718     00 CA 05 F6 | 	mov	COUNT_, #0
1271c     E8 00 A0 FD | 	call	#pushregs_
12720     10 F0 07 F1 | 	add	ptra, #16
12724     4C 00 00 FF 
12728     24 64 06 F1 | 	add	objptr, ##38948
1272c     32 97 02 FB | 	rdlong	arg03, objptr
12730     4B 95 02 F6 | 	mov	arg02, arg03
12734     01 94 66 F0 | 	shl	arg02, #1
12738     4B 95 02 F1 | 	add	arg02, arg03
1273c     02 94 66 F0 | 	shl	arg02, #2
12740     03 00 00 FF 
12744     04 64 86 F1 | 	sub	objptr, ##1540
12748     32 95 02 F1 | 	add	arg02, objptr
1274c     4A 97 02 FB | 	rdlong	arg03, arg02
12750                 | ' 
12750                 | ' numpar=compiledline(lineptr_e).result.uresult
12750                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12750     02 96 16 F2 | 	cmp	arg03, #2 wc
12754     49 00 00 FF 
12758     20 64 86 F1 | 	sub	objptr, ##37408
1275c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12760     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
12764     00 92 06 F6 | 	mov	arg01, #0
12768     14 78 B1 FD | 	call	#__system___getiolock_0622
1276c     3D 93 02 F6 | 	mov	arg01, result1
12770     88 22 B1 FD | 	call	#__system___lockmem
12774     97 01 00 FF 
12778     68 95 06 F6 | 	mov	arg02, ##@LR__6016
1277c     00 92 06 F6 | 	mov	arg01, #0
12780     00 96 06 F6 | 	mov	arg03, #0
12784     68 2F B1 FD | 	call	#__system___basic_print_string
12788     00 92 06 F6 | 	mov	arg01, #0
1278c     F0 77 B1 FD | 	call	#__system___getiolock_0622
12790     3D 01 68 FC | 	wrlong	#0, result1
12794     27 92 06 F6 | 	mov	arg01, #39
12798     00 94 06 F6 | 	mov	arg02, #0
1279c     34 E5 B0 FD | 	call	#_printerror
127a0     60 00 90 FD | 	jmp	#LR__1551
127a4                 | LR__1550
127a4     C8 AE BF FD | 	call	#_pop
127a8     E7 7A 62 FC | 	wrlong	result1, fp
127ac     04 CE 05 F1 | 	add	fp, #4
127b0     E7 7C 62 FC | 	wrlong	result2, fp
127b4     04 CE 05 F1 | 	add	fp, #4
127b8     E7 7E 62 FC | 	wrlong	result3, fp
127bc     08 CE 85 F1 | 	sub	fp, #8
127c0     E7 92 02 F6 | 	mov	arg01, fp
127c4     84 B0 BF FD | 	call	#_converttoint
127c8     3D 93 02 F6 | 	mov	arg01, result1
127cc                 | ' 
127cc                 | ' return long[palette_ptr+4*color]
127cc     1C 64 06 F1 | 	add	objptr, #28
127d0     32 7B 02 FB | 	rdlong	result1, objptr
127d4     1C 64 86 F1 | 	sub	objptr, #28
127d8     02 92 66 F0 | 	shl	arg01, #2
127dc     49 7B 02 F1 | 	add	result1, arg01
127e0     3D 7B 02 FB | 	rdlong	result1, result1
127e4     08 7A C6 F0 | 	sar	result1, #8
127e8     F8 7A 06 F4 | 	bitl	result1, #248
127ec     E7 7A 62 FC | 	wrlong	result1, fp
127f0     08 CE 05 F1 | 	add	fp, #8
127f4     E7 3A 68 FC | 	wrlong	#29, fp
127f8     08 CE 85 F1 | 	sub	fp, #8
127fc     E7 92 02 F6 | 	mov	arg01, fp
12800     FC AE BF FD | 	call	#_push
12804                 | LR__1551
12804     E7 F0 03 F6 | 	mov	ptra, fp
12808     F2 00 A0 FD | 	call	#popregs_
1280c                 | _do_getcolor_ret
1280c     2D 00 64 FD | 	ret
12810                 | 
12810                 | ' 
12810                 | ' '-------------------- getenvsustain
12810                 | ' 
12810                 | ' sub do_getenvsustain
12810                 | _do_getenvsustain
12810     00 CA 05 F6 | 	mov	COUNT_, #0
12814     E8 00 A0 FD | 	call	#pushregs_
12818     10 F0 07 F1 | 	add	ptra, #16
1281c     4C 00 00 FF 
12820     24 64 06 F1 | 	add	objptr, ##38948
12824     32 97 02 FB | 	rdlong	arg03, objptr
12828     4B 95 02 F6 | 	mov	arg02, arg03
1282c     01 94 66 F0 | 	shl	arg02, #1
12830     4B 95 02 F1 | 	add	arg02, arg03
12834     02 94 66 F0 | 	shl	arg02, #2
12838     03 00 00 FF 
1283c     04 64 86 F1 | 	sub	objptr, ##1540
12840     32 95 02 F1 | 	add	arg02, objptr
12844     4A 97 02 FB | 	rdlong	arg03, arg02
12848                 | ' 
12848                 | ' numpar=compiledline(lineptr_e).result.uresult
12848                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12848     02 96 16 F2 | 	cmp	arg03, #2 wc
1284c     49 00 00 FF 
12850     20 64 86 F1 | 	sub	objptr, ##37408
12854     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12858     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
1285c     00 92 06 F6 | 	mov	arg01, #0
12860     1C 77 B1 FD | 	call	#__system___getiolock_0622
12864     3D 93 02 F6 | 	mov	arg01, result1
12868     90 21 B1 FD | 	call	#__system___lockmem
1286c     97 01 00 FF 
12870     72 95 06 F6 | 	mov	arg02, ##@LR__6017
12874     00 92 06 F6 | 	mov	arg01, #0
12878     00 96 06 F6 | 	mov	arg03, #0
1287c     70 2E B1 FD | 	call	#__system___basic_print_string
12880     00 92 06 F6 | 	mov	arg01, #0
12884     F8 76 B1 FD | 	call	#__system___getiolock_0622
12888     3D 01 68 FC | 	wrlong	#0, result1
1288c     27 92 06 F6 | 	mov	arg01, #39
12890     00 94 06 F6 | 	mov	arg02, #0
12894     3C E4 B0 FD | 	call	#_printerror
12898     60 00 90 FD | 	jmp	#LR__1561
1289c                 | LR__1560
1289c     D0 AD BF FD | 	call	#_pop
128a0     3D 97 02 F6 | 	mov	arg03, result1
128a4     3E 95 02 F6 | 	mov	arg02, result2
128a8     E7 96 62 FC | 	wrlong	arg03, fp
128ac     04 CE 05 F1 | 	add	fp, #4
128b0     E7 94 62 FC | 	wrlong	arg02, fp
128b4     04 CE 05 F1 | 	add	fp, #4
128b8     E7 7E 62 FC | 	wrlong	result3, fp
128bc     08 CE 85 F1 | 	sub	fp, #8
128c0     E7 92 02 F6 | 	mov	arg01, fp
128c4     84 AF BF FD | 	call	#_converttoint
128c8     3D 97 02 F6 | 	mov	arg03, result1
128cc     01 96 66 F0 | 	shl	arg03, #1
128d0     32 95 02 F6 | 	mov	arg02, objptr
128d4     54 00 00 FF 
128d8     90 94 06 F1 | 	add	arg02, ##43152
128dc     4A 97 02 F1 | 	add	arg03, arg02
128e0     4B 7F E2 FA | 	rdword	result3, arg03
128e4     E7 7E 62 FC | 	wrlong	result3, fp
128e8     08 CE 05 F1 | 	add	fp, #8
128ec     E7 38 68 FC | 	wrlong	#28, fp
128f0     08 CE 85 F1 | 	sub	fp, #8
128f4     E7 92 02 F6 | 	mov	arg01, fp
128f8     04 AE BF FD | 	call	#_push
128fc                 | LR__1561
128fc     E7 F0 03 F6 | 	mov	ptra, fp
12900     F2 00 A0 FD | 	call	#popregs_
12904                 | _do_getenvsustain_ret
12904     2D 00 64 FD | 	ret
12908                 | 
12908                 | ' 
12908                 | ' '-------------------- getnotevalue
12908                 | ' 
12908                 | ' sub do_getnotevalue
12908                 | _do_getnotevalue
12908     02 CA 05 F6 | 	mov	COUNT_, #2
1290c     E8 00 A0 FD | 	call	#pushregs_
12910     1C F0 07 F1 | 	add	ptra, #28
12914     58 AD BF FD | 	call	#_pop
12918     3F 95 02 F6 | 	mov	arg02, result3
1291c     10 CE 05 F1 | 	add	fp, #16
12920     E7 7A 62 FC | 	wrlong	result1, fp
12924     04 CE 05 F1 | 	add	fp, #4
12928     E7 7C 62 FC | 	wrlong	result2, fp
1292c     04 CE 05 F1 | 	add	fp, #4
12930     E7 94 62 FC | 	wrlong	arg02, fp
12934     08 CE 85 F1 | 	sub	fp, #8
12938     E7 92 02 F6 | 	mov	arg01, fp
1293c     10 CE 85 F1 | 	sub	fp, #16
12940     08 AF BF FD | 	call	#_converttoint
12944     3D 93 52 F6 | 	abs	arg01, result1 wc
12948     0C 92 16 FD | 	qdiv	arg01, #12
1294c     32 93 02 F6 | 	mov	arg01, objptr
12950     16 00 00 FF 
12954     38 92 06 F1 | 	add	arg01, ##11320
12958     19 7C 62 FD | 	getqy	result2
1295c     3E 7D 82 F6 | 	negc	result2, result2
12960     3D 7B 52 F6 | 	abs	result1, result1 wc
12964     0C 7A 16 FD | 	qdiv	result1, #12
12968     02 7C 66 F0 | 	shl	result2, #2
1296c     49 7D 02 F1 | 	add	result2, arg01
12970     3E A7 02 FB | 	rdlong	local01, result2
12974     18 94 62 FD | 	getqx	arg02
12978     4A 93 82 F6 | 	negc	arg01, arg02
1297c     49 93 52 F6 | 	abs	arg01, arg01 wc
12980     1F A8 C6 C9 |  if_b	decod	local02, #31
12984     00 A8 06 36 |  if_ae	mov	local02, #0
12988     3C 43 B1 FD | 	call	#__system___float_fromuns
1298c     54 7B 62 F5 | 	xor	result1, local02
12990     3D 95 02 F6 | 	mov	arg02, result1
12994     1E 92 C6 F9 | 	decod	arg01, #30
12998     48 56 B1 FD | 	call	#__system____builtin_powf
1299c     3D 93 02 F6 | 	mov	arg01, result1
129a0     53 95 02 F6 | 	mov	arg02, local01
129a4     24 47 B1 FD | 	call	#__system___float_mul
129a8     3D A7 02 F6 | 	mov	local01, result1
129ac     10 CE 05 F1 | 	add	fp, #16
129b0     E7 A6 62 FC | 	wrlong	local01, fp
129b4     08 CE 05 F1 | 	add	fp, #8
129b8     E7 3C 68 FC | 	wrlong	#30, fp
129bc     08 CE 85 F1 | 	sub	fp, #8
129c0     E7 92 02 F6 | 	mov	arg01, fp
129c4     10 CE 85 F1 | 	sub	fp, #16
129c8     34 AD BF FD | 	call	#_push
129cc     E7 F0 03 F6 | 	mov	ptra, fp
129d0     F2 00 A0 FD | 	call	#popregs_
129d4                 | _do_getnotevalue_ret
129d4     2D 00 64 FD | 	ret
129d8                 | 
129d8                 | ' 
129d8                 | ' '-------------------- getpixel
129d8                 | ' 
129d8                 | ' sub do_getpixel
129d8                 | _do_getpixel
129d8     01 CA 05 F6 | 	mov	COUNT_, #1
129dc     E8 00 A0 FD | 	call	#pushregs_
129e0     24 F0 07 F1 | 	add	ptra, #36
129e4     4C 00 00 FF 
129e8     24 64 06 F1 | 	add	objptr, ##38948
129ec     32 97 02 FB | 	rdlong	arg03, objptr
129f0     4B 95 02 F6 | 	mov	arg02, arg03
129f4     01 94 66 F0 | 	shl	arg02, #1
129f8     4B 95 02 F1 | 	add	arg02, arg03
129fc     02 94 66 F0 | 	shl	arg02, #2
12a00     03 00 00 FF 
12a04     04 64 86 F1 | 	sub	objptr, ##1540
12a08     32 95 02 F1 | 	add	arg02, objptr
12a0c     4A 97 02 FB | 	rdlong	arg03, arg02
12a10                 | ' 
12a10                 | ' numpar=compiledline(lineptr_e).result.uresult
12a10                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12a10     02 96 0E F2 | 	cmp	arg03, #2 wz
12a14     49 00 00 FF 
12a18     20 64 86 F1 | 	sub	objptr, ##37408
12a1c     40 00 90 AD |  if_e	jmp	#LR__1570
12a20     00 92 06 F6 | 	mov	arg01, #0
12a24     58 75 B1 FD | 	call	#__system___getiolock_0622
12a28     3D 93 02 F6 | 	mov	arg01, result1
12a2c     CC 1F B1 FD | 	call	#__system___lockmem
12a30     97 01 00 FF 
12a34     82 95 06 F6 | 	mov	arg02, ##@LR__6018
12a38     00 92 06 F6 | 	mov	arg01, #0
12a3c     00 96 06 F6 | 	mov	arg03, #0
12a40     AC 2C B1 FD | 	call	#__system___basic_print_string
12a44     00 92 06 F6 | 	mov	arg01, #0
12a48     34 75 B1 FD | 	call	#__system___getiolock_0622
12a4c     3D 01 68 FC | 	wrlong	#0, result1
12a50     27 92 06 F6 | 	mov	arg01, #39
12a54     00 94 06 F6 | 	mov	arg02, #0
12a58     78 E2 B0 FD | 	call	#_printerror
12a5c     98 00 90 FD | 	jmp	#LR__1571
12a60                 | LR__1570
12a60     0C AC BF FD | 	call	#_pop
12a64     3D 97 02 F6 | 	mov	arg03, result1
12a68     3E 95 02 F6 | 	mov	arg02, result2
12a6c     3F 93 02 F6 | 	mov	arg01, result3
12a70     0C CE 05 F1 | 	add	fp, #12
12a74     E7 96 62 FC | 	wrlong	arg03, fp
12a78     04 CE 05 F1 | 	add	fp, #4
12a7c     E7 94 62 FC | 	wrlong	arg02, fp
12a80     04 CE 05 F1 | 	add	fp, #4
12a84     E7 92 62 FC | 	wrlong	arg01, fp
12a88     14 CE 85 F1 | 	sub	fp, #20
12a8c     E0 AB BF FD | 	call	#_pop
12a90     3F 97 02 F6 | 	mov	arg03, result3
12a94     E7 7A 62 FC | 	wrlong	result1, fp
12a98     04 CE 05 F1 | 	add	fp, #4
12a9c     E7 7C 62 FC | 	wrlong	result2, fp
12aa0     04 CE 05 F1 | 	add	fp, #4
12aa4     E7 96 62 FC | 	wrlong	arg03, fp
12aa8     08 CE 85 F1 | 	sub	fp, #8
12aac     E7 92 02 F6 | 	mov	arg01, fp
12ab0     98 AD BF FD | 	call	#_converttoint
12ab4     3D A7 02 F6 | 	mov	local01, result1
12ab8     E7 92 02 F6 | 	mov	arg01, fp
12abc     0C 92 06 F1 | 	add	arg01, #12
12ac0     88 AD BF FD | 	call	#_converttoint
12ac4     3D 97 02 F6 | 	mov	arg03, result1
12ac8     32 93 02 FB | 	rdlong	arg01, objptr
12acc     53 93 02 F1 | 	add	arg01, local01
12ad0     0A 96 66 F0 | 	shl	arg03, #10
12ad4     4B 93 02 F1 | 	add	arg01, arg03
12ad8     6C E4 B0 FD | 	call	#_pspeek
12adc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
12ae0     E7 7A 62 FC | 	wrlong	result1, fp
12ae4     08 CE 05 F1 | 	add	fp, #8
12ae8     E7 3A 68 FC | 	wrlong	#29, fp
12aec     08 CE 85 F1 | 	sub	fp, #8
12af0     E7 92 02 F6 | 	mov	arg01, fp
12af4     08 AC BF FD | 	call	#_push
12af8                 | LR__1571
12af8     E7 F0 03 F6 | 	mov	ptra, fp
12afc     F2 00 A0 FD | 	call	#popregs_
12b00                 | _do_getpixel_ret
12b00     2D 00 64 FD | 	ret
12b04                 | 
12b04                 | ' 
12b04                 | ' 
12b04                 | ' sub do_getrealfreq
12b04                 | _do_getrealfreq
12b04     00 CA 05 F6 | 	mov	COUNT_, #0
12b08     E8 00 A0 FD | 	call	#pushregs_
12b0c     14 F0 07 F1 | 	add	ptra, #20
12b10     4C 00 00 FF 
12b14     24 64 06 F1 | 	add	objptr, ##38948
12b18     32 97 02 FB | 	rdlong	arg03, objptr
12b1c     4B 95 02 F6 | 	mov	arg02, arg03
12b20     01 94 66 F0 | 	shl	arg02, #1
12b24     4B 95 02 F1 | 	add	arg02, arg03
12b28     02 94 66 F0 | 	shl	arg02, #2
12b2c     03 00 00 FF 
12b30     04 64 86 F1 | 	sub	objptr, ##1540
12b34     32 95 02 F1 | 	add	arg02, objptr
12b38     4A 97 02 FB | 	rdlong	arg03, arg02
12b3c                 | ' 
12b3c                 | ' numpar=compiledline(lineptr_e).result.uresult
12b3c                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
12b3c     01 96 0E F2 | 	cmp	arg03, #1 wz
12b40     49 00 00 FF 
12b44     20 64 86 F1 | 	sub	objptr, ##37408
12b48     40 00 90 AD |  if_e	jmp	#LR__1580
12b4c     00 92 06 F6 | 	mov	arg01, #0
12b50     2C 74 B1 FD | 	call	#__system___getiolock_0622
12b54     3D 93 02 F6 | 	mov	arg01, result1
12b58     A0 1E B1 FD | 	call	#__system___lockmem
12b5c     97 01 00 FF 
12b60     8D 95 06 F6 | 	mov	arg02, ##@LR__6019
12b64     00 92 06 F6 | 	mov	arg01, #0
12b68     00 96 06 F6 | 	mov	arg03, #0
12b6c     80 2B B1 FD | 	call	#__system___basic_print_string
12b70     00 92 06 F6 | 	mov	arg01, #0
12b74     08 74 B1 FD | 	call	#__system___getiolock_0622
12b78     3D 01 68 FC | 	wrlong	#0, result1
12b7c     27 92 06 F6 | 	mov	arg01, #39
12b80     00 94 06 F6 | 	mov	arg02, #0
12b84     4C E1 B0 FD | 	call	#_printerror
12b88     78 00 90 FD | 	jmp	#LR__1581
12b8c                 | LR__1580
12b8c     E0 AA BF FD | 	call	#_pop
12b90     3D 97 02 F6 | 	mov	arg03, result1
12b94     04 CE 05 F1 | 	add	fp, #4
12b98     E7 96 62 FC | 	wrlong	arg03, fp
12b9c     04 CE 05 F1 | 	add	fp, #4
12ba0     E7 7C 62 FC | 	wrlong	result2, fp
12ba4     04 CE 05 F1 | 	add	fp, #4
12ba8     E7 7E 62 FC | 	wrlong	result3, fp
12bac     08 CE 85 F1 | 	sub	fp, #8
12bb0     E7 92 02 F6 | 	mov	arg01, fp
12bb4     04 CE 85 F1 | 	sub	fp, #4
12bb8     90 AC BF FD | 	call	#_converttoint
12bbc     3D 95 02 F6 | 	mov	arg02, result1
12bc0     03 94 66 F0 | 	shl	arg02, #3
12bc4     3D 95 82 F1 | 	sub	arg02, result1
12bc8     02 94 66 F0 | 	shl	arg02, #2
12bcc     32 97 02 F6 | 	mov	arg03, objptr
12bd0     16 00 00 FF 
12bd4     BC 96 06 F1 | 	add	arg03, ##11452
12bd8     4B 95 02 F1 | 	add	arg02, arg03
12bdc     18 94 06 F1 | 	add	arg02, #24
12be0     4A 97 02 FB | 	rdlong	arg03, arg02
12be4     04 CE 05 F1 | 	add	fp, #4
12be8     E7 96 62 FC | 	wrlong	arg03, fp
12bec     08 CE 05 F1 | 	add	fp, #8
12bf0     E7 3C 68 FC | 	wrlong	#30, fp
12bf4     08 CE 85 F1 | 	sub	fp, #8
12bf8     E7 92 02 F6 | 	mov	arg01, fp
12bfc     04 CE 85 F1 | 	sub	fp, #4
12c00     FC AA BF FD | 	call	#_push
12c04                 | LR__1581
12c04     E7 F0 03 F6 | 	mov	ptra, fp
12c08     F2 00 A0 FD | 	call	#popregs_
12c0c                 | _do_getrealfreq_ret
12c0c     2D 00 64 FD | 	ret
12c10                 | 
12c10                 | ' 
12c10                 | ' 
12c10                 | ' '-------------------- gettime
12c10                 | ' 
12c10                 | ' sub do_gettime
12c10                 | _do_gettime
12c10     02 CA 05 F6 | 	mov	COUNT_, #2
12c14     E8 00 A0 FD | 	call	#pushregs_
12c18     14 F0 07 F1 | 	add	ptra, #20
12c1c                 | ' 
12c1c                 | ' const asm 
12c1c     1A A6 72 FD | 	getct	local01 wc
12c20     1A A8 62 FD | 	getct	local02
12c24                 | ' return hi1, lo1
12c24     54 7D 02 F6 | 	mov	result2, local02
12c28     53 7B 02 F6 | 	mov	result1, local01
12c2c     10 CE 05 F1 | 	add	fp, #16
12c30     E7 3A 68 FC | 	wrlong	#29, fp
12c34     08 CE 85 F1 | 	sub	fp, #8
12c38     E7 7C 62 FC | 	wrlong	result2, fp
12c3c     04 CE 05 F1 | 	add	fp, #4
12c40     E7 7A 62 FC | 	wrlong	result1, fp
12c44     04 CE 85 F1 | 	sub	fp, #4
12c48     E7 92 02 F6 | 	mov	arg01, fp
12c4c     08 CE 85 F1 | 	sub	fp, #8
12c50     AC AA BF FD | 	call	#_push
12c54     E7 F0 03 F6 | 	mov	ptra, fp
12c58     F2 00 A0 FD | 	call	#popregs_
12c5c                 | _do_gettime_ret
12c5c     2D 00 64 FD | 	ret
12c60                 | 
12c60                 | ' 
12c60                 | ' '-------------------- gosub
12c60                 | ' 
12c60                 | ' sub do_gosub()
12c60                 | _do_gosub
12c60     52 00 00 FF 
12c64     D8 64 06 F1 | 	add	objptr, ##42200
12c68     32 81 02 FB | 	rdlong	_var01, objptr
12c6c     01 80 06 F1 | 	add	_var01, #1
12c70     32 81 62 FC | 	wrlong	_var01, objptr
12c74                 | ' gosubtop+=1
12c74                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12c74     06 00 00 FF 
12c78     B4 64 86 F1 | 	sub	objptr, ##3252
12c7c     32 81 02 FB | 	rdlong	_var01, objptr
12c80     01 80 06 F1 | 	add	_var01, #1
12c84     40 83 02 F6 | 	mov	_var02, _var01
12c88     01 82 66 F0 | 	shl	_var02, #1
12c8c     40 83 02 F1 | 	add	_var02, _var01
12c90     02 82 66 F0 | 	shl	_var02, #2
12c94     03 00 00 FF 
12c98     04 64 86 F1 | 	sub	objptr, ##1540
12c9c     32 83 02 F1 | 	add	_var02, objptr
12ca0     08 82 06 F1 | 	add	_var02, #8
12ca4     41 83 02 FB | 	rdlong	_var02, _var02
12ca8     FE 83 0E F2 | 	cmp	_var02, #510 wz
12cac     49 00 00 FF 
12cb0     20 64 86 F1 | 	sub	objptr, ##37408
12cb4     58 00 90 5D |  if_ne	jmp	#LR__1590
12cb8     52 00 00 FF 
12cbc     D8 64 06 F1 | 	add	objptr, ##42200
12cc0     32 83 02 FB | 	rdlong	_var02, objptr
12cc4     03 82 66 F0 | 	shl	_var02, #3
12cc8     03 00 00 FF 
12ccc     88 65 86 F1 | 	sub	objptr, ##1928
12cd0     32 83 02 F1 | 	add	_var02, objptr
12cd4     03 00 00 FF 
12cd8     0C 65 06 F1 | 	add	objptr, ##1804
12cdc     32 81 02 FB | 	rdlong	_var01, objptr
12ce0     41 81 62 FC | 	wrlong	_var01, _var02
12ce4     7C 64 06 F1 | 	add	objptr, #124
12ce8     32 83 02 FB | 	rdlong	_var02, objptr
12cec     03 82 66 F0 | 	shl	_var02, #3
12cf0     03 00 00 FF 
12cf4     88 65 86 F1 | 	sub	objptr, ##1928
12cf8     32 83 02 F1 | 	add	_var02, objptr
12cfc     04 82 06 F1 | 	add	_var02, #4
12d00     41 01 68 FC | 	wrlong	#0, _var02
12d04     4E 00 00 FF 
12d08     50 65 86 F1 | 	sub	objptr, ##40272
12d0c     64 00 90 FD | 	jmp	#LR__1591
12d10                 | LR__1590
12d10     52 00 00 FF 
12d14     D8 64 06 F1 | 	add	objptr, ##42200
12d18     32 83 02 FB | 	rdlong	_var02, objptr
12d1c     03 82 66 F0 | 	shl	_var02, #3
12d20     03 00 00 FF 
12d24     88 65 86 F1 | 	sub	objptr, ##1928
12d28     32 83 02 F1 | 	add	_var02, objptr
12d2c     03 00 00 FF 
12d30     14 65 06 F1 | 	add	objptr, ##1812
12d34     32 81 02 FB | 	rdlong	_var01, objptr
12d38     41 81 62 FC | 	wrlong	_var01, _var02
12d3c     74 64 06 F1 | 	add	objptr, #116
12d40     32 83 02 FB | 	rdlong	_var02, objptr
12d44     03 82 66 F0 | 	shl	_var02, #3
12d48     03 00 00 FF 
12d4c     88 65 86 F1 | 	sub	objptr, ##1928
12d50     32 83 02 F1 | 	add	_var02, objptr
12d54     02 00 00 FF 
12d58     2C 65 86 F1 | 	sub	objptr, ##1324
12d5c     32 81 02 FB | 	rdlong	_var01, objptr
12d60     4C 00 00 FF 
12d64     24 64 86 F1 | 	sub	objptr, ##38948
12d68     02 80 06 F1 | 	add	_var01, #2
12d6c     04 82 06 F1 | 	add	_var02, #4
12d70     41 81 62 FC | 	wrlong	_var01, _var02
12d74                 | LR__1591
12d74                 | _do_gosub_ret
12d74     2D 00 64 FD | 	ret
12d78                 | 
12d78                 | ' 
12d78                 | ' '--------------------- goto
12d78                 | ' 
12d78                 | ' '------- fast goto
12d78                 | ' 
12d78                 | ' sub do_fast_goto
12d78                 | _do_fast_goto
12d78     02 CA 05 F6 | 	mov	COUNT_, #2
12d7c     E8 00 A0 FD | 	call	#pushregs_
12d80                 | _do_fast_goto_enter
12d80     4C 00 00 FF 
12d84     24 64 06 F1 | 	add	objptr, ##38948
12d88     32 93 02 FB | 	rdlong	arg01, objptr
12d8c     49 A7 02 F6 | 	mov	local01, arg01
12d90     01 A6 66 F0 | 	shl	local01, #1
12d94     49 A7 02 F1 | 	add	local01, arg01
12d98     02 A6 66 F0 | 	shl	local01, #2
12d9c     03 00 00 FF 
12da0     04 64 86 F1 | 	sub	objptr, ##1540
12da4     32 A7 02 F1 | 	add	local01, objptr
12da8     53 A9 02 FB | 	rdlong	local02, local01
12dac     54 93 02 F6 | 	mov	arg01, local02
12db0     49 00 00 FF 
12db4     20 64 86 F1 | 	sub	objptr, ##37408
12db8     D4 E1 B0 FD | 	call	#_pslpeek
12dbc     3D 93 02 F6 | 	mov	arg01, result1
12dc0                 | ' 
12dc0                 | ' testptr=compiledline(lineptr_e).result.uresult
12dc0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12dc0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12dc0     4C 00 00 FF 
12dc4     24 64 06 F1 | 	add	objptr, ##38948
12dc8     32 7B 02 FB | 	rdlong	result1, objptr
12dcc     3D A7 02 F6 | 	mov	local01, result1
12dd0     01 A6 66 F0 | 	shl	local01, #1
12dd4     3D A7 02 F1 | 	add	local01, result1
12dd8     02 A6 66 F0 | 	shl	local01, #2
12ddc     03 00 00 FF 
12de0     04 64 86 F1 | 	sub	objptr, ##1540
12de4     32 A7 02 F1 | 	add	local01, objptr
12de8     04 A6 06 F1 | 	add	local01, #4
12dec     53 A7 02 FB | 	rdlong	local01, local01
12df0     53 93 0A F2 | 	cmp	arg01, local01 wz
12df4     49 00 00 FF 
12df8     20 64 86 F1 | 	sub	objptr, ##37408
12dfc     58 00 90 5D |  if_ne	jmp	#LR__1600
12e00     52 00 00 FF 
12e04     5C 64 06 F1 | 	add	objptr, ##42076
12e08     32 A9 62 FC | 	wrlong	local02, objptr
12e0c     06 00 00 FF 
12e10     3C 64 86 F1 | 	sub	objptr, ##3132
12e14     32 A9 02 FB | 	rdlong	local02, objptr
12e18     01 A8 86 F1 | 	sub	local02, #1
12e1c     04 64 06 F1 | 	add	objptr, #4
12e20     32 A9 62 FC | 	wrlong	local02, objptr
12e24                 | '   runptr=testptr
12e24                 | '   lineptr_e=lineptr-1
12e24                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12e24     06 00 00 FF 
12e28     84 64 06 F1 | 	add	objptr, ##3204
12e2c     32 A9 02 FB | 	rdlong	local02, objptr
12e30     52 00 00 FF 
12e34     A8 64 86 F1 | 	sub	objptr, ##42152
12e38     FF FF 3F FF 
12e3c     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12e40     52 00 00 AF 
12e44     A8 64 06 A1 |  if_e	add	objptr, ##42152
12e48     32 01 68 AC |  if_e	wrlong	#0, objptr
12e4c     52 00 00 AF 
12e50     A8 64 86 A1 |  if_e	sub	objptr, ##42152
12e54     04 00 90 FD | 	jmp	#LR__1601
12e58                 | LR__1600
12e58     0C 00 B0 FD | 	call	#_do_find_goto
12e5c                 | LR__1601
12e5c     E7 F0 03 F6 | 	mov	ptra, fp
12e60     F2 00 A0 FD | 	call	#popregs_
12e64                 | _do_fast_goto_ret
12e64     2D 00 64 FD | 	ret
12e68                 | 
12e68                 | ' 
12e68                 | ' '------- find goto  
12e68                 | ' 
12e68                 | ' sub do_find_goto
12e68                 | _do_find_goto
12e68     06 CA 05 F6 | 	mov	COUNT_, #6
12e6c     E8 00 A0 FD | 	call	#pushregs_
12e70     24 F0 07 F1 | 	add	ptra, #36
12e74                 | _do_find_goto_enter
12e74     4C 00 00 FF 
12e78     24 64 06 F1 | 	add	objptr, ##38948
12e7c     32 A7 02 FB | 	rdlong	local01, objptr
12e80     53 A9 02 F6 | 	mov	local02, local01
12e84     01 A8 66 F0 | 	shl	local02, #1
12e88     53 A9 02 F1 | 	add	local02, local01
12e8c     02 A8 66 F0 | 	shl	local02, #2
12e90     03 00 00 FF 
12e94     04 64 86 F1 | 	sub	objptr, ##1540
12e98     32 AB 02 F6 | 	mov	local03, objptr
12e9c     32 A9 02 F1 | 	add	local02, objptr
12ea0     04 A8 06 F1 | 	add	local02, #4
12ea4     54 AD 02 FB | 	rdlong	local04, local02
12ea8     03 00 00 FF 
12eac     0C 64 06 F1 | 	add	objptr, ##1548
12eb0     32 AF 02 FB | 	rdlong	local05, objptr
12eb4                 | ' 
12eb4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12eb4                 | ' gotoptr=programstart
12eb4                 | ' do
12eb4     40 00 00 FF 
12eb8     60 65 86 F1 | 	sub	objptr, ##33120
12ebc                 | LR__1610
12ebc     E7 92 02 F6 | 	mov	arg01, fp
12ec0     0C 92 06 F1 | 	add	arg01, #12
12ec4     57 95 02 F6 | 	mov	arg02, local05
12ec8     18 96 06 F6 | 	mov	arg03, #24
12ecc     B8 0B B1 FD | 	call	#_psram_spin2_read1
12ed0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12ed0                 | '   if gotoheader(0)<>$FFFFFFFF then
12ed0     0C CE 05 F1 | 	add	fp, #12
12ed4     E7 A8 02 FB | 	rdlong	local02, fp
12ed8     0C CE 85 F1 | 	sub	fp, #12
12edc     FF FF 7F FF 
12ee0     FF A9 0E F2 | 	cmp	local02, ##-1 wz
12ee4     57 B1 02 56 |  if_ne	mov	local06, local05
12ee8     20 CE 05 51 |  if_ne	add	fp, #32
12eec     E7 AE 02 5B |  if_ne	rdlong	local05, fp
12ef0     20 CE 85 51 |  if_ne	sub	fp, #32
12ef4     20 CE 05 F1 | 	add	fp, #32
12ef8     E7 A8 02 FB | 	rdlong	local02, fp
12efc     20 CE 85 F1 | 	sub	fp, #32
12f00     FF FF 3F FF 
12f04     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12f08     0C CE 05 51 |  if_ne	add	fp, #12
12f0c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12f10     0C CE 85 51 |  if_ne	sub	fp, #12
12f14     FF FF 7F 5F 
12f18     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12f1c     0C CE 05 51 |  if_ne	add	fp, #12
12f20     53 AB 02 56 |  if_ne	mov	local03, local01
12f24     0C CE 85 51 |  if_ne	sub	fp, #12
12f28     56 AB 0A 52 |  if_ne	cmp	local03, local04 wz
12f2c     8C FF 9F 5D |  if_ne	jmp	#LR__1610
12f30     0B 00 00 FF 
12f34     CC 64 86 F1 | 	sub	objptr, ##5836
12f38                 | ' 
12f38                 | ' if gotoheader(0)=gotoline then
12f38     0C CE 05 F1 | 	add	fp, #12
12f3c     E7 AE 02 FB | 	rdlong	local05, fp
12f40     0C CE 85 F1 | 	sub	fp, #12
12f44     56 AF 0A F2 | 	cmp	local05, local04 wz
12f48     CC 00 90 5D |  if_ne	jmp	#LR__1611
12f4c     4C 00 00 FF 
12f50     24 64 06 F1 | 	add	objptr, ##38948
12f54     32 A7 02 FB | 	rdlong	local01, objptr
12f58     53 A9 02 F6 | 	mov	local02, local01
12f5c     01 A8 66 F0 | 	shl	local02, #1
12f60     53 A9 02 F1 | 	add	local02, local01
12f64     02 A8 66 F0 | 	shl	local02, #2
12f68     03 00 00 FF 
12f6c     04 64 86 F1 | 	sub	objptr, ##1540
12f70     32 A9 02 F1 | 	add	local02, objptr
12f74     54 B1 62 FC | 	wrlong	local06, local02
12f78     03 00 00 FF 
12f7c     04 64 06 F1 | 	add	objptr, ##1540
12f80     32 A7 02 FB | 	rdlong	local01, objptr
12f84     53 A9 02 F6 | 	mov	local02, local01
12f88     01 A8 66 F0 | 	shl	local02, #1
12f8c     53 A9 02 F1 | 	add	local02, local01
12f90     02 A8 66 F0 | 	shl	local02, #2
12f94     03 00 00 FF 
12f98     04 64 86 F1 | 	sub	objptr, ##1540
12f9c     32 A9 02 F1 | 	add	local02, objptr
12fa0     08 A8 06 F1 | 	add	local02, #8
12fa4     54 9D 68 FC | 	wrlong	#78, local02
12fa8     03 00 00 FF 
12fac     04 64 06 F1 | 	add	objptr, ##1540
12fb0     32 B1 02 FB | 	rdlong	local06, objptr
12fb4     58 93 02 F6 | 	mov	arg01, local06
12fb8     01 92 66 F0 | 	shl	arg01, #1
12fbc     58 93 02 F1 | 	add	arg01, local06
12fc0     02 92 66 F0 | 	shl	arg01, #2
12fc4     03 00 00 FF 
12fc8     04 64 86 F1 | 	sub	objptr, ##1540
12fcc     32 93 02 F1 | 	add	arg01, objptr
12fd0     09 00 00 FF 
12fd4     44 64 06 F1 | 	add	objptr, ##4676
12fd8     32 95 02 FB | 	rdlong	arg02, objptr
12fdc     02 AA 06 F6 | 	mov	local03, #2
12fe0     58 AB 02 F1 | 	add	local03, local06
12fe4     0B 00 00 FF 
12fe8     5C 64 86 F1 | 	sub	objptr, ##5724
12fec     32 97 02 FB | 	rdlong	arg03, objptr
12ff0     4B AB 02 FD | 	qmul	local03, arg03
12ff4     3B 00 00 FF 
12ff8     3C 65 86 F1 | 	sub	objptr, ##30524
12ffc     18 B0 62 FD | 	getqx	local06
13000     58 95 02 F1 | 	add	arg02, local06
13004     1C 0B B1 FD | 	call	#_psram_spin2_write
13008     0B 00 00 FF 
1300c     CC 64 86 F1 | 	sub	objptr, ##5836
13010     64 FD BF FD | 	call	#_do_fast_goto
13014     0C 00 90 FD | 	jmp	#LR__1612
13018                 | LR__1611
13018     26 92 06 F6 | 	mov	arg01, #38
1301c     00 94 06 F6 | 	mov	arg02, #0
13020     B0 DC B0 FD | 	call	#_printerror
13024                 | LR__1612
13024     E7 F0 03 F6 | 	mov	ptra, fp
13028     F2 00 A0 FD | 	call	#popregs_
1302c                 | _do_find_goto_ret
1302c     2D 00 64 FD | 	ret
13030                 | 
13030                 | ' 
13030                 | ' '------- slow goto  
13030                 | ' 
13030                 | ' sub do_slow_goto
13030                 | _do_slow_goto
13030     05 CA 05 F6 | 	mov	COUNT_, #5
13034     E8 00 A0 FD | 	call	#pushregs_
13038     30 F0 07 F1 | 	add	ptra, #48
1303c     30 A6 BF FD | 	call	#_pop
13040     3F A7 02 F6 | 	mov	local01, result3
13044     24 CE 05 F1 | 	add	fp, #36
13048     E7 7A 62 FC | 	wrlong	result1, fp
1304c     04 CE 05 F1 | 	add	fp, #4
13050     E7 7C 62 FC | 	wrlong	result2, fp
13054     04 CE 05 F1 | 	add	fp, #4
13058     E7 A6 62 FC | 	wrlong	local01, fp
1305c     08 CE 85 F1 | 	sub	fp, #8
13060     E7 92 02 F6 | 	mov	arg01, fp
13064     24 CE 85 F1 | 	sub	fp, #36
13068     E0 A7 BF FD | 	call	#_converttoint
1306c     3D A9 02 F6 | 	mov	local02, result1
13070     4C 00 00 FF 
13074     2C 64 06 F1 | 	add	objptr, ##38956
13078     32 AB 02 FB | 	rdlong	local03, objptr
1307c                 | ' 
1307c                 | ' t1=pop() : gotoline=converttoint(t1)
1307c                 | ' gotoptr=programstart
1307c                 | ' do
1307c     40 00 00 FF 
13080     60 65 86 F1 | 	sub	objptr, ##33120
13084                 | LR__1620
13084     E7 92 02 F6 | 	mov	arg01, fp
13088     0C 92 06 F1 | 	add	arg01, #12
1308c     55 95 02 F6 | 	mov	arg02, local03
13090     18 96 06 F6 | 	mov	arg03, #24
13094     F0 09 B1 FD | 	call	#_psram_spin2_read1
13098                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13098                 | '   if gotoheader(0)<>$FFFFFFFF then
13098     0C CE 05 F1 | 	add	fp, #12
1309c     E7 96 02 FB | 	rdlong	arg03, fp
130a0     0C CE 85 F1 | 	sub	fp, #12
130a4     FF FF 7F FF 
130a8     FF 97 0E F2 | 	cmp	arg03, ##-1 wz
130ac     55 AD 02 56 |  if_ne	mov	local04, local03
130b0     20 CE 05 51 |  if_ne	add	fp, #32
130b4     E7 AA 02 5B |  if_ne	rdlong	local03, fp
130b8     20 CE 85 51 |  if_ne	sub	fp, #32
130bc     20 CE 05 F1 | 	add	fp, #32
130c0     E7 96 02 FB | 	rdlong	arg03, fp
130c4     20 CE 85 F1 | 	sub	fp, #32
130c8     FF FF 3F FF 
130cc     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
130d0     0C CE 05 51 |  if_ne	add	fp, #12
130d4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
130d8     0C CE 85 51 |  if_ne	sub	fp, #12
130dc     FF FF 7F 5F 
130e0     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
130e4     0C CE 05 51 |  if_ne	add	fp, #12
130e8     53 AF 02 56 |  if_ne	mov	local05, local01
130ec     0C CE 85 51 |  if_ne	sub	fp, #12
130f0     54 AF 0A 52 |  if_ne	cmp	local05, local02 wz
130f4     8C FF 9F 5D |  if_ne	jmp	#LR__1620
130f8     0B 00 00 FF 
130fc     CC 64 86 F1 | 	sub	objptr, ##5836
13100                 | ' if gotoheader(0)=gotoline then  
13100     0C CE 05 F1 | 	add	fp, #12
13104     E7 AE 02 FB | 	rdlong	local05, fp
13108     0C CE 85 F1 | 	sub	fp, #12
1310c     54 AF 0A F2 | 	cmp	local05, local02 wz
13110     54 00 90 5D |  if_ne	jmp	#LR__1621
13114     52 00 00 FF 
13118     5C 64 06 F1 | 	add	objptr, ##42076
1311c     32 AD 62 FC | 	wrlong	local04, objptr
13120     06 00 00 FF 
13124     3C 64 86 F1 | 	sub	objptr, ##3132
13128     32 AF 02 FB | 	rdlong	local05, objptr
1312c     01 AE 86 F1 | 	sub	local05, #1
13130     04 64 06 F1 | 	add	objptr, #4
13134     32 AF 62 FC | 	wrlong	local05, objptr
13138                 | '    runptr=oldgotoptr
13138                 | '    lineptr_e=lineptr-1
13138                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13138     06 00 00 FF 
1313c     84 64 06 F1 | 	add	objptr, ##3204
13140     32 AF 02 FB | 	rdlong	local05, objptr
13144     52 00 00 FF 
13148     A8 64 86 F1 | 	sub	objptr, ##42152
1314c     FF FF 3F FF 
13150     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
13154     52 00 00 AF 
13158     A8 64 06 A1 |  if_e	add	objptr, ##42152
1315c     32 01 68 AC |  if_e	wrlong	#0, objptr
13160     52 00 00 AF 
13164     A8 64 86 A1 |  if_e	sub	objptr, ##42152
13168                 | LR__1621
13168     E7 F0 03 F6 | 	mov	ptra, fp
1316c     F2 00 A0 FD | 	call	#popregs_
13170                 | _do_slow_goto_ret
13170     2D 00 64 FD | 	ret
13174                 | 
13174                 | ' 
13174                 | ' ' ----------------  hex$
13174                 | ' 
13174                 | ' sub do_hex
13174                 | _do_hex
13174     02 CA 05 F6 | 	mov	COUNT_, #2
13178     E8 00 A0 FD | 	call	#pushregs_
1317c     18 F0 07 F1 | 	add	ptra, #24
13180     4C 00 00 FF 
13184     24 64 06 F1 | 	add	objptr, ##38948
13188     32 97 02 FB | 	rdlong	arg03, objptr
1318c     4B 95 02 F6 | 	mov	arg02, arg03
13190     01 94 66 F0 | 	shl	arg02, #1
13194     4B 95 02 F1 | 	add	arg02, arg03
13198     02 94 66 F0 | 	shl	arg02, #2
1319c     03 00 00 FF 
131a0     04 64 86 F1 | 	sub	objptr, ##1540
131a4     32 95 02 F1 | 	add	arg02, objptr
131a8     4A A7 02 FB | 	rdlong	local01, arg02
131ac                 | ' 
131ac                 | ' numpar=compiledline(lineptr_e).result.uresult
131ac                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
131ac     03 A6 16 F2 | 	cmp	local01, #3 wc
131b0     49 00 00 FF 
131b4     20 64 86 F1 | 	sub	objptr, ##37408
131b8     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
131bc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1630
131c0     00 92 06 F6 | 	mov	arg01, #0
131c4     B8 6D B1 FD | 	call	#__system___getiolock_0622
131c8     3D 93 02 F6 | 	mov	arg01, result1
131cc     2C 18 B1 FD | 	call	#__system___lockmem
131d0     97 01 00 FF 
131d4     9B 95 06 F6 | 	mov	arg02, ##@LR__6020
131d8     00 92 06 F6 | 	mov	arg01, #0
131dc     00 96 06 F6 | 	mov	arg03, #0
131e0     0C 25 B1 FD | 	call	#__system___basic_print_string
131e4     00 92 06 F6 | 	mov	arg01, #0
131e8     94 6D B1 FD | 	call	#__system___getiolock_0622
131ec     3D 01 68 FC | 	wrlong	#0, result1
131f0     27 92 06 F6 | 	mov	arg01, #39
131f4     00 94 06 F6 | 	mov	arg02, #0
131f8     D8 DA B0 FD | 	call	#_printerror
131fc     8C 00 90 FD | 	jmp	#LR__1633
13200                 | LR__1630
13200                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13200     02 A6 0E F2 | 	cmp	local01, #2 wz
13204     30 00 90 5D |  if_ne	jmp	#LR__1631
13208     64 A4 BF FD | 	call	#_pop
1320c     3F A7 02 F6 | 	mov	local01, result3
13210     E7 7A 62 FC | 	wrlong	result1, fp
13214     04 CE 05 F1 | 	add	fp, #4
13218     E7 7C 62 FC | 	wrlong	result2, fp
1321c     04 CE 05 F1 | 	add	fp, #4
13220     E7 A6 62 FC | 	wrlong	local01, fp
13224     08 CE 85 F1 | 	sub	fp, #8
13228     E7 92 02 F6 | 	mov	arg01, fp
1322c     1C A6 BF FD | 	call	#_converttoint
13230     3D A9 02 F6 | 	mov	local02, result1
13234     04 00 90 FD | 	jmp	#LR__1632
13238                 | LR__1631
13238     08 A8 06 F6 | 	mov	local02, #8
1323c                 | LR__1632
1323c     30 A4 BF FD | 	call	#_pop
13240     3F A7 02 F6 | 	mov	local01, result3
13244     E7 7A 62 FC | 	wrlong	result1, fp
13248     04 CE 05 F1 | 	add	fp, #4
1324c     E7 7C 62 FC | 	wrlong	result2, fp
13250     04 CE 05 F1 | 	add	fp, #4
13254     E7 A6 62 FC | 	wrlong	local01, fp
13258     08 CE 85 F1 | 	sub	fp, #8
1325c     E7 92 02 F6 | 	mov	arg01, fp
13260     E8 A5 BF FD | 	call	#_converttoint
13264     3D 93 02 F6 | 	mov	arg01, result1
13268     54 95 02 F6 | 	mov	arg02, local02
1326c     10 96 06 F6 | 	mov	arg03, #16
13270     84 32 B1 FD | 	call	#__system__Number_S
13274     E7 7A 62 FC | 	wrlong	result1, fp
13278     08 CE 05 F1 | 	add	fp, #8
1327c     E7 3E 68 FC | 	wrlong	#31, fp
13280     08 CE 85 F1 | 	sub	fp, #8
13284     E7 92 02 F6 | 	mov	arg01, fp
13288     74 A4 BF FD | 	call	#_push
1328c                 | LR__1633
1328c     E7 F0 03 F6 | 	mov	ptra, fp
13290     F2 00 A0 FD | 	call	#popregs_
13294                 | _do_hex_ret
13294     2D 00 64 FD | 	ret
13298                 | 
13298                 | ' 
13298                 | ' ' ----------------  if
13298                 | ' 
13298                 | ' sub do_if
13298                 | _do_if
13298     05 CA 05 F6 | 	mov	COUNT_, #5
1329c     E8 00 A0 FD | 	call	#pushregs_
132a0     CC A3 BF FD | 	call	#_pop
132a4     3D A7 0A F6 | 	mov	local01, result1 wz
132a8     3E A9 02 F6 | 	mov	local02, result2
132ac     3F AB 02 F6 | 	mov	local03, result3
132b0                 | ' t1=pop()
132b0                 | ' ' if uresult=0, jump over else
132b0                 | ' if t1.result.uresult = 0 then 
132b0     BC 00 90 5D |  if_ne	jmp	#LR__1642
132b4                 | '   for i=lineptr_e to lineptr-1
132b4     4C 00 00 FF 
132b8     24 64 06 F1 | 	add	objptr, ##38948
132bc     32 AD 02 FB | 	rdlong	local04, objptr
132c0     04 64 86 F1 | 	sub	objptr, #4
132c4     32 AF 02 FB | 	rdlong	local05, objptr
132c8     4C 00 00 FF 
132cc     20 64 86 F1 | 	sub	objptr, ##38944
132d0                 | LR__1640
132d0     57 AD 52 F2 | 	cmps	local04, local05 wc
132d4     78 00 90 3D |  if_ae	jmp	#LR__1641
132d8     56 7F 02 F6 | 	mov	result3, local04
132dc     01 7E 66 F0 | 	shl	result3, #1
132e0     56 7F 02 F1 | 	add	result3, local04
132e4     02 7E 66 F0 | 	shl	result3, #2
132e8     49 00 00 FF 
132ec     20 64 06 F1 | 	add	objptr, ##37408
132f0     32 7F 02 F1 | 	add	result3, objptr
132f4     3F A7 02 FB | 	rdlong	local01, result3
132f8     04 7E 06 F1 | 	add	result3, #4
132fc     3F 7D 02 FB | 	rdlong	result2, result3
13300     56 7F 02 F6 | 	mov	result3, local04
13304     01 7E 66 F0 | 	shl	result3, #1
13308     56 7F 02 F1 | 	add	result3, local04
1330c     02 7E 66 F0 | 	shl	result3, #2
13310     32 7F 02 F1 | 	add	result3, objptr
13314     08 7E 06 F1 | 	add	result3, #8
13318     3F 7F 02 FB | 	rdlong	result3, result3
1331c     3E A9 02 F6 | 	mov	local02, result2
13320     3F AB 02 F6 | 	mov	local03, result3
13324                 | '     t1=compiledline(i)
13324                 | '     if t1.result_type=token_else then lineptr_e=i : return
13324     5A AA 0E F2 | 	cmp	local03, #90 wz
13328     49 00 00 FF 
1332c     20 64 86 F1 | 	sub	objptr, ##37408
13330     4C 00 00 AF 
13334     24 64 06 A1 |  if_e	add	objptr, ##38948
13338     32 AD 62 AC |  if_e	wrlong	local04, objptr
1333c     4C 00 00 AF 
13340     24 64 86 A1 |  if_e	sub	objptr, ##38948
13344     28 00 90 AD |  if_e	jmp	#LR__1643
13348     01 AC 06 F1 | 	add	local04, #1
1334c     80 FF 9F FD | 	jmp	#LR__1640
13350                 | LR__1641
13350     4C 00 00 FF 
13354     20 64 06 F1 | 	add	objptr, ##38944
13358     32 AF 02 FB | 	rdlong	local05, objptr
1335c     01 AE 86 F1 | 	sub	local05, #1
13360     04 64 06 F1 | 	add	objptr, #4
13364     32 AF 62 FC | 	wrlong	local05, objptr
13368     4C 00 00 FF 
1336c     24 64 86 F1 | 	sub	objptr, ##38948
13370                 | LR__1642
13370                 | LR__1643
13370     E7 F0 03 F6 | 	mov	ptra, fp
13374     F2 00 A0 FD | 	call	#popregs_
13378                 | _do_if_ret
13378     2D 00 64 FD | 	ret
1337c                 | 
1337c                 | ' 
1337c                 | ' ' ----------------  inkey$
1337c                 | ' 
1337c                 | ' sub do_inkey
1337c                 | _do_inkey
1337c     02 CA 05 F6 | 	mov	COUNT_, #2
13380     E8 00 A0 FD | 	call	#pushregs_
13384     0C F0 07 F1 | 	add	ptra, #12
13388     18 0B B1 FD | 	call	#_usbnew_spin2_get_key
1338c     47 00 00 FF 
13390     18 64 06 F1 | 	add	objptr, ##36376
13394     32 7B 62 FC | 	wrlong	result1, objptr
13398                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13398     47 00 00 FF 
1339c     18 64 86 F1 | 	sub	objptr, ##36376
133a0     00 7A 0E F2 | 	cmp	result1, #0 wz
133a4     A0 00 90 AD |  if_e	jmp	#LR__1651
133a8     47 00 00 FF 
133ac     18 64 06 F1 | 	add	objptr, ##36376
133b0     32 A3 02 FB | 	rdlong	arg09, objptr
133b4     47 00 00 FF 
133b8     18 64 86 F1 | 	sub	objptr, ##36376
133bc     00 00 40 FF 
133c0     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
133c4     47 00 00 CF 
133c8     18 64 06 C1 |  if_b	add	objptr, ##36376
133cc     32 A7 02 CB |  if_b	rdlong	local01, objptr
133d0     47 00 00 CF 
133d4     18 64 86 C1 |  if_b	sub	objptr, ##36376
133d8     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
133dc     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
133e0     64 00 90 3D |  if_ae	jmp	#LR__1651
133e4                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
133e4     52 00 00 FF 
133e8     E0 64 06 F1 | 	add	objptr, ##42208
133ec     32 A3 02 FB | 	rdlong	arg09, objptr
133f0     52 00 00 FF 
133f4     E0 64 86 F1 | 	sub	objptr, ##42208
133f8     01 A2 0E F2 | 	cmp	arg09, #1 wz
133fc     48 00 90 5D |  if_ne	jmp	#LR__1650
13400     54 00 00 FF 
13404     80 64 06 F1 | 	add	objptr, ##43136
13408     32 95 02 FB | 	rdlong	arg02, objptr
1340c     04 64 86 F1 | 	sub	objptr, #4
13410     32 9B 02 FB | 	rdlong	arg05, objptr
13414     07 92 06 F6 | 	mov	arg01, #7
13418     56 00 00 FF 
1341c     44 96 06 F6 | 	mov	arg03, ##44100
13420     0C 98 C6 F9 | 	decod	arg04, #12
13424     01 9C 66 F6 | 	neg	arg06, #1
13428     01 9E 66 F6 | 	neg	arg07, #1
1342c     01 A0 66 F6 | 	neg	arg08, #1
13430     01 A2 66 F6 | 	neg	arg09, #1
13434     48 00 00 FF 
13438     B0 65 86 F1 | 	sub	objptr, ##37296
1343c     74 0E B1 FD | 	call	#_Audio2_004_spin2_play
13440     0B 00 00 FF 
13444     CC 64 86 F1 | 	sub	objptr, ##5836
13448                 | LR__1650
13448                 | LR__1651
13448                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13448     47 00 00 FF 
1344c     18 64 06 F1 | 	add	objptr, ##36376
13450     32 A3 0A FB | 	rdlong	arg09, objptr wz
13454     47 00 00 FF 
13458     18 64 86 F1 | 	sub	objptr, ##36376
1345c     D4 01 90 AD |  if_e	jmp	#LR__1660
13460     47 00 00 FF 
13464     18 64 06 F1 | 	add	objptr, ##36376
13468     32 A3 02 FB | 	rdlong	arg09, objptr
1346c     47 00 00 FF 
13470     18 64 86 F1 | 	sub	objptr, ##36376
13474     00 00 40 FF 
13478     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
1347c     47 00 00 CF 
13480     18 64 06 C1 |  if_b	add	objptr, ##36376
13484     32 A7 02 CB |  if_b	rdlong	local01, objptr
13488     47 00 00 CF 
1348c     18 64 86 C1 |  if_b	sub	objptr, ##36376
13490     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
13494     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
13498     98 01 90 3D |  if_ae	jmp	#LR__1660
1349c                 | '   if leds and 2 = 2 then 
1349c     54 00 00 FF 
134a0     BC 64 06 F1 | 	add	objptr, ##43196
134a4     32 A7 0A FB | 	rdlong	local01, objptr wz
134a8     54 00 00 FF 
134ac     BC 64 86 F1 | 	sub	objptr, ##43196
134b0     58 01 90 AD |  if_e	jmp	#LR__1659
134b4                 | '     if key>96 andalso key<123 then
134b4     47 00 00 FF 
134b8     18 64 06 F1 | 	add	objptr, ##36376
134bc     32 A7 02 FB | 	rdlong	local01, objptr
134c0     47 00 00 FF 
134c4     18 64 86 F1 | 	sub	objptr, ##36376
134c8     61 A6 16 F2 | 	cmp	local01, #97 wc
134cc     3C 00 90 CD |  if_b	jmp	#LR__1652
134d0     47 00 00 FF 
134d4     18 64 06 F1 | 	add	objptr, ##36376
134d8     32 A7 02 FB | 	rdlong	local01, objptr
134dc     47 00 00 FF 
134e0     18 64 86 F1 | 	sub	objptr, ##36376
134e4     7B A6 16 F2 | 	cmp	local01, #123 wc
134e8     20 00 90 3D |  if_ae	jmp	#LR__1652
134ec     47 00 00 FF 
134f0     18 64 06 F1 | 	add	objptr, ##36376
134f4     32 A7 02 FB | 	rdlong	local01, objptr
134f8     20 A6 86 F1 | 	sub	local01, #32
134fc     32 A7 62 FC | 	wrlong	local01, objptr
13500     47 00 00 FF 
13504     18 64 86 F1 | 	sub	objptr, ##36376
13508     00 01 90 FD | 	jmp	#LR__1658
1350c                 | LR__1652
1350c     47 00 00 FF 
13510     18 64 06 F1 | 	add	objptr, ##36376
13514     32 A7 02 FB | 	rdlong	local01, objptr
13518     47 00 00 FF 
1351c     18 64 86 F1 | 	sub	objptr, ##36376
13520     41 A6 16 F2 | 	cmp	local01, #65 wc
13524     3C 00 90 CD |  if_b	jmp	#LR__1653
13528     47 00 00 FF 
1352c     18 64 06 F1 | 	add	objptr, ##36376
13530     32 A7 02 FB | 	rdlong	local01, objptr
13534     47 00 00 FF 
13538     18 64 86 F1 | 	sub	objptr, ##36376
1353c     5B A6 16 F2 | 	cmp	local01, #91 wc
13540     20 00 90 3D |  if_ae	jmp	#LR__1653
13544     47 00 00 FF 
13548     18 64 06 F1 | 	add	objptr, ##36376
1354c     32 A7 02 FB | 	rdlong	local01, objptr
13550     20 A6 06 F1 | 	add	local01, #32
13554     32 A7 62 FC | 	wrlong	local01, objptr
13558     47 00 00 FF 
1355c     18 64 86 F1 | 	sub	objptr, ##36376
13560     A8 00 90 FD | 	jmp	#LR__1657
13564                 | LR__1653
13564     47 00 00 FF 
13568     18 64 06 F1 | 	add	objptr, ##36376
1356c     32 A7 02 FB | 	rdlong	local01, objptr
13570     47 00 00 FF 
13574     18 64 86 F1 | 	sub	objptr, ##36376
13578     17 A6 16 F2 | 	cmp	local01, #23 wc
1357c     3C 00 90 CD |  if_b	jmp	#LR__1654
13580     47 00 00 FF 
13584     18 64 06 F1 | 	add	objptr, ##36376
13588     32 A7 02 FB | 	rdlong	local01, objptr
1358c     47 00 00 FF 
13590     18 64 86 F1 | 	sub	objptr, ##36376
13594     20 A6 16 F2 | 	cmp	local01, #32 wc
13598     20 00 90 3D |  if_ae	jmp	#LR__1654
1359c     47 00 00 FF 
135a0     18 64 06 F1 | 	add	objptr, ##36376
135a4     32 A7 02 FB | 	rdlong	local01, objptr
135a8     09 A6 86 F1 | 	sub	local01, #9
135ac     32 A7 62 FC | 	wrlong	local01, objptr
135b0     47 00 00 FF 
135b4     18 64 86 F1 | 	sub	objptr, ##36376
135b8     50 00 90 FD | 	jmp	#LR__1656
135bc                 | LR__1654
135bc     47 00 00 FF 
135c0     18 64 06 F1 | 	add	objptr, ##36376
135c4     32 A9 02 FB | 	rdlong	local02, objptr
135c8     47 00 00 FF 
135cc     18 64 86 F1 | 	sub	objptr, ##36376
135d0     0E A8 16 F2 | 	cmp	local02, #14 wc
135d4     34 00 90 CD |  if_b	jmp	#LR__1655
135d8     47 00 00 FF 
135dc     18 64 06 F1 | 	add	objptr, ##36376
135e0     32 A7 02 FB | 	rdlong	local01, objptr
135e4     47 00 00 FF 
135e8     18 64 86 F1 | 	sub	objptr, ##36376
135ec     17 A6 16 F2 | 	cmp	local01, #23 wc
135f0     54 00 00 CF 
135f4     C0 64 06 C1 |  if_b	add	objptr, ##43200
135f8     32 A9 02 CB |  if_b	rdlong	local02, objptr
135fc     27 A8 06 C1 |  if_b	add	local02, #39
13600     32 A9 62 CC |  if_b	wrlong	local02, objptr
13604     54 00 00 CF 
13608     C0 64 86 C1 |  if_b	sub	objptr, ##43200
1360c                 | LR__1655
1360c                 | LR__1656
1360c                 | LR__1657
1360c                 | LR__1658
1360c                 | LR__1659
1360c     47 00 00 FF 
13610     18 64 06 F1 | 	add	objptr, ##36376
13614     32 93 02 FB | 	rdlong	arg01, objptr
13618     47 00 00 FF 
1361c     18 64 86 F1 | 	sub	objptr, ##36376
13620     FC D9 B0 FD | 	call	#_scantochar
13624     3D 93 02 F6 | 	mov	arg01, result1
13628     3C 2E B1 FD | 	call	#__system__Chr_S
1362c     E7 7A 62 FC | 	wrlong	result1, fp
13630     0C 00 90 FD | 	jmp	#LR__1661
13634                 | LR__1660
13634     97 01 00 FF 
13638     A2 A9 06 F6 | 	mov	local02, ##@LR__6021
1363c     E7 A8 62 FC | 	wrlong	local02, fp
13640                 | LR__1661
13640     08 CE 05 F1 | 	add	fp, #8
13644     E7 3E 68 FC | 	wrlong	#31, fp
13648     08 CE 85 F1 | 	sub	fp, #8
1364c     E7 92 02 F6 | 	mov	arg01, fp
13650     AC A0 BF FD | 	call	#_push
13654     E7 F0 03 F6 | 	mov	ptra, fp
13658     F2 00 A0 FD | 	call	#popregs_
1365c                 | _do_inkey_ret
1365c     2D 00 64 FD | 	ret
13660                 | 
13660                 | ' 
13660                 | ' ' ----------------  ink
13660                 | ' 
13660                 | ' sub do_ink
13660                 | _do_ink
13660     00 CA 05 F6 | 	mov	COUNT_, #0
13664     E8 00 A0 FD | 	call	#pushregs_
13668     0C F0 07 F1 | 	add	ptra, #12
1366c     00 A0 BF FD | 	call	#_pop
13670     3F 95 02 F6 | 	mov	arg02, result3
13674     E7 7A 62 FC | 	wrlong	result1, fp
13678     04 CE 05 F1 | 	add	fp, #4
1367c     E7 7C 62 FC | 	wrlong	result2, fp
13680     04 CE 05 F1 | 	add	fp, #4
13684     E7 94 62 FC | 	wrlong	arg02, fp
13688     08 CE 85 F1 | 	sub	fp, #8
1368c     E7 92 02 F6 | 	mov	arg01, fp
13690     B8 A1 BF FD | 	call	#_converttoint
13694     38 00 00 FF 
13698     E0 65 06 F1 | 	add	objptr, ##29152
1369c     32 7B 62 FC | 	wrlong	result1, objptr
136a0     04 64 86 F1 | 	sub	objptr, #4
136a4     32 95 02 FB | 	rdlong	arg02, objptr
136a8                 | ' 
136a8                 | ' write_color:=ff
136a8     38 00 00 FF 
136ac     9B 65 86 F1 | 	sub	objptr, ##29083
136b0     32 7B 62 FC | 	wrlong	result1, objptr
136b4                 | ' write_background:=bb
136b4     04 64 06 F1 | 	add	objptr, #4
136b8     32 95 62 FC | 	wrlong	arg02, objptr
136bc     38 00 00 FF 
136c0     9B 65 06 F1 | 	add	objptr, ##29083
136c4     32 93 02 FB | 	rdlong	arg01, objptr
136c8     38 00 00 FF 
136cc     E0 65 86 F1 | 	sub	objptr, ##29152
136d0     18 E2 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
136d4     E7 F0 03 F6 | 	mov	ptra, fp
136d8     F2 00 A0 FD | 	call	#popregs_
136dc                 | _do_ink_ret
136dc     2D 00 64 FD | 	ret
136e0                 | 
136e0                 | ' 
136e0                 | ' ' ----------------  int
136e0                 | ' 
136e0                 | ' sub do_int
136e0                 | _do_int
136e0     02 CA 05 F6 | 	mov	COUNT_, #2
136e4     E8 00 A0 FD | 	call	#pushregs_
136e8     10 F0 07 F1 | 	add	ptra, #16
136ec     80 9F BF FD | 	call	#_pop
136f0     3E A7 02 F6 | 	mov	local01, result2
136f4     3F A9 02 F6 | 	mov	local02, result3
136f8     E7 7A 62 FC | 	wrlong	result1, fp
136fc     04 CE 05 F1 | 	add	fp, #4
13700     E7 A6 62 FC | 	wrlong	local01, fp
13704     04 CE 05 F1 | 	add	fp, #4
13708     E7 A8 62 FC | 	wrlong	local02, fp
1370c                 | ' 
1370c                 | ' t1=pop()
1370c                 | ' select case t1.result_type
1370c     08 CE 85 F1 | 	sub	fp, #8
13710     1E A8 0E F2 | 	cmp	local02, #30 wz
13714     14 00 90 AD |  if_e	jmp	#LR__1670
13718     1F A8 0E F2 | 	cmp	local02, #31 wz
1371c     20 00 90 AD |  if_e	jmp	#LR__1671
13720     2B A8 0E F2 | 	cmp	local02, #43 wz
13724     34 00 90 AD |  if_e	jmp	#LR__1672
13728     50 00 90 FD | 	jmp	#LR__1673
1372c                 | LR__1670
1372c     E7 92 02 FB | 	rdlong	arg01, fp
13730     00 94 06 F6 | 	mov	arg02, #0
13734     5C 3E B1 FD | 	call	#__system___float_tointeger
13738     E7 7A 62 FC | 	wrlong	result1, fp
1373c     3C 00 90 FD | 	jmp	#LR__1673
13740                 | LR__1671
13740     E7 92 02 FB | 	rdlong	arg01, fp
13744     A0 41 B1 FD | 	call	#__system____builtin_atof
13748     3D 93 02 F6 | 	mov	arg01, result1
1374c     00 94 06 F6 | 	mov	arg02, #0
13750     40 3E B1 FD | 	call	#__system___float_tointeger
13754     E7 7A 62 FC | 	wrlong	result1, fp
13758     20 00 90 FD | 	jmp	#LR__1673
1375c                 | LR__1672
1375c     E7 92 02 FB | 	rdlong	arg01, fp
13760     7C A0 BF FD | 	call	#_convertstring
13764     3D 93 02 F6 | 	mov	arg01, result1
13768     7C 41 B1 FD | 	call	#__system____builtin_atof
1376c     3D 93 02 F6 | 	mov	arg01, result1
13770     00 94 06 F6 | 	mov	arg02, #0
13774     1C 3E B1 FD | 	call	#__system___float_tointeger
13778     E7 7A 62 FC | 	wrlong	result1, fp
1377c                 | LR__1673
1377c     08 CE 05 F1 | 	add	fp, #8
13780     E7 38 68 FC | 	wrlong	#28, fp
13784     08 CE 85 F1 | 	sub	fp, #8
13788     E7 92 02 F6 | 	mov	arg01, fp
1378c     70 9F BF FD | 	call	#_push
13790     E7 F0 03 F6 | 	mov	ptra, fp
13794     F2 00 A0 FD | 	call	#popregs_
13798                 | _do_int_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | ' ' ----------------  input
1379c                 | ' 
1379c                 | ' sub do_input
1379c                 | _do_input
1379c     1A CA 05 F6 | 	mov	COUNT_, #26
137a0     E8 00 A0 FD | 	call	#pushregs_
137a4     50 F1 07 F1 | 	add	ptra, #336
137a8     4C 00 00 FF 
137ac     24 64 06 F1 | 	add	objptr, ##38948
137b0     32 AD 02 FB | 	rdlong	local04, objptr
137b4     56 AF 02 F6 | 	mov	local05, local04
137b8     01 AE 66 F0 | 	shl	local05, #1
137bc     56 AF 02 F1 | 	add	local05, local04
137c0     02 AE 66 F0 | 	shl	local05, #2
137c4     03 00 00 FF 
137c8     04 64 86 F1 | 	sub	objptr, ##1540
137cc     32 B1 02 F6 | 	mov	local06, objptr
137d0     32 AF 02 F1 | 	add	local05, objptr
137d4     57 B3 02 FB | 	rdlong	local07, local05
137d8                 | ' 
137d8                 | ' numpar=compiledline(lineptr_e).result.uresult
137d8                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
137d8     01 B2 16 F2 | 	cmp	local07, #1 wc
137dc     49 00 00 FF 
137e0     20 64 86 F1 | 	sub	objptr, ##37408
137e4     08 00 90 CD |  if_b	jmp	#LR__1680
137e8     41 B2 16 F2 | 	cmp	local07, #65 wc
137ec     50 00 90 CD |  if_b	jmp	#LR__1681
137f0                 | LR__1680
137f0     00 92 06 F6 | 	mov	arg01, #0
137f4     88 67 B1 FD | 	call	#__system___getiolock_0622
137f8     3D 93 02 F6 | 	mov	arg01, result1
137fc     FC 11 B1 FD | 	call	#__system___lockmem
13800     97 01 00 FF 
13804     A3 95 06 F6 | 	mov	arg02, ##@LR__6022
13808     00 92 06 F6 | 	mov	arg01, #0
1380c     00 96 06 F6 | 	mov	arg03, #0
13810     DC 1E B1 FD | 	call	#__system___basic_print_string
13814     00 92 06 F6 | 	mov	arg01, #0
13818     64 67 B1 FD | 	call	#__system___getiolock_0622
1381c     3D 01 68 FC | 	wrlong	#0, result1
13820     52 00 00 FF 
13824     94 64 06 F1 | 	add	objptr, ##42132
13828     32 95 02 FB | 	rdlong	arg02, objptr
1382c     52 00 00 FF 
13830     94 64 86 F1 | 	sub	objptr, ##42132
13834     27 92 06 F6 | 	mov	arg01, #39
13838     98 D4 B0 FD | 	call	#_printerror
1383c     5C 08 90 FD | 	jmp	#LR__1727
13840                 | LR__1681
13840     59 B5 02 F6 | 	mov	local08, local07
13844     01 B4 86 F1 | 	sub	local08, #1
13848     3C 64 06 F1 | 	add	objptr, #60
1384c     32 AD E2 FA | 	rdword	local04, objptr
13850     56 B7 52 F6 | 	abs	local09, local04 wc
13854     01 B6 46 F0 | 	shr	local09, #1
13858     5B B7 82 F6 | 	negc	local09, local09
1385c     02 64 06 F1 | 	add	objptr, #2
13860     32 B9 C2 FA | 	rdbyte	local10, objptr
13864     3E 64 86 F1 | 	sub	objptr, #62
13868                 | ' i=numpar-1
13868                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13868                 | ' do
13868                 | LR__1682
13868     98 D0 BE FD | 	call	#_edit
1386c     3D BB 02 F6 | 	mov	local11, result1
13870                 | ' 
13870                 | '   line$=edit()
13870                 | ' 
13870                 | '   if v.cursor_y=cpy+1 then
13870     3E 64 06 F1 | 	add	objptr, #62
13874     32 97 C2 FA | 	rdbyte	arg03, objptr
13878     3E 64 86 F1 | 	sub	objptr, #62
1387c     5C AD 02 F6 | 	mov	local04, local10
13880     01 AC 06 F1 | 	add	local04, #1
13884     56 97 0A F2 | 	cmp	arg03, local04 wz
13888     5C 00 90 5D |  if_ne	jmp	#LR__1685
1388c     5D 93 02 F6 | 	mov	arg01, local11
13890     49 BD 02 F6 | 	mov	local12, arg01
13894     D7 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
13898                 | LR__1683
13898     5E 7B CA FA | 	rdbyte	result1, local12 wz
1389c     01 BC 06 51 |  if_ne	add	local12, #1
138a0     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
138a4                 | LR__1684
138a4     49 BD 82 F1 | 	sub	local12, arg01
138a8     5E 95 02 F6 | 	mov	arg02, local12
138ac     5B 95 82 F1 | 	sub	arg02, local09
138b0     38 00 00 FF 
138b4     D8 65 06 F1 | 	add	objptr, ##29144
138b8     32 AD 02 FB | 	rdlong	local04, objptr
138bc     38 00 00 FF 
138c0     D8 65 86 F1 | 	sub	objptr, ##29144
138c4     56 95 02 F1 | 	add	arg02, local04
138c8     5D 93 02 F6 | 	mov	arg01, local11
138cc     5C 2A B1 FD | 	call	#__system__Right_S
138d0     3D 93 02 F6 | 	mov	arg01, result1
138d4     5C 2E B1 FD | 	call	#__system__RTrim_S
138d8     3D 93 02 F6 | 	mov	arg01, result1
138dc     94 2D B1 FD | 	call	#__system__LTrim_S
138e0     3D BB 02 F6 | 	mov	local11, result1
138e4     14 00 90 FD | 	jmp	#LR__1686
138e8                 | LR__1685
138e8     5D 93 02 F6 | 	mov	arg01, local11
138ec     44 2E B1 FD | 	call	#__system__RTrim_S
138f0     3D 93 02 F6 | 	mov	arg01, result1
138f4     7C 2D B1 FD | 	call	#__system__LTrim_S
138f8     3D BB 02 F6 | 	mov	local11, result1
138fc                 | LR__1686
138fc                 | '   do
138fc                 | LR__1687
138fc     97 01 00 FF 
13900     AE 97 06 F6 | 	mov	arg03, ##@LR__6023
13904     01 92 06 F6 | 	mov	arg01, #1
13908     5D 95 02 F6 | 	mov	arg02, local11
1390c     DC 2E B1 FD | 	call	#__system__Instr
13910     3D BF 02 F6 | 	mov	local13, result1
13914                 | '    comma=instr(1,line$,",")  
13914                 | '    if comma>0  then 
13914     01 BE 16 F2 | 	cmp	local13, #1 wc
13918     48 00 90 CD |  if_b	jmp	#LR__1690
1391c     5F 95 02 F6 | 	mov	arg02, local13
13920     01 94 86 F1 | 	sub	arg02, #1
13924     5D 93 02 F6 | 	mov	arg01, local11
13928     78 29 B1 FD | 	call	#__system__Left_S
1392c     3D C1 02 F6 | 	mov	local14, result1
13930     5D 93 02 F6 | 	mov	arg01, local11
13934     49 BD 02 F6 | 	mov	local12, arg01
13938     D7 06 48 FB | 	callpa	#(@LR__1689-@LR__1688)>>2,fcache_load_ptr_
1393c                 | LR__1688
1393c     5E 7B CA FA | 	rdbyte	result1, local12 wz
13940     01 BC 06 51 |  if_ne	add	local12, #1
13944     F4 FF 9F 5D |  if_ne	jmp	#LR__1688
13948                 | LR__1689
13948     49 BD 82 F1 | 	sub	local12, arg01
1394c     5E 95 02 F6 | 	mov	arg02, local12
13950     5F 95 82 F1 | 	sub	arg02, local13
13954     5D 93 02 F6 | 	mov	arg01, local11
13958     D0 29 B1 FD | 	call	#__system__Right_S
1395c     3D BB 02 F6 | 	mov	local11, result1
13960     1C 00 90 FD | 	jmp	#LR__1691
13964                 | LR__1690
13964     5D 93 02 F6 | 	mov	arg01, local11
13968     C8 2D B1 FD | 	call	#__system__RTrim_S
1396c     3D 93 02 F6 | 	mov	arg01, result1
13970     00 2D B1 FD | 	call	#__system__LTrim_S
13974     3D C1 02 F6 | 	mov	local14, result1
13978     97 01 00 FF 
1397c     B0 BB 06 F6 | 	mov	local11, ##@LR__6024
13980                 | LR__1691
13980     5A 95 02 F6 | 	mov	arg02, local08
13984     02 94 66 F0 | 	shl	arg02, #2
13988     E7 AC 02 F6 | 	mov	local04, fp
1398c     2C AC 06 F1 | 	add	local04, #44
13990     56 95 02 F1 | 	add	arg02, local04
13994     4A C1 62 FC | 	wrlong	local14, arg02
13998     01 B4 86 F1 | 	sub	local08, #1
1399c     00 B4 56 F2 | 	cmps	local08, #0 wc
139a0     18 00 90 CD |  if_b	jmp	#LR__1692
139a4     97 01 00 FF 
139a8     B1 95 06 F6 | 	mov	arg02, ##@LR__6025
139ac     5D 93 02 F6 | 	mov	arg01, local11
139b0     70 10 B1 FD | 	call	#__system___string_cmp
139b4     00 7A 0E F2 | 	cmp	result1, #0 wz
139b8     40 FF 9F 5D |  if_ne	jmp	#LR__1687
139bc                 | LR__1692
139bc     00 B4 56 F2 | 	cmps	local08, #0 wc
139c0     A4 FE 9F 3D |  if_ae	jmp	#LR__1682
139c4                 | ' 
139c4                 | ' for i=0 to numpar-1
139c4     00 B4 06 F6 | 	mov	local08, #0
139c8     59 C3 02 F6 | 	mov	local15, local07
139cc                 | LR__1693
139cc     61 B5 52 F2 | 	cmps	local08, local15 wc
139d0     C8 06 90 3D |  if_ae	jmp	#LR__1726
139d4                 | ' 
139d4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
139d4     5A AF 02 F6 | 	mov	local05, local08
139d8     02 AE 66 F0 | 	shl	local05, #2
139dc     E7 B0 02 F6 | 	mov	local06, fp
139e0     2C B0 06 F1 | 	add	local06, #44
139e4     58 AF 02 F1 | 	add	local05, local06
139e8     57 93 02 FB | 	rdlong	arg01, local05
139ec     64 30 BF FD | 	call	#_isnum
139f0     3D B1 02 F6 | 	mov	local06, result1
139f4     5A C5 02 F6 | 	mov	local16, local08
139f8     02 C4 66 F0 | 	shl	local16, #2
139fc     E7 C6 02 F6 | 	mov	local17, fp
13a00     2C C6 06 F1 | 	add	local17, #44
13a04     63 C5 02 F1 | 	add	local16, local17
13a08     62 93 02 FB | 	rdlong	arg01, local16
13a0c     30 34 BF FD | 	call	#_isint
13a10     07 7A 66 F7 | 	signx	result1, #7
13a14     3D B1 2A F5 | 	andn	local06, result1 wz
13a18     54 00 00 5F 
13a1c     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a20     32 3D 68 5C |  if_ne	wrlong	#30, objptr
13a24     54 00 00 5F 
13a28     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a2c                 | '   if isint(args(i)) then r=result_int 
13a2c     5A AD 02 F6 | 	mov	local04, local08
13a30     02 AC 66 F0 | 	shl	local04, #2
13a34     E7 AE 02 F6 | 	mov	local05, fp
13a38     2C AE 06 F1 | 	add	local05, #44
13a3c     57 AD 02 F1 | 	add	local04, local05
13a40     56 93 02 FB | 	rdlong	arg01, local04
13a44     F8 33 BF FD | 	call	#_isint
13a48     00 7A 0E F2 | 	cmp	result1, #0 wz
13a4c     54 00 00 5F 
13a50     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a54     32 39 68 5C |  if_ne	wrlong	#28, objptr
13a58     54 00 00 5F 
13a5c     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a60                 | '   if isdec(args(i)) then r=result_uint 
13a60     5A AD 02 F6 | 	mov	local04, local08
13a64     02 AC 66 F0 | 	shl	local04, #2
13a68     E7 AE 02 F6 | 	mov	local05, fp
13a6c     2C AE 06 F1 | 	add	local05, #44
13a70     57 AD 02 F1 | 	add	local04, local05
13a74     56 93 02 FB | 	rdlong	arg01, local04
13a78     68 36 BF FD | 	call	#_isdec
13a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
13a80     54 00 00 5F 
13a84     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a88     32 3B 68 5C |  if_ne	wrlong	#29, objptr
13a8c     54 00 00 5F 
13a90     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a94                 | '   if not isnum(args(i)) then 
13a94     5A AF 02 F6 | 	mov	local05, local08
13a98     02 AE 66 F0 | 	shl	local05, #2
13a9c     E7 B0 02 F6 | 	mov	local06, fp
13aa0     2C B0 06 F1 | 	add	local06, #44
13aa4     58 AF 02 F1 | 	add	local05, local06
13aa8     57 93 02 FB | 	rdlong	arg01, local05
13aac     A4 2F BF FD | 	call	#_isnum
13ab0     07 7A 66 F7 | 	signx	result1, #7
13ab4     3D 7B 22 F6 | 	not	result1, result1
13ab8     00 7A 0E F2 | 	cmp	result1, #0 wz
13abc     E8 00 90 AD |  if_e	jmp	#LR__1698
13ac0     54 00 00 FF 
13ac4     EC 64 06 F1 | 	add	objptr, ##43244
13ac8     32 57 68 FC | 	wrlong	#43, objptr
13acc     54 00 00 FF 
13ad0     EC 64 86 F1 | 	sub	objptr, ##43244
13ad4     60 93 02 F6 | 	mov	arg01, local14
13ad8     49 BD 02 F6 | 	mov	local12, arg01
13adc     D7 06 48 FB | 	callpa	#(@LR__1695-@LR__1694)>>2,fcache_load_ptr_
13ae0                 | LR__1694
13ae0     5E 7B CA FA | 	rdbyte	result1, local12 wz
13ae4     01 BC 06 51 |  if_ne	add	local12, #1
13ae8     F4 FF 9F 5D |  if_ne	jmp	#LR__1694
13aec                 | LR__1695
13aec     49 BD 82 F1 | 	sub	local12, arg01
13af0     5E C9 02 F6 | 	mov	local18, local12
13af4     54 00 00 FF 
13af8     74 64 06 F1 | 	add	objptr, ##43124
13afc     32 93 02 FB | 	rdlong	arg01, objptr
13b00     64 93 82 F1 | 	sub	arg01, local18
13b04     04 92 86 F1 | 	sub	arg01, #4
13b08     03 92 26 F5 | 	andn	arg01, #3
13b0c     32 93 62 FC | 	wrlong	arg01, objptr
13b10     54 00 00 FF 
13b14     74 64 86 F1 | 	sub	objptr, ##43124
13b18     64 95 02 F6 | 	mov	arg02, local18
13b1c     50 D3 B0 FD | 	call	#_pslpoke
13b20                 | '     pslpoke memtop,l
13b20                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13b20     01 CA 06 F6 | 	mov	local19, #1
13b24     64 CD 02 F6 | 	mov	local20, local18
13b28     01 CC 06 F1 | 	add	local20, #1
13b2c                 | LR__1696
13b2c     66 CB 52 F2 | 	cmps	local19, local20 wc
13b30     60 00 90 3D |  if_ae	jmp	#LR__1697
13b34     54 00 00 FF 
13b38     74 64 06 F1 | 	add	objptr, ##43124
13b3c     32 AD 02 FB | 	rdlong	local04, objptr
13b40     54 00 00 FF 
13b44     74 64 86 F1 | 	sub	objptr, ##43124
13b48     03 AC 06 F1 | 	add	local04, #3
13b4c     65 AD 02 F1 | 	add	local04, local19
13b50     5A C5 02 F6 | 	mov	local16, local08
13b54     02 C4 66 F0 | 	shl	local16, #2
13b58     E7 C6 02 F6 | 	mov	local17, fp
13b5c     2C C6 06 F1 | 	add	local17, #44
13b60     63 C5 02 F1 | 	add	local16, local17
13b64     62 93 02 FB | 	rdlong	arg01, local16
13b68     65 B1 02 F6 | 	mov	local06, local19
13b6c     01 C4 06 F6 | 	mov	local16, #1
13b70     58 95 02 F6 | 	mov	arg02, local06
13b74     01 96 06 F6 | 	mov	arg03, #1
13b78     40 28 B1 FD | 	call	#__system__Mid_S
13b7c     3D AF 02 F6 | 	mov	local05, result1
13b80     57 95 C2 FA | 	rdbyte	arg02, local05
13b84     56 93 02 F6 | 	mov	arg01, local04
13b88     74 D3 B0 FD | 	call	#_pspoke
13b8c     01 CA 06 F1 | 	add	local19, #1
13b90     98 FF 9F FD | 	jmp	#LR__1696
13b94                 | LR__1697
13b94     54 00 00 FF 
13b98     74 64 06 F1 | 	add	objptr, ##43124
13b9c     32 CF 02 FB | 	rdlong	local21, objptr
13ba0     54 00 00 FF 
13ba4     74 64 86 F1 | 	sub	objptr, ##43124
13ba8                 | LR__1698
13ba8     C4 9A BF FD | 	call	#_pop
13bac     3D D1 02 F6 | 	mov	local22, result1
13bb0     3E D3 02 F6 | 	mov	local23, result2
13bb4     3F AD 02 F6 | 	mov	local04, result3
13bb8     68 A7 02 F6 | 	mov	local01, local22
13bbc     69 A9 02 F6 | 	mov	local02, local23
13bc0     56 AB 02 F6 | 	mov	local03, local04
13bc4     54 D5 02 F6 | 	mov	local24, local02
13bc8                 | '   t1=pop() : vartype=t1.result.twowords(1)
13bc8                 | '   select case vartype
13bc8     6A D7 0A F6 | 	mov	local25, local24 wz
13bcc     64 00 90 AD |  if_e	jmp	#LR__1699
13bd0     00 D7 0E F2 | 	cmp	local25, #256 wz
13bd4     64 00 90 AD |  if_e	jmp	#LR__1700
13bd8     01 D7 0E F2 | 	cmp	local25, #257 wz
13bdc     64 00 90 AD |  if_e	jmp	#LR__1701
13be0     02 D7 0E F2 | 	cmp	local25, #258 wz
13be4     64 00 90 AD |  if_e	jmp	#LR__1702
13be8     03 D7 0E F2 | 	cmp	local25, #259 wz
13bec     64 00 90 AD |  if_e	jmp	#LR__1703
13bf0     04 D7 0E F2 | 	cmp	local25, #260 wz
13bf4     64 00 90 AD |  if_e	jmp	#LR__1704
13bf8     05 D7 0E F2 | 	cmp	local25, #261 wz
13bfc     64 00 90 AD |  if_e	jmp	#LR__1705
13c00     06 D7 0E F2 | 	cmp	local25, #262 wz
13c04     64 00 90 AD |  if_e	jmp	#LR__1706
13c08     07 D7 0E F2 | 	cmp	local25, #263 wz
13c0c     64 00 90 AD |  if_e	jmp	#LR__1707
13c10     08 D7 0E F2 | 	cmp	local25, #264 wz
13c14     64 00 90 AD |  if_e	jmp	#LR__1708
13c18     09 D7 0E F2 | 	cmp	local25, #265 wz
13c1c     64 00 90 AD |  if_e	jmp	#LR__1709
13c20     0A D7 0E F2 | 	cmp	local25, #266 wz
13c24     64 00 90 AD |  if_e	jmp	#LR__1710
13c28     0B D7 0E F2 | 	cmp	local25, #267 wz
13c2c     64 00 90 AD |  if_e	jmp	#LR__1711
13c30     68 00 90 FD | 	jmp	#LR__1712
13c34                 | LR__1699
13c34     0C D8 06 F6 | 	mov	local26, #12
13c38     64 00 90 FD | 	jmp	#LR__1713
13c3c                 | LR__1700
13c3c     0C D8 06 F6 | 	mov	local26, #12
13c40     5C 00 90 FD | 	jmp	#LR__1713
13c44                 | LR__1701
13c44     01 D8 06 F6 | 	mov	local26, #1
13c48     54 00 90 FD | 	jmp	#LR__1713
13c4c                 | LR__1702
13c4c     01 D8 06 F6 | 	mov	local26, #1
13c50     4C 00 90 FD | 	jmp	#LR__1713
13c54                 | LR__1703
13c54     02 D8 06 F6 | 	mov	local26, #2
13c58     44 00 90 FD | 	jmp	#LR__1713
13c5c                 | LR__1704
13c5c     02 D8 06 F6 | 	mov	local26, #2
13c60     3C 00 90 FD | 	jmp	#LR__1713
13c64                 | LR__1705
13c64     04 D8 06 F6 | 	mov	local26, #4
13c68     34 00 90 FD | 	jmp	#LR__1713
13c6c                 | LR__1706
13c6c     04 D8 06 F6 | 	mov	local26, #4
13c70     2C 00 90 FD | 	jmp	#LR__1713
13c74                 | LR__1707
13c74     08 D8 06 F6 | 	mov	local26, #8
13c78     24 00 90 FD | 	jmp	#LR__1713
13c7c                 | LR__1708
13c7c     08 D8 06 F6 | 	mov	local26, #8
13c80     1C 00 90 FD | 	jmp	#LR__1713
13c84                 | LR__1709
13c84     06 D8 06 F6 | 	mov	local26, #6
13c88     14 00 90 FD | 	jmp	#LR__1713
13c8c                 | LR__1710
13c8c     08 D8 06 F6 | 	mov	local26, #8
13c90     0C 00 90 FD | 	jmp	#LR__1713
13c94                 | LR__1711
13c94     05 D8 06 F6 | 	mov	local26, #5
13c98     04 00 90 FD | 	jmp	#LR__1713
13c9c                 | LR__1712
13c9c     0C D8 06 F6 | 	mov	local26, #12
13ca0                 | LR__1713
13ca0                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13ca0     0C D8 0E F2 | 	cmp	local26, #12 wz
13ca4     34 01 90 5D |  if_ne	jmp	#LR__1717
13ca8     00 04 00 FF 
13cac     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13cb0     28 01 90 3D |  if_ae	jmp	#LR__1717
13cb4                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13cb4     54 00 00 FF 
13cb8     EC 64 06 F1 | 	add	objptr, ##43244
13cbc     32 D1 02 FB | 	rdlong	local22, objptr
13cc0     54 00 00 FF 
13cc4     EC 64 86 F1 | 	sub	objptr, ##43244
13cc8     1C D0 0E F2 | 	cmp	local22, #28 wz
13ccc     2C 00 90 5D |  if_ne	jmp	#LR__1714
13cd0     5A AF 02 F6 | 	mov	local05, local08
13cd4     02 AE 66 F0 | 	shl	local05, #2
13cd8     E7 B0 02 F6 | 	mov	local06, fp
13cdc     2C B0 06 F1 | 	add	local06, #44
13ce0     58 AF 02 F1 | 	add	local05, local06
13ce4     57 93 02 FB | 	rdlong	arg01, local05
13ce8     00 94 06 F6 | 	mov	arg02, #0
13cec     60 3A B1 FD | 	call	#__system____builtin_atoi
13cf0     3D 95 02 F6 | 	mov	arg02, result1
13cf4     53 93 02 F6 | 	mov	arg01, local01
13cf8     49 95 62 FC | 	wrlong	arg02, arg01
13cfc                 | LR__1714
13cfc                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13cfc     54 00 00 FF 
13d00     EC 64 06 F1 | 	add	objptr, ##43244
13d04     32 D1 02 FB | 	rdlong	local22, objptr
13d08     54 00 00 FF 
13d0c     EC 64 86 F1 | 	sub	objptr, ##43244
13d10     1D D0 0E F2 | 	cmp	local22, #29 wz
13d14     2C 00 90 5D |  if_ne	jmp	#LR__1715
13d18     5A AF 02 F6 | 	mov	local05, local08
13d1c     02 AE 66 F0 | 	shl	local05, #2
13d20     E7 B0 02 F6 | 	mov	local06, fp
13d24     2C B0 06 F1 | 	add	local06, #44
13d28     58 AF 02 F1 | 	add	local05, local06
13d2c     57 93 02 FB | 	rdlong	arg01, local05
13d30     00 94 06 F6 | 	mov	arg02, #0
13d34     18 3A B1 FD | 	call	#__system____builtin_atoi
13d38     3D 95 02 F6 | 	mov	arg02, result1
13d3c     53 93 02 F6 | 	mov	arg01, local01
13d40     49 95 62 FC | 	wrlong	arg02, arg01
13d44                 | LR__1715
13d44                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13d44     54 00 00 FF 
13d48     EC 64 06 F1 | 	add	objptr, ##43244
13d4c     32 D1 02 FB | 	rdlong	local22, objptr
13d50     54 00 00 FF 
13d54     EC 64 86 F1 | 	sub	objptr, ##43244
13d58     1E D0 0E F2 | 	cmp	local22, #30 wz
13d5c     3C 00 90 5D |  if_ne	jmp	#LR__1716
13d60     5A AD 02 F6 | 	mov	local04, local08
13d64     02 AC 66 F0 | 	shl	local04, #2
13d68     E7 AE 02 F6 | 	mov	local05, fp
13d6c     2C AE 06 F1 | 	add	local05, #44
13d70     57 AD 02 F1 | 	add	local04, local05
13d74     56 93 02 FB | 	rdlong	arg01, local04
13d78     6C 3B B1 FD | 	call	#__system____builtin_atof
13d7c     28 CE 05 F1 | 	add	fp, #40
13d80     E7 7A 62 FC | 	wrlong	result1, fp
13d84     E7 92 02 F6 | 	mov	arg01, fp
13d88     28 CE 85 F1 | 	sub	fp, #40
13d8c     49 7B 02 FB | 	rdlong	result1, arg01
13d90     3D 95 02 F6 | 	mov	arg02, result1
13d94     53 93 02 F6 | 	mov	arg01, local01
13d98     49 95 62 FC | 	wrlong	arg02, arg01
13d9c                 | LR__1716
13d9c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13d9c     54 00 00 FF 
13da0     EC 64 06 F1 | 	add	objptr, ##43244
13da4     32 D1 02 FB | 	rdlong	local22, objptr
13da8     2B D0 0E F2 | 	cmp	local22, #43 wz
13dac     53 93 02 A6 |  if_e	mov	arg01, local01
13db0     67 95 02 A6 |  if_e	mov	arg02, local21
13db4     49 95 62 AC |  if_e	wrlong	arg02, arg01
13db8     53 D1 02 F6 | 	mov	local22, local01
13dbc     08 D0 06 F1 | 	add	local22, #8
13dc0     32 AD 02 FB | 	rdlong	local04, objptr
13dc4     54 00 00 FF 
13dc8     EC 64 86 F1 | 	sub	objptr, ##43244
13dcc     56 D3 02 F6 | 	mov	local23, local04
13dd0     68 93 02 F6 | 	mov	arg01, local22
13dd4     69 95 02 F6 | 	mov	arg02, local23
13dd8     49 95 62 FC | 	wrlong	arg02, arg01
13ddc                 | LR__1717
13ddc                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13ddc     0C D8 0E F2 | 	cmp	local26, #12 wz
13de0     38 01 90 5D |  if_ne	jmp	#LR__1721
13de4     00 04 00 FF 
13de8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13dec     2C 01 90 CD |  if_b	jmp	#LR__1721
13df0                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13df0     54 00 00 FF 
13df4     EC 64 06 F1 | 	add	objptr, ##43244
13df8     32 D1 02 FB | 	rdlong	local22, objptr
13dfc     54 00 00 FF 
13e00     EC 64 86 F1 | 	sub	objptr, ##43244
13e04     1C D0 0E F2 | 	cmp	local22, #28 wz
13e08     2C 00 90 5D |  if_ne	jmp	#LR__1718
13e0c     5A AF 02 F6 | 	mov	local05, local08
13e10     02 AE 66 F0 | 	shl	local05, #2
13e14     E7 B0 02 F6 | 	mov	local06, fp
13e18     2C B0 06 F1 | 	add	local06, #44
13e1c     58 AF 02 F1 | 	add	local05, local06
13e20     57 93 02 FB | 	rdlong	arg01, local05
13e24     00 94 06 F6 | 	mov	arg02, #0
13e28     24 39 B1 FD | 	call	#__system____builtin_atoi
13e2c     3D 95 02 F6 | 	mov	arg02, result1
13e30     53 93 02 F6 | 	mov	arg01, local01
13e34     38 D0 B0 FD | 	call	#_pslpoke
13e38                 | LR__1718
13e38                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e38     54 00 00 FF 
13e3c     EC 64 06 F1 | 	add	objptr, ##43244
13e40     32 D1 02 FB | 	rdlong	local22, objptr
13e44     54 00 00 FF 
13e48     EC 64 86 F1 | 	sub	objptr, ##43244
13e4c     1D D0 0E F2 | 	cmp	local22, #29 wz
13e50     2C 00 90 5D |  if_ne	jmp	#LR__1719
13e54     5A AF 02 F6 | 	mov	local05, local08
13e58     02 AE 66 F0 | 	shl	local05, #2
13e5c     E7 B0 02 F6 | 	mov	local06, fp
13e60     2C B0 06 F1 | 	add	local06, #44
13e64     58 AF 02 F1 | 	add	local05, local06
13e68     57 93 02 FB | 	rdlong	arg01, local05
13e6c     00 94 06 F6 | 	mov	arg02, #0
13e70     DC 38 B1 FD | 	call	#__system____builtin_atoi
13e74     3D 95 02 F6 | 	mov	arg02, result1
13e78     53 93 02 F6 | 	mov	arg01, local01
13e7c     F0 CF B0 FD | 	call	#_pslpoke
13e80                 | LR__1719
13e80                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e80     54 00 00 FF 
13e84     EC 64 06 F1 | 	add	objptr, ##43244
13e88     32 D1 02 FB | 	rdlong	local22, objptr
13e8c     54 00 00 FF 
13e90     EC 64 86 F1 | 	sub	objptr, ##43244
13e94     1E D0 0E F2 | 	cmp	local22, #30 wz
13e98     38 00 90 5D |  if_ne	jmp	#LR__1720
13e9c     5A AD 02 F6 | 	mov	local04, local08
13ea0     02 AC 66 F0 | 	shl	local04, #2
13ea4     E7 AE 02 F6 | 	mov	local05, fp
13ea8     2C AE 06 F1 | 	add	local05, #44
13eac     57 AD 02 F1 | 	add	local04, local05
13eb0     56 93 02 FB | 	rdlong	arg01, local04
13eb4     30 3A B1 FD | 	call	#__system____builtin_atof
13eb8     28 CE 05 F1 | 	add	fp, #40
13ebc     E7 7A 62 FC | 	wrlong	result1, fp
13ec0     E7 92 02 F6 | 	mov	arg01, fp
13ec4     28 CE 85 F1 | 	sub	fp, #40
13ec8     49 95 02 FB | 	rdlong	arg02, arg01
13ecc     53 93 02 F6 | 	mov	arg01, local01
13ed0     9C CF B0 FD | 	call	#_pslpoke
13ed4                 | LR__1720
13ed4                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13ed4     54 00 00 FF 
13ed8     EC 64 06 F1 | 	add	objptr, ##43244
13edc     32 D1 02 FB | 	rdlong	local22, objptr
13ee0     54 00 00 FF 
13ee4     EC 64 86 F1 | 	sub	objptr, ##43244
13ee8     2B D0 0E F2 | 	cmp	local22, #43 wz
13eec     53 93 02 A6 |  if_e	mov	arg01, local01
13ef0     67 95 02 A6 |  if_e	mov	arg02, local21
13ef4     78 CF B0 AD |  if_e	call	#_pslpoke
13ef8     53 93 02 F6 | 	mov	arg01, local01
13efc     08 92 06 F1 | 	add	arg01, #8
13f00     54 00 00 FF 
13f04     EC 64 06 F1 | 	add	objptr, ##43244
13f08     32 D3 02 FB | 	rdlong	local23, objptr
13f0c     54 00 00 FF 
13f10     EC 64 86 F1 | 	sub	objptr, ##43244
13f14     69 95 02 F6 | 	mov	arg02, local23
13f18     54 CF B0 FD | 	call	#_pslpoke
13f1c                 | LR__1721
13f1c                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f1c     05 D8 0E F2 | 	cmp	local26, #5 wz
13f20     54 00 00 AF 
13f24     EC 64 06 A1 |  if_e	add	objptr, ##43244
13f28     32 D3 02 AB |  if_e	rdlong	local23, objptr
13f2c     54 00 00 AF 
13f30     EC 64 86 A1 |  if_e	sub	objptr, ##43244
13f34     2B D2 0E A2 |  if_e	cmp	local23, #43 wz
13f38     67 D3 02 A6 |  if_e	mov	local23, local21
13f3c     53 93 02 A6 |  if_e	mov	arg01, local01
13f40     69 95 02 A6 |  if_e	mov	arg02, local23
13f44     28 CF B0 AD |  if_e	call	#_pslpoke
13f48                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f48     04 D8 0E F2 | 	cmp	local26, #4 wz
13f4c     48 00 90 5D |  if_ne	jmp	#LR__1722
13f50     54 00 00 FF 
13f54     EC 64 06 F1 | 	add	objptr, ##43244
13f58     32 D3 02 FB | 	rdlong	local23, objptr
13f5c     54 00 00 FF 
13f60     EC 64 86 F1 | 	sub	objptr, ##43244
13f64     2B D2 0E F2 | 	cmp	local23, #43 wz
13f68     2C 00 90 AD |  if_e	jmp	#LR__1722
13f6c     5A AF 02 F6 | 	mov	local05, local08
13f70     02 AE 66 F0 | 	shl	local05, #2
13f74     E7 B0 02 F6 | 	mov	local06, fp
13f78     2C B0 06 F1 | 	add	local06, #44
13f7c     58 AF 02 F1 | 	add	local05, local06
13f80     57 93 02 FB | 	rdlong	arg01, local05
13f84     00 94 06 F6 | 	mov	arg02, #0
13f88     C4 37 B1 FD | 	call	#__system____builtin_atoi
13f8c     3D 95 02 F6 | 	mov	arg02, result1
13f90     53 93 02 F6 | 	mov	arg01, local01
13f94     D8 CE B0 FD | 	call	#_pslpoke
13f98                 | LR__1722
13f98                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13f98     02 D8 0E F2 | 	cmp	local26, #2 wz
13f9c     48 00 90 5D |  if_ne	jmp	#LR__1723
13fa0     54 00 00 FF 
13fa4     EC 64 06 F1 | 	add	objptr, ##43244
13fa8     32 D3 02 FB | 	rdlong	local23, objptr
13fac     54 00 00 FF 
13fb0     EC 64 86 F1 | 	sub	objptr, ##43244
13fb4     2B D2 0E F2 | 	cmp	local23, #43 wz
13fb8     2C 00 90 AD |  if_e	jmp	#LR__1723
13fbc     5A AF 02 F6 | 	mov	local05, local08
13fc0     02 AE 66 F0 | 	shl	local05, #2
13fc4     E7 B0 02 F6 | 	mov	local06, fp
13fc8     2C B0 06 F1 | 	add	local06, #44
13fcc     58 AF 02 F1 | 	add	local05, local06
13fd0     57 93 02 FB | 	rdlong	arg01, local05
13fd4     00 94 06 F6 | 	mov	arg02, #0
13fd8     74 37 B1 FD | 	call	#__system____builtin_atoi
13fdc     3D 95 02 F6 | 	mov	arg02, result1
13fe0     53 93 02 F6 | 	mov	arg01, local01
13fe4     D0 CE B0 FD | 	call	#_psdpoke
13fe8                 | LR__1723
13fe8                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13fe8     01 D8 0E F2 | 	cmp	local26, #1 wz
13fec     48 00 90 5D |  if_ne	jmp	#LR__1724
13ff0     54 00 00 FF 
13ff4     EC 64 06 F1 | 	add	objptr, ##43244
13ff8     32 D3 02 FB | 	rdlong	local23, objptr
13ffc     54 00 00 FF 
14000     EC 64 86 F1 | 	sub	objptr, ##43244
14004     2B D2 0E F2 | 	cmp	local23, #43 wz
14008     2C 00 90 AD |  if_e	jmp	#LR__1724
1400c     5A AF 02 F6 | 	mov	local05, local08
14010     02 AE 66 F0 | 	shl	local05, #2
14014     E7 B0 02 F6 | 	mov	local06, fp
14018     2C B0 06 F1 | 	add	local06, #44
1401c     58 AF 02 F1 | 	add	local05, local06
14020     57 93 02 FB | 	rdlong	arg01, local05
14024     00 94 06 F6 | 	mov	arg02, #0
14028     24 37 B1 FD | 	call	#__system____builtin_atoi
1402c     3D 95 02 F6 | 	mov	arg02, result1
14030     53 93 02 F6 | 	mov	arg01, local01
14034     C8 CE B0 FD | 	call	#_pspoke
14038                 | LR__1724
14038                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14038     06 D8 0E F2 | 	cmp	local26, #6 wz
1403c     54 00 90 5D |  if_ne	jmp	#LR__1725
14040     54 00 00 FF 
14044     EC 64 06 F1 | 	add	objptr, ##43244
14048     32 D3 02 FB | 	rdlong	local23, objptr
1404c     54 00 00 FF 
14050     EC 64 86 F1 | 	sub	objptr, ##43244
14054     2B D2 0E F2 | 	cmp	local23, #43 wz
14058     38 00 90 AD |  if_e	jmp	#LR__1725
1405c     5A AD 02 F6 | 	mov	local04, local08
14060     02 AC 66 F0 | 	shl	local04, #2
14064     E7 AE 02 F6 | 	mov	local05, fp
14068     2C AE 06 F1 | 	add	local05, #44
1406c     57 AD 02 F1 | 	add	local04, local05
14070     56 93 02 FB | 	rdlong	arg01, local04
14074     70 38 B1 FD | 	call	#__system____builtin_atof
14078     28 CE 05 F1 | 	add	fp, #40
1407c     E7 7A 62 FC | 	wrlong	result1, fp
14080     E7 92 02 F6 | 	mov	arg01, fp
14084     28 CE 85 F1 | 	sub	fp, #40
14088     49 95 02 FB | 	rdlong	arg02, arg01
1408c     53 93 02 F6 | 	mov	arg01, local01
14090     DC CD B0 FD | 	call	#_pslpoke
14094                 | LR__1725
14094     01 B4 06 F1 | 	add	local08, #1
14098     30 F9 9F FD | 	jmp	#LR__1693
1409c                 | LR__1726
1409c                 | LR__1727
1409c     E7 F0 03 F6 | 	mov	ptra, fp
140a0     F2 00 A0 FD | 	call	#popregs_
140a4                 | _do_input_ret
140a4     2D 00 64 FD | 	ret
140a8                 | 
140a8                 | ' 
140a8                 | ' ' ----------------  left$
140a8                 | ' 
140a8                 | ' sub do_left
140a8                 | _do_left
140a8     01 CA 05 F6 | 	mov	COUNT_, #1
140ac     E8 00 A0 FD | 	call	#pushregs_
140b0     14 F0 07 F1 | 	add	ptra, #20
140b4     4C 00 00 FF 
140b8     24 64 06 F1 | 	add	objptr, ##38948
140bc     32 97 02 FB | 	rdlong	arg03, objptr
140c0     4B 95 02 F6 | 	mov	arg02, arg03
140c4     01 94 66 F0 | 	shl	arg02, #1
140c8     4B 95 02 F1 | 	add	arg02, arg03
140cc     02 94 66 F0 | 	shl	arg02, #2
140d0     03 00 00 FF 
140d4     04 64 86 F1 | 	sub	objptr, ##1540
140d8     32 95 02 F1 | 	add	arg02, objptr
140dc     4A 97 02 FB | 	rdlong	arg03, arg02
140e0                 | ' 
140e0                 | ' numpar=compiledline(lineptr_e).result.uresult
140e0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140e0     02 96 0E F2 | 	cmp	arg03, #2 wz
140e4     49 00 00 FF 
140e8     20 64 86 F1 | 	sub	objptr, ##37408
140ec     40 00 90 AD |  if_e	jmp	#LR__1730
140f0     00 92 06 F6 | 	mov	arg01, #0
140f4     88 5E B1 FD | 	call	#__system___getiolock_0622
140f8     3D 93 02 F6 | 	mov	arg01, result1
140fc     FC 08 B1 FD | 	call	#__system___lockmem
14100     97 01 00 FF 
14104     B2 95 06 F6 | 	mov	arg02, ##@LR__6026
14108     00 92 06 F6 | 	mov	arg01, #0
1410c     00 96 06 F6 | 	mov	arg03, #0
14110     DC 15 B1 FD | 	call	#__system___basic_print_string
14114     00 92 06 F6 | 	mov	arg01, #0
14118     64 5E B1 FD | 	call	#__system___getiolock_0622
1411c     3D 01 68 FC | 	wrlong	#0, result1
14120     27 92 06 F6 | 	mov	arg01, #39
14124     00 94 06 F6 | 	mov	arg02, #0
14128     A8 CB B0 FD | 	call	#_printerror
1412c     D8 00 90 FD | 	jmp	#LR__1733
14130                 | LR__1730
14130     3C 95 BF FD | 	call	#_pop
14134     3F 97 02 F6 | 	mov	arg03, result3
14138     E7 7A 62 FC | 	wrlong	result1, fp
1413c     04 CE 05 F1 | 	add	fp, #4
14140     E7 7C 62 FC | 	wrlong	result2, fp
14144     04 CE 05 F1 | 	add	fp, #4
14148     E7 96 62 FC | 	wrlong	arg03, fp
1414c     08 CE 85 F1 | 	sub	fp, #8
14150     E7 92 02 F6 | 	mov	arg01, fp
14154     F4 96 BF FD | 	call	#_converttoint
14158     3D A7 02 F6 | 	mov	local01, result1
1415c     10 95 BF FD | 	call	#_pop
14160     3F 97 02 F6 | 	mov	arg03, result3
14164     E7 7A 62 FC | 	wrlong	result1, fp
14168     04 CE 05 F1 | 	add	fp, #4
1416c     E7 7C 62 FC | 	wrlong	result2, fp
14170     04 CE 05 F1 | 	add	fp, #4
14174     E7 96 62 FC | 	wrlong	arg03, fp
14178                 | ' t1=pop() : arg=converttoint(t1)
14178                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14178     08 CE 85 F1 | 	sub	fp, #8
1417c     2B 96 0E F2 | 	cmp	arg03, #43 wz
14180     18 00 90 5D |  if_ne	jmp	#LR__1731
14184     E7 92 02 FB | 	rdlong	arg01, fp
14188     54 96 BF FD | 	call	#_convertstring
1418c     E7 7A 62 FC | 	wrlong	result1, fp
14190     08 CE 05 F1 | 	add	fp, #8
14194     E7 3E 68 FC | 	wrlong	#31, fp
14198     08 CE 85 F1 | 	sub	fp, #8
1419c                 | LR__1731
1419c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1419c     08 CE 05 F1 | 	add	fp, #8
141a0     E7 96 02 FB | 	rdlong	arg03, fp
141a4     08 CE 85 F1 | 	sub	fp, #8
141a8     1F 96 0E F2 | 	cmp	arg03, #31 wz
141ac     40 00 90 AD |  if_e	jmp	#LR__1732
141b0     00 92 06 F6 | 	mov	arg01, #0
141b4     C8 5D B1 FD | 	call	#__system___getiolock_0622
141b8     3D 93 02 F6 | 	mov	arg01, result1
141bc     3C 08 B1 FD | 	call	#__system___lockmem
141c0     97 01 00 FF 
141c4     BA 95 06 F6 | 	mov	arg02, ##@LR__6027
141c8     00 92 06 F6 | 	mov	arg01, #0
141cc     00 96 06 F6 | 	mov	arg03, #0
141d0     1C 15 B1 FD | 	call	#__system___basic_print_string
141d4     00 92 06 F6 | 	mov	arg01, #0
141d8     A4 5D B1 FD | 	call	#__system___getiolock_0622
141dc     3D 01 68 FC | 	wrlong	#0, result1
141e0     0F 92 06 F6 | 	mov	arg01, #15
141e4     00 94 06 F6 | 	mov	arg02, #0
141e8     E8 CA B0 FD | 	call	#_printerror
141ec     18 00 90 FD | 	jmp	#LR__1733
141f0                 | LR__1732
141f0     E7 92 02 FB | 	rdlong	arg01, fp
141f4     53 95 02 F6 | 	mov	arg02, local01
141f8     A8 20 B1 FD | 	call	#__system__Left_S
141fc     E7 7A 62 FC | 	wrlong	result1, fp
14200     E7 92 02 F6 | 	mov	arg01, fp
14204     F8 94 BF FD | 	call	#_push
14208                 | LR__1733
14208     E7 F0 03 F6 | 	mov	ptra, fp
1420c     F2 00 A0 FD | 	call	#popregs_
14210                 | _do_left_ret
14210     2D 00 64 FD | 	ret
14214                 | 
14214                 | ' 
14214                 | ' ' ----------------  len
14214                 | ' 
14214                 | ' sub do_len
14214                 | _do_len
14214     01 CA 05 F6 | 	mov	COUNT_, #1
14218     E8 00 A0 FD | 	call	#pushregs_
1421c     14 F0 07 F1 | 	add	ptra, #20
14220     4C 00 00 FF 
14224     24 64 06 F1 | 	add	objptr, ##38948
14228     32 97 02 FB | 	rdlong	arg03, objptr
1422c     4B 95 02 F6 | 	mov	arg02, arg03
14230     01 94 66 F0 | 	shl	arg02, #1
14234     4B 95 02 F1 | 	add	arg02, arg03
14238     02 94 66 F0 | 	shl	arg02, #2
1423c     03 00 00 FF 
14240     04 64 86 F1 | 	sub	objptr, ##1540
14244     32 95 02 F1 | 	add	arg02, objptr
14248     4A 97 02 FB | 	rdlong	arg03, arg02
1424c                 | ' 
1424c                 | ' numpar=compiledline(lineptr_e).result.uresult
1424c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1424c     02 96 16 F2 | 	cmp	arg03, #2 wc
14250     49 00 00 FF 
14254     20 64 86 F1 | 	sub	objptr, ##37408
14258     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1425c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
14260     00 92 06 F6 | 	mov	arg01, #0
14264     18 5D B1 FD | 	call	#__system___getiolock_0622
14268     3D 93 02 F6 | 	mov	arg01, result1
1426c     8C 07 B1 FD | 	call	#__system___lockmem
14270     97 01 00 FF 
14274     C2 95 06 F6 | 	mov	arg02, ##@LR__6028
14278     00 92 06 F6 | 	mov	arg01, #0
1427c     00 96 06 F6 | 	mov	arg03, #0
14280     6C 14 B1 FD | 	call	#__system___basic_print_string
14284     00 92 06 F6 | 	mov	arg01, #0
14288     F4 5C B1 FD | 	call	#__system___getiolock_0622
1428c     3D 01 68 FC | 	wrlong	#0, result1
14290     27 92 06 F6 | 	mov	arg01, #39
14294     00 94 06 F6 | 	mov	arg02, #0
14298     38 CA B0 FD | 	call	#_printerror
1429c     C8 00 90 FD | 	jmp	#LR__1745
142a0                 | LR__1740
142a0     CC 93 BF FD | 	call	#_pop
142a4     3F 97 02 F6 | 	mov	arg03, result3
142a8     E7 7A 62 FC | 	wrlong	result1, fp
142ac     04 CE 05 F1 | 	add	fp, #4
142b0     E7 7C 62 FC | 	wrlong	result2, fp
142b4     04 CE 05 F1 | 	add	fp, #4
142b8     E7 96 62 FC | 	wrlong	arg03, fp
142bc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142bc     08 CE 85 F1 | 	sub	fp, #8
142c0     2B 96 0E F2 | 	cmp	arg03, #43 wz
142c4     18 00 90 5D |  if_ne	jmp	#LR__1741
142c8     E7 92 02 FB | 	rdlong	arg01, fp
142cc     10 95 BF FD | 	call	#_convertstring
142d0     E7 7A 62 FC | 	wrlong	result1, fp
142d4     08 CE 05 F1 | 	add	fp, #8
142d8     E7 3E 68 FC | 	wrlong	#31, fp
142dc     08 CE 85 F1 | 	sub	fp, #8
142e0                 | LR__1741
142e0                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
142e0     08 CE 05 F1 | 	add	fp, #8
142e4     E7 96 02 FB | 	rdlong	arg03, fp
142e8     08 CE 85 F1 | 	sub	fp, #8
142ec     1F 96 0E F2 | 	cmp	arg03, #31 wz
142f0     40 00 90 AD |  if_e	jmp	#LR__1742
142f4     00 92 06 F6 | 	mov	arg01, #0
142f8     84 5C B1 FD | 	call	#__system___getiolock_0622
142fc     3D 93 02 F6 | 	mov	arg01, result1
14300     F8 06 B1 FD | 	call	#__system___lockmem
14304     97 01 00 FF 
14308     C8 95 06 F6 | 	mov	arg02, ##@LR__6029
1430c     00 92 06 F6 | 	mov	arg01, #0
14310     00 96 06 F6 | 	mov	arg03, #0
14314     D8 13 B1 FD | 	call	#__system___basic_print_string
14318     00 92 06 F6 | 	mov	arg01, #0
1431c     60 5C B1 FD | 	call	#__system___getiolock_0622
14320     3D 01 68 FC | 	wrlong	#0, result1
14324     0F 92 06 F6 | 	mov	arg01, #15
14328     00 94 06 F6 | 	mov	arg02, #0
1432c     A4 C9 B0 FD | 	call	#_printerror
14330     34 00 90 FD | 	jmp	#LR__1745
14334                 | LR__1742
14334     E7 92 02 FB | 	rdlong	arg01, fp
14338     49 A7 02 F6 | 	mov	local01, arg01
1433c     D7 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
14340                 | LR__1743
14340     53 7B CA FA | 	rdbyte	result1, local01 wz
14344     01 A6 06 51 |  if_ne	add	local01, #1
14348     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
1434c                 | LR__1744
1434c     49 A7 82 F1 | 	sub	local01, arg01
14350     E7 A6 62 FC | 	wrlong	local01, fp
14354     08 CE 05 F1 | 	add	fp, #8
14358     E7 38 68 FC | 	wrlong	#28, fp
1435c     08 CE 85 F1 | 	sub	fp, #8
14360     E7 92 02 F6 | 	mov	arg01, fp
14364     98 93 BF FD | 	call	#_push
14368                 | LR__1745
14368     E7 F0 03 F6 | 	mov	ptra, fp
1436c     F2 00 A0 FD | 	call	#popregs_
14370                 | _do_len_ret
14370     2D 00 64 FD | 	ret
14374                 | 
14374                 | ' 
14374                 | ' ' ----------------  list
14374                 | ' 
14374                 | ' sub do_list
14374                 | _do_list
14374     04 CA 05 F6 | 	mov	COUNT_, #4
14378     E8 00 A0 FD | 	call	#pushregs_
1437c     B8 F0 07 F1 | 	add	ptra, #184
14380     00 A6 06 F6 | 	mov	local01, #0
14384     1E A8 CE F9 | 	bmask	local02, #30
14388     4C 00 00 FF 
1438c     24 64 06 F1 | 	add	objptr, ##38948
14390     32 AB 02 FB | 	rdlong	local03, objptr
14394     55 97 02 F6 | 	mov	arg03, local03
14398     01 96 66 F0 | 	shl	arg03, #1
1439c     55 97 02 F1 | 	add	arg03, local03
143a0     02 96 66 F0 | 	shl	arg03, #2
143a4     03 00 00 FF 
143a8     04 64 86 F1 | 	sub	objptr, ##1540
143ac     32 97 02 F1 | 	add	arg03, objptr
143b0     4B AD 02 FB | 	rdlong	local04, arg03
143b4                 | ' 
143b4                 | ' startline=0 : endline=$7FFFFFFF
143b4                 | ' numpar=compiledline(lineptr_e).result.uresult
143b4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143b4     01 AC 0E F2 | 	cmp	local04, #1 wz
143b8     49 00 00 FF 
143bc     20 64 86 F1 | 	sub	objptr, ##37408
143c0     34 00 90 5D |  if_ne	jmp	#LR__1750
143c4     A8 92 BF FD | 	call	#_pop
143c8     3F AB 02 F6 | 	mov	local03, result3
143cc     0C CE 05 F1 | 	add	fp, #12
143d0     E7 7A 62 FC | 	wrlong	result1, fp
143d4     04 CE 05 F1 | 	add	fp, #4
143d8     E7 7C 62 FC | 	wrlong	result2, fp
143dc     04 CE 05 F1 | 	add	fp, #4
143e0     E7 AA 62 FC | 	wrlong	local03, fp
143e4     08 CE 85 F1 | 	sub	fp, #8
143e8     E7 92 02 F6 | 	mov	arg01, fp
143ec     0C CE 85 F1 | 	sub	fp, #12
143f0     58 94 BF FD | 	call	#_converttoint
143f4     3D A7 02 F6 | 	mov	local01, result1
143f8                 | LR__1750
143f8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
143f8     02 AC 0E F2 | 	cmp	local04, #2 wz
143fc     68 00 90 5D |  if_ne	jmp	#LR__1751
14400     6C 92 BF FD | 	call	#_pop
14404     3F AB 02 F6 | 	mov	local03, result3
14408     0C CE 05 F1 | 	add	fp, #12
1440c     E7 7A 62 FC | 	wrlong	result1, fp
14410     04 CE 05 F1 | 	add	fp, #4
14414     E7 7C 62 FC | 	wrlong	result2, fp
14418     04 CE 05 F1 | 	add	fp, #4
1441c     E7 AA 62 FC | 	wrlong	local03, fp
14420     08 CE 85 F1 | 	sub	fp, #8
14424     E7 92 02 F6 | 	mov	arg01, fp
14428     0C CE 85 F1 | 	sub	fp, #12
1442c     1C 94 BF FD | 	call	#_converttoint
14430     3D A9 02 F6 | 	mov	local02, result1
14434     38 92 BF FD | 	call	#_pop
14438     3F AB 02 F6 | 	mov	local03, result3
1443c     0C CE 05 F1 | 	add	fp, #12
14440     E7 7A 62 FC | 	wrlong	result1, fp
14444     04 CE 05 F1 | 	add	fp, #4
14448     E7 7C 62 FC | 	wrlong	result2, fp
1444c     04 CE 05 F1 | 	add	fp, #4
14450     E7 AA 62 FC | 	wrlong	local03, fp
14454     08 CE 85 F1 | 	sub	fp, #8
14458     E7 92 02 F6 | 	mov	arg01, fp
1445c     0C CE 85 F1 | 	sub	fp, #12
14460     E8 93 BF FD | 	call	#_converttoint
14464     3D A7 02 F6 | 	mov	local01, result1
14468                 | LR__1751
14468                 | ' 
14468                 | ' 
14468                 | ' print
14468     00 92 06 F6 | 	mov	arg01, #0
1446c     10 5B B1 FD | 	call	#__system___getiolock_0622
14470     3D 93 02 F6 | 	mov	arg01, result1
14474     84 05 B1 FD | 	call	#__system___lockmem
14478     00 92 06 F6 | 	mov	arg01, #0
1447c     0A 94 06 F6 | 	mov	arg02, #10
14480     00 96 06 F6 | 	mov	arg03, #0
14484     10 12 B1 FD | 	call	#__system___basic_print_char
14488     00 92 06 F6 | 	mov	arg01, #0
1448c     F0 5A B1 FD | 	call	#__system___getiolock_0622
14490     3D 01 68 FC | 	wrlong	#0, result1
14494     4C 00 00 FF 
14498     2C 64 06 F1 | 	add	objptr, ##38956
1449c     32 AD 02 FB | 	rdlong	local04, objptr
144a0     08 00 00 FF 
144a4     CC 64 06 F1 | 	add	objptr, ##4300
144a8     32 AD 62 FC | 	wrlong	local04, objptr
144ac     54 00 00 FF 
144b0     F8 64 86 F1 | 	sub	objptr, ##43256
144b4                 | ' do 
144b4                 | LR__1752
144b4     E7 92 02 F6 | 	mov	arg01, fp
144b8     20 92 06 F1 | 	add	arg01, #32
144bc     54 00 00 FF 
144c0     F8 64 06 F1 | 	add	objptr, ##43256
144c4     32 95 02 FB | 	rdlong	arg02, objptr
144c8     18 96 06 F6 | 	mov	arg03, #24
144cc     49 00 00 FF 
144d0     2C 64 86 F1 | 	sub	objptr, ##37420
144d4     B0 F5 B0 FD | 	call	#_psram_spin2_read1
144d8     0B 00 00 FF 
144dc     CC 64 86 F1 | 	sub	objptr, ##5836
144e0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
144e0                 | '   
144e0                 | '   if header(0)<> $FFFFFFFF then
144e0     20 CE 05 F1 | 	add	fp, #32
144e4     E7 AC 02 FB | 	rdlong	local04, fp
144e8     20 CE 85 F1 | 	sub	fp, #32
144ec     FF FF 7F FF 
144f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
144f4     9C 00 90 AD |  if_e	jmp	#LR__1754
144f8     E7 92 02 F6 | 	mov	arg01, fp
144fc     38 92 06 F1 | 	add	arg01, #56
14500     3F 96 06 F6 | 	mov	arg03, #63
14504     28 96 62 FD | 	setq	arg03
14508     49 01 68 FC | 	wrlong	#0, arg01
1450c     E7 92 02 F6 | 	mov	arg01, fp
14510     38 92 06 F1 | 	add	arg01, #56
14514     28 CE 05 F1 | 	add	fp, #40
14518     E7 94 02 FB | 	rdlong	arg02, fp
1451c     04 CE 05 F1 | 	add	fp, #4
14520     E7 96 02 FB | 	rdlong	arg03, fp
14524     2C CE 85 F1 | 	sub	fp, #44
14528     0B 00 00 FF 
1452c     CC 64 06 F1 | 	add	objptr, ##5836
14530     54 F5 B0 FD | 	call	#_psram_spin2_read1
14534     0B 00 00 FF 
14538     CC 64 86 F1 | 	sub	objptr, ##5836
1453c                 | '     longfill(linebuf,0,64)
1453c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
1453c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
1453c     20 CE 05 F1 | 	add	fp, #32
14540     E7 AC 02 FB | 	rdlong	local04, fp
14544     20 CE 85 F1 | 	sub	fp, #32
14548     53 AD 52 F2 | 	cmps	local04, local01 wc
1454c     24 00 90 CD |  if_b	jmp	#LR__1753
14550     20 CE 05 F1 | 	add	fp, #32
14554     E7 AA 02 FB | 	rdlong	local03, fp
14558     20 CE 85 F1 | 	sub	fp, #32
1455c     54 AB 5A F2 | 	cmps	local03, local02 wcz
14560     10 00 90 1D |  if_a	jmp	#LR__1753
14564     E7 92 02 F6 | 	mov	arg01, fp
14568     38 92 06 F1 | 	add	arg01, #56
1456c                 | ' 
1456c                 | ' write(text)
1456c     1C E9 B0 FD | 	call	#_hg010b_spin2_write
14570                 | ' crlf
14570     B8 ED B0 FD | 	call	#_hg010b_spin2_crlf
14574                 | LR__1753
14574     34 CE 05 F1 | 	add	fp, #52
14578     E7 AC 02 FB | 	rdlong	local04, fp
1457c     34 CE 85 F1 | 	sub	fp, #52
14580     54 00 00 FF 
14584     F8 64 06 F1 | 	add	objptr, ##43256
14588     32 AD 62 FC | 	wrlong	local04, objptr
1458c     54 00 00 FF 
14590     F8 64 86 F1 | 	sub	objptr, ##43256
14594                 | LR__1754
14594     34 CE 05 F1 | 	add	fp, #52
14598     E7 AC 02 FB | 	rdlong	local04, fp
1459c     34 CE 85 F1 | 	sub	fp, #52
145a0     FF FF 3F FF 
145a4     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
145a8     20 CE 05 51 |  if_ne	add	fp, #32
145ac     E7 AA 02 5B |  if_ne	rdlong	local03, fp
145b0     20 CE 85 51 |  if_ne	sub	fp, #32
145b4     FF FF 7F 5F 
145b8     FF AB 0E 52 |  if_ne	cmp	local03, ##-1 wz
145bc     F4 FE 9F 5D |  if_ne	jmp	#LR__1752
145c0     E7 F0 03 F6 | 	mov	ptra, fp
145c4     F2 00 A0 FD | 	call	#popregs_
145c8                 | _do_list_ret
145c8     2D 00 64 FD | 	ret
145cc                 | 
145cc                 | ' 
145cc                 | ' '-------------------- load
145cc                 | ' 
145cc                 | ' sub do_load(amode=0 as integer)  
145cc                 | _do_load
145cc     07 CA 05 F6 | 	mov	COUNT_, #7
145d0     E8 00 A0 FD | 	call	#pushregs_
145d4     AC F0 07 F1 | 	add	ptra, #172
145d8     49 AD 02 F6 | 	mov	local04, arg01
145dc     54 00 00 FF 
145e0     B0 64 06 F1 | 	add	objptr, ##43184
145e4     32 03 68 FC | 	wrlong	#1, objptr
145e8     08 00 00 FF 
145ec     8C 64 86 F1 | 	sub	objptr, ##4236
145f0     32 95 02 FB | 	rdlong	arg02, objptr
145f4     4A 93 02 F6 | 	mov	arg01, arg02
145f8     01 92 66 F0 | 	shl	arg01, #1
145fc     4A 93 02 F1 | 	add	arg01, arg02
14600     02 92 66 F0 | 	shl	arg01, #2
14604     03 00 00 FF 
14608     04 64 86 F1 | 	sub	objptr, ##1540
1460c     32 93 02 F1 | 	add	arg01, objptr
14610     49 AF 02 FB | 	rdlong	local05, arg01
14614     E7 92 02 F6 | 	mov	arg01, fp
14618     A8 92 06 F1 | 	add	arg01, #168
1461c     49 00 00 FF 
14620     20 64 86 F1 | 	sub	objptr, ##37408
14624     E7 94 02 F6 | 	mov	arg02, fp
14628     28 94 06 F1 | 	add	arg02, #40
1462c     49 95 62 FC | 	wrlong	arg02, arg01
14630                 | ' 
14630                 | ' inload=1
14630                 | ' numpar=compiledline(lineptr_e).result.uresult
14630                 | ' lpoke varptr(line2$),varptr(line2)
14630                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14630     01 AE 56 F2 | 	cmps	local05, #1 wc
14634     14 00 90 CD |  if_b	jmp	#LR__1760
14638     34 90 BF FD | 	call	#_pop
1463c     3D A7 02 F6 | 	mov	local01, result1
14640     3E A9 02 F6 | 	mov	local02, result2
14644     3F AB 02 F6 | 	mov	local03, result3
14648     18 00 90 FD | 	jmp	#LR__1761
1464c                 | LR__1760
1464c     54 00 00 FF 
14650     A0 64 06 F1 | 	add	objptr, ##43168
14654     32 A7 02 FB | 	rdlong	local01, objptr
14658     54 00 00 FF 
1465c     A0 64 86 F1 | 	sub	objptr, ##43168
14660     1F AA 06 F6 | 	mov	local03, #31
14664                 | LR__1761
14664                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14664                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14664     2B AA 0E F2 | 	cmp	local03, #43 wz
14668     10 00 90 5D |  if_ne	jmp	#LR__1762
1466c     53 93 02 F6 | 	mov	arg01, local01
14670     6C 91 BF FD | 	call	#_convertstring
14674     3D A7 02 F6 | 	mov	local01, result1
14678     1F AA 06 F6 | 	mov	local03, #31
1467c                 | LR__1762
1467c                 | ' if t1.result_type=result_string then
1467c     1F AA 0E F2 | 	cmp	local03, #31 wz
14680     7C 02 90 5D |  if_ne	jmp	#LR__1766
14684                 | '   if amode<>1234 then do_new
14684     02 00 00 FF 
14688     D2 AC 0E F2 | 	cmp	local04, ##1234 wz
1468c     D8 0D B0 5D |  if_ne	call	#_do_new
14690                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14690     97 01 00 FF 
14694     CE 95 06 F6 | 	mov	arg02, ##@LR__6030
14698     53 93 02 F6 | 	mov	arg01, local01
1469c     84 03 B1 FD | 	call	#__system___string_cmp
146a0     00 7A 0E F2 | 	cmp	result1, #0 wz
146a4     54 00 00 AF 
146a8     A0 64 06 A1 |  if_e	add	objptr, ##43168
146ac     32 A7 02 AB |  if_e	rdlong	local01, objptr
146b0     54 00 00 FF 
146b4     A0 64 C6 F3 | 	sumz	objptr, ##43168
146b8     32 A7 62 5C |  if_ne	wrlong	local01, objptr
146bc     54 00 00 5F 
146c0     A0 64 86 51 |  if_ne	sub	objptr, ##43168
146c4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
146c4     09 92 06 F6 | 	mov	arg01, #9
146c8     0C 4F B1 FD | 	call	#__system__close
146cc     09 AE 06 F6 | 	mov	local05, #9
146d0     4C 00 00 FF 
146d4     38 64 06 F1 | 	add	objptr, ##38968
146d8     32 93 02 FB | 	rdlong	arg01, objptr
146dc     4C 00 00 FF 
146e0     38 64 86 F1 | 	sub	objptr, ##38968
146e4     97 01 00 FF 
146e8     CF 95 06 F6 | 	mov	arg02, ##@LR__6031
146ec     68 03 B1 FD | 	call	#__system___string_concat
146f0     3D 93 02 F6 | 	mov	arg01, result1
146f4     53 95 02 F6 | 	mov	arg02, local01
146f8     5C 03 B1 FD | 	call	#__system___string_concat
146fc     3D 95 02 F6 | 	mov	arg02, result1
14700     57 93 02 F6 | 	mov	arg01, local05
14704     00 96 06 F6 | 	mov	arg03, #0
14708     A0 0E B1 FD | 	call	#__system___basic_open_string
1470c     20 68 06 F1 | 	add	ptr___system__dat__, #32
14710     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
14714     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14718     20 68 86 F1 | 	sub	ptr___system__dat__, #32
1471c                 | '   r=geterr() 
1471c                 | '   if r then 
1471c     30 01 90 AD |  if_e	jmp	#LR__1764
14720                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14720     09 92 06 F6 | 	mov	arg01, #9
14724     B0 4E B1 FD | 	call	#__system__close
14728     09 B0 06 F6 | 	mov	local06, #9
1472c     4C 00 00 FF 
14730     38 64 06 F1 | 	add	objptr, ##38968
14734     32 93 02 FB | 	rdlong	arg01, objptr
14738     4C 00 00 FF 
1473c     38 64 86 F1 | 	sub	objptr, ##38968
14740     97 01 00 FF 
14744     D1 95 06 F6 | 	mov	arg02, ##@LR__6032
14748     0C 03 B1 FD | 	call	#__system___string_concat
1474c     3D 93 02 F6 | 	mov	arg01, result1
14750     53 95 02 F6 | 	mov	arg02, local01
14754     00 03 B1 FD | 	call	#__system___string_concat
14758     3D 93 02 F6 | 	mov	arg01, result1
1475c     97 01 00 FF 
14760     D3 95 06 F6 | 	mov	arg02, ##@LR__6033
14764     F0 02 B1 FD | 	call	#__system___string_concat
14768     3D 95 02 F6 | 	mov	arg02, result1
1476c     58 93 02 F6 | 	mov	arg01, local06
14770     00 96 06 F6 | 	mov	arg03, #0
14774     34 0E B1 FD | 	call	#__system___basic_open_string
14778     20 68 06 F1 | 	add	ptr___system__dat__, #32
1477c     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
14780     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14784     20 68 86 F1 | 	sub	ptr___system__dat__, #32
14788     3D B3 0A F6 | 	mov	local07, result1 wz
1478c                 | '     r=geterr() 
1478c                 | '     if r then 
1478c     8C 00 90 AD |  if_e	jmp	#LR__1763
14790                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14790     00 92 06 F6 | 	mov	arg01, #0
14794     E8 57 B1 FD | 	call	#__system___getiolock_0622
14798     3D 93 02 F6 | 	mov	arg01, result1
1479c     5C 02 B1 FD | 	call	#__system___lockmem
147a0     97 01 00 FF 
147a4     D8 95 06 F6 | 	mov	arg02, ##@LR__6034
147a8     00 92 06 F6 | 	mov	arg01, #0
147ac     00 96 06 F6 | 	mov	arg03, #0
147b0     3C 0F B1 FD | 	call	#__system___basic_print_string
147b4     00 92 06 F6 | 	mov	arg01, #0
147b8     59 95 02 F6 | 	mov	arg02, local07
147bc     00 96 06 F6 | 	mov	arg03, #0
147c0     0A 98 06 F6 | 	mov	arg04, #10
147c4     6C 0F B1 FD | 	call	#__system___basic_print_integer
147c8     97 01 00 FF 
147cc     E6 95 06 F6 | 	mov	arg02, ##@LR__6035
147d0     00 92 06 F6 | 	mov	arg01, #0
147d4     00 96 06 F6 | 	mov	arg03, #0
147d8     14 0F B1 FD | 	call	#__system___basic_print_string
147dc     59 93 02 F6 | 	mov	arg01, local07
147e0     C8 23 B1 FD | 	call	#__system___strerror
147e4     3D 95 02 F6 | 	mov	arg02, result1
147e8     00 92 06 F6 | 	mov	arg01, #0
147ec     00 96 06 F6 | 	mov	arg03, #0
147f0     FC 0E B1 FD | 	call	#__system___basic_print_string
147f4     00 92 06 F6 | 	mov	arg01, #0
147f8     0A 94 06 F6 | 	mov	arg02, #10
147fc     00 96 06 F6 | 	mov	arg03, #0
14800     94 0E B1 FD | 	call	#__system___basic_print_char
14804     00 92 06 F6 | 	mov	arg01, #0
14808     74 57 B1 FD | 	call	#__system___getiolock_0622
1480c     3D 01 68 FC | 	wrlong	#0, result1
14810     09 92 06 F6 | 	mov	arg01, #9
14814     C0 4D B1 FD | 	call	#__system__close
14818     94 01 90 FD | 	jmp	#LR__1768
1481c                 | LR__1763
1481c     54 00 00 FF 
14820     A0 64 06 F1 | 	add	objptr, ##43168
14824     32 93 02 FB | 	rdlong	arg01, objptr
14828     54 00 00 FF 
1482c     A0 64 86 F1 | 	sub	objptr, ##43168
14830     97 01 00 FF 
14834     E9 95 06 F6 | 	mov	arg02, ##@LR__6036
14838     1C 02 B1 FD | 	call	#__system___string_concat
1483c     54 00 00 FF 
14840     A0 64 06 F1 | 	add	objptr, ##43168
14844     32 7B 62 FC | 	wrlong	result1, objptr
14848     54 00 00 FF 
1484c     A0 64 86 F1 | 	sub	objptr, ##43168
14850                 | LR__1764
14850                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14850     09 92 06 F6 | 	mov	arg01, #9
14854     80 4D B1 FD | 	call	#__system__close
14858     09 B0 06 F6 | 	mov	local06, #9
1485c     4C 00 00 FF 
14860     38 64 06 F1 | 	add	objptr, ##38968
14864     32 93 02 FB | 	rdlong	arg01, objptr
14868     4C 00 00 FF 
1486c     38 64 86 F1 | 	sub	objptr, ##38968
14870     97 01 00 FF 
14874     EE 95 06 F6 | 	mov	arg02, ##@LR__6037
14878     DC 01 B1 FD | 	call	#__system___string_concat
1487c     3D 93 02 F6 | 	mov	arg01, result1
14880     54 00 00 FF 
14884     A0 64 06 F1 | 	add	objptr, ##43168
14888     32 95 02 FB | 	rdlong	arg02, objptr
1488c     54 00 00 FF 
14890     A0 64 86 F1 | 	sub	objptr, ##43168
14894     C0 01 B1 FD | 	call	#__system___string_concat
14898     3D 95 02 F6 | 	mov	arg02, result1
1489c     58 93 02 F6 | 	mov	arg01, local06
148a0     00 96 06 F6 | 	mov	arg03, #0
148a4     04 0D B1 FD | 	call	#__system___basic_open_string
148a8                 | '   do
148a8                 | LR__1765
148a8     09 92 06 F6 | 	mov	arg01, #9
148ac     58 03 B1 FD | 	call	#__system___basic_read_line
148b0     3D B1 02 F6 | 	mov	local06, result1
148b4     38 00 00 FF 
148b8     C0 65 06 F1 | 	add	objptr, ##29120
148bc     32 B1 62 FC | 	wrlong	local06, objptr
148c0     38 00 00 FF 
148c4     C0 65 86 F1 | 	sub	objptr, ##29120
148c8     7C D0 BE FD | 	call	#_interpret
148cc     38 00 00 FF 
148d0     C0 65 06 F1 | 	add	objptr, ##29120
148d4     32 93 02 FB | 	rdlong	arg01, objptr
148d8     38 00 00 FF 
148dc     C0 65 86 F1 | 	sub	objptr, ##29120
148e0     97 01 00 FF 
148e4     F0 95 06 F6 | 	mov	arg02, ##@LR__6038
148e8     38 01 B1 FD | 	call	#__system___string_cmp
148ec     00 7A 0E F2 | 	cmp	result1, #0 wz
148f0     B4 FF 9F 5D |  if_ne	jmp	#LR__1765
148f4                 | '   close #9   
148f4     09 92 06 F6 | 	mov	arg01, #9
148f8     DC 4C B1 FD | 	call	#__system__close
148fc     0C 00 90 FD | 	jmp	#LR__1767
14900                 | LR__1766
14900     1E 92 06 F6 | 	mov	arg01, #30
14904     00 94 06 F6 | 	mov	arg02, #0
14908     C8 C3 B0 FD | 	call	#_printerror
1490c                 | LR__1767
1490c                 | ' print "Loaded ";currentdir$+"/"+loadname
1490c     00 92 06 F6 | 	mov	arg01, #0
14910     6C 56 B1 FD | 	call	#__system___getiolock_0622
14914     3D 93 02 F6 | 	mov	arg01, result1
14918     E0 00 B1 FD | 	call	#__system___lockmem
1491c     97 01 00 FF 
14920     F1 95 06 F6 | 	mov	arg02, ##@LR__6039
14924     00 92 06 F6 | 	mov	arg01, #0
14928     00 96 06 F6 | 	mov	arg03, #0
1492c     C0 0D B1 FD | 	call	#__system___basic_print_string
14930     00 B2 06 F6 | 	mov	local07, #0
14934     4C 00 00 FF 
14938     38 64 06 F1 | 	add	objptr, ##38968
1493c     32 93 02 FB | 	rdlong	arg01, objptr
14940     4C 00 00 FF 
14944     38 64 86 F1 | 	sub	objptr, ##38968
14948     97 01 00 FF 
1494c     F9 95 06 F6 | 	mov	arg02, ##@LR__6040
14950     04 01 B1 FD | 	call	#__system___string_concat
14954     3D 93 02 F6 | 	mov	arg01, result1
14958     54 00 00 FF 
1495c     A0 64 06 F1 | 	add	objptr, ##43168
14960     32 95 02 FB | 	rdlong	arg02, objptr
14964     54 00 00 FF 
14968     A0 64 86 F1 | 	sub	objptr, ##43168
1496c     E8 00 B1 FD | 	call	#__system___string_concat
14970     3D 95 02 F6 | 	mov	arg02, result1
14974     59 93 02 F6 | 	mov	arg01, local07
14978     00 96 06 F6 | 	mov	arg03, #0
1497c     70 0D B1 FD | 	call	#__system___basic_print_string
14980     00 92 06 F6 | 	mov	arg01, #0
14984     0A 94 06 F6 | 	mov	arg02, #10
14988     00 96 06 F6 | 	mov	arg03, #0
1498c     08 0D B1 FD | 	call	#__system___basic_print_char
14990     00 92 06 F6 | 	mov	arg01, #0
14994     E8 55 B1 FD | 	call	#__system___getiolock_0622
14998     3D 01 68 FC | 	wrlong	#0, result1
1499c     54 00 00 FF 
149a0     B0 64 06 F1 | 	add	objptr, ##43184
149a4     32 01 68 FC | 	wrlong	#0, objptr
149a8     54 00 00 FF 
149ac     B0 64 86 F1 | 	sub	objptr, ##43184
149b0                 | LR__1768
149b0     E7 F0 03 F6 | 	mov	ptra, fp
149b4     F2 00 A0 FD | 	call	#popregs_
149b8                 | _do_load_ret
149b8     2D 00 64 FD | 	ret
149bc                 | 
149bc                 | ' 
149bc                 | ' '-------------------- log
149bc                 | ' 
149bc                 | ' sub do_log
149bc                 | _do_log
149bc     02 CA 05 F6 | 	mov	COUNT_, #2
149c0     E8 00 A0 FD | 	call	#pushregs_
149c4     14 F0 07 F1 | 	add	ptra, #20
149c8     4C 00 00 FF 
149cc     24 64 06 F1 | 	add	objptr, ##38948
149d0     32 97 02 FB | 	rdlong	arg03, objptr
149d4     4B 95 02 F6 | 	mov	arg02, arg03
149d8     01 94 66 F0 | 	shl	arg02, #1
149dc     4B 95 02 F1 | 	add	arg02, arg03
149e0     02 94 66 F0 | 	shl	arg02, #2
149e4     03 00 00 FF 
149e8     04 64 86 F1 | 	sub	objptr, ##1540
149ec     32 95 02 F1 | 	add	arg02, objptr
149f0     4A A7 0A FB | 	rdlong	local01, arg02 wz
149f4                 | ' 
149f4                 | ' numpar=compiledline(lineptr_e).result.uresult
149f4                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
149f4     49 00 00 FF 
149f8     20 64 86 F1 | 	sub	objptr, ##37408
149fc     03 A6 16 52 |  if_ne	cmp	local01, #3 wc
14a00     40 00 90 4D |  if_c_and_nz	jmp	#LR__1770
14a04     00 92 06 F6 | 	mov	arg01, #0
14a08     74 55 B1 FD | 	call	#__system___getiolock_0622
14a0c     3D 93 02 F6 | 	mov	arg01, result1
14a10     E8 FF B0 FD | 	call	#__system___lockmem
14a14     97 01 00 FF 
14a18     FB 95 06 F6 | 	mov	arg02, ##@LR__6041
14a1c     00 92 06 F6 | 	mov	arg01, #0
14a20     00 96 06 F6 | 	mov	arg03, #0
14a24     C8 0C B1 FD | 	call	#__system___basic_print_string
14a28     00 92 06 F6 | 	mov	arg01, #0
14a2c     50 55 B1 FD | 	call	#__system___getiolock_0622
14a30     3D 01 68 FC | 	wrlong	#0, result1
14a34     27 92 06 F6 | 	mov	arg01, #39
14a38     00 94 06 F6 | 	mov	arg02, #0
14a3c     94 C2 B0 FD | 	call	#_printerror
14a40     AC 00 90 FD | 	jmp	#LR__1773
14a44                 | LR__1770
14a44                 | ' if numpar=2 then 
14a44     02 A6 0E F2 | 	cmp	local01, #2 wz
14a48     40 00 90 5D |  if_ne	jmp	#LR__1771
14a4c     20 8C BF FD | 	call	#_pop
14a50     3F A7 02 F6 | 	mov	local01, result3
14a54     E7 7A 62 FC | 	wrlong	result1, fp
14a58     04 CE 05 F1 | 	add	fp, #4
14a5c     E7 7C 62 FC | 	wrlong	result2, fp
14a60     04 CE 05 F1 | 	add	fp, #4
14a64     E7 A6 62 FC | 	wrlong	local01, fp
14a68     08 CE 85 F1 | 	sub	fp, #8
14a6c     E7 92 02 F6 | 	mov	arg01, fp
14a70     94 8E BF FD | 	call	#_converttofloat
14a74     3D 95 02 F6 | 	mov	arg02, result1
14a78     FC 16 20 FF 
14a7c     54 92 06 F6 | 	mov	arg01, ##1076754516
14a80     28 36 B1 FD | 	call	#__system____builtin_logbase
14a84     3D A9 02 F6 | 	mov	local02, result1
14a88     08 00 90 FD | 	jmp	#LR__1772
14a8c                 | LR__1771
14a8c     00 C0 1F FF 
14a90     00 A8 06 F6 | 	mov	local02, ##1065353216
14a94                 | LR__1772
14a94     D8 8B BF FD | 	call	#_pop
14a98     3F A7 02 F6 | 	mov	local01, result3
14a9c     E7 7A 62 FC | 	wrlong	result1, fp
14aa0     04 CE 05 F1 | 	add	fp, #4
14aa4     E7 7C 62 FC | 	wrlong	result2, fp
14aa8     04 CE 05 F1 | 	add	fp, #4
14aac     E7 A6 62 FC | 	wrlong	local01, fp
14ab0     08 CE 85 F1 | 	sub	fp, #8
14ab4     E7 92 02 F6 | 	mov	arg01, fp
14ab8     4C 8E BF FD | 	call	#_converttofloat
14abc     3D 95 02 F6 | 	mov	arg02, result1
14ac0     FC 16 20 FF 
14ac4     54 92 06 F6 | 	mov	arg01, ##1076754516
14ac8     E0 35 B1 FD | 	call	#__system____builtin_logbase
14acc     3D 93 02 F6 | 	mov	arg01, result1
14ad0     54 95 02 F6 | 	mov	arg02, local02
14ad4     F8 27 B1 FD | 	call	#__system___float_div
14ad8     E7 7A 62 FC | 	wrlong	result1, fp
14adc     08 CE 05 F1 | 	add	fp, #8
14ae0     E7 3C 68 FC | 	wrlong	#30, fp
14ae4     08 CE 85 F1 | 	sub	fp, #8
14ae8     E7 92 02 F6 | 	mov	arg01, fp
14aec     10 8C BF FD | 	call	#_push
14af0                 | LR__1773
14af0     E7 F0 03 F6 | 	mov	ptra, fp
14af4     F2 00 A0 FD | 	call	#popregs_
14af8                 | _do_log_ret
14af8     2D 00 64 FD | 	ret
14afc                 | 
14afc                 | ' 
14afc                 | ' '-------------------- lpeek
14afc                 | ' 
14afc                 | ' sub do_lpeek
14afc                 | _do_lpeek
14afc     01 CA 05 F6 | 	mov	COUNT_, #1
14b00     E8 00 A0 FD | 	call	#pushregs_
14b04     14 F0 07 F1 | 	add	ptra, #20
14b08     64 8B BF FD | 	call	#_pop
14b0c     E7 7A 62 FC | 	wrlong	result1, fp
14b10     04 CE 05 F1 | 	add	fp, #4
14b14     E7 7C 62 FC | 	wrlong	result2, fp
14b18     04 CE 05 F1 | 	add	fp, #4
14b1c     E7 7E 62 FC | 	wrlong	result3, fp
14b20     08 CE 85 F1 | 	sub	fp, #8
14b24     E7 92 02 F6 | 	mov	arg01, fp
14b28     20 8D BF FD | 	call	#_converttoint
14b2c     3D 93 02 F6 | 	mov	arg01, result1
14b30                 | ' 
14b30                 | ' t1=pop()
14b30                 | ' a=converttoint(t1)
14b30                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b30     00 04 00 FF 
14b34     00 92 16 F2 | 	cmp	arg01, ##524288 wc
14b38     49 A7 02 CB |  if_b	rdlong	local01, arg01
14b3c     08 00 90 CD |  if_b	jmp	#LR__1780
14b40     4C C4 B0 FD | 	call	#_pslpeek
14b44     3D A7 02 F6 | 	mov	local01, result1
14b48                 | LR__1780
14b48     08 CE 05 F1 | 	add	fp, #8
14b4c     E7 3A 68 FC | 	wrlong	#29, fp
14b50     08 CE 85 F1 | 	sub	fp, #8
14b54     E7 A6 62 FC | 	wrlong	local01, fp
14b58     E7 92 02 F6 | 	mov	arg01, fp
14b5c     A0 8B BF FD | 	call	#_push
14b60     E7 F0 03 F6 | 	mov	ptra, fp
14b64     F2 00 A0 FD | 	call	#popregs_
14b68                 | _do_lpeek_ret
14b68     2D 00 64 FD | 	ret
14b6c                 | 
14b6c                 | ' 
14b6c                 | ' '-------------------- lpoke
14b6c                 | ' 
14b6c                 | ' sub do_lpoke
14b6c                 | _do_lpoke
14b6c     02 CA 05 F6 | 	mov	COUNT_, #2
14b70     E8 00 A0 FD | 	call	#pushregs_
14b74     20 F0 07 F1 | 	add	ptra, #32
14b78     F4 8A BF FD | 	call	#_pop
14b7c     3D 95 02 F6 | 	mov	arg02, result1
14b80     3E 93 02 F6 | 	mov	arg01, result2
14b84     3F A7 02 F6 | 	mov	local01, result3
14b88     E7 94 62 FC | 	wrlong	arg02, fp
14b8c     04 CE 05 F1 | 	add	fp, #4
14b90     E7 92 62 FC | 	wrlong	arg01, fp
14b94     04 CE 05 F1 | 	add	fp, #4
14b98     E7 A6 62 FC | 	wrlong	local01, fp
14b9c     08 CE 85 F1 | 	sub	fp, #8
14ba0     CC 8A BF FD | 	call	#_pop
14ba4     3F A7 02 F6 | 	mov	local01, result3
14ba8     0C CE 05 F1 | 	add	fp, #12
14bac     E7 7A 62 FC | 	wrlong	result1, fp
14bb0     04 CE 05 F1 | 	add	fp, #4
14bb4     E7 7C 62 FC | 	wrlong	result2, fp
14bb8     04 CE 05 F1 | 	add	fp, #4
14bbc     E7 A6 62 FC | 	wrlong	local01, fp
14bc0     08 CE 85 F1 | 	sub	fp, #8
14bc4     E7 92 02 F6 | 	mov	arg01, fp
14bc8     0C CE 85 F1 | 	sub	fp, #12
14bcc     7C 8C BF FD | 	call	#_converttoint
14bd0     3D A7 02 F6 | 	mov	local01, result1
14bd4     E7 92 02 F6 | 	mov	arg01, fp
14bd8     70 8C BF FD | 	call	#_converttoint
14bdc     3D A9 02 F6 | 	mov	local02, result1
14be0                 | ' 
14be0                 | ' t1=pop() 'value
14be0                 | ' t2=pop() 
14be0                 | ' a=converttoint(t2) : v=converttoint(t1)
14be0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14be0     00 04 00 FF 
14be4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
14be8     53 A9 62 CC |  if_b	wrlong	local02, local01
14bec     53 93 02 36 |  if_ae	mov	arg01, local01
14bf0     54 95 02 36 |  if_ae	mov	arg02, local02
14bf4     78 C2 B0 3D |  if_ae	call	#_pslpoke
14bf8     E7 F0 03 F6 | 	mov	ptra, fp
14bfc     F2 00 A0 FD | 	call	#popregs_
14c00                 | _do_lpoke_ret
14c00     2D 00 64 FD | 	ret
14c04                 | 
14c04                 | ' 
14c04                 | ' '-------------------- memlo
14c04                 | ' 
14c04                 | ' sub do_memlo
14c04                 | _do_memlo
14c04     00 CA 05 F6 | 	mov	COUNT_, #0
14c08     E8 00 A0 FD | 	call	#pushregs_
14c0c     0C F0 07 F1 | 	add	ptra, #12
14c10     45 00 00 FF 
14c14     00 64 06 F1 | 	add	objptr, ##35328
14c18     32 93 02 FB | 	rdlong	arg01, objptr
14c1c     45 00 00 FF 
14c20     00 64 86 F1 | 	sub	objptr, ##35328
14c24     E7 92 62 FC | 	wrlong	arg01, fp
14c28     08 CE 05 F1 | 	add	fp, #8
14c2c     E7 3A 68 FC | 	wrlong	#29, fp
14c30     08 CE 85 F1 | 	sub	fp, #8
14c34     E7 92 02 F6 | 	mov	arg01, fp
14c38     C4 8A BF FD | 	call	#_push
14c3c     E7 F0 03 F6 | 	mov	ptra, fp
14c40     F2 00 A0 FD | 	call	#popregs_
14c44                 | _do_memlo_ret
14c44     2D 00 64 FD | 	ret
14c48                 | 
14c48                 | ' 
14c48                 | ' '-------------------- memtop
14c48                 | ' 
14c48                 | ' sub do_memtop
14c48                 | _do_memtop
14c48     00 CA 05 F6 | 	mov	COUNT_, #0
14c4c     E8 00 A0 FD | 	call	#pushregs_
14c50     0C F0 07 F1 | 	add	ptra, #12
14c54     54 00 00 FF 
14c58     74 64 06 F1 | 	add	objptr, ##43124
14c5c     32 93 02 FB | 	rdlong	arg01, objptr
14c60     54 00 00 FF 
14c64     74 64 86 F1 | 	sub	objptr, ##43124
14c68     E7 92 62 FC | 	wrlong	arg01, fp
14c6c     08 CE 05 F1 | 	add	fp, #8
14c70     E7 3A 68 FC | 	wrlong	#29, fp
14c74     08 CE 85 F1 | 	sub	fp, #8
14c78     E7 92 02 F6 | 	mov	arg01, fp
14c7c     80 8A BF FD | 	call	#_push
14c80     E7 F0 03 F6 | 	mov	ptra, fp
14c84     F2 00 A0 FD | 	call	#popregs_
14c88                 | _do_memtop_ret
14c88     2D 00 64 FD | 	ret
14c8c                 | 
14c8c                 | ' 
14c8c                 | ' '-------------------- mid$
14c8c                 | ' 
14c8c                 | ' sub do_mid
14c8c                 | _do_mid
14c8c     02 CA 05 F6 | 	mov	COUNT_, #2
14c90     E8 00 A0 FD | 	call	#pushregs_
14c94     18 F0 07 F1 | 	add	ptra, #24
14c98     4C 00 00 FF 
14c9c     24 64 06 F1 | 	add	objptr, ##38948
14ca0     32 97 02 FB | 	rdlong	arg03, objptr
14ca4     4B 95 02 F6 | 	mov	arg02, arg03
14ca8     01 94 66 F0 | 	shl	arg02, #1
14cac     4B 95 02 F1 | 	add	arg02, arg03
14cb0     02 94 66 F0 | 	shl	arg02, #2
14cb4     03 00 00 FF 
14cb8     04 64 86 F1 | 	sub	objptr, ##1540
14cbc     32 95 02 F1 | 	add	arg02, objptr
14cc0     4A 97 02 FB | 	rdlong	arg03, arg02
14cc4                 | ' 
14cc4                 | ' numpar=compiledline(lineptr_e).result.uresult
14cc4                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14cc4     03 96 0E F2 | 	cmp	arg03, #3 wz
14cc8     49 00 00 FF 
14ccc     20 64 86 F1 | 	sub	objptr, ##37408
14cd0     40 00 90 AD |  if_e	jmp	#LR__1790
14cd4     00 92 06 F6 | 	mov	arg01, #0
14cd8     A4 52 B1 FD | 	call	#__system___getiolock_0622
14cdc     3D 93 02 F6 | 	mov	arg01, result1
14ce0     18 FD B0 FD | 	call	#__system___lockmem
14ce4     98 01 00 FF 
14ce8     01 94 06 F6 | 	mov	arg02, ##@LR__6042
14cec     00 92 06 F6 | 	mov	arg01, #0
14cf0     00 96 06 F6 | 	mov	arg03, #0
14cf4     F8 09 B1 FD | 	call	#__system___basic_print_string
14cf8     00 92 06 F6 | 	mov	arg01, #0
14cfc     80 52 B1 FD | 	call	#__system___getiolock_0622
14d00     3D 01 68 FC | 	wrlong	#0, result1
14d04     27 92 06 F6 | 	mov	arg01, #39
14d08     00 94 06 F6 | 	mov	arg02, #0
14d0c     C4 BF B0 FD | 	call	#_printerror
14d10     08 01 90 FD | 	jmp	#LR__1793
14d14                 | LR__1790
14d14     58 89 BF FD | 	call	#_pop
14d18     3F 97 02 F6 | 	mov	arg03, result3
14d1c     E7 7A 62 FC | 	wrlong	result1, fp
14d20     04 CE 05 F1 | 	add	fp, #4
14d24     E7 7C 62 FC | 	wrlong	result2, fp
14d28     04 CE 05 F1 | 	add	fp, #4
14d2c     E7 96 62 FC | 	wrlong	arg03, fp
14d30     08 CE 85 F1 | 	sub	fp, #8
14d34     E7 92 02 F6 | 	mov	arg01, fp
14d38     10 8B BF FD | 	call	#_converttoint
14d3c     3D A7 02 F6 | 	mov	local01, result1
14d40     2C 89 BF FD | 	call	#_pop
14d44     3F 97 02 F6 | 	mov	arg03, result3
14d48     E7 7A 62 FC | 	wrlong	result1, fp
14d4c     04 CE 05 F1 | 	add	fp, #4
14d50     E7 7C 62 FC | 	wrlong	result2, fp
14d54     04 CE 05 F1 | 	add	fp, #4
14d58     E7 96 62 FC | 	wrlong	arg03, fp
14d5c     08 CE 85 F1 | 	sub	fp, #8
14d60     E7 92 02 F6 | 	mov	arg01, fp
14d64     E4 8A BF FD | 	call	#_converttoint
14d68     3D A9 02 F6 | 	mov	local02, result1
14d6c     00 89 BF FD | 	call	#_pop
14d70     3F 97 02 F6 | 	mov	arg03, result3
14d74     E7 7A 62 FC | 	wrlong	result1, fp
14d78     04 CE 05 F1 | 	add	fp, #4
14d7c     E7 7C 62 FC | 	wrlong	result2, fp
14d80     04 CE 05 F1 | 	add	fp, #4
14d84     E7 96 62 FC | 	wrlong	arg03, fp
14d88                 | ' t1=pop() : arg2=converttoint(t1)
14d88                 | ' t1=pop() : arg1=converttoint(t1)
14d88                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14d88     08 CE 85 F1 | 	sub	fp, #8
14d8c     2B 96 0E F2 | 	cmp	arg03, #43 wz
14d90     18 00 90 5D |  if_ne	jmp	#LR__1791
14d94     E7 92 02 FB | 	rdlong	arg01, fp
14d98     44 8A BF FD | 	call	#_convertstring
14d9c     E7 7A 62 FC | 	wrlong	result1, fp
14da0     08 CE 05 F1 | 	add	fp, #8
14da4     E7 3E 68 FC | 	wrlong	#31, fp
14da8     08 CE 85 F1 | 	sub	fp, #8
14dac                 | LR__1791
14dac                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14dac     08 CE 05 F1 | 	add	fp, #8
14db0     E7 96 02 FB | 	rdlong	arg03, fp
14db4     08 CE 85 F1 | 	sub	fp, #8
14db8     1F 96 0E F2 | 	cmp	arg03, #31 wz
14dbc     40 00 90 AD |  if_e	jmp	#LR__1792
14dc0     00 92 06 F6 | 	mov	arg01, #0
14dc4     B8 51 B1 FD | 	call	#__system___getiolock_0622
14dc8     3D 93 02 F6 | 	mov	arg01, result1
14dcc     2C FC B0 FD | 	call	#__system___lockmem
14dd0     98 01 00 FF 
14dd4     08 94 06 F6 | 	mov	arg02, ##@LR__6043
14dd8     00 92 06 F6 | 	mov	arg01, #0
14ddc     00 96 06 F6 | 	mov	arg03, #0
14de0     0C 09 B1 FD | 	call	#__system___basic_print_string
14de4     00 92 06 F6 | 	mov	arg01, #0
14de8     94 51 B1 FD | 	call	#__system___getiolock_0622
14dec     3D 01 68 FC | 	wrlong	#0, result1
14df0     0F 92 06 F6 | 	mov	arg01, #15
14df4     00 94 06 F6 | 	mov	arg02, #0
14df8     D8 BE B0 FD | 	call	#_printerror
14dfc     1C 00 90 FD | 	jmp	#LR__1793
14e00                 | LR__1792
14e00     E7 92 02 FB | 	rdlong	arg01, fp
14e04     54 95 02 F6 | 	mov	arg02, local02
14e08     53 97 02 F6 | 	mov	arg03, local01
14e0c     AC 15 B1 FD | 	call	#__system__Mid_S
14e10     E7 7A 62 FC | 	wrlong	result1, fp
14e14     E7 92 02 F6 | 	mov	arg01, fp
14e18     E4 88 BF FD | 	call	#_push
14e1c                 | LR__1793
14e1c     E7 F0 03 F6 | 	mov	ptra, fp
14e20     F2 00 A0 FD | 	call	#popregs_
14e24                 | _do_mid_ret
14e24     2D 00 64 FD | 	ret
14e28                 | 
14e28                 | ' 
14e28                 | ' '-------------------- mkdir
14e28                 | ' 
14e28                 | ' sub do_mkdir
14e28                 | _do_mkdir
14e28     04 CA 05 F6 | 	mov	COUNT_, #4
14e2c     E8 00 A0 FD | 	call	#pushregs_
14e30     3C 88 BF FD | 	call	#_pop
14e34     3E 99 02 F6 | 	mov	arg04, result2
14e38     3F 97 02 F6 | 	mov	arg03, result3
14e3c     3D A7 02 F6 | 	mov	local01, result1
14e40     4C A9 02 F6 | 	mov	local02, arg04
14e44     4B AB 02 F6 | 	mov	local03, arg03
14e48                 | ' 
14e48                 | ' t1=pop()
14e48                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e48     2B AA 0E F2 | 	cmp	local03, #43 wz
14e4c     10 00 90 5D |  if_ne	jmp	#LR__1800
14e50     53 93 02 F6 | 	mov	arg01, local01
14e54     88 89 BF FD | 	call	#_convertstring
14e58     3D A7 02 F6 | 	mov	local01, result1
14e5c     1F AA 06 F6 | 	mov	local03, #31
14e60                 | LR__1800
14e60                 | ' if t1.result_type<>result_string then printerror(15): return
14e60     1F AA 0E F2 | 	cmp	local03, #31 wz
14e64     10 00 90 AD |  if_e	jmp	#LR__1801
14e68     0F 92 06 F6 | 	mov	arg01, #15
14e6c     00 94 06 F6 | 	mov	arg02, #0
14e70     60 BE B0 FD | 	call	#_printerror
14e74     64 00 90 FD | 	jmp	#LR__1803
14e78                 | LR__1801
14e78     53 93 02 F6 | 	mov	arg01, local01
14e7c     74 1C B1 FD | 	call	#__system___mkdir
14e80     3D AD 0A F6 | 	mov	local04, result1 wz
14e84                 | ' filename$=t1.result.sresult
14e84                 | ' err=mkdir(filename$)
14e84                 | ' 'err=geterr() : 
14e84                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14e84     54 00 90 AD |  if_e	jmp	#LR__1802
14e88     00 92 06 F6 | 	mov	arg01, #0
14e8c     F0 50 B1 FD | 	call	#__system___getiolock_0622
14e90     3D 93 02 F6 | 	mov	arg01, result1
14e94     64 FB B0 FD | 	call	#__system___lockmem
14e98     98 01 00 FF 
14e9c     0F 94 06 F6 | 	mov	arg02, ##@LR__6044
14ea0     00 92 06 F6 | 	mov	arg01, #0
14ea4     00 96 06 F6 | 	mov	arg03, #0
14ea8     44 08 B1 FD | 	call	#__system___basic_print_string
14eac     00 92 06 F6 | 	mov	arg01, #0
14eb0     56 95 02 F6 | 	mov	arg02, local04
14eb4     00 96 06 F6 | 	mov	arg03, #0
14eb8     0A 98 06 F6 | 	mov	arg04, #10
14ebc     74 08 B1 FD | 	call	#__system___basic_print_integer
14ec0     00 92 06 F6 | 	mov	arg01, #0
14ec4     0A 94 06 F6 | 	mov	arg02, #10
14ec8     00 96 06 F6 | 	mov	arg03, #0
14ecc     C8 07 B1 FD | 	call	#__system___basic_print_char
14ed0     00 92 06 F6 | 	mov	arg01, #0
14ed4     A8 50 B1 FD | 	call	#__system___getiolock_0622
14ed8     3D 01 68 FC | 	wrlong	#0, result1
14edc                 | LR__1802
14edc                 | LR__1803
14edc     E7 F0 03 F6 | 	mov	ptra, fp
14ee0     F2 00 A0 FD | 	call	#popregs_
14ee4                 | _do_mkdir_ret
14ee4     2D 00 64 FD | 	ret
14ee8                 | 
14ee8                 | ' 
14ee8                 | ' '-------------------- mode
14ee8                 | ' 
14ee8                 | ' sub do_mode
14ee8                 | _do_mode
14ee8     05 CA 05 F6 | 	mov	COUNT_, #5
14eec     E8 00 A0 FD | 	call	#pushregs_
14ef0     7C 87 BF FD | 	call	#_pop
14ef4     3D A7 02 F6 | 	mov	local01, result1
14ef8     3E A9 02 F6 | 	mov	local02, result2
14efc     3F AB 02 F6 | 	mov	local03, result3
14f00                 | ' t1=pop() 
14f00                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f00     1E AA 0E F2 | 	cmp	local03, #30 wz
14f04     10 00 90 5D |  if_ne	jmp	#LR__1810
14f08     53 93 02 F6 | 	mov	arg01, local01
14f0c     00 94 06 F6 | 	mov	arg02, #0
14f10     80 26 B1 FD | 	call	#__system___float_tointeger
14f14     3D A7 02 F6 | 	mov	local01, result1
14f18                 | LR__1810
14f18                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f18     1F AA 0E F2 | 	cmp	local03, #31 wz
14f1c     18 00 90 5D |  if_ne	jmp	#LR__1811
14f20     53 93 02 F6 | 	mov	arg01, local01
14f24     C0 29 B1 FD | 	call	#__system____builtin_atof
14f28     3D 93 02 F6 | 	mov	arg01, result1
14f2c     00 94 06 F6 | 	mov	arg02, #0
14f30     60 26 B1 FD | 	call	#__system___float_tointeger
14f34     3D A7 02 F6 | 	mov	local01, result1
14f38                 | LR__1811
14f38                 | ' select case t1.result.iresult
14f38     53 AD 02 F6 | 	mov	local04, local01
14f3c     06 AC 26 F3 | 	fle	local04, #6
14f40     30 AC 62 FD | 	jmprel	local04
14f44                 | LR__1812
14f44     18 00 90 FD | 	jmp	#LR__1813
14f48     A8 00 90 FD | 	jmp	#LR__1814
14f4c     10 01 90 FD | 	jmp	#LR__1815
14f50     78 01 90 FD | 	jmp	#LR__1816
14f54     E0 01 90 FD | 	jmp	#LR__1817
14f58     70 02 90 FD | 	jmp	#LR__1818
14f5c     FC 02 90 FD | 	jmp	#LR__1819
14f60                 | LR__1813
14f60     38 00 00 FF 
14f64     E4 65 06 F1 | 	add	objptr, ##29156
14f68     32 03 68 FC | 	wrlong	#1, objptr
14f6c     04 64 86 F1 | 	sub	objptr, #4
14f70     32 35 69 FC | 	wrlong	#154, objptr
14f74     19 00 00 FF 
14f78     00 65 06 F1 | 	add	objptr, ##13056
14f7c     32 03 68 FC | 	wrlong	#1, objptr
14f80     19 00 00 FF 
14f84     04 65 86 F1 | 	sub	objptr, ##13060
14f88     32 27 69 FC | 	wrlong	#147, objptr
14f8c     38 00 00 FF 
14f90     DC 65 86 F1 | 	sub	objptr, ##29148
14f94     04 92 06 F6 | 	mov	arg01, #4
14f98     70 D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14f9c     38 00 00 FF 
14fa0     E0 65 06 F1 | 	add	objptr, ##29152
14fa4     32 93 02 FB | 	rdlong	arg01, objptr
14fa8     04 64 86 F1 | 	sub	objptr, #4
14fac     32 95 02 FB | 	rdlong	arg02, objptr
14fb0                 | ' 
14fb0                 | ' write_color:=ff
14fb0     38 00 00 FF 
14fb4     9B 65 86 F1 | 	sub	objptr, ##29083
14fb8     32 93 62 FC | 	wrlong	arg01, objptr
14fbc                 | ' write_background:=bb
14fbc     04 64 06 F1 | 	add	objptr, #4
14fc0     32 95 62 FC | 	wrlong	arg02, objptr
14fc4     35 AD 02 F6 | 	mov	local04, ptr__dat__
14fc8     01 00 00 FF 
14fcc     00 AC 06 F1 | 	add	local04, ##512
14fd0     54 00 00 FF 
14fd4     3B 64 06 F1 | 	add	objptr, ##43067
14fd8     32 AD 62 FC | 	wrlong	local04, objptr
14fdc     04 64 86 F1 | 	sub	objptr, #4
14fe0     03 00 80 FF 
14fe4     32 31 69 FC | 	wrlong	##1688, objptr
14fe8     54 00 00 FF 
14fec     7C 64 86 F1 | 	sub	objptr, ##43132
14ff0     68 02 90 FD | 	jmp	#LR__1819
14ff4                 | LR__1814
14ff4     38 00 00 FF 
14ff8     E4 65 06 F1 | 	add	objptr, ##29156
14ffc     32 01 68 FC | 	wrlong	#0, objptr
15000     04 64 86 F1 | 	sub	objptr, #4
15004     32 2F 68 FC | 	wrlong	#23, objptr
15008     19 00 00 FF 
1500c     00 65 06 F1 | 	add	objptr, ##13056
15010     32 01 68 FC | 	wrlong	#0, objptr
15014     19 00 00 FF 
15018     04 65 86 F1 | 	sub	objptr, ##13060
1501c     32 01 68 FC | 	wrlong	#0, objptr
15020     38 00 00 FF 
15024     DC 65 86 F1 | 	sub	objptr, ##29148
15028     00 92 06 F6 | 	mov	arg01, #0
1502c     DC D8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15030     38 00 00 FF 
15034     E0 65 06 F1 | 	add	objptr, ##29152
15038     32 93 02 FB | 	rdlong	arg01, objptr
1503c     04 64 86 F1 | 	sub	objptr, #4
15040     32 95 02 FB | 	rdlong	arg02, objptr
15044                 | ' 
15044                 | ' write_color:=ff
15044     38 00 00 FF 
15048     9B 65 86 F1 | 	sub	objptr, ##29083
1504c     32 93 62 FC | 	wrlong	arg01, objptr
15050                 | ' write_background:=bb
15050     04 64 06 F1 | 	add	objptr, #4
15054     32 95 62 FC | 	wrlong	arg02, objptr
15058     45 64 86 F1 | 	sub	objptr, #69
1505c     FC 01 90 FD | 	jmp	#LR__1819
15060                 | LR__1815
15060     38 00 00 FF 
15064     E4 65 06 F1 | 	add	objptr, ##29156
15068     32 01 68 FC | 	wrlong	#0, objptr
1506c     04 64 86 F1 | 	sub	objptr, #4
15070     32 6B 69 FC | 	wrlong	#181, objptr
15074     19 00 00 FF 
15078     00 65 06 F1 | 	add	objptr, ##13056
1507c     32 01 68 FC | 	wrlong	#0, objptr
15080     19 00 00 FF 
15084     04 65 86 F1 | 	sub	objptr, ##13060
15088     32 01 68 FC | 	wrlong	#0, objptr
1508c     38 00 00 FF 
15090     DC 65 86 F1 | 	sub	objptr, ##29148
15094     00 92 06 F6 | 	mov	arg01, #0
15098     70 D8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1509c     38 00 00 FF 
150a0     E0 65 06 F1 | 	add	objptr, ##29152
150a4     32 93 02 FB | 	rdlong	arg01, objptr
150a8     04 64 86 F1 | 	sub	objptr, #4
150ac     32 95 02 FB | 	rdlong	arg02, objptr
150b0                 | ' 
150b0                 | ' write_color:=ff
150b0     38 00 00 FF 
150b4     9B 65 86 F1 | 	sub	objptr, ##29083
150b8     32 93 62 FC | 	wrlong	arg01, objptr
150bc                 | ' write_background:=bb
150bc     04 64 06 F1 | 	add	objptr, #4
150c0     32 95 62 FC | 	wrlong	arg02, objptr
150c4     45 64 86 F1 | 	sub	objptr, #69
150c8     90 01 90 FD | 	jmp	#LR__1819
150cc                 | LR__1816
150cc     38 00 00 FF 
150d0     E4 65 06 F1 | 	add	objptr, ##29156
150d4     32 01 68 FC | 	wrlong	#0, objptr
150d8     04 64 86 F1 | 	sub	objptr, #4
150dc     32 1F 68 FC | 	wrlong	#15, objptr
150e0     19 00 00 FF 
150e4     00 65 06 F1 | 	add	objptr, ##13056
150e8     32 01 68 FC | 	wrlong	#0, objptr
150ec     19 00 00 FF 
150f0     04 65 86 F1 | 	sub	objptr, ##13060
150f4     32 01 68 FC | 	wrlong	#0, objptr
150f8     38 00 00 FF 
150fc     DC 65 86 F1 | 	sub	objptr, ##29148
15100     00 92 06 F6 | 	mov	arg01, #0
15104     04 D8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15108     38 00 00 FF 
1510c     E0 65 06 F1 | 	add	objptr, ##29152
15110     32 93 02 FB | 	rdlong	arg01, objptr
15114     04 64 86 F1 | 	sub	objptr, #4
15118     32 95 02 FB | 	rdlong	arg02, objptr
1511c                 | ' 
1511c                 | ' write_color:=ff
1511c     38 00 00 FF 
15120     9B 65 86 F1 | 	sub	objptr, ##29083
15124     32 93 62 FC | 	wrlong	arg01, objptr
15128                 | ' write_background:=bb
15128     04 64 06 F1 | 	add	objptr, #4
1512c     32 95 62 FC | 	wrlong	arg02, objptr
15130     45 64 86 F1 | 	sub	objptr, #69
15134     24 01 90 FD | 	jmp	#LR__1819
15138                 | LR__1817
15138     38 00 00 FF 
1513c     E4 65 06 F1 | 	add	objptr, ##29156
15140     32 03 68 FC | 	wrlong	#1, objptr
15144     04 64 86 F1 | 	sub	objptr, #4
15148     32 03 68 FC | 	wrlong	#1, objptr
1514c     19 00 00 FF 
15150     00 65 06 F1 | 	add	objptr, ##13056
15154     32 03 68 FC | 	wrlong	#1, objptr
15158     19 00 00 FF 
1515c     04 65 86 F1 | 	sub	objptr, ##13060
15160     32 1D 68 FC | 	wrlong	#14, objptr
15164     38 00 00 FF 
15168     DC 65 86 F1 | 	sub	objptr, ##29148
1516c     04 92 06 F6 | 	mov	arg01, #4
15170     98 D7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15174     38 00 00 FF 
15178     E0 65 06 F1 | 	add	objptr, ##29152
1517c     32 93 02 FB | 	rdlong	arg01, objptr
15180     04 64 86 F1 | 	sub	objptr, #4
15184     32 95 02 FB | 	rdlong	arg02, objptr
15188                 | ' 
15188                 | ' write_color:=ff
15188     38 00 00 FF 
1518c     9B 65 86 F1 | 	sub	objptr, ##29083
15190     32 93 62 FC | 	wrlong	arg01, objptr
15194                 | ' write_background:=bb
15194     04 64 06 F1 | 	add	objptr, #4
15198     32 95 62 FC | 	wrlong	arg02, objptr
1519c     35 AF 02 F6 | 	mov	local05, ptr__dat__
151a0     07 00 00 FF 
151a4     82 AF 06 F1 | 	add	local05, ##3970
151a8     54 00 00 FF 
151ac     3B 64 06 F1 | 	add	objptr, ##43067
151b0     32 AF 62 FC | 	wrlong	local05, objptr
151b4     04 64 86 F1 | 	sub	objptr, #4
151b8     03 00 80 FF 
151bc     32 31 69 FC | 	wrlong	##1688, objptr
151c0     54 00 00 FF 
151c4     7C 64 86 F1 | 	sub	objptr, ##43132
151c8     90 00 90 FD | 	jmp	#LR__1819
151cc                 | LR__1818
151cc     38 00 00 FF 
151d0     E4 65 06 F1 | 	add	objptr, ##29156
151d4     32 05 68 FC | 	wrlong	#2, objptr
151d8     04 64 86 F1 | 	sub	objptr, #4
151dc     32 03 68 FC | 	wrlong	#1, objptr
151e0     19 00 00 FF 
151e4     00 65 06 F1 | 	add	objptr, ##13056
151e8     32 03 68 FC | 	wrlong	#1, objptr
151ec     19 00 00 FF 
151f0     04 65 86 F1 | 	sub	objptr, ##13060
151f4     32 0F 68 FC | 	wrlong	#7, objptr
151f8     38 00 00 FF 
151fc     DC 65 86 F1 | 	sub	objptr, ##29148
15200     08 92 06 F6 | 	mov	arg01, #8
15204     04 D7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15208     38 00 00 FF 
1520c     E0 65 06 F1 | 	add	objptr, ##29152
15210     32 93 02 FB | 	rdlong	arg01, objptr
15214     04 64 86 F1 | 	sub	objptr, #4
15218     32 95 02 FB | 	rdlong	arg02, objptr
1521c                 | ' 
1521c                 | ' write_color:=ff
1521c     38 00 00 FF 
15220     9B 65 86 F1 | 	sub	objptr, ##29083
15224     32 93 62 FC | 	wrlong	arg01, objptr
15228                 | ' write_background:=bb
15228     04 64 06 F1 | 	add	objptr, #4
1522c     32 95 62 FC | 	wrlong	arg02, objptr
15230     35 AF 02 F6 | 	mov	local05, ptr__dat__
15234     07 00 00 FF 
15238     82 AF 06 F1 | 	add	local05, ##3970
1523c     54 00 00 FF 
15240     3B 64 06 F1 | 	add	objptr, ##43067
15244     32 AF 62 FC | 	wrlong	local05, objptr
15248     04 64 86 F1 | 	sub	objptr, #4
1524c     03 00 80 FF 
15250     32 31 69 FC | 	wrlong	##1688, objptr
15254     54 00 00 FF 
15258     7C 64 86 F1 | 	sub	objptr, ##43132
1525c                 | LR__1819
1525c     54 00 00 FF 
15260     78 64 06 F1 | 	add	objptr, ##43128
15264     32 A7 62 FC | 	wrlong	local01, objptr
15268     04 64 86 F1 | 	sub	objptr, #4
1526c     32 93 02 FB | 	rdlong	arg01, objptr
15270     0F 00 00 FF 
15274     74 64 86 F1 | 	sub	objptr, ##7796
15278     32 AF 02 FB | 	rdlong	local05, objptr
1527c     45 00 00 FF 
15280     00 64 86 F1 | 	sub	objptr, ##35328
15284     57 93 82 F1 | 	sub	arg01, local05
15288     00 94 06 F6 | 	mov	arg02, #0
1528c     0A 96 06 F6 | 	mov	arg03, #10
15290     64 12 B1 FD | 	call	#__system__Number_S
15294     3D 93 02 F6 | 	mov	arg01, result1
15298     98 01 00 FF 
1529c     38 94 06 F6 | 	mov	arg02, ##@LR__6045
152a0     B4 F7 B0 FD | 	call	#__system___string_concat
152a4     52 00 00 FF 
152a8     DC 64 06 F1 | 	add	objptr, ##42204
152ac     32 7B 62 FC | 	wrlong	result1, objptr
152b0     19 00 00 FF 
152b4     FC 64 86 F1 | 	sub	objptr, ##13052
152b8     32 93 02 FB | 	rdlong	arg01, objptr
152bc     04 64 86 F1 | 	sub	objptr, #4
152c0     32 95 02 FB | 	rdlong	arg02, objptr
152c4     38 00 00 FF 
152c8     DC 65 86 F1 | 	sub	objptr, ##29148
152cc     08 D8 B0 FD | 	call	#_hg010b_spin2_cls
152d0     98 01 00 FF 
152d4     4A 92 06 F6 | 	mov	arg01, ##@LR__6046
152d8                 | ' 
152d8                 | ' write(text)
152d8     B0 DB B0 FD | 	call	#_hg010b_spin2_write
152dc                 | ' crlf
152dc     4C E0 B0 FD | 	call	#_hg010b_spin2_crlf
152e0     18 00 00 FF 
152e4     40 6B 06 F1 | 	add	ptr__dat__, ##12608
152e8     35 93 02 FB | 	rdlong	arg01, ptr__dat__
152ec     18 00 00 FF 
152f0     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
152f4                 | ' 
152f4                 | ' write(text)
152f4     94 DB B0 FD | 	call	#_hg010b_spin2_write
152f8                 | ' crlf
152f8     30 E0 B0 FD | 	call	#_hg010b_spin2_crlf
152fc     52 00 00 FF 
15300     DC 64 06 F1 | 	add	objptr, ##42204
15304     32 93 02 FB | 	rdlong	arg01, objptr
15308     52 00 00 FF 
1530c     DC 64 86 F1 | 	sub	objptr, ##42204
15310                 | ' 
15310                 | ' write(text)
15310     78 DB B0 FD | 	call	#_hg010b_spin2_write
15314                 | ' crlf
15314     14 E0 B0 FD | 	call	#_hg010b_spin2_crlf
15318     E7 F0 03 F6 | 	mov	ptra, fp
1531c     F2 00 A0 FD | 	call	#popregs_
15320                 | _do_mode_ret
15320     2D 00 64 FD | 	ret
15324                 | 
15324                 | ' 
15324                 | ' '-------------------- mouse
15324                 | ' 
15324                 | ' sub do_mouse
15324                 | _do_mouse
15324     48 83 BF FD | 	call	#_pop
15328     00 7A 4E F2 | 	cmps	result1, #0 wz
1532c                 | ' 
1532c                 | ' t1=pop()
1532c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1532c     14 00 90 5D |  if_ne	jmp	#LR__1820
15330     10 92 06 F6 | 	mov	arg01, #16
15334     00 94 06 F6 | 	mov	arg02, #0
15338     00 96 06 F6 | 	mov	arg03, #0
1533c     00 CA B0 FD | 	call	#_hg010b_spin2_setspritesize
15340     10 00 90 FD | 	jmp	#LR__1821
15344                 | LR__1820
15344     10 92 06 F6 | 	mov	arg01, #16
15348     20 94 06 F6 | 	mov	arg02, #32
1534c     20 96 06 F6 | 	mov	arg03, #32
15350     EC C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
15354                 | LR__1821
15354                 | _do_mouse_ret
15354     2D 00 64 FD | 	ret
15358                 | 
15358                 | ' 
15358                 | ' '-------------------- mousek
15358                 | ' 
15358                 | ' sub do_mousek
15358                 | _do_mousek
15358     00 CA 05 F6 | 	mov	COUNT_, #0
1535c     E8 00 A0 FD | 	call	#pushregs_
15360     0C F0 07 F1 | 	add	ptra, #12
15364     08 CE 05 F1 | 	add	fp, #8
15368     E7 3A 68 FC | 	wrlong	#29, fp
1536c     08 CE 85 F1 | 	sub	fp, #8
15370     53 00 00 FF 
15374     F4 64 06 F1 | 	add	objptr, ##42740
15378     32 93 02 FB | 	rdlong	arg01, objptr
1537c     53 00 00 FF 
15380     F4 64 86 F1 | 	sub	objptr, ##42740
15384     E7 92 62 FC | 	wrlong	arg01, fp
15388     E7 92 02 F6 | 	mov	arg01, fp
1538c     70 83 BF FD | 	call	#_push
15390     E7 F0 03 F6 | 	mov	ptra, fp
15394     F2 00 A0 FD | 	call	#popregs_
15398                 | _do_mousek_ret
15398     2D 00 64 FD | 	ret
1539c                 | 
1539c                 | ' 
1539c                 | ' '-------------------- mousew
1539c                 | ' 
1539c                 | ' sub do_mousew
1539c                 | _do_mousew
1539c     00 CA 05 F6 | 	mov	COUNT_, #0
153a0     E8 00 A0 FD | 	call	#pushregs_
153a4     0C F0 07 F1 | 	add	ptra, #12
153a8     08 CE 05 F1 | 	add	fp, #8
153ac     E7 38 68 FC | 	wrlong	#28, fp
153b0     08 CE 85 F1 | 	sub	fp, #8
153b4     53 00 00 FF 
153b8     F8 64 06 F1 | 	add	objptr, ##42744
153bc     32 93 02 FB | 	rdlong	arg01, objptr
153c0     53 00 00 FF 
153c4     F8 64 86 F1 | 	sub	objptr, ##42744
153c8     E7 92 62 FC | 	wrlong	arg01, fp
153cc     E7 92 02 F6 | 	mov	arg01, fp
153d0     2C 83 BF FD | 	call	#_push
153d4     E7 F0 03 F6 | 	mov	ptra, fp
153d8     F2 00 A0 FD | 	call	#popregs_
153dc                 | _do_mousew_ret
153dc     2D 00 64 FD | 	ret
153e0                 | 
153e0                 | ' 
153e0                 | ' '-------------------- mousex
153e0                 | ' 
153e0                 | ' sub do_mousex
153e0                 | _do_mousex
153e0     00 CA 05 F6 | 	mov	COUNT_, #0
153e4     E8 00 A0 FD | 	call	#pushregs_
153e8     0C F0 07 F1 | 	add	ptra, #12
153ec     08 CE 05 F1 | 	add	fp, #8
153f0     E7 3A 68 FC | 	wrlong	#29, fp
153f4     08 CE 85 F1 | 	sub	fp, #8
153f8     53 00 00 FF 
153fc     EC 64 06 F1 | 	add	objptr, ##42732
15400     32 93 02 FB | 	rdlong	arg01, objptr
15404     53 00 00 FF 
15408     EC 64 86 F1 | 	sub	objptr, ##42732
1540c     E7 92 62 FC | 	wrlong	arg01, fp
15410     E7 92 02 F6 | 	mov	arg01, fp
15414     E8 82 BF FD | 	call	#_push
15418     E7 F0 03 F6 | 	mov	ptra, fp
1541c     F2 00 A0 FD | 	call	#popregs_
15420                 | _do_mousex_ret
15420     2D 00 64 FD | 	ret
15424                 | 
15424                 | ' 
15424                 | ' '-------------------- mousey
15424                 | ' 
15424                 | ' sub do_mousey
15424                 | _do_mousey
15424     00 CA 05 F6 | 	mov	COUNT_, #0
15428     E8 00 A0 FD | 	call	#pushregs_
1542c     0C F0 07 F1 | 	add	ptra, #12
15430     08 CE 05 F1 | 	add	fp, #8
15434     E7 3A 68 FC | 	wrlong	#29, fp
15438     08 CE 85 F1 | 	sub	fp, #8
1543c     53 00 00 FF 
15440     F0 64 06 F1 | 	add	objptr, ##42736
15444     32 93 02 FB | 	rdlong	arg01, objptr
15448     53 00 00 FF 
1544c     F0 64 86 F1 | 	sub	objptr, ##42736
15450     E7 92 62 FC | 	wrlong	arg01, fp
15454     E7 92 02 F6 | 	mov	arg01, fp
15458     A4 82 BF FD | 	call	#_push
1545c     E7 F0 03 F6 | 	mov	ptra, fp
15460     F2 00 A0 FD | 	call	#popregs_
15464                 | _do_mousey_ret
15464     2D 00 64 FD | 	ret
15468                 | 
15468                 | ' 
15468                 | ' '------------------ new
15468                 | ' 
15468                 | ' sub do_new
15468                 | _do_new
15468     03 CA 05 F6 | 	mov	COUNT_, #3
1546c     E8 00 A0 FD | 	call	#pushregs_
15470                 | ' 
15470                 | ' if inrun=1 then inrun=2
15470     52 00 00 FF 
15474     90 64 06 F1 | 	add	objptr, ##42128
15478     32 97 02 FB | 	rdlong	arg03, objptr
1547c     52 00 00 FF 
15480     90 64 86 F1 | 	sub	objptr, ##42128
15484     01 96 0E F2 | 	cmp	arg03, #1 wz
15488     52 00 00 AF 
1548c     90 64 06 A1 |  if_e	add	objptr, ##42128
15490     32 05 68 AC |  if_e	wrlong	#2, objptr
15494     52 00 00 AF 
15498     90 64 86 A1 |  if_e	sub	objptr, ##42128
1549c     13 92 C6 F9 | 	decod	arg01, #19
154a0     01 94 66 F6 | 	neg	arg02, #1
154a4     C8 B9 B0 FD | 	call	#_pslpoke
154a8     36 00 00 FF 
154ac     AC 65 06 F1 | 	add	objptr, ##28076
154b0     32 01 68 FC | 	wrlong	#0, objptr
154b4                 | ' pslpoke(memlo,$FFFFFFFF)
154b4                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
154b4     00 A6 06 F6 | 	mov	local01, #0
154b8     20 00 00 FF 
154bc     10 64 86 F1 | 	sub	objptr, ##16400
154c0     D7 1E 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
154c4                 | LR__1830
154c4     53 97 02 F6 | 	mov	arg03, local01
154c8     04 96 66 F0 | 	shl	arg03, #4
154cc     32 97 02 F1 | 	add	arg03, objptr
154d0     98 01 00 FF 
154d4     4B 94 06 F6 | 	mov	arg02, ##@LR__6047
154d8     4B 95 62 FC | 	wrlong	arg02, arg03
154dc     53 A9 02 F6 | 	mov	local02, local01
154e0     04 A8 66 F0 | 	shl	local02, #4
154e4     32 A9 02 F1 | 	add	local02, objptr
154e8     0C A8 06 F1 | 	add	local02, #12
154ec     54 01 68 FC | 	wrlong	#0, local02
154f0     01 A6 06 F1 | 	add	local01, #1
154f4     02 00 00 FF 
154f8     01 A6 56 F2 | 	cmps	local01, ##1025 wc
154fc     C4 FF 9F CD |  if_b	jmp	#LR__1830
15500                 | LR__1831
15500     35 00 00 FF 
15504     90 64 06 F1 | 	add	objptr, ##27280
15508     00 04 80 FF 
1550c     32 01 68 FC | 	wrlong	##524288, objptr
15510     06 00 00 FF 
15514     30 64 06 F1 | 	add	objptr, ##3120
15518     00 04 80 FF 
1551c     32 01 68 FC | 	wrlong	##524288, objptr
15520     04 64 06 F1 | 	add	objptr, #4
15524     00 04 80 FF 
15528     32 01 68 FC | 	wrlong	##524288, objptr
1552c     0D 00 00 FF 
15530     64 64 86 F1 | 	sub	objptr, ##6756
15534     32 01 68 FC | 	wrlong	#0, objptr
15538     07 00 00 FF 
1553c     24 64 06 F1 | 	add	objptr, ##3620
15540     32 01 68 FC | 	wrlong	#0, objptr
15544     07 00 00 FF 
15548     20 64 86 F1 | 	sub	objptr, ##3616
1554c     00 04 80 FF 
15550     32 01 68 FC | 	wrlong	##524288, objptr
15554     0D 00 00 FF 
15558     D0 64 06 F1 | 	add	objptr, ##6864
1555c     32 01 68 FC | 	wrlong	#0, objptr
15560     98 01 00 FF 
15564     4C AA 06 F6 | 	mov	local03, ##@LR__6048
15568     01 00 00 FF 
1556c     E8 65 06 F1 | 	add	objptr, ##1000
15570     32 AB 62 FC | 	wrlong	local03, objptr
15574     08 00 00 FF 
15578     88 64 86 F1 | 	sub	objptr, ##4232
1557c     32 01 68 FC | 	wrlong	#0, objptr
15580     04 64 06 F1 | 	add	objptr, #4
15584     FF FF FF FF 
15588     32 FF 6B FC | 	wrlong	##-1, objptr
1558c     06 00 00 FF 
15590     A0 64 06 F1 | 	add	objptr, ##3232
15594     32 01 68 FC | 	wrlong	#0, objptr
15598     04 64 06 F1 | 	add	objptr, #4
1559c     32 01 68 FC | 	wrlong	#0, objptr
155a0                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
155a0                 | ' stackpointer=0
155a0                 | ' lineptr=0 
155a0                 | ' programptr=memlo ': stringptr=0
155a0                 | ' dataptr=0 : readline=""
155a0                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
155a0                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
155a0     00 A6 06 F6 | 	mov	local01, #0
155a4     06 00 00 FF 
155a8     9C 64 86 F1 | 	sub	objptr, ##3228
155ac     D7 16 48 FB | 	callpa	#(@LR__1833-@LR__1832)>>2,fcache_load_ptr_
155b0                 | LR__1832
155b0     53 A9 02 F6 | 	mov	local02, local01
155b4     02 A8 66 F0 | 	shl	local02, #2
155b8     53 A9 02 F1 | 	add	local02, local01
155bc     02 A8 66 F0 | 	shl	local02, #2
155c0     32 A9 02 F1 | 	add	local02, objptr
155c4     08 A8 06 F1 | 	add	local02, #8
155c8     FF FF FF FF 
155cc     54 FF 6B FC | 	wrlong	##-1, local02
155d0     01 A6 06 F1 | 	add	local01, #1
155d4     41 A6 56 F2 | 	cmps	local01, #65 wc
155d8     D4 FF 9F CD |  if_b	jmp	#LR__1832
155dc                 | LR__1833
155dc     4C 00 00 FF 
155e0     3C 64 86 F1 | 	sub	objptr, ##38972
155e4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
155e4     00 A6 06 F6 | 	mov	local01, #0
155e8                 | LR__1834
155e8     53 97 02 F6 | 	mov	arg03, local01
155ec     02 96 66 F0 | 	shl	arg03, #2
155f0     32 A9 02 F6 | 	mov	local02, objptr
155f4     54 00 00 FF 
155f8     30 A8 06 F1 | 	add	local02, ##43056
155fc     54 97 02 F1 | 	add	arg03, local02
15600     4B AB 0A FB | 	rdlong	local03, arg03 wz
15604     30 00 90 AD |  if_e	jmp	#LR__1835
15608     53 93 02 F6 | 	mov	arg01, local01
1560c     00 94 06 F6 | 	mov	arg02, #0
15610     00 96 06 F6 | 	mov	arg03, #0
15614     28 C7 B0 FD | 	call	#_hg010b_spin2_setspritesize
15618     53 A9 02 F6 | 	mov	local02, local01
1561c     02 A8 66 F0 | 	shl	local02, #2
15620     32 AB 02 F6 | 	mov	local03, objptr
15624     54 00 00 FF 
15628     30 AA 06 F1 | 	add	local03, ##43056
1562c     55 A9 02 F1 | 	add	local02, local03
15630     54 93 02 FB | 	rdlong	arg01, local02
15634     00 2F B1 FD | 	call	#__system___gc_free
15638                 | LR__1835
15638     01 A6 06 F1 | 	add	local01, #1
1563c     10 A6 56 F2 | 	cmps	local01, #16 wc
15640     A4 FF 9F CD |  if_b	jmp	#LR__1834
15644     54 00 00 FF 
15648     84 64 06 F1 | 	add	objptr, ##43140
1564c     00 C0 9F FF 
15650     32 01 68 FC | 	wrlong	##1065353216, objptr
15654     04 64 06 F1 | 	add	objptr, #4
15658     00 C0 9F FF 
1565c     32 01 68 FC | 	wrlong	##1065353216, objptr
15660     54 00 00 FF 
15664     84 64 86 F1 | 	sub	objptr, ##43140
15668     32 AB 02 FB | 	rdlong	local03, objptr
1566c     54 00 00 FF 
15670     70 64 06 F1 | 	add	objptr, ##43120
15674     32 AB 62 FC | 	wrlong	local03, objptr
15678     54 00 00 FF 
1567c     74 64 86 F1 | 	sub	objptr, ##43124
15680     11 92 06 F6 | 	mov	arg01, #17
15684     08 94 06 F6 | 	mov	arg02, #8
15688     10 96 06 F6 | 	mov	arg03, #16
1568c     B0 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15690     10 92 06 F6 | 	mov	arg01, #16
15694     20 94 06 F6 | 	mov	arg02, #32
15698     20 96 06 F6 | 	mov	arg03, #32
1569c     A0 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
156a0     98 01 00 FF 
156a4     4D AA 06 F6 | 	mov	local03, ##@LR__6049
156a8     54 00 00 FF 
156ac     A0 64 06 F1 | 	add	objptr, ##43168
156b0     32 AB 62 FC | 	wrlong	local03, objptr
156b4     54 00 00 FF 
156b8     A0 64 86 F1 | 	sub	objptr, ##43168
156bc     F0 A9 B0 FD | 	call	#_init_audio
156c0     E7 F0 03 F6 | 	mov	ptra, fp
156c4     F2 00 A0 FD | 	call	#popregs_
156c8                 | _do_new_ret
156c8     2D 00 64 FD | 	ret
156cc                 | 
156cc                 | ' 
156cc                 | ' '-------------------- next
156cc                 | ' 
156cc                 | ' sub do_next()
156cc                 | _do_next
156cc     04 CA 05 F6 | 	mov	COUNT_, #4
156d0     E8 00 A0 FD | 	call	#pushregs_
156d4     98 7F BF FD | 	call	#_pop
156d8     3D A7 02 F6 | 	mov	local01, result1
156dc     3E A9 02 F6 | 	mov	local02, result2
156e0     3F AB 02 F6 | 	mov	local03, result3
156e4                 | ' t1=pop() :varnum=t1.result.uresult
156e4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
156e4     52 00 00 FF 
156e8     D4 64 06 F1 | 	add	objptr, ##42196
156ec     32 95 02 FB | 	rdlong	arg02, objptr
156f0     4A 93 02 F6 | 	mov	arg01, arg02
156f4     02 92 66 F0 | 	shl	arg01, #2
156f8     4A 93 02 F1 | 	add	arg01, arg02
156fc     02 92 66 F0 | 	shl	arg01, #2
15700     06 00 00 FF 
15704     98 64 86 F1 | 	sub	objptr, ##3224
15708     32 93 02 F1 | 	add	arg01, objptr
1570c     08 92 06 F1 | 	add	arg01, #8
15710     49 95 02 FB | 	rdlong	arg02, arg01
15714     53 95 0A F2 | 	cmp	arg02, local01 wz
15718     4C 00 00 FF 
1571c     3C 64 86 F1 | 	sub	objptr, ##38972
15720     10 00 90 AD |  if_e	jmp	#LR__1840
15724     25 92 06 F6 | 	mov	arg01, #37
15728     00 94 06 F6 | 	mov	arg02, #0
1572c     A4 B5 B0 FD | 	call	#_printerror
15730     50 03 90 FD | 	jmp	#LR__1847
15734                 | LR__1840
15734                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15734     53 95 02 F6 | 	mov	arg02, local01
15738     04 94 66 F0 | 	shl	arg02, #4
1573c     32 93 02 F6 | 	mov	arg01, objptr
15740     16 00 00 FF 
15744     9C 93 06 F1 | 	add	arg01, ##11676
15748     49 95 02 F1 | 	add	arg02, arg01
1574c     0C 94 06 F1 | 	add	arg02, #12
15750     4A 95 02 FB | 	rdlong	arg02, arg02
15754     1E 94 0E F2 | 	cmp	arg02, #30 wz
15758     54 00 90 5D |  if_ne	jmp	#LR__1841
1575c     53 95 02 F6 | 	mov	arg02, local01
15760     04 94 66 F0 | 	shl	arg02, #4
15764     16 00 00 FF 
15768     9C 65 06 F1 | 	add	objptr, ##11676
1576c     32 95 02 F1 | 	add	arg02, objptr
15770     0C 94 06 F1 | 	add	arg02, #12
15774     4A 39 68 FC | 	wrlong	#28, arg02
15778     53 AD 02 F6 | 	mov	local04, local01
1577c     04 AC 66 F0 | 	shl	local04, #4
15780     32 AD 02 F1 | 	add	local04, objptr
15784     53 95 02 F6 | 	mov	arg02, local01
15788     04 94 66 F0 | 	shl	arg02, #4
1578c     32 95 02 F1 | 	add	arg02, objptr
15790     04 94 06 F1 | 	add	arg02, #4
15794     4A 93 02 FB | 	rdlong	arg01, arg02
15798     16 00 00 FF 
1579c     9C 65 86 F1 | 	sub	objptr, ##11676
157a0     01 94 06 F6 | 	mov	arg02, #1
157a4     EC 1D B1 FD | 	call	#__system___float_tointeger
157a8     04 AC 06 F1 | 	add	local04, #4
157ac     56 7B 62 FC | 	wrlong	result1, local04
157b0                 | LR__1841
157b0     53 AD 02 F6 | 	mov	local04, local01
157b4     04 AC 66 F0 | 	shl	local04, #4
157b8     16 00 00 FF 
157bc     9C 65 06 F1 | 	add	objptr, ##11676
157c0     32 AD 02 F1 | 	add	local04, objptr
157c4     53 95 02 F6 | 	mov	arg02, local01
157c8     04 94 66 F0 | 	shl	arg02, #4
157cc     32 95 02 F1 | 	add	arg02, objptr
157d0     3B 00 00 FF 
157d4     38 65 06 F1 | 	add	objptr, ##30520
157d8     32 93 02 FB | 	rdlong	arg01, objptr
157dc     49 7F 02 F6 | 	mov	result3, arg01
157e0     02 7E 66 F0 | 	shl	result3, #2
157e4     49 7F 02 F1 | 	add	result3, arg01
157e8     02 7E 66 F0 | 	shl	result3, #2
157ec     06 00 00 FF 
157f0     98 64 86 F1 | 	sub	objptr, ##3224
157f4     32 7F 02 F1 | 	add	result3, objptr
157f8     04 94 06 F1 | 	add	arg02, #4
157fc     4A 93 02 FB | 	rdlong	arg01, arg02
15800     0C 7E 06 F1 | 	add	result3, #12
15804     3F 7F 02 FB | 	rdlong	result3, result3
15808     3F 93 02 F1 | 	add	arg01, result3
1580c     04 AC 06 F1 | 	add	local04, #4
15810     56 93 62 FC | 	wrlong	arg01, local04
15814                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15814                 | ' if fortable(fortop).stepval>=0 then
15814     06 00 00 FF 
15818     98 64 06 F1 | 	add	objptr, ##3224
1581c     32 AD 02 FB | 	rdlong	local04, objptr
15820     56 93 02 F6 | 	mov	arg01, local04
15824     02 92 66 F0 | 	shl	arg01, #2
15828     56 93 02 F1 | 	add	arg01, local04
1582c     02 92 66 F0 | 	shl	arg01, #2
15830     06 00 00 FF 
15834     98 64 86 F1 | 	sub	objptr, ##3224
15838     32 93 02 F1 | 	add	arg01, objptr
1583c     0C 92 06 F1 | 	add	arg01, #12
15840     49 93 02 FB | 	rdlong	arg01, arg01
15844     00 92 56 F2 | 	cmps	arg01, #0 wc
15848     4C 00 00 FF 
1584c     3C 64 86 F1 | 	sub	objptr, ##38972
15850     78 00 90 CD |  if_b	jmp	#LR__1842
15854                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15854     04 A6 66 F0 | 	shl	local01, #4
15858     16 00 00 FF 
1585c     9C 65 06 F1 | 	add	objptr, ##11676
15860     32 A7 02 F1 | 	add	local01, objptr
15864     3B 00 00 FF 
15868     38 65 06 F1 | 	add	objptr, ##30520
1586c     32 93 02 FB | 	rdlong	arg01, objptr
15870     49 AD 02 F6 | 	mov	local04, arg01
15874     02 AC 66 F0 | 	shl	local04, #2
15878     49 AD 02 F1 | 	add	local04, arg01
1587c     02 AC 66 F0 | 	shl	local04, #2
15880     06 00 00 FF 
15884     98 64 86 F1 | 	sub	objptr, ##3224
15888     32 AD 02 F1 | 	add	local04, objptr
1588c     04 A6 06 F1 | 	add	local01, #4
15890     53 A7 02 FB | 	rdlong	local01, local01
15894     10 AC 06 F1 | 	add	local04, #16
15898     56 AD 02 FB | 	rdlong	local04, local04
1589c     56 A7 5A F2 | 	cmps	local01, local04 wcz
158a0     4C 00 00 FF 
158a4     3C 64 86 F1 | 	sub	objptr, ##38972
158a8     9C 00 90 ED |  if_be	jmp	#LR__1844
158ac     52 00 00 FF 
158b0     D4 64 06 F1 | 	add	objptr, ##42196
158b4     32 AD 02 FB | 	rdlong	local04, objptr
158b8     01 AC 86 F1 | 	sub	local04, #1
158bc     32 AD 62 FC | 	wrlong	local04, objptr
158c0     52 00 00 FF 
158c4     D4 64 86 F1 | 	sub	objptr, ##42196
158c8     B8 01 90 FD | 	jmp	#LR__1847
158cc                 | LR__1842
158cc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
158cc     53 AD 02 F6 | 	mov	local04, local01
158d0     04 AC 66 F0 | 	shl	local04, #4
158d4     16 00 00 FF 
158d8     9C 65 06 F1 | 	add	objptr, ##11676
158dc     32 AD 02 F1 | 	add	local04, objptr
158e0     3B 00 00 FF 
158e4     38 65 06 F1 | 	add	objptr, ##30520
158e8     32 A7 02 FB | 	rdlong	local01, objptr
158ec     53 93 02 F6 | 	mov	arg01, local01
158f0     02 92 66 F0 | 	shl	arg01, #2
158f4     53 93 02 F1 | 	add	arg01, local01
158f8     02 92 66 F0 | 	shl	arg01, #2
158fc     06 00 00 FF 
15900     98 64 86 F1 | 	sub	objptr, ##3224
15904     32 93 02 F1 | 	add	arg01, objptr
15908     04 AC 06 F1 | 	add	local04, #4
1590c     56 AD 02 FB | 	rdlong	local04, local04
15910     10 92 06 F1 | 	add	arg01, #16
15914     49 93 02 FB | 	rdlong	arg01, arg01
15918     49 AD 52 F2 | 	cmps	local04, arg01 wc
1591c     4C 00 00 FF 
15920     3C 64 86 F1 | 	sub	objptr, ##38972
15924     20 00 90 3D |  if_ae	jmp	#LR__1843
15928     52 00 00 FF 
1592c     D4 64 06 F1 | 	add	objptr, ##42196
15930     32 AD 02 FB | 	rdlong	local04, objptr
15934     01 AC 86 F1 | 	sub	local04, #1
15938     32 AD 62 FC | 	wrlong	local04, objptr
1593c     52 00 00 FF 
15940     D4 64 86 F1 | 	sub	objptr, ##42196
15944     3C 01 90 FD | 	jmp	#LR__1847
15948                 | LR__1843
15948                 | LR__1844
15948                 | ' ' if not returned, goto pointer 
15948                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15948     52 00 00 FF 
1594c     90 64 06 F1 | 	add	objptr, ##42128
15950     32 AD 02 FB | 	rdlong	local04, objptr
15954     52 00 00 FF 
15958     90 64 86 F1 | 	sub	objptr, ##42128
1595c     01 AC 16 F2 | 	cmp	local04, #1 wc
15960     DC 00 90 CD |  if_b	jmp	#LR__1845
15964     52 00 00 FF 
15968     D4 64 06 F1 | 	add	objptr, ##42196
1596c     32 AD 02 FB | 	rdlong	local04, objptr
15970     56 A7 02 F6 | 	mov	local01, local04
15974     02 A6 66 F0 | 	shl	local01, #2
15978     56 A7 02 F1 | 	add	local01, local04
1597c     02 A6 66 F0 | 	shl	local01, #2
15980     06 00 00 FF 
15984     98 64 86 F1 | 	sub	objptr, ##3224
15988     32 A7 02 F1 | 	add	local01, objptr
1598c     06 00 00 FF 
15990     20 64 06 F1 | 	add	objptr, ##3104
15994     32 AD 02 FB | 	rdlong	local04, objptr
15998     52 00 00 FF 
1599c     5C 64 86 F1 | 	sub	objptr, ##42076
159a0     53 A7 02 FB | 	rdlong	local01, local01
159a4     53 AD 0A F2 | 	cmp	local04, local01 wz
159a8     94 00 90 AD |  if_e	jmp	#LR__1845
159ac     52 00 00 FF 
159b0     D4 64 06 F1 | 	add	objptr, ##42196
159b4     32 AD 02 FB | 	rdlong	local04, objptr
159b8     56 A7 02 F6 | 	mov	local01, local04
159bc     02 A6 66 F0 | 	shl	local01, #2
159c0     56 A7 02 F1 | 	add	local01, local04
159c4     02 A6 66 F0 | 	shl	local01, #2
159c8     06 00 00 FF 
159cc     98 64 86 F1 | 	sub	objptr, ##3224
159d0     32 A7 02 F1 | 	add	local01, objptr
159d4     53 A7 02 FB | 	rdlong	local01, local01
159d8     06 00 00 FF 
159dc     20 64 06 F1 | 	add	objptr, ##3104
159e0     32 A7 62 FC | 	wrlong	local01, objptr
159e4     78 64 06 F1 | 	add	objptr, #120
159e8     32 AD 02 FB | 	rdlong	local04, objptr
159ec     56 A7 02 F6 | 	mov	local01, local04
159f0     02 A6 66 F0 | 	shl	local01, #2
159f4     56 A7 02 F1 | 	add	local01, local04
159f8     02 A6 66 F0 | 	shl	local01, #2
159fc     06 00 00 FF 
15a00     98 64 86 F1 | 	sub	objptr, ##3224
15a04     32 A7 02 F1 | 	add	local01, objptr
15a08     04 A6 06 F1 | 	add	local01, #4
15a0c     53 A7 02 FB | 	rdlong	local01, local01
15a10     06 00 00 FF 
15a14     24 64 06 F1 | 	add	objptr, ##3108
15a18     32 A7 62 FC | 	wrlong	local01, objptr
15a1c     06 00 00 FF 
15a20     40 64 86 F1 | 	sub	objptr, ##3136
15a24     32 AD 02 FB | 	rdlong	local04, objptr
15a28     01 AC 86 F1 | 	sub	local04, #1
15a2c     04 64 06 F1 | 	add	objptr, #4
15a30     32 AD 62 FC | 	wrlong	local04, objptr
15a34     4C 00 00 FF 
15a38     24 64 86 F1 | 	sub	objptr, ##38948
15a3c     44 00 90 FD | 	jmp	#LR__1846
15a40                 | LR__1845
15a40     52 00 00 FF 
15a44     D4 64 06 F1 | 	add	objptr, ##42196
15a48     32 AD 02 FB | 	rdlong	local04, objptr
15a4c     56 A7 02 F6 | 	mov	local01, local04
15a50     02 A6 66 F0 | 	shl	local01, #2
15a54     56 A7 02 F1 | 	add	local01, local04
15a58     02 A6 66 F0 | 	shl	local01, #2
15a5c     06 00 00 FF 
15a60     98 64 86 F1 | 	sub	objptr, ##3224
15a64     32 A7 02 F1 | 	add	local01, objptr
15a68     04 A6 06 F1 | 	add	local01, #4
15a6c     53 A7 02 FB | 	rdlong	local01, local01
15a70     01 A6 86 F1 | 	sub	local01, #1
15a74     18 64 86 F1 | 	sub	objptr, #24
15a78     32 A7 62 FC | 	wrlong	local01, objptr
15a7c     4C 00 00 FF 
15a80     24 64 86 F1 | 	sub	objptr, ##38948
15a84                 | LR__1846
15a84                 | LR__1847
15a84     E7 F0 03 F6 | 	mov	ptra, fp
15a88     F2 00 A0 FD | 	call	#popregs_
15a8c                 | _do_next_ret
15a8c     2D 00 64 FD | 	ret
15a90                 | 
15a90                 | ' 
15a90                 | ' '-------------------- no command (print "Unknown command")
15a90                 | ' 
15a90                 | ' sub do_no_command
15a90                 | _do_no_command
15a90     52 00 00 FF 
15a94     94 64 06 F1 | 	add	objptr, ##42132
15a98     32 95 02 FB | 	rdlong	arg02, objptr
15a9c     52 00 00 FF 
15aa0     94 64 86 F1 | 	sub	objptr, ##42132
15aa4     17 92 06 F6 | 	mov	arg01, #23
15aa8     28 B2 B0 FD | 	call	#_printerror
15aac                 | _do_no_command_ret
15aac     2D 00 64 FD | 	ret
15ab0                 | 
15ab0                 | ' 
15ab0                 | ' '-------------------- nothing
15ab0                 | ' 
15ab0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15ab0                 | _do_nothing
15ab0                 | _do_nothing_ret
15ab0     2D 00 64 FD | 	ret
15ab4                 | 
15ab4                 | ' 
15ab4                 | ' '-------------------- on
15ab4                 | ' 
15ab4                 | ' sub do_on
15ab4                 | _do_on
15ab4     02 CA 05 F6 | 	mov	COUNT_, #2
15ab8     E8 00 A0 FD | 	call	#pushregs_
15abc     18 F0 07 F1 | 	add	ptra, #24
15ac0     4C 00 00 FF 
15ac4     24 64 06 F1 | 	add	objptr, ##38948
15ac8     32 93 02 FB | 	rdlong	arg01, objptr
15acc     49 7D 02 F6 | 	mov	result2, arg01
15ad0     01 7C 66 F0 | 	shl	result2, #1
15ad4     49 7D 02 F1 | 	add	result2, arg01
15ad8     02 7C 66 F0 | 	shl	result2, #2
15adc     03 00 00 FF 
15ae0     04 64 86 F1 | 	sub	objptr, ##1540
15ae4     32 7D 02 F1 | 	add	result2, objptr
15ae8     3E A7 02 FB | 	rdlong	local01, result2
15aec     49 A9 02 F6 | 	mov	local02, arg01
15af0     01 A8 66 F0 | 	shl	local02, #1
15af4     49 A9 02 F1 | 	add	local02, arg01
15af8     02 A8 66 F0 | 	shl	local02, #2
15afc     32 A9 02 F1 | 	add	local02, objptr
15b00     04 A8 06 F1 | 	add	local02, #4
15b04     54 A9 02 FB | 	rdlong	local02, local02
15b08     49 00 00 FF 
15b0c     20 64 86 F1 | 	sub	objptr, ##37408
15b10     5C 7B BF FD | 	call	#_pop
15b14     E7 7A 62 FC | 	wrlong	result1, fp
15b18     04 CE 05 F1 | 	add	fp, #4
15b1c     E7 7C 62 FC | 	wrlong	result2, fp
15b20     04 CE 05 F1 | 	add	fp, #4
15b24     E7 7E 62 FC | 	wrlong	result3, fp
15b28     08 CE 85 F1 | 	sub	fp, #8
15b2c     E7 92 02 F6 | 	mov	arg01, fp
15b30     18 7D BF FD | 	call	#_converttoint
15b34                 | ' 
15b34                 | ' numpar=compiledline(lineptr_e).result.uresult
15b34                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b34                 | ' t1=pop()
15b34                 | ' t=converttoint(t1)
15b34                 | ' if t<1 orelse t>numpar then return
15b34     01 7A 56 F2 | 	cmps	result1, #1 wc
15b38     30 00 90 CD |  if_b	jmp	#LR__1850
15b3c     53 7B 5A F2 | 	cmps	result1, local01 wcz
15b40     28 00 90 1D |  if_a	jmp	#LR__1850
15b44     01 7A 86 F1 | 	sub	result1, #1
15b48     3D A9 02 FD | 	qmul	local02, result1
15b4c     4C 00 00 FF 
15b50     24 64 06 F1 | 	add	objptr, ##38948
15b54     32 A7 02 FB | 	rdlong	local01, objptr
15b58     18 A8 62 FD | 	getqx	local02
15b5c     54 A7 02 F1 | 	add	local01, local02
15b60     32 A7 62 FC | 	wrlong	local01, objptr
15b64     4C 00 00 FF 
15b68     24 64 86 F1 | 	sub	objptr, ##38948
15b6c                 | LR__1850
15b6c     E7 F0 03 F6 | 	mov	ptra, fp
15b70     F2 00 A0 FD | 	call	#popregs_
15b74                 | _do_on_ret
15b74     2D 00 64 FD | 	ret
15b78                 | 
15b78                 | ' 
15b78                 | ' '-------------------- open
15b78                 | ' 
15b78                 | ' sub do_open
15b78                 | _do_open
15b78     04 CA 05 F6 | 	mov	COUNT_, #4
15b7c     E8 00 A0 FD | 	call	#pushregs_
15b80     20 F0 07 F1 | 	add	ptra, #32
15b84     E8 7A BF FD | 	call	#_pop
15b88     3F 97 02 F6 | 	mov	arg03, result3
15b8c     E7 7A 62 FC | 	wrlong	result1, fp
15b90     04 CE 05 F1 | 	add	fp, #4
15b94     E7 7C 62 FC | 	wrlong	result2, fp
15b98     04 CE 05 F1 | 	add	fp, #4
15b9c     E7 96 62 FC | 	wrlong	arg03, fp
15ba0                 | ' 
15ba0                 | ' numpar=compiledline(lineptr_e).result.uresult
15ba0                 | ' 
15ba0                 | ' t1=pop()
15ba0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15ba0     08 CE 85 F1 | 	sub	fp, #8
15ba4     2B 96 0E F2 | 	cmp	arg03, #43 wz
15ba8     18 00 90 5D |  if_ne	jmp	#LR__1860
15bac     E7 92 02 FB | 	rdlong	arg01, fp
15bb0     2C 7C BF FD | 	call	#_convertstring
15bb4     E7 7A 62 FC | 	wrlong	result1, fp
15bb8     08 CE 05 F1 | 	add	fp, #8
15bbc     E7 3E 68 FC | 	wrlong	#31, fp
15bc0     08 CE 85 F1 | 	sub	fp, #8
15bc4                 | LR__1860
15bc4                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15bc4     08 CE 05 F1 | 	add	fp, #8
15bc8     E7 96 02 FB | 	rdlong	arg03, fp
15bcc     08 CE 85 F1 | 	sub	fp, #8
15bd0     1F 96 0E F2 | 	cmp	arg03, #31 wz
15bd4     44 00 90 AD |  if_e	jmp	#LR__1861
15bd8     00 92 06 F6 | 	mov	arg01, #0
15bdc     A0 43 B1 FD | 	call	#__system___getiolock_0622
15be0     3D 93 02 F6 | 	mov	arg01, result1
15be4     14 EE B0 FD | 	call	#__system___lockmem
15be8     98 01 00 FF 
15bec     58 94 06 F6 | 	mov	arg02, ##@LR__6050
15bf0     00 92 06 F6 | 	mov	arg01, #0
15bf4     00 96 06 F6 | 	mov	arg03, #0
15bf8     F4 FA B0 FD | 	call	#__system___basic_print_string
15bfc     00 92 06 F6 | 	mov	arg01, #0
15c00     0A 94 06 F6 | 	mov	arg02, #10
15c04     00 96 06 F6 | 	mov	arg03, #0
15c08     8C FA B0 FD | 	call	#__system___basic_print_char
15c0c     00 92 06 F6 | 	mov	arg01, #0
15c10     6C 43 B1 FD | 	call	#__system___getiolock_0622
15c14     3D 01 68 FC | 	wrlong	#0, result1
15c18     C4 01 90 FD | 	jmp	#LR__1872
15c1c                 | LR__1861
15c1c     E7 A6 02 FB | 	rdlong	local01, fp
15c20     4C 7A BF FD | 	call	#_pop
15c24     3F 97 02 F6 | 	mov	arg03, result3
15c28     E7 7A 62 FC | 	wrlong	result1, fp
15c2c     04 CE 05 F1 | 	add	fp, #4
15c30     E7 7C 62 FC | 	wrlong	result2, fp
15c34     04 CE 05 F1 | 	add	fp, #4
15c38     E7 96 62 FC | 	wrlong	arg03, fp
15c3c                 | ' filename=t1.result.sresult
15c3c                 | ' t1=pop()
15c3c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c3c     08 CE 85 F1 | 	sub	fp, #8
15c40     2B 96 0E F2 | 	cmp	arg03, #43 wz
15c44     18 00 90 5D |  if_ne	jmp	#LR__1862
15c48     E7 92 02 FB | 	rdlong	arg01, fp
15c4c     90 7B BF FD | 	call	#_convertstring
15c50     E7 7A 62 FC | 	wrlong	result1, fp
15c54     08 CE 05 F1 | 	add	fp, #8
15c58     E7 3E 68 FC | 	wrlong	#31, fp
15c5c     08 CE 85 F1 | 	sub	fp, #8
15c60                 | LR__1862
15c60     00 A8 06 F6 | 	mov	local02, #0
15c64                 | ' mode=0
15c64                 | ' if t1.result_type=result_string then
15c64     08 CE 05 F1 | 	add	fp, #8
15c68     E7 94 02 FB | 	rdlong	arg02, fp
15c6c     08 CE 85 F1 | 	sub	fp, #8
15c70     1F 94 0E F2 | 	cmp	arg02, #31 wz
15c74     4C 00 90 5D |  if_ne	jmp	#LR__1863
15c78                 | '   if t1.result.sresult="read" then mode=1
15c78     E7 92 02 FB | 	rdlong	arg01, fp
15c7c     98 01 00 FF 
15c80     6A 94 06 F6 | 	mov	arg02, ##@LR__6051
15c84     9C ED B0 FD | 	call	#__system___string_cmp
15c88     00 7A 0E F2 | 	cmp	result1, #0 wz
15c8c     01 A8 06 A6 |  if_e	mov	local02, #1
15c90                 | '   if t1.result.sresult="write" then mode=2
15c90     E7 92 02 FB | 	rdlong	arg01, fp
15c94     98 01 00 FF 
15c98     6F 94 06 F6 | 	mov	arg02, ##@LR__6052
15c9c     84 ED B0 FD | 	call	#__system___string_cmp
15ca0     00 7A 0E F2 | 	cmp	result1, #0 wz
15ca4     02 A8 06 A6 |  if_e	mov	local02, #2
15ca8                 | '   if t1.result.sresult="append" then mode=4
15ca8     E7 92 02 FB | 	rdlong	arg01, fp
15cac     98 01 00 FF 
15cb0     75 94 06 F6 | 	mov	arg02, ##@LR__6053
15cb4     6C ED B0 FD | 	call	#__system___string_cmp
15cb8     00 7A 0E F2 | 	cmp	result1, #0 wz
15cbc     04 A8 06 A6 |  if_e	mov	local02, #4
15cc0     0C 00 90 FD | 	jmp	#LR__1864
15cc4                 | LR__1863
15cc4     E7 92 02 F6 | 	mov	arg01, fp
15cc8     80 7B BF FD | 	call	#_converttoint
15ccc     3D A9 02 F6 | 	mov	local02, result1
15cd0                 | LR__1864
15cd0     9C 79 BF FD | 	call	#_pop
15cd4     3F 97 02 F6 | 	mov	arg03, result3
15cd8     E7 7A 62 FC | 	wrlong	result1, fp
15cdc     04 CE 05 F1 | 	add	fp, #4
15ce0     E7 7C 62 FC | 	wrlong	result2, fp
15ce4     04 CE 05 F1 | 	add	fp, #4
15ce8     E7 96 62 FC | 	wrlong	arg03, fp
15cec                 | ' t1=pop()
15cec                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15cec     08 CE 85 F1 | 	sub	fp, #8
15cf0     2C 96 0E F2 | 	cmp	arg03, #44 wz
15cf4     44 00 90 AD |  if_e	jmp	#LR__1865
15cf8     00 92 06 F6 | 	mov	arg01, #0
15cfc     80 42 B1 FD | 	call	#__system___getiolock_0622
15d00     3D 93 02 F6 | 	mov	arg01, result1
15d04     F4 EC B0 FD | 	call	#__system___lockmem
15d08     98 01 00 FF 
15d0c     7C 94 06 F6 | 	mov	arg02, ##@LR__6054
15d10     00 92 06 F6 | 	mov	arg01, #0
15d14     00 96 06 F6 | 	mov	arg03, #0
15d18     D4 F9 B0 FD | 	call	#__system___basic_print_string
15d1c     00 92 06 F6 | 	mov	arg01, #0
15d20     0A 94 06 F6 | 	mov	arg02, #10
15d24     00 96 06 F6 | 	mov	arg03, #0
15d28     6C F9 B0 FD | 	call	#__system___basic_print_char
15d2c     00 92 06 F6 | 	mov	arg01, #0
15d30     4C 42 B1 FD | 	call	#__system___getiolock_0622
15d34     3D 01 68 FC | 	wrlong	#0, result1
15d38     A4 00 90 FD | 	jmp	#LR__1872
15d3c                 | LR__1865
15d3c     E7 AA 02 FB | 	rdlong	local03, fp
15d40                 | ' channel  = t1.result.iresult
15d40                 | ' select case  mode
15d40     54 AD 02 F6 | 	mov	local04, local02
15d44     01 AC 86 F1 | 	sub	local04, #1
15d48     04 AC 26 F3 | 	fle	local04, #4
15d4c     30 AC 62 FD | 	jmprel	local04
15d50                 | LR__1866
15d50     10 00 90 FD | 	jmp	#LR__1867
15d54     20 00 90 FD | 	jmp	#LR__1868
15d58     44 00 90 FD | 	jmp	#LR__1870
15d5c     2C 00 90 FD | 	jmp	#LR__1869
15d60     3C 00 90 FD | 	jmp	#LR__1870
15d64                 | LR__1867
15d64     55 93 02 F6 | 	mov	arg01, local03
15d68     53 95 02 F6 | 	mov	arg02, local01
15d6c     00 96 06 F6 | 	mov	arg03, #0
15d70     38 F8 B0 FD | 	call	#__system___basic_open_string
15d74     68 00 90 FD | 	jmp	#LR__1871
15d78                 | LR__1868
15d78     55 93 02 F6 | 	mov	arg01, local03
15d7c     53 95 02 F6 | 	mov	arg02, local01
15d80     0D 96 06 F6 | 	mov	arg03, #13
15d84     24 F8 B0 FD | 	call	#__system___basic_open_string
15d88     54 00 90 FD | 	jmp	#LR__1871
15d8c                 | LR__1869
15d8c     55 93 02 F6 | 	mov	arg01, local03
15d90     53 95 02 F6 | 	mov	arg02, local01
15d94     25 96 06 F6 | 	mov	arg03, #37
15d98     10 F8 B0 FD | 	call	#__system___basic_open_string
15d9c     40 00 90 FD | 	jmp	#LR__1871
15da0                 | LR__1870
15da0     00 92 06 F6 | 	mov	arg01, #0
15da4     D8 41 B1 FD | 	call	#__system___getiolock_0622
15da8     3D 93 02 F6 | 	mov	arg01, result1
15dac     4C EC B0 FD | 	call	#__system___lockmem
15db0     98 01 00 FF 
15db4     8E 94 06 F6 | 	mov	arg02, ##@LR__6055
15db8     00 92 06 F6 | 	mov	arg01, #0
15dbc     00 96 06 F6 | 	mov	arg03, #0
15dc0     2C F9 B0 FD | 	call	#__system___basic_print_string
15dc4     00 92 06 F6 | 	mov	arg01, #0
15dc8     0A 94 06 F6 | 	mov	arg02, #10
15dcc     00 96 06 F6 | 	mov	arg03, #0
15dd0     C4 F8 B0 FD | 	call	#__system___basic_print_char
15dd4     00 92 06 F6 | 	mov	arg01, #0
15dd8     A4 41 B1 FD | 	call	#__system___getiolock_0622
15ddc     3D 01 68 FC | 	wrlong	#0, result1
15de0                 | LR__1871
15de0                 | LR__1872
15de0     E7 F0 03 F6 | 	mov	ptra, fp
15de4     F2 00 A0 FD | 	call	#popregs_
15de8                 | _do_open_ret
15de8     2D 00 64 FD | 	ret
15dec                 | 
15dec                 | ' 
15dec                 | ' ' ------------------ padrx
15dec                 | ' 
15dec                 | ' sub do_padrx
15dec                 | _do_padrx
15dec     04 CA 05 F6 | 	mov	COUNT_, #4
15df0     E8 00 A0 FD | 	call	#pushregs_
15df4     14 F0 07 F1 | 	add	ptra, #20
15df8     4C 00 00 FF 
15dfc     24 64 06 F1 | 	add	objptr, ##38948
15e00     32 A7 02 FB | 	rdlong	local01, objptr
15e04     53 97 02 F6 | 	mov	arg03, local01
15e08     01 96 66 F0 | 	shl	arg03, #1
15e0c     53 97 02 F1 | 	add	arg03, local01
15e10     02 96 66 F0 | 	shl	arg03, #2
15e14     03 00 00 FF 
15e18     04 64 86 F1 | 	sub	objptr, ##1540
15e1c     32 97 02 F1 | 	add	arg03, objptr
15e20     4B A9 02 FB | 	rdlong	local02, arg03
15e24                 | ' 
15e24                 | ' numpar=compiledline(lineptr_e).result.uresult
15e24                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
15e24     02 A8 16 F2 | 	cmp	local02, #2 wc
15e28     49 00 00 FF 
15e2c     20 64 86 F1 | 	sub	objptr, ##37408
15e30     40 00 90 CD |  if_b	jmp	#LR__1880
15e34     00 92 06 F6 | 	mov	arg01, #0
15e38     44 41 B1 FD | 	call	#__system___getiolock_0622
15e3c     3D 93 02 F6 | 	mov	arg01, result1
15e40     B8 EB B0 FD | 	call	#__system___lockmem
15e44     98 01 00 FF 
15e48     A1 94 06 F6 | 	mov	arg02, ##@LR__6056
15e4c     00 92 06 F6 | 	mov	arg01, #0
15e50     00 96 06 F6 | 	mov	arg03, #0
15e54     98 F8 B0 FD | 	call	#__system___basic_print_string
15e58     00 92 06 F6 | 	mov	arg01, #0
15e5c     20 41 B1 FD | 	call	#__system___getiolock_0622
15e60     3D 01 68 FC | 	wrlong	#0, result1
15e64     27 92 06 F6 | 	mov	arg01, #39
15e68     00 94 06 F6 | 	mov	arg02, #0
15e6c     64 AE B0 FD | 	call	#_printerror
15e70     A0 01 90 FD | 	jmp	#LR__1884
15e74                 | LR__1880
15e74                 | ' if numpar=0 then 
15e74     00 A8 0E F2 | 	cmp	local02, #0 wz
15e78     8C 00 90 5D |  if_ne	jmp	#LR__1881
15e7c     00 C0 1B FF 
15e80     00 A8 06 F6 | 	mov	local02, ##931135488
15e84     53 00 00 FF 
15e88     6C 65 06 F1 | 	add	objptr, ##42860
15e8c     32 93 02 FB | 	rdlong	arg01, objptr
15e90     53 00 00 FF 
15e94     6C 65 86 F1 | 	sub	objptr, ##42860
15e98     49 93 52 F6 | 	abs	arg01, arg01 wc
15e9c     1F AA C6 C9 |  if_b	decod	local03, #31
15ea0     00 AA 06 36 |  if_ae	mov	local03, #0
15ea4     20 0E B1 FD | 	call	#__system___float_fromuns
15ea8     55 7B 62 F5 | 	xor	result1, local03
15eac     3D 93 02 F6 | 	mov	arg01, result1
15eb0     FF 7F 23 FF 
15eb4     00 94 06 F6 | 	mov	arg02, ##1191181824
15eb8     14 14 B1 FD | 	call	#__system___float_div
15ebc     3D 95 02 F6 | 	mov	arg02, result1
15ec0     54 93 02 F6 | 	mov	arg01, local02
15ec4     34 0E B1 FD | 	call	#__system___float_add
15ec8     3D AD 02 F6 | 	mov	local04, result1
15ecc                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15ecc     56 93 02 F6 | 	mov	arg01, local04
15ed0     1F 92 06 F4 | 	bitl	arg01, #31
15ed4     89 41 1D FF 
15ed8     6F 94 06 F6 | 	mov	arg02, ##981668463
15edc     01 96 06 F6 | 	mov	arg03, #1
15ee0     1C 16 B1 FD | 	call	#__system___float_cmp
15ee4     00 7A 56 F2 | 	cmps	result1, #0 wc
15ee8     00 AC 06 C6 |  if_b	mov	local04, #0
15eec     E7 AC 62 FC | 	wrlong	local04, fp
15ef0     08 CE 05 F1 | 	add	fp, #8
15ef4     E7 3C 68 FC | 	wrlong	#30, fp
15ef8     08 CE 85 F1 | 	sub	fp, #8
15efc     E7 92 02 F6 | 	mov	arg01, fp
15f00     FC 77 BF FD | 	call	#_push
15f04                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15f04     0C 01 90 FD | 	jmp	#LR__1884
15f08                 | LR__1881
15f08     64 77 BF FD | 	call	#_pop
15f0c     E7 7A 62 FC | 	wrlong	result1, fp
15f10     04 CE 05 F1 | 	add	fp, #4
15f14     E7 7C 62 FC | 	wrlong	result2, fp
15f18     04 CE 05 F1 | 	add	fp, #4
15f1c     E7 7E 62 FC | 	wrlong	result3, fp
15f20                 | ' t1=pop()
15f20                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f20     08 CE 85 F1 | 	sub	fp, #8
15f24     1C 7E 0E F2 | 	cmp	result3, #28 wz
15f28     08 CE 05 51 |  if_ne	add	fp, #8
15f2c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15f30     08 CE 85 51 |  if_ne	sub	fp, #8
15f34     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15f38     CC 00 90 5D |  if_ne	jmp	#LR__1883
15f3c     E7 AC 02 FB | 	rdlong	local04, fp
15f40     54 00 00 FF 
15f44     E4 64 06 F1 | 	add	objptr, ##43236
15f48     32 AD 62 FC | 	wrlong	local04, objptr
15f4c                 | '   q=t1.result.uresult
15f4c                 | '   if q<7 then 
15f4c     54 00 00 FF 
15f50     E4 64 86 F1 | 	sub	objptr, ##43236
15f54     07 AC 56 F2 | 	cmps	local04, #7 wc
15f58     9C 00 90 3D |  if_ae	jmp	#LR__1882
15f5c     00 C0 1B FF 
15f60     00 AC 06 F6 | 	mov	local04, ##931135488
15f64     54 00 00 FF 
15f68     E4 64 06 F1 | 	add	objptr, ##43236
15f6c     32 A9 02 FB | 	rdlong	local02, objptr
15f70     02 A8 66 F0 | 	shl	local02, #2
15f74     78 65 86 F1 | 	sub	objptr, #376
15f78     32 A9 02 F1 | 	add	local02, objptr
15f7c     54 93 02 FB | 	rdlong	arg01, local02
15f80     53 00 00 FF 
15f84     6C 65 86 F1 | 	sub	objptr, ##42860
15f88     49 93 52 F6 | 	abs	arg01, arg01 wc
15f8c     1F AA C6 C9 |  if_b	decod	local03, #31
15f90     00 AA 06 36 |  if_ae	mov	local03, #0
15f94     30 0D B1 FD | 	call	#__system___float_fromuns
15f98     55 7B 62 F5 | 	xor	result1, local03
15f9c     3D 93 02 F6 | 	mov	arg01, result1
15fa0     FF 7F 23 FF 
15fa4     00 94 06 F6 | 	mov	arg02, ##1191181824
15fa8     24 13 B1 FD | 	call	#__system___float_div
15fac     3D 95 02 F6 | 	mov	arg02, result1
15fb0     56 93 02 F6 | 	mov	arg01, local04
15fb4     44 0D B1 FD | 	call	#__system___float_add
15fb8     3D AD 02 F6 | 	mov	local04, result1
15fbc                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15fbc     56 93 02 F6 | 	mov	arg01, local04
15fc0     1F 92 06 F4 | 	bitl	arg01, #31
15fc4     89 41 1D FF 
15fc8     6F 94 06 F6 | 	mov	arg02, ##981668463
15fcc     01 96 06 F6 | 	mov	arg03, #1
15fd0     2C 15 B1 FD | 	call	#__system___float_cmp
15fd4     00 7A 56 F2 | 	cmps	result1, #0 wc
15fd8     00 AC 06 C6 |  if_b	mov	local04, #0
15fdc     E7 AC 62 FC | 	wrlong	local04, fp
15fe0     08 CE 05 F1 | 	add	fp, #8
15fe4     E7 3C 68 FC | 	wrlong	#30, fp
15fe8     08 CE 85 F1 | 	sub	fp, #8
15fec     E7 92 02 F6 | 	mov	arg01, fp
15ff0     0C 77 BF FD | 	call	#_push
15ff4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
15ff4     1C 00 90 FD | 	jmp	#LR__1884
15ff8                 | LR__1882
15ff8     29 92 06 F6 | 	mov	arg01, #41
15ffc     00 94 06 F6 | 	mov	arg02, #0
16000     D0 AC B0 FD | 	call	#_printerror
16004                 | '      printerror(41) : return
16004     0C 00 90 FD | 	jmp	#LR__1884
16008                 | LR__1883
16008     29 92 06 F6 | 	mov	arg01, #41
1600c     00 94 06 F6 | 	mov	arg02, #0
16010     C0 AC B0 FD | 	call	#_printerror
16014                 | LR__1884
16014     E7 F0 03 F6 | 	mov	ptra, fp
16018     F2 00 A0 FD | 	call	#popregs_
1601c                 | _do_padrx_ret
1601c     2D 00 64 FD | 	ret
16020                 | 
16020                 | ' 
16020                 | ' ' ------------------ padry
16020                 | ' 
16020                 | ' sub do_padry
16020                 | _do_padry
16020     04 CA 05 F6 | 	mov	COUNT_, #4
16024     E8 00 A0 FD | 	call	#pushregs_
16028     14 F0 07 F1 | 	add	ptra, #20
1602c     4C 00 00 FF 
16030     24 64 06 F1 | 	add	objptr, ##38948
16034     32 A7 02 FB | 	rdlong	local01, objptr
16038     53 97 02 F6 | 	mov	arg03, local01
1603c     01 96 66 F0 | 	shl	arg03, #1
16040     53 97 02 F1 | 	add	arg03, local01
16044     02 96 66 F0 | 	shl	arg03, #2
16048     03 00 00 FF 
1604c     04 64 86 F1 | 	sub	objptr, ##1540
16050     32 97 02 F1 | 	add	arg03, objptr
16054     4B A9 02 FB | 	rdlong	local02, arg03
16058                 | ' 
16058                 | ' numpar=compiledline(lineptr_e).result.uresult
16058                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16058     02 A8 16 F2 | 	cmp	local02, #2 wc
1605c     49 00 00 FF 
16060     20 64 86 F1 | 	sub	objptr, ##37408
16064     40 00 90 CD |  if_b	jmp	#LR__1890
16068     00 92 06 F6 | 	mov	arg01, #0
1606c     10 3F B1 FD | 	call	#__system___getiolock_0622
16070     3D 93 02 F6 | 	mov	arg01, result1
16074     84 E9 B0 FD | 	call	#__system___lockmem
16078     98 01 00 FF 
1607c     A9 94 06 F6 | 	mov	arg02, ##@LR__6057
16080     00 92 06 F6 | 	mov	arg01, #0
16084     00 96 06 F6 | 	mov	arg03, #0
16088     64 F6 B0 FD | 	call	#__system___basic_print_string
1608c     00 92 06 F6 | 	mov	arg01, #0
16090     EC 3E B1 FD | 	call	#__system___getiolock_0622
16094     3D 01 68 FC | 	wrlong	#0, result1
16098     27 92 06 F6 | 	mov	arg01, #39
1609c     00 94 06 F6 | 	mov	arg02, #0
160a0     30 AC B0 FD | 	call	#_printerror
160a4     A0 01 90 FD | 	jmp	#LR__1894
160a8                 | LR__1890
160a8                 | ' if numpar=0 then 
160a8     00 A8 0E F2 | 	cmp	local02, #0 wz
160ac     8C 00 90 5D |  if_ne	jmp	#LR__1891
160b0     00 C0 1B FF 
160b4     00 A8 06 F6 | 	mov	local02, ##931135488
160b8     53 00 00 FF 
160bc     88 65 06 F1 | 	add	objptr, ##42888
160c0     32 93 02 FB | 	rdlong	arg01, objptr
160c4     53 00 00 FF 
160c8     88 65 86 F1 | 	sub	objptr, ##42888
160cc     49 93 52 F6 | 	abs	arg01, arg01 wc
160d0     1F AA C6 C9 |  if_b	decod	local03, #31
160d4     00 AA 06 36 |  if_ae	mov	local03, #0
160d8     EC 0B B1 FD | 	call	#__system___float_fromuns
160dc     55 7B 62 F5 | 	xor	result1, local03
160e0     3D 93 02 F6 | 	mov	arg01, result1
160e4     FF 7F 23 FF 
160e8     00 94 06 F6 | 	mov	arg02, ##1191181824
160ec     E0 11 B1 FD | 	call	#__system___float_div
160f0     3D 95 02 F6 | 	mov	arg02, result1
160f4     54 93 02 F6 | 	mov	arg01, local02
160f8     00 0C B1 FD | 	call	#__system___float_add
160fc     3D AD 02 F6 | 	mov	local04, result1
16100                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16100     56 93 02 F6 | 	mov	arg01, local04
16104     1F 92 06 F4 | 	bitl	arg01, #31
16108     89 41 1D FF 
1610c     6F 94 06 F6 | 	mov	arg02, ##981668463
16110     01 96 06 F6 | 	mov	arg03, #1
16114     E8 13 B1 FD | 	call	#__system___float_cmp
16118     00 7A 56 F2 | 	cmps	result1, #0 wc
1611c     00 AC 06 C6 |  if_b	mov	local04, #0
16120     E7 AC 62 FC | 	wrlong	local04, fp
16124     08 CE 05 F1 | 	add	fp, #8
16128     E7 3C 68 FC | 	wrlong	#30, fp
1612c     08 CE 85 F1 | 	sub	fp, #8
16130     E7 92 02 F6 | 	mov	arg01, fp
16134     C8 75 BF FD | 	call	#_push
16138                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16138     0C 01 90 FD | 	jmp	#LR__1894
1613c                 | LR__1891
1613c     30 75 BF FD | 	call	#_pop
16140     E7 7A 62 FC | 	wrlong	result1, fp
16144     04 CE 05 F1 | 	add	fp, #4
16148     E7 7C 62 FC | 	wrlong	result2, fp
1614c     04 CE 05 F1 | 	add	fp, #4
16150     E7 7E 62 FC | 	wrlong	result3, fp
16154                 | ' t1=pop()
16154                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16154     08 CE 85 F1 | 	sub	fp, #8
16158     1C 7E 0E F2 | 	cmp	result3, #28 wz
1615c     08 CE 05 51 |  if_ne	add	fp, #8
16160     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16164     08 CE 85 51 |  if_ne	sub	fp, #8
16168     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1616c     CC 00 90 5D |  if_ne	jmp	#LR__1893
16170     E7 AC 02 FB | 	rdlong	local04, fp
16174     54 00 00 FF 
16178     E4 64 06 F1 | 	add	objptr, ##43236
1617c     32 AD 62 FC | 	wrlong	local04, objptr
16180                 | '   q=t1.result.uresult
16180                 | '   if q<7 then 
16180     54 00 00 FF 
16184     E4 64 86 F1 | 	sub	objptr, ##43236
16188     07 AC 56 F2 | 	cmps	local04, #7 wc
1618c     9C 00 90 3D |  if_ae	jmp	#LR__1892
16190     00 C0 1B FF 
16194     00 AC 06 F6 | 	mov	local04, ##931135488
16198     54 00 00 FF 
1619c     E4 64 06 F1 | 	add	objptr, ##43236
161a0     32 A9 02 FB | 	rdlong	local02, objptr
161a4     02 A8 66 F0 | 	shl	local02, #2
161a8     5C 65 86 F1 | 	sub	objptr, #348
161ac     32 A9 02 F1 | 	add	local02, objptr
161b0     54 93 02 FB | 	rdlong	arg01, local02
161b4     53 00 00 FF 
161b8     88 65 86 F1 | 	sub	objptr, ##42888
161bc     49 93 52 F6 | 	abs	arg01, arg01 wc
161c0     1F AA C6 C9 |  if_b	decod	local03, #31
161c4     00 AA 06 36 |  if_ae	mov	local03, #0
161c8     FC 0A B1 FD | 	call	#__system___float_fromuns
161cc     55 7B 62 F5 | 	xor	result1, local03
161d0     3D 93 02 F6 | 	mov	arg01, result1
161d4     FF 7F 23 FF 
161d8     00 94 06 F6 | 	mov	arg02, ##1191181824
161dc     F0 10 B1 FD | 	call	#__system___float_div
161e0     3D 95 02 F6 | 	mov	arg02, result1
161e4     56 93 02 F6 | 	mov	arg01, local04
161e8     10 0B B1 FD | 	call	#__system___float_add
161ec     3D AD 02 F6 | 	mov	local04, result1
161f0                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
161f0     56 93 02 F6 | 	mov	arg01, local04
161f4     1F 92 06 F4 | 	bitl	arg01, #31
161f8     89 41 1D FF 
161fc     6F 94 06 F6 | 	mov	arg02, ##981668463
16200     01 96 06 F6 | 	mov	arg03, #1
16204     F8 12 B1 FD | 	call	#__system___float_cmp
16208     00 7A 56 F2 | 	cmps	result1, #0 wc
1620c     00 AC 06 C6 |  if_b	mov	local04, #0
16210     E7 AC 62 FC | 	wrlong	local04, fp
16214     08 CE 05 F1 | 	add	fp, #8
16218     E7 3C 68 FC | 	wrlong	#30, fp
1621c     08 CE 85 F1 | 	sub	fp, #8
16220     E7 92 02 F6 | 	mov	arg01, fp
16224     D8 74 BF FD | 	call	#_push
16228                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16228     1C 00 90 FD | 	jmp	#LR__1894
1622c                 | LR__1892
1622c     29 92 06 F6 | 	mov	arg01, #41
16230     00 94 06 F6 | 	mov	arg02, #0
16234     9C AA B0 FD | 	call	#_printerror
16238                 | '      printerror(41) : return
16238     0C 00 90 FD | 	jmp	#LR__1894
1623c                 | LR__1893
1623c     29 92 06 F6 | 	mov	arg01, #41
16240     00 94 06 F6 | 	mov	arg02, #0
16244     8C AA B0 FD | 	call	#_printerror
16248                 | LR__1894
16248     E7 F0 03 F6 | 	mov	ptra, fp
1624c     F2 00 A0 FD | 	call	#popregs_
16250                 | _do_padry_ret
16250     2D 00 64 FD | 	ret
16254                 | 
16254                 | ' 
16254                 | ' ' ------------------ padrz
16254                 | ' 
16254                 | ' sub do_padrz
16254                 | _do_padrz
16254     04 CA 05 F6 | 	mov	COUNT_, #4
16258     E8 00 A0 FD | 	call	#pushregs_
1625c     14 F0 07 F1 | 	add	ptra, #20
16260     4C 00 00 FF 
16264     24 64 06 F1 | 	add	objptr, ##38948
16268     32 A7 02 FB | 	rdlong	local01, objptr
1626c     53 97 02 F6 | 	mov	arg03, local01
16270     01 96 66 F0 | 	shl	arg03, #1
16274     53 97 02 F1 | 	add	arg03, local01
16278     02 96 66 F0 | 	shl	arg03, #2
1627c     03 00 00 FF 
16280     04 64 86 F1 | 	sub	objptr, ##1540
16284     32 97 02 F1 | 	add	arg03, objptr
16288     4B A9 02 FB | 	rdlong	local02, arg03
1628c                 | ' 
1628c                 | ' numpar=compiledline(lineptr_e).result.uresult
1628c                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
1628c     02 A8 16 F2 | 	cmp	local02, #2 wc
16290     49 00 00 FF 
16294     20 64 86 F1 | 	sub	objptr, ##37408
16298     40 00 90 CD |  if_b	jmp	#LR__1900
1629c     00 92 06 F6 | 	mov	arg01, #0
162a0     DC 3C B1 FD | 	call	#__system___getiolock_0622
162a4     3D 93 02 F6 | 	mov	arg01, result1
162a8     50 E7 B0 FD | 	call	#__system___lockmem
162ac     98 01 00 FF 
162b0     B1 94 06 F6 | 	mov	arg02, ##@LR__6058
162b4     00 92 06 F6 | 	mov	arg01, #0
162b8     00 96 06 F6 | 	mov	arg03, #0
162bc     30 F4 B0 FD | 	call	#__system___basic_print_string
162c0     00 92 06 F6 | 	mov	arg01, #0
162c4     B8 3C B1 FD | 	call	#__system___getiolock_0622
162c8     3D 01 68 FC | 	wrlong	#0, result1
162cc     27 92 06 F6 | 	mov	arg01, #39
162d0     00 94 06 F6 | 	mov	arg02, #0
162d4     FC A9 B0 FD | 	call	#_printerror
162d8     A0 01 90 FD | 	jmp	#LR__1904
162dc                 | LR__1900
162dc                 | ' if numpar=0 then 
162dc     00 A8 0E F2 | 	cmp	local02, #0 wz
162e0     8C 00 90 5D |  if_ne	jmp	#LR__1901
162e4     00 C0 1B FF 
162e8     00 A8 06 F6 | 	mov	local02, ##931135488
162ec     53 00 00 FF 
162f0     A4 65 06 F1 | 	add	objptr, ##42916
162f4     32 93 02 FB | 	rdlong	arg01, objptr
162f8     53 00 00 FF 
162fc     A4 65 86 F1 | 	sub	objptr, ##42916
16300     49 93 52 F6 | 	abs	arg01, arg01 wc
16304     1F AA C6 C9 |  if_b	decod	local03, #31
16308     00 AA 06 36 |  if_ae	mov	local03, #0
1630c     B8 09 B1 FD | 	call	#__system___float_fromuns
16310     55 7B 62 F5 | 	xor	result1, local03
16314     3D 93 02 F6 | 	mov	arg01, result1
16318     FF 7F 23 FF 
1631c     00 94 06 F6 | 	mov	arg02, ##1191181824
16320     AC 0F B1 FD | 	call	#__system___float_div
16324     3D 95 02 F6 | 	mov	arg02, result1
16328     54 93 02 F6 | 	mov	arg01, local02
1632c     CC 09 B1 FD | 	call	#__system___float_add
16330     3D AD 02 F6 | 	mov	local04, result1
16334                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16334     56 93 02 F6 | 	mov	arg01, local04
16338     1F 92 06 F4 | 	bitl	arg01, #31
1633c     89 41 1D FF 
16340     6F 94 06 F6 | 	mov	arg02, ##981668463
16344     01 96 06 F6 | 	mov	arg03, #1
16348     B4 11 B1 FD | 	call	#__system___float_cmp
1634c     00 7A 56 F2 | 	cmps	result1, #0 wc
16350     00 AC 06 C6 |  if_b	mov	local04, #0
16354     E7 AC 62 FC | 	wrlong	local04, fp
16358     08 CE 05 F1 | 	add	fp, #8
1635c     E7 3C 68 FC | 	wrlong	#30, fp
16360     08 CE 85 F1 | 	sub	fp, #8
16364     E7 92 02 F6 | 	mov	arg01, fp
16368     94 73 BF FD | 	call	#_push
1636c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1636c     0C 01 90 FD | 	jmp	#LR__1904
16370                 | LR__1901
16370     FC 72 BF FD | 	call	#_pop
16374     E7 7A 62 FC | 	wrlong	result1, fp
16378     04 CE 05 F1 | 	add	fp, #4
1637c     E7 7C 62 FC | 	wrlong	result2, fp
16380     04 CE 05 F1 | 	add	fp, #4
16384     E7 7E 62 FC | 	wrlong	result3, fp
16388                 | ' t1=pop()
16388                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16388     08 CE 85 F1 | 	sub	fp, #8
1638c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16390     08 CE 05 51 |  if_ne	add	fp, #8
16394     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16398     08 CE 85 51 |  if_ne	sub	fp, #8
1639c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
163a0     CC 00 90 5D |  if_ne	jmp	#LR__1903
163a4     E7 AC 02 FB | 	rdlong	local04, fp
163a8     54 00 00 FF 
163ac     E4 64 06 F1 | 	add	objptr, ##43236
163b0     32 AD 62 FC | 	wrlong	local04, objptr
163b4                 | '   q=t1.result.uresult
163b4                 | '   if q<7 then 
163b4     54 00 00 FF 
163b8     E4 64 86 F1 | 	sub	objptr, ##43236
163bc     07 AC 56 F2 | 	cmps	local04, #7 wc
163c0     9C 00 90 3D |  if_ae	jmp	#LR__1902
163c4     00 C0 1B FF 
163c8     00 AC 06 F6 | 	mov	local04, ##931135488
163cc     54 00 00 FF 
163d0     E4 64 06 F1 | 	add	objptr, ##43236
163d4     32 A9 02 FB | 	rdlong	local02, objptr
163d8     02 A8 66 F0 | 	shl	local02, #2
163dc     40 65 86 F1 | 	sub	objptr, #320
163e0     32 A9 02 F1 | 	add	local02, objptr
163e4     54 93 02 FB | 	rdlong	arg01, local02
163e8     53 00 00 FF 
163ec     A4 65 86 F1 | 	sub	objptr, ##42916
163f0     49 93 52 F6 | 	abs	arg01, arg01 wc
163f4     1F AA C6 C9 |  if_b	decod	local03, #31
163f8     00 AA 06 36 |  if_ae	mov	local03, #0
163fc     C8 08 B1 FD | 	call	#__system___float_fromuns
16400     55 7B 62 F5 | 	xor	result1, local03
16404     3D 93 02 F6 | 	mov	arg01, result1
16408     FF 7F 23 FF 
1640c     00 94 06 F6 | 	mov	arg02, ##1191181824
16410     BC 0E B1 FD | 	call	#__system___float_div
16414     3D 95 02 F6 | 	mov	arg02, result1
16418     56 93 02 F6 | 	mov	arg01, local04
1641c     DC 08 B1 FD | 	call	#__system___float_add
16420     3D AD 02 F6 | 	mov	local04, result1
16424                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16424     56 93 02 F6 | 	mov	arg01, local04
16428     1F 92 06 F4 | 	bitl	arg01, #31
1642c     89 41 1D FF 
16430     6F 94 06 F6 | 	mov	arg02, ##981668463
16434     01 96 06 F6 | 	mov	arg03, #1
16438     C4 10 B1 FD | 	call	#__system___float_cmp
1643c     00 7A 56 F2 | 	cmps	result1, #0 wc
16440     00 AC 06 C6 |  if_b	mov	local04, #0
16444     E7 AC 62 FC | 	wrlong	local04, fp
16448     08 CE 05 F1 | 	add	fp, #8
1644c     E7 3C 68 FC | 	wrlong	#30, fp
16450     08 CE 85 F1 | 	sub	fp, #8
16454     E7 92 02 F6 | 	mov	arg01, fp
16458     A4 72 BF FD | 	call	#_push
1645c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1645c     1C 00 90 FD | 	jmp	#LR__1904
16460                 | LR__1902
16460     29 92 06 F6 | 	mov	arg01, #41
16464     00 94 06 F6 | 	mov	arg02, #0
16468     68 A8 B0 FD | 	call	#_printerror
1646c                 | '      printerror(41) : return
1646c     0C 00 90 FD | 	jmp	#LR__1904
16470                 | LR__1903
16470     29 92 06 F6 | 	mov	arg01, #41
16474     00 94 06 F6 | 	mov	arg02, #0
16478     58 A8 B0 FD | 	call	#_printerror
1647c                 | LR__1904
1647c     E7 F0 03 F6 | 	mov	ptra, fp
16480     F2 00 A0 FD | 	call	#popregs_
16484                 | _do_padrz_ret
16484     2D 00 64 FD | 	ret
16488                 | 
16488                 | ' 
16488                 | ' ' ------------------ pads
16488                 | ' 
16488                 | ' sub do_pads
16488                 | _do_pads
16488     04 CA 05 F6 | 	mov	COUNT_, #4
1648c     E8 00 A0 FD | 	call	#pushregs_
16490     14 F0 07 F1 | 	add	ptra, #20
16494     4C 00 00 FF 
16498     24 64 06 F1 | 	add	objptr, ##38948
1649c     32 A7 02 FB | 	rdlong	local01, objptr
164a0     53 97 02 F6 | 	mov	arg03, local01
164a4     01 96 66 F0 | 	shl	arg03, #1
164a8     53 97 02 F1 | 	add	arg03, local01
164ac     02 96 66 F0 | 	shl	arg03, #2
164b0     03 00 00 FF 
164b4     04 64 86 F1 | 	sub	objptr, ##1540
164b8     32 97 02 F1 | 	add	arg03, objptr
164bc     4B A9 02 FB | 	rdlong	local02, arg03
164c0                 | ' 
164c0                 | ' numpar=compiledline(lineptr_e).result.uresult
164c0                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
164c0     02 A8 16 F2 | 	cmp	local02, #2 wc
164c4     49 00 00 FF 
164c8     20 64 86 F1 | 	sub	objptr, ##37408
164cc     40 00 90 CD |  if_b	jmp	#LR__1910
164d0     00 92 06 F6 | 	mov	arg01, #0
164d4     A8 3A B1 FD | 	call	#__system___getiolock_0622
164d8     3D 93 02 F6 | 	mov	arg01, result1
164dc     1C E5 B0 FD | 	call	#__system___lockmem
164e0     98 01 00 FF 
164e4     B9 94 06 F6 | 	mov	arg02, ##@LR__6059
164e8     00 92 06 F6 | 	mov	arg01, #0
164ec     00 96 06 F6 | 	mov	arg03, #0
164f0     FC F1 B0 FD | 	call	#__system___basic_print_string
164f4     00 92 06 F6 | 	mov	arg01, #0
164f8     84 3A B1 FD | 	call	#__system___getiolock_0622
164fc     3D 01 68 FC | 	wrlong	#0, result1
16500     27 92 06 F6 | 	mov	arg01, #39
16504     00 94 06 F6 | 	mov	arg02, #0
16508     C8 A7 B0 FD | 	call	#_printerror
1650c     A0 01 90 FD | 	jmp	#LR__1914
16510                 | LR__1910
16510                 | ' if numpar=0 then 
16510     00 A8 0E F2 | 	cmp	local02, #0 wz
16514     8C 00 90 5D |  if_ne	jmp	#LR__1911
16518     00 C0 1B FF 
1651c     00 A8 06 F6 | 	mov	local02, ##931135488
16520     53 00 00 FF 
16524     C0 65 06 F1 | 	add	objptr, ##42944
16528     32 93 02 FB | 	rdlong	arg01, objptr
1652c     53 00 00 FF 
16530     C0 65 86 F1 | 	sub	objptr, ##42944
16534     49 93 52 F6 | 	abs	arg01, arg01 wc
16538     1F AA C6 C9 |  if_b	decod	local03, #31
1653c     00 AA 06 36 |  if_ae	mov	local03, #0
16540     84 07 B1 FD | 	call	#__system___float_fromuns
16544     55 7B 62 F5 | 	xor	result1, local03
16548     3D 93 02 F6 | 	mov	arg01, result1
1654c     FF 7F 23 FF 
16550     00 94 06 F6 | 	mov	arg02, ##1191181824
16554     78 0D B1 FD | 	call	#__system___float_div
16558     3D 95 02 F6 | 	mov	arg02, result1
1655c     54 93 02 F6 | 	mov	arg01, local02
16560     98 07 B1 FD | 	call	#__system___float_add
16564     3D AD 02 F6 | 	mov	local04, result1
16568                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16568     56 93 02 F6 | 	mov	arg01, local04
1656c     1F 92 06 F4 | 	bitl	arg01, #31
16570     89 41 1D FF 
16574     6F 94 06 F6 | 	mov	arg02, ##981668463
16578     01 96 06 F6 | 	mov	arg03, #1
1657c     80 0F B1 FD | 	call	#__system___float_cmp
16580     00 7A 56 F2 | 	cmps	result1, #0 wc
16584     00 AC 06 C6 |  if_b	mov	local04, #0
16588     E7 AC 62 FC | 	wrlong	local04, fp
1658c     08 CE 05 F1 | 	add	fp, #8
16590     E7 3C 68 FC | 	wrlong	#30, fp
16594     08 CE 85 F1 | 	sub	fp, #8
16598     E7 92 02 F6 | 	mov	arg01, fp
1659c     60 71 BF FD | 	call	#_push
165a0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
165a0     0C 01 90 FD | 	jmp	#LR__1914
165a4                 | LR__1911
165a4     C8 70 BF FD | 	call	#_pop
165a8     E7 7A 62 FC | 	wrlong	result1, fp
165ac     04 CE 05 F1 | 	add	fp, #4
165b0     E7 7C 62 FC | 	wrlong	result2, fp
165b4     04 CE 05 F1 | 	add	fp, #4
165b8     E7 7E 62 FC | 	wrlong	result3, fp
165bc                 | ' t1=pop()
165bc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
165bc     08 CE 85 F1 | 	sub	fp, #8
165c0     1C 7E 0E F2 | 	cmp	result3, #28 wz
165c4     08 CE 05 51 |  if_ne	add	fp, #8
165c8     E7 A6 02 5B |  if_ne	rdlong	local01, fp
165cc     08 CE 85 51 |  if_ne	sub	fp, #8
165d0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
165d4     CC 00 90 5D |  if_ne	jmp	#LR__1913
165d8     E7 AC 02 FB | 	rdlong	local04, fp
165dc     54 00 00 FF 
165e0     E4 64 06 F1 | 	add	objptr, ##43236
165e4     32 AD 62 FC | 	wrlong	local04, objptr
165e8                 | '   q=t1.result.uresult
165e8                 | '   if q<7 then 
165e8     54 00 00 FF 
165ec     E4 64 86 F1 | 	sub	objptr, ##43236
165f0     07 AC 56 F2 | 	cmps	local04, #7 wc
165f4     9C 00 90 3D |  if_ae	jmp	#LR__1912
165f8     00 C0 1B FF 
165fc     00 AC 06 F6 | 	mov	local04, ##931135488
16600     54 00 00 FF 
16604     E4 64 06 F1 | 	add	objptr, ##43236
16608     32 A9 02 FB | 	rdlong	local02, objptr
1660c     02 A8 66 F0 | 	shl	local02, #2
16610     24 65 86 F1 | 	sub	objptr, #292
16614     32 A9 02 F1 | 	add	local02, objptr
16618     54 93 02 FB | 	rdlong	arg01, local02
1661c     53 00 00 FF 
16620     C0 65 86 F1 | 	sub	objptr, ##42944
16624     49 93 52 F6 | 	abs	arg01, arg01 wc
16628     1F AA C6 C9 |  if_b	decod	local03, #31
1662c     00 AA 06 36 |  if_ae	mov	local03, #0
16630     94 06 B1 FD | 	call	#__system___float_fromuns
16634     55 7B 62 F5 | 	xor	result1, local03
16638     3D 93 02 F6 | 	mov	arg01, result1
1663c     FF 7F 23 FF 
16640     00 94 06 F6 | 	mov	arg02, ##1191181824
16644     88 0C B1 FD | 	call	#__system___float_div
16648     3D 95 02 F6 | 	mov	arg02, result1
1664c     56 93 02 F6 | 	mov	arg01, local04
16650     A8 06 B1 FD | 	call	#__system___float_add
16654     3D AD 02 F6 | 	mov	local04, result1
16658                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16658     56 93 02 F6 | 	mov	arg01, local04
1665c     1F 92 06 F4 | 	bitl	arg01, #31
16660     89 41 1D FF 
16664     6F 94 06 F6 | 	mov	arg02, ##981668463
16668     01 96 06 F6 | 	mov	arg03, #1
1666c     90 0E B1 FD | 	call	#__system___float_cmp
16670     00 7A 56 F2 | 	cmps	result1, #0 wc
16674     00 AC 06 C6 |  if_b	mov	local04, #0
16678     E7 AC 62 FC | 	wrlong	local04, fp
1667c     08 CE 05 F1 | 	add	fp, #8
16680     E7 3C 68 FC | 	wrlong	#30, fp
16684     08 CE 85 F1 | 	sub	fp, #8
16688     E7 92 02 F6 | 	mov	arg01, fp
1668c     70 70 BF FD | 	call	#_push
16690                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16690     1C 00 90 FD | 	jmp	#LR__1914
16694                 | LR__1912
16694     29 92 06 F6 | 	mov	arg01, #41
16698     00 94 06 F6 | 	mov	arg02, #0
1669c     34 A6 B0 FD | 	call	#_printerror
166a0                 | '      printerror(41) : return
166a0     0C 00 90 FD | 	jmp	#LR__1914
166a4                 | LR__1913
166a4     29 92 06 F6 | 	mov	arg01, #41
166a8     00 94 06 F6 | 	mov	arg02, #0
166ac     24 A6 B0 FD | 	call	#_printerror
166b0                 | LR__1914
166b0     E7 F0 03 F6 | 	mov	ptra, fp
166b4     F2 00 A0 FD | 	call	#popregs_
166b8                 | _do_pads_ret
166b8     2D 00 64 FD | 	ret
166bc                 | 
166bc                 | ' 
166bc                 | ' ' ------------------ padw
166bc                 | ' 
166bc                 | ' sub do_padw
166bc                 | _do_padw
166bc     04 CA 05 F6 | 	mov	COUNT_, #4
166c0     E8 00 A0 FD | 	call	#pushregs_
166c4     14 F0 07 F1 | 	add	ptra, #20
166c8     4C 00 00 FF 
166cc     24 64 06 F1 | 	add	objptr, ##38948
166d0     32 A7 02 FB | 	rdlong	local01, objptr
166d4     53 97 02 F6 | 	mov	arg03, local01
166d8     01 96 66 F0 | 	shl	arg03, #1
166dc     53 97 02 F1 | 	add	arg03, local01
166e0     02 96 66 F0 | 	shl	arg03, #2
166e4     03 00 00 FF 
166e8     04 64 86 F1 | 	sub	objptr, ##1540
166ec     32 97 02 F1 | 	add	arg03, objptr
166f0     4B A9 02 FB | 	rdlong	local02, arg03
166f4                 | ' 
166f4                 | ' numpar=compiledline(lineptr_e).result.uresult
166f4                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
166f4     02 A8 16 F2 | 	cmp	local02, #2 wc
166f8     49 00 00 FF 
166fc     20 64 86 F1 | 	sub	objptr, ##37408
16700     40 00 90 CD |  if_b	jmp	#LR__1920
16704     00 92 06 F6 | 	mov	arg01, #0
16708     74 38 B1 FD | 	call	#__system___getiolock_0622
1670c     3D 93 02 F6 | 	mov	arg01, result1
16710     E8 E2 B0 FD | 	call	#__system___lockmem
16714     98 01 00 FF 
16718     C0 94 06 F6 | 	mov	arg02, ##@LR__6060
1671c     00 92 06 F6 | 	mov	arg01, #0
16720     00 96 06 F6 | 	mov	arg03, #0
16724     C8 EF B0 FD | 	call	#__system___basic_print_string
16728     00 92 06 F6 | 	mov	arg01, #0
1672c     50 38 B1 FD | 	call	#__system___getiolock_0622
16730     3D 01 68 FC | 	wrlong	#0, result1
16734     27 92 06 F6 | 	mov	arg01, #39
16738     00 94 06 F6 | 	mov	arg02, #0
1673c     94 A5 B0 FD | 	call	#_printerror
16740     A0 01 90 FD | 	jmp	#LR__1924
16744                 | LR__1920
16744                 | ' if numpar=0 then 
16744     00 A8 0E F2 | 	cmp	local02, #0 wz
16748     8C 00 90 5D |  if_ne	jmp	#LR__1921
1674c     00 C0 1B FF 
16750     00 A8 06 F6 | 	mov	local02, ##931135488
16754     53 00 00 FF 
16758     DC 65 06 F1 | 	add	objptr, ##42972
1675c     32 93 02 FB | 	rdlong	arg01, objptr
16760     53 00 00 FF 
16764     DC 65 86 F1 | 	sub	objptr, ##42972
16768     49 93 52 F6 | 	abs	arg01, arg01 wc
1676c     1F AA C6 C9 |  if_b	decod	local03, #31
16770     00 AA 06 36 |  if_ae	mov	local03, #0
16774     50 05 B1 FD | 	call	#__system___float_fromuns
16778     55 7B 62 F5 | 	xor	result1, local03
1677c     3D 93 02 F6 | 	mov	arg01, result1
16780     FF 7F 23 FF 
16784     00 94 06 F6 | 	mov	arg02, ##1191181824
16788     44 0B B1 FD | 	call	#__system___float_div
1678c     3D 95 02 F6 | 	mov	arg02, result1
16790     54 93 02 F6 | 	mov	arg01, local02
16794     64 05 B1 FD | 	call	#__system___float_add
16798     3D AD 02 F6 | 	mov	local04, result1
1679c                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1679c     56 93 02 F6 | 	mov	arg01, local04
167a0     1F 92 06 F4 | 	bitl	arg01, #31
167a4     89 41 1D FF 
167a8     6F 94 06 F6 | 	mov	arg02, ##981668463
167ac     01 96 06 F6 | 	mov	arg03, #1
167b0     4C 0D B1 FD | 	call	#__system___float_cmp
167b4     00 7A 56 F2 | 	cmps	result1, #0 wc
167b8     00 AC 06 C6 |  if_b	mov	local04, #0
167bc     E7 AC 62 FC | 	wrlong	local04, fp
167c0     08 CE 05 F1 | 	add	fp, #8
167c4     E7 3C 68 FC | 	wrlong	#30, fp
167c8     08 CE 85 F1 | 	sub	fp, #8
167cc     E7 92 02 F6 | 	mov	arg01, fp
167d0     2C 6F BF FD | 	call	#_push
167d4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
167d4     0C 01 90 FD | 	jmp	#LR__1924
167d8                 | LR__1921
167d8     94 6E BF FD | 	call	#_pop
167dc     E7 7A 62 FC | 	wrlong	result1, fp
167e0     04 CE 05 F1 | 	add	fp, #4
167e4     E7 7C 62 FC | 	wrlong	result2, fp
167e8     04 CE 05 F1 | 	add	fp, #4
167ec     E7 7E 62 FC | 	wrlong	result3, fp
167f0                 | ' t1=pop()
167f0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
167f0     08 CE 85 F1 | 	sub	fp, #8
167f4     1C 7E 0E F2 | 	cmp	result3, #28 wz
167f8     08 CE 05 51 |  if_ne	add	fp, #8
167fc     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16800     08 CE 85 51 |  if_ne	sub	fp, #8
16804     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16808     CC 00 90 5D |  if_ne	jmp	#LR__1923
1680c     E7 AC 02 FB | 	rdlong	local04, fp
16810     54 00 00 FF 
16814     E4 64 06 F1 | 	add	objptr, ##43236
16818     32 AD 62 FC | 	wrlong	local04, objptr
1681c                 | '   q=t1.result.uresult
1681c                 | '   if q<7 then 
1681c     54 00 00 FF 
16820     E4 64 86 F1 | 	sub	objptr, ##43236
16824     07 AC 56 F2 | 	cmps	local04, #7 wc
16828     9C 00 90 3D |  if_ae	jmp	#LR__1922
1682c     00 C0 1B FF 
16830     00 AC 06 F6 | 	mov	local04, ##931135488
16834     54 00 00 FF 
16838     E4 64 06 F1 | 	add	objptr, ##43236
1683c     32 A9 02 FB | 	rdlong	local02, objptr
16840     02 A8 66 F0 | 	shl	local02, #2
16844     08 65 86 F1 | 	sub	objptr, #264
16848     32 A9 02 F1 | 	add	local02, objptr
1684c     54 93 02 FB | 	rdlong	arg01, local02
16850     53 00 00 FF 
16854     DC 65 86 F1 | 	sub	objptr, ##42972
16858     49 93 52 F6 | 	abs	arg01, arg01 wc
1685c     1F AA C6 C9 |  if_b	decod	local03, #31
16860     00 AA 06 36 |  if_ae	mov	local03, #0
16864     60 04 B1 FD | 	call	#__system___float_fromuns
16868     55 7B 62 F5 | 	xor	result1, local03
1686c     3D 93 02 F6 | 	mov	arg01, result1
16870     FF 7F 23 FF 
16874     00 94 06 F6 | 	mov	arg02, ##1191181824
16878     54 0A B1 FD | 	call	#__system___float_div
1687c     3D 95 02 F6 | 	mov	arg02, result1
16880     56 93 02 F6 | 	mov	arg01, local04
16884     74 04 B1 FD | 	call	#__system___float_add
16888     3D AD 02 F6 | 	mov	local04, result1
1688c                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1688c     56 93 02 F6 | 	mov	arg01, local04
16890     1F 92 06 F4 | 	bitl	arg01, #31
16894     89 41 1D FF 
16898     6F 94 06 F6 | 	mov	arg02, ##981668463
1689c     01 96 06 F6 | 	mov	arg03, #1
168a0     5C 0C B1 FD | 	call	#__system___float_cmp
168a4     00 7A 56 F2 | 	cmps	result1, #0 wc
168a8     00 AC 06 C6 |  if_b	mov	local04, #0
168ac     E7 AC 62 FC | 	wrlong	local04, fp
168b0     08 CE 05 F1 | 	add	fp, #8
168b4     E7 3C 68 FC | 	wrlong	#30, fp
168b8     08 CE 85 F1 | 	sub	fp, #8
168bc     E7 92 02 F6 | 	mov	arg01, fp
168c0     3C 6E BF FD | 	call	#_push
168c4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
168c4     1C 00 90 FD | 	jmp	#LR__1924
168c8                 | LR__1922
168c8     29 92 06 F6 | 	mov	arg01, #41
168cc     00 94 06 F6 | 	mov	arg02, #0
168d0     00 A4 B0 FD | 	call	#_printerror
168d4                 | '      printerror(41) : return
168d4     0C 00 90 FD | 	jmp	#LR__1924
168d8                 | LR__1923
168d8     29 92 06 F6 | 	mov	arg01, #41
168dc     00 94 06 F6 | 	mov	arg02, #0
168e0     F0 A3 B0 FD | 	call	#_printerror
168e4                 | LR__1924
168e4     E7 F0 03 F6 | 	mov	ptra, fp
168e8     F2 00 A0 FD | 	call	#popregs_
168ec                 | _do_padw_ret
168ec     2D 00 64 FD | 	ret
168f0                 | 
168f0                 | ' 
168f0                 | ' ' ------------------ padx
168f0                 | ' 
168f0                 | ' sub do_padx
168f0                 | _do_padx
168f0     04 CA 05 F6 | 	mov	COUNT_, #4
168f4     E8 00 A0 FD | 	call	#pushregs_
168f8     14 F0 07 F1 | 	add	ptra, #20
168fc     4C 00 00 FF 
16900     24 64 06 F1 | 	add	objptr, ##38948
16904     32 A7 02 FB | 	rdlong	local01, objptr
16908     53 97 02 F6 | 	mov	arg03, local01
1690c     01 96 66 F0 | 	shl	arg03, #1
16910     53 97 02 F1 | 	add	arg03, local01
16914     02 96 66 F0 | 	shl	arg03, #2
16918     03 00 00 FF 
1691c     04 64 86 F1 | 	sub	objptr, ##1540
16920     32 97 02 F1 | 	add	arg03, objptr
16924     4B A9 02 FB | 	rdlong	local02, arg03
16928                 | ' 
16928                 | ' numpar=compiledline(lineptr_e).result.uresult
16928                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16928     02 A8 16 F2 | 	cmp	local02, #2 wc
1692c     49 00 00 FF 
16930     20 64 86 F1 | 	sub	objptr, ##37408
16934     40 00 90 CD |  if_b	jmp	#LR__1930
16938     00 92 06 F6 | 	mov	arg01, #0
1693c     40 36 B1 FD | 	call	#__system___getiolock_0622
16940     3D 93 02 F6 | 	mov	arg01, result1
16944     B4 E0 B0 FD | 	call	#__system___lockmem
16948     98 01 00 FF 
1694c     C7 94 06 F6 | 	mov	arg02, ##@LR__6061
16950     00 92 06 F6 | 	mov	arg01, #0
16954     00 96 06 F6 | 	mov	arg03, #0
16958     94 ED B0 FD | 	call	#__system___basic_print_string
1695c     00 92 06 F6 | 	mov	arg01, #0
16960     1C 36 B1 FD | 	call	#__system___getiolock_0622
16964     3D 01 68 FC | 	wrlong	#0, result1
16968     27 92 06 F6 | 	mov	arg01, #39
1696c     00 94 06 F6 | 	mov	arg02, #0
16970     60 A3 B0 FD | 	call	#_printerror
16974     A0 01 90 FD | 	jmp	#LR__1934
16978                 | LR__1930
16978                 | ' if numpar=0 then 
16978     00 A8 0E F2 | 	cmp	local02, #0 wz
1697c     8C 00 90 5D |  if_ne	jmp	#LR__1931
16980     00 C0 1B FF 
16984     00 A8 06 F6 | 	mov	local02, ##931135488
16988     53 00 00 FF 
1698c     FC 64 06 F1 | 	add	objptr, ##42748
16990     32 93 02 FB | 	rdlong	arg01, objptr
16994     53 00 00 FF 
16998     FC 64 86 F1 | 	sub	objptr, ##42748
1699c     49 93 52 F6 | 	abs	arg01, arg01 wc
169a0     1F AA C6 C9 |  if_b	decod	local03, #31
169a4     00 AA 06 36 |  if_ae	mov	local03, #0
169a8     1C 03 B1 FD | 	call	#__system___float_fromuns
169ac     55 7B 62 F5 | 	xor	result1, local03
169b0     3D 93 02 F6 | 	mov	arg01, result1
169b4     FF 7F 23 FF 
169b8     00 94 06 F6 | 	mov	arg02, ##1191181824
169bc     10 09 B1 FD | 	call	#__system___float_div
169c0     3D 95 02 F6 | 	mov	arg02, result1
169c4     54 93 02 F6 | 	mov	arg01, local02
169c8     30 03 B1 FD | 	call	#__system___float_add
169cc     3D AD 02 F6 | 	mov	local04, result1
169d0                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169d0     56 93 02 F6 | 	mov	arg01, local04
169d4     1F 92 06 F4 | 	bitl	arg01, #31
169d8     89 41 1D FF 
169dc     6F 94 06 F6 | 	mov	arg02, ##981668463
169e0     01 96 06 F6 | 	mov	arg03, #1
169e4     18 0B B1 FD | 	call	#__system___float_cmp
169e8     00 7A 56 F2 | 	cmps	result1, #0 wc
169ec     00 AC 06 C6 |  if_b	mov	local04, #0
169f0     E7 AC 62 FC | 	wrlong	local04, fp
169f4     08 CE 05 F1 | 	add	fp, #8
169f8     E7 3C 68 FC | 	wrlong	#30, fp
169fc     08 CE 85 F1 | 	sub	fp, #8
16a00     E7 92 02 F6 | 	mov	arg01, fp
16a04     F8 6C BF FD | 	call	#_push
16a08                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a08     0C 01 90 FD | 	jmp	#LR__1934
16a0c                 | LR__1931
16a0c     60 6C BF FD | 	call	#_pop
16a10     E7 7A 62 FC | 	wrlong	result1, fp
16a14     04 CE 05 F1 | 	add	fp, #4
16a18     E7 7C 62 FC | 	wrlong	result2, fp
16a1c     04 CE 05 F1 | 	add	fp, #4
16a20     E7 7E 62 FC | 	wrlong	result3, fp
16a24                 | ' t1=pop()
16a24                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16a24     08 CE 85 F1 | 	sub	fp, #8
16a28     1C 7E 0E F2 | 	cmp	result3, #28 wz
16a2c     08 CE 05 51 |  if_ne	add	fp, #8
16a30     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16a34     08 CE 85 51 |  if_ne	sub	fp, #8
16a38     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16a3c     CC 00 90 5D |  if_ne	jmp	#LR__1933
16a40     E7 AC 02 FB | 	rdlong	local04, fp
16a44     54 00 00 FF 
16a48     E4 64 06 F1 | 	add	objptr, ##43236
16a4c     32 AD 62 FC | 	wrlong	local04, objptr
16a50                 | '   q=t1.result.uresult
16a50                 | '   if q<7 then 
16a50     54 00 00 FF 
16a54     E4 64 86 F1 | 	sub	objptr, ##43236
16a58     07 AC 56 F2 | 	cmps	local04, #7 wc
16a5c     9C 00 90 3D |  if_ae	jmp	#LR__1932
16a60     00 C0 1B FF 
16a64     00 AC 06 F6 | 	mov	local04, ##931135488
16a68     54 00 00 FF 
16a6c     E4 64 06 F1 | 	add	objptr, ##43236
16a70     32 A9 02 FB | 	rdlong	local02, objptr
16a74     02 A8 66 F0 | 	shl	local02, #2
16a78     E8 65 86 F1 | 	sub	objptr, #488
16a7c     32 A9 02 F1 | 	add	local02, objptr
16a80     54 93 02 FB | 	rdlong	arg01, local02
16a84     53 00 00 FF 
16a88     FC 64 86 F1 | 	sub	objptr, ##42748
16a8c     49 93 52 F6 | 	abs	arg01, arg01 wc
16a90     1F AA C6 C9 |  if_b	decod	local03, #31
16a94     00 AA 06 36 |  if_ae	mov	local03, #0
16a98     2C 02 B1 FD | 	call	#__system___float_fromuns
16a9c     55 7B 62 F5 | 	xor	result1, local03
16aa0     3D 93 02 F6 | 	mov	arg01, result1
16aa4     FF 7F 23 FF 
16aa8     00 94 06 F6 | 	mov	arg02, ##1191181824
16aac     20 08 B1 FD | 	call	#__system___float_div
16ab0     3D 95 02 F6 | 	mov	arg02, result1
16ab4     56 93 02 F6 | 	mov	arg01, local04
16ab8     40 02 B1 FD | 	call	#__system___float_add
16abc     3D AD 02 F6 | 	mov	local04, result1
16ac0                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ac0     56 93 02 F6 | 	mov	arg01, local04
16ac4     1F 92 06 F4 | 	bitl	arg01, #31
16ac8     89 41 1D FF 
16acc     6F 94 06 F6 | 	mov	arg02, ##981668463
16ad0     01 96 06 F6 | 	mov	arg03, #1
16ad4     28 0A B1 FD | 	call	#__system___float_cmp
16ad8     00 7A 56 F2 | 	cmps	result1, #0 wc
16adc     00 AC 06 C6 |  if_b	mov	local04, #0
16ae0     E7 AC 62 FC | 	wrlong	local04, fp
16ae4     08 CE 05 F1 | 	add	fp, #8
16ae8     E7 3C 68 FC | 	wrlong	#30, fp
16aec     08 CE 85 F1 | 	sub	fp, #8
16af0     E7 92 02 F6 | 	mov	arg01, fp
16af4     08 6C BF FD | 	call	#_push
16af8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16af8     1C 00 90 FD | 	jmp	#LR__1934
16afc                 | LR__1932
16afc     29 92 06 F6 | 	mov	arg01, #41
16b00     00 94 06 F6 | 	mov	arg02, #0
16b04     CC A1 B0 FD | 	call	#_printerror
16b08                 | '      printerror(41) : return
16b08     0C 00 90 FD | 	jmp	#LR__1934
16b0c                 | LR__1933
16b0c     29 92 06 F6 | 	mov	arg01, #41
16b10     00 94 06 F6 | 	mov	arg02, #0
16b14     BC A1 B0 FD | 	call	#_printerror
16b18                 | LR__1934
16b18     E7 F0 03 F6 | 	mov	ptra, fp
16b1c     F2 00 A0 FD | 	call	#popregs_
16b20                 | _do_padx_ret
16b20     2D 00 64 FD | 	ret
16b24                 | 
16b24                 | ' 
16b24                 | ' ' ------------------ pady
16b24                 | ' 
16b24                 | ' sub do_pady
16b24                 | _do_pady
16b24     04 CA 05 F6 | 	mov	COUNT_, #4
16b28     E8 00 A0 FD | 	call	#pushregs_
16b2c     14 F0 07 F1 | 	add	ptra, #20
16b30     4C 00 00 FF 
16b34     24 64 06 F1 | 	add	objptr, ##38948
16b38     32 A7 02 FB | 	rdlong	local01, objptr
16b3c     53 97 02 F6 | 	mov	arg03, local01
16b40     01 96 66 F0 | 	shl	arg03, #1
16b44     53 97 02 F1 | 	add	arg03, local01
16b48     02 96 66 F0 | 	shl	arg03, #2
16b4c     03 00 00 FF 
16b50     04 64 86 F1 | 	sub	objptr, ##1540
16b54     32 97 02 F1 | 	add	arg03, objptr
16b58     4B A9 02 FB | 	rdlong	local02, arg03
16b5c                 | ' 
16b5c                 | ' numpar=compiledline(lineptr_e).result.uresult
16b5c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16b5c     02 A8 16 F2 | 	cmp	local02, #2 wc
16b60     49 00 00 FF 
16b64     20 64 86 F1 | 	sub	objptr, ##37408
16b68     40 00 90 CD |  if_b	jmp	#LR__1940
16b6c     00 92 06 F6 | 	mov	arg01, #0
16b70     0C 34 B1 FD | 	call	#__system___getiolock_0622
16b74     3D 93 02 F6 | 	mov	arg01, result1
16b78     80 DE B0 FD | 	call	#__system___lockmem
16b7c     98 01 00 FF 
16b80     CE 94 06 F6 | 	mov	arg02, ##@LR__6062
16b84     00 92 06 F6 | 	mov	arg01, #0
16b88     00 96 06 F6 | 	mov	arg03, #0
16b8c     60 EB B0 FD | 	call	#__system___basic_print_string
16b90     00 92 06 F6 | 	mov	arg01, #0
16b94     E8 33 B1 FD | 	call	#__system___getiolock_0622
16b98     3D 01 68 FC | 	wrlong	#0, result1
16b9c     27 92 06 F6 | 	mov	arg01, #39
16ba0     00 94 06 F6 | 	mov	arg02, #0
16ba4     2C A1 B0 FD | 	call	#_printerror
16ba8     A0 01 90 FD | 	jmp	#LR__1944
16bac                 | LR__1940
16bac                 | ' if numpar=0 then 
16bac     00 A8 0E F2 | 	cmp	local02, #0 wz
16bb0     8C 00 90 5D |  if_ne	jmp	#LR__1941
16bb4     00 C0 1B FF 
16bb8     00 A8 06 F6 | 	mov	local02, ##931135488
16bbc     53 00 00 FF 
16bc0     18 65 06 F1 | 	add	objptr, ##42776
16bc4     32 93 02 FB | 	rdlong	arg01, objptr
16bc8     53 00 00 FF 
16bcc     18 65 86 F1 | 	sub	objptr, ##42776
16bd0     49 93 52 F6 | 	abs	arg01, arg01 wc
16bd4     1F AA C6 C9 |  if_b	decod	local03, #31
16bd8     00 AA 06 36 |  if_ae	mov	local03, #0
16bdc     E8 00 B1 FD | 	call	#__system___float_fromuns
16be0     55 7B 62 F5 | 	xor	result1, local03
16be4     3D 93 02 F6 | 	mov	arg01, result1
16be8     FF 7F 23 FF 
16bec     00 94 06 F6 | 	mov	arg02, ##1191181824
16bf0     DC 06 B1 FD | 	call	#__system___float_div
16bf4     3D 95 02 F6 | 	mov	arg02, result1
16bf8     54 93 02 F6 | 	mov	arg01, local02
16bfc     FC 00 B1 FD | 	call	#__system___float_add
16c00     3D AD 02 F6 | 	mov	local04, result1
16c04                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c04     56 93 02 F6 | 	mov	arg01, local04
16c08     1F 92 06 F4 | 	bitl	arg01, #31
16c0c     89 41 1D FF 
16c10     6F 94 06 F6 | 	mov	arg02, ##981668463
16c14     01 96 06 F6 | 	mov	arg03, #1
16c18     E4 08 B1 FD | 	call	#__system___float_cmp
16c1c     00 7A 56 F2 | 	cmps	result1, #0 wc
16c20     00 AC 06 C6 |  if_b	mov	local04, #0
16c24     E7 AC 62 FC | 	wrlong	local04, fp
16c28     08 CE 05 F1 | 	add	fp, #8
16c2c     E7 3C 68 FC | 	wrlong	#30, fp
16c30     08 CE 85 F1 | 	sub	fp, #8
16c34     E7 92 02 F6 | 	mov	arg01, fp
16c38     C4 6A BF FD | 	call	#_push
16c3c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16c3c     0C 01 90 FD | 	jmp	#LR__1944
16c40                 | LR__1941
16c40     2C 6A BF FD | 	call	#_pop
16c44     E7 7A 62 FC | 	wrlong	result1, fp
16c48     04 CE 05 F1 | 	add	fp, #4
16c4c     E7 7C 62 FC | 	wrlong	result2, fp
16c50     04 CE 05 F1 | 	add	fp, #4
16c54     E7 7E 62 FC | 	wrlong	result3, fp
16c58                 | ' t1=pop()
16c58                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c58     08 CE 85 F1 | 	sub	fp, #8
16c5c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16c60     08 CE 05 51 |  if_ne	add	fp, #8
16c64     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16c68     08 CE 85 51 |  if_ne	sub	fp, #8
16c6c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16c70     CC 00 90 5D |  if_ne	jmp	#LR__1943
16c74     E7 AC 02 FB | 	rdlong	local04, fp
16c78     54 00 00 FF 
16c7c     E4 64 06 F1 | 	add	objptr, ##43236
16c80     32 AD 62 FC | 	wrlong	local04, objptr
16c84                 | '   q=t1.result.uresult
16c84                 | '   if q<7 then 
16c84     54 00 00 FF 
16c88     E4 64 86 F1 | 	sub	objptr, ##43236
16c8c     07 AC 56 F2 | 	cmps	local04, #7 wc
16c90     9C 00 90 3D |  if_ae	jmp	#LR__1942
16c94     00 C0 1B FF 
16c98     00 AC 06 F6 | 	mov	local04, ##931135488
16c9c     54 00 00 FF 
16ca0     E4 64 06 F1 | 	add	objptr, ##43236
16ca4     32 A9 02 FB | 	rdlong	local02, objptr
16ca8     02 A8 66 F0 | 	shl	local02, #2
16cac     CC 65 86 F1 | 	sub	objptr, #460
16cb0     32 A9 02 F1 | 	add	local02, objptr
16cb4     54 93 02 FB | 	rdlong	arg01, local02
16cb8     53 00 00 FF 
16cbc     18 65 86 F1 | 	sub	objptr, ##42776
16cc0     49 93 52 F6 | 	abs	arg01, arg01 wc
16cc4     1F AA C6 C9 |  if_b	decod	local03, #31
16cc8     00 AA 06 36 |  if_ae	mov	local03, #0
16ccc     F8 FF B0 FD | 	call	#__system___float_fromuns
16cd0     55 7B 62 F5 | 	xor	result1, local03
16cd4     3D 93 02 F6 | 	mov	arg01, result1
16cd8     FF 7F 23 FF 
16cdc     00 94 06 F6 | 	mov	arg02, ##1191181824
16ce0     EC 05 B1 FD | 	call	#__system___float_div
16ce4     3D 95 02 F6 | 	mov	arg02, result1
16ce8     56 93 02 F6 | 	mov	arg01, local04
16cec     0C 00 B1 FD | 	call	#__system___float_add
16cf0     3D AD 02 F6 | 	mov	local04, result1
16cf4                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16cf4     56 93 02 F6 | 	mov	arg01, local04
16cf8     1F 92 06 F4 | 	bitl	arg01, #31
16cfc     89 41 1D FF 
16d00     6F 94 06 F6 | 	mov	arg02, ##981668463
16d04     01 96 06 F6 | 	mov	arg03, #1
16d08     F4 07 B1 FD | 	call	#__system___float_cmp
16d0c     00 7A 56 F2 | 	cmps	result1, #0 wc
16d10     00 AC 06 C6 |  if_b	mov	local04, #0
16d14     E7 AC 62 FC | 	wrlong	local04, fp
16d18     08 CE 05 F1 | 	add	fp, #8
16d1c     E7 3C 68 FC | 	wrlong	#30, fp
16d20     08 CE 85 F1 | 	sub	fp, #8
16d24     E7 92 02 F6 | 	mov	arg01, fp
16d28     D4 69 BF FD | 	call	#_push
16d2c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16d2c     1C 00 90 FD | 	jmp	#LR__1944
16d30                 | LR__1942
16d30     29 92 06 F6 | 	mov	arg01, #41
16d34     00 94 06 F6 | 	mov	arg02, #0
16d38     98 9F B0 FD | 	call	#_printerror
16d3c                 | '      printerror(41) : return
16d3c     0C 00 90 FD | 	jmp	#LR__1944
16d40                 | LR__1943
16d40     29 92 06 F6 | 	mov	arg01, #41
16d44     00 94 06 F6 | 	mov	arg02, #0
16d48     88 9F B0 FD | 	call	#_printerror
16d4c                 | LR__1944
16d4c     E7 F0 03 F6 | 	mov	ptra, fp
16d50     F2 00 A0 FD | 	call	#popregs_
16d54                 | _do_pady_ret
16d54     2D 00 64 FD | 	ret
16d58                 | 
16d58                 | ' 
16d58                 | ' ' ------------------ padz
16d58                 | ' 
16d58                 | ' sub do_padz
16d58                 | _do_padz
16d58     04 CA 05 F6 | 	mov	COUNT_, #4
16d5c     E8 00 A0 FD | 	call	#pushregs_
16d60     14 F0 07 F1 | 	add	ptra, #20
16d64     4C 00 00 FF 
16d68     24 64 06 F1 | 	add	objptr, ##38948
16d6c     32 A7 02 FB | 	rdlong	local01, objptr
16d70     53 97 02 F6 | 	mov	arg03, local01
16d74     01 96 66 F0 | 	shl	arg03, #1
16d78     53 97 02 F1 | 	add	arg03, local01
16d7c     02 96 66 F0 | 	shl	arg03, #2
16d80     03 00 00 FF 
16d84     04 64 86 F1 | 	sub	objptr, ##1540
16d88     32 97 02 F1 | 	add	arg03, objptr
16d8c     4B A9 02 FB | 	rdlong	local02, arg03
16d90                 | ' 
16d90                 | ' numpar=compiledline(lineptr_e).result.uresult
16d90                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16d90     02 A8 16 F2 | 	cmp	local02, #2 wc
16d94     49 00 00 FF 
16d98     20 64 86 F1 | 	sub	objptr, ##37408
16d9c     40 00 90 CD |  if_b	jmp	#LR__1950
16da0     00 92 06 F6 | 	mov	arg01, #0
16da4     D8 31 B1 FD | 	call	#__system___getiolock_0622
16da8     3D 93 02 F6 | 	mov	arg01, result1
16dac     4C DC B0 FD | 	call	#__system___lockmem
16db0     98 01 00 FF 
16db4     D5 94 06 F6 | 	mov	arg02, ##@LR__6063
16db8     00 92 06 F6 | 	mov	arg01, #0
16dbc     00 96 06 F6 | 	mov	arg03, #0
16dc0     2C E9 B0 FD | 	call	#__system___basic_print_string
16dc4     00 92 06 F6 | 	mov	arg01, #0
16dc8     B4 31 B1 FD | 	call	#__system___getiolock_0622
16dcc     3D 01 68 FC | 	wrlong	#0, result1
16dd0     27 92 06 F6 | 	mov	arg01, #39
16dd4     00 94 06 F6 | 	mov	arg02, #0
16dd8     F8 9E B0 FD | 	call	#_printerror
16ddc     A0 01 90 FD | 	jmp	#LR__1954
16de0                 | LR__1950
16de0                 | ' if numpar=0 then 
16de0     00 A8 0E F2 | 	cmp	local02, #0 wz
16de4     8C 00 90 5D |  if_ne	jmp	#LR__1951
16de8     00 C0 1B FF 
16dec     00 A8 06 F6 | 	mov	local02, ##931135488
16df0     53 00 00 FF 
16df4     34 65 06 F1 | 	add	objptr, ##42804
16df8     32 93 02 FB | 	rdlong	arg01, objptr
16dfc     53 00 00 FF 
16e00     34 65 86 F1 | 	sub	objptr, ##42804
16e04     49 93 52 F6 | 	abs	arg01, arg01 wc
16e08     1F AA C6 C9 |  if_b	decod	local03, #31
16e0c     00 AA 06 36 |  if_ae	mov	local03, #0
16e10     B4 FE B0 FD | 	call	#__system___float_fromuns
16e14     55 7B 62 F5 | 	xor	result1, local03
16e18     3D 93 02 F6 | 	mov	arg01, result1
16e1c     FF 7F 23 FF 
16e20     00 94 06 F6 | 	mov	arg02, ##1191181824
16e24     A8 04 B1 FD | 	call	#__system___float_div
16e28     3D 95 02 F6 | 	mov	arg02, result1
16e2c     54 93 02 F6 | 	mov	arg01, local02
16e30     C8 FE B0 FD | 	call	#__system___float_add
16e34     3D AD 02 F6 | 	mov	local04, result1
16e38                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e38     56 93 02 F6 | 	mov	arg01, local04
16e3c     1F 92 06 F4 | 	bitl	arg01, #31
16e40     89 41 1D FF 
16e44     6F 94 06 F6 | 	mov	arg02, ##981668463
16e48     01 96 06 F6 | 	mov	arg03, #1
16e4c     B0 06 B1 FD | 	call	#__system___float_cmp
16e50     00 7A 56 F2 | 	cmps	result1, #0 wc
16e54     00 AC 06 C6 |  if_b	mov	local04, #0
16e58     E7 AC 62 FC | 	wrlong	local04, fp
16e5c     08 CE 05 F1 | 	add	fp, #8
16e60     E7 3C 68 FC | 	wrlong	#30, fp
16e64     08 CE 85 F1 | 	sub	fp, #8
16e68     E7 92 02 F6 | 	mov	arg01, fp
16e6c     90 68 BF FD | 	call	#_push
16e70                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e70     0C 01 90 FD | 	jmp	#LR__1954
16e74                 | LR__1951
16e74     F8 67 BF FD | 	call	#_pop
16e78     E7 7A 62 FC | 	wrlong	result1, fp
16e7c     04 CE 05 F1 | 	add	fp, #4
16e80     E7 7C 62 FC | 	wrlong	result2, fp
16e84     04 CE 05 F1 | 	add	fp, #4
16e88     E7 7E 62 FC | 	wrlong	result3, fp
16e8c                 | ' t1=pop()
16e8c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e8c     08 CE 85 F1 | 	sub	fp, #8
16e90     1C 7E 0E F2 | 	cmp	result3, #28 wz
16e94     08 CE 05 51 |  if_ne	add	fp, #8
16e98     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16e9c     08 CE 85 51 |  if_ne	sub	fp, #8
16ea0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16ea4     CC 00 90 5D |  if_ne	jmp	#LR__1953
16ea8     E7 AC 02 FB | 	rdlong	local04, fp
16eac     54 00 00 FF 
16eb0     E4 64 06 F1 | 	add	objptr, ##43236
16eb4     32 AD 62 FC | 	wrlong	local04, objptr
16eb8                 | '   q=t1.result.uresult
16eb8                 | '   if q<7 then 
16eb8     54 00 00 FF 
16ebc     E4 64 86 F1 | 	sub	objptr, ##43236
16ec0     07 AC 56 F2 | 	cmps	local04, #7 wc
16ec4     9C 00 90 3D |  if_ae	jmp	#LR__1952
16ec8     00 C0 1B FF 
16ecc     00 AC 06 F6 | 	mov	local04, ##931135488
16ed0     54 00 00 FF 
16ed4     E4 64 06 F1 | 	add	objptr, ##43236
16ed8     32 A9 02 FB | 	rdlong	local02, objptr
16edc     02 A8 66 F0 | 	shl	local02, #2
16ee0     B0 65 86 F1 | 	sub	objptr, #432
16ee4     32 A9 02 F1 | 	add	local02, objptr
16ee8     54 93 02 FB | 	rdlong	arg01, local02
16eec     53 00 00 FF 
16ef0     34 65 86 F1 | 	sub	objptr, ##42804
16ef4     49 93 52 F6 | 	abs	arg01, arg01 wc
16ef8     1F AA C6 C9 |  if_b	decod	local03, #31
16efc     00 AA 06 36 |  if_ae	mov	local03, #0
16f00     C4 FD B0 FD | 	call	#__system___float_fromuns
16f04     55 7B 62 F5 | 	xor	result1, local03
16f08     3D 93 02 F6 | 	mov	arg01, result1
16f0c     FF 7F 23 FF 
16f10     00 94 06 F6 | 	mov	arg02, ##1191181824
16f14     B8 03 B1 FD | 	call	#__system___float_div
16f18     3D 95 02 F6 | 	mov	arg02, result1
16f1c     56 93 02 F6 | 	mov	arg01, local04
16f20     D8 FD B0 FD | 	call	#__system___float_add
16f24     3D AD 02 F6 | 	mov	local04, result1
16f28                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f28     56 93 02 F6 | 	mov	arg01, local04
16f2c     1F 92 06 F4 | 	bitl	arg01, #31
16f30     89 41 1D FF 
16f34     6F 94 06 F6 | 	mov	arg02, ##981668463
16f38     01 96 06 F6 | 	mov	arg03, #1
16f3c     C0 05 B1 FD | 	call	#__system___float_cmp
16f40     00 7A 56 F2 | 	cmps	result1, #0 wc
16f44     00 AC 06 C6 |  if_b	mov	local04, #0
16f48     E7 AC 62 FC | 	wrlong	local04, fp
16f4c     08 CE 05 F1 | 	add	fp, #8
16f50     E7 3C 68 FC | 	wrlong	#30, fp
16f54     08 CE 85 F1 | 	sub	fp, #8
16f58     E7 92 02 F6 | 	mov	arg01, fp
16f5c     A0 67 BF FD | 	call	#_push
16f60                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f60     1C 00 90 FD | 	jmp	#LR__1954
16f64                 | LR__1952
16f64     29 92 06 F6 | 	mov	arg01, #41
16f68     00 94 06 F6 | 	mov	arg02, #0
16f6c     64 9D B0 FD | 	call	#_printerror
16f70                 | '      printerror(41) : return
16f70     0C 00 90 FD | 	jmp	#LR__1954
16f74                 | LR__1953
16f74     29 92 06 F6 | 	mov	arg01, #41
16f78     00 94 06 F6 | 	mov	arg02, #0
16f7c     54 9D B0 FD | 	call	#_printerror
16f80                 | LR__1954
16f80     E7 F0 03 F6 | 	mov	ptra, fp
16f84     F2 00 A0 FD | 	call	#popregs_
16f88                 | _do_padz_ret
16f88     2D 00 64 FD | 	ret
16f8c                 | 
16f8c                 | ' 
16f8c                 | ' '-------------------- paper
16f8c                 | ' 
16f8c                 | ' sub do_paper
16f8c                 | _do_paper
16f8c     03 CA 05 F6 | 	mov	COUNT_, #3
16f90     E8 00 A0 FD | 	call	#pushregs_
16f94     D8 66 BF FD | 	call	#_pop
16f98     3D A7 02 F6 | 	mov	local01, result1
16f9c     3E A9 02 F6 | 	mov	local02, result2
16fa0     3F AB 02 F6 | 	mov	local03, result3
16fa4                 | ' t1=pop() 
16fa4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16fa4     1E AA 0E F2 | 	cmp	local03, #30 wz
16fa8     10 00 90 5D |  if_ne	jmp	#LR__1960
16fac     53 93 02 F6 | 	mov	arg01, local01
16fb0     00 94 06 F6 | 	mov	arg02, #0
16fb4     DC 05 B1 FD | 	call	#__system___float_tointeger
16fb8     3D A7 02 F6 | 	mov	local01, result1
16fbc                 | LR__1960
16fbc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16fbc     1F AA 0E F2 | 	cmp	local03, #31 wz
16fc0     18 00 90 5D |  if_ne	jmp	#LR__1961
16fc4     53 93 02 F6 | 	mov	arg01, local01
16fc8     1C 09 B1 FD | 	call	#__system____builtin_atof
16fcc     3D 93 02 F6 | 	mov	arg01, result1
16fd0     00 94 06 F6 | 	mov	arg02, #0
16fd4     BC 05 B1 FD | 	call	#__system___float_tointeger
16fd8     3D A7 02 F6 | 	mov	local01, result1
16fdc                 | LR__1961
16fdc     38 00 00 FF 
16fe0     DC 65 06 F1 | 	add	objptr, ##29148
16fe4     32 A7 62 FC | 	wrlong	local01, objptr
16fe8     04 64 06 F1 | 	add	objptr, #4
16fec     32 93 02 FB | 	rdlong	arg01, objptr
16ff0                 | ' 
16ff0                 | ' write_color:=ff
16ff0     38 00 00 FF 
16ff4     9F 65 86 F1 | 	sub	objptr, ##29087
16ff8     32 93 62 FC | 	wrlong	arg01, objptr
16ffc                 | ' write_background:=bb
16ffc     04 64 06 F1 | 	add	objptr, #4
17000     32 A7 62 FC | 	wrlong	local01, objptr
17004     45 64 86 F1 | 	sub	objptr, #69
17008     E7 F0 03 F6 | 	mov	ptra, fp
1700c     F2 00 A0 FD | 	call	#popregs_
17010                 | _do_paper_ret
17010     2D 00 64 FD | 	ret
17014                 | 
17014                 | ' 
17014                 | ' '-------------------- peek
17014                 | ' 
17014                 | ' sub do_peek
17014                 | _do_peek
17014     01 CA 05 F6 | 	mov	COUNT_, #1
17018     E8 00 A0 FD | 	call	#pushregs_
1701c     14 F0 07 F1 | 	add	ptra, #20
17020     4C 66 BF FD | 	call	#_pop
17024     E7 7A 62 FC | 	wrlong	result1, fp
17028     04 CE 05 F1 | 	add	fp, #4
1702c     E7 7C 62 FC | 	wrlong	result2, fp
17030     04 CE 05 F1 | 	add	fp, #4
17034     E7 7E 62 FC | 	wrlong	result3, fp
17038     08 CE 85 F1 | 	sub	fp, #8
1703c     E7 92 02 F6 | 	mov	arg01, fp
17040     08 68 BF FD | 	call	#_converttoint
17044     3D 93 02 F6 | 	mov	arg01, result1
17048                 | ' 
17048                 | ' t1=pop()
17048                 | ' a=converttoint(t1)
17048                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17048     00 04 00 FF 
1704c     00 92 16 F2 | 	cmp	arg01, ##524288 wc
17050     49 A7 C2 CA |  if_b	rdbyte	local01, arg01
17054     08 00 90 CD |  if_b	jmp	#LR__1970
17058     EC 9E B0 FD | 	call	#_pspeek
1705c     3D A7 E2 F8 | 	getbyte	local01, result1, #0
17060                 | LR__1970
17060     08 CE 05 F1 | 	add	fp, #8
17064     E7 3A 68 FC | 	wrlong	#29, fp
17068     08 CE 85 F1 | 	sub	fp, #8
1706c     E7 A6 62 FC | 	wrlong	local01, fp
17070     E7 92 02 F6 | 	mov	arg01, fp
17074     88 66 BF FD | 	call	#_push
17078     E7 F0 03 F6 | 	mov	ptra, fp
1707c     F2 00 A0 FD | 	call	#popregs_
17080                 | _do_peek_ret
17080     2D 00 64 FD | 	ret
17084                 | 
17084                 | ' 
17084                 | ' '-------------------- pinfloat
17084                 | ' 
17084                 | ' sub do_pinfloat
17084                 | _do_pinfloat
17084     00 CA 05 F6 | 	mov	COUNT_, #0
17088     E8 00 A0 FD | 	call	#pushregs_
1708c     0C F0 07 F1 | 	add	ptra, #12
17090     DC 65 BF FD | 	call	#_pop
17094     E7 7A 62 FC | 	wrlong	result1, fp
17098     04 CE 05 F1 | 	add	fp, #4
1709c     E7 7C 62 FC | 	wrlong	result2, fp
170a0     04 CE 05 F1 | 	add	fp, #4
170a4     E7 7E 62 FC | 	wrlong	result3, fp
170a8     08 CE 85 F1 | 	sub	fp, #8
170ac     E7 92 02 F6 | 	mov	arg01, fp
170b0     98 67 BF FD | 	call	#_converttoint
170b4     50 7A 62 FD | 	fltl	result1
170b8     E7 F0 03 F6 | 	mov	ptra, fp
170bc     F2 00 A0 FD | 	call	#popregs_
170c0                 | _do_pinfloat_ret
170c0     2D 00 64 FD | 	ret
170c4                 | 
170c4                 | ' 
170c4                 | ' '-------------------- pinhi
170c4                 | ' 
170c4                 | ' sub do_pinhi
170c4                 | _do_pinhi
170c4     00 CA 05 F6 | 	mov	COUNT_, #0
170c8     E8 00 A0 FD | 	call	#pushregs_
170cc     0C F0 07 F1 | 	add	ptra, #12
170d0     9C 65 BF FD | 	call	#_pop
170d4     E7 7A 62 FC | 	wrlong	result1, fp
170d8     04 CE 05 F1 | 	add	fp, #4
170dc     E7 7C 62 FC | 	wrlong	result2, fp
170e0     04 CE 05 F1 | 	add	fp, #4
170e4     E7 7E 62 FC | 	wrlong	result3, fp
170e8     08 CE 85 F1 | 	sub	fp, #8
170ec     E7 92 02 F6 | 	mov	arg01, fp
170f0     58 67 BF FD | 	call	#_converttoint
170f4     59 7A 62 FD | 	drvh	result1
170f8     E7 F0 03 F6 | 	mov	ptra, fp
170fc     F2 00 A0 FD | 	call	#popregs_
17100                 | _do_pinhi_ret
17100     2D 00 64 FD | 	ret
17104                 | 
17104                 | ' 
17104                 | ' '-------------------- pinlo
17104                 | ' 
17104                 | ' sub do_pinlo
17104                 | _do_pinlo
17104     00 CA 05 F6 | 	mov	COUNT_, #0
17108     E8 00 A0 FD | 	call	#pushregs_
1710c     0C F0 07 F1 | 	add	ptra, #12
17110     5C 65 BF FD | 	call	#_pop
17114     E7 7A 62 FC | 	wrlong	result1, fp
17118     04 CE 05 F1 | 	add	fp, #4
1711c     E7 7C 62 FC | 	wrlong	result2, fp
17120     04 CE 05 F1 | 	add	fp, #4
17124     E7 7E 62 FC | 	wrlong	result3, fp
17128     08 CE 85 F1 | 	sub	fp, #8
1712c     E7 92 02 F6 | 	mov	arg01, fp
17130     18 67 BF FD | 	call	#_converttoint
17134     58 7A 62 FD | 	drvl	result1
17138     E7 F0 03 F6 | 	mov	ptra, fp
1713c     F2 00 A0 FD | 	call	#popregs_
17140                 | _do_pinlo_ret
17140     2D 00 64 FD | 	ret
17144                 | 
17144                 | ' 
17144                 | ' '-------------------- pinread
17144                 | ' 
17144                 | ' sub do_pinread
17144                 | _do_pinread
17144     00 CA 05 F6 | 	mov	COUNT_, #0
17148     E8 00 A0 FD | 	call	#pushregs_
1714c     0C F0 07 F1 | 	add	ptra, #12
17150     1C 65 BF FD | 	call	#_pop
17154     E7 7A 62 FC | 	wrlong	result1, fp
17158     04 CE 05 F1 | 	add	fp, #4
1715c     E7 7C 62 FC | 	wrlong	result2, fp
17160     04 CE 05 F1 | 	add	fp, #4
17164     E7 7E 62 FC | 	wrlong	result3, fp
17168     08 CE 85 F1 | 	sub	fp, #8
1716c     E7 92 02 F6 | 	mov	arg01, fp
17170     D8 66 BF FD | 	call	#_converttoint
17174     3D 93 02 F6 | 	mov	arg01, result1
17178     20 92 CE F7 | 	test	arg01, #32 wz
1717c     FF 7B 02 56 |  if_ne	mov	result1, inb
17180     FE 7B 02 A6 |  if_e	mov	result1, ina
17184     49 7B 42 F0 | 	shr	result1, arg01
17188     06 92 46 F0 | 	shr	arg01, #6
1718c     49 7B 42 F7 | 	zerox	result1, arg01
17190     54 00 00 FF 
17194     EC 64 06 F1 | 	add	objptr, ##43244
17198     32 7B 62 FC | 	wrlong	result1, objptr
1719c     54 00 00 FF 
171a0     EC 64 86 F1 | 	sub	objptr, ##43244
171a4     08 CE 05 F1 | 	add	fp, #8
171a8     E7 3A 68 FC | 	wrlong	#29, fp
171ac     08 CE 85 F1 | 	sub	fp, #8
171b0     E7 08 68 FC | 	wrlong	#4, fp
171b4     E7 92 02 F6 | 	mov	arg01, fp
171b8     44 65 BF FD | 	call	#_push
171bc     E7 F0 03 F6 | 	mov	ptra, fp
171c0     F2 00 A0 FD | 	call	#popregs_
171c4                 | _do_pinread_ret
171c4     2D 00 64 FD | 	ret
171c8                 | 
171c8                 | ' 
171c8                 | ' '-------------------- pinstart
171c8                 | ' 
171c8                 | ' sub do_pinstart
171c8                 | _do_pinstart
171c8     03 CA 05 F6 | 	mov	COUNT_, #3
171cc     E8 00 A0 FD | 	call	#pushregs_
171d0     30 F0 07 F1 | 	add	ptra, #48
171d4     98 64 BF FD | 	call	#_pop
171d8     3D 97 02 F6 | 	mov	arg03, result1
171dc     3E 95 02 F6 | 	mov	arg02, result2
171e0     3F 99 02 F6 | 	mov	arg04, result3
171e4     E7 96 62 FC | 	wrlong	arg03, fp
171e8     04 CE 05 F1 | 	add	fp, #4
171ec     E7 94 62 FC | 	wrlong	arg02, fp
171f0     04 CE 05 F1 | 	add	fp, #4
171f4     E7 98 62 FC | 	wrlong	arg04, fp
171f8     08 CE 85 F1 | 	sub	fp, #8
171fc     70 64 BF FD | 	call	#_pop
17200     3D 97 02 F6 | 	mov	arg03, result1
17204     3E 95 02 F6 | 	mov	arg02, result2
17208     3F 99 02 F6 | 	mov	arg04, result3
1720c     0C CE 05 F1 | 	add	fp, #12
17210     E7 96 62 FC | 	wrlong	arg03, fp
17214     04 CE 05 F1 | 	add	fp, #4
17218     E7 94 62 FC | 	wrlong	arg02, fp
1721c     04 CE 05 F1 | 	add	fp, #4
17220     E7 98 62 FC | 	wrlong	arg04, fp
17224     14 CE 85 F1 | 	sub	fp, #20
17228     44 64 BF FD | 	call	#_pop
1722c     3D 97 02 F6 | 	mov	arg03, result1
17230     3E 95 02 F6 | 	mov	arg02, result2
17234     3F 99 02 F6 | 	mov	arg04, result3
17238     18 CE 05 F1 | 	add	fp, #24
1723c     E7 96 62 FC | 	wrlong	arg03, fp
17240     04 CE 05 F1 | 	add	fp, #4
17244     E7 94 62 FC | 	wrlong	arg02, fp
17248     04 CE 05 F1 | 	add	fp, #4
1724c     E7 98 62 FC | 	wrlong	arg04, fp
17250     20 CE 85 F1 | 	sub	fp, #32
17254     18 64 BF FD | 	call	#_pop
17258     3F 97 02 F6 | 	mov	arg03, result3
1725c     24 CE 05 F1 | 	add	fp, #36
17260     E7 7A 62 FC | 	wrlong	result1, fp
17264     04 CE 05 F1 | 	add	fp, #4
17268     E7 7C 62 FC | 	wrlong	result2, fp
1726c     04 CE 05 F1 | 	add	fp, #4
17270     E7 96 62 FC | 	wrlong	arg03, fp
17274     08 CE 85 F1 | 	sub	fp, #8
17278     E7 92 02 F6 | 	mov	arg01, fp
1727c     24 CE 85 F1 | 	sub	fp, #36
17280     C8 65 BF FD | 	call	#_converttoint
17284     3D A7 02 F6 | 	mov	local01, result1
17288     E7 92 02 F6 | 	mov	arg01, fp
1728c     18 92 06 F1 | 	add	arg01, #24
17290     B8 65 BF FD | 	call	#_converttoint
17294     3D A9 02 F6 | 	mov	local02, result1
17298     E7 92 02 F6 | 	mov	arg01, fp
1729c     0C 92 06 F1 | 	add	arg01, #12
172a0     A8 65 BF FD | 	call	#_converttoint
172a4     3D AB 02 F6 | 	mov	local03, result1
172a8     E7 92 02 F6 | 	mov	arg01, fp
172ac     9C 65 BF FD | 	call	#_converttoint
172b0     40 A6 62 FD | 	dirl	local01
172b4     53 A9 02 FC | 	wrpin	local02, local01
172b8     53 AB 12 FC | 	wxpin	local03, local01
172bc     53 7B 22 FC | 	wypin	result1, local01
172c0     41 A6 62 FD | 	dirh	local01
172c4     E7 F0 03 F6 | 	mov	ptra, fp
172c8     F2 00 A0 FD | 	call	#popregs_
172cc                 | _do_pinstart_ret
172cc     2D 00 64 FD | 	ret
172d0                 | 
172d0                 | ' 
172d0                 | ' '-------------------- pintoggle
172d0                 | ' 
172d0                 | ' sub do_pintoggle
172d0                 | _do_pintoggle
172d0     00 CA 05 F6 | 	mov	COUNT_, #0
172d4     E8 00 A0 FD | 	call	#pushregs_
172d8     0C F0 07 F1 | 	add	ptra, #12
172dc     90 63 BF FD | 	call	#_pop
172e0     E7 7A 62 FC | 	wrlong	result1, fp
172e4     04 CE 05 F1 | 	add	fp, #4
172e8     E7 7C 62 FC | 	wrlong	result2, fp
172ec     04 CE 05 F1 | 	add	fp, #4
172f0     E7 7E 62 FC | 	wrlong	result3, fp
172f4     08 CE 85 F1 | 	sub	fp, #8
172f8     E7 92 02 F6 | 	mov	arg01, fp
172fc     4C 65 BF FD | 	call	#_converttoint
17300     5F 7A 62 FD | 	drvnot	result1
17304     E7 F0 03 F6 | 	mov	ptra, fp
17308     F2 00 A0 FD | 	call	#popregs_
1730c                 | _do_pintoggle_ret
1730c     2D 00 64 FD | 	ret
17310                 | 
17310                 | ' 
17310                 | ' '-------------------- pinwrite
17310                 | ' 
17310                 | ' sub do_pinwrite
17310                 | _do_pinwrite
17310     01 CA 05 F6 | 	mov	COUNT_, #1
17314     E8 00 A0 FD | 	call	#pushregs_
17318     18 F0 07 F1 | 	add	ptra, #24
1731c     50 63 BF FD | 	call	#_pop
17320     3D 95 02 F6 | 	mov	arg02, result1
17324     3E 93 02 F6 | 	mov	arg01, result2
17328     3F A7 02 F6 | 	mov	local01, result3
1732c     E7 94 62 FC | 	wrlong	arg02, fp
17330     04 CE 05 F1 | 	add	fp, #4
17334     E7 92 62 FC | 	wrlong	arg01, fp
17338     04 CE 05 F1 | 	add	fp, #4
1733c     E7 A6 62 FC | 	wrlong	local01, fp
17340     08 CE 85 F1 | 	sub	fp, #8
17344     28 63 BF FD | 	call	#_pop
17348     3F A7 02 F6 | 	mov	local01, result3
1734c     0C CE 05 F1 | 	add	fp, #12
17350     E7 7A 62 FC | 	wrlong	result1, fp
17354     04 CE 05 F1 | 	add	fp, #4
17358     E7 7C 62 FC | 	wrlong	result2, fp
1735c     04 CE 05 F1 | 	add	fp, #4
17360     E7 A6 62 FC | 	wrlong	local01, fp
17364     08 CE 85 F1 | 	sub	fp, #8
17368     E7 92 02 F6 | 	mov	arg01, fp
1736c     0C CE 85 F1 | 	sub	fp, #12
17370     D8 64 BF FD | 	call	#_converttoint
17374     3D A7 02 F6 | 	mov	local01, result1
17378     E7 92 02 F6 | 	mov	arg01, fp
1737c     CC 64 BF FD | 	call	#_converttoint
17380     3D 95 02 F6 | 	mov	arg02, result1
17384     53 93 02 F6 | 	mov	arg01, local01
17388     24 D8 B0 FD | 	call	#__system___pinwrite
1738c     E7 F0 03 F6 | 	mov	ptra, fp
17390     F2 00 A0 FD | 	call	#popregs_
17394                 | _do_pinwrite_ret
17394     2D 00 64 FD | 	ret
17398                 | 
17398                 | ' 
17398                 | ' '-------------------- play
17398                 | ' 
17398                 | ' sub do_play
17398                 | _do_play
17398     10 CA 05 F6 | 	mov	COUNT_, #16
1739c     E8 00 A0 FD | 	call	#pushregs_
173a0     88 F0 07 F1 | 	add	ptra, #136
173a4     77 CC 21 FF 
173a8     BE A7 06 F6 | 	mov	local01, ##1134096318
173ac                 | ' speed_coeff=305.873
173ac                 | ' 
173ac                 | ' for i=0 to 9 : params(i)=-2.0 : next i
173ac     00 A8 06 F6 | 	mov	local02, #0
173b0     40 CE 05 F1 | 	add	fp, #64
173b4     D7 10 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
173b8                 | LR__1980
173b8     54 AB 02 F6 | 	mov	local03, local02
173bc     02 AA 66 F0 | 	shl	local03, #2
173c0     E7 AA 02 F1 | 	add	local03, fp
173c4     00 00 E0 FF 
173c8     55 01 68 FC | 	wrlong	##-1073741824, local03
173cc     01 A8 06 F1 | 	add	local02, #1
173d0     0A A8 56 F2 | 	cmps	local02, #10 wc
173d4     E0 FF 9F CD |  if_b	jmp	#LR__1980
173d8                 | LR__1981
173d8     40 CE 85 F1 | 	sub	fp, #64
173dc     4C 00 00 FF 
173e0     24 64 06 F1 | 	add	objptr, ##38948
173e4     32 A9 02 FB | 	rdlong	local02, objptr
173e8     54 AD 02 F6 | 	mov	local04, local02
173ec     01 AC 66 F0 | 	shl	local04, #1
173f0     54 AD 02 F1 | 	add	local04, local02
173f4     02 AC 66 F0 | 	shl	local04, #2
173f8     03 00 00 FF 
173fc     04 64 86 F1 | 	sub	objptr, ##1540
17400     32 AD 02 F1 | 	add	local04, objptr
17404     56 AF 02 FB | 	rdlong	local05, local04
17408                 | ' numpar=compiledline(lineptr_e).result.uresult
17408                 | ' for i=numpar to 1 step -1 
17408     57 A9 02 F6 | 	mov	local02, local05
1740c     49 00 00 FF 
17410     20 64 86 F1 | 	sub	objptr, ##37408
17414                 | LR__1982
17414     58 62 BF FD | 	call	#_pop
17418     68 CE 05 F1 | 	add	fp, #104
1741c     E7 7A 62 FC | 	wrlong	result1, fp
17420     04 CE 05 F1 | 	add	fp, #4
17424     E7 7C 62 FC | 	wrlong	result2, fp
17428     04 CE 05 F1 | 	add	fp, #4
1742c     E7 7E 62 FC | 	wrlong	result3, fp
17430     54 AB 02 F6 | 	mov	local03, local02
17434     01 AA 86 F1 | 	sub	local03, #1
17438     02 AA 66 F0 | 	shl	local03, #2
1743c     30 CE 85 F1 | 	sub	fp, #48
17440     E7 AA 02 F1 | 	add	local03, fp
17444     28 CE 05 F1 | 	add	fp, #40
17448     E7 B0 02 F6 | 	mov	local06, fp
1744c     58 93 02 F6 | 	mov	arg01, local06
17450     68 CE 85 F1 | 	sub	fp, #104
17454     B0 64 BF FD | 	call	#_converttofloat
17458     55 7B 62 FC | 	wrlong	result1, local03
1745c     01 A8 86 F1 | 	sub	local02, #1
17460     01 A8 56 F2 | 	cmps	local02, #1 wc
17464     AC FF 9F 3D |  if_ae	jmp	#LR__1982
17468                 | ' 
17468                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17468     40 CE 05 F1 | 	add	fp, #64
1746c     E7 92 02 FB | 	rdlong	arg01, fp
17470     40 CE 85 F1 | 	sub	fp, #64
17474     00 94 06 F6 | 	mov	arg02, #0
17478     01 96 06 F6 | 	mov	arg03, #1
1747c     80 00 B1 FD | 	call	#__system___float_cmp
17480     00 7A 56 F2 | 	cmps	result1, #0 wc
17484     00 B2 06 C6 |  if_b	mov	local07, #0
17488     20 00 90 CD |  if_b	jmp	#LR__1983
1748c     40 CE 05 F1 | 	add	fp, #64
17490     E7 92 02 FB | 	rdlong	arg01, fp
17494     40 CE 85 F1 | 	sub	fp, #64
17498     01 94 06 F6 | 	mov	arg02, #1
1749c     F4 00 B1 FD | 	call	#__system___float_tointeger
174a0     3D B3 52 F6 | 	abs	local07, result1 wc
174a4     07 B2 06 F5 | 	and	local07, #7
174a8     59 B3 82 F6 | 	negc	local07, local07
174ac                 | LR__1983
174ac                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
174ac     44 CE 05 F1 | 	add	fp, #68
174b0     E7 92 02 FB | 	rdlong	arg01, fp
174b4     44 CE 85 F1 | 	sub	fp, #68
174b8     00 94 06 F6 | 	mov	arg02, #0
174bc     01 96 06 F6 | 	mov	arg03, #1
174c0     3C 00 B1 FD | 	call	#__system___float_cmp
174c4     00 7A 56 F2 | 	cmps	result1, #0 wc
174c8     28 00 90 3D |  if_ae	jmp	#LR__1984
174cc     59 97 02 F6 | 	mov	arg03, local07
174d0     03 96 66 F0 | 	shl	arg03, #3
174d4     59 97 82 F1 | 	sub	arg03, local07
174d8     02 96 66 F0 | 	shl	arg03, #2
174dc     32 AD 02 F6 | 	mov	local04, objptr
174e0     16 00 00 FF 
174e4     BC AC 06 F1 | 	add	local04, ##11452
174e8     56 97 02 F1 | 	add	arg03, local04
174ec     4B B5 02 FB | 	rdlong	local08, arg03
174f0     30 00 90 FD | 	jmp	#LR__1985
174f4                 | LR__1984
174f4     44 CE 05 F1 | 	add	fp, #68
174f8     E7 B4 02 FB | 	rdlong	local08, fp
174fc     44 CE 85 F1 | 	sub	fp, #68
17500     59 97 02 F6 | 	mov	arg03, local07
17504     03 96 66 F0 | 	shl	arg03, #3
17508     59 97 82 F1 | 	sub	arg03, local07
1750c     02 96 66 F0 | 	shl	arg03, #2
17510     32 AD 02 F6 | 	mov	local04, objptr
17514     16 00 00 FF 
17518     BC AC 06 F1 | 	add	local04, ##11452
1751c     56 97 02 F1 | 	add	arg03, local04
17520     4B B5 62 FC | 	wrlong	local08, arg03
17524                 | LR__1985
17524                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17524     48 CE 05 F1 | 	add	fp, #72
17528     E7 92 02 FB | 	rdlong	arg01, fp
1752c     48 CE 85 F1 | 	sub	fp, #72
17530     00 94 06 F6 | 	mov	arg02, #0
17534     01 96 06 F6 | 	mov	arg03, #1
17538     C4 FF B0 FD | 	call	#__system___float_cmp
1753c     00 7A 56 F2 | 	cmps	result1, #0 wc
17540     24 00 90 CD |  if_b	jmp	#LR__1986
17544     48 CE 05 F1 | 	add	fp, #72
17548     E7 92 02 FB | 	rdlong	arg01, fp
1754c     48 CE 85 F1 | 	sub	fp, #72
17550     20 0E 23 FF 
17554     00 94 06 F6 | 	mov	arg02, ##1176256512
17558     01 96 66 F6 | 	neg	arg03, #1
1755c     A0 FF B0 FD | 	call	#__system___float_cmp
17560     01 7A 56 F2 | 	cmps	result1, #1 wc
17564     30 00 90 CD |  if_b	jmp	#LR__1987
17568                 | LR__1986
17568     59 AD 02 F6 | 	mov	local04, local07
1756c     03 AC 66 F0 | 	shl	local04, #3
17570     59 AD 82 F1 | 	sub	local04, local07
17574     02 AC 66 F0 | 	shl	local04, #2
17578     32 B1 02 F6 | 	mov	local06, objptr
1757c     16 00 00 FF 
17580     BC B0 06 F1 | 	add	local06, ##11452
17584     58 AD 02 F1 | 	add	local04, local06
17588     06 AC 06 F1 | 	add	local04, #6
1758c     56 B7 E2 FA | 	rdword	local09, local04
17590     5B B9 32 F9 | 	getword	local10, local09, #0
17594     40 00 90 FD | 	jmp	#LR__1988
17598                 | LR__1987
17598     48 CE 05 F1 | 	add	fp, #72
1759c     E7 92 02 FB | 	rdlong	arg01, fp
175a0     48 CE 85 F1 | 	sub	fp, #72
175a4     01 94 06 F6 | 	mov	arg02, #1
175a8     E8 FF B0 FD | 	call	#__system___float_tointeger
175ac     3D B9 02 F6 | 	mov	local10, result1
175b0     59 97 02 F6 | 	mov	arg03, local07
175b4     03 96 66 F0 | 	shl	arg03, #3
175b8     59 97 82 F1 | 	sub	arg03, local07
175bc     02 96 66 F0 | 	shl	arg03, #2
175c0     32 AD 02 F6 | 	mov	local04, objptr
175c4     16 00 00 FF 
175c8     BC AC 06 F1 | 	add	local04, ##11452
175cc     56 97 02 F1 | 	add	arg03, local04
175d0     06 96 06 F1 | 	add	arg03, #6
175d4     4B B9 52 FC | 	wrword	local10, arg03
175d8                 | LR__1988
175d8                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
175d8     4C CE 05 F1 | 	add	fp, #76
175dc     E7 92 02 FB | 	rdlong	arg01, fp
175e0     4C CE 85 F1 | 	sub	fp, #76
175e4     00 94 06 F6 | 	mov	arg02, #0
175e8     01 96 06 F6 | 	mov	arg03, #1
175ec     10 FF B0 FD | 	call	#__system___float_cmp
175f0     00 7A 56 F2 | 	cmps	result1, #0 wc
175f4     24 00 90 CD |  if_b	jmp	#LR__1989
175f8     4C CE 05 F1 | 	add	fp, #76
175fc     E7 92 02 FB | 	rdlong	arg01, fp
17600     4C CE 85 F1 | 	sub	fp, #76
17604     89 C1 20 FF 
17608     6F 94 06 F6 | 	mov	arg02, ##1099108975
1760c     01 96 66 F6 | 	neg	arg03, #1
17610     EC FE B0 FD | 	call	#__system___float_cmp
17614     01 7A 56 F2 | 	cmps	result1, #1 wc
17618     30 00 90 CD |  if_b	jmp	#LR__1990
1761c                 | LR__1989
1761c     59 B1 02 F6 | 	mov	local06, local07
17620     03 B0 66 F0 | 	shl	local06, #3
17624     59 B1 82 F1 | 	sub	local06, local07
17628     02 B0 66 F0 | 	shl	local06, #2
1762c     32 AD 02 F6 | 	mov	local04, objptr
17630     16 00 00 FF 
17634     BC AC 06 F1 | 	add	local04, ##11452
17638     56 B1 02 F1 | 	add	local06, local04
1763c     0C B0 06 F1 | 	add	local06, #12
17640     58 B1 02 FB | 	rdlong	local06, local06
17644     58 BB 02 F6 | 	mov	local11, local06
17648     34 00 90 FD | 	jmp	#LR__1991
1764c                 | LR__1990
1764c     4C CE 05 F1 | 	add	fp, #76
17650     E7 BA 02 FB | 	rdlong	local11, fp
17654     4C CE 85 F1 | 	sub	fp, #76
17658     59 97 02 F6 | 	mov	arg03, local07
1765c     03 96 66 F0 | 	shl	arg03, #3
17660     59 97 82 F1 | 	sub	arg03, local07
17664     02 96 66 F0 | 	shl	arg03, #2
17668     32 AD 02 F6 | 	mov	local04, objptr
1766c     16 00 00 FF 
17670     BC AC 06 F1 | 	add	local04, ##11452
17674     56 97 02 F1 | 	add	arg03, local04
17678     0C 96 06 F1 | 	add	arg03, #12
1767c     4B BB 62 FC | 	wrlong	local11, arg03
17680                 | LR__1991
17680                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17680     50 CE 05 F1 | 	add	fp, #80
17684     E7 92 02 FB | 	rdlong	arg01, fp
17688     50 CE 85 F1 | 	sub	fp, #80
1768c     00 94 06 F6 | 	mov	arg02, #0
17690     01 96 06 F6 | 	mov	arg03, #1
17694     68 FE B0 FD | 	call	#__system___float_cmp
17698     00 7A 56 F2 | 	cmps	result1, #0 wc
1769c     24 00 90 CD |  if_b	jmp	#LR__1992
176a0     50 CE 05 F1 | 	add	fp, #80
176a4     E7 92 02 FB | 	rdlong	arg01, fp
176a8     50 CE 85 F1 | 	sub	fp, #80
176ac     00 00 21 FF 
176b0     00 94 06 F6 | 	mov	arg02, ##1107296256
176b4     01 96 66 F6 | 	neg	arg03, #1
176b8     44 FE B0 FD | 	call	#__system___float_cmp
176bc     01 7A 56 F2 | 	cmps	result1, #1 wc
176c0     30 00 90 CD |  if_b	jmp	#LR__1993
176c4                 | LR__1992
176c4     59 AD 02 F6 | 	mov	local04, local07
176c8     03 AC 66 F0 | 	shl	local04, #3
176cc     59 AD 82 F1 | 	sub	local04, local07
176d0     02 AC 66 F0 | 	shl	local04, #2
176d4     32 B1 02 F6 | 	mov	local06, objptr
176d8     16 00 00 FF 
176dc     BC B0 06 F1 | 	add	local06, ##11452
176e0     58 AD 02 F1 | 	add	local04, local06
176e4     04 AC 06 F1 | 	add	local04, #4
176e8     56 B7 C2 FA | 	rdbyte	local09, local04
176ec     5B BD E2 F8 | 	getbyte	local12, local09, #0
176f0     40 00 90 FD | 	jmp	#LR__1994
176f4                 | LR__1993
176f4     50 CE 05 F1 | 	add	fp, #80
176f8     E7 92 02 FB | 	rdlong	arg01, fp
176fc     50 CE 85 F1 | 	sub	fp, #80
17700     01 94 06 F6 | 	mov	arg02, #1
17704     8C FE B0 FD | 	call	#__system___float_tointeger
17708     3D BD 02 F6 | 	mov	local12, result1
1770c     59 97 02 F6 | 	mov	arg03, local07
17710     03 96 66 F0 | 	shl	arg03, #3
17714     59 97 82 F1 | 	sub	arg03, local07
17718     02 96 66 F0 | 	shl	arg03, #2
1771c     32 AD 02 F6 | 	mov	local04, objptr
17720     16 00 00 FF 
17724     BC AC 06 F1 | 	add	local04, ##11452
17728     56 97 02 F1 | 	add	arg03, local04
1772c     04 96 06 F1 | 	add	arg03, #4
17730     4B BD 42 FC | 	wrbyte	local12, arg03
17734                 | LR__1994
17734                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17734     54 CE 05 F1 | 	add	fp, #84
17738     E7 92 02 FB | 	rdlong	arg01, fp
1773c     54 CE 85 F1 | 	sub	fp, #84
17740     00 94 06 F6 | 	mov	arg02, #0
17744     01 96 06 F6 | 	mov	arg03, #1
17748     B4 FD B0 FD | 	call	#__system___float_cmp
1774c     00 7A 56 F2 | 	cmps	result1, #0 wc
17750     24 00 90 CD |  if_b	jmp	#LR__1995
17754     54 CE 05 F1 | 	add	fp, #84
17758     E7 92 02 FB | 	rdlong	arg01, fp
1775c     54 CE 85 F1 | 	sub	fp, #84
17760     00 80 20 FF 
17764     00 94 06 F6 | 	mov	arg02, ##1090519040
17768     01 96 66 F6 | 	neg	arg03, #1
1776c     90 FD B0 FD | 	call	#__system___float_cmp
17770     01 7A 56 F2 | 	cmps	result1, #1 wc
17774     30 00 90 CD |  if_b	jmp	#LR__1996
17778                 | LR__1995
17778     59 AD 02 F6 | 	mov	local04, local07
1777c     03 AC 66 F0 | 	shl	local04, #3
17780     59 AD 82 F1 | 	sub	local04, local07
17784     02 AC 66 F0 | 	shl	local04, #2
17788     32 B1 02 F6 | 	mov	local06, objptr
1778c     16 00 00 FF 
17790     BC B0 06 F1 | 	add	local06, ##11452
17794     58 AD 02 F1 | 	add	local04, local06
17798     05 AC 06 F1 | 	add	local04, #5
1779c     56 B7 C2 FA | 	rdbyte	local09, local04
177a0     5B BF E2 F8 | 	getbyte	local13, local09, #0
177a4     40 00 90 FD | 	jmp	#LR__1997
177a8                 | LR__1996
177a8     54 CE 05 F1 | 	add	fp, #84
177ac     E7 92 02 FB | 	rdlong	arg01, fp
177b0     54 CE 85 F1 | 	sub	fp, #84
177b4     01 94 06 F6 | 	mov	arg02, #1
177b8     D8 FD B0 FD | 	call	#__system___float_tointeger
177bc     3D BF 02 F6 | 	mov	local13, result1
177c0     59 97 02 F6 | 	mov	arg03, local07
177c4     03 96 66 F0 | 	shl	arg03, #3
177c8     59 97 82 F1 | 	sub	arg03, local07
177cc     02 96 66 F0 | 	shl	arg03, #2
177d0     32 AD 02 F6 | 	mov	local04, objptr
177d4     16 00 00 FF 
177d8     BC AC 06 F1 | 	add	local04, ##11452
177dc     56 97 02 F1 | 	add	arg03, local04
177e0     05 96 06 F1 | 	add	arg03, #5
177e4     4B BF 42 FC | 	wrbyte	local13, arg03
177e8                 | LR__1997
177e8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
177e8     58 CE 05 F1 | 	add	fp, #88
177ec     E7 92 02 FB | 	rdlong	arg01, fp
177f0     58 CE 85 F1 | 	sub	fp, #88
177f4     00 94 06 F6 | 	mov	arg02, #0
177f8     01 96 06 F6 | 	mov	arg03, #1
177fc     00 FD B0 FD | 	call	#__system___float_cmp
17800     00 7A 56 F2 | 	cmps	result1, #0 wc
17804     24 00 90 CD |  if_b	jmp	#LR__1998
17808     58 CE 05 F1 | 	add	fp, #88
1780c     E7 92 02 FB | 	rdlong	arg01, fp
17810     58 CE 85 F1 | 	sub	fp, #88
17814     00 3D 22 FF 
17818     00 94 06 F6 | 	mov	arg02, ##1148846080
1781c     01 96 66 F6 | 	neg	arg03, #1
17820     DC FC B0 FD | 	call	#__system___float_cmp
17824     01 7A 56 F2 | 	cmps	result1, #1 wc
17828     2C 00 90 CD |  if_b	jmp	#LR__1999
1782c                 | LR__1998
1782c     59 B1 02 F6 | 	mov	local06, local07
17830     03 B0 66 F0 | 	shl	local06, #3
17834     59 B1 82 F1 | 	sub	local06, local07
17838     02 B0 66 F0 | 	shl	local06, #2
1783c     32 AD 02 F6 | 	mov	local04, objptr
17840     16 00 00 FF 
17844     BC AC 06 F1 | 	add	local04, ##11452
17848     56 B1 02 F1 | 	add	local06, local04
1784c     08 B0 06 F1 | 	add	local06, #8
17850     58 C1 02 FB | 	rdlong	local14, local06
17854     34 00 90 FD | 	jmp	#LR__2000
17858                 | LR__1999
17858     58 CE 05 F1 | 	add	fp, #88
1785c     E7 C0 02 FB | 	rdlong	local14, fp
17860     58 CE 85 F1 | 	sub	fp, #88
17864     59 B7 02 F6 | 	mov	local09, local07
17868     03 B6 66 F0 | 	shl	local09, #3
1786c     59 B7 82 F1 | 	sub	local09, local07
17870     02 B6 66 F0 | 	shl	local09, #2
17874     32 AD 02 F6 | 	mov	local04, objptr
17878     16 00 00 FF 
1787c     BC AC 06 F1 | 	add	local04, ##11452
17880     56 B7 02 F1 | 	add	local09, local04
17884     08 B6 06 F1 | 	add	local09, #8
17888     5B C1 62 FC | 	wrlong	local14, local09
1788c                 | LR__2000
1788c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
1788c     5C CE 05 F1 | 	add	fp, #92
17890     E7 92 02 FB | 	rdlong	arg01, fp
17894     5C CE 85 F1 | 	sub	fp, #92
17898     00 C0 5F FF 
1789c     00 94 06 F6 | 	mov	arg02, ##-1082130432
178a0     01 96 06 F6 | 	mov	arg03, #1
178a4     58 FC B0 FD | 	call	#__system___float_cmp
178a8     00 7A 56 F2 | 	cmps	result1, #0 wc
178ac     24 00 90 CD |  if_b	jmp	#LR__2001
178b0     5C CE 05 F1 | 	add	fp, #92
178b4     E7 92 02 FB | 	rdlong	arg01, fp
178b8     5C CE 85 F1 | 	sub	fp, #92
178bc     00 C0 1F FF 
178c0     00 94 06 F6 | 	mov	arg02, ##1065353216
178c4     01 96 66 F6 | 	neg	arg03, #1
178c8     34 FC B0 FD | 	call	#__system___float_cmp
178cc     01 7A 56 F2 | 	cmps	result1, #1 wc
178d0     2C 00 90 CD |  if_b	jmp	#LR__2002
178d4                 | LR__2001
178d4     59 B7 02 F6 | 	mov	local09, local07
178d8     03 B6 66 F0 | 	shl	local09, #3
178dc     59 B7 82 F1 | 	sub	local09, local07
178e0     02 B6 66 F0 | 	shl	local09, #2
178e4     32 AD 02 F6 | 	mov	local04, objptr
178e8     16 00 00 FF 
178ec     BC AC 06 F1 | 	add	local04, ##11452
178f0     56 B7 02 F1 | 	add	local09, local04
178f4     10 B6 06 F1 | 	add	local09, #16
178f8     5B C3 02 FB | 	rdlong	local15, local09
178fc     34 00 90 FD | 	jmp	#LR__2003
17900                 | LR__2002
17900     5C CE 05 F1 | 	add	fp, #92
17904     E7 C2 02 FB | 	rdlong	local15, fp
17908     5C CE 85 F1 | 	sub	fp, #92
1790c     59 B7 02 F6 | 	mov	local09, local07
17910     03 B6 66 F0 | 	shl	local09, #3
17914     59 B7 82 F1 | 	sub	local09, local07
17918     02 B6 66 F0 | 	shl	local09, #2
1791c     32 AD 02 F6 | 	mov	local04, objptr
17920     16 00 00 FF 
17924     BC AC 06 F1 | 	add	local04, ##11452
17928     56 B7 02 F1 | 	add	local09, local04
1792c     10 B6 06 F1 | 	add	local09, #16
17930     5B C3 62 FC | 	wrlong	local15, local09
17934                 | LR__2003
17934                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17934     60 CE 05 F1 | 	add	fp, #96
17938     E7 92 02 FB | 	rdlong	arg01, fp
1793c     60 CE 85 F1 | 	sub	fp, #96
17940     00 94 06 F6 | 	mov	arg02, #0
17944     01 96 06 F6 | 	mov	arg03, #1
17948     B4 FB B0 FD | 	call	#__system___float_cmp
1794c     00 7A 56 F2 | 	cmps	result1, #0 wc
17950     24 00 90 CD |  if_b	jmp	#LR__2004
17954     60 CE 05 F1 | 	add	fp, #96
17958     E7 92 02 FB | 	rdlong	arg01, fp
1795c     60 CE 85 F1 | 	sub	fp, #96
17960     80 BF 21 FF 
17964     00 94 06 F6 | 	mov	arg02, ##1132396544
17968     01 96 66 F6 | 	neg	arg03, #1
1796c     90 FB B0 FD | 	call	#__system___float_cmp
17970     01 7A 56 F2 | 	cmps	result1, #1 wc
17974     2C 00 90 CD |  if_b	jmp	#LR__2005
17978                 | LR__2004
17978     59 AD 02 F6 | 	mov	local04, local07
1797c     03 AC 66 F0 | 	shl	local04, #3
17980     59 AD 82 F1 | 	sub	local04, local07
17984     02 AC 66 F0 | 	shl	local04, #2
17988     32 B1 02 F6 | 	mov	local06, objptr
1798c     16 00 00 FF 
17990     BC B0 06 F1 | 	add	local06, ##11452
17994     58 AD 02 F1 | 	add	local04, local06
17998     14 AC 06 F1 | 	add	local04, #20
1799c     56 C5 E2 FA | 	rdword	local16, local04
179a0     40 00 90 FD | 	jmp	#LR__2006
179a4                 | LR__2005
179a4     60 CE 05 F1 | 	add	fp, #96
179a8     E7 92 02 FB | 	rdlong	arg01, fp
179ac     60 CE 85 F1 | 	sub	fp, #96
179b0     01 94 06 F6 | 	mov	arg02, #1
179b4     DC FB B0 FD | 	call	#__system___float_tointeger
179b8     3D C5 02 F6 | 	mov	local16, result1
179bc     59 B7 02 F6 | 	mov	local09, local07
179c0     03 B6 66 F0 | 	shl	local09, #3
179c4     59 B7 82 F1 | 	sub	local09, local07
179c8     02 B6 66 F0 | 	shl	local09, #2
179cc     32 AD 02 F6 | 	mov	local04, objptr
179d0     16 00 00 FF 
179d4     BC AC 06 F1 | 	add	local04, ##11452
179d8     56 B7 02 F1 | 	add	local09, local04
179dc     14 B6 06 F1 | 	add	local09, #20
179e0     5B C5 52 FC | 	wrword	local16, local09
179e4                 | LR__2006
179e4                 | ' if params(9)<0 orelse params(9)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
179e4     64 CE 05 F1 | 	add	fp, #100
179e8     E7 92 02 FB | 	rdlong	arg01, fp
179ec     64 CE 85 F1 | 	sub	fp, #100
179f0     00 94 06 F6 | 	mov	arg02, #0
179f4     01 96 06 F6 | 	mov	arg03, #1
179f8     04 FB B0 FD | 	call	#__system___float_cmp
179fc     00 7A 56 F2 | 	cmps	result1, #0 wc
17a00     60 00 90 CD |  if_b	jmp	#LR__2007
17a04     64 CE 05 F1 | 	add	fp, #100
17a08     E7 92 02 FB | 	rdlong	arg01, fp
17a0c     64 CE 85 F1 | 	sub	fp, #100
17a10     80 BF 21 FF 
17a14     00 94 06 F6 | 	mov	arg02, ##1132396544
17a18     01 96 66 F6 | 	neg	arg03, #1
17a1c     E0 FA B0 FD | 	call	#__system___float_cmp
17a20     01 7A 56 F2 | 	cmps	result1, #1 wc
17a24     3C 00 90 3D |  if_ae	jmp	#LR__2007
17a28     64 CE 05 F1 | 	add	fp, #100
17a2c     E7 92 02 FB | 	rdlong	arg01, fp
17a30     64 CE 85 F1 | 	sub	fp, #100
17a34     01 94 06 F6 | 	mov	arg02, #1
17a38     58 FB B0 FD | 	call	#__system___float_tointeger
17a3c     59 B7 02 F6 | 	mov	local09, local07
17a40     03 B6 66 F0 | 	shl	local09, #3
17a44     59 B7 82 F1 | 	sub	local09, local07
17a48     02 B6 66 F0 | 	shl	local09, #2
17a4c     32 AD 02 F6 | 	mov	local04, objptr
17a50     16 00 00 FF 
17a54     BC AC 06 F1 | 	add	local04, ##11452
17a58     56 B7 02 F1 | 	add	local09, local04
17a5c     16 B6 06 F1 | 	add	local09, #22
17a60     5B 7B 52 FC | 	wrword	result1, local09
17a64                 | LR__2007
17a64     5A 93 02 F6 | 	mov	arg01, local08
17a68     00 3D 22 FF 
17a6c     00 94 06 F6 | 	mov	arg02, ##1148846080
17a70     58 F6 B0 FD | 	call	#__system___float_mul
17a74     3D 93 02 F6 | 	mov	arg01, result1
17a78     01 94 06 F6 | 	mov	arg02, #1
17a7c     14 FB B0 FD | 	call	#__system___float_tointeger
17a80     3D B7 02 F6 | 	mov	local09, result1
17a84                 | ' 
17a84                 | ' ifreq=round(freq*1000)
17a84                 | ' if wave <32 then 
17a84     20 BC 56 F2 | 	cmps	local12, #32 wc
17a88     0B BC 66 C0 |  if_b	shl	local12, #11
17a8c     00 00 60 CF 
17a90     00 BC 06 C1 |  if_b	add	local12, ##-1073741824
17a94     00 00 64 3F 
17a98     00 BC 06 36 |  if_ae	mov	local12, ##-939524096
17a9c                 | ' if env=8 then env=0 else env=varptr(envbuf(env,0))
17a9c     08 BE 0E F2 | 	cmp	local13, #8 wz
17aa0     00 BE 06 A6 |  if_e	mov	local13, #0
17aa4     09 BE 66 50 |  if_ne	shl	local13, #9
17aa8     32 B1 02 56 |  if_ne	mov	local06, objptr
17aac     0E 00 00 5F 
17ab0     38 B0 06 51 |  if_ne	add	local06, ##7224
17ab4     58 BF 02 51 |  if_ne	add	local13, local06
17ab8     77 CC 21 FF 
17abc     BE 93 06 F6 | 	mov	arg01, ##1134096318
17ac0     60 95 02 F6 | 	mov	arg02, local14
17ac4     08 F8 B0 FD | 	call	#__system___float_div
17ac8     3D 93 02 F6 | 	mov	arg01, result1
17acc     01 94 06 F6 | 	mov	arg02, #1
17ad0     C0 FA B0 FD | 	call	#__system___float_tointeger
17ad4     00 00 23 FF 
17ad8     00 92 06 F6 | 	mov	arg01, ##1174405120
17adc     61 95 02 F6 | 	mov	arg02, local15
17ae0     E8 F5 B0 FD | 	call	#__system___float_mul
17ae4     3D 93 02 F6 | 	mov	arg01, result1
17ae8     01 94 06 F6 | 	mov	arg02, #1
17aec     A4 FA B0 FD | 	call	#__system___float_tointeger
17af0     0D C2 C6 F9 | 	decod	local15, #13
17af4     3D C3 02 F1 | 	add	local15, result1
17af8     00 3D 22 FF 
17afc     00 92 06 F6 | 	mov	arg01, ##1148846080
17b00     5D 95 02 F6 | 	mov	arg02, local11
17b04     C4 F5 B0 FD | 	call	#__system___float_mul
17b08     3D 93 02 F6 | 	mov	arg01, result1
17b0c     01 94 06 F6 | 	mov	arg02, #1
17b10     80 FA B0 FD | 	call	#__system___float_tointeger
17b14     3D AD 02 F6 | 	mov	local04, result1
17b18     60 93 02 F6 | 	mov	arg01, local14
17b1c     01 94 06 F6 | 	mov	arg02, #1
17b20     70 FA B0 FD | 	call	#__system___float_tointeger
17b24     3D 9F 02 F6 | 	mov	arg07, result1
17b28     59 93 02 F6 | 	mov	arg01, local07
17b2c     5B 95 02 F6 | 	mov	arg02, local09
17b30     5C 97 02 F6 | 	mov	arg03, local10
17b34     56 99 02 F6 | 	mov	arg04, local04
17b38     5E 9B 02 F6 | 	mov	arg05, local12
17b3c     5F 9D 02 F6 | 	mov	arg06, local13
17b40     61 A1 02 F6 | 	mov	arg08, local15
17b44     62 A3 02 F6 | 	mov	arg09, local16
17b48     0B 00 00 FF 
17b4c     CC 64 06 F1 | 	add	objptr, ##5836
17b50     60 C7 B0 FD | 	call	#_Audio2_004_spin2_play
17b54     0B 00 00 FF 
17b58     CC 64 86 F1 | 	sub	objptr, ##5836
17b5c                 | ' speed=round(speed_coeff/slen)
17b5c                 | ' ipan=8192+round(8192*pan)
17b5c                 | ' ivol=round(1000.0*vol)
17b5c                 | ' 
17b5c                 | ' audio.play(channel,ifreq,delay,ivol,wave,env,round(slen),ipan,sus)
17b5c                 | ' 
17b5c                 | ' if delay>0 then waitms(delay) 
17b5c     01 B8 56 F2 | 	cmps	local10, #1 wc
17b60     5C 93 02 36 |  if_ae	mov	arg01, local10
17b64     88 D1 B0 3D |  if_ae	call	#__system___waitms
17b68     E7 F0 03 F6 | 	mov	ptra, fp
17b6c     F2 00 A0 FD | 	call	#popregs_
17b70                 | _do_play_ret
17b70     2D 00 64 FD | 	ret
17b74                 | 
17b74                 | ' 
17b74                 | ' '-------------------- plot
17b74                 | ' 
17b74                 | ' sub do_plot
17b74                 | _do_plot
17b74     01 CA 05 F6 | 	mov	COUNT_, #1
17b78     E8 00 A0 FD | 	call	#pushregs_
17b7c     20 F0 07 F1 | 	add	ptra, #32
17b80     EC 5A BF FD | 	call	#_pop
17b84     3D 97 02 F6 | 	mov	arg03, result1
17b88     3E 95 02 F6 | 	mov	arg02, result2
17b8c     3F 93 02 F6 | 	mov	arg01, result3
17b90     0C CE 05 F1 | 	add	fp, #12
17b94     E7 96 62 FC | 	wrlong	arg03, fp
17b98     04 CE 05 F1 | 	add	fp, #4
17b9c     E7 94 62 FC | 	wrlong	arg02, fp
17ba0     04 CE 05 F1 | 	add	fp, #4
17ba4     E7 92 62 FC | 	wrlong	arg01, fp
17ba8     14 CE 85 F1 | 	sub	fp, #20
17bac     C0 5A BF FD | 	call	#_pop
17bb0     3F 97 02 F6 | 	mov	arg03, result3
17bb4     E7 7A 62 FC | 	wrlong	result1, fp
17bb8     04 CE 05 F1 | 	add	fp, #4
17bbc     E7 7C 62 FC | 	wrlong	result2, fp
17bc0     04 CE 05 F1 | 	add	fp, #4
17bc4     E7 96 62 FC | 	wrlong	arg03, fp
17bc8     08 CE 85 F1 | 	sub	fp, #8
17bcc     E7 92 02 F6 | 	mov	arg01, fp
17bd0     78 5C BF FD | 	call	#_converttoint
17bd4     3D A7 02 F6 | 	mov	local01, result1
17bd8     E7 92 02 F6 | 	mov	arg01, fp
17bdc     0C 92 06 F1 | 	add	arg01, #12
17be0     68 5C BF FD | 	call	#_converttoint
17be4     3D 95 02 F6 | 	mov	arg02, result1
17be8     38 00 00 FF 
17bec     D0 65 06 F1 | 	add	objptr, ##29136
17bf0     32 A7 62 FC | 	wrlong	local01, objptr
17bf4     04 64 06 F1 | 	add	objptr, #4
17bf8     32 95 62 FC | 	wrlong	arg02, objptr
17bfc     04 64 86 F1 | 	sub	objptr, #4
17c00     32 93 02 FB | 	rdlong	arg01, objptr
17c04     04 64 86 F1 | 	sub	objptr, #4
17c08     32 97 02 FB | 	rdlong	arg03, objptr
17c0c     38 00 00 FF 
17c10     CC 65 86 F1 | 	sub	objptr, ##29132
17c14     74 A1 B0 FD | 	call	#_hg010b_spin2_putpixel
17c18     E7 F0 03 F6 | 	mov	ptra, fp
17c1c     F2 00 A0 FD | 	call	#popregs_
17c20                 | _do_plot_ret
17c20     2D 00 64 FD | 	ret
17c24                 | 
17c24                 | ' 
17c24                 | ' '-------------------- poke
17c24                 | ' 
17c24                 | ' sub do_poke
17c24                 | _do_poke
17c24     02 CA 05 F6 | 	mov	COUNT_, #2
17c28     E8 00 A0 FD | 	call	#pushregs_
17c2c     20 F0 07 F1 | 	add	ptra, #32
17c30     3C 5A BF FD | 	call	#_pop
17c34     3D 95 02 F6 | 	mov	arg02, result1
17c38     3E 93 02 F6 | 	mov	arg01, result2
17c3c     3F A7 02 F6 | 	mov	local01, result3
17c40     E7 94 62 FC | 	wrlong	arg02, fp
17c44     04 CE 05 F1 | 	add	fp, #4
17c48     E7 92 62 FC | 	wrlong	arg01, fp
17c4c     04 CE 05 F1 | 	add	fp, #4
17c50     E7 A6 62 FC | 	wrlong	local01, fp
17c54     08 CE 85 F1 | 	sub	fp, #8
17c58     14 5A BF FD | 	call	#_pop
17c5c     3F A7 02 F6 | 	mov	local01, result3
17c60     0C CE 05 F1 | 	add	fp, #12
17c64     E7 7A 62 FC | 	wrlong	result1, fp
17c68     04 CE 05 F1 | 	add	fp, #4
17c6c     E7 7C 62 FC | 	wrlong	result2, fp
17c70     04 CE 05 F1 | 	add	fp, #4
17c74     E7 A6 62 FC | 	wrlong	local01, fp
17c78     08 CE 85 F1 | 	sub	fp, #8
17c7c     E7 92 02 F6 | 	mov	arg01, fp
17c80     0C CE 85 F1 | 	sub	fp, #12
17c84     C4 5B BF FD | 	call	#_converttoint
17c88     3D A7 02 F6 | 	mov	local01, result1
17c8c     E7 92 02 F6 | 	mov	arg01, fp
17c90     B8 5B BF FD | 	call	#_converttoint
17c94     3D A9 02 F6 | 	mov	local02, result1
17c98                 | ' t1=pop() 'value
17c98                 | ' t2=pop() 
17c98                 | ' a=converttoint(t2) : v=converttoint(t1)
17c98                 | ' if a<$80000 then poke a,v else pspoke a,v
17c98     00 04 00 FF 
17c9c     00 A6 16 F2 | 	cmp	local01, ##524288 wc
17ca0     53 A9 42 CC |  if_b	wrbyte	local02, local01
17ca4     53 93 02 36 |  if_ae	mov	arg01, local01
17ca8     54 95 02 36 |  if_ae	mov	arg02, local02
17cac     50 92 B0 3D |  if_ae	call	#_pspoke
17cb0     E7 F0 03 F6 | 	mov	ptra, fp
17cb4     F2 00 A0 FD | 	call	#popregs_
17cb8                 | _do_poke_ret
17cb8     2D 00 64 FD | 	ret
17cbc                 | 
17cbc                 | ' 
17cbc                 | ' '-------------------- pop
17cbc                 | ' 
17cbc                 | ' sub do_pop()
17cbc                 | _do_pop
17cbc                 | ' if gosubtop>0 then  gosubtop -=1 
17cbc     52 00 00 FF 
17cc0     D8 64 06 F1 | 	add	objptr, ##42200
17cc4     32 81 02 FB | 	rdlong	_var01, objptr
17cc8     52 00 00 FF 
17ccc     D8 64 86 F1 | 	sub	objptr, ##42200
17cd0     01 80 56 F2 | 	cmps	_var01, #1 wc
17cd4     52 00 00 3F 
17cd8     D8 64 06 31 |  if_ae	add	objptr, ##42200
17cdc     32 81 02 3B |  if_ae	rdlong	_var01, objptr
17ce0     01 80 86 31 |  if_ae	sub	_var01, #1
17ce4     32 81 62 3C |  if_ae	wrlong	_var01, objptr
17ce8     52 00 00 3F 
17cec     D8 64 86 31 |  if_ae	sub	objptr, ##42200
17cf0                 | _do_pop_ret
17cf0     2D 00 64 FD | 	ret
17cf4                 | 
17cf4                 | ' 
17cf4                 | ' '-------------------- position
17cf4                 | ' 
17cf4                 | ' sub do_position
17cf4                 | _do_position
17cf4     01 CA 05 F6 | 	mov	COUNT_, #1
17cf8     E8 00 A0 FD | 	call	#pushregs_
17cfc     18 F0 07 F1 | 	add	ptra, #24
17d00     6C 59 BF FD | 	call	#_pop
17d04     3D 95 02 F6 | 	mov	arg02, result1
17d08     3E 93 02 F6 | 	mov	arg01, result2
17d0c     3F A7 02 F6 | 	mov	local01, result3
17d10     E7 94 62 FC | 	wrlong	arg02, fp
17d14     04 CE 05 F1 | 	add	fp, #4
17d18     E7 92 62 FC | 	wrlong	arg01, fp
17d1c     04 CE 05 F1 | 	add	fp, #4
17d20     E7 A6 62 FC | 	wrlong	local01, fp
17d24     08 CE 85 F1 | 	sub	fp, #8
17d28     44 59 BF FD | 	call	#_pop
17d2c     3F A7 02 F6 | 	mov	local01, result3
17d30     0C CE 05 F1 | 	add	fp, #12
17d34     E7 7A 62 FC | 	wrlong	result1, fp
17d38     04 CE 05 F1 | 	add	fp, #4
17d3c     E7 7C 62 FC | 	wrlong	result2, fp
17d40     04 CE 05 F1 | 	add	fp, #4
17d44     E7 A6 62 FC | 	wrlong	local01, fp
17d48     08 CE 85 F1 | 	sub	fp, #8
17d4c     E7 92 02 F6 | 	mov	arg01, fp
17d50     0C CE 85 F1 | 	sub	fp, #12
17d54     F4 5A BF FD | 	call	#_converttoint
17d58     3D A7 02 F6 | 	mov	local01, result1
17d5c     E7 92 02 F6 | 	mov	arg01, fp
17d60     E8 5A BF FD | 	call	#_converttoint
17d64     3D 95 02 F6 | 	mov	arg02, result1
17d68     53 93 02 F6 | 	mov	arg01, local01
17d6c     1C AC B0 FD | 	call	#_hg010b_spin2_setcursorpos
17d70     E7 F0 03 F6 | 	mov	ptra, fp
17d74     F2 00 A0 FD | 	call	#popregs_
17d78                 | _do_position_ret
17d78     2D 00 64 FD | 	ret
17d7c                 | 
17d7c                 | ' 
17d7c                 | ' '-------------------- print
17d7c                 | ' 
17d7c                 | ' sub do_print  
17d7c                 | _do_print
17d7c     0B CA 05 F6 | 	mov	COUNT_, #11
17d80     E8 00 A0 FD | 	call	#pushregs_
17d84     00 AC 06 F6 | 	mov	local04, #0
17d88     E4 58 BF FD | 	call	#_pop
17d8c     3D AF 02 F6 | 	mov	local05, result1
17d90     3E B1 02 F6 | 	mov	local06, result2
17d94     3F B3 02 F6 | 	mov	local07, result3
17d98     57 A7 02 F6 | 	mov	local01, local05
17d9c     58 A9 02 F6 | 	mov	local02, local06
17da0     59 AB 02 F6 | 	mov	local03, local07
17da4                 | '  
17da4                 | ' r=0
17da4                 | ' t1=pop() 
17da4                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
17da4     21 AA 0E F2 | 	cmp	local03, #33 wz
17da8     22 AA 0E 52 |  if_ne	cmp	local03, #34 wz
17dac     20 00 90 5D |  if_ne	jmp	#LR__2010
17db0     55 AD 02 F6 | 	mov	local04, local03
17db4     B8 58 BF FD | 	call	#_pop
17db8     3D AF 02 F6 | 	mov	local05, result1
17dbc     3E B1 02 F6 | 	mov	local06, result2
17dc0     3F B3 02 F6 | 	mov	local07, result3
17dc4     57 A7 02 F6 | 	mov	local01, local05
17dc8     58 A9 02 F6 | 	mov	local02, local06
17dcc     59 AB 02 F6 | 	mov	local03, local07
17dd0                 | LR__2010
17dd0                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17dd0     20 AA 0E F2 | 	cmp	local03, #32 wz
17dd4     55 AD 02 A6 |  if_e	mov	local04, local03
17dd8                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17dd8     FF AA 0E F2 | 	cmp	local03, #255 wz
17ddc     10 00 90 5D |  if_ne	jmp	#LR__2011
17de0     53 93 02 F6 | 	mov	arg01, local01
17de4     00 94 06 F6 | 	mov	arg02, #0
17de8     E8 8E B0 FD | 	call	#_printerror
17dec     D4 04 90 FD | 	jmp	#LR__2030
17df0                 | LR__2011
17df0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17df0     2B AA 0E F2 | 	cmp	local03, #43 wz
17df4     14 00 90 5D |  if_ne	jmp	#LR__2012
17df8     53 93 02 F6 | 	mov	arg01, local01
17dfc     E0 59 BF FD | 	call	#_convertstring
17e00     3D AF 02 F6 | 	mov	local05, result1
17e04     57 A7 02 F6 | 	mov	local01, local05
17e08     1F AA 06 F6 | 	mov	local03, #31
17e0c                 | LR__2012
17e0c                 | ' 
17e0c                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17e0c     2C AA 0E F2 | 	cmp	local03, #44 wz
17e10     80 00 90 5D |  if_ne	jmp	#LR__2013
17e14     00 92 06 F6 | 	mov	arg01, #0
17e18     64 21 B1 FD | 	call	#__system___getiolock_0622
17e1c     3D 93 02 F6 | 	mov	arg01, result1
17e20     D8 CB B0 FD | 	call	#__system___lockmem
17e24     98 01 00 FF 
17e28     DC 94 06 F6 | 	mov	arg02, ##@LR__6064
17e2c     00 92 06 F6 | 	mov	arg01, #0
17e30     00 96 06 F6 | 	mov	arg03, #0
17e34     B8 D8 B0 FD | 	call	#__system___basic_print_string
17e38     0A B4 06 F6 | 	mov	local08, #10
17e3c     00 92 06 F6 | 	mov	arg01, #0
17e40     53 95 02 F6 | 	mov	arg02, local01
17e44     00 96 06 F6 | 	mov	arg03, #0
17e48     0A 98 06 F6 | 	mov	arg04, #10
17e4c     E4 D8 B0 FD | 	call	#__system___basic_print_integer
17e50     3D B7 02 F6 | 	mov	local09, result1
17e54     00 92 06 F6 | 	mov	arg01, #0
17e58     0A 94 06 F6 | 	mov	arg02, #10
17e5c     00 96 06 F6 | 	mov	arg03, #0
17e60     34 D8 B0 FD | 	call	#__system___basic_print_char
17e64     01 B8 06 F6 | 	mov	local10, #1
17e68     00 92 06 F6 | 	mov	arg01, #0
17e6c     10 21 B1 FD | 	call	#__system___getiolock_0622
17e70     3D 01 68 FC | 	wrlong	#0, result1
17e74     00 BA 06 F6 | 	mov	local11, #0
17e78     F4 57 BF FD | 	call	#_pop
17e7c     3D AF 02 F6 | 	mov	local05, result1
17e80     3E B1 02 F6 | 	mov	local06, result2
17e84     3F B3 02 F6 | 	mov	local07, result3
17e88     57 A7 02 F6 | 	mov	local01, local05
17e8c     58 A9 02 F6 | 	mov	local02, local06
17e90     59 AB 02 F6 | 	mov	local03, local07
17e94                 | LR__2013
17e94                 | ' 
17e94                 | ' if r=print_mod_comma  then
17e94     21 AC 0E F2 | 	cmp	local04, #33 wz
17e98     AC 01 90 5D |  if_ne	jmp	#LR__2018
17e9c                 | '   if t1.result_type=result_int then print t1.result.iresult,
17e9c     1C AA 0E F2 | 	cmp	local03, #28 wz
17ea0     64 00 90 5D |  if_ne	jmp	#LR__2014
17ea4     00 92 06 F6 | 	mov	arg01, #0
17ea8     D4 20 B1 FD | 	call	#__system___getiolock_0622
17eac     3D 93 02 F6 | 	mov	arg01, result1
17eb0     48 CB B0 FD | 	call	#__system___lockmem
17eb4     00 B0 06 F6 | 	mov	local06, #0
17eb8     00 92 06 F6 | 	mov	arg01, #0
17ebc     53 95 02 F6 | 	mov	arg02, local01
17ec0     00 96 06 F6 | 	mov	arg03, #0
17ec4     0A 98 06 F6 | 	mov	arg04, #10
17ec8     68 D8 B0 FD | 	call	#__system___basic_print_integer
17ecc     3D B3 02 F6 | 	mov	local07, result1
17ed0     58 AF 02 F6 | 	mov	local05, local06
17ed4     59 AF 02 F1 | 	add	local05, local07
17ed8     00 BA 06 F6 | 	mov	local11, #0
17edc     00 92 06 F6 | 	mov	arg01, #0
17ee0     09 94 06 F6 | 	mov	arg02, #9
17ee4     00 96 06 F6 | 	mov	arg03, #0
17ee8     AC D7 B0 FD | 	call	#__system___basic_print_char
17eec     3D B7 02 F6 | 	mov	local09, result1
17ef0     3D AF 02 F1 | 	add	local05, result1
17ef4     00 92 06 F6 | 	mov	arg01, #0
17ef8     84 20 B1 FD | 	call	#__system___getiolock_0622
17efc     3D 01 68 FC | 	wrlong	#0, result1
17f00     00 7A 06 F6 | 	mov	result1, #0
17f04     00 B8 06 F6 | 	mov	local10, #0
17f08                 | LR__2014
17f08                 | '   if t1.result_type=result_uint then print t1.result.uresult,
17f08     1D AA 0E F2 | 	cmp	local03, #29 wz
17f0c     64 00 90 5D |  if_ne	jmp	#LR__2015
17f10     00 92 06 F6 | 	mov	arg01, #0
17f14     68 20 B1 FD | 	call	#__system___getiolock_0622
17f18     3D 93 02 F6 | 	mov	arg01, result1
17f1c     DC CA B0 FD | 	call	#__system___lockmem
17f20     00 B0 06 F6 | 	mov	local06, #0
17f24     00 92 06 F6 | 	mov	arg01, #0
17f28     53 95 02 F6 | 	mov	arg02, local01
17f2c     00 96 06 F6 | 	mov	arg03, #0
17f30     0A 98 06 F6 | 	mov	arg04, #10
17f34     3C D8 B0 FD | 	call	#__system___basic_print_unsigned
17f38     3D B3 02 F6 | 	mov	local07, result1
17f3c     58 AF 02 F6 | 	mov	local05, local06
17f40     59 AF 02 F1 | 	add	local05, local07
17f44     00 BA 06 F6 | 	mov	local11, #0
17f48     00 92 06 F6 | 	mov	arg01, #0
17f4c     09 94 06 F6 | 	mov	arg02, #9
17f50     00 96 06 F6 | 	mov	arg03, #0
17f54     40 D7 B0 FD | 	call	#__system___basic_print_char
17f58     3D B7 02 F6 | 	mov	local09, result1
17f5c     3D AF 02 F1 | 	add	local05, result1
17f60     00 92 06 F6 | 	mov	arg01, #0
17f64     18 20 B1 FD | 	call	#__system___getiolock_0622
17f68     3D 01 68 FC | 	wrlong	#0, result1
17f6c     00 7A 06 F6 | 	mov	result1, #0
17f70     00 B8 06 F6 | 	mov	local10, #0
17f74                 | LR__2015
17f74                 | '   if t1.result_type=result_float then print t1.result.fresult,
17f74     1E AA 0E F2 | 	cmp	local03, #30 wz
17f78     64 00 90 5D |  if_ne	jmp	#LR__2016
17f7c     00 92 06 F6 | 	mov	arg01, #0
17f80     FC 1F B1 FD | 	call	#__system___getiolock_0622
17f84     3D 93 02 F6 | 	mov	arg01, result1
17f88     70 CA B0 FD | 	call	#__system___lockmem
17f8c     00 B0 06 F6 | 	mov	local06, #0
17f90     00 92 06 F6 | 	mov	arg01, #0
17f94     53 95 02 F6 | 	mov	arg02, local01
17f98     00 96 06 F6 | 	mov	arg03, #0
17f9c     23 98 06 F6 | 	mov	arg04, #35
17fa0     4C F7 B0 FD | 	call	#__system___basic_print_float
17fa4     3D B3 02 F6 | 	mov	local07, result1
17fa8     58 AF 02 F6 | 	mov	local05, local06
17fac     59 AF 02 F1 | 	add	local05, local07
17fb0     00 BA 06 F6 | 	mov	local11, #0
17fb4     00 92 06 F6 | 	mov	arg01, #0
17fb8     09 94 06 F6 | 	mov	arg02, #9
17fbc     00 96 06 F6 | 	mov	arg03, #0
17fc0     D4 D6 B0 FD | 	call	#__system___basic_print_char
17fc4     3D B7 02 F6 | 	mov	local09, result1
17fc8     3D AF 02 F1 | 	add	local05, result1
17fcc     00 92 06 F6 | 	mov	arg01, #0
17fd0     AC 1F B1 FD | 	call	#__system___getiolock_0622
17fd4     3D 01 68 FC | 	wrlong	#0, result1
17fd8     00 7A 06 F6 | 	mov	result1, #0
17fdc     00 B8 06 F6 | 	mov	local10, #0
17fe0                 | LR__2016
17fe0                 | '   if t1.result_type=result_string then print t1.result.sresult,
17fe0     1F AA 0E F2 | 	cmp	local03, #31 wz
17fe4     60 00 90 5D |  if_ne	jmp	#LR__2017
17fe8     00 92 06 F6 | 	mov	arg01, #0
17fec     90 1F B1 FD | 	call	#__system___getiolock_0622
17ff0     3D 93 02 F6 | 	mov	arg01, result1
17ff4     04 CA B0 FD | 	call	#__system___lockmem
17ff8     00 B0 06 F6 | 	mov	local06, #0
17ffc     00 92 06 F6 | 	mov	arg01, #0
18000     53 95 02 F6 | 	mov	arg02, local01
18004     00 96 06 F6 | 	mov	arg03, #0
18008     E4 D6 B0 FD | 	call	#__system___basic_print_string
1800c     3D B3 02 F6 | 	mov	local07, result1
18010     58 AF 02 F6 | 	mov	local05, local06
18014     59 AF 02 F1 | 	add	local05, local07
18018     00 BA 06 F6 | 	mov	local11, #0
1801c     00 92 06 F6 | 	mov	arg01, #0
18020     09 94 06 F6 | 	mov	arg02, #9
18024     00 96 06 F6 | 	mov	arg03, #0
18028     6C D6 B0 FD | 	call	#__system___basic_print_char
1802c     3D B7 02 F6 | 	mov	local09, result1
18030     3D AF 02 F1 | 	add	local05, result1
18034     00 92 06 F6 | 	mov	arg01, #0
18038     44 1F B1 FD | 	call	#__system___getiolock_0622
1803c     3D 01 68 FC | 	wrlong	#0, result1
18040     00 7A 06 F6 | 	mov	result1, #0
18044     00 B8 06 F6 | 	mov	local10, #0
18048                 | LR__2017
18048                 | LR__2018
18048                 | ' if r=print_mod_semicolon then 
18048     22 AC 0E F2 | 	cmp	local04, #34 wz
1804c     1C 01 90 5D |  if_ne	jmp	#LR__2023
18050                 | '   if t1.result_type=result_int then print t1.result.iresult;
18050     1C AA 0E F2 | 	cmp	local03, #28 wz
18054     50 00 90 5D |  if_ne	jmp	#LR__2019
18058     00 92 06 F6 | 	mov	arg01, #0
1805c     20 1F B1 FD | 	call	#__system___getiolock_0622
18060     3D 93 02 F6 | 	mov	arg01, result1
18064     94 C9 B0 FD | 	call	#__system___lockmem
18068     00 B0 06 F6 | 	mov	local06, #0
1806c     00 B8 06 F6 | 	mov	local10, #0
18070     0A BA 06 F6 | 	mov	local11, #10
18074     00 92 06 F6 | 	mov	arg01, #0
18078     53 95 02 F6 | 	mov	arg02, local01
1807c     00 96 06 F6 | 	mov	arg03, #0
18080     0A 98 06 F6 | 	mov	arg04, #10
18084     AC D6 B0 FD | 	call	#__system___basic_print_integer
18088     3D B3 02 F6 | 	mov	local07, result1
1808c     58 AF 02 F6 | 	mov	local05, local06
18090     59 AF 02 F1 | 	add	local05, local07
18094     00 92 06 F6 | 	mov	arg01, #0
18098     E4 1E B1 FD | 	call	#__system___getiolock_0622
1809c     3D 01 68 FC | 	wrlong	#0, result1
180a0     00 7A 06 F6 | 	mov	result1, #0
180a4     00 B6 06 F6 | 	mov	local09, #0
180a8                 | LR__2019
180a8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
180a8     1D AA 0E F2 | 	cmp	local03, #29 wz
180ac     50 00 90 5D |  if_ne	jmp	#LR__2020
180b0     00 92 06 F6 | 	mov	arg01, #0
180b4     C8 1E B1 FD | 	call	#__system___getiolock_0622
180b8     3D 93 02 F6 | 	mov	arg01, result1
180bc     3C C9 B0 FD | 	call	#__system___lockmem
180c0     00 B0 06 F6 | 	mov	local06, #0
180c4     00 B8 06 F6 | 	mov	local10, #0
180c8     0A BA 06 F6 | 	mov	local11, #10
180cc     00 92 06 F6 | 	mov	arg01, #0
180d0     53 95 02 F6 | 	mov	arg02, local01
180d4     00 96 06 F6 | 	mov	arg03, #0
180d8     0A 98 06 F6 | 	mov	arg04, #10
180dc     94 D6 B0 FD | 	call	#__system___basic_print_unsigned
180e0     3D B3 02 F6 | 	mov	local07, result1
180e4     58 AF 02 F6 | 	mov	local05, local06
180e8     59 AF 02 F1 | 	add	local05, local07
180ec     00 92 06 F6 | 	mov	arg01, #0
180f0     8C 1E B1 FD | 	call	#__system___getiolock_0622
180f4     3D 01 68 FC | 	wrlong	#0, result1
180f8     00 7A 06 F6 | 	mov	result1, #0
180fc     00 B6 06 F6 | 	mov	local09, #0
18100                 | LR__2020
18100                 | '   if t1.result_type=result_float then print t1.result.fresult;
18100     1E AA 0E F2 | 	cmp	local03, #30 wz
18104     30 00 90 5D |  if_ne	jmp	#LR__2021
18108     00 92 06 F6 | 	mov	arg01, #0
1810c     70 1E B1 FD | 	call	#__system___getiolock_0622
18110     3D 93 02 F6 | 	mov	arg01, result1
18114     E4 C8 B0 FD | 	call	#__system___lockmem
18118     00 92 06 F6 | 	mov	arg01, #0
1811c     53 95 02 F6 | 	mov	arg02, local01
18120     00 96 06 F6 | 	mov	arg03, #0
18124     23 98 06 F6 | 	mov	arg04, #35
18128     C4 F5 B0 FD | 	call	#__system___basic_print_float
1812c     00 92 06 F6 | 	mov	arg01, #0
18130     4C 1E B1 FD | 	call	#__system___getiolock_0622
18134     3D 01 68 FC | 	wrlong	#0, result1
18138                 | LR__2021
18138                 | '   if t1.result_type=result_string then print t1.result.sresult;
18138     1F AA 0E F2 | 	cmp	local03, #31 wz
1813c     2C 00 90 5D |  if_ne	jmp	#LR__2022
18140     00 92 06 F6 | 	mov	arg01, #0
18144     38 1E B1 FD | 	call	#__system___getiolock_0622
18148     3D 93 02 F6 | 	mov	arg01, result1
1814c     AC C8 B0 FD | 	call	#__system___lockmem
18150     00 92 06 F6 | 	mov	arg01, #0
18154     53 95 02 F6 | 	mov	arg02, local01
18158     00 96 06 F6 | 	mov	arg03, #0
1815c     90 D5 B0 FD | 	call	#__system___basic_print_string
18160     00 92 06 F6 | 	mov	arg01, #0
18164     18 1E B1 FD | 	call	#__system___getiolock_0622
18168     3D 01 68 FC | 	wrlong	#0, result1
1816c                 | LR__2022
1816c                 | LR__2023
1816c                 | ' if r=0 then 
1816c     00 AC 0E F2 | 	cmp	local04, #0 wz
18170     1C 01 90 5D |  if_ne	jmp	#LR__2028
18174                 | '   if t1.result_type=result_int then print t1.result.iresult
18174     1C AA 0E F2 | 	cmp	local03, #28 wz
18178     40 00 90 5D |  if_ne	jmp	#LR__2024
1817c     00 92 06 F6 | 	mov	arg01, #0
18180     FC 1D B1 FD | 	call	#__system___getiolock_0622
18184     3D 93 02 F6 | 	mov	arg01, result1
18188     70 C8 B0 FD | 	call	#__system___lockmem
1818c     00 92 06 F6 | 	mov	arg01, #0
18190     53 95 02 F6 | 	mov	arg02, local01
18194     00 96 06 F6 | 	mov	arg03, #0
18198     0A 98 06 F6 | 	mov	arg04, #10
1819c     94 D5 B0 FD | 	call	#__system___basic_print_integer
181a0     00 92 06 F6 | 	mov	arg01, #0
181a4     0A 94 06 F6 | 	mov	arg02, #10
181a8     00 96 06 F6 | 	mov	arg03, #0
181ac     E8 D4 B0 FD | 	call	#__system___basic_print_char
181b0     00 92 06 F6 | 	mov	arg01, #0
181b4     C8 1D B1 FD | 	call	#__system___getiolock_0622
181b8     3D 01 68 FC | 	wrlong	#0, result1
181bc                 | LR__2024
181bc                 | '   if t1.result_type=result_uint then print t1.result.uresult
181bc     1D AA 0E F2 | 	cmp	local03, #29 wz
181c0     40 00 90 5D |  if_ne	jmp	#LR__2025
181c4     00 92 06 F6 | 	mov	arg01, #0
181c8     B4 1D B1 FD | 	call	#__system___getiolock_0622
181cc     3D 93 02 F6 | 	mov	arg01, result1
181d0     28 C8 B0 FD | 	call	#__system___lockmem
181d4     00 92 06 F6 | 	mov	arg01, #0
181d8     53 95 02 F6 | 	mov	arg02, local01
181dc     00 96 06 F6 | 	mov	arg03, #0
181e0     0A 98 06 F6 | 	mov	arg04, #10
181e4     8C D5 B0 FD | 	call	#__system___basic_print_unsigned
181e8     00 92 06 F6 | 	mov	arg01, #0
181ec     0A 94 06 F6 | 	mov	arg02, #10
181f0     00 96 06 F6 | 	mov	arg03, #0
181f4     A0 D4 B0 FD | 	call	#__system___basic_print_char
181f8     00 92 06 F6 | 	mov	arg01, #0
181fc     80 1D B1 FD | 	call	#__system___getiolock_0622
18200     3D 01 68 FC | 	wrlong	#0, result1
18204                 | LR__2025
18204                 | '   if t1.result_type=result_float then print t1.result.fresult
18204     1E AA 0E F2 | 	cmp	local03, #30 wz
18208     40 00 90 5D |  if_ne	jmp	#LR__2026
1820c     00 92 06 F6 | 	mov	arg01, #0
18210     6C 1D B1 FD | 	call	#__system___getiolock_0622
18214     3D 93 02 F6 | 	mov	arg01, result1
18218     E0 C7 B0 FD | 	call	#__system___lockmem
1821c     00 92 06 F6 | 	mov	arg01, #0
18220     53 95 02 F6 | 	mov	arg02, local01
18224     00 96 06 F6 | 	mov	arg03, #0
18228     23 98 06 F6 | 	mov	arg04, #35
1822c     C0 F4 B0 FD | 	call	#__system___basic_print_float
18230     00 92 06 F6 | 	mov	arg01, #0
18234     0A 94 06 F6 | 	mov	arg02, #10
18238     00 96 06 F6 | 	mov	arg03, #0
1823c     58 D4 B0 FD | 	call	#__system___basic_print_char
18240     00 92 06 F6 | 	mov	arg01, #0
18244     38 1D B1 FD | 	call	#__system___getiolock_0622
18248     3D 01 68 FC | 	wrlong	#0, result1
1824c                 | LR__2026
1824c                 | '   if t1.result_type=result_string then print t1.result.sresult
1824c     1F AA 0E F2 | 	cmp	local03, #31 wz
18250     3C 00 90 5D |  if_ne	jmp	#LR__2027
18254     00 92 06 F6 | 	mov	arg01, #0
18258     24 1D B1 FD | 	call	#__system___getiolock_0622
1825c     3D 93 02 F6 | 	mov	arg01, result1
18260     98 C7 B0 FD | 	call	#__system___lockmem
18264     00 92 06 F6 | 	mov	arg01, #0
18268     53 95 02 F6 | 	mov	arg02, local01
1826c     00 96 06 F6 | 	mov	arg03, #0
18270     7C D4 B0 FD | 	call	#__system___basic_print_string
18274     00 92 06 F6 | 	mov	arg01, #0
18278     0A 94 06 F6 | 	mov	arg02, #10
1827c     00 96 06 F6 | 	mov	arg03, #0
18280     14 D4 B0 FD | 	call	#__system___basic_print_char
18284     00 92 06 F6 | 	mov	arg01, #0
18288     F4 1C B1 FD | 	call	#__system___getiolock_0622
1828c     3D 01 68 FC | 	wrlong	#0, result1
18290                 | LR__2027
18290                 | LR__2028
18290                 | ' if r=print_mod_empty then print
18290     20 AC 0E F2 | 	cmp	local04, #32 wz
18294     2C 00 90 5D |  if_ne	jmp	#LR__2029
18298     00 92 06 F6 | 	mov	arg01, #0
1829c     E0 1C B1 FD | 	call	#__system___getiolock_0622
182a0     3D 93 02 F6 | 	mov	arg01, result1
182a4     54 C7 B0 FD | 	call	#__system___lockmem
182a8     00 92 06 F6 | 	mov	arg01, #0
182ac     0A 94 06 F6 | 	mov	arg02, #10
182b0     00 96 06 F6 | 	mov	arg03, #0
182b4     E0 D3 B0 FD | 	call	#__system___basic_print_char
182b8     00 92 06 F6 | 	mov	arg01, #0
182bc     C0 1C B1 FD | 	call	#__system___getiolock_0622
182c0     3D 01 68 FC | 	wrlong	#0, result1
182c4                 | LR__2029
182c4                 | LR__2030
182c4     E7 F0 03 F6 | 	mov	ptra, fp
182c8     F2 00 A0 FD | 	call	#popregs_
182cc                 | _do_print_ret
182cc     2D 00 64 FD | 	ret
182d0                 | 
182d0                 | ' 
182d0                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
182d0                 | ' 
182d0                 | ' sub do_push
182d0                 | _do_push
182d0                 | ' if stackpointer<maxstack then 
182d0     44 00 00 FF 
182d4     FC 65 06 F1 | 	add	objptr, ##35324
182d8     32 81 02 FB | 	rdlong	_var01, objptr
182dc     44 00 00 FF 
182e0     FC 65 86 F1 | 	sub	objptr, ##35324
182e4     01 00 00 FF 
182e8     00 80 56 F2 | 	cmps	_var01, ##512 wc
182ec     F8 00 90 3D |  if_ae	jmp	#LR__2040
182f0     4C 00 00 FF 
182f4     24 64 06 F1 | 	add	objptr, ##38948
182f8     32 83 02 FB | 	rdlong	_var02, objptr
182fc     41 85 02 F6 | 	mov	_var03, _var02
18300     01 84 66 F0 | 	shl	_var03, #1
18304     41 85 02 F1 | 	add	_var03, _var02
18308     02 84 66 F0 | 	shl	_var03, #2
1830c     03 00 00 FF 
18310     04 64 86 F1 | 	sub	objptr, ##1540
18314     32 85 02 F1 | 	add	_var03, objptr
18318     42 81 02 FB | 	rdlong	_var01, _var03
1831c     04 84 06 F1 | 	add	_var03, #4
18320     42 87 02 FB | 	rdlong	_var04, _var03
18324     41 85 02 F6 | 	mov	_var03, _var02
18328     01 84 66 F0 | 	shl	_var03, #1
1832c     41 85 02 F1 | 	add	_var03, _var02
18330     02 84 66 F0 | 	shl	_var03, #2
18334     32 85 02 F1 | 	add	_var03, objptr
18338     08 84 06 F1 | 	add	_var03, #8
1833c     42 83 02 FB | 	rdlong	_var02, _var03
18340     04 00 00 FF 
18344     24 64 86 F1 | 	sub	objptr, ##2084
18348     32 85 02 FB | 	rdlong	_var03, objptr
1834c     42 89 02 F6 | 	mov	_var05, _var03
18350     01 88 66 F0 | 	shl	_var05, #1
18354     42 89 02 F1 | 	add	_var05, _var03
18358     02 88 66 F0 | 	shl	_var05, #2
1835c     0C 00 00 FF 
18360     0C 64 86 F1 | 	sub	objptr, ##6156
18364     32 89 02 F1 | 	add	_var05, objptr
18368     44 81 62 FC | 	wrlong	_var01, _var05
1836c     0C 00 00 FF 
18370     0C 64 06 F1 | 	add	objptr, ##6156
18374     32 89 02 FB | 	rdlong	_var05, objptr
18378     44 85 02 F6 | 	mov	_var03, _var05
1837c     01 84 66 F0 | 	shl	_var03, #1
18380     44 85 02 F1 | 	add	_var03, _var05
18384     02 84 66 F0 | 	shl	_var03, #2
18388     0C 00 00 FF 
1838c     0C 64 86 F1 | 	sub	objptr, ##6156
18390     32 85 02 F1 | 	add	_var03, objptr
18394     04 84 06 F1 | 	add	_var03, #4
18398     42 87 62 FC | 	wrlong	_var04, _var03
1839c     0C 00 00 FF 
183a0     0C 64 06 F1 | 	add	objptr, ##6156
183a4     32 89 02 FB | 	rdlong	_var05, objptr
183a8     44 87 02 F6 | 	mov	_var04, _var05
183ac     01 86 66 F0 | 	shl	_var04, #1
183b0     44 87 02 F1 | 	add	_var04, _var05
183b4     02 86 66 F0 | 	shl	_var04, #2
183b8     0C 00 00 FF 
183bc     0C 64 86 F1 | 	sub	objptr, ##6156
183c0     32 87 02 F1 | 	add	_var04, objptr
183c4     08 86 06 F1 | 	add	_var04, #8
183c8     43 83 62 FC | 	wrlong	_var02, _var04
183cc     0C 00 00 FF 
183d0     0C 64 06 F1 | 	add	objptr, ##6156
183d4     32 81 02 FB | 	rdlong	_var01, objptr
183d8     01 80 06 F1 | 	add	_var01, #1
183dc     32 81 62 FC | 	wrlong	_var01, objptr
183e0     44 00 00 FF 
183e4     FC 65 86 F1 | 	sub	objptr, ##35324
183e8                 | LR__2040
183e8                 | _do_push_ret
183e8     2D 00 64 FD | 	ret
183ec                 | 
183ec                 | ' 
183ec                 | ' '-------------------- put
183ec                 | ' 
183ec                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
183ec                 | _do_put
183ec     07 CA 05 F6 | 	mov	COUNT_, #7
183f0     E8 00 A0 FD | 	call	#pushregs_
183f4     28 F0 07 F1 | 	add	ptra, #40
183f8     4C 00 00 FF 
183fc     24 64 06 F1 | 	add	objptr, ##38948
18400     32 9B 02 FB | 	rdlong	arg05, objptr
18404     4D 99 02 F6 | 	mov	arg04, arg05
18408     01 98 66 F0 | 	shl	arg04, #1
1840c     4D 99 02 F1 | 	add	arg04, arg05
18410     02 98 66 F0 | 	shl	arg04, #2
18414     03 00 00 FF 
18418     04 64 86 F1 | 	sub	objptr, ##1540
1841c     32 99 02 F1 | 	add	arg04, objptr
18420     4C A7 02 FB | 	rdlong	local01, arg04
18424                 | ' 
18424                 | ' numpar=compiledline(lineptr_e).result.uresult
18424                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
18424     04 A6 0E F2 | 	cmp	local01, #4 wz
18428     49 00 00 FF 
1842c     20 64 86 F1 | 	sub	objptr, ##37408
18430     48 00 90 5D |  if_ne	jmp	#LR__2050
18434     38 52 BF FD | 	call	#_pop
18438     3F 9B 02 F6 | 	mov	arg05, result3
1843c     1C CE 05 F1 | 	add	fp, #28
18440     E7 7A 62 FC | 	wrlong	result1, fp
18444     04 CE 05 F1 | 	add	fp, #4
18448     E7 7C 62 FC | 	wrlong	result2, fp
1844c     04 CE 05 F1 | 	add	fp, #4
18450     E7 9A 62 FC | 	wrlong	arg05, fp
18454     08 CE 85 F1 | 	sub	fp, #8
18458     E7 92 02 F6 | 	mov	arg01, fp
1845c     1C CE 85 F1 | 	sub	fp, #28
18460     E8 53 BF FD | 	call	#_converttoint
18464     54 00 00 FF 
18468     E8 64 06 F1 | 	add	objptr, ##43240
1846c     32 7B 62 FC | 	wrlong	result1, objptr
18470     54 00 00 FF 
18474     E8 64 86 F1 | 	sub	objptr, ##43240
18478     18 00 90 FD | 	jmp	#LR__2051
1847c                 | LR__2050
1847c     54 00 00 FF 
18480     E8 64 06 F1 | 	add	objptr, ##43240
18484     FF FF FF FF 
18488     32 FF 6B FC | 	wrlong	##-1, objptr
1848c     54 00 00 FF 
18490     E8 64 86 F1 | 	sub	objptr, ##43240
18494                 | LR__2051
18494                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18494     03 A6 56 F2 | 	cmps	local01, #3 wc
18498     38 00 90 CD |  if_b	jmp	#LR__2052
1849c     D0 51 BF FD | 	call	#_pop
184a0     3F 9B 02 F6 | 	mov	arg05, result3
184a4     1C CE 05 F1 | 	add	fp, #28
184a8     E7 7A 62 FC | 	wrlong	result1, fp
184ac     04 CE 05 F1 | 	add	fp, #4
184b0     E7 7C 62 FC | 	wrlong	result2, fp
184b4     04 CE 05 F1 | 	add	fp, #4
184b8     E7 9A 62 FC | 	wrlong	arg05, fp
184bc     08 CE 85 F1 | 	sub	fp, #8
184c0     E7 92 02 F6 | 	mov	arg01, fp
184c4     1C CE 85 F1 | 	sub	fp, #28
184c8     80 53 BF FD | 	call	#_converttoint
184cc     3D A9 02 F6 | 	mov	local02, result1
184d0     04 00 90 FD | 	jmp	#LR__2053
184d4                 | LR__2052
184d4     01 A8 06 F6 | 	mov	local02, #1
184d8                 | LR__2053
184d8                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
184d8     02 A6 56 F2 | 	cmps	local01, #2 wc
184dc     34 00 90 CD |  if_b	jmp	#LR__2054
184e0     8C 51 BF FD | 	call	#_pop
184e4     3F A7 02 F6 | 	mov	local01, result3
184e8     1C CE 05 F1 | 	add	fp, #28
184ec     E7 7A 62 FC | 	wrlong	result1, fp
184f0     04 CE 05 F1 | 	add	fp, #4
184f4     E7 7C 62 FC | 	wrlong	result2, fp
184f8     04 CE 05 F1 | 	add	fp, #4
184fc     E7 A6 62 FC | 	wrlong	local01, fp
18500     08 CE 85 F1 | 	sub	fp, #8
18504     E7 92 02 F6 | 	mov	arg01, fp
18508     1C CE 85 F1 | 	sub	fp, #28
1850c     3C 53 BF FD | 	call	#_converttoint
18510     3D AB 02 F6 | 	mov	local03, result1
18514                 | LR__2054
18514     58 51 BF FD | 	call	#_pop
18518     3F A7 02 F6 | 	mov	local01, result3
1851c     1C CE 05 F1 | 	add	fp, #28
18520     E7 7A 62 FC | 	wrlong	result1, fp
18524     04 CE 05 F1 | 	add	fp, #4
18528     E7 7C 62 FC | 	wrlong	result2, fp
1852c     04 CE 05 F1 | 	add	fp, #4
18530     E7 A6 62 FC | 	wrlong	local01, fp
18534     08 CE 85 F1 | 	sub	fp, #8
18538     E7 92 02 F6 | 	mov	arg01, fp
1853c     1C CE 85 F1 | 	sub	fp, #28
18540     08 53 BF FD | 	call	#_converttoint
18544     3D AD 02 F6 | 	mov	local04, result1
18548     02 AE 66 F0 | 	shl	local05, #2
1854c     52 00 00 FF 
18550     68 64 06 F1 | 	add	objptr, ##42088
18554     32 AF 02 F1 | 	add	local05, objptr
18558     57 01 68 FC | 	wrlong	#0, local05
1855c                 | ' t1=pop() : channel=converttoint(t1)
1855c                 | ' getres(j)=0
1855c                 | ' if pos>=0 then
1855c     02 00 00 FF 
18560     80 64 06 F1 | 	add	objptr, ##1152
18564     32 B1 02 FB | 	rdlong	local06, objptr
18568     54 00 00 FF 
1856c     E8 64 86 F1 | 	sub	objptr, ##43240
18570     00 B0 56 F2 | 	cmps	local06, #0 wc
18574     08 01 90 CD |  if_b	jmp	#LR__2060
18578     00 B2 06 F6 | 	mov	local07, #0
1857c                 | '    i=0: do
1857c                 | LR__2055
1857c     00 AE 06 F6 | 	mov	local05, #0
18580                 | '    j=0: do    
18580                 | LR__2056
18580                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18580     00 04 00 FF 
18584     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18588     34 00 90 3D |  if_ae	jmp	#LR__2057
1858c     57 B1 02 F6 | 	mov	local06, local05
18590     32 A7 02 F6 | 	mov	local01, objptr
18594     50 00 00 FF 
18598     58 A6 06 F1 | 	add	local01, ##41048
1859c     53 B1 02 F1 | 	add	local06, local01
185a0     55 93 02 F6 | 	mov	arg01, local03
185a4     59 A7 02 F6 | 	mov	local01, local07
185a8     0A A6 66 F0 | 	shl	local01, #10
185ac     53 93 02 F1 | 	add	arg01, local01
185b0     57 93 02 F1 | 	add	arg01, local05
185b4     49 7B C2 FA | 	rdbyte	result1, arg01
185b8     58 7B 42 FC | 	wrbyte	result1, local06
185bc     30 00 90 FD | 	jmp	#LR__2058
185c0                 | LR__2057
185c0     57 B1 02 F6 | 	mov	local06, local05
185c4     32 A7 02 F6 | 	mov	local01, objptr
185c8     50 00 00 FF 
185cc     58 A6 06 F1 | 	add	local01, ##41048
185d0     53 B1 02 F1 | 	add	local06, local01
185d4     55 93 02 F6 | 	mov	arg01, local03
185d8     59 A7 02 F6 | 	mov	local01, local07
185dc     0A A6 66 F0 | 	shl	local01, #10
185e0     53 93 02 F1 | 	add	arg01, local01
185e4     57 93 02 F1 | 	add	arg01, local05
185e8     5C 89 B0 FD | 	call	#_pspeek
185ec     58 7B 42 FC | 	wrbyte	result1, local06
185f0                 | LR__2058
185f0     01 AE 06 F1 | 	add	local05, #1
185f4     02 00 00 FF 
185f8     00 AE 56 F2 | 	cmps	local05, ##1024 wc
185fc     14 00 90 3D |  if_ae	jmp	#LR__2059
18600     59 B1 02 F6 | 	mov	local06, local07
18604     0A B0 66 F0 | 	shl	local06, #10
18608     57 B1 02 F1 | 	add	local06, local05
1860c     54 B1 5A F2 | 	cmps	local06, local02 wcz
18610     6C FF 9F ED |  if_be	jmp	#LR__2056
18614                 | LR__2059
18614                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18614     54 00 00 FF 
18618     E8 64 06 F1 | 	add	objptr, ##43240
1861c     32 95 02 FB | 	rdlong	arg02, objptr
18620     01 94 06 F1 | 	add	arg02, #1
18624     04 00 00 FF 
18628     90 64 86 F1 | 	sub	objptr, ##2192
1862c     32 97 02 F6 | 	mov	arg03, objptr
18630     50 00 00 FF 
18634     58 64 86 F1 | 	sub	objptr, ##41048
18638     54 99 02 F6 | 	mov	arg04, local02
1863c     56 93 02 F6 | 	mov	arg01, local04
18640     01 9A 06 F6 | 	mov	arg05, #1
18644     B8 D1 B0 FD | 	call	#__system___basic_put
18648     56 B1 02 F6 | 	mov	local06, local04
1864c     02 B0 66 F0 | 	shl	local06, #2
18650     32 A7 02 F6 | 	mov	local01, objptr
18654     52 00 00 FF 
18658     68 A6 06 F1 | 	add	local01, ##42088
1865c     53 B1 02 F1 | 	add	local06, local01
18660     58 7B 62 FC | 	wrlong	result1, local06
18664                 | '    if 1024*i+j>amount then exit loop
18664     59 B1 02 F6 | 	mov	local06, local07
18668     0A B0 66 F0 | 	shl	local06, #10
1866c     57 B1 02 F1 | 	add	local06, local05
18670     54 B1 5A F2 | 	cmps	local06, local02 wcz
18674     F8 00 90 1D |  if_a	jmp	#LR__2066
18678     01 B2 06 F1 | 	add	local07, #1
1867c     FC FE 9F FD | 	jmp	#LR__2055
18680                 | LR__2060
18680     00 B2 06 F6 | 	mov	local07, #0
18684                 | '    i=0: do
18684                 | LR__2061
18684     00 AE 06 F6 | 	mov	local05, #0
18688                 | '    j=0: do  
18688                 | LR__2062
18688                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18688     00 04 00 FF 
1868c     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18690     34 00 90 3D |  if_ae	jmp	#LR__2063
18694     57 B1 02 F6 | 	mov	local06, local05
18698     32 A7 02 F6 | 	mov	local01, objptr
1869c     50 00 00 FF 
186a0     58 A6 06 F1 | 	add	local01, ##41048
186a4     53 B1 02 F1 | 	add	local06, local01
186a8     55 93 02 F6 | 	mov	arg01, local03
186ac     59 A7 02 F6 | 	mov	local01, local07
186b0     0A A6 66 F0 | 	shl	local01, #10
186b4     53 93 02 F1 | 	add	arg01, local01
186b8     57 93 02 F1 | 	add	arg01, local05
186bc     49 7B C2 FA | 	rdbyte	result1, arg01
186c0     58 7B 42 FC | 	wrbyte	result1, local06
186c4     30 00 90 FD | 	jmp	#LR__2064
186c8                 | LR__2063
186c8     57 B1 02 F6 | 	mov	local06, local05
186cc     32 A7 02 F6 | 	mov	local01, objptr
186d0     50 00 00 FF 
186d4     58 A6 06 F1 | 	add	local01, ##41048
186d8     53 B1 02 F1 | 	add	local06, local01
186dc     55 93 02 F6 | 	mov	arg01, local03
186e0     59 A7 02 F6 | 	mov	local01, local07
186e4     0A A6 66 F0 | 	shl	local01, #10
186e8     53 93 02 F1 | 	add	arg01, local01
186ec     57 93 02 F1 | 	add	arg01, local05
186f0     54 88 B0 FD | 	call	#_pspeek
186f4     58 7B 42 FC | 	wrbyte	result1, local06
186f8                 | LR__2064
186f8     01 AE 06 F1 | 	add	local05, #1
186fc     02 00 00 FF 
18700     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18704     14 00 90 3D |  if_ae	jmp	#LR__2065
18708     59 B1 02 F6 | 	mov	local06, local07
1870c     0A B0 66 F0 | 	shl	local06, #10
18710     57 B1 02 F1 | 	add	local06, local05
18714     54 B1 5A F2 | 	cmps	local06, local02 wcz
18718     6C FF 9F ED |  if_be	jmp	#LR__2062
1871c                 | LR__2065
1871c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1871c     32 97 02 F6 | 	mov	arg03, objptr
18720     50 00 00 FF 
18724     58 96 06 F1 | 	add	arg03, ##41048
18728     54 99 02 F6 | 	mov	arg04, local02
1872c     56 93 02 F6 | 	mov	arg01, local04
18730     00 94 06 F6 | 	mov	arg02, #0
18734     01 9A 06 F6 | 	mov	arg05, #1
18738     C4 D0 B0 FD | 	call	#__system___basic_put
1873c     56 B1 02 F6 | 	mov	local06, local04
18740     02 B0 66 F0 | 	shl	local06, #2
18744     32 A7 02 F6 | 	mov	local01, objptr
18748     52 00 00 FF 
1874c     68 A6 06 F1 | 	add	local01, ##42088
18750     53 B1 02 F1 | 	add	local06, local01
18754     58 7B 62 FC | 	wrlong	result1, local06
18758                 | '    if 1024*i+j>amount then exit loop
18758     59 B1 02 F6 | 	mov	local06, local07
1875c     0A B0 66 F0 | 	shl	local06, #10
18760     57 B1 02 F1 | 	add	local06, local05
18764     54 B1 5A F2 | 	cmps	local06, local02 wcz
18768     01 B2 06 E1 |  if_be	add	local07, #1
1876c     14 FF 9F ED |  if_be	jmp	#LR__2061
18770                 | LR__2066
18770     E7 F0 03 F6 | 	mov	ptra, fp
18774     F2 00 A0 FD | 	call	#popregs_
18778                 | _do_put_ret
18778     2D 00 64 FD | 	ret
1877c                 | 
1877c                 | ' 
1877c                 | ' '-------------------- rad
1877c                 | ' 
1877c                 | ' sub do_rad
1877c                 | _do_rad
1877c     54 00 00 FF 
18780     84 64 06 F1 | 	add	objptr, ##43140
18784     00 C0 9F FF 
18788     32 01 68 FC | 	wrlong	##1065353216, objptr
1878c     04 64 06 F1 | 	add	objptr, #4
18790     00 C0 9F FF 
18794     32 01 68 FC | 	wrlong	##1065353216, objptr
18798     54 00 00 FF 
1879c     88 64 86 F1 | 	sub	objptr, ##43144
187a0                 | _do_rad_ret
187a0     2D 00 64 FD | 	ret
187a4                 | 
187a4                 | ' 
187a4                 | ' '-------------------- rdpin
187a4                 | ' 
187a4                 | ' sub do_rdpin
187a4                 | _do_rdpin
187a4     00 CA 05 F6 | 	mov	COUNT_, #0
187a8     E8 00 A0 FD | 	call	#pushregs_
187ac     0C F0 07 F1 | 	add	ptra, #12
187b0     BC 4E BF FD | 	call	#_pop
187b4     E7 7A 62 FC | 	wrlong	result1, fp
187b8     04 CE 05 F1 | 	add	fp, #4
187bc     E7 7C 62 FC | 	wrlong	result2, fp
187c0     04 CE 05 F1 | 	add	fp, #4
187c4     E7 7E 62 FC | 	wrlong	result3, fp
187c8     08 CE 85 F1 | 	sub	fp, #8
187cc     E7 92 02 F6 | 	mov	arg01, fp
187d0     78 50 BF FD | 	call	#_converttoint
187d4     3D 7B 8A FA | 	rdpin	result1, result1
187d8     54 00 00 FF 
187dc     EC 64 06 F1 | 	add	objptr, ##43244
187e0     32 7B 62 FC | 	wrlong	result1, objptr
187e4     54 00 00 FF 
187e8     EC 64 86 F1 | 	sub	objptr, ##43244
187ec     08 CE 05 F1 | 	add	fp, #8
187f0     E7 3A 68 FC | 	wrlong	#29, fp
187f4     08 CE 85 F1 | 	sub	fp, #8
187f8     E7 08 68 FC | 	wrlong	#4, fp
187fc     E7 92 02 F6 | 	mov	arg01, fp
18800     FC 4E BF FD | 	call	#_push
18804     E7 F0 03 F6 | 	mov	ptra, fp
18808     F2 00 A0 FD | 	call	#popregs_
1880c                 | _do_rdpin_ret
1880c     2D 00 64 FD | 	ret
18810                 | 
18810                 | ' 
18810                 | ' ' ----------------  read
18810                 | ' 
18810                 | ' function read_next_line() as string
18810                 | _read_next_line
18810     07 CA 05 F6 | 	mov	COUNT_, #7
18814     E8 00 A0 FD | 	call	#pushregs_
18818                 | ' if dataptr=$7FFFFFFF then return("")
18818     52 00 00 FF 
1881c     D0 64 06 F1 | 	add	objptr, ##42192
18820     32 A7 02 FB | 	rdlong	local01, objptr
18824     52 00 00 FF 
18828     D0 64 86 F1 | 	sub	objptr, ##42192
1882c     FF FF 3F FF 
18830     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18834     98 01 00 AF 
18838     03 7B 06 A6 |  if_e	mov	result1, ##@LR__6065
1883c     C0 01 90 AD |  if_e	jmp	#LR__2077
18840                 | ' do
18840                 | LR__2070
18840     32 93 02 F6 | 	mov	arg01, objptr
18844     52 00 00 FF 
18848     AC 92 06 F1 | 	add	arg01, ##42156
1884c     52 00 00 FF 
18850     D0 64 06 F1 | 	add	objptr, ##42192
18854     32 95 02 FB | 	rdlong	arg02, objptr
18858     24 96 06 F6 | 	mov	arg03, #36
1885c     47 00 00 FF 
18860     04 64 86 F1 | 	sub	objptr, ##36356
18864     20 B2 B0 FD | 	call	#_psram_spin2_read1
18868                 | '  ' print dataptr
18868                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18868                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18868     46 00 00 FF 
1886c     E0 65 06 F1 | 	add	objptr, ##36320
18870     32 A7 02 FB | 	rdlong	local01, objptr
18874     52 00 00 FF 
18878     AC 64 86 F1 | 	sub	objptr, ##42156
1887c     FF FF 7F FF 
18880     FF A7 0E F2 | 	cmp	local01, ##-1 wz
18884     52 00 00 5F 
18888     C0 64 06 51 |  if_ne	add	objptr, ##42176
1888c     32 A7 02 5B |  if_ne	rdlong	local01, objptr
18890     10 64 06 51 |  if_ne	add	objptr, #16
18894     32 A7 62 5C |  if_ne	wrlong	local01, objptr
18898     52 00 00 5F 
1889c     D0 64 86 51 |  if_ne	sub	objptr, ##42192
188a0     52 00 00 FF 
188a4     C0 64 06 F1 | 	add	objptr, ##42176
188a8     32 A7 02 FB | 	rdlong	local01, objptr
188ac     52 00 00 FF 
188b0     C0 64 86 F1 | 	sub	objptr, ##42176
188b4     FF FF 3F FF 
188b8     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
188bc     52 00 00 5F 
188c0     AC 64 06 51 |  if_ne	add	objptr, ##42156
188c4     32 A9 02 5B |  if_ne	rdlong	local02, objptr
188c8     52 00 00 5F 
188cc     AC 64 86 51 |  if_ne	sub	objptr, ##42156
188d0     FF FF 7F 5F 
188d4     FF A9 0E 52 |  if_ne	cmp	local02, ##-1 wz
188d8     52 00 00 5F 
188dc     CC 64 06 51 |  if_ne	add	objptr, ##42188
188e0     32 AB 02 5B |  if_ne	rdlong	local03, objptr
188e4     52 00 00 5F 
188e8     CC 64 86 51 |  if_ne	sub	objptr, ##42188
188ec     B7 AA 0E 52 |  if_ne	cmp	local03, #183 wz
188f0     4C FF 9F 5D |  if_ne	jmp	#LR__2070
188f4                 | ' if dataheader(8)=token_data then 
188f4     52 00 00 FF 
188f8     CC 64 06 F1 | 	add	objptr, ##42188
188fc     32 A7 02 FB | 	rdlong	local01, objptr
18900     52 00 00 FF 
18904     CC 64 86 F1 | 	sub	objptr, ##42188
18908     B7 A6 0E F2 | 	cmp	local01, #183 wz
1890c     E0 00 90 5D |  if_ne	jmp	#LR__2075
18910     52 00 00 FF 
18914     B4 64 06 F1 | 	add	objptr, ##42164
18918     32 A7 02 FB | 	rdlong	local01, objptr
1891c     02 00 00 FF 
18920     18 64 06 F1 | 	add	objptr, ##1048
18924     32 A7 62 FC | 	wrlong	local01, objptr
18928     02 00 00 FF 
1892c     14 64 86 F1 | 	sub	objptr, ##1044
18930     32 AD 02 FB | 	rdlong	local04, objptr
18934     02 00 00 FF 
18938     0C 64 06 F1 | 	add	objptr, ##1036
1893c     32 AD 62 FC | 	wrlong	local04, objptr
18940                 | '  'print "data found at line "; dataheader(0)
18940                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18940     00 AE 06 F6 | 	mov	local05, #0
18944     54 00 00 FF 
18948     C4 64 86 F1 | 	sub	objptr, ##43204
1894c                 | LR__2071
1894c     56 AF 52 F2 | 	cmps	local05, local04 wc
18950     3C 00 90 3D |  if_ae	jmp	#LR__2072
18954     54 00 00 FF 
18958     CC 64 06 F1 | 	add	objptr, ##43212
1895c     32 93 02 FB | 	rdlong	arg01, objptr
18960     54 00 00 FF 
18964     CC 64 86 F1 | 	sub	objptr, ##43212
18968     57 93 02 F1 | 	add	arg01, local05
1896c     D8 85 B0 FD | 	call	#_pspeek
18970     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
18974     F0 DA B0 FD | 	call	#__system__Chr_S
18978     3D 95 02 F6 | 	mov	arg02, result1
1897c     58 93 02 F6 | 	mov	arg01, local06
18980     D4 C0 B0 FD | 	call	#__system___string_concat
18984     3D B1 02 F6 | 	mov	local06, result1
18988     01 AE 06 F1 | 	add	local05, #1
1898c     BC FF 9F FD | 	jmp	#LR__2071
18990                 | LR__2072
18990     98 01 00 FF 
18994     04 97 06 F6 | 	mov	arg03, ##@LR__6066
18998     01 92 06 F6 | 	mov	arg01, #1
1899c     58 95 02 F6 | 	mov	arg02, local06
189a0     48 DE B0 FD | 	call	#__system__Instr
189a4     3D AF 02 F6 | 	mov	local05, result1
189a8     58 93 02 F6 | 	mov	arg01, local06
189ac     49 B3 02 F6 | 	mov	local07, arg01
189b0     D7 06 48 FB | 	callpa	#(@LR__2074-@LR__2073)>>2,fcache_load_ptr_
189b4                 | LR__2073
189b4     59 7B CA FA | 	rdbyte	result1, local07 wz
189b8     01 B2 06 51 |  if_ne	add	local07, #1
189bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2073
189c0                 | LR__2074
189c0     49 B3 82 F1 | 	sub	local07, arg01
189c4     59 95 02 F6 | 	mov	arg02, local07
189c8     57 95 82 F1 | 	sub	arg02, local05
189cc     04 94 86 F1 | 	sub	arg02, #4
189d0     58 93 02 F6 | 	mov	arg01, local06
189d4     54 D9 B0 FD | 	call	#__system__Right_S
189d8     3D 93 02 F6 | 	mov	arg01, result1
189dc     54 DD B0 FD | 	call	#__system__RTrim_S
189e0     3D 93 02 F6 | 	mov	arg01, result1
189e4     8C DC B0 FD | 	call	#__system__LTrim_S
189e8     3D B1 02 F6 | 	mov	local06, result1
189ec     0C 00 90 FD | 	jmp	#LR__2076
189f0                 | LR__2075
189f0                 | '   return ("") 'todo proper err
189f0     98 01 00 FF 
189f4     09 7B 06 F6 | 	mov	result1, ##@LR__6067
189f8     04 00 90 FD | 	jmp	#LR__2077
189fc                 | LR__2076
189fc                 | ' return readline
189fc     58 7B 02 F6 | 	mov	result1, local06
18a00                 | LR__2077
18a00     E7 F0 03 F6 | 	mov	ptra, fp
18a04     F2 00 A0 FD | 	call	#popregs_
18a08                 | _read_next_line_ret
18a08     2D 00 64 FD | 	ret
18a0c                 | 
18a0c                 | ' 
18a0c                 | ' sub do_read
18a0c                 | _do_read
18a0c     17 CA 05 F6 | 	mov	COUNT_, #23
18a10     E8 00 A0 FD | 	call	#pushregs_
18a14     58 F1 07 F1 | 	add	ptra, #344
18a18     4C 00 00 FF 
18a1c     24 64 06 F1 | 	add	objptr, ##38948
18a20     32 AD 02 FB | 	rdlong	local04, objptr
18a24     56 AF 02 F6 | 	mov	local05, local04
18a28     01 AE 66 F0 | 	shl	local05, #1
18a2c     56 AF 02 F1 | 	add	local05, local04
18a30     02 AE 66 F0 | 	shl	local05, #2
18a34     03 00 00 FF 
18a38     04 64 86 F1 | 	sub	objptr, ##1540
18a3c     32 B1 02 F6 | 	mov	local06, objptr
18a40     32 AF 02 F1 | 	add	local05, objptr
18a44     57 B3 02 FB | 	rdlong	local07, local05
18a48                 | ' 
18a48                 | ' 
18a48                 | ' numpar=compiledline(lineptr_e).result.uresult
18a48                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18a48     01 B2 16 F2 | 	cmp	local07, #1 wc
18a4c     49 00 00 FF 
18a50     20 64 86 F1 | 	sub	objptr, ##37408
18a54     08 00 90 CD |  if_b	jmp	#LR__2080
18a58     41 B2 16 F2 | 	cmp	local07, #65 wc
18a5c     50 00 90 CD |  if_b	jmp	#LR__2081
18a60                 | LR__2080
18a60     00 92 06 F6 | 	mov	arg01, #0
18a64     18 15 B1 FD | 	call	#__system___getiolock_0622
18a68     3D 93 02 F6 | 	mov	arg01, result1
18a6c     8C BF B0 FD | 	call	#__system___lockmem
18a70     98 01 00 FF 
18a74     0A 95 06 F6 | 	mov	arg02, ##@LR__6068
18a78     00 92 06 F6 | 	mov	arg01, #0
18a7c     00 96 06 F6 | 	mov	arg03, #0
18a80     6C CC B0 FD | 	call	#__system___basic_print_string
18a84     00 92 06 F6 | 	mov	arg01, #0
18a88     F4 14 B1 FD | 	call	#__system___getiolock_0622
18a8c     3D 01 68 FC | 	wrlong	#0, result1
18a90     52 00 00 FF 
18a94     94 64 06 F1 | 	add	objptr, ##42132
18a98     32 95 02 FB | 	rdlong	arg02, objptr
18a9c     52 00 00 FF 
18aa0     94 64 86 F1 | 	sub	objptr, ##42132
18aa4     27 92 06 F6 | 	mov	arg01, #39
18aa8     28 82 B0 FD | 	call	#_printerror
18aac     A8 09 90 FD | 	jmp	#LR__2128
18ab0                 | LR__2081
18ab0                 | ' i=numpar-1
18ab0                 | ' if readline="" then readline=read_next_line() ': print readline
18ab0     54 00 00 FF 
18ab4     B8 64 06 F1 | 	add	objptr, ##43192
18ab8     32 93 02 FB | 	rdlong	arg01, objptr
18abc     54 00 00 FF 
18ac0     B8 64 86 F1 | 	sub	objptr, ##43192
18ac4     98 01 00 FF 
18ac8     14 95 06 F6 | 	mov	arg02, ##@LR__6069
18acc     54 BF B0 FD | 	call	#__system___string_cmp
18ad0     00 7A 0E F2 | 	cmp	result1, #0 wz
18ad4     18 00 90 5D |  if_ne	jmp	#LR__2082
18ad8     34 FD BF FD | 	call	#_read_next_line
18adc     54 00 00 FF 
18ae0     B8 64 06 F1 | 	add	objptr, ##43192
18ae4     32 7B 62 FC | 	wrlong	result1, objptr
18ae8     54 00 00 FF 
18aec     B8 64 86 F1 | 	sub	objptr, ##43192
18af0                 | LR__2082
18af0                 | ' if readline="" then printerror(55,runheader(0)) :return
18af0     54 00 00 FF 
18af4     B8 64 06 F1 | 	add	objptr, ##43192
18af8     32 93 02 FB | 	rdlong	arg01, objptr
18afc     54 00 00 FF 
18b00     B8 64 86 F1 | 	sub	objptr, ##43192
18b04     98 01 00 FF 
18b08     15 95 06 F6 | 	mov	arg02, ##@LR__6070
18b0c     14 BF B0 FD | 	call	#__system___string_cmp
18b10     00 7A 0E F2 | 	cmp	result1, #0 wz
18b14     20 00 90 5D |  if_ne	jmp	#LR__2083
18b18     52 00 00 FF 
18b1c     94 64 06 F1 | 	add	objptr, ##42132
18b20     32 95 02 FB | 	rdlong	arg02, objptr
18b24     52 00 00 FF 
18b28     94 64 86 F1 | 	sub	objptr, ##42132
18b2c     37 92 06 F6 | 	mov	arg01, #55
18b30     A0 81 B0 FD | 	call	#_printerror
18b34     20 09 90 FD | 	jmp	#LR__2128
18b38                 | LR__2083
18b38     00 B4 06 F6 | 	mov	local08, #0
18b3c     59 B7 02 F6 | 	mov	local09, local07
18b40     01 B6 86 F1 | 	sub	local09, #1
18b44                 | ' j=0
18b44                 | ' i=numpar-1
18b44                 | ' do
18b44                 | LR__2084
18b44                 | '   do
18b44                 | LR__2085
18b44     54 00 00 FF 
18b48     B8 64 06 F1 | 	add	objptr, ##43192
18b4c     32 95 02 FB | 	rdlong	arg02, objptr
18b50     54 00 00 FF 
18b54     B8 64 86 F1 | 	sub	objptr, ##43192
18b58     98 01 00 FF 
18b5c     16 97 06 F6 | 	mov	arg03, ##@LR__6071
18b60     01 92 06 F6 | 	mov	arg01, #1
18b64     84 DC B0 FD | 	call	#__system__Instr
18b68     3D 97 02 F6 | 	mov	arg03, result1
18b6c                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
18b6c     01 96 16 F2 | 	cmp	arg03, #1 wc
18b70     34 00 90 CD |  if_b	jmp	#LR__2086
18b74     54 00 00 FF 
18b78     B8 64 06 F1 | 	add	objptr, ##43192
18b7c     32 93 02 FB | 	rdlong	arg01, objptr
18b80     54 00 00 FF 
18b84     B8 64 86 F1 | 	sub	objptr, ##43192
18b88     01 96 86 F1 | 	sub	arg03, #1
18b8c     4B 95 02 F6 | 	mov	arg02, arg03
18b90     10 D7 B0 FD | 	call	#__system__Left_S
18b94     54 00 00 FF 
18b98     B8 64 06 F1 | 	add	objptr, ##43192
18b9c     32 7B 62 FC | 	wrlong	result1, objptr
18ba0     54 00 00 FF 
18ba4     B8 64 86 F1 | 	sub	objptr, ##43192
18ba8                 | LR__2086
18ba8     54 00 00 FF 
18bac     B8 64 06 F1 | 	add	objptr, ##43192
18bb0     32 95 02 FB | 	rdlong	arg02, objptr
18bb4     54 00 00 FF 
18bb8     B8 64 86 F1 | 	sub	objptr, ##43192
18bbc     98 01 00 FF 
18bc0     18 97 06 F6 | 	mov	arg03, ##@LR__6072
18bc4     01 92 06 F6 | 	mov	arg01, #1
18bc8     20 DC B0 FD | 	call	#__system__Instr
18bcc     3D B9 02 F6 | 	mov	local10, result1
18bd0                 | '     comma=instr(1,readline,",")  
18bd0                 | '       if comma>0  then 
18bd0     01 B8 16 F2 | 	cmp	local10, #1 wc
18bd4     7C 00 90 CD |  if_b	jmp	#LR__2089
18bd8     54 00 00 FF 
18bdc     B8 64 06 F1 | 	add	objptr, ##43192
18be0     32 93 02 FB | 	rdlong	arg01, objptr
18be4     54 00 00 FF 
18be8     B8 64 86 F1 | 	sub	objptr, ##43192
18bec     5C 95 02 F6 | 	mov	arg02, local10
18bf0     01 94 86 F1 | 	sub	arg02, #1
18bf4     AC D6 B0 FD | 	call	#__system__Left_S
18bf8     3D BB 02 F6 | 	mov	local11, result1
18bfc     54 00 00 FF 
18c00     B8 64 06 F1 | 	add	objptr, ##43192
18c04     32 B1 02 FB | 	rdlong	local06, objptr
18c08     54 00 00 FF 
18c0c     B8 64 86 F1 | 	sub	objptr, ##43192
18c10     58 93 02 F6 | 	mov	arg01, local06
18c14     49 BD 02 F6 | 	mov	local12, arg01
18c18     D7 06 48 FB | 	callpa	#(@LR__2088-@LR__2087)>>2,fcache_load_ptr_
18c1c                 | LR__2087
18c1c     5E 7B CA FA | 	rdbyte	result1, local12 wz
18c20     01 BC 06 51 |  if_ne	add	local12, #1
18c24     F4 FF 9F 5D |  if_ne	jmp	#LR__2087
18c28                 | LR__2088
18c28     49 BD 82 F1 | 	sub	local12, arg01
18c2c     5E 95 02 F6 | 	mov	arg02, local12
18c30     5C 95 82 F1 | 	sub	arg02, local10
18c34     58 93 02 F6 | 	mov	arg01, local06
18c38     F0 D6 B0 FD | 	call	#__system__Right_S
18c3c     54 00 00 FF 
18c40     B8 64 06 F1 | 	add	objptr, ##43192
18c44     32 7B 62 FC | 	wrlong	result1, objptr
18c48     54 00 00 FF 
18c4c     B8 64 86 F1 | 	sub	objptr, ##43192
18c50     40 00 90 FD | 	jmp	#LR__2090
18c54                 | LR__2089
18c54     54 00 00 FF 
18c58     B8 64 06 F1 | 	add	objptr, ##43192
18c5c     32 93 02 FB | 	rdlong	arg01, objptr
18c60     54 00 00 FF 
18c64     B8 64 86 F1 | 	sub	objptr, ##43192
18c68     C8 DA B0 FD | 	call	#__system__RTrim_S
18c6c     3D 93 02 F6 | 	mov	arg01, result1
18c70     00 DA B0 FD | 	call	#__system__LTrim_S
18c74     3D BB 02 F6 | 	mov	local11, result1
18c78     98 01 00 FF 
18c7c     1A BF 06 F6 | 	mov	local13, ##@LR__6073
18c80     54 00 00 FF 
18c84     B8 64 06 F1 | 	add	objptr, ##43192
18c88     32 BF 62 FC | 	wrlong	local13, objptr
18c8c     54 00 00 FF 
18c90     B8 64 86 F1 | 	sub	objptr, ##43192
18c94                 | LR__2090
18c94                 | '      
18c94                 | '      if part$<>"" then j=j+1
18c94     98 01 00 FF 
18c98     1B 95 06 F6 | 	mov	arg02, ##@LR__6074
18c9c     5D 93 02 F6 | 	mov	arg01, local11
18ca0     80 BD B0 FD | 	call	#__system___string_cmp
18ca4     00 7A 0E F2 | 	cmp	result1, #0 wz
18ca8     01 B4 06 51 |  if_ne	add	local08, #1
18cac     5B 97 02 F6 | 	mov	arg03, local09
18cb0     02 96 66 F0 | 	shl	arg03, #2
18cb4     E7 AC 02 F6 | 	mov	local04, fp
18cb8     2C AC 06 F1 | 	add	local04, #44
18cbc     56 97 02 F1 | 	add	arg03, local04
18cc0     4B BB 62 FC | 	wrlong	local11, arg03
18cc4     01 B6 86 F1 | 	sub	local09, #1
18cc8                 | '      args(i)=part$  
18cc8                 | '      i=i-1
18cc8                 | '     if readline="" then readline=read_next_line() 
18cc8     54 00 00 FF 
18ccc     B8 64 06 F1 | 	add	objptr, ##43192
18cd0     32 93 02 FB | 	rdlong	arg01, objptr
18cd4     54 00 00 FF 
18cd8     B8 64 86 F1 | 	sub	objptr, ##43192
18cdc     98 01 00 FF 
18ce0     1C 95 06 F6 | 	mov	arg02, ##@LR__6075
18ce4     3C BD B0 FD | 	call	#__system___string_cmp
18ce8     00 7A 0E F2 | 	cmp	result1, #0 wz
18cec     18 00 90 5D |  if_ne	jmp	#LR__2091
18cf0     1C FB BF FD | 	call	#_read_next_line
18cf4     54 00 00 FF 
18cf8     B8 64 06 F1 | 	add	objptr, ##43192
18cfc     32 7B 62 FC | 	wrlong	result1, objptr
18d00     54 00 00 FF 
18d04     B8 64 86 F1 | 	sub	objptr, ##43192
18d08                 | LR__2091
18d08     00 B6 56 F2 | 	cmps	local09, #0 wc
18d0c     28 00 90 CD |  if_b	jmp	#LR__2092
18d10     54 00 00 FF 
18d14     B8 64 06 F1 | 	add	objptr, ##43192
18d18     32 93 02 FB | 	rdlong	arg01, objptr
18d1c     54 00 00 FF 
18d20     B8 64 86 F1 | 	sub	objptr, ##43192
18d24     98 01 00 FF 
18d28     1D 95 06 F6 | 	mov	arg02, ##@LR__6076
18d2c     F4 BC B0 FD | 	call	#__system___string_cmp
18d30     00 7A 0E F2 | 	cmp	result1, #0 wz
18d34     0C FE 9F 5D |  if_ne	jmp	#LR__2085
18d38                 | LR__2092
18d38     00 B6 56 F2 | 	cmps	local09, #0 wc
18d3c     04 FE 9F 3D |  if_ae	jmp	#LR__2084
18d40                 | ' if j<numpar then printerror(55,runheader(0))
18d40     59 B5 52 F2 | 	cmps	local08, local07 wc
18d44     52 00 00 CF 
18d48     94 64 06 C1 |  if_b	add	objptr, ##42132
18d4c     32 95 02 CB |  if_b	rdlong	arg02, objptr
18d50     52 00 00 CF 
18d54     94 64 86 C1 |  if_b	sub	objptr, ##42132
18d58     37 92 06 C6 |  if_b	mov	arg01, #55
18d5c     74 7F B0 CD |  if_b	call	#_printerror
18d60                 | ' 
18d60                 | ' for i=0 to numpar-1
18d60     00 B6 06 F6 | 	mov	local09, #0
18d64     59 C1 02 F6 | 	mov	local14, local07
18d68                 | LR__2093
18d68     60 B7 52 F2 | 	cmps	local09, local14 wc
18d6c     E8 06 90 3D |  if_ae	jmp	#LR__2127
18d70                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18d70     5B AF 02 F6 | 	mov	local05, local09
18d74     02 AE 66 F0 | 	shl	local05, #2
18d78     E7 B0 02 F6 | 	mov	local06, fp
18d7c     2C B0 06 F1 | 	add	local06, #44
18d80     58 AF 02 F1 | 	add	local05, local06
18d84     57 93 02 FB | 	rdlong	arg01, local05
18d88     C8 DC BE FD | 	call	#_isnum
18d8c     3D BF 02 F6 | 	mov	local13, result1
18d90     5B C3 02 F6 | 	mov	local15, local09
18d94     02 C2 66 F0 | 	shl	local15, #2
18d98     E7 C4 02 F6 | 	mov	local16, fp
18d9c     2C C4 06 F1 | 	add	local16, #44
18da0     62 C3 02 F1 | 	add	local15, local16
18da4     61 93 02 FB | 	rdlong	arg01, local15
18da8     94 E0 BE FD | 	call	#_isint
18dac     07 7A 66 F7 | 	signx	result1, #7
18db0     3D BF 2A F5 | 	andn	local13, result1 wz
18db4     54 00 00 5F 
18db8     EC 64 06 51 |  if_ne	add	objptr, ##43244
18dbc     32 3D 68 5C |  if_ne	wrlong	#30, objptr
18dc0     54 00 00 5F 
18dc4     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18dc8                 | '   if isint(args(i)) then r=result_int 
18dc8     5B AD 02 F6 | 	mov	local04, local09
18dcc     02 AC 66 F0 | 	shl	local04, #2
18dd0     E7 AE 02 F6 | 	mov	local05, fp
18dd4     2C AE 06 F1 | 	add	local05, #44
18dd8     57 AD 02 F1 | 	add	local04, local05
18ddc     56 93 02 FB | 	rdlong	arg01, local04
18de0     5C E0 BE FD | 	call	#_isint
18de4     00 7A 0E F2 | 	cmp	result1, #0 wz
18de8     54 00 00 5F 
18dec     EC 64 06 51 |  if_ne	add	objptr, ##43244
18df0     32 39 68 5C |  if_ne	wrlong	#28, objptr
18df4     54 00 00 5F 
18df8     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18dfc                 | '   if isdec(args(i)) then r=result_uint 
18dfc     5B AD 02 F6 | 	mov	local04, local09
18e00     02 AC 66 F0 | 	shl	local04, #2
18e04     E7 AE 02 F6 | 	mov	local05, fp
18e08     2C AE 06 F1 | 	add	local05, #44
18e0c     57 AD 02 F1 | 	add	local04, local05
18e10     56 93 02 FB | 	rdlong	arg01, local04
18e14     CC E2 BE FD | 	call	#_isdec
18e18     00 7A 0E F2 | 	cmp	result1, #0 wz
18e1c     54 00 00 5F 
18e20     EC 64 06 51 |  if_ne	add	objptr, ##43244
18e24     32 3B 68 5C |  if_ne	wrlong	#29, objptr
18e28     54 00 00 5F 
18e2c     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18e30                 | '   if not isnum(args(i)) then 
18e30     5B AF 02 F6 | 	mov	local05, local09
18e34     02 AE 66 F0 | 	shl	local05, #2
18e38     E7 B0 02 F6 | 	mov	local06, fp
18e3c     2C B0 06 F1 | 	add	local06, #44
18e40     58 AF 02 F1 | 	add	local05, local06
18e44     57 93 02 FB | 	rdlong	arg01, local05
18e48     08 DC BE FD | 	call	#_isnum
18e4c     07 7A 66 F7 | 	signx	result1, #7
18e50     3D 7B 22 F6 | 	not	result1, result1
18e54     00 7A 0E F2 | 	cmp	result1, #0 wz
18e58     FC 00 90 AD |  if_e	jmp	#LR__2098
18e5c     54 00 00 FF 
18e60     EC 64 06 F1 | 	add	objptr, ##43244
18e64     32 57 68 FC | 	wrlong	#43, objptr
18e68     54 00 00 FF 
18e6c     EC 64 86 F1 | 	sub	objptr, ##43244
18e70     5B AD 02 F6 | 	mov	local04, local09
18e74     02 AC 66 F0 | 	shl	local04, #2
18e78     E7 AE 02 F6 | 	mov	local05, fp
18e7c     2C AE 06 F1 | 	add	local05, #44
18e80     57 AD 02 F1 | 	add	local04, local05
18e84     56 93 02 FB | 	rdlong	arg01, local04
18e88     49 BD 02 F6 | 	mov	local12, arg01
18e8c     D7 06 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
18e90                 | LR__2094
18e90     5E 7B CA FA | 	rdbyte	result1, local12 wz
18e94     01 BC 06 51 |  if_ne	add	local12, #1
18e98     F4 FF 9F 5D |  if_ne	jmp	#LR__2094
18e9c                 | LR__2095
18e9c     49 BD 82 F1 | 	sub	local12, arg01
18ea0     5E C7 02 F6 | 	mov	local17, local12
18ea4     54 00 00 FF 
18ea8     74 64 06 F1 | 	add	objptr, ##43124
18eac     32 93 02 FB | 	rdlong	arg01, objptr
18eb0     63 93 82 F1 | 	sub	arg01, local17
18eb4     04 92 86 F1 | 	sub	arg01, #4
18eb8     03 92 26 F5 | 	andn	arg01, #3
18ebc     32 93 62 FC | 	wrlong	arg01, objptr
18ec0     54 00 00 FF 
18ec4     74 64 86 F1 | 	sub	objptr, ##43124
18ec8     63 95 02 F6 | 	mov	arg02, local17
18ecc     A0 7F B0 FD | 	call	#_pslpoke
18ed0                 | '     pslpoke memtop,l
18ed0                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
18ed0     01 B4 06 F6 | 	mov	local08, #1
18ed4     63 C9 02 F6 | 	mov	local18, local17
18ed8     01 C8 06 F1 | 	add	local18, #1
18edc                 | LR__2096
18edc     64 B5 52 F2 | 	cmps	local08, local18 wc
18ee0     60 00 90 3D |  if_ae	jmp	#LR__2097
18ee4     54 00 00 FF 
18ee8     74 64 06 F1 | 	add	objptr, ##43124
18eec     32 BF 02 FB | 	rdlong	local13, objptr
18ef0     54 00 00 FF 
18ef4     74 64 86 F1 | 	sub	objptr, ##43124
18ef8     03 BE 06 F1 | 	add	local13, #3
18efc     5A BF 02 F1 | 	add	local13, local08
18f00     5B C3 02 F6 | 	mov	local15, local09
18f04     02 C2 66 F0 | 	shl	local15, #2
18f08     E7 C4 02 F6 | 	mov	local16, fp
18f0c     2C C4 06 F1 | 	add	local16, #44
18f10     62 C3 02 F1 | 	add	local15, local16
18f14     61 93 02 FB | 	rdlong	arg01, local15
18f18     5A B1 02 F6 | 	mov	local06, local08
18f1c     01 C2 06 F6 | 	mov	local15, #1
18f20     58 95 02 F6 | 	mov	arg02, local06
18f24     01 96 06 F6 | 	mov	arg03, #1
18f28     90 D4 B0 FD | 	call	#__system__Mid_S
18f2c     3D AF 02 F6 | 	mov	local05, result1
18f30     57 95 C2 FA | 	rdbyte	arg02, local05
18f34     5F 93 02 F6 | 	mov	arg01, local13
18f38     C4 7F B0 FD | 	call	#_pspoke
18f3c     01 B4 06 F1 | 	add	local08, #1
18f40     98 FF 9F FD | 	jmp	#LR__2096
18f44                 | LR__2097
18f44     54 00 00 FF 
18f48     74 64 06 F1 | 	add	objptr, ##43124
18f4c     32 CB 02 FB | 	rdlong	local19, objptr
18f50     54 00 00 FF 
18f54     74 64 86 F1 | 	sub	objptr, ##43124
18f58                 | LR__2098
18f58     14 47 BF FD | 	call	#_pop
18f5c     3E CD 02 F6 | 	mov	local20, result2
18f60     3F AD 02 F6 | 	mov	local04, result3
18f64     3D A7 02 F6 | 	mov	local01, result1
18f68     66 A9 02 F6 | 	mov	local02, local20
18f6c     56 AB 02 F6 | 	mov	local03, local04
18f70                 | '   t1=pop() 
18f70                 | '   if i>=numpar-j then
18f70     59 BF 02 F6 | 	mov	local13, local07
18f74     5A BF 82 F1 | 	sub	local13, local08
18f78     5F B7 52 F2 | 	cmps	local09, local13 wc
18f7c     D0 04 90 CD |  if_b	jmp	#LR__2126
18f80     54 CF 02 F6 | 	mov	local21, local02
18f84                 | '     vartype=t1.result.twowords(1)
18f84                 | '     select case vartype
18f84     67 D1 0A F6 | 	mov	local22, local21 wz
18f88     64 00 90 AD |  if_e	jmp	#LR__2099
18f8c     00 D1 0E F2 | 	cmp	local22, #256 wz
18f90     64 00 90 AD |  if_e	jmp	#LR__2100
18f94     01 D1 0E F2 | 	cmp	local22, #257 wz
18f98     64 00 90 AD |  if_e	jmp	#LR__2101
18f9c     02 D1 0E F2 | 	cmp	local22, #258 wz
18fa0     64 00 90 AD |  if_e	jmp	#LR__2102
18fa4     03 D1 0E F2 | 	cmp	local22, #259 wz
18fa8     64 00 90 AD |  if_e	jmp	#LR__2103
18fac     04 D1 0E F2 | 	cmp	local22, #260 wz
18fb0     64 00 90 AD |  if_e	jmp	#LR__2104
18fb4     05 D1 0E F2 | 	cmp	local22, #261 wz
18fb8     64 00 90 AD |  if_e	jmp	#LR__2105
18fbc     06 D1 0E F2 | 	cmp	local22, #262 wz
18fc0     64 00 90 AD |  if_e	jmp	#LR__2106
18fc4     07 D1 0E F2 | 	cmp	local22, #263 wz
18fc8     64 00 90 AD |  if_e	jmp	#LR__2107
18fcc     08 D1 0E F2 | 	cmp	local22, #264 wz
18fd0     64 00 90 AD |  if_e	jmp	#LR__2108
18fd4     09 D1 0E F2 | 	cmp	local22, #265 wz
18fd8     64 00 90 AD |  if_e	jmp	#LR__2109
18fdc     0A D1 0E F2 | 	cmp	local22, #266 wz
18fe0     64 00 90 AD |  if_e	jmp	#LR__2110
18fe4     0B D1 0E F2 | 	cmp	local22, #267 wz
18fe8     64 00 90 AD |  if_e	jmp	#LR__2111
18fec     68 00 90 FD | 	jmp	#LR__2112
18ff0                 | LR__2099
18ff0     0C D2 06 F6 | 	mov	local23, #12
18ff4     64 00 90 FD | 	jmp	#LR__2113
18ff8                 | LR__2100
18ff8     0C D2 06 F6 | 	mov	local23, #12
18ffc     5C 00 90 FD | 	jmp	#LR__2113
19000                 | LR__2101
19000     01 D2 06 F6 | 	mov	local23, #1
19004     54 00 90 FD | 	jmp	#LR__2113
19008                 | LR__2102
19008     01 D2 06 F6 | 	mov	local23, #1
1900c     4C 00 90 FD | 	jmp	#LR__2113
19010                 | LR__2103
19010     02 D2 06 F6 | 	mov	local23, #2
19014     44 00 90 FD | 	jmp	#LR__2113
19018                 | LR__2104
19018     02 D2 06 F6 | 	mov	local23, #2
1901c     3C 00 90 FD | 	jmp	#LR__2113
19020                 | LR__2105
19020     04 D2 06 F6 | 	mov	local23, #4
19024     34 00 90 FD | 	jmp	#LR__2113
19028                 | LR__2106
19028     04 D2 06 F6 | 	mov	local23, #4
1902c     2C 00 90 FD | 	jmp	#LR__2113
19030                 | LR__2107
19030     08 D2 06 F6 | 	mov	local23, #8
19034     24 00 90 FD | 	jmp	#LR__2113
19038                 | LR__2108
19038     08 D2 06 F6 | 	mov	local23, #8
1903c     1C 00 90 FD | 	jmp	#LR__2113
19040                 | LR__2109
19040     06 D2 06 F6 | 	mov	local23, #6
19044     14 00 90 FD | 	jmp	#LR__2113
19048                 | LR__2110
19048     08 D2 06 F6 | 	mov	local23, #8
1904c     0C 00 90 FD | 	jmp	#LR__2113
19050                 | LR__2111
19050     05 D2 06 F6 | 	mov	local23, #5
19054     04 00 90 FD | 	jmp	#LR__2113
19058                 | LR__2112
19058     0C D2 06 F6 | 	mov	local23, #12
1905c                 | LR__2113
1905c                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1905c     0C D2 0E F2 | 	cmp	local23, #12 wz
19060     34 01 90 5D |  if_ne	jmp	#LR__2117
19064     00 04 00 FF 
19068     00 A6 16 F2 | 	cmp	local01, ##524288 wc
1906c     28 01 90 3D |  if_ae	jmp	#LR__2117
19070                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
19070     54 00 00 FF 
19074     EC 64 06 F1 | 	add	objptr, ##43244
19078     32 BF 02 FB | 	rdlong	local13, objptr
1907c     54 00 00 FF 
19080     EC 64 86 F1 | 	sub	objptr, ##43244
19084     1C BE 0E F2 | 	cmp	local13, #28 wz
19088     2C 00 90 5D |  if_ne	jmp	#LR__2114
1908c     5B AF 02 F6 | 	mov	local05, local09
19090     02 AE 66 F0 | 	shl	local05, #2
19094     E7 B0 02 F6 | 	mov	local06, fp
19098     2C B0 06 F1 | 	add	local06, #44
1909c     58 AF 02 F1 | 	add	local05, local06
190a0     57 93 02 FB | 	rdlong	arg01, local05
190a4     00 94 06 F6 | 	mov	arg02, #0
190a8     A4 E6 B0 FD | 	call	#__system____builtin_atoi
190ac     3D 95 02 F6 | 	mov	arg02, result1
190b0     53 93 02 F6 | 	mov	arg01, local01
190b4     49 95 62 FC | 	wrlong	arg02, arg01
190b8                 | LR__2114
190b8                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
190b8     54 00 00 FF 
190bc     EC 64 06 F1 | 	add	objptr, ##43244
190c0     32 BF 02 FB | 	rdlong	local13, objptr
190c4     54 00 00 FF 
190c8     EC 64 86 F1 | 	sub	objptr, ##43244
190cc     1D BE 0E F2 | 	cmp	local13, #29 wz
190d0     2C 00 90 5D |  if_ne	jmp	#LR__2115
190d4     5B AF 02 F6 | 	mov	local05, local09
190d8     02 AE 66 F0 | 	shl	local05, #2
190dc     E7 B0 02 F6 | 	mov	local06, fp
190e0     2C B0 06 F1 | 	add	local06, #44
190e4     58 AF 02 F1 | 	add	local05, local06
190e8     57 93 02 FB | 	rdlong	arg01, local05
190ec     00 94 06 F6 | 	mov	arg02, #0
190f0     5C E6 B0 FD | 	call	#__system____builtin_atoi
190f4     3D 95 02 F6 | 	mov	arg02, result1
190f8     53 93 02 F6 | 	mov	arg01, local01
190fc     49 95 62 FC | 	wrlong	arg02, arg01
19100                 | LR__2115
19100                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
19100     54 00 00 FF 
19104     EC 64 06 F1 | 	add	objptr, ##43244
19108     32 BF 02 FB | 	rdlong	local13, objptr
1910c     54 00 00 FF 
19110     EC 64 86 F1 | 	sub	objptr, ##43244
19114     1E BE 0E F2 | 	cmp	local13, #30 wz
19118     3C 00 90 5D |  if_ne	jmp	#LR__2116
1911c     5B AD 02 F6 | 	mov	local04, local09
19120     02 AC 66 F0 | 	shl	local04, #2
19124     E7 AE 02 F6 | 	mov	local05, fp
19128     2C AE 06 F1 | 	add	local05, #44
1912c     57 AD 02 F1 | 	add	local04, local05
19130     56 93 02 FB | 	rdlong	arg01, local04
19134     B0 E7 B0 FD | 	call	#__system____builtin_atof
19138     28 CE 05 F1 | 	add	fp, #40
1913c     E7 7A 62 FC | 	wrlong	result1, fp
19140     E7 92 02 F6 | 	mov	arg01, fp
19144     28 CE 85 F1 | 	sub	fp, #40
19148     49 7B 02 FB | 	rdlong	result1, arg01
1914c     3D 95 02 F6 | 	mov	arg02, result1
19150     53 93 02 F6 | 	mov	arg01, local01
19154     49 95 62 FC | 	wrlong	arg02, arg01
19158                 | LR__2116
19158                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19158     54 00 00 FF 
1915c     EC 64 06 F1 | 	add	objptr, ##43244
19160     32 BF 02 FB | 	rdlong	local13, objptr
19164     2B BE 0E F2 | 	cmp	local13, #43 wz
19168     53 93 02 A6 |  if_e	mov	arg01, local01
1916c     65 95 02 A6 |  if_e	mov	arg02, local19
19170     49 95 62 AC |  if_e	wrlong	arg02, arg01
19174     53 BF 02 F6 | 	mov	local13, local01
19178     08 BE 06 F1 | 	add	local13, #8
1917c     32 AD 02 FB | 	rdlong	local04, objptr
19180     54 00 00 FF 
19184     EC 64 86 F1 | 	sub	objptr, ##43244
19188     56 CD 02 F6 | 	mov	local20, local04
1918c     5F 93 02 F6 | 	mov	arg01, local13
19190     66 95 02 F6 | 	mov	arg02, local20
19194     49 95 62 FC | 	wrlong	arg02, arg01
19198                 | LR__2117
19198                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19198     0C D2 0E F2 | 	cmp	local23, #12 wz
1919c     38 01 90 5D |  if_ne	jmp	#LR__2121
191a0     00 04 00 FF 
191a4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
191a8     2C 01 90 CD |  if_b	jmp	#LR__2121
191ac                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
191ac     54 00 00 FF 
191b0     EC 64 06 F1 | 	add	objptr, ##43244
191b4     32 BF 02 FB | 	rdlong	local13, objptr
191b8     54 00 00 FF 
191bc     EC 64 86 F1 | 	sub	objptr, ##43244
191c0     1C BE 0E F2 | 	cmp	local13, #28 wz
191c4     2C 00 90 5D |  if_ne	jmp	#LR__2118
191c8     5B AF 02 F6 | 	mov	local05, local09
191cc     02 AE 66 F0 | 	shl	local05, #2
191d0     E7 B0 02 F6 | 	mov	local06, fp
191d4     2C B0 06 F1 | 	add	local06, #44
191d8     58 AF 02 F1 | 	add	local05, local06
191dc     57 93 02 FB | 	rdlong	arg01, local05
191e0     00 94 06 F6 | 	mov	arg02, #0
191e4     68 E5 B0 FD | 	call	#__system____builtin_atoi
191e8     3D 95 02 F6 | 	mov	arg02, result1
191ec     53 93 02 F6 | 	mov	arg01, local01
191f0     7C 7C B0 FD | 	call	#_pslpoke
191f4                 | LR__2118
191f4                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
191f4     54 00 00 FF 
191f8     EC 64 06 F1 | 	add	objptr, ##43244
191fc     32 BF 02 FB | 	rdlong	local13, objptr
19200     54 00 00 FF 
19204     EC 64 86 F1 | 	sub	objptr, ##43244
19208     1D BE 0E F2 | 	cmp	local13, #29 wz
1920c     2C 00 90 5D |  if_ne	jmp	#LR__2119
19210     5B AF 02 F6 | 	mov	local05, local09
19214     02 AE 66 F0 | 	shl	local05, #2
19218     E7 B0 02 F6 | 	mov	local06, fp
1921c     2C B0 06 F1 | 	add	local06, #44
19220     58 AF 02 F1 | 	add	local05, local06
19224     57 93 02 FB | 	rdlong	arg01, local05
19228     00 94 06 F6 | 	mov	arg02, #0
1922c     20 E5 B0 FD | 	call	#__system____builtin_atoi
19230     3D 95 02 F6 | 	mov	arg02, result1
19234     53 93 02 F6 | 	mov	arg01, local01
19238     34 7C B0 FD | 	call	#_pslpoke
1923c                 | LR__2119
1923c                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1923c     54 00 00 FF 
19240     EC 64 06 F1 | 	add	objptr, ##43244
19244     32 BF 02 FB | 	rdlong	local13, objptr
19248     54 00 00 FF 
1924c     EC 64 86 F1 | 	sub	objptr, ##43244
19250     1E BE 0E F2 | 	cmp	local13, #30 wz
19254     38 00 90 5D |  if_ne	jmp	#LR__2120
19258     5B AD 02 F6 | 	mov	local04, local09
1925c     02 AC 66 F0 | 	shl	local04, #2
19260     E7 AE 02 F6 | 	mov	local05, fp
19264     2C AE 06 F1 | 	add	local05, #44
19268     57 AD 02 F1 | 	add	local04, local05
1926c     56 93 02 FB | 	rdlong	arg01, local04
19270     74 E6 B0 FD | 	call	#__system____builtin_atof
19274     28 CE 05 F1 | 	add	fp, #40
19278     E7 7A 62 FC | 	wrlong	result1, fp
1927c     E7 92 02 F6 | 	mov	arg01, fp
19280     28 CE 85 F1 | 	sub	fp, #40
19284     49 95 02 FB | 	rdlong	arg02, arg01
19288     53 93 02 F6 | 	mov	arg01, local01
1928c     E0 7B B0 FD | 	call	#_pslpoke
19290                 | LR__2120
19290                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
19290     54 00 00 FF 
19294     EC 64 06 F1 | 	add	objptr, ##43244
19298     32 BF 02 FB | 	rdlong	local13, objptr
1929c     54 00 00 FF 
192a0     EC 64 86 F1 | 	sub	objptr, ##43244
192a4     2B BE 0E F2 | 	cmp	local13, #43 wz
192a8     53 93 02 A6 |  if_e	mov	arg01, local01
192ac     65 95 02 A6 |  if_e	mov	arg02, local19
192b0     BC 7B B0 AD |  if_e	call	#_pslpoke
192b4     53 93 02 F6 | 	mov	arg01, local01
192b8     08 92 06 F1 | 	add	arg01, #8
192bc     54 00 00 FF 
192c0     EC 64 06 F1 | 	add	objptr, ##43244
192c4     32 CD 02 FB | 	rdlong	local20, objptr
192c8     54 00 00 FF 
192cc     EC 64 86 F1 | 	sub	objptr, ##43244
192d0     66 95 02 F6 | 	mov	arg02, local20
192d4     98 7B B0 FD | 	call	#_pslpoke
192d8                 | LR__2121
192d8                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
192d8     05 D2 0E F2 | 	cmp	local23, #5 wz
192dc     54 00 00 AF 
192e0     EC 64 06 A1 |  if_e	add	objptr, ##43244
192e4     32 CD 02 AB |  if_e	rdlong	local20, objptr
192e8     54 00 00 AF 
192ec     EC 64 86 A1 |  if_e	sub	objptr, ##43244
192f0     2B CC 0E A2 |  if_e	cmp	local20, #43 wz
192f4     65 CD 02 A6 |  if_e	mov	local20, local19
192f8     53 93 02 A6 |  if_e	mov	arg01, local01
192fc     66 95 02 A6 |  if_e	mov	arg02, local20
19300     6C 7B B0 AD |  if_e	call	#_pslpoke
19304                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
19304     04 D2 0E F2 | 	cmp	local23, #4 wz
19308     48 00 90 5D |  if_ne	jmp	#LR__2122
1930c     54 00 00 FF 
19310     EC 64 06 F1 | 	add	objptr, ##43244
19314     32 CD 02 FB | 	rdlong	local20, objptr
19318     54 00 00 FF 
1931c     EC 64 86 F1 | 	sub	objptr, ##43244
19320     2B CC 0E F2 | 	cmp	local20, #43 wz
19324     2C 00 90 AD |  if_e	jmp	#LR__2122
19328     5B AF 02 F6 | 	mov	local05, local09
1932c     02 AE 66 F0 | 	shl	local05, #2
19330     E7 B0 02 F6 | 	mov	local06, fp
19334     2C B0 06 F1 | 	add	local06, #44
19338     58 AF 02 F1 | 	add	local05, local06
1933c     57 93 02 FB | 	rdlong	arg01, local05
19340     00 94 06 F6 | 	mov	arg02, #0
19344     08 E4 B0 FD | 	call	#__system____builtin_atoi
19348     3D 95 02 F6 | 	mov	arg02, result1
1934c     53 93 02 F6 | 	mov	arg01, local01
19350     1C 7B B0 FD | 	call	#_pslpoke
19354                 | LR__2122
19354                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
19354     02 D2 0E F2 | 	cmp	local23, #2 wz
19358     48 00 90 5D |  if_ne	jmp	#LR__2123
1935c     54 00 00 FF 
19360     EC 64 06 F1 | 	add	objptr, ##43244
19364     32 CD 02 FB | 	rdlong	local20, objptr
19368     54 00 00 FF 
1936c     EC 64 86 F1 | 	sub	objptr, ##43244
19370     2B CC 0E F2 | 	cmp	local20, #43 wz
19374     2C 00 90 AD |  if_e	jmp	#LR__2123
19378     5B AF 02 F6 | 	mov	local05, local09
1937c     02 AE 66 F0 | 	shl	local05, #2
19380     E7 B0 02 F6 | 	mov	local06, fp
19384     2C B0 06 F1 | 	add	local06, #44
19388     58 AF 02 F1 | 	add	local05, local06
1938c     57 93 02 FB | 	rdlong	arg01, local05
19390     00 94 06 F6 | 	mov	arg02, #0
19394     B8 E3 B0 FD | 	call	#__system____builtin_atoi
19398     3D 95 02 F6 | 	mov	arg02, result1
1939c     53 93 02 F6 | 	mov	arg01, local01
193a0     14 7B B0 FD | 	call	#_psdpoke
193a4                 | LR__2123
193a4                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
193a4     01 D2 0E F2 | 	cmp	local23, #1 wz
193a8     48 00 90 5D |  if_ne	jmp	#LR__2124
193ac     54 00 00 FF 
193b0     EC 64 06 F1 | 	add	objptr, ##43244
193b4     32 CD 02 FB | 	rdlong	local20, objptr
193b8     54 00 00 FF 
193bc     EC 64 86 F1 | 	sub	objptr, ##43244
193c0     2B CC 0E F2 | 	cmp	local20, #43 wz
193c4     2C 00 90 AD |  if_e	jmp	#LR__2124
193c8     5B AF 02 F6 | 	mov	local05, local09
193cc     02 AE 66 F0 | 	shl	local05, #2
193d0     E7 B0 02 F6 | 	mov	local06, fp
193d4     2C B0 06 F1 | 	add	local06, #44
193d8     58 AF 02 F1 | 	add	local05, local06
193dc     57 93 02 FB | 	rdlong	arg01, local05
193e0     00 94 06 F6 | 	mov	arg02, #0
193e4     68 E3 B0 FD | 	call	#__system____builtin_atoi
193e8     3D 95 02 F6 | 	mov	arg02, result1
193ec     53 93 02 F6 | 	mov	arg01, local01
193f0     0C 7B B0 FD | 	call	#_pspoke
193f4                 | LR__2124
193f4                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
193f4     06 D2 0E F2 | 	cmp	local23, #6 wz
193f8     54 00 90 5D |  if_ne	jmp	#LR__2125
193fc     54 00 00 FF 
19400     EC 64 06 F1 | 	add	objptr, ##43244
19404     32 CD 02 FB | 	rdlong	local20, objptr
19408     54 00 00 FF 
1940c     EC 64 86 F1 | 	sub	objptr, ##43244
19410     2B CC 0E F2 | 	cmp	local20, #43 wz
19414     38 00 90 AD |  if_e	jmp	#LR__2125
19418     5B AD 02 F6 | 	mov	local04, local09
1941c     02 AC 66 F0 | 	shl	local04, #2
19420     E7 AE 02 F6 | 	mov	local05, fp
19424     2C AE 06 F1 | 	add	local05, #44
19428     57 AD 02 F1 | 	add	local04, local05
1942c     56 93 02 FB | 	rdlong	arg01, local04
19430     B4 E4 B0 FD | 	call	#__system____builtin_atof
19434     28 CE 05 F1 | 	add	fp, #40
19438     E7 7A 62 FC | 	wrlong	result1, fp
1943c     E7 92 02 F6 | 	mov	arg01, fp
19440     28 CE 85 F1 | 	sub	fp, #40
19444     49 95 02 FB | 	rdlong	arg02, arg01
19448     53 93 02 F6 | 	mov	arg01, local01
1944c     20 7A B0 FD | 	call	#_pslpoke
19450                 | LR__2125
19450                 | LR__2126
19450     01 B6 06 F1 | 	add	local09, #1
19454     10 F9 9F FD | 	jmp	#LR__2093
19458                 | LR__2127
19458                 | LR__2128
19458     E7 F0 03 F6 | 	mov	ptra, fp
1945c     F2 00 A0 FD | 	call	#popregs_
19460                 | _do_read_ret
19460     2D 00 64 FD | 	ret
19464                 | 
19464                 | ' 
19464                 | ' '------------------- release
19464                 | ' 
19464                 | ' sub do_release
19464                 | _do_release
19464     00 CA 05 F6 | 	mov	COUNT_, #0
19468     E8 00 A0 FD | 	call	#pushregs_
1946c     10 F0 07 F1 | 	add	ptra, #16
19470     FC 41 BF FD | 	call	#_pop
19474     3F 95 02 F6 | 	mov	arg02, result3
19478     E7 7A 62 FC | 	wrlong	result1, fp
1947c     04 CE 05 F1 | 	add	fp, #4
19480     E7 7C 62 FC | 	wrlong	result2, fp
19484     04 CE 05 F1 | 	add	fp, #4
19488     E7 94 62 FC | 	wrlong	arg02, fp
1948c     08 CE 85 F1 | 	sub	fp, #8
19490     E7 92 02 F6 | 	mov	arg01, fp
19494     B4 43 BF FD | 	call	#_converttoint
19498                 | ' 
19498                 | ' t1=pop()
19498                 | ' channel=converttoint(t1)
19498                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19498     00 7A 56 F2 | 	cmps	result1, #0 wc
1949c     2C 00 90 CD |  if_b	jmp	#LR__2130
194a0     08 7A 56 F2 | 	cmps	result1, #8 wc
194a4     24 00 90 3D |  if_ae	jmp	#LR__2130
194a8     38 00 00 FF 
194ac     B4 65 06 F1 | 	add	objptr, ##29108
194b0     32 93 02 FB | 	rdlong	arg01, objptr
194b4     38 00 00 FF 
194b8     B4 65 86 F1 | 	sub	objptr, ##29108
194bc     06 7A 66 F0 | 	shl	result1, #6
194c0     3D 93 02 F1 | 	add	arg01, result1
194c4     2C 92 06 F1 | 	add	arg01, #44
194c8     49 FF 69 FC | 	wrlong	#255, arg01
194cc                 | LR__2130
194cc     E7 F0 03 F6 | 	mov	ptra, fp
194d0     F2 00 A0 FD | 	call	#popregs_
194d4                 | _do_release_ret
194d4     2D 00 64 FD | 	ret
194d8                 | 
194d8                 | ' 
194d8                 | ' '------------------- restore
194d8                 | ' 
194d8                 | ' sub do_restore()
194d8                 | _do_restore
194d8     4C 00 00 FF 
194dc     2C 64 06 F1 | 	add	objptr, ##38956
194e0     32 81 02 FB | 	rdlong	_var01, objptr
194e4     06 00 00 FF 
194e8     A4 64 06 F1 | 	add	objptr, ##3236
194ec     32 81 62 FC | 	wrlong	_var01, objptr
194f0     98 01 00 FF 
194f4     1E 81 06 F6 | 	mov	_var01, ##@LR__6077
194f8     01 00 00 FF 
194fc     E8 65 06 F1 | 	add	objptr, ##1000
19500     32 81 62 FC | 	wrlong	_var01, objptr
19504     54 00 00 FF 
19508     B8 64 86 F1 | 	sub	objptr, ##43192
1950c                 | _do_restore_ret
1950c     2D 00 64 FD | 	ret
19510                 | 
19510                 | ' 
19510                 | ' '------------------- restorepalette
19510                 | ' 
19510                 | ' sub do_restorepalette()
19510                 | _do_restorepalette
19510     2C 82 B0 FD | 	call	#_hg010b_spin2_restorepalette
19514                 | _do_restorepalette_ret
19514     2D 00 64 FD | 	ret
19518                 | 
19518                 | ' '------------------- return
19518                 | ' 
19518                 | ' sub do_return()
19518                 | _do_return
19518                 | ' if gosubtop>0 then
19518     52 00 00 FF 
1951c     D8 64 06 F1 | 	add	objptr, ##42200
19520     32 81 02 FB | 	rdlong	_var01, objptr
19524     52 00 00 FF 
19528     D8 64 86 F1 | 	sub	objptr, ##42200
1952c     01 80 56 F2 | 	cmps	_var01, #1 wc
19530     8C 00 90 CD |  if_b	jmp	#LR__2140
19534     52 00 00 FF 
19538     D8 64 06 F1 | 	add	objptr, ##42200
1953c     32 81 02 FB | 	rdlong	_var01, objptr
19540     03 80 66 F0 | 	shl	_var01, #3
19544     03 00 00 FF 
19548     88 65 86 F1 | 	sub	objptr, ##1928
1954c     32 81 02 F1 | 	add	_var01, objptr
19550     40 81 02 FB | 	rdlong	_var01, _var01
19554     03 00 00 FF 
19558     0C 65 06 F1 | 	add	objptr, ##1804
1955c     32 81 62 FC | 	wrlong	_var01, objptr
19560     7C 64 06 F1 | 	add	objptr, #124
19564     32 81 02 FB | 	rdlong	_var01, objptr
19568     03 80 66 F0 | 	shl	_var01, #3
1956c     03 00 00 FF 
19570     88 65 86 F1 | 	sub	objptr, ##1928
19574     32 81 02 F1 | 	add	_var01, objptr
19578     04 80 06 F1 | 	add	_var01, #4
1957c     40 81 02 FB | 	rdlong	_var01, _var01
19580     03 00 00 FF 
19584     10 65 06 F1 | 	add	objptr, ##1808
19588     32 81 62 FC | 	wrlong	_var01, objptr
1958c     06 00 00 FF 
19590     40 64 86 F1 | 	sub	objptr, ##3136
19594     32 81 02 FB | 	rdlong	_var01, objptr
19598     01 80 86 F1 | 	sub	_var01, #1
1959c     04 64 06 F1 | 	add	objptr, #4
195a0     32 81 62 FC | 	wrlong	_var01, objptr
195a4     06 00 00 FF 
195a8     B4 64 06 F1 | 	add	objptr, ##3252
195ac     32 81 02 FB | 	rdlong	_var01, objptr
195b0     01 80 86 F1 | 	sub	_var01, #1
195b4     32 81 62 FC | 	wrlong	_var01, objptr
195b8     52 00 00 FF 
195bc     D8 64 86 F1 | 	sub	objptr, ##42200
195c0                 | LR__2140
195c0                 | _do_return_ret
195c0     2D 00 64 FD | 	ret
195c4                 | 
195c4                 | ' 
195c4                 | ' '------------------- right$
195c4                 | ' 
195c4                 | ' sub do_right
195c4                 | _do_right
195c4     01 CA 05 F6 | 	mov	COUNT_, #1
195c8     E8 00 A0 FD | 	call	#pushregs_
195cc     14 F0 07 F1 | 	add	ptra, #20
195d0     4C 00 00 FF 
195d4     24 64 06 F1 | 	add	objptr, ##38948
195d8     32 97 02 FB | 	rdlong	arg03, objptr
195dc     4B 95 02 F6 | 	mov	arg02, arg03
195e0     01 94 66 F0 | 	shl	arg02, #1
195e4     4B 95 02 F1 | 	add	arg02, arg03
195e8     02 94 66 F0 | 	shl	arg02, #2
195ec     03 00 00 FF 
195f0     04 64 86 F1 | 	sub	objptr, ##1540
195f4     32 95 02 F1 | 	add	arg02, objptr
195f8     4A 97 02 FB | 	rdlong	arg03, arg02
195fc                 | ' 
195fc                 | ' numpar=compiledline(lineptr_e).result.uresult
195fc                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
195fc     02 96 0E F2 | 	cmp	arg03, #2 wz
19600     49 00 00 FF 
19604     20 64 86 F1 | 	sub	objptr, ##37408
19608     40 00 90 AD |  if_e	jmp	#LR__2150
1960c     00 92 06 F6 | 	mov	arg01, #0
19610     6C 09 B1 FD | 	call	#__system___getiolock_0622
19614     3D 93 02 F6 | 	mov	arg01, result1
19618     E0 B3 B0 FD | 	call	#__system___lockmem
1961c     98 01 00 FF 
19620     1F 95 06 F6 | 	mov	arg02, ##@LR__6078
19624     00 92 06 F6 | 	mov	arg01, #0
19628     00 96 06 F6 | 	mov	arg03, #0
1962c     C0 C0 B0 FD | 	call	#__system___basic_print_string
19630     00 92 06 F6 | 	mov	arg01, #0
19634     48 09 B1 FD | 	call	#__system___getiolock_0622
19638     3D 01 68 FC | 	wrlong	#0, result1
1963c     27 92 06 F6 | 	mov	arg01, #39
19640     00 94 06 F6 | 	mov	arg02, #0
19644     8C 76 B0 FD | 	call	#_printerror
19648     D8 00 90 FD | 	jmp	#LR__2153
1964c                 | LR__2150
1964c     20 40 BF FD | 	call	#_pop
19650     3F 97 02 F6 | 	mov	arg03, result3
19654     E7 7A 62 FC | 	wrlong	result1, fp
19658     04 CE 05 F1 | 	add	fp, #4
1965c     E7 7C 62 FC | 	wrlong	result2, fp
19660     04 CE 05 F1 | 	add	fp, #4
19664     E7 96 62 FC | 	wrlong	arg03, fp
19668     08 CE 85 F1 | 	sub	fp, #8
1966c     E7 92 02 F6 | 	mov	arg01, fp
19670     D8 41 BF FD | 	call	#_converttoint
19674     3D A7 02 F6 | 	mov	local01, result1
19678     F4 3F BF FD | 	call	#_pop
1967c     3F 97 02 F6 | 	mov	arg03, result3
19680     E7 7A 62 FC | 	wrlong	result1, fp
19684     04 CE 05 F1 | 	add	fp, #4
19688     E7 7C 62 FC | 	wrlong	result2, fp
1968c     04 CE 05 F1 | 	add	fp, #4
19690     E7 96 62 FC | 	wrlong	arg03, fp
19694                 | ' t1=pop() : arg=converttoint(t1)
19694                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19694     08 CE 85 F1 | 	sub	fp, #8
19698     2B 96 0E F2 | 	cmp	arg03, #43 wz
1969c     18 00 90 5D |  if_ne	jmp	#LR__2151
196a0     E7 92 02 FB | 	rdlong	arg01, fp
196a4     38 41 BF FD | 	call	#_convertstring
196a8     E7 7A 62 FC | 	wrlong	result1, fp
196ac     08 CE 05 F1 | 	add	fp, #8
196b0     E7 3E 68 FC | 	wrlong	#31, fp
196b4     08 CE 85 F1 | 	sub	fp, #8
196b8                 | LR__2151
196b8                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
196b8     08 CE 05 F1 | 	add	fp, #8
196bc     E7 96 02 FB | 	rdlong	arg03, fp
196c0     08 CE 85 F1 | 	sub	fp, #8
196c4     1F 96 0E F2 | 	cmp	arg03, #31 wz
196c8     40 00 90 AD |  if_e	jmp	#LR__2152
196cc     00 92 06 F6 | 	mov	arg01, #0
196d0     AC 08 B1 FD | 	call	#__system___getiolock_0622
196d4     3D 93 02 F6 | 	mov	arg01, result1
196d8     20 B3 B0 FD | 	call	#__system___lockmem
196dc     98 01 00 FF 
196e0     28 95 06 F6 | 	mov	arg02, ##@LR__6079
196e4     00 92 06 F6 | 	mov	arg01, #0
196e8     00 96 06 F6 | 	mov	arg03, #0
196ec     00 C0 B0 FD | 	call	#__system___basic_print_string
196f0     00 92 06 F6 | 	mov	arg01, #0
196f4     88 08 B1 FD | 	call	#__system___getiolock_0622
196f8     3D 01 68 FC | 	wrlong	#0, result1
196fc     0F 92 06 F6 | 	mov	arg01, #15
19700     00 94 06 F6 | 	mov	arg02, #0
19704     CC 75 B0 FD | 	call	#_printerror
19708     18 00 90 FD | 	jmp	#LR__2153
1970c                 | LR__2152
1970c     E7 92 02 FB | 	rdlong	arg01, fp
19710     53 95 02 F6 | 	mov	arg02, local01
19714     14 CC B0 FD | 	call	#__system__Right_S
19718     E7 7A 62 FC | 	wrlong	result1, fp
1971c     E7 92 02 F6 | 	mov	arg01, fp
19720     DC 3F BF FD | 	call	#_push
19724                 | LR__2153
19724     E7 F0 03 F6 | 	mov	ptra, fp
19728     F2 00 A0 FD | 	call	#popregs_
1972c                 | _do_right_ret
1972c     2D 00 64 FD | 	ret
19730                 | 
19730                 | ' 
19730                 | ' '------------------- rnd
19730                 | ' 
19730                 | ' sub do_rnd
19730                 | _do_rnd
19730     02 CA 05 F6 | 	mov	COUNT_, #2
19734     E8 00 A0 FD | 	call	#pushregs_
19738     10 F0 07 F1 | 	add	ptra, #16
1973c     4C 00 00 FF 
19740     24 64 06 F1 | 	add	objptr, ##38948
19744     32 A7 02 FB | 	rdlong	local01, objptr
19748     53 97 02 F6 | 	mov	arg03, local01
1974c     01 96 66 F0 | 	shl	arg03, #1
19750     53 97 02 F1 | 	add	arg03, local01
19754     02 96 66 F0 | 	shl	arg03, #2
19758     03 00 00 FF 
1975c     04 64 86 F1 | 	sub	objptr, ##1540
19760     32 97 02 F1 | 	add	arg03, objptr
19764     4B A9 02 FB | 	rdlong	local02, arg03
19768                 | ' 
19768                 | ' numpar=compiledline(lineptr_e).result.uresult
19768                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19768     02 A8 16 F2 | 	cmp	local02, #2 wc
1976c     49 00 00 FF 
19770     20 64 86 F1 | 	sub	objptr, ##37408
19774     40 00 90 CD |  if_b	jmp	#LR__2160
19778     00 92 06 F6 | 	mov	arg01, #0
1977c     00 08 B1 FD | 	call	#__system___getiolock_0622
19780     3D 93 02 F6 | 	mov	arg01, result1
19784     74 B2 B0 FD | 	call	#__system___lockmem
19788     98 01 00 FF 
1978c     31 95 06 F6 | 	mov	arg02, ##@LR__6080
19790     00 92 06 F6 | 	mov	arg01, #0
19794     00 96 06 F6 | 	mov	arg03, #0
19798     54 BF B0 FD | 	call	#__system___basic_print_string
1979c     00 92 06 F6 | 	mov	arg01, #0
197a0     DC 07 B1 FD | 	call	#__system___getiolock_0622
197a4     3D 01 68 FC | 	wrlong	#0, result1
197a8     27 92 06 F6 | 	mov	arg01, #39
197ac     00 94 06 F6 | 	mov	arg02, #0
197b0     20 75 B0 FD | 	call	#_printerror
197b4     28 01 90 FD | 	jmp	#LR__2167
197b8                 | LR__2160
197b8                 | ' if numpar=0 then
197b8     00 A8 0E F2 | 	cmp	local02, #0 wz
197bc     20 00 90 5D |  if_ne	jmp	#LR__2161
197c0     08 CE 05 F1 | 	add	fp, #8
197c4     E7 3A 68 FC | 	wrlong	#29, fp
197c8     08 CE 85 F1 | 	sub	fp, #8
197cc     1B 7A 62 FD | 	getrnd	result1
197d0     E7 7A 62 FC | 	wrlong	result1, fp
197d4     E7 92 02 F6 | 	mov	arg01, fp
197d8     24 3F BF FD | 	call	#_push
197dc     00 01 90 FD | 	jmp	#LR__2166
197e0                 | LR__2161
197e0     8C 3E BF FD | 	call	#_pop
197e4     E7 7A 62 FC | 	wrlong	result1, fp
197e8     04 CE 05 F1 | 	add	fp, #4
197ec     E7 7C 62 FC | 	wrlong	result2, fp
197f0     04 CE 05 F1 | 	add	fp, #4
197f4     E7 7E 62 FC | 	wrlong	result3, fp
197f8                 | '   t1=pop()
197f8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
197f8     08 CE 85 F1 | 	sub	fp, #8
197fc     1C 7E 0E F2 | 	cmp	result3, #28 wz
19800     08 CE 05 51 |  if_ne	add	fp, #8
19804     E7 A6 02 5B |  if_ne	rdlong	local01, fp
19808     08 CE 85 51 |  if_ne	sub	fp, #8
1980c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
19810     2C 00 90 5D |  if_ne	jmp	#LR__2162
19814     1B 7A 62 FD | 	getrnd	result1
19818     E7 A6 02 FB | 	rdlong	local01, fp
1981c     53 7B 12 FD | 	qdiv	result1, local01
19820     E7 92 02 F6 | 	mov	arg01, fp
19824     19 A8 62 FD | 	getqy	local02
19828     E7 A8 62 FC | 	wrlong	local02, fp
1982c     08 CE 05 F1 | 	add	fp, #8
19830     E7 3A 68 FC | 	wrlong	#29, fp
19834     08 CE 85 F1 | 	sub	fp, #8
19838     C4 3E BF FD | 	call	#_push
1983c     A0 00 90 FD | 	jmp	#LR__2165
19840                 | LR__2162
19840     08 CE 05 F1 | 	add	fp, #8
19844     E7 A8 02 FB | 	rdlong	local02, fp
19848     08 CE 85 F1 | 	sub	fp, #8
1984c     1E A8 0E F2 | 	cmp	local02, #30 wz
19850     48 00 90 5D |  if_ne	jmp	#LR__2163
19854     E7 92 02 FB | 	rdlong	arg01, fp
19858     00 C0 24 FF 
1985c     00 94 06 F6 | 	mov	arg02, ##1233125376
19860     6C DA B0 FD | 	call	#__system___float_div
19864     3D A9 02 F6 | 	mov	local02, result1
19868     1B 92 62 FD | 	getrnd	arg01
1986c     74 93 06 F4 | 	bitl	arg01, #372
19870     54 D4 B0 FD | 	call	#__system___float_fromuns
19874     3D 95 02 F6 | 	mov	arg02, result1
19878     54 93 02 F6 | 	mov	arg01, local02
1987c     4C D8 B0 FD | 	call	#__system___float_mul
19880     E7 7A 62 FC | 	wrlong	result1, fp
19884     08 CE 05 F1 | 	add	fp, #8
19888     E7 3C 68 FC | 	wrlong	#30, fp
1988c     08 CE 85 F1 | 	sub	fp, #8
19890     E7 92 02 F6 | 	mov	arg01, fp
19894     68 3E BF FD | 	call	#_push
19898     44 00 90 FD | 	jmp	#LR__2164
1989c                 | LR__2163
1989c                 | '     print "rnd: "; : printerror(40) 
1989c     00 92 06 F6 | 	mov	arg01, #0
198a0     DC 06 B1 FD | 	call	#__system___getiolock_0622
198a4     3D 93 02 F6 | 	mov	arg01, result1
198a8     50 B1 B0 FD | 	call	#__system___lockmem
198ac     98 01 00 FF 
198b0     37 95 06 F6 | 	mov	arg02, ##@LR__6081
198b4     00 92 06 F6 | 	mov	arg01, #0
198b8     00 96 06 F6 | 	mov	arg03, #0
198bc     30 BE B0 FD | 	call	#__system___basic_print_string
198c0     00 92 06 F6 | 	mov	arg01, #0
198c4     B8 06 B1 FD | 	call	#__system___getiolock_0622
198c8     3D 01 68 FC | 	wrlong	#0, result1
198cc     28 92 06 F6 | 	mov	arg01, #40
198d0     00 94 06 F6 | 	mov	arg02, #0
198d4     FC 73 B0 FD | 	call	#_printerror
198d8     E7 92 02 F6 | 	mov	arg01, fp
198dc     20 3E BF FD | 	call	#_push
198e0                 | LR__2164
198e0                 | LR__2165
198e0                 | LR__2166
198e0                 | LR__2167
198e0     E7 F0 03 F6 | 	mov	ptra, fp
198e4     F2 00 A0 FD | 	call	#popregs_
198e8                 | _do_rnd_ret
198e8     2D 00 64 FD | 	ret
198ec                 | 
198ec                 | ' 
198ec                 | ' '-------------------- round
198ec                 | ' 
198ec                 | ' sub do_round
198ec                 | _do_round
198ec     00 CA 05 F6 | 	mov	COUNT_, #0
198f0     E8 00 A0 FD | 	call	#pushregs_
198f4     0C F0 07 F1 | 	add	ptra, #12
198f8     74 3D BF FD | 	call	#_pop
198fc     E7 7A 62 FC | 	wrlong	result1, fp
19900     04 CE 05 F1 | 	add	fp, #4
19904     E7 7C 62 FC | 	wrlong	result2, fp
19908     04 CE 05 F1 | 	add	fp, #4
1990c     E7 7E 62 FC | 	wrlong	result3, fp
19910     08 CE 85 F1 | 	sub	fp, #8
19914     E7 92 02 F6 | 	mov	arg01, fp
19918     30 3F BF FD | 	call	#_converttoint
1991c     E7 7A 62 FC | 	wrlong	result1, fp
19920     08 CE 05 F1 | 	add	fp, #8
19924     E7 38 68 FC | 	wrlong	#28, fp
19928     08 CE 85 F1 | 	sub	fp, #8
1992c     E7 92 02 F6 | 	mov	arg01, fp
19930     CC 3D BF FD | 	call	#_push
19934     E7 F0 03 F6 | 	mov	ptra, fp
19938     F2 00 A0 FD | 	call	#popregs_
1993c                 | _do_round_ret
1993c     2D 00 64 FD | 	ret
19940                 | 
19940                 | ' 
19940                 | ' '-------------------- rqpin
19940                 | ' 
19940                 | ' sub do_rqpin
19940                 | _do_rqpin
19940     00 CA 05 F6 | 	mov	COUNT_, #0
19944     E8 00 A0 FD | 	call	#pushregs_
19948     0C F0 07 F1 | 	add	ptra, #12
1994c     20 3D BF FD | 	call	#_pop
19950     E7 7A 62 FC | 	wrlong	result1, fp
19954     04 CE 05 F1 | 	add	fp, #4
19958     E7 7C 62 FC | 	wrlong	result2, fp
1995c     04 CE 05 F1 | 	add	fp, #4
19960     E7 7E 62 FC | 	wrlong	result3, fp
19964     08 CE 85 F1 | 	sub	fp, #8
19968     E7 92 02 F6 | 	mov	arg01, fp
1996c     DC 3E BF FD | 	call	#_converttoint
19970     3D 93 02 F6 | 	mov	arg01, result1
19974     00 7A 06 F6 | 	mov	result1, #0
19978     49 7B 82 FA | 	rqpin	result1, arg01
1997c     54 00 00 FF 
19980     EC 64 06 F1 | 	add	objptr, ##43244
19984     32 7B 62 FC | 	wrlong	result1, objptr
19988     54 00 00 FF 
1998c     EC 64 86 F1 | 	sub	objptr, ##43244
19990     08 CE 05 F1 | 	add	fp, #8
19994     E7 3A 68 FC | 	wrlong	#29, fp
19998     08 CE 85 F1 | 	sub	fp, #8
1999c     E7 08 68 FC | 	wrlong	#4, fp
199a0     E7 92 02 F6 | 	mov	arg01, fp
199a4     58 3D BF FD | 	call	#_push
199a8     E7 F0 03 F6 | 	mov	ptra, fp
199ac     F2 00 A0 FD | 	call	#popregs_
199b0                 | _do_rqpin_ret
199b0     2D 00 64 FD | 	ret
199b4                 | 
199b4                 | ' 
199b4                 | ' ' ------------------ run
199b4                 | ' 
199b4                 | ' sub do_run
199b4                 | _do_run
199b4     04 CA 05 F6 | 	mov	COUNT_, #4
199b8     E8 00 A0 FD | 	call	#pushregs_
199bc     4C 00 00 FF 
199c0     24 64 06 F1 | 	add	objptr, ##38948
199c4     32 A7 02 FB | 	rdlong	local01, objptr
199c8     06 00 00 FF 
199cc     38 64 06 F1 | 	add	objptr, ##3128
199d0     32 A9 02 FB | 	rdlong	local02, objptr
199d4     04 64 06 F1 | 	add	objptr, #4
199d8     32 AB 02 FB | 	rdlong	local03, objptr
199dc     53 99 02 F6 | 	mov	arg04, local01
199e0     4C 97 02 F6 | 	mov	arg03, arg04
199e4     01 96 66 F0 | 	shl	arg03, #1
199e8     4C 97 02 F1 | 	add	arg03, arg04
199ec     02 96 66 F0 | 	shl	arg03, #2
199f0     09 00 00 FF 
199f4     40 64 86 F1 | 	sub	objptr, ##4672
199f8     32 97 02 F1 | 	add	arg03, objptr
199fc     4B 95 02 FB | 	rdlong	arg02, arg03
19a00                 | ' 
19a00                 | ' r_lineptr_e=lineptr_e
19a00                 | ' r_runptr=runptr
19a00                 | ' r_runptr2=runptr2
19a00                 | ' 
19a00                 | ' numpar=compiledline(lineptr_e).result.uresult
19a00                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19a00     01 94 0E F2 | 	cmp	arg02, #1 wz
19a04     49 00 00 FF 
19a08     20 64 86 F1 | 	sub	objptr, ##37408
19a0c     00 92 06 A6 |  if_e	mov	arg01, #0
19a10     B8 AB BF AD |  if_e	call	#_do_load
19a14     4C 00 00 FF 
19a18     2C 64 06 F1 | 	add	objptr, ##38956
19a1c     32 99 02 FB | 	rdlong	arg04, objptr
19a20     06 00 00 FF 
19a24     30 64 06 F1 | 	add	objptr, ##3120
19a28     32 99 62 FC | 	wrlong	arg04, objptr
19a2c     04 64 06 F1 | 	add	objptr, #4
19a30     32 01 68 FC | 	wrlong	#0, objptr
19a34     04 64 06 F1 | 	add	objptr, #4
19a38     FF FF FF FF 
19a3c     32 FF 6B FC | 	wrlong	##-1, objptr
19a40     06 00 00 FF 
19a44     38 64 86 F1 | 	sub	objptr, ##3128
19a48     32 99 02 FB | 	rdlong	arg04, objptr
19a4c     06 00 00 FF 
19a50     A4 64 06 F1 | 	add	objptr, ##3236
19a54     32 99 62 FC | 	wrlong	arg04, objptr
19a58     98 01 00 FF 
19a5c     3D 99 06 F6 | 	mov	arg04, ##@LR__6082
19a60     01 00 00 FF 
19a64     E8 65 06 F1 | 	add	objptr, ##1000
19a68     32 99 62 FC | 	wrlong	arg04, objptr
19a6c                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19a6c                 | ' dataptr=programstart : readline="" ' reset the data pointer
19a6c                 | ' if inrun>0 then 
19a6c     02 00 00 FF 
19a70     28 64 86 F1 | 	sub	objptr, ##1064
19a74     32 99 02 FB | 	rdlong	arg04, objptr
19a78     52 00 00 FF 
19a7c     90 64 86 F1 | 	sub	objptr, ##42128
19a80     01 98 16 F2 | 	cmp	arg04, #1 wc
19a84     34 00 90 CD |  if_b	jmp	#LR__2170
19a88     32 93 02 F6 | 	mov	arg01, objptr
19a8c     52 00 00 FF 
19a90     94 92 06 F1 | 	add	arg01, ##42132
19a94     52 00 00 FF 
19a98     5C 64 06 F1 | 	add	objptr, ##42076
19a9c     32 95 02 FB | 	rdlong	arg02, objptr
19aa0     18 96 06 F6 | 	mov	arg03, #24
19aa4     46 00 00 FF 
19aa8     90 65 86 F1 | 	sub	objptr, ##36240
19aac     D8 9F B0 FD | 	call	#_psram_spin2_read1
19ab0     0B 00 00 FF 
19ab4     CC 64 86 F1 | 	sub	objptr, ##5836
19ab8                 | '   psram.read1(varptr(runheader),runptr,24)  
19ab8                 | '   return
19ab8     10 03 90 FD | 	jmp	#LR__2177
19abc                 | LR__2170
19abc     52 00 00 FF 
19ac0     90 64 06 F1 | 	add	objptr, ##42128
19ac4     32 03 68 FC | 	wrlong	#1, objptr
19ac8     04 64 06 F1 | 	add	objptr, #4
19acc     32 93 02 F6 | 	mov	arg01, objptr
19ad0     38 64 86 F1 | 	sub	objptr, #56
19ad4     32 95 02 FB | 	rdlong	arg02, objptr
19ad8     18 96 06 F6 | 	mov	arg03, #24
19adc     46 00 00 FF 
19ae0     90 65 86 F1 | 	sub	objptr, ##36240
19ae4     A0 9F B0 FD | 	call	#_psram_spin2_read1
19ae8                 | ' inrun=1
19ae8                 | ' psram.read1(varptr(runheader),runptr,24) 
19ae8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19ae8     46 00 00 FF 
19aec     C8 65 06 F1 | 	add	objptr, ##36296
19af0     32 AD 02 FB | 	rdlong	local04, objptr
19af4     52 00 00 FF 
19af8     94 64 86 F1 | 	sub	objptr, ##42132
19afc     FF FF 7F FF 
19b00     FF AD 0E F2 | 	cmp	local04, ##-1 wz
19b04     52 00 00 AF 
19b08     90 64 06 A1 |  if_e	add	objptr, ##42128
19b0c     32 01 68 AC |  if_e	wrlong	#0, objptr
19b10     52 00 00 AF 
19b14     90 64 86 A1 |  if_e	sub	objptr, ##42128
19b18     B0 02 90 AD |  if_e	jmp	#LR__2177
19b1c                 | ' do 
19b1c                 | LR__2171
19b1c                 | '   if runptr<>oldrunptr then
19b1c     52 00 00 FF 
19b20     5C 64 06 F1 | 	add	objptr, ##42076
19b24     32 AD 02 FB | 	rdlong	local04, objptr
19b28     08 64 06 F1 | 	add	objptr, #8
19b2c     32 99 02 FB | 	rdlong	arg04, objptr
19b30     52 00 00 FF 
19b34     64 64 86 F1 | 	sub	objptr, ##42084
19b38     4C AD 0A F2 | 	cmp	local04, arg04 wz
19b3c     D0 00 90 AD |  if_e	jmp	#LR__2172
19b40     32 93 02 F6 | 	mov	arg01, objptr
19b44     52 00 00 FF 
19b48     94 92 06 F1 | 	add	arg01, ##42132
19b4c     52 00 00 FF 
19b50     5C 64 06 F1 | 	add	objptr, ##42076
19b54     32 95 02 FB | 	rdlong	arg02, objptr
19b58     18 96 06 F6 | 	mov	arg03, #24
19b5c     46 00 00 FF 
19b60     90 65 86 F1 | 	sub	objptr, ##36240
19b64     20 9F B0 FD | 	call	#_psram_spin2_read1
19b68     3D 00 00 FF 
19b6c     54 65 06 F1 | 	add	objptr, ##31572
19b70     32 93 02 F6 | 	mov	arg01, objptr
19b74     09 00 00 FF 
19b78     3C 64 06 F1 | 	add	objptr, ##4668
19b7c     32 95 02 FB | 	rdlong	arg02, objptr
19b80     0B 00 00 FF 
19b84     54 64 86 F1 | 	sub	objptr, ##5716
19b88     32 AD 02 FB | 	rdlong	local04, objptr
19b8c     01 AC 66 F0 | 	shl	local04, #1
19b90     56 95 02 F1 | 	add	arg02, local04
19b94     0B 00 00 FF 
19b98     94 64 06 F1 | 	add	objptr, ##5780
19b9c     32 97 02 FB | 	rdlong	arg03, objptr
19ba0     40 64 86 F1 | 	sub	objptr, #64
19ba4     32 AD 02 FB | 	rdlong	local04, objptr
19ba8     56 97 82 F1 | 	sub	arg03, local04
19bac     46 00 00 FF 
19bb0     90 65 86 F1 | 	sub	objptr, ##36240
19bb4     D0 9E B0 FD | 	call	#_psram_spin2_read1
19bb8     46 00 00 FF 
19bbc     D0 65 06 F1 | 	add	objptr, ##36304
19bc0     32 AD 02 FB | 	rdlong	local04, objptr
19bc4     40 64 86 F1 | 	sub	objptr, #64
19bc8     32 95 02 FB | 	rdlong	arg02, objptr
19bcc     4A AD 82 F1 | 	sub	local04, arg02
19bd0     0B 00 00 FF 
19bd4     54 64 86 F1 | 	sub	objptr, ##5716
19bd8     32 95 02 FB | 	rdlong	arg02, objptr
19bdc     4A AD 12 FD | 	qdiv	local04, arg02
19be0     05 00 00 FF 
19be4     18 64 06 F1 | 	add	objptr, ##2584
19be8     18 AC 62 FD | 	getqx	local04
19bec     03 AC 86 F1 | 	sub	local04, #3
19bf0     32 AD 62 FC | 	wrlong	local04, objptr
19bf4     06 00 00 FF 
19bf8     3C 64 06 F1 | 	add	objptr, ##3132
19bfc     32 AD 02 FB | 	rdlong	local04, objptr
19c00     08 64 06 F1 | 	add	objptr, #8
19c04     32 AD 62 FC | 	wrlong	local04, objptr
19c08     52 00 00 FF 
19c0c     64 64 86 F1 | 	sub	objptr, ##42084
19c10                 | LR__2172
19c10     52 00 00 FF 
19c14     A8 64 06 F1 | 	add	objptr, ##42152
19c18     32 AD 02 FB | 	rdlong	local04, objptr
19c1c     4C 64 86 F1 | 	sub	objptr, #76
19c20     32 AD 62 FC | 	wrlong	local04, objptr
19c24     04 64 06 F1 | 	add	objptr, #4
19c28     32 93 02 FB | 	rdlong	arg01, objptr
19c2c     52 00 00 FF 
19c30     60 64 86 F1 | 	sub	objptr, ##42080
19c34     34 39 BF FD | 	call	#_execute_line
19c38     52 00 00 FF 
19c3c     60 64 06 F1 | 	add	objptr, ##42080
19c40     32 7B 62 FC | 	wrlong	result1, objptr
19c44     04 64 86 F1 | 	sub	objptr, #4
19c48     32 AD 02 FB | 	rdlong	local04, objptr
19c4c     52 00 00 FF 
19c50     5C 64 86 F1 | 	sub	objptr, ##42076
19c54     FF FF 3F FF 
19c58     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19c5c     4C 00 90 AD |  if_e	jmp	#LR__2175
19c60     E0 92 06 F6 | 	mov	arg01, #224
19c64     AC A1 B0 FD | 	call	#_usbnew_spin2_keystate
19c68     00 7A 0E F2 | 	cmp	result1, #0 wz
19c6c     10 00 90 5D |  if_ne	jmp	#LR__2173
19c70     E4 92 06 F6 | 	mov	arg01, #228
19c74     9C A1 B0 FD | 	call	#_usbnew_spin2_keystate
19c78     00 7A 0E F2 | 	cmp	result1, #0 wz
19c7c     10 00 90 AD |  if_e	jmp	#LR__2174
19c80                 | LR__2173
19c80     06 92 06 F6 | 	mov	arg01, #6
19c84     8C A1 B0 FD | 	call	#_usbnew_spin2_keystate
19c88     00 7A 0E F2 | 	cmp	result1, #0 wz
19c8c     1C 00 90 5D |  if_ne	jmp	#LR__2175
19c90                 | LR__2174
19c90     52 00 00 FF 
19c94     90 64 06 F1 | 	add	objptr, ##42128
19c98     32 AD 02 FB | 	rdlong	local04, objptr
19c9c     52 00 00 FF 
19ca0     90 64 86 F1 | 	sub	objptr, ##42128
19ca4     02 AC 0E F2 | 	cmp	local04, #2 wz
19ca8     70 FE 9F 5D |  if_ne	jmp	#LR__2171
19cac                 | LR__2175
19cac                 | '   ''do whatever kbm.peek_latest_key()=$106 
19cac                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
19cac     52 00 00 FF 
19cb0     5C 64 06 F1 | 	add	objptr, ##42076
19cb4     32 AD 02 FB | 	rdlong	local04, objptr
19cb8     52 00 00 FF 
19cbc     5C 64 86 F1 | 	sub	objptr, ##42076
19cc0     FF FF 3F FF 
19cc4     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19cc8     AC 00 90 AD |  if_e	jmp	#LR__2176
19ccc     52 00 00 FF 
19cd0     90 64 06 F1 | 	add	objptr, ##42128
19cd4     32 AD 02 FB | 	rdlong	local04, objptr
19cd8     52 00 00 FF 
19cdc     90 64 86 F1 | 	sub	objptr, ##42128
19ce0     01 AC 0E F2 | 	cmp	local04, #1 wz
19ce4     90 00 90 5D |  if_ne	jmp	#LR__2176
19ce8                 | '   print: print "Stopped at line ";runheader(0) 
19ce8     00 92 06 F6 | 	mov	arg01, #0
19cec     90 02 B1 FD | 	call	#__system___getiolock_0622
19cf0     3D 93 02 F6 | 	mov	arg01, result1
19cf4     04 AD B0 FD | 	call	#__system___lockmem
19cf8     00 92 06 F6 | 	mov	arg01, #0
19cfc     0A 94 06 F6 | 	mov	arg02, #10
19d00     00 96 06 F6 | 	mov	arg03, #0
19d04     90 B9 B0 FD | 	call	#__system___basic_print_char
19d08     00 92 06 F6 | 	mov	arg01, #0
19d0c     70 02 B1 FD | 	call	#__system___getiolock_0622
19d10     3D 01 68 FC | 	wrlong	#0, result1
19d14     00 92 06 F6 | 	mov	arg01, #0
19d18     64 02 B1 FD | 	call	#__system___getiolock_0622
19d1c     3D 93 02 F6 | 	mov	arg01, result1
19d20     D8 AC B0 FD | 	call	#__system___lockmem
19d24     98 01 00 FF 
19d28     3E 95 06 F6 | 	mov	arg02, ##@LR__6083
19d2c     00 92 06 F6 | 	mov	arg01, #0
19d30     00 96 06 F6 | 	mov	arg03, #0
19d34     B8 B9 B0 FD | 	call	#__system___basic_print_string
19d38     52 00 00 FF 
19d3c     94 64 06 F1 | 	add	objptr, ##42132
19d40     32 95 02 FB | 	rdlong	arg02, objptr
19d44     52 00 00 FF 
19d48     94 64 86 F1 | 	sub	objptr, ##42132
19d4c     00 92 06 F6 | 	mov	arg01, #0
19d50     00 96 06 F6 | 	mov	arg03, #0
19d54     0A 98 06 F6 | 	mov	arg04, #10
19d58     18 BA B0 FD | 	call	#__system___basic_print_unsigned
19d5c     00 92 06 F6 | 	mov	arg01, #0
19d60     0A 94 06 F6 | 	mov	arg02, #10
19d64     00 96 06 F6 | 	mov	arg03, #0
19d68     2C B9 B0 FD | 	call	#__system___basic_print_char
19d6c     00 92 06 F6 | 	mov	arg01, #0
19d70     0C 02 B1 FD | 	call	#__system___getiolock_0622
19d74     3D 01 68 FC | 	wrlong	#0, result1
19d78                 | LR__2176
19d78     52 00 00 FF 
19d7c     90 64 06 F1 | 	add	objptr, ##42128
19d80     32 01 68 FC | 	wrlong	#0, objptr
19d84     06 00 00 FF 
19d88     6C 64 86 F1 | 	sub	objptr, ##3180
19d8c     32 A7 62 FC | 	wrlong	local01, objptr
19d90     06 00 00 FF 
19d94     38 64 06 F1 | 	add	objptr, ##3128
19d98     32 A9 62 FC | 	wrlong	local02, objptr
19d9c     04 64 06 F1 | 	add	objptr, #4
19da0     32 AB 62 FC | 	wrlong	local03, objptr
19da4     52 00 00 FF 
19da8     60 64 86 F1 | 	sub	objptr, ##42080
19dac     11 92 06 F6 | 	mov	arg01, #17
19db0     08 94 06 F6 | 	mov	arg02, #8
19db4     10 96 06 F6 | 	mov	arg03, #16
19db8     84 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
19dbc     10 92 06 F6 | 	mov	arg01, #16
19dc0     20 94 06 F6 | 	mov	arg02, #32
19dc4     20 96 06 F6 | 	mov	arg03, #32
19dc8     74 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
19dcc                 | LR__2177
19dcc     E7 F0 03 F6 | 	mov	ptra, fp
19dd0     F2 00 A0 FD | 	call	#popregs_
19dd4                 | _do_run_ret
19dd4     2D 00 64 FD | 	ret
19dd8                 | 
19dd8                 | ' 
19dd8                 | ' ' ------------------ save
19dd8                 | ' 
19dd8                 | ' sub do_save                        
19dd8                 | _do_save
19dd8     0A CA 05 F6 | 	mov	COUNT_, #10
19ddc     E8 00 A0 FD | 	call	#pushregs_
19de0     B8 F0 07 F1 | 	add	ptra, #184
19de4     4C 00 00 FF 
19de8     24 64 06 F1 | 	add	objptr, ##38948
19dec     32 97 02 FB | 	rdlong	arg03, objptr
19df0     4B AD 02 F6 | 	mov	local04, arg03
19df4     01 AC 66 F0 | 	shl	local04, #1
19df8     4B AD 02 F1 | 	add	local04, arg03
19dfc     02 AC 66 F0 | 	shl	local04, #2
19e00     03 00 00 FF 
19e04     04 64 86 F1 | 	sub	objptr, ##1540
19e08     32 AD 02 F1 | 	add	local04, objptr
19e0c     56 AF 02 FB | 	rdlong	local05, local04
19e10                 | ' 
19e10                 | ' numpar=compiledline(lineptr_e).result.uresult
19e10                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
19e10     01 AE 56 F2 | 	cmps	local05, #1 wc
19e14     49 00 00 FF 
19e18     20 64 86 F1 | 	sub	objptr, ##37408
19e1c     14 00 90 CD |  if_b	jmp	#LR__2180
19e20     4C 38 BF FD | 	call	#_pop
19e24     3D A7 02 F6 | 	mov	local01, result1
19e28     3E A9 02 F6 | 	mov	local02, result2
19e2c     3F AB 02 F6 | 	mov	local03, result3
19e30     18 00 90 FD | 	jmp	#LR__2181
19e34                 | LR__2180
19e34     54 00 00 FF 
19e38     A0 64 06 F1 | 	add	objptr, ##43168
19e3c     32 A7 02 FB | 	rdlong	local01, objptr
19e40     54 00 00 FF 
19e44     A0 64 86 F1 | 	sub	objptr, ##43168
19e48     1F AA 06 F6 | 	mov	local03, #31
19e4c                 | LR__2181
19e4c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
19e4c     4C 00 00 FF 
19e50     2C 64 06 F1 | 	add	objptr, ##38956
19e54     32 93 02 FB | 	rdlong	arg01, objptr
19e58     4C 00 00 FF 
19e5c     2C 64 86 F1 | 	sub	objptr, ##38956
19e60     2C 71 B0 FD | 	call	#_pslpeek
19e64     FF FF 7F FF 
19e68     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
19e6c     10 00 90 5D |  if_ne	jmp	#LR__2182
19e70     1B 92 06 F6 | 	mov	arg01, #27
19e74     00 94 06 F6 | 	mov	arg02, #0
19e78     58 6E B0 FD | 	call	#_printerror
19e7c     3C 02 90 FD | 	jmp	#LR__2188
19e80                 | LR__2182
19e80                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
19e80     2B AA 0E F2 | 	cmp	local03, #43 wz
19e84     10 00 90 5D |  if_ne	jmp	#LR__2183
19e88     53 93 02 F6 | 	mov	arg01, local01
19e8c     50 39 BF FD | 	call	#_convertstring
19e90     3D A7 02 F6 | 	mov	local01, result1
19e94     1F AA 06 F6 | 	mov	local03, #31
19e98                 | LR__2183
19e98                 | ' if t1.result_type=result_string then
19e98     1F AA 0E F2 | 	cmp	local03, #31 wz
19e9c     1C 02 90 5D |  if_ne	jmp	#LR__2187
19ea0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
19ea0     98 01 00 FF 
19ea4     4F 95 06 F6 | 	mov	arg02, ##@LR__6084
19ea8     53 93 02 F6 | 	mov	arg01, local01
19eac     74 AB B0 FD | 	call	#__system___string_cmp
19eb0     00 7A 0E F2 | 	cmp	result1, #0 wz
19eb4     54 00 00 AF 
19eb8     A0 64 06 A1 |  if_e	add	objptr, ##43168
19ebc     32 A7 02 AB |  if_e	rdlong	local01, objptr
19ec0     54 00 00 FF 
19ec4     A0 64 C6 F3 | 	sumz	objptr, ##43168
19ec8     32 A7 62 5C |  if_ne	wrlong	local01, objptr
19ecc     54 00 00 5F 
19ed0     A0 64 86 51 |  if_ne	sub	objptr, ##43168
19ed4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
19ed4     09 92 06 F6 | 	mov	arg01, #9
19ed8     FC F6 B0 FD | 	call	#__system__close
19edc     09 B0 06 F6 | 	mov	local06, #9
19ee0     4C 00 00 FF 
19ee4     38 64 06 F1 | 	add	objptr, ##38968
19ee8     32 93 02 FB | 	rdlong	arg01, objptr
19eec     4C 00 00 FF 
19ef0     38 64 86 F1 | 	sub	objptr, ##38968
19ef4     98 01 00 FF 
19ef8     50 95 06 F6 | 	mov	arg02, ##@LR__6085
19efc     58 AB B0 FD | 	call	#__system___string_concat
19f00     3D 93 02 F6 | 	mov	arg01, result1
19f04     53 95 02 F6 | 	mov	arg02, local01
19f08     4C AB B0 FD | 	call	#__system___string_concat
19f0c     3D 95 02 F6 | 	mov	arg02, result1
19f10     58 93 02 F6 | 	mov	arg01, local06
19f14     0D 96 06 F6 | 	mov	arg03, #13
19f18     90 B6 B0 FD | 	call	#__system___basic_open_string
19f1c     4C 00 00 FF 
19f20     2C 64 06 F1 | 	add	objptr, ##38956
19f24     32 B3 02 FB | 	rdlong	local07, objptr
19f28     4C 00 00 FF 
19f2c     2C 64 86 F1 | 	sub	objptr, ##38956
19f30                 | '   saveptr=programstart
19f30                 | '   do
19f30                 | LR__2184
19f30     E7 92 02 F6 | 	mov	arg01, fp
19f34     14 92 06 F1 | 	add	arg01, #20
19f38     59 95 02 F6 | 	mov	arg02, local07
19f3c     18 96 06 F6 | 	mov	arg03, #24
19f40     0B 00 00 FF 
19f44     CC 64 06 F1 | 	add	objptr, ##5836
19f48     3C 9B B0 FD | 	call	#_psram_spin2_read1
19f4c     E7 92 02 F6 | 	mov	arg01, fp
19f50     2C 92 06 F1 | 	add	arg01, #44
19f54     1C CE 05 F1 | 	add	fp, #28
19f58     E7 94 02 FB | 	rdlong	arg02, fp
19f5c     04 CE 05 F1 | 	add	fp, #4
19f60     E7 96 02 FB | 	rdlong	arg03, fp
19f64     20 CE 85 F1 | 	sub	fp, #32
19f68     1C 9B B0 FD | 	call	#_psram_spin2_read1
19f6c     0B 00 00 FF 
19f70     CC 64 86 F1 | 	sub	objptr, ##5836
19f74     98 01 00 FF 
19f78     52 B5 06 F6 | 	mov	local08, ##@LR__6086
19f7c                 | '     psram.read1(varptr(header(0)),saveptr,24)
19f7c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
19f7c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
19f7c     01 B6 06 F6 | 	mov	local09, #1
19f80     20 CE 05 F1 | 	add	fp, #32
19f84     E7 B8 02 FB | 	rdlong	local10, fp
19f88     20 CE 85 F1 | 	sub	fp, #32
19f8c     01 B8 06 F1 | 	add	local10, #1
19f90                 | LR__2185
19f90     5C B7 52 F2 | 	cmps	local09, local10 wc
19f94     34 00 90 3D |  if_ae	jmp	#LR__2186
19f98     5B B3 02 F6 | 	mov	local07, local09
19f9c     01 B2 86 F1 | 	sub	local07, #1
19fa0     E7 B0 02 F6 | 	mov	local06, fp
19fa4     2C B0 06 F1 | 	add	local06, #44
19fa8     58 B3 02 F1 | 	add	local07, local06
19fac     59 93 C2 FA | 	rdbyte	arg01, local07
19fb0     B4 C4 B0 FD | 	call	#__system__Chr_S
19fb4     3D 95 02 F6 | 	mov	arg02, result1
19fb8     5A 93 02 F6 | 	mov	arg01, local08
19fbc     98 AA B0 FD | 	call	#__system___string_concat
19fc0     3D B5 02 F6 | 	mov	local08, result1
19fc4     01 B6 06 F1 | 	add	local09, #1
19fc8     C4 FF 9F FD | 	jmp	#LR__2185
19fcc                 | LR__2186
19fcc                 | '     print #9, saveline$
19fcc     09 92 06 F6 | 	mov	arg01, #9
19fd0     AC FF B0 FD | 	call	#__system___getiolock_0622
19fd4     3D 93 02 F6 | 	mov	arg01, result1
19fd8     20 AA B0 FD | 	call	#__system___lockmem
19fdc     09 92 06 F6 | 	mov	arg01, #9
19fe0     5A 95 02 F6 | 	mov	arg02, local08
19fe4     00 96 06 F6 | 	mov	arg03, #0
19fe8     04 B7 B0 FD | 	call	#__system___basic_print_string
19fec     09 92 06 F6 | 	mov	arg01, #9
19ff0     0A 94 06 F6 | 	mov	arg02, #10
19ff4     00 96 06 F6 | 	mov	arg03, #0
19ff8     9C B6 B0 FD | 	call	#__system___basic_print_char
19ffc     09 92 06 F6 | 	mov	arg01, #9
1a000     7C FF B0 FD | 	call	#__system___getiolock_0622
1a004     3D 01 68 FC | 	wrlong	#0, result1
1a008     28 CE 05 F1 | 	add	fp, #40
1a00c     E7 B0 02 FB | 	rdlong	local06, fp
1a010     58 B3 02 F6 | 	mov	local07, local06
1a014     28 CE 85 F1 | 	sub	fp, #40
1a018     FF FF 3F FF 
1a01c     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
1a020     0C FF 9F 5D |  if_ne	jmp	#LR__2184
1a024                 | '   close #9  
1a024     09 92 06 F6 | 	mov	arg01, #9
1a028     AC F5 B0 FD | 	call	#__system__close
1a02c                 | '   print "Saved as ";currentdir$+"/"+loadname
1a02c     00 92 06 F6 | 	mov	arg01, #0
1a030     4C FF B0 FD | 	call	#__system___getiolock_0622
1a034     3D 93 02 F6 | 	mov	arg01, result1
1a038     C0 A9 B0 FD | 	call	#__system___lockmem
1a03c     98 01 00 FF 
1a040     53 95 06 F6 | 	mov	arg02, ##@LR__6087
1a044     00 92 06 F6 | 	mov	arg01, #0
1a048     00 96 06 F6 | 	mov	arg03, #0
1a04c     A0 B6 B0 FD | 	call	#__system___basic_print_string
1a050     00 AC 06 F6 | 	mov	local04, #0
1a054     4C 00 00 FF 
1a058     38 64 06 F1 | 	add	objptr, ##38968
1a05c     32 93 02 FB | 	rdlong	arg01, objptr
1a060     4C 00 00 FF 
1a064     38 64 86 F1 | 	sub	objptr, ##38968
1a068     98 01 00 FF 
1a06c     5D 95 06 F6 | 	mov	arg02, ##@LR__6088
1a070     E4 A9 B0 FD | 	call	#__system___string_concat
1a074     3D 93 02 F6 | 	mov	arg01, result1
1a078     54 00 00 FF 
1a07c     A0 64 06 F1 | 	add	objptr, ##43168
1a080     32 95 02 FB | 	rdlong	arg02, objptr
1a084     54 00 00 FF 
1a088     A0 64 86 F1 | 	sub	objptr, ##43168
1a08c     C8 A9 B0 FD | 	call	#__system___string_concat
1a090     3D 95 02 F6 | 	mov	arg02, result1
1a094     56 93 02 F6 | 	mov	arg01, local04
1a098     00 96 06 F6 | 	mov	arg03, #0
1a09c     50 B6 B0 FD | 	call	#__system___basic_print_string
1a0a0     00 92 06 F6 | 	mov	arg01, #0
1a0a4     0A 94 06 F6 | 	mov	arg02, #10
1a0a8     00 96 06 F6 | 	mov	arg03, #0
1a0ac     E8 B5 B0 FD | 	call	#__system___basic_print_char
1a0b0     00 92 06 F6 | 	mov	arg01, #0
1a0b4     C8 FE B0 FD | 	call	#__system___getiolock_0622
1a0b8     3D 01 68 FC | 	wrlong	#0, result1
1a0bc                 | LR__2187
1a0bc                 | LR__2188
1a0bc     E7 F0 03 F6 | 	mov	ptra, fp
1a0c0     F2 00 A0 FD | 	call	#popregs_
1a0c4                 | _do_save_ret
1a0c4     2D 00 64 FD | 	ret
1a0c8                 | 
1a0c8                 | ' 
1a0c8                 | ' ' ------------------ setamode
1a0c8                 | ' 
1a0c8                 | ' sub do_setamode
1a0c8                 | _do_setamode
1a0c8     02 CA 05 F6 | 	mov	COUNT_, #2
1a0cc     E8 00 A0 FD | 	call	#pushregs_
1a0d0     18 F0 07 F1 | 	add	ptra, #24
1a0d4     98 35 BF FD | 	call	#_pop
1a0d8     3D 93 02 F6 | 	mov	arg01, result1
1a0dc     3E A7 02 F6 | 	mov	local01, result2
1a0e0     3F A9 02 F6 | 	mov	local02, result3
1a0e4     E7 92 62 FC | 	wrlong	arg01, fp
1a0e8     04 CE 05 F1 | 	add	fp, #4
1a0ec     E7 A6 62 FC | 	wrlong	local01, fp
1a0f0     04 CE 05 F1 | 	add	fp, #4
1a0f4     E7 A8 62 FC | 	wrlong	local02, fp
1a0f8     08 CE 85 F1 | 	sub	fp, #8
1a0fc     70 35 BF FD | 	call	#_pop
1a100     3D A9 02 F6 | 	mov	local02, result1
1a104     0C CE 05 F1 | 	add	fp, #12
1a108     E7 A8 62 FC | 	wrlong	local02, fp
1a10c     04 CE 05 F1 | 	add	fp, #4
1a110     E7 7C 62 FC | 	wrlong	result2, fp
1a114     04 CE 05 F1 | 	add	fp, #4
1a118     E7 7E 62 FC | 	wrlong	result3, fp
1a11c     08 CE 85 F1 | 	sub	fp, #8
1a120     E7 92 02 F6 | 	mov	arg01, fp
1a124     0C CE 85 F1 | 	sub	fp, #12
1a128     20 37 BF FD | 	call	#_converttoint
1a12c     3D A7 02 F6 | 	mov	local01, result1
1a130     03 A6 66 F0 | 	shl	local01, #3
1a134     3D A7 82 F1 | 	sub	local01, result1
1a138     02 A6 66 F0 | 	shl	local01, #2
1a13c     32 A9 02 F6 | 	mov	local02, objptr
1a140     16 00 00 FF 
1a144     BC A8 06 F1 | 	add	local02, ##11452
1a148     54 A7 02 F1 | 	add	local01, local02
1a14c     E7 92 02 F6 | 	mov	arg01, fp
1a150     F8 36 BF FD | 	call	#_converttoint
1a154     16 A6 06 F1 | 	add	local01, #22
1a158     53 7B 52 FC | 	wrword	result1, local01
1a15c     E7 F0 03 F6 | 	mov	ptra, fp
1a160     F2 00 A0 FD | 	call	#popregs_
1a164                 | _do_setamode_ret
1a164     2D 00 64 FD | 	ret
1a168                 | 
1a168                 | ' 
1a168                 | ' 
1a168                 | ' ' ------------------ setcolor
1a168                 | ' 
1a168                 | ' sub do_setcolor
1a168                 | _do_setcolor
1a168     05 CA 05 F6 | 	mov	COUNT_, #5
1a16c     E8 00 A0 FD | 	call	#pushregs_
1a170     20 F0 07 F1 | 	add	ptra, #32
1a174     4C 00 00 FF 
1a178     24 64 06 F1 | 	add	objptr, ##38948
1a17c     32 99 02 FB | 	rdlong	arg04, objptr
1a180     4C 97 02 F6 | 	mov	arg03, arg04
1a184     01 96 66 F0 | 	shl	arg03, #1
1a188     4C 97 02 F1 | 	add	arg03, arg04
1a18c     02 96 66 F0 | 	shl	arg03, #2
1a190     03 00 00 FF 
1a194     04 64 86 F1 | 	sub	objptr, ##1540
1a198     32 97 02 F1 | 	add	arg03, objptr
1a19c     4B A7 02 FB | 	rdlong	local01, arg03
1a1a0                 | ' 
1a1a0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a1a0                 | ' 
1a1a0                 | ' if numpar=4 then
1a1a0     04 A6 0E F2 | 	cmp	local01, #4 wz
1a1a4     49 00 00 FF 
1a1a8     20 64 86 F1 | 	sub	objptr, ##37408
1a1ac     B4 00 90 5D |  if_ne	jmp	#LR__2190
1a1b0     BC 34 BF FD | 	call	#_pop
1a1b4     3F A7 02 F6 | 	mov	local01, result3
1a1b8     E7 7A 62 FC | 	wrlong	result1, fp
1a1bc     04 CE 05 F1 | 	add	fp, #4
1a1c0     E7 7C 62 FC | 	wrlong	result2, fp
1a1c4     04 CE 05 F1 | 	add	fp, #4
1a1c8     E7 A6 62 FC | 	wrlong	local01, fp
1a1cc     08 CE 85 F1 | 	sub	fp, #8
1a1d0     E7 92 02 F6 | 	mov	arg01, fp
1a1d4     74 36 BF FD | 	call	#_converttoint
1a1d8     3D A9 02 F6 | 	mov	local02, result1
1a1dc     90 34 BF FD | 	call	#_pop
1a1e0     3F A7 02 F6 | 	mov	local01, result3
1a1e4     E7 7A 62 FC | 	wrlong	result1, fp
1a1e8     04 CE 05 F1 | 	add	fp, #4
1a1ec     E7 7C 62 FC | 	wrlong	result2, fp
1a1f0     04 CE 05 F1 | 	add	fp, #4
1a1f4     E7 A6 62 FC | 	wrlong	local01, fp
1a1f8     08 CE 85 F1 | 	sub	fp, #8
1a1fc     E7 92 02 F6 | 	mov	arg01, fp
1a200     48 36 BF FD | 	call	#_converttoint
1a204     3D AB 02 F6 | 	mov	local03, result1
1a208     64 34 BF FD | 	call	#_pop
1a20c     3F A7 02 F6 | 	mov	local01, result3
1a210     E7 7A 62 FC | 	wrlong	result1, fp
1a214     04 CE 05 F1 | 	add	fp, #4
1a218     E7 7C 62 FC | 	wrlong	result2, fp
1a21c     04 CE 05 F1 | 	add	fp, #4
1a220     E7 A6 62 FC | 	wrlong	local01, fp
1a224     08 CE 85 F1 | 	sub	fp, #8
1a228     E7 92 02 F6 | 	mov	arg01, fp
1a22c     1C 36 BF FD | 	call	#_converttoint
1a230     3D AD 02 F6 | 	mov	local04, result1
1a234     38 34 BF FD | 	call	#_pop
1a238     3F A7 02 F6 | 	mov	local01, result3
1a23c     E7 7A 62 FC | 	wrlong	result1, fp
1a240     04 CE 05 F1 | 	add	fp, #4
1a244     E7 7C 62 FC | 	wrlong	result2, fp
1a248     04 CE 05 F1 | 	add	fp, #4
1a24c     E7 A6 62 FC | 	wrlong	local01, fp
1a250     08 CE 85 F1 | 	sub	fp, #8
1a254     E7 92 02 F6 | 	mov	arg01, fp
1a258     F0 35 BF FD | 	call	#_converttoint
1a25c     3D AF 02 F6 | 	mov	local05, result1
1a260     C0 00 90 FD | 	jmp	#LR__2193
1a264                 | LR__2190
1a264     02 A6 0E F2 | 	cmp	local01, #2 wz
1a268     68 00 90 5D |  if_ne	jmp	#LR__2191
1a26c     00 34 BF FD | 	call	#_pop
1a270     3F AF 02 F6 | 	mov	local05, result3
1a274     E7 7A 62 FC | 	wrlong	result1, fp
1a278     04 CE 05 F1 | 	add	fp, #4
1a27c     E7 7C 62 FC | 	wrlong	result2, fp
1a280     04 CE 05 F1 | 	add	fp, #4
1a284     E7 AE 62 FC | 	wrlong	local05, fp
1a288     08 CE 85 F1 | 	sub	fp, #8
1a28c     E7 92 02 F6 | 	mov	arg01, fp
1a290     B8 35 BF FD | 	call	#_converttoint
1a294     3D AD 02 F6 | 	mov	local04, result1
1a298     56 A9 E2 F8 | 	getbyte	local02, local04, #0
1a29c     56 AB EA F8 | 	getbyte	local03, local04, #1
1a2a0     56 AD F2 F8 | 	getbyte	local04, local04, #2
1a2a4     C8 33 BF FD | 	call	#_pop
1a2a8     3F AF 02 F6 | 	mov	local05, result3
1a2ac     E7 7A 62 FC | 	wrlong	result1, fp
1a2b0     04 CE 05 F1 | 	add	fp, #4
1a2b4     E7 7C 62 FC | 	wrlong	result2, fp
1a2b8     04 CE 05 F1 | 	add	fp, #4
1a2bc     E7 AE 62 FC | 	wrlong	local05, fp
1a2c0     08 CE 85 F1 | 	sub	fp, #8
1a2c4     E7 92 02 F6 | 	mov	arg01, fp
1a2c8     80 35 BF FD | 	call	#_converttoint
1a2cc     3D AF 02 F6 | 	mov	local05, result1
1a2d0     50 00 90 FD | 	jmp	#LR__2192
1a2d4                 | LR__2191
1a2d4                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1a2d4     00 92 06 F6 | 	mov	arg01, #0
1a2d8     A4 FC B0 FD | 	call	#__system___getiolock_0622
1a2dc     3D 93 02 F6 | 	mov	arg01, result1
1a2e0     18 A7 B0 FD | 	call	#__system___lockmem
1a2e4     98 01 00 FF 
1a2e8     5F 95 06 F6 | 	mov	arg02, ##@LR__6089
1a2ec     00 92 06 F6 | 	mov	arg01, #0
1a2f0     00 96 06 F6 | 	mov	arg03, #0
1a2f4     F8 B3 B0 FD | 	call	#__system___basic_print_string
1a2f8     00 92 06 F6 | 	mov	arg01, #0
1a2fc     80 FC B0 FD | 	call	#__system___getiolock_0622
1a300     3D 01 68 FC | 	wrlong	#0, result1
1a304     52 00 00 FF 
1a308     94 64 06 F1 | 	add	objptr, ##42132
1a30c     32 95 02 FB | 	rdlong	arg02, objptr
1a310     52 00 00 FF 
1a314     94 64 86 F1 | 	sub	objptr, ##42132
1a318     27 92 06 F6 | 	mov	arg01, #39
1a31c     B4 69 B0 FD | 	call	#_printerror
1a320     14 00 90 FD | 	jmp	#LR__2194
1a324                 | LR__2192
1a324                 | LR__2193
1a324     57 93 02 F6 | 	mov	arg01, local05
1a328     56 95 02 F6 | 	mov	arg02, local04
1a32c     55 97 02 F6 | 	mov	arg03, local03
1a330     54 99 02 F6 | 	mov	arg04, local02
1a334     70 87 B0 FD | 	call	#_hg010b_spin2_setcolor
1a338                 | LR__2194
1a338     E7 F0 03 F6 | 	mov	ptra, fp
1a33c     F2 00 A0 FD | 	call	#popregs_
1a340                 | _do_setcolor_ret
1a340     2D 00 64 FD | 	ret
1a344                 | 
1a344                 | ' 
1a344                 | ' ' ------------------ setdelay
1a344                 | ' 
1a344                 | ' sub do_setdelay
1a344                 | _do_setdelay
1a344     02 CA 05 F6 | 	mov	COUNT_, #2
1a348     E8 00 A0 FD | 	call	#pushregs_
1a34c     18 F0 07 F1 | 	add	ptra, #24
1a350     1C 33 BF FD | 	call	#_pop
1a354     3D 93 02 F6 | 	mov	arg01, result1
1a358     3E A7 02 F6 | 	mov	local01, result2
1a35c     3F A9 02 F6 | 	mov	local02, result3
1a360     E7 92 62 FC | 	wrlong	arg01, fp
1a364     04 CE 05 F1 | 	add	fp, #4
1a368     E7 A6 62 FC | 	wrlong	local01, fp
1a36c     04 CE 05 F1 | 	add	fp, #4
1a370     E7 A8 62 FC | 	wrlong	local02, fp
1a374     08 CE 85 F1 | 	sub	fp, #8
1a378     F4 32 BF FD | 	call	#_pop
1a37c     3D A9 02 F6 | 	mov	local02, result1
1a380     0C CE 05 F1 | 	add	fp, #12
1a384     E7 A8 62 FC | 	wrlong	local02, fp
1a388     04 CE 05 F1 | 	add	fp, #4
1a38c     E7 7C 62 FC | 	wrlong	result2, fp
1a390     04 CE 05 F1 | 	add	fp, #4
1a394     E7 7E 62 FC | 	wrlong	result3, fp
1a398     08 CE 85 F1 | 	sub	fp, #8
1a39c     E7 92 02 F6 | 	mov	arg01, fp
1a3a0     0C CE 85 F1 | 	sub	fp, #12
1a3a4     A4 34 BF FD | 	call	#_converttoint
1a3a8     3D A7 02 F6 | 	mov	local01, result1
1a3ac     03 A6 66 F0 | 	shl	local01, #3
1a3b0     3D A7 82 F1 | 	sub	local01, result1
1a3b4     02 A6 66 F0 | 	shl	local01, #2
1a3b8     32 A9 02 F6 | 	mov	local02, objptr
1a3bc     16 00 00 FF 
1a3c0     BC A8 06 F1 | 	add	local02, ##11452
1a3c4     54 A7 02 F1 | 	add	local01, local02
1a3c8     E7 92 02 F6 | 	mov	arg01, fp
1a3cc     7C 34 BF FD | 	call	#_converttoint
1a3d0     06 A6 06 F1 | 	add	local01, #6
1a3d4     53 7B 52 FC | 	wrword	result1, local01
1a3d8     E7 F0 03 F6 | 	mov	ptra, fp
1a3dc     F2 00 A0 FD | 	call	#popregs_
1a3e0                 | _do_setdelay_ret
1a3e0     2D 00 64 FD | 	ret
1a3e4                 | 
1a3e4                 | ' 
1a3e4                 | ' ' ------------------ setenv
1a3e4                 | ' 
1a3e4                 | ' sub do_setenv
1a3e4                 | _do_setenv
1a3e4     02 CA 05 F6 | 	mov	COUNT_, #2
1a3e8     E8 00 A0 FD | 	call	#pushregs_
1a3ec     18 F0 07 F1 | 	add	ptra, #24
1a3f0     7C 32 BF FD | 	call	#_pop
1a3f4     3D 93 02 F6 | 	mov	arg01, result1
1a3f8     3E A7 02 F6 | 	mov	local01, result2
1a3fc     3F A9 02 F6 | 	mov	local02, result3
1a400     E7 92 62 FC | 	wrlong	arg01, fp
1a404     04 CE 05 F1 | 	add	fp, #4
1a408     E7 A6 62 FC | 	wrlong	local01, fp
1a40c     04 CE 05 F1 | 	add	fp, #4
1a410     E7 A8 62 FC | 	wrlong	local02, fp
1a414     08 CE 85 F1 | 	sub	fp, #8
1a418     54 32 BF FD | 	call	#_pop
1a41c     3D A9 02 F6 | 	mov	local02, result1
1a420     0C CE 05 F1 | 	add	fp, #12
1a424     E7 A8 62 FC | 	wrlong	local02, fp
1a428     04 CE 05 F1 | 	add	fp, #4
1a42c     E7 7C 62 FC | 	wrlong	result2, fp
1a430     04 CE 05 F1 | 	add	fp, #4
1a434     E7 7E 62 FC | 	wrlong	result3, fp
1a438     08 CE 85 F1 | 	sub	fp, #8
1a43c     E7 92 02 F6 | 	mov	arg01, fp
1a440     0C CE 85 F1 | 	sub	fp, #12
1a444     04 34 BF FD | 	call	#_converttoint
1a448     3D A7 02 F6 | 	mov	local01, result1
1a44c     03 A6 66 F0 | 	shl	local01, #3
1a450     3D A7 82 F1 | 	sub	local01, result1
1a454     02 A6 66 F0 | 	shl	local01, #2
1a458     32 A9 02 F6 | 	mov	local02, objptr
1a45c     16 00 00 FF 
1a460     BC A8 06 F1 | 	add	local02, ##11452
1a464     54 A7 02 F1 | 	add	local01, local02
1a468     E7 92 02 F6 | 	mov	arg01, fp
1a46c     DC 33 BF FD | 	call	#_converttoint
1a470     05 A6 06 F1 | 	add	local01, #5
1a474     53 7B 42 FC | 	wrbyte	result1, local01
1a478     E7 F0 03 F6 | 	mov	ptra, fp
1a47c     F2 00 A0 FD | 	call	#popregs_
1a480                 | _do_setenv_ret
1a480     2D 00 64 FD | 	ret
1a484                 | 
1a484                 | ' 
1a484                 | ' ' ------------------ setlen
1a484                 | ' 
1a484                 | ' sub do_setlen
1a484                 | _do_setlen
1a484     02 CA 05 F6 | 	mov	COUNT_, #2
1a488     E8 00 A0 FD | 	call	#pushregs_
1a48c     18 F0 07 F1 | 	add	ptra, #24
1a490     DC 31 BF FD | 	call	#_pop
1a494     3D 93 02 F6 | 	mov	arg01, result1
1a498     3E A7 02 F6 | 	mov	local01, result2
1a49c     3F A9 02 F6 | 	mov	local02, result3
1a4a0     E7 92 62 FC | 	wrlong	arg01, fp
1a4a4     04 CE 05 F1 | 	add	fp, #4
1a4a8     E7 A6 62 FC | 	wrlong	local01, fp
1a4ac     04 CE 05 F1 | 	add	fp, #4
1a4b0     E7 A8 62 FC | 	wrlong	local02, fp
1a4b4     08 CE 85 F1 | 	sub	fp, #8
1a4b8     B4 31 BF FD | 	call	#_pop
1a4bc     3D A9 02 F6 | 	mov	local02, result1
1a4c0     0C CE 05 F1 | 	add	fp, #12
1a4c4     E7 A8 62 FC | 	wrlong	local02, fp
1a4c8     04 CE 05 F1 | 	add	fp, #4
1a4cc     E7 7C 62 FC | 	wrlong	result2, fp
1a4d0     04 CE 05 F1 | 	add	fp, #4
1a4d4     E7 7E 62 FC | 	wrlong	result3, fp
1a4d8     08 CE 85 F1 | 	sub	fp, #8
1a4dc     E7 92 02 F6 | 	mov	arg01, fp
1a4e0     0C CE 85 F1 | 	sub	fp, #12
1a4e4     64 33 BF FD | 	call	#_converttoint
1a4e8     3D A7 02 F6 | 	mov	local01, result1
1a4ec     03 A6 66 F0 | 	shl	local01, #3
1a4f0     3D A7 82 F1 | 	sub	local01, result1
1a4f4     02 A6 66 F0 | 	shl	local01, #2
1a4f8     32 A9 02 F6 | 	mov	local02, objptr
1a4fc     16 00 00 FF 
1a500     BC A8 06 F1 | 	add	local02, ##11452
1a504     54 A7 02 F1 | 	add	local01, local02
1a508     E7 92 02 F6 | 	mov	arg01, fp
1a50c     F8 33 BF FD | 	call	#_converttofloat
1a510     08 A6 06 F1 | 	add	local01, #8
1a514     53 7B 62 FC | 	wrlong	result1, local01
1a518     E7 F0 03 F6 | 	mov	ptra, fp
1a51c     F2 00 A0 FD | 	call	#popregs_
1a520                 | _do_setlen_ret
1a520     2D 00 64 FD | 	ret
1a524                 | 
1a524                 | ' 
1a524                 | ' ' ------------------ setpan
1a524                 | ' 
1a524                 | ' sub do_setpan
1a524                 | _do_setpan
1a524     02 CA 05 F6 | 	mov	COUNT_, #2
1a528     E8 00 A0 FD | 	call	#pushregs_
1a52c     18 F0 07 F1 | 	add	ptra, #24
1a530     3C 31 BF FD | 	call	#_pop
1a534     3D 93 02 F6 | 	mov	arg01, result1
1a538     3E A7 02 F6 | 	mov	local01, result2
1a53c     3F A9 02 F6 | 	mov	local02, result3
1a540     E7 92 62 FC | 	wrlong	arg01, fp
1a544     04 CE 05 F1 | 	add	fp, #4
1a548     E7 A6 62 FC | 	wrlong	local01, fp
1a54c     04 CE 05 F1 | 	add	fp, #4
1a550     E7 A8 62 FC | 	wrlong	local02, fp
1a554     08 CE 85 F1 | 	sub	fp, #8
1a558     14 31 BF FD | 	call	#_pop
1a55c     3D A9 02 F6 | 	mov	local02, result1
1a560     0C CE 05 F1 | 	add	fp, #12
1a564     E7 A8 62 FC | 	wrlong	local02, fp
1a568     04 CE 05 F1 | 	add	fp, #4
1a56c     E7 7C 62 FC | 	wrlong	result2, fp
1a570     04 CE 05 F1 | 	add	fp, #4
1a574     E7 7E 62 FC | 	wrlong	result3, fp
1a578     08 CE 85 F1 | 	sub	fp, #8
1a57c     E7 92 02 F6 | 	mov	arg01, fp
1a580     0C CE 85 F1 | 	sub	fp, #12
1a584     C4 32 BF FD | 	call	#_converttoint
1a588     3D A7 02 F6 | 	mov	local01, result1
1a58c     03 A6 66 F0 | 	shl	local01, #3
1a590     3D A7 82 F1 | 	sub	local01, result1
1a594     02 A6 66 F0 | 	shl	local01, #2
1a598     32 A9 02 F6 | 	mov	local02, objptr
1a59c     16 00 00 FF 
1a5a0     BC A8 06 F1 | 	add	local02, ##11452
1a5a4     54 A7 02 F1 | 	add	local01, local02
1a5a8     E7 92 02 F6 | 	mov	arg01, fp
1a5ac     58 33 BF FD | 	call	#_converttofloat
1a5b0     10 A6 06 F1 | 	add	local01, #16
1a5b4     53 7B 62 FC | 	wrlong	result1, local01
1a5b8     E7 F0 03 F6 | 	mov	ptra, fp
1a5bc     F2 00 A0 FD | 	call	#popregs_
1a5c0                 | _do_setpan_ret
1a5c0     2D 00 64 FD | 	ret
1a5c4                 | 
1a5c4                 | ' 
1a5c4                 | ' ' ------------------ setsustain
1a5c4                 | ' 
1a5c4                 | ' sub do_setsustain
1a5c4                 | _do_setsustain
1a5c4     02 CA 05 F6 | 	mov	COUNT_, #2
1a5c8     E8 00 A0 FD | 	call	#pushregs_
1a5cc     18 F0 07 F1 | 	add	ptra, #24
1a5d0     9C 30 BF FD | 	call	#_pop
1a5d4     3D 93 02 F6 | 	mov	arg01, result1
1a5d8     3E A7 02 F6 | 	mov	local01, result2
1a5dc     3F A9 02 F6 | 	mov	local02, result3
1a5e0     E7 92 62 FC | 	wrlong	arg01, fp
1a5e4     04 CE 05 F1 | 	add	fp, #4
1a5e8     E7 A6 62 FC | 	wrlong	local01, fp
1a5ec     04 CE 05 F1 | 	add	fp, #4
1a5f0     E7 A8 62 FC | 	wrlong	local02, fp
1a5f4     08 CE 85 F1 | 	sub	fp, #8
1a5f8     74 30 BF FD | 	call	#_pop
1a5fc     3D A9 02 F6 | 	mov	local02, result1
1a600     0C CE 05 F1 | 	add	fp, #12
1a604     E7 A8 62 FC | 	wrlong	local02, fp
1a608     04 CE 05 F1 | 	add	fp, #4
1a60c     E7 7C 62 FC | 	wrlong	result2, fp
1a610     04 CE 05 F1 | 	add	fp, #4
1a614     E7 7E 62 FC | 	wrlong	result3, fp
1a618     08 CE 85 F1 | 	sub	fp, #8
1a61c     E7 92 02 F6 | 	mov	arg01, fp
1a620     0C CE 85 F1 | 	sub	fp, #12
1a624     24 32 BF FD | 	call	#_converttoint
1a628     3D A7 02 F6 | 	mov	local01, result1
1a62c     03 A6 66 F0 | 	shl	local01, #3
1a630     3D A7 82 F1 | 	sub	local01, result1
1a634     02 A6 66 F0 | 	shl	local01, #2
1a638     32 A9 02 F6 | 	mov	local02, objptr
1a63c     16 00 00 FF 
1a640     BC A8 06 F1 | 	add	local02, ##11452
1a644     54 A7 02 F1 | 	add	local01, local02
1a648     E7 92 02 F6 | 	mov	arg01, fp
1a64c     FC 31 BF FD | 	call	#_converttoint
1a650     14 A6 06 F1 | 	add	local01, #20
1a654     53 7B 52 FC | 	wrword	result1, local01
1a658     E7 F0 03 F6 | 	mov	ptra, fp
1a65c     F2 00 A0 FD | 	call	#popregs_
1a660                 | _do_setsustain_ret
1a660     2D 00 64 FD | 	ret
1a664                 | 
1a664                 | ' 
1a664                 | ' ' ------------------ setvol
1a664                 | ' 
1a664                 | ' sub do_setvol
1a664                 | _do_setvol
1a664     02 CA 05 F6 | 	mov	COUNT_, #2
1a668     E8 00 A0 FD | 	call	#pushregs_
1a66c     18 F0 07 F1 | 	add	ptra, #24
1a670     FC 2F BF FD | 	call	#_pop
1a674     3D 93 02 F6 | 	mov	arg01, result1
1a678     3E A7 02 F6 | 	mov	local01, result2
1a67c     3F A9 02 F6 | 	mov	local02, result3
1a680     E7 92 62 FC | 	wrlong	arg01, fp
1a684     04 CE 05 F1 | 	add	fp, #4
1a688     E7 A6 62 FC | 	wrlong	local01, fp
1a68c     04 CE 05 F1 | 	add	fp, #4
1a690     E7 A8 62 FC | 	wrlong	local02, fp
1a694     08 CE 85 F1 | 	sub	fp, #8
1a698     D4 2F BF FD | 	call	#_pop
1a69c     3D A9 02 F6 | 	mov	local02, result1
1a6a0     0C CE 05 F1 | 	add	fp, #12
1a6a4     E7 A8 62 FC | 	wrlong	local02, fp
1a6a8     04 CE 05 F1 | 	add	fp, #4
1a6ac     E7 7C 62 FC | 	wrlong	result2, fp
1a6b0     04 CE 05 F1 | 	add	fp, #4
1a6b4     E7 7E 62 FC | 	wrlong	result3, fp
1a6b8     08 CE 85 F1 | 	sub	fp, #8
1a6bc     E7 92 02 F6 | 	mov	arg01, fp
1a6c0     0C CE 85 F1 | 	sub	fp, #12
1a6c4     84 31 BF FD | 	call	#_converttoint
1a6c8     3D A7 02 F6 | 	mov	local01, result1
1a6cc     03 A6 66 F0 | 	shl	local01, #3
1a6d0     3D A7 82 F1 | 	sub	local01, result1
1a6d4     02 A6 66 F0 | 	shl	local01, #2
1a6d8     32 A9 02 F6 | 	mov	local02, objptr
1a6dc     16 00 00 FF 
1a6e0     BC A8 06 F1 | 	add	local02, ##11452
1a6e4     54 A7 02 F1 | 	add	local01, local02
1a6e8     E7 92 02 F6 | 	mov	arg01, fp
1a6ec     18 32 BF FD | 	call	#_converttofloat
1a6f0     0C A6 06 F1 | 	add	local01, #12
1a6f4     53 7B 62 FC | 	wrlong	result1, local01
1a6f8     E7 F0 03 F6 | 	mov	ptra, fp
1a6fc     F2 00 A0 FD | 	call	#popregs_
1a700                 | _do_setvol_ret
1a700     2D 00 64 FD | 	ret
1a704                 | 
1a704                 | ' 
1a704                 | ' ' ------------------ setwave
1a704                 | ' 
1a704                 | ' sub do_setwave
1a704                 | _do_setwave
1a704     02 CA 05 F6 | 	mov	COUNT_, #2
1a708     E8 00 A0 FD | 	call	#pushregs_
1a70c     18 F0 07 F1 | 	add	ptra, #24
1a710     5C 2F BF FD | 	call	#_pop
1a714     3D 93 02 F6 | 	mov	arg01, result1
1a718     3E A7 02 F6 | 	mov	local01, result2
1a71c     3F A9 02 F6 | 	mov	local02, result3
1a720     E7 92 62 FC | 	wrlong	arg01, fp
1a724     04 CE 05 F1 | 	add	fp, #4
1a728     E7 A6 62 FC | 	wrlong	local01, fp
1a72c     04 CE 05 F1 | 	add	fp, #4
1a730     E7 A8 62 FC | 	wrlong	local02, fp
1a734     08 CE 85 F1 | 	sub	fp, #8
1a738     34 2F BF FD | 	call	#_pop
1a73c     3D A9 02 F6 | 	mov	local02, result1
1a740     0C CE 05 F1 | 	add	fp, #12
1a744     E7 A8 62 FC | 	wrlong	local02, fp
1a748     04 CE 05 F1 | 	add	fp, #4
1a74c     E7 7C 62 FC | 	wrlong	result2, fp
1a750     04 CE 05 F1 | 	add	fp, #4
1a754     E7 7E 62 FC | 	wrlong	result3, fp
1a758     08 CE 85 F1 | 	sub	fp, #8
1a75c     E7 92 02 F6 | 	mov	arg01, fp
1a760     0C CE 85 F1 | 	sub	fp, #12
1a764     E4 30 BF FD | 	call	#_converttoint
1a768     3D A7 02 F6 | 	mov	local01, result1
1a76c     03 A6 66 F0 | 	shl	local01, #3
1a770     3D A7 82 F1 | 	sub	local01, result1
1a774     02 A6 66 F0 | 	shl	local01, #2
1a778     32 A9 02 F6 | 	mov	local02, objptr
1a77c     16 00 00 FF 
1a780     BC A8 06 F1 | 	add	local02, ##11452
1a784     54 A7 02 F1 | 	add	local01, local02
1a788     E7 92 02 F6 | 	mov	arg01, fp
1a78c     BC 30 BF FD | 	call	#_converttoint
1a790     04 A6 06 F1 | 	add	local01, #4
1a794     53 7B 42 FC | 	wrbyte	result1, local01
1a798     E7 F0 03 F6 | 	mov	ptra, fp
1a79c     F2 00 A0 FD | 	call	#popregs_
1a7a0                 | _do_setwave_ret
1a7a0     2D 00 64 FD | 	ret
1a7a4                 | 
1a7a4                 | ' 
1a7a4                 | ' ' ------------------ shutup
1a7a4                 | ' 
1a7a4                 | ' sub do_shutup
1a7a4                 | _do_shutup
1a7a4     03 CA 05 F6 | 	mov	COUNT_, #3
1a7a8     E8 00 A0 FD | 	call	#pushregs_
1a7ac     18 F0 07 F1 | 	add	ptra, #24
1a7b0     4C 00 00 FF 
1a7b4     24 64 06 F1 | 	add	objptr, ##38948
1a7b8     32 A7 02 FB | 	rdlong	local01, objptr
1a7bc     53 A9 02 F6 | 	mov	local02, local01
1a7c0     01 A8 66 F0 | 	shl	local02, #1
1a7c4     53 A9 02 F1 | 	add	local02, local01
1a7c8     02 A8 66 F0 | 	shl	local02, #2
1a7cc     03 00 00 FF 
1a7d0     04 64 86 F1 | 	sub	objptr, ##1540
1a7d4     32 A9 02 F1 | 	add	local02, objptr
1a7d8     54 A9 0A FB | 	rdlong	local02, local02 wz
1a7dc                 | ' 
1a7dc                 | ' numpar=compiledline(lineptr_e).result.uresult
1a7dc                 | ' if numpar=0 then
1a7dc     49 00 00 FF 
1a7e0     20 64 86 F1 | 	sub	objptr, ##37408
1a7e4     40 00 90 5D |  if_ne	jmp	#LR__2202
1a7e8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1a7e8     00 AA 06 F6 | 	mov	local03, #0
1a7ec     38 00 00 FF 
1a7f0     B4 65 06 F1 | 	add	objptr, ##29108
1a7f4     D7 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a7f8                 | LR__2200
1a7f8     32 93 02 FB | 	rdlong	arg01, objptr
1a7fc     55 A9 02 F6 | 	mov	local02, local03
1a800     06 A8 66 F0 | 	shl	local02, #6
1a804     54 93 02 F1 | 	add	arg01, local02
1a808     14 92 06 F1 | 	add	arg01, #20
1a80c     49 01 58 FC | 	wrword	#0, arg01
1a810     01 AA 06 F1 | 	add	local03, #1
1a814     08 AA 56 F2 | 	cmps	local03, #8 wc
1a818     DC FF 9F CD |  if_b	jmp	#LR__2200
1a81c                 | LR__2201
1a81c     38 00 00 FF 
1a820     B4 65 86 F1 | 	sub	objptr, ##29108
1a824     58 00 90 FD | 	jmp	#LR__2203
1a828                 | LR__2202
1a828     44 2E BF FD | 	call	#_pop
1a82c     3F A7 02 F6 | 	mov	local01, result3
1a830     E7 7A 62 FC | 	wrlong	result1, fp
1a834     04 CE 05 F1 | 	add	fp, #4
1a838     E7 7C 62 FC | 	wrlong	result2, fp
1a83c     04 CE 05 F1 | 	add	fp, #4
1a840     E7 A6 62 FC | 	wrlong	local01, fp
1a844     08 CE 85 F1 | 	sub	fp, #8
1a848     E7 92 02 F6 | 	mov	arg01, fp
1a84c     FC 2F BF FD | 	call	#_converttoint
1a850     3D AB 52 F6 | 	abs	local03, result1 wc
1a854     07 AA 06 F5 | 	and	local03, #7
1a858     55 A9 82 F6 | 	negc	local02, local03
1a85c     38 00 00 FF 
1a860     B4 65 06 F1 | 	add	objptr, ##29108
1a864     32 93 02 FB | 	rdlong	arg01, objptr
1a868     38 00 00 FF 
1a86c     B4 65 86 F1 | 	sub	objptr, ##29108
1a870     06 A8 66 F0 | 	shl	local02, #6
1a874     54 93 02 F1 | 	add	arg01, local02
1a878     14 92 06 F1 | 	add	arg01, #20
1a87c     49 01 58 FC | 	wrword	#0, arg01
1a880                 | LR__2203
1a880     E7 F0 03 F6 | 	mov	ptra, fp
1a884     F2 00 A0 FD | 	call	#popregs_
1a888                 | _do_shutup_ret
1a888     2D 00 64 FD | 	ret
1a88c                 | 
1a88c                 | ' 
1a88c                 | ' ' ------------------ sin
1a88c                 | ' 
1a88c                 | ' sub do_sin
1a88c                 | _do_sin
1a88c     01 CA 05 F6 | 	mov	COUNT_, #1
1a890     E8 00 A0 FD | 	call	#pushregs_
1a894     10 F0 07 F1 | 	add	ptra, #16
1a898     4C 00 00 FF 
1a89c     24 64 06 F1 | 	add	objptr, ##38948
1a8a0     32 97 02 FB | 	rdlong	arg03, objptr
1a8a4     4B 95 02 F6 | 	mov	arg02, arg03
1a8a8     01 94 66 F0 | 	shl	arg02, #1
1a8ac     4B 95 02 F1 | 	add	arg02, arg03
1a8b0     02 94 66 F0 | 	shl	arg02, #2
1a8b4     03 00 00 FF 
1a8b8     04 64 86 F1 | 	sub	objptr, ##1540
1a8bc     32 95 02 F1 | 	add	arg02, objptr
1a8c0     4A 97 02 FB | 	rdlong	arg03, arg02
1a8c4                 | ' 
1a8c4                 | ' numpar=compiledline(lineptr_e).result.uresult
1a8c4                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1a8c4     02 96 16 F2 | 	cmp	arg03, #2 wc
1a8c8     49 00 00 FF 
1a8cc     20 64 86 F1 | 	sub	objptr, ##37408
1a8d0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1a8d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1a8d8     00 92 06 F6 | 	mov	arg01, #0
1a8dc     A0 F6 B0 FD | 	call	#__system___getiolock_0622
1a8e0     3D 93 02 F6 | 	mov	arg01, result1
1a8e4     14 A1 B0 FD | 	call	#__system___lockmem
1a8e8     98 01 00 FF 
1a8ec     6A 95 06 F6 | 	mov	arg02, ##@LR__6090
1a8f0     00 92 06 F6 | 	mov	arg01, #0
1a8f4     00 96 06 F6 | 	mov	arg03, #0
1a8f8     F4 AD B0 FD | 	call	#__system___basic_print_string
1a8fc     00 92 06 F6 | 	mov	arg01, #0
1a900     7C F6 B0 FD | 	call	#__system___getiolock_0622
1a904     3D 01 68 FC | 	wrlong	#0, result1
1a908     27 92 06 F6 | 	mov	arg01, #39
1a90c     00 94 06 F6 | 	mov	arg02, #0
1a910     C0 63 B0 FD | 	call	#_printerror
1a914     64 00 90 FD | 	jmp	#LR__2211
1a918                 | LR__2210
1a918     54 2D BF FD | 	call	#_pop
1a91c     E7 7A 62 FC | 	wrlong	result1, fp
1a920     04 CE 05 F1 | 	add	fp, #4
1a924     E7 7C 62 FC | 	wrlong	result2, fp
1a928     04 CE 05 F1 | 	add	fp, #4
1a92c     E7 7E 62 FC | 	wrlong	result3, fp
1a930     08 CE 85 F1 | 	sub	fp, #8
1a934     54 00 00 FF 
1a938     84 64 06 F1 | 	add	objptr, ##43140
1a93c     32 A7 02 FB | 	rdlong	local01, objptr
1a940     54 00 00 FF 
1a944     84 64 86 F1 | 	sub	objptr, ##43140
1a948     E7 92 02 F6 | 	mov	arg01, fp
1a94c     B8 2F BF FD | 	call	#_converttofloat
1a950     3D 95 02 F6 | 	mov	arg02, result1
1a954     53 93 02 F6 | 	mov	arg01, local01
1a958     70 C7 B0 FD | 	call	#__system___float_mul
1a95c     3D 93 02 F6 | 	mov	arg01, result1
1a960     D8 D0 B0 FD | 	call	#__system____builtin_sinf
1a964     E7 7A 62 FC | 	wrlong	result1, fp
1a968     08 CE 05 F1 | 	add	fp, #8
1a96c     E7 3C 68 FC | 	wrlong	#30, fp
1a970     08 CE 85 F1 | 	sub	fp, #8
1a974     E7 92 02 F6 | 	mov	arg01, fp
1a978     84 2D BF FD | 	call	#_push
1a97c                 | LR__2211
1a97c     E7 F0 03 F6 | 	mov	ptra, fp
1a980     F2 00 A0 FD | 	call	#popregs_
1a984                 | _do_sin_ret
1a984     2D 00 64 FD | 	ret
1a988                 | 
1a988                 | ' 
1a988                 | ' ' ------------------ skip
1a988                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1a988                 | ' 
1a988                 | ' sub do_skip
1a988                 | _do_skip
1a988     4C 00 00 FF 
1a98c     24 64 06 F1 | 	add	objptr, ##38948
1a990     32 81 02 FB | 	rdlong	_var01, objptr
1a994     40 83 02 F6 | 	mov	_var02, _var01
1a998     01 82 66 F0 | 	shl	_var02, #1
1a99c     40 83 02 F1 | 	add	_var02, _var01
1a9a0     02 82 66 F0 | 	shl	_var02, #2
1a9a4     03 00 00 FF 
1a9a8     04 64 86 F1 | 	sub	objptr, ##1540
1a9ac     32 83 02 F1 | 	add	_var02, objptr
1a9b0     41 83 02 FB | 	rdlong	_var02, _var02
1a9b4     01 82 86 F1 | 	sub	_var02, #1
1a9b8     03 00 00 FF 
1a9bc     04 64 06 F1 | 	add	objptr, ##1540
1a9c0     32 83 62 FC | 	wrlong	_var02, objptr
1a9c4     4C 00 00 FF 
1a9c8     24 64 86 F1 | 	sub	objptr, ##38948
1a9cc                 | _do_skip_ret
1a9cc     2D 00 64 FD | 	ret
1a9d0                 | 
1a9d0                 | ' 
1a9d0                 | ' ' ------------------ sprite
1a9d0                 | ' 
1a9d0                 | ' sub do_sprite
1a9d0                 | _do_sprite
1a9d0     02 CA 05 F6 | 	mov	COUNT_, #2
1a9d4     E8 00 A0 FD | 	call	#pushregs_
1a9d8     30 F0 07 F1 | 	add	ptra, #48
1a9dc     90 2C BF FD | 	call	#_pop
1a9e0     3D 95 02 F6 | 	mov	arg02, result1
1a9e4     3E 97 02 F6 | 	mov	arg03, result2
1a9e8     3F 93 02 F6 | 	mov	arg01, result3
1a9ec     18 CE 05 F1 | 	add	fp, #24
1a9f0     E7 94 62 FC | 	wrlong	arg02, fp
1a9f4     04 CE 05 F1 | 	add	fp, #4
1a9f8     E7 96 62 FC | 	wrlong	arg03, fp
1a9fc     04 CE 05 F1 | 	add	fp, #4
1aa00     E7 92 62 FC | 	wrlong	arg01, fp
1aa04     20 CE 85 F1 | 	sub	fp, #32
1aa08     64 2C BF FD | 	call	#_pop
1aa0c     3D 95 02 F6 | 	mov	arg02, result1
1aa10     3E 97 02 F6 | 	mov	arg03, result2
1aa14     3F 93 02 F6 | 	mov	arg01, result3
1aa18     0C CE 05 F1 | 	add	fp, #12
1aa1c     E7 94 62 FC | 	wrlong	arg02, fp
1aa20     04 CE 05 F1 | 	add	fp, #4
1aa24     E7 96 62 FC | 	wrlong	arg03, fp
1aa28     04 CE 05 F1 | 	add	fp, #4
1aa2c     E7 92 62 FC | 	wrlong	arg01, fp
1aa30     14 CE 85 F1 | 	sub	fp, #20
1aa34     38 2C BF FD | 	call	#_pop
1aa38     3F 95 02 F6 | 	mov	arg02, result3
1aa3c     E7 7A 62 FC | 	wrlong	result1, fp
1aa40     04 CE 05 F1 | 	add	fp, #4
1aa44     E7 7C 62 FC | 	wrlong	result2, fp
1aa48     04 CE 05 F1 | 	add	fp, #4
1aa4c     E7 94 62 FC | 	wrlong	arg02, fp
1aa50     08 CE 85 F1 | 	sub	fp, #8
1aa54     E7 92 02 F6 | 	mov	arg01, fp
1aa58     F0 2D BF FD | 	call	#_converttoint
1aa5c     3D A7 02 F6 | 	mov	local01, result1
1aa60     E7 92 02 F6 | 	mov	arg01, fp
1aa64     0C 92 06 F1 | 	add	arg01, #12
1aa68     E0 2D BF FD | 	call	#_converttoint
1aa6c     3D A9 02 F6 | 	mov	local02, result1
1aa70     E7 92 02 F6 | 	mov	arg01, fp
1aa74     18 92 06 F1 | 	add	arg01, #24
1aa78     D0 2D BF FD | 	call	#_converttoint
1aa7c     3D 97 02 F6 | 	mov	arg03, result1
1aa80     53 93 02 F6 | 	mov	arg01, local01
1aa84     54 95 02 F6 | 	mov	arg02, local02
1aa88     4C 72 B0 FD | 	call	#_hg010b_spin2_setspritepos
1aa8c     E7 F0 03 F6 | 	mov	ptra, fp
1aa90     F2 00 A0 FD | 	call	#popregs_
1aa94                 | _do_sprite_ret
1aa94     2D 00 64 FD | 	ret
1aa98                 | 
1aa98                 | ' 
1aa98                 | ' ' ------------------ sqr
1aa98                 | ' 
1aa98                 | ' sub do_sqr
1aa98                 | _do_sqr
1aa98     00 CA 05 F6 | 	mov	COUNT_, #0
1aa9c     E8 00 A0 FD | 	call	#pushregs_
1aaa0     10 F0 07 F1 | 	add	ptra, #16
1aaa4     4C 00 00 FF 
1aaa8     24 64 06 F1 | 	add	objptr, ##38948
1aaac     32 97 02 FB | 	rdlong	arg03, objptr
1aab0     4B 95 02 F6 | 	mov	arg02, arg03
1aab4     01 94 66 F0 | 	shl	arg02, #1
1aab8     4B 95 02 F1 | 	add	arg02, arg03
1aabc     02 94 66 F0 | 	shl	arg02, #2
1aac0     03 00 00 FF 
1aac4     04 64 86 F1 | 	sub	objptr, ##1540
1aac8     32 95 02 F1 | 	add	arg02, objptr
1aacc     4A 97 02 FB | 	rdlong	arg03, arg02
1aad0                 | ' 
1aad0                 | ' numpar=compiledline(lineptr_e).result.uresult
1aad0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1aad0     02 96 16 F2 | 	cmp	arg03, #2 wc
1aad4     49 00 00 FF 
1aad8     20 64 86 F1 | 	sub	objptr, ##37408
1aadc     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1aae0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1aae4     00 92 06 F6 | 	mov	arg01, #0
1aae8     94 F4 B0 FD | 	call	#__system___getiolock_0622
1aaec     3D 93 02 F6 | 	mov	arg01, result1
1aaf0     08 9F B0 FD | 	call	#__system___lockmem
1aaf4     98 01 00 FF 
1aaf8     70 95 06 F6 | 	mov	arg02, ##@LR__6091
1aafc     00 92 06 F6 | 	mov	arg01, #0
1ab00     00 96 06 F6 | 	mov	arg03, #0
1ab04     E8 AB B0 FD | 	call	#__system___basic_print_string
1ab08     00 92 06 F6 | 	mov	arg01, #0
1ab0c     70 F4 B0 FD | 	call	#__system___getiolock_0622
1ab10     3D 01 68 FC | 	wrlong	#0, result1
1ab14     27 92 06 F6 | 	mov	arg01, #39
1ab18     00 94 06 F6 | 	mov	arg02, #0
1ab1c     B4 61 B0 FD | 	call	#_printerror
1ab20     48 00 90 FD | 	jmp	#LR__2221
1ab24                 | LR__2220
1ab24     48 2B BF FD | 	call	#_pop
1ab28     3F 97 02 F6 | 	mov	arg03, result3
1ab2c     E7 7A 62 FC | 	wrlong	result1, fp
1ab30     04 CE 05 F1 | 	add	fp, #4
1ab34     E7 7C 62 FC | 	wrlong	result2, fp
1ab38     04 CE 05 F1 | 	add	fp, #4
1ab3c     E7 96 62 FC | 	wrlong	arg03, fp
1ab40     08 CE 85 F1 | 	sub	fp, #8
1ab44     E7 92 02 F6 | 	mov	arg01, fp
1ab48     BC 2D BF FD | 	call	#_converttofloat
1ab4c     3D 93 02 F6 | 	mov	arg01, result1
1ab50     A0 C4 B0 FD | 	call	#__system___float_sqrt
1ab54     E7 7A 62 FC | 	wrlong	result1, fp
1ab58     08 CE 05 F1 | 	add	fp, #8
1ab5c     E7 3C 68 FC | 	wrlong	#30, fp
1ab60     08 CE 85 F1 | 	sub	fp, #8
1ab64     E7 92 02 F6 | 	mov	arg01, fp
1ab68     94 2B BF FD | 	call	#_push
1ab6c                 | LR__2221
1ab6c     E7 F0 03 F6 | 	mov	ptra, fp
1ab70     F2 00 A0 FD | 	call	#popregs_
1ab74                 | _do_sqr_ret
1ab74     2D 00 64 FD | 	ret
1ab78                 | 
1ab78                 | ' 
1ab78                 | ' ' ------------------ stick
1ab78                 | ' 
1ab78                 | ' sub do_stick
1ab78                 | _do_stick
1ab78     02 CA 05 F6 | 	mov	COUNT_, #2
1ab7c     E8 00 A0 FD | 	call	#pushregs_
1ab80     10 F0 07 F1 | 	add	ptra, #16
1ab84     4C 00 00 FF 
1ab88     24 64 06 F1 | 	add	objptr, ##38948
1ab8c     32 A7 02 FB | 	rdlong	local01, objptr
1ab90     53 97 02 F6 | 	mov	arg03, local01
1ab94     01 96 66 F0 | 	shl	arg03, #1
1ab98     53 97 02 F1 | 	add	arg03, local01
1ab9c     02 96 66 F0 | 	shl	arg03, #2
1aba0     03 00 00 FF 
1aba4     04 64 86 F1 | 	sub	objptr, ##1540
1aba8     32 97 02 F1 | 	add	arg03, objptr
1abac     4B A9 02 FB | 	rdlong	local02, arg03
1abb0                 | ' 
1abb0                 | ' numpar=compiledline(lineptr_e).result.uresult
1abb0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1abb0     02 A8 16 F2 | 	cmp	local02, #2 wc
1abb4     49 00 00 FF 
1abb8     20 64 86 F1 | 	sub	objptr, ##37408
1abbc     40 00 90 CD |  if_b	jmp	#LR__2230
1abc0     00 92 06 F6 | 	mov	arg01, #0
1abc4     B8 F3 B0 FD | 	call	#__system___getiolock_0622
1abc8     3D 93 02 F6 | 	mov	arg01, result1
1abcc     2C 9E B0 FD | 	call	#__system___lockmem
1abd0     98 01 00 FF 
1abd4     76 95 06 F6 | 	mov	arg02, ##@LR__6092
1abd8     00 92 06 F6 | 	mov	arg01, #0
1abdc     00 96 06 F6 | 	mov	arg03, #0
1abe0     0C AB B0 FD | 	call	#__system___basic_print_string
1abe4     00 92 06 F6 | 	mov	arg01, #0
1abe8     94 F3 B0 FD | 	call	#__system___getiolock_0622
1abec     3D 01 68 FC | 	wrlong	#0, result1
1abf0     27 92 06 F6 | 	mov	arg01, #39
1abf4     00 94 06 F6 | 	mov	arg02, #0
1abf8     D8 60 B0 FD | 	call	#_printerror
1abfc     E8 00 90 FD | 	jmp	#LR__2234
1ac00                 | LR__2230
1ac00                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1ac00     00 A8 0E F2 | 	cmp	local02, #0 wz
1ac04     30 00 90 5D |  if_ne	jmp	#LR__2231
1ac08     53 00 00 FF 
1ac0c     F8 65 06 F1 | 	add	objptr, ##43000
1ac10     32 A9 02 FB | 	rdlong	local02, objptr
1ac14     53 00 00 FF 
1ac18     F8 65 86 F1 | 	sub	objptr, ##43000
1ac1c     E7 A8 62 FC | 	wrlong	local02, fp
1ac20     08 CE 05 F1 | 	add	fp, #8
1ac24     E7 3A 68 FC | 	wrlong	#29, fp
1ac28     08 CE 85 F1 | 	sub	fp, #8
1ac2c     E7 92 02 F6 | 	mov	arg01, fp
1ac30     CC 2A BF FD | 	call	#_push
1ac34     B0 00 90 FD | 	jmp	#LR__2234
1ac38                 | LR__2231
1ac38     34 2A BF FD | 	call	#_pop
1ac3c     E7 7A 62 FC | 	wrlong	result1, fp
1ac40     04 CE 05 F1 | 	add	fp, #4
1ac44     E7 7C 62 FC | 	wrlong	result2, fp
1ac48     04 CE 05 F1 | 	add	fp, #4
1ac4c     E7 7E 62 FC | 	wrlong	result3, fp
1ac50                 | ' t1=pop()
1ac50                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1ac50     08 CE 85 F1 | 	sub	fp, #8
1ac54     1C 7E 0E F2 | 	cmp	result3, #28 wz
1ac58     08 CE 05 51 |  if_ne	add	fp, #8
1ac5c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1ac60     08 CE 85 51 |  if_ne	sub	fp, #8
1ac64     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1ac68     70 00 90 5D |  if_ne	jmp	#LR__2233
1ac6c     E7 A6 02 FB | 	rdlong	local01, fp
1ac70     54 00 00 FF 
1ac74     E4 64 06 F1 | 	add	objptr, ##43236
1ac78     32 A7 62 FC | 	wrlong	local01, objptr
1ac7c                 | '   q=t1.result.uresult
1ac7c                 | '   if q<7 then 
1ac7c     54 00 00 FF 
1ac80     E4 64 86 F1 | 	sub	objptr, ##43236
1ac84     07 A6 56 F2 | 	cmps	local01, #7 wc
1ac88     40 00 90 3D |  if_ae	jmp	#LR__2232
1ac8c     54 00 00 FF 
1ac90     E4 64 06 F1 | 	add	objptr, ##43236
1ac94     32 A7 02 FB | 	rdlong	local01, objptr
1ac98     02 A6 66 F0 | 	shl	local01, #2
1ac9c     EC 64 86 F1 | 	sub	objptr, #236
1aca0     32 A7 02 F1 | 	add	local01, objptr
1aca4     53 A9 02 FB | 	rdlong	local02, local01
1aca8     E7 A8 62 FC | 	wrlong	local02, fp
1acac     08 CE 05 F1 | 	add	fp, #8
1acb0     E7 3A 68 FC | 	wrlong	#29, fp
1acb4     08 CE 85 F1 | 	sub	fp, #8
1acb8     E7 92 02 F6 | 	mov	arg01, fp
1acbc     53 00 00 FF 
1acc0     F8 65 86 F1 | 	sub	objptr, ##43000
1acc4     38 2A BF FD | 	call	#_push
1acc8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1acc8     1C 00 90 FD | 	jmp	#LR__2234
1accc                 | LR__2232
1accc     29 92 06 F6 | 	mov	arg01, #41
1acd0     00 94 06 F6 | 	mov	arg02, #0
1acd4     FC 5F B0 FD | 	call	#_printerror
1acd8                 | '      printerror(41) : return
1acd8     0C 00 90 FD | 	jmp	#LR__2234
1acdc                 | LR__2233
1acdc     29 92 06 F6 | 	mov	arg01, #41
1ace0     00 94 06 F6 | 	mov	arg02, #0
1ace4     EC 5F B0 FD | 	call	#_printerror
1ace8                 | LR__2234
1ace8     E7 F0 03 F6 | 	mov	ptra, fp
1acec     F2 00 A0 FD | 	call	#popregs_
1acf0                 | _do_stick_ret
1acf0     2D 00 64 FD | 	ret
1acf4                 | 
1acf4                 | ' 
1acf4                 | ' 
1acf4                 | ' sub do_str
1acf4                 | _do_str
1acf4     02 CA 05 F6 | 	mov	COUNT_, #2
1acf8     E8 00 A0 FD | 	call	#pushregs_
1acfc     14 F0 07 F1 | 	add	ptra, #20
1ad00     4C 00 00 FF 
1ad04     24 64 06 F1 | 	add	objptr, ##38948
1ad08     32 97 02 FB | 	rdlong	arg03, objptr
1ad0c     4B 95 02 F6 | 	mov	arg02, arg03
1ad10     01 94 66 F0 | 	shl	arg02, #1
1ad14     4B 95 02 F1 | 	add	arg02, arg03
1ad18     02 94 66 F0 | 	shl	arg02, #2
1ad1c     03 00 00 FF 
1ad20     04 64 86 F1 | 	sub	objptr, ##1540
1ad24     32 95 02 F1 | 	add	arg02, objptr
1ad28     4A 97 02 FB | 	rdlong	arg03, arg02
1ad2c                 | ' 
1ad2c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad2c                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1ad2c     01 96 0E F2 | 	cmp	arg03, #1 wz
1ad30     49 00 00 FF 
1ad34     20 64 86 F1 | 	sub	objptr, ##37408
1ad38     40 00 90 AD |  if_e	jmp	#LR__2240
1ad3c     00 92 06 F6 | 	mov	arg01, #0
1ad40     3C F2 B0 FD | 	call	#__system___getiolock_0622
1ad44     3D 93 02 F6 | 	mov	arg01, result1
1ad48     B0 9C B0 FD | 	call	#__system___lockmem
1ad4c     98 01 00 FF 
1ad50     7E 95 06 F6 | 	mov	arg02, ##@LR__6093
1ad54     00 92 06 F6 | 	mov	arg01, #0
1ad58     00 96 06 F6 | 	mov	arg03, #0
1ad5c     90 A9 B0 FD | 	call	#__system___basic_print_string
1ad60     00 92 06 F6 | 	mov	arg01, #0
1ad64     18 F2 B0 FD | 	call	#__system___getiolock_0622
1ad68     3D 01 68 FC | 	wrlong	#0, result1
1ad6c     27 92 06 F6 | 	mov	arg01, #39
1ad70     00 94 06 F6 | 	mov	arg02, #0
1ad74     5C 5F B0 FD | 	call	#_printerror
1ad78     F0 00 90 FD | 	jmp	#LR__2249
1ad7c                 | LR__2240
1ad7c     F0 28 BF FD | 	call	#_pop
1ad80     3F 97 02 F6 | 	mov	arg03, result3
1ad84     E7 7A 62 FC | 	wrlong	result1, fp
1ad88     04 CE 05 F1 | 	add	fp, #4
1ad8c     E7 7C 62 FC | 	wrlong	result2, fp
1ad90     04 CE 05 F1 | 	add	fp, #4
1ad94     E7 96 62 FC | 	wrlong	arg03, fp
1ad98                 | ' 
1ad98                 | ' t1=pop()
1ad98                 | ' if t1.result_type=result_int then 
1ad98     08 CE 85 F1 | 	sub	fp, #8
1ad9c     1C 96 0E F2 | 	cmp	arg03, #28 wz
1ada0     28 00 90 5D |  if_ne	jmp	#LR__2241
1ada4     E7 92 02 FB | 	rdlong	arg01, fp
1ada8     49 93 52 F6 | 	abs	arg01, arg01 wc
1adac     1F A6 C6 C9 |  if_b	decod	local01, #31
1adb0     00 A6 06 36 |  if_ae	mov	local01, #0
1adb4     10 BF B0 FD | 	call	#__system___float_fromuns
1adb8     53 7B 62 F5 | 	xor	result1, local01
1adbc     3D 93 02 F6 | 	mov	arg01, result1
1adc0     D8 B6 B0 FD | 	call	#__system__str_S
1adc4     3D A9 02 F6 | 	mov	local02, result1
1adc8     88 00 90 FD | 	jmp	#LR__2248
1adcc                 | LR__2241
1adcc     08 CE 05 F1 | 	add	fp, #8
1add0     E7 96 02 FB | 	rdlong	arg03, fp
1add4     08 CE 85 F1 | 	sub	fp, #8
1add8     1D 96 0E F2 | 	cmp	arg03, #29 wz
1addc     18 00 90 5D |  if_ne	jmp	#LR__2242
1ade0     E7 92 02 FB | 	rdlong	arg01, fp
1ade4     E0 BE B0 FD | 	call	#__system___float_fromuns
1ade8     3D 93 02 F6 | 	mov	arg01, result1
1adec     AC B6 B0 FD | 	call	#__system__str_S
1adf0     3D A9 02 F6 | 	mov	local02, result1
1adf4     5C 00 90 FD | 	jmp	#LR__2247
1adf8                 | LR__2242
1adf8     08 CE 05 F1 | 	add	fp, #8
1adfc     E7 96 02 FB | 	rdlong	arg03, fp
1ae00     08 CE 85 F1 | 	sub	fp, #8
1ae04     1E 96 0E F2 | 	cmp	arg03, #30 wz
1ae08     10 00 90 5D |  if_ne	jmp	#LR__2243
1ae0c     E7 92 02 FB | 	rdlong	arg01, fp
1ae10     88 B6 B0 FD | 	call	#__system__str_S
1ae14     3D A9 02 F6 | 	mov	local02, result1
1ae18     38 00 90 FD | 	jmp	#LR__2246
1ae1c                 | LR__2243
1ae1c     08 CE 05 F1 | 	add	fp, #8
1ae20     E7 96 02 FB | 	rdlong	arg03, fp
1ae24     08 CE 85 F1 | 	sub	fp, #8
1ae28     2B 96 0E F2 | 	cmp	arg03, #43 wz
1ae2c     10 00 90 5D |  if_ne	jmp	#LR__2244
1ae30     E7 92 02 FB | 	rdlong	arg01, fp
1ae34     A8 29 BF FD | 	call	#_convertstring
1ae38     3D A9 02 F6 | 	mov	local02, result1
1ae3c     14 00 90 FD | 	jmp	#LR__2245
1ae40                 | LR__2244
1ae40     08 CE 05 F1 | 	add	fp, #8
1ae44     E7 7C 02 FB | 	rdlong	result2, fp
1ae48     08 CE 85 F1 | 	sub	fp, #8
1ae4c     1F 7C 0E F2 | 	cmp	result2, #31 wz
1ae50     E7 A8 02 AB |  if_e	rdlong	local02, fp
1ae54                 | LR__2245
1ae54                 | LR__2246
1ae54                 | LR__2247
1ae54                 | LR__2248
1ae54     E7 A8 62 FC | 	wrlong	local02, fp
1ae58     08 CE 05 F1 | 	add	fp, #8
1ae5c     E7 3E 68 FC | 	wrlong	#31, fp
1ae60     08 CE 85 F1 | 	sub	fp, #8
1ae64     E7 92 02 F6 | 	mov	arg01, fp
1ae68     94 28 BF FD | 	call	#_push
1ae6c                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1ae6c                 | LR__2249
1ae6c     E7 F0 03 F6 | 	mov	ptra, fp
1ae70     F2 00 A0 FD | 	call	#popregs_
1ae74                 | _do_str_ret
1ae74     2D 00 64 FD | 	ret
1ae78                 | 
1ae78                 | ' ' ------------------ strig
1ae78                 | ' 
1ae78                 | ' sub do_strig
1ae78                 | _do_strig
1ae78     02 CA 05 F6 | 	mov	COUNT_, #2
1ae7c     E8 00 A0 FD | 	call	#pushregs_
1ae80     10 F0 07 F1 | 	add	ptra, #16
1ae84     4C 00 00 FF 
1ae88     24 64 06 F1 | 	add	objptr, ##38948
1ae8c     32 A7 02 FB | 	rdlong	local01, objptr
1ae90     53 97 02 F6 | 	mov	arg03, local01
1ae94     01 96 66 F0 | 	shl	arg03, #1
1ae98     53 97 02 F1 | 	add	arg03, local01
1ae9c     02 96 66 F0 | 	shl	arg03, #2
1aea0     03 00 00 FF 
1aea4     04 64 86 F1 | 	sub	objptr, ##1540
1aea8     32 97 02 F1 | 	add	arg03, objptr
1aeac     4B A9 02 FB | 	rdlong	local02, arg03
1aeb0                 | ' 
1aeb0                 | ' numpar=compiledline(lineptr_e).result.uresult
1aeb0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1aeb0     02 A8 16 F2 | 	cmp	local02, #2 wc
1aeb4     49 00 00 FF 
1aeb8     20 64 86 F1 | 	sub	objptr, ##37408
1aebc     40 00 90 CD |  if_b	jmp	#LR__2250
1aec0     00 92 06 F6 | 	mov	arg01, #0
1aec4     B8 F0 B0 FD | 	call	#__system___getiolock_0622
1aec8     3D 93 02 F6 | 	mov	arg01, result1
1aecc     2C 9B B0 FD | 	call	#__system___lockmem
1aed0     98 01 00 FF 
1aed4     85 95 06 F6 | 	mov	arg02, ##@LR__6094
1aed8     00 92 06 F6 | 	mov	arg01, #0
1aedc     00 96 06 F6 | 	mov	arg03, #0
1aee0     0C A8 B0 FD | 	call	#__system___basic_print_string
1aee4     00 92 06 F6 | 	mov	arg01, #0
1aee8     94 F0 B0 FD | 	call	#__system___getiolock_0622
1aeec     3D 01 68 FC | 	wrlong	#0, result1
1aef0     27 92 06 F6 | 	mov	arg01, #39
1aef4     00 94 06 F6 | 	mov	arg02, #0
1aef8     D8 5D B0 FD | 	call	#_printerror
1aefc     E8 00 90 FD | 	jmp	#LR__2254
1af00                 | LR__2250
1af00                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1af00     00 A8 0E F2 | 	cmp	local02, #0 wz
1af04     30 00 90 5D |  if_ne	jmp	#LR__2251
1af08     54 00 00 FF 
1af0c     14 64 06 F1 | 	add	objptr, ##43028
1af10     32 A9 02 FB | 	rdlong	local02, objptr
1af14     54 00 00 FF 
1af18     14 64 86 F1 | 	sub	objptr, ##43028
1af1c     E7 A8 62 FC | 	wrlong	local02, fp
1af20     08 CE 05 F1 | 	add	fp, #8
1af24     E7 3A 68 FC | 	wrlong	#29, fp
1af28     08 CE 85 F1 | 	sub	fp, #8
1af2c     E7 92 02 F6 | 	mov	arg01, fp
1af30     CC 27 BF FD | 	call	#_push
1af34     B0 00 90 FD | 	jmp	#LR__2254
1af38                 | LR__2251
1af38     34 27 BF FD | 	call	#_pop
1af3c     E7 7A 62 FC | 	wrlong	result1, fp
1af40     04 CE 05 F1 | 	add	fp, #4
1af44     E7 7C 62 FC | 	wrlong	result2, fp
1af48     04 CE 05 F1 | 	add	fp, #4
1af4c     E7 7E 62 FC | 	wrlong	result3, fp
1af50                 | ' t1=pop()
1af50                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1af50     08 CE 85 F1 | 	sub	fp, #8
1af54     1C 7E 0E F2 | 	cmp	result3, #28 wz
1af58     08 CE 05 51 |  if_ne	add	fp, #8
1af5c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1af60     08 CE 85 51 |  if_ne	sub	fp, #8
1af64     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1af68     70 00 90 5D |  if_ne	jmp	#LR__2253
1af6c     E7 A6 02 FB | 	rdlong	local01, fp
1af70     54 00 00 FF 
1af74     E4 64 06 F1 | 	add	objptr, ##43236
1af78     32 A7 62 FC | 	wrlong	local01, objptr
1af7c                 | '   q=t1.result.uresult
1af7c                 | '   if q<7 then 
1af7c     54 00 00 FF 
1af80     E4 64 86 F1 | 	sub	objptr, ##43236
1af84     07 A6 56 F2 | 	cmps	local01, #7 wc
1af88     40 00 90 3D |  if_ae	jmp	#LR__2252
1af8c     54 00 00 FF 
1af90     E4 64 06 F1 | 	add	objptr, ##43236
1af94     32 A7 02 FB | 	rdlong	local01, objptr
1af98     02 A6 66 F0 | 	shl	local01, #2
1af9c     D0 64 86 F1 | 	sub	objptr, #208
1afa0     32 A7 02 F1 | 	add	local01, objptr
1afa4     53 A9 02 FB | 	rdlong	local02, local01
1afa8     E7 A8 62 FC | 	wrlong	local02, fp
1afac     08 CE 05 F1 | 	add	fp, #8
1afb0     E7 3A 68 FC | 	wrlong	#29, fp
1afb4     08 CE 85 F1 | 	sub	fp, #8
1afb8     E7 92 02 F6 | 	mov	arg01, fp
1afbc     54 00 00 FF 
1afc0     14 64 86 F1 | 	sub	objptr, ##43028
1afc4     38 27 BF FD | 	call	#_push
1afc8                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1afc8     1C 00 90 FD | 	jmp	#LR__2254
1afcc                 | LR__2252
1afcc     29 92 06 F6 | 	mov	arg01, #41
1afd0     00 94 06 F6 | 	mov	arg02, #0
1afd4     FC 5C B0 FD | 	call	#_printerror
1afd8                 | '      printerror(41) : return
1afd8     0C 00 90 FD | 	jmp	#LR__2254
1afdc                 | LR__2253
1afdc     29 92 06 F6 | 	mov	arg01, #41
1afe0     00 94 06 F6 | 	mov	arg02, #0
1afe4     EC 5C B0 FD | 	call	#_printerror
1afe8                 | LR__2254
1afe8     E7 F0 03 F6 | 	mov	ptra, fp
1afec     F2 00 A0 FD | 	call	#popregs_
1aff0                 | _do_strig_ret
1aff0     2D 00 64 FD | 	ret
1aff4                 | 
1aff4                 | ' 
1aff4                 | ' ' ------------------ tan
1aff4                 | ' 
1aff4                 | ' sub do_tan
1aff4                 | _do_tan
1aff4     01 CA 05 F6 | 	mov	COUNT_, #1
1aff8     E8 00 A0 FD | 	call	#pushregs_
1affc     10 F0 07 F1 | 	add	ptra, #16
1b000     4C 00 00 FF 
1b004     24 64 06 F1 | 	add	objptr, ##38948
1b008     32 97 02 FB | 	rdlong	arg03, objptr
1b00c     4B 95 02 F6 | 	mov	arg02, arg03
1b010     01 94 66 F0 | 	shl	arg02, #1
1b014     4B 95 02 F1 | 	add	arg02, arg03
1b018     02 94 66 F0 | 	shl	arg02, #2
1b01c     03 00 00 FF 
1b020     04 64 86 F1 | 	sub	objptr, ##1540
1b024     32 95 02 F1 | 	add	arg02, objptr
1b028     4A 97 02 FB | 	rdlong	arg03, arg02
1b02c                 | ' 
1b02c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b02c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b02c     02 96 16 F2 | 	cmp	arg03, #2 wc
1b030     49 00 00 FF 
1b034     20 64 86 F1 | 	sub	objptr, ##37408
1b038     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b03c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1b040     00 92 06 F6 | 	mov	arg01, #0
1b044     38 EF B0 FD | 	call	#__system___getiolock_0622
1b048     3D 93 02 F6 | 	mov	arg01, result1
1b04c     AC 99 B0 FD | 	call	#__system___lockmem
1b050     98 01 00 FF 
1b054     8D 95 06 F6 | 	mov	arg02, ##@LR__6095
1b058     00 92 06 F6 | 	mov	arg01, #0
1b05c     00 96 06 F6 | 	mov	arg03, #0
1b060     8C A6 B0 FD | 	call	#__system___basic_print_string
1b064     00 92 06 F6 | 	mov	arg01, #0
1b068     14 EF B0 FD | 	call	#__system___getiolock_0622
1b06c     3D 01 68 FC | 	wrlong	#0, result1
1b070     27 92 06 F6 | 	mov	arg01, #39
1b074     00 94 06 F6 | 	mov	arg02, #0
1b078     58 5C B0 FD | 	call	#_printerror
1b07c     64 00 90 FD | 	jmp	#LR__2261
1b080                 | LR__2260
1b080     EC 25 BF FD | 	call	#_pop
1b084     E7 7A 62 FC | 	wrlong	result1, fp
1b088     04 CE 05 F1 | 	add	fp, #4
1b08c     E7 7C 62 FC | 	wrlong	result2, fp
1b090     04 CE 05 F1 | 	add	fp, #4
1b094     E7 7E 62 FC | 	wrlong	result3, fp
1b098     08 CE 85 F1 | 	sub	fp, #8
1b09c     54 00 00 FF 
1b0a0     84 64 06 F1 | 	add	objptr, ##43140
1b0a4     32 A7 02 FB | 	rdlong	local01, objptr
1b0a8     54 00 00 FF 
1b0ac     84 64 86 F1 | 	sub	objptr, ##43140
1b0b0     E7 92 02 F6 | 	mov	arg01, fp
1b0b4     50 28 BF FD | 	call	#_converttofloat
1b0b8     3D 95 02 F6 | 	mov	arg02, result1
1b0bc     53 93 02 F6 | 	mov	arg01, local01
1b0c0     08 C0 B0 FD | 	call	#__system___float_mul
1b0c4     3D 93 02 F6 | 	mov	arg01, result1
1b0c8     BC CA B0 FD | 	call	#__system____builtin_tanf
1b0cc     E7 7A 62 FC | 	wrlong	result1, fp
1b0d0     08 CE 05 F1 | 	add	fp, #8
1b0d4     E7 3C 68 FC | 	wrlong	#30, fp
1b0d8     08 CE 85 F1 | 	sub	fp, #8
1b0dc     E7 92 02 F6 | 	mov	arg01, fp
1b0e0     1C 26 BF FD | 	call	#_push
1b0e4                 | LR__2261
1b0e4     E7 F0 03 F6 | 	mov	ptra, fp
1b0e8     F2 00 A0 FD | 	call	#popregs_
1b0ec                 | _do_tan_ret
1b0ec     2D 00 64 FD | 	ret
1b0f0                 | 
1b0f0                 | ' 
1b0f0                 | ' ' ------------------ val
1b0f0                 | ' 
1b0f0                 | ' sub do_val
1b0f0                 | _do_val
1b0f0     05 CA 05 F6 | 	mov	COUNT_, #5
1b0f4     E8 00 A0 FD | 	call	#pushregs_
1b0f8     20 F0 07 F1 | 	add	ptra, #32
1b0fc     4C 00 00 FF 
1b100     24 64 06 F1 | 	add	objptr, ##38948
1b104     32 97 02 FB | 	rdlong	arg03, objptr
1b108     4B 95 02 F6 | 	mov	arg02, arg03
1b10c     01 94 66 F0 | 	shl	arg02, #1
1b110     4B 95 02 F1 | 	add	arg02, arg03
1b114     02 94 66 F0 | 	shl	arg02, #2
1b118     03 00 00 FF 
1b11c     04 64 86 F1 | 	sub	objptr, ##1540
1b120     32 95 02 F1 | 	add	arg02, objptr
1b124     4A 97 02 FB | 	rdlong	arg03, arg02
1b128                 | ' 
1b128                 | ' numpar=compiledline(lineptr_e).result.uresult
1b128                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b128     02 96 16 F2 | 	cmp	arg03, #2 wc
1b12c     49 00 00 FF 
1b130     20 64 86 F1 | 	sub	objptr, ##37408
1b134     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b138     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1b13c     00 92 06 F6 | 	mov	arg01, #0
1b140     3C EE B0 FD | 	call	#__system___getiolock_0622
1b144     3D 93 02 F6 | 	mov	arg01, result1
1b148     B0 98 B0 FD | 	call	#__system___lockmem
1b14c     98 01 00 FF 
1b150     93 95 06 F6 | 	mov	arg02, ##@LR__6096
1b154     00 92 06 F6 | 	mov	arg01, #0
1b158     00 96 06 F6 | 	mov	arg03, #0
1b15c     90 A5 B0 FD | 	call	#__system___basic_print_string
1b160     00 92 06 F6 | 	mov	arg01, #0
1b164     18 EE B0 FD | 	call	#__system___getiolock_0622
1b168     3D 01 68 FC | 	wrlong	#0, result1
1b16c     27 92 06 F6 | 	mov	arg01, #39
1b170     00 94 06 F6 | 	mov	arg02, #0
1b174     5C 5B B0 FD | 	call	#_printerror
1b178     0C 02 90 FD | 	jmp	#LR__2282
1b17c                 | LR__2270
1b17c     F0 24 BF FD | 	call	#_pop
1b180     3F 97 02 F6 | 	mov	arg03, result3
1b184     E7 7A 62 FC | 	wrlong	result1, fp
1b188     04 CE 05 F1 | 	add	fp, #4
1b18c     E7 7C 62 FC | 	wrlong	result2, fp
1b190     04 CE 05 F1 | 	add	fp, #4
1b194     E7 96 62 FC | 	wrlong	arg03, fp
1b198                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b198     08 CE 85 F1 | 	sub	fp, #8
1b19c     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b1a0     18 00 90 5D |  if_ne	jmp	#LR__2271
1b1a4     E7 92 02 FB | 	rdlong	arg01, fp
1b1a8     34 26 BF FD | 	call	#_convertstring
1b1ac     E7 7A 62 FC | 	wrlong	result1, fp
1b1b0     08 CE 05 F1 | 	add	fp, #8
1b1b4     E7 3E 68 FC | 	wrlong	#31, fp
1b1b8     08 CE 85 F1 | 	sub	fp, #8
1b1bc                 | LR__2271
1b1bc                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b1bc     08 CE 05 F1 | 	add	fp, #8
1b1c0     E7 96 02 FB | 	rdlong	arg03, fp
1b1c4     08 CE 85 F1 | 	sub	fp, #8
1b1c8     1F 96 0E F2 | 	cmp	arg03, #31 wz
1b1cc     40 00 90 AD |  if_e	jmp	#LR__2272
1b1d0     00 92 06 F6 | 	mov	arg01, #0
1b1d4     A8 ED B0 FD | 	call	#__system___getiolock_0622
1b1d8     3D 93 02 F6 | 	mov	arg01, result1
1b1dc     1C 98 B0 FD | 	call	#__system___lockmem
1b1e0     98 01 00 FF 
1b1e4     99 95 06 F6 | 	mov	arg02, ##@LR__6097
1b1e8     00 92 06 F6 | 	mov	arg01, #0
1b1ec     00 96 06 F6 | 	mov	arg03, #0
1b1f0     FC A4 B0 FD | 	call	#__system___basic_print_string
1b1f4     00 92 06 F6 | 	mov	arg01, #0
1b1f8     84 ED B0 FD | 	call	#__system___getiolock_0622
1b1fc     3D 01 68 FC | 	wrlong	#0, result1
1b200     0F 92 06 F6 | 	mov	arg01, #15
1b204     00 94 06 F6 | 	mov	arg02, #0
1b208     C8 5A B0 FD | 	call	#_printerror
1b20c     78 01 90 FD | 	jmp	#LR__2282
1b210                 | LR__2272
1b210                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b210     E7 92 02 FB | 	rdlong	arg01, fp
1b214     01 94 06 F6 | 	mov	arg02, #1
1b218     88 B0 B0 FD | 	call	#__system__Left_S
1b21c     3D 93 02 F6 | 	mov	arg01, result1
1b220     98 01 00 FF 
1b224     9F 95 06 F6 | 	mov	arg02, ##@LR__6098
1b228     F8 97 B0 FD | 	call	#__system___string_cmp
1b22c     00 7A 0E F2 | 	cmp	result1, #0 wz
1b230     48 00 90 5D |  if_ne	jmp	#LR__2275
1b234     98 01 00 FF 
1b238     A1 A7 06 F6 | 	mov	local01, ##@LR__6099
1b23c     E7 96 02 FB | 	rdlong	arg03, fp
1b240     4B 93 02 F6 | 	mov	arg01, arg03
1b244     49 A9 02 F6 | 	mov	local02, arg01
1b248     D7 06 48 FB | 	callpa	#(@LR__2274-@LR__2273)>>2,fcache_load_ptr_
1b24c                 | LR__2273
1b24c     54 7B CA FA | 	rdbyte	result1, local02 wz
1b250     01 A8 06 51 |  if_ne	add	local02, #1
1b254     F4 FF 9F 5D |  if_ne	jmp	#LR__2273
1b258                 | LR__2274
1b258     49 A9 82 F1 | 	sub	local02, arg01
1b25c     54 95 02 F6 | 	mov	arg02, local02
1b260     01 94 86 F1 | 	sub	arg02, #1
1b264     4B 93 02 F6 | 	mov	arg01, arg03
1b268     C0 B0 B0 FD | 	call	#__system__Right_S
1b26c     3D 95 02 F6 | 	mov	arg02, result1
1b270     53 93 02 F6 | 	mov	arg01, local01
1b274     E0 97 B0 FD | 	call	#__system___string_concat
1b278     E7 7A 62 FC | 	wrlong	result1, fp
1b27c                 | LR__2275
1b27c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b27c     E7 92 02 FB | 	rdlong	arg01, fp
1b280     01 94 06 F6 | 	mov	arg02, #1
1b284     1C B0 B0 FD | 	call	#__system__Left_S
1b288     3D 93 02 F6 | 	mov	arg01, result1
1b28c     98 01 00 FF 
1b290     A4 95 06 F6 | 	mov	arg02, ##@LR__6100
1b294     8C 97 B0 FD | 	call	#__system___string_cmp
1b298     00 7A 0E F2 | 	cmp	result1, #0 wz
1b29c     48 00 90 5D |  if_ne	jmp	#LR__2278
1b2a0     98 01 00 FF 
1b2a4     A6 A7 06 F6 | 	mov	local01, ##@LR__6101
1b2a8     E7 96 02 FB | 	rdlong	arg03, fp
1b2ac     4B 93 02 F6 | 	mov	arg01, arg03
1b2b0     49 A9 02 F6 | 	mov	local02, arg01
1b2b4     D7 06 48 FB | 	callpa	#(@LR__2277-@LR__2276)>>2,fcache_load_ptr_
1b2b8                 | LR__2276
1b2b8     54 7B CA FA | 	rdbyte	result1, local02 wz
1b2bc     01 A8 06 51 |  if_ne	add	local02, #1
1b2c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2276
1b2c4                 | LR__2277
1b2c4     49 A9 82 F1 | 	sub	local02, arg01
1b2c8     54 95 02 F6 | 	mov	arg02, local02
1b2cc     01 94 86 F1 | 	sub	arg02, #1
1b2d0     4B 93 02 F6 | 	mov	arg01, arg03
1b2d4     54 B0 B0 FD | 	call	#__system__Right_S
1b2d8     3D 95 02 F6 | 	mov	arg02, result1
1b2dc     53 93 02 F6 | 	mov	arg01, local01
1b2e0     74 97 B0 FD | 	call	#__system___string_concat
1b2e4     E7 7A 62 FC | 	wrlong	result1, fp
1b2e8                 | LR__2278
1b2e8     E7 92 02 FB | 	rdlong	arg01, fp
1b2ec     F8 C5 B0 FD | 	call	#__system____builtin_atof
1b2f0     3D AB 02 F6 | 	mov	local03, result1
1b2f4     E7 92 02 FB | 	rdlong	arg01, fp
1b2f8     00 94 06 F6 | 	mov	arg02, #0
1b2fc     50 C4 B0 FD | 	call	#__system____builtin_atoi
1b300     3D AD 02 F6 | 	mov	local04, result1
1b304                 | ' fval=val(t1.result.sresult)
1b304                 | ' ival=val%(t1.result.sresult)
1b304                 | ' if fval=ival then
1b304     56 93 52 F6 | 	abs	arg01, local04 wc
1b308     1F AE C6 C9 |  if_b	decod	local05, #31
1b30c     00 AE 06 36 |  if_ae	mov	local05, #0
1b310     B4 B9 B0 FD | 	call	#__system___float_fromuns
1b314     57 7B 62 F5 | 	xor	result1, local05
1b318     3D 95 02 F6 | 	mov	arg02, result1
1b31c     55 93 02 F6 | 	mov	arg01, local03
1b320     01 96 06 F6 | 	mov	arg03, #1
1b324     D8 C1 B0 FD | 	call	#__system___float_cmp
1b328     00 7A 0E F2 | 	cmp	result1, #0 wz
1b32c     E7 AC 62 AC |  if_e	wrlong	local04, fp
1b330     08 CE 05 A1 |  if_e	add	fp, #8
1b334     E7 38 68 AC |  if_e	wrlong	#28, fp
1b338     08 CE 85 A1 |  if_e	sub	fp, #8
1b33c     40 00 90 AD |  if_e	jmp	#LR__2281
1b340                 | '   if fval=0 andalso ival<>0 then
1b340     55 93 02 F6 | 	mov	arg01, local03
1b344     00 94 06 F6 | 	mov	arg02, #0
1b348     01 96 06 F6 | 	mov	arg03, #1
1b34c     B0 C1 B0 FD | 	call	#__system___float_cmp
1b350     00 7A 0E F2 | 	cmp	result1, #0 wz
1b354     18 00 90 5D |  if_ne	jmp	#LR__2279
1b358     00 AC 0E F2 | 	cmp	local04, #0 wz
1b35c     E7 AC 62 5C |  if_ne	wrlong	local04, fp
1b360     08 CE 05 51 |  if_ne	add	fp, #8
1b364     E7 38 68 5C |  if_ne	wrlong	#28, fp
1b368     08 CE 85 51 |  if_ne	sub	fp, #8
1b36c     10 00 90 5D |  if_ne	jmp	#LR__2280
1b370                 | LR__2279
1b370     E7 AA 62 FC | 	wrlong	local03, fp
1b374     08 CE 05 F1 | 	add	fp, #8
1b378     E7 3C 68 FC | 	wrlong	#30, fp
1b37c     08 CE 85 F1 | 	sub	fp, #8
1b380                 | LR__2280
1b380                 | LR__2281
1b380     E7 92 02 F6 | 	mov	arg01, fp
1b384     78 23 BF FD | 	call	#_push
1b388                 | LR__2282
1b388     E7 F0 03 F6 | 	mov	ptra, fp
1b38c     F2 00 A0 FD | 	call	#popregs_
1b390                 | _do_val_ret
1b390     2D 00 64 FD | 	ret
1b394                 | 
1b394                 | ' 
1b394                 | ' ' ------------------ waitclock
1b394                 | ' 
1b394                 | ' sub do_waitclock
1b394                 | _do_waitclock
1b394     54 00 00 FF 
1b398     70 64 06 F1 | 	add	objptr, ##43120
1b39c     32 81 02 FB | 	rdlong	_var01, objptr
1b3a0                 | ' c=hkcnt
1b3a0                 | ' do: loop until hkcnt<>c
1b3a0                 | LR__2290
1b3a0     32 83 02 FB | 	rdlong	_var02, objptr
1b3a4     40 83 0A F2 | 	cmp	_var02, _var01 wz
1b3a8     F4 FF 9F AD |  if_e	jmp	#LR__2290
1b3ac     54 00 00 FF 
1b3b0     70 64 86 F1 | 	sub	objptr, ##43120
1b3b4                 | _do_waitclock_ret
1b3b4     2D 00 64 FD | 	ret
1b3b8                 | 
1b3b8                 | ' 
1b3b8                 | ' ' ------------------ waitms
1b3b8                 | ' 
1b3b8                 | ' sub do_waitms
1b3b8                 | _do_waitms
1b3b8     03 CA 05 F6 | 	mov	COUNT_, #3
1b3bc     E8 00 A0 FD | 	call	#pushregs_
1b3c0     18 F0 07 F1 | 	add	ptra, #24
1b3c4     A8 22 BF FD | 	call	#_pop
1b3c8     E7 7A 62 FC | 	wrlong	result1, fp
1b3cc     04 CE 05 F1 | 	add	fp, #4
1b3d0     E7 7C 62 FC | 	wrlong	result2, fp
1b3d4     04 CE 05 F1 | 	add	fp, #4
1b3d8     E7 7E 62 FC | 	wrlong	result3, fp
1b3dc     08 CE 85 F1 | 	sub	fp, #8
1b3e0     E7 92 02 F6 | 	mov	arg01, fp
1b3e4     64 24 BF FD | 	call	#_converttoint
1b3e8     3D A7 02 F6 | 	mov	local01, result1
1b3ec                 | ' 
1b3ec                 | ' t1=pop()  
1b3ec                 | ' t=converttoint(t1)
1b3ec                 | ' if t<0 then return
1b3ec     00 A6 56 F2 | 	cmps	local01, #0 wc
1b3f0     98 00 90 CD |  if_b	jmp	#LR__2306
1b3f4                 | ' if t < 1000 then 
1b3f4     01 00 00 FF 
1b3f8     E8 A7 56 F2 | 	cmps	local01, ##1000 wc
1b3fc     0C 00 90 3D |  if_ae	jmp	#LR__2300
1b400     53 93 02 F6 | 	mov	arg01, local01
1b404     E8 98 B0 FD | 	call	#__system___waitms
1b408     80 00 90 FD | 	jmp	#LR__2305
1b40c                 | LR__2300
1b40c     53 93 52 F6 | 	abs	arg01, local01 wc
1b410     01 00 00 FF 
1b414     E8 93 16 FD | 	qdiv	arg01, ##1000
1b418                 | '   for i=1 to t/1000
1b418     01 A8 06 F6 | 	mov	local02, #1
1b41c     18 AA 62 FD | 	getqx	local03
1b420     55 AB 82 F6 | 	negc	local03, local03
1b424     01 AA 06 F1 | 	add	local03, #1
1b428                 | LR__2301
1b428     55 A9 52 F2 | 	cmps	local02, local03 wc
1b42c     44 00 90 3D |  if_ae	jmp	#LR__2304
1b430     01 00 00 FF 
1b434     E8 93 06 F6 | 	mov	arg01, ##1000
1b438     B4 98 B0 FD | 	call	#__system___waitms
1b43c                 | '     waitms(1000)
1b43c                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b43c     E0 92 06 F6 | 	mov	arg01, #224
1b440     D0 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b444     00 7A 0E F2 | 	cmp	result1, #0 wz
1b448     10 00 90 5D |  if_ne	jmp	#LR__2302
1b44c     E4 92 06 F6 | 	mov	arg01, #228
1b450     C0 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b454     00 7A 0E F2 | 	cmp	result1, #0 wz
1b458     10 00 90 AD |  if_e	jmp	#LR__2303
1b45c                 | LR__2302
1b45c     06 92 06 F6 | 	mov	arg01, #6
1b460     B0 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b464     00 7A 0E F2 | 	cmp	result1, #0 wz
1b468     20 00 90 5D |  if_ne	jmp	#LR__2306
1b46c                 | LR__2303
1b46c     01 A8 06 F1 | 	add	local02, #1
1b470     B4 FF 9F FD | 	jmp	#LR__2301
1b474                 | LR__2304
1b474     53 AB 52 F6 | 	abs	local03, local01 wc
1b478     01 00 00 FF 
1b47c     E8 AB 16 FD | 	qdiv	local03, ##1000
1b480     19 AA 62 FD | 	getqy	local03
1b484     55 93 82 F6 | 	negc	arg01, local03
1b488     64 98 B0 FD | 	call	#__system___waitms
1b48c                 | LR__2305
1b48c                 | LR__2306
1b48c     E7 F0 03 F6 | 	mov	ptra, fp
1b490     F2 00 A0 FD | 	call	#popregs_
1b494                 | _do_waitms_ret
1b494     2D 00 64 FD | 	ret
1b498                 | 
1b498                 | ' 
1b498                 | ' ' ------------------ waitvbl
1b498                 | ' 
1b498                 | ' sub do_waitvbl
1b498                 | _do_waitvbl
1b498     01 92 06 F6 | 	mov	arg01, #1
1b49c     98 75 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b4a0                 | _do_waitvbl_ret
1b4a0     2D 00 64 FD | 	ret
1b4a4                 | 
1b4a4                 | ' 
1b4a4                 | ' ' ------------------ wrpin
1b4a4                 | ' 
1b4a4                 | ' sub do_wrpin
1b4a4                 | _do_wrpin
1b4a4     01 CA 05 F6 | 	mov	COUNT_, #1
1b4a8     E8 00 A0 FD | 	call	#pushregs_
1b4ac     18 F0 07 F1 | 	add	ptra, #24
1b4b0     BC 21 BF FD | 	call	#_pop
1b4b4     3D 95 02 F6 | 	mov	arg02, result1
1b4b8     3E 93 02 F6 | 	mov	arg01, result2
1b4bc     3F A7 02 F6 | 	mov	local01, result3
1b4c0     E7 94 62 FC | 	wrlong	arg02, fp
1b4c4     04 CE 05 F1 | 	add	fp, #4
1b4c8     E7 92 62 FC | 	wrlong	arg01, fp
1b4cc     04 CE 05 F1 | 	add	fp, #4
1b4d0     E7 A6 62 FC | 	wrlong	local01, fp
1b4d4     08 CE 85 F1 | 	sub	fp, #8
1b4d8     94 21 BF FD | 	call	#_pop
1b4dc     3F A7 02 F6 | 	mov	local01, result3
1b4e0     0C CE 05 F1 | 	add	fp, #12
1b4e4     E7 7A 62 FC | 	wrlong	result1, fp
1b4e8     04 CE 05 F1 | 	add	fp, #4
1b4ec     E7 7C 62 FC | 	wrlong	result2, fp
1b4f0     04 CE 05 F1 | 	add	fp, #4
1b4f4     E7 A6 62 FC | 	wrlong	local01, fp
1b4f8     08 CE 85 F1 | 	sub	fp, #8
1b4fc     E7 92 02 F6 | 	mov	arg01, fp
1b500     0C CE 85 F1 | 	sub	fp, #12
1b504     44 23 BF FD | 	call	#_converttoint
1b508     3D A7 02 F6 | 	mov	local01, result1
1b50c     E7 92 02 F6 | 	mov	arg01, fp
1b510     38 23 BF FD | 	call	#_converttoint
1b514     53 7B 02 FC | 	wrpin	result1, local01
1b518     E7 F0 03 F6 | 	mov	ptra, fp
1b51c     F2 00 A0 FD | 	call	#popregs_
1b520                 | _do_wrpin_ret
1b520     2D 00 64 FD | 	ret
1b524                 | 
1b524                 | ' 
1b524                 | ' ' ------------------ wxpin
1b524                 | ' 
1b524                 | ' sub do_wxpin
1b524                 | _do_wxpin
1b524     01 CA 05 F6 | 	mov	COUNT_, #1
1b528     E8 00 A0 FD | 	call	#pushregs_
1b52c     18 F0 07 F1 | 	add	ptra, #24
1b530     3C 21 BF FD | 	call	#_pop
1b534     3D 95 02 F6 | 	mov	arg02, result1
1b538     3E 93 02 F6 | 	mov	arg01, result2
1b53c     3F A7 02 F6 | 	mov	local01, result3
1b540     E7 94 62 FC | 	wrlong	arg02, fp
1b544     04 CE 05 F1 | 	add	fp, #4
1b548     E7 92 62 FC | 	wrlong	arg01, fp
1b54c     04 CE 05 F1 | 	add	fp, #4
1b550     E7 A6 62 FC | 	wrlong	local01, fp
1b554     08 CE 85 F1 | 	sub	fp, #8
1b558     14 21 BF FD | 	call	#_pop
1b55c     3F A7 02 F6 | 	mov	local01, result3
1b560     0C CE 05 F1 | 	add	fp, #12
1b564     E7 7A 62 FC | 	wrlong	result1, fp
1b568     04 CE 05 F1 | 	add	fp, #4
1b56c     E7 7C 62 FC | 	wrlong	result2, fp
1b570     04 CE 05 F1 | 	add	fp, #4
1b574     E7 A6 62 FC | 	wrlong	local01, fp
1b578     08 CE 85 F1 | 	sub	fp, #8
1b57c     E7 92 02 F6 | 	mov	arg01, fp
1b580     0C CE 85 F1 | 	sub	fp, #12
1b584     C4 22 BF FD | 	call	#_converttoint
1b588     3D A7 02 F6 | 	mov	local01, result1
1b58c     E7 92 02 F6 | 	mov	arg01, fp
1b590     B8 22 BF FD | 	call	#_converttoint
1b594     53 7B 12 FC | 	wxpin	result1, local01
1b598     E7 F0 03 F6 | 	mov	ptra, fp
1b59c     F2 00 A0 FD | 	call	#popregs_
1b5a0                 | _do_wxpin_ret
1b5a0     2D 00 64 FD | 	ret
1b5a4                 | 
1b5a4                 | ' 
1b5a4                 | ' ' ------------------ wypin
1b5a4                 | ' 
1b5a4                 | ' sub do_wypin
1b5a4                 | _do_wypin
1b5a4     01 CA 05 F6 | 	mov	COUNT_, #1
1b5a8     E8 00 A0 FD | 	call	#pushregs_
1b5ac     18 F0 07 F1 | 	add	ptra, #24
1b5b0     BC 20 BF FD | 	call	#_pop
1b5b4     3D 95 02 F6 | 	mov	arg02, result1
1b5b8     3E 93 02 F6 | 	mov	arg01, result2
1b5bc     3F A7 02 F6 | 	mov	local01, result3
1b5c0     E7 94 62 FC | 	wrlong	arg02, fp
1b5c4     04 CE 05 F1 | 	add	fp, #4
1b5c8     E7 92 62 FC | 	wrlong	arg01, fp
1b5cc     04 CE 05 F1 | 	add	fp, #4
1b5d0     E7 A6 62 FC | 	wrlong	local01, fp
1b5d4     08 CE 85 F1 | 	sub	fp, #8
1b5d8     94 20 BF FD | 	call	#_pop
1b5dc     3F A7 02 F6 | 	mov	local01, result3
1b5e0     0C CE 05 F1 | 	add	fp, #12
1b5e4     E7 7A 62 FC | 	wrlong	result1, fp
1b5e8     04 CE 05 F1 | 	add	fp, #4
1b5ec     E7 7C 62 FC | 	wrlong	result2, fp
1b5f0     04 CE 05 F1 | 	add	fp, #4
1b5f4     E7 A6 62 FC | 	wrlong	local01, fp
1b5f8     08 CE 85 F1 | 	sub	fp, #8
1b5fc     E7 92 02 F6 | 	mov	arg01, fp
1b600     0C CE 85 F1 | 	sub	fp, #12
1b604     44 22 BF FD | 	call	#_converttoint
1b608     3D A7 02 F6 | 	mov	local01, result1
1b60c     E7 92 02 F6 | 	mov	arg01, fp
1b610     38 22 BF FD | 	call	#_converttoint
1b614     53 7B 22 FC | 	wypin	result1, local01
1b618     E7 F0 03 F6 | 	mov	ptra, fp
1b61c     F2 00 A0 FD | 	call	#popregs_
1b620                 | _do_wypin_ret
1b620     2D 00 64 FD | 	ret
1b624                 | 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' 
1b624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b624                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b624                 | ' 
1b624                 | ' 
1b624                 | ' '------------------ Assign
1b624                 | ' 
1b624                 | ' sub do_assign
1b624                 | _do_assign
1b624     0E CA 05 F6 | 	mov	COUNT_, #14
1b628     E8 00 A0 FD | 	call	#pushregs_
1b62c     44 F0 07 F1 | 	add	ptra, #68
1b630     4C 00 00 FF 
1b634     24 64 06 F1 | 	add	objptr, ##38948
1b638     32 97 02 FB | 	rdlong	arg03, objptr
1b63c     4B 95 02 F6 | 	mov	arg02, arg03
1b640     01 94 66 F0 | 	shl	arg02, #1
1b644     4B 95 02 F1 | 	add	arg02, arg03
1b648     02 94 66 F0 | 	shl	arg02, #2
1b64c     03 00 00 FF 
1b650     04 64 86 F1 | 	sub	objptr, ##1540
1b654     32 95 02 F1 | 	add	arg02, objptr
1b658     4A AD 02 FB | 	rdlong	local04, arg02
1b65c                 | ' 
1b65c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b65c                 | ' if variables(varnum).vartype<array_no_type then 
1b65c     56 97 02 F6 | 	mov	arg03, local04
1b660     04 96 66 F0 | 	shl	arg03, #4
1b664     32 00 00 FF 
1b668     84 64 86 F1 | 	sub	objptr, ##25732
1b66c     32 97 02 F1 | 	add	arg03, objptr
1b670     0C 96 06 F1 | 	add	arg03, #12
1b674     4B 97 02 FB | 	rdlong	arg03, arg03
1b678     00 97 16 F2 | 	cmp	arg03, #256 wc
1b67c     16 00 00 FF 
1b680     9C 65 86 F1 | 	sub	objptr, ##11676
1b684     F8 00 90 3D |  if_ae	jmp	#LR__2310
1b688     E4 1F BF FD | 	call	#_pop
1b68c     E7 7A 62 FC | 	wrlong	result1, fp
1b690     04 CE 05 F1 | 	add	fp, #4
1b694     E7 7C 62 FC | 	wrlong	result2, fp
1b698     04 CE 05 F1 | 	add	fp, #4
1b69c     E7 7E 62 FC | 	wrlong	result3, fp
1b6a0     08 CE 85 F1 | 	sub	fp, #8
1b6a4     E7 96 02 FB | 	rdlong	arg03, fp
1b6a8     04 CE 05 F1 | 	add	fp, #4
1b6ac     E7 94 02 FB | 	rdlong	arg02, fp
1b6b0     56 93 02 F6 | 	mov	arg01, local04
1b6b4     04 92 66 F0 | 	shl	arg01, #4
1b6b8     16 00 00 FF 
1b6bc     9C 65 06 F1 | 	add	objptr, ##11676
1b6c0     32 93 02 F1 | 	add	arg01, objptr
1b6c4     04 92 06 F1 | 	add	arg01, #4
1b6c8     49 97 62 FC | 	wrlong	arg03, arg01
1b6cc     56 97 02 F6 | 	mov	arg03, local04
1b6d0     04 96 66 F0 | 	shl	arg03, #4
1b6d4     32 97 02 F1 | 	add	arg03, objptr
1b6d8     08 96 06 F1 | 	add	arg03, #8
1b6dc     4B 95 62 FC | 	wrlong	arg02, arg03
1b6e0     56 97 02 F6 | 	mov	arg03, local04
1b6e4     04 96 66 F0 | 	shl	arg03, #4
1b6e8     32 97 02 F1 | 	add	arg03, objptr
1b6ec     04 CE 05 F1 | 	add	fp, #4
1b6f0     E7 94 02 FB | 	rdlong	arg02, fp
1b6f4     08 CE 85 F1 | 	sub	fp, #8
1b6f8     0C 96 06 F1 | 	add	arg03, #12
1b6fc     4B 95 62 FC | 	wrlong	arg02, arg03
1b700                 | '   t1=pop() 
1b700                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1b700                 | '   if variables(varnum).vartype<>result_string2 then return
1b700     56 97 02 F6 | 	mov	arg03, local04
1b704     04 96 66 F0 | 	shl	arg03, #4
1b708     32 97 02 F1 | 	add	arg03, objptr
1b70c     0C 96 06 F1 | 	add	arg03, #12
1b710     4B 97 02 FB | 	rdlong	arg03, arg03
1b714     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b718     16 00 00 FF 
1b71c     9C 65 86 F1 | 	sub	objptr, ##11676
1b720     68 03 90 5D |  if_ne	jmp	#LR__2332
1b724     56 AF 02 F6 | 	mov	local05, local04
1b728     04 AE 66 F0 | 	shl	local05, #4
1b72c     16 00 00 FF 
1b730     9C 65 06 F1 | 	add	objptr, ##11676
1b734     32 AF 02 F1 | 	add	local05, objptr
1b738     56 97 02 F6 | 	mov	arg03, local04
1b73c     04 96 66 F0 | 	shl	arg03, #4
1b740     32 97 02 F1 | 	add	arg03, objptr
1b744     04 96 06 F1 | 	add	arg03, #4
1b748     4B 93 02 FB | 	rdlong	arg01, arg03
1b74c     16 00 00 FF 
1b750     9C 65 86 F1 | 	sub	objptr, ##11676
1b754     88 20 BF FD | 	call	#_convertstring
1b758     04 AE 06 F1 | 	add	local05, #4
1b75c     57 7B 62 FC | 	wrlong	result1, local05
1b760     04 AC 66 F0 | 	shl	local04, #4
1b764     32 AF 02 F6 | 	mov	local05, objptr
1b768     16 00 00 FF 
1b76c     9C AF 06 F1 | 	add	local05, ##11676
1b770     57 AD 02 F1 | 	add	local04, local05
1b774     0C AC 06 F1 | 	add	local04, #12
1b778     56 3F 68 FC | 	wrlong	#31, local04
1b77c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1b77c                 | '   variables(varnum).vartype=result_string
1b77c                 | '   return
1b77c     0C 03 90 FD | 	jmp	#LR__2332
1b780                 | LR__2310
1b780                 | ' for i=0 to 2 : arrid(i)=0 : next i
1b780     00 B0 06 F6 | 	mov	local06, #0
1b784                 | LR__2311
1b784     58 AF 02 F6 | 	mov	local05, local06
1b788     53 AF 06 F1 | 	add	local05, #local01
1b78c     00 B2 06 F6 | 	mov	local07, #0
1b790                 | 	'.live	local07
1b790                 | 	'.live	local05
1b790     00 AE 8E F9 | 	altd	local05, #0
1b794     59 AF 02 F6 | 	mov	local05, local07
1b798     01 B0 06 F1 | 	add	local06, #1
1b79c     03 B0 16 F2 | 	cmp	local06, #3 wc
1b7a0     E0 FF 9F CD |  if_b	jmp	#LR__2311
1b7a4     4C 00 00 FF 
1b7a8     24 64 06 F1 | 	add	objptr, ##38948
1b7ac     32 AF 02 FB | 	rdlong	local05, objptr
1b7b0     57 B1 02 F6 | 	mov	local06, local05
1b7b4     01 B0 66 F0 | 	shl	local06, #1
1b7b8     57 B1 02 F1 | 	add	local06, local05
1b7bc     02 B0 66 F0 | 	shl	local06, #2
1b7c0     03 00 00 FF 
1b7c4     04 64 86 F1 | 	sub	objptr, ##1540
1b7c8     32 B1 02 F1 | 	add	local06, objptr
1b7cc     04 B0 06 F1 | 	add	local06, #4
1b7d0     58 B1 02 FB | 	rdlong	local06, local06
1b7d4     49 00 00 FF 
1b7d8     20 64 86 F1 | 	sub	objptr, ##37408
1b7dc     90 1E BF FD | 	call	#_pop
1b7e0     3D B5 02 F6 | 	mov	local08, result1
1b7e4     3E B7 02 F6 | 	mov	local09, result2
1b7e8     3F AF 02 F6 | 	mov	local05, result3
1b7ec     E7 B4 62 FC | 	wrlong	local08, fp
1b7f0     04 CE 05 F1 | 	add	fp, #4
1b7f4     E7 B6 62 FC | 	wrlong	local09, fp
1b7f8     04 CE 05 F1 | 	add	fp, #4
1b7fc     E7 AE 62 FC | 	wrlong	local05, fp
1b800     08 CE 85 F1 | 	sub	fp, #8
1b804                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1b804                 | ' t1=pop() ' var value
1b804                 | ' if numpar>0 then
1b804     01 B0 16 F2 | 	cmp	local06, #1 wc
1b808     50 00 90 CD |  if_b	jmp	#LR__2314
1b80c                 | '   for i=numpar to 1 step -1
1b80c     00 B0 4E F2 | 	cmps	local06, #0 wz
1b810     48 00 90 AD |  if_e	jmp	#LR__2313
1b814                 | LR__2312
1b814     58 1E BF FD | 	call	#_pop
1b818     0C CE 05 F1 | 	add	fp, #12
1b81c     E7 7A 62 FC | 	wrlong	result1, fp
1b820     04 CE 05 F1 | 	add	fp, #4
1b824     E7 7C 62 FC | 	wrlong	result2, fp
1b828     04 CE 05 F1 | 	add	fp, #4
1b82c     E7 7E 62 FC | 	wrlong	result3, fp
1b830     58 AF 02 F6 | 	mov	local05, local06
1b834     01 AE 86 F1 | 	sub	local05, #1
1b838     53 AF 06 F1 | 	add	local05, #local01
1b83c     08 CE 85 F1 | 	sub	fp, #8
1b840     E7 92 02 F6 | 	mov	arg01, fp
1b844     0C CE 85 F1 | 	sub	fp, #12
1b848     00 20 BF FD | 	call	#_converttoint
1b84c     3D B3 02 F6 | 	mov	local07, result1
1b850                 | 	'.live	local07
1b850                 | 	'.live	local05
1b850     00 AE 8E F9 | 	altd	local05, #0
1b854     59 AF 02 F6 | 	mov	local05, local07
1b858     EE B1 6E FB | 	djnz	local06, #LR__2312
1b85c                 | LR__2313
1b85c                 | LR__2314
1b85c     04 AC 66 F0 | 	shl	local04, #4
1b860     32 97 02 F6 | 	mov	arg03, objptr
1b864     16 00 00 FF 
1b868     9C 97 06 F1 | 	add	arg03, ##11676
1b86c     4B AD 02 F1 | 	add	local04, arg03
1b870     04 AC 06 F1 | 	add	local04, #4
1b874     56 B9 02 FB | 	rdlong	local10, local04
1b878     5C 93 02 F6 | 	mov	arg01, local10
1b87c     10 57 B0 FD | 	call	#_pslpeek
1b880     3D BB 32 F9 | 	getword	local11, result1, #0
1b884     5C 93 02 F6 | 	mov	arg01, local10
1b888     02 92 06 F1 | 	add	arg01, #2
1b88c     B8 56 B0 FD | 	call	#_pspeek
1b890     3D BD E2 F8 | 	getbyte	local12, result1, #0
1b894                 | ' esize=pspeek(arrptr+2)
1b894                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1b894     5C 93 02 F6 | 	mov	arg01, local10
1b898     04 92 06 F1 | 	add	arg01, #4
1b89c     F0 56 B0 FD | 	call	#_pslpeek
1b8a0     3D A7 12 F2 | 	cmp	local01, result1 wc
1b8a4     28 00 90 3D |  if_ae	jmp	#LR__2315
1b8a8     5C 93 02 F6 | 	mov	arg01, local10
1b8ac     08 92 06 F1 | 	add	arg01, #8
1b8b0     DC 56 B0 FD | 	call	#_pslpeek
1b8b4     3D A9 12 F2 | 	cmp	local02, result1 wc
1b8b8     14 00 90 3D |  if_ae	jmp	#LR__2315
1b8bc     5C 93 02 F6 | 	mov	arg01, local10
1b8c0     0C 92 06 F1 | 	add	arg01, #12
1b8c4     C8 56 B0 FD | 	call	#_pslpeek
1b8c8     3D AB 12 F2 | 	cmp	local03, result1 wc
1b8cc     10 00 90 CD |  if_b	jmp	#LR__2316
1b8d0                 | LR__2315
1b8d0     31 92 06 F6 | 	mov	arg01, #49
1b8d4     00 94 06 F6 | 	mov	arg02, #0
1b8d8     F8 53 B0 FD | 	call	#_printerror
1b8dc     AC 01 90 FD | 	jmp	#LR__2332
1b8e0                 | LR__2316
1b8e0     5C BF 02 F6 | 	mov	local13, local10
1b8e4     10 BE 06 F1 | 	add	local13, #16
1b8e8     5C 93 02 F6 | 	mov	arg01, local10
1b8ec     04 92 06 F1 | 	add	arg01, #4
1b8f0     9C 56 B0 FD | 	call	#_pslpeek
1b8f4     54 7B 02 FD | 	qmul	result1, local02
1b8f8     53 B7 02 F6 | 	mov	local09, local01
1b8fc     5C 93 02 F6 | 	mov	arg01, local10
1b900     08 92 06 F1 | 	add	arg01, #8
1b904     18 B4 62 FD | 	getqx	local08
1b908     5A B7 02 F1 | 	add	local09, local08
1b90c     80 56 B0 FD | 	call	#_pslpeek
1b910     3D B3 02 F6 | 	mov	local07, result1
1b914     04 B8 06 F1 | 	add	local10, #4
1b918     5C 93 02 F6 | 	mov	arg01, local10
1b91c     70 56 B0 FD | 	call	#_pslpeek
1b920     3D B3 02 FD | 	qmul	local07, result1
1b924     18 B8 62 FD | 	getqx	local10
1b928     55 B9 02 FD | 	qmul	local10, local03
1b92c     18 A6 62 FD | 	getqx	local01
1b930     53 B7 02 F1 | 	add	local09, local01
1b934     5B BD 02 FD | 	qmul	local12, local09
1b938                 | ' 
1b938                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1b938                 | ' select case arrtype
1b938     5D C1 02 F6 | 	mov	local14, local11
1b93c     00 C1 86 F1 | 	sub	local14, #256
1b940     0C C0 26 F3 | 	fle	local14, #12
1b944     18 A6 62 FD | 	getqx	local01
1b948     53 BF 02 F1 | 	add	local13, local01
1b94c     30 C0 62 FD | 	jmprel	local14
1b950                 | LR__2317
1b950     30 00 90 FD | 	jmp	#LR__2318
1b954     50 00 90 FD | 	jmp	#LR__2319
1b958     5C 00 90 FD | 	jmp	#LR__2320
1b95c     68 00 90 FD | 	jmp	#LR__2321
1b960     88 00 90 FD | 	jmp	#LR__2322
1b964     A8 00 90 FD | 	jmp	#LR__2323
1b968     B4 00 90 FD | 	jmp	#LR__2324
1b96c     C0 00 90 FD | 	jmp	#LR__2325
1b970     CC 00 90 FD | 	jmp	#LR__2326
1b974     D8 00 90 FD | 	jmp	#LR__2327
1b978     E4 00 90 FD | 	jmp	#LR__2328
1b97c     F0 00 90 FD | 	jmp	#LR__2329
1b980     FC 00 90 FD | 	jmp	#LR__2330
1b984                 | LR__2318
1b984     E7 92 02 F6 | 	mov	arg01, fp
1b988     5F 95 02 F6 | 	mov	arg02, local13
1b98c     0C 96 06 F6 | 	mov	arg03, #12
1b990     0B 00 00 FF 
1b994     CC 64 06 F1 | 	add	objptr, ##5836
1b998     88 81 B0 FD | 	call	#_psram_spin2_write
1b99c     0B 00 00 FF 
1b9a0     CC 64 86 F1 | 	sub	objptr, ##5836
1b9a4     E4 00 90 FD | 	jmp	#LR__2331
1b9a8                 | LR__2319
1b9a8     E7 94 02 FB | 	rdlong	arg02, fp
1b9ac     5F 93 02 F6 | 	mov	arg01, local13
1b9b0     4C 55 B0 FD | 	call	#_pspoke
1b9b4     D4 00 90 FD | 	jmp	#LR__2331
1b9b8                 | LR__2320
1b9b8     E7 94 02 FB | 	rdlong	arg02, fp
1b9bc     5F 93 02 F6 | 	mov	arg01, local13
1b9c0     3C 55 B0 FD | 	call	#_pspoke
1b9c4     C4 00 90 FD | 	jmp	#LR__2331
1b9c8                 | LR__2321
1b9c8     E7 94 02 FB | 	rdlong	arg02, fp
1b9cc     5F 93 02 F6 | 	mov	arg01, local13
1b9d0     2C 55 B0 FD | 	call	#_pspoke
1b9d4     01 BE 06 F1 | 	add	local13, #1
1b9d8     E7 94 02 FB | 	rdlong	arg02, fp
1b9dc     08 94 46 F0 | 	shr	arg02, #8
1b9e0     5F 93 02 F6 | 	mov	arg01, local13
1b9e4     18 55 B0 FD | 	call	#_pspoke
1b9e8     A0 00 90 FD | 	jmp	#LR__2331
1b9ec                 | LR__2322
1b9ec     E7 94 02 FB | 	rdlong	arg02, fp
1b9f0     5F 93 02 F6 | 	mov	arg01, local13
1b9f4     08 55 B0 FD | 	call	#_pspoke
1b9f8     01 BE 06 F1 | 	add	local13, #1
1b9fc     E7 94 02 FB | 	rdlong	arg02, fp
1ba00     08 94 46 F0 | 	shr	arg02, #8
1ba04     5F 93 02 F6 | 	mov	arg01, local13
1ba08     F4 54 B0 FD | 	call	#_pspoke
1ba0c     7C 00 90 FD | 	jmp	#LR__2331
1ba10                 | LR__2323
1ba10     E7 94 02 FB | 	rdlong	arg02, fp
1ba14     5F 93 02 F6 | 	mov	arg01, local13
1ba18     54 54 B0 FD | 	call	#_pslpoke
1ba1c     6C 00 90 FD | 	jmp	#LR__2331
1ba20                 | LR__2324
1ba20     E7 94 02 FB | 	rdlong	arg02, fp
1ba24     5F 93 02 F6 | 	mov	arg01, local13
1ba28     44 54 B0 FD | 	call	#_pslpoke
1ba2c     5C 00 90 FD | 	jmp	#LR__2331
1ba30                 | LR__2325
1ba30     E7 94 02 FB | 	rdlong	arg02, fp
1ba34     5F 93 02 F6 | 	mov	arg01, local13
1ba38     34 54 B0 FD | 	call	#_pslpoke
1ba3c     4C 00 90 FD | 	jmp	#LR__2331
1ba40                 | LR__2326
1ba40     E7 94 02 FB | 	rdlong	arg02, fp
1ba44     5F 93 02 F6 | 	mov	arg01, local13
1ba48     24 54 B0 FD | 	call	#_pslpoke
1ba4c     3C 00 90 FD | 	jmp	#LR__2331
1ba50                 | LR__2327
1ba50     E7 94 02 FB | 	rdlong	arg02, fp
1ba54     5F 93 02 F6 | 	mov	arg01, local13
1ba58     14 54 B0 FD | 	call	#_pslpoke
1ba5c     2C 00 90 FD | 	jmp	#LR__2331
1ba60                 | LR__2328
1ba60     E7 94 02 FB | 	rdlong	arg02, fp
1ba64     5F 93 02 F6 | 	mov	arg01, local13
1ba68     04 54 B0 FD | 	call	#_pslpoke
1ba6c     1C 00 90 FD | 	jmp	#LR__2331
1ba70                 | LR__2329
1ba70     E7 94 02 FB | 	rdlong	arg02, fp
1ba74     5F 93 02 F6 | 	mov	arg01, local13
1ba78     F4 53 B0 FD | 	call	#_pslpoke
1ba7c     0C 00 90 FD | 	jmp	#LR__2331
1ba80                 | LR__2330
1ba80     32 92 06 F6 | 	mov	arg01, #50
1ba84     00 94 06 F6 | 	mov	arg02, #0
1ba88     48 52 B0 FD | 	call	#_printerror
1ba8c                 | LR__2331
1ba8c                 | LR__2332
1ba8c     E7 F0 03 F6 | 	mov	ptra, fp
1ba90     F2 00 A0 FD | 	call	#popregs_
1ba94                 | _do_assign_ret
1ba94     2D 00 64 FD | 	ret
1ba98                 | 
1ba98                 | ' 
1ba98                 | ' 
1ba98                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1ba98                 | ' 
1ba98                 | ' sub do_getvar
1ba98                 | _do_getvar
1ba98     0D CA 05 F6 | 	mov	COUNT_, #13
1ba9c     E8 00 A0 FD | 	call	#pushregs_
1baa0     3C F0 07 F1 | 	add	ptra, #60
1baa4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1baa4     4C 00 00 FF 
1baa8     24 64 06 F1 | 	add	objptr, ##38948
1baac     32 A7 02 FB | 	rdlong	local01, objptr
1bab0     53 97 02 F6 | 	mov	arg03, local01
1bab4     01 96 66 F0 | 	shl	arg03, #1
1bab8     53 97 02 F1 | 	add	arg03, local01
1babc     02 96 66 F0 | 	shl	arg03, #2
1bac0     03 00 00 FF 
1bac4     04 64 86 F1 | 	sub	objptr, ##1540
1bac8     32 97 02 F1 | 	add	arg03, objptr
1bacc     04 96 06 F1 | 	add	arg03, #4
1bad0     4B 97 0A FB | 	rdlong	arg03, arg03 wz
1bad4     49 00 00 FF 
1bad8     20 64 86 F1 | 	sub	objptr, ##37408
1badc     C4 00 90 5D |  if_ne	jmp	#LR__2341
1bae0     4C 00 00 FF 
1bae4     24 64 06 F1 | 	add	objptr, ##38948
1bae8     32 A7 02 FB | 	rdlong	local01, objptr
1baec     53 93 02 F6 | 	mov	arg01, local01
1baf0     01 92 66 F0 | 	shl	arg01, #1
1baf4     53 93 02 F1 | 	add	arg01, local01
1baf8     02 92 66 F0 | 	shl	arg01, #2
1bafc     03 00 00 FF 
1bb00     04 64 86 F1 | 	sub	objptr, ##1540
1bb04     32 93 02 F1 | 	add	arg01, objptr
1bb08     49 A7 02 FB | 	rdlong	local01, arg01
1bb0c     04 A6 66 F0 | 	shl	local01, #4
1bb10     32 00 00 FF 
1bb14     84 64 86 F1 | 	sub	objptr, ##25732
1bb18     32 A7 02 F1 | 	add	local01, objptr
1bb1c     04 A6 06 F1 | 	add	local01, #4
1bb20     53 93 02 FB | 	rdlong	arg01, local01
1bb24     04 A6 06 F1 | 	add	local01, #4
1bb28     53 A7 02 FB | 	rdlong	local01, local01
1bb2c     E7 92 62 FC | 	wrlong	arg01, fp
1bb30     04 CE 05 F1 | 	add	fp, #4
1bb34     E7 A6 62 FC | 	wrlong	local01, fp
1bb38     35 00 00 FF 
1bb3c     88 64 06 F1 | 	add	objptr, ##27272
1bb40     32 A7 02 FB | 	rdlong	local01, objptr
1bb44     53 93 02 F6 | 	mov	arg01, local01
1bb48     01 92 66 F0 | 	shl	arg01, #1
1bb4c     53 93 02 F1 | 	add	arg01, local01
1bb50     02 92 66 F0 | 	shl	arg01, #2
1bb54     03 00 00 FF 
1bb58     04 64 86 F1 | 	sub	objptr, ##1540
1bb5c     32 93 02 F1 | 	add	arg01, objptr
1bb60     49 A7 02 FB | 	rdlong	local01, arg01
1bb64     04 A6 66 F0 | 	shl	local01, #4
1bb68     32 00 00 FF 
1bb6c     84 64 86 F1 | 	sub	objptr, ##25732
1bb70     32 A7 02 F1 | 	add	local01, objptr
1bb74     0C A6 06 F1 | 	add	local01, #12
1bb78     53 A7 02 FB | 	rdlong	local01, local01
1bb7c     04 CE 05 F1 | 	add	fp, #4
1bb80     E7 A6 62 FC | 	wrlong	local01, fp
1bb84                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1bb84                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bb84                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1bb84     08 CE 85 F1 | 	sub	fp, #8
1bb88     00 A7 16 F2 | 	cmp	local01, #256 wc
1bb8c     16 00 00 FF 
1bb90     9C 65 86 F1 | 	sub	objptr, ##11676
1bb94     0C 00 90 3D |  if_ae	jmp	#LR__2340
1bb98     E7 92 02 F6 | 	mov	arg01, fp
1bb9c     60 1B BF FD | 	call	#_push
1bba0     94 03 90 FD | 	jmp	#LR__2362
1bba4                 | LR__2340
1bba4                 | LR__2341
1bba4     4C 00 00 FF 
1bba8     24 64 06 F1 | 	add	objptr, ##38948
1bbac     32 97 02 FB | 	rdlong	arg03, objptr
1bbb0     4B 95 02 F6 | 	mov	arg02, arg03
1bbb4     01 94 66 F0 | 	shl	arg02, #1
1bbb8     4B 95 02 F1 | 	add	arg02, arg03
1bbbc     02 94 66 F0 | 	shl	arg02, #2
1bbc0     03 00 00 FF 
1bbc4     04 64 86 F1 | 	sub	objptr, ##1540
1bbc8     32 95 02 F1 | 	add	arg02, objptr
1bbcc     4A 97 02 FB | 	rdlong	arg03, arg02
1bbd0     04 96 66 F0 | 	shl	arg03, #4
1bbd4     32 00 00 FF 
1bbd8     84 64 86 F1 | 	sub	objptr, ##25732
1bbdc     32 97 02 F1 | 	add	arg03, objptr
1bbe0     04 96 06 F1 | 	add	arg03, #4
1bbe4     4B A9 02 FB | 	rdlong	local02, arg03
1bbe8     54 93 02 F6 | 	mov	arg01, local02
1bbec     16 00 00 FF 
1bbf0     9C 65 86 F1 | 	sub	objptr, ##11676
1bbf4     98 53 B0 FD | 	call	#_pslpeek
1bbf8     3D AB 32 F9 | 	getword	local03, result1, #0
1bbfc     4C 00 00 FF 
1bc00     24 64 06 F1 | 	add	objptr, ##38948
1bc04     32 97 02 FB | 	rdlong	arg03, objptr
1bc08     4B 95 02 F6 | 	mov	arg02, arg03
1bc0c     01 94 66 F0 | 	shl	arg02, #1
1bc10     4B 95 02 F1 | 	add	arg02, arg03
1bc14     02 94 66 F0 | 	shl	arg02, #2
1bc18     03 00 00 FF 
1bc1c     04 64 86 F1 | 	sub	objptr, ##1540
1bc20     32 95 02 F1 | 	add	arg02, objptr
1bc24     04 94 06 F1 | 	add	arg02, #4
1bc28     4A AD 02 FB | 	rdlong	local04, arg02
1bc2c     54 93 02 F6 | 	mov	arg01, local02
1bc30     02 92 06 F1 | 	add	arg01, #2
1bc34     49 00 00 FF 
1bc38     20 64 86 F1 | 	sub	objptr, ##37408
1bc3c     08 53 B0 FD | 	call	#_pspeek
1bc40     3D AF E2 F8 | 	getbyte	local05, result1, #0
1bc44     54 93 02 F6 | 	mov	arg01, local02
1bc48     04 92 06 F1 | 	add	arg01, #4
1bc4c     40 53 B0 FD | 	call	#_pslpeek
1bc50     3D B1 02 F6 | 	mov	local06, result1
1bc54     54 93 02 F6 | 	mov	arg01, local02
1bc58     08 92 06 F1 | 	add	arg01, #8
1bc5c     30 53 B0 FD | 	call	#_pslpeek
1bc60     3D B3 02 F6 | 	mov	local07, result1
1bc64     54 93 02 F6 | 	mov	arg01, local02
1bc68     0C 92 06 F1 | 	add	arg01, #12
1bc6c     20 53 B0 FD | 	call	#_pslpeek
1bc70                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1bc70                 | ' esize=pspeek(arrptr+2)
1bc70                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1bc70                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1bc70                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1bc70                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1bc70     03 AC 16 F2 | 	cmp	local04, #3 wc
1bc74     30 00 90 CD |  if_b	jmp	#LR__2342
1bc78     F4 19 BF FD | 	call	#_pop
1bc7c     3F 97 02 F6 | 	mov	arg03, result3
1bc80     E7 7A 62 FC | 	wrlong	result1, fp
1bc84     04 CE 05 F1 | 	add	fp, #4
1bc88     E7 7C 62 FC | 	wrlong	result2, fp
1bc8c     04 CE 05 F1 | 	add	fp, #4
1bc90     E7 96 62 FC | 	wrlong	arg03, fp
1bc94     08 CE 85 F1 | 	sub	fp, #8
1bc98     E7 92 02 F6 | 	mov	arg01, fp
1bc9c     AC 1B BF FD | 	call	#_converttoint
1bca0     3D B5 02 F6 | 	mov	local08, result1
1bca4     04 00 90 FD | 	jmp	#LR__2343
1bca8                 | LR__2342
1bca8     00 B4 06 F6 | 	mov	local08, #0
1bcac                 | LR__2343
1bcac                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1bcac     02 AC 16 F2 | 	cmp	local04, #2 wc
1bcb0     30 00 90 CD |  if_b	jmp	#LR__2344
1bcb4     B8 19 BF FD | 	call	#_pop
1bcb8     3F 97 02 F6 | 	mov	arg03, result3
1bcbc     E7 7A 62 FC | 	wrlong	result1, fp
1bcc0     04 CE 05 F1 | 	add	fp, #4
1bcc4     E7 7C 62 FC | 	wrlong	result2, fp
1bcc8     04 CE 05 F1 | 	add	fp, #4
1bccc     E7 96 62 FC | 	wrlong	arg03, fp
1bcd0     08 CE 85 F1 | 	sub	fp, #8
1bcd4     E7 92 02 F6 | 	mov	arg01, fp
1bcd8     70 1B BF FD | 	call	#_converttoint
1bcdc     3D B7 02 F6 | 	mov	local09, result1
1bce0     04 00 90 FD | 	jmp	#LR__2345
1bce4                 | LR__2344
1bce4     00 B6 06 F6 | 	mov	local09, #0
1bce8                 | LR__2345
1bce8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1bce8     01 AC 16 F2 | 	cmp	local04, #1 wc
1bcec     30 00 90 CD |  if_b	jmp	#LR__2346
1bcf0     7C 19 BF FD | 	call	#_pop
1bcf4     3F AD 02 F6 | 	mov	local04, result3
1bcf8     E7 7A 62 FC | 	wrlong	result1, fp
1bcfc     04 CE 05 F1 | 	add	fp, #4
1bd00     E7 7C 62 FC | 	wrlong	result2, fp
1bd04     04 CE 05 F1 | 	add	fp, #4
1bd08     E7 AC 62 FC | 	wrlong	local04, fp
1bd0c     08 CE 85 F1 | 	sub	fp, #8
1bd10     E7 92 02 F6 | 	mov	arg01, fp
1bd14     34 1B BF FD | 	call	#_converttoint
1bd18     3D B9 02 F6 | 	mov	local10, result1
1bd1c     04 00 90 FD | 	jmp	#LR__2347
1bd20                 | LR__2346
1bd20     00 B8 06 F6 | 	mov	local10, #0
1bd24                 | LR__2347
1bd24     58 B7 02 FD | 	qmul	local09, local06
1bd28     54 BB 02 F6 | 	mov	local11, local02
1bd2c     10 BA 06 F1 | 	add	local11, #16
1bd30     5C BD 02 F6 | 	mov	local12, local10
1bd34     18 B8 62 FD | 	getqx	local10
1bd38     58 B5 02 FD | 	qmul	local08, local06
1bd3c     5C BD 02 F1 | 	add	local12, local10
1bd40     18 B8 62 FD | 	getqx	local10
1bd44     59 B9 02 FD | 	qmul	local10, local07
1bd48     18 B8 62 FD | 	getqx	local10
1bd4c     5C BD 02 F1 | 	add	local12, local10
1bd50     57 BD 02 FD | 	qmul	local12, local05
1bd54                 | ' 
1bd54                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1bd54                 | ' 
1bd54                 | ' select case vartype
1bd54     55 BF 02 F6 | 	mov	local13, local03
1bd58     00 BF 86 F1 | 	sub	local13, #256
1bd5c     0C BE 26 F3 | 	fle	local13, #12
1bd60     18 B8 62 FD | 	getqx	local10
1bd64     5C BB 02 F1 | 	add	local11, local10
1bd68     30 BE 62 FD | 	jmprel	local13
1bd6c                 | LR__2348
1bd6c     30 00 90 FD | 	jmp	#LR__2349
1bd70     50 00 90 FD | 	jmp	#LR__2350
1bd74     80 00 90 FD | 	jmp	#LR__2351
1bd78     9C 00 90 FD | 	jmp	#LR__2352
1bd7c     D4 00 90 FD | 	jmp	#LR__2353
1bd80     F0 00 90 FD | 	jmp	#LR__2354
1bd84     08 01 90 FD | 	jmp	#LR__2355
1bd88     20 01 90 FD | 	jmp	#LR__2356
1bd8c     30 01 90 FD | 	jmp	#LR__2357
1bd90     40 01 90 FD | 	jmp	#LR__2358
1bd94     58 01 90 FD | 	jmp	#LR__2359
1bd98     68 01 90 FD | 	jmp	#LR__2360
1bd9c     90 01 90 FD | 	jmp	#LR__2361
1bda0                 | LR__2349
1bda0     E7 92 02 F6 | 	mov	arg01, fp
1bda4     5D 95 02 F6 | 	mov	arg02, local11
1bda8     0C 96 06 F6 | 	mov	arg03, #12
1bdac     0B 00 00 FF 
1bdb0     CC 64 06 F1 | 	add	objptr, ##5836
1bdb4     D0 7C B0 FD | 	call	#_psram_spin2_read1
1bdb8     0B 00 00 FF 
1bdbc     CC 64 86 F1 | 	sub	objptr, ##5836
1bdc0     6C 01 90 FD | 	jmp	#LR__2361
1bdc4                 | LR__2350
1bdc4     08 CE 05 F1 | 	add	fp, #8
1bdc8     E7 38 68 FC | 	wrlong	#28, fp
1bdcc     08 CE 85 F1 | 	sub	fp, #8
1bdd0     5D 93 02 F6 | 	mov	arg01, local11
1bdd4     70 51 B0 FD | 	call	#_pspeek
1bdd8     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1bddc     E7 7A 62 FC | 	wrlong	result1, fp
1bde0     80 7A 16 F2 | 	cmp	result1, #128 wc
1bde4     00 A7 66 36 |  if_ae	neg	local01, #256
1bde8     3D BD 02 36 |  if_ae	mov	local12, result1
1bdec     5E A7 42 35 |  if_ae	or	local01, local12
1bdf0     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1bdf4     38 01 90 FD | 	jmp	#LR__2361
1bdf8                 | LR__2351
1bdf8     08 CE 05 F1 | 	add	fp, #8
1bdfc     E7 3A 68 FC | 	wrlong	#29, fp
1be00     08 CE 85 F1 | 	sub	fp, #8
1be04     5D 93 02 F6 | 	mov	arg01, local11
1be08     3C 51 B0 FD | 	call	#_pspeek
1be0c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1be10     E7 7A 62 FC | 	wrlong	result1, fp
1be14     18 01 90 FD | 	jmp	#LR__2361
1be18                 | LR__2352
1be18     08 CE 05 F1 | 	add	fp, #8
1be1c     E7 38 68 FC | 	wrlong	#28, fp
1be20     08 CE 85 F1 | 	sub	fp, #8
1be24     5D 93 02 F6 | 	mov	arg01, local11
1be28     64 51 B0 FD | 	call	#_pslpeek
1be2c     3D 7B 32 F9 | 	getword	result1, result1, #0
1be30     E7 7A 62 FC | 	wrlong	result1, fp
1be34     40 00 00 FF 
1be38     00 7A 16 F2 | 	cmp	result1, ##32768 wc
1be3c     FF 7F 00 3F 
1be40     00 A7 06 36 |  if_ae	mov	local01, ##16776960
1be44     3D BD 02 36 |  if_ae	mov	local12, result1
1be48     5E A7 42 35 |  if_ae	or	local01, local12
1be4c     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1be50     DC 00 90 FD | 	jmp	#LR__2361
1be54                 | LR__2353
1be54     08 CE 05 F1 | 	add	fp, #8
1be58     E7 3A 68 FC | 	wrlong	#29, fp
1be5c     08 CE 85 F1 | 	sub	fp, #8
1be60     5D 93 02 F6 | 	mov	arg01, local11
1be64     28 51 B0 FD | 	call	#_pslpeek
1be68     3D 7B 32 F9 | 	getword	result1, result1, #0
1be6c     E7 7A 62 FC | 	wrlong	result1, fp
1be70     BC 00 90 FD | 	jmp	#LR__2361
1be74                 | LR__2354
1be74     08 CE 05 F1 | 	add	fp, #8
1be78     E7 38 68 FC | 	wrlong	#28, fp
1be7c     08 CE 85 F1 | 	sub	fp, #8
1be80     5D 93 02 F6 | 	mov	arg01, local11
1be84     08 51 B0 FD | 	call	#_pslpeek
1be88     E7 7A 62 FC | 	wrlong	result1, fp
1be8c     A0 00 90 FD | 	jmp	#LR__2361
1be90                 | LR__2355
1be90     08 CE 05 F1 | 	add	fp, #8
1be94     E7 3A 68 FC | 	wrlong	#29, fp
1be98     08 CE 85 F1 | 	sub	fp, #8
1be9c     5D 93 02 F6 | 	mov	arg01, local11
1bea0     EC 50 B0 FD | 	call	#_pslpeek
1bea4     E7 7A 62 FC | 	wrlong	result1, fp
1bea8     84 00 90 FD | 	jmp	#LR__2361
1beac                 | LR__2356
1beac     08 CE 05 F1 | 	add	fp, #8
1beb0     E7 FE 69 FC | 	wrlong	#255, fp
1beb4     08 CE 85 F1 | 	sub	fp, #8
1beb8     E7 60 68 FC | 	wrlong	#48, fp
1bebc     70 00 90 FD | 	jmp	#LR__2361
1bec0                 | LR__2357
1bec0     08 CE 05 F1 | 	add	fp, #8
1bec4     E7 FE 69 FC | 	wrlong	#255, fp
1bec8     08 CE 85 F1 | 	sub	fp, #8
1becc     E7 60 68 FC | 	wrlong	#48, fp
1bed0     5C 00 90 FD | 	jmp	#LR__2361
1bed4                 | LR__2358
1bed4     08 CE 05 F1 | 	add	fp, #8
1bed8     E7 3C 68 FC | 	wrlong	#30, fp
1bedc     08 CE 85 F1 | 	sub	fp, #8
1bee0     5D 93 02 F6 | 	mov	arg01, local11
1bee4     A8 50 B0 FD | 	call	#_pslpeek
1bee8     E7 7A 62 FC | 	wrlong	result1, fp
1beec     40 00 90 FD | 	jmp	#LR__2361
1bef0                 | LR__2359
1bef0     08 CE 05 F1 | 	add	fp, #8
1bef4     E7 FE 69 FC | 	wrlong	#255, fp
1bef8     08 CE 85 F1 | 	sub	fp, #8
1befc     E7 60 68 FC | 	wrlong	#48, fp
1bf00     2C 00 90 FD | 	jmp	#LR__2361
1bf04                 | LR__2360
1bf04     08 CE 05 F1 | 	add	fp, #8
1bf08     E7 3E 68 FC | 	wrlong	#31, fp
1bf0c     08 CE 85 F1 | 	sub	fp, #8
1bf10     5D 93 02 F6 | 	mov	arg01, local11
1bf14     78 50 B0 FD | 	call	#_pslpeek
1bf18     E7 7A 62 FC | 	wrlong	result1, fp
1bf1c     00 04 00 FF 
1bf20     00 7A 16 F2 | 	cmp	result1, ##524288 wc
1bf24     08 CE 05 31 |  if_ae	add	fp, #8
1bf28     E7 56 68 3C |  if_ae	wrlong	#43, fp
1bf2c     08 CE 85 31 |  if_ae	sub	fp, #8
1bf30                 | LR__2361
1bf30     E7 92 02 F6 | 	mov	arg01, fp
1bf34     C8 17 BF FD | 	call	#_push
1bf38                 | LR__2362
1bf38     E7 F0 03 F6 | 	mov	ptra, fp
1bf3c     F2 00 A0 FD | 	call	#popregs_
1bf40                 | _do_getvar_ret
1bf40     2D 00 64 FD | 	ret
1bf44                 | 
1bf44                 | ' 
1bf44                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1bf44                 | ' 
1bf44                 | ' sub do_getaddr
1bf44                 | _do_getaddr
1bf44     09 CA 05 F6 | 	mov	COUNT_, #9
1bf48     E8 00 A0 FD | 	call	#pushregs_
1bf4c     38 F0 07 F1 | 	add	ptra, #56
1bf50                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1bf50                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1bf50     4C 00 00 FF 
1bf54     24 64 06 F1 | 	add	objptr, ##38948
1bf58     32 93 02 FB | 	rdlong	arg01, objptr
1bf5c     49 7D 02 F6 | 	mov	result2, arg01
1bf60     01 7C 66 F0 | 	shl	result2, #1
1bf64     49 7D 02 F1 | 	add	result2, arg01
1bf68     02 7C 66 F0 | 	shl	result2, #2
1bf6c     03 00 00 FF 
1bf70     04 64 86 F1 | 	sub	objptr, ##1540
1bf74     32 7D 02 F1 | 	add	result2, objptr
1bf78     04 7C 06 F1 | 	add	result2, #4
1bf7c     3E 7D 0A FB | 	rdlong	result2, result2 wz
1bf80     49 00 00 FF 
1bf84     20 64 86 F1 | 	sub	objptr, ##37408
1bf88     10 01 90 5D |  if_ne	jmp	#LR__2370
1bf8c     4C 00 00 FF 
1bf90     24 64 06 F1 | 	add	objptr, ##38948
1bf94     32 93 02 FB | 	rdlong	arg01, objptr
1bf98     49 7D 02 F6 | 	mov	result2, arg01
1bf9c     01 7C 66 F0 | 	shl	result2, #1
1bfa0     49 7D 02 F1 | 	add	result2, arg01
1bfa4     02 7C 66 F0 | 	shl	result2, #2
1bfa8     03 00 00 FF 
1bfac     04 64 86 F1 | 	sub	objptr, ##1540
1bfb0     32 7D 02 F1 | 	add	result2, objptr
1bfb4     3E 93 02 FB | 	rdlong	arg01, result2
1bfb8     04 92 66 F0 | 	shl	arg01, #4
1bfbc     32 00 00 FF 
1bfc0     84 64 86 F1 | 	sub	objptr, ##25732
1bfc4     32 93 02 F1 | 	add	arg01, objptr
1bfc8     0C 92 06 F1 | 	add	arg01, #12
1bfcc     49 93 02 FB | 	rdlong	arg01, arg01
1bfd0     08 CE 05 F1 | 	add	fp, #8
1bfd4     E7 92 62 FC | 	wrlong	arg01, fp
1bfd8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bfd8                 | '    if t1.result_type>=array_no_type then goto 2200
1bfd8     08 CE 85 F1 | 	sub	fp, #8
1bfdc     00 93 16 F2 | 	cmp	arg01, #256 wc
1bfe0     16 00 00 FF 
1bfe4     9C 65 86 F1 | 	sub	objptr, ##11676
1bfe8     B0 00 90 3D |  if_ae	jmp	#LR__2371
1bfec     4C 00 00 FF 
1bff0     24 64 06 F1 | 	add	objptr, ##38948
1bff4     32 93 02 FB | 	rdlong	arg01, objptr
1bff8     49 7F 02 F6 | 	mov	result3, arg01
1bffc     01 7E 66 F0 | 	shl	result3, #1
1c000     49 7F 02 F1 | 	add	result3, arg01
1c004     02 7E 66 F0 | 	shl	result3, #2
1c008     03 00 00 FF 
1c00c     04 64 86 F1 | 	sub	objptr, ##1540
1c010     32 7F 02 F1 | 	add	result3, objptr
1c014     3F 7B 02 FB | 	rdlong	result1, result3
1c018     04 7A 66 F0 | 	shl	result1, #4
1c01c     32 00 00 FF 
1c020     84 64 86 F1 | 	sub	objptr, ##25732
1c024     32 7B 02 F1 | 	add	result1, objptr
1c028     04 7A 06 F1 | 	add	result1, #4
1c02c     E7 7A 62 FC | 	wrlong	result1, fp
1c030     35 00 00 FF 
1c034     88 64 06 F1 | 	add	objptr, ##27272
1c038     32 7F 02 FB | 	rdlong	result3, objptr
1c03c     3F 93 02 F6 | 	mov	arg01, result3
1c040     01 92 66 F0 | 	shl	arg01, #1
1c044     3F 93 02 F1 | 	add	arg01, result3
1c048     02 92 66 F0 | 	shl	arg01, #2
1c04c     03 00 00 FF 
1c050     04 64 86 F1 | 	sub	objptr, ##1540
1c054     32 93 02 F1 | 	add	arg01, objptr
1c058     49 93 02 FB | 	rdlong	arg01, arg01
1c05c     04 92 66 F0 | 	shl	arg01, #4
1c060     32 00 00 FF 
1c064     84 64 86 F1 | 	sub	objptr, ##25732
1c068     32 93 02 F1 | 	add	arg01, objptr
1c06c     0C 92 06 F1 | 	add	arg01, #12
1c070     49 93 02 FB | 	rdlong	arg01, arg01
1c074     04 CE 05 F1 | 	add	fp, #4
1c078     E7 92 62 FC | 	wrlong	arg01, fp
1c07c     04 CE 05 F1 | 	add	fp, #4
1c080     E7 3A 68 FC | 	wrlong	#29, fp
1c084     08 CE 85 F1 | 	sub	fp, #8
1c088     E7 92 02 F6 | 	mov	arg01, fp
1c08c     16 00 00 FF 
1c090     9C 65 86 F1 | 	sub	objptr, ##11676
1c094     68 16 BF FD | 	call	#_push
1c098                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c098                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c098                 | '   t1.result_type=result_uint
1c098                 | '   push t1 : return
1c098     24 02 90 FD | 	jmp	#LR__2380
1c09c                 | LR__2370
1c09c                 | LR__2371
1c09c     4C 00 00 FF 
1c0a0     24 64 06 F1 | 	add	objptr, ##38948
1c0a4     32 A7 02 FB | 	rdlong	local01, objptr
1c0a8     53 7D 02 F6 | 	mov	result2, local01
1c0ac     01 7C 66 F0 | 	shl	result2, #1
1c0b0     53 7D 02 F1 | 	add	result2, local01
1c0b4     02 7C 66 F0 | 	shl	result2, #2
1c0b8     03 00 00 FF 
1c0bc     04 64 86 F1 | 	sub	objptr, ##1540
1c0c0     32 7D 02 F1 | 	add	result2, objptr
1c0c4     3E 7D 02 FB | 	rdlong	result2, result2
1c0c8     04 7C 66 F0 | 	shl	result2, #4
1c0cc     32 00 00 FF 
1c0d0     84 64 86 F1 | 	sub	objptr, ##25732
1c0d4     32 7D 02 F1 | 	add	result2, objptr
1c0d8     04 7C 06 F1 | 	add	result2, #4
1c0dc     3E A9 02 FB | 	rdlong	local02, result2
1c0e0     53 93 02 F6 | 	mov	arg01, local01
1c0e4     01 92 66 F0 | 	shl	arg01, #1
1c0e8     53 93 02 F1 | 	add	arg01, local01
1c0ec     02 92 66 F0 | 	shl	arg01, #2
1c0f0     32 00 00 FF 
1c0f4     84 64 06 F1 | 	add	objptr, ##25732
1c0f8     32 93 02 F1 | 	add	arg01, objptr
1c0fc     49 93 02 FB | 	rdlong	arg01, arg01
1c100     04 92 66 F0 | 	shl	arg01, #4
1c104     32 00 00 FF 
1c108     84 64 86 F1 | 	sub	objptr, ##25732
1c10c     32 93 02 F1 | 	add	arg01, objptr
1c110     0C 92 06 F1 | 	add	arg01, #12
1c114     49 93 02 FB | 	rdlong	arg01, arg01
1c118     04 CE 05 F1 | 	add	fp, #4
1c11c     E7 92 62 FC | 	wrlong	arg01, fp
1c120     04 CE 85 F1 | 	sub	fp, #4
1c124     54 93 02 F6 | 	mov	arg01, local02
1c128     16 00 00 FF 
1c12c     9C 65 86 F1 | 	sub	objptr, ##11676
1c130     5C 4E B0 FD | 	call	#_pslpeek
1c134     4C 00 00 FF 
1c138     24 64 06 F1 | 	add	objptr, ##38948
1c13c     32 A7 02 FB | 	rdlong	local01, objptr
1c140     53 93 02 F6 | 	mov	arg01, local01
1c144     01 92 66 F0 | 	shl	arg01, #1
1c148     53 93 02 F1 | 	add	arg01, local01
1c14c     02 92 66 F0 | 	shl	arg01, #2
1c150     03 00 00 FF 
1c154     04 64 86 F1 | 	sub	objptr, ##1540
1c158     32 93 02 F1 | 	add	arg01, objptr
1c15c     04 92 06 F1 | 	add	arg01, #4
1c160     49 AB 02 FB | 	rdlong	local03, arg01
1c164     54 93 02 F6 | 	mov	arg01, local02
1c168     02 92 06 F1 | 	add	arg01, #2
1c16c     49 00 00 FF 
1c170     20 64 86 F1 | 	sub	objptr, ##37408
1c174     D0 4D B0 FD | 	call	#_pspeek
1c178     3D AD E2 F8 | 	getbyte	local04, result1, #0
1c17c     54 93 02 F6 | 	mov	arg01, local02
1c180     04 92 06 F1 | 	add	arg01, #4
1c184     08 4E B0 FD | 	call	#_pslpeek
1c188     3D AF 02 F6 | 	mov	local05, result1
1c18c     54 93 02 F6 | 	mov	arg01, local02
1c190     08 92 06 F1 | 	add	arg01, #8
1c194     F8 4D B0 FD | 	call	#_pslpeek
1c198     3D B1 02 F6 | 	mov	local06, result1
1c19c     54 93 02 F6 | 	mov	arg01, local02
1c1a0     0C 92 06 F1 | 	add	arg01, #12
1c1a4     E8 4D B0 FD | 	call	#_pslpeek
1c1a8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c1a8                 | ' esize=pspeek(arrptr+2)
1c1a8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c1a8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c1a8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c1a8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c1a8     03 AA 16 F2 | 	cmp	local03, #3 wc
1c1ac     30 00 90 CD |  if_b	jmp	#LR__2372
1c1b0     BC 14 BF FD | 	call	#_pop
1c1b4     3F A7 02 F6 | 	mov	local01, result3
1c1b8     E7 7A 62 FC | 	wrlong	result1, fp
1c1bc     04 CE 05 F1 | 	add	fp, #4
1c1c0     E7 7C 62 FC | 	wrlong	result2, fp
1c1c4     04 CE 05 F1 | 	add	fp, #4
1c1c8     E7 A6 62 FC | 	wrlong	local01, fp
1c1cc     08 CE 85 F1 | 	sub	fp, #8
1c1d0     E7 92 02 F6 | 	mov	arg01, fp
1c1d4     74 16 BF FD | 	call	#_converttoint
1c1d8     3D B3 02 F6 | 	mov	local07, result1
1c1dc     04 00 90 FD | 	jmp	#LR__2373
1c1e0                 | LR__2372
1c1e0     00 B2 06 F6 | 	mov	local07, #0
1c1e4                 | LR__2373
1c1e4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c1e4     02 AA 16 F2 | 	cmp	local03, #2 wc
1c1e8     30 00 90 CD |  if_b	jmp	#LR__2374
1c1ec     80 14 BF FD | 	call	#_pop
1c1f0     3F A7 02 F6 | 	mov	local01, result3
1c1f4     E7 7A 62 FC | 	wrlong	result1, fp
1c1f8     04 CE 05 F1 | 	add	fp, #4
1c1fc     E7 7C 62 FC | 	wrlong	result2, fp
1c200     04 CE 05 F1 | 	add	fp, #4
1c204     E7 A6 62 FC | 	wrlong	local01, fp
1c208     08 CE 85 F1 | 	sub	fp, #8
1c20c     E7 92 02 F6 | 	mov	arg01, fp
1c210     38 16 BF FD | 	call	#_converttoint
1c214     3D B5 02 F6 | 	mov	local08, result1
1c218     04 00 90 FD | 	jmp	#LR__2375
1c21c                 | LR__2374
1c21c     00 B4 06 F6 | 	mov	local08, #0
1c220                 | LR__2375
1c220                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c220     01 AA 16 F2 | 	cmp	local03, #1 wc
1c224     30 00 90 CD |  if_b	jmp	#LR__2376
1c228     44 14 BF FD | 	call	#_pop
1c22c     3F A7 02 F6 | 	mov	local01, result3
1c230     E7 7A 62 FC | 	wrlong	result1, fp
1c234     04 CE 05 F1 | 	add	fp, #4
1c238     E7 7C 62 FC | 	wrlong	result2, fp
1c23c     04 CE 05 F1 | 	add	fp, #4
1c240     E7 A6 62 FC | 	wrlong	local01, fp
1c244     08 CE 85 F1 | 	sub	fp, #8
1c248     E7 92 02 F6 | 	mov	arg01, fp
1c24c     FC 15 BF FD | 	call	#_converttoint
1c250     3D B7 02 F6 | 	mov	local09, result1
1c254     04 00 90 FD | 	jmp	#LR__2377
1c258                 | LR__2376
1c258     00 B6 06 F6 | 	mov	local09, #0
1c25c                 | LR__2377
1c25c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c25c                 | ' if numpar>0 then
1c25c     01 AA 16 F2 | 	cmp	local03, #1 wc
1c260     44 00 90 CD |  if_b	jmp	#LR__2378
1c264     57 B5 02 FD | 	qmul	local08, local05
1c268     10 A8 06 F1 | 	add	local02, #16
1c26c     18 B4 62 FD | 	getqx	local08
1c270     57 B3 02 FD | 	qmul	local07, local05
1c274     5A B7 02 F1 | 	add	local09, local08
1c278     18 B4 62 FD | 	getqx	local08
1c27c     58 B5 02 FD | 	qmul	local08, local06
1c280     18 B4 62 FD | 	getqx	local08
1c284     5A B7 02 F1 | 	add	local09, local08
1c288     56 B7 02 FD | 	qmul	local09, local04
1c28c     08 CE 05 F1 | 	add	fp, #8
1c290     E7 3A 68 FC | 	wrlong	#29, fp
1c294     08 CE 85 F1 | 	sub	fp, #8
1c298     18 A6 62 FD | 	getqx	local01
1c29c     53 A9 02 F1 | 	add	local02, local01
1c2a0     E7 A8 62 FC | 	wrlong	local02, fp
1c2a4     10 00 90 FD | 	jmp	#LR__2379
1c2a8                 | LR__2378
1c2a8     08 CE 05 F1 | 	add	fp, #8
1c2ac     E7 3A 68 FC | 	wrlong	#29, fp
1c2b0     08 CE 85 F1 | 	sub	fp, #8
1c2b4     E7 A8 62 FC | 	wrlong	local02, fp
1c2b8                 | LR__2379
1c2b8     E7 92 02 F6 | 	mov	arg01, fp
1c2bc     40 14 BF FD | 	call	#_push
1c2c0                 | LR__2380
1c2c0     E7 F0 03 F6 | 	mov	ptra, fp
1c2c4     F2 00 A0 FD | 	call	#popregs_
1c2c8                 | _do_getaddr_ret
1c2c8     2D 00 64 FD | 	ret
1c2cc                 | 
1c2cc                 | ' 
1c2cc                 | ' 
1c2cc                 | ' 
1c2cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c2cc                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c2cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c2cc                 | ' 
1c2cc                 | ' '--------------------------------- AND 
1c2cc                 | ' 
1c2cc                 | ' sub do_and 
1c2cc                 | _do_and
1c2cc     05 CA 05 F6 | 	mov	COUNT_, #5
1c2d0     E8 00 A0 FD | 	call	#pushregs_
1c2d4     18 F0 07 F1 | 	add	ptra, #24
1c2d8     94 13 BF FD | 	call	#_pop
1c2dc     3D A7 02 F6 | 	mov	local01, result1
1c2e0     3E 93 02 F6 | 	mov	arg01, result2
1c2e4     3F AD 02 F6 | 	mov	local04, result3
1c2e8     49 A9 02 F6 | 	mov	local02, arg01
1c2ec     56 AB 02 F6 | 	mov	local03, local04
1c2f0     7C 13 BF FD | 	call	#_pop
1c2f4     3F AF 02 F6 | 	mov	local05, result3
1c2f8     E7 7A 62 FC | 	wrlong	result1, fp
1c2fc     04 CE 05 F1 | 	add	fp, #4
1c300     E7 7C 62 FC | 	wrlong	result2, fp
1c304     04 CE 05 F1 | 	add	fp, #4
1c308     E7 AE 62 FC | 	wrlong	local05, fp
1c30c                 | ' 
1c30c                 | ' t2=pop()
1c30c                 | ' t1=pop()
1c30c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c30c     08 CE 85 F1 | 	sub	fp, #8
1c310     1C AE 0E F2 | 	cmp	local05, #28 wz
1c314     E7 AE 02 AB |  if_e	rdlong	local05, fp
1c318     E7 AE 62 AC |  if_e	wrlong	local05, fp
1c31c     08 CE 05 A1 |  if_e	add	fp, #8
1c320     E7 3A 68 AC |  if_e	wrlong	#29, fp
1c324     08 CE 85 A1 |  if_e	sub	fp, #8
1c328                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c328     1C AA 0E F2 | 	cmp	local03, #28 wz
1c32c     1D AA 06 A6 |  if_e	mov	local03, #29
1c330                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c330     08 CE 05 F1 | 	add	fp, #8
1c334     E7 AE 02 FB | 	rdlong	local05, fp
1c338     08 CE 85 F1 | 	sub	fp, #8
1c33c     1F AE 0E F2 | 	cmp	local05, #31 wz
1c340     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c344     08 CE 05 51 |  if_ne	add	fp, #8
1c348     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1c34c     08 CE 85 51 |  if_ne	sub	fp, #8
1c350     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1c354     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1c358     E7 0C 68 AC |  if_e	wrlong	#6, fp
1c35c     08 CE 05 A1 |  if_e	add	fp, #8
1c360     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c364     08 CE 85 A1 |  if_e	sub	fp, #8
1c368     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1c36c     53 AF 02 55 |  if_ne	and	local05, local01
1c370     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1c374     E7 92 02 F6 | 	mov	arg01, fp
1c378     84 13 BF FD | 	call	#_push
1c37c     E7 F0 03 F6 | 	mov	ptra, fp
1c380     F2 00 A0 FD | 	call	#popregs_
1c384                 | _do_and_ret
1c384     2D 00 64 FD | 	ret
1c388                 | 
1c388                 | ' 
1c388                 | ' '--------------------------------- DIV (integer divide)
1c388                 | ' 
1c388                 | ' sub do_div 
1c388                 | _do_div
1c388     04 CA 05 F6 | 	mov	COUNT_, #4
1c38c     E8 00 A0 FD | 	call	#pushregs_
1c390     18 F0 07 F1 | 	add	ptra, #24
1c394     D8 12 BF FD | 	call	#_pop
1c398     3D A7 02 F6 | 	mov	local01, result1
1c39c     3E 11 03 F6 | 	mov	muldivb_, result2
1c3a0     3F 0F 03 F6 | 	mov	muldiva_, result3
1c3a4     88 A9 02 F6 | 	mov	local02, muldivb_
1c3a8     87 AB 02 F6 | 	mov	local03, muldiva_
1c3ac     C0 12 BF FD | 	call	#_pop
1c3b0     E7 7A 62 FC | 	wrlong	result1, fp
1c3b4     04 CE 05 F1 | 	add	fp, #4
1c3b8     E7 7C 62 FC | 	wrlong	result2, fp
1c3bc     04 CE 05 F1 | 	add	fp, #4
1c3c0     E7 7E 62 FC | 	wrlong	result3, fp
1c3c4                 | ' 
1c3c4                 | ' t2=pop()
1c3c4                 | ' t1=pop()
1c3c4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c3c4     08 CE 85 F1 | 	sub	fp, #8
1c3c8     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c3cc     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c3d0     E7 14 68 AC |  if_e	wrlong	#10, fp
1c3d4     08 CE 05 A1 |  if_e	add	fp, #8
1c3d8     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c3dc     08 CE 85 A1 |  if_e	sub	fp, #8
1c3e0     14 01 90 AD |  if_e	jmp	#LR__2395
1c3e4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c3e4     08 CE 05 F1 | 	add	fp, #8
1c3e8     E7 10 03 FB | 	rdlong	muldivb_, fp
1c3ec     08 CE 85 F1 | 	sub	fp, #8
1c3f0     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1c3f4     1C 00 90 5D |  if_ne	jmp	#LR__2390
1c3f8     08 CE 05 F1 | 	add	fp, #8
1c3fc     E7 38 68 FC | 	wrlong	#28, fp
1c400     08 CE 85 F1 | 	sub	fp, #8
1c404     E7 92 02 FB | 	rdlong	arg01, fp
1c408     00 94 06 F6 | 	mov	arg02, #0
1c40c     84 B1 B0 FD | 	call	#__system___float_tointeger
1c410     E7 7A 62 FC | 	wrlong	result1, fp
1c414                 | LR__2390
1c414                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c414     1E AA 0E F2 | 	cmp	local03, #30 wz
1c418     14 00 90 5D |  if_ne	jmp	#LR__2391
1c41c     1C AA 06 F6 | 	mov	local03, #28
1c420     53 93 02 F6 | 	mov	arg01, local01
1c424     00 94 06 F6 | 	mov	arg02, #0
1c428     68 B1 B0 FD | 	call	#__system___float_tointeger
1c42c     3D A7 02 F6 | 	mov	local01, result1
1c430                 | LR__2391
1c430     08 CE 05 F1 | 	add	fp, #8
1c434     E7 AC 02 FB | 	rdlong	local04, fp
1c438     08 CE 85 F1 | 	sub	fp, #8
1c43c     1D AC 0E F2 | 	cmp	local04, #29 wz
1c440     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c444     E7 AC 02 AB |  if_e	rdlong	local04, fp
1c448     53 AD 12 AD |  if_e	qdiv	local04, local01
1c44c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c44c     18 AC 62 AD |  if_e	getqx	local04
1c450     E7 AC 62 AC |  if_e	wrlong	local04, fp
1c454     A0 00 90 AD |  if_e	jmp	#LR__2395
1c458                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c458     08 CE 05 F1 | 	add	fp, #8
1c45c     E7 AC 02 FB | 	rdlong	local04, fp
1c460     08 CE 85 F1 | 	sub	fp, #8
1c464     1D AC 0E F2 | 	cmp	local04, #29 wz
1c468     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c46c     20 00 90 5D |  if_ne	jmp	#LR__2392
1c470     E7 AC 02 FB | 	rdlong	local04, fp
1c474     53 AD 12 FD | 	qdiv	local04, local01
1c478     18 AC 62 FD | 	getqx	local04
1c47c     E7 AC 62 FC | 	wrlong	local04, fp
1c480     08 CE 05 F1 | 	add	fp, #8
1c484     E7 38 68 FC | 	wrlong	#28, fp
1c488     08 CE 85 F1 | 	sub	fp, #8
1c48c     68 00 90 FD | 	jmp	#LR__2395
1c490                 | LR__2392
1c490                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c490     08 CE 05 F1 | 	add	fp, #8
1c494     E7 AC 02 FB | 	rdlong	local04, fp
1c498     08 CE 85 F1 | 	sub	fp, #8
1c49c     1C AC 0E F2 | 	cmp	local04, #28 wz
1c4a0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c4a4     14 00 90 5D |  if_ne	jmp	#LR__2393
1c4a8     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c4ac     53 11 03 F6 | 	mov	muldivb_, local01
1c4b0     FA 00 A0 FD | 	call	#divide_
1c4b4     E7 10 63 FC | 	wrlong	muldivb_, fp
1c4b8     3C 00 90 FD | 	jmp	#LR__2395
1c4bc                 | LR__2393
1c4bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c4bc     08 CE 05 F1 | 	add	fp, #8
1c4c0     E7 AC 02 FB | 	rdlong	local04, fp
1c4c4     08 CE 85 F1 | 	sub	fp, #8
1c4c8     1C AC 0E F2 | 	cmp	local04, #28 wz
1c4cc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c4d0     14 00 90 5D |  if_ne	jmp	#LR__2394
1c4d4     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c4d8     53 11 03 F6 | 	mov	muldivb_, local01
1c4dc     FA 00 A0 FD | 	call	#divide_
1c4e0     E7 10 63 FC | 	wrlong	muldivb_, fp
1c4e4     10 00 90 FD | 	jmp	#LR__2395
1c4e8                 | LR__2394
1c4e8     E7 16 68 FC | 	wrlong	#11, fp
1c4ec     08 CE 05 F1 | 	add	fp, #8
1c4f0     E7 FE 69 FC | 	wrlong	#255, fp
1c4f4     08 CE 85 F1 | 	sub	fp, #8
1c4f8                 | LR__2395
1c4f8     E7 92 02 F6 | 	mov	arg01, fp
1c4fc     00 12 BF FD | 	call	#_push
1c500     E7 F0 03 F6 | 	mov	ptra, fp
1c504     F2 00 A0 FD | 	call	#popregs_
1c508                 | _do_div_ret
1c508     2D 00 64 FD | 	ret
1c50c                 | 
1c50c                 | ' 
1c50c                 | ' '--------------------------------- equal (=)
1c50c                 | ' 
1c50c                 | ' sub do_eq
1c50c                 | _do_eq
1c50c     07 CA 05 F6 | 	mov	COUNT_, #7
1c510     E8 00 A0 FD | 	call	#pushregs_
1c514     18 F0 07 F1 | 	add	ptra, #24
1c518     54 11 BF FD | 	call	#_pop
1c51c     3D A7 02 F6 | 	mov	local01, result1
1c520     3E AD 02 F6 | 	mov	local04, result2
1c524     3F AF 02 F6 | 	mov	local05, result3
1c528     56 A9 02 F6 | 	mov	local02, local04
1c52c     57 AB 02 F6 | 	mov	local03, local05
1c530     3C 11 BF FD | 	call	#_pop
1c534     3F AF 02 F6 | 	mov	local05, result3
1c538     E7 7A 62 FC | 	wrlong	result1, fp
1c53c     04 CE 05 F1 | 	add	fp, #4
1c540     E7 7C 62 FC | 	wrlong	result2, fp
1c544     04 CE 05 F1 | 	add	fp, #4
1c548     E7 AE 62 FC | 	wrlong	local05, fp
1c54c                 | ' 
1c54c                 | ' t2=pop()
1c54c                 | ' t1=pop()
1c54c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c54c     08 CE 85 F1 | 	sub	fp, #8
1c550     1F AE 0E F2 | 	cmp	local05, #31 wz
1c554     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c558     20 00 90 5D |  if_ne	jmp	#LR__2400
1c55c     00 B0 06 F6 | 	mov	local06, #0
1c560     E7 92 02 FB | 	rdlong	arg01, fp
1c564     53 95 02 F6 | 	mov	arg02, local01
1c568     B8 84 B0 FD | 	call	#__system___string_cmp
1c56c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c570     00 B0 26 A6 |  if_e	not	local06, #0
1c574     E7 B0 62 FC | 	wrlong	local06, fp
1c578     04 03 90 FD | 	jmp	#LR__2413
1c57c                 | LR__2400
1c57c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c57c     08 CE 05 F1 | 	add	fp, #8
1c580     E7 B0 02 FB | 	rdlong	local06, fp
1c584     08 CE 85 F1 | 	sub	fp, #8
1c588     1E B0 0E F2 | 	cmp	local06, #30 wz
1c58c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c590     24 00 90 5D |  if_ne	jmp	#LR__2401
1c594     00 B0 06 F6 | 	mov	local06, #0
1c598     E7 92 02 FB | 	rdlong	arg01, fp
1c59c     53 95 02 F6 | 	mov	arg02, local01
1c5a0     01 96 06 F6 | 	mov	arg03, #1
1c5a4     58 AF B0 FD | 	call	#__system___float_cmp
1c5a8     00 7A 0E F2 | 	cmp	result1, #0 wz
1c5ac     00 B0 26 A6 |  if_e	not	local06, #0
1c5b0     E7 B0 62 FC | 	wrlong	local06, fp
1c5b4     C8 02 90 FD | 	jmp	#LR__2413
1c5b8                 | LR__2401
1c5b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c5b8     08 CE 05 F1 | 	add	fp, #8
1c5bc     E7 B0 02 FB | 	rdlong	local06, fp
1c5c0     08 CE 85 F1 | 	sub	fp, #8
1c5c4     1E B0 0E F2 | 	cmp	local06, #30 wz
1c5c8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c5cc     3C 00 90 5D |  if_ne	jmp	#LR__2402
1c5d0     00 B0 06 F6 | 	mov	local06, #0
1c5d4     E7 AC 02 FB | 	rdlong	local04, fp
1c5d8     53 93 52 F6 | 	abs	arg01, local01 wc
1c5dc     1F B2 C6 C9 |  if_b	decod	local07, #31
1c5e0     00 B2 06 36 |  if_ae	mov	local07, #0
1c5e4     E0 A6 B0 FD | 	call	#__system___float_fromuns
1c5e8     59 7B 62 F5 | 	xor	result1, local07
1c5ec     3D 95 02 F6 | 	mov	arg02, result1
1c5f0     56 93 02 F6 | 	mov	arg01, local04
1c5f4     01 96 06 F6 | 	mov	arg03, #1
1c5f8     04 AF B0 FD | 	call	#__system___float_cmp
1c5fc     00 7A 0E F2 | 	cmp	result1, #0 wz
1c600     00 B0 26 A6 |  if_e	not	local06, #0
1c604     E7 B0 62 FC | 	wrlong	local06, fp
1c608     74 02 90 FD | 	jmp	#LR__2413
1c60c                 | LR__2402
1c60c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c60c     08 CE 05 F1 | 	add	fp, #8
1c610     E7 B0 02 FB | 	rdlong	local06, fp
1c614     08 CE 85 F1 | 	sub	fp, #8
1c618     1E B0 0E F2 | 	cmp	local06, #30 wz
1c61c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c620     30 00 90 5D |  if_ne	jmp	#LR__2403
1c624     00 B0 06 F6 | 	mov	local06, #0
1c628     E7 AC 02 FB | 	rdlong	local04, fp
1c62c     53 93 02 F6 | 	mov	arg01, local01
1c630     94 A6 B0 FD | 	call	#__system___float_fromuns
1c634     3D 95 02 F6 | 	mov	arg02, result1
1c638     56 93 02 F6 | 	mov	arg01, local04
1c63c     01 96 06 F6 | 	mov	arg03, #1
1c640     BC AE B0 FD | 	call	#__system___float_cmp
1c644     00 7A 0E F2 | 	cmp	result1, #0 wz
1c648     00 B0 26 A6 |  if_e	not	local06, #0
1c64c     E7 B0 62 FC | 	wrlong	local06, fp
1c650     2C 02 90 FD | 	jmp	#LR__2413
1c654                 | LR__2403
1c654                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c654     08 CE 05 F1 | 	add	fp, #8
1c658     E7 B0 02 FB | 	rdlong	local06, fp
1c65c     08 CE 85 F1 | 	sub	fp, #8
1c660     1C B0 0E F2 | 	cmp	local06, #28 wz
1c664     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c668     3C 00 90 5D |  if_ne	jmp	#LR__2404
1c66c     00 B0 06 F6 | 	mov	local06, #0
1c670     E7 92 02 FB | 	rdlong	arg01, fp
1c674     49 93 52 F6 | 	abs	arg01, arg01 wc
1c678     1F B2 C6 C9 |  if_b	decod	local07, #31
1c67c     00 B2 06 36 |  if_ae	mov	local07, #0
1c680     44 A6 B0 FD | 	call	#__system___float_fromuns
1c684     59 7B 62 F5 | 	xor	result1, local07
1c688     3D 93 02 F6 | 	mov	arg01, result1
1c68c     53 95 02 F6 | 	mov	arg02, local01
1c690     01 96 06 F6 | 	mov	arg03, #1
1c694     68 AE B0 FD | 	call	#__system___float_cmp
1c698     00 7A 0E F2 | 	cmp	result1, #0 wz
1c69c     00 B0 26 A6 |  if_e	not	local06, #0
1c6a0     E7 B0 62 FC | 	wrlong	local06, fp
1c6a4     D8 01 90 FD | 	jmp	#LR__2413
1c6a8                 | LR__2404
1c6a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1c6a8     08 CE 05 F1 | 	add	fp, #8
1c6ac     E7 B0 02 FB | 	rdlong	local06, fp
1c6b0     08 CE 85 F1 | 	sub	fp, #8
1c6b4     1C B0 0E F2 | 	cmp	local06, #28 wz
1c6b8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c6bc     18 00 90 5D |  if_ne	jmp	#LR__2405
1c6c0     00 B0 06 F6 | 	mov	local06, #0
1c6c4     E7 AC 02 FB | 	rdlong	local04, fp
1c6c8     53 AD 0A F2 | 	cmp	local04, local01 wz
1c6cc     01 B0 66 A6 |  if_e	neg	local06, #1
1c6d0     E7 B0 62 FC | 	wrlong	local06, fp
1c6d4     A8 01 90 FD | 	jmp	#LR__2413
1c6d8                 | LR__2405
1c6d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1c6d8     08 CE 05 F1 | 	add	fp, #8
1c6dc     E7 B0 02 FB | 	rdlong	local06, fp
1c6e0     08 CE 85 F1 | 	sub	fp, #8
1c6e4     1C B0 0E F2 | 	cmp	local06, #28 wz
1c6e8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c6ec     18 00 90 5D |  if_ne	jmp	#LR__2406
1c6f0     00 B0 06 F6 | 	mov	local06, #0
1c6f4     E7 AC 02 FB | 	rdlong	local04, fp
1c6f8     53 AD 0A F2 | 	cmp	local04, local01 wz
1c6fc     01 B0 66 A6 |  if_e	neg	local06, #1
1c700     E7 B0 62 FC | 	wrlong	local06, fp
1c704     78 01 90 FD | 	jmp	#LR__2413
1c708                 | LR__2406
1c708                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1c708     08 CE 05 F1 | 	add	fp, #8
1c70c     E7 B0 02 FB | 	rdlong	local06, fp
1c710     08 CE 85 F1 | 	sub	fp, #8
1c714     1D B0 0E F2 | 	cmp	local06, #29 wz
1c718     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c71c     2C 00 90 5D |  if_ne	jmp	#LR__2407
1c720     00 B0 06 F6 | 	mov	local06, #0
1c724     E7 92 02 FB | 	rdlong	arg01, fp
1c728     9C A5 B0 FD | 	call	#__system___float_fromuns
1c72c     3D 93 02 F6 | 	mov	arg01, result1
1c730     53 95 02 F6 | 	mov	arg02, local01
1c734     01 96 06 F6 | 	mov	arg03, #1
1c738     C4 AD B0 FD | 	call	#__system___float_cmp
1c73c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c740     00 B0 26 A6 |  if_e	not	local06, #0
1c744     E7 B0 62 FC | 	wrlong	local06, fp
1c748     34 01 90 FD | 	jmp	#LR__2413
1c74c                 | LR__2407
1c74c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1c74c     08 CE 05 F1 | 	add	fp, #8
1c750     E7 B0 02 FB | 	rdlong	local06, fp
1c754     08 CE 85 F1 | 	sub	fp, #8
1c758     1D B0 0E F2 | 	cmp	local06, #29 wz
1c75c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c760     18 00 90 5D |  if_ne	jmp	#LR__2408
1c764     00 B0 06 F6 | 	mov	local06, #0
1c768     E7 AC 02 FB | 	rdlong	local04, fp
1c76c     53 AD 0A F2 | 	cmp	local04, local01 wz
1c770     01 B0 66 A6 |  if_e	neg	local06, #1
1c774     E7 B0 62 FC | 	wrlong	local06, fp
1c778     04 01 90 FD | 	jmp	#LR__2413
1c77c                 | LR__2408
1c77c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1c77c     08 CE 05 F1 | 	add	fp, #8
1c780     E7 B0 02 FB | 	rdlong	local06, fp
1c784     08 CE 85 F1 | 	sub	fp, #8
1c788     1D B0 0E F2 | 	cmp	local06, #29 wz
1c78c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c790     18 00 90 5D |  if_ne	jmp	#LR__2409
1c794     00 B0 06 F6 | 	mov	local06, #0
1c798     E7 AC 02 FB | 	rdlong	local04, fp
1c79c     53 AD 0A F2 | 	cmp	local04, local01 wz
1c7a0     01 B0 66 A6 |  if_e	neg	local06, #1
1c7a4     E7 B0 62 FC | 	wrlong	local06, fp
1c7a8     D4 00 90 FD | 	jmp	#LR__2413
1c7ac                 | LR__2409
1c7ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1c7ac     08 CE 05 F1 | 	add	fp, #8
1c7b0     E7 B0 02 FB | 	rdlong	local06, fp
1c7b4     08 CE 85 F1 | 	sub	fp, #8
1c7b8     2B B0 0E F2 | 	cmp	local06, #43 wz
1c7bc     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c7c0     28 00 90 5D |  if_ne	jmp	#LR__2410
1c7c4     00 B0 06 F6 | 	mov	local06, #0
1c7c8     E7 92 02 FB | 	rdlong	arg01, fp
1c7cc     10 10 BF FD | 	call	#_convertstring
1c7d0     3D 93 02 F6 | 	mov	arg01, result1
1c7d4     53 95 02 F6 | 	mov	arg02, local01
1c7d8     48 82 B0 FD | 	call	#__system___string_cmp
1c7dc     00 7A 0E F2 | 	cmp	result1, #0 wz
1c7e0     00 B0 26 A6 |  if_e	not	local06, #0
1c7e4     E7 B0 62 FC | 	wrlong	local06, fp
1c7e8     94 00 90 FD | 	jmp	#LR__2413
1c7ec                 | LR__2410
1c7ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1c7ec     08 CE 05 F1 | 	add	fp, #8
1c7f0     E7 B0 02 FB | 	rdlong	local06, fp
1c7f4     08 CE 85 F1 | 	sub	fp, #8
1c7f8     1F B0 0E F2 | 	cmp	local06, #31 wz
1c7fc     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c800     2C 00 90 5D |  if_ne	jmp	#LR__2411
1c804     00 B0 06 F6 | 	mov	local06, #0
1c808     E7 AC 02 FB | 	rdlong	local04, fp
1c80c     53 93 02 F6 | 	mov	arg01, local01
1c810     CC 0F BF FD | 	call	#_convertstring
1c814     3D 95 02 F6 | 	mov	arg02, result1
1c818     56 93 02 F6 | 	mov	arg01, local04
1c81c     04 82 B0 FD | 	call	#__system___string_cmp
1c820     00 7A 0E F2 | 	cmp	result1, #0 wz
1c824     00 B0 26 A6 |  if_e	not	local06, #0
1c828     E7 B0 62 FC | 	wrlong	local06, fp
1c82c     50 00 90 FD | 	jmp	#LR__2413
1c830                 | LR__2411
1c830                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1c830     08 CE 05 F1 | 	add	fp, #8
1c834     E7 B0 02 FB | 	rdlong	local06, fp
1c838     08 CE 85 F1 | 	sub	fp, #8
1c83c     2B B0 0E F2 | 	cmp	local06, #43 wz
1c840     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c844     34 00 90 5D |  if_ne	jmp	#LR__2412
1c848     00 B0 06 F6 | 	mov	local06, #0
1c84c     E7 92 02 FB | 	rdlong	arg01, fp
1c850     8C 0F BF FD | 	call	#_convertstring
1c854     3D AD 02 F6 | 	mov	local04, result1
1c858     53 93 02 F6 | 	mov	arg01, local01
1c85c     80 0F BF FD | 	call	#_convertstring
1c860     3D 95 02 F6 | 	mov	arg02, result1
1c864     56 93 02 F6 | 	mov	arg01, local04
1c868     B8 81 B0 FD | 	call	#__system___string_cmp
1c86c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c870     00 B0 26 A6 |  if_e	not	local06, #0
1c874     E7 B0 62 FC | 	wrlong	local06, fp
1c878     04 00 90 FD | 	jmp	#LR__2413
1c87c                 | LR__2412
1c87c     E7 00 68 FC | 	wrlong	#0, fp
1c880                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c880                 | LR__2413
1c880     08 CE 05 F1 | 	add	fp, #8
1c884     E7 38 68 FC | 	wrlong	#28, fp
1c888     08 CE 85 F1 | 	sub	fp, #8
1c88c     E7 92 02 F6 | 	mov	arg01, fp
1c890     6C 0E BF FD | 	call	#_push
1c894     E7 F0 03 F6 | 	mov	ptra, fp
1c898     F2 00 A0 FD | 	call	#popregs_
1c89c                 | _do_eq_ret
1c89c     2D 00 64 FD | 	ret
1c8a0                 | 
1c8a0                 | ' 
1c8a0                 | ' '--------------------------------- fdiv (/) - float divide
1c8a0                 | ' 
1c8a0                 | ' sub do_fdiv 
1c8a0                 | _do_fdiv
1c8a0     04 CA 05 F6 | 	mov	COUNT_, #4
1c8a4     E8 00 A0 FD | 	call	#pushregs_
1c8a8     18 F0 07 F1 | 	add	ptra, #24
1c8ac     C0 0D BF FD | 	call	#_pop
1c8b0     3D A7 02 F6 | 	mov	local01, result1
1c8b4     3E 95 02 F6 | 	mov	arg02, result2
1c8b8     3F 93 02 F6 | 	mov	arg01, result3
1c8bc     4A A9 02 F6 | 	mov	local02, arg02
1c8c0     49 AB 02 F6 | 	mov	local03, arg01
1c8c4     A8 0D BF FD | 	call	#_pop
1c8c8     E7 7A 62 FC | 	wrlong	result1, fp
1c8cc     04 CE 05 F1 | 	add	fp, #4
1c8d0     E7 7C 62 FC | 	wrlong	result2, fp
1c8d4     04 CE 05 F1 | 	add	fp, #4
1c8d8     E7 7E 62 FC | 	wrlong	result3, fp
1c8dc                 | ' 
1c8dc                 | ' t2=pop()
1c8dc                 | ' t1=pop()
1c8dc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1c8dc     08 CE 85 F1 | 	sub	fp, #8
1c8e0     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c8e4     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c8e8     E7 14 68 AC |  if_e	wrlong	#10, fp
1c8ec     08 CE 05 A1 |  if_e	add	fp, #8
1c8f0     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c8f4     08 CE 85 A1 |  if_e	sub	fp, #8
1c8f8     E0 00 90 AD |  if_e	jmp	#LR__2425
1c8fc                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c8fc     08 CE 05 F1 | 	add	fp, #8
1c900     E7 94 02 FB | 	rdlong	arg02, fp
1c904     08 CE 85 F1 | 	sub	fp, #8
1c908     1C 94 0E F2 | 	cmp	arg02, #28 wz
1c90c     28 00 90 5D |  if_ne	jmp	#LR__2420
1c910     08 CE 05 F1 | 	add	fp, #8
1c914     E7 3C 68 FC | 	wrlong	#30, fp
1c918     08 CE 85 F1 | 	sub	fp, #8
1c91c     E7 92 02 FB | 	rdlong	arg01, fp
1c920     49 93 52 F6 | 	abs	arg01, arg01 wc
1c924     1F AC C6 C9 |  if_b	decod	local04, #31
1c928     00 AC 06 36 |  if_ae	mov	local04, #0
1c92c     98 A3 B0 FD | 	call	#__system___float_fromuns
1c930     56 7B 62 F5 | 	xor	result1, local04
1c934     E7 7A 62 FC | 	wrlong	result1, fp
1c938                 | LR__2420
1c938                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1c938     08 CE 05 F1 | 	add	fp, #8
1c93c     E7 94 02 FB | 	rdlong	arg02, fp
1c940     08 CE 85 F1 | 	sub	fp, #8
1c944     1D 94 0E F2 | 	cmp	arg02, #29 wz
1c948     18 00 90 5D |  if_ne	jmp	#LR__2421
1c94c     08 CE 05 F1 | 	add	fp, #8
1c950     E7 3C 68 FC | 	wrlong	#30, fp
1c954     08 CE 85 F1 | 	sub	fp, #8
1c958     E7 92 02 FB | 	rdlong	arg01, fp
1c95c     68 A3 B0 FD | 	call	#__system___float_fromuns
1c960     E7 7A 62 FC | 	wrlong	result1, fp
1c964                 | LR__2421
1c964                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c964     1C AA 0E F2 | 	cmp	local03, #28 wz
1c968     1C 00 90 5D |  if_ne	jmp	#LR__2422
1c96c     1E AA 06 F6 | 	mov	local03, #30
1c970     53 93 52 F6 | 	abs	arg01, local01 wc
1c974     1F AC C6 C9 |  if_b	decod	local04, #31
1c978     00 AC 06 36 |  if_ae	mov	local04, #0
1c97c     48 A3 B0 FD | 	call	#__system___float_fromuns
1c980     56 7B 62 F5 | 	xor	result1, local04
1c984     3D A7 02 F6 | 	mov	local01, result1
1c988                 | LR__2422
1c988                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c988     1D AA 0E F2 | 	cmp	local03, #29 wz
1c98c     10 00 90 5D |  if_ne	jmp	#LR__2423
1c990     1E AA 06 F6 | 	mov	local03, #30
1c994     53 93 02 F6 | 	mov	arg01, local01
1c998     2C A3 B0 FD | 	call	#__system___float_fromuns
1c99c     3D A7 02 F6 | 	mov	local01, result1
1c9a0                 | LR__2423
1c9a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1c9a0     08 CE 05 F1 | 	add	fp, #8
1c9a4     E7 94 02 FB | 	rdlong	arg02, fp
1c9a8     08 CE 85 F1 | 	sub	fp, #8
1c9ac     1E 94 0E F2 | 	cmp	arg02, #30 wz
1c9b0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c9b4     14 00 90 5D |  if_ne	jmp	#LR__2424
1c9b8     E7 92 02 FB | 	rdlong	arg01, fp
1c9bc     53 95 02 F6 | 	mov	arg02, local01
1c9c0     0C A9 B0 FD | 	call	#__system___float_div
1c9c4     E7 7A 62 FC | 	wrlong	result1, fp
1c9c8     10 00 90 FD | 	jmp	#LR__2425
1c9cc                 | LR__2424
1c9cc     E7 16 68 FC | 	wrlong	#11, fp
1c9d0     08 CE 05 F1 | 	add	fp, #8
1c9d4     E7 FE 69 FC | 	wrlong	#255, fp
1c9d8     08 CE 85 F1 | 	sub	fp, #8
1c9dc                 | LR__2425
1c9dc     E7 92 02 F6 | 	mov	arg01, fp
1c9e0     1C 0D BF FD | 	call	#_push
1c9e4     E7 F0 03 F6 | 	mov	ptra, fp
1c9e8     F2 00 A0 FD | 	call	#popregs_
1c9ec                 | _do_fdiv_ret
1c9ec     2D 00 64 FD | 	ret
1c9f0                 | 
1c9f0                 | ' 
1c9f0                 | ' '--------------------------------- greater or equal (>=)
1c9f0                 | ' 
1c9f0                 | ' sub do_ge
1c9f0                 | _do_ge
1c9f0     07 CA 05 F6 | 	mov	COUNT_, #7
1c9f4     E8 00 A0 FD | 	call	#pushregs_
1c9f8     18 F0 07 F1 | 	add	ptra, #24
1c9fc     70 0C BF FD | 	call	#_pop
1ca00     3D A7 02 F6 | 	mov	local01, result1
1ca04     3E AD 02 F6 | 	mov	local04, result2
1ca08     3F AF 02 F6 | 	mov	local05, result3
1ca0c     56 A9 02 F6 | 	mov	local02, local04
1ca10     57 AB 02 F6 | 	mov	local03, local05
1ca14     58 0C BF FD | 	call	#_pop
1ca18     3F AF 02 F6 | 	mov	local05, result3
1ca1c     E7 7A 62 FC | 	wrlong	result1, fp
1ca20     04 CE 05 F1 | 	add	fp, #4
1ca24     E7 7C 62 FC | 	wrlong	result2, fp
1ca28     04 CE 05 F1 | 	add	fp, #4
1ca2c     E7 AE 62 FC | 	wrlong	local05, fp
1ca30                 | ' 
1ca30                 | ' t2=pop()
1ca30                 | ' t1=pop()
1ca30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1ca30     08 CE 85 F1 | 	sub	fp, #8
1ca34     1F AE 0E F2 | 	cmp	local05, #31 wz
1ca38     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1ca3c     20 00 90 5D |  if_ne	jmp	#LR__2430
1ca40     00 B0 06 F6 | 	mov	local06, #0
1ca44     E7 92 02 FB | 	rdlong	arg01, fp
1ca48     53 95 02 F6 | 	mov	arg02, local01
1ca4c     D4 7F B0 FD | 	call	#__system___string_cmp
1ca50     00 7A 56 F2 | 	cmps	result1, #0 wc
1ca54     00 B0 26 36 |  if_ae	not	local06, #0
1ca58     E7 B0 62 FC | 	wrlong	local06, fp
1ca5c     04 03 90 FD | 	jmp	#LR__2443
1ca60                 | LR__2430
1ca60                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1ca60     08 CE 05 F1 | 	add	fp, #8
1ca64     E7 B0 02 FB | 	rdlong	local06, fp
1ca68     08 CE 85 F1 | 	sub	fp, #8
1ca6c     1E B0 0E F2 | 	cmp	local06, #30 wz
1ca70     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ca74     24 00 90 5D |  if_ne	jmp	#LR__2431
1ca78     00 B0 06 F6 | 	mov	local06, #0
1ca7c     E7 92 02 FB | 	rdlong	arg01, fp
1ca80     53 95 02 F6 | 	mov	arg02, local01
1ca84     01 96 66 F6 | 	neg	arg03, #1
1ca88     74 AA B0 FD | 	call	#__system___float_cmp
1ca8c     00 7A 56 F2 | 	cmps	result1, #0 wc
1ca90     00 B0 26 36 |  if_ae	not	local06, #0
1ca94     E7 B0 62 FC | 	wrlong	local06, fp
1ca98     C8 02 90 FD | 	jmp	#LR__2443
1ca9c                 | LR__2431
1ca9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ca9c     08 CE 05 F1 | 	add	fp, #8
1caa0     E7 B0 02 FB | 	rdlong	local06, fp
1caa4     08 CE 85 F1 | 	sub	fp, #8
1caa8     1E B0 0E F2 | 	cmp	local06, #30 wz
1caac     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cab0     3C 00 90 5D |  if_ne	jmp	#LR__2432
1cab4     00 B0 06 F6 | 	mov	local06, #0
1cab8     E7 AC 02 FB | 	rdlong	local04, fp
1cabc     53 93 52 F6 | 	abs	arg01, local01 wc
1cac0     1F B2 C6 C9 |  if_b	decod	local07, #31
1cac4     00 B2 06 36 |  if_ae	mov	local07, #0
1cac8     FC A1 B0 FD | 	call	#__system___float_fromuns
1cacc     59 7B 62 F5 | 	xor	result1, local07
1cad0     3D 95 02 F6 | 	mov	arg02, result1
1cad4     56 93 02 F6 | 	mov	arg01, local04
1cad8     01 96 66 F6 | 	neg	arg03, #1
1cadc     20 AA B0 FD | 	call	#__system___float_cmp
1cae0     00 7A 56 F2 | 	cmps	result1, #0 wc
1cae4     00 B0 26 36 |  if_ae	not	local06, #0
1cae8     E7 B0 62 FC | 	wrlong	local06, fp
1caec     74 02 90 FD | 	jmp	#LR__2443
1caf0                 | LR__2432
1caf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1caf0     08 CE 05 F1 | 	add	fp, #8
1caf4     E7 B0 02 FB | 	rdlong	local06, fp
1caf8     08 CE 85 F1 | 	sub	fp, #8
1cafc     1E B0 0E F2 | 	cmp	local06, #30 wz
1cb00     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cb04     30 00 90 5D |  if_ne	jmp	#LR__2433
1cb08     00 B0 06 F6 | 	mov	local06, #0
1cb0c     E7 AC 02 FB | 	rdlong	local04, fp
1cb10     53 93 02 F6 | 	mov	arg01, local01
1cb14     B0 A1 B0 FD | 	call	#__system___float_fromuns
1cb18     3D 95 02 F6 | 	mov	arg02, result1
1cb1c     56 93 02 F6 | 	mov	arg01, local04
1cb20     01 96 66 F6 | 	neg	arg03, #1
1cb24     D8 A9 B0 FD | 	call	#__system___float_cmp
1cb28     00 7A 56 F2 | 	cmps	result1, #0 wc
1cb2c     00 B0 26 36 |  if_ae	not	local06, #0
1cb30     E7 B0 62 FC | 	wrlong	local06, fp
1cb34     2C 02 90 FD | 	jmp	#LR__2443
1cb38                 | LR__2433
1cb38                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1cb38     08 CE 05 F1 | 	add	fp, #8
1cb3c     E7 B0 02 FB | 	rdlong	local06, fp
1cb40     08 CE 85 F1 | 	sub	fp, #8
1cb44     1C B0 0E F2 | 	cmp	local06, #28 wz
1cb48     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cb4c     3C 00 90 5D |  if_ne	jmp	#LR__2434
1cb50     00 B0 06 F6 | 	mov	local06, #0
1cb54     E7 92 02 FB | 	rdlong	arg01, fp
1cb58     49 93 52 F6 | 	abs	arg01, arg01 wc
1cb5c     1F B2 C6 C9 |  if_b	decod	local07, #31
1cb60     00 B2 06 36 |  if_ae	mov	local07, #0
1cb64     60 A1 B0 FD | 	call	#__system___float_fromuns
1cb68     59 7B 62 F5 | 	xor	result1, local07
1cb6c     3D 93 02 F6 | 	mov	arg01, result1
1cb70     53 95 02 F6 | 	mov	arg02, local01
1cb74     01 96 66 F6 | 	neg	arg03, #1
1cb78     84 A9 B0 FD | 	call	#__system___float_cmp
1cb7c     00 7A 56 F2 | 	cmps	result1, #0 wc
1cb80     00 B0 26 36 |  if_ae	not	local06, #0
1cb84     E7 B0 62 FC | 	wrlong	local06, fp
1cb88     D8 01 90 FD | 	jmp	#LR__2443
1cb8c                 | LR__2434
1cb8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1cb8c     08 CE 05 F1 | 	add	fp, #8
1cb90     E7 B0 02 FB | 	rdlong	local06, fp
1cb94     08 CE 85 F1 | 	sub	fp, #8
1cb98     1C B0 0E F2 | 	cmp	local06, #28 wz
1cb9c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cba0     18 00 90 5D |  if_ne	jmp	#LR__2435
1cba4     00 B0 06 F6 | 	mov	local06, #0
1cba8     E7 AC 02 FB | 	rdlong	local04, fp
1cbac     53 AD 52 F2 | 	cmps	local04, local01 wc
1cbb0     01 B0 66 36 |  if_ae	neg	local06, #1
1cbb4     E7 B0 62 FC | 	wrlong	local06, fp
1cbb8     A8 01 90 FD | 	jmp	#LR__2443
1cbbc                 | LR__2435
1cbbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1cbbc     08 CE 05 F1 | 	add	fp, #8
1cbc0     E7 B0 02 FB | 	rdlong	local06, fp
1cbc4     08 CE 85 F1 | 	sub	fp, #8
1cbc8     1C B0 0E F2 | 	cmp	local06, #28 wz
1cbcc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cbd0     18 00 90 5D |  if_ne	jmp	#LR__2436
1cbd4     00 B0 06 F6 | 	mov	local06, #0
1cbd8     E7 AC 02 FB | 	rdlong	local04, fp
1cbdc     53 AD 52 F2 | 	cmps	local04, local01 wc
1cbe0     01 B0 66 36 |  if_ae	neg	local06, #1
1cbe4     E7 B0 62 FC | 	wrlong	local06, fp
1cbe8     78 01 90 FD | 	jmp	#LR__2443
1cbec                 | LR__2436
1cbec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cbec     08 CE 05 F1 | 	add	fp, #8
1cbf0     E7 B0 02 FB | 	rdlong	local06, fp
1cbf4     08 CE 85 F1 | 	sub	fp, #8
1cbf8     1D B0 0E F2 | 	cmp	local06, #29 wz
1cbfc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cc00     2C 00 90 5D |  if_ne	jmp	#LR__2437
1cc04     00 B0 06 F6 | 	mov	local06, #0
1cc08     E7 92 02 FB | 	rdlong	arg01, fp
1cc0c     B8 A0 B0 FD | 	call	#__system___float_fromuns
1cc10     3D 93 02 F6 | 	mov	arg01, result1
1cc14     53 95 02 F6 | 	mov	arg02, local01
1cc18     01 96 66 F6 | 	neg	arg03, #1
1cc1c     E0 A8 B0 FD | 	call	#__system___float_cmp
1cc20     00 7A 56 F2 | 	cmps	result1, #0 wc
1cc24     00 B0 26 36 |  if_ae	not	local06, #0
1cc28     E7 B0 62 FC | 	wrlong	local06, fp
1cc2c     34 01 90 FD | 	jmp	#LR__2443
1cc30                 | LR__2437
1cc30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cc30     08 CE 05 F1 | 	add	fp, #8
1cc34     E7 B0 02 FB | 	rdlong	local06, fp
1cc38     08 CE 85 F1 | 	sub	fp, #8
1cc3c     1D B0 0E F2 | 	cmp	local06, #29 wz
1cc40     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cc44     18 00 90 5D |  if_ne	jmp	#LR__2438
1cc48     00 B0 06 F6 | 	mov	local06, #0
1cc4c     E7 AC 02 FB | 	rdlong	local04, fp
1cc50     53 AD 52 F2 | 	cmps	local04, local01 wc
1cc54     01 B0 66 36 |  if_ae	neg	local06, #1
1cc58     E7 B0 62 FC | 	wrlong	local06, fp
1cc5c     04 01 90 FD | 	jmp	#LR__2443
1cc60                 | LR__2438
1cc60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1cc60     08 CE 05 F1 | 	add	fp, #8
1cc64     E7 B0 02 FB | 	rdlong	local06, fp
1cc68     08 CE 85 F1 | 	sub	fp, #8
1cc6c     1D B0 0E F2 | 	cmp	local06, #29 wz
1cc70     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cc74     18 00 90 5D |  if_ne	jmp	#LR__2439
1cc78     00 B0 06 F6 | 	mov	local06, #0
1cc7c     E7 AC 02 FB | 	rdlong	local04, fp
1cc80     53 AD 12 F2 | 	cmp	local04, local01 wc
1cc84     01 B0 66 36 |  if_ae	neg	local06, #1
1cc88     E7 B0 62 FC | 	wrlong	local06, fp
1cc8c     D4 00 90 FD | 	jmp	#LR__2443
1cc90                 | LR__2439
1cc90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1cc90     08 CE 05 F1 | 	add	fp, #8
1cc94     E7 B0 02 FB | 	rdlong	local06, fp
1cc98     08 CE 85 F1 | 	sub	fp, #8
1cc9c     2B B0 0E F2 | 	cmp	local06, #43 wz
1cca0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cca4     28 00 90 5D |  if_ne	jmp	#LR__2440
1cca8     00 B0 06 F6 | 	mov	local06, #0
1ccac     E7 92 02 FB | 	rdlong	arg01, fp
1ccb0     2C 0B BF FD | 	call	#_convertstring
1ccb4     3D 93 02 F6 | 	mov	arg01, result1
1ccb8     53 95 02 F6 | 	mov	arg02, local01
1ccbc     64 7D B0 FD | 	call	#__system___string_cmp
1ccc0     00 7A 56 F2 | 	cmps	result1, #0 wc
1ccc4     00 B0 26 36 |  if_ae	not	local06, #0
1ccc8     E7 B0 62 FC | 	wrlong	local06, fp
1cccc     94 00 90 FD | 	jmp	#LR__2443
1ccd0                 | LR__2440
1ccd0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1ccd0     08 CE 05 F1 | 	add	fp, #8
1ccd4     E7 B0 02 FB | 	rdlong	local06, fp
1ccd8     08 CE 85 F1 | 	sub	fp, #8
1ccdc     1F B0 0E F2 | 	cmp	local06, #31 wz
1cce0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cce4     2C 00 90 5D |  if_ne	jmp	#LR__2441
1cce8     00 B0 06 F6 | 	mov	local06, #0
1ccec     E7 AC 02 FB | 	rdlong	local04, fp
1ccf0     53 93 02 F6 | 	mov	arg01, local01
1ccf4     E8 0A BF FD | 	call	#_convertstring
1ccf8     3D 95 02 F6 | 	mov	arg02, result1
1ccfc     56 93 02 F6 | 	mov	arg01, local04
1cd00     20 7D B0 FD | 	call	#__system___string_cmp
1cd04     00 7A 56 F2 | 	cmps	result1, #0 wc
1cd08     00 B0 26 36 |  if_ae	not	local06, #0
1cd0c     E7 B0 62 FC | 	wrlong	local06, fp
1cd10     50 00 90 FD | 	jmp	#LR__2443
1cd14                 | LR__2441
1cd14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1cd14     08 CE 05 F1 | 	add	fp, #8
1cd18     E7 B0 02 FB | 	rdlong	local06, fp
1cd1c     08 CE 85 F1 | 	sub	fp, #8
1cd20     2B B0 0E F2 | 	cmp	local06, #43 wz
1cd24     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cd28     34 00 90 5D |  if_ne	jmp	#LR__2442
1cd2c     00 B0 06 F6 | 	mov	local06, #0
1cd30     E7 92 02 FB | 	rdlong	arg01, fp
1cd34     A8 0A BF FD | 	call	#_convertstring
1cd38     3D AD 02 F6 | 	mov	local04, result1
1cd3c     53 93 02 F6 | 	mov	arg01, local01
1cd40     9C 0A BF FD | 	call	#_convertstring
1cd44     3D 95 02 F6 | 	mov	arg02, result1
1cd48     56 93 02 F6 | 	mov	arg01, local04
1cd4c     D4 7C B0 FD | 	call	#__system___string_cmp
1cd50     00 7A 56 F2 | 	cmps	result1, #0 wc
1cd54     00 B0 26 36 |  if_ae	not	local06, #0
1cd58     E7 B0 62 FC | 	wrlong	local06, fp
1cd5c     04 00 90 FD | 	jmp	#LR__2443
1cd60                 | LR__2442
1cd60     E7 00 68 FC | 	wrlong	#0, fp
1cd64                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd64                 | LR__2443
1cd64     08 CE 05 F1 | 	add	fp, #8
1cd68     E7 38 68 FC | 	wrlong	#28, fp
1cd6c     08 CE 85 F1 | 	sub	fp, #8
1cd70                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd70     E7 B0 0A FB | 	rdlong	local06, fp wz
1cd74     E7 02 68 5C |  if_ne	wrlong	#1, fp
1cd78     E7 92 02 F6 | 	mov	arg01, fp
1cd7c     80 09 BF FD | 	call	#_push
1cd80     E7 F0 03 F6 | 	mov	ptra, fp
1cd84     F2 00 A0 FD | 	call	#popregs_
1cd88                 | _do_ge_ret
1cd88     2D 00 64 FD | 	ret
1cd8c                 | 
1cd8c                 | ' 
1cd8c                 | ' '--------------------------------- greater than (>)
1cd8c                 | ' 
1cd8c                 | ' sub do_gt
1cd8c                 | _do_gt
1cd8c     07 CA 05 F6 | 	mov	COUNT_, #7
1cd90     E8 00 A0 FD | 	call	#pushregs_
1cd94     18 F0 07 F1 | 	add	ptra, #24
1cd98     D4 08 BF FD | 	call	#_pop
1cd9c     3D A7 02 F6 | 	mov	local01, result1
1cda0     3E AD 02 F6 | 	mov	local04, result2
1cda4     3F AF 02 F6 | 	mov	local05, result3
1cda8     56 A9 02 F6 | 	mov	local02, local04
1cdac     57 AB 02 F6 | 	mov	local03, local05
1cdb0     BC 08 BF FD | 	call	#_pop
1cdb4     3F AF 02 F6 | 	mov	local05, result3
1cdb8     E7 7A 62 FC | 	wrlong	result1, fp
1cdbc     04 CE 05 F1 | 	add	fp, #4
1cdc0     E7 7C 62 FC | 	wrlong	result2, fp
1cdc4     04 CE 05 F1 | 	add	fp, #4
1cdc8     E7 AE 62 FC | 	wrlong	local05, fp
1cdcc                 | ' 
1cdcc                 | ' t2=pop()
1cdcc                 | ' t1=pop()
1cdcc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1cdcc     08 CE 85 F1 | 	sub	fp, #8
1cdd0     1F AE 0E F2 | 	cmp	local05, #31 wz
1cdd4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cdd8     20 00 90 5D |  if_ne	jmp	#LR__2450
1cddc     00 B0 06 F6 | 	mov	local06, #0
1cde0     E7 92 02 FB | 	rdlong	arg01, fp
1cde4     53 95 02 F6 | 	mov	arg02, local01
1cde8     38 7C B0 FD | 	call	#__system___string_cmp
1cdec     01 7A 56 F2 | 	cmps	result1, #1 wc
1cdf0     00 B0 26 36 |  if_ae	not	local06, #0
1cdf4     E7 B0 62 FC | 	wrlong	local06, fp
1cdf8     04 03 90 FD | 	jmp	#LR__2463
1cdfc                 | LR__2450
1cdfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1cdfc     08 CE 05 F1 | 	add	fp, #8
1ce00     E7 B0 02 FB | 	rdlong	local06, fp
1ce04     08 CE 85 F1 | 	sub	fp, #8
1ce08     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce0c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ce10     24 00 90 5D |  if_ne	jmp	#LR__2451
1ce14     00 B0 06 F6 | 	mov	local06, #0
1ce18     E7 92 02 FB | 	rdlong	arg01, fp
1ce1c     53 95 02 F6 | 	mov	arg02, local01
1ce20     01 96 66 F6 | 	neg	arg03, #1
1ce24     D8 A6 B0 FD | 	call	#__system___float_cmp
1ce28     01 7A 56 F2 | 	cmps	result1, #1 wc
1ce2c     00 B0 26 36 |  if_ae	not	local06, #0
1ce30     E7 B0 62 FC | 	wrlong	local06, fp
1ce34     C8 02 90 FD | 	jmp	#LR__2463
1ce38                 | LR__2451
1ce38                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1ce38     08 CE 05 F1 | 	add	fp, #8
1ce3c     E7 B0 02 FB | 	rdlong	local06, fp
1ce40     08 CE 85 F1 | 	sub	fp, #8
1ce44     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce48     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ce4c     3C 00 90 5D |  if_ne	jmp	#LR__2452
1ce50     00 B0 06 F6 | 	mov	local06, #0
1ce54     E7 AC 02 FB | 	rdlong	local04, fp
1ce58     53 93 52 F6 | 	abs	arg01, local01 wc
1ce5c     1F B2 C6 C9 |  if_b	decod	local07, #31
1ce60     00 B2 06 36 |  if_ae	mov	local07, #0
1ce64     60 9E B0 FD | 	call	#__system___float_fromuns
1ce68     59 7B 62 F5 | 	xor	result1, local07
1ce6c     3D 95 02 F6 | 	mov	arg02, result1
1ce70     56 93 02 F6 | 	mov	arg01, local04
1ce74     01 96 66 F6 | 	neg	arg03, #1
1ce78     84 A6 B0 FD | 	call	#__system___float_cmp
1ce7c     01 7A 56 F2 | 	cmps	result1, #1 wc
1ce80     00 B0 26 36 |  if_ae	not	local06, #0
1ce84     E7 B0 62 FC | 	wrlong	local06, fp
1ce88     74 02 90 FD | 	jmp	#LR__2463
1ce8c                 | LR__2452
1ce8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1ce8c     08 CE 05 F1 | 	add	fp, #8
1ce90     E7 B0 02 FB | 	rdlong	local06, fp
1ce94     08 CE 85 F1 | 	sub	fp, #8
1ce98     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce9c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cea0     30 00 90 5D |  if_ne	jmp	#LR__2453
1cea4     00 B0 06 F6 | 	mov	local06, #0
1cea8     E7 AC 02 FB | 	rdlong	local04, fp
1ceac     53 93 02 F6 | 	mov	arg01, local01
1ceb0     14 9E B0 FD | 	call	#__system___float_fromuns
1ceb4     3D 95 02 F6 | 	mov	arg02, result1
1ceb8     56 93 02 F6 | 	mov	arg01, local04
1cebc     01 96 66 F6 | 	neg	arg03, #1
1cec0     3C A6 B0 FD | 	call	#__system___float_cmp
1cec4     01 7A 56 F2 | 	cmps	result1, #1 wc
1cec8     00 B0 26 36 |  if_ae	not	local06, #0
1cecc     E7 B0 62 FC | 	wrlong	local06, fp
1ced0     2C 02 90 FD | 	jmp	#LR__2463
1ced4                 | LR__2453
1ced4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1ced4     08 CE 05 F1 | 	add	fp, #8
1ced8     E7 B0 02 FB | 	rdlong	local06, fp
1cedc     08 CE 85 F1 | 	sub	fp, #8
1cee0     1C B0 0E F2 | 	cmp	local06, #28 wz
1cee4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cee8     3C 00 90 5D |  if_ne	jmp	#LR__2454
1ceec     00 B0 06 F6 | 	mov	local06, #0
1cef0     E7 92 02 FB | 	rdlong	arg01, fp
1cef4     49 93 52 F6 | 	abs	arg01, arg01 wc
1cef8     1F B2 C6 C9 |  if_b	decod	local07, #31
1cefc     00 B2 06 36 |  if_ae	mov	local07, #0
1cf00     C4 9D B0 FD | 	call	#__system___float_fromuns
1cf04     59 7B 62 F5 | 	xor	result1, local07
1cf08     3D 93 02 F6 | 	mov	arg01, result1
1cf0c     53 95 02 F6 | 	mov	arg02, local01
1cf10     01 96 66 F6 | 	neg	arg03, #1
1cf14     E8 A5 B0 FD | 	call	#__system___float_cmp
1cf18     01 7A 56 F2 | 	cmps	result1, #1 wc
1cf1c     00 B0 26 36 |  if_ae	not	local06, #0
1cf20     E7 B0 62 FC | 	wrlong	local06, fp
1cf24     D8 01 90 FD | 	jmp	#LR__2463
1cf28                 | LR__2454
1cf28                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1cf28     08 CE 05 F1 | 	add	fp, #8
1cf2c     E7 B0 02 FB | 	rdlong	local06, fp
1cf30     08 CE 85 F1 | 	sub	fp, #8
1cf34     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf38     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cf3c     18 00 90 5D |  if_ne	jmp	#LR__2455
1cf40     00 B0 06 F6 | 	mov	local06, #0
1cf44     E7 AC 02 FB | 	rdlong	local04, fp
1cf48     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cf4c     01 B0 66 16 |  if_a	neg	local06, #1
1cf50     E7 B0 62 FC | 	wrlong	local06, fp
1cf54     A8 01 90 FD | 	jmp	#LR__2463
1cf58                 | LR__2455
1cf58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1cf58     08 CE 05 F1 | 	add	fp, #8
1cf5c     E7 B0 02 FB | 	rdlong	local06, fp
1cf60     08 CE 85 F1 | 	sub	fp, #8
1cf64     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf68     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cf6c     18 00 90 5D |  if_ne	jmp	#LR__2456
1cf70     00 B0 06 F6 | 	mov	local06, #0
1cf74     E7 AC 02 FB | 	rdlong	local04, fp
1cf78     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cf7c     01 B0 66 16 |  if_a	neg	local06, #1
1cf80     E7 B0 62 FC | 	wrlong	local06, fp
1cf84     78 01 90 FD | 	jmp	#LR__2463
1cf88                 | LR__2456
1cf88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1cf88     08 CE 05 F1 | 	add	fp, #8
1cf8c     E7 B0 02 FB | 	rdlong	local06, fp
1cf90     08 CE 85 F1 | 	sub	fp, #8
1cf94     1D B0 0E F2 | 	cmp	local06, #29 wz
1cf98     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cf9c     2C 00 90 5D |  if_ne	jmp	#LR__2457
1cfa0     00 B0 06 F6 | 	mov	local06, #0
1cfa4     E7 92 02 FB | 	rdlong	arg01, fp
1cfa8     1C 9D B0 FD | 	call	#__system___float_fromuns
1cfac     3D 93 02 F6 | 	mov	arg01, result1
1cfb0     53 95 02 F6 | 	mov	arg02, local01
1cfb4     01 96 66 F6 | 	neg	arg03, #1
1cfb8     44 A5 B0 FD | 	call	#__system___float_cmp
1cfbc     01 7A 56 F2 | 	cmps	result1, #1 wc
1cfc0     00 B0 26 36 |  if_ae	not	local06, #0
1cfc4     E7 B0 62 FC | 	wrlong	local06, fp
1cfc8     34 01 90 FD | 	jmp	#LR__2463
1cfcc                 | LR__2457
1cfcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1cfcc     08 CE 05 F1 | 	add	fp, #8
1cfd0     E7 B0 02 FB | 	rdlong	local06, fp
1cfd4     08 CE 85 F1 | 	sub	fp, #8
1cfd8     1D B0 0E F2 | 	cmp	local06, #29 wz
1cfdc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cfe0     18 00 90 5D |  if_ne	jmp	#LR__2458
1cfe4     00 B0 06 F6 | 	mov	local06, #0
1cfe8     E7 AC 02 FB | 	rdlong	local04, fp
1cfec     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cff0     01 B0 66 16 |  if_a	neg	local06, #1
1cff4     E7 B0 62 FC | 	wrlong	local06, fp
1cff8     04 01 90 FD | 	jmp	#LR__2463
1cffc                 | LR__2458
1cffc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1cffc     08 CE 05 F1 | 	add	fp, #8
1d000     E7 B0 02 FB | 	rdlong	local06, fp
1d004     08 CE 85 F1 | 	sub	fp, #8
1d008     1D B0 0E F2 | 	cmp	local06, #29 wz
1d00c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d010     18 00 90 5D |  if_ne	jmp	#LR__2459
1d014     00 B0 06 F6 | 	mov	local06, #0
1d018     E7 AC 02 FB | 	rdlong	local04, fp
1d01c     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d020     01 B0 66 16 |  if_a	neg	local06, #1
1d024     E7 B0 62 FC | 	wrlong	local06, fp
1d028     D4 00 90 FD | 	jmp	#LR__2463
1d02c                 | LR__2459
1d02c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d02c     08 CE 05 F1 | 	add	fp, #8
1d030     E7 B0 02 FB | 	rdlong	local06, fp
1d034     08 CE 85 F1 | 	sub	fp, #8
1d038     2B B0 0E F2 | 	cmp	local06, #43 wz
1d03c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d040     28 00 90 5D |  if_ne	jmp	#LR__2460
1d044     00 B0 06 F6 | 	mov	local06, #0
1d048     E7 92 02 FB | 	rdlong	arg01, fp
1d04c     90 07 BF FD | 	call	#_convertstring
1d050     3D 93 02 F6 | 	mov	arg01, result1
1d054     53 95 02 F6 | 	mov	arg02, local01
1d058     C8 79 B0 FD | 	call	#__system___string_cmp
1d05c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d060     00 B0 26 36 |  if_ae	not	local06, #0
1d064     E7 B0 62 FC | 	wrlong	local06, fp
1d068     94 00 90 FD | 	jmp	#LR__2463
1d06c                 | LR__2460
1d06c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d06c     08 CE 05 F1 | 	add	fp, #8
1d070     E7 B0 02 FB | 	rdlong	local06, fp
1d074     08 CE 85 F1 | 	sub	fp, #8
1d078     1F B0 0E F2 | 	cmp	local06, #31 wz
1d07c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d080     2C 00 90 5D |  if_ne	jmp	#LR__2461
1d084     00 B0 06 F6 | 	mov	local06, #0
1d088     E7 AC 02 FB | 	rdlong	local04, fp
1d08c     53 93 02 F6 | 	mov	arg01, local01
1d090     4C 07 BF FD | 	call	#_convertstring
1d094     3D 95 02 F6 | 	mov	arg02, result1
1d098     56 93 02 F6 | 	mov	arg01, local04
1d09c     84 79 B0 FD | 	call	#__system___string_cmp
1d0a0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d0a4     00 B0 26 36 |  if_ae	not	local06, #0
1d0a8     E7 B0 62 FC | 	wrlong	local06, fp
1d0ac     50 00 90 FD | 	jmp	#LR__2463
1d0b0                 | LR__2461
1d0b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d0b0     08 CE 05 F1 | 	add	fp, #8
1d0b4     E7 B0 02 FB | 	rdlong	local06, fp
1d0b8     08 CE 85 F1 | 	sub	fp, #8
1d0bc     2B B0 0E F2 | 	cmp	local06, #43 wz
1d0c0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d0c4     34 00 90 5D |  if_ne	jmp	#LR__2462
1d0c8     00 B0 06 F6 | 	mov	local06, #0
1d0cc     E7 92 02 FB | 	rdlong	arg01, fp
1d0d0     0C 07 BF FD | 	call	#_convertstring
1d0d4     3D AD 02 F6 | 	mov	local04, result1
1d0d8     53 93 02 F6 | 	mov	arg01, local01
1d0dc     00 07 BF FD | 	call	#_convertstring
1d0e0     3D 95 02 F6 | 	mov	arg02, result1
1d0e4     56 93 02 F6 | 	mov	arg01, local04
1d0e8     38 79 B0 FD | 	call	#__system___string_cmp
1d0ec     01 7A 56 F2 | 	cmps	result1, #1 wc
1d0f0     00 B0 26 36 |  if_ae	not	local06, #0
1d0f4     E7 B0 62 FC | 	wrlong	local06, fp
1d0f8     04 00 90 FD | 	jmp	#LR__2463
1d0fc                 | LR__2462
1d0fc     E7 00 68 FC | 	wrlong	#0, fp
1d100                 | LR__2463
1d100     08 CE 05 F1 | 	add	fp, #8
1d104     E7 38 68 FC | 	wrlong	#28, fp
1d108     08 CE 85 F1 | 	sub	fp, #8
1d10c                 | ' t1.result.uresult=0
1d10c                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d10c     E7 B0 0A FB | 	rdlong	local06, fp wz
1d110     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d114     E7 92 02 F6 | 	mov	arg01, fp
1d118     E4 05 BF FD | 	call	#_push
1d11c     E7 F0 03 F6 | 	mov	ptra, fp
1d120     F2 00 A0 FD | 	call	#popregs_
1d124                 | _do_gt_ret
1d124     2D 00 64 FD | 	ret
1d128                 | 
1d128                 | ' 
1d128                 | ' '--------------------------------- less or equal (<=)
1d128                 | ' 
1d128                 | ' sub do_le
1d128                 | _do_le
1d128     07 CA 05 F6 | 	mov	COUNT_, #7
1d12c     E8 00 A0 FD | 	call	#pushregs_
1d130     18 F0 07 F1 | 	add	ptra, #24
1d134     38 05 BF FD | 	call	#_pop
1d138     3D A7 02 F6 | 	mov	local01, result1
1d13c     3E AD 02 F6 | 	mov	local04, result2
1d140     3F AF 02 F6 | 	mov	local05, result3
1d144     56 A9 02 F6 | 	mov	local02, local04
1d148     57 AB 02 F6 | 	mov	local03, local05
1d14c     20 05 BF FD | 	call	#_pop
1d150     3F AF 02 F6 | 	mov	local05, result3
1d154     E7 7A 62 FC | 	wrlong	result1, fp
1d158     04 CE 05 F1 | 	add	fp, #4
1d15c     E7 7C 62 FC | 	wrlong	result2, fp
1d160     04 CE 05 F1 | 	add	fp, #4
1d164     E7 AE 62 FC | 	wrlong	local05, fp
1d168                 | ' 
1d168                 | ' t2=pop()
1d168                 | ' t1=pop()
1d168                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d168     08 CE 85 F1 | 	sub	fp, #8
1d16c     1F AE 0E F2 | 	cmp	local05, #31 wz
1d170     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d174     20 00 90 5D |  if_ne	jmp	#LR__2470
1d178     00 B0 06 F6 | 	mov	local06, #0
1d17c     E7 92 02 FB | 	rdlong	arg01, fp
1d180     53 95 02 F6 | 	mov	arg02, local01
1d184     9C 78 B0 FD | 	call	#__system___string_cmp
1d188     01 7A 56 F2 | 	cmps	result1, #1 wc
1d18c     00 B0 26 C6 |  if_b	not	local06, #0
1d190     E7 B0 62 FC | 	wrlong	local06, fp
1d194     04 03 90 FD | 	jmp	#LR__2483
1d198                 | LR__2470
1d198                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d198     08 CE 05 F1 | 	add	fp, #8
1d19c     E7 B0 02 FB | 	rdlong	local06, fp
1d1a0     08 CE 85 F1 | 	sub	fp, #8
1d1a4     1E B0 0E F2 | 	cmp	local06, #30 wz
1d1a8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d1ac     24 00 90 5D |  if_ne	jmp	#LR__2471
1d1b0     00 B0 06 F6 | 	mov	local06, #0
1d1b4     E7 92 02 FB | 	rdlong	arg01, fp
1d1b8     53 95 02 F6 | 	mov	arg02, local01
1d1bc     01 96 06 F6 | 	mov	arg03, #1
1d1c0     3C A3 B0 FD | 	call	#__system___float_cmp
1d1c4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d1c8     00 B0 26 C6 |  if_b	not	local06, #0
1d1cc     E7 B0 62 FC | 	wrlong	local06, fp
1d1d0     C8 02 90 FD | 	jmp	#LR__2483
1d1d4                 | LR__2471
1d1d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d1d4     08 CE 05 F1 | 	add	fp, #8
1d1d8     E7 B0 02 FB | 	rdlong	local06, fp
1d1dc     08 CE 85 F1 | 	sub	fp, #8
1d1e0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d1e4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d1e8     3C 00 90 5D |  if_ne	jmp	#LR__2472
1d1ec     00 B0 06 F6 | 	mov	local06, #0
1d1f0     E7 AC 02 FB | 	rdlong	local04, fp
1d1f4     53 93 52 F6 | 	abs	arg01, local01 wc
1d1f8     1F B2 C6 C9 |  if_b	decod	local07, #31
1d1fc     00 B2 06 36 |  if_ae	mov	local07, #0
1d200     C4 9A B0 FD | 	call	#__system___float_fromuns
1d204     59 7B 62 F5 | 	xor	result1, local07
1d208     3D 95 02 F6 | 	mov	arg02, result1
1d20c     56 93 02 F6 | 	mov	arg01, local04
1d210     01 96 06 F6 | 	mov	arg03, #1
1d214     E8 A2 B0 FD | 	call	#__system___float_cmp
1d218     01 7A 56 F2 | 	cmps	result1, #1 wc
1d21c     00 B0 26 C6 |  if_b	not	local06, #0
1d220     E7 B0 62 FC | 	wrlong	local06, fp
1d224     74 02 90 FD | 	jmp	#LR__2483
1d228                 | LR__2472
1d228                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d228     08 CE 05 F1 | 	add	fp, #8
1d22c     E7 B0 02 FB | 	rdlong	local06, fp
1d230     08 CE 85 F1 | 	sub	fp, #8
1d234     1E B0 0E F2 | 	cmp	local06, #30 wz
1d238     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d23c     30 00 90 5D |  if_ne	jmp	#LR__2473
1d240     00 B0 06 F6 | 	mov	local06, #0
1d244     E7 AC 02 FB | 	rdlong	local04, fp
1d248     53 93 02 F6 | 	mov	arg01, local01
1d24c     78 9A B0 FD | 	call	#__system___float_fromuns
1d250     3D 95 02 F6 | 	mov	arg02, result1
1d254     56 93 02 F6 | 	mov	arg01, local04
1d258     01 96 06 F6 | 	mov	arg03, #1
1d25c     A0 A2 B0 FD | 	call	#__system___float_cmp
1d260     01 7A 56 F2 | 	cmps	result1, #1 wc
1d264     00 B0 26 C6 |  if_b	not	local06, #0
1d268     E7 B0 62 FC | 	wrlong	local06, fp
1d26c     2C 02 90 FD | 	jmp	#LR__2483
1d270                 | LR__2473
1d270                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d270     08 CE 05 F1 | 	add	fp, #8
1d274     E7 B0 02 FB | 	rdlong	local06, fp
1d278     08 CE 85 F1 | 	sub	fp, #8
1d27c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d280     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d284     3C 00 90 5D |  if_ne	jmp	#LR__2474
1d288     00 B0 06 F6 | 	mov	local06, #0
1d28c     E7 92 02 FB | 	rdlong	arg01, fp
1d290     49 93 52 F6 | 	abs	arg01, arg01 wc
1d294     1F B2 C6 C9 |  if_b	decod	local07, #31
1d298     00 B2 06 36 |  if_ae	mov	local07, #0
1d29c     28 9A B0 FD | 	call	#__system___float_fromuns
1d2a0     59 7B 62 F5 | 	xor	result1, local07
1d2a4     3D 93 02 F6 | 	mov	arg01, result1
1d2a8     53 95 02 F6 | 	mov	arg02, local01
1d2ac     01 96 06 F6 | 	mov	arg03, #1
1d2b0     4C A2 B0 FD | 	call	#__system___float_cmp
1d2b4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d2b8     00 B0 26 C6 |  if_b	not	local06, #0
1d2bc     E7 B0 62 FC | 	wrlong	local06, fp
1d2c0     D8 01 90 FD | 	jmp	#LR__2483
1d2c4                 | LR__2474
1d2c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d2c4     08 CE 05 F1 | 	add	fp, #8
1d2c8     E7 B0 02 FB | 	rdlong	local06, fp
1d2cc     08 CE 85 F1 | 	sub	fp, #8
1d2d0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2d4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d2d8     18 00 90 5D |  if_ne	jmp	#LR__2475
1d2dc     00 B0 06 F6 | 	mov	local06, #0
1d2e0     E7 AC 02 FB | 	rdlong	local04, fp
1d2e4     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d2e8     01 B0 66 E6 |  if_be	neg	local06, #1
1d2ec     E7 B0 62 FC | 	wrlong	local06, fp
1d2f0     A8 01 90 FD | 	jmp	#LR__2483
1d2f4                 | LR__2475
1d2f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d2f4     08 CE 05 F1 | 	add	fp, #8
1d2f8     E7 B0 02 FB | 	rdlong	local06, fp
1d2fc     08 CE 85 F1 | 	sub	fp, #8
1d300     1C B0 0E F2 | 	cmp	local06, #28 wz
1d304     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d308     18 00 90 5D |  if_ne	jmp	#LR__2476
1d30c     00 B0 06 F6 | 	mov	local06, #0
1d310     E7 AC 02 FB | 	rdlong	local04, fp
1d314     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d318     01 B0 66 E6 |  if_be	neg	local06, #1
1d31c     E7 B0 62 FC | 	wrlong	local06, fp
1d320     78 01 90 FD | 	jmp	#LR__2483
1d324                 | LR__2476
1d324                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d324     08 CE 05 F1 | 	add	fp, #8
1d328     E7 B0 02 FB | 	rdlong	local06, fp
1d32c     08 CE 85 F1 | 	sub	fp, #8
1d330     1D B0 0E F2 | 	cmp	local06, #29 wz
1d334     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d338     2C 00 90 5D |  if_ne	jmp	#LR__2477
1d33c     00 B0 06 F6 | 	mov	local06, #0
1d340     E7 92 02 FB | 	rdlong	arg01, fp
1d344     80 99 B0 FD | 	call	#__system___float_fromuns
1d348     3D 93 02 F6 | 	mov	arg01, result1
1d34c     53 95 02 F6 | 	mov	arg02, local01
1d350     01 96 06 F6 | 	mov	arg03, #1
1d354     A8 A1 B0 FD | 	call	#__system___float_cmp
1d358     01 7A 56 F2 | 	cmps	result1, #1 wc
1d35c     00 B0 26 C6 |  if_b	not	local06, #0
1d360     E7 B0 62 FC | 	wrlong	local06, fp
1d364     34 01 90 FD | 	jmp	#LR__2483
1d368                 | LR__2477
1d368                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d368     08 CE 05 F1 | 	add	fp, #8
1d36c     E7 B0 02 FB | 	rdlong	local06, fp
1d370     08 CE 85 F1 | 	sub	fp, #8
1d374     1D B0 0E F2 | 	cmp	local06, #29 wz
1d378     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d37c     18 00 90 5D |  if_ne	jmp	#LR__2478
1d380     00 B0 06 F6 | 	mov	local06, #0
1d384     E7 AC 02 FB | 	rdlong	local04, fp
1d388     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d38c     01 B0 66 E6 |  if_be	neg	local06, #1
1d390     E7 B0 62 FC | 	wrlong	local06, fp
1d394     04 01 90 FD | 	jmp	#LR__2483
1d398                 | LR__2478
1d398                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d398     08 CE 05 F1 | 	add	fp, #8
1d39c     E7 B0 02 FB | 	rdlong	local06, fp
1d3a0     08 CE 85 F1 | 	sub	fp, #8
1d3a4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d3a8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d3ac     18 00 90 5D |  if_ne	jmp	#LR__2479
1d3b0     00 B0 06 F6 | 	mov	local06, #0
1d3b4     E7 AC 02 FB | 	rdlong	local04, fp
1d3b8     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d3bc     01 B0 66 E6 |  if_be	neg	local06, #1
1d3c0     E7 B0 62 FC | 	wrlong	local06, fp
1d3c4     D4 00 90 FD | 	jmp	#LR__2483
1d3c8                 | LR__2479
1d3c8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d3c8     08 CE 05 F1 | 	add	fp, #8
1d3cc     E7 B0 02 FB | 	rdlong	local06, fp
1d3d0     08 CE 85 F1 | 	sub	fp, #8
1d3d4     2B B0 0E F2 | 	cmp	local06, #43 wz
1d3d8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d3dc     28 00 90 5D |  if_ne	jmp	#LR__2480
1d3e0     00 B0 06 F6 | 	mov	local06, #0
1d3e4     E7 92 02 FB | 	rdlong	arg01, fp
1d3e8     F4 03 BF FD | 	call	#_convertstring
1d3ec     3D 93 02 F6 | 	mov	arg01, result1
1d3f0     53 95 02 F6 | 	mov	arg02, local01
1d3f4     2C 76 B0 FD | 	call	#__system___string_cmp
1d3f8     01 7A 56 F2 | 	cmps	result1, #1 wc
1d3fc     00 B0 26 C6 |  if_b	not	local06, #0
1d400     E7 B0 62 FC | 	wrlong	local06, fp
1d404     94 00 90 FD | 	jmp	#LR__2483
1d408                 | LR__2480
1d408                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d408     08 CE 05 F1 | 	add	fp, #8
1d40c     E7 B0 02 FB | 	rdlong	local06, fp
1d410     08 CE 85 F1 | 	sub	fp, #8
1d414     1F B0 0E F2 | 	cmp	local06, #31 wz
1d418     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d41c     2C 00 90 5D |  if_ne	jmp	#LR__2481
1d420     00 B0 06 F6 | 	mov	local06, #0
1d424     E7 AC 02 FB | 	rdlong	local04, fp
1d428     53 93 02 F6 | 	mov	arg01, local01
1d42c     B0 03 BF FD | 	call	#_convertstring
1d430     3D 95 02 F6 | 	mov	arg02, result1
1d434     56 93 02 F6 | 	mov	arg01, local04
1d438     E8 75 B0 FD | 	call	#__system___string_cmp
1d43c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d440     00 B0 26 C6 |  if_b	not	local06, #0
1d444     E7 B0 62 FC | 	wrlong	local06, fp
1d448     50 00 90 FD | 	jmp	#LR__2483
1d44c                 | LR__2481
1d44c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d44c     08 CE 05 F1 | 	add	fp, #8
1d450     E7 B0 02 FB | 	rdlong	local06, fp
1d454     08 CE 85 F1 | 	sub	fp, #8
1d458     2B B0 0E F2 | 	cmp	local06, #43 wz
1d45c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d460     34 00 90 5D |  if_ne	jmp	#LR__2482
1d464     00 B0 06 F6 | 	mov	local06, #0
1d468     E7 92 02 FB | 	rdlong	arg01, fp
1d46c     70 03 BF FD | 	call	#_convertstring
1d470     3D AD 02 F6 | 	mov	local04, result1
1d474     53 93 02 F6 | 	mov	arg01, local01
1d478     64 03 BF FD | 	call	#_convertstring
1d47c     3D 95 02 F6 | 	mov	arg02, result1
1d480     56 93 02 F6 | 	mov	arg01, local04
1d484     9C 75 B0 FD | 	call	#__system___string_cmp
1d488     01 7A 56 F2 | 	cmps	result1, #1 wc
1d48c     00 B0 26 C6 |  if_b	not	local06, #0
1d490     E7 B0 62 FC | 	wrlong	local06, fp
1d494     04 00 90 FD | 	jmp	#LR__2483
1d498                 | LR__2482
1d498     E7 00 68 FC | 	wrlong	#0, fp
1d49c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d49c                 | LR__2483
1d49c     08 CE 05 F1 | 	add	fp, #8
1d4a0     E7 38 68 FC | 	wrlong	#28, fp
1d4a4     08 CE 85 F1 | 	sub	fp, #8
1d4a8     E7 92 02 F6 | 	mov	arg01, fp
1d4ac     50 02 BF FD | 	call	#_push
1d4b0     E7 F0 03 F6 | 	mov	ptra, fp
1d4b4     F2 00 A0 FD | 	call	#popregs_
1d4b8                 | _do_le_ret
1d4b8     2D 00 64 FD | 	ret
1d4bc                 | 
1d4bc                 | ' 
1d4bc                 | ' '--------------------------------- less than (<)
1d4bc                 | ' 
1d4bc                 | ' sub do_lt
1d4bc                 | _do_lt
1d4bc     07 CA 05 F6 | 	mov	COUNT_, #7
1d4c0     E8 00 A0 FD | 	call	#pushregs_
1d4c4     18 F0 07 F1 | 	add	ptra, #24
1d4c8     A4 01 BF FD | 	call	#_pop
1d4cc     3D A7 02 F6 | 	mov	local01, result1
1d4d0     3E AD 02 F6 | 	mov	local04, result2
1d4d4     3F AF 02 F6 | 	mov	local05, result3
1d4d8     56 A9 02 F6 | 	mov	local02, local04
1d4dc     57 AB 02 F6 | 	mov	local03, local05
1d4e0     8C 01 BF FD | 	call	#_pop
1d4e4     3F AF 02 F6 | 	mov	local05, result3
1d4e8     E7 7A 62 FC | 	wrlong	result1, fp
1d4ec     04 CE 05 F1 | 	add	fp, #4
1d4f0     E7 7C 62 FC | 	wrlong	result2, fp
1d4f4     04 CE 05 F1 | 	add	fp, #4
1d4f8     E7 AE 62 FC | 	wrlong	local05, fp
1d4fc                 | ' 
1d4fc                 | ' t2=pop()
1d4fc                 | ' t1=pop()
1d4fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d4fc     08 CE 85 F1 | 	sub	fp, #8
1d500     1F AE 0E F2 | 	cmp	local05, #31 wz
1d504     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d508     20 00 90 5D |  if_ne	jmp	#LR__2490
1d50c     00 B0 06 F6 | 	mov	local06, #0
1d510     E7 92 02 FB | 	rdlong	arg01, fp
1d514     53 95 02 F6 | 	mov	arg02, local01
1d518     08 75 B0 FD | 	call	#__system___string_cmp
1d51c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d520     00 B0 26 C6 |  if_b	not	local06, #0
1d524     E7 B0 62 FC | 	wrlong	local06, fp
1d528     E4 02 90 FD | 	jmp	#LR__2499
1d52c                 | LR__2490
1d52c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d52c     08 CE 05 F1 | 	add	fp, #8
1d530     E7 B0 02 FB | 	rdlong	local06, fp
1d534     08 CE 85 F1 | 	sub	fp, #8
1d538     1E B0 0E F2 | 	cmp	local06, #30 wz
1d53c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d540     24 00 90 5D |  if_ne	jmp	#LR__2491
1d544     00 B0 06 F6 | 	mov	local06, #0
1d548     E7 92 02 FB | 	rdlong	arg01, fp
1d54c     53 95 02 F6 | 	mov	arg02, local01
1d550     01 96 06 F6 | 	mov	arg03, #1
1d554     A8 9F B0 FD | 	call	#__system___float_cmp
1d558     00 7A 56 F2 | 	cmps	result1, #0 wc
1d55c     00 B0 26 C6 |  if_b	not	local06, #0
1d560     E7 B0 62 FC | 	wrlong	local06, fp
1d564     A8 02 90 FD | 	jmp	#LR__2499
1d568                 | LR__2491
1d568                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d568     08 CE 05 F1 | 	add	fp, #8
1d56c     E7 B0 02 FB | 	rdlong	local06, fp
1d570     08 CE 85 F1 | 	sub	fp, #8
1d574     1E B0 0E F2 | 	cmp	local06, #30 wz
1d578     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d57c     3C 00 90 5D |  if_ne	jmp	#LR__2492
1d580     00 B0 06 F6 | 	mov	local06, #0
1d584     E7 AC 02 FB | 	rdlong	local04, fp
1d588     53 93 52 F6 | 	abs	arg01, local01 wc
1d58c     1F B2 C6 C9 |  if_b	decod	local07, #31
1d590     00 B2 06 36 |  if_ae	mov	local07, #0
1d594     30 97 B0 FD | 	call	#__system___float_fromuns
1d598     59 7B 62 F5 | 	xor	result1, local07
1d59c     3D 95 02 F6 | 	mov	arg02, result1
1d5a0     56 93 02 F6 | 	mov	arg01, local04
1d5a4     01 96 06 F6 | 	mov	arg03, #1
1d5a8     54 9F B0 FD | 	call	#__system___float_cmp
1d5ac     00 7A 56 F2 | 	cmps	result1, #0 wc
1d5b0     00 B0 26 C6 |  if_b	not	local06, #0
1d5b4     E7 B0 62 FC | 	wrlong	local06, fp
1d5b8     54 02 90 FD | 	jmp	#LR__2499
1d5bc                 | LR__2492
1d5bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d5bc     08 CE 05 F1 | 	add	fp, #8
1d5c0     E7 B0 02 FB | 	rdlong	local06, fp
1d5c4     08 CE 85 F1 | 	sub	fp, #8
1d5c8     1E B0 0E F2 | 	cmp	local06, #30 wz
1d5cc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d5d0     30 00 90 5D |  if_ne	jmp	#LR__2493
1d5d4     00 B0 06 F6 | 	mov	local06, #0
1d5d8     E7 AC 02 FB | 	rdlong	local04, fp
1d5dc     53 93 02 F6 | 	mov	arg01, local01
1d5e0     E4 96 B0 FD | 	call	#__system___float_fromuns
1d5e4     3D 95 02 F6 | 	mov	arg02, result1
1d5e8     56 93 02 F6 | 	mov	arg01, local04
1d5ec     01 96 06 F6 | 	mov	arg03, #1
1d5f0     0C 9F B0 FD | 	call	#__system___float_cmp
1d5f4     00 7A 56 F2 | 	cmps	result1, #0 wc
1d5f8     00 B0 26 C6 |  if_b	not	local06, #0
1d5fc     E7 B0 62 FC | 	wrlong	local06, fp
1d600     0C 02 90 FD | 	jmp	#LR__2499
1d604                 | LR__2493
1d604                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d604     08 CE 05 F1 | 	add	fp, #8
1d608     E7 B0 02 FB | 	rdlong	local06, fp
1d60c     08 CE 85 F1 | 	sub	fp, #8
1d610     1C B0 0E F2 | 	cmp	local06, #28 wz
1d614     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d618     3C 00 90 5D |  if_ne	jmp	#LR__2494
1d61c     00 B0 06 F6 | 	mov	local06, #0
1d620     E7 92 02 FB | 	rdlong	arg01, fp
1d624     49 93 52 F6 | 	abs	arg01, arg01 wc
1d628     1F B2 C6 C9 |  if_b	decod	local07, #31
1d62c     00 B2 06 36 |  if_ae	mov	local07, #0
1d630     94 96 B0 FD | 	call	#__system___float_fromuns
1d634     59 7B 62 F5 | 	xor	result1, local07
1d638     3D 93 02 F6 | 	mov	arg01, result1
1d63c     53 95 02 F6 | 	mov	arg02, local01
1d640     01 96 06 F6 | 	mov	arg03, #1
1d644     B8 9E B0 FD | 	call	#__system___float_cmp
1d648     00 7A 56 F2 | 	cmps	result1, #0 wc
1d64c     00 B0 26 C6 |  if_b	not	local06, #0
1d650     E7 B0 62 FC | 	wrlong	local06, fp
1d654     B8 01 90 FD | 	jmp	#LR__2499
1d658                 | LR__2494
1d658                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d658     08 CE 05 F1 | 	add	fp, #8
1d65c     E7 B0 02 FB | 	rdlong	local06, fp
1d660     08 CE 85 F1 | 	sub	fp, #8
1d664     1C B0 0E F2 | 	cmp	local06, #28 wz
1d668     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d66c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d670     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d674     58 B1 A2 A1 |  if_e	subx	local06, local06
1d678     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d67c     90 01 90 AD |  if_e	jmp	#LR__2499
1d680                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d680     08 CE 05 F1 | 	add	fp, #8
1d684     E7 B0 02 FB | 	rdlong	local06, fp
1d688     08 CE 85 F1 | 	sub	fp, #8
1d68c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d690     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d694     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d698     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d69c     58 B1 A2 A1 |  if_e	subx	local06, local06
1d6a0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d6a4     68 01 90 AD |  if_e	jmp	#LR__2499
1d6a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1d6a8     08 CE 05 F1 | 	add	fp, #8
1d6ac     E7 B0 02 FB | 	rdlong	local06, fp
1d6b0     08 CE 85 F1 | 	sub	fp, #8
1d6b4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d6b8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d6bc     2C 00 90 5D |  if_ne	jmp	#LR__2495
1d6c0     00 B0 06 F6 | 	mov	local06, #0
1d6c4     E7 92 02 FB | 	rdlong	arg01, fp
1d6c8     FC 95 B0 FD | 	call	#__system___float_fromuns
1d6cc     3D 93 02 F6 | 	mov	arg01, result1
1d6d0     53 95 02 F6 | 	mov	arg02, local01
1d6d4     01 96 06 F6 | 	mov	arg03, #1
1d6d8     24 9E B0 FD | 	call	#__system___float_cmp
1d6dc     00 7A 56 F2 | 	cmps	result1, #0 wc
1d6e0     00 B0 26 C6 |  if_b	not	local06, #0
1d6e4     E7 B0 62 FC | 	wrlong	local06, fp
1d6e8     24 01 90 FD | 	jmp	#LR__2499
1d6ec                 | LR__2495
1d6ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1d6ec     08 CE 05 F1 | 	add	fp, #8
1d6f0     E7 B0 02 FB | 	rdlong	local06, fp
1d6f4     08 CE 85 F1 | 	sub	fp, #8
1d6f8     1D B0 0E F2 | 	cmp	local06, #29 wz
1d6fc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d700     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d704     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d708     58 B1 A2 A1 |  if_e	subx	local06, local06
1d70c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d710     FC 00 90 AD |  if_e	jmp	#LR__2499
1d714                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1d714     08 CE 05 F1 | 	add	fp, #8
1d718     E7 B0 02 FB | 	rdlong	local06, fp
1d71c     08 CE 85 F1 | 	sub	fp, #8
1d720     1D B0 0E F2 | 	cmp	local06, #29 wz
1d724     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d728     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d72c     53 AD 12 A2 |  if_e	cmp	local04, local01 wc
1d730     58 B1 A2 A1 |  if_e	subx	local06, local06
1d734     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d738     D4 00 90 AD |  if_e	jmp	#LR__2499
1d73c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1d73c     08 CE 05 F1 | 	add	fp, #8
1d740     E7 B0 02 FB | 	rdlong	local06, fp
1d744     08 CE 85 F1 | 	sub	fp, #8
1d748     2B B0 0E F2 | 	cmp	local06, #43 wz
1d74c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d750     28 00 90 5D |  if_ne	jmp	#LR__2496
1d754     00 B0 06 F6 | 	mov	local06, #0
1d758     E7 92 02 FB | 	rdlong	arg01, fp
1d75c     80 00 BF FD | 	call	#_convertstring
1d760     3D 93 02 F6 | 	mov	arg01, result1
1d764     53 95 02 F6 | 	mov	arg02, local01
1d768     B8 72 B0 FD | 	call	#__system___string_cmp
1d76c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d770     00 B0 26 C6 |  if_b	not	local06, #0
1d774     E7 B0 62 FC | 	wrlong	local06, fp
1d778     94 00 90 FD | 	jmp	#LR__2499
1d77c                 | LR__2496
1d77c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1d77c     08 CE 05 F1 | 	add	fp, #8
1d780     E7 B0 02 FB | 	rdlong	local06, fp
1d784     08 CE 85 F1 | 	sub	fp, #8
1d788     1F B0 0E F2 | 	cmp	local06, #31 wz
1d78c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d790     2C 00 90 5D |  if_ne	jmp	#LR__2497
1d794     00 B0 06 F6 | 	mov	local06, #0
1d798     E7 AC 02 FB | 	rdlong	local04, fp
1d79c     53 93 02 F6 | 	mov	arg01, local01
1d7a0     3C 00 BF FD | 	call	#_convertstring
1d7a4     3D 95 02 F6 | 	mov	arg02, result1
1d7a8     56 93 02 F6 | 	mov	arg01, local04
1d7ac     74 72 B0 FD | 	call	#__system___string_cmp
1d7b0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d7b4     00 B0 26 C6 |  if_b	not	local06, #0
1d7b8     E7 B0 62 FC | 	wrlong	local06, fp
1d7bc     50 00 90 FD | 	jmp	#LR__2499
1d7c0                 | LR__2497
1d7c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1d7c0     08 CE 05 F1 | 	add	fp, #8
1d7c4     E7 B0 02 FB | 	rdlong	local06, fp
1d7c8     08 CE 85 F1 | 	sub	fp, #8
1d7cc     2B B0 0E F2 | 	cmp	local06, #43 wz
1d7d0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d7d4     34 00 90 5D |  if_ne	jmp	#LR__2498
1d7d8     00 B0 06 F6 | 	mov	local06, #0
1d7dc     E7 92 02 FB | 	rdlong	arg01, fp
1d7e0     FC FF BE FD | 	call	#_convertstring
1d7e4     3D AD 02 F6 | 	mov	local04, result1
1d7e8     53 93 02 F6 | 	mov	arg01, local01
1d7ec     F0 FF BE FD | 	call	#_convertstring
1d7f0     3D 95 02 F6 | 	mov	arg02, result1
1d7f4     56 93 02 F6 | 	mov	arg01, local04
1d7f8     28 72 B0 FD | 	call	#__system___string_cmp
1d7fc     00 7A 56 F2 | 	cmps	result1, #0 wc
1d800     00 B0 26 C6 |  if_b	not	local06, #0
1d804     E7 B0 62 FC | 	wrlong	local06, fp
1d808     04 00 90 FD | 	jmp	#LR__2499
1d80c                 | LR__2498
1d80c     E7 00 68 FC | 	wrlong	#0, fp
1d810                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d810                 | LR__2499
1d810     08 CE 05 F1 | 	add	fp, #8
1d814     E7 38 68 FC | 	wrlong	#28, fp
1d818     08 CE 85 F1 | 	sub	fp, #8
1d81c     E7 92 02 F6 | 	mov	arg01, fp
1d820     DC FE BE FD | 	call	#_push
1d824     E7 F0 03 F6 | 	mov	ptra, fp
1d828     F2 00 A0 FD | 	call	#popregs_
1d82c                 | _do_lt_ret
1d82c     2D 00 64 FD | 	ret
1d830                 | 
1d830                 | ' 
1d830                 | ' '--------------------------------- minus (-)
1d830                 | ' 
1d830                 | ' sub do_minus
1d830                 | _do_minus
1d830     07 CA 05 F6 | 	mov	COUNT_, #7
1d834     E8 00 A0 FD | 	call	#pushregs_
1d838     18 F0 07 F1 | 	add	ptra, #24
1d83c     30 FE BE FD | 	call	#_pop
1d840     3D A7 02 F6 | 	mov	local01, result1
1d844     3E AD 02 F6 | 	mov	local04, result2
1d848     3F AF 02 F6 | 	mov	local05, result3
1d84c     56 A9 02 F6 | 	mov	local02, local04
1d850     57 AB 02 F6 | 	mov	local03, local05
1d854     18 FE BE FD | 	call	#_pop
1d858     3F AF 02 F6 | 	mov	local05, result3
1d85c     E7 7A 62 FC | 	wrlong	result1, fp
1d860     04 CE 05 F1 | 	add	fp, #4
1d864     E7 7C 62 FC | 	wrlong	result2, fp
1d868     04 CE 05 F1 | 	add	fp, #4
1d86c     E7 AE 62 FC | 	wrlong	local05, fp
1d870                 | ' 
1d870                 | ' t2=pop()
1d870                 | ' t1=pop()
1d870                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1d870     08 CE 85 F1 | 	sub	fp, #8
1d874     1D AE 0E F2 | 	cmp	local05, #29 wz
1d878     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d87c     30 00 90 5D |  if_ne	jmp	#LR__2500
1d880                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1d880     E7 B0 02 FB | 	rdlong	local06, fp
1d884     58 A7 12 F2 | 	cmp	local01, local06 wc
1d888     53 B1 82 C1 |  if_b	sub	local06, local01
1d88c     E7 B0 62 CC |  if_b	wrlong	local06, fp
1d890     18 02 90 CD |  if_b	jmp	#LR__2507
1d894     E7 B0 02 FB | 	rdlong	local06, fp
1d898     53 B1 82 F1 | 	sub	local06, local01
1d89c     E7 B0 62 FC | 	wrlong	local06, fp
1d8a0     08 CE 05 F1 | 	add	fp, #8
1d8a4     E7 38 68 FC | 	wrlong	#28, fp
1d8a8     08 CE 85 F1 | 	sub	fp, #8
1d8ac     FC 01 90 FD | 	jmp	#LR__2507
1d8b0                 | LR__2500
1d8b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1d8b0     08 CE 05 F1 | 	add	fp, #8
1d8b4     E7 B0 02 FB | 	rdlong	local06, fp
1d8b8     08 CE 85 F1 | 	sub	fp, #8
1d8bc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d8c0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d8c4     1C 00 90 5D |  if_ne	jmp	#LR__2501
1d8c8     E7 B0 02 FB | 	rdlong	local06, fp
1d8cc     53 B1 82 F1 | 	sub	local06, local01
1d8d0     E7 B0 62 FC | 	wrlong	local06, fp
1d8d4     08 CE 05 F1 | 	add	fp, #8
1d8d8     E7 38 68 FC | 	wrlong	#28, fp
1d8dc     08 CE 85 F1 | 	sub	fp, #8
1d8e0     C8 01 90 FD | 	jmp	#LR__2507
1d8e4                 | LR__2501
1d8e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1d8e4     08 CE 05 F1 | 	add	fp, #8
1d8e8     E7 B0 02 FB | 	rdlong	local06, fp
1d8ec     08 CE 85 F1 | 	sub	fp, #8
1d8f0     1D B0 0E F2 | 	cmp	local06, #29 wz
1d8f4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d8f8     2C 00 90 5D |  if_ne	jmp	#LR__2502
1d8fc     E7 92 02 FB | 	rdlong	arg01, fp
1d900     C4 93 B0 FD | 	call	#__system___float_fromuns
1d904     3D 93 02 F6 | 	mov	arg01, result1
1d908     53 95 02 F6 | 	mov	arg02, local01
1d90c     1F 94 E6 F4 | 	bitnot	arg02, #31
1d910     E8 93 B0 FD | 	call	#__system___float_add
1d914     E7 7A 62 FC | 	wrlong	result1, fp
1d918     08 CE 05 F1 | 	add	fp, #8
1d91c     E7 3C 68 FC | 	wrlong	#30, fp
1d920     08 CE 85 F1 | 	sub	fp, #8
1d924     84 01 90 FD | 	jmp	#LR__2507
1d928                 | LR__2502
1d928                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1d928     08 CE 05 F1 | 	add	fp, #8
1d92c     E7 B0 02 FB | 	rdlong	local06, fp
1d930     08 CE 85 F1 | 	sub	fp, #8
1d934     1C B0 0E F2 | 	cmp	local06, #28 wz
1d938     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d93c     E7 B0 02 AB |  if_e	rdlong	local06, fp
1d940     53 B1 82 A1 |  if_e	sub	local06, local01
1d944     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d948     60 01 90 AD |  if_e	jmp	#LR__2507
1d94c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1d94c     08 CE 05 F1 | 	add	fp, #8
1d950     E7 B0 02 FB | 	rdlong	local06, fp
1d954     08 CE 85 F1 | 	sub	fp, #8
1d958     1C B0 0E F2 | 	cmp	local06, #28 wz
1d95c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d960     E7 B0 02 AB |  if_e	rdlong	local06, fp
1d964     53 B1 82 A1 |  if_e	sub	local06, local01
1d968     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d96c     3C 01 90 AD |  if_e	jmp	#LR__2507
1d970                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1d970     08 CE 05 F1 | 	add	fp, #8
1d974     E7 B0 02 FB | 	rdlong	local06, fp
1d978     08 CE 85 F1 | 	sub	fp, #8
1d97c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d980     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d984     3C 00 90 5D |  if_ne	jmp	#LR__2503
1d988     E7 92 02 FB | 	rdlong	arg01, fp
1d98c     49 93 52 F6 | 	abs	arg01, arg01 wc
1d990     1F B2 C6 C9 |  if_b	decod	local07, #31
1d994     00 B2 06 36 |  if_ae	mov	local07, #0
1d998     2C 93 B0 FD | 	call	#__system___float_fromuns
1d99c     59 7B 62 F5 | 	xor	result1, local07
1d9a0     3D 93 02 F6 | 	mov	arg01, result1
1d9a4     53 95 02 F6 | 	mov	arg02, local01
1d9a8     1F 94 E6 F4 | 	bitnot	arg02, #31
1d9ac     4C 93 B0 FD | 	call	#__system___float_add
1d9b0     E7 7A 62 FC | 	wrlong	result1, fp
1d9b4     08 CE 05 F1 | 	add	fp, #8
1d9b8     E7 3C 68 FC | 	wrlong	#30, fp
1d9bc     08 CE 85 F1 | 	sub	fp, #8
1d9c0     E8 00 90 FD | 	jmp	#LR__2507
1d9c4                 | LR__2503
1d9c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1d9c4     08 CE 05 F1 | 	add	fp, #8
1d9c8     E7 B0 02 FB | 	rdlong	local06, fp
1d9cc     08 CE 85 F1 | 	sub	fp, #8
1d9d0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d9d4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d9d8     24 00 90 5D |  if_ne	jmp	#LR__2504
1d9dc     E7 B0 02 FB | 	rdlong	local06, fp
1d9e0     53 93 02 F6 | 	mov	arg01, local01
1d9e4     E0 92 B0 FD | 	call	#__system___float_fromuns
1d9e8     3D 95 02 F6 | 	mov	arg02, result1
1d9ec     58 93 02 F6 | 	mov	arg01, local06
1d9f0     1F 94 E6 F4 | 	bitnot	arg02, #31
1d9f4     04 93 B0 FD | 	call	#__system___float_add
1d9f8     E7 7A 62 FC | 	wrlong	result1, fp
1d9fc     AC 00 90 FD | 	jmp	#LR__2507
1da00                 | LR__2504
1da00                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1da00     08 CE 05 F1 | 	add	fp, #8
1da04     E7 B0 02 FB | 	rdlong	local06, fp
1da08     08 CE 85 F1 | 	sub	fp, #8
1da0c     1E B0 0E F2 | 	cmp	local06, #30 wz
1da10     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1da14     30 00 90 5D |  if_ne	jmp	#LR__2505
1da18     E7 B0 02 FB | 	rdlong	local06, fp
1da1c     53 93 52 F6 | 	abs	arg01, local01 wc
1da20     1F B2 C6 C9 |  if_b	decod	local07, #31
1da24     00 B2 06 36 |  if_ae	mov	local07, #0
1da28     9C 92 B0 FD | 	call	#__system___float_fromuns
1da2c     59 7B 62 F5 | 	xor	result1, local07
1da30     3D 95 02 F6 | 	mov	arg02, result1
1da34     58 93 02 F6 | 	mov	arg01, local06
1da38     1F 94 E6 F4 | 	bitnot	arg02, #31
1da3c     BC 92 B0 FD | 	call	#__system___float_add
1da40     E7 7A 62 FC | 	wrlong	result1, fp
1da44     64 00 90 FD | 	jmp	#LR__2507
1da48                 | LR__2505
1da48                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1da48     08 CE 05 F1 | 	add	fp, #8
1da4c     E7 B0 02 FB | 	rdlong	local06, fp
1da50     08 CE 85 F1 | 	sub	fp, #8
1da54     1E B0 0E F2 | 	cmp	local06, #30 wz
1da58     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1da5c     18 00 90 5D |  if_ne	jmp	#LR__2506
1da60     E7 92 02 FB | 	rdlong	arg01, fp
1da64     53 95 02 F6 | 	mov	arg02, local01
1da68     1F 94 E6 F4 | 	bitnot	arg02, #31
1da6c     8C 92 B0 FD | 	call	#__system___float_add
1da70     E7 7A 62 FC | 	wrlong	result1, fp
1da74     34 00 90 FD | 	jmp	#LR__2507
1da78                 | LR__2506
1da78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1da78     08 CE 05 F1 | 	add	fp, #8
1da7c     E7 B0 02 FB | 	rdlong	local06, fp
1da80     08 CE 85 F1 | 	sub	fp, #8
1da84     1F B0 0E F2 | 	cmp	local06, #31 wz
1da88     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1da8c     E7 06 68 AC |  if_e	wrlong	#3, fp
1da90     08 CE 05 A1 |  if_e	add	fp, #8
1da94     E7 FE 69 AC |  if_e	wrlong	#255, fp
1da98     08 CE 85 A1 |  if_e	sub	fp, #8
1da9c     E7 0A 68 5C |  if_ne	wrlong	#5, fp
1daa0     08 CE 05 51 |  if_ne	add	fp, #8
1daa4     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1daa8     08 CE 85 51 |  if_ne	sub	fp, #8
1daac                 | LR__2507
1daac     E7 92 02 F6 | 	mov	arg01, fp
1dab0     4C FC BE FD | 	call	#_push
1dab4     E7 F0 03 F6 | 	mov	ptra, fp
1dab8     F2 00 A0 FD | 	call	#popregs_
1dabc                 | _do_minus_ret
1dabc     2D 00 64 FD | 	ret
1dac0                 | 
1dac0                 | ' 
1dac0                 | ' '--------------------------------- negative (-), one argument negative
1dac0                 | ' 
1dac0                 | ' sub do_negative
1dac0                 | _do_negative
1dac0     02 CA 05 F6 | 	mov	COUNT_, #2
1dac4     E8 00 A0 FD | 	call	#pushregs_
1dac8     0C F0 07 F1 | 	add	ptra, #12
1dacc     A0 FB BE FD | 	call	#_pop
1dad0     3F A7 02 F6 | 	mov	local01, result3
1dad4     E7 7A 62 FC | 	wrlong	result1, fp
1dad8     04 CE 05 F1 | 	add	fp, #4
1dadc     E7 7C 62 FC | 	wrlong	result2, fp
1dae0     04 CE 05 F1 | 	add	fp, #4
1dae4     E7 A6 62 FC | 	wrlong	local01, fp
1dae8                 | ' 
1dae8                 | ' t1=pop()
1dae8                 | ' if t1.result_type=result_int then 
1dae8     08 CE 85 F1 | 	sub	fp, #8
1daec     1C A6 0E F2 | 	cmp	local01, #28 wz
1daf0     E7 A8 02 AB |  if_e	rdlong	local02, fp
1daf4     54 A7 62 A6 |  if_e	neg	local01, local02
1daf8     E7 A6 62 AC |  if_e	wrlong	local01, fp
1dafc     5C 00 90 AD |  if_e	jmp	#LR__2512
1db00     08 CE 05 F1 | 	add	fp, #8
1db04     E7 A6 02 FB | 	rdlong	local01, fp
1db08     08 CE 85 F1 | 	sub	fp, #8
1db0c     1D A6 0E F2 | 	cmp	local01, #29 wz
1db10     1C 00 90 5D |  if_ne	jmp	#LR__2510
1db14     E7 A8 02 FB | 	rdlong	local02, fp
1db18     54 A7 62 F6 | 	neg	local01, local02
1db1c     E7 A6 62 FC | 	wrlong	local01, fp
1db20     08 CE 05 F1 | 	add	fp, #8
1db24     E7 38 68 FC | 	wrlong	#28, fp
1db28     08 CE 85 F1 | 	sub	fp, #8
1db2c     2C 00 90 FD | 	jmp	#LR__2511
1db30                 | LR__2510
1db30     08 CE 05 F1 | 	add	fp, #8
1db34     E7 A6 02 FB | 	rdlong	local01, fp
1db38     08 CE 85 F1 | 	sub	fp, #8
1db3c     1E A6 0E F2 | 	cmp	local01, #30 wz
1db40     E7 7A 02 AB |  if_e	rdlong	result1, fp
1db44     1F 7A E6 A4 |  if_e	bitnot	result1, #31
1db48     E7 7A 62 AC |  if_e	wrlong	result1, fp
1db4c     08 CE 05 51 |  if_ne	add	fp, #8
1db50     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1db54     08 CE 85 51 |  if_ne	sub	fp, #8
1db58     E7 50 68 5C |  if_ne	wrlong	#40, fp
1db5c                 | LR__2511
1db5c                 | LR__2512
1db5c     E7 92 02 F6 | 	mov	arg01, fp
1db60     9C FB BE FD | 	call	#_push
1db64     E7 F0 03 F6 | 	mov	ptra, fp
1db68     F2 00 A0 FD | 	call	#popregs_
1db6c                 | _do_negative_ret
1db6c     2D 00 64 FD | 	ret
1db70                 | 
1db70                 | ' 
1db70                 | ' '--------------------------------- MOD (modulo)
1db70                 | ' 
1db70                 | ' sub do_mod 
1db70                 | _do_mod
1db70     04 CA 05 F6 | 	mov	COUNT_, #4
1db74     E8 00 A0 FD | 	call	#pushregs_
1db78     18 F0 07 F1 | 	add	ptra, #24
1db7c     F0 FA BE FD | 	call	#_pop
1db80     3D A7 02 F6 | 	mov	local01, result1
1db84     3E 11 03 F6 | 	mov	muldivb_, result2
1db88     3F 0F 03 F6 | 	mov	muldiva_, result3
1db8c     88 A9 02 F6 | 	mov	local02, muldivb_
1db90     87 AB 02 F6 | 	mov	local03, muldiva_
1db94     D8 FA BE FD | 	call	#_pop
1db98     E7 7A 62 FC | 	wrlong	result1, fp
1db9c     04 CE 05 F1 | 	add	fp, #4
1dba0     E7 7C 62 FC | 	wrlong	result2, fp
1dba4     04 CE 05 F1 | 	add	fp, #4
1dba8     E7 7E 62 FC | 	wrlong	result3, fp
1dbac                 | ' 
1dbac                 | ' t2=pop()
1dbac                 | ' t1=pop()
1dbac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1dbac     08 CE 85 F1 | 	sub	fp, #8
1dbb0     1F 7E 0E F2 | 	cmp	result3, #31 wz
1dbb4     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1dbb8     E7 14 68 AC |  if_e	wrlong	#10, fp
1dbbc     08 CE 05 A1 |  if_e	add	fp, #8
1dbc0     E7 FE 69 AC |  if_e	wrlong	#255, fp
1dbc4     08 CE 85 A1 |  if_e	sub	fp, #8
1dbc8     14 01 90 AD |  if_e	jmp	#LR__2525
1dbcc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1dbcc     08 CE 05 F1 | 	add	fp, #8
1dbd0     E7 10 03 FB | 	rdlong	muldivb_, fp
1dbd4     08 CE 85 F1 | 	sub	fp, #8
1dbd8     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1dbdc     1C 00 90 5D |  if_ne	jmp	#LR__2520
1dbe0     08 CE 05 F1 | 	add	fp, #8
1dbe4     E7 38 68 FC | 	wrlong	#28, fp
1dbe8     08 CE 85 F1 | 	sub	fp, #8
1dbec     E7 92 02 FB | 	rdlong	arg01, fp
1dbf0     00 94 06 F6 | 	mov	arg02, #0
1dbf4     9C 99 B0 FD | 	call	#__system___float_tointeger
1dbf8     E7 7A 62 FC | 	wrlong	result1, fp
1dbfc                 | LR__2520
1dbfc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1dbfc     1E AA 0E F2 | 	cmp	local03, #30 wz
1dc00     14 00 90 5D |  if_ne	jmp	#LR__2521
1dc04     1C AA 06 F6 | 	mov	local03, #28
1dc08     53 93 02 F6 | 	mov	arg01, local01
1dc0c     00 94 06 F6 | 	mov	arg02, #0
1dc10     80 99 B0 FD | 	call	#__system___float_tointeger
1dc14     3D A7 02 F6 | 	mov	local01, result1
1dc18                 | LR__2521
1dc18     08 CE 05 F1 | 	add	fp, #8
1dc1c     E7 AC 02 FB | 	rdlong	local04, fp
1dc20     08 CE 85 F1 | 	sub	fp, #8
1dc24     1D AC 0E F2 | 	cmp	local04, #29 wz
1dc28     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dc2c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dc30     53 AD 12 AD |  if_e	qdiv	local04, local01
1dc34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1dc34     19 AC 62 AD |  if_e	getqy	local04
1dc38     E7 AC 62 AC |  if_e	wrlong	local04, fp
1dc3c     A0 00 90 AD |  if_e	jmp	#LR__2525
1dc40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1dc40     08 CE 05 F1 | 	add	fp, #8
1dc44     E7 AC 02 FB | 	rdlong	local04, fp
1dc48     08 CE 85 F1 | 	sub	fp, #8
1dc4c     1D AC 0E F2 | 	cmp	local04, #29 wz
1dc50     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dc54     20 00 90 5D |  if_ne	jmp	#LR__2522
1dc58     E7 AC 02 FB | 	rdlong	local04, fp
1dc5c     53 AD 12 FD | 	qdiv	local04, local01
1dc60     19 AC 62 FD | 	getqy	local04
1dc64     E7 AC 62 FC | 	wrlong	local04, fp
1dc68     08 CE 05 F1 | 	add	fp, #8
1dc6c     E7 38 68 FC | 	wrlong	#28, fp
1dc70     08 CE 85 F1 | 	sub	fp, #8
1dc74     68 00 90 FD | 	jmp	#LR__2525
1dc78                 | LR__2522
1dc78                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1dc78     08 CE 05 F1 | 	add	fp, #8
1dc7c     E7 AC 02 FB | 	rdlong	local04, fp
1dc80     08 CE 85 F1 | 	sub	fp, #8
1dc84     1C AC 0E F2 | 	cmp	local04, #28 wz
1dc88     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dc8c     14 00 90 5D |  if_ne	jmp	#LR__2523
1dc90     E7 0E 03 FB | 	rdlong	muldiva_, fp
1dc94     53 11 03 F6 | 	mov	muldivb_, local01
1dc98     FA 00 A0 FD | 	call	#divide_
1dc9c     E7 0E 63 FC | 	wrlong	muldiva_, fp
1dca0     3C 00 90 FD | 	jmp	#LR__2525
1dca4                 | LR__2523
1dca4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1dca4     08 CE 05 F1 | 	add	fp, #8
1dca8     E7 AC 02 FB | 	rdlong	local04, fp
1dcac     08 CE 85 F1 | 	sub	fp, #8
1dcb0     1C AC 0E F2 | 	cmp	local04, #28 wz
1dcb4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dcb8     14 00 90 5D |  if_ne	jmp	#LR__2524
1dcbc     E7 0E 03 FB | 	rdlong	muldiva_, fp
1dcc0     53 11 03 F6 | 	mov	muldivb_, local01
1dcc4     FA 00 A0 FD | 	call	#divide_
1dcc8     E7 0E 63 FC | 	wrlong	muldiva_, fp
1dccc     10 00 90 FD | 	jmp	#LR__2525
1dcd0                 | LR__2524
1dcd0     E7 16 68 FC | 	wrlong	#11, fp
1dcd4     08 CE 05 F1 | 	add	fp, #8
1dcd8     E7 FE 69 FC | 	wrlong	#255, fp
1dcdc     08 CE 85 F1 | 	sub	fp, #8
1dce0                 | LR__2525
1dce0     E7 92 02 F6 | 	mov	arg01, fp
1dce4     18 FA BE FD | 	call	#_push
1dce8     E7 F0 03 F6 | 	mov	ptra, fp
1dcec     F2 00 A0 FD | 	call	#popregs_
1dcf0                 | _do_mod_ret
1dcf0     2D 00 64 FD | 	ret
1dcf4                 | 
1dcf4                 | ' 
1dcf4                 | ' '--------------------------------- mul (*)
1dcf4                 | ' 
1dcf4                 | ' sub do_mul
1dcf4                 | _do_mul
1dcf4     07 CA 05 F6 | 	mov	COUNT_, #7
1dcf8     E8 00 A0 FD | 	call	#pushregs_
1dcfc     18 F0 07 F1 | 	add	ptra, #24
1dd00     6C F9 BE FD | 	call	#_pop
1dd04     3D A7 02 F6 | 	mov	local01, result1
1dd08     3E AD 02 F6 | 	mov	local04, result2
1dd0c     3F 95 02 F6 | 	mov	arg02, result3
1dd10     56 A9 02 F6 | 	mov	local02, local04
1dd14     4A AB 02 F6 | 	mov	local03, arg02
1dd18     54 F9 BE FD | 	call	#_pop
1dd1c     3F AF 02 F6 | 	mov	local05, result3
1dd20     E7 7A 62 FC | 	wrlong	result1, fp
1dd24     04 CE 05 F1 | 	add	fp, #4
1dd28     E7 7C 62 FC | 	wrlong	result2, fp
1dd2c     04 CE 05 F1 | 	add	fp, #4
1dd30     E7 AE 62 FC | 	wrlong	local05, fp
1dd34     08 CE 85 F1 | 	sub	fp, #8
1dd38     1D AE 0E F2 | 	cmp	local05, #29 wz
1dd3c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dd40     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dd44     53 AD 02 AD |  if_e	qmul	local04, local01
1dd48                 | ' 
1dd48                 | ' t2=pop()
1dd48                 | ' t1=pop()
1dd48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1dd48     18 B0 62 AD |  if_e	getqx	local06
1dd4c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dd50     F4 01 90 AD |  if_e	jmp	#LR__2536
1dd54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1dd54     08 CE 05 F1 | 	add	fp, #8
1dd58     E7 B0 02 FB | 	rdlong	local06, fp
1dd5c     08 CE 85 F1 | 	sub	fp, #8
1dd60     1D B0 0E F2 | 	cmp	local06, #29 wz
1dd64     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dd68     20 00 90 5D |  if_ne	jmp	#LR__2530
1dd6c     E7 AC 02 FB | 	rdlong	local04, fp
1dd70     53 AD 02 FD | 	qmul	local04, local01
1dd74     18 B0 62 FD | 	getqx	local06
1dd78     E7 B0 62 FC | 	wrlong	local06, fp
1dd7c     08 CE 05 F1 | 	add	fp, #8
1dd80     E7 38 68 FC | 	wrlong	#28, fp
1dd84     08 CE 85 F1 | 	sub	fp, #8
1dd88     BC 01 90 FD | 	jmp	#LR__2536
1dd8c                 | LR__2530
1dd8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1dd8c     08 CE 05 F1 | 	add	fp, #8
1dd90     E7 B0 02 FB | 	rdlong	local06, fp
1dd94     08 CE 85 F1 | 	sub	fp, #8
1dd98     1D B0 0E F2 | 	cmp	local06, #29 wz
1dd9c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dda0     28 00 90 5D |  if_ne	jmp	#LR__2531
1dda4     E7 92 02 FB | 	rdlong	arg01, fp
1dda8     1C 8F B0 FD | 	call	#__system___float_fromuns
1ddac     3D 93 02 F6 | 	mov	arg01, result1
1ddb0     53 95 02 F6 | 	mov	arg02, local01
1ddb4     14 93 B0 FD | 	call	#__system___float_mul
1ddb8     E7 7A 62 FC | 	wrlong	result1, fp
1ddbc     08 CE 05 F1 | 	add	fp, #8
1ddc0     E7 3C 68 FC | 	wrlong	#30, fp
1ddc4     08 CE 85 F1 | 	sub	fp, #8
1ddc8     7C 01 90 FD | 	jmp	#LR__2536
1ddcc                 | LR__2531
1ddcc     08 CE 05 F1 | 	add	fp, #8
1ddd0     E7 B0 02 FB | 	rdlong	local06, fp
1ddd4     08 CE 85 F1 | 	sub	fp, #8
1ddd8     1C B0 0E F2 | 	cmp	local06, #28 wz
1dddc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dde0     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dde4     53 AD 02 AD |  if_e	qmul	local04, local01
1dde8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1dde8     18 B0 62 AD |  if_e	getqx	local06
1ddec     E7 B0 62 AC |  if_e	wrlong	local06, fp
1ddf0     54 01 90 AD |  if_e	jmp	#LR__2536
1ddf4     08 CE 05 F1 | 	add	fp, #8
1ddf8     E7 B0 02 FB | 	rdlong	local06, fp
1ddfc     08 CE 85 F1 | 	sub	fp, #8
1de00     1C B0 0E F2 | 	cmp	local06, #28 wz
1de04     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1de08     E7 AC 02 AB |  if_e	rdlong	local04, fp
1de0c     53 AD 02 AD |  if_e	qmul	local04, local01
1de10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1de10     18 B0 62 AD |  if_e	getqx	local06
1de14     E7 B0 62 AC |  if_e	wrlong	local06, fp
1de18     2C 01 90 AD |  if_e	jmp	#LR__2536
1de1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1de1c     08 CE 05 F1 | 	add	fp, #8
1de20     E7 B0 02 FB | 	rdlong	local06, fp
1de24     08 CE 85 F1 | 	sub	fp, #8
1de28     1C B0 0E F2 | 	cmp	local06, #28 wz
1de2c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1de30     38 00 90 5D |  if_ne	jmp	#LR__2532
1de34     E7 92 02 FB | 	rdlong	arg01, fp
1de38     49 93 52 F6 | 	abs	arg01, arg01 wc
1de3c     1F B2 C6 C9 |  if_b	decod	local07, #31
1de40     00 B2 06 36 |  if_ae	mov	local07, #0
1de44     80 8E B0 FD | 	call	#__system___float_fromuns
1de48     59 7B 62 F5 | 	xor	result1, local07
1de4c     3D 93 02 F6 | 	mov	arg01, result1
1de50     53 95 02 F6 | 	mov	arg02, local01
1de54     74 92 B0 FD | 	call	#__system___float_mul
1de58     E7 7A 62 FC | 	wrlong	result1, fp
1de5c     08 CE 05 F1 | 	add	fp, #8
1de60     E7 3C 68 FC | 	wrlong	#30, fp
1de64     08 CE 85 F1 | 	sub	fp, #8
1de68     DC 00 90 FD | 	jmp	#LR__2536
1de6c                 | LR__2532
1de6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1de6c     08 CE 05 F1 | 	add	fp, #8
1de70     E7 B0 02 FB | 	rdlong	local06, fp
1de74     08 CE 85 F1 | 	sub	fp, #8
1de78     1E B0 0E F2 | 	cmp	local06, #30 wz
1de7c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1de80     20 00 90 5D |  if_ne	jmp	#LR__2533
1de84     E7 B0 02 FB | 	rdlong	local06, fp
1de88     53 93 02 F6 | 	mov	arg01, local01
1de8c     38 8E B0 FD | 	call	#__system___float_fromuns
1de90     3D 95 02 F6 | 	mov	arg02, result1
1de94     58 93 02 F6 | 	mov	arg01, local06
1de98     30 92 B0 FD | 	call	#__system___float_mul
1de9c     E7 7A 62 FC | 	wrlong	result1, fp
1dea0     A4 00 90 FD | 	jmp	#LR__2536
1dea4                 | LR__2533
1dea4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1dea4     08 CE 05 F1 | 	add	fp, #8
1dea8     E7 B0 02 FB | 	rdlong	local06, fp
1deac     08 CE 85 F1 | 	sub	fp, #8
1deb0     1E B0 0E F2 | 	cmp	local06, #30 wz
1deb4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1deb8     2C 00 90 5D |  if_ne	jmp	#LR__2534
1debc     E7 B0 02 FB | 	rdlong	local06, fp
1dec0     53 93 52 F6 | 	abs	arg01, local01 wc
1dec4     1F B2 C6 C9 |  if_b	decod	local07, #31
1dec8     00 B2 06 36 |  if_ae	mov	local07, #0
1decc     F8 8D B0 FD | 	call	#__system___float_fromuns
1ded0     59 7B 62 F5 | 	xor	result1, local07
1ded4     3D 95 02 F6 | 	mov	arg02, result1
1ded8     58 93 02 F6 | 	mov	arg01, local06
1dedc     EC 91 B0 FD | 	call	#__system___float_mul
1dee0     E7 7A 62 FC | 	wrlong	result1, fp
1dee4     60 00 90 FD | 	jmp	#LR__2536
1dee8                 | LR__2534
1dee8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1dee8     08 CE 05 F1 | 	add	fp, #8
1deec     E7 B0 02 FB | 	rdlong	local06, fp
1def0     08 CE 85 F1 | 	sub	fp, #8
1def4     1E B0 0E F2 | 	cmp	local06, #30 wz
1def8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1defc     14 00 90 5D |  if_ne	jmp	#LR__2535
1df00     E7 92 02 FB | 	rdlong	arg01, fp
1df04     53 95 02 F6 | 	mov	arg02, local01
1df08     C0 91 B0 FD | 	call	#__system___float_mul
1df0c     E7 7A 62 FC | 	wrlong	result1, fp
1df10     34 00 90 FD | 	jmp	#LR__2536
1df14                 | LR__2535
1df14                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1df14     08 CE 05 F1 | 	add	fp, #8
1df18     E7 B0 02 FB | 	rdlong	local06, fp
1df1c     08 CE 85 F1 | 	sub	fp, #8
1df20     1F B0 0E F2 | 	cmp	local06, #31 wz
1df24     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1df28     E7 10 68 AC |  if_e	wrlong	#8, fp
1df2c     08 CE 05 A1 |  if_e	add	fp, #8
1df30     E7 FE 69 AC |  if_e	wrlong	#255, fp
1df34     08 CE 85 A1 |  if_e	sub	fp, #8
1df38     E7 12 68 5C |  if_ne	wrlong	#9, fp
1df3c     08 CE 05 51 |  if_ne	add	fp, #8
1df40     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1df44     08 CE 85 51 |  if_ne	sub	fp, #8
1df48                 | LR__2536
1df48     E7 92 02 F6 | 	mov	arg01, fp
1df4c     B0 F7 BE FD | 	call	#_push
1df50     E7 F0 03 F6 | 	mov	ptra, fp
1df54     F2 00 A0 FD | 	call	#popregs_
1df58                 | _do_mul_ret
1df58     2D 00 64 FD | 	ret
1df5c                 | 
1df5c                 | ' 
1df5c                 | ' '--------------------------------- not equal (<>)
1df5c                 | ' 
1df5c                 | ' sub do_ne
1df5c                 | _do_ne
1df5c     07 CA 05 F6 | 	mov	COUNT_, #7
1df60     E8 00 A0 FD | 	call	#pushregs_
1df64     18 F0 07 F1 | 	add	ptra, #24
1df68     04 F7 BE FD | 	call	#_pop
1df6c     3D A7 02 F6 | 	mov	local01, result1
1df70     3E AD 02 F6 | 	mov	local04, result2
1df74     3F AF 02 F6 | 	mov	local05, result3
1df78     56 A9 02 F6 | 	mov	local02, local04
1df7c     57 AB 02 F6 | 	mov	local03, local05
1df80     EC F6 BE FD | 	call	#_pop
1df84     3F AF 02 F6 | 	mov	local05, result3
1df88     E7 7A 62 FC | 	wrlong	result1, fp
1df8c     04 CE 05 F1 | 	add	fp, #4
1df90     E7 7C 62 FC | 	wrlong	result2, fp
1df94     04 CE 05 F1 | 	add	fp, #4
1df98     E7 AE 62 FC | 	wrlong	local05, fp
1df9c                 | ' 
1df9c                 | ' t2=pop()
1df9c                 | ' t1=pop()
1df9c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1df9c     08 CE 85 F1 | 	sub	fp, #8
1dfa0     1F AE 0E F2 | 	cmp	local05, #31 wz
1dfa4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1dfa8     20 00 90 5D |  if_ne	jmp	#LR__2540
1dfac     00 B0 06 F6 | 	mov	local06, #0
1dfb0     E7 92 02 FB | 	rdlong	arg01, fp
1dfb4     53 95 02 F6 | 	mov	arg02, local01
1dfb8     68 6A B0 FD | 	call	#__system___string_cmp
1dfbc     00 7A 0E F2 | 	cmp	result1, #0 wz
1dfc0     00 B0 26 56 |  if_ne	not	local06, #0
1dfc4     E7 B0 62 FC | 	wrlong	local06, fp
1dfc8     04 03 90 FD | 	jmp	#LR__2553
1dfcc                 | LR__2540
1dfcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1dfcc     08 CE 05 F1 | 	add	fp, #8
1dfd0     E7 B0 02 FB | 	rdlong	local06, fp
1dfd4     08 CE 85 F1 | 	sub	fp, #8
1dfd8     1E B0 0E F2 | 	cmp	local06, #30 wz
1dfdc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dfe0     24 00 90 5D |  if_ne	jmp	#LR__2541
1dfe4     00 B0 06 F6 | 	mov	local06, #0
1dfe8     E7 92 02 FB | 	rdlong	arg01, fp
1dfec     53 95 02 F6 | 	mov	arg02, local01
1dff0     01 96 06 F6 | 	mov	arg03, #1
1dff4     08 95 B0 FD | 	call	#__system___float_cmp
1dff8     00 7A 0E F2 | 	cmp	result1, #0 wz
1dffc     00 B0 26 56 |  if_ne	not	local06, #0
1e000     E7 B0 62 FC | 	wrlong	local06, fp
1e004     C8 02 90 FD | 	jmp	#LR__2553
1e008                 | LR__2541
1e008                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e008     08 CE 05 F1 | 	add	fp, #8
1e00c     E7 B0 02 FB | 	rdlong	local06, fp
1e010     08 CE 85 F1 | 	sub	fp, #8
1e014     1E B0 0E F2 | 	cmp	local06, #30 wz
1e018     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e01c     3C 00 90 5D |  if_ne	jmp	#LR__2542
1e020     00 B0 06 F6 | 	mov	local06, #0
1e024     E7 AC 02 FB | 	rdlong	local04, fp
1e028     53 93 52 F6 | 	abs	arg01, local01 wc
1e02c     1F B2 C6 C9 |  if_b	decod	local07, #31
1e030     00 B2 06 36 |  if_ae	mov	local07, #0
1e034     90 8C B0 FD | 	call	#__system___float_fromuns
1e038     59 7B 62 F5 | 	xor	result1, local07
1e03c     3D 95 02 F6 | 	mov	arg02, result1
1e040     56 93 02 F6 | 	mov	arg01, local04
1e044     01 96 06 F6 | 	mov	arg03, #1
1e048     B4 94 B0 FD | 	call	#__system___float_cmp
1e04c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e050     00 B0 26 56 |  if_ne	not	local06, #0
1e054     E7 B0 62 FC | 	wrlong	local06, fp
1e058     74 02 90 FD | 	jmp	#LR__2553
1e05c                 | LR__2542
1e05c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e05c     08 CE 05 F1 | 	add	fp, #8
1e060     E7 B0 02 FB | 	rdlong	local06, fp
1e064     08 CE 85 F1 | 	sub	fp, #8
1e068     1E B0 0E F2 | 	cmp	local06, #30 wz
1e06c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e070     30 00 90 5D |  if_ne	jmp	#LR__2543
1e074     00 B0 06 F6 | 	mov	local06, #0
1e078     E7 AC 02 FB | 	rdlong	local04, fp
1e07c     53 93 02 F6 | 	mov	arg01, local01
1e080     44 8C B0 FD | 	call	#__system___float_fromuns
1e084     3D 95 02 F6 | 	mov	arg02, result1
1e088     56 93 02 F6 | 	mov	arg01, local04
1e08c     01 96 06 F6 | 	mov	arg03, #1
1e090     6C 94 B0 FD | 	call	#__system___float_cmp
1e094     00 7A 0E F2 | 	cmp	result1, #0 wz
1e098     00 B0 26 56 |  if_ne	not	local06, #0
1e09c     E7 B0 62 FC | 	wrlong	local06, fp
1e0a0     2C 02 90 FD | 	jmp	#LR__2553
1e0a4                 | LR__2543
1e0a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e0a4     08 CE 05 F1 | 	add	fp, #8
1e0a8     E7 B0 02 FB | 	rdlong	local06, fp
1e0ac     08 CE 85 F1 | 	sub	fp, #8
1e0b0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e0b4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e0b8     3C 00 90 5D |  if_ne	jmp	#LR__2544
1e0bc     00 B0 06 F6 | 	mov	local06, #0
1e0c0     E7 92 02 FB | 	rdlong	arg01, fp
1e0c4     49 93 52 F6 | 	abs	arg01, arg01 wc
1e0c8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e0cc     00 B2 06 36 |  if_ae	mov	local07, #0
1e0d0     F4 8B B0 FD | 	call	#__system___float_fromuns
1e0d4     59 7B 62 F5 | 	xor	result1, local07
1e0d8     3D 93 02 F6 | 	mov	arg01, result1
1e0dc     53 95 02 F6 | 	mov	arg02, local01
1e0e0     01 96 06 F6 | 	mov	arg03, #1
1e0e4     18 94 B0 FD | 	call	#__system___float_cmp
1e0e8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e0ec     00 B0 26 56 |  if_ne	not	local06, #0
1e0f0     E7 B0 62 FC | 	wrlong	local06, fp
1e0f4     D8 01 90 FD | 	jmp	#LR__2553
1e0f8                 | LR__2544
1e0f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e0f8     08 CE 05 F1 | 	add	fp, #8
1e0fc     E7 B0 02 FB | 	rdlong	local06, fp
1e100     08 CE 85 F1 | 	sub	fp, #8
1e104     1C B0 0E F2 | 	cmp	local06, #28 wz
1e108     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e10c     18 00 90 5D |  if_ne	jmp	#LR__2545
1e110     00 B0 06 F6 | 	mov	local06, #0
1e114     E7 AC 02 FB | 	rdlong	local04, fp
1e118     53 AD 0A F2 | 	cmp	local04, local01 wz
1e11c     01 B0 66 56 |  if_ne	neg	local06, #1
1e120     E7 B0 62 FC | 	wrlong	local06, fp
1e124     A8 01 90 FD | 	jmp	#LR__2553
1e128                 | LR__2545
1e128                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e128     08 CE 05 F1 | 	add	fp, #8
1e12c     E7 B0 02 FB | 	rdlong	local06, fp
1e130     08 CE 85 F1 | 	sub	fp, #8
1e134     1C B0 0E F2 | 	cmp	local06, #28 wz
1e138     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e13c     18 00 90 5D |  if_ne	jmp	#LR__2546
1e140     00 B0 06 F6 | 	mov	local06, #0
1e144     E7 AC 02 FB | 	rdlong	local04, fp
1e148     53 AD 0A F2 | 	cmp	local04, local01 wz
1e14c     01 B0 66 56 |  if_ne	neg	local06, #1
1e150     E7 B0 62 FC | 	wrlong	local06, fp
1e154     78 01 90 FD | 	jmp	#LR__2553
1e158                 | LR__2546
1e158                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e158     08 CE 05 F1 | 	add	fp, #8
1e15c     E7 B0 02 FB | 	rdlong	local06, fp
1e160     08 CE 85 F1 | 	sub	fp, #8
1e164     1D B0 0E F2 | 	cmp	local06, #29 wz
1e168     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e16c     2C 00 90 5D |  if_ne	jmp	#LR__2547
1e170     00 B0 06 F6 | 	mov	local06, #0
1e174     E7 92 02 FB | 	rdlong	arg01, fp
1e178     4C 8B B0 FD | 	call	#__system___float_fromuns
1e17c     3D 93 02 F6 | 	mov	arg01, result1
1e180     53 95 02 F6 | 	mov	arg02, local01
1e184     01 96 06 F6 | 	mov	arg03, #1
1e188     74 93 B0 FD | 	call	#__system___float_cmp
1e18c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e190     00 B0 26 56 |  if_ne	not	local06, #0
1e194     E7 B0 62 FC | 	wrlong	local06, fp
1e198     34 01 90 FD | 	jmp	#LR__2553
1e19c                 | LR__2547
1e19c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e19c     08 CE 05 F1 | 	add	fp, #8
1e1a0     E7 B0 02 FB | 	rdlong	local06, fp
1e1a4     08 CE 85 F1 | 	sub	fp, #8
1e1a8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e1ac     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e1b0     18 00 90 5D |  if_ne	jmp	#LR__2548
1e1b4     00 B0 06 F6 | 	mov	local06, #0
1e1b8     E7 AC 02 FB | 	rdlong	local04, fp
1e1bc     53 AD 0A F2 | 	cmp	local04, local01 wz
1e1c0     01 B0 66 56 |  if_ne	neg	local06, #1
1e1c4     E7 B0 62 FC | 	wrlong	local06, fp
1e1c8     04 01 90 FD | 	jmp	#LR__2553
1e1cc                 | LR__2548
1e1cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e1cc     08 CE 05 F1 | 	add	fp, #8
1e1d0     E7 B0 02 FB | 	rdlong	local06, fp
1e1d4     08 CE 85 F1 | 	sub	fp, #8
1e1d8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e1dc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e1e0     18 00 90 5D |  if_ne	jmp	#LR__2549
1e1e4     00 B0 06 F6 | 	mov	local06, #0
1e1e8     E7 AC 02 FB | 	rdlong	local04, fp
1e1ec     53 AD 0A F2 | 	cmp	local04, local01 wz
1e1f0     01 B0 66 56 |  if_ne	neg	local06, #1
1e1f4     E7 B0 62 FC | 	wrlong	local06, fp
1e1f8     D4 00 90 FD | 	jmp	#LR__2553
1e1fc                 | LR__2549
1e1fc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e1fc     08 CE 05 F1 | 	add	fp, #8
1e200     E7 B0 02 FB | 	rdlong	local06, fp
1e204     08 CE 85 F1 | 	sub	fp, #8
1e208     2B B0 0E F2 | 	cmp	local06, #43 wz
1e20c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e210     28 00 90 5D |  if_ne	jmp	#LR__2550
1e214     00 B0 06 F6 | 	mov	local06, #0
1e218     E7 92 02 FB | 	rdlong	arg01, fp
1e21c     C0 F5 BE FD | 	call	#_convertstring
1e220     3D 93 02 F6 | 	mov	arg01, result1
1e224     53 95 02 F6 | 	mov	arg02, local01
1e228     F8 67 B0 FD | 	call	#__system___string_cmp
1e22c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e230     00 B0 26 56 |  if_ne	not	local06, #0
1e234     E7 B0 62 FC | 	wrlong	local06, fp
1e238     94 00 90 FD | 	jmp	#LR__2553
1e23c                 | LR__2550
1e23c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1e23c     08 CE 05 F1 | 	add	fp, #8
1e240     E7 B0 02 FB | 	rdlong	local06, fp
1e244     08 CE 85 F1 | 	sub	fp, #8
1e248     1F B0 0E F2 | 	cmp	local06, #31 wz
1e24c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e250     2C 00 90 5D |  if_ne	jmp	#LR__2551
1e254     00 B0 06 F6 | 	mov	local06, #0
1e258     E7 AC 02 FB | 	rdlong	local04, fp
1e25c     53 93 02 F6 | 	mov	arg01, local01
1e260     7C F5 BE FD | 	call	#_convertstring
1e264     3D 95 02 F6 | 	mov	arg02, result1
1e268     56 93 02 F6 | 	mov	arg01, local04
1e26c     B4 67 B0 FD | 	call	#__system___string_cmp
1e270     00 7A 0E F2 | 	cmp	result1, #0 wz
1e274     00 B0 26 56 |  if_ne	not	local06, #0
1e278     E7 B0 62 FC | 	wrlong	local06, fp
1e27c     50 00 90 FD | 	jmp	#LR__2553
1e280                 | LR__2551
1e280                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1e280     08 CE 05 F1 | 	add	fp, #8
1e284     E7 B0 02 FB | 	rdlong	local06, fp
1e288     08 CE 85 F1 | 	sub	fp, #8
1e28c     2B B0 0E F2 | 	cmp	local06, #43 wz
1e290     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e294     34 00 90 5D |  if_ne	jmp	#LR__2552
1e298     00 B0 06 F6 | 	mov	local06, #0
1e29c     E7 92 02 FB | 	rdlong	arg01, fp
1e2a0     3C F5 BE FD | 	call	#_convertstring
1e2a4     3D AD 02 F6 | 	mov	local04, result1
1e2a8     53 93 02 F6 | 	mov	arg01, local01
1e2ac     30 F5 BE FD | 	call	#_convertstring
1e2b0     3D 95 02 F6 | 	mov	arg02, result1
1e2b4     56 93 02 F6 | 	mov	arg01, local04
1e2b8     68 67 B0 FD | 	call	#__system___string_cmp
1e2bc     00 7A 0E F2 | 	cmp	result1, #0 wz
1e2c0     00 B0 26 56 |  if_ne	not	local06, #0
1e2c4     E7 B0 62 FC | 	wrlong	local06, fp
1e2c8     04 00 90 FD | 	jmp	#LR__2553
1e2cc                 | LR__2552
1e2cc     E7 00 68 FC | 	wrlong	#0, fp
1e2d0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e2d0                 | LR__2553
1e2d0     08 CE 05 F1 | 	add	fp, #8
1e2d4     E7 38 68 FC | 	wrlong	#28, fp
1e2d8     08 CE 85 F1 | 	sub	fp, #8
1e2dc     E7 92 02 F6 | 	mov	arg01, fp
1e2e0     1C F4 BE FD | 	call	#_push
1e2e4     E7 F0 03 F6 | 	mov	ptra, fp
1e2e8     F2 00 A0 FD | 	call	#popregs_
1e2ec                 | _do_ne_ret
1e2ec     2D 00 64 FD | 	ret
1e2f0                 | 
1e2f0                 | ' 
1e2f0                 | ' '--------------------------------- OR
1e2f0                 | ' 
1e2f0                 | ' sub do_or 
1e2f0                 | _do_or
1e2f0     05 CA 05 F6 | 	mov	COUNT_, #5
1e2f4     E8 00 A0 FD | 	call	#pushregs_
1e2f8     18 F0 07 F1 | 	add	ptra, #24
1e2fc     70 F3 BE FD | 	call	#_pop
1e300     3D A7 02 F6 | 	mov	local01, result1
1e304     3E 93 02 F6 | 	mov	arg01, result2
1e308     3F AD 02 F6 | 	mov	local04, result3
1e30c     49 A9 02 F6 | 	mov	local02, arg01
1e310     56 AB 02 F6 | 	mov	local03, local04
1e314     58 F3 BE FD | 	call	#_pop
1e318     3F AF 02 F6 | 	mov	local05, result3
1e31c     E7 7A 62 FC | 	wrlong	result1, fp
1e320     04 CE 05 F1 | 	add	fp, #4
1e324     E7 7C 62 FC | 	wrlong	result2, fp
1e328     04 CE 05 F1 | 	add	fp, #4
1e32c     E7 AE 62 FC | 	wrlong	local05, fp
1e330                 | ' 
1e330                 | ' t2=pop()
1e330                 | ' t1=pop()
1e330                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e330     08 CE 85 F1 | 	sub	fp, #8
1e334     1C AE 0E F2 | 	cmp	local05, #28 wz
1e338     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e33c     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e340     08 CE 05 A1 |  if_e	add	fp, #8
1e344     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e348     08 CE 85 A1 |  if_e	sub	fp, #8
1e34c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e34c     1C AA 0E F2 | 	cmp	local03, #28 wz
1e350     1D AA 06 A6 |  if_e	mov	local03, #29
1e354                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1e354     08 CE 05 F1 | 	add	fp, #8
1e358     E7 AE 02 FB | 	rdlong	local05, fp
1e35c     08 CE 85 F1 | 	sub	fp, #8
1e360     1F AE 0E F2 | 	cmp	local05, #31 wz
1e364     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e368     08 CE 05 51 |  if_ne	add	fp, #8
1e36c     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e370     08 CE 85 51 |  if_ne	sub	fp, #8
1e374     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e378     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e37c     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e380     08 CE 05 A1 |  if_e	add	fp, #8
1e384     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e388     08 CE 85 A1 |  if_e	sub	fp, #8
1e38c     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e390     53 AF 42 55 |  if_ne	or	local05, local01
1e394     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e398     E7 92 02 F6 | 	mov	arg01, fp
1e39c     60 F3 BE FD | 	call	#_push
1e3a0     E7 F0 03 F6 | 	mov	ptra, fp
1e3a4     F2 00 A0 FD | 	call	#popregs_
1e3a8                 | _do_or_ret
1e3a8     2D 00 64 FD | 	ret
1e3ac                 | 
1e3ac                 | ' 
1e3ac                 | ' '--------------------------------- plus (+)
1e3ac                 | ' 
1e3ac                 | ' sub do_plus 
1e3ac                 | _do_plus
1e3ac     07 CA 05 F6 | 	mov	COUNT_, #7
1e3b0     E8 00 A0 FD | 	call	#pushregs_
1e3b4     18 F0 07 F1 | 	add	ptra, #24
1e3b8     B4 F2 BE FD | 	call	#_pop
1e3bc     3D A7 02 F6 | 	mov	local01, result1
1e3c0     3E AD 02 F6 | 	mov	local04, result2
1e3c4     3F AF 02 F6 | 	mov	local05, result3
1e3c8     56 A9 02 F6 | 	mov	local02, local04
1e3cc     57 AB 02 F6 | 	mov	local03, local05
1e3d0     9C F2 BE FD | 	call	#_pop
1e3d4     3F AF 02 F6 | 	mov	local05, result3
1e3d8     E7 7A 62 FC | 	wrlong	result1, fp
1e3dc     04 CE 05 F1 | 	add	fp, #4
1e3e0     E7 7C 62 FC | 	wrlong	result2, fp
1e3e4     04 CE 05 F1 | 	add	fp, #4
1e3e8     E7 AE 62 FC | 	wrlong	local05, fp
1e3ec                 | ' 
1e3ec                 | ' t2=pop()
1e3ec                 | ' t1=pop()
1e3ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1e3ec     57 B1 02 F6 | 	mov	local06, local05
1e3f0     08 CE 85 F1 | 	sub	fp, #8
1e3f4     1D B0 0E F2 | 	cmp	local06, #29 wz
1e3f8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e3fc     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e400     53 B1 02 A1 |  if_e	add	local06, local01
1e404     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e408     0C 03 90 AD |  if_e	jmp	#LR__2572
1e40c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1e40c     08 CE 05 F1 | 	add	fp, #8
1e410     E7 B0 02 FB | 	rdlong	local06, fp
1e414     08 CE 85 F1 | 	sub	fp, #8
1e418     1D B0 0E F2 | 	cmp	local06, #29 wz
1e41c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e420     1C 00 90 5D |  if_ne	jmp	#LR__2560
1e424     E7 B0 02 FB | 	rdlong	local06, fp
1e428     53 B1 02 F1 | 	add	local06, local01
1e42c     E7 B0 62 FC | 	wrlong	local06, fp
1e430     08 CE 05 F1 | 	add	fp, #8
1e434     E7 38 68 FC | 	wrlong	#28, fp
1e438     08 CE 85 F1 | 	sub	fp, #8
1e43c     D8 02 90 FD | 	jmp	#LR__2572
1e440                 | LR__2560
1e440                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e440     08 CE 05 F1 | 	add	fp, #8
1e444     E7 B0 02 FB | 	rdlong	local06, fp
1e448     08 CE 85 F1 | 	sub	fp, #8
1e44c     1D B0 0E F2 | 	cmp	local06, #29 wz
1e450     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e454     28 00 90 5D |  if_ne	jmp	#LR__2561
1e458     E7 92 02 FB | 	rdlong	arg01, fp
1e45c     68 88 B0 FD | 	call	#__system___float_fromuns
1e460     3D 93 02 F6 | 	mov	arg01, result1
1e464     53 95 02 F6 | 	mov	arg02, local01
1e468     90 88 B0 FD | 	call	#__system___float_add
1e46c     E7 7A 62 FC | 	wrlong	result1, fp
1e470     08 CE 05 F1 | 	add	fp, #8
1e474     E7 3C 68 FC | 	wrlong	#30, fp
1e478     08 CE 85 F1 | 	sub	fp, #8
1e47c     98 02 90 FD | 	jmp	#LR__2572
1e480                 | LR__2561
1e480                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1e480     08 CE 05 F1 | 	add	fp, #8
1e484     E7 B0 02 FB | 	rdlong	local06, fp
1e488     08 CE 85 F1 | 	sub	fp, #8
1e48c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e490     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e494     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e498     53 B1 02 A1 |  if_e	add	local06, local01
1e49c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e4a0     74 02 90 AD |  if_e	jmp	#LR__2572
1e4a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1e4a4     08 CE 05 F1 | 	add	fp, #8
1e4a8     E7 B0 02 FB | 	rdlong	local06, fp
1e4ac     08 CE 85 F1 | 	sub	fp, #8
1e4b0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e4b4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e4b8     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e4bc     53 B1 02 A1 |  if_e	add	local06, local01
1e4c0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e4c4     50 02 90 AD |  if_e	jmp	#LR__2572
1e4c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e4c8     08 CE 05 F1 | 	add	fp, #8
1e4cc     E7 B0 02 FB | 	rdlong	local06, fp
1e4d0     08 CE 85 F1 | 	sub	fp, #8
1e4d4     1C B0 0E F2 | 	cmp	local06, #28 wz
1e4d8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e4dc     38 00 90 5D |  if_ne	jmp	#LR__2562
1e4e0     E7 92 02 FB | 	rdlong	arg01, fp
1e4e4     49 93 52 F6 | 	abs	arg01, arg01 wc
1e4e8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e4ec     00 B2 06 36 |  if_ae	mov	local07, #0
1e4f0     D4 87 B0 FD | 	call	#__system___float_fromuns
1e4f4     59 7B 62 F5 | 	xor	result1, local07
1e4f8     3D 93 02 F6 | 	mov	arg01, result1
1e4fc     53 95 02 F6 | 	mov	arg02, local01
1e500     F8 87 B0 FD | 	call	#__system___float_add
1e504     E7 7A 62 FC | 	wrlong	result1, fp
1e508     08 CE 05 F1 | 	add	fp, #8
1e50c     E7 3C 68 FC | 	wrlong	#30, fp
1e510     08 CE 85 F1 | 	sub	fp, #8
1e514     00 02 90 FD | 	jmp	#LR__2572
1e518                 | LR__2562
1e518                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1e518     08 CE 05 F1 | 	add	fp, #8
1e51c     E7 B0 02 FB | 	rdlong	local06, fp
1e520     08 CE 85 F1 | 	sub	fp, #8
1e524     1E B0 0E F2 | 	cmp	local06, #30 wz
1e528     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e52c     20 00 90 5D |  if_ne	jmp	#LR__2563
1e530     E7 B0 02 FB | 	rdlong	local06, fp
1e534     53 93 02 F6 | 	mov	arg01, local01
1e538     8C 87 B0 FD | 	call	#__system___float_fromuns
1e53c     3D 95 02 F6 | 	mov	arg02, result1
1e540     58 93 02 F6 | 	mov	arg01, local06
1e544     B4 87 B0 FD | 	call	#__system___float_add
1e548     E7 7A 62 FC | 	wrlong	result1, fp
1e54c     C8 01 90 FD | 	jmp	#LR__2572
1e550                 | LR__2563
1e550                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1e550     08 CE 05 F1 | 	add	fp, #8
1e554     E7 B0 02 FB | 	rdlong	local06, fp
1e558     08 CE 85 F1 | 	sub	fp, #8
1e55c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e560     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e564     2C 00 90 5D |  if_ne	jmp	#LR__2564
1e568     E7 B0 02 FB | 	rdlong	local06, fp
1e56c     53 93 52 F6 | 	abs	arg01, local01 wc
1e570     1F B2 C6 C9 |  if_b	decod	local07, #31
1e574     00 B2 06 36 |  if_ae	mov	local07, #0
1e578     4C 87 B0 FD | 	call	#__system___float_fromuns
1e57c     59 7B 62 F5 | 	xor	result1, local07
1e580     3D 95 02 F6 | 	mov	arg02, result1
1e584     58 93 02 F6 | 	mov	arg01, local06
1e588     70 87 B0 FD | 	call	#__system___float_add
1e58c     E7 7A 62 FC | 	wrlong	result1, fp
1e590     84 01 90 FD | 	jmp	#LR__2572
1e594                 | LR__2564
1e594                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1e594     08 CE 05 F1 | 	add	fp, #8
1e598     E7 B0 02 FB | 	rdlong	local06, fp
1e59c     08 CE 85 F1 | 	sub	fp, #8
1e5a0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e5a4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e5a8     14 00 90 5D |  if_ne	jmp	#LR__2565
1e5ac     E7 92 02 FB | 	rdlong	arg01, fp
1e5b0     53 95 02 F6 | 	mov	arg02, local01
1e5b4     44 87 B0 FD | 	call	#__system___float_add
1e5b8     E7 7A 62 FC | 	wrlong	result1, fp
1e5bc     58 01 90 FD | 	jmp	#LR__2572
1e5c0                 | LR__2565
1e5c0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e5c0     08 CE 05 F1 | 	add	fp, #8
1e5c4     E7 B0 02 FB | 	rdlong	local06, fp
1e5c8     08 CE 85 F1 | 	sub	fp, #8
1e5cc     1F B0 0E F2 | 	cmp	local06, #31 wz
1e5d0     18 00 90 5D |  if_ne	jmp	#LR__2566
1e5d4     1F AA 0E F2 | 	cmp	local03, #31 wz
1e5d8     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e5dc     08 CE 05 51 |  if_ne	add	fp, #8
1e5e0     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e5e4     08 CE 85 51 |  if_ne	sub	fp, #8
1e5e8     2C 01 90 5D |  if_ne	jmp	#LR__2572
1e5ec                 | LR__2566
1e5ec                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e5ec     1F AA 0E F2 | 	cmp	local03, #31 wz
1e5f0     24 00 90 5D |  if_ne	jmp	#LR__2567
1e5f4     08 CE 05 F1 | 	add	fp, #8
1e5f8     E7 B0 02 FB | 	rdlong	local06, fp
1e5fc     08 CE 85 F1 | 	sub	fp, #8
1e600     1F B0 0E F2 | 	cmp	local06, #31 wz
1e604     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e608     08 CE 05 51 |  if_ne	add	fp, #8
1e60c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e610     08 CE 85 51 |  if_ne	sub	fp, #8
1e614     00 01 90 5D |  if_ne	jmp	#LR__2572
1e618                 | LR__2567
1e618                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1e618     08 CE 05 F1 | 	add	fp, #8
1e61c     E7 B0 02 FB | 	rdlong	local06, fp
1e620     08 CE 85 F1 | 	sub	fp, #8
1e624     1F B0 0E F2 | 	cmp	local06, #31 wz
1e628     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e62c     14 00 90 5D |  if_ne	jmp	#LR__2568
1e630     E7 92 02 FB | 	rdlong	arg01, fp
1e634     53 95 02 F6 | 	mov	arg02, local01
1e638     1C 64 B0 FD | 	call	#__system___string_concat
1e63c     E7 7A 62 FC | 	wrlong	result1, fp
1e640     D4 00 90 FD | 	jmp	#LR__2572
1e644                 | LR__2568
1e644                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e644     08 CE 05 F1 | 	add	fp, #8
1e648     E7 B0 02 FB | 	rdlong	local06, fp
1e64c     08 CE 85 F1 | 	sub	fp, #8
1e650     2B B0 0E F2 | 	cmp	local06, #43 wz
1e654     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e658     28 00 90 5D |  if_ne	jmp	#LR__2569
1e65c     E7 92 02 FB | 	rdlong	arg01, fp
1e660     7C F1 BE FD | 	call	#_convertstring
1e664     3D 93 02 F6 | 	mov	arg01, result1
1e668     53 95 02 F6 | 	mov	arg02, local01
1e66c     E8 63 B0 FD | 	call	#__system___string_concat
1e670     E7 7A 62 FC | 	wrlong	result1, fp
1e674     08 CE 05 F1 | 	add	fp, #8
1e678     E7 3E 68 FC | 	wrlong	#31, fp
1e67c     08 CE 85 F1 | 	sub	fp, #8
1e680     94 00 90 FD | 	jmp	#LR__2572
1e684                 | LR__2569
1e684                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1e684     08 CE 05 F1 | 	add	fp, #8
1e688     E7 B0 02 FB | 	rdlong	local06, fp
1e68c     08 CE 85 F1 | 	sub	fp, #8
1e690     1F B0 0E F2 | 	cmp	local06, #31 wz
1e694     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e698     20 00 90 5D |  if_ne	jmp	#LR__2570
1e69c     E7 B0 02 FB | 	rdlong	local06, fp
1e6a0     53 93 02 F6 | 	mov	arg01, local01
1e6a4     38 F1 BE FD | 	call	#_convertstring
1e6a8     3D 95 02 F6 | 	mov	arg02, result1
1e6ac     58 93 02 F6 | 	mov	arg01, local06
1e6b0     A4 63 B0 FD | 	call	#__system___string_concat
1e6b4     E7 7A 62 FC | 	wrlong	result1, fp
1e6b8     5C 00 90 FD | 	jmp	#LR__2572
1e6bc                 | LR__2570
1e6bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1e6bc     08 CE 05 F1 | 	add	fp, #8
1e6c0     E7 B0 02 FB | 	rdlong	local06, fp
1e6c4     08 CE 85 F1 | 	sub	fp, #8
1e6c8     2B B0 0E F2 | 	cmp	local06, #43 wz
1e6cc     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e6d0     34 00 90 5D |  if_ne	jmp	#LR__2571
1e6d4     E7 92 02 FB | 	rdlong	arg01, fp
1e6d8     04 F1 BE FD | 	call	#_convertstring
1e6dc     3D B1 02 F6 | 	mov	local06, result1
1e6e0     53 93 02 F6 | 	mov	arg01, local01
1e6e4     F8 F0 BE FD | 	call	#_convertstring
1e6e8     3D 95 02 F6 | 	mov	arg02, result1
1e6ec     58 93 02 F6 | 	mov	arg01, local06
1e6f0     64 63 B0 FD | 	call	#__system___string_concat
1e6f4     E7 7A 62 FC | 	wrlong	result1, fp
1e6f8     08 CE 05 F1 | 	add	fp, #8
1e6fc     E7 3E 68 FC | 	wrlong	#31, fp
1e700     08 CE 85 F1 | 	sub	fp, #8
1e704     10 00 90 FD | 	jmp	#LR__2572
1e708                 | LR__2571
1e708     E7 08 68 FC | 	wrlong	#4, fp
1e70c     08 CE 05 F1 | 	add	fp, #8
1e710     E7 FE 69 FC | 	wrlong	#255, fp
1e714     08 CE 85 F1 | 	sub	fp, #8
1e718                 | LR__2572
1e718     E7 92 02 F6 | 	mov	arg01, fp
1e71c     E0 EF BE FD | 	call	#_push
1e720     E7 F0 03 F6 | 	mov	ptra, fp
1e724     F2 00 A0 FD | 	call	#popregs_
1e728                 | _do_plus_ret
1e728     2D 00 64 FD | 	ret
1e72c                 | 
1e72c                 | ' 
1e72c                 | ' '--------------------------------- power (^)
1e72c                 | ' 
1e72c                 | ' sub do_power 
1e72c                 | _do_power
1e72c     04 CA 05 F6 | 	mov	COUNT_, #4
1e730     E8 00 A0 FD | 	call	#pushregs_
1e734     18 F0 07 F1 | 	add	ptra, #24
1e738     34 EF BE FD | 	call	#_pop
1e73c     3D A7 02 F6 | 	mov	local01, result1
1e740     3E 95 02 F6 | 	mov	arg02, result2
1e744     3F 93 02 F6 | 	mov	arg01, result3
1e748     4A A9 02 F6 | 	mov	local02, arg02
1e74c     49 AB 02 F6 | 	mov	local03, arg01
1e750     1C EF BE FD | 	call	#_pop
1e754     E7 7A 62 FC | 	wrlong	result1, fp
1e758     04 CE 05 F1 | 	add	fp, #4
1e75c     E7 7C 62 FC | 	wrlong	result2, fp
1e760     04 CE 05 F1 | 	add	fp, #4
1e764     E7 7E 62 FC | 	wrlong	result3, fp
1e768                 | ' 
1e768                 | ' t2=pop()
1e768                 | ' t1=pop()
1e768                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1e768     08 CE 85 F1 | 	sub	fp, #8
1e76c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1e770     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e774     E7 18 68 AC |  if_e	wrlong	#12, fp
1e778     08 CE 05 A1 |  if_e	add	fp, #8
1e77c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e780     08 CE 85 A1 |  if_e	sub	fp, #8
1e784     E0 00 90 AD |  if_e	jmp	#LR__2585
1e788                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e788     08 CE 05 F1 | 	add	fp, #8
1e78c     E7 94 02 FB | 	rdlong	arg02, fp
1e790     08 CE 85 F1 | 	sub	fp, #8
1e794     1C 94 0E F2 | 	cmp	arg02, #28 wz
1e798     28 00 90 5D |  if_ne	jmp	#LR__2580
1e79c     08 CE 05 F1 | 	add	fp, #8
1e7a0     E7 3C 68 FC | 	wrlong	#30, fp
1e7a4     08 CE 85 F1 | 	sub	fp, #8
1e7a8     E7 92 02 FB | 	rdlong	arg01, fp
1e7ac     49 93 52 F6 | 	abs	arg01, arg01 wc
1e7b0     1F AC C6 C9 |  if_b	decod	local04, #31
1e7b4     00 AC 06 36 |  if_ae	mov	local04, #0
1e7b8     0C 85 B0 FD | 	call	#__system___float_fromuns
1e7bc     56 7B 62 F5 | 	xor	result1, local04
1e7c0     E7 7A 62 FC | 	wrlong	result1, fp
1e7c4                 | LR__2580
1e7c4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1e7c4     08 CE 05 F1 | 	add	fp, #8
1e7c8     E7 94 02 FB | 	rdlong	arg02, fp
1e7cc     08 CE 85 F1 | 	sub	fp, #8
1e7d0     1D 94 0E F2 | 	cmp	arg02, #29 wz
1e7d4     18 00 90 5D |  if_ne	jmp	#LR__2581
1e7d8     08 CE 05 F1 | 	add	fp, #8
1e7dc     E7 3C 68 FC | 	wrlong	#30, fp
1e7e0     08 CE 85 F1 | 	sub	fp, #8
1e7e4     E7 92 02 FB | 	rdlong	arg01, fp
1e7e8     DC 84 B0 FD | 	call	#__system___float_fromuns
1e7ec     E7 7A 62 FC | 	wrlong	result1, fp
1e7f0                 | LR__2581
1e7f0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e7f0     1C AA 0E F2 | 	cmp	local03, #28 wz
1e7f4     1C 00 90 5D |  if_ne	jmp	#LR__2582
1e7f8     1E AA 06 F6 | 	mov	local03, #30
1e7fc     53 93 52 F6 | 	abs	arg01, local01 wc
1e800     1F AC C6 C9 |  if_b	decod	local04, #31
1e804     00 AC 06 36 |  if_ae	mov	local04, #0
1e808     BC 84 B0 FD | 	call	#__system___float_fromuns
1e80c     56 7B 62 F5 | 	xor	result1, local04
1e810     3D A7 02 F6 | 	mov	local01, result1
1e814                 | LR__2582
1e814                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e814     1D AA 0E F2 | 	cmp	local03, #29 wz
1e818     10 00 90 5D |  if_ne	jmp	#LR__2583
1e81c     1E AA 06 F6 | 	mov	local03, #30
1e820     53 93 02 F6 | 	mov	arg01, local01
1e824     A0 84 B0 FD | 	call	#__system___float_fromuns
1e828     3D A7 02 F6 | 	mov	local01, result1
1e82c                 | LR__2583
1e82c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1e82c     08 CE 05 F1 | 	add	fp, #8
1e830     E7 94 02 FB | 	rdlong	arg02, fp
1e834     08 CE 85 F1 | 	sub	fp, #8
1e838     1E 94 0E F2 | 	cmp	arg02, #30 wz
1e83c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e840     14 00 90 5D |  if_ne	jmp	#LR__2584
1e844     E7 92 02 FB | 	rdlong	arg01, fp
1e848     53 95 02 F6 | 	mov	arg02, local01
1e84c     94 97 B0 FD | 	call	#__system____builtin_powf
1e850     E7 7A 62 FC | 	wrlong	result1, fp
1e854     10 00 90 FD | 	jmp	#LR__2585
1e858                 | LR__2584
1e858     E7 1A 68 FC | 	wrlong	#13, fp
1e85c     08 CE 05 F1 | 	add	fp, #8
1e860     E7 FE 69 FC | 	wrlong	#255, fp
1e864     08 CE 85 F1 | 	sub	fp, #8
1e868                 | LR__2585
1e868     E7 92 02 F6 | 	mov	arg01, fp
1e86c     90 EE BE FD | 	call	#_push
1e870     E7 F0 03 F6 | 	mov	ptra, fp
1e874     F2 00 A0 FD | 	call	#popregs_
1e878                 | _do_power_ret
1e878     2D 00 64 FD | 	ret
1e87c                 | 
1e87c                 | ' 
1e87c                 | ' '--------------------------------- SHL
1e87c                 | ' 
1e87c                 | ' sub do_shl 
1e87c                 | _do_shl
1e87c     05 CA 05 F6 | 	mov	COUNT_, #5
1e880     E8 00 A0 FD | 	call	#pushregs_
1e884     18 F0 07 F1 | 	add	ptra, #24
1e888     E4 ED BE FD | 	call	#_pop
1e88c     3D A7 02 F6 | 	mov	local01, result1
1e890     3E 93 02 F6 | 	mov	arg01, result2
1e894     3F AD 02 F6 | 	mov	local04, result3
1e898     49 A9 02 F6 | 	mov	local02, arg01
1e89c     56 AB 02 F6 | 	mov	local03, local04
1e8a0     CC ED BE FD | 	call	#_pop
1e8a4     3F AF 02 F6 | 	mov	local05, result3
1e8a8     E7 7A 62 FC | 	wrlong	result1, fp
1e8ac     04 CE 05 F1 | 	add	fp, #4
1e8b0     E7 7C 62 FC | 	wrlong	result2, fp
1e8b4     04 CE 05 F1 | 	add	fp, #4
1e8b8     E7 AE 62 FC | 	wrlong	local05, fp
1e8bc                 | ' 
1e8bc                 | ' t2=pop()
1e8bc                 | ' t1=pop()
1e8bc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e8bc     08 CE 85 F1 | 	sub	fp, #8
1e8c0     1C AE 0E F2 | 	cmp	local05, #28 wz
1e8c4     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e8c8     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e8cc     08 CE 05 A1 |  if_e	add	fp, #8
1e8d0     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e8d4     08 CE 85 A1 |  if_e	sub	fp, #8
1e8d8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e8d8     1C AA 0E F2 | 	cmp	local03, #28 wz
1e8dc     1D AA 06 A6 |  if_e	mov	local03, #29
1e8e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1e8e0     08 CE 05 F1 | 	add	fp, #8
1e8e4     E7 AE 02 FB | 	rdlong	local05, fp
1e8e8     08 CE 85 F1 | 	sub	fp, #8
1e8ec     1F AE 0E F2 | 	cmp	local05, #31 wz
1e8f0     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e8f4     08 CE 05 51 |  if_ne	add	fp, #8
1e8f8     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e8fc     08 CE 85 51 |  if_ne	sub	fp, #8
1e900     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e904     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e908     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e90c     08 CE 05 A1 |  if_e	add	fp, #8
1e910     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e914     08 CE 85 A1 |  if_e	sub	fp, #8
1e918     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e91c     53 AF 62 50 |  if_ne	shl	local05, local01
1e920     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e924     E7 92 02 F6 | 	mov	arg01, fp
1e928     D4 ED BE FD | 	call	#_push
1e92c     E7 F0 03 F6 | 	mov	ptra, fp
1e930     F2 00 A0 FD | 	call	#popregs_
1e934                 | _do_shl_ret
1e934     2D 00 64 FD | 	ret
1e938                 | 
1e938                 | ' 
1e938                 | ' '--------------------------------- SHR
1e938                 | ' 
1e938                 | ' sub do_shr 
1e938                 | _do_shr
1e938     05 CA 05 F6 | 	mov	COUNT_, #5
1e93c     E8 00 A0 FD | 	call	#pushregs_
1e940     18 F0 07 F1 | 	add	ptra, #24
1e944     28 ED BE FD | 	call	#_pop
1e948     3D A7 02 F6 | 	mov	local01, result1
1e94c     3E 93 02 F6 | 	mov	arg01, result2
1e950     3F AD 02 F6 | 	mov	local04, result3
1e954     49 A9 02 F6 | 	mov	local02, arg01
1e958     56 AB 02 F6 | 	mov	local03, local04
1e95c     10 ED BE FD | 	call	#_pop
1e960     3F AF 02 F6 | 	mov	local05, result3
1e964     E7 7A 62 FC | 	wrlong	result1, fp
1e968     04 CE 05 F1 | 	add	fp, #4
1e96c     E7 7C 62 FC | 	wrlong	result2, fp
1e970     04 CE 05 F1 | 	add	fp, #4
1e974     E7 AE 62 FC | 	wrlong	local05, fp
1e978                 | ' 
1e978                 | ' t2=pop()
1e978                 | ' t1=pop()
1e978                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e978     08 CE 85 F1 | 	sub	fp, #8
1e97c     1C AE 0E F2 | 	cmp	local05, #28 wz
1e980     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e984     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e988     08 CE 05 A1 |  if_e	add	fp, #8
1e98c     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e990     08 CE 85 A1 |  if_e	sub	fp, #8
1e994                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e994     1C AA 0E F2 | 	cmp	local03, #28 wz
1e998     1D AA 06 A6 |  if_e	mov	local03, #29
1e99c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1e99c     08 CE 05 F1 | 	add	fp, #8
1e9a0     E7 AE 02 FB | 	rdlong	local05, fp
1e9a4     08 CE 85 F1 | 	sub	fp, #8
1e9a8     1F AE 0E F2 | 	cmp	local05, #31 wz
1e9ac     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e9b0     08 CE 05 51 |  if_ne	add	fp, #8
1e9b4     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e9b8     08 CE 85 51 |  if_ne	sub	fp, #8
1e9bc     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e9c0     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e9c4     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e9c8     08 CE 05 A1 |  if_e	add	fp, #8
1e9cc     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e9d0     08 CE 85 A1 |  if_e	sub	fp, #8
1e9d4     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e9d8     53 AF 42 50 |  if_ne	shr	local05, local01
1e9dc     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e9e0     E7 92 02 F6 | 	mov	arg01, fp
1e9e4     18 ED BE FD | 	call	#_push
1e9e8     E7 F0 03 F6 | 	mov	ptra, fp
1e9ec     F2 00 A0 FD | 	call	#popregs_
1e9f0                 | _do_shr_ret
1e9f0     2D 00 64 FD | 	ret
1e9f4                 | 
1e9f4                 | ' 
1e9f4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1e9f4                 | ' 
1e9f4                 | ' ''----------------------------------------------------------------------------------------------------
1e9f4                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1e9f4                 | ' ''----------------------------------------------------------------------------------------------------
1e9f4                 | ' 
1e9f4                 | ' ''--------------------------- Command function pointers
1e9f4                 | ' 
1e9f4                 | ' sub init_commands
1e9f4                 | _init_commands
1e9f4                 | ' 
1e9f4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1e9f4     00 80 06 F6 | 	mov	_var01, #0
1e9f8     D7 14 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1e9fc                 | LR__2590
1e9fc     40 7B 02 F6 | 	mov	result1, _var01
1ea00     02 7A 66 F0 | 	shl	result1, #2
1ea04     32 95 02 F6 | 	mov	arg02, objptr
1ea08     45 00 00 FF 
1ea0c     04 94 06 F1 | 	add	arg02, ##35332
1ea10     4A 7B 02 F1 | 	add	result1, arg02
1ea14     3D 65 62 FC | 	wrlong	objptr, result1
1ea18     01 80 06 F1 | 	add	_var01, #1
1ea1c     00 81 56 F2 | 	cmps	_var01, #256 wc
1ea20     D8 FF 9F CD |  if_b	jmp	#LR__2590
1ea24                 | LR__2591
1ea24     32 7B 02 F6 | 	mov	result1, objptr
1ea28     14 7A 26 F4 | 	bith	result1, #20
1ea2c     45 00 00 FF 
1ea30     08 64 06 F1 | 	add	objptr, ##35336
1ea34     32 7B 62 FC | 	wrlong	result1, objptr
1ea38     45 00 00 FF 
1ea3c     08 64 86 F1 | 	sub	objptr, ##35336
1ea40     32 7B 02 F6 | 	mov	result1, objptr
1ea44     15 7A 26 F4 | 	bith	result1, #21
1ea48     45 00 00 FF 
1ea4c     0C 64 06 F1 | 	add	objptr, ##35340
1ea50     32 7B 62 FC | 	wrlong	result1, objptr
1ea54     45 00 00 FF 
1ea58     0C 64 86 F1 | 	sub	objptr, ##35340
1ea5c     32 7B 02 F6 | 	mov	result1, objptr
1ea60     34 7A 26 F4 | 	bith	result1, #52
1ea64     45 00 00 FF 
1ea68     10 64 06 F1 | 	add	objptr, ##35344
1ea6c     32 7B 62 FC | 	wrlong	result1, objptr
1ea70     45 00 00 FF 
1ea74     10 64 86 F1 | 	sub	objptr, ##35344
1ea78     32 7B 02 F6 | 	mov	result1, objptr
1ea7c     16 7A 26 F4 | 	bith	result1, #22
1ea80     45 00 00 FF 
1ea84     18 64 06 F1 | 	add	objptr, ##35352
1ea88     32 7B 62 FC | 	wrlong	result1, objptr
1ea8c     45 00 00 FF 
1ea90     18 64 86 F1 | 	sub	objptr, ##35352
1ea94     32 7B 02 F6 | 	mov	result1, objptr
1ea98     00 28 00 FF 
1ea9c     00 7A 46 F5 | 	or	result1, ##5242880
1eaa0     45 00 00 FF 
1eaa4     1C 64 06 F1 | 	add	objptr, ##35356
1eaa8     32 7B 62 FC | 	wrlong	result1, objptr
1eaac     45 00 00 FF 
1eab0     1C 64 86 F1 | 	sub	objptr, ##35356
1eab4     32 7B 02 F6 | 	mov	result1, objptr
1eab8     35 7A 26 F4 | 	bith	result1, #53
1eabc     45 00 00 FF 
1eac0     20 64 06 F1 | 	add	objptr, ##35360
1eac4     32 7B 62 FC | 	wrlong	result1, objptr
1eac8     45 00 00 FF 
1eacc     20 64 86 F1 | 	sub	objptr, ##35360
1ead0     32 7B 02 F6 | 	mov	result1, objptr
1ead4     54 7A 26 F4 | 	bith	result1, #84
1ead8     45 00 00 FF 
1eadc     24 64 06 F1 | 	add	objptr, ##35364
1eae0     32 7B 62 FC | 	wrlong	result1, objptr
1eae4     45 00 00 FF 
1eae8     24 64 86 F1 | 	sub	objptr, ##35364
1eaec     32 7B 02 F6 | 	mov	result1, objptr
1eaf0     17 7A 26 F4 | 	bith	result1, #23
1eaf4     45 00 00 FF 
1eaf8     28 64 06 F1 | 	add	objptr, ##35368
1eafc     32 7B 62 FC | 	wrlong	result1, objptr
1eb00     45 00 00 FF 
1eb04     28 64 86 F1 | 	sub	objptr, ##35368
1eb08     32 7B 02 F6 | 	mov	result1, objptr
1eb0c     00 48 00 FF 
1eb10     00 7A 46 F5 | 	or	result1, ##9437184
1eb14     45 00 00 FF 
1eb18     2C 64 06 F1 | 	add	objptr, ##35372
1eb1c     32 7B 62 FC | 	wrlong	result1, objptr
1eb20     45 00 00 FF 
1eb24     2C 64 86 F1 | 	sub	objptr, ##35372
1eb28     32 7B 02 F6 | 	mov	result1, objptr
1eb2c     00 50 00 FF 
1eb30     00 7A 46 F5 | 	or	result1, ##10485760
1eb34     45 00 00 FF 
1eb38     30 64 06 F1 | 	add	objptr, ##35376
1eb3c     32 7B 62 FC | 	wrlong	result1, objptr
1eb40     45 00 00 FF 
1eb44     30 64 86 F1 | 	sub	objptr, ##35376
1eb48     32 7B 02 F6 | 	mov	result1, objptr
1eb4c     00 58 00 FF 
1eb50     00 7A 46 F5 | 	or	result1, ##11534336
1eb54     45 00 00 FF 
1eb58     34 64 06 F1 | 	add	objptr, ##35380
1eb5c     32 7B 62 FC | 	wrlong	result1, objptr
1eb60     45 00 00 FF 
1eb64     34 64 86 F1 | 	sub	objptr, ##35380
1eb68     32 7B 02 F6 | 	mov	result1, objptr
1eb6c     36 7A 26 F4 | 	bith	result1, #54
1eb70     45 00 00 FF 
1eb74     48 64 06 F1 | 	add	objptr, ##35400
1eb78     32 7B 62 FC | 	wrlong	result1, objptr
1eb7c     45 00 00 FF 
1eb80     48 64 86 F1 | 	sub	objptr, ##35400
1eb84     32 7B 02 F6 | 	mov	result1, objptr
1eb88     00 68 00 FF 
1eb8c     00 7A 46 F5 | 	or	result1, ##13631488
1eb90     45 00 00 FF 
1eb94     78 64 06 F1 | 	add	objptr, ##35448
1eb98     32 7B 62 FC | 	wrlong	result1, objptr
1eb9c     45 00 00 FF 
1eba0     78 64 86 F1 | 	sub	objptr, ##35448
1eba4     32 7B 02 F6 | 	mov	result1, objptr
1eba8     00 68 00 FF 
1ebac     00 7A 46 F5 | 	or	result1, ##13631488
1ebb0     45 00 00 FF 
1ebb4     74 64 06 F1 | 	add	objptr, ##35444
1ebb8     32 7B 62 FC | 	wrlong	result1, objptr
1ebbc     45 00 00 FF 
1ebc0     74 64 86 F1 | 	sub	objptr, ##35444
1ebc4     32 7B 02 F6 | 	mov	result1, objptr
1ebc8     00 68 00 FF 
1ebcc     00 7A 46 F5 | 	or	result1, ##13631488
1ebd0     45 00 00 FF 
1ebd4     7C 64 06 F1 | 	add	objptr, ##35452
1ebd8     32 7B 62 FC | 	wrlong	result1, objptr
1ebdc     45 00 00 FF 
1ebe0     7C 64 86 F1 | 	sub	objptr, ##35452
1ebe4     32 7B 02 F6 | 	mov	result1, objptr
1ebe8     00 68 00 FF 
1ebec     00 7A 46 F5 | 	or	result1, ##13631488
1ebf0     45 00 00 FF 
1ebf4     80 64 06 F1 | 	add	objptr, ##35456
1ebf8     32 7B 62 FC | 	wrlong	result1, objptr
1ebfc     45 00 00 FF 
1ec00     80 64 86 F1 | 	sub	objptr, ##35456
1ec04     32 7B 02 F6 | 	mov	result1, objptr
1ec08     00 68 00 FF 
1ec0c     00 7A 46 F5 | 	or	result1, ##13631488
1ec10     45 00 00 FF 
1ec14     B0 64 06 F1 | 	add	objptr, ##35504
1ec18     32 7B 62 FC | 	wrlong	result1, objptr
1ec1c     45 00 00 FF 
1ec20     B0 64 86 F1 | 	sub	objptr, ##35504
1ec24     32 7B 02 F6 | 	mov	result1, objptr
1ec28     55 7A 26 F4 | 	bith	result1, #85
1ec2c     45 00 00 FF 
1ec30     60 64 06 F1 | 	add	objptr, ##35424
1ec34     32 7B 62 FC | 	wrlong	result1, objptr
1ec38     45 00 00 FF 
1ec3c     60 64 86 F1 | 	sub	objptr, ##35424
1ec40     32 7B 02 F6 | 	mov	result1, objptr
1ec44     00 68 00 FF 
1ec48     00 7A 46 F5 | 	or	result1, ##13631488
1ec4c     45 00 00 FF 
1ec50     B4 64 06 F1 | 	add	objptr, ##35508
1ec54     32 7B 62 FC | 	wrlong	result1, objptr
1ec58     45 00 00 FF 
1ec5c     B4 64 86 F1 | 	sub	objptr, ##35508
1ec60     32 7B 02 F6 | 	mov	result1, objptr
1ec64     00 68 00 FF 
1ec68     00 7A 46 F5 | 	or	result1, ##13631488
1ec6c     45 00 00 FF 
1ec70     84 64 06 F1 | 	add	objptr, ##35460
1ec74     32 7B 62 FC | 	wrlong	result1, objptr
1ec78     45 00 00 FF 
1ec7c     84 64 86 F1 | 	sub	objptr, ##35460
1ec80     32 7B 02 F6 | 	mov	result1, objptr
1ec84     00 68 00 FF 
1ec88     00 7A 46 F5 | 	or	result1, ##13631488
1ec8c     45 00 00 FF 
1ec90     88 64 06 F1 | 	add	objptr, ##35464
1ec94     32 7B 62 FC | 	wrlong	result1, objptr
1ec98     45 00 00 FF 
1ec9c     88 64 86 F1 | 	sub	objptr, ##35464
1eca0     32 7B 02 F6 | 	mov	result1, objptr
1eca4     00 68 00 FF 
1eca8     00 7A 46 F5 | 	or	result1, ##13631488
1ecac     45 00 00 FF 
1ecb0     8C 64 06 F1 | 	add	objptr, ##35468
1ecb4     32 7B 62 FC | 	wrlong	result1, objptr
1ecb8     45 00 00 FF 
1ecbc     8C 64 86 F1 | 	sub	objptr, ##35468
1ecc0     32 7B 02 F6 | 	mov	result1, objptr
1ecc4     74 7A 26 F4 | 	bith	result1, #116
1ecc8     45 00 00 FF 
1eccc     04 65 06 F1 | 	add	objptr, ##35588
1ecd0     32 7B 62 FC | 	wrlong	result1, objptr
1ecd4     45 00 00 FF 
1ecd8     04 65 86 F1 | 	sub	objptr, ##35588
1ecdc     32 7B 02 F6 | 	mov	result1, objptr
1ece0     18 7A 26 F4 | 	bith	result1, #24
1ece4     45 00 00 FF 
1ece8     08 65 06 F1 | 	add	objptr, ##35592
1ecec     32 7B 62 FC | 	wrlong	result1, objptr
1ecf0     45 00 00 FF 
1ecf4     08 65 86 F1 | 	sub	objptr, ##35592
1ecf8     32 7B 02 F6 | 	mov	result1, objptr
1ecfc     00 88 00 FF 
1ed00     00 7A 46 F5 | 	or	result1, ##17825792
1ed04     45 00 00 FF 
1ed08     0C 65 06 F1 | 	add	objptr, ##35596
1ed0c     32 7B 62 FC | 	wrlong	result1, objptr
1ed10     45 00 00 FF 
1ed14     0C 65 86 F1 | 	sub	objptr, ##35596
1ed18     32 7B 02 F6 | 	mov	result1, objptr
1ed1c     00 90 00 FF 
1ed20     00 7A 46 F5 | 	or	result1, ##18874368
1ed24     45 00 00 FF 
1ed28     10 65 06 F1 | 	add	objptr, ##35600
1ed2c     32 7B 62 FC | 	wrlong	result1, objptr
1ed30     45 00 00 FF 
1ed34     10 65 86 F1 | 	sub	objptr, ##35600
1ed38     32 7B 02 F6 | 	mov	result1, objptr
1ed3c     00 98 00 FF 
1ed40     00 7A 46 F5 | 	or	result1, ##19922944
1ed44     45 00 00 FF 
1ed48     14 65 06 F1 | 	add	objptr, ##35604
1ed4c     32 7B 62 FC | 	wrlong	result1, objptr
1ed50     45 00 00 FF 
1ed54     14 65 86 F1 | 	sub	objptr, ##35604
1ed58     32 7B 02 F6 | 	mov	result1, objptr
1ed5c     00 A0 00 FF 
1ed60     00 7A 46 F5 | 	or	result1, ##20971520
1ed64     45 00 00 FF 
1ed68     18 65 06 F1 | 	add	objptr, ##35608
1ed6c     32 7B 62 FC | 	wrlong	result1, objptr
1ed70     45 00 00 FF 
1ed74     18 65 86 F1 | 	sub	objptr, ##35608
1ed78     32 7B 02 F6 | 	mov	result1, objptr
1ed7c     00 A8 00 FF 
1ed80     00 7A 46 F5 | 	or	result1, ##22020096
1ed84     45 00 00 FF 
1ed88     1C 65 06 F1 | 	add	objptr, ##35612
1ed8c     32 7B 62 FC | 	wrlong	result1, objptr
1ed90     45 00 00 FF 
1ed94     1C 65 86 F1 | 	sub	objptr, ##35612
1ed98     32 7B 02 F6 | 	mov	result1, objptr
1ed9c     00 B0 00 FF 
1eda0     00 7A 46 F5 | 	or	result1, ##23068672
1eda4     45 00 00 FF 
1eda8     20 65 06 F1 | 	add	objptr, ##35616
1edac     32 7B 62 FC | 	wrlong	result1, objptr
1edb0     45 00 00 FF 
1edb4     20 65 86 F1 | 	sub	objptr, ##35616
1edb8     32 7B 02 F6 | 	mov	result1, objptr
1edbc     00 B8 00 FF 
1edc0     00 7A 46 F5 | 	or	result1, ##24117248
1edc4     45 00 00 FF 
1edc8     24 65 06 F1 | 	add	objptr, ##35620
1edcc     32 7B 62 FC | 	wrlong	result1, objptr
1edd0     45 00 00 FF 
1edd4     24 65 86 F1 | 	sub	objptr, ##35620
1edd8     32 7B 02 F6 | 	mov	result1, objptr
1eddc     37 7A 26 F4 | 	bith	result1, #55
1ede0     45 00 00 FF 
1ede4     28 65 06 F1 | 	add	objptr, ##35624
1ede8     32 7B 62 FC | 	wrlong	result1, objptr
1edec     45 00 00 FF 
1edf0     28 65 86 F1 | 	sub	objptr, ##35624
1edf4     32 7B 02 F6 | 	mov	result1, objptr
1edf8     00 C8 00 FF 
1edfc     00 7A 46 F5 | 	or	result1, ##26214400
1ee00     45 00 00 FF 
1ee04     2C 65 06 F1 | 	add	objptr, ##35628
1ee08     32 7B 62 FC | 	wrlong	result1, objptr
1ee0c     45 00 00 FF 
1ee10     2C 65 86 F1 | 	sub	objptr, ##35628
1ee14     32 7B 02 F6 | 	mov	result1, objptr
1ee18     00 D0 00 FF 
1ee1c     00 7A 46 F5 | 	or	result1, ##27262976
1ee20     45 00 00 FF 
1ee24     30 65 06 F1 | 	add	objptr, ##35632
1ee28     32 7B 62 FC | 	wrlong	result1, objptr
1ee2c     45 00 00 FF 
1ee30     30 65 86 F1 | 	sub	objptr, ##35632
1ee34     32 7B 02 F6 | 	mov	result1, objptr
1ee38     00 D8 00 FF 
1ee3c     00 7A 46 F5 | 	or	result1, ##28311552
1ee40     45 00 00 FF 
1ee44     34 65 06 F1 | 	add	objptr, ##35636
1ee48     32 7B 62 FC | 	wrlong	result1, objptr
1ee4c     45 00 00 FF 
1ee50     34 65 86 F1 | 	sub	objptr, ##35636
1ee54     32 7B 02 F6 | 	mov	result1, objptr
1ee58     56 7A 26 F4 | 	bith	result1, #86
1ee5c     45 00 00 FF 
1ee60     38 65 06 F1 | 	add	objptr, ##35640
1ee64     32 7B 62 FC | 	wrlong	result1, objptr
1ee68     45 00 00 FF 
1ee6c     38 65 86 F1 | 	sub	objptr, ##35640
1ee70     32 7B 02 F6 | 	mov	result1, objptr
1ee74     00 E8 00 FF 
1ee78     00 7A 46 F5 | 	or	result1, ##30408704
1ee7c     47 00 00 FF 
1ee80     00 64 06 F1 | 	add	objptr, ##36352
1ee84     32 7B 62 FC | 	wrlong	result1, objptr
1ee88     47 00 00 FF 
1ee8c     00 64 86 F1 | 	sub	objptr, ##36352
1ee90     32 7B 02 F6 | 	mov	result1, objptr
1ee94     75 7A 26 F4 | 	bith	result1, #117
1ee98     45 00 00 FF 
1ee9c     3C 65 06 F1 | 	add	objptr, ##35644
1eea0     32 7B 62 FC | 	wrlong	result1, objptr
1eea4     45 00 00 FF 
1eea8     3C 65 86 F1 | 	sub	objptr, ##35644
1eeac     32 7B 02 F6 | 	mov	result1, objptr
1eeb0     94 7A 26 F4 | 	bith	result1, #148
1eeb4     45 00 00 FF 
1eeb8     50 65 06 F1 | 	add	objptr, ##35664
1eebc     32 7B 62 FC | 	wrlong	result1, objptr
1eec0     45 00 00 FF 
1eec4     50 65 86 F1 | 	sub	objptr, ##35664
1eec8     32 7B 02 F6 | 	mov	result1, objptr
1eecc     19 7A 26 F4 | 	bith	result1, #25
1eed0     45 00 00 FF 
1eed4     40 65 06 F1 | 	add	objptr, ##35648
1eed8     32 7B 62 FC | 	wrlong	result1, objptr
1eedc     45 00 00 FF 
1eee0     40 65 86 F1 | 	sub	objptr, ##35648
1eee4     32 7B 02 F6 | 	mov	result1, objptr
1eee8     00 08 01 FF 
1eeec     00 7A 46 F5 | 	or	result1, ##34603008
1eef0     45 00 00 FF 
1eef4     5C 64 06 F1 | 	add	objptr, ##35420
1eef8     32 7B 62 FC | 	wrlong	result1, objptr
1eefc     45 00 00 FF 
1ef00     5C 64 86 F1 | 	sub	objptr, ##35420
1ef04     32 7B 02 F6 | 	mov	result1, objptr
1ef08     00 10 01 FF 
1ef0c     00 7A 46 F5 | 	or	result1, ##35651584
1ef10     45 00 00 FF 
1ef14     48 65 06 F1 | 	add	objptr, ##35656
1ef18     32 7B 62 FC | 	wrlong	result1, objptr
1ef1c     45 00 00 FF 
1ef20     48 65 86 F1 | 	sub	objptr, ##35656
1ef24     32 7B 02 F6 | 	mov	result1, objptr
1ef28     00 18 01 FF 
1ef2c     00 7A 46 F5 | 	or	result1, ##36700160
1ef30     45 00 00 FF 
1ef34     4C 65 06 F1 | 	add	objptr, ##35660
1ef38     32 7B 62 FC | 	wrlong	result1, objptr
1ef3c     45 00 00 FF 
1ef40     4C 65 86 F1 | 	sub	objptr, ##35660
1ef44     32 7B 02 F6 | 	mov	result1, objptr
1ef48     00 20 01 FF 
1ef4c     00 7A 46 F5 | 	or	result1, ##37748736
1ef50     45 00 00 FF 
1ef54     58 65 06 F1 | 	add	objptr, ##35672
1ef58     32 7B 62 FC | 	wrlong	result1, objptr
1ef5c     45 00 00 FF 
1ef60     58 65 86 F1 | 	sub	objptr, ##35672
1ef64     32 7B 02 F6 | 	mov	result1, objptr
1ef68     00 28 01 FF 
1ef6c     00 7A 46 F5 | 	or	result1, ##38797312
1ef70     45 00 00 FF 
1ef74     5C 65 06 F1 | 	add	objptr, ##35676
1ef78     32 7B 62 FC | 	wrlong	result1, objptr
1ef7c     45 00 00 FF 
1ef80     5C 65 86 F1 | 	sub	objptr, ##35676
1ef84     32 7B 02 F6 | 	mov	result1, objptr
1ef88     00 30 01 FF 
1ef8c     00 7A 46 F5 | 	or	result1, ##39845888
1ef90     45 00 00 FF 
1ef94     60 65 06 F1 | 	add	objptr, ##35680
1ef98     32 7B 62 FC | 	wrlong	result1, objptr
1ef9c     45 00 00 FF 
1efa0     60 65 86 F1 | 	sub	objptr, ##35680
1efa4     32 7B 02 F6 | 	mov	result1, objptr
1efa8     00 38 01 FF 
1efac     00 7A 46 F5 | 	or	result1, ##40894464
1efb0     45 00 00 FF 
1efb4     64 65 06 F1 | 	add	objptr, ##35684
1efb8     32 7B 62 FC | 	wrlong	result1, objptr
1efbc     45 00 00 FF 
1efc0     64 65 86 F1 | 	sub	objptr, ##35684
1efc4     32 7B 02 F6 | 	mov	result1, objptr
1efc8     00 40 01 FF 
1efcc     00 7A 46 F5 | 	or	result1, ##41943040
1efd0     45 00 00 FF 
1efd4     6C 65 06 F1 | 	add	objptr, ##35692
1efd8     32 7B 62 FC | 	wrlong	result1, objptr
1efdc     45 00 00 FF 
1efe0     6C 65 86 F1 | 	sub	objptr, ##35692
1efe4     32 7B 02 F6 | 	mov	result1, objptr
1efe8     00 08 01 FF 
1efec     00 7A 46 F5 | 	or	result1, ##34603008
1eff0     45 00 00 FF 
1eff4     70 65 06 F1 | 	add	objptr, ##35696
1eff8     32 7B 62 FC | 	wrlong	result1, objptr
1effc     45 00 00 FF 
1f000     70 65 86 F1 | 	sub	objptr, ##35696
1f004     32 7B 02 F6 | 	mov	result1, objptr
1f008     00 48 01 FF 
1f00c     00 7A 46 F5 | 	or	result1, ##42991616
1f010     45 00 00 FF 
1f014     70 64 06 F1 | 	add	objptr, ##35440
1f018     32 7B 62 FC | 	wrlong	result1, objptr
1f01c     45 00 00 FF 
1f020     70 64 86 F1 | 	sub	objptr, ##35440
1f024     32 7B 02 F6 | 	mov	result1, objptr
1f028     00 50 01 FF 
1f02c     00 7A 46 F5 | 	or	result1, ##44040192
1f030     45 00 00 FF 
1f034     A0 64 06 F1 | 	add	objptr, ##35488
1f038     32 7B 62 FC | 	wrlong	result1, objptr
1f03c     45 00 00 FF 
1f040     A0 64 86 F1 | 	sub	objptr, ##35488
1f044     32 7B 02 F6 | 	mov	result1, objptr
1f048     00 58 01 FF 
1f04c     00 7A 46 F5 | 	or	result1, ##45088768
1f050     45 00 00 FF 
1f054     9C 64 06 F1 | 	add	objptr, ##35484
1f058     32 7B 62 FC | 	wrlong	result1, objptr
1f05c     45 00 00 FF 
1f060     9C 64 86 F1 | 	sub	objptr, ##35484
1f064     32 7B 02 F6 | 	mov	result1, objptr
1f068     00 60 01 FF 
1f06c     00 7A 46 F5 | 	or	result1, ##46137344
1f070     45 00 00 FF 
1f074     40 64 06 F1 | 	add	objptr, ##35392
1f078     32 7B 62 FC | 	wrlong	result1, objptr
1f07c     45 00 00 FF 
1f080     40 64 86 F1 | 	sub	objptr, ##35392
1f084     32 7B 02 F6 | 	mov	result1, objptr
1f088     00 68 01 FF 
1f08c     00 7A 46 F5 | 	or	result1, ##47185920
1f090     45 00 00 FF 
1f094     44 64 06 F1 | 	add	objptr, ##35396
1f098     32 7B 62 FC | 	wrlong	result1, objptr
1f09c     45 00 00 FF 
1f0a0     44 64 86 F1 | 	sub	objptr, ##35396
1f0a4     32 7B 02 F6 | 	mov	result1, objptr
1f0a8     00 70 01 FF 
1f0ac     00 7A 46 F5 | 	or	result1, ##48234496
1f0b0     45 00 00 FF 
1f0b4     AC 64 06 F1 | 	add	objptr, ##35500
1f0b8     32 7B 62 FC | 	wrlong	result1, objptr
1f0bc     45 00 00 FF 
1f0c0     AC 64 86 F1 | 	sub	objptr, ##35500
1f0c4     32 7B 02 F6 | 	mov	result1, objptr
1f0c8     00 78 01 FF 
1f0cc     00 7A 46 F5 | 	or	result1, ##49283072
1f0d0     45 00 00 FF 
1f0d4     54 65 06 F1 | 	add	objptr, ##35668
1f0d8     32 7B 62 FC | 	wrlong	result1, objptr
1f0dc     45 00 00 FF 
1f0e0     54 65 86 F1 | 	sub	objptr, ##35668
1f0e4     32 7B 02 F6 | 	mov	result1, objptr
1f0e8     38 7A 26 F4 | 	bith	result1, #56
1f0ec     45 00 00 FF 
1f0f0     68 65 06 F1 | 	add	objptr, ##35688
1f0f4     32 7B 62 FC | 	wrlong	result1, objptr
1f0f8     45 00 00 FF 
1f0fc     68 65 86 F1 | 	sub	objptr, ##35688
1f100     32 7B 02 F6 | 	mov	result1, objptr
1f104     00 88 01 FF 
1f108     00 7A 46 F5 | 	or	result1, ##51380224
1f10c     45 00 00 FF 
1f110     74 65 06 F1 | 	add	objptr, ##35700
1f114     32 7B 62 FC | 	wrlong	result1, objptr
1f118     45 00 00 FF 
1f11c     74 65 86 F1 | 	sub	objptr, ##35700
1f120     32 7B 02 F6 | 	mov	result1, objptr
1f124     00 90 01 FF 
1f128     00 7A 46 F5 | 	or	result1, ##52428800
1f12c     45 00 00 FF 
1f130     78 65 06 F1 | 	add	objptr, ##35704
1f134     32 7B 62 FC | 	wrlong	result1, objptr
1f138     45 00 00 FF 
1f13c     78 65 86 F1 | 	sub	objptr, ##35704
1f140     32 7B 02 F6 | 	mov	result1, objptr
1f144     00 98 01 FF 
1f148     00 7A 46 F5 | 	or	result1, ##53477376
1f14c     45 00 00 FF 
1f150     7C 65 06 F1 | 	add	objptr, ##35708
1f154     32 7B 62 FC | 	wrlong	result1, objptr
1f158     45 00 00 FF 
1f15c     7C 65 86 F1 | 	sub	objptr, ##35708
1f160     32 7B 02 F6 | 	mov	result1, objptr
1f164     00 A0 01 FF 
1f168     00 7A 46 F5 | 	or	result1, ##54525952
1f16c     45 00 00 FF 
1f170     80 65 06 F1 | 	add	objptr, ##35712
1f174     32 7B 62 FC | 	wrlong	result1, objptr
1f178     45 00 00 FF 
1f17c     80 65 86 F1 | 	sub	objptr, ##35712
1f180     32 7B 02 F6 | 	mov	result1, objptr
1f184     00 A8 01 FF 
1f188     00 7A 46 F5 | 	or	result1, ##55574528
1f18c     45 00 00 FF 
1f190     84 65 06 F1 | 	add	objptr, ##35716
1f194     32 7B 62 FC | 	wrlong	result1, objptr
1f198     45 00 00 FF 
1f19c     84 65 86 F1 | 	sub	objptr, ##35716
1f1a0     32 7B 02 F6 | 	mov	result1, objptr
1f1a4     00 B0 01 FF 
1f1a8     00 7A 46 F5 | 	or	result1, ##56623104
1f1ac     45 00 00 FF 
1f1b0     88 65 06 F1 | 	add	objptr, ##35720
1f1b4     32 7B 62 FC | 	wrlong	result1, objptr
1f1b8     45 00 00 FF 
1f1bc     88 65 86 F1 | 	sub	objptr, ##35720
1f1c0     32 7B 02 F6 | 	mov	result1, objptr
1f1c4     94 7A 26 F4 | 	bith	result1, #148
1f1c8     45 00 00 FF 
1f1cc     50 65 06 F1 | 	add	objptr, ##35664
1f1d0     32 7B 62 FC | 	wrlong	result1, objptr
1f1d4     45 00 00 FF 
1f1d8     50 65 86 F1 | 	sub	objptr, ##35664
1f1dc     32 7B 02 F6 | 	mov	result1, objptr
1f1e0     00 B8 01 FF 
1f1e4     00 7A 46 F5 | 	or	result1, ##57671680
1f1e8     45 00 00 FF 
1f1ec     90 65 06 F1 | 	add	objptr, ##35728
1f1f0     32 7B 62 FC | 	wrlong	result1, objptr
1f1f4     45 00 00 FF 
1f1f8     90 65 86 F1 | 	sub	objptr, ##35728
1f1fc     32 7B 02 F6 | 	mov	result1, objptr
1f200     57 7A 26 F4 | 	bith	result1, #87
1f204     45 00 00 FF 
1f208     8C 65 06 F1 | 	add	objptr, ##35724
1f20c     32 7B 62 FC | 	wrlong	result1, objptr
1f210     45 00 00 FF 
1f214     8C 65 86 F1 | 	sub	objptr, ##35724
1f218     32 7B 02 F6 | 	mov	result1, objptr
1f21c     00 C8 01 FF 
1f220     00 7A 46 F5 | 	or	result1, ##59768832
1f224     45 00 00 FF 
1f228     A4 65 06 F1 | 	add	objptr, ##35748
1f22c     32 7B 62 FC | 	wrlong	result1, objptr
1f230     45 00 00 FF 
1f234     A4 65 86 F1 | 	sub	objptr, ##35748
1f238     32 7B 02 F6 | 	mov	result1, objptr
1f23c     00 D0 01 FF 
1f240     00 7A 46 F5 | 	or	result1, ##60817408
1f244     45 00 00 FF 
1f248     A8 65 06 F1 | 	add	objptr, ##35752
1f24c     32 7B 62 FC | 	wrlong	result1, objptr
1f250     45 00 00 FF 
1f254     A8 65 86 F1 | 	sub	objptr, ##35752
1f258     32 7B 02 F6 | 	mov	result1, objptr
1f25c     00 D8 01 FF 
1f260     00 7A 46 F5 | 	or	result1, ##61865984
1f264     45 00 00 FF 
1f268     94 65 06 F1 | 	add	objptr, ##35732
1f26c     32 7B 62 FC | 	wrlong	result1, objptr
1f270     45 00 00 FF 
1f274     94 65 86 F1 | 	sub	objptr, ##35732
1f278     32 7B 02 F6 | 	mov	result1, objptr
1f27c     76 7A 26 F4 | 	bith	result1, #118
1f280     45 00 00 FF 
1f284     98 65 06 F1 | 	add	objptr, ##35736
1f288     32 7B 62 FC | 	wrlong	result1, objptr
1f28c     45 00 00 FF 
1f290     98 65 86 F1 | 	sub	objptr, ##35736
1f294     32 7B 02 F6 | 	mov	result1, objptr
1f298     00 E8 01 FF 
1f29c     00 7A 46 F5 | 	or	result1, ##63963136
1f2a0     45 00 00 FF 
1f2a4     9C 65 06 F1 | 	add	objptr, ##35740
1f2a8     32 7B 62 FC | 	wrlong	result1, objptr
1f2ac     45 00 00 FF 
1f2b0     9C 65 86 F1 | 	sub	objptr, ##35740
1f2b4     32 7B 02 F6 | 	mov	result1, objptr
1f2b8     95 7A 26 F4 | 	bith	result1, #149
1f2bc     45 00 00 FF 
1f2c0     A0 65 06 F1 | 	add	objptr, ##35744
1f2c4     32 7B 62 FC | 	wrlong	result1, objptr
1f2c8     45 00 00 FF 
1f2cc     A0 65 86 F1 | 	sub	objptr, ##35744
1f2d0     32 7B 02 F6 | 	mov	result1, objptr
1f2d4     B4 7A 26 F4 | 	bith	result1, #180
1f2d8     45 00 00 FF 
1f2dc     B0 65 06 F1 | 	add	objptr, ##35760
1f2e0     32 7B 62 FC | 	wrlong	result1, objptr
1f2e4     45 00 00 FF 
1f2e8     B0 65 86 F1 | 	sub	objptr, ##35760
1f2ec     32 7B 02 F6 | 	mov	result1, objptr
1f2f0     1A 7A 26 F4 | 	bith	result1, #26
1f2f4     45 00 00 FF 
1f2f8     AC 65 06 F1 | 	add	objptr, ##35756
1f2fc     32 7B 62 FC | 	wrlong	result1, objptr
1f300     45 00 00 FF 
1f304     AC 65 86 F1 | 	sub	objptr, ##35756
1f308     32 7B 02 F6 | 	mov	result1, objptr
1f30c     00 08 02 FF 
1f310     00 7A 46 F5 | 	or	result1, ##68157440
1f314     45 00 00 FF 
1f318     BC 65 06 F1 | 	add	objptr, ##35772
1f31c     32 7B 62 FC | 	wrlong	result1, objptr
1f320     45 00 00 FF 
1f324     BC 65 86 F1 | 	sub	objptr, ##35772
1f328     32 7B 02 F6 | 	mov	result1, objptr
1f32c     00 10 02 FF 
1f330     00 7A 46 F5 | 	or	result1, ##69206016
1f334     45 00 00 FF 
1f338     B8 65 06 F1 | 	add	objptr, ##35768
1f33c     32 7B 62 FC | 	wrlong	result1, objptr
1f340     45 00 00 FF 
1f344     B8 65 86 F1 | 	sub	objptr, ##35768
1f348     32 7B 02 F6 | 	mov	result1, objptr
1f34c     00 18 02 FF 
1f350     00 7A 46 F5 | 	or	result1, ##70254592
1f354     45 00 00 FF 
1f358     B4 65 06 F1 | 	add	objptr, ##35764
1f35c     32 7B 62 FC | 	wrlong	result1, objptr
1f360     45 00 00 FF 
1f364     B4 65 86 F1 | 	sub	objptr, ##35764
1f368     32 7B 02 F6 | 	mov	result1, objptr
1f36c     00 20 02 FF 
1f370     00 7A 46 F5 | 	or	result1, ##71303168
1f374     45 00 00 FF 
1f378     C0 65 06 F1 | 	add	objptr, ##35776
1f37c     32 7B 62 FC | 	wrlong	result1, objptr
1f380     45 00 00 FF 
1f384     C0 65 86 F1 | 	sub	objptr, ##35776
1f388     32 7B 02 F6 | 	mov	result1, objptr
1f38c     00 28 02 FF 
1f390     00 7A 46 F5 | 	or	result1, ##72351744
1f394     45 00 00 FF 
1f398     C4 65 06 F1 | 	add	objptr, ##35780
1f39c     32 7B 62 FC | 	wrlong	result1, objptr
1f3a0     45 00 00 FF 
1f3a4     C4 65 86 F1 | 	sub	objptr, ##35780
1f3a8     32 7B 02 F6 | 	mov	result1, objptr
1f3ac     00 30 02 FF 
1f3b0     00 7A 46 F5 | 	or	result1, ##73400320
1f3b4     45 00 00 FF 
1f3b8     58 64 06 F1 | 	add	objptr, ##35416
1f3bc     32 7B 62 FC | 	wrlong	result1, objptr
1f3c0     45 00 00 FF 
1f3c4     58 64 86 F1 | 	sub	objptr, ##35416
1f3c8     32 7B 02 F6 | 	mov	result1, objptr
1f3cc     00 38 02 FF 
1f3d0     00 7A 46 F5 | 	or	result1, ##74448896
1f3d4     45 00 00 FF 
1f3d8     DC 65 06 F1 | 	add	objptr, ##35804
1f3dc     32 7B 62 FC | 	wrlong	result1, objptr
1f3e0     45 00 00 FF 
1f3e4     DC 65 86 F1 | 	sub	objptr, ##35804
1f3e8     32 7B 02 F6 | 	mov	result1, objptr
1f3ec     00 40 02 FF 
1f3f0     00 7A 46 F5 | 	or	result1, ##75497472
1f3f4     45 00 00 FF 
1f3f8     EC 65 06 F1 | 	add	objptr, ##35820
1f3fc     32 7B 62 FC | 	wrlong	result1, objptr
1f400     45 00 00 FF 
1f404     EC 65 86 F1 | 	sub	objptr, ##35820
1f408     32 7B 02 F6 | 	mov	result1, objptr
1f40c     00 48 02 FF 
1f410     00 7A 46 F5 | 	or	result1, ##76546048
1f414     45 00 00 FF 
1f418     F0 65 06 F1 | 	add	objptr, ##35824
1f41c     32 7B 62 FC | 	wrlong	result1, objptr
1f420     45 00 00 FF 
1f424     F0 65 86 F1 | 	sub	objptr, ##35824
1f428     32 7B 02 F6 | 	mov	result1, objptr
1f42c     00 50 02 FF 
1f430     00 7A 46 F5 | 	or	result1, ##77594624
1f434     45 00 00 FF 
1f438     E8 65 06 F1 | 	add	objptr, ##35816
1f43c     32 7B 62 FC | 	wrlong	result1, objptr
1f440     45 00 00 FF 
1f444     E8 65 86 F1 | 	sub	objptr, ##35816
1f448     32 7B 02 F6 | 	mov	result1, objptr
1f44c     00 58 02 FF 
1f450     00 7A 46 F5 | 	or	result1, ##78643200
1f454     45 00 00 FF 
1f458     E0 65 06 F1 | 	add	objptr, ##35808
1f45c     32 7B 62 FC | 	wrlong	result1, objptr
1f460     45 00 00 FF 
1f464     E0 65 86 F1 | 	sub	objptr, ##35808
1f468     32 7B 02 F6 | 	mov	result1, objptr
1f46c     00 60 02 FF 
1f470     00 7A 46 F5 | 	or	result1, ##79691776
1f474     45 00 00 FF 
1f478     E4 65 06 F1 | 	add	objptr, ##35812
1f47c     32 7B 62 FC | 	wrlong	result1, objptr
1f480     45 00 00 FF 
1f484     E4 65 86 F1 | 	sub	objptr, ##35812
1f488     32 7B 02 F6 | 	mov	result1, objptr
1f48c     00 68 02 FF 
1f490     00 7A 46 F5 | 	or	result1, ##80740352
1f494     45 00 00 FF 
1f498     F4 65 06 F1 | 	add	objptr, ##35828
1f49c     32 7B 62 FC | 	wrlong	result1, objptr
1f4a0     45 00 00 FF 
1f4a4     F4 65 86 F1 | 	sub	objptr, ##35828
1f4a8     32 7B 02 F6 | 	mov	result1, objptr
1f4ac     00 70 02 FF 
1f4b0     00 7A 46 F5 | 	or	result1, ##81788928
1f4b4     45 00 00 FF 
1f4b8     F8 65 06 F1 | 	add	objptr, ##35832
1f4bc     32 7B 62 FC | 	wrlong	result1, objptr
1f4c0     45 00 00 FF 
1f4c4     F8 65 86 F1 | 	sub	objptr, ##35832
1f4c8     32 7B 02 F6 | 	mov	result1, objptr
1f4cc     00 78 02 FF 
1f4d0     00 7A 46 F5 | 	or	result1, ##82837504
1f4d4     45 00 00 FF 
1f4d8     FC 65 06 F1 | 	add	objptr, ##35836
1f4dc     32 7B 62 FC | 	wrlong	result1, objptr
1f4e0     45 00 00 FF 
1f4e4     FC 65 86 F1 | 	sub	objptr, ##35836
1f4e8     32 7B 02 F6 | 	mov	result1, objptr
1f4ec     00 80 02 FF 
1f4f0     00 7A 46 F5 | 	or	result1, ##83886080
1f4f4     46 00 00 FF 
1f4f8     00 64 06 F1 | 	add	objptr, ##35840
1f4fc     32 7B 62 FC | 	wrlong	result1, objptr
1f500     46 00 00 FF 
1f504     00 64 86 F1 | 	sub	objptr, ##35840
1f508     32 7B 02 F6 | 	mov	result1, objptr
1f50c     00 88 02 FF 
1f510     00 7A 46 F5 | 	or	result1, ##84934656
1f514     46 00 00 FF 
1f518     04 64 06 F1 | 	add	objptr, ##35844
1f51c     32 7B 62 FC | 	wrlong	result1, objptr
1f520     46 00 00 FF 
1f524     04 64 86 F1 | 	sub	objptr, ##35844
1f528     32 7B 02 F6 | 	mov	result1, objptr
1f52c     00 90 02 FF 
1f530     00 7A 46 F5 | 	or	result1, ##85983232
1f534     46 00 00 FF 
1f538     08 64 06 F1 | 	add	objptr, ##35848
1f53c     32 7B 62 FC | 	wrlong	result1, objptr
1f540     46 00 00 FF 
1f544     08 64 86 F1 | 	sub	objptr, ##35848
1f548     32 7B 02 F6 | 	mov	result1, objptr
1f54c     00 98 02 FF 
1f550     00 7A 46 F5 | 	or	result1, ##87031808
1f554     46 00 00 FF 
1f558     0C 64 06 F1 | 	add	objptr, ##35852
1f55c     32 7B 62 FC | 	wrlong	result1, objptr
1f560     46 00 00 FF 
1f564     0C 64 86 F1 | 	sub	objptr, ##35852
1f568     32 7B 02 F6 | 	mov	result1, objptr
1f56c     00 A0 02 FF 
1f570     00 7A 46 F5 | 	or	result1, ##88080384
1f574     46 00 00 FF 
1f578     10 64 06 F1 | 	add	objptr, ##35856
1f57c     32 7B 62 FC | 	wrlong	result1, objptr
1f580     46 00 00 FF 
1f584     10 64 86 F1 | 	sub	objptr, ##35856
1f588     32 7B 02 F6 | 	mov	result1, objptr
1f58c     00 A8 02 FF 
1f590     00 7A 46 F5 | 	or	result1, ##89128960
1f594     46 00 00 FF 
1f598     1C 64 06 F1 | 	add	objptr, ##35868
1f59c     32 7B 62 FC | 	wrlong	result1, objptr
1f5a0     46 00 00 FF 
1f5a4     1C 64 86 F1 | 	sub	objptr, ##35868
1f5a8     32 7B 02 F6 | 	mov	result1, objptr
1f5ac     00 B0 02 FF 
1f5b0     00 7A 46 F5 | 	or	result1, ##90177536
1f5b4     46 00 00 FF 
1f5b8     14 64 06 F1 | 	add	objptr, ##35860
1f5bc     32 7B 62 FC | 	wrlong	result1, objptr
1f5c0     46 00 00 FF 
1f5c4     14 64 86 F1 | 	sub	objptr, ##35860
1f5c8     32 7B 02 F6 | 	mov	result1, objptr
1f5cc     00 B8 02 FF 
1f5d0     00 7A 46 F5 | 	or	result1, ##91226112
1f5d4     46 00 00 FF 
1f5d8     18 64 06 F1 | 	add	objptr, ##35864
1f5dc     32 7B 62 FC | 	wrlong	result1, objptr
1f5e0     46 00 00 FF 
1f5e4     18 64 86 F1 | 	sub	objptr, ##35864
1f5e8     32 7B 02 F6 | 	mov	result1, objptr
1f5ec     00 C0 02 FF 
1f5f0     00 7A 46 F5 | 	or	result1, ##92274688
1f5f4     46 00 00 FF 
1f5f8     20 64 06 F1 | 	add	objptr, ##35872
1f5fc     32 7B 62 FC | 	wrlong	result1, objptr
1f600     46 00 00 FF 
1f604     20 64 86 F1 | 	sub	objptr, ##35872
1f608     32 7B 02 F6 | 	mov	result1, objptr
1f60c     00 C8 02 FF 
1f610     00 7A 46 F5 | 	or	result1, ##93323264
1f614     45 00 00 FF 
1f618     C8 65 06 F1 | 	add	objptr, ##35784
1f61c     32 7B 62 FC | 	wrlong	result1, objptr
1f620     45 00 00 FF 
1f624     C8 65 86 F1 | 	sub	objptr, ##35784
1f628     32 7B 02 F6 | 	mov	result1, objptr
1f62c     00 D0 02 FF 
1f630     00 7A 46 F5 | 	or	result1, ##94371840
1f634     45 00 00 FF 
1f638     D0 65 06 F1 | 	add	objptr, ##35792
1f63c     32 7B 62 FC | 	wrlong	result1, objptr
1f640     45 00 00 FF 
1f644     D0 65 86 F1 | 	sub	objptr, ##35792
1f648     32 7B 02 F6 | 	mov	result1, objptr
1f64c     00 D8 02 FF 
1f650     00 7A 46 F5 | 	or	result1, ##95420416
1f654     45 00 00 FF 
1f658     D4 65 06 F1 | 	add	objptr, ##35796
1f65c     32 7B 62 FC | 	wrlong	result1, objptr
1f660     45 00 00 FF 
1f664     D4 65 86 F1 | 	sub	objptr, ##35796
1f668     32 7B 02 F6 | 	mov	result1, objptr
1f66c     00 E0 02 FF 
1f670     00 7A 46 F5 | 	or	result1, ##96468992
1f674     46 00 00 FF 
1f678     24 64 06 F1 | 	add	objptr, ##35876
1f67c     32 7B 62 FC | 	wrlong	result1, objptr
1f680     46 00 00 FF 
1f684     24 64 86 F1 | 	sub	objptr, ##35876
1f688     32 7B 02 F6 | 	mov	result1, objptr
1f68c     00 E8 02 FF 
1f690     00 7A 46 F5 | 	or	result1, ##97517568
1f694     46 00 00 FF 
1f698     28 64 06 F1 | 	add	objptr, ##35880
1f69c     32 7B 62 FC | 	wrlong	result1, objptr
1f6a0     46 00 00 FF 
1f6a4     28 64 86 F1 | 	sub	objptr, ##35880
1f6a8     32 7B 02 F6 | 	mov	result1, objptr
1f6ac     00 F0 02 FF 
1f6b0     00 7A 46 F5 | 	or	result1, ##98566144
1f6b4     46 00 00 FF 
1f6b8     2C 64 06 F1 | 	add	objptr, ##35884
1f6bc     32 7B 62 FC | 	wrlong	result1, objptr
1f6c0     46 00 00 FF 
1f6c4     2C 64 86 F1 | 	sub	objptr, ##35884
1f6c8     32 7B 02 F6 | 	mov	result1, objptr
1f6cc     00 F8 02 FF 
1f6d0     00 7A 46 F5 | 	or	result1, ##99614720
1f6d4     45 00 00 FF 
1f6d8     D8 65 06 F1 | 	add	objptr, ##35800
1f6dc     32 7B 62 FC | 	wrlong	result1, objptr
1f6e0     45 00 00 FF 
1f6e4     D8 65 86 F1 | 	sub	objptr, ##35800
1f6e8     32 7B 02 F6 | 	mov	result1, objptr
1f6ec     39 7A 26 F4 | 	bith	result1, #57
1f6f0     46 00 00 FF 
1f6f4     3C 64 06 F1 | 	add	objptr, ##35900
1f6f8     32 7B 62 FC | 	wrlong	result1, objptr
1f6fc     46 00 00 FF 
1f700     3C 64 86 F1 | 	sub	objptr, ##35900
1f704     32 7B 02 F6 | 	mov	result1, objptr
1f708     00 08 03 FF 
1f70c     00 7A 46 F5 | 	or	result1, ##101711872
1f710     46 00 00 FF 
1f714     44 64 06 F1 | 	add	objptr, ##35908
1f718     32 7B 62 FC | 	wrlong	result1, objptr
1f71c     46 00 00 FF 
1f720     44 64 86 F1 | 	sub	objptr, ##35908
1f724     32 7B 02 F6 | 	mov	result1, objptr
1f728     00 10 03 FF 
1f72c     00 7A 46 F5 | 	or	result1, ##102760448
1f730     46 00 00 FF 
1f734     38 64 06 F1 | 	add	objptr, ##35896
1f738     32 7B 62 FC | 	wrlong	result1, objptr
1f73c     46 00 00 FF 
1f740     38 64 86 F1 | 	sub	objptr, ##35896
1f744     32 7B 02 F6 | 	mov	result1, objptr
1f748     00 18 03 FF 
1f74c     00 7A 46 F5 | 	or	result1, ##103809024
1f750     46 00 00 FF 
1f754     34 64 06 F1 | 	add	objptr, ##35892
1f758     32 7B 62 FC | 	wrlong	result1, objptr
1f75c     46 00 00 FF 
1f760     34 64 86 F1 | 	sub	objptr, ##35892
1f764     32 7B 02 F6 | 	mov	result1, objptr
1f768     00 20 03 FF 
1f76c     00 7A 46 F5 | 	or	result1, ##104857600
1f770     46 00 00 FF 
1f774     30 64 06 F1 | 	add	objptr, ##35888
1f778     32 7B 62 FC | 	wrlong	result1, objptr
1f77c     46 00 00 FF 
1f780     30 64 86 F1 | 	sub	objptr, ##35888
1f784     32 7B 02 F6 | 	mov	result1, objptr
1f788     00 28 03 FF 
1f78c     00 7A 46 F5 | 	or	result1, ##105906176
1f790     46 00 00 FF 
1f794     40 64 06 F1 | 	add	objptr, ##35904
1f798     32 7B 62 FC | 	wrlong	result1, objptr
1f79c     46 00 00 FF 
1f7a0     40 64 86 F1 | 	sub	objptr, ##35904
1f7a4     32 7B 02 F6 | 	mov	result1, objptr
1f7a8     00 30 03 FF 
1f7ac     00 7A 46 F5 | 	or	result1, ##106954752
1f7b0     46 00 00 FF 
1f7b4     48 64 06 F1 | 	add	objptr, ##35912
1f7b8     32 7B 62 FC | 	wrlong	result1, objptr
1f7bc     46 00 00 FF 
1f7c0     48 64 86 F1 | 	sub	objptr, ##35912
1f7c4     32 7B 02 F6 | 	mov	result1, objptr
1f7c8     00 38 03 FF 
1f7cc     00 7A 46 F5 | 	or	result1, ##108003328
1f7d0     46 00 00 FF 
1f7d4     4C 64 06 F1 | 	add	objptr, ##35916
1f7d8     32 7B 62 FC | 	wrlong	result1, objptr
1f7dc     46 00 00 FF 
1f7e0     4C 64 86 F1 | 	sub	objptr, ##35916
1f7e4     32 7B 02 F6 | 	mov	result1, objptr
1f7e8     00 40 03 FF 
1f7ec     00 7A 46 F5 | 	or	result1, ##109051904
1f7f0     46 00 00 FF 
1f7f4     50 64 06 F1 | 	add	objptr, ##35920
1f7f8     32 7B 62 FC | 	wrlong	result1, objptr
1f7fc     46 00 00 FF 
1f800     50 64 86 F1 | 	sub	objptr, ##35920
1f804     32 7B 02 F6 | 	mov	result1, objptr
1f808     00 48 03 FF 
1f80c     00 7A 46 F5 | 	or	result1, ##110100480
1f810     46 00 00 FF 
1f814     58 64 06 F1 | 	add	objptr, ##35928
1f818     32 7B 62 FC | 	wrlong	result1, objptr
1f81c     46 00 00 FF 
1f820     58 64 86 F1 | 	sub	objptr, ##35928
1f824     32 7B 02 F6 | 	mov	result1, objptr
1f828     00 50 03 FF 
1f82c     00 7A 46 F5 | 	or	result1, ##111149056
1f830     46 00 00 FF 
1f834     5C 64 06 F1 | 	add	objptr, ##35932
1f838     32 7B 62 FC | 	wrlong	result1, objptr
1f83c     46 00 00 FF 
1f840     5C 64 86 F1 | 	sub	objptr, ##35932
1f844     32 7B 02 F6 | 	mov	result1, objptr
1f848     00 58 03 FF 
1f84c     00 7A 46 F5 | 	or	result1, ##112197632
1f850     46 00 00 FF 
1f854     60 64 06 F1 | 	add	objptr, ##35936
1f858     32 7B 62 FC | 	wrlong	result1, objptr
1f85c     46 00 00 FF 
1f860     60 64 86 F1 | 	sub	objptr, ##35936
1f864     32 7B 02 F6 | 	mov	result1, objptr
1f868     00 60 03 FF 
1f86c     00 7A 46 F5 | 	or	result1, ##113246208
1f870     46 00 00 FF 
1f874     64 64 06 F1 | 	add	objptr, ##35940
1f878     32 7B 62 FC | 	wrlong	result1, objptr
1f87c     46 00 00 FF 
1f880     64 64 86 F1 | 	sub	objptr, ##35940
1f884     32 7B 02 F6 | 	mov	result1, objptr
1f888     00 68 03 FF 
1f88c     00 7A 46 F5 | 	or	result1, ##114294784
1f890     46 00 00 FF 
1f894     68 64 06 F1 | 	add	objptr, ##35944
1f898     32 7B 62 FC | 	wrlong	result1, objptr
1f89c     46 00 00 FF 
1f8a0     68 64 86 F1 | 	sub	objptr, ##35944
1f8a4     32 7B 02 F6 | 	mov	result1, objptr
1f8a8     00 70 03 FF 
1f8ac     00 7A 46 F5 | 	or	result1, ##115343360
1f8b0     46 00 00 FF 
1f8b4     6C 64 06 F1 | 	add	objptr, ##35948
1f8b8     32 7B 62 FC | 	wrlong	result1, objptr
1f8bc     46 00 00 FF 
1f8c0     6C 64 86 F1 | 	sub	objptr, ##35948
1f8c4     32 7B 02 F6 | 	mov	result1, objptr
1f8c8     00 08 01 FF 
1f8cc     00 7A 46 F5 | 	or	result1, ##34603008
1f8d0     46 00 00 FF 
1f8d4     70 64 06 F1 | 	add	objptr, ##35952
1f8d8     32 7B 62 FC | 	wrlong	result1, objptr
1f8dc     46 00 00 FF 
1f8e0     70 64 86 F1 | 	sub	objptr, ##35952
1f8e4     32 7B 02 F6 | 	mov	result1, objptr
1f8e8     00 78 03 FF 
1f8ec     00 7A 46 F5 | 	or	result1, ##116391936
1f8f0     46 00 00 FF 
1f8f4     74 64 06 F1 | 	add	objptr, ##35956
1f8f8     32 7B 62 FC | 	wrlong	result1, objptr
1f8fc     46 00 00 FF 
1f900     74 64 86 F1 | 	sub	objptr, ##35956
1f904     32 7B 02 F6 | 	mov	result1, objptr
1f908     58 7A 26 F4 | 	bith	result1, #88
1f90c     46 00 00 FF 
1f910     54 64 06 F1 | 	add	objptr, ##35924
1f914     32 7B 62 FC | 	wrlong	result1, objptr
1f918     46 00 00 FF 
1f91c     54 64 86 F1 | 	sub	objptr, ##35924
1f920     32 7B 02 F6 | 	mov	result1, objptr
1f924     00 88 03 FF 
1f928     00 7A 46 F5 | 	or	result1, ##118489088
1f92c     45 00 00 FF 
1f930     4C 64 06 F1 | 	add	objptr, ##35404
1f934     32 7B 62 FC | 	wrlong	result1, objptr
1f938     45 00 00 FF 
1f93c     4C 64 86 F1 | 	sub	objptr, ##35404
1f940     32 7B 02 F6 | 	mov	result1, objptr
1f944     00 90 03 FF 
1f948     00 7A 46 F5 | 	or	result1, ##119537664
1f94c     46 00 00 FF 
1f950     78 64 06 F1 | 	add	objptr, ##35960
1f954     32 7B 62 FC | 	wrlong	result1, objptr
1f958     46 00 00 FF 
1f95c     78 64 86 F1 | 	sub	objptr, ##35960
1f960     32 7B 02 F6 | 	mov	result1, objptr
1f964     00 98 03 FF 
1f968     00 7A 46 F5 | 	or	result1, ##120586240
1f96c     46 00 00 FF 
1f970     7C 64 06 F1 | 	add	objptr, ##35964
1f974     32 7B 62 FC | 	wrlong	result1, objptr
1f978     46 00 00 FF 
1f97c     7C 64 86 F1 | 	sub	objptr, ##35964
1f980     32 7B 02 F6 | 	mov	result1, objptr
1f984     00 A0 03 FF 
1f988     00 7A 46 F5 | 	or	result1, ##121634816
1f98c     46 00 00 FF 
1f990     90 64 06 F1 | 	add	objptr, ##35984
1f994     32 7B 62 FC | 	wrlong	result1, objptr
1f998     46 00 00 FF 
1f99c     90 64 86 F1 | 	sub	objptr, ##35984
1f9a0     32 7B 02 F6 | 	mov	result1, objptr
1f9a4     00 A8 03 FF 
1f9a8     00 7A 46 F5 | 	or	result1, ##122683392
1f9ac     46 00 00 FF 
1f9b0     8C 64 06 F1 | 	add	objptr, ##35980
1f9b4     32 7B 62 FC | 	wrlong	result1, objptr
1f9b8     46 00 00 FF 
1f9bc     8C 64 86 F1 | 	sub	objptr, ##35980
1f9c0     32 7B 02 F6 | 	mov	result1, objptr
1f9c4     00 B0 03 FF 
1f9c8     00 7A 46 F5 | 	or	result1, ##123731968
1f9cc     46 00 00 FF 
1f9d0     84 64 06 F1 | 	add	objptr, ##35972
1f9d4     32 7B 62 FC | 	wrlong	result1, objptr
1f9d8     46 00 00 FF 
1f9dc     84 64 86 F1 | 	sub	objptr, ##35972
1f9e0     32 7B 02 F6 | 	mov	result1, objptr
1f9e4     00 B8 03 FF 
1f9e8     00 7A 46 F5 | 	or	result1, ##124780544
1f9ec     46 00 00 FF 
1f9f0     80 64 06 F1 | 	add	objptr, ##35968
1f9f4     32 7B 62 FC | 	wrlong	result1, objptr
1f9f8     46 00 00 FF 
1f9fc     80 64 86 F1 | 	sub	objptr, ##35968
1fa00     32 7B 02 F6 | 	mov	result1, objptr
1fa04     77 7A 26 F4 | 	bith	result1, #119
1fa08     46 00 00 FF 
1fa0c     A0 64 06 F1 | 	add	objptr, ##36000
1fa10     32 7B 62 FC | 	wrlong	result1, objptr
1fa14     46 00 00 FF 
1fa18     A0 64 86 F1 | 	sub	objptr, ##36000
1fa1c     32 7B 02 F6 | 	mov	result1, objptr
1fa20     00 C8 03 FF 
1fa24     00 7A 46 F5 | 	or	result1, ##126877696
1fa28     46 00 00 FF 
1fa2c     94 64 06 F1 | 	add	objptr, ##35988
1fa30     32 7B 62 FC | 	wrlong	result1, objptr
1fa34     46 00 00 FF 
1fa38     94 64 86 F1 | 	sub	objptr, ##35988
1fa3c     32 7B 02 F6 | 	mov	result1, objptr
1fa40     00 D0 03 FF 
1fa44     00 7A 46 F5 | 	or	result1, ##127926272
1fa48     46 00 00 FF 
1fa4c     98 64 06 F1 | 	add	objptr, ##35992
1fa50     32 7B 62 FC | 	wrlong	result1, objptr
1fa54     46 00 00 FF 
1fa58     98 64 86 F1 | 	sub	objptr, ##35992
1fa5c     32 7B 02 F6 | 	mov	result1, objptr
1fa60     00 D8 03 FF 
1fa64     00 7A 46 F5 | 	or	result1, ##128974848
1fa68     46 00 00 FF 
1fa6c     9C 64 06 F1 | 	add	objptr, ##35996
1fa70     32 7B 62 FC | 	wrlong	result1, objptr
1fa74     46 00 00 FF 
1fa78     9C 64 86 F1 | 	sub	objptr, ##35996
1fa7c     32 7B 02 F6 | 	mov	result1, objptr
1fa80     96 7A 26 F4 | 	bith	result1, #150
1fa84     46 00 00 FF 
1fa88     A4 64 06 F1 | 	add	objptr, ##36004
1fa8c     32 7B 62 FC | 	wrlong	result1, objptr
1fa90     46 00 00 FF 
1fa94     A4 64 86 F1 | 	sub	objptr, ##36004
1fa98     32 7B 02 F6 | 	mov	result1, objptr
1fa9c     00 E8 03 FF 
1faa0     00 7A 46 F5 | 	or	result1, ##131072000
1faa4     46 00 00 FF 
1faa8     A8 64 06 F1 | 	add	objptr, ##36008
1faac     32 7B 62 FC | 	wrlong	result1, objptr
1fab0     46 00 00 FF 
1fab4     A8 64 86 F1 | 	sub	objptr, ##36008
1fab8     32 7B 02 F6 | 	mov	result1, objptr
1fabc     B5 7A 26 F4 | 	bith	result1, #181
1fac0     46 00 00 FF 
1fac4     AC 64 06 F1 | 	add	objptr, ##36012
1fac8     32 7B 62 FC | 	wrlong	result1, objptr
1facc     46 00 00 FF 
1fad0     AC 64 86 F1 | 	sub	objptr, ##36012
1fad4     32 7B 02 F6 | 	mov	result1, objptr
1fad8     D4 7A 26 F4 | 	bith	result1, #212
1fadc     46 00 00 FF 
1fae0     B0 64 06 F1 | 	add	objptr, ##36016
1fae4     32 7B 62 FC | 	wrlong	result1, objptr
1fae8     46 00 00 FF 
1faec     B0 64 86 F1 | 	sub	objptr, ##36016
1faf0     32 7B 02 F6 | 	mov	result1, objptr
1faf4     1B 7A 26 F4 | 	bith	result1, #27
1faf8     46 00 00 FF 
1fafc     B4 64 06 F1 | 	add	objptr, ##36020
1fb00     32 7B 62 FC | 	wrlong	result1, objptr
1fb04     46 00 00 FF 
1fb08     B4 64 86 F1 | 	sub	objptr, ##36020
1fb0c     32 7B 02 F6 | 	mov	result1, objptr
1fb10     00 08 04 FF 
1fb14     00 7A 46 F5 | 	or	result1, ##135266304
1fb18     46 00 00 FF 
1fb1c     B8 64 06 F1 | 	add	objptr, ##36024
1fb20     32 7B 62 FC | 	wrlong	result1, objptr
1fb24     46 00 00 FF 
1fb28     B8 64 86 F1 | 	sub	objptr, ##36024
1fb2c     32 7B 02 F6 | 	mov	result1, objptr
1fb30     00 10 04 FF 
1fb34     00 7A 46 F5 | 	or	result1, ##136314880
1fb38     46 00 00 FF 
1fb3c     C0 64 06 F1 | 	add	objptr, ##36032
1fb40     32 7B 62 FC | 	wrlong	result1, objptr
1fb44     46 00 00 FF 
1fb48     C0 64 86 F1 | 	sub	objptr, ##36032
1fb4c     32 7B 02 F6 | 	mov	result1, objptr
1fb50     00 18 04 FF 
1fb54     00 7A 46 F5 | 	or	result1, ##137363456
1fb58     46 00 00 FF 
1fb5c     C4 64 06 F1 | 	add	objptr, ##36036
1fb60     32 7B 62 FC | 	wrlong	result1, objptr
1fb64     46 00 00 FF 
1fb68     C4 64 86 F1 | 	sub	objptr, ##36036
1fb6c     32 7B 02 F6 | 	mov	result1, objptr
1fb70     00 20 04 FF 
1fb74     00 7A 46 F5 | 	or	result1, ##138412032
1fb78     46 00 00 FF 
1fb7c     C8 64 06 F1 | 	add	objptr, ##36040
1fb80     32 7B 62 FC | 	wrlong	result1, objptr
1fb84     46 00 00 FF 
1fb88     C8 64 86 F1 | 	sub	objptr, ##36040
1fb8c     32 7B 02 F6 | 	mov	result1, objptr
1fb90     00 28 04 FF 
1fb94     00 7A 46 F5 | 	or	result1, ##139460608
1fb98     46 00 00 FF 
1fb9c     BC 64 06 F1 | 	add	objptr, ##36028
1fba0     32 7B 62 FC | 	wrlong	result1, objptr
1fba4     46 00 00 FF 
1fba8     BC 64 86 F1 | 	sub	objptr, ##36028
1fbac     32 7B 02 F6 | 	mov	result1, objptr
1fbb0     00 30 04 FF 
1fbb4     00 7A 46 F5 | 	or	result1, ##140509184
1fbb8     46 00 00 FF 
1fbbc     CC 64 06 F1 | 	add	objptr, ##36044
1fbc0     32 7B 62 FC | 	wrlong	result1, objptr
1fbc4     46 00 00 FF 
1fbc8     CC 64 86 F1 | 	sub	objptr, ##36044
1fbcc     32 7B 02 F6 | 	mov	result1, objptr
1fbd0     00 38 04 FF 
1fbd4     00 7A 46 F5 | 	or	result1, ##141557760
1fbd8     46 00 00 FF 
1fbdc     00 65 06 F1 | 	add	objptr, ##36096
1fbe0     32 7B 62 FC | 	wrlong	result1, objptr
1fbe4     46 00 00 FF 
1fbe8     00 65 86 F1 | 	sub	objptr, ##36096
1fbec     32 7B 02 F6 | 	mov	result1, objptr
1fbf0     00 40 04 FF 
1fbf4     00 7A 46 F5 | 	or	result1, ##142606336
1fbf8     46 00 00 FF 
1fbfc     F8 64 06 F1 | 	add	objptr, ##36088
1fc00     32 7B 62 FC | 	wrlong	result1, objptr
1fc04     46 00 00 FF 
1fc08     F8 64 86 F1 | 	sub	objptr, ##36088
1fc0c     32 7B 02 F6 | 	mov	result1, objptr
1fc10     00 48 04 FF 
1fc14     00 7A 46 F5 | 	or	result1, ##143654912
1fc18     46 00 00 FF 
1fc1c     D0 64 06 F1 | 	add	objptr, ##36048
1fc20     32 7B 62 FC | 	wrlong	result1, objptr
1fc24     46 00 00 FF 
1fc28     D0 64 86 F1 | 	sub	objptr, ##36048
1fc2c     32 7B 02 F6 | 	mov	result1, objptr
1fc30     00 50 04 FF 
1fc34     00 7A 46 F5 | 	or	result1, ##144703488
1fc38     46 00 00 FF 
1fc3c     D4 64 06 F1 | 	add	objptr, ##36052
1fc40     32 7B 62 FC | 	wrlong	result1, objptr
1fc44     46 00 00 FF 
1fc48     D4 64 86 F1 | 	sub	objptr, ##36052
1fc4c     32 7B 02 F6 | 	mov	result1, objptr
1fc50     00 58 04 FF 
1fc54     00 7A 46 F5 | 	or	result1, ##145752064
1fc58     46 00 00 FF 
1fc5c     F0 64 06 F1 | 	add	objptr, ##36080
1fc60     32 7B 62 FC | 	wrlong	result1, objptr
1fc64     46 00 00 FF 
1fc68     F0 64 86 F1 | 	sub	objptr, ##36080
1fc6c     32 7B 02 F6 | 	mov	result1, objptr
1fc70     00 60 04 FF 
1fc74     00 7A 46 F5 | 	or	result1, ##146800640
1fc78     46 00 00 FF 
1fc7c     F4 64 06 F1 | 	add	objptr, ##36084
1fc80     32 7B 62 FC | 	wrlong	result1, objptr
1fc84     46 00 00 FF 
1fc88     F4 64 86 F1 | 	sub	objptr, ##36084
1fc8c     32 7B 02 F6 | 	mov	result1, objptr
1fc90     00 68 04 FF 
1fc94     00 7A 46 F5 | 	or	result1, ##147849216
1fc98     46 00 00 FF 
1fc9c     10 65 06 F1 | 	add	objptr, ##36112
1fca0     32 7B 62 FC | 	wrlong	result1, objptr
1fca4     46 00 00 FF 
1fca8     10 65 86 F1 | 	sub	objptr, ##36112
1fcac     32 7B 02 F6 | 	mov	result1, objptr
1fcb0     00 70 04 FF 
1fcb4     00 7A 46 F5 | 	or	result1, ##148897792
1fcb8     46 00 00 FF 
1fcbc     0C 65 06 F1 | 	add	objptr, ##36108
1fcc0     32 7B 62 FC | 	wrlong	result1, objptr
1fcc4     46 00 00 FF 
1fcc8     0C 65 86 F1 | 	sub	objptr, ##36108
1fccc     32 7B 02 F6 | 	mov	result1, objptr
1fcd0     00 78 04 FF 
1fcd4     00 7A 46 F5 | 	or	result1, ##149946368
1fcd8     46 00 00 FF 
1fcdc     1C 65 06 F1 | 	add	objptr, ##36124
1fce0     32 7B 62 FC | 	wrlong	result1, objptr
1fce4     46 00 00 FF 
1fce8     1C 65 86 F1 | 	sub	objptr, ##36124
1fcec     32 7B 02 F6 | 	mov	result1, objptr
1fcf0     00 80 04 FF 
1fcf4     00 7A 46 F5 | 	or	result1, ##150994944
1fcf8     46 00 00 FF 
1fcfc     E8 64 06 F1 | 	add	objptr, ##36072
1fd00     32 7B 62 FC | 	wrlong	result1, objptr
1fd04     46 00 00 FF 
1fd08     E8 64 86 F1 | 	sub	objptr, ##36072
1fd0c     32 7B 02 F6 | 	mov	result1, objptr
1fd10     00 88 04 FF 
1fd14     00 7A 46 F5 | 	or	result1, ##152043520
1fd18     46 00 00 FF 
1fd1c     18 65 06 F1 | 	add	objptr, ##36120
1fd20     32 7B 62 FC | 	wrlong	result1, objptr
1fd24     46 00 00 FF 
1fd28     18 65 86 F1 | 	sub	objptr, ##36120
1fd2c     32 7B 02 F6 | 	mov	result1, objptr
1fd30     00 90 04 FF 
1fd34     00 7A 46 F5 | 	or	result1, ##153092096
1fd38     46 00 00 FF 
1fd3c     08 65 06 F1 | 	add	objptr, ##36104
1fd40     32 7B 62 FC | 	wrlong	result1, objptr
1fd44     46 00 00 FF 
1fd48     08 65 86 F1 | 	sub	objptr, ##36104
1fd4c     32 7B 02 F6 | 	mov	result1, objptr
1fd50     00 98 04 FF 
1fd54     00 7A 46 F5 | 	or	result1, ##154140672
1fd58     45 00 00 FF 
1fd5c     B8 64 06 F1 | 	add	objptr, ##35512
1fd60     32 7B 62 FC | 	wrlong	result1, objptr
1fd64     45 00 00 FF 
1fd68     B8 64 86 F1 | 	sub	objptr, ##35512
1fd6c     32 7B 02 F6 | 	mov	result1, objptr
1fd70     00 A0 04 FF 
1fd74     00 7A 46 F5 | 	or	result1, ##155189248
1fd78     46 00 00 FF 
1fd7c     D8 64 06 F1 | 	add	objptr, ##36056
1fd80     32 7B 62 FC | 	wrlong	result1, objptr
1fd84     46 00 00 FF 
1fd88     D8 64 86 F1 | 	sub	objptr, ##36056
1fd8c     32 7B 02 F6 | 	mov	result1, objptr
1fd90     00 08 01 FF 
1fd94     00 7A 46 F5 | 	or	result1, ##34603008
1fd98     46 00 00 FF 
1fd9c     E0 64 06 F1 | 	add	objptr, ##36064
1fda0     32 7B 62 FC | 	wrlong	result1, objptr
1fda4     46 00 00 FF 
1fda8     E0 64 86 F1 | 	sub	objptr, ##36064
1fdac     32 7B 02 F6 | 	mov	result1, objptr
1fdb0     00 A8 04 FF 
1fdb4     00 7A 46 F5 | 	or	result1, ##156237824
1fdb8     46 00 00 FF 
1fdbc     DC 64 06 F1 | 	add	objptr, ##36060
1fdc0     32 7B 62 FC | 	wrlong	result1, objptr
1fdc4     46 00 00 FF 
1fdc8     DC 64 86 F1 | 	sub	objptr, ##36060
1fdcc     32 7B 02 F6 | 	mov	result1, objptr
1fdd0     00 B0 04 FF 
1fdd4     00 7A 46 F5 | 	or	result1, ##157286400
1fdd8     46 00 00 FF 
1fddc     20 65 06 F1 | 	add	objptr, ##36128
1fde0     32 7B 62 FC | 	wrlong	result1, objptr
1fde4     46 00 00 FF 
1fde8     20 65 86 F1 | 	sub	objptr, ##36128
1fdec     32 7B 02 F6 | 	mov	result1, objptr
1fdf0     00 B8 04 FF 
1fdf4     00 7A 46 F5 | 	or	result1, ##158334976
1fdf8     46 00 00 FF 
1fdfc     24 65 06 F1 | 	add	objptr, ##36132
1fe00     32 7B 62 FC | 	wrlong	result1, objptr
1fe04     46 00 00 FF 
1fe08     24 65 86 F1 | 	sub	objptr, ##36132
1fe0c     32 7B 02 F6 | 	mov	result1, objptr
1fe10     00 C0 04 FF 
1fe14     00 7A 46 F5 | 	or	result1, ##159383552
1fe18     46 00 00 FF 
1fe1c     28 65 06 F1 | 	add	objptr, ##36136
1fe20     32 7B 62 FC | 	wrlong	result1, objptr
1fe24     46 00 00 FF 
1fe28     28 65 86 F1 | 	sub	objptr, ##36136
1fe2c     32 7B 02 F6 | 	mov	result1, objptr
1fe30     00 C8 04 FF 
1fe34     00 7A 46 F5 | 	or	result1, ##160432128
1fe38     46 00 00 FF 
1fe3c     2C 65 06 F1 | 	add	objptr, ##36140
1fe40     32 7B 62 FC | 	wrlong	result1, objptr
1fe44     46 00 00 FF 
1fe48     2C 65 86 F1 | 	sub	objptr, ##36140
1fe4c     32 7B 02 F6 | 	mov	result1, objptr
1fe50     00 D0 04 FF 
1fe54     00 7A 46 F5 | 	or	result1, ##161480704
1fe58     46 00 00 FF 
1fe5c     34 65 06 F1 | 	add	objptr, ##36148
1fe60     32 7B 62 FC | 	wrlong	result1, objptr
1fe64     46 00 00 FF 
1fe68     34 65 86 F1 | 	sub	objptr, ##36148
1fe6c     32 7B 02 F6 | 	mov	result1, objptr
1fe70     00 D8 04 FF 
1fe74     00 7A 46 F5 | 	or	result1, ##162529280
1fe78     46 00 00 FF 
1fe7c     38 65 06 F1 | 	add	objptr, ##36152
1fe80     32 7B 62 FC | 	wrlong	result1, objptr
1fe84     46 00 00 FF 
1fe88     38 65 86 F1 | 	sub	objptr, ##36152
1fe8c     32 7B 02 F6 | 	mov	result1, objptr
1fe90     00 E0 04 FF 
1fe94     00 7A 46 F5 | 	or	result1, ##163577856
1fe98     46 00 00 FF 
1fe9c     3C 65 06 F1 | 	add	objptr, ##36156
1fea0     32 7B 62 FC | 	wrlong	result1, objptr
1fea4     46 00 00 FF 
1fea8     3C 65 86 F1 | 	sub	objptr, ##36156
1feac     32 7B 02 F6 | 	mov	result1, objptr
1feb0     00 E8 04 FF 
1feb4     00 7A 46 F5 | 	or	result1, ##164626432
1feb8     46 00 00 FF 
1febc     5C 65 06 F1 | 	add	objptr, ##36188
1fec0     32 7B 62 FC | 	wrlong	result1, objptr
1fec4     46 00 00 FF 
1fec8     5C 65 86 F1 | 	sub	objptr, ##36188
1fecc     32 7B 02 F6 | 	mov	result1, objptr
1fed0     00 F0 04 FF 
1fed4     00 7A 46 F5 | 	or	result1, ##165675008
1fed8     46 00 00 FF 
1fedc     58 65 06 F1 | 	add	objptr, ##36184
1fee0     32 7B 62 FC | 	wrlong	result1, objptr
1fee4     46 00 00 FF 
1fee8     58 65 86 F1 | 	sub	objptr, ##36184
1feec     32 7B 02 F6 | 	mov	result1, objptr
1fef0     00 F8 04 FF 
1fef4     00 7A 46 F5 | 	or	result1, ##166723584
1fef8     46 00 00 FF 
1fefc     14 65 06 F1 | 	add	objptr, ##36116
1ff00     32 7B 62 FC | 	wrlong	result1, objptr
1ff04     46 00 00 FF 
1ff08     14 65 86 F1 | 	sub	objptr, ##36116
1ff0c     32 7B 02 F6 | 	mov	result1, objptr
1ff10     00 00 05 FF 
1ff14     00 7A 46 F5 | 	or	result1, ##167772160
1ff18     46 00 00 FF 
1ff1c     04 65 06 F1 | 	add	objptr, ##36100
1ff20     32 7B 62 FC | 	wrlong	result1, objptr
1ff24     46 00 00 FF 
1ff28     04 65 86 F1 | 	sub	objptr, ##36100
1ff2c     32 7B 02 F6 | 	mov	result1, objptr
1ff30     00 08 05 FF 
1ff34     00 7A 46 F5 | 	or	result1, ##168820736
1ff38     46 00 00 FF 
1ff3c     40 65 06 F1 | 	add	objptr, ##36160
1ff40     32 7B 62 FC | 	wrlong	result1, objptr
1ff44     46 00 00 FF 
1ff48     40 65 86 F1 | 	sub	objptr, ##36160
1ff4c     32 7B 02 F6 | 	mov	result1, objptr
1ff50     00 10 05 FF 
1ff54     00 7A 46 F5 | 	or	result1, ##169869312
1ff58     46 00 00 FF 
1ff5c     44 65 06 F1 | 	add	objptr, ##36164
1ff60     32 7B 62 FC | 	wrlong	result1, objptr
1ff64     46 00 00 FF 
1ff68     44 65 86 F1 | 	sub	objptr, ##36164
1ff6c     32 7B 02 F6 | 	mov	result1, objptr
1ff70     00 18 05 FF 
1ff74     00 7A 46 F5 | 	or	result1, ##170917888
1ff78     46 00 00 FF 
1ff7c     48 65 06 F1 | 	add	objptr, ##36168
1ff80     32 7B 62 FC | 	wrlong	result1, objptr
1ff84     46 00 00 FF 
1ff88     48 65 86 F1 | 	sub	objptr, ##36168
1ff8c     32 7B 02 F6 | 	mov	result1, objptr
1ff90     00 20 05 FF 
1ff94     00 7A 46 F5 | 	or	result1, ##171966464
1ff98     46 00 00 FF 
1ff9c     4C 65 06 F1 | 	add	objptr, ##36172
1ffa0     32 7B 62 FC | 	wrlong	result1, objptr
1ffa4     46 00 00 FF 
1ffa8     4C 65 86 F1 | 	sub	objptr, ##36172
1ffac     32 7B 02 F6 | 	mov	result1, objptr
1ffb0     00 28 05 FF 
1ffb4     00 7A 46 F5 | 	or	result1, ##173015040
1ffb8     46 00 00 FF 
1ffbc     50 65 06 F1 | 	add	objptr, ##36176
1ffc0     32 7B 62 FC | 	wrlong	result1, objptr
1ffc4     46 00 00 FF 
1ffc8     50 65 86 F1 | 	sub	objptr, ##36176
1ffcc     32 7B 02 F6 | 	mov	result1, objptr
1ffd0     00 30 05 FF 
1ffd4     00 7A 46 F5 | 	or	result1, ##174063616
1ffd8     46 00 00 FF 
1ffdc     68 65 06 F1 | 	add	objptr, ##36200
1ffe0     32 7B 62 FC | 	wrlong	result1, objptr
1ffe4     46 00 00 FF 
1ffe8     68 65 86 F1 | 	sub	objptr, ##36200
1ffec     32 7B 02 F6 | 	mov	result1, objptr
1fff0     00 38 05 FF 
1fff4     00 7A 46 F5 | 	or	result1, ##175112192
1fff8     46 00 00 FF 
1fffc     54 65 06 F1 | 	add	objptr, ##36180
20000     32 7B 62 FC | 	wrlong	result1, objptr
20004     46 00 00 FF 
20008     54 65 86 F1 | 	sub	objptr, ##36180
2000c     32 7B 02 F6 | 	mov	result1, objptr
20010     00 40 05 FF 
20014     00 7A 46 F5 | 	or	result1, ##176160768
20018     46 00 00 FF 
2001c     60 65 06 F1 | 	add	objptr, ##36192
20020     32 7B 62 FC | 	wrlong	result1, objptr
20024     46 00 00 FF 
20028     60 65 86 F1 | 	sub	objptr, ##36192
2002c     32 7B 02 F6 | 	mov	result1, objptr
20030     00 48 05 FF 
20034     00 7A 46 F5 | 	or	result1, ##177209344
20038     46 00 00 FF 
2003c     64 65 06 F1 | 	add	objptr, ##36196
20040     32 7B 62 FC | 	wrlong	result1, objptr
20044     46 00 00 FF 
20048     64 65 86 F1 | 	sub	objptr, ##36196
2004c     32 7B 02 F6 | 	mov	result1, objptr
20050     00 50 05 FF 
20054     00 7A 46 F5 | 	or	result1, ##178257920
20058     46 00 00 FF 
2005c     6C 65 06 F1 | 	add	objptr, ##36204
20060     32 7B 62 FC | 	wrlong	result1, objptr
20064     46 00 00 FF 
20068     6C 65 86 F1 | 	sub	objptr, ##36204
2006c     32 7B 02 F6 | 	mov	result1, objptr
20070     00 58 05 FF 
20074     00 7A 46 F5 | 	or	result1, ##179306496
20078     46 00 00 FF 
2007c     70 65 06 F1 | 	add	objptr, ##36208
20080     32 7B 62 FC | 	wrlong	result1, objptr
20084     46 00 00 FF 
20088     70 65 86 F1 | 	sub	objptr, ##36208
2008c     32 7B 02 F6 | 	mov	result1, objptr
20090     00 60 05 FF 
20094     00 7A 46 F5 | 	or	result1, ##180355072
20098     46 00 00 FF 
2009c     88 64 06 F1 | 	add	objptr, ##35976
200a0     32 7B 62 FC | 	wrlong	result1, objptr
200a4     46 00 00 FF 
200a8     88 64 86 F1 | 	sub	objptr, ##35976
200ac                 | _init_commands_ret
200ac     2D 00 64 FD | 	ret
200b0                 | 
200b0                 | ' 
200b0                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
200b0                 | ' 
200b0                 | ' sub init_audio
200b0                 | _init_audio
200b0     07 CA 05 F6 | 	mov	COUNT_, #7
200b4     E8 00 A0 FD | 	call	#pushregs_
200b8     00 C0 1F FF 
200bc     00 A6 06 F6 | 	mov	local01, ##1065353216
200c0                 | ' 
200c0                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
200c0     00 A8 06 F6 | 	mov	local02, #0
200c4                 | LR__2600
200c4     54 AB 02 F6 | 	mov	local03, local02
200c8     01 AA 66 F0 | 	shl	local03, #1
200cc     58 7F 23 FF 
200d0     00 AC 06 F6 | 	mov	local04, ##1191096320
200d4     54 93 52 F6 | 	abs	arg01, local02 wc
200d8     1F AE C6 C9 |  if_b	decod	local05, #31
200dc     00 AE 06 36 |  if_ae	mov	local05, #0
200e0     E4 6B B0 FD | 	call	#__system___float_fromuns
200e4     57 7B 62 F5 | 	xor	result1, local05
200e8     3D 93 02 F6 | 	mov	arg01, result1
200ec     87 24 20 FF 
200f0     DB 95 06 F6 | 	mov	arg02, ##1078530011
200f4     D4 6F B0 FD | 	call	#__system___float_mul
200f8     3D 93 02 F6 | 	mov	arg01, result1
200fc     00 00 22 FF 
20100     00 94 06 F6 | 	mov	arg02, ##1140850688
20104     C8 71 B0 FD | 	call	#__system___float_div
20108     3D 93 02 F6 | 	mov	arg01, result1
2010c     2C 79 B0 FD | 	call	#__system____builtin_sinf
20110     3D 95 02 F6 | 	mov	arg02, result1
20114     56 93 02 F6 | 	mov	arg01, local04
20118     B0 6F B0 FD | 	call	#__system___float_mul
2011c     3D 93 02 F6 | 	mov	arg01, result1
20120     01 94 06 F6 | 	mov	arg02, #1
20124     6C 74 B0 FD | 	call	#__system___float_tointeger
20128     3D 95 02 F6 | 	mov	arg02, result1
2012c     55 93 02 F6 | 	mov	arg01, local03
20130     84 0D B0 FD | 	call	#_psdpoke
20134     01 A8 06 F1 | 	add	local02, #1
20138     02 00 00 FF 
2013c     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20140     80 FF 9F CD |  if_b	jmp	#LR__2600
20144                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
20144     00 A8 06 F6 | 	mov	local02, #0
20148                 | LR__2601
20148     54 95 02 F6 | 	mov	arg02, local02
2014c     01 94 66 F0 | 	shl	arg02, #1
20150     0B 92 C6 F9 | 	decod	arg01, #11
20154     4A 93 02 F1 | 	add	arg01, arg02
20158     54 AD 02 F6 | 	mov	local04, local02
2015c     07 AC 66 F0 | 	shl	local04, #7
20160     54 AD 82 F1 | 	sub	local04, local02
20164     C0 FF 7F FF 
20168     00 95 06 F6 | 	mov	arg02, ##-32512
2016c     56 95 02 F1 | 	add	arg02, local04
20170     44 0D B0 FD | 	call	#_psdpoke
20174     09 AC C6 F9 | 	decod	local04, #9
20178     54 AD 02 F1 | 	add	local04, local02
2017c     01 AC 66 F0 | 	shl	local04, #1
20180     0B 92 C6 F9 | 	decod	arg01, #11
20184     56 93 02 F1 | 	add	arg01, local04
20188     54 AF 02 F6 | 	mov	local05, local02
2018c     07 AE 66 F0 | 	shl	local05, #7
20190     54 AF 82 F1 | 	sub	local05, local02
20194     3F 00 00 FF 
20198     00 95 06 F6 | 	mov	arg02, ##32512
2019c     57 95 82 F1 | 	sub	arg02, local05
201a0     14 0D B0 FD | 	call	#_psdpoke
201a4     01 A8 06 F1 | 	add	local02, #1
201a8     01 00 00 FF 
201ac     00 A8 56 F2 | 	cmps	local02, ##512 wc
201b0     94 FF 9F CD |  if_b	jmp	#LR__2601
201b4                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
201b4     00 A8 06 F6 | 	mov	local02, #0
201b8                 | LR__2602
201b8     54 AF 02 F6 | 	mov	local05, local02
201bc     01 AE 66 F0 | 	shl	local05, #1
201c0     0C 92 C6 F9 | 	decod	arg01, #12
201c4     57 93 02 F1 | 	add	arg01, local05
201c8     54 AF 02 F6 | 	mov	local05, local02
201cc     06 AE 66 F0 | 	shl	local05, #6
201d0     54 AF 82 F1 | 	sub	local05, local02
201d4     C1 FF 7F FF 
201d8     00 94 06 F6 | 	mov	arg02, ##-32256
201dc     57 95 02 F1 | 	add	arg02, local05
201e0     D4 0C B0 FD | 	call	#_psdpoke
201e4     01 A8 06 F1 | 	add	local02, #1
201e8     02 00 00 FF 
201ec     00 A8 56 F2 | 	cmps	local02, ##1024 wc
201f0     C4 FF 9F CD |  if_b	jmp	#LR__2602
201f4                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
201f4     00 A8 06 F6 | 	mov	local02, #0
201f8                 | LR__2603
201f8     54 95 02 F6 | 	mov	arg02, local02
201fc     01 94 66 F0 | 	shl	arg02, #1
20200     0C 00 00 FF 
20204     00 92 06 F6 | 	mov	arg01, ##6144
20208     4A 93 02 F1 | 	add	arg01, arg02
2020c     C0 FF 7F FF 
20210     A8 94 06 F6 | 	mov	arg02, ##-32600
20214     A0 0C B0 FD | 	call	#_psdpoke
20218     01 A8 06 F1 | 	add	local02, #1
2021c     80 A8 56 F2 | 	cmps	local02, #128 wc
20220     D4 FF 9F CD |  if_b	jmp	#LR__2603
20224     80 A8 06 F6 | 	mov	local02, #128
20228                 | LR__2604
20228     54 95 02 F6 | 	mov	arg02, local02
2022c     01 94 66 F0 | 	shl	arg02, #1
20230     0C 00 00 FF 
20234     00 92 06 F6 | 	mov	arg01, ##6144
20238     4A 93 02 F1 | 	add	arg01, arg02
2023c     3F 00 00 FF 
20240     58 95 06 F6 | 	mov	arg02, ##32600
20244     70 0C B0 FD | 	call	#_psdpoke
20248     01 A8 06 F1 | 	add	local02, #1
2024c     02 00 00 FF 
20250     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20254     D0 FF 9F CD |  if_b	jmp	#LR__2604
20258                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
20258     00 A8 06 F6 | 	mov	local02, #0
2025c                 | LR__2605
2025c     54 95 02 F6 | 	mov	arg02, local02
20260     01 94 66 F0 | 	shl	arg02, #1
20264     0D 92 C6 F9 | 	decod	arg01, #13
20268     4A 93 02 F1 | 	add	arg01, arg02
2026c     C0 FF 7F FF 
20270     A8 94 06 F6 | 	mov	arg02, ##-32600
20274     40 0C B0 FD | 	call	#_psdpoke
20278     01 A8 06 F1 | 	add	local02, #1
2027c     01 00 00 FF 
20280     00 A8 56 F2 | 	cmps	local02, ##512 wc
20284     D4 FF 9F CD |  if_b	jmp	#LR__2605
20288     09 A8 C6 F9 | 	decod	local02, #9
2028c                 | LR__2606
2028c     54 95 02 F6 | 	mov	arg02, local02
20290     01 94 66 F0 | 	shl	arg02, #1
20294     0D 92 C6 F9 | 	decod	arg01, #13
20298     4A 93 02 F1 | 	add	arg01, arg02
2029c     3F 00 00 FF 
202a0     58 95 06 F6 | 	mov	arg02, ##32600
202a4     10 0C B0 FD | 	call	#_psdpoke
202a8     01 A8 06 F1 | 	add	local02, #1
202ac     02 00 00 FF 
202b0     00 A8 16 F2 | 	cmp	local02, ##1024 wc
202b4     D4 FF 9F CD |  if_b	jmp	#LR__2606
202b8                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
202b8     00 A8 06 F6 | 	mov	local02, #0
202bc                 | LR__2607
202bc     54 95 02 F6 | 	mov	arg02, local02
202c0     01 94 66 F0 | 	shl	arg02, #1
202c4     14 00 00 FF 
202c8     00 92 06 F6 | 	mov	arg01, ##10240
202cc     4A 93 02 F1 | 	add	arg01, arg02
202d0     C0 FF 7F FF 
202d4     A8 94 06 F6 | 	mov	arg02, ##-32600
202d8     DC 0B B0 FD | 	call	#_psdpoke
202dc     01 A8 06 F1 | 	add	local02, #1
202e0     00 A9 56 F2 | 	cmps	local02, #256 wc
202e4     D4 FF 9F CD |  if_b	jmp	#LR__2607
202e8     00 A9 06 F6 | 	mov	local02, #256
202ec                 | LR__2608
202ec     54 95 02 F6 | 	mov	arg02, local02
202f0     01 94 66 F0 | 	shl	arg02, #1
202f4     14 00 00 FF 
202f8     00 92 06 F6 | 	mov	arg01, ##10240
202fc     4A 93 02 F1 | 	add	arg01, arg02
20300     3F 00 00 FF 
20304     58 95 06 F6 | 	mov	arg02, ##32600
20308     AC 0B B0 FD | 	call	#_psdpoke
2030c     01 A8 06 F1 | 	add	local02, #1
20310     02 00 00 FF 
20314     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20318     D0 FF 9F CD |  if_b	jmp	#LR__2608
2031c                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
2031c     18 00 00 FF 
20320     00 A8 06 F6 | 	mov	local02, ##12288
20324                 | LR__2609
20324     54 93 02 F6 | 	mov	arg01, local02
20328     00 94 06 F6 | 	mov	arg02, #0
2032c     40 0B B0 FD | 	call	#_pslpoke
20330     04 A8 06 F1 | 	add	local02, #4
20334     77 00 00 FF 
20338     FD A9 56 F2 | 	cmps	local02, ##61437 wc
2033c     E4 FF 9F CD |  if_b	jmp	#LR__2609
20340                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
20340     00 A8 06 F6 | 	mov	local02, #0
20344                 | LR__2610
20344     54 95 02 F6 | 	mov	arg02, local02
20348     01 94 66 F0 | 	shl	arg02, #1
2034c     78 00 00 FF 
20350     00 AA 06 F6 | 	mov	local03, ##61440
20354     4A AB 02 F1 | 	add	local03, arg02
20358     35 93 02 F6 | 	mov	arg01, ptr__dat__
2035c     12 00 00 FF 
20360     CA 92 06 F1 | 	add	arg01, ##9418
20364     54 95 02 F6 | 	mov	arg02, local02
20368     01 94 66 F0 | 	shl	arg02, #1
2036c     4A 93 02 F1 | 	add	arg01, arg02
20370     49 95 E2 FA | 	rdword	arg02, arg01
20374     55 93 02 F6 | 	mov	arg01, local03
20378     3C 0B B0 FD | 	call	#_psdpoke
2037c     01 A8 06 F1 | 	add	local02, #1
20380     02 00 00 FF 
20384     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20388     B8 FF 9F CD |  if_b	jmp	#LR__2610
2038c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
2038c     00 A8 06 F6 | 	mov	local02, #0
20390                 | LR__2611
20390     54 95 02 F6 | 	mov	arg02, local02
20394     01 94 66 F0 | 	shl	arg02, #1
20398     7C 00 00 FF 
2039c     00 AA 06 F6 | 	mov	local03, ##63488
203a0     4A AB 02 F1 | 	add	local03, arg02
203a4     35 93 02 F6 | 	mov	arg01, ptr__dat__
203a8     0E 00 00 FF 
203ac     BA 92 06 F1 | 	add	arg01, ##7354
203b0     54 95 02 F6 | 	mov	arg02, local02
203b4     01 94 66 F0 | 	shl	arg02, #1
203b8     4A 93 02 F1 | 	add	arg01, arg02
203bc     49 95 E2 FA | 	rdword	arg02, arg01
203c0     55 93 02 F6 | 	mov	arg01, local03
203c4     F0 0A B0 FD | 	call	#_psdpoke
203c8     01 A8 06 F1 | 	add	local02, #1
203cc     02 00 00 FF 
203d0     00 A8 56 F2 | 	cmps	local02, ##1024 wc
203d4     B8 FF 9F CD |  if_b	jmp	#LR__2611
203d8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
203d8     00 A8 06 F6 | 	mov	local02, #0
203dc     0E 00 00 FF 
203e0     38 64 06 F1 | 	add	objptr, ##7224
203e4     D7 18 48 FB | 	callpa	#(@LR__2613-@LR__2612)>>2,fcache_load_ptr_
203e8                 | LR__2612
203e8     54 AB 02 F6 | 	mov	local03, local02
203ec     01 AA 66 F0 | 	shl	local03, #1
203f0     32 AB 02 F1 | 	add	local03, objptr
203f4     54 B1 02 F6 | 	mov	local06, local02
203f8     08 B0 66 F0 | 	shl	local06, #8
203fc     7F 00 00 FF 
20400     00 B3 06 F6 | 	mov	local07, ##65280
20404     58 B3 82 F1 | 	sub	local07, local06
20408     55 B3 52 FC | 	wrword	local07, local03
2040c     01 A8 06 F1 | 	add	local02, #1
20410     00 A9 56 F2 | 	cmps	local02, #256 wc
20414     D0 FF 9F CD |  if_b	jmp	#LR__2612
20418                 | LR__2613
20418     0E 00 00 FF 
2041c     38 64 86 F1 | 	sub	objptr, ##7224
20420                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
20420     00 A8 06 F6 | 	mov	local02, #0
20424                 | LR__2614
20424     54 AB 02 F6 | 	mov	local03, local02
20428     01 AA 66 F0 | 	shl	local03, #1
2042c     32 AF 02 F6 | 	mov	local05, objptr
20430     0F 00 00 FF 
20434     38 AE 06 F1 | 	add	local05, ##7736
20438     57 AB 02 F1 | 	add	local03, local05
2043c     80 BF 23 FF 
20440     00 92 06 F6 | 	mov	arg01, ##1199505408
20444     53 95 02 F6 | 	mov	arg02, local01
20448     80 6C B0 FD | 	call	#__system___float_mul
2044c     3D 93 02 F6 | 	mov	arg01, result1
20450     01 94 06 F6 | 	mov	arg02, #1
20454     3C 71 B0 FD | 	call	#__system___float_tointeger
20458     55 7B 52 FC | 	wrword	result1, local03
2045c     53 93 02 F6 | 	mov	arg01, local01
20460     CC BC 1F FF 
20464     9A 95 06 F6 | 	mov	arg02, ##1064933786
20468     60 6C B0 FD | 	call	#__system___float_mul
2046c     3D A7 02 F6 | 	mov	local01, result1
20470     01 A8 06 F1 | 	add	local02, #1
20474     00 A9 56 F2 | 	cmps	local02, #256 wc
20478     A8 FF 9F CD |  if_b	jmp	#LR__2614
2047c     10 00 00 FF 
20480     36 64 06 F1 | 	add	objptr, ##8246
20484     32 01 58 FC | 	wrword	#0, objptr
20488                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
20488     00 A8 06 F6 | 	mov	local02, #0
2048c     02 64 06 F1 | 	add	objptr, #2
20490     D7 10 48 FB | 	callpa	#(@LR__2616-@LR__2615)>>2,fcache_load_ptr_
20494                 | LR__2615
20494     54 AB 02 F6 | 	mov	local03, local02
20498     01 AA 66 F0 | 	shl	local03, #1
2049c     32 AB 02 F1 | 	add	local03, objptr
204a0     7F 00 80 FF 
204a4     55 01 5A FC | 	wrword	##65280, local03
204a8     01 A8 06 F1 | 	add	local02, #1
204ac     FF A8 56 F2 | 	cmps	local02, #255 wc
204b0     E0 FF 9F CD |  if_b	jmp	#LR__2615
204b4                 | LR__2616
204b4     FE 65 06 F1 | 	add	objptr, #510
204b8     32 01 58 FC | 	wrword	#0, objptr
204bc                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
204bc     00 A8 06 F6 | 	mov	local02, #0
204c0     02 64 06 F1 | 	add	objptr, #2
204c4     D7 12 48 FB | 	callpa	#(@LR__2618-@LR__2617)>>2,fcache_load_ptr_
204c8                 | LR__2617
204c8     54 AB 02 F6 | 	mov	local03, local02
204cc     01 AA 66 F0 | 	shl	local03, #1
204d0     32 AB 02 F1 | 	add	local03, objptr
204d4     54 B3 02 F6 | 	mov	local07, local02
204d8     0C B2 66 F0 | 	shl	local07, #12
204dc     55 B3 52 FC | 	wrword	local07, local03
204e0     01 A8 06 F1 | 	add	local02, #1
204e4     10 A8 56 F2 | 	cmps	local02, #16 wc
204e8     DC FF 9F CD |  if_b	jmp	#LR__2617
204ec                 | LR__2618
204ec                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
204ec     10 A8 06 F6 | 	mov	local02, #16
204f0     D7 10 48 FB | 	callpa	#(@LR__2620-@LR__2619)>>2,fcache_load_ptr_
204f4                 | LR__2619
204f4     54 AB 02 F6 | 	mov	local03, local02
204f8     01 AA 66 F0 | 	shl	local03, #1
204fc     32 AB 02 F1 | 	add	local03, objptr
20500     7F 00 80 FF 
20504     55 01 5A FC | 	wrword	##65280, local03
20508     01 A8 06 F1 | 	add	local02, #1
2050c     F0 A8 16 F2 | 	cmp	local02, #240 wc
20510     E0 FF 9F CD |  if_b	jmp	#LR__2619
20514                 | LR__2620
20514                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
20514     F0 A8 06 F6 | 	mov	local02, #240
20518     D7 14 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
2051c                 | LR__2621
2051c     54 AB 02 F6 | 	mov	local03, local02
20520     01 AA 66 F0 | 	shl	local03, #1
20524     32 AB 02 F1 | 	add	local03, objptr
20528     FF B0 06 F6 | 	mov	local06, #255
2052c     54 B1 82 F1 | 	sub	local06, local02
20530     0C B0 66 F0 | 	shl	local06, #12
20534     55 B1 52 FC | 	wrword	local06, local03
20538     01 A8 06 F1 | 	add	local02, #1
2053c     00 A9 16 F2 | 	cmp	local02, #256 wc
20540     D8 FF 9F CD |  if_b	jmp	#LR__2621
20544                 | LR__2622
20544                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
20544     00 A8 06 F6 | 	mov	local02, #0
20548     01 00 00 FF 
2054c     00 64 06 F1 | 	add	objptr, ##512
20550     D7 12 48 FB | 	callpa	#(@LR__2624-@LR__2623)>>2,fcache_load_ptr_
20554                 | LR__2623
20554     54 AB 02 F6 | 	mov	local03, local02
20558     01 AA 66 F0 | 	shl	local03, #1
2055c     32 AB 02 F1 | 	add	local03, objptr
20560     54 B3 02 F6 | 	mov	local07, local02
20564     08 B2 66 F0 | 	shl	local07, #8
20568     55 B3 52 FC | 	wrword	local07, local03
2056c     01 A8 06 F1 | 	add	local02, #1
20570     00 A9 56 F2 | 	cmps	local02, #256 wc
20574     DC FF 9F CD |  if_b	jmp	#LR__2623
20578                 | LR__2624
20578     FE 65 06 F1 | 	add	objptr, #510
2057c     32 01 58 FC | 	wrword	#0, objptr
20580                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
20580     00 A8 06 F6 | 	mov	local02, #0
20584     02 64 06 F1 | 	add	objptr, #2
20588     D7 16 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
2058c                 | LR__2625
2058c     54 AB 02 F6 | 	mov	local03, local02
20590     01 AA 66 F0 | 	shl	local03, #1
20594     32 AB 02 F1 | 	add	local03, objptr
20598     54 B3 02 F6 | 	mov	local07, local02
2059c     04 B2 66 F0 | 	shl	local07, #4
205a0     54 B3 02 F1 | 	add	local07, local02
205a4     04 B2 66 F0 | 	shl	local07, #4
205a8     55 B3 52 FC | 	wrword	local07, local03
205ac     01 A8 06 F1 | 	add	local02, #1
205b0     F0 A8 56 F2 | 	cmps	local02, #240 wc
205b4     D4 FF 9F CD |  if_b	jmp	#LR__2625
205b8                 | LR__2626
205b8     F0 A8 06 F6 | 	mov	local02, #240
205bc     D7 14 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
205c0                 | LR__2627
205c0     54 AB 02 F6 | 	mov	local03, local02
205c4     01 AA 66 F0 | 	shl	local03, #1
205c8     32 AB 02 F1 | 	add	local03, objptr
205cc     FF B0 06 F6 | 	mov	local06, #255
205d0     54 B1 82 F1 | 	sub	local06, local02
205d4     0C B0 66 F0 | 	shl	local06, #12
205d8     55 B1 52 FC | 	wrword	local06, local03
205dc     01 A8 06 F1 | 	add	local02, #1
205e0     00 A9 16 F2 | 	cmp	local02, #256 wc
205e4     D8 FF 9F CD |  if_b	jmp	#LR__2627
205e8                 | LR__2628
205e8                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
205e8     00 A8 06 F6 | 	mov	local02, #0
205ec     01 00 00 FF 
205f0     00 64 06 F1 | 	add	objptr, ##512
205f4     D7 20 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
205f8                 | LR__2629
205f8     54 AB 02 F6 | 	mov	local03, local02
205fc     01 AA 66 F0 | 	shl	local03, #1
20600     32 AB 02 F1 | 	add	local03, objptr
20604     54 B3 02 F6 | 	mov	local07, local02
20608     09 B2 66 F0 | 	shl	local07, #9
2060c     55 B3 52 FC | 	wrword	local07, local03
20610     FF AA 06 F6 | 	mov	local03, #255
20614     54 AB 82 F1 | 	sub	local03, local02
20618     01 AA 66 F0 | 	shl	local03, #1
2061c     32 AB 02 F1 | 	add	local03, objptr
20620     54 B3 02 F6 | 	mov	local07, local02
20624     09 B2 66 F0 | 	shl	local07, #9
20628     55 B3 52 FC | 	wrword	local07, local03
2062c     01 A8 06 F1 | 	add	local02, #1
20630     80 A8 56 F2 | 	cmps	local02, #128 wc
20634     C0 FF 9F CD |  if_b	jmp	#LR__2629
20638                 | LR__2630
20638                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
20638     00 A8 06 F6 | 	mov	local02, #0
2063c     01 00 00 FF 
20640     00 64 06 F1 | 	add	objptr, ##512
20644     D7 12 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
20648                 | LR__2631
20648     54 AB 02 F6 | 	mov	local03, local02
2064c     01 AA 66 F0 | 	shl	local03, #1
20650     32 AB 02 F1 | 	add	local03, objptr
20654     54 B3 02 F6 | 	mov	local07, local02
20658     0D B2 66 F0 | 	shl	local07, #13
2065c     55 B3 52 FC | 	wrword	local07, local03
20660     01 A8 06 F1 | 	add	local02, #1
20664     08 A8 56 F2 | 	cmps	local02, #8 wc
20668     DC FF 9F CD |  if_b	jmp	#LR__2631
2066c                 | LR__2632
2066c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
2066c     08 A8 06 F6 | 	mov	local02, #8
20670     D7 1A 48 FB | 	callpa	#(@LR__2634-@LR__2633)>>2,fcache_load_ptr_
20674                 | LR__2633
20674     54 AB 02 F6 | 	mov	local03, local02
20678     01 AA 66 F0 | 	shl	local03, #1
2067c     32 AB 02 F1 | 	add	local03, objptr
20680     54 AF 02 F6 | 	mov	local05, local02
20684     08 AE 86 F1 | 	sub	local05, #8
20688     0B AE 66 F0 | 	shl	local05, #11
2068c     7F 00 00 FF 
20690     00 B3 06 F6 | 	mov	local07, ##65280
20694     57 B3 82 F1 | 	sub	local07, local05
20698     55 B3 52 FC | 	wrword	local07, local03
2069c     01 A8 06 F1 | 	add	local02, #1
206a0     18 A8 16 F2 | 	cmp	local02, #24 wc
206a4     CC FF 9F CD |  if_b	jmp	#LR__2633
206a8                 | LR__2634
206a8                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
206a8     18 A8 06 F6 | 	mov	local02, #24
206ac     D7 10 48 FB | 	callpa	#(@LR__2636-@LR__2635)>>2,fcache_load_ptr_
206b0                 | LR__2635
206b0     54 AB 02 F6 | 	mov	local03, local02
206b4     01 AA 66 F0 | 	shl	local03, #1
206b8     32 AB 02 F1 | 	add	local03, objptr
206bc     40 00 80 FF 
206c0     55 01 58 FC | 	wrword	##32768, local03
206c4     01 A8 06 F1 | 	add	local02, #1
206c8     81 A8 16 F2 | 	cmp	local02, #129 wc
206cc     E0 FF 9F CD |  if_b	jmp	#LR__2635
206d0                 | LR__2636
206d0                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
206d0     81 A8 06 F6 | 	mov	local02, #129
206d4     D7 14 48 FB | 	callpa	#(@LR__2638-@LR__2637)>>2,fcache_load_ptr_
206d8                 | LR__2637
206d8     54 AB 02 F6 | 	mov	local03, local02
206dc     01 AA 66 F0 | 	shl	local03, #1
206e0     32 AB 02 F1 | 	add	local03, objptr
206e4     FF B0 06 F6 | 	mov	local06, #255
206e8     54 B1 82 F1 | 	sub	local06, local02
206ec     08 B0 66 F0 | 	shl	local06, #8
206f0     55 B1 52 FC | 	wrword	local06, local03
206f4     01 A8 06 F1 | 	add	local02, #1
206f8     00 A9 16 F2 | 	cmp	local02, #256 wc
206fc     D8 FF 9F CD |  if_b	jmp	#LR__2637
20700                 | LR__2638
20700     3F 00 00 FF 
20704     66 64 06 F1 | 	add	objptr, ##32358
20708     32 01 59 FC | 	wrword	#128, objptr
2070c     54 00 00 FF 
20710     9E 64 86 F1 | 	sub	objptr, ##43166
20714                 | ' for i=0 to 7
20714     00 A8 06 F6 | 	mov	local02, #0
20718     D7 9C 48 FB | 	callpa	#(@LR__2640-@LR__2639)>>2,fcache_load_ptr_
2071c                 | LR__2639
2071c     54 AB 02 F6 | 	mov	local03, local02
20720     03 AA 66 F0 | 	shl	local03, #3
20724     54 AB 82 F1 | 	sub	local03, local02
20728     02 AA 66 F0 | 	shl	local03, #2
2072c     16 00 00 FF 
20730     BC 64 06 F1 | 	add	objptr, ##11452
20734     32 AB 02 F1 | 	add	local03, objptr
20738     00 EE A1 FF 
2073c     55 01 68 FC | 	wrlong	##1138491392, local03
20740     54 AB 02 F6 | 	mov	local03, local02
20744     03 AA 66 F0 | 	shl	local03, #3
20748     54 AB 82 F1 | 	sub	local03, local02
2074c     02 AA 66 F0 | 	shl	local03, #2
20750     32 AB 02 F1 | 	add	local03, objptr
20754     04 AA 06 F1 | 	add	local03, #4
20758     55 A9 42 FC | 	wrbyte	local02, local03
2075c     54 AB 02 F6 | 	mov	local03, local02
20760     03 AA 66 F0 | 	shl	local03, #3
20764     54 AB 82 F1 | 	sub	local03, local02
20768     02 AA 66 F0 | 	shl	local03, #2
2076c     32 AB 02 F1 | 	add	local03, objptr
20770     05 AA 06 F1 | 	add	local03, #5
20774     55 A9 42 FC | 	wrbyte	local02, local03
20778     54 AB 02 F6 | 	mov	local03, local02
2077c     03 AA 66 F0 | 	shl	local03, #3
20780     54 AB 82 F1 | 	sub	local03, local02
20784     02 AA 66 F0 | 	shl	local03, #2
20788     32 AB 02 F1 | 	add	local03, objptr
2078c     06 AA 06 F1 | 	add	local03, #6
20790     55 01 58 FC | 	wrword	#0, local03
20794     54 AB 02 F6 | 	mov	local03, local02
20798     03 AA 66 F0 | 	shl	local03, #3
2079c     54 AB 82 F1 | 	sub	local03, local02
207a0     02 AA 66 F0 | 	shl	local03, #2
207a4     32 AB 02 F1 | 	add	local03, objptr
207a8     08 AA 06 F1 | 	add	local03, #8
207ac     00 C0 9F FF 
207b0     55 01 68 FC | 	wrlong	##1065353216, local03
207b4     54 AB 02 F6 | 	mov	local03, local02
207b8     03 AA 66 F0 | 	shl	local03, #3
207bc     54 AB 82 F1 | 	sub	local03, local02
207c0     02 AA 66 F0 | 	shl	local03, #2
207c4     32 AB 02 F1 | 	add	local03, objptr
207c8     0C AA 06 F1 | 	add	local03, #12
207cc     00 40 A0 FF 
207d0     55 01 68 FC | 	wrlong	##1082130432, local03
207d4     54 AB 02 F6 | 	mov	local03, local02
207d8     03 AA 66 F0 | 	shl	local03, #3
207dc     54 AB 82 F1 | 	sub	local03, local02
207e0     02 AA 66 F0 | 	shl	local03, #2
207e4     32 AB 02 F1 | 	add	local03, objptr
207e8     10 AA 06 F1 | 	add	local03, #16
207ec     55 01 68 FC | 	wrlong	#0, local03
207f0     54 AB 02 F6 | 	mov	local03, local02
207f4     03 AA 66 F0 | 	shl	local03, #3
207f8     54 AB 82 F1 | 	sub	local03, local02
207fc     02 AA 66 F0 | 	shl	local03, #2
20800     32 AB 02 F1 | 	add	local03, objptr
20804     14 AA 06 F1 | 	add	local03, #20
20808     55 FF 59 FC | 	wrword	#255, local03
2080c     54 AB 02 F6 | 	mov	local03, local02
20810     03 AA 66 F0 | 	shl	local03, #3
20814     54 AB 82 F1 | 	sub	local03, local02
20818     02 AA 66 F0 | 	shl	local03, #2
2081c     32 AB 02 F1 | 	add	local03, objptr
20820     16 AA 06 F1 | 	add	local03, #22
20824     55 01 58 FC | 	wrword	#0, local03
20828     54 AB 02 F6 | 	mov	local03, local02
2082c     01 AA 66 F0 | 	shl	local03, #1
20830     3D 00 00 FF 
20834     D4 65 06 F1 | 	add	objptr, ##31700
20838     32 AB 02 F1 | 	add	local03, objptr
2083c     55 FF 59 FC | 	wrword	#255, local03
20840     01 A8 06 F1 | 	add	local02, #1
20844     08 A8 56 F2 | 	cmps	local02, #8 wc
20848     54 00 00 FF 
2084c     90 64 86 F1 | 	sub	objptr, ##43152
20850     C8 FE 9F CD |  if_b	jmp	#LR__2639
20854                 | LR__2640
20854     00 6E 20 FF 
20858     00 B2 06 F6 | 	mov	local07, ##1088159744
2085c                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
2085c     03 B0 06 F6 | 	mov	local06, #3
20860                 | LR__2641
20860     59 93 02 F6 | 	mov	arg01, local07
20864     CE C3 1F FF 
20868     7D 94 06 F6 | 	mov	arg02, ##1065852029
2086c     5C 68 B0 FD | 	call	#__system___float_mul
20870     3D B3 02 F6 | 	mov	local07, result1
20874     FA B1 6E FB | 	djnz	local06, #LR__2641
20878     00 A8 06 F6 | 	mov	local02, #0
2087c                 | LR__2642
2087c     54 AD 02 F6 | 	mov	local04, local02
20880     02 AC 66 F0 | 	shl	local04, #2
20884     32 AB 02 F6 | 	mov	local03, objptr
20888     16 00 00 FF 
2088c     38 AA 06 F1 | 	add	local03, ##11320
20890     55 AD 02 F1 | 	add	local04, local03
20894     56 B3 62 FC | 	wrlong	local07, local04
20898     59 93 02 F6 | 	mov	arg01, local07
2089c     CE C3 1F FF 
208a0     7D 94 06 F6 | 	mov	arg02, ##1065852029
208a4     24 68 B0 FD | 	call	#__system___float_mul
208a8     3D B3 02 F6 | 	mov	local07, result1
208ac     01 A8 06 F1 | 	add	local02, #1
208b0     0C A8 56 F2 | 	cmps	local02, #12 wc
208b4     C4 FF 9F CD |  if_b	jmp	#LR__2642
208b8     16 00 00 FF 
208bc     68 64 06 F1 | 	add	objptr, ##11368
208c0     32 51 6B FC | 	wrlong	#424, objptr
208c4     04 64 06 F1 | 	add	objptr, #4
208c8     32 21 6B FC | 	wrlong	#400, objptr
208cc     04 64 06 F1 | 	add	objptr, #4
208d0     32 F3 6A FC | 	wrlong	#377, objptr
208d4     04 64 06 F1 | 	add	objptr, #4
208d8     32 C9 6A FC | 	wrlong	#356, objptr
208dc     04 64 06 F1 | 	add	objptr, #4
208e0     32 A1 6A FC | 	wrlong	#336, objptr
208e4     04 64 06 F1 | 	add	objptr, #4
208e8     32 7B 6A FC | 	wrlong	#317, objptr
208ec     04 64 06 F1 | 	add	objptr, #4
208f0     32 59 6A FC | 	wrlong	#300, objptr
208f4     04 64 06 F1 | 	add	objptr, #4
208f8     32 37 6A FC | 	wrlong	#283, objptr
208fc     04 64 06 F1 | 	add	objptr, #4
20900     32 17 6A FC | 	wrlong	#267, objptr
20904     04 64 06 F1 | 	add	objptr, #4
20908     32 F9 69 FC | 	wrlong	#252, objptr
2090c     04 64 06 F1 | 	add	objptr, #4
20910     32 DD 69 FC | 	wrlong	#238, objptr
20914     04 64 06 F1 | 	add	objptr, #4
20918     32 C1 69 FC | 	wrlong	#224, objptr
2091c     3E 00 00 FF 
20920     0A 64 06 F1 | 	add	objptr, ##31754
20924     32 01 59 FC | 	wrword	#128, objptr
20928     02 64 86 F1 | 	sub	objptr, #2
2092c     32 01 59 FC | 	wrword	#128, objptr
20930     54 00 00 FF 
20934     9C 64 86 F1 | 	sub	objptr, ##43164
20938     E7 F0 03 F6 | 	mov	ptra, fp
2093c     F2 00 A0 FD | 	call	#popregs_
20940                 | _init_audio_ret
20940     2D 00 64 FD | 	ret
20944                 | 
20944                 | ' 
20944                 | ' '------------------- Error messages
20944                 | ' 
20944                 | ' sub init_error_strings
20944                 | _init_error_strings
20944     98 01 00 FF 
20948     A9 81 06 F6 | 	mov	_var01, ##@LR__6102
2094c     47 00 00 FF 
20950     20 64 06 F1 | 	add	objptr, ##36384
20954     32 81 62 FC | 	wrlong	_var01, objptr
20958     98 01 00 FF 
2095c     AA 81 06 F6 | 	mov	_var01, ##@LR__6103
20960     04 64 06 F1 | 	add	objptr, #4
20964     32 81 62 FC | 	wrlong	_var01, objptr
20968     98 01 00 FF 
2096c     CE 81 06 F6 | 	mov	_var01, ##@LR__6104
20970     04 64 06 F1 | 	add	objptr, #4
20974     32 81 62 FC | 	wrlong	_var01, objptr
20978     98 01 00 FF 
2097c     EE 81 06 F6 | 	mov	_var01, ##@LR__6105
20980     04 64 06 F1 | 	add	objptr, #4
20984     32 81 62 FC | 	wrlong	_var01, objptr
20988     99 01 00 FF 
2098c     07 80 06 F6 | 	mov	_var01, ##@LR__6106
20990     04 64 06 F1 | 	add	objptr, #4
20994     32 81 62 FC | 	wrlong	_var01, objptr
20998     99 01 00 FF 
2099c     22 80 06 F6 | 	mov	_var01, ##@LR__6107
209a0     04 64 06 F1 | 	add	objptr, #4
209a4     32 81 62 FC | 	wrlong	_var01, objptr
209a8     99 01 00 FF 
209ac     43 80 06 F6 | 	mov	_var01, ##@LR__6108
209b0     04 64 06 F1 | 	add	objptr, #4
209b4     32 81 62 FC | 	wrlong	_var01, objptr
209b8     99 01 00 FF 
209bc     70 80 06 F6 | 	mov	_var01, ##@LR__6109
209c0     04 64 06 F1 | 	add	objptr, #4
209c4     32 81 62 FC | 	wrlong	_var01, objptr
209c8     99 01 00 FF 
209cc     9A 80 06 F6 | 	mov	_var01, ##@LR__6110
209d0     04 64 06 F1 | 	add	objptr, #4
209d4     32 81 62 FC | 	wrlong	_var01, objptr
209d8     99 01 00 FF 
209dc     B2 80 06 F6 | 	mov	_var01, ##@LR__6111
209e0     04 64 06 F1 | 	add	objptr, #4
209e4     32 81 62 FC | 	wrlong	_var01, objptr
209e8     99 01 00 FF 
209ec     D2 80 06 F6 | 	mov	_var01, ##@LR__6112
209f0     04 64 06 F1 | 	add	objptr, #4
209f4     32 81 62 FC | 	wrlong	_var01, objptr
209f8     99 01 00 FF 
209fc     E8 80 06 F6 | 	mov	_var01, ##@LR__6113
20a00     04 64 06 F1 | 	add	objptr, #4
20a04     32 81 62 FC | 	wrlong	_var01, objptr
20a08     99 01 00 FF 
20a0c     05 81 06 F6 | 	mov	_var01, ##@LR__6114
20a10     04 64 06 F1 | 	add	objptr, #4
20a14     32 81 62 FC | 	wrlong	_var01, objptr
20a18     99 01 00 FF 
20a1c     28 81 06 F6 | 	mov	_var01, ##@LR__6115
20a20     04 64 06 F1 | 	add	objptr, #4
20a24     32 81 62 FC | 	wrlong	_var01, objptr
20a28     99 01 00 FF 
20a2c     4E 81 06 F6 | 	mov	_var01, ##@LR__6116
20a30     04 64 06 F1 | 	add	objptr, #4
20a34     32 81 62 FC | 	wrlong	_var01, objptr
20a38     99 01 00 FF 
20a3c     69 81 06 F6 | 	mov	_var01, ##@LR__6117
20a40     04 64 06 F1 | 	add	objptr, #4
20a44     32 81 62 FC | 	wrlong	_var01, objptr
20a48     99 01 00 FF 
20a4c     79 81 06 F6 | 	mov	_var01, ##@LR__6118
20a50     04 64 06 F1 | 	add	objptr, #4
20a54     32 81 62 FC | 	wrlong	_var01, objptr
20a58     99 01 00 FF 
20a5c     88 81 06 F6 | 	mov	_var01, ##@LR__6119
20a60     04 64 06 F1 | 	add	objptr, #4
20a64     32 81 62 FC | 	wrlong	_var01, objptr
20a68     99 01 00 FF 
20a6c     A2 81 06 F6 | 	mov	_var01, ##@LR__6120
20a70     04 64 06 F1 | 	add	objptr, #4
20a74     32 81 62 FC | 	wrlong	_var01, objptr
20a78     99 01 00 FF 
20a7c     B3 81 06 F6 | 	mov	_var01, ##@LR__6121
20a80     04 64 06 F1 | 	add	objptr, #4
20a84     32 81 62 FC | 	wrlong	_var01, objptr
20a88     99 01 00 FF 
20a8c     CA 81 06 F6 | 	mov	_var01, ##@LR__6122
20a90     04 64 06 F1 | 	add	objptr, #4
20a94     32 81 62 FC | 	wrlong	_var01, objptr
20a98     99 01 00 FF 
20a9c     DD 81 06 F6 | 	mov	_var01, ##@LR__6123
20aa0     04 64 06 F1 | 	add	objptr, #4
20aa4     32 81 62 FC | 	wrlong	_var01, objptr
20aa8     99 01 00 FF 
20aac     EC 81 06 F6 | 	mov	_var01, ##@LR__6124
20ab0     04 64 06 F1 | 	add	objptr, #4
20ab4     32 81 62 FC | 	wrlong	_var01, objptr
20ab8     9A 01 00 FF 
20abc     08 80 06 F6 | 	mov	_var01, ##@LR__6125
20ac0     04 64 06 F1 | 	add	objptr, #4
20ac4     32 81 62 FC | 	wrlong	_var01, objptr
20ac8     9A 01 00 FF 
20acc     18 80 06 F6 | 	mov	_var01, ##@LR__6126
20ad0     04 64 06 F1 | 	add	objptr, #4
20ad4     32 81 62 FC | 	wrlong	_var01, objptr
20ad8     9A 01 00 FF 
20adc     28 80 06 F6 | 	mov	_var01, ##@LR__6127
20ae0     04 64 06 F1 | 	add	objptr, #4
20ae4     32 81 62 FC | 	wrlong	_var01, objptr
20ae8     9A 01 00 FF 
20aec     5B 80 06 F6 | 	mov	_var01, ##@LR__6128
20af0     04 64 06 F1 | 	add	objptr, #4
20af4     32 81 62 FC | 	wrlong	_var01, objptr
20af8     9A 01 00 FF 
20afc     76 80 06 F6 | 	mov	_var01, ##@LR__6129
20b00     04 64 06 F1 | 	add	objptr, #4
20b04     32 81 62 FC | 	wrlong	_var01, objptr
20b08     9A 01 00 FF 
20b0c     8B 80 06 F6 | 	mov	_var01, ##@LR__6130
20b10     04 64 06 F1 | 	add	objptr, #4
20b14     32 81 62 FC | 	wrlong	_var01, objptr
20b18     9A 01 00 FF 
20b1c     97 80 06 F6 | 	mov	_var01, ##@LR__6131
20b20     04 64 06 F1 | 	add	objptr, #4
20b24     32 81 62 FC | 	wrlong	_var01, objptr
20b28     9A 01 00 FF 
20b2c     A8 80 06 F6 | 	mov	_var01, ##@LR__6132
20b30     04 64 06 F1 | 	add	objptr, #4
20b34     32 81 62 FC | 	wrlong	_var01, objptr
20b38     9A 01 00 FF 
20b3c     B8 80 06 F6 | 	mov	_var01, ##@LR__6133
20b40     04 64 06 F1 | 	add	objptr, #4
20b44     32 81 62 FC | 	wrlong	_var01, objptr
20b48     9A 01 00 FF 
20b4c     D3 80 06 F6 | 	mov	_var01, ##@LR__6134
20b50     04 64 06 F1 | 	add	objptr, #4
20b54     32 81 62 FC | 	wrlong	_var01, objptr
20b58     9A 01 00 FF 
20b5c     E3 80 06 F6 | 	mov	_var01, ##@LR__6135
20b60     04 64 06 F1 | 	add	objptr, #4
20b64     32 81 62 FC | 	wrlong	_var01, objptr
20b68     9A 01 00 FF 
20b6c     F1 80 06 F6 | 	mov	_var01, ##@LR__6136
20b70     04 64 06 F1 | 	add	objptr, #4
20b74     32 81 62 FC | 	wrlong	_var01, objptr
20b78     9A 01 00 FF 
20b7c     0B 81 06 F6 | 	mov	_var01, ##@LR__6137
20b80     04 64 06 F1 | 	add	objptr, #4
20b84     32 81 62 FC | 	wrlong	_var01, objptr
20b88     9A 01 00 FF 
20b8c     3E 81 06 F6 | 	mov	_var01, ##@LR__6138
20b90     04 64 06 F1 | 	add	objptr, #4
20b94     32 81 62 FC | 	wrlong	_var01, objptr
20b98     9A 01 00 FF 
20b9c     56 81 06 F6 | 	mov	_var01, ##@LR__6139
20ba0     04 64 06 F1 | 	add	objptr, #4
20ba4     32 81 62 FC | 	wrlong	_var01, objptr
20ba8     9A 01 00 FF 
20bac     71 81 06 F6 | 	mov	_var01, ##@LR__6140
20bb0     04 64 06 F1 | 	add	objptr, #4
20bb4     32 81 62 FC | 	wrlong	_var01, objptr
20bb8     9A 01 00 FF 
20bbc     8E 81 06 F6 | 	mov	_var01, ##@LR__6141
20bc0     04 64 06 F1 | 	add	objptr, #4
20bc4     32 81 62 FC | 	wrlong	_var01, objptr
20bc8     9A 01 00 FF 
20bcc     A7 81 06 F6 | 	mov	_var01, ##@LR__6142
20bd0     04 64 06 F1 | 	add	objptr, #4
20bd4     32 81 62 FC | 	wrlong	_var01, objptr
20bd8     9A 01 00 FF 
20bdc     C6 81 06 F6 | 	mov	_var01, ##@LR__6143
20be0     04 64 06 F1 | 	add	objptr, #4
20be4     32 81 62 FC | 	wrlong	_var01, objptr
20be8     9A 01 00 FF 
20bec     D4 81 06 F6 | 	mov	_var01, ##@LR__6144
20bf0     04 64 06 F1 | 	add	objptr, #4
20bf4     32 81 62 FC | 	wrlong	_var01, objptr
20bf8     9B 01 00 FF 
20bfc     01 80 06 F6 | 	mov	_var01, ##@LR__6145
20c00     04 64 06 F1 | 	add	objptr, #4
20c04     32 81 62 FC | 	wrlong	_var01, objptr
20c08     9B 01 00 FF 
20c0c     0E 80 06 F6 | 	mov	_var01, ##@LR__6146
20c10     04 64 06 F1 | 	add	objptr, #4
20c14     32 81 62 FC | 	wrlong	_var01, objptr
20c18     9B 01 00 FF 
20c1c     22 80 06 F6 | 	mov	_var01, ##@LR__6147
20c20     04 64 06 F1 | 	add	objptr, #4
20c24     32 81 62 FC | 	wrlong	_var01, objptr
20c28     9B 01 00 FF 
20c2c     46 80 06 F6 | 	mov	_var01, ##@LR__6148
20c30     04 64 06 F1 | 	add	objptr, #4
20c34     32 81 62 FC | 	wrlong	_var01, objptr
20c38     9B 01 00 FF 
20c3c     5D 80 06 F6 | 	mov	_var01, ##@LR__6149
20c40     04 64 06 F1 | 	add	objptr, #4
20c44     32 81 62 FC | 	wrlong	_var01, objptr
20c48     9B 01 00 FF 
20c4c     70 80 06 F6 | 	mov	_var01, ##@LR__6150
20c50     04 64 06 F1 | 	add	objptr, #4
20c54     32 81 62 FC | 	wrlong	_var01, objptr
20c58     9B 01 00 FF 
20c5c     87 80 06 F6 | 	mov	_var01, ##@LR__6151
20c60     04 64 06 F1 | 	add	objptr, #4
20c64     32 81 62 FC | 	wrlong	_var01, objptr
20c68     9B 01 00 FF 
20c6c     A0 80 06 F6 | 	mov	_var01, ##@LR__6152
20c70     04 64 06 F1 | 	add	objptr, #4
20c74     32 81 62 FC | 	wrlong	_var01, objptr
20c78     9B 01 00 FF 
20c7c     C2 80 06 F6 | 	mov	_var01, ##@LR__6153
20c80     04 64 06 F1 | 	add	objptr, #4
20c84     32 81 62 FC | 	wrlong	_var01, objptr
20c88     9B 01 00 FF 
20c8c     D5 80 06 F6 | 	mov	_var01, ##@LR__6154
20c90     04 64 06 F1 | 	add	objptr, #4
20c94     32 81 62 FC | 	wrlong	_var01, objptr
20c98     9B 01 00 FF 
20c9c     E5 80 06 F6 | 	mov	_var01, ##@LR__6155
20ca0     04 64 06 F1 | 	add	objptr, #4
20ca4     32 81 62 FC | 	wrlong	_var01, objptr
20ca8     9B 01 00 FF 
20cac     FD 80 06 F6 | 	mov	_var01, ##@LR__6156
20cb0     04 64 06 F1 | 	add	objptr, #4
20cb4     32 81 62 FC | 	wrlong	_var01, objptr
20cb8     9B 01 00 FF 
20cbc     14 81 06 F6 | 	mov	_var01, ##@LR__6157
20cc0     04 64 06 F1 | 	add	objptr, #4
20cc4     32 81 62 FC | 	wrlong	_var01, objptr
20cc8     47 00 00 FF 
20ccc     FC 64 86 F1 | 	sub	objptr, ##36604
20cd0                 | _init_error_strings_ret
20cd0     2D 00 64 FD | 	ret
20cd4                 | 
20cd4                 | '         
20cd4                 | ' sub printerror(err as integer, linenum=0 as integer)
20cd4                 | _printerror
20cd4     02 CA 05 F6 | 	mov	COUNT_, #2
20cd8     E8 00 A0 FD | 	call	#pushregs_
20cdc     49 A7 02 F6 | 	mov	local01, arg01
20ce0     4A A9 02 F6 | 	mov	local02, arg02
20ce4     9B 01 00 FF 
20ce8     21 93 06 F6 | 	mov	arg01, ##@LR__6158
20cec     9C 21 B0 FD | 	call	#_hg010b_spin2_write
20cf0     53 93 02 F6 | 	mov	arg01, local01
20cf4     D8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
20cf8     3D 93 02 F6 | 	mov	arg01, result1
20cfc     8C 21 B0 FD | 	call	#_hg010b_spin2_write
20d00     9B 01 00 FF 
20d04     28 93 06 F6 | 	mov	arg01, ##@LR__6159
20d08     80 21 B0 FD | 	call	#_hg010b_spin2_write
20d0c     02 A6 66 F0 | 	shl	local01, #2
20d10     32 95 02 F6 | 	mov	arg02, objptr
20d14     47 00 00 FF 
20d18     20 94 06 F1 | 	add	arg02, ##36384
20d1c     4A A7 02 F1 | 	add	local01, arg02
20d20     53 93 02 FB | 	rdlong	arg01, local01
20d24     64 21 B0 FD | 	call	#_hg010b_spin2_write
20d28                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
20d28                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
20d28     01 A8 56 F2 | 	cmps	local02, #1 wc
20d2c     24 00 90 CD |  if_b	jmp	#LR__2650
20d30     9B 01 00 FF 
20d34     2C 93 06 F6 | 	mov	arg01, ##@LR__6160
20d38     50 21 B0 FD | 	call	#_hg010b_spin2_write
20d3c     54 93 02 F6 | 	mov	arg01, local02
20d40     8C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
20d44     3D 93 02 F6 | 	mov	arg01, result1
20d48                 | ' 
20d48                 | ' write(text)
20d48     40 21 B0 FD | 	call	#_hg010b_spin2_write
20d4c                 | ' crlf
20d4c     DC 25 B0 FD | 	call	#_hg010b_spin2_crlf
20d50     10 00 90 FD | 	jmp	#LR__2651
20d54                 | LR__2650
20d54     9B 01 00 FF 
20d58     36 93 06 F6 | 	mov	arg01, ##@LR__6161
20d5c                 | ' 
20d5c                 | ' write(text)
20d5c     2C 21 B0 FD | 	call	#_hg010b_spin2_write
20d60                 | ' crlf
20d60     C8 25 B0 FD | 	call	#_hg010b_spin2_crlf
20d64                 | LR__2651
20d64     E7 F0 03 F6 | 	mov	ptra, fp
20d68     F2 00 A0 FD | 	call	#popregs_
20d6c                 | _printerror_ret
20d6c     2D 00 64 FD | 	ret
20d70                 | 
20d70                 | ' 
20d70                 | ' '' ------------------------------- Hardware start/stop/initialization 
20d70                 | ' 
20d70                 | ' sub startpsram
20d70                 | _startpsram
20d70     00 92 06 F6 | 	mov	arg01, #0
20d74     0A 94 C6 F9 | 	decod	arg02, #10
20d78     0B 96 06 F6 | 	mov	arg03, #11
20d7c     07 98 06 F6 | 	mov	arg04, #7
20d80     0B 00 00 FF 
20d84     CC 64 06 F1 | 	add	objptr, ##5836
20d88     C8 2A B0 FD | 	call	#_psram_spin2_startx
20d8c     2D 00 00 FF 
20d90     E0 64 06 F1 | 	add	objptr, ##23264
20d94     32 7B 62 FC | 	wrlong	result1, objptr
20d98                 | '     return $7FF00 + cog*12
20d98     0C 64 06 F1 | 	add	objptr, #12
20d9c     FF 03 80 FF 
20da0     32 01 6A FC | 	wrlong	##524032, objptr
20da4     38 00 00 FF 
20da8     B8 65 86 F1 | 	sub	objptr, ##29112
20dac                 | _startpsram_ret
20dac     2D 00 64 FD | 	ret
20db0                 | 
20db0                 | ' 
20db0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
20db0                 | _startvideo
20db0     01 CA 05 F6 | 	mov	COUNT_, #1
20db4     E8 00 A0 FD | 	call	#pushregs_
20db8     38 00 00 FF 
20dbc     B8 65 06 F1 | 	add	objptr, ##29112
20dc0     32 99 02 FB | 	rdlong	arg04, objptr
20dc4     38 00 00 FF 
20dc8     B8 65 86 F1 | 	sub	objptr, ##29112
20dcc     4A 93 02 F6 | 	mov	arg01, arg02
20dd0     4C 95 02 F6 | 	mov	arg02, arg04
20dd4     34 08 B0 FD | 	call	#_hg010b_spin2_start
20dd8     38 00 00 FF 
20ddc     A4 65 06 F1 | 	add	objptr, ##29092
20de0     32 7B 62 FC | 	wrlong	result1, objptr
20de4                 | ' 
20de4                 | ' videocog=v.start(pin,mbox)
20de4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
20de4     00 A6 06 F6 | 	mov	local01, #0
20de8     2D 00 00 FF 
20dec     D8 64 86 F1 | 	sub	objptr, ##23256
20df0                 | LR__2660
20df0     53 93 02 F6 | 	mov	arg01, local01
20df4     00 28 00 FF 
20df8     00 94 06 F6 | 	mov	arg02, ##5242880
20dfc     B4 2E B0 FD | 	call	#_psram_spin2_setQos
20e00     01 A6 06 F1 | 	add	local01, #1
20e04     08 A6 56 F2 | 	cmps	local01, #8 wc
20e08     E4 FF 9F CD |  if_b	jmp	#LR__2660
20e0c     2D 00 00 FF 
20e10     D8 64 06 F1 | 	add	objptr, ##23256
20e14     32 93 02 FB | 	rdlong	arg01, objptr
20e18     7A 00 02 FF 
20e1c     00 94 06 F6 | 	mov	arg02, ##67171328
20e20     2D 00 00 FF 
20e24     D8 64 86 F1 | 	sub	objptr, ##23256
20e28     88 2E B0 FD | 	call	#_psram_spin2_setQos
20e2c     0B 00 00 FF 
20e30     CC 64 86 F1 | 	sub	objptr, ##5836
20e34                 | ' psram.setQoS(videocog, $0400f400) 
20e34                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
20e34     32 95 02 F6 | 	mov	arg02, objptr
20e38     00 68 05 FF 
20e3c     00 94 46 F5 | 	or	arg02, ##181403648
20e40     00 96 06 F6 | 	mov	arg03, #0
20e44     00 98 06 F6 | 	mov	arg04, #0
20e48     00 92 06 F6 | 	mov	arg01, #0
20e4c     FC 45 B0 FD | 	call	#__system___basic_open
20e50                 | ' return videocog
20e50     38 00 00 FF 
20e54     A4 65 06 F1 | 	add	objptr, ##29092
20e58     32 7B 02 FB | 	rdlong	result1, objptr
20e5c     38 00 00 FF 
20e60     A4 65 86 F1 | 	sub	objptr, ##29092
20e64     E7 F0 03 F6 | 	mov	ptra, fp
20e68     F2 00 A0 FD | 	call	#popregs_
20e6c                 | _startvideo_ret
20e6c     2D 00 64 FD | 	ret
20e70                 | 
20e70                 | ' 
20e70                 | ' 
20e70                 | ' 
20e70                 | ' '' ------------------------------- Convenient psram peek/poke
20e70                 | ' 
20e70                 | ' sub pslpoke(addr as ulong,value as ulong)
20e70                 | _pslpoke
20e70     00 CA 05 F6 | 	mov	COUNT_, #0
20e74     E8 00 A0 FD | 	call	#pushregs_
20e78     08 F0 07 F1 | 	add	ptra, #8
20e7c     49 97 02 F6 | 	mov	arg03, arg01
20e80     04 CE 05 F1 | 	add	fp, #4
20e84     E7 94 62 FC | 	wrlong	arg02, fp
20e88     E7 92 02 F6 | 	mov	arg01, fp
20e8c     04 CE 85 F1 | 	sub	fp, #4
20e90     4B 95 02 F6 | 	mov	arg02, arg03
20e94     04 96 06 F6 | 	mov	arg03, #4
20e98     0B 00 00 FF 
20e9c     CC 64 06 F1 | 	add	objptr, ##5836
20ea0     80 2C B0 FD | 	call	#_psram_spin2_write
20ea4     0B 00 00 FF 
20ea8     CC 64 86 F1 | 	sub	objptr, ##5836
20eac     E7 F0 03 F6 | 	mov	ptra, fp
20eb0     F2 00 A0 FD | 	call	#popregs_
20eb4                 | _pslpoke_ret
20eb4     2D 00 64 FD | 	ret
20eb8                 | 
20eb8                 | ' 
20eb8                 | ' sub psdpoke(addr as ulong,value as ulong)
20eb8                 | _psdpoke
20eb8     00 CA 05 F6 | 	mov	COUNT_, #0
20ebc     E8 00 A0 FD | 	call	#pushregs_
20ec0     08 F0 07 F1 | 	add	ptra, #8
20ec4     49 97 02 F6 | 	mov	arg03, arg01
20ec8     04 CE 05 F1 | 	add	fp, #4
20ecc     E7 94 62 FC | 	wrlong	arg02, fp
20ed0     E7 92 02 F6 | 	mov	arg01, fp
20ed4     04 CE 85 F1 | 	sub	fp, #4
20ed8     4B 95 02 F6 | 	mov	arg02, arg03
20edc     02 96 06 F6 | 	mov	arg03, #2
20ee0     0B 00 00 FF 
20ee4     CC 64 06 F1 | 	add	objptr, ##5836
20ee8     38 2C B0 FD | 	call	#_psram_spin2_write
20eec     0B 00 00 FF 
20ef0     CC 64 86 F1 | 	sub	objptr, ##5836
20ef4     E7 F0 03 F6 | 	mov	ptra, fp
20ef8     F2 00 A0 FD | 	call	#popregs_
20efc                 | _psdpoke_ret
20efc     2D 00 64 FD | 	ret
20f00                 | 
20f00                 | ' 
20f00                 | ' sub pspoke(addr as ulong,value as ulong)
20f00                 | _pspoke
20f00     00 CA 05 F6 | 	mov	COUNT_, #0
20f04     E8 00 A0 FD | 	call	#pushregs_
20f08     08 F0 07 F1 | 	add	ptra, #8
20f0c     49 97 02 F6 | 	mov	arg03, arg01
20f10     04 CE 05 F1 | 	add	fp, #4
20f14     E7 94 62 FC | 	wrlong	arg02, fp
20f18     E7 92 02 F6 | 	mov	arg01, fp
20f1c     04 CE 85 F1 | 	sub	fp, #4
20f20     4B 95 02 F6 | 	mov	arg02, arg03
20f24     01 96 06 F6 | 	mov	arg03, #1
20f28     0B 00 00 FF 
20f2c     CC 64 06 F1 | 	add	objptr, ##5836
20f30     F0 2B B0 FD | 	call	#_psram_spin2_write
20f34     0B 00 00 FF 
20f38     CC 64 86 F1 | 	sub	objptr, ##5836
20f3c     E7 F0 03 F6 | 	mov	ptra, fp
20f40     F2 00 A0 FD | 	call	#popregs_
20f44                 | _pspoke_ret
20f44     2D 00 64 FD | 	ret
20f48                 | 
20f48                 | ' 
20f48                 | ' function pspeek(adr as ulong) as ubyte
20f48                 | _pspeek
20f48     00 CA 05 F6 | 	mov	COUNT_, #0
20f4c     E8 00 A0 FD | 	call	#pushregs_
20f50     0C F0 07 F1 | 	add	ptra, #12
20f54     49 95 02 F6 | 	mov	arg02, arg01
20f58     E7 92 02 F6 | 	mov	arg01, fp
20f5c     08 92 06 F1 | 	add	arg01, #8
20f60     01 96 06 F6 | 	mov	arg03, #1
20f64     0B 00 00 FF 
20f68     CC 64 06 F1 | 	add	objptr, ##5836
20f6c     18 2B B0 FD | 	call	#_psram_spin2_read1
20f70     0B 00 00 FF 
20f74     CC 64 86 F1 | 	sub	objptr, ##5836
20f78                 | ' psram.read1(varptr(res),adr,1)
20f78                 | ' return res
20f78     08 CE 05 F1 | 	add	fp, #8
20f7c     E7 7A C2 FA | 	rdbyte	result1, fp
20f80     08 CE 85 F1 | 	sub	fp, #8
20f84     E7 F0 03 F6 | 	mov	ptra, fp
20f88     F2 00 A0 FD | 	call	#popregs_
20f8c                 | _pspeek_ret
20f8c     2D 00 64 FD | 	ret
20f90                 | 
20f90                 | ' 
20f90                 | ' function pslpeek(adr as ulong) as ulong
20f90                 | _pslpeek
20f90     00 CA 05 F6 | 	mov	COUNT_, #0
20f94     E8 00 A0 FD | 	call	#pushregs_
20f98     0C F0 07 F1 | 	add	ptra, #12
20f9c     49 95 02 F6 | 	mov	arg02, arg01
20fa0     E7 92 02 F6 | 	mov	arg01, fp
20fa4     08 92 06 F1 | 	add	arg01, #8
20fa8     04 96 06 F6 | 	mov	arg03, #4
20fac     0B 00 00 FF 
20fb0     CC 64 06 F1 | 	add	objptr, ##5836
20fb4     D0 2A B0 FD | 	call	#_psram_spin2_read1
20fb8     0B 00 00 FF 
20fbc     CC 64 86 F1 | 	sub	objptr, ##5836
20fc0                 | ' psram.read1(varptr(res),adr,4)
20fc0                 | ' return res
20fc0     08 CE 05 F1 | 	add	fp, #8
20fc4     E7 7A 02 FB | 	rdlong	result1, fp
20fc8     08 CE 85 F1 | 	sub	fp, #8
20fcc     E7 F0 03 F6 | 	mov	ptra, fp
20fd0     F2 00 A0 FD | 	call	#popregs_
20fd4                 | _pslpeek_ret
20fd4     2D 00 64 FD | 	ret
20fd8                 | 
20fd8                 | ' 
20fd8                 | ' function psdpeek(adr as ulong) as ulong
20fd8                 | _psdpeek
20fd8     00 CA 05 F6 | 	mov	COUNT_, #0
20fdc     E8 00 A0 FD | 	call	#pushregs_
20fe0     0C F0 07 F1 | 	add	ptra, #12
20fe4     49 95 02 F6 | 	mov	arg02, arg01
20fe8     E7 92 02 F6 | 	mov	arg01, fp
20fec     08 92 06 F1 | 	add	arg01, #8
20ff0     02 96 06 F6 | 	mov	arg03, #2
20ff4     0B 00 00 FF 
20ff8     CC 64 06 F1 | 	add	objptr, ##5836
20ffc     88 2A B0 FD | 	call	#_psram_spin2_read1
21000     0B 00 00 FF 
21004     CC 64 86 F1 | 	sub	objptr, ##5836
21008                 | ' psram.read1(varptr(res),adr,2)
21008                 | ' return res
21008     08 CE 05 F1 | 	add	fp, #8
2100c     E7 7A E2 FA | 	rdword	result1, fp
21010     08 CE 85 F1 | 	sub	fp, #8
21014     E7 F0 03 F6 | 	mov	ptra, fp
21018     F2 00 A0 FD | 	call	#popregs_
2101c                 | _psdpeek_ret
2101c     2D 00 64 FD | 	ret
21020                 | 
21020                 | ' 
21020                 | ' '' ------------------------------- USB keyboard scan to char translator
21020                 | ' 
21020                 | ' function scantochar(key)
21020                 | _scantochar
21020                 | ' 
21020                 | ' select case (key shr 8) and 255
21020     49 81 02 F6 | 	mov	_var01, arg01
21024     08 80 C6 F0 | 	sar	_var01, #8
21028     FF 80 0E F5 | 	and	_var01, #255 wz
2102c     24 00 90 AD |  if_e	jmp	#LR__2670
21030     02 80 0E F2 | 	cmp	_var01, #2 wz
21034     20 80 0E 52 |  if_ne	cmp	_var01, #32 wz
21038     30 00 90 AD |  if_e	jmp	#LR__2671
2103c     40 80 0E F2 | 	cmp	_var01, #64 wz
21040     44 00 90 AD |  if_e	jmp	#LR__2672
21044     42 80 0E F2 | 	cmp	_var01, #66 wz
21048     60 80 0E 52 |  if_ne	cmp	_var01, #96 wz
2104c     70 00 90 5D |  if_ne	jmp	#LR__2674
21050     50 00 90 FD | 	jmp	#LR__2673
21054                 | LR__2670
21054     49 7B 02 F6 | 	mov	result1, arg01
21058     7F 7A 06 F5 | 	and	result1, #127
2105c     02 7A 66 F0 | 	shl	result1, #2
21060     35 7B 02 F1 | 	add	result1, ptr__dat__
21064     3D 7B C2 FA | 	rdbyte	result1, result1
21068     54 00 90 FD | 	jmp	#_scantochar_ret
2106c                 | LR__2671
2106c     49 7B 02 F6 | 	mov	result1, arg01
21070     7F 7A 06 F5 | 	and	result1, #127
21074     02 7A 66 F0 | 	shl	result1, #2
21078     01 7A 06 F1 | 	add	result1, #1
2107c     35 7B 02 F1 | 	add	result1, ptr__dat__
21080     3D 7B C2 FA | 	rdbyte	result1, result1
21084     38 00 90 FD | 	jmp	#_scantochar_ret
21088                 | LR__2672
21088     49 7B 02 F6 | 	mov	result1, arg01
2108c     7F 7A 06 F5 | 	and	result1, #127
21090     02 7A 66 F0 | 	shl	result1, #2
21094     02 7A 06 F1 | 	add	result1, #2
21098     35 7B 02 F1 | 	add	result1, ptr__dat__
2109c     3D 7B C2 FA | 	rdbyte	result1, result1
210a0     1C 00 90 FD | 	jmp	#_scantochar_ret
210a4                 | LR__2673
210a4     49 7B 02 F6 | 	mov	result1, arg01
210a8     7F 7A 06 F5 | 	and	result1, #127
210ac     02 7A 66 F0 | 	shl	result1, #2
210b0     03 7A 06 F1 | 	add	result1, #3
210b4     35 7B 02 F1 | 	add	result1, ptr__dat__
210b8     3D 7B C2 FA | 	rdbyte	result1, result1
210bc     00 00 90 FD | 	jmp	#_scantochar_ret
210c0                 | LR__2674
210c0                 | _scantochar_ret
210c0     2D 00 64 FD | 	ret
210c4                 | 
210c4                 | _program
210c4     03 CA 05 F6 | 	mov	COUNT_, #3
210c8     E8 00 A0 FD | 	call	#pushregs_
210cc     A0 FC BF FD | 	call	#_startpsram
210d0     38 00 00 FF 
210d4     B8 65 06 F1 | 	add	objptr, ##29112
210d8     32 93 02 FB | 	rdlong	arg01, objptr
210dc     00 94 06 F6 | 	mov	arg02, #0
210e0     F0 03 00 FF 
210e4     00 96 06 F6 | 	mov	arg03, ##516096
210e8     2D 00 00 FF 
210ec     EC 64 86 F1 | 	sub	objptr, ##23276
210f0     24 2F B0 FD | 	call	#_Audio2_004_spin2_start
210f4     3E 97 02 F6 | 	mov	arg03, result2
210f8     2D 00 00 FF 
210fc     D4 64 06 F1 | 	add	objptr, ##23252
21100     32 7B 62 FC | 	wrlong	result1, objptr
21104     14 64 06 F1 | 	add	objptr, #20
21108     32 97 62 FC | 	wrlong	arg03, objptr
2110c     38 00 00 FF 
21110     B4 65 86 F1 | 	sub	objptr, ##29108
21114     32 92 06 F6 | 	mov	arg01, #50
21118     D4 3B B0 FD | 	call	#__system___waitms
2111c     38 00 00 FF 
21120     B4 65 06 F1 | 	add	objptr, ##29108
21124     32 93 02 FB | 	rdlong	arg01, objptr
21128     38 00 00 FF 
2112c     B4 65 86 F1 | 	sub	objptr, ##29108
21130     14 92 06 F1 | 	add	arg01, #20
21134     20 00 80 FF 
21138     49 01 58 FC | 	wrword	##16384, arg01
2113c     78 2C B0 FD | 	call	#_usbnew_spin2_start
21140     38 00 00 FF 
21144     A8 65 06 F1 | 	add	objptr, ##29096
21148     32 7B 62 FC | 	wrlong	result1, objptr
2114c     38 00 00 FF 
21150     A8 65 86 F1 | 	sub	objptr, ##29096
21154     40 92 06 F6 | 	mov	arg01, #64
21158     00 94 06 F6 | 	mov	arg02, #0
2115c     00 96 06 F6 | 	mov	arg03, #0
21160     4C FC BF FD | 	call	#_startvideo
21164                 | '   mouse_limits[0] := xlim
21164     0F 00 00 FF 
21168     C8 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
2116c     01 00 80 FF 
21170     3B FF 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
21174                 | '   mouse_limits[1] := ylim
21174     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21178     01 00 80 FF 
2117c     3B AF 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
21180     32 93 02 F6 | 	mov	arg01, objptr
21184     D5 93 06 F1 | 	add	arg01, #469
21188                 | '   mouse_outptr := ptr
21188     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2118c     3B 93 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
21190     0F 00 00 FF 
21194     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
21198     35 95 02 F6 | 	mov	arg02, ptr__dat__
2119c     16 00 00 FF 
211a0     CA 94 06 F1 | 	add	arg02, ##11466
211a4     10 92 06 F6 | 	mov	arg01, #16
211a8     08 0B B0 FD | 	call	#_hg010b_spin2_setspriteptr
211ac     10 92 06 F6 | 	mov	arg01, #16
211b0     20 94 06 F6 | 	mov	arg02, #32
211b4     20 96 06 F6 | 	mov	arg03, #32
211b8     84 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
211bc     09 92 C6 F9 | 	decod	arg01, #9
211c0     2C 95 06 F6 | 	mov	arg02, #300
211c4     44 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
211c8     32 97 02 F6 | 	mov	arg03, objptr
211cc     52 00 00 FF 
211d0     E8 64 06 F1 | 	add	objptr, ##42216
211d4     32 95 02 F6 | 	mov	arg02, objptr
211d8     4A 97 62 FC | 	wrlong	arg03, arg02
211dc     04 94 06 F1 | 	add	arg02, #4
211e0     4A 71 62 FC | 	wrlong	ptr__housekeeper_, arg02
211e4     2F 95 02 F6 | 	mov	arg02, entryptr__
211e8     1E 7A 06 F6 | 	mov	result1, #30
211ec     28 64 62 FD | 	setq	objptr
211f0     4A 7B F2 FC | 	coginit	result1, arg02 wc
211f4     01 7A 66 C6 |  if_b	neg	result1, #1
211f8     04 64 86 F1 | 	sub	objptr, #4
211fc     32 7B 62 FC | 	wrlong	result1, objptr
21200     01 00 00 FF 
21204     8C 65 06 F1 | 	add	objptr, ##908
21208     32 01 68 FC | 	wrlong	#0, objptr
2120c     1B 00 00 FF 
21210     98 64 86 F1 | 	sub	objptr, ##13976
21214     32 05 68 FC | 	wrlong	#2, objptr
21218     04 64 06 F1 | 	add	objptr, #4
2121c     32 27 69 FC | 	wrlong	#147, objptr
21220     04 64 06 F1 | 	add	objptr, #4
21224     32 35 69 FC | 	wrlong	#154, objptr
21228     04 64 06 F1 | 	add	objptr, #4
2122c     32 09 68 FC | 	wrlong	#4, objptr
21230     04 64 86 F1 | 	sub	objptr, #4
21234     32 7B 02 FB | 	rdlong	result1, objptr
21238     14 64 86 F1 | 	sub	objptr, #20
2123c     32 7B 62 FC | 	wrlong	result1, objptr
21240     04 64 06 F1 | 	add	objptr, #4
21244     32 01 68 FC | 	wrlong	#0, objptr
21248     04 64 06 F1 | 	add	objptr, #4
2124c     32 01 68 FC | 	wrlong	#0, objptr
21250     19 00 00 FF 
21254     0C 65 06 F1 | 	add	objptr, ##13068
21258     32 03 68 FC | 	wrlong	#1, objptr
2125c     01 00 00 FF 
21260     98 65 06 F1 | 	add	objptr, ##920
21264     32 01 68 FC | 	wrlong	#0, objptr
21268     35 97 02 F6 | 	mov	arg03, ptr__dat__
2126c     01 00 00 FF 
21270     00 96 06 F1 | 	add	arg03, ##512
21274     08 64 06 F1 | 	add	objptr, #8
21278     32 97 62 FC | 	wrlong	arg03, objptr
2127c     04 64 86 F1 | 	sub	objptr, #4
21280     03 00 80 FF 
21284     32 3D 69 FC | 	wrlong	##1694, objptr
21288     0D 00 00 FF 
2128c     74 64 86 F1 | 	sub	objptr, ##6772
21290     32 19 68 FC | 	wrlong	#12, objptr
21294     47 00 00 FF 
21298     08 64 86 F1 | 	sub	objptr, ##36360
2129c     54 D7 BF FD | 	call	#_init_commands
212a0     A0 F6 BF FD | 	call	#_init_error_strings
212a4     08 EE BF FD | 	call	#_init_audio
212a8     BC 41 BF FD | 	call	#_do_new
212ac     38 00 00 FF 
212b0     E0 65 06 F1 | 	add	objptr, ##29152
212b4     32 93 02 FB | 	rdlong	arg01, objptr
212b8     04 64 86 F1 | 	sub	objptr, #4
212bc     32 95 02 FB | 	rdlong	arg02, objptr
212c0     38 00 00 FF 
212c4     DC 65 86 F1 | 	sub	objptr, ##29148
212c8     0C 18 B0 FD | 	call	#_hg010b_spin2_cls
212cc     38 00 00 FF 
212d0     E4 65 06 F1 | 	add	objptr, ##29156
212d4     32 93 02 FB | 	rdlong	arg01, objptr
212d8     38 00 00 FF 
212dc     E4 65 86 F1 | 	sub	objptr, ##29156
212e0     28 16 B0 FD | 	call	#_hg010b_spin2_setfontfamily
212e4                 | ' 
212e4                 | ' leading_spaces:=amount
212e4     01 00 00 FF 
212e8     B6 64 06 F1 | 	add	objptr, ##694
212ec     32 05 68 FC | 	wrlong	#2, objptr
212f0     01 00 00 FF 
212f4     B6 64 86 F1 | 	sub	objptr, ##694
212f8     9B 01 00 FF 
212fc     37 A7 06 F6 | 	mov	local01, ##@LR__6162
21300     3D 92 06 F6 | 	mov	arg01, #61
21304     3C 94 06 F6 | 	mov	arg02, #60
21308     3B 96 06 F6 | 	mov	arg03, #59
2130c     3A 98 06 F6 | 	mov	arg04, #58
21310     F0 7D B0 FD | 	call	#__system___vfs_open_sdcardx
21314     3D 95 02 F6 | 	mov	arg02, result1
21318     53 93 02 F6 | 	mov	arg01, local01
2131c     A8 3A B0 FD | 	call	#__system___mount
21320     9B 01 00 FF 
21324     3B 93 06 F6 | 	mov	arg01, ##@LR__6163
21328     60 3D B0 FD | 	call	#__system___chdir
2132c     9B 01 00 FF 
21330     43 A7 06 F6 | 	mov	local01, ##@LR__6164
21334     4C 00 00 FF 
21338     38 64 06 F1 | 	add	objptr, ##38968
2133c     32 A7 62 FC | 	wrlong	local01, objptr
21340     13 00 00 FF 
21344     60 64 86 F1 | 	sub	objptr, ##9824
21348     32 93 02 FB | 	rdlong	arg01, objptr
2134c     38 00 00 FF 
21350     D8 65 86 F1 | 	sub	objptr, ##29144
21354     01 92 66 F0 | 	shl	arg01, #1
21358     01 94 06 F6 | 	mov	arg02, #1
2135c     2C 16 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21360                 | ' init_commands
21360                 | ' init_error_strings
21360                 | ' init_audio
21360                 | ' do_new
21360                 | ' cls(ink, paper)
21360                 | ' v.setfontfamily(font) 				' use ST Mono font
21360                 | ' v.setleadingspaces(2)
21360                 | ' mount "/sd", _vfs_open_sdcard()
21360                 | ' chdir "/sd/bas"
21360                 | ' currentdir$="/sd/bas"
21360                 | ' position 2*editor_spaces,1 : print ver$
21360     00 92 06 F6 | 	mov	arg01, #0
21364     18 8C B0 FD | 	call	#__system___getiolock_0622
21368     3D 93 02 F6 | 	mov	arg01, result1
2136c     8C 36 B0 FD | 	call	#__system___lockmem
21370     18 00 00 FF 
21374     40 6B 06 F1 | 	add	ptr__dat__, ##12608
21378     35 95 02 FB | 	rdlong	arg02, ptr__dat__
2137c     18 00 00 FF 
21380     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
21384     00 92 06 F6 | 	mov	arg01, #0
21388     00 96 06 F6 | 	mov	arg03, #0
2138c     60 43 B0 FD | 	call	#__system___basic_print_string
21390     00 92 06 F6 | 	mov	arg01, #0
21394     0A 94 06 F6 | 	mov	arg02, #10
21398     00 96 06 F6 | 	mov	arg03, #0
2139c     F8 42 B0 FD | 	call	#__system___basic_print_char
213a0     00 92 06 F6 | 	mov	arg01, #0
213a4     D8 8B B0 FD | 	call	#__system___getiolock_0622
213a8     3D 01 68 FC | 	wrlong	#0, result1
213ac     54 00 00 FF 
213b0     74 64 06 F1 | 	add	objptr, ##43124
213b4     32 93 02 FB | 	rdlong	arg01, objptr
213b8     0F 00 00 FF 
213bc     74 64 86 F1 | 	sub	objptr, ##7796
213c0     32 A7 02 FB | 	rdlong	local01, objptr
213c4     45 00 00 FF 
213c8     00 64 86 F1 | 	sub	objptr, ##35328
213cc     53 93 82 F1 | 	sub	arg01, local01
213d0     00 94 06 F6 | 	mov	arg02, #0
213d4     0A 96 06 F6 | 	mov	arg03, #10
213d8     1C 51 B0 FD | 	call	#__system__Number_S
213dc     3D 93 02 F6 | 	mov	arg01, result1
213e0     9B 01 00 FF 
213e4     4B 95 06 F6 | 	mov	arg02, ##@LR__6165
213e8     6C 36 B0 FD | 	call	#__system___string_concat
213ec     3D A7 02 F6 | 	mov	local01, result1
213f0     52 00 00 FF 
213f4     DC 64 06 F1 | 	add	objptr, ##42204
213f8     32 A7 62 FC | 	wrlong	local01, objptr
213fc     52 00 00 FF 
21400     DC 64 86 F1 | 	sub	objptr, ##42204
21404                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
21404     00 92 06 F6 | 	mov	arg01, #0
21408     74 8B B0 FD | 	call	#__system___getiolock_0622
2140c     3D 93 02 F6 | 	mov	arg01, result1
21410     E8 35 B0 FD | 	call	#__system___lockmem
21414     52 00 00 FF 
21418     DC 64 06 F1 | 	add	objptr, ##42204
2141c     32 95 02 FB | 	rdlong	arg02, objptr
21420     52 00 00 FF 
21424     DC 64 86 F1 | 	sub	objptr, ##42204
21428     00 92 06 F6 | 	mov	arg01, #0
2142c     00 96 06 F6 | 	mov	arg03, #0
21430     BC 42 B0 FD | 	call	#__system___basic_print_string
21434     00 92 06 F6 | 	mov	arg01, #0
21438     0A 94 06 F6 | 	mov	arg02, #10
2143c     00 96 06 F6 | 	mov	arg03, #0
21440     54 42 B0 FD | 	call	#__system___basic_print_char
21444     00 92 06 F6 | 	mov	arg01, #0
21448     34 8B B0 FD | 	call	#__system___getiolock_0622
2144c     3D 01 68 FC | 	wrlong	#0, result1
21450     38 00 00 FF 
21454     D8 65 06 F1 | 	add	objptr, ##29144
21458     32 93 02 FB | 	rdlong	arg01, objptr
2145c     38 00 00 FF 
21460     D8 65 86 F1 | 	sub	objptr, ##29144
21464     01 92 66 F0 | 	shl	arg01, #1
21468     04 94 06 F6 | 	mov	arg02, #4
2146c     1C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21470                 | ' position 2*editor_spaces,4 : print "Ready"
21470     00 92 06 F6 | 	mov	arg01, #0
21474     08 8B B0 FD | 	call	#__system___getiolock_0622
21478     3D 93 02 F6 | 	mov	arg01, result1
2147c     7C 35 B0 FD | 	call	#__system___lockmem
21480     9B 01 00 FF 
21484     5D 95 06 F6 | 	mov	arg02, ##@LR__6166
21488     00 92 06 F6 | 	mov	arg01, #0
2148c     00 96 06 F6 | 	mov	arg03, #0
21490     5C 42 B0 FD | 	call	#__system___basic_print_string
21494     00 92 06 F6 | 	mov	arg01, #0
21498     0A 94 06 F6 | 	mov	arg02, #10
2149c     00 96 06 F6 | 	mov	arg03, #0
214a0     F4 41 B0 FD | 	call	#__system___basic_print_char
214a4     00 92 06 F6 | 	mov	arg01, #0
214a8     D4 8A B0 FD | 	call	#__system___getiolock_0622
214ac     3D 01 68 FC | 	wrlong	#0, result1
214b0     00 94 06 F6 | 	mov	arg02, #0
214b4     01 94 D6 F7 | 	test	arg02, #1 wc
214b8     5A 4C 64 FD | 	drvc	#38
214bc     01 94 D6 F7 | 	test	arg02, #1 wc
214c0     5A 4E 64 FD | 	drvc	#39
214c4     9B 01 00 FF 
214c8     63 A7 06 F6 | 	mov	local01, ##@LR__6167
214cc     54 00 00 FF 
214d0     A0 64 06 F1 | 	add	objptr, ##43168
214d4     32 A7 62 FC | 	wrlong	local01, objptr
214d8     04 64 06 F1 | 	add	objptr, #4
214dc     FF FF FF FF 
214e0     32 FF 6B FC | 	wrlong	##-1, objptr
214e4     0C 64 06 F1 | 	add	objptr, #12
214e8     32 01 68 FC | 	wrlong	#0, objptr
214ec                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
214ec                 | ' loadname="noname.bas"
214ec                 | ' do_insert=-1
214ec                 | ' inload=0
214ec                 | ' for i=0 to 1 : beepsample(i)=32767  : next i : for i=2 to 3: beepsample(i)=-32767 : next i
214ec     00 A8 06 F6 | 	mov	local02, #0
214f0     3E 00 00 FF 
214f4     18 64 86 F1 | 	sub	objptr, ##31768
214f8     D7 10 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
214fc                 | LR__2680
214fc     54 AB 02 F6 | 	mov	local03, local02
21500     01 AA 66 F0 | 	shl	local03, #1
21504     32 AB 02 F1 | 	add	local03, objptr
21508     3F 00 80 FF 
2150c     55 FF 5B FC | 	wrword	##32767, local03
21510     01 A8 06 F1 | 	add	local02, #1
21514     02 A8 56 F2 | 	cmps	local02, #2 wc
21518     E0 FF 9F CD |  if_b	jmp	#LR__2680
2151c                 | LR__2681
2151c     02 A8 06 F6 | 	mov	local02, #2
21520     D7 10 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
21524                 | LR__2682
21524     54 AB 02 F6 | 	mov	local03, local02
21528     01 AA 66 F0 | 	shl	local03, #1
2152c     32 AB 02 F1 | 	add	local03, objptr
21530     40 00 80 FF 
21534     55 03 58 FC | 	wrword	##32769, local03
21538     01 A8 06 F1 | 	add	local02, #1
2153c     04 A8 16 F2 | 	cmp	local02, #4 wc
21540     E0 FF 9F CD |  if_b	jmp	#LR__2682
21544                 | LR__2683
21544     16 00 00 FF 
21548     98 64 86 F1 | 	sub	objptr, ##11416
2154c                 | ' 
2154c                 | ' open "/sd/bas/autorun.bas" for input as #9
2154c     9B 01 00 FF 
21550     6E 95 06 F6 | 	mov	arg02, ##@LR__6168
21554     09 92 06 F6 | 	mov	arg01, #9
21558     00 96 06 F6 | 	mov	arg03, #0
2155c     4C 40 B0 FD | 	call	#__system___basic_open_string
21560     20 68 06 F1 | 	add	ptr___system__dat__, #32
21564     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
21568     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
2156c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
21570     54 00 00 FF 
21574     B4 64 06 F1 | 	add	objptr, ##43188
21578     32 7B 62 FC | 	wrlong	result1, objptr
2157c     54 00 00 FF 
21580     B4 64 86 F1 | 	sub	objptr, ##43188
21584                 | ' err=geterr()
21584                 | ' close #9
21584     09 92 06 F6 | 	mov	arg01, #9
21588     4C 80 B0 FD | 	call	#__system__close
2158c                 | ' if err=0 then line$="run autorun.bas" : interpret
2158c     54 00 00 FF 
21590     B4 64 06 F1 | 	add	objptr, ##43188
21594     32 A7 0A FB | 	rdlong	local01, objptr wz
21598     54 00 00 FF 
2159c     B4 64 86 F1 | 	sub	objptr, ##43188
215a0     9B 01 00 AF 
215a4     82 A7 06 A6 |  if_e	mov	local01, ##@LR__6169
215a8     38 00 00 AF 
215ac     C0 65 06 A1 |  if_e	add	objptr, ##29120
215b0     32 A7 62 AC |  if_e	wrlong	local01, objptr
215b4     38 00 00 AF 
215b8     C0 65 86 A1 |  if_e	sub	objptr, ##29120
215bc     88 03 BE AD |  if_e	call	#_interpret
215c0                 | ' 
215c0                 | ' 
215c0                 | ' '-------------------------------------------------------------------------------------------------------- 
215c0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
215c0                 | ' '--------------------------------------------------------------------------------------------------------
215c0                 | ' 
215c0                 | ' do
215c0                 | LR__2684
215c0     40 F3 BD FD | 	call	#_edit
215c4     3D A7 02 F6 | 	mov	local01, result1
215c8     38 00 00 FF 
215cc     C0 65 06 F1 | 	add	objptr, ##29120
215d0     32 A7 62 FC | 	wrlong	local01, objptr
215d4     38 00 00 FF 
215d8     C0 65 86 F1 | 	sub	objptr, ##29120
215dc     68 03 BE FD | 	call	#_interpret
215e0     9B 01 00 FF 
215e4     92 A7 06 F6 | 	mov	local01, ##@LR__6170
215e8     38 00 00 FF 
215ec     C0 65 06 F1 | 	add	objptr, ##29120
215f0     32 A7 62 FC | 	wrlong	local01, objptr
215f4     38 00 00 FF 
215f8     C0 65 86 F1 | 	sub	objptr, ##29120
215fc     C0 FF 9F FD | 	jmp	#LR__2684
21600     E7 F0 03 F6 | 	mov	ptra, fp
21604     F2 00 A0 FD | 	call	#popregs_
21608                 | _program_ret
21608     2D 00 64 FD | 	ret
2160c                 | 
2160c                 | ' '' this is not a main program.
2160c                 | ' 
2160c                 | ' '****************************************************************************************************************
2160c                 | ' '                                                                                                             	*
2160c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
2160c                 | ' '                                                                                                            	*
2160c                 | ' ' base - HDMI base pin												*
2160c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
2160c                 | ' '														*
2160c                 | ' '														*
2160c                 | ' '****************************************************************************************************************
2160c                 | ' 
2160c                 | ' pub start(base,mb):result |i
2160c                 | _hg010b_spin2_start
2160c                 | ' 
2160c                 | ' '--------------------------- initialize pointers and variables
2160c                 | ' 
2160c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
2160c     34 64 06 F1 | 	add	objptr, #52
21610     32 7B 02 F6 | 	mov	result1, objptr
21614     28 64 86 F1 | 	sub	objptr, #40
21618     32 7B 62 FC | 	wrlong	result1, objptr
2161c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
2161c                 | ' hdmibase:=base							' HDMI base pin, 8*n
2161c     18 64 06 F1 | 	add	objptr, #24
21620     32 93 62 FC | 	wrlong	arg01, objptr
21624                 | ' mailbox_ptr:=mb		
21624     04 64 06 F1 | 	add	objptr, #4
21628     32 95 62 FC | 	wrlong	arg02, objptr
2162c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
2162c     C1 65 06 F1 | 	add	objptr, #449
21630     32 95 62 FC | 	wrlong	arg02, objptr
21634                 | ' sprite_ptr:=@spr1ptr
21634     D8 64 86 F1 | 	sub	objptr, #216
21638     32 7B 02 F6 | 	mov	result1, objptr
2163c     E5 64 86 F1 | 	sub	objptr, #229
21640     32 7B 62 FC | 	wrlong	result1, objptr
21644                 | ' 
21644                 | ' 		'
21644                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
21644     E5 64 06 F1 | 	add	objptr, #229
21648     32 7B 02 FB | 	rdlong	result1, objptr
2164c     D0 7A 06 F1 | 	add	result1, #208
21650     3D 11 58 FC | 	wrword	#8, result1
21654                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
21654     32 97 02 FB | 	rdlong	arg03, objptr
21658     D2 96 06 F1 | 	add	arg03, #210
2165c     4B 21 58 FC | 	wrword	#16, arg03
21660                 | ' leading_spaces:=0				'
21660     A5 65 06 F1 | 	add	objptr, #421
21664     32 01 68 FC | 	wrlong	#0, objptr
21668                 | ' 
21668                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
21668     99 64 86 F1 | 	sub	objptr, #153
2166c     00 00 A0 FF 
21670     32 0F 68 FC | 	wrlong	##1073741831, objptr
21674                 | ' emptydl[1]:=0
21674     04 64 06 F1 | 	add	objptr, #4
21678     32 01 68 FC | 	wrlong	#0, objptr
2167c                 | ' 
2167c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
2167c                 | ' 
2167c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
2167c     28 65 86 F1 | 	sub	objptr, #296
21680     32 03 68 FC | 	wrlong	#1, objptr
21684                 | ' if s_debug<>0
21684                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
21684     20 00 80 FF 
21688     32 01 68 FC | 	wrlong	##16384, objptr
2168c     F9 64 86 F1 | 	sub	objptr, #249
21690                 | ' setmode()							' set the mode, see below
21690     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
21694                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
21694     49 64 06 F1 | 	add	objptr, #73
21698     32 7B 02 F6 | 	mov	result1, objptr
2169c     35 64 86 F1 | 	sub	objptr, #53
216a0     32 7B 62 FC | 	wrlong	result1, objptr
216a4                 | ' cursor_ptr:=@cursor_x						
216a4     28 64 06 F1 | 	add	objptr, #40
216a8     32 97 02 F6 | 	mov	arg03, objptr
216ac     2C 64 86 F1 | 	sub	objptr, #44
216b0     32 97 62 FC | 	wrlong	arg03, objptr
216b4                 | ' fontnum:=0  							' start with a PC type font 
216b4     55 64 06 F1 | 	add	objptr, #85
216b8     32 01 68 FC | 	wrlong	#0, objptr
216bc                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
216bc     1C 64 06 F1 | 	add	objptr, #28
216c0     32 93 02 F6 | 	mov	arg01, objptr
216c4     81 64 86 F1 | 	sub	objptr, #129
216c8     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
216cc     1C 00 00 FF 
216d0     80 94 06 F1 | 	add	arg02, ##14464
216d4     10 96 06 F6 | 	mov	arg03, #16
216d8     D0 31 B0 FD | 	call	#__system____builtin_memmove
216dc                 | ' leading_spaces:=0
216dc     01 00 00 FF 
216e0     B6 64 06 F1 | 	add	objptr, ##694
216e4     32 01 68 FC | 	wrlong	#0, objptr
216e8     01 00 00 FF 
216ec     B6 64 86 F1 | 	sub	objptr, ##694
216f0                 | ' '---------------------------- initialize a cursor (MSDOS type)
216f0                 | ' 
216f0                 | ' initcursor(154)
216f0     9A 92 06 F6 | 	mov	arg01, #154
216f4     74 00 B0 FD | 	call	#_hg010b_spin2_initcursor
216f8                 | ' 
216f8                 | ' '---------------------------- start the cog
216f8                 | ' 
216f8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
216f8     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
216fc     1C 00 00 FF 
21700     90 94 06 F1 | 	add	arg02, ##14480
21704     32 97 02 F6 | 	mov	arg03, objptr
21708     14 96 06 F1 | 	add	arg03, #20
2170c     10 7A 06 F6 | 	mov	result1, #16
21710     28 96 62 FD | 	setq	arg03
21714     4A 7B F2 FC | 	coginit	result1, arg02 wc
21718     01 7A 66 C6 |  if_b	neg	result1, #1
2171c     30 64 06 F1 | 	add	objptr, #48
21720     32 7B 62 FC | 	wrlong	result1, objptr
21724     30 64 86 F1 | 	sub	objptr, #48
21728                 | ' waitms(40)							' wait for stabilize
21728     28 92 06 F6 | 	mov	arg01, #40
2172c     C0 35 B0 FD | 	call	#__system___waitms
21730                 | ' return cog							' return the driver's cog #
21730     30 64 06 F1 | 	add	objptr, #48
21734     32 7B 02 FB | 	rdlong	result1, objptr
21738     30 64 86 F1 | 	sub	objptr, #48
2173c                 | _hg010b_spin2_start_ret
2173c     2D 00 64 FD | 	ret
21740                 | 
21740                 | ' 
21740                 | ' 
21740                 | ' '**************************************************************************************************************** 
21740                 | ' '                                                                                                             	*
21740                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
21740                 | ' '  Mode number - see start() above or bits below								*
21740                 | ' '                                                                                                             	*
21740                 | ' '****************************************************************************************************************
21740                 | ' 
21740                 | ' 
21740                 | ' pub restorepalette()
21740                 | _hg010b_spin2_restorepalette
21740                 | ' 
21740                 | ' longmove(@ataripalette,@ataripalette2,256)
21740     18 00 00 FF 
21744     40 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
21748     37 93 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
2174c     02 00 00 FF 
21750     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
21754     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21758     1A 00 00 FF 
2175c     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
21760     00 97 06 F6 | 	mov	arg03, #256
21764     D8 31 B0 FD | 	call	#__system__longmove
21768                 | _hg010b_spin2_restorepalette_ret
21768     2D 00 64 FD | 	ret
2176c                 | 
2176c                 | ' 
2176c                 | ' '---------------------------- initialize a cursor (MSDOS type)
2176c                 | ' pub initcursor(color) |i
2176c                 | _hg010b_spin2_initcursor
2176c     03 CA 05 F6 | 	mov	COUNT_, #3
21770     E8 00 A0 FD | 	call	#pushregs_
21774     49 A7 02 F6 | 	mov	local01, arg01
21778                 | ' 
21778                 | ' cursor_x:=0							' place the cursor at 0:0
21778     3C 64 06 F1 | 	add	objptr, #60
2177c     32 01 58 FC | 	wrword	#0, objptr
21780                 | ' cursor_y:=0
21780     02 64 06 F1 | 	add	objptr, #2
21784     32 01 48 FC | 	wrbyte	#0, objptr
21788                 | ' repeat i from 0 to 111
21788     00 A8 06 F6 | 	mov	local02, #0
2178c     F8 65 06 F1 | 	add	objptr, #504
21790     D7 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
21794                 | LR__2690
21794                 | '   cursor[i]:=0
21794     54 AB 02 F6 | 	mov	local03, local02
21798     32 AB 02 F1 | 	add	local03, objptr
2179c     55 01 48 FC | 	wrbyte	#0, local03
217a0     01 A8 06 F1 | 	add	local02, #1
217a4     70 A8 56 F2 | 	cmps	local02, #112 wc
217a8     E8 FF 9F CD |  if_b	jmp	#LR__2690
217ac                 | LR__2691
217ac                 | ' repeat i from 112 to 127
217ac     70 A8 06 F6 | 	mov	local02, #112
217b0     D7 0C 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
217b4                 | LR__2692
217b4                 | '   cursor[i]:=color  
217b4     54 AB 02 F6 | 	mov	local03, local02
217b8     32 AB 02 F1 | 	add	local03, objptr
217bc     55 A7 42 FC | 	wrbyte	local01, local03
217c0     01 A8 06 F1 | 	add	local02, #1
217c4     80 A8 16 F2 | 	cmp	local02, #128 wc
217c8     E8 FF 9F CD |  if_b	jmp	#LR__2692
217cc                 | LR__2693
217cc     01 00 00 FF 
217d0     36 64 86 F1 | 	sub	objptr, ##566
217d4                 | ' 'repeat i from 0 to 127
217d4                 | ' '  if ((i/8)//2)
217d4                 | ' '    cursor[i]:=15
217d4                 | ' '  else
217d4                 | ' '    cursor[i]:=0
217d4                 | ' '  if i>=120    
217d4                 | ' '    cursor[i]:=40
217d4                 | ' setspriteptr(17,@cursor)
217d4     32 95 02 F6 | 	mov	arg02, objptr
217d8     01 00 00 FF 
217dc     36 94 06 F1 | 	add	arg02, ##566
217e0     11 92 06 F6 | 	mov	arg01, #17
217e4     CC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
217e8                 | ' setspritesize(17,8,16)
217e8     11 92 06 F6 | 	mov	arg01, #17
217ec     08 94 06 F6 | 	mov	arg02, #8
217f0     10 96 06 F6 | 	mov	arg03, #16
217f4     48 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
217f8                 | ' setspritepos(17,0,0)
217f8     11 92 06 F6 | 	mov	arg01, #17
217fc     00 94 06 F6 | 	mov	arg02, #0
21800     00 96 06 F6 | 	mov	arg03, #0
21804     D0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
21808                 | ' cursorshape:=14
21808     0B 00 00 FF 
2180c     C6 64 06 F1 | 	add	objptr, ##5830
21810     32 1D 68 FC | 	wrlong	#14, objptr
21814                 | ' cursorcolor:=color
21814     04 64 86 F1 | 	sub	objptr, #4
21818     32 A7 62 FC | 	wrlong	local01, objptr
2181c     0B 00 00 FF 
21820     C2 64 86 F1 | 	sub	objptr, ##5826
21824     E7 F0 03 F6 | 	mov	ptra, fp
21828     F2 00 A0 FD | 	call	#popregs_
2182c                 | _hg010b_spin2_initcursor_ret
2182c     2D 00 64 FD | 	ret
21830                 | 
21830                 | ' 
21830                 | ' pub setcursorshape(shape) | i
21830                 | _hg010b_spin2_setcursorshape
21830                 | ' 
21830                 | ' cursorshape:=shape
21830     0B 00 00 FF 
21834     C6 64 06 F1 | 	add	objptr, ##5830
21838     32 93 62 FC | 	wrlong	arg01, objptr
2183c                 | ' repeat i from 0 to (8*cursorshape)-1
2183c     00 80 06 F6 | 	mov	_var01, #0
21840     49 83 02 F6 | 	mov	_var02, arg01
21844     03 82 66 F0 | 	shl	_var02, #3
21848     01 82 86 F1 | 	sub	_var02, #1
2184c     00 82 56 F2 | 	cmps	_var02, #0 wc
21850     01 84 86 F6 | 	negc	_var03, #1
21854     42 87 02 F6 | 	mov	_var04, _var03
21858     42 83 02 F1 | 	add	_var02, _var03
2185c     0A 00 00 FF 
21860     90 64 86 F1 | 	sub	objptr, ##5264
21864     D7 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
21868                 | LR__2700
21868                 | '   cursor[i]:=0
21868     40 85 02 F6 | 	mov	_var03, _var01
2186c     32 85 02 F1 | 	add	_var03, objptr
21870     42 01 48 FC | 	wrbyte	#0, _var03
21874     43 81 02 F1 | 	add	_var01, _var04
21878     41 81 0A F2 | 	cmp	_var01, _var02 wz
2187c     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
21880                 | LR__2701
21880                 | ' repeat i from 8*cursorshape to 127
21880     0A 00 00 FF 
21884     90 64 06 F1 | 	add	objptr, ##5264
21888     32 87 02 FB | 	rdlong	_var04, objptr
2188c     43 81 02 F6 | 	mov	_var01, _var04
21890     03 80 66 F0 | 	shl	_var01, #3
21894     0B 00 00 FF 
21898     C6 64 86 F1 | 	sub	objptr, ##5830
2189c     03 86 66 F0 | 	shl	_var04, #3
218a0     80 86 56 F2 | 	cmps	_var04, #128 wc
218a4     01 84 A6 F6 | 	negnc	_var03, #1
218a8     7F 82 06 F6 | 	mov	_var02, #127
218ac     42 83 02 F1 | 	add	_var02, _var03
218b0     D7 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
218b4                 | LR__2702
218b4                 | '   cursor[i]:=cursorcolor
218b4     40 87 02 F6 | 	mov	_var04, _var01
218b8     01 00 00 FF 
218bc     36 64 06 F1 | 	add	objptr, ##566
218c0     32 87 02 F1 | 	add	_var04, objptr
218c4     0A 00 00 FF 
218c8     8C 64 06 F1 | 	add	objptr, ##5260
218cc     32 93 02 FB | 	rdlong	arg01, objptr
218d0     0B 00 00 FF 
218d4     C2 64 86 F1 | 	sub	objptr, ##5826
218d8     43 93 42 FC | 	wrbyte	arg01, _var04
218dc     42 81 02 F1 | 	add	_var01, _var03
218e0     41 81 0A F2 | 	cmp	_var01, _var02 wz
218e4     CC FF 9F 5D |  if_ne	jmp	#LR__2702
218e8                 | LR__2703
218e8                 | _hg010b_spin2_setcursorshape_ret
218e8     2D 00 64 FD | 	ret
218ec                 | 
218ec                 | ' 
218ec                 | ' pub setcursorcolor(color) | i
218ec                 | _hg010b_spin2_setcursorcolor
218ec                 | ' 
218ec                 | ' cursorcolor:=color
218ec     0B 00 00 FF 
218f0     C2 64 06 F1 | 	add	objptr, ##5826
218f4     32 93 62 FC | 	wrlong	arg01, objptr
218f8                 | ' repeat i from 0 to (8*cursorshape)-1
218f8     00 92 06 F6 | 	mov	arg01, #0
218fc     04 64 06 F1 | 	add	objptr, #4
21900     32 81 02 FB | 	rdlong	_var01, objptr
21904     03 80 66 F0 | 	shl	_var01, #3
21908     01 80 86 F1 | 	sub	_var01, #1
2190c     00 80 56 F2 | 	cmps	_var01, #0 wc
21910     01 82 86 F6 | 	negc	_var02, #1
21914     41 85 02 F6 | 	mov	_var03, _var02
21918     41 81 02 F1 | 	add	_var01, _var02
2191c     0A 00 00 FF 
21920     90 64 86 F1 | 	sub	objptr, ##5264
21924     D7 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
21928                 | LR__2710
21928                 | '   cursor[i]:=0
21928     49 83 02 F6 | 	mov	_var02, arg01
2192c     32 83 02 F1 | 	add	_var02, objptr
21930     41 01 48 FC | 	wrbyte	#0, _var02
21934     42 93 02 F1 | 	add	arg01, _var03
21938     40 93 0A F2 | 	cmp	arg01, _var01 wz
2193c     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
21940                 | LR__2711
21940                 | ' repeat i from 8*cursorshape to 127
21940     0A 00 00 FF 
21944     90 64 06 F1 | 	add	objptr, ##5264
21948     32 85 02 FB | 	rdlong	_var03, objptr
2194c     42 93 02 F6 | 	mov	arg01, _var03
21950     03 92 66 F0 | 	shl	arg01, #3
21954     0B 00 00 FF 
21958     C6 64 86 F1 | 	sub	objptr, ##5830
2195c     03 84 66 F0 | 	shl	_var03, #3
21960     80 84 56 F2 | 	cmps	_var03, #128 wc
21964     01 82 A6 F6 | 	negnc	_var02, #1
21968     7F 80 06 F6 | 	mov	_var01, #127
2196c     41 81 02 F1 | 	add	_var01, _var02
21970     D7 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
21974                 | LR__2712
21974                 | '   cursor[i]:=cursorcolor
21974     49 85 02 F6 | 	mov	_var03, arg01
21978     01 00 00 FF 
2197c     36 64 06 F1 | 	add	objptr, ##566
21980     32 85 02 F1 | 	add	_var03, objptr
21984     0A 00 00 FF 
21988     8C 64 06 F1 | 	add	objptr, ##5260
2198c     32 87 02 FB | 	rdlong	_var04, objptr
21990     0B 00 00 FF 
21994     C2 64 86 F1 | 	sub	objptr, ##5826
21998     42 87 42 FC | 	wrbyte	_var04, _var03
2199c     41 93 02 F1 | 	add	arg01, _var02
219a0     40 93 0A F2 | 	cmp	arg01, _var01 wz
219a4     CC FF 9F 5D |  if_ne	jmp	#LR__2712
219a8                 | LR__2713
219a8                 | _hg010b_spin2_setcursorcolor_ret
219a8     2D 00 64 FD | 	ret
219ac                 | 
219ac                 | '   
219ac                 | '   
219ac                 | '   
219ac                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
219ac                 | _hg010b_spin2_setmode
219ac     02 CA 05 F6 | 	mov	COUNT_, #2
219b0     E8 00 A0 FD | 	call	#pushregs_
219b4                 | ' 
219b4                 | ' 
219b4                 | ' dl_ptr:=@emptydl[0]
219b4     01 00 00 FF 
219b8     1D 64 06 F1 | 	add	objptr, ##541
219bc     32 9B 02 F6 | 	mov	arg05, objptr
219c0     FD 65 86 F1 | 	sub	objptr, #509
219c4     32 9B 62 FC | 	wrlong	arg05, objptr
219c8                 | ' 
219c8                 | ' if cog>0 
219c8     10 64 06 F1 | 	add	objptr, #16
219cc     32 9B 02 FB | 	rdlong	arg05, objptr
219d0     30 64 86 F1 | 	sub	objptr, #48
219d4     01 9A 56 F2 | 	cmps	arg05, #1 wc
219d8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
219d8     01 92 06 36 |  if_ae	mov	arg01, #1
219dc     58 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
219e0                 | ' xres:=1024
219e0     01 00 00 FF 
219e4     26 64 06 F1 | 	add	objptr, ##550
219e8     02 00 80 FF 
219ec     32 01 68 FC | 	wrlong	##1024, objptr
219f0                 | ' yres:=600
219f0     04 64 06 F1 | 	add	objptr, #4
219f4     01 00 80 FF 
219f8     32 B1 68 FC | 	wrlong	##600, objptr
219fc                 | ' ppl:=(timings[3])
219fc     1C 00 00 FF 
21a00     4C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
21a04     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21a08     51 65 86 F1 | 	sub	objptr, #337
21a0c     32 9B 62 FC | 	wrlong	arg05, objptr
21a10                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
21a10     10 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
21a14     37 A7 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
21a18     01 A6 66 F0 | 	shl	local01, #1
21a1c     80 64 86 F1 | 	sub	objptr, #128
21a20     32 A7 62 FC | 	wrlong	local01, objptr
21a24                 | ' cpl1:=cpl '' todo remove
21a24     04 64 06 F1 | 	add	objptr, #4
21a28     32 A7 62 FC | 	wrlong	local01, objptr
21a2c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21a2c     04 00 00 FF 
21a30     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
21a34     41 64 86 F1 | 	sub	objptr, #65
21a38     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21a3c                 | ' repeat i from 0 to 3
21a3c     00 A8 06 F6 | 	mov	local02, #0
21a40     04 00 00 FF 
21a44     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
21a48     08 64 06 F1 | 	add	objptr, #8
21a4c     D7 20 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
21a50                 | LR__2720
21a50                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
21a50     54 A7 02 F6 | 	mov	local01, local02
21a54     02 A6 66 F0 | 	shl	local01, #2
21a58     37 A7 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
21a5c     32 9B 02 FB | 	rdlong	arg05, objptr
21a60     11 9A 66 F0 | 	shl	arg05, #17
21a64     53 A7 02 FB | 	rdlong	local01, local01
21a68     4D A7 02 F1 | 	add	local01, arg05
21a6c     80 40 38 FF 
21a70     00 A6 06 F1 | 	add	local01, ##1887502336
21a74     54 9B 02 F6 | 	mov	arg05, local02
21a78     02 9A 66 F0 | 	shl	arg05, #2
21a7c     37 9B 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
21a80     4D A7 62 FC | 	wrlong	local01, arg05
21a84     01 A8 06 F1 | 	add	local02, #1
21a88     04 A8 56 F2 | 	cmps	local02, #4 wc
21a8c     C0 FF 9F CD |  if_b	jmp	#LR__2720
21a90                 | LR__2721
21a90     24 64 86 F1 | 	sub	objptr, #36
21a94     1C 00 00 FF 
21a98     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21a9c                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
21a9c                 | ' 'hubset(timings[10])
21a9c                 | ' waitms(1)                                                   	' wait for stabilization
21a9c     01 92 06 F6 | 	mov	arg01, #1
21aa0     4C 32 B0 FD | 	call	#__system___waitms
21aa4     1C 00 00 FF 
21aa8     6C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
21aac     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21ab0     61 64 06 F1 | 	add	objptr, #97
21ab4     32 A9 62 FC | 	wrlong	local02, objptr
21ab8     54 A7 52 F6 | 	abs	local01, local02 wc
21abc     04 A6 46 F0 | 	shr	local01, #4
21ac0     53 A7 82 F6 | 	negc	local01, local01
21ac4     9C 64 06 F1 | 	add	objptr, #156
21ac8     32 A7 62 FC | 	wrlong	local01, objptr
21acc     A4 64 86 F1 | 	sub	objptr, #164
21ad0     32 A9 02 FB | 	rdlong	local02, objptr
21ad4     08 64 06 F1 | 	add	objptr, #8
21ad8     32 A7 02 FB | 	rdlong	local01, objptr
21adc     53 A9 02 FD | 	qmul	local02, local01
21ae0                 | ' lines:=timings[11]
21ae0                 | ' t_lines:=lines/16
21ae0                 | ' buflen:=cpl*lines						' framebuffer length in longs
21ae0     29 64 86 F1 | 	sub	objptr, #41
21ae4     19 A6 C6 F9 | 	decod	local01, #25
21ae8     10 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
21aec     18 A8 62 FD | 	getqx	local02
21af0     32 A9 62 FC | 	wrlong	local02, objptr
21af4     38 64 86 F1 | 	sub	objptr, #56
21af8     02 A8 66 F0 | 	shl	local02, #2
21afc     54 A7 82 F1 | 	sub	local01, local02
21b00     32 A7 62 FC | 	wrlong	local01, objptr
21b04     FD 64 06 F1 | 	add	objptr, #253
21b08     32 A9 02 FB | 	rdlong	local02, objptr
21b0c     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21b10     4D A9 02 FD | 	qmul	local02, arg05
21b14                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
21b14                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21b14     F9 64 86 F1 | 	sub	objptr, #249
21b18                 | ' mode_ptr:=@timings						' set pointers to timings
21b18     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
21b1c                 | ' graphmode:=1024+512+192+48							' det global variable
21b1c                 | ' makedl(graphmode)							' make a DL for the mode
21b1c     03 00 00 FF 
21b20     F0 92 06 F6 | 	mov	arg01, ##1776
21b24     18 A8 62 FD | 	getqx	local02
21b28     54 A7 82 F1 | 	sub	local01, local02
21b2c     32 A7 62 FC | 	wrlong	local01, objptr
21b30     14 64 06 F1 | 	add	objptr, #20
21b34     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21b38     79 64 06 F1 | 	add	objptr, #121
21b3c     03 00 80 FF 
21b40     32 E1 69 FC | 	wrlong	##1776, objptr
21b44     91 64 86 F1 | 	sub	objptr, #145
21b48     1C 00 00 FF 
21b4c     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21b50     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
21b54                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
21b54     32 A7 02 FB | 	rdlong	local01, objptr
21b58     DD 64 06 F1 | 	add	objptr, #221
21b5c     32 A7 62 FC | 	wrlong	local01, objptr
21b60                 | ' s_font_ptr:=font_ptr
21b60     D5 64 86 F1 | 	sub	objptr, #213
21b64     32 A7 02 FB | 	rdlong	local01, objptr
21b68     D9 64 06 F1 | 	add	objptr, #217
21b6c     32 A7 62 FC | 	wrlong	local01, objptr
21b70                 | ' s_lines:=lines
21b70     80 64 86 F1 | 	sub	objptr, #128
21b74     32 A7 02 FB | 	rdlong	local01, objptr
21b78     84 64 06 F1 | 	add	objptr, #132
21b7c     32 A7 62 FC | 	wrlong	local01, objptr
21b80                 | ' s_buflen:=buflen
21b80     AD 64 86 F1 | 	sub	objptr, #173
21b84     32 A7 02 FB | 	rdlong	local01, objptr
21b88     B5 64 06 F1 | 	add	objptr, #181
21b8c     32 A7 62 FC | 	wrlong	local01, objptr
21b90                 | ' s_cpl:=cpl
21b90     94 64 86 F1 | 	sub	objptr, #148
21b94     32 A7 02 FB | 	rdlong	local01, objptr
21b98     90 64 06 F1 | 	add	objptr, #144
21b9c     32 A7 62 FC | 	wrlong	local01, objptr
21ba0                 | ' s_cpl1:=cpl
21ba0     90 64 86 F1 | 	sub	objptr, #144
21ba4     32 A7 02 FB | 	rdlong	local01, objptr
21ba8     98 64 06 F1 | 	add	objptr, #152
21bac     32 A7 62 FC | 	wrlong	local01, objptr
21bb0                 | ' st_lines:=t_lines
21bb0     0C 64 06 F1 | 	add	objptr, #12
21bb4     32 A7 02 FB | 	rdlong	local01, objptr
21bb8     04 64 06 F1 | 	add	objptr, #4
21bbc     32 A7 62 FC | 	wrlong	local01, objptr
21bc0                 | ' ppl:=ppl/xzoom  
21bc0     28 64 86 F1 | 	sub	objptr, #40
21bc4     32 0F 03 FB | 	rdlong	muldiva_, objptr
21bc8     2C 64 06 F1 | 	add	objptr, #44
21bcc     32 11 03 FB | 	rdlong	muldivb_, objptr
21bd0     05 65 86 F1 | 	sub	objptr, #261
21bd4     FA 00 A0 FD | 	call	#divide_
21bd8     D9 64 06 F1 | 	add	objptr, #217
21bdc     32 11 63 FC | 	wrlong	muldivb_, objptr
21be0                 | ' s_ppl:=ppl
21be0     1C 64 06 F1 | 	add	objptr, #28
21be4     32 11 63 FC | 	wrlong	muldivb_, objptr
21be8     F5 64 86 F1 | 	sub	objptr, #245
21bec                 | ' waitms(20)							' wait 
21bec     14 92 06 F6 | 	mov	arg01, #20
21bf0     FC 30 B0 FD | 	call	#__system___waitms
21bf4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21bf4     04 64 06 F1 | 	add	objptr, #4
21bf8     32 93 02 FB | 	rdlong	arg01, objptr
21bfc     04 64 86 F1 | 	sub	objptr, #4
21c00     32 97 02 FB | 	rdlong	arg03, objptr
21c04     49 97 82 F1 | 	sub	arg03, arg01
21c08     20 94 06 F6 | 	mov	arg02, #32
21c0c     00 98 06 F6 | 	mov	arg04, #0
21c10     01 9A 06 F6 | 	mov	arg05, #1
21c14     0B 00 00 FF 
21c18     CC 64 06 F1 | 	add	objptr, ##5836
21c1c     A0 1F B0 FD | 	call	#_psram_spin2_fill
21c20     0B 00 00 FF 
21c24     CC 64 86 F1 | 	sub	objptr, ##5836
21c28     E7 F0 03 F6 | 	mov	ptra, fp
21c2c     F2 00 A0 FD | 	call	#popregs_
21c30                 | _hg010b_spin2_setmode_ret
21c30     2D 00 64 FD | 	ret
21c34                 | 
21c34                 | ' 
21c34                 | ' '****************************************************************************************************************
21c34                 | ' '                                                                                                             	*
21c34                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
21c34                 | ' '                                                                                                             	*
21c34                 | ' '****************************************************************************************************************
21c34                 | ' 
21c34                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
21c34                 | _hg010b_spin2_makedl
21c34                 | ' 
21c34                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
21c34                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
21c34                 | ' repeat i from 0 to 11                                                           ' clear DL
21c34     00 80 06 F6 | 	mov	_var01, #0
21c38     ED 65 06 F1 | 	add	objptr, #493
21c3c     D7 0E 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
21c40                 | LR__2730
21c40                 | '   displaylist[i]:=0 
21c40     40 83 02 F6 | 	mov	_var02, _var01
21c44     02 82 66 F0 | 	shl	_var02, #2
21c48     32 83 02 F1 | 	add	_var02, objptr
21c4c     41 01 68 FC | 	wrlong	#0, _var02
21c50     01 80 06 F1 | 	add	_var01, #1
21c54     0C 80 56 F2 | 	cmps	_var01, #12 wc
21c58     E4 FF 9F CD |  if_b	jmp	#LR__2730
21c5c                 | LR__2731
21c5c                 | '                         ' 
21c5c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
21c5c     8C 65 86 F1 | 	sub	objptr, #396
21c60     32 83 02 FB | 	rdlong	_var02, objptr
21c64     14 82 66 F0 | 	shl	_var02, #20
21c68     01 82 06 F1 | 	add	_var02, #1
21c6c     04 64 86 F1 | 	sub	objptr, #4
21c70     32 81 02 FB | 	rdlong	_var01, objptr
21c74     06 80 66 F0 | 	shl	_var01, #6
21c78     40 83 02 F1 | 	add	_var02, _var01
21c7c     90 65 06 F1 | 	add	objptr, #400
21c80     32 83 62 FC | 	wrlong	_var02, objptr
21c84     ED 65 86 F1 | 	sub	objptr, #493
21c88                 | ' displaylist[1]:=buf_ptr<<4+%10  
21c88     32 83 02 FB | 	rdlong	_var02, objptr
21c8c     04 82 66 F0 | 	shl	_var02, #4
21c90     02 82 06 F1 | 	add	_var02, #2
21c94     F1 65 06 F1 | 	add	objptr, #497
21c98     32 83 62 FC | 	wrlong	_var02, objptr
21c9c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21c9c     04 64 86 F1 | 	sub	objptr, #4
21ca0     32 83 02 F6 | 	mov	_var02, objptr
21ca4     CD 65 86 F1 | 	sub	objptr, #461
21ca8     32 83 62 FC | 	wrlong	_var02, objptr
21cac     20 64 86 F1 | 	sub	objptr, #32
21cb0                 | _hg010b_spin2_makedl_ret
21cb0     2D 00 64 FD | 	ret
21cb4                 | 
21cb4                 | ' 
21cb4                 | ' 
21cb4                 | ' '****************************************************************************************************************
21cb4                 | ' '                                                                        					*
21cb4                 | ' '  Graphic primitives                                                    					*
21cb4                 | ' '                                                                        					*
21cb4                 | ' '****************************************************************************************************************
21cb4                 | ' 
21cb4                 | ' pub setspriteptr(num,ptr)
21cb4                 | _hg010b_spin2_setspriteptr
21cb4                 | ' long[@spr1ptr+12*num]:=ptr
21cb4     32 81 02 F6 | 	mov	_var01, objptr
21cb8     11 81 06 F1 | 	add	_var01, #273
21cbc     49 83 02 F6 | 	mov	_var02, arg01
21cc0     01 82 66 F0 | 	shl	_var02, #1
21cc4     49 83 02 F1 | 	add	_var02, arg01
21cc8     02 82 66 F0 | 	shl	_var02, #2
21ccc     41 81 02 F1 | 	add	_var01, _var02
21cd0     40 95 62 FC | 	wrlong	arg02, _var01
21cd4                 | _hg010b_spin2_setspriteptr_ret
21cd4     2D 00 64 FD | 	ret
21cd8                 | 
21cd8                 | ' 
21cd8                 | ' pub setspritepos(num,x,y)
21cd8                 | _hg010b_spin2_setspritepos
21cd8                 | ' if y>601
21cd8     01 00 00 FF 
21cdc     5A 96 56 F2 | 	cmps	arg03, ##602 wc
21ce0                 | '   y:=601
21ce0     01 00 00 3F 
21ce4     59 96 06 36 |  if_ae	mov	arg03, ##601
21ce8                 | ' if x>1024
21ce8     02 00 00 FF 
21cec     01 94 56 F2 | 	cmps	arg02, ##1025 wc
21cf0                 | '   x:=1024
21cf0     0A 94 C6 39 |  if_ae	decod	arg02, #10
21cf4                 | ' word[@spr1ptr+12*num+4]:=x
21cf4     11 65 06 F1 | 	add	objptr, #273
21cf8     32 81 02 F6 | 	mov	_var01, objptr
21cfc     49 83 02 F6 | 	mov	_var02, arg01
21d00     01 82 66 F0 | 	shl	_var02, #1
21d04     49 83 02 F1 | 	add	_var02, arg01
21d08     02 82 66 F0 | 	shl	_var02, #2
21d0c     41 81 02 F1 | 	add	_var01, _var02
21d10     04 80 06 F1 | 	add	_var01, #4
21d14     40 95 52 FC | 	wrword	arg02, _var01
21d18                 | ' word[@spr1ptr+12*num+6]:=y
21d18     32 81 02 F6 | 	mov	_var01, objptr
21d1c     49 83 02 F6 | 	mov	_var02, arg01
21d20     01 82 66 F0 | 	shl	_var02, #1
21d24     49 83 02 F1 | 	add	_var02, arg01
21d28     02 82 66 F0 | 	shl	_var02, #2
21d2c     41 81 02 F1 | 	add	_var01, _var02
21d30     06 80 06 F1 | 	add	_var01, #6
21d34     40 97 52 FC | 	wrword	arg03, _var01
21d38     11 65 86 F1 | 	sub	objptr, #273
21d3c                 | _hg010b_spin2_setspritepos_ret
21d3c     2D 00 64 FD | 	ret
21d40                 | 
21d40                 | ' 
21d40                 | ' pub setspritesize(num,w,h)
21d40                 | _hg010b_spin2_setspritesize
21d40                 | ' word[@spr1ptr+12*num+8]:=w
21d40     11 65 06 F1 | 	add	objptr, #273
21d44     32 81 02 F6 | 	mov	_var01, objptr
21d48     49 83 02 F6 | 	mov	_var02, arg01
21d4c     01 82 66 F0 | 	shl	_var02, #1
21d50     49 83 02 F1 | 	add	_var02, arg01
21d54     02 82 66 F0 | 	shl	_var02, #2
21d58     41 81 02 F1 | 	add	_var01, _var02
21d5c     08 80 06 F1 | 	add	_var01, #8
21d60     40 95 52 FC | 	wrword	arg02, _var01
21d64                 | ' word[@spr1ptr+12*num+10]:=h
21d64     32 81 02 F6 | 	mov	_var01, objptr
21d68     49 83 02 F6 | 	mov	_var02, arg01
21d6c     01 82 66 F0 | 	shl	_var02, #1
21d70     49 83 02 F1 | 	add	_var02, arg01
21d74     02 82 66 F0 | 	shl	_var02, #2
21d78     41 81 02 F1 | 	add	_var01, _var02
21d7c     0A 80 06 F1 | 	add	_var01, #10
21d80     40 97 52 FC | 	wrword	arg03, _var01
21d84     11 65 86 F1 | 	sub	objptr, #273
21d88                 | _hg010b_spin2_setspritesize_ret
21d88     2D 00 64 FD | 	ret
21d8c                 | 
21d8c                 | ' 
21d8c                 | ' 
21d8c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
21d8c                 | ' 
21d8c                 | ' 
21d8c                 | ' pub putpixel(x,y,c)
21d8c                 | _hg010b_spin2_putpixel
21d8c     04 CA 05 F6 | 	mov	COUNT_, #4
21d90     E8 00 A0 FD | 	call	#pushregs_
21d94     49 A7 02 F6 | 	mov	local01, arg01
21d98                 | ' 
21d98                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
21d98     00 A8 06 F6 | 	mov	local02, #0
21d9c     00 A6 56 F2 | 	cmps	local01, #0 wc
21da0     01 A8 66 36 |  if_ae	neg	local02, #1
21da4     E9 64 06 F1 | 	add	objptr, #233
21da8     32 9B 02 FB | 	rdlong	arg05, objptr
21dac     02 9A 66 F0 | 	shl	arg05, #2
21db0     4D A7 52 F2 | 	cmps	local01, arg05 wc
21db4     55 AB A2 F1 | 	subx	local03, local03
21db8     55 A9 02 F5 | 	and	local02, local03
21dbc     00 AA 06 F6 | 	mov	local03, #0
21dc0     00 94 56 F2 | 	cmps	arg02, #0 wc
21dc4     01 AA 66 36 |  if_ae	neg	local03, #1
21dc8     55 A9 02 F5 | 	and	local02, local03
21dcc     04 64 86 F1 | 	sub	objptr, #4
21dd0     32 AB 02 FB | 	rdlong	local03, objptr
21dd4     E5 64 86 F1 | 	sub	objptr, #229
21dd8     55 95 52 F2 | 	cmps	arg02, local03 wc
21ddc     56 AD A2 F1 | 	subx	local04, local04
21de0     56 A9 CA F7 | 	test	local02, local04 wz
21de4     48 00 90 AD |  if_e	jmp	#LR__2740
21de8     DD 64 06 F1 | 	add	objptr, #221
21dec     32 93 02 FB | 	rdlong	arg01, objptr
21df0     14 64 06 F1 | 	add	objptr, #20
21df4     32 AD 02 FB | 	rdlong	local04, objptr
21df8     02 AC 66 F0 | 	shl	local04, #2
21dfc     4A AD 02 FD | 	qmul	local04, arg02
21e00                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21e00     4B 95 02 F6 | 	mov	arg02, arg03
21e04     01 96 06 F6 | 	mov	arg03, #1
21e08     00 98 06 F6 | 	mov	arg04, #0
21e0c     01 9A 06 F6 | 	mov	arg05, #1
21e10     0A 00 00 FF 
21e14     DB 65 06 F1 | 	add	objptr, ##5595
21e18     18 AC 62 FD | 	getqx	local04
21e1c     53 AD 02 F1 | 	add	local04, local01
21e20     56 93 02 F1 | 	add	arg01, local04
21e24     98 1D B0 FD | 	call	#_psram_spin2_fill
21e28     0B 00 00 FF 
21e2c     CC 64 86 F1 | 	sub	objptr, ##5836
21e30                 | LR__2740
21e30     E7 F0 03 F6 | 	mov	ptra, fp
21e34     F2 00 A0 FD | 	call	#popregs_
21e38                 | _hg010b_spin2_putpixel_ret
21e38     2D 00 64 FD | 	ret
21e3c                 | 
21e3c                 | ' 
21e3c                 | ' pub putpixel2(x,y,c)
21e3c                 | _hg010b_spin2_putpixel2
21e3c     02 CA 05 F6 | 	mov	COUNT_, #2
21e40     E8 00 A0 FD | 	call	#pushregs_
21e44     DD 64 06 F1 | 	add	objptr, #221
21e48     32 A7 02 FB | 	rdlong	local01, objptr
21e4c     14 64 06 F1 | 	add	objptr, #20
21e50     32 9B 02 FB | 	rdlong	arg05, objptr
21e54     02 9A 66 F0 | 	shl	arg05, #2
21e58     4A 9B 02 FD | 	qmul	arg05, arg02
21e5c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21e5c     4B 95 02 F6 | 	mov	arg02, arg03
21e60     01 96 06 F6 | 	mov	arg03, #1
21e64     00 98 06 F6 | 	mov	arg04, #0
21e68     01 9A 06 F6 | 	mov	arg05, #1
21e6c     0A 00 00 FF 
21e70     DB 65 06 F1 | 	add	objptr, ##5595
21e74     18 A8 62 FD | 	getqx	local02
21e78     49 A9 02 F1 | 	add	local02, arg01
21e7c     54 A7 02 F1 | 	add	local01, local02
21e80     53 93 02 F6 | 	mov	arg01, local01
21e84     38 1D B0 FD | 	call	#_psram_spin2_fill
21e88     0B 00 00 FF 
21e8c     CC 64 86 F1 | 	sub	objptr, ##5836
21e90     E7 F0 03 F6 | 	mov	ptra, fp
21e94     F2 00 A0 FD | 	call	#popregs_
21e98                 | _hg010b_spin2_putpixel2_ret
21e98     2D 00 64 FD | 	ret
21e9c                 | 
21e9c                 | ' 
21e9c                 | ' pub getpixel2(x,y): c 
21e9c                 | _hg010b_spin2_getpixel2
21e9c     02 CA 05 F6 | 	mov	COUNT_, #2
21ea0     E8 00 A0 FD | 	call	#pushregs_
21ea4     0C F0 07 F1 | 	add	ptra, #12
21ea8     04 CE 05 F1 | 	add	fp, #4
21eac     E7 92 62 FC | 	wrlong	arg01, fp
21eb0     04 CE 05 F1 | 	add	fp, #4
21eb4     E7 94 62 FC | 	wrlong	arg02, fp
21eb8     08 CE 85 F1 | 	sub	fp, #8
21ebc     E7 00 68 FC | 	wrlong	#0, fp
21ec0     E7 92 02 F6 | 	mov	arg01, fp
21ec4     DD 64 06 F1 | 	add	objptr, #221
21ec8     32 95 02 FB | 	rdlong	arg02, objptr
21ecc     14 64 06 F1 | 	add	objptr, #20
21ed0     32 97 02 FB | 	rdlong	arg03, objptr
21ed4     02 96 66 F0 | 	shl	arg03, #2
21ed8     08 CE 05 F1 | 	add	fp, #8
21edc     E7 7A 02 FB | 	rdlong	result1, fp
21ee0     3D 97 02 FD | 	qmul	arg03, result1
21ee4                 | ' 
21ee4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
21ee4     04 CE 85 F1 | 	sub	fp, #4
21ee8     E7 A6 02 FB | 	rdlong	local01, fp
21eec     04 CE 85 F1 | 	sub	fp, #4
21ef0     01 96 06 F6 | 	mov	arg03, #1
21ef4     0A 00 00 FF 
21ef8     DB 65 06 F1 | 	add	objptr, ##5595
21efc     18 A8 62 FD | 	getqx	local02
21f00     53 A9 02 F1 | 	add	local02, local01
21f04     54 95 02 F1 | 	add	arg02, local02
21f08     7C 1B B0 FD | 	call	#_psram_spin2_read1
21f0c     0B 00 00 FF 
21f10     CC 64 86 F1 | 	sub	objptr, ##5836
21f14                 | ' return c
21f14     E7 7A 02 FB | 	rdlong	result1, fp
21f18     E7 F0 03 F6 | 	mov	ptra, fp
21f1c     F2 00 A0 FD | 	call	#popregs_
21f20                 | _hg010b_spin2_getpixel2_ret
21f20     2D 00 64 FD | 	ret
21f24                 | 
21f24                 | '   
21f24                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
21f24                 | ' 
21f24                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
21f24                 | _hg010b_spin2_fastline
21f24     02 CA 05 F6 | 	mov	COUNT_, #2
21f28     E8 00 A0 FD | 	call	#pushregs_
21f2c     49 A7 02 F6 | 	mov	local01, arg01
21f30     4A A9 02 F6 | 	mov	local02, arg02
21f34                 | ' 
21f34                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
21f34     00 96 56 F2 | 	cmps	arg03, #0 wc
21f38     F4 00 90 CD |  if_b	jmp	#LR__2750
21f3c     01 00 00 FF 
21f40     2A 64 06 F1 | 	add	objptr, ##554
21f44     32 9B 02 FB | 	rdlong	arg05, objptr
21f48     01 00 00 FF 
21f4c     2A 64 86 F1 | 	sub	objptr, ##554
21f50     4D 97 52 F2 | 	cmps	arg03, arg05 wc
21f54     D8 00 90 3D |  if_ae	jmp	#LR__2750
21f58     00 A6 56 F2 | 	cmps	local01, #0 wc
21f5c     00 A8 56 C2 |  if_b	cmps	local02, #0 wc
21f60     CC 00 90 CD |  if_b	jmp	#LR__2750
21f64     01 00 00 FF 
21f68     26 64 06 F1 | 	add	objptr, ##550
21f6c     32 9B 02 FB | 	rdlong	arg05, objptr
21f70     01 00 00 FF 
21f74     26 64 86 F1 | 	sub	objptr, ##550
21f78     4D A7 5A F2 | 	cmps	local01, arg05 wcz
21f7c     01 00 00 1F 
21f80     26 64 06 11 |  if_a	add	objptr, ##550
21f84     32 93 02 1B |  if_a	rdlong	arg01, objptr
21f88     01 00 00 1F 
21f8c     26 64 86 11 |  if_a	sub	objptr, ##550
21f90     49 A9 5A 12 |  if_a	cmps	local02, arg01 wcz
21f94                 | '   return
21f94     98 00 90 1D |  if_a	jmp	#LR__2750
21f98     54 A7 5A F2 | 	cmps	local01, local02 wcz
21f9c     53 9B 02 16 |  if_a	mov	arg05, local01
21fa0     54 A7 02 16 |  if_a	mov	local01, local02
21fa4     4D A9 02 16 |  if_a	mov	local02, arg05
21fa8     00 A6 56 F2 | 	cmps	local01, #0 wc
21fac     00 A6 06 C6 |  if_b	mov	local01, #0
21fb0     01 00 00 FF 
21fb4     26 64 06 F1 | 	add	objptr, ##550
21fb8     32 9B 02 FB | 	rdlong	arg05, objptr
21fbc     01 00 00 FF 
21fc0     26 64 86 F1 | 	sub	objptr, ##550
21fc4     4D A9 52 F2 | 	cmps	local02, arg05 wc
21fc8     01 00 00 3F 
21fcc     26 64 06 31 |  if_ae	add	objptr, ##550
21fd0     32 A9 02 3B |  if_ae	rdlong	local02, objptr
21fd4     01 00 00 3F 
21fd8     26 64 86 31 |  if_ae	sub	objptr, ##550
21fdc     DD 64 06 F1 | 	add	objptr, #221
21fe0     32 93 02 FB | 	rdlong	arg01, objptr
21fe4     14 64 06 F1 | 	add	objptr, #20
21fe8     32 9B 02 FB | 	rdlong	arg05, objptr
21fec     02 9A 66 F0 | 	shl	arg05, #2
21ff0     4B 9B 02 FD | 	qmul	arg05, arg03
21ff4                 | ' if x1>x2
21ff4                 | '   x1,x2:=x2,x1
21ff4                 | ' if x1<0 
21ff4                 | '   x1:=0
21ff4                 | ' if x2>=xres
21ff4                 | '   x2:=xres-1  
21ff4     01 A8 86 31 |  if_ae	sub	local02, #1
21ff8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
21ff8     01 96 06 F6 | 	mov	arg03, #1
21ffc     54 97 02 F1 | 	add	arg03, local02
22000     53 97 82 F1 | 	sub	arg03, local01
22004     4C 95 02 F6 | 	mov	arg02, arg04
22008     00 98 06 F6 | 	mov	arg04, #0
2200c     01 9A 06 F6 | 	mov	arg05, #1
22010     0A 00 00 FF 
22014     DB 65 06 F1 | 	add	objptr, ##5595
22018     18 A8 62 FD | 	getqx	local02
2201c     53 A9 02 F1 | 	add	local02, local01
22020     54 93 02 F1 | 	add	arg01, local02
22024     98 1B B0 FD | 	call	#_psram_spin2_fill
22028     0B 00 00 FF 
2202c     CC 64 86 F1 | 	sub	objptr, ##5836
22030                 | LR__2750
22030     E7 F0 03 F6 | 	mov	ptra, fp
22034     F2 00 A0 FD | 	call	#popregs_
22038                 | _hg010b_spin2_fastline_ret
22038     2D 00 64 FD | 	ret
2203c                 | 
2203c                 | ' 
2203c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
2203c                 | _hg010b_spin2_draw
2203c     0E CA 05 F6 | 	mov	COUNT_, #14
22040     E8 00 A0 FD | 	call	#pushregs_
22044     49 A7 02 F6 | 	mov	local01, arg01
22048     4A A9 02 F6 | 	mov	local02, arg02
2204c     4B AB 02 F6 | 	mov	local03, arg03
22050     4C AD 02 F6 | 	mov	local04, arg04
22054     4D AF 02 F6 | 	mov	local05, arg05
22058                 | ' 
22058                 | ' if (y1==y2)
22058     56 A9 0A F2 | 	cmp	local02, local04 wz
2205c     18 00 90 5D |  if_ne	jmp	#LR__2760
22060                 | '   fastline(x1,x2,y1,c)
22060     53 93 02 F6 | 	mov	arg01, local01
22064     55 95 02 F6 | 	mov	arg02, local03
22068     54 97 02 F6 | 	mov	arg03, local02
2206c     57 99 02 F6 | 	mov	arg04, local05
22070     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
22074     F8 00 90 FD | 	jmp	#LR__2766
22078                 | LR__2760
22078                 | ' else  
22078                 | '   x:=x1
22078     53 B1 02 F6 | 	mov	local06, local01
2207c                 | '   y:=y1
2207c     54 B3 02 F6 | 	mov	local07, local02
22080                 | ' 
22080                 | '   if (x1<x2) 
22080     55 A7 52 F2 | 	cmps	local01, local03 wc
22084                 | '     xi:=1
22084     01 B4 06 C6 |  if_b	mov	local08, #1
22088                 | '     dx:=x2-x1
22088     55 B7 02 C6 |  if_b	mov	local09, local03
2208c     53 B7 82 C1 |  if_b	sub	local09, local01
22090                 | '   else
22090                 | '     xi:=-1
22090     01 B4 66 36 |  if_ae	neg	local08, #1
22094                 | '     dx:=x1-x2
22094     55 A7 82 31 |  if_ae	sub	local01, local03
22098     53 B7 02 36 |  if_ae	mov	local09, local01
2209c                 | '   
2209c                 | '   if (y1<y2) 
2209c     56 A9 52 F2 | 	cmps	local02, local04 wc
220a0                 | '     yi:=1
220a0     01 B8 06 C6 |  if_b	mov	local10, #1
220a4                 | '     dy:=y2-y1
220a4     56 BB 02 C6 |  if_b	mov	local11, local04
220a8     54 BB 82 C1 |  if_b	sub	local11, local02
220ac                 | '   else
220ac                 | '     yi:=-1
220ac     01 B8 66 36 |  if_ae	neg	local10, #1
220b0                 | '     dy:=y1-y2
220b0     56 A9 82 31 |  if_ae	sub	local02, local04
220b4     54 BB 02 36 |  if_ae	mov	local11, local02
220b8                 | ' 
220b8                 | '   putpixel(x,y,c)
220b8     57 97 02 F6 | 	mov	arg03, local05
220bc     58 93 02 F6 | 	mov	arg01, local06
220c0     59 95 02 F6 | 	mov	arg02, local07
220c4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
220c8                 | ' 
220c8                 | '   if (dx>dy)
220c8     5D B7 5A F2 | 	cmps	local09, local11 wcz
220cc     50 00 90 ED |  if_be	jmp	#LR__2762
220d0                 | '     ai:=(dy-dx)*2
220d0     5D BD 02 F6 | 	mov	local12, local11
220d4     5B BD 82 F1 | 	sub	local12, local09
220d8     01 BC 66 F0 | 	shl	local12, #1
220dc                 | '     bi:=dy*2
220dc     01 BA 66 F0 | 	shl	local11, #1
220e0     5D BF 02 F6 | 	mov	local13, local11
220e4                 | '     d:= bi-dx
220e4     5F C1 02 F6 | 	mov	local14, local13
220e8     5B C1 82 F1 | 	sub	local14, local09
220ec                 | '     repeat while (x<>x2) 
220ec                 | LR__2761
220ec     55 B1 0A F2 | 	cmp	local06, local03 wz
220f0     7C 00 90 AD |  if_e	jmp	#LR__2765
220f4                 | '       if (d>=0) 
220f4     00 C0 56 F2 | 	cmps	local14, #0 wc
220f8                 | '         x+=xi
220f8     5A B1 02 31 |  if_ae	add	local06, local08
220fc                 | '         y+=yi
220fc     5C B3 02 31 |  if_ae	add	local07, local10
22100                 | '         d+=ai
22100     5E C1 02 31 |  if_ae	add	local14, local12
22104                 | '       else
22104                 | '         d+=bi
22104     5F C1 02 C1 |  if_b	add	local14, local13
22108                 | '         x+=xi
22108     5A B1 02 C1 |  if_b	add	local06, local08
2210c                 | '       putpixel(x,y,c)
2210c     58 93 02 F6 | 	mov	arg01, local06
22110     59 95 02 F6 | 	mov	arg02, local07
22114     57 97 02 F6 | 	mov	arg03, local05
22118     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
2211c     CC FF 9F FD | 	jmp	#LR__2761
22120                 | LR__2762
22120                 | '   else
22120                 | '     ai:=(dx-dy)*2
22120     5B BD 02 F6 | 	mov	local12, local09
22124     5D BD 82 F1 | 	sub	local12, local11
22128     01 BC 66 F0 | 	shl	local12, #1
2212c                 | '     bi:=dx*2
2212c     01 B6 66 F0 | 	shl	local09, #1
22130     5B BF 02 F6 | 	mov	local13, local09
22134                 | '     d:=bi-dy
22134     5F C1 02 F6 | 	mov	local14, local13
22138     5D C1 82 F1 | 	sub	local14, local11
2213c                 | '     repeat while (y<>y2)
2213c                 | LR__2763
2213c     56 B3 0A F2 | 	cmp	local07, local04 wz
22140     2C 00 90 AD |  if_e	jmp	#LR__2764
22144                 | '       if (d>=0)
22144     00 C0 56 F2 | 	cmps	local14, #0 wc
22148                 | '         x+=xi
22148     5A B1 02 31 |  if_ae	add	local06, local08
2214c                 | '         y+=yi
2214c     5C B3 02 31 |  if_ae	add	local07, local10
22150                 | '         d+=ai
22150     5E C1 02 31 |  if_ae	add	local14, local12
22154                 | '       else
22154                 | '         d+=bi
22154     5F C1 02 C1 |  if_b	add	local14, local13
22158                 | '         y+=yi
22158     5C B3 02 C1 |  if_b	add	local07, local10
2215c                 | '       putpixel(x, y,c)
2215c     58 93 02 F6 | 	mov	arg01, local06
22160     59 95 02 F6 | 	mov	arg02, local07
22164     57 97 02 F6 | 	mov	arg03, local05
22168     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
2216c     CC FF 9F FD | 	jmp	#LR__2763
22170                 | LR__2764
22170                 | LR__2765
22170                 | LR__2766
22170     E7 F0 03 F6 | 	mov	ptra, fp
22174     F2 00 A0 FD | 	call	#popregs_
22178                 | _hg010b_spin2_draw_ret
22178     2D 00 64 FD | 	ret
2217c                 | 
2217c                 | '  
2217c                 | ' pub fillpush(val) 
2217c                 | _hg010b_spin2_fillpush
2217c                 | ' fillstack[fillptr]:=val
2217c     0B 00 00 FF 
22180     BA 64 06 F1 | 	add	objptr, ##5818
22184     32 81 02 FB | 	rdlong	_var01, objptr
22188     02 80 66 F0 | 	shl	_var01, #2
2218c     0A 00 00 FF 
22190     00 64 86 F1 | 	sub	objptr, ##5120
22194     32 81 02 F1 | 	add	_var01, objptr
22198     40 93 62 FC | 	wrlong	arg01, _var01
2219c                 | ' fillptr+=1   
2219c     0A 00 00 FF 
221a0     00 64 06 F1 | 	add	objptr, ##5120
221a4     32 81 02 FB | 	rdlong	_var01, objptr
221a8     01 80 06 F1 | 	add	_var01, #1
221ac     32 81 62 FC | 	wrlong	_var01, objptr
221b0     0B 00 00 FF 
221b4     BA 64 86 F1 | 	sub	objptr, ##5818
221b8                 | _hg010b_spin2_fillpush_ret
221b8     2D 00 64 FD | 	ret
221bc                 | 
221bc                 | ' 
221bc                 | '     
221bc                 | ' pub fillpop() : val
221bc                 | _hg010b_spin2_fillpop
221bc                 | ' 
221bc                 | ' fillptr-=1
221bc     0B 00 00 FF 
221c0     BA 64 06 F1 | 	add	objptr, ##5818
221c4     32 7B 02 FB | 	rdlong	result1, objptr
221c8     01 7A 86 F1 | 	sub	result1, #1
221cc     32 7B 62 FC | 	wrlong	result1, objptr
221d0                 | ' if fillptr<0
221d0     0B 00 00 FF 
221d4     BA 64 86 F1 | 	sub	objptr, ##5818
221d8     00 7A 56 F2 | 	cmps	result1, #0 wc
221dc                 | '   fillptr:=0
221dc     0B 00 00 CF 
221e0     BA 64 06 C1 |  if_b	add	objptr, ##5818
221e4     32 01 68 CC |  if_b	wrlong	#0, objptr
221e8     0B 00 00 CF 
221ec     BA 64 86 C1 |  if_b	sub	objptr, ##5818
221f0                 | '   val:=-12345
221f0     E7 FF 7F CF 
221f4     C7 81 06 C6 |  if_b	mov	_var01, ##-12345
221f8     28 00 90 CD |  if_b	jmp	#LR__2770
221fc                 | ' else 
221fc                 | '   val:=fillstack[fillptr]
221fc     0B 00 00 FF 
22200     BA 64 06 F1 | 	add	objptr, ##5818
22204     32 81 02 FB | 	rdlong	_var01, objptr
22208     02 80 66 F0 | 	shl	_var01, #2
2220c     0A 00 00 FF 
22210     00 64 86 F1 | 	sub	objptr, ##5120
22214     32 81 02 F1 | 	add	_var01, objptr
22218     40 81 02 FB | 	rdlong	_var01, _var01
2221c     01 00 00 FF 
22220     BA 64 86 F1 | 	sub	objptr, ##698
22224                 | LR__2770
22224                 | ' return val
22224     40 7B 02 F6 | 	mov	result1, _var01
22228                 | _hg010b_spin2_fillpop_ret
22228     2D 00 64 FD | 	ret
2222c                 | 
2222c                 | ' 
2222c                 | '       
2222c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
2222c                 | _hg010b_spin2_fill
2222c     0B CA 05 F6 | 	mov	COUNT_, #11
22230     E8 00 A0 FD | 	call	#pushregs_
22234                 | ' 
22234                 | ' newcolor:=newcolor & 255
22234     4B A7 E2 F8 | 	getbyte	local01, arg03, #0
22238                 | ' oldcolor:=oldcolor & 255
22238     4C A9 E2 F8 | 	getbyte	local02, arg04, #0
2223c                 | ' 
2223c                 | ' if (oldcolor == newcolor) 
2223c     53 A9 0A F2 | 	cmp	local02, local01 wz
22240                 | '   return
22240     70 02 90 AD |  if_e	jmp	#LR__2789
22244                 | ' 
22244                 | ' fillptr:=0
22244     0B 00 00 FF 
22248     BA 64 06 F1 | 	add	objptr, ##5818
2224c     32 01 68 FC | 	wrlong	#0, objptr
22250                 | ' fillmax:=0
22250     04 64 06 F1 | 	add	objptr, #4
22254     32 01 68 FC | 	wrlong	#0, objptr
22258     0B 00 00 FF 
2225c     BE 64 86 F1 | 	sub	objptr, ##5822
22260                 | ' fillpush(x)
22260     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
22264                 | ' fillpush(y)
22264     4A 93 02 F6 | 	mov	arg01, arg02
22268     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
2226c                 | ' y:=fillpop()
2226c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
22270     3D AB 02 F6 | 	mov	local03, result1
22274                 | ' x:=fillpop()
22274     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
22278     3D AD 02 F6 | 	mov	local04, result1
2227c                 | ' 'pinhigh(38)
2227c                 | ' repeat while (x>-1)       
2227c                 | LR__2780
2227c     00 AC 56 F2 | 	cmps	local04, #0 wc
22280     30 02 90 CD |  if_b	jmp	#LR__2788
22284                 | '  ' pintoggle(39)
22284                 | '   x1 := x
22284     56 AF 02 F6 | 	mov	local05, local04
22288                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
22288                 | LR__2781
22288     00 B0 06 F6 | 	mov	local06, #0
2228c     00 B2 06 F6 | 	mov	local07, #0
22290     00 AE 56 F2 | 	cmps	local05, #0 wc
22294     01 B2 66 36 |  if_ae	neg	local07, #1
22298     00 B2 0E F2 | 	cmp	local07, #0 wz
2229c     00 B0 26 56 |  if_ne	not	local06, #0
222a0     00 B4 06 F6 | 	mov	local08, #0
222a4     00 B6 06 F6 | 	mov	local09, #0
222a8     55 95 02 F6 | 	mov	arg02, local03
222ac     57 93 02 F6 | 	mov	arg01, local05
222b0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
222b4     54 7B 0A F2 | 	cmp	result1, local02 wz
222b8     00 B6 26 A6 |  if_e	not	local09, #0
222bc     00 B6 0E F2 | 	cmp	local09, #0 wz
222c0     00 B4 26 56 |  if_ne	not	local08, #0
222c4     5A B1 CA F7 | 	test	local06, local08 wz
222c8                 | '     x1--
222c8     01 AE 86 51 |  if_ne	sub	local05, #1
222cc     B8 FF 9F 5D |  if_ne	jmp	#LR__2781
222d0                 | '   x1++
222d0     01 AE 06 F1 | 	add	local05, #1
222d4                 | '   spanabove := 0
222d4     00 B8 06 F6 | 	mov	local10, #0
222d8                 | '   spanbelow := 0
222d8     00 BA 06 F6 | 	mov	local11, #0
222dc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
222dc                 | LR__2782
222dc     00 B0 06 F6 | 	mov	local06, #0
222e0     02 00 00 FF 
222e4     00 AE 56 F2 | 	cmps	local05, ##1024 wc
222e8     00 B0 26 C6 |  if_b	not	local06, #0
222ec     00 B4 06 F6 | 	mov	local08, #0
222f0     00 B6 06 F6 | 	mov	local09, #0
222f4     55 95 02 F6 | 	mov	arg02, local03
222f8     57 93 02 F6 | 	mov	arg01, local05
222fc     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
22300     54 7B 0A F2 | 	cmp	result1, local02 wz
22304     00 B6 26 A6 |  if_e	not	local09, #0
22308     00 B6 0E F2 | 	cmp	local09, #0 wz
2230c     00 B4 26 56 |  if_ne	not	local08, #0
22310     5A B1 CA F7 | 	test	local06, local08 wz
22314     88 01 90 AD |  if_e	jmp	#LR__2787
22318                 | '     putpixel2 (x1,y, newcolor & 255)
22318     53 97 E2 F8 | 	getbyte	arg03, local01, #0
2231c     57 93 02 F6 | 	mov	arg01, local05
22320     55 95 02 F6 | 	mov	arg02, local03
22324     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
22328                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
22328     00 B0 06 F6 | 	mov	local06, #0
2232c     00 B2 06 F6 | 	mov	local07, #0
22330     00 B8 0E F2 | 	cmp	local10, #0 wz
22334     01 AA 56 A2 |  if_e	cmps	local03, #1 wc
22338     01 B2 66 26 |  if_nc_and_z	neg	local07, #1
2233c     00 B2 0E F2 | 	cmp	local07, #0 wz
22340     00 B0 26 56 |  if_ne	not	local06, #0
22344     00 B4 06 F6 | 	mov	local08, #0
22348     00 B6 06 F6 | 	mov	local09, #0
2234c     55 95 02 F6 | 	mov	arg02, local03
22350     01 94 86 F1 | 	sub	arg02, #1
22354     57 93 02 F6 | 	mov	arg01, local05
22358     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
2235c     54 7B 0A F2 | 	cmp	result1, local02 wz
22360     00 B6 26 A6 |  if_e	not	local09, #0
22364     00 B6 0E F2 | 	cmp	local09, #0 wz
22368     00 B4 26 56 |  if_ne	not	local08, #0
2236c     5A B1 CA F7 | 	test	local06, local08 wz
22370     1C 00 90 AD |  if_e	jmp	#LR__2783
22374                 | '       fillpush(x1)
22374     57 93 02 F6 | 	mov	arg01, local05
22378     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
2237c                 | '       fillpush(y-1)
2237c     55 93 02 F6 | 	mov	arg01, local03
22380     01 92 86 F1 | 	sub	arg01, #1
22384     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
22388                 | '       spanabove := 1 
22388     01 B8 06 F6 | 	mov	local10, #1
2238c     4C 00 90 FD | 	jmp	#LR__2784
22390                 | LR__2783
22390                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
22390     00 B0 06 F6 | 	mov	local06, #0
22394     00 B2 06 F6 | 	mov	local07, #0
22398     00 B8 0E F2 | 	cmp	local10, #0 wz
2239c     01 AA 56 52 |  if_ne	cmps	local03, #1 wc
223a0     01 B2 66 16 |  if_a	neg	local07, #1
223a4     00 B2 0E F2 | 	cmp	local07, #0 wz
223a8     00 B0 26 56 |  if_ne	not	local06, #0
223ac     00 B4 06 F6 | 	mov	local08, #0
223b0     00 B6 06 F6 | 	mov	local09, #0
223b4     55 95 02 F6 | 	mov	arg02, local03
223b8     01 94 86 F1 | 	sub	arg02, #1
223bc     57 93 02 F6 | 	mov	arg01, local05
223c0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
223c4     54 7B 0A F2 | 	cmp	result1, local02 wz
223c8     00 B6 26 56 |  if_ne	not	local09, #0
223cc     00 B6 0E F2 | 	cmp	local09, #0 wz
223d0     00 B4 26 56 |  if_ne	not	local08, #0
223d4     5A B1 CA F7 | 	test	local06, local08 wz
223d8                 | '       spanabove := 0 
223d8     00 B8 06 56 |  if_ne	mov	local10, #0
223dc                 | LR__2784
223dc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
223dc     00 B0 06 F6 | 	mov	local06, #0
223e0     00 B2 06 F6 | 	mov	local07, #0
223e4     00 BA 0E F2 | 	cmp	local11, #0 wz
223e8     01 00 00 AF 
223ec     3F AA 56 A2 |  if_e	cmps	local03, ##575 wc
223f0     01 B2 66 86 |  if_c_and_z	neg	local07, #1
223f4     00 B2 0E F2 | 	cmp	local07, #0 wz
223f8     00 B0 26 56 |  if_ne	not	local06, #0
223fc     00 B4 06 F6 | 	mov	local08, #0
22400     00 B6 06 F6 | 	mov	local09, #0
22404     55 95 02 F6 | 	mov	arg02, local03
22408     01 94 06 F1 | 	add	arg02, #1
2240c     57 93 02 F6 | 	mov	arg01, local05
22410     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22414     54 7B 0A F2 | 	cmp	result1, local02 wz
22418     00 B6 26 A6 |  if_e	not	local09, #0
2241c     00 B6 0E F2 | 	cmp	local09, #0 wz
22420     00 B4 26 56 |  if_ne	not	local08, #0
22424     5A B1 CA F7 | 	test	local06, local08 wz
22428     1C 00 90 AD |  if_e	jmp	#LR__2785
2242c                 | '       fillpush(x1)
2242c     57 93 02 F6 | 	mov	arg01, local05
22430     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
22434                 | '       fillpush(y + 1)
22434     55 93 02 F6 | 	mov	arg01, local03
22438     01 92 06 F1 | 	add	arg01, #1
2243c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
22440                 | '       spanBelow := 1
22440     01 BA 06 F6 | 	mov	local11, #1
22444     50 00 90 FD | 	jmp	#LR__2786
22448                 | LR__2785
22448                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
22448     00 B0 06 F6 | 	mov	local06, #0
2244c     00 B2 06 F6 | 	mov	local07, #0
22450     00 BA 0E F2 | 	cmp	local11, #0 wz
22454     01 00 00 5F 
22458     3F AA 56 52 |  if_ne	cmps	local03, ##575 wc
2245c     01 B2 66 46 |  if_c_and_nz	neg	local07, #1
22460     00 B2 0E F2 | 	cmp	local07, #0 wz
22464     00 B0 26 56 |  if_ne	not	local06, #0
22468     00 B4 06 F6 | 	mov	local08, #0
2246c     00 B6 06 F6 | 	mov	local09, #0
22470     55 95 02 F6 | 	mov	arg02, local03
22474     01 94 06 F1 | 	add	arg02, #1
22478     57 93 02 F6 | 	mov	arg01, local05
2247c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
22480     54 7B 0A F2 | 	cmp	result1, local02 wz
22484     00 B6 26 56 |  if_ne	not	local09, #0
22488     00 B6 0E F2 | 	cmp	local09, #0 wz
2248c     00 B4 26 56 |  if_ne	not	local08, #0
22490     5A B1 CA F7 | 	test	local06, local08 wz
22494                 | '       spanbelow := 0
22494     00 BA 06 56 |  if_ne	mov	local11, #0
22498                 | LR__2786
22498                 | '     x1++
22498     01 AE 06 F1 | 	add	local05, #1
2249c     3C FE 9F FD | 	jmp	#LR__2782
224a0                 | LR__2787
224a0                 | '   y:=fillpop()
224a0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
224a4     3D AB 02 F6 | 	mov	local03, result1
224a8                 | '   x:=fillpop()
224a8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
224ac     3D AD 02 F6 | 	mov	local04, result1
224b0     C8 FD 9F FD | 	jmp	#LR__2780
224b4                 | LR__2788
224b4                 | LR__2789
224b4     E7 F0 03 F6 | 	mov	ptra, fp
224b8     F2 00 A0 FD | 	call	#popregs_
224bc                 | _hg010b_spin2_fill_ret
224bc     2D 00 64 FD | 	ret
224c0                 | 
224c0                 | ' 'pinlow(38)    
224c0                 | ' 
224c0                 | ' '-- A filled circle -----------------------------------------------------
224c0                 | ' 
224c0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
224c0                 | _hg010b_spin2_fcircle
224c0     08 CA 05 F6 | 	mov	COUNT_, #8
224c4     E8 00 A0 FD | 	call	#pushregs_
224c8     4B A7 02 F6 | 	mov	local01, arg03
224cc     FF FF 7F FF 
224d0     FE A7 06 FD | 	qmul	local01, ##-2
224d4     49 A9 02 F6 | 	mov	local02, arg01
224d8     4A AB 02 F6 | 	mov	local03, arg02
224dc     4C AD 02 F6 | 	mov	local04, arg04
224e0                 | ' 
224e0                 | ' d:=5-4*r
224e0     53 99 02 F6 | 	mov	arg04, local01
224e4     02 98 66 F0 | 	shl	arg04, #2
224e8     05 AE 06 F6 | 	mov	local05, #5
224ec     4C AF 82 F1 | 	sub	local05, arg04
224f0                 | ' x:=0
224f0     00 B0 06 F6 | 	mov	local06, #0
224f4                 | ' y:=r
224f4                 | ' da:=(-2*r+5)*4
224f4                 | ' db:=3*4
224f4     0C B2 06 F6 | 	mov	local07, #12
224f8                 | ' repeat while (x<=y) 
224f8     18 B4 62 FD | 	getqx	local08
224fc     05 B4 06 F1 | 	add	local08, #5
22500     02 B4 66 F0 | 	shl	local08, #2
22504                 | LR__2790
22504     53 B1 5A F2 | 	cmps	local06, local01 wcz
22508     B4 00 90 1D |  if_a	jmp	#LR__2792
2250c                 | '   fastline(x0-x,x0+x,y0-y,c)
2250c     54 93 02 F6 | 	mov	arg01, local02
22510     58 93 82 F1 | 	sub	arg01, local06
22514     54 95 02 F6 | 	mov	arg02, local02
22518     58 95 02 F1 | 	add	arg02, local06
2251c     55 97 02 F6 | 	mov	arg03, local03
22520     53 97 82 F1 | 	sub	arg03, local01
22524     56 99 02 F6 | 	mov	arg04, local04
22528     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2252c                 | '   fastline(x0-x,x0+x,y0+y,c)
2252c     54 93 02 F6 | 	mov	arg01, local02
22530     58 93 82 F1 | 	sub	arg01, local06
22534     54 95 02 F6 | 	mov	arg02, local02
22538     58 95 02 F1 | 	add	arg02, local06
2253c     55 97 02 F6 | 	mov	arg03, local03
22540     53 97 02 F1 | 	add	arg03, local01
22544     56 99 02 F6 | 	mov	arg04, local04
22548     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2254c                 | '   fastline(x0-y,x0+y,y0-x,c)
2254c     54 93 02 F6 | 	mov	arg01, local02
22550     53 93 82 F1 | 	sub	arg01, local01
22554     54 95 02 F6 | 	mov	arg02, local02
22558     53 95 02 F1 | 	add	arg02, local01
2255c     55 97 02 F6 | 	mov	arg03, local03
22560     58 97 82 F1 | 	sub	arg03, local06
22564     56 99 02 F6 | 	mov	arg04, local04
22568     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2256c                 | '   fastline(x0-y,x0+y,y0+x,c)
2256c     54 93 02 F6 | 	mov	arg01, local02
22570     53 93 82 F1 | 	sub	arg01, local01
22574     54 95 02 F6 | 	mov	arg02, local02
22578     53 95 02 F1 | 	add	arg02, local01
2257c     55 97 02 F6 | 	mov	arg03, local03
22580     58 97 02 F1 | 	add	arg03, local06
22584     56 99 02 F6 | 	mov	arg04, local04
22588     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
2258c                 | '   if d>0 
2258c     01 AE 56 F2 | 	cmps	local05, #1 wc
22590     18 00 90 CD |  if_b	jmp	#LR__2791
22594                 | '     d+=da
22594     5A AF 02 F1 | 	add	local05, local08
22598                 | '     y-=1
22598     01 A6 86 F1 | 	sub	local01, #1
2259c                 | '     x+=1
2259c     01 B0 06 F1 | 	add	local06, #1
225a0                 | '     da+=4*4
225a0     10 B4 06 F1 | 	add	local08, #16
225a4                 | '     db+=2*4
225a4     08 B2 06 F1 | 	add	local07, #8
225a8     58 FF 9F FD | 	jmp	#LR__2790
225ac                 | LR__2791
225ac                 | '   else
225ac                 | '     d+=db
225ac     59 AF 02 F1 | 	add	local05, local07
225b0                 | '     x+=1
225b0     01 B0 06 F1 | 	add	local06, #1
225b4                 | '     da+=2*4
225b4     08 B4 06 F1 | 	add	local08, #8
225b8                 | '     db+=2*4
225b8     08 B2 06 F1 | 	add	local07, #8
225bc     44 FF 9F FD | 	jmp	#LR__2790
225c0                 | LR__2792
225c0     E7 F0 03 F6 | 	mov	ptra, fp
225c4     F2 00 A0 FD | 	call	#popregs_
225c8                 | _hg010b_spin2_fcircle_ret
225c8     2D 00 64 FD | 	ret
225cc                 | 
225cc                 | '  
225cc                 | ' '-- A circle ------------------------------------------------------------ 
225cc                 | '  
225cc                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
225cc                 | _hg010b_spin2_circle
225cc     08 CA 05 F6 | 	mov	COUNT_, #8
225d0     E8 00 A0 FD | 	call	#pushregs_
225d4     4B A7 02 F6 | 	mov	local01, arg03
225d8     FF FF 7F FF 
225dc     FE A7 06 FD | 	qmul	local01, ##-2
225e0     49 A9 02 F6 | 	mov	local02, arg01
225e4     4A AB 02 F6 | 	mov	local03, arg02
225e8     4C AD 02 F6 | 	mov	local04, arg04
225ec                 | ' 
225ec                 | '  
225ec                 | ' d:=5-4*r
225ec     53 99 02 F6 | 	mov	arg04, local01
225f0     02 98 66 F0 | 	shl	arg04, #2
225f4     05 AE 06 F6 | 	mov	local05, #5
225f8     4C AF 82 F1 | 	sub	local05, arg04
225fc                 | ' x:=0
225fc     00 B0 06 F6 | 	mov	local06, #0
22600                 | ' y:=r
22600                 | ' da:=(-2*r+5)*4
22600                 | ' db:=3*4
22600     0C B2 06 F6 | 	mov	local07, #12
22604                 | ' repeat while (x<=y) 
22604     18 B4 62 FD | 	getqx	local08
22608     05 B4 06 F1 | 	add	local08, #5
2260c     02 B4 66 F0 | 	shl	local08, #2
22610                 | LR__2800
22610     53 B1 5A F2 | 	cmps	local06, local01 wcz
22614     F4 00 90 1D |  if_a	jmp	#LR__2802
22618                 | '   putpixel(x0-x,y0-y,c)
22618     54 93 02 F6 | 	mov	arg01, local02
2261c     58 93 82 F1 | 	sub	arg01, local06
22620     55 95 02 F6 | 	mov	arg02, local03
22624     53 95 82 F1 | 	sub	arg02, local01
22628     56 97 02 F6 | 	mov	arg03, local04
2262c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22630                 | '   putpixel(x0-x,y0+y,c)
22630     54 93 02 F6 | 	mov	arg01, local02
22634     58 93 82 F1 | 	sub	arg01, local06
22638     55 95 02 F6 | 	mov	arg02, local03
2263c     53 95 02 F1 | 	add	arg02, local01
22640     56 97 02 F6 | 	mov	arg03, local04
22644     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22648                 | '   putpixel(x0+x,y0-y,c)
22648     54 93 02 F6 | 	mov	arg01, local02
2264c     58 93 02 F1 | 	add	arg01, local06
22650     55 95 02 F6 | 	mov	arg02, local03
22654     53 95 82 F1 | 	sub	arg02, local01
22658     56 97 02 F6 | 	mov	arg03, local04
2265c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22660                 | '   putpixel(x0+x,y0+y,c)
22660     54 93 02 F6 | 	mov	arg01, local02
22664     58 93 02 F1 | 	add	arg01, local06
22668     55 95 02 F6 | 	mov	arg02, local03
2266c     53 95 02 F1 | 	add	arg02, local01
22670     56 97 02 F6 | 	mov	arg03, local04
22674     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22678                 | '   putpixel(x0-y,y0-x,c)
22678     54 93 02 F6 | 	mov	arg01, local02
2267c     53 93 82 F1 | 	sub	arg01, local01
22680     55 95 02 F6 | 	mov	arg02, local03
22684     58 95 82 F1 | 	sub	arg02, local06
22688     56 97 02 F6 | 	mov	arg03, local04
2268c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22690                 | '   putpixel(x0-y,y0+x,c)
22690     54 93 02 F6 | 	mov	arg01, local02
22694     53 93 82 F1 | 	sub	arg01, local01
22698     55 95 02 F6 | 	mov	arg02, local03
2269c     58 95 02 F1 | 	add	arg02, local06
226a0     56 97 02 F6 | 	mov	arg03, local04
226a4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
226a8                 | '   putpixel(x0+y,y0-x,c)
226a8     54 93 02 F6 | 	mov	arg01, local02
226ac     53 93 02 F1 | 	add	arg01, local01
226b0     55 95 02 F6 | 	mov	arg02, local03
226b4     58 95 82 F1 | 	sub	arg02, local06
226b8     56 97 02 F6 | 	mov	arg03, local04
226bc     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
226c0                 | '   putpixel(x0+y,y0+x,c)
226c0     54 93 02 F6 | 	mov	arg01, local02
226c4     53 93 02 F1 | 	add	arg01, local01
226c8     55 95 02 F6 | 	mov	arg02, local03
226cc     58 95 02 F1 | 	add	arg02, local06
226d0     56 97 02 F6 | 	mov	arg03, local04
226d4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
226d8                 | '   if d>0 
226d8     01 AE 56 F2 | 	cmps	local05, #1 wc
226dc     18 00 90 CD |  if_b	jmp	#LR__2801
226e0                 | '     d+=da
226e0     5A AF 02 F1 | 	add	local05, local08
226e4                 | '     y-=1
226e4     01 A6 86 F1 | 	sub	local01, #1
226e8                 | '     x+=1
226e8     01 B0 06 F1 | 	add	local06, #1
226ec                 | '     da+=4*4
226ec     10 B4 06 F1 | 	add	local08, #16
226f0                 | '     db+=2*4
226f0     08 B2 06 F1 | 	add	local07, #8
226f4     18 FF 9F FD | 	jmp	#LR__2800
226f8                 | LR__2801
226f8                 | '   else
226f8                 | '     d+=db
226f8     59 AF 02 F1 | 	add	local05, local07
226fc                 | '     x+=1
226fc     01 B0 06 F1 | 	add	local06, #1
22700                 | '     da+=2*4
22700     08 B4 06 F1 | 	add	local08, #8
22704                 | '     db+=2*4
22704     08 B2 06 F1 | 	add	local07, #8
22708     04 FF 9F FD | 	jmp	#LR__2800
2270c                 | LR__2802
2270c     E7 F0 03 F6 | 	mov	ptra, fp
22710     F2 00 A0 FD | 	call	#popregs_
22714                 | _hg010b_spin2_circle_ret
22714     2D 00 64 FD | 	ret
22718                 | 
22718                 | '     
22718                 | ' '-- A frame (an empty rectangle) ---------------------------------------
22718                 | ' 
22718                 | ' pub frame(x1,y1,x2,y2,c)
22718                 | _hg010b_spin2_frame
22718     05 CA 05 F6 | 	mov	COUNT_, #5
2271c     E8 00 A0 FD | 	call	#pushregs_
22720     49 A7 02 F6 | 	mov	local01, arg01
22724     4A A9 02 F6 | 	mov	local02, arg02
22728     4B AB 02 F6 | 	mov	local03, arg03
2272c     4C AD 02 F6 | 	mov	local04, arg04
22730     4D AF 02 F6 | 	mov	local05, arg05
22734                 | ' 
22734                 | ' fastline(x1,x2,y1,c)
22734     53 93 02 F6 | 	mov	arg01, local01
22738     55 95 02 F6 | 	mov	arg02, local03
2273c     54 97 02 F6 | 	mov	arg03, local02
22740     57 99 02 F6 | 	mov	arg04, local05
22744     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
22748                 | ' fastline(x1,x2,y2,c)
22748     53 93 02 F6 | 	mov	arg01, local01
2274c     55 95 02 F6 | 	mov	arg02, local03
22750     56 97 02 F6 | 	mov	arg03, local04
22754     57 99 02 F6 | 	mov	arg04, local05
22758     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
2275c                 | ' line(x1,y1,x1,y2,c)
2275c     53 93 02 F6 | 	mov	arg01, local01
22760     54 95 02 F6 | 	mov	arg02, local02
22764     53 97 02 F6 | 	mov	arg03, local01
22768     56 99 02 F6 | 	mov	arg04, local04
2276c     57 9B 02 F6 | 	mov	arg05, local05
22770                 | ' draw(x1,y1,x2,y2,c)
22770     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
22774                 | ' line(x2,y1,x2,y2,c)
22774     55 93 02 F6 | 	mov	arg01, local03
22778     54 95 02 F6 | 	mov	arg02, local02
2277c     55 97 02 F6 | 	mov	arg03, local03
22780     56 99 02 F6 | 	mov	arg04, local04
22784     57 9B 02 F6 | 	mov	arg05, local05
22788                 | ' draw(x1,y1,x2,y2,c)
22788     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
2278c     E7 F0 03 F6 | 	mov	ptra, fp
22790     F2 00 A0 FD | 	call	#popregs_
22794                 | _hg010b_spin2_frame_ret
22794     2D 00 64 FD | 	ret
22798                 | 
22798                 | ' 
22798                 | ' '-- A box (a filled rectangle) ----------------------------------------
22798                 | ' 
22798                 | ' pub box(x1,y1,x2,y2,c) |yy
22798                 | _hg010b_spin2_box
22798     06 CA 05 F6 | 	mov	COUNT_, #6
2279c     E8 00 A0 FD | 	call	#pushregs_
227a0     49 A7 02 F6 | 	mov	local01, arg01
227a4     4A A9 02 F6 | 	mov	local02, arg02
227a8     4B AB 02 F6 | 	mov	local03, arg03
227ac     4C AD 02 F6 | 	mov	local04, arg04
227b0     4D AF 02 F6 | 	mov	local05, arg05
227b4                 | ' 
227b4                 | ' repeat yy from y1 to y2
227b4     54 AD 52 F2 | 	cmps	local04, local02 wc
227b8     01 B0 86 F6 | 	negc	local06, #1
227bc     58 AD 02 F1 | 	add	local04, local06
227c0                 | LR__2810
227c0                 | '   fastline(x1,x2,yy,c)
227c0     53 93 02 F6 | 	mov	arg01, local01
227c4     55 95 02 F6 | 	mov	arg02, local03
227c8     57 99 02 F6 | 	mov	arg04, local05
227cc     54 97 02 F6 | 	mov	arg03, local02
227d0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
227d4     58 A9 02 F1 | 	add	local02, local06
227d8     56 A9 0A F2 | 	cmp	local02, local04 wz
227dc     E0 FF 9F 5D |  if_ne	jmp	#LR__2810
227e0     E7 F0 03 F6 | 	mov	ptra, fp
227e4     F2 00 A0 FD | 	call	#popregs_
227e8                 | _hg010b_spin2_box_ret
227e8     2D 00 64 FD | 	ret
227ec                 | 
227ec                 | '       
227ec                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
227ec                 | _hg010b_spin2_putcharxycgf
227ec                 | ' 
227ec                 | '  
227ec                 | ' repeat yy from 0 to 15
227ec     00 80 06 F6 | 	mov	_var01, #0
227f0     D7 8A 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
227f4                 | LR__2820
227f4                 | ' 
227f4                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
227f4     95 64 06 F1 | 	add	objptr, #149
227f8     32 83 02 FB | 	rdlong	_var02, objptr
227fc     0A 82 66 F0 | 	shl	_var02, #10
22800     37 85 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
22804     41 85 02 F1 | 	add	_var03, _var02
22808     4B 83 02 F6 | 	mov	_var02, arg03
2280c     04 82 66 F0 | 	shl	_var02, #4
22810     41 85 02 F1 | 	add	_var03, _var02
22814     40 85 02 F1 | 	add	_var03, _var01
22818     42 85 C2 FA | 	rdbyte	_var03, _var03
2281c                 | '   asm
2281c     00 84 0E F4 | 	testb	_var03, #0 wz
22820     4C 87 C2 A8 |  if_e	setbyte	_var04, arg04, #0
22824     4D 87 C2 58 |  if_ne	setbyte	_var04, arg05, #0
22828     01 84 0E F4 | 	testb	_var03, #1 wz
2282c     4C 87 CA A8 |  if_e	setbyte	_var04, arg04, #1
22830     4D 87 CA 58 |  if_ne	setbyte	_var04, arg05, #1
22834     02 84 0E F4 | 	testb	_var03, #2 wz
22838     4C 87 D2 A8 |  if_e	setbyte	_var04, arg04, #2
2283c     4D 87 D2 58 |  if_ne	setbyte	_var04, arg05, #2
22840     03 84 0E F4 | 	testb	_var03, #3 wz
22844     4C 87 DA A8 |  if_e	setbyte	_var04, arg04, #3
22848     4D 87 DA 58 |  if_ne	setbyte	_var04, arg05, #3
2284c     04 84 0E F4 | 	testb	_var03, #4 wz
22850     4C 89 C2 A8 |  if_e	setbyte	_var05, arg04, #0
22854     4D 89 C2 58 |  if_ne	setbyte	_var05, arg05, #0
22858     05 84 0E F4 | 	testb	_var03, #5 wz
2285c     4C 89 CA A8 |  if_e	setbyte	_var05, arg04, #1
22860     4D 89 CA 58 |  if_ne	setbyte	_var05, arg05, #1
22864     06 84 0E F4 | 	testb	_var03, #6 wz
22868     4C 89 D2 A8 |  if_e	setbyte	_var05, arg04, #2
2286c     4D 89 D2 58 |  if_ne	setbyte	_var05, arg05, #2
22870     07 84 0E F4 | 	testb	_var03, #7 wz
22874     4C 89 DA A8 |  if_e	setbyte	_var05, arg04, #3
22878     4D 89 DA 58 |  if_ne	setbyte	_var05, arg05, #3
2287c                 | '   
2287c                 | '   ccc[0]:=c1
2287c     99 65 06 F1 | 	add	objptr, #409
22880     32 87 62 FC | 	wrlong	_var04, objptr
22884                 | '   ccc[1]:=c2 
22884     04 64 06 F1 | 	add	objptr, #4
22888     32 89 62 FC | 	wrlong	_var05, objptr
2288c                 | '   long[mailbox0][2]:=8
2288c     49 64 86 F1 | 	sub	objptr, #73
22890     32 85 02 FB | 	rdlong	_var03, objptr
22894     08 84 06 F1 | 	add	_var03, #8
22898     42 11 68 FC | 	wrlong	#8, _var03
2289c                 | '   long[mailbox0][1]:=@ccc
2289c     32 85 02 F6 | 	mov	_var03, objptr
228a0     45 84 06 F1 | 	add	_var03, #69
228a4     32 83 02 FB | 	rdlong	_var02, objptr
228a8     04 82 06 F1 | 	add	_var02, #4
228ac     41 85 62 FC | 	wrlong	_var03, _var02
228b0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
228b0     0C 65 86 F1 | 	sub	objptr, #268
228b4     32 85 02 FB | 	rdlong	_var03, objptr
228b8     4A 83 02 F6 | 	mov	_var02, arg02
228bc     40 83 02 F1 | 	add	_var02, _var01
228c0     0A 82 66 F0 | 	shl	_var02, #10
228c4     49 8B 02 F6 | 	mov	_var06, arg01
228c8     02 8A 66 F0 | 	shl	_var06, #2
228cc     45 83 02 F1 | 	add	_var02, _var06
228d0     41 85 02 F1 | 	add	_var03, _var02
228d4     00 00 78 FF 
228d8     00 84 06 F1 | 	add	_var03, ##-268435456
228dc     0C 65 06 F1 | 	add	objptr, #268
228e0     32 8B 02 FB | 	rdlong	_var06, objptr
228e4     45 85 62 FC | 	wrlong	_var03, _var06
228e8                 | '   repeat
228e8                 | LR__2821
228e8     32 85 02 FB | 	rdlong	_var03, objptr
228ec     42 83 02 FB | 	rdlong	_var02, _var03
228f0     00 82 56 F2 | 	cmps	_var02, #0 wc
228f4     F0 FF 9F CD |  if_b	jmp	#LR__2821
228f8     E9 65 86 F1 | 	sub	objptr, #489
228fc     01 80 06 F1 | 	add	_var01, #1
22900     10 80 56 F2 | 	cmps	_var01, #16 wc
22904     EC FE 9F CD |  if_b	jmp	#LR__2820
22908                 | LR__2822
22908                 | _hg010b_spin2_putcharxycgf_ret
22908     2D 00 64 FD | 	ret
2290c                 | 
2290c                 | ' 
2290c                 | ' 
2290c                 | ' '**********************************************************************r***
2290c                 | ' '                                                                        *
2290c                 | ' ' Font related functions                                                 *
2290c                 | ' '                                                                        *
2290c                 | ' '*************************************************************************
2290c                 | ' 
2290c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
2290c                 | ' 
2290c                 | ' pub setfontfamily(afontnum)
2290c                 | _hg010b_spin2_setfontfamily
2290c                 | ' 
2290c                 | ' font_family:=afontnum
2290c     95 64 06 F1 | 	add	objptr, #149
22910     32 93 62 FC | 	wrlong	arg01, objptr
22914     95 64 86 F1 | 	sub	objptr, #149
22918                 | ' 'if afontnum==8
22918                 | ' '  font_ptr:=@amiga_font
22918                 | ' 
22918                 | ' if afontnum==4
22918     04 92 0E F2 | 	cmp	arg01, #4 wz
2291c                 | '   font_ptr:=@st_font
2291c     37 81 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
22920     08 00 00 AF 
22924     00 80 06 A1 |  if_e	add	_var01, ##4096
22928     08 64 06 A1 |  if_e	add	objptr, #8
2292c     32 81 62 AC |  if_e	wrlong	_var01, objptr
22930     08 64 86 A1 |  if_e	sub	objptr, #8
22934                 | ' if afontnum==0
22934     00 92 0E F2 | 	cmp	arg01, #0 wz
22938                 | '   font_ptr:=@vga_font
22938     08 64 06 A1 |  if_e	add	objptr, #8
2293c     32 6F 62 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
22940     08 64 86 A1 |  if_e	sub	objptr, #8
22944                 | _hg010b_spin2_setfontfamily_ret
22944     2D 00 64 FD | 	ret
22948                 | 
22948                 | ' 
22948                 | ' ''--------- Redefine a character
22948                 | ' 
22948                 | ' pub defchar(ch,ptr) | s,i ' 
22948                 | _hg010b_spin2_defchar
22948                 | ' 
22948                 | ' s:=font_ptr+ch*16
22948     08 64 06 F1 | 	add	objptr, #8
2294c     32 81 02 FB | 	rdlong	_var01, objptr
22950     08 64 86 F1 | 	sub	objptr, #8
22954     04 92 66 F0 | 	shl	arg01, #4
22958     49 81 02 F1 | 	add	_var01, arg01
2295c                 | ' repeat i from 0 to 15
2295c     00 82 06 F6 | 	mov	_var02, #0
22960     D7 12 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
22964                 | LR__2830
22964                 | '   byte[s+i]:=byte[ptr+i]
22964     4A 93 02 F6 | 	mov	arg01, arg02
22968     41 93 02 F1 | 	add	arg01, _var02
2296c     40 85 02 F6 | 	mov	_var03, _var01
22970     49 93 C2 FA | 	rdbyte	arg01, arg01
22974     41 85 02 F1 | 	add	_var03, _var02
22978     42 93 42 FC | 	wrbyte	arg01, _var03
2297c     01 82 06 F1 | 	add	_var02, #1
22980     10 82 56 F2 | 	cmps	_var02, #16 wc
22984     DC FF 9F CD |  if_b	jmp	#LR__2830
22988                 | LR__2831
22988                 | _hg010b_spin2_defchar_ret
22988     2D 00 64 FD | 	ret
2298c                 | 
2298c                 | ' 
2298c                 | ' 
2298c                 | ' '*************************************************************************
2298c                 | ' '                                                                        *
2298c                 | ' '  Cursor functions                                                      *
2298c                 | ' '                                                                        *
2298c                 | ' '*************************************************************************
2298c                 | ' 
2298c                 | ' 
2298c                 | ' pub setcursorpos(x,y)
2298c                 | _hg010b_spin2_setcursorpos
2298c     01 CA 05 F6 | 	mov	COUNT_, #1
22990     E8 00 A0 FD | 	call	#pushregs_
22994                 | ' 
22994                 | ' ''---------- Set the (x,y) position of cursor
22994                 | ' 
22994                 | ' cursor_x:=x
22994     3C 64 06 F1 | 	add	objptr, #60
22998     32 93 52 FC | 	wrword	arg01, objptr
2299c                 | ' cursor_y:=y
2299c     02 64 06 F1 | 	add	objptr, #2
229a0     32 95 42 FC | 	wrbyte	arg02, objptr
229a4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
229a4     02 64 86 F1 | 	sub	objptr, #2
229a8     32 A7 E2 FA | 	rdword	local01, objptr
229ac     02 A6 66 F0 | 	shl	local01, #2
229b0     4A 97 E2 F8 | 	getbyte	arg03, arg02, #0
229b4     3C 64 86 F1 | 	sub	objptr, #60
229b8     04 96 66 F0 | 	shl	arg03, #4
229bc     04 96 06 F1 | 	add	arg03, #4
229c0     11 92 06 F6 | 	mov	arg01, #17
229c4     53 95 02 F6 | 	mov	arg02, local01
229c8     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
229cc     E7 F0 03 F6 | 	mov	ptra, fp
229d0     F2 00 A0 FD | 	call	#popregs_
229d4                 | _hg010b_spin2_setcursorpos_ret
229d4     2D 00 64 FD | 	ret
229d8                 | 
229d8                 | ' 
229d8                 | ' pub setcursorx(x)
229d8                 | _hg010b_spin2_setcursorx
229d8                 | ' cursor_x:=x
229d8     3C 64 06 F1 | 	add	objptr, #60
229dc     32 93 52 FC | 	wrword	arg01, objptr
229e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
229e0     49 95 32 F9 | 	getword	arg02, arg01, #0
229e4     02 94 66 F0 | 	shl	arg02, #2
229e8     02 64 06 F1 | 	add	objptr, #2
229ec     32 97 C2 FA | 	rdbyte	arg03, objptr
229f0     3E 64 86 F1 | 	sub	objptr, #62
229f4     04 96 66 F0 | 	shl	arg03, #4
229f8     04 96 06 F1 | 	add	arg03, #4
229fc     11 92 06 F6 | 	mov	arg01, #17
22a00     D4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22a04                 | _hg010b_spin2_setcursorx_ret
22a04     2D 00 64 FD | 	ret
22a08                 | 
22a08                 | ' 
22a08                 | ' pub setcursory(y) 
22a08                 | _hg010b_spin2_setcursory
22a08                 | ' cursor_y:=y
22a08     3E 64 06 F1 | 	add	objptr, #62
22a0c     32 93 42 FC | 	wrbyte	arg01, objptr
22a10                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
22a10     02 64 86 F1 | 	sub	objptr, #2
22a14     32 95 E2 FA | 	rdword	arg02, objptr
22a18     02 94 66 F0 | 	shl	arg02, #2
22a1c     49 97 E2 F8 | 	getbyte	arg03, arg01, #0
22a20     3C 64 86 F1 | 	sub	objptr, #60
22a24     04 96 66 F0 | 	shl	arg03, #4
22a28     04 96 06 F1 | 	add	arg03, #4
22a2c     11 92 06 F6 | 	mov	arg01, #17
22a30     A4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22a34                 | _hg010b_spin2_setcursory_ret
22a34     2D 00 64 FD | 	ret
22a38                 | 
22a38                 | ' 
22a38                 | ' '*************************************************************************
22a38                 | ' '                                                                        *
22a38                 | ' '  VBlank functions                                                      *
22a38                 | ' '                                                                        *
22a38                 | ' '*************************************************************************
22a38                 | ' 
22a38                 | ' pub waitvbl(amount) | i
22a38                 | _hg010b_spin2_waitvbl
22a38     03 CA 05 F6 | 	mov	COUNT_, #3
22a3c     E8 00 A0 FD | 	call	#pushregs_
22a40     49 A7 02 F6 | 	mov	local01, arg01
22a44                 | ' 
22a44                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22a44                 | ' 
22a44                 | ' repeat i from 1 to amount
22a44     01 A8 06 F6 | 	mov	local02, #1
22a48     01 A6 56 F2 | 	cmps	local01, #1 wc
22a4c     01 AA 86 F6 | 	negc	local03, #1
22a50     55 A7 02 F1 | 	add	local01, local03
22a54                 | LR__2840
22a54                 | '   repeat until vblank==0
22a54                 | LR__2841
22a54     49 64 06 F1 | 	add	objptr, #73
22a58     32 93 0A FB | 	rdlong	arg01, objptr wz
22a5c     49 64 86 F1 | 	sub	objptr, #73
22a60     0C 00 90 AD |  if_e	jmp	#LR__2842
22a64                 | '     waitus(100)
22a64     64 92 06 F6 | 	mov	arg01, #100
22a68     F0 22 B0 FD | 	call	#__system___waitus
22a6c     E4 FF 9F FD | 	jmp	#LR__2841
22a70                 | LR__2842
22a70                 | '   repeat until vblank==1
22a70                 | LR__2843
22a70     49 64 06 F1 | 	add	objptr, #73
22a74     32 93 02 FB | 	rdlong	arg01, objptr
22a78     49 64 86 F1 | 	sub	objptr, #73
22a7c     01 92 0E F2 | 	cmp	arg01, #1 wz
22a80     0C 00 90 AD |  if_e	jmp	#LR__2844
22a84                 | '     waitus(100)
22a84     64 92 06 F6 | 	mov	arg01, #100
22a88     D0 22 B0 FD | 	call	#__system___waitus
22a8c     E0 FF 9F FD | 	jmp	#LR__2843
22a90                 | LR__2844
22a90     55 A9 02 F1 | 	add	local02, local03
22a94     53 A9 0A F2 | 	cmp	local02, local01 wz
22a98     B8 FF 9F 5D |  if_ne	jmp	#LR__2840
22a9c     E7 F0 03 F6 | 	mov	ptra, fp
22aa0     F2 00 A0 FD | 	call	#popregs_
22aa4                 | _hg010b_spin2_waitvbl_ret
22aa4     2D 00 64 FD | 	ret
22aa8                 | 
22aa8                 | ' 
22aa8                 | ' ''---------- Set color #c in palette to r,g,b
22aa8                 | ' 
22aa8                 | ' pub setcolor(c,r,g,b)  |cc
22aa8                 | _hg010b_spin2_setcolor
22aa8                 | ' 
22aa8                 | ' cc:=r<<24+g<<16+b<<8
22aa8     18 94 66 F0 | 	shl	arg02, #24
22aac     10 96 66 F0 | 	shl	arg03, #16
22ab0     4B 95 02 F1 | 	add	arg02, arg03
22ab4     08 98 66 F0 | 	shl	arg04, #8
22ab8     4C 95 02 F1 | 	add	arg02, arg04
22abc                 | ' long[palette_ptr+4*c]:=cc
22abc     1C 64 06 F1 | 	add	objptr, #28
22ac0     32 99 02 FB | 	rdlong	arg04, objptr
22ac4     1C 64 86 F1 | 	sub	objptr, #28
22ac8     02 92 66 F0 | 	shl	arg01, #2
22acc     49 99 02 F1 | 	add	arg04, arg01
22ad0     4C 95 62 FC | 	wrlong	arg02, arg04
22ad4                 | _hg010b_spin2_setcolor_ret
22ad4     2D 00 64 FD | 	ret
22ad8                 | 
22ad8                 | ' 
22ad8                 | ' 
22ad8                 | ' pub cls(fc,bc)   :c,i
22ad8                 | _hg010b_spin2_cls
22ad8     02 CA 05 F6 | 	mov	COUNT_, #2
22adc     E8 00 A0 FD | 	call	#pushregs_
22ae0     49 A7 02 F6 | 	mov	local01, arg01
22ae4     4A A9 02 F6 | 	mov	local02, arg02
22ae8                 | ' 
22ae8                 | ' c:=bc
22ae8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
22ae8     DD 64 06 F1 | 	add	objptr, #221
22aec     32 93 02 FB | 	rdlong	arg01, objptr
22af0     A5 64 86 F1 | 	sub	objptr, #165
22af4     32 97 02 FB | 	rdlong	arg03, objptr
22af8     02 96 66 F0 | 	shl	arg03, #2
22afc     54 95 02 F6 | 	mov	arg02, local02
22b00     00 98 06 F6 | 	mov	arg04, #0
22b04     01 9A 06 F6 | 	mov	arg05, #1
22b08     0B 00 00 FF 
22b0c     94 64 06 F1 | 	add	objptr, ##5780
22b10     AC 10 B0 FD | 	call	#_psram_spin2_fill
22b14                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22b14     0B 00 00 FF 
22b18     C8 64 86 F1 | 	sub	objptr, ##5832
22b1c     32 93 02 FB | 	rdlong	arg01, objptr
22b20     04 64 86 F1 | 	sub	objptr, #4
22b24     32 97 02 FB | 	rdlong	arg03, objptr
22b28     49 97 82 F1 | 	sub	arg03, arg01
22b2c     20 94 06 F6 | 	mov	arg02, #32
22b30     00 98 06 F6 | 	mov	arg04, #0
22b34     01 9A 06 F6 | 	mov	arg05, #1
22b38     0B 00 00 FF 
22b3c     CC 64 06 F1 | 	add	objptr, ##5836
22b40     7C 10 B0 FD | 	call	#_psram_spin2_fill
22b44                 | ' setwritecolors(fc,bc)
22b44                 | ' 
22b44                 | ' write_color:=ff
22b44     0B 00 00 FF 
22b48     8B 64 86 F1 | 	sub	objptr, ##5771
22b4c     32 A7 62 FC | 	wrlong	local01, objptr
22b50                 | ' write_background:=bb
22b50     04 64 06 F1 | 	add	objptr, #4
22b54     32 A9 62 FC | 	wrlong	local02, objptr
22b58                 | ' cursor_x:=0
22b58     09 64 86 F1 | 	sub	objptr, #9
22b5c     32 01 58 FC | 	wrword	#0, objptr
22b60                 | ' cursor_y:=0
22b60     02 64 06 F1 | 	add	objptr, #2
22b64     32 01 48 FC | 	wrbyte	#0, objptr
22b68                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22b68     02 64 86 F1 | 	sub	objptr, #2
22b6c     32 95 E2 FA | 	rdword	arg02, objptr
22b70     02 94 66 F0 | 	shl	arg02, #2
22b74     3C 64 86 F1 | 	sub	objptr, #60
22b78     04 96 06 F6 | 	mov	arg03, #4
22b7c     11 92 06 F6 | 	mov	arg01, #17
22b80     54 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
22b84                 | ' setcursorcolor(fc)
22b84     53 93 02 F6 | 	mov	arg01, local01
22b88     60 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22b8c     54 7B 02 F6 | 	mov	result1, local02
22b90     00 7C 06 F6 | 	mov	result2, #0
22b94     E7 F0 03 F6 | 	mov	ptra, fp
22b98     F2 00 A0 FD | 	call	#popregs_
22b9c                 | _hg010b_spin2_cls_ret
22b9c     2D 00 64 FD | 	ret
22ba0                 | 
22ba0                 | ' 
22ba0                 | ' ''---------- Output a char at the cursor position, move the cursor 
22ba0                 | ' 
22ba0                 | ' pub putchar(achar) | c,x,y,l,newcpl
22ba0                 | _hg010b_spin2_putchar
22ba0     02 CA 05 F6 | 	mov	COUNT_, #2
22ba4     E8 00 A0 FD | 	call	#pushregs_
22ba8     49 A7 02 F6 | 	mov	local01, arg01
22bac                 | ' 
22bac                 | ' if achar==10
22bac     0A A6 0E F2 | 	cmp	local01, #10 wz
22bb0                 | '   crlf()
22bb0     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
22bb4                 | ' if achar==9
22bb4     09 A6 0E F2 | 	cmp	local01, #9 wz
22bb8     18 00 90 5D |  if_ne	jmp	#LR__2850
22bbc                 | '   cursor_x:=(cursor_x& %11110000)+16
22bbc     3C 64 06 F1 | 	add	objptr, #60
22bc0     32 97 E2 FA | 	rdword	arg03, objptr
22bc4     F0 96 06 F5 | 	and	arg03, #240
22bc8     10 96 06 F1 | 	add	arg03, #16
22bcc     32 97 52 FC | 	wrword	arg03, objptr
22bd0     3C 64 86 F1 | 	sub	objptr, #60
22bd4                 | LR__2850
22bd4                 | '   
22bd4                 | ' if (achar<>9) && (achar<>10) 
22bd4     09 A6 0E F2 | 	cmp	local01, #9 wz
22bd8     0A A6 0E 52 |  if_ne	cmp	local01, #10 wz
22bdc     A8 00 90 AD |  if_e	jmp	#LR__2851
22be0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22be0     3C 64 06 F1 | 	add	objptr, #60
22be4     32 93 E2 FA | 	rdword	arg01, objptr
22be8     02 64 06 F1 | 	add	objptr, #2
22bec     32 95 C2 FA | 	rdbyte	arg02, objptr
22bf0     04 94 66 F0 | 	shl	arg02, #4
22bf4     04 94 06 F1 | 	add	arg02, #4
22bf8     03 64 06 F1 | 	add	objptr, #3
22bfc     32 99 02 FB | 	rdlong	arg04, objptr
22c00     04 64 06 F1 | 	add	objptr, #4
22c04     32 9B 02 FB | 	rdlong	arg05, objptr
22c08     45 64 86 F1 | 	sub	objptr, #69
22c0c     53 97 02 F6 | 	mov	arg03, local01
22c10     D8 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
22c14     04 64 06 F1 | 	add	objptr, #4
22c18     32 93 02 FB | 	rdlong	arg01, objptr
22c1c     1C 00 00 FF 
22c20     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22c24     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22c28     3A 64 06 F1 | 	add	objptr, #58
22c2c     32 9B C2 FA | 	rdbyte	arg05, objptr
22c30     4D 97 02 FD | 	qmul	arg03, arg05
22c34                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22c34     1C 00 00 FF 
22c38     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22c3c     02 64 86 F1 | 	sub	objptr, #2
22c40     32 A9 E2 FA | 	rdword	local02, objptr
22c44     01 A8 46 F0 | 	shr	local02, #1
22c48     53 95 02 F6 | 	mov	arg02, local01
22c4c     01 96 06 F6 | 	mov	arg03, #1
22c50     00 98 06 F6 | 	mov	arg04, #0
22c54     01 9A 06 F6 | 	mov	arg05, #1
22c58     0B 00 00 FF 
22c5c     90 64 06 F1 | 	add	objptr, ##5776
22c60     18 A6 62 FD | 	getqx	local01
22c64     54 A7 02 F1 | 	add	local01, local02
22c68     53 93 02 F1 | 	add	arg01, local01
22c6c     50 0F B0 FD | 	call	#_psram_spin2_fill
22c70                 | '   cursor_x+=2
22c70     0B 00 00 FF 
22c74     90 64 86 F1 | 	sub	objptr, ##5776
22c78     32 A9 E2 FA | 	rdword	local02, objptr
22c7c     02 A8 06 F1 | 	add	local02, #2
22c80     32 A9 52 FC | 	wrword	local02, objptr
22c84     3C 64 86 F1 | 	sub	objptr, #60
22c88                 | LR__2851
22c88                 | ' 
22c88                 | ' if cursor_x>=256
22c88     3C 64 06 F1 | 	add	objptr, #60
22c8c     32 A9 E2 FA | 	rdword	local02, objptr
22c90     3C 64 86 F1 | 	sub	objptr, #60
22c94     00 A9 56 F2 | 	cmps	local02, #256 wc
22c98     64 00 90 CD |  if_b	jmp	#LR__2853
22c9c                 | '   cursor_x:=0
22c9c     3C 64 06 F1 | 	add	objptr, #60
22ca0     32 01 58 FC | 	wrword	#0, objptr
22ca4                 | '   cursor_y+=1
22ca4     02 64 06 F1 | 	add	objptr, #2
22ca8     32 A9 C2 FA | 	rdbyte	local02, objptr
22cac     01 A8 06 F1 | 	add	local02, #1
22cb0     32 A9 42 FC | 	wrbyte	local02, objptr
22cb4                 | '   if cursor_y>st_lines-1
22cb4     C3 64 06 F1 | 	add	objptr, #195
22cb8     32 A9 02 FB | 	rdlong	local02, objptr
22cbc     01 A8 86 F1 | 	sub	local02, #1
22cc0     C3 64 86 F1 | 	sub	objptr, #195
22cc4     32 97 C2 FA | 	rdbyte	arg03, objptr
22cc8     3E 64 86 F1 | 	sub	objptr, #62
22ccc     54 97 5A F2 | 	cmps	arg03, local02 wcz
22cd0     2C 00 90 ED |  if_be	jmp	#LR__2852
22cd4                 | '     scrollup2()
22cd4     00 92 06 F6 | 	mov	arg01, #0
22cd8     01 00 00 FF 
22cdc     58 94 06 F6 | 	mov	arg02, ##600
22ce0     10 96 06 F6 | 	mov	arg03, #16
22ce4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
22ce8                 | '     cursor_y:=st_lines-1
22ce8     01 65 06 F1 | 	add	objptr, #257
22cec     32 A9 02 FB | 	rdlong	local02, objptr
22cf0     01 A8 86 F1 | 	sub	local02, #1
22cf4     C3 64 86 F1 | 	sub	objptr, #195
22cf8     32 A9 42 FC | 	wrbyte	local02, objptr
22cfc     3E 64 86 F1 | 	sub	objptr, #62
22d00                 | LR__2852
22d00                 | LR__2853
22d00                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22d00     3C 64 06 F1 | 	add	objptr, #60
22d04     32 95 E2 FA | 	rdword	arg02, objptr
22d08     02 94 66 F0 | 	shl	arg02, #2
22d0c     02 64 06 F1 | 	add	objptr, #2
22d10     32 97 C2 FA | 	rdbyte	arg03, objptr
22d14     3E 64 86 F1 | 	sub	objptr, #62
22d18     04 96 66 F0 | 	shl	arg03, #4
22d1c     04 96 06 F1 | 	add	arg03, #4
22d20     11 92 06 F6 | 	mov	arg01, #17
22d24     B0 EF BF FD | 	call	#_hg010b_spin2_setspritepos
22d28     E7 F0 03 F6 | 	mov	ptra, fp
22d2c     F2 00 A0 FD | 	call	#popregs_
22d30                 | _hg010b_spin2_putchar_ret
22d30     2D 00 64 FD | 	ret
22d34                 | 
22d34                 | '     
22d34                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
22d34                 | ' 
22d34                 | ' pub putchar2(achar) | c,x,y,l,newcpl
22d34                 | _hg010b_spin2_putchar2
22d34     02 CA 05 F6 | 	mov	COUNT_, #2
22d38     E8 00 A0 FD | 	call	#pushregs_
22d3c     49 A7 02 F6 | 	mov	local01, arg01
22d40                 | ' 
22d40                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22d40     3C 64 06 F1 | 	add	objptr, #60
22d44     32 93 E2 FA | 	rdword	arg01, objptr
22d48     02 64 06 F1 | 	add	objptr, #2
22d4c     32 95 C2 FA | 	rdbyte	arg02, objptr
22d50     04 94 66 F0 | 	shl	arg02, #4
22d54     04 94 06 F1 | 	add	arg02, #4
22d58     03 64 06 F1 | 	add	objptr, #3
22d5c     32 99 02 FB | 	rdlong	arg04, objptr
22d60     04 64 06 F1 | 	add	objptr, #4
22d64     32 9B 02 FB | 	rdlong	arg05, objptr
22d68     45 64 86 F1 | 	sub	objptr, #69
22d6c     53 97 02 F6 | 	mov	arg03, local01
22d70     78 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
22d74     04 64 06 F1 | 	add	objptr, #4
22d78     32 93 02 FB | 	rdlong	arg01, objptr
22d7c     1C 00 00 FF 
22d80     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22d84     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22d88     3A 64 06 F1 | 	add	objptr, #58
22d8c     32 9B C2 FA | 	rdbyte	arg05, objptr
22d90     4D 97 02 FD | 	qmul	arg03, arg05
22d94                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22d94     1C 00 00 FF 
22d98     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22d9c     02 64 86 F1 | 	sub	objptr, #2
22da0     32 A9 E2 FA | 	rdword	local02, objptr
22da4     01 A8 46 F0 | 	shr	local02, #1
22da8     53 95 02 F6 | 	mov	arg02, local01
22dac     01 96 06 F6 | 	mov	arg03, #1
22db0     00 98 06 F6 | 	mov	arg04, #0
22db4     01 9A 06 F6 | 	mov	arg05, #1
22db8     0B 00 00 FF 
22dbc     90 64 06 F1 | 	add	objptr, ##5776
22dc0     18 A6 62 FD | 	getqx	local01
22dc4     54 A7 02 F1 | 	add	local01, local02
22dc8     53 93 02 F1 | 	add	arg01, local01
22dcc     F0 0D B0 FD | 	call	#_psram_spin2_fill
22dd0                 | ' 
22dd0                 | ' cursor_x+=2
22dd0     0B 00 00 FF 
22dd4     90 64 86 F1 | 	sub	objptr, ##5776
22dd8     32 A9 E2 FA | 	rdword	local02, objptr
22ddc     02 A8 06 F1 | 	add	local02, #2
22de0     32 A9 52 FC | 	wrword	local02, objptr
22de4                 | ' if cursor_x>=256
22de4     54 A9 32 F9 | 	getword	local02, local02, #0
22de8     3C 64 86 F1 | 	sub	objptr, #60
22dec     00 A9 56 F2 | 	cmps	local02, #256 wc
22df0     64 00 90 CD |  if_b	jmp	#LR__2861
22df4                 | '   cursor_x:=0
22df4     3C 64 06 F1 | 	add	objptr, #60
22df8     32 01 58 FC | 	wrword	#0, objptr
22dfc                 | '   cursor_y+=1
22dfc     02 64 06 F1 | 	add	objptr, #2
22e00     32 A9 C2 FA | 	rdbyte	local02, objptr
22e04     01 A8 06 F1 | 	add	local02, #1
22e08     32 A9 42 FC | 	wrbyte	local02, objptr
22e0c                 | '   if cursor_y>st_lines-1
22e0c     C3 64 06 F1 | 	add	objptr, #195
22e10     32 A9 02 FB | 	rdlong	local02, objptr
22e14     01 A8 86 F1 | 	sub	local02, #1
22e18     C3 64 86 F1 | 	sub	objptr, #195
22e1c     32 97 C2 FA | 	rdbyte	arg03, objptr
22e20     3E 64 86 F1 | 	sub	objptr, #62
22e24     54 97 5A F2 | 	cmps	arg03, local02 wcz
22e28     2C 00 90 ED |  if_be	jmp	#LR__2860
22e2c                 | '     scrollup2()
22e2c     00 92 06 F6 | 	mov	arg01, #0
22e30     01 00 00 FF 
22e34     58 94 06 F6 | 	mov	arg02, ##600
22e38     10 96 06 F6 | 	mov	arg03, #16
22e3c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
22e40                 | '     cursor_y:=st_lines-1
22e40     01 65 06 F1 | 	add	objptr, #257
22e44     32 A9 02 FB | 	rdlong	local02, objptr
22e48     01 A8 86 F1 | 	sub	local02, #1
22e4c     C3 64 86 F1 | 	sub	objptr, #195
22e50     32 A9 42 FC | 	wrbyte	local02, objptr
22e54     3E 64 86 F1 | 	sub	objptr, #62
22e58                 | LR__2860
22e58                 | LR__2861
22e58                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
22e58     3C 64 06 F1 | 	add	objptr, #60
22e5c     32 95 E2 FA | 	rdword	arg02, objptr
22e60     02 94 66 F0 | 	shl	arg02, #2
22e64     02 64 06 F1 | 	add	objptr, #2
22e68     32 97 C2 FA | 	rdbyte	arg03, objptr
22e6c     3E 64 86 F1 | 	sub	objptr, #62
22e70     04 96 66 F0 | 	shl	arg03, #4
22e74     04 96 06 F1 | 	add	arg03, #4
22e78     11 92 06 F6 | 	mov	arg01, #17
22e7c     58 EE BF FD | 	call	#_hg010b_spin2_setspritepos
22e80     E7 F0 03 F6 | 	mov	ptra, fp
22e84     F2 00 A0 FD | 	call	#popregs_
22e88                 | _hg010b_spin2_putchar2_ret
22e88     2D 00 64 FD | 	ret
22e8c                 | 
22e8c                 | ' ''--------- Output a string at the cursor position, move the cursor  
22e8c                 | ' 
22e8c                 | ' pub write(text) | iii,c,ncx,ncy
22e8c                 | _hg010b_spin2_write
22e8c     04 CA 05 F6 | 	mov	COUNT_, #4
22e90     E8 00 A0 FD | 	call	#pushregs_
22e94     49 A7 02 F6 | 	mov	local01, arg01
22e98                 | ' 
22e98                 | ' repeat iii from 0 to strsize(text)-1
22e98     00 A8 06 F6 | 	mov	local02, #0
22e9c     53 93 02 F6 | 	mov	arg01, local01
22ea0     49 AB 02 F6 | 	mov	local03, arg01
22ea4     D7 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
22ea8                 | LR__2870
22ea8     55 7B CA FA | 	rdbyte	result1, local03 wz
22eac     01 AA 06 51 |  if_ne	add	local03, #1
22eb0     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
22eb4                 | LR__2871
22eb4     49 AB 82 F1 | 	sub	local03, arg01
22eb8     01 AA 86 F1 | 	sub	local03, #1
22ebc     00 AA 56 F2 | 	cmps	local03, #0 wc
22ec0     01 AC 86 F6 | 	negc	local04, #1
22ec4     56 AB 02 F1 | 	add	local03, local04
22ec8                 | LR__2872
22ec8                 | '   putchar2(byte[text+iii])
22ec8     53 93 02 F6 | 	mov	arg01, local01
22ecc     54 93 02 F1 | 	add	arg01, local02
22ed0     49 93 C2 FA | 	rdbyte	arg01, arg01
22ed4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
22ed8     56 A9 02 F1 | 	add	local02, local04
22edc     55 A9 0A F2 | 	cmp	local02, local03 wz
22ee0     E4 FF 9F 5D |  if_ne	jmp	#LR__2872
22ee4     E7 F0 03 F6 | 	mov	ptra, fp
22ee8     F2 00 A0 FD | 	call	#popregs_
22eec                 | _hg010b_spin2_write_ret
22eec     2D 00 64 FD | 	ret
22ef0                 | 
22ef0                 | '    
22ef0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
22ef0                 | ' 
22ef0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
22ef0                 | _hg010b_spin2_scrollup2
22ef0     03 CA 05 F6 | 	mov	COUNT_, #3
22ef4     E8 00 A0 FD | 	call	#pushregs_
22ef8                 | ' 	
22ef8                 | ' repeat i from 4 to 579 
22ef8     04 A6 06 F6 | 	mov	local01, #4
22efc                 | LR__2880
22efc     DD 64 06 F1 | 	add	objptr, #221
22f00     32 95 02 FB | 	rdlong	arg02, objptr
22f04     53 9B 02 F6 | 	mov	arg05, local01
22f08     10 9A 06 F1 | 	add	arg05, #16
22f0c     02 9A 66 F0 | 	shl	arg05, #2
22f10     14 64 06 F1 | 	add	objptr, #20
22f14     32 97 02 FB | 	rdlong	arg03, objptr
22f18     4B 9B 02 FD | 	qmul	arg05, arg03
22f1c                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
22f1c     02 96 66 F0 | 	shl	arg03, #2
22f20     F4 03 00 FF 
22f24     00 92 06 F6 | 	mov	arg01, ##518144
22f28     0A 00 00 FF 
22f2c     DB 65 06 F1 | 	add	objptr, ##5595
22f30     18 9A 62 FD | 	getqx	arg05
22f34     4D 95 02 F1 | 	add	arg02, arg05
22f38     4C 0B B0 FD | 	call	#_psram_spin2_read1
22f3c     0A 00 00 FF 
22f40     EF 65 86 F1 | 	sub	objptr, ##5615
22f44     32 95 02 FB | 	rdlong	arg02, objptr
22f48     53 9B 02 F6 | 	mov	arg05, local01
22f4c     02 9A 66 F0 | 	shl	arg05, #2
22f50     14 64 06 F1 | 	add	objptr, #20
22f54     32 97 02 FB | 	rdlong	arg03, objptr
22f58     4B 9B 02 FD | 	qmul	arg05, arg03
22f5c                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
22f5c     02 96 66 F0 | 	shl	arg03, #2
22f60     F4 03 00 FF 
22f64     00 92 06 F6 | 	mov	arg01, ##518144
22f68     0A 00 00 FF 
22f6c     DB 65 06 F1 | 	add	objptr, ##5595
22f70     18 9A 62 FD | 	getqx	arg05
22f74     4D 95 02 F1 | 	add	arg02, arg05
22f78     A8 0B B0 FD | 	call	#_psram_spin2_write
22f7c     0B 00 00 FF 
22f80     CC 64 86 F1 | 	sub	objptr, ##5836
22f84     01 A6 06 F1 | 	add	local01, #1
22f88     01 00 00 FF 
22f8c     44 A6 16 F2 | 	cmp	local01, ##580 wc
22f90     68 FF 9F CD |  if_b	jmp	#LR__2880
22f94                 | ' 
22f94                 | ' repeat i from 580 to 599
22f94     01 00 00 FF 
22f98     44 A6 06 F6 | 	mov	local01, ##580
22f9c                 | LR__2881
22f9c                 | '    fastline(0,1023,i,write_background)   
22f9c     45 64 06 F1 | 	add	objptr, #69
22fa0     32 99 02 FB | 	rdlong	arg04, objptr
22fa4     45 64 86 F1 | 	sub	objptr, #69
22fa8     00 92 06 F6 | 	mov	arg01, #0
22fac     09 94 CE F9 | 	bmask	arg02, #9
22fb0     53 97 02 F6 | 	mov	arg03, local01
22fb4     6C EF BF FD | 	call	#_hg010b_spin2_fastline
22fb8     01 A6 06 F1 | 	add	local01, #1
22fbc     01 00 00 FF 
22fc0     58 A6 16 F2 | 	cmp	local01, ##600 wc
22fc4     D4 FF 9F CD |  if_b	jmp	#LR__2881
22fc8                 | ' repeat i from 0 to 3
22fc8     00 A6 06 F6 | 	mov	local01, #0
22fcc                 | LR__2882
22fcc                 | '    fastline(0,1023,i,write_background)      
22fcc     45 64 06 F1 | 	add	objptr, #69
22fd0     32 99 02 FB | 	rdlong	arg04, objptr
22fd4     45 64 86 F1 | 	sub	objptr, #69
22fd8     00 92 06 F6 | 	mov	arg01, #0
22fdc     09 94 CE F9 | 	bmask	arg02, #9
22fe0     53 97 02 F6 | 	mov	arg03, local01
22fe4     3C EF BF FD | 	call	#_hg010b_spin2_fastline
22fe8     01 A6 06 F1 | 	add	local01, #1
22fec     04 A6 56 F2 | 	cmps	local01, #4 wc
22ff0     D8 FF 9F CD |  if_b	jmp	#LR__2882
22ff4                 | ' 
22ff4                 | ' repeat i from 0 to 35
22ff4     00 A6 06 F6 | 	mov	local01, #0
22ff8                 | LR__2883
22ff8     53 9B 02 F6 | 	mov	arg05, local01
22ffc     01 9A 06 F1 | 	add	arg05, #1
23000     1C 00 00 FF 
23004     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23008     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2300c     4B 9B 02 FD | 	qmul	arg05, arg03
23010                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
23010     04 64 06 F1 | 	add	objptr, #4
23014     32 95 02 FB | 	rdlong	arg02, objptr
23018     1C 00 00 FF 
2301c     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23020     F4 03 00 FF 
23024     00 92 06 F6 | 	mov	arg01, ##518144
23028     0B 00 00 FF 
2302c     C8 64 06 F1 | 	add	objptr, ##5832
23030     18 9A 62 FD | 	getqx	arg05
23034     4D 95 02 F1 | 	add	arg02, arg05
23038     4C 0A B0 FD | 	call	#_psram_spin2_read1
2303c     1C 00 00 FF 
23040     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23044     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23048     4B A7 02 FD | 	qmul	local01, arg03
2304c                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
2304c     0B 00 00 FF 
23050     C8 64 86 F1 | 	sub	objptr, ##5832
23054     32 95 02 FB | 	rdlong	arg02, objptr
23058     1C 00 00 FF 
2305c     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23060     F4 03 00 FF 
23064     00 92 06 F6 | 	mov	arg01, ##518144
23068     0B 00 00 FF 
2306c     C8 64 06 F1 | 	add	objptr, ##5832
23070     18 9A 62 FD | 	getqx	arg05
23074     4D 95 02 F1 | 	add	arg02, arg05
23078     A8 0A B0 FD | 	call	#_psram_spin2_write
2307c     0B 00 00 FF 
23080     CC 64 86 F1 | 	sub	objptr, ##5836
23084     01 A6 06 F1 | 	add	local01, #1
23088     24 A6 56 F2 | 	cmps	local01, #36 wc
2308c     68 FF 9F CD |  if_b	jmp	#LR__2883
23090                 | ' repeat i from 0 to timings[7]-1
23090     00 A6 06 F6 | 	mov	local01, #0
23094     1C 00 00 FF 
23098     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
2309c     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
230a0     1C 00 00 FF 
230a4     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
230a8     01 A8 86 F1 | 	sub	local02, #1
230ac     00 A8 56 F2 | 	cmps	local02, #0 wc
230b0     01 AA 86 F6 | 	negc	local03, #1
230b4     55 A9 02 F1 | 	add	local02, local03
230b8                 | LR__2884
230b8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
230b8     04 64 06 F1 | 	add	objptr, #4
230bc     32 93 02 FB | 	rdlong	arg01, objptr
230c0     1C 00 00 FF 
230c4     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
230c8     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
230cc     1C 00 00 FF 
230d0     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
230d4     4D 99 02 F6 | 	mov	arg04, arg05
230d8     03 98 66 F0 | 	shl	arg04, #3
230dc     4D 99 02 F1 | 	add	arg04, arg05
230e0     02 98 66 F0 | 	shl	arg04, #2
230e4     53 99 02 F1 | 	add	arg04, local01
230e8     4C 93 02 F1 | 	add	arg01, arg04
230ec     20 94 06 F6 | 	mov	arg02, #32
230f0     01 96 06 F6 | 	mov	arg03, #1
230f4     00 98 06 F6 | 	mov	arg04, #0
230f8     01 9A 06 F6 | 	mov	arg05, #1
230fc     0B 00 00 FF 
23100     C8 64 06 F1 | 	add	objptr, ##5832
23104     B8 0A B0 FD | 	call	#_psram_spin2_fill
23108     0B 00 00 FF 
2310c     CC 64 86 F1 | 	sub	objptr, ##5836
23110     55 A7 02 F1 | 	add	local01, local03
23114     54 A7 0A F2 | 	cmp	local01, local02 wz
23118     9C FF 9F 5D |  if_ne	jmp	#LR__2884
2311c     E7 F0 03 F6 | 	mov	ptra, fp
23120     F2 00 A0 FD | 	call	#popregs_
23124                 | _hg010b_spin2_scrollup2_ret
23124     2D 00 64 FD | 	ret
23128                 | 
23128                 | '  
23128                 | ' ''----------- Scroll the screen one line down 
23128                 | ' 
23128                 | ' pub scrolldown(start=0) | i
23128                 | _hg010b_spin2_scrolldown
23128     05 CA 05 F6 | 	mov	COUNT_, #5
2312c     E8 00 A0 FD | 	call	#pushregs_
23130     49 A7 02 F6 | 	mov	local01, arg01
23134                 | ' 
23134                 | ' repeat i from 579 to (start*16)+4
23134     01 00 00 FF 
23138     43 A8 06 F6 | 	mov	local02, ##579
2313c     53 AB 02 F6 | 	mov	local03, local01
23140     04 AA 66 F0 | 	shl	local03, #4
23144     04 AA 06 F1 | 	add	local03, #4
23148     01 00 00 FF 
2314c     43 AA 56 F2 | 	cmps	local03, ##579 wc
23150     01 AC 86 F6 | 	negc	local04, #1
23154     56 AF 02 F6 | 	mov	local05, local04
23158     56 AB 02 F1 | 	add	local03, local04
2315c                 | LR__2890
2315c     DD 64 06 F1 | 	add	objptr, #221
23160     32 95 02 FB | 	rdlong	arg02, objptr
23164     54 AD 02 F6 | 	mov	local04, local02
23168     02 AC 66 F0 | 	shl	local04, #2
2316c     14 64 06 F1 | 	add	objptr, #20
23170     32 97 02 FB | 	rdlong	arg03, objptr
23174     4B AD 02 FD | 	qmul	local04, arg03
23178                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23178     02 96 66 F0 | 	shl	arg03, #2
2317c     F4 03 00 FF 
23180     00 92 06 F6 | 	mov	arg01, ##518144
23184     0A 00 00 FF 
23188     DB 65 06 F1 | 	add	objptr, ##5595
2318c     18 AC 62 FD | 	getqx	local04
23190     56 95 02 F1 | 	add	arg02, local04
23194     F0 08 B0 FD | 	call	#_psram_spin2_read1
23198     0A 00 00 FF 
2319c     EF 65 86 F1 | 	sub	objptr, ##5615
231a0     32 95 02 FB | 	rdlong	arg02, objptr
231a4     54 AD 02 F6 | 	mov	local04, local02
231a8     10 AC 06 F1 | 	add	local04, #16
231ac     02 AC 66 F0 | 	shl	local04, #2
231b0     14 64 06 F1 | 	add	objptr, #20
231b4     32 97 02 FB | 	rdlong	arg03, objptr
231b8     4B AD 02 FD | 	qmul	local04, arg03
231bc                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
231bc     02 96 66 F0 | 	shl	arg03, #2
231c0     F4 03 00 FF 
231c4     00 92 06 F6 | 	mov	arg01, ##518144
231c8     0A 00 00 FF 
231cc     DB 65 06 F1 | 	add	objptr, ##5595
231d0     18 AC 62 FD | 	getqx	local04
231d4     56 95 02 F1 | 	add	arg02, local04
231d8     48 09 B0 FD | 	call	#_psram_spin2_write
231dc     0B 00 00 FF 
231e0     CC 64 86 F1 | 	sub	objptr, ##5836
231e4     57 A9 02 F1 | 	add	local02, local05
231e8     55 A9 0A F2 | 	cmp	local02, local03 wz
231ec     6C FF 9F 5D |  if_ne	jmp	#LR__2890
231f0                 | ' 
231f0                 | ' repeat i from (start*16)+4 to (start*16)+19
231f0     53 A9 02 F6 | 	mov	local02, local01
231f4     04 A8 66 F0 | 	shl	local02, #4
231f8     04 A8 06 F1 | 	add	local02, #4
231fc     53 AF 02 F6 | 	mov	local05, local01
23200     04 AE 66 F0 | 	shl	local05, #4
23204     13 AE 06 F1 | 	add	local05, #19
23208     53 AD 02 F6 | 	mov	local04, local01
2320c     04 AC 66 F0 | 	shl	local04, #4
23210     04 AC 06 F1 | 	add	local04, #4
23214     56 AF 52 F2 | 	cmps	local05, local04 wc
23218     01 AC 86 F6 | 	negc	local04, #1
2321c     56 AB 02 F6 | 	mov	local03, local04
23220     56 AF 02 F1 | 	add	local05, local04
23224                 | LR__2891
23224                 | '    fastline(0,1023,i,write_background)    
23224     45 64 06 F1 | 	add	objptr, #69
23228     32 99 02 FB | 	rdlong	arg04, objptr
2322c     45 64 86 F1 | 	sub	objptr, #69
23230     00 92 06 F6 | 	mov	arg01, #0
23234     09 94 CE F9 | 	bmask	arg02, #9
23238     54 97 02 F6 | 	mov	arg03, local02
2323c     E4 EC BF FD | 	call	#_hg010b_spin2_fastline
23240     55 A9 02 F1 | 	add	local02, local03
23244     57 A9 0A F2 | 	cmp	local02, local05 wz
23248     D8 FF 9F 5D |  if_ne	jmp	#LR__2891
2324c                 | '    
2324c                 | ' repeat i from 35 to start
2324c     23 A8 06 F6 | 	mov	local02, #35
23250     23 A6 56 F2 | 	cmps	local01, #35 wc
23254     01 AC 86 F6 | 	negc	local04, #1
23258     53 AF 02 F6 | 	mov	local05, local01
2325c     56 AF 02 F1 | 	add	local05, local04
23260                 | LR__2892
23260                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
23260     04 64 06 F1 | 	add	objptr, #4
23264     32 95 02 FB | 	rdlong	arg02, objptr
23268     54 AB 02 F6 | 	mov	local03, local02
2326c     07 AA 66 F0 | 	shl	local03, #7
23270     55 95 02 F1 | 	add	arg02, local03
23274     F4 03 00 FF 
23278     00 92 06 F6 | 	mov	arg01, ##518144
2327c     80 96 06 F6 | 	mov	arg03, #128
23280     0B 00 00 FF 
23284     C8 64 06 F1 | 	add	objptr, ##5832
23288     FC 07 B0 FD | 	call	#_psram_spin2_read1
2328c                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
2328c     0B 00 00 FF 
23290     C8 64 86 F1 | 	sub	objptr, ##5832
23294     32 95 02 FB | 	rdlong	arg02, objptr
23298     54 AB 02 F6 | 	mov	local03, local02
2329c     01 AA 06 F1 | 	add	local03, #1
232a0     07 AA 66 F0 | 	shl	local03, #7
232a4     55 95 02 F1 | 	add	arg02, local03
232a8     F4 03 00 FF 
232ac     00 92 06 F6 | 	mov	arg01, ##518144
232b0     80 96 06 F6 | 	mov	arg03, #128
232b4     0B 00 00 FF 
232b8     C8 64 06 F1 | 	add	objptr, ##5832
232bc     64 08 B0 FD | 	call	#_psram_spin2_write
232c0     0B 00 00 FF 
232c4     CC 64 86 F1 | 	sub	objptr, ##5836
232c8     56 A9 02 F1 | 	add	local02, local04
232cc     57 A9 0A F2 | 	cmp	local02, local05 wz
232d0     8C FF 9F 5D |  if_ne	jmp	#LR__2892
232d4                 | ' repeat i from 0 to 127
232d4     00 A8 06 F6 | 	mov	local02, #0
232d8                 | LR__2893
232d8                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
232d8     04 64 06 F1 | 	add	objptr, #4
232dc     32 93 02 FB | 	rdlong	arg01, objptr
232e0     53 AF 02 F6 | 	mov	local05, local01
232e4     07 AE 66 F0 | 	shl	local05, #7
232e8     57 93 02 F1 | 	add	arg01, local05
232ec     54 93 02 F1 | 	add	arg01, local02
232f0     20 94 06 F6 | 	mov	arg02, #32
232f4     01 96 06 F6 | 	mov	arg03, #1
232f8     00 98 06 F6 | 	mov	arg04, #0
232fc     01 9A 06 F6 | 	mov	arg05, #1
23300     0B 00 00 FF 
23304     C8 64 06 F1 | 	add	objptr, ##5832
23308     B4 08 B0 FD | 	call	#_psram_spin2_fill
2330c     0B 00 00 FF 
23310     CC 64 86 F1 | 	sub	objptr, ##5836
23314     01 A8 06 F1 | 	add	local02, #1
23318     80 A8 56 F2 | 	cmps	local02, #128 wc
2331c     B8 FF 9F CD |  if_b	jmp	#LR__2893
23320     E7 F0 03 F6 | 	mov	ptra, fp
23324     F2 00 A0 FD | 	call	#popregs_
23328                 | _hg010b_spin2_scrolldown_ret
23328     2D 00 64 FD | 	ret
2332c                 | 
2332c                 | ' 
2332c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
2332c                 | ' 
2332c                 | ' pub crlf()
2332c                 | _hg010b_spin2_crlf
2332c                 | ' 
2332c                 | ' cursor_x:=leading_spaces*2
2332c     01 00 00 FF 
23330     B6 64 06 F1 | 	add	objptr, ##694
23334     32 97 02 FB | 	rdlong	arg03, objptr
23338     01 96 66 F0 | 	shl	arg03, #1
2333c     01 00 00 FF 
23340     7A 64 86 F1 | 	sub	objptr, ##634
23344     32 97 52 FC | 	wrword	arg03, objptr
23348                 | ' cursor_y+=1
23348     02 64 06 F1 | 	add	objptr, #2
2334c     32 97 C2 FA | 	rdbyte	arg03, objptr
23350     01 96 06 F1 | 	add	arg03, #1
23354     32 97 42 FC | 	wrbyte	arg03, objptr
23358                 | ' if cursor_y>st_lines-1
23358     C3 64 06 F1 | 	add	objptr, #195
2335c     32 97 02 FB | 	rdlong	arg03, objptr
23360     01 96 86 F1 | 	sub	arg03, #1
23364     C3 64 86 F1 | 	sub	objptr, #195
23368     32 95 C2 FA | 	rdbyte	arg02, objptr
2336c     3E 64 86 F1 | 	sub	objptr, #62
23370     4B 95 5A F2 | 	cmps	arg02, arg03 wcz
23374     2C 00 90 ED |  if_be	jmp	#LR__2900
23378                 | '   scrollup2()
23378     00 92 06 F6 | 	mov	arg01, #0
2337c     01 00 00 FF 
23380     58 94 06 F6 | 	mov	arg02, ##600
23384     10 96 06 F6 | 	mov	arg03, #16
23388     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
2338c                 | '   cursor_y:=st_lines-1
2338c     01 65 06 F1 | 	add	objptr, #257
23390     32 97 02 FB | 	rdlong	arg03, objptr
23394     01 96 86 F1 | 	sub	arg03, #1
23398     C3 64 86 F1 | 	sub	objptr, #195
2339c     32 97 42 FC | 	wrbyte	arg03, objptr
233a0     3E 64 86 F1 | 	sub	objptr, #62
233a4                 | LR__2900
233a4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
233a4     3C 64 06 F1 | 	add	objptr, #60
233a8     32 95 E2 FA | 	rdword	arg02, objptr
233ac     02 94 66 F0 | 	shl	arg02, #2
233b0     02 64 06 F1 | 	add	objptr, #2
233b4     32 97 C2 FA | 	rdbyte	arg03, objptr
233b8     3E 64 86 F1 | 	sub	objptr, #62
233bc     04 96 66 F0 | 	shl	arg03, #4
233c0     04 96 06 F1 | 	add	arg03, #4
233c4     11 92 06 F6 | 	mov	arg01, #17
233c8     0C E9 BF FD | 	call	#_hg010b_spin2_setspritepos
233cc                 | _hg010b_spin2_crlf_ret
233cc     2D 00 64 FD | 	ret
233d0                 | 
233d0                 | ' 
233d0                 | ' 
233d0                 | ' '*************************************************************************
233d0                 | ' '                                                                        *
233d0                 | ' '  Conversions                                                           *
233d0                 | ' '                                                                        *
233d0                 | ' '*************************************************************************
233d0                 | ' 
233d0                 | ' ''---------- Convert a integer to dec string, return a pointer
233d0                 | ' 
233d0                 | ' pub inttostr(i):result |q,pos,k,j
233d0                 | _hg010b_spin2_inttostr
233d0     03 CA 05 F6 | 	mov	COUNT_, #3
233d4     E8 00 A0 FD | 	call	#pushregs_
233d8     49 A7 0A F6 | 	mov	local01, arg01 wz
233dc                 | ' 
233dc                 | ' j:=i
233dc                 | ' pos:=10
233dc     0A A8 06 F6 | 	mov	local02, #10
233e0                 | ' k:=0
233e0     00 AA 06 F6 | 	mov	local03, #0
233e4                 | ' 
233e4                 | ' if (j==0)
233e4     18 00 90 5D |  if_ne	jmp	#LR__2910
233e8                 | '   n_string[0]:=48
233e8     4D 64 06 F1 | 	add	objptr, #77
233ec     32 61 48 FC | 	wrbyte	#48, objptr
233f0                 | '   n_string[1]:=0
233f0     01 64 06 F1 | 	add	objptr, #1
233f4     32 01 48 FC | 	wrbyte	#0, objptr
233f8     4E 64 86 F1 | 	sub	objptr, #78
233fc     C4 00 90 FD | 	jmp	#LR__2917
23400                 | LR__2910
23400                 | ' 
23400                 | ' else
23400                 | '   if (j<0)
23400     53 A7 52 F6 | 	abs	local01, local01 wc
23404                 | '     j:=0-j
23404                 | '     k:=45
23404     2D AA 06 C6 |  if_b	mov	local03, #45
23408                 | ' 
23408                 | '   n_string[11]:=0
23408     58 64 06 F1 | 	add	objptr, #88
2340c     32 01 48 FC | 	wrbyte	#0, objptr
23410     58 64 86 F1 | 	sub	objptr, #88
23414     D7 24 48 FB | 	callpa	#(@LR__2912-@LR__2911)>>2,fcache_load_ptr_
23418                 | '   repeat while (pos>-1)
23418                 | LR__2911
23418     00 A8 56 F2 | 	cmps	local02, #0 wc
2341c     40 00 90 CD |  if_b	jmp	#LR__2913
23420     53 7B 52 F6 | 	abs	result1, local01 wc
23424     0A 7A 16 FD | 	qdiv	result1, #10
23428                 | '     q:=j//10
23428     19 7A 62 FD | 	getqy	result1
2342c     3D 7B 82 F6 | 	negc	result1, result1
23430     53 A7 52 F6 | 	abs	local01, local01 wc
23434     0A A6 16 FD | 	qdiv	local01, #10
23438                 | '     q:=48+q
23438     30 7A 06 F1 | 	add	result1, #48
2343c                 | '     n_string[pos]:=q
2343c     54 A7 02 F6 | 	mov	local01, local02
23440     32 97 02 F6 | 	mov	arg03, objptr
23444     4D 96 06 F1 | 	add	arg03, #77
23448     4B A7 02 F1 | 	add	local01, arg03
2344c     53 7B 42 FC | 	wrbyte	result1, local01
23450                 | '     j:=j/10
23450                 | '     pos-=1
23450     01 A8 86 F1 | 	sub	local02, #1
23454     18 A6 62 FD | 	getqx	local01
23458     53 A7 82 F6 | 	negc	local01, local01
2345c     B8 FF 9F FD | 	jmp	#LR__2911
23460                 | LR__2912
23460                 | LR__2913
23460                 | '   repeat while n_string[0]==48
23460                 | LR__2914
23460     4D 64 06 F1 | 	add	objptr, #77
23464     32 97 C2 FA | 	rdbyte	arg03, objptr
23468     4D 64 86 F1 | 	sub	objptr, #77
2346c     30 96 0E F2 | 	cmp	arg03, #48 wz
23470     20 00 90 5D |  if_ne	jmp	#LR__2915
23474                 | '     bytemove(@n_string,@n_string+1,12)
23474     4D 64 06 F1 | 	add	objptr, #77
23478     32 93 02 F6 | 	mov	arg01, objptr
2347c     32 95 02 F6 | 	mov	arg02, objptr
23480     4D 64 86 F1 | 	sub	objptr, #77
23484     01 94 06 F1 | 	add	arg02, #1
23488     0C 96 06 F6 | 	mov	arg03, #12
2348c     1C 14 B0 FD | 	call	#__system____builtin_memmove
23490     CC FF 9F FD | 	jmp	#LR__2914
23494                 | LR__2915
23494                 | ' 
23494                 | '   if k==45
23494     2D AA 0E F2 | 	cmp	local03, #45 wz
23498     28 00 90 5D |  if_ne	jmp	#LR__2916
2349c                 | '      bytemove(@n_string+1,@n_string,12)
2349c     4D 64 06 F1 | 	add	objptr, #77
234a0     32 93 02 F6 | 	mov	arg01, objptr
234a4     01 92 06 F1 | 	add	arg01, #1
234a8     32 95 02 F6 | 	mov	arg02, objptr
234ac     4D 64 86 F1 | 	sub	objptr, #77
234b0     0C 96 06 F6 | 	mov	arg03, #12
234b4     F4 13 B0 FD | 	call	#__system____builtin_memmove
234b8                 | '      n_string[0]:=k
234b8     4D 64 06 F1 | 	add	objptr, #77
234bc     32 AB 42 FC | 	wrbyte	local03, objptr
234c0     4D 64 86 F1 | 	sub	objptr, #77
234c4                 | LR__2916
234c4                 | LR__2917
234c4                 | ' 
234c4                 | ' q:=@n_string
234c4     32 7B 02 F6 | 	mov	result1, objptr
234c8     4D 7A 06 F1 | 	add	result1, #77
234cc                 | ' return q
234cc     E7 F0 03 F6 | 	mov	ptra, fp
234d0     F2 00 A0 FD | 	call	#popregs_
234d4                 | _hg010b_spin2_inttostr_ret
234d4     2D 00 64 FD | 	ret
234d8                 | 
234d8                 | ' 
234d8                 | ' '**********************************************************************************
234d8                 | ' '
234d8                 | ' '        Blitting
234d8                 | ' '
234d8                 | ' '**********************************************************************************
234d8                 | ' 
234d8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
234d8                 | _hg010b_spin2_blit
234d8     18 CA 05 F6 | 	mov	COUNT_, #24
234dc     E8 00 A0 FD | 	call	#pushregs_
234e0     49 A7 02 F6 | 	mov	local01, arg01
234e4     4A A9 02 F6 | 	mov	local02, arg02
234e8     4B AB 02 F6 | 	mov	local03, arg03
234ec     4C AD 02 F6 | 	mov	local04, arg04
234f0     4D AF 02 F6 | 	mov	local05, arg05
234f4     4E B1 02 F6 | 	mov	local06, arg06
234f8     4F B3 02 F6 | 	mov	local07, arg07
234fc     50 B5 02 F6 | 	mov	local08, arg08
23500     51 B7 02 F6 | 	mov	local09, arg09
23504     52 B9 02 F6 | 	mov	local10, arg10
23508                 | ' 
23508                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
23508     00 04 00 FF 
2350c     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23510     00 04 00 3F 
23514     00 B2 56 32 |  if_ae	cmps	local07, ##524288 wc
23518     98 01 90 CD |  if_b	jmp	#LR__2924
2351c     56 A9 5A F2 | 	cmps	local02, local04 wcz
23520     54 BB 02 16 |  if_a	mov	local11, local02
23524     56 A9 02 16 |  if_a	mov	local02, local04
23528     5D AD 02 16 |  if_a	mov	local04, local11
2352c     57 AB 5A F2 | 	cmps	local03, local05 wcz
23530     55 BB 02 16 |  if_a	mov	local11, local03
23534     57 AB 02 16 |  if_a	mov	local03, local05
23538     58 AB 02 FD | 	qmul	local03, local06
2353c                 | '   if x1a>x2a
2353c                 | '     x1a,x2a:=x2a,x1a
2353c                 | '   if y1a>y2a
2353c                 | '     y1a,y2a:=y2a,y1a  
2353c     5D AF 02 16 |  if_a	mov	local05, local11
23540                 | '   if x2a-x1a>1023 
23540     56 BB 02 F6 | 	mov	local11, local04
23544     54 BB 82 F1 | 	sub	local11, local02
23548     02 00 00 FF 
2354c     00 BA 56 F2 | 	cmps	local11, ##1024 wc
23550                 | '     x2a:=x1a+1023 ' limit the line to 1024
23550     54 AD 02 36 |  if_ae	mov	local04, local02
23554     01 00 00 3F 
23558     FF AD 06 31 |  if_ae	add	local04, ##1023
2355c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
2355c     59 BD 02 F6 | 	mov	local12, local07
23560     54 BD 02 F1 | 	add	local12, local02
23564     18 BA 62 FD | 	getqx	local11
23568     5C B7 02 FD | 	qmul	local09, local10
2356c     5D BD 02 F1 | 	add	local12, local11
23570     53 BF 02 F6 | 	mov	local13, local01
23574     5A BF 02 F1 | 	add	local13, local08
23578     18 BA 62 FD | 	getqx	local11
2357c     5D BF 02 F1 | 	add	local13, local11
23580     5F BD 5A F2 | 	cmps	local12, local13 wcz
23584     98 00 90 ED |  if_be	jmp	#LR__2921
23588                 | '     repeat y from y1a to y2a
23588     55 C1 02 F6 | 	mov	local14, local03
2358c     55 AF 52 F2 | 	cmps	local05, local03 wc
23590     01 C2 86 F6 | 	negc	local15, #1
23594     57 C5 02 F6 | 	mov	local16, local05
23598     61 C5 02 F1 | 	add	local16, local15
2359c     0B 00 00 FF 
235a0     CC 64 06 F1 | 	add	objptr, ##5836
235a4                 | LR__2920
235a4     58 C1 02 FD | 	qmul	local14, local06
235a8                 | '   '    writeln(string("I am here"))
235a8                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
235a8     53 95 02 F6 | 	mov	arg02, local01
235ac     56 97 02 F6 | 	mov	arg03, local04
235b0     54 97 82 F1 | 	sub	arg03, local02
235b4     01 96 06 F1 | 	add	arg03, #1
235b8     F4 03 00 FF 
235bc     00 92 06 F6 | 	mov	arg01, ##518144
235c0     18 BE 62 FD | 	getqx	local13
235c4     5F 95 02 F1 | 	add	arg02, local13
235c8     54 95 02 F1 | 	add	arg02, local02
235cc     B8 04 B0 FD | 	call	#_psram_spin2_read1
235d0     5B BF 02 F6 | 	mov	local13, local09
235d4     55 BF 82 F1 | 	sub	local13, local03
235d8     60 BF 02 F1 | 	add	local13, local14
235dc     5C BF 02 FD | 	qmul	local13, local10
235e0                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
235e0     59 95 02 F6 | 	mov	arg02, local07
235e4     56 97 02 F6 | 	mov	arg03, local04
235e8     54 97 82 F1 | 	sub	arg03, local02
235ec     01 96 06 F1 | 	add	arg03, #1
235f0     F4 03 00 FF 
235f4     00 92 06 F6 | 	mov	arg01, ##518144
235f8     18 BE 62 FD | 	getqx	local13
235fc     5F 95 02 F1 | 	add	arg02, local13
23600     5A 95 02 F1 | 	add	arg02, local08
23604     1C 05 B0 FD | 	call	#_psram_spin2_write
23608     61 C1 02 F1 | 	add	local14, local15
2360c     62 C1 0A F2 | 	cmp	local14, local16 wz
23610     90 FF 9F 5D |  if_ne	jmp	#LR__2920
23614     0B 00 00 FF 
23618     CC 64 86 F1 | 	sub	objptr, ##5836
2361c     94 00 90 FD | 	jmp	#LR__2923
23620                 | LR__2921
23620                 | '   else
23620                 | '     repeat y from y2a to y1a
23620     57 C1 02 F6 | 	mov	local14, local05
23624     57 AB 52 F2 | 	cmps	local03, local05 wc
23628     01 C6 86 F6 | 	negc	local17, #1
2362c     55 C9 02 F6 | 	mov	local18, local03
23630     63 C9 02 F1 | 	add	local18, local17
23634     0B 00 00 FF 
23638     CC 64 06 F1 | 	add	objptr, ##5836
2363c                 | LR__2922
2363c     58 C1 02 FD | 	qmul	local14, local06
23640                 | '  '     writeln(string("I am there"))
23640                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
23640     53 95 02 F6 | 	mov	arg02, local01
23644     56 97 02 F6 | 	mov	arg03, local04
23648     54 97 82 F1 | 	sub	arg03, local02
2364c     01 96 06 F1 | 	add	arg03, #1
23650     F4 03 00 FF 
23654     00 92 06 F6 | 	mov	arg01, ##518144
23658     18 C4 62 FD | 	getqx	local16
2365c     62 95 02 F1 | 	add	arg02, local16
23660     54 95 02 F1 | 	add	arg02, local02
23664     20 04 B0 FD | 	call	#_psram_spin2_read1
23668     5B C5 02 F6 | 	mov	local16, local09
2366c     55 C5 82 F1 | 	sub	local16, local03
23670     60 C5 02 F1 | 	add	local16, local14
23674     5C C5 02 FD | 	qmul	local16, local10
23678                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23678     59 95 02 F6 | 	mov	arg02, local07
2367c     56 97 02 F6 | 	mov	arg03, local04
23680     54 97 82 F1 | 	sub	arg03, local02
23684     01 96 06 F1 | 	add	arg03, #1
23688     F4 03 00 FF 
2368c     00 92 06 F6 | 	mov	arg01, ##518144
23690     18 C4 62 FD | 	getqx	local16
23694     62 95 02 F1 | 	add	arg02, local16
23698     5A 95 02 F1 | 	add	arg02, local08
2369c     84 04 B0 FD | 	call	#_psram_spin2_write
236a0     63 C1 02 F1 | 	add	local14, local17
236a4     64 C1 0A F2 | 	cmp	local14, local18 wz
236a8     90 FF 9F 5D |  if_ne	jmp	#LR__2922
236ac     0B 00 00 FF 
236b0     CC 64 86 F1 | 	sub	objptr, ##5836
236b4                 | LR__2923
236b4                 | LR__2924
236b4                 | '     
236b4                 | ' if ((f>=$80000) && (t<$80000)) 
236b4     00 04 00 FF 
236b8     00 A6 56 F2 | 	cmps	local01, ##524288 wc
236bc     80 00 90 CD |  if_b	jmp	#LR__2926
236c0     00 04 00 FF 
236c4     00 B2 56 F2 | 	cmps	local07, ##524288 wc
236c8     74 00 90 3D |  if_ae	jmp	#LR__2926
236cc                 | '   repeat y from y1a to y2a
236cc     55 C1 02 F6 | 	mov	local14, local03
236d0     55 AF 52 F2 | 	cmps	local05, local03 wc
236d4     01 CA 86 F6 | 	negc	local19, #1
236d8     57 CD 02 F6 | 	mov	local20, local05
236dc     65 CD 02 F1 | 	add	local20, local19
236e0     0B 00 00 FF 
236e4     CC 64 06 F1 | 	add	objptr, ##5836
236e8                 | LR__2925
236e8     5B C9 02 F6 | 	mov	local18, local09
236ec     55 C9 82 F1 | 	sub	local18, local03
236f0     60 C9 02 F1 | 	add	local18, local14
236f4     5C C9 02 FD | 	qmul	local18, local10
236f8                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
236f8     59 93 02 F6 | 	mov	arg01, local07
236fc     18 C8 62 FD | 	getqx	local18
23700     58 C1 02 FD | 	qmul	local14, local06
23704     64 93 02 F1 | 	add	arg01, local18
23708     5A 93 02 F1 | 	add	arg01, local08
2370c     53 95 02 F6 | 	mov	arg02, local01
23710     56 97 02 F6 | 	mov	arg03, local04
23714     54 97 82 F1 | 	sub	arg03, local02
23718     01 96 06 F1 | 	add	arg03, #1
2371c     18 C8 62 FD | 	getqx	local18
23720     64 95 02 F1 | 	add	arg02, local18
23724     54 95 02 F1 | 	add	arg02, local02
23728     5C 03 B0 FD | 	call	#_psram_spin2_read1
2372c     65 C1 02 F1 | 	add	local14, local19
23730     66 C1 0A F2 | 	cmp	local14, local20 wz
23734     B0 FF 9F 5D |  if_ne	jmp	#LR__2925
23738     0B 00 00 FF 
2373c     CC 64 86 F1 | 	sub	objptr, ##5836
23740                 | LR__2926
23740                 | '     
23740                 | ' if ((f<$80000) && (t>=$80000)) 
23740     00 04 00 FF 
23744     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23748     84 00 90 3D |  if_ae	jmp	#LR__2928
2374c     00 04 00 FF 
23750     00 B2 56 F2 | 	cmps	local07, ##524288 wc
23754     78 00 90 CD |  if_b	jmp	#LR__2928
23758                 | '   t:=t & $FFFFFFF
23758     7C B2 06 F4 | 	bitl	local07, #124
2375c                 | '   repeat y from y1a to y2a
2375c     55 C1 02 F6 | 	mov	local14, local03
23760     55 AF 52 F2 | 	cmps	local05, local03 wc
23764     01 CE 86 F6 | 	negc	local21, #1
23768     57 D1 02 F6 | 	mov	local22, local05
2376c     67 D1 02 F1 | 	add	local22, local21
23770     0B 00 00 FF 
23774     CC 64 06 F1 | 	add	objptr, ##5836
23778                 | LR__2927
23778     58 C1 02 FD | 	qmul	local14, local06
2377c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2377c     53 93 02 F6 | 	mov	arg01, local01
23780     5B CD 02 F6 | 	mov	local20, local09
23784     55 CD 82 F1 | 	sub	local20, local03
23788     60 CD 02 F1 | 	add	local20, local14
2378c     18 CA 62 FD | 	getqx	local19
23790     5C CD 02 FD | 	qmul	local20, local10
23794     65 93 02 F1 | 	add	arg01, local19
23798     54 93 02 F1 | 	add	arg01, local02
2379c     59 95 02 F6 | 	mov	arg02, local07
237a0     56 97 02 F6 | 	mov	arg03, local04
237a4     54 97 82 F1 | 	sub	arg03, local02
237a8     01 96 06 F1 | 	add	arg03, #1
237ac     18 CC 62 FD | 	getqx	local20
237b0     66 95 02 F1 | 	add	arg02, local20
237b4     5A 95 02 F1 | 	add	arg02, local08
237b8     68 03 B0 FD | 	call	#_psram_spin2_write
237bc     67 C1 02 F1 | 	add	local14, local21
237c0     68 C1 0A F2 | 	cmp	local14, local22 wz
237c4     B0 FF 9F 5D |  if_ne	jmp	#LR__2927
237c8     0B 00 00 FF 
237cc     CC 64 86 F1 | 	sub	objptr, ##5836
237d0                 | LR__2928
237d0                 | '     
237d0                 | ' if ((f<$80000) && (t<$80000)) 
237d0     00 04 00 FF 
237d4     00 A6 56 F2 | 	cmps	local01, ##524288 wc
237d8     00 04 00 CF 
237dc     00 B2 56 C2 |  if_b	cmps	local07, ##524288 wc
237e0     64 00 90 3D |  if_ae	jmp	#LR__2930
237e4                 | '   repeat y from y1a to y2a
237e4     55 C1 02 F6 | 	mov	local14, local03
237e8     55 AF 52 F2 | 	cmps	local05, local03 wc
237ec     01 D2 86 F6 | 	negc	local23, #1
237f0     57 D5 02 F6 | 	mov	local24, local05
237f4     69 D5 02 F1 | 	add	local24, local23
237f8                 | LR__2929
237f8     58 C1 02 FD | 	qmul	local14, local06
237fc                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
237fc     53 93 02 F6 | 	mov	arg01, local01
23800     5B D1 02 F6 | 	mov	local22, local09
23804     55 D1 82 F1 | 	sub	local22, local03
23808     60 D1 02 F1 | 	add	local22, local14
2380c     18 CE 62 FD | 	getqx	local21
23810     5C D1 02 FD | 	qmul	local22, local10
23814     67 93 02 F1 | 	add	arg01, local21
23818     54 93 02 F1 | 	add	arg01, local02
2381c     59 95 02 F6 | 	mov	arg02, local07
23820     56 97 02 F6 | 	mov	arg03, local04
23824     54 97 82 F1 | 	sub	arg03, local02
23828     01 96 06 F1 | 	add	arg03, #1
2382c     18 D0 62 FD | 	getqx	local22
23830     68 95 02 F1 | 	add	arg02, local22
23834     5A 95 02 F1 | 	add	arg02, local08
23838     70 10 B0 FD | 	call	#__system____builtin_memmove
2383c     69 C1 02 F1 | 	add	local14, local23
23840     6A C1 0A F2 | 	cmp	local14, local24 wz
23844     B0 FF 9F 5D |  if_ne	jmp	#LR__2929
23848                 | LR__2930
23848     E7 F0 03 F6 | 	mov	ptra, fp
2384c     F2 00 A0 FD | 	call	#popregs_
23850                 | _hg010b_spin2_blit_ret
23850     2D 00 64 FD | 	ret
23854                 | 
23854                 | ' 
23854                 | ' '..............................................................................
23854                 | ' 
23854                 | ' {{
23854                 | ' }}
23854                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
23854                 | _psram_spin2_startx
23854     04 CA 05 F6 | 	mov	COUNT_, #4
23858     E8 00 A0 FD | 	call	#pushregs_
2385c     49 A7 02 F6 | 	mov	local01, arg01
23860     4B A9 02 F6 | 	mov	local02, arg03
23864     4C AB 02 F6 | 	mov	local03, arg04
23868                 | '     stop() ' restart driver if required
23868     5C 01 B0 FD | 	call	#_psram_spin2_stop
2386c     00 A6 0E F2 | 	cmp	local01, #0 wz
23870     14 A6 06 AB |  if_e	rdlong	local01, #20
23874     53 95 52 F6 | 	abs	arg02, local01 wc
23878     A1 07 00 FF 
2387c     40 94 16 FD | 	qdiv	arg02, ##1000000
23880                 | ' 
23880                 | '     ' use current frequency if none specified
23880                 | ' 
23880                 | '     if freq == 0 
23880                 | '         freq := clkfreq 
23880                 | ' 
23880                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
23880                 | ' 
23880                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
23880                 | '     if burst < 0
23880                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
23880     18 94 62 FD | 	getqx	arg02
23884     4A 99 82 F6 | 	negc	arg04, arg02
23888     03 98 66 F0 | 	shl	arg04, #3
2388c     84 98 86 F1 | 	sub	arg04, #132
23890     04 98 46 F0 | 	shr	arg04, #4
23894     04 98 66 F0 | 	shl	arg04, #4
23898     00 98 56 F2 | 	cmps	arg04, #0 wc
2389c     0E 7A 66 C6 |  if_b	neg	result1, #14
238a0     18 01 90 CD |  if_b	jmp	#LR__2944
238a4                 | ' 
238a4                 | '     ' compute the input delay
238a4                 | ' 
238a4                 | '     if delay <= 0
238a4     01 A8 56 F2 | 	cmps	local02, #1 wc
238a8     10 00 90 3D |  if_ae	jmp	#LR__2940
238ac                 | '         delay := lookupDelay(freq)
238ac     53 93 02 F6 | 	mov	arg01, local01
238b0     C0 04 B0 FD | 	call	#_psram_spin2_lookupDelay
238b4     3D A9 02 F6 | 	mov	local02, result1
238b8     04 00 90 FD | 	jmp	#LR__2941
238bc                 | LR__2940
238bc                 | '     else
238bc                 | '         delay <#= $f ' limit to 15
238bc     0F A8 66 F3 | 	fles	local02, #15
238c0                 | LR__2941
238c0                 | ' 
238c0                 | '     ' create our lock
238c0                 | ' 
238c0                 | '     driverlock := LOCKNEW()  
238c0     00 7A 06 F6 | 	mov	result1, #0
238c4     04 7A 62 FD | 	locknew	result1
238c8     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
238cc     3A 7B 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
238d0                 | '     if driverlock == -1
238d0     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
238d4     FF FF 7F FF 
238d8     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
238dc                 | '         return ERR_NO_LOCK
238dc     1A 7A 66 A6 |  if_e	neg	result1, #26
238e0     D8 00 90 AD |  if_e	jmp	#LR__2944
238e4                 | ' 
238e4                 | '     ' patch in the proper data and HUB addresses to the startup structure
238e4                 | ' 
238e4                 | '     long[@startupData][0]:=clkfreq
238e4     14 A6 06 FB | 	rdlong	local01, #20
238e8     28 75 06 F1 | 	add	ptr__psram_spin2_dat__, #296
238ec     3A A7 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
238f0                 | ' '    long[@startupData][1]:=$1000_0000
238f0                 | '     long[@startupData][5]:=@deviceData
238f0     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
238f4     20 A6 06 F1 | 	add	local01, #32
238f8     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
238fc     14 94 06 F1 | 	add	arg02, #20
23900     4A A7 62 FC | 	wrlong	local01, arg02
23904                 | '     long[@startupData][6]:=@qosData
23904     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23908     A0 A6 06 F1 | 	add	local01, #160
2390c     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23910     18 94 06 F1 | 	add	arg02, #24
23914     4A A7 62 FC | 	wrlong	local01, arg02
23918                 | '     long[@startupData][7]:=$7FF00
23918     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2391c     1C A6 06 F1 | 	add	local01, #28
23920     FF 03 80 FF 
23924     53 01 6A FC | 	wrlong	##524032, local01
23928                 | ' 
23928                 | '     ' setup some default bank and QoS parameter values
23928                 | ' 
23928                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
23928     20 74 06 F1 | 	add	ptr__psram_spin2_dat__, #32
2392c     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23930     48 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
23934     10 98 66 F0 | 	shl	arg04, #16
23938     0C A8 66 F0 | 	shl	local02, #12
2393c     54 99 42 F5 | 	or	arg04, local02
23940     18 98 46 F5 | 	or	arg04, #24
23944     4C 95 02 F6 | 	mov	arg02, arg04
23948     02 96 06 F6 | 	mov	arg03, #2
2394c     E0 00 A0 FD | 	call	#\builtin_longfill_
23950                 | '     longfill(@qosData, $FFFF0000, 8)
23950     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23954     C8 93 06 F1 | 	add	arg01, #456
23958     07 96 06 F6 | 	mov	arg03, #7
2395c     28 96 62 FD | 	setq	arg03
23960     80 FF FF FF 
23964     49 01 68 FC | 	wrlong	##-65536, arg01
23968                 | ' 
23968                 | '     ' get the address of the PSRAM memory driver so we can start it
23968                 | ' 
23968                 | '     driverAddr:= driver.getDriverAddr()
23968                 | '     return @driver_start
23968     39 95 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
2396c     20 94 06 F1 | 	add	arg02, #32
23970                 | ' 
23970                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
23970                 | ' 
23970                 | '     if desiredcog < 0
23970     00 AA 56 F2 | 	cmps	local03, #0 wc
23974                 | '         desiredcog := NEWCOG
23974     10 AA 06 C6 |  if_b	mov	local03, #16
23978                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
23978     3A 97 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
2397c     28 97 06 F1 | 	add	arg03, #296
23980     55 AD 02 F6 | 	mov	local04, local03
23984     28 96 62 FD | 	setq	arg03
23988     4A AD F2 FC | 	coginit	local04, arg02 wc
2398c     01 AC 66 C6 |  if_b	neg	local04, #1
23990     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23994     3A AD 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
23998     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
2399c     D7 08 48 FB | 	callpa	#(@LR__2943-@LR__2942)>>2,fcache_load_ptr_
239a0                 | '     repeat until long[@startupData] == 0 
239a0                 | LR__2942
239a0     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
239a4     28 AD 06 F1 | 	add	local04, #296
239a8     56 AD 0A FB | 	rdlong	local04, local04 wz
239ac     F0 FF 9F 5D |  if_ne	jmp	#LR__2942
239b0                 | LR__2943
239b0                 | ' 
239b0                 | '     return drivercog
239b0     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
239b4     3A 7B 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
239b8     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
239bc                 | LR__2944
239bc     E7 F0 03 F6 | 	mov	ptra, fp
239c0     F2 00 A0 FD | 	call	#popregs_
239c4                 | _psram_spin2_startx_ret
239c4     2D 00 64 FD | 	ret
239c8                 | 
239c8                 | ' 
239c8                 | ' '..............................................................................
239c8                 | ' 
239c8                 | ' {{
239c8                 | ' }}
239c8                 | ' PUB stop() : i
239c8                 | _psram_spin2_stop
239c8     00 80 06 F6 | 	mov	_var01, #0
239cc                 | '     if drivercog <> -1
239cc     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
239d0     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
239d4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
239d8     FF FF 7F FF 
239dc     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
239e0     70 00 90 AD |  if_e	jmp	#LR__2953
239e4                 | '         cogstop(drivercog) ' a rather brutal stop
239e4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
239e8     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
239ec     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
239f0     03 92 62 FD | 	cogstop	arg01
239f4     D7 26 48 FB | 	callpa	#(@LR__2952-@LR__2950)>>2,fcache_load_ptr_
239f8                 | '         repeat i from 0 to 7
239f8                 | LR__2950
239f8                 | '             if long[$7FF00][i*3] < 0
239f8     40 7B 02 F6 | 	mov	result1, _var01
239fc     01 7A 66 F0 | 	shl	result1, #1
23a00     40 7B 02 F1 | 	add	result1, _var01
23a04     02 7A 66 F0 | 	shl	result1, #2
23a08     FF 03 00 FF 
23a0c     00 7B 06 F1 | 	add	result1, ##524032
23a10     3D 7B 02 FB | 	rdlong	result1, result1
23a14     00 7A 56 F2 | 	cmps	result1, #0 wc
23a18     1C 00 90 3D |  if_ae	jmp	#LR__2951
23a1c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
23a1c     40 7B 02 F6 | 	mov	result1, _var01
23a20     01 7A 66 F0 | 	shl	result1, #1
23a24     40 7B 02 F1 | 	add	result1, _var01
23a28     02 7A 66 F0 | 	shl	result1, #2
23a2c     FF 03 00 FF 
23a30     00 7B 06 F1 | 	add	result1, ##524032
23a34     3D 21 68 FC | 	wrlong	#16, result1
23a38                 | LR__2951
23a38     01 80 06 F1 | 	add	_var01, #1
23a3c     08 80 56 F2 | 	cmps	_var01, #8 wc
23a40     B4 FF 9F CD |  if_b	jmp	#LR__2950
23a44                 | LR__2952
23a44                 | '         drivercog := -1
23a44     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23a48     FF FF FF FF 
23a4c     3A FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
23a50     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23a54                 | LR__2953
23a54                 | '     if driverlock <> -1
23a54     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23a58     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23a5c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23a60     FF FF 7F FF 
23a64     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23a68                 | '         LOCKRET(driverlock)
23a68     04 75 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
23a6c     3A 93 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
23a70     05 92 62 5D |  if_ne	lockret	arg01
23a74                 | '         driverlock := -1
23a74     FF FF FF 5F 
23a78     3A FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
23a7c     04 75 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
23a80     40 7B 02 F6 | 	mov	result1, _var01
23a84                 | _psram_spin2_stop_ret
23a84     2D 00 64 FD | 	ret
23a88                 | 
23a88                 | ' 
23a88                 | ' '..............................................................................
23a88                 | ' 
23a88                 | ' {{
23a88                 | ' }}
23a88                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
23a88                 | _psram_spin2_read1
23a88                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23a88                 | '     if drivercog == -1 ' driver must be running
23a88     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23a8c     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23a90     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23a94     FF FF 7F FF 
23a98     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23a9c                 | '         return ERR_INACTIVE
23a9c     0F 7A 66 A6 |  if_e	neg	result1, #15
23aa0     7C 00 90 AD |  if_e	jmp	#LR__2961
23aa4                 | '     if count == 0 ' don't even bother reading
23aa4     00 96 0E F2 | 	cmp	arg03, #0 wz
23aa8                 | '         return 0
23aa8     00 7A 06 A6 |  if_e	mov	result1, #0
23aac     70 00 90 AD |  if_e	jmp	#LR__2961
23ab0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23ab0     00 7A 06 F6 | 	mov	result1, #0
23ab4     01 7A 62 FD | 	cogid	result1
23ab8     3D 81 02 F6 | 	mov	_var01, result1
23abc     01 80 66 F0 | 	shl	_var01, #1
23ac0     3D 81 02 F1 | 	add	_var01, result1
23ac4     02 80 66 F0 | 	shl	_var01, #2
23ac8     FF 03 00 FF 
23acc     00 83 06 F6 | 	mov	_var02, ##524032
23ad0     40 83 02 F1 | 	add	_var02, _var01
23ad4                 | '     if long[mailbox] < 0
23ad4     41 81 02 FB | 	rdlong	_var01, _var02
23ad8     00 80 56 F2 | 	cmps	_var01, #0 wc
23adc                 | '         return ERR_MAILBOX_BUSY
23adc     1C 7A 66 C6 |  if_b	neg	result1, #28
23ae0     3C 00 90 CD |  if_b	jmp	#LR__2961
23ae4                 | '     long[mailbox][2] := count
23ae4     08 82 06 F1 | 	add	_var02, #8
23ae8     41 97 62 FC | 	wrlong	arg03, _var02
23aec                 | '     long[mailbox][1] := dstHubAddr
23aec     04 82 86 F1 | 	sub	_var02, #4
23af0     41 93 62 FC | 	wrlong	arg01, _var02
23af4     04 82 86 F1 | 	sub	_var02, #4
23af8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
23af8     4A 85 02 F6 | 	mov	_var03, arg02
23afc     D9 84 06 F4 | 	bitl	_var03, #217
23b00     00 00 58 FF 
23b04     00 80 06 F6 | 	mov	_var01, ##-1342177280
23b08     42 81 02 F1 | 	add	_var01, _var03
23b0c     41 81 62 FC | 	wrlong	_var01, _var02
23b10                 | '     repeat
23b10                 | LR__2960
23b10                 | '         result := long[mailbox]    
23b10     41 85 02 FB | 	rdlong	_var03, _var02
23b14     00 84 56 F2 | 	cmps	_var03, #0 wc
23b18     F4 FF 9F CD |  if_b	jmp	#LR__2960
23b1c                 | '     while result < 0   
23b1c                 | '     return -result                       'return success or error
23b1c     42 7B 62 F6 | 	neg	result1, _var03
23b20                 | LR__2961
23b20                 | _psram_spin2_read1_ret
23b20     2D 00 64 FD | 	ret
23b24                 | 
23b24                 | ' 
23b24                 | ' '..............................................................................
23b24                 | ' 
23b24                 | ' {{
23b24                 | ' }}
23b24                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
23b24                 | _psram_spin2_write
23b24                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23b24                 | '     if drivercog == -1 ' driver must be running
23b24     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23b28     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23b2c     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23b30     FF FF 7F FF 
23b34     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23b38                 | '         return ERR_INACTIVE
23b38     0F 7A 66 A6 |  if_e	neg	result1, #15
23b3c     7C 00 90 AD |  if_e	jmp	#LR__2971
23b40                 | '     if count == 0 ' don't even bother writing
23b40     00 96 0E F2 | 	cmp	arg03, #0 wz
23b44                 | '         return 0
23b44     00 7A 06 A6 |  if_e	mov	result1, #0
23b48     70 00 90 AD |  if_e	jmp	#LR__2971
23b4c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23b4c     00 7A 06 F6 | 	mov	result1, #0
23b50     01 7A 62 FD | 	cogid	result1
23b54     3D 81 02 F6 | 	mov	_var01, result1
23b58     01 80 66 F0 | 	shl	_var01, #1
23b5c     3D 81 02 F1 | 	add	_var01, result1
23b60     02 80 66 F0 | 	shl	_var01, #2
23b64     FF 03 00 FF 
23b68     00 83 06 F6 | 	mov	_var02, ##524032
23b6c     40 83 02 F1 | 	add	_var02, _var01
23b70                 | '     if long[mailbox] < 0
23b70     41 81 02 FB | 	rdlong	_var01, _var02
23b74     00 80 56 F2 | 	cmps	_var01, #0 wc
23b78                 | '         return ERR_MAILBOX_BUSY
23b78     1C 7A 66 C6 |  if_b	neg	result1, #28
23b7c     3C 00 90 CD |  if_b	jmp	#LR__2971
23b80                 | '     long[mailbox][2] := count
23b80     08 82 06 F1 | 	add	_var02, #8
23b84     41 97 62 FC | 	wrlong	arg03, _var02
23b88                 | '     long[mailbox][1] := srcHubAddr
23b88     04 82 86 F1 | 	sub	_var02, #4
23b8c     41 93 62 FC | 	wrlong	arg01, _var02
23b90     04 82 86 F1 | 	sub	_var02, #4
23b94                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
23b94     4A 85 02 F6 | 	mov	_var03, arg02
23b98     D9 84 06 F4 | 	bitl	_var03, #217
23b9c     00 00 78 FF 
23ba0     00 80 06 F6 | 	mov	_var01, ##-268435456
23ba4     42 81 02 F1 | 	add	_var01, _var03
23ba8     41 81 62 FC | 	wrlong	_var01, _var02
23bac                 | '     repeat
23bac                 | LR__2970
23bac                 | '         result := long[mailbox]    
23bac     41 85 02 FB | 	rdlong	_var03, _var02
23bb0     00 84 56 F2 | 	cmps	_var03, #0 wc
23bb4     F4 FF 9F CD |  if_b	jmp	#LR__2970
23bb8                 | '     while result < 0   
23bb8                 | '     return -result                       'return success or error
23bb8     42 7B 62 F6 | 	neg	result1, _var03
23bbc                 | LR__2971
23bbc                 | _psram_spin2_write_ret
23bbc     2D 00 64 FD | 	ret
23bc0                 | 
23bc0                 | ' 
23bc0                 | ' ' generalized fill
23bc0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
23bc0                 | _psram_spin2_fill
23bc0     49 81 02 F6 | 	mov	_var01, arg01
23bc4     4A 83 02 F6 | 	mov	_var02, arg02
23bc8     4B 85 02 F6 | 	mov	_var03, arg03
23bcc     4D 87 02 F6 | 	mov	_var04, arg05
23bd0                 | '     case datasize 
23bd0     01 86 86 F1 | 	sub	_var04, #1
23bd4     04 86 26 F3 | 	fle	_var04, #4
23bd8     30 86 62 FD | 	jmprel	_var04
23bdc                 | LR__2980
23bdc     10 00 90 FD | 	jmp	#LR__2981
23be0     18 00 90 FD | 	jmp	#LR__2982
23be4     2C 00 90 FD | 	jmp	#LR__2984
23be8     1C 00 90 FD | 	jmp	#LR__2983
23bec     24 00 90 FD | 	jmp	#LR__2984
23bf0                 | LR__2981
23bf0                 | '         1: req := driver.R_WRITEBYTE
23bf0     00 00 60 FF 
23bf4     00 88 06 F6 | 	mov	_var05, ##-1073741824
23bf8     20 00 90 FD | 	jmp	#LR__2985
23bfc                 | LR__2982
23bfc                 | '         2: req := driver.R_WRITEWORD
23bfc     00 00 68 FF 
23c00     00 88 06 F6 | 	mov	_var05, ##-805306368
23c04     14 00 90 FD | 	jmp	#LR__2985
23c08                 | LR__2983
23c08                 | '         4: req := driver.R_WRITELONG
23c08     00 00 70 FF 
23c0c     00 88 06 F6 | 	mov	_var05, ##-536870912
23c10     08 00 90 FD | 	jmp	#LR__2985
23c14                 | LR__2984
23c14                 | '         other : return ERR_INVALID
23c14     06 7A 66 F6 | 	neg	result1, #6
23c18     94 00 90 FD | 	jmp	#LR__2987
23c1c                 | LR__2985
23c1c                 | '     if count == 0   ' nothing to do
23c1c     00 84 0E F2 | 	cmp	_var03, #0 wz
23c20                 | '         return 0
23c20     00 7A 06 A6 |  if_e	mov	result1, #0
23c24     88 00 90 AD |  if_e	jmp	#LR__2987
23c28                 | '     if drivercog == -1
23c28     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23c2c     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
23c30     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23c34     FF FF 7F FF 
23c38     FF 87 0E F2 | 	cmp	_var04, ##-1 wz
23c3c                 | '         return ERR_INACTIVE
23c3c     0F 7A 66 A6 |  if_e	neg	result1, #15
23c40     6C 00 90 AD |  if_e	jmp	#LR__2987
23c44                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
23c44     00 7A 06 F6 | 	mov	result1, #0
23c48     01 7A 62 FD | 	cogid	result1
23c4c     3D 87 02 F6 | 	mov	_var04, result1
23c50     01 86 66 F0 | 	shl	_var04, #1
23c54     3D 87 02 F1 | 	add	_var04, result1
23c58     02 86 66 F0 | 	shl	_var04, #2
23c5c     FF 03 00 FF 
23c60     00 8B 06 F6 | 	mov	_var06, ##524032
23c64     43 8B 02 F1 | 	add	_var06, _var04
23c68                 | '     if long[mailbox] < 0
23c68     45 87 02 FB | 	rdlong	_var04, _var06
23c6c     00 86 56 F2 | 	cmps	_var04, #0 wc
23c70                 | '         return ERR_MAILBOX_BUSY
23c70     1C 7A 66 C6 |  if_b	neg	result1, #28
23c74     38 00 90 CD |  if_b	jmp	#LR__2987
23c78                 | '     long[mailbox][2] := count
23c78     08 8A 06 F1 | 	add	_var06, #8
23c7c     45 85 62 FC | 	wrlong	_var03, _var06
23c80                 | '     long[mailbox][1] := pattern
23c80     04 8A 86 F1 | 	sub	_var06, #4
23c84     45 83 62 FC | 	wrlong	_var02, _var06
23c88     04 8A 86 F1 | 	sub	_var06, #4
23c8c                 | '     long[mailbox] := req + (addr & $1ffffff)
23c8c     44 8D 02 F6 | 	mov	_var07, _var05
23c90     40 8F 02 F6 | 	mov	_var08, _var01
23c94     D9 8E 06 F4 | 	bitl	_var08, #217
23c98     47 8D 02 F1 | 	add	_var07, _var08
23c9c     45 8D 62 FC | 	wrlong	_var07, _var06
23ca0                 | '     repeat
23ca0                 | LR__2986
23ca0                 | '         r := long[mailbox]
23ca0     45 8F 02 FB | 	rdlong	_var08, _var06
23ca4     00 8E 56 F2 | 	cmps	_var08, #0 wc
23ca8     F4 FF 9F CD |  if_b	jmp	#LR__2986
23cac                 | '     while r < 0
23cac                 | '     return -r                  ' return 0 for success or negated error code
23cac     47 7B 62 F6 | 	neg	result1, _var08
23cb0                 | LR__2987
23cb0                 | _psram_spin2_fill_ret
23cb0     2D 00 64 FD | 	ret
23cb4                 | 
23cb4                 | ' 
23cb4                 | ' '..............................................................................
23cb4                 | ' 
23cb4                 | ' {{
23cb4                 | ' }}
23cb4                 | ' PUB setQos(cog, qos) : result | mailbox
23cb4                 | _psram_spin2_setQos
23cb4     49 81 02 F6 | 	mov	_var01, arg01
23cb8                 | '     if drivercog == -1 ' driver must be running
23cb8     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cbc     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23cc0     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23cc4     FF FF 7F FF 
23cc8     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23ccc                 | '         return ERR_INACTIVE
23ccc     0F 7A 66 A6 |  if_e	neg	result1, #15
23cd0     9C 00 90 AD |  if_e	jmp	#LR__2994
23cd4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
23cd4     00 80 56 F2 | 	cmps	_var01, #0 wc
23cd8     08 00 90 CD |  if_b	jmp	#LR__2990
23cdc     08 80 56 F2 | 	cmps	_var01, #8 wc
23ce0     08 00 90 CD |  if_b	jmp	#LR__2991
23ce4                 | LR__2990
23ce4                 | '         return ERR_INVALID
23ce4     06 7A 66 F6 | 	neg	result1, #6
23ce8     84 00 90 FD | 	jmp	#LR__2994
23cec                 | LR__2991
23cec                 | '     long[@qosData][cog] := qos & !$1ff
23cec     FF 95 26 F5 | 	andn	arg02, #511
23cf0     C8 75 06 F1 | 	add	ptr__psram_spin2_dat__, #456
23cf4     02 80 66 F0 | 	shl	_var01, #2
23cf8     3A 81 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
23cfc     40 95 62 FC | 	wrlong	arg02, _var01
23d00                 | '     mailbox := $7FF00 + drivercog*12
23d00     C8 74 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
23d04     3A 85 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
23d08     42 87 02 F6 | 	mov	_var04, _var03
23d0c     01 86 66 F0 | 	shl	_var04, #1
23d10     42 87 02 F1 | 	add	_var04, _var03
23d14     02 86 66 F0 | 	shl	_var04, #2
23d18     FF 03 00 FF 
23d1c     00 89 06 F6 | 	mov	_var05, ##524032
23d20     43 89 02 F1 | 	add	_var05, _var04
23d24                 | '     repeat until LOCKTRY(driverlock)
23d24     04 74 06 F1 | 	add	ptr__psram_spin2_dat__, #4
23d28                 | LR__2992
23d28     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23d2c     06 92 72 FD | 	locktry	arg01 wc
23d30     F4 FF 9F 3D |  if_ae	jmp	#LR__2992
23d34     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23d38                 | '     long[mailbox] := driver.R_CONFIG + cogid()
23d38     00 86 06 F6 | 	mov	_var04, #0
23d3c     01 86 62 FD | 	cogid	_var04
23d40     00 00 78 FF 
23d44     00 82 06 F6 | 	mov	_var02, ##-268435456
23d48     43 83 02 F1 | 	add	_var02, _var04
23d4c     44 83 62 FC | 	wrlong	_var02, _var05
23d50                 | '     repeat while long[mailbox] < 0
23d50                 | LR__2993
23d50     44 83 02 FB | 	rdlong	_var02, _var05
23d54     00 82 56 F2 | 	cmps	_var02, #0 wc
23d58     F4 FF 9F CD |  if_b	jmp	#LR__2993
23d5c                 | '     LOCKREL(driverlock)
23d5c     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23d60     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23d64     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23d68     07 92 72 FD | 	lockrel	arg01 wc
23d6c     00 7A 06 F6 | 	mov	result1, #0
23d70                 | LR__2994
23d70                 | _psram_spin2_setQos_ret
23d70     2D 00 64 FD | 	ret
23d74                 | 
23d74                 | ' 
23d74                 | ' '..............................................................................
23d74                 | ' 
23d74                 | ' {{
23d74                 | ' }}
23d74                 | ' PRI lookupDelay(freq) : delay | profile
23d74                 | _psram_spin2_lookupDelay
23d74                 | '     profile := @delayTable
23d74     3A 81 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
23d78     08 81 06 F1 | 	add	_var01, #264
23d7c                 | '     delay := long[profile][0]
23d7c     40 83 02 FB | 	rdlong	_var02, _var01
23d80     D7 16 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
23d84                 | '     repeat while long[profile][1] 
23d84                 | LR__3000
23d84     04 80 06 F1 | 	add	_var01, #4
23d88     40 7B 0A FB | 	rdlong	result1, _var01 wz
23d8c     04 80 86 F1 | 	sub	_var01, #4
23d90     1C 00 90 AD |  if_e	jmp	#LR__3002
23d94                 | '         if freq +< long[profile][1] 
23d94     04 80 06 F1 | 	add	_var01, #4
23d98     40 7B 02 FB | 	rdlong	result1, _var01
23d9c     04 80 86 F1 | 	sub	_var01, #4
23da0     3D 93 12 F2 | 	cmp	arg01, result1 wc
23da4                 | '             quit
23da4                 | '         profile += 4
23da4     04 80 06 31 |  if_ae	add	_var01, #4
23da8                 | '         delay++
23da8     01 82 06 31 |  if_ae	add	_var02, #1
23dac     D4 FF 9F 3D |  if_ae	jmp	#LR__3000
23db0                 | LR__3001
23db0                 | LR__3002
23db0     41 7B 02 F6 | 	mov	result1, _var02
23db4                 | _psram_spin2_lookupDelay_ret
23db4     2D 00 64 FD | 	ret
23db8                 | 
23db8                 | ' 
23db8                 | ' PUB start() : r
23db8                 | _usbnew_spin2_start
23db8     00 80 06 F6 | 	mov	_var01, #0
23dbc                 | '   ifnot driver_cog
23dbc     15 00 00 FF 
23dc0     87 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
23dc4     3B 83 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
23dc8     15 00 00 FF 
23dcc     87 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
23dd0     38 00 90 5D |  if_ne	jmp	#LR__3010
23dd4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
23dd4     3B 95 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
23dd8     10 80 06 F6 | 	mov	_var01, #16
23ddc     00 96 06 F6 | 	mov	arg03, #0
23de0     28 96 62 FD | 	setq	arg03
23de4     4A 81 F2 FC | 	coginit	_var01, arg02 wc
23de8     01 80 66 C6 |  if_b	neg	_var01, #1
23dec                 | '     if r >= 0
23dec     00 80 56 F2 | 	cmps	_var01, #0 wc
23df0                 | '       driver_cog := r+1
23df0     40 83 02 36 |  if_ae	mov	_var02, _var01
23df4     01 82 06 31 |  if_ae	add	_var02, #1
23df8     15 00 00 3F 
23dfc     87 76 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
23e00     3B 83 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
23e04     15 00 00 3F 
23e08     87 76 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
23e0c                 | LR__3010
23e0c     40 7B 02 F6 | 	mov	result1, _var01
23e10                 | _usbnew_spin2_start_ret
23e10     2D 00 64 FD | 	ret
23e14                 | 
23e14                 | '     '' (Always enabled)
23e14                 | ' 
23e14                 | ' '' Get current pressed state of a keyboard key
23e14                 | ' PUB keystate(key) : r | buf[2],tmp
23e14                 | _usbnew_spin2_keystate
23e14     00 84 06 F6 | 	mov	_var03, #0
23e18                 | '   if key >= $E0 && key < $E8
23e18     E0 92 56 F2 | 	cmps	arg01, #224 wc
23e1c     30 00 90 CD |  if_b	jmp	#LR__3020
23e20     E8 92 56 F2 | 	cmps	arg01, #232 wc
23e24     28 00 90 3D |  if_ae	jmp	#LR__3020
23e28                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
23e28     00 7A 06 F6 | 	mov	result1, #0
23e2c     3B 87 02 F6 | 	mov	_var04, ptr__usbnew_spin2_dat__
23e30     13 00 00 FF 
23e34     D8 87 06 F1 | 	add	_var04, ##10200
23e38     49 89 02 F6 | 	mov	_var05, arg01
23e3c     E0 88 86 F1 | 	sub	_var05, #224
23e40     43 8B C2 FA | 	rdbyte	_var06, _var04
23e44     44 8B 4A F0 | 	shr	_var06, _var05 wz
23e48     01 7A 66 56 |  if_ne	neg	result1, #1
23e4c     50 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
23e50                 | LR__3020
23e50                 | '   else
23e50                 | '     '' Do this in inline ASM to ensure atomicity
23e50                 | '     tmp := @hkbd_report
23e50     3B 8B 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
23e54     13 00 00 FF 
23e58     D8 8B 06 F1 | 	add	_var06, ##10200
23e5c                 | '     org
23e5c     D7 1E 48 FB | 	callpa	#(@LR__3022-@LR__3021)>>2,fcache_load_ptr_
23e60                 | LR__3021
23e60 000             | 	org	0
23e60 000 28 02 64 FD | 	setq	#1
23e64 001 45 81 02 FB | 	rdlong	_var01, _var06
23e68 002 40 8D F2 F8 | 	getbyte	_var07, _var01, #2
23e6c 003 49 8D 0A F2 | 	cmp	_var07, arg01 wz
23e70 004 40 8D FA F8 | 	getbyte	_var07, _var01, #3
23e74 005 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e78 006 41 8D E2 F8 | 	getbyte	_var07, _var02, #0
23e7c 007 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e80 008 41 8D EA F8 | 	getbyte	_var07, _var02, #1
23e84 009 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e88 00a 41 8D F2 F8 | 	getbyte	_var07, _var02, #2
23e8c 00b 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e90 00c 41 8D FA F8 | 	getbyte	_var07, _var02, #3
23e94 00d 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23e98 00e 01 84 66 A6 |  if_e	neg	_var03, #1
23e9c 00f             | 	fit	192
23e9c 00f             | LR__3022
23e9c                 | 	orgh
23e9c     42 7B 02 F6 | 	mov	result1, _var03
23ea0                 | _usbnew_spin2_keystate_ret
23ea0     2D 00 64 FD | 	ret
23ea4                 | 
23ea4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
23ea4                 | ' 
23ea4                 | ' '' Return key event from buffer if there is one
23ea4                 | ' PUB get_key() : r | tail
23ea4                 | _usbnew_spin2_get_key
23ea4                 | '   tail := keyq_tail
23ea4     0F 00 00 FF 
23ea8     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
23eac     3B 81 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
23eb0                 | '   if keyq_head == tail
23eb0     01 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
23eb4     3B 83 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
23eb8     0F 00 00 FF 
23ebc     D4 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
23ec0     40 83 0A F2 | 	cmp	_var02, _var01 wz
23ec4                 | '     return 0 ' No event
23ec4     00 7A 06 A6 |  if_e	mov	result1, #0
23ec8     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
23ecc                 | '   r := keyq_data[tail]
23ecc     40 83 02 F6 | 	mov	_var02, _var01
23ed0     02 82 66 F0 | 	shl	_var02, #2
23ed4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23ed8     0F 00 00 FF 
23edc     D6 7A 06 F1 | 	add	result1, ##7894
23ee0     3D 83 02 F1 | 	add	_var02, result1
23ee4     41 7B 02 FB | 	rdlong	result1, _var02
23ee8                 | '   if ++tail == KEYQUEUE_SIZE
23ee8     01 80 06 F1 | 	add	_var01, #1
23eec     80 80 0E F2 | 	cmp	_var01, #128 wz
23ef0                 | '     tail := 0
23ef0     00 80 06 A6 |  if_e	mov	_var01, #0
23ef4                 | '   keyq_tail := tail
23ef4     0F 00 00 FF 
23ef8     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
23efc     3B 81 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
23f00     0F 00 00 FF 
23f04     D5 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
23f08                 | _usbnew_spin2_get_key_ret
23f08     2D 00 64 FD | 	ret
23f0c                 | 
23f0c                 | ' 
23f0c                 | ' '' Emulate mouse movement
23f0c                 | ' PUB mouse_move(x,y)
23f0c                 | _usbnew_spin2_mouse_move
23f0c     02 CA 05 F6 | 	mov	COUNT_, #2
23f10     E8 00 A0 FD | 	call	#pushregs_
23f14     49 A7 02 F6 | 	mov	local01, arg01
23f18     4A A9 02 F6 | 	mov	local02, arg02
23f1c                 | '   mouse_lock := 1
23f1c     14 00 00 FF 
23f20     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
23f24     3B 03 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
23f28     14 00 00 FF 
23f2c     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
23f30                 | '   waitus(2) ' hope driver is now done
23f30     02 92 06 F6 | 	mov	arg01, #2
23f34     24 0E B0 FD | 	call	#__system___waitus
23f38                 | '   mouse_xacc := x
23f38     14 00 00 FF 
23f3c     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
23f40     3B A7 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
23f44                 | '   mouse_yacc := y
23f44     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23f48     3B A9 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
23f4c                 | '   if mouse_outptr
23f4c     05 00 00 FF 
23f50     15 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
23f54     3B 95 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
23f58     0F 00 00 FF 
23f5c     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
23f60     24 00 90 AD |  if_e	jmp	#LR__3030
23f64                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
23f64     10 A8 66 F0 | 	shl	local02, #16
23f68     53 A7 32 F9 | 	getword	local01, local01, #0
23f6c     53 A9 42 F5 | 	or	local02, local01
23f70     0F 00 00 FF 
23f74     D0 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
23f78     3B A7 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
23f7c     0F 00 00 FF 
23f80     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
23f84     53 A9 62 FC | 	wrlong	local02, local01
23f88                 | LR__3030
23f88                 | '   mouse_lock := 0
23f88     14 00 00 FF 
23f8c     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
23f90     3B 01 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
23f94     14 00 00 FF 
23f98     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
23f9c     E7 F0 03 F6 | 	mov	ptra, fp
23fa0     F2 00 A0 FD | 	call	#popregs_
23fa4                 | _usbnew_spin2_mouse_move_ret
23fa4     2D 00 64 FD | 	ret
23fa8                 | 
23fa8                 | ' 
23fa8                 | ' '' Get state of an axis (normalized between -32768 and 32767)
23fa8                 | ' PUB hidpad_axis(dev,axnum) : r
23fa8                 | _usbnew_spin2_hidpad_axis
23fa8                 | '   if axnum +>= 8
23fa8     08 94 16 F2 | 	cmp	arg02, #8 wc
23fac                 | '     return 0
23fac     00 7A 06 36 |  if_ae	mov	result1, #0
23fb0     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
23fb4                 | '   else 
23fb4                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
23fb4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23fb8     13 00 00 FF 
23fbc     F8 7B 06 F1 | 	add	result1, ##10232
23fc0     05 92 66 F0 | 	shl	arg01, #5
23fc4     49 7B 02 F1 | 	add	result1, arg01
23fc8     04 92 06 F6 | 	mov	arg01, #4
23fcc     4A 93 02 F1 | 	add	arg01, arg02
23fd0     01 92 66 F0 | 	shl	arg01, #1
23fd4     3D 93 02 F1 | 	add	arg01, result1
23fd8     49 7B E2 FA | 	rdword	result1, arg01
23fdc     0F 7A 66 F7 | 	signx	result1, #15
23fe0                 | _usbnew_spin2_hidpad_axis_ret
23fe0     2D 00 64 FD | 	ret
23fe4                 | 
23fe4                 | ' 
23fe4                 | ' '' Get state of a hat
23fe4                 | ' PUB hidpad_hat(dev,hatnum) : r
23fe4                 | _usbnew_spin2_hidpad_hat
23fe4                 | '   if hatnum +>= 4
23fe4     04 94 16 F2 | 	cmp	arg02, #4 wc
23fe8                 | '     return 0
23fe8     00 7A 06 36 |  if_ae	mov	result1, #0
23fec     24 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
23ff0                 | '   else 
23ff0                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
23ff0     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23ff4     13 00 00 FF 
23ff8     F8 7B 06 F1 | 	add	result1, ##10232
23ffc     05 92 66 F0 | 	shl	arg01, #5
24000     49 7B 02 F1 | 	add	result1, arg01
24004     1C 92 06 F6 | 	mov	arg01, #28
24008     4A 93 02 F1 | 	add	arg01, arg02
2400c     3D 93 02 F1 | 	add	arg01, result1
24010     49 7B C2 FA | 	rdbyte	result1, arg01
24014                 | _usbnew_spin2_hidpad_hat_ret
24014     2D 00 64 FD | 	ret
24018                 | 
24018                 | ' 
24018                 | ' '--------------------------------------------------------------
24018                 | ' '---------- Init the variables, start the cog. ----------------
24018                 | ' '--------------------------------------------------------------
24018                 | ' 
24018                 | ' pub start(mbox,scope,cache) :cog,base | iii
24018                 | _Audio2_004_spin2_start
24018     04 CA 05 F6 | 	mov	COUNT_, #4
2401c     E8 00 A0 FD | 	call	#pushregs_
24020     49 A7 02 F6 | 	mov	local01, arg01
24024                 | ' 
24024                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
24024                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
24024                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
24024                 | ' 
24024                 | ' mailboxaddr:=mbox 
24024     32 A7 62 FC | 	wrlong	local01, objptr
24028                 | ' scope_ptr:=scope
24028     04 64 06 F1 | 	add	objptr, #4
2402c     32 95 62 FC | 	wrlong	arg02, objptr
24030                 | ' cache_ptr:=cache
24030     04 64 06 F1 | 	add	objptr, #4
24034     32 97 62 FC | 	wrlong	arg03, objptr
24038                 | ' base:=@channel0[0]
24038     04 64 06 F1 | 	add	objptr, #4
2403c     32 A9 02 F6 | 	mov	local02, objptr
24040                 | ' 
24040                 | ' repeat iii from 0 to 15
24040     00 AA 06 F6 | 	mov	local03, #0
24044     0C 64 86 F1 | 	sub	objptr, #12
24048     D7 1A 49 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
2404c                 | LR__3040
2404c                 | '   long[base+64*iii]:=0
2404c     54 A7 02 F6 | 	mov	local01, local02
24050     55 7D 02 F6 | 	mov	result2, local03
24054     06 7C 66 F0 | 	shl	result2, #6
24058     3E A7 02 F1 | 	add	local01, result2
2405c     53 01 68 FC | 	wrlong	#0, local01
24060                 | '   long[base+64*iii+4]:=0  		
24060     54 A7 02 F6 | 	mov	local01, local02
24064     55 7D 02 F6 | 	mov	result2, local03
24068     06 7C 66 F0 | 	shl	result2, #6
2406c     3E A7 02 F1 | 	add	local01, result2
24070     04 A6 06 F1 | 	add	local01, #4
24074     53 01 68 FC | 	wrlong	#0, local01
24078                 | '   long[base+64*iii+8]:=0
24078     54 AD 02 F6 | 	mov	local04, local02
2407c     55 A7 02 F6 | 	mov	local01, local03
24080     06 A6 66 F0 | 	shl	local01, #6
24084     53 AD 02 F1 | 	add	local04, local01
24088     08 AC 06 F1 | 	add	local04, #8
2408c     56 01 68 FC | 	wrlong	#0, local04
24090                 | '   long[base+64*iii+12]:=0
24090     54 AD 02 F6 | 	mov	local04, local02
24094     55 A7 02 F6 | 	mov	local01, local03
24098     06 A6 66 F0 | 	shl	local01, #6
2409c     53 AD 02 F1 | 	add	local04, local01
240a0     0C AC 06 F1 | 	add	local04, #12
240a4     56 01 68 FC | 	wrlong	#0, local04
240a8                 | '   long[base+64*iii+16]:=0
240a8     54 AD 02 F6 | 	mov	local04, local02
240ac     55 A7 02 F6 | 	mov	local01, local03
240b0     06 A6 66 F0 | 	shl	local01, #6
240b4     53 AD 02 F1 | 	add	local04, local01
240b8     10 AC 06 F1 | 	add	local04, #16
240bc     56 01 68 FC | 	wrlong	#0, local04
240c0                 | '   long[base+64*iii+20]:=0
240c0     54 AD 02 F6 | 	mov	local04, local02
240c4     55 A7 02 F6 | 	mov	local01, local03
240c8     06 A6 66 F0 | 	shl	local01, #6
240cc     53 AD 02 F1 | 	add	local04, local01
240d0     14 AC 06 F1 | 	add	local04, #20
240d4     56 01 68 FC | 	wrlong	#0, local04
240d8                 | '   long[base+64*iii+24]:=0
240d8     54 AD 02 F6 | 	mov	local04, local02
240dc     55 A7 02 F6 | 	mov	local01, local03
240e0     06 A6 66 F0 | 	shl	local01, #6
240e4     53 AD 02 F1 | 	add	local04, local01
240e8     18 AC 06 F1 | 	add	local04, #24
240ec     56 01 68 FC | 	wrlong	#0, local04
240f0                 | '   long[base+64*iii+28]:=0
240f0     54 AD 02 F6 | 	mov	local04, local02
240f4     55 A7 02 F6 | 	mov	local01, local03
240f8     06 A6 66 F0 | 	shl	local01, #6
240fc     53 AD 02 F1 | 	add	local04, local01
24100     1C AC 06 F1 | 	add	local04, #28
24104     56 01 68 FC | 	wrlong	#0, local04
24108                 | '   word[base+64*iii+32]:=8192
24108     54 AD 02 F6 | 	mov	local04, local02
2410c     55 A7 02 F6 | 	mov	local01, local03
24110     06 A6 66 F0 | 	shl	local01, #6
24114     53 AD 02 F1 | 	add	local04, local01
24118     20 AC 06 F1 | 	add	local04, #32
2411c     10 00 80 FF 
24120     56 01 58 FC | 	wrword	##8192, local04
24124                 | '   word[base+64*iii+34]:=8192
24124     54 AD 02 F6 | 	mov	local04, local02
24128     55 A7 02 F6 | 	mov	local01, local03
2412c     06 A6 66 F0 | 	shl	local01, #6
24130     53 AD 02 F1 | 	add	local04, local01
24134     22 AC 06 F1 | 	add	local04, #34
24138     10 00 80 FF 
2413c     56 01 58 FC | 	wrword	##8192, local04
24140                 | '   long[base+64*iii+36]:=0
24140     54 AD 02 F6 | 	mov	local04, local02
24144     55 A7 02 F6 | 	mov	local01, local03
24148     06 A6 66 F0 | 	shl	local01, #6
2414c     53 AD 02 F1 | 	add	local04, local01
24150     24 AC 06 F1 | 	add	local04, #36
24154     56 01 68 FC | 	wrlong	#0, local04
24158                 | '   long[base+64*iii+40]:=0
24158     54 AD 02 F6 | 	mov	local04, local02
2415c     55 A7 02 F6 | 	mov	local01, local03
24160     06 A6 66 F0 | 	shl	local01, #6
24164     53 AD 02 F1 | 	add	local04, local01
24168     28 AC 06 F1 | 	add	local04, #40
2416c     56 01 68 FC | 	wrlong	#0, local04
24170                 | '   long[base+64*iii+44]:=0
24170     54 AD 02 F6 | 	mov	local04, local02
24174     55 A7 02 F6 | 	mov	local01, local03
24178     06 A6 66 F0 | 	shl	local01, #6
2417c     53 AD 02 F1 | 	add	local04, local01
24180     2C AC 06 F1 | 	add	local04, #44
24184     56 01 68 FC | 	wrlong	#0, local04
24188                 | '   long[base+64*iii+48]:=0
24188     54 AD 02 F6 | 	mov	local04, local02
2418c     55 A7 02 F6 | 	mov	local01, local03
24190     06 A6 66 F0 | 	shl	local01, #6
24194     53 AD 02 F1 | 	add	local04, local01
24198     30 AC 06 F1 | 	add	local04, #48
2419c     56 01 68 FC | 	wrlong	#0, local04
241a0                 | '   long[base+64*iii+52]:=0
241a0     54 AD 02 F6 | 	mov	local04, local02
241a4     55 A7 02 F6 | 	mov	local01, local03
241a8     06 A6 66 F0 | 	shl	local01, #6
241ac     53 AD 02 F1 | 	add	local04, local01
241b0     34 AC 06 F1 | 	add	local04, #52
241b4     56 01 68 FC | 	wrlong	#0, local04
241b8                 | '   freqs[iii]:=440000
241b8     55 AD 02 F6 | 	mov	local04, local03
241bc     02 AC 66 F0 | 	shl	local04, #2
241c0     02 00 00 FF 
241c4     0C 64 06 F1 | 	add	objptr, ##1036
241c8     32 AD 02 F1 | 	add	local04, objptr
241cc     5B 03 80 FF 
241d0     56 81 69 FC | 	wrlong	##440000, local04
241d4                 | '   delays[iii]:=0
241d4     55 AD 02 F6 | 	mov	local04, local03
241d8     01 AC 66 F0 | 	shl	local04, #1
241dc     40 64 06 F1 | 	add	objptr, #64
241e0     32 AD 02 F1 | 	add	local04, objptr
241e4     56 01 58 FC | 	wrword	#0, local04
241e8                 | '   volumes[iii]:=4096
241e8     55 AD 02 F6 | 	mov	local04, local03
241ec     01 AC 66 F0 | 	shl	local04, #1
241f0     20 64 06 F1 | 	add	objptr, #32
241f4     32 AD 02 F1 | 	add	local04, objptr
241f8     08 00 80 FF 
241fc     56 01 58 FC | 	wrword	##4096, local04
24200                 | '   waveforms[iii]:=0
24200     55 AD 02 F6 | 	mov	local04, local03
24204     02 AC 66 F0 | 	shl	local04, #2
24208     20 64 06 F1 | 	add	objptr, #32
2420c     32 AD 02 F1 | 	add	local04, objptr
24210     56 01 68 FC | 	wrlong	#0, local04
24214                 | '   envelopes[iii]:=0
24214     55 AD 02 F6 | 	mov	local04, local03
24218     02 AC 66 F0 | 	shl	local04, #2
2421c     40 64 06 F1 | 	add	objptr, #64
24220     32 AD 02 F1 | 	add	local04, objptr
24224     56 01 68 FC | 	wrlong	#0, local04
24228                 | '   lengths[iii]:=1000
24228     55 AD 02 F6 | 	mov	local04, local03
2422c     01 AC 66 F0 | 	shl	local04, #1
24230     40 64 06 F1 | 	add	objptr, #64
24234     32 AD 02 F1 | 	add	local04, objptr
24238     01 00 80 FF 
2423c     56 D1 5B FC | 	wrword	##1000, local04
24240                 | '   pans[iii]:=8192
24240     55 AD 02 F6 | 	mov	local04, local03
24244     01 AC 66 F0 | 	shl	local04, #1
24248     20 64 06 F1 | 	add	objptr, #32
2424c     32 AD 02 F1 | 	add	local04, objptr
24250     10 00 80 FF 
24254     56 01 58 FC | 	wrword	##8192, local04
24258                 | '   sustains[iii]:=255
24258     55 AD 02 F6 | 	mov	local04, local03
2425c     01 AC 66 F0 | 	shl	local04, #1
24260     20 64 06 F1 | 	add	objptr, #32
24264     32 AD 02 F1 | 	add	local04, objptr
24268     56 FF 59 FC | 	wrword	#255, local04
2426c     01 AA 06 F1 | 	add	local03, #1
24270     10 AA 56 F2 | 	cmps	local03, #16 wc
24274     02 00 00 FF 
24278     4C 65 86 F1 | 	sub	objptr, ##1356
2427c     CC FD 9F CD |  if_b	jmp	#LR__3040
24280                 | LR__3041
24280                 | '   
24280                 | ' cog:=coginit(16,@audio,@mailboxaddr)
24280     33 95 02 F6 | 	mov	arg02, ptr__Audio2_004_spin2_dat__
24284     32 97 02 F6 | 	mov	arg03, objptr
24288     10 AC 06 F6 | 	mov	local04, #16
2428c     28 96 62 FD | 	setq	arg03
24290     4A AD F2 FC | 	coginit	local04, arg02 wc
24294     01 AC 66 C6 |  if_b	neg	local04, #1
24298                 | ' waitms(10)
24298     0A 92 06 F6 | 	mov	arg01, #10
2429c     50 0A B0 FD | 	call	#__system___waitms
242a0                 | ' return cog,base
242a0     54 7D 02 F6 | 	mov	result2, local02
242a4     56 7B 02 F6 | 	mov	result1, local04
242a8     E7 F0 03 F6 | 	mov	ptra, fp
242ac     F2 00 A0 FD | 	call	#popregs_
242b0                 | _Audio2_004_spin2_start_ret
242b0     2D 00 64 FD | 	ret
242b4                 | 
242b4                 | ' 
242b4                 | ' pub play (channel, frequency=-1, delay=-1, volume=-1, waveform=-1, envelope=-1, length=-1, pan=-1, sustain=-1) | base2
242b4                 | _Audio2_004_spin2_play
242b4     0B CA 05 F6 | 	mov	COUNT_, #11
242b8     E8 00 A0 FD | 	call	#pushregs_
242bc     49 A7 02 F6 | 	mov	local01, arg01
242c0     4A A9 02 F6 | 	mov	local02, arg02
242c4     4B AB 02 F6 | 	mov	local03, arg03
242c8     4C AD 02 F6 | 	mov	local04, arg04
242cc     4D AF 02 F6 | 	mov	local05, arg05
242d0     4E B1 02 F6 | 	mov	local06, arg06
242d4     4F B3 02 F6 | 	mov	local07, arg07
242d8     50 B5 02 F6 | 	mov	local08, arg08
242dc     51 B7 02 F6 | 	mov	local09, arg09
242e0                 | ' 
242e0                 | ' if frequency==(-1)
242e0     FF FF 7F FF 
242e4     FF A9 0E F2 | 	cmp	local02, ##-1 wz
242e8     20 00 90 5D |  if_ne	jmp	#LR__3050
242ec                 | '   frequency:=freqs[channel]
242ec     53 A9 02 F6 | 	mov	local02, local01
242f0     02 A8 66 F0 | 	shl	local02, #2
242f4     32 B9 02 F6 | 	mov	local10, objptr
242f8     02 00 00 FF 
242fc     0C B8 06 F1 | 	add	local10, ##1036
24300     5C A9 02 F1 | 	add	local02, local10
24304     54 A9 02 FB | 	rdlong	local02, local02
24308     1C 00 90 FD | 	jmp	#LR__3051
2430c                 | LR__3050
2430c                 | ' else
2430c                 | '   freqs[channel]:=frequency
2430c     53 BB 02 F6 | 	mov	local11, local01
24310     02 BA 66 F0 | 	shl	local11, #2
24314     32 B9 02 F6 | 	mov	local10, objptr
24318     02 00 00 FF 
2431c     0C B8 06 F1 | 	add	local10, ##1036
24320     5C BB 02 F1 | 	add	local11, local10
24324     5D A9 62 FC | 	wrlong	local02, local11
24328                 | LR__3051
24328                 | '   
24328                 | ' if delay==(-1)
24328     FF FF 7F FF 
2432c     FF AB 0E F2 | 	cmp	local03, ##-1 wz
24330     20 00 90 5D |  if_ne	jmp	#LR__3052
24334                 | '   delay:=delays[channel]
24334     53 B9 02 F6 | 	mov	local10, local01
24338     01 B8 66 F0 | 	shl	local10, #1
2433c     32 BB 02 F6 | 	mov	local11, objptr
24340     02 00 00 FF 
24344     4C BA 06 F1 | 	add	local11, ##1100
24348     5D B9 02 F1 | 	add	local10, local11
2434c     5C AB E2 FA | 	rdword	local03, local10
24350     1C 00 90 FD | 	jmp	#LR__3053
24354                 | LR__3052
24354                 | ' else
24354                 | '   delays[channel]:=delay
24354     53 B9 02 F6 | 	mov	local10, local01
24358     01 B8 66 F0 | 	shl	local10, #1
2435c     32 BB 02 F6 | 	mov	local11, objptr
24360     02 00 00 FF 
24364     4C BA 06 F1 | 	add	local11, ##1100
24368     5D B9 02 F1 | 	add	local10, local11
2436c     5C AB 52 FC | 	wrword	local03, local10
24370                 | LR__3053
24370                 | '   
24370                 | ' if volume==(-1)      
24370     FF FF 7F FF 
24374     FF AD 0E F2 | 	cmp	local04, ##-1 wz
24378     20 00 90 5D |  if_ne	jmp	#LR__3054
2437c                 | '   volume:=volumes[channel]
2437c     53 B9 02 F6 | 	mov	local10, local01
24380     01 B8 66 F0 | 	shl	local10, #1
24384     32 BB 02 F6 | 	mov	local11, objptr
24388     02 00 00 FF 
2438c     6C BA 06 F1 | 	add	local11, ##1132
24390     5D B9 02 F1 | 	add	local10, local11
24394     5C AD E2 FA | 	rdword	local04, local10
24398     1C 00 90 FD | 	jmp	#LR__3055
2439c                 | LR__3054
2439c                 | ' else
2439c                 | '   volumes[channel]:=volume
2439c     53 B9 02 F6 | 	mov	local10, local01
243a0     01 B8 66 F0 | 	shl	local10, #1
243a4     32 BB 02 F6 | 	mov	local11, objptr
243a8     02 00 00 FF 
243ac     6C BA 06 F1 | 	add	local11, ##1132
243b0     5D B9 02 F1 | 	add	local10, local11
243b4     5C AD 52 FC | 	wrword	local04, local10
243b8                 | LR__3055
243b8                 | '   
243b8                 | ' if waveform==(-1)
243b8     FF FF 7F FF 
243bc     FF AF 0E F2 | 	cmp	local05, ##-1 wz
243c0     20 00 90 5D |  if_ne	jmp	#LR__3056
243c4                 | '   waveform:=waveforms[channel]
243c4     53 BB 02 F6 | 	mov	local11, local01
243c8     02 BA 66 F0 | 	shl	local11, #2
243cc     32 B9 02 F6 | 	mov	local10, objptr
243d0     02 00 00 FF 
243d4     8C B8 06 F1 | 	add	local10, ##1164
243d8     5C BB 02 F1 | 	add	local11, local10
243dc     5D AF 02 FB | 	rdlong	local05, local11
243e0     1C 00 90 FD | 	jmp	#LR__3057
243e4                 | LR__3056
243e4                 | ' else
243e4                 | '   waveforms[channel]:=waveform
243e4     53 BB 02 F6 | 	mov	local11, local01
243e8     02 BA 66 F0 | 	shl	local11, #2
243ec     32 B9 02 F6 | 	mov	local10, objptr
243f0     02 00 00 FF 
243f4     8C B8 06 F1 | 	add	local10, ##1164
243f8     5C BB 02 F1 | 	add	local11, local10
243fc     5D AF 62 FC | 	wrlong	local05, local11
24400                 | LR__3057
24400                 | '   
24400                 | ' if envelope==(-1)
24400     FF FF 7F FF 
24404     FF B1 0E F2 | 	cmp	local06, ##-1 wz
24408     20 00 90 5D |  if_ne	jmp	#LR__3058
2440c                 | '   envelope:=envelopes[channel]
2440c     53 BB 02 F6 | 	mov	local11, local01
24410     02 BA 66 F0 | 	shl	local11, #2
24414     32 B9 02 F6 | 	mov	local10, objptr
24418     02 00 00 FF 
2441c     CC B8 06 F1 | 	add	local10, ##1228
24420     5C BB 02 F1 | 	add	local11, local10
24424     5D B1 02 FB | 	rdlong	local06, local11
24428     1C 00 90 FD | 	jmp	#LR__3059
2442c                 | LR__3058
2442c                 | ' else
2442c                 | '   envelopes[channel]:=envelope
2442c     53 BB 02 F6 | 	mov	local11, local01
24430     02 BA 66 F0 | 	shl	local11, #2
24434     32 B9 02 F6 | 	mov	local10, objptr
24438     02 00 00 FF 
2443c     CC B8 06 F1 | 	add	local10, ##1228
24440     5C BB 02 F1 | 	add	local11, local10
24444     5D B1 62 FC | 	wrlong	local06, local11
24448                 | LR__3059
24448                 | '   
24448                 | ' if length==(-1)
24448     FF FF 7F FF 
2444c     FF B3 0E F2 | 	cmp	local07, ##-1 wz
24450     20 00 90 5D |  if_ne	jmp	#LR__3060
24454                 | '   length:=lengths[channel]
24454     53 B9 02 F6 | 	mov	local10, local01
24458     01 B8 66 F0 | 	shl	local10, #1
2445c     32 BB 02 F6 | 	mov	local11, objptr
24460     02 00 00 FF 
24464     0C BB 06 F1 | 	add	local11, ##1292
24468     5D B9 02 F1 | 	add	local10, local11
2446c     5C B3 E2 FA | 	rdword	local07, local10
24470     1C 00 90 FD | 	jmp	#LR__3061
24474                 | LR__3060
24474                 | ' else
24474                 | '   lengths[channel]:=length
24474     53 B9 02 F6 | 	mov	local10, local01
24478     01 B8 66 F0 | 	shl	local10, #1
2447c     32 BB 02 F6 | 	mov	local11, objptr
24480     02 00 00 FF 
24484     0C BB 06 F1 | 	add	local11, ##1292
24488     5D B9 02 F1 | 	add	local10, local11
2448c     5C B3 52 FC | 	wrword	local07, local10
24490                 | LR__3061
24490                 | '   
24490                 | ' if pan==(-1)
24490     FF FF 7F FF 
24494     FF B5 0E F2 | 	cmp	local08, ##-1 wz
24498     20 00 90 5D |  if_ne	jmp	#LR__3062
2449c                 | '   pan:=pans[channel]
2449c     53 B9 02 F6 | 	mov	local10, local01
244a0     01 B8 66 F0 | 	shl	local10, #1
244a4     32 BB 02 F6 | 	mov	local11, objptr
244a8     02 00 00 FF 
244ac     2C BB 06 F1 | 	add	local11, ##1324
244b0     5D B9 02 F1 | 	add	local10, local11
244b4     5C B5 E2 FA | 	rdword	local08, local10
244b8     1C 00 90 FD | 	jmp	#LR__3063
244bc                 | LR__3062
244bc                 | ' else
244bc                 | '   pans[channel]:=pan
244bc     53 B9 02 F6 | 	mov	local10, local01
244c0     01 B8 66 F0 | 	shl	local10, #1
244c4     32 BB 02 F6 | 	mov	local11, objptr
244c8     02 00 00 FF 
244cc     2C BB 06 F1 | 	add	local11, ##1324
244d0     5D B9 02 F1 | 	add	local10, local11
244d4     5C B5 52 FC | 	wrword	local08, local10
244d8                 | LR__3063
244d8                 | '  
244d8                 | ' if sustain==(-1)
244d8     FF FF 7F FF 
244dc     FF B7 0E F2 | 	cmp	local09, ##-1 wz
244e0     20 00 90 5D |  if_ne	jmp	#LR__3064
244e4                 | '   sustain:=sustains[channel]
244e4     53 B9 02 F6 | 	mov	local10, local01
244e8     01 B8 66 F0 | 	shl	local10, #1
244ec     32 BB 02 F6 | 	mov	local11, objptr
244f0     02 00 00 FF 
244f4     4C BB 06 F1 | 	add	local11, ##1356
244f8     5D B9 02 F1 | 	add	local10, local11
244fc     5C B7 E2 FA | 	rdword	local09, local10
24500     1C 00 90 FD | 	jmp	#LR__3065
24504                 | LR__3064
24504                 | ' else
24504                 | '   sustains[channel]:=sustain
24504     53 B9 02 F6 | 	mov	local10, local01
24508     01 B8 66 F0 | 	shl	local10, #1
2450c     32 BB 02 F6 | 	mov	local11, objptr
24510     02 00 00 FF 
24514     4C BB 06 F1 | 	add	local11, ##1356
24518     5D B9 02 F1 | 	add	local10, local11
2451c     5C B7 52 FC | 	wrword	local09, local10
24520                 | LR__3065
24520     59 BB 52 F6 | 	abs	local11, local07 wc
24524     C2 B9 80 FF 
24528     5D DF 19 FD | 	qdiv	##24347887, local11
2452c                 | '                 
2452c                 | ' length:=24347887/length  
2452c     18 BA 62 FD | 	getqx	local11
24530     6D A8 06 FD | 	qmul	local02, #109
24534     5D B3 82 F6 | 	negc	local07, local11
24538                 | ' debug(udec(sustain))
24538                 | ' base2:=@channel0[0]+64*channel
24538     32 A9 02 F6 | 	mov	local02, objptr
2453c     0C A8 06 F1 | 	add	local02, #12
24540     06 A6 66 F0 | 	shl	local01, #6
24544     53 A9 02 F1 | 	add	local02, local01
24548                 | ' long[base2+20]:=waveform+$C0000000 
24548     00 00 60 FF 
2454c     00 AE 06 F1 | 	add	local05, ##-1073741824
24550     54 B9 02 F6 | 	mov	local10, local02
24554     14 B8 06 F1 | 	add	local10, #20
24558     5C AF 62 FC | 	wrlong	local05, local10
2455c                 | ' long[base2+28]:= 2048
2455c     54 BB 02 F6 | 	mov	local11, local02
24560     1C BA 06 F1 | 	add	local11, #28
24564     04 00 80 FF 
24568     5D 01 68 FC | 	wrlong	##2048, local11
2456c                 | ' long[base2+24]:= 0
2456c     54 BB 02 F6 | 	mov	local11, local02
24570     18 BA 06 F1 | 	add	local11, #24
24574     5D 01 68 FC | 	wrlong	#0, local11
24578                 | ' word[base2+32]:=volume
24578     54 BB 02 F6 | 	mov	local11, local02
2457c     20 BA 06 F1 | 	add	local11, #32
24580     5D AD 52 FC | 	wrword	local04, local11
24584                 | ' word[base2+32]:=pan
24584     54 BB 02 F6 | 	mov	local11, local02
24588     20 BA 06 F1 | 	add	local11, #32
2458c     5D B5 52 FC | 	wrword	local08, local11
24590                 | ' long[base2+36]:=((frequency*109)/1000)*3574 ' (frequency*389566)/1000  freq*3574*109/1000
24590     18 BA 62 FD | 	getqx	local11
24594     5D B9 52 F6 | 	abs	local10, local11 wc
24598     01 00 00 FF 
2459c     E8 B9 16 FD | 	qdiv	local10, ##1000
245a0     18 B8 62 FD | 	getqx	local10
245a4     5C B9 82 F6 | 	negc	local10, local10
245a8     06 00 00 FF 
245ac     F6 B9 06 FD | 	qmul	local10, ##3574
245b0     54 B9 02 F6 | 	mov	local10, local02
245b4     24 B8 06 F1 | 	add	local10, #36
245b8                 | ' long[base2+44]:=envelope
245b8     54 BB 02 F6 | 	mov	local11, local02
245bc     2C BA 06 F1 | 	add	local11, #44
245c0                 | ' long[base2+48]:=length
245c0                 | ' long[base2+52]:=sustain
245c0                 | ' waitms(delay)
245c0     55 93 02 F6 | 	mov	arg01, local03
245c4     18 B4 62 FD | 	getqx	local08
245c8     5C B5 62 FC | 	wrlong	local08, local10
245cc     5D B1 62 FC | 	wrlong	local06, local11
245d0     54 BB 02 F6 | 	mov	local11, local02
245d4     30 BA 06 F1 | 	add	local11, #48
245d8     5D B3 62 FC | 	wrlong	local07, local11
245dc     34 A8 06 F1 | 	add	local02, #52
245e0     54 B7 62 FC | 	wrlong	local09, local02
245e4     08 07 B0 FD | 	call	#__system___waitms
245e8     E7 F0 03 F6 | 	mov	ptra, fp
245ec     F2 00 A0 FD | 	call	#popregs_
245f0                 | _Audio2_004_spin2_play_ret
245f0     2D 00 64 FD | 	ret
245f4                 | 
245f4                 | ' 
245f4                 | ' 
245f4                 | ' pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2
245f4                 | _Audio2_004_spin2_play16
245f4     F8 02 00 FF 
245f8     BE 97 06 FD | 	qmul	arg03, ##389566
245fc                 | ' 
245fc                 | ' base2:=@channel0[0]+64*channel
245fc     32 97 02 F6 | 	mov	arg03, objptr
24600     0C 96 06 F1 | 	add	arg03, #12
24604     06 92 66 F0 | 	shl	arg01, #6
24608     49 97 02 F1 | 	add	arg03, arg01
2460c                 | ' long[base2+20]:=sample+$C0000000 
2460c     00 00 60 FF 
24610     00 94 06 F1 | 	add	arg02, ##-1073741824
24614     4B 93 02 F6 | 	mov	arg01, arg03
24618     14 92 06 F1 | 	add	arg01, #20
2461c     49 95 62 FC | 	wrlong	arg02, arg01
24620                 | ' long[base2+28]:= len
24620     4B 95 02 F6 | 	mov	arg02, arg03
24624     1C 94 06 F1 | 	add	arg02, #28
24628     4A 9B 62 FC | 	wrlong	arg05, arg02
2462c                 | ' long[base2+24]:= loop
2462c     4B 9B 02 F6 | 	mov	arg05, arg03
24630     18 9A 06 F1 | 	add	arg05, #24
24634     4D 9D 62 FC | 	wrlong	arg06, arg05
24638                 | ' word[base2+32]:= vol
24638     4B 9D 02 F6 | 	mov	arg06, arg03
2463c     20 9C 06 F1 | 	add	arg06, #32
24640     4E 99 52 FC | 	wrword	arg04, arg06
24644                 | ' long[base2+36]:= splfreq*389566
24644     24 96 06 F1 | 	add	arg03, #36
24648                 | ' waitms(delay)
24648     4F 93 02 F6 | 	mov	arg01, arg07
2464c     18 9E 62 FD | 	getqx	arg07
24650     4B 9F 62 FC | 	wrlong	arg07, arg03
24654     98 06 B0 FD | 	call	#__system___waitms
24658                 | _Audio2_004_spin2_play16_ret
24658     2D 00 64 FD | 	ret
2465c                 | 
2465c                 | ' 
2465c                 | ' pub beep(channel,sample,splfreq,vol,len,loop,delay) | base2
2465c                 | _Audio2_004_spin2_beep
2465c     02 00 00 FF 
24660     F2 97 06 FD | 	qmul	arg03, ##1522
24664                 | ' 
24664                 | ' base2:=@channel0[0]+64*channel
24664     32 97 02 F6 | 	mov	arg03, objptr
24668     0C 96 06 F1 | 	add	arg03, #12
2466c     06 92 66 F0 | 	shl	arg01, #6
24670     49 97 02 F1 | 	add	arg03, arg01
24674                 | ' long[base2+20]:=sample+$C0000000 
24674     00 00 60 FF 
24678     00 94 06 F1 | 	add	arg02, ##-1073741824
2467c     4B 93 02 F6 | 	mov	arg01, arg03
24680     14 92 06 F1 | 	add	arg01, #20
24684     49 95 62 FC | 	wrlong	arg02, arg01
24688                 | ' long[base2+28]:= len
24688     4B 95 02 F6 | 	mov	arg02, arg03
2468c     1C 94 06 F1 | 	add	arg02, #28
24690     4A 9B 62 FC | 	wrlong	arg05, arg02
24694                 | ' long[base2+24]:= loop
24694     4B 9B 02 F6 | 	mov	arg05, arg03
24698     18 9A 06 F1 | 	add	arg05, #24
2469c     4D 9D 62 FC | 	wrlong	arg06, arg05
246a0                 | ' word[base2+32]:= vol
246a0     4B 9D 02 F6 | 	mov	arg06, arg03
246a4     20 9C 06 F1 | 	add	arg06, #32
246a8     4E 99 52 FC | 	wrword	arg04, arg06
246ac                 | ' long[base2+36]:= splfreq*1522
246ac     24 96 06 F1 | 	add	arg03, #36
246b0                 | ' waitms(delay)
246b0     4F 93 02 F6 | 	mov	arg01, arg07
246b4     18 9E 62 FD | 	getqx	arg07
246b8     4B 9F 62 FC | 	wrlong	arg07, arg03
246bc     30 06 B0 FD | 	call	#__system___waitms
246c0                 | _Audio2_004_spin2_beep_ret
246c0     2D 00 64 FD | 	ret
246c4                 | hubexit
246c4     C1 00 80 FD | 	jmp	#cogexit
246c8                 | 
246c8                 | __system___setbaud
246c8     14 0E 07 FB | 	rdlong	muldiva_, #20
246cc     49 11 03 F6 | 	mov	muldivb_, arg01
246d0     FA 00 A0 FD | 	call	#divide_
246d4     D7 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
246d8                 | LR__3070
246d8     3E 7A 9E FA | 	rdpin	result1, #62 wc
246dc     3E 7D A2 F1 | 	subx	result2, result2
246e0     F4 FF 9F CD |  if_b	jmp	#LR__3070
246e4                 | LR__3071
246e4     40 7C 64 FD | 	dirl	#62
246e8     40 7E 64 FD | 	dirl	#63
246ec     34 11 63 FC | 	wrlong	muldivb_, ptr___system__dat__
246f0     10 10 67 F0 | 	shl	muldivb_, #16
246f4     07 94 06 F6 | 	mov	arg02, #7
246f8     88 95 02 F1 | 	add	arg02, muldivb_
246fc     3E F8 0C FC | 	wrpin	#124, #62
24700     3E 94 16 FC | 	wxpin	arg02, #62
24704     3F 7C 0C FC | 	wrpin	#62, #63
24708     14 94 06 F1 | 	add	arg02, #20
2470c     3F 94 16 FC | 	wxpin	arg02, #63
24710     41 7C 64 FD | 	dirh	#62
24714     41 7E 64 FD | 	dirh	#63
24718                 | __system___setbaud_ret
24718     2D 00 64 FD | 	ret
2471c                 | 
2471c                 | __system___txraw
2471c     01 CA 05 F6 | 	mov	COUNT_, #1
24720     E8 00 A0 FD | 	call	#pushregs_
24724     49 A7 02 F6 | 	mov	local01, arg01
24728     D7 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
2472c                 | LR__3080
2472c     3E 7A 9E FA | 	rdpin	result1, #62 wc
24730     3E 7D A2 F1 | 	subx	result2, result2
24734     F4 FF 9F CD |  if_b	jmp	#LR__3080
24738                 | LR__3081
24738     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
2473c     42 0F 00 AF 
24740     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24744     80 FF BF AD |  if_e	call	#__system___setbaud
24748     58 7C 64 FD | 	drvl	#62
2474c     3E A6 26 FC | 	wypin	local01, #62
24750     01 7A 06 F6 | 	mov	result1, #1
24754     E7 F0 03 F6 | 	mov	ptra, fp
24758     F2 00 A0 FD | 	call	#popregs_
2475c                 | __system___txraw_ret
2475c     2D 00 64 FD | 	ret
24760                 | 
24760                 | __system___rxraw
24760     0D CA 05 F6 | 	mov	COUNT_, #13
24764     E8 00 A0 FD | 	call	#pushregs_
24768     49 A7 02 F6 | 	mov	local01, arg01
2476c     34 A9 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24770     42 0F 00 AF 
24774     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24778     4C FF BF AD |  if_e	call	#__system___setbaud
2477c     00 A6 0E F2 | 	cmp	local01, #0 wz
24780     20 00 90 AD |  if_e	jmp	#LR__3090
24784     14 AA 06 FB | 	rdlong	local03, #20
24788     0A AA 46 F0 | 	shr	local03, #10
2478c     55 A7 02 FD | 	qmul	local01, local03
24790     1A 7A 62 FD | 	getct	result1
24794     18 AC 62 FD | 	getqx	local04
24798     56 7B 02 F1 | 	add	result1, local04
2479c     3D AF 02 F6 | 	mov	local05, result1
247a0     04 00 90 FD | 	jmp	#LR__3091
247a4                 | LR__3090
247a4     00 AE 06 F6 | 	mov	local05, #0
247a8                 | LR__3091
247a8     01 B0 66 F6 | 	neg	local06, #1
247ac     3F B2 06 F6 | 	mov	local07, #63
247b0     00 B4 06 F6 | 	mov	local08, #0
247b4     04 68 06 F1 | 	add	ptr___system__dat__, #4
247b8     34 B7 02 FB | 	rdlong	local09, ptr___system__dat__
247bc     04 68 86 F1 | 	sub	ptr___system__dat__, #4
247c0                 | LR__3092
247c0     08 B6 16 F4 | 	testb	local09, #8 wc
247c4     09 B6 76 F4 | 	testbn	local09, #9 andc
247c8     0A B6 46 F0 | 	shr	local09, #10
247cc     01 B4 06 C6 |  if_b	mov	local08, #1
247d0     40 7E 6C 3D |  if_ae	testp	#63 wz
247d4     01 B4 06 26 |  if_nc_and_z	mov	local08, #1
247d8     3F B6 8E 2A |  if_nc_and_z	rdpin	local09, #63
247dc     04 B6 46 20 |  if_nc_and_z	shr	local09, #4
247e0                 | LR__3093
247e0     00 A8 06 F6 | 	mov	local02, #0
247e4     00 B4 0E F2 | 	cmp	local08, #0 wz
247e8     01 A8 66 56 |  if_ne	neg	local02, #1
247ec     00 B8 06 F6 | 	mov	local10, #0
247f0     00 AA 06 F6 | 	mov	local03, #0
247f4     00 A6 0E F2 | 	cmp	local01, #0 wz
247f8     01 AA 66 56 |  if_ne	neg	local03, #1
247fc     00 AC 06 F6 | 	mov	local04, #0
24800     00 BA 06 F6 | 	mov	local11, #0
24804     57 BD 02 F6 | 	mov	local12, local05
24808     1A 7A 62 FD | 	getct	result1
2480c     3D BF 02 F6 | 	mov	local13, result1
24810     5F BD 82 F1 | 	sub	local12, local13
24814     00 BC 56 F2 | 	cmps	local12, #0 wc
24818     00 BA 26 C6 |  if_b	not	local11, #0
2481c     00 BA 0E F2 | 	cmp	local11, #0 wz
24820     00 AC 26 56 |  if_ne	not	local04, #0
24824     56 AB CA F7 | 	test	local03, local04 wz
24828     00 B8 26 56 |  if_ne	not	local10, #0
2482c     5C A9 4A F5 | 	or	local02, local10 wz
24830     8C FF 9F AD |  if_e	jmp	#LR__3092
24834     00 B4 0E F2 | 	cmp	local08, #0 wz
24838     5B B1 02 56 |  if_ne	mov	local06, local09
2483c     58 B1 E2 58 |  if_ne	getbyte	local06, local06, #0
24840     04 68 06 F1 | 	add	ptr___system__dat__, #4
24844     34 B7 62 FC | 	wrlong	local09, ptr___system__dat__
24848     04 68 86 F1 | 	sub	ptr___system__dat__, #4
2484c     58 7B 02 F6 | 	mov	result1, local06
24850     E7 F0 03 F6 | 	mov	ptra, fp
24854     F2 00 A0 FD | 	call	#popregs_
24858                 | __system___rxraw_ret
24858     2D 00 64 FD | 	ret
2485c                 | 
2485c                 | __system___getus
2485c     1A 7C 72 FD | 	getct	result2 wc
24860     1A 80 62 FD | 	getct	_var01
24864     10 68 06 F1 | 	add	ptr___system__dat__, #16
24868     34 83 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
2486c     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24870     20 00 90 5D |  if_ne	jmp	#LR__3100
24874     14 82 06 FB | 	rdlong	_var02, #20
24878     A1 07 00 FF 
2487c     40 82 16 FD | 	qdiv	_var02, ##1000000
24880     10 68 06 F1 | 	add	ptr___system__dat__, #16
24884     18 7A 62 FD | 	getqx	result1
24888     3D 83 02 F6 | 	mov	_var02, result1
2488c     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
24890     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24894                 | LR__3100
24894     41 7D 12 FD | 	qdiv	result2, _var02
24898     19 7C 62 FD | 	getqy	result2
2489c     28 7C 62 FD | 	setq	result2
248a0     41 81 12 FD | 	qdiv	_var01, _var02
248a4     18 7A 62 FD | 	getqx	result1
248a8                 | __system___getus_ret
248a8     2D 00 64 FD | 	ret
248ac                 | 
248ac                 | __system____builtin_memmove
248ac     49 81 02 F6 | 	mov	_var01, arg01
248b0     4A 93 52 F2 | 	cmps	arg01, arg02 wc
248b4     10 00 90 CD |  if_b	jmp	#LR__3110
248b8     4A 83 02 F6 | 	mov	_var02, arg02
248bc     4B 83 02 F1 | 	add	_var02, arg03
248c0     41 93 52 F2 | 	cmps	arg01, _var02 wc
248c4     48 00 90 CD |  if_b	jmp	#LR__3116
248c8                 | LR__3110
248c8     4B 85 02 F6 | 	mov	_var03, arg03
248cc     02 84 4E F0 | 	shr	_var03, #2 wz
248d0     18 00 90 AD |  if_e	jmp	#LR__3115
248d4     D7 0A 48 FB | 	callpa	#(@LR__3113-@LR__3111)>>2,fcache_load_ptr_
248d8                 | LR__3111
248d8     42 09 D8 FC | 	rep	@LR__3114, _var03
248dc                 | LR__3112
248dc     4A 85 02 FB | 	rdlong	_var03, arg02
248e0     49 85 62 FC | 	wrlong	_var03, arg01
248e4     04 92 06 F1 | 	add	arg01, #4
248e8     04 94 06 F1 | 	add	arg02, #4
248ec                 | LR__3113
248ec                 | LR__3114
248ec                 | LR__3115
248ec     02 96 CE F7 | 	test	arg03, #2 wz
248f0     4A 83 E2 5A |  if_ne	rdword	_var02, arg02
248f4     49 83 52 5C |  if_ne	wrword	_var02, arg01
248f8     02 92 06 51 |  if_ne	add	arg01, #2
248fc     02 94 06 51 |  if_ne	add	arg02, #2
24900     01 96 CE F7 | 	test	arg03, #1 wz
24904     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
24908     49 83 42 5C |  if_ne	wrbyte	_var02, arg01
2490c     28 00 90 FD | 	jmp	#LR__3122
24910                 | LR__3116
24910     4B 93 02 F1 | 	add	arg01, arg03
24914     4B 95 02 F1 | 	add	arg02, arg03
24918     4B 87 0A F6 | 	mov	_var04, arg03 wz
2491c     18 00 90 AD |  if_e	jmp	#LR__3121
24920     D7 0A 48 FB | 	callpa	#(@LR__3119-@LR__3117)>>2,fcache_load_ptr_
24924                 | LR__3117
24924     43 09 D8 FC | 	rep	@LR__3120, _var04
24928                 | LR__3118
24928     01 92 86 F1 | 	sub	arg01, #1
2492c     01 94 86 F1 | 	sub	arg02, #1
24930     4A 83 C2 FA | 	rdbyte	_var02, arg02
24934     49 83 42 FC | 	wrbyte	_var02, arg01
24938                 | LR__3119
24938                 | LR__3120
24938                 | LR__3121
24938                 | LR__3122
24938     40 7B 02 F6 | 	mov	result1, _var01
2493c                 | __system____builtin_memmove_ret
2493c     2D 00 64 FD | 	ret
24940                 | 
24940                 | __system__longmove
24940     49 81 02 F6 | 	mov	_var01, arg01
24944     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24948     24 00 90 3D |  if_ae	jmp	#LR__3134
2494c     4B 83 0A F6 | 	mov	_var02, arg03 wz
24950     54 00 90 AD |  if_e	jmp	#LR__3140
24954     D7 0A 48 FB | 	callpa	#(@LR__3132-@LR__3130)>>2,fcache_load_ptr_
24958                 | LR__3130
24958     41 09 D8 FC | 	rep	@LR__3133, _var02
2495c                 | LR__3131
2495c     4A 83 02 FB | 	rdlong	_var02, arg02
24960     49 83 62 FC | 	wrlong	_var02, arg01
24964     04 92 06 F1 | 	add	arg01, #4
24968     04 94 06 F1 | 	add	arg02, #4
2496c                 | LR__3132
2496c                 | LR__3133
2496c     38 00 90 FD | 	jmp	#LR__3140
24970                 | LR__3134
24970     4B 83 02 F6 | 	mov	_var02, arg03
24974     02 82 66 F0 | 	shl	_var02, #2
24978     41 93 02 F1 | 	add	arg01, _var02
2497c     4B 85 02 F6 | 	mov	_var03, arg03
24980     02 84 66 F0 | 	shl	_var03, #2
24984     42 95 02 F1 | 	add	arg02, _var03
24988     4B 87 0A F6 | 	mov	_var04, arg03 wz
2498c     18 00 90 AD |  if_e	jmp	#LR__3139
24990     D7 0A 48 FB | 	callpa	#(@LR__3137-@LR__3135)>>2,fcache_load_ptr_
24994                 | LR__3135
24994     43 09 D8 FC | 	rep	@LR__3138, _var04
24998                 | LR__3136
24998     04 92 86 F1 | 	sub	arg01, #4
2499c     04 94 86 F1 | 	sub	arg02, #4
249a0     4A 87 02 FB | 	rdlong	_var04, arg02
249a4     49 87 62 FC | 	wrlong	_var04, arg01
249a8                 | LR__3137
249a8                 | LR__3138
249a8                 | LR__3139
249a8                 | LR__3140
249a8     40 7B 02 F6 | 	mov	result1, _var01
249ac                 | __system__longmove_ret
249ac     2D 00 64 FD | 	ret
249b0                 | 
249b0                 | __system____builtin_strcpy
249b0     49 81 02 F6 | 	mov	_var01, arg01
249b4     D7 0A 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
249b8                 | LR__3150
249b8     4A 7B CA FA | 	rdbyte	result1, arg02 wz
249bc     49 7B 42 FC | 	wrbyte	result1, arg01
249c0     01 94 06 F1 | 	add	arg02, #1
249c4     01 92 06 F1 | 	add	arg01, #1
249c8     EC FF 9F 5D |  if_ne	jmp	#LR__3150
249cc                 | LR__3151
249cc     40 7B 02 F6 | 	mov	result1, _var01
249d0                 | __system____builtin_strcpy_ret
249d0     2D 00 64 FD | 	ret
249d4                 | 
249d4                 | __system____topofstack
249d4     00 CA 05 F6 | 	mov	COUNT_, #0
249d8     E8 00 A0 FD | 	call	#pushregs_
249dc     08 F0 07 F1 | 	add	ptra, #8
249e0     04 CE 05 F1 | 	add	fp, #4
249e4     E7 92 62 FC | 	wrlong	arg01, fp
249e8     E7 7A 02 F6 | 	mov	result1, fp
249ec     04 CE 85 F1 | 	sub	fp, #4
249f0     E7 F0 03 F6 | 	mov	ptra, fp
249f4     F2 00 A0 FD | 	call	#popregs_
249f8                 | __system____topofstack_ret
249f8     2D 00 64 FD | 	ret
249fc                 | 
249fc                 | __system___lockmem
249fc     00 7A 06 F6 | 	mov	result1, #0
24a00     01 7A 62 FD | 	cogid	result1
24a04     00 7B 06 F1 | 	add	result1, #256
24a08                 | LR__3160
24a08     49 81 0A FB | 	rdlong	_var01, arg01 wz
24a0c     49 7B 62 AC |  if_e	wrlong	result1, arg01
24a10     49 81 02 AB |  if_e	rdlong	_var01, arg01
24a14     49 81 02 AB |  if_e	rdlong	_var01, arg01
24a18     3D 81 0A F2 | 	cmp	_var01, result1 wz
24a1c     E8 FF 9F 5D |  if_ne	jmp	#LR__3160
24a20                 | __system___lockmem_ret
24a20     2D 00 64 FD | 	ret
24a24                 | 
24a24                 | __system___string_cmp
24a24     D7 14 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
24a28                 | LR__3170
24a28     49 81 C2 FA | 	rdbyte	_var01, arg01
24a2c     4A 83 C2 FA | 	rdbyte	_var02, arg02
24a30     40 85 02 F6 | 	mov	_var03, _var01
24a34     41 85 8A F1 | 	sub	_var03, _var02 wz
24a38     01 92 06 F1 | 	add	arg01, #1
24a3c     01 94 06 F1 | 	add	arg02, #1
24a40     0C 00 90 5D |  if_ne	jmp	#LR__3172
24a44     00 80 0E F2 | 	cmp	_var01, #0 wz
24a48     00 82 0E 52 |  if_ne	cmp	_var02, #0 wz
24a4c     D8 FF 9F 5D |  if_ne	jmp	#LR__3170
24a50                 | LR__3171
24a50                 | LR__3172
24a50     42 7B 02 F6 | 	mov	result1, _var03
24a54                 | __system___string_cmp_ret
24a54     2D 00 64 FD | 	ret
24a58                 | 
24a58                 | __system___string_concat
24a58     05 CA 05 F6 | 	mov	COUNT_, #5
24a5c     E8 00 A0 FD | 	call	#pushregs_
24a60     49 A7 02 F6 | 	mov	local01, arg01
24a64     4A A9 02 F6 | 	mov	local02, arg02
24a68     53 93 02 F6 | 	mov	arg01, local01
24a6c     49 AB 02 F6 | 	mov	local03, arg01
24a70     D7 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
24a74                 | LR__3180
24a74     55 7B CA FA | 	rdbyte	result1, local03 wz
24a78     01 AA 06 51 |  if_ne	add	local03, #1
24a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
24a80                 | LR__3181
24a80     49 AB 82 F1 | 	sub	local03, arg01
24a84     55 AD 02 F6 | 	mov	local04, local03
24a88     54 93 02 F6 | 	mov	arg01, local02
24a8c     49 AB 02 F6 | 	mov	local03, arg01
24a90     D7 06 48 FB | 	callpa	#(@LR__3183-@LR__3182)>>2,fcache_load_ptr_
24a94                 | LR__3182
24a94     55 7B CA FA | 	rdbyte	result1, local03 wz
24a98     01 AA 06 51 |  if_ne	add	local03, #1
24a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__3182
24aa0                 | LR__3183
24aa0     49 AB 82 F1 | 	sub	local03, arg01
24aa4     56 93 02 F6 | 	mov	arg01, local04
24aa8     55 93 02 F1 | 	add	arg01, local03
24aac     01 92 06 F1 | 	add	arg01, #1
24ab0     50 39 B0 FD | 	call	#__system___gc_alloc_managed
24ab4     3D AF 0A F6 | 	mov	local05, result1 wz
24ab8     28 00 90 AD |  if_e	jmp	#LR__3184
24abc     57 93 02 F6 | 	mov	arg01, local05
24ac0     53 95 02 F6 | 	mov	arg02, local01
24ac4     56 97 02 F6 | 	mov	arg03, local04
24ac8     E0 FD BF FD | 	call	#__system____builtin_memmove
24acc     57 93 02 F6 | 	mov	arg01, local05
24ad0     56 93 02 F1 | 	add	arg01, local04
24ad4     01 AA 06 F1 | 	add	local03, #1
24ad8     54 95 02 F6 | 	mov	arg02, local02
24adc     55 97 02 F6 | 	mov	arg03, local03
24ae0     C8 FD BF FD | 	call	#__system____builtin_memmove
24ae4                 | LR__3184
24ae4     57 7B 02 F6 | 	mov	result1, local05
24ae8     E7 F0 03 F6 | 	mov	ptra, fp
24aec     F2 00 A0 FD | 	call	#popregs_
24af0                 | __system___string_concat_ret
24af0     2D 00 64 FD | 	ret
24af4                 | 
24af4                 | __system___tx
24af4     02 CA 05 F6 | 	mov	COUNT_, #2
24af8     E8 00 A0 FD | 	call	#pushregs_
24afc     49 A7 02 F6 | 	mov	local01, arg01
24b00     0A A6 0E F2 | 	cmp	local01, #10 wz
24b04     18 00 90 5D |  if_ne	jmp	#LR__3190
24b08     08 68 06 F1 | 	add	ptr___system__dat__, #8
24b0c     34 A9 02 FB | 	rdlong	local02, ptr___system__dat__
24b10     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24b14     02 A8 CE F7 | 	test	local02, #2 wz
24b18     0D 92 06 56 |  if_ne	mov	arg01, #13
24b1c     FC FB BF 5D |  if_ne	call	#__system___txraw
24b20                 | LR__3190
24b20     53 93 02 F6 | 	mov	arg01, local01
24b24     F4 FB BF FD | 	call	#__system___txraw
24b28     E7 F0 03 F6 | 	mov	ptra, fp
24b2c     F2 00 A0 FD | 	call	#popregs_
24b30                 | __system___tx_ret
24b30     2D 00 64 FD | 	ret
24b34                 | 
24b34                 | __system___rx
24b34     01 CA 05 F6 | 	mov	COUNT_, #1
24b38     E8 00 A0 FD | 	call	#pushregs_
24b3c                 | LR__3200
24b3c     00 92 06 F6 | 	mov	arg01, #0
24b40     1C FC BF FD | 	call	#__system___rxraw
24b44     3D A7 02 F6 | 	mov	local01, result1
24b48     FF FF 7F FF 
24b4c     FF A7 0E F2 | 	cmp	local01, ##-1 wz
24b50     E8 FF 9F AD |  if_e	jmp	#LR__3200
24b54     0D A6 0E F2 | 	cmp	local01, #13 wz
24b58     14 00 90 5D |  if_ne	jmp	#LR__3201
24b5c     08 68 06 F1 | 	add	ptr___system__dat__, #8
24b60     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
24b64     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24b68     02 7A CE F7 | 	test	result1, #2 wz
24b6c     0A A6 06 56 |  if_ne	mov	local01, #10
24b70                 | LR__3201
24b70     08 68 06 F1 | 	add	ptr___system__dat__, #8
24b74     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
24b78     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24b7c     01 92 CE F7 | 	test	arg01, #1 wz
24b80     1C 00 90 AD |  if_e	jmp	#LR__3204
24b84     7F A6 0E F2 | 	cmp	local01, #127 wz
24b88     0C 00 90 5D |  if_ne	jmp	#LR__3202
24b8c     08 92 06 F6 | 	mov	arg01, #8
24b90     60 FF BF FD | 	call	#__system___tx
24b94     08 00 90 FD | 	jmp	#LR__3203
24b98                 | LR__3202
24b98     53 93 02 F6 | 	mov	arg01, local01
24b9c     54 FF BF FD | 	call	#__system___tx
24ba0                 | LR__3203
24ba0                 | LR__3204
24ba0     53 7B 02 F6 | 	mov	result1, local01
24ba4     E7 F0 03 F6 | 	mov	ptra, fp
24ba8     F2 00 A0 FD | 	call	#popregs_
24bac                 | __system___rx_ret
24bac     2D 00 64 FD | 	ret
24bb0                 | 
24bb0                 | __system___pinwrite
24bb0     49 81 02 F6 | 	mov	_var01, arg01
24bb4     1F 80 06 F5 | 	and	_var01, #31
24bb8     20 92 CE F7 | 	test	arg01, #32 wz
24bbc     06 92 46 F0 | 	shr	arg01, #6
24bc0     49 93 CA F9 | 	bmask	arg01, arg01
24bc4     40 93 62 F0 | 	shl	arg01, _var01
24bc8     40 95 62 F0 | 	shl	arg02, _var01
24bcc     1C 00 90 AD |  if_e	jmp	#LR__3210
24bd0     49 F7 43 F5 | 	or	dirb, arg01
24bd4     FD 81 02 F6 | 	mov	_var01, outb
24bd8     49 81 22 F5 | 	andn	_var01, arg01
24bdc     49 95 02 F5 | 	and	arg02, arg01
24be0     4A 81 42 F5 | 	or	_var01, arg02
24be4     40 FB 03 F6 | 	mov	outb, _var01
24be8     18 00 90 FD | 	jmp	#LR__3211
24bec                 | LR__3210
24bec     49 F5 43 F5 | 	or	dira, arg01
24bf0     FC 81 02 F6 | 	mov	_var01, outa
24bf4     49 81 22 F5 | 	andn	_var01, arg01
24bf8     49 95 02 F5 | 	and	arg02, arg01
24bfc     4A 81 42 F5 | 	or	_var01, arg02
24c00     40 F9 03 F6 | 	mov	outa, _var01
24c04                 | LR__3211
24c04                 | __system___pinwrite_ret
24c04     2D 00 64 FD | 	ret
24c08                 | 
24c08                 | __system___basic_read_line
24c08     06 CA 05 F6 | 	mov	COUNT_, #6
24c0c     E8 00 A0 FD | 	call	#pushregs_
24c10     49 A7 02 F6 | 	mov	local01, arg01
24c14     00 A8 06 F6 | 	mov	local02, #0
24c18     18 AA 06 F6 | 	mov	local03, #24
24c1c     00 AC 06 F6 | 	mov	local04, #0
24c20     18 92 06 F6 | 	mov	arg01, #24
24c24     DC 37 B0 FD | 	call	#__system___gc_alloc_managed
24c28     3D AF 0A F6 | 	mov	local05, result1 wz
24c2c     57 7B 02 A6 |  if_e	mov	result1, local05
24c30     B0 00 90 AD |  if_e	jmp	#LR__3223
24c34                 | LR__3220
24c34     53 93 02 F6 | 	mov	arg01, local01
24c38     78 0B B0 FD | 	call	#__system___basic_get_char
24c3c     3D B1 02 F6 | 	mov	local06, result1
24c40     01 B0 56 F2 | 	cmps	local06, #1 wc
24c44     8C 00 90 CD |  if_b	jmp	#LR__3222
24c48     0A B0 0E F2 | 	cmp	local06, #10 wz
24c4c     10 00 90 5D |  if_ne	jmp	#LR__3221
24c50     00 AC 0E F2 | 	cmp	local04, #0 wz
24c54     01 A8 56 52 |  if_ne	cmps	local02, #1 wc
24c58     01 A8 86 11 |  if_a	sub	local02, #1
24c5c     74 00 90 FD | 	jmp	#LR__3222
24c60                 | LR__3221
24c60     0D B0 0E F2 | 	cmp	local06, #13 wz
24c64     01 AC 06 A6 |  if_e	mov	local04, #1
24c68     00 AC 06 56 |  if_ne	mov	local04, #0
24c6c     08 B0 0E F2 | 	cmp	local06, #8 wz
24c70     7F B0 0E 52 |  if_ne	cmp	local06, #127 wz
24c74     01 A8 56 A2 |  if_e	cmps	local02, #1 wc
24c78     01 A8 86 21 |  if_nc_and_z	sub	local02, #1
24c7c     B4 FF 9F AD |  if_e	jmp	#LR__3220
24c80     57 97 02 F6 | 	mov	arg03, local05
24c84     54 97 02 F1 | 	add	arg03, local02
24c88     4B B1 42 FC | 	wrbyte	local06, arg03
24c8c     01 A8 06 F1 | 	add	local02, #1
24c90     55 A9 0A F2 | 	cmp	local02, local03 wz
24c94     9C FF 9F 5D |  if_ne	jmp	#LR__3220
24c98     55 93 02 F6 | 	mov	arg01, local03
24c9c     20 92 06 F1 | 	add	arg01, #32
24ca0     60 37 B0 FD | 	call	#__system___gc_alloc_managed
24ca4     3D B1 0A F6 | 	mov	local06, result1 wz
24ca8     58 7B 02 A6 |  if_e	mov	result1, local06
24cac     34 00 90 AD |  if_e	jmp	#LR__3223
24cb0     58 93 02 F6 | 	mov	arg01, local06
24cb4     57 95 02 F6 | 	mov	arg02, local05
24cb8     55 97 02 F6 | 	mov	arg03, local03
24cbc     EC FB BF FD | 	call	#__system____builtin_memmove
24cc0     20 AA 06 F1 | 	add	local03, #32
24cc4     57 93 02 F6 | 	mov	arg01, local05
24cc8     6C 38 B0 FD | 	call	#__system___gc_free
24ccc     58 AF 02 F6 | 	mov	local05, local06
24cd0     60 FF 9F FD | 	jmp	#LR__3220
24cd4                 | LR__3222
24cd4     57 B1 02 F6 | 	mov	local06, local05
24cd8     54 B1 02 F1 | 	add	local06, local02
24cdc     58 01 48 FC | 	wrbyte	#0, local06
24ce0     57 7B 02 F6 | 	mov	result1, local05
24ce4                 | LR__3223
24ce4     E7 F0 03 F6 | 	mov	ptra, fp
24ce8     F2 00 A0 FD | 	call	#popregs_
24cec                 | __system___basic_read_line_ret
24cec     2D 00 64 FD | 	ret
24cf0                 | 
24cf0                 | __system___waitms
24cf0     49 81 02 F6 | 	mov	_var01, arg01
24cf4     1A 82 62 FD | 	getct	_var02
24cf8     14 84 06 FB | 	rdlong	_var03, #20
24cfc     D7 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24d00                 | LR__3230
24d00     01 00 00 FF 
24d04     E8 81 56 F2 | 	cmps	_var01, ##1000 wc
24d08     1C 00 90 CD |  if_b	jmp	#LR__3232
24d0c     42 83 02 F1 | 	add	_var02, _var03
24d10     41 93 02 F6 | 	mov	arg01, _var02
24d14     00 92 66 FA | 	addct1	arg01, #0
24d18     24 22 60 FD | 	waitct1
24d1c     01 00 00 FF 
24d20     E8 81 86 F1 | 	sub	_var01, ##1000
24d24     D8 FF 9F FD | 	jmp	#LR__3230
24d28                 | LR__3231
24d28                 | LR__3232
24d28     01 80 56 F2 | 	cmps	_var01, #1 wc
24d2c     28 00 90 CD |  if_b	jmp	#LR__3233
24d30     42 81 02 FD | 	qmul	_var01, _var03
24d34     01 00 00 FF 
24d38     E8 97 06 F6 | 	mov	arg03, ##1000
24d3c     19 7A 62 FD | 	getqy	result1
24d40     18 92 62 FD | 	getqx	arg01
24d44     28 7A 62 FD | 	setq	result1
24d48     4B 93 12 FD | 	qdiv	arg01, arg03
24d4c     18 92 62 FD | 	getqx	arg01
24d50     41 93 62 FA | 	addct1	arg01, _var02
24d54     24 22 60 FD | 	waitct1
24d58                 | LR__3233
24d58                 | __system___waitms_ret
24d58     2D 00 64 FD | 	ret
24d5c                 | 
24d5c                 | __system___waitus
24d5c     49 81 02 F6 | 	mov	_var01, arg01
24d60     1A 82 62 FD | 	getct	_var02
24d64     14 84 06 FB | 	rdlong	_var03, #20
24d68     D7 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
24d6c                 | LR__3240
24d6c     A1 07 00 FF 
24d70     40 80 56 F2 | 	cmps	_var01, ##1000000 wc
24d74     1C 00 90 CD |  if_b	jmp	#LR__3242
24d78     42 83 02 F1 | 	add	_var02, _var03
24d7c     41 93 02 F6 | 	mov	arg01, _var02
24d80     00 92 66 FA | 	addct1	arg01, #0
24d84     24 22 60 FD | 	waitct1
24d88     A1 07 00 FF 
24d8c     40 80 86 F1 | 	sub	_var01, ##1000000
24d90     D8 FF 9F FD | 	jmp	#LR__3240
24d94                 | LR__3241
24d94                 | LR__3242
24d94     01 80 56 F2 | 	cmps	_var01, #1 wc
24d98     28 00 90 CD |  if_b	jmp	#LR__3243
24d9c     42 81 02 FD | 	qmul	_var01, _var03
24da0     A1 07 00 FF 
24da4     40 96 06 F6 | 	mov	arg03, ##1000000
24da8     19 7A 62 FD | 	getqy	result1
24dac     18 92 62 FD | 	getqx	arg01
24db0     28 7A 62 FD | 	setq	result1
24db4     4B 93 12 FD | 	qdiv	arg01, arg03
24db8     18 7A 62 FD | 	getqx	result1
24dbc     3D 83 62 FA | 	addct1	_var02, result1
24dc0     24 22 60 FD | 	waitct1
24dc4                 | LR__3243
24dc4                 | __system___waitus_ret
24dc4     2D 00 64 FD | 	ret
24dc8                 | 
24dc8                 | __system___mount
24dc8     09 CA 05 F6 | 	mov	COUNT_, #9
24dcc     E8 00 A0 FD | 	call	#pushregs_
24dd0     49 A7 02 F6 | 	mov	local01, arg01
24dd4     4A A9 0A F6 | 	mov	local02, arg02 wz
24dd8     01 AA 66 F6 | 	neg	local03, #1
24ddc     01 7A 66 A6 |  if_e	neg	result1, #1
24de0     9C 02 90 AD |  if_e	jmp	#LR__3265
24de4     53 7B C2 FA | 	rdbyte	result1, local01
24de8     2F 7A 0E F2 | 	cmp	result1, #47 wz
24dec     28 00 90 5D |  if_ne	jmp	#LR__3252
24df0     53 93 02 F6 | 	mov	arg01, local01
24df4     49 AD 02 F6 | 	mov	local04, arg01
24df8     D7 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
24dfc                 | LR__3250
24dfc     56 7B CA FA | 	rdbyte	result1, local04 wz
24e00     01 AC 06 51 |  if_ne	add	local04, #1
24e04     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
24e08                 | LR__3251
24e08     49 AD 82 F1 | 	sub	local04, arg01
24e0c     56 7B 02 F6 | 	mov	result1, local04
24e10     10 7A 56 F2 | 	cmps	result1, #16 wc
24e14     14 00 90 CD |  if_b	jmp	#LR__3253
24e18                 | LR__3252
24e18     20 68 06 F1 | 	add	ptr___system__dat__, #32
24e1c     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
24e20     20 68 86 F1 | 	sub	ptr___system__dat__, #32
24e24     01 7A 66 F6 | 	neg	result1, #1
24e28     54 02 90 FD | 	jmp	#LR__3265
24e2c                 | LR__3253
24e2c     00 AE 06 F6 | 	mov	local05, #0
24e30                 | LR__3254
24e30     04 AE 56 F2 | 	cmps	local05, #4 wc
24e34     B4 00 90 3D |  if_ae	jmp	#LR__3259
24e38     57 93 02 F6 | 	mov	arg01, local05
24e3c     02 92 66 F0 | 	shl	arg01, #2
24e40     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
24e44     64 7A 06 F1 | 	add	result1, #100
24e48     3D 93 02 F1 | 	add	arg01, result1
24e4c     49 7B 0A FB | 	rdlong	result1, arg01 wz
24e50     00 AA 56 A2 |  if_e	cmps	local03, #0 wc
24e54     57 AB 02 86 |  if_c_and_z	mov	local03, local05
24e58     88 00 90 8D |  if_c_and_z	jmp	#LR__3258
24e5c     57 93 02 F6 | 	mov	arg01, local05
24e60     02 92 66 F0 | 	shl	arg01, #2
24e64     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
24e68     64 AC 06 F1 | 	add	local04, #100
24e6c     56 93 02 F1 | 	add	arg01, local04
24e70     49 93 02 FB | 	rdlong	arg01, arg01
24e74     49 AD 02 F6 | 	mov	local04, arg01
24e78     D7 06 48 FB | 	callpa	#(@LR__3256-@LR__3255)>>2,fcache_load_ptr_
24e7c                 | LR__3255
24e7c     56 7B CA FA | 	rdbyte	result1, local04 wz
24e80     01 AC 06 51 |  if_ne	add	local04, #1
24e84     F4 FF 9F 5D |  if_ne	jmp	#LR__3255
24e88                 | LR__3256
24e88     49 AD 82 F1 | 	sub	local04, arg01
24e8c     56 7B 02 F6 | 	mov	result1, local04
24e90     3D B1 02 F6 | 	mov	local06, result1
24e94     58 93 02 F6 | 	mov	arg01, local06
24e98     53 93 02 F1 | 	add	arg01, local01
24e9c     49 AD C2 FA | 	rdbyte	local04, arg01
24ea0     2F AC 0E F2 | 	cmp	local04, #47 wz
24ea4     58 B3 02 56 |  if_ne	mov	local07, local06
24ea8     53 B3 02 51 |  if_ne	add	local07, local01
24eac     59 93 CA 5A |  if_ne	rdbyte	arg01, local07 wz
24eb0     30 00 90 5D |  if_ne	jmp	#LR__3257
24eb4     57 AD 02 F6 | 	mov	local04, local05
24eb8     02 AC 66 F0 | 	shl	local04, #2
24ebc     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
24ec0     64 96 06 F1 | 	add	arg03, #100
24ec4     4B AD 02 F1 | 	add	local04, arg03
24ec8     56 95 02 FB | 	rdlong	arg02, local04
24ecc     53 93 02 F6 | 	mov	arg01, local01
24ed0     58 97 02 F6 | 	mov	arg03, local06
24ed4     24 4A B0 FD | 	call	#__system__strncmp
24ed8     00 7A 0E F2 | 	cmp	result1, #0 wz
24edc     57 AB 02 A6 |  if_e	mov	local03, local05
24ee0     08 00 90 AD |  if_e	jmp	#LR__3259
24ee4                 | LR__3257
24ee4                 | LR__3258
24ee4     01 AE 06 F1 | 	add	local05, #1
24ee8     44 FF 9F FD | 	jmp	#LR__3254
24eec                 | LR__3259
24eec     FF FF 7F FF 
24ef0     FF AB 0E F2 | 	cmp	local03, ##-1 wz
24ef4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
24ef8     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
24efc     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
24f00     01 7A 66 A6 |  if_e	neg	result1, #1
24f04     78 01 90 AD |  if_e	jmp	#LR__3265
24f08     55 AF 02 F6 | 	mov	local05, local03
24f0c     57 B3 02 F6 | 	mov	local07, local05
24f10     02 B2 66 F0 | 	shl	local07, #2
24f14     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
24f18     74 B0 06 F1 | 	add	local06, #116
24f1c     58 B3 02 F1 | 	add	local07, local06
24f20     59 B1 0A FB | 	rdlong	local06, local07 wz
24f24     58 00 90 AD |  if_e	jmp	#LR__3260
24f28     4C B0 06 F1 | 	add	local06, #76
24f2c     58 B3 0A FB | 	rdlong	local07, local06 wz
24f30     4C B0 86 F1 | 	sub	local06, #76
24f34     48 00 90 AD |  if_e	jmp	#LR__3260
24f38     4C B0 06 F1 | 	add	local06, #76
24f3c     58 B3 02 FB | 	rdlong	local07, local06
24f40     59 AD 02 F6 | 	mov	local04, local07
24f44     13 B2 46 F7 | 	zerox	local07, #19
24f48     14 AC 46 F0 | 	shr	local04, #20
24f4c     02 AC 66 F0 | 	shl	local04, #2
24f50     2D AD 02 F1 | 	add	local04, __methods__
24f54     56 AD 02 FB | 	rdlong	local04, local04
24f58     57 B1 02 F6 | 	mov	local06, local05
24f5c     02 B0 66 F0 | 	shl	local06, #2
24f60     34 AB 02 F6 | 	mov	local03, ptr___system__dat__
24f64     64 AA 06 F1 | 	add	local03, #100
24f68     55 B1 02 F1 | 	add	local06, local03
24f6c     58 93 02 FB | 	rdlong	arg01, local06
24f70     32 B1 02 F6 | 	mov	local06, objptr
24f74     59 65 02 F6 | 	mov	objptr, local07
24f78     2D AC 62 FD | 	call	local04
24f7c     58 65 02 F6 | 	mov	objptr, local06
24f80                 | LR__3260
24f80     57 B1 02 F6 | 	mov	local06, local05
24f84     02 B0 66 F0 | 	shl	local06, #2
24f88     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f8c     74 B2 06 F1 | 	add	local07, #116
24f90     59 B1 02 F1 | 	add	local06, local07
24f94     58 A9 62 FC | 	wrlong	local02, local06
24f98     00 A8 0E F2 | 	cmp	local02, #0 wz
24f9c     18 00 90 5D |  if_ne	jmp	#LR__3261
24fa0     02 AE 66 F0 | 	shl	local05, #2
24fa4     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24fa8     64 B2 06 F1 | 	add	local07, #100
24fac     59 AF 02 F1 | 	add	local05, local07
24fb0     57 01 68 FC | 	wrlong	#0, local05
24fb4     C4 00 90 FD | 	jmp	#LR__3264
24fb8                 | LR__3261
24fb8     57 B5 02 F6 | 	mov	local08, local05
24fbc     04 B4 66 F0 | 	shl	local08, #4
24fc0     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24fc4     24 B2 06 F1 | 	add	local07, #36
24fc8     59 B5 02 F1 | 	add	local08, local07
24fcc     5A 93 02 F6 | 	mov	arg01, local08
24fd0     53 95 02 F6 | 	mov	arg02, local01
24fd4     10 96 06 F6 | 	mov	arg03, #16
24fd8     64 48 B0 FD | 	call	#__system__strncpy
24fdc     48 A8 06 F1 | 	add	local02, #72
24fe0     54 B3 0A FB | 	rdlong	local07, local02 wz
24fe4     48 A8 86 F1 | 	sub	local02, #72
24fe8     7C 00 90 AD |  if_e	jmp	#LR__3263
24fec     48 A8 06 F1 | 	add	local02, #72
24ff0     54 B3 02 FB | 	rdlong	local07, local02
24ff4     59 B7 02 F6 | 	mov	local09, local07
24ff8     13 B2 46 F7 | 	zerox	local07, #19
24ffc     14 B6 46 F0 | 	shr	local09, #20
25000     02 B6 66 F0 | 	shl	local09, #2
25004     2D B7 02 F1 | 	add	local09, __methods__
25008     5B B7 02 FB | 	rdlong	local09, local09
2500c     5A 93 02 F6 | 	mov	arg01, local08
25010     32 B1 02 F6 | 	mov	local06, objptr
25014     59 65 02 F6 | 	mov	objptr, local07
25018     2D B6 62 FD | 	call	local09
2501c     58 65 02 F6 | 	mov	objptr, local06
25020     3D 93 0A F6 | 	mov	arg01, result1 wz
25024     40 00 90 AD |  if_e	jmp	#LR__3262
25028     57 B5 02 F6 | 	mov	local08, local05
2502c     02 B4 66 F0 | 	shl	local08, #2
25030     74 68 06 F1 | 	add	ptr___system__dat__, #116
25034     34 B5 02 F1 | 	add	local08, ptr___system__dat__
25038     5A 01 68 FC | 	wrlong	#0, local08
2503c     02 AE 66 F0 | 	shl	local05, #2
25040     10 68 86 F1 | 	sub	ptr___system__dat__, #16
25044     34 AF 02 F1 | 	add	local05, ptr___system__dat__
25048     57 01 68 FC | 	wrlong	#0, local05
2504c     49 93 6A F6 | 	neg	arg01, arg01 wz
25050     44 68 86 F1 | 	sub	ptr___system__dat__, #68
25054     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
25058     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2505c     01 7A 66 56 |  if_ne	neg	result1, #1
25060     00 7A 06 A6 |  if_e	mov	result1, #0
25064     18 00 90 FD | 	jmp	#LR__3265
25068                 | LR__3262
25068                 | LR__3263
25068     02 AE 66 F0 | 	shl	local05, #2
2506c     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
25070     64 B2 06 F1 | 	add	local07, #100
25074     59 AF 02 F1 | 	add	local05, local07
25078     57 B5 62 FC | 	wrlong	local08, local05
2507c                 | LR__3264
2507c     00 7A 06 F6 | 	mov	result1, #0
25080                 | LR__3265
25080     E7 F0 03 F6 | 	mov	ptra, fp
25084     F2 00 A0 FD | 	call	#popregs_
25088                 | __system___mount_ret
25088     2D 00 64 FD | 	ret
2508c                 | 
2508c                 | __system___chdir
2508c     02 CA 05 F6 | 	mov	COUNT_, #2
25090     E8 00 A0 FD | 	call	#pushregs_
25094     44 F0 07 F1 | 	add	ptra, #68
25098     49 A7 02 F6 | 	mov	local01, arg01
2509c     E7 94 02 F6 | 	mov	arg02, fp
250a0     08 94 06 F1 | 	add	arg02, #8
250a4     53 93 02 F6 | 	mov	arg01, local01
250a8     D8 43 B0 FD | 	call	#__system__stat
250ac     00 7A 0E F2 | 	cmp	result1, #0 wz
250b0     88 00 90 5D |  if_ne	jmp	#LR__3272
250b4     10 CE 05 F1 | 	add	fp, #16
250b8     E7 92 02 FB | 	rdlong	arg01, fp
250bc     10 CE 85 F1 | 	sub	fp, #16
250c0     78 00 00 FF 
250c4     00 92 06 F5 | 	and	arg01, ##61440
250c8     08 00 00 FF 
250cc     00 92 0E F2 | 	cmp	arg01, ##4096 wz
250d0     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
250d4     34 1B 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
250d8     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
250dc     01 7A 66 56 |  if_ne	neg	result1, #1
250e0     58 00 90 5D |  if_ne	jmp	#LR__3272
250e4     53 97 C2 FA | 	rdbyte	arg03, local01
250e8     2F 96 0E F2 | 	cmp	arg03, #47 wz
250ec     18 00 90 5D |  if_ne	jmp	#LR__3270
250f0     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
250f4     84 92 06 F1 | 	add	arg01, #132
250f8     53 95 02 F6 | 	mov	arg02, local01
250fc     00 97 06 F6 | 	mov	arg03, #256
25100     3C 47 B0 FD | 	call	#__system__strncpy
25104     30 00 90 FD | 	jmp	#LR__3271
25108                 | LR__3270
25108     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
2510c     84 A9 06 F1 | 	add	local02, #388
25110     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
25114     84 94 06 F1 | 	add	arg02, #132
25118     54 93 02 F6 | 	mov	arg01, local02
2511c     00 97 06 F6 | 	mov	arg03, #256
25120     1C 47 B0 FD | 	call	#__system__strncpy
25124     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
25128     84 96 06 F1 | 	add	arg03, #132
2512c     54 93 02 F6 | 	mov	arg01, local02
25130     53 95 02 F6 | 	mov	arg02, local01
25134     10 00 B0 FD | 	call	#__system____getvfsforfile
25138                 | LR__3271
25138     00 7A 06 F6 | 	mov	result1, #0
2513c                 | LR__3272
2513c     E7 F0 03 F6 | 	mov	ptra, fp
25140     F2 00 A0 FD | 	call	#popregs_
25144                 | __system___chdir_ret
25144     2D 00 64 FD | 	ret
25148                 | 
25148                 | __system____getvfsforfile
25148     0E CA 05 F6 | 	mov	COUNT_, #14
2514c     E8 00 A0 FD | 	call	#pushregs_
25150     49 A7 02 F6 | 	mov	local01, arg01
25154     4A A9 02 F6 | 	mov	local02, arg02
25158     4B AB 02 F6 | 	mov	local03, arg03
2515c     D7 10 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
25160                 | LR__3280
25160     54 7B C2 FA | 	rdbyte	result1, local02
25164     2F 7A 0E F2 | 	cmp	result1, #47 wz
25168     01 A8 06 A1 |  if_e	add	local02, #1
2516c     54 AD C2 AA |  if_e	rdbyte	local04, local02
25170     01 A8 86 A1 |  if_e	sub	local02, #1
25174     2F AC 0E A2 |  if_e	cmp	local04, #47 wz
25178     01 A8 06 A1 |  if_e	add	local02, #1
2517c     E0 FF 9F AD |  if_e	jmp	#LR__3280
25180                 | LR__3281
25180     54 AD C2 FA | 	rdbyte	local04, local02
25184     2F AC 0E F2 | 	cmp	local04, #47 wz
25188     14 00 90 5D |  if_ne	jmp	#LR__3282
2518c     53 93 02 F6 | 	mov	arg01, local01
25190     54 95 02 F6 | 	mov	arg02, local02
25194     00 97 06 F6 | 	mov	arg03, #256
25198     A4 46 B0 FD | 	call	#__system__strncpy
2519c     78 00 90 FD | 	jmp	#LR__3284
251a0                 | LR__3282
251a0     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
251a4     84 94 06 F1 | 	add	arg02, #132
251a8     53 93 02 F6 | 	mov	arg01, local01
251ac     00 97 06 F6 | 	mov	arg03, #256
251b0     8C 46 B0 FD | 	call	#__system__strncpy
251b4     54 AD CA FA | 	rdbyte	local04, local02 wz
251b8     5C 00 90 AD |  if_e	jmp	#LR__3283
251bc     54 AD C2 FA | 	rdbyte	local04, local02
251c0     2E AC 0E F2 | 	cmp	local04, #46 wz
251c4     01 A8 06 A1 |  if_e	add	local02, #1
251c8     54 AF C2 AA |  if_e	rdbyte	local05, local02
251cc     01 A8 86 A1 |  if_e	sub	local02, #1
251d0     57 B1 02 A6 |  if_e	mov	local06, local05
251d4     07 B0 4E A7 |  if_e	zerox	local06, #7 wz
251d8     3C 00 90 AD |  if_e	jmp	#LR__3283
251dc     53 AF C2 FA | 	rdbyte	local05, local01
251e0     2F AE 0E F2 | 	cmp	local05, #47 wz
251e4     01 A6 06 A1 |  if_e	add	local01, #1
251e8     53 AD C2 AA |  if_e	rdbyte	local04, local01
251ec     01 A6 86 A1 |  if_e	sub	local01, #1
251f0     00 AC 4E A2 |  if_e	cmps	local04, #0 wz
251f4     92 01 00 5F 
251f8     D4 94 06 56 |  if_ne	mov	arg02, ##@LR__5460
251fc     53 93 02 56 |  if_ne	mov	arg01, local01
25200     00 97 06 56 |  if_ne	mov	arg03, #256
25204     90 46 B0 5D |  if_ne	call	#__system__strncat
25208     53 93 02 F6 | 	mov	arg01, local01
2520c     54 95 02 F6 | 	mov	arg02, local02
25210     00 97 06 F6 | 	mov	arg03, #256
25214     80 46 B0 FD | 	call	#__system__strncat
25218                 | LR__3283
25218                 | LR__3284
25218     53 93 02 F6 | 	mov	arg01, local01
2521c     3C 48 B0 FD | 	call	#__system___normalizeName
25220     53 AD CA FA | 	rdbyte	local04, local01 wz
25224     1C 00 90 AD |  if_e	jmp	#LR__3285
25228     53 AD C2 FA | 	rdbyte	local04, local01
2522c     2F AC 0E F2 | 	cmp	local04, #47 wz
25230     01 A6 06 A1 |  if_e	add	local01, #1
25234     53 B1 C2 AA |  if_e	rdbyte	local06, local01
25238     01 A6 86 A1 |  if_e	sub	local01, #1
2523c     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
25240     10 00 90 5D |  if_ne	jmp	#LR__3286
25244                 | LR__3285
25244     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
25248     01 00 00 FF 
2524c     84 7A 06 F1 | 	add	result1, ##644
25250     EC 01 90 FD | 	jmp	#LR__3300
25254                 | LR__3286
25254     00 B2 06 F6 | 	mov	local07, #0
25258                 | LR__3287
25258     04 B2 56 F2 | 	cmps	local07, #4 wc
2525c     CC 01 90 3D |  if_ae	jmp	#LR__3299
25260     59 B1 02 F6 | 	mov	local06, local07
25264     02 B0 66 F0 | 	shl	local06, #2
25268     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
2526c     64 AC 06 F1 | 	add	local04, #100
25270     56 B1 02 F1 | 	add	local06, local04
25274     58 B1 0A FB | 	rdlong	local06, local06 wz
25278     A8 01 90 AD |  if_e	jmp	#LR__3298
2527c     59 AD 02 F6 | 	mov	local04, local07
25280     02 AC 66 F0 | 	shl	local04, #2
25284     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
25288     64 B0 06 F1 | 	add	local06, #100
2528c     58 AD 02 F1 | 	add	local04, local06
25290     56 93 02 FB | 	rdlong	arg01, local04
25294     49 B5 02 F6 | 	mov	local08, arg01
25298     D7 06 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
2529c                 | LR__3288
2529c     5A 7B CA FA | 	rdbyte	result1, local08 wz
252a0     01 B4 06 51 |  if_ne	add	local08, #1
252a4     F4 FF 9F 5D |  if_ne	jmp	#LR__3288
252a8                 | LR__3289
252a8     49 B5 82 F1 | 	sub	local08, arg01
252ac     5A B7 02 F6 | 	mov	local09, local08
252b0     5B AD 02 F6 | 	mov	local04, local09
252b4     53 AD 02 F1 | 	add	local04, local01
252b8     56 B1 C2 FA | 	rdbyte	local06, local04
252bc     2F B0 0E F2 | 	cmp	local06, #47 wz
252c0     5B B9 02 56 |  if_ne	mov	local10, local09
252c4     53 B9 02 51 |  if_ne	add	local10, local01
252c8     5C AF CA 5A |  if_ne	rdbyte	local05, local10 wz
252cc     54 01 90 5D |  if_ne	jmp	#LR__3297
252d0     59 AD 02 F6 | 	mov	local04, local07
252d4     02 AC 66 F0 | 	shl	local04, #2
252d8     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
252dc     64 96 06 F1 | 	add	arg03, #100
252e0     4B AD 02 F1 | 	add	local04, arg03
252e4     56 95 02 FB | 	rdlong	arg02, local04
252e8     5B 97 02 F6 | 	mov	arg03, local09
252ec     53 93 02 F6 | 	mov	arg01, local01
252f0     08 46 B0 FD | 	call	#__system__strncmp
252f4     00 7A 4E F2 | 	cmps	result1, #0 wz
252f8     28 01 90 5D |  if_ne	jmp	#LR__3297
252fc     59 BB 02 F6 | 	mov	local11, local07
25300     02 BA 66 F0 | 	shl	local11, #2
25304     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25308     74 AC 06 F1 | 	add	local04, #116
2530c     56 BB 02 F1 | 	add	local11, local04
25310     5D BD 02 FB | 	rdlong	local12, local11
25314     D7 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
25318                 | LR__3290
25318     5B B1 02 F6 | 	mov	local06, local09
2531c     01 B0 06 F1 | 	add	local06, #1
25320     53 B1 02 F1 | 	add	local06, local01
25324     58 BB C2 FA | 	rdbyte	local11, local06
25328     2E BA 0E F2 | 	cmp	local11, #46 wz
2532c     2C 00 90 5D |  if_ne	jmp	#LR__3292
25330     5B BB 02 F6 | 	mov	local11, local09
25334     02 BA 06 F1 | 	add	local11, #2
25338     53 BB 02 F1 | 	add	local11, local01
2533c     5D B9 C2 FA | 	rdbyte	local10, local11
25340     2F B8 0E F2 | 	cmp	local10, #47 wz
25344     5B BF 02 56 |  if_ne	mov	local13, local09
25348     02 BE 06 51 |  if_ne	add	local13, #2
2534c     53 BF 02 51 |  if_ne	add	local13, local01
25350     5F C1 CA 5A |  if_ne	rdbyte	local14, local13 wz
25354     01 B6 06 A1 |  if_e	add	local09, #1
25358     BC FF 9F AD |  if_e	jmp	#LR__3290
2535c                 | LR__3291
2535c                 | LR__3292
2535c     00 AA 0E F2 | 	cmp	local03, #0 wz
25360     55 93 02 56 |  if_ne	mov	arg01, local03
25364     53 95 02 56 |  if_ne	mov	arg02, local01
25368     00 97 06 56 |  if_ne	mov	arg03, #256
2536c     D0 44 B0 5D |  if_ne	call	#__system__strncpy
25370     53 95 02 F6 | 	mov	arg02, local01
25374     5B 95 02 F1 | 	add	arg02, local09
25378     01 94 06 F1 | 	add	arg02, #1
2537c     53 93 02 F6 | 	mov	arg01, local01
25380     2C F6 BF FD | 	call	#__system____builtin_strcpy
25384     53 93 02 F6 | 	mov	arg01, local01
25388     49 B5 02 F6 | 	mov	local08, arg01
2538c     D7 06 48 FB | 	callpa	#(@LR__3294-@LR__3293)>>2,fcache_load_ptr_
25390                 | LR__3293
25390     5A 7B CA FA | 	rdbyte	result1, local08 wz
25394     01 B4 06 51 |  if_ne	add	local08, #1
25398     F4 FF 9F 5D |  if_ne	jmp	#LR__3293
2539c                 | LR__3294
2539c     49 B5 82 F1 | 	sub	local08, arg01
253a0     5A B7 02 F6 | 	mov	local09, local08
253a4                 | LR__3295
253a4     01 B6 56 F2 | 	cmps	local09, #1 wc
253a8     70 00 90 CD |  if_b	jmp	#LR__3296
253ac     5B AD 02 F6 | 	mov	local04, local09
253b0     53 AD 02 F1 | 	add	local04, local01
253b4     56 BB C2 FA | 	rdbyte	local11, local04
253b8     2F BA 0E F2 | 	cmp	local11, #47 wz
253bc     5B BB 02 A6 |  if_e	mov	local11, local09
253c0     53 BB 02 A1 |  if_e	add	local11, local01
253c4     5D 01 48 AC |  if_e	wrbyte	#0, local11
253c8     01 B6 86 A1 |  if_e	sub	local09, #1
253cc     D4 FF 9F AD |  if_e	jmp	#LR__3295
253d0     5B AD 02 F6 | 	mov	local04, local09
253d4     53 AD 02 F1 | 	add	local04, local01
253d8     56 BB C2 FA | 	rdbyte	local11, local04
253dc     2E BA 0E F2 | 	cmp	local11, #46 wz
253e0     38 00 90 5D |  if_ne	jmp	#LR__3296
253e4     02 B6 56 F2 | 	cmps	local09, #2 wc
253e8     30 00 90 CD |  if_b	jmp	#LR__3296
253ec     5B C1 02 F6 | 	mov	local14, local09
253f0     01 C0 86 F1 | 	sub	local14, #1
253f4     53 C1 02 F1 | 	add	local14, local01
253f8     60 AF C2 FA | 	rdbyte	local05, local14
253fc     2F AE 0E F2 | 	cmp	local05, #47 wz
25400     18 00 90 5D |  if_ne	jmp	#LR__3296
25404     5B AD 02 F6 | 	mov	local04, local09
25408     01 AC 86 F1 | 	sub	local04, #1
2540c     53 AD 02 F1 | 	add	local04, local01
25410     56 01 48 FC | 	wrbyte	#0, local04
25414     02 B6 86 F1 | 	sub	local09, #2
25418     88 FF 9F FD | 	jmp	#LR__3295
2541c                 | LR__3296
2541c     5E 7B 02 F6 | 	mov	result1, local12
25420     1C 00 90 FD | 	jmp	#LR__3300
25424                 | LR__3297
25424                 | LR__3298
25424     01 B2 06 F1 | 	add	local07, #1
25428     2C FE 9F FD | 	jmp	#LR__3287
2542c                 | LR__3299
2542c     02 00 00 FF 
25430     28 69 06 F1 | 	add	ptr___system__dat__, ##1320
25434     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
25438     02 00 00 FF 
2543c     28 69 86 F1 | 	sub	ptr___system__dat__, ##1320
25440                 | LR__3300
25440     E7 F0 03 F6 | 	mov	ptra, fp
25444     F2 00 A0 FD | 	call	#popregs_
25448                 | __system____getvfsforfile_ret
25448     2D 00 64 FD | 	ret
2544c                 | 
2544c                 | __system___basic_open
2544c     05 CA 05 F6 | 	mov	COUNT_, #5
25450     E8 00 A0 FD | 	call	#pushregs_
25454     4A A7 02 F6 | 	mov	local01, arg02
25458     4B A9 02 F6 | 	mov	local02, arg03
2545c     4C AB 02 F6 | 	mov	local03, arg04
25460     00 AC 06 F6 | 	mov	local04, #0
25464     B4 43 B0 FD | 	call	#__system____getftab
25468     3D AF 0A F6 | 	mov	local05, result1 wz
2546c     18 00 90 5D |  if_ne	jmp	#LR__3310
25470     2E 93 02 F6 | 	mov	arg01, abortchain
25474     0C 94 06 F6 | 	mov	arg02, #12
25478     01 96 06 F6 | 	mov	arg03, #1
2547c     1A 01 A0 FD | 	call	#__longjmp
25480     01 7A 66 F6 | 	neg	result1, #1
25484     18 01 90 FD | 	jmp	#LR__3319
25488                 | LR__3310
25488     08 AE 06 F1 | 	add	local05, #8
2548c     57 7B 0A FB | 	rdlong	result1, local05 wz
25490     08 AE 86 F1 | 	sub	local05, #8
25494     57 93 02 56 |  if_ne	mov	arg01, local05
25498     D8 3A B0 5D |  if_ne	call	#__system___closeraw
2549c     00 A6 0E F2 | 	cmp	local01, #0 wz
254a0     00 A8 0E A2 |  if_e	cmp	local02, #0 wz
254a4     00 AA 0E A2 |  if_e	cmp	local03, #0 wz
254a8     3C 00 90 AD |  if_e	jmp	#LR__3312
254ac     0C 92 06 F6 | 	mov	arg01, #12
254b0     50 2F B0 FD | 	call	#__system___gc_alloc_managed
254b4     3D AD 0A F6 | 	mov	local04, result1 wz
254b8     18 00 90 5D |  if_ne	jmp	#LR__3311
254bc     2E 93 02 F6 | 	mov	arg01, abortchain
254c0     07 94 06 F6 | 	mov	arg02, #7
254c4     01 96 06 F6 | 	mov	arg03, #1
254c8     1A 01 A0 FD | 	call	#__longjmp
254cc     01 7A 66 F6 | 	neg	result1, #1
254d0     CC 00 90 FD | 	jmp	#LR__3319
254d4                 | LR__3311
254d4     56 01 68 FC | 	wrlong	#0, local04
254d8     04 AC 06 F1 | 	add	local04, #4
254dc     56 01 68 FC | 	wrlong	#0, local04
254e0     04 AC 86 F1 | 	sub	local04, #4
254e4     57 AD 62 FC | 	wrlong	local04, local05
254e8                 | LR__3312
254e8     00 A6 0E F2 | 	cmp	local01, #0 wz
254ec     20 00 90 AD |  if_e	jmp	#LR__3313
254f0     56 A7 62 FC | 	wrlong	local01, local04
254f4     56 7B 02 F6 | 	mov	result1, local04
254f8     00 70 05 FF 
254fc     00 7A 46 F5 | 	or	result1, ##182452224
25500     1C AE 06 F1 | 	add	local05, #28
25504     57 7B 62 FC | 	wrlong	result1, local05
25508     1C AE 86 F1 | 	sub	local05, #28
2550c     0C 00 90 FD | 	jmp	#LR__3314
25510                 | LR__3313
25510     1C AE 06 F1 | 	add	local05, #28
25514     57 01 68 FC | 	wrlong	#0, local05
25518     1C AE 86 F1 | 	sub	local05, #28
2551c                 | LR__3314
2551c     00 A8 0E F2 | 	cmp	local02, #0 wz
25520     28 00 90 AD |  if_e	jmp	#LR__3315
25524     04 AC 06 F1 | 	add	local04, #4
25528     56 A9 62 FC | 	wrlong	local02, local04
2552c     04 AC 86 F1 | 	sub	local04, #4
25530     56 7B 02 F6 | 	mov	result1, local04
25534     00 78 05 FF 
25538     00 7A 46 F5 | 	or	result1, ##183500800
2553c     20 AE 06 F1 | 	add	local05, #32
25540     57 7B 62 FC | 	wrlong	result1, local05
25544     20 AE 86 F1 | 	sub	local05, #32
25548     0C 00 90 FD | 	jmp	#LR__3316
2554c                 | LR__3315
2554c     20 AE 06 F1 | 	add	local05, #32
25550     57 01 68 FC | 	wrlong	#0, local05
25554     20 AE 86 F1 | 	sub	local05, #32
25558                 | LR__3316
25558     00 AA 0E F2 | 	cmp	local03, #0 wz
2555c     24 00 90 AD |  if_e	jmp	#LR__3317
25560     08 AC 06 F1 | 	add	local04, #8
25564     56 AB 62 FC | 	wrlong	local03, local04
25568     08 AC 86 F1 | 	sub	local04, #8
2556c     00 80 05 FF 
25570     00 AC 46 F5 | 	or	local04, ##184549376
25574     24 AE 06 F1 | 	add	local05, #36
25578     57 AD 62 FC | 	wrlong	local04, local05
2557c     24 AE 86 F1 | 	sub	local05, #36
25580     0C 00 90 FD | 	jmp	#LR__3318
25584                 | LR__3317
25584     24 AE 06 F1 | 	add	local05, #36
25588     57 01 68 FC | 	wrlong	#0, local05
2558c     24 AE 86 F1 | 	sub	local05, #36
25590                 | LR__3318
25590     08 AE 06 F1 | 	add	local05, #8
25594     40 00 80 FF 
25598     57 07 68 FC | 	wrlong	##32771, local05
2559c     00 7A 06 F6 | 	mov	result1, #0
255a0                 | LR__3319
255a0     E7 F0 03 F6 | 	mov	ptra, fp
255a4     F2 00 A0 FD | 	call	#popregs_
255a8                 | __system___basic_open_ret
255a8     2D 00 64 FD | 	ret
255ac                 | 
255ac                 | __system___basic_open_string
255ac     04 CA 05 F6 | 	mov	COUNT_, #4
255b0     E8 00 A0 FD | 	call	#pushregs_
255b4     4A A7 02 F6 | 	mov	local01, arg02
255b8     4B A9 02 F6 | 	mov	local02, arg03
255bc     5C 42 B0 FD | 	call	#__system____getftab
255c0     3D AB 0A F6 | 	mov	local03, result1 wz
255c4     18 00 90 5D |  if_ne	jmp	#LR__3320
255c8     2E 93 02 F6 | 	mov	arg01, abortchain
255cc     0C 94 06 F6 | 	mov	arg02, #12
255d0     01 96 06 F6 | 	mov	arg03, #1
255d4     1A 01 A0 FD | 	call	#__longjmp
255d8     01 7A 66 F6 | 	neg	result1, #1
255dc     58 00 90 FD | 	jmp	#LR__3322
255e0                 | LR__3320
255e0     08 AA 06 F1 | 	add	local03, #8
255e4     55 99 0A FB | 	rdlong	arg04, local03 wz
255e8     08 AA 86 F1 | 	sub	local03, #8
255ec     55 93 02 56 |  if_ne	mov	arg01, local03
255f0     80 39 B0 5D |  if_ne	call	#__system___closeraw
255f4     53 95 02 F6 | 	mov	arg02, local01
255f8     54 97 02 F6 | 	mov	arg03, local02
255fc     55 93 02 F6 | 	mov	arg01, local03
25600     B6 99 06 F6 | 	mov	arg04, #438
25604     1C 36 B0 FD | 	call	#__system___openraw
25608     3D AD 02 F6 | 	mov	local04, result1
2560c     00 AC 56 F2 | 	cmps	local04, #0 wc
25610     20 00 90 3D |  if_ae	jmp	#LR__3321
25614     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
25618     20 7A 06 F1 | 	add	result1, #32
2561c     2E 93 02 F6 | 	mov	arg01, abortchain
25620     3D 95 02 FB | 	rdlong	arg02, result1
25624     01 96 06 F6 | 	mov	arg03, #1
25628     1A 01 A0 FD | 	call	#__longjmp
2562c     01 7A 66 F6 | 	neg	result1, #1
25630     04 00 90 FD | 	jmp	#LR__3322
25634                 | LR__3321
25634     56 7B 02 F6 | 	mov	result1, local04
25638                 | LR__3322
25638     E7 F0 03 F6 | 	mov	ptra, fp
2563c     F2 00 A0 FD | 	call	#popregs_
25640                 | __system___basic_open_string_ret
25640     2D 00 64 FD | 	ret
25644                 | 
25644                 | __system___find_free_file
25644     34 81 02 F6 | 	mov	_var01, ptr___system__dat__
25648     02 00 00 FF 
2564c     2C 81 06 F1 | 	add	_var01, ##1324
25650     00 82 06 F6 | 	mov	_var02, #0
25654     D7 12 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
25658                 | LR__3330
25658     0A 82 56 F2 | 	cmps	_var02, #10 wc
2565c     1C 00 90 3D |  if_ae	jmp	#LR__3332
25660     34 82 06 FD | 	qmul	_var02, #52
25664     18 7A 62 FD | 	getqx	result1
25668     40 7B 02 F1 | 	add	result1, _var01
2566c     08 7A 06 F1 | 	add	result1, #8
25670     3D 7B 0A FB | 	rdlong	result1, result1 wz
25674     01 82 06 51 |  if_ne	add	_var02, #1
25678     DC FF 9F 5D |  if_ne	jmp	#LR__3330
2567c                 | LR__3331
2567c                 | LR__3332
2567c     0A 82 0E F2 | 	cmp	_var02, #10 wz
25680     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
25684     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25688     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2568c     01 7A 66 A6 |  if_e	neg	result1, #1
25690     41 7B 02 56 |  if_ne	mov	result1, _var02
25694                 | __system___find_free_file_ret
25694     2D 00 64 FD | 	ret
25698                 | 
25698                 | __system___basic_print_char
25698     03 CA 05 F6 | 	mov	COUNT_, #3
2569c     E8 00 A0 FD | 	call	#pushregs_
256a0     4A A7 02 F6 | 	mov	local01, arg02
256a4     20 49 B0 FD | 	call	#__system___gettxfunc
256a8     3D A9 0A F6 | 	mov	local02, result1 wz
256ac     00 7A 06 A6 |  if_e	mov	result1, #0
256b0     30 00 90 AD |  if_e	jmp	#LR__3340
256b4     54 AB 02 F6 | 	mov	local03, local02
256b8     13 A8 46 F7 | 	zerox	local02, #19
256bc     14 AA 46 F0 | 	shr	local03, #20
256c0     02 AA 66 F0 | 	shl	local03, #2
256c4     2D AB 02 F1 | 	add	local03, __methods__
256c8     55 AB 02 FB | 	rdlong	local03, local03
256cc     53 93 02 F6 | 	mov	arg01, local01
256d0     32 A7 02 F6 | 	mov	local01, objptr
256d4     54 65 02 F6 | 	mov	objptr, local02
256d8     2D AA 62 FD | 	call	local03
256dc     53 65 02 F6 | 	mov	objptr, local01
256e0     01 7A 06 F6 | 	mov	result1, #1
256e4                 | LR__3340
256e4     E7 F0 03 F6 | 	mov	ptra, fp
256e8     F2 00 A0 FD | 	call	#popregs_
256ec                 | __system___basic_print_char_ret
256ec     2D 00 64 FD | 	ret
256f0                 | 
256f0                 | __system___basic_print_string
256f0     03 CA 05 F6 | 	mov	COUNT_, #3
256f4     E8 00 A0 FD | 	call	#pushregs_
256f8     4A A7 02 F6 | 	mov	local01, arg02
256fc     4B A9 02 F6 | 	mov	local02, arg03
25700     C4 48 B0 FD | 	call	#__system___gettxfunc
25704     3D AB 0A F6 | 	mov	local03, result1 wz
25708     00 7A 06 A6 |  if_e	mov	result1, #0
2570c     18 00 90 AD |  if_e	jmp	#LR__3350
25710     00 A6 0E F2 | 	cmp	local01, #0 wz
25714     00 7A 06 A6 |  if_e	mov	result1, #0
25718     55 93 02 56 |  if_ne	mov	arg01, local03
2571c     54 95 02 56 |  if_ne	mov	arg02, local02
25720     53 97 02 56 |  if_ne	mov	arg03, local01
25724     FC 01 B0 5D |  if_ne	call	#__system___fmtstr
25728                 | LR__3350
25728     E7 F0 03 F6 | 	mov	ptra, fp
2572c     F2 00 A0 FD | 	call	#popregs_
25730                 | __system___basic_print_string_ret
25730     2D 00 64 FD | 	ret
25734                 | 
25734                 | __system___basic_print_integer
25734     04 CA 05 F6 | 	mov	COUNT_, #4
25738     E8 00 A0 FD | 	call	#pushregs_
2573c     4A A7 02 F6 | 	mov	local01, arg02
25740     4B A9 02 F6 | 	mov	local02, arg03
25744     4C AB 02 F6 | 	mov	local03, arg04
25748     7C 48 B0 FD | 	call	#__system___gettxfunc
2574c     3D AD 0A F6 | 	mov	local04, result1 wz
25750     00 7A 06 A6 |  if_e	mov	result1, #0
25754     56 93 02 56 |  if_ne	mov	arg01, local04
25758     54 95 02 56 |  if_ne	mov	arg02, local02
2575c     53 97 02 56 |  if_ne	mov	arg03, local01
25760     55 99 02 56 |  if_ne	mov	arg04, local03
25764     A8 02 B0 5D |  if_ne	call	#__system___fmtnum
25768     E7 F0 03 F6 | 	mov	ptra, fp
2576c     F2 00 A0 FD | 	call	#popregs_
25770                 | __system___basic_print_integer_ret
25770     2D 00 64 FD | 	ret
25774                 | 
25774                 | __system___basic_print_unsigned
25774     03 CA 05 F6 | 	mov	COUNT_, #3
25778     E8 00 A0 FD | 	call	#pushregs_
2577c     4A A7 02 F6 | 	mov	local01, arg02
25780     4B A9 02 F6 | 	mov	local02, arg03
25784     4C AB 02 F6 | 	mov	local03, arg04
25788     3C 48 B0 FD | 	call	#__system___gettxfunc
2578c     3D 93 0A F6 | 	mov	arg01, result1 wz
25790     00 7A 06 A6 |  if_e	mov	result1, #0
25794     3A A8 26 54 |  if_ne	bith	local02, #58
25798     54 95 02 56 |  if_ne	mov	arg02, local02
2579c     53 97 02 56 |  if_ne	mov	arg03, local01
257a0     55 99 02 56 |  if_ne	mov	arg04, local03
257a4     68 02 B0 5D |  if_ne	call	#__system___fmtnum
257a8     E7 F0 03 F6 | 	mov	ptra, fp
257ac     F2 00 A0 FD | 	call	#popregs_
257b0                 | __system___basic_print_unsigned_ret
257b0     2D 00 64 FD | 	ret
257b4                 | 
257b4                 | __system___basic_get_char
257b4     03 CA 05 F6 | 	mov	COUNT_, #3
257b8     E8 00 A0 FD | 	call	#pushregs_
257bc     4C 48 B0 FD | 	call	#__system___getrxfunc
257c0     3D A7 0A F6 | 	mov	local01, result1 wz
257c4     01 7A 66 A6 |  if_e	neg	result1, #1
257c8     28 00 90 AD |  if_e	jmp	#LR__3360
257cc     53 A9 02 F6 | 	mov	local02, local01
257d0     13 A6 46 F7 | 	zerox	local01, #19
257d4     14 A8 46 F0 | 	shr	local02, #20
257d8     02 A8 66 F0 | 	shl	local02, #2
257dc     2D A9 02 F1 | 	add	local02, __methods__
257e0     54 A9 02 FB | 	rdlong	local02, local02
257e4     32 AB 02 F6 | 	mov	local03, objptr
257e8     53 65 02 F6 | 	mov	objptr, local01
257ec     2D A8 62 FD | 	call	local02
257f0     55 65 02 F6 | 	mov	objptr, local03
257f4                 | LR__3360
257f4     E7 F0 03 F6 | 	mov	ptra, fp
257f8     F2 00 A0 FD | 	call	#popregs_
257fc                 | __system___basic_get_char_ret
257fc     2D 00 64 FD | 	ret
25800                 | 
25800                 | __system___basic_put
25800     04 CA 05 F6 | 	mov	COUNT_, #4
25804     E8 00 A0 FD | 	call	#pushregs_
25808     4D A7 02 F6 | 	mov	local01, arg05
2580c     53 99 02 FD | 	qmul	arg04, local01
25810     49 A9 02 F6 | 	mov	local02, arg01
25814     4B AB 02 F6 | 	mov	local03, arg03
25818     00 94 0E F2 | 	cmp	arg02, #0 wz
2581c     18 AC 62 FD | 	getqx	local04
25820     18 00 90 AD |  if_e	jmp	#LR__3370
25824     01 94 86 F1 | 	sub	arg02, #1
25828     4A 97 02 F6 | 	mov	arg03, arg02
2582c     1F 96 C6 F0 | 	sar	arg03, #31
25830     54 93 02 F6 | 	mov	arg01, local02
25834     00 98 06 F6 | 	mov	arg04, #0
25838     E4 3D B0 FD | 	call	#__system__lseek
2583c                 | LR__3370
2583c     55 95 02 F6 | 	mov	arg02, local03
25840     56 97 02 F6 | 	mov	arg03, local04
25844     54 93 02 F6 | 	mov	arg01, local02
25848     FC 3C B0 FD | 	call	#__system__write
2584c     3D AD 02 F6 | 	mov	local04, result1
25850     01 AC 56 F2 | 	cmps	local04, #1 wc
25854     10 00 90 CD |  if_b	jmp	#LR__3371
25858     56 0F 03 F6 | 	mov	muldiva_, local04
2585c     53 11 03 F6 | 	mov	muldivb_, local01
25860     FA 00 A0 FD | 	call	#divide_
25864     88 AD 02 F6 | 	mov	local04, muldivb_
25868                 | LR__3371
25868     56 7B 02 F6 | 	mov	result1, local04
2586c     E7 F0 03 F6 | 	mov	ptra, fp
25870     F2 00 A0 FD | 	call	#popregs_
25874                 | __system___basic_put_ret
25874     2D 00 64 FD | 	ret
25878                 | 
25878                 | __system___basic_get
25878     04 CA 05 F6 | 	mov	COUNT_, #4
2587c     E8 00 A0 FD | 	call	#pushregs_
25880     4D A7 02 F6 | 	mov	local01, arg05
25884     53 99 02 FD | 	qmul	arg04, local01
25888     49 A9 02 F6 | 	mov	local02, arg01
2588c     4B AB 02 F6 | 	mov	local03, arg03
25890     00 94 0E F2 | 	cmp	arg02, #0 wz
25894     18 AC 62 FD | 	getqx	local04
25898     18 00 90 AD |  if_e	jmp	#LR__3380
2589c     01 94 86 F1 | 	sub	arg02, #1
258a0     4A 97 02 F6 | 	mov	arg03, arg02
258a4     1F 96 C6 F0 | 	sar	arg03, #31
258a8     54 93 02 F6 | 	mov	arg01, local02
258ac     00 98 06 F6 | 	mov	arg04, #0
258b0     6C 3D B0 FD | 	call	#__system__lseek
258b4                 | LR__3380
258b4     55 95 02 F6 | 	mov	arg02, local03
258b8     56 97 02 F6 | 	mov	arg03, local04
258bc     54 93 02 F6 | 	mov	arg01, local02
258c0     CC 3C B0 FD | 	call	#__system__read
258c4     3D AD 02 F6 | 	mov	local04, result1
258c8     01 AC 56 F2 | 	cmps	local04, #1 wc
258cc     10 00 90 CD |  if_b	jmp	#LR__3381
258d0     56 0F 03 F6 | 	mov	muldiva_, local04
258d4     53 11 03 F6 | 	mov	muldivb_, local01
258d8     FA 00 A0 FD | 	call	#divide_
258dc     88 AD 02 F6 | 	mov	local04, muldivb_
258e0                 | LR__3381
258e0     56 7B 02 F6 | 	mov	result1, local04
258e4     E7 F0 03 F6 | 	mov	ptra, fp
258e8     F2 00 A0 FD | 	call	#popregs_
258ec                 | __system___basic_get_ret
258ec     2D 00 64 FD | 	ret
258f0                 | 
258f0                 | __system___fmtchar
258f0     00 CA 05 F6 | 	mov	COUNT_, #0
258f4     E8 00 A0 FD | 	call	#pushregs_
258f8     10 F0 07 F1 | 	add	ptra, #16
258fc     0C CE 05 F1 | 	add	fp, #12
25900     E7 96 62 FC | 	wrlong	arg03, fp
25904     4B 97 E2 F8 | 	getbyte	arg03, arg03, #0
25908     E7 96 62 FC | 	wrlong	arg03, fp
2590c     E7 96 02 F6 | 	mov	arg03, fp
25910     0C CE 85 F1 | 	sub	fp, #12
25914     0C 00 B0 FD | 	call	#__system___fmtstr
25918     E7 F0 03 F6 | 	mov	ptra, fp
2591c     F2 00 A0 FD | 	call	#popregs_
25920                 | __system___fmtchar_ret
25920     2D 00 64 FD | 	ret
25924                 | 
25924                 | __system___fmtstr
25924     09 CA 05 F6 | 	mov	COUNT_, #9
25928     E8 00 A0 FD | 	call	#pushregs_
2592c     49 A7 02 F6 | 	mov	local01, arg01
25930     4A A9 02 F6 | 	mov	local02, arg02
25934     4B AB 02 F6 | 	mov	local03, arg03
25938     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2593c     55 93 02 F6 | 	mov	arg01, local03
25940     49 AD 02 F6 | 	mov	local04, arg01
25944     D7 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
25948                 | LR__3390
25948     56 7B CA FA | 	rdbyte	result1, local04 wz
2594c     01 AC 06 51 |  if_ne	add	local04, #1
25950     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
25954                 | LR__3391
25954     49 AD 82 F1 | 	sub	local04, arg01
25958     00 98 0E F2 | 	cmp	arg04, #0 wz
2595c     4C AD 7A 53 |  if_ne	fles	local04, arg04 wcz
25960     54 95 02 F6 | 	mov	arg02, local02
25964     56 97 02 F6 | 	mov	arg03, local04
25968     53 93 02 F6 | 	mov	arg01, local01
2596c     02 98 06 F6 | 	mov	arg04, #2
25970     AC 42 B0 FD | 	call	#__system___fmtpad
25974     3D AF 02 F6 | 	mov	local05, result1
25978     00 AE 56 F2 | 	cmps	local05, #0 wc
2597c     57 7B 02 C6 |  if_b	mov	result1, local05
25980     80 00 90 CD |  if_b	jmp	#LR__3394
25984     01 AC 56 F2 | 	cmps	local04, #1 wc
25988     50 00 90 CD |  if_b	jmp	#LR__3393
2598c     56 B1 02 F6 | 	mov	local06, local04
25990                 | LR__3392
25990     53 B3 02 F6 | 	mov	local07, local01
25994     53 B5 02 F6 | 	mov	local08, local01
25998     13 B2 46 F7 | 	zerox	local07, #19
2599c     14 B4 46 F0 | 	shr	local08, #20
259a0     02 B4 66 F0 | 	shl	local08, #2
259a4     2D B5 02 F1 | 	add	local08, __methods__
259a8     5A B5 02 FB | 	rdlong	local08, local08
259ac     55 93 C2 FA | 	rdbyte	arg01, local03
259b0     32 B7 02 F6 | 	mov	local09, objptr
259b4     59 65 02 F6 | 	mov	objptr, local07
259b8     01 AA 06 F1 | 	add	local03, #1
259bc     2D B4 62 FD | 	call	local08
259c0     5B 65 02 F6 | 	mov	objptr, local09
259c4     3D B7 02 F6 | 	mov	local09, result1
259c8     00 B6 56 F2 | 	cmps	local09, #0 wc
259cc     5B 7B 02 C6 |  if_b	mov	result1, local09
259d0     30 00 90 CD |  if_b	jmp	#LR__3394
259d4     5B AF 02 F1 | 	add	local05, local09
259d8     ED B1 6E FB | 	djnz	local06, #LR__3392
259dc                 | LR__3393
259dc     54 95 02 F6 | 	mov	arg02, local02
259e0     56 97 02 F6 | 	mov	arg03, local04
259e4     53 93 02 F6 | 	mov	arg01, local01
259e8     01 98 06 F6 | 	mov	arg04, #1
259ec     30 42 B0 FD | 	call	#__system___fmtpad
259f0     3D B7 02 F6 | 	mov	local09, result1
259f4     00 B6 56 F2 | 	cmps	local09, #0 wc
259f8     5B 7B 02 C6 |  if_b	mov	result1, local09
259fc     5B AF 02 31 |  if_ae	add	local05, local09
25a00     57 7B 02 36 |  if_ae	mov	result1, local05
25a04                 | LR__3394
25a04     E7 F0 03 F6 | 	mov	ptra, fp
25a08     F2 00 A0 FD | 	call	#popregs_
25a0c                 | __system___fmtstr_ret
25a0c     2D 00 64 FD | 	ret
25a10                 | 
25a10                 | __system___fmtnum
25a10     0B CA 05 F6 | 	mov	COUNT_, #11
25a14     E8 00 A0 FD | 	call	#pushregs_
25a18     49 A7 02 F6 | 	mov	local01, arg01
25a1c     4A A9 02 F6 | 	mov	local02, arg02
25a20     4B AB 02 F6 | 	mov	local03, arg03
25a24     4C AD 02 F6 | 	mov	local04, arg04
25a28     F8 AF 02 F6 | 	mov	local05, ptra
25a2c     57 B1 02 F6 | 	mov	local06, local05
25a30     00 B2 06 F6 | 	mov	local07, #0
25a34     54 B5 02 F6 | 	mov	local08, local02
25a38     10 B4 46 F0 | 	shr	local08, #16
25a3c     3F B4 06 F5 | 	and	local08, #63
25a40     54 B7 E2 F8 | 	getbyte	local09, local02, #0
25a44     54 B9 02 F6 | 	mov	local10, local02
25a48     1A B8 46 F0 | 	shr	local10, #26
25a4c     03 B8 06 F5 | 	and	local10, #3
25a50     5C BB 02 F6 | 	mov	local11, local10
25a54     01 B4 56 F2 | 	cmps	local08, #1 wc
25a58     44 F0 07 F1 | 	add	ptra, #68
25a5c     01 B4 86 31 |  if_ae	sub	local08, #1
25a60     41 B6 56 F2 | 	cmps	local09, #65 wc
25a64     00 B6 0E C2 |  if_b	cmp	local09, #0 wz
25a68     40 B6 06 B6 |  if_nc_or_z	mov	local09, #64
25a6c     03 BA 0E F2 | 	cmp	local11, #3 wz
25a70     00 BA 06 A6 |  if_e	mov	local11, #0
25a74     00 AA 56 52 |  if_ne	cmps	local03, #0 wc
25a78     04 BA 06 46 |  if_c_and_nz	mov	local11, #4
25a7c     55 AB 62 46 |  if_c_and_nz	neg	local03, local03
25a80     00 BA 0E F2 | 	cmp	local11, #0 wz
25a84     4C 00 90 AD |  if_e	jmp	#LR__3403
25a88     01 B2 06 F6 | 	mov	local07, #1
25a8c     5B B5 0A F2 | 	cmp	local08, local09 wz
25a90     18 00 90 5D |  if_ne	jmp	#LR__3401
25a94     05 B4 6E FB | 	djnz	local08, #LR__3400
25a98     53 93 02 F6 | 	mov	arg01, local01
25a9c     54 95 02 F6 | 	mov	arg02, local02
25aa0     23 96 06 F6 | 	mov	arg03, #35
25aa4     48 FE BF FD | 	call	#__system___fmtchar
25aa8     8C 00 90 FD | 	jmp	#LR__3407
25aac                 | LR__3400
25aac                 | LR__3401
25aac     02 BA 0E F2 | 	cmp	local11, #2 wz
25ab0     58 B9 02 A6 |  if_e	mov	local10, local06
25ab4     01 B0 06 A1 |  if_e	add	local06, #1
25ab8     5C 41 48 AC |  if_e	wrbyte	#32, local10
25abc     14 00 90 AD |  if_e	jmp	#LR__3402
25ac0     04 BA 0E F2 | 	cmp	local11, #4 wz
25ac4     58 5B 48 AC |  if_e	wrbyte	#45, local06
25ac8     01 B0 06 A1 |  if_e	add	local06, #1
25acc     58 57 48 5C |  if_ne	wrbyte	#43, local06
25ad0     01 B0 06 51 |  if_ne	add	local06, #1
25ad4                 | LR__3402
25ad4                 | LR__3403
25ad4     59 B9 02 F6 | 	mov	local10, local07
25ad8     58 93 02 F6 | 	mov	arg01, local06
25adc     55 95 02 F6 | 	mov	arg02, local03
25ae0     56 97 02 F6 | 	mov	arg03, local04
25ae4     5A 99 02 F6 | 	mov	arg04, local08
25ae8     00 9A 06 F6 | 	mov	arg05, #0
25aec     1D A8 2E F4 | 	testbn	local02, #29 wz
25af0     01 9A 06 56 |  if_ne	mov	arg05, #1
25af4     F0 41 B0 FD | 	call	#__system___uitoa
25af8     3D B9 02 F1 | 	add	local10, result1
25afc     5B B9 5A F2 | 	cmps	local10, local09 wcz
25b00     24 00 90 ED |  if_be	jmp	#LR__3406
25b04     D7 0E 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
25b08                 | LR__3404
25b08     5B B9 02 F6 | 	mov	local10, local09
25b0c     01 B8 56 F2 | 	cmps	local10, #1 wc
25b10     01 B6 86 F1 | 	sub	local09, #1
25b14     58 B9 02 36 |  if_ae	mov	local10, local06
25b18     01 B0 06 31 |  if_ae	add	local06, #1
25b1c     5C 47 48 3C |  if_ae	wrbyte	#35, local10
25b20     E4 FF 9F 3D |  if_ae	jmp	#LR__3404
25b24                 | LR__3405
25b24     58 01 48 FC | 	wrbyte	#0, local06
25b28                 | LR__3406
25b28     53 93 02 F6 | 	mov	arg01, local01
25b2c     54 95 02 F6 | 	mov	arg02, local02
25b30     57 97 02 F6 | 	mov	arg03, local05
25b34     EC FD BF FD | 	call	#__system___fmtstr
25b38                 | LR__3407
25b38     E7 F0 03 F6 | 	mov	ptra, fp
25b3c     F2 00 A0 FD | 	call	#popregs_
25b40                 | __system___fmtnum_ret
25b40     2D 00 64 FD | 	ret
25b44                 | 
25b44                 | __system___fmtfloat
25b44     29 CA 05 F6 | 	mov	COUNT_, #41
25b48     E8 00 A0 FD | 	call	#pushregs_
25b4c     24 F1 07 F1 | 	add	ptra, #292
25b50     49 A7 02 F6 | 	mov	local01, arg01
25b54     4A A9 02 F6 | 	mov	local02, arg02
25b58     4B AB 02 F6 | 	mov	local03, arg03
25b5c     4C AD 02 F6 | 	mov	local04, arg04
25b60     0A AE 06 F6 | 	mov	local05, #10
25b64     00 B0 06 F6 | 	mov	local06, #0
25b68     00 B2 06 F6 | 	mov	local07, #0
25b6c     02 B4 06 F6 | 	mov	local08, #2
25b70     00 B6 06 F6 | 	mov	local09, #0
25b74     00 B8 06 F6 | 	mov	local10, #0
25b78     00 BA 06 F6 | 	mov	local11, #0
25b7c     E7 BC 02 F6 | 	mov	local12, fp
25b80     C8 BC 06 F1 | 	add	local12, #200
25b84     5E BF 02 F6 | 	mov	local13, local12
25b88     54 C1 02 F6 | 	mov	local14, local02
25b8c     10 C0 46 F0 | 	shr	local14, #16
25b90     3F C0 0E F5 | 	and	local14, #63 wz
25b94     54 C3 02 F6 | 	mov	local15, local02
25b98     1C C2 46 F0 | 	shr	local15, #28
25b9c     01 C2 06 F5 | 	and	local15, #1
25ba0     18 00 90 5D |  if_ne	jmp	#LR__3410
25ba4     61 AC 0E F2 | 	cmp	local04, #97 wz
25ba8     0D C0 06 A6 |  if_e	mov	local14, #13
25bac     01 B2 06 A6 |  if_e	mov	local07, #1
25bb0     0C 00 90 AD |  if_e	jmp	#LR__3411
25bb4     06 C0 06 F6 | 	mov	local14, #6
25bb8     04 00 90 FD | 	jmp	#LR__3411
25bbc                 | LR__3410
25bbc     01 C0 86 F1 | 	sub	local14, #1
25bc0                 | LR__3411
25bc0     54 C5 02 F6 | 	mov	local16, local02
25bc4     16 C4 46 F0 | 	shr	local16, #22
25bc8     03 C4 06 F5 | 	and	local16, #3
25bcc     54 C7 02 F6 | 	mov	local17, local02
25bd0     1D C6 46 F0 | 	shr	local17, #29
25bd4     01 C6 06 F5 | 	and	local17, #1
25bd8     54 C9 EA F8 | 	getbyte	local18, local02, #1
25bdc     54 CB E2 F8 | 	getbyte	local19, local02, #0
25be0     65 AC 0E F2 | 	cmp	local04, #101 wz
25be4     6E CC 62 FD | 	wrz	local20
25be8     66 CF 02 F6 | 	mov	local21, local20
25bec     00 C6 0E F2 | 	cmp	local17, #0 wz
25bf0     45 CC 06 56 |  if_ne	mov	local20, #69
25bf4     65 CC 06 A6 |  if_e	mov	local20, #101
25bf8     66 D1 02 F6 | 	mov	local22, local20
25bfc     61 AC 0E F2 | 	cmp	local04, #97 wz
25c00     2C 00 90 5D |  if_ne	jmp	#LR__3412
25c04     01 CE 06 F6 | 	mov	local21, #1
25c08     00 C6 0E F2 | 	cmp	local17, #0 wz
25c0c     50 CC 06 56 |  if_ne	mov	local20, #80
25c10     70 CC 06 A6 |  if_e	mov	local20, #112
25c14     66 D1 02 F6 | 	mov	local22, local20
25c18     02 AE 06 F6 | 	mov	local05, #2
25c1c     01 B4 06 F6 | 	mov	local08, #1
25c20     00 C6 0E F2 | 	cmp	local17, #0 wz
25c24     58 CC 06 56 |  if_ne	mov	local20, #88
25c28     78 CC 06 A6 |  if_e	mov	local20, #120
25c2c     66 B7 02 F6 | 	mov	local09, local20
25c30                 | LR__3412
25c30     23 AC 0E F2 | 	cmp	local04, #35 wz
25c34     14 00 90 5D |  if_ne	jmp	#LR__3413
25c38     01 B8 06 F6 | 	mov	local10, #1
25c3c     00 C2 0E F2 | 	cmp	local15, #0 wz
25c40     66 AC 06 56 |  if_ne	mov	local04, #102
25c44     00 C2 06 56 |  if_ne	mov	local15, #0
25c48     01 C2 06 A6 |  if_e	mov	local15, #1
25c4c                 | LR__3413
25c4c     54 D3 02 F6 | 	mov	local23, local02
25c50     1A D2 46 F0 | 	shr	local23, #26
25c54     03 D2 06 F5 | 	and	local23, #3
25c58     55 7B 02 F6 | 	mov	result1, local03
25c5c     1F 7A 4E F0 | 	shr	result1, #31 wz
25c60     2D B0 06 56 |  if_ne	mov	local06, #45
25c64     1F AA E6 54 |  if_ne	bitnot	local03, #31
25c68     14 00 90 5D |  if_ne	jmp	#LR__3415
25c6c     01 D2 0E F2 | 	cmp	local23, #1 wz
25c70     2B B0 06 A6 |  if_e	mov	local06, #43
25c74     08 00 90 AD |  if_e	jmp	#LR__3414
25c78     02 D2 0E F2 | 	cmp	local23, #2 wz
25c7c     20 B0 06 A6 |  if_e	mov	local06, #32
25c80                 | LR__3414
25c80                 | LR__3415
25c80     54 D5 02 F6 | 	mov	local24, local02
25c84     18 D4 46 F0 | 	shr	local24, #24
25c88     03 D4 06 F5 | 	and	local24, #3
25c8c     00 CC 06 F6 | 	mov	local20, #0
25c90     00 B0 0E F2 | 	cmp	local06, #0 wz
25c94     0A AE 0E A2 |  if_e	cmp	local05, #10 wz
25c98     01 CC 06 56 |  if_ne	mov	local20, #1
25c9c     66 D7 0A F6 | 	mov	local25, local20 wz
25ca0     60 00 90 AD |  if_e	jmp	#LR__3417
25ca4     02 D4 0E F2 | 	cmp	local24, #2 wz
25ca8     58 00 90 5D |  if_ne	jmp	#LR__3417
25cac     02 C4 0E F2 | 	cmp	local16, #2 wz
25cb0     50 00 90 AD |  if_e	jmp	#LR__3417
25cb4     58 95 02 F6 | 	mov	arg02, local06
25cb8     5B D9 02 F6 | 	mov	local26, local09
25cbc     5E 93 02 F6 | 	mov	arg01, local12
25cc0     6C 97 02 F6 | 	mov	arg03, local26
25cc4     88 42 B0 FD | 	call	#__system__emitsign_0584
25cc8     3D DB 02 F6 | 	mov	local27, result1
25ccc     00 DA 56 F2 | 	cmps	local27, #0 wc
25cd0     6D 7B 02 C6 |  if_b	mov	result1, local27
25cd4     C0 05 90 CD |  if_b	jmp	#LR__3460
25cd8     6D DD 02 F6 | 	mov	local28, local27
25cdc     6D BD 02 F1 | 	add	local12, local27
25ce0     00 C8 0E F2 | 	cmp	local18, #0 wz
25ce4     18 00 90 AD |  if_e	jmp	#LR__3416
25ce8     6D C9 82 F1 | 	sub	local18, local27
25cec     00 C8 56 F3 | 	fges	local18, #0 wc
25cf0     E8 A8 06 F4 | 	bitl	local02, #232
25cf4     64 DD 02 F6 | 	mov	local28, local18
25cf8     08 DC 66 F0 | 	shl	local28, #8
25cfc     6E A9 42 F5 | 	or	local02, local28
25d00                 | LR__3416
25d00     00 D6 06 F6 | 	mov	local25, #0
25d04                 | LR__3417
25d04     55 93 02 F6 | 	mov	arg01, local03
25d08     F4 1C B0 FD | 	call	#__system____builtin_ilogb
25d0c     FF FF 3F FF 
25d10     FF 7B 0E F2 | 	cmp	result1, ##2147483647 wz
25d14     24 00 90 5D |  if_ne	jmp	#LR__3418
25d18     00 B0 0E F2 | 	cmp	local06, #0 wz
25d1c     5E CD 02 56 |  if_ne	mov	local20, local12
25d20     01 BC 06 51 |  if_ne	add	local12, #1
25d24     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25d28     92 01 00 FF 
25d2c     D6 94 06 F6 | 	mov	arg02, ##@LR__5461
25d30     5E 93 02 F6 | 	mov	arg01, local12
25d34     78 EC BF FD | 	call	#__system____builtin_strcpy
25d38     AC 04 90 FD | 	jmp	#LR__3450
25d3c                 | LR__3418
25d3c     55 93 02 F6 | 	mov	arg01, local03
25d40     BC 1C B0 FD | 	call	#__system____builtin_ilogb
25d44     3D CD 02 F6 | 	mov	local20, result1
25d48     00 00 40 FF 
25d4c     00 CC 0E F2 | 	cmp	local20, ##-2147483648 wz
25d50     24 00 90 5D |  if_ne	jmp	#LR__3419
25d54     00 B0 0E F2 | 	cmp	local06, #0 wz
25d58     5E CD 02 56 |  if_ne	mov	local20, local12
25d5c     01 BC 06 51 |  if_ne	add	local12, #1
25d60     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25d64     5E 93 02 F6 | 	mov	arg01, local12
25d68     92 01 00 FF 
25d6c     DA 94 06 F6 | 	mov	arg02, ##@LR__5462
25d70     3C EC BF FD | 	call	#__system____builtin_strcpy
25d74     70 04 90 FD | 	jmp	#LR__3450
25d78                 | LR__3419
25d78     67 AC 0E F2 | 	cmp	local04, #103 wz
25d7c     23 AC 0E 52 |  if_ne	cmp	local04, #35 wz
25d80     0C 01 90 5D |  if_ne	jmp	#LR__3424
25d84     14 CE 05 F1 | 	add	fp, #20
25d88     E7 94 02 F6 | 	mov	arg02, fp
25d8c     0C CE 05 F1 | 	add	fp, #12
25d90     E7 96 02 F6 | 	mov	arg03, fp
25d94     20 CE 85 F1 | 	sub	fp, #32
25d98     60 99 02 F6 | 	mov	arg04, local14
25d9c     57 9B 02 F6 | 	mov	arg05, local05
25da0     55 93 02 F6 | 	mov	arg01, local03
25da4     B4 3F B0 FD | 	call	#__system__disassemble_0582
25da8     23 AC 0E F2 | 	cmp	local04, #35 wz
25dac     6C 00 90 5D |  if_ne	jmp	#LR__3421
25db0     20 CE 05 F1 | 	add	fp, #32
25db4     E7 CC 02 FB | 	rdlong	local20, fp
25db8     20 CE 85 F1 | 	sub	fp, #32
25dbc     60 CD 5A F2 | 	cmps	local20, local14 wcz
25dc0     01 CE 06 16 |  if_a	mov	local21, #1
25dc4     24 01 90 1D |  if_a	jmp	#LR__3427
25dc8     20 CE 05 F1 | 	add	fp, #32
25dcc     E7 CC 02 FB | 	rdlong	local20, fp
25dd0     20 CE 85 F1 | 	sub	fp, #32
25dd4     00 CC 56 F2 | 	cmps	local20, #0 wc
25dd8     1C 00 90 3D |  if_ae	jmp	#LR__3420
25ddc     60 CD 62 F6 | 	neg	local20, local14
25de0     20 CE 05 F1 | 	add	fp, #32
25de4     E7 DC 02 FB | 	rdlong	local28, fp
25de8     20 CE 85 F1 | 	sub	fp, #32
25dec     66 DD 5A F2 | 	cmps	local28, local20 wcz
25df0     01 CE 06 E6 |  if_be	mov	local21, #1
25df4     F4 00 90 FD | 	jmp	#LR__3427
25df8                 | LR__3420
25df8     20 CE 05 F1 | 	add	fp, #32
25dfc     E7 CC 02 FB | 	rdlong	local20, fp
25e00     20 CE 85 F1 | 	sub	fp, #32
25e04     01 CC 56 F2 | 	cmps	local20, #1 wc
25e08     20 CE 05 31 |  if_ae	add	fp, #32
25e0c     E7 DC 02 3B |  if_ae	rdlong	local28, fp
25e10     20 CE 85 31 |  if_ae	sub	fp, #32
25e14     6E C1 82 31 |  if_ae	sub	local14, local28
25e18     D0 00 90 FD | 	jmp	#LR__3427
25e1c                 | LR__3421
25e1c     00 B2 06 F6 | 	mov	local07, #0
25e20     1C A8 2E F4 | 	testbn	local02, #28 wz
25e24     01 B2 06 A6 |  if_e	mov	local07, #1
25e28     20 CE 05 F1 | 	add	fp, #32
25e2c     E7 CC 02 FB | 	rdlong	local20, fp
25e30     20 CE 85 F1 | 	sub	fp, #32
25e34     60 CD 52 F2 | 	cmps	local20, local14 wc
25e38     18 00 90 3D |  if_ae	jmp	#LR__3422
25e3c     20 CE 05 F1 | 	add	fp, #32
25e40     E7 D8 02 FB | 	rdlong	local26, fp
25e44     20 CE 85 F1 | 	sub	fp, #32
25e48     FF FF 7F FF 
25e4c     FC D9 56 F2 | 	cmps	local26, ##-4 wc
25e50     08 00 90 3D |  if_ae	jmp	#LR__3423
25e54                 | LR__3422
25e54     01 CE 06 F6 | 	mov	local21, #1
25e58     90 00 90 FD | 	jmp	#LR__3427
25e5c                 | LR__3423
25e5c     20 CE 05 F1 | 	add	fp, #32
25e60     E7 DC 02 FB | 	rdlong	local28, fp
25e64     6E C1 82 F1 | 	sub	local14, local28
25e68     0C CE 85 F1 | 	sub	fp, #12
25e6c     E7 94 02 F6 | 	mov	arg02, fp
25e70     0C CE 05 F1 | 	add	fp, #12
25e74     E7 96 02 F6 | 	mov	arg03, fp
25e78     20 CE 85 F1 | 	sub	fp, #32
25e7c     60 99 62 F6 | 	neg	arg04, local14
25e80     55 93 02 F6 | 	mov	arg01, local03
25e84     57 9B 02 F6 | 	mov	arg05, local05
25e88     D0 3E B0 FD | 	call	#__system__disassemble_0582
25e8c     5C 00 90 FD | 	jmp	#LR__3427
25e90                 | LR__3424
25e90     00 CE 0E F2 | 	cmp	local21, #0 wz
25e94     28 00 90 AD |  if_e	jmp	#LR__3425
25e98     14 CE 05 F1 | 	add	fp, #20
25e9c     E7 94 02 F6 | 	mov	arg02, fp
25ea0     0C CE 05 F1 | 	add	fp, #12
25ea4     E7 96 02 F6 | 	mov	arg03, fp
25ea8     20 CE 85 F1 | 	sub	fp, #32
25eac     55 93 02 F6 | 	mov	arg01, local03
25eb0     60 99 02 F6 | 	mov	arg04, local14
25eb4     57 9B 02 F6 | 	mov	arg05, local05
25eb8     A0 3E B0 FD | 	call	#__system__disassemble_0582
25ebc     2C 00 90 FD | 	jmp	#LR__3426
25ec0                 | LR__3425
25ec0     14 CE 05 F1 | 	add	fp, #20
25ec4     E7 94 02 F6 | 	mov	arg02, fp
25ec8     0C CE 05 F1 | 	add	fp, #12
25ecc     E7 96 02 F6 | 	mov	arg03, fp
25ed0     20 CE 85 F1 | 	sub	fp, #32
25ed4     60 DD 02 F6 | 	mov	local28, local14
25ed8     01 DC 06 F1 | 	add	local28, #1
25edc     6E 99 62 F6 | 	neg	arg04, local28
25ee0     55 93 02 F6 | 	mov	arg01, local03
25ee4     57 9B 02 F6 | 	mov	arg05, local05
25ee8     70 3E B0 FD | 	call	#__system__disassemble_0582
25eec                 | LR__3426
25eec                 | LR__3427
25eec     02 AE 0E F2 | 	cmp	local05, #2 wz
25ef0     44 00 90 5D |  if_ne	jmp	#LR__3430
25ef4     10 AE 06 F6 | 	mov	local05, #16
25ef8                 | LR__3428
25ef8     14 CE 05 F1 | 	add	fp, #20
25efc     E7 CC 0A FB | 	rdlong	local20, fp wz
25f00     14 CE 85 F1 | 	sub	fp, #20
25f04     30 00 90 AD |  if_e	jmp	#LR__3429
25f08     14 CE 05 F1 | 	add	fp, #20
25f0c     E7 D8 02 FB | 	rdlong	local26, fp
25f10     14 CE 85 F1 | 	sub	fp, #20
25f14     00 80 00 FF 
25f18     00 D8 16 F2 | 	cmp	local26, ##16777216 wc
25f1c     18 00 90 3D |  if_ae	jmp	#LR__3429
25f20     14 CE 05 F1 | 	add	fp, #20
25f24     E7 CC 02 FB | 	rdlong	local20, fp
25f28     01 CC 66 F0 | 	shl	local20, #1
25f2c     E7 CC 62 FC | 	wrlong	local20, fp
25f30     14 CE 85 F1 | 	sub	fp, #20
25f34     C0 FF 9F FD | 	jmp	#LR__3428
25f38                 | LR__3429
25f38                 | LR__3430
25f38     70 CE 05 F1 | 	add	fp, #112
25f3c     E7 92 02 F6 | 	mov	arg01, fp
25f40     5C CE 85 F1 | 	sub	fp, #92
25f44     E7 94 02 FB | 	rdlong	arg02, fp
25f48     14 CE 85 F1 | 	sub	fp, #20
25f4c     57 97 02 F6 | 	mov	arg03, local05
25f50     01 98 06 F6 | 	mov	arg04, #1
25f54     63 9B 02 F6 | 	mov	arg05, local17
25f58     8C 3D B0 FD | 	call	#__system___uitoa
25f5c     3D DF 02 F6 | 	mov	local29, result1
25f60     20 CE 05 F1 | 	add	fp, #32
25f64     E7 CC 02 FB | 	rdlong	local20, fp
25f68     20 CE 85 F1 | 	sub	fp, #32
25f6c     00 CC 56 F2 | 	cmps	local20, #0 wc
25f70     44 00 90 3D |  if_ae	jmp	#LR__3431
25f74     2D BA 06 F6 | 	mov	local11, #45
25f78     B0 CE 05 F1 | 	add	fp, #176
25f7c     E7 92 02 F6 | 	mov	arg01, fp
25f80     90 CE 85 F1 | 	sub	fp, #144
25f84     E7 D8 02 FB | 	rdlong	local26, fp
25f88     20 CE 85 F1 | 	sub	fp, #32
25f8c     6C DD 62 F6 | 	neg	local28, local26
25f90     0A D8 06 F6 | 	mov	local26, #10
25f94     5A E1 02 F6 | 	mov	local30, local08
25f98     63 E3 02 F6 | 	mov	local31, local17
25f9c     6E 95 02 F6 | 	mov	arg02, local28
25fa0     0A 96 06 F6 | 	mov	arg03, #10
25fa4     70 99 02 F6 | 	mov	arg04, local30
25fa8     71 9B 02 F6 | 	mov	arg05, local31
25fac     38 3D B0 FD | 	call	#__system___uitoa
25fb0     3D E5 02 F6 | 	mov	local32, result1
25fb4     3C 00 90 FD | 	jmp	#LR__3432
25fb8                 | LR__3431
25fb8     2B BA 06 F6 | 	mov	local11, #43
25fbc     B0 CE 05 F1 | 	add	fp, #176
25fc0     E7 92 02 F6 | 	mov	arg01, fp
25fc4     90 CE 85 F1 | 	sub	fp, #144
25fc8     E7 DC 02 FB | 	rdlong	local28, fp
25fcc     20 CE 85 F1 | 	sub	fp, #32
25fd0     0A D8 06 F6 | 	mov	local26, #10
25fd4     5A E1 02 F6 | 	mov	local30, local08
25fd8     63 E3 02 F6 | 	mov	local31, local17
25fdc     6E 95 02 F6 | 	mov	arg02, local28
25fe0     0A 96 06 F6 | 	mov	arg03, #10
25fe4     70 99 02 F6 | 	mov	arg04, local30
25fe8     71 9B 02 F6 | 	mov	arg05, local31
25fec     F8 3C B0 FD | 	call	#__system___uitoa
25ff0     3D E5 02 F6 | 	mov	local32, result1
25ff4                 | LR__3432
25ff4     00 CE 0E F2 | 	cmp	local21, #0 wz
25ff8     00 E6 06 56 |  if_ne	mov	local33, #0
25ffc     00 E8 06 56 |  if_ne	mov	local34, #0
26000     60 EB 02 56 |  if_ne	mov	local35, local14
26004     01 EA 06 51 |  if_ne	add	local35, #1
26008     54 00 90 5D |  if_ne	jmp	#LR__3435
2600c     20 CE 05 F1 | 	add	fp, #32
26010     E7 DC 02 FB | 	rdlong	local28, fp
26014     20 CE 85 F1 | 	sub	fp, #32
26018     00 DC 56 F2 | 	cmps	local28, #0 wc
2601c     24 00 90 3D |  if_ae	jmp	#LR__3433
26020     20 CE 05 F1 | 	add	fp, #32
26024     E7 DC 02 FB | 	rdlong	local28, fp
26028     6E E7 02 F6 | 	mov	local33, local28
2602c     73 E9 02 F6 | 	mov	local34, local33
26030     20 CE 85 F1 | 	sub	fp, #32
26034     6E EB 02 F6 | 	mov	local35, local28
26038     60 EB 02 F1 | 	add	local35, local14
2603c     01 EA 06 F1 | 	add	local35, #1
26040     1C 00 90 FD | 	jmp	#LR__3434
26044                 | LR__3433
26044     00 E8 06 F6 | 	mov	local34, #0
26048     20 CE 05 F1 | 	add	fp, #32
2604c     E7 E6 02 FB | 	rdlong	local33, fp
26050     20 CE 85 F1 | 	sub	fp, #32
26054     73 EB 02 F6 | 	mov	local35, local33
26058     60 EB 02 F1 | 	add	local35, local14
2605c     01 EA 06 F1 | 	add	local35, #1
26060                 | LR__3434
26060                 | LR__3435
26060     75 CD 02 F6 | 	mov	local20, local35
26064     74 CD 82 F1 | 	sub	local20, local34
26068     01 CC 06 F1 | 	add	local20, #1
2606c     66 ED 02 F6 | 	mov	local36, local20
26070     00 B0 0E F2 | 	cmp	local06, #0 wz
26074     76 CD 02 56 |  if_ne	mov	local20, local36
26078     76 DD 02 56 |  if_ne	mov	local28, local36
2607c     01 DC 06 51 |  if_ne	add	local28, #1
26080     6E ED 02 56 |  if_ne	mov	local36, local28
26084     10 AE 0E F2 | 	cmp	local05, #16 wz
26088     02 EC 06 A1 |  if_e	add	local36, #2
2608c     00 CE 0E F2 | 	cmp	local21, #0 wz
26090     02 DC 06 56 |  if_ne	mov	local28, #2
26094     72 DD 02 51 |  if_ne	add	local28, local32
26098     6E ED 02 51 |  if_ne	add	local36, local28
2609c     41 EC 56 F2 | 	cmps	local36, #65 wc
260a0     01 7A 66 36 |  if_ae	neg	result1, #1
260a4     F0 01 90 3D |  if_ae	jmp	#LR__3460
260a8     00 D6 0E F2 | 	cmp	local25, #0 wz
260ac     28 00 90 AD |  if_e	jmp	#LR__3436
260b0     58 95 02 F6 | 	mov	arg02, local06
260b4     5E 93 02 F6 | 	mov	arg01, local12
260b8     5B 97 02 F6 | 	mov	arg03, local09
260bc     90 3E B0 FD | 	call	#__system__emitsign_0584
260c0     3D EF 02 F6 | 	mov	local37, result1
260c4     00 EE 56 F2 | 	cmps	local37, #0 wc
260c8     77 7B 02 C6 |  if_b	mov	result1, local37
260cc     C8 01 90 CD |  if_b	jmp	#LR__3460
260d0     77 DD 02 F6 | 	mov	local28, local37
260d4     77 BD 02 F1 | 	add	local12, local37
260d8                 | LR__3436
260d8     74 F1 02 F6 | 	mov	local38, local34
260dc     D7 42 48 FB | 	callpa	#(@LR__3441-@LR__3437)>>2,fcache_load_ptr_
260e0                 | LR__3437
260e0     75 F1 52 F2 | 	cmps	local38, local35 wc
260e4     7C 00 90 3D |  if_ae	jmp	#LR__3442
260e8     00 F0 56 F2 | 	cmps	local38, #0 wc
260ec     2C 00 90 CD |  if_b	jmp	#LR__3438
260f0     6F F1 52 F2 | 	cmps	local38, local29 wc
260f4     24 00 90 3D |  if_ae	jmp	#LR__3438
260f8     5E CD 02 F6 | 	mov	local20, local12
260fc     78 D9 02 F6 | 	mov	local26, local38
26100     E7 E0 02 F6 | 	mov	local30, fp
26104     70 E0 06 F1 | 	add	local30, #112
26108     70 D9 02 F1 | 	add	local26, local30
2610c     6C E3 C2 FA | 	rdbyte	local31, local26
26110     66 E3 42 FC | 	wrbyte	local31, local20
26114     01 BC 06 F1 | 	add	local12, #1
26118     10 00 90 FD | 	jmp	#LR__3439
2611c                 | LR__3438
2611c     5E CD 02 F6 | 	mov	local20, local12
26120     30 D8 06 F6 | 	mov	local26, #48
26124     66 61 48 FC | 	wrbyte	#48, local20
26128     01 BC 06 F1 | 	add	local12, #1
2612c                 | LR__3439
2612c     73 F1 0A F2 | 	cmp	local38, local33 wz
26130     20 00 90 5D |  if_ne	jmp	#LR__3440
26134     00 C2 0E F2 | 	cmp	local15, #0 wz
26138     75 CD 02 A6 |  if_e	mov	local20, local35
2613c     01 CC 86 A1 |  if_e	sub	local20, #1
26140     66 F1 52 A2 |  if_e	cmps	local38, local20 wc
26144     5E CD 02 D6 |  if_c_or_nz	mov	local20, local12
26148     2E D8 06 D6 |  if_c_or_nz	mov	local26, #46
2614c     66 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
26150     01 BC 06 D1 |  if_c_or_nz	add	local12, #1
26154                 | LR__3440
26154     78 DD 02 F6 | 	mov	local28, local38
26158     01 DC 06 F1 | 	add	local28, #1
2615c     6E F1 02 F6 | 	mov	local38, local28
26160     7C FF 9F FD | 	jmp	#LR__3437
26164                 | LR__3441
26164                 | LR__3442
26164     00 B2 0E F2 | 	cmp	local07, #0 wz
26168     30 00 90 AD |  if_e	jmp	#LR__3446
2616c     01 BC 86 F1 | 	sub	local12, #1
26170     D7 0C 48 FB | 	callpa	#(@LR__3444-@LR__3443)>>2,fcache_load_ptr_
26174                 | LR__3443
26174     5F BD 5A F2 | 	cmps	local12, local13 wcz
26178     10 00 90 ED |  if_be	jmp	#LR__3445
2617c     5E CD C2 FA | 	rdbyte	local20, local12
26180     30 CC 0E F2 | 	cmp	local20, #48 wz
26184     01 BC 86 A1 |  if_e	sub	local12, #1
26188     E8 FF 9F AD |  if_e	jmp	#LR__3443
2618c                 | LR__3444
2618c                 | LR__3445
2618c     5E CD C2 FA | 	rdbyte	local20, local12
26190     2E CC 0E F2 | 	cmp	local20, #46 wz
26194     01 BC 86 A1 |  if_e	sub	local12, #1
26198     01 BC 06 F1 | 	add	local12, #1
2619c                 | LR__3446
2619c     00 CE 0E F2 | 	cmp	local21, #0 wz
261a0     40 00 90 AD |  if_e	jmp	#LR__3449
261a4     5E D1 42 FC | 	wrbyte	local22, local12
261a8     01 BC 06 F1 | 	add	local12, #1
261ac     5E BB 42 FC | 	wrbyte	local11, local12
261b0     00 F0 06 F6 | 	mov	local38, #0
261b4     01 BC 06 F1 | 	add	local12, #1
261b8                 | LR__3447
261b8     72 F1 52 F2 | 	cmps	local38, local32 wc
261bc     24 00 90 3D |  if_ae	jmp	#LR__3448
261c0     78 D9 02 F6 | 	mov	local26, local38
261c4     E7 E0 02 F6 | 	mov	local30, fp
261c8     B0 E0 06 F1 | 	add	local30, #176
261cc     70 D9 02 F1 | 	add	local26, local30
261d0     6C E3 C2 FA | 	rdbyte	local31, local26
261d4     5E E3 42 FC | 	wrbyte	local31, local12
261d8     01 F0 06 F1 | 	add	local38, #1
261dc     01 BC 06 F1 | 	add	local12, #1
261e0     D4 FF 9F FD | 	jmp	#LR__3447
261e4                 | LR__3448
261e4                 | LR__3449
261e4     5E 01 48 FC | 	wrbyte	#0, local12
261e8                 | LR__3450
261e8     00 CA 0E F2 | 	cmp	local19, #0 wz
261ec     00 B8 0E 52 |  if_ne	cmp	local10, #0 wz
261f0     94 00 90 AD |  if_e	jmp	#LR__3459
261f4     5F 93 02 F6 | 	mov	arg01, local13
261f8     49 F3 02 F6 | 	mov	local39, arg01
261fc     D7 06 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
26200                 | LR__3451
26200     79 7B CA FA | 	rdbyte	result1, local39 wz
26204     01 F2 06 51 |  if_ne	add	local39, #1
26208     F4 FF 9F 5D |  if_ne	jmp	#LR__3451
2620c                 | LR__3452
2620c     49 F3 82 F1 | 	sub	local39, arg01
26210     65 F3 5A F2 | 	cmps	local39, local19 wcz
26214     70 00 90 ED |  if_be	jmp	#LR__3459
26218     5F F5 02 F6 | 	mov	local40, local13
2621c     00 CE 0E F2 | 	cmp	local21, #0 wz
26220     00 C0 06 56 |  if_ne	mov	local14, #0
26224     65 F7 02 56 |  if_ne	mov	local41, local19
26228     01 CA 86 A1 |  if_e	sub	local19, #1
2622c     60 CB 82 A1 |  if_e	sub	local19, local14
26230     65 F7 02 A6 |  if_e	mov	local41, local19
26234     00 F6 0E F2 | 	cmp	local41, #0 wz
26238     14 00 90 AD |  if_e	jmp	#LR__3455
2623c     D7 08 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
26240                 | LR__3453
26240     7A 55 48 FC | 	wrbyte	#42, local40
26244     01 F6 8E F1 | 	sub	local41, #1 wz
26248     01 F4 06 F1 | 	add	local40, #1
2624c     F0 FF 9F 5D |  if_ne	jmp	#LR__3453
26250                 | LR__3454
26250                 | LR__3455
26250     00 C0 0E F2 | 	cmp	local14, #0 wz
26254     2C 00 90 AD |  if_e	jmp	#LR__3458
26258     7A CD 02 F6 | 	mov	local20, local40
2625c     66 5D 48 FC | 	wrbyte	#46, local20
26260     00 F6 06 F6 | 	mov	local41, #0
26264     01 F4 06 F1 | 	add	local40, #1
26268     D7 0C 48 FB | 	callpa	#(@LR__3457-@LR__3456)>>2,fcache_load_ptr_
2626c                 | LR__3456
2626c     60 F7 52 F2 | 	cmps	local41, local14 wc
26270     7A CD 02 C6 |  if_b	mov	local20, local40
26274     01 F4 06 C1 |  if_b	add	local40, #1
26278     66 55 48 CC |  if_b	wrbyte	#42, local20
2627c     01 F6 06 C1 |  if_b	add	local41, #1
26280     E8 FF 9F CD |  if_b	jmp	#LR__3456
26284                 | LR__3457
26284                 | LR__3458
26284     7A 01 48 FC | 	wrbyte	#0, local40
26288                 | LR__3459
26288     53 93 02 F6 | 	mov	arg01, local01
2628c     54 95 02 F6 | 	mov	arg02, local02
26290     5F 97 02 F6 | 	mov	arg03, local13
26294     8C F6 BF FD | 	call	#__system___fmtstr
26298                 | LR__3460
26298     E7 F0 03 F6 | 	mov	ptra, fp
2629c     F2 00 A0 FD | 	call	#popregs_
262a0                 | __system___fmtfloat_ret
262a0     2D 00 64 FD | 	ret
262a4                 | 
262a4                 | __system__Left_S
262a4     04 CA 05 F6 | 	mov	COUNT_, #4
262a8     E8 00 A0 FD | 	call	#pushregs_
262ac     49 A7 02 F6 | 	mov	local01, arg01
262b0     4A A9 02 F6 | 	mov	local02, arg02
262b4     01 A8 56 F2 | 	cmps	local02, #1 wc
262b8     92 01 00 CF 
262bc     DE 7A 06 C6 |  if_b	mov	result1, ##@LR__5463
262c0     5C 00 90 CD |  if_b	jmp	#LR__3473
262c4     53 93 02 F6 | 	mov	arg01, local01
262c8     49 AB 02 F6 | 	mov	local03, arg01
262cc     D7 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
262d0                 | LR__3470
262d0     55 7B CA FA | 	rdbyte	result1, local03 wz
262d4     01 AA 06 51 |  if_ne	add	local03, #1
262d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
262dc                 | LR__3471
262dc     49 AB 82 F1 | 	sub	local03, arg01
262e0     55 7B 02 F6 | 	mov	result1, local03
262e4     54 7B 5A F2 | 	cmps	result1, local02 wcz
262e8     53 7B 02 E6 |  if_be	mov	result1, local01
262ec     30 00 90 ED |  if_be	jmp	#LR__3473
262f0     54 93 02 F6 | 	mov	arg01, local02
262f4     02 92 06 F1 | 	add	arg01, #2
262f8     08 21 B0 FD | 	call	#__system___gc_alloc_managed
262fc     3D AD 0A F6 | 	mov	local04, result1 wz
26300     18 00 90 AD |  if_e	jmp	#LR__3472
26304     56 93 02 F6 | 	mov	arg01, local04
26308     53 95 02 F6 | 	mov	arg02, local01
2630c     54 97 02 F6 | 	mov	arg03, local02
26310     98 E5 BF FD | 	call	#__system____builtin_memmove
26314     56 A9 02 F1 | 	add	local02, local04
26318     54 01 48 FC | 	wrbyte	#0, local02
2631c                 | LR__3472
2631c     56 7B 02 F6 | 	mov	result1, local04
26320                 | LR__3473
26320     E7 F0 03 F6 | 	mov	ptra, fp
26324     F2 00 A0 FD | 	call	#popregs_
26328                 | __system__Left_S_ret
26328     2D 00 64 FD | 	ret
2632c                 | 
2632c                 | __system__Right_S
2632c     05 CA 05 F6 | 	mov	COUNT_, #5
26330     E8 00 A0 FD | 	call	#pushregs_
26334     49 A7 02 F6 | 	mov	local01, arg01
26338     4A A9 02 F6 | 	mov	local02, arg02
2633c     01 A8 56 F2 | 	cmps	local02, #1 wc
26340     92 01 00 CF 
26344     DF 7A 06 C6 |  if_b	mov	result1, ##@LR__5464
26348     64 00 90 CD |  if_b	jmp	#LR__3483
2634c     53 93 02 F6 | 	mov	arg01, local01
26350     49 AB 02 F6 | 	mov	local03, arg01
26354     D7 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
26358                 | LR__3480
26358     55 7B CA FA | 	rdbyte	result1, local03 wz
2635c     01 AA 06 51 |  if_ne	add	local03, #1
26360     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
26364                 | LR__3481
26364     49 AB 82 F1 | 	sub	local03, arg01
26368     55 7B 02 F6 | 	mov	result1, local03
2636c     3D AD 02 F6 | 	mov	local04, result1
26370     54 AD 5A F2 | 	cmps	local04, local02 wcz
26374     53 7B 02 E6 |  if_be	mov	result1, local01
26378     34 00 90 ED |  if_be	jmp	#LR__3483
2637c     54 93 02 F6 | 	mov	arg01, local02
26380     02 92 06 F1 | 	add	arg01, #2
26384     7C 20 B0 FD | 	call	#__system___gc_alloc_managed
26388     3D AF 0A F6 | 	mov	local05, result1 wz
2638c     1C 00 90 AD |  if_e	jmp	#LR__3482
26390     54 AD 82 F1 | 	sub	local04, local02
26394     53 AD 02 F1 | 	add	local04, local01
26398     01 A8 06 F1 | 	add	local02, #1
2639c     57 93 02 F6 | 	mov	arg01, local05
263a0     56 95 02 F6 | 	mov	arg02, local04
263a4     54 97 02 F6 | 	mov	arg03, local02
263a8     00 E5 BF FD | 	call	#__system____builtin_memmove
263ac                 | LR__3482
263ac     57 7B 02 F6 | 	mov	result1, local05
263b0                 | LR__3483
263b0     E7 F0 03 F6 | 	mov	ptra, fp
263b4     F2 00 A0 FD | 	call	#popregs_
263b8                 | __system__Right_S_ret
263b8     2D 00 64 FD | 	ret
263bc                 | 
263bc                 | __system__Mid_S
263bc     05 CA 05 F6 | 	mov	COUNT_, #5
263c0     E8 00 A0 FD | 	call	#pushregs_
263c4     49 A7 02 F6 | 	mov	local01, arg01
263c8     4A A9 02 F6 | 	mov	local02, arg02
263cc     01 96 56 F2 | 	cmps	arg03, #1 wc
263d0     92 01 00 CF 
263d4     E0 7A 06 C6 |  if_b	mov	result1, ##@LR__5465
263d8     80 00 90 CD |  if_b	jmp	#LR__3493
263dc     01 A8 86 F1 | 	sub	local02, #1
263e0     00 A8 56 F3 | 	fges	local02, #0 wc
263e4     53 93 02 F6 | 	mov	arg01, local01
263e8     49 AB 02 F6 | 	mov	local03, arg01
263ec     D7 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
263f0                 | LR__3490
263f0     55 7B CA FA | 	rdbyte	result1, local03 wz
263f4     01 AA 06 51 |  if_ne	add	local03, #1
263f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
263fc                 | LR__3491
263fc     49 AB 82 F1 | 	sub	local03, arg01
26400     55 7B 02 F6 | 	mov	result1, local03
26404     3D 95 02 F6 | 	mov	arg02, result1
26408     54 95 52 F2 | 	cmps	arg02, local02 wc
2640c     92 01 00 CF 
26410     E1 7A 06 C6 |  if_b	mov	result1, ##@LR__5466
26414     44 00 90 CD |  if_b	jmp	#LR__3493
26418     4A AD 02 F6 | 	mov	local04, arg02
2641c     54 AD 82 F1 | 	sub	local04, local02
26420     4B AD 5A F2 | 	cmps	local04, arg03 wcz
26424     4B AD 02 16 |  if_a	mov	local04, arg03
26428     56 93 02 F6 | 	mov	arg01, local04
2642c     02 92 06 F1 | 	add	arg01, #2
26430     D0 1F B0 FD | 	call	#__system___gc_alloc_managed
26434     3D AF 0A F6 | 	mov	local05, result1 wz
26438     1C 00 90 AD |  if_e	jmp	#LR__3492
2643c     53 A9 02 F1 | 	add	local02, local01
26440     57 93 02 F6 | 	mov	arg01, local05
26444     54 95 02 F6 | 	mov	arg02, local02
26448     56 97 02 F6 | 	mov	arg03, local04
2644c     5C E4 BF FD | 	call	#__system____builtin_memmove
26450     57 AD 02 F1 | 	add	local04, local05
26454     56 01 48 FC | 	wrbyte	#0, local04
26458                 | LR__3492
26458     57 7B 02 F6 | 	mov	result1, local05
2645c                 | LR__3493
2645c     E7 F0 03 F6 | 	mov	ptra, fp
26460     F2 00 A0 FD | 	call	#popregs_
26464                 | __system__Mid_S_ret
26464     2D 00 64 FD | 	ret
26468                 | 
26468                 | __system__Chr_S
26468     01 CA 05 F6 | 	mov	COUNT_, #1
2646c     E8 00 A0 FD | 	call	#pushregs_
26470     49 A7 02 F6 | 	mov	local01, arg01
26474     03 92 06 F6 | 	mov	arg01, #3
26478     88 1F B0 FD | 	call	#__system___gc_alloc_managed
2647c     00 7A 4E F2 | 	cmps	result1, #0 wz
26480     3D A7 42 5C |  if_ne	wrbyte	local01, result1
26484     01 7A 06 51 |  if_ne	add	result1, #1
26488     3D 01 48 5C |  if_ne	wrbyte	#0, result1
2648c     01 7A 86 51 |  if_ne	sub	result1, #1
26490     E7 F0 03 F6 | 	mov	ptra, fp
26494     F2 00 A0 FD | 	call	#popregs_
26498                 | __system__Chr_S_ret
26498     2D 00 64 FD | 	ret
2649c                 | 
2649c                 | __system__str_S
2649c     02 CA 05 F6 | 	mov	COUNT_, #2
264a0     E8 00 A0 FD | 	call	#pushregs_
264a4     49 A7 02 F6 | 	mov	local01, arg01
264a8     10 92 06 F6 | 	mov	arg01, #16
264ac     54 1F B0 FD | 	call	#__system___gc_alloc_managed
264b0     3D A9 0A F6 | 	mov	local02, result1 wz
264b4     30 00 90 AD |  if_e	jmp	#LR__3500
264b8     F8 93 02 F6 | 	mov	arg01, ptra
264bc     08 F0 07 F1 | 	add	ptra, #8
264c0     49 A9 62 FC | 	wrlong	local02, arg01
264c4     04 92 06 F1 | 	add	arg01, #4
264c8     49 01 68 FC | 	wrlong	#0, arg01
264cc     04 92 86 F1 | 	sub	arg01, #4
264d0     00 98 05 FF 
264d4     00 92 46 F5 | 	or	arg01, ##187695104
264d8     00 94 06 F6 | 	mov	arg02, #0
264dc     53 97 02 F6 | 	mov	arg03, local01
264e0     67 98 06 F6 | 	mov	arg04, #103
264e4     5C F6 BF FD | 	call	#__system___fmtfloat
264e8                 | LR__3500
264e8     54 7B 02 F6 | 	mov	result1, local02
264ec     E7 F0 03 F6 | 	mov	ptra, fp
264f0     F2 00 A0 FD | 	call	#popregs_
264f4                 | __system__str_S_ret
264f4     2D 00 64 FD | 	ret
264f8                 | 
264f8                 | __system__Number_S
264f8     08 CA 05 F6 | 	mov	COUNT_, #8
264fc     E8 00 A0 FD | 	call	#pushregs_
26500     49 A7 02 F6 | 	mov	local01, arg01
26504     4A A9 0A F6 | 	mov	local02, arg02 wz
26508     4B AB 02 F6 | 	mov	local03, arg03
2650c     3C 00 90 5D |  if_ne	jmp	#LR__3512
26510     01 A8 06 F6 | 	mov	local02, #1
26514     55 AD 02 F6 | 	mov	local04, local03
26518     01 AE 06 F6 | 	mov	local05, #1
2651c     D7 16 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
26520                 | LR__3510
26520     00 B0 06 F6 | 	mov	local06, #0
26524     53 AD 1A F2 | 	cmp	local04, local01 wcz
26528     01 B0 66 E6 |  if_be	neg	local06, #1
2652c     56 AF 12 F2 | 	cmp	local05, local04 wc
26530     59 B3 A2 F1 | 	subx	local07, local07
26534     59 B1 CA F7 | 	test	local06, local07 wz
26538     55 AD 02 5D |  if_ne	qmul	local04, local03
2653c     56 AF 02 56 |  if_ne	mov	local05, local04
26540     01 A8 06 51 |  if_ne	add	local02, #1
26544     18 AC 62 5D |  if_ne	getqx	local04
26548     D4 FF 9F 5D |  if_ne	jmp	#LR__3510
2654c                 | LR__3511
2654c                 | LR__3512
2654c     20 A8 36 F3 | 	fle	local02, #32 wc
26550     54 93 02 F6 | 	mov	arg01, local02
26554     02 92 06 F1 | 	add	arg01, #2
26558     A8 1E B0 FD | 	call	#__system___gc_alloc_managed
2655c     3D B1 02 F6 | 	mov	local06, result1
26560     54 B3 02 F6 | 	mov	local07, local02
26564     58 B3 02 F1 | 	add	local07, local06
26568     59 01 48 FC | 	wrbyte	#0, local07
2656c     D7 1A 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
26570                 | LR__3513
26570     01 A8 16 F2 | 	cmp	local02, #1 wc
26574     2C 00 90 CD |  if_b	jmp	#LR__3515
26578     55 A7 12 FD | 	qdiv	local01, local03
2657c     01 A8 86 F1 | 	sub	local02, #1
26580     54 B3 02 F6 | 	mov	local07, local02
26584     58 B3 02 F1 | 	add	local07, local06
26588     19 B4 62 FD | 	getqy	local08
2658c     0A B4 16 F2 | 	cmp	local08, #10 wc
26590     30 B4 06 C1 |  if_b	add	local08, #48
26594     37 B4 06 31 |  if_ae	add	local08, #55
26598     59 B5 42 FC | 	wrbyte	local08, local07
2659c     18 A6 62 FD | 	getqx	local01
265a0     CC FF 9F FD | 	jmp	#LR__3513
265a4                 | LR__3514
265a4                 | LR__3515
265a4     58 7B 02 F6 | 	mov	result1, local06
265a8     E7 F0 03 F6 | 	mov	ptra, fp
265ac     F2 00 A0 FD | 	call	#popregs_
265b0                 | __system__Number_S_ret
265b0     2D 00 64 FD | 	ret
265b4                 | 
265b4                 | __system__LCase_S
265b4     07 CA 05 F6 | 	mov	COUNT_, #7
265b8     E8 00 A0 FD | 	call	#pushregs_
265bc     49 A7 02 F6 | 	mov	local01, arg01
265c0     49 A9 02 F6 | 	mov	local02, arg01
265c4     D7 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
265c8                 | LR__3520
265c8     54 7B CA FA | 	rdbyte	result1, local02 wz
265cc     01 A8 06 51 |  if_ne	add	local02, #1
265d0     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
265d4                 | LR__3521
265d4     49 A9 82 F1 | 	sub	local02, arg01
265d8     54 7B 02 F6 | 	mov	result1, local02
265dc     3D A9 0A F6 | 	mov	local02, result1 wz
265e0     92 01 00 AF 
265e4     E2 7A 06 A6 |  if_e	mov	result1, ##@LR__5467
265e8     7C 00 90 AD |  if_e	jmp	#LR__3527
265ec     54 93 02 F6 | 	mov	arg01, local02
265f0     02 92 06 F1 | 	add	arg01, #2
265f4     0C 1E B0 FD | 	call	#__system___gc_alloc_managed
265f8     3D AB 0A F6 | 	mov	local03, result1 wz
265fc     64 00 90 AD |  if_e	jmp	#LR__3526
26600     01 AC 66 F6 | 	neg	local04, #1
26604     D7 26 48 FB | 	callpa	#(@LR__3525-@LR__3522)>>2,fcache_load_ptr_
26608                 | LR__3522
26608     01 AC 06 F1 | 	add	local04, #1
2660c     56 AF 02 F6 | 	mov	local05, local04
26610     53 AF 02 F1 | 	add	local05, local01
26614     57 B1 C2 FA | 	rdbyte	local06, local05
26618     41 B0 56 F2 | 	cmps	local06, #65 wc
2661c     18 00 90 CD |  if_b	jmp	#LR__3523
26620     5B B0 56 F2 | 	cmps	local06, #91 wc
26624     56 B3 02 C6 |  if_b	mov	local07, local04
26628     55 B3 02 C1 |  if_b	add	local07, local03
2662c     20 B0 06 C1 |  if_b	add	local06, #32
26630     59 B1 42 CC |  if_b	wrbyte	local06, local07
26634     0C 00 90 CD |  if_b	jmp	#LR__3524
26638                 | LR__3523
26638     56 B3 02 F6 | 	mov	local07, local04
2663c     55 B3 02 F1 | 	add	local07, local03
26640     59 B1 42 FC | 	wrbyte	local06, local07
26644                 | LR__3524
26644     54 B1 02 F6 | 	mov	local06, local02
26648     01 B0 86 F1 | 	sub	local06, #1
2664c     58 AD 0A F2 | 	cmp	local04, local06 wz
26650     B4 FF 9F 5D |  if_ne	jmp	#LR__3522
26654                 | LR__3525
26654     55 A9 02 F1 | 	add	local02, local03
26658     54 01 48 FC | 	wrbyte	#0, local02
2665c     55 7B 02 F6 | 	mov	result1, local03
26660     04 00 90 FD | 	jmp	#LR__3527
26664                 | LR__3526
26664     55 7B 02 F6 | 	mov	result1, local03
26668                 | LR__3527
26668     E7 F0 03 F6 | 	mov	ptra, fp
2666c     F2 00 A0 FD | 	call	#popregs_
26670                 | __system__LCase_S_ret
26670     2D 00 64 FD | 	ret
26674                 | 
26674                 | __system__LTrim_S
26674     05 CA 05 F6 | 	mov	COUNT_, #5
26678     E8 00 A0 FD | 	call	#pushregs_
2667c     49 A7 02 F6 | 	mov	local01, arg01
26680     49 A9 02 F6 | 	mov	local02, arg01
26684     D7 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
26688                 | LR__3530
26688     54 7B CA FA | 	rdbyte	result1, local02 wz
2668c     01 A8 06 51 |  if_ne	add	local02, #1
26690     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
26694                 | LR__3531
26694     49 A9 82 F1 | 	sub	local02, arg01
26698     54 7B 02 F6 | 	mov	result1, local02
2669c     3D A9 0A F6 | 	mov	local02, result1 wz
266a0     92 01 00 AF 
266a4     E3 7A 06 A6 |  if_e	mov	result1, ##@LR__5468
266a8     7C 00 90 AD |  if_e	jmp	#LR__3536
266ac     00 AA 06 F6 | 	mov	local03, #0
266b0     54 AD 02 F6 | 	mov	local04, local02
266b4                 | LR__3532
266b4     56 AB 52 F2 | 	cmps	local03, local04 wc
266b8     68 00 90 3D |  if_ae	jmp	#LR__3535
266bc     55 97 02 F6 | 	mov	arg03, local03
266c0     53 97 02 F1 | 	add	arg03, local01
266c4     4B 97 C2 FA | 	rdbyte	arg03, arg03
266c8     20 96 0E F2 | 	cmp	arg03, #32 wz
266cc     4C 00 90 AD |  if_e	jmp	#LR__3534
266d0     54 93 02 F6 | 	mov	arg01, local02
266d4     55 93 82 F1 | 	sub	arg01, local03
266d8     02 92 06 F1 | 	add	arg01, #2
266dc     24 1D B0 FD | 	call	#__system___gc_alloc_managed
266e0     3D AF 0A F6 | 	mov	local05, result1 wz
266e4     2C 00 90 AD |  if_e	jmp	#LR__3533
266e8     55 95 02 F6 | 	mov	arg02, local03
266ec     53 95 02 F1 | 	add	arg02, local01
266f0     54 97 02 F6 | 	mov	arg03, local02
266f4     55 97 82 F1 | 	sub	arg03, local03
266f8     57 93 02 F6 | 	mov	arg01, local05
266fc     AC E1 BF FD | 	call	#__system____builtin_memmove
26700     55 A9 82 F1 | 	sub	local02, local03
26704     57 A9 02 F1 | 	add	local02, local05
26708     54 01 48 FC | 	wrbyte	#0, local02
2670c     57 7B 02 F6 | 	mov	result1, local05
26710     14 00 90 FD | 	jmp	#LR__3536
26714                 | LR__3533
26714     57 7B 02 F6 | 	mov	result1, local05
26718     0C 00 90 FD | 	jmp	#LR__3536
2671c                 | LR__3534
2671c     01 AA 06 F1 | 	add	local03, #1
26720     90 FF 9F FD | 	jmp	#LR__3532
26724                 | LR__3535
26724     53 7B 02 F6 | 	mov	result1, local01
26728                 | LR__3536
26728     E7 F0 03 F6 | 	mov	ptra, fp
2672c     F2 00 A0 FD | 	call	#popregs_
26730                 | __system__LTrim_S_ret
26730     2D 00 64 FD | 	ret
26734                 | 
26734                 | __system__RTrim_S
26734     04 CA 05 F6 | 	mov	COUNT_, #4
26738     E8 00 A0 FD | 	call	#pushregs_
2673c     49 A7 02 F6 | 	mov	local01, arg01
26740     49 A9 02 F6 | 	mov	local02, arg01
26744     D7 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
26748                 | LR__3540
26748     54 7B CA FA | 	rdbyte	result1, local02 wz
2674c     01 A8 06 51 |  if_ne	add	local02, #1
26750     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
26754                 | LR__3541
26754     49 A9 82 F1 | 	sub	local02, arg01
26758     54 7B 02 F6 | 	mov	result1, local02
2675c     3D A9 0A F6 | 	mov	local02, result1 wz
26760     92 01 00 AF 
26764     E4 7A 06 A6 |  if_e	mov	result1, ##@LR__5469
26768     74 00 90 AD |  if_e	jmp	#LR__3545
2676c     54 AB 02 F6 | 	mov	local03, local02
26770     01 AA 86 F1 | 	sub	local03, #1
26774                 | LR__3542
26774     55 95 02 F6 | 	mov	arg02, local03
26778     53 95 02 F1 | 	add	arg02, local01
2677c     4A A9 C2 FA | 	rdbyte	local02, arg02
26780     20 A8 0E F2 | 	cmp	local02, #32 wz
26784     44 00 90 AD |  if_e	jmp	#LR__3544
26788     55 93 02 F6 | 	mov	arg01, local03
2678c     02 92 06 F1 | 	add	arg01, #2
26790     70 1C B0 FD | 	call	#__system___gc_alloc_managed
26794     3D AD 0A F6 | 	mov	local04, result1 wz
26798     28 00 90 AD |  if_e	jmp	#LR__3543
2679c     55 97 02 F6 | 	mov	arg03, local03
267a0     01 96 06 F1 | 	add	arg03, #1
267a4     56 93 02 F6 | 	mov	arg01, local04
267a8     53 95 02 F6 | 	mov	arg02, local01
267ac     FC E0 BF FD | 	call	#__system____builtin_memmove
267b0     01 AA 06 F1 | 	add	local03, #1
267b4     56 AB 02 F1 | 	add	local03, local04
267b8     55 01 48 FC | 	wrbyte	#0, local03
267bc     56 7B 02 F6 | 	mov	result1, local04
267c0     1C 00 90 FD | 	jmp	#LR__3545
267c4                 | LR__3543
267c4     56 7B 02 F6 | 	mov	result1, local04
267c8     14 00 90 FD | 	jmp	#LR__3545
267cc                 | LR__3544
267cc     01 AA 86 F1 | 	sub	local03, #1
267d0     00 AA 56 F2 | 	cmps	local03, #0 wc
267d4     9C FF 9F 3D |  if_ae	jmp	#LR__3542
267d8     92 01 00 FF 
267dc     E5 7A 06 F6 | 	mov	result1, ##@LR__5470
267e0                 | LR__3545
267e0     E7 F0 03 F6 | 	mov	ptra, fp
267e4     F2 00 A0 FD | 	call	#popregs_
267e8                 | __system__RTrim_S_ret
267e8     2D 00 64 FD | 	ret
267ec                 | 
267ec                 | __system__Instr
267ec     07 CA 05 F6 | 	mov	COUNT_, #7
267f0     E8 00 A0 FD | 	call	#pushregs_
267f4     49 A7 02 F6 | 	mov	local01, arg01
267f8     4A A9 02 F6 | 	mov	local02, arg02
267fc     4B AB 02 F6 | 	mov	local03, arg03
26800     55 93 02 F6 | 	mov	arg01, local03
26804     49 AD 02 F6 | 	mov	local04, arg01
26808     D7 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
2680c                 | LR__3550
2680c     56 7B CA FA | 	rdbyte	result1, local04 wz
26810     01 AC 06 51 |  if_ne	add	local04, #1
26814     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
26818                 | LR__3551
26818     49 AD 82 F1 | 	sub	local04, arg01
2681c     56 AF 02 F6 | 	mov	local05, local04
26820     54 93 02 F6 | 	mov	arg01, local02
26824     49 AD 02 F6 | 	mov	local04, arg01
26828     D7 06 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
2682c                 | LR__3552
2682c     56 7B CA FA | 	rdbyte	result1, local04 wz
26830     01 AC 06 51 |  if_ne	add	local04, #1
26834     F4 FF 9F 5D |  if_ne	jmp	#LR__3552
26838                 | LR__3553
26838     49 AD 82 F1 | 	sub	local04, arg01
2683c     56 7B 02 F6 | 	mov	result1, local04
26840     3D 99 0A F6 | 	mov	arg04, result1 wz
26844     00 7A 06 A6 |  if_e	mov	result1, #0
26848     98 00 90 AD |  if_e	jmp	#LR__3557
2684c     00 AE 0E F2 | 	cmp	local05, #0 wz
26850     00 7A 06 A6 |  if_e	mov	result1, #0
26854     8C 00 90 AD |  if_e	jmp	#LR__3557
26858     4C A7 5A F2 | 	cmps	local01, arg04 wcz
2685c     00 7A 06 16 |  if_a	mov	result1, #0
26860     80 00 90 1D |  if_a	jmp	#LR__3557
26864     01 A6 56 F2 | 	cmps	local01, #1 wc
26868     01 A6 06 C6 |  if_b	mov	local01, #1
2686c     55 B1 C2 FA | 	rdbyte	local06, local03
26870     01 AE 0E F2 | 	cmp	local05, #1 wz
26874     18 00 90 5D |  if_ne	jmp	#LR__3554
26878     54 93 02 F6 | 	mov	arg01, local02
2687c     58 95 02 F6 | 	mov	arg02, local06
26880     53 97 02 F6 | 	mov	arg03, local01
26884     00 98 06 F6 | 	mov	arg04, #0
26888     C4 37 B0 FD | 	call	#__system____ScanForChar
2688c     54 00 90 FD | 	jmp	#LR__3557
26890                 | LR__3554
26890     53 B3 02 F6 | 	mov	local07, local01
26894                 | LR__3555
26894     54 93 02 F6 | 	mov	arg01, local02
26898     58 95 02 F6 | 	mov	arg02, local06
2689c     59 97 02 F6 | 	mov	arg03, local07
268a0     00 98 06 F6 | 	mov	arg04, #0
268a4     A8 37 B0 FD | 	call	#__system____ScanForChar
268a8     3D B3 0A F6 | 	mov	local07, result1 wz
268ac     30 00 90 AD |  if_e	jmp	#LR__3556
268b0     57 97 02 F6 | 	mov	arg03, local05
268b4     54 93 02 F6 | 	mov	arg01, local02
268b8     59 95 02 F6 | 	mov	arg02, local07
268bc     FC FA BF FD | 	call	#__system__Mid_S
268c0     3D 93 02 F6 | 	mov	arg01, result1
268c4     55 95 02 F6 | 	mov	arg02, local03
268c8     58 E1 BF FD | 	call	#__system___string_cmp
268cc     00 7A 0E F2 | 	cmp	result1, #0 wz
268d0     59 7B 02 A6 |  if_e	mov	result1, local07
268d4     0C 00 90 AD |  if_e	jmp	#LR__3557
268d8     57 B3 02 F1 | 	add	local07, local05
268dc     B4 FF 9F FD | 	jmp	#LR__3555
268e0                 | LR__3556
268e0     00 7A 06 F6 | 	mov	result1, #0
268e4                 | LR__3557
268e4     E7 F0 03 F6 | 	mov	ptra, fp
268e8     F2 00 A0 FD | 	call	#popregs_
268ec                 | __system__Instr_ret
268ec     2D 00 64 FD | 	ret
268f0                 | 
268f0                 | __system__InstrRev
268f0     07 CA 05 F6 | 	mov	COUNT_, #7
268f4     E8 00 A0 FD | 	call	#pushregs_
268f8     49 A7 02 F6 | 	mov	local01, arg01
268fc     4A A9 02 F6 | 	mov	local02, arg02
26900     4B AB 02 F6 | 	mov	local03, arg03
26904     55 93 02 F6 | 	mov	arg01, local03
26908     49 AD 02 F6 | 	mov	local04, arg01
2690c     D7 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
26910                 | LR__3560
26910     56 7B CA FA | 	rdbyte	result1, local04 wz
26914     01 AC 06 51 |  if_ne	add	local04, #1
26918     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
2691c                 | LR__3561
2691c     49 AD 82 F1 | 	sub	local04, arg01
26920     56 AF 02 F6 | 	mov	local05, local04
26924     54 93 02 F6 | 	mov	arg01, local02
26928     49 AD 02 F6 | 	mov	local04, arg01
2692c     D7 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
26930                 | LR__3562
26930     56 7B CA FA | 	rdbyte	result1, local04 wz
26934     01 AC 06 51 |  if_ne	add	local04, #1
26938     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
2693c                 | LR__3563
2693c     49 AD 82 F1 | 	sub	local04, arg01
26940     56 7B 02 F6 | 	mov	result1, local04
26944     3D 99 0A F6 | 	mov	arg04, result1 wz
26948     00 7A 06 A6 |  if_e	mov	result1, #0
2694c     98 00 90 AD |  if_e	jmp	#LR__3567
26950     00 AE 0E F2 | 	cmp	local05, #0 wz
26954     00 7A 06 A6 |  if_e	mov	result1, #0
26958     8C 00 90 AD |  if_e	jmp	#LR__3567
2695c     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26960     4C A7 02 16 |  if_a	mov	local01, arg04
26964     01 A6 56 F2 | 	cmps	local01, #1 wc
26968     01 A6 06 C6 |  if_b	mov	local01, #1
2696c     55 B1 C2 FA | 	rdbyte	local06, local03
26970     01 AE 0E F2 | 	cmp	local05, #1 wz
26974     18 00 90 5D |  if_ne	jmp	#LR__3564
26978     54 93 02 F6 | 	mov	arg01, local02
2697c     58 95 02 F6 | 	mov	arg02, local06
26980     53 97 02 F6 | 	mov	arg03, local01
26984     01 98 06 F6 | 	mov	arg04, #1
26988     C4 36 B0 FD | 	call	#__system____ScanForChar
2698c     58 00 90 FD | 	jmp	#LR__3567
26990                 | LR__3564
26990     57 B3 02 F6 | 	mov	local07, local05
26994     01 B2 86 F1 | 	sub	local07, #1
26998                 | LR__3565
26998     54 93 02 F6 | 	mov	arg01, local02
2699c     58 95 02 F6 | 	mov	arg02, local06
269a0     59 97 02 F6 | 	mov	arg03, local07
269a4     01 98 06 F6 | 	mov	arg04, #1
269a8     A4 36 B0 FD | 	call	#__system____ScanForChar
269ac     3D B3 0A F6 | 	mov	local07, result1 wz
269b0     30 00 90 AD |  if_e	jmp	#LR__3566
269b4     57 97 02 F6 | 	mov	arg03, local05
269b8     54 93 02 F6 | 	mov	arg01, local02
269bc     59 95 02 F6 | 	mov	arg02, local07
269c0     F8 F9 BF FD | 	call	#__system__Mid_S
269c4     3D 93 02 F6 | 	mov	arg01, result1
269c8     55 95 02 F6 | 	mov	arg02, local03
269cc     54 E0 BF FD | 	call	#__system___string_cmp
269d0     00 7A 0E F2 | 	cmp	result1, #0 wz
269d4     59 7B 02 A6 |  if_e	mov	result1, local07
269d8     0C 00 90 AD |  if_e	jmp	#LR__3567
269dc     57 B3 82 F1 | 	sub	local07, local05
269e0     B4 FF 9F FD | 	jmp	#LR__3565
269e4                 | LR__3566
269e4     00 7A 06 F6 | 	mov	result1, #0
269e8                 | LR__3567
269e8     E7 F0 03 F6 | 	mov	ptra, fp
269ec     F2 00 A0 FD | 	call	#popregs_
269f0                 | __system__InstrRev_ret
269f0     2D 00 64 FD | 	ret
269f4                 | 
269f4                 | __system___remove
269f4     06 CA 05 F6 | 	mov	COUNT_, #6
269f8     E8 00 A0 FD | 	call	#pushregs_
269fc     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26a00     84 A7 06 F1 | 	add	local01, #388
26a04     49 95 02 F6 | 	mov	arg02, arg01
26a08     53 93 02 F6 | 	mov	arg01, local01
26a0c     00 96 06 F6 | 	mov	arg03, #0
26a10     34 E7 BF FD | 	call	#__system____getvfsforfile
26a14     3D A9 0A F6 | 	mov	local02, result1 wz
26a18     10 00 90 AD |  if_e	jmp	#LR__3570
26a1c     20 A8 06 F1 | 	add	local02, #32
26a20     54 93 0A FB | 	rdlong	arg01, local02 wz
26a24     20 A8 86 F1 | 	sub	local02, #32
26a28     14 00 90 5D |  if_ne	jmp	#LR__3571
26a2c                 | LR__3570
26a2c     20 68 06 F1 | 	add	ptr___system__dat__, #32
26a30     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26a34     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26a38     01 7A 66 F6 | 	neg	result1, #1
26a3c     A8 00 90 FD | 	jmp	#LR__3574
26a40                 | LR__3571
26a40     40 A8 06 F1 | 	add	local02, #64
26a44     54 AB 02 FB | 	rdlong	local03, local02
26a48     55 AD 02 F6 | 	mov	local04, local03
26a4c     40 A8 86 F1 | 	sub	local02, #64
26a50     13 AC 46 F7 | 	zerox	local04, #19
26a54     14 AA 46 F0 | 	shr	local03, #20
26a58     02 AA 66 F0 | 	shl	local03, #2
26a5c     2D AB 02 F1 | 	add	local03, __methods__
26a60     55 AB 02 FB | 	rdlong	local03, local03
26a64     53 93 02 F6 | 	mov	arg01, local01
26a68     32 AF 02 F6 | 	mov	local05, objptr
26a6c     56 65 02 F6 | 	mov	objptr, local04
26a70     2D AA 62 FD | 	call	local03
26a74     57 65 02 F6 | 	mov	objptr, local05
26a78     3D B1 02 F6 | 	mov	local06, result1
26a7c     FF FF 7F FF 
26a80     F2 B1 0E F2 | 	cmp	local06, ##-14 wz
26a84     38 00 90 5D |  if_ne	jmp	#LR__3572
26a88     3C A8 06 F1 | 	add	local02, #60
26a8c     54 B1 02 FB | 	rdlong	local06, local02
26a90     58 AB 02 F6 | 	mov	local03, local06
26a94     13 B0 46 F7 | 	zerox	local06, #19
26a98     14 AA 46 F0 | 	shr	local03, #20
26a9c     02 AA 66 F0 | 	shl	local03, #2
26aa0     2D AB 02 F1 | 	add	local03, __methods__
26aa4     55 AB 02 FB | 	rdlong	local03, local03
26aa8     53 93 02 F6 | 	mov	arg01, local01
26aac     32 AF 02 F6 | 	mov	local05, objptr
26ab0     58 65 02 F6 | 	mov	objptr, local06
26ab4     2D AA 62 FD | 	call	local03
26ab8     57 65 02 F6 | 	mov	objptr, local05
26abc     3D B1 02 F6 | 	mov	local06, result1
26ac0                 | LR__3572
26ac0     00 B0 0E F2 | 	cmp	local06, #0 wz
26ac4     1C 00 90 AD |  if_e	jmp	#LR__3573
26ac8     58 93 6A F6 | 	neg	arg01, local06 wz
26acc     20 68 06 F1 | 	add	ptr___system__dat__, #32
26ad0     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26ad4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26ad8     01 7A 66 56 |  if_ne	neg	result1, #1
26adc     00 7A 06 A6 |  if_e	mov	result1, #0
26ae0     04 00 90 FD | 	jmp	#LR__3574
26ae4                 | LR__3573
26ae4     00 7A 06 F6 | 	mov	result1, #0
26ae8                 | LR__3574
26ae8     E7 F0 03 F6 | 	mov	ptra, fp
26aec     F2 00 A0 FD | 	call	#popregs_
26af0                 | __system___remove_ret
26af0     2D 00 64 FD | 	ret
26af4                 | 
26af4                 | __system___mkdir
26af4     05 CA 05 F6 | 	mov	COUNT_, #5
26af8     E8 00 A0 FD | 	call	#pushregs_
26afc     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26b00     84 A7 06 F1 | 	add	local01, #388
26b04     49 95 02 F6 | 	mov	arg02, arg01
26b08     53 93 02 F6 | 	mov	arg01, local01
26b0c     00 96 06 F6 | 	mov	arg03, #0
26b10     34 E6 BF FD | 	call	#__system____getvfsforfile
26b14     3D A9 0A F6 | 	mov	local02, result1 wz
26b18     10 00 90 AD |  if_e	jmp	#LR__3580
26b1c     20 A8 06 F1 | 	add	local02, #32
26b20     54 95 0A FB | 	rdlong	arg02, local02 wz
26b24     20 A8 86 F1 | 	sub	local02, #32
26b28     14 00 90 5D |  if_ne	jmp	#LR__3581
26b2c                 | LR__3580
26b2c     20 68 06 F1 | 	add	ptr___system__dat__, #32
26b30     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26b34     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26b38     01 7A 66 F6 | 	neg	result1, #1
26b3c     60 00 90 FD | 	jmp	#LR__3583
26b40                 | LR__3581
26b40     38 A8 06 F1 | 	add	local02, #56
26b44     54 AB 02 FB | 	rdlong	local03, local02
26b48     55 AD 02 F6 | 	mov	local04, local03
26b4c     13 AA 46 F7 | 	zerox	local03, #19
26b50     14 AC 46 F0 | 	shr	local04, #20
26b54     02 AC 66 F0 | 	shl	local04, #2
26b58     2D AD 02 F1 | 	add	local04, __methods__
26b5c     56 AD 02 FB | 	rdlong	local04, local04
26b60     53 93 02 F6 | 	mov	arg01, local01
26b64     FF 95 06 F6 | 	mov	arg02, #511
26b68     32 AF 02 F6 | 	mov	local05, objptr
26b6c     55 65 02 F6 | 	mov	objptr, local03
26b70     2D AC 62 FD | 	call	local04
26b74     57 65 02 F6 | 	mov	objptr, local05
26b78     3D 93 0A F6 | 	mov	arg01, result1 wz
26b7c     1C 00 90 AD |  if_e	jmp	#LR__3582
26b80     49 93 6A F6 | 	neg	arg01, arg01 wz
26b84     20 68 06 F1 | 	add	ptr___system__dat__, #32
26b88     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26b8c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26b90     01 7A 66 56 |  if_ne	neg	result1, #1
26b94     00 7A 06 A6 |  if_e	mov	result1, #0
26b98     04 00 90 FD | 	jmp	#LR__3583
26b9c                 | LR__3582
26b9c     00 7A 06 F6 | 	mov	result1, #0
26ba0                 | LR__3583
26ba0     E7 F0 03 F6 | 	mov	ptra, fp
26ba4     F2 00 A0 FD | 	call	#popregs_
26ba8                 | __system___mkdir_ret
26ba8     2D 00 64 FD | 	ret
26bac                 | 
26bac                 | __system___strerror
26bac     00 92 56 F2 | 	cmps	arg01, #0 wc
26bb0     08 00 90 CD |  if_b	jmp	#LR__3590
26bb4     1A 92 56 F2 | 	cmps	arg01, #26 wc
26bb8     04 00 90 CD |  if_b	jmp	#LR__3591
26bbc                 | LR__3590
26bbc     19 92 06 F6 | 	mov	arg01, #25
26bc0                 | LR__3591
26bc0     02 92 66 F0 | 	shl	arg01, #2
26bc4     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
26bc8     01 00 00 FF 
26bcc     E0 7A 06 F1 | 	add	result1, ##736
26bd0     3D 93 02 F1 | 	add	arg01, result1
26bd4     49 7B 02 FB | 	rdlong	result1, arg01
26bd8                 | __system___strerror_ret
26bd8     2D 00 64 FD | 	ret
26bdc                 | 
26bdc                 | __system___int64_shl
26bdc     20 96 CE F7 | 	test	arg03, #32 wz
26be0     49 95 02 56 |  if_ne	mov	arg02, arg01
26be4     00 92 06 56 |  if_ne	mov	arg01, #0
26be8     1F 96 CE F7 | 	test	arg03, #31 wz
26bec     18 00 90 AD |  if_e	jmp	#LR__3600
26bf0     4B 95 62 F0 | 	shl	arg02, arg03
26bf4     49 7B 02 F6 | 	mov	result1, arg01
26bf8     4B 7D 62 F6 | 	neg	result2, arg03
26bfc     3E 7B 42 F0 | 	shr	result1, result2
26c00     3D 95 42 F5 | 	or	arg02, result1
26c04     4B 93 62 F0 | 	shl	arg01, arg03
26c08                 | LR__3600
26c08     4A 7D 02 F6 | 	mov	result2, arg02
26c0c     49 7B 02 F6 | 	mov	result1, arg01
26c10                 | __system___int64_shl_ret
26c10     2D 00 64 FD | 	ret
26c14                 | 
26c14                 | __system___int64_sar
26c14     20 96 CE F7 | 	test	arg03, #32 wz
26c18     4A 93 02 56 |  if_ne	mov	arg01, arg02
26c1c     1F 94 C6 50 |  if_ne	sar	arg02, #31
26c20     1F 96 CE F7 | 	test	arg03, #31 wz
26c24     18 00 90 AD |  if_e	jmp	#LR__3610
26c28     4B 93 42 F0 | 	shr	arg01, arg03
26c2c     4A 7B 02 F6 | 	mov	result1, arg02
26c30     4B 7D 62 F6 | 	neg	result2, arg03
26c34     3E 7B 62 F0 | 	shl	result1, result2
26c38     3D 93 42 F5 | 	or	arg01, result1
26c3c     4B 95 C2 F0 | 	sar	arg02, arg03
26c40                 | LR__3610
26c40     4A 7D 02 F6 | 	mov	result2, arg02
26c44     49 7B 02 F6 | 	mov	result1, arg01
26c48                 | __system___int64_sar_ret
26c48     2D 00 64 FD | 	ret
26c4c                 | 
26c4c                 | __system___usepins
26c4c     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c50     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c54     14 68 86 F1 | 	sub	ptr___system__dat__, #20
26c58     40 93 CA F7 | 	test	arg01, _var01 wz
26c5c     18 68 06 A1 |  if_e	add	ptr___system__dat__, #24
26c60     34 83 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26c64     18 68 86 A1 |  if_e	sub	ptr___system__dat__, #24
26c68     41 95 CA A7 |  if_e	test	arg02, _var02 wz
26c6c     00 7A 06 56 |  if_ne	mov	result1, #0
26c70     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26c74     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c78     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c7c     49 83 42 F5 | 	or	_var02, arg01
26c80     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c84     04 68 06 F1 | 	add	ptr___system__dat__, #4
26c88     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c8c     4A 83 42 F5 | 	or	_var02, arg02
26c90     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c94     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26c98     01 7A 66 F6 | 	neg	result1, #1
26c9c                 | __system___usepins_ret
26c9c     2D 00 64 FD | 	ret
26ca0                 | 
26ca0                 | __system___freepins
26ca0     14 68 06 F1 | 	add	ptr___system__dat__, #20
26ca4     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26ca8     49 81 22 F5 | 	andn	_var01, arg01
26cac     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26cb0     04 68 06 F1 | 	add	ptr___system__dat__, #4
26cb4     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26cb8     4A 81 22 F5 | 	andn	_var01, arg02
26cbc     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26cc0     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26cc4                 | __system___freepins_ret
26cc4     2D 00 64 FD | 	ret
26cc8                 | 
26cc8                 | __system___float_fromuns
26cc8     49 97 0A F6 | 	mov	arg03, arg01 wz
26ccc     4B 7B 02 A6 |  if_e	mov	result1, arg03
26cd0     24 00 90 AD |  if_e	jmp	#LR__3620
26cd4     4B 95 92 F7 | 	encod	arg02, arg03 wc
26cd8     01 94 06 C1 |  if_b	add	arg02, #1
26cdc     01 94 86 F1 | 	sub	arg02, #1
26ce0     1F 92 06 F6 | 	mov	arg01, #31
26ce4     4A 93 82 F1 | 	sub	arg01, arg02
26ce8     49 97 62 F0 | 	shl	arg03, arg01
26cec     02 96 46 F0 | 	shr	arg03, #2
26cf0     00 92 06 F6 | 	mov	arg01, #0
26cf4     58 09 B0 FD | 	call	#__system___float_Pack
26cf8                 | LR__3620
26cf8                 | __system___float_fromuns_ret
26cf8     2D 00 64 FD | 	ret
26cfc                 | 
26cfc                 | __system___float_add
26cfc     0F CA 05 F6 | 	mov	COUNT_, #15
26d00     E8 00 A0 FD | 	call	#pushregs_
26d04     49 A7 02 F6 | 	mov	local01, arg01
26d08     4A A9 02 F6 | 	mov	local02, arg02
26d0c     00 AA 06 F6 | 	mov	local03, #0
26d10     53 AD 02 F6 | 	mov	local04, local01
26d14     56 AF 02 F6 | 	mov	local05, local04
26d18     16 AE 46 F7 | 	zerox	local05, #22
26d1c     56 B1 02 F6 | 	mov	local06, local04
26d20     01 B0 66 F0 | 	shl	local06, #1
26d24     18 B0 46 F0 | 	shr	local06, #24
26d28     1F AC 46 F0 | 	shr	local04, #31
26d2c     54 93 02 F6 | 	mov	arg01, local02
26d30     49 7B 02 F6 | 	mov	result1, arg01
26d34     3D B3 02 F6 | 	mov	local07, result1
26d38     59 B5 02 F6 | 	mov	local08, local07
26d3c     16 B4 46 F7 | 	zerox	local08, #22
26d40     59 B7 02 F6 | 	mov	local09, local07
26d44     01 B6 66 F0 | 	shl	local09, #1
26d48     18 B6 46 F0 | 	shr	local09, #24
26d4c     5B B9 02 F6 | 	mov	local10, local09
26d50     1F B2 46 F0 | 	shr	local07, #31
26d54     00 BA 06 F6 | 	mov	local11, #0
26d58     00 BC 06 F6 | 	mov	local12, #0
26d5c     5C B1 12 F2 | 	cmp	local06, local10 wc
26d60     5C B1 0A 32 |  if_ae	cmp	local06, local10 wz
26d64     2C 00 90 1D |  if_a	jmp	#LR__3630
26d68     5A AF 12 32 |  if_ae	cmp	local05, local08 wc
26d6c     24 00 90 3D |  if_ae	jmp	#LR__3630
26d70     57 BF 02 F6 | 	mov	local13, local05
26d74     5A AF 02 F6 | 	mov	local05, local08
26d78     5F B5 02 F6 | 	mov	local08, local13
26d7c     58 BF 02 F6 | 	mov	local13, local06
26d80     5C B1 02 F6 | 	mov	local06, local10
26d84     5F B9 02 F6 | 	mov	local10, local13
26d88     56 BF 02 F6 | 	mov	local13, local04
26d8c     59 AD 02 F6 | 	mov	local04, local07
26d90     5F B3 02 F6 | 	mov	local07, local13
26d94                 | LR__3630
26d94     FF B0 0E F2 | 	cmp	local06, #255 wz
26d98     70 01 90 AD |  if_e	jmp	#LR__3645
26d9c     00 B0 0E F2 | 	cmp	local06, #0 wz
26da0     AC 01 90 AD |  if_e	jmp	#LR__3647
26da4     17 AE 26 F4 | 	bith	local05, #23
26da8                 | LR__3631
26da8     00 B8 0E F2 | 	cmp	local10, #0 wz
26dac     F0 01 90 AD |  if_e	jmp	#LR__3651
26db0     17 B4 26 F4 | 	bith	local08, #23
26db4                 | LR__3632
26db4     7F B0 86 F1 | 	sub	local06, #127
26db8     7F B8 86 F1 | 	sub	local10, #127
26dbc     58 C1 02 F6 | 	mov	local14, local06
26dc0     5C C1 82 F1 | 	sub	local14, local10
26dc4     D7 14 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
26dc8                 | LR__3633
26dc8     20 C0 56 F2 | 	cmps	local14, #32 wc
26dcc     20 00 90 CD |  if_b	jmp	#LR__3635
26dd0     5A B7 02 F6 | 	mov	local09, local08
26dd4     00 BA 0E F2 | 	cmp	local11, #0 wz
26dd8     6F BA 62 FD | 	wrnz	local11
26ddc     5D B7 42 F5 | 	or	local09, local11
26de0     5B BB 02 F6 | 	mov	local11, local09
26de4     00 B4 06 F6 | 	mov	local08, #0
26de8     20 C0 86 F1 | 	sub	local14, #32
26dec     D8 FF 9F FD | 	jmp	#LR__3633
26df0                 | LR__3634
26df0                 | LR__3635
26df0     00 C0 0E F2 | 	cmp	local14, #0 wz
26df4     38 00 90 AD |  if_e	jmp	#LR__3636
26df8     5A BF 02 F6 | 	mov	local13, local08
26dfc     20 B8 06 F6 | 	mov	local10, #32
26e00     60 B9 82 F1 | 	sub	local10, local14
26e04     5C BF 62 F0 | 	shl	local13, local10
26e08     5D B9 02 F6 | 	mov	local10, local11
26e0c     20 B6 06 F6 | 	mov	local09, #32
26e10     60 B7 82 F1 | 	sub	local09, local14
26e14     5B B9 6A F0 | 	shl	local10, local09 wz
26e18     60 BB 42 F0 | 	shr	local11, local14
26e1c     60 B5 42 F0 | 	shr	local08, local14
26e20     5F BB 42 F5 | 	or	local11, local13
26e24     00 C2 06 F6 | 	mov	local15, #0
26e28     01 C2 06 56 |  if_ne	mov	local15, #1
26e2c     61 BB 42 F5 | 	or	local11, local15
26e30                 | LR__3636
26e30     56 C3 02 F6 | 	mov	local15, local04
26e34     59 C3 62 F5 | 	xor	local15, local07
26e38     01 C2 CE F7 | 	test	local15, #1 wz
26e3c     18 00 90 AD |  if_e	jmp	#LR__3637
26e40     5A B5 22 F6 | 	not	local08, local08
26e44     5D BB 22 F6 | 	not	local11, local11
26e48     01 BA 0E F1 | 	add	local11, #1 wz
26e4c     00 C2 06 F6 | 	mov	local15, #0
26e50     01 C2 06 A6 |  if_e	mov	local15, #1
26e54     61 B5 02 F1 | 	add	local08, local15
26e58                 | LR__3637
26e58     5D BD 12 F1 | 	add	local12, local11 wc
26e5c     5A AF 22 F1 | 	addx	local05, local08
26e60     00 AE 56 F2 | 	cmps	local05, #0 wc
26e64     1C 00 90 3D |  if_ae	jmp	#LR__3638
26e68     01 AC 66 F5 | 	xor	local04, #1
26e6c     57 AF 22 F6 | 	not	local05, local05
26e70     5E BD 22 F6 | 	not	local12, local12
26e74     01 BC 0E F1 | 	add	local12, #1 wz
26e78     00 C2 06 F6 | 	mov	local15, #0
26e7c     01 C2 06 A6 |  if_e	mov	local15, #1
26e80     61 AF 02 F1 | 	add	local05, local15
26e84                 | LR__3638
26e84     00 80 00 FF 
26e88     00 AE 16 F2 | 	cmp	local05, ##16777216 wc
26e8c     28 00 90 CD |  if_b	jmp	#LR__3639
26e90     01 B0 06 F1 | 	add	local06, #1
26e94     5E C1 02 F6 | 	mov	local14, local12
26e98     01 C0 06 F5 | 	and	local14, #1
26e9c     01 BC 46 F0 | 	shr	local12, #1
26ea0     57 C3 02 F6 | 	mov	local15, local05
26ea4     1F C2 66 F0 | 	shl	local15, #31
26ea8     61 BD 42 F5 | 	or	local12, local15
26eac     60 BD 42 F5 | 	or	local12, local14
26eb0     01 AE 46 F0 | 	shr	local05, #1
26eb4     3C 00 90 FD | 	jmp	#LR__3644
26eb8                 | LR__3639
26eb8     00 40 00 FF 
26ebc     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26ec0     30 00 90 3D |  if_ae	jmp	#LR__3643
26ec4     00 AE 0E F2 | 	cmp	local05, #0 wz
26ec8     00 BC 0E A2 |  if_e	cmp	local12, #0 wz
26ecc     08 AC 46 A5 |  if_e	or	local04, #8
26ed0     01 AC 26 A5 |  if_e	andn	local04, #1
26ed4     1C 00 90 AD |  if_e	jmp	#LR__3642
26ed8                 | LR__3640
26ed8     00 40 00 FF 
26edc     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26ee0     10 00 90 3D |  if_ae	jmp	#LR__3641
26ee4     5E BD 12 F1 | 	add	local12, local12 wc
26ee8     57 AF 22 F1 | 	addx	local05, local05
26eec     01 B0 86 F1 | 	sub	local06, #1
26ef0     E4 FF 9F FD | 	jmp	#LR__3640
26ef4                 | LR__3641
26ef4                 | LR__3642
26ef4                 | LR__3643
26ef4                 | LR__3644
26ef4     57 93 02 F6 | 	mov	arg01, local05
26ef8     5E 95 02 F6 | 	mov	arg02, local12
26efc     58 97 02 F6 | 	mov	arg03, local06
26f00     56 99 02 F6 | 	mov	arg04, local04
26f04     50 34 B0 FD | 	call	#__system__pack_0698
26f08     DC 00 90 FD | 	jmp	#LR__3655
26f0c                 | LR__3645
26f0c     FF B8 0E F2 | 	cmp	local10, #255 wz
26f10     10 00 90 5D |  if_ne	jmp	#LR__3646
26f14     56 B3 0A F2 | 	cmp	local07, local04 wz
26f18     00 F8 3F 5F 
26f1c     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26f20     C4 00 90 5D |  if_ne	jmp	#LR__3655
26f24                 | LR__3646
26f24     00 AE 0E F2 | 	cmp	local05, #0 wz
26f28     00 F8 3F 5F 
26f2c     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26f30     B4 00 90 5D |  if_ne	jmp	#LR__3655
26f34     5E 95 02 F6 | 	mov	arg02, local12
26f38     58 97 02 F6 | 	mov	arg03, local06
26f3c     56 99 02 F6 | 	mov	arg04, local04
26f40     02 98 46 F5 | 	or	arg04, #2
26f44     57 93 02 F6 | 	mov	arg01, local05
26f48     0C 34 B0 FD | 	call	#__system__pack_0698
26f4c     98 00 90 FD | 	jmp	#LR__3655
26f50                 | LR__3647
26f50     00 AE 0E F2 | 	cmp	local05, #0 wz
26f54     28 00 90 AD |  if_e	jmp	#LR__3650
26f58     01 AE 66 F0 | 	shl	local05, #1
26f5c     D7 0E 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
26f60                 | LR__3648
26f60     00 40 00 FF 
26f64     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26f68     58 C3 02 C6 |  if_b	mov	local15, local06
26f6c     01 C2 86 C1 |  if_b	sub	local15, #1
26f70     61 B1 02 C6 |  if_b	mov	local06, local15
26f74     01 AE 66 C0 |  if_b	shl	local05, #1
26f78     E4 FF 9F CD |  if_b	jmp	#LR__3648
26f7c                 | LR__3649
26f7c     28 FE 9F FD | 	jmp	#LR__3631
26f80                 | LR__3650
26f80     59 AD 02 F5 | 	and	local04, local07
26f84     56 99 02 F6 | 	mov	arg04, local04
26f88     08 98 46 F5 | 	or	arg04, #8
26f8c     00 92 06 F6 | 	mov	arg01, #0
26f90     00 94 06 F6 | 	mov	arg02, #0
26f94     00 96 06 F6 | 	mov	arg03, #0
26f98     BC 33 B0 FD | 	call	#__system__pack_0698
26f9c     48 00 90 FD | 	jmp	#LR__3655
26fa0                 | LR__3651
26fa0     00 B4 0E F2 | 	cmp	local08, #0 wz
26fa4     28 00 90 AD |  if_e	jmp	#LR__3654
26fa8     01 B4 66 F0 | 	shl	local08, #1
26fac     D7 0E 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
26fb0                 | LR__3652
26fb0     00 40 00 FF 
26fb4     00 B4 16 F2 | 	cmp	local08, ##8388608 wc
26fb8     5C C3 02 C6 |  if_b	mov	local15, local10
26fbc     01 C2 86 C1 |  if_b	sub	local15, #1
26fc0     61 B9 02 C6 |  if_b	mov	local10, local15
26fc4     01 B4 66 C0 |  if_b	shl	local08, #1
26fc8     E4 FF 9F CD |  if_b	jmp	#LR__3652
26fcc                 | LR__3653
26fcc     E4 FD 9F FD | 	jmp	#LR__3632
26fd0                 | LR__3654
26fd0     7F B0 86 F1 | 	sub	local06, #127
26fd4     57 93 02 F6 | 	mov	arg01, local05
26fd8     5E 95 02 F6 | 	mov	arg02, local12
26fdc     58 97 02 F6 | 	mov	arg03, local06
26fe0     56 99 02 F6 | 	mov	arg04, local04
26fe4     70 33 B0 FD | 	call	#__system__pack_0698
26fe8                 | LR__3655
26fe8     E7 F0 03 F6 | 	mov	ptra, fp
26fec     F2 00 A0 FD | 	call	#popregs_
26ff0                 | __system___float_add_ret
26ff0     2D 00 64 FD | 	ret
26ff4                 | 
26ff4                 | __system___float_sqrt
26ff4     04 CA 05 F6 | 	mov	COUNT_, #4
26ff8     E8 00 A0 FD | 	call	#pushregs_
26ffc     49 A7 02 F6 | 	mov	local01, arg01
27000     49 7B 02 F6 | 	mov	result1, arg01
27004     3D A9 02 F6 | 	mov	local02, result1
27008     54 AB 02 F6 | 	mov	local03, local02
2700c     16 AA 46 F7 | 	zerox	local03, #22
27010     54 AD 02 F6 | 	mov	local04, local02
27014     01 AC 66 F0 | 	shl	local04, #1
27018     18 AC 4E F0 | 	shr	local04, #24 wz
2701c     1F A8 46 F0 | 	shr	local02, #31
27020     70 00 90 AD |  if_e	jmp	#LR__3661
27024     17 AA 26 F4 | 	bith	local03, #23
27028                 | LR__3660
27028     00 A8 0E F2 | 	cmp	local02, #0 wz
2702c     00 F8 3F 5F 
27030     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
27034     88 00 90 5D |  if_ne	jmp	#LR__3664
27038     FF AC 0E F2 | 	cmp	local04, #255 wz
2703c     53 7B 02 A6 |  if_e	mov	result1, local01
27040     7C 00 90 AD |  if_e	jmp	#LR__3664
27044     7F AC 86 F1 | 	sub	local04, #127
27048     01 AC CE F7 | 	test	local04, #1 wz
2704c     01 AA 66 50 |  if_ne	shl	local03, #1
27050     05 AA 66 F0 | 	shl	local03, #5
27054     55 01 38 FD | 	qsqrt	#0, local03
27058     01 AC 86 51 |  if_ne	sub	local04, #1
2705c     56 AD 52 F6 | 	abs	local04, local04 wc
27060     01 AC 46 F0 | 	shr	local04, #1
27064     56 97 82 F6 | 	negc	arg03, local04
27068     54 99 02 F6 | 	mov	arg04, local02
2706c     18 92 62 FD | 	getqx	arg01
27070     49 95 02 F6 | 	mov	arg02, arg01
27074     19 94 66 F0 | 	shl	arg02, #25
27078     07 92 46 F0 | 	shr	arg01, #7
2707c     00 80 00 FF 
27080     01 92 16 F2 | 	cmp	arg01, ##16777217 wc
27084     01 96 06 31 |  if_ae	add	arg03, #1
27088     01 92 46 30 |  if_ae	shr	arg01, #1
2708c     C8 32 B0 FD | 	call	#__system__pack_0698
27090     2C 00 90 FD | 	jmp	#LR__3664
27094                 | LR__3661
27094     00 AA 0E F2 | 	cmp	local03, #0 wz
27098     53 7B 02 A6 |  if_e	mov	result1, local01
2709c     20 00 90 AD |  if_e	jmp	#LR__3664
270a0     01 AA 66 F0 | 	shl	local03, #1
270a4     D7 0A 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
270a8                 | LR__3662
270a8     00 40 00 FF 
270ac     00 AA 16 F2 | 	cmp	local03, ##8388608 wc
270b0     01 AC 86 C1 |  if_b	sub	local04, #1
270b4     01 AA 66 C0 |  if_b	shl	local03, #1
270b8     EC FF 9F CD |  if_b	jmp	#LR__3662
270bc                 | LR__3663
270bc     68 FF 9F FD | 	jmp	#LR__3660
270c0                 | LR__3664
270c0     E7 F0 03 F6 | 	mov	ptra, fp
270c4     F2 00 A0 FD | 	call	#popregs_
270c8                 | __system___float_sqrt_ret
270c8     2D 00 64 FD | 	ret
270cc                 | 
270cc                 | __system___float_mul
270cc     0B CA 05 F6 | 	mov	COUNT_, #11
270d0     E8 00 A0 FD | 	call	#pushregs_
270d4     49 A7 02 F6 | 	mov	local01, arg01
270d8     4A A9 02 F6 | 	mov	local02, arg02
270dc     53 AB 02 F6 | 	mov	local03, local01
270e0     55 AD 02 F6 | 	mov	local04, local03
270e4     16 AC 46 F7 | 	zerox	local04, #22
270e8     55 AF 02 F6 | 	mov	local05, local03
270ec     01 AE 66 F0 | 	shl	local05, #1
270f0     18 AE 46 F0 | 	shr	local05, #24
270f4     1F AA 46 F0 | 	shr	local03, #31
270f8     54 7B 02 F6 | 	mov	result1, local02
270fc     3D B1 02 F6 | 	mov	local06, result1
27100     58 B3 02 F6 | 	mov	local07, local06
27104     16 B2 46 F7 | 	zerox	local07, #22
27108     58 B5 02 F6 | 	mov	local08, local06
2710c     01 B4 66 F0 | 	shl	local08, #1
27110     18 B4 46 F0 | 	shr	local08, #24
27114     1F B0 46 F0 | 	shr	local06, #31
27118     58 AB 62 F5 | 	xor	local03, local06
2711c     FF AE 0E F2 | 	cmp	local05, #255 wz
27120     90 00 90 AD |  if_e	jmp	#LR__3673
27124     FF B4 0E F2 | 	cmp	local08, #255 wz
27128     D8 00 90 AD |  if_e	jmp	#LR__3675
2712c     00 AE 0E F2 | 	cmp	local05, #0 wz
27130     0C 01 90 AD |  if_e	jmp	#LR__3676
27134     17 AC 26 F4 | 	bith	local04, #23
27138                 | LR__3670
27138     00 B4 0E F2 | 	cmp	local08, #0 wz
2713c     44 01 90 AD |  if_e	jmp	#LR__3680
27140     17 B2 26 F4 | 	bith	local07, #23
27144                 | LR__3671
27144     56 A9 02 F6 | 	mov	local02, local04
27148     04 A8 66 F0 | 	shl	local02, #4
2714c     59 B1 02 F6 | 	mov	local06, local07
27150     05 B0 66 F0 | 	shl	local06, #5
27154     58 A9 02 FD | 	qmul	local02, local06
27158     5A AF 02 F1 | 	add	local05, local08
2715c     FE AE 86 F1 | 	sub	local05, #254
27160     57 B7 02 F6 | 	mov	local09, local05
27164     04 AC 66 F0 | 	shl	local04, #4
27168     05 B2 66 F0 | 	shl	local07, #5
2716c     18 B8 62 FD | 	getqx	local10
27170     59 AD 02 FD | 	qmul	local04, local07
27174     19 BA 62 FD | 	getqy	local11
27178     00 80 00 FF 
2717c     00 BA 16 F2 | 	cmp	local11, ##16777216 wc
27180     18 00 90 CD |  if_b	jmp	#LR__3672
27184     01 B6 06 F1 | 	add	local09, #1
27188     01 B8 46 F0 | 	shr	local10, #1
2718c     5D B5 02 F6 | 	mov	local08, local11
27190     1F B4 66 F0 | 	shl	local08, #31
27194     5A B9 42 F5 | 	or	local10, local08
27198     01 BA 46 F0 | 	shr	local11, #1
2719c                 | LR__3672
2719c     5D 93 02 F6 | 	mov	arg01, local11
271a0     5C 95 02 F6 | 	mov	arg02, local10
271a4     5B 97 02 F6 | 	mov	arg03, local09
271a8     55 99 02 F6 | 	mov	arg04, local03
271ac     A8 31 B0 FD | 	call	#__system__pack_0698
271b0     10 01 90 FD | 	jmp	#LR__3684
271b4                 | LR__3673
271b4     00 AC 0E F2 | 	cmp	local04, #0 wz
271b8     53 7B 02 56 |  if_ne	mov	result1, local01
271bc     04 01 90 5D |  if_ne	jmp	#LR__3684
271c0     FF B4 56 F2 | 	cmps	local08, #255 wc
271c4     00 B4 0E C2 |  if_b	cmp	local08, #0 wz
271c8     00 B2 0E 82 |  if_c_and_z	cmp	local07, #0 wz
271cc     18 00 90 4D |  if_c_and_nz	jmp	#LR__3674
271d0     00 F8 3F CF 
271d4     00 7A 06 C6 |  if_b	mov	result1, ##2146435072
271d8     E8 00 90 CD |  if_b	jmp	#LR__3684
271dc     00 B2 0E F2 | 	cmp	local07, #0 wz
271e0     54 7B 02 56 |  if_ne	mov	result1, local02
271e4     DC 00 90 5D |  if_ne	jmp	#LR__3684
271e8                 | LR__3674
271e8     02 AA 46 F5 | 	or	local03, #2
271ec     00 92 06 F6 | 	mov	arg01, #0
271f0     00 94 06 F6 | 	mov	arg02, #0
271f4     57 97 02 F6 | 	mov	arg03, local05
271f8     55 99 02 F6 | 	mov	arg04, local03
271fc     58 31 B0 FD | 	call	#__system__pack_0698
27200     C0 00 90 FD | 	jmp	#LR__3684
27204                 | LR__3675
27204     00 AE 0E F2 | 	cmp	local05, #0 wz
27208     00 AC 0E A2 |  if_e	cmp	local04, #0 wz
2720c     00 F8 3F AF 
27210     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27214     AC 00 90 AD |  if_e	jmp	#LR__3684
27218     00 B2 0E F2 | 	cmp	local07, #0 wz
2721c     54 7B 02 56 |  if_ne	mov	result1, local02
27220     A0 00 90 5D |  if_ne	jmp	#LR__3684
27224     5A 97 02 F6 | 	mov	arg03, local08
27228     55 99 02 F6 | 	mov	arg04, local03
2722c     02 98 46 F5 | 	or	arg04, #2
27230     00 92 06 F6 | 	mov	arg01, #0
27234     00 94 06 F6 | 	mov	arg02, #0
27238     1C 31 B0 FD | 	call	#__system__pack_0698
2723c     84 00 90 FD | 	jmp	#LR__3684
27240                 | LR__3676
27240     00 AC 0E F2 | 	cmp	local04, #0 wz
27244     20 00 90 AD |  if_e	jmp	#LR__3679
27248     01 AC 66 F0 | 	shl	local04, #1
2724c     D7 0A 48 FB | 	callpa	#(@LR__3678-@LR__3677)>>2,fcache_load_ptr_
27250                 | LR__3677
27250     00 40 00 FF 
27254     00 AC 16 F2 | 	cmp	local04, ##8388608 wc
27258     01 AE 86 C1 |  if_b	sub	local05, #1
2725c     01 AC 66 C0 |  if_b	shl	local04, #1
27260     EC FF 9F CD |  if_b	jmp	#LR__3677
27264                 | LR__3678
27264     D0 FE 9F FD | 	jmp	#LR__3670
27268                 | LR__3679
27268     08 AA 46 F5 | 	or	local03, #8
2726c     00 92 06 F6 | 	mov	arg01, #0
27270     00 94 06 F6 | 	mov	arg02, #0
27274     00 96 06 F6 | 	mov	arg03, #0
27278     55 99 02 F6 | 	mov	arg04, local03
2727c     D8 30 B0 FD | 	call	#__system__pack_0698
27280     40 00 90 FD | 	jmp	#LR__3684
27284                 | LR__3680
27284     00 B2 0E F2 | 	cmp	local07, #0 wz
27288     20 00 90 AD |  if_e	jmp	#LR__3683
2728c     01 B2 66 F0 | 	shl	local07, #1
27290     D7 0A 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
27294                 | LR__3681
27294     00 40 00 FF 
27298     00 B2 16 F2 | 	cmp	local07, ##8388608 wc
2729c     01 B4 86 C1 |  if_b	sub	local08, #1
272a0     01 B2 66 C0 |  if_b	shl	local07, #1
272a4     EC FF 9F CD |  if_b	jmp	#LR__3681
272a8                 | LR__3682
272a8     98 FE 9F FD | 	jmp	#LR__3671
272ac                 | LR__3683
272ac     08 AA 46 F5 | 	or	local03, #8
272b0     00 92 06 F6 | 	mov	arg01, #0
272b4     00 94 06 F6 | 	mov	arg02, #0
272b8     00 96 06 F6 | 	mov	arg03, #0
272bc     55 99 02 F6 | 	mov	arg04, local03
272c0     94 30 B0 FD | 	call	#__system__pack_0698
272c4                 | LR__3684
272c4     E7 F0 03 F6 | 	mov	ptra, fp
272c8     F2 00 A0 FD | 	call	#popregs_
272cc                 | __system___float_mul_ret
272cc     2D 00 64 FD | 	ret
272d0                 | 
272d0                 | __system___float_div
272d0     0E CA 05 F6 | 	mov	COUNT_, #14
272d4     E8 00 A0 FD | 	call	#pushregs_
272d8     49 AB 02 F6 | 	mov	local03, arg01
272dc     4A AD 02 F6 | 	mov	local04, arg02
272e0     55 AF 02 F6 | 	mov	local05, local03
272e4     57 B1 02 F6 | 	mov	local06, local05
272e8     16 B0 46 F7 | 	zerox	local06, #22
272ec     57 B3 02 F6 | 	mov	local07, local05
272f0     01 B2 66 F0 | 	shl	local07, #1
272f4     18 B2 46 F0 | 	shr	local07, #24
272f8     1F AE 46 F0 | 	shr	local05, #31
272fc     56 7B 02 F6 | 	mov	result1, local04
27300     3D B5 02 F6 | 	mov	local08, result1
27304     5A B7 02 F6 | 	mov	local09, local08
27308     16 B6 46 F7 | 	zerox	local09, #22
2730c     5A B9 02 F6 | 	mov	local10, local08
27310     01 B8 66 F0 | 	shl	local10, #1
27314     18 B8 46 F0 | 	shr	local10, #24
27318     1F B4 46 F0 | 	shr	local08, #31
2731c     5A AF 62 F5 | 	xor	local05, local08
27320     FF B2 0E F2 | 	cmp	local07, #255 wz
27324     D4 00 90 AD |  if_e	jmp	#LR__3695
27328     FF B8 0E F2 | 	cmp	local10, #255 wz
2732c     04 01 90 AD |  if_e	jmp	#LR__3696
27330     00 B2 0E F2 | 	cmp	local07, #0 wz
27334     24 01 90 AD |  if_e	jmp	#LR__3697
27338     17 B0 26 F4 | 	bith	local06, #23
2733c                 | LR__3690
2733c     00 B8 0E F2 | 	cmp	local10, #0 wz
27340     70 01 90 AD |  if_e	jmp	#LR__3701
27344     17 B6 26 F4 | 	bith	local09, #23
27348                 | LR__3691
27348     5C B3 82 F1 | 	sub	local07, local10
2734c     59 BB 02 F6 | 	mov	local11, local07
27350     58 93 02 F6 | 	mov	arg01, local06
27354     02 92 46 F0 | 	shr	arg01, #2
27358     1E B0 66 F0 | 	shl	local06, #30
2735c     58 95 02 F6 | 	mov	arg02, local06
27360     5B 97 02 F6 | 	mov	arg03, local09
27364     28 92 62 FD | 	setq	arg01
27368     4B 95 12 FD | 	qdiv	arg02, arg03
2736c     00 BC 06 F6 | 	mov	local12, #0
27370     18 A6 62 FD | 	getqx	local01
27374     19 7C 62 FD | 	getqy	result2
27378     3E A9 02 F6 | 	mov	local02, result2
2737c     53 BF 02 F6 | 	mov	local13, local01
27380     00 A8 4E F2 | 	cmps	local02, #0 wz
27384     5F C1 02 F6 | 	mov	local14, local13
27388     19 C0 66 F0 | 	shl	local14, #25
2738c     01 BC 06 56 |  if_ne	mov	local12, #1
27390     5E C1 42 F5 | 	or	local14, local12
27394     07 BE 46 F0 | 	shr	local13, #7
27398     00 80 00 FF 
2739c     00 BE 16 F2 | 	cmp	local13, ##16777216 wc
273a0     1C 00 90 CD |  if_b	jmp	#LR__3692
273a4     01 BA 06 F1 | 	add	local11, #1
273a8     01 C0 46 F0 | 	shr	local14, #1
273ac     5F BD 02 F6 | 	mov	local12, local13
273b0     1F BC 66 F0 | 	shl	local12, #31
273b4     5E C1 42 F5 | 	or	local14, local12
273b8     01 BE 46 F0 | 	shr	local13, #1
273bc     24 00 90 FD | 	jmp	#LR__3694
273c0                 | LR__3692
273c0     00 40 00 FF 
273c4     00 BE 16 F2 | 	cmp	local13, ##8388608 wc
273c8     18 00 90 3D |  if_ae	jmp	#LR__3693
273cc     01 BA 86 F1 | 	sub	local11, #1
273d0     01 BE 66 F0 | 	shl	local13, #1
273d4     60 BD 02 F6 | 	mov	local12, local14
273d8     1F BC 46 F0 | 	shr	local12, #31
273dc     5E BF 42 F5 | 	or	local13, local12
273e0     01 C0 66 F0 | 	shl	local14, #1
273e4                 | LR__3693
273e4                 | LR__3694
273e4     5F 93 02 F6 | 	mov	arg01, local13
273e8     60 95 02 F6 | 	mov	arg02, local14
273ec     5D 97 02 F6 | 	mov	arg03, local11
273f0     57 99 02 F6 | 	mov	arg04, local05
273f4     60 2F B0 FD | 	call	#__system__pack_0698
273f8     F8 00 90 FD | 	jmp	#LR__3705
273fc                 | LR__3695
273fc     00 B0 0E F2 | 	cmp	local06, #0 wz
27400     55 7B 02 56 |  if_ne	mov	result1, local03
27404     EC 00 90 5D |  if_ne	jmp	#LR__3705
27408     FF B8 0E F2 | 	cmp	local10, #255 wz
2740c     00 F8 3F AF 
27410     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27414     DC 00 90 AD |  if_e	jmp	#LR__3705
27418     02 AE 46 F5 | 	or	local05, #2
2741c     00 92 06 F6 | 	mov	arg01, #0
27420     00 94 06 F6 | 	mov	arg02, #0
27424     59 97 02 F6 | 	mov	arg03, local07
27428     57 99 02 F6 | 	mov	arg04, local05
2742c     28 2F B0 FD | 	call	#__system__pack_0698
27430     C0 00 90 FD | 	jmp	#LR__3705
27434                 | LR__3696
27434     00 B6 0E F2 | 	cmp	local09, #0 wz
27438     56 7B 02 56 |  if_ne	mov	result1, local04
2743c     B4 00 90 5D |  if_ne	jmp	#LR__3705
27440     57 99 02 F6 | 	mov	arg04, local05
27444     08 98 46 F5 | 	or	arg04, #8
27448     00 92 06 F6 | 	mov	arg01, #0
2744c     00 94 06 F6 | 	mov	arg02, #0
27450     00 96 06 F6 | 	mov	arg03, #0
27454     00 2F B0 FD | 	call	#__system__pack_0698
27458     98 00 90 FD | 	jmp	#LR__3705
2745c                 | LR__3697
2745c     00 B0 0E F2 | 	cmp	local06, #0 wz
27460     20 00 90 AD |  if_e	jmp	#LR__3700
27464     01 B0 66 F0 | 	shl	local06, #1
27468     D7 0A 48 FB | 	callpa	#(@LR__3699-@LR__3698)>>2,fcache_load_ptr_
2746c                 | LR__3698
2746c     00 40 00 FF 
27470     00 B0 16 F2 | 	cmp	local06, ##8388608 wc
27474     01 B2 86 C1 |  if_b	sub	local07, #1
27478     01 B0 66 C0 |  if_b	shl	local06, #1
2747c     EC FF 9F CD |  if_b	jmp	#LR__3698
27480                 | LR__3699
27480     B8 FE 9F FD | 	jmp	#LR__3690
27484                 | LR__3700
27484     00 B8 0E F2 | 	cmp	local10, #0 wz
27488     00 B6 0E A2 |  if_e	cmp	local09, #0 wz
2748c     00 F8 3F AF 
27490     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27494     5C 00 90 AD |  if_e	jmp	#LR__3705
27498     57 99 02 F6 | 	mov	arg04, local05
2749c     08 98 46 F5 | 	or	arg04, #8
274a0     00 92 06 F6 | 	mov	arg01, #0
274a4     00 94 06 F6 | 	mov	arg02, #0
274a8     00 96 06 F6 | 	mov	arg03, #0
274ac     A8 2E B0 FD | 	call	#__system__pack_0698
274b0     40 00 90 FD | 	jmp	#LR__3705
274b4                 | LR__3701
274b4     00 B6 0E F2 | 	cmp	local09, #0 wz
274b8     20 00 90 AD |  if_e	jmp	#LR__3704
274bc     01 B6 66 F0 | 	shl	local09, #1
274c0     D7 0A 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
274c4                 | LR__3702
274c4     00 40 00 FF 
274c8     00 B6 16 F2 | 	cmp	local09, ##8388608 wc
274cc     01 B8 86 C1 |  if_b	sub	local10, #1
274d0     01 B6 66 C0 |  if_b	shl	local09, #1
274d4     EC FF 9F CD |  if_b	jmp	#LR__3702
274d8                 | LR__3703
274d8     6C FE 9F FD | 	jmp	#LR__3691
274dc                 | LR__3704
274dc     02 AE 46 F5 | 	or	local05, #2
274e0     00 92 06 F6 | 	mov	arg01, #0
274e4     00 94 06 F6 | 	mov	arg02, #0
274e8     00 96 06 F6 | 	mov	arg03, #0
274ec     57 99 02 F6 | 	mov	arg04, local05
274f0     64 2E B0 FD | 	call	#__system__pack_0698
274f4                 | LR__3705
274f4     E7 F0 03 F6 | 	mov	ptra, fp
274f8     F2 00 A0 FD | 	call	#popregs_
274fc                 | __system___float_div_ret
274fc     2D 00 64 FD | 	ret
27500                 | 
27500                 | __system___float_cmp
27500     00 C0 3F FF 
27504     01 92 56 F2 | 	cmps	arg01, ##2139095041 wc
27508     00 C0 3F CF 
2750c     01 94 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
27510     4B 7B 02 36 |  if_ae	mov	result1, arg03
27514     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27518     00 C0 7F FF 
2751c     01 92 16 F2 | 	cmp	arg01, ##-8388607 wc
27520     00 C0 7F CF 
27524     01 92 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
27528     4B 7B 02 36 |  if_ae	mov	result1, arg03
2752c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27530     00 92 56 F2 | 	cmps	arg01, #0 wc
27534     2C 00 90 3D |  if_ae	jmp	#LR__3710
27538     00 94 56 F2 | 	cmps	arg02, #0 wc
2753c     4A 7B 02 C6 |  if_b	mov	result1, arg02
27540     49 7B 82 C1 |  if_b	sub	result1, arg01
27544     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27548     00 94 0E F2 | 	cmp	arg02, #0 wz
2754c     00 00 40 AF 
27550     00 92 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
27554     00 7A 06 A6 |  if_e	mov	result1, #0
27558     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2755c     01 7A 66 F6 | 	neg	result1, #1
27560     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27564                 | LR__3710
27564     00 94 56 F2 | 	cmps	arg02, #0 wc
27568     1C 00 90 3D |  if_ae	jmp	#LR__3711
2756c     00 92 0E F2 | 	cmp	arg01, #0 wz
27570     00 00 40 AF 
27574     00 94 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27578     00 7A 06 A6 |  if_e	mov	result1, #0
2757c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27580     01 7A 06 F6 | 	mov	result1, #1
27584     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27588                 | LR__3711
27588     4A 93 82 F1 | 	sub	arg01, arg02
2758c     49 7B 02 F6 | 	mov	result1, arg01
27590                 | __system___float_cmp_ret
27590     2D 00 64 FD | 	ret
27594                 | 
27594                 | __system___float_tointeger
27594     02 CA 05 F6 | 	mov	COUNT_, #2
27598     E8 00 A0 FD | 	call	#pushregs_
2759c     5C 00 B0 FD | 	call	#__system___float_Unpack
275a0     3D A7 02 F6 | 	mov	local01, result1
275a4     1F 7C 56 F2 | 	cmps	result2, #31 wc
275a8     00 A6 0E 32 |  if_ae	cmp	local01, #0 wz
275ac     1F A8 C6 19 |  if_a	decod	local02, #31
275b0     1E A8 CE 29 |  if_nc_and_z	bmask	local02, #30
275b4     54 7F 02 36 |  if_ae	mov	result3, local02
275b8     30 00 90 3D |  if_ae	jmp	#LR__3721
275bc     FF FF 7F FF 
275c0     FF 7D 56 F2 | 	cmps	result2, ##-1 wc
275c4     00 7E 06 C6 |  if_b	mov	result3, #0
275c8     20 00 90 CD |  if_b	jmp	#LR__3720
275cc     02 7E 66 F0 | 	shl	result3, #2
275d0     1E A8 06 F6 | 	mov	local02, #30
275d4     3E A9 82 F1 | 	sub	local02, result2
275d8     54 7F 42 F0 | 	shr	result3, local02
275dc     4A 7F 02 F1 | 	add	result3, arg02
275e0     01 7E 46 F0 | 	shr	result3, #1
275e4     00 A6 0E F2 | 	cmp	local01, #0 wz
275e8     3F 7F 62 56 |  if_ne	neg	result3, result3
275ec                 | LR__3720
275ec                 | LR__3721
275ec     3F 7B 02 F6 | 	mov	result1, result3
275f0     E7 F0 03 F6 | 	mov	ptra, fp
275f4     F2 00 A0 FD | 	call	#popregs_
275f8                 | __system___float_tointeger_ret
275f8     2D 00 64 FD | 	ret
275fc                 | 
275fc                 | __system___float_Unpack
275fc     49 81 02 F6 | 	mov	_var01, arg01
27600     1F 80 46 F0 | 	shr	_var01, #31
27604     49 83 02 F6 | 	mov	_var02, arg01
27608     01 82 66 F0 | 	shl	_var02, #1
2760c     18 82 4E F0 | 	shr	_var02, #24 wz
27610     17 93 06 F4 | 	bitl	arg01, #279
27614     06 92 66 50 |  if_ne	shl	arg01, #6
27618     1D 92 26 54 |  if_ne	bith	arg01, #29
2761c     1C 00 90 5D |  if_ne	jmp	#LR__3730
27620     49 85 92 F7 | 	encod	_var03, arg01 wc
27624     01 84 06 C1 |  if_b	add	_var03, #1
27628     17 84 86 F1 | 	sub	_var03, #23
2762c     42 83 02 F6 | 	mov	_var02, _var03
27630     07 7C 06 F6 | 	mov	result2, #7
27634     42 7D 82 F1 | 	sub	result2, _var03
27638     3E 93 62 F0 | 	shl	arg01, result2
2763c                 | LR__3730
2763c     7F 82 86 F1 | 	sub	_var02, #127
27640     49 7F 02 F6 | 	mov	result3, arg01
27644     40 7B 02 F6 | 	mov	result1, _var01
27648     41 7D 02 F6 | 	mov	result2, _var02
2764c                 | __system___float_Unpack_ret
2764c     2D 00 64 FD | 	ret
27650                 | 
27650                 | __system___float_Pack
27650     00 80 06 F6 | 	mov	_var01, #0
27654     00 96 0E F2 | 	cmp	arg03, #0 wz
27658     8C 00 90 AD |  if_e	jmp	#LR__3741
2765c     4B 83 92 F7 | 	encod	_var02, arg03 wc
27660     01 82 06 C1 |  if_b	add	_var02, #1
27664     21 80 06 F6 | 	mov	_var01, #33
27668     41 81 82 F1 | 	sub	_var01, _var02
2766c     40 97 62 F0 | 	shl	arg03, _var01
27670     03 82 06 F6 | 	mov	_var02, #3
27674     40 83 82 F1 | 	sub	_var02, _var01
27678     41 95 02 F1 | 	add	arg02, _var02
2767c     4A 85 02 F6 | 	mov	_var03, arg02
27680     00 97 06 F1 | 	add	arg03, #256
27684     4B 83 02 F6 | 	mov	_var02, arg03
27688     FF 82 2E F5 | 	andn	_var02, #255 wz
2768c     01 84 06 A1 |  if_e	add	_var03, #1
27690     7F 84 06 F1 | 	add	_var03, #127
27694     FF FF 7F FF 
27698     E9 85 46 F3 | 	fges	_var03, ##-23
2769c     FF 84 66 F3 | 	fles	_var03, #255
276a0     01 84 56 F2 | 	cmps	_var03, #1 wc
276a4     1C 00 90 3D |  if_ae	jmp	#LR__3740
276a8     01 96 46 F0 | 	shr	arg03, #1
276ac     1F 82 C6 F9 | 	decod	_var02, #31
276b0     4B 83 02 F1 | 	add	_var02, arg03
276b4     42 85 62 F6 | 	neg	_var03, _var03
276b8     42 83 42 F0 | 	shr	_var02, _var03
276bc     41 97 02 F6 | 	mov	arg03, _var02
276c0     00 84 06 F6 | 	mov	_var03, #0
276c4                 | LR__3740
276c4     49 7B 02 F6 | 	mov	result1, arg01
276c8     1F 7A 66 F0 | 	shl	result1, #31
276cc     42 83 02 F6 | 	mov	_var02, _var03
276d0     17 82 66 F0 | 	shl	_var02, #23
276d4     41 7B 42 F5 | 	or	result1, _var02
276d8     4B 87 02 F6 | 	mov	_var04, arg03
276dc     09 86 46 F0 | 	shr	_var04, #9
276e0     43 7B 42 F5 | 	or	result1, _var04
276e4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
276e8                 | LR__3741
276e8     40 7B 02 F6 | 	mov	result1, _var01
276ec                 | __system___float_Pack_ret
276ec     2D 00 64 FD | 	ret
276f0                 | 
276f0                 | __system___basic_print_float
276f0     05 CA 05 F6 | 	mov	COUNT_, #5
276f4     E8 00 A0 FD | 	call	#pushregs_
276f8     49 A7 02 F6 | 	mov	local01, arg01
276fc     4A A9 02 F6 | 	mov	local02, arg02
27700     4B AB 0A F6 | 	mov	local03, arg03 wz
27704     4C AD 02 F6 | 	mov	local04, arg04
27708     14 00 90 5D |  if_ne	jmp	#LR__3750
2770c     23 AC 0E F2 | 	cmp	local04, #35 wz
27710     80 02 10 AF 
27714     00 AE 06 A6 |  if_e	mov	local05, ##537198592
27718     1D AE C6 59 |  if_ne	decod	local05, #29
2771c     57 AB 02 F6 | 	mov	local03, local05
27720                 | LR__3750
27720     53 93 02 F6 | 	mov	arg01, local01
27724     A0 28 B0 FD | 	call	#__system___gettxfunc
27728     3D AF 0A F6 | 	mov	local05, result1 wz
2772c     00 7A 06 A6 |  if_e	mov	result1, #0
27730     57 93 02 56 |  if_ne	mov	arg01, local05
27734     55 95 02 56 |  if_ne	mov	arg02, local03
27738     54 97 02 56 |  if_ne	mov	arg03, local02
2773c     56 99 02 56 |  if_ne	mov	arg04, local04
27740     00 E4 BF 5D |  if_ne	call	#__system___fmtfloat
27744     E7 F0 03 F6 | 	mov	ptra, fp
27748     F2 00 A0 FD | 	call	#popregs_
2774c                 | __system___basic_print_float_ret
2774c     2D 00 64 FD | 	ret
27750                 | 
27750                 | __system____builtin_atoi
27750     07 CA 05 F6 | 	mov	COUNT_, #7
27754     E8 00 A0 FD | 	call	#pushregs_
27758                 | __system____builtin_atoi_enter
27758     49 A7 02 F6 | 	mov	local01, arg01
2775c     4A A9 02 F6 | 	mov	local02, arg02
27760     00 AA 06 F6 | 	mov	local03, #0
27764     00 AC 06 F6 | 	mov	local04, #0
27768     00 AE 06 F6 | 	mov	local05, #0
2776c     D7 08 48 FB | 	callpa	#(@LR__3761-@LR__3760)>>2,fcache_load_ptr_
27770                 | LR__3760
27770     53 B1 C2 FA | 	rdbyte	local06, local01
27774     20 B0 0E F2 | 	cmp	local06, #32 wz
27778     01 A6 06 A1 |  if_e	add	local01, #1
2777c     F0 FF 9F AD |  if_e	jmp	#LR__3760
27780                 | LR__3761
27780     53 B3 C2 FA | 	rdbyte	local07, local01
27784     D7 12 48 FB | 	callpa	#(@LR__3763-@LR__3762)>>2,fcache_load_ptr_
27788                 | LR__3762
27788     2D B2 0E F2 | 	cmp	local07, #45 wz
2778c     2B B2 0E 52 |  if_ne	cmp	local07, #43 wz
27790     18 00 90 5D |  if_ne	jmp	#LR__3764
27794     01 A6 06 F1 | 	add	local01, #1
27798     2D B2 0E F2 | 	cmp	local07, #45 wz
2779c     01 B0 06 A6 |  if_e	mov	local06, #1
277a0     58 AF C2 A2 |  if_e	subr	local05, local06
277a4     53 B3 C2 FA | 	rdbyte	local07, local01
277a8     DC FF 9F FD | 	jmp	#LR__3762
277ac                 | LR__3763
277ac                 | LR__3764
277ac     00 A8 0E F2 | 	cmp	local02, #0 wz
277b0     1C 00 90 5D |  if_ne	jmp	#LR__3766
277b4     24 B2 0E F2 | 	cmp	local07, #36 wz
277b8     10 A8 06 A6 |  if_e	mov	local02, #16
277bc     01 A6 06 A1 |  if_e	add	local01, #1
277c0     0C 00 90 AD |  if_e	jmp	#LR__3765
277c4     25 B2 0E F2 | 	cmp	local07, #37 wz
277c8     02 A8 06 A6 |  if_e	mov	local02, #2
277cc     01 A6 06 A1 |  if_e	add	local01, #1
277d0                 | LR__3765
277d0                 | LR__3766
277d0     D7 48 48 FB | 	callpa	#(@LR__3774-@LR__3767)>>2,fcache_load_ptr_
277d4                 | LR__3767
277d4                 | LR__3768
277d4     53 B3 C2 FA | 	rdbyte	local07, local01
277d8     5F B2 0E F2 | 	cmp	local07, #95 wz
277dc     01 A6 06 F1 | 	add	local01, #1
277e0     F0 FF 9F AD |  if_e	jmp	#LR__3768
277e4     30 B2 0E F2 | 	cmp	local07, #48 wz
277e8     26 B2 0E 52 |  if_ne	cmp	local07, #38 wz
277ec     00 AC 06 A6 |  if_e	mov	local04, #0
277f0     60 00 90 AD |  if_e	jmp	#LR__3773
277f4     31 B2 56 F2 | 	cmps	local07, #49 wc
277f8     18 00 90 CD |  if_b	jmp	#LR__3769
277fc     3A B2 56 F2 | 	cmps	local07, #58 wc
27800     59 AD 02 C6 |  if_b	mov	local04, local07
27804     30 AC 86 C1 |  if_b	sub	local04, #48
27808     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2780c     0A A8 06 86 |  if_c_and_z	mov	local02, #10
27810     40 00 90 CD |  if_b	jmp	#LR__3772
27814                 | LR__3769
27814     0B A8 56 F2 | 	cmps	local02, #11 wc
27818     61 B2 56 32 |  if_ae	cmps	local07, #97 wc
2781c     14 00 90 CD |  if_b	jmp	#LR__3770
27820     67 B2 56 F2 | 	cmps	local07, #103 wc
27824     61 B2 86 C1 |  if_b	sub	local07, #97
27828     0A AC 06 C6 |  if_b	mov	local04, #10
2782c     59 AD 02 C1 |  if_b	add	local04, local07
27830     20 00 90 CD |  if_b	jmp	#LR__3771
27834                 | LR__3770
27834     0B A8 56 F2 | 	cmps	local02, #11 wc
27838     41 B2 56 32 |  if_ae	cmps	local07, #65 wc
2783c     24 00 90 CD |  if_b	jmp	#LR__3775
27840     47 B2 56 F2 | 	cmps	local07, #71 wc
27844     41 B2 86 C1 |  if_b	sub	local07, #65
27848     0A AC 06 C6 |  if_b	mov	local04, #10
2784c     59 AD 02 C1 |  if_b	add	local04, local07
27850     10 00 90 3D |  if_ae	jmp	#LR__3775
27854                 | LR__3771
27854                 | LR__3772
27854                 | LR__3773
27854     55 A9 02 FD | 	qmul	local02, local03
27858     18 AA 62 FD | 	getqx	local03
2785c     56 AB 02 F1 | 	add	local03, local04
27860     70 FF 9F FD | 	jmp	#LR__3767
27864                 | LR__3774
27864                 | LR__3775
27864     00 A8 0E F2 | 	cmp	local02, #0 wz
27868     64 00 90 5D |  if_ne	jmp	#LR__3781
2786c     78 B2 0E F2 | 	cmp	local07, #120 wz
27870     68 B2 0E 52 |  if_ne	cmp	local07, #104 wz
27874     58 B2 0E 52 |  if_ne	cmp	local07, #88 wz
27878     48 B2 0E 52 |  if_ne	cmp	local07, #72 wz
2787c     14 00 90 5D |  if_ne	jmp	#LR__3776
27880     53 93 02 F6 | 	mov	arg01, local01
27884     10 94 06 F6 | 	mov	arg02, #16
27888     C4 FE BF FD | 	call	#__system____builtin_atoi
2788c     3D AB 02 F6 | 	mov	local03, result1
27890     3C 00 90 FD | 	jmp	#LR__3780
27894                 | LR__3776
27894     62 B2 0E F2 | 	cmp	local07, #98 wz
27898     42 B2 0E 52 |  if_ne	cmp	local07, #66 wz
2789c     14 00 90 5D |  if_ne	jmp	#LR__3777
278a0     53 93 02 F6 | 	mov	arg01, local01
278a4     02 94 06 F6 | 	mov	arg02, #2
278a8     A4 FE BF FD | 	call	#__system____builtin_atoi
278ac     3D AB 02 F6 | 	mov	local03, result1
278b0     1C 00 90 FD | 	jmp	#LR__3779
278b4                 | LR__3777
278b4     6F B2 0E F2 | 	cmp	local07, #111 wz
278b8     4F B2 0E 52 |  if_ne	cmp	local07, #79 wz
278bc     10 00 90 5D |  if_ne	jmp	#LR__3778
278c0     53 93 02 F6 | 	mov	arg01, local01
278c4     08 94 06 F6 | 	mov	arg02, #8
278c8     84 FE BF FD | 	call	#__system____builtin_atoi
278cc     3D AB 02 F6 | 	mov	local03, result1
278d0                 | LR__3778
278d0                 | LR__3779
278d0                 | LR__3780
278d0                 | LR__3781
278d0     00 AE 0E F2 | 	cmp	local05, #0 wz
278d4     55 AB 62 56 |  if_ne	neg	local03, local03
278d8     55 7B 02 F6 | 	mov	result1, local03
278dc     E7 F0 03 F6 | 	mov	ptra, fp
278e0     F2 00 A0 FD | 	call	#popregs_
278e4                 | __system____builtin_atoi_ret
278e4     2D 00 64 FD | 	ret
278e8                 | 
278e8                 | __system____builtin_atof
278e8     07 CA 05 F6 | 	mov	COUNT_, #7
278ec     E8 00 A0 FD | 	call	#pushregs_
278f0     49 A7 02 F6 | 	mov	local01, arg01
278f4     00 A8 06 F6 | 	mov	local02, #0
278f8     00 AA 06 F6 | 	mov	local03, #0
278fc     00 AC 06 F6 | 	mov	local04, #0
27900     00 AE 06 F6 | 	mov	local05, #0
27904     D7 08 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
27908                 | LR__3790
27908     53 97 C2 FA | 	rdbyte	arg03, local01
2790c     20 96 0E F2 | 	cmp	arg03, #32 wz
27910     01 A6 06 A1 |  if_e	add	local01, #1
27914     F0 FF 9F AD |  if_e	jmp	#LR__3790
27918                 | LR__3791
27918     53 B1 C2 FA | 	rdbyte	local06, local01
2791c                 | LR__3792
2791c     2B B0 0E F2 | 	cmp	local06, #43 wz
27920     2D B0 0E 52 |  if_ne	cmp	local06, #45 wz
27924     14 00 90 5D |  if_ne	jmp	#LR__3793
27928     2D B0 0E F2 | 	cmp	local06, #45 wz
2792c     1F AC E6 A4 |  if_e	bitnot	local04, #31
27930     01 A6 06 F1 | 	add	local01, #1
27934     53 B1 C2 FA | 	rdbyte	local06, local01
27938     E0 FF 9F FD | 	jmp	#LR__3792
2793c                 | LR__3793
2793c                 | LR__3794
2793c     D7 08 48 FB | 	callpa	#(@LR__3796-@LR__3795)>>2,fcache_load_ptr_
27940                 | LR__3795
27940     53 B1 C2 FA | 	rdbyte	local06, local01
27944     5F B0 0E F2 | 	cmp	local06, #95 wz
27948     01 A6 06 F1 | 	add	local01, #1
2794c     F0 FF 9F AD |  if_e	jmp	#LR__3795
27950                 | LR__3796
27950     00 B0 0E F2 | 	cmp	local06, #0 wz
27954     5C 00 90 AD |  if_e	jmp	#LR__3798
27958     30 B0 56 F2 | 	cmps	local06, #48 wc
2795c     44 00 90 CD |  if_b	jmp	#LR__3797
27960     3A B0 56 F2 | 	cmps	local06, #58 wc
27964     3C 00 90 3D |  if_ae	jmp	#LR__3797
27968     54 93 02 F6 | 	mov	arg01, local02
2796c     00 90 20 FF 
27970     00 94 06 F6 | 	mov	arg02, ##1092616192
27974     54 F7 BF FD | 	call	#__system___float_mul
27978     3D A9 02 F6 | 	mov	local02, result1
2797c     30 B0 86 F1 | 	sub	local06, #48
27980     58 93 02 F6 | 	mov	arg01, local06
27984     40 F3 BF FD | 	call	#__system___float_fromuns
27988     3D 95 02 F6 | 	mov	arg02, result1
2798c     54 93 02 F6 | 	mov	arg01, local02
27990     68 F3 BF FD | 	call	#__system___float_add
27994     3D A9 02 F6 | 	mov	local02, result1
27998     00 AE 0E F2 | 	cmp	local05, #0 wz
2799c     01 AA 86 51 |  if_ne	sub	local03, #1
279a0     98 FF 9F FD | 	jmp	#LR__3794
279a4                 | LR__3797
279a4     2E B0 0E F2 | 	cmp	local06, #46 wz
279a8     00 AE 0E A2 |  if_e	cmp	local05, #0 wz
279ac     01 AE 06 A6 |  if_e	mov	local05, #1
279b0     88 FF 9F AD |  if_e	jmp	#LR__3794
279b4                 | LR__3798
279b4     45 B0 0E F2 | 	cmp	local06, #69 wz
279b8     65 B0 0E 52 |  if_ne	cmp	local06, #101 wz
279bc     18 00 90 5D |  if_ne	jmp	#LR__3799
279c0     53 93 02 F6 | 	mov	arg01, local01
279c4     00 94 06 F6 | 	mov	arg02, #0
279c8     84 FD BF FD | 	call	#__system____builtin_atoi
279cc     55 7B 02 F1 | 	add	result1, local03
279d0     3D B3 02 F6 | 	mov	local07, result1
279d4     04 00 90 FD | 	jmp	#LR__3800
279d8                 | LR__3799
279d8     55 B3 02 F6 | 	mov	local07, local03
279dc                 | LR__3800
279dc     59 97 02 F6 | 	mov	arg03, local07
279e0     54 93 02 F6 | 	mov	arg01, local02
279e4     00 90 20 FF 
279e8     00 94 06 F6 | 	mov	arg02, ##1092616192
279ec     F4 06 B0 FD | 	call	#__system___float_pow_n
279f0     56 7B 62 F5 | 	xor	result1, local04
279f4     E7 F0 03 F6 | 	mov	ptra, fp
279f8     F2 00 A0 FD | 	call	#popregs_
279fc                 | __system____builtin_atof_ret
279fc     2D 00 64 FD | 	ret
27a00                 | 
27a00                 | __system____builtin_ilogb
27a00     F8 FB BF FD | 	call	#__system___float_Unpack
27a04     00 7E 0E F2 | 	cmp	result3, #0 wz
27a08     00 00 40 AF 
27a0c     01 7A 06 A6 |  if_e	mov	result1, ##-2147483647
27a10     24 00 90 AD |  if_e	jmp	#LR__3811
27a14     80 7C 0E F2 | 	cmp	result2, #128 wz
27a18     18 00 90 5D |  if_ne	jmp	#LR__3810
27a1c     00 00 10 FF 
27a20     00 7E 0E F2 | 	cmp	result3, ##536870912 wz
27a24     1E 7A CE A9 |  if_e	bmask	result1, #30
27a28     0C 00 90 AD |  if_e	jmp	#LR__3811
27a2c     1F 7A C6 F9 | 	decod	result1, #31
27a30     04 00 90 FD | 	jmp	#LR__3811
27a34                 | LR__3810
27a34     3E 7B 02 F6 | 	mov	result1, result2
27a38                 | LR__3811
27a38                 | __system____builtin_ilogb_ret
27a38     2D 00 64 FD | 	ret
27a3c                 | 
27a3c                 | __system____builtin_sinf
27a3c     03 CA 05 F6 | 	mov	COUNT_, #3
27a40     E8 00 A0 FD | 	call	#pushregs_
27a44     49 A7 02 F6 | 	mov	local01, arg01
27a48     87 64 20 FF 
27a4c     DB 95 06 F6 | 	mov	arg02, ##1086918619
27a50     7C F8 BF FD | 	call	#__system___float_div
27a54     3D 93 02 F6 | 	mov	arg01, result1
27a58     00 94 06 F6 | 	mov	arg02, #0
27a5c     34 FB BF FD | 	call	#__system___float_tointeger
27a60     3D 97 0A F6 | 	mov	arg03, result1 wz
27a64     44 00 90 AD |  if_e	jmp	#LR__3820
27a68     4B 93 52 F6 | 	abs	arg01, arg03 wc
27a6c     1F A8 C6 C9 |  if_b	decod	local02, #31
27a70     00 A8 06 36 |  if_ae	mov	local02, #0
27a74     50 F2 BF FD | 	call	#__system___float_fromuns
27a78     54 7B 62 F5 | 	xor	result1, local02
27a7c     3D 93 02 F6 | 	mov	arg01, result1
27a80     1E 94 C6 F9 | 	decod	arg02, #30
27a84     44 F6 BF FD | 	call	#__system___float_mul
27a88     3D 93 02 F6 | 	mov	arg01, result1
27a8c     87 24 20 FF 
27a90     DB 95 06 F6 | 	mov	arg02, ##1078530011
27a94     34 F6 BF FD | 	call	#__system___float_mul
27a98     3D 95 02 F6 | 	mov	arg02, result1
27a9c     53 93 02 F6 | 	mov	arg01, local01
27aa0     1F 94 E6 F4 | 	bitnot	arg02, #31
27aa4     54 F2 BF FD | 	call	#__system___float_add
27aa8     3D A7 02 F6 | 	mov	local01, result1
27aac                 | LR__3820
27aac     53 93 02 F6 | 	mov	arg01, local01
27ab0     66 E6 1E FF 
27ab4     CD 94 06 F6 | 	mov	arg02, ##1036831949
27ab8     01 96 06 F6 | 	mov	arg03, #1
27abc     40 FA BF FD | 	call	#__system___float_cmp
27ac0     00 7A 56 F2 | 	cmps	result1, #0 wc
27ac4     5C 00 90 3D |  if_ae	jmp	#LR__3821
27ac8     53 93 02 F6 | 	mov	arg01, local01
27acc     66 E6 5E FF 
27ad0     CD 94 06 F6 | 	mov	arg02, ##-1110651699
27ad4     01 96 66 F6 | 	neg	arg03, #1
27ad8     24 FA BF FD | 	call	#__system___float_cmp
27adc     01 7A 56 F2 | 	cmps	result1, #1 wc
27ae0     40 00 90 CD |  if_b	jmp	#LR__3821
27ae4     53 93 02 F6 | 	mov	arg01, local01
27ae8     53 95 02 F6 | 	mov	arg02, local01
27aec     DC F5 BF FD | 	call	#__system___float_mul
27af0     3D 93 02 F6 | 	mov	arg01, result1
27af4     53 95 02 F6 | 	mov	arg02, local01
27af8     D0 F5 BF FD | 	call	#__system___float_mul
27afc     3D 93 02 F6 | 	mov	arg01, result1
27b00     00 60 20 FF 
27b04     00 94 06 F6 | 	mov	arg02, ##1086324736
27b08     C4 F7 BF FD | 	call	#__system___float_div
27b0c     3D 95 02 F6 | 	mov	arg02, result1
27b10     53 93 02 F6 | 	mov	arg01, local01
27b14     1F 94 E6 F4 | 	bitnot	arg02, #31
27b18     E0 F1 BF FD | 	call	#__system___float_add
27b1c     3D AB 02 F6 | 	mov	local03, result1
27b20     54 00 90 FD | 	jmp	#LR__3822
27b24                 | LR__3821
27b24     53 93 02 F6 | 	mov	arg01, local01
27b28     7C 91 26 FF 
27b2c     83 95 06 F6 | 	mov	arg02, ##1294137731
27b30     98 F5 BF FD | 	call	#__system___float_mul
27b34     3D 93 02 F6 | 	mov	arg01, result1
27b38     00 94 06 F6 | 	mov	arg02, #0
27b3c     54 FA BF FD | 	call	#__system___float_tointeger
27b40     02 7A 66 F0 | 	shl	result1, #2
27b44     00 00 A0 FF 
27b48     3D 01 48 FD | 	qrotate	##1073741824, result1
27b4c     19 92 62 FD | 	getqy	arg01
27b50     49 93 52 F6 | 	abs	arg01, arg01 wc
27b54     1F A8 C6 C9 |  if_b	decod	local02, #31
27b58     00 A8 06 36 |  if_ae	mov	local02, #0
27b5c     68 F1 BF FD | 	call	#__system___float_fromuns
27b60     54 7B 62 F5 | 	xor	result1, local02
27b64     3D 93 02 F6 | 	mov	arg01, result1
27b68     00 40 27 FF 
27b6c     00 94 06 F6 | 	mov	arg02, ##1317011456
27b70     5C F7 BF FD | 	call	#__system___float_div
27b74     3D AB 02 F6 | 	mov	local03, result1
27b78                 | LR__3822
27b78     55 7B 02 F6 | 	mov	result1, local03
27b7c     E7 F0 03 F6 | 	mov	ptra, fp
27b80     F2 00 A0 FD | 	call	#popregs_
27b84                 | __system____builtin_sinf_ret
27b84     2D 00 64 FD | 	ret
27b88                 | 
27b88                 | __system____builtin_tanf
27b88     02 CA 05 F6 | 	mov	COUNT_, #2
27b8c     E8 00 A0 FD | 	call	#pushregs_
27b90     49 A7 02 F6 | 	mov	local01, arg01
27b94     A4 FE BF FD | 	call	#__system____builtin_sinf
27b98     3D A9 02 F6 | 	mov	local02, result1
27b9c     53 95 02 F6 | 	mov	arg02, local01
27ba0     87 E4 1F FF 
27ba4     DB 93 06 F6 | 	mov	arg01, ##1070141403
27ba8     1F 94 E6 F4 | 	bitnot	arg02, #31
27bac     4C F1 BF FD | 	call	#__system___float_add
27bb0     3D 93 02 F6 | 	mov	arg01, result1
27bb4     84 FE BF FD | 	call	#__system____builtin_sinf
27bb8     3D 95 02 F6 | 	mov	arg02, result1
27bbc     54 93 02 F6 | 	mov	arg01, local02
27bc0     0C F7 BF FD | 	call	#__system___float_div
27bc4     E7 F0 03 F6 | 	mov	ptra, fp
27bc8     F2 00 A0 FD | 	call	#popregs_
27bcc                 | __system____builtin_tanf_ret
27bcc     2D 00 64 FD | 	ret
27bd0                 | 
27bd0                 | __system____builtin_asinf
27bd0     01 CA 05 F6 | 	mov	COUNT_, #1
27bd4     E8 00 A0 FD | 	call	#pushregs_
27bd8     49 A7 02 F6 | 	mov	local01, arg01
27bdc     53 95 02 F6 | 	mov	arg02, local01
27be0     53 93 02 F6 | 	mov	arg01, local01
27be4     E4 F4 BF FD | 	call	#__system___float_mul
27be8     3D 95 02 F6 | 	mov	arg02, result1
27bec     00 C0 1F FF 
27bf0     00 92 06 F6 | 	mov	arg01, ##1065353216
27bf4     1F 94 E6 F4 | 	bitnot	arg02, #31
27bf8     00 F1 BF FD | 	call	#__system___float_add
27bfc     3D 93 02 F6 | 	mov	arg01, result1
27c00     F0 F3 BF FD | 	call	#__system___float_sqrt
27c04     3D 95 02 F6 | 	mov	arg02, result1
27c08     53 93 02 F6 | 	mov	arg01, local01
27c0c     58 00 B0 FD | 	call	#__system____builtin_atan2f
27c10     E7 F0 03 F6 | 	mov	ptra, fp
27c14     F2 00 A0 FD | 	call	#popregs_
27c18                 | __system____builtin_asinf_ret
27c18     2D 00 64 FD | 	ret
27c1c                 | 
27c1c                 | __system____builtin_acosf
27c1c     01 CA 05 F6 | 	mov	COUNT_, #1
27c20     E8 00 A0 FD | 	call	#pushregs_
27c24     49 A7 02 F6 | 	mov	local01, arg01
27c28     53 95 02 F6 | 	mov	arg02, local01
27c2c     53 93 02 F6 | 	mov	arg01, local01
27c30     98 F4 BF FD | 	call	#__system___float_mul
27c34     3D 95 02 F6 | 	mov	arg02, result1
27c38     00 C0 1F FF 
27c3c     00 92 06 F6 | 	mov	arg01, ##1065353216
27c40     1F 94 E6 F4 | 	bitnot	arg02, #31
27c44     B4 F0 BF FD | 	call	#__system___float_add
27c48     3D 93 02 F6 | 	mov	arg01, result1
27c4c     A4 F3 BF FD | 	call	#__system___float_sqrt
27c50     3D 93 02 F6 | 	mov	arg01, result1
27c54     53 95 02 F6 | 	mov	arg02, local01
27c58     0C 00 B0 FD | 	call	#__system____builtin_atan2f
27c5c     E7 F0 03 F6 | 	mov	ptra, fp
27c60     F2 00 A0 FD | 	call	#popregs_
27c64                 | __system____builtin_acosf_ret
27c64     2D 00 64 FD | 	ret
27c68                 | 
27c68                 | __system____builtin_atan2f
27c68     04 CA 05 F6 | 	mov	COUNT_, #4
27c6c     E8 00 A0 FD | 	call	#pushregs_
27c70     49 A7 02 F6 | 	mov	local01, arg01
27c74     4A A9 02 F6 | 	mov	local02, arg02
27c78     53 93 02 F6 | 	mov	arg01, local01
27c7c     00 94 06 F6 | 	mov	arg02, #0
27c80     01 96 06 F6 | 	mov	arg03, #1
27c84     78 F8 BF FD | 	call	#__system___float_cmp
27c88     00 7A 0E F2 | 	cmp	result1, #0 wz
27c8c     28 00 90 5D |  if_ne	jmp	#LR__3830
27c90     54 93 02 F6 | 	mov	arg01, local02
27c94     00 94 06 F6 | 	mov	arg02, #0
27c98     01 96 06 F6 | 	mov	arg03, #1
27c9c     60 F8 BF FD | 	call	#__system___float_cmp
27ca0     00 7A 56 F2 | 	cmps	result1, #0 wc
27ca4     87 24 60 CF 
27ca8     DB 7B 06 C6 |  if_b	mov	result1, ##-1068953637
27cac     DC 00 90 CD |  if_b	jmp	#LR__3831
27cb0     00 7A 06 F6 | 	mov	result1, #0
27cb4     D4 00 90 FD | 	jmp	#LR__3831
27cb8                 | LR__3830
27cb8     54 93 02 F6 | 	mov	arg01, local02
27cbc     54 95 02 F6 | 	mov	arg02, local02
27cc0     08 F4 BF FD | 	call	#__system___float_mul
27cc4     3D AB 02 F6 | 	mov	local03, result1
27cc8     53 93 02 F6 | 	mov	arg01, local01
27ccc     53 95 02 F6 | 	mov	arg02, local01
27cd0     F8 F3 BF FD | 	call	#__system___float_mul
27cd4     3D 95 02 F6 | 	mov	arg02, result1
27cd8     55 93 02 F6 | 	mov	arg01, local03
27cdc     1C F0 BF FD | 	call	#__system___float_add
27ce0     3D 93 02 F6 | 	mov	arg01, result1
27ce4     0C F3 BF FD | 	call	#__system___float_sqrt
27ce8     3D AB 02 F6 | 	mov	local03, result1
27cec     54 93 02 F6 | 	mov	arg01, local02
27cf0     55 95 02 F6 | 	mov	arg02, local03
27cf4     D8 F5 BF FD | 	call	#__system___float_div
27cf8     3D A9 02 F6 | 	mov	local02, result1
27cfc     53 93 02 F6 | 	mov	arg01, local01
27d00     55 95 02 F6 | 	mov	arg02, local03
27d04     C8 F5 BF FD | 	call	#__system___float_div
27d08     3D A7 02 F6 | 	mov	local01, result1
27d0c     00 40 27 FF 
27d10     00 92 06 F6 | 	mov	arg01, ##1317011456
27d14     54 95 02 F6 | 	mov	arg02, local02
27d18     B0 F3 BF FD | 	call	#__system___float_mul
27d1c     3D 93 02 F6 | 	mov	arg01, result1
27d20     00 94 06 F6 | 	mov	arg02, #0
27d24     6C F8 BF FD | 	call	#__system___float_tointeger
27d28     3D AB 02 F6 | 	mov	local03, result1
27d2c     00 40 27 FF 
27d30     00 92 06 F6 | 	mov	arg01, ##1317011456
27d34     53 95 02 F6 | 	mov	arg02, local01
27d38     90 F3 BF FD | 	call	#__system___float_mul
27d3c     3D 93 02 F6 | 	mov	arg01, result1
27d40     00 94 06 F6 | 	mov	arg02, #0
27d44     4C F8 BF FD | 	call	#__system___float_tointeger
27d48     3D AB 52 FD | 	qvector	local03, result1
27d4c     87 24 20 FF 
27d50     DB AB 06 F6 | 	mov	local03, ##1078530011
27d54     19 92 62 FD | 	getqy	arg01
27d58     01 92 C6 F0 | 	sar	arg01, #1
27d5c     49 93 52 F6 | 	abs	arg01, arg01 wc
27d60     1F AC C6 C9 |  if_b	decod	local04, #31
27d64     00 AC 06 36 |  if_ae	mov	local04, #0
27d68     5C EF BF FD | 	call	#__system___float_fromuns
27d6c     56 7B 62 F5 | 	xor	result1, local04
27d70     3D 93 02 F6 | 	mov	arg01, result1
27d74     00 40 27 FF 
27d78     00 94 06 F6 | 	mov	arg02, ##1317011456
27d7c     50 F5 BF FD | 	call	#__system___float_div
27d80     3D 95 02 F6 | 	mov	arg02, result1
27d84     55 93 02 F6 | 	mov	arg01, local03
27d88     40 F3 BF FD | 	call	#__system___float_mul
27d8c                 | LR__3831
27d8c     E7 F0 03 F6 | 	mov	ptra, fp
27d90     F2 00 A0 FD | 	call	#popregs_
27d94                 | __system____builtin_atan2f_ret
27d94     2D 00 64 FD | 	ret
27d98                 | 
27d98                 | __system____builtin_exp2f
27d98     04 CA 05 F6 | 	mov	COUNT_, #4
27d9c     E8 00 A0 FD | 	call	#pushregs_
27da0     49 A7 02 F6 | 	mov	local01, arg01
27da4     00 7F 21 FF 
27da8     00 94 06 F6 | 	mov	arg02, ##1123942400
27dac     01 96 66 F6 | 	neg	arg03, #1
27db0     4C F7 BF FD | 	call	#__system___float_cmp
27db4     00 7A 56 F2 | 	cmps	result1, #0 wc
27db8     00 C0 3F 3F 
27dbc     00 7A 06 36 |  if_ae	mov	result1, ##2139095040
27dc0     DC 00 90 3D |  if_ae	jmp	#LR__3841
27dc4     53 93 02 F6 | 	mov	arg01, local01
27dc8     00 7F 61 FF 
27dcc     00 94 06 F6 | 	mov	arg02, ##-1023541248
27dd0     01 96 06 F6 | 	mov	arg03, #1
27dd4     28 F7 BF FD | 	call	#__system___float_cmp
27dd8     00 7A 56 F2 | 	cmps	result1, #0 wc
27ddc     00 7A 06 C6 |  if_b	mov	result1, #0
27de0     BC 00 90 CD |  if_b	jmp	#LR__3841
27de4     53 93 02 F6 | 	mov	arg01, local01
27de8     00 94 06 F6 | 	mov	arg02, #0
27dec     A4 F7 BF FD | 	call	#__system___float_tointeger
27df0     3D A9 02 F6 | 	mov	local02, result1
27df4     54 93 52 F6 | 	abs	arg01, local02 wc
27df8     1F AA C6 C9 |  if_b	decod	local03, #31
27dfc     00 AA 06 36 |  if_ae	mov	local03, #0
27e00     C4 EE BF FD | 	call	#__system___float_fromuns
27e04     55 7B 62 F5 | 	xor	result1, local03
27e08     3D 95 02 F6 | 	mov	arg02, result1
27e0c     53 93 02 F6 | 	mov	arg01, local01
27e10     1F 94 E6 F4 | 	bitnot	arg02, #31
27e14     E4 EE BF FD | 	call	#__system___float_add
27e18     3D AD 02 F6 | 	mov	local04, result1
27e1c     56 93 02 F6 | 	mov	arg01, local04
27e20     00 94 06 F6 | 	mov	arg02, #0
27e24     01 96 06 F6 | 	mov	arg03, #1
27e28     D4 F6 BF FD | 	call	#__system___float_cmp
27e2c     00 7A 56 F2 | 	cmps	result1, #0 wc
27e30     18 00 90 3D |  if_ae	jmp	#LR__3840
27e34     56 93 02 F6 | 	mov	arg01, local04
27e38     00 C0 1F FF 
27e3c     00 94 06 F6 | 	mov	arg02, ##1065353216
27e40     B8 EE BF FD | 	call	#__system___float_add
27e44     3D AD 02 F6 | 	mov	local04, result1
27e48     01 A8 86 F1 | 	sub	local02, #1
27e4c                 | LR__3840
27e4c     7F A8 06 F1 | 	add	local02, #127
27e50     17 A8 66 F0 | 	shl	local02, #23
27e54     56 93 02 F6 | 	mov	arg01, local04
27e58     00 80 26 FF 
27e5c     00 94 06 F6 | 	mov	arg02, ##1291845632
27e60     68 F2 BF FD | 	call	#__system___float_mul
27e64     3D 93 02 F6 | 	mov	arg01, result1
27e68     00 94 06 F6 | 	mov	arg02, #0
27e6c     24 F7 BF FD | 	call	#__system___float_tointeger
27e70     3D AD 0A F6 | 	mov	local04, result1 wz
27e74     54 7B 02 A6 |  if_e	mov	result1, local02
27e78     24 00 90 AD |  if_e	jmp	#LR__3841
27e7c     3E AC 26 F4 | 	bith	local04, #62
27e80     0F AC 62 FD | 	qexp	local04
27e84     54 93 02 F6 | 	mov	arg01, local02
27e88     18 94 62 FD | 	getqx	arg02
27e8c     01 94 06 F1 | 	add	arg02, #1
27e90     01 94 46 F0 | 	shr	arg02, #1
27e94     00 80 1F FF 
27e98     00 94 06 F1 | 	add	arg02, ##1056964608
27e9c     2C F2 BF FD | 	call	#__system___float_mul
27ea0                 | LR__3841
27ea0     E7 F0 03 F6 | 	mov	ptra, fp
27ea4     F2 00 A0 FD | 	call	#popregs_
27ea8                 | __system____builtin_exp2f_ret
27ea8     2D 00 64 FD | 	ret
27eac                 | 
27eac                 | __system____builtin_log2f
27eac     06 CA 05 F6 | 	mov	COUNT_, #6
27eb0     E8 00 A0 FD | 	call	#pushregs_
27eb4     49 A7 02 F6 | 	mov	local01, arg01
27eb8     49 A9 0A F6 | 	mov	local02, arg01 wz
27ebc     00 00 40 5F 
27ec0     00 A8 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27ec4     00 40 00 AF 
27ec8     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27ecc     08 01 90 AD |  if_e	jmp	#LR__3854
27ed0     00 A8 56 F2 | 	cmps	local02, #0 wc
27ed4     00 E0 3F CF 
27ed8     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
27edc     F8 00 90 CD |  if_b	jmp	#LR__3854
27ee0     53 93 02 F6 | 	mov	arg01, local01
27ee4     00 90 20 FF 
27ee8     00 94 06 F6 | 	mov	arg02, ##1092616192
27eec     01 96 06 F6 | 	mov	arg03, #1
27ef0     0C F6 BF FD | 	call	#__system___float_cmp
27ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
27ef8     4D 2A 20 AF 
27efc     78 7A 06 A6 |  if_e	mov	result1, ##1079286392
27f00     D4 00 90 AD |  if_e	jmp	#LR__3854
27f04     53 93 02 F6 | 	mov	arg01, local01
27f08     FC 16 20 FF 
27f0c     54 94 06 F6 | 	mov	arg02, ##1076754516
27f10     01 96 06 F6 | 	mov	arg03, #1
27f14     E8 F5 BF FD | 	call	#__system___float_cmp
27f18     00 7A 0E F2 | 	cmp	result1, #0 wz
27f1c     55 DC 1F AF 
27f20     3B 7A 06 A6 |  if_e	mov	result1, ##1069066811
27f24     B0 00 90 AD |  if_e	jmp	#LR__3854
27f28     54 AB 02 F6 | 	mov	local03, local02
27f2c     17 AA 46 F0 | 	shr	local03, #23
27f30     55 AB E2 F8 | 	getbyte	local03, local03, #0
27f34     17 A9 06 F4 | 	bitl	local02, #279
27f38     54 AD 02 F6 | 	mov	local04, local02
27f3c     FF AA 0E F2 | 	cmp	local03, #255 wz
27f40     1C 00 90 5D |  if_ne	jmp	#LR__3850
27f44     00 AC 0E F2 | 	cmp	local04, #0 wz
27f48     00 C0 3F 5F 
27f4c     00 AE 06 56 |  if_ne	mov	local05, ##2139095040
27f50     00 E0 3F AF 
27f54     00 AE 06 A6 |  if_e	mov	local05, ##2143289344
27f58     57 7B 02 F6 | 	mov	result1, local05
27f5c     78 00 90 FD | 	jmp	#LR__3854
27f60                 | LR__3850
27f60     00 AA 0E F2 | 	cmp	local03, #0 wz
27f64     17 AC 26 54 |  if_ne	bith	local04, #23
27f68     7F AA 86 51 |  if_ne	sub	local03, #127
27f6c     28 00 90 5D |  if_ne	jmp	#LR__3853
27f70     00 AC 0E F2 | 	cmp	local04, #0 wz
27f74     00 40 00 AF 
27f78     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27f7c     58 00 90 AD |  if_e	jmp	#LR__3854
27f80     7E AA 66 F6 | 	neg	local03, #126
27f84     D7 08 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
27f88                 | LR__3851
27f88     17 AC 2E F4 | 	testbn	local04, #23 wz
27f8c     01 AC 66 A0 |  if_e	shl	local04, #1
27f90     01 AA 06 A1 |  if_e	add	local03, #1
27f94     F0 FF 9F AD |  if_e	jmp	#LR__3851
27f98                 | LR__3852
27f98                 | LR__3853
27f98     0E AC 62 FD | 	qlog	local04
27f9c     01 AA 86 F1 | 	sub	local03, #1
27fa0     55 93 52 F6 | 	abs	arg01, local03 wc
27fa4     1F B0 C6 C9 |  if_b	decod	local06, #31
27fa8     00 B0 06 36 |  if_ae	mov	local06, #0
27fac     18 AE 62 FD | 	getqx	local05
27fb0     9B AE 06 F4 | 	bitl	local05, #155
27fb4     08 AE 06 F1 | 	add	local05, #8
27fb8     04 AE 46 F0 | 	shr	local05, #4
27fbc     00 C0 1F FF 
27fc0     00 AE 06 F1 | 	add	local05, ##1065353216
27fc4     00 ED BF FD | 	call	#__system___float_fromuns
27fc8     58 7B 62 F5 | 	xor	result1, local06
27fcc     3D 95 02 F6 | 	mov	arg02, result1
27fd0     57 93 02 F6 | 	mov	arg01, local05
27fd4     24 ED BF FD | 	call	#__system___float_add
27fd8                 | LR__3854
27fd8     E7 F0 03 F6 | 	mov	ptra, fp
27fdc     F2 00 A0 FD | 	call	#popregs_
27fe0                 | __system____builtin_log2f_ret
27fe0     2D 00 64 FD | 	ret
27fe4                 | 
27fe4                 | __system____builtin_powf
27fe4     04 CA 05 F6 | 	mov	COUNT_, #4
27fe8     E8 00 A0 FD | 	call	#pushregs_
27fec     49 A7 02 F6 | 	mov	local01, arg01
27ff0     4A A9 02 F6 | 	mov	local02, arg02
27ff4     54 93 02 F6 | 	mov	arg01, local02
27ff8     00 94 06 F6 | 	mov	arg02, #0
27ffc     94 F5 BF FD | 	call	#__system___float_tointeger
28000     3D AB 02 F6 | 	mov	local03, result1
28004     55 93 52 F6 | 	abs	arg01, local03 wc
28008     1F AC C6 C9 |  if_b	decod	local04, #31
2800c     00 AC 06 36 |  if_ae	mov	local04, #0
28010     B4 EC BF FD | 	call	#__system___float_fromuns
28014     56 7B 62 F5 | 	xor	result1, local04
28018     3D 93 02 F6 | 	mov	arg01, result1
2801c     54 95 02 F6 | 	mov	arg02, local02
28020     01 96 06 F6 | 	mov	arg03, #1
28024     D8 F4 BF FD | 	call	#__system___float_cmp
28028     00 7A 0E F2 | 	cmp	result1, #0 wz
2802c     18 00 90 5D |  if_ne	jmp	#LR__3860
28030     00 C0 1F FF 
28034     00 92 06 F6 | 	mov	arg01, ##1065353216
28038     53 95 02 F6 | 	mov	arg02, local01
2803c     55 97 02 F6 | 	mov	arg03, local03
28040     A0 00 B0 FD | 	call	#__system___float_pow_n
28044     58 00 90 FD | 	jmp	#LR__3861
28048                 | LR__3860
28048     53 93 02 F6 | 	mov	arg01, local01
2804c     00 94 06 F6 | 	mov	arg02, #0
28050     01 96 06 F6 | 	mov	arg03, #1
28054     A8 F4 BF FD | 	call	#__system___float_cmp
28058     00 7A 56 F2 | 	cmps	result1, #0 wc
2805c     00 E0 3F CF 
28060     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
28064     38 00 90 CD |  if_b	jmp	#LR__3861
28068     53 93 02 F6 | 	mov	arg01, local01
2806c     00 94 06 F6 | 	mov	arg02, #0
28070     01 96 06 F6 | 	mov	arg03, #1
28074     88 F4 BF FD | 	call	#__system___float_cmp
28078     00 7A 0E F2 | 	cmp	result1, #0 wz
2807c     00 7A 06 A6 |  if_e	mov	result1, #0
28080     1C 00 90 AD |  if_e	jmp	#LR__3861
28084     53 93 02 F6 | 	mov	arg01, local01
28088     20 FE BF FD | 	call	#__system____builtin_log2f
2808c     3D 93 02 F6 | 	mov	arg01, result1
28090     54 95 02 F6 | 	mov	arg02, local02
28094     34 F0 BF FD | 	call	#__system___float_mul
28098     3D 93 02 F6 | 	mov	arg01, result1
2809c     F8 FC BF FD | 	call	#__system____builtin_exp2f
280a0                 | LR__3861
280a0     E7 F0 03 F6 | 	mov	ptra, fp
280a4     F2 00 A0 FD | 	call	#popregs_
280a8                 | __system____builtin_powf_ret
280a8     2D 00 64 FD | 	ret
280ac                 | 
280ac                 | __system____builtin_logbase
280ac     02 CA 05 F6 | 	mov	COUNT_, #2
280b0     E8 00 A0 FD | 	call	#pushregs_
280b4     49 A7 02 F6 | 	mov	local01, arg01
280b8     4A 93 02 F6 | 	mov	arg01, arg02
280bc     EC FD BF FD | 	call	#__system____builtin_log2f
280c0     3D A9 02 F6 | 	mov	local02, result1
280c4     53 93 02 F6 | 	mov	arg01, local01
280c8     E0 FD BF FD | 	call	#__system____builtin_log2f
280cc     3D 95 02 F6 | 	mov	arg02, result1
280d0     54 93 02 F6 | 	mov	arg01, local02
280d4     F8 F1 BF FD | 	call	#__system___float_div
280d8     E7 F0 03 F6 | 	mov	ptra, fp
280dc     F2 00 A0 FD | 	call	#popregs_
280e0                 | __system____builtin_logbase_ret
280e0     2D 00 64 FD | 	ret
280e4                 | 
280e4                 | __system___float_pow_n
280e4     05 CA 05 F6 | 	mov	COUNT_, #5
280e8     E8 00 A0 FD | 	call	#pushregs_
280ec     49 A7 02 F6 | 	mov	local01, arg01
280f0     4A A9 02 F6 | 	mov	local02, arg02
280f4     4B AB 02 F6 | 	mov	local03, arg03
280f8     00 AA 56 F2 | 	cmps	local03, #0 wc
280fc     18 00 90 3D |  if_ae	jmp	#LR__3870
28100     01 AC 06 F6 | 	mov	local04, #1
28104     55 AB 62 F6 | 	neg	local03, local03
28108     00 AA 56 F2 | 	cmps	local03, #0 wc
2810c     00 7A 06 C6 |  if_b	mov	result1, #0
28110     94 00 90 CD |  if_b	jmp	#LR__3878
28114     04 00 90 FD | 	jmp	#LR__3871
28118                 | LR__3870
28118     00 AC 06 F6 | 	mov	local04, #0
2811c                 | LR__3871
2811c     00 C0 1F FF 
28120     00 AE 06 F6 | 	mov	local05, ##1065353216
28124                 | LR__3872
28124     01 AA 56 F2 | 	cmps	local03, #1 wc
28128     30 00 90 CD |  if_b	jmp	#LR__3874
2812c     01 AA CE F7 | 	test	local03, #1 wz
28130     10 00 90 AD |  if_e	jmp	#LR__3873
28134     57 93 02 F6 | 	mov	arg01, local05
28138     54 95 02 F6 | 	mov	arg02, local02
2813c     8C EF BF FD | 	call	#__system___float_mul
28140     3D AF 02 F6 | 	mov	local05, result1
28144                 | LR__3873
28144     01 AA C6 F0 | 	sar	local03, #1
28148     54 93 02 F6 | 	mov	arg01, local02
2814c     54 95 02 F6 | 	mov	arg02, local02
28150     78 EF BF FD | 	call	#__system___float_mul
28154     3D A9 02 F6 | 	mov	local02, result1
28158     C8 FF 9F FD | 	jmp	#LR__3872
2815c                 | LR__3874
2815c     00 AC 0E F2 | 	cmp	local04, #0 wz
28160     14 00 90 AD |  if_e	jmp	#LR__3875
28164     53 93 02 F6 | 	mov	arg01, local01
28168     57 95 02 F6 | 	mov	arg02, local05
2816c     60 F1 BF FD | 	call	#__system___float_div
28170     3D AF 02 F6 | 	mov	local05, result1
28174     2C 00 90 FD | 	jmp	#LR__3877
28178                 | LR__3875
28178     53 93 02 F6 | 	mov	arg01, local01
2817c     00 C0 1F FF 
28180     00 94 06 F6 | 	mov	arg02, ##1065353216
28184     01 96 06 F6 | 	mov	arg03, #1
28188     74 F3 BF FD | 	call	#__system___float_cmp
2818c     00 7A 0E F2 | 	cmp	result1, #0 wz
28190     10 00 90 AD |  if_e	jmp	#LR__3876
28194     53 93 02 F6 | 	mov	arg01, local01
28198     57 95 02 F6 | 	mov	arg02, local05
2819c     2C EF BF FD | 	call	#__system___float_mul
281a0     3D AF 02 F6 | 	mov	local05, result1
281a4                 | LR__3876
281a4                 | LR__3877
281a4     57 7B 02 F6 | 	mov	result1, local05
281a8                 | LR__3878
281a8     E7 F0 03 F6 | 	mov	ptra, fp
281ac     F2 00 A0 FD | 	call	#popregs_
281b0                 | __system___float_pow_n_ret
281b0     2D 00 64 FD | 	ret
281b4                 | 
281b4                 | __system___gc_ptrs
281b4     2C 81 02 F6 | 	mov	_var01, __heap_ptr
281b8     40 83 02 F6 | 	mov	_var02, _var01
281bc     BB 00 00 FF 
281c0     F8 82 06 F1 | 	add	_var02, ##95992
281c4     40 7D 0A FB | 	rdlong	result2, _var01 wz
281c8     74 00 90 5D |  if_ne	jmp	#LR__3880
281cc     41 7D 02 F6 | 	mov	result2, _var02
281d0     40 7D 82 F1 | 	sub	result2, _var01
281d4     40 03 58 FC | 	wrword	#1, _var01
281d8     40 7B 02 F6 | 	mov	result1, _var01
281dc     02 7A 06 F1 | 	add	result1, #2
281e0     36 00 80 FF 
281e4     3D 21 59 FC | 	wrword	##27792, result1
281e8     40 7B 02 F6 | 	mov	result1, _var01
281ec     04 7A 06 F1 | 	add	result1, #4
281f0     3D 01 58 FC | 	wrword	#0, result1
281f4     40 7B 02 F6 | 	mov	result1, _var01
281f8     06 7A 06 F1 | 	add	result1, #6
281fc     3D 03 58 FC | 	wrword	#1, result1
28200     10 80 06 F1 | 	add	_var01, #16
28204     3E 7D 52 F6 | 	abs	result2, result2 wc
28208     04 7C 46 F0 | 	shr	result2, #4
2820c     3E 7D 82 F6 | 	negc	result2, result2
28210     40 7D 52 FC | 	wrword	result2, _var01
28214     40 7D 02 F6 | 	mov	result2, _var01
28218     02 7C 06 F1 | 	add	result2, #2
2821c     36 00 80 FF 
28220     3E 1F 59 FC | 	wrword	##27791, result2
28224     40 7D 02 F6 | 	mov	result2, _var01
28228     04 7C 06 F1 | 	add	result2, #4
2822c     3E 01 58 FC | 	wrword	#0, result2
28230     40 7D 02 F6 | 	mov	result2, _var01
28234     06 7C 06 F1 | 	add	result2, #6
28238     3E 01 58 FC | 	wrword	#0, result2
2823c     10 80 86 F1 | 	sub	_var01, #16
28240                 | LR__3880
28240     40 7B 02 F6 | 	mov	result1, _var01
28244     41 7D 02 F6 | 	mov	result2, _var02
28248                 | __system___gc_ptrs_ret
28248     2D 00 64 FD | 	ret
2824c                 | 
2824c                 | __system___gc_tryalloc
2824c     0B CA 05 F6 | 	mov	COUNT_, #11
28250     E8 00 A0 FD | 	call	#pushregs_
28254     49 A7 02 F6 | 	mov	local01, arg01
28258     4A A9 02 F6 | 	mov	local02, arg02
2825c     54 FF BF FD | 	call	#__system___gc_ptrs
28260     3D AB 02 F6 | 	mov	local03, result1
28264     3E AD 02 F6 | 	mov	local04, result2
28268     55 AF 02 F6 | 	mov	local05, local03
2826c     00 B0 06 F6 | 	mov	local06, #0
28270     D7 1E 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
28274                 | LR__3890
28274     57 B3 02 F6 | 	mov	local07, local05
28278     06 AE 06 F1 | 	add	local05, #6
2827c     57 95 EA FA | 	rdword	arg02, local05 wz
28280     55 93 02 F6 | 	mov	arg01, local03
28284     00 7A 06 A6 |  if_e	mov	result1, #0
28288     04 94 66 50 |  if_ne	shl	arg02, #4
2828c     4A 93 02 51 |  if_ne	add	arg01, arg02
28290     49 7B 02 56 |  if_ne	mov	result1, arg01
28294     3D AF 0A F6 | 	mov	local05, result1 wz
28298     57 B1 E2 5A |  if_ne	rdword	local06, local05
2829c     00 AE 0E F2 | 	cmp	local05, #0 wz
282a0     56 AF 52 52 |  if_ne	cmps	local05, local04 wc
282a4     08 00 90 1D |  if_a	jmp	#LR__3892
282a8     58 A7 5A 52 |  if_ne	cmps	local01, local06 wcz
282ac     C4 FF 9F 1D |  if_a	jmp	#LR__3890
282b0                 | LR__3891
282b0                 | LR__3892
282b0     00 AE 0E F2 | 	cmp	local05, #0 wz
282b4     57 7B 02 A6 |  if_e	mov	result1, local05
282b8     3C 01 90 AD |  if_e	jmp	#LR__3895
282bc     57 7D 02 F6 | 	mov	result2, local05
282c0     06 7C 06 F1 | 	add	result2, #6
282c4     3E B5 E2 FA | 	rdword	local08, result2
282c8     58 A7 52 F2 | 	cmps	local01, local06 wc
282cc     C0 00 90 3D |  if_ae	jmp	#LR__3894
282d0     57 A7 52 FC | 	wrword	local01, local05
282d4     57 93 02 F6 | 	mov	arg01, local05
282d8     53 B5 02 F6 | 	mov	local08, local01
282dc     04 B4 66 F0 | 	shl	local08, #4
282e0     5A 93 02 F1 | 	add	arg01, local08
282e4     53 B1 82 F1 | 	sub	local06, local01
282e8     49 B1 52 FC | 	wrword	local06, arg01
282ec     49 B5 02 F6 | 	mov	local08, arg01
282f0     02 B4 06 F1 | 	add	local08, #2
282f4     36 00 80 FF 
282f8     5A 1F 59 FC | 	wrword	##27791, local08
282fc     57 95 0A F6 | 	mov	arg02, local05 wz
28300     00 7A 06 A6 |  if_e	mov	result1, #0
28304     55 95 82 51 |  if_ne	sub	arg02, local03
28308     04 94 46 50 |  if_ne	shr	arg02, #4
2830c     4A 7B 02 56 |  if_ne	mov	result1, arg02
28310     49 B5 02 F6 | 	mov	local08, arg01
28314     04 B4 06 F1 | 	add	local08, #4
28318     5A 7B 52 FC | 	wrword	result1, local08
2831c     57 B5 02 F6 | 	mov	local08, local05
28320     06 B4 06 F1 | 	add	local08, #6
28324     49 95 02 F6 | 	mov	arg02, arg01
28328     5A B5 E2 FA | 	rdword	local08, local08
2832c     06 94 06 F1 | 	add	arg02, #6
28330     4A B5 52 FC | 	wrword	local08, arg02
28334     49 B7 02 F6 | 	mov	local09, arg01
28338     5B 95 0A F6 | 	mov	arg02, local09 wz
2833c     00 7A 06 A6 |  if_e	mov	result1, #0
28340     55 95 82 51 |  if_ne	sub	arg02, local03
28344     04 94 46 50 |  if_ne	shr	arg02, #4
28348     4A 7B 02 56 |  if_ne	mov	result1, arg02
2834c     3D B5 02 F6 | 	mov	local08, result1
28350     49 B9 EA FA | 	rdword	local10, arg01 wz
28354     00 7A 06 A6 |  if_e	mov	result1, #0
28358     04 B8 66 50 |  if_ne	shl	local10, #4
2835c     5C 93 02 51 |  if_ne	add	arg01, local10
28360     49 7B 02 56 |  if_ne	mov	result1, arg01
28364     3D BB 0A F6 | 	mov	local11, result1 wz
28368     24 00 90 AD |  if_e	jmp	#LR__3893
2836c     56 BB 52 F2 | 	cmps	local11, local04 wc
28370     1C 00 90 3D |  if_ae	jmp	#LR__3893
28374     5B 95 0A F6 | 	mov	arg02, local09 wz
28378     00 7A 06 A6 |  if_e	mov	result1, #0
2837c     55 95 82 51 |  if_ne	sub	arg02, local03
28380     04 94 46 50 |  if_ne	shr	arg02, #4
28384     4A 7B 02 56 |  if_ne	mov	result1, arg02
28388     04 BA 06 F1 | 	add	local11, #4
2838c     5D 7B 52 FC | 	wrword	result1, local11
28390                 | LR__3893
28390                 | LR__3894
28390     06 B2 06 F1 | 	add	local07, #6
28394     59 B5 52 FC | 	wrword	local08, local07
28398     36 00 00 FF 
2839c     80 B6 06 F6 | 	mov	local09, ##27776
283a0     54 B7 42 F5 | 	or	local09, local02
283a4     00 7A 06 F6 | 	mov	result1, #0
283a8     01 7A 62 FD | 	cogid	result1
283ac     3D B7 42 F5 | 	or	local09, result1
283b0     57 BB 02 F6 | 	mov	local11, local05
283b4     02 BA 06 F1 | 	add	local11, #2
283b8     5D B7 52 FC | 	wrword	local09, local11
283bc     55 B7 02 F6 | 	mov	local09, local03
283c0     08 B6 06 F1 | 	add	local09, #8
283c4     57 BB 02 F6 | 	mov	local11, local05
283c8     5B B7 E2 FA | 	rdword	local09, local09
283cc     06 BA 06 F1 | 	add	local11, #6
283d0     5D B7 52 FC | 	wrword	local09, local11
283d4     57 95 0A F6 | 	mov	arg02, local05 wz
283d8     00 7A 06 A6 |  if_e	mov	result1, #0
283dc     55 95 82 51 |  if_ne	sub	arg02, local03
283e0     04 94 46 50 |  if_ne	shr	arg02, #4
283e4     4A 7B 02 56 |  if_ne	mov	result1, arg02
283e8     08 AA 06 F1 | 	add	local03, #8
283ec     55 7B 52 FC | 	wrword	result1, local03
283f0     08 AE 06 F1 | 	add	local05, #8
283f4     57 7B 02 F6 | 	mov	result1, local05
283f8                 | LR__3895
283f8     E7 F0 03 F6 | 	mov	ptra, fp
283fc     F2 00 A0 FD | 	call	#popregs_
28400                 | __system___gc_tryalloc_ret
28400     2D 00 64 FD | 	ret
28404                 | 
28404                 | __system___gc_alloc_managed
28404     01 CA 05 F6 | 	mov	COUNT_, #1
28408     E8 00 A0 FD | 	call	#pushregs_
2840c     49 A7 02 F6 | 	mov	local01, arg01
28410     00 94 06 F6 | 	mov	arg02, #0
28414     1C 00 B0 FD | 	call	#__system___gc_doalloc
28418     3D 95 0A F6 | 	mov	arg02, result1 wz
2841c     01 A6 56 A2 |  if_e	cmps	local01, #1 wc
28420     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
28424     4A 7B 02 D6 |  if_c_or_nz	mov	result1, arg02
28428     E7 F0 03 F6 | 	mov	ptra, fp
2842c     F2 00 A0 FD | 	call	#popregs_
28430                 | __system___gc_alloc_managed_ret
28430     2D 00 64 FD | 	ret
28434                 | 
28434                 | __system___gc_doalloc
28434     06 CA 05 F6 | 	mov	COUNT_, #6
28438     E8 00 A0 FD | 	call	#pushregs_
2843c     49 A7 0A F6 | 	mov	local01, arg01 wz
28440     4A A9 02 F6 | 	mov	local02, arg02
28444     00 7A 06 A6 |  if_e	mov	result1, #0
28448     84 00 90 AD |  if_e	jmp	#LR__3907
2844c     17 A6 06 F1 | 	add	local01, #23
28450     0F A6 26 F5 | 	andn	local01, #15
28454     04 A6 46 F0 | 	shr	local01, #4
28458     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2845c     1C 92 06 F1 | 	add	arg01, #28
28460     98 C5 BF FD | 	call	#__system___lockmem
28464     53 93 02 F6 | 	mov	arg01, local01
28468     54 95 02 F6 | 	mov	arg02, local02
2846c     DC FD BF FD | 	call	#__system___gc_tryalloc
28470     3D AB 0A F6 | 	mov	local03, result1 wz
28474     14 00 90 5D |  if_ne	jmp	#LR__3900
28478     64 03 B0 FD | 	call	#__system___gc_docollect
2847c     53 93 02 F6 | 	mov	arg01, local01
28480     54 95 02 F6 | 	mov	arg02, local02
28484     C4 FD BF FD | 	call	#__system___gc_tryalloc
28488     3D AB 02 F6 | 	mov	local03, result1
2848c                 | LR__3900
2848c     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28490     1C 92 06 F1 | 	add	arg01, #28
28494     49 01 68 FC | 	wrlong	#0, arg01
28498     00 AA 0E F2 | 	cmp	local03, #0 wz
2849c     2C 00 90 AD |  if_e	jmp	#LR__3906
284a0     04 A6 66 F0 | 	shl	local01, #4
284a4     08 A6 86 F1 | 	sub	local01, #8
284a8     53 AD 52 F6 | 	abs	local04, local01 wc
284ac     02 AC 46 F0 | 	shr	local04, #2
284b0     56 AF 8A F6 | 	negc	local05, local04 wz
284b4     55 B1 02 F6 | 	mov	local06, local03
284b8     10 00 90 AD |  if_e	jmp	#LR__3905
284bc     D7 06 48 FB | 	callpa	#(@LR__3903-@LR__3901)>>2,fcache_load_ptr_
284c0                 | LR__3901
284c0     57 05 D8 FC | 	rep	@LR__3904, local05
284c4                 | LR__3902
284c4     58 01 68 FC | 	wrlong	#0, local06
284c8     04 B0 06 F1 | 	add	local06, #4
284cc                 | LR__3903
284cc                 | LR__3904
284cc                 | LR__3905
284cc                 | LR__3906
284cc     55 7B 02 F6 | 	mov	result1, local03
284d0                 | LR__3907
284d0     E7 F0 03 F6 | 	mov	ptra, fp
284d4     F2 00 A0 FD | 	call	#popregs_
284d8                 | __system___gc_doalloc_ret
284d8     2D 00 64 FD | 	ret
284dc                 | 
284dc                 | __system___gc_isvalidptr
284dc     F8 96 06 F4 | 	bitl	arg03, #248
284e0     08 96 86 F1 | 	sub	arg03, #8
284e4     49 97 52 F2 | 	cmps	arg03, arg01 wc
284e8     08 00 90 CD |  if_b	jmp	#LR__3910
284ec     4A 97 52 F2 | 	cmps	arg03, arg02 wc
284f0     08 00 90 CD |  if_b	jmp	#LR__3911
284f4                 | LR__3910
284f4     00 7A 06 F6 | 	mov	result1, #0
284f8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
284fc                 | LR__3911
284fc     4B 81 02 F6 | 	mov	_var01, arg03
28500     49 81 62 F5 | 	xor	_var01, arg01
28504     0F 80 CE F7 | 	test	_var01, #15 wz
28508     00 7A 06 56 |  if_ne	mov	result1, #0
2850c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
28510     4B 81 02 F6 | 	mov	_var01, arg03
28514     02 80 06 F1 | 	add	_var01, #2
28518     40 81 E2 FA | 	rdword	_var01, _var01
2851c     7F 00 00 FF 
28520     C0 81 06 F5 | 	and	_var01, ##65472
28524     36 00 00 FF 
28528     80 80 0E F2 | 	cmp	_var01, ##27776 wz
2852c     00 7A 06 56 |  if_ne	mov	result1, #0
28530     4B 7B 02 A6 |  if_e	mov	result1, arg03
28534                 | __system___gc_isvalidptr_ret
28534     2D 00 64 FD | 	ret
28538                 | 
28538                 | __system___gc_free
28538     49 97 02 F6 | 	mov	arg03, arg01
2853c     74 FC BF FD | 	call	#__system___gc_ptrs
28540     3D 93 02 F6 | 	mov	arg01, result1
28544     3E 95 02 F6 | 	mov	arg02, result2
28548     90 FF BF FD | 	call	#__system___gc_isvalidptr
2854c     3D 95 0A F6 | 	mov	arg02, result1 wz
28550     20 00 90 AD |  if_e	jmp	#LR__3920
28554     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28558     1C 92 06 F1 | 	add	arg01, #28
2855c     9C C4 BF FD | 	call	#__system___lockmem
28560     4A 93 02 F6 | 	mov	arg01, arg02
28564     10 00 B0 FD | 	call	#__system___gc_dofree
28568     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2856c     1C 92 06 F1 | 	add	arg01, #28
28570     49 01 68 FC | 	wrlong	#0, arg01
28574                 | LR__3920
28574                 | __system___gc_free_ret
28574     2D 00 64 FD | 	ret
28578                 | 
28578                 | __system___gc_dofree
28578     06 CA 05 F6 | 	mov	COUNT_, #6
2857c     E8 00 A0 FD | 	call	#pushregs_
28580     49 A7 02 F6 | 	mov	local01, arg01
28584     2C FC BF FD | 	call	#__system___gc_ptrs
28588     3D A9 02 F6 | 	mov	local02, result1
2858c     3E AB 02 F6 | 	mov	local03, result2
28590     53 95 02 F6 | 	mov	arg02, local01
28594     02 94 06 F1 | 	add	arg02, #2
28598     36 00 80 FF 
2859c     4A 1F 59 FC | 	wrword	##27791, arg02
285a0     53 AD 02 F6 | 	mov	local04, local01
285a4     53 93 02 F6 | 	mov	arg01, local01
285a8     49 AF EA FA | 	rdword	local05, arg01 wz
285ac     00 7A 06 A6 |  if_e	mov	result1, #0
285b0     04 AE 66 50 |  if_ne	shl	local05, #4
285b4     57 93 02 51 |  if_ne	add	arg01, local05
285b8     49 7B 02 56 |  if_ne	mov	result1, arg01
285bc     3D B1 02 F6 | 	mov	local06, result1
285c0     D7 24 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
285c4                 | LR__3930
285c4     04 AC 06 F1 | 	add	local04, #4
285c8     56 95 EA FA | 	rdword	arg02, local04 wz
285cc     54 93 02 F6 | 	mov	arg01, local02
285d0     00 7A 06 A6 |  if_e	mov	result1, #0
285d4     04 94 66 50 |  if_ne	shl	arg02, #4
285d8     4A 93 02 51 |  if_ne	add	arg01, arg02
285dc     49 7B 02 56 |  if_ne	mov	result1, arg01
285e0     3D AD 0A F6 | 	mov	local04, result1 wz
285e4     24 00 90 AD |  if_e	jmp	#LR__3932
285e8     56 93 02 F6 | 	mov	arg01, local04
285ec     00 7A 06 F6 | 	mov	result1, #0
285f0     02 92 06 F1 | 	add	arg01, #2
285f4     49 93 E2 FA | 	rdword	arg01, arg01
285f8     36 00 00 FF 
285fc     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28600     01 7A 66 A6 |  if_e	neg	result1, #1
28604     00 7A 0E F2 | 	cmp	result1, #0 wz
28608     B8 FF 9F AD |  if_e	jmp	#LR__3930
2860c                 | LR__3931
2860c                 | LR__3932
2860c     00 AC 0E F2 | 	cmp	local04, #0 wz
28610     54 AD 02 A6 |  if_e	mov	local04, local02
28614     56 95 02 F6 | 	mov	arg02, local04
28618     06 94 06 F1 | 	add	arg02, #6
2861c     53 93 02 F6 | 	mov	arg01, local01
28620     4A 95 E2 FA | 	rdword	arg02, arg02
28624     06 92 06 F1 | 	add	arg01, #6
28628     49 95 52 FC | 	wrword	arg02, arg01
2862c     53 95 0A F6 | 	mov	arg02, local01 wz
28630     00 7A 06 A6 |  if_e	mov	result1, #0
28634     54 95 82 51 |  if_ne	sub	arg02, local02
28638     04 94 46 50 |  if_ne	shr	arg02, #4
2863c     4A 7B 02 56 |  if_ne	mov	result1, arg02
28640     56 95 02 F6 | 	mov	arg02, local04
28644     06 94 06 F1 | 	add	arg02, #6
28648     4A 7B 52 FC | 	wrword	result1, arg02
2864c     54 AD 0A F2 | 	cmp	local04, local02 wz
28650     A4 00 90 AD |  if_e	jmp	#LR__3935
28654     56 93 02 F6 | 	mov	arg01, local04
28658     49 AF EA FA | 	rdword	local05, arg01 wz
2865c     00 7A 06 A6 |  if_e	mov	result1, #0
28660     04 AE 66 50 |  if_ne	shl	local05, #4
28664     57 93 02 51 |  if_ne	add	arg01, local05
28668     49 7B 02 56 |  if_ne	mov	result1, arg01
2866c     53 7B 0A F2 | 	cmp	result1, local01 wz
28670     84 00 90 5D |  if_ne	jmp	#LR__3934
28674     56 B1 E2 FA | 	rdword	local06, local04
28678     53 95 E2 FA | 	rdword	arg02, local01
2867c     4A B1 02 F1 | 	add	local06, arg02
28680     56 B1 52 FC | 	wrword	local06, local04
28684     53 B1 02 F6 | 	mov	local06, local01
28688     02 B0 06 F1 | 	add	local06, #2
2868c     58 01 58 FC | 	wrword	#0, local06
28690     53 93 02 F6 | 	mov	arg01, local01
28694     49 AF EA FA | 	rdword	local05, arg01 wz
28698     00 7A 06 A6 |  if_e	mov	result1, #0
2869c     04 AE 66 50 |  if_ne	shl	local05, #4
286a0     57 93 02 51 |  if_ne	add	arg01, local05
286a4     49 7B 02 56 |  if_ne	mov	result1, arg01
286a8     3D B1 02 F6 | 	mov	local06, result1
286ac     55 B1 52 F2 | 	cmps	local06, local03 wc
286b0     20 00 90 3D |  if_ae	jmp	#LR__3933
286b4     56 95 0A F6 | 	mov	arg02, local04 wz
286b8     00 7A 06 A6 |  if_e	mov	result1, #0
286bc     54 95 82 51 |  if_ne	sub	arg02, local02
286c0     04 94 46 50 |  if_ne	shr	arg02, #4
286c4     4A 7B 02 56 |  if_ne	mov	result1, arg02
286c8     58 95 02 F6 | 	mov	arg02, local06
286cc     04 94 06 F1 | 	add	arg02, #4
286d0     4A 7B 52 FC | 	wrword	result1, arg02
286d4                 | LR__3933
286d4     53 95 02 F6 | 	mov	arg02, local01
286d8     06 94 06 F1 | 	add	arg02, #6
286dc     56 7D 02 F6 | 	mov	result2, local04
286e0     4A 95 E2 FA | 	rdword	arg02, arg02
286e4     06 7C 06 F1 | 	add	result2, #6
286e8     3E 95 52 FC | 	wrword	arg02, result2
286ec     06 A6 06 F1 | 	add	local01, #6
286f0     53 01 58 FC | 	wrword	#0, local01
286f4     56 A7 02 F6 | 	mov	local01, local04
286f8                 | LR__3934
286f8                 | LR__3935
286f8     53 93 02 F6 | 	mov	arg01, local01
286fc     49 AF EA FA | 	rdword	local05, arg01 wz
28700     00 7A 06 A6 |  if_e	mov	result1, #0
28704     04 AE 66 50 |  if_ne	shl	local05, #4
28708     57 93 02 51 |  if_ne	add	arg01, local05
2870c     49 7B 02 56 |  if_ne	mov	result1, arg01
28710     3D 95 0A F6 | 	mov	arg02, result1 wz
28714     B8 00 90 AD |  if_e	jmp	#LR__3937
28718     55 95 52 F2 | 	cmps	arg02, local03 wc
2871c     B0 00 90 3D |  if_ae	jmp	#LR__3937
28720     4A 93 02 F6 | 	mov	arg01, arg02
28724     00 7A 06 F6 | 	mov	result1, #0
28728     02 92 06 F1 | 	add	arg01, #2
2872c     49 93 E2 FA | 	rdword	arg01, arg01
28730     36 00 00 FF 
28734     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28738     01 7A 66 A6 |  if_e	neg	result1, #1
2873c     00 7A 0E F2 | 	cmp	result1, #0 wz
28740     8C 00 90 AD |  if_e	jmp	#LR__3937
28744     53 AD 02 F6 | 	mov	local04, local01
28748     56 B1 E2 FA | 	rdword	local06, local04
2874c     4A 93 02 F6 | 	mov	arg01, arg02
28750     49 A7 E2 FA | 	rdword	local01, arg01
28754     53 B1 02 F1 | 	add	local06, local01
28758     56 B1 52 FC | 	wrword	local06, local04
2875c     49 B1 02 F6 | 	mov	local06, arg01
28760     06 B0 06 F1 | 	add	local06, #6
28764     56 A7 02 F6 | 	mov	local01, local04
28768     58 B1 E2 FA | 	rdword	local06, local06
2876c     06 A6 06 F1 | 	add	local01, #6
28770     53 B1 52 FC | 	wrword	local06, local01
28774     49 B1 02 F6 | 	mov	local06, arg01
28778     02 B0 06 F1 | 	add	local06, #2
2877c     58 55 59 FC | 	wrword	#170, local06
28780     49 B1 02 F6 | 	mov	local06, arg01
28784     06 B0 06 F1 | 	add	local06, #6
28788     58 01 58 FC | 	wrword	#0, local06
2878c     49 AF EA FA | 	rdword	local05, arg01 wz
28790     00 7A 06 A6 |  if_e	mov	result1, #0
28794     04 AE 66 50 |  if_ne	shl	local05, #4
28798     57 93 02 51 |  if_ne	add	arg01, local05
2879c     49 7B 02 56 |  if_ne	mov	result1, arg01
287a0     3D B1 0A F6 | 	mov	local06, result1 wz
287a4     28 00 90 AD |  if_e	jmp	#LR__3936
287a8     55 B1 52 F2 | 	cmps	local06, local03 wc
287ac     20 00 90 3D |  if_ae	jmp	#LR__3936
287b0     56 95 0A F6 | 	mov	arg02, local04 wz
287b4     00 7A 06 A6 |  if_e	mov	result1, #0
287b8     54 95 82 51 |  if_ne	sub	arg02, local02
287bc     04 94 46 50 |  if_ne	shr	arg02, #4
287c0     4A 7B 02 56 |  if_ne	mov	result1, arg02
287c4     58 AD 02 F6 | 	mov	local04, local06
287c8     04 AC 06 F1 | 	add	local04, #4
287cc     56 7B 52 FC | 	wrword	result1, local04
287d0                 | LR__3936
287d0                 | LR__3937
287d0     58 7B 02 F6 | 	mov	result1, local06
287d4     E7 F0 03 F6 | 	mov	ptra, fp
287d8     F2 00 A0 FD | 	call	#popregs_
287dc                 | __system___gc_dofree_ret
287dc     2D 00 64 FD | 	ret
287e0                 | 
287e0                 | __system___gc_docollect
287e0     05 CA 05 F6 | 	mov	COUNT_, #5
287e4     E8 00 A0 FD | 	call	#pushregs_
287e8     C8 F9 BF FD | 	call	#__system___gc_ptrs
287ec     3E A7 02 F6 | 	mov	local01, result2
287f0     3D A9 02 F6 | 	mov	local02, result1
287f4     54 93 02 F6 | 	mov	arg01, local02
287f8     49 AB EA FA | 	rdword	local03, arg01 wz
287fc     00 7A 06 A6 |  if_e	mov	result1, #0
28800     04 AA 66 50 |  if_ne	shl	local03, #4
28804     55 93 02 51 |  if_ne	add	arg01, local03
28808     49 7B 02 56 |  if_ne	mov	result1, arg01
2880c     3D AD 0A F6 | 	mov	local04, result1 wz
28810     00 7A 06 F6 | 	mov	result1, #0
28814     01 7A 62 FD | 	cogid	result1
28818     3D AF 02 F6 | 	mov	local05, result1
2881c     48 00 90 AD |  if_e	jmp	#LR__3942
28820     D7 22 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
28824                 | LR__3940
28824     53 AD 52 F2 | 	cmps	local04, local01 wc
28828     3C 00 90 3D |  if_ae	jmp	#LR__3942
2882c     56 95 02 F6 | 	mov	arg02, local04
28830     02 94 06 F1 | 	add	arg02, #2
28834     4A 95 E2 FA | 	rdword	arg02, arg02
28838     20 94 26 F5 | 	andn	arg02, #32
2883c     56 93 02 F6 | 	mov	arg01, local04
28840     02 92 06 F1 | 	add	arg01, #2
28844     49 95 52 FC | 	wrword	arg02, arg01
28848     56 93 02 F6 | 	mov	arg01, local04
2884c     49 AB EA FA | 	rdword	local03, arg01 wz
28850     00 7A 06 A6 |  if_e	mov	result1, #0
28854     04 AA 66 50 |  if_ne	shl	local03, #4
28858     55 93 02 51 |  if_ne	add	arg01, local03
2885c     49 7B 02 56 |  if_ne	mov	result1, arg01
28860     3D AD 0A F6 | 	mov	local04, result1 wz
28864     BC FF 9F 5D |  if_ne	jmp	#LR__3940
28868                 | LR__3941
28868                 | LR__3942
28868     00 AA 06 F6 | 	mov	local03, #0
2886c     00 92 06 F6 | 	mov	arg01, #0
28870     60 C1 BF FD | 	call	#__system____topofstack
28874     3D 95 02 F6 | 	mov	arg02, result1
28878     55 93 02 F6 | 	mov	arg01, local03
2887c     90 00 B0 FD | 	call	#__system___gc_markhub
28880     1C 01 B0 FD | 	call	#__system___gc_markcog
28884     54 93 02 F6 | 	mov	arg01, local02
28888     49 AB EA FA | 	rdword	local03, arg01 wz
2888c     00 7A 06 A6 |  if_e	mov	result1, #0
28890     04 AA 66 50 |  if_ne	shl	local03, #4
28894     55 93 02 51 |  if_ne	add	arg01, local03
28898     49 7B 02 56 |  if_ne	mov	result1, arg01
2889c     3D A9 0A F6 | 	mov	local02, result1 wz
288a0     60 00 90 AD |  if_e	jmp	#LR__3946
288a4                 | LR__3943
288a4     54 AD 02 F6 | 	mov	local04, local02
288a8     56 93 02 F6 | 	mov	arg01, local04
288ac     49 AB EA FA | 	rdword	local03, arg01 wz
288b0     00 7A 06 A6 |  if_e	mov	result1, #0
288b4     04 AA 66 50 |  if_ne	shl	local03, #4
288b8     55 93 02 51 |  if_ne	add	arg01, local03
288bc     49 7B 02 56 |  if_ne	mov	result1, arg01
288c0     3D A9 02 F6 | 	mov	local02, result1
288c4     56 95 02 F6 | 	mov	arg02, local04
288c8     02 94 06 F1 | 	add	arg02, #2
288cc     4A 95 E2 FA | 	rdword	arg02, arg02
288d0     20 94 CE F7 | 	test	arg02, #32 wz
288d4     10 94 CE A7 |  if_e	test	arg02, #16 wz
288d8     1C 00 90 5D |  if_ne	jmp	#LR__3945
288dc     4A 95 42 F8 | 	getnib	arg02, arg02, #0
288e0     57 95 0A F2 | 	cmp	arg02, local05 wz
288e4     0E 94 0E 52 |  if_ne	cmp	arg02, #14 wz
288e8     0C 00 90 5D |  if_ne	jmp	#LR__3944
288ec     56 93 02 F6 | 	mov	arg01, local04
288f0     84 FC BF FD | 	call	#__system___gc_dofree
288f4     3D A9 02 F6 | 	mov	local02, result1
288f8                 | LR__3944
288f8                 | LR__3945
288f8     00 A8 0E F2 | 	cmp	local02, #0 wz
288fc     53 A9 52 52 |  if_ne	cmps	local02, local01 wc
28900     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3943
28904                 | LR__3946
28904     E7 F0 03 F6 | 	mov	ptra, fp
28908     F2 00 A0 FD | 	call	#popregs_
2890c                 | __system___gc_docollect_ret
2890c     2D 00 64 FD | 	ret
28910                 | 
28910                 | __system___gc_markhub
28910     04 CA 05 F6 | 	mov	COUNT_, #4
28914     E8 00 A0 FD | 	call	#pushregs_
28918     49 A7 02 F6 | 	mov	local01, arg01
2891c     4A A9 02 F6 | 	mov	local02, arg02
28920     90 F8 BF FD | 	call	#__system___gc_ptrs
28924     3D AB 02 F6 | 	mov	local03, result1
28928     3E AD 02 F6 | 	mov	local04, result2
2892c                 | LR__3950
2892c     54 A7 52 F2 | 	cmps	local01, local02 wc
28930     60 00 90 3D |  if_ae	jmp	#LR__3951
28934     53 97 02 FB | 	rdlong	arg03, local01
28938     04 A6 06 F1 | 	add	local01, #4
2893c     56 95 02 F6 | 	mov	arg02, local04
28940     55 93 02 F6 | 	mov	arg01, local03
28944     94 FB BF FD | 	call	#__system___gc_isvalidptr
28948     3D 97 0A F6 | 	mov	arg03, result1 wz
2894c     DC FF 9F AD |  if_e	jmp	#LR__3950
28950     4B 93 02 F6 | 	mov	arg01, arg03
28954     00 7A 06 F6 | 	mov	result1, #0
28958     02 92 06 F1 | 	add	arg01, #2
2895c     49 93 E2 FA | 	rdword	arg01, arg01
28960     36 00 00 FF 
28964     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28968     01 7A 66 A6 |  if_e	neg	result1, #1
2896c     00 7A 0E F2 | 	cmp	result1, #0 wz
28970     B8 FF 9F 5D |  if_ne	jmp	#LR__3950
28974     4B 7D 02 F6 | 	mov	result2, arg03
28978     02 7C 06 F1 | 	add	result2, #2
2897c     3E 7D E2 FA | 	rdword	result2, result2
28980     0F 7C 26 F5 | 	andn	result2, #15
28984     2E 7C 46 F5 | 	or	result2, #46
28988     02 96 06 F1 | 	add	arg03, #2
2898c     4B 7D 52 FC | 	wrword	result2, arg03
28990     98 FF 9F FD | 	jmp	#LR__3950
28994                 | LR__3951
28994     E7 F0 03 F6 | 	mov	ptra, fp
28998     F2 00 A0 FD | 	call	#popregs_
2899c                 | __system___gc_markhub_ret
2899c     2D 00 64 FD | 	ret
289a0                 | 
289a0                 | __system___gc_markcog
289a0     04 CA 05 F6 | 	mov	COUNT_, #4
289a4     E8 00 A0 FD | 	call	#pushregs_
289a8     08 F8 BF FD | 	call	#__system___gc_ptrs
289ac     3D A7 02 F6 | 	mov	local01, result1
289b0     3E A9 02 F6 | 	mov	local02, result2
289b4     EF AB 06 F6 | 	mov	local03, #495
289b8                 | LR__3960
289b8                 | 	'.live	local03
289b8     00 AA 96 F9 | 	alts	local03, #0
289bc     55 AD 02 F6 | 	mov	local04, local03
289c0     53 93 02 F6 | 	mov	arg01, local01
289c4     54 95 02 F6 | 	mov	arg02, local02
289c8     56 97 02 F6 | 	mov	arg03, local04
289cc     0C FB BF FD | 	call	#__system___gc_isvalidptr
289d0     00 7A 0E F2 | 	cmp	result1, #0 wz
289d4     18 00 90 AD |  if_e	jmp	#LR__3961
289d8     3D AD 02 F6 | 	mov	local04, result1
289dc     02 AC 06 F1 | 	add	local04, #2
289e0     56 AD E2 FA | 	rdword	local04, local04
289e4     20 AC 46 F5 | 	or	local04, #32
289e8     02 7A 06 F1 | 	add	result1, #2
289ec     3D AD 52 FC | 	wrword	local04, result1
289f0                 | LR__3961
289f0     01 AA 86 F1 | 	sub	local03, #1
289f4     00 AA 56 F2 | 	cmps	local03, #0 wc
289f8     BC FF 9F 3D |  if_ae	jmp	#LR__3960
289fc     E7 F0 03 F6 | 	mov	ptra, fp
28a00     F2 00 A0 FD | 	call	#popregs_
28a04                 | __system___gc_markcog_ret
28a04     2D 00 64 FD | 	ret
28a08                 | 
28a08                 | __system___get_vfs_file_handle
28a08     01 CA 05 F6 | 	mov	COUNT_, #1
28a0c     E8 00 A0 FD | 	call	#pushregs_
28a10     30 CC BF FD | 	call	#__system___find_free_file
28a14     3D A7 02 F6 | 	mov	local01, result1
28a18     00 A6 56 F2 | 	cmps	local01, #0 wc
28a1c     34 A6 06 3D |  if_ae	qmul	local01, #52
28a20     00 7A 06 C6 |  if_b	mov	result1, #0
28a24     34 A7 02 36 |  if_ae	mov	local01, ptr___system__dat__
28a28     02 00 00 3F 
28a2c     2C A7 06 31 |  if_ae	add	local01, ##1324
28a30     18 7A 62 3D |  if_ae	getqx	result1
28a34     53 7B 02 31 |  if_ae	add	result1, local01
28a38     E7 F0 03 F6 | 	mov	ptra, fp
28a3c     F2 00 A0 FD | 	call	#popregs_
28a40                 | __system___get_vfs_file_handle_ret
28a40     2D 00 64 FD | 	ret
28a44                 | 
28a44                 | __system__opendir
28a44     06 CA 05 F6 | 	mov	COUNT_, #6
28a48     E8 00 A0 FD | 	call	#pushregs_
28a4c     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
28a50     84 A7 06 F1 | 	add	local01, #388
28a54     49 95 02 F6 | 	mov	arg02, arg01
28a58     53 93 02 F6 | 	mov	arg01, local01
28a5c     00 96 06 F6 | 	mov	arg03, #0
28a60     E4 C6 BF FD | 	call	#__system____getvfsforfile
28a64     3D A9 0A F6 | 	mov	local02, result1 wz
28a68     10 00 90 AD |  if_e	jmp	#LR__3970
28a6c     28 A8 06 F1 | 	add	local02, #40
28a70     54 97 0A FB | 	rdlong	arg03, local02 wz
28a74     28 A8 86 F1 | 	sub	local02, #40
28a78     14 00 90 5D |  if_ne	jmp	#LR__3971
28a7c                 | LR__3970
28a7c     20 68 06 F1 | 	add	ptr___system__dat__, #32
28a80     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28a84     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28a88     00 7A 06 F6 | 	mov	result1, #0
28a8c     90 00 90 FD | 	jmp	#LR__3973
28a90                 | LR__3971
28a90     5C 92 06 F6 | 	mov	arg01, #92
28a94     10 94 06 F6 | 	mov	arg02, #16
28a98     98 F9 BF FD | 	call	#__system___gc_doalloc
28a9c     3D AB 0A F6 | 	mov	local03, result1 wz
28aa0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28aa4     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28aa8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28aac     00 7A 06 A6 |  if_e	mov	result1, #0
28ab0     6C 00 90 AD |  if_e	jmp	#LR__3973
28ab4     28 A8 06 F1 | 	add	local02, #40
28ab8     54 AD 02 FB | 	rdlong	local04, local02
28abc     56 AF 02 F6 | 	mov	local05, local04
28ac0     28 A8 86 F1 | 	sub	local02, #40
28ac4     13 AE 46 F7 | 	zerox	local05, #19
28ac8     14 AC 46 F0 | 	shr	local04, #20
28acc     02 AC 66 F0 | 	shl	local04, #2
28ad0     2D AD 02 F1 | 	add	local04, __methods__
28ad4     56 AD 02 FB | 	rdlong	local04, local04
28ad8     55 93 02 F6 | 	mov	arg01, local03
28adc     53 95 02 F6 | 	mov	arg02, local01
28ae0     32 B1 02 F6 | 	mov	local06, objptr
28ae4     57 65 02 F6 | 	mov	objptr, local05
28ae8     2D AC 62 FD | 	call	local04
28aec     58 65 02 F6 | 	mov	objptr, local06
28af0     3D 97 0A F6 | 	mov	arg03, result1 wz
28af4     20 00 90 AD |  if_e	jmp	#LR__3972
28af8     00 96 4E F2 | 	cmps	arg03, #0 wz
28afc     20 68 06 F1 | 	add	ptr___system__dat__, #32
28b00     34 97 62 FC | 	wrlong	arg03, ptr___system__dat__
28b04     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28b08     55 93 02 F6 | 	mov	arg01, local03
28b0c     28 FA BF FD | 	call	#__system___gc_free
28b10     00 7A 06 F6 | 	mov	result1, #0
28b14     08 00 90 FD | 	jmp	#LR__3973
28b18                 | LR__3972
28b18     55 A9 62 FC | 	wrlong	local02, local03
28b1c     55 7B 02 F6 | 	mov	result1, local03
28b20                 | LR__3973
28b20     E7 F0 03 F6 | 	mov	ptra, fp
28b24     F2 00 A0 FD | 	call	#popregs_
28b28                 | __system__opendir_ret
28b28     2D 00 64 FD | 	ret
28b2c                 | 
28b2c                 | __system__closedir
28b2c     04 CA 05 F6 | 	mov	COUNT_, #4
28b30     E8 00 A0 FD | 	call	#pushregs_
28b34     49 A7 02 F6 | 	mov	local01, arg01
28b38     53 93 02 FB | 	rdlong	arg01, local01
28b3c     2C 92 06 F1 | 	add	arg01, #44
28b40     49 A9 02 FB | 	rdlong	local02, arg01
28b44     54 AB 02 F6 | 	mov	local03, local02
28b48     13 AA 46 F7 | 	zerox	local03, #19
28b4c     14 A8 46 F0 | 	shr	local02, #20
28b50     02 A8 66 F0 | 	shl	local02, #2
28b54     2D A9 02 F1 | 	add	local02, __methods__
28b58     54 A9 02 FB | 	rdlong	local02, local02
28b5c     53 93 02 F6 | 	mov	arg01, local01
28b60     32 AD 02 F6 | 	mov	local04, objptr
28b64     55 65 02 F6 | 	mov	objptr, local03
28b68     2D A8 62 FD | 	call	local02
28b6c     56 65 02 F6 | 	mov	objptr, local04
28b70     3D AD 02 F6 | 	mov	local04, result1
28b74     53 93 02 F6 | 	mov	arg01, local01
28b78     BC F9 BF FD | 	call	#__system___gc_free
28b7c     00 AC 4E F2 | 	cmps	local04, #0 wz
28b80     20 68 06 F1 | 	add	ptr___system__dat__, #32
28b84     34 AD 62 FC | 	wrlong	local04, ptr___system__dat__
28b88     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28b8c     01 7A 66 56 |  if_ne	neg	result1, #1
28b90     00 7A 06 A6 |  if_e	mov	result1, #0
28b94     E7 F0 03 F6 | 	mov	ptra, fp
28b98     F2 00 A0 FD | 	call	#popregs_
28b9c                 | __system__closedir_ret
28b9c     2D 00 64 FD | 	ret
28ba0                 | 
28ba0                 | __system__readdir
28ba0     04 CA 05 F6 | 	mov	COUNT_, #4
28ba4     E8 00 A0 FD | 	call	#pushregs_
28ba8     49 95 0A FB | 	rdlong	arg02, arg01 wz
28bac     49 A7 02 F6 | 	mov	local01, arg01
28bb0     08 A6 06 F1 | 	add	local01, #8
28bb4     00 7A 06 A6 |  if_e	mov	result1, #0
28bb8     5C 00 90 AD |  if_e	jmp	#LR__3981
28bbc     30 94 06 F1 | 	add	arg02, #48
28bc0     4A A9 02 FB | 	rdlong	local02, arg02
28bc4     54 AB 02 F6 | 	mov	local03, local02
28bc8     13 AA 46 F7 | 	zerox	local03, #19
28bcc     14 A8 46 F0 | 	shr	local02, #20
28bd0     02 A8 66 F0 | 	shl	local02, #2
28bd4     2D A9 02 F1 | 	add	local02, __methods__
28bd8     54 A9 02 FB | 	rdlong	local02, local02
28bdc     53 95 02 F6 | 	mov	arg02, local01
28be0     32 AD 02 F6 | 	mov	local04, objptr
28be4     55 65 02 F6 | 	mov	objptr, local03
28be8     2D A8 62 FD | 	call	local02
28bec     56 65 02 F6 | 	mov	objptr, local04
28bf0     00 7A 4E F2 | 	cmps	result1, #0 wz
28bf4     1C 00 90 AD |  if_e	jmp	#LR__3980
28bf8     01 7A 56 F2 | 	cmps	result1, #1 wc
28bfc     00 7A 4E 32 |  if_ae	cmps	result1, #0 wz
28c00     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
28c04     34 7B 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
28c08     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
28c0c     00 7A 06 F6 | 	mov	result1, #0
28c10     04 00 90 FD | 	jmp	#LR__3981
28c14                 | LR__3980
28c14     53 7B 02 F6 | 	mov	result1, local01
28c18                 | LR__3981
28c18     E7 F0 03 F6 | 	mov	ptra, fp
28c1c     F2 00 A0 FD | 	call	#popregs_
28c20                 | __system__readdir_ret
28c20     2D 00 64 FD | 	ret
28c24                 | 
28c24                 | __system___openraw
28c24     15 CA 05 F6 | 	mov	COUNT_, #21
28c28     E8 00 A0 FD | 	call	#pushregs_
28c2c     49 A7 02 F6 | 	mov	local01, arg01
28c30     4A A9 02 F6 | 	mov	local02, arg02
28c34     4B AB 02 F6 | 	mov	local03, arg03
28c38     4C AD 02 F6 | 	mov	local04, arg04
28c3c     0F AE C6 F9 | 	decod	local05, #15
28c40     53 B1 02 F6 | 	mov	local06, local01
28c44     00 B2 06 F6 | 	mov	local07, #0
28c48     34 B5 02 F6 | 	mov	local08, ptr___system__dat__
28c4c     84 B5 06 F1 | 	add	local08, #388
28c50     5A 93 02 F6 | 	mov	arg01, local08
28c54     54 95 02 F6 | 	mov	arg02, local02
28c58     00 96 06 F6 | 	mov	arg03, #0
28c5c     E8 C4 BF FD | 	call	#__system____getvfsforfile
28c60     3D B7 0A F6 | 	mov	local09, result1 wz
28c64     10 00 90 AD |  if_e	jmp	#LR__3990
28c68     20 B6 06 F1 | 	add	local09, #32
28c6c     5B 7B 0A FB | 	rdlong	result1, local09 wz
28c70     20 B6 86 F1 | 	sub	local09, #32
28c74     14 00 90 5D |  if_ne	jmp	#LR__3991
28c78                 | LR__3990
28c78     20 68 06 F1 | 	add	ptr___system__dat__, #32
28c7c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28c80     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28c84     01 7A 66 F6 | 	neg	result1, #1
28c88     DC 02 90 FD | 	jmp	#LR__4006
28c8c                 | LR__3991
28c8c     58 93 02 F6 | 	mov	arg01, local06
28c90     00 94 06 F6 | 	mov	arg02, #0
28c94     34 96 06 F6 | 	mov	arg03, #52
28c98     49 B9 02 F6 | 	mov	local10, arg01
28c9c     D8 00 A0 FD | 	call	#\builtin_bytefill_
28ca0     20 B6 06 F1 | 	add	local09, #32
28ca4     5B BB 02 FB | 	rdlong	local11, local09
28ca8     5D BD 02 F6 | 	mov	local12, local11
28cac     5D BF 02 F6 | 	mov	local13, local11
28cb0     20 B6 86 F1 | 	sub	local09, #32
28cb4     5F C1 02 F6 | 	mov	local14, local13
28cb8     13 BC 46 F7 | 	zerox	local12, #19
28cbc     14 C0 46 F0 | 	shr	local14, #20
28cc0     02 C0 66 F0 | 	shl	local14, #2
28cc4     2D C1 02 F1 | 	add	local14, __methods__
28cc8     60 C1 02 FB | 	rdlong	local14, local14
28ccc     58 C3 02 F6 | 	mov	local15, local06
28cd0     5A C5 02 F6 | 	mov	local16, local08
28cd4     55 C7 02 F6 | 	mov	local17, local03
28cd8     61 93 02 F6 | 	mov	arg01, local15
28cdc     62 95 02 F6 | 	mov	arg02, local16
28ce0     63 97 02 F6 | 	mov	arg03, local17
28ce4     32 C9 02 F6 | 	mov	local18, objptr
28ce8     5E 65 02 F6 | 	mov	objptr, local12
28cec     2D C0 62 FD | 	call	local14
28cf0     64 65 02 F6 | 	mov	objptr, local18
28cf4     3D CB 0A F6 | 	mov	local19, result1 wz
28cf8     04 AA CE 57 |  if_ne	test	local03, #4 wz
28cfc     58 00 90 AD |  if_e	jmp	#LR__3992
28d00     24 B6 06 F1 | 	add	local09, #36
28d04     5B BB 02 FB | 	rdlong	local11, local09
28d08     5D BD 02 F6 | 	mov	local12, local11
28d0c     5D BF 02 F6 | 	mov	local13, local11
28d10     24 B6 86 F1 | 	sub	local09, #36
28d14     5F C1 02 F6 | 	mov	local14, local13
28d18     13 BC 46 F7 | 	zerox	local12, #19
28d1c     14 C0 46 F0 | 	shr	local14, #20
28d20     02 C0 66 F0 | 	shl	local14, #2
28d24     2D C1 02 F1 | 	add	local14, __methods__
28d28     60 C1 02 FB | 	rdlong	local14, local14
28d2c     58 C3 02 F6 | 	mov	local15, local06
28d30     5A C5 02 F6 | 	mov	local16, local08
28d34     56 C7 02 F6 | 	mov	local17, local04
28d38     61 93 02 F6 | 	mov	arg01, local15
28d3c     62 95 02 F6 | 	mov	arg02, local16
28d40     63 97 02 F6 | 	mov	arg03, local17
28d44     32 C9 02 F6 | 	mov	local18, objptr
28d48     5E 65 02 F6 | 	mov	objptr, local12
28d4c     2D C0 62 FD | 	call	local14
28d50     64 65 02 F6 | 	mov	objptr, local18
28d54     3D CB 02 F6 | 	mov	local19, result1
28d58                 | LR__3992
28d58     00 CA 0E F2 | 	cmp	local19, #0 wz
28d5c     DC 01 90 5D |  if_ne	jmp	#LR__4004
28d60     55 CD 02 F6 | 	mov	local20, local03
28d64     03 CC 0E F5 | 	and	local20, #3 wz
28d68     02 AE 46 55 |  if_ne	or	local05, #2
28d6c     01 CC 0E F2 | 	cmp	local20, #1 wz
28d70     01 AE 46 55 |  if_ne	or	local05, #1
28d74     20 AA CE F7 | 	test	local03, #32 wz
28d78     80 AF 46 55 |  if_ne	or	local05, #384
28d7c     08 B0 06 F1 | 	add	local06, #8
28d80     58 AF 62 FC | 	wrlong	local05, local06
28d84     0C B0 06 F1 | 	add	local06, #12
28d88     58 CF 0A FB | 	rdlong	local21, local06 wz
28d8c     14 B0 86 F1 | 	sub	local06, #20
28d90     18 00 90 5D |  if_ne	jmp	#LR__3993
28d94     04 B6 06 F1 | 	add	local09, #4
28d98     5B CF 02 FB | 	rdlong	local21, local09
28d9c     04 B6 86 F1 | 	sub	local09, #4
28da0     14 B0 06 F1 | 	add	local06, #20
28da4     58 CF 62 FC | 	wrlong	local21, local06
28da8     14 B0 86 F1 | 	sub	local06, #20
28dac                 | LR__3993
28dac     18 B0 06 F1 | 	add	local06, #24
28db0     58 CF 0A FB | 	rdlong	local21, local06 wz
28db4     18 B0 86 F1 | 	sub	local06, #24
28db8     18 00 90 5D |  if_ne	jmp	#LR__3994
28dbc     08 B6 06 F1 | 	add	local09, #8
28dc0     5B CF 02 FB | 	rdlong	local21, local09
28dc4     08 B6 86 F1 | 	sub	local09, #8
28dc8     18 B0 06 F1 | 	add	local06, #24
28dcc     58 CF 62 FC | 	wrlong	local21, local06
28dd0     18 B0 86 F1 | 	sub	local06, #24
28dd4                 | LR__3994
28dd4     24 B0 06 F1 | 	add	local06, #36
28dd8     58 CF 0A FB | 	rdlong	local21, local06 wz
28ddc     24 B0 86 F1 | 	sub	local06, #36
28de0     5B CF 02 AB |  if_e	rdlong	local21, local09
28de4     24 B0 06 A1 |  if_e	add	local06, #36
28de8     58 CF 62 AC |  if_e	wrlong	local21, local06
28dec     24 B0 86 A1 |  if_e	sub	local06, #36
28df0     28 B0 06 F1 | 	add	local06, #40
28df4     58 CF 0A FB | 	rdlong	local21, local06 wz
28df8     28 B0 86 F1 | 	sub	local06, #40
28dfc     18 00 90 5D |  if_ne	jmp	#LR__3995
28e00     10 B6 06 F1 | 	add	local09, #16
28e04     5B CF 02 FB | 	rdlong	local21, local09
28e08     10 B6 86 F1 | 	sub	local09, #16
28e0c     28 B0 06 F1 | 	add	local06, #40
28e10     58 CF 62 FC | 	wrlong	local21, local06
28e14     28 B0 86 F1 | 	sub	local06, #40
28e18                 | LR__3995
28e18     30 B0 06 F1 | 	add	local06, #48
28e1c     58 CF 0A FB | 	rdlong	local21, local06 wz
28e20     30 B0 86 F1 | 	sub	local06, #48
28e24     18 00 90 5D |  if_ne	jmp	#LR__3996
28e28     0C B6 06 F1 | 	add	local09, #12
28e2c     5B CF 02 FB | 	rdlong	local21, local09
28e30     0C B6 86 F1 | 	sub	local09, #12
28e34     30 B0 06 F1 | 	add	local06, #48
28e38     58 CF 62 FC | 	wrlong	local21, local06
28e3c     30 B0 86 F1 | 	sub	local06, #48
28e40                 | LR__3996
28e40     20 B0 06 F1 | 	add	local06, #32
28e44     58 CF 0A FB | 	rdlong	local21, local06 wz
28e48     20 B0 86 F1 | 	sub	local06, #32
28e4c     18 00 90 5D |  if_ne	jmp	#LR__3997
28e50     50 B6 06 F1 | 	add	local09, #80
28e54     5B CF 02 FB | 	rdlong	local21, local09
28e58     50 B6 86 F1 | 	sub	local09, #80
28e5c     20 B0 06 F1 | 	add	local06, #32
28e60     58 CF 62 FC | 	wrlong	local21, local06
28e64     20 B0 86 F1 | 	sub	local06, #32
28e68                 | LR__3997
28e68     1C B0 06 F1 | 	add	local06, #28
28e6c     58 CF 0A FB | 	rdlong	local21, local06 wz
28e70     1C B0 86 F1 | 	sub	local06, #28
28e74     18 00 90 5D |  if_ne	jmp	#LR__3998
28e78     54 B6 06 F1 | 	add	local09, #84
28e7c     5B CF 02 FB | 	rdlong	local21, local09
28e80     54 B6 86 F1 | 	sub	local09, #84
28e84     1C B0 06 F1 | 	add	local06, #28
28e88     58 CF 62 FC | 	wrlong	local21, local06
28e8c     1C B0 86 F1 | 	sub	local06, #28
28e90                 | LR__3998
28e90     1C B0 06 F1 | 	add	local06, #28
28e94     58 CF 0A FB | 	rdlong	local21, local06 wz
28e98     1C B0 86 F1 | 	sub	local06, #28
28e9c     1C 00 90 5D |  if_ne	jmp	#LR__3999
28ea0     01 B2 06 F6 | 	mov	local07, #1
28ea4     32 93 02 F6 | 	mov	arg01, objptr
28ea8     00 C0 05 FF 
28eac     00 92 46 F5 | 	or	arg01, ##192937984
28eb0     1C B0 06 F1 | 	add	local06, #28
28eb4     58 93 62 FC | 	wrlong	arg01, local06
28eb8     1C B0 86 F1 | 	sub	local06, #28
28ebc                 | LR__3999
28ebc     20 B0 06 F1 | 	add	local06, #32
28ec0     58 CF 0A FB | 	rdlong	local21, local06 wz
28ec4     20 B0 86 F1 | 	sub	local06, #32
28ec8     1C 00 90 5D |  if_ne	jmp	#LR__4000
28ecc     01 B2 06 F6 | 	mov	local07, #1
28ed0     32 93 02 F6 | 	mov	arg01, objptr
28ed4     00 C8 05 FF 
28ed8     00 92 46 F5 | 	or	arg01, ##193986560
28edc     20 B0 06 F1 | 	add	local06, #32
28ee0     58 93 62 FC | 	wrlong	arg01, local06
28ee4     20 B0 86 F1 | 	sub	local06, #32
28ee8                 | LR__4000
28ee8     2C B0 06 F1 | 	add	local06, #44
28eec     58 CF 0A FB | 	rdlong	local21, local06 wz
28ef0     2C B0 86 F1 | 	sub	local06, #44
28ef4     44 00 90 5D |  if_ne	jmp	#LR__4003
28ef8     14 B6 06 F1 | 	add	local09, #20
28efc     5B CF 0A FB | 	rdlong	local21, local09 wz
28f00     14 B6 86 F1 | 	sub	local09, #20
28f04     18 00 90 AD |  if_e	jmp	#LR__4001
28f08     14 B6 06 F1 | 	add	local09, #20
28f0c     5B CF 02 FB | 	rdlong	local21, local09
28f10     2C B0 06 F1 | 	add	local06, #44
28f14     58 CF 62 FC | 	wrlong	local21, local06
28f18     2C B0 86 F1 | 	sub	local06, #44
28f1c     1C 00 90 FD | 	jmp	#LR__4002
28f20                 | LR__4001
28f20     01 B2 06 F6 | 	mov	local07, #1
28f24     32 93 02 F6 | 	mov	arg01, objptr
28f28     00 D0 05 FF 
28f2c     00 92 46 F5 | 	or	arg01, ##195035136
28f30     2C B0 06 F1 | 	add	local06, #44
28f34     58 93 62 FC | 	wrlong	arg01, local06
28f38     2C B0 86 F1 | 	sub	local06, #44
28f3c                 | LR__4002
28f3c                 | LR__4003
28f3c                 | LR__4004
28f3c     00 B2 0E F2 | 	cmp	local07, #0 wz
28f40     58 93 02 56 |  if_ne	mov	arg01, local06
28f44     E4 04 B0 5D |  if_ne	call	#__system____default_buffer_init
28f48     00 CA 0E F2 | 	cmp	local19, #0 wz
28f4c     00 92 06 A6 |  if_e	mov	arg01, #0
28f50     10 00 90 5D |  if_ne	jmp	#LR__4005
28f54     00 92 4E F2 | 	cmps	arg01, #0 wz
28f58     20 68 06 F1 | 	add	ptr___system__dat__, #32
28f5c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
28f60     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28f64                 | LR__4005
28f64     65 7B 02 F6 | 	mov	result1, local19
28f68                 | LR__4006
28f68     E7 F0 03 F6 | 	mov	ptra, fp
28f6c     F2 00 A0 FD | 	call	#popregs_
28f70                 | __system___openraw_ret
28f70     2D 00 64 FD | 	ret
28f74                 | 
28f74                 | __system___closeraw
28f74     05 CA 05 F6 | 	mov	COUNT_, #5
28f78     E8 00 A0 FD | 	call	#pushregs_
28f7c     49 A7 02 F6 | 	mov	local01, arg01
28f80     00 A8 06 F6 | 	mov	local02, #0
28f84     08 A6 06 F1 | 	add	local01, #8
28f88     53 7B 0A FB | 	rdlong	result1, local01 wz
28f8c     08 A6 86 F1 | 	sub	local01, #8
28f90     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28f94     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28f98     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28f9c     01 7A 66 A6 |  if_e	neg	result1, #1
28fa0     A8 00 90 AD |  if_e	jmp	#LR__4012
28fa4     2C A6 06 F1 | 	add	local01, #44
28fa8     53 7B 0A FB | 	rdlong	result1, local01 wz
28fac     2C A6 86 F1 | 	sub	local01, #44
28fb0     38 00 90 AD |  if_e	jmp	#LR__4010
28fb4     2C A6 06 F1 | 	add	local01, #44
28fb8     53 AB 02 FB | 	rdlong	local03, local01
28fbc     55 AD 02 F6 | 	mov	local04, local03
28fc0     2C A6 86 F1 | 	sub	local01, #44
28fc4     13 AC 46 F7 | 	zerox	local04, #19
28fc8     14 AA 46 F0 | 	shr	local03, #20
28fcc     02 AA 66 F0 | 	shl	local03, #2
28fd0     2D AB 02 F1 | 	add	local03, __methods__
28fd4     55 AB 02 FB | 	rdlong	local03, local03
28fd8     53 93 02 F6 | 	mov	arg01, local01
28fdc     32 AF 02 F6 | 	mov	local05, objptr
28fe0     56 65 02 F6 | 	mov	objptr, local04
28fe4     2D AA 62 FD | 	call	local03
28fe8     57 65 02 F6 | 	mov	objptr, local05
28fec                 | LR__4010
28fec     24 A6 06 F1 | 	add	local01, #36
28ff0     53 AF 0A FB | 	rdlong	local05, local01 wz
28ff4     24 A6 86 F1 | 	sub	local01, #36
28ff8     3C 00 90 AD |  if_e	jmp	#LR__4011
28ffc     24 A6 06 F1 | 	add	local01, #36
29000     53 AB 02 FB | 	rdlong	local03, local01
29004     55 AD 02 F6 | 	mov	local04, local03
29008     24 A6 86 F1 | 	sub	local01, #36
2900c     13 AC 46 F7 | 	zerox	local04, #19
29010     14 AA 46 F0 | 	shr	local03, #20
29014     02 AA 66 F0 | 	shl	local03, #2
29018     2D AB 02 F1 | 	add	local03, __methods__
2901c     55 AB 02 FB | 	rdlong	local03, local03
29020     53 93 02 F6 | 	mov	arg01, local01
29024     32 AF 02 F6 | 	mov	local05, objptr
29028     56 65 02 F6 | 	mov	objptr, local04
2902c     2D AA 62 FD | 	call	local03
29030     57 65 02 F6 | 	mov	objptr, local05
29034     3D A9 02 F6 | 	mov	local02, result1
29038                 | LR__4011
29038     53 93 02 F6 | 	mov	arg01, local01
2903c     00 94 06 F6 | 	mov	arg02, #0
29040     34 96 06 F6 | 	mov	arg03, #52
29044     D8 00 A0 FD | 	call	#\builtin_bytefill_
29048     54 7B 02 F6 | 	mov	result1, local02
2904c                 | LR__4012
2904c     E7 F0 03 F6 | 	mov	ptra, fp
29050     F2 00 A0 FD | 	call	#popregs_
29054                 | __system___closeraw_ret
29054     2D 00 64 FD | 	ret
29058                 | 
29058                 | __system___vfs_open_fat_handle
29058     03 CA 05 F6 | 	mov	COUNT_, #3
2905c     E8 00 A0 FD | 	call	#pushregs_
29060     49 A7 0A F6 | 	mov	local01, arg01 wz
29064     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29068     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2906c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29070     01 7A 66 A6 |  if_e	neg	result1, #1
29074     80 00 90 AD |  if_e	jmp	#LR__4021
29078     01 00 00 FF 
2907c     14 92 06 F6 | 	mov	arg01, ##532
29080     80 F3 BF FD | 	call	#__system___gc_alloc_managed
29084     3D A9 02 F6 | 	mov	local02, result1
29088     01 00 00 FF 
2908c     34 92 06 F6 | 	mov	arg01, ##564
29090     70 F3 BF FD | 	call	#__system___gc_alloc_managed
29094     32 AB 02 F6 | 	mov	local03, objptr
29098     54 65 02 F6 | 	mov	objptr, local02
2909c     01 00 00 FF 
290a0     10 64 06 F1 | 	add	objptr, ##528
290a4     32 A7 62 FC | 	wrlong	local01, objptr
290a8                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/diskio.cc"
290a8                 | ' 
290a8                 | ' 
290a8                 | ' vfs_file_t *fh;
290a8                 | ' 
290a8                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
290a8                 | '     fh = fhandle;
290a8                 | '     return RES_OK;
290a8     92 01 00 FF 
290ac     3E 95 06 F6 | 	mov	arg02, ##@LR__5477
290b0     3D 93 02 F6 | 	mov	arg01, result1
290b4     00 96 06 F6 | 	mov	arg03, #0
290b8     54 65 02 F6 | 	mov	objptr, local02
290bc     4C 65 B0 FD | 	call	#_fatfs_cc_f_mount
290c0     55 65 02 F6 | 	mov	objptr, local03
290c4     3D 93 0A F6 | 	mov	arg01, result1 wz
290c8     18 00 90 AD |  if_e	jmp	#LR__4020
290cc     49 93 6A F6 | 	neg	arg01, arg01 wz
290d0     20 68 06 F1 | 	add	ptr___system__dat__, #32
290d4     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
290d8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
290dc     00 7A 06 F6 | 	mov	result1, #0
290e0     14 00 90 FD | 	jmp	#LR__4021
290e4                 | LR__4020
290e4     54 93 02 F6 | 	mov	arg01, local02
290e8     32 AB 02 F6 | 	mov	local03, objptr
290ec     54 65 02 F6 | 	mov	objptr, local02
290f0     88 8B B0 FD | 	call	#_fatfs_cc_get_vfs
290f4     55 65 02 F6 | 	mov	objptr, local03
290f8                 | LR__4021
290f8     E7 F0 03 F6 | 	mov	ptra, fp
290fc     F2 00 A0 FD | 	call	#popregs_
29100                 | __system___vfs_open_fat_handle_ret
29100     2D 00 64 FD | 	ret
29104                 | 
29104                 | __system___vfs_open_sdcardx
29104     04 CA 05 F6 | 	mov	COUNT_, #4
29108     E8 00 A0 FD | 	call	#pushregs_
2910c     4C 17 B0 FD | 	call	#__system___sdmm_open
29110     3D A7 0A F6 | 	mov	local01, result1 wz
29114     00 7A 06 A6 |  if_e	mov	result1, #0
29118     4C 00 90 AD |  if_e	jmp	#LR__4031
2911c     53 93 02 F6 | 	mov	arg01, local01
29120     34 FF BF FD | 	call	#__system___vfs_open_fat_handle
29124     3D A9 0A F6 | 	mov	local02, result1 wz
29128     38 00 90 5D |  if_ne	jmp	#LR__4030
2912c     24 A6 06 F1 | 	add	local01, #36
29130     53 AB 02 FB | 	rdlong	local03, local01
29134     55 AD 02 F6 | 	mov	local04, local03
29138     24 A6 86 F1 | 	sub	local01, #36
2913c     13 AC 46 F7 | 	zerox	local04, #19
29140     14 AA 46 F0 | 	shr	local03, #20
29144     02 AA 66 F0 | 	shl	local03, #2
29148     2D AB 02 F1 | 	add	local03, __methods__
2914c     55 AB 02 FB | 	rdlong	local03, local03
29150     53 93 02 F6 | 	mov	arg01, local01
29154     32 A7 02 F6 | 	mov	local01, objptr
29158     56 65 02 F6 | 	mov	objptr, local04
2915c     2D AA 62 FD | 	call	local03
29160     53 65 02 F6 | 	mov	objptr, local01
29164                 | LR__4030
29164     54 7B 02 F6 | 	mov	result1, local02
29168                 | LR__4031
29168     E7 F0 03 F6 | 	mov	ptra, fp
2916c     F2 00 A0 FD | 	call	#popregs_
29170                 | __system___vfs_open_sdcardx_ret
29170     2D 00 64 FD | 	ret
29174                 | 
29174                 | __system____default_getc
29174     03 CA 05 F6 | 	mov	COUNT_, #3
29178     E8 00 A0 FD | 	call	#pushregs_
2917c     49 A7 02 F6 | 	mov	local01, arg01
29180     53 A9 02 FB | 	rdlong	local02, local01
29184     08 A6 06 F1 | 	add	local01, #8
29188     53 AB 02 FB | 	rdlong	local03, local01
2918c     08 A6 86 F1 | 	sub	local01, #8
29190     08 AA CE F7 | 	test	local03, #8 wz
29194     53 93 02 56 |  if_ne	mov	arg01, local01
29198     08 01 B0 5D |  if_ne	call	#__system____default_flush
2919c     08 A6 06 F1 | 	add	local01, #8
291a0     53 AB 02 FB | 	rdlong	local03, local01
291a4     04 AA 46 F5 | 	or	local03, #4
291a8     53 AB 62 FC | 	wrlong	local03, local01
291ac     08 A6 86 F1 | 	sub	local01, #8
291b0     54 AB 0A FB | 	rdlong	local03, local02 wz
291b4     0C 00 90 5D |  if_ne	jmp	#LR__4040
291b8     53 93 02 F6 | 	mov	arg01, local01
291bc     E0 18 B0 FD | 	call	#__system____default_filbuf
291c0     3D AB 02 F6 | 	mov	local03, result1
291c4                 | LR__4040
291c4     01 AA 56 F2 | 	cmps	local03, #1 wc
291c8     01 7A 66 C6 |  if_b	neg	result1, #1
291cc     1C 00 90 CD |  if_b	jmp	#LR__4041
291d0     01 AA 86 F1 | 	sub	local03, #1
291d4     54 AB 62 FC | 	wrlong	local03, local02
291d8     04 A8 06 F1 | 	add	local02, #4
291dc     54 AB 02 FB | 	rdlong	local03, local02
291e0     55 7B C2 FA | 	rdbyte	result1, local03
291e4     01 AA 06 F1 | 	add	local03, #1
291e8     54 AB 62 FC | 	wrlong	local03, local02
291ec                 | LR__4041
291ec     E7 F0 03 F6 | 	mov	ptra, fp
291f0     F2 00 A0 FD | 	call	#popregs_
291f4                 | __system____default_getc_ret
291f4     2D 00 64 FD | 	ret
291f8                 | 
291f8                 | __system____default_putc
291f8     06 CA 05 F6 | 	mov	COUNT_, #6
291fc     E8 00 A0 FD | 	call	#pushregs_
29200     49 A7 02 F6 | 	mov	local01, arg01
29204     4A A9 02 F6 | 	mov	local02, arg02
29208     54 AB 02 FB | 	rdlong	local03, local02
2920c     08 A8 06 F1 | 	add	local02, #8
29210     54 95 02 FB | 	rdlong	arg02, local02
29214     08 A8 86 F1 | 	sub	local02, #8
29218     04 94 CE F7 | 	test	arg02, #4 wz
2921c     54 93 02 56 |  if_ne	mov	arg01, local02
29220     80 00 B0 5D |  if_ne	call	#__system____default_flush
29224     08 A8 06 F1 | 	add	local02, #8
29228     54 AD 02 FB | 	rdlong	local04, local02
2922c     08 AC 46 F5 | 	or	local04, #8
29230     54 AD 62 FC | 	wrlong	local04, local02
29234     55 AF 02 FB | 	rdlong	local05, local03
29238     0C AA 06 F1 | 	add	local03, #12
2923c     55 95 02 FB | 	rdlong	arg02, local03
29240     0C AA 86 F1 | 	sub	local03, #12
29244     57 7B 02 F6 | 	mov	result1, local05
29248     4A 7B 02 F1 | 	add	result1, arg02
2924c     3D A7 42 FC | 	wrbyte	local01, result1
29250     53 A7 E2 F8 | 	getbyte	local01, local01, #0
29254     01 AE 06 F1 | 	add	local05, #1
29258     55 AF 62 FC | 	wrlong	local05, local03
2925c     02 A8 86 F1 | 	sub	local02, #2
29260     54 B1 EA FA | 	rdword	local06, local02 wz
29264     06 A8 86 F1 | 	sub	local02, #6
29268     08 AA 06 51 |  if_ne	add	local03, #8
2926c     55 AD 02 5B |  if_ne	rdlong	local04, local03
29270     56 AF 0A 52 |  if_ne	cmp	local05, local04 wz
29274     0C 00 90 AD |  if_e	jmp	#LR__4050
29278     0A A6 0E F2 | 	cmp	local01, #10 wz
2927c     01 B0 0E A2 |  if_e	cmp	local06, #1 wz
29280     10 00 90 5D |  if_ne	jmp	#LR__4051
29284                 | LR__4050
29284     54 93 02 F6 | 	mov	arg01, local02
29288     18 00 B0 FD | 	call	#__system____default_flush
2928c     00 7A 0E F2 | 	cmp	result1, #0 wz
29290     01 A6 66 56 |  if_ne	neg	local01, #1
29294                 | LR__4051
29294     53 7B 02 F6 | 	mov	result1, local01
29298     E7 F0 03 F6 | 	mov	ptra, fp
2929c     F2 00 A0 FD | 	call	#popregs_
292a0                 | __system____default_putc_ret
292a0     2D 00 64 FD | 	ret
292a4                 | 
292a4                 | __system____default_flush
292a4     07 CA 05 F6 | 	mov	COUNT_, #7
292a8     E8 00 A0 FD | 	call	#pushregs_
292ac     49 A7 02 F6 | 	mov	local01, arg01
292b0     53 A9 02 FB | 	rdlong	local02, local01
292b4     54 AB 02 FB | 	rdlong	local03, local02
292b8     08 A6 06 F1 | 	add	local01, #8
292bc     53 7D 02 FB | 	rdlong	result2, local01
292c0     08 A6 86 F1 | 	sub	local01, #8
292c4     08 7C CE F7 | 	test	result2, #8 wz
292c8     D4 00 90 AD |  if_e	jmp	#LR__4062
292cc     01 AA 56 F2 | 	cmps	local03, #1 wc
292d0     2C 01 90 CD |  if_b	jmp	#LR__4064
292d4     08 A6 06 F1 | 	add	local01, #8
292d8     53 7D 02 FB | 	rdlong	result2, local01
292dc     08 A6 86 F1 | 	sub	local01, #8
292e0     80 7C CE F7 | 	test	result2, #128 wz
292e4     6C 00 90 AD |  if_e	jmp	#LR__4061
292e8     08 A6 06 F1 | 	add	local01, #8
292ec     53 97 02 FB | 	rdlong	arg03, local01
292f0     08 A6 86 F1 | 	sub	local01, #8
292f4     00 97 CE F7 | 	test	arg03, #256 wz
292f8     58 00 90 AD |  if_e	jmp	#LR__4060
292fc     30 A6 06 F1 | 	add	local01, #48
29300     53 AD 02 FB | 	rdlong	local04, local01
29304     56 AF 02 F6 | 	mov	local05, local04
29308     30 A6 86 F1 | 	sub	local01, #48
2930c     13 AE 46 F7 | 	zerox	local05, #19
29310     14 AC 46 F0 | 	shr	local04, #20
29314     02 AC 66 F0 | 	shl	local04, #2
29318     2D AD 02 F1 | 	add	local04, __methods__
2931c     56 AD 02 FB | 	rdlong	local04, local04
29320     53 93 02 F6 | 	mov	arg01, local01
29324     00 94 06 F6 | 	mov	arg02, #0
29328     00 96 06 F6 | 	mov	arg03, #0
2932c     02 98 06 F6 | 	mov	arg04, #2
29330     32 B1 02 F6 | 	mov	local06, objptr
29334     57 65 02 F6 | 	mov	objptr, local05
29338     2D AC 62 FD | 	call	local04
2933c     58 65 02 F6 | 	mov	objptr, local06
29340     08 A6 06 F1 | 	add	local01, #8
29344     53 B1 02 FB | 	rdlong	local06, local01
29348     00 B1 26 F5 | 	andn	local06, #256
2934c     53 B1 62 FC | 	wrlong	local06, local01
29350     08 A6 86 F1 | 	sub	local01, #8
29354                 | LR__4060
29354                 | LR__4061
29354     18 A6 06 F1 | 	add	local01, #24
29358     53 AD 02 FB | 	rdlong	local04, local01
2935c     56 AF 02 F6 | 	mov	local05, local04
29360     18 A6 86 F1 | 	sub	local01, #24
29364     13 AE 46 F7 | 	zerox	local05, #19
29368     14 AC 46 F0 | 	shr	local04, #20
2936c     02 AC 66 F0 | 	shl	local04, #2
29370     2D AD 02 F1 | 	add	local04, __methods__
29374     56 AD 02 FB | 	rdlong	local04, local04
29378     0C A8 06 F1 | 	add	local02, #12
2937c     54 95 02 FB | 	rdlong	arg02, local02
29380     0C A8 86 F1 | 	sub	local02, #12
29384     53 93 02 F6 | 	mov	arg01, local01
29388     55 97 02 F6 | 	mov	arg03, local03
2938c     32 B1 02 F6 | 	mov	local06, objptr
29390     57 65 02 F6 | 	mov	objptr, local05
29394     2D AC 62 FD | 	call	local04
29398     58 65 02 F6 | 	mov	objptr, local06
2939c     60 00 90 FD | 	jmp	#LR__4064
293a0                 | LR__4062
293a0     08 A6 06 F1 | 	add	local01, #8
293a4     53 B1 02 FB | 	rdlong	local06, local01
293a8     08 A6 86 F1 | 	sub	local01, #8
293ac     04 B0 CE F7 | 	test	local06, #4 wz
293b0     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
293b4     48 00 90 AD |  if_e	jmp	#LR__4063
293b8     55 95 62 F6 | 	neg	arg02, local03
293bc     4A 97 02 F6 | 	mov	arg03, arg02
293c0     1F 96 C6 F0 | 	sar	arg03, #31
293c4     30 A6 06 F1 | 	add	local01, #48
293c8     53 AD 02 FB | 	rdlong	local04, local01
293cc     56 AF 02 F6 | 	mov	local05, local04
293d0     30 A6 86 F1 | 	sub	local01, #48
293d4     13 AE 46 F7 | 	zerox	local05, #19
293d8     14 AC 46 F0 | 	shr	local04, #20
293dc     02 AC 66 F0 | 	shl	local04, #2
293e0     2D AD 02 F1 | 	add	local04, __methods__
293e4     56 AD 02 FB | 	rdlong	local04, local04
293e8     53 93 02 F6 | 	mov	arg01, local01
293ec     01 98 06 F6 | 	mov	arg04, #1
293f0     32 B1 02 F6 | 	mov	local06, objptr
293f4     57 65 02 F6 | 	mov	objptr, local05
293f8     2D AC 62 FD | 	call	local04
293fc     58 65 02 F6 | 	mov	objptr, local06
29400                 | LR__4063
29400                 | LR__4064
29400     54 01 68 FC | 	wrlong	#0, local02
29404     04 A8 06 F1 | 	add	local02, #4
29408     54 01 68 FC | 	wrlong	#0, local02
2940c     08 A6 06 F1 | 	add	local01, #8
29410     53 B3 02 FB | 	rdlong	local07, local01
29414     0C B2 26 F5 | 	andn	local07, #12
29418     53 B3 62 FC | 	wrlong	local07, local01
2941c     00 7A 06 F6 | 	mov	result1, #0
29420     E7 F0 03 F6 | 	mov	ptra, fp
29424     F2 00 A0 FD | 	call	#popregs_
29428                 | __system____default_flush_ret
29428     2D 00 64 FD | 	ret
2942c                 | 
2942c                 | __system____default_buffer_init
2942c     02 CA 05 F6 | 	mov	COUNT_, #2
29430     E8 00 A0 FD | 	call	#pushregs_
29434     49 A7 02 F6 | 	mov	local01, arg01
29438     53 A9 02 FB | 	rdlong	local02, local01
2943c     53 93 02 F6 | 	mov	arg01, local01
29440     A4 03 B0 FD | 	call	#__system___isatty
29444     00 7A 0E F2 | 	cmp	result1, #0 wz
29448     06 A6 06 51 |  if_ne	add	local01, #6
2944c     53 0B 58 5C |  if_ne	wrword	#5, local01
29450     06 A6 06 A1 |  if_e	add	local01, #6
29454     53 0D 58 AC |  if_e	wrword	#6, local01
29458     10 A8 06 F1 | 	add	local02, #16
2945c     54 A7 02 F6 | 	mov	local01, local02
29460     04 A8 86 F1 | 	sub	local02, #4
29464     54 A7 62 FC | 	wrlong	local01, local02
29468     04 A8 86 F1 | 	sub	local02, #4
2946c     02 00 80 FF 
29470     54 01 68 FC | 	wrlong	##1024, local02
29474     00 7A 06 F6 | 	mov	result1, #0
29478     E7 F0 03 F6 | 	mov	ptra, fp
2947c     F2 00 A0 FD | 	call	#popregs_
29480                 | __system____default_buffer_init_ret
29480     2D 00 64 FD | 	ret
29484                 | 
29484                 | __system__stat
29484     04 CA 05 F6 | 	mov	COUNT_, #4
29488     E8 00 A0 FD | 	call	#pushregs_
2948c     4A A7 02 F6 | 	mov	local01, arg02
29490     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
29494     84 A9 06 F1 | 	add	local02, #388
29498     49 95 02 F6 | 	mov	arg02, arg01
2949c     54 93 02 F6 | 	mov	arg01, local02
294a0     00 96 06 F6 | 	mov	arg03, #0
294a4     A0 BC BF FD | 	call	#__system____getvfsforfile
294a8     3D AB 0A F6 | 	mov	local03, result1 wz
294ac     10 00 90 AD |  if_e	jmp	#LR__4070
294b0     34 AA 06 F1 | 	add	local03, #52
294b4     55 97 0A FB | 	rdlong	arg03, local03 wz
294b8     34 AA 86 F1 | 	sub	local03, #52
294bc     14 00 90 5D |  if_ne	jmp	#LR__4071
294c0                 | LR__4070
294c0     20 68 06 F1 | 	add	ptr___system__dat__, #32
294c4     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
294c8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
294cc     01 7A 66 F6 | 	neg	result1, #1
294d0     68 00 90 FD | 	jmp	#LR__4072
294d4                 | LR__4071
294d4     53 93 02 F6 | 	mov	arg01, local01
294d8     00 94 06 F6 | 	mov	arg02, #0
294dc     34 96 06 F6 | 	mov	arg03, #52
294e0     49 AD 02 F6 | 	mov	local04, arg01
294e4     D8 00 A0 FD | 	call	#\builtin_bytefill_
294e8     56 7B 02 F6 | 	mov	result1, local04
294ec     54 93 CA FA | 	rdbyte	arg01, local02 wz
294f0     08 A6 06 A1 |  if_e	add	local01, #8
294f4     08 00 80 AF 
294f8     53 FF 6B AC |  if_e	wrlong	##4607, local01
294fc     00 7A 06 A6 |  if_e	mov	result1, #0
29500     38 00 90 AD |  if_e	jmp	#LR__4072
29504     34 AA 06 F1 | 	add	local03, #52
29508     55 AB 02 FB | 	rdlong	local03, local03
2950c     55 AD 02 F6 | 	mov	local04, local03
29510     13 AA 46 F7 | 	zerox	local03, #19
29514     14 AC 46 F0 | 	shr	local04, #20
29518     02 AC 66 F0 | 	shl	local04, #2
2951c     2D AD 02 F1 | 	add	local04, __methods__
29520     56 AD 02 FB | 	rdlong	local04, local04
29524     54 93 02 F6 | 	mov	arg01, local02
29528     53 95 02 F6 | 	mov	arg02, local01
2952c     32 A9 02 F6 | 	mov	local02, objptr
29530     55 65 02 F6 | 	mov	objptr, local03
29534     2D AC 62 FD | 	call	local04
29538     54 65 02 F6 | 	mov	objptr, local02
2953c                 | LR__4072
2953c     E7 F0 03 F6 | 	mov	ptra, fp
29540     F2 00 A0 FD | 	call	#popregs_
29544                 | __system__stat_ret
29544     2D 00 64 FD | 	ret
29548                 | 
29548                 | __system__write
29548     01 CA 05 F6 | 	mov	COUNT_, #1
2954c     E8 00 A0 FD | 	call	#pushregs_
29550     0A 92 16 F2 | 	cmp	arg01, #10 wc
29554     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29558     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2955c     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29560     01 7A 66 36 |  if_ae	neg	result1, #1
29564     1C 00 90 3D |  if_ae	jmp	#LR__4080
29568     34 92 06 FD | 	qmul	arg01, #52
2956c     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29570     02 00 00 FF 
29574     2C A7 06 F1 | 	add	local01, ##1324
29578     18 92 62 FD | 	getqx	arg01
2957c     53 93 02 F1 | 	add	arg01, local01
29580     3C 0F B0 FD | 	call	#__system___vfswrite
29584                 | LR__4080
29584     E7 F0 03 F6 | 	mov	ptra, fp
29588     F2 00 A0 FD | 	call	#popregs_
2958c                 | __system__write_ret
2958c     2D 00 64 FD | 	ret
29590                 | 
29590                 | __system__read
29590     01 CA 05 F6 | 	mov	COUNT_, #1
29594     E8 00 A0 FD | 	call	#pushregs_
29598     0A 92 16 F2 | 	cmp	arg01, #10 wc
2959c     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
295a0     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
295a4     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
295a8     01 7A 66 36 |  if_ae	neg	result1, #1
295ac     1C 00 90 3D |  if_ae	jmp	#LR__4090
295b0     34 92 06 FD | 	qmul	arg01, #52
295b4     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
295b8     02 00 00 FF 
295bc     2C A7 06 F1 | 	add	local01, ##1324
295c0     18 92 62 FD | 	getqx	arg01
295c4     53 93 02 F1 | 	add	arg01, local01
295c8     C0 10 B0 FD | 	call	#__system___vfsread
295cc                 | LR__4090
295cc     E7 F0 03 F6 | 	mov	ptra, fp
295d0     F2 00 A0 FD | 	call	#popregs_
295d4                 | __system__read_ret
295d4     2D 00 64 FD | 	ret
295d8                 | 
295d8                 | __system__close
295d8     01 CA 05 F6 | 	mov	COUNT_, #1
295dc     E8 00 A0 FD | 	call	#pushregs_
295e0     0A 92 16 F2 | 	cmp	arg01, #10 wc
295e4     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
295e8     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
295ec     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
295f0     01 7A 66 36 |  if_ae	neg	result1, #1
295f4     1C 00 90 3D |  if_ae	jmp	#LR__4100
295f8     34 92 06 FD | 	qmul	arg01, #52
295fc     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29600     02 00 00 FF 
29604     2C A7 06 F1 | 	add	local01, ##1324
29608     18 92 62 FD | 	getqx	arg01
2960c     53 93 02 F1 | 	add	arg01, local01
29610     60 F9 BF FD | 	call	#__system___closeraw
29614                 | LR__4100
29614     E7 F0 03 F6 | 	mov	ptra, fp
29618     F2 00 A0 FD | 	call	#popregs_
2961c                 | __system__close_ret
2961c     2D 00 64 FD | 	ret
29620                 | 
29620                 | __system__lseek
29620     0B CA 05 F6 | 	mov	COUNT_, #11
29624     E8 00 A0 FD | 	call	#pushregs_
29628     49 AF 02 F6 | 	mov	local05, arg01
2962c     4A A7 02 F6 | 	mov	local01, arg02
29630     4B A9 02 F6 | 	mov	local02, arg03
29634     4C B1 02 F6 | 	mov	local06, arg04
29638     0A AE 16 F2 | 	cmp	local05, #10 wc
2963c     18 00 90 CD |  if_b	jmp	#LR__4110
29640     20 68 06 F1 | 	add	ptr___system__dat__, #32
29644     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
29648     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2964c     01 7C 66 F6 | 	neg	result2, #1
29650     01 7A 66 F6 | 	neg	result1, #1
29654     FC 00 90 FD | 	jmp	#LR__4113
29658                 | LR__4110
29658     34 AE 06 FD | 	qmul	local05, #52
2965c     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
29660     02 00 00 FF 
29664     2C 93 06 F1 | 	add	arg01, ##1324
29668     18 B2 62 FD | 	getqx	local07
2966c     49 B3 02 F1 | 	add	local07, arg01
29670     30 B2 06 F1 | 	add	local07, #48
29674     59 AF 0A FB | 	rdlong	local05, local07 wz
29678     30 B2 86 F1 | 	sub	local07, #48
2967c     18 00 90 5D |  if_ne	jmp	#LR__4111
29680     20 68 06 F1 | 	add	ptr___system__dat__, #32
29684     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
29688     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2968c     01 7C 66 F6 | 	neg	result2, #1
29690     01 7A 66 F6 | 	neg	result1, #1
29694     BC 00 90 FD | 	jmp	#LR__4113
29698                 | LR__4111
29698     08 B2 06 F1 | 	add	local07, #8
2969c     59 B5 02 FB | 	rdlong	local08, local07
296a0     08 B2 86 F1 | 	sub	local07, #8
296a4     80 B4 CE F7 | 	test	local08, #128 wz
296a8     08 B2 06 51 |  if_ne	add	local07, #8
296ac     59 B5 02 5B |  if_ne	rdlong	local08, local07
296b0     00 B5 46 55 |  if_ne	or	local08, #256
296b4     59 B5 62 5C |  if_ne	wrlong	local08, local07
296b8     08 B2 86 51 |  if_ne	sub	local07, #8
296bc     53 95 02 F6 | 	mov	arg02, local01
296c0     54 97 02 F6 | 	mov	arg03, local02
296c4     30 B2 06 F1 | 	add	local07, #48
296c8     59 B7 02 FB | 	rdlong	local09, local07
296cc     5B B9 02 F6 | 	mov	local10, local09
296d0     30 B2 86 F1 | 	sub	local07, #48
296d4     13 B8 46 F7 | 	zerox	local10, #19
296d8     14 B6 46 F0 | 	shr	local09, #20
296dc     02 B6 66 F0 | 	shl	local09, #2
296e0     2D B7 02 F1 | 	add	local09, __methods__
296e4     5B B7 02 FB | 	rdlong	local09, local09
296e8     59 93 02 F6 | 	mov	arg01, local07
296ec     58 99 02 F6 | 	mov	arg04, local06
296f0     32 BB 02 F6 | 	mov	local11, objptr
296f4     5C 65 02 F6 | 	mov	objptr, local10
296f8     2D B6 62 FD | 	call	local09
296fc     5D 65 02 F6 | 	mov	objptr, local11
29700     3D AB 02 F6 | 	mov	local03, result1
29704     3E AD 02 F6 | 	mov	local04, result2
29708     55 93 02 F6 | 	mov	arg01, local03
2970c     56 95 02 F6 | 	mov	arg02, local04
29710     00 7A 06 F6 | 	mov	result1, #0
29714     00 92 1E F2 | 	cmp	arg01, #0 wcz
29718     00 94 7E F2 | 	cmpsx	arg02, #0 wcz
2971c     01 7A 86 56 |  if_ne	negc	result1, #1
29720     00 7A 56 F2 | 	cmps	result1, #0 wc
29724     24 00 90 3D |  if_ae	jmp	#LR__4112
29728     55 93 6A F6 | 	neg	arg01, local03 wz
2972c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29730     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29734     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29738     01 7A 66 56 |  if_ne	neg	result1, #1
2973c     00 7A 06 A6 |  if_e	mov	result1, #0
29740     3D 7D 02 F6 | 	mov	result2, result1
29744     1F 7C C6 F0 | 	sar	result2, #31
29748     08 00 90 FD | 	jmp	#LR__4113
2974c                 | LR__4112
2974c     55 7B 02 F6 | 	mov	result1, local03
29750     56 7D 02 F6 | 	mov	result2, local04
29754                 | LR__4113
29754     E7 F0 03 F6 | 	mov	ptra, fp
29758     F2 00 A0 FD | 	call	#popregs_
2975c                 | __system__lseek_ret
2975c     2D 00 64 FD | 	ret
29760                 | 
29760                 | __system___ioctl
29760     03 CA 05 F6 | 	mov	COUNT_, #3
29764     E8 00 A0 FD | 	call	#pushregs_
29768     00 92 4E F2 | 	cmps	arg01, #0 wz
2976c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29770     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29774     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29778     01 7A 66 A6 |  if_e	neg	result1, #1
2977c     5C 00 90 AD |  if_e	jmp	#LR__4121
29780     28 92 06 F1 | 	add	arg01, #40
29784     49 A7 02 FB | 	rdlong	local01, arg01
29788     53 A9 02 F6 | 	mov	local02, local01
2978c     28 92 86 F1 | 	sub	arg01, #40
29790     13 A8 46 F7 | 	zerox	local02, #19
29794     14 A6 46 F0 | 	shr	local01, #20
29798     02 A6 66 F0 | 	shl	local01, #2
2979c     2D A7 02 F1 | 	add	local01, __methods__
297a0     53 A7 02 FB | 	rdlong	local01, local01
297a4     32 AB 02 F6 | 	mov	local03, objptr
297a8     54 65 02 F6 | 	mov	objptr, local02
297ac     2D A6 62 FD | 	call	local01
297b0     55 65 02 F6 | 	mov	objptr, local03
297b4     3D 93 0A F6 | 	mov	arg01, result1 wz
297b8     1C 00 90 AD |  if_e	jmp	#LR__4120
297bc     00 92 4E F2 | 	cmps	arg01, #0 wz
297c0     20 68 06 F1 | 	add	ptr___system__dat__, #32
297c4     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
297c8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
297cc     01 7A 66 56 |  if_ne	neg	result1, #1
297d0     00 7A 06 A6 |  if_e	mov	result1, #0
297d4     04 00 90 FD | 	jmp	#LR__4121
297d8                 | LR__4120
297d8     00 7A 06 F6 | 	mov	result1, #0
297dc                 | LR__4121
297dc     E7 F0 03 F6 | 	mov	ptra, fp
297e0     F2 00 A0 FD | 	call	#popregs_
297e4                 | __system___ioctl_ret
297e4     2D 00 64 FD | 	ret
297e8                 | 
297e8                 | __system___isatty
297e8     00 CA 05 F6 | 	mov	COUNT_, #0
297ec     E8 00 A0 FD | 	call	#pushregs_
297f0     0C F0 07 F1 | 	add	ptra, #12
297f4     E7 96 02 F6 | 	mov	arg03, fp
297f8     08 96 06 F1 | 	add	arg03, #8
297fc     00 95 06 F6 | 	mov	arg02, #256
29800     5C FF BF FD | 	call	#__system___ioctl
29804     00 7A 0E F2 | 	cmp	result1, #0 wz
29808     01 7A 06 A6 |  if_e	mov	result1, #1
2980c     00 7A 06 56 |  if_ne	mov	result1, #0
29810     E7 F0 03 F6 | 	mov	ptra, fp
29814     F2 00 A0 FD | 	call	#popregs_
29818                 | __system___isatty_ret
29818     2D 00 64 FD | 	ret
2981c                 | 
2981c                 | __system____getftab
2981c     0A 92 16 F2 | 	cmp	arg01, #10 wc
29820     34 92 06 CD |  if_b	qmul	arg01, #52
29824     00 7A 06 36 |  if_ae	mov	result1, #0
29828     34 93 02 C6 |  if_b	mov	arg01, ptr___system__dat__
2982c     02 00 00 CF 
29830     2C 93 06 C1 |  if_b	add	arg01, ##1324
29834     18 7A 62 CD |  if_b	getqx	result1
29838     49 7B 02 C1 |  if_b	add	result1, arg01
2983c                 | __system____getftab_ret
2983c     2D 00 64 FD | 	ret
29840                 | 
29840                 | __system__strncpy
29840     49 81 02 F6 | 	mov	_var01, arg01
29844                 | LR__4130
29844     01 96 86 F1 | 	sub	arg03, #1
29848     00 96 56 F2 | 	cmps	arg03, #0 wc
2984c     24 00 90 CD |  if_b	jmp	#LR__4131
29850     4A 7B 02 F6 | 	mov	result1, arg02
29854     01 7A 06 F1 | 	add	result1, #1
29858     4A 83 C2 FA | 	rdbyte	_var02, arg02
2985c     3D 95 02 F6 | 	mov	arg02, result1
29860     40 83 42 FC | 	wrbyte	_var02, _var01
29864     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
29868     07 82 4E F7 | 	zerox	_var02, #7 wz
2986c     01 80 06 F1 | 	add	_var01, #1
29870     D0 FF 9F 5D |  if_ne	jmp	#LR__4130
29874                 | LR__4131
29874     D7 0C 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
29878                 | LR__4132
29878     01 96 86 F1 | 	sub	arg03, #1
2987c     00 96 56 F2 | 	cmps	arg03, #0 wc
29880     40 85 02 36 |  if_ae	mov	_var03, _var01
29884     01 80 06 31 |  if_ae	add	_var01, #1
29888     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2988c     E8 FF 9F 3D |  if_ae	jmp	#LR__4132
29890                 | LR__4133
29890     49 7B 02 F6 | 	mov	result1, arg01
29894                 | __system__strncpy_ret
29894     2D 00 64 FD | 	ret
29898                 | 
29898                 | __system__strncat
29898     00 94 4E F2 | 	cmps	arg02, #0 wz
2989c     54 00 90 AD |  if_e	jmp	#LR__4145
298a0     01 96 16 F2 | 	cmp	arg03, #1 wc
298a4     4C 00 90 CD |  if_b	jmp	#LR__4145
298a8     49 81 02 F6 | 	mov	_var01, arg01
298ac     D7 06 48 FB | 	callpa	#(@LR__4141-@LR__4140)>>2,fcache_load_ptr_
298b0                 | LR__4140
298b0     40 7B CA FA | 	rdbyte	result1, _var01 wz
298b4     01 80 06 51 |  if_ne	add	_var01, #1
298b8     F4 FF 9F 5D |  if_ne	jmp	#LR__4140
298bc                 | LR__4141
298bc     4B 83 02 F6 | 	mov	_var02, arg03
298c0     D7 16 48 FB | 	callpa	#(@LR__4143-@LR__4142)>>2,fcache_load_ptr_
298c4                 | LR__4142
298c4     4A 85 C2 FA | 	rdbyte	_var03, arg02
298c8     42 87 02 F6 | 	mov	_var04, _var03
298cc     07 86 4E F7 | 	zerox	_var04, #7 wz
298d0     01 94 06 F1 | 	add	arg02, #1
298d4     18 00 90 AD |  if_e	jmp	#LR__4144
298d8     01 82 86 F1 | 	sub	_var02, #1
298dc     00 82 56 F2 | 	cmps	_var02, #0 wc
298e0     40 87 02 36 |  if_ae	mov	_var04, _var01
298e4     01 80 06 31 |  if_ae	add	_var01, #1
298e8     43 85 42 3C |  if_ae	wrbyte	_var03, _var04
298ec     D4 FF 9F 3D |  if_ae	jmp	#LR__4142
298f0                 | LR__4143
298f0                 | LR__4144
298f0     40 01 48 FC | 	wrbyte	#0, _var01
298f4                 | LR__4145
298f4     49 7B 02 F6 | 	mov	result1, arg01
298f8                 | __system__strncat_ret
298f8     2D 00 64 FD | 	ret
298fc                 | 
298fc                 | __system__strncmp
298fc     49 81 0A F6 | 	mov	_var01, arg01 wz
29900     14 00 90 5D |  if_ne	jmp	#LR__4150
29904     00 94 0E F2 | 	cmp	arg02, #0 wz
29908     01 82 66 56 |  if_ne	neg	_var02, #1
2990c     00 82 06 A6 |  if_e	mov	_var02, #0
29910     41 7B 02 F6 | 	mov	result1, _var02
29914     74 00 90 FD | 	jmp	#__system__strncmp_ret
29918                 | LR__4150
29918     00 94 0E F2 | 	cmp	arg02, #0 wz
2991c     01 7A 06 A6 |  if_e	mov	result1, #1
29920     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29924     4B 85 02 F6 | 	mov	_var03, arg03
29928     D7 16 48 FB | 	callpa	#(@LR__4152-@LR__4151)>>2,fcache_load_ptr_
2992c                 | LR__4151
2992c     40 87 C2 FA | 	rdbyte	_var04, _var01
29930     4A 89 02 F6 | 	mov	_var05, arg02
29934     44 8B C2 FA | 	rdbyte	_var06, _var05
29938     01 84 86 F1 | 	sub	_var03, #1
2993c     00 84 56 F2 | 	cmps	_var03, #0 wc
29940     01 80 06 F1 | 	add	_var01, #1
29944     01 94 06 F1 | 	add	arg02, #1
29948     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2994c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4153
29950     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
29954     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4151
29958                 | LR__4152
29958                 | LR__4153
29958     00 84 56 F2 | 	cmps	_var03, #0 wc
2995c     00 7A 06 C6 |  if_b	mov	result1, #0
29960     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
29964     45 87 0A F2 | 	cmp	_var04, _var06 wz
29968     00 7A 06 A6 |  if_e	mov	result1, #0
2996c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29970     00 86 0E F2 | 	cmp	_var04, #0 wz
29974     01 7A 66 A6 |  if_e	neg	result1, #1
29978     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2997c     00 8A 0E F2 | 	cmp	_var06, #0 wz
29980     01 7A 06 A6 |  if_e	mov	result1, #1
29984     43 7B 02 56 |  if_ne	mov	result1, _var04
29988     45 7B 82 51 |  if_ne	sub	result1, _var06
2998c                 | __system__strncmp_ret
2998c     2D 00 64 FD | 	ret
29990                 | 
29990                 | __system____root_opendir
29990     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29994     64 7A 06 F1 | 	add	result1, #100
29998     04 92 06 F1 | 	add	arg01, #4
2999c     49 7B 62 FC | 	wrlong	result1, arg01
299a0     00 7A 06 F6 | 	mov	result1, #0
299a4                 | __system____root_opendir_ret
299a4     2D 00 64 FD | 	ret
299a8                 | 
299a8                 | __system____root_readdir
299a8     03 CA 05 F6 | 	mov	COUNT_, #3
299ac     E8 00 A0 FD | 	call	#pushregs_
299b0     49 A7 02 F6 | 	mov	local01, arg01
299b4     4A A9 02 F6 | 	mov	local02, arg02
299b8     04 A6 06 F1 | 	add	local01, #4
299bc     53 AB 02 FB | 	rdlong	local03, local01
299c0     04 A6 86 F1 | 	sub	local01, #4
299c4                 | LR__4160
299c4     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
299c8     74 96 06 F1 | 	add	arg03, #116
299cc     4B AB 0A F2 | 	cmp	local03, arg03 wz
299d0     01 7A 66 A6 |  if_e	neg	result1, #1
299d4     48 00 90 AD |  if_e	jmp	#LR__4161
299d8     55 97 0A FB | 	rdlong	arg03, local03 wz
299dc     04 AA 06 A1 |  if_e	add	local03, #4
299e0     E0 FF 9F AD |  if_e	jmp	#LR__4160
299e4     55 95 02 FB | 	rdlong	arg02, local03
299e8     01 94 06 F1 | 	add	arg02, #1
299ec     54 93 02 F6 | 	mov	arg01, local02
299f0     40 96 06 F6 | 	mov	arg03, #64
299f4     48 FE BF FD | 	call	#__system__strncpy
299f8     50 A8 06 F1 | 	add	local02, #80
299fc     54 03 48 FC | 	wrbyte	#1, local02
29a00     08 A8 86 F1 | 	sub	local02, #8
29a04     54 01 68 FC | 	wrlong	#0, local02
29a08     04 A8 06 F1 | 	add	local02, #4
29a0c     54 01 68 FC | 	wrlong	#0, local02
29a10     04 AA 06 F1 | 	add	local03, #4
29a14     04 A6 06 F1 | 	add	local01, #4
29a18     53 AB 62 FC | 	wrlong	local03, local01
29a1c     00 7A 06 F6 | 	mov	result1, #0
29a20                 | LR__4161
29a20     E7 F0 03 F6 | 	mov	ptra, fp
29a24     F2 00 A0 FD | 	call	#popregs_
29a28                 | __system____root_readdir_ret
29a28     2D 00 64 FD | 	ret
29a2c                 | 
29a2c                 | __system____root_closedir
29a2c     00 7A 06 F6 | 	mov	result1, #0
29a30                 | __system____root_closedir_ret
29a30     2D 00 64 FD | 	ret
29a34                 | 
29a34                 | __system____root_stat
29a34     4A 81 02 F6 | 	mov	_var01, arg02
29a38     40 93 02 F6 | 	mov	arg01, _var01
29a3c     00 94 06 F6 | 	mov	arg02, #0
29a40     34 96 06 F6 | 	mov	arg03, #52
29a44     D8 00 A0 FD | 	call	#\builtin_bytefill_
29a48     08 80 06 F1 | 	add	_var01, #8
29a4c     08 00 80 FF 
29a50     40 FF 6B FC | 	wrlong	##4607, _var01
29a54     00 7A 06 F6 | 	mov	result1, #0
29a58                 | __system____root_stat_ret
29a58     2D 00 64 FD | 	ret
29a5c                 | 
29a5c                 | __system___normalizeName
29a5c     00 80 06 F6 | 	mov	_var01, #0
29a60     49 83 02 F6 | 	mov	_var02, arg01
29a64     41 85 02 F6 | 	mov	_var03, _var02
29a68                 | LR__4170
29a68     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29a6c     5C 01 90 AD |  if_e	jmp	#LR__4189
29a70     00 80 0E F2 | 	cmp	_var01, #0 wz
29a74     42 87 02 56 |  if_ne	mov	_var04, _var03
29a78     01 84 06 51 |  if_ne	add	_var03, #1
29a7c     43 5F 48 5C |  if_ne	wrbyte	#47, _var04
29a80     00 80 06 56 |  if_ne	mov	_var01, #0
29a84     41 87 C2 FA | 	rdbyte	_var04, _var02
29a88     2E 86 0E F2 | 	cmp	_var04, #46 wz
29a8c     D8 00 90 5D |  if_ne	jmp	#LR__4182
29a90     01 82 06 F1 | 	add	_var02, #1
29a94     41 87 C2 FA | 	rdbyte	_var04, _var02
29a98     01 82 86 F1 | 	sub	_var02, #1
29a9c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29aa0     18 00 90 AD |  if_e	jmp	#LR__4171
29aa4     01 82 06 F1 | 	add	_var02, #1
29aa8     41 89 C2 FA | 	rdbyte	_var05, _var02
29aac     01 82 86 F1 | 	sub	_var02, #1
29ab0     44 8B 02 F6 | 	mov	_var06, _var05
29ab4     07 8A 4E F7 | 	zerox	_var06, #7 wz
29ab8     10 00 90 5D |  if_ne	jmp	#LR__4172
29abc                 | LR__4171
29abc     41 8D 02 F6 | 	mov	_var07, _var02
29ac0     01 8C 06 F1 | 	add	_var07, #1
29ac4     46 83 02 F6 | 	mov	_var02, _var07
29ac8     E0 00 90 FD | 	jmp	#LR__4186
29acc                 | LR__4172
29acc     01 82 06 F1 | 	add	_var02, #1
29ad0     41 8D C2 FA | 	rdbyte	_var07, _var02
29ad4     01 82 86 F1 | 	sub	_var02, #1
29ad8     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29adc     2E 86 0E F2 | 	cmp	_var04, #46 wz
29ae0     84 00 90 5D |  if_ne	jmp	#LR__4181
29ae4     02 82 06 F1 | 	add	_var02, #2
29ae8     41 8D C2 FA | 	rdbyte	_var07, _var02
29aec     02 82 86 F1 | 	sub	_var02, #2
29af0     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29af4     2F 86 0E F2 | 	cmp	_var04, #47 wz
29af8     18 00 90 AD |  if_e	jmp	#LR__4173
29afc     02 82 06 F1 | 	add	_var02, #2
29b00     41 89 C2 FA | 	rdbyte	_var05, _var02
29b04     02 82 86 F1 | 	sub	_var02, #2
29b08     44 8B 02 F6 | 	mov	_var06, _var05
29b0c     07 8A 4E F7 | 	zerox	_var06, #7 wz
29b10     54 00 90 5D |  if_ne	jmp	#LR__4180
29b14                 | LR__4173
29b14     02 82 06 F1 | 	add	_var02, #2
29b18     49 85 5A F2 | 	cmps	_var03, arg01 wcz
29b1c     40 00 90 ED |  if_be	jmp	#LR__4179
29b20     42 8F 02 F6 | 	mov	_var08, _var03
29b24     01 8E 86 F1 | 	sub	_var08, #1
29b28                 | LR__4174
29b28     47 87 C2 FA | 	rdbyte	_var04, _var08
29b2c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b30     0C 00 90 5D |  if_ne	jmp	#LR__4175
29b34     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29b38     01 8E 86 11 |  if_a	sub	_var08, #1
29b3c     E8 FF 9F 1D |  if_a	jmp	#LR__4174
29b40                 | LR__4175
29b40     D7 0C 48 FB | 	callpa	#(@LR__4177-@LR__4176)>>2,fcache_load_ptr_
29b44                 | LR__4176
29b44     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29b48     10 00 90 ED |  if_be	jmp	#LR__4178
29b4c     47 87 C2 FA | 	rdbyte	_var04, _var08
29b50     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b54     01 8E 86 51 |  if_ne	sub	_var08, #1
29b58     E8 FF 9F 5D |  if_ne	jmp	#LR__4176
29b5c                 | LR__4177
29b5c                 | LR__4178
29b5c     47 85 02 F6 | 	mov	_var03, _var08
29b60                 | LR__4179
29b60     01 80 06 F6 | 	mov	_var01, #1
29b64     44 00 90 FD | 	jmp	#LR__4186
29b68                 | LR__4180
29b68                 | LR__4181
29b68                 | LR__4182
29b68     D7 18 48 FB | 	callpa	#(@LR__4184-@LR__4183)>>2,fcache_load_ptr_
29b6c                 | LR__4183
29b6c     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29b70     43 8D 02 56 |  if_ne	mov	_var07, _var04
29b74     2F 8C 0E 52 |  if_ne	cmp	_var07, #47 wz
29b78     20 00 90 AD |  if_e	jmp	#LR__4185
29b7c     41 8B 02 F6 | 	mov	_var06, _var02
29b80     41 89 02 F6 | 	mov	_var05, _var02
29b84     01 88 06 F1 | 	add	_var05, #1
29b88     45 91 C2 FA | 	rdbyte	_var09, _var06
29b8c     44 83 02 F6 | 	mov	_var02, _var05
29b90     42 91 42 FC | 	wrbyte	_var09, _var03
29b94     01 84 06 F1 | 	add	_var03, #1
29b98     D0 FF 9F FD | 	jmp	#LR__4183
29b9c                 | LR__4184
29b9c                 | LR__4185
29b9c     41 87 C2 FA | 	rdbyte	_var04, _var02
29ba0     2F 86 0E F2 | 	cmp	_var04, #47 wz
29ba4     C0 FE 9F 5D |  if_ne	jmp	#LR__4170
29ba8     01 80 06 F6 | 	mov	_var01, #1
29bac                 | LR__4186
29bac     D7 0C 48 FB | 	callpa	#(@LR__4188-@LR__4187)>>2,fcache_load_ptr_
29bb0                 | LR__4187
29bb0     41 87 C2 FA | 	rdbyte	_var04, _var02
29bb4     2F 86 0E F2 | 	cmp	_var04, #47 wz
29bb8     41 8D 02 A6 |  if_e	mov	_var07, _var02
29bbc     01 8C 06 A1 |  if_e	add	_var07, #1
29bc0     46 83 02 A6 |  if_e	mov	_var02, _var07
29bc4     E8 FF 9F AD |  if_e	jmp	#LR__4187
29bc8                 | LR__4188
29bc8     9C FE 9F FD | 	jmp	#LR__4170
29bcc                 | LR__4189
29bcc     42 01 48 FC | 	wrbyte	#0, _var03
29bd0                 | __system___normalizeName_ret
29bd0     2D 00 64 FD | 	ret
29bd4                 | 
29bd4                 | __system___strrev
29bd4     49 81 CA FA | 	rdbyte	_var01, arg01 wz
29bd8     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
29bdc     49 83 02 F6 | 	mov	_var02, arg01
29be0     D7 06 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
29be4                 | LR__4190
29be4     41 81 CA FA | 	rdbyte	_var01, _var02 wz
29be8     01 82 06 51 |  if_ne	add	_var02, #1
29bec     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
29bf0                 | LR__4191
29bf0     01 82 86 F1 | 	sub	_var02, #1
29bf4     D7 12 48 FB | 	callpa	#(@LR__4193-@LR__4192)>>2,fcache_load_ptr_
29bf8                 | LR__4192
29bf8     49 83 5A F2 | 	cmps	_var02, arg01 wcz
29bfc     1C 00 90 ED |  if_be	jmp	#LR__4194
29c00     49 81 C2 FA | 	rdbyte	_var01, arg01
29c04     41 85 C2 FA | 	rdbyte	_var03, _var02
29c08     49 85 42 FC | 	wrbyte	_var03, arg01
29c0c     41 81 42 FC | 	wrbyte	_var01, _var02
29c10     01 92 06 F1 | 	add	arg01, #1
29c14     01 82 86 F1 | 	sub	_var02, #1
29c18     DC FF 9F FD | 	jmp	#LR__4192
29c1c                 | LR__4193
29c1c                 | LR__4194
29c1c                 | __system___strrev_ret
29c1c     2D 00 64 FD | 	ret
29c20                 | 
29c20                 | __system___fmtpad
29c20     06 CA 05 F6 | 	mov	COUNT_, #6
29c24     E8 00 A0 FD | 	call	#pushregs_
29c28     49 A7 02 F6 | 	mov	local01, arg01
29c2c     4A A9 02 F6 | 	mov	local02, arg02
29c30     4B AB 02 F6 | 	mov	local03, arg03
29c34     54 93 EA F8 | 	getbyte	arg01, local02, #1
29c38     16 A8 46 F0 | 	shr	local02, #22
29c3c     03 A8 0E F5 | 	and	local02, #3 wz
29c40     00 AC 06 F6 | 	mov	local04, #0
29c44     01 A8 06 A6 |  if_e	mov	local02, #1
29c48     4C A9 CA F7 | 	test	local02, arg04 wz
29c4c     00 7A 06 A6 |  if_e	mov	result1, #0
29c50     88 00 90 AD |  if_e	jmp	#LR__4203
29c54     49 AB C2 F2 | 	subr	local03, arg01
29c58     01 AA 56 F2 | 	cmps	local03, #1 wc
29c5c     00 7A 06 C6 |  if_b	mov	result1, #0
29c60     78 00 90 CD |  if_b	jmp	#LR__4203
29c64     03 A8 0E F2 | 	cmp	local02, #3 wz
29c68     18 00 90 5D |  if_ne	jmp	#LR__4200
29c6c     01 98 0E F2 | 	cmp	arg04, #1 wz
29c70     6E A8 62 FD | 	wrz	local02
29c74     54 AB 02 F1 | 	add	local03, local02
29c78     55 AB 52 F6 | 	abs	local03, local03 wc
29c7c     01 AA 46 F0 | 	shr	local03, #1
29c80     55 AB 82 F6 | 	negc	local03, local03
29c84                 | LR__4200
29c84     01 AA 56 F2 | 	cmps	local03, #1 wc
29c88     4C 00 90 CD |  if_b	jmp	#LR__4202
29c8c     55 AF 02 F6 | 	mov	local05, local03
29c90                 | LR__4201
29c90     53 A9 02 F6 | 	mov	local02, local01
29c94     53 B1 02 F6 | 	mov	local06, local01
29c98     13 A8 46 F7 | 	zerox	local02, #19
29c9c     14 B0 46 F0 | 	shr	local06, #20
29ca0     02 B0 66 F0 | 	shl	local06, #2
29ca4     2D B1 02 F1 | 	add	local06, __methods__
29ca8     58 B1 02 FB | 	rdlong	local06, local06
29cac     20 92 06 F6 | 	mov	arg01, #32
29cb0     32 AB 02 F6 | 	mov	local03, objptr
29cb4     54 65 02 F6 | 	mov	objptr, local02
29cb8     2D B0 62 FD | 	call	local06
29cbc     55 65 02 F6 | 	mov	objptr, local03
29cc0     3D B1 02 F6 | 	mov	local06, result1
29cc4     00 B0 56 F2 | 	cmps	local06, #0 wc
29cc8     58 7B 02 C6 |  if_b	mov	result1, local06
29ccc     0C 00 90 CD |  if_b	jmp	#LR__4203
29cd0     58 AD 02 F1 | 	add	local04, local06
29cd4     EE AF 6E FB | 	djnz	local05, #LR__4201
29cd8                 | LR__4202
29cd8     56 7B 02 F6 | 	mov	result1, local04
29cdc                 | LR__4203
29cdc     E7 F0 03 F6 | 	mov	ptra, fp
29ce0     F2 00 A0 FD | 	call	#popregs_
29ce4                 | __system___fmtpad_ret
29ce4     2D 00 64 FD | 	ret
29ce8                 | 
29ce8                 | __system___uitoa
29ce8     04 CA 05 F6 | 	mov	COUNT_, #4
29cec     E8 00 A0 FD | 	call	#pushregs_
29cf0     49 A7 02 F6 | 	mov	local01, arg01
29cf4     00 9A 4E F2 | 	cmps	arg05, #0 wz
29cf8     53 9B 02 F6 | 	mov	arg05, local01
29cfc     00 A8 06 F6 | 	mov	local02, #0
29d00     37 AA 06 56 |  if_ne	mov	local03, #55
29d04     57 AA 06 A6 |  if_e	mov	local03, #87
29d08                 | LR__4210
29d08     4B 95 12 FD | 	qdiv	arg02, arg03
29d0c     19 AC 62 FD | 	getqy	local04
29d10     4B 95 12 FD | 	qdiv	arg02, arg03
29d14     0A AC 16 F2 | 	cmp	local04, #10 wc
29d18     30 AC 06 C1 |  if_b	add	local04, #48
29d1c     55 AD 02 31 |  if_ae	add	local04, local03
29d20     4D AD 42 FC | 	wrbyte	local04, arg05
29d24     01 9A 06 F1 | 	add	arg05, #1
29d28     01 A8 06 F1 | 	add	local02, #1
29d2c     18 94 62 FD | 	getqx	arg02
29d30     00 94 0E F2 | 	cmp	arg02, #0 wz
29d34     D0 FF 9F 5D |  if_ne	jmp	#LR__4210
29d38     4C A9 12 F2 | 	cmp	local02, arg04 wc
29d3c     C8 FF 9F CD |  if_b	jmp	#LR__4210
29d40     4D 01 48 FC | 	wrbyte	#0, arg05
29d44     53 93 02 F6 | 	mov	arg01, local01
29d48     88 FE BF FD | 	call	#__system___strrev
29d4c     54 7B 02 F6 | 	mov	result1, local02
29d50     E7 F0 03 F6 | 	mov	ptra, fp
29d54     F2 00 A0 FD | 	call	#popregs_
29d58                 | __system___uitoa_ret
29d58     2D 00 64 FD | 	ret
29d5c                 | 
29d5c                 | __system__disassemble_0582
29d5c     10 CA 05 F6 | 	mov	COUNT_, #16
29d60     E8 00 A0 FD | 	call	#pushregs_
29d64     49 A7 02 F6 | 	mov	local01, arg01
29d68     4A A9 02 F6 | 	mov	local02, arg02
29d6c     4B AB 02 F6 | 	mov	local03, arg03
29d70     4C AD 02 F6 | 	mov	local04, arg04
29d74     4D AF 02 F6 | 	mov	local05, arg05
29d78     57 93 52 F6 | 	abs	arg01, local05 wc
29d7c     1F B0 C6 C9 |  if_b	decod	local06, #31
29d80     00 B0 06 36 |  if_ae	mov	local06, #0
29d84     40 CF BF FD | 	call	#__system___float_fromuns
29d88     58 7B 62 F5 | 	xor	result1, local06
29d8c     3D B3 02 F6 | 	mov	local07, result1
29d90     00 B4 06 F6 | 	mov	local08, #0
29d94     53 93 02 F6 | 	mov	arg01, local01
29d98     00 94 06 F6 | 	mov	arg02, #0
29d9c     01 96 06 F6 | 	mov	arg03, #1
29da0     5C D7 BF FD | 	call	#__system___float_cmp
29da4     00 7A 0E F2 | 	cmp	result1, #0 wz
29da8     00 B6 06 A6 |  if_e	mov	local09, #0
29dac     54 01 68 AC |  if_e	wrlong	#0, local02
29db0     55 B7 62 AC |  if_e	wrlong	local09, local03
29db4     8C 01 90 AD |  if_e	jmp	#LR__4232
29db8     53 93 02 F6 | 	mov	arg01, local01
29dbc     40 DC BF FD | 	call	#__system____builtin_ilogb
29dc0     3D B9 02 F6 | 	mov	local10, result1
29dc4     0A AE 0E F2 | 	cmp	local05, #10 wz
29dc8     24 00 90 5D |  if_ne	jmp	#LR__4220
29dcc     5C B7 02 F6 | 	mov	local09, local10
29dd0     01 B6 66 F0 | 	shl	local09, #1
29dd4     5C B7 02 F1 | 	add	local09, local10
29dd8     5B B9 52 F6 | 	abs	local10, local09 wc
29ddc     0A B8 16 FD | 	qdiv	local10, #10
29de0     09 BA 06 F6 | 	mov	local11, #9
29de4     18 B8 62 FD | 	getqx	local10
29de8     5C B9 82 F6 | 	negc	local10, local10
29dec     04 00 90 FD | 	jmp	#LR__4221
29df0                 | LR__4220
29df0     18 BA 06 F6 | 	mov	local11, #24
29df4                 | LR__4221
29df4                 | LR__4222
29df4     08 B4 56 F2 | 	cmps	local08, #8 wc
29df8     01 B4 06 F1 | 	add	local08, #1
29dfc     60 00 90 3D |  if_ae	jmp	#LR__4223
29e00     00 C0 1F FF 
29e04     00 92 06 F6 | 	mov	arg01, ##1065353216
29e08     59 95 02 F6 | 	mov	arg02, local07
29e0c     5C 97 02 F6 | 	mov	arg03, local10
29e10     D0 E2 BF FD | 	call	#__system___float_pow_n
29e14     3D 95 02 F6 | 	mov	arg02, result1
29e18     53 93 02 F6 | 	mov	arg01, local01
29e1c     B0 D4 BF FD | 	call	#__system___float_div
29e20     3D BD 02 F6 | 	mov	local12, result1
29e24     5E 93 02 F6 | 	mov	arg01, local12
29e28     00 C0 1F FF 
29e2c     00 94 06 F6 | 	mov	arg02, ##1065353216
29e30     01 96 06 F6 | 	mov	arg03, #1
29e34     C8 D6 BF FD | 	call	#__system___float_cmp
29e38     00 7A 56 F2 | 	cmps	result1, #0 wc
29e3c     01 B8 86 C1 |  if_b	sub	local10, #1
29e40     B0 FF 9F CD |  if_b	jmp	#LR__4222
29e44     59 95 02 F6 | 	mov	arg02, local07
29e48     5E 93 02 F6 | 	mov	arg01, local12
29e4c     01 96 66 F6 | 	neg	arg03, #1
29e50     AC D6 BF FD | 	call	#__system___float_cmp
29e54     00 7A 56 F2 | 	cmps	result1, #0 wc
29e58     01 B8 06 31 |  if_ae	add	local10, #1
29e5c     94 FF 9F 3D |  if_ae	jmp	#LR__4222
29e60                 | LR__4223
29e60     5E 93 02 F6 | 	mov	arg01, local12
29e64     98 DB BF FD | 	call	#__system____builtin_ilogb
29e68     3D BF 02 F6 | 	mov	local13, result1
29e6c     5E C1 02 F6 | 	mov	local14, local12
29e70     17 C1 06 F4 | 	bitl	local14, #279
29e74     17 C0 26 F4 | 	bith	local14, #23
29e78     5F C1 62 F0 | 	shl	local14, local13
29e7c     02 AE 0E F2 | 	cmp	local05, #2 wz
29e80     02 AC 66 A0 |  if_e	shl	local04, #2
29e84     00 C2 06 F6 | 	mov	local15, #0
29e88     00 AC 56 F2 | 	cmps	local04, #0 wc
29e8c     10 00 90 3D |  if_ae	jmp	#LR__4224
29e90     5C AD C2 F2 | 	subr	local04, local10
29e94     00 AC 56 F2 | 	cmps	local04, #0 wc
29e98     A0 00 90 CD |  if_b	jmp	#LR__4231
29e9c     04 00 90 FD | 	jmp	#LR__4225
29ea0                 | LR__4224
29ea0     01 AC 06 F1 | 	add	local04, #1
29ea4                 | LR__4225
29ea4     5D AD 7A F3 | 	fles	local04, local11 wcz
29ea8     01 C4 06 F6 | 	mov	local16, #1
29eac     D7 22 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
29eb0                 | LR__4226
29eb0     00 40 00 FF 
29eb4     00 C2 16 F2 | 	cmp	local15, ##8388608 wc
29eb8     38 00 90 3D |  if_ae	jmp	#LR__4228
29ebc     01 AC 56 F2 | 	cmps	local04, #1 wc
29ec0     01 AC 86 F1 | 	sub	local04, #1
29ec4     2C 00 90 CD |  if_b	jmp	#LR__4228
29ec8     57 C3 02 FD | 	qmul	local15, local05
29ecc     60 BF 02 F6 | 	mov	local13, local14
29ed0     17 BE 46 F0 | 	shr	local13, #23
29ed4     17 C1 06 F4 | 	bitl	local14, #279
29ed8     18 C2 62 FD | 	getqx	local15
29edc     57 C5 02 FD | 	qmul	local16, local05
29ee0     18 C4 62 FD | 	getqx	local16
29ee4     57 C1 02 FD | 	qmul	local14, local05
29ee8     5F C3 02 F1 | 	add	local15, local13
29eec     18 C0 62 FD | 	getqx	local14
29ef0     BC FF 9F FD | 	jmp	#LR__4226
29ef4                 | LR__4227
29ef4                 | LR__4228
29ef4     57 B7 02 F6 | 	mov	local09, local05
29ef8     17 B6 66 F0 | 	shl	local09, #23
29efc     5B BF 52 F6 | 	abs	local13, local09 wc
29f00     01 BE 46 F0 | 	shr	local13, #1
29f04     5F BF 82 F6 | 	negc	local13, local13
29f08     5F C1 1A F2 | 	cmp	local14, local13 wcz
29f0c     20 00 90 1D |  if_a	jmp	#LR__4229
29f10     17 AE 66 F0 | 	shl	local05, #23
29f14     57 BF 52 F6 | 	abs	local13, local05 wc
29f18     01 BE 46 F0 | 	shr	local13, #1
29f1c     5F BF 82 F6 | 	negc	local13, local13
29f20     5F C1 0A F2 | 	cmp	local14, local13 wz
29f24     14 00 90 5D |  if_ne	jmp	#LR__4230
29f28     01 C2 CE F7 | 	test	local15, #1 wz
29f2c     0C 00 90 AD |  if_e	jmp	#LR__4230
29f30                 | LR__4229
29f30     01 C2 06 F1 | 	add	local15, #1
29f34     62 C3 0A F2 | 	cmp	local15, local16 wz
29f38     01 B8 06 A1 |  if_e	add	local10, #1
29f3c                 | LR__4230
29f3c                 | LR__4231
29f3c     54 C3 62 FC | 	wrlong	local15, local02
29f40     55 B9 62 FC | 	wrlong	local10, local03
29f44                 | LR__4232
29f44     E7 F0 03 F6 | 	mov	ptra, fp
29f48     F2 00 A0 FD | 	call	#popregs_
29f4c                 | __system__disassemble_0582_ret
29f4c     2D 00 64 FD | 	ret
29f50                 | 
29f50                 | __system__emitsign_0584
29f50     00 7A 06 F6 | 	mov	result1, #0
29f54     00 94 0E F2 | 	cmp	arg02, #0 wz
29f58     49 81 02 56 |  if_ne	mov	_var01, arg01
29f5c     01 92 06 51 |  if_ne	add	arg01, #1
29f60     40 95 42 5C |  if_ne	wrbyte	arg02, _var01
29f64     01 7A 06 56 |  if_ne	mov	result1, #1
29f68     00 96 0E F2 | 	cmp	arg03, #0 wz
29f6c     49 61 48 5C |  if_ne	wrbyte	#48, arg01
29f70     01 92 06 51 |  if_ne	add	arg01, #1
29f74     49 97 42 5C |  if_ne	wrbyte	arg03, arg01
29f78     02 7A 06 51 |  if_ne	add	result1, #2
29f7c                 | __system__emitsign_0584_ret
29f7c     2D 00 64 FD | 	ret
29f80                 | 
29f80                 | __system___getiolock_0622
29f80     01 CA 05 F6 | 	mov	COUNT_, #1
29f84     E8 00 A0 FD | 	call	#pushregs_
29f88     90 F8 BF FD | 	call	#__system____getftab
29f8c     3D A7 0A F6 | 	mov	local01, result1 wz
29f90     10 00 90 AD |  if_e	jmp	#LR__4240
29f94     08 A6 06 F1 | 	add	local01, #8
29f98     53 7B 0A FB | 	rdlong	result1, local01 wz
29f9c     08 A6 86 F1 | 	sub	local01, #8
29fa0     10 00 90 5D |  if_ne	jmp	#LR__4241
29fa4                 | LR__4240
29fa4     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29fa8     01 00 00 FF 
29fac     DC 7A 06 F1 | 	add	result1, ##732
29fb0     08 00 90 FD | 	jmp	#LR__4242
29fb4                 | LR__4241
29fb4     0C A6 06 F1 | 	add	local01, #12
29fb8     53 7B 02 F6 | 	mov	result1, local01
29fbc                 | LR__4242
29fbc     E7 F0 03 F6 | 	mov	ptra, fp
29fc0     F2 00 A0 FD | 	call	#popregs_
29fc4                 | __system___getiolock_0622_ret
29fc4     2D 00 64 FD | 	ret
29fc8                 | 
29fc8                 | __system___gettxfunc
29fc8     01 CA 05 F6 | 	mov	COUNT_, #1
29fcc     E8 00 A0 FD | 	call	#pushregs_
29fd0     48 F8 BF FD | 	call	#__system____getftab
29fd4     3D A7 0A F6 | 	mov	local01, result1 wz
29fd8     10 00 90 AD |  if_e	jmp	#LR__4250
29fdc     08 A6 06 F1 | 	add	local01, #8
29fe0     53 95 0A FB | 	rdlong	arg02, local01 wz
29fe4     08 A6 86 F1 | 	sub	local01, #8
29fe8     08 00 90 5D |  if_ne	jmp	#LR__4251
29fec                 | LR__4250
29fec     00 7A 06 F6 | 	mov	result1, #0
29ff0     0C 00 90 FD | 	jmp	#LR__4252
29ff4                 | LR__4251
29ff4     00 88 05 FF 
29ff8     00 A6 46 F5 | 	or	local01, ##185597952
29ffc     53 7B 02 F6 | 	mov	result1, local01
2a000                 | LR__4252
2a000     E7 F0 03 F6 | 	mov	ptra, fp
2a004     F2 00 A0 FD | 	call	#popregs_
2a008                 | __system___gettxfunc_ret
2a008     2D 00 64 FD | 	ret
2a00c                 | 
2a00c                 | __system___getrxfunc
2a00c     01 CA 05 F6 | 	mov	COUNT_, #1
2a010     E8 00 A0 FD | 	call	#pushregs_
2a014     04 F8 BF FD | 	call	#__system____getftab
2a018     3D A7 0A F6 | 	mov	local01, result1 wz
2a01c     10 00 90 AD |  if_e	jmp	#LR__4260
2a020     08 A6 06 F1 | 	add	local01, #8
2a024     53 95 0A FB | 	rdlong	arg02, local01 wz
2a028     08 A6 86 F1 | 	sub	local01, #8
2a02c     08 00 90 5D |  if_ne	jmp	#LR__4261
2a030                 | LR__4260
2a030     00 7A 06 F6 | 	mov	result1, #0
2a034     0C 00 90 FD | 	jmp	#LR__4262
2a038                 | LR__4261
2a038     00 90 05 FF 
2a03c     00 A6 46 F5 | 	or	local01, ##186646528
2a040     53 7B 02 F6 | 	mov	result1, local01
2a044                 | LR__4262
2a044     E7 F0 03 F6 | 	mov	ptra, fp
2a048     F2 00 A0 FD | 	call	#popregs_
2a04c                 | __system___getrxfunc_ret
2a04c     2D 00 64 FD | 	ret
2a050                 | 
2a050                 | __system____ScanForChar
2a050     49 81 02 F6 | 	mov	_var01, arg01
2a054     49 83 02 F6 | 	mov	_var02, arg01
2a058     D7 06 48 FB | 	callpa	#(@LR__4271-@LR__4270)>>2,fcache_load_ptr_
2a05c                 | LR__4270
2a05c     41 7B CA FA | 	rdbyte	result1, _var02 wz
2a060     01 82 06 51 |  if_ne	add	_var02, #1
2a064     F4 FF 9F 5D |  if_ne	jmp	#LR__4270
2a068                 | LR__4271
2a068     49 83 82 F1 | 	sub	_var02, arg01
2a06c     41 7B 02 F6 | 	mov	result1, _var02
2a070     3D 93 0A F6 | 	mov	arg01, result1 wz
2a074     00 7A 06 A6 |  if_e	mov	result1, #0
2a078     B8 00 90 AD |  if_e	jmp	#LR__4278
2a07c     4A 85 02 F6 | 	mov	_var03, arg02
2a080     07 84 4E F7 | 	zerox	_var03, #7 wz
2a084     00 7A 06 A6 |  if_e	mov	result1, #0
2a088     A8 00 90 AD |  if_e	jmp	#LR__4278
2a08c     01 96 16 F2 | 	cmp	arg03, #1 wc
2a090     00 98 0E C2 |  if_b	cmp	arg04, #0 wz
2a094     01 96 06 86 |  if_c_and_z	mov	arg03, #1
2a098     00 7A 06 46 |  if_c_and_nz	mov	result1, #0
2a09c     94 00 90 4D |  if_c_and_nz	jmp	#LR__4278
2a0a0     49 97 1A F2 | 	cmp	arg03, arg01 wcz
2a0a4     10 00 90 ED |  if_be	jmp	#LR__4272
2a0a8     00 98 0E F2 | 	cmp	arg04, #0 wz
2a0ac     00 7A 06 A6 |  if_e	mov	result1, #0
2a0b0     80 00 90 AD |  if_e	jmp	#LR__4278
2a0b4     49 97 02 F6 | 	mov	arg03, arg01
2a0b8                 | LR__4272
2a0b8     01 96 86 F1 | 	sub	arg03, #1
2a0bc     00 98 0E F2 | 	cmp	arg04, #0 wz
2a0c0     38 00 90 5D |  if_ne	jmp	#LR__4274
2a0c4     4B 87 02 F6 | 	mov	_var04, arg03
2a0c8     49 89 02 F6 | 	mov	_var05, arg01
2a0cc                 | LR__4273
2a0cc     44 87 12 F2 | 	cmp	_var04, _var05 wc
2a0d0     5C 00 90 3D |  if_ae	jmp	#LR__4277
2a0d4     43 85 02 F6 | 	mov	_var03, _var04
2a0d8     40 85 02 F1 | 	add	_var03, _var01
2a0dc     42 85 C2 FA | 	rdbyte	_var03, _var03
2a0e0     4A 99 E2 F8 | 	getbyte	arg04, arg02, #0
2a0e4     4C 85 0A F2 | 	cmp	_var03, arg04 wz
2a0e8     01 86 06 A1 |  if_e	add	_var04, #1
2a0ec     43 7B 02 A6 |  if_e	mov	result1, _var04
2a0f0     40 00 90 AD |  if_e	jmp	#LR__4278
2a0f4     01 86 06 F1 | 	add	_var04, #1
2a0f8     D0 FF 9F FD | 	jmp	#LR__4273
2a0fc                 | LR__4274
2a0fc     4B 87 02 F6 | 	mov	_var04, arg03
2a100                 | LR__4275
2a100     4B 87 1A F2 | 	cmp	_var04, arg03 wcz
2a104     28 00 90 1D |  if_a	jmp	#LR__4276
2a108     43 89 02 F6 | 	mov	_var05, _var04
2a10c     40 89 02 F1 | 	add	_var05, _var01
2a110     44 85 C2 FA | 	rdbyte	_var03, _var05
2a114     4A 89 E2 F8 | 	getbyte	_var05, arg02, #0
2a118     44 85 0A F2 | 	cmp	_var03, _var05 wz
2a11c     01 86 06 A1 |  if_e	add	_var04, #1
2a120     43 7B 02 A6 |  if_e	mov	result1, _var04
2a124     0C 00 90 AD |  if_e	jmp	#LR__4278
2a128     01 86 86 F1 | 	sub	_var04, #1
2a12c     D0 FF 9F FD | 	jmp	#LR__4275
2a130                 | LR__4276
2a130                 | LR__4277
2a130     00 7A 06 F6 | 	mov	result1, #0
2a134                 | LR__4278
2a134                 | __system____ScanForChar_ret
2a134     2D 00 64 FD | 	ret
2a138                 | 
2a138                 | __system___basic_dir
2a138     06 CA 05 F6 | 	mov	COUNT_, #6
2a13c     E8 00 A0 FD | 	call	#pushregs_
2a140     50 F0 07 F1 | 	add	ptra, #80
2a144     49 A7 0A F6 | 	mov	local01, arg01 wz
2a148     4A A9 02 F6 | 	mov	local02, arg02
2a14c     53 AB CA 5A |  if_ne	rdbyte	local03, local01 wz
2a150     5C 00 90 AD |  if_e	jmp	#LR__4280
2a154     03 00 00 FF 
2a158     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a15c     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a160     03 00 00 FF 
2a164     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a168     03 00 00 5F 
2a16c     34 69 06 51 |  if_ne	add	ptr___system__dat__, ##1844
2a170     34 93 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2a174     03 00 00 5F 
2a178     34 69 86 51 |  if_ne	sub	ptr___system__dat__, ##1844
2a17c     AC E9 BF 5D |  if_ne	call	#__system__closedir
2a180     92 01 00 FF 
2a184     40 93 06 F6 | 	mov	arg01, ##@LR__5478
2a188     B8 E8 BF FD | 	call	#__system__opendir
2a18c     03 00 00 FF 
2a190     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a194     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2a198     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a19c     34 A9 62 FC | 	wrlong	local02, ptr___system__dat__
2a1a0     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a1a4     34 A7 62 FC | 	wrlong	local01, ptr___system__dat__
2a1a8     03 00 00 FF 
2a1ac     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a1b0                 | LR__4280
2a1b0     03 00 00 FF 
2a1b4     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1b8     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a1bc     03 00 00 FF 
2a1c0     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1c4     92 01 00 AF 
2a1c8     42 7B 06 A6 |  if_e	mov	result1, ##@LR__5479
2a1cc     7C 01 90 AD |  if_e	jmp	#LR__4288
2a1d0                 | LR__4281
2a1d0     03 00 00 FF 
2a1d4     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1d8     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a1dc     03 00 00 FF 
2a1e0     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1e4     B8 E9 BF FD | 	call	#__system__readdir
2a1e8     3D AD 0A F6 | 	mov	local04, result1 wz
2a1ec     38 00 90 5D |  if_ne	jmp	#LR__4282
2a1f0     03 00 00 FF 
2a1f4     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1f8     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a1fc     03 00 00 FF 
2a200     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a204     24 E9 BF FD | 	call	#__system__closedir
2a208     03 00 00 FF 
2a20c     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a210     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
2a214     03 00 00 FF 
2a218     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a21c     92 01 00 FF 
2a220     44 7B 06 F6 | 	mov	result1, ##@LR__5480
2a224     24 01 90 FD | 	jmp	#LR__4288
2a228                 | LR__4282
2a228     03 00 00 FF 
2a22c     3C 69 06 F1 | 	add	ptr___system__dat__, ##1852
2a230     34 95 02 FB | 	rdlong	arg02, ptr___system__dat__
2a234     03 00 00 FF 
2a238     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a23c     56 93 02 F6 | 	mov	arg01, local04
2a240     4C 09 B0 FD | 	call	#__system___pat_match
2a244     00 7A 0E F2 | 	cmp	result1, #0 wz
2a248     84 FF 9F AD |  if_e	jmp	#LR__4281
2a24c     03 00 00 FF 
2a250     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a254     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a258     03 00 00 FF 
2a25c     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a260     B0 00 90 AD |  if_e	jmp	#LR__4285
2a264     E7 94 02 F6 | 	mov	arg02, fp
2a268     10 94 06 F1 | 	add	arg02, #16
2a26c     56 93 02 F6 | 	mov	arg01, local04
2a270     10 F2 BF FD | 	call	#__system__stat
2a274     00 7A 4E F2 | 	cmps	result1, #0 wz
2a278     92 01 00 5F 
2a27c     46 7B 06 56 |  if_ne	mov	result1, ##@LR__5481
2a280     C8 00 90 5D |  if_ne	jmp	#LR__4288
2a284     18 CE 05 F1 | 	add	fp, #24
2a288     E7 AE 02 FB | 	rdlong	local05, fp
2a28c     18 CE 85 F1 | 	sub	fp, #24
2a290     78 00 00 FF 
2a294     00 AE 06 F5 | 	and	local05, ##61440
2a298     56 AB C2 FA | 	rdbyte	local03, local04
2a29c     2E AA 0E F2 | 	cmp	local03, #46 wz
2a2a0     02 A8 06 A6 |  if_e	mov	local02, #2
2a2a4     00 A8 06 56 |  if_ne	mov	local02, #0
2a2a8     08 00 00 FF 
2a2ac     00 AE 0E F2 | 	cmp	local05, ##4096 wz
2a2b0     10 A8 46 A5 |  if_e	or	local02, #16
2a2b4     40 00 90 AD |  if_e	jmp	#LR__4284
2a2b8     10 00 00 FF 
2a2bc     00 AE 0E F2 | 	cmp	local05, ##8192 wz
2a2c0     18 00 00 5F 
2a2c4     00 AE 0E 52 |  if_ne	cmp	local05, ##12288 wz
2a2c8     20 00 00 5F 
2a2cc     00 AE 0E 52 |  if_ne	cmp	local05, ##16384 wz
2a2d0     04 A8 46 A5 |  if_e	or	local02, #4
2a2d4     20 00 90 AD |  if_e	jmp	#LR__4283
2a2d8     18 CE 05 F1 | 	add	fp, #24
2a2dc     E7 AA 02 FB | 	rdlong	local03, fp
2a2e0     18 CE 85 F1 | 	sub	fp, #24
2a2e4     92 AA CE F7 | 	test	local03, #146 wz
2a2e8     01 A8 46 A5 |  if_e	or	local02, #1
2a2ec     08 00 00 5F 
2a2f0     00 AE 0E 52 |  if_ne	cmp	local05, ##4096 wz
2a2f4     20 A8 46 55 |  if_ne	or	local02, #32
2a2f8                 | LR__4283
2a2f8                 | LR__4284
2a2f8     03 00 00 FF 
2a2fc     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a300     34 AF 02 FB | 	rdlong	local05, ptr___system__dat__
2a304     03 00 00 FF 
2a308     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a30c     57 A9 CA F7 | 	test	local02, local05 wz
2a310     BC FE 9F AD |  if_e	jmp	#LR__4281
2a314                 | LR__4285
2a314     56 93 02 F6 | 	mov	arg01, local04
2a318     49 B1 02 F6 | 	mov	local06, arg01
2a31c     D7 06 48 FB | 	callpa	#(@LR__4287-@LR__4286)>>2,fcache_load_ptr_
2a320                 | LR__4286
2a320     58 7B CA FA | 	rdbyte	result1, local06 wz
2a324     01 B0 06 51 |  if_ne	add	local06, #1
2a328     F4 FF 9F 5D |  if_ne	jmp	#LR__4286
2a32c                 | LR__4287
2a32c     58 93 C2 F2 | 	subr	arg01, local06
2a330     01 92 06 F1 | 	add	arg01, #1
2a334     CC E0 BF FD | 	call	#__system___gc_alloc_managed
2a338     3D AF 0A F6 | 	mov	local05, result1 wz
2a33c     57 93 02 56 |  if_ne	mov	arg01, local05
2a340     56 95 02 56 |  if_ne	mov	arg02, local04
2a344     68 A6 BF 5D |  if_ne	call	#__system____builtin_strcpy
2a348     57 7B 02 F6 | 	mov	result1, local05
2a34c                 | LR__4288
2a34c     E7 F0 03 F6 | 	mov	ptra, fp
2a350     F2 00 A0 FD | 	call	#popregs_
2a354                 | __system___basic_dir_ret
2a354     2D 00 64 FD | 	ret
2a358                 | 
2a358                 | __system__pack_0698
2a358     49 81 02 F6 | 	mov	_var01, arg01
2a35c     7F 96 06 F1 | 	add	arg03, #127
2a360     04 98 CE F7 | 	test	arg04, #4 wz
2a364     10 00 90 AD |  if_e	jmp	#LR__4290
2a368     00 80 0E F2 | 	cmp	_var01, #0 wz
2a36c     16 80 C6 A9 |  if_e	decod	_var01, #22
2a370     F7 80 26 F4 | 	bith	_var01, #247
2a374     B4 00 90 FD | 	jmp	#LR__4299
2a378                 | LR__4290
2a378     02 98 CE F7 | 	test	arg04, #2 wz
2a37c     00 C0 3F 5F 
2a380     00 80 06 56 |  if_ne	mov	_var01, ##2139095040
2a384     00 94 06 56 |  if_ne	mov	arg02, #0
2a388     A0 00 90 5D |  if_ne	jmp	#LR__4298
2a38c     08 98 CE F7 | 	test	arg04, #8 wz
2a390     00 80 06 56 |  if_ne	mov	_var01, #0
2a394     94 00 90 5D |  if_ne	jmp	#LR__4297
2a398     FF 96 56 F2 | 	cmps	arg03, #255 wc
2a39c     00 C0 3F 3F 
2a3a0     00 80 06 36 |  if_ae	mov	_var01, ##2139095040
2a3a4     00 94 06 36 |  if_ae	mov	arg02, #0
2a3a8     80 00 90 3D |  if_ae	jmp	#LR__4296
2a3ac     01 96 56 F2 | 	cmps	arg03, #1 wc
2a3b0     6C 00 90 3D |  if_ae	jmp	#LR__4294
2a3b4     01 94 46 F0 | 	shr	arg02, #1
2a3b8     40 83 02 F6 | 	mov	_var02, _var01
2a3bc     01 82 06 F5 | 	and	_var02, #1
2a3c0     1F 82 66 F0 | 	shl	_var02, #31
2a3c4     41 95 42 F5 | 	or	arg02, _var02
2a3c8     01 80 46 F0 | 	shr	_var01, #1
2a3cc     D7 1E 48 FB | 	callpa	#(@LR__4292-@LR__4291)>>2,fcache_load_ptr_
2a3d0                 | LR__4291
2a3d0     00 96 56 F2 | 	cmps	arg03, #0 wc
2a3d4     34 00 90 3D |  if_ae	jmp	#LR__4293
2a3d8     00 80 0E F2 | 	cmp	_var01, #0 wz
2a3dc     2C 00 90 AD |  if_e	jmp	#LR__4293
2a3e0     4A 93 02 F6 | 	mov	arg01, arg02
2a3e4     01 92 06 F5 | 	and	arg01, #1
2a3e8     01 96 06 F1 | 	add	arg03, #1
2a3ec     01 94 46 F0 | 	shr	arg02, #1
2a3f0     40 83 02 F6 | 	mov	_var02, _var01
2a3f4     01 82 06 F5 | 	and	_var02, #1
2a3f8     1F 82 66 F0 | 	shl	_var02, #31
2a3fc     41 95 42 F5 | 	or	arg02, _var02
2a400     49 95 42 F5 | 	or	arg02, arg01
2a404     01 80 46 F0 | 	shr	_var01, #1
2a408     C4 FF 9F FD | 	jmp	#LR__4291
2a40c                 | LR__4292
2a40c                 | LR__4293
2a40c     00 96 56 F2 | 	cmps	arg03, #0 wc
2a410     18 00 90 3D |  if_ae	jmp	#LR__4295
2a414     00 94 0E F2 | 	cmp	arg02, #0 wz
2a418     6F 94 62 FD | 	wrnz	arg02
2a41c     0C 00 90 FD | 	jmp	#LR__4295
2a420                 | LR__4294
2a420     17 81 06 F4 | 	bitl	_var01, #279
2a424     17 96 66 F0 | 	shl	arg03, #23
2a428     4B 81 42 F5 | 	or	_var01, arg03
2a42c                 | LR__4295
2a42c                 | LR__4296
2a42c                 | LR__4297
2a42c                 | LR__4298
2a42c                 | LR__4299
2a42c     01 80 CE F7 | 	test	_var01, #1 wz
2a430     01 94 46 55 |  if_ne	or	arg02, #1
2a434     4A 97 02 F6 | 	mov	arg03, arg02
2a438     00 82 06 F6 | 	mov	_var02, #0
2a43c     FF FF 3F FF 
2a440     FF 95 06 F1 | 	add	arg02, ##2147483647
2a444     4B 95 12 F2 | 	cmp	arg02, arg03 wc
2a448     01 82 06 C6 |  if_b	mov	_var02, #1
2a44c     41 81 02 F1 | 	add	_var01, _var02
2a450     01 98 CE F7 | 	test	arg04, #1 wz
2a454     1F 80 26 54 |  if_ne	bith	_var01, #31
2a458     40 7B 02 F6 | 	mov	result1, _var01
2a45c                 | __system__pack_0698_ret
2a45c     2D 00 64 FD | 	ret
2a460                 | 
2a460                 | __system___rxtxioctl_0788
2a460     00 95 0E F2 | 	cmp	arg02, #256 wz
2a464     0C 00 90 AD |  if_e	jmp	#LR__4300
2a468     01 95 0E F2 | 	cmp	arg02, #257 wz
2a46c     1C 00 90 AD |  if_e	jmp	#LR__4301
2a470     30 00 90 FD | 	jmp	#LR__4302
2a474                 | LR__4300
2a474     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a478     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2a47c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a480     4B 7B 62 FC | 	wrlong	result1, arg03
2a484     00 7A 06 F6 | 	mov	result1, #0
2a488     28 00 90 FD | 	jmp	#LR__4303
2a48c                 | LR__4301
2a48c     4B 93 02 FB | 	rdlong	arg01, arg03
2a490     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a494     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2a498     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a49c     00 7A 06 F6 | 	mov	result1, #0
2a4a0     10 00 90 FD | 	jmp	#LR__4303
2a4a4                 | LR__4302
2a4a4     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a4a8     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
2a4ac     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a4b0     01 7A 66 F6 | 	neg	result1, #1
2a4b4                 | LR__4303
2a4b4                 | __system___rxtxioctl_0788_ret
2a4b4     2D 00 64 FD | 	ret
2a4b8                 | 
2a4b8                 | __system____dummy_flush_0789
2a4b8     00 7A 06 F6 | 	mov	result1, #0
2a4bc                 | __system____dummy_flush_0789_ret
2a4bc     2D 00 64 FD | 	ret
2a4c0                 | 
2a4c0                 | __system___vfswrite
2a4c0     09 CA 05 F6 | 	mov	COUNT_, #9
2a4c4     E8 00 A0 FD | 	call	#pushregs_
2a4c8     49 A7 02 F6 | 	mov	local01, arg01
2a4cc     4A A9 02 F6 | 	mov	local02, arg02
2a4d0     4B AB 02 F6 | 	mov	local03, arg03
2a4d4     54 AD 02 F6 | 	mov	local04, local02
2a4d8     08 A6 06 F1 | 	add	local01, #8
2a4dc     53 93 02 FB | 	rdlong	arg01, local01
2a4e0     08 A6 86 F1 | 	sub	local01, #8
2a4e4     02 92 CE F7 | 	test	arg01, #2 wz
2a4e8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a4ec     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a4f0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a4f4     01 7A 66 A6 |  if_e	neg	result1, #1
2a4f8     84 01 90 AD |  if_e	jmp	#LR__4316
2a4fc     08 A6 06 F1 | 	add	local01, #8
2a500     53 7B 02 FB | 	rdlong	result1, local01
2a504     08 A6 86 F1 | 	sub	local01, #8
2a508     80 7A CE F7 | 	test	result1, #128 wz
2a50c     6C 00 90 AD |  if_e	jmp	#LR__4311
2a510     08 A6 06 F1 | 	add	local01, #8
2a514     53 95 02 FB | 	rdlong	arg02, local01
2a518     08 A6 86 F1 | 	sub	local01, #8
2a51c     00 95 CE F7 | 	test	arg02, #256 wz
2a520     58 00 90 AD |  if_e	jmp	#LR__4310
2a524     30 A6 06 F1 | 	add	local01, #48
2a528     53 AF 02 FB | 	rdlong	local05, local01
2a52c     57 B1 02 F6 | 	mov	local06, local05
2a530     30 A6 86 F1 | 	sub	local01, #48
2a534     13 B0 46 F7 | 	zerox	local06, #19
2a538     14 AE 46 F0 | 	shr	local05, #20
2a53c     02 AE 66 F0 | 	shl	local05, #2
2a540     2D AF 02 F1 | 	add	local05, __methods__
2a544     57 AF 02 FB | 	rdlong	local05, local05
2a548     53 93 02 F6 | 	mov	arg01, local01
2a54c     00 94 06 F6 | 	mov	arg02, #0
2a550     00 96 06 F6 | 	mov	arg03, #0
2a554     02 98 06 F6 | 	mov	arg04, #2
2a558     32 B3 02 F6 | 	mov	local07, objptr
2a55c     58 65 02 F6 | 	mov	objptr, local06
2a560     2D AE 62 FD | 	call	local05
2a564     59 65 02 F6 | 	mov	objptr, local07
2a568     08 A6 06 F1 | 	add	local01, #8
2a56c     53 B3 02 FB | 	rdlong	local07, local01
2a570     00 B3 26 F5 | 	andn	local07, #256
2a574     53 B3 62 FC | 	wrlong	local07, local01
2a578     08 A6 86 F1 | 	sub	local01, #8
2a57c                 | LR__4310
2a57c                 | LR__4311
2a57c     18 A6 06 F1 | 	add	local01, #24
2a580     53 B3 0A FB | 	rdlong	local07, local01 wz
2a584     18 A6 86 F1 | 	sub	local01, #24
2a588     80 00 90 AD |  if_e	jmp	#LR__4313
2a58c     18 A6 06 F1 | 	add	local01, #24
2a590     53 AF 02 FB | 	rdlong	local05, local01
2a594     57 B1 02 F6 | 	mov	local06, local05
2a598     18 A6 86 F1 | 	sub	local01, #24
2a59c     13 B0 46 F7 | 	zerox	local06, #19
2a5a0     14 AE 46 F0 | 	shr	local05, #20
2a5a4     02 AE 66 F0 | 	shl	local05, #2
2a5a8     2D AF 02 F1 | 	add	local05, __methods__
2a5ac     57 AF 02 FB | 	rdlong	local05, local05
2a5b0     54 95 02 F6 | 	mov	arg02, local02
2a5b4     55 97 02 F6 | 	mov	arg03, local03
2a5b8     53 93 02 F6 | 	mov	arg01, local01
2a5bc     32 B3 02 F6 | 	mov	local07, objptr
2a5c0     58 65 02 F6 | 	mov	objptr, local06
2a5c4     2D AE 62 FD | 	call	local05
2a5c8     59 65 02 F6 | 	mov	objptr, local07
2a5cc     3D B5 02 F6 | 	mov	local08, result1
2a5d0     00 B4 56 F2 | 	cmps	local08, #0 wc
2a5d4     2C 00 90 3D |  if_ae	jmp	#LR__4312
2a5d8     08 A6 06 F1 | 	add	local01, #8
2a5dc     53 B3 02 FB | 	rdlong	local07, local01
2a5e0     20 B2 46 F5 | 	or	local07, #32
2a5e4     53 B3 62 FC | 	wrlong	local07, local01
2a5e8     00 B4 4E F2 | 	cmps	local08, #0 wz
2a5ec     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a5f0     34 B5 62 FC | 	wrlong	local08, ptr___system__dat__
2a5f4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a5f8     01 7A 66 56 |  if_ne	neg	result1, #1
2a5fc     00 7A 06 A6 |  if_e	mov	result1, #0
2a600     7C 00 90 FD | 	jmp	#LR__4316
2a604                 | LR__4312
2a604     5A 7B 02 F6 | 	mov	result1, local08
2a608     74 00 90 FD | 	jmp	#LR__4316
2a60c                 | LR__4313
2a60c     1C A6 06 F1 | 	add	local01, #28
2a610     53 B7 0A FB | 	rdlong	local09, local01 wz
2a614     1C A6 86 F1 | 	sub	local01, #28
2a618     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a61c     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a620     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a624     01 7A 66 A6 |  if_e	neg	result1, #1
2a628     54 00 90 AD |  if_e	jmp	#LR__4316
2a62c     00 B4 06 F6 | 	mov	local08, #0
2a630                 | LR__4314
2a630     01 AA 16 F2 | 	cmp	local03, #1 wc
2a634     44 00 90 CD |  if_b	jmp	#LR__4315
2a638     5B AF 02 F6 | 	mov	local05, local09
2a63c     5B B1 02 F6 | 	mov	local06, local09
2a640     13 AE 46 F7 | 	zerox	local05, #19
2a644     14 B0 46 F0 | 	shr	local06, #20
2a648     02 B0 66 F0 | 	shl	local06, #2
2a64c     2D B1 02 F1 | 	add	local06, __methods__
2a650     58 B1 02 FB | 	rdlong	local06, local06
2a654     56 93 C2 FA | 	rdbyte	arg01, local04
2a658     53 95 02 F6 | 	mov	arg02, local01
2a65c     32 B3 02 F6 | 	mov	local07, objptr
2a660     57 65 02 F6 | 	mov	objptr, local05
2a664     01 AC 06 F1 | 	add	local04, #1
2a668     2D B0 62 FD | 	call	local06
2a66c     59 65 02 F6 | 	mov	objptr, local07
2a670     3D B5 02 F1 | 	add	local08, result1
2a674     01 AA 86 F1 | 	sub	local03, #1
2a678     B4 FF 9F FD | 	jmp	#LR__4314
2a67c                 | LR__4315
2a67c     5A 7B 02 F6 | 	mov	result1, local08
2a680                 | LR__4316
2a680     E7 F0 03 F6 | 	mov	ptra, fp
2a684     F2 00 A0 FD | 	call	#popregs_
2a688                 | __system___vfswrite_ret
2a688     2D 00 64 FD | 	ret
2a68c                 | 
2a68c                 | __system___vfsread
2a68c     09 CA 05 F6 | 	mov	COUNT_, #9
2a690     E8 00 A0 FD | 	call	#pushregs_
2a694     28 F0 07 F1 | 	add	ptra, #40
2a698     49 A7 02 F6 | 	mov	local01, arg01
2a69c     4B A9 02 F6 | 	mov	local02, arg03
2a6a0     4A AB 02 F6 | 	mov	local03, arg02
2a6a4     00 AC 06 F6 | 	mov	local04, #0
2a6a8     08 A6 06 F1 | 	add	local01, #8
2a6ac     53 93 02 FB | 	rdlong	arg01, local01
2a6b0     08 A6 86 F1 | 	sub	local01, #8
2a6b4     01 92 CE F7 | 	test	arg01, #1 wz
2a6b8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a6bc     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a6c0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a6c4     01 7A 66 A6 |  if_e	neg	result1, #1
2a6c8     84 01 90 AD |  if_e	jmp	#LR__4326
2a6cc     14 A6 06 F1 | 	add	local01, #20
2a6d0     53 7B 0A FB | 	rdlong	result1, local01 wz
2a6d4     14 A6 86 F1 | 	sub	local01, #20
2a6d8     7C 00 90 AD |  if_e	jmp	#LR__4321
2a6dc     14 A6 06 F1 | 	add	local01, #20
2a6e0     53 AF 02 FB | 	rdlong	local05, local01
2a6e4     57 AB 02 F6 | 	mov	local03, local05
2a6e8     14 A6 86 F1 | 	sub	local01, #20
2a6ec     13 AA 46 F7 | 	zerox	local03, #19
2a6f0     14 AE 46 F0 | 	shr	local05, #20
2a6f4     02 AE 66 F0 | 	shl	local05, #2
2a6f8     2D AF 02 F1 | 	add	local05, __methods__
2a6fc     57 AF 02 FB | 	rdlong	local05, local05
2a700     54 97 02 F6 | 	mov	arg03, local02
2a704     53 93 02 F6 | 	mov	arg01, local01
2a708     32 AD 02 F6 | 	mov	local04, objptr
2a70c     55 65 02 F6 | 	mov	objptr, local03
2a710     2D AE 62 FD | 	call	local05
2a714     56 65 02 F6 | 	mov	objptr, local04
2a718     3D B1 02 F6 | 	mov	local06, result1
2a71c     00 B0 56 F2 | 	cmps	local06, #0 wc
2a720     2C 00 90 3D |  if_ae	jmp	#LR__4320
2a724     08 A6 06 F1 | 	add	local01, #8
2a728     53 AF 02 FB | 	rdlong	local05, local01
2a72c     20 AE 46 F5 | 	or	local05, #32
2a730     53 AF 62 FC | 	wrlong	local05, local01
2a734     00 B0 4E F2 | 	cmps	local06, #0 wz
2a738     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a73c     34 B1 62 FC | 	wrlong	local06, ptr___system__dat__
2a740     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a744     01 7A 66 56 |  if_ne	neg	result1, #1
2a748     00 7A 06 A6 |  if_e	mov	result1, #0
2a74c     00 01 90 FD | 	jmp	#LR__4326
2a750                 | LR__4320
2a750     58 7B 02 F6 | 	mov	result1, local06
2a754     F8 00 90 FD | 	jmp	#LR__4326
2a758                 | LR__4321
2a758     20 A6 06 F1 | 	add	local01, #32
2a75c     53 B3 0A FB | 	rdlong	local07, local01 wz
2a760     20 A6 86 F1 | 	sub	local01, #32
2a764     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a768     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a76c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a770     01 7A 66 A6 |  if_e	neg	result1, #1
2a774     D8 00 90 AD |  if_e	jmp	#LR__4326
2a778     28 A6 06 F1 | 	add	local01, #40
2a77c     53 B1 0A FB | 	rdlong	local06, local01 wz
2a780     28 A6 86 F1 | 	sub	local01, #40
2a784     60 00 90 AD |  if_e	jmp	#LR__4323
2a788     28 A6 06 F1 | 	add	local01, #40
2a78c     53 AF 02 FB | 	rdlong	local05, local01
2a790     57 B5 02 F6 | 	mov	local08, local05
2a794     28 A6 86 F1 | 	sub	local01, #40
2a798     13 B4 46 F7 | 	zerox	local08, #19
2a79c     14 AE 46 F0 | 	shr	local05, #20
2a7a0     02 AE 66 F0 | 	shl	local05, #2
2a7a4     2D AF 02 F1 | 	add	local05, __methods__
2a7a8     57 AF 02 FB | 	rdlong	local05, local05
2a7ac     53 93 02 F6 | 	mov	arg01, local01
2a7b0     E7 96 02 F6 | 	mov	arg03, fp
2a7b4     24 96 06 F1 | 	add	arg03, #36
2a7b8     00 95 06 F6 | 	mov	arg02, #256
2a7bc     32 B1 02 F6 | 	mov	local06, objptr
2a7c0     5A 65 02 F6 | 	mov	objptr, local08
2a7c4     2D AE 62 FD | 	call	local05
2a7c8     58 65 02 F6 | 	mov	objptr, local06
2a7cc     00 7A 0E F2 | 	cmp	result1, #0 wz
2a7d0     14 00 90 5D |  if_ne	jmp	#LR__4322
2a7d4     24 CE 05 F1 | 	add	fp, #36
2a7d8     E7 B0 02 FB | 	rdlong	local06, fp
2a7dc     24 CE 85 F1 | 	sub	fp, #36
2a7e0     02 B0 CE F7 | 	test	local06, #2 wz
2a7e4     01 AC 06 56 |  if_ne	mov	local04, #1
2a7e8                 | LR__4322
2a7e8                 | LR__4323
2a7e8     00 B0 06 F6 | 	mov	local06, #0
2a7ec                 | LR__4324
2a7ec     01 A8 16 F2 | 	cmp	local02, #1 wc
2a7f0     58 00 90 CD |  if_b	jmp	#LR__4325
2a7f4     59 B5 02 F6 | 	mov	local08, local07
2a7f8     59 AF 02 F6 | 	mov	local05, local07
2a7fc     13 B4 46 F7 | 	zerox	local08, #19
2a800     14 AE 46 F0 | 	shr	local05, #20
2a804     02 AE 66 F0 | 	shl	local05, #2
2a808     2D AF 02 F1 | 	add	local05, __methods__
2a80c     57 AF 02 FB | 	rdlong	local05, local05
2a810     53 93 02 F6 | 	mov	arg01, local01
2a814     32 B7 02 F6 | 	mov	local09, objptr
2a818     5A 65 02 F6 | 	mov	objptr, local08
2a81c     2D AE 62 FD | 	call	local05
2a820     5B 65 02 F6 | 	mov	objptr, local09
2a824     00 7A 56 F2 | 	cmps	result1, #0 wc
2a828     20 00 90 CD |  if_b	jmp	#LR__4325
2a82c     55 7B 42 FC | 	wrbyte	result1, local03
2a830     01 B0 06 F1 | 	add	local06, #1
2a834     01 A8 86 F1 | 	sub	local02, #1
2a838     00 AC 0E F2 | 	cmp	local04, #0 wz
2a83c     01 AA 06 F1 | 	add	local03, #1
2a840     A8 FF 9F AD |  if_e	jmp	#LR__4324
2a844     0A 7A 0E F2 | 	cmp	result1, #10 wz
2a848     A0 FF 9F 5D |  if_ne	jmp	#LR__4324
2a84c                 | LR__4325
2a84c     58 7B 02 F6 | 	mov	result1, local06
2a850                 | LR__4326
2a850     E7 F0 03 F6 | 	mov	ptra, fp
2a854     F2 00 A0 FD | 	call	#popregs_
2a858                 | __system___vfsread_ret
2a858     2D 00 64 FD | 	ret
2a85c                 | 
2a85c                 | __system___sdmm_open
2a85c     0B CA 05 F6 | 	mov	COUNT_, #11
2a860     E8 00 A0 FD | 	call	#pushregs_
2a864     49 AB 02 F6 | 	mov	local03, arg01
2a868     4A AD 02 F6 | 	mov	local04, arg02
2a86c     4B AF 02 F6 | 	mov	local05, arg03
2a870     4C B1 02 F6 | 	mov	local06, arg04
2a874     28 92 06 F6 | 	mov	arg01, #40
2a878     88 DB BF FD | 	call	#__system___gc_alloc_managed
2a87c     3D B3 02 F6 | 	mov	local07, result1
2a880     55 99 02 F6 | 	mov	arg04, local03
2a884     1F 98 C6 F0 | 	sar	arg04, #31
2a888     55 97 02 F6 | 	mov	arg03, local03
2a88c     01 92 06 F6 | 	mov	arg01, #1
2a890     00 94 06 F6 | 	mov	arg02, #0
2a894     44 C3 BF FD | 	call	#__system___int64_shl
2a898     3D A7 02 F6 | 	mov	local01, result1
2a89c     3E B5 02 F6 | 	mov	local08, result2
2a8a0     56 99 02 F6 | 	mov	arg04, local04
2a8a4     1F 98 C6 F0 | 	sar	arg04, #31
2a8a8     56 97 02 F6 | 	mov	arg03, local04
2a8ac     01 92 06 F6 | 	mov	arg01, #1
2a8b0     00 94 06 F6 | 	mov	arg02, #0
2a8b4     24 C3 BF FD | 	call	#__system___int64_shl
2a8b8     3D A7 42 F5 | 	or	local01, result1
2a8bc     3E B5 42 F5 | 	or	local08, result2
2a8c0     57 99 02 F6 | 	mov	arg04, local05
2a8c4     1F 98 C6 F0 | 	sar	arg04, #31
2a8c8     57 97 02 F6 | 	mov	arg03, local05
2a8cc     01 92 06 F6 | 	mov	arg01, #1
2a8d0     00 94 06 F6 | 	mov	arg02, #0
2a8d4     04 C3 BF FD | 	call	#__system___int64_shl
2a8d8     3D A7 42 F5 | 	or	local01, result1
2a8dc     3E B5 42 F5 | 	or	local08, result2
2a8e0     58 99 02 F6 | 	mov	arg04, local06
2a8e4     1F 98 C6 F0 | 	sar	arg04, #31
2a8e8     58 97 02 F6 | 	mov	arg03, local06
2a8ec     01 92 06 F6 | 	mov	arg01, #1
2a8f0     00 94 06 F6 | 	mov	arg02, #0
2a8f4     E4 C2 BF FD | 	call	#__system___int64_shl
2a8f8     5A 95 02 F6 | 	mov	arg02, local08
2a8fc     3D A7 42 F5 | 	or	local01, result1
2a900     4A 7D 42 F5 | 	or	result2, arg02
2a904     3E A9 02 F6 | 	mov	local02, result2
2a908     53 93 02 F6 | 	mov	arg01, local01
2a90c     54 95 02 F6 | 	mov	arg02, local02
2a910     38 C3 BF FD | 	call	#__system___usepins
2a914     00 7A 0E F2 | 	cmp	result1, #0 wz
2a918     1C 00 90 5D |  if_ne	jmp	#LR__4330
2a91c     59 93 02 F6 | 	mov	arg01, local07
2a920     14 DC BF FD | 	call	#__system___gc_free
2a924     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a928     34 2D 68 FC | 	wrlong	#22, ptr___system__dat__
2a92c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a930     00 7A 06 F6 | 	mov	result1, #0
2a934     5C 01 90 FD | 	jmp	#LR__4333
2a938                 | LR__4330
2a938     53 B7 02 F6 | 	mov	local09, local01
2a93c     54 9B 02 F6 | 	mov	arg05, local02
2a940     20 B2 06 F1 | 	add	local07, #32
2a944     59 B7 62 FC | 	wrlong	local09, local07
2a948     04 B2 06 F1 | 	add	local07, #4
2a94c     59 9B 62 FC | 	wrlong	arg05, local07
2a950     24 B2 86 F1 | 	sub	local07, #36
2a954     57 99 02 F6 | 	mov	arg04, local05
2a958     58 9B 02 F6 | 	mov	arg05, local06
2a95c     00 92 06 F6 | 	mov	arg01, #0
2a960     55 95 02 F6 | 	mov	arg02, local03
2a964     56 97 02 F6 | 	mov	arg03, local04
2a968     32 B9 02 F6 | 	mov	local10, objptr
2a96c     59 65 02 F6 | 	mov	objptr, local07
2a970     34 0F B0 FD | 	call	#_sdmm_cc_disk_setpins
2a974     5C 65 02 F6 | 	mov	objptr, local10
2a978     3D BB 0A F6 | 	mov	local11, result1 wz
2a97c     18 00 90 5D |  if_ne	jmp	#LR__4331
2a980     00 92 06 F6 | 	mov	arg01, #0
2a984     32 BB 02 F6 | 	mov	local11, objptr
2a988     59 65 02 F6 | 	mov	objptr, local07
2a98c     4C 03 B0 FD | 	call	#_sdmm_cc_disk_initialize
2a990     5D 65 02 F6 | 	mov	objptr, local11
2a994     3D BB E2 F8 | 	getbyte	local11, result1, #0
2a998                 | LR__4331
2a998     00 BA 0E F2 | 	cmp	local11, #0 wz
2a99c     D0 00 90 5D |  if_ne	jmp	#LR__4332
2a9a0     64 E0 BF FD | 	call	#__system___get_vfs_file_handle
2a9a4     3D BB 0A F6 | 	mov	local11, result1 wz
2a9a8     C4 00 90 AD |  if_e	jmp	#LR__4332
2a9ac     04 BA 06 F1 | 	add	local11, #4
2a9b0     5D 05 58 FC | 	wrword	#2, local11
2a9b4     02 BA 06 F1 | 	add	local11, #2
2a9b8     5D 01 58 FC | 	wrword	#0, local11
2a9bc     02 BA 06 F1 | 	add	local11, #2
2a9c0     40 00 80 FF 
2a9c4     5D 07 68 FC | 	wrlong	##32771, local11
2a9c8     59 7B 02 F6 | 	mov	result1, local07
2a9cc     00 68 06 FF 
2a9d0     00 7A 46 F5 | 	or	result1, ##214958080
2a9d4     0C BA 06 F1 | 	add	local11, #12
2a9d8     5D 7B 62 FC | 	wrlong	result1, local11
2a9dc     59 7B 02 F6 | 	mov	result1, local07
2a9e0     00 70 06 FF 
2a9e4     00 7A 46 F5 | 	or	result1, ##216006656
2a9e8     04 BA 06 F1 | 	add	local11, #4
2a9ec     5D 7B 62 FC | 	wrlong	result1, local11
2a9f0     59 7B 02 F6 | 	mov	result1, local07
2a9f4     00 78 06 FF 
2a9f8     00 7A 46 F5 | 	or	result1, ##217055232
2a9fc     0C BA 06 F1 | 	add	local11, #12
2aa00     5D 7B 62 FC | 	wrlong	result1, local11
2aa04     59 7B 02 F6 | 	mov	result1, local07
2aa08     00 80 06 FF 
2aa0c     00 7A 46 F5 | 	or	result1, ##218103808
2aa10     04 BA 06 F1 | 	add	local11, #4
2aa14     5D 7B 62 FC | 	wrlong	result1, local11
2aa18     59 7B 02 F6 | 	mov	result1, local07
2aa1c     00 88 06 FF 
2aa20     00 7A 46 F5 | 	or	result1, ##219152384
2aa24     04 BA 06 F1 | 	add	local11, #4
2aa28     5D 7B 62 FC | 	wrlong	result1, local11
2aa2c     59 7B 02 F6 | 	mov	result1, local07
2aa30     00 90 06 FF 
2aa34     00 7A 46 F5 | 	or	result1, ##220200960
2aa38     04 BA 06 F1 | 	add	local11, #4
2aa3c     5D 7B 62 FC | 	wrlong	result1, local11
2aa40     59 7B 02 F6 | 	mov	result1, local07
2aa44     00 98 06 FF 
2aa48     00 7A 46 F5 | 	or	result1, ##221249536
2aa4c     14 BA 86 F1 | 	sub	local11, #20
2aa50     5D 7B 62 FC | 	wrlong	result1, local11
2aa54     00 A0 06 FF 
2aa58     00 B2 46 F5 | 	or	local07, ##222298112
2aa5c     04 BA 06 F1 | 	add	local11, #4
2aa60     5D B3 62 FC | 	wrlong	local07, local11
2aa64     20 BA 86 F1 | 	sub	local11, #32
2aa68     5D 7B 02 F6 | 	mov	result1, local11
2aa6c     24 00 90 FD | 	jmp	#LR__4333
2aa70                 | LR__4332
2aa70     53 93 02 F6 | 	mov	arg01, local01
2aa74     54 95 02 F6 | 	mov	arg02, local02
2aa78     24 C2 BF FD | 	call	#__system___freepins
2aa7c     59 93 02 F6 | 	mov	arg01, local07
2aa80     B4 DA BF FD | 	call	#__system___gc_free
2aa84     20 68 06 F1 | 	add	ptr___system__dat__, #32
2aa88     34 19 68 FC | 	wrlong	#12, ptr___system__dat__
2aa8c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2aa90     00 7A 06 F6 | 	mov	result1, #0
2aa94                 | LR__4333
2aa94     E7 F0 03 F6 | 	mov	ptra, fp
2aa98     F2 00 A0 FD | 	call	#popregs_
2aa9c                 | __system___sdmm_open_ret
2aa9c     2D 00 64 FD | 	ret
2aaa0                 | 
2aaa0                 | __system____default_filbuf
2aaa0     05 CA 05 F6 | 	mov	COUNT_, #5
2aaa4     E8 00 A0 FD | 	call	#pushregs_
2aaa8     49 A7 02 F6 | 	mov	local01, arg01
2aaac     53 A9 02 FB | 	rdlong	local02, local01
2aab0     08 A8 06 F1 | 	add	local02, #8
2aab4     54 7B 0A FB | 	rdlong	result1, local02 wz
2aab8     08 A8 86 F1 | 	sub	local02, #8
2aabc     20 00 90 5D |  if_ne	jmp	#LR__4340
2aac0     10 A8 06 F1 | 	add	local02, #16
2aac4     54 7B 02 F6 | 	mov	result1, local02
2aac8     04 A8 86 F1 | 	sub	local02, #4
2aacc     54 7B 62 FC | 	wrlong	result1, local02
2aad0     04 A8 86 F1 | 	sub	local02, #4
2aad4     02 00 80 FF 
2aad8     54 01 68 FC | 	wrlong	##1024, local02
2aadc     08 A8 86 F1 | 	sub	local02, #8
2aae0                 | LR__4340
2aae0     14 A6 06 F1 | 	add	local01, #20
2aae4     53 AB 02 FB | 	rdlong	local03, local01
2aae8     55 AD 02 F6 | 	mov	local04, local03
2aaec     14 A6 86 F1 | 	sub	local01, #20
2aaf0     13 AC 46 F7 | 	zerox	local04, #19
2aaf4     14 AA 46 F0 | 	shr	local03, #20
2aaf8     02 AA 66 F0 | 	shl	local03, #2
2aafc     2D AB 02 F1 | 	add	local03, __methods__
2ab00     55 AB 02 FB | 	rdlong	local03, local03
2ab04     53 93 02 F6 | 	mov	arg01, local01
2ab08     0C A8 06 F1 | 	add	local02, #12
2ab0c     54 95 02 FB | 	rdlong	arg02, local02
2ab10     04 A8 86 F1 | 	sub	local02, #4
2ab14     54 97 02 FB | 	rdlong	arg03, local02
2ab18     08 A8 86 F1 | 	sub	local02, #8
2ab1c     32 AF 02 F6 | 	mov	local05, objptr
2ab20     56 65 02 F6 | 	mov	objptr, local04
2ab24     2D AA 62 FD | 	call	local03
2ab28     57 65 02 F6 | 	mov	objptr, local05
2ab2c     3D AF 02 F6 | 	mov	local05, result1
2ab30     00 AE 56 F2 | 	cmps	local05, #0 wc
2ab34     01 7A 66 C6 |  if_b	neg	result1, #1
2ab38     28 00 90 CD |  if_b	jmp	#LR__4341
2ab3c     54 AF 62 FC | 	wrlong	local05, local02
2ab40     0C A8 06 F1 | 	add	local02, #12
2ab44     54 AB 02 FB | 	rdlong	local03, local02
2ab48     08 A8 86 F1 | 	sub	local02, #8
2ab4c     54 AB 62 FC | 	wrlong	local03, local02
2ab50     08 A6 06 F1 | 	add	local01, #8
2ab54     53 AD 02 FB | 	rdlong	local04, local01
2ab58     04 AC 46 F5 | 	or	local04, #4
2ab5c     53 AD 62 FC | 	wrlong	local04, local01
2ab60     57 7B 02 F6 | 	mov	result1, local05
2ab64                 | LR__4341
2ab64     E7 F0 03 F6 | 	mov	ptra, fp
2ab68     F2 00 A0 FD | 	call	#popregs_
2ab6c                 | __system____default_filbuf_ret
2ab6c     2D 00 64 FD | 	ret
2ab70                 | 
2ab70                 | __system__getlower_1283
2ab70     41 92 56 F2 | 	cmps	arg01, #65 wc
2ab74     10 00 90 CD |  if_b	jmp	#LR__4350
2ab78     5B 92 56 F2 | 	cmps	arg01, #91 wc
2ab7c     49 7B 02 C6 |  if_b	mov	result1, arg01
2ab80     20 7A 06 C1 |  if_b	add	result1, #32
2ab84     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2ab88                 | LR__4350
2ab88     49 7B 02 F6 | 	mov	result1, arg01
2ab8c                 | __system__getlower_1283_ret
2ab8c     2D 00 64 FD | 	ret
2ab90                 | 
2ab90                 | __system___pat_match
2ab90     07 CA 05 F6 | 	mov	COUNT_, #7
2ab94     E8 00 A0 FD | 	call	#pushregs_
2ab98     49 A7 02 F6 | 	mov	local01, arg01
2ab9c                 | LR__4360
2ab9c     4A 93 CA FA | 	rdbyte	arg01, arg02 wz
2aba0     53 A9 CA 5A |  if_ne	rdbyte	local02, local01 wz
2aba4     49 AB 02 56 |  if_ne	mov	local03, arg01
2aba8     2A AA 0E 52 |  if_ne	cmp	local03, #42 wz
2abac     2C 00 90 AD |  if_e	jmp	#LR__4361
2abb0     4A 93 C2 FA | 	rdbyte	arg01, arg02
2abb4     B8 FF BF FD | 	call	#__system__getlower_1283
2abb8     3D A9 02 F6 | 	mov	local02, result1
2abbc     53 93 C2 FA | 	rdbyte	arg01, local01
2abc0     AC FF BF FD | 	call	#__system__getlower_1283
2abc4     54 7B 0A F2 | 	cmp	result1, local02 wz
2abc8     00 7A 06 56 |  if_ne	mov	result1, #0
2abcc     00 01 90 5D |  if_ne	jmp	#LR__4370
2abd0     01 A6 06 F1 | 	add	local01, #1
2abd4     01 94 06 F1 | 	add	arg02, #1
2abd8     C0 FF 9F FD | 	jmp	#LR__4360
2abdc                 | LR__4361
2abdc     4A AB C2 FA | 	rdbyte	local03, arg02
2abe0     2A AA 0E F2 | 	cmp	local03, #42 wz
2abe4     D8 00 90 5D |  if_ne	jmp	#LR__4369
2abe8     01 94 06 F1 | 	add	arg02, #1
2abec     4A AB C2 FA | 	rdbyte	local03, arg02
2abf0     01 94 86 F1 | 	sub	arg02, #1
2abf4     2E AA 0E F2 | 	cmp	local03, #46 wz
2abf8     28 00 90 5D |  if_ne	jmp	#LR__4362
2abfc     02 94 06 F1 | 	add	arg02, #2
2ac00     4A AB C2 FA | 	rdbyte	local03, arg02
2ac04     02 94 86 F1 | 	sub	arg02, #2
2ac08     2A AA 0E F2 | 	cmp	local03, #42 wz
2ac0c     03 94 06 A1 |  if_e	add	arg02, #3
2ac10     4A AD C2 AA |  if_e	rdbyte	local04, arg02
2ac14     03 94 86 A1 |  if_e	sub	arg02, #3
2ac18     56 AF 0A A6 |  if_e	mov	local05, local04 wz
2ac1c     01 7A 06 A6 |  if_e	mov	result1, #1
2ac20     AC 00 90 AD |  if_e	jmp	#LR__4370
2ac24                 | LR__4362
2ac24     01 94 06 F1 | 	add	arg02, #1
2ac28     00 B0 06 F6 | 	mov	local06, #0
2ac2c     D7 0E 48 FB | 	callpa	#(@LR__4364-@LR__4363)>>2,fcache_load_ptr_
2ac30                 | LR__4363
2ac30     58 A9 02 F6 | 	mov	local02, local06
2ac34     4A A9 02 F1 | 	add	local02, arg02
2ac38     54 AD CA FA | 	rdbyte	local04, local02 wz
2ac3c     58 AF 02 56 |  if_ne	mov	local05, local06
2ac40     01 AE 06 51 |  if_ne	add	local05, #1
2ac44     57 B1 02 56 |  if_ne	mov	local06, local05
2ac48     E4 FF 9F 5D |  if_ne	jmp	#LR__4363
2ac4c                 | LR__4364
2ac4c     00 B2 06 F6 | 	mov	local07, #0
2ac50     D7 0E 48 FB | 	callpa	#(@LR__4366-@LR__4365)>>2,fcache_load_ptr_
2ac54                 | LR__4365
2ac54     59 A9 02 F6 | 	mov	local02, local07
2ac58     53 A9 02 F1 | 	add	local02, local01
2ac5c     54 AD CA FA | 	rdbyte	local04, local02 wz
2ac60     59 AF 02 56 |  if_ne	mov	local05, local07
2ac64     01 AE 06 51 |  if_ne	add	local05, #1
2ac68     57 B3 02 56 |  if_ne	mov	local07, local05
2ac6c     E4 FF 9F 5D |  if_ne	jmp	#LR__4365
2ac70                 | LR__4366
2ac70     58 B3 52 F2 | 	cmps	local07, local06 wc
2ac74     00 7A 06 C6 |  if_b	mov	result1, #0
2ac78     54 00 90 CD |  if_b	jmp	#LR__4370
2ac7c     59 AB 02 F6 | 	mov	local03, local07
2ac80     58 AB 82 F1 | 	sub	local03, local06
2ac84     55 A7 02 F1 | 	add	local01, local03
2ac88                 | LR__4367
2ac88     01 B0 56 F2 | 	cmps	local06, #1 wc
2ac8c     30 00 90 CD |  if_b	jmp	#LR__4368
2ac90     53 93 C2 FA | 	rdbyte	arg01, local01
2ac94     D8 FE BF FD | 	call	#__system__getlower_1283
2ac98     3D B3 02 F6 | 	mov	local07, result1
2ac9c     4A 93 C2 FA | 	rdbyte	arg01, arg02
2aca0     CC FE BF FD | 	call	#__system__getlower_1283
2aca4     3D B3 0A F2 | 	cmp	local07, result1 wz
2aca8     00 7A 06 56 |  if_ne	mov	result1, #0
2acac     20 00 90 5D |  if_ne	jmp	#LR__4370
2acb0     01 A6 06 F1 | 	add	local01, #1
2acb4     01 94 06 F1 | 	add	arg02, #1
2acb8     01 B0 86 F1 | 	sub	local06, #1
2acbc     C8 FF 9F FD | 	jmp	#LR__4367
2acc0                 | LR__4368
2acc0                 | LR__4369
2acc0     4A B3 CA FA | 	rdbyte	local07, arg02 wz
2acc4     53 A9 CA AA |  if_e	rdbyte	local02, local01 wz
2acc8     01 7A 06 A6 |  if_e	mov	result1, #1
2accc     00 7A 06 56 |  if_ne	mov	result1, #0
2acd0                 | LR__4370
2acd0     E7 F0 03 F6 | 	mov	ptra, fp
2acd4     F2 00 A0 FD | 	call	#popregs_
2acd8                 | __system___pat_match_ret
2acd8     2D 00 64 FD | 	ret
2acdc                 | 
2acdc                 | _sdmm_cc_disk_initialize
2acdc     0F CA 05 F6 | 	mov	COUNT_, #15
2ace0     E8 00 A0 FD | 	call	#pushregs_
2ace4     49 A7 0A F6 | 	mov	local01, arg01 wz
2ace8     F8 A9 02 F6 | 	mov	local02, ptra
2acec     32 AB 02 FB | 	rdlong	local03, objptr
2acf0     04 64 06 F1 | 	add	objptr, #4
2acf4     32 AD 02 FB | 	rdlong	local04, objptr
2acf8     04 64 06 F1 | 	add	objptr, #4
2acfc     32 AF 02 FB | 	rdlong	local05, objptr
2ad00     04 64 06 F1 | 	add	objptr, #4
2ad04     32 B1 02 FB | 	rdlong	local06, objptr
2ad08     08 64 06 F1 | 	add	objptr, #8
2ad0c     32 03 48 FC | 	wrbyte	#1, objptr
2ad10     14 64 86 F1 | 	sub	objptr, #20
2ad14                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2ad14                 | ' 		return RES_NOTRDY;
2ad14     0C F0 07 F1 | 	add	ptra, #12
2ad18     03 7A 06 56 |  if_ne	mov	result1, #3
2ad1c     68 04 90 5D |  if_ne	jmp	#LR__4400
2ad20     13 00 00 FF 
2ad24     10 93 06 F6 | 	mov	arg01, ##10000
2ad28     30 A0 BF FD | 	call	#__system___waitus
2ad2c     55 99 02 F6 | 	mov	arg04, local03
2ad30     57 99 82 F1 | 	sub	arg04, local05
2ad34     4C 99 42 F6 | 	abs	arg04, arg04
2ad38     04 98 56 F2 | 	cmps	arg04, #4 wc
2ad3c     04 7A 06 36 |  if_ae	mov	result1, #4
2ad40     44 04 90 3D |  if_ae	jmp	#LR__4400
2ad44     55 B3 02 F6 | 	mov	local07, local03
2ad48     58 B3 82 F1 | 	sub	local07, local06
2ad4c     59 B3 42 F6 | 	abs	local07, local07
2ad50     04 B2 56 F2 | 	cmps	local07, #4 wc
2ad54     34 00 90 3D |  if_ae	jmp	#LR__4380
2ad58     55 B5 02 F6 | 	mov	local08, local03
2ad5c     58 B5 82 F1 | 	sub	local08, local06
2ad60     07 B4 06 F5 | 	and	local08, #7
2ad64     18 B4 66 F0 | 	shl	local08, #24
2ad68     29 00 00 FF 
2ad6c     7A B4 46 F5 | 	or	local08, ##21114
2ad70     58 B7 02 F6 | 	mov	local09, local06
2ad74     0C 64 06 F1 | 	add	objptr, #12
2ad78     32 B7 62 FC | 	wrlong	local09, objptr
2ad7c     04 64 06 F1 | 	add	objptr, #4
2ad80     32 B7 62 FC | 	wrlong	local09, objptr
2ad84     10 64 86 F1 | 	sub	objptr, #16
2ad88     A4 00 90 FD | 	jmp	#LR__4383
2ad8c                 | LR__4380
2ad8c     58 AB 5A F2 | 	cmps	local03, local06 wcz
2ad90     28 00 90 ED |  if_be	jmp	#LR__4381
2ad94     55 B7 02 F6 | 	mov	local09, local03
2ad98     03 B6 86 F1 | 	sub	local09, #3
2ad9c     57 B7 0A F2 | 	cmp	local09, local05 wz
2ada0     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ada4     01 B6 06 A1 |  if_e	add	local09, #1
2ada8     57 B7 0A F2 | 	cmp	local09, local05 wz
2adac     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2adb0     28 00 90 5D |  if_ne	jmp	#LR__4382
2adb4     01 B6 06 F1 | 	add	local09, #1
2adb8     20 00 90 FD | 	jmp	#LR__4382
2adbc                 | LR__4381
2adbc     55 B7 02 F6 | 	mov	local09, local03
2adc0     03 B6 06 F1 | 	add	local09, #3
2adc4     57 B7 0A F2 | 	cmp	local09, local05 wz
2adc8     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2adcc     01 B6 86 A1 |  if_e	sub	local09, #1
2add0     57 B7 0A F2 | 	cmp	local09, local05 wz
2add4     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2add8     01 B6 86 A1 |  if_e	sub	local09, #1
2addc                 | LR__4382
2addc     58 B3 02 F6 | 	mov	local07, local06
2ade0     5B B3 82 F1 | 	sub	local07, local09
2ade4     59 B3 42 F6 | 	abs	local07, local07
2ade8     04 B2 56 F2 | 	cmps	local07, #4 wc
2adec     04 7A 06 36 |  if_ae	mov	result1, #4
2adf0     94 03 90 3D |  if_ae	jmp	#LR__4400
2adf4     58 B5 02 F6 | 	mov	local08, local06
2adf8     5B B5 82 F1 | 	sub	local08, local09
2adfc     07 B4 06 F5 | 	and	local08, #7
2ae00     1C B4 66 F0 | 	shl	local08, #28
2ae04     55 B3 02 F6 | 	mov	local07, local03
2ae08     5B B3 82 F1 | 	sub	local07, local09
2ae0c     07 B2 06 F5 | 	and	local07, #7
2ae10     18 B2 66 F0 | 	shl	local07, #24
2ae14     59 B5 42 F5 | 	or	local08, local07
2ae18     3A B4 46 F5 | 	or	local08, #58
2ae1c     10 64 06 F1 | 	add	objptr, #16
2ae20     32 B1 62 FC | 	wrlong	local06, objptr
2ae24     04 64 86 F1 | 	sub	objptr, #4
2ae28     32 B7 62 FC | 	wrlong	local09, objptr
2ae2c     0C 64 86 F1 | 	sub	objptr, #12
2ae30                 | LR__4383
2ae30     56 01 08 FC | 	wrpin	#0, local04
2ae34     59 AC 62 FD | 	drvh	local04
2ae38     00 08 00 FF 
2ae3c     20 B8 06 F6 | 	mov	local10, ##1048608
2ae40     40 AA 62 FD | 	dirl	local03
2ae44     A0 03 80 FF 
2ae48     55 91 08 FC | 	wrpin	##475208, local03
2ae4c     00 08 80 FF 
2ae50     55 41 18 FC | 	wxpin	##1048608, local03
2ae54     55 01 28 FC | 	wypin	#0, local03
2ae58     41 AA 62 FD | 	dirh	local03
2ae5c     55 B3 02 F6 | 	mov	local07, local03
2ae60     57 B3 82 F1 | 	sub	local07, local05
2ae64     07 B2 06 F5 | 	and	local07, #7
2ae68     18 B2 66 F0 | 	shl	local07, #24
2ae6c     78 BA 06 F6 | 	mov	local11, #120
2ae70     59 BB 42 F5 | 	or	local11, local07
2ae74     5D 95 02 F6 | 	mov	arg02, local11
2ae78     10 94 26 F4 | 	bith	arg02, #16
2ae7c     40 AE 62 FD | 	dirl	local05
2ae80     57 95 02 FC | 	wrpin	arg02, local05
2ae84     57 3F 18 FC | 	wxpin	#31, local05
2ae88     FF FF FF FF 
2ae8c     57 FF 2B FC | 	wypin	##-1, local05
2ae90     41 AE 62 FD | 	dirh	local05
2ae94     29 00 80 FF 
2ae98     58 01 08 FC | 	wrpin	##20992, local06
2ae9c     40 B6 62 FD | 	dirl	local09
2aea0     5B B5 02 FC | 	wrpin	local08, local09
2aea4     5B 4F 18 FC | 	wxpin	#39, local09
2aea8     5B 01 28 FC | 	wypin	#0, local09
2aeac     41 B6 62 FD | 	dirh	local09
2aeb0     54 93 02 F6 | 	mov	arg01, local02
2aeb4     0A 94 06 F6 | 	mov	arg02, #10
2aeb8     5C 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2aebc     00 92 06 F6 | 	mov	arg01, #0
2aec0     00 94 06 F6 | 	mov	arg02, #0
2aec4     D4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aec8     20 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2aecc     64 92 06 F6 | 	mov	arg01, #100
2aed0     88 9E BF FD | 	call	#__system___waitus
2aed4     54 93 02 F6 | 	mov	arg01, local02
2aed8     0A 94 06 F6 | 	mov	arg02, #10
2aedc     38 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2aee0     00 BC 06 F6 | 	mov	local12, #0
2aee4     00 92 06 F6 | 	mov	arg01, #0
2aee8     00 94 06 F6 | 	mov	arg02, #0
2aeec     AC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aef0     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2aef4     01 B2 0E F2 | 	cmp	local07, #1 wz
2aef8     5C 02 90 5D |  if_ne	jmp	#LR__4399
2aefc     08 92 06 F6 | 	mov	arg01, #8
2af00     AA 95 06 F6 | 	mov	arg02, #426
2af04     94 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af08     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2af0c     01 7A 0E F2 | 	cmp	result1, #1 wz
2af10     30 01 90 5D |  if_ne	jmp	#LR__4388
2af14     54 93 02 F6 | 	mov	arg01, local02
2af18     04 94 06 F6 | 	mov	arg02, #4
2af1c     F8 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2af20     02 A8 06 F1 | 	add	local02, #2
2af24     54 B3 C2 FA | 	rdbyte	local07, local02
2af28     02 A8 86 F1 | 	sub	local02, #2
2af2c     01 B2 0E F2 | 	cmp	local07, #1 wz
2af30     03 A8 06 A1 |  if_e	add	local02, #3
2af34     54 BF C2 AA |  if_e	rdbyte	local13, local02
2af38     03 A8 86 A1 |  if_e	sub	local02, #3
2af3c     AA BE 0E A2 |  if_e	cmp	local13, #170 wz
2af40     14 02 90 5D |  if_ne	jmp	#LR__4398
2af44                 | ' 				for (tmr = 1000; tmr; tmr--) {
2af44     01 00 00 FF 
2af48     E8 C1 06 F6 | 	mov	local14, ##1000
2af4c                 | LR__4384
2af4c     A9 92 06 F6 | 	mov	arg01, #169
2af50     1E 94 C6 F9 | 	decod	arg02, #30
2af54     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af58     3D B3 02 F6 | 	mov	local07, result1
2af5c     07 B2 4E F7 | 	zerox	local07, #7 wz
2af60     18 00 90 AD |  if_e	jmp	#LR__4385
2af64     01 00 00 FF 
2af68     E8 93 06 F6 | 	mov	arg01, ##1000
2af6c     EC 9D BF FD | 	call	#__system___waitus
2af70     60 B3 02 F6 | 	mov	local07, local14
2af74     01 C0 8E F1 | 	sub	local14, #1 wz
2af78     D0 FF 9F 5D |  if_ne	jmp	#LR__4384
2af7c                 | LR__4385
2af7c     00 C0 0E F2 | 	cmp	local14, #0 wz
2af80     38 00 90 AD |  if_e	jmp	#LR__4386
2af84     3A 92 06 F6 | 	mov	arg01, #58
2af88     00 94 06 F6 | 	mov	arg02, #0
2af8c     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af90     3D B3 02 F6 | 	mov	local07, result1
2af94     07 B2 4E F7 | 	zerox	local07, #7 wz
2af98     20 00 90 5D |  if_ne	jmp	#LR__4386
2af9c     54 93 02 F6 | 	mov	arg01, local02
2afa0     04 94 06 F6 | 	mov	arg02, #4
2afa4     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2afa8     54 C1 C2 FA | 	rdbyte	local14, local02
2afac     40 C0 CE F7 | 	test	local14, #64 wz
2afb0     0C B2 06 56 |  if_ne	mov	local07, #12
2afb4     04 B2 06 A6 |  if_e	mov	local07, #4
2afb8     59 BD 02 F6 | 	mov	local12, local07
2afbc                 | LR__4386
2afbc     14 C0 06 FB | 	rdlong	local14, #20
2afc0     F0 FA 02 FF 
2afc4     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2afc8     5D B3 02 C6 |  if_b	mov	local07, local11
2afcc     1B B2 26 C4 |  if_b	bith	local07, #27
2afd0     59 BB 02 C6 |  if_b	mov	local11, local07
2afd4     10 00 90 CD |  if_b	jmp	#LR__4387
2afd8     E1 F5 05 FF 
2afdc     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2afe0     80 00 04 CF 
2afe4     00 BA 46 C5 |  if_b	or	local11, ##134283264
2afe8                 | LR__4387
2afe8     F0 FA 02 FF 
2afec     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2aff0     00 01 00 CF 
2aff4     04 B8 06 C6 |  if_b	mov	local10, ##131076
2aff8     5C 01 90 CD |  if_b	jmp	#LR__4398
2affc     68 78 04 FF 
2b000     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b004     80 01 00 CF 
2b008     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b00c     48 01 90 CD |  if_b	jmp	#LR__4398
2b010     E1 F5 05 FF 
2b014     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b018     00 02 00 CF 
2b01c     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b020     34 01 90 CD |  if_b	jmp	#LR__4398
2b024     59 73 07 FF 
2b028     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b02c     80 02 00 CF 
2b030     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b034     20 01 90 CD |  if_b	jmp	#LR__4398
2b038     00 03 00 FF 
2b03c     0C B8 06 F6 | 	mov	local10, ##393228
2b040     14 01 90 FD | 	jmp	#LR__4398
2b044                 | LR__4388
2b044     A9 92 06 F6 | 	mov	arg01, #169
2b048     00 94 06 F6 | 	mov	arg02, #0
2b04c     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b050     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b054     02 B2 16 F2 | 	cmp	local07, #2 wc
2b058     02 BC 06 C6 |  if_b	mov	local12, #2
2b05c     A9 C2 06 C6 |  if_b	mov	local15, #169
2b060     01 BC 06 36 |  if_ae	mov	local12, #1
2b064     01 C2 06 36 |  if_ae	mov	local15, #1
2b068                 | ' 				ty =  0x01 ; cmd =  (1) ;
2b068                 | ' 			}
2b068                 | ' 			for (tmr = 1000; tmr; tmr--) {
2b068     01 00 00 FF 
2b06c     E8 C1 06 F6 | 	mov	local14, ##1000
2b070                 | LR__4389
2b070     61 93 02 F6 | 	mov	arg01, local15
2b074     00 94 06 F6 | 	mov	arg02, #0
2b078     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b07c     3D B3 02 F6 | 	mov	local07, result1
2b080     07 B2 4E F7 | 	zerox	local07, #7 wz
2b084     18 00 90 AD |  if_e	jmp	#LR__4390
2b088     01 00 00 FF 
2b08c     E8 93 06 F6 | 	mov	arg01, ##1000
2b090     C8 9C BF FD | 	call	#__system___waitus
2b094     60 B3 02 F6 | 	mov	local07, local14
2b098     01 C0 8E F1 | 	sub	local14, #1 wz
2b09c     D0 FF 9F 5D |  if_ne	jmp	#LR__4389
2b0a0                 | LR__4390
2b0a0     00 C0 0E F2 | 	cmp	local14, #0 wz
2b0a4     18 00 90 AD |  if_e	jmp	#LR__4391
2b0a8     10 92 06 F6 | 	mov	arg01, #16
2b0ac     09 94 C6 F9 | 	decod	arg02, #9
2b0b0     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b0b4     3D B3 02 F6 | 	mov	local07, result1
2b0b8     07 B2 4E F7 | 	zerox	local07, #7 wz
2b0bc     04 00 90 AD |  if_e	jmp	#LR__4392
2b0c0                 | LR__4391
2b0c0     00 BC 06 F6 | 	mov	local12, #0
2b0c4                 | LR__4392
2b0c4     14 C0 06 FB | 	rdlong	local14, #20
2b0c8     F0 FA 02 FF 
2b0cc     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b0d0     5D B3 02 C6 |  if_b	mov	local07, local11
2b0d4     1B B2 26 C4 |  if_b	bith	local07, #27
2b0d8     59 BB 02 C6 |  if_b	mov	local11, local07
2b0dc     10 00 90 CD |  if_b	jmp	#LR__4393
2b0e0     E1 F5 05 FF 
2b0e4     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b0e8     80 00 04 CF 
2b0ec     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b0f0                 | LR__4393
2b0f0     F0 FA 02 FF 
2b0f4     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b0f8     00 01 00 CF 
2b0fc     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b100     54 00 90 CD |  if_b	jmp	#LR__4397
2b104     68 78 04 FF 
2b108     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b10c     80 01 00 CF 
2b110     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b114     40 00 90 CD |  if_b	jmp	#LR__4396
2b118     E1 F5 05 FF 
2b11c     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b120     00 02 00 CF 
2b124     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b128     2C 00 90 CD |  if_b	jmp	#LR__4395
2b12c     59 73 07 FF 
2b130     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b134     80 02 00 CF 
2b138     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b13c     18 00 90 CD |  if_b	jmp	#LR__4394
2b140     D1 F0 08 FF 
2b144     01 C1 16 F2 | 	cmp	local14, ##300000001 wc
2b148     00 03 00 CF 
2b14c     0C B8 06 C6 |  if_b	mov	local10, ##393228
2b150     80 03 00 3F 
2b154     0E B8 06 36 |  if_ae	mov	local10, ##458766
2b158                 | LR__4394
2b158                 | LR__4395
2b158                 | LR__4396
2b158                 | LR__4397
2b158                 | LR__4398
2b158                 | LR__4399
2b158     15 64 06 F1 | 	add	objptr, #21
2b15c     32 BD 42 FC | 	wrbyte	local12, objptr
2b160     00 BC 0E F2 | 	cmp	local12, #0 wz
2b164     00 B2 06 56 |  if_ne	mov	local07, #0
2b168     01 B2 06 A6 |  if_e	mov	local07, #1
2b16c     01 64 86 F1 | 	sub	objptr, #1
2b170     32 B3 42 FC | 	wrbyte	local07, objptr
2b174     14 64 86 F1 | 	sub	objptr, #20
2b178     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b17c     55 B9 12 FC | 	wxpin	local10, local03
2b180     57 BB 02 FC | 	wrpin	local11, local05
2b184                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b184                 | ' 		}
2b184                 | ' 	}
2b184                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b184                 | ' 	CardType = ty;
2b184                 | ' 	s = ty ? 0 :  0x01 ;
2b184                 | ' 	Stat = s;
2b184                 | ' 
2b184                 | ' 	deselect();
2b184                 | ' 
2b184                 | ' 
2b184                 | ' 	_wxpin( PIN_CLK, ck_div );
2b184                 | ' 	_wrpin( PIN_DI, spm_tx );
2b184                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b184                 | ' 	return s;
2b184     59 7B 02 F6 | 	mov	result1, local07
2b188                 | LR__4400
2b188     E7 F0 03 F6 | 	mov	ptra, fp
2b18c     F2 00 A0 FD | 	call	#popregs_
2b190                 | _sdmm_cc_disk_initialize_ret
2b190     2D 00 64 FD | 	ret
2b194                 | 
2b194                 | _sdmm_cc_disk_read
2b194     05 CA 05 F6 | 	mov	COUNT_, #5
2b198     E8 00 A0 FD | 	call	#pushregs_
2b19c     4A A7 02 F6 | 	mov	local01, arg02
2b1a0     4B A9 02 F6 | 	mov	local02, arg03
2b1a4     4C AB 02 F6 | 	mov	local03, arg04
2b1a8     00 92 0E F2 | 	cmp	arg01, #0 wz
2b1ac     01 7A 06 56 |  if_ne	mov	result1, #1
2b1b0                 | ' 
2b1b0                 | ' 	return Stat;
2b1b0     14 64 06 A1 |  if_e	add	objptr, #20
2b1b4     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b1b8     14 64 86 A1 |  if_e	sub	objptr, #20
2b1bc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b1c0     01 7A CE F7 | 	test	result1, #1 wz
2b1c4     03 7A 06 56 |  if_ne	mov	result1, #3
2b1c8     7C 00 90 5D |  if_ne	jmp	#LR__4412
2b1cc     15 64 06 F1 | 	add	objptr, #21
2b1d0     32 AD C2 FA | 	rdbyte	local04, objptr
2b1d4     15 64 86 F1 | 	sub	objptr, #21
2b1d8     08 AC CE F7 | 	test	local04, #8 wz
2b1dc     09 A8 66 A0 |  if_e	shl	local02, #9
2b1e0     02 AA 16 F2 | 	cmp	local03, #2 wc
2b1e4     12 AC 06 36 |  if_ae	mov	local04, #18
2b1e8     11 AC 06 C6 |  if_b	mov	local04, #17
2b1ec     54 95 02 F6 | 	mov	arg02, local02
2b1f0     56 93 02 F6 | 	mov	arg01, local04
2b1f4     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b1f8     3D AF 02 F6 | 	mov	local05, result1
2b1fc     07 AE 4E F7 | 	zerox	local05, #7 wz
2b200     30 00 90 5D |  if_ne	jmp	#LR__4411
2b204                 | ' 		do {
2b204                 | LR__4410
2b204     53 93 02 F6 | 	mov	arg01, local01
2b208     09 94 C6 F9 | 	decod	arg02, #9
2b20c     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b210     00 7A 0E F2 | 	cmp	result1, #0 wz
2b214     01 00 00 5F 
2b218     00 A6 06 51 |  if_ne	add	local01, ##512
2b21c     F9 AB 6E 5B |  if_ne	djnz	local03, #LR__4410
2b220     56 AD E2 F8 | 	getbyte	local04, local04, #0
2b224     12 AC 0E F2 | 	cmp	local04, #18 wz
2b228     0C 92 06 A6 |  if_e	mov	arg01, #12
2b22c     00 94 06 A6 |  if_e	mov	arg02, #0
2b230     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2b234                 | LR__4411
2b234     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b238                 | ' 	}
2b238                 | ' 	deselect();
2b238                 | ' 
2b238                 | ' 	return count ? RES_ERROR : RES_OK;
2b238     00 AA 0E F2 | 	cmp	local03, #0 wz
2b23c     01 AE 06 56 |  if_ne	mov	local05, #1
2b240     00 AE 06 A6 |  if_e	mov	local05, #0
2b244     57 7B 02 F6 | 	mov	result1, local05
2b248                 | LR__4412
2b248     E7 F0 03 F6 | 	mov	ptra, fp
2b24c     F2 00 A0 FD | 	call	#popregs_
2b250                 | _sdmm_cc_disk_read_ret
2b250     2D 00 64 FD | 	ret
2b254                 | 
2b254                 | _sdmm_cc_disk_write
2b254     04 CA 05 F6 | 	mov	COUNT_, #4
2b258     E8 00 A0 FD | 	call	#pushregs_
2b25c     4A A7 02 F6 | 	mov	local01, arg02
2b260     4C A9 02 F6 | 	mov	local02, arg04
2b264     4B AB 02 F6 | 	mov	local03, arg03
2b268     00 92 0E F2 | 	cmp	arg01, #0 wz
2b26c     01 7A 06 56 |  if_ne	mov	result1, #1
2b270                 | ' 
2b270                 | ' 	return Stat;
2b270     14 64 06 A1 |  if_e	add	objptr, #20
2b274     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b278     14 64 86 A1 |  if_e	sub	objptr, #20
2b27c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b280     01 7A CE F7 | 	test	result1, #1 wz
2b284     03 7A 06 56 |  if_ne	mov	result1, #3
2b288     C4 00 90 5D |  if_ne	jmp	#LR__4424
2b28c     15 64 06 F1 | 	add	objptr, #21
2b290     32 97 C2 FA | 	rdbyte	arg03, objptr
2b294     15 64 86 F1 | 	sub	objptr, #21
2b298     08 96 CE F7 | 	test	arg03, #8 wz
2b29c     09 AA 66 A0 |  if_e	shl	local03, #9
2b2a0     01 A8 0E F2 | 	cmp	local02, #1 wz
2b2a4     30 00 90 5D |  if_ne	jmp	#LR__4420
2b2a8     18 92 06 F6 | 	mov	arg01, #24
2b2ac     55 95 02 F6 | 	mov	arg02, local03
2b2b0     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b2b4     3D AD 02 F6 | 	mov	local04, result1
2b2b8     07 AC 4E F7 | 	zerox	local04, #7 wz
2b2bc     7C 00 90 5D |  if_ne	jmp	#LR__4423
2b2c0     53 93 02 F6 | 	mov	arg01, local01
2b2c4     FE 94 06 F6 | 	mov	arg02, #254
2b2c8     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b2cc     00 7A 0E F2 | 	cmp	result1, #0 wz
2b2d0     00 A8 06 56 |  if_ne	mov	local02, #0
2b2d4     64 00 90 FD | 	jmp	#LR__4423
2b2d8                 | LR__4420
2b2d8     15 64 06 F1 | 	add	objptr, #21
2b2dc     32 AD C2 FA | 	rdbyte	local04, objptr
2b2e0     15 64 86 F1 | 	sub	objptr, #21
2b2e4     06 AC CE F7 | 	test	local04, #6 wz
2b2e8     97 92 06 56 |  if_ne	mov	arg01, #151
2b2ec     54 95 02 56 |  if_ne	mov	arg02, local02
2b2f0     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2b2f4     55 95 02 F6 | 	mov	arg02, local03
2b2f8     19 92 06 F6 | 	mov	arg01, #25
2b2fc     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b300     3D AD 02 F6 | 	mov	local04, result1
2b304     07 AC 4E F7 | 	zerox	local04, #7 wz
2b308     30 00 90 5D |  if_ne	jmp	#LR__4422
2b30c                 | ' 			do {
2b30c                 | LR__4421
2b30c     53 93 02 F6 | 	mov	arg01, local01
2b310     FC 94 06 F6 | 	mov	arg02, #252
2b314     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b318     00 7A 0E F2 | 	cmp	result1, #0 wz
2b31c     01 00 00 5F 
2b320     00 A6 06 51 |  if_ne	add	local01, ##512
2b324     F9 A9 6E 5B |  if_ne	djnz	local02, #LR__4421
2b328     00 92 06 F6 | 	mov	arg01, #0
2b32c     FD 94 06 F6 | 	mov	arg02, #253
2b330     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b334     00 7A 0E F2 | 	cmp	result1, #0 wz
2b338     01 A8 06 A6 |  if_e	mov	local02, #1
2b33c                 | LR__4422
2b33c                 | LR__4423
2b33c     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b340                 | ' 				count = 1;
2b340                 | ' 		}
2b340                 | ' 	}
2b340                 | ' 	deselect();
2b340                 | ' 
2b340                 | ' 	return count ? RES_ERROR : RES_OK;
2b340     00 A8 0E F2 | 	cmp	local02, #0 wz
2b344     01 AC 06 56 |  if_ne	mov	local04, #1
2b348     00 AC 06 A6 |  if_e	mov	local04, #0
2b34c     56 7B 02 F6 | 	mov	result1, local04
2b350                 | LR__4424
2b350     E7 F0 03 F6 | 	mov	ptra, fp
2b354     F2 00 A0 FD | 	call	#popregs_
2b358                 | _sdmm_cc_disk_write_ret
2b358     2D 00 64 FD | 	ret
2b35c                 | 
2b35c                 | _sdmm_cc_disk_ioctl
2b35c     06 CA 05 F6 | 	mov	COUNT_, #6
2b360     E8 00 A0 FD | 	call	#pushregs_
2b364     30 F0 07 F1 | 	add	ptra, #48
2b368     4A A7 02 F6 | 	mov	local01, arg02
2b36c     4B A9 02 F6 | 	mov	local02, arg03
2b370     00 92 0E F2 | 	cmp	arg01, #0 wz
2b374     01 7A 06 56 |  if_ne	mov	result1, #1
2b378                 | ' 
2b378                 | ' 	return Stat;
2b378     14 64 06 A1 |  if_e	add	objptr, #20
2b37c     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b380     14 64 86 A1 |  if_e	sub	objptr, #20
2b384     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b388     01 7A CE F7 | 	test	result1, #1 wz
2b38c     03 7A 06 56 |  if_ne	mov	result1, #3
2b390     F4 00 90 5D |  if_ne	jmp	#LR__4437
2b394     01 AA 06 F6 | 	mov	local03, #1
2b398                 | ' 
2b398                 | ' 	res = RES_ERROR;
2b398                 | ' 	switch (ctrl) {
2b398     53 AD E2 F8 | 	getbyte	local04, local01, #0
2b39c     04 AC 26 F3 | 	fle	local04, #4
2b3a0     30 AC 62 FD | 	jmprel	local04
2b3a4                 | LR__4430
2b3a4     10 00 90 FD | 	jmp	#LR__4431
2b3a8     1C 00 90 FD | 	jmp	#LR__4432
2b3ac     CC 00 90 FD | 	jmp	#LR__4435
2b3b0     BC 00 90 FD | 	jmp	#LR__4434
2b3b4     C4 00 90 FD | 	jmp	#LR__4435
2b3b8                 | LR__4431
2b3b8     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2b3bc     00 7A 0E F2 | 	cmp	result1, #0 wz
2b3c0     00 AA 06 56 |  if_ne	mov	local03, #0
2b3c4                 | ' 			break;
2b3c4     B8 00 90 FD | 	jmp	#LR__4436
2b3c8                 | LR__4432
2b3c8     09 92 06 F6 | 	mov	arg01, #9
2b3cc     00 94 06 F6 | 	mov	arg02, #0
2b3d0     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b3d4     3D AD 02 F6 | 	mov	local04, result1
2b3d8     07 AC 4E F7 | 	zerox	local04, #7 wz
2b3dc     A0 00 90 5D |  if_ne	jmp	#LR__4436
2b3e0     E7 92 02 F6 | 	mov	arg01, fp
2b3e4     18 92 06 F1 | 	add	arg01, #24
2b3e8     10 94 06 F6 | 	mov	arg02, #16
2b3ec     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b3f0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b3f4     88 00 90 AD |  if_e	jmp	#LR__4436
2b3f8     E7 92 02 F6 | 	mov	arg01, fp
2b3fc     18 92 06 F1 | 	add	arg01, #24
2b400     49 7B 02 F6 | 	mov	result1, arg01
2b404     06 92 06 F1 | 	add	arg01, #6
2b408     49 AF 02 FB | 	rdlong	local05, arg01
2b40c     1B AE FE F9 | 	movbyts	local05, #27
2b410     3D 93 C2 FA | 	rdbyte	arg01, result1
2b414     06 92 46 F0 | 	shr	arg01, #6
2b418     01 92 0E F2 | 	cmp	arg01, #1 wz
2b41c     36 AF 06 A4 |  if_e	bitl	local05, #310
2b420     01 AE 06 A1 |  if_e	add	local05, #1
2b424     0A B0 06 A6 |  if_e	mov	local06, #10
2b428     34 00 90 AD |  if_e	jmp	#LR__4433
2b42c     0E AE 46 F0 | 	shr	local05, #14
2b430     0B AE 46 F7 | 	zerox	local05, #11
2b434     01 AE 06 F1 | 	add	local05, #1
2b438     05 7A 06 F1 | 	add	result1, #5
2b43c     3D B1 C2 FA | 	rdbyte	local06, result1
2b440     58 B1 42 F8 | 	getnib	local06, local06, #0
2b444     04 7A 06 F1 | 	add	result1, #4
2b448     3D 7B E2 FA | 	rdword	result1, result1
2b44c     1B 7A FE F9 | 	movbyts	result1, #27
2b450     17 7A 46 F0 | 	shr	result1, #23
2b454     07 7A 06 F5 | 	and	result1, #7
2b458     3D B1 02 F1 | 	add	local06, result1
2b45c     07 B0 86 F1 | 	sub	local06, #7
2b460                 | LR__4433
2b460                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2b460                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2b460                 | '     }
2b460                 | '     return (LBA_t)cs << n;
2b460     58 AF 62 F0 | 	shl	local05, local06
2b464     54 AF 62 FC | 	wrlong	local05, local02
2b468     00 AA 06 F6 | 	mov	local03, #0
2b46c                 | '                			*(LBA_t*)buff = disc_size(csd);
2b46c                 | ' 				res = RES_OK;
2b46c                 | ' 			}
2b46c                 | ' 			break;
2b46c     10 00 90 FD | 	jmp	#LR__4436
2b470                 | LR__4434
2b470     54 01 69 FC | 	wrlong	#128, local02
2b474     00 AA 06 F6 | 	mov	local03, #0
2b478                 | ' 			*(DWORD*)buff = 128;
2b478                 | ' 			res = RES_OK;
2b478                 | ' 			break;
2b478     04 00 90 FD | 	jmp	#LR__4436
2b47c                 | LR__4435
2b47c     04 AA 06 F6 | 	mov	local03, #4
2b480                 | LR__4436
2b480     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b484                 | ' 			res = RES_PARERR;
2b484                 | ' 	}
2b484                 | ' 
2b484                 | ' 	deselect();
2b484                 | ' 
2b484                 | ' 	return res;
2b484     55 7B 02 F6 | 	mov	result1, local03
2b488                 | LR__4437
2b488     E7 F0 03 F6 | 	mov	ptra, fp
2b48c     F2 00 A0 FD | 	call	#popregs_
2b490                 | _sdmm_cc_disk_ioctl_ret
2b490     2D 00 64 FD | 	ret
2b494                 | 
2b494                 | _sdmm_cc_xmit_mmc_0841
2b494     32 81 02 FB | 	rdlong	_var01, objptr
2b498     08 64 06 F1 | 	add	objptr, #8
2b49c     32 83 02 FB | 	rdlong	_var02, objptr
2b4a0     08 64 86 F1 | 	sub	objptr, #8
2b4a4     40 82 62 FD | 	dirl	_var02
2b4a8     28 02 64 FD | 	setq	#1
2b4ac     49 85 02 FB | 	rdlong	_var03, arg01
2b4b0     69 84 62 FD | 	rev	_var03
2b4b4     1B 84 FE F9 | 	movbyts	_var03, #27
2b4b8     41 85 22 FC | 	wypin	_var03, _var02
2b4bc     4A 85 02 F6 | 	mov	_var03, arg02
2b4c0     02 94 4E F0 | 	shr	arg02, #2 wz
2b4c4     03 84 66 F0 | 	shl	_var03, #3
2b4c8     40 85 22 FC | 	wypin	_var03, _var01
2b4cc     41 82 62 FD | 	dirh	_var02
2b4d0     08 92 06 F1 | 	add	arg01, #8
2b4d4     69 86 62 FD | 	rev	_var04
2b4d8     1B 86 FE F9 | 	movbyts	_var04, #27
2b4dc                 | LR__4440
2b4dc     41 87 22 5C |  if_ne	wypin	_var04, _var02
2b4e0     49 87 02 5B |  if_ne	rdlong	_var04, arg01
2b4e4     04 92 06 51 |  if_ne	add	arg01, #4
2b4e8     69 86 62 5D |  if_ne	rev	_var04
2b4ec     1B 86 FE 59 |  if_ne	movbyts	_var04, #27
2b4f0                 | LR__4441
2b4f0     40 82 72 5D |  if_ne	testp	_var02 wc
2b4f4     F8 FF 9F 1D |  if_a	jmp	#LR__4441
2b4f8     F8 95 6E 5B |  if_ne	djnz	arg02, #LR__4440
2b4fc                 | LR__4442
2b4fc     40 80 72 FD | 	testp	_var01 wc
2b500     F8 FF 9F 3D |  if_ae	jmp	#LR__4442
2b504     40 82 62 FD | 	dirl	_var02
2b508     FF FF FF FF 
2b50c     41 FF 2B FC | 	wypin	##-1, _var02
2b510     41 82 62 FD | 	dirh	_var02
2b514                 | _sdmm_cc_xmit_mmc_0841_ret
2b514     2D 00 64 FD | 	ret
2b518                 | 
2b518                 | _sdmm_cc_rcvr_mmc_0848
2b518     32 81 02 FB | 	rdlong	_var01, objptr
2b51c     0C 64 06 F1 | 	add	objptr, #12
2b520     32 83 02 FB | 	rdlong	_var02, objptr
2b524     0C 64 86 F1 | 	sub	objptr, #12
2b528     41 03 08 FC | 	akpin	_var02
2b52c     4A 85 0A F6 | 	mov	_var03, arg02 wz
2b530     02 84 4E F0 | 	shr	_var03, #2 wz
2b534     30 00 90 AD |  if_e	jmp	#LR__4452
2b538     42 87 02 F6 | 	mov	_var04, _var03
2b53c     05 86 66 F0 | 	shl	_var04, #5
2b540     40 87 22 FC | 	wypin	_var04, _var01
2b544     41 7F 18 FC | 	wxpin	#63, _var02
2b548                 | LR__4450
2b548                 | LR__4451
2b548     40 82 72 FD | 	testp	_var02 wc
2b54c     F8 FF 9F 3D |  if_ae	jmp	#LR__4451
2b550     41 87 8A FA | 	rdpin	_var04, _var02
2b554     69 86 62 FD | 	rev	_var04
2b558     1B 86 FE F9 | 	movbyts	_var04, #27
2b55c     49 87 62 FC | 	wrlong	_var04, arg01
2b560     04 92 06 F1 | 	add	arg01, #4
2b564     F8 85 6E FB | 	djnz	_var03, #LR__4450
2b568                 | LR__4452
2b568     03 94 0E F5 | 	and	arg02, #3 wz
2b56c     24 00 90 AD |  if_e	jmp	#LR__4455
2b570     41 4F 18 FC | 	wxpin	#39, _var02
2b574                 | LR__4453
2b574     40 11 28 FC | 	wypin	#8, _var01
2b578                 | LR__4454
2b578     40 82 72 FD | 	testp	_var02 wc
2b57c     F8 FF 9F 3D |  if_ae	jmp	#LR__4454
2b580     41 87 8A FA | 	rdpin	_var04, _var02
2b584     69 86 62 FD | 	rev	_var04
2b588     49 87 42 FC | 	wrbyte	_var04, arg01
2b58c     01 92 06 F1 | 	add	arg01, #1
2b590     F8 95 6E FB | 	djnz	arg02, #LR__4453
2b594                 | LR__4455
2b594                 | _sdmm_cc_rcvr_mmc_0848_ret
2b594     2D 00 64 FD | 	ret
2b598                 | 
2b598                 | _sdmm_cc_wait_ready_0852
2b598     03 CA 05 F6 | 	mov	COUNT_, #3
2b59c     E8 00 A0 FD | 	call	#pushregs_
2b5a0     F8 A7 02 F6 | 	mov	local01, ptra
2b5a4     1A A8 62 FD | 	getct	local02
2b5a8     14 AA 06 FB | 	rdlong	local03, #20
2b5ac     01 AA 46 F0 | 	shr	local03, #1
2b5b0                 | ' 	UINT tmr, tmout;
2b5b0                 | ' 
2b5b0                 | ' 	tmr = _cnt();
2b5b0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b5b0                 | ' 	for(;;) {
2b5b0     04 F0 07 F1 | 	add	ptra, #4
2b5b4                 | LR__4460
2b5b4     53 93 02 F6 | 	mov	arg01, local01
2b5b8     01 94 06 F6 | 	mov	arg02, #1
2b5bc     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b5c0     53 95 C2 FA | 	rdbyte	arg02, local01
2b5c4     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b5c8     01 7A 06 A6 |  if_e	mov	result1, #1
2b5cc     1A 7A 62 5D |  if_ne	getct	result1
2b5d0     54 7B 82 51 |  if_ne	sub	result1, local02
2b5d4     55 7B 12 52 |  if_ne	cmp	result1, local03 wc
2b5d8     00 7A 06 16 |  if_a	mov	result1, #0
2b5dc     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4460
2b5e0     E7 F0 03 F6 | 	mov	ptra, fp
2b5e4     F2 00 A0 FD | 	call	#popregs_
2b5e8                 | _sdmm_cc_wait_ready_0852_ret
2b5e8     2D 00 64 FD | 	ret
2b5ec                 | 
2b5ec                 | _sdmm_cc_deselect_0858
2b5ec     00 CA 05 F6 | 	mov	COUNT_, #0
2b5f0     E8 00 A0 FD | 	call	#pushregs_
2b5f4     F8 95 02 F6 | 	mov	arg02, ptra
2b5f8     04 64 06 F1 | 	add	objptr, #4
2b5fc     32 93 02 FB | 	rdlong	arg01, objptr
2b600     04 64 86 F1 | 	sub	objptr, #4
2b604     04 F0 07 F1 | 	add	ptra, #4
2b608     59 92 62 FD | 	drvh	arg01
2b60c     1F 20 64 FD | 	waitx	#16
2b610     4A 93 02 F6 | 	mov	arg01, arg02
2b614     01 94 06 F6 | 	mov	arg02, #1
2b618     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b61c     E7 F0 03 F6 | 	mov	ptra, fp
2b620     F2 00 A0 FD | 	call	#popregs_
2b624                 | _sdmm_cc_deselect_0858_ret
2b624     2D 00 64 FD | 	ret
2b628                 | 
2b628                 | _sdmm_cc_select_0862
2b628     01 CA 05 F6 | 	mov	COUNT_, #1
2b62c     E8 00 A0 FD | 	call	#pushregs_
2b630     F8 95 02 F6 | 	mov	arg02, ptra
2b634     04 64 06 F1 | 	add	objptr, #4
2b638     32 93 02 FB | 	rdlong	arg01, objptr
2b63c     08 64 06 F1 | 	add	objptr, #8
2b640     32 A7 02 FB | 	rdlong	local01, objptr
2b644     0C 64 86 F1 | 	sub	objptr, #12
2b648     04 F0 07 F1 | 	add	ptra, #4
2b64c     50 A6 62 FD | 	fltl	local01
2b650     58 92 62 FD | 	drvl	arg01
2b654     1F 20 64 FD | 	waitx	#16
2b658     41 A6 62 FD | 	dirh	local01
2b65c     4A 93 02 F6 | 	mov	arg01, arg02
2b660     01 94 06 F6 | 	mov	arg02, #1
2b664     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b668     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b66c     00 7A 0E F2 | 	cmp	result1, #0 wz
2b670     01 7A 06 56 |  if_ne	mov	result1, #1
2b674     08 00 90 5D |  if_ne	jmp	#LR__4470
2b678     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2b67c                 | ' 
2b67c                 | ' 	deselect();
2b67c                 | ' 	return 0;
2b67c     00 7A 06 F6 | 	mov	result1, #0
2b680                 | LR__4470
2b680     E7 F0 03 F6 | 	mov	ptra, fp
2b684     F2 00 A0 FD | 	call	#popregs_
2b688                 | _sdmm_cc_select_0862_ret
2b688     2D 00 64 FD | 	ret
2b68c                 | 
2b68c                 | _sdmm_cc_rcvr_datablock_0866
2b68c     05 CA 05 F6 | 	mov	COUNT_, #5
2b690     E8 00 A0 FD | 	call	#pushregs_
2b694     49 A7 02 F6 | 	mov	local01, arg01
2b698     4A A9 02 F6 | 	mov	local02, arg02
2b69c     F8 AB 02 F6 | 	mov	local03, ptra
2b6a0     1A AC 62 FD | 	getct	local04
2b6a4     14 AE 06 FB | 	rdlong	local05, #20
2b6a8     03 AE 46 F0 | 	shr	local05, #3
2b6ac                 | ' 	UINT tmr, tmout;
2b6ac                 | ' 
2b6ac                 | ' 	tmr = _cnt();
2b6ac                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b6ac                 | ' 	for(;;) {
2b6ac     04 F0 07 F1 | 	add	ptra, #4
2b6b0                 | LR__4480
2b6b0     55 93 02 F6 | 	mov	arg01, local03
2b6b4     01 94 06 F6 | 	mov	arg02, #1
2b6b8     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6bc     55 95 C2 FA | 	rdbyte	arg02, local03
2b6c0     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b6c4     1A 7A 62 AD |  if_e	getct	result1
2b6c8     3D 95 02 A6 |  if_e	mov	arg02, result1
2b6cc     56 95 82 A1 |  if_e	sub	arg02, local04
2b6d0     57 95 12 A2 |  if_e	cmp	arg02, local05 wc
2b6d4     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4480
2b6d8     55 AF C2 FA | 	rdbyte	local05, local03
2b6dc     FE AE 0E F2 | 	cmp	local05, #254 wz
2b6e0     00 7A 06 56 |  if_ne	mov	result1, #0
2b6e4     1C 00 90 5D |  if_ne	jmp	#LR__4481
2b6e8     53 93 02 F6 | 	mov	arg01, local01
2b6ec     54 95 02 F6 | 	mov	arg02, local02
2b6f0     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6f4     55 93 02 F6 | 	mov	arg01, local03
2b6f8     02 94 06 F6 | 	mov	arg02, #2
2b6fc     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b700                 | ' 
2b700                 | ' 	rcvr_mmc(buff, btr);
2b700                 | ' 	rcvr_mmc(d, 2);
2b700                 | ' 
2b700                 | ' 	return 1;
2b700     01 7A 06 F6 | 	mov	result1, #1
2b704                 | LR__4481
2b704     E7 F0 03 F6 | 	mov	ptra, fp
2b708     F2 00 A0 FD | 	call	#popregs_
2b70c                 | _sdmm_cc_rcvr_datablock_0866_ret
2b70c     2D 00 64 FD | 	ret
2b710                 | 
2b710                 | _sdmm_cc_xmit_datablock_0868
2b710     03 CA 05 F6 | 	mov	COUNT_, #3
2b714     E8 00 A0 FD | 	call	#pushregs_
2b718     49 A7 02 F6 | 	mov	local01, arg01
2b71c     4A A9 02 F6 | 	mov	local02, arg02
2b720     F8 AB 02 F6 | 	mov	local03, ptra
2b724     04 F0 07 F1 | 	add	ptra, #4
2b728     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b72c     00 7A 0E F2 | 	cmp	result1, #0 wz
2b730     00 7A 06 A6 |  if_e	mov	result1, #0
2b734     58 00 90 AD |  if_e	jmp	#LR__4491
2b738     55 A9 42 FC | 	wrbyte	local02, local03
2b73c     55 93 02 F6 | 	mov	arg01, local03
2b740     01 94 06 F6 | 	mov	arg02, #1
2b744     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b748     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2b74c     FD A8 0E F2 | 	cmp	local02, #253 wz
2b750     38 00 90 AD |  if_e	jmp	#LR__4490
2b754     53 93 02 F6 | 	mov	arg01, local01
2b758     09 94 C6 F9 | 	decod	arg02, #9
2b75c     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b760     55 93 02 F6 | 	mov	arg01, local03
2b764     02 94 06 F6 | 	mov	arg02, #2
2b768     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b76c     55 93 02 F6 | 	mov	arg01, local03
2b770     01 94 06 F6 | 	mov	arg02, #1
2b774     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b778     55 AB C2 FA | 	rdbyte	local03, local03
2b77c     1F AA 06 F5 | 	and	local03, #31
2b780     05 AA 0E F2 | 	cmp	local03, #5 wz
2b784                 | ' 			return 0;
2b784     00 7A 06 56 |  if_ne	mov	result1, #0
2b788     04 00 90 5D |  if_ne	jmp	#LR__4491
2b78c                 | LR__4490
2b78c                 | ' 	}
2b78c                 | ' 
2b78c                 | ' 	return 1;
2b78c     01 7A 06 F6 | 	mov	result1, #1
2b790                 | LR__4491
2b790     E7 F0 03 F6 | 	mov	ptra, fp
2b794     F2 00 A0 FD | 	call	#popregs_
2b798                 | _sdmm_cc_xmit_datablock_0868_ret
2b798     2D 00 64 FD | 	ret
2b79c                 | 
2b79c                 | _sdmm_cc_send_cmd_0871
2b79c     04 CA 05 F6 | 	mov	COUNT_, #4
2b7a0     E8 00 A0 FD | 	call	#pushregs_
2b7a4                 | _sdmm_cc_send_cmd_0871_enter
2b7a4     49 A7 02 F6 | 	mov	local01, arg01
2b7a8     4A A9 02 F6 | 	mov	local02, arg02
2b7ac     F8 AB 02 F6 | 	mov	local03, ptra
2b7b0     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b7b4     80 7A CE F7 | 	test	result1, #128 wz
2b7b8     08 F0 07 F1 | 	add	ptra, #8
2b7bc     20 00 90 AD |  if_e	jmp	#LR__4500
2b7c0     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b7c4     7F A6 06 F5 | 	and	local01, #127
2b7c8     37 92 06 F6 | 	mov	arg01, #55
2b7cc     00 94 06 F6 | 	mov	arg02, #0
2b7d0     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2b7d4     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
2b7d8     02 94 16 F2 | 	cmp	arg02, #2 wc
2b7dc     BC 00 90 3D |  if_ae	jmp	#LR__4503
2b7e0                 | LR__4500
2b7e0     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b7e4     0C 7A 0E F2 | 	cmp	result1, #12 wz
2b7e8     14 00 90 AD |  if_e	jmp	#LR__4501
2b7ec     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2b7f0     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2b7f4     00 7A 0E F2 | 	cmp	result1, #0 wz
2b7f8     FF 7A 06 A6 |  if_e	mov	result1, #255
2b7fc     9C 00 90 AD |  if_e	jmp	#LR__4503
2b800                 | LR__4501
2b800     53 95 E2 F8 | 	getbyte	arg02, local01, #0
2b804     40 7A 06 F6 | 	mov	result1, #64
2b808     4A 7B 42 F5 | 	or	result1, arg02
2b80c     55 7B 42 FC | 	wrbyte	result1, local03
2b810     55 95 02 F6 | 	mov	arg02, local03
2b814     01 94 06 F1 | 	add	arg02, #1
2b818     1B A8 FE F9 | 	movbyts	local02, #27
2b81c     4A A9 62 FC | 	wrlong	local02, arg02
2b820     01 AC 06 F6 | 	mov	local04, #1
2b824     53 A9 02 F6 | 	mov	local02, local01
2b828     07 A8 4E F7 | 	zerox	local02, #7 wz
2b82c     95 AC 06 A6 |  if_e	mov	local04, #149
2b830     53 A9 E2 F8 | 	getbyte	local02, local01, #0
2b834     08 A8 0E F2 | 	cmp	local02, #8 wz
2b838     87 AC 06 A6 |  if_e	mov	local04, #135
2b83c     05 AA 06 F1 | 	add	local03, #5
2b840     55 AD 42 FC | 	wrbyte	local04, local03
2b844     05 AA 86 F1 | 	sub	local03, #5
2b848     55 93 02 F6 | 	mov	arg01, local03
2b84c     06 94 06 F6 | 	mov	arg02, #6
2b850     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b854     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b858     0C A6 0E F2 | 	cmp	local01, #12 wz
2b85c     55 93 02 A6 |  if_e	mov	arg01, local03
2b860     06 92 06 A1 |  if_e	add	arg01, #6
2b864     01 94 06 A6 |  if_e	mov	arg02, #1
2b868     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2b86c     0A AC 06 F6 | 	mov	local04, #10
2b870                 | ' 	n = 10;
2b870                 | ' 	do
2b870                 | LR__4502
2b870     55 93 02 F6 | 	mov	arg01, local03
2b874     06 92 06 F1 | 	add	arg01, #6
2b878     01 94 06 F6 | 	mov	arg02, #1
2b87c     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b880     06 AA 06 F1 | 	add	local03, #6
2b884     55 A9 C2 FA | 	rdbyte	local02, local03
2b888     06 AA 86 F1 | 	sub	local03, #6
2b88c     80 A8 CE F7 | 	test	local02, #128 wz
2b890     F7 AD 6E 5B |  if_ne	djnz	local04, #LR__4502
2b894                 | ' 
2b894                 | ' 	return buf[6];
2b894     06 AA 06 F1 | 	add	local03, #6
2b898     55 7B C2 FA | 	rdbyte	result1, local03
2b89c                 | LR__4503
2b89c     E7 F0 03 F6 | 	mov	ptra, fp
2b8a0     F2 00 A0 FD | 	call	#popregs_
2b8a4                 | _sdmm_cc_send_cmd_0871_ret
2b8a4     2D 00 64 FD | 	ret
2b8a8                 | 
2b8a8                 | _sdmm_cc_disk_setpins
2b8a8     00 92 0E F2 | 	cmp	arg01, #0 wz
2b8ac     01 7A 66 56 |  if_ne	neg	result1, #1
2b8b0     24 00 90 5D |  if_ne	jmp	#_sdmm_cc_disk_setpins_ret
2b8b4     32 95 62 FC | 	wrlong	arg02, objptr
2b8b8     04 64 06 F1 | 	add	objptr, #4
2b8bc     32 97 62 FC | 	wrlong	arg03, objptr
2b8c0     04 64 06 F1 | 	add	objptr, #4
2b8c4     32 99 62 FC | 	wrlong	arg04, objptr
2b8c8     04 64 06 F1 | 	add	objptr, #4
2b8cc     32 9B 62 FC | 	wrlong	arg05, objptr
2b8d0     0C 64 86 F1 | 	sub	objptr, #12
2b8d4                 | '     _pin_clk = pclk;
2b8d4                 | '     _pin_ss = pss;
2b8d4                 | '     _pin_di = pdi;
2b8d4                 | '     _pin_do = pdo;
2b8d4                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b8d4                 | '     return 0;
2b8d4     00 7A 06 F6 | 	mov	result1, #0
2b8d8                 | _sdmm_cc_disk_setpins_ret
2b8d8     2D 00 64 FD | 	ret
2b8dc                 | 
2b8dc                 | _sdmm_cc_disk_deinitialize
2b8dc     04 CA 05 F6 | 	mov	COUNT_, #4
2b8e0     E8 00 A0 FD | 	call	#pushregs_
2b8e4     00 92 4E F2 | 	cmps	arg01, #0 wz
2b8e8     32 A7 02 FB | 	rdlong	local01, objptr
2b8ec     04 64 06 F1 | 	add	objptr, #4
2b8f0     32 A9 02 FB | 	rdlong	local02, objptr
2b8f4     04 64 06 F1 | 	add	objptr, #4
2b8f8     32 AB 02 FB | 	rdlong	local03, objptr
2b8fc     08 64 06 F1 | 	add	objptr, #8
2b900     32 AD 02 FB | 	rdlong	local04, objptr
2b904     04 64 86 F1 | 	sub	objptr, #4
2b908     32 93 02 FB | 	rdlong	arg01, objptr
2b90c     0C 64 86 F1 | 	sub	objptr, #12
2b910                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b910                 | '         return RES_NOTRDY;
2b910     03 7A 06 56 |  if_ne	mov	result1, #3
2b914     34 00 90 5D |  if_ne	jmp	#LR__4510
2b918     50 92 62 FD | 	fltl	arg01
2b91c     49 01 08 FC | 	wrpin	#0, arg01
2b920     50 AC 62 FD | 	fltl	local04
2b924     56 01 08 FC | 	wrpin	#0, local04
2b928     50 AA 62 FD | 	fltl	local03
2b92c     55 01 08 FC | 	wrpin	#0, local03
2b930     50 A6 62 FD | 	fltl	local01
2b934     53 01 08 FC | 	wrpin	#0, local01
2b938     50 A8 62 FD | 	fltl	local02
2b93c     54 01 08 FC | 	wrpin	#0, local02
2b940     0A 92 06 F6 | 	mov	arg01, #10
2b944     A8 93 BF FD | 	call	#__system___waitms
2b948                 | '     }
2b948                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b948                 | '     _pinclear(SMPIN_DO);
2b948                 | '     _pinclear(PIN_DO);
2b948                 | '     _pinclear(PIN_DI);
2b948                 | '     _pinclear(PIN_CLK);
2b948                 | '     _pinclear(PIN_SS);
2b948                 | ' 
2b948                 | '     _waitms(10);
2b948                 | ' 
2b948                 | '     return 0;
2b948     00 7A 06 F6 | 	mov	result1, #0
2b94c                 | LR__4510
2b94c     E7 F0 03 F6 | 	mov	ptra, fp
2b950     F2 00 A0 FD | 	call	#popregs_
2b954                 | _sdmm_cc_disk_deinitialize_ret
2b954     2D 00 64 FD | 	ret
2b958                 | 
2b958                 | _sdmm_cc_v_do_io
2b958     08 CA 05 F6 | 	mov	COUNT_, #8
2b95c     E8 00 A0 FD | 	call	#pushregs_
2b960     4B A7 02 F6 | 	mov	local01, arg03
2b964     4C A9 02 F6 | 	mov	local02, arg04
2b968     4A AB 02 F6 | 	mov	local03, arg02
2b96c     18 64 06 F1 | 	add	objptr, #24
2b970     32 AD 02 FB | 	rdlong	local04, objptr
2b974     00 98 06 F6 | 	mov	arg04, #0
2b978     FF AD 06 F5 | 	and	local04, #511
2b97c     00 AE 06 F6 | 	mov	local05, #0
2b980     32 93 02 FB | 	rdlong	arg01, objptr
2b984     04 64 06 F1 | 	add	objptr, #4
2b988     32 95 02 FB | 	rdlong	arg02, objptr
2b98c     1C 64 86 F1 | 	sub	objptr, #28
2b990     09 96 06 F6 | 	mov	arg03, #9
2b994     7C B2 BF FD | 	call	#__system___int64_sar
2b998     3D B1 02 F6 | 	mov	local06, result1
2b99c     00 AC 0E F2 | 	cmp	local04, #0 wz
2b9a0                 | ' 
2b9a0                 | ' 
2b9a0                 | '         return -1;
2b9a0     01 7A 66 56 |  if_ne	neg	result1, #1
2b9a4     84 00 90 5D |  if_ne	jmp	#LR__4523
2b9a8     53 B3 02 F6 | 	mov	local07, local01
2b9ac     09 B2 46 F0 | 	shr	local07, #9
2b9b0     00 A8 0E F2 | 	cmp	local02, #0 wz
2b9b4     1C 00 90 AD |  if_e	jmp	#LR__4520
2b9b8     00 92 06 F6 | 	mov	arg01, #0
2b9bc     55 95 02 F6 | 	mov	arg02, local03
2b9c0     58 97 02 F6 | 	mov	arg03, local06
2b9c4     59 99 02 F6 | 	mov	arg04, local07
2b9c8     88 F8 BF FD | 	call	#_sdmm_cc_disk_write
2b9cc     3D B5 02 F6 | 	mov	local08, result1
2b9d0     18 00 90 FD | 	jmp	#LR__4521
2b9d4                 | LR__4520
2b9d4     00 92 06 F6 | 	mov	arg01, #0
2b9d8     55 95 02 F6 | 	mov	arg02, local03
2b9dc     58 97 02 F6 | 	mov	arg03, local06
2b9e0     59 99 02 F6 | 	mov	arg04, local07
2b9e4     AC F7 BF FD | 	call	#_sdmm_cc_disk_read
2b9e8     3D B5 02 F6 | 	mov	local08, result1
2b9ec                 | LR__4521
2b9ec     00 B4 0E F2 | 	cmp	local08, #0 wz
2b9f0     34 00 90 5D |  if_ne	jmp	#LR__4522
2b9f4     09 B2 66 F0 | 	shl	local07, #9
2b9f8     59 AF 02 F1 | 	add	local05, local07
2b9fc     18 64 06 F1 | 	add	objptr, #24
2ba00     32 7B 02 FB | 	rdlong	result1, objptr
2ba04     04 64 06 F1 | 	add	objptr, #4
2ba08     32 7D 02 FB | 	rdlong	result2, objptr
2ba0c     59 7B 12 F1 | 	add	result1, local07 wc
2ba10     00 7C 26 F1 | 	addx	result2, #0
2ba14     04 64 86 F1 | 	sub	objptr, #4
2ba18     32 7B 62 FC | 	wrlong	result1, objptr
2ba1c     04 64 06 F1 | 	add	objptr, #4
2ba20     32 7D 62 FC | 	wrlong	result2, objptr
2ba24     1C 64 86 F1 | 	sub	objptr, #28
2ba28                 | LR__4522
2ba28                 | ' 
2ba28                 | ' 
2ba28                 | '     }
2ba28                 | '     return bytes_io;
2ba28     57 7B 02 F6 | 	mov	result1, local05
2ba2c                 | LR__4523
2ba2c     E7 F0 03 F6 | 	mov	ptra, fp
2ba30     F2 00 A0 FD | 	call	#popregs_
2ba34                 | _sdmm_cc_v_do_io_ret
2ba34     2D 00 64 FD | 	ret
2ba38                 | 
2ba38                 | _sdmm_cc_v_read
2ba38                 | ' {
2ba38                 | '     return v_do_io(fil, buf, count,  (0) );
2ba38     00 98 06 F6 | 	mov	arg04, #0
2ba3c     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2ba40                 | _sdmm_cc_v_read_ret
2ba40     2D 00 64 FD | 	ret
2ba44                 | 
2ba44                 | _sdmm_cc_v_write
2ba44                 | ' {
2ba44                 | '     return v_do_io(fil, buf, count,  (1) );
2ba44     01 98 06 F6 | 	mov	arg04, #1
2ba48     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2ba4c                 | _sdmm_cc_v_write_ret
2ba4c     2D 00 64 FD | 	ret
2ba50                 | 
2ba50                 | _sdmm_cc_v_ioctl
2ba50     00 92 06 F6 | 	mov	arg01, #0
2ba54     04 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2ba58     00 7A 0E F2 | 	cmp	result1, #0 wz
2ba5c                 | '         return _seterror( 10 );
2ba5c     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
2ba60     34 15 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2ba64     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
2ba68     01 7A 66 56 |  if_ne	neg	result1, #1
2ba6c                 | '     return 0;
2ba6c     00 7A 06 A6 |  if_e	mov	result1, #0
2ba70                 | _sdmm_cc_v_ioctl_ret
2ba70     2D 00 64 FD | 	ret
2ba74                 | 
2ba74                 | _sdmm_cc_v_lseek
2ba74     4A 81 02 F6 | 	mov	_var01, arg02
2ba78     4C 85 0A F6 | 	mov	_var03, arg04 wz
2ba7c     1C 00 90 5D |  if_ne	jmp	#LR__4530
2ba80     4B 85 02 F6 | 	mov	_var03, arg03
2ba84     18 64 06 F1 | 	add	objptr, #24
2ba88     32 81 62 FC | 	wrlong	_var01, objptr
2ba8c     04 64 06 F1 | 	add	objptr, #4
2ba90     32 85 62 FC | 	wrlong	_var03, objptr
2ba94     1C 64 86 F1 | 	sub	objptr, #28
2ba98     64 00 90 FD | 	jmp	#LR__4533
2ba9c                 | LR__4530
2ba9c     01 84 0E F2 | 	cmp	_var03, #1 wz
2baa0     30 00 90 5D |  if_ne	jmp	#LR__4531
2baa4     18 64 06 F1 | 	add	objptr, #24
2baa8     32 7B 02 FB | 	rdlong	result1, objptr
2baac     04 64 06 F1 | 	add	objptr, #4
2bab0     32 7D 02 FB | 	rdlong	result2, objptr
2bab4     40 7B 12 F1 | 	add	result1, _var01 wc
2bab8     4B 7D 22 F1 | 	addx	result2, arg03
2babc     04 64 86 F1 | 	sub	objptr, #4
2bac0     32 7B 62 FC | 	wrlong	result1, objptr
2bac4     04 64 06 F1 | 	add	objptr, #4
2bac8     32 7D 62 FC | 	wrlong	result2, objptr
2bacc     1C 64 86 F1 | 	sub	objptr, #28
2bad0     2C 00 90 FD | 	jmp	#LR__4532
2bad4                 | LR__4531
2bad4     40 7B 22 F6 | 	not	result1, _var01
2bad8     01 7A 0E F1 | 	add	result1, #1 wz
2badc     4B 7D 22 F6 | 	not	result2, arg03
2bae0     00 94 06 F6 | 	mov	arg02, #0
2bae4     01 94 66 A6 |  if_e	neg	arg02, #1
2bae8     4A 7D 82 F1 | 	sub	result2, arg02
2baec     18 64 06 F1 | 	add	objptr, #24
2baf0     32 7B 62 FC | 	wrlong	result1, objptr
2baf4     04 64 06 F1 | 	add	objptr, #4
2baf8     32 7D 62 FC | 	wrlong	result2, objptr
2bafc     1C 64 86 F1 | 	sub	objptr, #28
2bb00                 | LR__4532
2bb00                 | LR__4533
2bb00                 | '         curpos = -off;
2bb00                 | '     }
2bb00                 | '     return curpos;
2bb00     18 64 06 F1 | 	add	objptr, #24
2bb04     32 7B 02 FB | 	rdlong	result1, objptr
2bb08     04 64 06 F1 | 	add	objptr, #4
2bb0c     32 7D 02 FB | 	rdlong	result2, objptr
2bb10     1C 64 86 F1 | 	sub	objptr, #28
2bb14                 | _sdmm_cc_v_lseek_ret
2bb14     2D 00 64 FD | 	ret
2bb18                 | 
2bb18                 | _sdmm_cc_v_flush
2bb18                 | ' {
2bb18                 | '     return 0;
2bb18     00 7A 06 F6 | 	mov	result1, #0
2bb1c                 | _sdmm_cc_v_flush_ret
2bb1c     2D 00 64 FD | 	ret
2bb20                 | 
2bb20                 | _sdmm_cc_v_close
2bb20     00 92 06 F6 | 	mov	arg01, #0
2bb24     B4 FD BF FD | 	call	#_sdmm_cc_disk_deinitialize
2bb28     20 64 06 F1 | 	add	objptr, #32
2bb2c     32 93 02 FB | 	rdlong	arg01, objptr
2bb30     04 64 06 F1 | 	add	objptr, #4
2bb34     32 95 02 FB | 	rdlong	arg02, objptr
2bb38     24 64 86 F1 | 	sub	objptr, #36
2bb3c     60 B1 BF FD | 	call	#__system___freepins
2bb40                 | ' {
2bb40                 | '     disk_deinitialize(0);
2bb40                 | '     _freepins(f_pinmask);
2bb40                 | '     return 0;
2bb40     00 7A 06 F6 | 	mov	result1, #0
2bb44                 | _sdmm_cc_v_close_ret
2bb44     2D 00 64 FD | 	ret
2bb48                 | 
2bb48                 | _sdmm_cc_v_putc
2bb48     00 CA 05 F6 | 	mov	COUNT_, #0
2bb4c     E8 00 A0 FD | 	call	#pushregs_
2bb50     0C F0 07 F1 | 	add	ptra, #12
2bb54     04 CE 05 F1 | 	add	fp, #4
2bb58     E7 92 62 FC | 	wrlong	arg01, fp
2bb5c     4A 93 02 F6 | 	mov	arg01, arg02
2bb60     E7 94 02 F6 | 	mov	arg02, fp
2bb64     01 96 06 F6 | 	mov	arg03, #1
2bb68     04 CE 85 F1 | 	sub	fp, #4
2bb6c                 | ' {
2bb6c                 | '     return v_do_io(fil, buf, count,  (1) );
2bb6c     01 98 06 F6 | 	mov	arg04, #1
2bb70     E4 FD BF FD | 	call	#_sdmm_cc_v_do_io
2bb74     01 7A 0E F2 | 	cmp	result1, #1 wz
2bb78     04 CE 05 A1 |  if_e	add	fp, #4
2bb7c     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bb80     04 CE 85 A1 |  if_e	sub	fp, #4
2bb84                 | '     return -1;
2bb84     01 7A 66 56 |  if_ne	neg	result1, #1
2bb88     E7 F0 03 F6 | 	mov	ptra, fp
2bb8c     F2 00 A0 FD | 	call	#popregs_
2bb90                 | _sdmm_cc_v_putc_ret
2bb90     2D 00 64 FD | 	ret
2bb94                 | 
2bb94                 | _sdmm_cc_v_getc
2bb94     00 CA 05 F6 | 	mov	COUNT_, #0
2bb98     E8 00 A0 FD | 	call	#pushregs_
2bb9c     0C F0 07 F1 | 	add	ptra, #12
2bba0     08 CE 05 F1 | 	add	fp, #8
2bba4     E7 00 68 FC | 	wrlong	#0, fp
2bba8     E7 94 02 F6 | 	mov	arg02, fp
2bbac     08 CE 85 F1 | 	sub	fp, #8
2bbb0     01 96 06 F6 | 	mov	arg03, #1
2bbb4                 | ' {
2bbb4                 | '     return v_do_io(fil, buf, count,  (0) );
2bbb4     00 98 06 F6 | 	mov	arg04, #0
2bbb8     9C FD BF FD | 	call	#_sdmm_cc_v_do_io
2bbbc     01 7A 0E F2 | 	cmp	result1, #1 wz
2bbc0     08 CE 05 A1 |  if_e	add	fp, #8
2bbc4     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bbc8     08 CE 85 A1 |  if_e	sub	fp, #8
2bbcc                 | '     return -1;
2bbcc     01 7A 66 56 |  if_ne	neg	result1, #1
2bbd0     E7 F0 03 F6 | 	mov	ptra, fp
2bbd4     F2 00 A0 FD | 	call	#popregs_
2bbd8                 | _sdmm_cc_v_getc_ret
2bbd8     2D 00 64 FD | 	ret
2bbdc                 | 
2bbdc                 | _fatfs_cc_ff_uni2oem
2bbdc     00 80 06 F6 | 	mov	_var01, #0
2bbe0     80 92 16 F2 | 	cmp	arg01, #128 wc
2bbe4     49 81 02 C6 |  if_b	mov	_var01, arg01
2bbe8     58 00 90 CD |  if_b	jmp	#LR__4544
2bbec     80 00 00 FF 
2bbf0     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2bbf4     4C 00 90 3D |  if_ae	jmp	#LR__4543
2bbf8     4A 7B 32 F9 | 	getword	result1, arg02, #0
2bbfc     01 00 00 FF 
2bc00     52 7B 0E F2 | 	cmp	result1, ##850 wz
2bc04     3C 00 90 5D |  if_ne	jmp	#LR__4543
2bc08                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2bc08     00 80 06 F6 | 	mov	_var01, #0
2bc0c     D7 14 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2bc10                 | LR__4540
2bc10     40 7B 32 F9 | 	getword	result1, _var01, #0
2bc14     80 7A 16 F2 | 	cmp	result1, #128 wc
2bc18     1C 00 90 3D |  if_ae	jmp	#LR__4542
2bc1c     40 7B 32 F9 | 	getword	result1, _var01, #0
2bc20     01 7A 66 F0 | 	shl	result1, #1
2bc24     36 7B 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
2bc28     3D 7B E2 FA | 	rdword	result1, result1
2bc2c     3D 93 0A F2 | 	cmp	arg01, result1 wz
2bc30     01 80 06 51 |  if_ne	add	_var01, #1
2bc34     D8 FF 9F 5D |  if_ne	jmp	#LR__4540
2bc38                 | LR__4541
2bc38                 | LR__4542
2bc38     40 81 32 F9 | 	getword	_var01, _var01, #0
2bc3c     80 80 06 F1 | 	add	_var01, #128
2bc40     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2bc44                 | LR__4543
2bc44                 | LR__4544
2bc44                 | ' 			c = (c + 0x80) & 0xFF;
2bc44                 | ' 		}
2bc44                 | ' 	}
2bc44                 | ' 
2bc44                 | ' 	return c;
2bc44     40 7B 02 F6 | 	mov	result1, _var01
2bc48                 | _fatfs_cc_ff_uni2oem_ret
2bc48     2D 00 64 FD | 	ret
2bc4c                 | 
2bc4c                 | _fatfs_cc_ff_oem2uni
2bc4c     00 80 06 F6 | 	mov	_var01, #0
2bc50     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc54     80 7A 16 F2 | 	cmp	result1, #128 wc
2bc58     49 81 02 C6 |  if_b	mov	_var01, arg01
2bc5c     2C 00 90 CD |  if_b	jmp	#LR__4551
2bc60     4A 95 32 F9 | 	getword	arg02, arg02, #0
2bc64     01 00 00 FF 
2bc68     52 95 0E F2 | 	cmp	arg02, ##850 wz
2bc6c     1C 00 90 5D |  if_ne	jmp	#LR__4550
2bc70     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc74     00 7B 16 F2 | 	cmp	result1, #256 wc
2bc78     49 93 32 C9 |  if_b	getword	arg01, arg01, #0
2bc7c     80 92 86 C1 |  if_b	sub	arg01, #128
2bc80     01 92 66 C0 |  if_b	shl	arg01, #1
2bc84     36 93 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2bc88     49 81 E2 CA |  if_b	rdword	_var01, arg01
2bc8c                 | LR__4550
2bc8c                 | LR__4551
2bc8c                 | ' 		}
2bc8c                 | ' 	}
2bc8c                 | ' 
2bc8c                 | ' 	return c;
2bc8c     40 7B 02 F6 | 	mov	result1, _var01
2bc90                 | _fatfs_cc_ff_oem2uni_ret
2bc90     2D 00 64 FD | 	ret
2bc94                 | 
2bc94                 | _fatfs_cc_ff_wtoupper
2bc94     49 81 02 F6 | 	mov	_var01, arg01
2bc98     80 00 00 FF 
2bc9c     00 80 16 F2 | 	cmp	_var01, ##65536 wc
2bca0     58 01 90 3D |  if_ae	jmp	#LR__4573
2bca4     40 83 02 F6 | 	mov	_var02, _var01
2bca8     41 81 32 F9 | 	getword	_var01, _var02, #0
2bcac     08 00 00 FF 
2bcb0     00 80 16 F2 | 	cmp	_var01, ##4096 wc
2bcb4     36 85 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2bcb8     00 85 06 C1 |  if_b	add	_var03, #256
2bcbc     36 85 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2bcc0     01 00 00 3F 
2bcc4     F2 84 06 31 |  if_ae	add	_var03, ##754
2bcc8     42 87 02 F6 | 	mov	_var04, _var03
2bccc                 | ' 		uc = (WORD)uni;
2bccc                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2bccc                 | ' 		for (;;) {
2bccc                 | LR__4560
2bccc     43 89 E2 FA | 	rdword	_var05, _var04
2bcd0     44 85 02 F6 | 	mov	_var03, _var05
2bcd4     0F 84 4E F7 | 	zerox	_var03, #15 wz
2bcd8     02 86 06 F1 | 	add	_var04, #2
2bcdc     18 01 90 AD |  if_e	jmp	#LR__4572
2bce0     41 85 32 F9 | 	getword	_var03, _var02, #0
2bce4     44 81 32 F9 | 	getword	_var01, _var05, #0
2bce8     40 85 12 F2 | 	cmp	_var03, _var01 wc
2bcec     08 01 90 CD |  if_b	jmp	#LR__4572
2bcf0     43 8B E2 FA | 	rdword	_var06, _var04
2bcf4     45 8D 32 F9 | 	getword	_var07, _var06, #0
2bcf8     08 8C 46 F0 | 	shr	_var07, #8
2bcfc     45 8B 32 F9 | 	getword	_var06, _var06, #0
2bd00     45 8B E2 F8 | 	getbyte	_var06, _var06, #0
2bd04     41 85 32 F9 | 	getword	_var03, _var02, #0
2bd08     44 8F 32 F9 | 	getword	_var08, _var05, #0
2bd0c     45 81 32 F9 | 	getword	_var01, _var06, #0
2bd10     40 8F 02 F1 | 	add	_var08, _var01
2bd14     47 85 52 F2 | 	cmps	_var03, _var08 wc
2bd18     02 86 06 F1 | 	add	_var04, #2
2bd1c     C4 00 90 3D |  if_ae	jmp	#LR__4571
2bd20                 | ' 				switch (cmd) {
2bd20     46 91 32 F9 | 	getword	_var09, _var07, #0
2bd24     09 90 26 F3 | 	fle	_var09, #9
2bd28     30 90 62 FD | 	jmprel	_var09
2bd2c                 | LR__4561
2bd2c     24 00 90 FD | 	jmp	#LR__4562
2bd30     3C 00 90 FD | 	jmp	#LR__4563
2bd34     54 00 90 FD | 	jmp	#LR__4564
2bd38     5C 00 90 FD | 	jmp	#LR__4565
2bd3c     64 00 90 FD | 	jmp	#LR__4566
2bd40     6C 00 90 FD | 	jmp	#LR__4567
2bd44     74 00 90 FD | 	jmp	#LR__4568
2bd48     7C 00 90 FD | 	jmp	#LR__4569
2bd4c     84 00 90 FD | 	jmp	#LR__4570
2bd50     A4 00 90 FD | 	jmp	#LR__4572
2bd54                 | LR__4562
2bd54     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd58     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd5c     44 83 82 F1 | 	sub	_var02, _var05
2bd60     01 82 66 F0 | 	shl	_var02, #1
2bd64     43 83 02 F1 | 	add	_var02, _var04
2bd68     41 83 E2 FA | 	rdword	_var02, _var02
2bd6c     88 00 90 FD | 	jmp	#LR__4572
2bd70                 | LR__4563
2bd70     41 85 32 F9 | 	getword	_var03, _var02, #0
2bd74     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd78     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd7c     44 83 82 F1 | 	sub	_var02, _var05
2bd80     01 82 06 F5 | 	and	_var02, #1
2bd84     42 83 C2 F2 | 	subr	_var02, _var03
2bd88     6C 00 90 FD | 	jmp	#LR__4572
2bd8c                 | LR__4564
2bd8c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd90     10 82 86 F1 | 	sub	_var02, #16
2bd94     60 00 90 FD | 	jmp	#LR__4572
2bd98                 | LR__4565
2bd98     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd9c     20 82 86 F1 | 	sub	_var02, #32
2bda0     54 00 90 FD | 	jmp	#LR__4572
2bda4                 | LR__4566
2bda4     41 83 32 F9 | 	getword	_var02, _var02, #0
2bda8     30 82 86 F1 | 	sub	_var02, #48
2bdac     48 00 90 FD | 	jmp	#LR__4572
2bdb0                 | LR__4567
2bdb0     41 83 32 F9 | 	getword	_var02, _var02, #0
2bdb4     1A 82 86 F1 | 	sub	_var02, #26
2bdb8     3C 00 90 FD | 	jmp	#LR__4572
2bdbc                 | LR__4568
2bdbc     41 83 32 F9 | 	getword	_var02, _var02, #0
2bdc0     08 82 06 F1 | 	add	_var02, #8
2bdc4     30 00 90 FD | 	jmp	#LR__4572
2bdc8                 | LR__4569
2bdc8     41 83 32 F9 | 	getword	_var02, _var02, #0
2bdcc     50 82 86 F1 | 	sub	_var02, #80
2bdd0     24 00 90 FD | 	jmp	#LR__4572
2bdd4                 | LR__4570
2bdd4     41 83 32 F9 | 	getword	_var02, _var02, #0
2bdd8     0E 00 00 FF 
2bddc     60 82 86 F1 | 	sub	_var02, ##7264
2bde0                 | ' 				}
2bde0                 | ' 				break;
2bde0     14 00 90 FD | 	jmp	#LR__4572
2bde4                 | LR__4571
2bde4     0F 8C 4E F7 | 	zerox	_var07, #15 wz
2bde8     45 8B 32 A9 |  if_e	getword	_var06, _var06, #0
2bdec     01 8A 66 A0 |  if_e	shl	_var06, #1
2bdf0     45 87 02 A1 |  if_e	add	_var04, _var06
2bdf4     D4 FE 9F FD | 	jmp	#LR__4560
2bdf8                 | LR__4572
2bdf8     41 81 32 F9 | 	getword	_var01, _var02, #0
2bdfc                 | LR__4573
2bdfc                 | ' 		}
2bdfc                 | ' 		uni = uc;
2bdfc                 | ' 	}
2bdfc                 | ' 
2bdfc                 | ' 	return uni;
2bdfc     40 7B 02 F6 | 	mov	result1, _var01
2be00                 | _fatfs_cc_ff_wtoupper_ret
2be00     2D 00 64 FD | 	ret
2be04                 | 
2be04                 | _fatfs_cc_strncpy
2be04     49 81 02 F6 | 	mov	_var01, arg01
2be08     D7 18 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2be0c                 | ' 
2be0c                 | ' 	dscan = dst;
2be0c                 | ' 	sscan = src;
2be0c                 | ' 	count = n;
2be0c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2be0c                 | LR__4580
2be0c     01 96 86 F1 | 	sub	arg03, #1
2be10     00 96 56 F2 | 	cmps	arg03, #0 wc
2be14     24 00 90 CD |  if_b	jmp	#LR__4582
2be18     4A 7B 02 F6 | 	mov	result1, arg02
2be1c     01 7A 06 F1 | 	add	result1, #1
2be20     4A 83 C2 FA | 	rdbyte	_var02, arg02
2be24     3D 95 02 F6 | 	mov	arg02, result1
2be28     40 83 42 FC | 	wrbyte	_var02, _var01
2be2c     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
2be30     07 82 4E F7 | 	zerox	_var02, #7 wz
2be34                 | ' 		continue;
2be34     01 80 06 F1 | 	add	_var01, #1
2be38     D0 FF 9F 5D |  if_ne	jmp	#LR__4580
2be3c                 | LR__4581
2be3c                 | LR__4582
2be3c     D7 0C 48 FB | 	callpa	#(@LR__4584-@LR__4583)>>2,fcache_load_ptr_
2be40                 | ' 	while (--count >= 0)
2be40                 | LR__4583
2be40     01 96 86 F1 | 	sub	arg03, #1
2be44     00 96 56 F2 | 	cmps	arg03, #0 wc
2be48     40 85 02 36 |  if_ae	mov	_var03, _var01
2be4c     01 80 06 31 |  if_ae	add	_var01, #1
2be50     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2be54     E8 FF 9F 3D |  if_ae	jmp	#LR__4583
2be58                 | LR__4584
2be58                 | ' 		*dscan++ = '\0';
2be58                 | ' 	return(dst);
2be58     49 7B 02 F6 | 	mov	result1, arg01
2be5c                 | _fatfs_cc_strncpy_ret
2be5c     2D 00 64 FD | 	ret
2be60                 | 
2be60                 | _fatfs_cc_memcmp
2be60                 | ' 	for (n = size; n > 0; n--)
2be60     00 96 0E F2 | 	cmp	arg03, #0 wz
2be64     28 00 90 AD |  if_e	jmp	#LR__4591
2be68                 | LR__4590
2be68     49 81 C2 FA | 	rdbyte	_var01, arg01
2be6c     4A 83 C2 FA | 	rdbyte	_var02, arg02
2be70     41 81 0A F2 | 	cmp	_var01, _var02 wz
2be74     01 92 06 A1 |  if_e	add	arg01, #1
2be78     01 94 06 A1 |  if_e	add	arg02, #1
2be7c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2be7c     49 7B C2 5A |  if_ne	rdbyte	result1, arg01
2be80     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2be84     41 7B 82 51 |  if_ne	sub	result1, _var02
2be88     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2be8c     F6 97 6E FB | 	djnz	arg03, #LR__4590
2be90                 | LR__4591
2be90                 | ' 
2be90                 | ' 	return(0);
2be90     00 7A 06 F6 | 	mov	result1, #0
2be94                 | _fatfs_cc_memcmp_ret
2be94     2D 00 64 FD | 	ret
2be98                 | 
2be98                 | _fatfs_cc_strncmp
2be98     49 81 0A F6 | 	mov	_var01, arg01 wz
2be9c     14 00 90 5D |  if_ne	jmp	#LR__4600
2bea0                 | ' 		return scan2 ? -1 : 0;
2bea0     00 94 0E F2 | 	cmp	arg02, #0 wz
2bea4     01 82 66 56 |  if_ne	neg	_var02, #1
2bea8     00 82 06 A6 |  if_e	mov	_var02, #0
2beac     41 7B 02 F6 | 	mov	result1, _var02
2beb0     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2beb4                 | LR__4600
2beb4     00 94 0E F2 | 	cmp	arg02, #0 wz
2beb8     01 7A 06 A6 |  if_e	mov	result1, #1
2bebc     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bec0     4B 85 02 F6 | 	mov	_var03, arg03
2bec4     D7 16 48 FB | 	callpa	#(@LR__4602-@LR__4601)>>2,fcache_load_ptr_
2bec8                 | ' 	count = n;
2bec8                 | ' 	do {
2bec8                 | LR__4601
2bec8     40 87 C2 FA | 	rdbyte	_var04, _var01
2becc     4A 89 02 F6 | 	mov	_var05, arg02
2bed0     44 8B C2 FA | 	rdbyte	_var06, _var05
2bed4     01 84 86 F1 | 	sub	_var03, #1
2bed8     00 84 56 F2 | 	cmps	_var03, #0 wc
2bedc     01 80 06 F1 | 	add	_var01, #1
2bee0     01 94 06 F1 | 	add	arg02, #1
2bee4     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2bee8     08 00 90 2D |  if_nc_and_z	jmp	#LR__4603
2beec     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bef0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4601
2bef4                 | LR__4602
2bef4                 | LR__4603
2bef4     00 84 56 F2 | 	cmps	_var03, #0 wc
2bef8                 | ' 		return(0);
2bef8     00 7A 06 C6 |  if_b	mov	result1, #0
2befc     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2bf00     45 87 0A F2 | 	cmp	_var04, _var06 wz
2bf04                 | ' 		return(0);
2bf04     00 7A 06 A6 |  if_e	mov	result1, #0
2bf08     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bf0c     00 86 0E F2 | 	cmp	_var04, #0 wz
2bf10                 | ' 		return(-1);
2bf10     01 7A 66 A6 |  if_e	neg	result1, #1
2bf14     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bf18     00 8A 0E F2 | 	cmp	_var06, #0 wz
2bf1c                 | ' 		return(1);
2bf1c     01 7A 06 A6 |  if_e	mov	result1, #1
2bf20                 | ' 		return(c1 - c2);
2bf20     43 7B 02 56 |  if_ne	mov	result1, _var04
2bf24     45 7B 82 51 |  if_ne	sub	result1, _var06
2bf28                 | _fatfs_cc_strncmp_ret
2bf28     2D 00 64 FD | 	ret
2bf2c                 | 
2bf2c                 | _fatfs_cc_strchr
2bf2c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/libc/string/strchr.c"
2bf2c                 | ' 	while ((c = *s++) != (char) charwanted)
2bf2c                 | LR__4610
2bf2c     49 81 02 F6 | 	mov	_var01, arg01
2bf30     40 83 C2 FA | 	rdbyte	_var02, _var01
2bf34     41 85 E2 F8 | 	getbyte	_var03, _var02, #0
2bf38     4A 87 E2 F8 | 	getbyte	_var04, arg02, #0
2bf3c     43 85 0A F2 | 	cmp	_var03, _var04 wz
2bf40     01 92 06 F1 | 	add	arg01, #1
2bf44     14 00 90 AD |  if_e	jmp	#LR__4611
2bf48     41 85 02 F6 | 	mov	_var03, _var02
2bf4c     07 84 4E F7 | 	zerox	_var03, #7 wz
2bf50     00 7A 06 A6 |  if_e	mov	result1, #0
2bf54     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2bf58     D0 FF 9F FD | 	jmp	#LR__4610
2bf5c                 | LR__4611
2bf5c                 | ' 	return((char *)--s);
2bf5c     01 92 86 F1 | 	sub	arg01, #1
2bf60     49 7B 02 F6 | 	mov	result1, arg01
2bf64                 | _fatfs_cc_strchr_ret
2bf64     2D 00 64 FD | 	ret
2bf68                 | 
2bf68                 | _fatfs_cc_time
2bf68     01 CA 05 F6 | 	mov	COUNT_, #1
2bf6c     E8 00 A0 FD | 	call	#pushregs_
2bf70     14 F0 07 F1 | 	add	ptra, #20
2bf74     49 A7 02 F6 | 	mov	local01, arg01
2bf78     E7 92 02 F6 | 	mov	arg01, fp
2bf7c     08 92 06 F1 | 	add	arg01, #8
2bf80     00 94 06 F6 | 	mov	arg02, #0
2bf84     A0 5E B0 FD | 	call	#_fatfs_cc_gettimeofday
2bf88     08 CE 05 F1 | 	add	fp, #8
2bf8c     E7 7A 02 FB | 	rdlong	result1, fp
2bf90     08 CE 85 F1 | 	sub	fp, #8
2bf94     00 A6 0E F2 | 	cmp	local01, #0 wz
2bf98     53 7B 62 5C |  if_ne	wrlong	result1, local01
2bf9c                 | '         *tp = now;
2bf9c                 | '     return now;
2bf9c     E7 F0 03 F6 | 	mov	ptra, fp
2bfa0     F2 00 A0 FD | 	call	#popregs_
2bfa4                 | _fatfs_cc_time_ret
2bfa4     2D 00 64 FD | 	ret
2bfa8                 | 
2bfa8                 | _fatfs_cc_mktime
2bfa8     06 CA 05 F6 | 	mov	COUNT_, #6
2bfac     E8 00 A0 FD | 	call	#pushregs_
2bfb0     49 A7 02 F6 | 	mov	local01, arg01
2bfb4     14 A6 06 F1 | 	add	local01, #20
2bfb8     53 93 02 FB | 	rdlong	arg01, local01
2bfbc     14 A6 86 F1 | 	sub	local01, #20
2bfc0     46 92 56 F2 | 	cmps	arg01, #70 wc
2bfc4                 | '                 return (time_t) -1;
2bfc4     01 7A 66 C6 |  if_b	neg	result1, #1
2bfc8     78 01 90 CD |  if_b	jmp	#LR__4624
2bfcc     03 00 00 FF 
2bfd0     6C A9 06 F6 | 	mov	local02, ##1900
2bfd4     14 A6 06 F1 | 	add	local01, #20
2bfd8     53 7B 02 FB | 	rdlong	result1, local01
2bfdc     3D A9 02 F1 | 	add	local02, result1
2bfe0     08 A6 86 F1 | 	sub	local01, #8
2bfe4     53 AB 02 FB | 	rdlong	local03, local01
2bfe8     01 AA 86 F1 | 	sub	local03, #1
2bfec     04 A6 06 F1 | 	add	local01, #4
2bff0     53 93 02 FB | 	rdlong	arg01, local01
2bff4     10 A6 86 F1 | 	sub	local01, #16
2bff8     02 92 66 F0 | 	shl	arg01, #2
2bffc     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c000     02 00 00 FF 
2c004     78 7A 06 F1 | 	add	result1, ##1144
2c008     3D 93 02 F1 | 	add	arg01, result1
2c00c     49 7B 02 FB | 	rdlong	result1, arg01
2c010     3D AB 02 F1 | 	add	local03, result1
2c014     54 93 02 F6 | 	mov	arg01, local02
2c018     B4 5E B0 FD | 	call	#_fatfs_cc__is_leap_year
2c01c     00 7A 0E F2 | 	cmp	result1, #0 wz
2c020     1C 00 90 AD |  if_e	jmp	#LR__4620
2c024     00 AC 06 F6 | 	mov	local04, #0
2c028     10 A6 06 F1 | 	add	local01, #16
2c02c     53 7B 02 FB | 	rdlong	result1, local01
2c030     10 A6 86 F1 | 	sub	local01, #16
2c034     02 7A 56 F2 | 	cmps	result1, #2 wc
2c038     01 AC 06 36 |  if_ae	mov	local04, #1
2c03c     04 00 90 FD | 	jmp	#LR__4621
2c040                 | LR__4620
2c040     00 AC 06 F6 | 	mov	local04, #0
2c044                 | LR__4621
2c044     04 A6 06 F1 | 	add	local01, #4
2c048     53 93 02 FB | 	rdlong	arg01, local01
2c04c     04 A6 86 F1 | 	sub	local01, #4
2c050     53 AF 02 FB | 	rdlong	local05, local01
2c054     08 A6 06 F1 | 	add	local01, #8
2c058     53 7B 02 FB | 	rdlong	result1, local01
2c05c     07 00 00 FF 
2c060     10 7A 06 FD | 	qmul	result1, ##3600
2c064     56 AB 02 F1 | 	add	local03, local04
2c068     49 AD 02 F6 | 	mov	local04, arg01
2c06c     04 AC 66 F0 | 	shl	local04, #4
2c070     49 AD 82 F1 | 	sub	local04, arg01
2c074     02 AC 66 F0 | 	shl	local04, #2
2c078     56 AF 02 F1 | 	add	local05, local04
2c07c     08 A6 86 F1 | 	sub	local01, #8
2c080     18 AC 62 FD | 	getqx	local04
2c084     A8 00 00 FF 
2c088     80 AB 06 FD | 	qmul	local03, ##86400
2c08c     56 AF 02 F1 | 	add	local05, local04
2c090     54 AB 02 F6 | 	mov	local03, local02
2c094     03 00 00 FF 
2c098     B2 AB 86 F1 | 	sub	local03, ##1970
2c09c     18 AC 62 FD | 	getqx	local04
2c0a0     99 F0 00 FF 
2c0a4     80 AB 06 FD | 	qmul	local03, ##31536000
2c0a8     56 AF 02 F1 | 	add	local05, local04
2c0ac     54 AB 02 F6 | 	mov	local03, local02
2c0b0     03 00 00 FF 
2c0b4     B1 AB 86 F1 | 	sub	local03, ##1969
2c0b8     55 B1 52 F6 | 	abs	local06, local03 wc
2c0bc     02 B0 46 F0 | 	shr	local06, #2
2c0c0     58 B1 82 F6 | 	negc	local06, local06
2c0c4     03 00 00 FF 
2c0c8     D1 A9 56 F2 | 	cmps	local02, ##2001 wc
2c0cc     18 AC 62 FD | 	getqx	local04
2c0d0     56 AF 02 F1 | 	add	local05, local04
2c0d4     18 00 90 CD |  if_b	jmp	#LR__4622
2c0d8     03 00 00 FF 
2c0dc     D0 A9 86 F1 | 	sub	local02, ##2000
2c0e0     54 AD 52 F6 | 	abs	local04, local02 wc
2c0e4     64 AC 16 FD | 	qdiv	local04, #100
2c0e8     18 AC 62 FD | 	getqx	local04
2c0ec     56 B1 A2 F3 | 	sumnc	local06, local04
2c0f0                 | LR__4622
2c0f0     A8 00 00 FF 
2c0f4     80 B1 06 FD | 	qmul	local06, ##86400
2c0f8     18 B0 62 FD | 	getqx	local06
2c0fc     58 AF 02 F1 | 	add	local05, local06
2c100     E8 01 B0 FD | 	call	#_fatfs_cc__tzset
2c104     02 00 00 FF 
2c108     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c10c     36 B1 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c110     58 AF 02 F1 | 	add	local05, local06
2c114     68 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c118     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c11c     02 00 00 FF 
2c120     AC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2c124     01 AA 0E F2 | 	cmp	local03, #1 wz
2c128     14 00 90 5D |  if_ne	jmp	#LR__4623
2c12c     53 93 02 F6 | 	mov	arg01, local01
2c130     88 60 B0 FD | 	call	#_fatfs_cc___indst
2c134     00 7A 0E F2 | 	cmp	result1, #0 wz
2c138     07 00 00 5F 
2c13c     10 AE 86 51 |  if_ne	sub	local05, ##3600
2c140                 | LR__4623
2c140                 | '                 s -=  (3600L) ;
2c140                 | ' 
2c140                 | '         return s;
2c140     57 7B 02 F6 | 	mov	result1, local05
2c144                 | LR__4624
2c144     E7 F0 03 F6 | 	mov	ptra, fp
2c148     F2 00 A0 FD | 	call	#popregs_
2c14c                 | _fatfs_cc_mktime_ret
2c14c     2D 00 64 FD | 	ret
2c150                 | 
2c150                 | _fatfs_cc__gmtime_r
2c150     03 CA 05 F6 | 	mov	COUNT_, #3
2c154     E8 00 A0 FD | 	call	#pushregs_
2c158     49 A7 02 FB | 	rdlong	local01, arg01
2c15c     A8 00 00 FF 
2c160     80 A7 16 FD | 	qdiv	local01, ##86400
2c164     18 7A 62 FD | 	getqx	result1
2c168     04 7A 06 F1 | 	add	result1, #4
2c16c     07 7A 16 FD | 	qdiv	result1, #7
2c170     18 94 06 F1 | 	add	arg02, #24
2c174     D1 7F 27 FF 
2c178     00 A6 16 F2 | 	cmp	local01, ##1325376000 wc
2c17c     D1 7F 27 3F 
2c180     00 A6 86 31 |  if_ae	sub	local01, ##1325376000
2c184     03 00 00 3F 
2c188     DC A9 06 36 |  if_ae	mov	local02, ##2012
2c18c     03 00 00 CF 
2c190     B2 A9 06 C6 |  if_b	mov	local02, ##1970
2c194                 | ' 	  year = 1970;
2c194                 | ' 	}
2c194                 | ' 
2c194                 | ' 	for(;;) {
2c194     19 7A 62 FD | 	getqy	result1
2c198     4A 7B 62 FC | 	wrlong	result1, arg02
2c19c     18 94 86 F1 | 	sub	arg02, #24
2c1a0                 | LR__4630
2c1a0     54 93 02 F6 | 	mov	arg01, local02
2c1a4     28 5D B0 FD | 	call	#_fatfs_cc__is_leap_year
2c1a8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c1ac     42 F1 00 5F 
2c1b0     00 AB 06 56 |  if_ne	mov	local03, ##31622400
2c1b4     99 F0 00 AF 
2c1b8     80 AB 06 A6 |  if_e	mov	local03, ##31536000
2c1bc     55 A7 12 F2 | 	cmp	local01, local03 wc
2c1c0                 | ' 	    break;
2c1c0     01 A8 06 31 |  if_ae	add	local02, #1
2c1c4     55 A7 82 31 |  if_ae	sub	local01, local03
2c1c8     D4 FF 9F 3D |  if_ae	jmp	#LR__4630
2c1cc     A8 00 00 FF 
2c1d0     80 A7 16 FD | 	qdiv	local01, ##86400
2c1d4     54 AB 02 F6 | 	mov	local03, local02
2c1d8     03 00 00 FF 
2c1dc     6C AB 86 F1 | 	sub	local03, ##1900
2c1e0     14 94 06 F1 | 	add	arg02, #20
2c1e4     4A AB 62 FC | 	wrlong	local03, arg02
2c1e8     08 94 06 F1 | 	add	arg02, #8
2c1ec     54 93 02 F6 | 	mov	arg01, local02
2c1f0     18 A8 62 FD | 	getqx	local02
2c1f4     4A A9 62 FC | 	wrlong	local02, arg02
2c1f8     1C 94 86 F1 | 	sub	arg02, #28
2c1fc     D0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2c200     00 7A 0E F2 | 	cmp	result1, #0 wz
2c204     1D AA 06 56 |  if_ne	mov	local03, #29
2c208     1C AA 06 A6 |  if_e	mov	local03, #28
2c20c     02 00 00 FF 
2c210     4C 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2c214     36 AB 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c218     02 00 00 FF 
2c21c     4C 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2c220                 | ' 
2c220                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c220                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c220     00 92 06 F6 | 	mov	arg01, #0
2c224     D7 26 48 FB | 	callpa	#(@LR__4632-@LR__4631)>>2,fcache_load_ptr_
2c228                 | LR__4631
2c228     49 AB 02 F6 | 	mov	local03, arg01
2c22c     02 AA 66 F0 | 	shl	local03, #2
2c230     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c234     02 00 00 FF 
2c238     48 7A 06 F1 | 	add	result1, ##1096
2c23c     3D AB 02 F1 | 	add	local03, result1
2c240     55 AB 02 FB | 	rdlong	local03, local03
2c244     55 A9 52 F2 | 	cmps	local02, local03 wc
2c248     28 00 90 CD |  if_b	jmp	#LR__4633
2c24c     49 7B 02 F6 | 	mov	result1, arg01
2c250     02 7A 66 F0 | 	shl	result1, #2
2c254     36 AB 02 F6 | 	mov	local03, ptr__fatfs_cc_dat__
2c258     02 00 00 FF 
2c25c     48 AA 06 F1 | 	add	local03, ##1096
2c260     55 7B 02 F1 | 	add	result1, local03
2c264     3D 7B 02 FB | 	rdlong	result1, result1
2c268     3D A9 82 F1 | 	sub	local02, result1
2c26c     01 92 06 F1 | 	add	arg01, #1
2c270     B4 FF 9F FD | 	jmp	#LR__4631
2c274                 | LR__4632
2c274                 | LR__4633
2c274     A8 00 00 FF 
2c278     80 A7 16 FD | 	qdiv	local01, ##86400
2c27c     10 94 06 F1 | 	add	arg02, #16
2c280     4A 93 62 FC | 	wrlong	arg01, arg02
2c284     01 A8 06 F1 | 	add	local02, #1
2c288     04 94 86 F1 | 	sub	arg02, #4
2c28c     4A A9 62 FC | 	wrlong	local02, arg02
2c290     19 A6 62 FD | 	getqy	local01
2c294     07 00 00 FF 
2c298     10 A6 16 FD | 	qdiv	local01, ##3600
2c29c     18 AA 62 FD | 	getqx	local03
2c2a0     07 00 00 FF 
2c2a4     10 A6 16 FD | 	qdiv	local01, ##3600
2c2a8     04 94 86 F1 | 	sub	arg02, #4
2c2ac     4A AB 62 FC | 	wrlong	local03, arg02
2c2b0     19 A6 62 FD | 	getqy	local01
2c2b4     3C A6 16 FD | 	qdiv	local01, #60
2c2b8     18 AA 62 FD | 	getqx	local03
2c2bc     3C A6 16 FD | 	qdiv	local01, #60
2c2c0     04 94 86 F1 | 	sub	arg02, #4
2c2c4     4A AB 62 FC | 	wrlong	local03, arg02
2c2c8     04 94 86 F1 | 	sub	arg02, #4
2c2cc                 | '         stm->tm_isdst = 0;
2c2cc                 | ' 
2c2cc                 | ' ;
2c2cc                 | '         return stm;
2c2cc     4A 7B 02 F6 | 	mov	result1, arg02
2c2d0     19 AA 62 FD | 	getqy	local03
2c2d4     4A AB 62 FC | 	wrlong	local03, arg02
2c2d8     20 94 06 F1 | 	add	arg02, #32
2c2dc     4A 01 68 FC | 	wrlong	#0, arg02
2c2e0     E7 F0 03 F6 | 	mov	ptra, fp
2c2e4     F2 00 A0 FD | 	call	#popregs_
2c2e8                 | _fatfs_cc__gmtime_r_ret
2c2e8     2D 00 64 FD | 	ret
2c2ec                 | 
2c2ec                 | _fatfs_cc__tzset
2c2ec     92 01 00 FF 
2c2f0     48 93 06 F6 | 	mov	arg01, ##@LR__5482
2c2f4     0C 50 B0 FD | 	call	#_fatfs_cc_getenv
2c2f8     3D 93 02 F6 | 	mov	arg01, result1
2c2fc     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c300     02 00 00 FF 
2c304     AC 94 06 F1 | 	add	arg02, ##1196
2c308     14 5C B0 FD | 	call	#_fatfs_cc___tzoffset
2c30c     02 00 00 FF 
2c310     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c314     36 7B 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c318     02 00 00 FF 
2c31c     44 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2c320                 | _fatfs_cc__tzset_ret
2c320     2D 00 64 FD | 	ret
2c324                 | 
2c324                 | _fatfs_cc_disk_read
2c324     09 CA 05 F6 | 	mov	COUNT_, #9
2c328     E8 00 A0 FD | 	call	#pushregs_
2c32c     4A AF 02 F6 | 	mov	local05, arg02
2c330     4C B1 02 F6 | 	mov	local06, arg04
2c334     4B 93 02 F6 | 	mov	arg01, arg03
2c338     00 94 06 F6 | 	mov	arg02, #0
2c33c     09 96 06 F6 | 	mov	arg03, #9
2c340     00 98 06 F6 | 	mov	arg04, #0
2c344     94 A8 BF FD | 	call	#__system___int64_shl
2c348     3D A7 02 F6 | 	mov	local01, result1
2c34c     3E A9 02 F6 | 	mov	local02, result2
2c350     01 00 00 FF 
2c354     10 64 06 F1 | 	add	objptr, ##528
2c358     32 7D 0A FB | 	rdlong	result2, objptr wz
2c35c     01 00 00 FF 
2c360     10 64 86 F1 | 	sub	objptr, ##528
2c364                 | '         return RES_NOTRDY;
2c364     03 7A 06 A6 |  if_e	mov	result1, #3
2c368     E8 00 90 AD |  if_e	jmp	#LR__4640
2c36c     53 95 02 F6 | 	mov	arg02, local01
2c370     54 97 02 F6 | 	mov	arg03, local02
2c374     01 00 00 FF 
2c378     10 64 06 F1 | 	add	objptr, ##528
2c37c     32 93 02 FB | 	rdlong	arg01, objptr
2c380     49 99 02 F6 | 	mov	arg04, arg01
2c384     30 98 06 F1 | 	add	arg04, #48
2c388     4C B3 02 FB | 	rdlong	local07, arg04
2c38c     59 B5 02 F6 | 	mov	local08, local07
2c390     13 B2 46 F7 | 	zerox	local07, #19
2c394     14 B4 46 F0 | 	shr	local08, #20
2c398     02 B4 66 F0 | 	shl	local08, #2
2c39c     2D B5 02 F1 | 	add	local08, __methods__
2c3a0     5A B5 02 FB | 	rdlong	local08, local08
2c3a4     01 00 00 FF 
2c3a8     10 64 86 F1 | 	sub	objptr, ##528
2c3ac     00 98 06 F6 | 	mov	arg04, #0
2c3b0     32 B7 02 F6 | 	mov	local09, objptr
2c3b4     59 65 02 F6 | 	mov	objptr, local07
2c3b8     2D B4 62 FD | 	call	local08
2c3bc     5B 65 02 F6 | 	mov	objptr, local09
2c3c0     3D AB 02 F6 | 	mov	local03, result1
2c3c4     3E AD 02 F6 | 	mov	local04, result2
2c3c8     55 93 02 F6 | 	mov	arg01, local03
2c3cc     56 95 02 F6 | 	mov	arg02, local04
2c3d0     53 97 02 F6 | 	mov	arg03, local01
2c3d4     54 99 02 F6 | 	mov	arg04, local02
2c3d8     00 7A 06 F6 | 	mov	result1, #0
2c3dc     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c3e0     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c3e4     01 7A 86 56 |  if_ne	negc	result1, #1
2c3e8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c3ec                 | '         return RES_ERROR;
2c3ec     01 7A 06 56 |  if_ne	mov	result1, #1
2c3f0     60 00 90 5D |  if_ne	jmp	#LR__4640
2c3f4     09 B0 66 F0 | 	shl	local06, #9
2c3f8     01 00 00 FF 
2c3fc     10 64 06 F1 | 	add	objptr, ##528
2c400     32 93 02 FB | 	rdlong	arg01, objptr
2c404     49 AB 02 F6 | 	mov	local03, arg01
2c408     14 AA 06 F1 | 	add	local03, #20
2c40c     55 AB 02 FB | 	rdlong	local03, local03
2c410     55 B7 02 F6 | 	mov	local09, local03
2c414     13 B6 46 F7 | 	zerox	local09, #19
2c418     14 AA 46 F0 | 	shr	local03, #20
2c41c     02 AA 66 F0 | 	shl	local03, #2
2c420     2D AB 02 F1 | 	add	local03, __methods__
2c424     55 AB 02 FB | 	rdlong	local03, local03
2c428     01 00 00 FF 
2c42c     10 64 86 F1 | 	sub	objptr, ##528
2c430     57 95 02 F6 | 	mov	arg02, local05
2c434     58 97 02 F6 | 	mov	arg03, local06
2c438     32 B5 02 F6 | 	mov	local08, objptr
2c43c     5B 65 02 F6 | 	mov	objptr, local09
2c440     2D AA 62 FD | 	call	local03
2c444     5A 65 02 F6 | 	mov	objptr, local08
2c448     58 7B 0A F2 | 	cmp	result1, local06 wz
2c44c                 | '         return RES_ERROR;
2c44c     01 7A 06 56 |  if_ne	mov	result1, #1
2c450                 | '     }
2c450                 | '     return RES_OK;
2c450     00 7A 06 A6 |  if_e	mov	result1, #0
2c454                 | LR__4640
2c454     E7 F0 03 F6 | 	mov	ptra, fp
2c458     F2 00 A0 FD | 	call	#popregs_
2c45c                 | _fatfs_cc_disk_read_ret
2c45c     2D 00 64 FD | 	ret
2c460                 | 
2c460                 | _fatfs_cc_disk_write
2c460     09 CA 05 F6 | 	mov	COUNT_, #9
2c464     E8 00 A0 FD | 	call	#pushregs_
2c468     4A AF 02 F6 | 	mov	local05, arg02
2c46c     4C B1 02 F6 | 	mov	local06, arg04
2c470     4B 93 02 F6 | 	mov	arg01, arg03
2c474     00 94 06 F6 | 	mov	arg02, #0
2c478     09 96 06 F6 | 	mov	arg03, #9
2c47c     00 98 06 F6 | 	mov	arg04, #0
2c480     58 A7 BF FD | 	call	#__system___int64_shl
2c484     3D A7 02 F6 | 	mov	local01, result1
2c488     3E A9 02 F6 | 	mov	local02, result2
2c48c     01 00 00 FF 
2c490     10 64 06 F1 | 	add	objptr, ##528
2c494     32 7D 0A FB | 	rdlong	result2, objptr wz
2c498     01 00 00 FF 
2c49c     10 64 86 F1 | 	sub	objptr, ##528
2c4a0                 | '         return RES_NOTRDY;
2c4a0     03 7A 06 A6 |  if_e	mov	result1, #3
2c4a4     E8 00 90 AD |  if_e	jmp	#LR__4650
2c4a8     53 95 02 F6 | 	mov	arg02, local01
2c4ac     54 97 02 F6 | 	mov	arg03, local02
2c4b0     01 00 00 FF 
2c4b4     10 64 06 F1 | 	add	objptr, ##528
2c4b8     32 93 02 FB | 	rdlong	arg01, objptr
2c4bc     49 99 02 F6 | 	mov	arg04, arg01
2c4c0     30 98 06 F1 | 	add	arg04, #48
2c4c4     4C B3 02 FB | 	rdlong	local07, arg04
2c4c8     59 B5 02 F6 | 	mov	local08, local07
2c4cc     13 B2 46 F7 | 	zerox	local07, #19
2c4d0     14 B4 46 F0 | 	shr	local08, #20
2c4d4     02 B4 66 F0 | 	shl	local08, #2
2c4d8     2D B5 02 F1 | 	add	local08, __methods__
2c4dc     5A B5 02 FB | 	rdlong	local08, local08
2c4e0     01 00 00 FF 
2c4e4     10 64 86 F1 | 	sub	objptr, ##528
2c4e8     00 98 06 F6 | 	mov	arg04, #0
2c4ec     32 B7 02 F6 | 	mov	local09, objptr
2c4f0     59 65 02 F6 | 	mov	objptr, local07
2c4f4     2D B4 62 FD | 	call	local08
2c4f8     5B 65 02 F6 | 	mov	objptr, local09
2c4fc     3D AB 02 F6 | 	mov	local03, result1
2c500     3E AD 02 F6 | 	mov	local04, result2
2c504     55 93 02 F6 | 	mov	arg01, local03
2c508     56 95 02 F6 | 	mov	arg02, local04
2c50c     53 97 02 F6 | 	mov	arg03, local01
2c510     54 99 02 F6 | 	mov	arg04, local02
2c514     00 7A 06 F6 | 	mov	result1, #0
2c518     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c51c     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c520     01 7A 86 56 |  if_ne	negc	result1, #1
2c524     00 7A 0E F2 | 	cmp	result1, #0 wz
2c528                 | '         return RES_ERROR;
2c528     01 7A 06 56 |  if_ne	mov	result1, #1
2c52c     60 00 90 5D |  if_ne	jmp	#LR__4650
2c530     09 B0 66 F0 | 	shl	local06, #9
2c534     01 00 00 FF 
2c538     10 64 06 F1 | 	add	objptr, ##528
2c53c     32 93 02 FB | 	rdlong	arg01, objptr
2c540     49 AB 02 F6 | 	mov	local03, arg01
2c544     18 AA 06 F1 | 	add	local03, #24
2c548     55 AB 02 FB | 	rdlong	local03, local03
2c54c     55 B7 02 F6 | 	mov	local09, local03
2c550     13 B6 46 F7 | 	zerox	local09, #19
2c554     14 AA 46 F0 | 	shr	local03, #20
2c558     02 AA 66 F0 | 	shl	local03, #2
2c55c     2D AB 02 F1 | 	add	local03, __methods__
2c560     55 AB 02 FB | 	rdlong	local03, local03
2c564     01 00 00 FF 
2c568     10 64 86 F1 | 	sub	objptr, ##528
2c56c     57 95 02 F6 | 	mov	arg02, local05
2c570     58 97 02 F6 | 	mov	arg03, local06
2c574     32 B5 02 F6 | 	mov	local08, objptr
2c578     5B 65 02 F6 | 	mov	objptr, local09
2c57c     2D AA 62 FD | 	call	local03
2c580     5A 65 02 F6 | 	mov	objptr, local08
2c584     58 7B 0A F2 | 	cmp	result1, local06 wz
2c588                 | '         return RES_ERROR;
2c588     01 7A 06 56 |  if_ne	mov	result1, #1
2c58c                 | '     }
2c58c                 | '     return RES_OK;
2c58c     00 7A 06 A6 |  if_e	mov	result1, #0
2c590                 | LR__4650
2c590     E7 F0 03 F6 | 	mov	ptra, fp
2c594     F2 00 A0 FD | 	call	#popregs_
2c598                 | _fatfs_cc_disk_write_ret
2c598     2D 00 64 FD | 	ret
2c59c                 | 
2c59c                 | _fatfs_cc_disk_ioctl
2c59c     03 CA 05 F6 | 	mov	COUNT_, #3
2c5a0     E8 00 A0 FD | 	call	#pushregs_
2c5a4     01 00 00 FF 
2c5a8     10 64 06 F1 | 	add	objptr, ##528
2c5ac     32 93 0A FB | 	rdlong	arg01, objptr wz
2c5b0     01 00 00 FF 
2c5b4     10 64 86 F1 | 	sub	objptr, ##528
2c5b8                 | '         return RES_NOTRDY;
2c5b8     03 7A 06 A6 |  if_e	mov	result1, #3
2c5bc     58 00 90 AD |  if_e	jmp	#LR__4660
2c5c0     01 00 00 FF 
2c5c4     10 64 06 F1 | 	add	objptr, ##528
2c5c8     32 93 02 FB | 	rdlong	arg01, objptr
2c5cc     49 A7 02 F6 | 	mov	local01, arg01
2c5d0     28 A6 06 F1 | 	add	local01, #40
2c5d4     53 A7 02 FB | 	rdlong	local01, local01
2c5d8     53 A9 02 F6 | 	mov	local02, local01
2c5dc     13 A8 46 F7 | 	zerox	local02, #19
2c5e0     14 A6 46 F0 | 	shr	local01, #20
2c5e4     02 A6 66 F0 | 	shl	local01, #2
2c5e8     2D A7 02 F1 | 	add	local01, __methods__
2c5ec     53 A7 02 FB | 	rdlong	local01, local01
2c5f0     01 00 00 FF 
2c5f4     10 64 86 F1 | 	sub	objptr, ##528
2c5f8     4A 95 E2 F8 | 	getbyte	arg02, arg02, #0
2c5fc     32 AB 02 F6 | 	mov	local03, objptr
2c600     54 65 02 F6 | 	mov	objptr, local02
2c604     2D A6 62 FD | 	call	local01
2c608     55 65 02 F6 | 	mov	objptr, local03
2c60c     00 7A 0E F2 | 	cmp	result1, #0 wz
2c610                 | '         return RES_ERROR;
2c610     01 7A 06 56 |  if_ne	mov	result1, #1
2c614                 | '     return RES_OK;
2c614     00 7A 06 A6 |  if_e	mov	result1, #0
2c618                 | LR__4660
2c618     E7 F0 03 F6 | 	mov	ptra, fp
2c61c     F2 00 A0 FD | 	call	#popregs_
2c620                 | _fatfs_cc_disk_ioctl_ret
2c620     2D 00 64 FD | 	ret
2c624                 | 
2c624                 | _fatfs_cc_tchar2uni
2c624     49 81 02 FB | 	rdlong	_var01, arg01
2c628     40 83 02 F6 | 	mov	_var02, _var01
2c62c     01 80 06 F1 | 	add	_var01, #1
2c630     40 85 02 F6 | 	mov	_var03, _var01
2c634     41 87 C2 FA | 	rdbyte	_var04, _var02
2c638     80 86 CE F7 | 	test	_var04, #128 wz
2c63c     E8 00 90 AD |  if_e	jmp	#LR__4677
2c640     43 89 02 F6 | 	mov	_var05, _var04
2c644     E0 88 06 F5 | 	and	_var05, #224
2c648     C0 88 0E F2 | 	cmp	_var05, #192 wz
2c64c     1F 86 06 A5 |  if_e	and	_var04, #31
2c650     01 8A 06 A6 |  if_e	mov	_var06, #1
2c654     34 00 90 AD |  if_e	jmp	#LR__4671
2c658     43 89 02 F6 | 	mov	_var05, _var04
2c65c     F0 88 06 F5 | 	and	_var05, #240
2c660     E0 88 0E F2 | 	cmp	_var05, #224 wz
2c664     43 87 42 A8 |  if_e	getnib	_var04, _var04, #0
2c668     02 8A 06 A6 |  if_e	mov	_var06, #2
2c66c     1C 00 90 AD |  if_e	jmp	#LR__4670
2c670     43 89 02 F6 | 	mov	_var05, _var04
2c674     F8 88 06 F5 | 	and	_var05, #248
2c678     F0 88 0E F2 | 	cmp	_var05, #240 wz
2c67c     07 86 06 A5 |  if_e	and	_var04, #7
2c680     03 8A 06 A6 |  if_e	mov	_var06, #3
2c684                 | ' 			return 0xFFFFFFFF;
2c684     01 7A 66 56 |  if_ne	neg	result1, #1
2c688     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c68c                 | LR__4670
2c68c                 | LR__4671
2c68c                 | ' 		}
2c68c                 | ' 		do {
2c68c                 | LR__4672
2c68c     42 8D C2 FA | 	rdbyte	_var07, _var03
2c690     46 89 E2 F8 | 	getbyte	_var05, _var07, #0
2c694     C0 88 06 F5 | 	and	_var05, #192
2c698     80 88 0E F2 | 	cmp	_var05, #128 wz
2c69c     01 84 06 F1 | 	add	_var03, #1
2c6a0     01 7A 66 56 |  if_ne	neg	result1, #1
2c6a4     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c6a8     06 86 66 F0 | 	shl	_var04, #6
2c6ac     46 83 E2 F8 | 	getbyte	_var02, _var07, #0
2c6b0     3F 82 06 F5 | 	and	_var02, #63
2c6b4     41 87 42 F5 | 	or	_var04, _var02
2c6b8     F4 8B 6E FB | 	djnz	_var06, #LR__4672
2c6bc     80 86 16 F2 | 	cmp	_var04, #128 wc
2c6c0     24 00 90 CD |  if_b	jmp	#LR__4674
2c6c4     6C 00 00 FF 
2c6c8     00 86 16 F2 | 	cmp	_var04, ##55296 wc
2c6cc     0C 00 90 CD |  if_b	jmp	#LR__4673
2c6d0     70 00 00 FF 
2c6d4     00 86 16 F2 | 	cmp	_var04, ##57344 wc
2c6d8     0C 00 90 CD |  if_b	jmp	#LR__4674
2c6dc                 | LR__4673
2c6dc     80 08 00 FF 
2c6e0     00 86 16 F2 | 	cmp	_var04, ##1114112 wc
2c6e4     08 00 90 CD |  if_b	jmp	#LR__4675
2c6e8                 | LR__4674
2c6e8     01 7A 66 F6 | 	neg	result1, #1
2c6ec     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c6f0                 | LR__4675
2c6f0     80 00 00 FF 
2c6f4     00 86 16 F2 | 	cmp	_var04, ##65536 wc
2c6f8     2C 00 90 CD |  if_b	jmp	#LR__4676
2c6fc     43 83 02 F6 | 	mov	_var02, _var04
2c700     80 00 00 FF 
2c704     00 82 86 F1 | 	sub	_var02, ##65536
2c708     06 82 66 F0 | 	shl	_var02, #6
2c70c     80 FF 01 FF 
2c710     00 82 06 F5 | 	and	_var02, ##67043328
2c714     6E 00 6C FF 
2c718     00 88 06 F6 | 	mov	_var05, ##-671032320
2c71c     41 89 42 F5 | 	or	_var05, _var02
2c720     09 86 46 F7 | 	zerox	_var04, #9
2c724     44 87 42 F5 | 	or	_var04, _var05
2c728                 | LR__4676
2c728                 | LR__4677
2c728     49 85 62 FC | 	wrlong	_var03, arg01
2c72c                 | ' 	}
2c72c                 | ' #line 811 "ff.c"
2c72c                 | ' 	*str = p;
2c72c                 | ' 	return uc;
2c72c     43 7B 02 F6 | 	mov	result1, _var04
2c730                 | _fatfs_cc_tchar2uni_ret
2c730     2D 00 64 FD | 	ret
2c734                 | 
2c734                 | _fatfs_cc_put_utf
2c734     80 92 16 F2 | 	cmp	arg01, #128 wc
2c738     18 00 90 3D |  if_ae	jmp	#LR__4680
2c73c     01 96 16 F2 | 	cmp	arg03, #1 wc
2c740     00 7A 06 C6 |  if_b	mov	result1, #0
2c744     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c748     4A 93 42 FC | 	wrbyte	arg01, arg02
2c74c                 | ' 		*buf = (TCHAR)chr;
2c74c                 | ' 		return 1;
2c74c     01 7A 06 F6 | 	mov	result1, #1
2c750     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c754                 | LR__4680
2c754     04 00 00 FF 
2c758     00 92 16 F2 | 	cmp	arg01, ##2048 wc
2c75c     40 00 90 3D |  if_ae	jmp	#LR__4681
2c760     02 96 16 F2 | 	cmp	arg03, #2 wc
2c764     00 7A 06 C6 |  if_b	mov	result1, #0
2c768     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c76c     49 7B 02 F6 | 	mov	result1, arg01
2c770     06 7A 46 F0 | 	shr	result1, #6
2c774     1F 7A 06 F5 | 	and	result1, #31
2c778     C0 96 06 F6 | 	mov	arg03, #192
2c77c     3D 97 42 F5 | 	or	arg03, result1
2c780     4A 97 42 FC | 	wrbyte	arg03, arg02
2c784     01 94 06 F1 | 	add	arg02, #1
2c788     3F 92 06 F5 | 	and	arg01, #63
2c78c     80 7A 06 F6 | 	mov	result1, #128
2c790     49 7B 42 F5 | 	or	result1, arg01
2c794     4A 7B 42 FC | 	wrbyte	result1, arg02
2c798                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c798                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c798                 | ' 		return 2;
2c798     02 7A 06 F6 | 	mov	result1, #2
2c79c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c7a0                 | LR__4681
2c7a0     80 00 00 FF 
2c7a4     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2c7a8     70 00 90 3D |  if_ae	jmp	#LR__4684
2c7ac     03 96 16 F2 | 	cmp	arg03, #3 wc
2c7b0     18 00 90 CD |  if_b	jmp	#LR__4682
2c7b4     6C 00 00 FF 
2c7b8     00 92 16 F2 | 	cmp	arg01, ##55296 wc
2c7bc     14 00 90 CD |  if_b	jmp	#LR__4683
2c7c0     70 00 00 FF 
2c7c4     00 92 16 F2 | 	cmp	arg01, ##57344 wc
2c7c8     08 00 90 3D |  if_ae	jmp	#LR__4683
2c7cc                 | LR__4682
2c7cc     00 7A 06 F6 | 	mov	result1, #0
2c7d0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c7d4                 | LR__4683
2c7d4     49 7B 5A F8 | 	getnib	result1, arg01, #3
2c7d8     E0 96 06 F6 | 	mov	arg03, #224
2c7dc     3D 97 42 F5 | 	or	arg03, result1
2c7e0     4A 97 42 FC | 	wrbyte	arg03, arg02
2c7e4     01 94 06 F1 | 	add	arg02, #1
2c7e8     49 7B 02 F6 | 	mov	result1, arg01
2c7ec     06 7A 46 F0 | 	shr	result1, #6
2c7f0     3F 7A 06 F5 | 	and	result1, #63
2c7f4     80 96 06 F6 | 	mov	arg03, #128
2c7f8     3D 97 42 F5 | 	or	arg03, result1
2c7fc     4A 97 42 FC | 	wrbyte	arg03, arg02
2c800     01 94 06 F1 | 	add	arg02, #1
2c804     3F 92 06 F5 | 	and	arg01, #63
2c808     80 7A 06 F6 | 	mov	result1, #128
2c80c     49 7B 42 F5 | 	or	result1, arg01
2c810     4A 7B 42 FC | 	wrbyte	result1, arg02
2c814                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c814                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c814                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c814                 | ' 		return 3;
2c814     03 7A 06 F6 | 	mov	result1, #3
2c818     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c81c                 | LR__4684
2c81c     04 96 16 F2 | 	cmp	arg03, #4 wc
2c820     00 7A 06 C6 |  if_b	mov	result1, #0
2c824     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c828     49 81 02 F6 | 	mov	_var01, arg01
2c82c     E0 81 06 F4 | 	bitl	_var01, #480
2c830     00 00 6C FF 
2c834     00 80 86 F1 | 	sub	_var01, ##-671088640
2c838     06 80 46 F0 | 	shr	_var01, #6
2c83c     49 93 32 F9 | 	getword	arg01, arg01, #0
2c840     6E 00 00 FF 
2c844     00 92 86 F1 | 	sub	arg01, ##56320
2c848     00 08 00 FF 
2c84c     00 80 16 F2 | 	cmp	_var01, ##1048576 wc
2c850     02 00 00 CF 
2c854     00 92 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c858     00 7A 06 36 |  if_ae	mov	result1, #0
2c85c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c860     49 81 42 F5 | 	or	_var01, arg01
2c864     80 00 00 FF 
2c868     00 80 06 F1 | 	add	_var01, ##65536
2c86c     40 7B 02 F6 | 	mov	result1, _var01
2c870     12 7A 46 F0 | 	shr	result1, #18
2c874     07 7A 06 F5 | 	and	result1, #7
2c878     F0 96 06 F6 | 	mov	arg03, #240
2c87c     3D 97 42 F5 | 	or	arg03, result1
2c880     4A 97 42 FC | 	wrbyte	arg03, arg02
2c884     01 94 06 F1 | 	add	arg02, #1
2c888     40 7B 02 F6 | 	mov	result1, _var01
2c88c     0C 7A 46 F0 | 	shr	result1, #12
2c890     3F 7A 06 F5 | 	and	result1, #63
2c894     80 96 06 F6 | 	mov	arg03, #128
2c898     3D 97 42 F5 | 	or	arg03, result1
2c89c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c8a0     01 94 06 F1 | 	add	arg02, #1
2c8a4     40 7B 02 F6 | 	mov	result1, _var01
2c8a8     06 7A 46 F0 | 	shr	result1, #6
2c8ac     3F 7A 06 F5 | 	and	result1, #63
2c8b0     80 96 06 F6 | 	mov	arg03, #128
2c8b4     3D 97 42 F5 | 	or	arg03, result1
2c8b8     4A 97 42 FC | 	wrbyte	arg03, arg02
2c8bc     01 94 06 F1 | 	add	arg02, #1
2c8c0     3F 80 06 F5 | 	and	_var01, #63
2c8c4     80 7A 06 F6 | 	mov	result1, #128
2c8c8     40 7B 42 F5 | 	or	result1, _var01
2c8cc     4A 7B 42 FC | 	wrbyte	result1, arg02
2c8d0                 | ' 	chr = (hc | chr) + 0x10000;
2c8d0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c8d0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c8d0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c8d0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c8d0                 | ' 	return 4;
2c8d0     04 7A 06 F6 | 	mov	result1, #4
2c8d4                 | _fatfs_cc_put_utf_ret
2c8d4     2D 00 64 FD | 	ret
2c8d8                 | 
2c8d8                 | _fatfs_cc_sync_window
2c8d8     02 CA 05 F6 | 	mov	COUNT_, #2
2c8dc     E8 00 A0 FD | 	call	#pushregs_
2c8e0     49 A7 02 F6 | 	mov	local01, arg01
2c8e4     00 A8 06 F6 | 	mov	local02, #0
2c8e8     03 A6 06 F1 | 	add	local01, #3
2c8ec     53 7B CA FA | 	rdbyte	result1, local01 wz
2c8f0     03 A6 86 F1 | 	sub	local01, #3
2c8f4     A4 00 90 AD |  if_e	jmp	#LR__4692
2c8f8     01 A6 06 F1 | 	add	local01, #1
2c8fc     53 93 C2 FA | 	rdbyte	arg01, local01
2c900     33 A6 06 F1 | 	add	local01, #51
2c904     53 95 02 F6 | 	mov	arg02, local01
2c908     04 A6 86 F1 | 	sub	local01, #4
2c90c     53 97 02 FB | 	rdlong	arg03, local01
2c910     30 A6 86 F1 | 	sub	local01, #48
2c914     01 98 06 F6 | 	mov	arg04, #1
2c918     44 FB BF FD | 	call	#_fatfs_cc_disk_write
2c91c     00 7A 0E F2 | 	cmp	result1, #0 wz
2c920     74 00 90 5D |  if_ne	jmp	#LR__4690
2c924     03 A6 06 F1 | 	add	local01, #3
2c928     53 01 48 FC | 	wrbyte	#0, local01
2c92c     2D A6 06 F1 | 	add	local01, #45
2c930     53 7B 02 FB | 	rdlong	result1, local01
2c934     0C A6 86 F1 | 	sub	local01, #12
2c938     53 99 02 FB | 	rdlong	arg04, local01
2c93c     4C 7B 82 F1 | 	sub	result1, arg04
2c940     08 A6 86 F1 | 	sub	local01, #8
2c944     53 99 02 FB | 	rdlong	arg04, local01
2c948     1C A6 86 F1 | 	sub	local01, #28
2c94c     4C 7B 12 F2 | 	cmp	result1, arg04 wc
2c950     48 00 90 3D |  if_ae	jmp	#LR__4691
2c954     02 A6 06 F1 | 	add	local01, #2
2c958     53 99 C2 FA | 	rdbyte	arg04, local01
2c95c     02 A6 86 F1 | 	sub	local01, #2
2c960     02 98 0E F2 | 	cmp	arg04, #2 wz
2c964     34 00 90 5D |  if_ne	jmp	#LR__4691
2c968     01 A6 06 F1 | 	add	local01, #1
2c96c     53 93 C2 FA | 	rdbyte	arg01, local01
2c970     33 A6 06 F1 | 	add	local01, #51
2c974     53 95 02 F6 | 	mov	arg02, local01
2c978     04 A6 86 F1 | 	sub	local01, #4
2c97c     53 97 02 FB | 	rdlong	arg03, local01
2c980     14 A6 86 F1 | 	sub	local01, #20
2c984     53 A7 02 FB | 	rdlong	local01, local01
2c988     53 97 02 F1 | 	add	arg03, local01
2c98c     01 98 06 F6 | 	mov	arg04, #1
2c990     CC FA BF FD | 	call	#_fatfs_cc_disk_write
2c994     04 00 90 FD | 	jmp	#LR__4691
2c998                 | LR__4690
2c998     01 A8 06 F6 | 	mov	local02, #1
2c99c                 | LR__4691
2c99c                 | LR__4692
2c99c                 | ' 			res = FR_DISK_ERR;
2c99c                 | ' 		}
2c99c                 | ' 	}
2c99c                 | ' 	return res;
2c99c     54 7B 02 F6 | 	mov	result1, local02
2c9a0     E7 F0 03 F6 | 	mov	ptra, fp
2c9a4     F2 00 A0 FD | 	call	#popregs_
2c9a8                 | _fatfs_cc_sync_window_ret
2c9a8     2D 00 64 FD | 	ret
2c9ac                 | 
2c9ac                 | _fatfs_cc_move_window
2c9ac     03 CA 05 F6 | 	mov	COUNT_, #3
2c9b0     E8 00 A0 FD | 	call	#pushregs_
2c9b4     49 A7 02 F6 | 	mov	local01, arg01
2c9b8     4A A9 02 F6 | 	mov	local02, arg02
2c9bc     00 AA 06 F6 | 	mov	local03, #0
2c9c0     30 A6 06 F1 | 	add	local01, #48
2c9c4     53 99 02 FB | 	rdlong	arg04, local01
2c9c8     30 A6 86 F1 | 	sub	local01, #48
2c9cc     4C A9 0A F2 | 	cmp	local02, arg04 wz
2c9d0     40 00 90 AD |  if_e	jmp	#LR__4701
2c9d4     53 93 02 F6 | 	mov	arg01, local01
2c9d8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2c9dc     3D AB 0A F6 | 	mov	local03, result1 wz
2c9e0     30 00 90 5D |  if_ne	jmp	#LR__4700
2c9e4     01 A6 06 F1 | 	add	local01, #1
2c9e8     53 93 C2 FA | 	rdbyte	arg01, local01
2c9ec     33 A6 06 F1 | 	add	local01, #51
2c9f0     53 95 02 F6 | 	mov	arg02, local01
2c9f4     54 97 02 F6 | 	mov	arg03, local02
2c9f8     01 98 06 F6 | 	mov	arg04, #1
2c9fc     24 F9 BF FD | 	call	#_fatfs_cc_disk_read
2ca00     00 7A 0E F2 | 	cmp	result1, #0 wz
2ca04     01 A8 66 56 |  if_ne	neg	local02, #1
2ca08     01 AA 06 56 |  if_ne	mov	local03, #1
2ca0c     04 A6 86 F1 | 	sub	local01, #4
2ca10     53 A9 62 FC | 	wrlong	local02, local01
2ca14                 | LR__4700
2ca14                 | LR__4701
2ca14                 | ' 				sect = (LBA_t)0 - 1;
2ca14                 | ' 				res = FR_DISK_ERR;
2ca14                 | ' 			}
2ca14                 | ' 			fs->winsect = sect;
2ca14                 | ' 		}
2ca14                 | ' 	}
2ca14                 | ' 	return res;
2ca14     55 7B 02 F6 | 	mov	result1, local03
2ca18     E7 F0 03 F6 | 	mov	ptra, fp
2ca1c     F2 00 A0 FD | 	call	#popregs_
2ca20                 | _fatfs_cc_move_window_ret
2ca20     2D 00 64 FD | 	ret
2ca24                 | 
2ca24                 | _fatfs_cc_sync_fs
2ca24     02 CA 05 F6 | 	mov	COUNT_, #2
2ca28     E8 00 A0 FD | 	call	#pushregs_
2ca2c     49 A7 02 F6 | 	mov	local01, arg01
2ca30     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2ca34     3D A9 0A F6 | 	mov	local02, result1 wz
2ca38     D8 00 90 5D |  if_ne	jmp	#LR__4711
2ca3c     53 99 C2 FA | 	rdbyte	arg04, local01
2ca40     03 98 0E F2 | 	cmp	arg04, #3 wz
2ca44     04 A6 06 A1 |  if_e	add	local01, #4
2ca48     53 99 C2 AA |  if_e	rdbyte	arg04, local01
2ca4c     04 A6 86 A1 |  if_e	sub	local01, #4
2ca50     01 98 0E A2 |  if_e	cmp	arg04, #1 wz
2ca54     A0 00 90 5D |  if_ne	jmp	#LR__4710
2ca58     34 A6 06 F1 | 	add	local01, #52
2ca5c     53 93 02 F6 | 	mov	arg01, local01
2ca60     00 94 06 F6 | 	mov	arg02, #0
2ca64     09 96 C6 F9 | 	decod	arg03, #9
2ca68     D8 00 A0 FD | 	call	#\builtin_bytefill_
2ca6c     53 93 02 F6 | 	mov	arg01, local01
2ca70     FE 93 06 F1 | 	add	arg01, #510
2ca74     55 00 80 FF 
2ca78     49 AB 58 FC | 	wrword	##43605, arg01
2ca7c     A9 B0 A0 FF 
2ca80     53 A5 68 FC | 	wrlong	##1096897106, local01
2ca84     53 93 02 F6 | 	mov	arg01, local01
2ca88     E4 93 06 F1 | 	add	arg01, #484
2ca8c     B9 A0 B0 FF 
2ca90     49 E5 68 FC | 	wrlong	##1631679090, arg01
2ca94     53 93 02 F6 | 	mov	arg01, local01
2ca98     E8 93 06 F1 | 	add	arg01, #488
2ca9c     20 A6 86 F1 | 	sub	local01, #32
2caa0     53 95 02 FB | 	rdlong	arg02, local01
2caa4     49 95 62 FC | 	wrlong	arg02, arg01
2caa8     20 A6 06 F1 | 	add	local01, #32
2caac     53 93 02 F6 | 	mov	arg01, local01
2cab0     EC 93 06 F1 | 	add	arg01, #492
2cab4     24 A6 86 F1 | 	sub	local01, #36
2cab8     53 95 02 FB | 	rdlong	arg02, local01
2cabc     49 95 62 FC | 	wrlong	arg02, arg01
2cac0     10 A6 06 F1 | 	add	local01, #16
2cac4     53 97 02 FB | 	rdlong	arg03, local01
2cac8     01 96 06 F1 | 	add	arg03, #1
2cacc     10 A6 06 F1 | 	add	local01, #16
2cad0     53 97 62 FC | 	wrlong	arg03, local01
2cad4     2F A6 86 F1 | 	sub	local01, #47
2cad8     53 93 C2 FA | 	rdbyte	arg01, local01
2cadc     33 A6 06 F1 | 	add	local01, #51
2cae0     53 95 02 F6 | 	mov	arg02, local01
2cae4     01 98 06 F6 | 	mov	arg04, #1
2cae8     74 F9 BF FD | 	call	#_fatfs_cc_disk_write
2caec     30 A6 86 F1 | 	sub	local01, #48
2caf0     53 01 48 FC | 	wrbyte	#0, local01
2caf4     04 A6 86 F1 | 	sub	local01, #4
2caf8                 | LR__4710
2caf8     01 A6 06 F1 | 	add	local01, #1
2cafc     53 93 C2 FA | 	rdbyte	arg01, local01
2cb00     00 94 06 F6 | 	mov	arg02, #0
2cb04     00 96 06 F6 | 	mov	arg03, #0
2cb08     90 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2cb0c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cb10     01 A8 06 56 |  if_ne	mov	local02, #1
2cb14                 | LR__4711
2cb14                 | ' 	}
2cb14                 | ' 
2cb14                 | ' 	return res;
2cb14     54 7B 02 F6 | 	mov	result1, local02
2cb18     E7 F0 03 F6 | 	mov	ptra, fp
2cb1c     F2 00 A0 FD | 	call	#popregs_
2cb20                 | _fatfs_cc_sync_fs_ret
2cb20     2D 00 64 FD | 	ret
2cb24                 | 
2cb24                 | _fatfs_cc_clst2sect
2cb24     02 94 86 F1 | 	sub	arg02, #2
2cb28     18 92 06 F1 | 	add	arg01, #24
2cb2c     49 81 02 FB | 	rdlong	_var01, arg01
2cb30     18 92 86 F1 | 	sub	arg01, #24
2cb34     02 80 86 F1 | 	sub	_var01, #2
2cb38     40 95 12 F2 | 	cmp	arg02, _var01 wc
2cb3c     00 7A 06 36 |  if_ae	mov	result1, #0
2cb40     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2cb44     0A 92 06 F1 | 	add	arg01, #10
2cb48     49 81 E2 FA | 	rdword	_var01, arg01
2cb4c     4A 81 02 FD | 	qmul	_var01, arg02
2cb50                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2cb50     22 92 06 F1 | 	add	arg01, #34
2cb54     49 7B 02 FB | 	rdlong	result1, arg01
2cb58     18 80 62 FD | 	getqx	_var01
2cb5c     40 7B 02 F1 | 	add	result1, _var01
2cb60                 | _fatfs_cc_clst2sect_ret
2cb60     2D 00 64 FD | 	ret
2cb64                 | 
2cb64                 | _fatfs_cc_get_fat
2cb64     07 CA 05 F6 | 	mov	COUNT_, #7
2cb68     E8 00 A0 FD | 	call	#pushregs_
2cb6c     4A A7 02 F6 | 	mov	local01, arg02
2cb70     49 A9 02 FB | 	rdlong	local02, arg01
2cb74     02 A6 16 F2 | 	cmp	local01, #2 wc
2cb78     14 00 90 CD |  if_b	jmp	#LR__4720
2cb7c     18 A8 06 F1 | 	add	local02, #24
2cb80     54 AB 02 FB | 	rdlong	local03, local02
2cb84     18 A8 86 F1 | 	sub	local02, #24
2cb88     55 A7 12 F2 | 	cmp	local01, local03 wc
2cb8c     08 00 90 CD |  if_b	jmp	#LR__4721
2cb90                 | LR__4720
2cb90     01 AC 06 F6 | 	mov	local04, #1
2cb94     60 01 90 FD | 	jmp	#LR__4728
2cb98                 | LR__4721
2cb98     01 AC 66 F6 | 	neg	local04, #1
2cb9c                 | ' 		val = 0xFFFFFFFF;
2cb9c                 | ' 
2cb9c                 | ' 		switch (fs->fs_type) {
2cb9c     54 AF C2 FA | 	rdbyte	local05, local02
2cba0     01 AE 86 F1 | 	sub	local05, #1
2cba4     03 AE 26 F3 | 	fle	local05, #3
2cba8     30 AE 62 FD | 	jmprel	local05
2cbac                 | LR__4722
2cbac     0C 00 90 FD | 	jmp	#LR__4723
2cbb0     B8 00 90 FD | 	jmp	#LR__4724
2cbb4     F8 00 90 FD | 	jmp	#LR__4725
2cbb8     38 01 90 FD | 	jmp	#LR__4726
2cbbc                 | LR__4723
2cbbc     53 AF 02 F6 | 	mov	local05, local01
2cbc0     53 93 02 F6 | 	mov	arg01, local01
2cbc4     01 92 46 F0 | 	shr	arg01, #1
2cbc8     49 AF 02 F1 | 	add	local05, arg01
2cbcc     54 93 02 F6 | 	mov	arg01, local02
2cbd0     57 B1 02 F6 | 	mov	local06, local05
2cbd4     09 B0 46 F0 | 	shr	local06, #9
2cbd8     24 A8 06 F1 | 	add	local02, #36
2cbdc     54 95 02 FB | 	rdlong	arg02, local02
2cbe0     24 A8 86 F1 | 	sub	local02, #36
2cbe4     58 95 02 F1 | 	add	arg02, local06
2cbe8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cbec     00 7A 0E F2 | 	cmp	result1, #0 wz
2cbf0     04 01 90 5D |  if_ne	jmp	#LR__4727
2cbf4     57 B1 02 F6 | 	mov	local06, local05
2cbf8     FF B1 06 F5 | 	and	local06, #511
2cbfc     54 93 02 F6 | 	mov	arg01, local02
2cc00     34 92 06 F1 | 	add	arg01, #52
2cc04     49 B1 02 F1 | 	add	local06, arg01
2cc08     58 B3 C2 FA | 	rdbyte	local07, local06
2cc0c     54 93 02 F6 | 	mov	arg01, local02
2cc10     01 AE 06 F1 | 	add	local05, #1
2cc14     57 B1 02 F6 | 	mov	local06, local05
2cc18     09 B0 46 F0 | 	shr	local06, #9
2cc1c     24 A8 06 F1 | 	add	local02, #36
2cc20     54 95 02 FB | 	rdlong	arg02, local02
2cc24     24 A8 86 F1 | 	sub	local02, #36
2cc28     58 95 02 F1 | 	add	arg02, local06
2cc2c     7C FD BF FD | 	call	#_fatfs_cc_move_window
2cc30     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc34     C0 00 90 5D |  if_ne	jmp	#LR__4727
2cc38     FF AF 06 F5 | 	and	local05, #511
2cc3c     34 A8 06 F1 | 	add	local02, #52
2cc40     54 AF 02 F1 | 	add	local05, local02
2cc44     57 B1 C2 FA | 	rdbyte	local06, local05
2cc48     08 B0 66 F0 | 	shl	local06, #8
2cc4c     58 B3 42 F5 | 	or	local07, local06
2cc50     01 A6 CE F7 | 	test	local01, #1 wz
2cc54     04 B2 46 50 |  if_ne	shr	local07, #4
2cc58     59 AB 02 56 |  if_ne	mov	local03, local07
2cc5c     0B B2 46 A7 |  if_e	zerox	local07, #11
2cc60     59 AB 02 A6 |  if_e	mov	local03, local07
2cc64     55 AD 02 F6 | 	mov	local04, local03
2cc68                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2cc68                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2cc68                 | ' 			break;
2cc68     8C 00 90 FD | 	jmp	#LR__4727
2cc6c                 | LR__4724
2cc6c     54 93 02 F6 | 	mov	arg01, local02
2cc70     53 B1 02 F6 | 	mov	local06, local01
2cc74     08 B0 46 F0 | 	shr	local06, #8
2cc78     24 A8 06 F1 | 	add	local02, #36
2cc7c     54 95 02 FB | 	rdlong	arg02, local02
2cc80     24 A8 86 F1 | 	sub	local02, #36
2cc84     58 95 02 F1 | 	add	arg02, local06
2cc88     20 FD BF FD | 	call	#_fatfs_cc_move_window
2cc8c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc90     64 00 90 5D |  if_ne	jmp	#LR__4727
2cc94     34 A8 06 F1 | 	add	local02, #52
2cc98     01 A6 66 F0 | 	shl	local01, #1
2cc9c     FF A7 06 F5 | 	and	local01, #511
2cca0     53 A9 02 F1 | 	add	local02, local01
2cca4                 | ' {
2cca4                 | ' 
2cca4                 | ' 	return *((WORD*)ptr);
2cca4     54 7B E2 FA | 	rdword	result1, local02
2cca8     3D AD 32 F9 | 	getword	local04, result1, #0
2ccac                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ccac                 | ' 			break;
2ccac     48 00 90 FD | 	jmp	#LR__4727
2ccb0                 | LR__4725
2ccb0     54 93 02 F6 | 	mov	arg01, local02
2ccb4     53 B1 02 F6 | 	mov	local06, local01
2ccb8     07 B0 46 F0 | 	shr	local06, #7
2ccbc     24 A8 06 F1 | 	add	local02, #36
2ccc0     54 95 02 FB | 	rdlong	arg02, local02
2ccc4     24 A8 86 F1 | 	sub	local02, #36
2ccc8     58 95 02 F1 | 	add	arg02, local06
2cccc     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ccd0     00 7A 0E F2 | 	cmp	result1, #0 wz
2ccd4     20 00 90 5D |  if_ne	jmp	#LR__4727
2ccd8     34 A8 06 F1 | 	add	local02, #52
2ccdc     02 A6 66 F0 | 	shl	local01, #2
2cce0     FF A7 06 F5 | 	and	local01, #511
2cce4     53 A9 02 F1 | 	add	local02, local01
2cce8                 | ' {
2cce8                 | ' 
2cce8                 | ' 	return *((DWORD*)ptr);
2cce8     54 AD 02 FB | 	rdlong	local04, local02
2ccec     7C AC 06 F4 | 	bitl	local04, #124
2ccf0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2ccf0                 | ' 			break;
2ccf0     04 00 90 FD | 	jmp	#LR__4727
2ccf4                 | LR__4726
2ccf4     01 AC 06 F6 | 	mov	local04, #1
2ccf8                 | LR__4727
2ccf8                 | LR__4728
2ccf8                 | ' 			val = 1;
2ccf8                 | ' 		}
2ccf8                 | ' 	}
2ccf8                 | ' 
2ccf8                 | ' 	return val;
2ccf8     56 7B 02 F6 | 	mov	result1, local04
2ccfc     E7 F0 03 F6 | 	mov	ptra, fp
2cd00     F2 00 A0 FD | 	call	#popregs_
2cd04                 | _fatfs_cc_get_fat_ret
2cd04     2D 00 64 FD | 	ret
2cd08                 | 
2cd08                 | _fatfs_cc_put_fat
2cd08     08 CA 05 F6 | 	mov	COUNT_, #8
2cd0c     E8 00 A0 FD | 	call	#pushregs_
2cd10     49 A7 02 F6 | 	mov	local01, arg01
2cd14     4A A9 02 F6 | 	mov	local02, arg02
2cd18     4B AB 02 F6 | 	mov	local03, arg03
2cd1c     02 AC 06 F6 | 	mov	local04, #2
2cd20     02 A8 16 F2 | 	cmp	local02, #2 wc
2cd24     E0 01 90 CD |  if_b	jmp	#LR__4737
2cd28     18 A6 06 F1 | 	add	local01, #24
2cd2c     53 AF 02 FB | 	rdlong	local05, local01
2cd30     18 A6 86 F1 | 	sub	local01, #24
2cd34     57 A9 12 F2 | 	cmp	local02, local05 wc
2cd38     CC 01 90 3D |  if_ae	jmp	#LR__4737
2cd3c                 | ' 		switch (fs->fs_type) {
2cd3c     53 B1 C2 FA | 	rdbyte	local06, local01
2cd40     01 B0 86 F1 | 	sub	local06, #1
2cd44     03 B0 26 F3 | 	fle	local06, #3
2cd48     30 B0 62 FD | 	jmprel	local06
2cd4c                 | LR__4730
2cd4c     0C 00 90 FD | 	jmp	#LR__4731
2cd50     F4 00 90 FD | 	jmp	#LR__4734
2cd54     3C 01 90 FD | 	jmp	#LR__4735
2cd58     AC 01 90 FD | 	jmp	#LR__4736
2cd5c                 | LR__4731
2cd5c     54 B3 02 F6 | 	mov	local07, local02
2cd60     54 AF 02 F6 | 	mov	local05, local02
2cd64     01 AE 46 F0 | 	shr	local05, #1
2cd68     57 B3 02 F1 | 	add	local07, local05
2cd6c     53 93 02 F6 | 	mov	arg01, local01
2cd70     59 B1 02 F6 | 	mov	local06, local07
2cd74     09 B0 46 F0 | 	shr	local06, #9
2cd78     24 A6 06 F1 | 	add	local01, #36
2cd7c     53 95 02 FB | 	rdlong	arg02, local01
2cd80     24 A6 86 F1 | 	sub	local01, #36
2cd84     58 95 02 F1 | 	add	arg02, local06
2cd88     20 FC BF FD | 	call	#_fatfs_cc_move_window
2cd8c     3D AD 0A F6 | 	mov	local04, result1 wz
2cd90     74 01 90 5D |  if_ne	jmp	#LR__4736
2cd94     53 B5 02 F6 | 	mov	local08, local01
2cd98     34 B4 06 F1 | 	add	local08, #52
2cd9c     59 AF 02 F6 | 	mov	local05, local07
2cda0     FF AF 06 F5 | 	and	local05, #511
2cda4     57 B5 02 F1 | 	add	local08, local05
2cda8     01 A8 CE F7 | 	test	local02, #1 wz
2cdac     01 B2 06 F1 | 	add	local07, #1
2cdb0     18 00 90 AD |  if_e	jmp	#LR__4732
2cdb4     5A AF C2 FA | 	rdbyte	local05, local08
2cdb8     57 AF 42 F8 | 	getnib	local05, local05, #0
2cdbc     55 B1 E2 F8 | 	getbyte	local06, local03, #0
2cdc0     04 B0 66 F0 | 	shl	local06, #4
2cdc4     58 AF 42 F5 | 	or	local05, local06
2cdc8     04 00 90 FD | 	jmp	#LR__4733
2cdcc                 | LR__4732
2cdcc     55 AF 02 F6 | 	mov	local05, local03
2cdd0                 | LR__4733
2cdd0     5A AF 42 FC | 	wrbyte	local05, local08
2cdd4     03 A6 06 F1 | 	add	local01, #3
2cdd8     53 03 48 FC | 	wrbyte	#1, local01
2cddc     03 A6 86 F1 | 	sub	local01, #3
2cde0     53 93 02 F6 | 	mov	arg01, local01
2cde4     59 B5 02 F6 | 	mov	local08, local07
2cde8     09 B4 46 F0 | 	shr	local08, #9
2cdec     24 A6 06 F1 | 	add	local01, #36
2cdf0     53 95 02 FB | 	rdlong	arg02, local01
2cdf4     24 A6 86 F1 | 	sub	local01, #36
2cdf8     5A 95 02 F1 | 	add	arg02, local08
2cdfc     AC FB BF FD | 	call	#_fatfs_cc_move_window
2ce00     3D AD 0A F6 | 	mov	local04, result1 wz
2ce04     00 01 90 5D |  if_ne	jmp	#LR__4736
2ce08     53 B5 02 F6 | 	mov	local08, local01
2ce0c     34 B4 06 F1 | 	add	local08, #52
2ce10     FF B3 06 F5 | 	and	local07, #511
2ce14     59 B5 02 F1 | 	add	local08, local07
2ce18     01 A8 CE F7 | 	test	local02, #1 wz
2ce1c     04 AA 46 50 |  if_ne	shr	local03, #4
2ce20     55 AF 02 56 |  if_ne	mov	local05, local03
2ce24     5A AF C2 AA |  if_e	rdbyte	local05, local08
2ce28     F0 AE 06 A5 |  if_e	and	local05, #240
2ce2c     55 AB EA A8 |  if_e	getbyte	local03, local03, #1
2ce30     55 AB 42 A8 |  if_e	getnib	local03, local03, #0
2ce34     55 AF 42 A5 |  if_e	or	local05, local03
2ce38     5A AF 42 FC | 	wrbyte	local05, local08
2ce3c     03 A6 06 F1 | 	add	local01, #3
2ce40     53 03 48 FC | 	wrbyte	#1, local01
2ce44                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2ce44                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2ce44                 | ' 			fs->wflag = 1;
2ce44                 | ' 			break;
2ce44     C0 00 90 FD | 	jmp	#LR__4736
2ce48                 | LR__4734
2ce48     53 93 02 F6 | 	mov	arg01, local01
2ce4c     54 B5 02 F6 | 	mov	local08, local02
2ce50     08 B4 46 F0 | 	shr	local08, #8
2ce54     24 A6 06 F1 | 	add	local01, #36
2ce58     53 95 02 FB | 	rdlong	arg02, local01
2ce5c     24 A6 86 F1 | 	sub	local01, #36
2ce60     5A 95 02 F1 | 	add	arg02, local08
2ce64     44 FB BF FD | 	call	#_fatfs_cc_move_window
2ce68     3D AD 0A F6 | 	mov	local04, result1 wz
2ce6c     98 00 90 5D |  if_ne	jmp	#LR__4736
2ce70     34 A6 06 F1 | 	add	local01, #52
2ce74     53 93 02 F6 | 	mov	arg01, local01
2ce78     01 A8 66 F0 | 	shl	local02, #1
2ce7c     FF A9 06 F5 | 	and	local02, #511
2ce80     54 93 02 F1 | 	add	arg01, local02
2ce84     49 AB 52 FC | 	wrword	local03, arg01
2ce88     31 A6 86 F1 | 	sub	local01, #49
2ce8c     53 03 48 FC | 	wrbyte	#1, local01
2ce90                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2ce90                 | ' 			fs->wflag = 1;
2ce90                 | ' 			break;
2ce90     74 00 90 FD | 	jmp	#LR__4736
2ce94                 | LR__4735
2ce94     53 93 02 F6 | 	mov	arg01, local01
2ce98     54 B5 02 F6 | 	mov	local08, local02
2ce9c     07 B4 46 F0 | 	shr	local08, #7
2cea0     24 A6 06 F1 | 	add	local01, #36
2cea4     53 95 02 FB | 	rdlong	arg02, local01
2cea8     24 A6 86 F1 | 	sub	local01, #36
2ceac     5A 95 02 F1 | 	add	arg02, local08
2ceb0     F8 FA BF FD | 	call	#_fatfs_cc_move_window
2ceb4     3D AD 0A F6 | 	mov	local04, result1 wz
2ceb8     4C 00 90 5D |  if_ne	jmp	#LR__4736
2cebc     7C AA 06 F4 | 	bitl	local03, #124
2cec0     53 93 02 F6 | 	mov	arg01, local01
2cec4     34 92 06 F1 | 	add	arg01, #52
2cec8     54 B5 02 F6 | 	mov	local08, local02
2cecc     02 B4 66 F0 | 	shl	local08, #2
2ced0     FF B5 06 F5 | 	and	local08, #511
2ced4     5A 93 02 F1 | 	add	arg01, local08
2ced8                 | ' {
2ced8                 | ' 
2ced8                 | ' 	return *((DWORD*)ptr);
2ced8     49 B5 02 FB | 	rdlong	local08, arg01
2cedc     00 00 78 FF 
2cee0     00 B4 06 F5 | 	and	local08, ##-268435456
2cee4     5A AB 42 F5 | 	or	local03, local08
2cee8     34 A6 06 F1 | 	add	local01, #52
2ceec     53 93 02 F6 | 	mov	arg01, local01
2cef0     02 A8 66 F0 | 	shl	local02, #2
2cef4     FF A9 06 F5 | 	and	local02, #511
2cef8     54 93 02 F1 | 	add	arg01, local02
2cefc     49 AB 62 FC | 	wrlong	local03, arg01
2cf00     31 A6 86 F1 | 	sub	local01, #49
2cf04     53 03 48 FC | 	wrbyte	#1, local01
2cf08                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2cf08                 | ' 			}
2cf08                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2cf08                 | ' 			fs->wflag = 1;
2cf08                 | ' 			break;
2cf08                 | LR__4736
2cf08                 | LR__4737
2cf08                 | ' 		}
2cf08                 | ' 	}
2cf08                 | ' 	return res;
2cf08     56 7B 02 F6 | 	mov	result1, local04
2cf0c     E7 F0 03 F6 | 	mov	ptra, fp
2cf10     F2 00 A0 FD | 	call	#popregs_
2cf14                 | _fatfs_cc_put_fat_ret
2cf14     2D 00 64 FD | 	ret
2cf18                 | 
2cf18                 | _fatfs_cc_remove_chain
2cf18     05 CA 05 F6 | 	mov	COUNT_, #5
2cf1c     E8 00 A0 FD | 	call	#pushregs_
2cf20     49 A7 02 F6 | 	mov	local01, arg01
2cf24     4A A9 02 F6 | 	mov	local02, arg02
2cf28     4B AB 02 F6 | 	mov	local03, arg03
2cf2c     53 AD 02 FB | 	rdlong	local04, local01
2cf30     02 A8 16 F2 | 	cmp	local02, #2 wc
2cf34     14 00 90 CD |  if_b	jmp	#LR__4740
2cf38     18 AC 06 F1 | 	add	local04, #24
2cf3c     56 7B 02 FB | 	rdlong	result1, local04
2cf40     18 AC 86 F1 | 	sub	local04, #24
2cf44     3D A9 12 F2 | 	cmp	local02, result1 wc
2cf48     08 00 90 CD |  if_b	jmp	#LR__4741
2cf4c                 | LR__4740
2cf4c     02 7A 06 F6 | 	mov	result1, #2
2cf50     CC 00 90 FD | 	jmp	#LR__4746
2cf54                 | LR__4741
2cf54     00 AA 0E F2 | 	cmp	local03, #0 wz
2cf58     18 00 90 AD |  if_e	jmp	#LR__4742
2cf5c     55 95 02 F6 | 	mov	arg02, local03
2cf60     56 93 02 F6 | 	mov	arg01, local04
2cf64     01 96 66 F6 | 	neg	arg03, #1
2cf68     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2cf6c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cf70     AC 00 90 5D |  if_ne	jmp	#LR__4746
2cf74                 | LR__4742
2cf74                 | ' 	}
2cf74                 | ' 
2cf74                 | ' 
2cf74                 | ' 	do {
2cf74                 | LR__4743
2cf74     54 95 02 F6 | 	mov	arg02, local02
2cf78     53 93 02 F6 | 	mov	arg01, local01
2cf7c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2cf80     3D AF 0A F6 | 	mov	local05, result1 wz
2cf84     94 00 90 AD |  if_e	jmp	#LR__4745
2cf88     01 AE 0E F2 | 	cmp	local05, #1 wz
2cf8c     02 7A 06 A6 |  if_e	mov	result1, #2
2cf90     8C 00 90 AD |  if_e	jmp	#LR__4746
2cf94     FF FF 7F FF 
2cf98     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2cf9c     01 7A 06 A6 |  if_e	mov	result1, #1
2cfa0     7C 00 90 AD |  if_e	jmp	#LR__4746
2cfa4     54 95 02 F6 | 	mov	arg02, local02
2cfa8     56 93 02 F6 | 	mov	arg01, local04
2cfac     00 96 06 F6 | 	mov	arg03, #0
2cfb0     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2cfb4     3D AB 0A F6 | 	mov	local03, result1 wz
2cfb8     55 7B 02 56 |  if_ne	mov	result1, local03
2cfbc     60 00 90 5D |  if_ne	jmp	#LR__4746
2cfc0     18 AC 06 F1 | 	add	local04, #24
2cfc4     56 AB 02 FB | 	rdlong	local03, local04
2cfc8     02 AA 86 F1 | 	sub	local03, #2
2cfcc     04 AC 86 F1 | 	sub	local04, #4
2cfd0     56 A9 02 FB | 	rdlong	local02, local04
2cfd4     14 AC 86 F1 | 	sub	local04, #20
2cfd8     55 A9 12 F2 | 	cmp	local02, local03 wc
2cfdc     24 00 90 3D |  if_ae	jmp	#LR__4744
2cfe0     14 AC 06 F1 | 	add	local04, #20
2cfe4     56 AB 02 FB | 	rdlong	local03, local04
2cfe8     01 AA 06 F1 | 	add	local03, #1
2cfec     56 AB 62 FC | 	wrlong	local03, local04
2cff0     10 AC 86 F1 | 	sub	local04, #16
2cff4     56 AB C2 FA | 	rdbyte	local03, local04
2cff8     01 AA 46 F5 | 	or	local03, #1
2cffc     56 AB 42 FC | 	wrbyte	local03, local04
2d000     04 AC 86 F1 | 	sub	local04, #4
2d004                 | LR__4744
2d004     57 A9 02 F6 | 	mov	local02, local05
2d008     18 AC 06 F1 | 	add	local04, #24
2d00c     56 AF 02 FB | 	rdlong	local05, local04
2d010     18 AC 86 F1 | 	sub	local04, #24
2d014     57 A9 12 F2 | 	cmp	local02, local05 wc
2d018     58 FF 9F CD |  if_b	jmp	#LR__4743
2d01c                 | LR__4745
2d01c                 | ' #line 1500 "ff.c"
2d01c                 | ' 	return FR_OK;
2d01c     00 7A 06 F6 | 	mov	result1, #0
2d020                 | LR__4746
2d020     E7 F0 03 F6 | 	mov	ptra, fp
2d024     F2 00 A0 FD | 	call	#popregs_
2d028                 | _fatfs_cc_remove_chain_ret
2d028     2D 00 64 FD | 	ret
2d02c                 | 
2d02c                 | _fatfs_cc_create_chain
2d02c     09 CA 05 F6 | 	mov	COUNT_, #9
2d030     E8 00 A0 FD | 	call	#pushregs_
2d034     49 A7 02 F6 | 	mov	local01, arg01
2d038     4A A9 0A F6 | 	mov	local02, arg02 wz
2d03c     53 AB 02 FB | 	rdlong	local03, local01
2d040     28 00 90 5D |  if_ne	jmp	#LR__4750
2d044     10 AA 06 F1 | 	add	local03, #16
2d048     55 AD 0A FB | 	rdlong	local04, local03 wz
2d04c     10 AA 86 F1 | 	sub	local03, #16
2d050     18 AA 06 51 |  if_ne	add	local03, #24
2d054     55 AF 02 5B |  if_ne	rdlong	local05, local03
2d058     18 AA 86 51 |  if_ne	sub	local03, #24
2d05c     57 AD 12 52 |  if_ne	cmp	local04, local05 wc
2d060     50 00 90 4D |  if_c_and_nz	jmp	#LR__4751
2d064     01 AC 06 F6 | 	mov	local04, #1
2d068     48 00 90 FD | 	jmp	#LR__4751
2d06c                 | LR__4750
2d06c     54 95 02 F6 | 	mov	arg02, local02
2d070     53 93 02 F6 | 	mov	arg01, local01
2d074     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d078     3D AD 02 F6 | 	mov	local04, result1
2d07c     02 AC 16 F2 | 	cmp	local04, #2 wc
2d080     01 7A 06 C6 |  if_b	mov	result1, #1
2d084     BC 01 90 CD |  if_b	jmp	#LR__4761
2d088     FF FF 7F FF 
2d08c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d090     56 7B 02 A6 |  if_e	mov	result1, local04
2d094     AC 01 90 AD |  if_e	jmp	#LR__4761
2d098     18 AA 06 F1 | 	add	local03, #24
2d09c     55 AF 02 FB | 	rdlong	local05, local03
2d0a0     18 AA 86 F1 | 	sub	local03, #24
2d0a4     57 AD 12 F2 | 	cmp	local04, local05 wc
2d0a8     56 7B 02 C6 |  if_b	mov	result1, local04
2d0ac     94 01 90 CD |  if_b	jmp	#LR__4761
2d0b0     54 AD 02 F6 | 	mov	local04, local02
2d0b4                 | LR__4751
2d0b4     14 AA 06 F1 | 	add	local03, #20
2d0b8     55 AF 0A FB | 	rdlong	local05, local03 wz
2d0bc     14 AA 86 F1 | 	sub	local03, #20
2d0c0     00 7A 06 A6 |  if_e	mov	result1, #0
2d0c4     7C 01 90 AD |  if_e	jmp	#LR__4761
2d0c8     00 B0 06 F6 | 	mov	local06, #0
2d0cc     54 AD 0A F2 | 	cmp	local04, local02 wz
2d0d0     74 00 90 5D |  if_ne	jmp	#LR__4754
2d0d4     56 B1 02 F6 | 	mov	local06, local04
2d0d8     01 B0 06 F1 | 	add	local06, #1
2d0dc     18 AA 06 F1 | 	add	local03, #24
2d0e0     55 AF 02 FB | 	rdlong	local05, local03
2d0e4     18 AA 86 F1 | 	sub	local03, #24
2d0e8     57 B1 12 F2 | 	cmp	local06, local05 wc
2d0ec     02 B0 06 36 |  if_ae	mov	local06, #2
2d0f0     58 95 02 F6 | 	mov	arg02, local06
2d0f4     53 93 02 F6 | 	mov	arg01, local01
2d0f8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d0fc     3D AF 02 F6 | 	mov	local05, result1
2d100     01 AE 0E F2 | 	cmp	local05, #1 wz
2d104     FF FF 7F 5F 
2d108     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d10c     57 7B 02 A6 |  if_e	mov	result1, local05
2d110     30 01 90 AD |  if_e	jmp	#LR__4761
2d114     00 AE 0E F2 | 	cmp	local05, #0 wz
2d118     2C 00 90 AD |  if_e	jmp	#LR__4753
2d11c     10 AA 06 F1 | 	add	local03, #16
2d120     55 B3 02 FB | 	rdlong	local07, local03
2d124     10 AA 86 F1 | 	sub	local03, #16
2d128     02 B2 16 F2 | 	cmp	local07, #2 wc
2d12c     14 00 90 CD |  if_b	jmp	#LR__4752
2d130     18 AA 06 F1 | 	add	local03, #24
2d134     55 AF 02 FB | 	rdlong	local05, local03
2d138     18 AA 86 F1 | 	sub	local03, #24
2d13c     57 B3 12 F2 | 	cmp	local07, local05 wc
2d140     59 AD 02 C6 |  if_b	mov	local04, local07
2d144                 | LR__4752
2d144     00 B0 06 F6 | 	mov	local06, #0
2d148                 | LR__4753
2d148                 | LR__4754
2d148     00 B0 0E F2 | 	cmp	local06, #0 wz
2d14c     60 00 90 5D |  if_ne	jmp	#LR__4757
2d150     56 B1 02 F6 | 	mov	local06, local04
2d154                 | ' 			ncl = scl;
2d154                 | ' 			for (;;) {
2d154                 | LR__4755
2d154     01 B0 06 F1 | 	add	local06, #1
2d158     18 AA 06 F1 | 	add	local03, #24
2d15c     55 AF 02 FB | 	rdlong	local05, local03
2d160     18 AA 86 F1 | 	sub	local03, #24
2d164     57 B1 12 F2 | 	cmp	local06, local05 wc
2d168     02 B0 06 36 |  if_ae	mov	local06, #2
2d16c     56 B1 1A 32 |  if_ae	cmp	local06, local04 wcz
2d170     00 7A 06 16 |  if_a	mov	result1, #0
2d174     CC 00 90 1D |  if_a	jmp	#LR__4761
2d178     58 95 02 F6 | 	mov	arg02, local06
2d17c     53 93 02 F6 | 	mov	arg01, local01
2d180     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d184     3D B3 0A F6 | 	mov	local07, result1 wz
2d188     24 00 90 AD |  if_e	jmp	#LR__4756
2d18c     01 B2 0E F2 | 	cmp	local07, #1 wz
2d190     FF FF 7F 5F 
2d194     FF B3 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d198     59 7B 02 A6 |  if_e	mov	result1, local07
2d19c     A4 00 90 AD |  if_e	jmp	#LR__4761
2d1a0     56 B1 0A F2 | 	cmp	local06, local04 wz
2d1a4     00 7A 06 A6 |  if_e	mov	result1, #0
2d1a8     98 00 90 AD |  if_e	jmp	#LR__4761
2d1ac     A4 FF 9F FD | 	jmp	#LR__4755
2d1b0                 | LR__4756
2d1b0                 | LR__4757
2d1b0     55 93 02 F6 | 	mov	arg01, local03
2d1b4     58 95 02 F6 | 	mov	arg02, local06
2d1b8     01 96 66 F6 | 	neg	arg03, #1
2d1bc     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d1c0     3D B5 0A F6 | 	mov	local08, result1 wz
2d1c4     1C 00 90 5D |  if_ne	jmp	#LR__4758
2d1c8     00 A8 0E F2 | 	cmp	local02, #0 wz
2d1cc     14 00 90 AD |  if_e	jmp	#LR__4758
2d1d0     55 93 02 F6 | 	mov	arg01, local03
2d1d4     54 95 02 F6 | 	mov	arg02, local02
2d1d8     58 97 02 F6 | 	mov	arg03, local06
2d1dc     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d1e0     3D B5 02 F6 | 	mov	local08, result1
2d1e4                 | LR__4758
2d1e4     00 B4 0E F2 | 	cmp	local08, #0 wz
2d1e8     4C 00 90 5D |  if_ne	jmp	#LR__4759
2d1ec     10 AA 06 F1 | 	add	local03, #16
2d1f0     55 B1 62 FC | 	wrlong	local06, local03
2d1f4     08 AA 06 F1 | 	add	local03, #8
2d1f8     55 AF 02 FB | 	rdlong	local05, local03
2d1fc     02 AE 86 F1 | 	sub	local05, #2
2d200     04 AA 86 F1 | 	sub	local03, #4
2d204     55 B7 02 FB | 	rdlong	local09, local03
2d208     14 AA 86 F1 | 	sub	local03, #20
2d20c     57 B7 1A F2 | 	cmp	local09, local05 wcz
2d210     14 AA 06 E1 |  if_be	add	local03, #20
2d214     55 B7 02 EB |  if_be	rdlong	local09, local03
2d218     01 B6 86 E1 |  if_be	sub	local09, #1
2d21c     55 B7 62 EC |  if_be	wrlong	local09, local03
2d220     14 AA 86 E1 |  if_be	sub	local03, #20
2d224     04 AA 06 F1 | 	add	local03, #4
2d228     55 AF C2 FA | 	rdbyte	local05, local03
2d22c     01 AE 46 F5 | 	or	local05, #1
2d230     55 AF 42 FC | 	wrbyte	local05, local03
2d234     08 00 90 FD | 	jmp	#LR__4760
2d238                 | LR__4759
2d238     01 B4 0E F2 | 	cmp	local08, #1 wz
2d23c     01 B0 C6 F6 | 	negz	local06, #1
2d240                 | LR__4760
2d240                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d240                 | ' 	}
2d240                 | ' 
2d240                 | ' 	return ncl;
2d240     58 7B 02 F6 | 	mov	result1, local06
2d244                 | LR__4761
2d244     E7 F0 03 F6 | 	mov	ptra, fp
2d248     F2 00 A0 FD | 	call	#popregs_
2d24c                 | _fatfs_cc_create_chain_ret
2d24c     2D 00 64 FD | 	ret
2d250                 | 
2d250                 | _fatfs_cc_dir_clear
2d250     06 CA 05 F6 | 	mov	COUNT_, #6
2d254     E8 00 A0 FD | 	call	#pushregs_
2d258     49 A7 02 F6 | 	mov	local01, arg01
2d25c     4A A9 02 F6 | 	mov	local02, arg02
2d260     53 93 02 F6 | 	mov	arg01, local01
2d264     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d268     00 7A 0E F2 | 	cmp	result1, #0 wz
2d26c     01 7A 06 56 |  if_ne	mov	result1, #1
2d270     90 00 90 5D |  if_ne	jmp	#LR__4772
2d274     53 93 02 F6 | 	mov	arg01, local01
2d278     54 95 02 F6 | 	mov	arg02, local02
2d27c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d280     3D AB 02 F6 | 	mov	local03, result1
2d284     30 A6 06 F1 | 	add	local01, #48
2d288     53 AB 62 FC | 	wrlong	local03, local01
2d28c     04 A6 06 F1 | 	add	local01, #4
2d290     53 93 02 F6 | 	mov	arg01, local01
2d294     00 94 06 F6 | 	mov	arg02, #0
2d298     09 96 C6 F9 | 	decod	arg03, #9
2d29c     D8 00 A0 FD | 	call	#\builtin_bytefill_
2d2a0     53 AD 02 F6 | 	mov	local04, local01
2d2a4                 | ' #line 1667 "ff.c"
2d2a4                 | ' 	{
2d2a4                 | ' 		ibuf = fs->win; szb = 1;
2d2a4                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d2a4     00 AE 06 F6 | 	mov	local05, #0
2d2a8     34 A6 86 F1 | 	sub	local01, #52
2d2ac                 | LR__4770
2d2ac     0A A6 06 F1 | 	add	local01, #10
2d2b0     53 B1 E2 FA | 	rdword	local06, local01
2d2b4     0A A6 86 F1 | 	sub	local01, #10
2d2b8     58 AF 12 F2 | 	cmp	local05, local06 wc
2d2bc     2C 00 90 3D |  if_ae	jmp	#LR__4771
2d2c0     01 A6 06 F1 | 	add	local01, #1
2d2c4     53 93 C2 FA | 	rdbyte	arg01, local01
2d2c8     01 A6 86 F1 | 	sub	local01, #1
2d2cc     56 95 02 F6 | 	mov	arg02, local04
2d2d0     55 97 02 F6 | 	mov	arg03, local03
2d2d4     57 97 02 F1 | 	add	arg03, local05
2d2d8     01 98 06 F6 | 	mov	arg04, #1
2d2dc     80 F1 BF FD | 	call	#_fatfs_cc_disk_write
2d2e0     00 7A 0E F2 | 	cmp	result1, #0 wz
2d2e4     01 AE 06 A1 |  if_e	add	local05, #1
2d2e8     C0 FF 9F AD |  if_e	jmp	#LR__4770
2d2ec                 | LR__4771
2d2ec                 | ' 	}
2d2ec                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d2ec     0A A6 06 F1 | 	add	local01, #10
2d2f0     53 AD E2 FA | 	rdword	local04, local01
2d2f4     56 AF 0A F2 | 	cmp	local05, local04 wz
2d2f8     00 B0 06 A6 |  if_e	mov	local06, #0
2d2fc     01 B0 06 56 |  if_ne	mov	local06, #1
2d300     58 7B 02 F6 | 	mov	result1, local06
2d304                 | LR__4772
2d304     E7 F0 03 F6 | 	mov	ptra, fp
2d308     F2 00 A0 FD | 	call	#popregs_
2d30c                 | _fatfs_cc_dir_clear_ret
2d30c     2D 00 64 FD | 	ret
2d310                 | 
2d310                 | _fatfs_cc_dir_sdi
2d310     06 CA 05 F6 | 	mov	COUNT_, #6
2d314     E8 00 A0 FD | 	call	#pushregs_
2d318     49 A7 02 F6 | 	mov	local01, arg01
2d31c     4A A9 02 F6 | 	mov	local02, arg02
2d320     53 AB 02 FB | 	rdlong	local03, local01
2d324     00 10 00 FF 
2d328     00 A8 16 F2 | 	cmp	local02, ##2097152 wc
2d32c     1F A8 CE C7 |  if_b	test	local02, #31 wz
2d330                 | ' 		return FR_INT_ERR;
2d330     02 7A 06 76 |  if_nc_or_nz	mov	result1, #2
2d334     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4786
2d338     10 A6 06 F1 | 	add	local01, #16
2d33c     53 A9 62 FC | 	wrlong	local02, local01
2d340     08 A6 86 F1 | 	sub	local01, #8
2d344     53 AD 0A FB | 	rdlong	local04, local01 wz
2d348     08 A6 86 F1 | 	sub	local01, #8
2d34c     55 AF C2 AA |  if_e	rdbyte	local05, local03
2d350     03 AE 16 A2 |  if_e	cmp	local05, #3 wc
2d354     28 AA 06 21 |  if_nc_and_z	add	local03, #40
2d358     55 AD 02 2B |  if_nc_and_z	rdlong	local04, local03
2d35c     28 AA 86 21 |  if_nc_and_z	sub	local03, #40
2d360     00 AC 0E F2 | 	cmp	local04, #0 wz
2d364     3C 00 90 5D |  if_ne	jmp	#LR__4780
2d368     54 AF 02 F6 | 	mov	local05, local02
2d36c     05 AE 46 F0 | 	shr	local05, #5
2d370     08 AA 06 F1 | 	add	local03, #8
2d374     55 95 E2 FA | 	rdword	arg02, local03
2d378     08 AA 86 F1 | 	sub	local03, #8
2d37c     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d380     02 7A 06 36 |  if_ae	mov	result1, #2
2d384     E4 00 90 3D |  if_ae	jmp	#LR__4786
2d388     28 AA 06 F1 | 	add	local03, #40
2d38c     55 AF 02 FB | 	rdlong	local05, local03
2d390     28 AA 86 F1 | 	sub	local03, #40
2d394     18 A6 06 F1 | 	add	local01, #24
2d398     53 AF 62 FC | 	wrlong	local05, local01
2d39c     18 A6 86 F1 | 	sub	local01, #24
2d3a0     7C 00 90 FD | 	jmp	#LR__4785
2d3a4                 | LR__4780
2d3a4     0A AA 06 F1 | 	add	local03, #10
2d3a8     55 B1 E2 FA | 	rdword	local06, local03
2d3ac     0A AA 86 F1 | 	sub	local03, #10
2d3b0     09 B0 66 F0 | 	shl	local06, #9
2d3b4                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d3b4                 | ' 		while (ofs >= csz) {
2d3b4                 | LR__4781
2d3b4     58 A9 12 F2 | 	cmp	local02, local06 wc
2d3b8     4C 00 90 CD |  if_b	jmp	#LR__4784
2d3bc     53 93 02 F6 | 	mov	arg01, local01
2d3c0     56 95 02 F6 | 	mov	arg02, local04
2d3c4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d3c8     3D AD 02 F6 | 	mov	local04, result1
2d3cc     FF FF 7F FF 
2d3d0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d3d4     01 7A 06 A6 |  if_e	mov	result1, #1
2d3d8     90 00 90 AD |  if_e	jmp	#LR__4786
2d3dc     02 AC 16 F2 | 	cmp	local04, #2 wc
2d3e0     14 00 90 CD |  if_b	jmp	#LR__4782
2d3e4     18 AA 06 F1 | 	add	local03, #24
2d3e8     55 AF 02 FB | 	rdlong	local05, local03
2d3ec     18 AA 86 F1 | 	sub	local03, #24
2d3f0     57 AD 12 F2 | 	cmp	local04, local05 wc
2d3f4     08 00 90 CD |  if_b	jmp	#LR__4783
2d3f8                 | LR__4782
2d3f8     02 7A 06 F6 | 	mov	result1, #2
2d3fc     6C 00 90 FD | 	jmp	#LR__4786
2d400                 | LR__4783
2d400     58 A9 82 F1 | 	sub	local02, local06
2d404     AC FF 9F FD | 	jmp	#LR__4781
2d408                 | LR__4784
2d408     55 93 02 F6 | 	mov	arg01, local03
2d40c     56 95 02 F6 | 	mov	arg02, local04
2d410     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d414     18 A6 06 F1 | 	add	local01, #24
2d418     53 7B 62 FC | 	wrlong	result1, local01
2d41c     18 A6 86 F1 | 	sub	local01, #24
2d420                 | LR__4785
2d420     14 A6 06 F1 | 	add	local01, #20
2d424     53 AD 62 FC | 	wrlong	local04, local01
2d428     04 A6 06 F1 | 	add	local01, #4
2d42c     53 AF 0A FB | 	rdlong	local05, local01 wz
2d430     18 A6 86 F1 | 	sub	local01, #24
2d434     02 7A 06 A6 |  if_e	mov	result1, #2
2d438     30 00 90 AD |  if_e	jmp	#LR__4786
2d43c     54 B1 02 F6 | 	mov	local06, local02
2d440     09 B0 46 F0 | 	shr	local06, #9
2d444     18 A6 06 F1 | 	add	local01, #24
2d448     53 AF 02 FB | 	rdlong	local05, local01
2d44c     58 AF 02 F1 | 	add	local05, local06
2d450     53 AF 62 FC | 	wrlong	local05, local01
2d454     34 AA 06 F1 | 	add	local03, #52
2d458     FF A9 06 F5 | 	and	local02, #511
2d45c     54 AB 02 F1 | 	add	local03, local02
2d460     04 A6 06 F1 | 	add	local01, #4
2d464     53 AB 62 FC | 	wrlong	local03, local01
2d468                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d468                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d468                 | ' 
2d468                 | ' 	return FR_OK;
2d468     00 7A 06 F6 | 	mov	result1, #0
2d46c                 | LR__4786
2d46c     E7 F0 03 F6 | 	mov	ptra, fp
2d470     F2 00 A0 FD | 	call	#popregs_
2d474                 | _fatfs_cc_dir_sdi_ret
2d474     2D 00 64 FD | 	ret
2d478                 | 
2d478                 | _fatfs_cc_dir_next
2d478     05 CA 05 F6 | 	mov	COUNT_, #5
2d47c     E8 00 A0 FD | 	call	#pushregs_
2d480     49 A7 02 F6 | 	mov	local01, arg01
2d484     4A A9 02 F6 | 	mov	local02, arg02
2d488     53 AB 02 FB | 	rdlong	local03, local01
2d48c     10 A6 06 F1 | 	add	local01, #16
2d490     53 AD 02 FB | 	rdlong	local04, local01
2d494     10 A6 86 F1 | 	sub	local01, #16
2d498     20 AC 06 F1 | 	add	local04, #32
2d49c     00 10 00 FF 
2d4a0     00 AC 16 F2 | 	cmp	local04, ##2097152 wc
2d4a4     18 A6 06 31 |  if_ae	add	local01, #24
2d4a8     53 01 68 3C |  if_ae	wrlong	#0, local01
2d4ac     18 A6 86 31 |  if_ae	sub	local01, #24
2d4b0     18 A6 06 F1 | 	add	local01, #24
2d4b4     53 95 0A FB | 	rdlong	arg02, local01 wz
2d4b8     18 A6 86 F1 | 	sub	local01, #24
2d4bc     04 7A 06 A6 |  if_e	mov	result1, #4
2d4c0     64 01 90 AD |  if_e	jmp	#LR__4795
2d4c4     FF AD CE F7 | 	test	local04, #511 wz
2d4c8     3C 01 90 5D |  if_ne	jmp	#LR__4794
2d4cc     18 A6 06 F1 | 	add	local01, #24
2d4d0     53 95 02 FB | 	rdlong	arg02, local01
2d4d4     01 94 06 F1 | 	add	arg02, #1
2d4d8     53 95 62 FC | 	wrlong	arg02, local01
2d4dc     04 A6 86 F1 | 	sub	local01, #4
2d4e0     53 95 0A FB | 	rdlong	arg02, local01 wz
2d4e4     14 A6 86 F1 | 	sub	local01, #20
2d4e8     2C 00 90 5D |  if_ne	jmp	#LR__4790
2d4ec     56 95 02 F6 | 	mov	arg02, local04
2d4f0     05 94 46 F0 | 	shr	arg02, #5
2d4f4     08 AA 06 F1 | 	add	local03, #8
2d4f8     55 A9 E2 FA | 	rdword	local02, local03
2d4fc     08 AA 86 F1 | 	sub	local03, #8
2d500     54 95 12 F2 | 	cmp	arg02, local02 wc
2d504     18 A6 06 31 |  if_ae	add	local01, #24
2d508     53 01 68 3C |  if_ae	wrlong	#0, local01
2d50c                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d50c     04 7A 06 36 |  if_ae	mov	result1, #4
2d510     14 01 90 3D |  if_ae	jmp	#LR__4795
2d514     F0 00 90 FD | 	jmp	#LR__4793
2d518                 | LR__4790
2d518     56 93 02 F6 | 	mov	arg01, local04
2d51c     09 92 46 F0 | 	shr	arg01, #9
2d520     0A AA 06 F1 | 	add	local03, #10
2d524     55 95 E2 FA | 	rdword	arg02, local03
2d528     0A AA 86 F1 | 	sub	local03, #10
2d52c     01 94 86 F1 | 	sub	arg02, #1
2d530     4A 93 CA F7 | 	test	arg01, arg02 wz
2d534     D0 00 90 5D |  if_ne	jmp	#LR__4792
2d538     53 93 02 F6 | 	mov	arg01, local01
2d53c     14 A6 06 F1 | 	add	local01, #20
2d540     53 95 02 FB | 	rdlong	arg02, local01
2d544     14 A6 86 F1 | 	sub	local01, #20
2d548     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d54c     3D AF 02 F6 | 	mov	local05, result1
2d550     02 AE 16 F2 | 	cmp	local05, #2 wc
2d554     02 7A 06 C6 |  if_b	mov	result1, #2
2d558     CC 00 90 CD |  if_b	jmp	#LR__4795
2d55c     FF FF 7F FF 
2d560     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d564     01 7A 06 A6 |  if_e	mov	result1, #1
2d568     BC 00 90 AD |  if_e	jmp	#LR__4795
2d56c     18 AA 06 F1 | 	add	local03, #24
2d570     55 95 02 FB | 	rdlong	arg02, local03
2d574     18 AA 86 F1 | 	sub	local03, #24
2d578     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d57c     68 00 90 CD |  if_b	jmp	#LR__4791
2d580     00 A8 0E F2 | 	cmp	local02, #0 wz
2d584     18 A6 06 A1 |  if_e	add	local01, #24
2d588     53 01 68 AC |  if_e	wrlong	#0, local01
2d58c                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d58c     04 7A 06 A6 |  if_e	mov	result1, #4
2d590     94 00 90 AD |  if_e	jmp	#LR__4795
2d594     53 93 02 F6 | 	mov	arg01, local01
2d598     14 A6 06 F1 | 	add	local01, #20
2d59c     53 95 02 FB | 	rdlong	arg02, local01
2d5a0     14 A6 86 F1 | 	sub	local01, #20
2d5a4     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d5a8     3D AF 0A F6 | 	mov	local05, result1 wz
2d5ac     07 7A 06 A6 |  if_e	mov	result1, #7
2d5b0     74 00 90 AD |  if_e	jmp	#LR__4795
2d5b4     01 AE 0E F2 | 	cmp	local05, #1 wz
2d5b8     02 7A 06 A6 |  if_e	mov	result1, #2
2d5bc     68 00 90 AD |  if_e	jmp	#LR__4795
2d5c0     FF FF 7F FF 
2d5c4     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d5c8     01 7A 06 A6 |  if_e	mov	result1, #1
2d5cc     58 00 90 AD |  if_e	jmp	#LR__4795
2d5d0     57 95 02 F6 | 	mov	arg02, local05
2d5d4     55 93 02 F6 | 	mov	arg01, local03
2d5d8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d5dc     00 7A 0E F2 | 	cmp	result1, #0 wz
2d5e0     01 7A 06 56 |  if_ne	mov	result1, #1
2d5e4     40 00 90 5D |  if_ne	jmp	#LR__4795
2d5e8                 | LR__4791
2d5e8     14 A6 06 F1 | 	add	local01, #20
2d5ec     53 AF 62 FC | 	wrlong	local05, local01
2d5f0     55 93 02 F6 | 	mov	arg01, local03
2d5f4     57 95 02 F6 | 	mov	arg02, local05
2d5f8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d5fc     04 A6 06 F1 | 	add	local01, #4
2d600     53 7B 62 FC | 	wrlong	result1, local01
2d604     18 A6 86 F1 | 	sub	local01, #24
2d608                 | LR__4792
2d608                 | LR__4793
2d608                 | LR__4794
2d608     10 A6 06 F1 | 	add	local01, #16
2d60c     53 AD 62 FC | 	wrlong	local04, local01
2d610     34 AA 06 F1 | 	add	local03, #52
2d614     FF AD 06 F5 | 	and	local04, #511
2d618     56 AB 02 F1 | 	add	local03, local04
2d61c     0C A6 06 F1 | 	add	local01, #12
2d620     53 AB 62 FC | 	wrlong	local03, local01
2d624                 | ' #line 1771 "ff.c"
2d624                 | ' 				}
2d624                 | ' 				dp->clust = clst;
2d624                 | ' 				dp->sect = clst2sect(fs, clst);
2d624                 | ' 			}
2d624                 | ' 		}
2d624                 | ' 	}
2d624                 | ' 	dp->dptr = ofs;
2d624                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d624                 | ' 
2d624                 | ' 	return FR_OK;
2d624     00 7A 06 F6 | 	mov	result1, #0
2d628                 | LR__4795
2d628     E7 F0 03 F6 | 	mov	ptra, fp
2d62c     F2 00 A0 FD | 	call	#popregs_
2d630                 | _fatfs_cc_dir_next_ret
2d630     2D 00 64 FD | 	ret
2d634                 | 
2d634                 | _fatfs_cc_dir_alloc
2d634     08 CA 05 F6 | 	mov	COUNT_, #8
2d638     E8 00 A0 FD | 	call	#pushregs_
2d63c     49 A7 02 F6 | 	mov	local01, arg01
2d640     4A A9 02 F6 | 	mov	local02, arg02
2d644     53 AB 02 FB | 	rdlong	local03, local01
2d648     53 93 02 F6 | 	mov	arg01, local01
2d64c     00 94 06 F6 | 	mov	arg02, #0
2d650     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d654     3D AD 0A F6 | 	mov	local04, result1 wz
2d658     70 00 90 5D |  if_ne	jmp	#LR__4804
2d65c     00 AE 06 F6 | 	mov	local05, #0
2d660                 | ' 		n = 0;
2d660                 | ' 		do {
2d660                 | LR__4800
2d660     18 A6 06 F1 | 	add	local01, #24
2d664     53 95 02 FB | 	rdlong	arg02, local01
2d668     18 A6 86 F1 | 	sub	local01, #24
2d66c     55 93 02 F6 | 	mov	arg01, local03
2d670     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d674     3D AD 0A F6 | 	mov	local04, result1 wz
2d678     50 00 90 5D |  if_ne	jmp	#LR__4803
2d67c     1C A6 06 F1 | 	add	local01, #28
2d680     53 B1 02 FB | 	rdlong	local06, local01
2d684     1C A6 86 F1 | 	sub	local01, #28
2d688     58 B1 C2 FA | 	rdbyte	local06, local06
2d68c     E5 B0 0E F2 | 	cmp	local06, #229 wz
2d690     1C A6 06 51 |  if_ne	add	local01, #28
2d694     53 B3 02 5B |  if_ne	rdlong	local07, local01
2d698     1C A6 86 51 |  if_ne	sub	local01, #28
2d69c     59 B5 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d6a0     10 00 90 5D |  if_ne	jmp	#LR__4801
2d6a4     01 AE 06 F1 | 	add	local05, #1
2d6a8     54 AF 0A F2 | 	cmp	local05, local02 wz
2d6ac     1C 00 90 AD |  if_e	jmp	#LR__4803
2d6b0     04 00 90 FD | 	jmp	#LR__4802
2d6b4                 | LR__4801
2d6b4     00 AE 06 F6 | 	mov	local05, #0
2d6b8                 | LR__4802
2d6b8     53 93 02 F6 | 	mov	arg01, local01
2d6bc     01 94 06 F6 | 	mov	arg02, #1
2d6c0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d6c4     3D AD 0A F6 | 	mov	local04, result1 wz
2d6c8     94 FF 9F AD |  if_e	jmp	#LR__4800
2d6cc                 | LR__4803
2d6cc                 | LR__4804
2d6cc     04 AC 0E F2 | 	cmp	local04, #4 wz
2d6d0     07 AC 06 A6 |  if_e	mov	local04, #7
2d6d4                 | ' 	return res;
2d6d4     56 7B 02 F6 | 	mov	result1, local04
2d6d8     E7 F0 03 F6 | 	mov	ptra, fp
2d6dc     F2 00 A0 FD | 	call	#popregs_
2d6e0                 | _fatfs_cc_dir_alloc_ret
2d6e0     2D 00 64 FD | 	ret
2d6e4                 | 
2d6e4                 | _fatfs_cc_ld_clust
2d6e4     49 81 02 F6 | 	mov	_var01, arg01
2d6e8     4A 93 02 F6 | 	mov	arg01, arg02
2d6ec     1A 92 06 F1 | 	add	arg01, #26
2d6f0                 | ' {
2d6f0                 | ' 
2d6f0                 | ' 	return *((WORD*)ptr);
2d6f0     49 7B E2 FA | 	rdword	result1, arg01
2d6f4     3D 93 32 F9 | 	getword	arg01, result1, #0
2d6f8     40 81 C2 FA | 	rdbyte	_var01, _var01
2d6fc     03 80 0E F2 | 	cmp	_var01, #3 wz
2d700     14 94 06 A1 |  if_e	add	arg02, #20
2d704                 | ' {
2d704                 | ' 
2d704                 | ' 	return *((WORD*)ptr);
2d704     4A 7B E2 AA |  if_e	rdword	result1, arg02
2d708     10 7A 66 A0 |  if_e	shl	result1, #16
2d70c     3D 93 42 A5 |  if_e	or	arg01, result1
2d710                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d710                 | ' 	}
2d710                 | ' 
2d710                 | ' 	return cl;
2d710     49 7B 02 F6 | 	mov	result1, arg01
2d714                 | _fatfs_cc_ld_clust_ret
2d714     2D 00 64 FD | 	ret
2d718                 | 
2d718                 | _fatfs_cc_st_clust
2d718     49 81 02 F6 | 	mov	_var01, arg01
2d71c     4A 93 02 F6 | 	mov	arg01, arg02
2d720     1A 92 06 F1 | 	add	arg01, #26
2d724     49 97 52 FC | 	wrword	arg03, arg01
2d728     40 81 C2 FA | 	rdbyte	_var01, _var01
2d72c     03 80 0E F2 | 	cmp	_var01, #3 wz
2d730     14 94 06 A1 |  if_e	add	arg02, #20
2d734     10 96 46 A0 |  if_e	shr	arg03, #16
2d738     4A 97 52 AC |  if_e	wrword	arg03, arg02
2d73c                 | _fatfs_cc_st_clust_ret
2d73c     2D 00 64 FD | 	ret
2d740                 | 
2d740                 | _fatfs_cc_cmp_lfn
2d740     07 CA 05 F6 | 	mov	COUNT_, #7
2d744     E8 00 A0 FD | 	call	#pushregs_
2d748     49 A7 02 F6 | 	mov	local01, arg01
2d74c     4A 93 02 F6 | 	mov	arg01, arg02
2d750     1A 92 06 F1 | 	add	arg01, #26
2d754                 | ' {
2d754                 | ' 
2d754                 | ' 	return *((WORD*)ptr);
2d754     49 7B EA FA | 	rdword	result1, arg01 wz
2d758     00 7A 06 56 |  if_ne	mov	result1, #0
2d75c     D8 00 90 5D |  if_ne	jmp	#LR__4816
2d760     4A A9 C2 FA | 	rdbyte	local02, arg02
2d764     3F A8 06 F5 | 	and	local02, #63
2d768     01 A8 86 F1 | 	sub	local02, #1
2d76c     0D A8 06 FD | 	qmul	local02, #13
2d770                 | ' 
2d770                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d770                 | ' 
2d770                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d770     01 AA 06 F6 | 	mov	local03, #1
2d774     00 AC 06 F6 | 	mov	local04, #0
2d778     18 AE 62 FD | 	getqx	local05
2d77c                 | LR__4810
2d77c     0D AC 16 F2 | 	cmp	local04, #13 wc
2d780     94 00 90 3D |  if_ae	jmp	#LR__4815
2d784     4A 93 02 F6 | 	mov	arg01, arg02
2d788     56 A9 02 F6 | 	mov	local02, local04
2d78c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d790     01 00 00 FF 
2d794     AE 7B 06 F1 | 	add	result1, ##942
2d798     3D A9 02 F1 | 	add	local02, result1
2d79c     54 A9 C2 FA | 	rdbyte	local02, local02
2d7a0     54 93 02 F1 | 	add	arg01, local02
2d7a4                 | ' {
2d7a4                 | ' 
2d7a4                 | ' 	return *((WORD*)ptr);
2d7a4     49 7B E2 FA | 	rdword	result1, arg01
2d7a8     3D B1 02 F6 | 	mov	local06, result1
2d7ac     55 A9 02 F6 | 	mov	local02, local03
2d7b0     0F A8 4E F7 | 	zerox	local02, #15 wz
2d7b4     44 00 90 AD |  if_e	jmp	#LR__4813
2d7b8     00 AF 16 F2 | 	cmp	local05, #256 wc
2d7bc     2C 00 90 3D |  if_ae	jmp	#LR__4811
2d7c0     58 93 32 F9 | 	getword	arg01, local06, #0
2d7c4     CC E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d7c8     3D A9 02 F6 | 	mov	local02, result1
2d7cc     57 AB 02 F6 | 	mov	local03, local05
2d7d0     01 AA 66 F0 | 	shl	local03, #1
2d7d4     53 AB 02 F1 | 	add	local03, local01
2d7d8     55 93 E2 FA | 	rdword	arg01, local03
2d7dc     01 AE 06 F1 | 	add	local05, #1
2d7e0     B0 E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d7e4     3D A9 0A F2 | 	cmp	local02, result1 wz
2d7e8     08 00 90 AD |  if_e	jmp	#LR__4812
2d7ec                 | LR__4811
2d7ec                 | ' 				return 0;
2d7ec     00 7A 06 F6 | 	mov	result1, #0
2d7f0     44 00 90 FD | 	jmp	#LR__4816
2d7f4                 | LR__4812
2d7f4     58 AB 02 F6 | 	mov	local03, local06
2d7f8     14 00 90 FD | 	jmp	#LR__4814
2d7fc                 | LR__4813
2d7fc     58 B1 32 F9 | 	getword	local06, local06, #0
2d800     7F 00 00 FF 
2d804     FF B1 0E F2 | 	cmp	local06, ##65535 wz
2d808     00 7A 06 56 |  if_ne	mov	result1, #0
2d80c     28 00 90 5D |  if_ne	jmp	#LR__4816
2d810                 | LR__4814
2d810     01 AC 06 F1 | 	add	local04, #1
2d814     64 FF 9F FD | 	jmp	#LR__4810
2d818                 | LR__4815
2d818     4A A9 C2 FA | 	rdbyte	local02, arg02
2d81c     40 A8 CE F7 | 	test	local02, #64 wz
2d820     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2d824     01 AE 66 50 |  if_ne	shl	local05, #1
2d828     53 AF 02 51 |  if_ne	add	local05, local01
2d82c     57 B3 EA 5A |  if_ne	rdword	local07, local05 wz
2d830     00 7A 06 56 |  if_ne	mov	result1, #0
2d834                 | ' 
2d834                 | ' 	return 1;
2d834     01 7A 06 A6 |  if_e	mov	result1, #1
2d838                 | LR__4816
2d838     E7 F0 03 F6 | 	mov	ptra, fp
2d83c     F2 00 A0 FD | 	call	#popregs_
2d840                 | _fatfs_cc_cmp_lfn_ret
2d840     2D 00 64 FD | 	ret
2d844                 | 
2d844                 | _fatfs_cc_pick_lfn
2d844     49 81 02 F6 | 	mov	_var01, arg01
2d848     4A 93 02 F6 | 	mov	arg01, arg02
2d84c     1A 92 06 F1 | 	add	arg01, #26
2d850                 | ' {
2d850                 | ' 
2d850                 | ' 	return *((WORD*)ptr);
2d850     49 7B EA FA | 	rdword	result1, arg01 wz
2d854     00 7A 06 56 |  if_ne	mov	result1, #0
2d858     CC 00 90 5D |  if_ne	jmp	#LR__4825
2d85c     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d860     40 82 26 F5 | 	andn	_var02, #64
2d864     01 82 86 F1 | 	sub	_var02, #1
2d868     0D 82 06 FD | 	qmul	_var02, #13
2d86c                 | ' 
2d86c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d86c                 | ' 
2d86c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d86c     01 84 06 F6 | 	mov	_var03, #1
2d870     00 86 06 F6 | 	mov	_var04, #0
2d874     18 88 62 FD | 	getqx	_var05
2d878                 | LR__4820
2d878     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d87c     78 00 90 3D |  if_ae	jmp	#LR__4823
2d880     4A 93 02 F6 | 	mov	arg01, arg02
2d884     43 83 02 F6 | 	mov	_var02, _var04
2d888     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d88c     01 00 00 FF 
2d890     AE 7B 06 F1 | 	add	result1, ##942
2d894     3D 83 02 F1 | 	add	_var02, result1
2d898     41 83 C2 FA | 	rdbyte	_var02, _var02
2d89c     41 93 02 F1 | 	add	arg01, _var02
2d8a0                 | ' {
2d8a0                 | ' 
2d8a0                 | ' 	return *((WORD*)ptr);
2d8a0     49 7B E2 FA | 	rdword	result1, arg01
2d8a4     3D 8B 02 F6 | 	mov	_var06, result1
2d8a8     42 83 02 F6 | 	mov	_var02, _var03
2d8ac     0F 82 4E F7 | 	zerox	_var02, #15 wz
2d8b0     28 00 90 AD |  if_e	jmp	#LR__4821
2d8b4     00 89 16 F2 | 	cmp	_var05, #256 wc
2d8b8     00 7A 06 36 |  if_ae	mov	result1, #0
2d8bc     68 00 90 3D |  if_ae	jmp	#LR__4825
2d8c0     44 83 02 F6 | 	mov	_var02, _var05
2d8c4     01 82 66 F0 | 	shl	_var02, #1
2d8c8     40 83 02 F1 | 	add	_var02, _var01
2d8cc     45 85 02 F6 | 	mov	_var03, _var06
2d8d0     41 85 52 FC | 	wrword	_var03, _var02
2d8d4     01 88 06 F1 | 	add	_var05, #1
2d8d8     14 00 90 FD | 	jmp	#LR__4822
2d8dc                 | LR__4821
2d8dc     45 8B 32 F9 | 	getword	_var06, _var06, #0
2d8e0     7F 00 00 FF 
2d8e4     FF 8B 0E F2 | 	cmp	_var06, ##65535 wz
2d8e8     00 7A 06 56 |  if_ne	mov	result1, #0
2d8ec     38 00 90 5D |  if_ne	jmp	#LR__4825
2d8f0                 | LR__4822
2d8f0     01 86 06 F1 | 	add	_var04, #1
2d8f4     80 FF 9F FD | 	jmp	#LR__4820
2d8f8                 | LR__4823
2d8f8     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d8fc     40 82 CE F7 | 	test	_var02, #64 wz
2d900     42 8D 02 56 |  if_ne	mov	_var07, _var03
2d904     0F 8C 4E 57 |  if_ne	zerox	_var07, #15 wz
2d908     18 00 90 AD |  if_e	jmp	#LR__4824
2d90c     00 89 16 F2 | 	cmp	_var05, #256 wc
2d910     00 7A 06 36 |  if_ae	mov	result1, #0
2d914     10 00 90 3D |  if_ae	jmp	#LR__4825
2d918     01 88 66 F0 | 	shl	_var05, #1
2d91c     40 89 02 F1 | 	add	_var05, _var01
2d920     44 01 58 FC | 	wrword	#0, _var05
2d924                 | LR__4824
2d924                 | ' 		lfnbuf[i] = 0;
2d924                 | ' 	}
2d924                 | ' 
2d924                 | ' 	return 1;
2d924     01 7A 06 F6 | 	mov	result1, #1
2d928                 | LR__4825
2d928                 | _fatfs_cc_pick_lfn_ret
2d928     2D 00 64 FD | 	ret
2d92c                 | 
2d92c                 | _fatfs_cc_put_lfn
2d92c     4A 81 02 F6 | 	mov	_var01, arg02
2d930     0D 80 06 F1 | 	add	_var01, #13
2d934     40 99 42 FC | 	wrbyte	arg04, _var01
2d938     4B 99 E2 F8 | 	getbyte	arg04, arg03, #0
2d93c     01 98 86 F1 | 	sub	arg04, #1
2d940     0D 98 06 FD | 	qmul	arg04, #13
2d944     49 83 02 F6 | 	mov	_var02, arg01
2d948     02 80 86 F1 | 	sub	_var01, #2
2d94c     40 1F 48 FC | 	wrbyte	#15, _var01
2d950     01 80 06 F1 | 	add	_var01, #1
2d954     40 01 48 FC | 	wrbyte	#0, _var01
2d958     0C 80 86 F1 | 	sub	_var01, #12
2d95c     40 93 02 F6 | 	mov	arg01, _var01
2d960     1A 92 06 F1 | 	add	arg01, #26
2d964     49 01 58 FC | 	wrword	#0, arg01
2d968     00 84 06 F6 | 	mov	_var03, #0
2d96c     00 86 06 F6 | 	mov	_var04, #0
2d970                 | ' 	BYTE* dir,
2d970                 | ' 	BYTE ord,
2d970                 | ' 	BYTE sum
2d970                 | ' )
2d970                 | ' {
2d970                 | ' 	UINT i, s;
2d970                 | ' 	WCHAR wc;
2d970                 | ' 
2d970                 | ' 
2d970                 | ' 	dir[ 13 ] = sum;
2d970                 | ' 	dir[ 11 ] =  0x0F ;
2d970                 | ' 	dir[ 12 ] = 0;
2d970                 | ' 	st_word(dir +  26 , 0);
2d970                 | ' 
2d970                 | ' 	i = (ord - 1) * 13;
2d970                 | ' 	s = wc = 0;
2d970                 | ' 	do {
2d970     18 88 62 FD | 	getqx	_var05
2d974     D7 2E 48 FB | 	callpa	#(@LR__4831-@LR__4830)>>2,fcache_load_ptr_
2d978                 | LR__4830
2d978     42 99 32 F9 | 	getword	arg04, _var03, #0
2d97c     7F 00 00 FF 
2d980     FF 99 0E F2 | 	cmp	arg04, ##65535 wz
2d984     44 93 02 56 |  if_ne	mov	arg01, _var05
2d988     01 88 06 51 |  if_ne	add	_var05, #1
2d98c     01 92 66 50 |  if_ne	shl	arg01, #1
2d990     41 93 02 51 |  if_ne	add	arg01, _var02
2d994     49 85 E2 5A |  if_ne	rdword	_var03, arg01
2d998     40 93 02 F6 | 	mov	arg01, _var01
2d99c     43 99 02 F6 | 	mov	arg04, _var04
2d9a0     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2d9a4     01 00 00 FF 
2d9a8     AE 95 06 F1 | 	add	arg02, ##942
2d9ac     4A 99 02 F1 | 	add	arg04, arg02
2d9b0     4C 99 C2 FA | 	rdbyte	arg04, arg04
2d9b4     4C 93 02 F1 | 	add	arg01, arg04
2d9b8     49 85 52 FC | 	wrword	_var03, arg01
2d9bc     42 99 02 F6 | 	mov	arg04, _var03
2d9c0     0F 98 4E F7 | 	zerox	arg04, #15 wz
2d9c4     0F 84 CE A9 |  if_e	bmask	_var03, #15
2d9c8     01 86 06 F1 | 	add	_var04, #1
2d9cc     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d9d0     A4 FF 9F CD |  if_b	jmp	#LR__4830
2d9d4                 | LR__4831
2d9d4     42 85 32 F9 | 	getword	_var03, _var03, #0
2d9d8     7F 00 00 FF 
2d9dc     FF 85 0E F2 | 	cmp	_var03, ##65535 wz
2d9e0     01 88 66 50 |  if_ne	shl	_var05, #1
2d9e4     41 89 02 51 |  if_ne	add	_var05, _var02
2d9e8     44 89 EA 5A |  if_ne	rdword	_var05, _var05 wz
2d9ec     4B 97 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2d9f0     40 96 46 A5 |  if_e	or	arg03, #64
2d9f4     40 97 42 FC | 	wrbyte	arg03, _var01
2d9f8                 | _fatfs_cc_put_lfn_ret
2d9f8     2D 00 64 FD | 	ret
2d9fc                 | 
2d9fc                 | _fatfs_cc_gen_numname
2d9fc     08 CA 05 F6 | 	mov	COUNT_, #8
2da00     E8 00 A0 FD | 	call	#pushregs_
2da04     2C F0 07 F1 | 	add	ptra, #44
2da08     49 A7 02 F6 | 	mov	local01, arg01
2da0c     4A A9 02 F6 | 	mov	local02, arg02
2da10     4B AB 02 F6 | 	mov	local03, arg03
2da14     4C AD 02 F6 | 	mov	local04, arg04
2da18     53 93 02 F6 | 	mov	arg01, local01
2da1c     54 95 02 F6 | 	mov	arg02, local02
2da20     0B 96 06 F6 | 	mov	arg03, #11
2da24     84 6E BF FD | 	call	#__system____builtin_memmove
2da28     06 AC 16 F2 | 	cmp	local04, #6 wc
2da2c     48 00 90 CD |  if_b	jmp	#LR__4845
2da30     56 AF 02 F6 | 	mov	local05, local04
2da34     D7 1E 48 FB | 	callpa	#(@LR__4843-@LR__4840)>>2,fcache_load_ptr_
2da38                 | ' 		sreg = seq;
2da38                 | ' 		while (*lfn) {
2da38                 | LR__4840
2da38     55 B1 EA FA | 	rdword	local06, local03 wz
2da3c     34 00 90 AD |  if_e	jmp	#LR__4844
2da40     55 B3 E2 FA | 	rdword	local07, local03
2da44                 | ' 			wc = *lfn++;
2da44                 | ' 			for (i = 0; i < 16; i++) {
2da44     02 AA 06 F1 | 	add	local03, #2
2da48     10 12 DC FC | 	rep	@LR__4842, #16
2da4c                 | LR__4841
2da4c     01 AE 66 F0 | 	shl	local05, #1
2da50     59 B1 32 F9 | 	getword	local06, local07, #0
2da54     01 B0 06 F5 | 	and	local06, #1
2da58     58 AF 02 F1 | 	add	local05, local06
2da5c     59 B3 32 F9 | 	getword	local07, local07, #0
2da60     01 B2 46 F0 | 	shr	local07, #1
2da64     10 AE 2E F4 | 	testbn	local05, #16 wz
2da68     88 00 00 5F 
2da6c     21 AE 66 55 |  if_ne	xor	local05, ##69665
2da70                 | LR__4842
2da70     C4 FF 9F FD | 	jmp	#LR__4840
2da74                 | LR__4843
2da74                 | LR__4844
2da74     57 AD 02 F6 | 	mov	local04, local05
2da78                 | LR__4845
2da78     07 B2 06 F6 | 	mov	local07, #7
2da7c     D7 1E 48 FB | 	callpa	#(@LR__4847-@LR__4846)>>2,fcache_load_ptr_
2da80                 | ' 			}
2da80                 | ' 		}
2da80                 | ' 		seq = (UINT)sreg;
2da80                 | ' 	}
2da80                 | ' 
2da80                 | ' 
2da80                 | ' 	i = 7;
2da80                 | ' 	do {
2da80                 | LR__4846
2da80     56 AF 42 F8 | 	getnib	local05, local04, #0
2da84     30 AE 06 F1 | 	add	local05, #48
2da88     04 AC 46 F0 | 	shr	local04, #4
2da8c     57 B1 E2 F8 | 	getbyte	local06, local05, #0
2da90     3A B0 16 F2 | 	cmp	local06, #58 wc
2da94     57 AF E2 38 |  if_ae	getbyte	local05, local05, #0
2da98     07 AE 06 31 |  if_ae	add	local05, #7
2da9c     59 B1 02 F6 | 	mov	local06, local07
2daa0     01 B2 8E F1 | 	sub	local07, #1 wz
2daa4     E7 AA 02 F6 | 	mov	local03, fp
2daa8     10 AA 06 F1 | 	add	local03, #16
2daac     55 B1 02 F1 | 	add	local06, local03
2dab0     58 AF 42 FC | 	wrbyte	local05, local06
2dab4     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
2dab8     C4 FF 9F 5D |  if_ne	jmp	#LR__4846
2dabc                 | LR__4847
2dabc     59 B1 02 F6 | 	mov	local06, local07
2dac0     E7 AE 02 F6 | 	mov	local05, fp
2dac4     10 AE 06 F1 | 	add	local05, #16
2dac8     57 B1 02 F1 | 	add	local06, local05
2dacc     58 FD 48 FC | 	wrbyte	#126, local06
2dad0                 | ' 	ns[i] = '~';
2dad0                 | ' 
2dad0                 | ' 
2dad0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2dad0     00 AC 06 F6 | 	mov	local04, #0
2dad4     D7 2A 48 FB | 	callpa	#(@LR__4850-@LR__4848)>>2,fcache_load_ptr_
2dad8                 | LR__4848
2dad8     59 AD 12 F2 | 	cmp	local04, local07 wc
2dadc     4C 00 90 3D |  if_ae	jmp	#LR__4851
2dae0     56 AF 02 F6 | 	mov	local05, local04
2dae4     53 AF 02 F1 | 	add	local05, local01
2dae8     57 B1 C2 FA | 	rdbyte	local06, local05
2daec     20 B0 0E F2 | 	cmp	local06, #32 wz
2daf0     38 00 90 AD |  if_e	jmp	#LR__4851
2daf4     56 AB 02 F6 | 	mov	local03, local04
2daf8     53 AB 02 F1 | 	add	local03, local01
2dafc     55 93 CA FA | 	rdbyte	arg01, local03 wz
2db00     00 7A 06 56 |  if_ne	mov	result1, #0
2db04                 | ' 
2db04                 | ' 	return 0;
2db04     00 7A 06 A6 |  if_e	mov	result1, #0
2db08     00 7A 0E F2 | 	cmp	result1, #0 wz
2db0c     14 00 90 AD |  if_e	jmp	#LR__4849
2db10     59 AB 02 F6 | 	mov	local03, local07
2db14     01 AA 86 F1 | 	sub	local03, #1
2db18     55 AD 0A F2 | 	cmp	local04, local03 wz
2db1c     0C 00 90 AD |  if_e	jmp	#LR__4851
2db20     01 AC 06 F1 | 	add	local04, #1
2db24                 | LR__4849
2db24     01 AC 06 F1 | 	add	local04, #1
2db28     AC FF 9F FD | 	jmp	#LR__4848
2db2c                 | LR__4850
2db2c                 | LR__4851
2db2c     D7 20 48 FB | 	callpa	#(@LR__4855-@LR__4852)>>2,fcache_load_ptr_
2db30                 | ' 			j++;
2db30                 | ' 		}
2db30                 | ' 	}
2db30                 | ' 	do {
2db30                 | LR__4852
2db30     56 B1 02 F6 | 	mov	local06, local04
2db34     53 B1 02 F1 | 	add	local06, local01
2db38     08 B2 16 F2 | 	cmp	local07, #8 wc
2db3c     01 AC 06 F1 | 	add	local04, #1
2db40     1C 00 90 3D |  if_ae	jmp	#LR__4853
2db44     59 AF 02 F6 | 	mov	local05, local07
2db48     E7 AA 02 F6 | 	mov	local03, fp
2db4c     10 AA 06 F1 | 	add	local03, #16
2db50     55 AF 02 F1 | 	add	local05, local03
2db54     57 B5 C2 FA | 	rdbyte	local08, local05
2db58     01 B2 06 F1 | 	add	local07, #1
2db5c     04 00 90 FD | 	jmp	#LR__4854
2db60                 | LR__4853
2db60     20 B4 06 F6 | 	mov	local08, #32
2db64                 | LR__4854
2db64     58 B5 42 FC | 	wrbyte	local08, local06
2db68     08 AC 16 F2 | 	cmp	local04, #8 wc
2db6c     C0 FF 9F CD |  if_b	jmp	#LR__4852
2db70                 | LR__4855
2db70     E7 F0 03 F6 | 	mov	ptra, fp
2db74     F2 00 A0 FD | 	call	#popregs_
2db78                 | _fatfs_cc_gen_numname_ret
2db78     2D 00 64 FD | 	ret
2db7c                 | 
2db7c                 | _fatfs_cc_sum_sfn
2db7c     00 80 06 F6 | 	mov	_var01, #0
2db80                 | ' )
2db80                 | ' {
2db80                 | ' 	BYTE sum = 0;
2db80                 | ' 	UINT n = 11;
2db80                 | ' 
2db80                 | ' 	do {
2db80     D7 12 48 FB | 	callpa	#(@LR__4862-@LR__4860)>>2,fcache_load_ptr_
2db84                 | LR__4860
2db84     0B 10 DC FC | 	rep	@LR__4863, #11
2db88                 | LR__4861
2db88     40 7B E2 F8 | 	getbyte	result1, _var01, #0
2db8c     01 7A 46 F0 | 	shr	result1, #1
2db90     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2db94     07 80 66 F0 | 	shl	_var01, #7
2db98     40 7B 02 F1 | 	add	result1, _var01
2db9c     49 81 C2 FA | 	rdbyte	_var01, arg01
2dba0     3D 81 02 F1 | 	add	_var01, result1
2dba4     01 92 06 F1 | 	add	arg01, #1
2dba8                 | LR__4862
2dba8                 | LR__4863
2dba8                 | ' 	return sum;
2dba8     40 7B 02 F6 | 	mov	result1, _var01
2dbac                 | _fatfs_cc_sum_sfn_ret
2dbac     2D 00 64 FD | 	ret
2dbb0                 | 
2dbb0                 | _fatfs_cc_dir_read
2dbb0     0C CA 05 F6 | 	mov	COUNT_, #12
2dbb4     E8 00 A0 FD | 	call	#pushregs_
2dbb8     49 A7 02 F6 | 	mov	local01, arg01
2dbbc     4A A9 02 F6 | 	mov	local02, arg02
2dbc0     04 AA 06 F6 | 	mov	local03, #4
2dbc4     53 AD 02 FB | 	rdlong	local04, local01
2dbc8     FF AE 06 F6 | 	mov	local05, #255
2dbcc     FF B0 06 F6 | 	mov	local06, #255
2dbd0                 | ' )
2dbd0                 | ' {
2dbd0                 | ' 	FRESULT res = FR_NO_FILE;
2dbd0                 | ' 	FATFS *fs = dp->obj.fs;
2dbd0                 | ' 	BYTE attr, b;
2dbd0                 | ' 
2dbd0                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2dbd0                 | ' 
2dbd0                 | ' 
2dbd0                 | ' 	while (dp->sect) {
2dbd0                 | LR__4870
2dbd0     18 A6 06 F1 | 	add	local01, #24
2dbd4     53 7B 0A FB | 	rdlong	result1, local01 wz
2dbd8     18 A6 86 F1 | 	sub	local01, #24
2dbdc     AC 01 90 AD |  if_e	jmp	#LR__4880
2dbe0     18 A6 06 F1 | 	add	local01, #24
2dbe4     53 95 02 FB | 	rdlong	arg02, local01
2dbe8     18 A6 86 F1 | 	sub	local01, #24
2dbec     56 93 02 F6 | 	mov	arg01, local04
2dbf0     B8 ED BF FD | 	call	#_fatfs_cc_move_window
2dbf4     3D AB 0A F6 | 	mov	local03, result1 wz
2dbf8     90 01 90 5D |  if_ne	jmp	#LR__4880
2dbfc     1C A6 06 F1 | 	add	local01, #28
2dc00     53 7B 02 FB | 	rdlong	result1, local01
2dc04     1C A6 86 F1 | 	sub	local01, #28
2dc08     3D B3 C2 FA | 	rdbyte	local07, result1
2dc0c     59 7B 02 F6 | 	mov	result1, local07
2dc10     07 7A 4E F7 | 	zerox	result1, #7 wz
2dc14     04 AA 06 A6 |  if_e	mov	local03, #4
2dc18                 | ' 			res = FR_NO_FILE; break;
2dc18     70 01 90 AD |  if_e	jmp	#LR__4880
2dc1c     1C A6 06 F1 | 	add	local01, #28
2dc20     53 B5 02 FB | 	rdlong	local08, local01
2dc24     0B B4 06 F1 | 	add	local08, #11
2dc28     5A B7 C2 FA | 	rdbyte	local09, local08
2dc2c     3F B6 06 F5 | 	and	local09, #63
2dc30     16 A6 86 F1 | 	sub	local01, #22
2dc34     53 B7 42 FC | 	wrbyte	local09, local01
2dc38     06 A6 86 F1 | 	sub	local01, #6
2dc3c     59 7B E2 F8 | 	getbyte	result1, local07, #0
2dc40     E5 7A 0E F2 | 	cmp	result1, #229 wz
2dc44     59 B5 02 56 |  if_ne	mov	local08, local07
2dc48     5A B5 E2 58 |  if_ne	getbyte	local08, local08, #0
2dc4c     2E B4 0E 52 |  if_ne	cmp	local08, #46 wz
2dc50     1C 00 90 AD |  if_e	jmp	#LR__4871
2dc54     00 B8 06 F6 | 	mov	local10, #0
2dc58     5B B5 E2 F8 | 	getbyte	local08, local09, #0
2dc5c     20 B4 26 F5 | 	andn	local08, #32
2dc60     08 B4 0E F2 | 	cmp	local08, #8 wz
2dc64     01 B8 06 A6 |  if_e	mov	local10, #1
2dc68     54 B9 0A F2 | 	cmp	local10, local02 wz
2dc6c     08 00 90 AD |  if_e	jmp	#LR__4872
2dc70                 | LR__4871
2dc70     FF AE 06 F6 | 	mov	local05, #255
2dc74     00 01 90 FD | 	jmp	#LR__4879
2dc78                 | LR__4872
2dc78     5B B7 E2 F8 | 	getbyte	local09, local09, #0
2dc7c     0F B6 0E F2 | 	cmp	local09, #15 wz
2dc80     B4 00 90 5D |  if_ne	jmp	#LR__4876
2dc84     59 BB E2 F8 | 	getbyte	local11, local07, #0
2dc88     40 BA CE F7 | 	test	local11, #64 wz
2dc8c     30 00 90 AD |  if_e	jmp	#LR__4873
2dc90     1C A6 06 F1 | 	add	local01, #28
2dc94     53 BB 02 FB | 	rdlong	local11, local01
2dc98     0D BA 06 F1 | 	add	local11, #13
2dc9c     5D B1 C2 FA | 	rdbyte	local06, local11
2dca0     59 B3 E2 F8 | 	getbyte	local07, local07, #0
2dca4     BF B2 06 F5 | 	and	local07, #191
2dca8     59 AF 02 F6 | 	mov	local05, local07
2dcac     0C A6 86 F1 | 	sub	local01, #12
2dcb0     53 BB 02 FB | 	rdlong	local11, local01
2dcb4     1C A6 06 F1 | 	add	local01, #28
2dcb8     53 BB 62 FC | 	wrlong	local11, local01
2dcbc     2C A6 86 F1 | 	sub	local01, #44
2dcc0                 | LR__4873
2dcc0     59 B5 E2 F8 | 	getbyte	local08, local07, #0
2dcc4     57 B9 E2 F8 | 	getbyte	local10, local05, #0
2dcc8     5C B5 0A F2 | 	cmp	local08, local10 wz
2dccc     5C 00 90 5D |  if_ne	jmp	#LR__4874
2dcd0     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dcd4     1C A6 06 F1 | 	add	local01, #28
2dcd8     53 B7 02 FB | 	rdlong	local09, local01
2dcdc     1C A6 86 F1 | 	sub	local01, #28
2dce0     0D B6 06 F1 | 	add	local09, #13
2dce4     5B B5 C2 FA | 	rdbyte	local08, local09
2dce8     5A B7 E2 F8 | 	getbyte	local09, local08, #0
2dcec     5B B9 0A F2 | 	cmp	local10, local09 wz
2dcf0     38 00 90 5D |  if_ne	jmp	#LR__4874
2dcf4     0C AC 06 F1 | 	add	local04, #12
2dcf8     56 93 02 FB | 	rdlong	arg01, local04
2dcfc     0C AC 86 F1 | 	sub	local04, #12
2dd00     1C A6 06 F1 | 	add	local01, #28
2dd04     53 BD 02 FB | 	rdlong	local12, local01
2dd08     1C A6 86 F1 | 	sub	local01, #28
2dd0c     5E 95 02 F6 | 	mov	arg02, local12
2dd10     30 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2dd14     00 7A 4E F2 | 	cmps	result1, #0 wz
2dd18     57 BD 02 56 |  if_ne	mov	local12, local05
2dd1c     5E BD E2 58 |  if_ne	getbyte	local12, local12, #0
2dd20     01 BC 86 51 |  if_ne	sub	local12, #1
2dd24     5E BB 02 56 |  if_ne	mov	local11, local12
2dd28     04 00 90 5D |  if_ne	jmp	#LR__4875
2dd2c                 | LR__4874
2dd2c     FF BA 06 F6 | 	mov	local11, #255
2dd30                 | LR__4875
2dd30     5D AF 02 F6 | 	mov	local05, local11
2dd34     40 00 90 FD | 	jmp	#LR__4878
2dd38                 | LR__4876
2dd38     57 BB 02 F6 | 	mov	local11, local05
2dd3c     07 BA 4E F7 | 	zerox	local11, #7 wz
2dd40     20 00 90 5D |  if_ne	jmp	#LR__4877
2dd44     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dd48     1C A6 06 F1 | 	add	local01, #28
2dd4c     53 93 02 FB | 	rdlong	arg01, local01
2dd50     1C A6 86 F1 | 	sub	local01, #28
2dd54     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2dd58     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2dd5c     3D B1 0A F2 | 	cmp	local06, result1 wz
2dd60     28 00 90 AD |  if_e	jmp	#LR__4880
2dd64                 | LR__4877
2dd64     2C A6 06 F1 | 	add	local01, #44
2dd68     FF FF FF FF 
2dd6c     53 FF 6B FC | 	wrlong	##-1, local01
2dd70     2C A6 86 F1 | 	sub	local01, #44
2dd74                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2dd74                 | ' 					}
2dd74                 | ' 					break;
2dd74     14 00 90 FD | 	jmp	#LR__4880
2dd78                 | LR__4878
2dd78                 | LR__4879
2dd78     53 93 02 F6 | 	mov	arg01, local01
2dd7c     00 94 06 F6 | 	mov	arg02, #0
2dd80     F4 F6 BF FD | 	call	#_fatfs_cc_dir_next
2dd84     3D AB 0A F6 | 	mov	local03, result1 wz
2dd88     44 FE 9F AD |  if_e	jmp	#LR__4870
2dd8c                 | LR__4880
2dd8c     00 AA 0E F2 | 	cmp	local03, #0 wz
2dd90     18 A6 06 51 |  if_ne	add	local01, #24
2dd94     53 01 68 5C |  if_ne	wrlong	#0, local01
2dd98                 | ' 	return res;
2dd98     55 7B 02 F6 | 	mov	result1, local03
2dd9c     E7 F0 03 F6 | 	mov	ptra, fp
2dda0     F2 00 A0 FD | 	call	#popregs_
2dda4                 | _fatfs_cc_dir_read_ret
2dda4     2D 00 64 FD | 	ret
2dda8                 | 
2dda8                 | _fatfs_cc_dir_find
2dda8     0B CA 05 F6 | 	mov	COUNT_, #11
2ddac     E8 00 A0 FD | 	call	#pushregs_
2ddb0     49 A7 02 F6 | 	mov	local01, arg01
2ddb4     53 A9 02 FB | 	rdlong	local02, local01
2ddb8     53 93 02 F6 | 	mov	arg01, local01
2ddbc     00 94 06 F6 | 	mov	arg02, #0
2ddc0     4C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2ddc4     00 7A 0E F2 | 	cmp	result1, #0 wz
2ddc8     18 02 90 5D |  if_ne	jmp	#LR__4902
2ddcc     FF AA 06 F6 | 	mov	local03, #255
2ddd0     FF AC 06 F6 | 	mov	local04, #255
2ddd4     2C A6 06 F1 | 	add	local01, #44
2ddd8     FF FF FF FF 
2dddc     53 FF 6B FC | 	wrlong	##-1, local01
2dde0     2C A6 86 F1 | 	sub	local01, #44
2dde4                 | ' #line 2404 "ff.c"
2dde4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2dde4                 | ' 
2dde4                 | ' 	do {
2dde4                 | LR__4890
2dde4     18 A6 06 F1 | 	add	local01, #24
2dde8     53 95 02 FB | 	rdlong	arg02, local01
2ddec     18 A6 86 F1 | 	sub	local01, #24
2ddf0     54 93 02 F6 | 	mov	arg01, local02
2ddf4     B4 EB BF FD | 	call	#_fatfs_cc_move_window
2ddf8     3D AF 0A F6 | 	mov	local05, result1 wz
2ddfc     E0 01 90 5D |  if_ne	jmp	#LR__4901
2de00     1C A6 06 F1 | 	add	local01, #28
2de04     53 97 02 FB | 	rdlong	arg03, local01
2de08     1C A6 86 F1 | 	sub	local01, #28
2de0c     4B B1 C2 FA | 	rdbyte	local06, arg03
2de10     58 97 02 F6 | 	mov	arg03, local06
2de14     07 96 4E F7 | 	zerox	arg03, #7 wz
2de18     04 AE 06 A6 |  if_e	mov	local05, #4
2de1c     C0 01 90 AD |  if_e	jmp	#LR__4901
2de20     1C A6 06 F1 | 	add	local01, #28
2de24     53 B3 02 FB | 	rdlong	local07, local01
2de28     59 97 02 F6 | 	mov	arg03, local07
2de2c     0B 96 06 F1 | 	add	arg03, #11
2de30     4B B5 C2 FA | 	rdbyte	local08, arg03
2de34     3F B4 06 F5 | 	and	local08, #63
2de38     16 A6 86 F1 | 	sub	local01, #22
2de3c     53 B5 42 FC | 	wrbyte	local08, local01
2de40     06 A6 86 F1 | 	sub	local01, #6
2de44     58 97 E2 F8 | 	getbyte	arg03, local06, #0
2de48     E5 96 0E F2 | 	cmp	arg03, #229 wz
2de4c     18 00 90 AD |  if_e	jmp	#LR__4891
2de50     5A 97 E2 F8 | 	getbyte	arg03, local08, #0
2de54     08 96 CE F7 | 	test	arg03, #8 wz
2de58     5A B3 02 56 |  if_ne	mov	local07, local08
2de5c     59 B3 E2 58 |  if_ne	getbyte	local07, local07, #0
2de60     0F B2 0E 52 |  if_ne	cmp	local07, #15 wz
2de64     18 00 90 AD |  if_e	jmp	#LR__4892
2de68                 | LR__4891
2de68     FF AC 06 F6 | 	mov	local04, #255
2de6c     2C A6 06 F1 | 	add	local01, #44
2de70     FF FF FF FF 
2de74     53 FF 6B FC | 	wrlong	##-1, local01
2de78     2C A6 86 F1 | 	sub	local01, #44
2de7c     4C 01 90 FD | 	jmp	#LR__4900
2de80                 | LR__4892
2de80     5A B5 E2 F8 | 	getbyte	local08, local08, #0
2de84     0F B4 0E F2 | 	cmp	local08, #15 wz
2de88     C8 00 90 5D |  if_ne	jmp	#LR__4896
2de8c     2B A6 06 F1 | 	add	local01, #43
2de90     53 B5 C2 FA | 	rdbyte	local08, local01
2de94     2B A6 86 F1 | 	sub	local01, #43
2de98     40 B4 CE F7 | 	test	local08, #64 wz
2de9c     2C 01 90 5D |  if_ne	jmp	#LR__4899
2dea0     58 B7 E2 F8 | 	getbyte	local09, local06, #0
2dea4     40 B6 CE F7 | 	test	local09, #64 wz
2dea8     30 00 90 AD |  if_e	jmp	#LR__4893
2deac     1C A6 06 F1 | 	add	local01, #28
2deb0     53 B7 02 FB | 	rdlong	local09, local01
2deb4     0D B6 06 F1 | 	add	local09, #13
2deb8     5B AB C2 FA | 	rdbyte	local03, local09
2debc     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dec0     BF B0 06 F5 | 	and	local06, #191
2dec4     58 AD 02 F6 | 	mov	local04, local06
2dec8     0C A6 86 F1 | 	sub	local01, #12
2decc     53 B7 02 FB | 	rdlong	local09, local01
2ded0     1C A6 06 F1 | 	add	local01, #28
2ded4     53 B7 62 FC | 	wrlong	local09, local01
2ded8     2C A6 86 F1 | 	sub	local01, #44
2dedc                 | LR__4893
2dedc     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dee0     56 B3 E2 F8 | 	getbyte	local07, local04, #0
2dee4     59 B9 0A F2 | 	cmp	local10, local07 wz
2dee8     5C 00 90 5D |  if_ne	jmp	#LR__4894
2deec     55 B5 E2 F8 | 	getbyte	local08, local03, #0
2def0     1C A6 06 F1 | 	add	local01, #28
2def4     53 B3 02 FB | 	rdlong	local07, local01
2def8     1C A6 86 F1 | 	sub	local01, #28
2defc     0D B2 06 F1 | 	add	local07, #13
2df00     59 B1 C2 FA | 	rdbyte	local06, local07
2df04     58 B3 E2 F8 | 	getbyte	local07, local06, #0
2df08     59 B5 0A F2 | 	cmp	local08, local07 wz
2df0c     38 00 90 5D |  if_ne	jmp	#LR__4894
2df10     0C A8 06 F1 | 	add	local02, #12
2df14     54 93 02 FB | 	rdlong	arg01, local02
2df18     0C A8 86 F1 | 	sub	local02, #12
2df1c     1C A6 06 F1 | 	add	local01, #28
2df20     53 BB 02 FB | 	rdlong	local11, local01
2df24     1C A6 86 F1 | 	sub	local01, #28
2df28     5D 95 02 F6 | 	mov	arg02, local11
2df2c     10 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2df30     00 7A 4E F2 | 	cmps	result1, #0 wz
2df34     56 BB 02 56 |  if_ne	mov	local11, local04
2df38     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2df3c     01 BA 86 51 |  if_ne	sub	local11, #1
2df40     5D B7 02 56 |  if_ne	mov	local09, local11
2df44     04 00 90 5D |  if_ne	jmp	#LR__4895
2df48                 | LR__4894
2df48     FF B6 06 F6 | 	mov	local09, #255
2df4c                 | LR__4895
2df4c     5B AD 02 F6 | 	mov	local04, local09
2df50     78 00 90 FD | 	jmp	#LR__4899
2df54                 | LR__4896
2df54     56 B7 02 F6 | 	mov	local09, local04
2df58     07 B6 4E F7 | 	zerox	local09, #7 wz
2df5c     20 00 90 5D |  if_ne	jmp	#LR__4897
2df60     55 B9 E2 F8 | 	getbyte	local10, local03, #0
2df64     1C A6 06 F1 | 	add	local01, #28
2df68     53 93 02 FB | 	rdlong	arg01, local01
2df6c     1C A6 86 F1 | 	sub	local01, #28
2df70     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2df74     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2df78     3D B9 0A F2 | 	cmp	local10, result1 wz
2df7c     60 00 90 AD |  if_e	jmp	#LR__4901
2df80                 | LR__4897
2df80     2B A6 06 F1 | 	add	local01, #43
2df84     53 B7 C2 FA | 	rdbyte	local09, local01
2df88     2B A6 86 F1 | 	sub	local01, #43
2df8c     01 B6 CE F7 | 	test	local09, #1 wz
2df90     24 00 90 5D |  if_ne	jmp	#LR__4898
2df94     1C A6 06 F1 | 	add	local01, #28
2df98     53 93 02 FB | 	rdlong	arg01, local01
2df9c     04 A6 06 F1 | 	add	local01, #4
2dfa0     53 95 02 F6 | 	mov	arg02, local01
2dfa4     20 A6 86 F1 | 	sub	local01, #32
2dfa8     0B 96 06 F6 | 	mov	arg03, #11
2dfac     B0 DE BF FD | 	call	#_fatfs_cc_memcmp
2dfb0     00 7A 0E F2 | 	cmp	result1, #0 wz
2dfb4     28 00 90 AD |  if_e	jmp	#LR__4901
2dfb8                 | LR__4898
2dfb8     FF AC 06 F6 | 	mov	local04, #255
2dfbc     2C A6 06 F1 | 	add	local01, #44
2dfc0     FF FF FF FF 
2dfc4     53 FF 6B FC | 	wrlong	##-1, local01
2dfc8     2C A6 86 F1 | 	sub	local01, #44
2dfcc                 | LR__4899
2dfcc                 | LR__4900
2dfcc     53 93 02 F6 | 	mov	arg01, local01
2dfd0     00 94 06 F6 | 	mov	arg02, #0
2dfd4     A0 F4 BF FD | 	call	#_fatfs_cc_dir_next
2dfd8     3D AF 0A F6 | 	mov	local05, result1 wz
2dfdc     04 FE 9F AD |  if_e	jmp	#LR__4890
2dfe0                 | LR__4901
2dfe0                 | ' 
2dfe0                 | ' 	return res;
2dfe0     57 7B 02 F6 | 	mov	result1, local05
2dfe4                 | LR__4902
2dfe4     E7 F0 03 F6 | 	mov	ptra, fp
2dfe8     F2 00 A0 FD | 	call	#popregs_
2dfec                 | _fatfs_cc_dir_find_ret
2dfec     2D 00 64 FD | 	ret
2dff0                 | 
2dff0                 | _fatfs_cc_dir_register
2dff0     09 CA 05 F6 | 	mov	COUNT_, #9
2dff4     E8 00 A0 FD | 	call	#pushregs_
2dff8     2C F0 07 F1 | 	add	ptra, #44
2dffc     49 A7 02 F6 | 	mov	local01, arg01
2e000     53 A9 02 FB | 	rdlong	local02, local01
2e004     2B A6 06 F1 | 	add	local01, #43
2e008     53 AB C2 FA | 	rdbyte	local03, local01
2e00c     2B A6 86 F1 | 	sub	local01, #43
2e010     A0 AA CE F7 | 	test	local03, #160 wz
2e014     06 7A 06 56 |  if_ne	mov	result1, #6
2e018     2C 02 90 5D |  if_ne	jmp	#LR__4921
2e01c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2e01c     00 AC 06 F6 | 	mov	local04, #0
2e020     0C A8 06 F1 | 	add	local02, #12
2e024     D7 12 48 FB | 	callpa	#(@LR__4911-@LR__4910)>>2,fcache_load_ptr_
2e028                 | LR__4910
2e028     54 AB 02 FB | 	rdlong	local03, local02
2e02c     56 99 02 F6 | 	mov	arg04, local04
2e030     01 98 66 F0 | 	shl	arg04, #1
2e034     55 99 02 F1 | 	add	arg04, local03
2e038     4C AB EA FA | 	rdword	local03, arg04 wz
2e03c     56 AF 02 56 |  if_ne	mov	local05, local04
2e040     01 AE 06 51 |  if_ne	add	local05, #1
2e044     57 AD 02 56 |  if_ne	mov	local04, local05
2e048     DC FF 9F 5D |  if_ne	jmp	#LR__4910
2e04c                 | LR__4911
2e04c     0C A8 86 F1 | 	sub	local02, #12
2e050     E7 92 02 F6 | 	mov	arg01, fp
2e054     1C 92 06 F1 | 	add	arg01, #28
2e058     53 95 02 F6 | 	mov	arg02, local01
2e05c     20 94 06 F1 | 	add	arg02, #32
2e060     0C 96 06 F6 | 	mov	arg03, #12
2e064     44 68 BF FD | 	call	#__system____builtin_memmove
2e068     27 CE 05 F1 | 	add	fp, #39
2e06c     E7 AA C2 FA | 	rdbyte	local03, fp
2e070     27 CE 85 F1 | 	sub	fp, #39
2e074     01 AA CE F7 | 	test	local03, #1 wz
2e078     80 00 90 AD |  if_e	jmp	#LR__4914
2e07c     2B A6 06 F1 | 	add	local01, #43
2e080     53 81 48 FC | 	wrbyte	#64, local01
2e084     2B A6 86 F1 | 	sub	local01, #43
2e088                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e088                 | ' 		for (n = 1; n < 100; n++) {
2e088     01 B0 06 F6 | 	mov	local06, #1
2e08c                 | LR__4912
2e08c     64 B0 16 F2 | 	cmp	local06, #100 wc
2e090     38 00 90 3D |  if_ae	jmp	#LR__4913
2e094     53 93 02 F6 | 	mov	arg01, local01
2e098     20 92 06 F1 | 	add	arg01, #32
2e09c     E7 94 02 F6 | 	mov	arg02, fp
2e0a0     1C 94 06 F1 | 	add	arg02, #28
2e0a4     0C A8 06 F1 | 	add	local02, #12
2e0a8     54 97 02 FB | 	rdlong	arg03, local02
2e0ac     0C A8 86 F1 | 	sub	local02, #12
2e0b0     58 99 02 F6 | 	mov	arg04, local06
2e0b4     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2e0b8     53 93 02 F6 | 	mov	arg01, local01
2e0bc     E8 FC BF FD | 	call	#_fatfs_cc_dir_find
2e0c0     3D B3 0A F6 | 	mov	local07, result1 wz
2e0c4     01 B0 06 A1 |  if_e	add	local06, #1
2e0c8     C0 FF 9F AD |  if_e	jmp	#LR__4912
2e0cc                 | LR__4913
2e0cc     64 B0 0E F2 | 	cmp	local06, #100 wz
2e0d0     07 7A 06 A6 |  if_e	mov	result1, #7
2e0d4     70 01 90 AD |  if_e	jmp	#LR__4921
2e0d8     04 B2 0E F2 | 	cmp	local07, #4 wz
2e0dc     59 7B 02 56 |  if_ne	mov	result1, local07
2e0e0     64 01 90 5D |  if_ne	jmp	#LR__4921
2e0e4     27 CE 05 F1 | 	add	fp, #39
2e0e8     E7 AA C2 FA | 	rdbyte	local03, fp
2e0ec     27 CE 85 F1 | 	sub	fp, #39
2e0f0     2B A6 06 F1 | 	add	local01, #43
2e0f4     53 AB 42 FC | 	wrbyte	local03, local01
2e0f8     2B A6 86 F1 | 	sub	local01, #43
2e0fc                 | LR__4914
2e0fc     27 CE 05 F1 | 	add	fp, #39
2e100     E7 B2 C2 FA | 	rdbyte	local07, fp
2e104     02 B2 CE F7 | 	test	local07, #2 wz
2e108     0C AC 06 51 |  if_ne	add	local04, #12
2e10c     0D AC 16 5D |  if_ne	qdiv	local04, #13
2e110     27 CE 85 F1 | 	sub	fp, #39
2e114     53 93 02 F6 | 	mov	arg01, local01
2e118     18 AA 62 5D |  if_ne	getqx	local03
2e11c     01 AA 06 51 |  if_ne	add	local03, #1
2e120     01 AA 06 A6 |  if_e	mov	local03, #1
2e124     55 B5 02 F6 | 	mov	local08, local03
2e128     5A 95 02 F6 | 	mov	arg02, local08
2e12c     04 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2e130     3D B3 0A F6 | 	mov	local07, result1 wz
2e134     9C 00 90 5D |  if_ne	jmp	#LR__4918
2e138     01 B4 8E F1 | 	sub	local08, #1 wz
2e13c     94 00 90 AD |  if_e	jmp	#LR__4918
2e140     53 93 02 F6 | 	mov	arg01, local01
2e144     5A B3 02 F6 | 	mov	local07, local08
2e148     05 B2 66 F0 | 	shl	local07, #5
2e14c     10 A6 06 F1 | 	add	local01, #16
2e150     53 95 02 FB | 	rdlong	arg02, local01
2e154     10 A6 86 F1 | 	sub	local01, #16
2e158     59 95 82 F1 | 	sub	arg02, local07
2e15c     B0 F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2e160     3D B3 0A F6 | 	mov	local07, result1 wz
2e164     6C 00 90 5D |  if_ne	jmp	#LR__4917
2e168     53 93 02 F6 | 	mov	arg01, local01
2e16c     20 92 06 F1 | 	add	arg01, #32
2e170     08 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2e174     3D B7 02 F6 | 	mov	local09, result1
2e178                 | ' 			sum = sum_sfn(dp->fn);
2e178                 | ' 			do {
2e178                 | LR__4915
2e178     18 A6 06 F1 | 	add	local01, #24
2e17c     53 95 02 FB | 	rdlong	arg02, local01
2e180     18 A6 86 F1 | 	sub	local01, #24
2e184     54 93 02 F6 | 	mov	arg01, local02
2e188     20 E8 BF FD | 	call	#_fatfs_cc_move_window
2e18c     3D B3 0A F6 | 	mov	local07, result1 wz
2e190     40 00 90 5D |  if_ne	jmp	#LR__4916
2e194     0C A8 06 F1 | 	add	local02, #12
2e198     54 93 02 FB | 	rdlong	arg01, local02
2e19c     1C A6 06 F1 | 	add	local01, #28
2e1a0     53 95 02 FB | 	rdlong	arg02, local01
2e1a4     1C A6 86 F1 | 	sub	local01, #28
2e1a8     5B 99 02 F6 | 	mov	arg04, local09
2e1ac     5A 97 02 F6 | 	mov	arg03, local08
2e1b0     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2e1b4     09 A8 86 F1 | 	sub	local02, #9
2e1b8     54 03 48 FC | 	wrbyte	#1, local02
2e1bc     03 A8 86 F1 | 	sub	local02, #3
2e1c0     53 93 02 F6 | 	mov	arg01, local01
2e1c4     00 94 06 F6 | 	mov	arg02, #0
2e1c8     AC F2 BF FD | 	call	#_fatfs_cc_dir_next
2e1cc     3D B3 0A F6 | 	mov	local07, result1 wz
2e1d0     E9 B5 6E AB |  if_e	djnz	local08, #LR__4915
2e1d4                 | LR__4916
2e1d4                 | LR__4917
2e1d4                 | LR__4918
2e1d4     00 B2 0E F2 | 	cmp	local07, #0 wz
2e1d8     68 00 90 5D |  if_ne	jmp	#LR__4920
2e1dc     18 A6 06 F1 | 	add	local01, #24
2e1e0     53 95 02 FB | 	rdlong	arg02, local01
2e1e4     18 A6 86 F1 | 	sub	local01, #24
2e1e8     54 93 02 F6 | 	mov	arg01, local02
2e1ec     BC E7 BF FD | 	call	#_fatfs_cc_move_window
2e1f0     3D B3 0A F6 | 	mov	local07, result1 wz
2e1f4     4C 00 90 5D |  if_ne	jmp	#LR__4919
2e1f8     1C A6 06 F1 | 	add	local01, #28
2e1fc     53 93 02 FB | 	rdlong	arg01, local01
2e200     00 94 06 F6 | 	mov	arg02, #0
2e204     20 96 06 F6 | 	mov	arg03, #32
2e208     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e20c     53 93 02 FB | 	rdlong	arg01, local01
2e210     04 A6 06 F1 | 	add	local01, #4
2e214     53 95 02 F6 | 	mov	arg02, local01
2e218     0B 96 06 F6 | 	mov	arg03, #11
2e21c     8C 66 BF FD | 	call	#__system____builtin_memmove
2e220     04 A6 86 F1 | 	sub	local01, #4
2e224     53 AB 02 FB | 	rdlong	local03, local01
2e228     0F A6 06 F1 | 	add	local01, #15
2e22c     53 B7 C2 FA | 	rdbyte	local09, local01
2e230     18 B6 06 F5 | 	and	local09, #24
2e234     0C AA 06 F1 | 	add	local03, #12
2e238     55 B7 42 FC | 	wrbyte	local09, local03
2e23c     03 A8 06 F1 | 	add	local02, #3
2e240     54 03 48 FC | 	wrbyte	#1, local02
2e244                 | LR__4919
2e244                 | LR__4920
2e244                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e244                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e244                 | ' 
2e244                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e244                 | ' 
2e244                 | ' 			fs->wflag = 1;
2e244                 | ' 		}
2e244                 | ' 	}
2e244                 | ' 
2e244                 | ' 	return res;
2e244     59 7B 02 F6 | 	mov	result1, local07
2e248                 | LR__4921
2e248     E7 F0 03 F6 | 	mov	ptra, fp
2e24c     F2 00 A0 FD | 	call	#popregs_
2e250                 | _fatfs_cc_dir_register_ret
2e250     2D 00 64 FD | 	ret
2e254                 | 
2e254                 | _fatfs_cc_dir_remove
2e254     05 CA 05 F6 | 	mov	COUNT_, #5
2e258     E8 00 A0 FD | 	call	#pushregs_
2e25c     49 A7 02 F6 | 	mov	local01, arg01
2e260     53 A9 02 FB | 	rdlong	local02, local01
2e264     10 A6 06 F1 | 	add	local01, #16
2e268     53 AB 02 FB | 	rdlong	local03, local01
2e26c     1C A6 06 F1 | 	add	local01, #28
2e270     53 95 02 FB | 	rdlong	arg02, local01
2e274     2C A6 86 F1 | 	sub	local01, #44
2e278     FF FF 7F FF 
2e27c     FF 95 0E F2 | 	cmp	arg02, ##-1 wz
2e280     00 AC 06 A6 |  if_e	mov	local04, #0
2e284     18 00 90 AD |  if_e	jmp	#LR__4930
2e288     53 93 02 F6 | 	mov	arg01, local01
2e28c     2C A6 06 F1 | 	add	local01, #44
2e290     53 95 02 FB | 	rdlong	arg02, local01
2e294     2C A6 86 F1 | 	sub	local01, #44
2e298     74 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e29c     3D AD 02 F6 | 	mov	local04, result1
2e2a0                 | LR__4930
2e2a0     56 AF 0A F6 | 	mov	local05, local04 wz
2e2a4     64 00 90 5D |  if_ne	jmp	#LR__4933
2e2a8                 | ' 		do {
2e2a8                 | LR__4931
2e2a8     18 A6 06 F1 | 	add	local01, #24
2e2ac     53 95 02 FB | 	rdlong	arg02, local01
2e2b0     18 A6 86 F1 | 	sub	local01, #24
2e2b4     54 93 02 F6 | 	mov	arg01, local02
2e2b8     F0 E6 BF FD | 	call	#_fatfs_cc_move_window
2e2bc     3D AF 0A F6 | 	mov	local05, result1 wz
2e2c0     40 00 90 5D |  if_ne	jmp	#LR__4932
2e2c4     1C A6 06 F1 | 	add	local01, #28
2e2c8     53 AD 02 FB | 	rdlong	local04, local01
2e2cc     56 CB 49 FC | 	wrbyte	#229, local04
2e2d0     03 A8 06 F1 | 	add	local02, #3
2e2d4     54 03 48 FC | 	wrbyte	#1, local02
2e2d8     03 A8 86 F1 | 	sub	local02, #3
2e2dc     0C A6 86 F1 | 	sub	local01, #12
2e2e0     53 AD 02 FB | 	rdlong	local04, local01
2e2e4     10 A6 86 F1 | 	sub	local01, #16
2e2e8     55 AD 12 F2 | 	cmp	local04, local03 wc
2e2ec     14 00 90 3D |  if_ae	jmp	#LR__4932
2e2f0     53 93 02 F6 | 	mov	arg01, local01
2e2f4     00 94 06 F6 | 	mov	arg02, #0
2e2f8     7C F1 BF FD | 	call	#_fatfs_cc_dir_next
2e2fc     3D AF 0A F6 | 	mov	local05, result1 wz
2e300     A4 FF 9F AD |  if_e	jmp	#LR__4931
2e304                 | LR__4932
2e304     04 AE 0E F2 | 	cmp	local05, #4 wz
2e308     02 AE 06 A6 |  if_e	mov	local05, #2
2e30c                 | LR__4933
2e30c                 | ' 	}
2e30c                 | ' #line 2590 "ff.c"
2e30c                 | ' 	return res;
2e30c     57 7B 02 F6 | 	mov	result1, local05
2e310     E7 F0 03 F6 | 	mov	ptra, fp
2e314     F2 00 A0 FD | 	call	#popregs_
2e318                 | _fatfs_cc_dir_remove_ret
2e318     2D 00 64 FD | 	ret
2e31c                 | 
2e31c                 | _fatfs_cc_get_fileinfo
2e31c     0C CA 05 F6 | 	mov	COUNT_, #12
2e320     E8 00 A0 FD | 	call	#pushregs_
2e324     49 A7 02 F6 | 	mov	local01, arg01
2e328     4A A9 02 F6 | 	mov	local02, arg02
2e32c     53 AB 02 FB | 	rdlong	local03, local01
2e330     1C A8 06 F1 | 	add	local02, #28
2e334     54 01 48 FC | 	wrbyte	#0, local02
2e338     1C A8 86 F1 | 	sub	local02, #28
2e33c     18 A6 06 F1 | 	add	local01, #24
2e340     53 AD 0A FB | 	rdlong	local04, local01 wz
2e344     18 A6 86 F1 | 	sub	local01, #24
2e348     90 03 90 AD |  if_e	jmp	#LR__4954
2e34c     2C A6 06 F1 | 	add	local01, #44
2e350     53 AD 02 FB | 	rdlong	local04, local01
2e354     2C A6 86 F1 | 	sub	local01, #44
2e358     FF FF 7F FF 
2e35c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2e360     D8 00 90 AD |  if_e	jmp	#LR__4943
2e364     00 AE 06 F6 | 	mov	local05, #0
2e368     00 B0 06 F6 | 	mov	local06, #0
2e36c     00 B2 06 F6 | 	mov	local07, #0
2e370                 | ' 			si = di = 0;
2e370                 | ' 			hs = 0;
2e370                 | ' 			while (fs->lfnbuf[si] != 0) {
2e370                 | LR__4940
2e370     0C AA 06 F1 | 	add	local03, #12
2e374     55 AD 02 FB | 	rdlong	local04, local03
2e378     0C AA 86 F1 | 	sub	local03, #12
2e37c     58 B5 02 F6 | 	mov	local08, local06
2e380     01 B4 66 F0 | 	shl	local08, #1
2e384     56 B5 02 F1 | 	add	local08, local04
2e388     5A AD EA FA | 	rdword	local04, local08 wz
2e38c     90 00 90 AD |  if_e	jmp	#LR__4942
2e390     0C AA 06 F1 | 	add	local03, #12
2e394     55 B7 02 FB | 	rdlong	local09, local03
2e398     0C AA 86 F1 | 	sub	local03, #12
2e39c     58 AD 02 F6 | 	mov	local04, local06
2e3a0     01 AC 66 F0 | 	shl	local04, #1
2e3a4     5B AD 02 F1 | 	add	local04, local09
2e3a8     56 B9 E2 FA | 	rdword	local10, local04
2e3ac     59 AD 02 F6 | 	mov	local04, local07
2e3b0     0F AC 4E F7 | 	zerox	local04, #15 wz
2e3b4     01 B0 06 F1 | 	add	local06, #1
2e3b8     24 00 90 5D |  if_ne	jmp	#LR__4941
2e3bc     5C AD 32 F9 | 	getword	local04, local10, #0
2e3c0     6C 00 00 FF 
2e3c4     00 AC 16 F2 | 	cmp	local04, ##55296 wc
2e3c8     14 00 90 CD |  if_b	jmp	#LR__4941
2e3cc     5C BB 32 F9 | 	getword	local11, local10, #0
2e3d0     70 00 00 FF 
2e3d4     00 BA 16 F2 | 	cmp	local11, ##57344 wc
2e3d8     5C B3 02 C6 |  if_b	mov	local07, local10
2e3dc                 | ' 					hs = wc; continue;
2e3dc     90 FF 9F CD |  if_b	jmp	#LR__4940
2e3e0                 | LR__4941
2e3e0     59 93 32 F9 | 	getword	arg01, local07, #0
2e3e4     10 92 66 F0 | 	shl	arg01, #16
2e3e8     5C B9 32 F9 | 	getword	local10, local10, #0
2e3ec     5C 93 42 F5 | 	or	arg01, local10
2e3f0     57 95 02 F6 | 	mov	arg02, local05
2e3f4     54 B9 02 F6 | 	mov	local10, local02
2e3f8     1C B8 06 F1 | 	add	local10, #28
2e3fc     5C 95 02 F1 | 	add	arg02, local10
2e400     FF 96 06 F6 | 	mov	arg03, #255
2e404     57 97 82 F1 | 	sub	arg03, local05
2e408     28 E3 BF FD | 	call	#_fatfs_cc_put_utf
2e40c     3D B9 0A F6 | 	mov	local10, result1 wz
2e410     00 AE 06 A6 |  if_e	mov	local05, #0
2e414     5C AF 02 51 |  if_ne	add	local05, local10
2e418     00 B2 06 56 |  if_ne	mov	local07, #0
2e41c     50 FF 9F 5D |  if_ne	jmp	#LR__4940
2e420                 | LR__4942
2e420     59 AD 02 F6 | 	mov	local04, local07
2e424     0F AC 4E F7 | 	zerox	local04, #15 wz
2e428     00 AE 06 56 |  if_ne	mov	local05, #0
2e42c     54 B9 02 F6 | 	mov	local10, local02
2e430     1C B8 06 F1 | 	add	local10, #28
2e434     5C AF 02 F1 | 	add	local05, local10
2e438     57 01 48 FC | 	wrbyte	#0, local05
2e43c                 | LR__4943
2e43c     00 AE 06 F6 | 	mov	local05, #0
2e440     00 B0 06 F6 | 	mov	local06, #0
2e444                 | ' 			fno->fname[di] = 0;
2e444                 | ' 		}
2e444                 | ' 	}
2e444                 | ' 
2e444                 | ' 	si = di = 0;
2e444                 | ' 	while (si < 11) {
2e444                 | LR__4944
2e444     0B B0 16 F2 | 	cmp	local06, #11 wc
2e448     20 01 90 3D |  if_ae	jmp	#LR__4947
2e44c     1C A6 06 F1 | 	add	local01, #28
2e450     53 B7 02 FB | 	rdlong	local09, local01
2e454     1C A6 86 F1 | 	sub	local01, #28
2e458     58 B9 02 F6 | 	mov	local10, local06
2e45c     5B B9 02 F1 | 	add	local10, local09
2e460     5C B9 C2 FA | 	rdbyte	local10, local10
2e464     5C AD 32 F9 | 	getword	local04, local10, #0
2e468     20 AC 0E F2 | 	cmp	local04, #32 wz
2e46c     01 B0 06 F1 | 	add	local06, #1
2e470     D0 FF 9F AD |  if_e	jmp	#LR__4944
2e474     5C AD 32 F9 | 	getword	local04, local10, #0
2e478     05 AC 0E F2 | 	cmp	local04, #5 wz
2e47c     E5 B8 06 A6 |  if_e	mov	local10, #229
2e480     09 B0 0E F2 | 	cmp	local06, #9 wz
2e484     20 00 90 5D |  if_ne	jmp	#LR__4945
2e488     0C AE 16 F2 | 	cmp	local05, #12 wc
2e48c     18 00 90 3D |  if_ae	jmp	#LR__4945
2e490     57 BB 02 F6 | 	mov	local11, local05
2e494     54 B5 02 F6 | 	mov	local08, local02
2e498     0C B4 06 F1 | 	add	local08, #12
2e49c     5A BB 02 F1 | 	add	local11, local08
2e4a0     5D 5D 48 FC | 	wrbyte	#46, local11
2e4a4     01 AE 06 F1 | 	add	local05, #1
2e4a8                 | LR__4945
2e4a8     5C 93 32 F9 | 	getword	arg01, local10, #0
2e4ac     07 92 4E F7 | 	zerox	arg01, #7 wz
2e4b0     00 7A 06 56 |  if_ne	mov	result1, #0
2e4b4                 | ' 
2e4b4                 | ' 	return 0;
2e4b4     00 7A 06 A6 |  if_e	mov	result1, #0
2e4b8     00 7A 0E F2 | 	cmp	result1, #0 wz
2e4bc     08 B0 0E 52 |  if_ne	cmp	local06, #8 wz
2e4c0     0B B0 0E 52 |  if_ne	cmp	local06, #11 wz
2e4c4     50 00 90 AD |  if_e	jmp	#LR__4946
2e4c8     1C A6 06 F1 | 	add	local01, #28
2e4cc     53 BB 02 FB | 	rdlong	local11, local01
2e4d0     1C A6 86 F1 | 	sub	local01, #28
2e4d4     58 B5 02 F6 | 	mov	local08, local06
2e4d8     5D B5 02 F1 | 	add	local08, local11
2e4dc     5A 93 CA FA | 	rdbyte	arg01, local08 wz
2e4e0     00 7A 06 56 |  if_ne	mov	result1, #0
2e4e4                 | ' 
2e4e4                 | ' 	return 0;
2e4e4     00 7A 06 A6 |  if_e	mov	result1, #0
2e4e8     00 7A 0E F2 | 	cmp	result1, #0 wz
2e4ec     28 00 90 AD |  if_e	jmp	#LR__4946
2e4f0     5C B9 32 F9 | 	getword	local10, local10, #0
2e4f4     08 B8 66 F0 | 	shl	local10, #8
2e4f8     1C A6 06 F1 | 	add	local01, #28
2e4fc     53 BB 02 FB | 	rdlong	local11, local01
2e500     1C A6 86 F1 | 	sub	local01, #28
2e504     58 B7 02 F6 | 	mov	local09, local06
2e508     5D B7 02 F1 | 	add	local09, local11
2e50c     5B BB C2 FA | 	rdbyte	local11, local09
2e510     5D B9 42 F5 | 	or	local10, local11
2e514     01 B0 06 F1 | 	add	local06, #1
2e518                 | LR__4946
2e518     5C 93 02 F6 | 	mov	arg01, local10
2e51c     01 00 00 FF 
2e520     52 95 06 F6 | 	mov	arg02, ##850
2e524     24 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e528     3D B9 02 F6 | 	mov	local10, result1
2e52c     5C AD 02 F6 | 	mov	local04, local10
2e530     0F AC 4E F7 | 	zerox	local04, #15 wz
2e534     00 AE 06 A6 |  if_e	mov	local05, #0
2e538     30 00 90 AD |  if_e	jmp	#LR__4947
2e53c     5C 93 32 F9 | 	getword	arg01, local10, #0
2e540     57 95 02 F6 | 	mov	arg02, local05
2e544     54 BB 02 F6 | 	mov	local11, local02
2e548     0C BA 06 F1 | 	add	local11, #12
2e54c     5D 95 02 F1 | 	add	arg02, local11
2e550     0C 96 06 F6 | 	mov	arg03, #12
2e554     57 97 82 F1 | 	sub	arg03, local05
2e558     D8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2e55c     3D BB 0A F6 | 	mov	local11, result1 wz
2e560     00 AE 06 A6 |  if_e	mov	local05, #0
2e564     5D AF 02 51 |  if_ne	add	local05, local11
2e568     D8 FE 9F 5D |  if_ne	jmp	#LR__4944
2e56c                 | LR__4947
2e56c     57 AD 02 F6 | 	mov	local04, local05
2e570     0C A8 06 F1 | 	add	local02, #12
2e574     54 AD 02 F1 | 	add	local04, local02
2e578     56 01 48 FC | 	wrbyte	#0, local04
2e57c     10 A8 06 F1 | 	add	local02, #16
2e580     54 AD CA FA | 	rdbyte	local04, local02 wz
2e584     1C A8 86 F1 | 	sub	local02, #28
2e588     F8 00 90 5D |  if_ne	jmp	#LR__4953
2e58c     00 AE 0E F2 | 	cmp	local05, #0 wz
2e590     1C 00 90 5D |  if_ne	jmp	#LR__4948
2e594     57 BB 02 F6 | 	mov	local11, local05
2e598     54 B9 02 F6 | 	mov	local10, local02
2e59c     1C B8 06 F1 | 	add	local10, #28
2e5a0     5C BB 02 F1 | 	add	local11, local10
2e5a4     5D 7F 48 FC | 	wrbyte	#63, local11
2e5a8     01 AE 06 F1 | 	add	local05, #1
2e5ac     A4 00 90 FD | 	jmp	#LR__4952
2e5b0                 | LR__4948
2e5b0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e5b0     00 AE 06 F6 | 	mov	local05, #0
2e5b4     00 B0 06 F6 | 	mov	local06, #0
2e5b8     08 BC 06 F6 | 	mov	local12, #8
2e5bc                 | LR__4949
2e5bc     58 AD 02 F6 | 	mov	local04, local06
2e5c0     54 BB 02 F6 | 	mov	local11, local02
2e5c4     0C BA 06 F1 | 	add	local11, #12
2e5c8     5D AD 02 F1 | 	add	local04, local11
2e5cc     56 BB CA FA | 	rdbyte	local11, local04 wz
2e5d0     80 00 90 AD |  if_e	jmp	#LR__4951
2e5d4     58 B5 02 F6 | 	mov	local08, local06
2e5d8     54 BB 02 F6 | 	mov	local11, local02
2e5dc     0C BA 06 F1 | 	add	local11, #12
2e5e0     5D B5 02 F1 | 	add	local08, local11
2e5e4     5A B9 C2 FA | 	rdbyte	local10, local08
2e5e8     5C BB 32 F9 | 	getword	local11, local10, #0
2e5ec     2E BA 0E F2 | 	cmp	local11, #46 wz
2e5f0     10 BC 06 A6 |  if_e	mov	local12, #16
2e5f4     5C BB 32 F9 | 	getword	local11, local10, #0
2e5f8     41 BA 16 F2 | 	cmp	local11, #65 wc
2e5fc     30 00 90 CD |  if_b	jmp	#LR__4950
2e600     5C B5 32 F9 | 	getword	local08, local10, #0
2e604     5B B4 16 F2 | 	cmp	local08, #91 wc
2e608     24 00 90 3D |  if_ae	jmp	#LR__4950
2e60c     1C A6 06 F1 | 	add	local01, #28
2e610     53 B7 02 FB | 	rdlong	local09, local01
2e614     1C A6 86 F1 | 	sub	local01, #28
2e618     0C B6 06 F1 | 	add	local09, #12
2e61c     5B B7 C2 FA | 	rdbyte	local09, local09
2e620     5E BB E2 F8 | 	getbyte	local11, local12, #0
2e624     5D B7 CA F7 | 	test	local09, local11 wz
2e628     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e62c     20 B8 06 51 |  if_ne	add	local10, #32
2e630                 | LR__4950
2e630     57 BB 02 F6 | 	mov	local11, local05
2e634     54 B5 02 F6 | 	mov	local08, local02
2e638     1C B4 06 F1 | 	add	local08, #28
2e63c     5A BB 02 F1 | 	add	local11, local08
2e640     5C B9 32 F9 | 	getword	local10, local10, #0
2e644     5D B9 42 FC | 	wrbyte	local10, local11
2e648     01 B0 06 F1 | 	add	local06, #1
2e64c     01 AE 06 F1 | 	add	local05, #1
2e650     68 FF 9F FD | 	jmp	#LR__4949
2e654                 | LR__4951
2e654                 | LR__4952
2e654     54 BD 02 F6 | 	mov	local12, local02
2e658     1C BC 06 F1 | 	add	local12, #28
2e65c     5E AF 02 F1 | 	add	local05, local12
2e660     57 01 48 FC | 	wrbyte	#0, local05
2e664     1C A6 06 F1 | 	add	local01, #28
2e668     53 AD 02 FB | 	rdlong	local04, local01
2e66c     1C A6 86 F1 | 	sub	local01, #28
2e670     0C AC 06 F1 | 	add	local04, #12
2e674     56 BB CA FA | 	rdbyte	local11, local04 wz
2e678     0C A8 06 A1 |  if_e	add	local02, #12
2e67c     54 01 48 AC |  if_e	wrbyte	#0, local02
2e680     0C A8 86 A1 |  if_e	sub	local02, #12
2e684                 | LR__4953
2e684     1C A6 06 F1 | 	add	local01, #28
2e688     53 BD 02 FB | 	rdlong	local12, local01
2e68c     0B BC 06 F1 | 	add	local12, #11
2e690     5E AD C2 FA | 	rdbyte	local04, local12
2e694     3F AC 06 F5 | 	and	local04, #63
2e698     08 A8 06 F1 | 	add	local02, #8
2e69c     54 AD 42 FC | 	wrbyte	local04, local02
2e6a0     08 A8 86 F1 | 	sub	local02, #8
2e6a4     53 93 02 FB | 	rdlong	arg01, local01
2e6a8     1C 92 06 F1 | 	add	arg01, #28
2e6ac                 | ' {
2e6ac                 | ' 
2e6ac                 | ' 	return *((DWORD*)ptr);
2e6ac     49 7B 02 FB | 	rdlong	result1, arg01
2e6b0     54 7B 62 FC | 	wrlong	result1, local02
2e6b4     53 93 02 FB | 	rdlong	arg01, local01
2e6b8     16 92 06 F1 | 	add	arg01, #22
2e6bc                 | ' {
2e6bc                 | ' 
2e6bc                 | ' 	return *((WORD*)ptr);
2e6bc     49 7B E2 FA | 	rdword	result1, arg01
2e6c0     06 A8 06 F1 | 	add	local02, #6
2e6c4     54 7B 52 FC | 	wrword	result1, local02
2e6c8     53 93 02 FB | 	rdlong	arg01, local01
2e6cc     18 92 06 F1 | 	add	arg01, #24
2e6d0                 | ' {
2e6d0                 | ' 
2e6d0                 | ' 	return *((WORD*)ptr);
2e6d0     49 7B E2 FA | 	rdword	result1, arg01
2e6d4     02 A8 86 F1 | 	sub	local02, #2
2e6d8     54 7B 52 FC | 	wrword	result1, local02
2e6dc                 | LR__4954
2e6dc     E7 F0 03 F6 | 	mov	ptra, fp
2e6e0     F2 00 A0 FD | 	call	#popregs_
2e6e4                 | _fatfs_cc_get_fileinfo_ret
2e6e4     2D 00 64 FD | 	ret
2e6e8                 | 
2e6e8                 | _fatfs_cc_create_name
2e6e8     12 CA 05 F6 | 	mov	COUNT_, #18
2e6ec     E8 00 A0 FD | 	call	#pushregs_
2e6f0     34 F0 07 F1 | 	add	ptra, #52
2e6f4     49 A7 02 F6 | 	mov	local01, arg01
2e6f8     4A A9 02 F6 | 	mov	local02, arg02
2e6fc     54 7B 02 FB | 	rdlong	result1, local02
2e700     30 CE 05 F1 | 	add	fp, #48
2e704     E7 7A 62 FC | 	wrlong	result1, fp
2e708     30 CE 85 F1 | 	sub	fp, #48
2e70c     53 AB 02 FB | 	rdlong	local03, local01
2e710     0C AA 06 F1 | 	add	local03, #12
2e714     55 AD 02 FB | 	rdlong	local04, local03
2e718     00 AE 06 F6 | 	mov	local05, #0
2e71c                 | ' 
2e71c                 | ' 
2e71c                 | ' 
2e71c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2e71c                 | ' 	for (;;) {
2e71c                 | LR__4960
2e71c     E7 92 02 F6 | 	mov	arg01, fp
2e720     30 92 06 F1 | 	add	arg01, #48
2e724     FC DE BF FD | 	call	#_fatfs_cc_tchar2uni
2e728     3D B1 02 F6 | 	mov	local06, result1
2e72c     FF FF 7F FF 
2e730     FF B1 0E F2 | 	cmp	local06, ##-1 wz
2e734     06 7A 06 A6 |  if_e	mov	result1, #6
2e738     84 04 90 AD |  if_e	jmp	#LR__4994
2e73c     80 00 00 FF 
2e740     00 B0 16 F2 | 	cmp	local06, ##65536 wc
2e744     20 00 90 CD |  if_b	jmp	#LR__4961
2e748     57 AB 02 F6 | 	mov	local03, local05
2e74c     01 AA 66 F0 | 	shl	local03, #1
2e750     56 B3 02 F6 | 	mov	local07, local04
2e754     56 AB 02 F1 | 	add	local03, local04
2e758     58 B5 02 F6 | 	mov	local08, local06
2e75c     10 B4 46 F0 | 	shr	local08, #16
2e760     55 B5 52 FC | 	wrword	local08, local03
2e764     01 AE 06 F1 | 	add	local05, #1
2e768                 | LR__4961
2e768     58 B7 02 F6 | 	mov	local09, local06
2e76c     5B AB 32 F9 | 	getword	local03, local09, #0
2e770     20 AA 16 F2 | 	cmp	local03, #32 wc
2e774     68 00 90 CD |  if_b	jmp	#LR__4963
2e778     5B B9 32 F9 | 	getword	local10, local09, #0
2e77c     2F B8 0E F2 | 	cmp	local10, #47 wz
2e780     5B AB 02 56 |  if_ne	mov	local03, local09
2e784     55 AB 32 59 |  if_ne	getword	local03, local03, #0
2e788     5C AA 0E 52 |  if_ne	cmp	local03, #92 wz
2e78c     50 00 90 AD |  if_e	jmp	#LR__4963
2e790     5B AB 32 F9 | 	getword	local03, local09, #0
2e794     80 AA 16 F2 | 	cmp	local03, #128 wc
2e798     1C 00 90 3D |  if_ae	jmp	#LR__4962
2e79c     92 01 00 FF 
2e7a0     4B 93 06 F6 | 	mov	arg01, ##@LR__5483
2e7a4     5B 95 32 F9 | 	getword	arg02, local09, #0
2e7a8     80 D7 BF FD | 	call	#_fatfs_cc_strchr
2e7ac     3D B9 0A F6 | 	mov	local10, result1 wz
2e7b0     06 7A 06 56 |  if_ne	mov	result1, #6
2e7b4     08 04 90 5D |  if_ne	jmp	#LR__4994
2e7b8                 | LR__4962
2e7b8     FF AE 16 F2 | 	cmp	local05, #255 wc
2e7bc     06 7A 06 36 |  if_ae	mov	result1, #6
2e7c0     FC 03 90 3D |  if_ae	jmp	#LR__4994
2e7c4     57 B1 02 F6 | 	mov	local06, local05
2e7c8     01 B0 66 F0 | 	shl	local06, #1
2e7cc     56 B3 02 F6 | 	mov	local07, local04
2e7d0     56 B1 02 F1 | 	add	local06, local04
2e7d4     58 B7 52 FC | 	wrword	local09, local06
2e7d8     01 AE 06 F1 | 	add	local05, #1
2e7dc     3C FF 9F FD | 	jmp	#LR__4960
2e7e0                 | LR__4963
2e7e0     5B AB 32 F9 | 	getword	local03, local09, #0
2e7e4     20 AA 16 F2 | 	cmp	local03, #32 wc
2e7e8     04 BA 06 C6 |  if_b	mov	local11, #4
2e7ec     68 00 90 CD |  if_b	jmp	#LR__4968
2e7f0     D7 24 48 FB | 	callpa	#(@LR__4966-@LR__4964)>>2,fcache_load_ptr_
2e7f4                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2e7f4                 | LR__4964
2e7f4     30 CE 05 F1 | 	add	fp, #48
2e7f8     E7 B8 02 FB | 	rdlong	local10, fp
2e7fc     30 CE 85 F1 | 	sub	fp, #48
2e800     5C AB C2 FA | 	rdbyte	local03, local10
2e804     2F AA 0E F2 | 	cmp	local03, #47 wz
2e808     18 00 90 AD |  if_e	jmp	#LR__4965
2e80c     30 CE 05 F1 | 	add	fp, #48
2e810     E7 B4 02 FB | 	rdlong	local08, fp
2e814     30 CE 85 F1 | 	sub	fp, #48
2e818     5A BB C2 FA | 	rdbyte	local11, local08
2e81c     5C BA 0E F2 | 	cmp	local11, #92 wz
2e820     18 00 90 5D |  if_ne	jmp	#LR__4967
2e824                 | LR__4965
2e824     30 CE 05 F1 | 	add	fp, #48
2e828     E7 BA 02 FB | 	rdlong	local11, fp
2e82c     01 BA 06 F1 | 	add	local11, #1
2e830     E7 BA 62 FC | 	wrlong	local11, fp
2e834     30 CE 85 F1 | 	sub	fp, #48
2e838     B8 FF 9F FD | 	jmp	#LR__4964
2e83c                 | LR__4966
2e83c                 | LR__4967
2e83c     00 BA 06 F6 | 	mov	local11, #0
2e840     30 CE 05 F1 | 	add	fp, #48
2e844     E7 B8 02 FB | 	rdlong	local10, fp
2e848     30 CE 85 F1 | 	sub	fp, #48
2e84c     5C AB C2 FA | 	rdbyte	local03, local10
2e850     20 AA 16 F2 | 	cmp	local03, #32 wc
2e854     04 BA 06 C6 |  if_b	mov	local11, #4
2e858                 | LR__4968
2e858     30 CE 05 F1 | 	add	fp, #48
2e85c     E7 AA 02 FB | 	rdlong	local03, fp
2e860     30 CE 85 F1 | 	sub	fp, #48
2e864     54 AB 62 FC | 	wrlong	local03, local02
2e868                 | ' 	}
2e868                 | ' 	*path = p;
2e868                 | ' #line 2862 "ff.c"
2e868                 | ' 	while (di) {
2e868     00 AE 0E F2 | 	cmp	local05, #0 wz
2e86c     30 00 90 AD |  if_e	jmp	#LR__4971
2e870     D7 16 48 FB | 	callpa	#(@LR__4970-@LR__4969)>>2,fcache_load_ptr_
2e874                 | LR__4969
2e874     57 B7 02 F6 | 	mov	local09, local05
2e878     01 B6 86 F1 | 	sub	local09, #1
2e87c     01 B6 66 F0 | 	shl	local09, #1
2e880     56 B7 02 F1 | 	add	local09, local04
2e884     5B B7 E2 FA | 	rdword	local09, local09
2e888     5B AB 32 F9 | 	getword	local03, local09, #0
2e88c     20 AA 0E F2 | 	cmp	local03, #32 wz
2e890     5B B9 02 56 |  if_ne	mov	local10, local09
2e894     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e898     2E B8 0E 52 |  if_ne	cmp	local10, #46 wz
2e89c     F5 AF 6E AB |  if_e	djnz	local05, #LR__4969
2e8a0                 | LR__4970
2e8a0                 | LR__4971
2e8a0     57 B9 02 F6 | 	mov	local10, local05
2e8a4     01 B8 66 F0 | 	shl	local10, #1
2e8a8     56 B9 02 F1 | 	add	local10, local04
2e8ac     5C 01 58 FC | 	wrword	#0, local10
2e8b0     00 AE 0E F2 | 	cmp	local05, #0 wz
2e8b4     06 7A 06 A6 |  if_e	mov	result1, #6
2e8b8     04 03 90 AD |  if_e	jmp	#LR__4994
2e8bc                 | ' 
2e8bc                 | ' 
2e8bc                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2e8bc     00 BC 06 F6 | 	mov	local12, #0
2e8c0     D7 12 48 FB | 	callpa	#(@LR__4973-@LR__4972)>>2,fcache_load_ptr_
2e8c4                 | LR__4972
2e8c4     5E B7 02 F6 | 	mov	local09, local12
2e8c8     01 B6 66 F0 | 	shl	local09, #1
2e8cc     56 B7 02 F1 | 	add	local09, local04
2e8d0     5B AB E2 FA | 	rdword	local03, local09
2e8d4     20 AA 0E F2 | 	cmp	local03, #32 wz
2e8d8     5E B5 02 A6 |  if_e	mov	local08, local12
2e8dc     01 B4 06 A1 |  if_e	add	local08, #1
2e8e0     5A BD 02 A6 |  if_e	mov	local12, local08
2e8e4     DC FF 9F AD |  if_e	jmp	#LR__4972
2e8e8                 | LR__4973
2e8e8     01 BC 16 F2 | 	cmp	local12, #1 wc
2e8ec     18 00 90 3D |  if_ae	jmp	#LR__4974
2e8f0     5E B7 02 F6 | 	mov	local09, local12
2e8f4     01 B6 66 F0 | 	shl	local09, #1
2e8f8     56 B7 02 F1 | 	add	local09, local04
2e8fc     5B AB E2 FA | 	rdword	local03, local09
2e900     2E AA 0E F2 | 	cmp	local03, #46 wz
2e904     08 00 90 5D |  if_ne	jmp	#LR__4975
2e908                 | LR__4974
2e908     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e90c     03 BA 46 F5 | 	or	local11, #3
2e910                 | LR__4975
2e910     D7 14 48 FB | 	callpa	#(@LR__4977-@LR__4976)>>2,fcache_load_ptr_
2e914                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2e914                 | LR__4976
2e914     01 AE 16 F2 | 	cmp	local05, #1 wc
2e918     20 00 90 CD |  if_b	jmp	#LR__4978
2e91c     57 B7 02 F6 | 	mov	local09, local05
2e920     01 B6 86 F1 | 	sub	local09, #1
2e924     01 B6 66 F0 | 	shl	local09, #1
2e928     56 B7 02 F1 | 	add	local09, local04
2e92c     5B AB E2 FA | 	rdword	local03, local09
2e930     2E AA 0E F2 | 	cmp	local03, #46 wz
2e934     01 AE 86 51 |  if_ne	sub	local05, #1
2e938     D8 FF 9F 5D |  if_ne	jmp	#LR__4976
2e93c                 | LR__4977
2e93c                 | LR__4978
2e93c     53 93 02 F6 | 	mov	arg01, local01
2e940     20 92 06 F1 | 	add	arg01, #32
2e944     20 94 06 F6 | 	mov	arg02, #32
2e948     0B 96 06 F6 | 	mov	arg03, #11
2e94c     49 BF 02 F6 | 	mov	local13, arg01
2e950     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e954     5F 7B 02 F6 | 	mov	result1, local13
2e958     00 C0 06 F6 | 	mov	local14, #0
2e95c     00 C2 06 F6 | 	mov	local15, #0
2e960     08 C4 06 F6 | 	mov	local16, #8
2e964                 | ' 
2e964                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2e964                 | ' 	i = b = 0; ni = 8;
2e964                 | ' 	for (;;) {
2e964                 | LR__4979
2e964     5E C7 02 F6 | 	mov	local17, local12
2e968     63 C9 02 F6 | 	mov	local18, local17
2e96c     01 C8 66 F0 | 	shl	local18, #1
2e970     56 B3 02 F6 | 	mov	local07, local04
2e974     56 C9 02 F1 | 	add	local18, local04
2e978     64 B7 E2 FA | 	rdword	local09, local18
2e97c     5B AB 02 F6 | 	mov	local03, local09
2e980     0F AA 4E F7 | 	zerox	local03, #15 wz
2e984     01 BC 06 F1 | 	add	local12, #1
2e988     B0 01 90 AD |  if_e	jmp	#LR__4992
2e98c     5B AB 32 F9 | 	getword	local03, local09, #0
2e990     20 AA 0E F2 | 	cmp	local03, #32 wz
2e994     14 00 90 AD |  if_e	jmp	#LR__4980
2e998     5B B9 32 F9 | 	getword	local10, local09, #0
2e99c     2E B8 0E F2 | 	cmp	local10, #46 wz
2e9a0     14 00 90 5D |  if_ne	jmp	#LR__4981
2e9a4     57 BD 0A F2 | 	cmp	local12, local05 wz
2e9a8     0C 00 90 AD |  if_e	jmp	#LR__4981
2e9ac                 | LR__4980
2e9ac     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e9b0     03 BA 46 F5 | 	or	local11, #3
2e9b4                 | ' 			cf |=  0x01  |  0x02 ;
2e9b4                 | ' 			continue;
2e9b4     AC FF 9F FD | 	jmp	#LR__4979
2e9b8                 | LR__4981
2e9b8     62 C3 12 F2 | 	cmp	local15, local16 wc
2e9bc     57 BD 0A C2 |  if_b	cmp	local12, local05 wz
2e9c0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4982
2e9c4     0B C4 0E F2 | 	cmp	local16, #11 wz
2e9c8     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2e9cc     03 BA 46 A5 |  if_e	or	local11, #3
2e9d0                 | ' 				cf |=  0x01  |  0x02 ;
2e9d0                 | ' 				break;
2e9d0     68 01 90 AD |  if_e	jmp	#LR__4992
2e9d4     57 BD 0A F2 | 	cmp	local12, local05 wz
2e9d8     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e9dc     03 BA 46 55 |  if_ne	or	local11, #3
2e9e0     57 BD 1A F2 | 	cmp	local12, local05 wcz
2e9e4     54 01 90 1D |  if_a	jmp	#LR__4992
2e9e8     57 BD 02 F6 | 	mov	local12, local05
2e9ec     08 C2 06 F6 | 	mov	local15, #8
2e9f0     0B C4 06 F6 | 	mov	local16, #11
2e9f4     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2e9f8     02 C0 66 F0 | 	shl	local14, #2
2e9fc                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2e9fc                 | ' 			continue;
2e9fc     64 FF 9F FD | 	jmp	#LR__4979
2ea00                 | LR__4982
2ea00     5B AB 32 F9 | 	getword	local03, local09, #0
2ea04     80 AA 16 F2 | 	cmp	local03, #128 wc
2ea08     50 00 90 CD |  if_b	jmp	#LR__4984
2ea0c     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ea10     02 BA 46 F5 | 	or	local11, #2
2ea14     5B 93 32 F9 | 	getword	arg01, local09, #0
2ea18     01 00 00 FF 
2ea1c     52 B9 06 F6 | 	mov	local10, ##850
2ea20     01 00 00 FF 
2ea24     52 95 06 F6 | 	mov	arg02, ##850
2ea28     B0 D1 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2ea2c     3D B7 02 F6 | 	mov	local09, result1
2ea30     5B AB 32 F9 | 	getword	local03, local09, #0
2ea34     80 AA CE F7 | 	test	local03, #128 wz
2ea38     20 00 90 AD |  if_e	jmp	#LR__4983
2ea3c     5B B9 32 F9 | 	getword	local10, local09, #0
2ea40     7F B8 06 F5 | 	and	local10, #127
2ea44     5C C7 02 F6 | 	mov	local17, local10
2ea48     36 C9 02 F6 | 	mov	local18, ptr__fatfs_cc_dat__
2ea4c     01 00 00 FF 
2ea50     BB C9 06 F1 | 	add	local18, ##955
2ea54     64 C7 02 F1 | 	add	local17, local18
2ea58     63 B7 C2 FA | 	rdbyte	local09, local17
2ea5c                 | LR__4983
2ea5c                 | LR__4984
2ea5c     5B AB 32 F9 | 	getword	local03, local09, #0
2ea60     00 AB 16 F2 | 	cmp	local03, #256 wc
2ea64     40 00 90 CD |  if_b	jmp	#LR__4985
2ea68     62 AB 02 F6 | 	mov	local03, local16
2ea6c     01 AA 86 F1 | 	sub	local03, #1
2ea70     55 C3 12 F2 | 	cmp	local15, local03 wc
2ea74     5D BB E2 38 |  if_ae	getbyte	local11, local11, #0
2ea78     03 BA 46 35 |  if_ae	or	local11, #3
2ea7c     62 C3 02 36 |  if_ae	mov	local15, local16
2ea80                 | ' 				cf |=  0x01  |  0x02 ;
2ea80                 | ' 				i = ni; continue;
2ea80     E0 FE 9F 3D |  if_ae	jmp	#LR__4979
2ea84     61 C7 02 F6 | 	mov	local17, local15
2ea88     53 C9 02 F6 | 	mov	local18, local01
2ea8c     20 C8 06 F1 | 	add	local18, #32
2ea90     64 C7 02 F1 | 	add	local17, local18
2ea94     5B B3 32 F9 | 	getword	local07, local09, #0
2ea98     08 B2 46 F0 | 	shr	local07, #8
2ea9c     63 B3 42 FC | 	wrbyte	local07, local17
2eaa0     01 C2 06 F1 | 	add	local15, #1
2eaa4     74 00 90 FD | 	jmp	#LR__4991
2eaa8                 | LR__4985
2eaa8     5B AB 02 F6 | 	mov	local03, local09
2eaac     0F AA 4E F7 | 	zerox	local03, #15 wz
2eab0     18 00 90 AD |  if_e	jmp	#LR__4986
2eab4     92 01 00 FF 
2eab8     54 93 06 F6 | 	mov	arg01, ##@LR__5484
2eabc     5B 95 32 F9 | 	getword	arg02, local09, #0
2eac0     68 D4 BF FD | 	call	#_fatfs_cc_strchr
2eac4     00 7A 0E F2 | 	cmp	result1, #0 wz
2eac8     10 00 90 AD |  if_e	jmp	#LR__4987
2eacc                 | LR__4986
2eacc     5F B6 06 F6 | 	mov	local09, #95
2ead0     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ead4     03 BA 46 F5 | 	or	local11, #3
2ead8     40 00 90 FD | 	jmp	#LR__4990
2eadc                 | LR__4987
2eadc     5B AB 32 F9 | 	getword	local03, local09, #0
2eae0     41 AA 16 F2 | 	cmp	local03, #65 wc
2eae4     10 00 90 CD |  if_b	jmp	#LR__4988
2eae8     5B B9 32 F9 | 	getword	local10, local09, #0
2eaec     5B B8 16 F2 | 	cmp	local10, #91 wc
2eaf0     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2eaf4     02 C0 46 C5 |  if_b	or	local14, #2
2eaf8                 | LR__4988
2eaf8     5B AB 32 F9 | 	getword	local03, local09, #0
2eafc     61 AA 16 F2 | 	cmp	local03, #97 wc
2eb00     18 00 90 CD |  if_b	jmp	#LR__4989
2eb04     5B B9 32 F9 | 	getword	local10, local09, #0
2eb08     7B B8 16 F2 | 	cmp	local10, #123 wc
2eb0c     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2eb10     01 C0 46 C5 |  if_b	or	local14, #1
2eb14     5B B7 32 C9 |  if_b	getword	local09, local09, #0
2eb18     20 B6 86 C1 |  if_b	sub	local09, #32
2eb1c                 | LR__4989
2eb1c                 | LR__4990
2eb1c                 | LR__4991
2eb1c     61 C7 02 F6 | 	mov	local17, local15
2eb20     53 C9 02 F6 | 	mov	local18, local01
2eb24     20 C8 06 F1 | 	add	local18, #32
2eb28     64 C7 02 F1 | 	add	local17, local18
2eb2c     5B B7 32 F9 | 	getword	local09, local09, #0
2eb30     63 B7 42 FC | 	wrbyte	local09, local17
2eb34     01 C2 06 F1 | 	add	local15, #1
2eb38     28 FE 9F FD | 	jmp	#LR__4979
2eb3c                 | LR__4992
2eb3c     20 A6 06 F1 | 	add	local01, #32
2eb40     53 AB C2 FA | 	rdbyte	local03, local01
2eb44     20 A6 86 F1 | 	sub	local01, #32
2eb48     E5 AA 0E F2 | 	cmp	local03, #229 wz
2eb4c     20 A6 06 A1 |  if_e	add	local01, #32
2eb50     53 0B 48 AC |  if_e	wrbyte	#5, local01
2eb54     20 A6 86 A1 |  if_e	sub	local01, #32
2eb58     08 C4 0E F2 | 	cmp	local16, #8 wz
2eb5c     60 C1 E2 A8 |  if_e	getbyte	local14, local14, #0
2eb60     02 C0 66 A0 |  if_e	shl	local14, #2
2eb64     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb68     0C AA 06 F5 | 	and	local03, #12
2eb6c     0C AA 0E F2 | 	cmp	local03, #12 wz
2eb70     60 B9 02 56 |  if_ne	mov	local10, local14
2eb74     5C B9 E2 58 |  if_ne	getbyte	local10, local10, #0
2eb78     03 B8 06 55 |  if_ne	and	local10, #3
2eb7c     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
2eb80     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2eb84     02 BA 46 A5 |  if_e	or	local11, #2
2eb88     5D AB E2 F8 | 	getbyte	local03, local11, #0
2eb8c     02 AA CE F7 | 	test	local03, #2 wz
2eb90     20 00 90 5D |  if_ne	jmp	#LR__4993
2eb94     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb98     01 AA CE F7 | 	test	local03, #1 wz
2eb9c     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eba0     10 BA 46 55 |  if_ne	or	local11, #16
2eba4     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2eba8     04 C0 CE F7 | 	test	local14, #4 wz
2ebac     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2ebb0     08 BA 46 55 |  if_ne	or	local11, #8
2ebb4                 | LR__4993
2ebb4     2B A6 06 F1 | 	add	local01, #43
2ebb8     53 BB 42 FC | 	wrbyte	local11, local01
2ebbc                 | ' 	}
2ebbc                 | ' 
2ebbc                 | ' 	dp->fn[ 11 ] = cf;
2ebbc                 | ' 
2ebbc                 | ' 	return FR_OK;
2ebbc     00 7A 06 F6 | 	mov	result1, #0
2ebc0                 | LR__4994
2ebc0     E7 F0 03 F6 | 	mov	ptra, fp
2ebc4     F2 00 A0 FD | 	call	#popregs_
2ebc8                 | _fatfs_cc_create_name_ret
2ebc8     2D 00 64 FD | 	ret
2ebcc                 | 
2ebcc                 | _fatfs_cc_follow_path
2ebcc     04 CA 05 F6 | 	mov	COUNT_, #4
2ebd0     E8 00 A0 FD | 	call	#pushregs_
2ebd4     18 F0 07 F1 | 	add	ptra, #24
2ebd8     49 A7 02 F6 | 	mov	local01, arg01
2ebdc     08 CE 05 F1 | 	add	fp, #8
2ebe0     E7 94 62 FC | 	wrlong	arg02, fp
2ebe4     08 CE 85 F1 | 	sub	fp, #8
2ebe8     53 A9 02 FB | 	rdlong	local02, local01
2ebec     D7 24 48 FB | 	callpa	#(@LR__5002-@LR__5000)>>2,fcache_load_ptr_
2ebf0                 | ' )
2ebf0                 | ' {
2ebf0                 | ' 	FRESULT res;
2ebf0                 | ' 	BYTE ns;
2ebf0                 | ' 	FATFS *fs = dp->obj.fs;
2ebf0                 | ' #line 3034 "ff.c"
2ebf0                 | ' 	{
2ebf0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ebf0                 | LR__5000
2ebf0     08 CE 05 F1 | 	add	fp, #8
2ebf4     E7 7A 02 FB | 	rdlong	result1, fp
2ebf8     08 CE 85 F1 | 	sub	fp, #8
2ebfc     3D 7B C2 FA | 	rdbyte	result1, result1
2ec00     2F 7A 0E F2 | 	cmp	result1, #47 wz
2ec04     18 00 90 AD |  if_e	jmp	#LR__5001
2ec08     08 CE 05 F1 | 	add	fp, #8
2ec0c     E7 7A 02 FB | 	rdlong	result1, fp
2ec10     08 CE 85 F1 | 	sub	fp, #8
2ec14     3D 7B C2 FA | 	rdbyte	result1, result1
2ec18     5C 7A 0E F2 | 	cmp	result1, #92 wz
2ec1c     18 00 90 5D |  if_ne	jmp	#LR__5003
2ec20                 | LR__5001
2ec20     08 CE 05 F1 | 	add	fp, #8
2ec24     E7 7A 02 FB | 	rdlong	result1, fp
2ec28     01 7A 06 F1 | 	add	result1, #1
2ec2c     E7 7A 62 FC | 	wrlong	result1, fp
2ec30     08 CE 85 F1 | 	sub	fp, #8
2ec34     B8 FF 9F FD | 	jmp	#LR__5000
2ec38                 | LR__5002
2ec38                 | LR__5003
2ec38     08 A6 06 F1 | 	add	local01, #8
2ec3c     53 01 68 FC | 	wrlong	#0, local01
2ec40     08 A6 86 F1 | 	sub	local01, #8
2ec44     08 CE 05 F1 | 	add	fp, #8
2ec48     E7 94 02 FB | 	rdlong	arg02, fp
2ec4c     08 CE 85 F1 | 	sub	fp, #8
2ec50     4A 95 C2 FA | 	rdbyte	arg02, arg02
2ec54     20 94 16 F2 | 	cmp	arg02, #32 wc
2ec58     20 00 90 3D |  if_ae	jmp	#LR__5004
2ec5c     2B A6 06 F1 | 	add	local01, #43
2ec60     53 01 49 FC | 	wrbyte	#128, local01
2ec64     2B A6 86 F1 | 	sub	local01, #43
2ec68     53 93 02 F6 | 	mov	arg01, local01
2ec6c     00 94 06 F6 | 	mov	arg02, #0
2ec70     9C E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2ec74     3D AB 02 F6 | 	mov	local03, result1
2ec78     A0 00 90 FD | 	jmp	#LR__5008
2ec7c                 | LR__5004
2ec7c                 | ' 		for (;;) {
2ec7c                 | LR__5005
2ec7c     E7 94 02 F6 | 	mov	arg02, fp
2ec80     08 94 06 F1 | 	add	arg02, #8
2ec84     53 93 02 F6 | 	mov	arg01, local01
2ec88     5C FA BF FD | 	call	#_fatfs_cc_create_name
2ec8c     3D AB 0A F6 | 	mov	local03, result1 wz
2ec90     88 00 90 5D |  if_ne	jmp	#LR__5007
2ec94     53 93 02 F6 | 	mov	arg01, local01
2ec98     0C F1 BF FD | 	call	#_fatfs_cc_dir_find
2ec9c     3D AB 0A F6 | 	mov	local03, result1 wz
2eca0     2B A6 06 F1 | 	add	local01, #43
2eca4     53 AD C2 FA | 	rdbyte	local04, local01
2eca8     2B A6 86 F1 | 	sub	local01, #43
2ecac     18 00 90 AD |  if_e	jmp	#LR__5006
2ecb0     04 AA 0E F2 | 	cmp	local03, #4 wz
2ecb4     64 00 90 5D |  if_ne	jmp	#LR__5007
2ecb8     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ecbc     04 AC CE F7 | 	test	local04, #4 wz
2ecc0     05 AA 06 A6 |  if_e	mov	local03, #5
2ecc4                 | ' 					}
2ecc4                 | ' 				}
2ecc4                 | ' 				break;
2ecc4     54 00 90 FD | 	jmp	#LR__5007
2ecc8                 | LR__5006
2ecc8     56 AD E2 F8 | 	getbyte	local04, local04, #0
2eccc     04 AC CE F7 | 	test	local04, #4 wz
2ecd0     48 00 90 5D |  if_ne	jmp	#LR__5007
2ecd4     06 A6 06 F1 | 	add	local01, #6
2ecd8     53 AD C2 FA | 	rdbyte	local04, local01
2ecdc     06 A6 86 F1 | 	sub	local01, #6
2ece0     10 AC CE F7 | 	test	local04, #16 wz
2ece4     05 AA 06 A6 |  if_e	mov	local03, #5
2ece8                 | ' 				res = FR_NO_PATH; break;
2ece8     30 00 90 AD |  if_e	jmp	#LR__5007
2ecec     54 93 02 F6 | 	mov	arg01, local02
2ecf0     54 95 02 F6 | 	mov	arg02, local02
2ecf4     34 94 06 F1 | 	add	arg02, #52
2ecf8     10 A6 06 F1 | 	add	local01, #16
2ecfc     53 AD 02 FB | 	rdlong	local04, local01
2ed00     FF AD 06 F5 | 	and	local04, #511
2ed04     56 95 02 F1 | 	add	arg02, local04
2ed08     D8 E9 BF FD | 	call	#_fatfs_cc_ld_clust
2ed0c     08 A6 86 F1 | 	sub	local01, #8
2ed10     53 7B 62 FC | 	wrlong	result1, local01
2ed14     08 A6 86 F1 | 	sub	local01, #8
2ed18     60 FF 9F FD | 	jmp	#LR__5005
2ed1c                 | LR__5007
2ed1c                 | LR__5008
2ed1c                 | ' 			}
2ed1c                 | ' #line 3090 "ff.c"
2ed1c                 | ' 			{
2ed1c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ed1c                 | ' 			}
2ed1c                 | ' 		}
2ed1c                 | ' 	}
2ed1c                 | ' 
2ed1c                 | ' 	return res;
2ed1c     55 7B 02 F6 | 	mov	result1, local03
2ed20     E7 F0 03 F6 | 	mov	ptra, fp
2ed24     F2 00 A0 FD | 	call	#popregs_
2ed28                 | _fatfs_cc_follow_path_ret
2ed28     2D 00 64 FD | 	ret
2ed2c                 | 
2ed2c                 | _fatfs_cc_get_ldnumber
2ed2c     01 80 66 F6 | 	neg	_var01, #1
2ed30     49 83 0A FB | 	rdlong	_var02, arg01 wz
2ed34     41 85 02 F6 | 	mov	_var03, _var02
2ed38     01 7A 66 A6 |  if_e	neg	result1, #1
2ed3c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ed40     D7 10 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
2ed44                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ed44                 | LR__5010
2ed44     42 87 C2 FA | 	rdbyte	_var04, _var03
2ed48     43 7B E2 F8 | 	getbyte	result1, _var04, #0
2ed4c     20 7A 16 F2 | 	cmp	result1, #32 wc
2ed50     01 84 06 F1 | 	add	_var03, #1
2ed54     43 89 02 36 |  if_ae	mov	_var05, _var04
2ed58     44 89 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ed5c     3A 88 0E 32 |  if_ae	cmp	_var05, #58 wz
2ed60     E0 FF 9F 1D |  if_a	jmp	#LR__5010
2ed64                 | LR__5011
2ed64     43 87 E2 F8 | 	getbyte	_var04, _var04, #0
2ed68     3A 86 0E F2 | 	cmp	_var04, #58 wz
2ed6c     40 00 90 5D |  if_ne	jmp	#LR__5013
2ed70     01 8A 06 F6 | 	mov	_var06, #1
2ed74     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed78     30 88 16 F2 | 	cmp	_var05, #48 wc
2ed7c     1C 00 90 CD |  if_b	jmp	#LR__5012
2ed80     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed84     3A 88 16 F2 | 	cmp	_var05, #58 wc
2ed88     41 8D 02 C6 |  if_b	mov	_var07, _var02
2ed8c     02 8C 06 C1 |  if_b	add	_var07, #2
2ed90     42 8D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ed94     44 8B 02 86 |  if_c_and_z	mov	_var06, _var05
2ed98     30 8A 86 81 |  if_c_and_z	sub	_var06, #48
2ed9c                 | LR__5012
2ed9c     01 8A 56 F2 | 	cmps	_var06, #1 wc
2eda0     45 81 02 C6 |  if_b	mov	_var01, _var06
2eda4     49 85 62 CC |  if_b	wrlong	_var03, arg01
2eda8                 | ' 			vol = i;
2eda8                 | ' 			*path = tt;
2eda8                 | ' 		}
2eda8                 | ' 		return vol;
2eda8     40 7B 02 F6 | 	mov	result1, _var01
2edac     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2edb0                 | LR__5013
2edb0                 | ' 	}
2edb0                 | ' #line 3170 "ff.c"
2edb0                 | ' 	vol = 0;
2edb0                 | ' 
2edb0                 | ' 	return vol;
2edb0     00 7A 06 F6 | 	mov	result1, #0
2edb4                 | _fatfs_cc_get_ldnumber_ret
2edb4     2D 00 64 FD | 	ret
2edb8                 | 
2edb8                 | _fatfs_cc_check_fs
2edb8     04 CA 05 F6 | 	mov	COUNT_, #4
2edbc     E8 00 A0 FD | 	call	#pushregs_
2edc0     49 A7 02 F6 | 	mov	local01, arg01
2edc4     03 A6 06 F1 | 	add	local01, #3
2edc8     53 01 48 FC | 	wrbyte	#0, local01
2edcc     2D A6 06 F1 | 	add	local01, #45
2edd0     FF FF FF FF 
2edd4     53 FF 6B FC | 	wrlong	##-1, local01
2edd8     30 A6 86 F1 | 	sub	local01, #48
2eddc     53 93 02 F6 | 	mov	arg01, local01
2ede0     C8 DB BF FD | 	call	#_fatfs_cc_move_window
2ede4     00 7A 0E F2 | 	cmp	result1, #0 wz
2ede8     04 7A 06 56 |  if_ne	mov	result1, #4
2edec     64 01 90 5D |  if_ne	jmp	#LR__5023
2edf0     34 A6 06 F1 | 	add	local01, #52
2edf4     53 93 02 F6 | 	mov	arg01, local01
2edf8     FE 93 06 F1 | 	add	arg01, #510
2edfc                 | ' {
2edfc                 | ' 
2edfc                 | ' 	return *((WORD*)ptr);
2edfc     49 A9 E2 FA | 	rdword	local02, arg01
2ee00     53 AB C2 FA | 	rdbyte	local03, local01
2ee04     34 A6 86 F1 | 	sub	local01, #52
2ee08     55 AD E2 F8 | 	getbyte	local04, local03, #0
2ee0c     EB AC 0E F2 | 	cmp	local04, #235 wz
2ee10     55 97 02 56 |  if_ne	mov	arg03, local03
2ee14     4B 97 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ee18     E9 96 0E 52 |  if_ne	cmp	arg03, #233 wz
2ee1c     55 AB E2 58 |  if_ne	getbyte	local03, local03, #0
2ee20     E8 AA 0E 52 |  if_ne	cmp	local03, #232 wz
2ee24     14 01 90 5D |  if_ne	jmp	#LR__5022
2ee28     54 AD 32 F9 | 	getword	local04, local02, #0
2ee2c     55 00 00 FF 
2ee30     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2ee34     24 00 90 5D |  if_ne	jmp	#LR__5020
2ee38     53 93 02 F6 | 	mov	arg01, local01
2ee3c     86 92 06 F1 | 	add	arg01, #134
2ee40     92 01 00 FF 
2ee44     5B 95 06 F6 | 	mov	arg02, ##@LR__5485
2ee48     08 96 06 F6 | 	mov	arg03, #8
2ee4c     10 D0 BF FD | 	call	#_fatfs_cc_memcmp
2ee50     00 7A 0E F2 | 	cmp	result1, #0 wz
2ee54                 | ' 			return 0;
2ee54     00 7A 06 A6 |  if_e	mov	result1, #0
2ee58     F8 00 90 AD |  if_e	jmp	#LR__5023
2ee5c                 | LR__5020
2ee5c     34 A6 06 F1 | 	add	local01, #52
2ee60     53 93 02 F6 | 	mov	arg01, local01
2ee64     0B 92 06 F1 | 	add	arg01, #11
2ee68                 | ' {
2ee68                 | ' 
2ee68                 | ' 	return *((WORD*)ptr);
2ee68     49 7B E2 FA | 	rdword	result1, arg01
2ee6c     0D A6 06 F1 | 	add	local01, #13
2ee70     53 AB C2 FA | 	rdbyte	local03, local01
2ee74     41 A6 86 F1 | 	sub	local01, #65
2ee78     3D AD 32 F9 | 	getword	local04, result1, #0
2ee7c     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee80     01 94 86 F1 | 	sub	arg02, #1
2ee84     4A AD CA F7 | 	test	local04, arg02 wz
2ee88     B0 00 90 5D |  if_ne	jmp	#LR__5021
2ee8c     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee90     01 00 00 FF 
2ee94     00 94 16 F2 | 	cmp	arg02, ##512 wc
2ee98     A0 00 90 CD |  if_b	jmp	#LR__5021
2ee9c     3D 95 32 F9 | 	getword	arg02, result1, #0
2eea0     01 00 00 FF 
2eea4     01 94 16 F2 | 	cmp	arg02, ##513 wc
2eea8     90 00 90 3D |  if_ae	jmp	#LR__5021
2eeac     55 93 02 F6 | 	mov	arg01, local03
2eeb0     07 92 4E F7 | 	zerox	arg01, #7 wz
2eeb4     84 00 90 AD |  if_e	jmp	#LR__5021
2eeb8     55 93 E2 F8 | 	getbyte	arg01, local03, #0
2eebc     55 AB E2 F8 | 	getbyte	local03, local03, #0
2eec0     01 AA 86 F1 | 	sub	local03, #1
2eec4     55 93 CA F7 | 	test	arg01, local03 wz
2eec8     70 00 90 5D |  if_ne	jmp	#LR__5021
2eecc     53 93 02 F6 | 	mov	arg01, local01
2eed0     42 92 06 F1 | 	add	arg01, #66
2eed4                 | ' {
2eed4                 | ' 
2eed4                 | ' 	return *((WORD*)ptr);
2eed4     49 7B EA FA | 	rdword	result1, arg01 wz
2eed8     60 00 90 AD |  if_e	jmp	#LR__5021
2eedc     44 A6 06 F1 | 	add	local01, #68
2eee0     53 93 C2 FA | 	rdbyte	arg01, local01
2eee4     44 A6 86 F1 | 	sub	local01, #68
2eee8     01 92 86 F1 | 	sub	arg01, #1
2eeec     02 92 16 F2 | 	cmp	arg01, #2 wc
2eef0     48 00 90 3D |  if_ae	jmp	#LR__5021
2eef4     53 93 02 F6 | 	mov	arg01, local01
2eef8     45 92 06 F1 | 	add	arg01, #69
2eefc                 | ' {
2eefc                 | ' 
2eefc                 | ' 	return *((WORD*)ptr);
2eefc     49 7B EA FA | 	rdword	result1, arg01 wz
2ef00     38 00 90 AD |  if_e	jmp	#LR__5021
2ef04     53 93 02 F6 | 	mov	arg01, local01
2ef08     47 92 06 F1 | 	add	arg01, #71
2ef0c                 | ' {
2ef0c                 | ' 
2ef0c                 | ' 	return *((WORD*)ptr);
2ef0c     49 7B E2 FA | 	rdword	result1, arg01
2ef10     3D AB 32 F9 | 	getword	local03, result1, #0
2ef14     80 AA 16 F2 | 	cmp	local03, #128 wc
2ef18     53 93 02 C6 |  if_b	mov	arg01, local01
2ef1c     54 92 06 C1 |  if_b	add	arg01, #84
2ef20                 | ' {
2ef20                 | ' 
2ef20                 | ' 	return *((DWORD*)ptr);
2ef20     49 7B 02 CB |  if_b	rdlong	result1, arg01
2ef24     80 00 00 CF 
2ef28     00 7A 16 C2 |  if_b	cmp	result1, ##65536 wc
2ef2c     4A A6 06 31 |  if_ae	add	local01, #74
2ef30                 | ' {
2ef30                 | ' 
2ef30                 | ' 	return *((WORD*)ptr);
2ef30     53 7B EA 3A |  if_ae	rdword	result1, local01 wz
2ef34                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2ef34                 | ' 			&& ld_word(fs->win +  14 ) != 0
2ef34                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2ef34                 | ' 			&& ld_word(fs->win +  17 ) != 0
2ef34                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2ef34                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2ef34                 | ' 				return 0;
2ef34     00 7A 06 16 |  if_a	mov	result1, #0
2ef38     18 00 90 1D |  if_a	jmp	#LR__5023
2ef3c                 | LR__5021
2ef3c                 | LR__5022
2ef3c                 | ' 		}
2ef3c                 | ' 	}
2ef3c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2ef3c     54 AB 32 F9 | 	getword	local03, local02, #0
2ef40     55 00 00 FF 
2ef44     55 AA 0E F2 | 	cmp	local03, ##43605 wz
2ef48     02 AC 06 A6 |  if_e	mov	local04, #2
2ef4c     03 AC 06 56 |  if_ne	mov	local04, #3
2ef50     56 7B 02 F6 | 	mov	result1, local04
2ef54                 | LR__5023
2ef54     E7 F0 03 F6 | 	mov	ptra, fp
2ef58     F2 00 A0 FD | 	call	#popregs_
2ef5c                 | _fatfs_cc_check_fs_ret
2ef5c     2D 00 64 FD | 	ret
2ef60                 | 
2ef60                 | _fatfs_cc_find_volume
2ef60     05 CA 05 F6 | 	mov	COUNT_, #5
2ef64     E8 00 A0 FD | 	call	#pushregs_
2ef68     24 F0 07 F1 | 	add	ptra, #36
2ef6c     49 A7 02 F6 | 	mov	local01, arg01
2ef70     4A A9 02 F6 | 	mov	local02, arg02
2ef74     53 93 02 F6 | 	mov	arg01, local01
2ef78     00 94 06 F6 | 	mov	arg02, #0
2ef7c     38 FE BF FD | 	call	#_fatfs_cc_check_fs
2ef80     02 7A 0E F2 | 	cmp	result1, #2 wz
2ef84     0C 00 90 AD |  if_e	jmp	#LR__5030
2ef88     03 7A 16 F2 | 	cmp	result1, #3 wc
2ef8c     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2ef90     C8 00 90 BD |  if_nc_or_z	jmp	#LR__5038
2ef94                 | LR__5030
2ef94                 | ' 	for (i = 0; i < 4; i++) {
2ef94     00 AA 06 F6 | 	mov	local03, #0
2ef98     D7 22 48 FB | 	callpa	#(@LR__5032-@LR__5031)>>2,fcache_load_ptr_
2ef9c                 | LR__5031
2ef9c     04 AA 16 F2 | 	cmp	local03, #4 wc
2efa0     3C 00 90 3D |  if_ae	jmp	#LR__5033
2efa4     55 AD 02 F6 | 	mov	local04, local03
2efa8     02 AC 66 F0 | 	shl	local04, #2
2efac     E7 94 02 F6 | 	mov	arg02, fp
2efb0     14 94 06 F1 | 	add	arg02, #20
2efb4     4A AD 02 F1 | 	add	local04, arg02
2efb8     53 93 02 F6 | 	mov	arg01, local01
2efbc     F2 93 06 F1 | 	add	arg01, #498
2efc0     55 95 02 F6 | 	mov	arg02, local03
2efc4     04 94 66 F0 | 	shl	arg02, #4
2efc8     4A 93 02 F1 | 	add	arg01, arg02
2efcc     08 92 06 F1 | 	add	arg01, #8
2efd0                 | ' {
2efd0                 | ' 
2efd0                 | ' 	return *((DWORD*)ptr);
2efd0     49 7B 02 FB | 	rdlong	result1, arg01
2efd4     56 7B 62 FC | 	wrlong	result1, local04
2efd8     01 AA 06 F1 | 	add	local03, #1
2efdc     BC FF 9F FD | 	jmp	#LR__5031
2efe0                 | LR__5032
2efe0                 | LR__5033
2efe0     00 A8 0E F2 | 	cmp	local02, #0 wz
2efe4     54 AD 02 56 |  if_ne	mov	local04, local02
2efe8     01 AC 86 51 |  if_ne	sub	local04, #1
2efec     00 AC 06 A6 |  if_e	mov	local04, #0
2eff0     56 AB 02 F6 | 	mov	local03, local04
2eff4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2eff4                 | ' 	}
2eff4                 | ' 	i = part ? part - 1 : 0;
2eff4                 | ' 	do {
2eff4                 | LR__5034
2eff4     55 AD 02 F6 | 	mov	local04, local03
2eff8     02 AC 66 F0 | 	shl	local04, #2
2effc     E7 94 02 F6 | 	mov	arg02, fp
2f000     14 94 06 F1 | 	add	arg02, #20
2f004     4A AD 02 F1 | 	add	local04, arg02
2f008     56 AD 0A FB | 	rdlong	local04, local04 wz
2f00c     28 00 90 AD |  if_e	jmp	#LR__5035
2f010     55 AD 02 F6 | 	mov	local04, local03
2f014     02 AC 66 F0 | 	shl	local04, #2
2f018     E7 94 02 F6 | 	mov	arg02, fp
2f01c     14 94 06 F1 | 	add	arg02, #20
2f020     4A AD 02 F1 | 	add	local04, arg02
2f024     56 95 02 FB | 	rdlong	arg02, local04
2f028     53 93 02 F6 | 	mov	arg01, local01
2f02c     88 FD BF FD | 	call	#_fatfs_cc_check_fs
2f030     3D AD 02 F6 | 	mov	local04, result1
2f034     04 00 90 FD | 	jmp	#LR__5036
2f038                 | LR__5035
2f038     03 AC 06 F6 | 	mov	local04, #3
2f03c                 | LR__5036
2f03c     56 AF 02 F6 | 	mov	local05, local04
2f040     00 A8 0E F2 | 	cmp	local02, #0 wz
2f044     02 AE 16 A2 |  if_e	cmp	local05, #2 wc
2f048     0C 00 90 8D |  if_c_and_z	jmp	#LR__5037
2f04c     01 AA 06 A1 |  if_e	add	local03, #1
2f050     04 AA 16 A2 |  if_e	cmp	local03, #4 wc
2f054     9C FF 9F 8D |  if_c_and_z	jmp	#LR__5034
2f058                 | LR__5037
2f058                 | ' 	return fmt;
2f058     57 7B 02 F6 | 	mov	result1, local05
2f05c                 | LR__5038
2f05c     E7 F0 03 F6 | 	mov	ptra, fp
2f060     F2 00 A0 FD | 	call	#popregs_
2f064                 | _fatfs_cc_find_volume_ret
2f064     2D 00 64 FD | 	ret
2f068                 | 
2f068                 | _fatfs_cc_mount_volume
2f068     0A CA 05 F6 | 	mov	COUNT_, #10
2f06c     E8 00 A0 FD | 	call	#pushregs_
2f070     4B A7 02 F6 | 	mov	local01, arg03
2f074     4A 01 68 FC | 	wrlong	#0, arg02
2f078     B0 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f07c     3D A9 02 F6 | 	mov	local02, result1
2f080     00 A8 56 F2 | 	cmps	local02, #0 wc
2f084     0B 7A 06 C6 |  if_b	mov	result1, #11
2f088     00 05 90 CD |  if_b	jmp	#LR__5049
2f08c     54 97 02 F6 | 	mov	arg03, local02
2f090     02 96 66 F0 | 	shl	arg03, #2
2f094     32 97 02 F1 | 	add	arg03, objptr
2f098     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f09c     0C 7A 06 A6 |  if_e	mov	result1, #12
2f0a0     E8 04 90 AD |  if_e	jmp	#LR__5049
2f0a4     4A AB 62 FC | 	wrlong	local03, arg02
2f0a8     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2f0ac     FE A6 06 F5 | 	and	local01, #254
2f0b0     55 97 CA FA | 	rdbyte	arg03, local03 wz
2f0b4     44 00 90 AD |  if_e	jmp	#LR__5041
2f0b8     01 00 00 FF 
2f0bc     10 64 06 F1 | 	add	objptr, ##528
2f0c0     32 93 0A FB | 	rdlong	arg01, objptr wz
2f0c4     01 00 00 FF 
2f0c8     10 64 86 F1 | 	sub	objptr, ##528
2f0cc                 | '         return RES_NOTRDY;
2f0cc     03 7A 06 A6 |  if_e	mov	result1, #3
2f0d0                 | '     }
2f0d0                 | '     return RES_OK;
2f0d0     00 7A 06 56 |  if_ne	mov	result1, #0
2f0d4     3D 97 E2 F8 | 	getbyte	arg03, result1, #0
2f0d8     01 96 CE F7 | 	test	arg03, #1 wz
2f0dc     1C 00 90 5D |  if_ne	jmp	#LR__5040
2f0e0     00 A6 0E F2 | 	cmp	local01, #0 wz
2f0e4     3D 7B E2 58 |  if_ne	getbyte	result1, result1, #0
2f0e8     04 7A CE 57 |  if_ne	test	result1, #4 wz
2f0ec                 | ' 				return FR_WRITE_PROTECTED;
2f0ec     0A 7A 06 56 |  if_ne	mov	result1, #10
2f0f0     98 04 90 5D |  if_ne	jmp	#LR__5049
2f0f4                 | ' 			}
2f0f4                 | ' 			return FR_OK;
2f0f4     00 7A 06 F6 | 	mov	result1, #0
2f0f8     90 04 90 FD | 	jmp	#LR__5049
2f0fc                 | LR__5040
2f0fc                 | LR__5041
2f0fc     55 01 48 FC | 	wrbyte	#0, local03
2f100     01 AA 06 F1 | 	add	local03, #1
2f104     55 A9 42 FC | 	wrbyte	local02, local03
2f108     01 AA 86 F1 | 	sub	local03, #1
2f10c     01 00 00 FF 
2f110     10 64 06 F1 | 	add	objptr, ##528
2f114     32 A9 0A FB | 	rdlong	local02, objptr wz
2f118     01 00 00 FF 
2f11c     10 64 86 F1 | 	sub	objptr, ##528
2f120                 | ' 
2f120                 | '         return RES_NOTRDY;
2f120     03 7A 06 A6 |  if_e	mov	result1, #3
2f124                 | '     }
2f124                 | '     return RES_OK;
2f124     00 7A 06 56 |  if_ne	mov	result1, #0
2f128     3D 97 02 F6 | 	mov	arg03, result1
2f12c     4B AD E2 F8 | 	getbyte	local04, arg03, #0
2f130     01 AC CE F7 | 	test	local04, #1 wz
2f134                 | ' 		return FR_NOT_READY;
2f134     03 7A 06 56 |  if_ne	mov	result1, #3
2f138     50 04 90 5D |  if_ne	jmp	#LR__5049
2f13c     00 A6 0E F2 | 	cmp	local01, #0 wz
2f140     4B AD 02 56 |  if_ne	mov	local04, arg03
2f144     56 AD E2 58 |  if_ne	getbyte	local04, local04, #0
2f148     04 AC CE 57 |  if_ne	test	local04, #4 wz
2f14c                 | ' 		return FR_WRITE_PROTECTED;
2f14c     0A 7A 06 56 |  if_ne	mov	result1, #10
2f150     38 04 90 5D |  if_ne	jmp	#LR__5049
2f154     55 93 02 F6 | 	mov	arg01, local03
2f158     00 94 06 F6 | 	mov	arg02, #0
2f15c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f160     3D 93 02 F6 | 	mov	arg01, result1
2f164     04 92 0E F2 | 	cmp	arg01, #4 wz
2f168     01 7A 06 A6 |  if_e	mov	result1, #1
2f16c     1C 04 90 AD |  if_e	jmp	#LR__5049
2f170     02 92 16 F2 | 	cmp	arg01, #2 wc
2f174     0D 7A 06 36 |  if_ae	mov	result1, #13
2f178     10 04 90 3D |  if_ae	jmp	#LR__5049
2f17c     30 AA 06 F1 | 	add	local03, #48
2f180     55 AF 02 FB | 	rdlong	local05, local03
2f184     04 AA 06 F1 | 	add	local03, #4
2f188     55 93 02 F6 | 	mov	arg01, local03
2f18c     34 AA 86 F1 | 	sub	local03, #52
2f190     0B 92 06 F1 | 	add	arg01, #11
2f194                 | ' {
2f194                 | ' 
2f194                 | ' 	return *((WORD*)ptr);
2f194     49 7B E2 FA | 	rdword	result1, arg01
2f198     01 00 00 FF 
2f19c     00 7A 0E F2 | 	cmp	result1, ##512 wz
2f1a0     0D 7A 06 56 |  if_ne	mov	result1, #13
2f1a4     E4 03 90 5D |  if_ne	jmp	#LR__5049
2f1a8     55 93 02 F6 | 	mov	arg01, local03
2f1ac     4A 92 06 F1 | 	add	arg01, #74
2f1b0                 | ' {
2f1b0                 | ' 
2f1b0                 | ' 	return *((WORD*)ptr);
2f1b0     49 7B E2 FA | 	rdword	result1, arg01
2f1b4     3D B1 0A F6 | 	mov	local06, result1 wz
2f1b8     55 93 02 A6 |  if_e	mov	arg01, local03
2f1bc     58 92 06 A1 |  if_e	add	arg01, #88
2f1c0                 | ' {
2f1c0                 | ' 
2f1c0                 | ' 	return *((DWORD*)ptr);
2f1c0     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f1c4     3D B1 02 A6 |  if_e	mov	local06, result1
2f1c8     1C AA 06 F1 | 	add	local03, #28
2f1cc     55 B1 62 FC | 	wrlong	local06, local03
2f1d0     28 AA 06 F1 | 	add	local03, #40
2f1d4     55 AD C2 FA | 	rdbyte	local04, local03
2f1d8     42 AA 86 F1 | 	sub	local03, #66
2f1dc     55 AD 42 FC | 	wrbyte	local04, local03
2f1e0     56 AD E2 F8 | 	getbyte	local04, local04, #0
2f1e4     02 AA 86 F1 | 	sub	local03, #2
2f1e8     01 AC 0E F2 | 	cmp	local04, #1 wz
2f1ec     02 AA 06 51 |  if_ne	add	local03, #2
2f1f0     55 AD C2 5A |  if_ne	rdbyte	local04, local03
2f1f4     02 AA 86 51 |  if_ne	sub	local03, #2
2f1f8     02 AC 0E 52 |  if_ne	cmp	local04, #2 wz
2f1fc     0D 7A 06 56 |  if_ne	mov	result1, #13
2f200     88 03 90 5D |  if_ne	jmp	#LR__5049
2f204     02 AA 06 F1 | 	add	local03, #2
2f208     55 AD C2 FA | 	rdbyte	local04, local03
2f20c     56 B1 02 FD | 	qmul	local06, local04
2f210     3F AA 06 F1 | 	add	local03, #63
2f214     55 AD C2 FA | 	rdbyte	local04, local03
2f218     37 AA 86 F1 | 	sub	local03, #55
2f21c     55 AD 52 FC | 	wrword	local04, local03
2f220     56 AD 32 F9 | 	getword	local04, local04, #0
2f224     0A AA 86 F1 | 	sub	local03, #10
2f228     0F AC 4E F7 | 	zerox	local04, #15 wz
2f22c     18 B0 62 FD | 	getqx	local06
2f230     20 00 90 AD |  if_e	jmp	#LR__5042
2f234     0A AA 06 F1 | 	add	local03, #10
2f238     55 AD E2 FA | 	rdword	local04, local03
2f23c     56 A9 32 F9 | 	getword	local02, local04, #0
2f240     0A AA 86 F1 | 	sub	local03, #10
2f244     56 AD 32 F9 | 	getword	local04, local04, #0
2f248     01 AC 86 F1 | 	sub	local04, #1
2f24c     56 A9 CA F7 | 	test	local02, local04 wz
2f250     08 00 90 AD |  if_e	jmp	#LR__5043
2f254                 | LR__5042
2f254     0D 7A 06 F6 | 	mov	result1, #13
2f258     30 03 90 FD | 	jmp	#LR__5049
2f25c                 | LR__5043
2f25c     34 AA 06 F1 | 	add	local03, #52
2f260     55 93 02 F6 | 	mov	arg01, local03
2f264     11 92 06 F1 | 	add	arg01, #17
2f268                 | ' {
2f268                 | ' 
2f268                 | ' 	return *((WORD*)ptr);
2f268     49 7B E2 FA | 	rdword	result1, arg01
2f26c     2C AA 86 F1 | 	sub	local03, #44
2f270     55 7B 52 FC | 	wrword	result1, local03
2f274     3D AD 32 F9 | 	getword	local04, result1, #0
2f278     08 AA 86 F1 | 	sub	local03, #8
2f27c     56 93 52 F6 | 	abs	arg01, local04 wc
2f280     49 93 42 F8 | 	getnib	arg01, arg01, #0
2f284     49 93 8A F6 | 	negc	arg01, arg01 wz
2f288     0D 7A 06 56 |  if_ne	mov	result1, #13
2f28c     FC 02 90 5D |  if_ne	jmp	#LR__5049
2f290     55 93 02 F6 | 	mov	arg01, local03
2f294     47 92 06 F1 | 	add	arg01, #71
2f298                 | ' {
2f298                 | ' 
2f298                 | ' 	return *((WORD*)ptr);
2f298     49 7B E2 FA | 	rdword	result1, arg01
2f29c     3D B3 0A F6 | 	mov	local07, result1 wz
2f2a0     55 93 02 A6 |  if_e	mov	arg01, local03
2f2a4     54 92 06 A1 |  if_e	add	arg01, #84
2f2a8                 | ' {
2f2a8                 | ' 
2f2a8                 | ' 	return *((DWORD*)ptr);
2f2a8     49 B3 02 AB |  if_e	rdlong	local07, arg01
2f2ac     55 93 02 F6 | 	mov	arg01, local03
2f2b0     42 92 06 F1 | 	add	arg01, #66
2f2b4                 | ' {
2f2b4                 | ' 
2f2b4                 | ' 	return *((WORD*)ptr);
2f2b4     49 7B E2 FA | 	rdword	result1, arg01
2f2b8     3D 93 02 F6 | 	mov	arg01, result1
2f2bc     49 AD 02 F6 | 	mov	local04, arg01
2f2c0     0F AC 4E F7 | 	zerox	local04, #15 wz
2f2c4     0D 7A 06 A6 |  if_e	mov	result1, #13
2f2c8     C0 02 90 AD |  if_e	jmp	#LR__5049
2f2cc     49 B5 32 F9 | 	getword	local08, arg01, #0
2f2d0     58 B5 02 F1 | 	add	local08, local06
2f2d4     08 AA 06 F1 | 	add	local03, #8
2f2d8     55 AD E2 FA | 	rdword	local04, local03
2f2dc     08 AA 86 F1 | 	sub	local03, #8
2f2e0     56 AD 52 F6 | 	abs	local04, local04 wc
2f2e4     04 AC 46 F0 | 	shr	local04, #4
2f2e8     56 B5 82 F3 | 	sumc	local08, local04
2f2ec     5A B3 12 F2 | 	cmp	local07, local08 wc
2f2f0     0D 7A 06 C6 |  if_b	mov	result1, #13
2f2f4     94 02 90 CD |  if_b	jmp	#LR__5049
2f2f8     5A B3 82 F1 | 	sub	local07, local08
2f2fc     0A AA 06 F1 | 	add	local03, #10
2f300     55 AD E2 FA | 	rdword	local04, local03
2f304     56 B3 12 FD | 	qdiv	local07, local04
2f308     0A AA 86 F1 | 	sub	local03, #10
2f30c     18 AC 62 FD | 	getqx	local04
2f310     00 AC 0E F2 | 	cmp	local04, #0 wz
2f314     0D 7A 06 A6 |  if_e	mov	result1, #13
2f318     70 02 90 AD |  if_e	jmp	#LR__5049
2f31c     00 B6 06 F6 | 	mov	local09, #0
2f320     FF FF 07 FF 
2f324     F6 AD 16 F2 | 	cmp	local04, ##268435446 wc
2f328     03 B6 06 C6 |  if_b	mov	local09, #3
2f32c     7F 00 00 FF 
2f330     F6 AD 16 F2 | 	cmp	local04, ##65526 wc
2f334     02 B6 06 C6 |  if_b	mov	local09, #2
2f338     07 00 00 FF 
2f33c     F6 AD 16 F2 | 	cmp	local04, ##4086 wc
2f340     01 B6 06 C6 |  if_b	mov	local09, #1
2f344     00 B6 0E F2 | 	cmp	local09, #0 wz
2f348     0D 7A 06 A6 |  if_e	mov	result1, #13
2f34c     3C 02 90 AD |  if_e	jmp	#LR__5049
2f350     02 AC 06 F1 | 	add	local04, #2
2f354     18 AA 06 F1 | 	add	local03, #24
2f358     55 AD 62 FC | 	wrlong	local04, local03
2f35c     08 AA 06 F1 | 	add	local03, #8
2f360     55 AF 62 FC | 	wrlong	local05, local03
2f364     57 AD 02 F6 | 	mov	local04, local05
2f368     49 93 32 F9 | 	getword	arg01, arg01, #0
2f36c     49 AD 02 F1 | 	add	local04, arg01
2f370     04 AA 06 F1 | 	add	local03, #4
2f374     55 AD 62 FC | 	wrlong	local04, local03
2f378     57 AD 02 F6 | 	mov	local04, local05
2f37c     5A AD 02 F1 | 	add	local04, local08
2f380     08 AA 06 F1 | 	add	local03, #8
2f384     55 AD 62 FC | 	wrlong	local04, local03
2f388     2C AA 86 F1 | 	sub	local03, #44
2f38c     03 B6 0E F2 | 	cmp	local09, #3 wz
2f390     54 00 90 5D |  if_ne	jmp	#LR__5044
2f394     55 93 02 F6 | 	mov	arg01, local03
2f398     5E 92 06 F1 | 	add	arg01, #94
2f39c                 | ' {
2f39c                 | ' 
2f39c                 | ' 	return *((WORD*)ptr);
2f39c     49 7B EA FA | 	rdword	result1, arg01 wz
2f3a0     0D 7A 06 56 |  if_ne	mov	result1, #13
2f3a4     E4 01 90 5D |  if_ne	jmp	#LR__5049
2f3a8     08 AA 06 F1 | 	add	local03, #8
2f3ac     55 AD EA FA | 	rdword	local04, local03 wz
2f3b0     08 AA 86 F1 | 	sub	local03, #8
2f3b4     0D 7A 06 56 |  if_ne	mov	result1, #13
2f3b8     D0 01 90 5D |  if_ne	jmp	#LR__5049
2f3bc     34 AA 06 F1 | 	add	local03, #52
2f3c0     55 93 02 F6 | 	mov	arg01, local03
2f3c4     2C 92 06 F1 | 	add	arg01, #44
2f3c8                 | ' {
2f3c8                 | ' 
2f3c8                 | ' 	return *((DWORD*)ptr);
2f3c8     49 7B 02 FB | 	rdlong	result1, arg01
2f3cc     0C AA 86 F1 | 	sub	local03, #12
2f3d0     55 7B 62 FC | 	wrlong	result1, local03
2f3d4     10 AA 86 F1 | 	sub	local03, #16
2f3d8     55 B9 02 FB | 	rdlong	local10, local03
2f3dc     18 AA 86 F1 | 	sub	local03, #24
2f3e0     02 B8 66 F0 | 	shl	local10, #2
2f3e4     6C 00 90 FD | 	jmp	#LR__5046
2f3e8                 | LR__5044
2f3e8     08 AA 06 F1 | 	add	local03, #8
2f3ec     55 AD EA FA | 	rdword	local04, local03 wz
2f3f0     08 AA 86 F1 | 	sub	local03, #8
2f3f4     0D 7A 06 A6 |  if_e	mov	result1, #13
2f3f8     90 01 90 AD |  if_e	jmp	#LR__5049
2f3fc     24 AA 06 F1 | 	add	local03, #36
2f400     55 AD 02 FB | 	rdlong	local04, local03
2f404     58 AD 02 F1 | 	add	local04, local06
2f408     04 AA 06 F1 | 	add	local03, #4
2f40c     55 AD 62 FC | 	wrlong	local04, local03
2f410     28 AA 86 F1 | 	sub	local03, #40
2f414     02 B6 0E F2 | 	cmp	local09, #2 wz
2f418     18 AA 06 A1 |  if_e	add	local03, #24
2f41c     55 AD 02 AB |  if_e	rdlong	local04, local03
2f420     18 AA 86 A1 |  if_e	sub	local03, #24
2f424     01 AC 66 A0 |  if_e	shl	local04, #1
2f428     24 00 90 AD |  if_e	jmp	#LR__5045
2f42c     18 AA 06 F1 | 	add	local03, #24
2f430     55 B9 02 FB | 	rdlong	local10, local03
2f434     5C AD 02 F6 | 	mov	local04, local10
2f438     01 AC 66 F0 | 	shl	local04, #1
2f43c     5C AD 02 F1 | 	add	local04, local10
2f440     01 AC 46 F0 | 	shr	local04, #1
2f444     18 AA 86 F1 | 	sub	local03, #24
2f448     01 B8 06 F5 | 	and	local10, #1
2f44c     5C AD 02 F1 | 	add	local04, local10
2f450                 | LR__5045
2f450     56 B9 02 F6 | 	mov	local10, local04
2f454                 | LR__5046
2f454     FF B9 06 F1 | 	add	local10, #511
2f458     09 B8 46 F0 | 	shr	local10, #9
2f45c     1C AA 06 F1 | 	add	local03, #28
2f460     55 97 02 FB | 	rdlong	arg03, local03
2f464     1C AA 86 F1 | 	sub	local03, #28
2f468     5C 97 12 F2 | 	cmp	arg03, local10 wc
2f46c     0D 7A 06 C6 |  if_b	mov	result1, #13
2f470     18 01 90 CD |  if_b	jmp	#LR__5049
2f474     14 AA 06 F1 | 	add	local03, #20
2f478     FF FF FF FF 
2f47c     55 FF 6B FC | 	wrlong	##-1, local03
2f480     04 AA 86 F1 | 	sub	local03, #4
2f484     FF FF FF FF 
2f488     55 FF 6B FC | 	wrlong	##-1, local03
2f48c     0C AA 86 F1 | 	sub	local03, #12
2f490     55 01 49 FC | 	wrbyte	#128, local03
2f494     04 AA 86 F1 | 	sub	local03, #4
2f498     03 B6 0E F2 | 	cmp	local09, #3 wz
2f49c     55 93 02 A6 |  if_e	mov	arg01, local03
2f4a0     64 92 06 A1 |  if_e	add	arg01, #100
2f4a4                 | ' {
2f4a4                 | ' 
2f4a4                 | ' 	return *((WORD*)ptr);
2f4a4     49 7B E2 AA |  if_e	rdword	result1, arg01
2f4a8     3D AD 32 A9 |  if_e	getword	local04, result1, #0
2f4ac     01 AC 0E A2 |  if_e	cmp	local04, #1 wz
2f4b0     A4 00 90 5D |  if_ne	jmp	#LR__5048
2f4b4     01 AE 06 F1 | 	add	local05, #1
2f4b8     55 93 02 F6 | 	mov	arg01, local03
2f4bc     57 95 02 F6 | 	mov	arg02, local05
2f4c0     E8 D4 BF FD | 	call	#_fatfs_cc_move_window
2f4c4     00 7A 0E F2 | 	cmp	result1, #0 wz
2f4c8     8C 00 90 5D |  if_ne	jmp	#LR__5048
2f4cc     04 AA 06 F1 | 	add	local03, #4
2f4d0     55 01 48 FC | 	wrbyte	#0, local03
2f4d4     30 AA 06 F1 | 	add	local03, #48
2f4d8     55 93 02 F6 | 	mov	arg01, local03
2f4dc     34 AA 86 F1 | 	sub	local03, #52
2f4e0     FE 93 06 F1 | 	add	arg01, #510
2f4e4                 | ' {
2f4e4                 | ' 
2f4e4                 | ' 	return *((WORD*)ptr);
2f4e4     49 7B E2 FA | 	rdword	result1, arg01
2f4e8     3D AD 32 F9 | 	getword	local04, result1, #0
2f4ec     55 00 00 FF 
2f4f0     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f4f4     55 93 02 A6 |  if_e	mov	arg01, local03
2f4f8     34 92 06 A1 |  if_e	add	arg01, #52
2f4fc                 | ' {
2f4fc                 | ' 
2f4fc                 | ' 	return *((DWORD*)ptr);
2f4fc     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f500     A9 B0 20 AF 
2f504     52 7A 0E A2 |  if_e	cmp	result1, ##1096897106 wz
2f508     55 93 02 A6 |  if_e	mov	arg01, local03
2f50c     01 00 00 AF 
2f510     18 92 06 A1 |  if_e	add	arg01, ##536
2f514                 | ' {
2f514                 | ' 
2f514                 | ' 	return *((DWORD*)ptr);
2f514     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f518     B9 A0 30 AF 
2f51c     72 7A 0E A2 |  if_e	cmp	result1, ##1631679090 wz
2f520     34 00 90 5D |  if_ne	jmp	#LR__5047
2f524     34 AA 06 F1 | 	add	local03, #52
2f528     55 93 02 F6 | 	mov	arg01, local03
2f52c     E8 93 06 F1 | 	add	arg01, #488
2f530                 | ' {
2f530                 | ' 
2f530                 | ' 	return *((DWORD*)ptr);
2f530     49 7B 02 FB | 	rdlong	result1, arg01
2f534     20 AA 86 F1 | 	sub	local03, #32
2f538     55 7B 62 FC | 	wrlong	result1, local03
2f53c     20 AA 06 F1 | 	add	local03, #32
2f540     55 93 02 F6 | 	mov	arg01, local03
2f544     EC 93 06 F1 | 	add	arg01, #492
2f548                 | ' {
2f548                 | ' 
2f548                 | ' 	return *((DWORD*)ptr);
2f548     49 7B 02 FB | 	rdlong	result1, arg01
2f54c     24 AA 86 F1 | 	sub	local03, #36
2f550     55 7B 62 FC | 	wrlong	result1, local03
2f554     10 AA 86 F1 | 	sub	local03, #16
2f558                 | LR__5047
2f558                 | LR__5048
2f558     55 B7 42 FC | 	wrbyte	local09, local03
2f55c     04 64 06 F1 | 	add	objptr, #4
2f560     32 AD E2 FA | 	rdword	local04, objptr
2f564     01 AC 06 F1 | 	add	local04, #1
2f568     32 AD 52 FC | 	wrword	local04, objptr
2f56c     56 B9 32 F9 | 	getword	local10, local04, #0
2f570     06 AA 06 F1 | 	add	local03, #6
2f574     55 B9 52 FC | 	wrword	local10, local03
2f578     04 64 06 F1 | 	add	objptr, #4
2f57c     06 AA 06 F1 | 	add	local03, #6
2f580     55 65 62 FC | 	wrlong	objptr, local03
2f584                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2f584                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2f584                 | ' 			{
2f584                 | ' 
2f584                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2f584                 | ' 
2f584                 | ' 
2f584                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2f584                 | ' 
2f584                 | ' 			}
2f584                 | ' 		}
2f584                 | ' 
2f584                 | ' 
2f584                 | ' 	}
2f584                 | ' 
2f584                 | ' 	fs->fs_type = (BYTE)fmt;
2f584                 | ' 	fs->id = ++Fsid;
2f584                 | ' 
2f584                 | ' 	fs->lfnbuf = LfnBuf;
2f584                 | ' #line 3567 "ff.c"
2f584                 | ' 	return FR_OK;
2f584     00 7A 06 F6 | 	mov	result1, #0
2f588     08 64 86 F1 | 	sub	objptr, #8
2f58c                 | LR__5049
2f58c     E7 F0 03 F6 | 	mov	ptra, fp
2f590     F2 00 A0 FD | 	call	#popregs_
2f594                 | _fatfs_cc_mount_volume_ret
2f594     2D 00 64 FD | 	ret
2f598                 | 
2f598                 | _fatfs_cc_validate
2f598     49 81 0A F6 | 	mov	_var01, arg01 wz
2f59c     09 82 06 F6 | 	mov	_var02, #9
2f5a0     40 85 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2f5a4     42 87 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2f5a8     48 00 90 AD |  if_e	jmp	#LR__5050
2f5ac     04 80 06 F1 | 	add	_var01, #4
2f5b0     40 87 E2 FA | 	rdword	_var04, _var01
2f5b4     04 80 86 F1 | 	sub	_var01, #4
2f5b8     40 93 02 FB | 	rdlong	arg01, _var01
2f5bc     06 92 06 F1 | 	add	arg01, #6
2f5c0     49 7B E2 FA | 	rdword	result1, arg01
2f5c4     3D 87 0A F2 | 	cmp	_var04, result1 wz
2f5c8     28 00 90 5D |  if_ne	jmp	#LR__5050
2f5cc     01 00 00 FF 
2f5d0     10 64 06 F1 | 	add	objptr, ##528
2f5d4     32 87 0A FB | 	rdlong	_var04, objptr wz
2f5d8     01 00 00 FF 
2f5dc     10 64 86 F1 | 	sub	objptr, ##528
2f5e0                 | '         return RES_NOTRDY;
2f5e0     03 7A 06 A6 |  if_e	mov	result1, #3
2f5e4                 | '     }
2f5e4                 | '     return RES_OK;
2f5e4     00 7A 06 56 |  if_ne	mov	result1, #0
2f5e8     3D 85 E2 F8 | 	getbyte	_var03, result1, #0
2f5ec     01 84 CE F7 | 	test	_var03, #1 wz
2f5f0     00 82 06 A6 |  if_e	mov	_var02, #0
2f5f4                 | LR__5050
2f5f4     00 82 0E F2 | 	cmp	_var02, #0 wz
2f5f8     40 85 02 AB |  if_e	rdlong	_var03, _var01
2f5fc     00 84 06 56 |  if_ne	mov	_var03, #0
2f600     4A 85 62 FC | 	wrlong	_var03, arg02
2f604                 | ' 			res = FR_OK;
2f604                 | ' 		}
2f604                 | ' 
2f604                 | ' 	}
2f604                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2f604                 | ' 	return res;
2f604     41 7B 02 F6 | 	mov	result1, _var02
2f608                 | _fatfs_cc_validate_ret
2f608     2D 00 64 FD | 	ret
2f60c                 | 
2f60c                 | _fatfs_cc_f_mount
2f60c     04 CA 05 F6 | 	mov	COUNT_, #4
2f610     E8 00 A0 FD | 	call	#pushregs_
2f614     20 F0 07 F1 | 	add	ptra, #32
2f618     04 CE 05 F1 | 	add	fp, #4
2f61c     E7 92 62 FC | 	wrlong	arg01, fp
2f620     04 CE 05 F1 | 	add	fp, #4
2f624     E7 94 62 FC | 	wrlong	arg02, fp
2f628     4B A7 02 F6 | 	mov	local01, arg03
2f62c     14 CE 05 F1 | 	add	fp, #20
2f630     E7 94 62 FC | 	wrlong	arg02, fp
2f634     E7 92 02 F6 | 	mov	arg01, fp
2f638     1C CE 85 F1 | 	sub	fp, #28
2f63c     EC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2f640     3D A9 02 F6 | 	mov	local02, result1
2f644     00 A8 56 F2 | 	cmps	local02, #0 wc
2f648     0B 7A 06 C6 |  if_b	mov	result1, #11
2f64c     84 00 90 CD |  if_b	jmp	#LR__5061
2f650     54 97 02 F6 | 	mov	arg03, local02
2f654     02 96 66 F0 | 	shl	arg03, #2
2f658     32 97 02 F1 | 	add	arg03, objptr
2f65c     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f660     14 00 90 AD |  if_e	jmp	#LR__5060
2f664     01 AA 06 F1 | 	add	local03, #1
2f668     55 93 C2 FA | 	rdbyte	arg01, local03
2f66c     01 AA 86 F1 | 	sub	local03, #1
2f670     F8 2B B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2f674     55 01 48 FC | 	wrbyte	#0, local03
2f678                 | LR__5060
2f678     04 CE 05 F1 | 	add	fp, #4
2f67c     E7 AC 0A FB | 	rdlong	local04, fp wz
2f680     04 CE 85 F1 | 	sub	fp, #4
2f684     04 CE 05 51 |  if_ne	add	fp, #4
2f688     E7 AC 02 5B |  if_ne	rdlong	local04, fp
2f68c     04 CE 85 51 |  if_ne	sub	fp, #4
2f690     56 01 48 5C |  if_ne	wrbyte	#0, local04
2f694     02 A8 66 F0 | 	shl	local02, #2
2f698     32 A9 02 F1 | 	add	local02, objptr
2f69c     04 CE 05 F1 | 	add	fp, #4
2f6a0     E7 AC 02 FB | 	rdlong	local04, fp
2f6a4     04 CE 85 F1 | 	sub	fp, #4
2f6a8     54 AD 62 FC | 	wrlong	local04, local02
2f6ac     07 A6 4E F7 | 	zerox	local01, #7 wz
2f6b0     00 7A 06 A6 |  if_e	mov	result1, #0
2f6b4     1C 00 90 AD |  if_e	jmp	#LR__5061
2f6b8     08 CE 05 F1 | 	add	fp, #8
2f6bc     E7 92 02 F6 | 	mov	arg01, fp
2f6c0     04 CE 85 F1 | 	sub	fp, #4
2f6c4     E7 94 02 F6 | 	mov	arg02, fp
2f6c8     04 CE 85 F1 | 	sub	fp, #4
2f6cc     00 96 06 F6 | 	mov	arg03, #0
2f6d0     94 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f6d4                 | ' 
2f6d4                 | ' 	res = mount_volume(&path, &fs, 0);
2f6d4                 | ' 	return res ;
2f6d4                 | LR__5061
2f6d4     E7 F0 03 F6 | 	mov	ptra, fp
2f6d8     F2 00 A0 FD | 	call	#popregs_
2f6dc                 | _fatfs_cc_f_mount_ret
2f6dc     2D 00 64 FD | 	ret
2f6e0                 | 
2f6e0                 | _fatfs_cc_f_open
2f6e0     08 CA 05 F6 | 	mov	COUNT_, #8
2f6e4     E8 00 A0 FD | 	call	#pushregs_
2f6e8     60 F0 07 F1 | 	add	ptra, #96
2f6ec     49 A7 0A F6 | 	mov	local01, arg01 wz
2f6f0     08 CE 05 F1 | 	add	fp, #8
2f6f4     E7 94 62 FC | 	wrlong	arg02, fp
2f6f8     08 CE 85 F1 | 	sub	fp, #8
2f6fc     4B A9 02 F6 | 	mov	local02, arg03
2f700     09 7A 06 A6 |  if_e	mov	result1, #9
2f704     24 04 90 AD |  if_e	jmp	#LR__5087
2f708     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f70c     3F A8 06 F5 | 	and	local02, #63
2f710     08 CE 05 F1 | 	add	fp, #8
2f714     E7 92 02 F6 | 	mov	arg01, fp
2f718     3C CE 05 F1 | 	add	fp, #60
2f71c     E7 94 02 F6 | 	mov	arg02, fp
2f720     44 CE 85 F1 | 	sub	fp, #68
2f724     54 97 02 F6 | 	mov	arg03, local02
2f728     3C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f72c     3D AB 0A F6 | 	mov	local03, result1 wz
2f730     EC 03 90 5D |  if_ne	jmp	#LR__5086
2f734     44 CE 05 F1 | 	add	fp, #68
2f738     E7 AA 02 FB | 	rdlong	local03, fp
2f73c     30 CE 85 F1 | 	sub	fp, #48
2f740     E7 AA 62 FC | 	wrlong	local03, fp
2f744     E7 92 02 F6 | 	mov	arg01, fp
2f748     0C CE 85 F1 | 	sub	fp, #12
2f74c     E7 AC 02 FB | 	rdlong	local04, fp
2f750     08 CE 85 F1 | 	sub	fp, #8
2f754     56 95 02 F6 | 	mov	arg02, local04
2f758     70 F4 BF FD | 	call	#_fatfs_cc_follow_path
2f75c     3D AB 0A F6 | 	mov	local03, result1 wz
2f760     18 00 90 5D |  if_ne	jmp	#LR__5070
2f764     3F CE 05 F1 | 	add	fp, #63
2f768     E7 AC C2 FA | 	rdbyte	local04, fp
2f76c     3F CE 85 F1 | 	sub	fp, #63
2f770     56 99 E2 F8 | 	getbyte	arg04, local04, #0
2f774     80 98 CE F7 | 	test	arg04, #128 wz
2f778     06 AA 06 56 |  if_ne	mov	local03, #6
2f77c                 | LR__5070
2f77c     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2f780     1C 98 CE F7 | 	test	arg04, #28 wz
2f784     5C 01 90 AD |  if_e	jmp	#LR__5075
2f788     00 AA 0E F2 | 	cmp	local03, #0 wz
2f78c     24 00 90 AD |  if_e	jmp	#LR__5072
2f790     04 AA 0E F2 | 	cmp	local03, #4 wz
2f794     10 00 90 5D |  if_ne	jmp	#LR__5071
2f798     E7 92 02 F6 | 	mov	arg01, fp
2f79c     14 92 06 F1 | 	add	arg01, #20
2f7a0     4C E8 BF FD | 	call	#_fatfs_cc_dir_register
2f7a4     3D AB 02 F6 | 	mov	local03, result1
2f7a8                 | LR__5071
2f7a8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f7ac     08 A8 46 F5 | 	or	local02, #8
2f7b0     24 00 90 FD | 	jmp	#LR__5074
2f7b4                 | LR__5072
2f7b4     1A CE 05 F1 | 	add	fp, #26
2f7b8     E7 AC C2 FA | 	rdbyte	local04, fp
2f7bc     1A CE 85 F1 | 	sub	fp, #26
2f7c0     11 AC CE F7 | 	test	local04, #17 wz
2f7c4     07 AA 06 56 |  if_ne	mov	local03, #7
2f7c8     0C 00 90 5D |  if_ne	jmp	#LR__5073
2f7cc     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f7d0     04 AC CE F7 | 	test	local04, #4 wz
2f7d4     08 AA 06 56 |  if_ne	mov	local03, #8
2f7d8                 | LR__5073
2f7d8                 | LR__5074
2f7d8     00 AA 0E F2 | 	cmp	local03, #0 wz
2f7dc     40 01 90 5D |  if_ne	jmp	#LR__5078
2f7e0     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f7e4     08 AC CE F7 | 	test	local04, #8 wz
2f7e8     34 01 90 AD |  if_e	jmp	#LR__5078
2f7ec     C0 1B B0 FD | 	call	#_fatfs_cc__get_fattime
2f7f0     30 CE 05 F1 | 	add	fp, #48
2f7f4     E7 92 02 FB | 	rdlong	arg01, fp
2f7f8     0E 92 06 F1 | 	add	arg01, #14
2f7fc     49 7B 62 FC | 	wrlong	result1, arg01
2f800     E7 92 02 FB | 	rdlong	arg01, fp
2f804     16 92 06 F1 | 	add	arg01, #22
2f808     49 7B 62 FC | 	wrlong	result1, arg01
2f80c     14 CE 05 F1 | 	add	fp, #20
2f810     E7 92 02 FB | 	rdlong	arg01, fp
2f814     14 CE 85 F1 | 	sub	fp, #20
2f818     E7 94 02 FB | 	rdlong	arg02, fp
2f81c     30 CE 85 F1 | 	sub	fp, #48
2f820     C0 DE BF FD | 	call	#_fatfs_cc_ld_clust
2f824     3D AD 02 F6 | 	mov	local04, result1
2f828     30 CE 05 F1 | 	add	fp, #48
2f82c     E7 98 02 FB | 	rdlong	arg04, fp
2f830     0B 98 06 F1 | 	add	arg04, #11
2f834     4C 41 48 FC | 	wrbyte	#32, arg04
2f838     14 CE 05 F1 | 	add	fp, #20
2f83c     E7 92 02 FB | 	rdlong	arg01, fp
2f840     14 CE 85 F1 | 	sub	fp, #20
2f844     E7 94 02 FB | 	rdlong	arg02, fp
2f848     30 CE 85 F1 | 	sub	fp, #48
2f84c     00 96 06 F6 | 	mov	arg03, #0
2f850     C4 DE BF FD | 	call	#_fatfs_cc_st_clust
2f854     30 CE 05 F1 | 	add	fp, #48
2f858     E7 92 02 FB | 	rdlong	arg01, fp
2f85c     1C 92 06 F1 | 	add	arg01, #28
2f860     49 01 68 FC | 	wrlong	#0, arg01
2f864     14 CE 05 F1 | 	add	fp, #20
2f868     E7 98 02 FB | 	rdlong	arg04, fp
2f86c     44 CE 85 F1 | 	sub	fp, #68
2f870     03 98 06 F1 | 	add	arg04, #3
2f874     4C 03 48 FC | 	wrbyte	#1, arg04
2f878     00 AC 0E F2 | 	cmp	local04, #0 wz
2f87c     A0 00 90 AD |  if_e	jmp	#LR__5078
2f880     44 CE 05 F1 | 	add	fp, #68
2f884     E7 AA 02 FB | 	rdlong	local03, fp
2f888     30 AA 06 F1 | 	add	local03, #48
2f88c     55 AF 02 FB | 	rdlong	local05, local03
2f890     30 CE 85 F1 | 	sub	fp, #48
2f894     E7 92 02 F6 | 	mov	arg01, fp
2f898     14 CE 85 F1 | 	sub	fp, #20
2f89c     56 95 02 F6 | 	mov	arg02, local04
2f8a0     00 96 06 F6 | 	mov	arg03, #0
2f8a4     70 D6 BF FD | 	call	#_fatfs_cc_remove_chain
2f8a8     3D AB 0A F6 | 	mov	local03, result1 wz
2f8ac     70 00 90 5D |  if_ne	jmp	#LR__5078
2f8b0     44 CE 05 F1 | 	add	fp, #68
2f8b4     E7 92 02 FB | 	rdlong	arg01, fp
2f8b8     44 CE 85 F1 | 	sub	fp, #68
2f8bc     57 95 02 F6 | 	mov	arg02, local05
2f8c0     E8 D0 BF FD | 	call	#_fatfs_cc_move_window
2f8c4     3D AB 02 F6 | 	mov	local03, result1
2f8c8     44 CE 05 F1 | 	add	fp, #68
2f8cc     E7 AE 02 FB | 	rdlong	local05, fp
2f8d0     44 CE 85 F1 | 	sub	fp, #68
2f8d4     01 AC 86 F1 | 	sub	local04, #1
2f8d8     10 AE 06 F1 | 	add	local05, #16
2f8dc     57 AD 62 FC | 	wrlong	local04, local05
2f8e0     3C 00 90 FD | 	jmp	#LR__5078
2f8e4                 | LR__5075
2f8e4     00 AA 0E F2 | 	cmp	local03, #0 wz
2f8e8     34 00 90 5D |  if_ne	jmp	#LR__5077
2f8ec     1A CE 05 F1 | 	add	fp, #26
2f8f0     E7 AE C2 FA | 	rdbyte	local05, fp
2f8f4     1A CE 85 F1 | 	sub	fp, #26
2f8f8     10 AE CE F7 | 	test	local05, #16 wz
2f8fc     04 AA 06 56 |  if_ne	mov	local03, #4
2f900     1C 00 90 5D |  if_ne	jmp	#LR__5076
2f904     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f908     02 AE CE F7 | 	test	local05, #2 wz
2f90c     1A CE 05 51 |  if_ne	add	fp, #26
2f910     E7 AC C2 5A |  if_ne	rdbyte	local04, fp
2f914     1A CE 85 51 |  if_ne	sub	fp, #26
2f918     01 AC CE 57 |  if_ne	test	local04, #1 wz
2f91c     07 AA 06 56 |  if_ne	mov	local03, #7
2f920                 | LR__5076
2f920                 | LR__5077
2f920                 | LR__5078
2f920     00 AA 0E F2 | 	cmp	local03, #0 wz
2f924     40 00 90 5D |  if_ne	jmp	#LR__5079
2f928     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f92c     08 AE CE F7 | 	test	local05, #8 wz
2f930     54 A9 E2 58 |  if_ne	getbyte	local02, local02, #0
2f934     40 A8 46 55 |  if_ne	or	local02, #64
2f938     44 CE 05 F1 | 	add	fp, #68
2f93c     E7 AE 02 FB | 	rdlong	local05, fp
2f940     30 AE 06 F1 | 	add	local05, #48
2f944     57 AF 02 FB | 	rdlong	local05, local05
2f948     20 A6 06 F1 | 	add	local01, #32
2f94c     53 AF 62 FC | 	wrlong	local05, local01
2f950     14 CE 85 F1 | 	sub	fp, #20
2f954     E7 AE 02 FB | 	rdlong	local05, fp
2f958     30 CE 85 F1 | 	sub	fp, #48
2f95c     04 A6 06 F1 | 	add	local01, #4
2f960     53 AF 62 FC | 	wrlong	local05, local01
2f964     24 A6 86 F1 | 	sub	local01, #36
2f968                 | LR__5079
2f968     00 AA 0E F2 | 	cmp	local03, #0 wz
2f96c     B0 01 90 5D |  if_ne	jmp	#LR__5085
2f970     44 CE 05 F1 | 	add	fp, #68
2f974     E7 92 02 FB | 	rdlong	arg01, fp
2f978     14 CE 85 F1 | 	sub	fp, #20
2f97c     E7 94 02 FB | 	rdlong	arg02, fp
2f980     30 CE 85 F1 | 	sub	fp, #48
2f984     5C DD BF FD | 	call	#_fatfs_cc_ld_clust
2f988     08 A6 06 F1 | 	add	local01, #8
2f98c     53 7B 62 FC | 	wrlong	result1, local01
2f990     30 CE 05 F1 | 	add	fp, #48
2f994     E7 92 02 FB | 	rdlong	arg01, fp
2f998     1C 92 06 F1 | 	add	arg01, #28
2f99c                 | ' {
2f99c                 | ' 
2f99c                 | ' 	return *((DWORD*)ptr);
2f99c     49 7B 02 FB | 	rdlong	result1, arg01
2f9a0     04 A6 06 F1 | 	add	local01, #4
2f9a4     53 7B 62 FC | 	wrlong	result1, local01
2f9a8     0C A6 86 F1 | 	sub	local01, #12
2f9ac     14 CE 05 F1 | 	add	fp, #20
2f9b0     E7 AE 02 FB | 	rdlong	local05, fp
2f9b4     53 AF 62 FC | 	wrlong	local05, local01
2f9b8     E7 AE 02 FB | 	rdlong	local05, fp
2f9bc     44 CE 85 F1 | 	sub	fp, #68
2f9c0     06 AE 06 F1 | 	add	local05, #6
2f9c4     57 AD E2 FA | 	rdword	local04, local05
2f9c8     04 A6 06 F1 | 	add	local01, #4
2f9cc     53 AD 52 FC | 	wrword	local04, local01
2f9d0     0C A6 06 F1 | 	add	local01, #12
2f9d4     53 A9 42 FC | 	wrbyte	local02, local01
2f9d8     01 A6 06 F1 | 	add	local01, #1
2f9dc     53 01 48 FC | 	wrbyte	#0, local01
2f9e0     0B A6 06 F1 | 	add	local01, #11
2f9e4     53 01 68 FC | 	wrlong	#0, local01
2f9e8     08 A6 86 F1 | 	sub	local01, #8
2f9ec     53 01 68 FC | 	wrlong	#0, local01
2f9f0     14 A6 06 F1 | 	add	local01, #20
2f9f4     53 93 02 F6 | 	mov	arg01, local01
2f9f8     28 A6 86 F1 | 	sub	local01, #40
2f9fc     00 94 06 F6 | 	mov	arg02, #0
2fa00     09 96 C6 F9 | 	decod	arg03, #9
2fa04     D8 00 A0 FD | 	call	#\builtin_bytefill_
2fa08     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2fa0c     20 A8 CE F7 | 	test	local02, #32 wz
2fa10     0C 01 90 AD |  if_e	jmp	#LR__5084
2fa14     0C A6 06 F1 | 	add	local01, #12
2fa18     53 AD 02 FB | 	rdlong	local04, local01
2fa1c     0C A6 86 F1 | 	sub	local01, #12
2fa20     01 AC 16 F2 | 	cmp	local04, #1 wc
2fa24     F8 00 90 CD |  if_b	jmp	#LR__5084
2fa28     0C A6 06 F1 | 	add	local01, #12
2fa2c     53 AD 02 FB | 	rdlong	local04, local01
2fa30     08 A6 06 F1 | 	add	local01, #8
2fa34     53 AD 62 FC | 	wrlong	local04, local01
2fa38     44 CE 05 F1 | 	add	fp, #68
2fa3c     E7 AC 02 FB | 	rdlong	local04, fp
2fa40     44 CE 85 F1 | 	sub	fp, #68
2fa44     0A AC 06 F1 | 	add	local04, #10
2fa48     56 B1 E2 FA | 	rdword	local06, local04
2fa4c     09 B0 66 F0 | 	shl	local06, #9
2fa50     0C A6 86 F1 | 	sub	local01, #12
2fa54     53 B3 02 FB | 	rdlong	local07, local01
2fa58                 | ' 				fp->fptr = fp->obj.objsize;
2fa58                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2fa58                 | ' 				clst = fp->obj.sclust;
2fa58                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2fa58     04 A6 06 F1 | 	add	local01, #4
2fa5c     53 B5 02 FB | 	rdlong	local08, local01
2fa60     0C A6 86 F1 | 	sub	local01, #12
2fa64                 | LR__5080
2fa64     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa68     34 00 90 5D |  if_ne	jmp	#LR__5081
2fa6c     58 B5 1A F2 | 	cmp	local08, local06 wcz
2fa70     2C 00 90 ED |  if_be	jmp	#LR__5081
2fa74     53 93 02 F6 | 	mov	arg01, local01
2fa78     59 95 02 F6 | 	mov	arg02, local07
2fa7c     E4 D0 BF FD | 	call	#_fatfs_cc_get_fat
2fa80     3D B3 02 F6 | 	mov	local07, result1
2fa84     02 B2 16 F2 | 	cmp	local07, #2 wc
2fa88     02 AA 06 C6 |  if_b	mov	local03, #2
2fa8c     FF FF 7F FF 
2fa90     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2fa94     01 AA 06 A6 |  if_e	mov	local03, #1
2fa98     58 B5 82 F1 | 	sub	local08, local06
2fa9c     C4 FF 9F FD | 	jmp	#LR__5080
2faa0                 | LR__5081
2faa0     18 A6 06 F1 | 	add	local01, #24
2faa4     53 B3 62 FC | 	wrlong	local07, local01
2faa8     18 A6 86 F1 | 	sub	local01, #24
2faac     00 AA 0E F2 | 	cmp	local03, #0 wz
2fab0     6C 00 90 5D |  if_ne	jmp	#LR__5083
2fab4     FF B5 CE F7 | 	test	local08, #511 wz
2fab8     64 00 90 AD |  if_e	jmp	#LR__5083
2fabc     44 CE 05 F1 | 	add	fp, #68
2fac0     E7 92 02 FB | 	rdlong	arg01, fp
2fac4     44 CE 85 F1 | 	sub	fp, #68
2fac8     59 95 02 F6 | 	mov	arg02, local07
2facc     54 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2fad0     3D AF 0A F6 | 	mov	local05, result1 wz
2fad4     02 AA 06 A6 |  if_e	mov	local03, #2
2fad8     44 00 90 AD |  if_e	jmp	#LR__5082
2fadc     09 B4 46 F0 | 	shr	local08, #9
2fae0     5A AF 02 F1 | 	add	local05, local08
2fae4     1C A6 06 F1 | 	add	local01, #28
2fae8     53 AF 62 FC | 	wrlong	local05, local01
2faec     44 CE 05 F1 | 	add	fp, #68
2faf0     E7 AC 02 FB | 	rdlong	local04, fp
2faf4     44 CE 85 F1 | 	sub	fp, #68
2faf8     01 AC 06 F1 | 	add	local04, #1
2fafc     56 93 C2 FA | 	rdbyte	arg01, local04
2fb00     53 95 02 F6 | 	mov	arg02, local01
2fb04     0C 94 06 F1 | 	add	arg02, #12
2fb08     57 97 02 F6 | 	mov	arg03, local05
2fb0c     1C A6 86 F1 | 	sub	local01, #28
2fb10     01 98 06 F6 | 	mov	arg04, #1
2fb14     0C C8 BF FD | 	call	#_fatfs_cc_disk_read
2fb18     00 7A 0E F2 | 	cmp	result1, #0 wz
2fb1c     01 AA 06 56 |  if_ne	mov	local03, #1
2fb20                 | LR__5082
2fb20                 | LR__5083
2fb20                 | LR__5084
2fb20                 | LR__5085
2fb20                 | LR__5086
2fb20     00 AA 0E F2 | 	cmp	local03, #0 wz
2fb24     53 01 68 5C |  if_ne	wrlong	#0, local01
2fb28                 | ' 
2fb28                 | ' 	return res ;
2fb28     55 7B 02 F6 | 	mov	result1, local03
2fb2c                 | LR__5087
2fb2c     E7 F0 03 F6 | 	mov	ptra, fp
2fb30     F2 00 A0 FD | 	call	#popregs_
2fb34                 | _fatfs_cc_f_open_ret
2fb34     2D 00 64 FD | 	ret
2fb38                 | 
2fb38                 | _fatfs_cc_f_read
2fb38     0E CA 05 F6 | 	mov	COUNT_, #14
2fb3c     E8 00 A0 FD | 	call	#pushregs_
2fb40     38 F0 07 F1 | 	add	ptra, #56
2fb44     49 A7 02 F6 | 	mov	local01, arg01
2fb48     4A A9 02 F6 | 	mov	local02, arg02
2fb4c     4B AB 02 F6 | 	mov	local03, arg03
2fb50     4C AD 02 F6 | 	mov	local04, arg04
2fb54     54 AF 02 F6 | 	mov	local05, local02
2fb58     56 01 68 FC | 	wrlong	#0, local04
2fb5c     E7 94 02 F6 | 	mov	arg02, fp
2fb60     18 94 06 F1 | 	add	arg02, #24
2fb64     53 93 02 F6 | 	mov	arg01, local01
2fb68     2C FA BF FD | 	call	#_fatfs_cc_validate
2fb6c     3D B1 0A F6 | 	mov	local06, result1 wz
2fb70     11 A6 06 A1 |  if_e	add	local01, #17
2fb74     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fb78     11 A6 86 A1 |  if_e	sub	local01, #17
2fb7c     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fb80     58 7B 02 56 |  if_ne	mov	result1, local06
2fb84     3C 03 90 5D |  if_ne	jmp	#LR__5101
2fb88     10 A6 06 F1 | 	add	local01, #16
2fb8c     53 B3 C2 FA | 	rdbyte	local07, local01
2fb90     10 A6 86 F1 | 	sub	local01, #16
2fb94     01 B2 CE F7 | 	test	local07, #1 wz
2fb98     07 7A 06 A6 |  if_e	mov	result1, #7
2fb9c     24 03 90 AD |  if_e	jmp	#LR__5101
2fba0     0C A6 06 F1 | 	add	local01, #12
2fba4     53 B5 02 FB | 	rdlong	local08, local01
2fba8     08 A6 06 F1 | 	add	local01, #8
2fbac     53 B7 02 FB | 	rdlong	local09, local01
2fbb0     14 A6 86 F1 | 	sub	local01, #20
2fbb4     5B B5 82 F1 | 	sub	local08, local09
2fbb8     5A AB 3A F3 | 	fle	local03, local08 wcz
2fbbc                 | ' 
2fbbc                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2fbbc                 | LR__5090
2fbbc     01 AA 16 F2 | 	cmp	local03, #1 wc
2fbc0     FC 02 90 CD |  if_b	jmp	#LR__5100
2fbc4     14 A6 06 F1 | 	add	local01, #20
2fbc8     53 B3 02 FB | 	rdlong	local07, local01
2fbcc     14 A6 86 F1 | 	sub	local01, #20
2fbd0     FF B3 CE F7 | 	test	local07, #511 wz
2fbd4     80 02 90 5D |  if_ne	jmp	#LR__5098
2fbd8     14 A6 06 F1 | 	add	local01, #20
2fbdc     53 B9 02 FB | 	rdlong	local10, local01
2fbe0     14 A6 86 F1 | 	sub	local01, #20
2fbe4     09 B8 46 F0 | 	shr	local10, #9
2fbe8     18 CE 05 F1 | 	add	fp, #24
2fbec     E7 B2 02 FB | 	rdlong	local07, fp
2fbf0     18 CE 85 F1 | 	sub	fp, #24
2fbf4     0A B2 06 F1 | 	add	local07, #10
2fbf8     59 B3 E2 FA | 	rdword	local07, local07
2fbfc     01 B2 86 F1 | 	sub	local07, #1
2fc00     59 B9 0A F5 | 	and	local10, local07 wz
2fc04     6C 00 90 5D |  if_ne	jmp	#LR__5092
2fc08     14 A6 06 F1 | 	add	local01, #20
2fc0c     53 B3 0A FB | 	rdlong	local07, local01 wz
2fc10     14 A6 86 F1 | 	sub	local01, #20
2fc14     08 A6 06 A1 |  if_e	add	local01, #8
2fc18     53 BB 02 AB |  if_e	rdlong	local11, local01
2fc1c     08 A6 86 A1 |  if_e	sub	local01, #8
2fc20     18 00 90 AD |  if_e	jmp	#LR__5091
2fc24     53 93 02 F6 | 	mov	arg01, local01
2fc28     18 A6 06 F1 | 	add	local01, #24
2fc2c     53 95 02 FB | 	rdlong	arg02, local01
2fc30     18 A6 86 F1 | 	sub	local01, #24
2fc34     2C CF BF FD | 	call	#_fatfs_cc_get_fat
2fc38     3D BB 02 F6 | 	mov	local11, result1
2fc3c                 | LR__5091
2fc3c     02 BA 16 F2 | 	cmp	local11, #2 wc
2fc40     11 A6 06 C1 |  if_b	add	local01, #17
2fc44     53 05 48 CC |  if_b	wrbyte	#2, local01
2fc48     02 7A 06 C6 |  if_b	mov	result1, #2
2fc4c     74 02 90 CD |  if_b	jmp	#LR__5101
2fc50     FF FF 7F FF 
2fc54     FF BB 0E F2 | 	cmp	local11, ##-1 wz
2fc58     11 A6 06 A1 |  if_e	add	local01, #17
2fc5c     53 03 48 AC |  if_e	wrbyte	#1, local01
2fc60     01 7A 06 A6 |  if_e	mov	result1, #1
2fc64     5C 02 90 AD |  if_e	jmp	#LR__5101
2fc68     18 A6 06 F1 | 	add	local01, #24
2fc6c     53 BB 62 FC | 	wrlong	local11, local01
2fc70     18 A6 86 F1 | 	sub	local01, #24
2fc74                 | LR__5092
2fc74     18 CE 05 F1 | 	add	fp, #24
2fc78     E7 92 02 FB | 	rdlong	arg01, fp
2fc7c     18 CE 85 F1 | 	sub	fp, #24
2fc80     18 A6 06 F1 | 	add	local01, #24
2fc84     53 95 02 FB | 	rdlong	arg02, local01
2fc88     18 A6 86 F1 | 	sub	local01, #24
2fc8c     94 CE BF FD | 	call	#_fatfs_cc_clst2sect
2fc90     3D BD 0A F6 | 	mov	local12, result1 wz
2fc94     11 A6 06 A1 |  if_e	add	local01, #17
2fc98     53 05 48 AC |  if_e	wrbyte	#2, local01
2fc9c     02 7A 06 A6 |  if_e	mov	result1, #2
2fca0     20 02 90 AD |  if_e	jmp	#LR__5101
2fca4     5C BD 02 F1 | 	add	local12, local10
2fca8     55 BF 02 F6 | 	mov	local13, local03
2fcac     09 BE 46 F0 | 	shr	local13, #9
2fcb0     01 BE 16 F2 | 	cmp	local13, #1 wc
2fcb4     D8 00 90 CD |  if_b	jmp	#LR__5095
2fcb8     5C B3 02 F6 | 	mov	local07, local10
2fcbc     5F B3 02 F1 | 	add	local07, local13
2fcc0     18 CE 05 F1 | 	add	fp, #24
2fcc4     E7 B6 02 FB | 	rdlong	local09, fp
2fcc8     18 CE 85 F1 | 	sub	fp, #24
2fccc     0A B6 06 F1 | 	add	local09, #10
2fcd0     5B 7B E2 FA | 	rdword	result1, local09
2fcd4     3D B3 1A F2 | 	cmp	local07, result1 wcz
2fcd8     18 00 90 ED |  if_be	jmp	#LR__5093
2fcdc     18 CE 05 F1 | 	add	fp, #24
2fce0     E7 BE 02 FB | 	rdlong	local13, fp
2fce4     18 CE 85 F1 | 	sub	fp, #24
2fce8     0A BE 06 F1 | 	add	local13, #10
2fcec     5F BF E2 FA | 	rdword	local13, local13
2fcf0     5C BF 82 F1 | 	sub	local13, local10
2fcf4                 | LR__5093
2fcf4     18 CE 05 F1 | 	add	fp, #24
2fcf8     E7 B2 02 FB | 	rdlong	local07, fp
2fcfc     18 CE 85 F1 | 	sub	fp, #24
2fd00     01 B2 06 F1 | 	add	local07, #1
2fd04     59 93 C2 FA | 	rdbyte	arg01, local07
2fd08     57 95 02 F6 | 	mov	arg02, local05
2fd0c     5F 99 02 F6 | 	mov	arg04, local13
2fd10     5E 97 02 F6 | 	mov	arg03, local12
2fd14     0C C6 BF FD | 	call	#_fatfs_cc_disk_read
2fd18     00 7A 0E F2 | 	cmp	result1, #0 wz
2fd1c     11 A6 06 51 |  if_ne	add	local01, #17
2fd20     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fd24     01 7A 06 56 |  if_ne	mov	result1, #1
2fd28     98 01 90 5D |  if_ne	jmp	#LR__5101
2fd2c     10 A6 06 F1 | 	add	local01, #16
2fd30     53 B3 C2 FA | 	rdbyte	local07, local01
2fd34     10 A6 86 F1 | 	sub	local01, #16
2fd38     80 B2 CE F7 | 	test	local07, #128 wz
2fd3c     44 00 90 AD |  if_e	jmp	#LR__5094
2fd40     1C A6 06 F1 | 	add	local01, #28
2fd44     53 B7 02 FB | 	rdlong	local09, local01
2fd48     1C A6 86 F1 | 	sub	local01, #28
2fd4c     5E B7 82 F1 | 	sub	local09, local12
2fd50     5F B7 12 F2 | 	cmp	local09, local13 wc
2fd54     2C 00 90 3D |  if_ae	jmp	#LR__5094
2fd58     57 93 02 F6 | 	mov	arg01, local05
2fd5c     1C A6 06 F1 | 	add	local01, #28
2fd60     53 B9 02 FB | 	rdlong	local10, local01
2fd64     5E B9 82 F1 | 	sub	local10, local12
2fd68     09 B8 66 F0 | 	shl	local10, #9
2fd6c     5C 93 02 F1 | 	add	arg01, local10
2fd70     0C A6 06 F1 | 	add	local01, #12
2fd74     53 95 02 F6 | 	mov	arg02, local01
2fd78     28 A6 86 F1 | 	sub	local01, #40
2fd7c     09 96 C6 F9 | 	decod	arg03, #9
2fd80     28 4B BF FD | 	call	#__system____builtin_memmove
2fd84                 | LR__5094
2fd84     09 BE 66 F0 | 	shl	local13, #9
2fd88     5F C1 02 F6 | 	mov	local14, local13
2fd8c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2fd8c                 | ' 				}
2fd8c                 | ' 
2fd8c                 | ' 
2fd8c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2fd8c                 | ' 				continue;
2fd8c     04 01 90 FD | 	jmp	#LR__5099
2fd90                 | LR__5095
2fd90     1C A6 06 F1 | 	add	local01, #28
2fd94     53 B3 02 FB | 	rdlong	local07, local01
2fd98     1C A6 86 F1 | 	sub	local01, #28
2fd9c     5E B3 0A F2 | 	cmp	local07, local12 wz
2fda0     A8 00 90 AD |  if_e	jmp	#LR__5097
2fda4     10 A6 06 F1 | 	add	local01, #16
2fda8     53 B3 C2 FA | 	rdbyte	local07, local01
2fdac     10 A6 86 F1 | 	sub	local01, #16
2fdb0     80 B2 CE F7 | 	test	local07, #128 wz
2fdb4     58 00 90 AD |  if_e	jmp	#LR__5096
2fdb8     18 CE 05 F1 | 	add	fp, #24
2fdbc     E7 C0 02 FB | 	rdlong	local14, fp
2fdc0     18 CE 85 F1 | 	sub	fp, #24
2fdc4     01 C0 06 F1 | 	add	local14, #1
2fdc8     60 93 C2 FA | 	rdbyte	arg01, local14
2fdcc     28 A6 06 F1 | 	add	local01, #40
2fdd0     53 95 02 F6 | 	mov	arg02, local01
2fdd4     0C A6 86 F1 | 	sub	local01, #12
2fdd8     53 97 02 FB | 	rdlong	arg03, local01
2fddc     1C A6 86 F1 | 	sub	local01, #28
2fde0     01 98 06 F6 | 	mov	arg04, #1
2fde4     78 C6 BF FD | 	call	#_fatfs_cc_disk_write
2fde8     00 7A 0E F2 | 	cmp	result1, #0 wz
2fdec     11 A6 06 51 |  if_ne	add	local01, #17
2fdf0     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fdf4     01 7A 06 56 |  if_ne	mov	result1, #1
2fdf8     C8 00 90 5D |  if_ne	jmp	#LR__5101
2fdfc     10 A6 06 F1 | 	add	local01, #16
2fe00     53 B3 C2 FA | 	rdbyte	local07, local01
2fe04     7F B2 06 F5 | 	and	local07, #127
2fe08     53 B3 42 FC | 	wrbyte	local07, local01
2fe0c     10 A6 86 F1 | 	sub	local01, #16
2fe10                 | LR__5096
2fe10     18 CE 05 F1 | 	add	fp, #24
2fe14     E7 C0 02 FB | 	rdlong	local14, fp
2fe18     18 CE 85 F1 | 	sub	fp, #24
2fe1c     01 C0 06 F1 | 	add	local14, #1
2fe20     60 93 C2 FA | 	rdbyte	arg01, local14
2fe24     53 95 02 F6 | 	mov	arg02, local01
2fe28     28 94 06 F1 | 	add	arg02, #40
2fe2c     5E 97 02 F6 | 	mov	arg03, local12
2fe30     01 98 06 F6 | 	mov	arg04, #1
2fe34     EC C4 BF FD | 	call	#_fatfs_cc_disk_read
2fe38     00 7A 0E F2 | 	cmp	result1, #0 wz
2fe3c     11 A6 06 51 |  if_ne	add	local01, #17
2fe40     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fe44     01 7A 06 56 |  if_ne	mov	result1, #1
2fe48     78 00 90 5D |  if_ne	jmp	#LR__5101
2fe4c                 | LR__5097
2fe4c     1C A6 06 F1 | 	add	local01, #28
2fe50     53 BD 62 FC | 	wrlong	local12, local01
2fe54     1C A6 86 F1 | 	sub	local01, #28
2fe58                 | LR__5098
2fe58     14 A6 06 F1 | 	add	local01, #20
2fe5c     53 BF 02 FB | 	rdlong	local13, local01
2fe60     FF BF 06 F5 | 	and	local13, #511
2fe64     09 C0 C6 F9 | 	decod	local14, #9
2fe68     5F C1 82 F1 | 	sub	local14, local13
2fe6c     55 C1 3A F3 | 	fle	local14, local03 wcz
2fe70     53 95 02 F6 | 	mov	arg02, local01
2fe74     14 94 06 F1 | 	add	arg02, #20
2fe78     53 BF 02 FB | 	rdlong	local13, local01
2fe7c     14 A6 86 F1 | 	sub	local01, #20
2fe80     FF BF 06 F5 | 	and	local13, #511
2fe84     5F 95 02 F1 | 	add	arg02, local13
2fe88     57 93 02 F6 | 	mov	arg01, local05
2fe8c     60 97 02 F6 | 	mov	arg03, local14
2fe90     18 4A BF FD | 	call	#__system____builtin_memmove
2fe94                 | LR__5099
2fe94     60 AB 82 F1 | 	sub	local03, local14
2fe98     56 B3 02 FB | 	rdlong	local07, local04
2fe9c     60 B3 02 F1 | 	add	local07, local14
2fea0     56 B3 62 FC | 	wrlong	local07, local04
2fea4     60 AF 02 F1 | 	add	local05, local14
2fea8     14 A6 06 F1 | 	add	local01, #20
2feac     53 B3 02 FB | 	rdlong	local07, local01
2feb0     60 B3 02 F1 | 	add	local07, local14
2feb4     53 B3 62 FC | 	wrlong	local07, local01
2feb8     14 A6 86 F1 | 	sub	local01, #20
2febc     FC FC 9F FD | 	jmp	#LR__5090
2fec0                 | LR__5100
2fec0                 | ' 
2fec0                 | ' 
2fec0                 | ' 
2fec0                 | ' 
2fec0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2fec0                 | ' 
2fec0                 | ' 	}
2fec0                 | ' 
2fec0                 | ' 	return FR_OK ;
2fec0     00 7A 06 F6 | 	mov	result1, #0
2fec4                 | LR__5101
2fec4     E7 F0 03 F6 | 	mov	ptra, fp
2fec8     F2 00 A0 FD | 	call	#popregs_
2fecc                 | _fatfs_cc_f_read_ret
2fecc     2D 00 64 FD | 	ret
2fed0                 | 
2fed0                 | _fatfs_cc_f_write
2fed0     12 CA 05 F6 | 	mov	COUNT_, #18
2fed4     E8 00 A0 FD | 	call	#pushregs_
2fed8     34 F0 07 F1 | 	add	ptra, #52
2fedc     49 A7 02 F6 | 	mov	local01, arg01
2fee0     4A A9 02 F6 | 	mov	local02, arg02
2fee4     4B AB 02 F6 | 	mov	local03, arg03
2fee8     4C AD 02 F6 | 	mov	local04, arg04
2feec     54 AF 02 F6 | 	mov	local05, local02
2fef0     56 01 68 FC | 	wrlong	#0, local04
2fef4     E7 94 02 F6 | 	mov	arg02, fp
2fef8     18 94 06 F1 | 	add	arg02, #24
2fefc     53 93 02 F6 | 	mov	arg01, local01
2ff00     94 F6 BF FD | 	call	#_fatfs_cc_validate
2ff04     3D B1 0A F6 | 	mov	local06, result1 wz
2ff08     11 A6 06 A1 |  if_e	add	local01, #17
2ff0c     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2ff10     11 A6 86 A1 |  if_e	sub	local01, #17
2ff14     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2ff18     58 7B 02 56 |  if_ne	mov	result1, local06
2ff1c     F4 03 90 5D |  if_ne	jmp	#LR__5122
2ff20     10 A6 06 F1 | 	add	local01, #16
2ff24     53 B3 C2 FA | 	rdbyte	local07, local01
2ff28     10 A6 86 F1 | 	sub	local01, #16
2ff2c     02 B2 CE F7 | 	test	local07, #2 wz
2ff30     07 7A 06 A6 |  if_e	mov	result1, #7
2ff34     DC 03 90 AD |  if_e	jmp	#LR__5122
2ff38     14 A6 06 F1 | 	add	local01, #20
2ff3c     53 B5 02 FB | 	rdlong	local08, local01
2ff40     5A B7 02 F6 | 	mov	local09, local08
2ff44     55 B7 02 F1 | 	add	local09, local03
2ff48     14 A6 86 F1 | 	sub	local01, #20
2ff4c     5A B7 12 F2 | 	cmp	local09, local08 wc
2ff50     01 AA 66 C6 |  if_b	neg	local03, #1
2ff54     14 A6 06 C1 |  if_b	add	local01, #20
2ff58     53 B9 02 CB |  if_b	rdlong	local10, local01
2ff5c     14 A6 86 C1 |  if_b	sub	local01, #20
2ff60     5C AB 82 C1 |  if_b	sub	local03, local10
2ff64                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2ff64                 | ' 	}
2ff64                 | ' 
2ff64                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2ff64                 | LR__5110
2ff64     01 AA 16 F2 | 	cmp	local03, #1 wc
2ff68     94 03 90 CD |  if_b	jmp	#LR__5121
2ff6c     14 A6 06 F1 | 	add	local01, #20
2ff70     53 B3 02 FB | 	rdlong	local07, local01
2ff74     14 A6 86 F1 | 	sub	local01, #20
2ff78     FF B3 CE F7 | 	test	local07, #511 wz
2ff7c     D8 02 90 5D |  if_ne	jmp	#LR__5119
2ff80     14 A6 06 F1 | 	add	local01, #20
2ff84     53 BB 02 FB | 	rdlong	local11, local01
2ff88     14 A6 86 F1 | 	sub	local01, #20
2ff8c     09 BA 46 F0 | 	shr	local11, #9
2ff90     18 CE 05 F1 | 	add	fp, #24
2ff94     E7 B4 02 FB | 	rdlong	local08, fp
2ff98     18 CE 85 F1 | 	sub	fp, #24
2ff9c     5A BD 02 F6 | 	mov	local12, local08
2ffa0     0A BC 06 F1 | 	add	local12, #10
2ffa4     5E BF E2 FA | 	rdword	local13, local12
2ffa8     0A BC 86 F1 | 	sub	local12, #10
2ffac     5F B7 32 F9 | 	getword	local09, local13, #0
2ffb0     01 B6 86 F1 | 	sub	local09, #1
2ffb4     5B BB 0A F5 | 	and	local11, local09 wz
2ffb8     A0 00 90 5D |  if_ne	jmp	#LR__5113
2ffbc     14 A6 06 F1 | 	add	local01, #20
2ffc0     53 B3 0A FB | 	rdlong	local07, local01 wz
2ffc4     14 A6 86 F1 | 	sub	local01, #20
2ffc8     24 00 90 5D |  if_ne	jmp	#LR__5111
2ffcc     08 A6 06 F1 | 	add	local01, #8
2ffd0     53 C1 0A FB | 	rdlong	local14, local01 wz
2ffd4     08 A6 86 F1 | 	sub	local01, #8
2ffd8     2C 00 90 5D |  if_ne	jmp	#LR__5112
2ffdc     53 93 02 F6 | 	mov	arg01, local01
2ffe0     00 94 06 F6 | 	mov	arg02, #0
2ffe4     44 D0 BF FD | 	call	#_fatfs_cc_create_chain
2ffe8     3D C1 02 F6 | 	mov	local14, result1
2ffec     18 00 90 FD | 	jmp	#LR__5112
2fff0                 | LR__5111
2fff0     53 93 02 F6 | 	mov	arg01, local01
2fff4     18 A6 06 F1 | 	add	local01, #24
2fff8     53 95 02 FB | 	rdlong	arg02, local01
2fffc     18 A6 86 F1 | 	sub	local01, #24
30000     28 D0 BF FD | 	call	#_fatfs_cc_create_chain
30004     3D C1 02 F6 | 	mov	local14, result1
30008                 | LR__5112
30008     00 C0 0E F2 | 	cmp	local14, #0 wz
3000c     F0 02 90 AD |  if_e	jmp	#LR__5121
30010     01 C0 0E F2 | 	cmp	local14, #1 wz
30014     11 A6 06 A1 |  if_e	add	local01, #17
30018     53 05 48 AC |  if_e	wrbyte	#2, local01
3001c     02 7A 06 A6 |  if_e	mov	result1, #2
30020     F0 02 90 AD |  if_e	jmp	#LR__5122
30024     FF FF 7F FF 
30028     FF C1 0E F2 | 	cmp	local14, ##-1 wz
3002c     11 A6 06 A1 |  if_e	add	local01, #17
30030     53 03 48 AC |  if_e	wrbyte	#1, local01
30034     01 7A 06 A6 |  if_e	mov	result1, #1
30038     D8 02 90 AD |  if_e	jmp	#LR__5122
3003c     18 A6 06 F1 | 	add	local01, #24
30040     53 C1 62 FC | 	wrlong	local14, local01
30044     10 A6 86 F1 | 	sub	local01, #16
30048     53 B3 0A FB | 	rdlong	local07, local01 wz
3004c     08 A6 86 F1 | 	sub	local01, #8
30050     08 A6 06 A1 |  if_e	add	local01, #8
30054     53 C1 62 AC |  if_e	wrlong	local14, local01
30058     08 A6 86 A1 |  if_e	sub	local01, #8
3005c                 | LR__5113
3005c     10 A6 06 F1 | 	add	local01, #16
30060     53 B3 C2 FA | 	rdbyte	local07, local01
30064     10 A6 86 F1 | 	sub	local01, #16
30068     80 B2 CE F7 | 	test	local07, #128 wz
3006c     58 00 90 AD |  if_e	jmp	#LR__5114
30070     18 CE 05 F1 | 	add	fp, #24
30074     E7 B8 02 FB | 	rdlong	local10, fp
30078     18 CE 85 F1 | 	sub	fp, #24
3007c     01 B8 06 F1 | 	add	local10, #1
30080     5C 93 C2 FA | 	rdbyte	arg01, local10
30084     28 A6 06 F1 | 	add	local01, #40
30088     53 95 02 F6 | 	mov	arg02, local01
3008c     0C A6 86 F1 | 	sub	local01, #12
30090     53 97 02 FB | 	rdlong	arg03, local01
30094     1C A6 86 F1 | 	sub	local01, #28
30098     01 98 06 F6 | 	mov	arg04, #1
3009c     C0 C3 BF FD | 	call	#_fatfs_cc_disk_write
300a0     00 7A 0E F2 | 	cmp	result1, #0 wz
300a4     11 A6 06 51 |  if_ne	add	local01, #17
300a8     53 03 48 5C |  if_ne	wrbyte	#1, local01
300ac     01 7A 06 56 |  if_ne	mov	result1, #1
300b0     60 02 90 5D |  if_ne	jmp	#LR__5122
300b4     10 A6 06 F1 | 	add	local01, #16
300b8     53 B3 C2 FA | 	rdbyte	local07, local01
300bc     7F B2 06 F5 | 	and	local07, #127
300c0     53 B3 42 FC | 	wrbyte	local07, local01
300c4     10 A6 86 F1 | 	sub	local01, #16
300c8                 | LR__5114
300c8     18 CE 05 F1 | 	add	fp, #24
300cc     E7 92 02 FB | 	rdlong	arg01, fp
300d0     18 CE 85 F1 | 	sub	fp, #24
300d4     18 A6 06 F1 | 	add	local01, #24
300d8     53 95 02 FB | 	rdlong	arg02, local01
300dc     18 A6 86 F1 | 	sub	local01, #24
300e0     40 CA BF FD | 	call	#_fatfs_cc_clst2sect
300e4     3D C3 0A F6 | 	mov	local15, result1 wz
300e8     11 A6 06 A1 |  if_e	add	local01, #17
300ec     53 05 48 AC |  if_e	wrbyte	#2, local01
300f0     02 7A 06 A6 |  if_e	mov	result1, #2
300f4     1C 02 90 AD |  if_e	jmp	#LR__5122
300f8     5D C3 02 F1 | 	add	local15, local11
300fc     55 C5 02 F6 | 	mov	local16, local03
30100     09 C4 46 F0 | 	shr	local16, #9
30104     01 C4 16 F2 | 	cmp	local16, #1 wc
30108     D4 00 90 CD |  if_b	jmp	#LR__5117
3010c     5D B3 02 F6 | 	mov	local07, local11
30110     62 B3 02 F1 | 	add	local07, local16
30114     18 CE 05 F1 | 	add	fp, #24
30118     E7 C6 02 FB | 	rdlong	local17, fp
3011c     18 CE 85 F1 | 	sub	fp, #24
30120     0A C6 06 F1 | 	add	local17, #10
30124     63 B9 E2 FA | 	rdword	local10, local17
30128     5C B3 1A F2 | 	cmp	local07, local10 wcz
3012c     18 00 90 ED |  if_be	jmp	#LR__5115
30130     18 CE 05 F1 | 	add	fp, #24
30134     E7 B8 02 FB | 	rdlong	local10, fp
30138     18 CE 85 F1 | 	sub	fp, #24
3013c     0A B8 06 F1 | 	add	local10, #10
30140     5C C5 E2 FA | 	rdword	local16, local10
30144     5D C5 82 F1 | 	sub	local16, local11
30148                 | LR__5115
30148     18 CE 05 F1 | 	add	fp, #24
3014c     E7 B8 02 FB | 	rdlong	local10, fp
30150     18 CE 85 F1 | 	sub	fp, #24
30154     01 B8 06 F1 | 	add	local10, #1
30158     5C 93 C2 FA | 	rdbyte	arg01, local10
3015c     57 95 02 F6 | 	mov	arg02, local05
30160     61 97 02 F6 | 	mov	arg03, local15
30164     62 99 02 F6 | 	mov	arg04, local16
30168     F4 C2 BF FD | 	call	#_fatfs_cc_disk_write
3016c     00 7A 0E F2 | 	cmp	result1, #0 wz
30170     11 A6 06 51 |  if_ne	add	local01, #17
30174     53 03 48 5C |  if_ne	wrbyte	#1, local01
30178     01 7A 06 56 |  if_ne	mov	result1, #1
3017c     94 01 90 5D |  if_ne	jmp	#LR__5122
30180     1C A6 06 F1 | 	add	local01, #28
30184     53 B3 02 FB | 	rdlong	local07, local01
30188     1C A6 86 F1 | 	sub	local01, #28
3018c     61 B3 82 F1 | 	sub	local07, local15
30190     62 B3 12 F2 | 	cmp	local07, local16 wc
30194     3C 00 90 3D |  if_ae	jmp	#LR__5116
30198     28 A6 06 F1 | 	add	local01, #40
3019c     53 93 02 F6 | 	mov	arg01, local01
301a0     57 95 02 F6 | 	mov	arg02, local05
301a4     0C A6 86 F1 | 	sub	local01, #12
301a8     53 BF 02 FB | 	rdlong	local13, local01
301ac     61 BF 82 F1 | 	sub	local13, local15
301b0     09 BE 66 F0 | 	shl	local13, #9
301b4     5F 95 02 F1 | 	add	arg02, local13
301b8     09 96 C6 F9 | 	decod	arg03, #9
301bc     EC 46 BF FD | 	call	#__system____builtin_memmove
301c0     0C A6 86 F1 | 	sub	local01, #12
301c4     53 B3 C2 FA | 	rdbyte	local07, local01
301c8     7F B2 06 F5 | 	and	local07, #127
301cc     53 B3 42 FC | 	wrbyte	local07, local01
301d0     10 A6 86 F1 | 	sub	local01, #16
301d4                 | LR__5116
301d4     62 C9 02 F6 | 	mov	local18, local16
301d8     09 C8 66 F0 | 	shl	local18, #9
301dc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
301dc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
301dc                 | ' 				}
301dc                 | ' 
301dc                 | ' 
301dc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
301dc                 | ' 				continue;
301dc     C4 00 90 FD | 	jmp	#LR__5120
301e0                 | LR__5117
301e0     1C A6 06 F1 | 	add	local01, #28
301e4     53 B3 02 FB | 	rdlong	local07, local01
301e8     1C A6 86 F1 | 	sub	local01, #28
301ec     61 B3 0A F2 | 	cmp	local07, local15 wz
301f0     58 00 90 AD |  if_e	jmp	#LR__5118
301f4     14 A6 06 F1 | 	add	local01, #20
301f8     53 C7 02 FB | 	rdlong	local17, local01
301fc     08 A6 86 F1 | 	sub	local01, #8
30200     53 BD 02 FB | 	rdlong	local12, local01
30204     0C A6 86 F1 | 	sub	local01, #12
30208     5E C7 12 F2 | 	cmp	local17, local12 wc
3020c     3C 00 90 3D |  if_ae	jmp	#LR__5118
30210     18 CE 05 F1 | 	add	fp, #24
30214     E7 C8 02 FB | 	rdlong	local18, fp
30218     18 CE 85 F1 | 	sub	fp, #24
3021c     01 C8 06 F1 | 	add	local18, #1
30220     64 93 C2 FA | 	rdbyte	arg01, local18
30224     53 95 02 F6 | 	mov	arg02, local01
30228     28 94 06 F1 | 	add	arg02, #40
3022c     61 97 02 F6 | 	mov	arg03, local15
30230     01 98 06 F6 | 	mov	arg04, #1
30234     EC C0 BF FD | 	call	#_fatfs_cc_disk_read
30238     00 7A 0E F2 | 	cmp	result1, #0 wz
3023c     11 A6 06 51 |  if_ne	add	local01, #17
30240     53 03 48 5C |  if_ne	wrbyte	#1, local01
30244                 | ' 				fp->fptr < fp->obj.objsize &&
30244                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
30244                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
30244     01 7A 06 56 |  if_ne	mov	result1, #1
30248     C8 00 90 5D |  if_ne	jmp	#LR__5122
3024c                 | LR__5118
3024c     1C A6 06 F1 | 	add	local01, #28
30250     53 C3 62 FC | 	wrlong	local15, local01
30254     1C A6 86 F1 | 	sub	local01, #28
30258                 | LR__5119
30258     14 A6 06 F1 | 	add	local01, #20
3025c     53 B9 02 FB | 	rdlong	local10, local01
30260     FF B9 06 F5 | 	and	local10, #511
30264     09 C8 C6 F9 | 	decod	local18, #9
30268     5C C9 82 F1 | 	sub	local18, local10
3026c     55 C9 3A F3 | 	fle	local18, local03 wcz
30270     53 93 02 F6 | 	mov	arg01, local01
30274     14 92 06 F1 | 	add	arg01, #20
30278     53 BF 02 FB | 	rdlong	local13, local01
3027c     FF BF 06 F5 | 	and	local13, #511
30280     5F 93 02 F1 | 	add	arg01, local13
30284     57 95 02 F6 | 	mov	arg02, local05
30288     64 97 02 F6 | 	mov	arg03, local18
3028c     1C 46 BF FD | 	call	#__system____builtin_memmove
30290     04 A6 86 F1 | 	sub	local01, #4
30294     53 B3 C2 FA | 	rdbyte	local07, local01
30298     80 B2 46 F5 | 	or	local07, #128
3029c     53 B3 42 FC | 	wrbyte	local07, local01
302a0     10 A6 86 F1 | 	sub	local01, #16
302a4                 | LR__5120
302a4     64 AB 82 F1 | 	sub	local03, local18
302a8     56 B3 02 FB | 	rdlong	local07, local04
302ac     64 B3 02 F1 | 	add	local07, local18
302b0     56 B3 62 FC | 	wrlong	local07, local04
302b4     64 AF 02 F1 | 	add	local05, local18
302b8     14 A6 06 F1 | 	add	local01, #20
302bc     53 B9 02 FB | 	rdlong	local10, local01
302c0     64 B9 02 F1 | 	add	local10, local18
302c4     53 B9 62 FC | 	wrlong	local10, local01
302c8     08 A6 86 F1 | 	sub	local01, #8
302cc     53 B7 02 FB | 	rdlong	local09, local01
302d0     0C A6 86 F1 | 	sub	local01, #12
302d4     5B B9 1A F2 | 	cmp	local10, local09 wcz
302d8     14 A6 06 11 |  if_a	add	local01, #20
302dc     53 B3 02 1B |  if_a	rdlong	local07, local01
302e0     14 A6 86 11 |  if_a	sub	local01, #20
302e4     0C A6 06 E1 |  if_be	add	local01, #12
302e8     53 B3 02 EB |  if_be	rdlong	local07, local01
302ec     0C A6 86 E1 |  if_be	sub	local01, #12
302f0     0C A6 06 F1 | 	add	local01, #12
302f4     53 B3 62 FC | 	wrlong	local07, local01
302f8     0C A6 86 F1 | 	sub	local01, #12
302fc     64 FC 9F FD | 	jmp	#LR__5110
30300                 | LR__5121
30300     10 A6 06 F1 | 	add	local01, #16
30304     53 B3 C2 FA | 	rdbyte	local07, local01
30308     40 B2 46 F5 | 	or	local07, #64
3030c     53 B3 42 FC | 	wrbyte	local07, local01
30310                 | ' 
30310                 | ' 
30310                 | ' 
30310                 | ' 
30310                 | ' 
30310                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
30310                 | ' 		fp->flag |=  0x80 ;
30310                 | ' 
30310                 | ' 	}
30310                 | ' 
30310                 | ' 	fp->flag |=  0x40 ;
30310                 | ' 
30310                 | ' 	return FR_OK ;
30310     00 7A 06 F6 | 	mov	result1, #0
30314                 | LR__5122
30314     E7 F0 03 F6 | 	mov	ptra, fp
30318     F2 00 A0 FD | 	call	#popregs_
3031c                 | _fatfs_cc_f_write_ret
3031c     2D 00 64 FD | 	ret
30320                 | 
30320                 | _fatfs_cc_f_sync
30320     03 CA 05 F6 | 	mov	COUNT_, #3
30324     E8 00 A0 FD | 	call	#pushregs_
30328     18 F0 07 F1 | 	add	ptra, #24
3032c     49 A7 02 F6 | 	mov	local01, arg01
30330     E7 94 02 F6 | 	mov	arg02, fp
30334     0C 94 06 F1 | 	add	arg02, #12
30338     53 93 02 F6 | 	mov	arg01, local01
3033c     58 F2 BF FD | 	call	#_fatfs_cc_validate
30340     3D A9 0A F6 | 	mov	local02, result1 wz
30344     30 01 90 5D |  if_ne	jmp	#LR__5133
30348     10 A6 06 F1 | 	add	local01, #16
3034c     53 99 C2 FA | 	rdbyte	arg04, local01
30350     10 A6 86 F1 | 	sub	local01, #16
30354     40 98 CE F7 | 	test	arg04, #64 wz
30358     1C 01 90 AD |  if_e	jmp	#LR__5132
3035c     10 A6 06 F1 | 	add	local01, #16
30360     53 A9 C2 FA | 	rdbyte	local02, local01
30364     10 A6 86 F1 | 	sub	local01, #16
30368     80 A8 CE F7 | 	test	local02, #128 wz
3036c     50 00 90 AD |  if_e	jmp	#LR__5130
30370     0C CE 05 F1 | 	add	fp, #12
30374     E7 A8 02 FB | 	rdlong	local02, fp
30378     0C CE 85 F1 | 	sub	fp, #12
3037c     01 A8 06 F1 | 	add	local02, #1
30380     54 93 C2 FA | 	rdbyte	arg01, local02
30384     28 A6 06 F1 | 	add	local01, #40
30388     53 95 02 F6 | 	mov	arg02, local01
3038c     0C A6 86 F1 | 	sub	local01, #12
30390     53 97 02 FB | 	rdlong	arg03, local01
30394     1C A6 86 F1 | 	sub	local01, #28
30398     01 98 06 F6 | 	mov	arg04, #1
3039c     C0 C0 BF FD | 	call	#_fatfs_cc_disk_write
303a0     00 7A 0E F2 | 	cmp	result1, #0 wz
303a4     01 7A 06 56 |  if_ne	mov	result1, #1
303a8     D0 00 90 5D |  if_ne	jmp	#LR__5134
303ac     10 A6 06 F1 | 	add	local01, #16
303b0     53 A9 C2 FA | 	rdbyte	local02, local01
303b4     7F A8 06 F5 | 	and	local02, #127
303b8     53 A9 42 FC | 	wrbyte	local02, local01
303bc     10 A6 86 F1 | 	sub	local01, #16
303c0                 | LR__5130
303c0     EC 0F B0 FD | 	call	#_fatfs_cc__get_fattime
303c4     3D AB 02 F6 | 	mov	local03, result1
303c8     0C CE 05 F1 | 	add	fp, #12
303cc     E7 92 02 FB | 	rdlong	arg01, fp
303d0     0C CE 85 F1 | 	sub	fp, #12
303d4     20 A6 06 F1 | 	add	local01, #32
303d8     53 95 02 FB | 	rdlong	arg02, local01
303dc     20 A6 86 F1 | 	sub	local01, #32
303e0     C8 C5 BF FD | 	call	#_fatfs_cc_move_window
303e4     3D A9 0A F6 | 	mov	local02, result1 wz
303e8     8C 00 90 5D |  if_ne	jmp	#LR__5131
303ec     24 A6 06 F1 | 	add	local01, #36
303f0     53 A9 02 FB | 	rdlong	local02, local01
303f4     24 A6 86 F1 | 	sub	local01, #36
303f8     0B A8 06 F1 | 	add	local02, #11
303fc     54 99 C2 FA | 	rdbyte	arg04, local02
30400     20 98 46 F5 | 	or	arg04, #32
30404     54 99 42 FC | 	wrbyte	arg04, local02
30408     0B A8 86 F1 | 	sub	local02, #11
3040c     53 93 02 FB | 	rdlong	arg01, local01
30410     08 A6 06 F1 | 	add	local01, #8
30414     53 97 02 FB | 	rdlong	arg03, local01
30418     54 95 02 F6 | 	mov	arg02, local02
3041c     F8 D2 BF FD | 	call	#_fatfs_cc_st_clust
30420     54 93 02 F6 | 	mov	arg01, local02
30424     1C 92 06 F1 | 	add	arg01, #28
30428     04 A6 06 F1 | 	add	local01, #4
3042c     53 95 02 FB | 	rdlong	arg02, local01
30430     49 95 62 FC | 	wrlong	arg02, arg01
30434     54 93 02 F6 | 	mov	arg01, local02
30438     16 92 06 F1 | 	add	arg01, #22
3043c     49 AB 62 FC | 	wrlong	local03, arg01
30440     12 A8 06 F1 | 	add	local02, #18
30444     54 01 58 FC | 	wrword	#0, local02
30448     0C CE 05 F1 | 	add	fp, #12
3044c     E7 AA 02 FB | 	rdlong	local03, fp
30450     03 AA 06 F1 | 	add	local03, #3
30454     55 03 48 FC | 	wrbyte	#1, local03
30458     E7 92 02 FB | 	rdlong	arg01, fp
3045c     0C CE 85 F1 | 	sub	fp, #12
30460     C0 C5 BF FD | 	call	#_fatfs_cc_sync_fs
30464     3D A9 02 F6 | 	mov	local02, result1
30468     04 A6 06 F1 | 	add	local01, #4
3046c     53 AB C2 FA | 	rdbyte	local03, local01
30470     BF AA 06 F5 | 	and	local03, #191
30474     53 AB 42 FC | 	wrbyte	local03, local01
30478                 | LR__5131
30478                 | LR__5132
30478                 | LR__5133
30478                 | ' 					dir = fp->dir_ptr;
30478                 | ' 					dir[ 11 ] |=  0x20 ;
30478                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30478                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30478                 | ' 					st_dword(dir +  22 , tm);
30478                 | ' 					st_word(dir +  18 , 0);
30478                 | ' 					fs->wflag = 1;
30478                 | ' 					res = sync_fs(fs);
30478                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30478                 | ' 				}
30478                 | ' 			}
30478                 | ' 		}
30478                 | ' 	}
30478                 | ' 
30478                 | ' 	return res ;
30478     54 7B 02 F6 | 	mov	result1, local02
3047c                 | LR__5134
3047c     E7 F0 03 F6 | 	mov	ptra, fp
30480     F2 00 A0 FD | 	call	#popregs_
30484                 | _fatfs_cc_f_sync_ret
30484     2D 00 64 FD | 	ret
30488                 | 
30488                 | _fatfs_cc_f_close
30488     02 CA 05 F6 | 	mov	COUNT_, #2
3048c     E8 00 A0 FD | 	call	#pushregs_
30490     10 F0 07 F1 | 	add	ptra, #16
30494     49 A7 02 F6 | 	mov	local01, arg01
30498     84 FE BF FD | 	call	#_fatfs_cc_f_sync
3049c     3D A9 0A F6 | 	mov	local02, result1 wz
304a0     18 00 90 5D |  if_ne	jmp	#LR__5140
304a4     E7 94 02 F6 | 	mov	arg02, fp
304a8     0C 94 06 F1 | 	add	arg02, #12
304ac     53 93 02 F6 | 	mov	arg01, local01
304b0     E4 F0 BF FD | 	call	#_fatfs_cc_validate
304b4     3D A9 0A F6 | 	mov	local02, result1 wz
304b8     53 01 68 AC |  if_e	wrlong	#0, local01
304bc                 | LR__5140
304bc                 | ' 
304bc                 | ' 
304bc                 | ' 
304bc                 | ' 
304bc                 | ' 			fp->obj.fs = 0;
304bc                 | ' #line 4192 "ff.c"
304bc                 | ' 		}
304bc                 | ' 	}
304bc                 | ' 	return res;
304bc     54 7B 02 F6 | 	mov	result1, local02
304c0     E7 F0 03 F6 | 	mov	ptra, fp
304c4     F2 00 A0 FD | 	call	#popregs_
304c8                 | _fatfs_cc_f_close_ret
304c8     2D 00 64 FD | 	ret
304cc                 | 
304cc                 | _fatfs_cc_f_lseek
304cc     0D CA 05 F6 | 	mov	COUNT_, #13
304d0     E8 00 A0 FD | 	call	#pushregs_
304d4     24 F0 07 F1 | 	add	ptra, #36
304d8     49 A7 02 F6 | 	mov	local01, arg01
304dc     4A A9 02 F6 | 	mov	local02, arg02
304e0     E7 94 02 F6 | 	mov	arg02, fp
304e4     10 94 06 F1 | 	add	arg02, #16
304e8     53 93 02 F6 | 	mov	arg01, local01
304ec     A8 F0 BF FD | 	call	#_fatfs_cc_validate
304f0     3D AB 0A F6 | 	mov	local03, result1 wz
304f4     11 A6 06 A1 |  if_e	add	local01, #17
304f8     53 AB C2 AA |  if_e	rdbyte	local03, local01
304fc     11 A6 86 A1 |  if_e	sub	local01, #17
30500     00 AA 0E F2 | 	cmp	local03, #0 wz
30504     55 7B 02 56 |  if_ne	mov	result1, local03
30508     5C 03 90 5D |  if_ne	jmp	#LR__5166
3050c     0C A6 06 F1 | 	add	local01, #12
30510     53 AD 02 FB | 	rdlong	local04, local01
30514     0C A6 86 F1 | 	sub	local01, #12
30518     56 A9 1A F2 | 	cmp	local02, local04 wcz
3051c     20 00 90 ED |  if_be	jmp	#LR__5150
30520     10 A6 06 F1 | 	add	local01, #16
30524     53 AF C2 FA | 	rdbyte	local05, local01
30528     10 A6 86 F1 | 	sub	local01, #16
3052c     57 B1 E2 F8 | 	getbyte	local06, local05, #0
30530     02 B0 CE F7 | 	test	local06, #2 wz
30534     0C A6 06 A1 |  if_e	add	local01, #12
30538     53 A9 02 AB |  if_e	rdlong	local02, local01
3053c     0C A6 86 A1 |  if_e	sub	local01, #12
30540                 | LR__5150
30540     14 A6 06 F1 | 	add	local01, #20
30544     53 B3 02 FB | 	rdlong	local07, local01
30548     00 B4 06 F6 | 	mov	local08, #0
3054c     53 01 68 FC | 	wrlong	#0, local01
30550     14 A6 86 F1 | 	sub	local01, #20
30554     01 A8 16 F2 | 	cmp	local02, #1 wc
30558     F4 01 90 CD |  if_b	jmp	#LR__5162
3055c     10 CE 05 F1 | 	add	fp, #16
30560     E7 B6 02 FB | 	rdlong	local09, fp
30564     10 CE 85 F1 | 	sub	fp, #16
30568     0A B6 06 F1 | 	add	local09, #10
3056c     5B AF E2 FA | 	rdword	local05, local09
30570     57 B9 32 F9 | 	getword	local10, local05, #0
30574     09 B8 66 F0 | 	shl	local10, #9
30578     5C BB 02 F6 | 	mov	local11, local10
3057c     01 B2 16 F2 | 	cmp	local07, #1 wc
30580     5C 00 90 CD |  if_b	jmp	#LR__5151
30584     54 B7 02 F6 | 	mov	local09, local02
30588     01 B6 86 F1 | 	sub	local09, #1
3058c     5D B7 12 FD | 	qdiv	local09, local11
30590     59 AF 02 F6 | 	mov	local05, local07
30594     01 AE 86 F1 | 	sub	local05, #1
30598     5D BD 02 F6 | 	mov	local12, local11
3059c     18 B6 62 FD | 	getqx	local09
305a0     5E AF 12 FD | 	qdiv	local05, local12
305a4     18 B8 62 FD | 	getqx	local10
305a8     5C B7 12 F2 | 	cmp	local09, local10 wc
305ac     30 00 90 CD |  if_b	jmp	#LR__5151
305b0     59 B1 02 F6 | 	mov	local06, local07
305b4     01 B0 86 F1 | 	sub	local06, #1
305b8     5D B7 02 F6 | 	mov	local09, local11
305bc     01 B6 86 F1 | 	sub	local09, #1
305c0     5B B1 22 F5 | 	andn	local06, local09
305c4     14 A6 06 F1 | 	add	local01, #20
305c8     53 B1 62 FC | 	wrlong	local06, local01
305cc     58 A9 82 F1 | 	sub	local02, local06
305d0     04 A6 06 F1 | 	add	local01, #4
305d4     53 BF 02 FB | 	rdlong	local13, local01
305d8     18 A6 86 F1 | 	sub	local01, #24
305dc     64 00 90 FD | 	jmp	#LR__5153
305e0                 | LR__5151
305e0     08 A6 06 F1 | 	add	local01, #8
305e4     53 BF 0A FB | 	rdlong	local13, local01 wz
305e8     08 A6 86 F1 | 	sub	local01, #8
305ec     48 00 90 5D |  if_ne	jmp	#LR__5152
305f0     53 93 02 F6 | 	mov	arg01, local01
305f4     00 94 06 F6 | 	mov	arg02, #0
305f8     30 CA BF FD | 	call	#_fatfs_cc_create_chain
305fc     3D BF 02 F6 | 	mov	local13, result1
30600     01 BE 0E F2 | 	cmp	local13, #1 wz
30604     11 A6 06 A1 |  if_e	add	local01, #17
30608     53 05 48 AC |  if_e	wrbyte	#2, local01
3060c     02 7A 06 A6 |  if_e	mov	result1, #2
30610     54 02 90 AD |  if_e	jmp	#LR__5166
30614     FF FF 7F FF 
30618     FF BF 0E F2 | 	cmp	local13, ##-1 wz
3061c     11 A6 06 A1 |  if_e	add	local01, #17
30620     53 03 48 AC |  if_e	wrbyte	#1, local01
30624     01 7A 06 A6 |  if_e	mov	result1, #1
30628     3C 02 90 AD |  if_e	jmp	#LR__5166
3062c     08 A6 06 F1 | 	add	local01, #8
30630     53 BF 62 FC | 	wrlong	local13, local01
30634     08 A6 86 F1 | 	sub	local01, #8
30638                 | LR__5152
30638     18 A6 06 F1 | 	add	local01, #24
3063c     53 BF 62 FC | 	wrlong	local13, local01
30640     18 A6 86 F1 | 	sub	local01, #24
30644                 | LR__5153
30644     00 BE 0E F2 | 	cmp	local13, #0 wz
30648     04 01 90 AD |  if_e	jmp	#LR__5161
3064c                 | ' 				while (ofs > bcs) {
3064c                 | LR__5154
3064c     5D A9 1A F2 | 	cmp	local02, local11 wcz
30650     B0 00 90 ED |  if_be	jmp	#LR__5159
30654     5D A9 82 F1 | 	sub	local02, local11
30658     14 A6 06 F1 | 	add	local01, #20
3065c     53 AD 02 FB | 	rdlong	local04, local01
30660     5D AD 02 F1 | 	add	local04, local11
30664     53 AD 62 FC | 	wrlong	local04, local01
30668     04 A6 86 F1 | 	sub	local01, #4
3066c     53 AD C2 FA | 	rdbyte	local04, local01
30670     10 A6 86 F1 | 	sub	local01, #16
30674     02 AC CE F7 | 	test	local04, #2 wz
30678     1C 00 90 AD |  if_e	jmp	#LR__5155
3067c     53 93 02 F6 | 	mov	arg01, local01
30680     5F 95 02 F6 | 	mov	arg02, local13
30684     A4 C9 BF FD | 	call	#_fatfs_cc_create_chain
30688     3D BF 0A F6 | 	mov	local13, result1 wz
3068c     00 A8 06 A6 |  if_e	mov	local02, #0
30690                 | ' 							ofs = 0; break;
30690     70 00 90 AD |  if_e	jmp	#LR__5159
30694     10 00 90 FD | 	jmp	#LR__5156
30698                 | LR__5155
30698     53 93 02 F6 | 	mov	arg01, local01
3069c     5F 95 02 F6 | 	mov	arg02, local13
306a0     C0 C4 BF FD | 	call	#_fatfs_cc_get_fat
306a4     3D BF 02 F6 | 	mov	local13, result1
306a8                 | LR__5156
306a8     FF FF 7F FF 
306ac     FF BF 0E F2 | 	cmp	local13, ##-1 wz
306b0     11 A6 06 A1 |  if_e	add	local01, #17
306b4     53 03 48 AC |  if_e	wrbyte	#1, local01
306b8     01 7A 06 A6 |  if_e	mov	result1, #1
306bc     A8 01 90 AD |  if_e	jmp	#LR__5166
306c0     02 BE 16 F2 | 	cmp	local13, #2 wc
306c4     1C 00 90 CD |  if_b	jmp	#LR__5157
306c8     10 CE 05 F1 | 	add	fp, #16
306cc     E7 AC 02 FB | 	rdlong	local04, fp
306d0     10 CE 85 F1 | 	sub	fp, #16
306d4     18 AC 06 F1 | 	add	local04, #24
306d8     56 AF 02 FB | 	rdlong	local05, local04
306dc     57 BF 12 F2 | 	cmp	local13, local05 wc
306e0     10 00 90 CD |  if_b	jmp	#LR__5158
306e4                 | LR__5157
306e4     11 A6 06 F1 | 	add	local01, #17
306e8     53 05 48 FC | 	wrbyte	#2, local01
306ec     02 7A 06 F6 | 	mov	result1, #2
306f0     74 01 90 FD | 	jmp	#LR__5166
306f4                 | LR__5158
306f4     18 A6 06 F1 | 	add	local01, #24
306f8     53 BF 62 FC | 	wrlong	local13, local01
306fc     18 A6 86 F1 | 	sub	local01, #24
30700     48 FF 9F FD | 	jmp	#LR__5154
30704                 | LR__5159
30704     14 A6 06 F1 | 	add	local01, #20
30708     53 AD 02 FB | 	rdlong	local04, local01
3070c     54 AD 02 F1 | 	add	local04, local02
30710     53 AD 62 FC | 	wrlong	local04, local01
30714     14 A6 86 F1 | 	sub	local01, #20
30718     FF A9 CE F7 | 	test	local02, #511 wz
3071c     30 00 90 AD |  if_e	jmp	#LR__5160
30720     10 CE 05 F1 | 	add	fp, #16
30724     E7 92 02 FB | 	rdlong	arg01, fp
30728     10 CE 85 F1 | 	sub	fp, #16
3072c     5F 95 02 F6 | 	mov	arg02, local13
30730     F0 C3 BF FD | 	call	#_fatfs_cc_clst2sect
30734     3D B5 0A F6 | 	mov	local08, result1 wz
30738     11 A6 06 A1 |  if_e	add	local01, #17
3073c     53 05 48 AC |  if_e	wrbyte	#2, local01
30740     02 7A 06 A6 |  if_e	mov	result1, #2
30744     20 01 90 AD |  if_e	jmp	#LR__5166
30748     09 A8 46 F0 | 	shr	local02, #9
3074c     54 B5 02 F1 | 	add	local08, local02
30750                 | LR__5160
30750                 | LR__5161
30750                 | LR__5162
30750     14 A6 06 F1 | 	add	local01, #20
30754     53 AD 02 FB | 	rdlong	local04, local01
30758     08 A6 86 F1 | 	sub	local01, #8
3075c     53 B1 02 FB | 	rdlong	local06, local01
30760     0C A6 86 F1 | 	sub	local01, #12
30764     58 AD 1A F2 | 	cmp	local04, local06 wcz
30768     24 00 90 ED |  if_be	jmp	#LR__5163
3076c     14 A6 06 F1 | 	add	local01, #20
30770     53 AD 02 FB | 	rdlong	local04, local01
30774     08 A6 86 F1 | 	sub	local01, #8
30778     53 AD 62 FC | 	wrlong	local04, local01
3077c     04 A6 06 F1 | 	add	local01, #4
30780     53 AD C2 FA | 	rdbyte	local04, local01
30784     40 AC 46 F5 | 	or	local04, #64
30788     53 AD 42 FC | 	wrbyte	local04, local01
3078c     10 A6 86 F1 | 	sub	local01, #16
30790                 | LR__5163
30790     14 A6 06 F1 | 	add	local01, #20
30794     53 AD 02 FB | 	rdlong	local04, local01
30798     14 A6 86 F1 | 	sub	local01, #20
3079c     FF AD CE F7 | 	test	local04, #511 wz
307a0     1C A6 06 51 |  if_ne	add	local01, #28
307a4     53 AF 02 5B |  if_ne	rdlong	local05, local01
307a8     1C A6 86 51 |  if_ne	sub	local01, #28
307ac     57 B5 0A 52 |  if_ne	cmp	local08, local05 wz
307b0     B0 00 90 AD |  if_e	jmp	#LR__5165
307b4     10 A6 06 F1 | 	add	local01, #16
307b8     53 AD C2 FA | 	rdbyte	local04, local01
307bc     10 A6 86 F1 | 	sub	local01, #16
307c0     80 AC CE F7 | 	test	local04, #128 wz
307c4     58 00 90 AD |  if_e	jmp	#LR__5164
307c8     10 CE 05 F1 | 	add	fp, #16
307cc     E7 B6 02 FB | 	rdlong	local09, fp
307d0     10 CE 85 F1 | 	sub	fp, #16
307d4     01 B6 06 F1 | 	add	local09, #1
307d8     5B 93 C2 FA | 	rdbyte	arg01, local09
307dc     28 A6 06 F1 | 	add	local01, #40
307e0     53 95 02 F6 | 	mov	arg02, local01
307e4     0C A6 86 F1 | 	sub	local01, #12
307e8     53 97 02 FB | 	rdlong	arg03, local01
307ec     1C A6 86 F1 | 	sub	local01, #28
307f0     01 98 06 F6 | 	mov	arg04, #1
307f4     68 BC BF FD | 	call	#_fatfs_cc_disk_write
307f8     00 7A 0E F2 | 	cmp	result1, #0 wz
307fc     11 A6 06 51 |  if_ne	add	local01, #17
30800     53 03 48 5C |  if_ne	wrbyte	#1, local01
30804     01 7A 06 56 |  if_ne	mov	result1, #1
30808     5C 00 90 5D |  if_ne	jmp	#LR__5166
3080c     10 A6 06 F1 | 	add	local01, #16
30810     53 AD C2 FA | 	rdbyte	local04, local01
30814     7F AC 06 F5 | 	and	local04, #127
30818     53 AD 42 FC | 	wrbyte	local04, local01
3081c     10 A6 86 F1 | 	sub	local01, #16
30820                 | LR__5164
30820     10 CE 05 F1 | 	add	fp, #16
30824     E7 B6 02 FB | 	rdlong	local09, fp
30828     10 CE 85 F1 | 	sub	fp, #16
3082c     01 B6 06 F1 | 	add	local09, #1
30830     5B 93 C2 FA | 	rdbyte	arg01, local09
30834     53 95 02 F6 | 	mov	arg02, local01
30838     28 94 06 F1 | 	add	arg02, #40
3083c     5A 97 02 F6 | 	mov	arg03, local08
30840     01 98 06 F6 | 	mov	arg04, #1
30844     DC BA BF FD | 	call	#_fatfs_cc_disk_read
30848     00 7A 0E F2 | 	cmp	result1, #0 wz
3084c     11 A6 06 51 |  if_ne	add	local01, #17
30850     53 03 48 5C |  if_ne	wrbyte	#1, local01
30854     01 7A 06 56 |  if_ne	mov	result1, #1
30858     0C 00 90 5D |  if_ne	jmp	#LR__5166
3085c     1C A6 06 F1 | 	add	local01, #28
30860     53 B5 62 FC | 	wrlong	local08, local01
30864                 | LR__5165
30864                 | ' 
30864                 | ' 			fp->sect = nsect;
30864                 | ' 		}
30864                 | ' 	}
30864                 | ' 
30864                 | ' 	return res ;
30864     55 7B 02 F6 | 	mov	result1, local03
30868                 | LR__5166
30868     E7 F0 03 F6 | 	mov	ptra, fp
3086c     F2 00 A0 FD | 	call	#popregs_
30870                 | _fatfs_cc_f_lseek_ret
30870     2D 00 64 FD | 	ret
30874                 | 
30874                 | _fatfs_cc_f_opendir
30874     02 CA 05 F6 | 	mov	COUNT_, #2
30878     E8 00 A0 FD | 	call	#pushregs_
3087c     14 F0 07 F1 | 	add	ptra, #20
30880     49 A7 0A F6 | 	mov	local01, arg01 wz
30884     08 CE 05 F1 | 	add	fp, #8
30888     E7 94 62 FC | 	wrlong	arg02, fp
3088c     08 CE 85 F1 | 	sub	fp, #8
30890     09 7A 06 A6 |  if_e	mov	result1, #9
30894     EC 00 90 AD |  if_e	jmp	#LR__5176
30898     08 CE 05 F1 | 	add	fp, #8
3089c     E7 92 02 F6 | 	mov	arg01, fp
308a0     08 CE 05 F1 | 	add	fp, #8
308a4     E7 94 02 F6 | 	mov	arg02, fp
308a8     10 CE 85 F1 | 	sub	fp, #16
308ac     00 96 06 F6 | 	mov	arg03, #0
308b0     B4 E7 BF FD | 	call	#_fatfs_cc_mount_volume
308b4     3D A9 0A F6 | 	mov	local02, result1 wz
308b8     BC 00 90 5D |  if_ne	jmp	#LR__5175
308bc     10 CE 05 F1 | 	add	fp, #16
308c0     E7 A8 02 FB | 	rdlong	local02, fp
308c4     53 A9 62 FC | 	wrlong	local02, local01
308c8     08 CE 85 F1 | 	sub	fp, #8
308cc     E7 94 02 FB | 	rdlong	arg02, fp
308d0     08 CE 85 F1 | 	sub	fp, #8
308d4     53 93 02 F6 | 	mov	arg01, local01
308d8     F0 E2 BF FD | 	call	#_fatfs_cc_follow_path
308dc     3D A9 0A F6 | 	mov	local02, result1 wz
308e0     8C 00 90 5D |  if_ne	jmp	#LR__5174
308e4     2B A6 06 F1 | 	add	local01, #43
308e8     53 97 C2 FA | 	rdbyte	arg03, local01
308ec     2B A6 86 F1 | 	sub	local01, #43
308f0     80 96 CE F7 | 	test	arg03, #128 wz
308f4     40 00 90 5D |  if_ne	jmp	#LR__5172
308f8     06 A6 06 F1 | 	add	local01, #6
308fc     53 97 C2 FA | 	rdbyte	arg03, local01
30900     06 A6 86 F1 | 	sub	local01, #6
30904     10 96 CE F7 | 	test	arg03, #16 wz
30908     28 00 90 AD |  if_e	jmp	#LR__5170
3090c     10 CE 05 F1 | 	add	fp, #16
30910     E7 92 02 FB | 	rdlong	arg01, fp
30914     10 CE 85 F1 | 	sub	fp, #16
30918     1C A6 06 F1 | 	add	local01, #28
3091c     53 95 02 FB | 	rdlong	arg02, local01
30920     C0 CD BF FD | 	call	#_fatfs_cc_ld_clust
30924     14 A6 86 F1 | 	sub	local01, #20
30928     53 7B 62 FC | 	wrlong	result1, local01
3092c     08 A6 86 F1 | 	sub	local01, #8
30930     04 00 90 FD | 	jmp	#LR__5171
30934                 | LR__5170
30934     05 A8 06 F6 | 	mov	local02, #5
30938                 | LR__5171
30938                 | LR__5172
30938     00 A8 0E F2 | 	cmp	local02, #0 wz
3093c     30 00 90 5D |  if_ne	jmp	#LR__5173
30940     10 CE 05 F1 | 	add	fp, #16
30944     E7 A8 02 FB | 	rdlong	local02, fp
30948     10 CE 85 F1 | 	sub	fp, #16
3094c     06 A8 06 F1 | 	add	local02, #6
30950     54 A9 E2 FA | 	rdword	local02, local02
30954     04 A6 06 F1 | 	add	local01, #4
30958     53 A9 52 FC | 	wrword	local02, local01
3095c     04 A6 86 F1 | 	sub	local01, #4
30960     53 93 02 F6 | 	mov	arg01, local01
30964     00 94 06 F6 | 	mov	arg02, #0
30968     A4 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
3096c     3D A9 02 F6 | 	mov	local02, result1
30970                 | LR__5173
30970                 | LR__5174
30970     04 A8 0E F2 | 	cmp	local02, #4 wz
30974     05 A8 06 A6 |  if_e	mov	local02, #5
30978                 | LR__5175
30978     00 A8 0E F2 | 	cmp	local02, #0 wz
3097c     53 01 68 5C |  if_ne	wrlong	#0, local01
30980                 | ' 
30980                 | ' 	return res ;
30980     54 7B 02 F6 | 	mov	result1, local02
30984                 | LR__5176
30984     E7 F0 03 F6 | 	mov	ptra, fp
30988     F2 00 A0 FD | 	call	#popregs_
3098c                 | _fatfs_cc_f_opendir_ret
3098c     2D 00 64 FD | 	ret
30990                 | 
30990                 | _fatfs_cc_f_closedir
30990     01 CA 05 F6 | 	mov	COUNT_, #1
30994     E8 00 A0 FD | 	call	#pushregs_
30998     10 F0 07 F1 | 	add	ptra, #16
3099c     49 A7 02 F6 | 	mov	local01, arg01
309a0     E7 94 02 F6 | 	mov	arg02, fp
309a4     0C 94 06 F1 | 	add	arg02, #12
309a8     53 93 02 F6 | 	mov	arg01, local01
309ac     E8 EB BF FD | 	call	#_fatfs_cc_validate
309b0     00 7A 4E F2 | 	cmps	result1, #0 wz
309b4     53 01 68 AC |  if_e	wrlong	#0, local01
309b8                 | ' 
309b8                 | ' 
309b8                 | ' 
309b8                 | ' 
309b8                 | ' 		dp->obj.fs = 0;
309b8                 | ' #line 4633 "ff.c"
309b8                 | ' 	}
309b8                 | ' 	return res;
309b8     E7 F0 03 F6 | 	mov	ptra, fp
309bc     F2 00 A0 FD | 	call	#popregs_
309c0                 | _fatfs_cc_f_closedir_ret
309c0     2D 00 64 FD | 	ret
309c4                 | 
309c4                 | _fatfs_cc_f_readdir
309c4     03 CA 05 F6 | 	mov	COUNT_, #3
309c8     E8 00 A0 FD | 	call	#pushregs_
309cc     14 F0 07 F1 | 	add	ptra, #20
309d0     49 A7 02 F6 | 	mov	local01, arg01
309d4     4A A9 02 F6 | 	mov	local02, arg02
309d8     E7 94 02 F6 | 	mov	arg02, fp
309dc     10 94 06 F1 | 	add	arg02, #16
309e0     53 93 02 F6 | 	mov	arg01, local01
309e4     B0 EB BF FD | 	call	#_fatfs_cc_validate
309e8     3D AB 0A F6 | 	mov	local03, result1 wz
309ec     60 00 90 5D |  if_ne	jmp	#LR__5183
309f0     00 A8 0E F2 | 	cmp	local02, #0 wz
309f4     14 00 90 5D |  if_ne	jmp	#LR__5180
309f8     53 93 02 F6 | 	mov	arg01, local01
309fc     00 94 06 F6 | 	mov	arg02, #0
30a00     0C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30a04     3D AB 02 F6 | 	mov	local03, result1
30a08     44 00 90 FD | 	jmp	#LR__5182
30a0c                 | LR__5180
30a0c     53 93 02 F6 | 	mov	arg01, local01
30a10     00 94 06 F6 | 	mov	arg02, #0
30a14     98 D1 BF FD | 	call	#_fatfs_cc_dir_read
30a18     3D AB 02 F6 | 	mov	local03, result1
30a1c     04 AA 0E F2 | 	cmp	local03, #4 wz
30a20     00 AA 06 A6 |  if_e	mov	local03, #0
30a24     00 AA 0E F2 | 	cmp	local03, #0 wz
30a28     24 00 90 5D |  if_ne	jmp	#LR__5181
30a2c     53 93 02 F6 | 	mov	arg01, local01
30a30     54 95 02 F6 | 	mov	arg02, local02
30a34     E4 D8 BF FD | 	call	#_fatfs_cc_get_fileinfo
30a38     53 93 02 F6 | 	mov	arg01, local01
30a3c     00 94 06 F6 | 	mov	arg02, #0
30a40     34 CA BF FD | 	call	#_fatfs_cc_dir_next
30a44     3D AB 02 F6 | 	mov	local03, result1
30a48     04 AA 0E F2 | 	cmp	local03, #4 wz
30a4c     00 AA 06 A6 |  if_e	mov	local03, #0
30a50                 | LR__5181
30a50                 | LR__5182
30a50                 | LR__5183
30a50                 | ' 			}
30a50                 | ' 			;
30a50                 | ' 		}
30a50                 | ' 	}
30a50                 | ' 	return res ;
30a50     55 7B 02 F6 | 	mov	result1, local03
30a54     E7 F0 03 F6 | 	mov	ptra, fp
30a58     F2 00 A0 FD | 	call	#popregs_
30a5c                 | _fatfs_cc_f_readdir_ret
30a5c     2D 00 64 FD | 	ret
30a60                 | 
30a60                 | _fatfs_cc_f_stat
30a60     02 CA 05 F6 | 	mov	COUNT_, #2
30a64     E8 00 A0 FD | 	call	#pushregs_
30a68     40 F0 07 F1 | 	add	ptra, #64
30a6c     04 CE 05 F1 | 	add	fp, #4
30a70     E7 92 62 FC | 	wrlong	arg01, fp
30a74     4A A7 02 F6 | 	mov	local01, arg02
30a78     E7 92 02 F6 | 	mov	arg01, fp
30a7c     0C CE 05 F1 | 	add	fp, #12
30a80     E7 94 02 F6 | 	mov	arg02, fp
30a84     10 CE 85 F1 | 	sub	fp, #16
30a88     00 96 06 F6 | 	mov	arg03, #0
30a8c     D8 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30a90     3D A9 0A F6 | 	mov	local02, result1 wz
30a94     4C 00 90 5D |  if_ne	jmp	#LR__5192
30a98     10 CE 05 F1 | 	add	fp, #16
30a9c     E7 92 02 F6 | 	mov	arg01, fp
30aa0     0C CE 85 F1 | 	sub	fp, #12
30aa4     E7 94 02 FB | 	rdlong	arg02, fp
30aa8     04 CE 85 F1 | 	sub	fp, #4
30aac     1C E1 BF FD | 	call	#_fatfs_cc_follow_path
30ab0     3D A9 0A F6 | 	mov	local02, result1 wz
30ab4     2C 00 90 5D |  if_ne	jmp	#LR__5191
30ab8     3B CE 05 F1 | 	add	fp, #59
30abc     E7 96 C2 FA | 	rdbyte	arg03, fp
30ac0     3B CE 85 F1 | 	sub	fp, #59
30ac4     80 96 CE F7 | 	test	arg03, #128 wz
30ac8     06 A8 06 56 |  if_ne	mov	local02, #6
30acc     14 00 90 5D |  if_ne	jmp	#LR__5190
30ad0     00 A6 0E F2 | 	cmp	local01, #0 wz
30ad4     E7 92 02 56 |  if_ne	mov	arg01, fp
30ad8     10 92 06 51 |  if_ne	add	arg01, #16
30adc     53 95 02 56 |  if_ne	mov	arg02, local01
30ae0     38 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
30ae4                 | LR__5190
30ae4                 | LR__5191
30ae4                 | LR__5192
30ae4                 | ' 			}
30ae4                 | ' 		}
30ae4                 | ' 		;
30ae4                 | ' 	}
30ae4                 | ' 
30ae4                 | ' 	return res ;
30ae4     54 7B 02 F6 | 	mov	result1, local02
30ae8     E7 F0 03 F6 | 	mov	ptra, fp
30aec     F2 00 A0 FD | 	call	#popregs_
30af0                 | _fatfs_cc_f_stat_ret
30af0     2D 00 64 FD | 	ret
30af4                 | 
30af4                 | _fatfs_cc_f_unlink
30af4     02 CA 05 F6 | 	mov	COUNT_, #2
30af8     E8 00 A0 FD | 	call	#pushregs_
30afc     74 F0 07 F1 | 	add	ptra, #116
30b00     04 CE 05 F1 | 	add	fp, #4
30b04     E7 92 62 FC | 	wrlong	arg01, fp
30b08     00 A6 06 F6 | 	mov	local01, #0
30b0c     E7 92 02 F6 | 	mov	arg01, fp
30b10     6C CE 05 F1 | 	add	fp, #108
30b14     E7 94 02 F6 | 	mov	arg02, fp
30b18     70 CE 85 F1 | 	sub	fp, #112
30b1c     02 96 06 F6 | 	mov	arg03, #2
30b20     44 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30b24     3D A9 0A F6 | 	mov	local02, result1 wz
30b28     3C 01 90 5D |  if_ne	jmp	#LR__5208
30b2c     70 CE 05 F1 | 	add	fp, #112
30b30     E7 A8 02 FB | 	rdlong	local02, fp
30b34     64 CE 85 F1 | 	sub	fp, #100
30b38     E7 A8 62 FC | 	wrlong	local02, fp
30b3c     E7 92 02 F6 | 	mov	arg01, fp
30b40     08 CE 85 F1 | 	sub	fp, #8
30b44     E7 94 02 FB | 	rdlong	arg02, fp
30b48     04 CE 85 F1 | 	sub	fp, #4
30b4c     7C E0 BF FD | 	call	#_fatfs_cc_follow_path
30b50     3D A9 0A F6 | 	mov	local02, result1 wz
30b54     10 01 90 5D |  if_ne	jmp	#LR__5207
30b58     37 CE 05 F1 | 	add	fp, #55
30b5c     E7 7A C2 FA | 	rdbyte	result1, fp
30b60     37 CE 85 F1 | 	sub	fp, #55
30b64     80 7A CE F7 | 	test	result1, #128 wz
30b68     06 A8 06 56 |  if_ne	mov	local02, #6
30b6c     14 00 90 5D |  if_ne	jmp	#LR__5200
30b70     12 CE 05 F1 | 	add	fp, #18
30b74     E7 7A C2 FA | 	rdbyte	result1, fp
30b78     12 CE 85 F1 | 	sub	fp, #18
30b7c     01 7A CE F7 | 	test	result1, #1 wz
30b80     07 A8 06 56 |  if_ne	mov	local02, #7
30b84                 | LR__5200
30b84     00 A8 0E F2 | 	cmp	local02, #0 wz
30b88     84 00 90 5D |  if_ne	jmp	#LR__5203
30b8c     70 CE 05 F1 | 	add	fp, #112
30b90     E7 92 02 FB | 	rdlong	arg01, fp
30b94     48 CE 85 F1 | 	sub	fp, #72
30b98     E7 94 02 FB | 	rdlong	arg02, fp
30b9c     28 CE 85 F1 | 	sub	fp, #40
30ba0     40 CB BF FD | 	call	#_fatfs_cc_ld_clust
30ba4     3D A7 02 F6 | 	mov	local01, result1
30ba8     12 CE 05 F1 | 	add	fp, #18
30bac     E7 7A C2 FA | 	rdbyte	result1, fp
30bb0     12 CE 85 F1 | 	sub	fp, #18
30bb4     10 7A CE F7 | 	test	result1, #16 wz
30bb8     54 00 90 AD |  if_e	jmp	#LR__5202
30bbc     70 CE 05 F1 | 	add	fp, #112
30bc0     E7 A8 02 FB | 	rdlong	local02, fp
30bc4     34 CE 85 F1 | 	sub	fp, #52
30bc8     E7 A8 62 FC | 	wrlong	local02, fp
30bcc     08 CE 05 F1 | 	add	fp, #8
30bd0     E7 A6 62 FC | 	wrlong	local01, fp
30bd4     08 CE 85 F1 | 	sub	fp, #8
30bd8     E7 92 02 F6 | 	mov	arg01, fp
30bdc     3C CE 85 F1 | 	sub	fp, #60
30be0     00 94 06 F6 | 	mov	arg02, #0
30be4     28 C7 BF FD | 	call	#_fatfs_cc_dir_sdi
30be8     3D A9 0A F6 | 	mov	local02, result1 wz
30bec     20 00 90 5D |  if_ne	jmp	#LR__5201
30bf0     E7 92 02 F6 | 	mov	arg01, fp
30bf4     3C 92 06 F1 | 	add	arg01, #60
30bf8     00 94 06 F6 | 	mov	arg02, #0
30bfc     B0 CF BF FD | 	call	#_fatfs_cc_dir_read
30c00     3D A9 0A F6 | 	mov	local02, result1 wz
30c04     07 A8 06 A6 |  if_e	mov	local02, #7
30c08     04 A8 0E F2 | 	cmp	local02, #4 wz
30c0c     00 A8 06 A6 |  if_e	mov	local02, #0
30c10                 | LR__5201
30c10                 | LR__5202
30c10                 | LR__5203
30c10     00 A8 0E F2 | 	cmp	local02, #0 wz
30c14     50 00 90 5D |  if_ne	jmp	#LR__5206
30c18     E7 92 02 F6 | 	mov	arg01, fp
30c1c     0C 92 06 F1 | 	add	arg01, #12
30c20     30 D6 BF FD | 	call	#_fatfs_cc_dir_remove
30c24     3D A9 0A F6 | 	mov	local02, result1 wz
30c28     20 00 90 5D |  if_ne	jmp	#LR__5204
30c2c     00 A6 0E F2 | 	cmp	local01, #0 wz
30c30     18 00 90 AD |  if_e	jmp	#LR__5204
30c34     E7 92 02 F6 | 	mov	arg01, fp
30c38     0C 92 06 F1 | 	add	arg01, #12
30c3c     53 95 02 F6 | 	mov	arg02, local01
30c40     00 96 06 F6 | 	mov	arg03, #0
30c44     D0 C2 BF FD | 	call	#_fatfs_cc_remove_chain
30c48     3D A9 02 F6 | 	mov	local02, result1
30c4c                 | LR__5204
30c4c     00 A8 0E F2 | 	cmp	local02, #0 wz
30c50     14 00 90 5D |  if_ne	jmp	#LR__5205
30c54     70 CE 05 F1 | 	add	fp, #112
30c58     E7 92 02 FB | 	rdlong	arg01, fp
30c5c     70 CE 85 F1 | 	sub	fp, #112
30c60     C0 BD BF FD | 	call	#_fatfs_cc_sync_fs
30c64     3D A9 02 F6 | 	mov	local02, result1
30c68                 | LR__5205
30c68                 | LR__5206
30c68                 | LR__5207
30c68                 | LR__5208
30c68                 | ' 			}
30c68                 | ' 		}
30c68                 | ' 		;
30c68                 | ' 	}
30c68                 | ' 
30c68                 | ' 	return res ;
30c68     54 7B 02 F6 | 	mov	result1, local02
30c6c     E7 F0 03 F6 | 	mov	ptra, fp
30c70     F2 00 A0 FD | 	call	#popregs_
30c74                 | _fatfs_cc_f_unlink_ret
30c74     2D 00 64 FD | 	ret
30c78                 | 
30c78                 | _fatfs_cc_f_mkdir
30c78     03 CA 05 F6 | 	mov	COUNT_, #3
30c7c     E8 00 A0 FD | 	call	#pushregs_
30c80     5C F0 07 F1 | 	add	ptra, #92
30c84     04 CE 05 F1 | 	add	fp, #4
30c88     E7 92 62 FC | 	wrlong	arg01, fp
30c8c     E7 92 02 F6 | 	mov	arg01, fp
30c90     48 CE 05 F1 | 	add	fp, #72
30c94     E7 94 02 F6 | 	mov	arg02, fp
30c98     4C CE 85 F1 | 	sub	fp, #76
30c9c     02 96 06 F6 | 	mov	arg03, #2
30ca0     C4 E3 BF FD | 	call	#_fatfs_cc_mount_volume
30ca4     3D A7 0A F6 | 	mov	local01, result1 wz
30ca8     FC 01 90 5D |  if_ne	jmp	#LR__5215
30cac     4C CE 05 F1 | 	add	fp, #76
30cb0     E7 A6 02 FB | 	rdlong	local01, fp
30cb4     40 CE 85 F1 | 	sub	fp, #64
30cb8     E7 A6 62 FC | 	wrlong	local01, fp
30cbc     E7 92 02 F6 | 	mov	arg01, fp
30cc0     08 CE 85 F1 | 	sub	fp, #8
30cc4     E7 94 02 FB | 	rdlong	arg02, fp
30cc8     04 CE 85 F1 | 	sub	fp, #4
30ccc     FC DE BF FD | 	call	#_fatfs_cc_follow_path
30cd0     3D A7 0A F6 | 	mov	local01, result1 wz
30cd4     08 A6 06 A6 |  if_e	mov	local01, #8
30cd8     04 A6 0E F2 | 	cmp	local01, #4 wz
30cdc     C8 01 90 5D |  if_ne	jmp	#LR__5214
30ce0     4C CE 05 F1 | 	add	fp, #76
30ce4     E7 A6 02 FB | 	rdlong	local01, fp
30ce8     10 CE 85 F1 | 	sub	fp, #16
30cec     E7 A6 62 FC | 	wrlong	local01, fp
30cf0     E7 92 02 F6 | 	mov	arg01, fp
30cf4     3C CE 85 F1 | 	sub	fp, #60
30cf8     00 94 06 F6 | 	mov	arg02, #0
30cfc     2C C3 BF FD | 	call	#_fatfs_cc_create_chain
30d00     3D A9 0A F6 | 	mov	local02, result1 wz
30d04     00 A6 06 F6 | 	mov	local01, #0
30d08     07 A6 06 A6 |  if_e	mov	local01, #7
30d0c     01 A8 0E F2 | 	cmp	local02, #1 wz
30d10     02 A6 06 A6 |  if_e	mov	local01, #2
30d14     FF FF 7F FF 
30d18     FF A9 0E F2 | 	cmp	local02, ##-1 wz
30d1c     01 A6 06 A6 |  if_e	mov	local01, #1
30d20     8C 06 B0 FD | 	call	#_fatfs_cc__get_fattime
30d24     3D AB 02 F6 | 	mov	local03, result1
30d28     00 A6 0E F2 | 	cmp	local01, #0 wz
30d2c     EC 00 90 5D |  if_ne	jmp	#LR__5211
30d30     4C CE 05 F1 | 	add	fp, #76
30d34     E7 92 02 FB | 	rdlong	arg01, fp
30d38     4C CE 85 F1 | 	sub	fp, #76
30d3c     54 95 02 F6 | 	mov	arg02, local02
30d40     0C C5 BF FD | 	call	#_fatfs_cc_dir_clear
30d44     3D A7 0A F6 | 	mov	local01, result1 wz
30d48     D0 00 90 5D |  if_ne	jmp	#LR__5210
30d4c     4C CE 05 F1 | 	add	fp, #76
30d50     E7 92 02 FB | 	rdlong	arg01, fp
30d54     4C CE 85 F1 | 	sub	fp, #76
30d58     34 92 06 F1 | 	add	arg01, #52
30d5c     20 94 06 F6 | 	mov	arg02, #32
30d60     0B 96 06 F6 | 	mov	arg03, #11
30d64     D8 00 A0 FD | 	call	#\builtin_bytefill_
30d68     4C CE 05 F1 | 	add	fp, #76
30d6c     E7 A6 02 FB | 	rdlong	local01, fp
30d70     34 A6 06 F1 | 	add	local01, #52
30d74     53 5D 48 FC | 	wrbyte	#46, local01
30d78     E7 A6 02 FB | 	rdlong	local01, fp
30d7c     3F A6 06 F1 | 	add	local01, #63
30d80     53 21 48 FC | 	wrbyte	#16, local01
30d84     E7 92 02 FB | 	rdlong	arg01, fp
30d88     4A 92 06 F1 | 	add	arg01, #74
30d8c     49 AB 62 FC | 	wrlong	local03, arg01
30d90     E7 94 02 FB | 	rdlong	arg02, fp
30d94     4A 93 02 F6 | 	mov	arg01, arg02
30d98     4C CE 85 F1 | 	sub	fp, #76
30d9c     34 94 06 F1 | 	add	arg02, #52
30da0     54 97 02 F6 | 	mov	arg03, local02
30da4     70 C9 BF FD | 	call	#_fatfs_cc_st_clust
30da8     4C CE 05 F1 | 	add	fp, #76
30dac     E7 94 02 FB | 	rdlong	arg02, fp
30db0     4A 93 02 F6 | 	mov	arg01, arg02
30db4     54 92 06 F1 | 	add	arg01, #84
30db8     4C CE 85 F1 | 	sub	fp, #76
30dbc     34 94 06 F1 | 	add	arg02, #52
30dc0     20 96 06 F6 | 	mov	arg03, #32
30dc4     E4 3A BF FD | 	call	#__system____builtin_memmove
30dc8     4C CE 05 F1 | 	add	fp, #76
30dcc     E7 A6 02 FB | 	rdlong	local01, fp
30dd0     55 A6 06 F1 | 	add	local01, #85
30dd4     53 5D 48 FC | 	wrbyte	#46, local01
30dd8     38 CE 85 F1 | 	sub	fp, #56
30ddc     E7 96 02 FB | 	rdlong	arg03, fp
30de0     38 CE 05 F1 | 	add	fp, #56
30de4     E7 94 02 FB | 	rdlong	arg02, fp
30de8     4A 93 02 F6 | 	mov	arg01, arg02
30dec     4C CE 85 F1 | 	sub	fp, #76
30df0     54 94 06 F1 | 	add	arg02, #84
30df4     20 C9 BF FD | 	call	#_fatfs_cc_st_clust
30df8     4C CE 05 F1 | 	add	fp, #76
30dfc     E7 A6 02 FB | 	rdlong	local01, fp
30e00     4C CE 85 F1 | 	sub	fp, #76
30e04     03 A6 06 F1 | 	add	local01, #3
30e08     53 03 48 FC | 	wrbyte	#1, local01
30e0c     E7 92 02 F6 | 	mov	arg01, fp
30e10     0C 92 06 F1 | 	add	arg01, #12
30e14     D8 D1 BF FD | 	call	#_fatfs_cc_dir_register
30e18     3D A7 02 F6 | 	mov	local01, result1
30e1c                 | LR__5210
30e1c                 | LR__5211
30e1c     00 A6 0E F2 | 	cmp	local01, #0 wz
30e20     70 00 90 5D |  if_ne	jmp	#LR__5212
30e24     28 CE 05 F1 | 	add	fp, #40
30e28     E7 92 02 FB | 	rdlong	arg01, fp
30e2c     16 92 06 F1 | 	add	arg01, #22
30e30     49 AB 62 FC | 	wrlong	local03, arg01
30e34     24 CE 05 F1 | 	add	fp, #36
30e38     E7 92 02 FB | 	rdlong	arg01, fp
30e3c     24 CE 85 F1 | 	sub	fp, #36
30e40     E7 94 02 FB | 	rdlong	arg02, fp
30e44     28 CE 85 F1 | 	sub	fp, #40
30e48     54 97 02 F6 | 	mov	arg03, local02
30e4c     C8 C8 BF FD | 	call	#_fatfs_cc_st_clust
30e50     28 CE 05 F1 | 	add	fp, #40
30e54     E7 AA 02 FB | 	rdlong	local03, fp
30e58     0B AA 06 F1 | 	add	local03, #11
30e5c     55 21 48 FC | 	wrbyte	#16, local03
30e60     24 CE 05 F1 | 	add	fp, #36
30e64     E7 AA 02 FB | 	rdlong	local03, fp
30e68     4C CE 85 F1 | 	sub	fp, #76
30e6c     03 AA 06 F1 | 	add	local03, #3
30e70     55 03 48 FC | 	wrbyte	#1, local03
30e74     00 A6 0E F2 | 	cmp	local01, #0 wz
30e78     2C 00 90 5D |  if_ne	jmp	#LR__5213
30e7c     4C CE 05 F1 | 	add	fp, #76
30e80     E7 92 02 FB | 	rdlong	arg01, fp
30e84     4C CE 85 F1 | 	sub	fp, #76
30e88     98 BB BF FD | 	call	#_fatfs_cc_sync_fs
30e8c     3D A7 02 F6 | 	mov	local01, result1
30e90     14 00 90 FD | 	jmp	#LR__5213
30e94                 | LR__5212
30e94     E7 92 02 F6 | 	mov	arg01, fp
30e98     3C 92 06 F1 | 	add	arg01, #60
30e9c     54 95 02 F6 | 	mov	arg02, local02
30ea0     00 96 06 F6 | 	mov	arg03, #0
30ea4     70 C0 BF FD | 	call	#_fatfs_cc_remove_chain
30ea8                 | LR__5213
30ea8                 | LR__5214
30ea8                 | LR__5215
30ea8                 | ' 				remove_chain(&sobj, dcl, 0);
30ea8                 | ' 			}
30ea8                 | ' 		}
30ea8                 | ' 		;
30ea8                 | ' 	}
30ea8                 | ' 
30ea8                 | ' 	return res ;
30ea8     53 7B 02 F6 | 	mov	result1, local01
30eac     E7 F0 03 F6 | 	mov	ptra, fp
30eb0     F2 00 A0 FD | 	call	#popregs_
30eb4                 | _fatfs_cc_f_mkdir_ret
30eb4     2D 00 64 FD | 	ret
30eb8                 | 
30eb8                 | _fatfs_cc_f_rename
30eb8     03 CA 05 F6 | 	mov	COUNT_, #3
30ebc     E8 00 A0 FD | 	call	#pushregs_
30ec0     9C F0 07 F1 | 	add	ptra, #156
30ec4     04 CE 05 F1 | 	add	fp, #4
30ec8     E7 92 62 FC | 	wrlong	arg01, fp
30ecc     04 CE 05 F1 | 	add	fp, #4
30ed0     E7 94 62 FC | 	wrlong	arg02, fp
30ed4     E7 92 02 F6 | 	mov	arg01, fp
30ed8     08 CE 85 F1 | 	sub	fp, #8
30edc     4C DE BF FD | 	call	#_fatfs_cc_get_ldnumber
30ee0     04 CE 05 F1 | 	add	fp, #4
30ee4     E7 92 02 F6 | 	mov	arg01, fp
30ee8     6C CE 05 F1 | 	add	fp, #108
30eec     E7 94 02 F6 | 	mov	arg02, fp
30ef0     70 CE 85 F1 | 	sub	fp, #112
30ef4     02 96 06 F6 | 	mov	arg03, #2
30ef8     6C E1 BF FD | 	call	#_fatfs_cc_mount_volume
30efc     3D A7 0A F6 | 	mov	local01, result1 wz
30f00     68 02 90 5D |  if_ne	jmp	#LR__5232
30f04     70 CE 05 F1 | 	add	fp, #112
30f08     E7 A8 02 FB | 	rdlong	local02, fp
30f0c     60 CE 85 F1 | 	sub	fp, #96
30f10     E7 A8 62 FC | 	wrlong	local02, fp
30f14     E7 92 02 F6 | 	mov	arg01, fp
30f18     0C CE 85 F1 | 	sub	fp, #12
30f1c     E7 94 02 FB | 	rdlong	arg02, fp
30f20     04 CE 85 F1 | 	sub	fp, #4
30f24     A4 DC BF FD | 	call	#_fatfs_cc_follow_path
30f28     3D A7 0A F6 | 	mov	local01, result1 wz
30f2c     14 00 90 5D |  if_ne	jmp	#LR__5220
30f30     3B CE 05 F1 | 	add	fp, #59
30f34     E7 A8 C2 FA | 	rdbyte	local02, fp
30f38     3B CE 85 F1 | 	sub	fp, #59
30f3c     A0 A8 CE F7 | 	test	local02, #160 wz
30f40     06 A6 06 56 |  if_ne	mov	local01, #6
30f44                 | LR__5220
30f44     00 A6 0E F2 | 	cmp	local01, #0 wz
30f48     20 02 90 5D |  if_ne	jmp	#LR__5231
30f4c     74 CE 05 F1 | 	add	fp, #116
30f50     E7 92 02 F6 | 	mov	arg01, fp
30f54     48 CE 85 F1 | 	sub	fp, #72
30f58     E7 94 02 FB | 	rdlong	arg02, fp
30f5c     2C CE 85 F1 | 	sub	fp, #44
30f60     20 96 06 F6 | 	mov	arg03, #32
30f64     44 39 BF FD | 	call	#__system____builtin_memmove
30f68     40 CE 05 F1 | 	add	fp, #64
30f6c     E7 92 02 F6 | 	mov	arg01, fp
30f70     30 CE 85 F1 | 	sub	fp, #48
30f74     E7 94 02 F6 | 	mov	arg02, fp
30f78     10 CE 85 F1 | 	sub	fp, #16
30f7c     30 96 06 F6 | 	mov	arg03, #48
30f80     28 39 BF FD | 	call	#__system____builtin_memmove
30f84     40 CE 05 F1 | 	add	fp, #64
30f88     E7 92 02 F6 | 	mov	arg01, fp
30f8c     38 CE 85 F1 | 	sub	fp, #56
30f90     E7 94 02 FB | 	rdlong	arg02, fp
30f94     08 CE 85 F1 | 	sub	fp, #8
30f98     30 DC BF FD | 	call	#_fatfs_cc_follow_path
30f9c     3D A7 0A F6 | 	mov	local01, result1 wz
30fa0     44 00 90 5D |  if_ne	jmp	#LR__5223
30fa4     48 CE 05 F1 | 	add	fp, #72
30fa8     E7 A6 02 FB | 	rdlong	local01, fp
30fac     30 CE 85 F1 | 	sub	fp, #48
30fb0     E7 7A 02 FB | 	rdlong	result1, fp
30fb4     18 CE 85 F1 | 	sub	fp, #24
30fb8     3D A7 0A F2 | 	cmp	local01, result1 wz
30fbc     20 00 90 5D |  if_ne	jmp	#LR__5221
30fc0     50 CE 05 F1 | 	add	fp, #80
30fc4     E7 A6 02 FB | 	rdlong	local01, fp
30fc8     30 CE 85 F1 | 	sub	fp, #48
30fcc     E7 7A 02 FB | 	rdlong	result1, fp
30fd0     20 CE 85 F1 | 	sub	fp, #32
30fd4     3D A7 0A F2 | 	cmp	local01, result1 wz
30fd8     04 A8 06 A6 |  if_e	mov	local02, #4
30fdc     04 00 90 AD |  if_e	jmp	#LR__5222
30fe0                 | LR__5221
30fe0     08 A8 06 F6 | 	mov	local02, #8
30fe4                 | LR__5222
30fe4     54 A7 02 F6 | 	mov	local01, local02
30fe8                 | LR__5223
30fe8     04 A6 0E F2 | 	cmp	local01, #4 wz
30fec     4C 01 90 5D |  if_ne	jmp	#LR__5228
30ff0     E7 92 02 F6 | 	mov	arg01, fp
30ff4     40 92 06 F1 | 	add	arg01, #64
30ff8     F4 CF BF FD | 	call	#_fatfs_cc_dir_register
30ffc     3D A7 0A F6 | 	mov	local01, result1 wz
31000     38 01 90 5D |  if_ne	jmp	#LR__5227
31004     5C CE 05 F1 | 	add	fp, #92
31008     E7 AA 02 FB | 	rdlong	local03, fp
3100c     55 93 02 F6 | 	mov	arg01, local03
31010     0D 92 06 F1 | 	add	arg01, #13
31014     18 CE 05 F1 | 	add	fp, #24
31018     E7 94 02 F6 | 	mov	arg02, fp
3101c     74 CE 85 F1 | 	sub	fp, #116
31020     0D 94 06 F1 | 	add	arg02, #13
31024     13 96 06 F6 | 	mov	arg03, #19
31028     80 38 BF FD | 	call	#__system____builtin_memmove
3102c     7F CE 05 F1 | 	add	fp, #127
31030     E7 A8 C2 FA | 	rdbyte	local02, fp
31034     0B AA 06 F1 | 	add	local03, #11
31038     55 A9 42 FC | 	wrbyte	local02, local03
3103c     54 A9 E2 F8 | 	getbyte	local02, local02, #0
31040     0B AA 86 F1 | 	sub	local03, #11
31044     10 A8 CE F7 | 	test	local02, #16 wz
31048     0B AA 06 A1 |  if_e	add	local03, #11
3104c     55 A9 C2 AA |  if_e	rdbyte	local02, local03
31050     20 A8 46 A5 |  if_e	or	local02, #32
31054     55 A9 42 AC |  if_e	wrbyte	local02, local03
31058     0B AA 86 A1 |  if_e	sub	local03, #11
3105c     0F CE 85 F1 | 	sub	fp, #15
31060     E7 A8 02 FB | 	rdlong	local02, fp
31064     70 CE 85 F1 | 	sub	fp, #112
31068     03 A8 06 F1 | 	add	local02, #3
3106c     54 03 48 FC | 	wrbyte	#1, local02
31070     0B AA 06 F1 | 	add	local03, #11
31074     55 A9 C2 FA | 	rdbyte	local02, local03
31078     0B AA 86 F1 | 	sub	local03, #11
3107c     10 A8 CE F7 | 	test	local02, #16 wz
31080     B8 00 90 AD |  if_e	jmp	#LR__5226
31084     18 CE 05 F1 | 	add	fp, #24
31088     E7 A8 02 FB | 	rdlong	local02, fp
3108c     30 CE 05 F1 | 	add	fp, #48
31090     E7 96 02 FB | 	rdlong	arg03, fp
31094     48 CE 85 F1 | 	sub	fp, #72
31098     4B A9 0A F2 | 	cmp	local02, arg03 wz
3109c     9C 00 90 AD |  if_e	jmp	#LR__5226
310a0     70 CE 05 F1 | 	add	fp, #112
310a4     E7 92 02 FB | 	rdlong	arg01, fp
310a8     49 A9 02 F6 | 	mov	local02, arg01
310ac     70 CE 85 F1 | 	sub	fp, #112
310b0     55 95 02 F6 | 	mov	arg02, local03
310b4     2C C6 BF FD | 	call	#_fatfs_cc_ld_clust
310b8     3D 95 02 F6 | 	mov	arg02, result1
310bc     54 93 02 F6 | 	mov	arg01, local02
310c0     60 BA BF FD | 	call	#_fatfs_cc_clst2sect
310c4     3D AB 0A F6 | 	mov	local03, result1 wz
310c8     02 A6 06 A6 |  if_e	mov	local01, #2
310cc     6C 00 90 AD |  if_e	jmp	#LR__5225
310d0     70 CE 05 F1 | 	add	fp, #112
310d4     E7 92 02 FB | 	rdlong	arg01, fp
310d8     70 CE 85 F1 | 	sub	fp, #112
310dc     55 95 02 F6 | 	mov	arg02, local03
310e0     C8 B8 BF FD | 	call	#_fatfs_cc_move_window
310e4     3D A7 0A F6 | 	mov	local01, result1 wz
310e8     70 CE 05 F1 | 	add	fp, #112
310ec     E7 AA 02 FB | 	rdlong	local03, fp
310f0     70 CE 85 F1 | 	sub	fp, #112
310f4     54 AA 06 F1 | 	add	local03, #84
310f8     01 AA 06 A1 |  if_e	add	local03, #1
310fc     55 A9 C2 AA |  if_e	rdbyte	local02, local03
31100     01 AA 86 A1 |  if_e	sub	local03, #1
31104     2E A8 0E A2 |  if_e	cmp	local02, #46 wz
31108     30 00 90 5D |  if_ne	jmp	#LR__5224
3110c     70 CE 05 F1 | 	add	fp, #112
31110     E7 92 02 FB | 	rdlong	arg01, fp
31114     28 CE 85 F1 | 	sub	fp, #40
31118     E7 96 02 FB | 	rdlong	arg03, fp
3111c     48 CE 85 F1 | 	sub	fp, #72
31120     55 95 02 F6 | 	mov	arg02, local03
31124     F0 C5 BF FD | 	call	#_fatfs_cc_st_clust
31128     70 CE 05 F1 | 	add	fp, #112
3112c     E7 A8 02 FB | 	rdlong	local02, fp
31130     70 CE 85 F1 | 	sub	fp, #112
31134     03 A8 06 F1 | 	add	local02, #3
31138     54 03 48 FC | 	wrbyte	#1, local02
3113c                 | LR__5224
3113c                 | LR__5225
3113c                 | LR__5226
3113c                 | LR__5227
3113c                 | LR__5228
3113c     00 A6 0E F2 | 	cmp	local01, #0 wz
31140     28 00 90 5D |  if_ne	jmp	#LR__5230
31144     E7 92 02 F6 | 	mov	arg01, fp
31148     10 92 06 F1 | 	add	arg01, #16
3114c     04 D1 BF FD | 	call	#_fatfs_cc_dir_remove
31150     3D A7 0A F6 | 	mov	local01, result1 wz
31154     14 00 90 5D |  if_ne	jmp	#LR__5229
31158     70 CE 05 F1 | 	add	fp, #112
3115c     E7 92 02 FB | 	rdlong	arg01, fp
31160     70 CE 85 F1 | 	sub	fp, #112
31164     BC B8 BF FD | 	call	#_fatfs_cc_sync_fs
31168     3D A7 02 F6 | 	mov	local01, result1
3116c                 | LR__5229
3116c                 | LR__5230
3116c                 | LR__5231
3116c                 | LR__5232
3116c                 | ' 					res = sync_fs(fs);
3116c                 | ' 				}
3116c                 | ' 			}
3116c                 | ' 
3116c                 | ' 		}
3116c                 | ' 		;
3116c                 | ' 	}
3116c                 | ' 
3116c                 | ' 	return res ;
3116c     53 7B 02 F6 | 	mov	result1, local01
31170     E7 F0 03 F6 | 	mov	ptra, fp
31174     F2 00 A0 FD | 	call	#popregs_
31178                 | _fatfs_cc_f_rename_ret
31178     2D 00 64 FD | 	ret
3117c                 | 
3117c                 | _fatfs_cc___default_flush
3117c     07 CA 05 F6 | 	mov	COUNT_, #7
31180     E8 00 A0 FD | 	call	#pushregs_
31184     49 A7 02 F6 | 	mov	local01, arg01
31188     53 A9 02 FB | 	rdlong	local02, local01
3118c     54 AB 02 FB | 	rdlong	local03, local02
31190     08 A6 06 F1 | 	add	local01, #8
31194     53 7D 02 FB | 	rdlong	result2, local01
31198     08 A6 86 F1 | 	sub	local01, #8
3119c     08 7C CE F7 | 	test	result2, #8 wz
311a0     D4 00 90 AD |  if_e	jmp	#LR__5242
311a4     01 AA 56 F2 | 	cmps	local03, #1 wc
311a8     2C 01 90 CD |  if_b	jmp	#LR__5244
311ac     08 A6 06 F1 | 	add	local01, #8
311b0     53 7D 02 FB | 	rdlong	result2, local01
311b4     08 A6 86 F1 | 	sub	local01, #8
311b8     80 7C CE F7 | 	test	result2, #128 wz
311bc     6C 00 90 AD |  if_e	jmp	#LR__5241
311c0     08 A6 06 F1 | 	add	local01, #8
311c4     53 97 02 FB | 	rdlong	arg03, local01
311c8     08 A6 86 F1 | 	sub	local01, #8
311cc     00 97 CE F7 | 	test	arg03, #256 wz
311d0     58 00 90 AD |  if_e	jmp	#LR__5240
311d4     30 A6 06 F1 | 	add	local01, #48
311d8     53 AD 02 FB | 	rdlong	local04, local01
311dc     56 AF 02 F6 | 	mov	local05, local04
311e0     30 A6 86 F1 | 	sub	local01, #48
311e4     13 AE 46 F7 | 	zerox	local05, #19
311e8     14 AC 46 F0 | 	shr	local04, #20
311ec     02 AC 66 F0 | 	shl	local04, #2
311f0     2D AD 02 F1 | 	add	local04, __methods__
311f4     56 AD 02 FB | 	rdlong	local04, local04
311f8     53 93 02 F6 | 	mov	arg01, local01
311fc     00 94 06 F6 | 	mov	arg02, #0
31200     00 96 06 F6 | 	mov	arg03, #0
31204     02 98 06 F6 | 	mov	arg04, #2
31208     32 B1 02 F6 | 	mov	local06, objptr
3120c     57 65 02 F6 | 	mov	objptr, local05
31210     2D AC 62 FD | 	call	local04
31214     58 65 02 F6 | 	mov	objptr, local06
31218     08 A6 06 F1 | 	add	local01, #8
3121c     53 B1 02 FB | 	rdlong	local06, local01
31220     00 B1 26 F5 | 	andn	local06, #256
31224     53 B1 62 FC | 	wrlong	local06, local01
31228     08 A6 86 F1 | 	sub	local01, #8
3122c                 | LR__5240
3122c                 | LR__5241
3122c     18 A6 06 F1 | 	add	local01, #24
31230     53 AD 02 FB | 	rdlong	local04, local01
31234     56 AF 02 F6 | 	mov	local05, local04
31238     18 A6 86 F1 | 	sub	local01, #24
3123c     13 AE 46 F7 | 	zerox	local05, #19
31240     14 AC 46 F0 | 	shr	local04, #20
31244     02 AC 66 F0 | 	shl	local04, #2
31248     2D AD 02 F1 | 	add	local04, __methods__
3124c     56 AD 02 FB | 	rdlong	local04, local04
31250     0C A8 06 F1 | 	add	local02, #12
31254     54 95 02 FB | 	rdlong	arg02, local02
31258     0C A8 86 F1 | 	sub	local02, #12
3125c     53 93 02 F6 | 	mov	arg01, local01
31260     55 97 02 F6 | 	mov	arg03, local03
31264     32 B1 02 F6 | 	mov	local06, objptr
31268     57 65 02 F6 | 	mov	objptr, local05
3126c     2D AC 62 FD | 	call	local04
31270     58 65 02 F6 | 	mov	objptr, local06
31274     60 00 90 FD | 	jmp	#LR__5244
31278                 | LR__5242
31278     08 A6 06 F1 | 	add	local01, #8
3127c     53 B1 02 FB | 	rdlong	local06, local01
31280     08 A6 86 F1 | 	sub	local01, #8
31284     04 B0 CE F7 | 	test	local06, #4 wz
31288     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
3128c     48 00 90 AD |  if_e	jmp	#LR__5243
31290     55 95 62 F6 | 	neg	arg02, local03
31294     4A 97 02 F6 | 	mov	arg03, arg02
31298     1F 96 C6 F0 | 	sar	arg03, #31
3129c     30 A6 06 F1 | 	add	local01, #48
312a0     53 AD 02 FB | 	rdlong	local04, local01
312a4     56 AF 02 F6 | 	mov	local05, local04
312a8     30 A6 86 F1 | 	sub	local01, #48
312ac     13 AE 46 F7 | 	zerox	local05, #19
312b0     14 AC 46 F0 | 	shr	local04, #20
312b4     02 AC 66 F0 | 	shl	local04, #2
312b8     2D AD 02 F1 | 	add	local04, __methods__
312bc     56 AD 02 FB | 	rdlong	local04, local04
312c0     53 93 02 F6 | 	mov	arg01, local01
312c4     01 98 06 F6 | 	mov	arg04, #1
312c8     32 B1 02 F6 | 	mov	local06, objptr
312cc     57 65 02 F6 | 	mov	objptr, local05
312d0     2D AC 62 FD | 	call	local04
312d4     58 65 02 F6 | 	mov	objptr, local06
312d8                 | LR__5243
312d8                 | LR__5244
312d8     54 01 68 FC | 	wrlong	#0, local02
312dc     04 A8 06 F1 | 	add	local02, #4
312e0     54 01 68 FC | 	wrlong	#0, local02
312e4     08 A6 06 F1 | 	add	local01, #8
312e8     53 B3 02 FB | 	rdlong	local07, local01
312ec     0C B2 26 F5 | 	andn	local07, #12
312f0     53 B3 62 FC | 	wrlong	local07, local01
312f4                 | '     }
312f4                 | '     b->cnt = 0;
312f4                 | '     b->ptr = 0;
312f4                 | '     f->state &= ~( (0x08) | (0x04) );
312f4                 | '     return 0;
312f4     00 7A 06 F6 | 	mov	result1, #0
312f8     E7 F0 03 F6 | 	mov	ptra, fp
312fc     F2 00 A0 FD | 	call	#popregs_
31300                 | _fatfs_cc___default_flush_ret
31300     2D 00 64 FD | 	ret
31304                 | 
31304                 | _fatfs_cc_getenv
31304     06 CA 05 F6 | 	mov	COUNT_, #6
31308     E8 00 A0 FD | 	call	#pushregs_
3130c     49 A7 02 F6 | 	mov	local01, arg01
31310     49 A9 02 F6 | 	mov	local02, arg01
31314     D7 06 48 FB | 	callpa	#(@LR__5251-@LR__5250)>>2,fcache_load_ptr_
31318                 | LR__5250
31318     54 7B CA FA | 	rdbyte	result1, local02 wz
3131c     01 A8 06 51 |  if_ne	add	local02, #1
31320     F4 FF 9F 5D |  if_ne	jmp	#LR__5250
31324                 | LR__5251
31324     49 A9 82 F1 | 	sub	local02, arg01
31328     54 7B 02 F6 | 	mov	result1, local02
3132c     02 00 00 FF 
31330     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31334     36 97 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
31338     02 00 00 FF 
3133c     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31340                 | '             return 0;
31340     00 7A 06 A6 |  if_e	mov	result1, #0
31344     5C 00 90 AD |  if_e	jmp	#LR__5254
31348                 | ' 
31348                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
31348     02 00 00 FF 
3134c     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31350     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31354     02 00 00 FF 
31358     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
3135c                 | LR__5252
3135c     55 AD 0A FB | 	rdlong	local04, local03 wz
31360     3C 00 90 AD |  if_e	jmp	#LR__5253
31364     56 93 02 F6 | 	mov	arg01, local04
31368     53 95 02 F6 | 	mov	arg02, local01
3136c     54 97 02 F6 | 	mov	arg03, local02
31370     24 AB BF FD | 	call	#_fatfs_cc_strncmp
31374     00 7A 0E F2 | 	cmp	result1, #0 wz
31378     54 AF 02 A6 |  if_e	mov	local05, local02
3137c     56 AF 02 A1 |  if_e	add	local05, local04
31380     57 B1 C2 AA |  if_e	rdbyte	local06, local05
31384     3D B0 0E A2 |  if_e	cmp	local06, #61 wz
31388                 | ' 			return name+len+1;
31388     54 AD 02 A1 |  if_e	add	local04, local02
3138c     01 AC 06 A1 |  if_e	add	local04, #1
31390     56 7B 02 A6 |  if_e	mov	result1, local04
31394     0C 00 90 AD |  if_e	jmp	#LR__5254
31398     04 AA 06 F1 | 	add	local03, #4
3139c     BC FF 9F FD | 	jmp	#LR__5252
313a0                 | LR__5253
313a0                 | ' 	}
313a0                 | ' 	return 0;
313a0     00 7A 06 F6 | 	mov	result1, #0
313a4                 | LR__5254
313a4     E7 F0 03 F6 | 	mov	ptra, fp
313a8     F2 00 A0 FD | 	call	#popregs_
313ac                 | _fatfs_cc_getenv_ret
313ac     2D 00 64 FD | 	ret
313b0                 | 
313b0                 | _fatfs_cc__get_fattime
313b0     00 CA 05 F6 | 	mov	COUNT_, #0
313b4     E8 00 A0 FD | 	call	#pushregs_
313b8     34 F0 07 F1 | 	add	ptra, #52
313bc     00 92 06 F6 | 	mov	arg01, #0
313c0     A4 AB BF FD | 	call	#_fatfs_cc_time
313c4     04 CE 05 F1 | 	add	fp, #4
313c8     E7 7A 62 FC | 	wrlong	result1, fp
313cc     E7 92 02 F6 | 	mov	arg01, fp
313d0     0C CE 05 F1 | 	add	fp, #12
313d4     E7 94 02 F6 | 	mov	arg02, fp
313d8     10 CE 85 F1 | 	sub	fp, #16
313dc     70 AD BF FD | 	call	#_fatfs_cc__gmtime_r
313e0     24 CE 05 F1 | 	add	fp, #36
313e4     E7 7A 02 FB | 	rdlong	result1, fp
313e8     50 7A 86 F1 | 	sub	result1, #80
313ec     09 7A 66 F0 | 	shl	result1, #9
313f0     04 CE 85 F1 | 	sub	fp, #4
313f4     E7 94 02 FB | 	rdlong	arg02, fp
313f8     01 94 06 F1 | 	add	arg02, #1
313fc     05 94 66 F0 | 	shl	arg02, #5
31400     4A 7B 42 F5 | 	or	result1, arg02
31404     04 CE 85 F1 | 	sub	fp, #4
31408     E7 94 02 FB | 	rdlong	arg02, fp
3140c     4A 7B 42 F5 | 	or	result1, arg02
31410     04 CE 85 F1 | 	sub	fp, #4
31414     E7 94 02 FB | 	rdlong	arg02, fp
31418     0B 94 66 F0 | 	shl	arg02, #11
3141c     04 CE 85 F1 | 	sub	fp, #4
31420     E7 92 02 FB | 	rdlong	arg01, fp
31424     05 92 66 F0 | 	shl	arg01, #5
31428     49 95 42 F5 | 	or	arg02, arg01
3142c     04 CE 85 F1 | 	sub	fp, #4
31430     E7 92 02 FB | 	rdlong	arg01, fp
31434     10 CE 85 F1 | 	sub	fp, #16
31438     49 95 42 F5 | 	or	arg02, arg01
3143c                 | ' 
3143c                 | '     now = time(0);
3143c                 | '     _gmtime_r (&now, &date);
3143c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
3143c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
3143c                 | '     return (ffdate << 16) | fftime;
3143c     10 7A 66 F0 | 	shl	result1, #16
31440     4A 7B 42 F5 | 	or	result1, arg02
31444     E7 F0 03 F6 | 	mov	ptra, fp
31448     F2 00 A0 FD | 	call	#popregs_
3144c                 | _fatfs_cc__get_fattime_ret
3144c     2D 00 64 FD | 	ret
31450                 | 
31450                 | _fatfs_cc_unixtime_1154
31450     02 CA 05 F6 | 	mov	COUNT_, #2
31454     E8 00 A0 FD | 	call	#pushregs_
31458     34 F0 07 F1 | 	add	ptra, #52
3145c     49 A7 02 F6 | 	mov	local01, arg01
31460     09 A6 46 F0 | 	shr	local01, #9
31464     7F A6 06 F5 | 	and	local01, #127
31468     50 A8 06 F6 | 	mov	local02, #80
3146c     53 A9 02 F1 | 	add	local02, local01
31470     24 CE 05 F1 | 	add	fp, #36
31474     E7 A8 62 FC | 	wrlong	local02, fp
31478     49 A9 02 F6 | 	mov	local02, arg01
3147c     05 A8 46 F0 | 	shr	local02, #5
31480     54 A9 42 F8 | 	getnib	local02, local02, #0
31484     01 A8 86 F1 | 	sub	local02, #1
31488     04 CE 85 F1 | 	sub	fp, #4
3148c     E7 A8 62 FC | 	wrlong	local02, fp
31490     1F 92 06 F5 | 	and	arg01, #31
31494     04 CE 85 F1 | 	sub	fp, #4
31498     E7 92 62 FC | 	wrlong	arg01, fp
3149c     4A A9 02 F6 | 	mov	local02, arg02
314a0     0B A8 46 F0 | 	shr	local02, #11
314a4     1F A8 06 F5 | 	and	local02, #31
314a8     04 CE 85 F1 | 	sub	fp, #4
314ac     E7 A8 62 FC | 	wrlong	local02, fp
314b0     4A A9 02 F6 | 	mov	local02, arg02
314b4     05 A8 46 F0 | 	shr	local02, #5
314b8     3F A8 06 F5 | 	and	local02, #63
314bc     04 CE 85 F1 | 	sub	fp, #4
314c0     E7 A8 62 FC | 	wrlong	local02, fp
314c4     1F 94 06 F5 | 	and	arg02, #31
314c8     01 94 66 F0 | 	shl	arg02, #1
314cc     04 CE 85 F1 | 	sub	fp, #4
314d0     E7 94 62 FC | 	wrlong	arg02, fp
314d4     E7 92 02 F6 | 	mov	arg01, fp
314d8     10 CE 85 F1 | 	sub	fp, #16
314dc     C8 AA BF FD | 	call	#_fatfs_cc_mktime
314e0                 | ' 
314e0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
314e0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
314e0                 | '     date.tm_mday = (dosdate & 0x1f);
314e0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
314e0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
314e0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
314e0                 | ' 
314e0                 | '     t = mktime(&date);
314e0                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
314e0                 | '     return t;
314e0     E7 F0 03 F6 | 	mov	ptra, fp
314e4     F2 00 A0 FD | 	call	#popregs_
314e8                 | _fatfs_cc_unixtime_1154_ret
314e8     2D 00 64 FD | 	ret
314ec                 | 
314ec                 | _fatfs_cc__set_dos_error_1156
314ec     49 81 02 F6 | 	mov	_var01, arg01
314f0                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
314f0                 | '     switch (derr) {
314f0     14 80 26 F3 | 	fle	_var01, #20
314f4     30 80 62 FD | 	jmprel	_var01
314f8                 | LR__5260
314f8     50 00 90 FD | 	jmp	#LR__5261
314fc     84 00 90 FD | 	jmp	#LR__5275
31500     80 00 90 FD | 	jmp	#LR__5276
31504     7C 00 90 FD | 	jmp	#LR__5277
31508     48 00 90 FD | 	jmp	#LR__5262
3150c     44 00 90 FD | 	jmp	#LR__5263
31510     40 00 90 FD | 	jmp	#LR__5264
31514     44 00 90 FD | 	jmp	#LR__5265
31518     48 00 90 FD | 	jmp	#LR__5267
3151c     54 00 90 FD | 	jmp	#LR__5270
31520     38 00 90 FD | 	jmp	#LR__5266
31524     4C 00 90 FD | 	jmp	#LR__5271
31528     48 00 90 FD | 	jmp	#LR__5272
3152c     44 00 90 FD | 	jmp	#LR__5273
31530     50 00 90 FD | 	jmp	#LR__5278
31534     4C 00 90 FD | 	jmp	#LR__5278
31538     48 00 90 FD | 	jmp	#LR__5278
3153c     2C 00 90 FD | 	jmp	#LR__5268
31540     38 00 90 FD | 	jmp	#LR__5274
31544     2C 00 90 FD | 	jmp	#LR__5269
31548     38 00 90 FD | 	jmp	#LR__5278
3154c                 | LR__5261
3154c     00 82 06 F6 | 	mov	_var02, #0
31550                 | '         r = 0;
31550                 | '         break;
31550     34 00 90 FD | 	jmp	#LR__5279
31554                 | LR__5262
31554                 | LR__5263
31554                 | LR__5264
31554     04 82 06 F6 | 	mov	_var02, #4
31558                 | '         r =  4 ;
31558                 | '         break;
31558     2C 00 90 FD | 	jmp	#LR__5279
3155c                 | LR__5265
3155c                 | LR__5266
3155c     06 82 06 F6 | 	mov	_var02, #6
31560                 | '         r =  6 ;
31560                 | '         break;
31560     24 00 90 FD | 	jmp	#LR__5279
31564                 | LR__5267
31564     09 82 06 F6 | 	mov	_var02, #9
31568                 | '         r =  9 ;
31568                 | '         break;
31568     1C 00 90 FD | 	jmp	#LR__5279
3156c                 | LR__5268
3156c     07 82 06 F6 | 	mov	_var02, #7
31570                 | '         r =  7 ;
31570                 | '         break;
31570     14 00 90 FD | 	jmp	#LR__5279
31574                 | LR__5269
31574                 | LR__5270
31574                 | LR__5271
31574                 | LR__5272
31574                 | LR__5273
31574     0A 82 06 F6 | 	mov	_var02, #10
31578                 | '         r =  10 ;
31578                 | '         break;
31578     0C 00 90 FD | 	jmp	#LR__5279
3157c                 | LR__5274
3157c     0B 82 06 F6 | 	mov	_var02, #11
31580                 | '         r =  11 ;
31580                 | '         break;
31580     04 00 90 FD | 	jmp	#LR__5279
31584                 | LR__5275
31584                 | LR__5276
31584                 | LR__5277
31584                 | LR__5278
31584     0C 82 06 F6 | 	mov	_var02, #12
31588                 | '         r =  12 ;
31588                 | '         break;
31588                 | LR__5279
31588                 | '     }
31588                 | '     return _seterror(r);
31588     00 82 4E F2 | 	cmps	_var02, #0 wz
3158c     20 68 06 F1 | 	add	ptr___system__dat__, #32
31590     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
31594     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31598     01 7A 66 56 |  if_ne	neg	result1, #1
3159c     00 7A 06 A6 |  if_e	mov	result1, #0
315a0                 | _fatfs_cc__set_dos_error_1156_ret
315a0     2D 00 64 FD | 	ret
315a4                 | 
315a4                 | _fatfs_cc_v_creat
315a4     04 CA 05 F6 | 	mov	COUNT_, #4
315a8     E8 00 A0 FD | 	call	#pushregs_
315ac     49 A7 02 F6 | 	mov	local01, arg01
315b0     4A A9 02 F6 | 	mov	local02, arg02
315b4     03 00 00 FF 
315b8     38 92 06 F6 | 	mov	arg01, ##1592
315bc                 | '     return _gc_alloc(size);
315bc     10 94 06 F6 | 	mov	arg02, #16
315c0     70 6E BF FD | 	call	#__system___gc_doalloc
315c4     3D AB 0A F6 | 	mov	local03, result1 wz
315c8                 | '       return _seterror( 7 );
315c8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
315cc     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
315d0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
315d4     01 7A 66 A6 |  if_e	neg	result1, #1
315d8     50 00 90 AD |  if_e	jmp	#LR__5281
315dc     55 93 02 F6 | 	mov	arg01, local03
315e0     00 94 06 F6 | 	mov	arg02, #0
315e4     03 00 00 FF 
315e8     38 96 06 F6 | 	mov	arg03, ##1592
315ec     D8 00 A0 FD | 	call	#\builtin_bytefill_
315f0     55 93 02 F6 | 	mov	arg01, local03
315f4     02 00 00 FF 
315f8     10 92 06 F1 | 	add	arg01, ##1040
315fc     54 95 02 F6 | 	mov	arg02, local02
31600     07 96 06 F6 | 	mov	arg03, #7
31604     D8 E0 BF FD | 	call	#_fatfs_cc_f_open
31608     3D AD 0A F6 | 	mov	local04, result1 wz
3160c     14 00 90 AD |  if_e	jmp	#LR__5280
31610     55 93 02 F6 | 	mov	arg01, local03
31614                 | '     return _gc_free(ptr);
31614     20 6F BF FD | 	call	#__system___gc_free
31618                 | '     free(f);
31618                 | '     return _set_dos_error(r);
31618     56 93 02 F6 | 	mov	arg01, local04
3161c     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31620     08 00 90 FD | 	jmp	#LR__5281
31624                 | LR__5280
31624     53 AB 62 FC | 	wrlong	local03, local01
31628                 | '   }
31628                 | '   fil->vfsdata = f;
31628                 | '   return 0;
31628     00 7A 06 F6 | 	mov	result1, #0
3162c                 | LR__5281
3162c     E7 F0 03 F6 | 	mov	ptra, fp
31630     F2 00 A0 FD | 	call	#popregs_
31634                 | _fatfs_cc_v_creat_ret
31634     2D 00 64 FD | 	ret
31638                 | 
31638                 | _fatfs_cc_v_close
31638     02 CA 05 F6 | 	mov	COUNT_, #2
3163c     E8 00 A0 FD | 	call	#pushregs_
31640     49 A7 02 FB | 	rdlong	local01, arg01
31644     53 93 02 F6 | 	mov	arg01, local01
31648     02 00 00 FF 
3164c     10 92 06 F1 | 	add	arg01, ##1040
31650     34 EE BF FD | 	call	#_fatfs_cc_f_close
31654     3D A9 02 F6 | 	mov	local02, result1
31658     53 93 02 F6 | 	mov	arg01, local01
3165c                 | '     return _gc_free(ptr);
3165c     D8 6E BF FD | 	call	#__system___gc_free
31660                 | '     FAT_FIL *f = fil->vfsdata;
31660                 | '     r=f_close(&f->fil);
31660                 | '     free(f);
31660                 | '     return _set_dos_error(r);
31660     54 93 02 F6 | 	mov	arg01, local02
31664     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31668     E7 F0 03 F6 | 	mov	ptra, fp
3166c     F2 00 A0 FD | 	call	#popregs_
31670                 | _fatfs_cc_v_close_ret
31670     2D 00 64 FD | 	ret
31674                 | 
31674                 | _fatfs_cc_v_opendir
31674     04 CA 05 F6 | 	mov	COUNT_, #4
31678     E8 00 A0 FD | 	call	#pushregs_
3167c     49 A7 02 F6 | 	mov	local01, arg01
31680     4A A9 02 F6 | 	mov	local02, arg02
31684     30 92 06 F6 | 	mov	arg01, #48
31688                 | '     return _gc_alloc(size);
31688     10 94 06 F6 | 	mov	arg02, #16
3168c     A4 6D BF FD | 	call	#__system___gc_doalloc
31690     3D AB 0A F6 | 	mov	local03, result1 wz
31694                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31694                 | '       return _seterror( 7 );
31694     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31698     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3169c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
316a0     01 7A 66 A6 |  if_e	neg	result1, #1
316a4     34 00 90 AD |  if_e	jmp	#LR__5291
316a8     54 95 02 F6 | 	mov	arg02, local02
316ac     55 93 02 F6 | 	mov	arg01, local03
316b0     C0 F1 BF FD | 	call	#_fatfs_cc_f_opendir
316b4     3D AD 0A F6 | 	mov	local04, result1 wz
316b8     14 00 90 AD |  if_e	jmp	#LR__5290
316bc     55 93 02 F6 | 	mov	arg01, local03
316c0                 | '     return _gc_free(ptr);
316c0     74 6E BF FD | 	call	#__system___gc_free
316c4                 | '         free(f);
316c4                 | '         return _set_dos_error(r);
316c4     56 93 02 F6 | 	mov	arg01, local04
316c8     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
316cc     0C 00 90 FD | 	jmp	#LR__5291
316d0                 | LR__5290
316d0     04 A6 06 F1 | 	add	local01, #4
316d4     53 AB 62 FC | 	wrlong	local03, local01
316d8                 | '     }
316d8                 | '     dir->vfsdata = f;
316d8                 | '     return 0;
316d8     00 7A 06 F6 | 	mov	result1, #0
316dc                 | LR__5291
316dc     E7 F0 03 F6 | 	mov	ptra, fp
316e0     F2 00 A0 FD | 	call	#popregs_
316e4                 | _fatfs_cc_v_opendir_ret
316e4     2D 00 64 FD | 	ret
316e8                 | 
316e8                 | _fatfs_cc_v_closedir
316e8     02 CA 05 F6 | 	mov	COUNT_, #2
316ec     E8 00 A0 FD | 	call	#pushregs_
316f0     04 92 06 F1 | 	add	arg01, #4
316f4     49 A7 02 FB | 	rdlong	local01, arg01
316f8     53 93 02 F6 | 	mov	arg01, local01
316fc     90 F2 BF FD | 	call	#_fatfs_cc_f_closedir
31700     3D A9 02 F6 | 	mov	local02, result1
31704     53 93 02 F6 | 	mov	arg01, local01
31708                 | '     return _gc_free(ptr);
31708     2C 6E BF FD | 	call	#__system___gc_free
3170c     00 A8 0E F2 | 	cmp	local02, #0 wz
31710     54 93 02 56 |  if_ne	mov	arg01, local02
31714     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
31718                 | '     return r;
31718     54 7B 02 F6 | 	mov	result1, local02
3171c     E7 F0 03 F6 | 	mov	ptra, fp
31720     F2 00 A0 FD | 	call	#popregs_
31724                 | _fatfs_cc_v_closedir_ret
31724     2D 00 64 FD | 	ret
31728                 | 
31728                 | _fatfs_cc_v_readdir
31728     01 CA 05 F6 | 	mov	COUNT_, #1
3172c     E8 00 A0 FD | 	call	#pushregs_
31730     2C F1 07 F1 | 	add	ptra, #300
31734     4A A7 02 F6 | 	mov	local01, arg02
31738     04 92 06 F1 | 	add	arg01, #4
3173c     49 93 02 FB | 	rdlong	arg01, arg01
31740     E7 94 02 F6 | 	mov	arg02, fp
31744     0C 94 06 F1 | 	add	arg02, #12
31748     78 F2 BF FD | 	call	#_fatfs_cc_f_readdir
3174c     3D 97 0A F6 | 	mov	arg03, result1 wz
31750     0C 00 90 AD |  if_e	jmp	#LR__5300
31754                 | '         return _set_dos_error(r);
31754     4B 93 02 F6 | 	mov	arg01, arg03
31758     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
3175c     88 00 90 FD | 	jmp	#LR__5301
31760                 | LR__5300
31760     28 CE 05 F1 | 	add	fp, #40
31764     E7 96 CA FA | 	rdbyte	arg03, fp wz
31768     28 CE 85 F1 | 	sub	fp, #40
3176c                 | '         return -1;
3176c     01 7A 66 A6 |  if_e	neg	result1, #1
31770     74 00 90 AD |  if_e	jmp	#LR__5301
31774     E7 94 02 F6 | 	mov	arg02, fp
31778     28 94 06 F1 | 	add	arg02, #40
3177c     53 93 02 F6 | 	mov	arg01, local01
31780     3F 96 06 F6 | 	mov	arg03, #63
31784     7C A6 BF FD | 	call	#_fatfs_cc_strncpy
31788     3F A6 06 F1 | 	add	local01, #63
3178c     53 01 48 FC | 	wrbyte	#0, local01
31790     3F A6 86 F1 | 	sub	local01, #63
31794     14 CE 05 F1 | 	add	fp, #20
31798     E7 96 C2 FA | 	rdbyte	arg03, fp
3179c     10 96 CE F7 | 	test	arg03, #16 wz
317a0     50 A6 06 51 |  if_ne	add	local01, #80
317a4     53 03 48 5C |  if_ne	wrbyte	#1, local01
317a8     50 A6 E6 F3 | 	sumnz	local01, #80
317ac     53 01 48 AC |  if_e	wrbyte	#0, local01
317b0     50 A6 86 A1 |  if_e	sub	local01, #80
317b4     08 CE 85 F1 | 	sub	fp, #8
317b8     E7 96 02 FB | 	rdlong	arg03, fp
317bc     48 A6 06 F1 | 	add	local01, #72
317c0     53 97 62 FC | 	wrlong	arg03, local01
317c4     04 CE 05 F1 | 	add	fp, #4
317c8     E7 92 E2 FA | 	rdword	arg01, fp
317cc     02 CE 05 F1 | 	add	fp, #2
317d0     E7 94 E2 FA | 	rdword	arg02, fp
317d4     12 CE 85 F1 | 	sub	fp, #18
317d8     74 FC BF FD | 	call	#_fatfs_cc_unixtime_1154
317dc     04 A6 06 F1 | 	add	local01, #4
317e0     53 7B 62 FC | 	wrlong	result1, local01
317e4                 | '         ent->d_type =  (0) ;
317e4                 | '     }
317e4                 | '     ent->d_size = finfo.fsize;
317e4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
317e4                 | '     return 0;
317e4     00 7A 06 F6 | 	mov	result1, #0
317e8                 | LR__5301
317e8     E7 F0 03 F6 | 	mov	ptra, fp
317ec     F2 00 A0 FD | 	call	#popregs_
317f0                 | _fatfs_cc_v_readdir_ret
317f0     2D 00 64 FD | 	ret
317f4                 | 
317f4                 | _fatfs_cc_v_stat
317f4     05 CA 05 F6 | 	mov	COUNT_, #5
317f8     E8 00 A0 FD | 	call	#pushregs_
317fc     30 F1 07 F1 | 	add	ptra, #304
31800     49 A7 02 F6 | 	mov	local01, arg01
31804     4A A9 02 F6 | 	mov	local02, arg02
31808     54 93 02 F6 | 	mov	arg01, local02
3180c     00 94 06 F6 | 	mov	arg02, #0
31810     34 96 06 F6 | 	mov	arg03, #52
31814     D8 00 A0 FD | 	call	#\builtin_bytefill_
31818     53 7D CA FA | 	rdbyte	result2, local01 wz
3181c     1C 00 90 AD |  if_e	jmp	#LR__5310
31820     53 7D C2 FA | 	rdbyte	result2, local01
31824     2E 7C 0E F2 | 	cmp	result2, #46 wz
31828     01 A6 06 A1 |  if_e	add	local01, #1
3182c     53 AB C2 AA |  if_e	rdbyte	local03, local01
31830     01 A6 86 A1 |  if_e	sub	local01, #1
31834     00 AA 4E A2 |  if_e	cmps	local03, #0 wz
31838     14 00 90 5D |  if_ne	jmp	#LR__5311
3183c                 | LR__5310
3183c     18 CE 05 F1 | 	add	fp, #24
31840     E7 20 48 FC | 	wrbyte	#16, fp
31844     18 CE 85 F1 | 	sub	fp, #24
31848     00 AC 06 F6 | 	mov	local04, #0
3184c     14 00 90 FD | 	jmp	#LR__5312
31850                 | LR__5311
31850     E7 94 02 F6 | 	mov	arg02, fp
31854     10 94 06 F1 | 	add	arg02, #16
31858     53 93 02 F6 | 	mov	arg01, local01
3185c     00 F2 BF FD | 	call	#_fatfs_cc_f_stat
31860     3D AD 02 F6 | 	mov	local04, result1
31864                 | LR__5312
31864     00 AC 0E F2 | 	cmp	local04, #0 wz
31868     0C 00 90 AD |  if_e	jmp	#LR__5313
3186c                 | '         return _set_dos_error(r);
3186c     56 93 02 F6 | 	mov	arg01, local04
31870     78 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31874     9C 00 90 FD | 	jmp	#LR__5314
31878                 | LR__5313
31878     24 AF 06 F6 | 	mov	local05, #292
3187c     18 CE 05 F1 | 	add	fp, #24
31880     E7 AA C2 FA | 	rdbyte	local03, fp
31884     01 AA CE F7 | 	test	local03, #1 wz
31888     B6 AF 06 A6 |  if_e	mov	local05, #438
3188c     10 AA CE F7 | 	test	local03, #16 wz
31890     08 00 00 5F 
31894     49 AE 46 55 |  if_ne	or	local05, ##4169
31898     08 A8 06 F1 | 	add	local02, #8
3189c     54 AF 62 FC | 	wrlong	local05, local02
318a0     04 A8 06 F1 | 	add	local02, #4
318a4     54 03 68 FC | 	wrlong	#1, local02
318a8     08 CE 85 F1 | 	sub	fp, #8
318ac     E7 7A 02 FB | 	rdlong	result1, fp
318b0     0C A8 06 F1 | 	add	local02, #12
318b4     54 7B 62 FC | 	wrlong	result1, local02
318b8     04 A8 06 F1 | 	add	local02, #4
318bc     54 01 68 FC | 	wrlong	#0, local02
318c0     04 A8 06 F1 | 	add	local02, #4
318c4     01 00 80 FF 
318c8     54 01 68 FC | 	wrlong	##512, local02
318cc     E7 AA 02 FB | 	rdlong	local03, fp
318d0     FF AB 06 F1 | 	add	local03, #511
318d4     09 AA 46 F0 | 	shr	local03, #9
318d8     04 A8 06 F1 | 	add	local02, #4
318dc     54 AB 62 FC | 	wrlong	local03, local02
318e0     04 CE 05 F1 | 	add	fp, #4
318e4     E7 92 E2 FA | 	rdword	arg01, fp
318e8     02 CE 05 F1 | 	add	fp, #2
318ec     E7 94 E2 FA | 	rdword	arg02, fp
318f0     16 CE 85 F1 | 	sub	fp, #22
318f4     58 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
318f8     0C A8 06 F1 | 	add	local02, #12
318fc     54 7B 62 FC | 	wrlong	result1, local02
31900     04 A8 86 F1 | 	sub	local02, #4
31904     54 7B 62 FC | 	wrlong	result1, local02
31908     04 A8 86 F1 | 	sub	local02, #4
3190c     54 7B 62 FC | 	wrlong	result1, local02
31910                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
31910                 | '     }
31910                 | '     buf->st_mode = mode;
31910                 | '     buf->st_nlink = 1;
31910                 | '     buf->st_size = finfo.fsize;
31910                 | '     buf->st_blksize = 512;
31910                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
31910                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
31910                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31910                 | '     return r;
31910     56 7B 02 F6 | 	mov	result1, local04
31914                 | LR__5314
31914     E7 F0 03 F6 | 	mov	ptra, fp
31918     F2 00 A0 FD | 	call	#popregs_
3191c                 | _fatfs_cc_v_stat_ret
3191c     2D 00 64 FD | 	ret
31920                 | 
31920                 | _fatfs_cc_v_read
31920     02 CA 05 F6 | 	mov	COUNT_, #2
31924     E8 00 A0 FD | 	call	#pushregs_
31928     1C F0 07 F1 | 	add	ptra, #28
3192c     49 A7 02 F6 | 	mov	local01, arg01
31930     53 93 0A FB | 	rdlong	arg01, local01 wz
31934                 | '         return _seterror( 5 );
31934     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31938     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3193c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31940     01 7A 66 A6 |  if_e	neg	result1, #1
31944     58 00 90 AD |  if_e	jmp	#LR__5321
31948     02 00 00 FF 
3194c     10 92 06 F1 | 	add	arg01, ##1040
31950     E7 98 02 F6 | 	mov	arg04, fp
31954     18 98 06 F1 | 	add	arg04, #24
31958     DC E1 BF FD | 	call	#_fatfs_cc_f_read
3195c     3D 99 0A F6 | 	mov	arg04, result1 wz
31960     1C 00 90 AD |  if_e	jmp	#LR__5320
31964     08 A6 06 F1 | 	add	local01, #8
31968     53 93 02 FB | 	rdlong	arg01, local01
3196c     20 92 46 F5 | 	or	arg01, #32
31970     53 93 62 FC | 	wrlong	arg01, local01
31974                 | '         fil->state |=  (0x20) ;
31974                 | '         return _set_dos_error(r);
31974     4C 93 02 F6 | 	mov	arg01, arg04
31978     70 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
3197c     20 00 90 FD | 	jmp	#LR__5321
31980                 | LR__5320
31980     18 CE 05 F1 | 	add	fp, #24
31984     E7 A8 0A FB | 	rdlong	local02, fp wz
31988     08 A6 06 A1 |  if_e	add	local01, #8
3198c     53 A9 02 AB |  if_e	rdlong	local02, local01
31990     10 A8 46 A5 |  if_e	or	local02, #16
31994     53 A9 62 AC |  if_e	wrlong	local02, local01
31998                 | '         fil->state |=  (0x10) ;
31998                 | '     }
31998                 | '     return x;
31998     E7 7A 02 FB | 	rdlong	result1, fp
3199c     18 CE 85 F1 | 	sub	fp, #24
319a0                 | LR__5321
319a0     E7 F0 03 F6 | 	mov	ptra, fp
319a4     F2 00 A0 FD | 	call	#popregs_
319a8                 | _fatfs_cc_v_read_ret
319a8     2D 00 64 FD | 	ret
319ac                 | 
319ac                 | _fatfs_cc_v_write
319ac     01 CA 05 F6 | 	mov	COUNT_, #1
319b0     E8 00 A0 FD | 	call	#pushregs_
319b4     1C F0 07 F1 | 	add	ptra, #28
319b8     49 A7 02 F6 | 	mov	local01, arg01
319bc     53 93 0A FB | 	rdlong	arg01, local01 wz
319c0                 | '         return _seterror( 5 );
319c0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
319c4     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
319c8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
319cc     01 7A 66 A6 |  if_e	neg	result1, #1
319d0     44 00 90 AD |  if_e	jmp	#LR__5331
319d4     02 00 00 FF 
319d8     10 92 06 F1 | 	add	arg01, ##1040
319dc     E7 98 02 F6 | 	mov	arg04, fp
319e0     18 98 06 F1 | 	add	arg04, #24
319e4     E8 E4 BF FD | 	call	#_fatfs_cc_f_write
319e8     3D 99 0A F6 | 	mov	arg04, result1 wz
319ec     1C 00 90 AD |  if_e	jmp	#LR__5330
319f0     08 A6 06 F1 | 	add	local01, #8
319f4     53 93 02 FB | 	rdlong	arg01, local01
319f8     20 92 46 F5 | 	or	arg01, #32
319fc     53 93 62 FC | 	wrlong	arg01, local01
31a00                 | '         fil->state |=  (0x20) ;
31a00                 | '         return _set_dos_error(r);
31a00     4C 93 02 F6 | 	mov	arg01, arg04
31a04     E4 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31a08     0C 00 90 FD | 	jmp	#LR__5331
31a0c                 | LR__5330
31a0c                 | '     }
31a0c                 | '     return x;
31a0c     18 CE 05 F1 | 	add	fp, #24
31a10     E7 7A 02 FB | 	rdlong	result1, fp
31a14     18 CE 85 F1 | 	sub	fp, #24
31a18                 | LR__5331
31a18     E7 F0 03 F6 | 	mov	ptra, fp
31a1c     F2 00 A0 FD | 	call	#popregs_
31a20                 | _fatfs_cc_v_write_ret
31a20     2D 00 64 FD | 	ret
31a24                 | 
31a24                 | _fatfs_cc_v_lseek
31a24     06 CA 05 F6 | 	mov	COUNT_, #6
31a28     E8 00 A0 FD | 	call	#pushregs_
31a2c     4A AB 02 F6 | 	mov	local03, arg02
31a30     4C AD 02 F6 | 	mov	local04, arg04
31a34     49 AF 02 FB | 	rdlong	local05, arg01
31a38     02 00 00 FF 
31a3c     10 AE 0E F1 | 	add	local05, ##1040 wz
31a40     18 00 90 5D |  if_ne	jmp	#LR__5340
31a44                 | '         return _seterror( 5 );
31a44     20 68 06 F1 | 	add	ptr___system__dat__, #32
31a48     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
31a4c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31a50     01 7C 66 F6 | 	neg	result2, #1
31a54     01 7A 66 F6 | 	neg	result1, #1
31a58     58 00 90 FD | 	jmp	#LR__5343
31a5c                 | LR__5340
31a5c     00 AC 0E F2 | 	cmp	local04, #0 wz
31a60     24 00 90 AD |  if_e	jmp	#LR__5341
31a64     01 AC 0E F2 | 	cmp	local04, #1 wz
31a68     14 AE 06 A1 |  if_e	add	local05, #20
31a6c     57 B1 02 AB |  if_e	rdlong	local06, local05
31a70     14 AE 86 A1 |  if_e	sub	local05, #20
31a74     58 AB 02 A1 |  if_e	add	local03, local06
31a78     0C AE 06 51 |  if_ne	add	local05, #12
31a7c     57 B1 02 5B |  if_ne	rdlong	local06, local05
31a80     0C AE 86 51 |  if_ne	sub	local05, #12
31a84     58 AB 02 51 |  if_ne	add	local03, local06
31a88                 | LR__5341
31a88     57 93 02 F6 | 	mov	arg01, local05
31a8c     55 95 02 F6 | 	mov	arg02, local03
31a90     38 EA BF FD | 	call	#_fatfs_cc_f_lseek
31a94     3D 93 0A F6 | 	mov	arg01, result1 wz
31a98     10 00 90 AD |  if_e	jmp	#LR__5342
31a9c                 | '         return _set_dos_error(result);
31a9c     4C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31aa0     3D 7D 02 F6 | 	mov	result2, result1
31aa4     1F 7C C6 F0 | 	sar	result2, #31
31aa8     08 00 90 FD | 	jmp	#LR__5343
31aac                 | LR__5342
31aac                 | '     }
31aac                 | '     return (off_t)offset;
31aac     55 7B 02 F6 | 	mov	result1, local03
31ab0     54 7D 02 F6 | 	mov	result2, local02
31ab4                 | LR__5343
31ab4     E7 F0 03 F6 | 	mov	ptra, fp
31ab8     F2 00 A0 FD | 	call	#popregs_
31abc                 | _fatfs_cc_v_lseek_ret
31abc     2D 00 64 FD | 	ret
31ac0                 | 
31ac0                 | _fatfs_cc_v_ioctl
31ac0                 | ' {
31ac0                 | '     return _seterror( 10 );
31ac0     20 68 06 F1 | 	add	ptr___system__dat__, #32
31ac4     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
31ac8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31acc     01 7A 66 F6 | 	neg	result1, #1
31ad0                 | _fatfs_cc_v_ioctl_ret
31ad0     2D 00 64 FD | 	ret
31ad4                 | 
31ad4                 | _fatfs_cc_v_mkdir
31ad4     A0 F1 BF FD | 	call	#_fatfs_cc_f_mkdir
31ad8     3D 93 02 F6 | 	mov	arg01, result1
31adc                 | ' 
31adc                 | '     r = f_mkdir(name);
31adc                 | '     return _set_dos_error(r);
31adc     0C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31ae0                 | _fatfs_cc_v_mkdir_ret
31ae0     2D 00 64 FD | 	ret
31ae4                 | 
31ae4                 | _fatfs_cc_v_remove
31ae4     0C F0 BF FD | 	call	#_fatfs_cc_f_unlink
31ae8     3D 93 02 F6 | 	mov	arg01, result1
31aec                 | ' 
31aec                 | '     r = f_unlink(name);
31aec                 | '     return _set_dos_error(r);
31aec     FC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31af0                 | _fatfs_cc_v_remove_ret
31af0     2D 00 64 FD | 	ret
31af4                 | 
31af4                 | _fatfs_cc_v_rmdir
31af4     FC EF BF FD | 	call	#_fatfs_cc_f_unlink
31af8     3D 93 02 F6 | 	mov	arg01, result1
31afc                 | ' 
31afc                 | '     r = f_unlink(name);
31afc                 | '     return _set_dos_error(r);
31afc     EC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31b00                 | _fatfs_cc_v_rmdir_ret
31b00     2D 00 64 FD | 	ret
31b04                 | 
31b04                 | _fatfs_cc_v_rename
31b04     B0 F3 BF FD | 	call	#_fatfs_cc_f_rename
31b08     3D 93 02 F6 | 	mov	arg01, result1
31b0c                 | '     return _set_dos_error(r);
31b0c     DC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31b10                 | _fatfs_cc_v_rename_ret
31b10     2D 00 64 FD | 	ret
31b14                 | 
31b14                 | _fatfs_cc_v_open
31b14     07 CA 05 F6 | 	mov	COUNT_, #7
31b18     E8 00 A0 FD | 	call	#pushregs_
31b1c     49 A7 02 F6 | 	mov	local01, arg01
31b20     4A A9 02 F6 | 	mov	local02, arg02
31b24     4B AB 02 F6 | 	mov	local03, arg03
31b28     03 00 00 FF 
31b2c     38 92 06 F6 | 	mov	arg01, ##1592
31b30                 | '     return _gc_alloc(size);
31b30     10 94 06 F6 | 	mov	arg02, #16
31b34     FC 68 BF FD | 	call	#__system___gc_doalloc
31b38     3D AD 0A F6 | 	mov	local04, result1 wz
31b3c                 | '       return _seterror( 7 );
31b3c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31b40     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31b44     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31b48     01 7A 66 A6 |  if_e	neg	result1, #1
31b4c     90 00 90 AD |  if_e	jmp	#LR__5356
31b50     56 93 02 F6 | 	mov	arg01, local04
31b54     00 94 06 F6 | 	mov	arg02, #0
31b58     03 00 00 FF 
31b5c     38 96 06 F6 | 	mov	arg03, ##1592
31b60     D8 00 A0 FD | 	call	#\builtin_bytefill_
31b64                 | '   switch (flags & 3) {
31b64     55 AF 02 F6 | 	mov	local05, local03
31b68     03 AE 0E F5 | 	and	local05, #3 wz
31b6c     0C 00 90 AD |  if_e	jmp	#LR__5350
31b70     01 AE 0E F2 | 	cmp	local05, #1 wz
31b74     0C 00 90 AD |  if_e	jmp	#LR__5351
31b78     10 00 90 FD | 	jmp	#LR__5352
31b7c                 | LR__5350
31b7c     01 B0 06 F6 | 	mov	local06, #1
31b80                 | '       fs_flags =  0x01 ;
31b80                 | '       break;
31b80     0C 00 90 FD | 	jmp	#LR__5353
31b84                 | LR__5351
31b84     02 B0 06 F6 | 	mov	local06, #2
31b88                 | '       fs_flags =  0x02 ;
31b88                 | '       break;
31b88     04 00 90 FD | 	jmp	#LR__5353
31b8c                 | LR__5352
31b8c     03 B0 06 F6 | 	mov	local06, #3
31b90                 | '       fs_flags =  0x01  |  0x02 ;
31b90                 | '       break;
31b90                 | LR__5353
31b90     08 AA CE F7 | 	test	local03, #8 wz
31b94     18 B0 46 55 |  if_ne	or	local06, #24
31b98     08 00 90 5D |  if_ne	jmp	#LR__5354
31b9c     20 AA CE F7 | 	test	local03, #32 wz
31ba0     30 B0 46 55 |  if_ne	or	local06, #48
31ba4                 | LR__5354
31ba4     56 93 02 F6 | 	mov	arg01, local04
31ba8     02 00 00 FF 
31bac     10 92 06 F1 | 	add	arg01, ##1040
31bb0     54 95 02 F6 | 	mov	arg02, local02
31bb4     58 97 02 F6 | 	mov	arg03, local06
31bb8     24 DB BF FD | 	call	#_fatfs_cc_f_open
31bbc     3D B3 0A F6 | 	mov	local07, result1 wz
31bc0     14 00 90 AD |  if_e	jmp	#LR__5355
31bc4     56 93 02 F6 | 	mov	arg01, local04
31bc8                 | '     return _gc_free(ptr);
31bc8     6C 69 BF FD | 	call	#__system___gc_free
31bcc                 | '     free(f);
31bcc                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31bcc                 | '     return _set_dos_error(r);
31bcc     59 93 02 F6 | 	mov	arg01, local07
31bd0     18 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31bd4     08 00 90 FD | 	jmp	#LR__5356
31bd8                 | LR__5355
31bd8     53 AD 62 FC | 	wrlong	local04, local01
31bdc                 | '   }
31bdc                 | '   fil->vfsdata = f;
31bdc                 | '   return 0;
31bdc     00 7A 06 F6 | 	mov	result1, #0
31be0                 | LR__5356
31be0     E7 F0 03 F6 | 	mov	ptra, fp
31be4     F2 00 A0 FD | 	call	#popregs_
31be8                 | _fatfs_cc_v_open_ret
31be8     2D 00 64 FD | 	ret
31bec                 | 
31bec                 | _fatfs_cc_v_flush
31bec     01 CA 05 F6 | 	mov	COUNT_, #1
31bf0     E8 00 A0 FD | 	call	#pushregs_
31bf4     49 A7 02 F6 | 	mov	local01, arg01
31bf8     80 F5 BF FD | 	call	#_fatfs_cc___default_flush
31bfc     53 A7 02 FB | 	rdlong	local01, local01
31c00     02 00 00 FF 
31c04     10 A6 0E F1 | 	add	local01, ##1040 wz
31c08                 | '         return _seterror( 5 );
31c08     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31c0c     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31c10     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31c14     01 7A 66 A6 |  if_e	neg	result1, #1
31c18     10 00 90 AD |  if_e	jmp	#LR__5360
31c1c     53 93 02 F6 | 	mov	arg01, local01
31c20     FC E6 BF FD | 	call	#_fatfs_cc_f_sync
31c24     3D 93 02 F6 | 	mov	arg01, result1
31c28                 | '     }
31c28                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c28                 | '     result = f_sync(f);
31c28                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c28                 | '     return _set_dos_error(result);
31c28     C0 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31c2c                 | LR__5360
31c2c     E7 F0 03 F6 | 	mov	ptra, fp
31c30     F2 00 A0 FD | 	call	#popregs_
31c34                 | _fatfs_cc_v_flush_ret
31c34     2D 00 64 FD | 	ret
31c38                 | 
31c38                 | _fatfs_cc_v_init
31c38                 | ' {
31c38                 | '     return 0;
31c38     00 7A 06 F6 | 	mov	result1, #0
31c3c                 | _fatfs_cc_v_init_ret
31c3c     2D 00 64 FD | 	ret
31c40                 | 
31c40                 | _fatfs_cc_v_deinit
31c40     92 01 00 FF 
31c44     64 95 06 F6 | 	mov	arg02, ##@LR__5486
31c48     00 92 06 F6 | 	mov	arg01, #0
31c4c     00 96 06 F6 | 	mov	arg03, #0
31c50     B8 D9 BF FD | 	call	#_fatfs_cc_f_mount
31c54     01 00 00 FF 
31c58     08 64 06 F1 | 	add	objptr, ##520
31c5c     32 93 02 FB | 	rdlong	arg01, objptr
31c60     04 64 06 F1 | 	add	objptr, #4
31c64     32 95 02 FB | 	rdlong	arg02, objptr
31c68     01 00 00 FF 
31c6c     0C 64 86 F1 | 	sub	objptr, ##524
31c70     2C 50 BF FD | 	call	#__system___freepins
31c74                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c74                 | '     _freepins(f_pinmask);
31c74                 | '     return 0;
31c74     00 7A 06 F6 | 	mov	result1, #0
31c78                 | _fatfs_cc_v_deinit_ret
31c78     2D 00 64 FD | 	ret
31c7c                 | 
31c7c                 | _fatfs_cc_get_vfs
31c7c     01 CA 05 F6 | 	mov	COUNT_, #1
31c80     E8 00 A0 FD | 	call	#pushregs_
31c84     49 A7 02 F6 | 	mov	local01, arg01
31c88     58 92 06 F6 | 	mov	arg01, #88
31c8c     74 67 BF FD | 	call	#__system___gc_alloc_managed
31c90     3D 93 02 F6 | 	mov	arg01, result1
31c94     32 7B 02 F6 | 	mov	result1, objptr
31c98     00 D8 05 FF 
31c9c     00 7A 46 F5 | 	or	result1, ##196083712
31ca0     49 7B 62 FC | 	wrlong	result1, arg01
31ca4     32 7B 02 F6 | 	mov	result1, objptr
31ca8     00 E0 05 FF 
31cac     00 7A 46 F5 | 	or	result1, ##197132288
31cb0     04 92 06 F1 | 	add	arg01, #4
31cb4     49 7B 62 FC | 	wrlong	result1, arg01
31cb8     32 7B 02 F6 | 	mov	result1, objptr
31cbc     00 E8 05 FF 
31cc0     00 7A 46 F5 | 	or	result1, ##198180864
31cc4     04 92 06 F1 | 	add	arg01, #4
31cc8     49 7B 62 FC | 	wrlong	result1, arg01
31ccc     32 7B 02 F6 | 	mov	result1, objptr
31cd0     00 F0 05 FF 
31cd4     00 7A 46 F5 | 	or	result1, ##199229440
31cd8     04 92 06 F1 | 	add	arg01, #4
31cdc     49 7B 62 FC | 	wrlong	result1, arg01
31ce0     32 7B 02 F6 | 	mov	result1, objptr
31ce4     00 F8 05 FF 
31ce8     00 7A 46 F5 | 	or	result1, ##200278016
31cec     04 92 06 F1 | 	add	arg01, #4
31cf0     49 7B 62 FC | 	wrlong	result1, arg01
31cf4     32 7B 02 F6 | 	mov	result1, objptr
31cf8     3A 7A 26 F4 | 	bith	result1, #58
31cfc     04 92 06 F1 | 	add	arg01, #4
31d00     49 7B 62 FC | 	wrlong	result1, arg01
31d04     04 92 06 F1 | 	add	arg01, #4
31d08     49 A7 62 FC | 	wrlong	local01, arg01
31d0c     04 92 06 F1 | 	add	arg01, #4
31d10     49 01 68 FC | 	wrlong	#0, arg01
31d14     32 7B 02 F6 | 	mov	result1, objptr
31d18     00 08 06 FF 
31d1c     00 7A 46 F5 | 	or	result1, ##202375168
31d20     04 92 06 F1 | 	add	arg01, #4
31d24     49 7B 62 FC | 	wrlong	result1, arg01
31d28     32 7B 02 F6 | 	mov	result1, objptr
31d2c     00 10 06 FF 
31d30     00 7A 46 F5 | 	or	result1, ##203423744
31d34     04 92 06 F1 | 	add	arg01, #4
31d38     49 7B 62 FC | 	wrlong	result1, arg01
31d3c     32 7B 02 F6 | 	mov	result1, objptr
31d40     00 18 06 FF 
31d44     00 7A 46 F5 | 	or	result1, ##204472320
31d48     04 92 06 F1 | 	add	arg01, #4
31d4c     49 7B 62 FC | 	wrlong	result1, arg01
31d50     32 7B 02 F6 | 	mov	result1, objptr
31d54     00 20 06 FF 
31d58     00 7A 46 F5 | 	or	result1, ##205520896
31d5c     04 92 06 F1 | 	add	arg01, #4
31d60     49 7B 62 FC | 	wrlong	result1, arg01
31d64     32 7B 02 F6 | 	mov	result1, objptr
31d68     00 28 06 FF 
31d6c     00 7A 46 F5 | 	or	result1, ##206569472
31d70     04 92 06 F1 | 	add	arg01, #4
31d74     49 7B 62 FC | 	wrlong	result1, arg01
31d78     32 7B 02 F6 | 	mov	result1, objptr
31d7c     00 30 06 FF 
31d80     00 7A 46 F5 | 	or	result1, ##207618048
31d84     04 92 06 F1 | 	add	arg01, #4
31d88     49 7B 62 FC | 	wrlong	result1, arg01
31d8c     32 7B 02 F6 | 	mov	result1, objptr
31d90     00 38 06 FF 
31d94     00 7A 46 F5 | 	or	result1, ##208666624
31d98     04 92 06 F1 | 	add	arg01, #4
31d9c     49 7B 62 FC | 	wrlong	result1, arg01
31da0     32 7B 02 F6 | 	mov	result1, objptr
31da4     00 40 06 FF 
31da8     00 7A 46 F5 | 	or	result1, ##209715200
31dac     04 92 06 F1 | 	add	arg01, #4
31db0     49 7B 62 FC | 	wrlong	result1, arg01
31db4     32 7B 02 F6 | 	mov	result1, objptr
31db8     00 48 06 FF 
31dbc     00 7A 46 F5 | 	or	result1, ##210763776
31dc0     04 92 06 F1 | 	add	arg01, #4
31dc4     49 7B 62 FC | 	wrlong	result1, arg01
31dc8     32 7B 02 F6 | 	mov	result1, objptr
31dcc     00 50 06 FF 
31dd0     00 7A 46 F5 | 	or	result1, ##211812352
31dd4     04 92 06 F1 | 	add	arg01, #4
31dd8     49 7B 62 FC | 	wrlong	result1, arg01
31ddc     32 7B 02 F6 | 	mov	result1, objptr
31de0     00 58 06 FF 
31de4     00 7A 46 F5 | 	or	result1, ##212860928
31de8     04 92 06 F1 | 	add	arg01, #4
31dec     49 7B 62 FC | 	wrlong	result1, arg01
31df0     32 7B 02 F6 | 	mov	result1, objptr
31df4     00 60 06 FF 
31df8     00 7A 46 F5 | 	or	result1, ##213909504
31dfc     04 92 06 F1 | 	add	arg01, #4
31e00     49 7B 62 FC | 	wrlong	result1, arg01
31e04     04 92 06 F1 | 	add	arg01, #4
31e08     49 01 68 FC | 	wrlong	#0, arg01
31e0c     04 92 06 F1 | 	add	arg01, #4
31e10     49 01 68 FC | 	wrlong	#0, arg01
31e14     54 92 86 F1 | 	sub	arg01, #84
31e18                 | ' 
31e18                 | '     v->close = &v_close;
31e18                 | '     v->read = &v_read;
31e18                 | '     v->write = &v_write;
31e18                 | '     v->lseek = &v_lseek;
31e18                 | '     v->ioctl = &v_ioctl;
31e18                 | '     v->flush = &v_flush;
31e18                 | '     v->vfs_data = ptr;
31e18                 | '     v->reserved = 0;
31e18                 | ' 
31e18                 | '     v->open = &v_open;
31e18                 | '     v->creat = &v_creat;
31e18                 | '     v->opendir = &v_opendir;
31e18                 | '     v->closedir = &v_closedir;
31e18                 | '     v->readdir = &v_readdir;
31e18                 | '     v->stat = &v_stat;
31e18                 | ' 
31e18                 | '     v->mkdir = &v_mkdir;
31e18                 | '     v->rmdir = &v_rmdir;
31e18                 | ' 
31e18                 | '     v->remove = &v_remove;
31e18                 | '     v->rename = &v_rename;
31e18                 | ' 
31e18                 | '     v->init = &v_init;
31e18                 | '     v->deinit = &v_deinit;
31e18                 | ' 
31e18                 | ' 
31e18                 | '     v->getcf = 0;
31e18                 | '     v->putcf = 0;
31e18                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31e18                 | '     return v;
31e18     49 7B 02 F6 | 	mov	result1, arg01
31e1c     E7 F0 03 F6 | 	mov	ptra, fp
31e20     F2 00 A0 FD | 	call	#popregs_
31e24                 | _fatfs_cc_get_vfs_ret
31e24     2D 00 64 FD | 	ret
31e28                 | 
31e28                 | _fatfs_cc_gettimeofday
31e28     04 CA 05 F6 | 	mov	COUNT_, #4
31e2c     E8 00 A0 FD | 	call	#pushregs_
31e30     49 A7 02 F6 | 	mov	local01, arg01
31e34     24 2A BF FD | 	call	#__system___getus
31e38     3D 93 02 F6 | 	mov	arg01, result1
31e3c     02 00 00 FF 
31e40     08 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
31e44     36 A9 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
31e48     49 7B 02 F6 | 	mov	result1, arg01
31e4c     54 7B 82 F1 | 	sub	result1, local02
31e50     A1 07 00 FF 
31e54     40 7A 16 FD | 	qdiv	result1, ##1000000
31e58     02 00 00 FF 
31e5c     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31e60     18 A8 62 FD | 	getqx	local02
31e64     A1 07 00 FF 
31e68     40 7A 16 FD | 	qdiv	result1, ##1000000
31e6c     00 A8 0E F2 | 	cmp	local02, #0 wz
31e70     19 AA 62 FD | 	getqy	local03
31e74     28 00 90 AD |  if_e	jmp	#LR__5370
31e78     02 00 00 FF 
31e7c     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31e80     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31e84     54 AD 02 F1 | 	add	local04, local02
31e88     36 AD 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31e8c     55 93 82 F1 | 	sub	arg01, local03
31e90     04 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #4
31e94     36 93 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
31e98     02 00 00 FF 
31e9c     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31ea0                 | LR__5370
31ea0     02 00 00 FF 
31ea4     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31ea8     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31eac     02 00 00 FF 
31eb0     04 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
31eb4     53 AD 62 FC | 	wrlong	local04, local01
31eb8     04 A6 06 F1 | 	add	local01, #4
31ebc     53 AB 62 FC | 	wrlong	local03, local01
31ec0                 | '         lastsec += secs;
31ec0                 | '         lastus = now - leftover;
31ec0                 | '     }
31ec0                 | '     tv->tv_sec = lastsec;
31ec0                 | '     tv->tv_usec = leftover;
31ec0                 | '     return 0;
31ec0     00 7A 06 F6 | 	mov	result1, #0
31ec4     E7 F0 03 F6 | 	mov	ptra, fp
31ec8     F2 00 A0 FD | 	call	#popregs_
31ecc                 | _fatfs_cc_gettimeofday_ret
31ecc     2D 00 64 FD | 	ret
31ed0                 | 
31ed0                 | _fatfs_cc__is_leap_year
31ed0     49 7B 52 F6 | 	abs	result1, arg01 wc
31ed4     03 7A 06 F5 | 	and	result1, #3
31ed8     3D 7B 8A F6 | 	negc	result1, result1 wz
31edc     38 00 90 5D |  if_ne	jmp	#LR__5381
31ee0     49 7B 52 F6 | 	abs	result1, arg01 wc
31ee4     64 7A 16 FD | 	qdiv	result1, #100
31ee8     19 7A 62 FD | 	getqy	result1
31eec     3D 7B 8A F6 | 	negc	result1, result1 wz
31ef0     1C 00 90 5D |  if_ne	jmp	#LR__5380
31ef4     49 7B 52 F6 | 	abs	result1, arg01 wc
31ef8     90 7B 16 FD | 	qdiv	result1, #400
31efc                 | '       return (0 == y % 400);
31efc     00 7A 06 F6 | 	mov	result1, #0
31f00     19 80 62 FD | 	getqy	_var01
31f04     40 81 8A F6 | 	negc	_var01, _var01 wz
31f08     01 7A 06 A6 |  if_e	mov	result1, #1
31f0c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31f10                 | LR__5380
31f10                 | '     return 1;
31f10     01 7A 06 F6 | 	mov	result1, #1
31f14     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31f18                 | LR__5381
31f18                 | '   }
31f18                 | '   return 0;
31f18     00 7A 06 F6 | 	mov	result1, #0
31f1c                 | _fatfs_cc__is_leap_year_ret
31f1c     2D 00 64 FD | 	ret
31f20                 | 
31f20                 | _fatfs_cc___tzoffset
31f20     49 81 0A F6 | 	mov	_var01, arg01 wz
31f24     FF FF FF FF 
31f28     4A FF 6B FC | 	wrlong	##-1, arg02
31f2c     01 82 06 F6 | 	mov	_var02, #1
31f30     40 85 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
31f34                 | '                 return 0;
31f34     00 7A 06 A6 |  if_e	mov	result1, #0
31f38     7C 02 90 AD |  if_e	jmp	#LR__5407
31f3c     4A 01 68 FC | 	wrlong	#0, arg02
31f40     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31f44     02 00 00 FF 
31f48     DC 86 06 F1 | 	add	_var04, ##1244
31f4c     D7 26 48 FB | 	callpa	#(@LR__5391-@LR__5390)>>2,fcache_load_ptr_
31f50                 | ' 
31f50                 | '        *hasdst = 0;
31f50                 | ' 
31f50                 | ' 	n = stdname;
31f50                 | '         while (*s && isalpha(*s)) {
31f50                 | LR__5390
31f50     40 85 CA FA | 	rdbyte	_var03, _var01 wz
31f54     44 00 90 AD |  if_e	jmp	#LR__5392
31f58     40 93 C2 FA | 	rdbyte	arg01, _var01
31f5c                 | ' {
31f5c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31f5c     80 92 36 F3 | 	fle	arg01, #128 wc
31f60                 | '     return __ctype[c];
31f60     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31f64     02 00 00 FF 
31f68     0C 7B 06 F1 | 	add	result1, ##1292
31f6c     3D 93 02 F1 | 	add	arg01, result1
31f70     49 7B C2 FA | 	rdbyte	result1, arg01
31f74     0C 7A CE F7 | 	test	result1, #12 wz
31f78     20 00 90 AD |  if_e	jmp	#LR__5392
31f7c     40 89 02 F6 | 	mov	_var05, _var01
31f80     40 8B 02 F6 | 	mov	_var06, _var01
31f84     01 8A 06 F1 | 	add	_var06, #1
31f88     44 8D C2 FA | 	rdbyte	_var07, _var05
31f8c     45 81 02 F6 | 	mov	_var01, _var06
31f90     43 8D 42 FC | 	wrbyte	_var07, _var04
31f94     01 86 06 F1 | 	add	_var04, #1
31f98     B4 FF 9F FD | 	jmp	#LR__5390
31f9c                 | LR__5391
31f9c                 | LR__5392
31f9c     43 01 48 FC | 	wrbyte	#0, _var04
31fa0     00 8E 06 F6 | 	mov	_var08, #0
31fa4     40 85 C2 FA | 	rdbyte	_var03, _var01
31fa8     2D 84 0E F2 | 	cmp	_var03, #45 wz
31fac     01 82 66 A6 |  if_e	neg	_var02, #1
31fb0     01 80 06 A1 |  if_e	add	_var01, #1
31fb4     D7 26 48 FB | 	callpa	#(@LR__5394-@LR__5393)>>2,fcache_load_ptr_
31fb8                 | '                 sgn = -1;
31fb8                 | '                 s++;
31fb8                 | '         }
31fb8                 | '         while (isdigit(*s)) {
31fb8                 | LR__5393
31fb8     40 93 C2 FA | 	rdbyte	arg01, _var01
31fbc                 | ' {
31fbc                 | '   return  (__ctype_get(c) & 0x02 ) ;
31fbc     80 92 36 F3 | 	fle	arg01, #128 wc
31fc0                 | '     return __ctype[c];
31fc0     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31fc4     02 00 00 FF 
31fc8     0C 7B 06 F1 | 	add	result1, ##1292
31fcc     3D 93 02 F1 | 	add	arg01, result1
31fd0     49 7B C2 FA | 	rdbyte	result1, arg01
31fd4     02 7A CE F7 | 	test	result1, #2 wz
31fd8     28 00 90 AD |  if_e	jmp	#LR__5395
31fdc     47 85 02 F6 | 	mov	_var03, _var08
31fe0     02 84 66 F0 | 	shl	_var03, #2
31fe4     47 85 02 F1 | 	add	_var03, _var08
31fe8     01 84 66 F0 | 	shl	_var03, #1
31fec     40 89 C2 FA | 	rdbyte	_var05, _var01
31ff0     30 88 86 F1 | 	sub	_var05, #48
31ff4     44 85 02 F1 | 	add	_var03, _var05
31ff8     42 8F 02 F6 | 	mov	_var08, _var03
31ffc     01 80 06 F1 | 	add	_var01, #1
32000     B4 FF 9F FD | 	jmp	#LR__5393
32004                 | LR__5394
32004                 | LR__5395
32004     07 00 00 FF 
32008     10 8E 06 FD | 	qmul	_var08, ##3600
3200c     40 85 C2 FA | 	rdbyte	_var03, _var01
32010     3A 84 0E F2 | 	cmp	_var03, #58 wz
32014     18 90 62 FD | 	getqx	_var09
32018     6C 00 90 5D |  if_ne	jmp	#LR__5399
3201c     00 8E 06 F6 | 	mov	_var08, #0
32020     01 80 06 F1 | 	add	_var01, #1
32024     D7 26 48 FB | 	callpa	#(@LR__5397-@LR__5396)>>2,fcache_load_ptr_
32028                 | '                 x = 0;
32028                 | '                 s++;
32028                 | '                 while (isdigit(*s)) {
32028                 | LR__5396
32028     40 93 C2 FA | 	rdbyte	arg01, _var01
3202c                 | ' {
3202c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3202c     80 92 36 F3 | 	fle	arg01, #128 wc
32030                 | '     return __ctype[c];
32030     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32034     02 00 00 FF 
32038     0C 7B 06 F1 | 	add	result1, ##1292
3203c     3D 93 02 F1 | 	add	arg01, result1
32040     49 7B C2 FA | 	rdbyte	result1, arg01
32044     02 7A CE F7 | 	test	result1, #2 wz
32048     28 00 90 AD |  if_e	jmp	#LR__5398
3204c     47 85 02 F6 | 	mov	_var03, _var08
32050     02 84 66 F0 | 	shl	_var03, #2
32054     47 85 02 F1 | 	add	_var03, _var08
32058     01 84 66 F0 | 	shl	_var03, #1
3205c     40 89 C2 FA | 	rdbyte	_var05, _var01
32060     30 88 86 F1 | 	sub	_var05, #48
32064     44 85 02 F1 | 	add	_var03, _var05
32068     42 8F 02 F6 | 	mov	_var08, _var03
3206c     01 80 06 F1 | 	add	_var01, #1
32070     B4 FF 9F FD | 	jmp	#LR__5396
32074                 | LR__5397
32074                 | LR__5398
32074     47 8D 02 F6 | 	mov	_var07, _var08
32078     04 8C 66 F0 | 	shl	_var07, #4
3207c     47 8D 82 F1 | 	sub	_var07, _var08
32080     02 8C 66 F0 | 	shl	_var07, #2
32084     46 91 02 F1 | 	add	_var09, _var07
32088                 | LR__5399
32088     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3208c     02 00 00 FF 
32090     E5 86 06 F1 | 	add	_var04, ##1253
32094     40 93 C2 FA | 	rdbyte	arg01, _var01
32098                 | ' {
32098                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32098     80 92 36 F3 | 	fle	arg01, #128 wc
3209c                 | '     return __ctype[c];
3209c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
320a0     02 00 00 FF 
320a4     0C 7B 06 F1 | 	add	result1, ##1292
320a8     3D 93 02 F1 | 	add	arg01, result1
320ac     49 7B C2 FA | 	rdbyte	result1, arg01
320b0     0C 7A CE F7 | 	test	result1, #12 wz
320b4     4C 00 90 AD |  if_e	jmp	#LR__5402
320b8     4A 03 68 FC | 	wrlong	#1, arg02
320bc                 | '                 *hasdst = 1;
320bc                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
320bc                 | LR__5400
320bc     40 85 CA FA | 	rdbyte	_var03, _var01 wz
320c0     40 00 90 AD |  if_e	jmp	#LR__5401
320c4     40 93 C2 FA | 	rdbyte	arg01, _var01
320c8                 | ' {
320c8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
320c8     80 92 36 F3 | 	fle	arg01, #128 wc
320cc                 | '     return __ctype[c];
320cc     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
320d0     02 00 00 FF 
320d4     0C 7B 06 F1 | 	add	result1, ##1292
320d8     3D 93 02 F1 | 	add	arg01, result1
320dc     49 7B C2 FA | 	rdbyte	result1, arg01
320e0     0C 7A CE F7 | 	test	result1, #12 wz
320e4     1C 00 90 AD |  if_e	jmp	#LR__5401
320e8     40 8B 02 F6 | 	mov	_var06, _var01
320ec     01 8A 06 F1 | 	add	_var06, #1
320f0     40 8D C2 FA | 	rdbyte	_var07, _var01
320f4     45 81 02 F6 | 	mov	_var01, _var06
320f8     43 8D 42 FC | 	wrbyte	_var07, _var04
320fc     01 86 06 F1 | 	add	_var04, #1
32100     B8 FF 9F FD | 	jmp	#LR__5400
32104                 | LR__5401
32104                 | LR__5402
32104     43 01 48 FC | 	wrbyte	#0, _var04
32108     02 00 00 FF 
3210c     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32110     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32114     02 00 00 FF 
32118     DC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
3211c     20 00 90 AD |  if_e	jmp	#LR__5403
32120     02 00 00 FF 
32124     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32128     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3212c     08 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #8
32130     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32134     02 00 00 FF 
32138     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
3213c     1C 00 90 FD | 	jmp	#LR__5404
32140                 | LR__5403
32140     02 00 00 FF 
32144     EE 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1262
32148     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3214c     1A 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #26
32150     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32154     02 00 00 FF 
32158     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
3215c                 | LR__5404
3215c     02 00 00 FF 
32160     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32164     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32168     02 00 00 FF 
3216c     E5 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
32170     20 00 90 AD |  if_e	jmp	#LR__5405
32174     02 00 00 FF 
32178     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
3217c     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32180     0D 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #13
32184     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32188     02 00 00 FF 
3218c     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
32190     1C 00 90 FD | 	jmp	#LR__5406
32194                 | LR__5405
32194     02 00 00 FF 
32198     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
3219c     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
321a0     04 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #4
321a4     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
321a8     02 00 00 FF 
321ac     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
321b0                 | LR__5406
321b0     48 83 02 FD | 	qmul	_var02, _var09
321b4                 | ' 		_tzname[1] = stdname;
321b4                 | ' 
321b4                 | '         return sgn * off;
321b4     18 7A 62 FD | 	getqx	result1
321b8                 | LR__5407
321b8                 | _fatfs_cc___tzoffset_ret
321b8     2D 00 64 FD | 	ret
321bc                 | 
321bc                 | _fatfs_cc___indst
321bc     10 92 06 F1 | 	add	arg01, #16
321c0     49 81 02 FB | 	rdlong	_var01, arg01
321c4     10 92 86 F1 | 	sub	arg01, #16
321c8     02 80 0E F2 | 	cmp	_var01, #2 wz
321cc     30 00 90 5D |  if_ne	jmp	#LR__5410
321d0     07 80 06 F6 | 	mov	_var01, #7
321d4     18 92 06 F1 | 	add	arg01, #24
321d8     49 83 02 FB | 	rdlong	_var02, arg01
321dc     41 81 02 F1 | 	add	_var01, _var02
321e0     0C 92 86 F1 | 	sub	arg01, #12
321e4     49 85 02 FB | 	rdlong	_var03, arg01
321e8     42 81 82 F1 | 	sub	_var01, _var03
321ec     00 80 56 F2 | 	cmps	_var01, #0 wc
321f0                 | '                         return 1;
321f0     01 7A 06 C6 |  if_b	mov	result1, #1
321f4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
321f8                 | '                 return 0;
321f8     00 7A 06 F6 | 	mov	result1, #0
321fc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
32200                 | LR__5410
32200     10 92 06 F1 | 	add	arg01, #16
32204     49 81 02 FB | 	rdlong	_var01, arg01
32208     10 92 86 F1 | 	sub	arg01, #16
3220c     0A 80 0E F2 | 	cmp	_var01, #10 wz
32210     28 00 90 5D |  if_ne	jmp	#LR__5411
32214     18 92 06 F1 | 	add	arg01, #24
32218     49 81 02 FB | 	rdlong	_var01, arg01
3221c     0C 92 86 F1 | 	sub	arg01, #12
32220     49 87 02 FB | 	rdlong	_var04, arg01
32224     43 81 82 F1 | 	sub	_var01, _var04
32228     00 80 56 F2 | 	cmps	_var01, #0 wc
3222c                 | '                         return 0;
3222c     00 7A 06 C6 |  if_b	mov	result1, #0
32230     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
32234                 | '                 return 1;
32234     01 7A 06 F6 | 	mov	result1, #1
32238     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3223c                 | LR__5411
3223c                 | '         }
3223c                 | ' 
3223c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
3223c     00 80 06 F6 | 	mov	_var01, #0
32240     10 92 06 F1 | 	add	arg01, #16
32244     49 83 02 FB | 	rdlong	_var02, arg01
32248     10 92 86 F1 | 	sub	arg01, #16
3224c     03 82 56 F2 | 	cmps	_var02, #3 wc
32250     10 00 90 CD |  if_b	jmp	#LR__5412
32254     10 92 06 F1 | 	add	arg01, #16
32258     49 85 02 FB | 	rdlong	_var03, arg01
3225c     0A 84 56 F2 | 	cmps	_var03, #10 wc
32260     01 80 06 C6 |  if_b	mov	_var01, #1
32264                 | LR__5412
32264     40 7B 02 F6 | 	mov	result1, _var01
32268                 | _fatfs_cc___indst_ret
32268     2D 00 64 FD | 	ret
3226c                 | 
3226c                 | _fatfs_cc_disk_deinitialize
3226c     03 CA 05 F6 | 	mov	COUNT_, #3
32270     E8 00 A0 FD | 	call	#pushregs_
32274     01 00 00 FF 
32278     10 64 06 F1 | 	add	objptr, ##528
3227c     32 93 0A FB | 	rdlong	arg01, objptr wz
32280     01 00 00 FF 
32284     10 64 86 F1 | 	sub	objptr, ##528
32288                 | ' 
32288                 | '         return RES_NOTRDY;
32288     03 7A 06 A6 |  if_e	mov	result1, #3
3228c     4C 00 90 AD |  if_e	jmp	#LR__5420
32290     01 00 00 FF 
32294     10 64 06 F1 | 	add	objptr, ##528
32298     32 93 02 FB | 	rdlong	arg01, objptr
3229c     49 A7 02 F6 | 	mov	local01, arg01
322a0     24 A6 06 F1 | 	add	local01, #36
322a4     53 A7 02 FB | 	rdlong	local01, local01
322a8     53 A9 02 F6 | 	mov	local02, local01
322ac     13 A6 46 F7 | 	zerox	local01, #19
322b0     14 A8 46 F0 | 	shr	local02, #20
322b4     02 A8 66 F0 | 	shl	local02, #2
322b8     2D A9 02 F1 | 	add	local02, __methods__
322bc     54 A9 02 FB | 	rdlong	local02, local02
322c0     01 00 00 FF 
322c4     10 64 86 F1 | 	sub	objptr, ##528
322c8     32 AB 02 F6 | 	mov	local03, objptr
322cc     53 65 02 F6 | 	mov	objptr, local01
322d0     2D A8 62 FD | 	call	local02
322d4     55 65 02 F6 | 	mov	objptr, local03
322d8                 | '     }
322d8                 | '     fh->close(fh);
322d8                 | '     return RES_OK;
322d8     00 7A 06 F6 | 	mov	result1, #0
322dc                 | LR__5420
322dc     E7 F0 03 F6 | 	mov	ptra, fp
322e0     F2 00 A0 FD | 	call	#popregs_
322e4                 | _fatfs_cc_disk_deinitialize_ret
322e4     2D 00 64 FD | 	ret
322e8                 | 
322e8                 | ' 	
322e8                 | ' 	FUNCTION pfunc(c as integer) as integer
322e8                 | __system____strs_cl_pfunc_
322e8                 | ' 		if (i < 16) then
322e8     04 64 06 F1 | 	add	objptr, #4
322ec     32 7B 02 FB | 	rdlong	result1, objptr
322f0     04 64 86 F1 | 	sub	objptr, #4
322f4     10 7A 56 F2 | 	cmps	result1, #16 wc
322f8     2C 00 90 3D |  if_ae	jmp	#LR__5430
322fc     32 7B 02 FB | 	rdlong	result1, objptr
32300     04 64 06 F1 | 	add	objptr, #4
32304     32 81 02 FB | 	rdlong	_var01, objptr
32308     3D 81 02 F1 | 	add	_var01, result1
3230c     40 93 42 FC | 	wrbyte	arg01, _var01
32310     32 7B 02 FB | 	rdlong	result1, objptr
32314     01 7A 06 F1 | 	add	result1, #1
32318     32 7B 62 FC | 	wrlong	result1, objptr
3231c     04 64 86 F1 | 	sub	objptr, #4
32320                 | ' 			p(i) = c
32320                 | ' 			i = i+1
32320                 | ' 			return 1
32320     01 7A 06 F6 | 	mov	result1, #1
32324     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
32328                 | LR__5430
32328                 | ' 			return -1
32328     01 7A 66 F6 | 	neg	result1, #1
3232c                 | __system____strs_cl_pfunc__ret
3232c     2D 00 64 FD | 	ret
32330                 | 
32330                 | __system___struct__s_vfs_file_t_putchar_
32330     04 CA 05 F6 | 	mov	COUNT_, #4
32334     E8 00 A0 FD | 	call	#pushregs_
32338     1C 64 06 F1 | 	add	objptr, #28
3233c     32 A7 0A FB | 	rdlong	local01, objptr wz
32340     1C 64 86 F1 | 	sub	objptr, #28
32344     00 7A 06 A6 |  if_e	mov	result1, #0
32348     48 00 90 AD |  if_e	jmp	#LR__5440
3234c     1C 64 06 F1 | 	add	objptr, #28
32350     32 A9 02 FB | 	rdlong	local02, objptr
32354     54 AB 02 F6 | 	mov	local03, local02
32358     1C 64 86 F1 | 	sub	objptr, #28
3235c     13 AA 46 F7 | 	zerox	local03, #19
32360     14 A8 46 F0 | 	shr	local02, #20
32364     02 A8 66 F0 | 	shl	local02, #2
32368     2D A9 02 F1 | 	add	local02, __methods__
3236c     54 A9 02 FB | 	rdlong	local02, local02
32370     32 95 02 F6 | 	mov	arg02, objptr
32374     32 AD 02 F6 | 	mov	local04, objptr
32378     55 65 02 F6 | 	mov	objptr, local03
3237c     2D A8 62 FD | 	call	local02
32380     56 65 02 F6 | 	mov	objptr, local04
32384                 | '     return (i < 0) ? 0 : 1;
32384     00 7A 56 F2 | 	cmps	result1, #0 wc
32388     00 A6 06 C6 |  if_b	mov	local01, #0
3238c     01 A6 06 36 |  if_ae	mov	local01, #1
32390     53 7B 02 F6 | 	mov	result1, local01
32394                 | LR__5440
32394     E7 F0 03 F6 | 	mov	ptra, fp
32398     F2 00 A0 FD | 	call	#popregs_
3239c                 | __system___struct__s_vfs_file_t_putchar__ret
3239c     2D 00 64 FD | 	ret
323a0                 | 
323a0                 | __system___struct__s_vfs_file_t_getchar_
323a0     03 CA 05 F6 | 	mov	COUNT_, #3
323a4     E8 00 A0 FD | 	call	#pushregs_
323a8     20 64 06 F1 | 	add	objptr, #32
323ac     32 93 0A FB | 	rdlong	arg01, objptr wz
323b0     20 64 86 F1 | 	sub	objptr, #32
323b4     01 7A 66 A6 |  if_e	neg	result1, #1
323b8     38 00 90 AD |  if_e	jmp	#LR__5450
323bc                 | '     return getcf(__this);
323bc     20 64 06 F1 | 	add	objptr, #32
323c0     32 A7 02 FB | 	rdlong	local01, objptr
323c4     53 A9 02 F6 | 	mov	local02, local01
323c8     20 64 86 F1 | 	sub	objptr, #32
323cc     13 A8 46 F7 | 	zerox	local02, #19
323d0     14 A6 46 F0 | 	shr	local01, #20
323d4     02 A6 66 F0 | 	shl	local01, #2
323d8     2D A7 02 F1 | 	add	local01, __methods__
323dc     53 A7 02 FB | 	rdlong	local01, local01
323e0     32 93 02 F6 | 	mov	arg01, objptr
323e4     32 AB 02 F6 | 	mov	local03, objptr
323e8     54 65 02 F6 | 	mov	objptr, local02
323ec     2D A6 62 FD | 	call	local01
323f0     55 65 02 F6 | 	mov	objptr, local03
323f4                 | LR__5450
323f4     E7 F0 03 F6 | 	mov	ptra, fp
323f8     F2 00 A0 FD | 	call	#popregs_
323fc                 | __system___struct__s_vfs_file_t_getchar__ret
323fc     2D 00 64 FD | 	ret
32400                 | 
32400                 | __system___struct___bas_wrap_sender_tx_
32400     03 CA 05 F6 | 	mov	COUNT_, #3
32404     E8 00 A0 FD | 	call	#pushregs_
32408     32 A7 02 FB | 	rdlong	local01, objptr
3240c     53 A9 02 F6 | 	mov	local02, local01
32410     13 A6 46 F7 | 	zerox	local01, #19
32414     14 A8 46 F0 | 	shr	local02, #20
32418     02 A8 66 F0 | 	shl	local02, #2
3241c     2D A9 02 F1 | 	add	local02, __methods__
32420     54 A9 02 FB | 	rdlong	local02, local02
32424     32 AB 02 F6 | 	mov	local03, objptr
32428     53 65 02 F6 | 	mov	objptr, local01
3242c     2D A8 62 FD | 	call	local02
32430     55 65 02 F6 | 	mov	objptr, local03
32434     01 7A 06 F6 | 	mov	result1, #1
32438     E7 F0 03 F6 | 	mov	ptra, fp
3243c     F2 00 A0 FD | 	call	#popregs_
32440                 | __system___struct___bas_wrap_sender_tx__ret
32440     2D 00 64 FD | 	ret
32444                 | 
32444                 | __system___struct___bas_wrap_sender_rx_
32444     03 CA 05 F6 | 	mov	COUNT_, #3
32448     E8 00 A0 FD | 	call	#pushregs_
3244c     04 64 06 F1 | 	add	objptr, #4
32450     32 A7 02 FB | 	rdlong	local01, objptr
32454     53 A9 02 F6 | 	mov	local02, local01
32458     04 64 86 F1 | 	sub	objptr, #4
3245c     13 A8 46 F7 | 	zerox	local02, #19
32460     14 A6 46 F0 | 	shr	local01, #20
32464     02 A6 66 F0 | 	shl	local01, #2
32468     2D A7 02 F1 | 	add	local01, __methods__
3246c     53 A7 02 FB | 	rdlong	local01, local01
32470     32 AB 02 F6 | 	mov	local03, objptr
32474     54 65 02 F6 | 	mov	objptr, local02
32478     2D A6 62 FD | 	call	local01
3247c     55 65 02 F6 | 	mov	objptr, local03
32480     E7 F0 03 F6 | 	mov	ptra, fp
32484     F2 00 A0 FD | 	call	#popregs_
32488                 | __system___struct___bas_wrap_sender_rx__ret
32488     2D 00 64 FD | 	ret
3248c                 | 
3248c                 | __system___struct___bas_wrap_sender_close_
3248c     03 CA 05 F6 | 	mov	COUNT_, #3
32490     E8 00 A0 FD | 	call	#pushregs_
32494     08 64 06 F1 | 	add	objptr, #8
32498     32 A7 02 FB | 	rdlong	local01, objptr
3249c     53 A9 02 F6 | 	mov	local02, local01
324a0     08 64 86 F1 | 	sub	objptr, #8
324a4     13 A8 46 F7 | 	zerox	local02, #19
324a8     14 A6 46 F0 | 	shr	local01, #20
324ac     02 A6 66 F0 | 	shl	local01, #2
324b0     2D A7 02 F1 | 	add	local01, __methods__
324b4     53 A7 02 FB | 	rdlong	local01, local01
324b8     32 AB 02 F6 | 	mov	local03, objptr
324bc     54 65 02 F6 | 	mov	objptr, local02
324c0     2D A6 62 FD | 	call	local01
324c4     55 65 02 F6 | 	mov	objptr, local03
324c8     E7 F0 03 F6 | 	mov	ptra, fp
324cc     F2 00 A0 FD | 	call	#popregs_
324d0                 | __system___struct___bas_wrap_sender_close__ret
324d0     2D 00 64 FD | 	ret
324d4                 | 
324d4                 | LR__5460
324d4     2F          | 	byte	"/"
324d5     00          | 	byte	0
324d6                 | LR__5461
324d6     69 6E 66    | 	byte	"inf"
324d9     00          | 	byte	0
324da                 | LR__5462
324da     6E 61 6E    | 	byte	"nan"
324dd     00          | 	byte	0
324de                 | LR__5463
324de                 | 	byte	
324de     00          | 	byte	0
324df                 | LR__5464
324df                 | 	byte	
324df     00          | 	byte	0
324e0                 | LR__5465
324e0                 | 	byte	
324e0     00          | 	byte	0
324e1                 | LR__5466
324e1                 | 	byte	
324e1     00          | 	byte	0
324e2                 | LR__5467
324e2                 | 	byte	
324e2     00          | 	byte	0
324e3                 | LR__5468
324e3                 | 	byte	
324e3     00          | 	byte	0
324e4                 | LR__5469
324e4                 | 	byte	
324e4     00          | 	byte	0
324e5                 | LR__5470
324e5                 | 	byte	
324e5     00          | 	byte	0
324e6                 | LR__5471
324e6     00          | 	byte	0
324e7     00          | 	byte	0
324e8                 | LR__5472
324e8     00          | 	byte	0
324e9     00          | 	byte	0
324ea                 | LR__5473
324ea     00          | 	byte	0
324eb     00          | 	byte	0
324ec                 | LR__5474
324ec     20 21 21 21 
324f0     20 63 6F 72 
324f4     72 75 70 74 
324f8     65 64 20 68 
324fc     65 61 70 3F 
32500     3F 3F 20 21 
32504     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
32507     00          | 	byte	0
32508                 | LR__5475
32508     20 21 21 21 
3250c     20 6F 75 74 
32510     20 6F 66 20 
32514     68 65 61 70 
32518     20 6D 65 6D 
3251c     6F 72 79 20 
32520     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
32524     00          | 	byte	0
32525                 | LR__5476
32525     20 21 21 21 
32529     20 63 6F 72 
3252d     72 75 70 74 
32531     65 64 20 68 
32535     65 61 70 20 
32539     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
3253d     00          | 	byte	0
3253e                 | LR__5477
3253e     00          | 	byte	0
3253f     00          | 	byte	0
32540                 | LR__5478
32540     2E          | 	byte	"."
32541     00          | 	byte	0
32542                 | LR__5479
32542     00          | 	byte	0
32543     00          | 	byte	0
32544                 | LR__5480
32544     00          | 	byte	0
32545     00          | 	byte	0
32546                 | LR__5481
32546     00          | 	byte	0
32547     00          | 	byte	0
32548                 | LR__5482
32548     54 5A       | 	byte	"TZ"
3254a     00          | 	byte	0
3254b                 | LR__5483
3254b     2A 3A 3C 3E 
3254f     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
32553     00          | 	byte	0
32554                 | LR__5484
32554     2B 2C 3B 3D 
32558     5B 5D       | 	byte	"+,;=[]"
3255a     00          | 	byte	0
3255b                 | LR__5485
3255b     46 41 54 33 
3255f     32 20 20 20 | 	byte	"FAT32   "
32563     00          | 	byte	0
32564                 | LR__5486
32564     00          | 	byte	0
32565     00          | 	byte	0
32566                 | LR__5487
32566                 | 	byte	
32566     00          | 	byte	0
32567                 | LR__5488
32567                 | 	byte	
32567     00          | 	byte	0
32568                 | LR__5489
32568                 | 	byte	
32568     00          | 	byte	0
32569                 | LR__5490
32569                 | 	byte	
32569     00          | 	byte	0
3256a                 | LR__5491
3256a     22          | 	byte	34
3256b     00          | 	byte	0
3256c                 | LR__5492
3256c     22          | 	byte	34
3256d     00          | 	byte	0
3256e                 | LR__5493
3256e     3A          | 	byte	":"
3256f     00          | 	byte	0
32570                 | LR__5494
32570                 | 	byte	
32570     00          | 	byte	0
32571                 | LR__5495
32571                 | 	byte	
32571     00          | 	byte	0
32572                 | LR__5496
32572                 | 	byte	
32572     00          | 	byte	0
32573                 | LR__5497
32573                 | 	byte	
32573     00          | 	byte	0
32574                 | LR__5498
32574                 | 	byte	
32574     00          | 	byte	0
32575                 | LR__5499
32575                 | 	byte	
32575     00          | 	byte	0
32576                 | LR__5500
32576                 | 	byte	
32576     00          | 	byte	0
32577                 | LR__5501
32577     30          | 	byte	"0"
32578     00          | 	byte	0
32579                 | LR__5502
32579     22          | 	byte	34
3257a     00          | 	byte	0
3257b                 | LR__5503
3257b     22          | 	byte	34
3257c     00          | 	byte	0
3257d                 | LR__5504
3257d     22          | 	byte	34
3257e     00          | 	byte	0
3257f                 | LR__5505
3257f     22          | 	byte	34
32580     00          | 	byte	0
32581                 | LR__5506
32581     22          | 	byte	34
32582     00          | 	byte	0
32583                 | LR__5507
32583     3E          | 	byte	">"
32584     00          | 	byte	0
32585                 | LR__5508
32585     3C          | 	byte	"<"
32586     00          | 	byte	0
32587                 | LR__5509
32587     2B          | 	byte	"+"
32588     00          | 	byte	0
32589                 | LR__5510
32589     2D          | 	byte	"-"
3258a     00          | 	byte	0
3258b                 | LR__5511
3258b     2A          | 	byte	"*"
3258c     00          | 	byte	0
3258d                 | LR__5512
3258d     2F          | 	byte	"/"
3258e     00          | 	byte	0
3258f                 | LR__5513
3258f     5E          | 	byte	"^"
32590     00          | 	byte	0
32591                 | LR__5514
32591     3D          | 	byte	"="
32592     00          | 	byte	0
32593                 | LR__5515
32593     2B          | 	byte	"+"
32594     00          | 	byte	0
32595                 | LR__5516
32595     2B          | 	byte	"+"
32596     00          | 	byte	0
32597                 | LR__5517
32597     2D          | 	byte	"-"
32598     00          | 	byte	0
32599                 | LR__5518
32599     2D          | 	byte	"-"
3259a     00          | 	byte	0
3259b                 | LR__5519
3259b     3C          | 	byte	"<"
3259c     00          | 	byte	0
3259d                 | LR__5520
3259d     3E          | 	byte	">"
3259e     00          | 	byte	0
3259f                 | LR__5521
3259f     22          | 	byte	34
325a0     00          | 	byte	0
325a1                 | LR__5522
325a1     22          | 	byte	34
325a2     00          | 	byte	0
325a3                 | LR__5523
325a3     65 6C 73 65 | 	byte	"else"
325a7     00          | 	byte	0
325a8                 | LR__5524
325a8     74 68 65 6E | 	byte	"then"
325ac     00          | 	byte	0
325ad                 | LR__5525
325ad     3F          | 	byte	"?"
325ae     00          | 	byte	0
325af                 | LR__5526
325af     3F          | 	byte	"?"
325b0     00          | 	byte	0
325b1                 | LR__5527
325b1     2E          | 	byte	"."
325b2     00          | 	byte	0
325b3                 | LR__5528
325b3     6D 6F 75 73 
325b7     65          | 	byte	"mouse"
325b8     00          | 	byte	0
325b9                 | LR__5529
325b9     63 75 72 73 
325bd     6F 72       | 	byte	"cursor"
325bf     00          | 	byte	0
325c0                 | LR__5530
325c0     63 6C 69 63 
325c4     6B          | 	byte	"click"
325c5     00          | 	byte	0
325c6                 | LR__5531
325c6     6F 6E       | 	byte	"on"
325c8     00          | 	byte	0
325c9                 | LR__5532
325c9     31          | 	byte	"1"
325ca     00          | 	byte	0
325cb                 | LR__5533
325cb     6F 66 66    | 	byte	"off"
325ce     00          | 	byte	0
325cf                 | LR__5534
325cf     30          | 	byte	"0"
325d0     00          | 	byte	0
325d1                 | LR__5535
325d1     6D 6F 64 65 | 	byte	"mode"
325d5     00          | 	byte	0
325d6                 | LR__5536
325d6     6D 2E       | 	byte	"m."
325d8     00          | 	byte	0
325d9                 | LR__5537
325d9     61 74 61 72 
325dd     69          | 	byte	"atari"
325de     00          | 	byte	0
325df                 | LR__5538
325df     30          | 	byte	"0"
325e0     00          | 	byte	0
325e1                 | LR__5539
325e1     70 63 5F 61 
325e5     6D 62 65 72 | 	byte	"pc_amber"
325e9     00          | 	byte	0
325ea                 | LR__5540
325ea     31          | 	byte	"1"
325eb     00          | 	byte	0
325ec                 | LR__5541
325ec     70 63 5F 67 
325f0     72 65 65 6E | 	byte	"pc_green"
325f4     00          | 	byte	0
325f5                 | LR__5542
325f5     32          | 	byte	"2"
325f6     00          | 	byte	0
325f7                 | LR__5543
325f7     70 63 5F 77 
325fb     68 69 74 65 | 	byte	"pc_white"
325ff     00          | 	byte	0
32600                 | LR__5544
32600     33          | 	byte	"3"
32601     00          | 	byte	0
32602                 | LR__5545
32602     73 74       | 	byte	"st"
32604     00          | 	byte	0
32605                 | LR__5546
32605     34          | 	byte	"4"
32606     00          | 	byte	0
32607                 | LR__5547
32607     61 6D 69 67 
3260b     61          | 	byte	"amiga"
3260c     00          | 	byte	0
3260d                 | LR__5548
3260d     35          | 	byte	"5"
3260e     00          | 	byte	0
3260f                 | LR__5549
3260f                 | 	byte	
3260f     00          | 	byte	0
32610                 | LR__5550
32610     6C 6F 61 64 | 	byte	"load"
32614     00          | 	byte	0
32615                 | LR__5551
32615     73 61 76 65 | 	byte	"save"
32619     00          | 	byte	0
3261a                 | LR__5552
3261a     62 72 75 6E | 	byte	"brun"
3261e     00          | 	byte	0
3261f                 | LR__5553
3261f     72 75 6E    | 	byte	"run"
32622     00          | 	byte	0
32623                 | LR__5554
32623     6C 6F 2E    | 	byte	"lo."
32626     00          | 	byte	0
32627                 | LR__5555
32627     73 2E       | 	byte	"s."
32629     00          | 	byte	0
3262a                 | LR__5556
3262a     62 72 2E    | 	byte	"br."
3262d     00          | 	byte	0
3262e                 | LR__5557
3262e     65 6E 74 65 
32632     72          | 	byte	"enter"
32633     00          | 	byte	0
32634                 | LR__5558
32634     65 2E       | 	byte	"e."
32636     00          | 	byte	0
32637                 | LR__5559
32637     24          | 	byte	"$"
32638     00          | 	byte	0
32639                 | LR__5560
32639     64 65 6C 65 
3263d     74 65       | 	byte	"delete"
3263f     00          | 	byte	0
32640                 | LR__5561
32640     6D 6B 64 69 
32644     72          | 	byte	"mkdir"
32645     00          | 	byte	0
32646                 | LR__5562
32646     24          | 	byte	"$"
32647     00          | 	byte	0
32648                 | LR__5563
32648     63 6F 70 79 | 	byte	"copy"
3264c     00          | 	byte	0
3264d                 | LR__5564
3264d     24          | 	byte	"$"
3264e     00          | 	byte	0
3264f                 | LR__5565
3264f     63 6F 70 79 | 	byte	"copy"
32653     00          | 	byte	0
32654                 | LR__5566
32654     24          | 	byte	"$"
32655     00          | 	byte	0
32656                 | LR__5567
32656     63 64       | 	byte	"cd"
32658     00          | 	byte	0
32659                 | LR__5568
32659     63 64 2E    | 	byte	"cd."
3265c     00          | 	byte	0
3265d                 | LR__5569
3265d     2E          | 	byte	"."
3265e     00          | 	byte	0
3265f                 | LR__5570
3265f     2E 2E       | 	byte	".."
32661     00          | 	byte	0
32662                 | LR__5571
32662     63 64       | 	byte	"cd"
32664     00          | 	byte	0
32665                 | LR__5572
32665     2F          | 	byte	"/"
32666     00          | 	byte	0
32667                 | LR__5573
32667                 | 	byte	
32667     00          | 	byte	0
32668                 | LR__5574
32668                 | 	byte	
32668     00          | 	byte	0
32669                 | LR__5575
32669                 | 	byte	
32669     00          | 	byte	0
3266a                 | LR__5576
3266a                 | 	byte	
3266a     00          | 	byte	0
3266b                 | LR__5577
3266b                 | 	byte	
3266b     00          | 	byte	0
3266c                 | LR__5578
3266c     52 65 61 64 
32670     79          | 	byte	"Ready"
32671     00          | 	byte	0
32672                 | LR__5579
32672     2B          | 	byte	"+"
32673     00          | 	byte	0
32674                 | LR__5580
32674     2D          | 	byte	"-"
32675     00          | 	byte	0
32676                 | LR__5581
32676     6F 72       | 	byte	"or"
32678     00          | 	byte	0
32679                 | LR__5582
32679     78 6F 72    | 	byte	"xor"
3267c     00          | 	byte	0
3267d                 | LR__5583
3267d     2A          | 	byte	"*"
3267e     00          | 	byte	0
3267f                 | LR__5584
3267f     2F          | 	byte	"/"
32680     00          | 	byte	0
32681                 | LR__5585
32681     61 6E 64    | 	byte	"and"
32684     00          | 	byte	0
32685                 | LR__5586
32685     64 69 76    | 	byte	"div"
32688     00          | 	byte	0
32689                 | LR__5587
32689     6D 6F 64    | 	byte	"mod"
3268c     00          | 	byte	0
3268d                 | LR__5588
3268d     73 68 6C    | 	byte	"shl"
32690     00          | 	byte	0
32691                 | LR__5589
32691     73 68 72    | 	byte	"shr"
32694     00          | 	byte	0
32695                 | LR__5590
32695     5E          | 	byte	"^"
32696     00          | 	byte	0
32697                 | LR__5591
32697     6E 6F 74    | 	byte	"not"
3269a     00          | 	byte	0
3269b                 | LR__5592
3269b     40          | 	byte	"@"
3269c     00          | 	byte	0
3269d                 | LR__5593
3269d     3D          | 	byte	"="
3269e     00          | 	byte	0
3269f                 | LR__5594
3269f     3E 3D       | 	byte	">="
326a1     00          | 	byte	0
326a2                 | LR__5595
326a2     3C 3D       | 	byte	"<="
326a4     00          | 	byte	0
326a5                 | LR__5596
326a5     3C          | 	byte	"<"
326a6     00          | 	byte	0
326a7                 | LR__5597
326a7     3E          | 	byte	">"
326a8     00          | 	byte	0
326a9                 | LR__5598
326a9     3C 3E       | 	byte	"<>"
326ab     00          | 	byte	0
326ac                 | LR__5599
326ac     2B 2B       | 	byte	"++"
326ae     00          | 	byte	0
326af                 | LR__5600
326af     2D 2D       | 	byte	"--"
326b1     00          | 	byte	0
326b2                 | LR__5601
326b2     23          | 	byte	"#"
326b3     00          | 	byte	0
326b4                 | LR__5602
326b4     30          | 	byte	"0"
326b5     00          | 	byte	0
326b6                 | LR__5603
326b6     39          | 	byte	"9"
326b7     00          | 	byte	0
326b8                 | LR__5604
326b8     23 72 65 61 
326bc     64          | 	byte	"#read"
326bd     00          | 	byte	0
326be                 | LR__5605
326be     23 77 72 69 
326c2     74 65       | 	byte	"#write"
326c4     00          | 	byte	0
326c5                 | LR__5606
326c5     23 61 70 70 
326c9     65 6E 64    | 	byte	"#append"
326cc     00          | 	byte	0
326cd                 | LR__5607
326cd     23          | 	byte	"#"
326ce     00          | 	byte	0
326cf                 | LR__5608
326cf     23          | 	byte	"#"
326d0     00          | 	byte	0
326d1                 | LR__5609
326d1     2D          | 	byte	"-"
326d2     00          | 	byte	0
326d3                 | LR__5610
326d3     30          | 	byte	"0"
326d4     00          | 	byte	0
326d5                 | LR__5611
326d5     63          | 	byte	"c"
326d6     00          | 	byte	0
326d7                 | LR__5612
326d7     63 23       | 	byte	"c#"
326d9     00          | 	byte	0
326da                 | LR__5613
326da     64          | 	byte	"d"
326db     00          | 	byte	0
326dc                 | LR__5614
326dc     64 23       | 	byte	"d#"
326de     00          | 	byte	0
326df                 | LR__5615
326df     65          | 	byte	"e"
326e0     00          | 	byte	0
326e1                 | LR__5616
326e1     66          | 	byte	"f"
326e2     00          | 	byte	0
326e3                 | LR__5617
326e3     66 23       | 	byte	"f#"
326e5     00          | 	byte	0
326e6                 | LR__5618
326e6     67          | 	byte	"g"
326e7     00          | 	byte	0
326e8                 | LR__5619
326e8     67 23       | 	byte	"g#"
326ea     00          | 	byte	0
326eb                 | LR__5620
326eb     61          | 	byte	"a"
326ec     00          | 	byte	0
326ed                 | LR__5621
326ed     61 23       | 	byte	"a#"
326ef     00          | 	byte	0
326f0                 | LR__5622
326f0     68          | 	byte	"h"
326f1     00          | 	byte	0
326f2                 | LR__5623
326f2     62          | 	byte	"b"
326f3     00          | 	byte	0
326f4                 | LR__5624
326f4     2B          | 	byte	"+"
326f5     00          | 	byte	0
326f6                 | LR__5625
326f6     2D          | 	byte	"-"
326f7     00          | 	byte	0
326f8                 | LR__5626
326f8     3D          | 	byte	"="
326f9     00          | 	byte	0
326fa                 | LR__5627
326fa     2C          | 	byte	","
326fb     00          | 	byte	0
326fc                 | LR__5628
326fc     2A          | 	byte	"*"
326fd     00          | 	byte	0
326fe                 | LR__5629
326fe     2F          | 	byte	"/"
326ff     00          | 	byte	0
32700                 | LR__5630
32700     3B          | 	byte	";"
32701     00          | 	byte	0
32702                 | LR__5631
32702     22          | 	byte	34
32703     00          | 	byte	0
32704                 | LR__5632
32704     5E          | 	byte	"^"
32705     00          | 	byte	0
32706                 | LR__5633
32706     29          | 	byte	")"
32707     00          | 	byte	0
32708                 | LR__5634
32708     28          | 	byte	"("
32709     00          | 	byte	0
3270a                 | LR__5635
3270a     3A          | 	byte	":"
3270b     00          | 	byte	0
3270c                 | LR__5636
3270c     20          | 	byte	" "
3270d     00          | 	byte	0
3270e                 | LR__5637
3270e     3E          | 	byte	">"
3270f     00          | 	byte	0
32710                 | LR__5638
32710     3C          | 	byte	"<"
32711     00          | 	byte	0
32712                 | LR__5639
32712     3D          | 	byte	"="
32713     00          | 	byte	0
32714                 | LR__5640
32714     62 65 65 70 | 	byte	"beep"
32718     00          | 	byte	0
32719                 | LR__5641
32719     62 2E       | 	byte	"b."
3271b     00          | 	byte	0
3271c                 | LR__5642
3271c     62 6C 69 74 | 	byte	"blit"
32720     00          | 	byte	0
32721                 | LR__5643
32721     62 6F 78    | 	byte	"box"
32724     00          | 	byte	0
32725                 | LR__5644
32725     62 72 75 6E | 	byte	"brun"
32729     00          | 	byte	0
3272a                 | LR__5645
3272a     62 72 2E    | 	byte	"br."
3272d     00          | 	byte	0
3272e                 | LR__5646
3272e     63 64       | 	byte	"cd"
32730     00          | 	byte	0
32731                 | LR__5647
32731     63 68 61 6E 
32735     67 65 66 72 
32739     65 71       | 	byte	"changefreq"
3273b     00          | 	byte	0
3273c                 | LR__5648
3273c     63 66 2E    | 	byte	"cf."
3273f     00          | 	byte	0
32740                 | LR__5649
32740     63 68 61 6E 
32744     67 65 70 61 
32748     6E          | 	byte	"changepan"
32749     00          | 	byte	0
3274a                 | LR__5650
3274a     63 70 2E    | 	byte	"cp."
3274d     00          | 	byte	0
3274e                 | LR__5651
3274e     63 68 61 6E 
32752     67 65 76 6F 
32756     6C          | 	byte	"changevol"
32757     00          | 	byte	0
32758                 | LR__5652
32758     63 76 2E    | 	byte	"cv."
3275b     00          | 	byte	0
3275c                 | LR__5653
3275c     63 68 61 6E 
32760     67 65 77 61 
32764     76 65       | 	byte	"changewave"
32766     00          | 	byte	0
32767                 | LR__5654
32767     63 77 2E    | 	byte	"cw."
3276a     00          | 	byte	0
3276b                 | LR__5655
3276b     63 69 72 63 
3276f     6C 65       | 	byte	"circle"
32771     00          | 	byte	0
32772                 | LR__5656
32772     63 69 2E    | 	byte	"ci."
32775     00          | 	byte	0
32776                 | LR__5657
32776     63 6C 69 63 
3277a     6B          | 	byte	"click"
3277b     00          | 	byte	0
3277c                 | LR__5658
3277c     63 6C 6F 73 
32780     65          | 	byte	"close"
32781     00          | 	byte	0
32782                 | LR__5659
32782     63 6C 73    | 	byte	"cls"
32785     00          | 	byte	0
32786                 | LR__5660
32786     63 6F 67 73 
3278a     74 6F 70    | 	byte	"cogstop"
3278d     00          | 	byte	0
3278e                 | LR__5661
3278e     63 6F 6C 6F 
32792     72          | 	byte	"color"
32793     00          | 	byte	0
32794                 | LR__5662
32794     63 2E       | 	byte	"c."
32796     00          | 	byte	0
32797                 | LR__5663
32797     63 6F 70 79 | 	byte	"copy"
3279b     00          | 	byte	0
3279c                 | LR__5664
3279c     63 75 72 73 
327a0     6F 72       | 	byte	"cursor"
327a2     00          | 	byte	0
327a3                 | LR__5665
327a3     64 61 74 61 | 	byte	"data"
327a7     00          | 	byte	0
327a8                 | LR__5666
327a8     64 65 66 63 
327ac     68 61 72    | 	byte	"defchar"
327af     00          | 	byte	0
327b0                 | LR__5667
327b0     64 65 66 73 
327b4     6E 64       | 	byte	"defsnd"
327b6     00          | 	byte	0
327b7                 | LR__5668
327b7     64 65 66 65 
327bb     6E 76       | 	byte	"defenv"
327bd     00          | 	byte	0
327be                 | LR__5669
327be     64 65 66 73 
327c2     70 72 69 74 
327c6     65          | 	byte	"defsprite"
327c7     00          | 	byte	0
327c8                 | LR__5670
327c8     64 73 2E    | 	byte	"ds."
327cb     00          | 	byte	0
327cc                 | LR__5671
327cc     64 65 67    | 	byte	"deg"
327cf     00          | 	byte	0
327d0                 | LR__5672
327d0     64 65 6C 65 
327d4     74 65       | 	byte	"delete"
327d6     00          | 	byte	0
327d7                 | LR__5673
327d7     64 69 6D    | 	byte	"dim"
327da     00          | 	byte	0
327db                 | LR__5674
327db     64 69 72    | 	byte	"dir"
327de     00          | 	byte	0
327df                 | LR__5675
327df     64 70 6F 6B 
327e3     65          | 	byte	"dpoke"
327e4     00          | 	byte	0
327e5                 | LR__5676
327e5     64 72 61 77 | 	byte	"draw"
327e9     00          | 	byte	0
327ea                 | LR__5677
327ea     64 72 61 77 
327ee     74 6F       | 	byte	"drawto"
327f0     00          | 	byte	0
327f1                 | LR__5678
327f1     64 72 2E    | 	byte	"dr."
327f4     00          | 	byte	0
327f5                 | LR__5679
327f5     65 6C 73 65 | 	byte	"else"
327f9     00          | 	byte	0
327fa                 | LR__5680
327fa     65 6E 64    | 	byte	"end"
327fd     00          | 	byte	0
327fe                 | LR__5681
327fe     65 6E 74 65 
32802     72          | 	byte	"enter"
32803     00          | 	byte	0
32804                 | LR__5682
32804     65 2E       | 	byte	"e."
32806     00          | 	byte	0
32807                 | LR__5683
32807     66 63 69 72 
3280b     63 6C 65    | 	byte	"fcircle"
3280e     00          | 	byte	0
3280f                 | LR__5684
3280f     66 63 2E    | 	byte	"fc."
32812     00          | 	byte	0
32813                 | LR__5685
32813     66 69 6C 6C | 	byte	"fill"
32817     00          | 	byte	0
32818                 | LR__5686
32818     66 69 2E    | 	byte	"fi."
3281b     00          | 	byte	0
3281c                 | LR__5687
3281c     66 6F 6E 74 | 	byte	"font"
32820     00          | 	byte	0
32821                 | LR__5688
32821     66 6F 72    | 	byte	"for"
32824     00          | 	byte	0
32825                 | LR__5689
32825     66 2E       | 	byte	"f."
32827     00          | 	byte	0
32828                 | LR__5690
32828     66 72 61 6D 
3282c     65          | 	byte	"frame"
3282d     00          | 	byte	0
3282e                 | LR__5691
3282e     66 72 2E    | 	byte	"fr."
32831     00          | 	byte	0
32832                 | LR__5692
32832     67 65 74    | 	byte	"get"
32835     00          | 	byte	0
32836                 | LR__5693
32836     67 6F 73 75 
3283a     62          | 	byte	"gosub"
3283b     00          | 	byte	0
3283c                 | LR__5694
3283c     67 6F 74 6F | 	byte	"goto"
32840     00          | 	byte	0
32841                 | LR__5695
32841     67 2E       | 	byte	"g."
32843     00          | 	byte	0
32844                 | LR__5696
32844     69 66       | 	byte	"if"
32846     00          | 	byte	0
32847                 | LR__5697
32847     69 6E 6B    | 	byte	"ink"
3284a     00          | 	byte	0
3284b                 | LR__5698
3284b     69 2E       | 	byte	"i."
3284d     00          | 	byte	0
3284e                 | LR__5699
3284e     69 6E 70 75 
32852     74          | 	byte	"input"
32853     00          | 	byte	0
32854                 | LR__5700
32854     6C 69 73 74 | 	byte	"list"
32858     00          | 	byte	0
32859                 | LR__5701
32859     6C 2E       | 	byte	"l."
3285b     00          | 	byte	0
3285c                 | LR__5702
3285c     6C 6F 61 64 | 	byte	"load"
32860     00          | 	byte	0
32861                 | LR__5703
32861     6C 6F 2E    | 	byte	"lo."
32864     00          | 	byte	0
32865                 | LR__5704
32865     6C 70 6F 6B 
32869     65          | 	byte	"lpoke"
3286a     00          | 	byte	0
3286b                 | LR__5705
3286b     6D 6B 64 69 
3286f     72          | 	byte	"mkdir"
32870     00          | 	byte	0
32871                 | LR__5706
32871     6D 6F 64 65 | 	byte	"mode"
32875     00          | 	byte	0
32876                 | LR__5707
32876     6D 2E       | 	byte	"m."
32878     00          | 	byte	0
32879                 | LR__5708
32879     6D 6F 75 73 
3287d     65          | 	byte	"mouse"
3287e     00          | 	byte	0
3287f                 | LR__5709
3287f     6E 65 77    | 	byte	"new"
32882     00          | 	byte	0
32883                 | LR__5710
32883     6E 65 78 74 | 	byte	"next"
32887     00          | 	byte	0
32888                 | LR__5711
32888     6E 2E       | 	byte	"n."
3288a     00          | 	byte	0
3288b                 | LR__5712
3288b     6F 6E       | 	byte	"on"
3288d     00          | 	byte	0
3288e                 | LR__5713
3288e     6F 70 65 6E | 	byte	"open"
32892     00          | 	byte	0
32893                 | LR__5714
32893     70 61 70 65 
32897     72          | 	byte	"paper"
32898     00          | 	byte	0
32899                 | LR__5715
32899     70 61 2E    | 	byte	"pa."
3289c     00          | 	byte	0
3289d                 | LR__5716
3289d     70 69 6E 66 
328a1     6C 6F 61 74 | 	byte	"pinfloat"
328a5     00          | 	byte	0
328a6                 | LR__5717
328a6     70 69 6E 68 
328aa     69          | 	byte	"pinhi"
328ab     00          | 	byte	0
328ac                 | LR__5718
328ac     70 69 6E 6C 
328b0     6F          | 	byte	"pinlo"
328b1     00          | 	byte	0
328b2                 | LR__5719
328b2     70 69 6E 73 
328b6     74 61 72 74 | 	byte	"pinstart"
328ba     00          | 	byte	0
328bb                 | LR__5720
328bb     70 69 6E 74 
328bf     6F 67 67 6C 
328c3     65          | 	byte	"pintoggle"
328c4     00          | 	byte	0
328c5                 | LR__5721
328c5     70 69 6E 77 
328c9     72 69 74 65 | 	byte	"pinwrite"
328cd     00          | 	byte	0
328ce                 | LR__5722
328ce     70 6C 61 79 | 	byte	"play"
328d2     00          | 	byte	0
328d3                 | LR__5723
328d3     70 2E       | 	byte	"p."
328d5     00          | 	byte	0
328d6                 | LR__5724
328d6     70 6C 6F 74 | 	byte	"plot"
328da     00          | 	byte	0
328db                 | LR__5725
328db     70 6C 2E    | 	byte	"pl."
328de     00          | 	byte	0
328df                 | LR__5726
328df     70 6F 6B 65 | 	byte	"poke"
328e3     00          | 	byte	0
328e4                 | LR__5727
328e4     70 6F 70    | 	byte	"pop"
328e7     00          | 	byte	0
328e8                 | LR__5728
328e8     70 6F 73 69 
328ec     74 69 6F 6E | 	byte	"position"
328f0     00          | 	byte	0
328f1                 | LR__5729
328f1     70 6F 73 2E | 	byte	"pos."
328f5     00          | 	byte	0
328f6                 | LR__5730
328f6     70 72 69 6E 
328fa     74          | 	byte	"print"
328fb     00          | 	byte	0
328fc                 | LR__5731
328fc     3F          | 	byte	"?"
328fd     00          | 	byte	0
328fe                 | LR__5732
328fe     70 75 74    | 	byte	"put"
32901     00          | 	byte	0
32902                 | LR__5733
32902     72 61 64    | 	byte	"rad"
32905     00          | 	byte	0
32906                 | LR__5734
32906     72 65 61 64 | 	byte	"read"
3290a     00          | 	byte	0
3290b                 | LR__5735
3290b     72 65 6C 65 
3290f     61 73 65    | 	byte	"release"
32912     00          | 	byte	0
32913                 | LR__5736
32913     72 65 6D    | 	byte	"rem"
32916     00          | 	byte	0
32917                 | LR__5737
32917     27          | 	byte	"'"
32918     00          | 	byte	0
32919                 | LR__5738
32919     72 65 73 74 
3291d     6F 72 65    | 	byte	"restore"
32920     00          | 	byte	0
32921                 | LR__5739
32921     72 65 73 74 
32925     6F 72 65 70 
32929     61 6C 65 74 
3292d     74 65       | 	byte	"restorepalette"
3292f     00          | 	byte	0
32930                 | LR__5740
32930     72 70 2E    | 	byte	"rp."
32933     00          | 	byte	0
32934                 | LR__5741
32934     72 65 74 75 
32938     72 6E       | 	byte	"return"
3293a     00          | 	byte	0
3293b                 | LR__5742
3293b     72 75 6E    | 	byte	"run"
3293e     00          | 	byte	0
3293f                 | LR__5743
3293f     72 2E       | 	byte	"r."
32941     00          | 	byte	0
32942                 | LR__5744
32942     73 61 76 65 | 	byte	"save"
32946     00          | 	byte	0
32947                 | LR__5745
32947     73 2E       | 	byte	"s."
32949     00          | 	byte	0
3294a                 | LR__5746
3294a     73 65 74 63 
3294e     6F 6C 6F 72 | 	byte	"setcolor"
32952     00          | 	byte	0
32953                 | LR__5747
32953     73 63 2E    | 	byte	"sc."
32956     00          | 	byte	0
32957                 | LR__5748
32957     73 65 74 61 
3295b     6D 6F 64 65 | 	byte	"setamode"
3295f     00          | 	byte	0
32960                 | LR__5749
32960     73 61 2E    | 	byte	"sa."
32963     00          | 	byte	0
32964                 | LR__5750
32964     73 65 74 64 
32968     65 6C 61 79 | 	byte	"setdelay"
3296c     00          | 	byte	0
3296d                 | LR__5751
3296d     73 64 2E    | 	byte	"sd."
32970     00          | 	byte	0
32971                 | LR__5752
32971     73 65 74 65 
32975     6E 76       | 	byte	"setenv"
32977     00          | 	byte	0
32978                 | LR__5753
32978     73 65 2E    | 	byte	"se."
3297b     00          | 	byte	0
3297c                 | LR__5754
3297c     73 65 74 6C 
32980     65 6E       | 	byte	"setlen"
32982     00          | 	byte	0
32983                 | LR__5755
32983     73 6C 2E    | 	byte	"sl."
32986     00          | 	byte	0
32987                 | LR__5756
32987     73 65 74 70 
3298b     61 6E       | 	byte	"setpan"
3298d     00          | 	byte	0
3298e                 | LR__5757
3298e     73 70 2E    | 	byte	"sp."
32991     00          | 	byte	0
32992                 | LR__5758
32992     73 65 74 73 
32996     75 73 74 61 
3299a     69 6E       | 	byte	"setsustain"
3299c     00          | 	byte	0
3299d                 | LR__5759
3299d     73 73 2E    | 	byte	"ss."
329a0     00          | 	byte	0
329a1                 | LR__5760
329a1     73 65 74 76 
329a5     6F 6C       | 	byte	"setvol"
329a7     00          | 	byte	0
329a8                 | LR__5761
329a8     73 76 2E    | 	byte	"sv."
329ab     00          | 	byte	0
329ac                 | LR__5762
329ac     73 65 74 77 
329b0     61 76 65    | 	byte	"setwave"
329b3     00          | 	byte	0
329b4                 | LR__5763
329b4     73 77 2E    | 	byte	"sw."
329b7     00          | 	byte	0
329b8                 | LR__5764
329b8     73 65 74 77 
329bc     61 76       | 	byte	"setwav"
329be     00          | 	byte	0
329bf                 | LR__5765
329bf     73 68 75 74 
329c3     75 70       | 	byte	"shutup"
329c5     00          | 	byte	0
329c6                 | LR__5766
329c6     73 68 2E    | 	byte	"sh."
329c9     00          | 	byte	0
329ca                 | LR__5767
329ca     73 6F 75 6E 
329ce     64          | 	byte	"sound"
329cf     00          | 	byte	0
329d0                 | LR__5768
329d0     73 6F 2E    | 	byte	"so."
329d3     00          | 	byte	0
329d4                 | LR__5769
329d4     73 70 72 69 
329d8     74 65       | 	byte	"sprite"
329da     00          | 	byte	0
329db                 | LR__5770
329db     73 70 72 2E | 	byte	"spr."
329df     00          | 	byte	0
329e0                 | LR__5771
329e0     74 68 65 6E | 	byte	"then"
329e4     00          | 	byte	0
329e5                 | LR__5772
329e5     77 61 69 74 
329e9     6D 73       | 	byte	"waitms"
329eb     00          | 	byte	0
329ec                 | LR__5773
329ec     77 2E       | 	byte	"w."
329ee     00          | 	byte	0
329ef                 | LR__5774
329ef     77 61 69 74 
329f3     63 6C 6F 63 
329f7     6B          | 	byte	"waitclock"
329f8     00          | 	byte	0
329f9                 | LR__5775
329f9     77 63 2E    | 	byte	"wc."
329fc     00          | 	byte	0
329fd                 | LR__5776
329fd     77 61 69 74 
32a01     76 62 6C    | 	byte	"waitvbl"
32a04     00          | 	byte	0
32a05                 | LR__5777
32a05     77 76 2E    | 	byte	"wv."
32a08     00          | 	byte	0
32a09                 | LR__5778
32a09     77 72 70 69 
32a0d     6E          | 	byte	"wrpin"
32a0e     00          | 	byte	0
32a0f                 | LR__5779
32a0f     77 78 70 69 
32a13     6E          | 	byte	"wxpin"
32a14     00          | 	byte	0
32a15                 | LR__5780
32a15     77 79 70 69 
32a19     6E          | 	byte	"wypin"
32a1a     00          | 	byte	0
32a1b                 | LR__5781
32a1b     61 62 73    | 	byte	"abs"
32a1e     00          | 	byte	0
32a1f                 | LR__5782
32a1f     61 63 6F 73 | 	byte	"acos"
32a23     00          | 	byte	0
32a24                 | LR__5783
32a24     61 64 72    | 	byte	"adr"
32a27     00          | 	byte	0
32a28                 | LR__5784
32a28     61 64 64 72 | 	byte	"addr"
32a2c     00          | 	byte	0
32a2d                 | LR__5785
32a2d     61 73 63    | 	byte	"asc"
32a30     00          | 	byte	0
32a31                 | LR__5786
32a31     61 73 69 6E | 	byte	"asin"
32a35     00          | 	byte	0
32a36                 | LR__5787
32a36     61 74 6E    | 	byte	"atn"
32a39     00          | 	byte	0
32a3a                 | LR__5788
32a3a     62 69 6E 24 | 	byte	"bin$"
32a3e     00          | 	byte	0
32a3f                 | LR__5789
32a3f     63 68 72 24 | 	byte	"chr$"
32a43     00          | 	byte	0
32a44                 | LR__5790
32a44     63 6F 67 69 
32a48     6E 69 74    | 	byte	"coginit"
32a4b     00          | 	byte	0
32a4c                 | LR__5791
32a4c     63 6F 73    | 	byte	"cos"
32a4f     00          | 	byte	0
32a50                 | LR__5792
32a50     64 70 65 65 
32a54     6B          | 	byte	"dpeek"
32a55     00          | 	byte	0
32a56                 | LR__5793
32a56     66 69 6E 64 
32a5a     66 69 72 73 
32a5e     74          | 	byte	"findfirst"
32a5f     00          | 	byte	0
32a60                 | LR__5794
32a60     66 69 6E 64 
32a64     6E 65 78 74 | 	byte	"findnext"
32a68     00          | 	byte	0
32a69                 | LR__5795
32a69     66 72 61 6D 
32a6d     65 62 75 66 | 	byte	"framebuf"
32a71     00          | 	byte	0
32a72                 | LR__5796
32a72     66 62 2E    | 	byte	"fb."
32a75     00          | 	byte	0
32a76                 | LR__5797
32a76     66 72 65    | 	byte	"fre"
32a79     00          | 	byte	0
32a7a                 | LR__5798
32a7a     67 63 2E    | 	byte	"gc."
32a7d     00          | 	byte	0
32a7e                 | LR__5799
32a7e     67 65 74 63 
32a82     6F 6C 6F 72 | 	byte	"getcolor"
32a86     00          | 	byte	0
32a87                 | LR__5800
32a87     67 65 74 70 
32a8b     69 78 65 6C | 	byte	"getpixel"
32a8f     00          | 	byte	0
32a90                 | LR__5801
32a90     67 65 2E    | 	byte	"ge."
32a93     00          | 	byte	0
32a94                 | LR__5802
32a94     67 65 74 65 
32a98     6E 76 73 75 
32a9c     73 74 61 69 
32aa0     6E          | 	byte	"getenvsustain"
32aa1     00          | 	byte	0
32aa2                 | LR__5803
32aa2     67 65 74 6E 
32aa6     6F 74 65 76 
32aaa     61 6C 75 65 | 	byte	"getnotevalue"
32aae     00          | 	byte	0
32aaf                 | LR__5804
32aaf     67 65 74 72 
32ab3     65 61 6C 66 
32ab7     72 65 71    | 	byte	"getrealfreq"
32aba     00          | 	byte	0
32abb                 | LR__5805
32abb     67 65 74 74 
32abf     69 6D 65    | 	byte	"gettime"
32ac2     00          | 	byte	0
32ac3                 | LR__5806
32ac3     67 74 2E    | 	byte	"gt."
32ac6     00          | 	byte	0
32ac7                 | LR__5807
32ac7     68 65 78 24 | 	byte	"hex$"
32acb     00          | 	byte	0
32acc                 | LR__5808
32acc     69 6E 6B 65 
32ad0     79 24       | 	byte	"inkey$"
32ad2     00          | 	byte	0
32ad3                 | LR__5809
32ad3     69 6E 74    | 	byte	"int"
32ad6     00          | 	byte	0
32ad7                 | LR__5810
32ad7     6C 65 66 74 
32adb     24          | 	byte	"left$"
32adc     00          | 	byte	0
32add                 | LR__5811
32add     6C 65 6E    | 	byte	"len"
32ae0     00          | 	byte	0
32ae1                 | LR__5812
32ae1     6C 6F 67    | 	byte	"log"
32ae4     00          | 	byte	0
32ae5                 | LR__5813
32ae5     6C 70 65 65 
32ae9     6B          | 	byte	"lpeek"
32aea     00          | 	byte	0
32aeb                 | LR__5814
32aeb     6D 65 6D 74 
32aef     6F 70       | 	byte	"memtop"
32af1     00          | 	byte	0
32af2                 | LR__5815
32af2     6D 65 6D 6C 
32af6     6F          | 	byte	"memlo"
32af7     00          | 	byte	0
32af8                 | LR__5816
32af8     6D 69 64 24 | 	byte	"mid$"
32afc     00          | 	byte	0
32afd                 | LR__5817
32afd     6D 6F 75 73 
32b01     65 6B       | 	byte	"mousek"
32b03     00          | 	byte	0
32b04                 | LR__5818
32b04     6D 6F 75 73 
32b08     65 77       | 	byte	"mousew"
32b0a     00          | 	byte	0
32b0b                 | LR__5819
32b0b     6D 6F 75 73 
32b0f     65 78       | 	byte	"mousex"
32b11     00          | 	byte	0
32b12                 | LR__5820
32b12     6D 6F 75 73 
32b16     65 79       | 	byte	"mousey"
32b18     00          | 	byte	0
32b19                 | LR__5821
32b19     70 61 64 73 | 	byte	"pads"
32b1d     00          | 	byte	0
32b1e                 | LR__5822
32b1e     70 61 64 77 | 	byte	"padw"
32b22     00          | 	byte	0
32b23                 | LR__5823
32b23     70 61 64 78 | 	byte	"padx"
32b27     00          | 	byte	0
32b28                 | LR__5824
32b28     70 61 64 79 | 	byte	"pady"
32b2c     00          | 	byte	0
32b2d                 | LR__5825
32b2d     70 61 64 7A | 	byte	"padz"
32b31     00          | 	byte	0
32b32                 | LR__5826
32b32     70 61 64 72 
32b36     78          | 	byte	"padrx"
32b37     00          | 	byte	0
32b38                 | LR__5827
32b38     70 61 64 72 
32b3c     79          | 	byte	"padry"
32b3d     00          | 	byte	0
32b3e                 | LR__5828
32b3e     70 61 64 72 
32b42     7A          | 	byte	"padrz"
32b43     00          | 	byte	0
32b44                 | LR__5829
32b44     70 61 64 68 | 	byte	"padh"
32b48     00          | 	byte	0
32b49                 | LR__5830
32b49     70 65 65 6B | 	byte	"peek"
32b4d     00          | 	byte	0
32b4e                 | LR__5831
32b4e     70 69 6E 72 
32b52     65 61 64    | 	byte	"pinread"
32b55     00          | 	byte	0
32b56                 | LR__5832
32b56     72 64 70 69 
32b5a     6E          | 	byte	"rdpin"
32b5b     00          | 	byte	0
32b5c                 | LR__5833
32b5c     72 69 67 68 
32b60     74 24       | 	byte	"right$"
32b62     00          | 	byte	0
32b63                 | LR__5834
32b63     72 71 70 69 
32b67     6E          | 	byte	"rqpin"
32b68     00          | 	byte	0
32b69                 | LR__5835
32b69     72 6F 75 6E 
32b6d     64          | 	byte	"round"
32b6e     00          | 	byte	0
32b6f                 | LR__5836
32b6f     72 6E 64    | 	byte	"rnd"
32b72     00          | 	byte	0
32b73                 | LR__5837
32b73     73 69 6E    | 	byte	"sin"
32b76     00          | 	byte	0
32b77                 | LR__5838
32b77     73 71 72    | 	byte	"sqr"
32b7a     00          | 	byte	0
32b7b                 | LR__5839
32b7b     73 74 69 63 
32b7f     6B          | 	byte	"stick"
32b80     00          | 	byte	0
32b81                 | LR__5840
32b81     73 74 72 69 
32b85     67          | 	byte	"strig"
32b86     00          | 	byte	0
32b87                 | LR__5841
32b87     73 74 72 24 | 	byte	"str$"
32b8b     00          | 	byte	0
32b8c                 | LR__5842
32b8c     74 61 6E    | 	byte	"tan"
32b8f     00          | 	byte	0
32b90                 | LR__5843
32b90     76 61 6C    | 	byte	"val"
32b93     00          | 	byte	0
32b94                 | LR__5844
32b94     76 61 72 70 
32b98     74 72       | 	byte	"varptr"
32b9a     00          | 	byte	0
32b9b                 | LR__5845
32b9b     61          | 	byte	"a"
32b9c     00          | 	byte	0
32b9d                 | LR__5846
32b9d     7A          | 	byte	"z"
32b9e     00          | 	byte	0
32b9f                 | LR__5847
32b9f     5F          | 	byte	"_"
32ba0     00          | 	byte	0
32ba1                 | LR__5848
32ba1     61          | 	byte	"a"
32ba2     00          | 	byte	0
32ba3                 | LR__5849
32ba3     7A          | 	byte	"z"
32ba4     00          | 	byte	0
32ba5                 | LR__5850
32ba5     30          | 	byte	"0"
32ba6     00          | 	byte	0
32ba7                 | LR__5851
32ba7     39          | 	byte	"9"
32ba8     00          | 	byte	0
32ba9                 | LR__5852
32ba9     5F          | 	byte	"_"
32baa     00          | 	byte	0
32bab                 | LR__5853
32bab     2E          | 	byte	"."
32bac     00          | 	byte	0
32bad                 | LR__5854
32bad     61          | 	byte	"a"
32bae     00          | 	byte	0
32baf                 | LR__5855
32baf     7A          | 	byte	"z"
32bb0     00          | 	byte	0
32bb1                 | LR__5856
32bb1     30          | 	byte	"0"
32bb2     00          | 	byte	0
32bb3                 | LR__5857
32bb3     39          | 	byte	"9"
32bb4     00          | 	byte	0
32bb5                 | LR__5858
32bb5     5F          | 	byte	"_"
32bb6     00          | 	byte	0
32bb7                 | LR__5859
32bb7     24          | 	byte	"$"
32bb8     00          | 	byte	0
32bb9                 | LR__5860
32bb9     25          | 	byte	"%"
32bba     00          | 	byte	0
32bbb                 | LR__5861
32bbb     21          | 	byte	"!"
32bbc     00          | 	byte	0
32bbd                 | LR__5862
32bbd     30          | 	byte	"0"
32bbe     00          | 	byte	0
32bbf                 | LR__5863
32bbf     39          | 	byte	"9"
32bc0     00          | 	byte	0
32bc1                 | LR__5864
32bc1     2E          | 	byte	"."
32bc2     00          | 	byte	0
32bc3                 | LR__5865
32bc3     24          | 	byte	"$"
32bc4     00          | 	byte	0
32bc5                 | LR__5866
32bc5     25          | 	byte	"%"
32bc6     00          | 	byte	0
32bc7                 | LR__5867
32bc7     2D          | 	byte	"-"
32bc8     00          | 	byte	0
32bc9                 | LR__5868
32bc9     2E          | 	byte	"."
32bca     00          | 	byte	0
32bcb                 | LR__5869
32bcb     24          | 	byte	"$"
32bcc     00          | 	byte	0
32bcd                 | LR__5870
32bcd     25          | 	byte	"%"
32bce     00          | 	byte	0
32bcf                 | LR__5871
32bcf     30          | 	byte	"0"
32bd0     00          | 	byte	0
32bd1                 | LR__5872
32bd1     39          | 	byte	"9"
32bd2     00          | 	byte	0
32bd3                 | LR__5873
32bd3     5F          | 	byte	"_"
32bd4     00          | 	byte	0
32bd5                 | LR__5874
32bd5     2E          | 	byte	"."
32bd6     00          | 	byte	0
32bd7                 | LR__5875
32bd7     45          | 	byte	"E"
32bd8     00          | 	byte	0
32bd9                 | LR__5876
32bd9     65          | 	byte	"e"
32bda     00          | 	byte	0
32bdb                 | LR__5877
32bdb     2D          | 	byte	"-"
32bdc     00          | 	byte	0
32bdd                 | LR__5878
32bdd     61          | 	byte	"a"
32bde     00          | 	byte	0
32bdf                 | LR__5879
32bdf     66          | 	byte	"f"
32be0     00          | 	byte	0
32be1                 | LR__5880
32be1     30          | 	byte	"0"
32be2     00          | 	byte	0
32be3                 | LR__5881
32be3     31          | 	byte	"1"
32be4     00          | 	byte	0
32be5                 | LR__5882
32be5     5F          | 	byte	"_"
32be6     00          | 	byte	0
32be7                 | LR__5883
32be7     2D          | 	byte	"-"
32be8     00          | 	byte	0
32be9                 | LR__5884
32be9     65          | 	byte	"e"
32bea     00          | 	byte	0
32beb                 | LR__5885
32beb     2E          | 	byte	"."
32bec     00          | 	byte	0
32bed                 | LR__5886
32bed     45          | 	byte	"E"
32bee     00          | 	byte	0
32bef                 | LR__5887
32bef     65          | 	byte	"e"
32bf0     00          | 	byte	0
32bf1                 | LR__5888
32bf1     30          | 	byte	"0"
32bf2     00          | 	byte	0
32bf3                 | LR__5889
32bf3     39          | 	byte	"9"
32bf4     00          | 	byte	0
32bf5                 | LR__5890
32bf5     24          | 	byte	"$"
32bf6     00          | 	byte	0
32bf7                 | LR__5891
32bf7     25          | 	byte	"%"
32bf8     00          | 	byte	0
32bf9                 | LR__5892
32bf9     2D          | 	byte	"-"
32bfa     00          | 	byte	0
32bfb                 | LR__5893
32bfb     24          | 	byte	"$"
32bfc     00          | 	byte	0
32bfd                 | LR__5894
32bfd     25          | 	byte	"%"
32bfe     00          | 	byte	0
32bff                 | LR__5895
32bff     30          | 	byte	"0"
32c00     00          | 	byte	0
32c01                 | LR__5896
32c01     39          | 	byte	"9"
32c02     00          | 	byte	0
32c03                 | LR__5897
32c03     5F          | 	byte	"_"
32c04     00          | 	byte	0
32c05                 | LR__5898
32c05     30          | 	byte	"0"
32c06     00          | 	byte	0
32c07                 | LR__5899
32c07     39          | 	byte	"9"
32c08     00          | 	byte	0
32c09                 | LR__5900
32c09     61          | 	byte	"a"
32c0a     00          | 	byte	0
32c0b                 | LR__5901
32c0b     66          | 	byte	"f"
32c0c     00          | 	byte	0
32c0d                 | LR__5902
32c0d     5F          | 	byte	"_"
32c0e     00          | 	byte	0
32c0f                 | LR__5903
32c0f     30          | 	byte	"0"
32c10     00          | 	byte	0
32c11                 | LR__5904
32c11     31          | 	byte	"1"
32c12     00          | 	byte	0
32c13                 | LR__5905
32c13     5F          | 	byte	"_"
32c14     00          | 	byte	0
32c15                 | LR__5906
32c15     30          | 	byte	"0"
32c16     00          | 	byte	0
32c17                 | LR__5907
32c17     39          | 	byte	"9"
32c18     00          | 	byte	0
32c19                 | LR__5908
32c19     5F          | 	byte	"_"
32c1a     00          | 	byte	0
32c1b                 | LR__5909
32c1b     22          | 	byte	34
32c1c     00          | 	byte	0
32c1d                 | LR__5910
32c1d     22          | 	byte	34
32c1e     00          | 	byte	0
32c1f                 | LR__5911
32c1f     44 69 6D 3A 
32c23     20 61 74 20 
32c27     6C 69 6E 65 
32c2b     20          | 	byte	"Dim: at line "
32c2c     00          | 	byte	0
32c2d                 | LR__5912
32c2d     3A 20 77 61 
32c31     72 6E 69 6E 
32c35     67 3A 20 74 
32c39     68 65 20 76 
32c3d     61 72 69 61 
32c41     62 6C 65 20 
32c45     65 78 69 73 
32c49     74 65 64 2E | 	byte	": warning: the variable existed."
32c4d     00          | 	byte	0
32c4e                 | LR__5913
32c4e     28          | 	byte	"("
32c4f     00          | 	byte	0
32c50                 | LR__5914
32c50     61 73       | 	byte	"as"
32c52     00          | 	byte	0
32c53                 | LR__5915
32c53     61 73       | 	byte	"as"
32c55     00          | 	byte	0
32c56                 | LR__5916
32c56     2C          | 	byte	","
32c57     00          | 	byte	0
32c58                 | LR__5917
32c58     29          | 	byte	")"
32c59     00          | 	byte	0
32c5a                 | LR__5918
32c5a     29          | 	byte	")"
32c5b     00          | 	byte	0
32c5c                 | LR__5919
32c5c     61 73       | 	byte	"as"
32c5e     00          | 	byte	0
32c5f                 | LR__5920
32c5f     62 79 74 65 | 	byte	"byte"
32c63     00          | 	byte	0
32c64                 | LR__5921
32c64     75 62 79 74 
32c68     65          | 	byte	"ubyte"
32c69     00          | 	byte	0
32c6a                 | LR__5922
32c6a     73 68 6F 72 
32c6e     74          | 	byte	"short"
32c6f     00          | 	byte	0
32c70                 | LR__5923
32c70     75 73 68 6F 
32c74     72 74       | 	byte	"ushort"
32c76     00          | 	byte	0
32c77                 | LR__5924
32c77     6C 6F 6E 67 | 	byte	"long"
32c7b     00          | 	byte	0
32c7c                 | LR__5925
32c7c     69 6E 74 65 
32c80     67 65 72    | 	byte	"integer"
32c83     00          | 	byte	0
32c84                 | LR__5926
32c84     75 6C 6F 6E 
32c88     67          | 	byte	"ulong"
32c89     00          | 	byte	0
32c8a                 | LR__5927
32c8a     69 6E 74 36 
32c8e     34          | 	byte	"int64"
32c8f     00          | 	byte	0
32c90                 | LR__5928
32c90     75 69 6E 74 
32c94     36 34       | 	byte	"uint64"
32c96     00          | 	byte	0
32c97                 | LR__5929
32c97     73 69 6E 67 
32c9b     6C 65       | 	byte	"single"
32c9d     00          | 	byte	0
32c9e                 | LR__5930
32c9e     64 6F 75 62 
32ca2     6C 65       | 	byte	"double"
32ca4     00          | 	byte	0
32ca5                 | LR__5931
32ca5     73 74 72 69 
32ca9     6E 67       | 	byte	"string"
32cab     00          | 	byte	0
32cac                 | LR__5932
32cac     74 6F       | 	byte	"to"
32cae     00          | 	byte	0
32caf                 | LR__5933
32caf     73 74 65 70 | 	byte	"step"
32cb3     00          | 	byte	0
32cb4                 | LR__5934
32cb4     73 2E       | 	byte	"s."
32cb6     00          | 	byte	0
32cb7                 | LR__5935
32cb7     73 2E       | 	byte	"s."
32cb9     00          | 	byte	0
32cba                 | LR__5936
32cba     67 6F 74 6F | 	byte	"goto"
32cbe     00          | 	byte	0
32cbf                 | LR__5937
32cbf     67 6F 73 75 
32cc3     62          | 	byte	"gosub"
32cc4     00          | 	byte	0
32cc5                 | LR__5938
32cc5     24          | 	byte	"$"
32cc6     00          | 	byte	0
32cc7                 | LR__5939
32cc7     26 68       | 	byte	"&h"
32cc9     00          | 	byte	0
32cca                 | LR__5940
32cca     25          | 	byte	"%"
32ccb     00          | 	byte	0
32ccc                 | LR__5941
32ccc     26 62       | 	byte	"&b"
32cce     00          | 	byte	0
32ccf                 | LR__5942
32ccf                 | 	byte	
32ccf     00          | 	byte	0
32cd0                 | LR__5943
32cd0     61 63 6F 73 
32cd4     3A 20       | 	byte	"acos: "
32cd6     00          | 	byte	0
32cd7                 | LR__5944
32cd7     61 73 63 3A 
32cdb     20          | 	byte	"asc: "
32cdc     00          | 	byte	0
32cdd                 | LR__5945
32cdd     61 73 63 3A 
32ce1     20          | 	byte	"asc: "
32ce2     00          | 	byte	0
32ce3                 | LR__5946
32ce3     61 73 69 6E 
32ce7     3A 20       | 	byte	"asin: "
32ce9     00          | 	byte	0
32cea                 | LR__5947
32cea     61 74 6E 3A 
32cee     20          | 	byte	"atn: "
32cef     00          | 	byte	0
32cf0                 | LR__5948
32cf0     62 6C 69 74 
32cf4     3A 20       | 	byte	"blit: "
32cf6     00          | 	byte	0
32cf7                 | LR__5949
32cf7     62 69 6E 24 
32cfb     3A 20       | 	byte	"bin$: "
32cfd     00          | 	byte	0
32cfe                 | LR__5950
32cfe     2F          | 	byte	"/"
32cff     00          | 	byte	0
32d00                 | LR__5951
32d00     2F 73 64 2F 
32d04     62 69 6E 2F | 	byte	"/sd/bin/"
32d08     00          | 	byte	0
32d09                 | LR__5952
32d09     53 79 73 74 
32d0d     65 6D 20 65 
32d11     72 72 6F 72 
32d15     20          | 	byte	"System error "
32d16     00          | 	byte	0
32d17                 | LR__5953
32d17     3A 20       | 	byte	": "
32d19     00          | 	byte	0
32d1a                 | LR__5954
32d1a     2A          | 	byte	"*"
32d1b     00          | 	byte	0
32d1c                 | LR__5955
32d1c     2E 2E       | 	byte	".."
32d1e     00          | 	byte	0
32d1f                 | LR__5956
32d1f     2F          | 	byte	"/"
32d20     00          | 	byte	0
32d21                 | LR__5957
32d21     2F          | 	byte	"/"
32d22     00          | 	byte	0
32d23                 | LR__5958
32d23     53 79 73 74 
32d27     65 6D 20 65 
32d2b     72 72 6F 72 
32d2f     20          | 	byte	"System error "
32d30     00          | 	byte	0
32d31                 | LR__5959
32d31     3A 20       | 	byte	": "
32d33     00          | 	byte	0
32d34                 | LR__5960
32d34     43 75 72 72 
32d38     65 6E 74 20 
32d3c     64 69 72 65 
32d40     63 74 6F 72 
32d44     79 3A 20    | 	byte	"Current directory: "
32d47     00          | 	byte	0
32d48                 | LR__5961
32d48     2F          | 	byte	"/"
32d49     00          | 	byte	0
32d4a                 | LR__5962
32d4a     53 79 73 74 
32d4e     65 6D 20 65 
32d52     72 72 6F 72 
32d56     20          | 	byte	"System error "
32d57     00          | 	byte	0
32d58                 | LR__5963
32d58     3A 20       | 	byte	": "
32d5a     00          | 	byte	0
32d5b                 | LR__5964
32d5b     43 75 72 72 
32d5f     65 6E 74 20 
32d63     64 69 72 65 
32d67     63 74 6F 72 
32d6b     79 3A 20    | 	byte	"Current directory: "
32d6e     00          | 	byte	0
32d6f                 | LR__5965
32d6f     2F          | 	byte	"/"
32d70     00          | 	byte	0
32d71                 | LR__5966
32d71     2F          | 	byte	"/"
32d72     00          | 	byte	0
32d73                 | LR__5967
32d73     2F          | 	byte	"/"
32d74     00          | 	byte	0
32d75                 | LR__5968
32d75     53 79 73 74 
32d79     65 6D 20 65 
32d7d     72 72 6F 72 
32d81     20          | 	byte	"System error "
32d82     00          | 	byte	0
32d83                 | LR__5969
32d83     3A 20       | 	byte	": "
32d85     00          | 	byte	0
32d86                 | LR__5970
32d86     43 75 72 72 
32d8a     65 6E 74 20 
32d8e     64 69 72 65 
32d92     63 74 6F 72 
32d96     79 3A 20    | 	byte	"Current directory: "
32d99     00          | 	byte	0
32d9a                 | LR__5971
32d9a     63 68 72 24 
32d9e     3A 20       | 	byte	"chr$: "
32da0     00          | 	byte	0
32da1                 | LR__5972
32da1     63 68 61 6E 
32da5     6E 65 6C 23 
32da9     20 65 78 70 
32dad     65 63 74 65 
32db1     64          | 	byte	"channel# expected"
32db2     00          | 	byte	0
32db3                 | LR__5973
32db3     63 6F 67 69 
32db7     6E 69 74 3A 
32dbb     20          | 	byte	"coginit: "
32dbc     00          | 	byte	0
32dbd                 | LR__5974
32dbd     53 79 73 74 
32dc1     65 6D 20 65 
32dc5     72 72 6F 72 
32dc9     20 2D 20    | 	byte	"System error - "
32dcc     00          | 	byte	0
32dcd                 | LR__5975
32dcd     20 69 6E 20 
32dd1     6C 69 6E 65 
32dd5     20          | 	byte	" in line "
32dd6     00          | 	byte	0
32dd7                 | LR__5976
32dd7     3A 20       | 	byte	": "
32dd9     00          | 	byte	0
32dda                 | LR__5977
32dda     2C 20 66 69 
32dde     6C 65 20 6E 
32de2     61 6D 65 3A 
32de6     20          | 	byte	", file name: "
32de7     00          | 	byte	0
32de8                 | LR__5978
32de8     53 79 73 74 
32dec     65 6D 20 65 
32df0     72 72 6F 72 
32df4     20 2D 20    | 	byte	"System error - "
32df7     00          | 	byte	0
32df8                 | LR__5979
32df8     20 69 6E 20 
32dfc     6C 69 6E 65 
32e00     20          | 	byte	" in line "
32e01     00          | 	byte	0
32e02                 | LR__5980
32e02     3A 20       | 	byte	": "
32e04     00          | 	byte	0
32e05                 | LR__5981
32e05     2C 20 66 69 
32e09     6C 65 20 6E 
32e0d     61 6D 65 3A 
32e11     20          | 	byte	", file name: "
32e12     00          | 	byte	0
32e13                 | LR__5982
32e13     63 6F 73 3A 
32e17     20          | 	byte	"cos: "
32e18     00          | 	byte	0
32e19                 | LR__5983
32e19                 | 	byte	
32e19     00          | 	byte	0
32e1a                 | LR__5984
32e1a                 | 	byte	
32e1a     00          | 	byte	0
32e1b                 | LR__5985
32e1b     2F 73 64 2F 
32e1f     6D 65 64 69 
32e23     61 2F 68 2F | 	byte	"/sd/media/h/"
32e27     00          | 	byte	0
32e28                 | LR__5986
32e28     53 79 73 74 
32e2c     65 6D 20 65 
32e30     72 72 6F 72 
32e34     20          | 	byte	"System error "
32e35     00          | 	byte	0
32e36                 | LR__5987
32e36     3A 20       | 	byte	": "
32e38     00          | 	byte	0
32e39                 | LR__5988
32e39                 | 	byte	
32e39     00          | 	byte	0
32e3a                 | LR__5989
32e3a                 | 	byte	
32e3a     00          | 	byte	0
32e3b                 | LR__5990
32e3b     2F 73 64 2F 
32e3f     6D 65 64 69 
32e43     61 2F 73 2F | 	byte	"/sd/media/s/"
32e47     00          | 	byte	0
32e48                 | LR__5991
32e48     53 79 73 74 
32e4c     65 6D 20 65 
32e50     72 72 6F 72 
32e54     20          | 	byte	"System error "
32e55     00          | 	byte	0
32e56                 | LR__5992
32e56     3A 20       | 	byte	": "
32e58     00          | 	byte	0
32e59                 | LR__5993
32e59     2F          | 	byte	"/"
32e5a     00          | 	byte	0
32e5b                 | LR__5994
32e5b     2F          | 	byte	"/"
32e5c     00          | 	byte	0
32e5d                 | LR__5995
32e5d     2F          | 	byte	"/"
32e5e     00          | 	byte	0
32e5f                 | LR__5996
32e5f     43 61 6E 6E 
32e63     6F 74 20 64 
32e67     65 6C 65 74 
32e6b     65 20 66 69 
32e6f     6C 65 20 6F 
32e73     72 20 66 69 
32e77     6C 65 20 64 
32e7b     6F 65 73 6E 
32e7f     27 74 20 65 
32e83     78 69 73 74 
32e87     3A 20 73 79 
32e8b     73 74 65 6D 
32e8f     20 65 72 72 
32e93     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
32e96     00          | 	byte	0
32e97                 | LR__5997
32e97     43 75 72 72 
32e9b     65 6E 74 20 
32e9f     64 69 72 65 
32ea3     63 74 6F 72 
32ea7     79 3A 20    | 	byte	"Current directory: "
32eaa     00          | 	byte	0
32eab                 | LR__5998
32eab                 | 	byte	
32eab     00          | 	byte	0
32eac                 | LR__5999
32eac     2A          | 	byte	"*"
32ead     00          | 	byte	0
32eae                 | LR__6000
32eae                 | 	byte	
32eae     00          | 	byte	0
32eaf                 | LR__6001
32eaf     5B 64 69 72 
32eb3     5D 20       | 	byte	"[dir] "
32eb5     00          | 	byte	0
32eb6                 | LR__6002
32eb6     4D 6F 72 65 
32eba     20 74 68 61 
32ebe     6E 20 31 32 
32ec2     38 20 65 6E 
32ec6     74 72 69 65 
32eca     73 20 66 6F 
32ece     75 6E 64 3A 
32ed2     20 63 6C 65 
32ed6     61 6E 20 79 
32eda     6F 75 72 20 
32ede     64 69 72 65 
32ee2     63 74 6F 72 
32ee6     79          | 	byte	"More than 128 entries found: clean your directory"
32ee7     00          | 	byte	0
32ee8                 | LR__6003
32ee8     2A          | 	byte	"*"
32ee9     00          | 	byte	0
32eea                 | LR__6004
32eea                 | 	byte	
32eea     00          | 	byte	0
32eeb                 | LR__6005
32eeb     4D 6F 72 65 
32eef     20 74 68 61 
32ef3     6E 20 31 32 
32ef7     38 20 65 6E 
32efb     74 72 69 65 
32eff     73 20 66 6F 
32f03     75 6E 64 3A 
32f07     20 63 6C 65 
32f0b     61 6E 20 79 
32f0f     6F 75 72 20 
32f13     64 69 72 65 
32f17     63 74 6F 72 
32f1b     79          | 	byte	"More than 128 entries found: clean your directory"
32f1c     00          | 	byte	0
32f1d                 | LR__6006
32f1d     45 72 72 6F 
32f21     72 20       | 	byte	"Error "
32f23     00          | 	byte	0
32f24                 | LR__6007
32f24     3A 20       | 	byte	": "
32f26     00          | 	byte	0
32f27                 | LR__6008
32f27     66 69 6E 64 
32f2b     66 69 72 73 
32f2f     74 3A 20    | 	byte	"findfirst: "
32f32     00          | 	byte	0
32f33                 | LR__6009
32f33     66 69 6E 64 
32f37     66 69 72 73 
32f3b     74 3A 20    | 	byte	"findfirst: "
32f3e     00          | 	byte	0
32f3f                 | LR__6010
32f3f     66 69 6E 64 
32f43     66 69 72 73 
32f47     74 3A 20    | 	byte	"findfirst: "
32f4a     00          | 	byte	0
32f4b                 | LR__6011
32f4b                 | 	byte	
32f4b     00          | 	byte	0
32f4c                 | LR__6012
32f4c     66 69 6E 64 
32f50     66 69 72 73 
32f54     74 3A 20    | 	byte	"findfirst: "
32f57     00          | 	byte	0
32f58                 | LR__6013
32f58                 | 	byte	
32f58     00          | 	byte	0
32f59                 | LR__6014
32f59     64 69 72    | 	byte	"dir"
32f5c     00          | 	byte	0
32f5d                 | LR__6015
32f5d     66 69 6E 64 
32f61     6E 65 78 74 
32f65     3A 20       | 	byte	"findnext: "
32f67     00          | 	byte	0
32f68                 | LR__6016
32f68     67 65 74 63 
32f6c     6F 6C 6F 72 
32f70     20          | 	byte	"getcolor "
32f71     00          | 	byte	0
32f72                 | LR__6017
32f72     67 65 74 65 
32f76     6E 76 73 75 
32f7a     73 74 61 69 
32f7e     6E 3A 20    | 	byte	"getenvsustain: "
32f81     00          | 	byte	0
32f82                 | LR__6018
32f82     67 65 74 70 
32f86     69 78 65 6C 
32f8a     3A 20       | 	byte	"getpixel: "
32f8c     00          | 	byte	0
32f8d                 | LR__6019
32f8d     67 65 74 72 
32f91     65 61 6C 66 
32f95     72 65 71 3A 
32f99     20          | 	byte	"getrealfreq: "
32f9a     00          | 	byte	0
32f9b                 | LR__6020
32f9b     68 65 78 24 
32f9f     3A 20       | 	byte	"hex$: "
32fa1     00          | 	byte	0
32fa2                 | LR__6021
32fa2                 | 	byte	
32fa2     00          | 	byte	0
32fa3                 | LR__6022
32fa3     49 6E 20 69 
32fa7     6E 70 75 74 
32fab     3A 20       | 	byte	"In input: "
32fad     00          | 	byte	0
32fae                 | LR__6023
32fae     2C          | 	byte	","
32faf     00          | 	byte	0
32fb0                 | LR__6024
32fb0                 | 	byte	
32fb0     00          | 	byte	0
32fb1                 | LR__6025
32fb1                 | 	byte	
32fb1     00          | 	byte	0
32fb2                 | LR__6026
32fb2     6C 65 66 74 
32fb6     24 3A 20    | 	byte	"left$: "
32fb9     00          | 	byte	0
32fba                 | LR__6027
32fba     6C 65 66 74 
32fbe     24 3A 20    | 	byte	"left$: "
32fc1     00          | 	byte	0
32fc2                 | LR__6028
32fc2     6C 65 6E 3A 
32fc6     20          | 	byte	"len: "
32fc7     00          | 	byte	0
32fc8                 | LR__6029
32fc8     6C 65 6E 3A 
32fcc     20          | 	byte	"len: "
32fcd     00          | 	byte	0
32fce                 | LR__6030
32fce                 | 	byte	
32fce     00          | 	byte	0
32fcf                 | LR__6031
32fcf     2F          | 	byte	"/"
32fd0     00          | 	byte	0
32fd1                 | LR__6032
32fd1     2F          | 	byte	"/"
32fd2     00          | 	byte	0
32fd3                 | LR__6033
32fd3     2E 62 61 73 | 	byte	".bas"
32fd7     00          | 	byte	0
32fd8                 | LR__6034
32fd8     53 79 73 74 
32fdc     65 6D 20 65 
32fe0     72 72 6F 72 
32fe4     20          | 	byte	"System error "
32fe5     00          | 	byte	0
32fe6                 | LR__6035
32fe6     3A 20       | 	byte	": "
32fe8     00          | 	byte	0
32fe9                 | LR__6036
32fe9     2E 62 61 73 | 	byte	".bas"
32fed     00          | 	byte	0
32fee                 | LR__6037
32fee     2F          | 	byte	"/"
32fef     00          | 	byte	0
32ff0                 | LR__6038
32ff0                 | 	byte	
32ff0     00          | 	byte	0
32ff1                 | LR__6039
32ff1     4C 6F 61 64 
32ff5     65 64 20    | 	byte	"Loaded "
32ff8     00          | 	byte	0
32ff9                 | LR__6040
32ff9     2F          | 	byte	"/"
32ffa     00          | 	byte	0
32ffb                 | LR__6041
32ffb     6C 6F 67 3A 
32fff     20          | 	byte	"log: "
33000     00          | 	byte	0
33001                 | LR__6042
33001     6D 69 64 24 
33005     3A 20       | 	byte	"mid$: "
33007     00          | 	byte	0
33008                 | LR__6043
33008     6D 69 64 24 
3300c     3A 20       | 	byte	"mid$: "
3300e     00          | 	byte	0
3300f                 | LR__6044
3300f     43 61 6E 6E 
33013     6F 74 20 63 
33017     72 65 61 74 
3301b     65 20 61 20 
3301f     64 69 72 65 
33023     63 74 6F 72 
33027     79 3A 20 73 
3302b     79 73 74 65 
3302f     6D 20 65 72 
33033     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
33037     00          | 	byte	0
33038                 | LR__6045
33038     20 42 41 53 
3303c     49 43 20 62 
33040     79 74 65 73 
33044     20 66 72 65 
33048     65          | 	byte	" BASIC bytes free"
33049     00          | 	byte	0
3304a                 | LR__6046
3304a                 | 	byte	
3304a     00          | 	byte	0
3304b                 | LR__6047
3304b                 | 	byte	
3304b     00          | 	byte	0
3304c                 | LR__6048
3304c                 | 	byte	
3304c     00          | 	byte	0
3304d                 | LR__6049
3304d     6E 6F 6E 61 
33051     6D 65 2E 62 
33055     61 73       | 	byte	"noname.bas"
33057     00          | 	byte	0
33058                 | LR__6050
33058     66 69 6C 65 
3305c     6E 61 6D 65 
33060     20 65 78 70 
33064     65 63 74 65 
33068     64          | 	byte	"filename expected"
33069     00          | 	byte	0
3306a                 | LR__6051
3306a     72 65 61 64 | 	byte	"read"
3306e     00          | 	byte	0
3306f                 | LR__6052
3306f     77 72 69 74 
33073     65          | 	byte	"write"
33074     00          | 	byte	0
33075                 | LR__6053
33075     61 70 70 65 
33079     6E 64       | 	byte	"append"
3307b     00          | 	byte	0
3307c                 | LR__6054
3307c     63 68 61 6E 
33080     6E 65 6C 23 
33084     20 65 78 70 
33088     65 63 74 65 
3308c     64          | 	byte	"channel# expected"
3308d     00          | 	byte	0
3308e                 | LR__6055
3308e     4F 70 65 6E 
33092     3A 20 69 6E 
33096     76 61 6C 69 
3309a     64 20 6D 6F 
3309e     64 65       | 	byte	"Open: invalid mode"
330a0     00          | 	byte	0
330a1                 | LR__6056
330a1     70 61 64 72 
330a5     78 3A 20    | 	byte	"padrx: "
330a8     00          | 	byte	0
330a9                 | LR__6057
330a9     70 61 64 72 
330ad     79 3A 20    | 	byte	"padry: "
330b0     00          | 	byte	0
330b1                 | LR__6058
330b1     70 61 64 72 
330b5     7A 3A 20    | 	byte	"padrz: "
330b8     00          | 	byte	0
330b9                 | LR__6059
330b9     70 61 64 73 
330bd     3A 20       | 	byte	"pads: "
330bf     00          | 	byte	0
330c0                 | LR__6060
330c0     70 61 64 77 
330c4     3A 20       | 	byte	"padw: "
330c6     00          | 	byte	0
330c7                 | LR__6061
330c7     70 61 64 78 
330cb     3A 20       | 	byte	"padx: "
330cd     00          | 	byte	0
330ce                 | LR__6062
330ce     70 61 64 79 
330d2     3A 20       | 	byte	"pady: "
330d4     00          | 	byte	0
330d5                 | LR__6063
330d5     70 61 64 7A 
330d9     3A 20       | 	byte	"padz: "
330db     00          | 	byte	0
330dc                 | LR__6064
330dc     50 72 69 6E 
330e0     74 20 74 6F 
330e4     20 63 68 61 
330e8     6E 6E 65 6C 
330ec     20 28 6E 6F 
330f0     74 20 79 65 
330f4     74 20 69 6D 
330f8     70 6C 65 6D 
330fc     65 6E 74 65 
33100     64 29       | 	byte	"Print to channel (not yet implemented)"
33102     00          | 	byte	0
33103                 | LR__6065
33103                 | 	byte	
33103     00          | 	byte	0
33104                 | LR__6066
33104     64 61 74 61 | 	byte	"data"
33108     00          | 	byte	0
33109                 | LR__6067
33109                 | 	byte	
33109     00          | 	byte	0
3310a                 | LR__6068
3310a     49 6E 20 72 
3310e     65 61 64 3A 
33112     20          | 	byte	"In read: "
33113     00          | 	byte	0
33114                 | LR__6069
33114                 | 	byte	
33114     00          | 	byte	0
33115                 | LR__6070
33115                 | 	byte	
33115     00          | 	byte	0
33116                 | LR__6071
33116     27          | 	byte	"'"
33117     00          | 	byte	0
33118                 | LR__6072
33118     2C          | 	byte	","
33119     00          | 	byte	0
3311a                 | LR__6073
3311a                 | 	byte	
3311a     00          | 	byte	0
3311b                 | LR__6074
3311b                 | 	byte	
3311b     00          | 	byte	0
3311c                 | LR__6075
3311c                 | 	byte	
3311c     00          | 	byte	0
3311d                 | LR__6076
3311d                 | 	byte	
3311d     00          | 	byte	0
3311e                 | LR__6077
3311e                 | 	byte	
3311e     00          | 	byte	0
3311f                 | LR__6078
3311f     72 69 67 68 
33123     74 24 3A 20 | 	byte	"right$: "
33127     00          | 	byte	0
33128                 | LR__6079
33128     72 69 67 68 
3312c     74 24 3A 20 | 	byte	"right$: "
33130     00          | 	byte	0
33131                 | LR__6080
33131     72 6E 64 3A 
33135     20          | 	byte	"rnd: "
33136     00          | 	byte	0
33137                 | LR__6081
33137     72 6E 64 3A 
3313b     20          | 	byte	"rnd: "
3313c     00          | 	byte	0
3313d                 | LR__6082
3313d                 | 	byte	
3313d     00          | 	byte	0
3313e                 | LR__6083
3313e     53 74 6F 70 
33142     70 65 64 20 
33146     61 74 20 6C 
3314a     69 6E 65 20 | 	byte	"Stopped at line "
3314e     00          | 	byte	0
3314f                 | LR__6084
3314f                 | 	byte	
3314f     00          | 	byte	0
33150                 | LR__6085
33150     2F          | 	byte	"/"
33151     00          | 	byte	0
33152                 | LR__6086
33152                 | 	byte	
33152     00          | 	byte	0
33153                 | LR__6087
33153     53 61 76 65 
33157     64 20 61 73 
3315b     20          | 	byte	"Saved as "
3315c     00          | 	byte	0
3315d                 | LR__6088
3315d     2F          | 	byte	"/"
3315e     00          | 	byte	0
3315f                 | LR__6089
3315f     73 65 74 63 
33163     6F 6C 6F 72 
33167     3A 20       | 	byte	"setcolor: "
33169     00          | 	byte	0
3316a                 | LR__6090
3316a     73 69 6E 3A 
3316e     20          | 	byte	"sin: "
3316f     00          | 	byte	0
33170                 | LR__6091
33170     73 71 72 3A 
33174     20          | 	byte	"sqr: "
33175     00          | 	byte	0
33176                 | LR__6092
33176     73 74 69 63 
3317a     6B 3A 20    | 	byte	"stick: "
3317d     00          | 	byte	0
3317e                 | LR__6093
3317e     73 74 72 24 
33182     3A 20       | 	byte	"str$: "
33184     00          | 	byte	0
33185                 | LR__6094
33185     73 74 72 69 
33189     67 3A 20    | 	byte	"strig: "
3318c     00          | 	byte	0
3318d                 | LR__6095
3318d     74 61 6E 3A 
33191     20          | 	byte	"tan: "
33192     00          | 	byte	0
33193                 | LR__6096
33193     76 61 6C 3A 
33197     20          | 	byte	"val: "
33198     00          | 	byte	0
33199                 | LR__6097
33199     76 61 6C 3A 
3319d     20          | 	byte	"val: "
3319e     00          | 	byte	0
3319f                 | LR__6098
3319f     24          | 	byte	"$"
331a0     00          | 	byte	0
331a1                 | LR__6099
331a1     26 68       | 	byte	"&h"
331a3     00          | 	byte	0
331a4                 | LR__6100
331a4     25          | 	byte	"%"
331a5     00          | 	byte	0
331a6                 | LR__6101
331a6     26 62       | 	byte	"&b"
331a8     00          | 	byte	0
331a9                 | LR__6102
331a9                 | 	byte	
331a9     00          | 	byte	0
331aa                 | LR__6103
331aa     45 78 70 65 
331ae     63 74 65 64 
331b2     20 6E 75 6D 
331b6     62 65 72 2C 
331ba     20 67 6F 74 
331be     20 73 6F 6D 
331c2     65 74 68 69 
331c6     6E 67 20 65 
331ca     6C 73 65    | 	byte	"Expected number, got something else"
331cd     00          | 	byte	0
331ce                 | LR__6104
331ce     43 61 6E 6E 
331d2     6F 74 20 61 
331d6     64 64 20 61 
331da     20 6E 75 6D 
331de     62 65 72 20 
331e2     74 6F 20 61 
331e6     20 73 74 72 
331ea     69 6E 67    | 	byte	"Cannot add a number to a string"
331ed     00          | 	byte	0
331ee                 | LR__6105
331ee     43 61 6E 6E 
331f2     6F 74 20 73 
331f6     75 62 73 74 
331fa     72 61 63 74 
331fe     20 73 74 72 
33202     69 6E 67 73 | 	byte	"Cannot substract strings"
33206     00          | 	byte	0
33207                 | LR__6106
33207     55 6E 6B 6E 
3320b     6F 77 6E 20 
3320f     65 72 72 6F 
33213     72 20 77 68 
33217     69 6C 65 20 
3321b     61 64 64 69 
3321f     6E 67       | 	byte	"Unknown error while adding"
33221     00          | 	byte	0
33222                 | LR__6107
33222     55 6E 6B 6E 
33226     6F 77 6E 20 
3322a     65 72 72 6F 
3322e     72 20 77 68 
33232     69 6C 65 20 
33236     73 75 62 73 
3323a     74 72 61 63 
3323e     74 69 6E 67 | 	byte	"Unknown error while substracting"
33242     00          | 	byte	0
33243                 | LR__6108
33243     43 61 6E 6E 
33247     6F 74 20 64 
3324b     6F 20 6C 6F 
3324f     67 69 63 20 
33253     6F 70 65 72 
33257     61 74 69 6F 
3325b     6E 20 6F 6E 
3325f     20 73 74 72 
33263     69 6E 67 20 
33267     6F 72 20 66 
3326b     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3326f     00          | 	byte	0
33270                 | LR__6109
33270     55 6E 6B 6E 
33274     6F 77 6E 20 
33278     65 72 72 6F 
3327c     72 20 77 68 
33280     69 6C 65 20 
33284     64 6F 69 6E 
33288     67 20 6C 6F 
3328c     67 69 63 20 
33290     6F 70 65 72 
33294     61 74 69 6F 
33298     6E          | 	byte	"Unknown error while doing logic operation"
33299     00          | 	byte	0
3329a                 | LR__6110
3329a     43 61 6E 6E 
3329e     6F 74 20 6D 
332a2     75 6C 74 69 
332a6     70 6C 79 20 
332aa     73 74 72 69 
332ae     6E 67 73    | 	byte	"Cannot multiply strings"
332b1     00          | 	byte	0
332b2                 | LR__6111
332b2     55 6E 6B 6E 
332b6     6F 77 6E 20 
332ba     65 72 72 6F 
332be     72 20 77 68 
332c2     69 6C 65 20 
332c6     6D 75 6C 74 
332ca     69 70 6C 79 
332ce     69 6E 67    | 	byte	"Unknown error while multiplying"
332d1     00          | 	byte	0
332d2                 | LR__6112
332d2     43 61 6E 6E 
332d6     6F 74 20 64 
332da     69 76 69 64 
332de     65 20 73 74 
332e2     72 69 6E 67 
332e6     73          | 	byte	"Cannot divide strings"
332e7     00          | 	byte	0
332e8                 | LR__6113
332e8     55 6E 6B 6E 
332ec     6F 77 6E 20 
332f0     65 72 72 6F 
332f4     72 20 77 68 
332f8     69 6C 65 20 
332fc     64 69 76 69 
33300     64 69 6E 67 | 	byte	"Unknown error while dividing"
33304     00          | 	byte	0
33305                 | LR__6114
33305     43 61 6E 6E 
33309     6F 74 20 63 
3330d     6F 6D 70 75 
33311     74 65 20 61 
33315     20 70 6F 77 
33319     65 72 20 6F 
3331d     66 20 61 20 
33321     73 74 72 69 
33325     6E 67       | 	byte	"Cannot compute a power of a string"
33327     00          | 	byte	0
33328                 | LR__6115
33328     55 6E 6B 6E 
3332c     6F 77 6E 20 
33330     65 72 72 6F 
33334     72 20 77 68 
33338     69 6C 65 20 
3333c     63 6F 6D 70 
33340     75 74 69 6E 
33344     67 20 61 20 
33348     70 6F 77 65 
3334c     72          | 	byte	"Unknown error while computing a power"
3334d     00          | 	byte	0
3334e                 | LR__6116
3334e     52 69 67 68 
33352     74 20 70 61 
33356     72 65 6E 74 
3335a     68 65 73 69 
3335e     73 20 65 78 
33362     70 65 63 74 
33366     65 64       | 	byte	"Right parenthesis expected"
33368     00          | 	byte	0
33369                 | LR__6117
33369     45 78 70 65 
3336d     63 74 65 64 
33371     20 73 74 72 
33375     69 6E 67    | 	byte	"Expected string"
33378     00          | 	byte	0
33379                 | LR__6118
33379     45 78 70 65 
3337d     63 74 65 64 
33381     20 66 6C 6F 
33385     61 74       | 	byte	"Expected float"
33387     00          | 	byte	0
33388                 | LR__6119
33388     45 78 70 65 
3338c     63 74 65 64 
33390     20 75 6E 73 
33394     69 67 6E 65 
33398     64 20 69 6E 
3339c     74 65 67 65 
333a0     72          | 	byte	"Expected unsigned integer"
333a1     00          | 	byte	0
333a2                 | LR__6120
333a2     45 78 70 65 
333a6     63 74 65 64 
333aa     20 69 6E 74 
333ae     65 67 65 72 | 	byte	"Expected integer"
333b2     00          | 	byte	0
333b3                 | LR__6121
333b3     4E 6F 20 6D 
333b7     6F 72 65 20 
333bb     76 61 72 69 
333bf     61 62 6C 65 
333c3     20 73 6C 6F 
333c7     74 73       | 	byte	"No more variable slots"
333c9     00          | 	byte	0
333ca                 | LR__6122
333ca     56 61 72 69 
333ce     61 62 6C 65 
333d2     20 6E 6F 74 
333d6     20 66 6F 75 
333da     6E 64       | 	byte	"Variable not found"
333dc     00          | 	byte	0
333dd                 | LR__6123
333dd     43 6F 6D 6D 
333e1     61 20 65 78 
333e5     70 65 63 74 
333e9     65 64       | 	byte	"Comma expected"
333eb     00          | 	byte	0
333ec                 | LR__6124
333ec     43 6F 6D 6D 
333f0     61 20 6F 72 
333f4     20 73 65 6D 
333f8     69 63 6F 6C 
333fc     6F 6E 20 65 
33400     78 70 65 63 
33404     74 65 64    | 	byte	"Comma or semicolon expected"
33407     00          | 	byte	0
33408                 | LR__6125
33408     55 6E 6B 6E 
3340c     6F 77 6E 20 
33410     63 6F 6D 6D 
33414     61 6E 64    | 	byte	"Unknown command"
33417     00          | 	byte	0
33418                 | LR__6126
33418     53 74 61 63 
3341c     6B 20 75 6E 
33420     64 65 72 66 
33424     6C 6F 77    | 	byte	"Stack underflow"
33427     00          | 	byte	0
33428                 | LR__6127
33428     43 61 6E 6E 
3342c     6F 74 20 65 
33430     78 65 63 75 
33434     74 65 20 67 
33438     6F 74 6F 20 
3343c     6F 72 20 67 
33440     6F 73 75 62 
33444     20 69 6E 20 
33448     74 68 65 20 
3344c     69 6D 6D 65 
33450     64 69 61 74 
33454     65 20 6D 6F 
33458     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
3345a     00          | 	byte	0
3345b                 | LR__6128
3345b     43 61 6E 6E 
3345f     6F 74 20 6C 
33463     6F 61 64 20 
33467     66 72 6F 6D 
3346b     20 74 68 69 
3346f     73 20 66 69 
33473     6C 65       | 	byte	"Cannot load from this file"
33475     00          | 	byte	0
33476                 | LR__6129
33476     54 68 65 20 
3347a     70 72 6F 67 
3347e     72 61 6D 20 
33482     69 73 20 65 
33486     6D 70 74 79 | 	byte	"The program is empty"
3348a     00          | 	byte	0
3348b                 | LR__6130
3348b     49 66 20 61 
3348f     66 74 65 72 
33493     20 69 66    | 	byte	"If after if"
33496     00          | 	byte	0
33497                 | LR__6131
33497     45 6D 70 74 
3349b     79 20 65 78 
3349f     70 72 65 73 
334a3     73 69 6F 6E | 	byte	"Empty expression"
334a7     00          | 	byte	0
334a8                 | LR__6132
334a8     53 74 72 69 
334ac     6E 67 20 65 
334b0     78 70 65 63 
334b4     74 65 64    | 	byte	"String expected"
334b7     00          | 	byte	0
334b8                 | LR__6133
334b8     49 6E 74 65 
334bc     72 70 72 65 
334c0     74 65 72 20 
334c4     69 6E 74 65 
334c8     72 6E 61 6C 
334cc     20 65 72 72 
334d0     6F 72       | 	byte	"Interpreter internal error"
334d2     00          | 	byte	0
334d3                 | LR__6134
334d3     45 78 70 65 
334d7     63 74 65 64 
334db     20 61 73 73 
334df     69 67 6E    | 	byte	"Expected assign"
334e2     00          | 	byte	0
334e3                 | LR__6135
334e3     45 78 70 65 
334e7     63 74 65 64 
334eb     20 27 74 6F 
334ef     27          | 	byte	"Expected 'to'"
334f0     00          | 	byte	0
334f1                 | LR__6136
334f1     45 78 70 65 
334f5     63 74 65 64 
334f9     20 69 6E 74 
334fd     65 67 65 72 
33501     20 76 61 72 
33505     69 61 62 6C 
33509     65          | 	byte	"Expected integer variable"
3350a     00          | 	byte	0
3350b                 | LR__6137
3350b     55 6E 69 6E 
3350f     69 74 69 61 
33513     6C 69 7A 65 
33517     64 20 76 61 
3351b     72 69 61 62 
3351f     6C 65 20 69 
33523     6E 20 27 6E 
33527     65 78 74 27 
3352b     2C 20 75 73 
3352f     65 20 27 66 
33533     6F 72 27 20 
33537     62 65 66 6F 
3353b     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
3353d     00          | 	byte	0
3353e                 | LR__6138
3353e     4E 6F 20 6D 
33542     6F 72 65 20 
33546     73 6C 6F 74 
3354a     73 20 66 6F 
3354e     72 20 27 66 
33552     6F 72 27    | 	byte	"No more slots for 'for'"
33555     00          | 	byte	0
33556                 | LR__6139
33556     27 4E 65 78 
3355a     74 27 20 64 
3355e     6F 65 73 6E 
33562     27 74 20 6D 
33566     61 74 63 68 
3356a     20 27 66 6F 
3356e     72 27       | 	byte	"'Next' doesn't match 'for'"
33570     00          | 	byte	0
33571                 | LR__6140
33571     27 47 6F 74 
33575     6F 27 20 74 
33579     61 72 67 65 
3357d     74 20 6C 69 
33581     6E 65 20 6E 
33585     6F 74 20 66 
33589     6F 75 6E 64 | 	byte	"'Goto' target line not found"
3358d     00          | 	byte	0
3358e                 | LR__6141
3358e     42 61 64 20 
33592     6E 75 6D 62 
33596     65 72 20 6F 
3359a     66 20 70 61 
3359e     72 61 6D 65 
335a2     74 65 72 73 | 	byte	"Bad number of parameters"
335a6     00          | 	byte	0
335a7                 | LR__6142
335a7     46 75 6E 63 
335ab     74 69 6F 6E 
335af     20 75 6E 64 
335b3     65 66 69 6E 
335b7     65 64 20 66 
335bb     6F 72 20 73 
335bf     74 72 69 6E 
335c3     67 73       | 	byte	"Function undefined for strings"
335c5     00          | 	byte	0
335c6                 | LR__6143
335c6     42 61 64 20 
335ca     70 61 72 61 
335ce     6D 65 74 65 
335d2     72          | 	byte	"Bad parameter"
335d3     00          | 	byte	0
335d4                 | LR__6144
335d4     43 61 6E 6E 
335d8     6F 74 20 64 
335dc     65 63 6C 61 
335e0     72 65 20 61 
335e4     6E 20 61 72 
335e8     72 61 79 3A 
335ec     20 74 68 65 
335f0     20 76 61 72 
335f4     69 61 62 6C 
335f8     65 20 65 78 
335fc     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
33600     00          | 	byte	0
33601                 | LR__6145
33601     45 78 70 65 
33605     63 74 65 64 
33609     20 27 28 27 | 	byte	"Expected '('"
3360d     00          | 	byte	0
3360e                 | LR__6146
3360e     45 78 70 65 
33612     63 74 65 64 
33616     20 27 29 27 
3361a     20 6F 72 20 
3361e     27 2C 27    | 	byte	"Expected ')' or ','"
33621     00          | 	byte	0
33622                 | LR__6147
33622     4E 6F 20 6D 
33626     6F 72 65 20 
3362a     74 68 61 6E 
3362e     20 33 20 64 
33632     69 6D 65 6E 
33636     73 69 6F 6E 
3363a     73 20 73 75 
3363e     70 70 6F 72 
33642     74 65 64    | 	byte	"No more than 3 dimensions supported"
33645     00          | 	byte	0
33646                 | LR__6148
33646     56 61 72 69 
3364a     61 62 6C 65 
3364e     20 6E 61 6D 
33652     65 20 65 78 
33656     70 65 63 74 
3365a     65 64       | 	byte	"Variable name expected"
3365c     00          | 	byte	0
3365d                 | LR__6149
3365d     54 79 70 65 
33661     20 6E 61 6D 
33665     65 20 65 78 
33669     70 65 63 74 
3366d     65 64       | 	byte	"Type name expected"
3366f     00          | 	byte	0
33670                 | LR__6150
33670     54 79 70 65 
33674     20 6E 6F 74 
33678     20 73 75 70 
3367c     70 6F 72 74 
33680     65 64 20 79 
33684     65 74       | 	byte	"Type not supported yet"
33686     00          | 	byte	0
33687                 | LR__6151
33687     41 72 72 61 
3368b     79 20 69 6E 
3368f     64 65 78 20 
33693     6F 75 74 20 
33697     6F 66 20 72 
3369b     61 6E 67 65 | 	byte	"Array index out of range"
3369f     00          | 	byte	0
336a0                 | LR__6152
336a0     42 61 64 20 
336a4     74 79 70 65 
336a8     20 77 68 69 
336ac     6C 65 20 61 
336b0     73 73 69 67 
336b4     6E 69 6E 67 
336b8     20 74 6F 20 
336bc     61 72 72 61 
336c0     79          | 	byte	"Bad type while assigning to array"
336c1     00          | 	byte	0
336c2                 | LR__6153
336c2     54 6F 6F 20 
336c6     6D 61 6E 79 
336ca     20 76 61 72 
336ce     69 61 62 6C 
336d2     65 73       | 	byte	"Too many variables"
336d4     00          | 	byte	0
336d5                 | LR__6154
336d5     27 54 68 65 
336d9     6E 27 20 65 
336dd     78 70 65 63 
336e1     74 65 64    | 	byte	"'Then' expected"
336e4     00          | 	byte	0
336e5                 | LR__6155
336e5     44 69 72 65 
336e9     63 74 6F 72 
336ed     79 20 64 6F 
336f1     65 73 6E 27 
336f5     74 20 65 78 
336f9     69 73 74    | 	byte	"Directory doesn't exist"
336fc     00          | 	byte	0
336fd                 | LR__6156
336fd     55 6E 65 78 
33701     70 65 63 74 
33705     65 64 20 65 
33709     6E 64 20 6F 
3370d     66 20 6C 69 
33711     6E 65       | 	byte	"Unexpected end of line"
33713     00          | 	byte	0
33714                 | LR__6157
33714     4E 6F 20 6D 
33718     6F 72 65 20 
3371c     64 61 74 61 | 	byte	"No more data"
33720     00          | 	byte	0
33721                 | LR__6158
33721     45 72 72 6F 
33725     72 20       | 	byte	"Error "
33727     00          | 	byte	0
33728                 | LR__6159
33728     20 2D 20    | 	byte	" - "
3372b     00          | 	byte	0
3372c                 | LR__6160
3372c     20 69 6E 20 
33730     6C 69 6E 65 
33734     20          | 	byte	" in line "
33735     00          | 	byte	0
33736                 | LR__6161
33736                 | 	byte	
33736     00          | 	byte	0
33737                 | LR__6162
33737     2F 73 64    | 	byte	"/sd"
3373a     00          | 	byte	0
3373b                 | LR__6163
3373b     2F 73 64 2F 
3373f     62 61 73    | 	byte	"/sd/bas"
33742     00          | 	byte	0
33743                 | LR__6164
33743     2F 73 64 2F 
33747     62 61 73    | 	byte	"/sd/bas"
3374a     00          | 	byte	0
3374b                 | LR__6165
3374b     20 42 41 53 
3374f     49 43 20 62 
33753     79 74 65 73 
33757     20 66 72 65 
3375b     65          | 	byte	" BASIC bytes free"
3375c     00          | 	byte	0
3375d                 | LR__6166
3375d     52 65 61 64 
33761     79          | 	byte	"Ready"
33762     00          | 	byte	0
33763                 | LR__6167
33763     6E 6F 6E 61 
33767     6D 65 2E 62 
3376b     61 73       | 	byte	"noname.bas"
3376d     00          | 	byte	0
3376e                 | LR__6168
3376e     2F 73 64 2F 
33772     62 61 73 2F 
33776     61 75 74 6F 
3377a     72 75 6E 2E 
3377e     62 61 73    | 	byte	"/sd/bas/autorun.bas"
33781     00          | 	byte	0
33782                 | LR__6169
33782     72 75 6E 20 
33786     61 75 74 6F 
3378a     72 75 6E 2E 
3378e     62 61 73    | 	byte	"run autorun.bas"
33791     00          | 	byte	0
33792                 | LR__6170
33792                 | 	byte	
33792     00          | 	byte	0
33793     00          | 	alignl
33794                 | _dat_
33794     00 00 00 00 
33798     00 00 00 00 
3379c     00 00 00 00 
337a0     00 00 00 00 | 	byte	$00[16]
337a4     61 41 17 0E 
337a8     62 42 00 00 
337ac     63 43 19 10 
337b0     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
337b4     65 45 18 0F 
337b8     66 46 00 00 
337bc     67 47 00 00 
337c0     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
337c4     69 49 00 00 
337c8     6A 4A 00 00 
337cc     6B 4B 00 00 
337d0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
337d4     6D 4D 00 00 
337d8     6E 4E 1A 11 
337dc     6F 4F 1E 15 
337e0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
337e4     71 51 00 00 
337e8     72 52 00 00 
337ec     73 53 1B 12 
337f0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
337f4     75 55 00 00 
337f8     76 56 00 00 
337fc     77 57 00 00 
33800     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
33804     79 59 00 00 
33808     7A 5A 1D 14 
3380c     31 21 04 00 
33810     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
33814     33 23 06 00 
33818     34 24 07 00 
3381c     35 25 08 00 
33820     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
33824     37 26 0A 00 
33828     38 2A 0B 00 
3382c     39 28 0C 00 
33830     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
33834     8D 8D 00 00 
33838     9B 9B 00 00 
3383c     88 88 00 00 
33840     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
33844     20 20 00 00 
33848     2D 5F 00 00 
3384c     3D 2B 00 00 
33850     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
33854     5D 7D 00 00 
33858     5C 7C 00 00 
3385c     23 7E 00 00 
33860     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33864     27 22 00 00 
33868     60 7E 03 00 
3386c     2C 3C 00 00 
33870     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33874     2F 3F 00 00 
33878     B9 B9 00 00 
3387c     BA 00 00 00 
33880     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33884     BC 00 00 00 
33888     BD 00 00 00 
3388c     BE 00 00 00 
33890     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33894     C0 00 00 00 
33898     C1 00 00 00 
3389c     C2 00 00 00 
338a0     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
338a4     C4 00 00 00 
338a8     C5 00 00 00 
338ac     C6 00 00 00 
338b0     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
338b4     C8 00 00 00 
338b8     C9 00 00 00 
338bc     CA 00 00 00 
338c0     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
338c4     7F 7F 00 00 
338c8     CC 00 00 00 
338cc     CD 00 00 00 
338d0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
338d4     CF 00 00 00 
338d8     D0 00 00 00 
338dc     D1 00 00 00 
338e0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
338e4     2F 2F 00 00 
338e8     2A 2A 00 00 
338ec     2D 2D 00 00 
338f0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
338f4     8D 8D 00 00 
338f8     31 31 00 00 
338fc     32 32 00 00 
33900     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
33904     34 34 00 00 
33908     35 35 00 00 
3390c     36 36 00 00 
33910     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
33914     38 38 00 00 
33918     39 39 00 00 
3391c     30 30 00 00 
33920     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
33924     5C 7C 00 00 
33928     00 00 00 00 
3392c     00 00 00 00 
33930     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
33934     00 00 00 00 
      ...             
3398c     00 00 00 00 
33990     00 00 00 00 | 	byte	$00[96]
33994     2B 00 A6 F2 
33998     24 A7 09 80 
3399c     5B 88 4D 89 
339a0     80 88 A5 88 | atari_spl file "atari.spl"
339a4     6D 88 B8 88 
339a8     80 88 CB 88 
339ac     92 88 A5 88 
339b0     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
339b4     A5 88 CA 88 
339b8     A6 88 DD 88 
339bc     B8 88 AB 89 
339c0     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
339c4     C8 AD C6 F1 
339c8     91 06 B6 FF 
339cc     13 00 4A 00 
339d0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
339d4     5D 00 5E 00 
339d8     5D 00 5E 00 
339dc     5E 00 5D 00 
339e0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
339e4     38 00 83 00 
339e8     25 00 83 00 
339ec     C3 FE D1 04 
339f0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
339f4     48 88 38 85 
339f8     41 8A CB 88 
339fc     28 89 B8 88 
33a00     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
33a04     15 89 03 89 
33a08     02 89 15 89 
33a0c     16 89 15 89 
33a10     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
33a14     15 89 3A 89 
33a18     72 89 E3 89 
33a1c     52 83 AD 97 
33a20     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
33a24     0C 02 B6 FF 
33a28     E1 00 A8 00 
33a2c     F3 00 A8 00 
33a30     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
33a34     CE 00 CD 00 
33a38     CD 00 BA 00 
33a3c     E1 00 BB 00 
33a40     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33a44     DF 00 C9 FF 
33a48     E6 01 B6 06 
33a4c     EE DD 8D 98 
33a50     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33a54     97 89 73 89 
33a58     3B 89 60 89 
33a5c     60 89 60 89 
33a60     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33a64     73 89 72 89 
33a68     85 89 73 89 
33a6c     AA 89 60 89 
33a70     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33a74     E8 8A 18 86 
33a78     92 88 A5 C2 
33a7c     E0 00 C3 05 
33a80     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33a84     F2 00 64 01 
33a88     06 01 3E 01 
33a8c     2B 01 2B 01 
33a90     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33a94     2B 01 2A 01 
33a98     2B 01 2B 01 
33a9c     2B 01 18 01 
33aa0     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33aa4     39 07 61 F3 
33aa8     C0 AF 37 85 
33aac     0F 88 8B 8A 
33ab0     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33ab4     AB 89 D0 89 
33ab8     AB 89 D0 89 
33abc     D0 89 CF 89 
33ac0     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33ac4     D0 89 F5 89 
33ac8     BD 89 08 8A 
33acc     CF 89 E8 8A 
33ad0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33ad4     53 B3 0D F8 
33ad8     F4 07 38 00 
33adc     63 01 63 01 
33ae0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33ae4     88 01 88 01 
33ae8     76 01 88 01 
33aec     88 01 89 01 
33af0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33af4     75 01 AE 01 
33af8     76 01 88 01 
33afc     4A 00 46 06 
33b00     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33b04     08 8A 9A 86 
33b08     33 8B 08 8A 
33b0c     2D 8A F5 89 
33b10     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33b14     2D 8A 2D 8A 
33b18     2E 8A 1B 8A 
33b1c     40 8A 2D 8A 
33b20     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33b24     2E 8A 79 8A 
33b28     66 8A C8 8B 
33b2c     72 82 2B 97 
33b30     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33b34     1D 02 05 01 
33b38     F8 01 C0 01 
33b3c     0B 02 C0 01 
33b40     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33b44     F9 01 D3 01 
33b48     F8 01 D3 01 
33b4c     F8 01 D2 01 
33b50     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33b54     E6 01 2B 01 
33b58     8E 02 5F 07 
33b5c     F7 E2 ED 9C 
33b60     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33b64     E8 8A 78 8A 
33b68     78 8A 65 8A 
33b6c     8B 8A 78 8A 
33b70     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33b74     8B 8A 9D 8A 
33b78     9D 8A 8B 8A 
33b7c     C2 8A 78 8A 
33b80     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33b84     70 8C 18 86 
33b88     8B 8A 23 C9 
33b8c     CB 03 C4 05 
33b90     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33b94     0B 02 7B 02 
33b98     1E 02 55 02 
33b9c     30 02 43 02 
33ba0     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33ba4     43 02 44 02 
33ba8     43 02 30 02 
33bac     68 02 31 02 
33bb0     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33bb4     07 08 3F F7 
33bb8     73 B2 13 85 
33bbc     15 89 ED 8B 
33bc0     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33bc4     B0 8A FB 8A 
33bc8     D5 8A FA 8A 
33bcc     E8 8A FB 8A 
33bd0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33bd4     E8 8A 21 8B 
33bd8     E7 8A 33 8B 
33bdc     E8 8A 26 8C 
33be0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33be4     8D B0 27 F6 
33be8     9C 08 AD 01 
33bec     7B 02 8D 02 
33bf0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33bf4     A1 02 A0 02 
33bf8     A1 02 A0 02 
33bfc     A0 02 A0 02 
33c00     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33c04     7B 02 D8 02 
33c08     7B 02 C6 02 
33c0c     3E 01 C3 05 
33c10     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33c14     00 8C 2A 86 
33c18     E0 8C FA 8A 
33c1c     6A 8B FB 8A 
33c20     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33c24     45 8B 45 8B 
33c28     45 8B 6B 8B 
33c2c     46 8B 59 8B 
33c30     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33c34     6B 8B 6B 8B 
33c38     6B 8B 6B 8B 
33c3c     7D 8B 7D 8B 
33c40     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33c44     90 8B 91 8B 
33c48     90 8B 90 8B 
33c4c     A3 8B A3 8B 
33c50     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33c54     B5 8B B6 8B 
33c58     B5 8B B5 8B 
33c5c     B6 8B C8 8B 
33c60     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33c64     C8 8B DA 8B 
33c68     DB 8B DB 8B 
33c6c     DB 8B DC 8B 
33c70     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33c74     EE 8B EE 8B 
33c78     00 8C 01 8C 
33c7c     00 8C 01 8C 
33c80     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33c84     12 8C 13 8C 
33c88     13 8C 26 8C 
33c8c     26 8C 26 8C 
33c90     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
33c94     38 8C 38 8C 
33c98     38 8C 38 8C 
33c9c     4B 8C 4B 8C 
33ca0     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
33ca4     5E 8C 5E 8C 
33ca8     5E 8C 5E 8C 
33cac     70 8C 70 8C 
33cb0     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
33cb4     70 8C 83 8C 
33cb8     83 8C 83 8C 
33cbc     83 8C 96 8C 
33cc0     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
33cc4     95 8C A9 8C 
33cc8     A9 8C A8 8C 
33ccc     A8 8C A8 8C 
33cd0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
33cd4     BB 8C BB 8C 
33cd8     BB 8C CE 8C 
33cdc     CE 8C CE 8C 
33ce0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
33ce4     E0 8C E1 8C 
33ce8     E1 8C E0 8C 
33cec     F4 8C F2 8C 
33cf0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
33cf4     05 8D 05 8D 
33cf8     06 8D 06 8D 
33cfc     19 8D 19 8D 
33d00     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
33d04     18 8D 2B 8D 
33d08     2B 8D 2B 8D 
33d0c     2A 8D 3E 8D 
33d10     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
33d14     3E 8D 51 8D 
33d18     50 8D 50 8D 
33d1c     50 8D 51 8D 
33d20     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
33d24     63 8D 64 8D 
33d28     76 8D 75 8D 
33d2c     75 8D 76 8D 
33d30     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
33d34     88 8D 88 8D 
33d38     89 8D 9B 8D 
33d3c     9A 8D 9B 8D 
33d40     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
33d44     AD 8D AE 8D 
33d48     AD 8D AE 8D 
33d4c     C1 8D C1 8D 
33d50     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
33d54     D3 8D D3 8D 
33d58     D3 8D D3 8D 
33d5c     D3 8D E6 8D 
33d60     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
33d64     E6 8D E6 8D 
33d68     F9 8D F9 8D 
33d6c     F9 8D F8 8D 
33d70     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
33d74     0B 8E 0B 8E 
33d78     1D 8E 1D 8E 
33d7c     1E 8E 1E 8E 
33d80     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
33d84     31 8E 31 8E 
33d88     31 8E 42 8E 
33d8c     43 8E 43 8E 
33d90     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
33d94     56 8E 56 8E 
33d98     55 8E 56 8E 
33d9c     68 8E 69 8E 
33da0     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
33da4     69 8E 7B 8E 
33da8     7C 8E 7B 8E 
33dac     7B 8E 8D 8E 
33db0     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
33db4     8D 8E A1 8E 
33db8     A0 8E A1 8E 
33dbc     A1 8E A0 8E 
33dc0     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
33dc4     B3 8E B3 8E 
33dc8     C6 8E C5 8E 
33dcc     C6 8E C6 8E 
33dd0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
33dd4     D8 8E D9 8E 
33dd8     D8 8E EC 8E 
33ddc     EB 8E EC 8E 
33de0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
33de4     FE 8E FE 8E 
33de8     FE 8E FE 8E 
33dec     10 8F 10 8F 
33df0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
33df4     11 8F 23 8F 
33df8     24 8F 23 8F 
33dfc     24 8F 37 8F 
33e00     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
33e04     36 8F 36 8F 
33e08     48 8F 49 8F 
33e0c     49 8F 49 8F 
33e10     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
33e14     5B 8F 5C 8F 
33e18     5B 8F 6E 8F 
33e1c     6E 8F 6E 8F 
33e20     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
33e24     81 8F 81 8F 
33e28     81 8F 81 8F 
33e2c     93 8F 93 8F 
33e30     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
33e34     93 8F A6 8F 
33e38     A6 8F A6 8F 
33e3c     A6 8F B9 8F 
33e40     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
33e44     B9 8F B9 8F 
33e48     CC 8F CB 8F 
33e4c     CB 8F CC 8F 
33e50     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
33e54     DF 8F DE 8F 
33e58     DE 8F F1 8F 
33e5c     F1 8F F1 8F 
33e60     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
33e64     03 90 04 90 
33e68     04 90 04 90 
33e6c     16 90 17 90 
33e70     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
33e74     29 90 28 90 
33e78     29 90 28 90 
33e7c     29 90 3C 90 
33e80     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
33e84     3C 90 4F 90 
33e88     4E 90 4E 90 
33e8c     4E 90 4E 90 
33e90     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
33e94     61 90 61 90 
33e98     73 90 74 90 
33e9c     74 90 74 90 
33ea0     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
33ea4     87 90 86 90 
33ea8     87 90 86 90 
33eac     99 90 99 90 
33eb0     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
33eb4     AB 90 AB 90 
33eb8     AC 90 AB 90 
33ebc     AB 90 BF 90 
33ec0     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
33ec4     BE 90 D1 90 
33ec8     D0 90 D1 90 
33ecc     D1 90 D1 90 
33ed0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
33ed4     E3 90 E4 90 
33ed8     F6 90 F6 90 
33edc     F6 90 F6 90 
33ee0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
33ee4     09 91 0A 91 
33ee8     0A 91 1C 91 
33eec     1C 91 1C 91 
33ef0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
33ef4     2F 91 2E 91 
33ef8     2F 91 2F 91 
33efc     2E 91 41 91 
33f00     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
33f04     41 91 53 91 
33f08     54 91 54 91 
33f0c     53 91 54 91 
33f10     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
33f14     67 91 67 91 
33f18     79 91 7A 91 
33f1c     79 91 78 91 
33f20     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
33f24     8C 91 8B 91 
33f28     8C 91 8C 91 
33f2c     9E 91 9E 91 
33f30     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
33f34     B1 91 B1 91 
33f38     B2 91 B1 91 
33f3c     B1 91 C4 91 
33f40     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
33f44     C4 91 D6 91 
33f48     D7 91 D7 91 
33f4c     D7 91 D6 91 
33f50     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
33f54     EA 91 EA 91 
33f58     EA 91 FC 91 
33f5c     FC 91 FB 91 
33f60     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
33f64     0E 92 0F 92 
33f68     0F 92 0E 92 
33f6c     21 92 21 92 
33f70     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
33f74     21 92 34 92 
33f78     33 92 34 92 
33f7c     34 92 47 92 
33f80     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
33f84     46 92 47 92 
33f88     59 92 59 92 
33f8c     59 92 59 92 
33f90     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
33f94     6C 92 6C 92 
33f98     6B 92 7E 92 
33f9c     7E 92 7E 92 
33fa0     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
33fa4     92 92 91 92 
33fa8     91 92 90 92 
33fac     91 92 A4 92 
33fb0     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
33fb4     A3 92 B6 92 
33fb8     B6 92 B7 92 
33fbc     B7 92 B6 92 
33fc0     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
33fc4     CA 92 C9 92 
33fc8     CA 92 DC 92 
33fcc     DC 92 DC 92 
33fd0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
33fd4     EF 92 EF 92 
33fd8     EF 92 EF 92 
33fdc     01 93 01 93 
33fe0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
33fe4     15 93 14 93 
33fe8     14 93 14 93 
33fec     14 93 27 93 
33ff0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
33ff4     27 93 39 93 
33ff8     3A 93 39 93 
33ffc     39 93 39 93 
34000     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
34004     4B 93 4C 93 
34008     5F 93 5F 93 
3400c     5F 93 5E 93 
34010     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
34014     5F 93 84 93 
34018     4C 93 96 93 
3401c     5F 93 AE 94 
34020     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
34024     7B C1 00 00 
34028     00 00 00 00 
3402c     00 00 00 00 
34030     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34034     00 00 00 00 | 	byte	$00, $00, $00, $00
34038     7A D7 00 80 
3403c     87 8A 48 8F 
34040     EC 8C 76 8D 
34044     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
34048     3C 8D 82 8D 
3404c     42 8D 88 8D 
34050     8C 8D 8E 8D 
34054     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
34058     97 8D DE 8D 
3405c     E1 8D F1 8E 
34060     D8 8C A3 83 
34064     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
34068     65 71 C9 65 
3406c     FC 64 C4 65 
34070     C1 65 BF 65 
34074     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
34078     B6 65 B4 65 
3407c     B2 65 AE 65 
34080     AC 65 ED 65 
34084     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
34088     5E 65 25 66 
3408c     FA 62 23 6B 
34090     B5 6C 61 0A 
34094     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
34098     5D 90 BE 8D 
3409c     47 8E C3 8D 
340a0     09 8E C9 8D 
340a4     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
340a8     15 8E 19 8E 
340ac     1B 8E 62 8E 
340b0     64 8E 68 8E 
340b4     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
340b8     B5 8E 4C 90 
340bc     FA 84 3C 9D 
340c0     98 13 79 6D 
340c4     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
340c8     D9 66 50 66 
340cc     D4 66 4B 66 
340d0     8C 66 46 66 
340d4     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
340d8     81 66 3A 66 
340dc     7C 66 36 66 
340e0     76 66 30 66 
340e4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
340e8     6B 66 88 72 
340ec     BF 37 E7 B7 
340f0     75 83 8B 8E 
340f4     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
340f8     94 8E 96 8E 
340fc     DD 8E 9C 8E 
34100     E2 8E A2 8E 
34104     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
34108     EE 8E AE 8E 
3410c     38 8F B5 8E 
34110     3F 8F FD 8E 
34114     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
34118     A5 87 1E E3 
3411c     6D 5D FA 71 
34120     41 64 25 67 
34124     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
34128     D9 66 1A 67 
3412c     18 67 15 67 
34130     12 67 0F 67 
34134     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
34138     07 67 C0 66 
3413c     01 67 BC 66 
34140     B8 66 DE 64 
34144     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
34148     43 E5 1F 8B 
3414c     14 8A F1 90 
34150     1C 8F 63 8F 
34154     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
34158     29 8F 6E 8F 
3415c     72 8F 75 8F 
34160     34 8F BE 8F 
34164     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
34168     84 8F 87 8F 
3416c     CC 8F 56 90 
34170     67 91 49 80 
34174     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
34178     46 77 A6 66 
3417c     E8 66 B0 67 
34180     AD 67 ED 67 
34184     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
34188     A2 67 E3 67 
3418c     9D 67 9A 67 
34190     98 67 94 67 
34194     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
34198     49 67 CD 67 
3419c     28 65 5F 6E 
341a0     82 67 3A 01 
341a4     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
341a8     C2 91 A9 8F 
341ac     EF 8F AE 8F 
341b0     F4 8F B5 8F 
341b4     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
341b8     01 90 03 90 
341bc     07 90 09 90 
341c0     0C 90 53 90 
341c4     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
341c8     18 90 44 93 
341cc     85 84 D6 9D 
341d0     87 1F 2F 75 
341d4     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
341d8     C4 68 F6 67 
341dc     BE 68 F1 67 
341e0     76 68 2E 68 
341e4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
341e8     27 68 24 68 
341ec     64 68 1E 68 
341f0     5F 68 19 68 
341f4     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
341f8     DC 68 56 72 
341fc     7E 36 C2 B8 
34200     D7 84 73 90 
34204     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
34208     7B 90 7F 90 
3420c     82 90 84 90 
34210     CB 90 8B 90 
34214     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
34218     D7 90 96 90 
3421c     20 91 59 90 
34220     25 91 A2 90 
34224     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
34228     D0 89 40 EE 
3422c     12 64 C4 71 
34230     29 66 0C 69 
34234     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
34238     C0 68 02 69 
3423c     FE 68 FB 68 
34240     F9 68 F6 68 
34244     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
34248     EE 68 A8 68 
3424c     2C 69 5F 68 
34250     E2 68 81 66 
34254     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
34258     1E EB A6 8A 
3425c     73 8B 5E 93 
34260     7B 90 48 91 
34264     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
34268     0D 91 11 91 
3426c     14 91 16 91 
34270     5C 91 1C 91 
34274     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
34278     68 91 AF 91 
3427c     2A 91 B5 91 
34280     75 91 1A 94 
34284     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
34288     70 0E CB 6C 
3428c     5D 6E C4 67 
34290     99 69 54 69 
34294     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
34298     D2 69 49 69 
3429c     89 69 86 69 
342a0     40 69 C4 69 
342a4     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
342a8     35 69 76 69 
342ac     58 67 EB 6D 
342b0     E9 6D 89 0F 
342b4     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
342b8     33 94 94 91 
342bc     D9 91 56 91 
342c0     E0 91 9F 91 
342c4     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
342c8     EC 91 EE 91 
342cc     F1 91 F4 91 
342d0     F7 91 3D 92 
342d4     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
342d8     46 92 21 94 
342dc     11 89 A4 9D 
342e0     FD 0E 8F 6C 
342e4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
342e8     28 6A E1 69 
342ec     65 6A 1F 6A 
342f0     5F 6A 1A 6A 
342f4     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
342f8     54 6A 0F 6A 
342fc     4F 6A 09 6A 
34300     06 6A 03 6A 
34304     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
34308     23 68 69 77 
3430c     3A 4D 38 CA 
34310     38 86 4E 91 
34314     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
34318     64 92 24 92 
3431c     6A 92 2A 92 
34320     70 92 30 92 
34324     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
34328     7B 92 7E 92 
3432c     C5 92 84 92 
34330     CB 92 8A 92 
34334     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
34338     4D 8D F9 E2 
3433c     97 59 FE 74 
34340     DB 68 6D 6A 
34344     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
34348     A8 6A A5 6A 
3434c     A3 6A 9F 6A 
34350     9D 6A 9B 6A 
34354     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
34358     D6 6A 8F 6A 
3435c     CF 6A 46 6A 
34360     CA 6A E1 67 
34364     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
34368     D3 F7 15 92 
3436c     90 8C BF 94 
34370     A6 92 EB 92 
34374     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
34378     B1 92 F7 92 
3437c     FA 92 FD 92 
34380     00 93 02 93 
34384     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
34388     4F 93 52 93 
3438c     54 93 22 94 
34390     5A 93 8F 88 
34394     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
34398     1C 77 07 6C 
3439c     E8 69 7A 6B 
343a0     34 6B 75 6B 
343a4     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
343a8     29 6B 26 6B 
343ac     24 6B 21 6B 
343b0     1D 6B 5E 6B 
343b4     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
343b8     12 6B 52 6B 
343bc     34 69 34 6E 
343c0     BA 73 A4 24 
343c4     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
343c8     7A 94 B3 93 
343cc     72 93 31 93 
343d0     78 93 7A 93 
343d4     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
343d8     83 93 86 93 
343dc     89 93 D0 93 
343e0     D2 93 D5 93 
343e4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
343e8     DD 93 40 96 
343ec     30 8B 99 9C 
343f0     52 10 94 71 
343f4     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
343f8     46 6C 79 6B 
343fc     40 6C B7 6B 
34400     F7 6B B1 6B 
34404     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
34408     EC 6B A5 6B 
3440c     A2 6B 9F 6B 
34410     9D 6B 9A 6B 
34414     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
34418     C8 6A E4 76 
3441c     20 4B F9 CE 
34420     2E 8A 1A 92 
34424     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
34428     FB 93 BA 93 
3442c     01 94 03 94 
34430     4A 94 09 94 
34434     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
34438     55 94 14 94 
3443c     9E 94 1A 94 
34440     61 94 20 94 
34444     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
34448     3E 87 E5 CD 
3444c     5F 50 6C 78 
34450     B5 6A 04 6C 
34454     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
34458     83 6C 7F 6C 
3445c     7C 6C 36 6C 
34460     76 6C 74 6C 
34464     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
34468     6B 6C 25 6C 
3446c     66 6C 1F 6C 
34470     1D 6C 41 6A 
34474     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
34478     BA FA FC 94 
3447c     5B 8D 97 96 
34480     3B 94 C5 94 
34484     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
34488     89 94 8C 94 
3448c     8F 94 92 94 
34490     94 94 DB 94 
34494     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
34498     E4 94 E7 94 
3449c     2D 95 74 95 
344a0     C8 96 15 89 
344a4     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
344a8     CB 75 31 6F 
344ac     7E 6B 10 6D 
344b0     C9 6C 0A 6D 
344b4     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
344b8     BD 6C FF 6C 
344bc     FB 6C F9 6C 
344c0     B2 6C F3 6C 
344c4     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
344c8     A7 6C E8 6C 
344cc     0D 6B 85 6F 
344d0     C7 74 10 28 
344d4     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
344d8     96 96 47 95 
344dc     06 95 0A 95 
344e0     0C 95 0F 95 
344e4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
344e8     17 95 5E 95 
344ec     61 95 63 95 
344f0     22 95 AC 95 
344f4     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
344f8     72 95 17 98 
344fc     59 8E 01 96 
34500     CF FC 5A 68 
34504     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
34508     96 6D 50 6D 
3450c     D5 6D 4A 6D 
34510     8C 6D 89 6D 
34514     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
34518     80 6D 3A 6D 
3451c     7A 6D 77 6D 
34520     75 6D 71 6D 
34524     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
34528     18 6C BC 78 
3452c     9A 4F 7E CF 
34530     1F 89 F1 93 
34534     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
34538     D2 95 4E 95 
3453c     D7 95 53 95 
34540     DD 95 E0 95 
34544     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
34548     A5 95 EB 95 
3454c     EE 95 F0 95 
34550     37 96 B3 95 
34554     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
34558     1A 98 D5 8D 
3455c     C5 9F CD 0F 
34560     0F 71 F3 73 
34564     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
34568     D9 6D 5E 6E 
3456c     D3 6D 58 6E 
34570     12 6E 0F 6E 
34574     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
34578     49 6E BF 6D 
3457c     87 6E 76 6D 
34580     81 6E 11 6B 
34584     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
34588     3F 09 44 95 
3458c     E5 8D 3F 99 
34590     D4 95 A2 96 
34594     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
34598     23 96 69 96 
3459c     6B 96 6E 96 
345a0     71 96 74 96 
345a4     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
345a8     BF 96 3C 96 
345ac     C6 96 C8 96 
345b0     A3 98 51 8D 
345b4     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
345b8     CF 75 29 73 
345bc     90 6C EC 6E 
345c0     62 6E E7 6E 
345c4     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
345c8     9A 6E 98 6E 
345cc     95 6E 91 6E 
345d0     8E 6E CF 6E 
345d4     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
345d8     40 6E C3 6E 
345dc     E8 6C 45 6F 
345e0     A5 7B C9 35 
345e4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
345e8     2D 98 23 97 
345ec     E1 96 A0 96 
345f0     A4 96 EA 96 
345f4     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
345f8     AF 96 F4 96 
345fc     F8 96 3E 97 
34600     FD 96 43 97 
34604     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
34608     08 97 6B 99 
3460c     D6 92 88 91 
34610     D8 EE 84 66 
34614     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
34618     2E 6F E7 6E 
3461c     6C 6F 24 6F 
34620     21 6F 1F 6F 
34624     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
34628     17 6F 13 6F 
3462c     54 6F 0E 6F 
34630     0B 6F 4B 6F 
34634     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
34638     27 6D 1C 7B 
3463c     19 59 9F DB 
34640     66 8E BC 94 
34644     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
34648     67 97 26 97 
3464c     6D 97 2B 97 
34650     72 97 32 97 
34654     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
34658     C1 97 7F 97 
3465c     C6 97 85 97 
34660     CB 97 CE 97 
34664     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
34668     EC 8A C4 C6 
3466c     68 4C F4 7D 
34670     63 6E E8 6E 
34674     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
34678     ED 6F A7 6F 
3467c     E7 6F A0 6F 
34680     E1 6F 9B 6F 
34684     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
34688     D5 6F 8F 6F 
3468c     CE 6F 45 6F 
34690     86 6F 68 6D 
34694     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
34698     C0 13 AD A2 
3469c     A7 8E 79 99 
346a0     E6 97 E8 97 
346a4     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
346a8     F1 97 F3 97 
346ac     F6 97 F9 97 
346b0     FB 97 FE 97 
346b4     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
346b8     4A 98 0A 98 
346bc     93 98 0F 98 
346c0     7F 9B BF 8C 
346c4     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
346c8     91 7B 62 73 
346cc     1A 6E B9 70 
346d0     EB 6F B3 70 
346d4     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
346d8     25 70 20 70 
346dc     1E 70 1B 70 
346e0     18 70 15 70 
346e4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
346e8     0D 70 09 70 
346ec     07 70 03 70 
346f0     01 70 FD 6F 
346f4     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
346f8     F6 6F F2 6F 
346fc     EF 6F EC 6F 
34700     2C 70 E6 6F 
34704     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
34708     DD 6F 97 6F 
3470c     D7 6F 84 6E 
34710     8F 6F 3F 7D 
34714     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
34716     FF FF FF FF 
3471a     FF FF       | atarist_spl file "atarist.spl" '512
3471c     00 00 00 00 
34720     00 00 00 00 
34724     00 00       | 	byte	$00[10]
34726     17 7F F2 7F 
3472a     B2 7F 72 7F 
3472e     33 7F F4 7E 
34732     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
34736     36 7E F5 7D 
3473a     E9 51 F2 0D 
3473e     8E 00 F3 FD 
34742     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
34746     57 FD 58 FD 
3474a     5B FD 5C FD 
3474e     5C FD 60 7D 
34752     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
34756     D6 7C 98 7C 
3475a     59 7C 1A 7C 
3475e     DC 7B 9E 7B 
34762     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
34766     F3 05 00 FD 
3476a     41 FB EA FA 
3476e     D9 FA DB FA 
34772     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
34776     E4 FA 9B 36 
3477a     F8 7A C0 7A 
3477e     84 7A 45 7A 
34782     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
34786     8E 79 51 79 
3478a     15 79 D7 78 
3478e     3C 1F EB FF 
34792     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
34796     6D F8 65 F8 
3479a     68 F8 6D F8 
3479e     70 F8 74 F8 
347a2     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
347a6     AB 60 79 60 
347aa     4B 60 1A 60 
347ae     E9 5F B9 5F 
347b2     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
347b6     FB 59 B2 0B 
347ba     92 FA 3A F7 
347be     96 F6 79 F6 
347c2     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
347c6     82 F6 86 F6 
347ca     8C F6 DB 5D 
347ce     F1 5E C1 5E 
347d2     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
347d6     34 5E 04 5E 
347da     D6 5D A6 5D 
347de     78 5D D4 3E 
347e2     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
347e6     27 F5 BA F4 
347ea     AB F4 AD F4 
347ee     B2 F4 B8 F4 
347f2     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
347f6     26 5D 2B 5D 
347fa     FC 5C CD 5C 
347fe     9F 5C 70 5C 
34802     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
34806     E5 5B B8 5B 
3480a     DB 24 A7 FC 
3480e     D1 F4 4D F3 
34812     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
34816     04 F3 0B F3 
3481a     11 F3 16 F3 
3481e     DE 18 98 5B 
34822     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
34826     4E 4A 29 48 
3482a     A0 47 6A 47 
3482e     43 47 20 47 
34832     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
34836     E2 F6 98 F2 
3483a     C5 F1 A3 F1 
3483e     A3 F1 A8 F1 
34842     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
34846     BF F1 00 3D 
3484a     EF 46 CD 46 
3484e     AA 46 86 46 
34852     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
34856     1C 46 F9 45 
3485a     D7 45 EE 43 
3485e     DE 02 E8 F3 
34862     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34866     61 F0 65 F0 
3486a     6D F0 74 F0 
3486e     7C F0 84 F0 
34872     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34876     8E 45 6D 45 
3487a     49 45 27 45 
3487e     05 45 E1 44 
34882     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34886     F1 2F A9 FB 
3488a     8B F1 9B EF 
3488e     40 EF 36 EF 
34892     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
34896     4D EF 56 EF 
3489a     5E EF 7B 44 
3489e     8C 44 69 44 
348a2     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
348a6     03 44 E1 43 
348aa     C0 43 F5 37 
348ae     69 33 0F 11 
348b2     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
348b6     66 EE 37 EE 
348ba     38 EE 40 EE 
348be     48 EE 51 EE 
348c2     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
348c6     7D 32 6A 32 
348ca     51 32 37 32 
348ce     1F 32 05 32 
348d2     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
348d6     B9 31 A1 31 
348da     F1 04 F4 F1 
348de     50 EE A0 ED 
348e2     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
348e6     93 ED 9A ED 
348ea     A4 ED AD ED 
348ee     F4 27 C1 31 
348f2     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
348f6     78 31 5F 31 
348fa     46 31 2E 31 
348fe     15 31 FC 30 
34902     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
34906     C4 EF 4A ED 
3490a     DC EC CB EC 
3490e     D2 EC DA EC 
34912     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
34916     F9 EC 64 2F 
3491a     0A 31 F1 30 
3491e     D9 30 C0 30 
34922     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
34926     78 30 5F 30 
3492a     46 30 38 23 
3492e     A6 F6 19 EE 
34932     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
34936     20 EC 28 EC 
3493a     32 EC 3C EC 
3493e     47 EC 51 EC 
34942     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34946     A3 22 93 22 
3494a     7F 22 6E 22 
3494e     5D 22 4C 22 
34952     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34956     77 09 76 F1 
3495a     CC EC F0 EB 
3495e     CD EB CE EB 
34962     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34966     ED EB F5 EB 
3496a     3E F6 6B 22 
3496e     5F 22 4E 22 
34972     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34976     1B 22 0B 22 
3497a     FA 21 E9 21 
3497e     D8 21 4D FF 
34982     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34986     92 EB 7B EB 
3498a     82 EB 8C EB 
3498e     97 EB A1 EB 
34992     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
34996     15 22 04 22 
3499a     F3 21 E3 21 
3499e     D2 21 C0 21 
349a2     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
349a6     8E 21 7D 21 
349aa     9A F8 A4 ED 
349ae     8E EB 2F EB 
349b2     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
349b6     37 EB 42 EB 
349ba     4C EB 57 EB 
349be     B2 17 22 19 
349c2     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
349c6     FD 18 EF 18 
349ca     E3 18 D6 18 
349ce     CA 18 BD 18 
349d2     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
349d6     60 EC 35 EB 
349da     01 EB 01 EB 
349de     0C EB 16 EB 
349e2     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
349e6     34 EB D0 18 
349ea     00 19 F4 18 
349ee     E8 18 DA 18 
349f2     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
349f6     B6 18 A9 18 
349fa     9D 18 91 05 
349fe     F0 EF CA EB 
34a02     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
34a06     E8 EA F2 EA 
34a0a     FE EA 07 EB 
34a0e     12 EB C2 EF 
34a12     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
34a16     D9 18 CD 18 
34a1a     C0 18 B3 18 
34a1e     A7 18 9B 18 
34a22     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
34a26     B8 FC 30 EE 
34a2a     61 EB DC EA 
34a2e     CD EA D2 EA 
34a32     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
34a36     F3 EA FE EA 
34a3a     D2 09 D1 18 
34a3e     C3 18 17 18 
34a42     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34a46     66 11 52 11 
34a4a     49 11 41 11 
34a4e     38 11 E0 F4 
34a52     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34a56     C9 EA C5 EA 
34a5a     CF EA DB EA 
34a5e     E6 EA EF EA 
34a62     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34a66     89 11 80 11 
34a6a     78 11 6E 11 
34a6e     67 11 5D 11 
34a72     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34a76     43 11 32 0D 
34a7a     9C F1 07 EC 
34a7e     F8 EA CD EA 
34a82     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34a86     E4 EA ED EA 
34a8a     F8 EA 02 EB 
34a8e     55 11 91 11 
34a92     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
34a96     75 11 6E 11 
34a9a     64 11 5E 11 
34a9e     54 11 4A 11 
34aa2     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
34aa6     A8 EB F1 EA 
34aaa     D9 EA DC EA 
34aae     E8 EA F1 EA 
34ab2     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
34ab6     A6 EB 9E 11 
34aba     A0 11 96 11 
34abe     8D 11 85 11 
34ac2     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
34ac6     6A 11 CA 0D 
34aca     36 0B 57 F8 
34ace     6C ED 57 EB 
34ad2     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
34ad6     F4 EA FF EA 
34ada     09 EB 15 EB 
34ade     1E EB 1A FD 
34ae2     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
34ae6     ED 0A E8 0A 
34aea     E2 0A DC 0A 
34aee     D6 0A D1 0A 
34af2     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34af6     F8 F3 BC EC 
34afa     57 EB 1E EB 
34afe     18 EB 24 EB 
34b02     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34b06     42 EB 4D EB 
34b0a     08 09 20 0B 
34b0e     1A 0B 14 0B 
34b12     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34b16     04 0B FE 0A 
34b1a     F9 0A F2 0A 
34b1e     84 08 3A F1 
34b22     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34b26     42 EB 42 EB 
34b2a     4E EB 57 EB 
34b2e     62 EB 6B EB 
34b32     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34b36     48 0B 43 0B 
34b3a     3C 0B 36 0B 
34b3e     31 0B 2C 0B 
34b42     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34b46     1B 0B 5C 00 
34b4a     6A EF 1B EC 
34b4e     81 EB 6A EB 
34b52     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34b56     85 EB 8E EB 
34b5a     99 EB A3 EB 
34b5e     DD 05 E5 05 
34b62     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34b66     DB 05 D8 05 
34b6a     D5 05 D1 05 
34b6e     D0 05 CB 05 
34b72     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34b76     0C EC BB EB 
34b7a     B3 EB BB EB 
34b7e     C5 EB D0 EB 
34b82     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34b86     E4 F7 2C 06 
34b8a     28 06 24 06 
34b8e     22 06 1F 06 
34b92     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
34b96     16 06 14 06 
34b9a     0F 06 D0 F3 
34b9e     65 ED 2D EC 
34ba2     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
34ba6     01 EC 0A EC 
34baa     14 EC 1E EC 
34bae     29 EC FB 03 
34bb2     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
34bb6     63 06 60 06 
34bba     5E 06 59 06 
34bbe     58 06 54 06 
34bc2     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
34bc6     69 F1 21 ED 
34bca     55 EC 33 EC 
34bce     36 EC 40 EC 
34bd2     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
34bd6     5C EC 68 EC 
34bda     92 02 D9 02 
34bde     D7 02 D7 02 
34be2     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
34be6     D1 02 D1 02 
34bea     CE 02 CD 02 
34bee     5D FC 80 EF 
34bf2     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34bf6     83 EC 8A EC 
34bfa     93 EC 9C EC 
34bfe     A5 EC B1 EC 
34c02     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34c06     2B 03 2A 03 
34c0a     29 03 26 03 
34c0e     25 03 24 03 
34c12     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34c16     1F 03 70 F7 
34c1a     D0 EE 27 ED 
34c1e     DB EC D4 EC 
34c22     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34c26     F0 EC FA EC 
34c2a     02 ED F9 F4 
34c2e     7B 03 7C 03 
34c32     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34c36     75 03 73 03 
34c3a     72 03 70 03 
34c3e     6D 03 6C 03 
34c42     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34c46     54 ED 22 ED 
34c4a     22 ED 2C ED 
34c4e     35 ED 3F ED 
34c52     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34c56     14 01 C3 03 
34c5a     C1 03 C0 03 
34c5e     5F 01 A5 00 
34c62     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34c66     7B 00 7C 00 
34c6a     20 00 85 F1 
34c6e     2A EE 89 ED 
34c72     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34c76     80 ED 87 ED 
34c7a     90 ED 9A ED 
34c7e     A3 ED 73 00 
34c82     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34c86     D0 00 D0 00 
34c8a     D0 00 D0 00 
34c8e     D0 00 CF 00 
34c92     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
34c96     80 F0 3D EE 
34c9a     D5 ED C7 ED 
34c9e     CD ED D6 ED 
34ca2     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
34ca6     F2 ED FA ED 
34caa     1D 01 29 01 
34cae     27 01 27 01 
34cb2     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
34cb6     25 01 26 01 
34cba     26 01 23 01 
34cbe     D0 F7 EC EF 
34cc2     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
34cc6     1C EE 24 EE 
34cca     2D EE 37 EE 
34cce     40 EE 47 EE 
34cd2     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
34cd6     7D 01 7B 01 
34cda     7A 01 7A 01 
34cde     79 01 78 01 
34ce2     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
34ce6     84 FE DE F3 
34cea     6C EF 93 EE 
34cee     72 EE 72 EE 
34cf2     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
34cf6     8B EE 95 EE 
34cfa     9E EE 15 FC 
34cfe     67 FE 67 FE 
34d02     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
34d06     6B FE 6B FE 
34d0a     6D FE 6D FE 
34d0e     6D FE 6F FE 
34d12     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
34d16     DF EE CC EE 
34d1a     CF EE D9 EE 
34d1e     E1 EE EA EE 
34d22     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
34d26     5A FE C4 FE 
34d2a     C3 FE C5 FE 
34d2e     C6 FE C6 FE 
34d32     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
34d36     C8 FE C7 FE 
34d3a     DA FB 85 F1 
34d3e     8D EF 31 EF 
34d42     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
34d46     34 EF 3E EF 
34d4a     46 EF 4F EF 
34d4e     57 EF 0D FF 
34d52     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
34d56     1F FF 1F FF 
34d5a     21 FF 21 FF 
34d5e     21 FF 21 FF 
34d62     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
34d66     15 F1 BE EF 
34d6a     84 EF 7E EF 
34d6e     88 EF 8F EF 
34d72     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
34d76     A9 EF 06 F2 
34d7a     A6 FC AB FC 
34d7e     AD FC AE FC 
34d82     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
34d86     B2 FC B4 FC 
34d8a     B6 FC B7 FC 
34d8e     8B F4 BD F0 
34d92     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
34d96     E4 EF EE EF 
34d9a     F6 EF FD EF 
34d9e     04 F0 0E F0 
34da2     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
34da6     0B FD 0D FD 
34daa     0F FD 11 FD 
34dae     11 FD 13 FD 
34db2     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
34db6     17 FD 64 F3 
34dba     CD F0 52 F0 
34dbe     41 F0 45 F0 
34dc2     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
34dc6     5B F0 64 F0 
34dca     6D F0 FB FC 
34dce     65 FD 68 FD 
34dd2     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
34dd6     6C FD 6D FD 
34dda     6F FD 70 FD 
34dde     72 FD B3 FB 
34de2     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
34de6     A4 F0 99 F0 
34dea     A0 F0 A8 F0 
34dee     AE F0 B9 F0 
34df2     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
34df6     CB FB DD FB 
34dfa     DE FB E0 FB 
34dfe     E3 FB E3 FB 
34e02     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
34e06     E9 FB EC FB 
34e0a     62 F7 27 F2 
34e0e     2A F1 FF F0 
34e12     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
34e16     0C F1 13 F1 
34e1a     1B F1 23 F1 
34e1e     33 F2 3C FC 
34e22     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
34e26     42 FC 45 FC 
34e2a     47 FC 48 FC 
34e2e     4A FC 4C FC 
34e32     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
34e36     20 F2 77 F1 
34e3a     5C F1 5F F1 
34e3e     64 F1 6C F1 
34e42     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
34e46     83 F1 DC F8 
34e4a     9A FC 9A FC 
34e4e     9B FC 9E FC 
34e52     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
34e56     A3 FC A4 FC 
34e5a     A6 FC A9 FC 
34e5e     90 F4 33 F2 
34e62     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
34e66     BA F1 BF F1 
34e6a     C7 F1 CE F1 
34e6e     D6 F1 DC F1 
34e72     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
34e76     F3 FC F5 FC 
34e7a     FE FB 79 FB 
34e7e     62 FB 5F FB 
34e82     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
34e86     6F FA AF F3 
34e8a     53 F2 12 F2 
34e8e     0F F2 15 F2 
34e92     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
34e96     2A F2 32 F2 
34e9a     38 F2 9A FB 
34e9e     AF FB B1 FB 
34ea2     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
34ea6     B7 FB B8 FB 
34eaa     BA FB BC FB 
34eae     C1 FB 3B F8 
34eb2     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
34eb6     6E F2 6C F2 
34eba     74 F2 7A F2 
34ebe     81 F2 87 F2 
34ec2     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
34ec6     06 FC 09 FC 
34eca     0C FC 0E FC 
34ece     0F FC 12 FC 
34ed2     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
34ed6     17 FC 1A FC 
34eda     B2 F6 7B F3 
34ede     DD F2 C5 F2 
34ee2     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
34ee6     D4 F2 DB F2 
34eea     E0 F2 E8 F2 
34eee     28 F8 60 FC 
34ef2     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
34ef6     64 FC 66 FC 
34efa     68 FC 6A FC 
34efe     6D FC 52 FC 
34f02     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
34f06     78 F3 24 F3 
34f0a     1A F3 1E F3 
34f0e     24 F3 2A F3 
34f12     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
34f16     3D F3 80 FA 
34f1a     0C FB 0F FB 
34f1e     10 FB 14 FB 
34f22     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
34f26     1B FB 1D FB 
34f2a     1F FB 92 FA 
34f2e     DE F4 AE F3 
34f32     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
34f36     79 F3 7E F3 
34f3a     84 F3 8C F3 
34f3e     92 F3 97 F3 
34f42     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
34f46     67 FB 69 FB 
34f4a     6B FB 6F FB 
34f4e     71 FB 72 FB 
34f52     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
34f56     E3 F8 BA F4 
34f5a     EE F3 CC F3 
34f5e     CA F3 CF F3 
34f62     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
34f66     E2 F3 E8 F3 
34f6a     ED F3 B7 FB 
34f6e     BC FB BE FB 
34f72     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
34f76     C4 FB C6 FB 
34f7a     C8 FB C9 FB 
34f7e     CC FB 8F F7 
34f82     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
34f86     1E F4 1E F4 
34f8a     24 F4 2A F4 
34f8e     30 F4 38 F4 
34f92     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
34f96     AD FA B1 FA 
34f9a     B4 FA B6 FA 
34f9e     BA FA BB FA 
34fa2     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
34fa6     C2 FA C6 FA 
34faa     55 F6 C6 F4 
34fae     7D F4 72 F4 
34fb2     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
34fb6     83 F4 89 F4 
34fba     8F F4 94 F4 
34fbe     66 FA 03 FB 
34fc2     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
34fc6     0A FB 0E FB 
34fca     10 FB 11 FB 
34fce     16 FB 18 FB 
34fd2     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
34fd6     F9 F4 CA F4 
34fda     C5 F4 CB F4 
34fde     D1 F4 D7 F4 
34fe2     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
34fe6     E8 F4 3F FB 
34fea     56 FB 58 FB 
34fee     5A FB 5E FB 
34ff2     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
34ff6     64 FB 64 FB 
34ffa     69 FB 99 F9 
34ffe     E9 F5 33 F5 
35002     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
35006     1D F5 22 F5 
3500a     27 F5 2E F5 
3500e     32 F5 37 F5 
35012     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
35016     BC FA BC FA 
3501a     C1 FA C2 FA 
3501e     C4 FA C8 FA 
35022     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
35026     F9 F7 DB F5 
3502a     78 F5 69 F5 
3502e     6A F5 70 F5 
35032     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
35036     7F F5 85 F5 
3503a     6E F7 06 FB 
3503e     0A FB 0B FB 
35042     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
35046     14 FB 15 FB 
3504a     18 FB 1B FB 
3504e     1D FB 70 F7 
35052     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
35056     B6 F5 BB F5 
3505a     C0 F5 C6 F5 
3505e     CA F5 CF F5 
35062     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
35066     54 FB 56 FB 
3506a     5A FB 5B FB 
3506e     5E FB 5F FB 
35072     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
35076     67 FB 52 FB 
3507a     29 F7 33 F6 
3507e     06 F6 02 F6 
35082     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
35086     10 F6 16 F6 
3508a     1A F6 1F F6 
3508e     81 FB 9F FB 
35092     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
35096     51 FB F2 FA 
3509a     E3 FA E3 FA 
3509e     E5 FA E9 FA 
350a2     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
350a6     64 F6 4D F6 
350aa     4D F6 53 F6 
350ae     57 F6 5C F6 
350b2     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
350b6     6A F6 19 FB 
350ba     1E FB 22 FB 
350be     23 FB 24 FB 
350c2     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
350c6     2C FB 2E FB 
350ca     32 FB F0 F8 
350ce     01 F7 A5 F6 
350d2     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
350d6     9F F6 A3 F6 
350da     A6 F6 AC F6 
350de     B0 F6 EB F7 
350e2     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
350e6     68 FB 6C FB 
350ea     6E FB 71 FB 
350ee     72 FB 74 FB 
350f2     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
350f6     71 F8 21 F7 
350fa     E5 F6 DD F6 
350fe     E1 F6 E6 F6 
35102     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
35106     F5 F6 F7 F6 
3510a     F7 FA AB FB 
3510e     AD FB AF FB 
35112     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
35116     B6 FB B9 FB 
3511a     BB FB BC FB 
3511e     21 FB 07 F8 
35122     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
35126     22 F7 26 F7 
3512a     2B F7 2E F7 
3512e     34 F7 38 F7 
35132     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
35136     13 FB 16 FB 
3513a     17 FB 1B FB 
3513e     1E FB 20 FB 
35142     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
35146     26 FB 77 FA 
3514a     F3 F7 7C F7 
3514e     67 F7 6A F7 
35152     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
35156     74 F7 7A F7 
3515a     7E F7 82 F7 
3515e     53 FB 5A FB 
35162     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
35166     5F FB 63 FB 
3516a     65 FB 67 FB 
3516e     69 FB 6A FB 
35172     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
35176     B5 F7 A9 F7 
3517a     AD F7 B0 F7 
3517e     B5 F7 B8 F7 
35182     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
35186     6E F8 99 FB 
3518a     9C FB 9D FB 
3518e     9F FB A4 FB 
35192     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
35196     A9 FB AB FB 
3519a     AD FB 46 F9 
3519e     26 F8 F0 F7 
351a2     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
351a6     F4 F7 F8 F7 
351aa     FB F7 FF F7 
351ae     03 F8 65 FA 
351b2     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
351b6     2B FB 2F FB 
351ba     30 FB 32 FB 
351be     34 FB 38 FB 
351c2     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
351c6     E9 F8 4A F8 
351ca     2E F8 2C F8 
351ce     2F F8 36 F8 
351d2     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
351d6     41 F8 44 F8 
351da     4A FB 67 FB 
351de     68 FB 6B FB 
351e2     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
351e6     73 FB 74 FB 
351ea     78 FB 7A FB 
351ee     14 FB E7 F8 
351f2     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
351f6     6D F8 70 F8 
351fa     73 F8 78 F8 
351fe     7C F8 80 F8 
35202     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
35206     A6 FB A7 FB 
3520a     A9 FB AC FB 
3520e     AF FB B1 FB 
35212     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
35216     B7 FB 73 FA 
3521a     F8 F8 B4 F8 
3521e     A9 F8 AB F8 
35222     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
35226     B4 F8 B8 F8 
3522a     BB F8 FA F8 
3522e     64 FB 65 FB 
35232     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
35236     6D FB 6F FB 
3523a     70 FB 74 FB 
3523e     77 FB 77 FB 
35242     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
35246     E9 F8 E4 F8 
3524a     E8 F8 EB F8 
3524e     EE F8 F2 F8 
35252     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
35256     B5 FA 9F FB 
3525a     A1 FB A4 FB 
3525e     A5 FB A9 FB 
35262     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
35266     AE FB B1 FB 
3526a     B2 FB C7 F9 
3526e     39 F9 22 F9 
35272     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
35276     26 F9 2A F9 
3527a     2E F9 32 F9 
3527e     33 F9 BA FB 
35282     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
35286     DE FB E1 FB 
3528a     E2 FB E4 FB 
3528e     E5 FB E7 FB 
35292     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
35296     C5 F9 67 F9 
3529a     57 F9 56 F9 
3529e     5B F9 5F F9 
352a2     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
352a6     68 F9 6C F9 
352aa     0B FC 11 FC 
352ae     14 FC 15 FC 
352b2     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
352b6     B5 FB B5 FB 
352ba     B6 FB B8 FB 
352be     E9 FA C8 F9 
352c2     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
352c6     90 F9 94 F9 
352ca     95 F9 99 F9 
352ce     9D F9 9F F9 
352d2     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
352d6     DE FB DF FB 
352da     E2 FB E4 FB 
352de     E6 FB E8 FB 
352e2     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
352e6     EF FB AC FA 
352ea     E9 F9 C7 F9 
352ee     C3 F9 C8 F9 
352f2     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
352f6     D0 F9 D4 F9 
352fa     D6 F9 0E FB 
352fe     11 FC 13 FC 
35302     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
35306     19 FC 1B FC 
3530a     1D FC 1E FC 
3530e     21 FC 22 FC 
35312     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
35316     F7 F9 F7 F9 
3531a     FB F9 FE F9 
3531e     00 FA 03 FA 
35322     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
35326     1B FC 45 FC 
3532a     46 FC 48 FC 
3532e     4A FC 4B FC 
35332     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
35336     52 FC 54 FC 
3533a     F3 FB 82 FA 
3533e     35 FA 28 FA 
35342     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
35346     31 FA 32 FA 
3534a     37 FA 37 FA 
3534e     3C FA 00 FC 
35352     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
35356     09 FC 0B FC 
3535a     0F FC 12 FC 
3535e     12 FC 15 FC 
35362     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
35366     8D FA 60 FA 
3536a     5B FA 5C FA 
3536e     60 FA 61 FA 
35372     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
35376     6C FA 6D FA 
3537a     37 FC 3A FC 
3537e     3B FC 3D FC 
35382     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
35386     43 FC 44 FC 
3538a     45 FC 47 FC 
3538e     51 FB AB FA 
35392     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
35396     8E FA 91 FA 
3539a     93 FA 95 FA 
3539e     98 FA 9B FA 
353a2     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
353a6     68 FC 6A FC 
353aa     6C FC 6E FC 
353ae     70 FC 72 FC 
353b2     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
353b6     76 FC 3B FB 
353ba     D0 FA BB FA 
353be     B9 FA BD FA 
353c2     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
353c6     C4 FA C6 FA 
353ca     CA FA 13 FC 
353ce     3A FC 3A FC 
353d2     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
353d6     41 FC 43 FC 
353da     44 FC 47 FC 
353de     48 FC 3C FC 
353e2     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
353e6     E6 FA E8 FA 
353ea     EB FA EE FA 
353ee     F0 FA F2 FA 
353f2     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
353f6     61 FC 66 FC 
353fa     68 FC 6B FC 
353fe     6C FC 6E FC 
35402     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
35406     73 FC 75 FC 
3540a     13 FC 3F FB 
3540e     17 FB 12 FB 
35412     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
35416     1A FB 1D FB 
3541a     1F FB 20 FB 
3541e     23 FB 92 FC 
35422     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
35426     96 FC 97 FC 
3542a     9A FC 9C FC 
3542e     9E FC 9F FC 
35432     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
35436     5A FB 41 FB 
3543a     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3543e     73 32 00 04 
35442     00 00 10 00 
35446     00 00 00 00 
3544a     00 00 00 00 | atari2 file "atari2.s2"
3544e     43 87 43 87 
35452     43 87 44 87 
35456     43 87 44 87 
3545a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3545e     43 87 43 87 
35462     43 87 44 87 
35466     43 87 43 87 
3546a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3546e     44 87 43 87 
35472     44 87 43 87 
35476     43 87 43 87 
3547a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3547e     43 87 43 87 
35482     44 87 43 87 
35486     44 87 44 87 
3548a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3548e     43 87 43 87 
35492     44 87 43 87 
35496     43 87 42 87 
3549a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3549e     43 87 43 87 
354a2     43 87 43 87 
354a6     44 87 43 87 
354aa     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
354ae     44 87 44 87 
354b2     43 87 44 87 
354b6     43 87 44 87 
354ba     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
354be     44 87 43 87 
354c2     44 87 44 87 
354c6     43 87 43 87 
354ca     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
354ce     43 87 44 87 
354d2     44 87 43 87 
354d6     43 87 44 87 
354da     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
354de     43 87 43 87 
354e2     43 87 43 87 
354e6     43 87 43 87 
354ea     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
354ee     42 87 43 87 
354f2     44 87 42 87 
354f6     43 87 43 87 
354fa     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
354fe     43 87 44 87 
35502     44 87 43 87 
35506     43 87 43 87 
3550a     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3550e     43 87 5C 87 
35512     EE 86 AC 87 
35516     4C 7C A3 78 
3551a     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3551e     BC 78 BB 78 
35522     BD 78 BC 78 
35526     BB 78 BD 78 
3552a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3552e     BB 78 BB 78 
35532     BC 78 BC 78 
35536     BC 78 BB 78 
3553a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3553e     BC 78 BC 78 
35542     BC 78 BC 78 
35546     BC 78 BC 78 
3554a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3554e     BB 78 BC 78 
35552     A0 78 4C 7C 
35556     11 7A 29 89 
3555a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3555e     44 87 43 87 
35562     44 87 43 87 
35566     43 87 42 87 
3556a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3556e     43 87 43 87 
35572     44 87 ED 85 
35576     71 85 52 79 
3557a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3557e     BC 78 BC 78 
35582     BC 78 BC 78 
35586     BC 78 BC 78 
3558a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3558e     BC 78 BC 78 
35592     BC 78 A0 78 
35596     CF 7A B9 81 
3559a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3559e     44 87 43 87 
355a2     43 87 44 87 
355a6     43 87 44 87 
355aa     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
355ae     43 87 43 87 
355b2     43 87 43 87 
355b6     44 87 43 87 
355ba     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
355be     43 87 43 87 
355c2     44 87 43 87 
355c6     44 87 43 87 
355ca     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
355ce     44 87 43 87 
355d2     43 87 43 87 
355d6     5A 87 39 81 
355da     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
355de     A5 78 BC 78 
355e2     BB 78 BC 78 
355e6     BB 78 BC 78 
355ea     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
355ee     BC 78 BC 78 
355f2     BC 78 BC 78 
355f6     BC 78 8F 79 
355fa     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
355fe     09 85 47 87 
35602     43 87 43 87 
35606     42 87 42 87 
3560a     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3560e     43 87 43 87 
35612     43 87 43 87 
35616     43 87 44 87 
3561a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3561e     43 87 43 87 
35622     44 87 43 87 
35626     42 87 43 87 
3562a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3562e     44 87 43 87 
35632     43 87 43 87 
35636     44 87 44 87 
3563a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3563e     94 78 55 7A 
35642     B9 78 BC 78 
35646     BC 78 BC 78 
3564a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3564e     BC 78 BB 78 
35652     BC 78 BC 78 
35656     BC 78 BC 78 
3565a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3565e     BB 78 BC 78 
35662     BC 78 BC 78 
35666     BB 78 BC 78 
3566a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3566e     BC 78 BC 78 
35672     BD 78 BC 78 
35676     BC 78 BB 78 
3567a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3567e     94 78 B3 84 
35682     36 84 4A 87 
35686     43 87 43 87 
3568a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3568e     43 87 44 87 
35692     43 87 43 87 
35696     43 87 43 87 
3569a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3569e     43 87 44 87 
356a2     43 87 44 87 
356a6     43 87 43 87 
356aa     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
356ae     43 87 43 87 
356b2     43 87 45 87 
356b6     43 87 43 87 
356ba     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
356be     43 87 44 87 
356c2     44 87 44 87 
356c6     43 87 43 87 
356ca     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
356ce     43 87 42 87 
356d2     43 87 43 87 
356d6     44 87 43 87 
356da     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
356de     54 87 3C 82 
356e2     36 83 52 79 
356e6     C6 78 BC 78 
356ea     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
356ee     BB 78 BB 78 
356f2     BC 78 BC 78 
356f6     BC 78 BC 78 
356fa     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
356fe     BD 78 ED 78 
35702     1B 79 F4 83 
35706     4D 83 4E 87 
3570a     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3570e     44 87 43 87 
35712     42 87 44 87 
35716     43 87 42 87 
3571a     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3571e     43 87 54 87 
35722     26 82 B3 84 
35726     D6 77 BB 78 
3572a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3572e     BC 78 BB 78 
35732     BB 78 BB 78 
35736     BB 78 BB 78 
3573a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3573e     BC 78 BC 78 
35742     26 79 18 75 
35746     36 83 1F 84 
3574a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3574e     43 87 43 87 
35752     43 87 43 87 
35756     43 87 44 87 
3575a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3575e     43 87 44 87 
35762     44 87 43 87 
35766     43 87 43 87 
3576a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3576e     43 87 43 87 
35772     43 87 43 87 
35776     44 87 44 87 
3577a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3577e     44 87 43 87 
35782     43 87 43 87 
35786     43 87 44 87 
3578a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3578e     44 87 44 87 
35792     44 87 43 87 
35796     44 87 43 87 
3579a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3579e     43 87 43 87 
357a2     43 87 44 87 
357a6     44 87 43 87 
357aa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
357ae     43 87 43 87 
357b2     43 87 43 87 
357b6     43 87 44 87 
357ba     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
357be     43 87 44 87 
357c2     43 87 44 87 
357c6     19 87 7D 86 
357ca     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
357ce     B1 78 BC 78 
357d2     BC 78 BC 78 
357d6     BC 78 BC 78 
357da     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
357de     BC 78 BC 78 
357e2     BD 78 BC 78 
357e6     B7 78 3B 7B 
357ea     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
357ee     96 86 44 87 
357f2     43 87 43 87 
357f6     43 87 43 87 
357fa     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
357fe     44 87 44 87 
35802     43 87 44 87 
35806     43 87 44 87 
3580a     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3580e     43 87 44 87 
35812     43 87 44 87 
35816     43 87 44 87 
3581a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3581e     43 87 44 87 
35822     43 87 43 87 
35826     44 87 43 87 
3582a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3582e     44 87 44 87 
35832     43 87 43 87 
35836     43 87 44 87 
3583a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3583e     43 87 43 87 
35842     43 87 43 87 
35846     44 87 44 87 
3584a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3584e     36 83 CF 7A 
35852     AB 78 BB 78 
35856     BC 78 BC 78 
3585a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3585e     BB 78 BC 78 
35862     BC 78 BC 78 
35866     BC 78 BC 78 
3586a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3586e     BC 78 BC 78 
35872     BC 78 BB 78 
35876     BC 78 BC 78 
3587a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3587e     BB 78 BC 78 
35882     BB 78 BC 78 
35886     BC 78 BD 78 
3588a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3588e     BC 78 BC 78 
35892     BC 78 BC 78 
35896     BC 78 BD 78 
3589a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3589e     BC 78 BB 78 
358a2     BC 78 BB 78 
358a6     BB 78 BC 78 
358aa     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
358ae     BC 78 BC 78 
358b2     BC 78 BC 78 
358b6     BC 78 BB 78 
358ba     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
358be     BC 78 BC 78 
358c2     BC 78 BD 78 
358c6     BB 78 BC 78 
358ca     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
358ce     BC 78 BC 78 
358d2     BC 78 BB 78 
358d6     BC 78 BB 78 
358da     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
358de     BB 78 BC 78 
358e2     BC 78 BC 78 
358e6     BC 78 BB 78 
358ea     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358ee     BC 78 BC 78 
358f2     BC 78 BB 78 
358f6     BC 78 BB 78 
358fa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358fe     BC 78 BC 78 
35902     BC 78 BC 78 
35906     BB 78 BC 78 
3590a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3590e     BC 78 9F 78 
35912     52 79 B3 84 
35916     2F 86 60 87 
3591a     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3591e     44 87 43 87 
35922     43 87 43 87 
35926     43 87 43 87 
3592a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3592e     43 87 43 87 
35932     43 87 44 87 
35936     43 87 43 87 
3593a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3593e     43 87 43 87 
35942     43 87 43 87 
35946     43 87 44 87 
3594a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3594e     44 87 44 87 
35952     5E 87 BC 80 
35956     FB 80 94 78 
3595a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3595e     BD 78 BC 78 
35962     BB 78 BC 78 
35966     BB 78 BB 78 
3596a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3596e     BC 78 BB 78 
35972     BB 78 6B 79 
35976     D6 77 AC 87 
3597a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3597e     43 87 44 87 
35982     43 87 43 87 
35986     44 87 43 87 
3598a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3598e     43 87 44 87 
35992     43 87 5C 87 
35996     E7 80 00 80 
3599a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3599e     BC 78 BD 78 
359a2     BC 78 BC 78 
359a6     BC 78 BB 78 
359aa     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
359ae     BC 78 BC 78 
359b2     BB 78 BC 78 
359b6     BB 78 BC 78 
359ba     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
359be     BB 78 BC 78 
359c2     BC 78 BC 78 
359c6     BC 78 BC 78 
359ca     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
359ce     BC 78 BC 78 
359d2     BC 78 BC 78 
359d6     A0 78 8D 7B 
359da     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
359de     60 87 43 87 
359e2     44 87 44 87 
359e6     43 87 43 87 
359ea     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
359ee     44 87 43 87 
359f2     43 87 43 87 
359f6     44 87 73 86 
359fa     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
359fe     51 7B B6 78 
35a02     BC 78 BD 78 
35a06     BC 78 BC 78 
35a0a     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35a0e     BB 78 BC 78 
35a12     BD 78 BB 78 
35a16     BC 78 BB 78 
35a1a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35a1e     BC 78 BC 78 
35a22     BC 78 BC 78 
35a26     BB 78 BC 78 
35a2a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35a2e     BC 78 BB 78 
35a32     BB 78 BC 78 
35a36     BC 78 BB 78 
35a3a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
35a3e     22 8C AF 84 
35a42     48 87 43 87 
35a46     44 87 43 87 
35a4a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35a4e     43 87 42 87 
35a52     43 87 43 87 
35a56     44 87 43 87 
35a5a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35a5e     43 87 43 87 
35a62     44 87 44 87 
35a66     43 87 43 87 
35a6a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35a6e     43 87 43 87 
35a72     43 87 43 87 
35a76     44 87 43 87 
35a7a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35a7e     9F 8B D6 77 
35a82     16 7C B3 78 
35a86     BC 78 BB 78 
35a8a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35a8e     BB 78 BC 78 
35a92     BB 78 BC 78 
35a96     BC 78 BC 78 
35a9a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35a9e     BC 78 BB 78 
35aa2     BB 78 BC 78 
35aa6     BB 78 BC 78 
35aaa     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35aae     BB 78 BB 78 
35ab2     BC 78 BC 78 
35ab6     BC 78 BB 78 
35aba     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35abe     BC 78 BC 78 
35ac2     BC 78 BD 78 
35ac6     BB 78 BC 78 
35aca     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35ace     BC 78 BC 78 
35ad2     BC 78 BB 78 
35ad6     BC 78 BC 78 
35ada     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35ade     A8 78 54 7E 
35ae2     F4 83 17 82 
35ae6     50 87 43 87 
35aea     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35aee     44 87 43 87 
35af2     44 87 43 87 
35af6     43 87 44 87 
35afa     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35afe     43 87 28 87 
35b02     20 85 CF 7A 
35b06     70 7D AD 78 
35b0a     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35b0e     BB 78 BC 78 
35b12     BC 78 BC 78 
35b16     BB 78 BB 78 
35b1a     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35b1e     BB 78 B2 78 
35b22     9A 7C CF 7A 
35b26     4A 87 0D 87 
35b2a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35b2e     43 87 44 87 
35b32     43 87 44 87 
35b36     43 87 43 87 
35b3a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35b3e     44 87 43 87 
35b42     28 87 51 85 
35b46     11 7A 1E 7D 
35b4a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35b4e     BC 78 BB 78 
35b52     BC 78 BC 78 
35b56     BC 78 BC 78 
35b5a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35b5e     BB 78 BC 78 
35b62     BB 78 BC 78 
35b66     BC 78 BC 78 
35b6a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35b6e     BB 78 BC 78 
35b72     BC 78 BC 78 
35b76     BD 78 BB 78 
35b7a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35b7e     BC 78 BB 78 
35b82     BC 78 BC 78 
35b86     BC 78 BB 78 
35b8a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b8e     BC 78 BC 78 
35b92     BC 78 BC 78 
35b96     BB 78 BC 78 
35b9a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35b9e     BC 78 BD 78 
35ba2     BC 78 BC 78 
35ba6     BC 78 BB 78 
35baa     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bae     BC 78 BB 78 
35bb2     BB 78 BC 78 
35bb6     BC 78 BB 78 
35bba     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bbe     BB 78 BB 78 
35bc2     BB 78 BC 78 
35bc6     B6 78 48 7D 
35bca     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35bce     56 87 43 87 
35bd2     42 87 44 87 
35bd6     44 87 43 87 
35bda     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35bde     43 87 44 87 
35be2     43 87 44 87 
35be6     4C 87 7E 83 
35bea     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35bee     F7 78 BC 78 
35bf2     BC 78 BB 78 
35bf6     BB 78 BC 78 
35bfa     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35bfe     BC 78 BB 78 
35c02     BC 78 BC 78 
35c06     BB 78 BC 78 
35c0a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35c0e     BB 78 BC 78 
35c12     BC 78 BC 78 
35c16     BC 78 BB 78 
35c1a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c1e     BC 78 BC 78 
35c22     BC 78 BC 78 
35c26     BC 78 BB 78 
35c2a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c2e     BC 78 BB 78 
35c32     BB 78 BC 78 
35c36     BC 78 BB 78 
35c3a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c3e     BC 78 BC 78 
35c42     BB 78 BC 78 
35c46     BC 78 BC 78 
35c4a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35c4e     73 32 00 04 
35c52     00 00 10 00 
35c56     00 00 00 00 
35c5a     00 00 00 00 | atari12 file "atari12.s2"
35c5e     00 6D 00 6D 
35c62     00 6D 00 6D 
35c66     00 6D 00 6D 
35c6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c6e     00 6D 00 6D 
35c72     00 6D 00 6D 
35c76     00 6D 00 6D 
35c7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c7e     00 6D 00 6D 
35c82     00 6D 00 6D 
35c86     00 6D 00 6D 
35c8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c8e     00 6D 00 6D 
35c92     00 6D 00 6D 
35c96     00 6D 00 6D 
35c9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c9e     00 6D 00 6D 
35ca2     00 6D 00 6D 
35ca6     00 6D 00 6D 
35caa     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
35cae     00 6C 00 6C 
35cb2     00 6C 00 6C 
35cb6     00 6C 00 6C 
35cba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cbe     00 6C 00 6C 
35cc2     00 6C 00 6C 
35cc6     00 6C 00 6C 
35cca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cce     00 6C 00 6C 
35cd2     00 6C 00 6C 
35cd6     00 6C 00 6C 
35cda     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cde     00 6C 00 6C 
35ce2     00 6C 00 6C 
35ce6     00 6C 00 6C 
35cea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cee     00 6C 00 6C 
35cf2     00 6C 00 6C 
35cf6     00 6C 00 6C 
35cfa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cfe     00 6C 00 6C 
35d02     00 6C 00 6C 
35d06     00 6C 00 6C 
35d0a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d0e     00 6C 00 6C 
35d12     00 6C 00 6C 
35d16     00 6C 00 6C 
35d1a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d1e     00 6C 00 6C 
35d22     00 6C 00 6C 
35d26     00 6C 00 6C 
35d2a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d2e     00 6C 00 6C 
35d32     00 6C 00 6C 
35d36     00 6C 00 6C 
35d3a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d3e     00 6C 00 6C 
35d42     00 6C 00 6C 
35d46     00 6C 00 6C 
35d4a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d4e     00 6C 00 6C 
35d52     00 6C 00 6C 
35d56     00 6C 00 6C 
35d5a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d5e     00 6C 00 6B 
35d62     00 6B 00 6B 
35d66     00 6B 00 6B 
35d6a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d6e     00 6B 00 6B 
35d72     00 6B 00 6B 
35d76     00 6B 00 6B 
35d7a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d7e     00 6B 00 6B 
35d82     00 6B 00 6B 
35d86     00 6B 00 6B 
35d8a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d8e     00 6B 00 6B 
35d92     00 6B 00 6B 
35d96     00 6B 00 6B 
35d9a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d9e     00 6B 00 6B 
35da2     00 6B 00 6B 
35da6     00 6B 00 6B 
35daa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dae     00 6B 00 6B 
35db2     00 6B 00 6B 
35db6     00 6B 00 6B 
35dba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dbe     00 6B 00 6B 
35dc2     00 6B 00 6B 
35dc6     00 6B 00 6B 
35dca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dce     00 6B 00 6B 
35dd2     00 6B 00 6B 
35dd6     00 6B 00 6B 
35dda     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dde     00 6B 00 6B 
35de2     00 6B 00 6B 
35de6     00 6B 00 6B 
35dea     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dee     00 6B 00 6B 
35df2     00 6B 00 6B 
35df6     00 6A 00 9D 
35dfa     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
35dfe     00 9E 00 9E 
35e02     00 9E 00 9E 
35e06     00 9E 00 9E 
35e0a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e0e     00 9E 00 9E 
35e12     00 9E 00 9E 
35e16     00 9E 00 9E 
35e1a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e1e     00 9E 00 9E 
35e22     00 9E 00 9E 
35e26     00 9E 00 9E 
35e2a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e2e     00 9E 00 9E 
35e32     00 9E 00 9E 
35e36     00 9E 00 9E 
35e3a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e3e     00 9E 00 9E 
35e42     00 9E 00 9E 
35e46     00 9E 00 9E 
35e4a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e4e     00 9E 00 9E 
35e52     00 9E 00 9E 
35e56     00 9E 00 9E 
35e5a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e5e     00 9E 00 9E 
35e62     00 9E 00 9E 
35e66     00 9E 00 9E 
35e6a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e6e     00 9E 00 9E 
35e72     00 9E 00 9E 
35e76     00 9E 00 9E 
35e7a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e7e     00 9E 00 9E 
35e82     00 9E 00 9E 
35e86     00 9E 00 9E 
35e8a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
35e8e     00 9F 00 9F 
35e92     00 9F 00 9F 
35e96     00 9F 00 9F 
35e9a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e9e     00 9F 00 9F 
35ea2     00 9F 00 9F 
35ea6     00 9F 00 9F 
35eaa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eae     00 9F 00 9F 
35eb2     00 9F 00 9F 
35eb6     00 9F 00 9F 
35eba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ebe     00 9F 00 9F 
35ec2     00 9F 00 9F 
35ec6     00 9F 00 9F 
35eca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ece     00 9F 00 9F 
35ed2     00 9F 00 9F 
35ed6     00 9F 00 9F 
35eda     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ede     00 9F 00 9F 
35ee2     00 9F 00 9F 
35ee6     00 9F 00 9F 
35eea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eee     00 9F 00 9F 
35ef2     00 9F 00 9F 
35ef6     00 9F 00 9F 
35efa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35efe     00 9F 00 9F 
35f02     00 9F 00 9F 
35f06     00 9F 00 9F 
35f0a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f0e     00 9F 00 9F 
35f12     00 9F 00 9F 
35f16     00 9F 00 9F 
35f1a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f1e     00 9F 00 9F 
35f22     00 9F 00 9F 
35f26     00 9F 00 9F 
35f2a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f2e     00 9F 00 9F 
35f32     00 9F 00 9F 
35f36     00 9F 00 9F 
35f3a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f3e     00 9F 00 9F 
35f42     00 9F 00 9F 
35f46     00 9F 00 9F 
35f4a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f4e     00 9F 00 9F 
35f52     00 9F 00 A0 
35f56     00 A0 00 A0 
35f5a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f5e     00 A0 00 A0 
35f62     00 A0 00 A0 
35f66     00 A0 00 A0 
35f6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f6e     00 A0 00 A0 
35f72     00 A0 00 A0 
35f76     00 A0 00 A0 
35f7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f7e     00 A0 00 A0 
35f82     00 A0 00 A0 
35f86     00 A0 00 A0 
35f8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f8e     00 A0 00 A0 
35f92     00 A0 00 A0 
35f96     00 A0 00 A0 
35f9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f9e     00 A0 00 A0 
35fa2     00 A0 00 A0 
35fa6     00 A0 00 A0 
35faa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fae     00 A0 00 A0 
35fb2     00 A0 00 A0 
35fb6     00 A0 00 A0 
35fba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fbe     00 A0 00 A0 
35fc2     00 A0 00 A0 
35fc6     00 A0 00 A0 
35fca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fce     00 A0 00 A0 
35fd2     00 A0 00 A0 
35fd6     00 A0 00 A0 
35fda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fde     00 A0 00 A0 
35fe2     00 A0 00 A0 
35fe6     00 A0 00 A0 
35fea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fee     00 A0 00 A0 
35ff2     00 A0 00 A0 
35ff6     00 A0 00 A0 
35ffa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35ffe     00 A0 00 A0 
36002     00 A0 00 A0 
36006     00 A0 00 A0 
3600a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3600e     00 A0 00 A0 
36012     00 A0 00 A0 
36016     00 A0 00 A0 
3601a     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3601e     00 6D 00 6D 
36022     00 6D 00 6D 
36026     00 6D 00 6D 
3602a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3602e     00 6D 00 6D 
36032     00 6D 00 6D 
36036     00 6D 00 6D 
3603a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3603e     00 6D 00 6D 
36042     00 6D 00 6D 
36046     00 6D 00 6D 
3604a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3604e     00 6D 00 6D 
36052     00 6D 00 6D 
36056     00 6D 00 6D 
3605a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3605e     00 6D 00 6D 
36062     00 6D 00 6D 
36066     00 6D 00 6D 
3606a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3606e     00 6D 00 6D 
36072     00 6D 00 6D 
36076     00 6D 00 6D 
3607a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3607e     00 6D 00 6D 
36082     00 6D 00 6D 
36086     00 6D 00 6D 
3608a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3608e     00 6D 00 6D 
36092     00 6D 00 6D 
36096     00 6D 00 6D 
3609a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3609e     00 6D 00 6D 
360a2     00 A0 00 A0 
360a6     00 A0 00 A0 
360aa     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ae     00 A0 00 A0 
360b2     00 A0 00 A0 
360b6     00 A0 00 A0 
360ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360be     00 A0 00 A0 
360c2     00 A0 00 A0 
360c6     00 A0 00 A0 
360ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ce     00 A0 00 A0 
360d2     00 A0 00 A0 
360d6     00 A0 00 A0 
360da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360de     00 A0 00 A0 
360e2     00 A0 00 A0 
360e6     00 A0 00 A0 
360ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ee     00 A0 00 A0 
360f2     00 A0 00 A0 
360f6     00 A0 00 A0 
360fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360fe     00 A0 00 A0 
36102     00 A0 00 A0 
36106     00 A0 00 A0 
3610a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3610e     00 A0 00 A0 
36112     00 A0 00 A0 
36116     00 A0 00 A0 
3611a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3611e     00 A0 00 A0 
36122     00 A0 00 A0 
36126     00 A0 00 A0 
3612a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3612e     00 6D 00 6D 
36132     00 6D 00 6D 
36136     00 6D 00 6D 
3613a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3613e     00 6D 00 6D 
36142     00 6D 00 6D 
36146     00 6D 00 6D 
3614a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3614e     00 6D 00 6D 
36152     00 6D 00 6D 
36156     00 6D 00 6D 
3615a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3615e     00 6D 00 6D 
36162     00 6D 00 6D 
36166     00 6D 00 6D 
3616a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3616e     00 6D 00 6D 
36172     00 6D 00 6D 
36176     00 6D 00 6D 
3617a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3617e     00 6D 00 6D 
36182     00 6D 00 6D 
36186     00 6D 00 6D 
3618a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3618e     00 6D 00 6D 
36192     00 6D 00 6D 
36196     00 6D 00 6D 
3619a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3619e     00 6D 00 6D 
361a2     00 6D 00 6D 
361a6     00 6D 00 6D 
361aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
361ae     00 6D 00 6D 
361b2     00 6C 00 A0 
361b6     00 9F 00 A0 
361ba     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
361be     00 A0 00 A0 
361c2     00 A0 00 A0 
361c6     00 A0 00 A0 
361ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ce     00 A0 00 A0 
361d2     00 A0 00 A0 
361d6     00 A0 00 A0 
361da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361de     00 A0 00 A0 
361e2     00 A0 00 A0 
361e6     00 A0 00 A0 
361ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ee     00 A0 00 A0 
361f2     00 A0 00 A0 
361f6     00 A0 00 A0 
361fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361fe     00 A0 00 A0 
36202     00 A0 00 A0 
36206     00 A0 00 A0 
3620a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3620e     00 A0 00 A0 
36212     00 A0 00 A0 
36216     00 A0 00 A0 
3621a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3621e     00 A0 00 A0 
36222     00 A0 00 A0 
36226     00 A0 00 A0 
3622a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3622e     00 A0 00 A0 
36232     00 A0 00 A0 
36236     00 A0 00 A0 
3623a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3623e     00 A0 00 A0 
36242     00 A0 00 A0 
36246     00 A0 00 A0 
3624a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3624e     00 A0 00 A0 
36252     00 A0 00 A0 
36256     00 A0 00 A0 
3625a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3625e     00 A0 00 A0 
36262     00 A0 00 A0 
36266     00 A0 00 A0 
3626a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3626e     00 A1 00 A1 
36272     00 A1 00 A1 
36276     00 A1 00 A1 
3627a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3627e     00 A1 00 A1 
36282     00 A1 00 A1 
36286     00 A1 00 A1 
3628a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3628e     00 A1 00 A1 
36292     00 A1 00 A1 
36296     00 A1 00 A1 
3629a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3629e     00 A1 00 A1 
362a2     00 A1 00 A1 
362a6     00 A1 00 A1 
362aa     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
362ae     00 A1 00 A1 
362b2     00 A1 00 A1 
362b6     00 A1 00 A1 
362ba     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
362be     00 A1 00 A1 
362c2     00 A1 00 A1 
362c6     00 6E 00 6E 
362ca     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362ce     00 6E 00 6E 
362d2     00 6E 00 6E 
362d6     00 6E 00 6E 
362da     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362de     00 6E 00 6E 
362e2     00 6E 00 6E 
362e6     00 6E 00 6E 
362ea     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362ee     00 6E 00 6E 
362f2     00 6E 00 6E 
362f6     00 6E 00 6E 
362fa     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362fe     00 6E 00 6D 
36302     00 6D 00 6D 
36306     00 6D 00 6D 
3630a     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3630e     00 6D 00 6D 
36312     00 6D 00 6D 
36316     00 6D 00 6D 
3631a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3631e     00 6D 00 6D 
36322     00 6D 00 6D 
36326     00 6D 00 6D 
3632a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3632e     00 6D 00 6D 
36332     00 6D 00 6D 
36336     00 6D 00 6D 
3633a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3633e     00 6D 00 6D 
36342     00 6D 00 6D 
36346     00 6D 00 6D 
3634a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3634e     00 6D 00 6D 
36352     00 6D 00 6D 
36356     00 6D 00 6D 
3635a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3635e     00 6D 00 6D 
36362     00 6D 00 6D 
36366     00 6D 00 6D 
3636a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3636e     00 6D 00 6D 
36372     00 6D 00 6D 
36376     00 6D 00 6D 
3637a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3637e     00 6D 00 6D 
36382     00 6D 00 6D 
36386     00 6D 00 6D 
3638a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3638e     00 6D 00 6D 
36392     00 6D 00 6D 
36396     00 6D 00 6D 
3639a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3639e     00 6D 00 6D 
363a2     00 6D 00 6D 
363a6     00 6D 00 6D 
363aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
363ae     00 6D 00 6D 
363b2     00 6C 00 6C 
363b6     00 6C 00 6C 
363ba     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
363be     00 6C 00 6C 
363c2     00 6C 00 6C 
363c6     00 6C 00 6C 
363ca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
363ce     00 6C 00 6C 
363d2     00 6C 00 6C 
363d6     00 9D 00 9F 
363da     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
363de     00 9F 00 9F 
363e2     00 9F 00 9F 
363e6     00 A0 00 A0 
363ea     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ee     00 A0 00 A0 
363f2     00 A0 00 A0 
363f6     00 A0 00 A0 
363fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363fe     00 A0 00 A0 
36402     00 A0 00 A0 
36406     00 A0 00 A0 
3640a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3640e     00 A0 00 A0 
36412     00 A0 00 A0 
36416     00 A0 00 A0 
3641a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3641e     00 A0 00 A0 
36422     00 A0 00 A0 
36426     00 A0 00 A0 
3642a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3642e     00 A0 00 A0 
36432     00 A0 00 A0 
36436     00 A0 00 A0 
3643a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3643e     00 A0 00 A0 
36442     00 A0 00 A0 
36446     00 A0 00 A0 
3644a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3644e     00 A0 00 A0 
36452     00 A0 00 A0 
36456     00 A0 00 A0 
3645a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3645e     01 00 00 00 
36462     00 00 00 00 
36466     00 00 00 00 
3646a     00 00 00 00 | mouse  file "mouse2.def"
3646e     00 00 00 00 
36472     00 00 00 00 
36476     00 00 00 00 
3647a     00 00 00 00 | 	byte	$00[16]
3647e     01 01 00 00 
36482     00 00 00 00 
36486     00 00 00 00 
3648a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3648e     00 00 00 00 
36492     00 00 00 00 
36496     00 00 00 00 
3649a     00 00 00 00 | 	byte	$00[16]
3649e     01 0D 01 00 
364a2     00 00 00 00 
364a6     00 00 00 00 
364aa     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ae     00 00 00 00 
364b2     00 00 00 00 
364b6     00 00 00 00 
364ba     00 00 00 00 | 	byte	$00[16]
364be     01 0D 0D 01 
364c2     00 00 00 00 
364c6     00 00 00 00 
364ca     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ce     00 00 00 00 
364d2     00 00 00 00 
364d6     00 00 00 00 
364da     00 00 00 00 | 	byte	$00[16]
364de     01 0D 0D 0D 
364e2     01 00 00 00 
364e6     00 00 00 00 
364ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ee     00 00 00 00 
364f2     00 00 00 00 
364f6     00 00 00 00 
364fa     00 00 00 00 | 	byte	$00[16]
364fe     01 0D 0D 0D 
36502     0D 01 00 00 
36506     00 00 00 00 
3650a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3650e     00 00 00 00 
36512     00 00 00 00 
36516     00 00 00 00 
3651a     00 00 00 00 | 	byte	$00[16]
3651e     01 0D 0D 0D 
36522     0D 0D 01 00 
36526     00 00 00 00 
3652a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3652e     00 00 00 00 
36532     00 00 00 00 
36536     00 00 00 00 
3653a     00 00 00 00 | 	byte	$00[16]
3653e     01 0D 0D 0D 
36542     0D 0D 0D 01 
36546     00 00 00 00 
3654a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3654e     00 00 00 00 
36552     00 00 00 00 
36556     00 00 00 00 
3655a     00 00 00 00 | 	byte	$00[16]
3655e     01 0D 0D 0D 
36562     0D 0D 0D 0C 
36566     01 00 00 00 
3656a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3656e     00 00 00 00 
36572     00 00 00 00 
36576     00 00 00 00 
3657a     00 00 00 00 | 	byte	$00[16]
3657e     01 0D 0D 0D 
36582     0D 0D 0D 0D 
36586     0C 01 00 00 
3658a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3658e     00 00 00 00 
36592     00 00 00 00 
36596     00 00 00 00 
3659a     00 00 00 00 | 	byte	$00[16]
3659e     01 0D 0D 0D 
365a2     0D 0D 0D 0D 
365a6     0D 0C 01 00 
365aa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
365ae     00 00 00 00 
365b2     00 00 00 00 
365b6     00 00 00 00 
365ba     00 00 00 00 | 	byte	$00[16]
365be     01 0D 0D 0D 
365c2     0D 0D 0D 0D 
365c6     0D 0D 0B 01 
365ca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
365ce     00 00 00 00 
365d2     00 00 00 00 
365d6     00 00 00 00 
365da     00 00 00 00 | 	byte	$00[16]
365de     01 0D 0D 0D 
365e2     0C 0D 0D 03 
365e6     01 01 01 01 
365ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
365ee     00 00 00 00 
365f2     00 00 00 00 
365f6     00 00 00 00 
365fa     00 00 00 00 | 	byte	$00[16]
365fe     01 0D 0D 0C 
36602     01 09 0D 03 
36606     00 00 00 00 
3660a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3660e     00 00 00 00 
36612     00 00 00 00 
36616     00 00 00 00 
3661a     00 00 00 00 | 	byte	$00[16]
3661e     01 0D 0C 01 
36622     00 01 0D 0B 
36626     01 00 00 00 
3662a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3662e     00 00 00 00 
36632     00 00 00 00 
36636     00 00 00 00 
3663a     00 00 00 00 | 	byte	$00[16]
3663e     01 0C 01 00 
36642     00 01 0A 0D 
36646     01 00 00 00 
3664a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3664e     00 00 00 00 
36652     00 00 00 00 
36656     00 00 00 00 
3665a     00 00 00 00 | 	byte	$00[16]
3665e     01 01 00 00 
36662     00 00 01 0D 
36666     0B 01 00 00 
3666a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3666e     00 00 00 00 
36672     00 00 00 00 
36676     00 00 00 00 
3667a     00 00 00 00 
3667e     00 00 00 00 
36682     00 00       | 	byte	$00[22]
36684     01 0B 0D 01 
36688     00 00 00 00 
3668c     00 00 00 00 
36690     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36694     00 00 00 00 
36698     00 00 00 00 
3669c     00 00 00 00 
366a0     00 00 00 00 
366a4     00          | 	byte	$00[17]
366a5     01 01 00 00 
366a9     00 00 00 00 
366ad     00 00 00 00 
366b1     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
366b5     00 00 00 00 
      ...             
36859     00 00 00 00 
3685d     00          | 	byte	$00[425]
3685e                 | 
3685e     00 00       |              	org
36860 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36864 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36868 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3686c 003             | 
3686c 003 00 30 04 F6 |                 mov     psramaddr,#0
36870 004             | 
36870 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36874 005 20 00 00 FF 
36878 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3687c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
36880 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36884 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36888 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3688c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
36890 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36894 00d             | 
36894 00d 20 00 00 FF 
36898 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3689c 00f E0 03 00 FF 
368a0 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
368a4 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
368a8 012             | 
368a8 012             |                 
368a8 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
368ac 013             |     
368ac 013 01 2C 60 FD |                 cogid 	t11				' get id
368b0 014 00 00 EC FC |                 coginit #0,#0				' start the new program
368b4 015 03 2C 60 FD |                 cogstop t11				' stop the loader
368b8 016             | 
368b8 016 00 00 00 00 | t11 		long 	0
368bc 017 00 FF 07 00 | mailbox 	long 	$7FF00
368c0 018 00 00 00 00 | psramaddr 	long 	0
368c4 019 00 00 00 00 | pslockval	long 	0
368c8 01a 00 00 00 00 | cmd             long    0
368cc 01b 00 00 00 00 | buf1            long    0
368d0 01c 00 40 00 00 | buf2            long    16384
368d4 01d D8 68 03 00 | 	long	@@@_dat_ + 12612
368d8 01e 50 32 20 52 
368dc 01f 65 74 72 6F 
368e0 020 6D 61 63 68 
368e4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
368e8 022 42 41 53 49 
368ec 023 43 20 76 65 
368f0 024 72 73 69 6F 
368f4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
368f8 026 35 31 00 00 | 	byte	$35, $31, $00, $00
368fc 027             | 	alignl
368fc 027             | _hg010b_spin2_dat_
368fc 027             | 
368fc 027 00 00 00 00 
36900 028 00 00 00 00 
36904 029 00 00 00 00 
36908 02a 00 00 00 00 
3690c 02b 00 00 00    | vga_font       file "vgafont.def"
3690f 02b 7E 81 A5 81 
36913 02c 81 BD 99 81 
36917 02d 81 7E 00 00 
3691b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3691f 02f 7E FF DB FF 
36923 030 FF C3 E7 FF 
36927 031 FF 7E 00 00 
3692b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3692f 033 00 36 7F 7F 
36933 034 7F 7F 3E 1C 
36937 035 08 00 00 00 
3693b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3693f 037 00 08 1C 3E 
36943 038 7F 3E 1C 08 
36947 039 00 00 00 00 
3694b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3694f 03b 18 3C 3C E7 
36953 03c E7 E7 18 18 
36957 03d 3C 00 00 00 
3695b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3695f 03f 18 3C 7E FF 
36963 040 FF 7E 18 18 
36967 041 3C 00 00 00 
3696b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3696f 043 00 00 00 18 
36973 044 3C 3C 18 00 
36977 045 00 00 00 00 
3697b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3697f 047 FF FF FF E7 
36983 048 C3 C3 E7 FF 
36987 049 FF FF FF FF 
3698b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3698f 04b 00 00 3C 66 
36993 04c 42 42 66 3C 
36997 04d 00 00 00 00 
3699b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3699f 04f FF FF C3 99 
369a3 050 BD BD 99 C3 
369a7 051 FF FF FF FF 
369ab 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
369af 053 78 70 58 4C 
369b3 054 1E 33 33 33 
369b7 055 33 1E 00 00 
369bb 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
369bf 057 3C 66 66 66 
369c3 058 66 3C 18 7E 
369c7 059 18 18 00 00 
369cb 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
369cf 05b FC CC FC 0C 
369d3 05c 0C 0C 0C 0E 
369d7 05d 0F 07 00 00 
369db 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
369df 05f FE C6 FE C6 
369e3 060 C6 C6 C6 E6 
369e7 061 E7 67 03 00 
369eb 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
369ef 063 18 18 DB 3C 
369f3 064 E7 3C DB 18 
369f7 065 18 00 00 00 
369fb 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
369ff 067 03 07 0F 1F 
36a03 068 7F 1F 0F 07 
36a07 069 03 01 00 00 
36a0b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
36a0f 06b 60 70 78 7C 
36a13 06c 7F 7C 78 70 
36a17 06d 60 40 00 00 
36a1b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
36a1f 06f 18 3C 7E 18 
36a23 070 18 18 7E 3C 
36a27 071 18 00 00 00 
36a2b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
36a2f 073 66 66 66 66 
36a33 074 66 66 66    | 	byte	$66[7]
36a36 075 00 66 66 00 
36a3a 076 00 00 00 00 
36a3e 077 00 FE DB DB 
36a42 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36a46 079 D8 D8 D8 00 
36a4a 07a 00 00 00 3E 
36a4e 07b 63 06 1C 36 
36a52 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36a56 07d 30 63 3E 00 
36a5a 07e 00 00 00 00 
36a5e 07f 00 00 00 00 
36a62 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36a66 081 7F 7F 7F 00 
36a6a 082 00 00 00 00 
36a6e 083 00 18 3C 7E 
36a72 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36a76 085 3C 18 7E 00 
36a7a 086 00 00 00 00 
36a7e 087 00 18 3C 7E 
36a82 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36a86 089 18 18 18 00 
36a8a 08a 00 00 00 00 
36a8e 08b 00 18 18 18 
36a92 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36a96 08d 7E 3C 18 00 
36a9a 08e 00 00 00 00 
36a9e 08f 00 00 00 18 
36aa2 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
36aa6 091 00 00 00 00 
36aaa 092 00 00 00 00 
36aae 093 00 00 00    | 	byte	$00[11]
36ab1 094 0C 06 7F 06 
36ab5 095 0C 00 00 00 
36ab9 096 00 00 00 00 
36abd 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ac1 098 00 03 03 03 
36ac5 099 7F 00 00 00 
36ac9 09a 00 00 00 00 
36acd 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ad1 09c 14 36 7F 36 
36ad5 09d 14 00 00 00 
36ad9 09e 00 00 00 00 
36add 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36ae1 0a0 1C 1C 3E 3E 
36ae5 0a1 7F 7F 00 00 
36ae9 0a2 00 00 00 00 
36aed 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36af1 0a4 7F 3E 3E 1C 
36af5 0a5 1C 08 00 00 
36af9 0a6 00 00 00 00 
36afd 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b01 0a8 00 00 00 00 
36b05 0a9 00 00 00 00 
36b09 0aa 00 00 00 00 
36b0d 0ab 00 00       | 	byte	$00[14]
36b0f 0ab 18 3C 3C 3C 
36b13 0ac 18 18 18 00 
36b17 0ad 18 18 00 00 
36b1b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
36b1f 0af 66 24 00 00 
36b23 0b0 00 00 00 00 
36b27 0b1 00 00 00 00 
36b2b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b2f 0b3 00 36 36 7F 
36b33 0b4 36 36 36 7F 
36b37 0b5 36 36 00 00 
36b3b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
36b3f 0b7 3E 63 43 03 
36b43 0b8 3E 60 60 61 
36b47 0b9 63 3E 18 18 
36b4b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
36b4f 0bb 00 00 43 63 
36b53 0bc 30 18 0C 06 
36b57 0bd 63 61 00 00 
36b5b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
36b5f 0bf 1C 36 36 1C 
36b63 0c0 6E 3B 33 33 
36b67 0c1 33 6E 00 00 
36b6b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36b6f 0c3 0C 0C 0C 06 
36b73 0c4 00 00 00 00 
36b77 0c5 00 00 00 00 
36b7b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b7f 0c7 30 18 0C 0C 
36b83 0c8 0C 0C 0C 0C 
36b87 0c9 18 30 00 00 
36b8b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36b8f 0cb 0C 18 30 30 
36b93 0cc 30 30 30 30 
36b97 0cd 18 0C 00 00 
36b9b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36b9f 0cf 00 00 00 66 
36ba3 0d0 3C FF 3C 66 
36ba7 0d1 00 00 00 00 
36bab 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36baf 0d3 00 00 00 18 
36bb3 0d4 18 7E 18 18 
36bb7 0d5 00 00 00 00 
36bbb 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36bbf 0d7 00 00 00 00 
36bc3 0d8 00 00 00 00 | 	byte	$00[8]
36bc7 0d9 18 18 18 0C 
36bcb 0da 00 00 00 00 
36bcf 0db 00 00 00 00 
36bd3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36bd7 0dd 00 00 00 00 
36bdb 0de 00 00 00 00 
36bdf 0df 00 00 00 00 
36be3 0e0 00 00 00 00 | 	byte	$00[16]
36be7 0e1 18 18 00 00 
36beb 0e2 00 00 00 00 
36bef 0e3 00 00 40 60 
36bf3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36bf7 0e5 03 01 00 00 
36bfb 0e6 00 00 00 00 
36bff 0e7 1C 36 63 63 
36c03 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36c07 0e9 36 1C 00 00 
36c0b 0ea 00 00 00 00 
36c0f 0eb 18 1C 1E 18 
36c13 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36c17 0ed 18 7E 00 00 
36c1b 0ee 00 00 00 00 
36c1f 0ef 3E 63 60 30 
36c23 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36c27 0f1 63 7F 00 00 
36c2b 0f2 00 00 00 00 
36c2f 0f3 3E 63 60 60 
36c33 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36c37 0f5 63 3E 00 00 
36c3b 0f6 00 00 00 00 
36c3f 0f7 30 38 3C 36 
36c43 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36c47 0f9 30 78 00 00 
36c4b 0fa 00 00 00 00 
36c4f 0fb 7F 03 03 03 
36c53 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36c57 0fd 63 3E 00 00 
36c5b 0fe 00 00 00 00 
36c5f 0ff 1C 06 03 03 
36c63 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36c67 101 63 3E 00 00 
36c6b 102 00 00 00 00 
36c6f 103 7F 63 60 60 
36c73 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36c77 105 0C 0C 00 00 
36c7b 106 00 00 00 00 
36c7f 107 3E 63 63 63 
36c83 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36c87 109 63 3E 00 00 
36c8b 10a 00 00 00 00 
36c8f 10b 3E 63 63 63 
36c93 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
36c97 10d 30 1E 00 00 
36c9b 10e 00 00 00 00 
36c9f 10f 00 00 00 18 
36ca3 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36ca7 111 18 18 00 00 
36cab 112 00 00 00 00 
36caf 113 00 00 00 18 
36cb3 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36cb7 115 18 18 0C 00 
36cbb 116 00 00 00 00 
36cbf 117 00 60 30 18 
36cc3 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36cc7 119 30 60 00 00 
36ccb 11a 00 00 00 00 
36ccf 11b 00 00 00 7E 
36cd3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36cd7 11d 00 00 00 00 
36cdb 11e 00 00 00 00 
36cdf 11f 00          | 	byte	$00[9]
36ce0 120 06 0C 18 30 
36ce4 121 60 30 18 0C 
36ce8 122 06 00 00 00 
36cec 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36cf0 124 63 63 30 18 
36cf4 125 18 18 00 18 
36cf8 126 18 00 00 00 
36cfc 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
36d00 128 3E 63 63 7B 
36d04 129 7B 7B 3B 03 
36d08 12a 3E 00 00 00 
36d0c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
36d10 12c 1C 36 63 63 
36d14 12d 7F 63 63 63 
36d18 12e 63 00 00 00 
36d1c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
36d20 130 66 66 66 3E 
36d24 131 66 66 66 66 
36d28 132 3F 00 00 00 
36d2c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
36d30 134 66 43 03 03 
36d34 135 03 03 43 66 
36d38 136 3C 00 00 00 
36d3c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
36d40 138 36 66 66 66 
36d44 139 66 66 66 36 
36d48 13a 1F 00 00 00 
36d4c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
36d50 13c 66 46 16 1E 
36d54 13d 16 06 46 66 
36d58 13e 7F 00 00 00 
36d5c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
36d60 140 66 46 16 1E 
36d64 141 16 06 06 06 
36d68 142 0F 00 00 00 
36d6c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
36d70 144 66 43 03 03 
36d74 145 7B 63 63 66 
36d78 146 5C 00 00 00 
36d7c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
36d80 148 63 63 63 7F 
36d84 149 63 63 63 63 
36d88 14a 63 00 00 00 
36d8c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
36d90 14c 18 18 18 18 
36d94 14d 18 18 18 18 | 	byte	$18[8]
36d98 14e 3C 00 00 00 
36d9c 14f 00 00 00 78 
36da0 150 30 30 30 30 
36da4 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
36da8 152 1E 00 00 00 
36dac 153 00 00 00 67 
36db0 154 66 66 36 1E 
36db4 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
36db8 156 67 00 00 00 
36dbc 157 00 00 00 0F 
36dc0 158 06 06 06 06 
36dc4 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36dc8 15a 7F 00 00 00 
36dcc 15b 00 00 00 63 
36dd0 15c 77 7F 7F 6B 
36dd4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
36dd8 15e 63 00 00 00 
36ddc 15f 00 00 00 63 
36de0 160 67 6F 7F 7B 
36de4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
36de8 162 63 00 00 00 
36dec 163 00 00 00 3E 
36df0 164 63 63 63 63 
36df4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36df8 166 3E 00 00 00 
36dfc 167 00 00 00 3F 
36e00 168 66 66 66 3E 
36e04 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36e08 16a 0F 00 00 00 
36e0c 16b 00 00 00 3E 
36e10 16c 63 63 63 63 
36e14 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36e18 16e 3E 30 70 00 
36e1c 16f 00 00 00 3F 
36e20 170 66 66 66 3E 
36e24 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36e28 172 67 00 00 00 
36e2c 173 00 00 00 3E 
36e30 174 63 63 06 1C 
36e34 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36e38 176 3E 00 00 00 
36e3c 177 00 00 00 7E 
36e40 178 7E 5A 18 18 
36e44 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36e48 17a 3C 00 00 00 
36e4c 17b 00 00 00 63 
36e50 17c 63 63 63 63 
36e54 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36e58 17e 3E 00 00 00 
36e5c 17f 00 00 00 63 
36e60 180 63 63 63 63 
36e64 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
36e68 182 08 00 00 00 
36e6c 183 00 00 00 63 
36e70 184 63 63 63 6B 
36e74 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
36e78 186 36 00 00 00 
36e7c 187 00 00 00 63 
36e80 188 63 36 3E 1C 
36e84 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
36e88 18a 63 00 00 00 
36e8c 18b 00 00 00 66 
36e90 18c 66 66 66 3C 
36e94 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
36e98 18e 3C 00 00 00 
36e9c 18f 00 00 00 7F 
36ea0 190 63 61 30 18 
36ea4 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36ea8 192 7F 00 00 00 
36eac 193 00 00 00 3C 
36eb0 194 0C 0C 0C 0C 
36eb4 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
36eb8 196 3C 00 00 00 
36ebc 197 00 00 00 00 
36ec0 198 01 03 07 0E 
36ec4 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
36ec8 19a 40 00 00 00 
36ecc 19b 00 00 00 3C 
36ed0 19c 30 30 30 30 
36ed4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
36ed8 19e 3C 00 00 00 
36edc 19f 1C 36 00 00 
36ee0 1a0 00 00 00 00 
36ee4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ee8 1a2 00 00 00 00 
36eec 1a3 00 00 00 00 
36ef0 1a4 00 00 00 00 
36ef4 1a5 00 00 00 00 
36ef8 1a6 00          | 	byte	$00[17]
36ef9 1a6 FF 00 00 0C 
36efd 1a7 18 00 00 00 
36f01 1a8 00 00 00 00 
36f05 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f09 1aa 00 00 00 00 
36f0d 1ab 00 00 00 00 
36f11 1ac 00          | 	byte	$00[9]
36f12 1ac 1E 30 3E 33 
36f16 1ad 33 33 6E 00 
36f1a 1ae 00 00 00 00 
36f1e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
36f22 1b0 1E 36 66 66 
36f26 1b1 66 66 3E 00 
36f2a 1b2 00 00 00 00 
36f2e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f32 1b4 3E 63 03 03 
36f36 1b5 03 63 3E 00 
36f3a 1b6 00 00 00 00 
36f3e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
36f42 1b8 3C 36 33 33 
36f46 1b9 33 33 6E 00 
36f4a 1ba 00 00 00 00 
36f4e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f52 1bc 3E 63 7F 03 
36f56 1bd 03 63 3E 00 
36f5a 1be 00 00 00 00 
36f5e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
36f62 1c0 0C 1E 0C 0C 
36f66 1c1 0C 0C 1E 00 
36f6a 1c2 00 00 00 00 
36f6e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f72 1c4 6E 33 33 33 
36f76 1c5 33 33 3E 30 
36f7a 1c6 33 1E 00 00 
36f7e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
36f82 1c8 36 6E 66 66 
36f86 1c9 66 66 67 00 
36f8a 1ca 00 00 00 00 
36f8e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
36f92 1cc 1C 18 18 18 
36f96 1cd 18 18 3C 00 
36f9a 1ce 00 00 00 00 
36f9e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
36fa2 1d0 70 60 60 60 
36fa6 1d1 60 60 60 66 
36faa 1d2 66 3C 00 00 
36fae 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
36fb2 1d4 66 36 1E 1E 
36fb6 1d5 36 66 67 00 
36fba 1d6 00 00 00 00 
36fbe 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
36fc2 1d8 18 18 18 18 
36fc6 1d9 18 18       | 	byte	$18[6]
36fc8 1da 3C 00 00 00 
36fcc 1db 00 00 00 00 
36fd0 1dc 00 00 37 7F 
36fd4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
36fd8 1de 63 00 00 00 
36fdc 1df 00 00 00 00 
36fe0 1e0 00 00 3B 66 
36fe4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36fe8 1e2 66 00 00 00 
36fec 1e3 00 00 00 00 
36ff0 1e4 00 00 3E 63 
36ff4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
36ff8 1e6 3E 00 00 00 
36ffc 1e7 00 00 00 00 
37000 1e8 00 00 3B 66 
37004 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
37008 1ea 3E 06 06 0F 
3700c 1eb 00 00 00 00 
37010 1ec 00 00 6E 33 
37014 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
37018 1ee 3E 30 30 78 
3701c 1ef 00 00 00 00 
37020 1f0 00 00 3B 6E 
37024 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
37028 1f2 0F 00 00 00 
3702c 1f3 00 00 00 00 
37030 1f4 00 00 3E 63 
37034 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
37038 1f6 3E 00 00 00 
3703c 1f7 00 00 00 08 
37040 1f8 0C 0C 3F 0C 
37044 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
37048 1fa 38 00 00 00 
3704c 1fb 00 00 00 00 
37050 1fc 00 00 33 33 
37054 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
37058 1fe 6E 00 00 00 
3705c 1ff 00 00 00 00 
37060 200 00 00 63 63 
37064 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
37068 202 1C 00 00 00 
3706c 203 00 00 00 00 
37070 204 00 00 63 63 
37074 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
37078 206 36 00 00 00 
3707c 207 00 00 00 00 
37080 208 00 00 63 36 
37084 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
37088 20a 63 00 00 00 
3708c 20b 00 00 00 00 
37090 20c 00 00 63 63 
37094 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
37098 20e 7E 60 30 1F 
3709c 20f 00 00 00 00 
370a0 210 00 00 7F 33 
370a4 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
370a8 212 7F 00 00 00 
370ac 213 00 00 00 70 
370b0 214 18 18 18 0E 
370b4 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
370b8 216 70 00 00 00 
370bc 217 00 00 00 18 
370c0 218 18 18 18 18 
370c4 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
370c8 21a 18 00 00 00 
370cc 21b 00 00 00 0E 
370d0 21c 18 18 18 70 
370d4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
370d8 21e 0E 00 00 00 
370dc 21f 6E 3B 00 00 
370e0 220 00 00 00 00 
370e4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
370e8 222 00 00 00 00 
370ec 223 00 00 00 00 
370f0 224 00 00       | 	byte	$00[10]
370f2 224 08 1C 36 63 
370f6 225 63 63 7F 00 
370fa 226 00 00 00 00 
370fe 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
37102 228 03 03 03 03 
37106 229 43 66 3C 18 
3710a 22a 30 1E 00 00 
3710e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
37112 22c 33 33 33 33 
37116 22d 33 33       | 	byte	$33[6]
37118 22e 6E 00 00 00 
3711c 22f 00 00 60 30 
37120 230 18 00 3E 63 
37124 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
37128 232 3E 00 00 00 
3712c 233 00 00 08 1C 
37130 234 36 00 1E 30 
37134 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
37138 236 6E 00 00 00 
3713c 237 00 00 00 00 
37140 238 33 00 1E 30 
37144 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
37148 23a 6E 00 00 00 
3714c 23b 00 00 1C 36 
37150 23c 1C 00 33 33 
37154 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
37158 23e 6E 00 00 00 
3715c 23f 00 00 60 30 
37160 240 18 00 3E 63 
37164 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
37168 242 3E 00 00 00 
3716c 243 00 00 00 00 
37170 244 00 00 3E 63 
37174 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
37178 246 3E 18 30 1E 
3717c 247 00 00 00 1C 
37180 248 58 78 38 18 
37184 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
37188 24a 3C 00 00 00 
3718c 24b 00 00 00 00 
37190 24c 63 00 3E 63 
37194 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
37198 24e 3E 00 00 00 
3719c 24f 66 33 00 3E 
371a0 250 63 63 63 63 
371a4 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
371a8 252 3E 00 00 00 
371ac 253 00 00 CC 66 
371b0 254 33 00 3E 63 
371b4 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
371b8 256 3E 00 00 00 
371bc 257 00 00 18 3C 
371c0 258 66 00 1C 18 
371c4 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
371c8 25a 3C 00 00 00 
371cc 25b 30 18 00 7F 
371d0 25c 63 61 30 18 
371d4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
371d8 25e 7F 00 00 00 
371dc 25f 00 63 00 08 
371e0 260 1C 36 63 63 
371e4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
371e8 262 63 00 00 00 
371ec 263 30 18 00 3C 
371f0 264 66 43 03 03 
371f4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
371f8 266 3C 00 00 00 
371fc 267 30 18 00 7F 
37200 268 66 46 16 1E 
37204 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
37208 26a 7F 00 00 00 
3720c 26b 0C 06 00 0F 
37210 26c 06 06 06 06 
37214 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
37218 26e 7F 00 00 00 
3721c 26f 30 18 00 1C 
37220 270 18 18 18 18 
37224 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
37228 272 3C 00 00 00 
3722c 273 00 00 08 1C 
37230 274 36 00 3E 63 
37234 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
37238 276 3E 00 00 00 
3723c 277 00 00 00 00 
37240 278 63 00 3E 63 
37244 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
37248 27a 3E 00 00 00 
3724c 27b 00 00 00 6F 
37250 27c 46 26 06 06 
37254 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
37258 27e 7F 00 00 00 
3725c 27f 00 00 00 6E 
37260 280 4C 2C 0C 0C 
37264 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
37268 282 1E 00 00 00 
3726c 283 30 18 00 3E 
37270 284 63 63 06 1C 
37274 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37278 286 3E 00 00 00 
3727c 287 00 00 60 30 
37280 288 18 00 3E 63 
37284 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
37288 28a 3E 00 00 00 
3728c 28b 00 63 00 3E 
37290 28c 63 63 63 63 
37294 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37298 28e 3E 00 00 00 
3729c 28f 00 63 00 63 
372a0 290 63 63 63 63 
372a4 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
372a8 292 3E 00 00 00 
372ac 293 6C 38 00 7E 
372b0 294 7E 5A 18 18 
372b4 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
372b8 296 3C 00 00 00 
372bc 297 00 00 60 48 
372c0 298 2C 0C 3F 0C 
372c4 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
372c8 29a 38 00 00 00 
372cc 29b 00 00 00 0F 
372d0 29c 26 36 1E 0E 
372d4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
372d8 29e 7F 00 00 00 
372dc 29f 00 00 00 00 
372e0 2a0 00 63 36 1C 
372e4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
372e8 2a2 00 00 00 00 
372ec 2a3 00 00       | 	byte	$00[6]
372ee 2a3 36 1C 08 00 
372f2 2a4 3E 63 03 03 
372f6 2a5 03 63 3E 00 
372fa 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
372fe 2a7 30 18 0C 00 
37302 2a8 1E 30 3E 33 
37306 2a9 33 33 6E 00 
3730a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3730e 2ab 60 30 18 00 
37312 2ac 1C 18 18 18 
37316 2ad 18 18 3C 00 
3731a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3731e 2af 60 30 18 00 
37322 2b0 3E 63 63 63 
37326 2b1 63 63 3E 00 
3732a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3732e 2b3 30 18 0C 00 
37332 2b4 33 33 33 33 
37336 2b5 33 33 6E 00 
3733a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3733e 2b7 00 08 1C 36 
37342 2b8 63 63 7F 63 
37346 2b9 63 63 63 18 
3734a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3734e 2bb 00 00 00 00 
37352 2bc 1E 30 3E 33 
37356 2bd 33 33 6E 18 
3735a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3735e 2bf 00 7F 63 61 
37362 2c0 30 18 0C 06 
37366 2c1 43 63 7F 00 
3736a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3736e 2c3 36 1C 08 00 
37372 2c4 7F 33 18 0C 
37376 2c5 06 63 7F 00 
3737a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3737e 2c7 00 7F 66 46 
37382 2c8 16 1E 16 06 
37386 2c9 46 66 7F 18 
3738a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3738e 2cb 00 00 00 00 
37392 2cc 3E 63 7F 03 
37396 2cd 03 63 3E 18 
3739a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3739e 2cf 00 3C 66 03 
373a2 2d0 1F 03 0F 03 
373a6 2d1 03 66 3C 00 
373aa 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
373ae 2d3 60 30 18 00 
373b2 2d4 7F 33 18 0C 
373b6 2d5 06 63 7F 00 
373ba 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
373be 2d7 00 3C 66 43 
373c2 2d8 03 03 03 03 
373c6 2d9 43 66 3C 00 
373ca 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
373ce 2db 00 00 00 00 
373d2 2dc 3E 63 06 1C 
373d6 2dd 30 63 3E 18 
373da 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
373de 2df 00 00 00 00 
373e2 2e0 00 00       | 	byte	$00[6]
373e4 2e1 6C 36 1B 36 
373e8 2e2 6C 00 00 00 
373ec 2e3 00 00 00 00 
373f0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
373f4 2e5 1B 36 6C 36 
373f8 2e6 1B 00 00 00 
373fc 2e7 88 22 88 22 
37400 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
37404 2e9 88 22 88 22 
37408 2ea 88 22 88 22 
3740c 2eb AA 55 AA 55 
37410 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
37414 2ed AA 55 AA 55 
37418 2ee AA 55 AA 55 
3741c 2ef BB EE BB EE 
37420 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
37424 2f1 BB EE BB EE 
37428 2f2 BB EE BB EE 
3742c 2f3 18 18 18 18 
37430 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
37434 2f5 18 18 18 18 
37438 2f6 18 18 18 18 
3743c 2f7 18 18 18 18 
37440 2f8 18 18 18    | 	byte	$18[15]
37443 2f8 1F 18 18 18 
37447 2f9 18 18 18 18 
3744b 2fa 18 30 18 00 
3744f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
37453 2fc 63 7F 63 63 
37457 2fd 63 63 00 00 
3745b 2fe 00 1C 36 00 
3745f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
37463 300 63 7F 63 63 
37467 301 63 63 00 00 
3746b 302 00 36 1C 00 
3746f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
37473 304 1E 16 06 46 
37477 305 66 7F 00 00 
3747b 306 00 00 00 00 
3747f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
37483 308 1C 30 60 63 
37487 309 63 3E 18 30 
3748b 30a 1E 6C 6C 6C 
3748f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
37493 30c 6F 6C 6C 6C 
37497 30d 6C 6C 6C 6C 
3749b 30e 6C 6C 6C 6C 
3749f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
374a3 310 6C 6C 6C 6C 
374a7 311 6C 6C 6C 6C 
374ab 312 6C          | 	byte	$6c[9]
374ac 313 00 00 00 00 
374b0 314 00          | 	byte	$00[5]
374b1 314 7F 60 6F 6C 
374b5 315 6C 6C 6C 6C 
374b9 316 6C 6C 6C 6C 
374bd 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
374c1 318 6F 60 7F 00 
374c5 319 00 00 00 00 
374c9 31a 00 00 00 18 
374cd 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
374d1 31c 61 30 18 0C 
374d5 31d 06 43 63 7F 
374d9 31e 00 00 00 00 
374dd 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
374e1 320 00 7F 33 18 
374e5 321 0C 06 63 7F 
374e9 322 00 00 00 00 
374ed 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
374f1 324 00 00 1F 18 
374f5 325 18 18 18 18 
374f9 326 18 18 18 18 
374fd 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37501 328 18 18 F8 00 
37505 329 00 00 00 00 
37509 32a 00 00 00 18 
3750d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
37511 32c 18 18 FF 00 
37515 32d 00 00 00 00 
37519 32e 00 00 00 00 
3751d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37521 330 00 00 FF 18 
37525 331 18 18 18 18 
37529 332 18 18 18 18 
3752d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37531 334 18 18 F8 18 
37535 335 18 18 18 18 
37539 336 18 18 18 00 
3753d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
37541 338 00 00 FF 00 
37545 339 00 00 00 00 
37549 33a 00 00 00 18 
3754d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
37551 33c 18 18 FF 18 
37555 33d 18 18 18 18 
37559 33e 18 18 18 63 
3755d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
37561 340 36 63 63 7F 
37565 341 63 63 63 63 
37569 342 00 00 00 00 
3756d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
37571 344 00 1E 30 3E 
37575 345 33 33 33 6E 
37579 346 00 00 00 6C 
3757d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37581 348 EC 0C FC 00 
37585 349 00 00 00 00 
37589 34a 00 00 00 00 
3758d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37591 34c FC 0C EC 6C 
37595 34d 6C 6C 6C 6C 
37599 34e 6C 6C 6C 6C 
3759d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
375a1 350 EF 00 FF 00 
375a5 351 00 00 00 00 
375a9 352 00 00 00 00 
375ad 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
375b1 354 FF 00 EF 6C 
375b5 355 6C 6C 6C 6C 
375b9 356 6C 6C 6C 6C 
375bd 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
375c1 358 EC 0C EC 6C 
375c5 359 6C 6C 6C 6C 
375c9 35a 6C 6C 6C 00 
375cd 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
375d1 35c FF 00 FF 00 
375d5 35d 00 00 00 00 
375d9 35e 00 00 00 6C 
375dd 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
375e1 360 EF 00 EF 6C 
375e5 361 6C 6C 6C 6C 
375e9 362 6C 6C 6C 00 
375ed 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
375f1 364 63 3E 63 63 
375f5 365 63 63 3E 63 
375f9 366 00 00 00 00 
375fd 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
37601 368 30 3C 36 33 
37605 369 33 33 33 6E 
37609 36a 00 00 00 00 
3760d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
37611 36c 66 66 6F 66 
37615 36d 66 66 36 1F 
37619 36e 00 00 00 36 
3761d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
37621 370 66 66 66 66 
37625 371 66 66       | 	byte	$66[6]
37627 371 36 1F 00 00 
3762b 372 00 00 63 00 
3762f 373 7F 66 46 16 
37633 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
37637 375 66 7F 00 00 
3763b 376 00 6C 38 00 
3763f 377 38 30 30 3C 
37643 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
37647 379 33 6E 00 00 
3764b 37a 00 36 1C 00 
3764f 37b 63 67 6F 7F 
37653 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
37657 37d 63 63 00 00 
3765b 37e 00 30 18 00 
3765f 37f 3C 18 18 18 
37663 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37667 381 18 3C 00 00 
3766b 382 00 3C 66 00 
3766f 383 3C 18 18 18 
37673 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37677 385 18 3C 00 00 
3767b 386 00 00 00 36 
3767f 387 1C 08 00 3E 
37683 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
37687 389 63 3E 00 00 
3768b 38a 00 18 18 18 
3768f 38b 18 18 18 18 
37693 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
37697 38d 00 00 00 00 
3769b 38e 00 00 00 00 
3769f 38f 00 00 00 00 | 	byte	$00[12]
376a3 390 F8 18 18 18 
376a7 391 18 18 18 18 
376ab 392 18 FF FF FF 
376af 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
376b3 394 FF FF FF FF 
376b7 395 FF FF FF FF 
376bb 396 FF          | 	byte	$ff[9]
376bc 397 00 00 00 00 
376c0 398 00 00 00    | 	byte	$00[7]
376c3 398 FF FF FF FF 
376c7 399 FF FF FF FF 
376cb 39a FF          | 	byte	$ff[9]
376cc 39b 00 00 00 7E 
376d0 39c 7E 5A 18 18 
376d4 39d 18 18 18 18 
376d8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
376dc 39f 1C 36 1C 63 
376e0 3a0 63 63 63 63 
376e4 3a1 63 63 63 63 
376e8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376ec 3a3 FF FF FF FF 
376f0 3a4 FF FF FF    | 	byte	$ff[7]
376f3 3a4 00 00 00 00 
376f7 3a5 00 00 00 00 
376fb 3a6 00          | 	byte	$00[9]
376fc 3a7 30 18 00 3E 
37700 3a8 63 63 63 63 
37704 3a9 63 63 63 63 
37708 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3770c 3ab 00 00 00 1E 
37710 3ac 33 33 33 1B 
37714 3ad 33 63 63 63 
37718 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3771c 3af 1C 36 00 3E 
37720 3b0 63 63 63 63 
37724 3b1 63 63 63 63 
37728 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3772c 3b3 30 18 00 63 
37730 3b4 67 6F 7F 7B 
37734 3b5 73 63 63 63 
37738 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3773c 3b7 00 00 60 30 
37740 3b8 18 00 3B 66 
37744 3b9 66 66 66 66 
37748 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3774c 3bb 00 00 36 1C 
37750 3bc 08 00 3B 66 
37754 3bd 66 66 66 66 
37758 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3775c 3bf 36 1C 00 3E 
37760 3c0 63 63 06 1C 
37764 3c1 30 60 63 63 
37768 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3776c 3c3 00 00 36 1C 
37770 3c4 08 00 3E 63 
37774 3c5 06 1C 30 63 
37778 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3777c 3c7 30 18 00 3F 
37780 3c8 66 66 66 3E 
37784 3c9 36 66 66 66 
37788 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3778c 3cb 30 18 00 63 
37790 3cc 63 63 63 63 
37794 3cd 63 63 63 63 
37798 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3779c 3cf 00 00 60 30 
377a0 3d0 18 00 3B 6E 
377a4 3d1 66 06 06 06 
377a8 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
377ac 3d3 66 33 00 63 
377b0 3d4 63 63 63 63 
377b4 3d5 63 63 63 63 
377b8 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
377bc 3d7 00 00 60 30 
377c0 3d8 18 00 63 63 
377c4 3d9 63 63 63 63 
377c8 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
377cc 3db 30 18 00 66 
377d0 3dc 66 66 66 3C 
377d4 3dd 18 18 18 18 
377d8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
377dc 3df 00 00 00 08 
377e0 3e0 0C 0C 3F 0C 
377e4 3e1 0C 0C 0C 6C 
377e8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
377ec 3e3 30 18 00 00 
377f0 3e4 00 00 00 00 
377f4 3e5 00 00 00 00 
377f8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377fc 3e7 00 00 00 00 
37800 3e8 00 00 00 00 | 	byte	$00[8]
37804 3e9 7F 00 00 00 
37808 3ea 00 00 00 00 
3780c 3eb 66 33 00 00 
37810 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
37814 3ed 00 00 00 00 
37818 3ee 00 00 00 00 
3781c 3ef 00 00 00 00 
37820 3f0 00 00 00 00 
37824 3f1 00 00 00 00 
37828 3f2 00          | 	byte	$00[21]
37829 3f2 0C 06 3C 36 
3782d 3f3 1C 00 00 00 
37831 3f4 00 00 00 00 
37835 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37839 3f6 00 00 00 63 
3783d 3f7 3E 00 00 00 
37841 3f8 00 00 00 00 
37845 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37849 3fa 00 00 00 00 
3784d 3fb 3E 63 06 1C 
37851 3fc 36 63 63 36 
37855 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37859 3fe 00 00 00 00 
3785d 3ff 00 00 00 00 | 	byte	$00[8]
37861 400 18 00 7E 00 
37865 401 18 00 00 00 
37869 402 00 00 00 00 
3786d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37871 404 00 00 00 00 
37875 405 00 00 00 00 | 	byte	$00[8]
37879 406 18 30 1E 00 
3787d 407 00 00 1C 36 
37881 408 36 1C 00 00 
37885 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37889 40a 00 00 00 00 
3788d 40b 63 00 00 00 
37891 40c 00 00 00 00 
37895 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37899 40e 00 00 00 18 
3789d 40f 18 00 00 00 
378a1 410 00 00 00 00 
378a5 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
378a9 412 00 00 00 00 
378ad 413 00          | 	byte	$00[5]
378ae 413 CC 66 33 00 
378b2 414 33 33 33 33 
378b6 415 33 33 6E 00 
378ba 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
378be 417 00 3F 66 66 
378c2 418 66 3E 36 66 
378c6 419 66 66 6F 00 
378ca 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
378ce 41b 36 1C 08 00 
378d2 41c 3B 6E 66 06 
378d6 41d 06 06 0F 00 
378da 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
378de 41f 00 00 00 7E 
378e2 420 7E 7E 7E 7E 
378e6 421 7E 7E 00 00 
378ea 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
378ee 423 00 00 00 00 
378f2 424 00 00 00 00 
378f6 425 00 00 00 00 
378fa 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
378fc 427 00 00 00 00 
      ...             
3792c 433 00 00 00 00 
37930 434 00 00 00    | st_font        file "st4font.def"
37933 434 FF FF 00 00 
37937 435 00 00 00 00 
3793b 436 00 18 18 18 
3793f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37943 438 18 18 18 18 
37947 439 18 18 18 18 
3794b 43a 18          | 	byte	$18[9]
3794c 43b 00 00 00 00 
37950 43c 00 00 00    | 	byte	$00[7]
37953 43c FF FF 18 18 
37957 43d 18 18 18 18 
3795b 43e 18 18 18 18 
3795f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37963 440 FF FF 00 00 
37967 441 00 00 00 00 
3796b 442 00 18 18 18 
3796f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37973 444 1F 1F 18 18 
37977 445 18 18 18 18 
3797b 446 18 18 18 18 
3797f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37983 448 F8 F8 18 18 
37987 449 18 18 18 18 
3798b 44a 18 00 00 00 
3798f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37993 44c 1F 1F 18 18 
37997 44d 18 18 18 18 
3799b 44e 18 00 00 00 
3799f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
379a3 450 F8 F8 18 18 
379a7 451 18 18 18 18 
379ab 452 18 18 18 18 
379af 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
379b3 454 1F 1F 00 00 
379b7 455 00 00 00 00 
379bb 456 00 18 18 18 
379bf 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
379c3 458 F8 F8 00 00 
379c7 459 00 00 00 00 
379cb 45a 00 18 18 18 
379cf 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
379d3 45c FF FF 18 18 
379d7 45d 18 18 18 18 
379db 45e 18 00 00 18 
379df 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
379e3 460 66 7E 7E 66 
379e7 461 66 66 66 30 
379eb 462 18 00 00 7E 
379ef 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
379f3 464 3E 06 06 06 
379f7 465 06 7E 7E 18 
379fb 466 0C 30 18 3C 
379ff 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
37a03 468 06 06 06 66 
37a07 469 66 7E 3C 00 
37a0b 46a 00 30 18 66 
37a0f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
37a13 46c 7E 7E 76 76 
37a17 46d 66 66 66 00 
37a1b 46e 00 30 18 7C 
37a1f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
37a23 470 1C 38 70 60 
37a27 471 60 7E 3E 00 
37a2b 472 00 30 18 7E 
37a2f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
37a33 474 18 0C 0C 06 
37a37 475 06 7E 7E 00 
37a3b 476 00 18 18 00 
37a3f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
37a43 478 18 18 0C 0C 
37a47 479 06 7E 7E 00 
37a4b 47a 00 30 18 3C 
37a4f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
37a53 47c 66 66 66 66 
37a57 47d 66          | 	byte	$66[5]
37a58 47e 7E 3C 00 00 
37a5c 47f 00 00 06 06 
37a60 480 06 06 16 1E 
37a64 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37a68 482 7E 7E 00 00 
37a6c 483 00 00 00 00 
37a70 484 00 3C 7C 60 
37a74 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37a78 486 7E 7C 30 18 
37a7c 487 00 00 00 00 
37a80 488 00 3C 7E 66 
37a84 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37a88 48a 7E 7C 18 0C 
37a8c 48b 00 00 30 18 
37a90 48c 00 3C 3E 06 
37a94 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
37a98 48e 7E 7C 00 00 
37a9c 48f 00 00 30 18 
37aa0 490 00 3E 7E 66 
37aa4 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
37aa8 492 66 66 00 00 
37aac 493 00 00 30 18 
37ab0 494 00 7C 7E 06 
37ab4 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37ab8 496 7E 3E 00 00 
37abc 497 00 00 30 18 
37ac0 498 00 7E 7E 30 
37ac4 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37ac8 49a 7E 7E 00 00 
37acc 49b 00 00 18 18 
37ad0 49c 00 7E 7E 30 
37ad4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37ad8 49e 7E 7E 00 00 
37adc 49f 00 00 30 18 
37ae0 4a0 00 3C 7E 66 
37ae4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37ae8 4a2 7E 3C 00 00 
37aec 4a3 00 00 1C 1C 
37af0 4a4 18 18 38 3C 
37af4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37af8 4a6 3C 3C 00 00 
37afc 4a7 00 00 00 00 
37b00 4a8 00 00 00 00 
37b04 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37b08 4aa 00 00 00 00 
37b0c 4ab 00 00       | 	byte	$00[6]
37b0e 4ab 18 18 18 18 
37b12 4ac 18 18 18 18 | 	byte	$18[8]
37b16 4ad 00 00 18 18 
37b1a 4ae 00 00 00 00 
37b1e 4af 66 66 66 66 
37b22 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37b26 4b1 00 00 00 00 
37b2a 4b2 00 00 00 00 
37b2e 4b3 00          | 	byte	$00[9]
37b2f 4b3 66 66 FF FF 
37b33 4b4 66 66 FF FF 
37b37 4b5 66 66 00 00 
37b3b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
37b3f 4b7 7C 7E 06 06 
37b43 4b8 3E 7C 60 60 
37b47 4b9 7E 3E 18 18 
37b4b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
37b4f 4bb 66 30 30 18 
37b53 4bc 18 0C 0C 66 
37b57 4bd 66 00 00 00 
37b5b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
37b5f 4bf 66 66 3C 1C 
37b63 4c0 1C FC FE 66 
37b67 4c1 66 FE FC 00 
37b6b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37b6f 4c3 18 18 18 18 
37b73 4c4 00 00 00 00 
37b77 4c5 00 00 00 00 
37b7b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37b7f 4c7 18 1C 0C 0C 
37b83 4c8 0C 0C 0C 0C 
37b87 4c9 1C 18 30 00 
37b8b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37b8f 4cb 18 38 30 30 
37b93 4cc 30 30 30 30 
37b97 4cd 38 18 0C 00 
37b9b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37b9f 4cf 66 66 3C 3C 
37ba3 4d0 FF FF 3C 3C 
37ba7 4d1 66 66 00 00 
37bab 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37baf 4d3 00 18 18 18 
37bb3 4d4 7E 7E 18 18 
37bb7 4d5 18 00 00 00 
37bbb 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37bbf 4d7 00 00 00 00 
37bc3 4d8 00 00       | 	byte	$00[6]
37bc5 4d9 18 18 18 18 
37bc9 4da 18          | 	byte	$18[5]
37bca 4da 0C 04 00 00 
37bce 4db 00 00 00 00 
37bd2 4dc 7E 7E 00 00 
37bd6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
37bda 4de 00 00 00 00 
37bde 4df 00 00 00 00 
37be2 4e0 00 00 00 00 
37be6 4e1 00          | 	byte	$00[13]
37be7 4e1 18 18 18 00 
37beb 4e2 00 00 00 60 
37bef 4e3 60 60 30 30 
37bf3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37bf7 4e5 06 06 06 00 
37bfb 4e6 00 00 00 3C 
37bff 4e7 7E 66 66 66 
37c03 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37c07 4e9 66 7E 3C 00 
37c0b 4ea 00 00 00 18 
37c0f 4eb 18 1C 1C 18 
37c13 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37c17 4ed 18 7E 7E 00 
37c1b 4ee 00 00 00 3C 
37c1f 4ef 7E 66 66 30 
37c23 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37c27 4f1 0C 7E 7E 00 
37c2b 4f2 00 00 00 7E 
37c2f 4f3 7E 30 30 18 
37c33 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37c37 4f5 66 7E 3C 00 
37c3b 4f6 00 00 00 30 
37c3f 4f7 30 38 38 3C 
37c43 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37c47 4f9 7E 30 30 00 
37c4b 4fa 00 00 00 7E 
37c4f 4fb 7E 06 06 3E 
37c53 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37c57 4fd 66 7E 3C 00 
37c5b 4fe 00 00 00 38 
37c5f 4ff 3C 0E 06 06 
37c63 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37c67 501 66 7E 3C 00 
37c6b 502 00 00 00 7E 
37c6f 503 7E 60 60 30 
37c73 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37c77 505 0C 0C 0C 00 
37c7b 506 00 00 00 3C 
37c7f 507 7E 66 66 3C 
37c83 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37c87 509 66 7E 3C 00 
37c8b 50a 00 00 00 3C 
37c8f 50b 7E 66 66 7E 
37c93 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
37c97 50d 70 3C 1C 00 
37c9b 50e 00 00 00 00 
37c9f 50f 00 00 18 18 
37ca3 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
37ca7 511 18 18 18 00 
37cab 512 00 00 00 00 
37caf 513 00 00 18 18 
37cb3 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37cb7 515 18 18 18 0C 
37cbb 516 04 00 00 00 
37cbf 517 70 38 1C 0E 
37cc3 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37cc7 519 70 00 00 00 
37ccb 51a 00 00 00 00 
37ccf 51b 00 00 7E 7E 
37cd3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37cd7 51d 00 00 00 00 
37cdb 51e 00 00 00 00 | 	byte	$00[8]
37cdf 51f 0E 1C 38 70 
37ce3 520 E0 70 38 1C 
37ce7 521 0E 00 00 00 
37ceb 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
37cef 523 7E 66 66 30 
37cf3 524 30 18 18 18 
37cf7 525 00 18 18 00 
37cfb 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
37cff 527 7E 66 66 66 
37d03 528 66 36 06 66 
37d07 529 66 7E 3C 00 
37d0b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
37d0f 52b 3C 7E 66 66 
37d13 52c 66 7E 7E 66 
37d17 52d 66 66 66 00 
37d1b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
37d1f 52f 7E 66 66 7E 
37d23 530 3E 66 66 66 
37d27 531 66 7E 3E 00 
37d2b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
37d2f 533 7E 66 66 06 
37d33 534 06 06 06 66 
37d37 535 66 7E 3C 00 
37d3b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
37d3f 537 7E 66 66 66 
37d43 538 66 66 66 66 
37d47 539 66 7E 3E 00 
37d4b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
37d4f 53b 7E 06 06 3E 
37d53 53c 3E 06 06 06 
37d57 53d 06 7E 7E 00 
37d5b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
37d5f 53f 7E 06 06 3E 
37d63 540 3E 06 06 06 
37d67 541 06 06 06 00 
37d6b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
37d6f 543 7E 06 06 76 
37d73 544 76 66 66 66 
37d77 545 66 7E 3C 00 
37d7b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
37d7f 547 66 66 66 7E 
37d83 548 7E 66 66 66 
37d87 549 66 66 66 00 
37d8b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
37d8f 54b 7E 18 18 18 
37d93 54c 18 18 18 18 
37d97 54d 18 7E 7E 00 
37d9b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
37d9f 54f 60 60 60 60 
37da3 550 60 60 60    | 	byte	$60[7]
37da6 551 66 66 7E 3C 
37daa 552 00 00 00 00 
37dae 553 66 66 36 36 
37db2 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
37db6 555 66 66 C6 C6 
37dba 556 00 00 00 00 
37dbe 557 06 06 06 06 
37dc2 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
37dc6 559 06 06 7E 7E 
37dca 55a 00 00 00 00 
37dce 55b C6 C6 EE EE 
37dd2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
37dd6 55d C6 C6 C6 C6 
37dda 55e 00 00 00 00 
37dde 55f 66 66 66 6E 
37de2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
37de6 561 76 66 66 66 
37dea 562 00 00 00 00 
37dee 563 3C 7E 66 66 
37df2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37df6 565 66 66 7E 3C 
37dfa 566 00 00 00 00 
37dfe 567 3E 7E 66 66 
37e02 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37e06 569 06 06 06 06 
37e0a 56a 00 00 00 00 
37e0e 56b 3C 7E 66 66 
37e12 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37e16 56d 66 56 3E 6C 
37e1a 56e 00 00 00 00 
37e1e 56f 3E 7E 66 66 
37e22 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37e26 571 66 66 C6 C6 
37e2a 572 00 00 00 00 
37e2e 573 7C 7E 06 06 
37e32 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37e36 575 60 60 7E 3E 
37e3a 576 00 00 00 00 
37e3e 577 7E 7E 18 18 
37e42 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37e46 579 18 18 18 18 
37e4a 57a 00 00 00 00 
37e4e 57b 66 66 66 66 
37e52 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e56 57d 66 66 7E 3C 
37e5a 57e 00 00 00 00 
37e5e 57f 66 66 66 66 
37e62 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e66 581 3C 3C 18 18 
37e6a 582 00 00 00 00 
37e6e 583 C6 C6 C6 C6 
37e72 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
37e76 585 FE EE C6 82 
37e7a 586 00 00 00 00 
37e7e 587 66 66 66 3C 
37e82 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
37e86 589 3C 66 66 66 
37e8a 58a 00 00 00 00 
37e8e 58b 66 66 66 66 
37e92 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
37e96 58d 18 18 18 18 
37e9a 58e 00 00 00 00 
37e9e 58f 7E 7E 30 30 
37ea2 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
37ea6 591 06 06 7E 7E 
37eaa 592 00 00 00 00 
37eae 593 3C 3C 0C 0C 
37eb2 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
37eb6 595 0C 0C 3C 3C 
37eba 596 00 00 00 00 
37ebe 597 06 06 0C 0C 
37ec2 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
37ec6 599 60 60 C0 C0 
37eca 59a 00 00 00 00 
37ece 59b 3C 3C 30 30 
37ed2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
37ed6 59d 30 30 3C 3C 
37eda 59e 00 00 00 00 
37ede 59f 18 18 3C 3C 
37ee2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
37ee6 5a1 00 00 00 00 
37eea 5a2 00 00 00 00 
37eee 5a3 00 00 00 00 
37ef2 5a4 00 00 00 00 
37ef6 5a5 00 00       | 	byte	$00[18]
37ef8 5a6 FE FE 00 00 
37efc 5a7 00 00 0C 0C 
37f00 5a8 18 18 00 00 
37f04 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
37f08 5aa 00 00 00 00 
37f0c 5ab 00 00 00 00 
37f10 5ac 00          | 	byte	$00[9]
37f11 5ac 3C 7C 60 7C 
37f15 5ad 7E 66 66 7E 
37f19 5ae 7C 00 00 00 
37f1d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
37f21 5b0 3E 7E 66 66 
37f25 5b1 66 66 66 7E 
37f29 5b2 3E 00 00 00 
37f2d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
37f31 5b4 3C 3E 06 06 
37f35 5b5 06 06 06 7E 
37f39 5b6 7C 00 00 00 
37f3d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
37f41 5b8 7C 7E 66 66 
37f45 5b9 66 66 66 7E 
37f49 5ba 7C 00 00 00 
37f4d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
37f51 5bc 3C 7E 66 66 
37f55 5bd 7E 06 06 7E 
37f59 5be 7C 00 00 00 
37f5d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
37f61 5c0 18 7E 7E 18 
37f65 5c1 18 18 18 18 
37f69 5c2 18 00 00 00 
37f6d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37f71 5c4 7C 7E 66 66 
37f75 5c5 66 66 7E 7C 
37f79 5c6 60 7E 3E 00 
37f7d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
37f81 5c8 3E 7E 66 66 
37f85 5c9 66 66 66 66 
37f89 5ca 66 00 00 00 
37f8d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
37f91 5cc 1C 1C 18 18 
37f95 5cd 18 18 18 3C 
37f99 5ce 3C 00 00 00 
37f9d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
37fa1 5d0 30 30 30 30 
37fa5 5d1 30 30 30 30 
37fa9 5d2 30          | 	byte	$30[9]
37faa 5d2 3E 1E 00 00 
37fae 5d3 06 06 06 36 
37fb2 5d4 36 1E 1E 1E 
37fb6 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
37fba 5d6 00 00 00 00 
37fbe 5d7 1C 1C 18 18 
37fc2 5d8 18 18 18 18 
37fc6 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
37fca 5da 00 00 00 00 
37fce 5db 00 00 00    | 	byte	$00[7]
37fd1 5dc 6C FE FE D6 
37fd5 5dd D6 C6 C6 C6 
37fd9 5de C6 00 00 00 
37fdd 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
37fe1 5e0 3E 7E 66 66 
37fe5 5e1 66 66 66 66 
37fe9 5e2 66 00 00 00 
37fed 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
37ff1 5e4 3C 7E 66 66 
37ff5 5e5 66 66 66 7E 
37ff9 5e6 3C 00 00 00 
37ffd 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
38001 5e8 3E 7E 66 66 
38005 5e9 66 66 66 7E 
38009 5ea 3E 06 06 00 
3800d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
38011 5ec 7C 7E 66 66 
38015 5ed 66 66 66 7E 
38019 5ee 7C 60 60 00 
3801d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
38021 5f0 3E 7E 66 06 
38025 5f1 06 06 06 06 
38029 5f2 06 00 00 00 
3802d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
38031 5f4 7C 7E 06 0E 
38035 5f5 3C 70 60 7E 
38039 5f6 3E 00 00 00 
3803d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
38041 5f8 7E 7E 18 18 
38045 5f9 18 18 18 78 
38049 5fa 70 00 00 00 
3804d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
38051 5fc 66 66 66 66 
38055 5fd 66 66 66    | 	byte	$66[7]
38058 5fe 7E 7C 00 00 
3805c 5ff 00 00 00 00 
38060 600 00 66 66 66 
38064 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
38068 602 18 18 00 00 
3806c 603 00 00 00 00 
38070 604 00 C6 C6 D6 
38074 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
38078 606 C6 82 00 00 
3807c 607 00 00 00 00 
38080 608 00 66 66 3C 
38084 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
38088 60a 66 66 00 00 
3808c 60b 00 00 00 00 
38090 60c 00 66 66 66 
38094 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
38098 60e 7C 60 7E 3E 
3809c 60f 00 00 00 00 
380a0 610 00 7E 7E 30 
380a4 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
380a8 612 7E 7E 00 00 
380ac 613 00 00 30 18 
380b0 614 18 18 18 0C 
380b4 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
380b8 616 18 30 00 00 
380bc 617 00 00 18 18 
380c0 618 18 18 18 18 
380c4 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
380c8 61a 18 18 00 00 
380cc 61b 00 00 0C 18 
380d0 61c 18 18 18 30 
380d4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
380d8 61e 18 0C 00 00 
380dc 61f 00 00 6C 7E 
380e0 620 36 00 00 00 
380e4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
380e8 622 00 00 00 00 
380ec 623 00 00 00 00 
380f0 624 00          | 	byte	$00[9]
380f1 624 18 18 18 18 
380f5 625 18 18 00 00 
380f9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
380fc 627 00 6C FE FE 
38100 628 7C 38 10 00 
38104 629 18 18 18 F8 
38108 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3810c 62b C0 C0 C0 C0 
38110 62c C0 C0 C0 C0 | 	byte	$c0[8]
38114 62d 18 18 18 1F 
38118 62e 1F 00 00 00 
3811c 62f 18 18 18 1F 
38120 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38124 631 00 00 00 1F 
38128 632 1F 18 18 18 
3812c 633 C0 E0 70 38 
38130 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38134 635 03 07 0E 1C 
38138 636 38 70 E0 C0 
3813c 637 80 C0 E0 F0 
38140 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38144 639 00 00 00 00 
38148 63a F0 F0 F0 F0 
3814c 63b 01 03 07 0F 
38150 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38154 63d F0 F0 F0 F0 
38158 63e 00 00 00 00 
3815c 63f 0F 0F 0F 0F 
38160 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38164 641 FF FF 00 00 
38168 642 00 00 00 00 
3816c 643 00 00 00 00 
38170 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38174 645 00 00 00 00 
38178 646 0F 0F 0F 0F 
3817c 647 00 38 38 EE 
38180 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38184 649 00 00 00 F8 
38188 64a F8 18 18 18 
3818c 64b 00 00 00 FF 
38190 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38194 64d 18 18 18 FF 
38198 64e FF 18 18 18 
3819c 64f 00 00 3C 7E 
381a0 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
381a4 651 00 00 00 00 
381a8 652 FF FF FF FF 
381ac 653 03 03 03 03 
381b0 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
381b4 655 00 00 00 FF 
381b8 656 FF 18 18 18 
381bc 657 18 18 18 FF 
381c0 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
381c4 659 0F 0F 0F 0F 
381c8 65a 0F 0F 0F 0F | 	byte	$0f[8]
381cc 65b 18 18 18 F8 
381d0 65c F8 00 00 00 
381d4 65d 1E 06 1E 06 
381d8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
381dc 65f 00 18 3C 7E 
381e0 660 18 18 18 00 
381e4 661 00 18 18 18 
381e8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
381ec 663 00 18 0C 7E 
381f0 664 0C 18 00 00 
381f4 665 00 18 30 7E 
381f8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
381fc 667 00 00 00 00 
38200 668 00 00 00 00 
38204 669 00          | 	byte	$00[9]
38205 669 18 18 18 18 
38209 66a 00 18 00 00 
3820d 66b 66 66 66 00 
38211 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
38215 66d 66 FF 66 66 
38219 66e FF 66 00 18 
3821d 66f 7C 06 3C 60 
38221 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38225 671 66 36 18 0C 
38229 672 66 62 00 38 
3822d 673 6C 38 1C F6 
38231 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38235 675 18 18 18 00 
38239 676 00 00 00 00 
3823d 677 70 38 18 18 
38241 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38245 679 0E 1C 18 18 
38249 67a 1C 0E 00 00 
3824d 67b 66 3C FF 3C 
38251 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38255 67d 18 18 7E 18 
38259 67e 18 00 00 00 
3825d 67f 00 00 00 00 
38261 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38265 681 00 00 7E 00 
38269 682 00 00 00 00 
3826d 683 00 00 00 00 
38271 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38275 685 60 30 18 0C 
38279 686 06 02 00 00 
3827d 687 3C 66 76 6E 
38281 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38285 689 18 1C 18 18 
38289 68a 18 7E 00 00 
3828d 68b 3C 66 30 18 
38291 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38295 68d 7E 30 18 30 
38299 68e 66 3C 00 00 
3829d 68f 30 38 3C 36 
382a1 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
382a5 691 7E 06 3E 60 
382a9 692 66 3C 00 00 
382ad 693 3C 06 3E 66 
382b1 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
382b5 695 7E 60 30 18 
382b9 696 0C 0C 00 00 
382bd 697 3C 66 3C 66 
382c1 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
382c5 699 3C 66 7C 60 
382c9 69a 30 1C 00 00 
382cd 69b 00 18 18 00 
382d1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
382d5 69d 00 18 18 00 
382d9 69e 18 18 0C 60 
382dd 69f 30 18 0C 18 
382e1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
382e5 6a1 00 7E 00 00 
382e9 6a2 7E 00 00 06 
382ed 6a3 0C 18 30 18 
382f1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
382f5 6a5 3C 66 30 18 
382f9 6a6 00 18 00 00 
382fd 6a7 3C 66 76 76 
38301 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
38305 6a9 18 3C 66 66 
38309 6aa 7E 66 00 00 
3830d 6ab 3E 66 3E 66 
38311 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
38315 6ad 3C 66 06 06 
38319 6ae 66 3C 00 00 
3831d 6af 1E 36 66 66 
38321 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38325 6b1 7E 06 3E 06 
38329 6b2 06 7E 00 00 
3832d 6b3 7E 06 3E 06 
38331 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38335 6b5 7C 06 06 76 
38339 6b6 66 7C 00 00 
3833d 6b7 66 66 7E 66 
38341 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38345 6b9 7E 18 18 18 
38349 6ba 18 7E 00 00 
3834d 6bb 60 60 60 60 
38351 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38355 6bd 66 36 1E 1E 
38359 6be 36 66 00 00 
3835d 6bf 06 06 06 06 
38361 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38365 6c1 C6 EE FE D6 
38369 6c2 C6 C6 00 00 
3836d 6c3 66 6E 7E 7E 
38371 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38375 6c5 3C 66 66 66 
38379 6c6 66 3C 00 00 
3837d 6c7 3E 66 66 3E 
38381 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38385 6c9 3C 66 66 66 
38389 6ca 36 6C 00 00 
3838d 6cb 3E 66 66 3E 
38391 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38395 6cd 3C 06 3C 60 
38399 6ce 60 3C 00 00 
3839d 6cf 7E 18 18 18 
383a1 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
383a5 6d1 66 66 66 66 
383a9 6d2 66          | 	byte	$66[5]
383aa 6d2 7E 00 00 66 
383ae 6d3 66 66 66 3C 
383b2 6d4 18 00 00 C6 
383b6 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
383ba 6d6 C6 00 00 66 
383be 6d7 66 3C 3C 66 
383c2 6d8 66 00 00 66 
383c6 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
383ca 6da 18 00 00 7E 
383ce 6db 30 18 0C 06 
383d2 6dc 7E 00 00 78 
383d6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
383da 6de 78 00 00 02 
383de 6df 06 0C 18 30 
383e2 6e0 60 00 00 1E 
383e6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
383ea 6e2 1E 00 00 10 
383ee 6e3 38 6C C6 00 
383f2 6e4 00 00 00 00 
383f6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
383fa 6e6 FF 00 00 18 
383fe 6e7 3C 7E 7E 3C 
38402 6e8 18 00 00 00 
38406 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3840a 6ea 7C 00 00 06 
3840e 6eb 06 3E 66 66 
38412 6ec 3E 00 00 00 
38416 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3841a 6ee 3C 00 00 60 
3841e 6ef 60 7C 66 66 
38422 6f0 7C 00 00 00 
38426 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3842a 6f2 3C 00 00 70 
3842e 6f3 18 7C 18 18 
38432 6f4 18 00 00 00 
38436 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3843a 6f6 60 3E 00 06 
3843e 6f7 06 3E 66 66 
38442 6f8 66 00 00 18 
38446 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3844a 6fa 3C 00 00 60 
3844e 6fb 00 60 60 60 
38452 6fc 60 3C 00 06 
38456 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3845a 6fe 66 00 00 1C 
3845e 6ff 18 18 18 18 
38462 700 3C 00 00 00 
38466 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3846a 702 C6 00 00 00 
3846e 703 3E 66 66 66 
38472 704 66 00 00 00 
38476 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3847a 706 3C 00 00 00 
3847e 707 3E 66 66 3E 
38482 708 06 06 00 00 
38486 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3848a 70a 60 60 00 00 
3848e 70b 3E 66 06 06 
38492 70c 06 00 00 00 
38496 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3849a 70e 3E 00 00 18 
3849e 70f 7E 18 18 18 
384a2 710 70 00 00 00 
384a6 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
384aa 712 7C 00 00 00 
384ae 713 66 66 66 3C 
384b2 714 18 00 00 00 
384b6 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
384ba 716 6C 00 00 00 
384be 717 66 3C 18 3C 
384c2 718 66 00 00 00 
384c6 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
384ca 71a 30 1E 00 00 
384ce 71b 7E 30 18 0C 
384d2 71c 7E 00 00 18 
384d6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
384da 71e 3C 00 18 18 
384de 71f 18 18 18 18 
384e2 720 18 18 00 7E 
384e6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
384ea 722 60 00 10 18 
384ee 723 1C 1E 1C 18 
384f2 724 10 00 08 18 
384f6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
384fa 726 08 00       | 	byte	$08, $00
384fc 727 00 6C FE FE 
38500 728 7C 38 10 00 
38504 729 18 18 18 F8 
38508 72a F8 18 18 18 | a8_font2       file "atari8.fnt"
3850c 72b C0 C0 C0 C0 
38510 72c C0 C0 C0 C0 | 	byte	$c0[8]
38514 72d 18 18 18 1F 
38518 72e 1F 00 00 00 
3851c 72f 18 18 18 1F 
38520 730 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38524 731 00 00 00 1F 
38528 732 1F 18 18 18 
3852c 733 C0 E0 70 38 
38530 734 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38534 735 03 07 0E 1C 
38538 736 38 70 E0 C0 
3853c 737 80 C0 E0 F0 
38540 738 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38544 739 00 00 00 00 
38548 73a F0 F0 F0 F0 
3854c 73b 01 03 07 0F 
38550 73c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38554 73d F0 F0 F0 F0 
38558 73e 00 00 00 00 
3855c 73f 0F 0F 0F 0F 
38560 740 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38564 741 FF FF 00 00 
38568 742 00 00 00 00 
3856c 743 00 00 00 00 
38570 744 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38574 745 00 00 00 00 
38578 746 0F 0F 0F 0F 
3857c 747 00 38 38 EE 
38580 748 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38584 749 00 00 00 F8 
38588 74a F8 18 18 18 
3858c 74b 00 00 00 FF 
38590 74c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38594 74d 18 18 18 FF 
38598 74e FF 18 18 18 
3859c 74f 00 00 3C 7E 
385a0 750 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
385a4 751 00 00 00 00 
385a8 752 FF FF FF FF 
385ac 753 03 03 03 03 
385b0 754 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
385b4 755 00 00 00 FF 
385b8 756 FF 18 18 18 
385bc 757 18 18 18 FF 
385c0 758 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
385c4 759 0F 0F 0F 0F 
385c8 75a 0F 0F 0F 0F | 	byte	$0f[8]
385cc 75b 18 18 18 F8 
385d0 75c F8 00 00 00 
385d4 75d 1E 06 1E 06 
385d8 75e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
385dc 75f 00 18 3C 7E 
385e0 760 18 18 18 00 
385e4 761 00 18 18 18 
385e8 762 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
385ec 763 00 18 0C 7E 
385f0 764 0C 18 00 00 
385f4 765 00 18 30 7E 
385f8 766 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
385fc 767 00 00 00 00 
38600 768 00 00 00 00 
38604 769 00          | 	byte	$00[9]
38605 769 18 18 18 18 
38609 76a 00 18 00 00 
3860d 76b 66 66 66 00 
38611 76c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
38615 76d 66 FF 66 66 
38619 76e FF 66 00 18 
3861d 76f 7C 06 3C 60 
38621 770 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38625 771 66 36 18 0C 
38629 772 66 62 00 38 
3862d 773 6C 38 1C F6 
38631 774 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38635 775 18 18 18 00 
38639 776 00 00 00 00 
3863d 777 70 38 18 18 
38641 778 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38645 779 0E 1C 18 18 
38649 77a 1C 0E 00 00 
3864d 77b 66 3C FF 3C 
38651 77c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38655 77d 18 18 7E 18 
38659 77e 18 00 00 00 
3865d 77f 00 00 00 00 
38661 780 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38665 781 00 00 7E 00 
38669 782 00 00 00 00 
3866d 783 00 00 00 00 
38671 784 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38675 785 60 30 18 0C 
38679 786 06 02 00 00 
3867d 787 3C 66 76 6E 
38681 788 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38685 789 18 1C 18 18 
38689 78a 18 7E 00 00 
3868d 78b 3C 66 30 18 
38691 78c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38695 78d 7E 30 18 30 
38699 78e 66 3C 00 00 
3869d 78f 30 38 3C 36 
386a1 790 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
386a5 791 7E 06 3E 60 
386a9 792 66 3C 00 00 
386ad 793 3C 06 3E 66 
386b1 794 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
386b5 795 7E 60 30 18 
386b9 796 0C 0C 00 00 
386bd 797 3C 66 3C 66 
386c1 798 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
386c5 799 3C 66 7C 60 
386c9 79a 30 1C 00 00 
386cd 79b 00 18 18 00 
386d1 79c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
386d5 79d 00 18 18 00 
386d9 79e 18 18 0C 60 
386dd 79f 30 18 0C 18 
386e1 7a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
386e5 7a1 00 7E 00 00 
386e9 7a2 7E 00 00 06 
386ed 7a3 0C 18 30 18 
386f1 7a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
386f5 7a5 3C 66 30 18 
386f9 7a6 00 18 00 00 
386fd 7a7 3C 66 76 76 
38701 7a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
38705 7a9 18 3C 66 66 
38709 7aa 7E 66 00 00 
3870d 7ab 3E 66 3E 66 
38711 7ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
38715 7ad 3C 66 06 06 
38719 7ae 66 3C 00 00 
3871d 7af 1E 36 66 66 
38721 7b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38725 7b1 7E 06 3E 06 
38729 7b2 06 7E 00 00 
3872d 7b3 7E 06 3E 06 
38731 7b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38735 7b5 7C 06 06 76 
38739 7b6 66 7C 00 00 
3873d 7b7 66 66 7E 66 
38741 7b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38745 7b9 7E 18 18 18 
38749 7ba 18 7E 00 00 
3874d 7bb 60 60 60 60 
38751 7bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38755 7bd 66 36 1E 1E 
38759 7be 36 66 00 00 
3875d 7bf 06 06 06 06 
38761 7c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38765 7c1 C6 EE FE D6 
38769 7c2 C6 C6 00 00 
3876d 7c3 66 6E 7E 7E 
38771 7c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38775 7c5 3C 66 66 66 
38779 7c6 66 3C 00 00 
3877d 7c7 3E 66 66 3E 
38781 7c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38785 7c9 3C 66 66 66 
38789 7ca 36 6C 00 00 
3878d 7cb 3E 66 66 3E 
38791 7cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38795 7cd 3C 06 3C 60 
38799 7ce 60 3C 00 00 
3879d 7cf 7E 18 18 18 
387a1 7d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
387a5 7d1 66 66 66 66 
387a9 7d2 66          | 	byte	$66[5]
387aa 7d2 7E 00 00 66 
387ae 7d3 66 66 66 3C 
387b2 7d4 18 00 00 C6 
387b6 7d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
387ba 7d6 C6 00 00 66 
387be 7d7 66 3C 3C 66 
387c2 7d8 66 00 00 66 
387c6 7d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
387ca 7da 18 00 00 7E 
387ce 7db 30 18 0C 06 
387d2 7dc 7E 00 00 78 
387d6 7dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
387da 7de 78 00 00 02 
387de 7df 06 0C 18 30 
387e2 7e0 60 00 00 1E 
387e6 7e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
387ea 7e2 1E 00 00 10 
387ee 7e3 38 6C C6 00 
387f2 7e4 00 00 00 00 
387f6 7e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
387fa 7e6 FF 00 00 18 
387fe 7e7 3C 7E 7E 3C 
38802 7e8 18 00 00 00 
38806 7e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3880a 7ea 7C 00 00 06 
3880e 7eb 06 3E 66 66 
38812 7ec 3E 00 00 00 
38816 7ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3881a 7ee 3C 00 00 60 
3881e 7ef 60 7C 66 66 
38822 7f0 7C 00 00 00 
38826 7f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3882a 7f2 3C 00 00 70 
3882e 7f3 18 7C 18 18 
38832 7f4 18 00 00 00 
38836 7f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3883a 7f6 60 3E 00 06 
3883e 7f7 06 3E 66 66 
38842 7f8 66 00 00 18 
38846 7f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3884a 7fa 3C 00 00 60 
3884e 7fb 00 60 60 60 
38852 7fc 60 3C 00 06 
38856 7fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3885a 7fe 66 00 00 1C 
3885e 7ff 18 18 18 18 
38862 800 3C 00 00 00 
38866 801 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3886a 802 C6 00 00 00 
3886e 803 3E 66 66 66 
38872 804 66 00 00 00 
38876 805 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3887a 806 3C 00 00 00 
3887e 807 3E 66 66 3E 
38882 808 06 06 00 00 
38886 809 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3888a 80a 60 60 00 00 
3888e 80b 3E 66 06 06 
38892 80c 06 00 00 00 
38896 80d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3889a 80e 3E 00 00 18 
3889e 80f 7E 18 18 18 
388a2 810 70 00 00 00 
388a6 811 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
388aa 812 7C 00 00 00 
388ae 813 66 66 66 3C 
388b2 814 18 00 00 00 
388b6 815 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
388ba 816 6C 00 00 00 
388be 817 66 3C 18 3C 
388c2 818 66 00 00 00 
388c6 819 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
388ca 81a 30 1E 00 00 
388ce 81b 7E 30 18 0C 
388d2 81c 7E 00 00 18 
388d6 81d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
388da 81e 3C 00 18 18 
388de 81f 18 18 18 18 
388e2 820 18 18 00 7E 
388e6 821 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
388ea 822 60 00 10 18 
388ee 823 1C 1E 1C 18 
388f2 824 10 00 08 18 
388f6 825 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
388fa 826 08 00       | 	byte	$08, $00
388fc 827 00 00 00 00 
      ...             
38b08 8aa 00 00 00 00 
38b0c 8ab 00 00       | amiga_font     file "amigafont.def"
38b0e 8ab 18 18 18 18 
38b12 8ac 18 18       | 	byte	$18[6]
38b14 8ad 00 18 18 00 
38b18 8ae 00 00 00 00 
38b1c 8af 00 00 66 66 
38b20 8b0 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
38b24 8b1 00 00 00 00 
38b28 8b2 00 00 00 00 
38b2c 8b3 00 00       | 	byte	$00[10]
38b2e 8b3 36 36 7F 36 
38b32 8b4 36 36 7F 36 
38b36 8b5 36 00 00 00 
38b3a 8b6 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
38b3e 8b7 18 7C 06 06 
38b42 8b8 3C 60 60 3E 
38b46 8b9 18 00 00 00 
38b4a 8ba 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
38b4e 8bb 00 00 C6 69 
38b52 8bc 36 18 6C 96 
38b56 8bd 63 00 00 00 
38b5a 8be 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
38b5e 8bf 1C 36 36 1E 
38b62 8c0 6E 3B 33 73 
38b66 8c1 DE 00 00 00 
38b6a 8c2 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
38b6e 8c3 18 18 0C 00 
38b72 8c4 00 00 00 00 
38b76 8c5 00 00 00 00 
38b7a 8c6 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b7e 8c7 30 18 0C 0C 
38b82 8c8 0C 0C 0C 18 
38b86 8c9 30 00 00 00 
38b8a 8ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
38b8e 8cb 0C 18 30 30 
38b92 8cc 30 30 30 18 
38b96 8cd 0C 00 00 00 
38b9a 8ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
38b9e 8cf 00 66 66 3C 
38ba2 8d0 FF 3C 66 66 
38ba6 8d1 00 00 00 00 
38baa 8d2 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
38bae 8d3 00 18 18 18 
38bb2 8d4 7E 18 18 18 
38bb6 8d5 00 00 00 00 
38bba 8d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38bbe 8d7 00 00 00 00 
38bc2 8d8 00 00 00    | 	byte	$00[7]
38bc5 8d9 18 18 0C 00 
38bc9 8da 00 00 00 00 
38bcd 8db 00 00 00 00 
38bd1 8dc 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38bd5 8dd 00 00 00 00 
38bd9 8de 00 00 00 00 
38bdd 8df 00 00 00 00 
38be1 8e0 00 00 00 00 | 	byte	$00[16]
38be5 8e1 18 18 00 00 
38be9 8e2 00 00 00 00 
38bed 8e3 00 00 C0 60 
38bf1 8e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38bf5 8e5 03 00 00 00 
38bf9 8e6 00 00 00 00 
38bfd 8e7 00 3C 66 66 
38c01 8e8 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38c05 8e9 66 3C 00 00 
38c09 8ea 00 00 00 00 
38c0d 8eb 00 18 1C 1E 
38c11 8ec 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
38c15 8ed 18 18 00 00 
38c19 8ee 00 00 00 00 
38c1d 8ef 00 3C 66 60 
38c21 8f0 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
38c25 8f1 06 7E 00 00 
38c29 8f2 00 00 00 00 
38c2d 8f3 00 3C 66 60 
38c31 8f4 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
38c35 8f5 66 3C 00 00 
38c39 8f6 00 00 00 00 
38c3d 8f7 00 30 38 3C 
38c41 8f8 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
38c45 8f9 30 30 00 00 
38c49 8fa 00 00 00 00 
38c4d 8fb 00 7E 06 06 
38c51 8fc 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
38c55 8fd 66 3C 00 00 
38c59 8fe 00 00 00 00 
38c5d 8ff 00 38 0C 06 
38c61 900 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
38c65 901 66 3C 00 00 
38c69 902 00 00 00 00 
38c6d 903 00 7E 60 60 
38c71 904 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
38c75 905 18 18 00 00 
38c79 906 00 00 00 00 
38c7d 907 00 3C 66 66 
38c81 908 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
38c85 909 66 3C 00 00 
38c89 90a 00 00 00 00 
38c8d 90b 00 3C 66 66 
38c91 90c 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
38c95 90d 30 1C 00 00 
38c99 90e 00 00 00 00 
38c9d 90f 00 00 00 18 
38ca1 910 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
38ca5 911 18 00 00 00 
38ca9 912 00 00 00 00 
38cad 913 00 00 00 18 
38cb1 914 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38cb5 915 18 18 0C 00 
38cb9 916 00 00 00 00 
38cbd 917 00 00 00 60 
38cc1 918 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38cc5 919 00 00 00 00 
38cc9 91a 00 00 00 00 
38ccd 91b 00 00 00 00 | 	byte	$00[12]
38cd1 91c 7E 00 7E 00 
38cd5 91d 00 00 00 00 
38cd9 91e 00 00 00 00 
38cdd 91f 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38ce1 920 18 60 18 06 
38ce5 921 00 00 00 00 
38ce9 922 00 00 00 00 
38ced 923 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38cf1 924 60 30 18 00 
38cf5 925 18 18 00 00 
38cf9 926 00 00 00 00 
38cfd 927 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38d01 928 7B 6B 7B 03 
38d05 929 03 1E 00 00 
38d09 92a 00 00 00 00 
38d0d 92b 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38d11 92c 63 7F 63 63 
38d15 92d 63 63 00 00 
38d19 92e 00 00 00 00 
38d1d 92f 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
38d21 930 66 3E 66 66 
38d25 931 66 3E 00 00 
38d29 932 00 00 00 00 
38d2d 933 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
38d31 934 06 06 06 06 
38d35 935 0C 78 00 00 
38d39 936 00 00 00 00 
38d3d 937 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
38d41 938 63 63 63 63 
38d45 939 33 1F 00 00 
38d49 93a 00 00 00 00 
38d4d 93b 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d51 93c 06 1E 06 06 
38d55 93d 06 7E 00 00 
38d59 93e 00 00 00 00 
38d5d 93f 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d61 940 06 1E 06 06 
38d65 941 06 06 00 00 
38d69 942 00 00 00 00 
38d6d 943 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
38d71 944 06 76 66 66 
38d75 945 66 7C 00 00 
38d79 946 00 00 00 00 
38d7d 947 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
38d81 948 63 7F 63 63 
38d85 949 63 63 00 00 
38d89 94a 00 00 00 00 
38d8d 94b 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
38d91 94c 18 18 18 18 
38d95 94d 18          | 	byte	$18[5]
38d96 94d 3C 00 00 00 
38d9a 94e 00 00 00 00 
38d9e 94f 60 60 60 60 
38da2 950 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
38da6 951 3E 00 00 00 
38daa 952 00 00 00 00 
38dae 953 C3 63 33 1B 
38db2 954 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
38db6 955 C3 00 00 00 
38dba 956 00 00 00 00 
38dbe 957 03 03 03 03 
38dc2 958 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
38dc6 959 7F 00 00 00 
38dca 95a 00 00 00 00 
38dce 95b 63 77 7F 6B 
38dd2 95c 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
38dd6 95d 63 00 00 00 
38dda 95e 00 00 00 00 
38dde 95f 63 67 6F 7B 
38de2 960 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
38de6 961 63 00 00 00 
38dea 962 00 00 00 00 
38dee 963 3E 63 63 63 
38df2 964 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
38df6 965 3E 00 00 00 
38dfa 966 00 00 00 00 
38dfe 967 3E 66 66 66 
38e02 968 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
38e06 969 06 00 00 00 
38e0a 96a 00 00 00 00 
38e0e 96b 3E 63 63 63 
38e12 96c 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
38e16 96d FE 00 00 00 
38e1a 96e 00 00 00 00 
38e1e 96f 1F 33 33 33 
38e22 970 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
38e26 971 63 00 00 00 
38e2a 972 00 00 00 00 
38e2e 973 3C 66 06 0C 
38e32 974 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
38e36 975 3C 00 00 00 
38e3a 976 00 00 00 00 
38e3e 977 7E 18 18 18 
38e42 978 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
38e46 979 18 00 00 00 
38e4a 97a 00 00 00 00 
38e4e 97b 63 63 63 63 
38e52 97c 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
38e56 97d 3E 00 00 00 
38e5a 97e 00 00 00 00 
38e5e 97f 63 63 63 63 
38e62 980 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
38e66 981 08 00 00 00 
38e6a 982 00 00 00 00 
38e6e 983 C3 C3 C3 C3 
38e72 984 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
38e76 985 C3 00 00 00 
38e7a 986 00 00 00 00 
38e7e 987 C3 C3 66 3C 
38e82 988 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
38e86 989 C3 00 00 00 
38e8a 98a 00 00 00 00 
38e8e 98b C3 C3 66 3C 
38e92 98c 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
38e96 98d 18 00 00 00 
38e9a 98e 00 00 00 00 
38e9e 98f 7F 60 60 30 
38ea2 990 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
38ea6 991 7F 00 00 00 
38eaa 992 00 00 00 00 
38eae 993 3C 0C 0C 0C 
38eb2 994 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
38eb6 995 3C 00 00 00 
38eba 996 00 00 00 00 
38ebe 997 00 03 06 0C 
38ec2 998 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
38ec6 999 00 00 00 00 
38eca 99a 00 00 00 00 | 	byte	$00[8]
38ece 99b 3C 30 30 30 
38ed2 99c 30 30 30 30 
38ed6 99d 3C 00 00 00 
38eda 99e 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
38ede 99f 08 1C 36 63 
38ee2 9a0 00 00 00 00 
38ee6 9a1 00 00 00 00 
38eea 9a2 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38eee 9a3 00 00 00 00 
38ef2 9a4 00 00 00 00 
38ef6 9a5 00          | 	byte	$00[9]
38ef7 9a5 7F 00 00 00 
38efb 9a6 00 00 00 18 
38eff 9a7 18 30 00 00 
38f03 9a8 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
38f07 9a9 00 00 00 00 
38f0b 9aa 00 00 00 00 
38f0f 9ab 00 00       | 	byte	$00[10]
38f11 9ac 3C 60 7C 66 
38f15 9ad 66 7C 00 00 
38f19 9ae 00 00 00 00 
38f1d 9af 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
38f21 9b0 3E 66 66 66 
38f25 9b1 66 3E 00 00 
38f29 9b2 00 00 00 00 
38f2d 9b3 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f31 9b4 3C 06 06 06 
38f35 9b5 06 3C 00 00 
38f39 9b6 00 00 00 00 
38f3d 9b7 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
38f41 9b8 7C 66 66 66 
38f45 9b9 66 7C 00 00 
38f49 9ba 00 00 00 00 
38f4d 9bb 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f51 9bc 3C 66 7E 06 
38f55 9bd 06 3C 00 00 
38f59 9be 00 00 00 00 
38f5d 9bf 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
38f61 9c0 3E 0C 0C 0C 
38f65 9c1 0C 0C 00 00 
38f69 9c2 00 00 00 00 
38f6d 9c3 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f71 9c4 7C 66 66 66 
38f75 9c5 7C 60 60 3C 
38f79 9c6 00 00 00 00 
38f7d 9c7 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
38f81 9c8 3E 66 66 66 
38f85 9c9 66 66 00 00 
38f89 9ca 00 00 00 00 
38f8d 9cb 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
38f91 9cc 18 18 18 18 
38f95 9cd 18          | 	byte	$18[5]
38f96 9cd 30 00 00 00 
38f9a 9ce 00 00 00 00 
38f9e 9cf 00 30 00 30 
38fa2 9d0 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
38fa6 9d1 30 30 1E 00 
38faa 9d2 00 00 00 00 
38fae 9d3 03 03 03 33 
38fb2 9d4 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
38fb6 9d5 63 00 00 00 
38fba 9d6 00 00 00 00 
38fbe 9d7 18 18 18 18 
38fc2 9d8 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38fc6 9d9 30 00 00 00 
38fca 9da 00 00 00 00 
38fce 9db 00 00 00 37 
38fd2 9dc 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
38fd6 9dd 63 00 00 00 
38fda 9de 00 00 00 00 
38fde 9df 00 00 00 3E 
38fe2 9e0 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
38fe6 9e1 66 00 00 00 
38fea 9e2 00 00 00 00 
38fee 9e3 00 00 00 3C 
38ff2 9e4 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
38ff6 9e5 3C 00 00 00 
38ffa 9e6 00 00 00 00 
38ffe 9e7 00 00 00 3E 
39002 9e8 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
39006 9e9 06 06 06 00 
3900a 9ea 00 00 00 00 
3900e 9eb 00 00 00 7C 
39012 9ec 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
39016 9ed 60 60 60 00 
3901a 9ee 00 00 00 00 
3901e 9ef 00 00 00 3E 
39022 9f0 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
39026 9f1 06 00 00 00 
3902a 9f2 00 00 00 00 
3902e 9f3 00 00 00 3C 
39032 9f4 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
39036 9f5 3E 00 00 00 
3903a 9f6 00 00 00 00 
3903e 9f7 00 0C 0C 3E 
39042 9f8 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
39046 9f9 38 00 00 00 
3904a 9fa 00 00 00 00 
3904e 9fb 00 00 00 66 
39052 9fc 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
39056 9fd 7C 00 00 00 
3905a 9fe 00 00 00 00 
3905e 9ff 00 00 00 66 
39062 a00 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39066 a01 18 00 00 00 
3906a a02 00 00 00 00 
3906e a03 00 00 00 63 
39072 a04 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
39076 a05 36 00 00 00 
3907a a06 00 00 00 00 
3907e a07 00 00 00 63 
39082 a08 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
39086 a09 63 00 00 00 
3908a a0a 00 00 00 00 
3908e a0b 00 00 00 66 
39092 a0c 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39096 a0d 18 0C 06 00 
3909a a0e 00 00 00 00 
3909e a0f 00 00 00 7E 
390a2 a10 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
390a6 a11 7E 00 00 00 
390aa a12 00 00 00 00 
390ae a13 70 18 18 18 
390b2 a14 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
390b6 a15 70 00 00 00 
390ba a16 00 00 00 00 
390be a17 18 18 18 18 
390c2 a18 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
390c6 a19 18 00 00 00 
390ca a1a 00 00 00 00 
390ce a1b 0E 18 18 18 
390d2 a1c 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
390d6 a1d 0E 00 00 00 
390da a1e 00 00 00 00 
390de a1f 46 5D 31 00 
390e2 a20 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
390e6 a21 00 00 00 00 
390ea a22 00 00 00 00 | 	byte	$00[8]
390ee a23 C0 F0 3C 0F 
390f2 a24 C3 F0 3C 0F 
390f6 a25 03 00 00 00 
390fa a26 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
390fe a27 18 18 00 18 
39102 a28 18 18 18 18 
39106 a29 18 00 00 00 
3910a a2a 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3910e a2b 18 18 7E 1B 
39112 a2c 1B 7E 18 18 
39116 a2d 00 00 00 00 
3911a a2e 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3911e a2f 78 CC 0C 0C 
39122 a30 1E 0C 0C 06 
39126 a31 7F 00 00 00 
3912a a32 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3912e a33 66 3C 66 66 
39132 a34 3C 66 00 00 
39136 a35 00 00 00 00 
3913a a36 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3913e a37 C3 C3 66 3C 
39142 a38 18 7E 18 18 
39146 a39 18 00 00 00 
3914a a3a 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3914e a3b 18 18 18 18 
39152 a3c 00 18 18 18 
39156 a3d 18 00 00 00 
3915a a3e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3915e a3f 3C 06 06 3C 
39162 a40 66 66 66 3C 
39166 a41 60 60 3C 00 
3916a a42 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3916e a43 66 66 00 00 
39172 a44 00 00 00 00 
39176 a45 00 00 00 00 
3917a a46 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3917e a47 7E 81 B9 85 
39182 a48 85 B9 81 7E 
39186 a49 00 00 00 00 
3918a a4a 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3918e a4b 3C 33 33 7E 
39192 a4c 00 7F 00 00 
39196 a4d 00 00 00 00 
3919a a4e 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3919e a4f 00 00 CC 66 
391a2 a50 33 66 CC 00 
391a6 a51 00 00 00 00 
391aa a52 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ae a53 7E 60 60 00 
391b2 a54 00 00 00 00 
391b6 a55 00 00 00 00 
391ba a56 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391be a57 7E 81 9D A5 
391c2 a58 9D A5 81 7E 
391c6 a59 00 00 00 00 
391ca a5a 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
391ce a5b 7E 00 00 00 
391d2 a5c 00 00 00 00 
391d6 a5d 00 00 00 00 
391da a5e 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391de a5f 3C 66 66 3C 
391e2 a60 00 00 00 00 
391e6 a61 00 00 00 00 
391ea a62 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ee a63 18 18 18 7E 
391f2 a64 18 18 18 00 
391f6 a65 7E 00 00 00 
391fa a66 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
391fe a67 1E 30 30 18 
39202 a68 0C 06 3E 00 
39206 a69 00 00 00 00 
3920a a6a 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3920e a6b 1E 30 30 1C 
39212 a6c 30 30 1E 00 
39216 a6d 00 00 00 00 
3921a a6e 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3921e a6f 30 18 0C 06 
39222 a70 00 00 00 00 
39226 a71 00 00 00 00 
3922a a72 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3922e a73 00 00 00 66 
39232 a74 66 66 66 66 
39236 a75 FE 06 06 00 
3923a a76 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3923e a77 7C 5E 5E 5E 
39242 a78 5C 50 50 50 
39246 a79 50 50 00 00 
3924a a7a 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3924e a7b 00 00 00 18 
39252 a7c 18 00 00 00 
39256 a7d 00 00 00 00 
3925a a7e 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3925e a7f 00 00 00 00 
39262 a80 00 00 00 00 
39266 a81 00          | 	byte	$00[9]
39267 a81 30 18 00 00 
3926b a82 00 00 00 18 
3926f a83 1C 18 18 18 
39273 a84 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
39277 a85 00 00 00 00 
3927b a86 00 00 00    | 	byte	$00[7]
3927e a87 3C 66 66 3C 
39282 a88 00 7E 00 00 
39286 a89 00 00 00 00 
3928a a8a 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3928e a8b 00 00 33 66 
39292 a8c CC 66 33 00 
39296 a8d 00 00 00 00 
3929a a8e 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3929e a8f 02 63 32 1A 
392a2 a90 4E 66 F3 40 
392a6 a91 40 00 00 00 
392aa a92 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
392ae a93 04 C6 64 34 
392b2 a94 7C 8C 46 23 
392b6 a95 F0 00 00 00 
392ba a96 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
392be a97 03 C4 66 34 
392c2 a98 5B 6C F6 43 
392c6 a99 40 00 00 00 
392ca a9a 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
392ce a9b 18 18 00 18 
392d2 a9c 0C 06 06 66 
392d6 a9d 3C 00 00 00 
392da a9e 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
392de a9f 06 0C 3E 63 
392e2 aa0 63 7F 63 63 
392e6 aa1 63 00 00 00 
392ea aa2 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ee aa3 30 18 3E 63 
392f2 aa4 63 7F 63 63 
392f6 aa5 63 00 00 00 
392fa aa6 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392fe aa7 0C 33 3E 63 
39302 aa8 63 63 7F 63 
39306 aa9 63 00 00 00 
3930a aaa 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3930e aab 4E 39 3E 63 
39312 aac 63 7F 63 63 
39316 aad 63 00 00 00 
3931a aae 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3931e aaf 63 00 3E 63 
39322 ab0 63 7F 63 63 
39326 ab1 63 00 00 00 
3932a ab2 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3932e ab3 1C 22 1C 36 
39332 ab4 63 63 7F 63 
39336 ab5 63 00 00 00 
3933a ab6 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3933e ab7 F8 3C 3C 36 
39342 ab8 F6 3F 33 33 
39346 ab9 F3 00 00 00 
3934a aba 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3934e abb 78 0C 06 06 
39352 abc 06 06 06 0C 
39356 abd 78 30 18 00 
3935a abe 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3935e abf 0C 18 7E 06 
39362 ac0 06 3E 06 06 
39366 ac1 7E 00 00 00 
3936a ac2 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3936e ac3 30 18 7E 06 
39372 ac4 06 3E 06 06 
39376 ac5 7E 00 00 00 
3937a ac6 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3937e ac7 18 66 7E 06 
39382 ac8 06 3E 06 06 
39386 ac9 7E 00 00 00 
3938a aca 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3938e acb 66 00 7E 06 
39392 acc 06 3E 06 06 
39396 acd 7E 00 00 00 
3939a ace 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3939e acf 0C 18 3C 18 
393a2 ad0 18 18 18 18 
393a6 ad1 3C 00 00 00 
393aa ad2 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393ae ad3 30 18 3C 18 
393b2 ad4 18 18 18 18 
393b6 ad5 3C 00 00 00 
393ba ad6 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393be ad7 18 66 3C 18 
393c2 ad8 18 18 18 18 
393c6 ad9 3C 00 00 00 
393ca ada 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393ce adb 66 00 3C 18 
393d2 adc 18 18 18 18 
393d6 add 3C 00 00 00 
393da ade 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393de adf 1E 36 66 66 
393e2 ae0 6F 66 66 36 
393e6 ae1 1E 00 00 00 
393ea ae2 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
393ee ae3 8E 73 67 6F 
393f2 ae4 7B 73 63 63 
393f6 ae5 63 00 00 00 
393fa ae6 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
393fe ae7 06 0C 3E 63 
39402 ae8 63 63 63 63 
39406 ae9 3E 00 00 00 
3940a aea 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3940e aeb 30 18 3E 63 
39412 aec 63 63 63 63 
39416 aed 3E 00 00 00 
3941a aee 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3941e aef 0C 33 3E 63 
39422 af0 63 63 63 63 
39426 af1 3E 00 00 00 
3942a af2 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3942e af3 8E 71 3E 63 
39432 af4 63 63 63 63 
39436 af5 3E 00 00 00 
3943a af6 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3943e af7 63 00 3E 63 
39442 af8 63 63 63 63 
39446 af9 3E 00 00 00 
3944a afa 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3944e afb 00 00 63 36 
39452 afc 1C 1C 36 63 
39456 afd 00 00 00 00 
3945a afe 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3945e aff BE 63 73 7B 
39462 b00 6B 6F 67 63 
39466 b01 3F 00 00 00 
3946a b02 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3946e b03 0C 18 63 63 
39472 b04 63 63 63 63 
39476 b05 3E 00 00 00 
3947a b06 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3947e b07 18 0C 63 63 
39482 b08 63 63 63 63 
39486 b09 3E 00 00 00 
3948a b0a 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3948e b0b 08 36 63 63 
39492 b0c 63 63 63 63 
39496 b0d 3E 00 00 00 
3949a b0e 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3949e b0f 63 00 63 63 
394a2 b10 63 63 63 63 
394a6 b11 3E 00 00 00 
394aa b12 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
394ae b13 30 18 C3 66 
394b2 b14 3C 18 18 18 
394b6 b15 18 00 00 00 
394ba b16 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
394be b17 03 03 3F 63 
394c2 b18 63 3F 03 03 
394c6 b19 03 00 00 00 
394ca b1a 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
394ce b1b 3C 66 66 66 
394d2 b1c 36 66 66 66 
394d6 b1d 36 06 06 00 
394da b1e 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
394de b1f 06 0C 00 3C 
394e2 b20 60 7C 66 66 
394e6 b21 7C 00 00 00 
394ea b22 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ee b23 60 30 00 3C 
394f2 b24 60 7C 66 66 
394f6 b25 7C 00 00 00 
394fa b26 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394fe b27 18 66 00 3C 
39502 b28 60 7C 66 66 
39506 b29 7C 00 00 00 
3950a b2a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3950e b2b 8E 71 00 3C 
39512 b2c 60 7C 66 66 
39516 b2d 7C 00 00 00 
3951a b2e 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3951e b2f 00 66 00 3C 
39522 b30 60 7C 66 66 
39526 b31 7C 00 00 00 
3952a b32 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3952e b33 18 24 18 3C 
39532 b34 60 7C 66 66 
39536 b35 7C 00 00 00 
3953a b36 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3953e b37 00 00 00 7E 
39542 b38 D8 FE 1B 1B 
39546 b39 EE 00 00 00 
3954a b3a 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3954e b3b 00 00 00 3C 
39552 b3c 06 06 06 06 
39556 b3d 3C 18 0C 00 
3955a b3e 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3955e b3f 06 0C 00 3C 
39562 b40 66 7E 06 06 
39566 b41 3C 00 00 00 
3956a b42 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3956e b43 60 30 00 3C 
39572 b44 66 7E 06 06 
39576 b45 3C 00 00 00 
3957a b46 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3957e b47 18 66 00 3C 
39582 b48 66 7E 06 06 
39586 b49 3C 00 00 00 
3958a b4a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3958e b4b 00 66 00 3C 
39592 b4c 66 7E 06 06 
39596 b4d 3C 00 00 00 
3959a b4e 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3959e b4f 0C 18 00 18 
395a2 b50 18 18 18 18 
395a6 b51 30 00 00 00 
395aa b52 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
395ae b53 18 0C 00 0C 
395b2 b54 0C 0C 0C 0C 
395b6 b55 18 00 00 00 
395ba b56 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
395be b57 18 66 00 18 
395c2 b58 18 18 18 18 
395c6 b59 30 00 00 00 
395ca b5a 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
395ce b5b 00 66 00 18 
395d2 b5c 18 18 18 18 
395d6 b5d 30 00 00 00 
395da b5e 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
395de b5f 03 06 3F 18 
395e2 b60 3C 66 66 66 
395e6 b61 3C 00 00 00 
395ea b62 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ee b63 8E 71 00 3E 
395f2 b64 66 66 66 66 
395f6 b65 66 00 00 00 
395fa b66 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
395fe b67 06 0C 00 3C 
39602 b68 66 66 66 66 
39606 b69 3C 00 00 00 
3960a b6a 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3960e b6b 60 30 00 3C 
39612 b6c 66 66 66 66 
39616 b6d 3C 00 00 00 
3961a b6e 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3961e b6f 18 66 00 3C 
39622 b70 66 66 66 66 
39626 b71 3C 00 00 00 
3962a b72 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3962e b73 8E 71 00 3C 
39632 b74 66 66 66 66 
39636 b75 3C 00 00 00 
3963a b76 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3963e b77 00 66 00 3C 
39642 b78 66 66 66 66 
39646 b79 3C 00 00 00 
3964a b7a 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3964e b7b 00 18 18 00 
39652 b7c 7E 00 18 18 
39656 b7d 00 00 00 00 
3965a b7e 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3965e b7f 00 00 00 7E 
39662 b80 73 7B 6F 67 
39666 b81 3F 00 00 00 
3966a b82 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3966e b83 0C 18 00 66 
39672 b84 66 66 66 66 
39676 b85 7C 00 00 00 
3967a b86 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3967e b87 30 18 00 66 
39682 b88 66 66 66 66 
39686 b89 7C 00 00 00 
3968a b8a 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3968e b8b 18 66 00 66 
39692 b8c 66 66 66 66 
39696 b8d 7C 00 00 00 
3969a b8e 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3969e b8f 00 66 00 66 
396a2 b90 66 66 66 66 
396a6 b91 7C 00 00 00 
396aa b92 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
396ae b93 30 18 00 66 
396b2 b94 66 66 66 3C 
396b6 b95 18 0C 06 00 
396ba b96 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
396be b97 06 06 06 3E 
396c2 b98 66 66 66 3E 
396c6 b99 06 06 06 00 
396ca b9a 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
396ce b9b 00 66 00 66 
396d2 b9c 66 66 66 3C 
396d6 b9d 18 0C 06 00 
396da b9e 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
396de b9f 00 7E 66 66 
396e2 ba0 66 66 66 66 
396e6 ba1 66 7E 00 00 
396ea ba2 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
396ee ba3 00 00 00 00 
      ...             
398f6 c25 00 00 00 00 
398fa c26 00 00       | 	byte	$00[526]
398fc c27 00 00 00 00 
39900 c28 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
39901 c28 80 00 00 00 
39905 c29 00 80 00 00 
39909 c2a 80 80 00 00 
3990d c2b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
39911 c2c 80 00 80 00 
39915 c2d 00 40 80 00 
39919 c2e AA AA AA 00 
3991d c2f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
39921 c30 FF 00 00 00 
39925 c31 00 FF 00 00 
39929 c32 FF FF 00 00 
3992d c33 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
39931 c34 FF 00 FF 00 
39935 c35 00 FF FF 00 
39939 c36 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3993c c37 00 00 00 00 
39940 c38 00          | ataripalette   file "ataripalettep2.def"
39941 c38 11 11 11 00 
39945 c39 22 22 22 00 
39949 c3a 33 33 33 00 
3994d c3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39951 c3c 55 55 55 00 
39955 c3d 66 66 66 00 
39959 c3e 77 77 77 00 
3995d c3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39961 c40 99 99 99 00 
39965 c41 AA AA AA 00 
39969 c42 BB BB BB 00 
3996d c43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39971 c44 DD DD DD 00 
39975 c45 EE EE EE 00 
39979 c46 FF FF FF 00 
3997d c47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39981 c48 00 14 40 00 
39985 c49 00 1E 60 00 
39989 c4a 00 28 80 00 
3998d c4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39991 c4c 00 3C BF 00 
39995 c4d 00 46 DF 00 
39999 c4e 00 50 FF 00 
3999d c4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
399a1 c50 39 77 FF 00 
399a5 c51 55 8A FF 00 
399a9 c52 71 9E FF 00 
399ad c53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
399b1 c54 AA C5 FF 00 
399b5 c55 C6 D8 FF 00 
399b9 c56 E3 EC FF 00 
399bd c57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
399c1 c58 00 00 40 00 
399c5 c59 00 00 60 00 
399c9 c5a 00 00 80 00 
399cd c5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
399d1 c5c 00 00 BF 00 
399d5 c5d 00 00 DF 00 
399d9 c5e 00 00 FF 00 
399dd c5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
399e1 c60 39 39 FF 00 
399e5 c61 55 55 FF 00 
399e9 c62 71 71 FF 00 
399ed c63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
399f1 c64 AA AA FF 00 
399f5 c65 C6 C6 FF 00 
399f9 c66 E3 E3 FF 00 
399fd c67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39a01 c68 20 00 40 00 
39a05 c69 30 00 60 00 
39a09 c6a 40 00 80 00 
39a0d c6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39a11 c6c 60 00 BF 00 
39a15 c6d 70 00 DF 00 
39a19 c6e 80 00 FF 00 
39a1d c6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39a21 c70 9C 39 FF 00 
39a25 c71 AA 55 FF 00 
39a29 c72 B8 71 FF 00 
39a2d c73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39a31 c74 D5 AA FF 00 
39a35 c75 E3 C6 FF 00 
39a39 c76 F1 E3 FF 00 
39a3d c77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39a41 c78 40 00 40 00 
39a45 c79 60 00 60 00 
39a49 c7a 80 00 80 00 
39a4d c7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39a51 c7c BF 00 BF 00 
39a55 c7d DF 00 DF 00 
39a59 c7e FF 00 FF 00 
39a5d c7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39a61 c80 FF 39 FF 00 
39a65 c81 FF 55 FF 00 
39a69 c82 FF 71 FF 00 
39a6d c83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39a71 c84 FF AA FF 00 
39a75 c85 FF C6 FF 00 
39a79 c86 FF E3 FF 00 
39a7d c87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39a81 c88 40 00 20 00 
39a85 c89 60 00 30 00 
39a89 c8a 80 00 40 00 
39a8d c8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39a91 c8c BF 00 60 00 
39a95 c8d DF 00 70 00 
39a99 c8e FF 00 80 00 
39a9d c8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39aa1 c90 FF 39 9C 00 
39aa5 c91 FF 55 AA 00 
39aa9 c92 FF 71 B8 00 
39aad c93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39ab1 c94 FF AA D5 00 
39ab5 c95 FF C6 E3 00 
39ab9 c96 FF E3 F1 00 
39abd c97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39ac1 c98 40 00 00 00 
39ac5 c99 60 00 00 00 
39ac9 c9a 80 00 00 00 
39acd c9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39ad1 c9c BF 00 00 00 
39ad5 c9d DF 00 00 00 
39ad9 c9e FF 00 00 00 
39add c9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39ae1 ca0 FF 39 39 00 
39ae5 ca1 FF 55 55 00 
39ae9 ca2 FF 71 71 00 
39aed ca3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39af1 ca4 FF AA AA 00 
39af5 ca5 FF C6 C6 00 
39af9 ca6 FF E3 E3 00 
39afd ca7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39b01 ca8 40 10 00 00 
39b05 ca9 60 18 00 00 
39b09 caa 80 20 00 00 
39b0d cab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39b11 cac BF 30 00 00 
39b15 cad DF 38 00 00 
39b19 cae FF 40 00 00 
39b1d caf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39b21 cb0 FF 6A 39 00 
39b25 cb1 FF 80 55 00 
39b29 cb2 FF 95 71 00 
39b2d cb3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39b31 cb4 FF BF AA 00 
39b35 cb5 FF D5 C6 00 
39b39 cb6 FF EA E3 00 
39b3d cb7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39b41 cb8 40 20 00 00 
39b45 cb9 60 30 00 00 
39b49 cba 80 40 00 00 
39b4d cbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39b51 cbc BF 60 00 00 
39b55 cbd DF 70 00 00 
39b59 cbe FF 80 00 00 
39b5d cbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39b61 cc0 FF 9C 39 00 
39b65 cc1 FF AA 55 00 
39b69 cc2 FF B8 71 00 
39b6d cc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39b71 cc4 FF D5 AA 00 
39b75 cc5 FF E3 C6 00 
39b79 cc6 FF F1 E3 00 
39b7d cc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39b81 cc8 40 30 00 00 
39b85 cc9 60 48 00 00 
39b89 cca 80 60 00 00 
39b8d ccb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39b91 ccc BF 90 00 00 
39b95 ccd DF A8 00 00 
39b99 cce FF C0 00 00 
39b9d ccf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39ba1 cd0 FF CE 39 00 
39ba5 cd1 FF D5 55 00 
39ba9 cd2 FF DC 71 00 
39bad cd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39bb1 cd4 FF EA AA 00 
39bb5 cd5 FF F1 C6 00 
39bb9 cd6 FF F8 E3 00 
39bbd cd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39bc1 cd8 30 40 00 00 
39bc5 cd9 48 60 00 00 
39bc9 cda 60 80 00 00 
39bcd cdb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39bd1 cdc 90 BF 00 00 
39bd5 cdd A8 DF 00 00 
39bd9 cde C0 FF 00 00 
39bdd cdf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39be1 ce0 CE FF 39 00 
39be5 ce1 D5 FF 55 00 
39be9 ce2 DC FF 71 00 
39bed ce3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39bf1 ce4 EA FF AA 00 
39bf5 ce5 F1 FF C6 00 
39bf9 ce6 F8 FF E3 00 
39bfd ce7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39c01 ce8 00 40 00 00 
39c05 ce9 00 60 00 00 
39c09 cea 00 80 00 00 
39c0d ceb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39c11 cec 00 BF 00 00 
39c15 ced 00 DF 00 00 
39c19 cee 00 FF 00 00 
39c1d cef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39c21 cf0 39 FF 39 00 
39c25 cf1 55 FF 55 00 
39c29 cf2 71 FF 71 00 
39c2d cf3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39c31 cf4 AA FF AA 00 
39c35 cf5 C6 FF C6 00 
39c39 cf6 E3 FF E3 00 
39c3d cf7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39c41 cf8 00 40 14 00 
39c45 cf9 00 60 1E 00 
39c49 cfa 00 80 28 00 
39c4d cfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39c51 cfc 00 BF 3C 00 
39c55 cfd 00 DF 46 00 
39c59 cfe 00 FF 50 00 
39c5d cff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39c61 d00 39 FF 77 00 
39c65 d01 55 FF 8A 00 
39c69 d02 71 FF 9E 00 
39c6d d03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39c71 d04 AA FF C5 00 
39c75 d05 C6 FF D8 00 
39c79 d06 E3 FF EC 00 
39c7d d07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39c81 d08 00 40 28 00 
39c85 d09 00 60 3C 00 
39c89 d0a 00 80 50 00 
39c8d d0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39c91 d0c 00 BF 78 00 
39c95 d0d 00 DF 8C 00 
39c99 d0e 00 FF A0 00 
39c9d d0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39ca1 d10 39 FF B5 00 
39ca5 d11 55 FF C0 00 
39ca9 d12 71 FF CA 00 
39cad d13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39cb1 d14 AA FF DF 00 
39cb5 d15 C6 FF EA 00 
39cb9 d16 E3 FF F4 00 
39cbd d17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39cc1 d18 00 40 40 00 
39cc5 d19 00 60 60 00 
39cc9 d1a 00 80 80 00 
39ccd d1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39cd1 d1c 00 BF BF 00 
39cd5 d1d 00 DF DF 00 
39cd9 d1e 00 FF FF 00 
39cdd d1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39ce1 d20 39 FF FF 00 
39ce5 d21 55 FF FF 00 
39ce9 d22 71 FF FF 00 
39ced d23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39cf1 d24 AA FF FF 00 
39cf5 d25 C6 FF FF 00 
39cf9 d26 E3 FF FF 00 
39cfd d27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39d01 d28 00 28 40 00 
39d05 d29 00 3C 60 00 
39d09 d2a 00 50 80 00 
39d0d d2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39d11 d2c 00 78 BF 00 
39d15 d2d 00 8C DF 00 
39d19 d2e 00 A0 FF 00 
39d1d d2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39d21 d30 39 B5 FF 00 
39d25 d31 55 C0 FF 00 
39d29 d32 71 CA FF 00 
39d2d d33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39d31 d34 AA DF FF 00 
39d35 d35 C6 EA FF 00 
39d39 d36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39d3c d37 00 00 00 00 
39d40 d38 00          | ataripalette2  file "ataripalettep2.def"
39d41 d38 11 11 11 00 
39d45 d39 22 22 22 00 
39d49 d3a 33 33 33 00 
39d4d d3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39d51 d3c 55 55 55 00 
39d55 d3d 66 66 66 00 
39d59 d3e 77 77 77 00 
39d5d d3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39d61 d40 99 99 99 00 
39d65 d41 AA AA AA 00 
39d69 d42 BB BB BB 00 
39d6d d43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39d71 d44 DD DD DD 00 
39d75 d45 EE EE EE 00 
39d79 d46 FF FF FF 00 
39d7d d47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39d81 d48 00 14 40 00 
39d85 d49 00 1E 60 00 
39d89 d4a 00 28 80 00 
39d8d d4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39d91 d4c 00 3C BF 00 
39d95 d4d 00 46 DF 00 
39d99 d4e 00 50 FF 00 
39d9d d4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39da1 d50 39 77 FF 00 
39da5 d51 55 8A FF 00 
39da9 d52 71 9E FF 00 
39dad d53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39db1 d54 AA C5 FF 00 
39db5 d55 C6 D8 FF 00 
39db9 d56 E3 EC FF 00 
39dbd d57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39dc1 d58 00 00 40 00 
39dc5 d59 00 00 60 00 
39dc9 d5a 00 00 80 00 
39dcd d5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39dd1 d5c 00 00 BF 00 
39dd5 d5d 00 00 DF 00 
39dd9 d5e 00 00 FF 00 
39ddd d5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39de1 d60 39 39 FF 00 
39de5 d61 55 55 FF 00 
39de9 d62 71 71 FF 00 
39ded d63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39df1 d64 AA AA FF 00 
39df5 d65 C6 C6 FF 00 
39df9 d66 E3 E3 FF 00 
39dfd d67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39e01 d68 20 00 40 00 
39e05 d69 30 00 60 00 
39e09 d6a 40 00 80 00 
39e0d d6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39e11 d6c 60 00 BF 00 
39e15 d6d 70 00 DF 00 
39e19 d6e 80 00 FF 00 
39e1d d6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39e21 d70 9C 39 FF 00 
39e25 d71 AA 55 FF 00 
39e29 d72 B8 71 FF 00 
39e2d d73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39e31 d74 D5 AA FF 00 
39e35 d75 E3 C6 FF 00 
39e39 d76 F1 E3 FF 00 
39e3d d77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39e41 d78 40 00 40 00 
39e45 d79 60 00 60 00 
39e49 d7a 80 00 80 00 
39e4d d7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39e51 d7c BF 00 BF 00 
39e55 d7d DF 00 DF 00 
39e59 d7e FF 00 FF 00 
39e5d d7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39e61 d80 FF 39 FF 00 
39e65 d81 FF 55 FF 00 
39e69 d82 FF 71 FF 00 
39e6d d83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39e71 d84 FF AA FF 00 
39e75 d85 FF C6 FF 00 
39e79 d86 FF E3 FF 00 
39e7d d87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39e81 d88 40 00 20 00 
39e85 d89 60 00 30 00 
39e89 d8a 80 00 40 00 
39e8d d8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39e91 d8c BF 00 60 00 
39e95 d8d DF 00 70 00 
39e99 d8e FF 00 80 00 
39e9d d8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39ea1 d90 FF 39 9C 00 
39ea5 d91 FF 55 AA 00 
39ea9 d92 FF 71 B8 00 
39ead d93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39eb1 d94 FF AA D5 00 
39eb5 d95 FF C6 E3 00 
39eb9 d96 FF E3 F1 00 
39ebd d97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39ec1 d98 40 00 00 00 
39ec5 d99 60 00 00 00 
39ec9 d9a 80 00 00 00 
39ecd d9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39ed1 d9c BF 00 00 00 
39ed5 d9d DF 00 00 00 
39ed9 d9e FF 00 00 00 
39edd d9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39ee1 da0 FF 39 39 00 
39ee5 da1 FF 55 55 00 
39ee9 da2 FF 71 71 00 
39eed da3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39ef1 da4 FF AA AA 00 
39ef5 da5 FF C6 C6 00 
39ef9 da6 FF E3 E3 00 
39efd da7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39f01 da8 40 10 00 00 
39f05 da9 60 18 00 00 
39f09 daa 80 20 00 00 
39f0d dab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39f11 dac BF 30 00 00 
39f15 dad DF 38 00 00 
39f19 dae FF 40 00 00 
39f1d daf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39f21 db0 FF 6A 39 00 
39f25 db1 FF 80 55 00 
39f29 db2 FF 95 71 00 
39f2d db3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39f31 db4 FF BF AA 00 
39f35 db5 FF D5 C6 00 
39f39 db6 FF EA E3 00 
39f3d db7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39f41 db8 40 20 00 00 
39f45 db9 60 30 00 00 
39f49 dba 80 40 00 00 
39f4d dbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39f51 dbc BF 60 00 00 
39f55 dbd DF 70 00 00 
39f59 dbe FF 80 00 00 
39f5d dbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39f61 dc0 FF 9C 39 00 
39f65 dc1 FF AA 55 00 
39f69 dc2 FF B8 71 00 
39f6d dc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39f71 dc4 FF D5 AA 00 
39f75 dc5 FF E3 C6 00 
39f79 dc6 FF F1 E3 00 
39f7d dc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39f81 dc8 40 30 00 00 
39f85 dc9 60 48 00 00 
39f89 dca 80 60 00 00 
39f8d dcb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39f91 dcc BF 90 00 00 
39f95 dcd DF A8 00 00 
39f99 dce FF C0 00 00 
39f9d dcf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39fa1 dd0 FF CE 39 00 
39fa5 dd1 FF D5 55 00 
39fa9 dd2 FF DC 71 00 
39fad dd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39fb1 dd4 FF EA AA 00 
39fb5 dd5 FF F1 C6 00 
39fb9 dd6 FF F8 E3 00 
39fbd dd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39fc1 dd8 30 40 00 00 
39fc5 dd9 48 60 00 00 
39fc9 dda 60 80 00 00 
39fcd ddb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39fd1 ddc 90 BF 00 00 
39fd5 ddd A8 DF 00 00 
39fd9 dde C0 FF 00 00 
39fdd ddf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39fe1 de0 CE FF 39 00 
39fe5 de1 D5 FF 55 00 
39fe9 de2 DC FF 71 00 
39fed de3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39ff1 de4 EA FF AA 00 
39ff5 de5 F1 FF C6 00 
39ff9 de6 F8 FF E3 00 
39ffd de7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3a001 de8 00 40 00 00 
3a005 de9 00 60 00 00 
3a009 dea 00 80 00 00 
3a00d deb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3a011 dec 00 BF 00 00 
3a015 ded 00 DF 00 00 
3a019 dee 00 FF 00 00 
3a01d def 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3a021 df0 39 FF 39 00 
3a025 df1 55 FF 55 00 
3a029 df2 71 FF 71 00 
3a02d df3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3a031 df4 AA FF AA 00 
3a035 df5 C6 FF C6 00 
3a039 df6 E3 FF E3 00 
3a03d df7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3a041 df8 00 40 14 00 
3a045 df9 00 60 1E 00 
3a049 dfa 00 80 28 00 
3a04d dfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3a051 dfc 00 BF 3C 00 
3a055 dfd 00 DF 46 00 
3a059 dfe 00 FF 50 00 
3a05d dff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3a061 e00 39 FF 77 00 
3a065 e01 55 FF 8A 00 
3a069 e02 71 FF 9E 00 
3a06d e03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3a071 e04 AA FF C5 00 
3a075 e05 C6 FF D8 00 
3a079 e06 E3 FF EC 00 
3a07d e07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3a081 e08 00 40 28 00 
3a085 e09 00 60 3C 00 
3a089 e0a 00 80 50 00 
3a08d e0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3a091 e0c 00 BF 78 00 
3a095 e0d 00 DF 8C 00 
3a099 e0e 00 FF A0 00 
3a09d e0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3a0a1 e10 39 FF B5 00 
3a0a5 e11 55 FF C0 00 
3a0a9 e12 71 FF CA 00 
3a0ad e13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3a0b1 e14 AA FF DF 00 
3a0b5 e15 C6 FF EA 00 
3a0b9 e16 E3 FF F4 00 
3a0bd e17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3a0c1 e18 00 40 40 00 
3a0c5 e19 00 60 60 00 
3a0c9 e1a 00 80 80 00 
3a0cd e1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3a0d1 e1c 00 BF BF 00 
3a0d5 e1d 00 DF DF 00 
3a0d9 e1e 00 FF FF 00 
3a0dd e1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3a0e1 e20 39 FF FF 00 
3a0e5 e21 55 FF FF 00 
3a0e9 e22 71 FF FF 00 
3a0ed e23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3a0f1 e24 AA FF FF 00 
3a0f5 e25 C6 FF FF 00 
3a0f9 e26 E3 FF FF 00 
3a0fd e27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3a101 e28 00 28 40 00 
3a105 e29 00 3C 60 00 
3a109 e2a 00 50 80 00 
3a10d e2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3a111 e2c 00 78 BF 00 
3a115 e2d 00 8C DF 00 
3a119 e2e 00 A0 FF 00 
3a11d e2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3a121 e30 39 B5 FF 00 
3a125 e31 55 C0 FF 00 
3a129 e32 71 CA FF 00 
3a12d e33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3a131 e34 AA DF FF 00 
3a135 e35 C6 EA FF 00 
3a139 e36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3a13c e37             | 
3a13c e37             | '**********************************************************************************
3a13c e37             | '
3a13c e37             | '        Timings and colors definitions
3a13c e37             | '
3a13c e37             | '**********************************************************************************
3a13c e37             | 
3a13c e37             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3a13c e37 08 00 00 00 
3a140 e38 3C 00 00 00 
3a144 e39 08 00 00 00 
3a148 e3a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3a14c e3b 07 00 00 00 
3a150 e3c 04 00 00 00 
3a154 e3d 01 00 00 00 
3a158 e3e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3a15c e3f 58 02 00 00 
3a160 e40 20 9E 4B 14 
3a164 e41 FB A8 9E 01 
3a168 e42 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3a16c e43 00 00 00 00 
3a170 e44 C0 00 00 00 
3a174 e45 00 00 00 00 
3a178 e46 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a17c e47             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3a17c e47 00 75 C7 97 
3a180 e48 27 47 F6 0A 
3a184 e49 05 79 CB 9B 
3a188 e4a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3a18c e4b             | 
3a18c e4b             | ''--------  Initialization  ----------------------------------------------------------------
3a18c e4b             | 
3a18c e4b 28 0C 64 FD | hdmi            setq    #6
3a190 e4c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3a194 e4d 28 10 64 FD |                 setq    #8
3a198 e4e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3a19c e4f             | 
3a19c e4f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3a1a0 e50 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3a1a4 e51 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3a1a8 e52 D6 C6 01 F1 |                 add     t1,hbase
3a1ac e53 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3a1b0 e54 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3a1b4 e55 7B 0B 80 5F 
3a1b8 e56 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3a1bc e57 66 66 86 FF 
3a1c0 e58 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3a1c4 e59             | '
3a1c4 e59 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3a1c8 e5a 11 C6 65 F0 |                 shl 	t1,#17                             '
3a1cc e5b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3a1d0 e5c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3a1d4 e5d             | 
3a1d4 e5d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3a1d8 e5e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3a1dc e5f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3a1e0 e60             | 
3a1e0 e60             | ''--------  frame rendering main loop  ---------------------------------------------------
3a1e0 e60             | 
3a1e0 e60 28 06 64 FD | p101            setq 	#3
3a1e4 e61 00 A5 05 FB | 		rdlong  vblankptr,ptra
3a1e8 e62 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3a1ec e63 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3a1f0 e64 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3a1f4 e65 00 A0 05 F6 |                 mov     dlinum, #0
3a1f8 e66 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3a1fc e67 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3a200 e68             | 
3a200 e68             | 
3a200 e68 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3a204 e69 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3a208 e6a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3a20c e6b             |                 
3a20c e6b             | 
3a20c e6b             | 
3a20c e6b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3a20c e6b             |   
3a20c e6b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3a210 e6c 29 FE 65 3D |          if_nc  setq2   #255
3a214 e6d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3a218 e6e             | 
3a218 e6e             | '' -----   up porch (before the picture)
3a218 e6e             | 
3a218 e6e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3a21c e6f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3a220 e70 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3a224 e71 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3a228 e72             |  
3a228 e72             |    
3a228 e72             |  
3a228 e72 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a22c e73 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a230 e74 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3a234 e75 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a238 e76 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a23c e77 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3a240 e78             | 
3a240 e78 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a244 e79 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a248 e7a 48 00 B0 FD | 		call    #dli
3a24c e7b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a250 e7c E1 90 C1 FC |                 xcont   m_vi,hsync0
3a254 e7d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3a258 e7e             |                 	
3a258 e7e             |                 
3a258 e7e             | 
3a258 e7e             |  
3a258 e7e             | '' ------- the main screen drawing starts here
3a258 e7e             | 
3a258 e7e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3a25c e7f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3a260 e80 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3a264 e81 E1 8E C1 FC |                 xcont   m_bv,hsync0
3a268 e82 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3a26c e83 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3a270 e84 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3a274 e85             |               
3a274 e85             | 
3a274 e85 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3a278 e86 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3a27c e87             | 
3a27c e87             | ' ---------------- All visible lines displayed now, start vblank  
3a27c e87             | 
3a27c e87 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3a280 e88 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3a284 e89 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3a288 e8a C3 C4 01 F6 |                 mov     hsync1,sync_223
3a28c e8b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3a290 e8c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3a294 e8d             | 
3a294 e8d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3a294 e8d             | 
3a294 e8d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3a294 e8d             | 
3a294 e8d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3a298 e8e             | 
3a298 e8e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3a29c e8f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3a2a0 e90 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3a2a4 e91             | 
3a2a4 e91 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3a2a8 e92 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3a2ac e93 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3a2b0 e94 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3a2b4 e95 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3a2b8 e96             | 
3a2b8 e96 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3a2bc e97 DD C6 41 F8 |                 getnib  t1,dl,#0
3a2c0 e98 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3a2c4 e99 70 00 90 AD |     if_z        jmp     #preload
3a2c8 e9a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3a2cc e9b 94 00 90 AD |     if_z        jmp     #preload2
3a2d0 e9c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3a2d4 e9d 0C 00 90 AD |     if_z        jmp     #p390
3a2d8 e9e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3a2dc e9f 28 00 90 AD |     if_z        jmp     #p391  
3a2e0 ea0             | 
3a2e0 ea0 2D 00 64 FD | p308            ret
3a2e4 ea1             |    
3a2e4 ea1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3a2e8 ea2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3a2ec ea3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3a2f0 ea4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3a2f4 ea5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3a2f8 ea6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3a2fc ea7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3a300 ea8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3a304 ea9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3a308 eaa             |  
3a308 eaa             | '' --------  Reload palette. To do 
3a308 eaa             | 
3a308 eaa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3a30c eab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3a310 eac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3a314 ead 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3a318 eae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3a31c eaf E0 00 00 FB |         	rdlong  $000, framebuf2         	
3a320 eb0 70 FF 9F FD |         	jmp     #dli                
3a324 eb1             |       
3a324 eb1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3a324 eb1             | 
3a324 eb1             | 
3a324 eb1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3a324 eb1             | 
3a324 eb1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3a328 eb2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a32c eb3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a330 eb4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a334 eb5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3a338 eb6             |         
3a338 eb6             | '' -------------- Preload a line from PSRAM        
3a338 eb6             |         
3a338 eb6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3a33c eb7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3a340 eb8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3a344 eb9 DE B4 01 F6 |                 mov     buf1,buf1c
3a348 eba 03 A0 05 F7 |                 incmod  dlinum,#3
3a34c ebb             | 
3a34c ebb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3a350 ebc 32 B7 01 F6 |                 mov     buf2,a1024
3a354 ebd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3a358 ebe 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3a35c ebf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3a360 ec0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3a364 ec1             |  
3a364 ec1             |  
3a364 ec1             | preload2      '  incmod  dlinum,#3
3a364 ec1 04 C0 45 F0 |                 shr 	framebuf2,#4
3a368 ec2 ED B2 01 F6 |                 mov 	cmd,affffffff
3a36c ec3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3a370 ec4 28 02 64 FD |                 setq	#1
3a374 ec5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3a378 ec6             |                 
3a378 ec6             | 
3a378 ec6             | '' -------------- Draw sprites
3a378 ec6             | 
3a378 ec6 CF 5C 02 F6 | sprite          mov t8,frames
3a37c ec7 10 5C 0E F5 | 		and t8,#16 wz
3a380 ec8 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3a384 ec9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3a388 eca             | 		
3a388 eca             | 
3a388 eca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3a38c ecb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3a390 ecc EF 56 96 F9 |                 alts    t5,#sprite1xy
3a394 ecd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3a398 ece 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3a39c ecf EF 56 96 F9 |                 alts    t5,#sprite1xy
3a3a0 ed0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3a3a4 ed1 0F 4C 66 F7 |                 signx	sprite_x,#15
3a3a8 ed2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a3ac ed3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3a3b0 ed4 01 52 86 F1 |                 sub     sprite_h,#1
3a3b4 ed5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a3b8 ed6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3a3bc ed7             | 
3a3bc ed7             | 
3a3bc ed7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3a3c0 ed8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3a3c4 ed9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3a3c8 eda B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3a3cc edb 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3a3d0 edc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3a3d4 edd 00 5E 06 F6 |                 mov 	t9,#0
3a3d8 ede 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3a3dc edf 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3a3e0 ee0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3a3e4 ee1             |      
3a3e4 ee1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3a3e8 ee2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3a3ec ee3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3a3f0 ee4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3a3f4 ee5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3a3f8 ee6             |                 
3a3f8 ee6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3a3fc ee7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3a400 ee8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3a404 ee9             |   		
3a404 ee9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3a408 eea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3a40c eeb             | 
3a40c eeb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3a410 eec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3a414 eed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3a418 eee             |  
3a418 eee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3a41c eef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3a420 ef0 10 00 90 CD |      if_c 	jmp     #p899		
3a424 ef1             | 	
3a424 ef1             | 	
3a424 ef1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3a428 ef2 28 CD 01 F1 | 		add	t4,sprite_w
3a42c ef3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3a430 ef4             | 
3a430 ef4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3a434 ef5             | 
3a434 ef5 28 59 02 F6 | p899		mov 	t6,sprite_w
3a438 ef6 01 58 86 F1 | 	 	sub     t6,#1
3a43c ef7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3a440 ef8             | 
3a440 ef8 28 58 62 FD |                 setq   	t6
3a444 ef9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3a448 efa 28 5D 02 F6 |                 mov t8,sprite_w
3a44c efb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3a450 efc 24 00 90 AD |         if_z    jmp #p898
3a454 efd             |          
3a454 efd             |         
3a454 efd 70 5F 06 F6 |                 mov  t9,#368
3a458 efe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3a45c eff             | 
3a45c eff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3a460 f00 08 5C 06 FA |                 mul t8,#8				' bits to shr
3a464 f01 FF FF 7F FF 
3a468 f02 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3a46c f03 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3a470 f04 00 5E 8E F9 |                 altd t9,#0				' and mask 
3a474 f05 2D 01 00 F5 |                 and 0-0, t7
3a478 f06             |                
3a478 f06             | 
3a478 f06 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3a47c f07 E5 E0 7A FA |                 wmlong 368,t3				
3a480 f08             |                 
3a480 f08 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3a484 f09 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3a488 f0a 2D 00 64 FD |                 ret
3a48c f0b             | 	
3a48c f0b             | 	
3a48c f0b             |                
3a48c f0b             |  
3a48c f0b             | '' -------------- Graphics line ------------------------------------------------------------
3a48c f0b             |  
3a48c f0b             | 
3a48c f0b             | '' consts and vars
3a48c f0b             | 
3a48c f0b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3a490 f0c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3a494 f0d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3a498 f0e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3a49c f0f             | 
3a49c f0f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3a4a0 f10             | 
3a4a0 f10             | '------ these longs will be set by setmode function
3a4a0 f10             | 
3a4a0 f10 00 00 00 00 | m_bs            long    0        'blanks before sync
3a4a4 f11 00 00 00 00 | m_sn            long    0        'sync
3a4a8 f12 00 00 00 00 | m_bv            long    0        'blanks before visible
3a4ac f13 00 00 00 00 | m_vi            long    0        'visible pixels #
3a4b0 f14             | 'm_border        long    0        'left/right borders
3a4b0 f14 00 00 00 00 | i_upporch       long    0        'up porch lines
3a4b4 f15 00 00 00 00 | i_vsync         long    0        'vsync lines
3a4b8 f16 00 00 00 00 | i_downporch     long    0        'down porch lines
3a4bc f17 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a4c0 f18 00 00 00 00 | i_totalvis      long    0
3a4c4 f19             | 
3a4c4 f19             | '-------------------------------------
3a4c4 f19             |  
3a4c4 f19 00 00 00 00 | linenum         long    0
3a4c8 f1a 00 00 00 00 | frames          long    0
3a4cc f1b 00 00 00 00 | dlinum long 0
3a4d0 f1c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a4d4 f1d             | 
3a4d4 f1d 00 00 00 00 | vblankptr       long    0
3a4d8 f1e 00 00 00 00 | modeptr         long    0
3a4dc f1f 00 00 00 00 | paletteptr      long    0
3a4e0 f20 00 00 00 00 | dlptr           long    0
3a4e4 f21 01 00 00 00 | hbase           long    1
3a4e8 f22 00 00 00 00 | mailbox         long    0
3a4ec f23 00 00 00 00 | spriteptr          long 0
3a4f0 f24             | 
3a4f0 f24 00 00 00 00 | cmd             long    0
3a4f4 f25 00 EC 07 00 | buf1            long    $80000-1024-4096
3a4f8 f26 00 04 00 00 | buf2            long    1024
3a4fc f27 01 00 00 00 | dlptr2          long    1
3a500 f28 01 00 00 00 | dl              long    1
3a504 f29             | 
3a504 f29 00 00 00 00 | buf1c long 0
3a508 f2a 00 EC 07 00 | buf1d            long    $80000-1024-4096
3a50c f2b 01 00 00 00 | framebuf2       long    1
3a510 f2c 01 00 00 00 | hsync0          long    1
3a514 f2d 01 00 00 00 | hsync1          long    1
3a518 f2e             | 
3a518 f2e 01 00 00 00 | t1              long    1
3a51c f2f 00 00 00 00 | t2 long 0
3a520 f30 00 00 00 00 | t3 long 0
3a524 f31 00 00 00 00 | t4 long 0
3a528 f32             | 
3a528 f32 00 00 00 00 | rcnt            long    0  'dl repeat count
3a52c f33 00 00 00 00 | rcnt2           long    0
3a530 f34 00 00 00 00 | rcnt2a          long    0
3a534 f35 00 00 00 00 | roffset         long    0
3a538 f36 00 00 00 00 | rdl             long    0  'dl repeat line
3a53c f37 00 00 00 00 | dlc             long    0  'dl command
3a540 f38             | 
3a540 f38 FF FF FF FF | affffffff       long    $ffffffff
3a544 f39 00 00 00 00 | sprite1pointer long 0
3a548 f3a 00 00 00 00 | sprite1xy      long 0
3a54c f3b 00 00 00 00 | sprite1wh      long 0
3a550 f3c 00 00 00 00 | sprite2pointer long 0
3a554 f3d 00 00 00 00 | sprite2xy      long 0
3a558 f3e 00 00 00 00 | sprite2wh      long 0
3a55c f3f 00 00 00 00 | sprite3pointer long 0
3a560 f40 00 00 00 00 | sprite3xy      long 0
3a564 f41 00 00 00 00 | sprite3wh      long 0
3a568 f42 00 00 00 00 | sprite4pointer long 0
3a56c f43 00 00 00 00 | sprite4xy      long 0
3a570 f44 00 00 00 00 | sprite4wh      long 0
3a574 f45 00 00 00 00 | sprite5pointer long 0
3a578 f46 00 00 00 00 | sprite5xy      long 0
3a57c f47 00 00 00 00 | sprite5wh      long 0
3a580 f48 00 00 00 00 | sprite6pointer long 0
3a584 f49 00 00 00 00 | sprite6xy      long 0
3a588 f4a 00 00 00 00 | sprite6wh      long 0
3a58c f4b 00 00 00 00 | sprite7pointer long 0
3a590 f4c 00 00 00 00 | sprite7xy      long 0
3a594 f4d 00 00 00 00 | sprite7wh      long 0
3a598 f4e 00 00 00 00 | sprite8pointer long 0
3a59c f4f 00 00 00 00 | sprite8xy      long 0
3a5a0 f50 00 00 00 00 | sprite8wh      long 0
3a5a4 f51 00 00 00 00 | sprite9pointer long 0
3a5a8 f52 00 00 00 00 | sprite9xy      long 0
3a5ac f53 00 00 00 00 | sprite9wh      long 0
3a5b0 f54 00 00 00 00 | sprite10pointer long 0
3a5b4 f55 00 00 00 00 | sprite10xy      long 0
3a5b8 f56 00 00 00 00 | sprite10wh      long 0
3a5bc f57 00 00 00 00 | sprite11pointer long 0
3a5c0 f58 00 00 00 00 | sprite11xy      long 0
3a5c4 f59 00 00 00 00 | sprite11wh      long 0
3a5c8 f5a 00 00 00 00 | sprite12pointer long 0
3a5cc f5b 00 00 00 00 | sprite12xy      long 0
3a5d0 f5c 00 00 00 00 | sprite12wh      long 0
3a5d4 f5d 00 00 00 00 | sprite13pointer long 0
3a5d8 f5e 00 00 00 00 | sprite13xy      long 0
3a5dc f5f 00 00 00 00 | sprite13wh      long 0
3a5e0 f60 00 00 00 00 | sprite14pointer long 0
3a5e4 f61 00 00 00 00 | sprite14xy      long 0
3a5e8 f62 00 00 00 00 | sprite14wh      long 0
3a5ec f63 00 00 00 00 | sprite15pointer long 0
3a5f0 f64 00 00 00 00 | sprite15xy      long 0
3a5f4 f65 00 00 00 00 | sprite15wh      long 0
3a5f8 f66 00 00 00 00 | sprite16pointer long 0
3a5fc f67 00 00 00 00 | sprite16xy      long 0
3a600 f68 00 00 00 00 | sprite16wh      long 0
3a604 f69 00 00 00 00 | sprite17pointer long 0
3a608 f6a 00 00 00 00 | sprite17xy      long 0
3a60c f6b 00 00 00 00 | sprite17wh      long 0
3a610 f6c 00 00 00 00 | sprite18pointer long 0
3a614 f6d 00 00 00 00 | sprite18xy      long 0
3a618 f6e 00 00 00 00 | sprite18wh      long 0
3a61c f6f 00 00 00 00 | spritenum long 0
3a620 f70             | 
3a620 f70 00 00 00 00 | spriteline long 0
3a624 f71 84 03 00 00 | sprite_x long 900
3a628 f72 00 00 00 00 | sprite_y long 0
3a62c f73 10 00 00 00 | sprite_w long 16
3a630 f74 40 00 00 00 | sprite_h long 64
3a634 f75 00 00 00 00 | l2 long 0
3a638 f76 00 00 00 00 | t5 long 0
3a63c f77 00 00 00 00 | t6 long 0
3a640 f78 00 00 00 00 | t7 long 0
3a644 f79 00 00 00 00 | t8 long 0
3a648 f7a 00 00 00 00 | t9 long 0
3a64c f7b 00 00 00 00 | preloadaddr long 0
3a650 f7c 00 00 00 00 | preloadlineaddr long 0
3a654 f7d 00 04 00 00 | a1024 long 1024
3a658 f7e             | 
3a658 f7e E0 03 00 00 | aa long 992
3a65c f7f FF 03 00 00 | a1023 long 1023
3a660 f80 00 10 00 00 | a4096 long 4096
3a664 f81             |  fit 368
3a664 f81             |  fit 368
3a664 f81             | _psram_spin2_dat_
3a664 f81 00 00 00 00 
      ...             
3a75c fbf 00 00 00 00 
3a760 fc0 00 00 00 00 |     listdata long 0[8*8]
3a764 fc1             |             orgh
3a764                 | 
3a764                 | ' driver state
3a764     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a768     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a76c                 | 
3a76c                 | ' delay profile
3a76c     07 00 00 00 
3a770     00 CF 7B 05 
3a774     80 D1 F0 08 
3a778     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a77c     80 C4 60 0F 
3a780     80 39 7A 12 
3a784     40 2D D9 13 
3a788     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a78c                 | 
3a78c                 | ' data to be passed to driver when starting it
3a78c                 | startupData
3a78c     00 00 00 00 |     long    0           ' current frequency
3a790     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3a794     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a798     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a79c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a7a0     AC A7 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a7a4     2C A8 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a7a8     4C A8 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3a7ac                 | 
3a7ac                 | ' data for memory
3a7ac                 | deviceData
3a7ac                 |     ' 16 bank parameters follow (16MB per bank)
3a7ac     00 00 00 00 
      ...             
3a7e4     00 00 00 00 
3a7e8     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a7ec                 |     ' 16 banks of pin parameters follow
3a7ec     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a7f0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3a7f4     FF FF FF FF 
      ...             
3a824     FF FF FF FF 
3a828     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3a82c                 | 
3a82c                 | ' data for COG polling
3a82c                 | qosData 
3a82c     00 00 FF FF 
3a830     00 00 FF FF 
3a834     00 00 FF FF 
3a838     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3a83c     00 00 FF FF 
3a840     00 00 FF FF 
3a844     00 00 FF FF 
3a848     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3a84c                 |     
3a84c                 | ' mailbox storage
3a84c                 | 
3a84c                 | mailboxes
3a84c     00 00 00 00 
      ...             
3a8a4     00 00 00 00 
3a8a8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3a8ac                 | 	alignl
3a8ac                 | _psram16drv_spin2_dat_
3a8ac                 |                             orgh
3a8ac     00 00 00 00 
      ...             
3a8c4     00 00 00 00 
3a8c8     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3a8cc                 | 
3a8cc                 | driver_start
3a8cc                 |                             org
3a8cc 000             | '..................................................................................................
3a8cc 000             | ' Memory layout for COG RAM once operational:
3a8cc 000             | '
3a8cc 000             | '  COG RAM address      Usage
3a8cc 000             | '  ---------------      ----
3a8cc 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3a8cc 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3a8cc 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3a8cc 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3a8cc 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3a8cc 000             | '  ~$198-$1F3           State and register variables
3a8cc 000             | '
3a8cc 000             | ' Also during driver COG startup:
3a8cc 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3a8cc 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3a8cc 000             | '..................................................................................................
3a8cc 000             |                             
3a8cc 000             | ' Mailbox storage after vector initialization
3a8cc 000             | 
3a8cc 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3a8d0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3a8d4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3a8d8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3a8dc 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3a8e0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3a8e4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3a8e8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3a8ec 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3a8f0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3a8f4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3a8f8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3a8fc 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3a900 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3a904 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3a908 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3a90c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3a910 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3a914 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3a918 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3a91c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3a920 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3a924 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3a928 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3a92c 018             | 
3a92c 018             | ' Mailbox parameter addresses per COG once patched
3a92c 018             |                             
3a92c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3a930 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3a934 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3a938 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3a93c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3a940 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3a944 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3a948 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3a94c 020             | 
3a94c 020             | '..................................................................................................
3a94c 020             | ' Per COG request and state setup and service branching
3a94c 020             |         
3a94c 020             | cog0                 
3a94c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3a950 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3a954 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3a958 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3a95c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a960 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a964 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3a968 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3a96c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3a970 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a974 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a978 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3a97c 02c             | cog1                        
3a97c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3a980 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3a984 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3a988 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3a98c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a990 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a994 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3a998 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3a99c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3a9a0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9a4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9a8 037 33 CA 63 FD |                             execf   request-0               'jump to service
3a9ac 038             | cog2                         
3a9ac 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a9b0 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a9b4 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3a9b8 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a9bc 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9c0 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9c4 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a9c8 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a9cc 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a9d0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9d4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9d8 043 33 CA 63 FD |                             execf   request-0               'jump to service
3a9dc 044             | cog3                        
3a9dc 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a9e0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a9e4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3a9e8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a9ec 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9f0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9f4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a9f8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a9fc 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3aa00 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa04 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa08 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3aa0c 050             | cog4                        
3aa0c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3aa10 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3aa14 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3aa18 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3aa1c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa20 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa24 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3aa28 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3aa2c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3aa30 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa34 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa38 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3aa3c 05c             | cog5                        
3aa3c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3aa40 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3aa44 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3aa48 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3aa4c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa50 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa54 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3aa58 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3aa5c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3aa60 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa64 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa68 067 33 CA 63 FD |                             execf   request-0               'jump to service
3aa6c 068             | cog6                        
3aa6c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3aa70 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3aa74 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3aa78 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3aa7c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa80 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa84 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3aa88 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3aa8c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3aa90 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa94 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa98 073 33 CA 63 FD |                             execf   request-0               'jump to service
3aa9c 074             | cog7                        
3aa9c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3aaa0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3aaa4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3aaa8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3aaac 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aab0 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aab4 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3aab8 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3aabc 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3aac0 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aac4 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aac8 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3aacc 080             | 
3aacc 080             |                             fit     128
3aacc 080             |                             fit     128
3aacc 080             | pad                         long    0[128-$]                'align init code to $80
3aacc 080             | 
3aacc 080             | '..................................................................................................
3aacc 080             | 
3aacc 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3aacc 080             | 
3aacc 080             | init                        
3aacc 080             |                             ' get driver scratch long address in hub
3aacc 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3aad0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3aad4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3aad8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3aadc 084             |                     
3aadc 084             |                             ' read in the additional LUT RAM code
3aadc 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3aae0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3aae4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3aae8 087             | 
3aae8 087             |                             ' read the startup parameters
3aae8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3aaec 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3aaf0 089             | 
3aaf0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3aaf0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3aaf4 08a             | 
3aaf4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3aaf8 08b 01 00 00 5F 
3aafc 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3ab00 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3ab04 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3ab08 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3ab0c 090             | 
3ab0c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3ab0c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3ab10 091 01 00 00 FF 
3ab14 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3ab18 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3ab1c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3ab20 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3ab24 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3ab28 097 08 DE 47 F5 |                             or      a, #8
3ab2c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3ab30 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3ab34 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3ab38 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3ab3c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3ab40 09d 01 DE 07 F1 |                             add     a, #1
3ab44 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3ab48 09f             |  
3ab48 09f             |                             ' setup device control pin states
3ab48 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3ab4c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3ab50 0a1 01 00 00 FF 
3ab54 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3ab58 0a3             | 
3ab58 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3ab5c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3ab60 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3ab64 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3ab68 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3ab6c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3ab70 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3ab74 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3ab78 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3ab7c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3ab80 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3ab84 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3ab88 0af             | pinloop
3ab88 0af             |                             ' generate minimum CE high time before access
3ab88 0af A1 07 00 FF 
3ab8c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3ab90 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3ab94 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3ab98 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3ab9c 0b4 1F DE 63 FD |                             waitx   a                       'delay
3aba0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3aba4 0b6             | 
3aba4 0b6             |                             ' setup the COG mailboxes and addresses 
3aba4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3aba8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3abac 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3abb0 0b9             | 
3abb0 0b9 28 2E 64 FD |                             setq    #24-1
3abb4 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3abb8 0bb             | 
3abb8 0bb             |                             ' setup the polling loop for active COGs 
3abb8 0bb 01 C2 63 FD |                             cogid   id
3abbc 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3abc0 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3abc4 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3abc8 0bf 0A F0 07 F6 |                             mov     ptra, #10
3abcc 0c0 E1 F1 03 FA |                             mul     ptra, id
3abd0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3abd4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3abd8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3abdc 0c4 03 C2 07 FA |                             mul     id, #3
3abe0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3abe4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3abe8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3abec 0c8 D8 01 B0 FD |                             call    #reloadcogs
3abf0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3abf4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3abf8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3abf8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3abfc 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3ac00 0cd 08 04 DC FC |                             rep     #2, #8
3ac04 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3ac08 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3ac0c 0d0             | 
3ac0c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3ac0c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3ac0c 0d0 01 C2 63 FD |                             cogid   id
3ac10 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3ac14 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3ac18 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3ac1c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3ac20 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3ac24 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3ac28 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3ac2c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3ac30 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3ac34 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ac38 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3ac3c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3ac40 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3ac44 0de A5 E5 03 F1 |                             add     d, const512
3ac48 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ac4c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3ac50 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3ac54 0e2             |                             
3ac54 0e2             |                             ' setup register values for control vector loop setup after we return
3ac54 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3ac58 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3ac5c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3ac60 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3ac64 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3ac68 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3ac6c 0e8 D0 C3 8F F9 |                             altd    id, #id0
3ac70 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3ac74 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3ac78 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3ac7c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3ac80 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3ac84 0ee             |  
3ac84 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3ac88 0ef 07 CA 07 F5 |                             and     request, #7
3ac8c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3ac90 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3ac94 0f2             | 
3ac94 0f2             |                             fit     $100                    'ensure all init code fits this space
3ac94 0f2             |                             fit     $100                    'ensure all init code fits this space
3ac94 0f2             | 
3ac94 0f2 00 00 00 00 
      ...             
3acc4 0fe 00 00 00 00 
3acc8 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3accc 100             | 
3accc 100             | '..................................................................................................
3accc 100             | ' Error result handling and COG notification of request completion
3accc 100             | 
3accc 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3acd0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3acd4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3acd8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3acdc 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3ace0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3ace4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3ace8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3acec 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3acf0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3acf4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3acf8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3acfc 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3ad00 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3ad04 10e             | ' Poller re-starts here after a COG is serviced
3ad04 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3ad08 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3ad0c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3ad10 111             | ' Main dynamic polling loop repeats until a request arrives
3ad10 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3ad14 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3ad18 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3ad1c 114             | 
3ad1c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3ad20 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3ad24 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3ad28 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3ad2c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3ad30 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3ad34 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3ad38 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3ad3c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3ad40 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3ad44 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3ad48 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3ad4c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3ad50 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3ad54 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3ad58 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3ad5c 124             | 
3ad5c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3ad60 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3ad64 126             |  
3ad64 126             | '..................................................................................................
3ad64 126             | ' List handler                               
3ad64 126             | 
3ad64 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3ad68 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3ad6c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3ad70 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3ad74 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3ad78 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3ad7c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3ad80 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3ad84 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3ad88 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3ad8c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3ad90 131 33 00 60 FD |                             execf   0-0                     'process the request 
3ad94 132             | 
3ad94 132             | '..................................................................................................
3ad94 132             | ' Restoring per COG state and resuming where we left off
3ad94 132             | 
3ad94 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3ad98 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3ad9c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3ada0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3ada4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3ada8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3adac 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3adb0 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3adb4 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3adb8 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3adbc 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3adc0 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3adc4 13e             |                    
3adc4 13e             | '..................................................................................................
3adc4 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3adc4 13e             | 
3adc4 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3adc8 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3adcc 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3add0 141 D0 DF B7 F9 |                             setd    a, #id0
3add4 142 D8 DF BF F9 |                             sets    a, #addr1
3add8 143 FE FF FF FF 
3addc 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3ade0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3ade4 146 3F DE A7 F9 |                             alti    a, #%111_111 
3ade8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3adec 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3adf0 149 01 E2 63 FD |                             cogid   c
3adf4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3adf8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3adfc 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3ae00 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3ae04 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3ae08 14f 00 E0 03 F6 |                             mov     b, 0-0
3ae0c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3ae10 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3ae14 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3ae18 153 0C 00 90 AD |             if_z            jmp     #excluded               
3ae1c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3ae20 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3ae24 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3ae28 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3ae2c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3ae30 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3ae34 15a             | 
3ae34 15a             | 'determine priority cogs and build instructions for the polling sequence
3ae34 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3ae38 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3ae3c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3ae40 15d             | 
3ae40 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3ae44 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3ae48 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3ae4c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3ae50 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3ae54 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3ae58 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3ae5c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3ae60 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3ae64 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3ae68 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ae6c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ae70 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3ae74 16a             | endprioloop
3ae74 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3ae78 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3ae7c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3ae80 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ae84 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ae88 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3ae8c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3ae90 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3ae94 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3ae98 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3ae9c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3aea0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3aea4 176             | 
3aea4 176             | ' populate the round robin COG polling instructions
3aea4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3aea8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3aeac 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3aeb0 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3aeb4 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3aeb8 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3aebc 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3aec0 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3aec4 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3aec8 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3aecc 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3aed0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3aed4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3aed8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3aedc 184             | '..................................................................................................
3aedc 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3aedc 184             | 
3aedc 184             | set_latency                                                 '            (a) set latency
3aedc 184             | get_latency                                                 '            (b) get latency
3aedc 184             | set_burst                                                   '            (c) set burst size of bank
3aedc 184             | get_burst                                                   '            (d) get burst size of bank
3aedc 184             |                                                             '            (e) dump state
3aedc 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3aee0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3aee4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3aee8 187             |                                                             ' | | | | e  account for following AUGS
3aee8 187 04 00 00 FF 
3aeec 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3aef0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3aef4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3aef8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3aefc 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3af00 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3af04 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3af08 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3af0c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3af10 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3af14 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3af18 193             | 
3af18 193             | '..................................................................................................
3af18 193             | ' Misc EXECF code
3af18 193             | 
3af18 193 33 72 63 FD | start_read_exec             execf   newburstr
3af1c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3af20 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3af24 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3af28 197             | 
3af28 197             | '..................................................................................................
3af28 197             | ' Variables
3af28 197             | 
3af28 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3af2c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3af30 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3af34 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3af38 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3af3c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3af40 19d             | 
3af40 19d 00 00 00 80 | xfreq1          long    $80000000
3af44 19e 00 00 00 40 | xfreq2          long    $40000000
3af48 19f 03 00 00 00 | delay           long    3
3af4c 1a0             | 
3af4c 1a0             | lutcodeaddr                 
3af4c 1a0             | startupparams
3af4c 1a0             | excludedcogs                                    'careful: shared register use!
3af4c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3af50 1a1 00 00 00 00 | flags           long    0
3af54 1a2             | mask                                            'careful: shared register use!
3af54 1a2 00 00 00 00 | resetmaskA      long    0
3af58 1a3             | limit                                           'careful: shared register use!
3af58 1a3 00 00 00 00 | resetmaskB      long    0
3af5c 1a4 00 00 00 00 | datapins        long    0
3af60 1a5             | const512                                        'careful: shared register use!
3af60 1a5 00 00 00 00 | devicelist      long    0
3af64 1a6 00 00 00 00 | coglist         long    0
3af68 1a7 00 00 00 00 | mbox            long    0 
3af6c 1a8             | 
3af6c 1a8             | clkpin                                          'shared with code patched during init
3af6c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3af70 1a9             | cspin                                           'shared with code patched during init
3af70 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3af74 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3af78 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3af7c 1ac 01 00 00 00 | clkdelay        long    1
3af80 1ad 00 00 00 00 | regdatabus      long    0
3af84 1ae             | 
3af84 1ae 10 00 00 00 | deviceaddr      long    $10
3af88 1af             | rrcounter
3af88 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3af8c 1b0             | 
3af8c 1b0             | ' jump addresses for the per COG handlers
3af8c 1b0 20 00 00 00 | cog0_handler    long    cog0
3af90 1b1 2C 00 00 00 | cog1_handler    long    cog1
3af94 1b2 38 00 00 00 | cog2_handler    long    cog2
3af98 1b3 44 00 00 00 | cog3_handler    long    cog3
3af9c 1b4 50 00 00 00 | cog4_handler    long    cog4
3afa0 1b5 5C 00 00 00 | cog5_handler    long    cog5
3afa4 1b6 68 00 00 00 | cog6_handler    long    cog6
3afa8 1b7 74 00 00 00 | cog7_handler    long    cog7
3afac 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3afb0 1b9             | 
3afb0 1b9             | ' EXECF sequences
3afb0 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3afb4 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3afb8 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3afbc 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3afc0 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3afc4 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3afc8 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3afcc 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3afcc 1c0             | 
3afcc 1c0             | 
3afcc 1c0             | ' SKIPF sequences
3afcc 1c0             | skiptable
3afcc 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3afd0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3afd4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3afd8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3afdc 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3afe0 1c5 00 00 00 00 | pattern2        long    0
3afe4 1c6 00 00 00 00 | pattern3        long    0
3afe8 1c7 77 02 00 00 | singlelong      long    %1001110111  
3afec 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3aff0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3aff4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3aff8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3affc 1cc             | 
3affc 1cc             | ' LUT RAM address values
3affc 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3b000 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3b004 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3b008 1cf F6 02 00 00 | noread          long    noread_lut
3b00c 1d0             | 
3b00c 1d0 00 00 00 00 | id0             long    0
3b010 1d1 01 00 00 00 | id1             long    1
3b014 1d2 02 00 00 00 | id2             long    2
3b018 1d3 03 00 00 00 | id3             long    3
3b01c 1d4 04 00 00 00 | id4             long    4
3b020 1d5 05 00 00 00 | id5             long    5
3b024 1d6 06 00 00 00 | id6             long    6
3b028 1d7 07 00 00 00 | id7             long    7
3b02c 1d8             | 
3b02c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3b02c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3b02c 1d8 00 00 00 00 | addr1           long    0
3b030 1d9 00 00 00 00 | hubdata         long    0
3b034 1da 00 00 00 00 | count           long    0
3b038 1db 00 00 00 00 | addr2           long    0
3b03c 1dc 00 00 00 00 | total           long    0
3b040 1dd 00 00 00 00 | offset1         long    0
3b044 1de 00 00 00 00 | offset2         long    0
3b048 1df 00 00 00 00 | link            long    0
3b04c 1e0             | 
3b04c 1e0             | burstwrite                                      'note shared register use during init
3b04c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3b050 1e1 00 00 00 00 | id              long    0
3b054 1e2             | 
3b054 1e2 00 00 00 00 | header          long    0
3b058 1e3 00 00 00 00 | trailer         long    0
3b05c 1e4 00 00 00 00 | cmdaddr         long    0
3b060 1e5 00 00 00 00 | request         long    0
3b064 1e6 00 00 00 00 | rrlimit         long    0
3b068 1e7 00 00 00 00 | pinconfig       long    0
3b06c 1e8 00 00 00 00 | clks            long    0
3b070 1e9 00 00 00 00 | resume          long    0
3b074 1ea 00 00 00 00 | orighubsize     long    0
3b078 1eb 00 00 00 00 | wrclks          long    0
3b07c 1ec             | 
3b07c 1ec 00 00 00 00 | pattern         long    0
3b080 1ed 00 00 00 00 | hubscratch      long    0
3b084 1ee 00 10 00 00 | val4k           long    4096
3b088 1ef             | 
3b088 1ef             | ' temporary general purpose regs
3b088 1ef 00 00 00 00 | a               long    0
3b08c 1f0 00 00 00 00 | b               long    0
3b090 1f1 00 00 00 00 | c               long    0
3b094 1f2 00 00 00 00 | d               long    0
3b098 1f3             | 
3b098 1f3             |                 fit     502
3b098 1f3             |                 fit     502
3b098 1f3             | 
3b098 1f3             | '..................................................................................................
3b098 1f3             | 
3b098 1f3             |             orgh
3b098                 | 
3b098                 | lut_code
3b098                 | 'HW init code up to 80 longs
3b098                 | 
3b098                 | '..................................................................................................
3b098                 | ' Memory layout for LUT RAM once operational:
3b098                 | '
3b098                 | '  LUT RAM address      Usage
3b098                 | '  ---------------      ----
3b098                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3b098                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3b098                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3b098                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3b098                 | '
3b098                 | ' Also during driver COG startup:
3b098                 | ' $230-$24F is used for HW init setup
3b098                 | ' $250-$26F is used as temporary vector storage 
3b098                 | '..................................................................................................
3b098                 | 
3b098                 |                 org $230    
3b098 230             | 
3b098 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3b098 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3b09c 231 24 16 60 FD |                             pollxfi
3b0a0 232 FF AA 2A FF 
3b0a4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3b0a8 234 28 00 B0 FD |                             call    #sendqspi
3b0ac 235 07 F8 07 FF 
3b0b0 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3b0b4 237 28 00 B0 FD |                             call    #sendspi
3b0b8 238 F8 07 78 FF 
3b0bc 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3b0c0 23a 1C 00 B0 FD |                             call    #sendspi
3b0c4 23b 7F 78 78 FF 
3b0c8 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3b0cc 23d 10 00 B0 FD |                             call    #sendspi 
3b0d0 23e 2D 00 64 FD |                             ret
3b0d4 23f             | 
3b0d4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3b0d8 240 32 0C 64 FD |                             skipf   #%110
3b0dc 241 9C EF 03 F6 |                             mov     pb, xsendimm
3b0e0 242             | 
3b0e0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3b0e4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3b0e8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3b0ec 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b0f0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3b0f4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3b0f8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3b0fc 249 50 48 63 FD |                             fltl    datapins                'float data bus
3b100 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3b104 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3b108 24c             | 
3b108 24c 00 00 00 00 
3b10c 24d 00 00 00 00 
3b110 24e 00 00 00 00 
3b114 24f 00 00 00 00 |                 long    0[$270-32-$]
3b118 250             |     
3b118 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b118 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b118 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3b118 250             | rw_vect ' PSRAM jump vectors
3b118 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b11c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b120 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b124 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b128 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3b12c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3b130 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3b134 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3b138 258             | ro_vect ' R/O PSRAM jump vectors
3b138 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b13c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b140 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b144 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b148 25c 00 01 00 00 |                 long    unsupported
3b14c 25d 00 01 00 00 |                 long    unsupported
3b150 25e 00 01 00 00 |                 long    unsupported
3b154 25f 00 01 00 00 |                 long    unsupported
3b158 260             | ctrl_vect ' Control jump vectors
3b158 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3b15c 261 00 01 00 00 |                 long    unsupported
3b160 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3b164 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3b168 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3b16c 265 00 01 00 00 |                 long    unsupported
3b170 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3b174 267 3E 01 00 00 |                 long    reconfig 
3b178 268             | no_vect ' Invalid bank jump vectors
3b178 268 01 01 00 00 |                 long    invalidbank
3b17c 269 01 01 00 00 |                 long    invalidbank
3b180 26a 01 01 00 00 |                 long    invalidbank
3b184 26b 01 01 00 00 |                 long    invalidbank
3b188 26c 01 01 00 00 |                 long    invalidbank
3b18c 26d 01 01 00 00 |                 long    invalidbank
3b190 26e 01 01 00 00 |                 long    invalidbank
3b194 26f 01 01 00 00 |                 long    invalidbank
3b198 270             | 
3b198 270             |                 fit     $270
3b198 270             |                 fit     $270
3b198 270             | '..................................................................................................
3b198 270             | ' PSRAM READS
3b198 270             |                                                             ' a b c d e f
3b198 270             |                                                             ' B W L B R L  (a) byte read
3b198 270             |                                                             ' Y O O U E O  (b) word read
3b198 270             |                                                             ' T R N R S C  (c) long read
3b198 270             |                                                             ' E D G S U K  (d) new burst read
3b198 270             |                                                             '       T M E  (e) resumed sub-burst
3b198 270             |                                                             '         E D  (f) locked sub-burst
3b198 270             | 
3b198 270             | 
3b198 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3b19c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3b1a0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3b1a4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3b1a8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3b1ac 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3b1b0 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3b1b4 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3b1b8 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3b1bc 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3b1c0 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3b1c4 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3b1c8 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3b1cc 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3b1d0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3b1d4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3b1d8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3b1dc 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3b1e0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3b1e4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3b1e8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3b1ec 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3b1f0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3b1f4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3b1f8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3b1fc 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3b200 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3b204 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3b208 28c             | 
3b208 28c             |                             ' fall through to read bursts
3b208 28c             |                         
3b208 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3b208 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b20c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b210 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b214 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b218 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3b21c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3b220 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3b224 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3b228 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3b22c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3b230 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3b234 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3b238 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3b23c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3b240 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3b244 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3b248 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3b24c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3b250 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3b254 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3b258 2a0 E8 D1 03 F1 |                             add     clks, clks
3b25c 2a1             | readcommon
3b25c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3b260 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b264 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3b268 2a4             | 
3b268 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b26c 2a5 69 C8 63 FD |                             rev     cmdaddr
3b270 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b274 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3b278 2a8             | 
3b278 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b27c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3b280 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3b280 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3b284 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3b288 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3b28c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3b290 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3b290 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3b294 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3b298 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3b29c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3b2a0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3b2a4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3b2a8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3b2a8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3b2ac 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3b2b0 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3b2b4 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3b2b8 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3b2bc 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3b2c0 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3b2c4 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3b2c8 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3b2cc 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3b2d0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3b2d4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3b2d8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3b2dc 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3b2e0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3b2e0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3b2e4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3b2e8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3b2ec 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3b2f0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3b2f4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3b2f8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3b2fc 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3b300 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3b304 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3b308 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3b30c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3b310 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3b314 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3b318 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3b31c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3b320 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3b324 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3b328 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3b32c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3b330 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3b334 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3b338 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3b33c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3b340 2da 10 03 90 FD |                             jmp     #writecommon
3b344 2db             | 
3b344 2db             | '..................................................................................................
3b344 2db             | ' Burst continuation testing
3b344 2db             | 
3b344 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3b348 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3b34c 2dd             | continue_read_lut          
3b34c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3b350 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3b354 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3b358 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3b35c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3b360 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3b364 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3b368 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3b36c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3b370 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3b374 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3b378 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3b37c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3b380 2ea             | 
3b380 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3b384 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3b388 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3b38c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3b390 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3b394 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3b398 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3b39c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3b3a0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3b3a4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3b3a8 2f4 2A 1C 66 0D |             _ret_           push    #poller
3b3ac 2f5             | 
3b3ac 2f5             | 
3b3ac 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3b3b0 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3b3b0 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3b3b4 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3b3b8 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3b3bc 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3b3c0 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3b3c4 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3b3c8 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3b3cc 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3b3d0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3b3d4 2ff             | '..................................................................................................
3b3d4 2ff             | ' Completion of requests
3b3d4 2ff             | 
3b3d4 2ff             | complete_rw_lut             
3b3d4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3b3d8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3b3dc 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3b3e0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3b3e4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3b3e8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b3ec 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b3f0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3b3f4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3b3f8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3b3fc 309 32 62 64 AD |             if_z            skipf   #%110001
3b400 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3b404 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3b408 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3b40c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b410 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3b414 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3b418 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3b41c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3b420 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3b424 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3b428 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3b42c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3b430 316             |                                                             ' skipcase (a) gfx copy to/from hub
3b430 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3b430 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3b430 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3b434 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3b438 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3b43c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3b440 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3b444 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3b448 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3b44c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3b450 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3b454 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3b458 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3b45c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3b460 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3b464 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3b468 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3b46c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3b470 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3b474 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3b478 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3b47c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3b480 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3b484 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3b488 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3b48c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3b490 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3b494 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3b498 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3b49c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3b4a0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3b4a4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3b4a8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3b4ac 335 DF B7 03 A6 |             if_z            mov     addr2, link
3b4b0 336 34 FF 9F AD |             if_z            jmp     #checknext
3b4b4 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b4b8 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b4bc 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b4c0 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b4c4 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b4c8 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b4cc 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b4d0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b4d4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b4d8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b4dc 341             | 
3b4dc 341             | '..................................................................................................
3b4dc 341             | ' PSRAM WRITES
3b4dc 341             |                                                             '  a b c d e f g h
3b4dc 341             | 
3b4dc 341             |                                                             '  B W L F B R L L (a) byte write(s)
3b4dc 341             |                                                             '  Y O O I U E O O (b) word write(s)
3b4dc 341             |                                                             '  T R N L R S C C (c) long write(s)
3b4dc 341             |                                                             '  E D G L S U K K (d) resumed fill
3b4dc 341             |                                                             '          T M E E (e) new burst write
3b4dc 341             |                                                             '            E D D (f) resumed burst
3b4dc 341             |                                                             '              F B (g) locked fill
3b4dc 341             |                                                             '              I U (h) locked burst write
3b4dc 341             |                                                             '              L R 
3b4dc 341             |                                                             '              L S 
3b4dc 341             |                                                             '                T 
3b4dc 341             | 
3b4dc 341             | w_single                   
3b4dc 341             | w_fill_cont           
3b4dc 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b4e0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b4e4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3b4e8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3b4ec 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3b4f0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3b4f4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b4f8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b4fc 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b500 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b504 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b508 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3b50c 34d             |                ' disable call to r_resume_burst for single longs when z=0
3b50c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b510 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b514 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b518 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b51c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3b520 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b524 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b528 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b52c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3b530 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3b534 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3b538 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3b53c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3b540 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3b544 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3b548 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3b54c 35d             |         
3b54c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3b54c 35d             |             '
3b54c 35d             |             '  At least one of these 3 optional components will be sent
3b54c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3b54c 35d             |             '     body - N x full longs of data
3b54c 35d             |             '     trailer - last partial long of data
3b54c 35d             |             '
3b54c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3b54c 35d             |             '
3b54c 35d             |             'Case    Type                           Sends
3b54c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3b54c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3b54c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3b54c 35d             |             ' 4)     Multiple long fill             body only
3b54c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3b54c 35d             | 
3b54c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3b54c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b550 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b554 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b558 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b55c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3b560 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3b564 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3b568 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3b56c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3b570 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3b574 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3b578 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3b57c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3b580 36a             |                             
3b580 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b584 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3b588 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3b58c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3b590 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3b594 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3b598 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3b59c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3b5a0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3b5a4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3b5a8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3b5ac 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3b5b0 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3b5b4 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3b5b8 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3b5bc 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3b5c0 37a             | 
3b5c0 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b5c4 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3b5c8 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3b5cc 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3b5d0 37e             |                  
3b5d0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3b5d4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3b5d8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3b5dc 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3b5e0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3b5e4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3b5e8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3b5ec 385             | 
3b5ec 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3b5f0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3b5f4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3b5f8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3b5fc 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3b600 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3b604 38b             | 
3b604 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3b604 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3b608 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3b60c 38d 2A B0 63 FD |                             push    addr1                   'save address
3b610 38e             | 
3b610 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3b610 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3b614 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3b618 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3b61c 391             |             
3b61c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3b620 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3b624 393 2B B0 63 FD |                             pop     addr1                   'restore address
3b628 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3b62c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3b630 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3b634 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3b638 398             | 
3b638 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3b63c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3b640 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3b644 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3b648 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3b64c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3b650 39e             | 
3b650 39e             |                             'trailer is done
3b650 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3b654 39f             | 
3b654 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b658 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b65c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b660 3a2             | 
3b660 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b664 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3b668 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b66c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3b670 3a6             |                             
3b670 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b674 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b678 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3b67c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b680 3aa             |                                                          
3b680 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3b684 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3b688 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3b68c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3b690 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3b694 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3b698 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3b69c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b6a0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b6a4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b6a8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b6ac 3b5             |  
3b6ac 3b5 59 52 63 FD |                             drvh    cspin
3b6b0 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b6b4 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3b6b8 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b6bc 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b6c0 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b6c4 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b6c8 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b6cc 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b6d0 3be EA E5 03 F6 |                             mov     d, orighubsize
3b6d4 3bf EF E5 63 F0 |                             shl     d, a
3b6d8 3c0 F2 E3 83 F1 |                             sub     c, d
3b6dc 3c1 DD E3 03 F1 |                             add     c, offset1
3b6e0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b6e4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b6e8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b6ec 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b6f0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b6f4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3b6f8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b6fc 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b700 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b704 3cb BB D3 03 F6 |                             mov     resume, restorefill
3b708 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b70c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b710 3ce 6C FC BF CD |             if_c            call    #yield
3b714 3cf 2D 00 64 FD |                             ret
3b718 3d0             |                            
3b718 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3b718 3d0             |                       '     rczl    pa                      'rotate left into address offset
3b718 3d0             |                       '     rczl    c wcz                   'restore count and flags
3b718 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3b71c 3d1 02 EC 67 F0 |                             shl     pa, #2
3b720 3d2 28 06 64 AD |             if_z            setq    #3
3b724 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3b728 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3b72c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3b730 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3b734 3d7             | 
3b734 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3b738 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3b73c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3b740 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3b744 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3b748 3dc             |         
3b748 3dc             | 
3b748 3dc             | '..................................................................................................
3b748 3dc             | 
3b748 3dc             |                 fit 1024-32
3b748 3dc             |                 fit 1024-32
3b748 3dc 00 00 00 00 
3b74c 3dd 00 00 00 00 
3b750 3de 00 00 00 00 
3b754 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3b758 3e0             |                 org 1024-32
3b758 000             | 
3b758 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3b758 000 00 00 00 00 |                 long $0000
3b75c 001 11 11 00 00 |                 long $1111
3b760 002 22 22 00 00 |                 long $2222
3b764 003 33 33 00 00 |                 long $3333
3b768 004 44 44 00 00 |                 long $4444
3b76c 005 55 55 00 00 |                 long $5555
3b770 006 66 66 00 00 |                 long $6666
3b774 007 77 77 00 00 |                 long $7777
3b778 008 88 88 00 00 |                 long $8888
3b77c 009 99 99 00 00 |                 long $9999
3b780 00a AA AA 00 00 |                 long $aaaa
3b784 00b BB BB 00 00 |                 long $bbbb
3b788 00c CC CC 00 00 |                 long $cccc
3b78c 00d DD DD 00 00 |                 long $dddd
3b790 00e EE EE 00 00 |                 long $eeee
3b794 00f FF FF 00 00 |                 long $ffff
3b798 010             | 
3b798 010             | 'masks
3b798 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3b79c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3b7a0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3b7a4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3b7a8 014             | 
3b7a8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3b7ac 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3b7b0 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3b7b4 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3b7b8 018             | 
3b7b8 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3b7bc 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3b7c0 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3b7c4 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3b7c8 01c             | 
3b7c8 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3b7cc 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3b7d0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3b7d4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3b7d8 020             | 
3b7d8 020             |         fit 1024
3b7d8 020             |         fit 1024
3b7d8 020             | 
3b7d8 020             | '--------------------------------------------------------------------------------------------------
3b7d8 020             |         orgh
3b7d8                 | 
3b7d8                 | gfxexpansion
3b7d8                 |                             'simple line drawing graphics expansion of memory driver
3b7d8                 |                             'jmp     #donerepeats                'just return for now
3b7d8                 | 
3b7d8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b7dc     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b7e0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3b7e4     DD E1 03 F6 |                             mov     b, offset1              'get error term
3b7e8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b7ec     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b7f0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b7f4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b7f8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b7fc     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b800     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b804     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3b808     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b80c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b810     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b814     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b818     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3b81c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3b820     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3b824     DC E5 33 F9 |                             getword d, total, #0            'get line width
3b828     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b82c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3b830     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b834     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3b838     C3 03 80 FD |                             jmp     #readmask               'continue filling
3b83c                 | 	alignl
3b83c                 | _usbnew_spin2_dat_
3b83c                 |                 org     $000
3b83c 000             | 
3b83c 000             | usb_host_start
3b83c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b840 001             | 
3b840 001 03 00 00 FF 
3b844 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b848 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b84c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b850 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b854 006 29 72 63 FD |                 setq2   htmp
3b858 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3b85c 008             | 
3b85c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3b860 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b864 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3b868 00b             | 
3b868 00b             | '------------------------------------------------------------------------------
3b868 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3b868 00b             | ' special because the receiving function must not respond with either STALL or
3b868 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3b868 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3b868 00b             | ' corrupt packet, it must ignore the transaction
3b868 00b             | '------------------------------------------------------------------------------
3b868 00b             | ' On entry:
3b868 00b             | '   PTRA - start address of the SETUP data struct.
3b868 00b             | ' On exit:
3b868 00b             | '   retval - PID_ACK on success, otherwise error code.
3b868 00b             | '------------------------------------------------------------------------------
3b868 00b             | txn_setup
3b868 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3b86c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3b870 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3b874 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3b878 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3b87c 010             | .setup
3b87c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3b880 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b884 012 2D 00 64 AD |         if_z    ret
3b888 013 7C 0B B0 FD |                 call    #retry_wait
3b88c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b890 015 2D 00 64 AD |         if_z    ret
3b894 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3b898 017 E0 FF 9F FD |                 jmp     #.setup
3b89c 018             | 
3b89c 018             | '------------------------------------------------------------------------------
3b89c 018             | ' IN/INTERRUPT transaction.
3b89c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3b89c 018             | '------------------------------------------------------------------------------
3b89c 018             | ' On entry:
3b89c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3b89c 018             | '     CRC(b19..23).
3b89c 018             | ' On exit:
3b89c 018             | '------------------------------------------------------------------------------
3b89c 018             | txn_in
3b89c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b8a0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3b8a4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3b8a8 01b             | 
3b8a8 01b             |                 ' Fall through to urx_packet
3b8a8 01b             | 
3b8a8 01b             | '------------------------------------------------------------------------------
3b8a8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3b8a8 01b             | ' received are handshakes and IN DATAx.
3b8a8 01b             | '------------------------------------------------------------------------------
3b8a8 01b             | ' On entry:
3b8a8 01b             | ' On exit:
3b8a8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3b8a8 01b             | '     returned.
3b8a8 01b             | '------------------------------------------------------------------------------
3b8a8 01b             | urx_packet
3b8a8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3b8ac 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b8b0 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3b8b4 01e 1A 94 63 FD |                 getct   hct2
3b8b8 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3b8bc 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3b8c0 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3b8c4 022             | .wait_sop
3b8c4 022 22 A7 8A FA |                 rdpin   urx, dm
3b8c8 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b8cc 024 08 00 90 CD |         if_c    jmp     #.get_pid
3b8d0 025 FC 25 CC FB |                 jnct2   #.wait_sop
3b8d4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3b8d8 027             | .get_pid
3b8d8 027 28 02 B0 FD |                 call    #urx_next
3b8dc 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3b8e0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3b8e4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3b8e8 02b             | .chk_pid
3b8e8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b8ec 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3b8f0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3b8f4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3b8f8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3b8fc 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3b900 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3b904 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3b908 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3b90c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3b910 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3b914 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3b918 037             | .ack_resend
3b918 037 22 A7 82 FA |                 rqpin   urx, dm
3b91c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b920 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3b924 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b928 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3b92c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3b930 03d             | .chk_eop
3b930 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b934 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3b938 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3b93c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3b940 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3b944 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b948 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3b94c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3b950 045 2D 00 64 FD |                 ret
3b954 046             | .idle
3b954 046 22 A7 82 FA |                 rqpin   urx, dm
3b958 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b95c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3b960 049 2D 00 64 FD |                 ret
3b964 04a             | 
3b964 04a             | '------------------------------------------------------------------------------
3b964 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3b964 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3b964 04a             | ' if one is required.
3b964 04a             | '------------------------------------------------------------------------------
3b964 04a             | ' On entry:
3b964 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3b964 04a             | ' On exit:
3b964 04a             | '------------------------------------------------------------------------------
3b964 04a             | utx_token
3b964 04a 22 A7 82 FA |                 rqpin   urx, dm
3b968 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b96c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3b970 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b974 04e 34 0D B0 CD |         if_c    call    #utx_pre
3b978 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b97c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3b980 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3b984 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3b988 053             | .next_byte
3b988 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3b98c 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3b990 055             | .wait
3b990 055 40 46 72 FD |                 testp   dp                      wc
3b994 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b998 057 23 03 08 FC |                 akpin   dp
3b99c 058 22 A5 22 FC |                 wypin   utx, dm
3b9a0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3b9a4 05a             | 
3b9a4 05a             | '------------------------------------------------------------------------------
3b9a4 05a             | ' SETUP/OUT/INTERRUPT transaction.
3b9a4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3b9a4 05a             | '------------------------------------------------------------------------------
3b9a4 05a             | ' On entry:
3b9a4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3b9a4 05a             | '     CRC(b19..23).
3b9a4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3b9a4 05a             | '   pkt_data - count of DATAx payload bytes to send.
3b9a4 05a             | ' On exit:
3b9a4 05a             | '------------------------------------------------------------------------------
3b9a4 05a             | txn_out
3b9a4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b9a8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3b9ac 05c 00 00 C0 FF 
3b9b0 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b9b4 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b9b8 05f             | 
3b9b8 05f             |                 ' Fall through to utx_data
3b9b8 05f             | 
3b9b8 05f             | '------------------------------------------------------------------------------
3b9b8 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b9b8 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b9b8 05f             | ' success/fail is not determined until the status stage of the transaction,
3b9b8 05f             | ' this routine is only concerned about the current DATAx packet.
3b9b8 05f             | '------------------------------------------------------------------------------
3b9b8 05f             | ' On entry:
3b9b8 05f             | '   PTRA - hub start address of the data to read.
3b9b8 05f             | '   pkt_cnt - data payload size.
3b9b8 05f             | ' On exit:
3b9b8 05f             | '------------------------------------------------------------------------------
3b9b8 05f             | utx_data
3b9b8 05f 22 A7 82 FA |                 rqpin   urx, dm
3b9bc 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b9c0 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b9c4 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b9c8 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b9cc 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b9d0 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b9d4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b9d8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b9dc 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b9e0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b9e4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b9e8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b9ec 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b9f0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b9f4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b9f8 06f             | .read_byte
3b9f8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b9fc 070 F0 00 B0 FD |                 call    #utx_byte
3ba00 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3ba04 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3ba08 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3ba0c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3ba10 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3ba14 076             | .send_crc
3ba14 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3ba18 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3ba1c 078 D0 00 B0 FD |                 call    #utx_byte
3ba20 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3ba24 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3ba28 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3ba2c 07c             | 
3ba2c 07c             | '------------------------------------------------------------------------------
3ba2c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3ba2c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3ba2c 07c             | ' expects that the packet includes at least the CRC word.
3ba2c 07c             | '
3ba2c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3ba2c 07c             | ' was requested, which makes it difficult to determine where the data stops
3ba2c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3ba2c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3ba2c 07c             | ' USB-16 expected residual value of 0xB001.
3ba2c 07c             | '
3ba2c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3ba2c 07c             | ' so the caller can verify IN success before writing the data to its final
3ba2c 07c             | ' destination.
3ba2c 07c             | '------------------------------------------------------------------------------
3ba2c 07c             | ' On entry:
3ba2c 07c             | '   pkt_data - max byte count expected to be in the packet.
3ba2c 07c             | '   newb_flg - signals new byte ready when toggled.
3ba2c 07c             | ' On exit:
3ba2c 07c             | '   pkt_cnt - actual number of bytes read.
3ba2c 07c             | '------------------------------------------------------------------------------
3ba2c 07c             | urx_data
3ba2c 07c F7 77 03 F6 |                 mov     htmp2, pb
3ba30 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3ba34 07e 00 00 C0 FF 
3ba38 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3ba3c 080 BB EF 03 F6 |                 mov     pb, htmp2
3ba40 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3ba44 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3ba48 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3ba4c 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3ba50 085             | .wait_byte
3ba50 085             | ' In-line rx for max speed
3ba50 085 22 A7 82 FA |                 rqpin   urx, dm
3ba54 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3ba58 087 53 A5 02 F5 |                 and     utx, urx
3ba5c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3ba60 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3ba64 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3ba68 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3ba6c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3ba70 08d DC FF 9F FD |                 jmp     #.wait_byte
3ba74 08e             | .get_byte
3ba74 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3ba78 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3ba7c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3ba80 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3ba84 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3ba88 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3ba8c 094             | .end_crc
3ba8c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3ba90 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3ba94 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3ba98 097 2D 00 64 1D |         if_a    ret
3ba9c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3ba9c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3ba9c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3ba9c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3ba9c 098 22 A7 82 FA |                 rqpin   urx, dm
3baa0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3baa4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3baa8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3baa8 09b             | .chk_crc
3baa8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3baac 09c 58 00 00 FF 
3bab0 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3bab4 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3bab8 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3babc 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3bac0 0a1 34 09 B0 FD |                 call    #poll_waitx
3bac4 0a2             | 
3bac4 0a2             |                 ' Fall through to utx_handshake
3bac4 0a2             | 
3bac4 0a2             | '------------------------------------------------------------------------------
3bac4 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3bac4 0a2             | ' the appropriate IP delay has been inserted.
3bac4 0a2             | '------------------------------------------------------------------------------
3bac4 0a2             | ' On entry:
3bac4 0a2             | '   retval - handshake PID to send.
3bac4 0a2             | ' On exit:
3bac4 0a2             | '   retval unchanged.
3bac4 0a2             | '------------------------------------------------------------------------------
3bac4 0a2             | utx_handshake
3bac4 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3bac8 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3bacc 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bad0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3bad4 0a6 5F A5 02 F6 |                 mov     utx, retval
3bad8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3badc 0a8             | .idle
3badc 0a8 22 A7 82 FA |                 rqpin   urx, dm
3bae0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bae4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3bae8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3baec 0ac 08 09 90 FD |                 jmp     #poll_waitx
3baf0 0ad             | 
3baf0 0ad             | '------------------------------------------------------------------------------
3baf0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3baf0 0ad             | '------------------------------------------------------------------------------
3baf0 0ad             | ' On entry:
3baf0 0ad             | '   utx - byte to transmit.
3baf0 0ad             | ' On exit:
3baf0 0ad             | '------------------------------------------------------------------------------
3baf0 0ad             | utx_byte
3baf0 0ad 40 46 72 FD |                 testp   dp                      wc
3baf4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3baf8 0af 23 03 08 FC |                 akpin   dp
3bafc 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3bb00 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3bb04 0b2             | 
3bb04 0b2             | '------------------------------------------------------------------------------
3bb04 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3bb04 0b2             | '------------------------------------------------------------------------------
3bb04 0b2             | ' On entry:
3bb04 0b2             | ' On exit:
3bb04 0b2             | '   retval - the byte read.
3bb04 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3bb04 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3bb04 0b2             | '     received.
3bb04 0b2             | '------------------------------------------------------------------------------
3bb04 0b2             | urx_next
3bb04 0b2 22 A7 8A FA |                 rdpin   urx, dm
3bb08 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3bb0c 0b4 53 A5 02 F5 |                 and     utx, urx
3bb10 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3bb14 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3bb18 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3bb1c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3bb20 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bb24 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3bb28 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3bb2c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3bb30 0bd 2D 00 64 FD |                 ret
3bb34 0be             | 
3bb34 0be             | '------------------------------------------------------------------------------
3bb34 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3bb34 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3bb34 0be             | ' length, and the PID is not included in the CRC calculation:
3bb34 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3bb34 0be             | '  CRC5  ENDP ADDRESS PID
3bb34 0be             | ' %00000_1111_1111111_xxxxxxxx
3bb34 0be             | '------------------------------------------------------------------------------
3bb34 0be             | ' On entry:
3bb34 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3bb34 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3bb34 0be             | ' On exit:
3bb34 0be             | '   ep_addr_pid - CRC value appended to the packet.
3bb34 0be             | '------------------------------------------------------------------------------
3bb34 0be             | calc_crc5
3bb34 0be FF 03 00 FF 
3bb38 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3bb3c 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3bb40 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3bb44 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3bb48 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3bb4c 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3bb50 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3bb54 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3bb58 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3bb5c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3bb60 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3bb64 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bb68 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3bb6c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bb70 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3bb74 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3bb78 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3bb7c 0d0             | 
3bb7c 0d0             | '------------------------------------------------------------------------------
3bb7c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3bb7c 0d0             | '------------------------------------------------------------------------------
3bb7c 0d0             | isr1_fsframe
3bb7c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3bb80 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bb84 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bb88 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3bb8c 0d4             | .wait
3bb8c 0d4 40 46 72 FD |                 testp   dp                      wc
3bb90 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bb94 0d6 23 03 08 FC |                 akpin   dp
3bb98 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3bb9c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3bba0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3bba4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3bba8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3bbac 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3bbb0 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3bbb4 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3bbb8 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3bbbc 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3bbc0 0e1 2C FF BF FD |                 call    #utx_byte
3bbc4 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3bbc8 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3bbcc 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3bbd0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3bbd4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3bbd8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3bbdc 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3bbe0 0e9 5B A5 42 F5 |                 or      utx, icrc
3bbe4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3bbe8 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3bbec 0ec 20 00 90 FD |                 jmp     #isr1_wait
3bbf0 0ed             | isr1_lsframe
3bbf0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3bbf4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bbf8 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bbfc 0f0             | .wait
3bbfc 0f0 40 46 72 FD |                 testp   dp                      wc
3bc00 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bc04 0f2 23 03 08 FC |                 akpin   dp
3bc08 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3bc0c 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3bc10 0f5             | isr1_wait
3bc10 0f5 22 A5 82 FA |                 rqpin   utx, dm
3bc14 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3bc18 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3bc1c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3bc20 0f9 03 00 00 FF 
3bc24 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3bc28 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3bc2c 0fc F5 FF 3B FB |                 reti1
3bc30 0fd             | 
3bc30 0fd             | '------------------------------------------------------------------------------
3bc30 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3bc30 0fd             | ' transaction will complete before the next frame is triggered.
3bc30 0fd             | '------------------------------------------------------------------------------
3bc30 0fd             | ' On entry:
3bc30 0fd             | ' On exit:
3bc30 0fd             | '------------------------------------------------------------------------------
3bc30 0fd             | wait_txn_ok
3bc30 0fd 1A 76 63 FD |                 getct   htmp2
3bc34 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3bc38 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bc3c 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3bc40 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3bc44 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3bc48 103 2D 00 64 FD |                 ret
3bc4c 104             | 
3bc4c 104             | '------------------------------------------------------------------------------
3bc4c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3bc4c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3bc4c 104             | ' and perform a reset sequence prior to device enumeration.
3bc4c 104             | '------------------------------------------------------------------------------
3bc4c 104             | dev_reset
3bc4c 104 22 A7 82 FA |                 rqpin   urx, dm
3bc50 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3bc54 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3bc58 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3bc5c 108             | reset
3bc5c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3bc60 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3bc64 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3bc68 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bc6c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3bc70 10d 1A 92 62 FD |                 getct   iframe_ct_base
3bc74 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bc78 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bc7c 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3bc80 111 24 72 07 F1 |                 add     htmp, #36
3bc84 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3bc88 113             | .framewait
3bc88 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3bc8c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3bc90 115 2D 00 64 FD |                 ret
3bc94 116             | 
3bc94 116             | '------------------------------------------------------------------------------
3bc94 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3bc94 116             | '------------------------------------------------------------------------------
3bc94 116             | ' On entry:
3bc94 116             | '   PTRA - source address.
3bc94 116             | '   PB - destination address.
3bc94 116             | '   hr0 - length of copy, in bytes.
3bc94 116             | ' On exit:
3bc94 116             | '------------------------------------------------------------------------------
3bc94 116             | hmemcpy
3bc94 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3bc98 117 F7 73 43 FC |                 wrbyte  htmp, pb
3bc9c 118 01 EE 07 F1 |                 add     pb, #1
3bca0 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3bca4 11a             | 
3bca4 11a             | '------------------------------------------------------------------------------
3bca4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3bca4 11a             | ' loop until the errant device is disconnected.
3bca4 11a             | '------------------------------------------------------------------------------
3bca4 11a             | ' On entry:
3bca4 11a             | ' On exit:
3bca4 11a             | '------------------------------------------------------------------------------
3bca4 11a             | host_error
3bca4 11a             |           if ERROR_LED >= 0
3bca4 11a             |           end
3bca4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3bca8 11b             | 
3bca8 11b             | '------------------------------------------------------------------------------
3bca8 11b             | ' Get HID descriptor buffer for current port
3bca8 11b             | '------------------------------------------------------------------------------
3bca8 11b             | ' On entry:
3bca8 11b             | ' On exit:
3bca8 11b             | '   PB - HID descriptor buffer pointer
3bca8 11b             | '------------------------------------------------------------------------------
3bca8 11b             | get_hid_descr_buffer
3bca8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3bcac 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3bcb0 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3bcb4 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3bcb8 11f             | 
3bcb8 11f             | 
3bcb8 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3bcbc 120             | 
3bcbc 120             | ' USB commands and error codes
3bcbc 120 00 00 00 00 | cmd_data        long    0
3bcc0 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3bcc4 122             | 
3bcc4 122             | ' Parameters block assigned at cog startup
3bcc4 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3bcc8 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3bccc 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3bcd0 125             | if ACTIVITY_LED >= 0
3bcd0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3bcd0 125             | end
3bcd0 125             | if ERROR_LED >= 0
3bcd0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3bcd0 125             | end
3bcd0 125 00 00 00 00 | hid_descr_p     long    0
3bcd4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3bcd4 126             | 'hkbd_report_p   long    0
3bcd4 126 00 00 00 00 | hub_descr_p     long    0
3bcd8 127 00 00 00 00 | urx_buff_p      long    0
3bcdc 128 00 00 00 00 | dev_desc_buff_p long    0
3bce0 129 00 00 00 00 | con_desc_buff_p long    0
3bce4 12a 00 00 00 00 | cache_start_p   long    0
3bce8 12b 00 00 00 00 | cache_end_p     long    0
3bcec 12c             | if EMUPAD_MAX_PLAYER > 0
3bcec 12c             | emupad_out_ptr  long    0
3bcec 12c             | end
3bcec 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3bcf0 12d             | 
3bcf0 12d             | hdev_init_start
3bcf0 12d             | hdev_port       res     1
3bcf0 12d             | hdev_port       res     1
3bcf0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bcf0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bcf0 12d             | kbm_next_datax  res     1
3bcf0 12d             | kbm_next_datax  res     1
3bcf0 12d             | hub_intf_num    res     1
3bcf0 12d             | hub_intf_num    res     1
3bcf0 12d             | hub_next_datax  res     1
3bcf0 12d             | hub_next_datax  res     1
3bcf0 12d             | hub_status_chg  res     1
3bcf0 12d             | hub_status_chg  res     1
3bcf0 12d             | hub_port_status res     1
3bcf0 12d             | hub_port_status res     1
3bcf0 12d             | if HAVE_MOUSE
3bcf0 12d             | ms_intf_num     res     1
3bcf0 12d             | ms_intf_num     res     1
3bcf0 12d             | ms_in_max_pkt   res     1
3bcf0 12d             | ms_in_max_pkt   res     1
3bcf0 12d             | end
3bcf0 12d             | kb_intf_num     res     1
3bcf0 12d             | kb_intf_num     res     1
3bcf0 12d             | kb_interval     res     1
3bcf0 12d             | kb_interval     res     1
3bcf0 12d             | kb_in_max_pkt   res     1
3bcf0 12d             | kb_in_max_pkt   res     1
3bcf0 12d             | kb_max_index    res     1
3bcf0 12d             | kb_max_index    res     1
3bcf0 12d             | kb_led_states   res     1
3bcf0 12d             | kb_led_states   res     1
3bcf0 12d             | gp_intf_num     res     1
3bcf0 12d             | gp_intf_num     res     1
3bcf0 12d             | gp_interval     res     1
3bcf0 12d             | gp_interval     res     1
3bcf0 12d             | gp_max_index    res     1
3bcf0 12d             | gp_max_index    res     1
3bcf0 12d             | gp_descr_len    res     1+MAX_DEVICES
3bcf0 12d             | gp_descr_len    res     1+MAX_DEVICES
3bcf0 12d             | hdev_init_end
3bcf0 12d             | 
3bcf0 12d             | ' Initialized at cog startup:
3bcf0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bcf0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bcf0 12d             | iframe_ct_new   res     1
3bcf0 12d             | iframe_ct_new   res     1
3bcf0 12d             | iframe_ct_base  res     1
3bcf0 12d             | iframe_ct_base  res     1
3bcf0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bcf0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bcf0 12d             | 
3bcf0 12d             | ' This register block is reset to zero when a USB device connects
3bcf0 12d             | hreg_init_start
3bcf0 12d             | hstatus         res     1         ' Host status flags
3bcf0 12d             | hstatus         res     1         ' Host status flags
3bcf0 12d             | hctwait         res     1         ' Poll-based wait clocks
3bcf0 12d             | hctwait         res     1         ' Poll-based wait clocks
3bcf0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bcf0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bcf0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bcf0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bcf0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bcf0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bcf0 12d             | xfer_retry      res     1         ' Control transfer retry count
3bcf0 12d             | xfer_retry      res     1         ' Control transfer retry count
3bcf0 12d             | retry           res     1         ' Transaction retry count
3bcf0 12d             | retry           res     1         ' Transaction retry count
3bcf0 12d             | utx             res     1         ' Byte to transmit on USB
3bcf0 12d             | utx             res     1         ' Byte to transmit on USB
3bcf0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bcf0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bcf0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bcf0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bcf0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bcf0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bcf0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bcf0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bcf0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bcf0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bcf0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bcf0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bcf0 12d             | frame           res     1         ' USB 1ms frame counter value
3bcf0 12d             | frame           res     1         ' USB 1ms frame counter value
3bcf0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bcf0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bcf0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bcf0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bcf0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bcf0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bcf0 12d             | crc             res     1         ' Used for CRC16 calculation
3bcf0 12d             | crc             res     1         ' Used for CRC16 calculation
3bcf0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bcf0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bcf0 12d             | retval          res     1         ' Global success/fail return parameter
3bcf0 12d             | retval          res     1         ' Global success/fail return parameter
3bcf0 12d             | context_retval  res     1         ' Operation contextual return parameter
3bcf0 12d             | context_retval  res     1         ' Operation contextual return parameter
3bcf0 12d             | ' Device stuff
3bcf0 12d             | hdev_id         res     1+MAX_DEVICES
3bcf0 12d             | hdev_id         res     1+MAX_DEVICES
3bcf0 12d             | hdev_bcd        res     1
3bcf0 12d             | hdev_bcd        res     1
3bcf0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bcf0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bcf0 12d             | ' Keyboard/mouse stuff
3bcf0 12d             | hctrl_ep_addr   res     1
3bcf0 12d             | hctrl_ep_addr   res     1
3bcf0 12d             | hctrl_max_pkt   res     1
3bcf0 12d             | hctrl_max_pkt   res     1
3bcf0 12d             | hconfig_base    res     1
3bcf0 12d             | hconfig_base    res     1
3bcf0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bcf0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bcf0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bcf0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bcf0 12d             | hdev_class      res     1
3bcf0 12d             | hdev_class      res     1
3bcf0 12d             | hdev_subclass   res     1
3bcf0 12d             | hdev_subclass   res     1
3bcf0 12d             | hdev_protocol   res     1
3bcf0 12d             | hdev_protocol   res     1
3bcf0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bcf0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bcf0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bcf0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bcf0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bcf0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bcf0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bcf0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bcf0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bcf0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bcf0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bcf0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bcf0 12d             | if HAVE_MOUSE
3bcf0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bcf0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bcf0 12d             | end
3bcf0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bcf0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bcf0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bcf0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bcf0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bcf0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bcf0 12d             | hdev_out_addr   res     1
3bcf0 12d             | hdev_out_addr   res     1
3bcf0 12d             | 
3bcf0 12d             | if EMUPAD_MAX_PLAYER > 0
3bcf0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3bcf0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3bcf0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3bcf0 12d             | end
3bcf0 12d             | 
3bcf0 12d             | hreg_init_end
3bcf0 12d             | 
3bcf0 12d             | hidr_start
3bcf0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bcf0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bcf0 12d             | hidr_flags      res     1
3bcf0 12d             | hidr_flags      res     1
3bcf0 12d             | hidr_axis       res     4
3bcf0 12d             | hidr_axis       res     4
3bcf0 12d             | hidr_buttons    res     1
3bcf0 12d             | hidr_buttons    res     1
3bcf0 12d             | hidr_hats       res     1
3bcf0 12d             | hidr_hats       res     1
3bcf0 12d             | '' Above are actually useful values, 6 longs
3bcf0 12d             | hidr_type       res     1
3bcf0 12d             | hidr_type       res     1
3bcf0 12d             | hidr_id         res     1
3bcf0 12d             | hidr_id         res     1
3bcf0 12d             | hidr_offset     res     1
3bcf0 12d             | hidr_offset     res     1
3bcf0 12d             | hidr_usage_idx  res     1
3bcf0 12d             | hidr_usage_idx  res     1
3bcf0 12d             | ' below need to be push/pop'd
3bcf0 12d             | hidr_state      res     1
3bcf0 12d             | hidr_state      res     1
3bcf0 12d             | hidr_size       res     1
3bcf0 12d             | hidr_size       res     1
3bcf0 12d             | hidr_count      res     1
3bcf0 12d             | hidr_count      res     1
3bcf0 12d             | hidr_lminmax    res     1
3bcf0 12d             | hidr_lminmax    res     1
3bcf0 12d             | hidr_pminmax    res     1
3bcf0 12d             | hidr_pminmax    res     1
3bcf0 12d             | hidr_end
3bcf0 12d             | 
3bcf0 12d             | ' Variables dependent on the system freqency
3bcf0 12d             | _var_64_lower_  res     1
3bcf0 12d             | _var_64_lower_  res     1
3bcf0 12d             | _var_64_upper_  res     1
3bcf0 12d             | _var_64_upper_  res     1
3bcf0 12d             | _12Mbps_        res     1
3bcf0 12d             | _12Mbps_        res     1
3bcf0 12d             | _1_5Mbps_       res     1
3bcf0 12d             | _1_5Mbps_       res     1
3bcf0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bcf0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bcf0 12d             | _1us_           res     1         ' 1us
3bcf0 12d             | _1us_           res     1         ' 1us
3bcf0 12d             | _10us_          res     1         ' 10us
3bcf0 12d             | _10us_          res     1         ' 10us
3bcf0 12d             | _33us_          res     1         ' 33us
3bcf0 12d             | _33us_          res     1         ' 33us
3bcf0 12d             | _txn_err_       res     1         ' 250us
3bcf0 12d             | _txn_err_       res     1         ' 250us
3bcf0 12d             | _500us_         res     1         ' 500us
3bcf0 12d             | _500us_         res     1         ' 500us
3bcf0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bcf0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bcf0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bcf0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bcf0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bcf0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bcf0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bcf0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bcf0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bcf0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bcf0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bcf0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bcf0 12d             | _preamble_wait_ res     1
3bcf0 12d             | _preamble_wait_ res     1
3bcf0 12d             | _1ms_           res     1         ' 1ms
3bcf0 12d             | _1ms_           res     1         ' 1ms
3bcf0 12d             | _2ms_           res     1         ' 2ms
3bcf0 12d             | _2ms_           res     1         ' 2ms
3bcf0 12d             | _suspend_wait_  res     1         ' 3ms
3bcf0 12d             | _suspend_wait_  res     1         ' 3ms
3bcf0 12d             | _4ms_           res     1         ' 4ms
3bcf0 12d             | _4ms_           res     1         ' 4ms
3bcf0 12d             | _xfer_wait_     res     1         ' 5ms
3bcf0 12d             | _xfer_wait_     res     1         ' 5ms
3bcf0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bcf0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bcf0 12d             | _reset_hold_    res     1         ' 15ms
3bcf0 12d             | _reset_hold_    res     1         ' 15ms
3bcf0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bcf0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bcf0 12d             | _21ms_          res     1         ' 21ms
3bcf0 12d             | _21ms_          res     1         ' 21ms
3bcf0 12d             | _100ms_         res     1         ' 100ms
3bcf0 12d             | _100ms_         res     1         ' 100ms
3bcf0 12d             | _500ms_         res     1         ' 500ms
3bcf0 12d             | _500ms_         res     1         ' 500ms
3bcf0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bcf0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bcf0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bcf0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bcf0 12d             | '------------------------------------------------------------------------------
3bcf0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bcf0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bcf0 12d             | _usb_d_ls_nco_  res     1
3bcf0 12d             | _usb_d_ls_nco_  res     1
3bcf0 12d             | _usb_h_fs_nco_  res     1
3bcf0 12d             | _usb_h_fs_nco_  res     1
3bcf0 12d             | _usb_d_fs_nco_  res     1
3bcf0 12d             | _usb_d_fs_nco_  res     1
3bcf0 12d             | '------------------------------------------------------------------------------
3bcf0 12d             | ' Scratch registers
3bcf0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bcf0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bcf0 12d             | htmp1           res     1
3bcf0 12d             | htmp1           res     1
3bcf0 12d             | htmp2           res     1
3bcf0 12d             | htmp2           res     1
3bcf0 12d             | htmp3           res     1
3bcf0 12d             | htmp3           res     1
3bcf0 12d             | hrep            res     1         ' Repeat count
3bcf0 12d             | hrep            res     1         ' Repeat count
3bcf0 12d             | hsave0          res     1         ' Subroutine parameter saves
3bcf0 12d             | hsave0          res     1         ' Subroutine parameter saves
3bcf0 12d             | hsave1          res     1
3bcf0 12d             | hsave1          res     1
3bcf0 12d             | hsave2          res     1
3bcf0 12d             | hsave2          res     1
3bcf0 12d             | isrtmp1         res     1
3bcf0 12d             | isrtmp1         res     1
3bcf0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bcf0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bcf0 12d             | hr0             res     1         ' Multi-purpose registers
3bcf0 12d             | hr0             res     1         ' Multi-purpose registers
3bcf0 12d             | hr1             res     1
3bcf0 12d             | hr1             res     1
3bcf0 12d             | hr2             res     1
3bcf0 12d             | hr2             res     1
3bcf0 12d             | hr3             res     1
3bcf0 12d             | hr3             res     1
3bcf0 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bcf0 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bcf0 12d             | hpar2           res     1
3bcf0 12d             | hpar2           res     1
3bcf0 12d             | hpar3           res     1
3bcf0 12d             | hpar3           res     1
3bcf0 12d             | hct2            res     1         ' Function response bus turn-around timer
3bcf0 12d             | hct2            res     1         ' Function response bus turn-around timer
3bcf0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bcf0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bcf0 12d             | mod_cnt         res     1         ' Used in idle loops
3bcf0 12d             | mod_cnt         res     1         ' Used in idle loops
3bcf0 12d             | 
3bcf0 12d             |                 fit     $1F0
3bcf0 12d             |                 fit     $1F0
3bcf0 12d             |                 org     $200
3bcf0 200             | hlut_start
3bcf0 200             | 
3bcf0 200             | '------------------------------------------------------------------------------
3bcf0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3bcf0 200             | ' settings to startup defaults.
3bcf0 200             | '------------------------------------------------------------------------------
3bcf0 200             | ' On entry:
3bcf0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3bcf0 200             | '------------------------------------------------------------------------------
3bcf0 200             | set_speed_full
3bcf0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3bcf4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3bcf8 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3bcfc 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3bd00 204             | '                ret                             wcz     ' Restore caller flags on exit
3bd00 204             | 
3bd00 204             | '------------------------------------------------------------------------------
3bd00 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3bd00 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3bd00 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3bd00 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3bd00 204             | ' putting the smart pins into reset.
3bd00 204             | '------------------------------------------------------------------------------
3bd00 204             | ' On entry:
3bd00 204             | ' On exit: CZ flags restored to caller states
3bd00 204             | '------------------------------------------------------------------------------
3bd00 204             | set_speed_low
3bd00 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3bd04 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3bd08 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3bd0c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3bd10 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3bd14 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3bd18 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3bd1c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3bd20 20c             | 
3bd20 20c             | '------------------------------------------------------------------------------
3bd20 20c             | ' Perform configuration stuff required when a device intitially connects.
3bd20 20c             | '------------------------------------------------------------------------------
3bd20 20c             | ' On entry:
3bd20 20c             | ' On exit:
3bd20 20c             | '------------------------------------------------------------------------------
3bd20 20c             | on_connect
3bd20 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3bd24 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3bd28 20e             | .retry
3bd28 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bd2c 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3bd30 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3bd34 211 00 08 00 FF 
3bd38 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3bd3c 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3bd40 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd44 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3bd48 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3bd4c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3bd50 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd54 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3bd58 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3bd5c 21b 4C 03 B0 FD |                 call    #poll_waitx
3bd60 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3bd64 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3bd68 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3bd6c 21f B8 FF 9F FD |                 jmp     #.retry
3bd70 220             | .get_dev_desc
3bd70 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3bd74 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3bd78 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3bd7c 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3bd80 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3bd84 225 88 FB BF FD |                 call    #reset
3bd88 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3bd8c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd90 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3bd94 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3bd98 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd9c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bda0 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3bda4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3bda8 22e 04 00 00 FF 
3bdac 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3bdb0 230 34 FA BF FD |                 call    #calc_crc5
3bdb4 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3bdb8 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bdbc 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3bdc0 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3bdc4 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3bdc8 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3bdcc 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bdd0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bdd4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3bdd8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3bddc 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3bde0 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3bde4 23d C4 02 B0 FD |                 call    #poll_waitx
3bde8 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3bdec 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bdf0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3bdf4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3bdf8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3bdfc 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3be00 244 2D 00 64 5D |         if_nz   ret
3be04 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3be08 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3be0c 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3be10 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3be14 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3be18 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3be1c 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3be20 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3be24 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3be28 24e 2C FB 9F CD |         if_b    jmp     #host_error
3be2c 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3be30 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3be34 251 2D EC 63 FD |                 call    pa
3be38 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3be3c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3be40 254 2C EC 63 FD |                 jmp     pa
3be44 255             | 
3be44 255             | '------------------------------------------------------------------------------
3be44 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3be44 255             | ' Status reporting is always in the function-to-host direction.
3be44 255             | '------------------------------------------------------------------------------
3be44 255             | ' On entry:
3be44 255             | '   PTRA - start address of the SETUP data in hub.
3be44 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3be44 255             | '     stage.
3be44 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3be44 255             | ' On exit:
3be44 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3be44 255             | '     contains the count of data stage bytes actually received, which must
3be44 255             | '     always be <= the count requested.
3be44 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3be44 255             | '     more specific USB operation error code.
3be44 255             | '------------------------------------------------------------------------------
3be44 255             | control_read
3be44 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3be48 256 F8 91 03 F6 |                 mov     hpar2, ptra
3be4c 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3be50 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3be54 259             | .xfer_start
3be54 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3be58 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3be5c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3be60 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3be64 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3be68 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3be6c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3be70 260 61 00 00 FF 
3be74 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3be78 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3be7c 263             | .data
3be7c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3be80 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3be84 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3be88 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3be8c 267             | .nak_retry
3be8c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3be90 268             | .in_retry
3be90 268 BC F6 BF FD |                 call    #txn_in
3be94 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3be98 26a 28 00 90 AD |         if_z    jmp     #.commit
3be9c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bea0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bea4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bea8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3beac 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3beb0 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3beb4 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3beb8 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bebc 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3bec0 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3bec4 275             | .commit
3bec4 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3bec8 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3becc 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3bed0 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3bed4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3bed8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3bedc 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3bee0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3bee4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3bee8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3beec 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3bef0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3bef4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3bef8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3befc 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bf00 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3bf04 285             | .pre_status
3bf04 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3bf08 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3bf0c 287 00 B0 06 F6 |                 mov     pkt_data, #0
3bf10 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3bf14 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bf18 28a 61 00 00 FF 
3bf1c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3bf20 28c             | .out_retry
3bf20 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3bf24 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf28 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3bf2c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bf30 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bf34 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bf38 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3bf3c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3bf40 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bf44 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3bf48 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3bf4c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3bf4c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3bf4c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3bf4c 297             | .xfer_retry
3bf4c 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3bf50 298 58 01 B0 FD |                 call    #poll_waitx
3bf54 299 8C F9 BF FD |                 call    #wait_txn_ok
3bf58 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3bf5c 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3bf60 29c C9 EF 03 F6 |                 mov     pb, hpar3
3bf64 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3bf68 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3bf6c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3bf70 2a0             | 
3bf70 2a0             | '------------------------------------------------------------------------------
3bf70 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3bf70 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3bf70 2a0             | ' the SETUP data struct is filled with the required values.
3bf70 2a0             | '------------------------------------------------------------------------------
3bf70 2a0             | ' On entry:
3bf70 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3bf70 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3bf70 2a0             | '     stage.
3bf70 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3bf70 2a0             | ' On exit:
3bf70 2a0             | '   retval - used to convey the success/failure of each stage.
3bf70 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bf70 2a0             | '     more specific USB operation error code.
3bf70 2a0             | '------------------------------------------------------------------------------
3bf70 2a0             | control_write
3bf70 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bf74 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bf78 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bf7c 2a3             | 
3bf7c 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bf80 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3bf84 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3bf88 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bf8c 2a7             | .xfer_start
3bf8c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3bf90 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bf94 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bf98 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf9c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3bfa0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3bfa4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3bfa8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bfac 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3bfb0 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bfb4 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bfb8 2b2             | .data
3bfb8 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3bfbc 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bfc0 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bfc4 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3bfc8 2b6             | .out_retry
3bfc8 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3bfcc 2b7 88 F6 BF FD |                 call    #txn_out
3bfd0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bfd4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3bfd8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bfdc 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3bfe0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3bfe4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3bfe8 2be             | .commit
3bfe8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3bfec 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3bff0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3bff4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bff8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3bffc 2c3             | pre_status_in
3bffc 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3c000 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c004 2c5             | .status_retry
3c004 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3c008 2c6 44 F5 BF FD |                 call    #txn_in
3c00c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3c010 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3c014 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3c018 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3c01c 2cb 2D 00 64 AD |         if_z    ret
3c020 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3c024 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c028 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3c02c 2cf             | '               ret                                     ' Caller must handle transfer retirement
3c02c 2cf             | 
3c02c 2cf             | '------------------------------------------------------------------------------
3c02c 2cf             | ' Execute an IN interrupt transaction.
3c02c 2cf             | '------------------------------------------------------------------------------
3c02c 2cf             | ' On entry:
3c02c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3c02c 2cf             | '   hpar2 - Address of the IN data buffer
3c02c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3c02c 2cf             | ' On exit:
3c02c 2cf             | '   retval - the result of the operation.
3c02c 2cf             | '   hpar3 - the count of IN data bytes actually received.
3c02c 2cf             | '------------------------------------------------------------------------------
3c02c 2cf             | do_int_in
3c02c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c030 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3c034 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3c038 2d2             | 
3c038 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3c03c 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3c040 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3c044 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3c048 2d6             | .retry
3c048 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3c04c 2d7 00 F5 BF FD |                 call    #txn_in
3c050 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3c054 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3c058 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3c05c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3c060 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3c064 2dd 54 00 B0 FD |                 call    #retry_wait
3c068 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c06c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3c070 2e0 D4 FF 9F FD |                 jmp     #.retry
3c074 2e1             | .commit
3c074 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3c078 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3c07c 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3c080 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3c084 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c088 2e6             | .post_ret
3c088 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3c08c 2e7             | 
3c08c 2e7             | 
3c08c 2e7             | '------------------------------------------------------------------------------
3c08c 2e7             | ' Resets the downstream hub port to FS
3c08c 2e7             | '------------------------------------------------------------------------------
3c08c 2e7             | dwnstream_reset
3c08c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c090 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3c094 2e9             | 
3c094 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3c098 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3c09c 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c0a0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c0a4 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3c0a8 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3c0ac 2ef             | 
3c0ac 2ef             | '------------------------------------------------------------------------------
3c0ac 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3c0ac 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3c0ac 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3c0ac 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3c0ac 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3c0ac 2ef             | '------------------------------------------------------------------------------
3c0ac 2ef             | ' On entry:
3c0ac 2ef             | '   hctwait - wait interval in sysclocks.
3c0ac 2ef             | ' On exit:
3c0ac 2ef             | '------------------------------------------------------------------------------
3c0ac 2ef             | poll_waitx
3c0ac 2ef 1A 94 63 FD |                 getct   hct2
3c0b0 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3c0b4 2f1             | .wait
3c0b4 2f1 FF 25 CC FB |                 jnct2   #.wait
3c0b8 2f2 2D 00 64 FD |                 ret
3c0bc 2f3             | 
3c0bc 2f3             | '------------------------------------------------------------------------------
3c0bc 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3c0bc 2f3             | '------------------------------------------------------------------------------
3c0bc 2f3             | ' On entry:
3c0bc 2f3             | '   retval - transaction response PID or error code.
3c0bc 2f3             | ' On exit:
3c0bc 2f3             | '------------------------------------------------------------------------------
3c0bc 2f3             | retry_wait
3c0bc 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c0c0 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3c0c4 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c0c8 2f6 14 00 90 AD |         if_z    jmp     #.nak
3c0cc 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3c0d0 2f8 D8 FF BF FD |                 call    #poll_waitx
3c0d4 2f9             | .dec
3c0d4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3c0d8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3c0dc 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3c0e0 2fc             | .nak
3c0e0 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3c0e4 2fd C4 FF BF FD |                 call    #poll_waitx
3c0e8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3c0ec 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3c0f0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3c0f4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3c0f8 302 2D 00 64 FD |                 ret
3c0fc 303             | 
3c0fc 303             | host_reset
3c0fc 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3c100 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3c104 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3c104 305 BD 01 05 FF 
3c108 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3c10c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3c110 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3c114 309             | ' Check to see if the system clock has been changed.
3c114 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c118 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3c11c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3c120 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3c124 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c128 30e 40 46 62 FD |                 dirl    dp
3c12c 30f             | 
3c12c 30f 28 02 64 FD |                 setq    #1
3c130 310 80 00 80 FF 
3c134 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c138 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3c13c 313             | .enable
3c13c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c140 314 41 46 62 FD |                 dirh    dp
3c144 315 1F 38 63 FD |                 waitx   _1us_
3c148 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c14c 317             | 
3c14c 317             |                 ' Handle Port protection enable and startup delay
3c14c 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3c150 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3c154 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3c158 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3c15c 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3c160 31c             | 
3c160 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3c160 31c             | 
3c160 31c             | discon_entry
3c160 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3c164 31d             | 
3c164 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3c168 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3c16c 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3c170 320 00 00 04 F6 |                 mov     0-0, #0
3c174 321             | .regloop
3c174 321             |               
3c174 321             |         if HAVE_HIDPAD
3c174 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3c178 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c17c 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3c180 324 F7 01 68 FC |                 wrlong  #0,pb
3c184 325             |         end
3c184 325             |         if EMUPAD_MAX_PLAYER > 0
3c184 325             |         end
3c184 325             | 
3c184 325             |                 ' Fall through to disconnected loop
3c184 325             | 
3c184 325             | '-----------------------------------------------------------------------------------------------------------------
3c184 325             | ' Device connect handling (Section 7.1.7.3).
3c184 325             | '-----------------------------------------------------------------------------------------------------------------
3c184 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3c184 325             | ' device to connect (Section 7.1.7.3).
3c184 325             | '-----------------------------------------------------------------------------------------------------------------
3c184 325             | disconnected
3c184 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3c188 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3c18c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3c190 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3c194 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3c198 32a             |         if ACTIVITY_LED >= 0
3c198 32a             |         end
3c198 32a 22 A7 82 FA |                 rqpin   urx, dm
3c19c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3c1a0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3c1a4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3c1a8 32e             | .se1_test
3c1a8 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3c1ac 32f FC FE BF FD |                 call    #poll_waitx
3c1b0 330 22 A7 82 FA |                 rqpin   urx, dm
3c1b4 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c1b8 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3c1bc 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3c1c0 334             | .se1            'SE1 is a fatal error condition
3c1c0 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3c1c4 335 E4 FE BF FD |                 call    #poll_waitx
3c1c8 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3c1cc 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3c1d0 338             | .connect_test                                           ' Test lines until stable J/K state seen
3c1d0 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3c1d4 339 22 A7 82 FA |                 rqpin   urx, dm
3c1d8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c1dc 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3c1e0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3c1e4 33d             | connected
3c1e4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3c1e8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3c1ec 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3c1f0 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3c1f4 341             | .set_pulse
3c1f4 341 1A 66 63 FD |                 getct   _pulse_time_
3c1f8 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3c1fc 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3c1fc 343             | ' of 1ms and make a correction, if necessary.
3c1fc 343             | '                mov     htmp, _1ms_
3c1fc 343             | '                subs    htmp, iframe_delta
3c1fc 343             | '                adds    _frame1ms_clks_, htmp
3c1fc 343             | '                debug(udec(_frame1ms_clks_))
3c1fc 343             | 
3c1fc 343             |                 ' Fall through to idle/processing loop
3c1fc 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3c200 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3c204 345             | 
3c204 345             | hidle
3c204 345 22 A7 82 FA |                 rqpin   urx, dm
3c208 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c20c 347 98 00 90 CD |         if_c    jmp     #.se0_test
3c210 348 24 06 70 FD |                 pollct3                         wc
3c214 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3c218 34a 1A 96 63 FD |                 getct   hct3
3c21c 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3c220 34c             | 
3c220 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c224 34d 00 72 E3 F8 |                 getbyte htmp
3c228 34e             | 
3c228 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3c22c 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3c230 350 40 00 90 AD |         if_z    jmp     #.poll
3c234 351             | 
3c234 351             |         if _HAVE_GAMEPAD
3c234 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3c238 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3c23c 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3c240 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3c244 355 2C 00 90 AD |         if_z    jmp     #.poll
3c248 356             |         end
3c248 356             | 
3c248 356             |         if HAVE_MOUSE
3c248 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3c24c 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c250 358 20 00 90 AD |         if_z    jmp     #.poll
3c254 359             |         end
3c254 359             | 
3c254 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3c258 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3c25c 35b 14 00 90 AD |         if_z    jmp     #.poll
3c260 35c             | 
3c260 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3c264 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3c268 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3c26c 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3c270 360             |         if HAVE_MOUSE
3c270 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c274 361             |         else
3c274 361             |         end
3c274 361             | 
3c274 361             | .poll
3c274 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c278 362 2D EC 63 FD |                 call    pa
3c27c 363             | .skip_poll
3c27c 363             | 
3c27c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3c280 364             | 
3c280 364             | .nopoll
3c280 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3c284 365 44 00 90 AD |         if_z    jmp     #hsuspend
3c288 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3c28c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3c290 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3c294 369 1A 86 63 FD |                 getct   hr0
3c298 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3c29c 36b             |         if ACTIVITY_LED >= 0
3c29c 36b             |         end
3c29c 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3c2a0 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3c2a4 36d 5C FF 9F FD |                 jmp     #hidle
3c2a8 36e             | ' Check for extended SE0 state on the bus
3c2a8 36e             | .se0_test
3c2a8 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3c2ac 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3c2b0 370 22 A7 82 FA |                 rqpin   urx, dm
3c2b4 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c2b8 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3c2bc 373 24 F6 BF FD |                 call    #wait_txn_ok
3c2c0 374 00 00 80 FF 
3c2c4 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3c2c8 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3c2c8 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3c2cc 377             | 
3c2cc 377             | hsuspend
3c2cc 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3c2d0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3c2d4 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3c2d8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3c2dc 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3c2e0 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3c2e4 37d             | 
3c2e4 37d             |                 ' Fall through to resume wait loop
3c2e4 37d             | 
3c2e4 37d             | hwait_resume
3c2e4 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3c2e8 37e 02 88 47 F0 |                 shr     hr1, #2
3c2ec 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3c2f0 380             |         if ACTIVITY_LED >= 0
3c2f0 380             |         end
3c2f0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3c2f4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3c2f8 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3c2fc 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c300 384 18 00 90 AD |         if_z    jmp     #.resume
3c304 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3c308 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c30c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3c310 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c314 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3c318 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3c31c 38b             | .resume
3c31c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3c320 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3c324 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3c328 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3c32c 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3c330 390 1F 72 63 FD |                 waitx   htmp
3c334 391 22 07 28 FC |                 wypin   #OUT_J, dm
3c338 392 01 72 47 F0 |                 shr     htmp, #1
3c33c 393 1F 72 63 FD |                 waitx   htmp
3c340 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c344 395 1A 92 62 FD |                 getct   iframe_ct_base
3c348 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c34c 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c350 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3c354 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3c358 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3c35c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3c360 39c             | 
3c360 39c             | '------------------------------------------------------------------------------
3c360 39c             | ' Send preamble to enable low-speed HUB ports
3c360 39c             | '------------------------------------------------------------------------------
3c360 39c             | ' On entry:
3c360 39c             | ' On exit:
3c360 39c             | '   USB baud rate set to low-speed
3c360 39c             | '------------------------------------------------------------------------------
3c360 39c             | utx_pre
3c360 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c364 39d 40 46 62 FD |                 dirl    dp
3c368 39e 28 02 64 FD |                 setq    #1
3c36c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3c370 3a0 58 44 62 FD |                 drvl    dm
3c374 3a1 59 46 62 FD |                 drvh    dp
3c378 3a2             | 
3c378 3a2 1E 00 00 FF 
3c37c 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3c380 3a4             | 
3c380 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3c384 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3c388 3a6 28 02 64 3D |         if_nc   setq    #1
3c38c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3c390 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3c394 3a9             | .l1
3c394 3a9             | 
3c394 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c398 3aa 40 46 62 FD |                 dirl    dp
3c39c 3ab 28 02 64 FD |                 setq    #1
3c3a0 3ac 80 00 80 FF 
3c3a4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c3a8 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3c3ac 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c3b0 3b0 41 46 62 FD |                 dirh    dp
3c3b4 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c3b8 3b2             | 
3c3b8 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c3bc 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c3c0 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c3c4 3b5             | 
3c3c4 3b5             | hlut_end
3c3c4 3b5             |                 fit     $400
3c3c4 3b5             |                 fit     $400
3c3c4 3b5             |                 orgh
3c3c4                 | if OVERLAP_MEMORY
3c3c4                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3c3c4                 | end
3c3c4                 | '------------------------------------------------------------------------------
3c3c4                 | ' Routines called from cog space.
3c3c4                 | '------------------------------------------------------------------------------
3c3c4                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3c3c4                 | '------------------------------------------------------------------------------
3c3c4                 | 
3c3c4                 | '------------------------------------------------------------------------------
3c3c4                 | ' USB host cog initialization.
3c3c4                 | '------------------------------------------------------------------------------
3c3c4                 | usb_host_init
3c3c4                 |                 ' Initialize buffer pointers
3c3c4                 |         if OVERLAP_MEMORY
3c3c4                 |         else
3c3c4     4C 15 B0 FE |                 loc     pb, #hid_descr
3c3c8                 |         end
3c3c8     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3c3cc                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3c3cc                 |                 {
3c3cc                 |                 }
3c3cc                 |         
3c3cc                 |                 {
3c3cc                 |                 }
3c3cc                 |                 'loc     pb,#hkbd_report
3c3cc                 |                 'mov     hkbd_report_p,pb
3c3cc                 | 
3c3cc     44 1D B0 FE |                 loc     pb, #hub_descr
3c3d0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3c3d4     59 1D B0 FE |                 loc     pb, #urx_buff
3c3d8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3c3dc     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3c3e0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3c3e4     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3c3e8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3c3ec     24 15 B0 FE |                 loc     pb, #usb_cache_start
3c3f0     F7 55 02 F6 |                 mov     cache_start_p, pb
3c3f4     25 1D B0 FE |                 loc     pb, #usb_cache_end
3c3f8     F7 57 02 F6 |                 mov     cache_end_p, pb
3c3fc                 | 
3c3fc                 |         if ERROR_LED >= 0
3c3fc                 |         end
3c3fc                 | 
3c3fc                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3c3fc                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3c3fc                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3c3fc                 | ' Configure and enable the Serial Host USB port.
3c3fc     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3c400                 | 
3c400                 | '------------------------------------------------------------------------------
3c400                 | ' Timing calculations happen before any interrupt(s) are enabled.
3c400                 | '------------------------------------------------------------------------------
3c400                 | ' On entry:
3c400                 | '   htmp - current CLKFREQ value.
3c400                 | '------------------------------------------------------------------------------
3c400                 | hinit_usb_timings
3c400                 | '                getct   htmp2
3c400     B9 59 02 F6 |                 mov     save_sysclk, htmp
3c404     8D 5B 80 FF 
3c408     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3c40c     18 32 63 FD |                 getqx   _12Mbps_
3c410     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3c414     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3c418     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3c41c     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3c420     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3c424     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3c428     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3c42c     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3c430     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3c434     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3c438     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3c43c     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3c440     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3c444     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3c448     80 00 00 FF 
3c44c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3c450     18 2E 63 FD |                 getqx   _var_64_lower_
3c454     19 30 63 FD |                 getqy   _var_64_upper_
3c458     28 2E 63 FD |                 setq    _var_64_lower_
3c45c     65 CD 1D FF 
3c460     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3c464     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3c468     01 00 00 FF 
3c46c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3c470     18 2E 63 FD |                 getqx   _var_64_lower_
3c474     19 30 63 FD |                 getqy   _var_64_upper_
3c478     28 2E 63 FD |                 setq    _var_64_lower_
3c47c     A1 07 00 FF 
3c480     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3c484     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3c488     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3c48c     09 38 57 F0 |                 shr     _1us_, #9               wc
3c490     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3c494     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3c498     18 3A 63 FD |                 getqx   _10us_
3c49c     09 3A 57 F0 |                 shr     _10us_, #9              wc
3c4a0     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3c4a4     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3c4a8     18 3C 63 FD |                 getqx   _33us_
3c4ac     09 3C 57 F0 |                 shr     _33us_, #9              wc
3c4b0     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3c4b4     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c4b8     18 3E 63 FD |                 getqx   _txn_err_
3c4bc     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3c4c0     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c4c4     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c4c8     18 40 63 FD |                 getqx   _500us_
3c4cc     09 40 57 F0 |                 shr     _500us_, #9             wc
3c4d0     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3c4d4     01 00 00 FF 
3c4d8     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c4dc     18 42 63 FD |                 getqx   _txn_ok_ls_
3c4e0     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c4e4     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c4e8     01 00 00 FF 
3c4ec     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c4f0     18 44 63 FD |                 getqx   _txn_ok_fs_
3c4f4     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c4f8     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c4fc     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c500     05 00 00 FF 
3c504     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c508     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c50c     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3c510     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c514     1C 00 00 FF 
3c518     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c51c     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c520     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3c524     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c528     00 00 00 FF 
3c52c     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c530     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c534     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3c538     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c53c     04 00 00 FF 
3c540     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c544     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c548     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3c54c     8D 5B 00 FF 
3c550     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c554     18 4E 63 FD |                 getqx   _preamble_wait_
3c558     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c55c     01 00 00 FF 
3c560     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c564     18 2E 63 FD |                 getqx   _var_64_lower_
3c568     19 30 63 FD |                 getqy   _var_64_upper_
3c56c     28 2E 63 FD |                 setq    _var_64_lower_
3c570     01 00 00 FF 
3c574     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c578     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c57c     09 50 57 F0 |                 shr     _1ms_, #9               wc
3c580     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c584     FF FF 7F FF 
3c588     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c58c     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c590     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3c594     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c598     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3c59c     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c5a0     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3c5a4     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c5a8     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3c5ac     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c5b0     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c5b4     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c5b8     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c5bc     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c5c0     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c5c4     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3c5c8     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c5cc     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c5d0     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c5d4     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c5d8     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c5dc     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c5e0     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c5e4     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c5e8     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c5ec     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c5f0     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c5f4                 | '        _ret_   mov     _1sec_, save_sysclk
3c5f4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c5f4                 | '                ret
3c5f4                 | {
3c5f4                 | }
3c5f4                 | 
3c5f4                 | '------------------------------------------------------------------------------
3c5f4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c5f4                 | ' one. If it is, start the task progression that will configure the device for
3c5f4                 | ' use.
3c5f4                 | '------------------------------------------------------------------------------
3c5f4                 | ' On entry:
3c5f4                 | '   hconfig_base - start address of the cached config descriptor chain.
3c5f4                 | ' On exit:
3c5f4                 | '------------------------------------------------------------------------------
3c5f4                 | hparse_con_desc
3c5f4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c5f8     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c5fc     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c600     4E 72 FF F9 |                 movbyts htmp,#%%1032
3c604     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c608                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c608                 | 
3c608     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c60c     6E ED 03 F1 |                 add     pa, hconfig_base
3c610     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c614                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c614                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c614                 | ' that defines a keyboard and/or mouse.
3c614     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c618                 | .next_intf
3c618     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c61c     B8 01 90 3D |         if_ae   jmp     #hset_config
3c620     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c624     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c628     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c62c     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c630     0C 00 90 AD |         if_z    jmp     #.intf
3c634     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c638     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c63c     D8 FF 9F FD |                 jmp     #.next_intf
3c640                 | .intf
3c640     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c644     00 92 07 F6 |                 mov     hpar3, #0
3c648     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c64c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c650     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c654     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c658                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c658                 | 
3c658                 | .endp
3c658     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c65c     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c660     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c664     78 00 90 3D |         if_ae   jmp     #.get_device
3c668     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c66c     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c670     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c674     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c678     64 00 90 AD |         if_z    jmp     #.get_device
3c67c     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c680     04 00 90 AD |         if_z    jmp     #.get_ep
3c684     D0 FF 9F FD |                 jmp     #.endp
3c688                 | .get_ep
3c688     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c68c     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c690     0F 88 67 F0 |                 shl     hr1, #8 + 7
3c694     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3c698     3F 00 00 FF 
3c69c     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3c6a0     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c6a4     00 90 0F F2 |                 cmp     hpar2, #0               wz
3c6a8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c6ac     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c6b0     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c6b4     A0 FF 9F FD |                 jmp     #.endp
3c6b8                 | .in_ep
3c6b8     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c6bc     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c6c0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c6c0     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c6c4     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3c6c8     8C FF 9F FD |                 jmp     #.endp
3c6cc                 | .out_ep
3c6cc     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c6d0     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c6d4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c6d4     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c6d8     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3c6dc     78 FF 9F FD |                 jmp     #.endp
3c6e0                 | 
3c6e0                 | .get_device
3c6e0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c6e4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c6e8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c6ec     64 00 90 AD |         if_z    jmp     #.gamepad
3c6f0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c6f4     A8 00 90 AD |         if_z    jmp     #.hub
3c6f8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c6fc     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c700     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c704     4C 00 90 AD |         if_z    jmp     #.gamepad
3c708     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c70c     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c710                 | .keyboard
3c710     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c714                 |         if HAVE_MOUSE
3c714     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c718                 |         else
3c718                 |         end
3c718     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c71c     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3c720     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c724     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c728     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c72c     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c730                 |                 'debug(udec(kb_intf_num))
3c730                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c730     E4 FE 9F FD |                 jmp     #.next_intf
3c734                 | if HAVE_MOUSE
3c734                 | .mouse
3c734     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c738     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c73c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c740     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c744     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c748                 |                 'getbyte ms_interval, hr2, #3
3c748     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c74c     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c750                 |                 'debug(udec(kb_intf_num))
3c750                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c750     C4 FE 9F FD |                 jmp     #.next_intf
3c754                 | end
3c754                 | .gamepad
3c754     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c758     C8 73 63 F5 |                 xor     htmp, hpar2
3c75c     3F 00 00 FF 
3c760     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c764     B0 FE 9F AD |         if_z    jmp     #.next_intf
3c768                 |         if HAVE_MOUSE
3c768     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c76c     C8 73 63 F5 |                 xor     htmp, hpar2
3c770     3F 00 00 FF 
3c774     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c778     9C FE 9F AD |         if_z    jmp     #.next_intf
3c77c                 |         end
3c77c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c780     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c784     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3c788                 | 
3c788     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c78c     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c790     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c794     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c798     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c79c                 |                 'debug(udec(gp_intf_num))
3c79c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c79c     78 FE 9F FD |                 jmp     #.next_intf
3c7a0                 | .hub
3c7a0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c7a4     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3c7a8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c7ac     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c7b0     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3c7b4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c7b8     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3c7bc     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c7c0     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c7c4     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c7c8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c7cc     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c7d0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c7d4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c7d4     40 FE 9F FD |                 jmp     #.next_intf
3c7d8                 | 
3c7d8                 | '------------------------------------------------------------------------------
3c7d8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c7d8                 | ' it according to its function, or functions. In the case of this boot protocol
3c7d8                 | ' keyboard/mouse class driver:
3c7d8                 | ' - SetConfiguration(config_num)
3c7d8                 | ' - SetProtocol(boot)
3c7d8                 | ' - SetIdle(indefinite)
3c7d8                 | ' - Enter the device interrupt IN polling task stage.
3c7d8                 | '------------------------------------------------------------------------------
3c7d8                 | ' On entry:
3c7d8                 | ' On exit:
3c7d8                 | '------------------------------------------------------------------------------
3c7d8                 | hset_config
3c7d8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c7d8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c7d8     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c7dc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c7e0     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c7e4     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c7e8                 |         if HAVE_MOUSE
3c7e8     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c7ec                 |         end
3c7ec     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c7f0     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c7f4                 | .set_config
3c7f4     74 0E D0 FE |                 loc     ptra, #set_config
3c7f8     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c7fc     6E ED 03 F1 |                 add     pa, hconfig_base
3c800     F6 8F C3 FA |                 rdbyte  hpar1, pa
3c804                 |                 debug("SetConfiguration: ",udec_(hpar1))
3c804     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c808     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c80c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c810     A0 02 A0 FD |                 call    #control_write
3c814     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c818     2D 00 64 5D |         if_nz   ret
3c81c                 | .kbd_config
3c81c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c820     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c824                 | 
3c824     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c828     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c82c     3F 00 00 FF 
3c830     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c834     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c838                 | 
3c838     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c83c     3C 0E D0 FE |                 loc     ptra, #set_protocol
3c840     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c844     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c848     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c84c     A0 02 A0 FD |                 call    #control_write
3c850     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c854     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c858     F8 02 90 5D |         if_nz   jmp     #.notify_client
3c85c     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c860     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3c864     44 03 B0 FD |                 call    #hset_idle
3c868                 |                 'cmp     retval, #PID_ACK        wz
3c868                 |         'if_nz   mov     hkbd_ep_addr, #0
3c868                 |         'if_nz   jmp     #.notify_client
3c868     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c86c     EF 02 A0 FD |                 call    #poll_waitx
3c870     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3c874                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3c874                 |         end
3c874     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3c878     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3c87c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3c880     40 03 B0 FD |                 call    #hset_kbdled_report
3c884     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c888     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c88c     C4 02 90 5D |         if_nz   jmp     #.notify_client
3c890     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c894     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c898     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c89c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c8a0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3c8a4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c8a8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3c8ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c8b0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3c8b4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3c8b8     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3c8bc                 |         if !!HAVE_MOUSE
3c8bc                 |         end
3c8bc                 | 
3c8bc                 | .mouse_config
3c8bc                 | if HAVE_MOUSE
3c8bc     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3c8c0     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c8c4     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c8c8     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c8cc     3F 00 00 FF 
3c8d0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c8d4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c8d8                 | 
3c8d8                 |                 debug("mouse passed addr check")
3c8d8                 | 
3c8d8     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c8dc     00 00 80 FF 
3c8e0     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3c8e4     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3c8e8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c8ec     55 02 A0 FD |                 call    #control_read
3c8f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8f4     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c8f8     58 02 90 5D |         if_nz   jmp     #.notify_client
3c8fc     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c900     56 01 00 F6 |                 mov     0-0, total_data
3c904     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c908                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c908                 | 
3c908     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3c90c     6C 0D D0 FE |                 loc     ptra, #set_protocol
3c910     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3c914     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c918     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c91c     A0 02 A0 FD |                 call    #control_write
3c920     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c924     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c928     28 02 90 5D |         if_nz   jmp     #.notify_client
3c92c                 |                 debug("mouse passed SetProtocol")
3c92c     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c930     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3c934     74 02 B0 FD |                 call    #hset_idle
3c938                 |                 'cmp     retval, #PID_ACK        wz
3c938                 |         'if_nz   mov     hmouse_ep_addr, #0
3c938                 |         'if_nz   jmp     #.notify_client
3c938                 |                 debug("mouse passed SetIdle")
3c938     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c93c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c940     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c944     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c948     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3c94c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c950     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3c954     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3c958     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3c95c     3F 00 00 FF 
3c960     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3c964     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3c968     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3c96c     E4 01 90 FD |                 jmp     #.notify_client
3c970                 | end
3c970                 | .gamepad_config
3c970                 | if _HAVE_GAMEPAD
3c970     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c974     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c978     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3c97c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c980     00 72 03 F6 |                 mov     htmp, 0-0
3c984     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c988     3F 00 00 FF 
3c98c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c990     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3c994                 | 
3c994     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c998     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c99c     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3c9a0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c9a4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c9a8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c9ac     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c9b0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c9b4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c9b8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c9bc     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c9c0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c9c4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c9c8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c9cc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c9d0                 | 
3c9d0                 |                 if EMUPAD_MAX_PLAYER > 0
3c9d0                 |                 
3c9d0                 | .rule_loop           
3c9d0                 |                 end
3c9d0                 | 
3c9d0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c9d4     5C 00 90 AD |         if_e    jmp     #.xinput
3c9d8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c9dc     00 72 03 F6 |                 mov     htmp,0-0
3c9e0     01 A6 02 FF 
3c9e4     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c9e8     8C 00 90 AD |         if_e    jmp     #.ps3
3c9ec                 | 
3c9ec     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c9f0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c9f4     00 00 80 5F 
3c9f8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c9fc     03 00 80 AF 
3ca00     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3ca04     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3ca08     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ca0c     55 02 A0 FD |                 call    #control_read
3ca10     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ca14     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3ca18     00 00 04 56 |         if_nz   mov     0-0, #0
3ca1c     34 01 90 5D |         if_nz   jmp     #.notify_client
3ca20     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3ca24     56 01 00 F6 |                 mov     0-0, total_data
3ca28     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ca2c                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3ca2c                 | 
3ca2c     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3ca30     20 01 90 FD |                 jmp     #.notify_client
3ca34                 | .xinput
3ca34     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3ca38     2D EF 03 F6 |                 mov     pb,hdev_port
3ca3c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3ca40     03 EE 27 F3 |                 fle     pb,#3
3ca44     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3ca48     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3ca4c                 | 
3ca4c     03 B0 06 F6 |                 mov     pkt_data, #3
3ca50     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3ca54     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3ca58                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3ca58     5A 00 A0 FD |                 call    #txn_out
3ca5c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3ca60                 | 
3ca60     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3ca64     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3ca68     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3ca6c                 |                 debug("8bitdo weird fix... ",uhex(retval))
3ca6c     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3ca70                 | 
3ca70                 | 
3ca70     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3ca74     DC 00 90 FD |                 jmp     #.notify_client
3ca78                 | .ps3
3ca78     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3ca7c     2D EF 03 F6 |                 mov     pb,hdev_port
3ca80     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3ca84     04 EE 27 F3 |                 fle     pb,#4
3ca88     F7 EF C3 F9 |                 decod   pb
3ca8c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3ca90                 | 
3ca90     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3ca94     F4 0B D0 FE |                 loc     ptra, #set_report
3ca98     01 00 80 FF 
3ca9c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3caa0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3caa4     03 61 5C FC |                 wrword  #48, ptra[wLength]
3caa8     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3caac     A0 02 A0 FD |                 call    #control_write
3cab0                 | 
3cab0     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3cab4     D4 0B D0 FE |                 loc     ptra, #set_report
3cab8     01 00 80 FF 
3cabc     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3cac0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cac4     03 09 5C FC |                 wrword  #4, ptra[wLength]
3cac8     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3cacc     A0 02 A0 FD |                 call    #control_write
3cad0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3cad4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3cad8     00 00 04 56 |         if_nz   mov     0-0, #0
3cadc     74 00 90 5D |         if_nz   jmp     #.notify_client
3cae0                 | 
3cae0     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3cae4     6C 00 90 FD |                 jmp     #.notify_client
3cae8                 | end
3cae8                 | 
3cae8                 | .hub_config
3cae8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3caec     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3caf0     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3caf4     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3caf8     3F 00 00 FF 
3cafc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cb00     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3cb04                 | 
3cb04     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3cb08     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3cb0c     26 EF 03 F6 |                 mov     pb, hub_descr_p
3cb10     55 02 A0 FD |                 call    #control_read
3cb14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb18     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3cb1c     34 00 90 5D |         if_nz   jmp     #.notify_client
3cb20                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3cb20                 | 
3cb20     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3cb24     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3cb28     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3cb2c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3cb2c                 | .pwr_loop
3cb2c     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3cb30     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3cb34     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3cb38     A0 02 A0 FD |                 call    #control_write
3cb3c     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3cb40                 | 
3cb40     B2 99 02 F6 |                 mov     hctwait, _500ms_
3cb44     B1 99 02 F1 |                 add     hctwait, _100ms_
3cb48     EF 02 A0 FD |                 call    #poll_waitx
3cb4c                 | 
3cb4c     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3cb50     00 00 90 FD |                 jmp     #.notify_client
3cb54                 | 
3cb54                 | .notify_client
3cb54     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3cb58     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3cb5c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3cb5c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3cb5c     2D 00 64 FD |                 ret
3cb60                 | 
3cb60                 | '------------------------------------------------------------------------------
3cb60                 | ' Initialize the keyboard/mouse data area to start-up values.
3cb60                 | '------------------------------------------------------------------------------
3cb60                 | ' On entry:
3cb60                 | ' On exit:
3cb60                 | '------------------------------------------------------------------------------
3cb60                 | init_kbdm_data
3cb60     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3cb64     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3cb68                 | 
3cb68     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3cb6c     2B ED 03 F6 |                 mov     pa, cache_end_p
3cb70                 | .loop
3cb70     61 01 4C FC |                 wrbyte  #0, ptra++
3cb74     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3cb78     F4 FF 9F CD |         if_b    jmp     #.loop
3cb7c                 |         
3cb7c                 |         if EMUPAD_MAX_PLAYER > 0
3cb7c                 |         end
3cb7c                 | 
3cb7c                 | 
3cb7c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3cb80                 | .regloop
3cb80     00 EC 8F F9 |                 altd    pa
3cb84     00 00 04 F6 |                 mov     0-0, #0
3cb88     01 EC 07 F1 |                 add     pa, #1
3cb8c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3cb90     EC FF 9F 5D |         if_nz   jmp     #.regloop
3cb94                 | 
3cb94     E1 E1 61 FF 
3cb98     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3cb9c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3cba0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3cba4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3cba8                 | 
3cba8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3cbac                 | 
3cbac                 | '------------------------------------------------------------------------------
3cbac                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3cbac                 | ' function.
3cbac                 | '------------------------------------------------------------------------------
3cbac                 | ' On entry:
3cbac                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3cbac                 | '   hpar2 - index number of the target interface.
3cbac                 | ' On exit:
3cbac                 | '------------------------------------------------------------------------------
3cbac                 | hset_idle
3cbac     A9 99 02 F6 |                 mov     hctwait, _2ms_
3cbb0     EF 02 A0 FD |                 call    #poll_waitx
3cbb4     CC 0A D0 FE |                 loc     ptra, #set_idle
3cbb8     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3cbbc     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3cbc0     A0 02 80 FD |                 jmp     #control_write
3cbc4                 | 
3cbc4                 | '------------------------------------------------------------------------------
3cbc4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3cbc4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3cbc4                 | '------------------------------------------------------------------------------
3cbc4                 | ' On entry:
3cbc4                 | '   ep_addr_pid - device address and enpoint for the request.
3cbc4                 | ' On exit:
3cbc4                 | '   retval - transaction result.
3cbc4                 | '------------------------------------------------------------------------------
3cbc4                 | hset_kbdled_report
3cbc4     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3cbc8     C0 0A D0 FE |                 loc     ptra, #set_report
3cbcc     01 00 80 FF 
3cbd0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3cbd4     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cbd8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3cbdc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cbe0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3cbe4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3cbe8                 | 
3cbe8                 | '------------------------------------------------------------------------------
3cbe8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3cbe8                 | '------------------------------------------------------------------------------
3cbe8                 | ' On entry:
3cbe8                 | ' On exit:
3cbe8                 | '------------------------------------------------------------------------------
3cbe8                 | hget_kbd_in_report
3cbe8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3cbec     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cbf0     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3cbf4     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3cbf8     CF 02 A0 FD |                 call    #do_int_in
3cbfc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cc00     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cc04                 | 
3cc04     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cc08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cc0c                 | 
3cc0c     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3cc10     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cc14     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3cc18     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3cc1c                 | 
3cc1c     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3cc20     18 00 B0 FD |                 call    #hkbd_compare
3cc24                 |         if EMUPAD_MAX_PLAYER > 0
3cc24                 |         end
3cc24                 | 
3cc24                 | .led_check
3cc24     3B 73 03 F6 |                 mov     htmp, kb_led_states
3cc28     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3cc2c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3cc30     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3cc34     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3cc38     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3cc3c                 | 
3cc3c                 | '------------------------------------------------------------------------------
3cc3c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3cc3c                 | '------------------------------------------------------------------------------
3cc3c                 | hkbd_compare
3cc3c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3cc40     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3cc44     61 75 07 FB |                 rdlong  htmp1, ptra++
3cc48     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cc4c     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3cc50     61 75 07 FB |                 rdlong  htmp1, ptra++
3cc54     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cc58     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3cc5c     2D 00 64 AD |         if_z    ret
3cc60                 | 
3cc60     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3cc64                 | 
3cc64                 |                 ' Handle modifiers
3cc64     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3cc68     00 89 C7 FA |                 rdbyte  hr1, ptra
3cc6c     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3cc70     63 88 63 FD |                 mergew  hr1
3cc74     08 EC 07 F6 |                 mov     pa,#8
3cc78                 | .modloop
3cc78     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3cc7c     E8 8E 07 F6 |                 mov     hpar1,#$E8
3cc80     F6 8F 83 F1 |                 sub     hpar1,pa
3cc84     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3cc88     FB ED 6F FB |                 djnz    pa,#.modloop
3cc8c                 | 
3cc8c     6F E0 75 FD | .release        modc    _set    wc
3cc90                 |                 'alts    hdev_port, #hid_report_p
3cc90                 |                 'mov     ptra, hid_report_p
3cc90     02 F0 07 F1 |                 add     ptra, #2
3cc94     06 EC 07 F6 |                 mov     pa, #6
3cc98     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3cc9c     20 00 90 AD |         if_z    jmp     #.rl3
3cca0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3cca4     02 F2 07 F1 |                 add     ptrb, #2
3cca8     06 EE 07 F6 |                 mov     pb, #6
3ccac     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3ccb0     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ccb4     08 00 90 AD |         if_z    jmp     #.rl3
3ccb8     FC EF 6F FB |                 djnz    pb, #.rl2
3ccbc     68 00 B0 FD |                 call    #hkbd_translate
3ccc0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3ccc4                 | 
3ccc4     00 92 07 F6 |                 mov     hpar3, #0
3ccc8     1F 92 27 F4 |                 bith    hpar3, #31
3cccc                 | 
3cccc     6F 00 74 FD | .press          modc    _clr    wc
3ccd0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3ccd4     02 F0 07 F1 |                 add     ptra, #2
3ccd8     06 EC 07 F6 |                 mov     pa, #6
3ccdc     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3cce0     20 00 90 AD |         if_z    jmp     #.pl3
3cce4     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3cce8     02 F2 07 F1 |                 add     ptrb, #2
3ccec     06 EE 07 F6 |                 mov     pb, #6
3ccf0     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3ccf4     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ccf8     08 00 90 AD |         if_z    jmp     #.pl3
3ccfc     FC EF 6F FB |                 djnz    pb, #.pl2
3cd00     24 00 B0 FD |                 call    #hkbd_translate
3cd04     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3cd08                 | 
3cd08     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3cd0c     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3cd10     28 02 64 FD |                 setq #1
3cd14     61 75 07 FB |                 rdlong  htmp1, ptra++
3cd18     28 02 64 FD |                 setq #1
3cd1c     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3cd20     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3cd24                 | 
3cd24     2D 00 64 FD |                 ret
3cd28                 | 
3cd28                 | '------------------------------------------------------------------------------
3cd28                 | ' Translate keyboard scancode to ASCII
3cd28                 | '------------------------------------------------------------------------------
3cd28                 | ' On entry:
3cd28                 | '   hpar1 - scancode
3cd28                 | '   hpar2 - key modifiers state
3cd28                 | '       c - pressed (0) or released (1) flag
3cd28                 | ' On exit:
3cd28                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3cd28                 | '               30..17 = unused
3cd28                 | '                   18 = scroll-lock state 
3cd28                 | '                   17 = caps-lock state
3cd28                 | '                   16 = num-lock state 
3cd28                 | '                15..8 = key modifiers state
3cd28                 | '                 7..0 = scancode
3cd28                 | '------------------------------------------------------------------------------
3cd28                 | hkbd_translate
3cd28     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3cd2c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3cd30     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3cd34     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3cd38     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3cd3c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3cd40                 | 
3cd40                 |         if EMUPAD_MAX_PLAYER > 0
3cd40                 | 
3cd40                 |         if EMUPAD_BT0_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT1_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT2_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT3_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT4_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT5_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT6_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT7_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT8_BIT >= 0
3cd40                 |         end
3cd40                 |         if EMUPAD_BT9_BIT >= 0
3cd40                 |         end
3cd40                 | 
3cd40                 |         end
3cd40     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3cd44     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3cd48     1F 8E 47 F4 |                 bitc    hpar1, #31
3cd4c                 |         if KEYQUEUE_SIZE > 0
3cd4c     C0 09 B0 FE |                 loc pb,#keyq_head
3cd50     F7 73 E3 FA |                 rdword htmp,pb
3cd54     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3cd58     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3cd5c     B9 77 03 F6 |                 mov htmp2,htmp
3cd60     04 76 07 FA |                 mul htmp2,#4
3cd64     F7 77 03 F1 |                 add htmp2,pb
3cd68     02 76 07 F1 |                 add htmp2,#2
3cd6c     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3cd70     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3cd74     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3cd78     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3cd7c                 |         end
3cd7c     2D 00 7C FD |                 ret wcz
3cd80                 | 
3cd80                 | if HAVE_MOUSE
3cd80                 | '------------------------------------------------------------------------------
3cd80                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3cd80                 | '------------------------------------------------------------------------------
3cd80                 | ' On entry:
3cd80                 | ' On exit:
3cd80                 | '------------------------------------------------------------------------------
3cd80                 | hget_mouse_in_report
3cd80     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cd84     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cd88     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3cd8c     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3cd90     CF 02 A0 FD |                 call    #do_int_in
3cd94     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cd98     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cd9c                 | 
3cd9c     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cda0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cda4                 | 
3cda4     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3cda8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cdac     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3cdb0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3cdb4                 | 
3cdb4                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3cdb4                 | 
3cdb4                 |         if MOUSE_FULL_PROTOCOL
3cdb4     C8 00 B0 FD |                 call #hid_decode
3cdb8                 |         else
3cdb8                 |         end
3cdb8                 | 
3cdb8     48 09 90 FE |                 loc     pa, #mouse_limits
3cdbc     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3cdc0                 | 
3cdc0                 |                 ' load xacc,yacc,zacc
3cdc0     28 04 64 FD |                 setq    #3-1
3cdc4     80 89 07 FB |                 rdlong  hr1,ptrb
3cdc8                 |                 ' load limits and outptr
3cdc8     28 04 64 FD |                 setq    #3-1
3cdcc     F6 75 03 FB |                 rdlong  htmp1,pa
3cdd0                 | 
3cdd0                 |         if MOUSE_FULL_PROTOCOL
3cdd0     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3cdd4                 |         else
3cdd4                 |                 { ' Currently not used
3cdd4                 |                 '}
3cdd4                 |         end
3cdd4                 | 
3cdd4                 |         if MOUSE_FULL_PROTOCOL
3cdd4     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3cdd8     0F 72 67 F7 |                 signx   htmp, #15
3cddc                 |         else
3cddc                 |         end
3cddc     B9 89 03 F1 |                 add     hr1,htmp
3cde0     00 74 0F F2 |                 cmp     htmp1,#0 wz
3cde4     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3cde8     00 88 47 53 |         if_ne   fges    hr1,#0
3cdec                 | 
3cdec                 |         if MOUSE_FULL_PROTOCOL
3cdec     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3cdf0     0F 72 67 F7 |                 signx   htmp, #15
3cdf4                 |         else
3cdf4                 |         end
3cdf4     B9 8B 03 F1 |                 add     hr2,htmp
3cdf8     00 76 0F F2 |                 cmp     htmp2,#0 wz
3cdfc     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3ce00     00 8A 47 53 |         if_ne   fges    hr2,#0
3ce04                 |                 
3ce04                 |         if MOUSE_FULL_PROTOCOL
3ce04     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3ce08     0F 72 67 F7 |                 signx   htmp, #15
3ce0c     B9 8D 03 F1 |                 add     hr3, htmp
3ce10                 |         else    
3ce10                 |         end
3ce10                 | 
3ce10     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3ce14     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3ce18                 | 
3ce18                 |                 ' write back accumulators
3ce18     28 04 64 FD |                 setq    #3-1
3ce1c     80 89 67 FC |                 wrlong  hr1,ptrb
3ce20                 |                 ' if outptr set, write X/Y words
3ce20     00 78 0F F2 |                 cmp htmp3,#0                    wz
3ce24     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3ce28     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3ce2c     2D 00 64 FD |                 ret
3ce30                 | end
3ce30                 | 
3ce30                 | '------------------------------------------------------------------------------
3ce30                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3ce30                 | '------------------------------------------------------------------------------
3ce30                 | ' On entry:
3ce30                 | ' On exit:
3ce30                 | '------------------------------------------------------------------------------
3ce30                 | if _HAVE_GAMEPAD
3ce30                 | hget_gp_in_report
3ce30     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3ce34     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3ce38                 | 
3ce38     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3ce3c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3ce40     00 92 E3 F8 |                 getbyte hpar3
3ce44     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3ce48     CF 02 A0 FD |                 call    #do_int_in
3ce4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce50     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ce54                 | 
3ce54     00 92 0F F2 |                 cmp     hpar3, #0               wz
3ce58     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ce5c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3ce5c                 | 
3ce5c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3ce60     00 72 E3 F8 |                 getbyte htmp                            ' |
3ce64     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3ce68     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3ce6c     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3ce70     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3ce74     B9 01 C0 F8 |                 setbyte htmp                            ' |
3ce78                 | 
3ce78                 | ' Note: the following code compares the current and previous reports
3ce78                 | ' and process the data if there are changes to ease the debug output.
3ce78                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3ce78                 | ' gpPreReport buffer.
3ce78                 | 
3ce78                 |                 ' ----- start of block to remove
3ce78                 |                 {
3ce78                 |                 }
3ce78                 |                 ' ----- end of block to remove
3ce78     14 05 90 FE |                 loc pa,#hpad_translate
3ce7c     2A EC 63 FD |                 push pa
3ce80                 | 
3ce80                 |                 ' FALL THROUGH !!!!
3ce80                 | end
3ce80                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3ce80                 | '------------------------------------------------------------------------------
3ce80                 | ' Decode controller report
3ce80                 | '------------------------------------------------------------------------------
3ce80                 | hid_decode
3ce80                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3ce80     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3ce84     00 04 00 FF 
3ce88     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3ce8c                 | 
3ce8c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ce90                 | 
3ce90     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ce94     00 1C E3 F8 |                 getbyte hidr_type
3ce98                 |         if _HAVE_GAMEPAD
3ce98     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3ce9c     08 03 90 AD |         if_z    jmp     #hpad_xinput
3cea0     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3cea4     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3cea8                 |         end
3cea8     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3ceac     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3ceb0     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3ceb4                 |                 
3ceb4                 | 
3ceb4                 | '------------------------------------------------------------------------------
3ceb4                 | ' Handle HID controller (or mouse now
3ceb4                 | ' On entry:
3ceb4                 | '   ptrb - controller report
3ceb4                 | '------------------------------------------------------------------------------
3ceb4                 | hpad_hid
3ceb4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ceb8     F7 F1 03 F6 |                 mov     ptra, pb
3cebc     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3cec0     00 EC 03 F6 |                 mov     pa, 0-0
3cec4                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3cec4     19 2A 3B FF 
3cec8     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3cecc                 | 
3cecc                 | .next
3cecc     00 EC 5F F2 |                 cmps    pa, #0      wcz
3ced0     2D 00 7C ED |         if_be   ret     wcz
3ced4                 | 
3ced4     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3ced8     01 EC 87 F1 |                 sub     pa, #1
3cedc     00 90 07 F6 |                 mov     hpar2, #0
3cee0                 | 
3cee0     C7 73 03 F6 |                 mov     htmp, hpar1
3cee4     03 72 07 F5 |                 and     htmp, #$03
3cee8     01 72 0F F2 |                 cmp     htmp, #1    wz
3ceec     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3cef0     07 90 67 A7 |         if_z    signx   hpar2,#7
3cef4     01 EC 87 A1 |         if_z    sub     pa, #1
3cef8     02 72 0F F2 |                 cmp     htmp, #2    wz
3cefc     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3cf00     0F 90 67 A7 |         if_z    signx   hpar2,#15
3cf04     02 EC 87 A1 |         if_z    sub     pa, #2
3cf08     03 72 0F F2 |                 cmp     htmp, #3    wz
3cf0c     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3cf10     04 EC 87 A1 |         if_z    sub     pa, #4
3cf14                 | 
3cf14     FC 8E 07 F5 |                 and     hpar1, #$FC
3cf18                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3cf18                 | 
3cf18     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3cf1c     18 01 90 AD |         if_z    jmp     #.report_id
3cf20     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3cf24     30 01 90 AD |         if_z    jmp     #.usage_page
3cf28     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3cf2c     38 01 90 AD |         if_z    jmp     #.usage
3cf30     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3cf34     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3cf38     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3cf3c     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3cf40     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3cf44     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3cf48     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3cf4c     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3cf50     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3cf54     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3cf58     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3cf5c     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3cf60     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3cf64     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3cf68     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3cf6c     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3cf70     58 FF 9F 5D |         if_nz   jmp     #.next
3cf74                 | 
3cf74     D5 25 A7 FB |                 tjf     hidr_state,#.next
3cf78                 | 
3cf78     03 90 07 F5 |                 and     hpar2, #$03
3cf7c     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3cf80     18 00 90 5D |         if_nz   jmp     #.skip
3cf84                 | 
3cf84     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3cf88     20 00 90 AD |         if_z    jmp     #.axes
3cf8c     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3cf90     5C 00 90 AD |         if_z    jmp     #.hats
3cf94     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3cf98     70 00 90 AD |         if_z    jmp     #.buttons
3cf9c                 | .skip
3cf9c     93 73 03 F6 |                 mov     htmp, hidr_size
3cfa0     94 73 03 FA |                 mul     htmp, hidr_count
3cfa4     B9 21 03 F1 |                 add     hidr_offset, htmp
3cfa8     20 FF 9F FD |                 jmp     #.next
3cfac                 | .axes
3cfac                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3cfac     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3cfb0     94 89 03 F6 |                 mov     hr1, hidr_count
3cfb4                 | .l1
3cfb4     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cfb8     93 91 03 F6 |                 mov     hpar2, hidr_size
3cfbc     28 01 B0 FD |                 call    #hpad_getbits
3cfc0     88 01 B0 FD |                 call    #hpad_normalize
3cfc4     08 86 1F F2 |                 cmp     hr0, #8         wcz
3cfc8     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3cfcc     00 8A 43 C8 |         if_b    getnib  hr2
3cfd0     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3cfd4     5F 01 20 C9 |         if_b    setword retval
3cfd8     01 86 07 C1 |         if_b    add     hr0, #1
3cfdc     93 21 03 F1 |                 add     hidr_offset, hidr_size
3cfe0     F4 89 6F FB |                 djnz    hr1, #.l1
3cfe4                 | 
3cfe4     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3cfe8     01 24 07 F6 |                 mov     hidr_state, #1
3cfec     DC FE 9F FD |                 jmp     #.next
3cff0                 | .hats
3cff0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3cff0     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cff4     93 91 03 F6 |                 mov     hpar2, hidr_size
3cff8     EC 00 B0 FD |                 call    #hpad_getbits
3cffc     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3d000     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d004     01 24 07 F6 |                 mov     hidr_state, #1
3d008     90 FF 9F FD |                 jmp     #.skip
3d00c                 | .buttons
3d00c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3d00c     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3d010     93 91 03 F6 |                 mov     hpar2, hidr_size
3d014     94 91 03 FA |                 mul     hpar2, hidr_count
3d018     CC 00 B0 FD |                 call    #hpad_getbits
3d01c     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3d020     B9 BF 62 F0 |                 shl     retval, htmp
3d024     5F 19 43 F5 |                 or      hidr_buttons, retval
3d028     94 73 03 F1 |                 add     htmp, hidr_count
3d02c     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3d030     01 24 07 F6 |                 mov     hidr_state, #1
3d034     64 FF 9F FD |                 jmp     #.skip
3d038                 | .report_id
3d038     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3d03c     2D 00 7C 5D |         if_nz   ret     wcz
3d040     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d044                 |                 'debug(".report_id",udec(htmp,hpar2))
3d044     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3d048     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3d04c     01 24 67 56 |         if_nz   neg     hidr_state,#1
3d050     01 F2 87 51 |         if_nz   sub     ptrb,#1
3d054     74 FE 9F FD |                 jmp     #.next
3d058                 | .usage_page
3d058     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3d05c     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3d060     04 24 07 A6 |         if_z    mov     hidr_state, #4
3d064     64 FE 9F FD |                 jmp     #.next
3d068                 | .usage
3d068     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3d06c     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3d070     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3d074     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d078     50 FE 9F AD |         if_z    jmp     #.next
3d07c     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3d080     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3d084     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d088     40 FE 9F AD |         if_z    jmp     #.next
3d08c     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3d090     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3d094     10 00 90 3D |         if_nc   jmp     #.usage_axis
3d098     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3d09c     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3d0a0     03 24 07 A6 |         if_z    mov     hidr_state, #3
3d0a4     24 FE 9F FD |                 jmp     #.next
3d0a8                 | .usage_axis
3d0a8     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3d0ac     1C FE 9F CD |         if_b    jmp     #.next
3d0b0     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3d0b4     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3d0b8     C8 01 00 F8 |                 setnib  hpar2
3d0bc                 | 
3d0bc     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3d0c0     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3d0c4                 | 
3d0c4     01 22 07 F1 |                 add     hidr_usage_idx, #1
3d0c8     02 24 07 F6 |                 mov     hidr_state, #2
3d0cc     FC FD 9F FD |                 jmp     #.next
3d0d0                 | .pushpop
3d0d0                 |                 ' Entering with C set if PUSH  
3d0d0     4C 0F B0 FE |                 loc     pb, #hid_stack
3d0d4     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3d0d8     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3d0dc     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3d0e0     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3d0e4     E4 FD 9F FD |                 jmp     #.next
3d0e8                 | 
3d0e8                 | '------------------------------------------------------------------------------
3d0e8                 | ' Read bits from report data buffer
3d0e8                 | '------------------------------------------------------------------------------
3d0e8                 | ' On entry:
3d0e8                 | '   PTRB - report buffer
3d0e8                 | '   hpar1 - start bit
3d0e8                 | '   hpar2 - number of bits
3d0e8                 | ' On exit:
3d0e8                 | '   retval - bits
3d0e8                 | '------------------------------------------------------------------------------
3d0e8                 | hpad_getbits
3d0e8     C7 73 03 F6 |                 mov     htmp, hpar1
3d0ec     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3d0f0     F9 73 03 F1 |                 add     htmp, ptrb
3d0f4     B9 BF 02 FB |                 rdlong  retval, htmp
3d0f8                 | 
3d0f8     C7 75 03 F6 |                 mov     htmp1, hpar1
3d0fc     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3d100     BA BF 42 F0 |                 shr     retval, htmp1
3d104                 | 
3d104     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3d108     10 00 90 1D |         if_a    jmp     #.l1
3d10c                 | 
3d10c     C8 91 C3 F9 |                 decod   hpar2
3d110     01 90 87 F1 |                 sub     hpar2, #1
3d114     C8 BF 02 F5 |                 and     retval, hpar2
3d118     2D 00 64 FD |                 ret
3d11c                 | .l1
3d11c     FF 7F 00 FF 
3d120     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3d124     03 72 07 F1 |                 add     htmp, #3
3d128     B9 77 03 FB |                 rdlong  htmp2, htmp
3d12c     18 90 87 F1 |                 sub     hpar2, #24
3d130     C8 91 C3 F9 |                 decod   hpar2
3d134     01 90 87 F1 |                 sub     hpar2, #1
3d138     BA 77 43 F0 |                 shr     htmp2, htmp1
3d13c     C8 77 03 F5 |                 and     htmp2, hpar2
3d140     18 76 67 F0 |                 shl     htmp2, #24
3d144     BB BF 42 F5 |                 or      retval, htmp2
3d148     2D 00 64 FD |                 ret
3d14c                 | 
3d14c                 | '------------------------------------------------------------------------------
3d14c                 | ' Normalize value to signed word (-32768 / 32767)
3d14c                 | '------------------------------------------------------------------------------
3d14c                 | ' On entry:
3d14c                 | '   retval - value to normalize
3d14c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3d14c                 | '   - or -
3d14c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3d14c                 | '   hidr_size - value bits length
3d14c                 | ' On exit:
3d14c                 | '   retval - normalized value
3d14c                 | '------------------------------------------------------------------------------
3d14c                 | hpad_normalize
3d14c     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3d150     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3d154     2D 00 64 AD |         if_z    ret
3d158     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3d15c     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3d160     0F 74 77 F7 |                 signx   htmp1, #15      wc
3d164     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3d168     00 BE 66 C7 |         if_c    signx   retval, #0-0
3d16c                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3d16c     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3d170     2D 00 64 AD |         if_z    ret
3d174     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3d178     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3d17c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3d180     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3d184     B9 73 53 F6 |                 abs     htmp            wc
3d188     1F BE 0E F4 |                 testb   retval, #31     wz
3d18c     5F BF 42 F6 |                 abs     retval
3d190     B9 BF 12 FD |                 qdiv    retval, htmp
3d194     18 BE 62 FD |                 getqx   retval
3d198     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3d19c     C0 FF 7F FF 
3d1a0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3d1a4     2D 00 64 FD |                 ret
3d1a8                 | end
3d1a8                 | 
3d1a8                 | if _HAVE_GAMEPAD
3d1a8                 | '------------------------------------------------------------------------------
3d1a8                 | ' Handle XInput controller
3d1a8                 | ' On entry:
3d1a8                 | '   ptrb - controller report
3d1a8                 | '------------------------------------------------------------------------------
3d1a8                 | '   Default implementation translates the report to a pseudo-defacto hid
3d1a8                 | '   standard and jumps to hpad_translate for actions.
3d1a8                 | '   Implementors may take specific actions for this kind of controller.
3d1a8                 | '------------------------------------------------------------------------------
3d1a8                 | hpad_xinput
3d1a8     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3d1ac     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3d1b0     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3d1b4     14 72 0F F2 |                 cmp     htmp, #$14      wz
3d1b8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3d1bc                 | 
3d1bc                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d1bc                 | 
3d1bc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d1c0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d1c4                 | 
3d1c4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3d1c8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3d1cc     5F BF 22 F6 |                 not     retval
3d1d0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d1d4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3d1d8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3d1dc     5F BF 22 F6 |                 not     retval
3d1e0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d1e4                 | 
3d1e4     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d1e8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3d1ec     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d1f0     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3d1f4     54 FF BF FD |                 call    #hpad_normalize
3d1f8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d1fc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3d200     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d204     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3d208     40 FF BF FD |                 call    #hpad_normalize
3d20c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d210                 | 
3d210     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d214     81 BF E6 FA |                 rdword  retval, ptrb[1]
3d218     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d21c     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d220     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d224     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d228     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d22c     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d230     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d234     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d238     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3d23c     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d240     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3d244     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d248     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3d24c     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d250     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3d254     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d258     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3d25c     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d260     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3d264     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d268     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3d26c     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d270                 | 
3d270     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d274     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3d278     7A BB 7A FF 
3d27c     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3d280     F9 FF 7F FF 
3d284     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3d288     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d28c     00 72 43 F8 |                 getnib  htmp
3d290     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d294                 | 
3d294                 | '------------------------------------------------------------------------------
3d294                 | ' Handle PS3 controller
3d294                 | ' On entry:
3d294                 | '   ptrb - controller report
3d294                 | '------------------------------------------------------------------------------
3d294                 | '   Default implementation translates the report to a pseudo-defacto hid
3d294                 | '   standard and jumps to hpad_translate for actions.
3d294                 | '   Implementors may take specific actions for this kind of controller.
3d294                 | '------------------------------------------------------------------------------
3d294                 | hpad_ps3
3d294     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d298     01 72 0F F2 |                 cmp     htmp, #$01      wz
3d29c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3d2a0                 | 
3d2a0                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d2a0                 | 
3d2a0     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d2a4     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d2a8                 | 
3d2a8     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d2ac     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3d2b0     98 FE BF FD |                 call    #hpad_normalize
3d2b4     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3d2b8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3d2bc     8C FE BF FD |                 call    #hpad_normalize
3d2c0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d2c4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3d2c8     80 FE BF FD |                 call    #hpad_normalize
3d2cc     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3d2d0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3d2d4     74 FE BF FD |                 call    #hpad_normalize
3d2d8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d2dc     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3d2e0     68 FE BF FD |                 call    #hpad_normalize
3d2e4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d2e8     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3d2ec     5C FE BF FD |                 call    #hpad_normalize
3d2f0     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d2f4                 | 
3d2f4     08 8E 07 F6 |                 mov     hpar1, #8
3d2f8     13 90 07 F6 |                 mov     hpar2, #19
3d2fc     E8 FD BF FD |                 call    #hpad_getbits
3d300                 | 
3d300     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d304     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d308     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d30c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d310     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d314     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d318     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d31c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d320     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d324     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3d328     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d32c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3d330     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d334     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3d338     06 18 47 F4 |                 bitc    hidr_buttons, #6
3d33c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3d340     07 18 47 F4 |                 bitc    hidr_buttons, #7
3d344     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3d348     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d34c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3d350     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d354     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3d358     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d35c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3d360     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d364     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3d368     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d36c                 | 
3d36c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d370     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3d374     09 FA 79 FF 
3d378     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3d37c     FF FA 7F FF 
3d380     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3d384     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d388     00 72 43 F8 |                 getnib  htmp
3d38c     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d390                 | 
3d390                 | 
3d390                 | '------------------------------------------------------------------------------
3d390                 | ' Perform controller actions
3d390                 | ' On entry:
3d390                 | '    hidr_id        report id
3d390                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3d390                 | '                      X = hidr_axis+0, #0
3d390                 | '                      Y = hidr_axis+0, #1
3d390                 | '                      Z = hidr_axis+1, #0
3d390                 | '                     RX = hidr_axis+1, #1
3d390                 | '                     RY = hidr_axis+2, #0
3d390                 | '                     RZ = hidr_axis+2, #1
3d390                 | '                     Sl = hidr_axis+3, #0
3d390                 | '                     Wh = hidr_axis+3, #1
3d390                 | '    hidr_buttons   buttons state (bits 0 to 31)
3d390                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3d390                 | '
3d390                 | '                     -------3 -------2 -------1 -------0 byte
3d390                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3d390                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3d390                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3d390                 | '                              |||||||| ||||++++--------- n. axes
3d390                 | '                              |||||||| ++++------------- n. hats
3d390                 | '                              ++++++++------------------ valid axes
3d390                 | '------------------------------------------------------------------------------
3d390                 | hpad_translate
3d390                 | 
3d390                 | 
3d390                 |         if HAVE_HIDPAD
3d390     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3d394     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3d398     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3d39c     01 72 E7 F2 |                 cmpsub  htmp,#1
3d3a0     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3d3a4     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3d3a8     2D 00 7C 3D |         if_ae   ret     wcz
3d3ac     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3d3b0     B9 F3 03 F1 |                 add     ptrb,htmp
3d3b4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d3b8     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3d3bc     28 0E 64 FD |                 setq    #8-1
3d3c0     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3d3c4                 |         end
3d3c4                 | 
3d3c4                 | 
3d3c4                 |         if EMUPAD_MAX_PLAYER > 0
3d3c4                 | .emupad_no_hat
3d3c4                 |         if EMUPAD_BT0_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT1_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT2_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT3_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT4_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT5_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT6_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT7_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT8_BIT >= 0
3d3c4                 |         end
3d3c4                 |         if EMUPAD_BT9_BIT >= 0
3d3c4                 |         end
3d3c4                 | .emupad_slot_over
3d3c4                 |         end
3d3c4                 | 
3d3c4                 |         if 0
3d3c4                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3d3c4                 | 
3d3c4                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3d3c4                 | 
3d3c4                 |         end
3d3c4     2D 00 64 FD |                 ret
3d3c8                 | end
3d3c8                 | 
3d3c8                 | if EMUPAD_MAX_PLAYER > 0
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | ' Clear EmuPad state
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | emupad_reset
3d3c8                 | 
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | ' Get EmuPad Player number for current device (into retval)
3d3c8                 | ' Z flag is also set if current device is valid
3d3c8                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | emupad_getnum
3d3c8                 | .loop
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | emupad_discon
3d3c8                 | .loop         
3d3c8                 |         
3d3c8                 |         ' FALL THROUGH!!!
3d3c8                 | 
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | ' Update EmuPad reports (all of them...)
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | emupad_write_reports
3d3c8                 | .devloop
3d3c8                 | 
3d3c8                 | end
3d3c8                 | 
3d3c8                 | 
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | ' On entry:
3d3c8                 | ' On exit:
3d3c8                 | '------------------------------------------------------------------------------
3d3c8                 | hget_hub_status
3d3c8     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3d3cc     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d3d0     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3d3d4     01 92 2F F9 |                 setword hpar3, #1, #1
3d3d8     CF 02 A0 FD |                 call    #do_int_in
3d3dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3e0     0C 00 90 AD |         if_z    jmp     #.data
3d3e4     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d3e8     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3d3ec     2D 00 64 FD |                 ret
3d3f0                 | .data
3d3f0     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d3f4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d3f8                 | 
3d3f8     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3d3fc     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3d400     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3d404     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3d408                 |                 debug(ubin_long(hub_status_chg))
3d408                 | 
3d408     01 5A 06 F6 |                 mov     hdev_port, #1
3d40c                 | .loop
3d40c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3d410     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3d414     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3d418     F0 FF 9F 3D |         if_nc   jmp     #.loop
3d41c     2D 00 64 FD |                 ret
3d420                 | 
3d420                 | hub_port_handler
3d420     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3d424     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d428     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d42c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d430     55 02 A0 FD |                 call    #control_read
3d434     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d438                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d438                 | 
3d438     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3d43c     50 01 90 5D |         if_x0   jmp     #.other
3d440     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3d444     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3d448     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d44c     A0 02 A0 FD |                 call    #control_write
3d450     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3d454     7C 01 90 5D |         if_x0   jmp     #.disconnect
3d458     B1 99 02 F6 |                 mov     hctwait, _100ms_
3d45c     EF 02 A0 FD |                 call    #poll_waitx
3d460                 | 
3d460     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3d464     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3d468     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d46c     A0 02 A0 FD |                 call    #control_write
3d470                 | 
3d470     02 78 07 F6 |                 mov     htmp3, #2
3d474                 | .wait_reset
3d474     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d478     EF 02 A0 FD |                 call    #poll_waitx
3d47c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d480     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d484     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d488     55 02 A0 FD |                 call    #control_read
3d48c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d490     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3d494     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3d498                 | 
3d498     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3d49c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d4a0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d4a4     A0 02 A0 FD |                 call    #control_write
3d4a8                 | 
3d4a8     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3d4ac                 | .wait_recover
3d4ac     A8 99 02 F6 |                 mov     hctwait, _1ms_
3d4b0     EF 02 A0 FD |                 call    #poll_waitx
3d4b4     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3d4b8                 | 
3d4b8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d4bc     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d4c0     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d4c4                 | 
3d4c4     00 08 00 FF 
3d4c8     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d4cc     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d4d0     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d4d4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d4d8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d4dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d4e0     48 01 90 5D |         if_nz   jmp     #.done
3d4e4                 | .get_dev_desc
3d4e4     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d4e8     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d4ec     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d4f0     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d4f4     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d4f8     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3d4fc     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d500     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d504     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d508     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d50c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d510     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d514     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d518     BE 00 A0 FD |                 call    #calc_crc5
3d51c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d520     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d524     F7 AD C2 FA |                 rdbyte  total_data, pb
3d528     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d52c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d530     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d534     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d538     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d53c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d540                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d540     A0 99 02 F6 |                 mov     hctwait, _500us_
3d544     EF 02 A0 FD |                 call    #poll_waitx
3d548     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d54c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d550     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d554     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d558     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d55c     CC 00 90 5D |         if_nz   jmp     #.done
3d560     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d564     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d568     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d56c     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d570     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d574     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d578     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d57c     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d580     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d584     A4 00 90 CD |         if_b    jmp     #.done
3d588     68 F0 BF FD |                 call    #hparse_con_desc
3d58c     9C 00 90 FD |                 jmp     #.done
3d590                 | 
3d590                 | .other
3d590     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d594     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d598     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d59c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d5a0     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d5a4     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d5a8     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d5ac     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d5b0     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d5b4     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d5b8     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d5bc     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d5c0     68 00 90 FD |                 jmp     #.done
3d5c4                 | .reset_feature
3d5c4     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d5c8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d5cc     A0 02 A0 FD |                 call    #control_write
3d5d0     58 00 90 FD |                 jmp     #.done
3d5d4                 | .disconnect
3d5d4                 | 
3d5d4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d5d8     00 72 E3 F8 |                 getbyte htmp
3d5dc     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3d5e0     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d5e4     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d5e8     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d5ec     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d5f0     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d5f4                 |         if EMUPAD_MAX_PLAYER > 0
3d5f4                 |         end
3d5f4                 |         if HAVE_MOUSE
3d5f4     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3d5f8     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d5fc     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d600                 |         end
3d600                 |         if HAVE_HIDPAD
3d600     30 0A F0 FE |                 loc ptrb,#hidpad_report
3d604     2D 73 03 F6 |                 mov htmp,hdev_port
3d608     01 72 E7 F2 |                 cmpsub htmp,#1
3d60c     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d610     B9 F3 03 F1 |                 add ptrb,htmp
3d614     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d618     80 01 6C FC |                 wrlong #0,ptrb
3d61c                 |         end
3d61c                 | 
3d61c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d620     00 00 C4 F8 |                 setbyte #0
3d624     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d628     00 00 04 F6 |                 mov     0-0, #0
3d62c                 | 
3d62c                 | .done
3d62c     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d630     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d634     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d638     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d63c     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d640     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d644                 | 
3d644     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d648     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d64c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d650     55 02 A0 FD |                 call    #control_read
3d654     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d658                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d658     2D 00 64 FD |                 ret
3d65c                 | 
3d65c                 | '------------------------------------------------------------------------------
3d65c                 | ' Partially populated SETUP packets
3d65c                 | '------------------------------------------------------------------------------
3d65c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d65d     06          |                 byte    REQ_GET_DESC
3d65e     00 01       |                 word    TYPE_DEVICE << 8
3d660     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d662     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d664     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d665     06          |                 byte    REQ_GET_DESC
3d666     00 02       |                 word    TYPE_CONFIG << 8
3d668     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d66a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d66c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d66d     09          |                 byte    REQ_SET_CONFIG
3d66e     00 00       |                 word    0       ' Configuration value
3d670     00 00       |                 word    0       ' Zero
3d672     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d674     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d675     05          |                 byte    REQ_SET_ADDR
3d676     00 00       |                 word    0       ' Zero
3d678     00 00       |                 word    0       ' Zero
3d67a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d67c                 | '------------------------------------------------------------------------------
3d67c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d67c                 | ' wValue field dictates which protocol should be used.
3d67c                 | '
3d67c                 | ' When initialized, all devices default to report protocol. However the host
3d67c                 | ' should not make any assumptions about the device state and should set the
3d67c                 | ' desired protocol whenever initializing a device.
3d67c                 | '------------------------------------------------------------------------------
3d67c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d67d     0B          |                 byte    HID_SET_PROTO
3d67e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d680                 |                                                 ' (HID 1.11 Section 7.2.6).
3d680     00 00       |                 word    0               ' Interface index number.
3d682     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d684                 | '------------------------------------------------------------------------------
3d684     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d685     0A          |                 byte    HID_SET_IDLE
3d686     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d688                 |                                         ' reporting until a change is detected in the report data
3d688                 | 
3d688                 |                                         ' (HID 1.11 Section 7.2.4).
3d688     00 00       |                 word    0       ' Interface index number.
3d68a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d68c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d68d     09          |                 byte    HID_SET_REPORT
3d68e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d690                 |                                         ' (HID 1.11 Section 7.2.2).
3d690     00 00       |                 word    0       ' Interface index number.
3d692     00 00       |                 word    0       ' Size of the report, in bytes.
3d694     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d695     06          |                 byte    REQ_GET_DESC
3d696     00 22       |                 word    TYPE_REPORT << 8
3d698     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d69a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d69c                 | '------------------------------------------------------------------------------
3d69c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d69d     06          |                 byte    REQ_GET_DESC
3d69e     00 29       |                 word    TYPE_HUB << 8
3d6a0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d6a2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d6a4     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d6a5     03          |                 byte    REQ_SET_FEATURE
3d6a6     00 00       |                 word    0       ' port power
3d6a8     01 00       |                 word    1       ' Port index number (1+)
3d6aa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d6ac     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d6ad     01          |                 byte    REQ_CLEAR_FEATURE
3d6ae     00 00       |                 word    0       ' port power
3d6b0     01 00       |                 word    1       ' Port index number (1+)
3d6b2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d6b4     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d6b5     00          |                 byte    REQ_GET_STATUS
3d6b6     00 00       |                 word    0
3d6b8     01 00       |                 word    1       ' Port index number (1+)
3d6ba     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d6bc                 | '------------------------------------------------------------------------------
3d6bc                 | if _HAVE_GAMEPAD
3d6bc     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d6c0                 | ps3_command_buff
3d6c0     00 00 00 00 
3d6c4     00          |                 byte    $00, $00, $00, $00, $00
3d6c5     00 00 00 00 
3d6c9     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d6ca     FF 27 10 00 
3d6ce     32          |                 byte    $FF, $27, $10, $00, $32
3d6cf     FF 27 10 00 
3d6d3     32          |                 byte    $FF, $27, $10, $00, $32
3d6d4     FF 27 10 00 
3d6d8     32          |                 byte    $FF, $27, $10, $00, $32
3d6d9     FF 27 10 00 
3d6dd     32          |                 byte    $FF, $27, $10, $00, $32
3d6de     00 00 00 00 
3d6e2     00          |                 byte    $00, $00, $00, $00, $00
3d6e3     00 00 00 00 
3d6e7     00          |                 byte    $00, $00, $00, $00, $00
3d6e8     00 00 00 00 
3d6ec     00          |                 byte    $00, $00, $00, $00, $00
3d6ed     00 00 00    |                 byte    $00, $00, $00
3d6f0                 | '------------------------------------------------------------------------------
3d6f0     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d6f3                 |                                         ' 0x01 All blinking
3d6f3                 |                                         ' 0x02 1 flashes, then on
3d6f3                 |                                         ' 0x03 2 flashes, then on
3d6f3                 |                                         ' 0x04 3 flashes, then on
3d6f3                 |                                         ' 0x05 4 flashes, then on
3d6f3                 |                                         ' 0x06 1 on
3d6f3                 |                                         ' 0x07 2 on
3d6f3                 |                                         ' 0x08 3 on
3d6f3                 |                                         ' 0x09 4 on
3d6f3                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d6f3                 |                                         ' 0x0B Blinking*
3d6f3                 |                                         ' 0x0C Slow blinking*
3d6f3                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d6f3     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d6f6     00          |                 byte    $00             ' Left rumble
3d6f7     00          |                 byte    $00             ' Right rumble
3d6f8     00 00 00    |                 byte    $00, $00, $00
3d6fb                 | 
3d6fb                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3d6fb                 |                 '' of certain wired 8bitdo gamepads.
3d6fb     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d6fc     06          |                 byte    REQ_GET_DESC
3d6fd     04 03       |                 word    TYPE_STRING << 8 + 4
3d6ff     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3d701     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3d703     00          | end
3d704                 | alignl
3d704                 | 
3d704                 | if HAVE_MOUSE
3d704     00 00 00 00 
3d708     00 00 00 00 | mouse_limits long 0[2]
3d70c     00 00 00 00 | mouse_outptr long 0
3d710                 | end
3d710                 | 
3d710                 | if KEYQUEUE_SIZE > 0
3d710     00          | keyq_head byte 0
3d711     00          | keyq_tail byte 0
3d712     00 00 00 00 
      ...             
3d90e     00 00 00 00 
3d912     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3d914                 | alignl
3d914                 | end
3d914                 | 
3d914                 | if EMUPAD_MAX_PLAYER > 0
3d914                 | emupad_rule_buffer
3d914                 | if EMUPAD_BUILTIN_RULES
3d914                 | file "padmap_builtin.dat"
3d914                 | end
3d914                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3d914                 | '' Default rule directly follows!
3d914                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3d914                 | end
3d914                 | 
3d914                 | '------------------------------------------------------------------------------
3d914                 | ' The USB data cache area gets zero-filled at every device disconnect
3d914                 | '------------------------------------------------------------------------------
3d914                 | usb_cache_start
3d914                 | 
3d914                 | ' HID descriptor and report buffers
3d914                 | if !!OVERLAP_MEMORY
3d914     00 00 00 00 
      ...             
3e00c     00 00 00 00 
3e010     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3e014                 | end
3e014     00 00 00 00 
3e018     00 00 00 00 | hkbd_report     byte    0[8]
3e01c     00 00 00 00 | hkbd_led_rep    byte    0
3e020                 | alignl
3e020                 | 
3e020     00 00 00 00 
3e024     00 00 00 00 
3e028     00 00 00 00 
3e02c     00 00 00 00 
3e030     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3e034                 | 
3e034                 | if HAVE_HIDPAD
3e034     00 00 00 00 
      ...             
3e10c     00 00 00 00 
3e110     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3e114                 | end
3e114                 | 
3e114                 | ' HUB descriptor
3e114     00          | hub_descr       byte    0   ' bDescLength
3e115     00          |                 byte    0   ' bDescriptorType
3e116     00          |                 byte    0   ' bNbrPorts
3e117     00 00       |                 word    0   ' wHubCharacteristics
3e119     00          |                 byte    0   ' bPwrOn2PwrGood
3e11a     00          |                 byte    0   ' bHubContrCurrent
3e11b     00          |                 byte    0   ' DeviceRemoveable
3e11c     00          |                 byte    0   ' PortPwrCtrlMask
3e11d                 | 
3e11d                 | usb_cache_end
3e11d                 | 
3e11d                 | if HAVE_MOUSE
3e11d     00 00 00 00 | mouse_xacc      long 0
3e121     00 00 00 00 | mouse_yacc      long 0
3e125     00 00 00 00 | mouse_zacc      long 0
3e129     00          | mouse_bstate    byte 0
3e12a     00          | mouse_lpending  byte 0
3e12b     00          | mouse_rpending  byte 0
3e12c     00          | mouse_mpending  byte 0
3e12d     00          | mouse_lock      byte 0
3e12e     00 00 00    |                 byte 0[3] ' padding
3e131                 | end
3e131                 | 
3e131     00 00 00 00 
      ...             
3e1a9     00 00 00 00 
3e1ad     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3e1b1     00 00 00 00 
3e1b5     00 00 00 00 
3e1b9     00 00 00 00 
3e1bd     00 00 00 00 
3e1c1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3e1c3     00 00 00 00 
      ...             
3e2bb     00 00 00 00 
3e2bf     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3e2c3                 | 
3e2c3     00          | driver_cog      byte    0                       ' Current driver cog + 1
3e2c4                 | 	alignl
3e2c4                 | _Audio2_004_spin2_dat_
3e2c4                 | 
3e2c4                 | audio       	org     0
3e2c4                 | 
3e2c4     61 6F 05 FB |             	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
3e2c8     61 A7 05 FB |             	rdlong  scbase, ptra++       	' get start address of scope buffer
3e2cc     61 B3 05 FB |             	rdlong  hubptr, ptra++       	' get start address of PSRAM cache
3e2d0                 | 
3e2d0     01 EC 63 FD |             	cogid   pa                   	' compute cogid
3e2d4     0C EC 07 FA |             	mul     pa, #12              	' and mailbox spacing
3e2d8     F6 6F 01 F1 |             	add     mailbox2, pa         	' add offset to find this COG's mailbox
3e2dc     B7 6C 01 F6 |             	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram
3e2e0                 | 
3e2e0     0E B0 05 FC |             	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
3e2e4     0E B4 15 FC |             	wxpin   sr44100,#left      	' 30*256
3e2e8     0F B0 05 FC |             	wrpin   dac2,#right
3e2ec     0F B4 15 FC |             	wxpin   sr44100,#right    
3e2f0     41 9C 64 FD |             	dirh    #left addpins 1
3e2f4     20 9C 64 FD |             	setse1  #%001<<6 + left      	' Set the event - DAC empty
3e2f8                 |  
3e2f8                 |             
3e2f8                 | '---------------------------------------------------------------------------------        
3e2f8                 | '----------------- The main loop -------------------------------------------------
3e2f8                 | '---------------------------------------------------------------------------------
3e2f8                 | 
3e2f8     0F 9E 05 F6 | loop       	mov 	    cn,#15 '7
3e2fc                 |               					'   waitx ##3300000  		'for debug
3e2fc                 |             
3e2fc                 | '----------------------------------------------------------------------------------
3e2fc                 | '------------- Get parameters and execute commands if any -------------------------
3e2fc                 | '----------------------------------------------------------------------------------
3e2fc                 | 
3e2fc                 | 
3e2fc     CF 66 01 F6 | p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
3e300     06 66 65 F0 |             	shl     channeladd,#6
3e304     B3 F0 03 F1 |             	add     ptra,channeladd
3e308                 | 
3e308     28 1A 64 FD |             	setq    #13                       	' read parameters
3e30c     00 75 05 FB |             	rdlong  pointer0,ptra
3e310     1F 88 1D F4 | p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
3e314     2C 00 90 3D |     	if_nc   jmp     #p404                     	' if not set, proceed
3e318     C4 68 01 F6 |             	mov     qq,command0             	' get the new rate
3e31c     4E 68 15 FC |             	wxpin   qq,#left addpins 1        	' and program the pins
3e320     B4 68 E1 F8 |             	getbyte qq,qq,#0 		      	' check if the rate is n*256
3e324     00 68 0D F2 |             	cmp     qq,#0 wz                         
3e328     4E B0 05 AC |     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3e32c     4E AE 05 5C |     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3e330                 |                 
3e330     1E 7E 1D F4 |                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e334     00 74 05 A6 |     	if_z    mov     pointer0, #0  
3e338     00 76 05 A6 |     	if_z    mov     pointer0h, #0  
3e33c     00 7C 05 A6 |     	if_z    mov     envph0, #0  
3e340     05 7F 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e344                 |     	
3e344     BF 68 01 F6 | p404        	mov     qq,sstart0		     	' check if start>$80000
3e348     FF FF 03 FF 
3e34c     FF 69 05 F5 | 		and 	qq,##$7FFFFFF 
3e350     00 04 00 FF 
3e354     00 68 1D F2 |                 cmp 	qq,##$80000 wcz
3e358     B7 6C 01 36 |     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
3e35c     00 6C 05 C6 |     	if_lt   mov     mailbox,#0                	' if not, use HUB 
3e360                 | 
3e360     C2 9A 39 F9 | p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
3e364     C2 98 31 F9 |     	    	getword avol0,volpan0,#0
3e368                 |     	    	
3e368                 | '----------------------------------------------------------------------------------
3e368                 | '------------- Compute the envelope, if exists ------------------------------------
3e368                 | '----------------------------------------------------------------------------------
3e368                 |             
3e368     00 8A 1D F2 |             	cmp     envptr0,#0 wcz     		' read the pointer
3e36c     20 00 00 AF 
3e370     00 E6 05 A6 |     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
3e374     54 00 90 AD |     	if_z    jmp     #p410				' and run away	
3e378                 | 
3e378     C6 7C 01 F1 |            	add     envph0,envspd0			' envelope PA update
3e37c                 |            	           
3e37c     BE E2 01 F6 |       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
3e380     06 E2 45 F0 | 		shr     envhi,#6			' leave 10 bits in hi
3e384     F1 E4 31 F9 | 	   	getword envlo,envhi,#0              	' and 16 bit in lo
3e388     10 E2 45 F0 | 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
3e38c     C7 E2 19 F2 | 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
3e390                 | 	    											'debug(udec(envhi,envlen0))
3e390     C7 E2 01 36 |     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
3e394     00 E4 05 36 |     	if_ge   mov     envlo,#0
3e398     C7 7C 01 36 |     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
3e39c     16 7C 65 30 |     	if_ge   shl     envph0,#22
3e3a0                 | 
3e3a0     F1 E6 01 F6 |             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
3e3a4     01 E6 65 F0 |             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
3e3a8     C5 E6 01 F1 |             	add 	envs1,envptr0                   ' and add it to the pointer
3e3ac     F3 E6 01 FB |             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
3e3b0     F3 E8 39 F9 |             	getword envs2,envs1,#1			' then separate them		
3e3b4     F3 E6 31 F9 |            	getword envs1,envs1,#0
3e3b8     F2 E8 01 FA |             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
3e3bc     F2 E4 21 F6 |             	not     envlo
3e3c0     F2 E6 01 FA |             	mul     envs1,envlo
3e3c4     F4 E6 01 F1 |             	add     envs1,envs2
3e3c8     12 E6 45 F0 |             	shr     envs1,#18			' we need only 14 bits for scas
3e3cc                 |               
3e3cc                 | '----------------------------------------------------------------------------------
3e3cc                 | '------------- Generate the noise if bit 27 of the pointer is set -----------------
3e3cc                 | '----------------------------------------------------------------------------------
3e3cc                 | 
3e3cc                 | 
3e3cc                 |     	
3e3cc                 | '----------------------------------------------------------------------------------
3e3cc                 | '------------- Get the sample -----------------------------------------------------
3e3cc                 | '----------------------------------------------------------------------------------    	
3e3cc                 |  
3e3cc     BB 9C 01 F6 | p410  		mov	oldptrh,pointer0h
3e3d0     C3 96 F9 F8 |            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
3e3d4     08 86 65 F0 |            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
3e3d8     C3 74 19 F1 |            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
3e3dc     CB 76 21 F1 |            	addx	pointer0h,afreq0  
3e3e0                 |           	
3e3e0     1B 7E 0D F4 |    	   	testb   sstart0, #27 wz
3e3e4     10 00 90 5D |     	if_nz	jmp #p412   	
3e3e8     1B 6A 61 CD |    	if_c  	getrnd  spl
3e3ec     B5 7A 41 C9 |    	if_c	rolword rawspl0,spl,#0	
3e3f0     BD 6A 31 F9 |    		getword spl,rawspl0,#0
3e3f4     88 00 90 FD |       	        jmp     #p406          	
3e3f8                 |            	
3e3f8                 |            	
3e3f8     CE 76 19 F2 | p412 		cmp	pointer0h,oldptrh wcz
3e3fc     50 00 90 AD |  	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
3e400                 |      	
3e400     1F 7E 0D F4 |             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
3e404     01 76 65 A0 |      	if_z    shl     pointer0h,#1        
3e408     1C 7E 0D F4 |             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
3e40c     01 76 65 A0 |      	if_z    shl     pointer0h,#1        
3e410                 | 												
3e410     C1 76 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e414     C1 76 81 31 |    	if_ge   sub     pointer0h,lend0       
3e418     C0 76 01 31 |         if_ge   add     pointer0h,lstart0
3e41c     C1 76 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e420     C1 76 01 36 |         if_ge   mov	pointer0h,lend0	
3e424                 |  
3e424     BB 68 01 F6 |              	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
3e428     BF 68 01 F1 |            	add     qq,sstart0            
3e42c     FF 6D 5D F2 |            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3e430     B4 6A E1 EA |     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
3e434     F8 00 B0 1D |     	if_gt   call    #cache_read
3e438     1F 7E 0D F4 |                 testb   sstart0,#31 wz 
3e43c     08 6A 65 50 |     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
3e440     01 76 45 A0 |         if_z    shr     pointer0h,#1
3e444     1C 7E 0D F4 |                 testb   sstart0,#28 wz            
3e448     01 76 45 A0 |     	if_z    shr     pointer0h,#1    
3e44c     B5 7A 41 F9 |                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
3e450                 |               
3e450     BD 6A 31 F9 | p411	      	getword spl,rawspl0,#0
3e454     BD 94 39 F9 | 		getword oldspl,rawspl0,#1		' then separate them		
3e458                 | 
3e458                 |          '    debug(uhex(pointer0h,pointer0,spl,oldspl))
3e458                 | 
3e458                 | 
3e458     BA E4 01 F6 | 		mov	envlo,pointer0
3e45c     12 E4 45 F0 | 		shr 	envlo,#18
3e460                 | 	
3e460     F2 6A 31 FA |             	scas    spl,envlo                   	' and do linear interpolation
3e464     00 6A 01 F6 |             	mov 	spl,0-0
3e468     F2 E4 21 F6 |             	not     envlo
3e46c     1F 00 00 FF 
3e470     FF E5 05 F5 |           	and     envlo,##$3FFF
3e474     F2 94 31 FA |            	scas    oldspl,envlo
3e478     00 94 01 F6 |             	mov     oldspl,0-0
3e47c     CA 6A 01 F1 |                 add     spl, oldspl
3e480                 | 	 
3e480     F3 6A 31 FA | p406        	scas    spl, envs1
3e484     00 6A 01 F6 |             	mov     spl,0-0
3e488     CC 6A 31 FA |             	scas    spl,avol0                 	' apply volume
3e48c     00 6A 01 F6 |             	mov     spl,0-0
3e490                 |  
3e490     CD 6A 31 FA |             	scas    spl,apan0                 	' apply pan
3e494     00 A0 01 F6 |             	mov     ls0,0-0
3e498     20 00 00 FF 
3e49c     00 68 05 F6 |             	mov     qq,##16384
3e4a0     CD 68 81 F1 |             	sub     qq,apan0
3e4a4     B4 6A 31 FA |             	scas    spl,qq
3e4a8     00 A2 01 F6 |             	mov     rs0, 0-0
3e4ac                 |       
3e4ac     D1 78 29 F9 |                 setword sample0,rs0,#1           	' pack samples into long
3e4b0     D0 78 21 F9 |                 setword sample0,ls0,#0
3e4b4                 |                 
3e4b4     D0 70 01 F1 |                 add  lsample,ls0
3e4b8     D1 72 01 F1 |                 add  rsample,rs0
3e4bc                 |              
3e4bc     1E 7E 1D F4 |             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e4c0     00 74 05 A6 |     	if_z    mov     pointer0, #0  
3e4c4     00 76 05 A6 |     	if_z    mov     pointer0h, #0  
3e4c8     00 7C 05 A6 |     	if_z    mov     envph0, #0  
3e4cc     05 7F 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e4d0                 |             
3e4d0     28 08 64 FD | p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
3e4d4     00 75 65 FC | 	       	wrlong  pointer0,ptra
3e4d8     B3 F0 83 F1 |             	sub     ptra, channeladd         	' reset the pointer to channel parameters
3e4dc                 | 
3e4dc     87 9F 7D FB |             	djnf    cn, #p401
3e4e0                 | 
3e4e0     0F 72 E5 F4 |             	bitnot rsample, #15
3e4e4     0F 70 E5 F4 |             	bitnot lsample, #15
3e4e8                 |   							'           	getct ct2  	'debug
3e4e8                 |   							'          	sub ct2,ct1
3e4e8                 |   							'          	debug(udec(ct2))
3e4e8     24 28 60 FD |             	waitse1
3e4ec                 |           
3e4ec     0E 70 25 FC |            	wypin   lsample, #left              
3e4f0     0F 72 25 FC |                 wypin   rsample, #right        
3e4f4                 | 
3e4f4     B8 A4 21 F9 | 		setword oldsample, lsample,#0		' for oscilloscope
3e4f8     B9 A4 29 F9 | 		setword oldsample, rsample,#1
3e4fc                 | 		
3e4fc     00 72 05 F6 |             	mov rsample, #0
3e500     00 70 05 F6 |             	mov lsample, #0
3e504                 | 
3e504                 | '----------------------------------------------------------------------------------
3e504                 | '------------- Oscilloscope  -----------------------------------------------------
3e504                 | '----------------------------------------------------------------------------------   
3e504                 | 		
3e504     00 A6 0D F2 | 	    	cmp     scbase,#0 wz
3e508     20 00 90 AD |     	if_z    jmp #p302	   
3e50c                 |  
3e50c     01 AC 15 F7 |             	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
3e510     D4 AA 01 C6 |     	if_c    mov scptr2,scptr
3e514     02 AA 65 C0 |     	if_c    shl scptr2,#2
3e518     D3 AA 01 C1 |     	if_c    add scptr2,scbase     
3e51c     60 AA 65 FC |             	wrlong scptr2,#$60
3e520     D5 A4 61 CC |     	if_c    wrlong oldsample,scptr2
3e524     01 00 00 CF 
3e528     7F A8 05 C7 |     	if_c    incmod scptr,##639
3e52c                 |             
3e52c     C8 FD 9F FD |  p302           jmp     #loop            'loop
3e530                 | 
3e530                 | '----------------------------------------------------------------------------------
3e530                 | '------------- This is the end of the main loop -----------------------------------
3e530                 | '----------------------------------------------------------------------------------
3e530                 | 
3e530                 | '----------------------------------------------------------------------------------
3e530                 | '------------- PSRAM cache ----------- --------------------------------------------
3e530                 | '----------------------------------------------------------------------------------
3e530                 | 
3e530                 | ' There are 16 cache pointers for 16 channels
3e530                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e530                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e530                 | 
3e530                 | 
3e530     B4 DC E1 F8 | cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
3e534                 |             
3e534     B4 DE 01 F6 | 	   	mov     addrhi,qq		
3e538     08 DE 45 F0 | 	    	shr     addrhi,#8		        ' get 24 upper bits
3e53c     DB 9E 95 F9 | 	    	alts    cn,#cache1            
3e540     00 DE 09 F2 | 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
3e544     34 00 90 AD |     	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
3e548                 | 	
3e548     DB 9E 8D F9 | p702	    	altd    cn,#cache1			' cache miss. 
3e54c     EF 00 00 F6 | 	    	mov     0-0,addrhi                  	' update the pointer
3e550     EF D6 01 F6 | 	    	mov     cmd,addrhi			' prepare the mailbox
3e554     08 D6 65 F0 | 	    	shl     cmd,#8
3e558     0B D6 3D F8 |             	setnib  cmd, #%1011, #7             	' read burst from the external memory
3e55c     CF D8 01 F6 |             	mov     hubaddr,cn                  	' to the channel cache
3e560     08 D8 65 F0 |             	shl     hubaddr,#8                  	'
3e564     D9 D8 01 F1 |             	add     hubaddr,hubptr 
3e568     00 DB 05 F6 |             	mov     count,#256                  	' 256 bytes
3e56c     28 04 64 FD |             	setq    #2                          	' write 3 longs
3e570     B6 D6 61 FC |             	wrlong  cmd, mailbox                	' run it
3e574     B6 D6 01 FB | poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
3e578     FE D7 B5 FB |             	tjs     cmd, #poll1                 	' retry until valid 
3e57c                 |             
3e57c                 | 	
3e57c     CF 68 01 F6 | p701	    	mov     qq,cn				' cache hit
3e580     08 68 65 F0 | 	    	shl     qq,#8				' compute the cache start
3e584     D9 68 01 F1 | 	    	add     qq,hubptr
3e588     EE 68 01 F1 | 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
3e58c     B4 6A E1 0A |     	_ret_   rdword  spl,qq                      	' read a long from the cache
3e590                 |           
3e590                 |   
3e590                 | 
3e590                 | 
3e590                 | '---------------------------------------------------------------------------
3e590                 | '------- Variables ---------------------------------------------------------
3e590                 | '---------------------------------------------------------------------------
3e590                 | 
3e590                 | ' constants
3e590                 | 
3e590     00 00 00 00 | channeladd 	long 0
3e594                 | 
3e594                 | ' temporary variables 
3e594                 | 
3e594     00 00 00 00 | qq          	long 0
3e598     00 00 00 00 | spl         	long 0
3e59c     00 00 00 00 | mailbox     	long 0
3e5a0     00 00 00 00 | mailbox2    	long 0
3e5a4     00 00 00 00 | lsample     	long 0
3e5a8     00 00 00 00 | rsample     	long 0
3e5ac                 | 
3e5ac                 | ' channel parameter block
3e5ac                 | 
3e5ac     00 00 00 00 | pointer0    	long 0   
3e5b0     00 00 00 00 | pointer0h   	long 0  
3e5b4     00 00 00 00 | sample0     	long 0
3e5b8     00 00 00 00 | rawspl0	    	long 0
3e5bc     00 00 00 00 | envph0	    	long 0
3e5c0     00 00 00 00 | sstart0     	long 0     ' start pointer and type at bit 31
3e5c4     00 00 00 00 | lstart0     	long 0
3e5c8     00 00 00 00 | lend0       	long 0
3e5cc     00 00 00 00 | volpan0     	long 0
3e5d0     00 00 00 00 | freqskip0   	long 0
3e5d4     00 00 00 00 | command0    	long 0
3e5d8     00 00 00 00 | envptr0	    	long 0
3e5dc     00 00 00 00 | envspd0	    	long 0
3e5e0     00 00 00 00 | envlen0	    	long 0
3e5e4     00 00 00 00 | res5	    	long 0
3e5e8     00 00 00 00 | res6	    	long 0
3e5ec                 | 
3e5ec     00 00 00 00 | oldspl		long 0
3e5f0     00 00 00 00 | afreq0      	long 0
3e5f4                 | 
3e5f4     00 00 00 00 | avol0       	long 0
3e5f8     00 00 00 00 | apan0       	long 0
3e5fc     00 00 00 00 | oldptrh	    	long 0
3e600     00 00 00 00 | cn          	long 0
3e604                 | 
3e604                 | ' Samples
3e604                 | 
3e604     00 00 00 00 | ls0         	long 0
3e608     00 00 00 00 | rs0         	long 0
3e60c                 | 
3e60c     00 00 00 00 | oldsample   	long 0
3e610                 | 
3e610     00 00 00 00 | scbase 		long 0
3e614     00 00 00 00 | scptr 		long 0
3e618     00 00 00 00 | scptr2		long 0
3e61c     00 00 00 00 | scope 		long 0
3e620                 | 
3e620     44 00 17 00 | dac         	long %10111_00000000_01_00010_0     	'random dither
3e624     46 00 17 00 | dac2        	long %10111_00000000_01_00011_0     	'pwm
3e628                 | 
3e628     00 18 07 00 | hubptr      	long $71800
3e62c     00 1E 00 00 | sr44100     	long 30*256
3e630                 | 
3e630     00 00 00 00 | cache1      	long 0
3e634     00 00 00 00 | cache2      	long 0
3e638     00 00 00 00 | cache3      	long 0
3e63c     00 00 00 00 | cache4      	long 0
3e640     00 00 00 00 | cache5      	long 0
3e644     00 00 00 00 | cache6      	long 0
3e648     00 00 00 00 | cache7      	long 0
3e64c     00 00 00 00 | cache8      	long 0
3e650     00 00 00 00 | cache9      	long 0
3e654     00 00 00 00 | cachea      	long 0
3e658     00 00 00 00 | cacheb      	long 0
3e65c     00 00 00 00 | cachec      	long 0
3e660     00 00 00 00 | cached      	long 0
3e664     00 00 00 00 | cachee      	long 0
3e668     00 00 00 00 | cachef      	long 0
3e66c     00 00 00 00 | cache0      	long 0
3e670                 | 
3e670     00 00 00 00 | cmd         	long 0
3e674     00 00 00 00 | hubaddr    	long 0
3e678     00 01 00 00 | count       	long 256
3e67c                 | 
3e67c     00 00 00 00 | addrlo 		long 0
3e680     00 00 00 00 | addrhi 		long 0
3e684     00 00 00 00 | pointer00 	long 0
3e688     00 00 00 00 | envhi 		long 0
3e68c     00 00 00 00 | envlo 		long 0
3e690     00 00 00 00 | envs1 		long 0
3e694     00 00 00 00 | envs2 		long 0
3e698     00 00 00 00 | noise0 		long 0
3e69c                 | 
3e69c                 | 'ct1 		long 0
3e69c                 | 'ct2 		long 0
3e69c                 | 
3e69c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e69c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e69c     00 00 00 00 
3e6a0     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e6a4                 | 	alignl
3e6a4                 | __system__dat_
3e6a4     00 00 00 00 
3e6a8     00 00 00 00 | 	byte	$00[8]
3e6ac     03 00 00 00 
3e6b0     00 00 00 00 
3e6b4     00 00 00 00 
3e6b8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e6bc     00 00 00 00 
      ...             
3e948     00 00 00 00 
3e94c     00 00 00 00 | 	byte	$00[660]
3e950     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3e954     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3e958     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3e95c     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3e960     00 00 00 00 
      ...             
3e97c     00 00 00 00 
3e980     00 00 00 00 | 	byte	$00[36]
3e984     EC E9 03 00 | 	long	@@@__system__dat_ + 840
3e988     EF E9 03 00 | 	long	@@@__system__dat_ + 843
3e98c     10 EA 03 00 | 	long	@@@__system__dat_ + 876
3e990     29 EA 03 00 | 	long	@@@__system__dat_ + 901
3e994     44 EA 03 00 | 	long	@@@__system__dat_ + 928
3e998     5E EA 03 00 | 	long	@@@__system__dat_ + 954
3e99c     6E EA 03 00 | 	long	@@@__system__dat_ + 970
3e9a0     80 EA 03 00 | 	long	@@@__system__dat_ + 988
3e9a4     92 EA 03 00 | 	long	@@@__system__dat_ + 1006
3e9a8     A4 EA 03 00 | 	long	@@@__system__dat_ + 1024
3e9ac     B0 EA 03 00 | 	long	@@@__system__dat_ + 1036
3e9b0     C1 EA 03 00 | 	long	@@@__system__dat_ + 1053
3e9b4     D5 EA 03 00 | 	long	@@@__system__dat_ + 1073
3e9b8     DF EA 03 00 | 	long	@@@__system__dat_ + 1083
3e9bc     EF EA 03 00 | 	long	@@@__system__dat_ + 1099
3e9c0     FE EA 03 00 | 	long	@@@__system__dat_ + 1114
3e9c4     14 EB 03 00 | 	long	@@@__system__dat_ + 1136
3e9c8     2D EB 03 00 | 	long	@@@__system__dat_ + 1161
3e9cc     41 EB 03 00 | 	long	@@@__system__dat_ + 1181
3e9d0     4F EB 03 00 | 	long	@@@__system__dat_ + 1195
3e9d4     63 EB 03 00 | 	long	@@@__system__dat_ + 1215
3e9d8     6F EB 03 00 | 	long	@@@__system__dat_ + 1227
3e9dc     81 EB 03 00 | 	long	@@@__system__dat_ + 1245
3e9e0     99 EB 03 00 | 	long	@@@__system__dat_ + 1269
3e9e4     AB EB 03 00 | 	long	@@@__system__dat_ + 1287
3e9e8     BE EB 03 00 | 	long	@@@__system__dat_ + 1306
3e9ec     4F 4B 00 4E 
3e9f0     75 6D 65 72 
3e9f4     69 63 61 6C 
3e9f8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3e9fc     75 6D 65 6E 
3ea00     74 20 6F 75 
3ea04     74 20 6F 66 
3ea08     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3ea0c     61 69 6E 00 
3ea10     52 65 73 75 
3ea14     6C 74 20 6E 
3ea18     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ea1c     65 70 72 65 
3ea20     73 65 6E 74 
3ea24     61 62 6C 65 
3ea28     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ea2c     65 67 61 6C 
3ea30     20 6D 75 6C 
3ea34     74 69 62 79 
3ea38     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ea3c     65 71 75 65 
3ea40     6E 63 65 00 
3ea44     4E 6F 20 73 
3ea48     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ea4c     66 69 6C 65 
3ea50     20 6F 72 20 
3ea54     64 69 72 65 
3ea58     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ea5c     79 00 42 61 
3ea60     64 20 66 69 
3ea64     6C 65 20 6E 
3ea68     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ea6c     72 00 50 65 
3ea70     72 6D 69 73 
3ea74     73 69 6F 6E 
3ea78     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ea7c     69 65 64 00 
3ea80     4E 6F 74 20 
3ea84     65 6E 6F 75 
3ea88     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ea8c     65 6D 6F 72 
3ea90     79 00 54 65 
3ea94     6D 70 6F 72 
3ea98     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ea9c     66 61 69 6C 
3eaa0     75 72 65 00 
3eaa4     46 69 6C 65 
3eaa8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3eaac     73 74 73 00 
3eab0     49 6E 76 61 
3eab4     6C 69 64 20 
3eab8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3eabc     6D 65 6E 74 
3eac0     00 54 6F 6F 
3eac4     20 6D 61 6E 
3eac8     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3eacc     65 6E 20 66 
3ead0     69 6C 65 73 
3ead4     00 49 2F 4F 
3ead8     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3eadc     6F 72 00 4E 
3eae0     6F 74 20 61 
3eae4     20 64 69 72 
3eae8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3eaec     72 79 00 49 
3eaf0     73 20 61 20 
3eaf4     64 69 72 65 
3eaf8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3eafc     79 00 52 65 
3eb00     61 64 20 6F 
3eb04     6E 6C 79 20 
3eb08     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3eb0c     20 73 79 73 
3eb10     74 65 6D 00 
3eb14     46 75 6E 63 
3eb18     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3eb1c     20 6E 6F 74 
3eb20     20 69 6D 70 
3eb24     6C 65 6D 65 
3eb28     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3eb2c     00 44 69 72 
3eb30     65 63 74 6F 
3eb34     72 79 20 6E 
3eb38     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3eb3c     6D 70 74 79 
3eb40     00 4E 61 6D 
3eb44     65 20 74 6F 
3eb48     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3eb4c     6E 67 00 44 
3eb50     65 76 69 63 
3eb54     65 20 6E 6F 
3eb58     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3eb5c     65 6B 61 62 
3eb60     6C 65 00 42 
3eb64     61 64 20 61 
3eb68     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3eb6c     73 73 00 42 
3eb70     72 6F 6B 65 
3eb74     6E 20 63 6F 
3eb78     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3eb7c     74 69 6F 6E 
3eb80     00 44 65 76 
3eb84     69 63 65 20 
3eb88     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3eb8c     65 73 6F 75 
3eb90     72 63 65 20 
3eb94     62 75 73 79 
3eb98     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3eb9c     73 73 20 64 
3eba0     65 76 69 63 
3eba4     65 20 6C 69 
3eba8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ebac     6F 20 73 70 
3ebb0     61 63 65 20 
3ebb4     6F 6E 20 64 
3ebb8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ebbc     65 00 55 6E 
3ebc0     6B 6E 6F 77 
3ebc4     6E 20 65 72 
3ebc8     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ebcc     00 00 00 00 
3ebd0     00 00 00 00 
3ebd4     00 00 00 00 | 	byte	$00[12]
3ebd8     01 80 00 00 
3ebdc     00 00 00 00 
3ebe0     00 00 00 00 
3ebe4     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebe8     00 00 00 00 | 	byte	$00, $00, $00, $00
3ebec     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ebf0     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ebf4     00 00 00 00 | 	byte	$00, $00, $00, $00
3ebf8     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ebfc     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ec00     00 00 00 00 
3ec04     00 00 00 00 | 	byte	$00[8]
3ec08     01 00 00 00 
3ec0c     02 80 00 00 
3ec10     00 00 00 00 
3ec14     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec18     00 00 00 00 
3ec1c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ec20     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ec24     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ec28     00 00 00 00 | 	byte	$00, $00, $00, $00
3ec2c     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ec30     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ec34     00 00 00 00 
3ec38     00 00 00 00 | 	byte	$00[8]
3ec3c     01 00 00 00 
3ec40     02 80 00 00 
3ec44     00 00 00 00 
3ec48     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec4c     00 00 00 00 
3ec50     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ec54     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ec58     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ec5c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ec60     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ec64     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ec68     00 00 00 00 
      ...             
3edd8     00 00 00 00 
3eddc     00 00 00 00 | 	byte	$00[376]
3ede0     E4 ED 03 00 | 	long	@@@__system__dat_ + 1856
3ede4     00 00 00 00 
3ede8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3edec                 | 	alignl
3edec                 | _fatfs_cc_dat_
3edec     C7 00 FC 00 
3edf0     E9 00 E2 00 
3edf4     E4 00 E0 00 
3edf8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3edfc     EA 00 EB 00 
3ee00     E8 00 EF 00 
3ee04     EE 00 EC 00 
3ee08     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3ee0c     C9 00 E6 00 
3ee10     C6 00 F4 00 
3ee14     F6 00 F2 00 
3ee18     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3ee1c     FF 00 D6 00 
3ee20     DC 00 F8 00 
3ee24     A3 00 D8 00 
3ee28     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3ee2c     E1 00 ED 00 
3ee30     F3 00 FA 00 
3ee34     F1 00 D1 00 
3ee38     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3ee3c     BF 00 AE 00 
3ee40     AC 00 BD 00 
3ee44     BC 00 A1 00 
3ee48     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3ee4c     91 25 92 25 
3ee50     93 25 02 25 
3ee54     24 25 C1 00 
3ee58     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3ee5c     A9 00 63 25 
3ee60     51 25 57 25 
3ee64     5D 25 A2 00 
3ee68     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3ee6c     14 25 34 25 
3ee70     2C 25 1C 25 
3ee74     00 25 3C 25 
3ee78     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3ee7c     5A 25 54 25 
3ee80     69 25 66 25 
3ee84     60 25 50 25 
3ee88     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3ee8c     F0 00 D0 00 
3ee90     CA 00 CB 00 
3ee94     C8 00 31 01 
3ee98     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3ee9c     CF 00 18 25 
3eea0     0C 25 88 25 
3eea4     84 25 A6 00 
3eea8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3eeac     D3 00 DF 00 
3eeb0     D4 00 D2 00 
3eeb4     F5 00 D5 00 
3eeb8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3eebc     DE 00 DA 00 
3eec0     DB 00 D9 00 
3eec4     FD 00 DD 00 
3eec8     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3eecc     AD 00 B1 00 
3eed0     17 20 BE 00 
3eed4     B6 00 A7 00 
3eed8     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3eedc     B0 00 A8 00 
3eee0     B7 00 B9 00 
3eee4     B3 00 B2 00 
3eee8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3eeec     61 00 1A 03 
3eef0     E0 00 17 03 
3eef4     F8 00 07 03 
3eef8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3eefc     78 01 00 01 
3ef00     30 01 32 01 
3ef04     06 01 39 01 
3ef08     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3ef0c     2E 01 79 01 
3ef10     06 01 80 01 
3ef14     4D 00 43 02 
3ef18     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3ef1c     82 01 84 01 
3ef20     84 01 86 01 
3ef24     87 01 87 01 
3ef28     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3ef2c     8B 01 8B 01 
3ef30     8D 01 8E 01 
3ef34     8F 01 90 01 
3ef38     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3ef3c     93 01 94 01 
3ef40     F6 01 96 01 
3ef44     97 01 98 01 
3ef48     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3ef4c     9B 01 9C 01 
3ef50     9D 01 20 02 
3ef54     9F 01 A0 01 
3ef58     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3ef5c     A2 01 A4 01 
3ef60     A4 01 A6 01 
3ef64     A7 01 A7 01 
3ef68     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3ef6c     AB 01 AC 01 
3ef70     AC 01 AE 01 
3ef74     AF 01 AF 01 
3ef78     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3ef7c     B3 01 B3 01 
3ef80     B5 01 B5 01 
3ef84     B7 01 B8 01 
3ef88     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3ef8c     BB 01 BC 01 
3ef90     BC 01 BE 01 
3ef94     F7 01 C0 01 
3ef98     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3ef9c     C3 01 C4 01 
3efa0     C5 01 C4 01 
3efa4     C7 01 C8 01 
3efa8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3efac     CB 01 CA 01 
3efb0     CD 01 10 01 
3efb4     DD 01 01 00 
3efb8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3efbc     12 01 F3 01 
3efc0     03 00 F1 01 
3efc4     F4 01 F4 01 
3efc8     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3efcc     22 02 12 01 
3efd0     3A 02 09 00 
3efd4     65 2C 3B 02 
3efd8     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3efdc     66 2C 3F 02 
3efe0     40 02 41 02 
3efe4     41 02 46 02 
3efe8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3efec     40 00 81 01 
3eff0     86 01 55 02 
3eff4     89 01 8A 01 
3eff8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3effc     5A 02 90 01 
3f000     5C 02 5D 02 
3f004     5E 02 5F 02 
3f008     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3f00c     62 02 94 01 
3f010     64 02 65 02 
3f014     66 02 67 02 
3f018     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3f01c     6A 02 62 2C 
3f020     6C 02 6D 02 
3f024     6E 02 9C 01 
3f028     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3f02c     9D 01 73 02 
3f030     74 02 9F 01 
3f034     76 02 77 02 
3f038     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3f03c     7A 02 7B 02 
3f040     7C 02 64 2C 
3f044     7E 02 7F 02 
3f048     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3f04c     82 02 A9 01 
3f050     84 02 85 02 
3f054     86 02 87 02 
3f058     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3f05c     B1 01 B2 01 
3f060     45 02 8D 02 
3f064     8E 02 8F 02 
3f068     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3f06c     B7 01 7B 03 
3f070     03 00 FD 03 
3f074     FE 03 FF 03 
3f078     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3f07c     86 03 88 03 
3f080     89 03 8A 03 
3f084     B1 03 11 03 
3f088     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3f08c     A3 03 A3 03 
3f090     C4 03 08 03 
3f094     CC 03 03 00 
3f098     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3f09c     8F 03 D8 03 
3f0a0     18 01 F2 03 
3f0a4     0A 00 F9 03 
3f0a8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3f0ac     F5 03 F6 03 
3f0b0     F7 03 F7 03 
3f0b4     F9 03 FA 03 
3f0b8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3f0bc     20 03 50 04 
3f0c0     10 07 60 04 
3f0c4     22 01 8A 04 
3f0c8     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3f0cc     0E 01 CF 04 
3f0d0     01 00 C0 04 
3f0d4     D0 04 44 01 
3f0d8     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3f0dc     00 00 7D 1D 
3f0e0     01 00 63 2C 
3f0e4     00 1E 96 01 
3f0e8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3f0ec     00 1F 08 06 
3f0f0     10 1F 06 06 
3f0f4     20 1F 08 06 
3f0f8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3f0fc     40 1F 06 06 
3f100     51 1F 07 00 
3f104     59 1F 52 1F 
3f108     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3f10c     5D 1F 56 1F 
3f110     5F 1F 60 1F 
3f114     08 06 70 1F 
3f118     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3f11c     BB 1F C8 1F 
3f120     C9 1F CA 1F 
3f124     CB 1F DA 1F 
3f128     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3f12c     F9 1F EA 1F 
3f130     EB 1F FA 1F 
3f134     FB 1F 80 1F 
3f138     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3f13c     08 06 A0 1F 
3f140     08 06 B0 1F 
3f144     04 00 B8 1F 
3f148     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3f14c     BC 1F CC 1F 
3f150     01 00 C3 1F 
3f154     D0 1F 02 06 
3f158     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3f15c     E5 1F 01 00 
3f160     EC 1F F3 1F 
3f164     01 00 FC 1F 
3f168     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3f16c     32 21 70 21 
3f170     10 02 84 21 
3f174     01 00 83 21 
3f178     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3f17c     30 2C 2F 04 
3f180     60 2C 02 01 
3f184     67 2C 06 01 
3f188     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3f18c     80 2C 64 01 
3f190     00 2D 26 08 
3f194     41 FF 1A 03 
3f198     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3f19c     05 07 09 0E 
3f1a0     10 12 14 16 
3f1a4     18 1C 1E 43 
3f1a8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3f1ac     41 41 43 45 
3f1b0     45 45 49 49 
3f1b4     49 41 41 45 
3f1b8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3f1bc     4F 55 55 59 
3f1c0     4F 55 4F 9C 
3f1c4     4F 9E 9F 41 
3f1c8     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3f1cc     A5 A6 A7 A8 
3f1d0     A9 AA AB AC 
3f1d4     AD AE AF B0 
3f1d8     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3f1dc     41 41 41 B8 
3f1e0     B9 BA BB BC 
3f1e4     BD BE BF C0 
3f1e8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3f1ec     C5 41 41 C8 
3f1f0     C9 CA CB CC 
3f1f4     CD CE CF D1 
3f1f8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3f1fc     49 49 49 49 
3f200     D9 DA DB DC 
3f204     DD 49 DF 4F 
3f208     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3f20c     4F E6 E8 E8 
3f210     55 55 55 59 
3f214     59 EE EF F0 
3f218     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3f21c     F5 F6 F7 F8 
3f220     F9 FA FB FC 
3f224     FD FE FF 00 
3f228     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3f22c     00 00 00 00 
3f230     FF FF FF FF 
3f234     1F 00 00 00 
3f238     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3f23c     1F 00 00 00 
3f240     1E 00 00 00 
3f244     1F 00 00 00 
3f248     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3f24c     1F 00 00 00 
3f250     1F 00 00 00 
3f254     1E 00 00 00 
3f258     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3f25c     1E 00 00 00 
3f260     1F 00 00 00 
3f264     00 00 00 00 
3f268     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3f26c     3B 00 00 00 
3f270     5A 00 00 00 
3f274     78 00 00 00 
3f278     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3f27c     B5 00 00 00 
3f280     D4 00 00 00 
3f284     F3 00 00 00 
3f288     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3f28c     30 01 00 00 
3f290     4E 01 00 00 
3f294     6D 01 00 00 
3f298     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3f29c     00 00 00 00 
      ...             
3f2b8     00 00 00 00 
3f2bc     00 00 00 00 | 	byte	$00[36]
3f2c0     DE F2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3f2c4     E2 F2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3f2c8     00 00 00 00 
3f2cc     00 00 00 00 
3f2d0     00 00 00 00 
3f2d4     00 00 00 00 
3f2d8     00 00       | 	byte	$00[18]
3f2da     3F 3F 3F 00 
3f2de     55 43 54 00 
3f2e2     55 43 54 00 
3f2e6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3f2ea     00 00 00 00 
3f2ee     00 00 00    | 	byte	$00[7]
3f2f1     CA 9A 3B 00 
3f2f5     00 00 00 01 
3f2f9     01 01 01 01 
3f2fd     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f301     91 11 11 11 
3f305     11 01 01 01 
3f309     01 01 01 01 
3f30d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f311     01 01 01 01 
3f315     01 01 01    | 	byte	$01[7]
3f318     90 20 20 20 
3f31c     20 20 20 20 
3f320     20 20 20 20 
3f324     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3f328     42 42 42 42 
3f32c     42 42 42 42 
3f330     42 42       | 	byte	$42[10]
3f332     20 20 20 20 
3f336     20 20 20    | 	byte	$20[7]
3f339     44 44 44 44 
3f33d     44 44       | 	byte	$44[6]
3f33f     04 04 04 04 
3f343     04 04 04 04 
3f347     04 04 04 04 
3f34b     04 04 04 04 
3f34f     04 04 04 04 | 	byte	$04[20]
3f353     20 20 20 20 
3f357     20 20       | 	byte	$20[6]
3f359     48 48 48 48 
3f35d     48 48       | 	byte	$48[6]
3f35f     08 08 08 08 
3f363     08 08 08 08 
3f367     08 08 08 08 
3f36b     08 08 08 08 
3f36f     08 08 08 08 | 	byte	$08[20]
3f373     20 20 20 20 
3f377     01 00 00 00 
3f37b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3f37c                 | __methodtable__
3f37c     90 5A 01 00 | 	long	@_do_no_command
3f380     AC E3 01 00 | 	long	@_do_plus
3f384     30 D8 01 00 | 	long	@_do_minus
3f388     F0 E2 01 00 | 	long	@_do_or
3f38c     F4 DC 01 00 | 	long	@_do_mul
3f390     A0 C8 01 00 | 	long	@_do_fdiv
3f394     CC C2 01 00 | 	long	@_do_and
3f398     88 C3 01 00 | 	long	@_do_div
3f39c     70 DB 01 00 | 	long	@_do_mod
3f3a0     7C E8 01 00 | 	long	@_do_shl
3f3a4     38 E9 01 00 | 	long	@_do_shr
3f3a8     2C E7 01 00 | 	long	@_do_power
3f3ac     98 BA 01 00 | 	long	@_do_getvar
3f3b0     D0 82 01 00 | 	long	@_do_push
3f3b4     24 B6 01 00 | 	long	@_do_assign
3f3b8     50 F5 00 00 | 	long	@_do_cls
3f3bc     68 54 01 00 | 	long	@_do_new
3f3c0     74 7B 01 00 | 	long	@_do_plot
3f3c4     F8 16 01 00 | 	long	@_do_draw
3f3c8     7C 7D 01 00 | 	long	@_do_print
3f3cc     38 F3 00 00 | 	long	@_do_circle
3f3d0     00 19 01 00 | 	long	@_do_fcircle
3f3d4     34 E2 00 00 | 	long	@_do_box
3f3d8     8C 21 01 00 | 	long	@_do_frame
3f3dc     9C F7 00 00 | 	long	@_do_color
3f3e0     1C 1F 01 00 | 	long	@_do_for
3f3e4     CC 56 01 00 | 	long	@_do_next
3f3e8     74 43 01 00 | 	long	@_do_list
3f3ec     B4 99 01 00 | 	long	@_do_run
3f3f0     2C 18 01 00 | 	long	@_do_error
3f3f4     78 2D 01 00 | 	long	@_do_fast_goto
3f3f8     68 2E 01 00 | 	long	@_do_find_goto
3f3fc     30 30 01 00 | 	long	@_do_slow_goto
3f400     B0 5A 01 00 | 	long	@_do_nothing
3f404     D8 9D 01 00 | 	long	@_do_save
3f408     CC 45 01 00 | 	long	@_do_load
3f40c     10 73 01 00 | 	long	@_do_pinwrite
3f410     B8 B3 01 00 | 	long	@_do_waitms
3f414     98 B4 01 00 | 	long	@_do_waitvbl
3f418     98 32 01 00 | 	long	@_do_if
3f41c     C4 17 01 00 | 	long	@_do_else
3f420     0C C5 01 00 | 	long	@_do_eq
3f424     F0 C9 01 00 | 	long	@_do_ge
3f428     28 D1 01 00 | 	long	@_do_le
3f42c     8C CD 01 00 | 	long	@_do_gt
3f430     BC D4 01 00 | 	long	@_do_lt
3f434     5C DF 01 00 | 	long	@_do_ne
3f438     30 97 01 00 | 	long	@_do_rnd
3f43c     10 E4 00 00 | 	long	@_do_brun
3f440     74 DE 00 00 | 	long	@_do_beep
3f444     08 10 01 00 | 	long	@_do_dir
3f448     8C 6F 01 00 | 	long	@_do_paper
3f44c     60 36 01 00 | 	long	@_do_ink
3f450     A0 1E 01 00 | 	long	@_do_font
3f454     E8 4E 01 00 | 	long	@_do_mode
3f458     24 53 01 00 | 	long	@_do_mouse
3f45c     10 2C 01 00 | 	long	@_do_gettime
3f460     BC FC 00 00 | 	long	@_do_cursor
3f464     A8 F4 00 00 | 	long	@_do_click
3f468     E0 53 01 00 | 	long	@_do_mousex
3f46c     24 54 01 00 | 	long	@_do_mousey
3f470     58 53 01 00 | 	long	@_do_mousek
3f474     9C 53 01 00 | 	long	@_do_mousew
3f478     8C A8 01 00 | 	long	@_do_sin
3f47c     78 AB 01 00 | 	long	@_do_stick
3f480     78 AE 01 00 | 	long	@_do_strig
3f484     D0 A9 01 00 | 	long	@_do_sprite
3f488     40 0C 01 00 | 	long	@_do_defsprite
3f48c     D8 29 01 00 | 	long	@_do_getpixel
3f490     94 B3 01 00 | 	long	@_do_waitclock
3f494     C0 DA 01 00 | 	long	@_do_negative
3f498     A4 87 01 00 | 	long	@_do_rdpin
3f49c     40 99 01 00 | 	long	@_do_rqpin
3f4a0     44 71 01 00 | 	long	@_do_pinread
3f4a4     A4 B4 01 00 | 	long	@_do_wrpin
3f4a8     24 B5 01 00 | 	long	@_do_wxpin
3f4ac     A4 B5 01 00 | 	long	@_do_wypin
3f4b0     84 70 01 00 | 	long	@_do_pinfloat
3f4b4     04 71 01 00 | 	long	@_do_pinlo
3f4b8     C4 70 01 00 | 	long	@_do_pinhi
3f4bc     C8 71 01 00 | 	long	@_do_pinstart
3f4c0     D0 72 01 00 | 	long	@_do_pintoggle
3f4c4     F4 7C 01 00 | 	long	@_do_position
3f4c8     AC FB 00 00 | 	long	@_do_cos
3f4cc     F4 AF 01 00 | 	long	@_do_tan
3f4d0     70 DD 00 00 | 	long	@_do_atn
3f4d4     74 DC 00 00 | 	long	@_do_asin
3f4d8     2C DA 00 00 | 	long	@_do_acos
3f4dc     98 AA 01 00 | 	long	@_do_sqr
3f4e0     DC 19 01 00 | 	long	@_do_fill
3f4e4     64 05 01 00 | 	long	@_do_defsnd
3f4e8     BC FD 00 00 | 	long	@_do_defenv
3f4ec     7C 87 01 00 | 	long	@_do_rad
3f4f0     A0 0E 01 00 | 	long	@_do_deg
3f4f4     E0 36 01 00 | 	long	@_do_int
3f4f8     98 73 01 00 | 	long	@_do_play
3f4fc     44 A3 01 00 | 	long	@_do_setdelay
3f500     E4 A3 01 00 | 	long	@_do_setenv
3f504     84 A4 01 00 | 	long	@_do_setlen
3f508     24 A5 01 00 | 	long	@_do_setpan
3f50c     64 A6 01 00 | 	long	@_do_setvol
3f510     04 A7 01 00 | 	long	@_do_setwave
3f514     C4 A5 01 00 | 	long	@_do_setsustain
3f518     64 94 01 00 | 	long	@_do_release
3f51c     10 28 01 00 | 	long	@_do_getenvsustain
3f520     24 7C 01 00 | 	long	@_do_poke
3f524     60 16 01 00 | 	long	@_do_dpoke
3f528     6C 4B 01 00 | 	long	@_do_lpoke
3f52c     14 70 01 00 | 	long	@_do_peek
3f530     F0 15 01 00 | 	long	@_do_dpeek
3f534     FC 4A 01 00 | 	long	@_do_lpeek
3f538     DC 22 01 00 | 	long	@_do_fre
3f53c     08 29 01 00 | 	long	@_do_getnotevalue
3f540     44 BF 01 00 | 	long	@_do_getaddr
3f544     7C 33 01 00 | 	long	@_do_inkey
3f548     AC D9 00 00 | 	long	@_do_abs
3f54c     74 31 01 00 | 	long	@_do_hex
3f550     10 E1 00 00 | 	long	@_do_bin
3f554     F0 B0 01 00 | 	long	@_do_val
3f558     58 F2 00 00 | 	long	@_do_chr
3f55c     28 DB 00 00 | 	long	@_do_asc
3f560     A8 40 01 00 | 	long	@_do_left
3f564     C4 95 01 00 | 	long	@_do_right
3f568     8C 4C 01 00 | 	long	@_do_mid
3f56c     14 42 01 00 | 	long	@_do_len
3f570     60 2C 01 00 | 	long	@_do_gosub
3f574     18 95 01 00 | 	long	@_do_return
3f578     E8 17 01 00 | 	long	@_do_end
3f57c     BC 7C 01 00 | 	long	@_do_pop
3f580     BC 49 01 00 | 	long	@_do_log
3f584     B4 F0 00 00 | 	long	@_do_changevol
3f588     74 F1 00 00 | 	long	@_do_changewav
3f58c     E0 EF 00 00 | 	long	@_do_changepan
3f590     08 EC 00 00 | 	long	@_do_changefreq
3f594     A4 A7 01 00 | 	long	@_do_shutup
3f598     EC 98 01 00 | 	long	@_do_round
3f59c     1C 18 01 00 | 	long	@_do_enter
3f5a0     78 5B 01 00 | 	long	@_do_open
3f5a4     D4 F4 00 00 | 	long	@_do_close
3f5a8     40 23 01 00 | 	long	@_do_get
3f5ac     EC 83 01 00 | 	long	@_do_put
3f5b0     48 E6 00 00 | 	long	@_do_cd
3f5b4     C8 0E 01 00 | 	long	@_do_delete
3f5b8     28 4E 01 00 | 	long	@_do_mkdir
3f5bc     64 DF 00 00 | 	long	@_do_blit
3f5c0     A8 22 01 00 | 	long	@_do_framebuf
3f5c4     B4 5A 01 00 | 	long	@_do_on
3f5c8     88 A9 01 00 | 	long	@_do_skip
3f5cc     9C 37 01 00 | 	long	@_do_input
3f5d0     0C 8A 01 00 | 	long	@_do_read
3f5d4     D8 94 01 00 | 	long	@_do_restore
3f5d8     F0 68 01 00 | 	long	@_do_padx
3f5dc     24 6B 01 00 | 	long	@_do_pady
3f5e0     58 6D 01 00 | 	long	@_do_padz
3f5e4     EC 5D 01 00 | 	long	@_do_padrx
3f5e8     20 60 01 00 | 	long	@_do_padry
3f5ec     54 62 01 00 | 	long	@_do_padrz
3f5f0     BC 66 01 00 | 	long	@_do_padw
3f5f4     88 64 01 00 | 	long	@_do_pads
3f5f8     D4 F7 00 00 | 	long	@_do_copy
3f5fc     90 F5 00 00 | 	long	@_do_coginit
3f600     5C F7 00 00 | 	long	@_do_cogstop
3f604     04 4C 01 00 | 	long	@_do_memlo
3f608     48 4C 01 00 | 	long	@_do_memtop
3f60c     68 A1 01 00 | 	long	@_do_setcolor
3f610     18 27 01 00 | 	long	@_do_getcolor
3f614     F0 FC 00 00 | 	long	@_do_defchar
3f618     10 95 01 00 | 	long	@_do_restorepalette
3f61c     E4 1A 01 00 | 	long	@_do_findfirst
3f620     E4 1D 01 00 | 	long	@_do_findnext
3f624     C8 A0 01 00 | 	long	@_do_setamode
3f628     04 2B 01 00 | 	long	@_do_getrealfreq
3f62c     F4 AC 01 00 | 	long	@_do_str
3f630     A0 2B 02 00 | 	long	@_hg010b_spin2_putchar
3f634     00 24 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3f638     44 24 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3f63c     8C 24 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3f640     30 23 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3f644     A0 23 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3f648     E8 22 03 00 | 	long	@__system____strs_cl_pfunc_
3f64c     90 99 02 00 | 	long	@__system____root_opendir
3f650     2C 9A 02 00 | 	long	@__system____root_closedir
3f654     A8 99 02 00 | 	long	@__system____root_readdir
3f658     34 9A 02 00 | 	long	@__system____root_stat
3f65c     F8 91 02 00 | 	long	@__system____default_putc
3f660     74 91 02 00 | 	long	@__system____default_getc
3f664     A4 92 02 00 | 	long	@__system____default_flush
3f668     38 16 03 00 | 	long	@_fatfs_cc_v_close
3f66c     20 19 03 00 | 	long	@_fatfs_cc_v_read
3f670     AC 19 03 00 | 	long	@_fatfs_cc_v_write
3f674     24 1A 03 00 | 	long	@_fatfs_cc_v_lseek
3f678     C0 1A 03 00 | 	long	@_fatfs_cc_v_ioctl
3f67c     EC 1B 03 00 | 	long	@_fatfs_cc_v_flush
3f680     14 1B 03 00 | 	long	@_fatfs_cc_v_open
3f684     A4 15 03 00 | 	long	@_fatfs_cc_v_creat
3f688     74 16 03 00 | 	long	@_fatfs_cc_v_opendir
3f68c     E8 16 03 00 | 	long	@_fatfs_cc_v_closedir
3f690     28 17 03 00 | 	long	@_fatfs_cc_v_readdir
3f694     F4 17 03 00 | 	long	@_fatfs_cc_v_stat
3f698     D4 1A 03 00 | 	long	@_fatfs_cc_v_mkdir
3f69c     F4 1A 03 00 | 	long	@_fatfs_cc_v_rmdir
3f6a0     E4 1A 03 00 | 	long	@_fatfs_cc_v_remove
3f6a4     04 1B 03 00 | 	long	@_fatfs_cc_v_rename
3f6a8     38 1C 03 00 | 	long	@_fatfs_cc_v_init
3f6ac     40 1C 03 00 | 	long	@_fatfs_cc_v_deinit
3f6b0     38 BA 02 00 | 	long	@_sdmm_cc_v_read
3f6b4     44 BA 02 00 | 	long	@_sdmm_cc_v_write
3f6b8     20 BB 02 00 | 	long	@_sdmm_cc_v_close
3f6bc     50 BA 02 00 | 	long	@_sdmm_cc_v_ioctl
3f6c0     18 BB 02 00 | 	long	@_sdmm_cc_v_flush
3f6c4     74 BA 02 00 | 	long	@_sdmm_cc_v_lseek
3f6c8     48 BB 02 00 | 	long	@_sdmm_cc_v_putc
3f6cc     94 BB 02 00 | 	long	@_sdmm_cc_v_getc
3f6d0     F4 4A 02 00 | 	long	@__system___tx
3f6d4     34 4B 02 00 | 	long	@__system___rx
3f6d8     60 A4 02 00 | 	long	@__system___rxtxioctl_0788
3f6dc     B8 A4 02 00 | 	long	@__system____dummy_flush_0789
3f6e0                 | __heap_base
3f6e0     00 00 00 00 
      ...             
56de0     00 00 00 00 
56de4     00 00 00 00 | 	long	0[24002]
56de8                 | objmem
56de8     00 00 00 00 
      ...             
616dc     00 00 00 00 
616e0     00 00 00 00 | 	long	0[10815]
616e4                 | stackspace
616e4     00 00 00 00 | 	long	0[1]
616e8 140             | 	org	COG_BSS_START
616e8 140             | _var01
616e8 140             | 	res	1
616e8 141             | _var02
616e8 141             | 	res	1
616e8 142             | _var03
616e8 142             | 	res	1
616e8 143             | _var04
616e8 143             | 	res	1
616e8 144             | _var05
616e8 144             | 	res	1
616e8 145             | _var06
616e8 145             | 	res	1
616e8 146             | _var07
616e8 146             | 	res	1
616e8 147             | _var08
616e8 147             | 	res	1
616e8 148             | _var09
616e8 148             | 	res	1
616e8 149             | arg01
616e8 149             | 	res	1
616e8 14a             | arg02
616e8 14a             | 	res	1
616e8 14b             | arg03
616e8 14b             | 	res	1
616e8 14c             | arg04
616e8 14c             | 	res	1
616e8 14d             | arg05
616e8 14d             | 	res	1
616e8 14e             | arg06
616e8 14e             | 	res	1
616e8 14f             | arg07
616e8 14f             | 	res	1
616e8 150             | arg08
616e8 150             | 	res	1
616e8 151             | arg09
616e8 151             | 	res	1
616e8 152             | arg10
616e8 152             | 	res	1
616e8 153             | local01
616e8 153             | 	res	1
616e8 154             | local02
616e8 154             | 	res	1
616e8 155             | local03
616e8 155             | 	res	1
616e8 156             | local04
616e8 156             | 	res	1
616e8 157             | local05
616e8 157             | 	res	1
616e8 158             | local06
616e8 158             | 	res	1
616e8 159             | local07
616e8 159             | 	res	1
616e8 15a             | local08
616e8 15a             | 	res	1
616e8 15b             | local09
616e8 15b             | 	res	1
616e8 15c             | local10
616e8 15c             | 	res	1
616e8 15d             | local11
616e8 15d             | 	res	1
616e8 15e             | local12
616e8 15e             | 	res	1
616e8 15f             | local13
616e8 15f             | 	res	1
616e8 160             | local14
616e8 160             | 	res	1
616e8 161             | local15
616e8 161             | 	res	1
616e8 162             | local16
616e8 162             | 	res	1
616e8 163             | local17
616e8 163             | 	res	1
616e8 164             | local18
616e8 164             | 	res	1
616e8 165             | local19
616e8 165             | 	res	1
616e8 166             | local20
616e8 166             | 	res	1
616e8 167             | local21
616e8 167             | 	res	1
616e8 168             | local22
616e8 168             | 	res	1
616e8 169             | local23
616e8 169             | 	res	1
616e8 16a             | local24
616e8 16a             | 	res	1
616e8 16b             | local25
616e8 16b             | 	res	1
616e8 16c             | local26
616e8 16c             | 	res	1
616e8 16d             | local27
616e8 16d             | 	res	1
616e8 16e             | local28
616e8 16e             | 	res	1
616e8 16f             | local29
616e8 16f             | 	res	1
616e8 170             | local30
616e8 170             | 	res	1
616e8 171             | local31
616e8 171             | 	res	1
616e8 172             | local32
616e8 172             | 	res	1
616e8 173             | local33
616e8 173             | 	res	1
616e8 174             | local34
616e8 174             | 	res	1
616e8 175             | local35
616e8 175             | 	res	1
616e8 176             | local36
616e8 176             | 	res	1
616e8 177             | local37
616e8 177             | 	res	1
616e8 178             | local38
616e8 178             | 	res	1
616e8 179             | local39
616e8 179             | 	res	1
616e8 17a             | local40
616e8 17a             | 	res	1
616e8 17b             | local41
616e8 17b             | 	res	1
616e8 17c             | local42
616e8 17c             | 	res	1
616e8 17d             | local43
616e8 17d             | 	res	1
616e8 17e             | local44
616e8 17e             | 	res	1
616e8 17f             | local45
616e8 17f             | 	res	1
616e8 180             | local46
616e8 180             | 	res	1
616e8 181             | local47
616e8 181             | 	res	1
616e8 182             | local48
616e8 182             | 	res	1
616e8 183             | local49
616e8 183             | 	res	1
616e8 184             | local50
616e8 184             | 	res	1
616e8 185             | local51
616e8 185             | 	res	1
616e8 186             | local52
616e8 186             | 	res	1
616e8 187             | muldiva_
616e8 187             | 	res	1
616e8 188             | muldivb_
616e8 188             | 	res	1
616e8 189             | 	fit	480
616e8 189             | 
